#include <bits/stdc++.h>
using namespace std;

/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______
 * |\  \|\  \  |\  ___ \  |\  ___ \
 * \ \  \/  /|_\ \   __/| \ \   __/|
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;

const int mxN = 200010;


int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	int N;
	string s;
	cin>>s;
	N = s.size();
	deque<int> in0,in1;
	vector<vector<int> > res(N);
	for(int i = 0;i < N;i++) in1.push_back(i);
	for(int i = 0;i < N;i++) {
		if(s[i] == '0') {
			if(in1.empty()) {
				cout<<"-1\n";
				return 0;
			}
			res[in1.front()].push_back(i);
			in0.push_back(in1.front());
			in1.pop_front();
		} else {
			if(in0.empty()) {
				cout<<"-1\n";
				return 0;
			}
			res[in0.front()].push_back(i);
			in1.push_front(in0.front());
			in0.pop_front();
		}
	}
	bool can = true;
	while(!in1.empty() && can) {
		can &= res[in1.back()].empty();
		in1.pop_back();
	}
	if(!can) {
		cout<<"-1\n";
		return 0;
	}
	int K = 0;
	for(int i = 0;i < N;i++) K += !res[i].empty();
	cout<<K<<"\n";
	for(int i = 0;i < N;i++) {
		if(!res[i].empty()) {
			cout<<res[i].size()<<' ';
			for(int j = 0;j < (int)res[i].size();j++) cout<<res[i][j]+1<<" \n"[j+1 == (int)res[i].size()];
		}
	}
	return 0;
}
