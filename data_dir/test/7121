#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string>
#include <stack>
#include <cstring>
#include <vector>
#include <algorithm>

using namespace std;

const int N = 100010;
const int  MOD = int(1e9) + 7;

int n, k, p;
int a;
vector < int > evenGroup, unevenGroup;
vector < int > ans[N];


int main()
{
    scanf("%d%d%d", &n, &k, &p);
    for (int i = 0; i < n; ++i)
    {
        scanf("%d", &a);
        if (a % 2 == 0)
            evenGroup.push_back(a);
        else
            unevenGroup.push_back(a);
    }
    int c = k - p;
    int m = 0, j = 0;
    while (j < unevenGroup.size() && c > 0)
    {
        ans[m++].push_back(unevenGroup[j]);
        j++;
        c--;
    }
    if (c > 0 || c == 0 && (int(unevenGroup.size()) - j) % 2 == 1)
    {
        printf("NO");
        return 0;
    }
    while (j < unevenGroup.size() && p > 0)
    {
        ans[m].push_back(unevenGroup[j]);
        ans[m++].push_back(unevenGroup[j + 1]);
        j += 2;
        p--;
    }
    while (j < unevenGroup.size())
    {
        ans[0].push_back(unevenGroup[j]);
        ans[0].push_back(unevenGroup[j + 1]);
        j += 2;
    }
    j = 0;
    while (j < evenGroup.size() && p > 0)
    {
        ans[m++].push_back(evenGroup[j]);
        j++;
        p--;
    }
    if (p > 0)
    {
        printf("NO");
        return 0;
    }
    while (j < evenGroup.size())
    {
        ans[0].push_back(evenGroup[j]);
        j++;
    }
    printf("YES\n");
    for (int i = 0; i < m; ++i)
    {
        printf("%d ", ans[i].size());
        for (int j = 0; j < ans[i].size(); ++j)
            printf("%d ", ans[i][j]);
        printf("\n");
    }


        



    return 0;
}
