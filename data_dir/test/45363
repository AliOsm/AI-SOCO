#include <bits/stdc++.h>
#define all(x) begin(x), end(x)
#define sz(x) int(x.size())
#define pb push_back
#define int long long

using namespace std;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

const int MOD = 1e9 + 7;

int32_t main()
{
	ios::sync_with_stdio(false);
	// freopen("out2", "w", stdout);
	// set<array<int, 3>> s;
	// for (int i = 1; i <= 255; ++i)
	// 	for (int j = i+1; j <= 255; ++j)
	// 		for (int k = i+2; k <= 255; ++k)
	// 			if ((i^j) == k)
	// 				s.insert({i, j, k});
	// vector<int> sq;
	// map<int, int> ch;
	// for (auto [x, y, z] : s) {
	// 	if (ch[x] == 1 or ch[y] == 1 or ch[z] == 1) continue;
	// 	sq.pb(x); sq.pb(y); sq.pb(z);
	// 	ch[x] = ch[y] = ch[z] = 1;
	// }
	// for (int i = 0; i < min((int)sq.size(), 300LL); i += 1)
	// 	cout << sq[i] << '\n';
	// 	// cout << sq[i] << ' ' << sq[i+1] << ' ' << sq[i+2] << '\n';
	// cout << '\n';
	// return 0;
	// freopen("out1", "w", stdout);
	int t; cin >> t;
	// int t = 300;
	while (t--) {
		int n; cin >> n;
		// int n = 300-t;
		int k = (n-1)/3 + 1;
		// Find k'th number with odd no of binary digits
		int sum = 0;
		for (int len = 1; ; len += 2) {
			// len binary digits
			// 2^(len-1) numbers
			if (sum + (1LL << (len-1)) < k) {
				sum += (1LL << (len-1));
				continue;
			}

			int start = (1LL << (len-1)) + (k - sum - 1);
			int start2 = (2LL << (len-1));
			int l = start2, r = start2  + (1LL << (len-1)) - 1;
			int base = (1LL << (len-1)), lt = (1LL << (len-1));
			while (l < r and lt) {
				int x = lt/4;
				if (start < base + x) {
					r = l + x - 1;
				}
				else if (start < base + 2*x) {
					r = l + 3*x - 1;
					l = l + 2*x;
					base += x;
				}
				else if (start < base + 3*x) {
					r = l + 4*x - 1;
					l = l + 3*x;
					base += 2*x;
				}
				else {
					r = l + 2*x - 1;
					l = l + x;
					base += 3*x;
				}
				lt /= 4;
			}
			if (n%3 == 1) cout << start << '\n';
			else if (n%3 == 2) cout << l << '\n';
			else cout << (start^l) << '\n';
			break;
		}
	}
}