// copied by Nurstan Duisengaliev
// skatal
#include <bits/stdc++.h>
 
#define ll long long
#define all(x) x.begin(), x.end()
#define in insert
#define mp make_pair
#define F first
#define S second
#define ppf pop_front
#define pb push_back
#define ppb pop_back
#define pf push_front
#define pii pair <int, int>
#define boost() ios_base::sync_with_stdio(0), cin.tie(0)
#define sz(x) x.size()
 
using namespace std;
 
const int N = (int)2e5 + 123;
const int mod = (int)1e9 + 7;
const ll INF = (ll)1e18 + 7;
string a;
int n;
int cnt[30], dp[2700][2700];
void check () {
	for (int i = 1; i <= n; i ++) {
		cnt[a[i] - 'a' + 1] ++;
	}
	for (int i = 1; i <= 26; i ++) {
		if (cnt[i] >= 100) {
			for (int j = 1; j <= 100; j ++) {
				cout << char(int('a') + i - 1);
	 		}
			exit (0);
		}
	}
}
pii par[2700][2700];
int calc (int l, int r) { 
	if (l > r) {
		par[l][r] = mp (-1, -1);
		dp[l][r] = 0;
		return 0; 
	}
	if (dp[l][r] != 0) return dp[l][r]; 
	if (l == r) {
		par[l][r] = mp (-1, -1);
		dp[l][r] = 1;
		return 1;
	}
	int res = 0;
	if (a[l] == a[r]) {
		res = calc (l + 1, r - 1) + 2;
		par[l][r] = mp (l + 1, r - 1);
	}
	res = max (res, max (calc (l + 1, r), calc (l, r - 1)));
	if (res == dp[l + 1][r]) {
		par[l][r] = mp (l + 1, r);	
	}
	if (res == dp[l][r - 1]) {
		par[l][r] = mp (l, r - 1);
	}
	dp[l][r] = res;
	return dp[l][r];
}
char ans[N];
void solve () {
	cin >> a;
	n = (int)sz (a);
	a = '#' + a;
	check ();
	calc (1, n);
	int len = dp[1][n], pos = 1;
	int l = 1, r = n;
	while (l <= r) {
		if ((a[l] == a[r] && dp[l][r] == dp[l + 1][r - 1] + 2 && r - l + 1 >= 2) || (l == r)) {
			ans[pos] = a[l];
			ans[len - pos + 1] = a[l];
			pos ++;
			l ++;
			r --;				
		}	
		else {
			 if (dp[l][r] == dp[l + 1][r]) l ++;
			 else r --; 	
		}
	}
	if (dp[1][n] < 100) {
		for (int i = 1; i <= len; i ++) {
			cout << ans[i];
		}
	}
	else {
		if (dp[1][n] % 2 == 0) {
			int uu = (dp[1][n] - 100) / 2;
			for (int i = 1 + uu; i <= len - uu; i ++) cout << ans[i];
		}
		else {
			int uu = (len - 100) / 2;
			for (int i = 1 + uu; i <= uu + 50; i ++) cout << ans[i];
			for (int i = uu + 52; i <= len - uu; i ++) cout << ans[i];
		}
	}
}
 
main () {
//	freopen (".in", "r", stdin);
//	freopen (".out", "w", stdout);
	boost ();
	int TT = 1;
//	cin >> TT;
	while (TT --) {
		solve ();
	}
	return 0;	
}