
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
#include <bitset>
#include <complex>
using namespace std;
#define rep(i, n) for (int (i) = 0; (i) < (n); (i) ++)
#define rep1(i, n) for (int (i) = 1; (i) <= (n); (i) ++)
#define FOR(i, a, b) for (int (i) = (a); (i) <= (b); (i)++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout<<#a<<" :";FOR(i123,x,y)cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int((x).size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

int N, M, Q;
string T[555];
int row[555][555];
int col[555][555];
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0); cin.tie(0);

  cin >> N >> M;
  rep(i,N) cin >> T[i];
  rep(i,N) 
  {
    rep(j,M)
    {
      if (j - 1 >= 0 && T[i][j - 1] == '.' && T[i][j] == '.')
      {
        row[i][j] = 1;
      }
      if (j - 1 >= 0)
      {
        row[i][j] += row[i][j - 1];
      }
    }
  }
  rep(j,M)
  {
    rep(i,N) 
    {
      if (i - 1 >= 0 && T[i - 1][j] == '.' && T[i][j] == '.')
      {
        col[i][j] = 1;
      }
      if (i - 1 >= 0)
      {
        col[i][j] += col[i - 1][j];
      }
    }
  }
//  rep(j,M) 
//  cout << row[2][j] << " ";
//  cout << endl;
//  rep(i,N) 
//  cout << col[i][2] << " ";
//  cout << endl;

  cin >> Q;
  vector<int> ansv;
  rep(o_o, Q)
  {
    int r1, c1, r2, c2;
    cin >> r1 >> c1 >> r2 >> c2;
    r1--; c1--; r2--; c2--;
    int ans = 0;
    for (int r = r1; r <= r2; r++)
    {
      ans += row[r][c2] - row[r][c1];
    }
    for (int c = c1; c <= c2; c++)
    {
      ans += col[r2][c] - col[r1][c];
    }
    ansv.pb(ans);
  }
  rep(i,sz(ansv)) cout << ansv[i] << endl;

}
