// in the name of god 
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
#include <bits/stdc++.h>
#include <unistd.h>
using namespace std ;
using namespace __gnu_pbds;
void operator+=(vector<int>&in1,const vector<int>&in2){for(int i=0;i<in2.size();i++)in1.push_back(in2[i]);}
#define y2 sdfklgjsdkfd
#define y1 sdfklgjsdkafd
#define L first 
#define R second
#define X first 
#define Y second
#define int long long 
typedef long long ll ;
typedef long double ld ;
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define ALL(x) (x).begin(),(x).end()
typedef pair < int , int > pii ; 
typedef pair < int , pii > pi_ii ;
typedef pair < pii , int > pii_i ;
typedef pair < pii , pii > pii_ii ;
#define ordered_set(TYPE) tree<TYPE, null_type, less<TYPE>, rb_tree_tag, tree_order_statistics_node_update>
//#define "%I64d" "%I64d
const int mod = 1e9 + 7 ;
const int maxL = 22 ;
const ll inf = 1e16 ;
const int baze = 156 ;
const int maxn = 1e5 +10 ;

bool check ( int x ) 
{ 
  vector < int > vc ;
  vc . push_back ( x % 10 ) , x /= 10 ; 
  vc . push_back ( x % 10 ) , x /= 10 ; 
  vc . push_back ( x % 10 ) , x /= 10 ; 
  vc . push_back ( x % 10 ) , x /= 10 ; 
  sort ( ALL ( vc ) ) ; 
  return ( unique ( ALL ( vc ) ) - vc . begin ( )  == 4 ) ;
}

pii query ( int x , int y ) 
{ 
  vector < int > vcx , vcy ;
  vcx . push_back ( x % 10 ) , x /= 10 ; 
  vcx . push_back ( x % 10 ) , x /= 10 ; 
  vcx . push_back ( x % 10 ) , x /= 10 ; 
  vcx . push_back ( x % 10 ) , x /= 10 ; 
  
  vcy . push_back ( y % 10 ) , y /= 10 ; 
  vcy . push_back ( y % 10 ) , y /= 10 ; 
  vcy . push_back ( y % 10 ) , y /= 10 ; 
  vcy . push_back ( y % 10 ) , y /= 10 ; 
  reverse ( ALL ( vcx ) ) ;  
  reverse ( ALL ( vcy ) ) ;  
  pii ret ( 0 , 0 ) ;
  ret . X = 0 , ret . Y = 0 ;
  for ( int i = 0 ; i < 4 ; i ++ ) 
    if ( vcx [ i ] == vcy [ i ] )
      ret . X ++ ; 
  for ( int i = 0 ; i < 4 ; i ++ ) 
    { 
      bool flag = 0 ; 
      for ( int j = 0 ; j < 4 ; j ++ )
	if ( i !=j  )
	  if ( vcx [ i ] == vcy [ j ] ) 
	    flag = 1 ;
      if ( flag ) 
	ret . Y ++ ; 
    }
  return ret ; 
} 
vector < int > vc ;

int get ( int x ) 
{
  int ret = 0 ;
  map < pii , int > mp ;
  for ( int i = 0 ; i < vc . size ( ) ; i ++ ) 
    mp [ query ( vc [ i ] , x ) ] ++ ; 
  for ( int i = 0 ; i <= 4 ; i++ )
    for ( int j = 0 ; j <= 4 ; j ++ ) 
      ret = max ( ret , mp [ pii ( i , j ) ] ) ; 
  return ret ; 
} 

string naaaa ( char ch ) 
{ 
  string s = "" ;
  s += ch ;
  return s ;
}

void aaahhh ( int x ) 
{ 
  string s ;
  int danial = x ;
  s += naaaa ( x % 10+'0' ) , x /= 10 ;
  s += naaaa ( x % 10+'0' ) , x /= 10 ;
  s += naaaa ( x % 10+'0' ) , x /= 10 ;
  s += naaaa ( x % 10+'0' ) , x /= 10 ;
  reverse ( ALL ( s ) ) ;
  cout << s << endl ;
  fflush ( stdout ) ;
  pii p ; 
  x = danial ;
  //  cout << query ( 123 , x ) . X << ' ' ;
  // cout << query ( 123 , x ) . Y << endl ;
  cin >> p . X >> p . Y ; 
  vector < int > hlp ; 
  for ( int i = 0 ; i < vc . size ( ) ; i ++) 
    if ( query ( vc [i ] , x ) == p ) 
      hlp  .push_back ( vc [ i ] ) ;
  vc = hlp ;
} 

main ( ) 
{ 
  while ( 0 ) 
    { 
      int x , y; 
      cin >> x >> y ;
      cout << query ( x , y ) . X << ' ' << query ( x , y ) . Y << endl ;
    } 
  vector < int > HLP ; 
  for ( int i =  0 ; i <= 9999 ; i ++ )
    if ( check ( i ) ) 
      vc . push_back ( i )  ;
  HLP = vc ;
  //cerr << vc . size ( ) << endl ;
  for ( int cnt = 0 ; ; cnt ++ ) 
    {
      if ( vc . size() == 0 )break ; 
      if ( vc . size ( ) == 1 )  
	{ 
	  int x = vc [ 0 ] ;
	  string s ;
	  s += naaaa ( x % 10+'0' ) , x /= 10 ;
	  s += naaaa ( x % 10+'0' ) , x /= 10 ;
	  s += naaaa ( x % 10+'0' ) , x /= 10 ;
	  s += naaaa ( x % 10+'0' ) , x /= 10 ;
	  reverse ( ALL ( s ) ) ;
	  cout << s << endl ;
	  fflush ( stdout ) ;
	  return 0 ;
	}  
      int hlp = 100000 , pos = 0 ; 
      for ( int i = 0 ; i < 400 ; i ++ )
	{
	  //	  cerr << i << endl ;
	  int x = rand ( ) % HLP . size ( ) , y = get ( HLP [ x ] ) ;
	  if ( y < hlp ) 
	    hlp = y , pos = HLP [ x ] ; 
	}
      aaahhh ( pos ) ; 
    }
  
} 
