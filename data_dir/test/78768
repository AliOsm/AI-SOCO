#include<bits/stdc++.h> 

#define ll long long
#define ios ios_base::sync_with_stdio(false);cin.tie(NULL);
#define sz size()
#define pb push_back
#define mp make_pair
#define F first
#define S second      
#define all(s) s.begin(), s.end()
#define file(s) freopen(s".in","r",stdin); freopen(s".out","w",stdout);
#define INF INT_MAX
using namespace std;    
const int maxn = (int)1e6 + 78;
int n,m,  a[maxn], pr[maxn], t[maxn * 4], Nxt[maxn], ans[maxn];
map<int, int> Id, was;
vector<pair<int, int> > g[maxn];
void upd(int pos, int val, int v = 1, int tl = 1, int tr = n){
	if(tl == tr){
		t[v] = val;
		return;
	}else{
		int tm = (tl + tr) >> 1;
		if(pos <= tm)
			upd(pos, val, v + v, tl, tm);
		else
			upd(pos, val, v + v + 1, tm + 1, tr);
	}
	t[v] = (t[v + v] ^ t[v + v + 1]);
} 
int get(int l, int r,  int v = 1, int tl = 1, int tr = n){
	if(l > r || tl > r || tr < l){
		return 0;
	}
	if(l <= tl && tr <= r){                                            
		return t[v];
	}  
	int tm = (tl + tr) >> 1;
	return get(l, r, v + v, tl, tm) ^ get(l, r, v + v + 1, tm + 1, tr);
}
int main () {
//	ios;   
	scanf("%d", &n);
	for(int i = 1; i <= n; i++)
		scanf("%d", a + i), pr[i] = pr[i - 1] ^ a[i];     
	for(int i = n; i >= 1; i--){
		Nxt[i] = Id[a[i]];
		Id[a[i]] = i;                                                                            
	}
//	cout << pr[n] << " "; 
	for(int i = 1; i <= n; i++){                                 
		if(!was[a[i]]){
			upd(i, a[i]);
			was[a[i]] = 1;
		}
	}
//	cout << t[1] << " " << get(1, n) << endl;
	scanf("%d", &m);
	for(int i = 1; i <= m; i++){
		int l, r;
		scanf("%d", &l);
		scanf("%d", &r);
		g[l].pb(mp(r, i));
	}
	for(int i = 1; i <= n; i++){
	//	cout << Nxt[i - 1] << " " << get(1, n) << endl;
		if(i > 1)
			upd(i - 1, 0);
		if(Nxt[i - 1])
		upd(Nxt[i - 1], a[i - 1]);
	//	cout << get(1, n) << endl;
		for(auto id : g[i]){
		//	cout << i << " "  << id.F << endl;// << " " << (pr[id.F] ^ pr[i - 1]) << " " << get(i, id.F) << endl; 
			ans[id.S] = (pr[id.F] ^ pr[i - 1]) ^ get(i, id.F);	
		}
	//	break;
	}               	
	for(int i = 1; i <= m; i++)
		printf("%d\n", ans[i]);
}          
   