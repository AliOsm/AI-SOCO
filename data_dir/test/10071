#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
// #pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native")
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
#include <random>
#include <sstream>
#include <complex>
 
using namespace std;

#define int long long
#define ull unsigned long long
#define double long double
#define time time228
#define left left228
#define right right228

template<typename T> void uin(T &a, T b) {
    if (b < a) a = b;
}

template<typename T> void uax(T &a, T b) {
    if (b > a) a = b;
}

const int INF = 1e18 + 100000000;

int power(int a, int b) {
    int res = 1;
    for (int it = 0; it < b; ++it) {
        if (res > INF / a) return INF;
        res *= a;
    }
    return res;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int x, y, l, r;
    cin >> x >> y >> l >> r;
    vector<int> v;
    for (int a = 0; a <= 100; ++a) {
        for (int b = 0; b <= 100; ++b) {
            int kek = min(INF, power(x, a) + power(y, b));
            if (kek <= r && kek >= l) {
                v.push_back(kek);
            }
        }
    }
    sort(v.begin(), v.end());
    int res = 0;

    if (!v.empty()) uax(res, v[0] - l), uax(res, r - v.back());
    else res = r - l + 1;
    for (int i = 0; i < (int)v.size() - 1; ++i) {
        uax(res, v[i + 1] - v[i] - 1);
    }
    
    cout << res << '\n';
    return 0;
}
