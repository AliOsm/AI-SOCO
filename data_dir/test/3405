#include <bits/stdc++.h>

#define itn int
#define all(x) (x).begin(), (x).end()
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())

#define random_shuffle(...) shuffle(__VA_ARGS__, rng)
#define rand() rng()

#ifdef OLBOEB
	#define return std::cerr << __FUNCTION__ << "\n"; return
#endif  // OLBOEB

using namespace std;

inline int nxt() {
	int x;
	scanf("%d", &x);
	return x;
}

const int N = 333333;
int mu[N];
int erat[N];

int cnt[N];

vector<int> mods;
const int M = 10;
long long C[N][M];

bool isPrime(int n) {
	for (int i = 2; i * i <= n; ++i) {
		if (n % i == 0) {
			return false;
		}
	}
	return true;
}

bool check(int k, int mod) {
	long long ans = 0;
	for (int i = 1; i < N; ++i) {
		ans += mu[i] * C[cnt[i]][k];
	}
	ans %= mod;
	if (ans < 0) {
		ans += mod;
	}
	return !!ans;
}

int main() {
	mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

	for (int m = 9.9e8; (int)mods.size() < M; ++m) {
		if (isPrime(m)) {
			mods.push_back(m);
		}
	}

	erat[1] = mu[1] = 1;
	for (int i = 2; i < N; ++i) {
		if (erat[i] == 0) {
			erat[i] = i;
			if (1.0 * i * i < N + N) {
				for (int j = i * i; j < N; j += i) {
					if (erat[j] == 0) {
						erat[j] = i;
					}
				}
			}
		}

		if (erat[i] == erat[i / erat[i]]) {
			mu[i] = 0;
		} else {
			mu[i] = -mu[i / erat[i]];
		}
	}

	int n = nxt();
	int g = 0;
	for (int i = 0; i < n; ++i) {
		int x = nxt();
		cnt[x] += 1;
		g = gcd(g, x);
	}

	if (g > 1) {
		cout << "-1\n";
		return 0;
	}

	for (int i = 1; i < N; ++i) {
		for (int j = i * 2; j < N; j += i) {
			cnt[i] += cnt[j];
		}
	}

	int ans = n;
	for (int mod : mods) {
		for (int i = 0; i < N; ++i) {
			C[i][0] = 1;
			for (int j = 1; j < M && j < i; ++j) {
				C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]);
				if (C[i][j] >= mod) {
					C[i][j] -= mod;
				}
			}
			if (i < M) {
				C[i][i] = 1;
			}
		}

		bool found = false;
		for (int k = 1; !found; ++k) {
			if (check(k, mod)) {
				ans = min(ans, k);
				found = true;
			}
		}
	}

	printf("%d\n", ans);

	return 0;
}
