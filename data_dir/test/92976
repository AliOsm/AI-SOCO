//void __(){
//    vvi lboots(256),rboots(256);
//    _(int,n);
//    _(string,s);
//    _(string,t);
//    rep(i,n)
//        lboots[s[i]].pb(i+1);
//    rep(i,n)
//        rboots[t[i]].pb(i+1);
//    vpii ans;
//    for(char c = 'a'; c <= 'z'; ++c){
//        while(!lboots[c].empty() && !rboots[c].empty()){
//            ans.pb({lboots[c].back(), rboots[c].back()});
//            lboots[c].pop_back();
//            rboots[c].pop_back();
//        }
//    }
//    for(char c = 'a'; c <= 'z'; ++c){
//        while(!lboots[c].empty() && !rboots['?'].empty()){
//            ans.pb({lboots[c].back(), rboots['?'].back()});
//            lboots[c].pop_back();
//            rboots['?'].pop_back();
//        }
//        while(!lboots['?'].empty() && !rboots[c].empty()){
//            ans.pb({lboots['?'].back(), rboots[c].back()});
//            lboots['?'].pop_back();
//            rboots[c].pop_back();
//        }
//    }
//    while(!lboots['?'].empty() && !rboots['?'].empty()){
//        ans.pb({lboots['?'].back(),rboots['?'].back()});
//        lboots['?'].pop_back();
//        rboots['?'].pop_back();
//    }
//    print sz(ans);
//    print_vn ans;
//
//}
//
#include <iomanip>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define pb push_back
#define REP_ZERO_INT(i,r) for(int i = 0; i < (r); ++i)
#define GET_REP_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define rep(...) GET_REP_MACRO(__VA_ARGS__,REP_ANY,REP_INT,REP_ZERO_INT)(__VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef vector<pii> vpii;

T1 ostream& operator<<(ostream& stream, const vector<T>& t);
template <typename F, typename S> static
ostream& operator<<(ostream& stream, const pair<F, S>& t){
    return stream << t.first << ' ' << t.second;
}
T1 istream& read(T, T, istream& = cin);
struct _print {
    string sep,end;
    bool space;
    ostream &stream;
    _print(string _sep=" ",string _end="\n",
            ostream &_stream = cout) 
        : sep(_sep),end(_end),space(false),
            stream(_stream) {}
    ~_print() { stream << end; }

    template <typename T>
        _print &operator , (const T &t) {
            if (space) stream << sep;
            space = true;
            stream << t;
            return *this;
        }
};
struct _print2{
    string s1,s2,end;
    bool space;
    ostream &stream;
    _print2(string _s1 = " ", string _s2 = " ", string _end="\n", ostream &_stream = cout)
        :s1(_s1),s2(_s2),end(_end),space(false),
        stream(_stream) {}
    ~_print2() { stream << end; }

    template <typename T>
        _print2 &operator , (const T &t) {
            for(auto _ : t){
                if (space) stream << s1;
                space = true;
                _print p(s2,"",stream);
                    p,_;
            }
            return *this;
        }
};
#define print _print(),
#define print_vn _print2("\n"," ","\n"),
#define INPUT_WITHOUT_INIT(type,name) type name; cin >> name
#define GET_INPUT_MACRO(_1,_2,_3,_4,_5,_6,_7,_8,NAME,...) NAME
#define _(...) GET_INPUT_MACRO(__VA_ARGS__,_IWI,_IWI,_IWI,_IWI,_IWI,_IWI,INPUT_WITHOUT_INIT)(__VA_ARGS__)
void __(){
    vvi lboots(256),rboots(256);
    _(int,n);
    _(string,s);
    _(string,t);
    rep(i,n)
        lboots[s[i]].pb(i+1);
    rep(i,n)
        rboots[t[i]].pb(i+1);
    vpii ans;
    for(char c = 'a'; c <= 'z'; ++c){
        while(!lboots[c].empty() && !rboots[c].empty()){
            ans.pb({lboots[c].back(), rboots[c].back()});
            lboots[c].pop_back();
            rboots[c].pop_back();
        }
    }
    for(char c = 'a'; c <= 'z'; ++c){
        while(!lboots[c].empty() && !rboots['?'].empty()){
            ans.pb({lboots[c].back(), rboots['?'].back()});
            lboots[c].pop_back();
            rboots['?'].pop_back();
        }
        while(!lboots['?'].empty() && !rboots[c].empty()){
            ans.pb({lboots['?'].back(), rboots[c].back()});
            lboots['?'].pop_back();
            rboots[c].pop_back();
        }
    }
    while(!lboots['?'].empty() && !rboots['?'].empty()){
        ans.pb({lboots['?'].back(),rboots['?'].back()});
        lboots['?'].pop_back();
        rboots['?'].pop_back();
    }
    print sz(ans);
    print_vn ans;

}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        __();
}

