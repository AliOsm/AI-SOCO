#pragma GCC optimize("Ofast,fast-math,unroll-loops")

#include <bits/stdc++.h>

typedef long long ll;

using namespace std;

void dout() { cerr << '\n'; }

template<typename Head, typename... Tail>
void dout(Head H, Tail... T) {
	cerr << H << ' ';
	dout(T...);
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0), cout.tie(0);
	int n, m;
	cin >> n >> m;
	vector<vector<int>>a(n, vector<int>(m));
	for (int i = 0; i < n; i++) {
	 	for (int j = 0; j < m; j++) {
	 	 	cin >> a[i][j];
	 	}
	}

	int ans = 0;
	vector<int>shift(n, 0);
	for (int j = 0; j < m; j++) {
		fill(shift.begin(), shift.end(), 0);
		vector<int>need(n);
		for (int i = 0; i < n; i++) {
		 	need[i] = i * m + j + 1;
		}

	 	for (int i = 0; i < n; i++) {
	 		int pos = lower_bound(need.begin(), need.end(), a[i][j]) - need.begin();
	 		if (pos < n && need[pos] == a[i][j]) {
	 		 	int delta = (i - pos + n) % n;
	 		 	shift[delta]++;
	 	 	}
	 	}

	 	int cur = n;
	 	for (int i = 0; i < n; i++) {
	 	 	cur = min(cur, i + (n - shift[i]));
	 	}

	 	ans += cur;
	}

	cout << ans;
}
