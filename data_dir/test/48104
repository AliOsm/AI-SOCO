#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define int long long
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
vector<vector<int> >adj;
int vis[1005];
vector<int>temp;
vector<int>comp;
int ans[1005];
void dfs(int ver)
{
   vis[ver]=1;
   for(auto i:adj[ver])
   {
      if(vis[i]==0)
      {
         dfs(i);
      }
   }
   comp.push_back(ver);
}
void dfs2(int ver)
{
   // cout<<ver<<" ";
   temp.push_back(ver);
   vis[ver]=1;
   for(auto i:adj[ver])
   {
      if(vis[i]==0)
      {
         dfs2(i);
      }
   }   
}

signed main()
{
     ios_base::sync_with_stdio(false);
     cin.tie(NULL);  
 #ifndef ONLINE_JUDGE
    freopen ("INPUT.txt" , "r" , stdin);
    freopen ("OUTPUT.txt" , "w" , stdout);
 #endif

// -------------------------------------Code starts here---------------------------------------------------------------------     

   int n,m;
   cin>>n>>m;
   adj.resize(2*m+2);
   pair<int,int>p[m+1];
   for(int i=1;i<=m;i++)
   {
      cin>>p[i].first>>p[i].second;
      if(p[i].first>p[i].second)
         swap(p[i].first,p[i].second);
   }
   fill_n(ans,1005,-1);
   for(int i=1;i<=m;i++)
      for(int j=1;j<=m;j++)
      {
         if(i==j)
            continue;
         int z=(p[j].first-p[i].first)*(p[j].second-p[i].second);
         if(z>0 && !(p[i].first>=p[j].second ||p[j].first>=p[i].second))
         {
            // cout<<i<<" "<<j<<'\n';
            adj[2*i].push_back(2*j+1);
            adj[2*i+1].push_back(2*j);
         }
         // else
         // {
         //    adj[2*i].push_back(2*j);
         //    adj[2*i+1].push_back(2*j+1);            
         // }         
      }

   for(int i=2;i<=2*m+1;i++)
   {
      if(vis[i]==0)
         dfs(i);
   }  
   fill_n(vis,1005,0);
   reverse(comp.begin(),comp.end());
   for(auto i:comp)
   {
      if(vis[i]==0)
      {
         // cout<<'\n';
         temp.clear();
         dfs2(i);     
         sort(temp.begin(),temp.end());
         int sz=temp.size();
         for(int j=0;j<sz-1;j++)
         {
            if(temp[j]+1==temp[j+1] && temp[j]%2==0)
            {
               cout<<"Impossible";
               return 0;
            }
         }   
         int z=0;
         for(auto j:temp)
         {
            if(ans[j]!=-1)
            {
               z=ans[j];
               break;
            }
         } 
         for(auto j:temp)
         {
            if(j%2)
            {
               ans[j-1]=(z+1)%2;
               ans[j]=z;
            }
            else
            {
               ans[j+1]=(z+1)%2;
               ans[j]=z;
            }            
         }
      }
   }

   for(int i=1;i<=m;i++)
   {
      if(ans[2*i])
         cout<<'o';
      else
         cout<<'i';
   }

// -------------------------------------Code ends here------------------------------------------------------------------
     clock_t clk;
 	clk = clock();
 
    clk = clock() - clk;
 	cerr << fixed << setprecision(6) << "Time: " << ((double)clk)/CLOCKS_PER_SEC << "\n";
 	return 0;
 }