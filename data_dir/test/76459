#pragma optimization_level 3
//#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC target("avx,avx2,fma")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("sumsqr.in");ofstream out("sumsqr.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

int main() {
    fast;
    str t; cin>>t;
    int a = t.size();
    vec<vec<int>> dp(a, vec<int>(a)), isp(a, vec<int>(a));
    for(int d=1; d<=a; d++){
        for(int l=0; l+d<=a; l++){
            int r = l+d-1;
            if(d==1) isp[l][r] = 1;
            else if(d==2) isp[l][r] = t[l]==t[r];
            else isp[l][r] = isp[l+1][r-1] && t[l]==t[r];
        }
    }
    for(int d=1; d<=a; d++){
        for(int l=0; l+d<=a; l++){
            int r = l+d-1;
            if(d==1) dp[l][r] = 1;
            else if(d==2) dp[l][r] = 2+isp[l][r];
            else{
                dp[l][r] = isp[l][r]+dp[l][r-1]+dp[l+1][r]-dp[l+1][r-1];
            }
        }
    }
    //for(int q=0; q<a; q++){for(int w=0; w<a; w++) cout<<dp[q][w]<<" ";cout<<endl;}
    ll o = 0;
    for(int l=0; l<a; l++){
        for(int r=l; r+1<a; r++){
            o += isp[l][r]*dp[r+1][a-1];
        }
    }
    cout<<o;
}
