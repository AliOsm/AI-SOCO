#include<bits/stdc++.h>
#define fr first
#define sc second
#define pb push_back
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int> >
#define ll long long
const int INF = 1e8;
const int MAXN = 3e5 + 200;
const  long double eps = 1e-16;
const long double pi = acos(-1.0);
using namespace std;

int dx[] = {0, 0, 1, 1, 1, -1, -1, -1};
int dy[] = {1, -1, 0, 1, -1, 0, 1, -1};

int pref[27][2011];
int suff[27][2011];
int f[27][2011];
int a[2011];
int n;
void solve(){
    cin >> n;
    for (int i = 0; i <= 26; i++){
        for (int j = 0; j <= n + 1; j++) {
            pref[i][j] = 0;
            suff[i][j] = 0;
            f[i][j] = 0;
        }
    }
    for (int i = 1; i <= n; i++) cin >> a[i];
    for (int i = 1; i <= n; i++){
        for (int j = 1; j <= 26; j++)
            pref[j][i] = pref[j][i - 1];
        pref[a[i]][i]++;
    }

    for (int i = n; i >= 1; i--){
        for (int j = 1; j <= 26; j++)
            suff[j][i] = suff[j][i + 1];
        suff[a[i]][i]++;
        int kol = suff[a[i]][i];
        if (f[a[i]][kol] == 0) f[a[i]][kol] = i;
    }
    int ans = 1;
    for (int i = 1; i <= n; i++){
        for (int j = 1; j <= 26; j++){
            int kol = pref[j][i];
            if (f[j][kol] == 0) continue;
            if (f[j][kol] <= i) continue;
            int ind = f[j][kol];

            //if (i == 2 && j == 1) cout << kol << " " << ind << endl;
            int mx = 0;
            for (int q = 1; q <= 26; q++)
                mx = max(mx, pref[q][ind - 1] - pref[q][i]);
            //if (i == 2 && j == 1) cout << mx << endl;
            ans = max(ans, mx + 2 * kol);
        }
    }
    cout << ans << endl;
}
int main(){
    ios::sync_with_stdio(NULL), cin.tie(0), cout.tie(0);
    cout.setf(ios::fixed), cout.precision(7);
    //freopen("inevit.in", "r", stdin);
    //freopen("inevit.out", "w", stdout);
    int step;
    //step = 1;
    cin >> step;
    for (int i = 1; i <= step; i++)
        solve();

}