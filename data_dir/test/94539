#include <bits/stdc++.h>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
#define PI 3.14159265358979323846
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;

const int MAX = 200010;

// BIT
int up[MAX];

void Set(int pos, int to){
  ++pos;
  for(;pos < MAX;pos += (pos & (-pos)))
    relaxMax(up[pos], to);
}

int Get(int pos){
  ++pos;
  int res = 0;
  for(;pos > 0;pos -= (pos & (-pos)))
    relaxMax(res, up[pos]);
  return res;
}

// Solution
int n, m;
int dlt[MAX];

int main(){
  scanf("%d%d", &m, &n);
  for(int i = 0;i < m;++i){
    int l, r;
    scanf("%d%d", &l, &r);
    --l, --r;
    ++dlt[l];
    --dlt[r + 1];
  }

  vector<pii> nal;
  int start = 0, bal = dlt[0];
  for(int i = 1;i < n;++i)
    if(dlt[i] != 0){
      nal.pb(mp(i - start, bal));
      start = i;
      bal += dlt[i];
    }
  if(start < n)
    nal.pb(mp(n - start, bal));

  // Sol
  vi grow(sz(nal)), decr(sz(nal));
  int ans = 0;

  for(int i = 0;i < sz(nal);++i){
    auto& e = nal[i];
    int before = Get(e.se);
    int now = before + e.fi;
    relaxMax(ans, now);
    Set(e.se, now);

    grow[i] = now;
    relaxMax(ans, now);
  }

  memset(up, 0, sizeof up);
  for(int i = sz(nal) - 1;i >= 0;--i){
    auto& e = nal[i];
    int before = Get(e.se);
    int now = before + e.fi;
    relaxMax(ans, now);
    Set(e.se, now);

    decr[i] = now;
    relaxMax(ans, now);
  }

  for(int i = 0;i < sz(nal);++i){
    relaxMax(ans, grow[i] + decr[i] - nal[i].fi);
  }

  printf("%d\n", ans);

  return 0;
}
