/* winners never quit and quitters never win.
      #swap                                 */
      
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
using namespace std;
using namespace __gnu_pbds;
#pragma GCC optimize ("-O3")
using ll = long long;
using ld = long double;
const ll mod = 1000000007;
const ll inf = 1000000000000000000;
const ll rk = 256;

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

#define pb push_back
#define mp make_pair
#define vc vector
#define fs first
#define sec second
#define pq priority_queue
#define lb lower_bound
#define ub upper_bound
#define pll pair<ll,ll> 
#define pls pair<ll,string>
#define psl pair<string,ll>
#define plc pair<ll,char>
#define pcl pair<char,ll>
#define pss pair<string,string>
#define all(v) v.begin(),v.end()
#define tol(s) transform(s.begin(),s.end(),s.begin(),::tolower);
#define tou(s) transform(s.begin(),s.end(),s.begin(),::toupper);

#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }

void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
	cerr << *it << " = " << a << endl;
	err(++it, args...);
}

#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define T ll t=0;cin>>t;for(ll test=0;test<t;test++)

string s[65];
ll n,m;

bool checkm()
{
	rep(a,0,n)
		rep(b,0,m)
			if(s[a][b]=='A')
				return false;
	return true;
}

bool check0()
{
	rep(a,0,n)
		rep(b,0,m)
			if(s[a][b]=='P')
				return false;
	return true;
}

bool check1()
{
	ll row1=0,row2=0;
	rep(a,0,m)
	{
		if(s[0][a]=='A')
			row1++;
		if(s[n-1][a]=='A')
			row2++;
	}
	if(row1==m or row2==m)
		return true;
	ll col1=0,col2=0;
	rep(a,0,n)
	{
		if(s[a][0]=='A')
			col1++;
		if(s[a][m-1]=='A')
			col2++;
	}
	if(col1==n or col2==n)
		return true;
	return false;
}

bool check2()
{
	if(s[0][0]=='A' or s[0][m-1]=='A' or s[n-1][0]=='A' or s[n-1][m-1]=='A')
		return true;
		
	ll col[m]={0};
	rep(a,0,n)
	{
		ll row=0;
		rep(b,0,m)
		{
			if(s[a][b]=='A')
			{
				row++;
				col[b]++;
			}
			if(col[b]==n){
				return true;
			}
		}
		if(row==m){
			return true;
		}
	}
	return false;
}

bool check3()
{
	rep(a,0,m)
		if(s[0][a]=='A' or s[n-1][a]=='A')
			return true;
	rep(a,0,n)
		if(s[a][0]=='A' or s[a][m-1]=='A')
			return true;
	return false;
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
	//isprime();
	//coeff();
	/*freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);*/
    T
    {
		cin>>n>>m;
		rep(a,0,n)
			cin>>s[a];
		if(checkm())
			cout<<"MORTAL"<<endl;
		else if(check0())
			cout<<0<<endl;
		else if(check1())
			cout<<1<<endl;
		else if(check2())
			cout<<2<<endl;
		else if(check3())
			cout<<3<<endl;
		else
			cout<<4<<endl;
	}
	return 0;
}
