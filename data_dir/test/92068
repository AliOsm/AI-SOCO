#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair

using namespace std;

int n, m, q;
vector < int > g[301010];
int p[301010]; 
int d[301010];
int ans[301010];
int sz[301010];

void dfs (int v, int pr = 0) {
	if(pr) p[v] = pr;
	sz[v] = 1;
	int mx = 0, mx2 = 0;
	for (auto to : g[v]) {
		if(!p[to]) {
			dfs(to, v);
			sz[v] += sz[to];
			d[v] = max(d[v], d[to] + 1);
			if (d[to] + 1 > mx) {
					mx2 = mx;
					mx = d[to] + 1;
			}
			else mx2 = max (mx2, d[to] + 1);
			ans[v] = max(mx + mx2, ans[v]);
			ans[v] = max(ans[v], ans[to]);
		}
	}
}

int get (int v) {
	if(p[v] == v) return v;
	return p[v] = get(p[v]); 
}

void unite (int u, int v) {
	u = get(u), v = get(v);
	if(u == v) return ;
	if (sz[u] < sz[v]) swap(u, v);
	sz[u] += sz[v];
	p[v] = u;
	ans[u] = max(max(ans[u], ans[v]), (ans[u] + 1) / 2 + (ans[v] + 1) / 2 + 1);
}

int main () {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> m >> q;
	for (int i = 1, u, v; i <= m; i ++) {
		cin >> u >> v;
		g[u].pb(v);
		g[v].pb(u);
	}	

	for (int i = 1; i <= n; i ++)
		if(!p[i]) {
			p[i] = i;
			dfs(i);
		}

	for (int i = 1; i <= q; i ++) {
		int tt; cin >> tt;
		if (tt == 1) {
			int x; 
			cin >> x;
			x = get (x);
			cout << ans[x] << '\n';
		} else {
			int x, y;
			cin >> x >> y;
			unite (x, y);
		}
	}
}