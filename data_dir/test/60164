#include<bits/stdc++.h>
using namespace std;
//#define int long long
#define fast ios_base::sync_with_stdio(false)
typedef long long ll;
typedef long double ld;
const int mod = 1e9 + 7;
#define x first
#define y second
//#define int long long
const int N = (1 << 20);
void upd(int & a, int b){
    a += b;
    if(a >= mod) a -= mod;
}
int n, m, k;
ll c[N];
int parent[N];
int size[N];
int find_set(int v){
    if(v == parent[v]) return v;
    return parent[v] = find_set(parent[v]);
}
bool union_sets (int a, int b) {
	a = find_set (a);
	b = find_set (b);
	if (a != b) {
		if (rand() & 1)
			swap (a, b);
		parent[b] = a;
		return true;
	}
	return false;
}
vector<pair<int, int> > mp[N];
vector<ll> compr;
int deg[N];
pair<int, int> quer[N];
signed main(){
    fast;
    deg[0] = 1;
    for(int i = 1; i < N; ++i){
        deg[i] = deg[i - 1];
        upd(deg[i], deg[i - 1]);
    }
    cin >> n >> m >> k;
    for(int i = 0; i < n; ++i){
        cin >> c[i];
    }
    ll cnt = (1ll << k);
    for(int i = 0; i < m; ++i){
        int x, y;
        cin >> x >> y;
        --x; --y;
        quer[i] = {x, y};
        if(c[x] != c[y])
            compr.push_back(c[x] ^ c[y]);
    }
    sort(compr.begin(), compr.end());
    compr.erase(unique(compr.begin(), compr.end()), compr.end());
    for(int i = 0; i < m; ++i){
        int x = quer[i].first;
        int y = quer[i].second;
        if(c[x] == c[y]) continue; // c[x] ^ c[y] == 0
        ll val = c[x] ^ c[y];
        int pos = lower_bound(compr.begin(), compr.end(), val) - compr.begin();
        mp[pos].push_back({x, y});
    }
    int ans = 0;
    for(int it = 0; it < (int)compr.size(); ++it){
        auto gg = mp[it];
        for(auto it : gg){
            parent[it.first] = it.first;
            parent[it.second] = it.second;
            size[it.first] = 1;
            size[it.second] = 1;
        }
        int sz = 0;
        int component = 0;
        for(auto it : gg){
            component += size[it.first];
            size[it.first] = 0;
            component += size[it.second];
            size[it.second] = 0;
        }
        for(auto it : gg){
            size[it.first] = size[it.second] = 1;
        }
        sz = component;
        for(auto it : gg){
            component -= union_sets(it.first, it.second);
        }
        sz = n - sz + component;
        upd(ans, deg[sz]);
        cnt--;
    }
    cnt %= mod;
    int cur_ans = (cnt * 1ll * deg[n]) % mod;
    upd(ans, cur_ans);
    cout << ans << endl;
    return 0;
}
