/**
 * @author khokharnikunj8
 */

#include <bits/stdc++.h>

using namespace std;

vector<int> dp[501];
vector<int> dp1[501];
vector<int> ar;
int n;

int findIt1(int i, int j) {
    if (i > j) return 0;
    if (dp1[i][j] != -1) return dp1[i][j];
    if (i == j) return ar[i];
    for (int k = i; k < j; k++) {
        int temp = findIt1(i, k);
        int temp2 = findIt1(k + 1, j);
        if (temp != 0 && temp2 != 0 && temp == temp2) return dp1[i][j] = temp + 1;
    }
    return dp1[i][j] = 0;
}

int findIt(int i, int j) {
    if (i > j) return 0;
    if (dp1[i][j] != -1) return dp[i][j];
    dp[i][j] = j - i + 1;
    for (int k = i; k < j; k++)dp[i][j] = min(dp[i][j], findIt(i, k) + findIt(k + 1, j));
    for (int k = i; k < j; k++) {
        int temp = findIt1(i, k);
        int temp2 = findIt1(k + 1, j);
        if (temp != 0 && temp2 != 0 && temp == temp2) dp[i][j] = min(dp[i][j], 1);
    }
    return dp[i][j];
}

void EArrayShrinking(std::istream &in, std::ostream &out) {
    in >> n;
    ar.resize(n);
    for (int i = 0; i < n; i++) in >> ar[i];
    for (int i = 0; i <= 500; i++) {
        dp[i].resize(501, -1);
        dp1[i].resize(501, -1);
    }
//    for (int i = 0; i < n; i++) {
//        for (int j = i; j < n; j++) {
//            out << i << " " << j << " " << findIt(i, j) << "\n";
//        }
//    }

    out << findIt(0, n - 1);
}

int main() {
    class Solver {
    public:
        void solve(std::istream &in, std::ostream &out) {
            return EArrayShrinking(in, out);
        }
    };
    Solver solver;
    std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
