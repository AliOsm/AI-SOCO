/* practice with Dukkha */
#include <stdio.h>

#define Q	500000
#define N	(4 + Q * 2)
#define LN	19	/* LN = floor(log2(N - 1)) */
#define INF	0x3f3f3f3f

int max(int a, int b) { return a > b ? a : b; }

int next[1 + N - 1], jj[1 + N - 1];

int link(int l, int j) {
	static int _ = 1;

	next[_] = l, jj[_] = j;
	return _++;
}

int ao[N], dd[N], pp[LN + 1][N];

void dfs(int p, int i, int d) {
	int h, l;

	dd[i] = d;
	pp[0][i] = p;
	for (h = 1; 1 << h <= d; h++)
		pp[h][i] = pp[h - 1][pp[h - 1][i]];
	d++;
	for (l = ao[i]; l; l = next[l]) {
		int j = jj[l];

		dfs(i, j, d);
	}
}

int lca(int i, int j) {
	int tmp, h;

	if (dd[i] < dd[j])
		tmp = i, i = j, j = tmp;
	for (h = LN; h >= 0; h--)
		if (1 << h <= dd[i] - dd[j])
			i = pp[h][i];
	if (i == j)
		return i;
	for (h = LN; h >= 0; h--)
		if (1 << h <= dd[i] && pp[h][i] != pp[h][j])
			i = pp[h][i], j = pp[h][j];
	return pp[0][i];
}

int main() {
	static int vv[N];
	int q, n, h, i, u, v, d_;

	scanf("%d", &q), n = 4 + q * 2;
	for (i = 1; i <= 3; i++)
		ao[0] = link(ao[0], i);
	for (h = 0; h < q; h++) {
		scanf("%d", &i), i--;
		vv[h] = i;
		u = 4 + h * 2, v = u + 1;
		ao[i] = link(ao[i], u);
		ao[i] = link(ao[i], v);
	}
	dfs(-1, 0, 0);
	u = 1, v = 2, d_ = 2;
	for (h = 0; h < q; h++) {
		int w, a, d;

		w = 4 + h * 2;
		a = lca(u, w);
		d = dd[u] + dd[w] - dd[a] * 2;
		if (d_ < d)
			d_ = d, v = w;
		a = lca(v, w);
		d = dd[v] + dd[w] - dd[a] * 2;
		if (d_ < d)
			d_ = d, u = w;
		printf("%d\n", d_);
	}
	return 0;
}
