#include<bits/stdc++.h>
using namespace std;

typedef long double                 ld;
typedef long long                   ll;
typedef pair<int,int>               pii;
typedef pair<ll,ll>                 pll;
typedef pair<string , string>       pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define F                           first
#define S                           second
#define sep                         ' '
#define endl                        '\n'
#define file_io                     freopen("input.txt" , "r+" , stdin) ; freopen("output.txt" , "w+" , stdout);
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define error(x)                    cerr << "$$$ " << x << '\n';
#define error2(x,y)                 cerr << "#F : " << x << "      #S : " << y << '\n';
#define kill(x)                     return cout << x << endl , 0;
#define pb                          push_back

const ll MXN = 100 + 10;
const ll MX5 = 2e5 + 10;
const ll MX6 = 1e6 + 10;
const ll INF = 8e18;
const ld eps = 1e-9;
const ll MOD = 1e9 + 7; //998244353;

ll power(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * power(a * a % md, b / 2, md) % md : power(a * a % md, b / 2, md) % md));
}
ll bmm(ll a,ll b){
    return (a%b==0 ? b : bmm(b,a%b));
}
string base2(ll n){
    string a="";while(n>=2){a+=(char)(n%2+'0');n/=2;}a+=(char)(n+'0');reverse(all(a));return a;
}

ll n, m, s, t, ds, dt;
ll par[MX5], Sz[MX5];
pll YalS[MX5], YalT[MX5];
vector<ll> G[MX5], M1;
vector<pll> V, T1, ans;
set<ll> M;
bool RT[MX5], RS[MX5], Ok;

void init(){
    for(int i = 1; i <= n; i ++){
        Sz[i] = 1;
        par[i] = i;
        M.insert(i);
    }
}

ll Find(ll x){
    if(par[x] == x){
        return x;
    }
    return par[x] = Find(par[x]);
}

bool Union(ll x, ll y){
    ll p1 = Find(x), p2 = Find(y);
    if(p1 == p2){
        return 0;
    }
    if(Sz[p1] > Sz[p2]){
        par[p2] = p1;
        Sz[p1] += Sz[p2];
        M.erase(p2);
    }
    else{
        par[p1] = p2;
        Sz[p2] += Sz[p1];
        M.erase(p1);
    }
    return 1;
}

int main(){
    fast_io
    //file_io
    cin >> n >> m;
    init();
    for(int i = 0; i < m; i ++){
        ll u, v;
        cin >> u >> v;
        G[u].pb(v);
        G[v].pb(u);
        V.pb({u, v});
    }
    cin >> s >> t >> ds >> dt;

    for(int i = 0; i < m; i ++){
        ll u = V[i].F, v = V[i].S;
        if(u != s && u != t && v != s && v != t){
            Ok = Union(u, v);
            if(Ok){
                ans.pb({u, v});
            }
        }
    }

    for(int i = 0; i < G[s].size(); i ++){
        ll p = Find(G[s][i]);
        RS[p] = 1;
        YalS[p] = {s, G[s][i]};
    }
    for(int i = 0; i < G[t].size(); i ++){
        ll p = Find(G[t][i]);
        RT[p] = 1;
        YalT[p] = {t, G[t][i]};
    }

    bool f = 1;
    std::set<ll>::iterator itr = M.begin();
    while(itr != M.end()){
        ll now = *itr;
        if(now == s || now == t){
            itr ++;
            continue;
        }
        if(RS[now] == 1 && RT[now] == 1){
            M1.pb(now);
        }
        else if(RS[now] == 1){
            if(ds){
                ds --;
                ans.pb({s, YalS[now].S});
            }
            else{
                kill("No");
            }
        }
        else if(RT[now] == 1){
            if(dt){
                dt --;
                ans.pb({t, YalT[now].S});
            }
            else{
                kill("No");
            }
        }
        itr ++;
    }

    for(int i = 0; i < M1.size(); i ++){
        ll now = M1[i];
        if(f){
            f = 0;
            if(dt && ds){
                dt --;
                ds --;
                ans.pb({s, YalS[now].S});
                ans.pb({t, YalT[now].S});
            }
            else{

                kill("No");
            }
        }
        else{
            if(ds){
                ds --;
                ans.pb({s, YalS[now].S});
            }
            else if(dt){
                dt --;
                ans.pb({t, YalT[now].S});
            }
            else{
                kill("No");
            }
        }
    }

    
	if(ans.size() == n -2){
	    if(dt == 0 || ds == 0){
	        kill("No");
	    }cout << "Yes" << endl;
cout << s << sep << t << endl;

}
else{
    cout << "Yes" << endl;
}
    for(int i = 0; i < ans.size(); i ++){
        cout << ans[i].F << sep << ans[i].S << endl;
    }

    return 0;
}
/// A japanese friend told me that reaching blue in a div3 (and yellow in a div2) is dishonorable.
//! N.N