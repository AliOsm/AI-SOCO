#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcount(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

const int OO = (int) 2e9;
const double eps = 1e-9;
const int MAXN = 100005;

int x[MAXN], y[MAXN];
map<int, int> M;
int arr[2 * MAXN];
int temp[2 * MAXN];
pii idx[2 * MAXN];
int n, sz;

ll merge(int st, int mid, int en) {
	int i = st, j = mid, k = st;
	ll res = 0;
	while ((i <= mid - 1) && (j <= en)) {
		if (arr[i] <= arr[j]) {
			temp[k++] = arr[i++];
		} else {
			temp[k++] = arr[j++];
			res = res + (mid - i);
		}
	}

	while (i <= mid - 1)
		temp[k++] = arr[i++];

	while (j <= en)
		temp[k++] = arr[j++];

	for (i = st; i <= en; i++)
		arr[i] = temp[i];

	return res;
}

ll countInv(int st, int en) {
	int mid;
	ll res = 0;
	if (en > st) {
		mid = st + (en - st) / 2;
		res += countInv(st, mid);
		res += countInv(mid + 1, en);
		res += merge(st, mid + 1, en);
	}
	return res;
}

ll calcInv() {
	foreach(it,M)
		idx[sz] = mp(it->first, it->second), arr[sz++] = it->second;
	return countInv(0, sz - 1);
}

ll calcRem() {
	ll res = 0;
	for (int i = 0; i < sz; i++) {
		int j = upper_bound(idx, idx + sz, mp(idx[i].second, OO)) - idx - 1;
		res += (abs(idx[i].first - idx[j].first) - abs(i - j));
	}
	return res;
}

int main() {
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
#ifndef ONLINE_JUDGE
//	freopen("in.txt", "rt", stdin);
//	freopen("out.txt", "wt", stdout);
#endif
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> x[i] >> y[i];
		if (x[i] > y[i])
			swap(x[i], y[i]);
		if (M.find(x[i]) == M.end())
			M[x[i]] = x[i];
		if (M.find(y[i]) == M.end())
			M[y[i]] = y[i];
		swap(M[x[i]], M[y[i]]);
	}
	ll res = calcInv();
	res += calcRem();
	cout << res << endl;
	return 0;
}
