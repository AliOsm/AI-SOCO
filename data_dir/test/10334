#include <stdio.h>
#include <vector>
#include <algorithm>
#define pb push_back
#define lli long long int
#define MAXN 100005
#define INF_LL 100000000000000000LL
using namespace std;

vector <int> g[MAXN];
vector <int> w[MAXN];
int a[MAXN];
lli d[MAXN];
lli mini[MAXN];
int size[MAXN];
int res;

void DFS(int node, lli h) {
	d[node] = h;
	size[node] = 1;

	for (int i = 0; i < (int)g[node].size(); i++) {
		int viz = g[node][i];
		DFS(viz, h + w[node][i]);
		size[node] += size[viz];
	}
	return;
}

void DFS2(int node, lli mini) {
	if (a[node] < d[node] - mini) {
		//printf("here node = %d, adding = %d\n", node, size[node]);
		res += size[node];
		return;
	}

	for (int i = 0; i < (int)g[node].size(); i++) {
		int viz = g[node][i];
		DFS2(viz, min(mini, d[node]));
	}
	return;
}
	

int main(void) {
	int n;
	int p, c;

	scanf(" %d", &n);
	for (int i = 1; i <= n; i++) {
		scanf(" %d", &a[i]);
	}
	for (int i = 2; i <= n; i++) {
		scanf(" %d %d", &p, &c);
		g[p].pb(i);
		w[p].pb(c);
	}
	/*printf("debug\n");
	for (int i = 1; i <= n; i++) {
		printf("%d --", i);
		for (int j = 0; j < (int)g[i].size(); j++) {
			printf(" %d", g[i][j]);
		}
		printf("\n");
	}
	printf("end debug\n"); */

	DFS(1, 0);

	res = 0;
	DFS2(1, INF_LL);
	printf("%d\n", res);
	return 0;
}