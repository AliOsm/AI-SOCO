#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
ll mod = 1000000007, oo = 1000000009;

void Emsawy() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
}

#define clr(v,d)     memset(v, d, sizeof(v))
#define sz(v)	     ((int)((v).size()))
#define all(v)	     ((v).begin()), ((v).end())
#define allr(v)	     ((v).rbegin()), ((v).rend())
#define V	         vector
#define MP	         make_pair
#define bug(n)           cout<< #n <<" = "<< n << endl;
int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };
int dy[] = { 0, 0, 1, -1, 1, -1, -1, 1 };

V<V<int> > adj;
const ll N = 100000 + 5;
int n, m, k, w;
struct Point{
	int x, y;
	Point(){}
	Point(int x, int y) :x(x), y(y){}
};
struct Line
{
	int m, c;
	Line(){}
	Line(int m, int c) : m(m), c(c){}
};
int side(Point p, Line l){
	if (p.y > l.m * p.x + l.c) return 1;
	else if (p.y < l.m * p.x + l.c) return 0;
	return -1;
}
Line line;
V<Point > p;
bool valid(){
	if (p.size() > 2){
		int l = side(p[p.size() - 3], line);
		int md = side(p[p.size() - 2], line);
		int r = side(p[p.size() - 1], line);
		if (md == -1){
			if (l != r) return 1;
			return 0;
		}
	}
	return 0;
}
int main() {

	Emsawy();
	while (cin >> n){
		char c;
		line.m = 1;
		line.c = 0;
		int x = 0, y = 0, ans = 0;
		for (int i = 0; i < n; i++){
			cin >> c;
			if (c == 'U') ans += valid(), y++, p.push_back(Point(x,y));
			else ans += valid(),x++,p.push_back(Point(x,y));
		}
		ans += valid();
		cout << ans << endl;
		p.clear();
	}
	return 0;
}
