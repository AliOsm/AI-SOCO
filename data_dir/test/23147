#include<bits/stdc++.h>

using namespace std;
const int MAXN = 200100;

#define int long long

int stot;
vector<int> grafo[MAXN];
int v[MAXN];
int subt[MAXN];
bool process[MAXN];

void dfs(int x){
	process[x] = true;
	subt[x] = v[x];
	
	stot += v[x];
	
	for(int i = 0;i < grafo[x].size();i++){
		int at = grafo[x][i];
		if(process[at] == true) continue;
		
		dfs(at);
		subt[x] += subt[at]; 
	}	
}

int ini(int x,int d){
	process[x] = true;
	
	int r = d*v[x];
	
	for(int i = 0;i < grafo[x].size();i++){
		int at = grafo[x][i];
		if(process[at] == true) continue;
		
		r += ini(at,d + 1);
	}
	
	return r;
}


int solve(int x,int k,int resp){
	process[x] = true;
	
	int r,rat;
	
	if(x == 1) r = rat = k;
	else rat = r = resp + stot - 2*subt[x];
	
	//cout << "// " << x << " " << rat << endl;
	
	for(int i = 0;i < grafo[x].size();i++){
		int at = grafo[x][i];
		if(process[at] == true) continue;
		
		r = max(r,solve(at,k,rat));
	}
	
	return r;
}

signed main(){
	memset(process,false,sizeof process);
	
	int n;
	cin >> n;
	
	for(int i = 1;i <= n;i++){
		cin >> v[i];
	}
	
	for(int i = 1;i < n;i++){
		int x,y;
		cin >> x >> y;
		
		grafo[x].push_back(y);
		grafo[y].push_back(x);
	}
	
	stot = 0;
	
	dfs(1);
	memset(process,false,sizeof process);
	int h = ini(1,0);
	memset(process,false,sizeof process);
	cout << solve(1,h,0) << endl;	
	
	/*for(int i = 1;i <= n;i++){
		cout << i << " " << subt[i] << endl;
	}*/
	
}


