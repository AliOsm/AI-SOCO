#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
int n, tc;

string t;

void input() {
    cin >> t;
    n = len(t);
}

void solve() {
    for(int i = 1; i < n; ++i) {
        if(t[i] != '?' && t[i] == t[i - 1]) {
            cout << "-1\n";
            return;
        }
    }
    char lst = 'a';
    for(int i = 0; i < n; ++i) {
        if(t[i] != '?') {
            lst = t[i];
            continue;
        }
        if(i == n - 1 || t[i + 1] == '?') {
            t[i] = (lst == 'a'? 'b': 'a');
        } else {
            set <char> s;
            s.insert('a');
            s.insert('b');
            s.insert('c');
            s.erase(lst);
            s.erase(t[i + 1]);
            t[i] = *s.begin();
        }
        lst = t[i];
    }
    cout << t << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    cin >> tc;
    while(tc--) {
        input();
        solve();
    }
}
