#include <bits/stdc++.h>
using namespace std;

#define all(x) begin(x), end(x)
#define sz(x) (int)(x).size()

using ll = long long;
using ld = long double;

struct UF {
    // unions[i] >= 0 => unions[i] = parent
    // unions[i]  < 0 => unions[i] = -height
    vector<int> unions;

    UF(int n) : unions(n, -1) {
    }

    int findSet(int n) { // Pfadkompression
        if (unions[n] < 0) return n;
        return unions[n] = findSet(unions[n]);
    }

    void linkSets(int a, int b) { // Union by rank.
        if (unions[a] > unions[b]) unions[a] = b;
        else if (unions[b] > unions[a]) unions[b] = a;
        else {
            unions[a] = b;
            unions[b]--;
    }}

    void unionSets(int a, int b) { // Diese Funktion aufrufen.
        if (findSet(a) != findSet(b)) linkSets(findSet(a), findSet(b));
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    ll n, m, d;
    cin >> n >> m >> d;
    vector<vector<ll>> adj(n);
    ll c = n;
    UF unions(n);
    for (ll i = 0; i < m; i++) {
        ll a, b;
        cin >> a >> b;
        a--;
        b--;
        adj[a].push_back(b);
        adj[b].push_back(a);
        if (a != 0 && b != 0 && unions.findSet(a) != unions.findSet(b)) {
            unions.unionSets(a, b);
            c--;
        }
    }
    if (d <= sz(adj[0]) && d >= c - 1) {
        cout << "YES" << endl;
        UF unions2(n);
        set<ll> seen;
        for (ll x : adj[0]) {
            if (seen.find(unions.findSet(x)) == seen.end()) {
                cout << "1 " << x+1 << endl;
                d--;
                seen.insert(unions.findSet(x));
                unions2.unionSets(0, x);
            }
        }
        for (ll x : adj[0]) {
            if (d > 0 && unions2.findSet(x) != unions2.findSet(0)) {
                cout << "1 " << x+1 << endl;
                d--;
                unions2.unionSets(0, x);
            }
        }
        for (ll i = 1; i < n; i++) {
            for (ll j : adj[i]) {
                if (j == 0) continue;
                if (unions2.findSet(i) != unions2.findSet(j)) {
                    cout << i+1 << " " << j+1 << endl;
                    unions2.unionSets(i, j);
                }
            }
        }
    } else {
        cout << "NO" << endl;
    }
    /*for (ll i : adj[best]) {
        cout << best+1 << " " << i+1 << endl;
        unionSets(i, best);
    }
    for (ll i = 0; i < n; i++) {
        for (ll j : adj[i]) {
            if (findSet(i) != findSet(j)) {
                unionSets(i, j);
                cout << i+1 << " " << j+1 << endl;
            }
        }
    }
}*/
}
