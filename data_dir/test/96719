#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define ll long long
#define ld long double
#define endl '\n'
#define all(a) a.begin(),a.end()
using namespace std;
using namespace __gnu_pbds;

mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rnd1(chrono::steady_clock::now().time_since_epoch().count());

template<class T>
using ordered_set=tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
template<class T>
using ordered_multiset=tree<T,null_type,less_equal<T>,rb_tree_tag,tree_order_statistics_node_update>;

//find_by_order
//order_of_key

const int N=2e5+7;
const int inf=1e9+5;
const int mod=998244353;

int a[N*2];
int b[N*2];
int d[N*4];
int nxt[N];
int pr[N];
int last[N];
int last1[N];
int p[N][20];
int ans[N];

void update(int v,int l,int r,int pos,int x)
{
    if (l==r){
        d[v]=x;
        return;
    }
    int mid=(l+r)/2;
    if (pos<=mid){
        update(v+v,l,mid,pos,x);
    }
    else {
        update(v+v+1,mid+1,r,pos,x);
    }
    d[v]=max(d[v+v],d[v+v+1]);
}

int get(int v,int l,int r,int l1,int r1)
{
    if (l>r1 || r<l1)return 0;
    if (l>=l1 && r<=r1)return d[v];
    int mid=(l+r)/2;
    return max(get(v+v,l,mid,l1,r1),get(v+v+1,mid+1,r,l1,r1));
}

main ()
{
    ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    int n,m,q;
    cin>>n>>m>>q;
    for (int i=1;i<=n;++i){
        cin>>a[i];
    }
    for (int i=n+1;i<=n+n;++i){
        a[i]=a[i-n];
        last[a[i]]=a[i-n+1];
        pr[a[i]]=a[i-1];
    }
    for (int i=n+n-1;i>=1;--i){
        nxt[a[i]]=a[i+1];
    }
    for (int i=2;i<=n+n;++i){
        pr[a[i]]=a[i-1];
    }
    for (int i=1;i<=m;++i)cin>>b[i];
    for (int i=0;i<=2e5;++i){
        last1[i]=0;
    }
    for (int i=1;i<=m;++i){
        last1[b[i]]=i;
        if (last1[pr[b[i]]]){
            p[i][0]=last1[pr[b[i]]];
        }
        for (int j=1;j<=19;++j){
            p[i][j]=p[p[i][j-1]][j-1];
        }
        int f=n-1;
        int v=i;
        for (int j=19;j>=0;--j){
            if (p[v][j] && f-(1LL<<j)>=0){
                f-=(1LL<<j);
                v=p[v][j];
            }
        }
        if (f==0){
            ans[i]=v;
        }
    }
    for (int i=1;i<=m;++i){
        update(1,1,m,i,ans[i]);
    }
    for (int i=1;i<=q;++i){
        int l,r;
        cin>>l>>r;
        if (get(1,1,m,l,r)>=l){
            cout<<1;
        }
        else cout<<0;
    }
}
