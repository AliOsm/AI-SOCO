/*
 _     _                             
| |__ | |__   __ _  __ _ _   _  __ _ 
| '_ \| '_ \ / _` |/ _` | | | |/ _` |
| |_) | | | | (_| | (_| | |_| | (_| |
|_.__/|_| |_|\__,_|\__, |\__, |\__,_|
                   |___/ |___/       
*/
#include<bits/stdc++.h>

#define ll          long long
#define pb          push_back
#define ppb         pop_back
#define	endl		'\n'
#define mii         map<ll int,ll int>
#define msi         map<string,ll int>
#define mis         map<ll int, string>
#define mpi         map<pair<ll int,ll int>,ll int>
#define pii         pair<ll int,ll int>
#define vi          vector<ll int>
#define vs          vector<string>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define what_is(x)  cerr << #x << " is " << x << endl;
using namespace std;

#define N  100005

ll int expo(ll int base,ll int exponent,ll int mod){
    ll int ans=1;
    while(exponent!=0){
        if(exponent&1) ans=(1LL*ans*base)%mod;
        base=(1LL*base*base)%mod;
        exponent>>=1;
    }
    return ans%mod;
}

ll int n,k;

ll int dp[69][10005];

ll int solve(ll int p,ll int r)
{
	memset(dp,0,sizeof(dp));
	for(ll int j=0;j<=k;j++)
	{
		for(ll int i=0;i<=r;i++)
		{
			if(j==0) 
			{
				dp[i][j]=expo(p,i,hell);
			}
			else
			{
				ll int tmp=0;
				for(ll int it=0;it<=i;it++)
				{
					tmp=(tmp+dp[it][j-1])%hell;
				}
				tmp=(tmp*expo(i+1,hell-2,hell))%hell;
				dp[i][j]=tmp;
			}
		}
	}
	return dp[r][k];
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
	//cin>>TESTS;
	while(TESTS--)
	{
		cin>>n>>k;
		ll int ret=1;
		for(ll int i=2;i*i<=n;i++)
		{
			if(n%i==0)
			{
				ll int p=i;
				ll int r=0;
				while(n%i==0) 
				{
					r++;
					n/=i;
				}
				ret=(ret*solve(p,r))%hell;
			}
		}
		if(n!=1) ret=(ret*solve(n,1))%hell;
		cout<<ret;
	}
	return 0;
}