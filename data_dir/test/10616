#include <bits/stdc++.h>
using namespace std;
#define int long long
#define endl '\n'
typedef long long ll;

signed main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int n, m;
    cin >> n >> m;
    vector<string> grid(n);
    vector<vector<int>> left(n,vector<int>(m));
    for(int i = 0; i < n; ++i) {
        cin >> grid[i];
        left[i][0] = 1;
        for(int j = 1; j < m; ++j) {
            if(grid[i][j] != grid[i][j-1]) {
                left[i][j] = 1;
            } else {
                left[i][j] = left[i][j-1] + 1;
            }
        }
    }
    int res = 0;
    for(int j = 0; j < m; ++j) {
        //cout << "col: " << j << endl;
        int i = 0;
        while(i < n) {
            int i2 = i;
            while(i2 < n && grid[i][j] == grid[i2][j]) {
                ++i2;
            }
            //cout << "here: " << i << ' ' << i2 << endl;

            int len = i2-i;
            assert(len > 0);

            bool possible = true;
            for(int k = i-1; len--; --k) {
                if(k < 0 || grid[k][j] != grid[i-1][j]) {
                    possible = false;
                    break;
                }
            }

            if(!possible) {
                i = i2;
                continue;
            }
            len = i2-i;
            for(int k = i2; len--; ++k) {
                if(k >= n || grid[k][j] != grid[i2][j]) {
                    possible = false;
                    break;
                }
            }
            if(!possible) {
                i = i2;
                continue;
            }
            //cout << "here: i,i2: " << i << ' ' << i2 << endl;
            len = i2-i;
            int mn = 1e9;
            for(int k = i-len; k <= i2+len-1; ++k) {
                mn = min(mn, left[k][j]);
            }
            //cout << "here, mn: " << mn << endl;
            res += mn;


            i = i2;
        }
    }
    cout << res;
}
