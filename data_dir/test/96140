#include <bits/stdc++.h>
using namespace std;

using ll = long long;
using vi = vector<int>;

ll pot(ll b,int e){
	ll res = 1;
	while( e){
		if( e%2) res = res*b;
		e/=2;
		b = b*b;
	}
	return res;
}

int tam(ll x){
	int res = 0;
	while( x){
		x/=10;
		res++;
	}
	return res;
}

ll L[100];
ll TL[10];

ll len9(int i){
	if( i == 0) return 0;
	if( i == 1) return 9;
	if( L[i] ) return L[i];
	L[i] =  len9(i-1) + i*(pot(10,i) - pot(10,i-1) );
	return L[i];
}

ll len(ll x){
	if( x == 0) return 0;
	ll l = tam(x);
	ll res = len9(l-1);
	return res + l*(x- (pot(10,l-1) - 1));
}

ll totlen9(int i){
	if( i == 0) return 0;
	if( i == 1) return 45;
	if( TL[i] ) return TL[i];
	ll res = totlen9(i-1);
	TL[i] = res + ((pot(10,i) - pot(10,i-1))*(len(pot(10,i-1)) + len(pot(10,i)-1)))/2;
	return TL[i];
}

ll totlen(ll x){
	if( x== 0) return 0;
	ll l = tam(x);
	ll res = totlen9(l-1);
	return res + ((x - pot(10,l-1) + 1)*(len(pot(10,l-1)) + len(x) ) )/2;
}

int dig(int k,int num){
	vi v;
	while( num){
		v.push_back(num%10);
		num/=10;
	}
	int l = v.size();
	return ( v[l-k]);
}


int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int q;
	cin >> q;
	while( q--){
		ll k;
		cin >> k;
		int hiblock = 6e8;
		int lowblock = 0; 
		while( totlen(hiblock - 1) >= k){
			int med = (hiblock + lowblock)/2;
			if( totlen(med) >= k) hiblock = med;
			else lowblock = med;
		}
		k = k - totlen(hiblock-1);
		int hi = hiblock;
		int lo = 0;
		while( len(hi-1) >= k){
			int med = (hi + lo)/2;
			if( len(med) >= k) hi = med;
			else lo = med;
		}
		k -= len(hi-1);
		cout << dig(k,hi) << "\n";
	}


}
