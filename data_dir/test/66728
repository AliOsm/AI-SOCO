#include<bits/stdc++.h>
using namespace std;
#define all(v) ((v).begin()),((v).end())
#define ll long long
#define fastIO cout << fixed << setprecision(12), ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)
double const EPS = 1e-12, PI = acos(-1);
const int N = 1e6 + 9, M = 5e3 + 9, OO = 1e9 + 7, MOD = 1e9 + 7;
const ll inf = 1e18;

vector<int> adj[N];
ll szSubTree[N];
int n;

void dfs(int node, int par) {
  szSubTree[node]++;
  for(int it: adj[node]) {
    if(par == it) continue;
    dfs(it, node);
    szSubTree[node] += szSubTree[it];
  }
}

ll evenPaths = 1, oddPaths, allWays;
void dfs2(int node, int par, bool lvl) {
  if(lvl) {
    evenPaths += adj[node].size() - 1;
  } else {
    oddPaths += adj[node].size() - (node != 1);
  }
  allWays += szSubTree[node] * (n - szSubTree[node]);
  for(int it: adj[node]) {
    if(it == par) continue;
    dfs2(it, node, lvl ^ 1);
  }
}

int main() {
  fastIO;
#ifdef LOCAL
  freopen("input.in", "rt", stdin);
#endif
  int u, v;
  cin >> n;
  for (int i = 1; i < n; ++i) {
    cin >> u >> v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  dfs(1, -1);
  dfs2(1, -1, 0);
  cerr << allWays << ' ' << evenPaths << ' ' << oddPaths << endl;
  cout << (allWays + (evenPaths * oddPaths)) / 2;
  return 0;
}
