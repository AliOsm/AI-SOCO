#include <bits/stdc++.h>
#define pii pair <int,int>

using namespace std;

#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename \
  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
  ris << "(" << d.first << ", " << d.second << ")";
}
sim dor(rge<c> d) {
  *this << "[";
  for (auto it = d.b; it != d.e; ++it)
    *this << ", " + 2 * (it == d.b) << *it;
  ris << "]";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "

const int N = 5005;
const int Inf = 1e9;

int MaxL = 0;
map <int,int> Inv;
map <int,int> Hash;
vector < pair <int,pii> > Adj[N];

int MaxR[N][N];
priority_queue < pair <int,pii> > q;

int main()
{
    int n, m;   cin >> n >> m;

    while(m--)
    {
        int x, y, L, R; scanf("%d%d%d%d", &x, &y, &L, &R);

        Hash[L];

        Adj[x].push_back( make_pair( y, pii( L, R)));
        Adj[y].push_back( make_pair( x, pii( L, R)));
    }

    for(pii p : Hash)   Hash[p.first] = ++MaxL, Inv[MaxL] = p.first;

    for(int x = 1; x <= n; x++)
        for(int i = 0; i < Adj[x].size(); i++)
            Adj[x][i].second.first = Hash[Adj[x][i].second.first];

    for(int x = 1; x <= n; x++)
        for(int L = 1; L <= MaxL; L++)
            MaxR[x][L] = -Inf;

    MaxR[1][0] = Inf;
    q.push( make_pair( Inf, pii( 1, 0)));

    while(!q.empty())
    {
        pair <int,pii> p = q.top(); q.pop();

        int x = p.second.first;
        int L = p.second.second;
        int R = p.first;

        if(MaxR[x][L] > R)  continue;

        for(pair <int,pii> Ch : Adj[x])
        {
            int y = Ch.first;
            int L2 = max( L, Ch.second.first);
            int R2 = min( R, Ch.second.second);

            if(MaxR[y][L2] < R2)
            {
                MaxR[y][L2] = R2;
                q.push( make_pair( R2, pii( y, L2)));
            }
        }
    }

    int Ans = 0;

    for(int L = 1; L <= MaxL; L++)  Ans = max( Ans, MaxR[n][L] - Inv[L] + 1);

    if(Ans == 0)    return 0 * puts("Nice work, Dima!");

    cout << Ans << endl;
}
