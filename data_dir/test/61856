#include<bits/stdc++.h>
using namespace std;
const int MAX = 1001 * 100; bool vis[MAX] ; int sum[MAX];
int sz[MAX] , h[MAX] , st[MAX] , cnt=0;
vector<pair<int,int> > t[MAX]; vector<int> a[MAX]; pair<int,int> e[MAX];
map<pair<int ,int> , int> mp;
void solve(int v , int p){
    for(auto u:a[v]){
        if(u==p)continue;
        solve(u , v);
        sum[v]+=sum[u];
    }
    if(p != -1){
        mp[{v , p}] = sum[v];
        mp[{p , v}] = sum[v];
    }
}
void dfs(int v){
    st[v] = cnt++;
    vis[v] =true;
    sz[v] = 1;
    t[h[v]].push_back({st[v] , v});
    for(auto u:a[v]){
        if(!vis[u]){
            h[u] = h[v] + 1;
            dfs(u);
            sz[v] += sz[u];
        }
    }
}
int findpar(int v, int k){
    if(k==0)return v;
    int hp = h[v] - k;
    if(hp < 0)return -1;
    int ind =lower_bound(t[hp].begin() , t[hp].end() , pair<int,int>(st[v] , 0)) - t[hp].begin();
    ind--;
    return t[hp][ind].second;
}
int LCA(int v,int u){
    if(h[v] < h[u]){
        int tmp = v; v=u; u=tmp;
    }
    int c=h[v] - h[u];
    v = findpar(v, c);
    if(v == u)return v;
    int l = 0 , r = h[v];
    while( r - l > 1){
        int mid = (l+r) /2;
        if(findpar(v , mid) == findpar(u , mid))r=mid; else l=mid;
    }
    return findpar(v , r);
}
int main(){
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int n; cin>>n;
    for(int i=0;i<n-1;i++){
        int x,y; cin>>x>>y;
        a[x].push_back(y); a[y].push_back(x);
        e[i].first = x; e[i].second = y;
    }
    dfs(1);
    int k; cin>>k;
    for(int i=0;i<k;i++){
        int u,v; cin>>u>>v;
        int p = LCA(u ,v);
        sum[p]-=2; sum[v]++; sum[u]++;
    }
    solve(1 , -1);
    for(int i=0;i<n-1;i++){
        cout<<mp[{e[i].first , e[i].second}]<<" ";
    }
}
