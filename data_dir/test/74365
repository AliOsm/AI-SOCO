#include <bits/stdc++.h>

using namespace std;

#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")

using llong = long long;
using ld = long double;
using ii = pair<int, int>;
using ull = unsigned long long;
using pll = pair<llong, llong>;
using vi = vector<int>;


#define endl "\n"
#define fi first
#define se second
#define left LEVO
#define right PRAVO
#define time CHAS
#define all(a) (a).begin(), (a).end()
#define prev PAPEREDNIKXD
#define next NASTUPNIKXD
#define pb push_back
#define deb cout<<"CHECK\n";
#define last(a) (a)[(a).size()-1]

#define elif else if
#define cclear cout<<flush;
#define fclear fflush(stdout);
#define x_files freopen("exam.in","r",stdin);freopen("exam.out","w",stdout);
#define kchay ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
 
const llong over999 = 1e14;
const ld eps = 1e-9;
const ld Pi = acos(-1);
const llong md = 1e9+7;
const llong ya = 0;

/*.st*/
int n, a, b, x[200], y[200], ans, ANS;
int have[200][200];


main() {
    kchay;   
    // x_files;
    
    
    cin >> n >> a >> b;
    
    for(int i = 0; i < n; i++)
    {
        cin >> x[i] >> y[i];
        have[x[i]][y[i]]++; 
        if(x[i] != y[i])have[y[i]][x[i]]++;
    }
    
    for(int i = 0; i < n; i++)
    {
        int left_a = a - x[i], left_b = b - y[i];
        ans = 0;
        have[x[i]][y[i]]--;
        if(x[i] != y[i])have[y[i]][x[i]]--;
        if(left_a >= 0 && left_b >= 0)
        {
            for(int k = 1; k <= left_a; k++)
                for(int j = 1; j <= b; j++)
                {
                    if(have[k][j] || have[j][k])ans = max(ans, k*j);
                }
            for(int k = 1; k <= left_b; k++)
                for(int j = 1; j <= a; j++)
                {
                    if(have[k][j] || have[j][k])ans = max(ans, k*j);
                }
            if(ans)ANS = max(ANS, ans + x[i]*y[i]);
        }
        
        left_a = a - y[i], left_b = b - x[i];
        ans = 0;
        if(left_a >= 0 && left_b >= 0)
        {
            for(int k = 1; k <= left_a; k++)
                for(int j = 1; j <= b; j++)
                {
                    if(have[k][j] || have[j][k])ans = max(ans, k*j);
                }
            for(int k = 1; k <= left_b; k++)
                for(int j = 1; j <= a; j++)
                {
                    if(have[k][j] || have[j][k])ans = max(ans, k*j);
                }
            if(ans)ANS = max(ANS, ans + x[i]*y[i]);
        }
        have[x[i]][y[i]]++;
        have[y[i]][x[i]]++;
    }
    
    cout << ANS;
    
    return 0;
}