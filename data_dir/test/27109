/* winners never quit and quitters never win.
      #swap                                 */
      
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
using namespace std;
using namespace __gnu_pbds;
#pragma GCC optimize ("-O3")
using ll = long long;
using ld = long double;
const ll mod = 1000000007;
const ll inf = 1000000000000000000;
const ll rk = 256;

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

#define pb push_back
#define mp make_pair
#define vc vector
#define fs first
#define sec second
#define pq priority_queue
#define lb lower_bound
#define ub upper_bound
#define pll pair<ll,ll> 
#define pls pair<ll,string>
#define psl pair<string,ll>
#define plc pair<ll,char>
#define pcl pair<char,ll>
#define pss pair<string,string>
#define all(v) v.begin(),v.end()
#define tol(s) transform(s.begin(),s.end(),s.begin(),::tolower);
#define tou(s) transform(s.begin(),s.end(),s.begin(),::toupper);

#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }

void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
	cerr << *it << " = " << a << endl;
	err(++it, args...);
}

#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define T ll t=0;cin>>t;for(ll test=0;test<t;test++)

 
int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
	//isprime();
	//coeff();
	/*freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);*/
    T
    {
        ll n,p,k;
        cin>>n>>p>>k;
        ll x[n];
        rep(a,0,n)
            cin>>x[a];
        sort(x,x+n);
        ll shift[k]={0};
        ll in=0,last=-1,tot=0,ans=0;
        while(in<n)
        {   
            if(in%k==k-1)
            {
                if(tot+x[in]<=p)
                {
                    tot+=x[in];
                    ans+=k;
                    last=in;
                }
                else    
                    break;
            }
            else
            {
                shift[in%k]+=x[in];
                if(last!=-1)
                    shift[in%k]-=x[last];
            }
            in++;
        }
        ll pref[k]={0};
        rep(a,1,k)
        {
            pref[a]+=x[a-1];
            pref[a]+=pref[a-1];
            shift[a]+=pref[a];
        }
        p-=tot;
        ll left=min(k-1,n-1-last),pp=0;
        rep(a,0,left)
        {
            if(shift[a]>p)
                break;
            pp=a+1;
        }
        cout<<ans+pp<<endl;
    }
	return 0;
}