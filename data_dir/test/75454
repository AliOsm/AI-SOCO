#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

#define PB push_back
#define MP make_pair

#define rep(i,n) for(int i=0;i<(n);++i)
#define REP(i,n) for(int i=1;i<=(n);++i)
#define FOR(i,l,h) for(int i=(l);i<=(h);++i)
#define FORD(i,h,l) for(int i=(h);i>=(l);--i)
#define print(expr) cout<<(#expr)<<" : "<<(expr)<<endl
#define tr(it,c) for(VI::iterator it=(c).begin(); it!=(c).end(); ++it)

typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long int64;
typedef pair<int,int> pii;
typedef pair<pii,int> P;

const int mod=1000000007;
class Int{
public:
	int data;
	int f(int _t){int _s=_t % mod;if(_s<0) _s += mod;return _s;}
	Int(): data(0) {}
	Int(int _data): data(_data) {}
	Int operator + (Int _data) { return f(data+_data.data);}
	Int operator - (Int _data) { return f(data-_data.data);}
	Int operator * (Int _data) { return (int64(data)*int64(_data.data))%mod;}
	Int operator +=(Int _data) { *this=*this+_data; return *this;}
	Int operator -=(Int _data) { *this=*this-_data; return *this;}
	Int operator *=(Int _data) { *this=*this*_data; return *this;}
	Int pow(int s){	if(!s) return 1;Int res=pow(s>>1);res=res*res;if(s&1) res=res*(*this);return res;}
};
istream& operator>> (istream &in, Int &t){in>>t.data; t.data=t.f(t.data); return in;}
ostream& operator<< (ostream &out,Int t){out<<t.data; return out;}

const int maxn=5500;

char x[maxn], y[maxn];
int n,m;
Int dp[maxn][maxn]={};
Int sum[maxn];
Int ans=0;

int main(void)
{
	cin>>(x+1)>>(y+1);
	n=strlen(x+1); m=strlen(y+1);
	REP(i,n)
	{
		sum[0]=0;
		REP(j,m) sum[j]=sum[j-1]+dp[i-1][j];
		REP(j,m) if(x[i]==y[j]) dp[i][j]=sum[j-1]+1, ans+=dp[i][j];
	}
	cout<<ans<<endl;
}