#include <bits/stdc++.h>
using namespace std;

int n;
vector<vector<int> > v;
vector<bool> curr;
vector<bool> goal;
vector<int> ans;
map<int , int> changing;

void dfs(int parent , int node)
{
    bool willBeChanged = 0;
    for(auto& i : changing)
    {
        if(i.second % 2 == 0)
        {
            willBeChanged = 1;
        }
        i.second++;
    }
/*
    for(auto i : changing)
        cout << i.first << " " << i.second << " " << node << " " << willBeChanged << endl;
    cout << endl;
*/
    if(curr[node] != goal[node])
    {
        if(willBeChanged)
        {
            curr[node] = goal[node];
            for(auto i : v[node])
                if(i != parent)
                    dfs(node , i);
        }
        else
        {
            ans.push_back(node);
            changing[node] = 1;
            for(auto i : v[node])
                if(i != parent)
                    dfs(node , i);
        }
    }
    else
    {
        vector<pair<int , int > > removed;
        if(willBeChanged)
        {
            ans.push_back(node);
            for(auto i = changing.begin() ; i != changing.end() ;)
            {
                if( (i->second-1) % 2 == 0)
                {
                    removed.push_back({i->first , i->second});
                    changing.erase(i++);
                }
                else
                    i++;
            }
            for(auto i : v[node])
                if(i != parent)
                    dfs(node , i);
        }
        else
        {
            for(auto i : v[node])
                if(i != parent)
                    dfs(node , i);
        }
        for(auto i : removed)
            changing[i.first] = i.second;
    }

    if(changing.find(node) != changing.end())
        changing.erase(node);
    for(auto& i : changing)
       i.second--;
}

int main()
{
    ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0);

    cin >> n;

    v = vector<vector<int> > (n+1);
    for(int i = 0 ; i < n-1; i++)
    {
        int x , y;
        cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }

    curr = vector<bool> (n+1);
    for(int i = 0 ; i < n ; i++)
    {
        bool x;
        cin >> x;
        curr[i+1] = x;
    }

    goal = vector<bool> (n+1);
    for(int i = 0 ; i < n ; i++)
    {
        bool x;
        cin >> x;
        goal[i+1] = x;
    }

    dfs(-1 , 1);

    cout << ans.size() << endl;
    for(auto i : ans)
        cout << i << endl;

    return 0;
}
