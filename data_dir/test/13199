#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define int long long
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

string type[1000005];
vector<vector<int> >adj,adj2;
int ans[1000005];
int mm[1000005];
void dfs(int ver,int p)
{
   for(auto i:adj[ver])
   {
      dfs(i,ver);
   }
   if(type[ver]=="AND")
      ans[ver]=(ans[adj[ver][0]]&ans[adj[ver][1]]);      
   else if(type[ver]=="XOR")
      ans[ver]=(ans[adj[ver][0]]^ans[adj[ver][1]]);      
   else if(type[ver]=="OR")
      ans[ver]=(ans[adj[ver][0]]|ans[adj[ver][1]]);      
   else if(type[ver]=="NOT")
   {
      ans[ver]=(!ans[adj[ver][0]]);
   }
}

bool add_function(int ver)
{
      if(ans[ver]==1)
      {
         adj2[ver].push_back(adj[ver][0]);
         adj2[ver].push_back(adj[ver][1]);  
         return true;
      }
      else if(!ans[adj[ver][0]] && ans[adj[ver][1]])
      {
         adj2[ver].push_back(adj[ver][0]);
         return true;
      }
      else if(ans[adj[ver][0]] && !ans[adj[ver][1]])
      {
         adj2[ver].push_back(adj[ver][1]);
         return true;
      }
   return false;
}

bool xor_function(int ver)
{
   adj2[ver].push_back(adj[ver][0]);
   adj2[ver].push_back(adj[ver][1]);
   return true;
}
bool or_function(int ver)
{
   if(!ans[ver])
   {
      adj2[ver].push_back(adj[ver][0]);
      adj2[ver].push_back(adj[ver][1]);
      return true;
   }
   else if(ans[adj[ver][0]] && !ans[adj[ver][1]])
   {
      adj2[ver].push_back(adj[ver][0]);
      return true;
   }
   else if(!ans[adj[ver][0]] && ans[adj[ver][1]])
   {
      adj2[ver].push_back(adj[ver][1]);
      return true;
   }

   return false;
}

bool not_function(int ver)
{
   adj2[ver].push_back(adj[ver][0]);
   return true;
}

void dfs2(int ver)
{
   bool flag=false;
   if(type[ver]=="AND")
      flag=add_function(ver);
   else if(type[ver]=="XOR")
      flag=xor_function(ver);
   else if(type[ver]=="OR")
      flag=or_function(ver);
   else if(type[ver]=="NOT")
      flag=not_function(ver);
   if(flag)
   {
      for(auto i:adj[ver])
      {
         dfs2(i);
      }
   }
}

void dfs3(int ver)
{
   if(mm[ver])
      mm[ver]=2;
   for(auto i:adj2[ver])
   {
      dfs3(i);
   }
}

signed main()
{
     ios_base::sync_with_stdio(false);
     cin.tie(NULL);  
 #ifndef ONLINE_JUDGE
    freopen ("INPUT.txt" , "r" , stdin);
    freopen ("OUTPUT.txt" , "w" , stdout);
 #endif
 
// -------------------------------------Code starts here---------------------------------------------------------------------     

   int n;
   cin>>n;
   adj.resize(n+1);
   adj2.resize(n+1);
   int x,y;
   for(int i=1;i<=n;i++)
   {
      cin>>type[i];
      if(type[i]=="IN")
      {
         cin>>x;
         ans[i]=x;
         mm[i]=1;
      }
      else if(type[i]=="NOT")
      {
         cin>>x;
         adj[i].push_back(x);
      }
      else
      {
         cin>>x>>y;
         adj[i].push_back(x);
         adj[i].push_back(y);
      }
   }

   dfs(1,0);
   dfs2(1);
   dfs3(1);
   for(int i=1;i<=n;i++)
   {
      if(mm[i]==1)
      {
         cout<<ans[1];
      }
      else if(mm[i]==2)
      {
         cout<<(!ans[1]);
      }
   }
// -------------------------------------Code ends here------------------------------------------------------------------
     clock_t clk;
 	clk = clock();
 
    clk = clock() - clk;
 	cerr << fixed << setprecision(6) << "Time: " << ((double)clk)/CLOCKS_PER_SEC << "\n";
 	return 0;
 }