#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

const int mod = 1000 * 1000 * 1000 + 7;

int add(int a, int b) {
	a += b;
	if (a >= mod) a -= mod;
	return a;
}

int mult(LL a, int b) {
	return a * b % mod;
}

const int maxN = 4000;
int solution[maxN + 1][maxN + 1];
bool  solved[maxN + 1][maxN + 1];

int solve(int, int);

int solveNoCache(int point, int chain) {
	int res = 0;
	if (point) {
		if (point > 1) res = add(res, mult(point - 1, solve(point - 2, chain + 1)));
		if (chain) 	   res = add(res, mult(chain    , solve(point - 1, chain    )));
	} else if (chain) {
		if (chain > 1) res = add(res, mult(chain - 1, solve(point, chain - 1)));
		res = add(res, solve(point, chain - 1));
	} else res = 1;
	return res;
}

int solve(int point, int chain) {
	if (!solved[point][chain]) {
		solved[point][chain] = true;
		solution[point][chain] = solveNoCache(point, chain);
	}
	
	return solution[point][chain];
}

int main() {
	srand (time(NULL));
    ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(int, n);
	auto nextP = readVector<int>(n);
	FOR (i, 0, n) if (nextP[i] != -1) nextP[i]--;
	
	vector<int> prevP(n, -1);
	FOR (i, 0, n) if (nextP[i] != -1) prevP[nextP[i]] = i;
	
	vector<bool> visited(n);
	int point = 0;
	int chain = 0;
	FOR (i, 0, n) if (!visited[i]) {
		bool moved = false;
		int ptr = i;
		while (true) {
			visited[ptr] = true;
			if (ptr == i && moved) break;
			if (prevP[ptr] == -1) break;
			
			ptr = prevP[ptr];
			moved = true;
		}
		
		if (ptr == i && moved) continue;
		
		if (nextP[ptr] == -1) point++;
		else {
			chain++;
			while (ptr != -1) {
				visited[ptr] = true;
				ptr = nextP[ptr];
			}
		}
	}
	
	cout << solve(point, chain) << endl;
}