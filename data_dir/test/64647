#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define se second
#define pi 2*acos(0)
#define PI 3.14159265358979323846264338

typedef long long ll;
typedef unsigned long long ull;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;

const int N = 100010;
const int MX = 123456;
const int mod = (int)1e9 + 7;
const int base = 1023456789;
const ull BS1 = 10000019ULL;
const int INF = (1 << 29);

template < class T > inline void fastScan(T &x) {
    register char c = getchar();
    int neg = 0; x = 0;
    for(   ; (c < 48 || c > 57) && (c != '-'); c = getchar());
    if(c == '-') { neg = 1; c = getchar(); }
    for(   ; c > 47 && c < 58; c = getchar()){
        x = (x << 1) + (x << 3) + c - 48;
    }
    if(neg) x = -x;
}

// OrderedSet
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
// template < typename T > using ordered_set = tree < T, null_type, greater < T >, rb_tree_tag, tree_order_statistics_node_update >;

int ans[N];

struct Info {
  int l, r, id;
} inp[N];

bool as(Info a, Info b){
  if(a.l == b.l){
    return a.r < b.r;
  }
  return a.l < b.l;
}

int main(){
  int test;
  fastScan(test);
  while(test--){
    int n;
    fastScan(n);
    for(int i = 1; i <= n; i++){
      fastScan(inp[i].l);
      fastScan(inp[i].r);
      inp[i].id = i;
    }
    sort(inp + 1, inp + n + 1, as);
    int idx = -1;
    int last = inp[1].r;
    for(int i = 2; i <= n; i++){
      if(last < inp[i].l){
        idx = i - 1;
        break;
      }
      last = max(last, inp[i].r);
    }
    if(idx == -1){
      puts("-1");
    } else {
      for(int i = 1; i <= idx; i++){
        ans[inp[i].id] = 1;
      }
      for(int i = idx + 1; i <= n; i++){
        ans[inp[i].id] = 2;
      }
      for(int i = 1; i <= n; i++){
        printf("%d%c", ans[i], (i == n ? '\n' : ' '));
      }
    }
  }
}
