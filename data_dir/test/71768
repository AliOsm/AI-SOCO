#include <bits/stdc++.h>
using namespace std;

using LL = long long;
using PII = pair<LL, LL>;
#define X first
#define Y second

LL dist(LL x, LL y) {
  return x * x + y * y;
}
LL dist(const PII& a, const PII& b) {
  return dist(a.X - b.X, a.Y - b.Y);
}

//struct DSU {
//  vector<int> par;
//  int comps;
//  DSU(int n) {
//    comps = n;
//    par.assign(n, 0);
//    iota(par.begin(), par.end(), 0);
//  }
//  int find(int u) {
//    if (par[u] == u) return u;
//    return par[u] = find(par[u]);
//  }
//  void merge(int u, int v) {
//    u = find(u), v = find(v);
//    if (u != v) {
//      par[u] = v;
//      comps--;
//    }
//  }
//};

int main() {
#ifdef LOCAL_EXEC
	freopen("sample.in", "r", stdin);
//	freopen("sample.out", "w", stdout);
#else
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#endif

  int n; cin >> n;
  vector<PII> pts(n + 1);
  for (int i = 1; i <= n; i++) {
    cin >> pts[i].X >> pts[i].Y;
  }

//  DSU dsu(n + 1);
//  dsu.comps = n;
//  for (int i = 1; i <= n; i++) {
//    map<LL, int> vals;
//    for (int j = 1; j <= n; j++) {
//      if (i == j) continue;
//      LL d = dist(pts[i], pts[j]);
//      if (vals[d] > 0) {
//        dsu.merge(j, vals[d]);
//      }
//      vals[d] = j;
//    }
//  }
//  assert(dsu.comps >= 2);
//  int p = dsu.find(1);
//  vector<int> ans;
//  for (int i = 1; i <= n; i++) {
//    if (p == dsu.find(i)) {
//      ans.push_back(i);
//    }
//  }

  vector<int> ans;
  while (true) {
    vector<vector<int>> ids(4, vector<int>());
    for (int i = 1; i <= n; i++) {
      int x = abs(pts[i].X) % 2, y = abs(pts[i].Y) % 2;
      ids[2 * x + y].push_back(i);
    }
    int nz = 0, idx;
    for (int i = 0; i < 4; i++) {
      if (!ids[i].empty()) {
        nz++;
        idx = i;
      }
    }
    if (nz == 1) {
      int dx = (idx & 2) / 2;
      int dy = (idx & 1);
      for (int i = 1; i <= n; i++) {
        pts[i].X -= dx;
        pts[i].X /= 2;
        pts[i].Y -= dy;
        pts[i].Y /= 2;
      }
      continue;
    }

    int lt = ids[1].size() + ids[2].size();
    if (lt == 0) {
      ans = ids[0];
      break;
    } else if (lt == n) {
      ans = ids[1];
      break;
    } else {
      ans = ids[1];
      for (int i: ids[2]) ans.push_back(i);
      break;
    }
  }

  cout << ans.size() << endl;
  for (int i: ans) cout << i << ' ';
  cout << endl;

//  vector<bool> A(n + 1, false);
//  for (int i: ans) A[i] = true;
//
//  map<LL, int> vals;
//  for (int i = 1; i <= n; i++) {
//    for (int j = i + 1; j <= n; j++) {
//      LL d = dist(pts[i], pts[j]);
//      int ty = A[i] == A[j] ? 1 : 2;
//      if (vals[d] == 0) vals[d] = ty;
//      assert(vals[d] == ty);
//    }
//  }


  return 0;
}
