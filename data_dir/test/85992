// in the name of god
#include <bits/stdc++.h> 
using namespace std ; 
#define X first  
#define Y second 
#define y1 asdfg
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0) 
#define int long long 
//#define cout cout << setprecision ( 12 )  
typedef long double ld; 
typedef pair < int , int > pii ;
typedef pair < ld , ld > point ; 
const int maxn = 1e5 + 100  ; 
const int inf = 1e16 ;
const ld pi = 3.1415926535897932384626433832795 ;
int left(int x){return 2*x;} 
int right(int x){return 2*x+1;} 
int n , a , b , ar [ maxn ] , data [ maxn * 4 ] ;
pair < pii , int > p [ maxn ] ;

void add ( int p , int x , int st = 0 , int en = n , int id = 1 ) 
{ 
  if ( en - st < 2 ) 
    {
      data [ id ] = max ( data [ id ] , x ) ;
    return ; 
    } 
  int mid = ( st + en ) / 2 ; 
  if ( p < mid ) 
    add ( p , x , st , mid , left(id) ) ;
  else
    add ( p , x , mid , en , right(id) ) ;
  data [ id ] = max ( data [ left ( id ) ] , data [ right ( id ) ] ) ;
}

int get ( int l , int r , int st = 0 , int en = n , int id = 1 )
{
  if ( l <= st && en <= r ) 
    return data [ id ] ; 
  if ( r <= st || en <= l )
    return 0 ;
  int mid = ( st + en ) / 2 ; 
  return max ( get ( l , r , st , mid , left ( id ) ) , 
	       get ( l , r , mid , en , right ( id ) ) ) ;
} 


bool cmp ( pair < pii , int > p1 , pair < pii , int > p2 ) 
{return p1.X.Y<p2.X.Y;} 
vector < int > vc ;
map < int , int > mp ;

main ( ) 
{ 
  fast ;
  cin >> n ;
  for ( int i = 0 ; i < n ; i ++ )
    { 
      cin >> a >> b ;
      ar [ i ] = a * a * b ;
      vc . push_back ( ar [ i ] ) ;
    }
  sort ( vc . begin ( ) , vc . end ( ) ) ;
  unique ( vc . begin ( ) , vc . end( ) ) ;
  for ( int i = 0 ; i < vc . size ( ) ; i ++ )
    mp [ vc [ i ] ] = i ; 
  for ( int i = 0 ; i < n ; i ++ )
    p [ i ] . Y = mp [ ar [ i ] ] ; 
  for ( int i = 0 ; i < n ; i ++ )
    { 
      add ( p [ i ] . Y , get ( 0 , p [ i ] . Y ) + ar [ i ] ) ;
    } 
  cout << fixed << ld(get ( 0 , n )) * pi ;
} 
