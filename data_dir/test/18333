#include <string.h>
#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <stack>
#include <queue>
#include <set>

#include <map>
#include <vector>
#include <string>
#include <stdlib.h>

#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf

#define pf printf
#define mp make_pair

using namespace std;

/*
struct Edge{
	int a,b;
	int next;
	Edge(){}
	Edge(int a, int b, int next):a(a),b(b),next(next){}
}e[1000010];

int p[100000]
*/

vector<int> g[1000010];
int col[400010];
int odd, even;

int dfs(int t, int f, int c) {
	if(col[t]>0) {
		if(col[t] != c) {
			return 0;
		}
		return 1;
	}
	if(c==1)odd++;
	else even++;
	col[t] = c;

	for(int i = 0;i < g[t].size();++i) {
		int u = g[t][i];
		if(u==f)continue;
		if(col[u]>0) {
			if(col[u] == c) {
				return 0;
			}
			continue;
		}
		int ret = dfs(u,t,3-c);
		if(ret==0)return ret;
	}
	return 1;
}

ll mod = 998244353;

ll pw(ll a, int b) {

	ll ret = 1;
	while(b) {
		if(b&1) ret = (ret * a)%mod;
		a = (a*a)%mod;
		b>>=1;
	}
	return ret;
}

int main(){
	int T;
	sf("%d",&T);
	while(T--) {
		int n,m;
		sf("%d%d",&n,&m);
		for(int i = 0; i <=n; ++i){
			g[i].clear();
			col[i] = 0;
		}
		
		fr(i,0,m) {
			int u,v;
			sf("%d%d",&u,&v);
			g[u].pb(v);
			g[v].pb(u);
		}

		ll ans = 1;
		for(int i = 1; i <=n; ++i) {
			if(col[i])continue;
			odd = 0, even = 0;
			int ret = dfs(i,i,1);
			if(ret==0) {
				ans = 0;
				break;
			}
			else {
				//printf("odd = %d even = %d\n",odd,even);
				if(even==odd) {
					ll ret= pw(2,even)%mod;
					ret = (ret*2)%mod;
					ans = (ans *ret)%mod;
				}
				else {
					ll ret= (pw(2,even)+pw(2,odd))%mod;
					ans = (ans *ret)%mod;
				}
			}
		}
		//for(int i = 0; i <=n; ++i)g[i].clear();
		printf("%lld\n",ans);
	}
}