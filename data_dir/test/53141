#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
using namespace std;
typedef long double ld;
typedef long long ll;
const ld EPS = 1e-10;
char a[500][501];
int s1[250000], s2[250000], d1[250000], d2[250000];
ld s[250000];
ld sqr(ld w) {
  return w * w;
}
int cmp(ld c1, int c2, int c3, ld v1, int v2, int v3) {
  if (c1 + EPS < v1) {
    return -1;
  }
  if (c1 - EPS > v1) {
    return 1;
  }
  if (c2 > v2) {
    return -1;
  }
  if (c2 < v2) {
    return 1;
  }
  if (c3 < v3) {
    return -1;
  }
  if (c3 > v3) {
    return 1;
  }
  return 0;
}
void qs(int q, int w) {
  int e = q, r = w, y = q + (rand() % (w - q + 1));
  ld t1 = s[y];
  int t2 = s1[y], t3 = s2[y];
  do {
    while (cmp(s[e], s1[e], s2[e], t1, t2, t3) < 0) e++;
    while (cmp(s[r], s1[r], s2[r], t1, t2, t3) > 0) r--;
    if (e <= r) {
      swap(s[e], s[r]);
      swap(s1[e], s1[r]);
      swap(s2[e], s2[r]);
      e++; r--;
    }
  } while (e <= r);
  if (q < r) qs(q, r);
  if (e < w) qs(e, w);
}
ld rot(ld q, ld w, ld e, ld r, ld t, ld y) {
  return (e - q) * (y - w) - (t - q) * (r - w);
}
int q, lAns1, lAns2;
int sch(int e, int r) {
  swap(e, r);
  e = q - e - 1;
  if (((e < 0) || (e >= q)) || ((r < 0) || (r >= q))) {
    return 0;
  }
  return (a[e][r] != '0');
}
void check(int e, int r, int de, int dr) {
  if (sch(e + de, r) + sch(e, r + dr) == 2) {
    lAns1 = (1 + de) / 2;
    lAns2 = (1 + dr) / 2;
  }
}
int main() {
  #ifdef Vlad_kv
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
  #endif // Vlad_kv
  int w, e, r, t, numV;
  for (scanf("%d", &q); q; scanf("%d", &q)) {
    numV = 0;
    for (w = 0; w < q; w++) {
      scanf("%s", a[w]);
      for (e = 0; e < q; e++) {
        if (a[w][e] == '1') {
          s1[numV] = q - w - 1;
          s2[numV] = e;
          swap(s1[numV], s2[numV]);
          numV++;
        }
      }
    }
    for (w = 1; w < numV; w++) {
      if ((s2[w] < s2[0]) || ((s2[w] == s2[0]) && (s1[w] < s1[0]))) {
        swap(s1[w], s1[0]);
        swap(s2[w], s2[0]);
      }
    }
    for (w = 1; w < numV; w++) {
      ld AB = sqrt(sqr(s1[w] - s1[0]) + sqr(s2[w] - s2[0]));
      s[w] = (sqr(AB) + 1 - (sqr(s1[w] - s1[0] - 1) + sqr(s2[w] - s2[0]))) / 
             AB;
    }
    qs(1, numV - 1);
    
    t = 0;
    for (w = 1; w < numV; w++) {
      while (!((t == 0) || (rot(s1[t - 1], s2[t - 1], s1[t], s2[t], s1[w], s2[w]) < -0.1))) {
        t--;
      }
      t++;
      s1[t] = s1[w];
      s2[t] = s2[w];
    }
    t++;
    
    for (w = 0; w < t; w++) {
      check(s1[w], s2[w], 1, 1);
      check(s1[w], s2[w], 1, -1);
      check(s1[w], s2[w], -1, 1);
      check(s1[w], s2[w], -1, -1);
      
      d1[w] = s1[w] + lAns1;
      d2[w] = s2[w] + lAns2;
    }
    
    r = 0;
    
    for (w = 1; w < t; w++) {
      if ((d1[w] != d1[r]) || (d2[w] != d2[r])) {
        r++;
        d1[r] = d1[w];
        d2[r] = d2[w];
      }
    }
    while ((d1[r] == d1[0]) && (d2[r] == d2[0])) {
      r--;
    }
    
    t = r + 1;
    
    r = 0;
    for (e = 1; e < t; e++) {
      if ((d1[e] < d1[r]) || ((d1[e] == d1[r]) && (d2[e] < d2[r]))) {
        r = e;
      }
    }
    
    cout << t << "\n";
    e = r;
    do {
      printf("%d %d\n", d1[e], d2[e]);
      e++;
      if (e == t) {
        e = 0;
      }
    } while (e != r);
    
  }
  return 0;
}