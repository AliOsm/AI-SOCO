#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

inline ll subMod(ll a, ll b, ll k) {
  a %= k;
  b %= k;
  a -= b;
  if (a < 0) a += k;
  return a;
}

int main() {
  int n, k;
  scanf("%d %d", &n, &k);
  vector< ll > a(n), b(n);
  ll sum = 0;
  for (int i = 0; i < n; ++i) {
    scanf("%lld %lld", &a[i], &b[i]);
    sum += a[i] + b[i];
  }
  vector< int > dp(k);
  dp[0] = 1;
  for (int i = 0; i < n; ++i) {
    vector< int > new_dp(k);
    for (int j = 0; j < k; ++j) {
      new_dp[j] = dp[subMod(j, a[i], k)];
      for (int qtd = 0; qtd < min(a[i], k + 1LL); ++qtd) {
        if (subMod(a[i], qtd, k) + b[i] >= k) {
          new_dp[j] |= dp[subMod(j, qtd, k)];
        }
      }
      if (i + 1 == n && new_dp[j]) {
        printf("%lld\n", (sum - j) / k);
        return 0;
      }
    }
    swap(dp, new_dp);
  }
  return 0;
}