//ITNOA
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <fstream>
#include <cstring>
#include <cstdlib>
#include <iomanip>
#include <cassert>
#include <random>

using namespace std;

#define scan(x) do{while((x=getchar())<'0'); for(x-='0'; '0'<=(_=getchar()); x=(x<<3)+(x<<1)+_-'0');}while(0)
char _;


#define rep(i, s, e) for(int i = s; i < e; i ++)
#define X first
#define Y second

typedef long long ll;
typedef long double ld;

const int maxN = 300 + 5;
const int mod = 1000*1000*1000 + 7;
const int base = 701;
const int SQ = 500;
const int maxL = 20;

int a[maxN];
int c[maxN][maxN];
int cnt[maxN][maxN];
int cntt[maxN];
int fac[maxN];

bool check(ll x) {
	ll y = sqrt(x);
	for(int i = max(x-5, 0LL); i < x + 5; i ++)
		if(y * y == x)
			return true;
	return false;
}

int dp[maxN], odp[maxN];

int32_t main()
{
	ios::sync_with_stdio(0); cin.tie(0);
	fac[0] = 1;
	for(int i = 1; i < maxN; i ++)
		fac[i] = (1LL) * fac[i-1] * i % mod;

	for(int i = 0; i < maxN; i ++)
		c[i][0] = 1;
	for(int i = 1; i < maxN; i ++)
		for(int j = 1; j < maxN; j ++)
			c[i][j] = (c[i-1][j-1] + c[i-1][j]) % mod;

	for(int i = 1; i < maxN; i ++)
		for(int j = 1; j <= i; j ++)
			cnt[i][j] = c[i-1][j-1];

	int n; cin >> n;
	for(int i = 0; i < n; i ++)
		cin >> a[i];

	for(int i = 0; i < n; i ++) {
		bool bad = false;
		for(int j = 0; j < i; j ++) 
			if(check((1LL) * a[i] * a[j])) {
				bad = true;
				cntt[j] ++;
				break;
			}
		if(bad == false)
			cntt[i] ++;
	}

	vector<int> v;
	for(int i = 0; i < n; i ++)
			if(cntt[i] > 0)
				v.push_back(cntt[i]);

	dp[0] = 1;
	n = v.size();
	int sum = 0;
	for(int i = 0; i < n; i ++) {
		for(int j = 0; j < maxN; j ++) {
				odp[j] = dp[j];
				dp[j] = 0;
			}

		for(int j = 0; j <= sum; j ++) 
			for(int k = 1; k <= v[i]; k ++)
				for(int l = 0; l <= sum + v[i]; l ++) {
					if(odp[j] == 0) continue;
					int ad = v[i] - k;
					int su = j + ad - l;
					if(su < 0 || k < su) continue;
					int tmp = (1LL) * c[j][su] * c[sum+1-j][k-su] % mod;
					tmp = (1LL) * tmp * cnt[v[i]][k] % mod;
					tmp = (1LL) * tmp * fac[v[i]] % mod;
					tmp = (1LL) * tmp * odp[j] % mod;

					dp[l] = (dp[l] + tmp) % mod;
				}
		sum += v[i];
	}

	cout << dp[0] << endl;
	return 0;
}
