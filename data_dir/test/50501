#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ff first
#define ss second
#define PI 2*acos(0.0)
#define all(a) a.begin(),a.end()
#define INF (1<<28)
#define mem(a,x) memset(a,x,sizeof(a))
#define SEGMENT_TREE left=2*node,right=left+1,mid=(b+e)/2
using namespace std;


/**------------------------------------BITMASK------------------------------------------**/
//int Change(int N, int pos){return N= N^(1<<pos);}
//bool Check(int N, int pos){return (bool)(N &(1<<pos));}
/**-----------------------------------------------------------------------------------------------**/

/**-----------------------------DIRECTION_ARRAY-------------------------**/
///------FOUR_DIRECTION---------///
//int fx[]={0,1,0,-1};
//int fy[]={1,0,-1,0};


///------EIGHT_DIRECTION---------///
//int fx[]={0,1,1,1,0,-1,-1,-1};
//int fy[]={1,1,0,-1,-1,-1,0,1};
/**--------------------------------------------------------------------------------------**/

//int gcd(int a, int b){return (a==0)? b: gcd(b%a,a);}
//int lcm(int a, int b){return (a/gcd(a,b))*b;}


/*****int exgcd(int A, int B, int *X, int *Y){


    int x2, y2, x1, y1, x, y, r, r1, r2, q;
    x2=1; y2=0;
    x1=0; y1=1;
    for(r2=A, r1=B; r1!=0 ; r2=r1, r1=r, x2=x1, y2=y1, x1=x, y1=y){

        q=r2/r1;
        r=r2%r1;
        x=x2-(x1*q);

        y=y2-(y1*q);
    }
    *X=x2;
    *Y=y2;
    return r2;

}******/




///-----------------------------START FROM HERE--------------------------------------///
vector<int>edge[300005];
vector<pll>vv[300005];
ll dis[300005];
int n, m, k;
int par[300005];
void dijkastra(){

    for(int i=1; i<=n; i++)dis[i]=10000000000000000;
    priority_queue<pll>Q;

    Q.push(make_pair(0,1));

    dis[1]=0;

    while(!Q.empty()){

        pll uu=Q.top();
        Q.pop();

        int u=uu.ss;
        ll cst=-uu.ff;
       // cout<<u<<" "<<dis[u]<<endl;
       if(dis[u]<cst)continue;
        for(int i=0; i<vv[u].size(); i++){
            int v=vv[u][i].ff;
            ll cc=vv[u][i].ss;
            if(dis[v]>cc+cst){
                dis[v]=cc+cst;
                Q.push(make_pair(-dis[v], v));
                par[v]=u;
            }

        }

    }

}
vector<int>ans;
void dfs(int u, int pr){
   // cout<<u<<" "<<pr<<endl;
    if(ans.size()==k)return;
    for(int i=0; i<vv[u].size(); i++){
        int v=vv[u][i].ff;
        if(v==pr)continue;
        if(ans.size()==k)return;
       // cout<<v<<" "<<u<<" "<<par[v]<<endl;
        if(par[v]!=u)continue;
        ans.pb(edge[u][i]);
        dfs(v, u);
        if(ans.size()==k)return;
    }

}

int main(){
    scanf("%d %d %d", &n, &m, &k);

    for(int i=1; i<=m; i++){
        int u, v;
        ll w;
        scanf("%d %d %lld", &u, &v, &w);
        vv[u].pb(make_pair(v, w));
        vv[v].pb(make_pair(u, w));
        edge[u].pb(i);
        edge[v].pb(i);


    }
    dijkastra();
    dfs(1,0);
    //for(int i=1; i<=n; i++)cout<<i<<" "<<dis[i]<<endl;
    printf("%d\n", ans.size());
    for(int i=0; i<ans.size(); i++)printf("%d ",ans[i]);
}
