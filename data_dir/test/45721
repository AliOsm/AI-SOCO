#include<bits/stdc++.h>

using namespace std;

typedef long long int lli;
typedef long long ll;
typedef unsigned long long int ulli;
typedef pair<int,int> pii;
typedef vector<int> vec;

#define pb push_back
#define mp make_pair
#define mt make_tuple
#define scn(n) scanf("%d",&n)
#define scnll(n) scanf("%lld",&n)
#define scn2(n,m) scanf("%d%d",&n,&m)
#define scn3(n,m,w) scanf("%d%d%d",&n,&m,&w)
#define scn2ll(n,m) scanf("%lld%lld",&n,&m)
#define atoz(v) v.begin(),v.end()
#define ratoz(v) v.rbegin(),v.rend()
#define Fill(a,v) memset(a,v,sizeof(a))
#define sz(v) v.size()
#define fi first
#define se second
#define inf 1e9
#define pi acos(-1.0)
#define sqr(x) x*x
#define max3(a,b,c) max(a,max(b,c))
#define min3(a,b,c) min(a,min(b,c))
#define ten(n) (int)1e##n
#define tenll(n) (lli)1e##n
#define N 100002

pii greedy[N];
lli dp[N][202];
int n;

lli fun(int pos , int moves_left){

    if(pos>n) return 0;

    if(dp[pos][moves_left] != -1) return dp[pos][moves_left];

    //cout<<"+++ "<<" "<<pos<<" "<<greedy[pos].se<<endl;

    if(greedy[pos].fi == 0) return dp[pos][moves_left] = fun(pos+1,moves_left);

    lli ret = greedy[pos].fi + fun(greedy[pos].se+1,moves_left);

//    cout<<"+++ "<<ret<<" "<<pos<<" "<<greedy[pos].se<<endl;

    if(moves_left) ret = min(ret , fun(pos+1,moves_left-1));

    return dp[pos][moves_left] = ret;
}

int main()
{

    /*
     ios_base::sync_with_stdio(false);
    cin.tie(0);
    */

   // freopen("inp.txt","r",stdin);

    int m,k;
    scn3(n,m,k);

    vector<pii> start[n+1] , End[n+1];

    for(int i=1; i<=k; i++){
        int s,t,d,w;
        scn3(s,t,d);
        scn(w);

        start[s].pb({w,d});
        End[t].pb({w,d});
    }

    multiset<pii>curr;

    for(int i=1; i<=n; i++){

        greedy[i] = {0,0};

        for(pii p : start[i]) curr.insert(p);

        if(curr.size() == 0) continue;

        greedy[i] = *curr.rbegin();

        for(pii p :End[i]) curr.erase(curr.find(p));
    }

    Fill(dp,-1);

    cout<<fun(1,m);

    return 0;
}
