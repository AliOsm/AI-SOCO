#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 1e5 + 7;

int n, m, xr[N], vis[N];
vector < PII > G[N];
vector < int > cyc;

void dfs(int v)
{
    vis[v] = 1;
    for(auto u: G[v])
    {
        if(!vis[u.first])
            xr[u.first] = xr[v] ^ u.second, dfs(u.first);
        else
            cyc.push_back(xr[v] ^ xr[u.first] ^ u.second);
    }
}

int main()
{
    _upgrade
    cin >> n >> m;
    for(int i = 0; i < m; i++)
    {
        int a, b, c;
        cin >> a >> b >> c;
        G[a].push_back({b, c});
        G[b].push_back({a, c});
    }
    dfs(1);
    for(int b = 30; b >= 0; b--)
    {
        for(int i = 0; i < sz(cyc); i++)
        {
            if(__builtin_clz(cyc[i]) == 31 - b)
            {
                for(int j = i + 1; j < sz(cyc); j++)
                {
                    if(__builtin_clz(cyc[j]) == 31 - b)
                    {
                        cyc[j] ^= cyc[i];
                    }
                }
                break;
            }
        }
    }
    sort(all(cyc));
    reverse(all(cyc));
    int ans = xr[n];
    for(int i = 0; i < sz(cyc); i++)
    {
        if((ans ^ cyc[i]) < ans)
            ans ^= cyc[i];
    }
    cout << ans << "\n";
	return 0;
}
