#include <bits/stdc++.h>
using namespace std;
#define ll long long int
//  i solved this problem after 7 day and i learned many thing form it including
//  modular inverse, extended euclides algorithm, binpow.
//1 x = F(m) / (F(n-1) * F(m - (n - 1)))
//2 y = ((1 << (n - 3))
//3 z = (n-2)
// res = (x * y * z) % mod  ==> ( (x % mod) * (y % mod) * (z % mod) ) % mod
// calculate x % mod == > [ [ m * m-1 * m-2 * ... * (m - (n - 1) + 1) ] / (n - 1)! ] % mod
// s = (m - (n - 1) + 1)
// x % mod ==> [ (s * s+1 * s+2 * ... * m) / 1 * 2 * ... * (n-2) * (n-1) ] % mod
// [(s / 1) % mod] * [((s+1) / 2) % mod] * ... * [m/(n-1) % mod]  this is wrong answer
// another formula is:
// x % m = [ m! * inv((n-1)!) * inv(m-(n-1)!) ] % mod
// x % m = [ m! % mod * inv((n-1)!) % mod * inv(m-(n-1)!) % mod ] % mod
const ll mod = 998244353;
ll binpow(ll a, ll b) {
  ll res = 1;
  a%= mod;
  while (b > 0) {
    if (b & 1)
      res = a * res % mod;
    a = a * a % mod;
    b >>= 1;
  }
  return res;
}

vector<ll> extended_euclidean(ll a ,ll b){
  ll ac = a;
  ll bc = b;
  a = abs(a);
  b = abs(b);
  if (b > a) swap(a,b);
  ll ac1 = a;
  ll bc1 = b;
  ll s1, s2, s, t1, t2, t;
  s1 = 1; s2 = 0;
  t1 = 0; t2 = 1;
  while (b != 0) {
    ll r = a % b;
    ll q = a / b;
    s = s1 - s2 * q;
    t = t1 - t2 * q;
    a = b;
    b = r;
    s1 = s2;
    s2 = s;
    t1 = t2;
    t2 = t;
  }

  vector<ll> v(3); // v[0] = x and v[1] = y and v[2] = gcd(a,b)
  v[0] = s1;
  v[1] = t1;
  v[2] = a;
  
  if (ac == ac1) {
    // nothing
  }
  else if ( ac == (ac1*(-1)) ) {
    v[0]*= (-1);
  }
  else if ( ac == bc1 ) {
    swap(v[0], v[1]);
    swap(ac1, bc1);
  }
  else { //ac == (bc1*(-1)) 
    swap(v[0], v[1]);
     swap(ac1, bc1);
    v[0]*= (-1);
  }

  if (bc == (bc1*(-1)))
    v[1]*= (-1);

  // s1 is x and t1 is y
  // a = gcd(a, b)
  return v;
}

int main()
{
  
  // for x % m
  // calculate all factorial.
  // for inv since m is prime i can use formula instead of extended euclides
    // but i use extended euclides
    vector <ll> fact(2e5 + 1);
    fact[0] = 1;
    fact[1] = 1;
    for(ll i = 2; i <= 2e5; ++i) 
      fact[i] = fact[i - 1] * i % mod;
    
  ll n; cin >>n;
  ll m; cin >>m;
  ll ans = 1;
  vector <ll> ev(3);
  ev = extended_euclidean(fact[n - 1], mod);
  ll X = ev[0];
  X = (X % mod + mod) % mod;
  ev = extended_euclidean(fact[m - (n - 1)], mod);
  ll X1 = ev[0];
  X1 = (X1 % mod + mod) % mod;
  ans = fact[m] * X % mod * X1 % mod;
  ans = ans * binpow(2, n - 3) % mod * (n - 2) % mod;
  cout<<ans<<"\n";
  return 0;
}
