#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define ld long double

const int N = 5e5+15;


vector<pair<int,pair<int,int> > > adj[N];

void solve(){
	int n,m,k;
	scanf("%d%d%d",&n,&m,&k);
	for(int i=0;i<m;++i){
		int u,v,w;
		scanf("%d%d%d",&u,&v,&w);
		adj[u].push_back(make_pair(w,make_pair(v,i+1)));
		adj[v].push_back(make_pair(w,make_pair(u,i+1)));
	}
	vector<int> last(n+1,-1);
	vector<ll> dist(n+1,(ll)1e18);
	dist[1] = 0;
	priority_queue<pair<ll,int>, vector<pair<ll,int> >, greater<pair<ll,int> > >pq;
	pq.push(make_pair(0,1));
	int cur = 0;
	vector<int> ret;
	while(!pq.empty() && cur<k ){
		int node = pq.top().second;
		ll sum = pq.top().first;
		pq.pop();
		if(dist[node]!= sum){
			continue;
		}
		if(last[node]!=-1){
			++cur;
			ret.push_back(last[node]);
		}

		for(int i=0;i<adj[node].size();++i){
			ll nSum = sum + adj[node][i].first;
			int nNode = adj[node][i].second.first;
			int id = adj[node][i].second.second;
			if(dist[nNode] > nSum){
				dist[nNode] = nSum;
				last[nNode] = id;
				pq.push(make_pair(nSum,nNode));
			}
		}
	}
	printf("%d\n",min(n-1,k) );
	for(int i=0;i<ret.size();++i){
		printf("%d ",ret[i] );
	}
	putchar('\n');
}
int main(){
	//freopen("input.txt","r",stdin);
	solve();
}