#define _CRT_SECURE_NO_WARNINGS 1
#include <iostream>
#include <vector>
#include <queue>
#include <functional>
#include <stdio.h>
#include <map>
#include <algorithm>
#include <set>
#include <string>
#include <cstring>
#include <sstream>
#include <cmath>
#include <iomanip>
#include <cstdio>
#include <numeric>
#include <utility>

using namespace std;
typedef long long ll;
#define sc(x)           scanf("%d",&x)
#define sz(v)			(v.size())
#define mem(x,d)		memset(x,d,sizeof(x))
const int dx[] = { 0, -1, 0, 1, -1, -1, 1, 1 };
const int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };

const int N = 3500;
char grad[9][9]; bool v[9][9];
struct point
{
	int x, y, lvl;
};
bool ok(int x, int y)
{
	return(x > 0 && x < 9 && y>0 && y < 9 && grad[x - 1][y] != 'S' && grad[x][y] == '.' && !v[x][y]);
}
void update()
{
	for (int i = 8; i > 0; --i)
	{
		for (int j = 1; j < 9; ++j)
		{
			if (grad[i][j] == 'S')
			{
				grad[i][j] = '.';
				grad[i + 1][j] = 'S';
			}
		}
	}
}
bool bfs()
{
	queue<point>q;
	q.push({ 8,1,0 }); int L = 0;
	while (!q.empty())
	{
		int x = q.front().x; 
		int y = q.front().y;
		int lvl = q.front().lvl; q.pop();
		if (x == 1 && y == 8) return 1;
		v[x][y] = 1;
		if (L != lvl) update(),L++;
		for (int i = 0; i < 8; ++i)
		{
			int nx = x + dx[i]; int ny = y + dy[i];
			if (ok(nx, ny)) q.push({ nx,ny,lvl + 1 });
		}
		if (grad[x - 1][y] != 'S') q.push({ x,y,lvl + 1 });
	}

	return 0;
}
int main()
{
	//#ifndef ONLINE_JUDGE
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	//#endif
	for (int i = 1; i < 9; ++i) for (int j = 1; j < 9; ++j) cin >> grad[i][j];
	grad[1][8] = '.';
	grad[8][1] = '.';
	if (bfs()) printf("WIN\n");
	else printf("LOSE\n");
	return 0;
}