#pragma GCC optimize ("O3")
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define mod(n, m) (((n%m) + m)%m)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'

const int N = 2e5 + 5;
int arr[N], n;
ll p, k;
ll accum[N];

ll get(int l, int r)
{
	return accum[r] - (l ? accum[l - 1] : 0);
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	int tc;
	cin >> tc;
	while (tc--)
	{
		cin >> n >> p >> k;
		rep(i, 0, n)
			cin >> arr[i], accum[i] = 0;

		sort(arr, arr + n);

		rep(i, 0, n)
		{
			accum[i] = arr[i];
			if (i > 0)
				accum[i] += accum[i - 1];
		}

		int mx = 0;
		rep(i, 0, n)
			if (accum[i] <= p)
				mx = i + 1;
		vector<ll> hoba(n);
		rep(i, k - 1, n)
		{
			hoba[i%k] += arr[i];
			int cnt = (i+1)/k;
			cnt *= k;
			if (hoba[i%k] > p)
				continue;
			int last = (i+1)%k;
			ll rem = p - hoba[i%k];
			if (rem > 0 && last)
			{
				int idx = upper_bound(accum, accum + last, rem) - accum;
				cnt += idx;
			}
			mx = max(mx, cnt);
		}

		cout << mx << endl;
	}

	return 0;
}
