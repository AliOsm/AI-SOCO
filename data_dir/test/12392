

#include<bits/stdc++.h>
using namespace std;
#define LL                  long long
#define ull                 unsigned long long LL
#define scl(n)              scanf("%lld", &n)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)

#define MOD                 1000000007
#define MODP                99999999999973LL
#define pb                  push_back
#define mp                  make_pair
#define pp                  pair<LL,LL>
#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e18
#define EPS                 1e-8
#define Pi                  acos(-1.0)
LL bigmod(LL b, LL p, LL md){if(p==0) return 1;if(p%2==1){ return ((b%md)*bigmod(b,p-1,md))%md;} else {LL y=bigmod(b,p/2,md);return (y*y)%md;}}
#define N 1000006

bool vis[N];
vector<int>v[N];
int sz=0;
stack<int>st;
void dfs(int s)
{
    vis[s]=true;
    st.push(s);
    sz++;
    for(int now:v[s])
    {
        if(vis[now]==false)
        {
            dfs(now);
        }
    }
}

int ans[N];

int main()
{
    int n,m;
    scii(n,m);

    for(int i=0;i<m;i++)
    {
        int k;
        sci(k);

        int arr[k];

        for(int j=0;j<k;j++)
        {
            sci(arr[j]);
        }

        for(int j=0;j+1<k;j++)
        {
            v[ arr[j] ].pb(arr[j+1]);
            v[ arr[j+1] ].pb( arr[j] );
        }


    }

    for(int i=1;i<=n;i++)
    {
        if(vis[i]==false)
        {
            sz=0;
            dfs(i);

            while(st.size())
            {
                ans[st.top()]=sz;
                st.pop();
            }

            cout<<ans[i]<<" ";


        }
        else
            cout<<ans[i]<<" ";
    }



    return 0;
}



/* LL dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* LL dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* LL dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* LL dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction
