#include<iostream>
#include<cctype>
#include<algorithm>
#include<vector>
#include<map>

using namespace std;

const int MAXN = 202;
int d[MAXN], in = 1;
bool mark[MAXN];
vector<int> v[MAXN];
map<string, int> m;

int DFS(int n)
{
	if(mark[n])
		return d[n];
	mark[n] = true;
	for(int x : v[n])
		d[n] = max(d[n], DFS(x));
	return ++d[n];
}

int main()
{
	int n;
	cin >> n;
	for(int i = 0; i < n; i++)
	{
		string s, t;
		cin >> s >> t >> t;
		for(int i = 0; i < s.length(); i++)
			s[i] = tolower(s[i]);
		for(int i = 0; i < t.length(); i++)
			t[i] = tolower(t[i]);
		if(!m[s])
			m[s] = in++;
		if(!m[t])
			m[t] = in++;
		v[m[s]].push_back(m[t]);
	}
	for(int i = 1; i < in; i++)
		DFS(i);
	cout << *max_element(d + 1, d + in) << endl;
	return 0;
}
