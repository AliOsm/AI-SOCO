#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;



void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}




int main()
{
	ios_base::sync_with_stdio(0);
	
	tint n,m;
	cin >> n >> m; 
	vector<vector<tint> > ladj (n);
	vector<vector<bool> > adjm (n,vector<bool> (n));
	vector<tint> deg (n);
	tint minRecognition = 1000000000;
	forn(i,m)
	{
		tint a,b;
		cin >> a >> b;
		deg[a-1]++;
		deg[b-1]++;
		adjm[a-1][b-1] = true;
		adjm[b-1][a-1] = true;
		ladj[a-1].push_back(b-1);
		ladj[b-1].push_back(a-1);
	}
	forn(i,n)
	{
		vector<tint> vecinos = ladj[i];
		forn(j,deg[i])
		forsn(k,j+1,deg[i])
		if (adjm[vecinos[j]][vecinos[k]])
		{
			//cout << i << " " << j << " " <<  k << endl;
			minRecognition = min(minRecognition, deg[i] + deg[vecinos[j]] + deg[vecinos[k]] - 6);
		}
			
	}
	if (minRecognition == 1000000000)
		cout << -1 << endl;
	else
		cout << minRecognition << endl;
	
	return 0;
}



