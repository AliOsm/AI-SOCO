#include <bits/stdc++.h>
using namespace std;
typedef long long int64;
typedef complex<long double> cmplx;
const long double pi = 3.14159265358979323846;
const int inf = (int)2e+9 + 2;
const int mod = 998244353;
const long double eps = 1e-8;
const int N = 100'000;

int n, m, k;
int a[N + 1], b[N];

void solve()
{
  cin >> n >> m;
  for (int i = 0; i < n; ++i)
    cin >> a[i];
  a[n] = 1'000'000'000;
  sort(a, a + n);
  ++n;
  int c = 0;
  for (int i = 0; i < m; ++i) {
    int x1, x2, y;
    cin >> x1 >> x2 >> y;
    if (x1 == 1 && y != 1'000'000'000)
      b[c++] = x2;
  }
  sort(b, b + c);
  int ans = c;
  int p = 0;
  for (int i = 0; i < n; ++i) {
    while (p < c && b[p] < a[i])
      ++p;
    ans = min(ans, c - p + i);
  }
  cout << ans;
}

void precalc()
{
}

int main()
{
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  for (; test; --test)
      solve();
  return 0;
}
