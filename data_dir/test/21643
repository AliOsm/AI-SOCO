#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int mod = 1e9 + 7;
const int N = 1e5 + 1;
int n;

int fac[N];
int inv[N];

bool pr[N];
vec <int> primes[N];

int fpow(int b, int p) {
    ll res = 1;
    ll pow = b;
    while(p) {
        if(p & 1) {
            res *= pow;
            res %= mod;
        }
        pow *= pow;
        pow %= mod;
        p >>= 1;
    }
    return res;
}

void sieve() {
    for(int i = 2; i < N; ++i) {
        if(!pr[i]) {
            for(ll j = i; j < N; j += i) {
                pr[j] = 1;
                primes[j].pb(i);
            }
        }
    }
}

void calc_fac() {
    fac[0] = 1;
    for(int i = 1; i < N; ++i) {
        fac[i] = 1ll * fac[i - 1] * i % mod;
    }
    inv[N - 1] = fpow(fac[N - 1], mod - 2);
    for(int i = N - 2; i >= 0; --i) {
        inv[i] = 1ll * inv[i + 1] * (i + 1) % mod;
    }
}

int bin(int a, int b) {
    if(a < b) {
        return 0;
    }
    return 1ll * fac[a] * inv[b] % mod * inv[a - b] % mod;
}

int calc(int a, int b, int i, int d, int t) {
    if(i == len(primes[a])) {
        int k = a / d;
        return t? bin(k - 1, b - 1): -bin(k - 1, b - 1);
    }
    int res = 0;
    res += calc(a, b, i + 1, d * primes[a][i], !t);
    res += calc(a, b, i + 1, d, t);
    res %= mod;
    return res;
}

void input() {
    cin >> n;    
}

void solve() {
    calc_fac();
    for(int i = 0; i < n; ++i) {
        int a; cin >> a;
        int b; cin >> b;
        cout << (calc(a, b, 0, 1, 1) + mod) % mod << "\n";
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    sieve();
    input();
    solve();
}
