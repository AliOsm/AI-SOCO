#include <iostream>
#include <fstream>
#include <string>
#include <cstring>
#include <stdio.h>
#include <iomanip>
#include <cmath>
#include <vector>
#include<cctype>
#include<algorithm>
#include<set>
#include<stack>
#include<map>
#include<stdlib.h>
#include<ctime>
#include<iterator>
#include <deque>
#include <sstream>
#include<queue>
#include<cstdlib>
#include<climits>
#include<complex>
 
 
#define fn(i,n) for(int (i) = 0;(i) < (n);(i)++)
#define mk(f,s) make_pair((f),(s))
 
using namespace std;
 
typedef long long ll;
typedef pair<int ,int > pp; 
typedef vector<int  > v1;
typedef vector<ll  > vl;
typedef vector<pp  > vpp;
typedef vector<bool  > vb;
typedef vector<char  > vc;
typedef vector<v1 > v2;
typedef map<int ,int > mf;
typedef map<int ,vpp > mv;
typedef map<int ,v1 > ad;


int const siz = 1e9,bound = 1e6;
ll const cnt = 1e18;

vl vec;
vector<pair<ll,ll> > ord;

set<ll > ss,ff;

int main(){	
	int n;
	scanf("%d",&n);
	
	vec = vl(n);
	ord = vector<pair<ll,ll > >(n);
	fn(i,n){
		scanf("%lld",&vec[i]);
		ord[i] = mk(vec[i],i);
	}
	
	sort(ord.begin(),ord.end());

	fn(i,n){
		set<ll >::iterator it = ss.upper_bound(ord[i].first);
		if(it == ss.end()){
			ss.insert(ord[i].first+1);
			ord[i].first++;
		}else{
			ss.insert((*it)+1);
			ord[i].first = (*it)+1;
			ss.erase(*it);
		}
		
	}

	fn(i,n){
		vec[ord[i].second] = ord[i].first - 1;
	}

	fn(i,n){
		printf("%lld",vec[i]);
		if(i+1 != n)
			printf(" ");
	}
	puts("");

	return 0;
}







