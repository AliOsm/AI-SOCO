#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define F first
#define S second
#define ll long long
#define ull  unsigned long long
#define pb push_back

using namespace std;
using namespace __gnu_pbds;
typedef  tree< int , null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
const int N = 2000000;
int t[N], a[N];
void build(int v, int tl, int tr){
    if (tl == tr){
        t[v] = a[tl];
        return;
    }
    int mid = (tl + tr) / 2;
    build(v + v, tl, mid);
    build(v + v + 1, mid + 1, tr);
    t[v] = __gcd(t[v + v], t[v + v + 1]);
}
void update(int v, int tl, int tr, int pos, int x){
    if (tl == tr){
        t[v] = x;
        return;
    }
    int mid = (tl + tr) / 2;
    if (mid >= pos) update(v + v, tl, mid, pos, x);
    else update(v + v + 1, mid + 1, tr, pos, x);
    t[v] = __gcd(t[v + v], t[v + v + 1]);
}
int query(int v, int tl, int tr, int l, int r, int x){
    if (l > r || t[v] % x == 0) return 0;
    if (tl == tr){
        return !(t[v] % x == 0);
    }
    if (l == tl && r == tr){
        int mid = (tl + tr) / 2;
        int v1 = query(v + v, tl, mid, l, mid, x);
        if (v1 > 1) return v1;
        int v2 = query(v + v + 1, mid + 1, tr, mid + 1, tr, x);
        return v1 + v2;
    }
    int mid = (tl + tr) / 2;
    int v1 = query(v + v, tl, mid, l, min(mid, r), x);
    if (v1 > 1) return v1;
    int v2 = query(v + v + 1, mid + 1, tr, max(mid + 1, l), r, x);
    return v1 + v2;
}
main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt","w", stdout);
    int n, q;
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) scanf("%d", a + i);
    scanf("%d", &q);
    build(1, 1, n);
    while(q--){
        int t;
        scanf("%d", &t);
        if (t == 1){
            int l, r, x;
            scanf("%d %d %d", &l, &r, &x);
            int c = query(1, 1, n, l, r, x);
            if (c <= 1){
                printf("YES\n");
            } else{
                printf("NO\n");
            }
        } else{
            int p, x;
            scanf("%d %d", &p, &x);
            update(1, 1, n, p, x);
        }
    }
}
