#include<bits/stdc++.h>
#define MP make_pair
#define PB push_back
#define PP pop_back()
#define ALL(x) x.begin(),x.end()
#define st first
#define nd second
#define sz(x) (int) x.size()
#define pii pair<int,int>
#define ii int,int
#define ll long long
#define lf double
#define llu long long unsigned
#define INPUT freopen("inp.in","r",stdin);
#define OUTPUT freopen("oup.out","w",stdout);
#define sag 2*node+1
#define sol 2*node
#define orta ((bas+son)/2)
#define set(x,y) memset(x,y,sizeof(x))
#define MIN3(x,y,z) min(min(x,y),z)
#define MAX3(x,y,z) max(max(x,y),z)
#define FOR(i,j,k) for(int i=j;i<=k;i++)
#define ROF(i,j,k) for(int i=j;i>=k;i--)
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define MOD 10007
#define inf 1000000000
#define N 1000005
using namespace std;
int q,x,y,ans;
char s[N];
pair<int,pii> ST[(N<<2)];
void build(int bas,int son,int node) {
    if(bas==son) {
        ST[node]=MP(0,MP((s[bas]=='('),(s[bas]==')')));
        return ;
    }
    build(bas,orta,sol);
    build(orta+1,son,sag);
    int mn=min(ST[sol].nd.st,ST[sag].nd.nd);
    ST[node]=MP(ST[sol].st+ST[sag].st+mn,MP(ST[sol].nd.st+ST[sag].nd.st-mn,ST[sol].nd.nd+ST[sag].nd.nd-mn));
}
pair<int,pii> get(int bas,int son,int node) {
    if(bas>y || son<x) return MP(0,MP(0,0));
    if(bas>=x && son<=y) return ST[node];
    pair<int,pii> f=get(bas,orta,sol);
    pair<int,pii> s=get(orta+1,son,sag);
    int mn=min(f.nd.st,s.nd.nd);
    return MP(f.st+s.st+mn,MP(f.nd.st+s.nd.st-mn,f.nd.nd+s.nd.nd-mn));
}
int main() {
    scanf("%s",s+1);
    int len=strlen(s+1);
    build(1,len,1);
    scanf("%d",&q);
    while(q--) {
        scanf("%d %d",&x,&y);
        printf("%d\n",2*get(1,len,1).st);
    }
}
