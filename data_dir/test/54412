// in the name of god 
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
#include <bits/stdc++.h>
//#include <unistd.h>
using namespace std ;
using namespace __gnu_pbds;
void operator+=(vector<int>&in1,const vector<int>&in2){for(int i=0;i<in2.size();i++)in1.push_back(in2[i]);}
#define y2 sdfklgjsdkfd
#define y1 sdfklgjsdkafd
#define L first 
#define R second
#define X first 
#define Y second
#define int long long 
typedef long long ll ;
typedef long double ld ;
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define ALL(x) (x).begin(),(x).end()
typedef pair < int , int > pii ; 
typedef pair < int , pii > pi_ii ;
typedef pair < pii , int > pii_i ;
typedef pair < pii , pii > pii_ii ;
#define ordered_set(TYPE) tree<TYPE, null_type, less<TYPE>, rb_tree_tag, tree_order_statistics_node_update>
//#define "%I64d" "%I64d
const int mod = 1e9 + 7 ;
const int maxL = 22 ;
const ll inf = 1e16 ;
const int baze = 547 ;
const int maxn = 2e6 +10 ;

string s , ans ;
map < char , int > mp  , ret ;

main ( ) 
{ 
  cin >> s ;
  ans . resize ( 2000 ) ; 
  for ( int i = 0 ; i < s.size ( ) ; i ++ ) 
    if ( s [ i ] !='!' ) 
      ans [ i % 4 ] = s [ i ]  ;
  for ( int i = 4 ; i < 200 ; i ++ )
    ans [ i ] = ans [ i - 4 ] ; 
  for ( int i = 0 ; i < s . size ( ) ; i ++ )
    if ( s [ i ] == '!' ) 
      ret [ ans [ i ] ] ++ ; 
  cout << ret [ 'R' ] << ' ' ; 
  cout << ret [ 'B' ] << ' ' ; 
  cout << ret [ 'Y' ] << ' ' ; 
  cout << ret [ 'G' ] << ' ' ; 
} 

/*int mark [ 100 + 105 + 100 ] [ 305 ] , n , ans , l , r ;

int C ( int x ) 
{
  if ( x < 3 ) 
    return 0 ;
  return (x*(x-1)*(x-2))/6; 
}

map < int , int > mp , mp1 ;

main ( ) 
{ 
  cin >> n ; 
  for ( int i = 0 ; i < n ; i ++) 
    cin >> l >> r , mark [ l + 105 ] [ r + 105 ] ++ , mp [ r ] ++ , mp1 [ l ] ++ ;

  for (map < int , int > :: iterator it = mp . begin ( ) ; it != mp . end ( ) ; it ++ )
    ans += C ( it -> Y ) ;
  
  for (map < int , int > :: iterator it = mp1 . begin ( ) ; it != mp1 . end ( ) ; it ++ )
    ans += C ( it -> Y ) ;
  cerr << ans << endl ;
  vector < pii > vc ;
  for ( int i = 1 ; i <= 100 ; i ++ )
    for ( int j = -100 ; j <= 100 ; j ++ )
      if ( i && j && __gcd ( abs ( i ) , abs ( j ) ) == 1 )
	vc . push_back ( pii ( i , j ) ) ;
  for ( int i = -100 ; i <= 100 ; i ++ )
    for ( int j = 0 ; j < vc . size ( ) ; j ++ )  
	   { 
	     // x += vc [ j ] . X ;
	     // y += vc [ j ] . Y ; 
	     int cnt = 0 ;
	     int x = i , y = 0 ; 
	     while ( x <= 100 && y <= 100 && x >= -100 && y >= -100 )
	       { 
		 if ( mark [ x + 105 ] [ y + 105 ] )
		   cnt ++ ;
		 x += vc [ j ] . X ;
		 y += vc [ j ] . Y ; 
		 
	       } 	     
	     x = i , y = 0 ; 
	     x -= vc [ j ] . X ;
	     y -= vc [ j ] . Y ; 
	     while ( x <= 100 && y <= 100 && x >= -100 && y >= -100 )
	       { 
		 if ( mark [ x + 105 ] [ y + 105 ] )
		   cnt ++ ;
		 x -= vc [ j ] . X ;
		 y -= vc [ j ] . Y ; 
	       } 
	     //	     if ( cnt >= 3 ) 
	     //cout << cnt << ' ' << i << ' ' << vc [ j ] . X << ' ' << vc [j ] . Y << endl ;
	     ans += C ( cnt ) ;
	   }
       //cout << ans<< endl ;
       cout << C ( n ) - ans ; 
} 
*/
