/*
author: madhav_1999 aka orthodoxparadox
2 April 2020 at 3:50 AM
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define dbl long double
#define int ll
#define ll long long
#define pii pair<int, int>
#define len(x) (int) x.size()
#define rev(a) reverse(all(a))
#define oiint ostream_iterator<int>(cout, " ") 
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define endl '\n'
#define all(a) a.begin(), a.end()
#define initialise(a, x) memset(a, x, sizeof(a))
#define onlyunique(v) v.erase(unique(all(v)), v.end()); //only for sorted vector
#define inf 2e18
#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#ifdef MADHAV
#define dbg(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){cerr << name << " : " << arg1 << endl;}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << "  ";
	__f(comma + 1, args...);}
#else
#define dbg(...) 42
#endif
template <typename X> ostream& operator << (ostream& x,const vector<X>& v){for(int i=0;i<v.size();++i) x<<v[i]<<" ";return x;} 
template <typename X> ostream& operator << (ostream& x,const set<X>& v){for(auto it:v) x<<it<<" ";return x;} 
template <typename X, typename Y> ostream& operator << (ostream& x, const pair<X,Y>& v) {x<<v.ff<<" "<<v.ss;return x;} 
template <typename T, typename S> ostream& operator << (ostream& os, const map<T, S>& v) { for (auto it : v) os << it.first << "=>" << it.second << endl; return os; }
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
struct pair_hash {inline std::size_t operator()(const std::pair<int, int> & v) const {return v.first*31+v.second;}};
const int MOD = 1e9 + 7;

int takemod(int a, int mod = MOD){a%=mod;if(a<0)a+=mod;return a;}

int fast_exp(int base, int expo, int mod = MOD) {
	int res=1;
	while(expo>0) {
		if(expo&1) res=(res*base)%mod;
		base=(base*base)%mod;
		expo>>=1;}
	return res;}

int modinv(int a, int mod = MOD){return takemod(fast_exp(takemod(a, mod), mod-2, mod), mod);}


const int N = 1e5 + 10;
const int K = 252;
int dp[K][K][K];
int nxt[N][26];


void solve()
{
	int n, q;
	cin >> n >> q;
	string s;
	cin >> s;
	s = '#' + s;
	for(int i = 0; i <= n + 1; i++) {
		for(int j = 0; j < 26; j++) {
			nxt[i][j] = n + 1;
		}
	}
	for(int i = n - 1; i >= 0; i--) {
		for(int j = 0; j < 26; j++) {
			nxt[i][j] = nxt[i + 1][j];
		}
		nxt[i][s[i + 1] - 'a'] = i + 1;
	}
	string a[4]{};
	int l[4]{};
	for(int i = 0; i < K; i++) {
		for(int j = 0; j < K; j++) {
			for(int k = 0; k < K; k++) {
				dp[i][j][k] = inf;
			}
		}
	}
	dp[0][0][0] = 0;
	while(q--) {
		char c;
		cin >> c;
		if(c == '-') {
			int x;
			cin >> x;
			a[x].pop_back();
			l[x]--;
			if(dp[l[1]][l[2]][l[3]] <= n) {
				cout << "YES\n";
			}
			else {
				cout << "NO\n";
			}
		}
		else {
			int x;
			char y;
			cin >> x >> y;
			a[x] += y;
			l[x]++;
			if(x == 1) {
				for(int j = 0; j <= l[2]; j++) {
					for(int k = 0; k <= l[3]; k++) {
						
						dp[l[1]][j][k] = nxt[dp[l[1] - 1][j][k]][a[1][l[1] - 1] - 'a'];
						if(j)
							dp[l[1]][j][k] = min(dp[l[1]][j][k], nxt[dp[l[1]][j - 1][k]][a[2][j - 1] - 'a']);
						if(k)
							dp[l[1]][j][k] = min(dp[l[1]][j][k], nxt[dp[l[1]][j][k - 1]][a[3][k - 1] - 'a']);
					}
				}
			}
			else if(x == 2) {
				for(int j = 0; j <= l[1]; j++) {
					for(int k = 0; k <= l[3]; k++) {	
						// if(j) dbg(j, k, dp[j - 1][l[2]][k], nxt[dp[j - 1][l[2]][k]][a[1][j] - 'a']);	
						dp[j][l[2]][k] = nxt[dp[j][l[2] - 1][k]][a[2][l[2] - 1] - 'a'];
						if(j)
							dp[j][l[2]][k] = min(dp[j][l[2]][k], nxt[dp[j - 1][l[2]][k]][a[1][j - 1] - 'a']);
						if(k)
							dp[j][l[2]][k] = min(dp[j][l[2]][k], nxt[dp[j][l[2]][k - 1]][a[3][k - 1] - 'a']);
					}
				}
			}
			else {
				for(int j = 0; j <= l[1]; j++) {
					for(int k = 0; k <= l[2]; k++) {		
						dp[j][k][l[3]] = nxt[dp[j][k][l[3] - 1]][a[3][l[3] - 1] - 'a'];
						if(j)
							dp[j][k][l[3]] = min(dp[j][k][l[3]], nxt[dp[j - 1][k][l[3]]][a[1][j - 1] - 'a']);
						if(k)
							dp[j][k][l[3]] = min(dp[j][k][l[3]], nxt[dp[j][k - 1][l[3]]][a[2][k - 1] - 'a']);
					}
				}

			}
			if(dp[l[1]][l[2]][l[3]] <= n) {
				cout << "YES\n";
			}
			else {
				cout << "NO\n";
			}
		}
		dbg(a[1], a[2], a[3]);
		dbg(l[1], l[2], l[3]);
		dbg(dp[l[1]][l[2]][l[3]]);
		// dbg(dp[0][1][0]);
		// dbg(dp[1][1][0]);
		cerr << "\n";
	}
}

signed main(){
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	#ifdef MADHAV
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("error.txt", "w", stderr);
	#endif
	clock_t t1, t2;
	t1 = clock();

	int tt = 1;
	// cin >> tt;
	while(tt--)
	{
		solve();
	}
	#ifdef MADHAV
	t2 = clock(); cerr << "time taken: " << (t2-t1)/(dbl)CLOCKS_PER_SEC;
	#endif
	return 0;
}