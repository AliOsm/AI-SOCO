#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <map>

using namespace std;

vector < vector<int> > g, gt;
vector<bool> used;
vector<int> order, comp;

void dfs1 (int v)
{
    used[v] = true;
    for (size_t i=0; i<g[v].size(); ++i)
    {
        int to = g[v][i];
        if (!used[to])
            dfs1 (to);
    }
    order.push_back (v);
}

void dfs2 (int v, int cl)
{
    comp[v] = cl;
    for (size_t i=0; i<gt[v].size(); ++i)
    {
        int to = gt[v][i];
        if (comp[to] == -1)
            dfs2 (to, cl);
    }
}

void inserting(int a,bool a1,int b,bool b1)
{
    a*=2;
    b*=2;
    gt[a^a1].push_back(b^b1^1);
    g[a^a1^1].push_back(b^b1);
    g[b^b1^1].push_back(a^a1);
    //cout << (a^a1^1) << ' ' << (b^b1) << endl;
    //cout << (b^b1^1) << ' ' << (a^a1) << endl;
    gt[b^b1].push_back(a^a1^1);
}

vector<int> a;
vector<int> b;


void getv(vector<int> &q)
{
    q.clear();
    int l;
    cin >> l;
    q.resize(l);
    for (int i=0; i<l; i++)
    {
        cin >> q[i];
    }
}

vector<int> res;

int main()
{
    //freopen("a","r",stdin);
    int n,m;
    cin >> n >> m;
    g.resize(m*2+2);
    gt.resize(m*2+2);
    getv(a);
    for (int i=1; i<n; i++)
    {
        getv(b);
        int u=min(a.size(),b.size());
        bool fl=1;
        for (int j=0;j<u;j++)
        {
            if (a[j]!=b[j])
            {
                fl=0;
                if (a[j]>b[j])
                {
                    inserting(a[j],0,b[j],0);
                    inserting(a[j],0,b[j],1);
                    inserting(a[j],1,b[j],1);
                }
                else
                {
                    inserting(a[j],0,b[j],1);
                }
                break;
            }
        }
        if (fl&&a.size()>b.size())
        {
            cout << "No";
            exit(0);
        }
        a=b;
    }
    n=2*m+2;
    used.assign (n, false);
    for (int i=0; i<n; ++i)
        if (!used[i])
            dfs1 (i);

    comp.assign (n, -1);
    for (int i=0, j=0; i<n; ++i)
    {
        int v = order[n-i-1];
        if (comp[v] == -1)
            dfs2 (v, j++);
    }

    for (int i=0; i<n; ++i)
    {
        if (comp[i] == comp[i^1])
        {
            puts ("No");
            return 0;
        }
    }
    for (int i=0; i<n; i+=2)
    {
        int ans = comp[i] > comp[i^1] ? i : i^1;
        if ((ans%2==0)&&(ans/2))
        res.push_back(ans/2);
    }
    cout << "Yes" << endl;
    cout << res.size() << endl;
    for (auto x:res)
    {
        cout << x << ' ';
    }
    return 0;
}
