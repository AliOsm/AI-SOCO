#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <unordered_map>
#include <sstream>
#include <iostream>
#include <cmath>
#include<cstring>
#include <cstdio>
#include <stack>
#include<iomanip>
#include<queue>
#include<functional>
#include<iterator>
#include<new>
#include<cstdlib>
#include<math.h>
#include<fstream>
using namespace std;
#define pi 3.141592653589793
#define ii  pair<int,int>
#define ll long long
#define p10(ans) printf("%0.10f\n", ans)
#define pr(ans) printf("%d\n", ans)
#define scc(x)  scanf("%c\n", &c)
#define pll(ans) printf("%lld\n", ans)
#define scll(x) scanf("%lld",&x)
#define scd(a)  scanf("%lf", &a)
#define sci(x)  scanf("%d",&x)
#define pc(ans)  printf("%c", ans)
#define pd(a)    printf("%lf\n", a)
#define scanfchararray(arr) scanf("%s", arr)
#define printfstring(s)    printf("%s ", s.c_str())
#define all(v)             v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)            ((int)((v).size()))
#define mod 1000000007
#define mem(arr,d) memset(arr,d,sizeof(arr))
#define inf 10000000000000000
#define ninf -10000000000000000;
#define eps 1e-7
#define nearestPowerOfTwo(S) ((int)pow(2.0, (int)((log((double)S) / log(2.0)) + 0.5)))
/*ll power(ll base, ll exp) {
base %= mod;
ll result = 1;
while (exp > 0) {
if (exp & 1)
result = (result * base) % mod;
base = (base * base) % mod;
exp >>= 1;
}
return result;
}
*/
/*long long gcd(long long a, long long b)
{
if (b == 0)return a; return gcd(b, a%b);
}
*/
/*long long lcm(long long a, long long b) {
return  a * b / gcd(a, b);
}
*/
vector<int>arr[30];
string s;
int mkan[100010];
int o;
bool ok(int mid) {
	
	int kam = s.size() - mid+1;
	for (int i = 0; i < 26; ++i) {
		int cnt = 0;
		int l = 0, r = mid - 1;
		bool nf3 = true;
		while (r < o) {
			int idx = lower_bound(arr[i].begin(), arr[i].end(), l)-arr[i].begin();
			if (idx != arr[i].size()) {
				if (arr[i][idx] > r) { nf3 = false; break; }
			}
			else { nf3 = false; break; }
			++l; ++r;
		}
		if (nf3)return true;	
	}
	return false;
}
int main() {
	cin >> s;
	 o = s.size();
	 for (int i = 0; i < o; ++i) {
		 arr[s[i] - 'a'].push_back(i);
	 }
	int l = 1, r = 1e5, mid;

	while (l < r) {

		mid = l + (r - l) / 2;
		if (ok(mid))r = mid;
		else l = mid + 1;

	}
	pr(l);
}