#pragma GCC optimize("O3")
#include <bits/stdc++.h>
using namespace std;
typedef  long long ll;
typedef  vector<int> vi;
typedef  pair<int,int> ii;
typedef  pair<int,string> pis;
double   pi=3.1415926535898;
#define speed      ios::sync_with_stdio(false);cin.tie(NULL); cout.tie(NULL);
#define lp(i,n)    for(int i=0;i<int(n);i++)
#define ff(i,a,b)  for(int i=a;i<=int(b);++i)
#define fr(i,a,b)  for(int i=a;i>=int(b);i--)
#define ms(x,a)    memset(x,a,sizeof(x))
#define all(x)     (x).begin(),(x).end()
#define sz(x)      int(x.size())
#define pb         push_back
#define r0         return 0;
#define CC         continue;
#define bb(x)      cerr<< x <<endl;
#define F          first
#define S          second       //  __builtin_popcount;
//freopen("input.txt","r",stdin),freopen("output.txt","w",stdout);
string ys = "YES\n";
string no = "NO\n" ;
const double EPS = 1e-6;
const int inf = 1<<20;
const ll M  = 1e9+7 ;
//const int N = 100100;
//////////////////////    Hi    ^_^  hack me if you can :P

string s;
int a[200200];
int t,n;

int main ( )
{
    speed;
    cin >> n;
    ff(i,1,n) cin >> a[i];
    cin >> s;
    s =" "+s;

    ff(i,1,n-1) {
        int j = i;
        if (s[i] == '1') {
            while(s[j]=='1') j++;
        }
        sort(a+i,a+j+1);
        i = j;
    }

    ff(i,1,n) if (a[i] != i) {
        cout << "NO";
        return 0;
    }
    cout << "YES";
    return 0 ;
}


/*
5 3
0 1 2 3 4
cin >> n;
    a.resize(n);
    for (auto &x:a)
        cin >> x;
    cin >> m;
    b.resize(m);
    for (auto &x:b)
        cin >> x;

bool prime[1000005];
void sieve()
{
    for(int i=4; i<=1000000; i+=2)
        prime[i]=false,prime[i-1]=true;
    prime[2]=true;
    for(int i=3; i<=1000; i+=2)
    {
        if(prime[i])
        {
            for(int j=i*i; j<=1000000; j+=i*2)
                prime[j]=false;
        }
    }
}

for (int i=0; i<n; i++)            Hi    ^_^  hack me if you can :P
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;

*/
/*
freopen("output.txt","w",stdout);
freopen("input.txt","r",stdin);

ll pwmod(ll a, ll n, ll mod)
{
ll ret = 1;
while (n)
{
if (n & 1) ret = ret * a % mod;
a = a * a % mod;
n >>= 1;
}
return ret;
}


int mx[]= {0,0,1,-1, 1,1,-1,-1};
int my[]= {1,-1,0,0, 1,-1,1,-1};
bool inside (int i,int j){return (i>=0 && i<n && j>=0 && j<m);}


void gcd(LL n,LL m,LL &d,LL &xx,LL &yy)
{
if(!m)
{
d=n;
xx=1;
yy=0;
}
else
{
gcd(m,n%m,d,yy,xx);
yy-=xx*(n/m);
}
}

int getm(int l,int r)
{
if(l>r)
return N;
if(l==r)
return 0;
if(l==r-1)
return s[l] != s[r];
if(s[l]==s[r])
return getm(l+1,r-1);
else
return 1+min(getm(l+1,r),getm(l,r-1));
}

int BIT[si], a[si], n;
void update(int x, int delta)
{
for(; x <= N; x += x&-x)
BIT[x] += delta;
}
int query(int x)
{
int sum = 0;
for(; x > 0; x -= x&-x)
sum += BIT[x];
return sum;
}
int n, a[N];
int seg[N<<2];

void build(int nd,int L,int R)
{
if( L == R )
{
seg[nd]=a[L];
return ;
}
int mid = (L+R) >>1;
build(nd<<1,L, mid);
build(nd<<1|1,mid+1,R);
seg[nd]=max( seg[nd<<1], seg[nd<<1|1] );
}

void update(int nd,int L,int R,int idx,int val)
{
if( L == R )
{
seg[nd]=val;
return ;
}
int mid = (L+R) >>1;
if( idx<=mid )
update(nd<<1,  L,mid,idx,val);
else update(nd<<1|1,mid+1, R,idx,val);
seg[nd]=max( seg[nd<<1], seg[nd<<1|1] );
}

int query(int nd,int L,int R,int from,int to)
{
if( from<=L && R<=to )return seg[nd];
if( from>R || to<L )return -inf;

int mid = (L+R) >>1;

int ansl = query(nd<<1,  L,mid,from,to);
int ansr= query(nd<<1|1,mid+1, R,from,to);
return max( anrl,ansr );
}
*/
