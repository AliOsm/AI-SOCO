#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ul;
typedef long double ld;

const int N = 5e3 + 7;

string s;

ll eval[N][N];
ll left_sum[N], leftl[N];
ll right_sum[N], rightl[N];

stack<pair<ll, ll> > t;

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	string s;
	cin >> s;

	int n = s.length();

	for (int i=0; i<n; i+=2)
	{	
		stack<pair<ll, ll> > st;
		st.push(make_pair(0, 0));
		st.push(make_pair(s[i]-'0', s[i]-'0'));
		eval[i][i] = s[i]-'0';
		for (int j=i+2; j<n; j+=2)
		{
			if (s[j-1] == '*')
			{
				ll x = (s[j]-'0')*st.top().first;
				st.pop();
				st.push(make_pair(x, st.top().second + x));
			}
			else
			{
				ll x = (s[j]-'0');
				st.push(make_pair(x, st.top().second + x));
			}
			eval[i][j] = st.top().second;
		}
	}
	
	t.push(make_pair(0, 0));
	left_sum[0] = leftl[0] = s[0]-'0';
	t.push(make_pair(s[0]-'0', s[0]-'0'));
	for (int i=2; i<n; i+=2)
	{
		if (s[i-1] == '*')
		{
			ll x = (s[i]-'0')*t.top().first;
			t.pop();
			t.push(make_pair(x, t.top().second + x));
		}
		else
		{
			ll x = (s[i]-'0');
			t.push(make_pair(x, t.top().second + x));
		}
		left_sum[i] = t.top().second;
		leftl[i] = t.top().first;
	}

	while (!t.empty()) t.pop();

	right_sum[n-1] = rightl[n-1] = s[n-1]-'0';
	t.push(make_pair(0, 0));
	t.push(make_pair(s[n-1]-'0', s[n-1]-'0'));
	for (int i=n-3; i>=0; i-=2)
	{
		if (s[i+1] == '*')
		{
			ll x = (s[i]-'0')*t.top().first;
			t.pop();
			t.push(make_pair(x, t.top().second + x));
		}
		else
		{
			ll x = (s[i]-'0');
			t.push(make_pair(x, t.top().second + x));
		}
		right_sum[i] = t.top().second;
		rightl[i] = t.top().first;
	}

	ll ans = 0;

	for (int i=0; i<n; i+=2)
		for (int j=i; j<n; j+=2)
		{
			ll prev = 0;
			ll it = eval[i][j];
			ll next = 0;

			if (i > 0)
			{
				prev += left_sum[i-2];
				if (s[i-1] == '*')
				{
					prev -= leftl[i-2];
					it *= leftl[i-2];
				}
			}

			if (j < n-1)
			{
				next += right_sum[j+2];
				if (s[j+1] == '*')
				{
					next -= rightl[j+2];
					it *= rightl[j+2];
				}
			}
	
			//cout << i << " " << j << " : " << prev + it + next << "\n";

			ans = max(ans, prev + it + next);
		}

	cout << ans;
	return 0;
}