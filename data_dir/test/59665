#include <bits/stdc++.h>

using namespace std;

const int mod = 998244353;

int add(int a, int b) {
	return a + b >= mod ? a + b - mod : a + b;
}
int mul(int a, int b) {
	return int(1LL * a * b % mod);
}

const int N = 500005;

int n, k, m;
int l[N], r[N], x[N];

int last[N];
int one[N];

int dp[N], ps[N];

int solve(int bit) {

	for(int i = 1; i <= n; i++) {
		last[i] = 0;
		one[i] = 0;
		dp[i] = 0;
		ps[i] = 0;
	}

	for(int i = 0; i < m; i++) {
		if(x[i] >> bit & 1) {
			one[ l[i] ]++;
			one[ r[i] + 1]--;
		}
		else {
			last[ r[i] ] = max(last[ r[i] ], l[i]);
		}
	}

	partial_sum(one, one + n + 1, one);

	dp[0] = ps[0] = 1;
	int j = 0;
	for(int i = 1; i <= n; i++) {
		if(!one[i]) {
			dp[i] = ps[i - 1];
			if(j) dp[i] = add(dp[i], mod - ps[j - 1]);
		}
		ps[i] = add(ps[i - 1], dp[i]);
		j = max(j, last[i]);
	}

	int ans = ps[n];
	if(j) ans = add(ans, mod - ps[j - 1]);

	return ans;
}

int main() {
	scanf("%d %d %d", &n, &k, &m);

	for(int i = 0; i < m; i++) {
		scanf("%d %d %d", l + i, r + i, x + i);
	}

	int ans = 1;
	for(int b = 0; b < k; b++) {
		ans = mul(ans, solve(b));
	}

	printf("%d\n", ans);
}
