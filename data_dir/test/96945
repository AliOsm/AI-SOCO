#define __USE_MINGW_ANSI_STDIO 0
#include <bits/stdc++.h>
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl '\n'
#define ff first
#define ss second
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define int long long
#define all(a) a.begin(), a.end()
#define ull unsigned long long
#define N 2000010
#define inf 10000000000000000
#define debug1(x) cerr << #x << ": " << x <<'\n'
#define debug2(x, y) cerr << #x << ": " << x << '\t' << #y << ": " << y <<'\n'
#define debug3(x, y, z) cerr << #x << ": " << x << '\t' << #y << ": " << y << '\t' << #z << ": " << z <<'\n'
using namespace std;
//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
int gcd(int x,int y)
{
    if(y==0)
        return x;
    else
        return gcd(y,x%y);
}
int expo(int n,int m,int p)   //MODULAR EXPONENTIATION
{
    int r=1;
    n=n%p;
    while(m>0)
    {
        if(m%2)
            r=(r*n)%p;
        n=(n*n)%p;
        m=m/2;
    }
    return r%p;
}
int32_t main()
{
 
   IOS;
   #ifndef ONLINE_JUDGE
   freopen("input.txt","r",stdin); 
   freopen("output.txt","w",stdout);
   #endif
   /********************* Code starts here ************************/
   int n,p,l,r;
   cin>>n>>p>>l>>r;
   int ans=0;

   if(p>=r)
   {
   	
   	while(p!=r)
   		ans++,p--;
   	if(r!=n)
   		ans++;
   	while(l!=p&&l!=1)
   		ans++,p--;
   	if(l!=1)
   		ans++;

   }
   else if(p<=l)
   {
   	while(p!=l)
   		ans++,p++;
   	if(l!=1)
   		ans++;
   	while(p!=r&&r!=n)
   		ans++,p++;
   	if(r!=n)
   		ans++;
   }
   else
   {
   	int a1=0,a2=0,t=p;
   	while(p!=r&&r!=n)
   		a1++,p++;
   	if(r!=n)
   		a1++;
   	while(p!=l&&l!=1)
   		a1++,p--;
   	if(l!=1)
   		a1++;
   	p=t;
   	while(p!=l&&l!=1)
   		a2++,p--;
   	if(l!=1)
   		a2++;
   	while(p!=r&&r!=n)
   		a2++,p++;
   	if(r!=n)
   		a2++;
   	cout<<min(a1,a2)<<endl;
   	return 0;
   }
   cout<<ans<<endl;

}   