#include <bits/stdc++.h>

#define ll long long
#define all(x) x.begin(), x.end()
#define boost() ios_base::sync_with_stdio(0)
#define in insert
#define pb push_back
#define mp make_pair
#define F first
#define S second

using namespace std;

const int N = int(1e5) + 5;
const int INF = int(1e9) + 7;
const ll MINF = 1e18;
int n, m;
int a[N];
struct st {
	int kol, maxi;
	ll sum;
}d[N * 4];
void build (int v, int l, int r) {
	if (l == r) {
		d[v].sum = a[l];
		d[v].maxi = a[l];
		if (a[l] != 0) {
			d[v].kol = 1;
		}
		else {
			d[v].kol = 0;
		}
	}                 
	else {
		int mid = (l + r) / 2;
		build (v * 2, l, mid);
		build (v * 2 + 1, mid + 1, r);
		d[v].sum = d[v * 2].sum + d[v * 2 + 1].sum;
		d[v].maxi = max(d[v * 2].maxi, d[v * 2 + 1].maxi);
		d[v].kol = d[v * 2].kol + d[v * 2 + 1].kol;
	}
}
void update1 (int v, int l, int r, int nl, int nr, int x) {
	if (l > nr || nl > r || x > d[v].maxi || d[v].kol == 0) {
		 return;
	}
	else if (l == r) {
			a[l] %= x;
			d[v].sum = a[l];
			d[v].maxi = a[l];
			if (a[l] != 0) {
				d[v].kol = 1;
			}
			else {
				d[v].kol = 0;
			}                        
	}
	else {
		int mid = (l + r) / 2;
		update1 (v * 2, l, mid, nl, nr, x);
		update1 (v * 2 + 1, mid + 1, r, nl, nr, x);
		d[v].sum = d[v * 2].sum + d[v * 2 + 1].sum;
		d[v].maxi = max(d[v * 2].maxi, d[v * 2 + 1].maxi);
		d[v].kol = d[v * 2].kol + d[v * 2 + 1].kol;		
	}
}
void  update2 (int v, int l, int r, int pos, int x) {
	if (l == r) {
			a[l] = x;
			d[v].sum = a[l];
			d[v].maxi = a[l];
			if (a[l] != 0) {
				d[v].kol = 1;
			}
			else {
				d[v].kol = 0;
			}                        
	}
	else {
		int mid = (l + r) / 2;
		if (pos <= mid) {
			update2 (v * 2, l, mid, pos, x);
		}
		else {
			update2 (v * 2 + 1, mid + 1, r, pos, x);
		}
		d[v].sum = d[v * 2].sum + d[v * 2 + 1].sum;
		d[v].maxi = max(d[v * 2].maxi, d[v * 2 + 1].maxi);
		d[v].kol = d[v * 2].kol + d[v * 2 + 1].kol;		
	}

}
ll get (int v, int l, int r, int nl, int nr) {
	if (l > nr || nl > r) {
		return 0ll;
	}
	if (nl <= l && r <= nr) {
		return d[v].sum; 
	}
	else {                    
		int mid = (l + r) / 2;
		return get (v * 2, l, mid, nl, nr) + get (v * 2 + 1, mid + 1, r, nl, nr);	
	}
}
void solve () {
 	cin >> n >> m;
 	for (int i = 1; i <= n; i ++) {
 		cin >> a[i];
 	}  	
 	build (1, 1, n);
 	for (int i = 1; i <= m; i ++) {
 		int tt;
 		cin >> tt;
 		if (tt == 1) {
 		   	int l, r;
 		   	cin >> l >> r;
 		   	cout << get (1, 1, n, l, r) << endl;
 		}
 		if (tt == 2) {
 		    int l, r, x;
 		    cin >> l >> r >> x;
 		    update1 (1, 1, n, l, r, x);
 		}
 		if (tt == 3) {
 		    int k, x;
 		    cin >> k >> x;
 		    update2 (1, 1, n, k, x);
 		}
 	}
}

int main () {
    boost ();
    int TT = 1;
//	cin >> TT;    
    while (TT) {
    	solve ();
    	TT --;
    }
	return 0;
}