//Khodaya aghideye man ra az dast oghde am masoon dar!
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, greater<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, greater_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
const ll MOD = (ll)1e9 + 7;
const ll MAXN = (ll)1e5 + 7;
const ll infint = (ll)1e9;
const ll inf = (ll)1e18;
int n, k;
ll a[MAXN], seg[4 * MAXN][12];
ll sum(int type, int node, int st, int en, int l, int r)
{
	if(st >= r || l >= en)
		return 0;
	if(l <= st && en <= r)
	{
		return seg[node][type];
	}
	int mid = (en + st) >> 1;
	return sum(type, node << 1, st, mid, l, r) + sum(type, node << 1 | 1, mid, en, l, r);
}
void change(int type, int node, int st, int en, int idx, ll val)
{
	if(en - st < 2)
	{
		seg[node][type] += val;
		return;
	}
	int mid = (st + en) >> 1;
	if(st <= idx && idx < mid)
		change(type, node << 1, st, mid, idx, val);
	else
		change(type, node << 1 | 1, mid, en, idx, val);
	seg[node][type] = seg[node << 1][type] + seg[node << 1 | 1][type];
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	cin >> n >> k;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	for (int i = 0; i < n; i++)
	{
		for (int j = 1; j <= k + 1; j++)
		{
			if(j == 1)
				change(j, 1, 0, MAXN, a[i], 1);
			else
			{
				ll p = sum(j - 1, 1, 0, MAXN, 1, a[i]);
				change(j, 1, 0, MAXN, a[i], p);
			}
		}
	}
	ll sm = sum(k + 1, 1, 0, MAXN, 0, MAXN);
	cout << sm;
}
