#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define eb emplace_back
#define ll long long
#define pii pair < int, int >
#define fr first
#define sc second
#define mk make_pair
#define sz(s) (int)s.size()
#define all(s) s.begin(), s.end()
#define ok puts("ok");
#define whatis(x) cerr << #x << " = " << x << endl;
#define pause system("pause");
#define random rand() ^ (rand() << 5)

const int N = (int)1e6 + 7;
const int inf = (int)1e9 + 7;

int n;
string s;

struct fenwick {
  int tree[N];
  fenwick() { memset(tree, 0, sizeof tree); }
  void upd(int pos, int val) {
    for (; pos < N; pos = (pos | (pos + 1))) {
      tree[pos] = max(tree[pos], val);
    }
  }
  int get(int r) {
    int res = 0;
    for (; r >= 0; r = (r & (r + 1)) - 1) {
      res = max(res, tree[r]);
    }
    return res;
  }
}tr;

vector < int > Z() {
  vector < int > z;
  z.resize(n);
  for (int i = 1, l = 0, r = 0; i < n; i++) {
    if (i <= r)
      z[i] = min(z[i - l], r - i + 1);
    while (i + z[i] < n && s[z[i]] == s[i + z[i]])
      z[i]++;
    if (i + z[i] - 1 > r) {
      r = i + z[i] - 1;
      l = i;
    }
  }
  return z;
}

main() {
  cin >> s;
  n = sz(s);
  vector < int > z = Z();
  for (int i = 0; i < n; i++) {
    tr.upd(i, z[i]);
  }
  int in = -1;
  for (int i = n - 1; i >= 0; i--) {
    if (i + z[i] == n) {
      int get = tr.get(i - 1);
      if (get >= z[i]) {
        in = i;
      }
    }
  }
  if (in == -1) {
    puts("Just a legend");
    return 0;
  }
  for (int i = in; i < n; i++) {
    printf("%c", s[i]);
  }
}
