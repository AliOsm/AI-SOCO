
 #include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<ll, ll> pii;

const long double eps = 1e-9;

#define MOD 1000000007
#define MAX 100005

typedef complex<double> point;
const double EPS = 1e-9;

int n, x;
int a[MAX][6];

int solve(int i, ll prod) {
    if(i == n)
        return prod == x;

    int res = 0;
    for(int j = 0; j < 6; j++)
        res += solve(i + 1, (prod * a[i][j]) % MOD);

    return res;
}

int main() {
#ifdef Adel_SaadEddin_PC
    freopen("input.txt", "r", stdin);
//    freopen("output.out", "w", stdout);
#endif //
    ios_base::sync_with_stdio(false);

    int n; cin >> n;
    string s; cin >> s;

    set<char> se, ex;
    vector<int> ve;

    for(int i = 0; i < s.size(); i++) {
        if(s[i] == '*')
            ve.push_back(i);
        else {
            se.insert(s[i]);
            ex.insert(i);
        }
    }

    int q; cin >> q;

    vector<string> vec;
    for(int i = 0; i < q; i++) {
        string s1; cin >> s1;
        string ns;

        bool ababa = false;
        for(auto x : ve) {
            ns += s1[x];

            if(se.count(s1[x]))
                ababa = true;
        }

        for(auto x : ex) {
            if(s[x] != s1[x])
                ababa = true;
        }

        if(!ababa)
            vec.push_back(ns);
    }

    if(vec.empty())
        return cout << "0\n", 0;

    set<char> se1;
    for(auto x : vec[0]) {
        if(!se.count(x))
            se1.insert(x);
    }

    set<char> temp;
    for(int i = 1; i < vec.size(); i++) {
        for(auto x : vec[i]) {
            if(se.count(x)) {
                temp = se1;
                break;
            }

            if(se1.count(x))
                temp.insert(x);
        }

        se1 = temp;
        temp.clear();
    }

    cout << se1.size() << "\n";

    return 0;
}
