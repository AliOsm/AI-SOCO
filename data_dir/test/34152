#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <climits>
#include <cctype>
#include <cmath>
#include <sstream>
#include <cstdlib>
#include <climits>
#include <ctime>
#include <set>
#include <map>
#include <numeric>
#include <utility>
#include <deque>
#include <queue>
#include <stack>
#include <iomanip>
#include <complex>
#include <list>
#include <bitset>
#include <fstream>
#include <limits>
#include <memory.h>
#include <tgmath.h>
#include <complex>
using namespace std;

typedef complex<int> point;
#define dp(a, b) ((conj(a) * b).real())
#define cp(a, b) ((conj(a) * b).imag())
#define angle(a) (atan2(a.imag(), a.real()))
#define rotate0(a, angle) (a * exp(point(0, angle)))
#define length(a) (hypot(a.imag(), a.real()))
#define rotateAr(a, angle, around) (rotate0(((a) - (around)),(angle)) + around)
#define reflect(a, m) (conj((a)/(m)) * (m))
#define normalize(a) ((a) / length(a));
typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define per(i, start, end) for(int i = (int)start-1; i >= end; --i)
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const long double PI = 3.14159265358979323846;
const long double eps = (1e-7);
int dcmp(long double x, long double y)
{
    // -1 means left is bigger
    return fabs(x - y) <= eps ? 0 : x > y ? -1 : 1;
}
int freq[10004];
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
#ifndef ONLINE_JUDGE
    freopen("inputB.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
    int t;
    cin >> t;
    while(t--)
    {
    	clr(freq, 0);
    	int n;
    	cin >> n;
    	vector<int> can;
    	rep(i,0,n)
    	{
    		int x;
    		cin >> x;
    		freq[x]++;
    		if (freq[x] == 2 || freq[x] == 4)
    			can.pb(x);
    	}
    	sort(all(can));
    	double val = (1<<30);
    	int a, b;
    	rep(i,0,sz(can) - 1)
    	{
    		int x = can[i], y = can[i+1];
    		double temp = (2 * x + 2 * y);
    		temp = temp * temp;
    		temp /= 1.0 *x*y;
    		if (temp < val)
    		{
    			a = x, b = y;
    			val = temp;
    		}
    	}
    	cout << a << ' ' << a << ' ' << b << ' ' << b << '\n';
    }
    return 0;
}
