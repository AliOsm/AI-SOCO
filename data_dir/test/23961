#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#pragma GCC target("avx,tune=native")
// Anand Jaisingh

#include<bits/stdc++.h>

using namespace std;

typedef complex<double> base;
typedef long double ld;
typedef long long ll;

#define pb push_back

const int maxn=(int)(1e5+1);
const int LN=18;
const ll mod=(ll)(1e9+7);
vector<int> divs[maxn];
bool v[maxn];

struct node{
    node *left, *right;
    int val;
    node(){left = NULL; right = NULL; val = (int)(1e7);}
};

struct trie {
    node *x;
}root[maxn];

void build()
{
    for(int i=1;i<maxn;i++)
    {
        for(int j=i;j<maxn;j+=i)
        {
            divs[j].pb(i);
        }
    }
}

void insert(node *t,int x)
{
    for(int i=LN-1; i>=0; i--){
        if(x&(1<<i)){
            if(t->right == NULL)t->right = new node();
            t->val=min(t->val,x);
            t = t->right;
        }
        else{
            if(t->left == NULL)t->left = new node();
            t->val=min(t->val,x);
            t = t->left;
        }
    }

    t->val=min(t->val,x);
}

int query(node *t,int x,int s)
{
    int ret=0;

    for(int i=LN-1; i>=0; i--){
        if(x&(1<<i))
        {
            if(t->left && t->left->val+x<=s)
            {
                t = t->left;
            }
            else if(t->right && t->right->val+x<=s)
            {
                t = t->right;

                ret+=(1<<i);
            } else
                {
                return -1;
            }
        }
        else {
            if(t->right && t->right->val+x<=s)
            {
                ret += (1<<i);

                t = t->right;
            }
            else if(t->left && t->left->val+x<=s)
            {
                t = t->left;
            }
        }
    }

    return ret;
}

int main()
{
   // ios_base::sync_with_stdio(0);

    build();

    int q;scanf("%d",&q);

    for(int i=1;i<maxn;i++)
    {
        root[i].x=new node();
    }

    while(q>0)
    {
        int t;scanf("%d",&t);

        if(t==1)
        {
            int u;scanf("%d",&u);

            if(!v[u])
            {
                v[u]=true;

                for(int x:divs[u])
                {
                    insert(root[x].x,u);
                }
            }
        }
        else
        {
            int x,k,s;

            scanf("%d%d%d",&x,&k,&s);

            if(x%k!=0)
            {
                printf("%d\n",-1);
            }
            else
            {
                printf("%d\n",query(root[k].x,x,s));
            }
        }

        q--;
    }
}
