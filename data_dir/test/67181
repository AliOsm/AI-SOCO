#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>
#include <memory.h>
#include <list>

#define ll long long
#define ld long double
#define ull unsigned ll
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pii pair<int,int> 
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vector<int>>
#define endl '\n'
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
const int  Inf = 1e9;
ll LINF = (ll)4e18;
using namespace std;
ll mod = 1e9 + 7;
ll mod2 = 1e9 + 123;
#define M_PI       3.14159265358979323846   // pi

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("divisors.in", "r", stdin);
	//freopen("divisors.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n,m,q;
	cin>>n>>m>>q;
	vi w(n);
	forn(i,0,n) cin>>w[i];
	int cnt = 1<<n;
	vector<pii> cost;
	forn(i, 0, cnt){
		bitset<12> b = i;
		int sum = 0;
		forn(j,0,n){
			if (!b[j]) sum+=w[n-j-1];
		}
		cost.push_back(make_pair(sum, i));
	}
	vi cou(cnt);
	forn(i,0,m){
		bitset<12> b;
		cin>>b;
		cou[b.to_ullong()]++;
	}

	sort(all(cost));
	forn(i,0,q){
		bitset<12> b;
		int k;
		cin >> b >> k;
		int tmp = b.to_ullong();
		int ans = 0;
		forn(j,0,cost.size()){
			if (cost[j].first>k) break;
			ans+=cou[tmp^cost[j].second];
		}
		cout<<ans<<endl;
	}
	return 0;
}