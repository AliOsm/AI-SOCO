//#define _CRT_SECURE_NO_WARNINGS
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <fstream>
#include <map>
#include <set>
#include <queue>
#include <memory.h>
#include <time.h>
#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <algorithm>
#include <cstdio>
#include <set>
#include <queue>
#include <cassert>
#include <climits>
#include <deque>
#include <limits>
#define sz(x) int((x).size())
#define FOR(i,a,b) for(ll(i) = (a); (i) <= (b); ++(i))
#define ROF(i,a,b) for(ll(i) = (a); (i) >= (b); --(i))
#define rep(i,n) for (int(i) = 0; (i) < (n); ++(i))
#define fe(i,a) for (ll(i) = 0; (i) < int((a).size()); ++(i))
#define C(a) memset((a),0,sizeof(a))
#define pb push_back
#define ppb pop_back
#define all(c) (c).begin(), (c).end()
#define sqr(a) (a)*(a)
#define mp(a,b) make_pair((a), (b))
#define X first
#define Y second
#define file freopen("input.txt","r",stdin)
#define file2 freopen("output.txt", "w",stdout)
#define text freopen("input.txt","r",stdin); freopen("output.txt", "w",stdout)
using namespace std;
typedef vector<int> vint;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pii;
#define y1 vamdlsfmvldf
const int mod = (int)1e9 + 7;
const int inf = (int)(1e9);
const double eps = 1e-9;
const int N = 1000005;
int n, m, k, ans, a[N];
vector < pair<int, int> > vertex;
int main(){
    cin >> n >> m >> k;
    for(int i = 0; i < m; ++i){
        int x, y;
        scanf("%d %d", &x, &y);
        if (y - x != 1 && y - x != k + 1) {
            cout << 0 << endl;
            return 0;
        }
        if (y - x == k + 1) vertex.push_back(make_pair(x, y));
     }
    sort(vertex.begin(), vertex.end()); 
    m = (int)vertex.size();
    if (k >= n - 1) {
         cout << 1 << endl;
         return 0;
    }
    for(int i = 0; i < m; ++i){
        if (!(vertex[i].first >= vertex[0].first && vertex[i].first < vertex[0].second)) {
              cout << 0 << endl;
              return 0;
        }
    }
    a[0] = 1;
    for(int i = 1; i < N; ++i)
        a[i] = (2 * a[i - 1]) % mod;
    if (vertex.size() == 0) ++ans;
        for(int i = 0; i < n; ++i){
                int f = i + 1, s = i + k + 2, cnt = m;
                if (s > n || (m > 0 && f > vertex[0].first)) break;
                if (m > 0 && !(f <= vertex[0].first && vertex[m-1].first < s)) continue;
                if (m > 0 && f == vertex[0].first) cnt--;
                s = min(s, n - k);
                ans = (ans + a[s - f - cnt - 1]) % mod;
        }
    cout << ans << endl;
}