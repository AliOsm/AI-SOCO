#include <bits/stdc++.h>

#define ll long long
#define all(x) x.begin(), x.end()
#define boost() ios_base::sync_with_stdio(0)
#define in insert
#define pb push_back
#define mp make_pair
#define F first
#define S second

using namespace std;

const int N = int(1e5) + 5;
const int INF = int(1e9) + 7;
const ll MINF = 1e18;
int n, m;
int a[N * 3];
int change[N * 10];
struct st {
  	ll sum;
  	int kol;
};
st d[N * 12];
void build (int v, int l, int r) {
	if (l == r) {
		d[v].sum = a[l];
		if (a[l] > 2) {
			d[v].kol = 1;
		}
	}
	else {
		int mid = (l + r) / 2;
		build (v * 2, l, mid);
		build (v * 2 + 1, mid + 1, r);
		d[v].sum = d[v * 2].sum + d[v * 2 + 1].sum;
		d[v].kol = d[v * 2].kol + d[v * 2 + 1].kol;
	}
}
void update (int v, int l, int r, int tl, int tr) {
	if (tl > r || l > tr || d[v].kol == 0) {
		return;
	}
	if (l == r) {
		d[v].sum = change[a[l]];
		a[l] =  change[a[l]];
		if (a[l] > 2) {
			d[v].kol = 1;
		}
		else {
		 	d[v].kol = 0;
		}
	}
	else {
		int mid = (l + r) / 2;
		update (v * 2, l, mid, tl, tr);
		update (v * 2 + 1, mid + 1, r, tl, tr);
		d[v].sum = d[v * 2 + 1].sum + d[v * 2].sum;
		d[v].kol = d[v * 2 + 1].kol + d[v * 2].kol;
	}
}
st get (int v, int l, int r, int nl, int nr) {
   	if (l > nr || nl > r) {
   		st yy;
   		yy.sum = 0;
   		yy.kol = 0;
   		return yy;
   	}
   	if (nl <= l && r <= nr) {
   		return d[v];
   	}
   	else {
   	    int mid = (l + r) / 2;
   	    st f = get (v * 2 , l, mid, nl, nr);
   	    st s = get (v * 2 + 1, mid + 1, r, nl, nr);
   	    st ans;
   	    ans.sum = f.sum + s.sum;
   	    ans.kol = f.kol + s.kol;
   	    return ans;
   	}
}
void solve () {
	cin >> n >> m;
	for (int i = 1; i <= int(1e6); i ++) {
		 	for (int j = i; j <= int(1e6); j += i) {
		 		change[j] ++;
		 	}
	}
	for (int i = 1; i <= n; i ++) {
		cin >> a[i];
	}	
	build (1, 1, n);
	for (int i = 1; i <= m; i ++) {
		int t, l, r;
		cin >> t >> l >> r;
		if (t == 1) {
				update (1, 1, n, l, r);
		}
		else {
			cout << get (1, 1, n, l, r).sum << endl;
		}
	}
}

int main () {
    boost ();
    int TT = 1;
//	cin >> TT;    
    while (TT) {
    	solve ();
    	TT --;
    }
	return 0;
}