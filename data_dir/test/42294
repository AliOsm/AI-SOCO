#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cassert>
#include <queue>
#include <bitset>
#include <ctime>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define pb push_back
#define fst first
#define snd second
#define SZ(x) ((int)x.size())
typedef long long ll;
#define dforn(i, n) for(int i = n - 1; i >= 0; i--)
const int MAXN=-1;

string s;
int n;

vector<int> g(const string &s){
  vector<int> ans={0,1};
  int last=s[0];
  forr(i,1,SZ(s)){
    if(last!=s[i]){
      ans.pb(ans.back()+1);
      last=s[i];
    } else {
      break;
    }
  }
  while(SZ(ans)<SZ(s)+1)ans.pb(ans.back());
  return ans;
}

int main() {
  //~ freopen("input.in","r",stdin);
  while(cin>>s){n=SZ(s);
    vector<int> pre,suf;
    pre=g(s);
    reverse(s.begin(),s.end());
    suf=g(s);
    reverse(suf.begin(),suf.end());
    reverse(s.begin(),s.end());
    int ans=1,last=s[0],curr=1;
    forr(i,1,n){
      // get normal ans
      if(last==s[i]){
        curr=1;
      } else {
        curr++;
      }
      last=s[i];
      ans=max(ans,curr);
    }
    if(s[0]!=s.back()){
      //~ printf("For %s\n",s.c_str());
      //~ forn(i,SZ(pre)){
        //~ printf("%d ",pre[i]);
      //~ }
      //~ puts("");
      //~ forn(i,SZ(suf)){
        //~ printf("%d ",suf[i]);
      //~ }
      //~ puts("");
      forn(i,n-1){
        // tratar cortar entre i e i+1
        ans=max(ans,pre[i+1]+suf[i+1]);
      }
    }
    //~ printf("for %s\n",s.c_str());
    printf("%d\n",ans);
  }
  return 0;
}
