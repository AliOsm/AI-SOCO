/*
   Salim Shebli
   Russian,Syrian
   Faculty Of Information Technology
   University of Damascus
   Game Developer
 */
#include <bits/stdc++.h>
#define ll long long
#define mp make_pair
#define pb push_back
using namespace std;

ll n,k;
string s;

ll tree[1000100];


/**
 * Build and init tree
 */
void build_tree(int node, int a, int b) {
  	if(a > b) return; // Out of range

  	if(a == b) { // Leaf node
    		tree[node] = 1e16; // Init value
		return;
	}

	build_tree(node*2, a, (a+b)/2); // Init left child
	build_tree(node*2+1, 1+(a+b)/2, b); // Init right child

	tree[node] = min(tree[node*2], tree[node*2+1]); // Init root value
}

/**
 * Increment elements within range [i, j] with value value
 */
void update_tree(int node, int a, int b, int i, int j, ll value) {


	if(a > b || a > j || b < i) // Current segment is not within range [i, j]
		return;

  	if(a >= i && b <= j) { // Segment is fully within range
    		tree[node] = value;


    		return;
	}

	update_tree(node*2, a, (a+b)/2, i, j, value); // Updating left child
	update_tree(1+node*2, 1+(a+b)/2, b, i, j, value); // Updating right child

	tree[node] = min(tree[node*2], tree[node*2+1]); // Updating root with max value
}

/**
 * Query tree to get max element value within range [i, j]
 */
ll query_tree(int node, int a, int b, int i, int j) {

	if(a > b || a > j || b < i) return 1e16; // Out of range


	if(a >= i && b <= j) // Current segment is totally within range [i, j]
		return tree[node];

	ll q1 = query_tree(node*2, a, (a+b)/2, i, j); // Query left child
	ll q2 = query_tree(1+node*2, 1+(a+b)/2, b, i, j); // Query right child

	ll res = min(q1, q2); // Return final result

	return res;
}
ll dp[1000100];
int main() {

    ios::sync_with_stdio(false);

    cin>>n>>k;
    cin>>s;
    build_tree(1,0,n-1);
    for(int i=n-1;i>=0;i--)
    {


        if(s[i]=='1')
        {
            ll ss=query_tree(1,0,n-1,i,min(i+(2*k)+1,n-1))+(i+1);
            ss=min(ss,i+1+dp[i+k+1]);
            update_tree(1,0,n-1,i,i,ss);
        }
        ll bb=query_tree(1,0,n-1,i,min(i+k,n-1));
        dp[i]=min(dp[i+1]+i+1,bb);
       // cout<<i<<" "<<dp[i]<<endl;
    }
    cout<<dp[0]<<endl;
    return 0;

}
