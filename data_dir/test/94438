#pragma GCC omptimize("unroll-loops")
#pragma optimize("SEX_ON_THE_BEACH")
#pragma GCC optimize("no-stack-protector")
#pragma comment(linker, "/STACK:1000000000")
#include<bits/stdc++.h>

using namespace std;

//#define need_tree

#ifdef need_tree
    #include<ext/pb_ds/assoc_container.hpp>
    using namespace __gnu_pbds;
    template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#endif // need_tree

using ll = int64_t;
using ull = uint64_t;
using dd = long double;
using ldd = long double;
using si = int16_t;
using pii = pair<int32_t, int32_t>;
using pll = pair<int64_t, int64_t>;

ll get_seed(string s)
{
    ll ans = 0;
    for (int i = 0; i < s.size(); ++i)
        ans += s[i];
    return ans;
}

int popcount(int x)
{
    return __builtin_popcount(x);
}

ll popcountll(ll x)
{
    return __builtin_popcount(x);
}

#define all(x) (x).begin(), (x).end()
#define ff first
#define ss second

// debug defines
#ifdef HOME
    int jjj;
    #define PO cout << "Pomelo" << endl;
    #define OL cout << "Oliva" << endl;

    #define debug(x) cout << #x << " " << x << endl;
    #define debug_p(x) cout << #x << " " << x.ff << " " << x.ss << endl;
    #define debug_v(x) cout << #x << " "; for (auto iii : x) cout << iii << " "; cout << endl;
    #define debug_vp(x) cout << #x << " "; for (auto ii : x) cout << '[' << ii.ff << " " << ii.ss << ']'; cout << endl;

    #define wait() cin >> jjj;
#else
    #define PO 0;
    #define OL 0;

    #define debug(x) 0;
    #define debug_p(x) 0;
    #define debug_vp(x) 0;
    #define debug_v(x) 0;
    #define debug_vp(x) 0;

    #define wait() 0;
#endif // HOME
// end of debug definess

int _size = 1 << 18;

vector<int> tree(_size << 1);

void upd(int v, int l, int r, int fl, int fr) {
    if (r <= l || r <= fl || fr <= l)
        return;
    if (fl <= l && r <= fr ) {
        ++tree[v];
        return;
    }
    upd(v << 1, l, (r + l) >> 1, fl, fr);
    upd(v << 1 | 1, (r + l) >> 1, r, fl, fr);
}

int get(int v){
int ans = 0;
v += _size;
    while (v) {
        ans += tree[v];
        v >>= 1;
    }
    return ans;
}

void solve(int test_number)
{
    int n, m;
    cin >> n >> m;
    vector<vector<int>> pos(n);
    vector<int> delts(m);

    ll ans = 0;
    vector<int> arr(m);
    cin >> arr[0];
    --arr[0];
    pos[arr[0]].push_back(0);
    for (int i = 0; i < m - 1; ++i) {
        cin >> arr[i + 1];
        --arr[i + 1];
        delts[i] = abs(arr[i] - arr[i + 1]);
        ans += delts[i];
        pos[arr[i + 1]].push_back(i + 1);
    }
    for (int i = 0; i < m - 1; ++i) {
        debug(abs(arr[i] - arr[i + 1]));
        if (abs(arr[i] - arr[i + 1]) > 1)
            upd(1, 0, _size, min(arr[i], arr[i + 1]) + 1, max(arr[i], arr[i + 1]));
    }
    for (int i = 0; i < n; ++i) {
        debug_v(pos[i]);
        for (int j : pos[i]) {
            if (j != 0) {
                if (arr[j - 1] != arr[j]) {
                    ans -= delts[j - 1];
                    delts[j - 1] = (arr[j - 1] + (arr[j - 1] < i ? 1 : 0));
                    ans += delts[j - 1];
                }
            }
            if (j != m - 1) {
                ans -= delts[j];
                delts[j] = (arr[j + 1] + (arr[j + 1] < i ? 1 : 0));
                if (arr[j + 1] == i)
                    delts[j] = 0;
                ans += delts[j];
            }
        }
        debug_v(delts);
        debug(get(i));
        cout << ans - get(i) << '\n';
        for (int j : pos[i]) {
            if (j != 0) {
                if (arr[j - 1] != arr[j]) {
                    ans -= delts[j - 1];
                    delts[j - 1] = abs(arr[j] - arr[j - 1]);
                    ans += delts[j - 1];
                }
            }
            if (j != m - 1) {
                ans -= delts[j];
                delts[j] = abs(arr[j] - arr[j + 1]);
                ans += delts[j];
            }
        }
        debug_v(delts);
    }
}

signed main()
{
    ios_base::sync_with_stdio(0);
    cout.tie(0);
    cin.tie(0);
    int t;
    t = 1;
    //cin >> t;
    for (int i = 0; i < t; ++i)
        solve(i);

    return 0;
}

//debug_test
/*

*/
