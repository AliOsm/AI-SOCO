#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <sstream>
#include <iostream>
#include <cmath>
#include<cstring>
#include <cstdio>
#include <stack>
#include<iomanip>
#include<queue>
#include<functional>
#include<iterator>
#include<new>
#include<cstdlib>
using namespace std;
#define pi 3.141592653589793
#define ii pair<int,int>
#define llll pair<ll,ll>
#define ll long long
#define p10(ans) printf("%0.10f\n", ans)
#define pr(ans) printf("%d\n", ans)
#define scc(x)  scanf("%c", &c)
#define pll(ans) printf("%lld\n", ans)
#define scll(x) scanf("%lld",&x)
#define scd(a)  scanf("%lf", &a)
#define sci(x)  scanf("%d",&x)
#define pc(ans)  printf("%c", ans)
#define pd(a)    printf("%lf\n", a)
#define scanfchararray(arr) scanf("%s", arr)
#define printfstring(s)    printf("%s ", s.c_str())
#define all(v)             v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)            ((int)((v).size()))
#define mk(x,y)                      make_pair(x,y)
#define mod 1000000007
#define mem(arr,d) memset(arr,d,sizeof(arr))
#define ninf -10000000000000000;
#define eps 1e-6
int arr[200010];
int feha[200010];
set<int>seet;
set<int>::iterator it;
int main()
{
	int n,x,we,idx,m;
	sci(n);
	for (int i = 1; i <= n; ++i) { seet.insert(i); sci(arr[i]); }
	sci(m);
	while (m--)
	{
		sci(x);
		if (x == 1)
		{
			sci(idx); sci(we);
			if (seet.size() > 0)
			{
				while (1)
				{
					it = seet.lower_bound(idx);
					if (it != seet.end())
					{
						if ((arr[*it] - feha[*it])>=we) {  
							if ((arr[*it] - feha[*it]) == we)seet.erase(it);
							else feha[*it] += we;
							break;
						}
						else
						{
							we -= arr[*it] - feha[*it];
							seet.erase(it);
							
						}
					}
					else break;
				}
			}
		}
		else
		{
			sci(idx);
			it = seet.find(idx);
			if (it != seet.end())printf("%d\n", feha[idx]);
			else printf("%d\n", arr[idx]);
			
		}
	}
}
