/* 
chirag11032000
Chirag Thakur
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

template < typename T > using ordered_set = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;
template < typename T > using min_priority_queue = priority_queue < T, vector < T >, greater < T > >;

typedef long long ll;
typedef double db;
typedef pair < ll, ll > pll;

#ifndef ONLINE_JUDGE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template < typename Arg1 >
void __f(const char* name, Arg1&& arg1) {
	cerr << name << " : " << arg1 << std :: endl;
}
template < typename Arg1, typename... Args >
void __f(const char* names, Arg1&& arg1, Args&&... args) {
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << " | ";
	__f(comma + 1, args...);
}
#else
#define trace(...)
#endif

#define pb push_back
#define mp make_pair
#define mt make_tuple
#define fast_io() ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0)

const db PI = acos(-1);
const ll MOD = 1e9 + 7, INF = LLONG_MAX;
const ll N = 1e6 + 10;

void test_case();
void print(ll c);

int main() {
	fast_io();
	test_case();
	cerr << "Time taken: " << int((clock() * 1000.) / CLOCKS_PER_SEC) << "ms\n";
	return 0;
}

void test_case() {
	ll n;
	cin >> n;
	string s;
	getline(cin, s);
	while (n--) {
		getline(cin, s);
		ll dig = -1, c = -1;
		for (ll j = 0; j < s.size(); ++j) {
			if (isdigit(s[j]) and dig == -1) {
				dig = j;
			} else if (s[j] == 'C' and c == -1) {
				c = j;
			}
		}
		if (dig < c) {
			// R 12 C 12
			ll row = stoll(s.substr(1, c - 1)), col = stoll(s.substr(c + 1));
			print(col - 1);
			cout << row << "\n";
		} else {
			// BC 12
			string col_str = s.substr(0, dig);
			ll row = stoll(s.substr(dig));
			ll col = 0;
			for (ll j = 0; j < col_str.size(); ++j) {
				col = 26 * col + (col_str[j] - 'A' + 1);
			}
			cout << "R" << row << "C" << col << "\n";
		}
	}
}

void print(ll c) {
	if (c < 0) {
		return;
	} else {
		print(c / 26 - 1);
		cout << char('A' + (c % 26));
	}
}