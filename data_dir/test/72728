#include <cstdio>
#include <iostream>
#include <algorithm>
#include <map>
#include <cstring>
#include <set>
#include <vector>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for(int i=(a);i<=(b);i++)
#define FORD(i,a,b) for(int i=(a);i>=(b);i--)

int nextint()
{
	int t;
	scanf("%d",&t);
	return t;
}
typedef long long ll;

struct stree
{
	int n;
	int ds;
	int *a;
	stree(int n):n(n)
	{
		ds=n-1;
		ds|=ds>>1;
		ds|=ds>>2;
		ds|=ds>>4;
		ds|=ds>>8;
		ds|=ds>>16;
		ds++;
		a=new int[2*ds];
		REP(i,2*ds) a[i]=0;
	}
	void inc(int i,int v)
	{
		i+=ds;
		while(i)
		{
			a[i]+=v;
			i>>=1;
		}
	}
	int sum(int l, int r)
	{
		int res=0;
		l+=ds;
		r+=ds;
		while(l<=r)
		{
			if(l&1) res+=a[l++];
			if(~r&1) res+=a[r--];
			l>>=1;
			r>>=1;
		}
		return res;
	}
};

int arr[100000];
int brr[100000];

int main()
{
	int n=nextint();
	ll k;
	cin>>k;
	stree t1(n),t2(n);
	REP(i,n)
		brr[i]=arr[i]=nextint();
	sort(brr,brr+n);
	map<int,int> m;
	m[brr[0]]=0;
	REP(i,n-1)
		if(brr[i]!=brr[i+1])
			m[brr[i+1]]=i+1;
	REP(i,n)
		arr[i]=m[arr[i]];
	ll invcnt=0;
	REP(i,n)
	{
		invcnt+=t2.sum(arr[i]+1,t2.ds-1);
		t2.inc(arr[i],1);
	}
	int l,lt;
	lt=l=0;
	t1.inc(arr[0],1);
	t2.inc(arr[0],-1);
	ll res=0;
	FOR(r,1,n-1)
	{
		while(l+1<r&&invcnt<=k)
		{
			int movecost=t1.sum(arr[l+1]+1,t1.ds-1)+t2.sum(0,arr[l+1]-1);
			if(invcnt+movecost<=k)
			{
				invcnt+=movecost;
				t1.inc(arr[l+1],1);
				l++;
			}
			else break;
		}
		if(invcnt<=k)
			res+=l-lt+1;
		invcnt-=t2.sum(0,arr[r]-1)+t1.sum(arr[r]+1,t1.ds-1);
		t2.inc(arr[r],-1);
	}
	cout<<res<<endl;
	return 0;
}
