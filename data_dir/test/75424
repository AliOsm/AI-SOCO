#pragma comment(linker, "/STACK:256000000")

#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <random>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <complex>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<int, int64> pil;
const int INF = (int)(1e9 + 1e5);
const int64 LINF = (int64)(1e18);
const int64 MX = 100500;
const double EPS = 1e-9;
#define sq(x) ((x)*(x))
#define FAIL() (*(int*)(0))++
#define ASSERT(exp) {if (!(exp)) exit(0);}
#define y1 fjgjf
#ifdef _MY_DEBUG
#define I64d lld
#endif
typedef complex<double> comp;
const int MOD = 1000000007;

const int MAXN = 150;

int n;
int dp[MAXN][4];
char s[2][MAXN];
bool f[MAXN][2];
int msk[MAXN];
int ans;

void init()
{
    scanf ("%s", &s[0][1]);
    scanf ("%s", &s[1][1]);
}

void update(int i, int mask, int res)
{
    dp[i][mask] = max(dp[i][mask], res);
}

void solve()
{
    n = strlen(s[1] + 1);
    for (int i = 1; i <= n; ++i)
    {
        f[i][0] = (s[0][i] == 'X');
        f[i][1] = (s[1][i] == 'X');
        msk[i] = (f[i][0] ? 1 : 0) | (f[i][1] ? 2 : 0);
    }
    memset(dp, -1, sizeof(dp));
    dp[1][msk[1]] = 0;
    for (int i = 0; i + 1 <= n; ++i)
    {
        for (int mask = 0; mask < 4; ++mask)
        {
            if (dp[i][mask] < 0)
            {
                continue;
            }
            int cur = dp[i][mask];
            update(i + 1, msk[i + 1], cur);
            if (!(mask & 1) && !(mask & 2) && !f[i + 1][0])
            {
                update(i + 1, msk[i + 1] | 1, cur + 1);
            }
            if (!(mask & 1) && !(mask & 2) && !f[i + 1][1])
            {
                update(i + 1, msk[i + 1] | 2, cur + 1);
            }
            if (!(mask & 1) && !f[i + 1][1] && !f[i + 1][0])
            {
                update(i + 1, 3, cur + 1);
            }
            if (!(mask & 2) && !f[i + 1][0] && !f[i + 1][1])
            {
                update(i + 1, 3, cur + 1);
            }
        }
    }
    for (int i = 0; i < 4; ++i)
    {
        ans = max(ans, dp[n][i]);
    }
}

void print_answer()
{
    printf("%d\n", ans);
}

void precalc()
{

}

void run()
{
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#endif // _MY_DEBUG
    precalc();
    int t = 1; //scanf ("%d", &t);
    for (int tnum = 1; tnum <= t; ++tnum)
    {
        init();
        solve();
        print_answer();
    }
}
int main()
{
    srand(90);
    ios_base::sync_with_stdio(false); cin.tie(0);
    run();
    return 0;
}