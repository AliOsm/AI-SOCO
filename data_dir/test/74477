#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int MX = 2005;

struct Point {
	int x, y;
} p[2005];

ll cp(Point a, Point b) {
	return a.x * 1LL * b.y - a.y * 1LL * b.x;
}

bool operator< (Point a, Point b) {
	if (a.x != b.x) return a.x < b.x;
	return a.y < b.y;
}

int pos[2005];

struct Edge {
	int dx, dy;
	int from, to;
} e[MX*MX];

ll cp(Edge a, Edge b) {
	return a.dx * 1LL * b.dy - a.dy * 1LL * b.dx;
}

bool operator< (Edge a, Edge b)
{
	return cp(a, b) < 0;
}

void SOLVED(int i, int j, int k) {
	cout << "Yes\n";
	cout << p[i].x << " " << p[i].y << "\n";
	cout << p[j].x << " " << p[j].y << "\n";
	cout << p[k].x << " " << p[k].y;
	exit(0);
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	int n;
	ll S;
	cin >> n >> S;
	S *= 2;
	
	for (int i = 0; i < n; i++) {
		cin >> p[i].x >> p[i].y;
	}
	
	sort(p, p + n);
	for (int i = 0; i < n; i++) {
		pos[i] = i;
	}
	
	for (int i = 0, t = 0; i < n; i++) {
		for (int j = i + 1; j < n; j++) {
			if (p[i].x < p[j].x) {
				e[t].dx = p[j].x - p[i].x;
				e[t].dy = p[j].y - p[i].y;
				e[t].from = i;
				e[t].to = j;
			}
			else {
				e[t].dx = p[i].x - p[j].x;
				e[t].dy = p[i].y - p[j].y;
				e[t].from = j;
				e[t].to = i;
			}
			t++;
		}
	}
	
	sort(e, e + n*(n-1)/2);
	
	for (int i = 0; i < n*(n-1)/2; i++) {
		Point p1 = p[pos[e[i].from]];
		Point p2 = p[pos[e[i].to]];
		int L = 0, R = n - 1;
		while (L <= R) {
			int M = (L + R) / 2;
			ll SS = cp(p2, p1) + cp(p[M], p2) + cp(p1, p[M]);
			if (SS < S) {
				L = M + 1;
			}
			else if (SS > S) {
				R = M - 1;
			}
			else {
				SOLVED(pos[e[i].from], pos[e[i].to], M);
			}
		}
		
		L = 0, R = n - 1;
		while (L <= R) {
			int M = (L + R) / 2;
			ll SS = cp(p2, p1) + cp(p[M], p2) + cp(p1, p[M]);
			if (SS < -S) {
				L = M + 1;
			}
			else if (SS > -S) {
				R = M - 1;
			}
			else {
				SOLVED(pos[e[i].from], pos[e[i].to], M);
			}
		}
		
		swap(p[pos[e[i].from]], p[pos[e[i].to]]);
		swap(pos[e[i].from], pos[e[i].to]);
	}
	
	cout << "No";
}
