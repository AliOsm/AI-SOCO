#include <stdio.h>
#include <bits/stdc++.h>

#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define sz(a) (int)a.size()
#define fi first
#define se second

using namespace std;

const int N = 100000;
const int inf = (int)1e9;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const int P = 239;
const ld eps = 1e-6;

vector<int> p;
vector<int> sz;

void build(int n)
{
    p.resize(n);
    rep(i, 0, n)
        p[i] = i;
    sz.resize(n, 1);
}

int get(int x)
{
    if (p[x] != x)
        p[x] = get(p[x]);
    return p[x];
}

bool uni(int x, int y)
{
    x = get(x);
    y = get(y);
    if (x == y)
        return false;
    if (sz[x] >= sz[y])
    {
        p[y] = x;
        sz[x] += sz[y];
    }
    else
    {
        p[x] = y;
        sz[y] += sz[x];
    }
    return true;
}

bool comp(pair<int, int> a, pair<int, int> b)
{
    return a.fi > b.fi;
}

vector<vector<int> > g;

int main()
{
    //freopen("archer.in", "r", stdin);
    //freopen("archer.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    int n, m;
    cin >> n >> m;
    vector<pair<int, int> > a(n);
    rep(i, 0, n)
    {
        cin >> a[i].fi;
        a[i].se = i;
    }
    sort(a.begin(), a.end(), comp);
    vector<int> pos(n);
    rep(i, 0, n)
        pos[a[i].se] = i;
    g.resize(n);
    rep(i, 0, m)
    {
        int u, v;
        cin >> u >> v;
        u = pos[u - 1];
        v = pos[v - 1];
        g[u].push_back(v);
        g[v].push_back(u);
    }
    build(n);
    ll sum = 0;
    rep(u, 0, n)
        for (int v : g[u])
            if (v < u)
            {
                int x = u, y = v;
                x = get(x), y = get(y);
                int sx = sz[x], sy = sz[y];
                if (uni(x, y))
                    sum += (ll)a[u].first * sx * sy;
            }
    cout << (ld)sum * 2 / ((ll)n * (n - 1));
    return 0;
}
