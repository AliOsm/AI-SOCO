#include <bits/stdc++.h>
#define int long long

using namespace std;

const int MOD = 1e9 + 7;
const int INF = 1e9;
const int MaxN = 5e5 + 55;

struct T{
    struct segmentTree{
        long long tree[MaxN * 4];
        int p[MaxN * 4];

        void push(int x, int l, int r, int mid)
        {
            if(l == r || !p[x])
                return;
            p[x + x] = p[x + x + 1] = p[x];
            tree[x + x] = p[x] * 1ll * (mid - l + 1);
            tree[x + x + 1] = p[x] * 1ll * (r - mid);
            p[x] = 0;
        }

        void up(int l, int r, int newValue)
        {
            up(1, 1, MaxN - 1, l, r, newValue);
        }

        void up(int x, int l, int r, int ll, int rr, int newValue)
        {
            if(l > rr || r < ll)
                return;
            if(l >= ll && r <= rr)
            {
                p[x] = newValue;
                tree[x] = newValue * (r - l + 1);
                return;
            }
            int mid = (l + r) / 2;
            push(x, l, r, mid);
            up(x + x, l, mid, ll, rr, newValue);
            up(x + x + 1, mid + 1, r, ll, rr, newValue);
            tree[x] = tree[x + x] + tree[x + x + 1];
        }

        long long get(int l, int r)
        {
            return get(1, 1, MaxN - 1, l, r);
        }

        long long get(int x, int l, int r, int ll, int rr)
        {
            if(l > rr || r < ll)
                return 0;
            if(l >= ll && r <= rr)
                return tree[x];
            int mid = (l + r) / 2;
            push(x, l, r, mid);
            return get(x + x, l, mid, ll, rr) + get(x + x + 1, mid + 1, r, ll, rr);
        }
    } sg;

    set< pair<int, int> > s, s1;

    T()
    {
        s.insert(make_pair(0, INF));
        s.insert(make_pair(INF, 0));
        s1.insert(make_pair(INF, 0));
        s1.insert(make_pair(0, INF));
    }

    void up(int pos, int h)
    {
        int cur = sg.get(pos, pos);
        if(cur >= h)
            return;

        int lastPos = 0;
        set<pair<int, int> > :: iterator it = --s.lower_bound(make_pair(pos + 1, -1));

        while(it -> second <= h)
        {
            s.erase(it);
            s1.erase(make_pair(it -> second, it -> first));
            it = --s.lower_bound(make_pair(pos + 1, -1));
        }
        sg.up(it -> first + 1, pos, h);
        s.insert(make_pair(pos, h));
        s1.insert(make_pair(h, pos));
    }

    long long get(int x, int y, int xx, int yy)
    {
        if(x > xx || y > yy)
            return 0;
        set<pair<int, int> > :: iterator it = s1.lower_bound(make_pair(y, -1));
        if(it -> second < x)
            return ((xx - x + 1) * 1ll * (yy - y + 1));
        else
        {
            int l = x;
            int r = min(xx, it -> second);
            return ((xx - x + 1) * 1ll * (yy - y + 1)) - sg.get(l, r) + (r - l + 1) * 1ll * (y - 1);
        }
    }
} t;

int n, mx, my, mz;

struct point{
    int x, y, z;
} a[MaxN];

bool cmp(point a, point b)
{
    return a.x < b.x;
}

int sufy[MaxN], sufz[MaxN];

main()
{
//    freopen("input.txt", "r", stdin);
    ios_base :: sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n >> mx >> my >> mz;

    for(int i = 1; i <= n; ++i)
        cin >> a[i].x >> a[i].y >> a[i].z;

    sort(a + 1, a + n + 1, cmp);

    sufy[n] = a[n].y;
    sufz[n] = a[n].z;

    for(int i = n - 1; i; --i)
    {
        sufy[i] = max(sufy[i + 1], a[i].y);
        sufz[i] = max(sufz[i + 1], a[i].z);
    }

    long long ans = 0;

    int l = 1;
    while(l <= n)
    {
        int r = l + 1;
        while(r <= n && a[l].x == a[r].x)
            ++r;

        int dif = a[l].x - a[l - 1].x;

        ans += dif * 1ll * t.get(sufy[l] + 1, sufz[l] + 1, my, mz);

        for(int i = l; i < r; ++i)
            t.up(a[i].y, a[i].z);

        l = r;
    }

    ans += (mx - a[n].x) * 1ll * t.get(1, 1, my, mz);

    cout << ans << '\n';
    return 0;
}
