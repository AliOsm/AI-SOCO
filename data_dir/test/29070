#include <bits/stdc++.h>

using namespace std;

string good;

bool mycomp(const string& p, const string& q) {
    if (q.size() != p.size()) return false;
        for (size_t i = 0; i < p.size(); i++) {
            if (p[i] == '?' && good.find(q[i]) == string::npos) return false;
            if (p[i] != '?' && p[i] != q[i]) return false;
        }
        return true;
}

size_t starPos;

bool satisfy(const string& q, const string& p) {
    size_t pos = starPos;
    if (pos == string::npos) {
       return mycomp(p, q);
    } else {
        if (p.size() - 1 > q.size()) return false;
        string pref = p.substr(0, pos);
        string suff = p.substr(pos + 1);
        if (mycomp(pref, q.substr(0, pref.size())) == false) return false;
        if (mycomp(suff, q.substr(q.size() - suff.size())) == false) return false;
        for (size_t i = pref.size(); i < q.size() - suff.size(); i++) {
            if (good.find(q[i]) != string::npos) return false;
        }
        return true;
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    string pattern;
    cin >> good >> pattern;
    starPos = pattern.find('*');
    int q;
    cin >> q;
    while (q-- > 0) {
        string query;
        cin >> query;
        if (satisfy(query, pattern)) puts("YES");
        else puts("NO");
    }
}