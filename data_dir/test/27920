#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <cassert>
#include <ctime>


using namespace std;

#ifdef WIN32
  #define LLD "%I64d"
#else
  #define LLD "%lld"
#endif

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef vector<ll> vll;
typedef vector<vll> vvll;

ll rdtsc() {
  ll tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define TASKNAME "text"
#define pb push_back
#define mp make_pair
#define EPS (1e-9)
#define INF ((int)1e9)
#define sqr(x) ((x) * (x))
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())

const int MOD = (int)1e9 + 7;

inline void add(int &x, int y) {
  if ((x += y) >= MOD)
    x -= MOD;
}

inline int mult(int x, int y) {
  return (long long)x * y % MOD;
}

const int maxn = (int)1e5 + 10;
struct FenvTree {
  int a[maxn];
  int n;

  void build(int _n) {
    n = _n;
    for (int i = 0; i < n; ++i)
      a[i] = 0;
  }

  int get(int x) {
    int res = 0;
    for (int v = x; v >= 0; v = (v & (v + 1)) - 1)
      ::add(res, a[v]);
    return res;
  }

  int get(int l, int r) {
    int res = get(r - 1);
    ::add(res, MOD - get(l - 1));
    return res;
  }

  void add(int pos, int toadd) {
    for (int v = pos; v < n; v = (v | (v + 1)))
      ::add(a[v], toadd); 
  }
} tree;

int a[maxn];
pair<int, int> ps[maxn];
int d[maxn];

bool solve() {
  int n;
  if (scanf("%d", &n) < 1)
    return 0;
  for (int i = 0; i < n; ++i)
    scanf("%d", &a[i]);

  for (int i = 0; i < n; ++i) {
    ps[i] = mp(a[i], i);
  }

  sort(ps, ps + n);
  
  tree.build(n);

  for (int i = 0; i < n; ++i) {
    int right = ps[i].second;
    bool first = (i == 0 || ps[i - 1].first != ps[i].first);
    int left = (first ? 0 : ps[i - 1].second);
    //eprintf("[%d..%d)\n", left, right);
    d[right] = mult((int)first + tree.get(left, right), a[right]);
    //eprintf("d[%d] = %d\n", right, d[right]);
    tree.add(right, d[right]);
  }

  printf("%d\n", tree.get(0, n));
  return 1;
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".in", "r", stdin);
  freopen(TASKNAME".out", "w", stdout);
#endif
  
  while (1) {
    if (!solve())
      break;
    #ifdef DEBUG
      eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
    #endif
  }
  return 0;
}
