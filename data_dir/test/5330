#include <bits/stdc++.h>
#include <fcntl.h>

using namespace std;

typedef long long ll;
typedef long double ld;

using namespace std;

int stx, sty;
int arr[24][2];
int dist[24][24];
int stDist[24];
int dp[(1 << 24)];
int n;

int calc(int x1, int y1, int x2, int y2)
{
  return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
}

int solve(int mask)
{
  if(mask == (1 << n) - 1)
  {
      return 0;
  }
  int &ret = dp[mask];
  if(~ret)
    return ret;
  int firstBit = 0;
  for(int i = 0; i < n; i++)
  {
    if((mask & (1 << i)) == 0)
    {
      firstBit = i;
      break;
    }
  }
  ret = solve(mask | (1 << firstBit))+ 2 * stDist[firstBit];
  for(int i = firstBit + 1; i < n; i++)
  {
    if((mask & (1 << i)) == 0)
    {
      ret = min(ret, solve(mask | (1 << firstBit) | (1 << i)) + stDist[firstBit] + stDist[i] + dist[firstBit][i]);
    }
  }
  return ret;
}

void output(int mask)
{
  if(mask == (1 << n - 1))
    return;
  int &ret = dp[mask];
  int firstBit = 0;
  for(int i = 0; i < n; i++)
  {
    if((mask & (1 << i)) == 0)
    {
      firstBit = i;
      break;
    }
  }
  if(ret == solve(mask | (1 << firstBit)) + 2 * stDist[firstBit])
  {
    cout << firstBit + 1 << ' ' << 0 << ' ';
    return output(mask | (1 << firstBit));
  }
  for(int i = firstBit + 1; i < n; i++)
  {
    if((mask & (1 << i)) == 0)
    {
      if(ret == solve(mask | (1 << firstBit) | (1 << i)) + stDist[firstBit] + stDist[i] + dist[firstBit][i])
      {
        cout << firstBit + 1 << ' ' << i + 1 << ' ' << 0 << ' ';
        return output(mask | (1 << firstBit) | (1 << i));
      }
    }
  }
}

int main()
{
  // ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  cin >> stx >> sty >> n;
  for(int i = 0; i < n; i++)
    cin >> arr[i][0] >> arr[i][1];
  for(int i = 0; i < n; i++)
  {
    stDist[i] = calc(stx, sty, arr[i][0], arr[i][1]);
    for(int j = 0; j < n; j++)
    {
      dist[i][j] = calc(arr[i][0], arr[i][1], arr[j][0], arr[j][1]);
    }
  }
  memset(dp, -1, sizeof dp);
  cout << solve(0) << '\n';
  cout << 0 << ' ';
  output(0);
  return 0;
}
