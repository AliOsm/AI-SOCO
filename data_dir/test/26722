
#include<bits/stdc++.h>
#define pb push_back
#define ff first
#define ss second
#define mp make_pair
#define mod 1000000007
#define deb(x) cout<<#x<<" : "<<x<<endl;
#define deb2(x,y) cout<<#x<<" : "<<x<<"\t"<<#y<<" : "<<y<<endl;
#define deb3(x,y,z) cout<<#x<<" : "<<x<<"\t"<<#y<<" : "<<y<<"\t"<<#z<<" : "<<z<<endl;
#define inf 1000000000000000 

#define FIO ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define endl '\n'
typedef long long ll;
#define ld long double

/*
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
  
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 
*/

using namespace std;
 
 
long long modulo(long long base,long long exponent,long long modulus);
long long choose(ll n,ll k);
ll inverse(ll a,ll m);
void build();
void fileio();
ll ncr(ll n,ll r);
 
const int nax=1e6+10;
const int LG=log2(nax)+1;
vector<ll> fact(nax);
vector<ll> invfact(nax);

ll dp[205][205]; 
ll get(ll l,ll r,vector<ll> &dp)
{
	if(l>r) return 0;
	ll ans = dp[r];
	if(l!=0)
		ans-=dp[l-1];
	return ans;
} 

int32_t main() {
 
    FIO
    //fileio();
    //build();
    ll t;
    cin>>t;

    while(t--)
    {
    	ll a,b,q;
    	cin>>a>>b>>q;

    	for(int i=0;i<a;i++)
    	{
    		for(int j=0;j<b;j++)
    		{
    			if(i%b!=j%a)
    				dp[i][j]++;
    		}
    	}

    	ll c = (a*b)/__gcd(a,b);

    	vector<ll> dp2(c,0);
    	dp2[0] = dp[0][0];
    	for(int i=1;i<c;i++)
			dp2[i]=dp[i%a][i%b]+dp2[i-1];

		ll temp = dp2[c-1];

    	while(q--)
    	{
    		ll l,r;
    		cin>>l>>r;

    		ll ans=0;
    		if(l%c<=r%c)
    		{
    			ans+=get(l%c,r%c,dp2);
    			l+=((r%c)-l%c+1);
    			
    			if(l<=r)
    			{
    				assert((r-l+1)%c==0);
    				ll period = (r-l+1)/c;
    				ans+=period*temp;
    			}	
    		}
    		else
    		{
    			ans+=get(l%c,c-1,dp2);
    			ans+=get(0,r%c,dp2);
    			l+=(c-1 - l%c)+1+ r%c+1;
    			
    			if(l<=r)
    			{
    				// deb2(l,r);
    				assert((r-l+1)%c==0);
    				ll period = (r-l+1)/c;
    				ans+=period*temp;	
    			}
    		}
    		cout<<ans<<" ";
    	}
    	cout<<endl;
    	memset(dp,0,sizeof(dp));
    	for(int i=0;i<205;i++)
    		for(int j=0;j<205;j++)
    			dp[i][j] = 0;
    }
 
    return 0;
}
 
ll ncr(ll n,ll r)
{
    if(r>n || r<0 || n<0)
        return 0;
    ll ans=fact[n];
    ll temp=(invfact[n-r]*invfact[r])%mod;
    ans=(ans*temp)%mod;
    return ans;
}

void fileio()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
} 
void build()
{
    fact[0]=1;
    invfact[0]=inverse(1,mod);
    for(ll i=1;i<nax;i++)
    {
        fact[i]=(fact[i-1]*i)%mod;
        invfact[i] = inverse(fact[i],mod);   
    }
}
 
long long modulo(long long base,long long exponent,long long modulus)
{
    if(modulus ==1)
        return 0;
 
    long long result=1;
    base=base % modulus;
    while(exponent>0)
    {
        if(exponent%2==1)
        {
            result=(result*base) % modulus;
 
        }
        exponent=exponent>>1;
        base = (base*base) % modulus;
    }
    return result;
}
 
long long choose(ll n,ll k)
{
    if(k==0)  return 1;
    return (n* choose(n-1,k-1))/k;
}
 
void EE(ll a,ll b,ll &co1,ll &co2)
{
    if(a%b==0)
    {
        co1=0;
        co2=1;
        return;
    }
    EE(b,a%b,co1,co2);
    ll temp=co1;
    co1=co2;
    co2=temp-co2*(a/b);
}
 
ll inverse(ll a,ll m)
{
    ll x,y;
    EE(a,m,x,y);
    if(x<0) x+=m;
    return x;
}