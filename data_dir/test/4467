#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
#define sc(a) scanf("%d", &a)
#define sc2(a, b) scanf("%d%d", &a, &b)
#define sc3(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define scs(a) scanf("%s",a)
#define pri(x) printf("%d\n", x)
#define prie(x) printf("%d ", x)
#define mp make_pair
#define pb push_back
#define BUFF ios::sync_with_stdio(false);
#define db(x) cerr << #x << " == " << x << endl
#define dbs(x) cerr << x << endl
#define imprime(x, Y)                              \
    for (int X = 0; X < Y; X++) cout << x[X] << " "; \
  cout << endl;
typedef long long int ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vector<ii> > vvii;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3fll;
const ld pi = acos(-1);
const int MOD = 1e9 + 7;
//ultimo que entra , primeiro que sai
struct inter{
  int l,r,idx;
  inter(){ l=0,r=0;}
  inter(int L, int R, int I){ l=L,r=R,idx=I;}
};
priority_queue<inter> pq;
bool operator<(const inter &a, const inter &b){
  if(a.r!=b.r) return a.r>b.r;
  return a.l<b.l;
}
vector<pair<ii,int> >  v;
int n,k;
vi imp;
int main()
{
  sc2(n,k);
  for(int i=0;i<n;i++){
    int x,y;
    sc2(x,y);
    v.pb(mp(mp(x,y),i+1));
  }
  int resp=0;
  sort(v.begin(),v.end());
  for(int i=0;i<n;i++){
    int last=v[i].first.first;
    inter x(v[i].first.first,v[i].first.second,v[i].second);
    pq.push(x);
    if(pq.size()==k){
      x=pq.top();
      pq.pop();
      resp=max(resp,x.r-last+1);
    }
  }
  set<int> ta;
  int aux=0;
  while(!pq.empty()) pq.pop();
  for(int i=0;i<n;i++){
    int last=v[i].first.first;
    inter x(v[i].first.first,v[i].first.second,v[i].second);
    pq.push(x);
    ta.insert(v[i].second);
    if(pq.size()==k){
      x=pq.top();
      pq.pop();
      aux=max(aux,x.r-last+1);
      if(aux==resp){
        for(int y: ta) imp.pb(y);
        break;
      }
      ta.erase(x.idx);
    }
  }
  cout<<resp<<endl;
  imprime(imp,imp.size());
  return 0;
}
