#include <bits/stdc++.h>
using namespace std;

//.define
//#define FILE_IN_OUT
#define RET(_x)                       return std::cout << (_x) << '\n', 0;
#define all(_obj)                     (_obj).begin(), (_obj).end()
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define ceilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define has(_obj, _val)               ((_obj).find((_val)) != (_obj).end())
#define sz(_obj)                      static_cast<int>((_obj).size())
#define debug(_x)                     std::cerr << (#_x) << " = " << (_x) << '\n';
#define endl                          "\n"
template<typename Tp>
inline void outarr(Tp _array, const std::size_t _N, const char* _delim = " ") {
    Tp end = std::next(_array, _N);
    for (Tp current = _array; current != end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = int64_t;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
map<int, int> cnt;
int p2[31];

inline void init() {
    for (int i = 1; i < 31; ++i) {
        p2[i] = 1 << i;
    }
}

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    init();
    int n;
    cin >> n;
    loop(n) {
        int x;
        cin >> x;
        ++cnt[x];
    }
    int ans = 0;
    for (auto [x, k] : cnt) {
        bool fl = false;
        for (int i = 1; i < 31; ++i) {
            if (x < p2[i] && has(cnt, p2[i] - x)) {
                if (p2[i] - x == x && cnt[x] == 1) {
                    continue;
                }
                fl = true;
                break;
            }
        }
        if (!fl) {
            ans += cnt[x];
        }
    }
    cout << ans << endl;

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}