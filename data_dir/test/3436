#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef double real;

#ifdef WIN32
#define INT64 "%I64d"
#define UINT64 "%I64u"
#else
#define INT64 "%lld"
#define UINT64 "%llu"
#endif

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

const int MaxN = 1003, MaxC = 0x3F3F3F3F, NA = -1;

real d [MaxN] [MaxN];
real w [MaxN];
real z [MaxN];
int xp [MaxN] [2], yp [MaxN] [2];
int n, a, b, xa, ya, xb, yb;

real dist (int i, int j)
{
 int k, l;
 real res;

 res = MaxC;
 for (k = 0; k < 2; k++)
  for (l = 0; l < 2; l++)
   res = min (res, hypot (yp[i][k] - yp[j][l], xp[i][k] - xp[j][l]));

 if ((xp[i][0] == xp[i][1] && xp[j][0] <= xp[i][0] && xp[i][0] <= xp[j][1]) ||
     (xp[j][0] == xp[j][1] && xp[i][0] <= xp[j][0] && xp[j][0] <= xp[i][1]))
  for (k = 0; k < 2; k++)
   for (l = 0; l < 2; l++)
    res = min (res, (real) abs (yp[i][k] - yp[j][l]));

 if ((yp[i][0] == yp[i][1] && yp[j][0] <= yp[i][0] && yp[i][0] <= yp[j][1]) ||
     (yp[j][0] == yp[j][1] && yp[i][0] <= yp[j][0] && yp[j][0] <= yp[i][1]))
  for (k = 0; k < 2; k++)
   for (l = 0; l < 2; l++)
    res = min (res, (real) abs (xp[i][k] - xp[j][l]));

 eprintf ("%d %d %.10lf\n", i, j, res);
 if (res > a)
  res = MaxC;

 return res;
}

int main (void)
{
 int i, j, k;

 while (scanf (" %d %d", &a, &b) != EOF)
 {
  scanf (" %d %d %d %d", &xa, &ya, &xb, &yb);
  scanf (" %d", &n);
  for (i = 0; i < n; i++)
  {
   scanf (" %d %d %d %d", &xp[i][0], &yp[i][0], &xp[i][1], &yp[i][1]);
   if (xp[i][0] > xp[i][1])
    swap (xp[i][0], xp[i][1]);
   if (yp[i][0] > yp[i][1])
    swap (yp[i][0], yp[i][1]);
  }

  if (n < 0)
   break;
  xp[n][0] = xp[n][1] = xa;
  yp[n][0] = yp[n][1] = ya;
  n++;
  xp[n][0] = xp[n][1] = xb;
  yp[n][0] = yp[n][1] = yb;
  n++;
  for (i = 0; i < n; i++)
   for (j = 0; j < n; j++)
    d[i][j] = dist (i, j);

  for (i = 0; i < n; i++)
   w[i] = z[i] = MaxC;
  k = n - 2;
  w[k] = 0;
  z[k] = 0;

  for (j = 0; j < n; j++)
  {
   eprintf ("%d: %d %.10lf %.10lf\n", j, k, w[k], z[k]);
   if (k == n - 1)
    break;

   for (i = 0; i < n; i++)
    if (w[i] > z[k] + d[k][i])
    {
     w[i] = z[k] + d[k][i];
     z[i] = z[k] + a + b;
    }

   z[k] = MaxC;
   k = 0;
   for (i = 1; i < n; i++)
    if (z[k] > z[i])
     k = i;
   if (z[k] >= MaxC)
    break;
  }

  if (w[n - 1] >= MaxC)
   printf ("-1\n");
  else
   printf ("%.12lf\n", w[n - 1]);
 }

 return 0;
}
