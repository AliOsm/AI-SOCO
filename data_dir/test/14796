#include <bits/stdc++.h>
#include <ctime>
using namespace std;

#define space ' '
#define enter "\n"
#define fi first
#define se second
#define INF 2000000007
#define mp make_pair

typedef long long ll;
typedef unsigned long long ull;
typedef pair <int, int> pii;
typedef set <int> si;
typedef map <int, int> mii;
typedef pair <ll, ll> pll;
typedef vector <int> vi;
typedef vector <pii> vii;

template <typename T>
T sqr (T x)
{
    return x * x;
}

template <typename T>
T gcd (T a, T b)
{
    return b ? gcd(b, a % b) : a;
}

template <class T>
bool chmin (T &x, const T &y)
{
    if (y < x)
    {
        x = y;
        return true;
    }
    return false;
}

template <class T>
bool chmax (T &x, const T &y)
{
    if (x < y)
    {
        x = y;
        return true;
    }
    return false;
}


template <class P, class Q>
ostream & operator << (ostream &os, const pair <P, Q> &p)
{
    return os << '(' << p.fi << ", " << p.se << ')';
}


template <class T>
ostream & operator << (ostream &os, const vector <T> &v)
{
    os << '{';
    bool was = false;
    for (const T & x : v)
    {
        if (was)
            os << ", ";
        was = true;
        os << x;
    }
    os << '}';
    return os;
}

template <class T>
ostream & operator << (ostream &os, const set <T> &v)
{
    os << '[';
    bool was = false;
    for (const T & x : v)
    {
        if (was)
            os << ", ";
        was = true;
        os << x;
    }
    os << ']';
    return os;
}

template <class P, class Q>
ostream & operator << (ostream &os, const map <P, Q> &m)
{
    os << '<';
    bool was = false;
    for (const auto &x : m)
    {
        if (was)
            os << ", ";
        was = true;
        os << x;
    }
    os << '>';
    return os;
}

int n, k, cnt;
long double dist, v1, v2, ans = INF;

long double f (long double tme)
{
    long double l, r, md;
    long double S;
    l = 0, r = tme;
    for (int I = 1; I <= 400; I++)
    {
        md = (l + r) / 2;
        S = md * (v2 - v1);
        S /= v1 + v2;
        S += md;
        if (tme - S * (cnt - 1) < md)
            r = md;
        else
            l = md;
    }
    return l;
}

int main ()
{
    //freopen("", "r", stdin); freopen("", "w", stdout);
    ios_base::sync_with_stdio(false);
    cin >> n >> dist >> v1 >> v2 >> k;
    cnt = n / k + (n % k != 0);
    long double l = 0, r = dist / v1;
    for (int I = 1; I <= 400; I++)
    {
        long double md = (l + r) / 2.0;
        long double MaxPath = f(md), NewTime = MaxPath * v2 + (md - MaxPath) * v1;
        if (NewTime <= dist)
            l = md;
        else
            r = md;
    }
    printf("%.10lf", (double)l);
}
