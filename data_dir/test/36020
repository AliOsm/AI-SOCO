#include <cstdio>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <cstring>
#include <string>
#include <cmath>
#include <ctime>
#include <cassert>
#include <queue>
#include <sstream>

using namespace std;

#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++)
#define sz(v) (int)(v).size()
#define all(v) (v).begin(), (v).end()

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	long long time_stamp = clock();
#endif
	int n, m, x;
	string s;
	cin >> n >> m;
	vector <int> atk, def, me;
	REP(i, n) {
		cin >> s >> x;
		if (s == "ATK") atk.push_back(x);
		else def.push_back(x);
	}
	REP(i, m) {
		cin >> x;
		me.push_back(x);
	}
	sort(all(atk));
	sort(all(def));
	sort(all(me));
	int score = 0;
	REP(i, min(sz(atk), m)) {
		if (me[m - 1 - i] >= atk[i]) {
			score += me[m - 1 - i] - atk[i];
		} else {
			break;
		}
	}
	//cout << score << endl;
	vector <int> rest;
	int id = 0;
	for (int i = 0; i < m; i++) {
		if (id < sz(def) && me[i] > def[id]) {
			id++;
		} else {
			rest.push_back(me[i]);
		}
	}
	int can = 0;
	if (id == sz(def)) {
		//REP(i, sz(rest)) cout<<rest[i]<<" ";
		//cout<<endl;
		id = 0;
		//cout<<sz(rest)<<endl;
		//cout<<endl;
		//cout<<can<<endl;
		REP(i, sz(rest)) {
			//cout<<id<< " " <<sz(atk)<<" " <<rest[i]<< " " <<atk[id]<<endl;
			int qw = rest[i];
			int er = (id<sz(atk)?atk[id]:-1);
			if (id < sz(atk) && rest[i] >= atk[id]) {
				id++;
				//cout << rest[i]-atk[id]<<endl;
				//cout<<qw-er<<endl;
				can+=qw-er;
				//cout<<can<<endl;
			//	can += rest[i] - atk[id];
				//cout<<"!!!1!!!" << can << endl;
			} else {
				can += qw;
				//cout<<"!!!2!!!"<<can<<endl;
			}
			//cout << can << endl;
		}
		if (id == sz(atk)) {
			score = max(score, can);
		}
	}
	cout << score << endl;
#ifdef LOCAL
	fprintf(stderr, "\n\n\nTime: %.3lf\n\n\n", (clock() - time_stamp) / 1000.);
#endif
	return 0;
}