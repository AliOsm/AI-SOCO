#include <bits/stdc++.h>

using namespace std;

struct vec
{
    long double x,y;
    bool operator ==(const vec &a) const{
        return x==a.x&&y==a.y;
    }
    bool operator <(const vec &a) const{
        if(a.x!=x) return x<a.x;
        return y<a.y;
    }
    vec operator +(const vec &a) const{
        return {x+a.x,y+a.y};
    }
    vec operator *(const long double &a) const{
        return {x*a,y*a};
    }
    vec operator -(const vec &a) const{
        return {x-a.x,y-a.y};
    }
    vec operator /(const long double &a) const{
        return {x/a,y/a};
    }
    long double len() const{
        return sqrt(x*x+y*y);
    }
    long double dot(const vec &a) const{
        return x*a.x+y*a.y;
    }
    long double crs(const vec &a) const{
        return x*a.y-y*a.x;
    }
    vec proj(const vec &a) const{
        return (a/a.len())*(*this).dot(a)/a.len();
    }
};


struct P
{
    int x,y;
    bool operator <(const P&a) const{
        return x<a.x;
    }
};

bool as(P a,P b)
{
    return a.x>b.x;
}
long long x,y,z,mod=998244353;
vector<P> v[511111];
int i,n,m,k,a,d,b,c;
int dx[10]={0,1,0,-1,0},dy[10]={0,0,1,0,-1};
int e;
long long o[511111][2];
int l[1];
int j[1];
//set<int>s;
stack<int> s;
//multiset<int> s[5111];
priority_queue<int> q;
P u[1];
char r[1];

long long f(int n,int i,int p)
{
    if(o[n][i]>=0) return o[n][i];
    priority_queue<long long> q;
    long long x=0;
    for(int h=0;h<v[n].size();h++)
        if(v[n][h].x!=p)
    {
        x+=f(v[n][h].x,0,n);
        q.push(max(f(v[n][h].x,1,n)+v[n][h].y-f(v[n][h].x,0,n),(long long)0));
    }
    int k=b-i;
    for(;q.size()&&k;k--,q.pop())
        x+=q.top();
    return o[n][i]=x;
}

int main()
{
    scanf("%d",&e);
    for(int t=1;t<=e;t++)
    {
        scanf("%d %d",&a,&b);
        for(int t=1;t<=a;t++)
            o[t][0]=o[t][1]=-1;
        for(int t=1;t<a;t++)
        {
            scanf("%d %d %d",&n,&m,&k);
            v[n].push_back({m,k});
            v[m].push_back({n,k});
        }
        printf("%lld\n",f(1,0,0));
        for(int t=1;t<=a;t++)
            for(;v[t].size();v[t].pop_back());
    }

}
