/**/
#include <bits/stdc++.h>
using namespace std;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;

long long mat[101][101],res[101][101],tmp[101][101];
int cnt[10];
int X;
void pow_mat(long long power) {
	for(int i = 0;i < X;i++) {
		for(int j = 0;j < X;j++)
			res[i][j] = 0;
		res[i][i] = 1;
	}
	while(power){
		if(power&1) {
			for(int i = 0;i < X;i++) 
				for(int j = 0;j < X;j++) {
					tmp[i][j] = 0;
					for(int k = 0;k < X;k++) {
						tmp[i][j] = (tmp[i][j] + res[i][k] * mat[k][j])%mod;
					}
				}
			for(int i = 0;i < X;i++)
				for(int j = 0;j < X;j++)
					res[i][j] = tmp[i][j];
		}
		for(int i = 0;i < X;i++) 
			for(int j = 0;j < X;j++) {
				tmp[i][j] = 0;
				for(int k = 0;k < X;k++) {
					tmp[i][j] = (tmp[i][j] + mat[i][k] * mat[k][j])%mod;
				}
			}
		for(int i = 0;i < X;i++)
			for(int j = 0;j < X;j++)
				mat[i][j] = tmp[i][j];
		power >>= 1;
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	int N,B,K,d;
	cin>>N>>B>>K>>X;
	for(int i = 0;i < N;i++) {
		cin>>d;
		cnt[d]++;
	}

	for(int i = 0;i < X;i++) {
		for(int j = 0;j < 10;j++) {
			mat[i][(i*10+j)%X] += cnt[j];
		}
	}

	pow_mat(B);
	cout<<res[0][K]<<'\n';
	return 0;
}
/**/

