#include<stdio.h>
#include<iostream>
#include<string.h>
#include<string>
#include<ctype.h>
#include<math.h>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<bitset>
#include<algorithm>
#include<time.h>
using namespace std;
void fre() { freopen("c://test//input.in", "r", stdin); freopen("c://test//output.out", "w", stdout); }
#define MS(x, y) memset(x, y, sizeof(x))
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T1, class T2>inline void gmax(T1 &a, T2 b) { if (b > a)a = b; }
template <class T1, class T2>inline void gmin(T1 &a, T2 b) { if (b < a)a = b; }
const int N = 1e6 + 10, Z = 1e9 + 7, inf = 0x3f3f3f3f;
template <class T1, class T2>inline void gadd(T1 &a, T2 b) { a = (a + b) % Z; }
int casenum, casei;
const int G = 100;
int n, L, M;
struct MX
{
    int v[G][G];
    void O(){MS(v,0);};
    void E(){MS(v,0);for(int i = 0; i < G; ++i)v[i][i] = 1;}
    MX operator * (const MX & b)const
    {
        MX c; c.O();
        for(int i = 0; i < G; ++i)
        {
            for(int j = 0; j < G; ++j)
            {
                for(int k = 0; k < G; ++k)
                {
                    gadd(c.v[i][j], (LL)v[i][k] * b.v[k][j]);
                }
            }
        }
        return c;
    }
    MX operator ^ (LL p)const
    {
        MX x; memcpy(x.v, v, sizeof(v));
        MX y; y.E();
        while(p)
        {
            if(p & 1)
            {
                y = y * x;
            }
            x = x * x;
            p >>= 1;
        }
        return y;
    }
}a,b,c,d;
int v[N];
int main()
{
	while(~scanf("%d%d%d", &n, &L, &M))
	{
	    a.O(); b.O(); c.O();
        for(int i = 1; i <= n; ++i)
        {
            int x; scanf("%d", &x);
            ++a.v[0][x % M];
        }
        for(int i = 1; i <= n; ++i)
        {
            int x; scanf("%d", &x); v[i] = x;
            for(int j = 0; j < G; ++j)
            {
                ++b.v[j][(j + x) % M];
            }
        }
        c = a * (b ^ (L - 2));
        int ans = 0;
        for(int i = 1; i <= n; ++i)
        {
            int x; scanf("%d", &x);
            int w = (M - (x + v[i]) % M) % M;
            gadd(ans, c.v[0][w]);
        }
        printf("%d\n", ans);
	}

	return 0;
}
/*
【trick&&吐槽】


【题意】


【分析】


【时间复杂度&&优化】
2 2 6
1 2
1 1
3 4

*/

