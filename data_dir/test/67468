
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <ctime>
#include <random>
#include <iomanip>

#include <algorithm>
#include <vector>
#include <queue>
#include <string>
#include <stack>
#include <set>
#include <map>
#include <numeric>
#include <functional>
#include <deque>
#include <array>
#include <iterator>
#include <bitset>
#include <initializer_list>

using namespace std;

#include <ext/rope>

using namespace __gnu_cxx;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;

#define int long long


typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pii> vpi;


#define add push_back
#define rem pop_back
#define ALL(x) x.begin(), x.end()
#define SORT(x) sort(ALL(x))
#define REV(x) reverse(ALL(x))
#define F first
#define S second
#define DEBUG(x) cout << #x << " " << x << endl;
#define forn(i, a, b) for(int i = a; i <= b; i++)


template<typename T1, typename T2> auto max ( T1 a, T2 b ) { auto max = a > b ? a : b; return max; }
template<typename T1, typename T2> auto min ( T1 a, T2 b ) { auto min = a < b ? a : b; return min; }
template<typename T1, typename T2> void updmax ( T1 &a, T2 b ) { a = a > b ? a : b; }
template<typename T1, typename T2> void updmin ( T1 &a, T2 b ) { a = a < b ? a : b; }


const double EPS = 1e-9;
const double PI = acos ( -1. );
const int mod = 1e9 + 7;
int inf = __INT64_MAX__;
string YN[] = {"NO", "YES"};

static const int MAXN = 1 << 20;
static int a[MAXN], b[MAXN];

int n, m, k;
int res, ans, cnt;
string s;

vector<int> g[1 << 20];
int d;
int used[1 << 20], f = 1;
vector<int> vc;
void dfs( int v, int p = -1 )
{
	used[v] = 1;
	int cnt = 0, k = 0, q = v;
	for( auto u : g[v] )
		if( !used[u] )
			cnt += a[u], k++;
	if( a[v] && k == cnt ){
		f = 0;
		vc.add( v );
		q = p;
	}
	for( auto u : g[v] )
		if( !used[u] )
			dfs( u, q );
}
void solution()
{
	cin >> n;
	for( int i = 1; i <= n; i ++ ){
		int x, c;
		cin >> x >> c;
		a[i] = c;
		if( x == -1 )
			d = i;
		else{
			g[i].push_back( x );
			g[x].push_back( i );
		}
	}
	dfs( d );
	SORT( vc );
	for( auto p : vc ) cout << p << " ";
	if( f ) cout << -1 << endl;
}


int32_t main ( )
{

        //freopen("input.txt", "r", stdin);
        //freopen("output.txt", "w", stdout);

        ios_base::sync_with_stdio ( false ); cin.tie ( nullptr ); cout.tie ( nullptr );
        //cout.precision(15);

        int query = 1;
        // cin >> query;

        while ( query-- ) solution();

        return 0;

}
