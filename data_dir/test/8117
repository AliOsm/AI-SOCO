#include <bits/stdc++.h>

using namespace std;

#define ll long long
struct convex{


    vector<ll> M;//기울기을 의미한다.
    vector<ll> B;//y절편의 값들
    //결국 조심해야될것은 이게 getval이나 bad가 long long 범위를 넘어서는지에 대한 거다
    bool bad(int l1,int l2,int l3){
        //intersect  x  = (b1-b2)/(m2-m1)
        //조심해야될건 이게 long long 의 범위를 넘어서는것만 조금 조심하면 된다.
        //그리고 지금 이 값은 최소값을 구하고 있다는걸 알아둬야한다.
        return (B[l3]-B[l1]*(M[l1]-M[l2]) < (B[l2]-B[l1])*(M[l1]-M[l3]));
    }
    double Cross(int a, int b) {
		return (double)(B[b] - B[a]) / (M[a] - M[b]);
	}
    void add(ll m,ll b){
        M.push_back(m);
        B.push_back(b);

        while(M.size()>=3 && Cross(M.size()-3,M.size()-2)> Cross(M.size()-2,M.size()-1) )
        {
            M.erase(M.end()-2);
            B.erase(B.end()-2);
        }
    }

    ll getval(ll x,int id){
        return B[id] + x*M[id];
    }
    ll query(ll x){
        int l = 0,r = M.size()-1,mid;

        while(l<r){

            mid = (l+r)/2;
            if(Cross(mid,mid+1)>=x)
                r = mid;
            else
                l = mid+1;
        }
        return getval(x,l);
    }
};

const int N = 1e5+15;

int a[N],b[N];
ll dp[N];
int main(){
	//freopen("input.txt","r",stdin);
	int n,i;
	cin>>n;
	for(i=0;i<n;++i)scanf("%d",&a[i]);
	for(i=0;i<n;++i)scanf("%d",&b[i]);
	convex con;

	con.add(b[0],0);
	for(i=1;i<n;++i){
		ll q = con.query(a[i]);
		dp[i]= q;
		con.add(b[i],q);
	}
	cout<<dp[n-1]<<endl;
}
