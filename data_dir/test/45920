#include <bits/stdc++.h>
#define pb push_back
#define all(v) (v).begin() , (v).end()
#define popcnt(x) __builtin_popcount(x)
#define inf 0x3f3f3f3f
#define watch(x) cout << (#x) << " is " << (x) << endl
#define rand() (rand() << 15 | rand())

using namespace std;
typedef long long  ll;
const int N = 1e5 + 4 , LG = log2(N) + 1;

int mx[5][N][LG];
int n , m , k , getlg[N];
vector<vector<int> > a;
void pre(){
    for(int i = 1 ; i < N ; ++i)
        getlg[i] = (int)log2(i);
}
void buildmx(int indx){
    int lg = getlg[n];

    for(int i = 0 ; i < n ; ++i)
        mx[indx][i][0] = a[indx][i];

    for(int j = 1 ; j <= lg ; ++j){
        for(int i = 0 ; i + (1 << j) - 1 < n ; ++i){
            mx[indx][i][j] = max(mx[indx][i][j - 1] , mx[indx][i + (1 << (j - 1))][j - 1]);
        }
    }

}

int getMx(int indx , int l , int r){
    int sz = r - l + 1 , lg = getlg[sz] , dif = sz - (1 << lg);
    return max(mx[indx][l][lg] , mx[indx][l + dif][lg]);
}

int main(){
#ifndef ONLINE_JUDGE
    freopen("input.txt" , "r" , stdin);
#endif
    ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0);
    pre();
    cin >> n >> m >> k;
    a.resize(m , vector<int>(n));
    for(int i = 0 ; i < n ; ++i){
        for(int j = 0 ; j < m ; ++j){
            cin >> a[j][i];
        }
    }

    for(int i = 0 ; i < m ; ++i)
        buildmx(i);

    int best_l = 0 , best_r = 0 , sz = 0;
    for(int i = 0 ; i < n ; ++i){
        int l = i , r = n - 1 , ans = -1;
        while(l <= r){
            int mid = (l + r) >> 1;
            int f = 0;
            for(int j = 0 ; j < m ; ++j)
                f += getMx(j , i , mid);

            if(f <= k)ans = mid , l = mid + 1;
            else r = mid - 1;
        }
        if(~ans && ans - i + 1 > sz){
            best_l = i , best_r = ans;
            sz = ans - i + 1;
        }
    }
    int rem = k;
    for(int i = 0 ; i < m ; ++i){
        cout << min(rem , getMx(i , best_l , best_r)) << ' ';
        rem -= min(rem , getMx(i , best_l , best_r));
    }
    cout << "\n";
}
