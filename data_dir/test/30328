#include <algorithm>
#include <iostream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define endl '\n'
#define F first
#define S second
#define mp make_pair
#define ll long long
#define pb push_back
#define pii pair < int, int >
#define type(x) __typeof(x.begin())
#define foreach(i, x) for(type(x) i = x.begin(); i != x.end(); i++)
#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define sol (root << 1)
#define sag (sol | 1)
#define orta ((bas + son) >> 1)
#define bit __builtin_popcount

#ifndef D
	#define dbgs(x) 0
	#define dbg(x) 0
	#define TIME 0
#else
	#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
	#define dbg(x) cerr << (#x) << " --> " << (x) << endl
	#define TIME cerr << "Tooks " << (double) clock() / CLOCKS_PER_SEC << " seconds." << endl
#endif

typedef int return_type;

#define int ll

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 6 + 2;
const int M = 18 + 2;
const int P = 20 + 5; //notsure
const int Q = 10; //sure ?

ll t, n, a[M], dp[N][M][P][Q], road[N][M][P][Q], table[N][M];
string s;

int f(int x, int y, int p, int q) {

	if(!y)
		return !q;

	if(x == 7)
		return q == a[y] and f(1, y - 1, 0, p);

	ll &r = dp[x][y][p][q];

	if(r != -1) return r;
	
	r = 0;

	if(f(x + 1, y, p + (q + 4 >= 10), (q + 4) % 10)) { road[x][y][p][q] = 4; return r = 1; }
	if(f(x + 1, y, p + (q + 7 >= 10), (q + 7) % 10)) { road[x][y][p][q] = 7; return r = 1; }
	if(f(x + 1, y, p + (q + 0 >= 10), (q + 0) % 10)) { road[x][y][p][q] = 0; return r = 1; }

	return r;

}

void print(int x, int y, int p, int q) {
	
	if(!y)
		return;

	if(x == 7)
	{
		print(1, y - 1, 0, p);

		return;
	}

	if(road[x][y][p][q] == 4) { table[x][y] = 4; print(x + 1, y, p + (q + 4 >= 10), (q + 4) % 10); }
	if(road[x][y][p][q] == 7) { table[x][y] = 7; print(x + 1, y, p + (q + 7 >= 10), (q + 7) % 10); }
	if(road[x][y][p][q] == 0) { table[x][y] = 0; print(x + 1, y, p + (q + 0 >= 10), (q + 0) % 10); }

}

return_type main () {

	/*

	   18 leri 19 yapmak gerekebilir 10^18 girdisi icin

	*/

	cin >> t;

	FOR(i, 1, t)
	{
		memset(dp, -1, sizeof(dp));
		
		memset(table, 0, sizeof(table));
		
		cin >> s;

		n = s.size();

		FOR(i, 1, n)
			a[i] = s[i - 1] - '0';

		ROF(i, 19, 19 - n + 1)
			a[i] = a[n + i - 19];

		FOR(i, 1, 19 - n) a[i] = 0;

		if(f(1, 19, 0, 0))
		{
			print(1, 19, 0, 0);

			bool flag;

			FOR(i, 1, 6)
			{
				flag = 0;

				FOR(j, 1, 19)
				{
					flag |= table[i][j];

					if(flag)
						cout << table[i][j];
				}

				if(!flag)
					cout << 0;

				cout << ' ';
			}

			cout << endl;
		}
		else
			cout << -1 << endl;
	}
	
	TIME;
	
	return 0;

}
