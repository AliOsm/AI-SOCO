#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

int N,K;
string s[2010];
int common[2010];

int ID;
int id[2010][2010],middle[2010][2010];
int dp[4010][2010]; // segment id, cnt

void dfs(int L, int R){
    id[L][R] = ID;
    ID++;
    
    if(R-L > 1){
        int M = middle[L][R];
        dfs(L,M);
        dfs(M,R);
    }
}

void func(int t, int L, int R){
    int i,j;
    
    if(R-L == 1) return;
    
    int M = middle[L][R];
    func(id[L][M], L, M);
    func(id[M][R], M, R);
    int t1 = id[L][M], t2 = id[M][R];
    
    REP(i,M-L+1) REP(j,R-M+1){
        int tmp = dp[t1][i] + dp[t2][j] + i * j * common[M-1];
        dp[t][i+j] = max(dp[t][i+j],tmp);
    }
}

int main(void){
    int i,j;
    
    cin >> N >> K;
    REP(i,N) cin >> s[i];
    
    sort(s,s+N);
    REP(i,N-1){
        for(j=0;;j++) if(j >= s[i].length() || j >= s[i+1].length() || s[i][j] != s[i+1][j]) break;
        common[i] = j;
    }
    
//  REP(i,N-1) cout << common[i] << endl;

    REP(i,N-2+1){
        middle[i][i+2] = i+1;
        for(j=i+3;j<=N;j++){
            middle[i][j] = middle[i][j-1];
            if(common[j-2] < common[middle[i][j]-1]) middle[i][j] = j-1;
        }
    }

    REP(i,N+1) REP(j,N+1) id[i][j] = -1;
    dfs(0,N);
    func(0,0,N);
    
    cout << dp[0][K] << endl;
    
    return 0;
}
