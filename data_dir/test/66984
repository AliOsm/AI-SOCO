//  Copyright Â© 2020 Diego Garcia Rodriguez del Campo. All rights reserved.
#include<bits/stdc++.h>
#define MAX 85
#define pii pair < int , int >
#define fi first
#define se second
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
using namespace std;
typedef long long i64;

int N, M;
pii a[MAX];
bool vis[MAX][100005];
int memo[MAX][100005];

int dp( int n , int m ) {
    if( m > M )
        return 0;
    if( n > N )
        return M - m + 1;
    if( vis[n][m] ) 
        return memo[n][m];
    int ans = dp( n + 1 , m );
    // estoy en el sin 
    int ln = a[n].fi - a[n].se;
    int rn = a[n].fi + a[n].se;
    if( m >= ln && m <= rn )
        ans = min( ans , dp( n , rn + 1 ) );
    else if( m < ln ) {
        int dist = ln - m;
        ans = min( ans , dp( n + 1 , rn + dist + 1 ) + dist );
    }
    else {
        int dist = m - rn;
        ans = min( ans , dp( n + 1 , m + 1 ) + dist );
    }
    vis[n][m] = 1;
    return memo[n][m] = ans;
}

int main()
{
    optimiza_io
    cin >> N >> M;
    for( int i = 1; i <= N; i ++ ) 
        cin >> a[i].fi >> a[i].se;
    
    sort( a + 1 , a + N + 1 );
    cout << dp( 1 , 1 );
    return 0;
}

// CHECAR LIMITES 