#include <bits/stdc++.h>
using namespace std;
const int limN = 1005;
const int limD = 4;
#define par pair<int,int>
#define r first
#define c second
#define tri pair <int, par>
#define kva pair <int, tri>
const int dr[] = {-1, 0, 1, 0};
const int dc[] = {0, 1, 0, -1};

int rows, cols;
char mapa[limN][limN];
int minP[limN][limN][limD];

inline bool isValidPos(par pos) {
    return 0 <= pos.r && pos.r < rows && 0 <= pos.c && pos.c < cols && mapa[pos.r][pos.c]!='*';
}

void dijkstra(par iniPos) {
    priority_queue <kva> Q;
    // cout << minP[0][0][0] << endl;
    for(int d=0; d<4; d++) {
        Q.push(kva(-1, tri(d, iniPos)));
        minP[iniPos.r][iniPos.c][d] = 1;
    }
    while( !Q.empty() ) {
        int dst = -Q.top().first;
        int dir = Q.top().second.first;
        par pos = Q.top().second.second;
        Q.pop();
        if( dst > minP[pos.r][pos.c][dir] || dst>3)
            continue;
        // printf("%d %d (%d) => %d\n", pos.r, pos.c, dir, dst);
        //minP[pos.r][pos.c][dir] = dst;
        for(int d=0; d<limD; d++) {
            par sig = par(pos.r + dr[d], pos.c + dc[d]);
            int nd = dst + ((d!=dir)? 1 : 0);
            // printf("%d %d (%d) => %d (%d)\n", sig.r, sig.c, d, minP[pos.r][pos.c][dir], nd);
            if(!isValidPos(sig) || minP[sig.r][sig.c][d] <= nd)
                continue ;
            minP[sig.r][sig.c][d] = nd;
            Q.push( kva( -nd, tri(d, sig) ) );
        }
    }
}

int main() {
    par iniPos = par(0, 0), finPos = iniPos;
    
    scanf("%d%d", &rows, &cols);
    for(int i=0; i<rows; i++) {
        scanf("%s", mapa[i]);
        for(int j=0; j<cols; j++) {
            if(mapa[i][j]=='S') {
                iniPos = par(i, j);
                mapa[i][j] = '.';
            }
            else if(mapa[i][j]=='T') {
                finPos = par(i, j);
                mapa[i][j] = '.';
            }
            for(int d=0; d<4; d++)
                minP[i][j][d] = 55;
        }
    }

    dijkstra(iniPos);
    for(int d=0; d<4; d++) {
        if(minP[finPos.r][finPos.c][d]>0 && minP[finPos.r][finPos.c][d] <= 3) {
            printf("YES\n");
            return 0;
        }
    }
    printf("NO\n");
    
    return 0;
}
