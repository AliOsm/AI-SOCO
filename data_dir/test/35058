//satyaki3794
#include <bits/stdc++.h>
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define LEFT(n) (2*(n))
#define RIGHT(n) (2*(n)+1)

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;

ll pwr(ll base, ll p, ll mod = MOD){
ll ans = 1;while(p){if(p&1)ans=(ans*base)%mod;base=(base*base)%mod;p/=2;}return ans;
}


ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}



int n, next_one[80], DP[75][1<<20];
bool valid[1<<22];
string str;

int value(int i, int len){
    if(i+len-1 >= n)    return -1;
    int x = 0;
    for(int j=i;j<i+len;j++)
        x = x*2 + str[j]-'0';
    if(x > 20)  return -1;
    return x-1;
}


int dp(int i, int mask){

    if(i == n){
// cout<<"dp "<<i<<" "<<mask<<" returns "<<valid[mask]<<endl;
        return valid[mask];
    }
    int &ans = DP[i][mask];
    if(ans != -1)   return ans;

    ans = 0;

    if(str[i] == '0'){
        if(next_one[i] != -1){
            ans += dp(next_one[i], mask);
            ans %= MOD;
        }
        else if(valid[mask]){
            ans++;
            ans %= MOD;
        }
// cout<<"dp "<<i<<" "<<mask<<" returns "<<ans<<endl;
        return ans;
    }


    if(valid[mask]){
        //can end here
        ans++;
        ans %= MOD;
    }


    for(int len=1;len<=5;len++){
        int z = value(i, len);
        if(z != -1){
            ans += dp(i+len, mask|(1<<z));
            ans %= MOD;
        }
    }

// cout<<"dp "<<i<<" "<<mask<<" returns "<<ans<<endl;
    return ans;
}



int main(){

    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin>>n>>str;

    for(int mask=1;mask<=(1<<20)-1;mask=mask*2+1)
        valid[mask] = true;

// cout<<"valid: ";for(int i=0;i<=20;i++)  if(valid[i])    cout<<i<<" ";cout<<endl;

    int last = -1;
    for(int i=n-1;i>=0;i--){
        next_one[i] = last;
        if(str[i] == '1')   last = i;
    }

    memset(DP, -1, sizeof(DP));
// dp(1, 1);
    ll ans = 0;
    for(int i=0;i<n;i++){
        ans = (ans + dp(i, 0)) % MOD;
    // break;
    }
    cout<<ans;
    return 0;
}




