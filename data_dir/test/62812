#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

class team {
	public:
	
	string name;
	int points;
	int gDiff;
	int gFor;
	int games;
};

bool sorter(const team &t1, const team &t2) {
	if (t1.points != t2.points) return t1.points < t2.points;
	if (t1.gDiff != t2.gDiff) return t1.gDiff < t2.gDiff;
	if (t1.gFor != t2.gFor) return t1.gFor < t2.gFor;
	return t1.name > t2.name;
}

int main() {
	srand (time(NULL));
    ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	vector<team> teams;
	FOR (i, 0, 5) {
		next(string, s1);
		next(string, s2);
		int i1 = 0;
		while (i1 < teams.size() && teams[i1].name != s1) i1++;
		if (i1 == teams.size()) {
			teams.resize(teams.size() + 1);
			teams.back().points = 0;
			teams.back().gDiff = 0;
			teams.back().gFor = 0;
			teams.back().name = s1;
			teams.back().games = 0;
		}
		int i2 = 0;
		while (i2 < teams.size() && teams[i2].name != s2) i2++;
		if (i2 == teams.size()) {
			teams.resize(teams.size() + 1);
			teams.back().points = 0;
			teams.back().gDiff = 0;
			teams.back().gFor = 0;
			teams.back().name = s2;
			teams.back().games = 0;
		}
		next(string, res);
		int g1 = res[0] - '0';
		int g2 = res[2] - '0';
		if (g1 > g2) teams[i1].points += 3;
		else if (g1 < g2) teams[i2].points += 3;
		else {
			teams[i1].points++;
			teams[i2].points++;
		}
		teams[i1].gFor += g1;
		teams[i2].gFor += g2;
		teams[i1].gDiff += g1 - g2;
		teams[i2].gDiff += g2 - g1;
		teams[i1].games++;
		teams[i2].games++;
	}
	
	auto result  = make_pair(1, make_pair(0, 0));
	
	string berland = "BERLAND";
	int j1 = 0;
	while (teams[j1].name != berland) j1++;
	int j2 = 0;
	while (teams[j2].name == berland || teams[j2].games == 3) j2++;
	teams[j1].points += 3;
	
	FOR (x, 0, 100) FOR (y, 0, x) { 
		vector<team> teams2(teams);
		teams2[j1].gFor += x;
		teams2[j1].gDiff += x - y;
		teams2[j2].gFor += y;
		teams2[j2].gDiff += y - x;
		
		sort(all(teams2), sorter);

		if (teams2[2].name == berland || teams2[3].name == berland) {
			minimize(result, make_pair(0, make_pair(x - y, y)));
		}
	}
	
	if (result.first == 1) cout << "IMPOSSIBLE";
	else cout << result.second.second + result.second.first << ':' << result.second.second;
}