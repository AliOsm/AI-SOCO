#include<bits/stdc++.h>
#define si(x) scanf("%d",&x)
#define sii(x,y) scanf("%d %d",&x,&y)
#define siii(x,y,z) scanf("%d %d %d",&x,&y,&z)
#define su(x) scanf("%u",&x)
#define sl(x) scanf("%ld",&x)
#define sli(x) scanf("%lld",&x)
#define slii(x,y) scanf("%lld %lld",&x,&y)
#define sliii(x,y,z) scanf("%lld %lld %lld",&x,&y,&z)
#define slu(x) scanf("%llu",&x)
#define sf(x) scanf("%f",&x)
#define slf(x) scanf("%lf",&x)
#define sc(x) scanf("%c",&x)
#define ss(x) scanf("%s",x)
#define pf printf
#define fpf fprintf
#define rn return
#define br break
#define cn continue
#define pb push_back
#define f(i,x,y,z) for(ll i=x;i<y;i=i+z)
#define f1(i,x,y,z) for(ll i=x;i>y;i=i-z)
#define MAX 100000000
#define pi 3.1415926535
#define mp make_pair
#define M 32
#define xx first
#define yy second
#define N 200005
#define E 100005
#define vc vector
#define pq priority_queue
#define Q queue


using namespace std;

typedef long long int ll;
typedef unsigned long long int lu;

struct inf
{
    ll v, p, c, f;
};

struct tree
{
    ll v,i;
};

tree tr[4*N];
inf ar[N];

void seT(ll i, ll v, ll f, ll p, ll c)
{
    ar[i].v = v;
    ar[i].f = f;
    ar[i].p = p;
    ar[i].c = c;
}

void init(ll n, ll b, ll e)
{
    if(b>e) return;
    if(b==e)
    {
        tr[n].v = ar[b].f;
        tr[n].i = b;
        return;
    }
    ll l, r, m;
    m = ((b+e)>>1);
    l = 1+(n<<1);
    r = l+1;
    init(l,b,m);
    init(r,m+1,e);
    if(tr[l].v>=tr[r].v) tr[n] = tr[l];
    else tr[n] = tr[r];
}

void update(ll n, ll b, ll e,ll i, ll v)
{
    if(b>e || i<b || i>e) return;
    if(b==e)
    {
        tr[n].v = v;
        return;
    }
    ll l, r, m;
    m = ((b+e)>>1);
    l = (n<<1)+1;
    r = l+1;
    update(l,b,m,i,v);
    update(r,m+1,e,i,v);
    if(tr[l].v>=tr[r].v) tr[n] = tr[l];
    else tr[n] = tr[r];
}

tree get(ll n, ll b, ll e)
{
    if(b==e) return tr[n];
    ll l, r, m;
    m = ((b+e)>>1);
    l = (n<<1)+1;
    r = l+1;
    if(tr[l].v>=tr[r].v) return get(l,b,m);
    else return get(r,m+1,e);
}

void pp(ll i)
{
    cout<<ar[i].v<<" "<<ar[i].f<<" "<<ar[i].p<<" "<<ar[i].c<<endl;
}

int main()
{
    tree tmp;
    ll n, a, ans, p, c, j;
    sli(n);
    sli(a);
    ///f(i,0,N,1) ar[i].f = 0;
    seT(0,a,1,-1,1);
    j = 0;
    f(i,1,n,1)
    {
        sli(a);
        if(ar[j].v==a) ar[j].f++;
        else
        {
            j++;
            seT(j,a,1,j-1,j+1);
        }
    }

    init(0,0,j);
    ans = 0;
    while(1)
    {
        tmp = get(0,0,j);
        if(tmp.v<=0) break;
        ans++;
        ar[tmp.i].f = 0;
        update(0,0,j,tmp.i,0);
        p = ar[tmp.i].p;
        c = ar[tmp.i].c;
        if(p>=0 && c<=j && ar[p].v==ar[c].v)
        {
            ar[p].c = ar[c].c;
            ar[ar[c].c].p = p;
            ar[p].f += ar[c].f;
            update(0,0,j,p,ar[p].f);
            ar[c].f = 0;
            update(0,0,j,c,0);

        }
        else
        {
            if(p>=0)
            {
                ar[p].c = c;
            }
            if(c<=j)
            {
                ar[c].p = p;
            }
        }
    }
    pf("%lld\n",ans);
    return 0;
}
