#include <bits/stdc++.h>
using namespace std;
#define pb  push_back
#define ll  long long
#define vi  vector<ll >
#define vvi vector<vi >
#define all(x) x.begin(), x.end()

struct pt {
    string s;
    int num, c;
    pt() {};
};
bool operator<(pt a, pt b) { return a.num < b.num; }

int n;
vector<pt> v, x, y, p, q;
set<char> se;

int main() {
    ios_base::sync_with_stdio(false);
    se.insert('a');
    se.insert('e');
    se.insert('o');
    se.insert('i');
    se.insert('u');
    cin >> n;
    v.resize(n);
    for (int i = 0; i < n; ++i) {
        string t; cin >> t;
        v[i].s = t;
        v[i].num = 0;
        for (int j = 0; j < t.length(); ++j) {
            if (!se.count(t[j])) continue;
            ++v[i].num;
            v[i].c = t[j] - 'a';
        }
    }
    vector<vector<pt> > w(26);
    for (int i = 0; i < n; ++i)
        w[v[i].c].pb(v[i]);
    for (int i = 0; i < 26; ++i) {
        sort(all(w[i]));
        for (int j = 0; j < w[i].size(); ++j) {
            if (j + 1 < w[i].size() && w[i][j].num == w[i][j + 1].num) {
                x.pb(w[i][j]); y.pb(w[i][j + 1]);
                w[i][j].c = -1;
                w[i][j + 1].c = -1;
                ++j;
            }
        }
    }
    v.clear();
    for (int i = 0; i < 26; ++i) {
        for (int j = 0; j < w[i].size(); ++j) {
            if (w[i][j].c != -1)
                v.pb(w[i][j]);
        }
    }
    sort(all(v));
    for (int j = 0; j < v.size(); ++j) {
        if (j + 1 < v.size() && v[j].num == v[j + 1].num) {
            p.pb(v[j]); q.pb(v[j + 1]);
            ++j;
        }
    }
    while (p.size() > x.size()) {
        p.pop_back();
        q.pop_back();
    }
    if ((x.size() + p.size()) % 2 != 0) {
        x.pop_back();
        y.pop_back();
    }
    cout << (x.size() + p.size()) / 2 << endl;
    while (x.size() + p.size() > 0) {
        if (p.size()) {
            cout << p.back().s << " " << x.back().s << "\n";
            cout << q.back().s << " " << y.back().s << "\n";
            p.pop_back();
            q.pop_back();
            x.pop_back();
            y.pop_back();
        }
        else {
            cout << x.back().s << " " << x[x.size() - 2].s << "\n";
            cout << y.back().s << " " << y[y.size() - 2].s << "\n";
            x.pop_back();
            y.pop_back();
            x.pop_back();
            y.pop_back();
        }
    }

    return 0;
}
