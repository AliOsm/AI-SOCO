#include<stdio.h>
#include<iostream>
#include<string.h>
#include<string>
#include<ctype.h>
#include<math.h>
#include<set>
#include<map>
#include<vector> 
#include<queue>
#include<bitset>
#include<algorithm>
#include<time.h>
using namespace std;
void fre() { freopen("c://test//input.in", "r", stdin); freopen("c://test//output.out", "w", stdout); }
#define MS(x, y) memset(x, y, sizeof(x))
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T1, class T2>inline void gmax(T1 &a, T2 b) { if (b > a)a = b; }
template <class T1, class T2>inline void gmin(T1 &a, T2 b) { if (b < a)a = b; }
const int N = 205, M = N * N * 8, Z = 1e9 + 7, inf = 0x3f3f3f3f;
template <class T1, class T2>inline void gadd(T1 &a, T2 b) { a = (a + b) % Z; }
int casenum, casei;
int n;
int b[N];
char s[N];
int cnt[128];
int ST, ED;
int first[N], id;
int w[M], nxt[M], cap[M], cost[M];
LL f[N];
bool e[N];
void ins(int x, int y, int cap_, int cost_)
{
	w[++id] = y;
	cap[id] = cap_;
	cost[id] = cost_;
	nxt[id] = first[x];
	first[x] = id;

	w[++id] = x;
	cap[id] = 0;
	cost[id] = -cost_;
	nxt[id] = first[y];
	first[y] = id;
}
queue<int>q;
void inq(int x, LL cost_)
{
	if (cost_ >= f[x])return;
	f[x] = cost_;
	if (e[x])return; e[x] = 1;
	q.push(x);
}
bool spfa()
{
	MS(f, 63); MS(e, 0);
	cap[0] = inf;
	inq(ST, 0);
	while (!q.empty())
	{
		int x = q.front(); q.pop(); e[x] = 0;
		for (int z = first[x]; z; z = nxt[z])
		{
			if (cap[z])
			{
				inq(w[z], f[x] + cost[z]);
			}
		}
	}
	return f[ED] < inf;
}
bool vis[N];
int dfs(int x, int all)
{
	if (x == ST)return all;
	int use = 0;
	vis[x] = 1;
	for (int z = first[x]; z; z = nxt[z])if (cap[z ^ 1])
	{
		int y = w[z];
		if (!vis[y] && f[y] + cost[z ^ 1] == f[x])
		{
			int tmp = dfs(y, min(cap[z ^ 1], all - use));
			cap[z ^ 1] -= tmp;
			cap[z] += tmp;
			use += tmp;
			if (use == all)break;
		}
	}
	return use;
}
int MCMF()
{
	int maxflow = 0;
	LL mincost = 0;
	while (spfa())
	{
		int flow;
		while (MS(vis, 0), flow = dfs(ED, inf))
		{
			maxflow += flow;
			mincost += f[ED] * flow;
		}
	}
	return mincost;
}
int main()
{
	while (~scanf("%d", &n))
	{
		scanf("%s", s);
		MS(cnt, 0);
		for (int i = 0; i < n; ++i)
		{
			scanf("%d", &b[i]);
			++cnt[s[i]];
		}
		MS(first, 0); id = 1;
		ST = 198;
		ED = 199;
		for (int i = 'a'; i <= 'z'; ++i)
		{
			ins(ST, i, cnt[i], 0);
			for (int j = 0; j < n / 2; ++j)
			{
				int val = 0;
				if (s[j] == i)gmax(val, b[j]);
				if (s[n - 1 - j] == i)gmax(val, b[n - 1 - j]);
				ins(i, j, 1, -val);
			}
		}
		for (int j = 0; j < n / 2; ++j)
		{
			ins(j, ED, 2, 0);
		}
		printf("%d\n", -MCMF());
	}
	return 0;
}
/*
【trick&&吐槽】


【题意】


【分析】


【时间复杂度&&优化】


【数据】


*/