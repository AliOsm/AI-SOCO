#include <bits/stdc++.h>
#define f first
#define s second
#define pb push_back
#define pii pair<int, int>
#define endl '\n'
#define vi vector<int>
#define vvi vector<vi>
#define pii pair<int, int>
#define vpii vector<pii>
#define vvpii vector<vpii>
typedef long long ll;
typedef long double ld;
using namespace std;
template<class T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> void setmax(T& a, T b) { a = max(a, b); };
template<typename T> void setmin(T& a, T b) { a = min(a, b); };
template<typename T> bool in(T v, T lo, T hi) { return lo <= v && v <= hi; };
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

const int N = 1e5 + 10;
int n, m, rt;
int depth[N], marked[N];
vi g[N];
vi path;

void dfs(int x) {
  path.pb(x);
  depth[x] = path.size();
  for (int y : g[x]) {
    if (depth[y] == 0) {
      dfs(y);
    } else if (depth[x] - depth[y] + 1 >= rt) {
      cout << 2 << endl;
      cout << depth[x] - depth[y] + 1 << endl;
      for (int i = depth[y] - 1; i < path.size(); i++) {
        cout << path[i] << " ";
      }
      cout << endl;
      exit(0);
    }
  }
  if (!marked[x]) {
    for (int y : g[x]) {
      marked[y] = 1;
    }
  }
  path.pop_back();
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0); cout.tie(0);

  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    int u, v;
    cin >> u >> v;
    g[u].pb(v);
    g[v].pb(u);
  }

  while (rt * rt < n)
    ++rt;

  dfs(1);

  cout << 1 << endl;
  for (int i = 1; rt; i++) {
    if (!marked[i]) {
      cout << i << " ";
      rt--;
    }
  }
  return 0;
}