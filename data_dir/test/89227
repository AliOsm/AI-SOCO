#include<bits/stdc++.h>
#define lc (p<<1)
#define rc ((p<<1)|1)
using namespace std;
typedef long long ll;
template<int N,int M>
class matrix
{
	public:
		ll dat[N][M];
		void init()
		{
			for(int i=0;i<N;i++)fill(dat[i],dat[i]+M,-1e15);
		}
		ll* operator [](int x)
		{
			return dat[x];
		}
		const ll* operator [](const int &x)const
		{
			return dat[x];
		}
		template<int X>
		friend matrix<N,M> operator *(const matrix<N,X> &a,const matrix<X,M> &b)
		{
			matrix<N,M> ret;
			ret.init();
			for(int i=0;i<N;i++)
			{
				for(int j=0;j<X;j++)
				{
					for(int k=0;k<M;k++)
					{
						ret[i][k]=max(ret[i][k],a[i][j]+b[j][k]);
					}
				}
			}
			return ret;
		}
		void debug()
		{
			for(int i=0;i<N;i++)
			{
				for(int j=0;j<M;j++)printf("%lld ",dat[i][j]);
				puts("");
			}
		}
};
matrix<3,3> t[30010<<2],bas[30010];
int q,n;
class rider
{
	public:
		int id,a,b;
		bool operator <(const rider &t)const
		{
			return a<t.a;
		}
}r[30010];
int pos[30010],a[30010],p[30010];
inline int cmp(const rider &a,const rider &b)
{
	return a.b<b.b;
}
const int perm[6][3]=
{
	{0,1,2},
	{0,2,1},
	{1,0,2},
	{1,2,0},
	{2,0,1},
	{2,1,0}
};
void modify(int p,int l,int r,int pos)
{
	if(l==r)
	{
		t[p].init();
		t[p][1][0]=0;
		t[p][2][1]=0;
		if(::r[l+2].id!=::pos[l+2])t[p][2][2]=1ll*a[l+2]*::r[l+2].b;
		if(::r[l+1].id!=::pos[l+2]&&::r[l+2].id!=::pos[l+1])t[p][1][2]=1ll*a[l+2]*::r[l+1].b+1ll*a[l+1]*::r[l+2].b;
		for(int x=0;x<6;x++)
		{
			bool flag=1;
			for(int i=0;i<3;i++)
			{
				if(::pos[l+i]==::r[l+perm[x][i]].id)
				{
					flag=0;
					break;
				}
			}
			if(flag)
			{
				ll cur=0;
				for(int i=0;i<3;i++)cur+=1ll*a[l+i]*::r[l+perm[x][i]].b;
				t[p][0][2]=max(t[p][0][2],cur);
			}
		}
		bas[l]=t[p];
		return;
	}
	int mid=(l+r)>>1;
	if(pos<=mid)modify(lc,l,mid,pos);
	else modify(rc,mid+1,r,pos);
	t[p]=t[lc]*t[rc];
}
int main()
{
	scanf("%d%d",&n,&q);
	for(int i=1;i<=n;i++)scanf("%d",&r[i].a),r[i].id=i;
	for(int i=1;i<=n;i++)scanf("%d",&r[i].b);
	sort(r+1,r+n+1);
	for(int i=1;i<=n;i++)pos[i]=r[i].id,a[i]=r[i].a;
	sort(r+1,r+n+1,cmp);
	for(int i=1;i<=n;i++)p[r[i].id]=i;
	for(int i=1;i<=n-2;i++)modify(1,1,n-2,i);
	while(q--)
	{
		int x,y;
		scanf("%d%d",&x,&y);
		swap(r[p[x]].id,r[p[y]].id);
		swap(p[x],p[y]);
		for(int i=max(p[x]-2,1);i<=min(p[x]+2,n-2);i++)modify(1,1,n-2,i);
		for(int i=max(p[y]-2,1);i<=min(p[y]+2,n-2);i++)modify(1,1,n-2,i);
		matrix<1,3> st;
		st.init();
		st[0][0]=0;
		if(pos[1]!=r[1].id)st[0][1]=st[0][0]+1ll*a[1]*r[1].b;
		if(pos[2]!=r[2].id)st[0][2]=st[0][1]+1ll*a[2]*r[2].b;
		if(pos[2]!=r[1].id&&pos[1]!=r[2].id)st[0][2]=max(st[0][2],1ll*a[1]*r[2].b+1ll*a[2]*r[1].b);
		st=st*t[1];
		printf("%lld\n",st[0][2]);
//		for(int i=1;i<=n-2;i++)
//		{
//			st=st*bas[i];
//			st.debug();
//		}
//		puts("----");
	}
	return 0;
}