/*input
2 2 1
1 1
2 1 1



*/

#include <iostream>
#include <iomanip>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include <algorithm>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> PII;
typedef pair<ll , ll> PLL;
typedef long double ld;

#define pb push_back
#define all(c) c.begin(),c.end()
#define allr(c) c.rbegin(),c.rend()
int mod = 1000000007;
const int INF = 1034567891;
const ll LL_INF = 1234567890123456789ll;
#define PI 3.14159265
#define endl '\n'
#define F first
#define S second
#define debug(x) cout << #x << " = " << x << endl;
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cout << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

#define out(container) for (auto it : container) cout << it << " "; cout << endl;


template < typename T > T GCD(T a, T b)            { ll t; while(a) { t = a; a = b % a; b = t; } return b; }
template < typename T > string toString(T a)       { return to_string(a); }
template < typename T > void toInt(string s, T &x) { stringstream str(s); str >> x;}
inline int add(int x, int y){ x += y; if(x >= mod) x -= mod; return x;}
inline int sub(int x, int y){ x -= y; if(x < 0) x += mod; return x;}
inline int mul(int x, int y){ return (x * 1ll * y) % mod;}
inline int powr(int a, ll b){
  int x = 1 % mod;
  while(b){
    if(b & 1) x = mul(x, a);
    a = mul(a, a);
    b >>= 1;
  }
  return x;
}
inline int inv(int a){ return powr(a, mod - 2);}

const int N = 1 << 18 + 1;
int n, m, k;
int sat[19], arr[19][19];
ll dp[19][N];

ll fun(int tm, int cur, int prev) {
  if (tm == m) {
    return 0;
  }
  if (dp[prev][cur] != -1) {
    return dp[prev][cur];
  }
  ll ans = 0;
  for (int i = 1; i <= n; i++) {
    if (!(cur & (1 << i))) {
      ans = max(ans, sat[i] + arr[prev][i] + fun(tm + 1, cur ^ (1 << i), i));
    }
  }
  return dp[prev][cur] = ans;
}

int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);  

  cin >> n >> m >> k;
  for (int i = 1; i <= n; i++)
    cin >> sat[i];
  int x, y, c;
  for (int i = 0; i < k; i++) {
    cin >> x >> y >> c;
    arr[x][y] = c;
  }
  memset(dp, -1, sizeof(dp));
  ll ans = fun(0, 0, 0);
  cout << ans << endl;

  return 0;
}