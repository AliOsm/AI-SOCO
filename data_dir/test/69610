#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef vector<pii> vii;
typedef vector<bool> vb;
typedef vector<string> vs;

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	//ofstream cout("output.txt");
	int n; cin >> n;
	vi monbf(n);
	for (int i = 0; i < n; i++)
		cin >> monbf[i];
	int k; cin >> k;
	vi monaf(k);
	for (int i = 0; i < k; i++)
		cin >> monaf[i];
	int csum = 0, pi = 0;
	vi l(k), r(k);
	l[pi] = 0;
	bool wrong = false;
	for (int i = 0; i < n; i++)
	{
		if (pi == k)
		{
			wrong = true;
			break;
		}
		if (csum < monaf[pi])
			csum += monbf[i];
		if (csum == monaf[pi])
		{
			r[pi] = i;
			csum = 0, pi++;
			if (pi < k)
				l[pi] = i + 1;
		}
		else if (csum > monaf[pi])
		{
			wrong = true;
			break;
		}
	}
	if (wrong) { cout << "NO" << endl; return 0; }

	vector<pair<int, char>> res;
	for (int i = k - 1; i >= 0; i--)
	{
		if (l[i] == r[i]) continue;
		int mx = 0;
		for (int j = l[i]; j <= r[i]; j++)
			mx = max(mx, monbf[j]);
		vi mxsi;
		for (int j = l[i]; j <= r[i]; j++)
			if (monbf[j] == mx)
				mxsi.push_back(j);
		int fn = -1;
		char fd = 'N';
		for (int j = 0; j < mxsi.size() && fn == -1; j++)
		{
			if (mxsi[j] > l[i] && monbf[mxsi[j]] > monbf[mxsi[j] - 1])
				fn = mxsi[j], fd = 'L';
			else if (mxsi[j] < r[i] && monbf[mxsi[j]] > monbf[mxsi[j] + 1])
				fn = mxsi[j], fd = 'R';
		}
		if (fn == -1) { wrong = true; break; }

		res.push_back(make_pair(fn, fd));
		if (fd == 'R')
		{
			for (int j = fn + 1; j < r[i]; j++)
				res.push_back(make_pair(fn, 'R'));
			for (int j = fn; j > l[i]; j--)
				res.push_back(make_pair(j, 'L'));
		}
		else if (fd == 'L')
		{
			for (int j = fn; j < r[i]; j++)
				res.push_back(make_pair(fn - 1, 'R'));
			for (int j = fn - 1; j > l[i]; j--)
				res.push_back(make_pair(j, 'L'));
		}
	}
	if (wrong)
		cout << "NO" << endl;
	else
	{
		cout << "YES" << endl;
		for (int i = 0; i < res.size(); i++)
			cout << res[i].first + 1 << " " << res[i].second << endl;
	}
	//cin.ignore(), cin.get();
}