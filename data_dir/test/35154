#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

const int inf = 1 << 29;

vector<int> primes;
int arr[100100];
int grid[510][510];
int getcost(int a) {
    vector<int>::iterator it = lower_bound(primes.begin(), primes.end(), a);
    return *it - a;
}

int main() {
    primes.push_back(-inf);
    for (int i = 2; i < 100100; i++) {
        if (!arr[i]) {
            primes.push_back(i);
            for (int j = i * 2; j < 100100; j += i) {
                arr[j] = true;
            }
        }
    }
    primes.push_back(inf);
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> grid[i][j];
            grid[i][j] = getcost(grid[i][j]);
        }
    }
    int ans = 1 << 29;
    for (int i = 0; i < n; i++) {
        int cost = 0;
        for (int j = 0; j < m; j++) {
            cost += grid[i][j];
        }
        ans = min(ans, cost);
    }
    for (int i = 0; i < m; i++) {
        int cost = 0;
        for (int j = 0; j < n; j++) {
            cost += grid[j][i];
        }
        ans = min(ans, cost);
    }
    cout << ans;
}
