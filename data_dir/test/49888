/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, m, sz1, sz2;
vector<ll> vec;

int main() {
    fast_io;

    cin >> n >> m;
    for (ll i = 0; i < 7; i++) vec.push_back(i);

    ll x = n - 1;
    while (x) x /= 7, sz1++;
    x = m - 1;
    while (x) x /= 7, sz2++;

    sz1 = max(1LL, sz1);
    sz2 = max(1LL, sz2);
    if (sz1 + sz2 > 7) return cout << 0 << endl, 0;
    set<pll> ans;
    do {
        ll A = 0, B = 0;
        for (ll i = 0; i < sz1; i++) A = (A * 7) + vec[i];
        for (ll i = sz1; i < sz1 + sz2; i++) B = (B * 7) + vec[i];
        if (A < n && B < m) ans.insert({A, B});
    } while (next_permutation(all(vec)));

    cout << SZ(ans) << endl;

    return 0;
}
/*

*/
