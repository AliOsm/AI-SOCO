#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("input.txt");ofstream out("output.txt");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

str t;
vec<vec<vec<vec<int>>>> dp;

void bfs(int x, int y, int s){
    for(int q=0; q<10; q++) dp[x][y][s][q] = -1;
    deque<int> d; d.pb(s);
    int sz = 1, cnt=0, dst=0;
    for(; d.size(); cnt++){
        if(cnt==sz) cnt=0, sz = d.size(), dst++;
        int c = d.front(); d.pop_front();
        if(dp[x][y][s][(c+x)%10]==-1) dp[x][y][s][(c+x)%10] = dst+1, d.pb((c+x)%10);
        if(dp[x][y][s][(c+y)%10]==-1) dp[x][y][s][(c+y)%10] = dst+1, d.pb((c+y)%10);
    }
}

int main(){
    fast;
    cin>>t;
    dp = vec<vec<vec<vec<int>>>>(10, vec<vec<vec<int>>>(10, vec<vec<int>>(10, vec<int>(10))));
    for(int q=0; q<10; q++){
        for(int w=0; w<10; w++){
            for(int e=0; e<10; e++) bfs(q,w,e);
        }
    }
    int a = t.size();
    vec<int> m(a);
    for(int q=0; q<a; q++) m[q] = t[q]-'0';
    for(int q=0; q<10; q++){
        for(int w=0; w<10; w++){
            int o = 0;
            for(int e=1; e<a; e++){
                if(dp[q][w][m[e-1]][m[e]]==-1){o=-1; break;}
                o+=max(0,dp[q][w][m[e-1]][m[e]]-1);
            }
            cout<<o<<" ";
        }
        cout<<"\n";
    }
}