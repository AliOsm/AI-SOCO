#include <bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>/
// #include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 998244353LL
#define IN freopen("nocross.in","r",stdin)
#define OUT freopen("nocross.out","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG printf("Hi\n")
#define INF 2000000000000000000LL
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 2
#define SZ(z) ((int)z.size())

#define FastIO ios_base::sync_with_stdio(false); cin.tie(NULL)


// using namespace __gnu_pbds;
using namespace std ;

// typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define maxn 300005

i64 gcd(i64 a, i64 b)
{
    if(b==0) return a ;
    return gcd(b,a%b) ;
}

i64 Get(i64 cur, i64 x , i64 y, i64 m , i64 to)
{
    for(int i=1 ; i<=m ; i++)
    {
        cur = (cur*x + y)%m ;
        if(cur==to) return i ;
    }
    return -1 ;
}

int main()
{
    i64 x1, y1 , x2,y2,m,h1,h2,a1,a2 ;

    scanf("%lld",&m) ;

    scanf("%lld %lld",&h1,&a1) ;
    scanf("%lld %lld",&x1,&y1) ;

    scanf("%lld %lld",&h2,&a2) ;
    scanf("%lld %lld",&x2,&y2) ;

    i64 k1 = Get(h1,x1,y1,m,a1) , k2 = Get(h2,x2,y2,m,a2) ;

    i64 d1 = Get(a1,x1,y1,m,a1) , d2 = Get(a2,x2,y2,m,a2) ;

    if(k1==-1 || k2==-1)
    {
        printf("-1\n") ;
        return 0 ;
    }

    if(k1==k2)
    {
        printf("%lld\n",k1) ;
        return 0;
    }

    if( (d1!=-1 && (k2-k1)%d1==0 && k2>k1) || (d2!=-1 && (k1-k2)%d2==0 && k1>k2) )
    {
        printf("%lld\n", max(k1,k2) );
        return 0 ;
    }

    if( d1==-1 || d2==-1)
    {
        printf("-1\n") ;
        return 0 ;
    }

    if( d1==0 || d2==0 )
    {
        printf("%lld\n",max(k1,k2)) ;
        return 0 ;
    }

    i64 g = gcd(d1,d2) ;

    if( abs(k1-k2)%g != 0 )
    {
        printf("-1\n") ;
        return 0 ;
    }

    for(int i=0 ;  ; i++)
    {
        if( k1+i*d1 >= k2 && (k1+i*d1 -k2)%d2==0 )
        {
            printf("%lld\n" , k1+i*d1 ) ;
            return 0 ;
        }
    }

    return 0 ;
}
