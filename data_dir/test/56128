#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define DEBUG
#ifdef DEBUG
#define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
	template <typename Arg1>
	void __f(const char* name, Arg1&& arg1)
	{
		cerr << name << " = " << arg1 << endl;
	}
	template <typename Arg1, typename... Args>
	void __f(const char* names, Arg1&& arg1, Args&&... args)
	{
		const char* comma = strchr(names + 1, ','); cerr.write(names, comma - names) << " = " << arg1 << " || ";
		__f(comma+1, args...);
	}
#else
#define debug(...)
#endif

template <class Ch, class Tr, class Container>
basic_ostream <Ch, Tr> & operator << (basic_ostream <Ch, Tr> & os, Container const& x) {
    os << "{ ";
    for(auto& y : x) os << y << " ; ";
    return os << "}";
}

template <class X, class Y>
ostream & operator << (ostream & os, pair <X, Y> const& p) {
	return os << "[ " << p.first << ", " << p.second << "]" ;
}

#define FAST_IO std::ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);
#define ll int
#define pb push_back
#define mp make_pair
#define ld long double
#define sz(a) (ll)(a).size()
#define endl "\n"

// priority_queue<ll, vector<ll>, less<ll>>pq;     // Max Heap
// priority_queue<ll, vector<ll>, greater<ll>>pq;  // Min Heap

typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
//K-th smallest
//cout << k << "kth (1 based indexing) smallest: " << *A.find_by_order(k - 1) << endl;
//NO OF ELEMENTS < X
//cout << "No of elements less than " << X << " are " << A.order_of_key(X) << endl;

const int MAXN = 101;
const int MAXA = (1 << 16);

ll n, a[MAXN], dp[MAXN][MAXA];
ll adj[59];
vector<ll>v = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53}, b;

ll rec(ll ind, ll mask)
{
	if(ind == n) return 0;
	if(dp[ind][mask] != -1) return dp[ind][mask];
	ll ans = abs(a[ind] - 1) + rec(ind + 1, mask);
	for(int i=2;i<=58;i++)
	{
		if(adj[i] & mask) continue;
		ans = min(ans, abs(a[ind] - i) + rec(ind + 1, mask | adj[i]));	
	}
	return dp[ind][mask] = ans;
}

int main()
{
	FAST_IO;

 	cin >> n;
 	for(int i=0;i<n;i++) cin >> a[i];   
 	b.resize(n);
    for(int i=2;i<=58;i++) 
    {
    	adj[i] = 0;	
    	for(int j=0;j<16;j++)
    		if(i % v[j] == 0)
    			adj[i] |= (1 << j);
    }		
    memset(dp, -1, sizeof(dp));
    ll msk = 0;
    for(int i=0;i<n;i++)
    {
    	ll x = rec(i, msk);
    	if(abs(a[i] - 1) + rec(i + 1, msk) == x) 
    	{	
    		b[i] = 1;
    		continue;
    	}
    	for(int j=2;j<=58;j++)
    	{
		
			if(adj[j] & msk) continue;
    		if(abs(a[i] - j) + rec(i + 1, msk | adj[j]) == x)
    		{
    			msk |= adj[j];
    			b[i] = j;
    			break;
    		}
    	}
    }
    for(auto it : b) cout << it << " ";
    cout << endl;
    return 0;
}