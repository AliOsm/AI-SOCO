//In The Name of Allah
#include <bits/stdc++.h>

using namespace std;

typedef pair <int,int> pii;
typedef long long int LL;
typedef long double LD;
typedef pair <LD, LD> point;

#define X first
#define Y second

const int maxn = 100;
LD len[maxn];

LD cross(point A, point B) {
	return A.X * B.Y - A.Y * B.X;
}

point mnus(point A, point B) {
	return {A.X - B.X, A.Y - B.Y};
}

LD dist(point A, point B) {
	return sqrt((A.X - B.X) * (A.X - B.X) + (A.Y - B.Y) * (A.Y - B.Y));
}

point inter(point A, point B, point C, point D) {
	LD a1 = B.Y - A.Y, b1 = A.X - B.X; 
	LD c1 = a1 * A.X + b1 * A.Y;
	
	LD a2 = D.Y - C.Y, b2 = C.X - D.X; 
	LD c2 = a2 * C.X + b2 * C.Y; 

    LD det = a1 * b2 - a2 * b1;
    return {(b2 * c1 - b1 * c2) / det, (a1 * c2 - a2 * c1) / det};
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	int n;
	cin >> n;
	if (n <= 4) {
		cout << "No solution\n";
		return 0;
	}

	for (int i = 0; i < n; i++)
		len[i] = 700 - LD(3 * i) / LD(1000);

	LD x = 0.0, y = 0.0;
	vector <point> points;
	for (int i = 0; i < n; i++) {
		LD alpha = (2 * 3.141592653589 * i) / n;
		x += len[i] * cos(alpha);
		y += len[i] * sin(alpha);
		points.push_back({x, y});
	}
	point last = inter(points[points.size() - 2], points[points.size() - 1], {0.0, 0.0}, points[0]);
	points.pop_back();
	points.push_back(last);

	cout.precision(9);
	for (int i = 0; i < n; i++)
		cout << fixed << points[i].X << ' ' << points[i].Y << '\n'; 

	// for (int i = 0; i < n; i++) 
	// 	cout << "length: " << fixed << dist(points[i], points[(i + 1) % n]) << '\n';

	// for (int i = 0; i < n; i++) 
	// 	cout << "angles: " << fixed << cross(mnus(points[i], points[(i + 1) % n]), mnus(points[(i + 2) % n], points[(i + 1) % n])) / (dist(points[i], points[(i + 1) % n]) * dist(points[(i + 1) % n], points[(i + 2) % n])) << '\n';

	return 0;
}