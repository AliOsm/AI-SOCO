//let's do it
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 100000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 100005

int tree[4*maxn],prefix[maxn],suffix[maxn],nxt[maxn][26],pre[maxn][26];

void update(int node,int a,int b,int ind,int val)
{
    if(a>b || a>ind || b<ind)
    return;
    if(a==b)
    {
        tree[node]=max(tree[node],val);
        return;
    }
    int mid=(a+b)/2;
    if(ind<=mid)
    update(2*node,a,mid,ind,val);
    else
    update(2*node+1,mid+1,b,ind,val);
    tree[node]=max(tree[2*node],tree[2*node+1]);
}
int query(int node,int a,int b,int l,int r)
{
    if(a>b || a>r || b<l)
    return 0;
    if(a>=l && b<=r)
    return tree[node];
    int mid=(a+b)/2;
    return max(query(2*node,a,mid,l,r),query(2*node+1,mid+1,b,l,r));
}
int main()
{
    boost1;boost2;
    int i,j,ls,lt,ansl,ansr,len=inf,x,y,z;
    string s,t;
    cin>>s>>t;
    ls=s.length();
    lt=t.length();
    s=" "+s;
    t=" "+t;
    for(i=0;i<26;i++)
    {
        nxt[ls+1][i]=ls+1;
        nxt[ls+2][i]=ls+1;
        nxt[ls+3][i]=ls+1;
    }
    for(i=ls;i>=1;i--)
    {
        for(j=0;j<26;j++)
        nxt[i][j]=nxt[i+1][j];
        nxt[i][s[i]-'a']=i;
    }
    for(i=1;i<=ls;i++)
    {
        for(j=0;j<26;j++)
        pre[i][j]=pre[i-1][j];
        pre[i][s[i]-'a']=i;
    }
    /*for(i=1;i<=ls;i++)
    {
        for(j=0;j<20;j++)
        cout<<nxt[i][j]<<" ";
        cout<<endl;
    }*/
    prefix[1]=nxt[1][t[1]-'a'];
    for(i=2;i<=lt;i++)
    {
        if(t[i]!=t[i-1])
        prefix[i]=nxt[prefix[i-1]][t[i]-'a'];
        else
        prefix[i]=nxt[prefix[i-1]+1][t[i]-'a'];
    }
    suffix[lt]=pre[ls][t[lt]-'a'];
    for(i=lt-1;i>=1;i--)
    {
        if(t[i]!=t[i+1])
        suffix[i]=pre[suffix[i+1]][t[i]-'a'];
        else
        suffix[i]=pre[max(suffix[i+1]-1,0)][t[i]-'a'];
    }
   /* for(i=1;i<=lt;i++)
    cout<<prefix[i]<<" ";
    cout<<endl;
    for(i=1;i<=lt;i++)
    cout<<suffix[i]<<" ";
    cout<<endl;*/
    len=lt;
    ansl=1;
    ansr=lt;
    for(i=0;i<=lt;i++)
    {
        if(suffix[i+1]>0)
        {
            if(len>i)
            {
                len=i;
                ansl=1;
                ansr=i;
            }
        }
    }
   // cout<<len<<endl;
    for(i=lt;i>=1;i--)
    {
        if(prefix[i-1]<=ls)
        {
            if(len>lt-i+1)
            {
                len=lt-i+1;
                ansl=i;
                ansr=lt;
            }
        }
    }
    if(prefix[1]!=ls+1)
    update(1,1,ls,prefix[1],1);
    for(i=2;i<lt;i++)
    {
        x=suffix[i+1];
        if(!x)
        {
            if(prefix[i]!=ls+1)
            update(1,1,ls,prefix[i],i);
            continue;
        }
        y=query(1,1,ls,1,x-1);
        if(y!=0 && y+1<=i)
        {
            if(len>i-(y+1)+1)
            {
                len=i-(y+1)+1;
                ansl=y+1;
                ansr=i;
            }
        }
        if(prefix[i]!=ls+1)
        update(1,1,ls,prefix[i],i);
    }
    if(len==lt)
    {
        cout<<"-";
        return 0;
    }
    for(i=1;i<=ansl-1;i++)
    cout<<t[i];
    for(i=ansr+1;i<=lt;i++)
    cout<<t[i];
   // cout<<len<<" "<<ansl<<" "<<ansr<<endl;
    return 0;
}
/*
xyzdfg
xabcdg
*/