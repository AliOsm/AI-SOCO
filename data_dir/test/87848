#include <algorithm>
#include <iostream>
#include <valarray>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <numeric>
#include <complex>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <ctime>
#include <cmath>
#include <queue>
#include <stack>
#include <deque>
#include <map>
#include <set>

using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i)
#define error(x) cout << #x << " = " << (x) << endl;
#define all(n) (n).begin(), (n).end()
#define Size(n) ((int)(n).size())
#define mk make_pair
#define pb push_back
#define F first
#define S second
#define X real()
#define Y imag()

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef complex<double> point;

template <class P, class Q> void smin(P &a, Q b) { if (b < a) a = b; }
template <class P, class Q> void smax(P &a, Q b) { if (b > a) a = b; }
template <class T> bool by_second(T a, T b) { return a.S < b.S; }

const int MAXN = 21, LIM = 201*1000;

int n, k, w[MAXN], tot = 0, threshold, cnt = 0, used[MAXN];
vector<pii> adj[MAXN];

void bt(int i) {
	if (i == n) {
		cnt++;
		return;
	}
	FOR(j, 0, Size(adj[i])) if (!used[adj[i][j].F]){
		used[adj[i][j].F] = true; tot += adj[i][j].S;
		if (tot <= threshold) bt(i+1);
		used[adj[i][j].F] = false; tot -= adj[i][j].S;
	}
	bt(i+1);
}

int calc(int _t) {
	threshold = _t;
	memset(used, 0, sizeof used);
	cnt = tot = 0;
	bt(0);
	return cnt;
}

int main() {
	ios::sync_with_stdio(false);
	int t;
	cin >> n >> k >> t;
	FOR(i, 0, k) {
		int x, y, z;
		cin >> x >> y >> z;
		x--; y--;
		adj[x].pb(pii(y, z));
	}
	int mn = 0, mx = n*1000;
	while (mn < mx) {
		int mid = (mn+mx)/2;
		if (calc(mid) < t)
			mn = mid+1;
		else
			mx = mid;
	}
	cout << mn << endl;
	return 0;
}

