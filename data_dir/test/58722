#include<bits/stdc++.h>
using namespace std;

const int mx=1e5+10;
vector<int>wt[mx],w[mx];
pair<int,int>mp[mx+mx];
int mpc=0;

int us[mx],vs[mx],cs[mx];
int p[mx+mx],sz[mx+mx];
map<pair<int,int>,int >mem;

int gp(int u){
    while(u!=p[u])u=p[u];
    return u;
}
void join(int u,int v){
    int pu=gp(u);
    int pv=gp(v);
    if(pu==pv)return;
    if(sz[pu]<sz[pv])swap(pu,pv);
    p[pv]=pu;
    sz[pu]+=sz[pv];
}

inline int id(int u,int c){
    pair<int,int>pu(u,c);
    int idx=lower_bound(mp,mp+mpc,pu)-mp;
    if(idx>=mpc)return -1;
    if(mp[idx]!=pu)return -1;
    return idx;
}
int main(){
    int n,m,u,v,c,q;
    scanf("%d %d",&n,&m);
    for(int i=0;i<m;i++){
        scanf("%d %d %d",&u,&v,&c);
        u--,v--;
        wt[u].push_back(c);
        wt[v].push_back(c);
        us[i]=u,vs[i]=v,cs[i]=c;
    }

    for(int i=0;i<n;i++){
        sort(wt[i].begin(),wt[i].end());
        int deg=wt[i].size();
        for(int j=0;j<deg;){
            c=wt[i][j];
            while(j<deg && wt[i][j]==c)j++;
            w[i].push_back(c);
            mp[mpc++]=make_pair(i,c);
        }
    }
    for(int i=0;i<mx+mx;i++)
        p[i]=i,sz[i]=1;

    for(int i=0;i<m;i++)
        join(id(us[i],cs[i]),id(vs[i],cs[i]));

    scanf("%d",&q);
    while(q--){
        scanf("%d %d",&u,&v);
        u--,v--;
        if(w[u].size()>w[v].size()) swap(u,v);

        int ans=0;
        pair<int,int>qry(u,v);

        if(mem.count(qry)==1) ans=mem[qry];
        else{
            for(int i=0;i<int(w[u].size());i++){
                int c=w[u][i];
                int idu=id(u,c);
                int idv=id(v,c);
                if(idv!=-1 && gp(idu)==gp(idv)) ans++;
            }
            mem[qry]=ans;
        }
        printf("%d\n",ans);
    }
    return 0;
}
