// Aggressive Play

#include<bits/stdc++.h>
#define ll long long
#define F first
#define S second
using namespace std;

void __print(int x) {cerr << x;}
void __print(long x) {cerr << x;}
void __print(long long x) {cerr << x;}
void __print(unsigned x) {cerr << x;}
void __print(unsigned long x) {cerr << x;}
void __print(unsigned long long x) {cerr << x;}
void __print(float x) {cerr << x;}
void __print(double x) {cerr << x;}
void __print(long double x) {cerr << x;}
void __print(char x) {cerr << '\'' << x << '\'';}
void __print(const char *x) {cerr << '\"' << x << '\"';}
void __print(const string &x) {cerr << '\"' << x << '\"';}
void __print(bool x) {cerr << (x ? "true" : "false");}

template<typename T, typename V>
void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}
template<typename T>
void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? "," : ""), __print(i); cerr << "}";}
void _print() {cerr << "]\n";}
template <typename T, typename... V>
void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << ", "; _print(v...);}
#ifndef ONLINE_JUDGE
#define debug(x...) cerr << "[" << #x << "] = ["; _print(x)
#else
#define debug(x...)
#endif

const int N = 4e5 + 5;
ll a[N], b[N];
int n, k;
int ansX, ansY;
bool calc(int mid){
    for(int i = 1, j = mid; j <= n; i++, j++){
        int one = a[j] - a[i - 1];
        if(mid - one <= k){
            ansX = i, ansY = j;
            return 1;
        }
    }
    return 0;
}
int main()
{
    ios_base ::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    cin >> n >> k;
    for(int i = 1; i <= n; i++)
        cin >> a[i], b[i] = a[i], a[i] += a[i - 1];
    int lo = -1, hi = n + 1;
    while(hi - lo > 1){
        int mid = hi + lo >> 1;
        //debug(lo, hi, mid);
        if(calc(mid))
            lo = mid;
        else hi = mid;
    }
    cout << lo << "\n";
    for(int i = ansX; i <= ansY; i++)
        b[i] = 1;
    for(int i = 1; i <= n; i++)
        cout << b[i] << " ";
return 0;
}
