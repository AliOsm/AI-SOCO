#include <bits/stdc++.h>
using namespace std;
using lld = int64_t;
const int N = 500000 + 5;

vector< pair< int, lld > > G[ N ];
lld dp[ N ][ 2 ];
void dfs( int, int, int );

int main() {
	ios_base::sync_with_stdio( false );
	cin.tie( nullptr );
	int t; cin >> t;
	while ( t -- ) {
		int n, k; cin >> n >> k;
		for ( int i = 1 ; i < n ; ++ i ) {
			int u, v, w; cin >> u >> v >> w;
			G[ u ].emplace_back( v, w );
			G[ v ].emplace_back( u, w );
		}
		
		dfs( 1, 1, k );
		cout << max( dp[ 1 ][ 0 ], dp[ 1 ][ 1 ] ) << '\n';
		
		for ( int i = 1 ; i <= n ; ++ i ) G[ i ].clear();
	}
	return 0;
}

void dfs( int u, int f, int k ) {
	vector< lld > dif;
	lld tot = 0;
	for ( auto e : G[ u ] ) {
		if ( e.first == f ) continue;
		dfs( e.first, u, k );
		tot += dp[ e.first ][ 0 ];
		dif.push_back( dp[ e.first ][ 1 ] + e.second - dp[ e.first ][ 0 ] );
	}
	dp[ u ][ 0 ] = dp[ u ][ 1 ] = tot;
	sort( dif.begin(), dif.end(), greater< lld >() );
	int k1 = min( k, static_cast< int >( dif.size() ) );
	for ( int i = 0 ; i < k1 ; ++ i ) {
		if ( dif[ i ] <= 0 ) break;
		dp[ u ][ 0 ] += dif[ i ];
	}
	int k2 = min( k - 1, static_cast< int >( dif.size() ) );
	for ( int i = 0 ; i < k2 ; ++ i ) {
		if ( dif[ i ] <= 0 ) break;
		dp[ u ][ 1 ] += dif[ i ];
	}
}