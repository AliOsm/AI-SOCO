
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j123 = n; (i) < j123; (i) ++)
#define rep1(i, n) for (int (i) = 1, j123 = n; (i) <= j123; (i) ++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout << #a << " :";for(int i123=(x);i123<=(y);i123++) cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int(x.size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

int N;
int W[1010];
int H[1010];
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0);
  cin >> N;
  vector<int> v;
  rep1(i,N) cin >> W[i] >> H[i], v.pb(W[i]), v.pb(H[i]);
  sort(v.begin(), v.end());
  v.erase( unique(v.begin(), v.end()), v.end() );
  ll best = INFL;
  rep(i,sz(v))
  {
    int mxHeight = v[i];
    int numlie = 0;
    int impossible = 0;
    rep1(ii,N)
    if (H[ii] > mxHeight)
    {
      numlie++;
      if (W[ii] > mxHeight)
        impossible = 1;
    }
    if (numlie > N/2) continue;
    if (impossible) continue;
    int left = N/2 - numlie;
    // find the "left" many ppl to lie down
    vector< pair<int,int> > v;
    rep1(ii,N)
    {
      // we already took care of this
      if (H[ii] > mxHeight) continue;

      // we can't let him lie down
      if (W[ii] > mxHeight) continue;

      if (H[ii] < W[ii]) v.pb(mp(H[ii]-W[ii],ii));
    }
    sort(v.begin(), v.end());
    set<int> st;
    rep(i,min(left, sz(v)))
    st.insert(v[i].second);
    int width = 0;
    rep1(ii,N)
    {
      int liedown = 0;
      if (st.find(ii) != st.end())
        liedown = 1;
      if (H[ii] > mxHeight)
        liedown = 1;
      if (liedown) 
        width += H[ii];
      else
        width += W[ii];
    }
    best = min(best, width * 1ll * mxHeight);
  }
  assert(best<INFL);
  cout << best << endl;
}
