#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#define ll          long long
#define pb          push_back
#define mp          make_pair
#define pii         pair<int,int>
#define vi          vector<int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define endl        '\n'
#define rep(i,a,b)	for(int i=a;i<b;i++)
using namespace std;

void solve(){
	int n,m;
	cin>>n>>m;
	vector<pii>adj[n+1];
	vector<pair<pii,int>>edges(m);
	rep(i,0,m){
		int a,b,c;
		cin>>a>>b>>c;
		if(!c)c=3;
		adj[a].pb(mp(b,c));
		adj[b].pb(mp(a,c));
		edges[i]=mp(mp(min(a,b),max(a,b)),c);
	}
	int visited[n+1];
	int par[n+1];
	memset(visited,0,sizeof visited);
	priority_queue<pair<pii,pii>,vector<pair<pii,pii>>,greater<pair<pii,pii>>>pq;
	pq.push(mp(mp(1,0),mp(1,0)));
	while(!pq.empty()){
		auto cur=pq.top();
		pq.pop();
		if(visited[cur.S.F])continue;
		visited[cur.S.F]=cur.F.F;
		par[cur.S.F]=cur.S.S;
		for(auto i:adj[cur.S.F]){
			pq.push(mp(mp(cur.F.F+1,cur.F.S+i.S),mp(i.F,cur.S.F)));
		}
	}
	set<pii>path;
	int j=n;
	while(j!=1){
		path.insert(mp(min(par[j],j),max(par[j],j)));
		j=par[j];
	}
	vector<pair<pii,int>>ans;
	for(auto i:edges){
		auto it=path.find(i.F);
		if((it==path.end())^(i.S!=1)){
			ans.pb(mp(i.F,(i.S%3)^1));
		}
	}
	cout<<sz(ans)<<endl;
	for(auto i:ans){
		cout<<i.F.F<<" "<<i.F.S<<" "<<i.S<<endl;
	}
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int t=1;
//	cin>>t;
	while(t--){
		solve();
	}
	return 0;
}