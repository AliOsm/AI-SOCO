// KALAM
# include<bits/stdc++.h>

using namespace std;

const int N = 100 + 77 , Mod = 1000000007;
int m;
long long n;

struct Matrix {
	int n , m , M[N][N];
	Matrix (int n1 , int m1){
		n = n1 ;m = m1;
		Clear();
	}
	void Clear(){
		Fill(0);
	}
	void Identity(){
		Clear();
		if(n != m){
			cerr << "Cannot Make Identity Matrix Not Compatible\n";return ;
		}
		for(int i = 0;i < n;++ i)
			M[i][i] = 1;
	}
	void Print(){
		cerr << "***\n";
		for(int i = 0;i < n;++ i){
			for(int j = 0;j < m;++ j)
				cerr << M[i][j] << ' ';
			cerr << '\n';
		}
		cerr << "***\n";
	}
	void Fill(int t){
		for(int i = 0;i < n;++ i)
			for(int j = 0;j < m;++ j)
				M[i][j] = t;
	}
	Matrix operator * (const Matrix &T){
		Matrix R = Matrix(n , T.m);R.Clear();
		if(m != T.n){
			cerr << "Matrices not Compatible for multiplying\n";return R;
		}
		for(int i = 0;i < n;++ i)
         for(int k = 0;k < m;++ k)
            for(int j = 0;j < T.m;++ j)
					R.M[i][j] = (R.M[i][j] + M[i][k] * 1ll * T.M[k][j]) % Mod;
		return R;
	}
	Matrix operator + (const Matrix &T){
		Matrix R = Matrix(n , m);
		R.Clear();
		for(int i = 0;i < n;++ i)
			for(int j = 0;j < m;++ j)
				R.M[i][j] = (M[i][j] + T.M[i][j]) % Mod;
		return R;
	}
	Matrix operator ^ (const long long t){
		Matrix res = Matrix(n , m);res.Identity();
		if(t == 0)return res;
		Matrix T = Matrix(n , m);T.Clear();
		for(int i = 0;i < n;++ i)
			for(int j = 0;j < m;++ j)
				T.M[i][j] = M[i][j];
		long long p = t;
		while(p){
			if(p & 1)
				res = res * T;
			p >>= 1;
			T = T * T;
		}
		return res;
	}
};

int main() {
   cin >> n >> m;
   if(n < m)
      return cout << 1 , 0;
   Matrix T = Matrix(1 , m);
   T.Fill(1);
   Matrix M = Matrix(m , m);
   for(int i = 0;i < m;++ i)
      M.M[i][i + 1] = 1;
   M.M[m - 1][m - 1] = 1;
   M.M[m - 1][0] = 1;
   T = T * (M ^ (n - m + 1));
   cout << T.M[0][m - 1];
   return 0;
}

