#include<bits/stdc++.h>
#define x first
#define y second
#define pb push_back
using namespace std;
const int N = 1e5 + 10, L = 20;
int q;
vector < int > D[N];
struct Node
{
    int l, r, c, Mn;
    Node () {l = r = c = 0; Mn = 1e9;}
};
Node sent = Node();
struct BS
{
    vector < Node > A;
    BS () {A.clear(); A.push_back(sent);};
    void Add(int val)
    {
        int st = 0;
        for (int i = L - 1; i + 1; i--)
        {
            A[st].c ++;
            A[st].Mn = min(A[st].Mn, val);
            if (val & (1 << i))
            {
                if (A[st].r == 0)
                    A.push_back(sent), A[st].r = A.size() - 1;
                st = A[st].r;
                continue;
            }
            if (A[st].l == 0)
                A.push_back(sent), A[st].l = A.size() - 1;
            st = A[st].l;
        }
        A[st].Mn = min(A[st].Mn, val);
        A[st].c ++;
    }
    int get(int val, int Max)
    {
        int st = 0, sum = 0;
        for (int i = L - 1; i + 1; i--)
        {
            if (A[st].c == 0 || sum > Max)
                return (-1);
            if (A[st].l == 0)
            {
                sum += (1 << i);
                st = A[st].r;
                continue;
            }
            if (A[st].r == 0)
            {
                st = A[st].l;
                continue;
            }
            if ((val & (1 << i)) == 0 && A[A[st].r].Mn <= Max)
            {
                sum += (1 << i);
                st = A[st].r;
                continue;
            }
            st = A[st].l;
        }
        if (sum > Max || A[st].c == 0)
            return (-1);
        return (sum);
    }
};
BS P[N];
int main()
{
    scanf("%d", &q);
    for (int i = 1; i < N; i++)
        for (int j = i; j < N; j += i)
            D[j].push_back(i);
    for (int i = 1; i < N; i++)
        P[i] = BS();
    while (q --)
    {
        int tp, xi, ki, si;
        scanf("%d%d", &tp, &xi);
        if (tp == 1)
        {
            for (auto X : D[xi])
                P[X].Add(xi);
            continue;
        }
        scanf("%d%d", &ki, &si);
        if (xi % ki != 0 || P[ki].A[0].c == 0)
        {
            printf("-1\n");
            continue;
        }
        int res = P[ki].get(xi, si - xi);
        printf("%d\n", res);
    }
    return (0);
}
