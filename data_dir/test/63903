#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
const int N = 2e5 + 5;
const ll INF = 1e14;

int n , q;
ll a[N] , st[N << 2] , lazy[N << 2];

void build(int p , int l , int r){
    if(l == r){
        st[p] = a[l];
        return;
    }

    int mid = (l + r) >> 1;

    build(p*2 , l , mid);
    build(p*2+1 , mid + 1 , r);

    st[p] = min(st[p*2] , st[p*2+1]);
}

void push(int p , int l , int r){
    if(lazy[p] == 0)return;

    st[p] += lazy[p];

    if(l != r){
        lazy[p*2]   += lazy[p];
        lazy[p*2+1] += lazy[p];
    }

    lazy[p] = 0;
}

void update(int p , int l , int r , int S , int E , ll v){
    push(p , l , r);

    if(l >= S && r <= E){
        lazy[p] += v;
        push(p , l , r);
        return;
    }
    if(E < l || S > r)return;

    int mid = (l + r) >> 1;

    update(p*2 , l , mid , S , E , v);
    update(p*2+1 , mid + 1 , r , S , E , v);

    st[p] = min(st[p*2] , st[p*2+1]);
}

ll rmq(int p , int l , int r , int S , int E){
    push(p , l , r);
    if(l >= S && r <= E)return st[p];
    if(E < l || S > r)return INF;

    int mid = (l + r) >> 1;

    return min( rmq(p*2 , l , mid , S , E) , rmq(p*2+1 , mid + 1, r , S , E) );
}

main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);


    cin >> n;

    for(int i = 1 ; i <= n ; i ++){
        cin >> a[i];
    }

    build(1 , 1 , n);

    cin >> q;

    string s;
    getline(cin , s);
    while( q -- ){
        getline(cin , s);
        stringstream ss(s);

        vector < int > tmp;
        int x;
        while(ss >> x){
            tmp.push_back(x);
        }

        int l = tmp[0] + 1;
        int r = tmp[1] + 1;
        if(tmp.size() == 2){
            if(l > r){
                cout << min( rmq(1 , 1 , n , l , n) , rmq(1 , 1 , n , 1 , r)) << endl;
            }
            else {
                cout << rmq(1 , 1 , n , l , r) << endl;
            }
        }
        else {
            ll v = tmp[2] * 1ll;
            if(l > r){
                update(1 , 1 , n , l , n , v);
                update(1 , 1 , n , 1 , r , v);
            }
            else {
                update(1 , 1 , n , l , r , v);
            }
        }
    }
}
