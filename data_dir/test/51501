#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
 
vector<ll> mat[200005][5];
ll n;
ll dp[200005][15];
 
ll solve(ll u, ll k){
    if(u == n) return 0;
    if(dp[u][k] != -1) return dp[u][k];
    ll res = solve(u+1, k);
    ll v[7] = {0};
    for(ll i = 1; i <= 3; i++){
        if(!mat[u][i].empty()){
            if(k+1 >= 10) v[i] = solve(u+1, 0) + 2*mat[u][i].front();
            else v[i] = solve(u+1, k+1) + mat[u][i].front();
        }
    }
    if(!mat[u][1].empty() and !mat[u][2].empty()){
        ll maxi = max(mat[u][1].front(),mat[u][2].front());
        ll mini = min(mat[u][1].front(),mat[u][2].front());
        if(k+2 >= 10) v[4] = solve(u+1, (k+2)%10 ) + maxi*2 + mini;
        else v[4] = solve(u+1, k+2) + maxi + mini;
    }
    if(mat[u][1].size() >= 3){
        ll a = mat[u][1][0];
        ll b = mat[u][1][1];
        ll c = mat[u][1][2];
        if(k+3 >= 10) v[5] = solve(u+1, (k+3)%10) + a*2 + b + c;
        else v[5] = solve(u+1, k+3) + a + b + c;
    }
    if(mat[u][1].size() >= 2){
        ll a = mat[u][1][0];
        ll b = mat[u][1][1];
        if(k+2 >= 10) v[6] = solve(u+1, (k+2)%10) + a*2 + b;
        else v[6] = solve(u+1, k+2) + a + b;
    }
    for(ll i = 1; i <= 6; i++)
        res = max(res, v[i]);
    return dp[u][k] = res;
}
 
int main(){
    memset(dp, -1, sizeof dp);
    scanf("%lld", &n);
    for(ll i = 0; i < n; i++){
        ll k; scanf("%lld", &k);
        for(ll j = 0; j < k; j++){
            ll w, v; scanf("%lld %lld", &w, &v);
            mat[i][w].push_back(v);
        }
        for(ll j = 1; j <= 3; j++)
            sort(mat[i][j].rbegin(), mat[i][j].rend());
    }
    cout << solve(0,0) << endl;
	return 0;
}