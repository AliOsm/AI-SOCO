#include <bits/stdc++.h>
using namespace std;
#define REP(i, n) for (int i = 0; i < int(n); i++)
#define FOR(i, a, b) for (int i = a; i < int(b); i++)
#define FOREACH(i, v) for (__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define SIZE(v) ((int)(v).size())
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define ll long long
#define pii pair<int, int>

const int MAX = 200200;

struct str{
	ll l;
	char c;
	bool operator!=(const str &a){
		return !(a.l == l && a.c == c);
	}
};

str t[MAX], s[MAX];
int n, m, b[MAX];

str frnt, bck;

ll ans = 0;

void kmpPreprocess(){
	int i = 0, j = -1; b[0] = -1;
	while(i < m){
		while(j >= 0 && s[i] != s[j]) j = b[j];
		i++; j++;
		b[i] = j;
	}
}

void kmpSearch(){
	int i = 0, j = 0;
	while(i < n){
		while(j >= 0 && t[i] != s[j]) j = b[j];
		i++; j++;
		if(j == m){
			//printf("i = %d, i - j = %d\n", i, i - j);
			if(i - j > 0 && i < n){
				if(t[i - j - 1].c == frnt.c && t[i - j - 1].l >= frnt.l && t[i].c == bck.c && t[i].l >= bck.l) ans++;
			}
			j = b[j];
		}
	}
}


int main(){
	scanf("%d %d", &n, &m);
	REP(i, n) scanf("%lld-%c", &t[i].l, &t[i].c);
	REP(i, m) scanf("%lld-%c", &s[i].l, &s[i].c);
	
	int tmp = 0;
	for(int i = 1; i < n; i++){
		if(t[tmp].c == t[i].c) t[tmp].l += t[i].l;
		else t[++tmp] = t[i];
	}
	n = tmp + 1;
	
	tmp = 0;
	for(int i = 1; i < m; i++){
		if(s[tmp].c == s[i].c) s[tmp].l += s[i].l;
		else s[++tmp] = s[i];
	}
	m = tmp + 1;

	
	if(m == 1){
		for(int i = 0; i < n; i++)
			if(t[i].c == s[0].c && t[i].l >= s[0].l)
				ans += t[i].l - s[0].l + 1ll;
	}
	else if(m == 2){
		for(int i = 0; i < n - 1; i++){
			bool p = true;
			for(int j = 0; j < 2; j++)
				if(!(t[i + j].c == s[j].c && t[i + j].l >= s[j].l)) p = false;
			if(p) ans++;
		}
	}
	else{
		frnt = s[0], bck = s[m - 1];
		for(int i = 0; i < m - 1; i++)
			s[i] = s[i + 1];
		m = m - 2;
		kmpPreprocess();
		kmpSearch();
	}
	printf("%lld\n", ans);
	
	
	
	
	
	
	
	

}