#include <bits/stdc++.h>
using namespace std;

using ll = long long;

const ll M = (ll)1e9 + 7;

ll deg(ll a, ll d) {
    if (d == 0) {
        return 1;
    }
    ll t = deg(a, d / 2);
    t = t * t;
    t %= M;
    if (d % 2) {
        t *= a;
        t %= M;
    }
    return t;
}

int main() {
    ll k, w;
    cin >> k >> w;
    vector <ll> f(k + 1);
    for (ll i = 0; i <= k; ++i) {
        if (i < 2) {
            f[i] = 1;
        } else {
            f[i] = f[i - 1] * i;
            f[i] %= M;
        }
    }
    vector <ll> rf(k + 1);
    for (int i = 0; i <= k; ++i) {
        rf[i] = deg(f[i], M - 2);
    }
    ll ans = 0;
    vector <ll> p(k + 10);
    p[0] = deg(k, max(w - k - 2, 0LL));
    ll p0 = max(w - k - 2, 0LL);
    for (int i = 1; i < p.size(); ++i) {
        p[i] = p[i - 1] * k % M;
    }
    for (int t = 1; t <= k; ++t) {
        if (t < w) {
            ans += f[k] * f[k] % M * t % M * p[w - t - 1 - p0] % M * rf[k - t] % M * rf[k - t] % M;
        } else {
            ans += f[k] * w % M * f[k - t + w - 1] % M * rf[k - t] % M * rf[k - t] % M;
        }
        if (t == k) {
            continue;
        }
        if (t + 1 < w) {
            ans += f[k] * f[k] % M * t % M * p[w - t - 2 - p0] % M * rf[k - t] % M * rf[k - t - 1] % M;
        } else {
            ans += f[k] * (w - 1) % M * f[k - t + w - 2] % M * rf[k - t] % M * rf[k - t - 1] % M;
        }
    }
    cout << ans % M;
    return 0;
}
