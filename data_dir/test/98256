#include <bits/stdc++.h>

#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define foreach(it, v) for(auto it=(v).begin(); it != (v).end(); ++it)

#define _ ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define __ freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);

#define tr(...) cout<<__FUNCTION__<<' '<<__LINE__<<" = ";trace(#__VA_ARGS__, __VA_ARGS__)

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;

template<typename S, typename T> 
ostream& operator<<(ostream& out,pair<S,T> const& p){out<<'('<<p.fi<<", "<<p.se<<')';return out;}

template<typename T>
ostream& operator<<(ostream& out,vector<T> const& v){
int l=v.size();for(int i=0;i<l-1;i++)out<<v[i]<<' ';if(l>0)out<<v[l-1];return out;}

template<typename T>
void trace(const char* name, T&& arg1){cout<<name<<" : "<<arg1<<endl;}

template<typename T, typename... Args>
void trace(const char* names, T&& arg1, Args&&... args){
const char* comma = strchr(names + 1, ',');cout.write(names, comma-names)<<" : "<<arg1<<" | ";trace(comma+1,args...);}


typedef int Cap;
typedef int Cost;

const int MAXN = 2010;
Cap CINF = 1e9;	// Warning check type of infinity
Cost INF = 1e9;	// Warning check type of infinity	

struct minCostMaxFlow{
	struct Edge{int x, y; Cap cap; Cost cost; int id;};
	
	int N, prev[MAXN];
	
	Cost dist[MAXN], phi[MAXN];
	
	vector<Edge> E;
	vector<int> g[MAXN];
	
	minCostMaxFlow(int _N) : N(_N){ }
	
	void addEdge(int x, int y, Cap cap, Cost cost, int opt = -1){
		Edge e1 = {x, y, cap, cost, opt}, e2 = {y, x, 0, -cost, -1};
		g[x].pb(E.size()); E.pb(e1);
		g[y].pb(E.size()); E.pb(e2);
	}
	
	// Note: In SSSP, the distance from the source 's' to 'v' is dist[v] + phi[v] - phi[x]
	bool augment(int s, int t){
		int x, y;
		for(int i = 0; i <= N; i++) prev[i] = -1, dist[i] = INF;
		dist[s] = prev[s] = 0;
		
		set<pair<Cost, int> > q;
		q.insert(mp(dist[s], s));
		
		while(!q.empty()){
			x = q.begin()->se; q.erase(q.begin());
			
			foreach(it, g[x]){
				Edge &e = E[*it];
				if(e.cap <= 0) continue;
				
				y = e.y;
				Cost ncost = e.cost + phi[x] - phi[y];
				
				if(dist[x] + ncost < dist[y]){
					q.erase(mp(dist[y], y));
					dist[y] = dist[x] + ncost;	// New distance to node
					prev[y] = *it;				// The edge from which you arrive here
					q.insert(mp(dist[y], y));
				}	
			}
		}
		
		if(prev[t] == -1) return false; else return true;
	}
	
	pair<Cap, Cost> mcmf(int s, int t, int nn){	// returns (flow, cost)
		Cap flow = 0; Cost cost = 0;
		for(int i = 0; i <= N; i++) phi[i] = 0;
		
		while(true){
			if(!augment(s, t)) break;
			
			Cap z = CINF;
			
			for(int i = t; i != s; i = E[prev[i]].x) z = min(z, E[prev[i]].cap);
			for(int i = t; i != s; i = E[prev[i]].x) E[prev[i]].cap -= z, E[prev[i]^1].cap += z;
			
			flow += z;
			cost += z * (dist[t] - phi[s] + phi[t]);
			
			for(int i = 0; i <= N; i++) if(prev[i] != -1) phi[i] += dist[i];
		}
    
    set<int> ok;		
		for(auto e : E){
		  if(e.id != -1 and e.cap == 0){
		    ok.insert(e.id);
		  }
		}
		
		for(int i = 0; i < nn; i++){
	    cout << ok.count(i) << ' ';
	  }
	  cout << endl;
	  
		return mp(flow, cost);
	}	
};

int main(){ _
  int n, k;
  cin >> n >> k;
  
  set<int> dis;
  map<int, int> m;
  
  vector<pair<pii, int> > v(n);
  for(int i = 0; i < n; i++){
    cin >> v[i].fi.fi >> v[i].fi.se >> v[i].se;
    dis.insert(v[i].fi.fi);
    dis.insert(v[i].fi.fi+v[i].fi.se);
  }
  
  int cnt = 0;
  for(int x : dis){
    m[x] = ++cnt;
  }
  
  int S = cnt + 1, T = S+1;
  
  minCostMaxFlow *f = new minCostMaxFlow(T);
  
  f->addEdge(S, 1, k, 0);
  f->addEdge(cnt, T, k, 0);
  
  for(int i = 2; i <= cnt; i++){
    f->addEdge(i-1, i, k, 0);
  }
  
  for(int i = 0; i < n; i++){
    int x = m[v[i].fi.fi];
    int y = m[v[i].fi.fi + v[i].fi.se];
    f->addEdge(x, y, 1, -v[i].se, i);
  }
  
  f->mcmf(S, T, n);
  
  return 0;
}
