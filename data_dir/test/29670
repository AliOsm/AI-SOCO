//                             In The Name Of Allah
#include <bits/stdc++.h>
#define ss second
#define ff first
#define use_fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define ret(n) return cout << n, 0
#define se(n) cout << setprecision(n) << fixed
#define pb push_back
//#define int long long
#define ld long double
using namespace std; 
 
const int N = 2e5 + 100 + 100, OO = 1e8 + 100, M = 1e9 + 7, P = 6151, sq = 500, lg = 23;
typedef pair <int, int> pii;
int n, m, k;
string s;
struct node {
	int num[11][11], en, st;
	char lz;
} seg[N << 2];

void upd(int c) {
	for(int i = 0; i < k; i++) 
		for(int j = 0; j < k; j++)
			seg[c].num[i][j] = seg[c << 1].num[i][j] + seg[c << 1 | 1].num[i][j];
	seg[c].en = seg[c << 1 | 1].en;
	seg[c].st = seg[c << 1].st;
	seg[c].num[seg[c << 1].en][seg[c << 1 | 1].st]++;
}

void build(int c, int b, int e) {
	if(e - b == 1) {
		seg[c].st = seg[c].en = s[b] - 'a';
		return;
	}	
	int mid = (b + e) >> 1;
	build(c << 1, b, mid);
	build(c << 1 | 1, mid, e);
	upd(c);
}

void go(int c, int b, int e, char is) {
	memset(seg[c].num, 0, sizeof(seg[c].num));
	seg[c].num[is - 'a'][is - 'a'] = e - b - 1;
	seg[c].lz = is;
	seg[c].en = seg[c].st = is - 'a';
}

void shift(int c, int b, int mid, int e) {
	go(c << 1, b, mid, seg[c].lz);
	go(c << 1 | 1, mid, e, seg[c].lz);
	seg[c].lz = 0;
}

void query(int c, int b, int e, int l, int r, char is) {
	if(r <= b || l >= e) return;
	if(l <= b && e <= r) {
		go(c, b, e, is);
		return;
	}
	int mid = (b + e) >> 1;
	if(seg[c].lz) 
		shift(c, b, mid, e);
	query(c << 1, b, mid, l, r, is);
	query(c << 1 | 1, mid, e, l, r, is);
	upd(c);
/*	cout << c << " " << b << " " << e << " *** " << endl;
	for(int i = 0; i < k; i++) {
		for(int j = 0; j < k; j++) {
			if(seg[c].num[i][j] != 0) {
				cout << i << " " << j << " " << seg[c].num[i][j] << endl;
			}
		}
	}
*/
}

void solve() {
	string t;
	cin >> t;
	int ans = 1;
	for(int i = 0; i < k; i++) 
		for(int j = 0; j <= i; j++)
			ans += seg[1].num[t[i] - 'a'][t[j] - 'a'];
	cout << ans << endl;
}

int32_t main() {
	use_fast;
	cin >> n >> m >> k;
	cin >> s;
	build(1, 0, n);
	while(m--) {
		int typ;
		cin >> typ;
		if(typ == 1) {
			int l, r;
			char c;
			cin >> l >> r >> c;
			l--;
			query(1, 0, n, l, r, c);
		}
		else 
			solve();
	}
	return 0; 
} 
/*
be carefull :
1- if not solve after 20 min, read again twice
2- after submit read the code again
3- fun with contest
4- ... 
*/
