#include <bits/stdc++.h>

using namespace std;

const int N = 505, INF = 0x3f3f3f3f;

string s, ans[N][N];

int n, k, p[N][N], dp[N][N];


int f(int idx, int k) {
        if(idx > n)
                return dp[idx][k] = 0;
        if(!k)
                return dp[idx][k] = INF;
        if(~dp[idx][k])
                return dp[idx][k];
        int res = INF;
        for(int i = idx; i <= n; i++) {
                res = min(res, p[idx][i] + f(i + 1, k - 1));
        }
        return dp[idx][k] = res;
}

void print(int idx, int k, int need, int flg) {
        if(idx > n)
                return;
        for(int i = idx; i <= n; i++) {
                if(p[idx][i] + f(i + 1, k - 1) == need) {
                        if(flg) cout << "+";
                        cout << ans[idx][i];
                        print(i + 1, k - 1, need - p[idx][i], 1);
                        return;
                }
        }
}

int main() {
        cin >> s >> k; n = s.size();
        memset(dp, -1, sizeof dp);
        for(int i = 1; i <= n; i++)
                ans[i][i] = s[i - 1];
        for(int i = 2; i <= n; i++) {
                for(int j = 1; j + i - 1 <= n; j++) {
                        p[j][j + i - 1] = p[j + 1][j + i - 2] + (s[j - 1] != s[j + i - 2]);
                        ans[j][j + i - 1] = s[j - 1] + ans[j + 1][j + i - 2] + s[j - 1];
                }
        }
        cout << f(1, k) << endl;
        print(1, k, dp[1][k], 0);
}
