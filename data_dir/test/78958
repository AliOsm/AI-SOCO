#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/numeric>

using namespace __gnu_pbds;
using namespace __gnu_cxx;
using namespace std;

#define popCnt(x) (__builtin_popcountll(x))

typedef long long Long;

const int N = 1e6 + 5;
const int M = 1000000;
const int D = 10;

int mx_digit[N];
int memo[N][D];
int terminal[N][D];

int getMaxDigit(int n) {
  int res = 0;
  while (n > 0) {
    int digit = n % 10;
    res = max(res, digit);
    n /= 10;
  }
  return res;
}

void buildMaxDigit() {
  for (int i = 1; i < N; ++i) {
    mx_digit[i] = getMaxDigit(i);
  }
}

void buildRes() {
  buildMaxDigit();
  for (int i = 1; i < N; ++i) {
    for (int j = 0; j < D; ++j) {
      int tmp = max(j, mx_digit[i]);
      if (tmp > i) {
        terminal[i][j] = i;
      } else {
        memo[i][j] = memo[i - tmp][j] + 1;
        terminal[i][j] = terminal[i - tmp][j];
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#ifdef Local
  freopen("test.in", "r", stdin);
#else
#define endl '\n'
#endif

  buildRes();

  Long n;
  cin >> n;

  Long ans = 0;
  while (n > 0) {
    int part1 = n / M;
    int part2 = n % M;

    ans += memo[part2][mx_digit[part1]];
    part2 = terminal[part2][mx_digit[part1]];
    n = 1LL * part1 * M + part2;
    if (n == 0) break;
    n -= max(mx_digit[part1], mx_digit[part2]);
    ++ans;
  }
  cout << ans;

}

