#include <bits/stdc++.h>
using namespace std;

//#define int long long

const int MAX = 1e6 + 10; 
const int OO = 0x3f3f3f3f;
const double EPS = 1e-6; 
const long long MOD = 998244353;

#define bug(x) cout << #x << " = " << x << '\n'
#define _ << " , " <<
#define FOR(i, a, n) for(int i = a; i < n; i++)
#define REP(i, n) FOR(i, 0, n)
#define fi first
#define se second
#define pb push_back
#define mt make_tuple
#define all(vetor) vetor.begin(), vetor.end()
#define X real()
#define Y imag()
#define sc(a) scanf(" %lld", &a)
//#define gc getchar_unlocked

typedef long long ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef complex<ll> Pll;
typedef complex<ld> Pld;

int n, m;
vector<vector<int>> G;
vector<int> cor;
vector<ll> pot;
int L1, L2;

ll dfs(int v, int h)
{
    if(h & 1) L1++;
    else L2++;
    cor[v] = true;
    for(int &u : G[v])
    {
        if(cor[u]) continue;
        dfs(u, h + 1);
    }
    return (pot[L1] + pot[L2]) % MOD;
}

bool check(int v, int c)
{
	cor[v] = c;
	bool fl = false;
	for(int &u : G[v])
	{
		if(!cor[u])
		fl = check(u, 3 - c);
		else if(cor[v] == cor[u])
			fl = true;
		if(fl) break;
	}
	return fl;
}

int32_t main()
{
    int t;
    cin >> t;
    while(t--)
    {
    	scanf(" %d %d", &n, &m);
    	G.resize(n + 1);
    	cor.resize(n + 1);
    	pot.pb(1);
    	REP(i, n + 1)
    	{
    	    ll p = (pot.back() * 2LL) % MOD;
    	    pot.pb(p);
    	}
    	while(m--)
    	{
    		int u, v;
    		scanf(" %d %d", &v, &u);  v--; u--;
    		G[u].pb(v);
    		G[v].pb(u);
    	}
    	bool no_ans = false;
    	REP(i, n)
    	    if(!cor[i])
    	        no_ans |= check(i, 1);
    	if(no_ans)
    	    puts("0");
    	else
    	{
        	ll ans = 1;
        	cor.clear();
        	cor.resize(n + 1);
        	REP(i, n)
        	    if(!cor[i])
        	    {
                    L1 = L2 = 0;
        	        ans = (ans * dfs(i, 0)) % MOD;
        	    }
        	printf("%lld\n", ans);
    	}
    	G.clear();
    	cor.clear();
    	pot.clear();
    }
	
	return 0;
}
