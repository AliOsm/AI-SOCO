#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define SPEED ios_base::sync_with_stdio(false); cin.tie(NULL);
#define FOR(i, a, b) for (ll i = a; i < b; ++i)
#define RFOR(i, b, a) for (ll i = b; i >= a; --i)
#define ALL(x) x.begin(), x.end()
#define DEBUG(args...) { string _s = #args; replace(ALL(_s), ' ', '\0');\
replace(ALL(_s), ',', ' ');\
stringstream _ss(_s); istream_iterator<string> _it(_ss); _debug(_it, args);}
#define endl "\n"
#define F first
#define S second
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)

using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

void _debug(istream_iterator<string>) {}
template<typename T, typename... Args>
void _debug(istream_iterator<string> it, T first, Args... args) {
    cerr << ">> " << *it << " : " << first << endl; _debug(++it, args...);
}

template<typename T>
inline ostream& operator << (ostream& out, const set<T>& s) {
    if (s.empty()) return out << "{}";
    else { out << '{'; for (auto& e : s) { out << e << ", "; } return out << "\b\b}"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const unordered_set<T>& s) {
    return out << set<T>(ALL(s));
}

template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const unordered_map<T1, T2>& m) {
    return out << map<T1, T2>(ALL(m));
}
template<typename T>
inline ostream& operator << (ostream& out, const ordered_set<T>& s) {
    return out << set<T>(ALL(s));
}

typedef long long ll;
typedef long double ld;
typedef vector<long long> vll;
typedef pair<ll, ll> pll;
typedef vector<pair<ll, ll>> vpll;
typedef unordered_map<ll, ll> STll;


/************************************** MAIN PROGRAM ********************************************/

/*************************************************************************
* UNION FIND - WITH RANK AND PATH-COMPRESSION       @author: manishjoshi394
*************************************************************************/
class UnionFind
{
    vector<int> id, size;
    int m_count, m_total;
  //  vector<list<int>> parts;
public:
    void init(int n)
    {
        m_count = m_total = n;
        id = vector<int>(n);
        size = vector<int>(n);
     //   parts = vector<list<int>>(n);
        FOR(i, 0, n)
        {
            id[i] = i;
            size[i] = 1;
//            parts[i].push_back(i);
        }
    }
    int find(int x)
    {
        while(id[x] != x)
        {
            id[x] = id[id[x]];     // path compression
            x = id[x];
        }
        return x;
    }
    int count()
    {
        return m_count;
    }
    int total() {
        return m_total;
    }
    void join(int x, int y)
    {
        int xRoot = find(x);
        int yRoot = find(y);
        if (xRoot == yRoot)
            return;

        // ranking the trees by sizes
        if (size[xRoot] < size[yRoot])
        {
            id[xRoot] = yRoot;
            size[yRoot] += size[xRoot];
          //  parts[yRoot].splice(parts[yRoot].end(), parts[xRoot]);
        }
        else {
            id[yRoot] = xRoot;
            size[xRoot] += size[yRoot];
          //  parts[xRoot].splice(parts[xRoot].end(), parts[yRoot]);
        }
        m_count--;
    }
    bool connected(int v, int w)
    {
        return find(v) == find(w);
    }
};

UnionFind combineDSUs(UnionFind uf1, UnionFind uf2) {
    for (int i = 0; i < uf2.total(); ++i) {
        uf1.join(i, uf2.find(i));
    }
    return uf1;
}
template <typename T1, typename T2>
inline ostream& operator << (ostream& out, const pair<T1, T2>& p) {
    return out << "(" << p.F << ", " << p.S << ")";
}

template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const map<T1, T2>& m) {
    if (m.empty()) return out << "{}";
    out << '{'; for (auto& p : m) { out << p << ", "; } return out << "\b\b}";
}

template<typename T>
inline ostream& operator << (ostream& out, const vector<T>& v) {
    if (v.empty()) return out << "[]";
    else { out << '['; for (auto& e : v) { out << e << ", "; } return out << "\b\b]"; }
}
inline ostream& operator << (ostream& out, UnionFind m) {
    map<int, vector<int>> mp;
    for (int i = 0; i < m.total(); ++i) {
        mp[m.find(i)].push_back(i);
    }
    return out << mp;
}

int main()
{
  // freopen("input.txt", "r", stdin);
    SPEED
    ll n, m;
    cin >> n >> m;
    vector<UnionFind> pref(m + 1), suf(m + 2);
    vector<pair<int, int>> edges;
    edges.reserve(m);
    for (auto &e : pref) {
        e.init(n);
    }
    for (auto &e : suf) {
        e.init(n);
    }
    FOR(i, 0, m)
    {
        ll u, v;
        cin >> u >> v;
        u--, v--;
        edges.push_back({u, v});
    }

    FOR(i, 0, m)
    {
        pref[i + 1] = pref[i];
        pref[i + 1].join(edges[i].first, edges[i].second);
     //   DEBUG(pref[i], pref[i + 1])
    }
    RFOR(i, m - 1, 0) {
        suf[i + 1] = suf[i + 2];
        suf[i + 1].join(edges[i].first, edges[i].second);
    }

    ll k;
    cin >> k;
   //DEBUG(pref, suf)
    FOR(_, 0, k) {
        ll l, r;
        cin >> l >> r;
        UnionFind cur = combineDSUs(pref[l - 1], suf[r + 1]);
        cout << cur.count() << endl;
    }
}
/************************************** END OF PROGRAM ******************************************/
/** Stuff you should look for:
 * int overflow, array bounds, over-counting, graph is not a tree/connected
 * special cases (n=1?), set/unordered_set TLE, multi-set/set error
 * do something instead of nothing and stay organized
 */
