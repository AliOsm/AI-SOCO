#include <bits/stdc++.h>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
#define PI 3.14159265358979323846
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;

typedef pair<ll, ll> pll;
const int oo = 1E9;

int n;
vector<ll> in;

vector<pll> Delta(int v){
  vector<pll> res;
  for(int x = 1;SQR(x) < v;++x){
    int rem = v - SQR(x);
    if((rem & 1) == 0){
      int n = rem / (2 * x);
      if(n > 0 && 2 * n * x + SQR(x) == v)
        res.pb(mp(n + x, n));
    }
  }
  return res;
}

int main(){
  scanf("%d", &n);
  in.resize(n);
  for(int i = 1;i < n;i += 2)
    scanf("%I64d", &in[i]);

  bool fine = true;
  vector<ll> min_val(n, -1);
  for(int i = 1;i < n;i += 2){
    auto cand = Delta(in[i]);
    if(cand.empty()){fine = false;break;}
    if(i == 1){
      auto e = *min_element(all(cand));
      min_val[i] = e.fi;
      min_val[i - 1] = e.se;
    } else {
      int lo = min_val[i - 2];
      int use = oo, p_use;
      for(const auto& e : cand)
        if(e.se > lo){
          if(use > e.fi)
            p_use = e.se,
            use = e.fi;
        }
      if(use == oo){fine = false;break;}
      min_val[i] = use;
      min_val[i - 1] = p_use;
    }
  }

  if(!fine) printf("No\n");
  else {
    if(min_val[n - 1] == -1)
      min_val[n - 1] = min_val[n - 2] + 1;
    printf("Yes\n");
    for(int i = 0;i < n;++i){
      printf("%I64d%c",
        i == 0 ? SQR(min_val[i]) : SQR(min_val[i]) - SQR(min_val[i - 1]),
        i + 1 == n ? '\n' : ' ');
    }
  }

  return 0;
}
