#pragma GCC optimize("Ofast")                   
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>   
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define ya katala
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;

const int mod = (int)1e9 + 7;
const int N = (int)2e5 + 123;
const ll inf = (ll)3e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

int n, k, q, b[6];

struct e {
   int mn, mx;
}t[4 * N][(1 << 5)];

void upd (int pos, int mask, int val, int v = 1, int tl = 1, int tr = n) {
   if (tl == tr) {
      t[v][mask].mn = val;
      t[v][mask].mx = val;
      return;
   }
   int tm = tl + tr >> 1;
   if (pos <= tm) upd (pos, mask, val, v + v, tl, tm);
   else upd (pos, mask, val, v + v + 1, tm + 1, tr);
   t[v][mask].mn = min (t[v + v][mask].mn, t[v + v + 1][mask].mn);
   t[v][mask].mx = max (t[v + v][mask].mx, t[v + v + 1][mask].mx);
}

int get_max (int mask, int l, int r, int v = 1, int tl = 1, int tr = n) {
   if (tl > r || tr < l) return -mod;
   if (l <= tl && tr <= r) return t[v][mask].mx;
   int tm = tl + tr >> 1;
   return max (get_max (mask, l, r, v + v, tl, tm), get_max (mask, l, r, v + v + 1, tm + 1, tr));
}

int get_min (int mask, int l, int r, int v = 1, int tl = 1, int tr = n) {
   if (tl > r || tr < l) return mod;
   if (l <= tl && tr <= r) return t[v][mask].mn;
   int tm = tl + tr >> 1;
   return min (get_min (mask, l, r, v + v, tl, tm), get_min (mask, l, r, v + v + 1, tm + 1, tr));
}

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}
                                      
inline void Solve () {
   cin >> n >> k;
   for (int i = 1; i <= n; i ++) {
      for (int j = 0; j < k; j ++) cin >> b[j];
      for (int mask = 0; mask < (1 << k); mask ++) {
         int sum = 0;
         for (int j = 0; j < k; j ++) {
            if (mask & (1 << j)) sum += b[j];
            else sum -= b[j];   
         }
         upd (i, mask, sum);
      }
   }          
   cin >> q;
   while (q --) {
      int type;
      cin >> type;
      if (type == 1) {
         int pos;
         cin >> pos;
         for (int i = 0; i < k; i ++) cin >> b[i];
         for (int mask = 0; mask < (1 << k); mask ++) {
            int sum = 0;
            for (int i = 0; i < k; i ++) {
               if (mask & (1 << i)) sum += b[i];
               else sum -= b[i];
            }
            upd (pos, mask, sum);
         }
      }  
      else {
         int l, r;
         cin >> l >> r;
         int ans = 0;
         for (int mask = 0; mask < (1 << k); mask ++) {
            ans = max (ans, get_max (mask, l, r) - get_min (mask, l, r));
         }
         cout << ans << endl;
      }
   }
}
                                   
main () {                            
// freopen ("katala.in", "r", stdin);                        
// freopen ("katala.out", "w", stdout);              
   boost ();
   int tt = 1;
// cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
                                                                                                                                                            // Dalen - katala
