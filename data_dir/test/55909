#include <bits/stdc++.h>
using namespace std;
#define rep(i, a, b) for (int i = a; i < b; i++)
#define per(i, a, b) for (int i = a; i >= b; i--)
#define pb push_back
#define mp make_pair
#define mt make_tuple
#define eb emplace_back
#define sz(x) ((int) x.size())
#define rd(type, ...) type __VA_ARGS__; sc(__VA_ARGS__)
#define rdv(type, v, n) vector<type> v(n); rep(__ii, 0, n) cin >> v[__ii]
#define rdm(type, v, h, w) vector<vector<type>>(h, vector<type>(w)) v; rep(__ii, 0, h) rep(__jj, 0, w) cin >> v[__ii][__jj]
#define min_value(type) numeric_limits<type>::min()
#define max_value(type) numeric_limits<type>::max()
typedef long long ll;
void solve();
signed main() {ios::sync_with_stdio(false); cin.tie(0);
  cout << fixed; cout.precision(12); solve(); return 0;}
template<typename T> void prv(vector<T> v) {rep(__ii, 0, sz(v)) {if (__ii) cout << ' '; cout << v[__ii];} cout << '\n';} 
template<typename T> void prm(vector<vector<T>> v) {rep(__ii, 0, sz(v)) {rep(__jj, 0, v[__ii].size()) {if (__jj) cout << ' '; cout << v[__ii][__jj];} cout << '\n';}}
template<typename T> void sc(T& x) {cin >> x;}
template<typename Head, typename... Tail> void sc(Head& head, Tail&... tail) {cin >> head; sc(tail...);}
template<typename T> void pr(const T& x) {cout << x << '\n';}
template<typename Head, typename... Tail> void pr(const Head& head, const Tail&... tail) {cout << head << ' '; pr(tail...);}
template<typename... T> void err(const T&... cod) {pr(cod...); exit(0);}
 
const int inf = 2e9;
int n;
 
int find_x(vector<vector<int>> a) {
  vector<tuple<int, int, int>> b; // x, dl, dr
  rep(i, 0, n) b.eb(a[i][0], a[i][2], a[i][4]);
  sort(b.begin(), b.end());
  map<int, int> cnt;
  rep(i, 0, n) cnt[get<0>(b[i])]++;
  if (sz(cnt) == 1) return get<0>(b[0]);
 
  vector<int> le(n), ri(n);
  {
    int i = 0;
    while (i < n) {
      int j = i;
      while (j < n && get<0>(b[j]) == get<0>(b[i])) j++;
      rep(k, i, j) {
        le[k] = i - 1;
        ri[k] = j;
      }
      i = j;
    }
  }
 
  vector<int> sum_left(n), sum_right(n);
 
  {
    sum_right[0] = get<2>(b[0]);
    rep(i, 1, n) sum_right[i] = sum_right[i - 1] + get<2>(b[i]);
  }
 
  {
    sum_left[n - 1] = get<1>(b[n - 1]);
    per(i, n - 2, 0) sum_left[i] = sum_left[i + 1] + get<1>(b[i]);
  }
 
  rep(i, 0, n) {
    int p = (le[i] >= 0 ? sum_right[le[i]] : 0);
    int q = (ri[i] < n ? sum_left[ri[i]] : 0);
    if (p + q == n - cnt[get<0>(b[i])]) {
      return get<0>(b[i]);
    }
  }
 
  return inf;
}
 
int find_y(vector<vector<int>> a) {
  vector<tuple<int, int, int>> b; // y, du, dd
  rep(i, 0, n) b.eb(a[i][1], a[i][3], a[i][5]);
  sort(b.begin(), b.end());
  map<int, int> cnt;
  rep(i, 0, n) cnt[get<0>(b[i])]++;
  if (sz(cnt) == 1) return get<0>(b[0]);
 
  vector<int> le(n), ri(n);
  {
    int i = 0;
    while (i < n) {
      int j = i;
      while (j < n && get<0>(b[j]) == get<0>(b[i])) j++;
      rep(k, i, j) {
        le[k] = i - 1;
        ri[k] = j;
      }
      i = j;
    }
  }
 
  vector<int> sum_up(n), sum_down(n);
  {
    sum_up[0] = get<1>(b[0]);
    rep(i, 1, n) sum_up[i] = sum_up[i - 1] + get<1>(b[i]);
  }
 
  {
    sum_down[n - 1] = get<2>(b[n - 1]);
    per(i, n - 2, 0) sum_down[i] = sum_down[i + 1] + get<2>(b[i]);
  }
 
  rep(i, 0, n) {
    int p = (le[i] >= 0 ? sum_up[le[i]] : 0);
    int q = (ri[i] < n ? sum_down[ri[i]] : 0);
    if (p + q == n - cnt[get<0>(b[i])]) {
      return get<0>(b[i]);
    }
  }
 
  return inf;
}
 
void solve_case() {
  cin >> n;
  vector<vector<int>> a;
  rep(i, 0, n) {
    rdv(int, b, 6);
    a.pb(b);
  }
  int x = find_x(a);
  int y = find_y(a);
  if (x == inf || y == inf) pr(0);
  else pr(1, x, y);
}
 
void solve() {
  rd(int, qq);
  while (qq--) solve_case();
}