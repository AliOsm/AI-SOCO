#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
#define ll long long
#define ld long double
using namespace std;
const int N = 1e5 + 5, lg = ceil(log2(N));
vector<int>roots;
vector<int>lev[N];
vector<int>edges[N];
int n, m, v, p, sp[lg][N], in[N], out[N], lvl[N], id;
void build(){
    for(int i = 1; i <= n; i++)
        for(int j = 1; j < lg; j++)
            sp[j][i] = sp[j - 1][sp[j - 1][i]];
}
int get_kth(int node, int k) {
    for (int i = 0; i < lg; i++)
        if (k >> i & 1)
            node = sp[i][node];
    return node;
}
void dfs(int node, int parent){
    sp[0][node] = parent;
    lvl[node] = lvl[parent] + 1;
    in[node] = id++;
    lev[lvl[node]].push_back(in[node]);
    for(auto i : edges[node])
        if(i != parent)
            dfs(i, node);
    out[node] = id;
}
int solve(int v, int p){
    if(lvl[v] <= p) return 0;
    int kth = get_kth(v, p);
    return upper_bound(lev[lvl[v]].begin(), lev[lvl[v]].end(), out[kth]) - lower_bound(lev[lvl[v]].begin(), lev[lvl[v]].end(), in[kth]) - 1;
}
int main()
{
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    cin >> n;
    for(int i = 1; i <= n; i++){
        cin >> v;
        if(!v) roots.push_back(i);
        else edges[v].push_back(i);
    }
    for(auto i : roots) dfs(i, i);
    build();
    cin >> m;
    while(m--){
        cin >> v >> p;
        cout << solve(v, p) << ' ';
    }
    return 0;
}
