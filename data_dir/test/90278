#include <bits/stdc++.h>

using namespace std;

#define MOD 998244353

long long po(long long b, int p) {
	if (b == 0)
		return 0;
	long long re = 1;
	while (p) {
		if (p % 2)
			re = re * b % MOD;
		b = b * b % MOD;
		p /= 2;
	}
	return re;
}

long long inv(long long a) {
	return po(a, MOD - 2);
}

int n, m, k, ncr[5005], ans;
long long x[5005], y[5005];

int main() {
	scanf("%d%d%d", &n, &m, &k);
	if (n == 1)
		printf("%lld\n", inv(m));
	else if (m == 1)
		printf("%lld\n", po(n, k));
	else {
		long long aa = inv(m - 1);
		if (n <= k) {
			ncr[0] = 1;
			for (int i = 1; i <= n; i++) {
				for (int j = i; j; j--) {
					ncr[j] += ncr[j - 1];
					if (ncr[j] >= MOD)
						ncr[j] -= MOD;
				}
			}
			long long tmp = aa;
			for (int i = 1; i <= n; i++) {
				ans = (ans + ncr[i] * tmp % MOD * po(i, k)) % MOD;
				tmp = tmp * aa % MOD;
			}
		} else {
			x[0] = n;
			for (int i = 2; i <= k; i++) {
				for (int j = 0; j < i - 1; j++)
					y[j] = x[j];
				for (int j = 0; j < i - 1; j++) {
					x[j + 1] = (x[j + 1] + (n - i + MOD + 2 + j) * y[j]) % MOD;
					x[j] = (x[j] + j * y[j]) % MOD;
				}
			}
			long long tmp = 1;
			for (int i = 0; i < k; i++) {
				ans = (ans + x[i] * tmp) % MOD;
				tmp = tmp * aa % MOD;
			}
			ans = ans * aa % MOD * po((aa + 1) % MOD, n - k) % MOD;
		}
		long long cc = (m - 1) * inv(m) % MOD;
		printf("%lld\n", ans * po(cc, n) % MOD);
	}
}
