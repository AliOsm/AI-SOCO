#include<iostream>
#include<vector>
#include<cmath>
#include<algorithm>
#include<numeric>
#include<deque>
#include<queue>
#include<set>
#include<map>
#include<functional>
#include<random>
#include<string>
#include<chrono>
#include<cassert>
#include<iomanip>

using namespace std;

typedef long long ll;

int n, k;
string s;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> k >> s;
	vector<vector<int>> dp(n, vector<int>(n, 0));
	vector<int> suff_cnt(n);
	set<int> chars;/*
	for (int i = 0; i < n; ++i) {
		chars.insert(s[i]);
		pref_cnt[i] = (int)chars.size();
	}
	chars.clear();*/
	for (int i = n - 1; i > -1; --i) {
		chars.insert(s[i]);
		suff_cnt[i] = (int)chars.size();
	}
	for (int i = n - 1; i > -1; --i) {
		dp[i][0] = min(suff_cnt[i], k);
		for (int len = 1; len < n - i; ++len) {
			set<char> got;
			for (int j = i; j + len < n; ++j) {
				if (got.find(s[j]) == got.end()) {
					dp[i][len] = min(k, dp[i][len] + dp[j + 1][len - 1]);
					got.insert(s[j]);
				}
			}
		}
	}
	int sum = 0;
	for (int i = 0; i < n; ++i) {
		sum = min(k, sum + dp[0][i]);
	}
	if (k > sum + 1) {
		cout << -1;
	} else {
		if (k == sum + 1) {
			ll ans = 0;
			for (int len = 0; len < n; ++len) {
				ans += (ll)dp[0][len] * (n - 1 - len);
			}
			ans += n;
			cout << ans;
		} else {
			ll ans = 0;
			for (int len = n; len >= 1; --len) {
				ans += (ll)min(dp[0][len - 1], k) * (n - len);
				k -= min(k, dp[0][len - 1]);
			}
			cout << ans;
		}
	}
	return 0;
}