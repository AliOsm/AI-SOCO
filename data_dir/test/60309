#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <string>
#include <cstring>
#include <cstdio>
// DON'T DIVIDE
// Greedy, Prefix, Sets/Bsearch, Dfs/bfs, DP
// Stack, Bitmask, Dsu 
using namespace std;

long long a, b;
vector<long long> diva, divb; 

int main()
{
	ios::sync_with_stdio(0);
	cin >> a >> b;

	for(long long i = 1; i * i <= a; i++)
		if(a % i == 0)
			diva.push_back(i);

	for(long long i = 1; i * i <= b; i++)
		if(b % i == 0)
			divb.push_back(i);

	long long ans = 1e18, x = a + b;
	long long idxa = 0, idxb = 0;
	for(long long i = 1; i * i <= x; i++)
		if(x % i == 0)
		{
			while(idxa < diva.size() && diva[idxa] <= i)
				idxa++;
			while(idxb < divb.size() && divb[idxb] <= i)
				idxb++;
			if((a / diva[idxa - 1] <= x / i && diva[idxa - 1] <= i) || (b / divb[idxb - 1] <= x / i && divb[idxb - 1] <= i))
			{
				ans = min(ans, 2 * (i + (x / i)));
			}
		}

	cout << ans << "\n";

	return 0;
}
