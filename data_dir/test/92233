#include <bits/stdc++.h>

using namespace std;

const int N = 407, M = 26;

int nxt[N][M];

bool solve(string a, string b, int k){
    int n = a.size(), m = b.size();
    int dp[n + 1][m + 1];
    for(int i = 0; i <= n; ++i){
        for(int j = 0; j <= m; ++j){
            dp[i][j] = 1e9;
        }
    }
    dp[0][0] = -1;
    for(int i = 0; i <= n; ++i){
        for(int j = 0; j <= m; ++j){
            if(i && dp[i - 1][j] != 1e9){
                int to = a[i - 1] - 'a';
                if(nxt[dp[i - 1][j] + 1][to] == -1){}
                else dp[i][j] = min(dp[i][j], nxt[dp[i - 1][j] + 1][to]);
            }
            if(j && dp[i][j - 1] != 1e9){
                int to = b[j - 1] - 'a';
                if(nxt[dp[i][j - 1] + 1][to] == -1){}
                else dp[i][j] = min(dp[i][j], nxt[dp[i][j - 1] + 1][to]);
            }
        }
    }
    return dp[n][m] < k;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr); cout.tie(nullptr);

    int q;
    cin >> q;

    while(q--){
        string s, t;
        cin >> s >> t;

        for(int i = 0; i < M; ++i){
            nxt[s.size()][i] = -1;
        }
        for(int i = s.size() - 1; i >= 0; --i){
            for(int j = 0; j < M; ++j){
                nxt[i][j] = nxt[i + 1][j];
            }
            nxt[i][s[i] - 'a'] = i;
        }

        bool access = false;
        for(int i = 0; i < t.size(); ++i){
            string a = "", b = "";
            for(int j = 0; j < i; ++j) a += t[j];
            for(int j = i; j < t.size(); ++j) b += t[j];
            access |= solve(a, b, s.size());
        }

        if(access) cout << "YES" << endl;
        else cout << "NO" << endl;
    }
}
