#include <bits/stdc++.h>
using namespace std;

typedef pair <int, int> P;

const int dx[] = {2, 1, 2, 1, -2, -1, -2, -1};
const int dy[] = {1, 2, -1, -2, 1, 2, -1, -2};

int a[10][10], used[10][10], b[10][10];
char s[5], ans1[1500], ans2[1500], ans3[1500], ans4[1500];
stack <P> st;
int n, flag, tot;

void savans(int x, int y, int xx, int yy){
	tot++;
	ans1[tot] = x + 'a' - 1;
	ans2[tot] = y + '0';
	ans3[tot] = xx + 'a' - 1;
	ans4[tot] = yy + '0';
}

void printans(int x){
	printf("%c%c-%c%c\n", ans1[x], ans2[x], ans3[x], ans4[x]);
}

int encode(int x, int y){
	return (y - 1) * 8 + x;
}

void dfs1(int x, int y, int now){
	st.push({x, y});
	used[x][y] = 1;
	if (a[x][y]){
		a[x][y] = 0;
		flag = 1;
		return;
	}
	for (int i = 0, xx, yy; i <= 7; i++){
		xx = x + dx[i]; yy = y + dy[i];
		if (xx >= 1 && xx <= 8 && yy >= 1 && yy <= 8 && encode(xx, yy) > now && !used[xx][yy])
			dfs1(xx, yy, now);
		if (flag) return;
	}
	st.pop();
}

void dfs2(int x, int y, int now){
	st.push({x, y});
	used[x][y] = 1;
	if (!a[x][y]){
		a[x][y] = 1;
		flag = 1;
		return;
	}
	for (int i = 0, xx, yy; i <= 7; i++){
		xx = x + dx[i]; yy = y + dy[i];
		if (xx >= 1 && xx <= 8 && yy >= 1 && yy <= 8 && encode(xx, yy) < 64 - now && !used[xx][yy])
			dfs2(xx, yy, now);
		if (flag) return;
	}
	st.pop();
}

int main(){
	scanf("%d",&n);
	for (int i = 1, r, c; i <= n; i++){
		scanf("%s", s);
		r = s[0] - 'a' + 1;
		c = s[1] - '0';
		a[r][c] = 1;
		b[r][c] = 1;
	}
	if (n <= 32){
		for (int i = 1, cnt = 0; cnt < n; i++){
			for (int j = 1; j <= 8 && cnt < n; j++, cnt++){
				if (a[j][i]) continue;
				memset(used, 0, sizeof(used));
				flag = 0;
				dfs1(j, i, cnt + 1);
				while (!st.empty()){
					int x = st.top().first, y = st.top().second;
					st.pop();
					if (st.empty()) break;
					int xx = st.top().first, yy = st.top().second;
					savans(x, y, xx, yy);
				}
				a[j][i] = 1;
			}
		}
	}
	else{
		for (int i = 8, cnt = 0; cnt < 64 - n; i--){
			for (int j = 8; j >= 1 && cnt < 64 - n; j--, cnt++){
				if (!a[j][i]) continue;
				memset(used, 0, sizeof(used));
				flag = 0;
				dfs2(j, i, cnt);
				while (!st.empty()){
					int x = st.top().first, y = st.top().second;
					st.pop();
					if (st.empty()) break;
					int xx = st.top().first, yy = st.top().second;
					savans(xx, yy, x, y);
				}
				a[j][i] = 0;
			}
		} 
	} 
//	for (int i = 1; i <= tot; i++){
//		if (!b[ans1[i] - 'a' + 1][ans2[i] - '0']){
//			printf("Step %d: Move from an empty cell %d %d!\n", i, ans1[i] - 'a' + 1, ans2[i] - '0');
//			return 0;
//		}
//		if (b[ans3[i] - 'a' + 1][ans4[i] - '0']){
//			printf("Step %d: Move to full cell %d %d!\n", i, ans3[i] - 'a' + 1, ans4[i] - '0');
//			return 0;
//		}
//		b[ans1[i] - 'a' + 1][ans2[i] - '0'] = 0;
//		b[ans3[i] - 'a' + 1][ans4[i] - '0'] = 1;
//	}
//	for (int i = 1, cnt = 0; cnt < n; i++){
//		for (int j = 1; j <= 8, cnt < n; j++, cnt++){
//			if (!b[i][j]){
//				printf("Not complete! %d %d\n", i, j);
//				return 0;
//			}
//		}
//	}
	printf("%d\n", tot);
	for (int i = 1; i <= tot; i++) printans(i);
	return 0;
}