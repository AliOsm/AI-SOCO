//      ——By DD_BOND 

//#include<bits/stdc++.h>
#include<functional>
#include<algorithm>
#include<iostream>
#include<sstream>
#include<iomanip>
#include<climits>
#include<cstring>
#include<cstdlib>
#include<cstddef>
#include<cstdio>
#include<memory>
#include<vector>
#include<cctype>
#include<string>
#include<random>
#include<cmath>
#include<queue>
#include<deque>
#include<ctime>
#include<stack>
#include<map>
#include<set>

#define fi first
#define se second
#define MP make_pair
#define pb push_back
#define INF 0x3f3f3f3f
#define pi 3.1415926535898
#define lowbit(a)  (a&(-a))
#define lson l,(l+r)/2,rt<<1
#define rson (l+r)/2+1,r,rt<<1|1
#define Min(a,b,c)  min(a,min(b,c))
#define Max(a,b,c)  max(a,max(b,c))
#define debug(x)  cerr<<#x<<"="<<x<<"\n";

#pragma GCC optimize(3)
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

using namespace std;

typedef long long ll;
typedef pair<int,int> P;
typedef pair<ll,ll> Pll;
typedef unsigned long long ull;

const int seed=131;
const ll LLMAX=2e18;
const int MOD=1e9+7;
const double eps=1e-8;
const int MAXN=1e5+10;
const int hmod1=0x48E2DCE7;
const int hmod2=0x60000005;

inline ll sqr(ll x){ return x*x; }
inline int sqr(int x){ return x*x; }
inline double sqr(double x){ return x*x; }
ll gcd(ll a,ll b){ return b==0? a: gcd(b,a%b); }
ll exgcd(ll a,ll b,ll &x,ll &y){ ll d; (b==0? (x=1,y=0,d=a): (d=exgcd(b,a%b,y,x),y-=a/b*x)); return d; }
ll qpow(ll a,ll n){ll sum=1;while(n){if(n&1)sum=sum*a%MOD;a=a*a%MOD;n>>=1;}return sum;}
inline int dcmp(double x){  if(fabs(x)<eps) return 0;   return (x>0? 1: -1); }

vector<int>G[MAXN];
ll val[MAXN],st[MAXN][21],stv[MAXN][21],deep[MAXN];

void dfs(int u,int pre){
    st[u][0]=pre;
    stv[u][0]=gcd(val[u],val[pre]);
    deep[u]=deep[pre]+1;
    for(int i=1;(1<<i)<=deep[u];i++){
        st[u][i]=st[st[u][i-1]][i-1];
        stv[u][i]=gcd(stv[u][i-1],stv[st[u][i-1]][i-1]);
    }
    for(int i=0;i<G[u].size();i++){
        int v=G[u][i];
        if(v!=pre)  dfs(v,u);
    }
}

int main(void)
{
    ios::sync_with_stdio(false);    cin.tie(0);   cout.tie(0);   
    // freopen("/My_Mac/Resource/Project__C++/testdata.in","r",stdin);
    //freopen("/My_Mac/Resource/Project__C++/testdata.out","w",stdout);
    ll ans=0;   int n;  cin>>n;
    for(int i=1;i<=n;i++)   cin>>val[i];
    for(int i=1;i<n;i++){
        int u,v;    cin>>u>>v;
        G[u].pb(v),G[v].pb(u);
    }
    dfs(1,0);
    for(int i=1;i<=n;i++){
        ll u=i,w=val[i],bf=0;
        while(u){
            int p=u;
            for(int j=20;j>=0;j--)
                if((1<<j)<=deep[u]&&gcd(bf,stv[u][j])==w)
                    u=st[u][j];
            ans=(ans+(deep[p]-deep[u]+ (u!=0) )*w)%MOD;
            // cout<<i<<' '<<p<<' '<<u<<' '<<(deep[p]-deep[u]+ (u!=0) )*w<<endl;
            u=st[u][0],bf=w,w=gcd(w,val[u]);
        }
    }
    cout<<ans<<endl;
    return 0;
}