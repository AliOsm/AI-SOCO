#include<iostream>
#include<algorithm>
#include<vector>

#define PB push_back

using namespace std;

const int MAXN = 100005, MAXL = 20;
int par[MAXL][MAXN], h[MAXN], start[MAXN], finish[MAXN];
int n, dfs_num;
bool mark[MAXN];
vector<int> v[MAXN], hv[MAXN];

void DFS(int n)
{
	start[n] = dfs_num++;
	hv[h[n]].PB(start[n]);
	for(int x : v[n])
	{
		h[x] = h[n] + 1;
		par[0][x] = n;
		DFS(x);
	}
	finish[n] = dfs_num;
}

void make_par()
{
	for(int i = 1; i < MAXL; i++)
		for(int j = 0; j < n; j++)
			par[i][j] = par[i - 1][par[i - 1][j]];
}

int get_par(int n, int h)
{
	for(int i = MAXL - 1; i >= 0; i--)
		if( ((h >> i) & 1) )
			n = par[i][n];
	return n;
}

int main()
{
	cin >> n;
	int root;
	for(int i = 0; i < n; i++)
	{
		int x;
		cin >> x;
		x--;
		if(x != -1)
		{
			v[x].PB(i);
			mark[i] = true;
		}
	}
	for(int i = 0; i < n; i++)
		if(!mark[i])
			DFS(i);
	make_par();
	int q;
	cin >> q;
	for(int i = 0; i < q; i++)
	{
		int x, y;
		cin >> x >> y;
		x--;
		if(h[x] < y)
		{
			cout << 0 << ' ';
			continue;
		}
		int z = get_par(x, y);
		int l = lower_bound(hv[h[x]].begin(), hv[h[x]].end(), start[z]) - hv[h[x]].begin();
		int r = lower_bound(hv[h[x]].begin(), hv[h[x]].end(), finish[z]) - hv[h[x]].begin();
		cout << r - l - 1 << ' ';
	}
	cout << endl;
	return 0;
}
