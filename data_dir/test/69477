#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             2e16
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>


#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())


#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);

set<int>G[205];
vector<pii>edge;
int n;
int vis[205];
int dp[205],depth[205];

int id;
int dfs(int node,int pre)
{

    vis[node] = id;

    vector<int>vec;
    vec.push_back(0);
    vec.push_back(0);
    depth[node] = 1;
    for(int i : G[node]){
        if(i == pre)continue;
        dfs(i,node);
        vec.push_back(depth[i]);
        depth[node] = max(depth[node],1 + depth[i]);
    }
    SORT(vec);
    REV(vec);
    return dp[node] = 1 + vec[0] + vec[1];
}
int main()
{
    FastRead
    cin >> n;
    FOR(i,1,n - 1)
    {
        int a,b;
        cin >> a >> b;
        edge.push_back(mk(a,b));
        G[a].insert(b);
        G[b].insert(a);
    }
    int ans = 0;
    for(int in = 0 ;in < edge.size();in++){
        int a = edge[in].first;
        int b = edge[in].second;
        G[a].erase(b);
        G[b].erase(a);
        MEM(vis,0);
        id = 1;

        for(int i = 1;i <= n;i++){
            if(vis[i])continue;
            dfs(i,i);
            id++;
        }
        int A = 0, B = 0;
        FOR(i,1,n)if(vis[i] == 1)A = max(A,dp[i] - 1);
        FOR(i,1,n)if(vis[i] == 2)B = max(B,dp[i] - 1);

//        FOR(i,1,n)cout << dp[i] << " ";
//        cout << endl;
//        return 0;

//        cout << endl;
//        cout << A << " " << B << endl;

        ans = max(ans,A * B);
        G[a].insert(b);
        G[b].insert(a);
    }
    cout << ans << endl;
}
