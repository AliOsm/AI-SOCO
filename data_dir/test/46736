#include<bits/stdc++.h>
#include <regex>
#include<ext/numeric>
#include<ext/hash_map>
using namespace std;
using namespace __gnu_cxx;

#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)  (int)v.size()
#define WHITE -1
#define GREY   0
#define BLACK  1
#define CLR(a,v) memset(a,v,sizeof a)
#define PC(x) __builtin_popcount(x)
#define MP make_pair

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<ll> vll;
//typedef unsigned int ui;

typedef complex<double> point;
//#define X real()
//#define Y imag()
#define vec(a,b) ((b)-(a))
//#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define colliner pointOnLine

const double PI = acos(-1.0);

int dx[] = { 0, -1, 0, 1, -1, -1, 1, 1 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };

int DX[] = { 0, 1, 1, 1, 0, -1, -1, -1 };
int DY[] = { 1, 1, 0, -1, -1, -1, 0, 1 };

const int MAX = 105, MOD = 1e9 + 7, oo = (1 << 30), MAXLOG = 18;
const ll OO = 1ll << 60;
const double EPS = 1e-6;

int n, d, a[MAX], x[MAX], y[MAX], dist[MAX];
bool vis[MAX];

bool check(int p) {
	priority_queue<ii> q;
	q.push( { p, 0 });
	for (int i = 0; i < n; ++i)
		dist[i] = -oo;
	dist[0] = p;
	CLR(vis, 0);
	while (!q.empty()) {
		int u = q.top().second, c = q.top().first;
		q.pop();
		if (vis[u])
			continue;
		vis[u] = 1;
		for (int i = 0; i < n; ++i) {
			if (!vis[i]
					&& dist[i]
							< a[i] + dist[u]
									- d
											* (abs(x[i] - x[u])
													+ abs(y[i] - y[u]))) {
				dist[i] = a[i] + dist[u]
						- d * (abs(x[i] - x[u]) + abs(y[i] - y[u]));
				q.push( { dist[i], i });
			}
		}
	}
	return dist[n - 1] >= 0;
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
//	freopen("out.txt", "w",stdout);
#endif
	scanf("%d%d", &n, &d);
	for (int i = 1; i < n - 1; ++i)
		scanf("%d", &a[i]);
	for (int i = 0; i < n; ++i)
		scanf("%d%d", &x[i], &y[i]);
	int l = 1, r = oo;
	while (l < r) {
		int mid = l + ((r - l) >> 1);
		if (check(mid))
			r = mid;
		else
			l = mid + 1;
	}
	printf("%d\n", r);
}
