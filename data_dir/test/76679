#include <bits/stdc++.h>

//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

//using namespace __gnu_pbds;
using namespace std;

//template<typename T>
//using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef vector<int> vi;
typedef long long ll;

#define pb push_back
#define inf 0x3f3f3f3f
#define all(v) (v).begin() , (v).end()
#define ones(n) __builtin_popcount(n)
#define ONES(n) __builtin_popcountll(n)

int di[] = {0, 0, 1, -1, 1, 1, -1, -1};
int dj[] = {1, -1, 0, 0, -1, 1, 1, -1};

const int N = 2e3 + 5;
int n, k;
char a[N][N];
int cnt[N][N];
bool vis[N][N];

int main() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
#endif
    scanf("%d%d", &n, &k);
    for (int i = 0; i < n; i++)
        scanf("%s", &a[i]);

    int depth = 0;
    queue<pair<int, int> > q;
    q.push({0 , 0});

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i != 0)
                cnt[i][j] = cnt[i - 1][j];
            if (j != 0)
                cnt[i][j] = max(cnt[i][j], cnt[i][j - 1]);

            cnt[i][j] += a[i][j] == 'a';

            if ((i + j + 1) - cnt[i][j] <= k) {
                bool put = 0;
                if (depth < i + j + 1) {
                    put = 1;
                    depth = i + j + 1;
                    q = queue<pair<int, int> >();
                } else if (depth == i + j + 1)
                    put = 1;

                if (put) {
                    if (i != n - 1 && !vis[i + 1][j]) {
                        q.push({i + 1, j});
                        vis[i + 1][j] = 1;
                    }

                    if (j != n - 1 && !vis[i][j + 1]) {
                        q.push({i, j + 1});
                        vis[i][j + 1] = 1;
                    }
                }
            }
        }
    }

    string ans = string(depth, 'a');

    while (q.size()) {
        char mn = 'z';
        int sz = q.size();
        while (sz--) {
            auto cur = q.front();
            q.pop();
            mn = min(mn, a[cur.first][cur.second]);
            q.push(cur);
        }

        ans += mn;

        sz = q.size();
        while (sz--) {
            int i = q.front().first, j = q.front().second;
            q.pop();
            if (a[i][j] == mn) {
                if (i != n - 1 && !vis[i + 1][j]) {
                    q.push({i + 1, j});
                    vis[i + 1][j] = 1;
                }

                if (j != n - 1 && !vis[i][j + 1]) {
                    q.push({i, j + 1});
                    vis[i][j + 1] = 1;
                }
            }
        }
    }

    cout << ans;
}










