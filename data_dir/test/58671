#include<bits/stdc++.h>
#define MOD 1000000007
using namespace std;
typedef long long int ll;
double PI=4.00*(atan(1));

ll DFS_Util(vector<ll> graph[], ll start, bool visit[])
{
    visit[start]=true;
    ll size=graph[start].size();
    ll ans=0,temp;
    for(ll i=0;i<size;i++)
    {
        if(!visit[graph[start][i]])
        {
            temp=DFS_Util(graph,graph[start][i],visit);
            ans+=temp;
        }
    }
    ans++;
    return ans;
}

ll DFS(vector<ll> graph[], ll vertice, ll posgov[], ll k)
{
    bool visit[vertice+1];
    ll component[k];
    ll temp,store,size;
    for(ll i=1;i<=vertice;i++)
    {
        visit[i]=false;
    }
    for(ll i=0;i<k;i++)
    {
        visit[posgov[i]]=true;
        temp=0;
        size=graph[posgov[i]].size();
        for(ll j=0;j<size;j++)
        {
            if(!visit[graph[posgov[i]][j]])
            {
               store=DFS_Util(graph,graph[posgov[i]][j],visit);
               temp+=store;
            }
        }
        component[i]=temp;
    }
    ll sum=vertice-k;
    for(ll i=0;i<k;i++)
    {
        sum-=component[i];
    }
    ll ans=(sum)*(sum-1)/2;
    for(ll i=0;i<k;i++)
    {
        ans+=(component[i]*(component[i]-1)/2);
    }
    sort(component,component+k);
    reverse(component,component+k);
    ans+=(vertice-k);
    ans+=(sum*component[0]);
    return ans;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    ll vertice,edge,governement;
    cin>>vertice>>edge>>governement;
    ll posgov[governement];
    for(ll i=0;i<governement;i++)
    {
        cin>>posgov[i];
    }
    vector<ll> graph[vertice+1];
    ll edge1,edge2;
    for(ll i=1;i<=edge;i++)
    {
        cin>>edge1>>edge2;
        graph[edge1].push_back(edge2);
        graph[edge2].push_back(edge1);
    }
    ll count=DFS(graph,vertice,posgov,governement);
    ll result=count-edge;
    cout<<result;
    return 0;
}