#include <bits/stdc++.h>
using namespace std;

const int MAXN = 100005;
const int MAXTSIZE = 1 << 18;
int a[MAXN], b[MAXN];
queue<int> q[MAXN];
vector<int> tr[MAXTSIZE];

void Build(int u, int l, int r)
{
    if(l == r)
        tr[u].push_back(b[r]);
    else
    {
        int mid = l + r >> 1;

        Build(u * 2 + 0, l, mid);
        Build(u * 2 + 1, mid + 1, r);
        for(int i = 0; i < 2; ++i)
            tr[u].insert(tr[u].end(), tr[u * 2 + i].begin(), tr[u * 2 + i].end());
        sort(tr[u].begin(), tr[u].end());
    }

    return;
}

int Query(int u, int l, int r, int ql, int qr, int thr)
{
    int mid = l + r >> 1;

    if(ql == l && qr == r)
        return lower_bound(tr[u].begin(), tr[u].end(), thr) - tr[u].begin();
    else if(qr <= mid)
        return Query(u * 2 + 0, l, mid, ql, qr, thr);
    else if(ql > mid)
        return Query(u * 2 + 1, mid + 1, r, ql, qr, thr);
    else
        return Query(u * 2 + 0, l, mid, ql, mid, thr) + Query(u * 2 + 1, mid + 1, r, mid + 1, qr, thr);
}

int main()
{
    int n, k, qn, last = 0;

    // freopen("D:\\1.in", "r", stdin);
    // freopen("D:\\1.out", "w", stdout);

    scanf("%d%d", &n, &k);
    for(int i = 1; i <= n; ++i)
    {
        scanf("%d", &a[i]);
        if(q[a[i]].size() == k)
        {
            b[i] = q[a[i]].front();
            q[a[i]].pop();
        }
        q[a[i]].push(i);
    }
    Build(1, 1, n);
    scanf("%d", &qn);
    while(qn--)
    {
        int x, y, l, r;

        scanf("%d%d", &x, &y);
        l = (x + last) % n + 1;
        r = (y + last) % n + 1;
        if(l > r)
            swap(l, r);

        last = Query(1, 1, n, l, r, l);
        printf("%d\n", last);
    }

    return 0;
}
