#include "bits/stdc++.h"

#ifdef PRINTERS
#include "printers.hpp"
using namespace printers;
#define tr(a)		cerr<<#a<<" : "<<a<<endl
#else
#define tr(a)    
#endif
#define int 		long long
#define ll          long long
#define pb          push_back
#define mp          make_pair
#define pii         pair<int,int>
#define vi          vector<int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define endl        '\n'
#define rep(i,a,b)	for(int i=a;i<b;i++)
using namespace std;
int facts[1000001];
int invfacts[1000001];
ll expo(ll base, ll exponent, ll mod) {								//return base^exponent modulo modulus
    ll ans = 1;
    while(exponent !=0 ) {
        if((exponent&1) == 1) {
            ans = ans*base ;
            ans = ans%mod;
        }
        base = base*base;
        base %= mod;
        exponent>>= 1;
    }
    return ans%mod;
}
void solve(){
	facts[0]=1;
	for(int i=1;i<=1000000;i++){
		facts[i]=1LL*i*facts[i-1]%hell;
	}
	invfacts[0]=1;
	for(int i=1;i<=1000000;i++){
		invfacts[i]=expo(facts[i],hell-2,hell);
	}
	int n;
	cin>>n;
	map<int,int,greater<int>>m;
	rep(i,0,n){
		int temp;
		cin>>temp;
		m[temp]++;
	}
	int greater_nums=0;
	ll ans=0;
	for(auto i:m){
		ll permg=facts[greater_nums];
		ll perms=facts[n-i.S-greater_nums];
		if(greater_nums>0)ans+=(permg*perms%hell*facts[i.S]%hell*facts[greater_nums+i.S-1]%hell*invfacts[i.S-1]%hell*invfacts[greater_nums]%hell*facts[n]%hell*invfacts[greater_nums+i.S]%hell*invfacts[n-(greater_nums+i.S)]%hell+hell)%hell*i.F%hell;
		// cout<<i<<" "<<permg<<" "<<perms<<" "<<ans<<endl;
		ans%=hell;
		greater_nums+=i.S;
	}
	cout<<ans;
}

signed main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int t=1;
//	cin>>t;
	while(t--){
		solve();
	}
	return 0;
}