#include <bits/stdc++.h>
#define db(x) cerr<<#x<<" = "<<x<<"\n"
#define int long long
using namespace std;

typedef pair<int,int> ii;
const int MAX=2e5+5;
int n,p[MAX];
ii tree[4*MAX];

ii combine(ii x1,ii x2) {
	ii rs;
	rs.first=x1.first+x2.first;
	rs.second=x1.second+x2.second;
	return rs;
}

int sumCal(int val) {
	return val*(val+1)/2;
}

void update(int k,int l,int r,int pos) {
	if(l==r) {
		tree[k]=ii(pos,1);
		return;
	}
	int mid=(l+r)/2;
	if(pos<=mid)
		update(2*k,l,mid,pos);
	else
		update(2*k+1,mid+1,r,pos);
	tree[k]=combine(tree[2*k],tree[2*k+1]);
}

ii query(int k,int l,int r,int L,int R) {
	if(l>R||L>r)
		return ii(0,0);
	if(L<=l&&r<=R)
		return tree[k];
	int mid=(l+r)/2;
	return combine(query(2*k,l,mid,L,R),query(2*k+1,mid+1,r,L,R));
}

int findMedianPos(int k,int l,int r,int num) {
	if(l==r)
		return l;
	int mid=(l+r)/2;
	if(tree[2*k].second>=num)
		return findMedianPos(2*k,l,mid,num);
	return findMedianPos(2*k+1,mid+1,r,num-tree[2*k].second);
}

int32_t main() {
	ios_base::sync_with_stdio(false);
	// freopen("input","r",stdin);
	cin>>n;
	int x;
	for(int i=1;i<=n;i++) {
		cin>>x;
		p[x]=i;
	}
	int inv=0,dist=0;
	for(int i=1;i<=n;i++) {
		inv+=query(1,1,n,p[i]+1,n).second;
		update(1,1,n,p[i]);
		int tmpPos=findMedianPos(1,1,n,(i+1)/2);
		ii t1=query(1,1,n,1,tmpPos-1);
		ii t2=query(1,1,n,tmpPos+1,n);
		dist=(tmpPos*t1.second-t1.first)+(t2.first-tmpPos*t2.second)-sumCal((i-1)/2)-sumCal((i-1)-(i-1)/2);
		cout<<inv+dist<<' ';
	}
}