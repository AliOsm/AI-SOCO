#include <bits/stdc++.h>

using namespace std;
int const N=2e5+10,M=11,OO=2e9,oo=1e9+1;

int n;
pair<int,int > dd[N];
vector<pair<int,int > > edges;
vector<int > chain;
int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cin>>n;
    for(int i=1;i<=n;i++)cin>>dd[i].first,dd[i].second=i;
    sort(dd+1,dd+n+1,greater<pair<int,int > >());
    chain.push_back(dd[1].second*2);
    int i=2;
    for(int c=0;c<dd[1].first-1;c++,i++){
        edges.push_back({chain.back(),dd[i].second*2});
        chain.push_back(dd[i].second*2);
    }
    edges.push_back({chain.back(),dd[1].second*2-1});
    chain.push_back(dd[1].second*2-1);
    while(i<=n){
        edges.push_back({dd[1].second*2,dd[i].second*2});
        if(dd[i].first==1){
            edges.push_back({dd[i].second*2,dd[i].second*2-1});
        }else{
            dd[i].first-=2;
            edges.push_back({chain[dd[i].first],dd[i].second*2-1});
        }
        i++;
    }
    i = 2;
    int c = 1;
    int sz = chain.size();
    for(;c < sz-1;c++,i++){
        dd[i].first--;
        if(c+dd[i].first<(int)chain.size()-1){
            edges.push_back({chain[c+dd[i].first],chain[c]-1});            
        }else if(c+dd[i].first==(int)chain.size()-1){
            edges.push_back({chain.back(),chain[c]-1});
            chain.push_back(chain[c]-1);            
        }else if(c-dd[i].first>=0){
            edges.push_back({chain[c-dd[i].first],chain[c]-1});
        }else assert(0);
    }
    for(auto v:edges)
        cout<<v.first<<' '<<v.second<<endl;
    
    return 0;
}


