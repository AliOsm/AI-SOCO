#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>
#include <random>
#include <iomanip>


typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(tint i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl



using namespace std;



void imprimirVector (deque<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) )
		Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

void add (tint k, tint x, deque<tint> &fenwick)
{
	tint n = fenwick.size() -1;
	while (k <= n)
	{
		fenwick[k] += x;
		k += (k & -k);
	}
}

tint sum (tint k, deque<tint> &fenwick) // sum[1..k]
{
	tint s = 0;
	while (k >= 1)
	{
		s += fenwick[k];
		k -= (k & -k);
	}
	return s;
}



int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n;
	while (cin >> n)
	{
		deque<tint> p (n), w (4*n);
		forn(i,n)
			cin >> p[i];
		tint s = 0;
		forn(i,n)
		{
			s += abs(p[i]-i-1);
			add(i+1-p[i]+2*n,1,w); // [2*n] = 0
		}
		pair<tint,tint> best = {s,0};
		//~ debug(s);
		forn(i,n-1)
		{
			tint aux = p.back();
			p.pop_back();
			add(n-aux+i+2*n,-1,w);
			//~ tint buenos = sum(2*n-i-1,w);
			//~ debug(aux);
			
			//~ debug(buenos);
			s -= abs(aux-n);
			s += abs(aux-1); // no hace falta abs();
			s += n-2*sum(2*n-i-1,w)-1;
			//~ debug(s);
			add(1-aux-i-1+2*n,1,w);
			best = min(best,{s,i+1});
			//~ cout << "-------\n";
		}
		cout << best.first << " " << best.second << "\n";
		
		
	}
	return 0;
}



