#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 1e18+7;
const long long mod = 1e9+7;
const double eps = 1e-9;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (int (i)=0; (i)<(ll)(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int T;

int fact[2005];

int f[2][2005][1005];

int c[2005][2005];

int g[1005][1005];

int w = 1001;

void precalc(){
  fact[0] = 1;

  for(int i = 1; i < 2005; ++i){
    fact[i] = (fact[i - 1] * 1LL * i) % mod;
  }

  forn(i, 2005){
    c[i][0] = c[i][i] = 1;
    for(int j = 1; j < i; ++j){
      c[i][j] = (c[i - 1][j - 1] + c[i - 1][j]) % mod;
    }
  }

  f[0][0][1] = 1;
  for(int i = 0; i <= 50; ++i){

    forn(j, w){
      forn(l, w){
        if(!f[0][j][l]){
          continue;
        }
        f[0][j][l + 1] += f[0][j][l];
        f[0][j][l + 1] %= mod;
        f[1][j + l][l + 1] += f[0][j][l];
        f[1][j + l][l + 1] %= mod;
      }
    }

    forn(j, w){
      f[0][j][w] = (f[0][j][w] * 1LL * fact[i]) % mod;
      for(int e = j; e <= w; ++e){
       int diff = f[0][j][w];
       if(j){
        diff = (diff - f[0][j - 1][w] + mod) % mod;
       }
        g[i][e] = (g[i][e] + diff * 1LL * c[e - j + i + 1][i + 1]) % mod;
      }
    }

    forn(j, w + 1){
      forn(q, w + 1){
        f[0][j][q] = f[1][j][q];
        f[1][j][q] = 0;
      }
    }
  }
}

int main(void) {
  #ifdef __LOCAL__
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
  #endif
  precalc();
  scanf("%d", &T);
  forn(i, T){
    int a, b; scanf("%d %d", &a, &b);
    printf("%d\n", g[b][a]);
  }
  return 0;
}
