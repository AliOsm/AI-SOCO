#include <bits/stdc++.h>

using namespace std;

int divisor[(int)1e6+6],n,m,arr[3*(int)1e5+6];
pair<long long,long long>tree[12*(int)1e5+5];

void build(int root,int b,int e){
    if(b==e){
        tree[root].first=arr[b];
        if(arr[b]==1)tree[root].second=arr[b];
        return;
    }
    int m=(b+e)/2;
    build(root*2,b,m);
    build(root*2+1,m+1,e);
    tree[root].first=tree[root*2].first+tree[root*2+1].first;
    tree[root].second=tree[root*2].second+tree[root*2+1].second;
}

long long query(int root,int b,int e,int l,int r){
    if(b>r || e<l)return 0;
    if(b>=l && e<=r)return tree[root].first;
    int m=(b+e)/2;
    return query(root*2,b,m,l,r)+query(root*2+1,m+1,e,l,r);
}

void update(int root,int b,int e,int l,int r){
    if(b>r || e<l)return;
    if(tree[root].first-tree[root].second==2*(e-b+1-tree[root].second))return;
    if(b==e){
        tree[root].first=divisor[tree[root].first];
        return;
    }
    int m=(b+e)/2;
    update(root*2,b,m,l,r);
    update(root*2+1,m+1,e,l,r);
    tree[root].first=tree[root*2].first+tree[root*2+1].first;
}
int main(){
    //freopen("in.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    for(int i=1;i<=(int)1e6;i++){
        for(int j=i;j<=(int)1e6;j+=i){
            divisor[j]++;
        }
    }


    scanf("%d %d",&n,&m);
    for(int i=1;i<=n;i++)scanf("%d",&arr[i]);
    build(1,1,n);

    while(m--){
        int t,l,r;
        scanf("%d %d %d",&t,&l,&r);
        if(t==1)update(1,1,n,l,r);
        else printf("%lld\n",query(1,1,n,l,r));
    }


    return 0;
}
