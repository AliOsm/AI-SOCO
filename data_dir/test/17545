#include <stdio.h>
#include <memory>
const int kN = 1E5;

int NextInt(FILE *f) {
  int result = 0;
  int c;
  while ((c = getc(f)) < '0' && c > '9');
  do result = result * 10 + c - '0';
  while ((c = getc(f)) >= '0' && c <= '9');
  return result;
}

bool IsPrime(int i) {
  struct primes {
    int *a;
    primes(int n) {
      a = new int[n + 1]{};
      for (int i = 2; i <= n; ++i)
        if (a[i] == 0)
          for (int j = i; j <= n; j += i)
            a[j] = i;
    }
    bool is(int i) {
      return a[i] == i;
    }
  };
  static primes p(kN);
  return p.is(i);
}




template<class T>
class vector{
 public:
  vector(int size = 0): n_(size), size_(size), a_(new T[size]()) {}
  ~vector() {
    if (a_)
      delete[] a_;
  }
  void resize(int size) {
    if (size > n_) {
      n_ *= 2;
      if (size > n_)
        n_ = size;
      T *t = new T[n_];
      for (int i = 0; i < size_; ++i)
        t[i] = std::move(a_[i]);
      delete[] a_;
      a_ = t;
    }
    size_ = size;
  }
  int size() {
    return size_;
  }
  T& at(int i) {
    return a_[i];
  }
  void push_back(const T &t) {
    resize(size_ + 1);
    a_[size_ - 1] = t;
  }
  inline T& operator [](int i) {
    return at(i);
  }
 private:
  int n_, size_;
  T *a_;
};

struct pii{
  int a, b;
};

void Solve(int n) {
  vector<pii> v;
  vector<int> b(n + 1);
  for (int i = n; i > 1; --i) {
    if (!IsPrime(i) || 2*i > n)
      continue;
    int last = i;
    for (int p = i * 3; p <= n; p += i) {
      if (b[p]++)
        continue;
      if (last == -1)
        last = p;
      else
        v.push_back({last, p}), last= -1;
    }
    if (last != -1)
      b[i * 2]++, v.push_back({i * 2, last});
  }
  printf("%d\n", v.size());
  for (int i = 0; i < v.size(); ++i)
    printf("%d %d\n", v[i].a, v[i].b);
}

int main() {
  Solve(NextInt(stdin));
  
  return 0;
}

