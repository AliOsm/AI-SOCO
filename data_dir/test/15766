#include <cstdio>
int dp[610][610];
int dp1[610][610];
char s[1210];
int l[610], r[610];
int can(int ll, int rr, int p) {
	if (dp[ll][rr] != -1) {
		return dp[ll][rr];
	}
	if (ll + 1 == rr) {
		if (l[ll] == 1) {
			return dp[ll][rr] = p + 2;
		}
		return -2;
	}
	int &res = dp[ll][rr];
	int tl, tr;
	res = -2;
	dp1[ll][rr] = -1;
	for (int i = ll + 1; i < rr; i++) {
		tl = can(ll, i, p);
		if (tl == -2) continue;
		tr = can(i, rr, tl);
		if (tr == -2) continue;
		res = tr;
		dp1[ll][rr] = i;
	}
	if (res != -2) {
		return res;
	}
	tl = can(ll + 1, rr, p + 1);
	if (tl != -2 && tl - p >= l[ll] && tl - p <= r[ll]) {
		res = tl + 1;
	}
	return res;
}
void trv(int ll, int rr, int p) {
	if (ll + 1 == rr) {
		s[p] = '(';
		s[p+1] = ')';
		return;
	}
	if (dp1[ll][rr] != -1) {
		trv(ll, dp1[ll][rr], p);
		trv(dp1[ll][rr], rr, dp[ll][dp1[ll][rr]]);
	} else {
		s[p] = '(';
		s[dp[ll+1][rr]] = ')';
		trv(ll + 1, rr, p + 1);
	}
}
int main() {
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%d%d", &l[i], &r[i]);
	}
	for (int i = 0; i <= n; i++) {
		for (int j = 0; j <= n; j++) {
			dp[i][j] = -1;
		}
	}
	if (can(0, n, 0) != -2) {
		trv(0, n, 0);
		printf("%s\n", s);
	} else {
		printf("IMPOSSIBLE\n");
	}
	return 0;
}
