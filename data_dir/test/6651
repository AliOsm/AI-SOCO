// in the name of god 
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
#include <bits/stdc++.h>
//#include <unistd.h>
using namespace std ;
using namespace __gnu_pbds;
void operator+=(vector<int>&in1,const vector<int>&in2){for(int i=0;i<in2.size();i++)in1.push_back(in2[i]);}
#define y2 sdfklgjsdkfd
#define y1 sdfklgjsdkafd
#define L first 
#define R second
#define X first 
#define Y second
//#define int  long long 
typedef long long ll ;
typedef long double ld ;
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define ALL(x) (x).begin(),(x).end()
typedef pair < int , int > pii ; 
typedef pair < int , pii > pi_ii ;
typedef pair < pii , int > pii_i ;
typedef pair < pii , pii > pii_ii ;
#define ordered_set(TYPE) tree<TYPE, null_type, less<TYPE>, rb_tree_tag, tree_order_statistics_node_update>
//#define "%I64d" "%I64d
const int mod = 1e9+7 ;
const int maxL = 19 ;
const ll inf = 1e16 ;
const int baze = 850 ;
const int maxn = 2e3 +10 ;
const int base = 401 ;
string s , t , q ;
int dp [ maxn ] [ maxn ] , ans [ maxn ] , mx [ maxn ] ;

main ( )
{
  fast ;
  cin >> s >> t >> q ;
  int n = s . size ( )  ;
  for ( int i = n - 1 ; i >= 0 ; i -- )
    for ( int j = n - 1 ; j >= 0 ; j -- ) 
      if ( s [ i ] == s [ j ] )
	dp [ i ] [ j ] = dp [ i + 1 ] [ j + 1 ] + 1 ;
      else
	dp [ i ] [ j ] = 0 ;  
  for ( int i = 0 ; i < n ; i ++ )
      for ( int j = 0 ; j < i ; j ++ )
	mx [ i ] = max ( mx [ i ] , dp [ j ] [ i ] + 1 ) ;
  for ( int i = n - 1 ; i >= 0 ; i -- )
    if ( s . substr ( i , q . size ( ) ) == q )
      ans [ i ] = ans [ i + 1 ] + 1 ;
    else
      ans [ i ] = ans [ i + 1 ] ;
  int ret = 0 ;
  for ( int i = 0 ; i < n ; i ++ )
    if ( s . substr ( i , t . size ( ) ) == t )
      {
	int hlp = mx [ i ] ;
	hlp = max ( hlp , (int) max( t . size ( ), q . size ( ) ) ) ;
	if ( i + hlp - q . size ( )< maxn ) 
	  ret += ans [ i + hlp - q . size ( ) ] ;
      } 
  cout << ret << endl ;
}

