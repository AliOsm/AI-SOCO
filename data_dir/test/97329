//! Lets Get it
#include<bits/stdc++.h>
using namespace std;

typedef double                      ld;
typedef long long                   ll;
typedef pair<int,int>               pii;
typedef pair<ll,ll>                 pll;
typedef pair<string , string>       pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define F                           first
#define S                           second
#define sep                         ' '
#define endl                        '\n'
#define file_io                     freopen("input.txt" , "r+" , stdin) ; freopen("output.txt" , "w+" , stdout);
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define kill(x)                     return cout << x << endl , 0;
#define pb                          push_back

const ll MXN = 3e3 + 10;
const ll MXM = (1LL << 18) + 10;
const ll MX5 = 4e5 + 10;
const ll MX6 = 1e6 + 10;
const ll LOG = 20;
const ll INF = 1e18;
const ld eps = 1e-9;
const ll MOD = 1e9 + 9; //998244353;

ll power(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * power(a * a % md, b / 2, md) % md : power(a * a % md, b / 2, md) % md));
}
ll bmm(ll a,ll b){
    return (a%b==0 ? b : bmm(b,a%b));
}
string base2(ll n){
    string a="";while(n>=2){a+=(char)(n%2+'0');n/=2;}a+=(char)(n+'0');reverse(all(a));return a;
}

ll n, m, q, now = 2, last;
ll Jad[MX5][LOG], SZ[MX5], dis[MX5], A[MX5], PS[MX5][LOG];
vector<pll> G[MX5];
bool vis[MX5];

void DFS(ll u, ll par){
    SZ[u] = 1;
    Jad[u][0] = par;
    vis[u] = 1;
    for(int i = 1; i < LOG; i ++){
        Jad[u][i] = Jad[Jad[u][i - 1]][i - 1];
    }
    for(auto Pr : G[u]){
        ll v = Pr.F, id = Pr.S;
        if(!vis[v]){
            dis[v] = dis[u] + 1;
            DFS(v, u);
            SZ[u] += SZ[v];
        }
    }
    return;
}
ll k_Jad(ll u, ll k){
    string s = base2(k);
    ll p = 0;
    for(int i = s.size() - 1; i >= 0; i --){
        if(s[i] == '1'){
            u = Jad[u][p];
        }
        p ++;
    }
    return u;
}
ll LCA(ll u, ll v){
    if(dis[u] < dis[v]){
        swap(u, v);
    }
    ll d = dis[u] - dis[v];
    u = k_Jad(u, d);
    if(v == u){
        return v;
    }
    for(int i = LOG - 1; i >= 0; i --){
        if(Jad[u][i] != Jad[v][i]){
            u = Jad[u][i], v = Jad[v][i];
        }
    }
    v = Jad[v][0];
    return v;
}

ll solve(ll u, ll val){
    while(A[u] < val){
        u = Jad[u][0];
    }
    return u;
}

void Add(ll p, ll w){
    A[now] = w;
    ll par = solve(p, w);
    Jad[now][0] = par;
    PS[now][0] = w;
    for(int i = 1; i < LOG; i ++){
        Jad[now][i] = Jad[Jad[now][i - 1]][i - 1];
        if(PS[Jad[now][i - 1]][i - 1] == INF || PS[now][i - 1] == INF){
            PS[now][i] = INF;
        }
        else{
            PS[now][i] = PS[now][i - 1] + PS[Jad[now][i - 1]][i - 1];
        }
    }
    now ++;
    return;
}

int main(){
    fast_io
    //file_io
    A[0] = INF;
    for(int i = 0; i < LOG; i ++){
        PS[1][i] = INF;
        PS[0][i] = INF;
    }
    PS[1][0] = 0;
    cin >> q;
    while(q --){
        ll t, u, x;
        cin >> t >> u >> x;
        u = u ^ last;
        x = x ^ last;
        if(t == 1){
            Add(u, x);
        }
        else{
            ll ans = 0;
            for(int i = LOG - 1; i >= 0; i --){
                if(PS[u][i] <= x){
                    x -= PS[u][i];
                    ans += power(2, i, INF);
                    u = Jad[u][i];
                }
            }
            cout << ans << endl;
            last = ans;
        }
    }

    return 0;
}
//! N.N