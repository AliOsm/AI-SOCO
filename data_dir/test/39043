#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<int, int> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

vector<pair<ll, string>> ans;
void print(){
	cout << "YES" << endl;
	cout << (ll)ans.size() << endl;
	for(auto &el : ans)
		cout << el.first << " " << el.second << endl;
	exit(0);
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	
	ll n, m, k;
	cin >> n >> m >> k;
	
	if(4 * n * m - 2 * n - 2 * m < k){
		cout << "NO" << endl;
		return 0;
	}
	
	ll mn = min(k, m - 1);
	
	if(mn > 0)
		ans.push_back({mn, "R"});
	
	k -= mn;
	
	if(k == 0)
		print();
	
	mn = min(k, m - 1);
	
	if(mn > 0)
		ans.push_back({mn, "L"});
	
	k -= mn;
	
	if(k == 0)
		print();
	
	k--;
	ans.push_back({1, "D"});
	
	if(k == 0)
		print();
	
	for(int i = 2; i <= n; i++){
		string move = "RUD";

		ll cnt = min(k / 3, m - 1);
		
		if(cnt > 0)
			ans.push_back({cnt, move});
		
		k -= cnt * 3;
		
		if(k == 0)
			print();
		
		if(cnt != m -1){
			ll rem = k % 3;
			
			string aux = "";
			for(ll j = 0; j < rem; j++)
				aux += move[j];
				
			ans.push_back({1, aux});
			
			k -= rem;
			
			if(k == 0)
				print();
		}
		else{
			mn = min(m - 1, k);
			
			if(mn > 0)
				ans.push_back({mn, "L"});
			k -= mn;
			
			if(k == 0)
				print();
		}
		
		if(i != n){
			k--;
			ans.push_back({1, "D"});
	
			if(k == 0)
				print();
		}
		else{
			mn = min(n - 1, k);
			
			if(mn > 0)
				ans.push_back({mn, "U"});
			k -= mn;
			if(k == 0)
				print();
		}
	}
	
	cout << "NO" << endl;

	return 0;
}