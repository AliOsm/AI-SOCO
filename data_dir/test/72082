#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;
//typedef tree<
//        pair<long long, int>, // change type
//        null_type,
//        less<pair<long long, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)(x).size()
#define pb push_back
#define X first
#define Y second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
#define debug(x) cerr << #x << " : " << (x) << endl
const double PI = 3.14159265358979323846;
const double eps = (1e-5);
int isGreater(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}

const int MAX_X = 1005;
vector<int> p[MAX_X];

void clear()
{
    rep(i,0,MAX_X)
        p[i].clear();
}

string conc(int x, char c)
{
    string s(x, c);
    return s;
}

void solve()
{
    int n;
    cin >> n;
    clear();
    rep(i,0,n)
    {
        int x, y;
        cin >> x >> y;
        p[x].push_back(y);
    }
    string ans;
    int curX = 0, curY = 0;
    for (int x = 0; x < MAX_X; ++x)
    {
        if (p[x].empty())
            continue;
        sort(all(p[x]));
        ans += conc(x - curX, 'R');
        if (p[x][0] < curY)
        {
            cout << "NO\n";
            return;
        }
        ans += conc(p[x].back() - curY, 'U');
        curX = x;
        curY = p[x].back();
    }
    cout << "YES\n";
    cout << ans << '\n';
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
    int tc;
    cin >> tc;
    while(tc--)
    {
        solve();
    }
    return 0;
}