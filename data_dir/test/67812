// Sakhiya07 - Yagnik Sakhiya
 
#include <bits/stdc++.h>
using namespace std;
 
#define ll long long int
#define ld long double
#define ff first
#define ss second
#define pb push_back
#define all(x) x.begin(),x.end()
 
#define mp make_pair
#define bp __builtin_popcountll
#define MOD  1000000007
const int d = 20;
const int N = 100005;
#define pll pair<ll,ll>
#define FAST ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);srand(time(NULL));
int sz,basis[d],n,a[N],q; 
ll modularExponentiation(ll x,ll n)
{
    int result=1;
    while(n>0)
    {
        if(n % 2 ==1)
            result=(result * x)%MOD;
        x=(x*x)%MOD;
        n=n/2;
    }
    return result;
}

void insertVector(int mask) 
{
     for (int i = 0; i < d; i++) 
     {
          if ((mask & 1 << i) == 0) continue; 
          if (!basis[i]) 
          {
               basis[i] = mask;
               ++sz;
               return;
          }
          mask ^= basis[i];
     }

}
bool insertVector1(int mask) 
{
     for (int i = 0; i < d; i++) 
     {
          if ((mask & 1 << i) == 0) continue; 
          if (!basis[i]) 
          {
              return 0;
          }
          mask ^= basis[i];
     }
     return 1;
}
void solve()
{
     cin >> n >> q;
     for(ll i=0;i<n;i++)   cin >> a[i];
     pair<ll,pll> queries[q];
     for(ll i=0;i<q;i++)
     {
          cin >> queries[i].ff >> queries[i].ss.ff;
          queries[i].ff--;
          queries[i].ss.ss = i;
     }
     sort(queries,queries+q);
     ll j = 0;
     ll ans[q];
     for(ll i=0;i<n;i++)
     {
          insertVector(a[i]);
          while(j<q && queries[j].ff<=i)
          {
               bool chk = insertVector1(queries[j].ss.ff);
               ll temp = 1;
               if(chk==0)
               {
                    temp = 0;
               }
               else
               {
                    ll ex = (i+1) - sz;
                    temp = modularExponentiation(2,ex);
               }
               ans[queries[j].ss.ss] = temp;
               j++;
          }
     }
     for(ll i=0;i<q;i++)    cout<<ans[i]<<"\n";
} 

int main()
{
     FAST;
     ll t = 1;
//     cin >> t;
     while(t--)
     {
          solve();
     }
}