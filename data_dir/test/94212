#include <bits/stdc++.h>

using namespace std;

#ifdef SG
	#include <debug.h>
#else
	#define show(...)
	#define debug(...)
	#define deepen(...)
	#define timer(...)
#endif

#define ARG4(_1,_2,_3,_4,...) _4

#define forn3(i,l,r) for (int i = int(l); i < int(r); ++i)
#define forn2(i,n) forn3 (i, 0, n)
#define forn(...) ARG4(__VA_ARGS__, forn3, forn2) (__VA_ARGS__)

#define ford3(i,l,r) for (int i = int(r) - 1; i >= int(l); --i)
#define ford2(i,n) ford3 (i, 0, n)
#define ford(...) ARG4(__VA_ARGS__, ford3, ford2) (__VA_ARGS__)

#define ve vector
#define pa pair
#define tu tuple
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) ((int)(a).size())

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef unsigned char uc;
typedef pa<int, int> pii;
typedef pa<int, ll> pil;
typedef pa<ll, int> pli;
typedef pa<ll, ll> pll;
typedef ve<int> vi;

const ld pi = 3.1415926535897932384626433832795l;

template<typename T> inline auto sqr (T x) -> decltype(x * x) {return x * x;}
template<typename T1, typename T2> inline bool umx (T1& a, T2 b) {if (a < b) {a = b; return 1;} return 0;}
template<typename T1, typename T2> inline bool umn (T1& a, T2 b) {if (b < a) {a = b; return 1;} return 0;}

const int N = 200100;

ll w[N], h[N], c[N];

map<ll, ve<pll>> rectw, recth;

map<ll, ll> hgcd;

ll gcd(ll a, ll b) {
    if (a == 0 || b == 0)
        return a + b;
    return gcd(b, a % b);
}

int main () {
	//std::ios::sync_with_stdio(false);
	cout.setf(ios::showpoint | ios::fixed);
	cout.precision(20);
#ifdef SG
	freopen((problemname + ".in").c_str(), "r", stdin);
//	freopen((problemname + ".out").c_str(), "w", stdout);
#endif
    int n;
    cin >> n;
    forn(i, n) {
        cin >> w[i] >> h[i] >> c[i];
        rectw[w[i]].pb(mp(h[i], c[i]));
        recth[h[i]].pb(mp(w[i], c[i]));        
    }
    if (1ll * sz(rectw) * sz(recth) != n) {
        puts("0");
        return 0;        
    }
    if (sz(rectw) < sz(recth)) {
        swap(rectw, recth);
    }
    for (auto it: recth) {
        ll tekh = it.fs;
        ve<pll>& tek = it.sc;
        ll tekgcd = 0;
        forn(i, sz(tek)) {
               tekgcd = gcd(tekgcd, tek[i].sc);
        }
        hgcd[tekh] = tekgcd;
    }
    ll resw = rectw.begin()->fs;
    ve<pll> cand = rectw.begin()->sc;
    ve<ll> hgcds;
    forn(i, sz(cand)) {
        hgcds.pb(hgcd[cand[i].fs]);
    }
    ll num = cand[0].sc;
    set<ll> ans;
    for (int i = 1; 1ll * i * i <= num; ++i) {
        debug(num);
        if (num % i != 0)
            continue;
        auto f = [&](ll i) {
            ll res = 0;
            bool ok = 1;
            forn(j, sz(cand)) {
                if (cand[j].sc % i != 0) {
                    ok = 0;
                    break;                
                }
                ll hcol = cand[j].sc / i;
                if (hgcds[j] % hcol != 0) {
                    ok = 0;
                    break;
                }
                res += hcol * cand[j].fs;        
            }
            if (ok)
                ans.insert(res);
        };
        f(i);
        if (1ll * i * i != num) {
            f(num / i);
        }
        
    }
    cout << sz(ans) << endl;


	return 0;
}
