#include "bits/stdc++.h"
//#include "ext/pb_ds/tree_policy.hpp"
//#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
#define EX0 exit(0);
#define twop(x) (1LL<<x)

typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}


const int maxn = 100010;
vector<int>adj[maxn];
template<int maxn>
struct dsu{
    int f[maxn];
    int sum[maxn];
    dsu(){
        init();
    }
    void init(){
        REP(i,0,maxn)f[i] = i;
        REP(i,0,maxn)sum[i] = 1;
    }
    int fa(int c){
        if(c==f[c])return c;
        return f[c]=fa(f[c]);
    }
    void merge(int a,int b){
        if(fa(a)==fa(b))return;
        sum[fa(b)]+=sum[fa(a)];
        f[fa(a)] = fa(b);
    }
    bool same(int a,int b){
        return fa(a) == fa(b);
    }
};
dsu<maxn>bcj;
int id[maxn];
void bfs(int start){
    queue<int>q;
    q.push(start);
    id[start] = start;
    while(sz(q)){
        int f = q.front();q.pop();
        for(auto nxt:adj[f]){
            if(!id[nxt]){
                id[nxt] = start;
                q.push(nxt);
            }
        }
    }
    return;
}
int main(){
    int n,m,k;
    vector<int>gov;
    cin>>n>>m>>k;
    REP(i,0,k){
        int c;in(c);gov.PB(c);
    }
    REP(i,0,m){
        int a,b;cin>>a>>b;
        adj[a].PB(b);adj[b].PB(a);
        bcj.merge(a, b);
    }
    for(auto g:gov){
        bfs(g);
    }
    int largest = gov[0];
    REP(i,1,k){
        if(bcj.sum[bcj.fa(gov[i])]>bcj.sum[bcj.fa(largest)]){
            largest = (gov[i]);
        }
    }
    REP(i,1,n+1){
        if(!id[i]){
            bcj.merge(largest, i);
        }
    }
    ll ans = 0;
    for(auto g:gov){
        ll size = bcj.sum[bcj.fa(g)];
        ans+=size*(size-1)/2;
    }
    ans-=m;
    cout<<ans;
    return 0;
}
