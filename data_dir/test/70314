#include<bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update> 
#define ll long long

#ifdef sarthak
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cout << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
int begtime = clock();
#else
#define trace(...)
#endif

#ifndef sarthak
    #pragma GCC optimize("Ofast")
    #pragma GCC optimize("unroll-loops")
    // #pragma GCC target ("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#endif

#define foreach(it,ar) for (auto it = ar.begin(); it != ar.end(); it++)
#define fort(i,v) for(auto i:v)
#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) rep(i,sizeof(ar)/sizeof(ll)) ar[i]=val
#define fill2(ar,val) rep(i,sizeof(ar)/sizeof(ar[0])) rep(j,sizeof(ar[0])/sizeof(ll)) ar[i][j]=val
#define fill0(ar) memset(ar,0,sizeof(ar))
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld long double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sd(x) scanf("%d",&x)
#define slld(x) scanf("%lld",&x)
#define sd2(x,y) scanf("%d %d",&x,&y)
#define slld2(x,y) scanf("%lld %lld",&x,&y)
#define pd(x) printf("%d\n",x)
#define plld(x) printf("%lld\n",x)
#define pd2(x,y) printf("%d %d\n",x,y)
#define plld2(x,y) printf("%lld %lld\n",x,y)
#define all(ar) ar.begin(), ar.end()
#define endl '\n'
#define sz(x) (int)x.size()
#define len(x) (int)x.length()

typedef pair<ll, ll> ii;
typedef pair<ii, ll> iii;
typedef vector<ii> vii;
typedef vector<ll> vi;

#define INF 2000000000000000000
#define PI 3.14159265358979323846L

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rngb(chrono::steady_clock::now().time_since_epoch().count()); // can give negative values too

const ll N = 11;       // Dimensions of the matrix 
ll mat[N][N];

void mul_mat(ll a[N][N], ll b[N][N])       // Multiplies 'a' and 'b' and stores result in 'a'
{   
    ll tmp[N][N];
    fill2(tmp,0);

    for(ll i = 0; i < N; i++)
    {
        for(ll j = 0; j < N; j++) 
        {
            for(ll k = 0; k < N; k++) 
            {
                if(b[k][j]!=0 && a[i][k]>(INF/b[k][j]))
                {
                    tmp[i][j] = INF;
                }
                else if(tmp[i][j] >= INF-(a[i][k]*b[k][j]))
                    tmp[i][j] = INF;
                else
                    tmp[i][j] = (tmp[i][j] + a[i][k] * 1ll * b[k][j]);
            }
        }
    }

    rep(i,N)
    {
        rep(j,N)
        {
            a[i][j] = tmp[i][j];
        }
    }
}

ll res[N][N];                 // Final matrix is stored in 'res'

void matrixexpo(ll a[N][N], ll k)
{
    while(k!=0)
    {
        if(k%2==1)
            mul_mat(res,a);
        mul_mat(a,a);
        k = k/2;   
    }
}

bool check(ll a[N][N], ll x, ll k, ll n, vector<ll> v)
{
    rep(i,n)
    {
        rep(j,n)
        {
            if(j<=i)
                a[i][j] = 1;
            else
                a[i][j] = 0;
        }
    }

    fill0(res);
    rep(i,N)
    {
        res[i][i] = 1;
    }

    matrixexpo(a,x);
    rep(i,n)
    {
        ll num = 0;
        rep(j,n)
        {
            if(res[i][j]!=0 && v[j]>INF/res[i][j])
                num = INF;
            else if(res[i][j]*v[j]>=INF-num)
                num = INF;
            else
                num = num + (res[i][j]*v[j]);
            // if(x==1817118)
            //     trace(i,j,num,res[i][j],a[i][j]);
        }

        if(num>=k)
            return 1;
    }

    return 0;
}

void solve()
{
    ll n;
    cin >> n;

    ll k;
    cin >> k;
    ll a[n];
    vector<ll> v;
    bool hu = 0;
    
    rep(i,n)
    {
        cin >> a[i];
        if(hu || a[i]!=0)
        {
            hu = 1;
            v.pb(a[i]);
        }
    }
    rep(i,n)
    {
        if(a[i]>=k)
        {
            cout << 0 << endl;
            return;
        }
    }

    n = v.size();

    if(n>10)
    {
        ll ans = 1;
        while(true)
        {
            vector<ll> v2;
            v2.pb(v[0]);
            fr(i,1,v.size()-1)
            {
                if(v[i]>=k-v2[i-1])
                {
                    cout << ans << endl; 
                    return;
                }

                ll now = v2[i-1]+v[i];
                v2.pb(now);
            }
            v.clear();

            rep(i,v2.size())
            {
                v.pb(v2[i]);
            }
            ans++;
        }
    }
    else
    {
        rep(i,n)
        {
            rep(j,n)
            {
                if(j<=i)
                    mat[i][j] = 1;
                else
                    mat[i][j] = 0;
            }
        }

        ll lo = 1;
        ll hi = 1e18;

        while(lo<hi)
        {
            ll mid = (lo+hi)/2;
            if(check(mat,mid,k,n,v))
                hi = mid;
            else
                lo = mid+1;
        }

        cout << lo << endl;
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout << fixed;
    cout << setprecision(10);
    #ifdef sarthak
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    ll t = 1;
    // cin >> t;
    while(t--)
    {
        solve();
    }

    #ifdef sarthak
    cerr << "Time elapsed: " << (clock() - begtime)*1000/CLOCKS_PER_SEC << " ms\n\n";
    #endif
}
