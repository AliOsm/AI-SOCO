#pragma GCC optimize("Ofast")
#pragma GCC target("sse4")

#include <iostream>
#include <cstdio>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <queue>
#include <ctime>

using namespace std;

#define REP(i, n) for(int (i) = 0; (i) < (n); (i)++)
#define SZ(a) (int)(a).size()
#define ALL(a) (a).begin(), (a).end()

const int N = 100100;
vector<int> g[N];
int d[N];
int n, ans = 0;
set<pair<int, int> > s;

int bfs() {
    vector<char> used(n, false);
    queue<int> q;
    q.push(0);
    used[0] = true;
    int lst = -1;
    while (!q.empty()) {
        int v = q.front();
        q.pop();
        lst = v;
        REP(i, SZ(g[v])) {
            int to = g[v][i];
            if (used[to]) continue;
            q.push(to);
            used[to] = true;
        }
    }
    return lst;
}

void dfs(int v, int pr) {
    REP(i, SZ(g[v])) {
        int to = g[v][i];
        if (to == pr) continue;
        dfs(to, v);
        d[v] = max(d[v], d[to] + 1);
    }
}

void solve(int v) {
    ++ans;
    int idx = -1;
    REP(i, SZ(g[v])) {
        int to = g[v][i];
        if (d[to] > d[v]) continue;
        if (d[to] == d[v] - 1) {
            idx = i;
            break;
        }
    }
    REP(i, SZ(g[v])) {
        int to = g[v][i];
        if (d[to] > d[v]) continue;
        if (i == idx) {
            solve(to);
        } else {
            s.insert(make_pair(d[to], to));
        }
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
  //  freopen("input.txt", "r", stdin);
    cin >> n;
    if (n == 1) {
        cout << 1 << endl;
        return 0;
    }
    REP(i, n - 1) {
        int u, v;
        cin >> u >> v;
        --u, --v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    int root = bfs();
    dfs(root, -1);
    s.insert(make_pair(d[root], root));
    vector<int> res;
    res.push_back(1);
    while (!s.empty()) {
        int v = s.rbegin()->second;
        s.erase(make_pair(d[v], v));
        solve(v);
        res.push_back(ans);
    }
    while (SZ(res) < n) {
        res.push_back(n);
    }
    REP(i, SZ(res)) cout << res[i] << " ";
    cout << endl;
    return 0;
}