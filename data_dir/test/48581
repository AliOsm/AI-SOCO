#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
#define sc(a) scanf("%d", &a)
#define sc2(a, b) scanf("%d%d", &a, &b)
#define sc3(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define scs(a) scanf("%s", a)
#define pri(x) printf("%d\n", x)
#define prie(x) printf("%d ", x)
#define mp make_pair
#define pb push_back
#define BUFF ios::sync_with_stdio(false);
#define db(x) cerr << #x << " == " << x << endl
typedef long long int ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef vector<ii> vii;
typedef vector< vii> vvii;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3fll;
const ld pi = acos(-1);
const int MOD = 1e9 + 7;
const int N=1e5+10;
int p[N],id[N];
int findSet(int u){
	if(p[u]!=u) return p[u]=findSet(p[u]);
	return p[u];
}

void unionSet(int u, int v)
{	int x = findSet(u), y=findSet(v);
	if(x!=y) p[x]=y;
}

int n,m,us[N];
vii ed;
vi g[N];

bool pau=false;

int dfs(int u, int col){
	us[u]=col;
	int ncol=2;
	if(col==2) ncol=1;
	for(int v: g[u]){
		if(us[v]==col) pau=true;
		else if(!us[v]) dfs(v,ncol);
	}
	return 1;
}

int main()
{
	for(int i=0;i<N;i++) p[i]=i;
	sc2(n,m);
	for(int i=0;i<m;i++){
		int u,v,w;
		sc3(u,v,w);
		if(w==0) ed.pb(mp(u,v));
		else unionSet(u,v);
	}
	int f=1;
	for(int i=1;i<=n;i++) findSet(i);

	for(int i=1;i<=n;i++){
		if(!id[p[i]]) id[p[i]]=f++;
		id[i]=id[p[i]];
	}

	for(ii x : ed){
		g[id[x.first]].pb(id[x.second]);
		g[id[x.second]].pb(id[x.first]);
	}
	int comp=0;
	for(int i=1;i<f;i++){
		if(!us[i]) dfs(i,1),comp++;
	}
	if(pau){
		cout<<0<<endl;
	}
	else{
		ll r=1;	
		comp--;
		while(comp--){
			r*=2ll;
			r%=MOD;
		}
		cout<<r<<endl;
	}
	return 0;
}
