#include <bits/stdc++.h>
using namespace std;

const int N = 100 + 10, inf = 1e6;

string s[N];
vector <int> adj[N];
int vis[N], dist[N];
bool is_val = true, mark[N];
vector <int> tp;

void dfs(int v)
{
	vis[v] = 1;
	for (auto u : adj[v])
	{
		if(!vis[u])
			dist[u] = dist[v] + 1, dfs(u);
		else if(vis[u] < 2)
			is_val = false;
	}
	vis[v] = 2;
	tp.push_back(v);
}

bool ok(int x, int y)
{
	int p , q;
	for (int i = 0; i < 26; i++)
	{
		if(x == tp[i])
			p = i;
		if(y == tp[i])
			q = i;
	}
	return p < q;
}

int main()
{
	int n;
	cin >> n;
	bool last = 0;
	for (int i = 0; i < n; i++)
		cin >> s[i];
	vector <int> ver;
	for (int i = 0; i < n; i++)
	{
		for (int j = i + 1; j < n; j++)
		{
			int pos = 0;
			while(s[i][pos] == s[j][pos] && pos < s[i].size() && pos < s[j].size())
				pos++;
			if(pos != s[i].size() && pos == s[j].size())
			{
				cout << "Impossible\n";
				return 0;
			}
			if(pos != s[i].size() && pos != s[j].size())
			{
				adj[s[i][pos] - 'a'].push_back(s[j][pos] - 'a');
			}
		}
	}
	for (int i = 0; i < 26; i++)
	{
		if(!vis[i])
			dfs(i);
	}
	if(!is_val)
	{
		cout << "Impossible\n";
	}
	else
	{
		for (int i = 0; i < 26; i++)
		{
			int v = i;
			for (auto u : adj[v])
			{
				if(ok(v, u))
				{
					cout << "Impossible\n";
					return 0;
				}
			}
		}
		for (int i = 25; ~i; i--)
			cout << char(tp[i] + 'a');
		cout << "\n";
	}
}
