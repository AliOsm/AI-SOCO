#include <bits/stdc++.h>
using namespace std;

#define all(x) begin(x), end(x)
#define sz(x) (int)(x).size()

using ll = long long;
using ld = long double;
using pt = complex<ld>;

constexpr ll inf = 0x3FFFFFFFFFFF;

constexpr ll HALF = 18;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	/*ll t;
	cin >> t;
	for (ll i = 0; i < t; i++) {
		ll n, x, a, b;
		cin >> n >> x >> a >> b;
		cout << min(n - 1, abs(a - b) + x) << endl;
	}*/
	/*ll t;
	cin >> t;
	for (ll i = 0; i < t; i++) {
		ll x, y;
		cin >> x >> y;
		while (x < y && x > 1) {
			ll xx = (x / 2) * 3;
			if (xx <= x) break;
			x = xx;
		}
		cout << (x < y ? "NO" : "YES") << endl;
	}*/
	/*ll t;
	cin >> t;
	for (ll i = 0; i < t; i++) {
		ll n;
		cin >> n;
		ll res = inf;
		map<ll, ll> pos;
		for (ll i = 0; i < n; i++) {
			ll x;
			cin >> x;
			if (pos.find(x) != pos.end()) {
				res = min(res, i - pos[x] + 1);
			}
			pos[x] = i;
		}
		if (res == inf) res = -1;
		cout << res << endl;
	}*/
	/*ll t;
	cin >> t;
	for (ll i = 0; i < t; i++) {
		ll n;
		cin >> n;
		vector<ll> monsters(n);
		for (ll j = 0; j < n; j++) {
			cin >> monsters[j];
		}
		ll m;
		cin >> m;
		map<ll, ll> heroes;
		for (ll j = 0; j < m; j++) {
			ll p, s;
			cin >> p >> s;
			auto it = heroes.find(s);
			if (it == heroes.end()) {
				it = heroes.insert({s, p}).first;
			}
			while (it != heroes.begin() && prev(it)->second < it->second) {
				heroes.erase(prev(it));
			}
			if (next(it) != heroes.end() && it->second < next(it)->second) {
				heroes.erase(it);
			}
		}
		ll res = 0;
		ll l = 0;
		while (l < n) {
			res++;
			ll nextl = l;
			ll ma = -1;
			while (nextl < n) {
				ma = max(ma, monsters[nextl]);
				auto it = heroes.upper_bound(nextl - l);
				if (it == heroes.end()) break;
				if (it->second < ma) break;
				nextl++;
			}
			if (nextl == l) {
				res = -1;
				break;
			}
			l = nextl;
		}
		cout << res << endl;
	}*/
	/*vector<ll> l(3);
	vector<vector<ll>> in(3);
	for (ll i = 0; i < 3; i++) {
		cin >> l[i];
	}
	for (ll i = 0; i < 3; i++) {
		in[i].assign(l[i], 0);
		for (ll j = 0; j < l[i]; j++) {
			cin >> in[i][j];
			in[i][j]--;
		}
		sort(all(in[i]));
	}
	ll res = inf;
	vector<pair<ll, ll>> tries;
	auto add = [&](ll l, ll r){
		tries.push_back({l, max(l, r)});
		tries.push_back({min(l, r), r});
	};
	add(in[0].back() + 1, in[1].back() + 1);
	add(in[1][0], in[2][0]);
	add(in[0].back() + 1, in[2][0]);
	add(in[1][0], in[1].back()+1);
	for (auto e : tries) {//this should be wrong...?
		ll cur = 0;
		for (ll x : in[0]) if (x >= e.first) cur++;
		for (ll x : in[1]) if (x < e.first || x >= e.second) cur++;
		for (ll x : in[2]) if (x < e.second) cur++;
		res = min(cur, res);
	}
	cout << res << endl;*/
	ll n;
	cin >> n;
	vector<ll> in(n);
	for (ll i = 0; i < n; i++) {
		cin >> in[i];
	}
	map<vector<ll>, ll> m;
	for (ll i = 0; i < (1ll << HALF); i++) {
		vector<ll> cur(n);
		for (ll j = 0; j < n; j++) {
			cur[j] = __builtin_popcountll((in[j] ^ i) & ((1ll << HALF) - 1));
		}
		m[cur] = i;
	}
	for (ll sum = 0; sum < 32; sum++) {
		for (ll i = 0; i < (1ll << (31 - HALF)); i++) {
			vector<ll> needed(n, sum);
			for (ll j = 0; j < n; j++) {
				needed[j] -= __builtin_popcountll(((in[j] >> HALF) ^ i) & ((1ll << HALF) - 1));
			}
			auto it = m.find(needed);
			if (it == m.end()) continue;
			cout << ((i << HALF) | m[needed]) << endl;
			return 0;
		}
	}
	cout << -1 << endl;
}
