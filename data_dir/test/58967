#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265359
#endif // M_PI
#define endl "\n"
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
using namespace std;
typedef long long LL;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
struct Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;

int main()
{
    int n, m, k;
    cin >> n >> m >> k;
    vector <int> v(n);
    GET(v, n);
    vector <int> sum(n + 1);
    FOR (i, 0, n) {
        sum[i + 1] = sum[i] ^ v[i];
    }
    vector <vector <int>> a(2000000);
    FOR (i, 0, n + 1) {
        a[sum[i]].push_back(i);
    }
    int s = min((int)sqrt(n + 1), 290);
    int t = (n + s) / s;
    vector <vector <LL>> block(s + 1, vector <LL> (n + 1));
    FOR (i, 0, s) {
        FOR (j, i * t, n + 1) {
            block[i][j] = upper_bound(IT(a[sum[j] ^ k]), j) - lower_bound(IT(a[sum[j] ^ k]), i * t);
            if (j != 0) {
                block[i][j] += block[i][j - 1];
            }
        }
    }
    FOR (i, 0, m) {
        int l, r;
        cin >> l >> r;
        --l, --r;
        int pos = l / t;
        LL ans = block[pos + 1][r + 1];
        if (k == 0) {
            ans -= r + 2 - l;
        }
        FOR (j, l, min((pos + 1) * t, r + 2)) {
            ans += upper_bound(IT(a[sum[j] ^ k]), r + 1) - lower_bound(IT(a[sum[j] ^ k]), j);
        }
        cout << ans << endl;
    }
}
