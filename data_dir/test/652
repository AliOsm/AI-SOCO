#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <cmath>
#include <ctime>
#include <string>
#include <cstdlib>
#include <algorithm>
using namespace std;
#define read            freopen("C:\\Users\\USER\\Desktop\\in.txt", "r", stdin)
#define write           freopen("C:\\Users\\USER\\Desktop\\out.txt", "a", stdout)
#define pii             pair<int, int>
#define ff              first
#define ss              second
#define inf             1<<30
#define fin(i, a, n)    for (i=(a); i<(n); i++)
#define fid(i, n, a)    for (i=(n)-1; i>=(a); i--)
#define in(a)           scanf("%I64d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%I64d%I64d", &a, &b)
#define in3(a, b, c)    scanf("%I64d%I64d%I64d", &a, &b, &c)
#define pn              printf("\n");
#define pcs(a)          printf("Case %I64d: ", a)
#define pr(a)           printf("%I64d\n", a)
#define pr(a)           printf("%I64d\n", a)
#define prs(a)          printf("%I64d ", a)
#define pr2(a, b)       printf("%I64d %I64d\n", a, b)
#define pr3(a, b ,c)    printf("%I64d %I64d %I64d\n", a, b, c)
#define MP              make_pair
#define vi              vector<int>
#define msi             map<string, int>
#define mii             map<int, int>
#define si              set<int>
#define _ceil(n, a)     (n)%(a)==0?(n)/(a):(n)/(a)+1;
#define cl              clear()
#define sz              size()
#define pb              push_back
#define MAX(A,B)        (((A)>(B))?(A):(B))
#define MIN(A,B)        (((A)<(B))?(A):(B))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
typedef long long LL;
//LL  dx[]={1,0,-1,0};LL dy[]={0,1,0,-1}; //4 Direction
//LL  dx[]={1,1,0,-1,-1,-1,0,1};LL dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//LL  dx[]={2,1,-1,-2,-2,-1,1,2};LL dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(LL n, LL pos) {return (bool) (n & (1<<pos));}
//LL  on(LL n, LL pos) {return n | (1<<pos);}
//LL  off(LL n, LL pos) {return n & ~(1<<pos);}
//bool operator < (const data &d) const{return cost<d.cost;}

/* ***************************************************************************************
   *************************************************************************************** */
#define M 100100
LL val[M], visited[M], degree[M], least[M], n, EXCEEDED=false;
vector<LL> A[M];
void _visit()
{
    for (LL i=0; i<M; i++) visited[i]=false;
}
LL gcd(LL a, LL b)
{
    return b==0?a:gcd(b, a%b);
}
LL dfs(LL u)
{
    LL i, k, v, g=1, minn=inf, p=0, temp;
    visited[u]=true;

    if (degree[u]==1) return 1;

    for (i=0; i<A[u].sz; i++)
    {
        v=A[u][i];
        if (!visited[v]&&!EXCEEDED)
        {
            temp=dfs(v);

            p++;

            g=(g*temp)/gcd(g, temp);
        }
    }
if (p*g>100000000) EXCEEDED=true;

return p*g;
}
void second_dfs(LL u, LL val)
{
    LL i, v;
    visited[u]=true;
    least[u]=val;
    for (i=0; i<A[u].sz; i++)
    {
        v=A[u][i];
        if (!visited[v])
        {
            second_dfs(v, val/(degree[u]-1));
        }
    }
}
int main()
{
    //change inf in case of long long
    //read;
    LL i, j, k, sum=0, minn=inf;

    in(n);
    for (i=1; i<=n; i++)
    {
        in(val[i]);
        visited[i]=false;
        sum+=val[i];
        degree[i]=0;
    }

    for (i=0; i<n-1; i++)
    {
        in2(j, k);

        A[k].pb(j);
        A[j].pb(k);

        degree[j]++;
        degree[k]++;
    }
    degree[1]++;
    k=dfs(1);

    if (EXCEEDED)
    {
        pr(sum);
        return 0;
    }

    _visit();
    second_dfs(1, k);

    for (i=1; i<=n; i++)
    {
        if (degree[i]==1) minn=MIN(minn, val[i]/least[i]);
    }
pr(sum-k*minn);
//file?
return 0;
}
