#include "bits/stdc++.h"
using namespace std;
// iteration and input/output stream
#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define srep(i, begin, end) for (__typeof(end) i = begin; i != end; i++)
#define printarr(x) rep(i,0,x.size()) cout<<x[i]<<" "; cout<<endl;
 
#define si(x) int x; scanf("%d", &x)
#define sll(x) ll x; scanf("%lld", &x)
#define pi(x) printf("%d", x)
#define pll(x) printf("%lld", x)
#define nl prinf("\n")
#define tr(cont,it) \
for(decltype(cont.begin()) it = cont.begin(); it!= cont.end() ; it++)
 
#define tc() int tcase; cin >> tcase ; rep(tc,1,tcase+1)
//STL shortcuts
#define pb push_back
#define pf push_front
#define pob pop_back
#define pof pop_front
#define F first
#define S second
#define MP make_pair
 
#define trace1(x)                cerr<<#x<<": "<<x<<endl
#define trace2(x, y)             cerr<<#x<<": "<<x<<" | "<<#y<<": "<<y<<endl
#define trace3(x, y, z)          cerr<<#x<<":" <<x<<" | "<<#y<<": "<<y<<" | "<<#z<<": "<<z<<endl
#define trace4(a, b, c, d)       cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl
#define trace5(a, b, c, d, e)    cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<endl
#define trace6(a, b, c, d, e, f) cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<" | "<<#f<<": "<<f<<endl
 
typedef long long int ll; // 64 bit integer
typedef unsigned long long int  ull; // 64 bit unsigned integer
typedef long double ld;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef pair<int,int> pii;
typedef pair<int,ll> pill;
 
inline void smax(int &x , int y) { x = max(x , y) ; }
inline void smin(int &x , int y) { x = min(x , y) ; }
 
vector<int>
sort_cyclic_shifts(string const&s) 
{
 int n = s.size();
 const int alphabet = 27;
 vector<int> p(n), c(n),
 cnt(max(alphabet, n), 0);
 for (int i = 0; i < n; i++)
  cnt[s[i]-'a'+1]++;
 for (int i = 1; i < alphabet;i++)
  cnt[i] += cnt[i-1];
 for (int i = 0; i < n; i++)
  p[--cnt[s[i]-'a'+1]] = i;
 c[p[0]] = 0;
 int classes = 1;
 for (int i = 1; i < n; i++) {
  if (s[p[i]] != s[p[i-1]])
   classes++;
  c[p[i]] = classes - 1;
 }
vector<int> pn(n), cn(n);
 for (int h = 0; (1 << h) < n;++h) 
 {
  for (int i = 0; i < n;i++)
  {
    pn[i] = p[i] - (1 <<h);
    if (pn[i] < 0)
      pn[i] += n;
  }
 fill(cnt.begin(),
 cnt.begin() + classes, 0);
 for (int i = 0; i < n;i++)
 cnt[c[pn[i]]]++;
 for (int i = 1; i <classes; i++)
 cnt[i] += cnt[i-1];
 for (int i = n-1; i >= 0;i--)
 p[--cnt[c[pn[i]]]] = pn[i];
 cn[p[0]] = 0;
 classes = 1;
 for (int i = 1; i < n;i++) {
 pair<int, int> cur ={c[p[i]], c[(p[i] + (1 << h)) %n]};
 pair<int, int> prev ={c[p[i-1]], c[(p[i-1] + (1 << h))% n]};
 if (cur != prev)
 ++classes;
 cn[p[i]] = classes -1;
 }
 c.swap(cn);
 }
 return p;
}
vector<int>
suffix_array_construction(string
s) {
 s += char('a'-1);
 vector<int> sorted_shifts =
sort_cyclic_shifts(s);
 sorted_shifts.erase(sorted_shifts.begin());
 return sorted_shifts;
} 
 
 
vector<int> kasai(string s, vector<int> sa)
{
    //trace1(s);
    int n=s.size(),k=0;
    vector<int> lcp(n,0);
    vector<int> rank(n,0);
 
    for(int i=0; i<n; i++) rank[sa[i]]=i;
 
    for(int i=0; i<n; i++, k?k--:0)
    {
        if(rank[i]==n-1) {k=0; continue;}
        int j=sa[rank[i]+1];
        while(i+k<n && j+k<n && s[i+k]==s[j+k]) k++;
        lcp[rank[i]]=k;
    }
    return lcp;
}
#define MAX_N 100010
int lft[MAX_N];
int rgt[MAX_N];
 
int main(){
    tc()
    {
        string st;
        cin>>st;
        int n = st.size();
 
        vector<int> sa = suffix_array_construction(st);
        vector<int> tmp = kasai(st,sa);
 
        vector<ll> lcp;
        lcp.push_back(0);
        for(int i=0;i<tmp.size();i++)
            lcp.push_back(tmp[i]);
 
 
        long long ans = 1LL * n * (n + 1LL);
        ans >>= 1;
        stack < int > s;
        while(!s.empty()){
            s.pop();
        }
        for(int i = 1 ; i < n ; ++i){
            while(!s.empty() && lcp[s.top()] >= lcp[i]){
                s.pop();
            }
            if(s.empty()){
                lft[i] = 1;
            }
            else{
                lft[i] = s.top() + 1;
            }
            s.push(i);
        }
        while(!s.empty()){
            s.pop();
        }
        for(int i = n - 1 ; i >= 1 ; --i){
            while(!s.empty() && lcp[s.top()] > lcp[i]){
                s.pop();
            }
            if(s.empty()){
                rgt[i] = n;
            }
            else{
                rgt[i] = s.top();
            }
            s.push(i);
        }
        for(int i = 1 ; i < n ; ++i){
            ans += 2LL * lcp[i] * (i - lft[i] + 1) * (rgt[i] - i);
        }
        cout<<ans<<"\n";
    }
}