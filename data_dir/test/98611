#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> ii; 

const int maxn = 3e5 + 10; 
const int mod = 1e9 + 7;

void add(int &x, int v) {
	x += v;
	if(x >= mod) x -= mod; 
	if(x < 0) x += mod;
}

struct bit{
	int BIT[maxn]; 
	void update(int x, int v) {
		for(; x < maxn; x += x & -x) add(BIT[x], v);
	}
	int query(int x) {
		int sum = 0;
		for(; x > 0; x -= x & -x) 
			add(sum, BIT[x]);
		return sum;
	}
	void update(int l, int r, int v) {
		update(l, v);
		update(r+1, -v);
	}
} freq, sum; 

int in[maxn], out[maxn], d[maxn], idx = 1, n;
vector<int> adj[maxn]; 

void dfs(int u, int par) {
	in[u] = idx++; 
	for(int v : adj[u]) if(v - par) {
		d[v] = d[u] + 1; dfs(v, u);
	} out[u] = idx - 1;
}
int main(int argc, char const *argv[]) {
	scanf("%d", &n);
	for(int i = 2; i <= n; i++) {
		int p; scanf("%d", &p);
		adj[p].push_back(i); 
	} dfs(1, 0);
	int q; scanf("%d", &q);
	while(q--) {
		int typ, v;
		scanf("%d %d", &typ, &v);
		if(typ == 1) {
			int x, k; scanf("%d %d", &x, &k);
			freq.update(in[v], out[v], k); 
			sum.update(in[v], out[v], ((d[v] * 1ll * k % mod) + x) % mod);
		} else {
			int ans = sum.query(in[v]);
			ans -= (d[v] * 1ll * freq.query(in[v])) % mod;
			if(ans >= mod) ans -= mod;
			if(ans < 0) ans += mod; 
			printf("%d\n", ans);
			
		}
	}
}