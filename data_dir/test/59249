#include<bits/stdc++.h> 
#include<ext/pb_ds/assoc_container.hpp> 
#include<ext/pb_ds/tree_policy.hpp> 
#include<complex>
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define MOD 1000000007
#define INF 2000000000
#define DESPACITO 1000000000000000000
#define PI acos(-1);
#define E 998244353
#define pb push_back
#define mp make_pair
#define ll long long
#define x real
#define y imag

using namespace std;

string grid[1000];
int n,m;
int p;
string ans[1000];
int s[10];
queue<pair<int,int>>pq[10];
int dist[1000][1000];

bool check(int x,int y)
{
	if(x<0||y<0||x>=n||y>=m||ans[x][y]!='.')
		return false;
	return true;
}

void Dijkstra()
{
	REP(i,0,n-1)
		REP(j,0,m-1)
			dist[i][j]=MOD;
	REP(i,0,n-1)
	{
		REP(j,0,m-1)
		{
			if(grid[i][j]!='.'&&grid[i][j]!='#')
			{
				pq[grid[i][j]-'0'].push(mp(i,j));
				dist[i][j]=0;
			}
		}
	}
	int ind=1;
	int turn=1;
	int ct=0;
	while(true)
	{
		while(!pq[ind].empty())
		{
			pair<int,int>p=pq[ind].front();
			if(dist[p.first][p.second]>=turn*s[ind])
				break;
			ct++;
			pq[ind].pop();
			if(check(p.first-1,p.second))
			{
				dist[p.first-1][p.second]=dist[p.first][p.second]+1;
				ans[p.first-1][p.second]=ans[p.first][p.second];
				pq[ind].push(mp(p.first-1,p.second));
			}
			if(check(p.first,p.second-1))
			{
				dist[p.first][p.second-1]=dist[p.first][p.second]+1;
				ans[p.first][p.second-1]=ans[p.first][p.second];
				pq[ind].push(mp(p.first,p.second-1));
			}
			if(check(p.first,p.second+1))
			{
				dist[p.first][p.second+1]=dist[p.first][p.second]+1;
				ans[p.first][p.second+1]=ans[p.first][p.second];
				pq[ind].push(mp(p.first,p.second+1));
			}
			if(check(p.first+1,p.second))
			{
				dist[p.first+1][p.second]=dist[p.first][p.second]+1;
				ans[p.first+1][p.second]=ans[p.first][p.second];
				pq[ind].push(mp(p.first+1,p.second));
			}
		}
		ind++;
		if(ind>p)
		{
		    if(ct==0)
		        break;
		    ct=0;
			ind=1;
			turn++;
		}
	}
}


int main()
{
	IOS;
	cin >> n >> m >> p;
	REP(i,1,p)
		cin >> s[i];
	REP(i,0,n-1)
	{
		cin >> grid[i];
		ans[i]=grid[i];
		REP(j,0,m-1)
			dist[i][j]=MOD;
	}
    Dijkstra();
	int freq[p+1];
	memset(freq,0,sizeof(freq));
	REP(i,0,n-1)
	{
		REP(j,0,m-1)
		{
			if(ans[i][j]>='1'&&ans[i][j]<='9')
				freq[ans[i][j]-'0']++;
		}
	}
	REP(i,1,p)
		cout << freq[i] << " ";
}