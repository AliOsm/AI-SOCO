#include <bits/stdc++.h>
#define rep(i,a,b) for(int i = (a); i <= (b); i++)
#define rng(a) a.begin(), a.end()
#define sz(x) (int)(x).size()
#define se second
#define fi first
#define prev            :oyhhhhhhyo:    
#define next         .sdNNNmNNNNNNNmds. 
#define y0          xhNNNNy_yNNNNNN_iNhi
#define y1          mNNNNNdtdNNNNNNtsNNm
#define yn          mNNNNNNNNy--:smNNNms
#define tm          .+oooooosyysooooo+- 
#define read               :yhy/        
#define rank              :mNmo         
#define index              ... 
#define pb push_back
#define pcnt __builtin_popcountll
#define rrep(i,a,b) for(int i = (b); i >= (a); i--)
#define rall(x,a) for(auto x : a)
#define MOD 1000000007
typedef long long ll;
using namespace std;

const int N = 55;
int grid[N][N];
int dp[N][N][N][N][2];
bool vis[N][N];
int n;

int getGrid(int i, int j, bool inv) {
    if(inv && ((i & 1) ^ (j & 1))) {
        return 1 - grid[i][j];
    }
    return grid[i][j];
}

int vask(int x1, int y1, int x2, int y2, bool inv) {
    if(x1 >= x2 && y1 >= y2) return 1;
    if(x1 < 1 || y1 < 1 || x1 > x2 || y1 > y2) return 0;
    if(getGrid(x1, y1, inv) != getGrid(x2, y2, inv)) {
        return 0;
    }
    if(dp[x1][y1][x2][y2][inv] >= 0) {
        return dp[x1][y1][x2][y2][inv];
    }
    int& ans = dp[x1][y1][x2][y2][inv];
    int a = vask(x1 + 1, y1, x2 - 1, y2, inv);
    int b = vask(x1, y1 + 1, x2 - 1, y2, inv);
    int c = vask(x1 + 1, y1, x2, y2 - 1, inv);
    int d = vask(x1, y1 + 1, x2, y2 - 1, inv);
    ans = a == 1 || b == 1 || c == 1 || d == 1;
    return ans;
}

bool ask(int x1, int y1, int x2, int y2) {
    int res;
    cout << "? " << x1 << " " << y1 << " " << x2 << " " << y2 << endl;
    cin >> res;
    return res;
}

void askk(int x1, int y1, int x2, int y2) {
    int res;
    if(x1 > x2) {
        res = ask(x2, y2, x1, y1);
    } else {
        res = ask(x1, y1, x2, y2);
    }
    grid[x2][y2] = grid[x1][y1] ^ res ^ 1;
}

void dfs(int i, int j, int pi = 0, int pj = 0) {
    if(vis[i][j]) return;
    if(pi && pj) {
        askk(pi, pj, i, j);
    }
    vis[i][j] = true;
    if(j + 2 <= n) {
        dfs(i, j + 2, i, j);
    }
    if(i + 2 <= n) {
        dfs(i + 2, j, i, j);
    }
    if(i - 1 >= 1 && j - 1 >= 1) {
        dfs(i - 1, j - 1, i, j);
    }
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cin >> n;
    rep(i, 1, n) {
        rep(j, 1, n) {
            rep(k, 1, n) {
                rep(l, 1, n) {
                    fill(dp[i][j][k][l], dp[i][j][k][l] + 2, -1);
                }
            }
        }
    }
    grid[1][1] = 1;
    dfs(1, 2);
    rep(i, 1, n) {
        if(i % 2 && i < n) {
            askk(i, 1, i + 1, 2);
            askk(i, 1, i + 2, 1);
        }
        rep(j, 1, n) {
            int jj = 2 * j - (i & 1);
            int jjj = jj + 2;
            if(jjj > n) break;
            askk(i, jj, i, jjj);
        }
    }
    bool inv = false, found = false;
    rep(x1, 1, n) {
        rep(y1, 1, n) {
            rep(x2, x1, n) {
                rep(y2, y1, n) {
                    if(x2 - x1 + y2 - y1 >= 2) {
                        int r1 = vask(x1, y1, x2, y2, false);
                        int r2 = vask(x1, y1, x2, y2, true);
                        if(r1 != r2) {
                            int rr = ask(x1, y1, x2, y2);
                            if(rr == r2) {
                                inv = true;
                            }
                            found = true;
                            break;
                        }
                    }
                }
                if(found) break;
            }
            if(found) break;
        }
        if(found) break;
    }
    cout << "!" << endl;
    rep(i, 1, n) {
        rep(j, 1, n) {
            cout << getGrid(i, j, inv);
        }
        cout << endl;
    }
    return 0;
}
