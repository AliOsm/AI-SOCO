#include<bits/stdc++.h>
using namespace std;
typedef long long LL;

const int M = 998244353, N = 5005;
LL dp[N][N];
LL dpsum[N][N];
int cnt[N], cum[N];

LL power(LL a, LL p) {
    if (p==0)   return 1;
    LL ans = power(a, p/2);
    ans = (ans * ans)%M;
    if (p%2)    ans = (ans * a)%M;
    return ans;
}

LL inv[N];

void pre() {
    for (int i=1; i<N; i++)
        inv[i] = power(i, M-2);
}

int main() {
    pre();
    int n;
    cin>>n;

    for (int i=1; i<=n; i++) {
        int x;
        cin>>x;
        cnt[x]++;
    }

    for (int i=1; i<=n; i++)    cum[i] = cum[i-1] + cnt[i];

    LL ans = 0;
    for (int i=1; i<=n; i++) {
        dp[1][i] = (cnt[i]*inv[n])%M;
        if (cnt[i]) {
            LL prob = ((cnt[i]-1)*inv[n-1])%M;
            ans = (ans + dp[1][i]*prob)%M;
        }
        dpsum[1][i] = (dpsum[1][i-1] + dp[1][i])%M;
    }

    for (int i=2; i<n; i++) {
        for (int j=1; j<=n; j++) {
            LL prob = (cnt[j]*inv[n-i+1])%M;
            dp[i][j] = (prob * dpsum[i-1][j-1])%M;
            dpsum[i][j] = (dpsum[i][j-1] + dp[i][j]);
            if (dpsum[i][j]>=M) dpsum[i][j] -= M;

            if (cnt[j]) {
                LL prob = ((cnt[j]-1)*inv[n-i])%M;
                ans = (ans + dp[i][j]*prob)%M;
            }
        }
    }
    cout<<ans<<endl;
}
