#define _USE_MATH_DEFINES
#include <array>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;
mt19937 mrand(random_device{}());
int rnd(int x) { return mrand() % x; }

const int N = 3e5 + 10;
vector<int> a[N];
int t[N], dp[N];

int cnt;
void DFS(int u) {
  if (a[u].size() == 0) {
    ++cnt;
    dp[u] = 1;
    return;
  }
  for (auto& v : a[u]) DFS(v);
  if (t[u]) {
    dp[u] = INF;
    for (auto& v : a[u]) {
      dp[u] = min(dp[u], dp[v]);
    }
  } else {
    dp[u] = 0;
    for (auto& v : a[u]) {
      dp[u] += dp[v];
    }
  }
}

int main() {
  int n;
  scanf("%d", &n);
  for (int i = 0; i < n; ++i) {
    scanf("%d", &t[i]);
  }
  for (int i = 1; i < n; ++i) {
    int j;
    scanf("%d", &j);
    --j;
    a[j].push_back(i);
  }
  cnt = 0;
  DFS(0);
  printf("%d\n", cnt + 1 - dp[0]);
  return 0;
}
