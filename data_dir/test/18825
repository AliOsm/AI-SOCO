# include <bits/stdc++.h>

using namespace std;

const int maxn = 2000 + 100;

vector <int> adj[maxn], ver;

bool mark[maxn], A[maxn][maxn];

void dfs(int v){
	mark[v] = true;
	ver.push_back(v);
	for (int i = 0; i < adj[v].size(); i++){
		int u = adj[v][i];
		if(!mark[u])
			dfs(u);
	}
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	
	int n; cin >> n;
	int f; cin >> f;
	while(f--){
		int v, u;
		cin >> v >> u;
		v--, u--;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}

	int e; cin >> e;
	while(e--){
		int v, u;
		cin >> v >> u;
		v--, u--;
		A[v][u] = A[u][v] = true;
	}
	
	int ans = 0;
	for (int i = 0; i < n; i++)
		if(!mark[i]){
			ver.clear();
			dfs(i);
			
			bool flag = false;
			for (int j = 0; j < ver.size(); j++)
				for (int k = 0; k < ver.size(); k++)
					if(A[ver[j]][ver[k]])
						flag = true;
			
			if(!flag)
				ans = max(ans, (int)ver.size());
		}

	cout << ans << endl;

	return 0;
}
