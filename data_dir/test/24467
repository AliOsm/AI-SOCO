#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, std::less<>, rb_tree_tag, tree_order_statistics_node_update>;
using namespace std;
typedef long long int64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//*/998244353;
const int base = 2187;
const double eps = 1e-9;
const int N = 200'000;
const int LOGN = 19;

int n, m, k;
int par[N], sz[N];

int64 dfs1(const vector<vector<pair<int, int>>>& g, int v, int p) {
  int64 res = 0;
  par[v] = 1;
  for (auto&&[u, c] : g[v]) {
    if (u == p) {
      continue;
    }
    res += dfs1(g, u, v);
    if (par[u]) {
      res += c;
      par[v] ^= 1;
    }
  }
  return res;
}

int64 dfs2(const vector<vector<pair<int, int>>>& g, int v, int p) {
  int64 res = 0;
  sz[v] = 1;
  for (auto&&[u, c] : g[v]) {
    if (u == p) {
      continue;
    }
    res += dfs2(g, u, v);
    res += min(sz[u], n - sz[u]) * 1ll * c;
    sz[v] += sz[u];
  }
  return res;
}

void solve(int) {
  cin >> n;
  n += n;
  vector<vector<pair<int, int>>> g(n);
  for (int i = 1; i < n; ++i) {
    int x, y, z;
    cin >> x >> y >> z;
    --x; --y;
    g[x].emplace_back(y, z);
    g[y].emplace_back(x, z);
  }
  cout << dfs1(g, 0, 0) << ' ' << dfs2(g, 0, 0) << '\n';
}

void precalc() {
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  precalc();
  int test = 1;
  cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i) {
    solve(i);
  }
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}
