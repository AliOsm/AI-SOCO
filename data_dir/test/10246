#include <bits/stdc++.h>
#define int long long
#define pb push_back
#define mk make_pair
using namespace std;
const int N = 1123456;
const int mod = 1e9 + 7;
const int inf = 1e9 + 7;
inline long long read () {
    char c = getchar();
    long long t = 0, f = 1;
    while (!isdigit(c)) f = (c == '-') ? -1 : 1, c = getchar();
    while (isdigit(c)) t = t * 10 + c - 48, c = getchar();
    return t * f;
}
int x[N];
int y[N];
main()
{
    int n, m, i, j;
    cin >> n;
    n = n * 4 + 1;
    for(i = 1; i <= n; i ++) {
        x[i] = read();
        y[i] = read();
    }
    for(i = 0; i <= 50; i ++) {
        for(j = 0; j <= 50; j ++) {
            for(int x1 = i; x1 <= 50; x1 ++) {
                for(int y1 = j; y1 <= 50; y1 ++) {
                    int cnt = 0;
                    for(int k = 1; k <= n; k ++) {
                        if(i <= x[k] && x[k] <= x1 && j <= y[k] && y[k] <= y1) {
                            bool ok = 0;
                            if(x[k] == i || x[k] == x1)
                                ok = 1;
                            if(y[k] == j || y[k] == y1)
                                ok = 1;
                            cnt += ok;
                        }
                    }
                    if(cnt == n - 1) {
                        for(int k = 1; k <= n; k ++) {
                            if(i <= x[k] && x[k] <= x1 && j <= y[k] && y[k] <= y1) {
                                 bool ok = 0;
                                if(x[k] == i || x[k] == x1)
                                    ok = 1;
                                if(y[k] == j || y[k] == y1)
                                    ok = 1;
                                if(ok == 0) {
                                    cout << x[k] << " " << y[k] << endl;
                                    return 0;
                                }
                            }
                            else {
                                cout << x[k] << " " << y[k] << endl;
                                return 0;
                            }
                        }
                    }
                }
            }
        }
    }
}



