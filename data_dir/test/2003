//**KISS**
//**KEEP IT SHORT AND SIMPLE**

#include <bits/stdc++.h>
#define IO ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define FILES freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#define INF 1000000000
#define REP(i,a,b) for (int i = a; i < b; i++)
#define NL '\n'
#define F first
#define S second
#define PB push_back
#define Summation(n) (n) * ((n) + 1) / 2
#define ALL(x) x.begin(), x.end()

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef bool bl;
typedef vector < vector<long long> > vvl;
typedef vector <long long> vll;
typedef vector <string> vs;
typedef pair <long long, long long> pll;
typedef queue <long long> qll;
typedef deque <long long> dll;
typedef set <long long> sll;
typedef set <string> ss;
typedef set <char> sc;
typedef multiset <long long> msll;
typedef map <long long, long long> mll;
typedef map <long long, bool> mlb;
typedef map <string, bool> msb;
typedef map <string, long long> msl;
typedef map <char, bool> mcb;
typedef map <char, long long> mcl;
double pi = 2 * acos(0.0);


ll _sieve_size;
bitset<10000010> _bs;
vll _primes;
void sieve(ll upperbound)
{
    //O(N log log N)
    _sieve_size = upperbound;
    _bs.set();
    _bs[0] = _bs[1] = 0;
    for(ll i = 2;i <= _sieve_size;i++)
        if(_bs[i])
        {
            for(ll j = i * i;j <= _sieve_size;j+=i)
                _bs[j] = 0;
            _primes.push_back(i);
        }
}
bool isPrime(ll N)
{
    if(N <= _sieve_size)    return _bs[N];
    for(int i = 0;i < _primes.size();i++)
        if(N % _primes[i] == 0) return false;
    return true;
}
vll primeFactors(ll N)
{
    //O( sqrt(N) /ln sqrt(N))
    vll factors;
    ll PF_idx = 0, PF = _primes[PF_idx];
    //sieve should generate primes first
    while(PF * PF <= N)
    {
        while(N % PF == 0)
        {
            N /= PF;
            factors.push_back(PF);
        }
        PF = _primes[++PF_idx];
    }
    //if N itself is Prime
    if(N != 1)  factors.push_back(N);
    return factors;
}
long long gcd(long long a, long long b) { return b == 0 ? a : gcd(b, a % b); }
long long lcm(long long a, long long b) { return a * (b / gcd(a, b)); }
long long FastPower(long long Num, long long Pow)
{
    if(Pow == 0)
        return 1;
    if(Pow == 1)
        return Num;
    long long Result = FastPower(Num, Pow / 2);
    Result *= Result;
    if(Pow % 2 != 0)
        Result *= Num;
    return Result;
}
long long power(long long x, unsigned long long y, long long mod)
{
    long long temp;
    if( y == 0)
        return 1;
    temp = power(x, y/2,mod)%mod;
    if (y%2 == 0)
        return (temp%mod*temp%mod)%mod;
    else
        return((x%mod*temp)%mod*temp)%mod;
}
ll ncr(ll n, ll r)
{
    r = min(r, n - r);
    ll ans = 1;
    for(int i = 1;i <= r;i++)
    {
        ans *= n - i + 1;
        ans /= i;
    }
    return ans;
}
bool isPowerOfTwo(int x)
{
    // x will check if x == 0 and !(x & (x - 1)) will check if x is a power of 2 or not
    return (x && !(x & (x - 1)));
}
bool sortbysec(const string &a, const string &b)
{
    return (a.size() < b.size());
}
double binet(unsigned int n)
{
    static const double phi = (1 + sqrt(5))*0.5;
    double fib = (pow(phi,n) - pow(1-phi,n))/sqrt(5);
    return round(fib);
}
long largest_power_of_two(long N)
{
    //changing all right side bits to 1.
    N = N| (N>>1);
    N = N| (N>>2);
    N = N| (N>>4);
    N = N| (N>>8);
    return (N+1)>>1;
}
int main()
{
    IO
    ll n;
    cin >> n;
    vector<pll> x(n), y(n);
    map<pll, ll>mp;
    REP(i, 0, n)    cin >> x[i].F >> x[i].S;
    REP(i, 0, n)    cin >> y[i].F >> y[i].S;
    for(int i = 0;i < n;i++)
        for(int j = 0;j < n;j++)
            mp[{x[i].F + y[j].F, x[i].S + y[j].S}]++;
    for(map<pll, ll>::iterator it = mp.begin();it != mp.end();it++)
    {
        if(it->S == n)
        {
            cout << it->F.F << ' ' << it->F.S;
            return 0;
        }
    }
    return 0;
}
