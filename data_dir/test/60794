#include<iostream>
#include<vector>
#include<map>
#include<algorithm>
using namespace std;
typedef long long ll;
int in[1100],out[1100];
bool used[1100];
map<pair<int, int>, int>x;
vector < pair<pair<int, int>, int>>sol;
void dfs(int v,int f,int mm)
{
	used[v] = 1;
	if (out[v] == 0)
	{
		sol.push_back(make_pair(make_pair(f, v), mm));
		return;
	}
	else if (!used[out[v]])
	{
		mm = min(mm, x[make_pair(v, out[v])]);
		dfs(out[v], f, mm);
	}
}
int main()
{
	int n, m,a,b,c;
	cin >> n >> m;
	for (int i = 0; i < m; i++)
	{
		cin >> a >> b >> c;
		in[b] = a;
		out[a] = b;
		x[make_pair(a, b)] = c;
	}
	for (int i = 1; i <= n; i++)
	{
		if (!used[i] && in[i] == 0&&out[i]!=0)
		{
			dfs(i, i, 99999999999);
		}
	}
	cout << sol.size() << endl;
	for (int i = 0; i < sol.size(); i++)
	{
		cout << sol[i].first.first << " " << sol[i].first.second<<" "<< sol[i].second << endl;
	}
	//system("pause");
	
}
