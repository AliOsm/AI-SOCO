#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
template <class T> ll size(const T &x) { return x.size(); }
#define rep(i,a,b) for(ll i = (a); i < (b); i++)
#define iter(it,c) for(auto it = (c).begin(); it != (c).end();++it)
#define pb push_back
#define fs first
#define sc second
typedef pair<ll,ll> ii;
typedef vector<ll> vi;
typedef vector<ii> vii;

const ll INF = ~(1<<31);
const double pi = acos(-1);
const double EPS = 1e-9;

int main() {
    cin.sync_with_stdio(false);
	ll n,t;
	cin >> n >> t;
	vi A(n);
	rep(i,0,n) cin >> A[i];

	vii B[460];
	ll sum = 0;
	int nx = 0;
	int size = 450;
	rep(i,0,n) {
		sum += A[i];
		nx = (i+1)/size;
		if(((i+1)%size) == 0) nx--;
		B[nx].pb(ii(sum,i));
	}
	rep(i,0,460) {
		sort(B[i].begin(), B[i].end());
	}
	ll minus = 0;
	ll cnt = 0;
	rep(i,0,n) {
		bool ok = false;
		int start = ((i+1)/450)-1;
		rep(j,0,451) {
			if(j*size <= i && i < (j+1)*size) { // look through whole bucket
				rep(z,0,B[j].size()) {
					if(B[j][z].sc >= i && B[j][z].fs-minus < t) {
						cnt++;
					}
				}
				ok = true;
			} else if(ok) { // binary search count
				int lo = 0, hi = int(B[j].size())-1;
				if(hi < 0) continue;
				int bst = 500;
				while(lo <= hi) {
					int mid = (lo+hi)/2;
					ll sum = B[j][mid].fs;
					if(sum-minus < t) {
						bst = mid;
						lo = mid+1;
					} else {
						hi = mid-1;
					}
				}
				if(bst != 500) {
					cnt += bst+1;
				}
			}
		}
		if(!ok) cout << "wtf" << endl;


		minus += A[i];
	}
	cout << cnt << endl;

    return 0;
}

 
