#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> pi;
const int inf = 0x3f3f3f3f;

inline void chmax(int& x, int y) {if (x < y) x = y;}
inline void chmin(int& x, int y) {if (x > y) x = y;}
inline int LSB(int i) {return (i & -i);}

int n, m, k, sx, sy, ex, ey, res[1005][1005];
char grid[1005][1005];
bool vis[1005][1005];
int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, 1, 0, -1};

bool check(int& a, int& b, int& c){
    return c <= k && a >= 0 && a < n && b >= 0 && b < m && grid[a][b] == '.';
}

void bfs(int a, int b, int c, int d){
    queue <pair<pi, pi> > q;
    q.push({{0, -1}, {a, b}});

    res[a][b] = 0;
    while (!q.empty()){
        pair<pi, pi> p = q.front();
        q.pop();

        if (vis[p.second.first][p.second.second]) continue;
        vis[p.second.first][p.second.second] = true;

        for (int i = 0; i < 4; i++){
            if (i == p.first.second && i != -1) continue;
            int cnt = 1;
            int nx = p.second.first + dx[i];
            int ny = p.second.second + dy[i];

            while (check(nx, ny, cnt) && res[nx][ny] >= res[p.second.first][p.second.second] + 1){
                chmin(res[nx][ny], p.first.first + 1);
                q.push({{p.first.first + 1, (i + 2) % 4}, {nx, ny}});
                nx += dx[i];
                ny += dy[i];
                cnt++;
            }
        }
    }
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);

    cin >> n >> m >> k;
    for (int i = 0; i < n; i++){
        for (int j = 0; j < m; j++){
            cin >> grid[i][j];
        }
    }

    cin >> sx >> sy >> ex >> ey;
    sx--, sy--, ex--, ey--;

    fill(&res[0][0], &res[0][0] + sizeof(res) / sizeof(res[0][0]), inf);
    bfs(sx, sy, ex, ey);

    cout << (res[ex][ey] == inf ? -1 : res[ex][ey]) << endl;
	return 0;
}
