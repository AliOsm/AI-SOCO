#include<bits/stdc++.h>
#define MOD 1000000007
#define ll long long
#define mp make_pair
#define pb push_back 
using namespace std;
int mk = 0, lvs = 1;
int ass[21010], val[2010];
vector<int> graph[2010];
vector<pair<int, int> > cur;
void getval(int s, int p){
	cur.pb(mp(ass[s], s));
	for(auto to: graph[s]){
		if(to != p){
			getval(to, s);
		}
	}
}
void dfs(int s, int p){
	if(mk == 1)
		return;
	for(auto to: graph[s]){
		if(to != p){
			dfs(to, s);
		}
	}
	cur.clear();
	for(auto to: graph[s]){
		if(to != p){
			getval(to, s);
		}
	}
	sort(cur.begin(), cur.end());
	if(val[s] > cur.size()){
		//cerr << s + 1 << " " << cur.size() << " " << val[s] << '\n';
		mk = 1;
		return;
	}
	if(cur.size() == 0 && val[s] == 0){
		ass[s] = lvs * 5001;
		lvs++;
		return;
	}
	if(val[s] == 0){
		ass[s] = cur[0].first - 1;
	}
	else if(val[s] == cur.size()){
		ass[s] = cur.back().first + 1;
	}
	else{
		//int x = cur[val[s] - 1], y = cur[val[s]];
		for(int i = val[s]; i < cur.size(); i++)
			ass[cur[i].second]++;
		ass[s] = cur[val[s]].first;
	}

}
int main(){
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	int n;
	cin >> n;
	int rt = -1;
	for(int i = 0; i < n; i++){
		int p, c;
		cin >> p >> c;
		if(p != 0){
			graph[i].pb(p - 1);
			graph[p - 1].pb(i);
		}
		else rt = i;
		val[i] = c;
	}
	dfs(rt, -1);
	if(mk == 1)
		cout << "NO\n";
	else{
		cout << "YES\n";
		for(int i = 0; i < n; i++)
			cout << ass[i] << " ";
		cout << '\n';
	}

}