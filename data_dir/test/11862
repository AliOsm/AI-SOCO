//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0); }
inline int safe_mul(const int x, const int y) __attribute__ ((warn_unused_result));

int const mod = 998244353;

inline int safe_mul(const int x, const int y) {
    return x * static_cast<long long>(y) % mod;
}

inline void safe_add(int& x, const int y) {
    x += y;
    if (x >= mod)
        x -= mod;
}

inline int safe_pow(int x, int y) {
    int res = 1;
    for (; y > 0; y >>= 1) {
        if (y&1)
            res = safe_mul(res, x);
        x = safe_mul(x,x);
    }
    return res;
}

inline int safe_inv(const int x) {
    return safe_pow(x, mod - 2);
}

int const maxn = 2000010;
int fact[maxn];
int invfact[maxn];

inline int C(const int n, const int k) {
    return safe_mul(fact[n], safe_mul(invfact[n - k], invfact[k]));
}

int pk[maxn];

int main() {
//    freopen("in.txt","r", stdin);
//    cout << fixed << setprecision(15);
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);

    fact[0] = invfact[0] = 1;
    for (int i = 1; i < maxn; ++i) {
        fact[i] = safe_mul(fact[i - 1], i);
        invfact[i] = safe_inv(fact[i]);
    }


    int n,k;
    cin >> n >> k;
    vector<int> a(n);
    for (int& x : a)
        cin >> x;

    if (k==1)
        FINAL_OUT(0);

    int cnt = 0;
    for (int i = 0; i < n; ++i)
        cnt += a[i] == a[(i+1)%n];

    pk[0] = 1;
    for (int i = 1; i < maxn; ++i)
        pk[i] = safe_mul(pk[i - 1], k - 2);
    int all = safe_pow(k, n - cnt);
    for (int i = 0; i + i <= n - cnt; ++i) {
        int cur = safe_mul(C(n-cnt, i), C(n-cnt-i, i));
        cur = safe_mul(cur, pk[n-cnt-i-i]);
        safe_add(all, mod - cur);
    }
    int ans = safe_mul(safe_inv(2), all);
    cout << safe_mul(ans, safe_pow(k, cnt)) << endl;
}
