#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#define double long double
#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define FORE(i, a, n) for (i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << (x) << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-13
//#define endl "\n"
#define pdd pair<double, double>

const int MAXN = 6 * 100000;

int n, m;
bool mark[MAXN];
int next[MAXN];
vector<int> adj[MAXN];
vector<vector<int> > out;

int find(int pos) {
	if (mark[pos] == false) return pos;
	next[pos] = max(next[pos], pos+1);
	return next[pos] = find(next[pos]);
}

void dfs(int pos) {
	out.back().pb(pos);
	mark[pos] = true;
	FOR(i, 1, Size(adj[pos])) {
		int x = adj[pos][i-1]+1;
		int y = adj[pos][i];
		while (find(x) < y) dfs(find(x));
	}
}

int main() {
	ios::sync_with_stdio(false);
	cin >> n >> m;
	FOR(i, 0, n) adj[i].pb(-1);
	FOR(i, 0, m) {
		int a, b;
		cin >> a >> b;
		a--; b--;
		adj[a].pb(b);
		adj[b].pb(a);
	}
	FOR(i, 0, MAXN) next[i] = i;
	FOR(i, 0, n) adj[i].pb(n), adj[i].pb(i), sort(all(adj[i]));
	FOR(i, 0, n) if (!mark[i]) {
		out.pb(vector<int> ());
		dfs(i);
	}
	cout << Size(out) << endl;
	FOR(i, 0, Size(out)) {
		cout << Size(out[i]);
		FOREACH(it, out[i]) cout << " " << (*it)+1;
		cout << endl;
	}
	return 0;
}

