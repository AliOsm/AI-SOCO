#include <iostream>
#include <algorithm>
#include <map>
#include <set>
#include <vector>
#include <string>
#include <sstream>
#include <time.h>
#include <stdlib.h>
#include <queue>
#include <random>
#include <stack>
#include <cmath>

using namespace std;

vector<vector<int> > g;

bool used[1234567];
vector<int> ans;
int n;
 
void dfs (int v) 
{
	used[v] = true;
	for (size_t i=0; i<g[v].size(); ++i) 
	{
		int to = g[v][i];
		if (!used[to])
			dfs (to);
	}
	ans.push_back (v);
}
 
void topological_sort(int v) 
{
	for (int i = 1; i <= n; ++i)
		used[i] = false;
	ans.clear();
	dfs(v);
	reverse (ans.begin(), ans.end());
}


int main()
{
	cin.tie(0);
	ios_base::sync_with_stdio(0);
	int m;
	cin >> n >> m;
	g.resize(n+1);
	vector<int> h(n+1, 0);
	map<pair<int, int>, int> mapka;
	for(int i = 0; i < m; ++i)
	{
		int x, y;
		cin >> x >> y;
		h[y]++;
		g[x].push_back(y);
		mapka[make_pair(x, y)] = i+1;
	}
	for(int i = 1; i <= n; ++i)
		if(h[i] == 0)
		{
			topological_sort(i);
			break;
		}
	if(ans.size() != n)
	{
		cout << -1;
		return 0;
	}
	int mx = 0;
	for(int i = 1; i < ans.size(); ++i)
	{
		if(mapka.find(make_pair(ans[i-1], ans[i])) == mapka.end())
		{
			cout << -1;
			return 0;
		}
		mx = max(mx, mapka[make_pair(ans[i-1], ans[i])]);
	}
	cout << mx;
	return 0;
}


/*
1 - 1
2 - 2
3 - 2
01010000000101011100
*/