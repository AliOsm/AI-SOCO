
//#include "stdc++.h"
#include<bits/stdc++.h>
#include<iostream>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
using namespace std;
//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//typedef tuple<int, int, int> t3;
typedef long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <ll, int> pli;
typedef pair <db, db> pdd;
typedef vector<int> vi;
#define m1 make_pair
#define pb push_back
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0) return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p; }
#define flush fflush(stdout)
const ll MOD = 1000000007;
const int INF = 0x3f3f3f3f;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;
void KMP(string s,int lps[])
{
    int n=s.length();
    int j=0,i=1;
    lps[0]=0;
    while(i<n)
    {
        if(s[i]==s[j])
        {
            //i++;
            j++;
            lps[i]=j;
            i++;
            
        }
        else
        {
            if(j==0)
            {
                lps[i]=0;
                i++;
            }
            else
                j=lps[j-1];
        }
    }
}
void dfs(vector<int> adj[],int cnt[],int u)
{
    for(int i=0;i<adj[u].size();i++)
    {
        dfs(adj,cnt,adj[u][i]);
        cnt[u]+=cnt[adj[u][i]];
    }
    cnt[u]++;
}
int main()
{
    string s;
    cin>>s;
    int n=s.length();
    int lps[n];
    KMP(s,lps);
    int cr=lps[n-1];vector<int>edge;
    while(cr)
    {
        //cr=lps[n-1];
        edge.pb(cr);
        cr=lps[cr-1];
    }
    edge.pb(n);
    vector<int> adj[n+1];
    for(int i=0;i<n;i++)
        adj[lps[i]].pb(i+1);
    int cnt[n+1];
    memset(cnt,0,sizeof(cnt));
    dfs(adj,cnt,0);
    sort(edge.begin(),edge.end());
    cout<<edge.size()<<endl;
    for(int i=0;i<edge.size();i++)
    {
        cout<<edge[i]<<" "<<cnt[edge[i]]<<endl;
    }
    return 0;
    
}
