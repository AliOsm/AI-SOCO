
#include<bits/stdc++.h>
using namespace std;
const int MX=(1<<20);
class Disjoint_Set{
    private:
    int sz[MX] , P[MX];
    int find_(int x){
        if(x!=P[x]) P[x]=find_(P[x]);
        return P[x];
    }
    public:
    int comp;
    void init(int N){
        for(int j=1;j<=N;j++)
            sz[j]=1 , P[j]=j;
        comp = N;
    }
    bool same(int x , int y){
	return find_(x) == find_(y);
    }
    int compsize(int node){
	return sz[find_(node)];
    }
    bool merge_(int x , int y){
        int px=find_(x) , py=find_(y);
        if(px==py) return false;
        if(sz[px] < sz[py]) swap(px , py);
        P[py]=px;
        comp--;
        sz[px]+=sz[py];
        return true;
    }
}G;
long long ans = 1 , MOD = 1e9+9;
int main(){
    int n , m;
    cin>>n>>m;
    G.init(n);
    while(m--){
        int a , b;
        scanf("%d %d",&a,&b);
        if(!G.merge_(a , b)) ans*=2;
        ans%=MOD;
        printf("%d\n",(int) (ans-1));
    }
}
