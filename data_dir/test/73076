#define _USE_MATH_DEFINES 
#define _CRT_SECURE_NO_DEPRECATE 
#include <iostream> 
#include <cstdio> 
#include <cstdlib> 
#include <vector> 
#include <sstream> 
#include <string> 
#include <map> 
#include <set> 
#include <algorithm> 
#include <cmath> 
#include <cstring> 
#include <queue>
#include <time.h>
using namespace std; 
#define mp make_pair 
#define pb push_back 
#define all(C) (C).begin(), (C).end() 
#define sz(C) (int)(C).size() 
#define PRIME 123 
#define PRIME1 31415 
typedef long long int64; 
typedef unsigned long long uint64; 
typedef pair<int, int> pii; 
typedef vector<int> vi; 
typedef vector<vector<int> > vvi; 
//------------------------------------------------------------ 
#define y1 asdf
#define y2 asdqwer
const int N = 100010; 
int n, m, q;
int64 l;
vector <int> man[N];
vector <int> oman[N][20];
vector < vector < int > > gr;
int tin[N], tout[N];
int anc[N][20], level = 17;
int TIME = 0;
vector <int> c;
inline vector <int> bound(vector <int> & a, vector <int>& b)
{
    c.clear();
    int l = 0, r = 0;
    int k = min(10, (int)(b.size() + a.size()));
    c.resize(k);
    for(int i = 0; i < k; ++i)
    {
        if (r == b.size())
        {
            c[i] = a[l++];
        }
        else
        {
            if (l == a.size())
            {
                c[i] = b[r++];
            }
            else
            {
                if (a[l] > b[r])
                    c[i] = b[r++];
                else
                    c[i] = a[l++];
            }
        }
    }
    return c;
}

void dfs(int u, int p = 0)
{
    
    tin[u] = TIME++;
    anc[u][0] = p;
    oman[u][0] = man[u];
    for(int i = 1; i < level; ++i)
    {
        anc[u][i] = anc[anc[u][i - 1]][i - 1];
        oman[u][i] = bound(oman[u][i - 1], oman[anc[u][i - 1]][i - 1]);
    }
    for(int i = 0; i < gr[u].size(); ++i)
    {
        int to = gr[u][i];
        if (to == p)
            continue;
        dfs(to, u);
    }
    tout[u] = TIME++;
}

inline int par(int a, int b)
{
    if (tin[a] <= tin[b] && tout[b] <= tout[a])
        return true;
    return false;
}

inline int lca(int a, int b)
{
    if (par(a, b))
        return a;
    for(int i = level - 1; i >= 0; --i)
    {
        if (anc[a][i] && !par(anc[a][i], b))
            a = anc[a][i];
    }
    return anc[a][0];
}

inline vector < int > fun(int u, int c)
{
    vector < int > ans;
    if (u == c)
    {
        return ans;
    }
    for(int i = level - 1; i >= 0; --i)
    {
        if (anc[u][i] && !par(anc[u][i], c))
        {
            ans = bound(ans, oman[u][i]);
            u = anc[u][i];
        }
    }
    ans = bound(ans, oman[u][0]);
    return ans;
}

void solve()
{
    scanf("%d %d %d", &n, &m, &q);
    gr.resize(n + 1);
    for(int i = 0; i < n - 1; ++i)
    {
        int u, v;
        scanf("%d %d", &u, &v);
        gr[u].push_back(v);
        gr[v].push_back(u);
    }
    

    for(int j = 0; j < m; ++j)
    {
        int t;
        scanf("%d", &t);
        man[t].push_back(j + 1);
    }
    dfs(1);
    vector <int> ab, ba;
    for(int i = 0; i < q; ++i)
    {
        int u, v, a;
        scanf("%d %d %d", &u, &v, &a);
        int c = lca(u, v);
        ab = fun(u, c);
        ba = fun(v, c);
        ab = bound(ab, ba);
        ab = bound(ab, man[c]);
        int k = min((int)ab.size(), a);
        printf("%d ", k);
        for(int j = 0; j < k; ++j)
            printf("%d ", ab[j]);
        printf("\n");
    }
}

int main()
{
    ios_base::sync_with_stdio(false);cin.tie(0);
    #ifdef WIN32
        freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    #endif
    solve();

    return 0;
} 