#include <bits/stdc++.h>

using namespace std;

const int N = 5005;

int n, psum[N], presum[N], aftersum[N];
string s;
vector <int> a;

int getSum(int l, int r) {
  if (l == 0) {
    return psum[r];
  } else {
    return psum[r] - psum[l - 1];
  }
}

int check3() {
  int res = 0;
  for (int i = 0; i < n; i++) {
    for (int j = i + 2; j < n; j++) {
      if (a[i] == 1 && a[j] == 1) {
        if (getSum(i + 1, j - 1) != ((j - 1) - (i + 1) + 1)) {
          res = max(res, getSum(0, i) + ((j - 1) - (i + 1) + 1) - getSum(i + 1, j - 1) + getSum(j, n - 1));
        }
      }
    }
  }
  return res;
}

int check2() {
  int res = 0;
  for (int i = 1; i < n; i++) {
    int part1 = max(getSum(0, i - 1), i - getSum(0, i - 1));
    int part2 = max(getSum(i, n - 1), (n - i) - getSum(i, n - 1));
    res = max(res, part1 + part2);
  }
  return res;
}

void prep() {
  cin >> s;
  for (int i = 0; i < s.size(); i++) {
    if (s[i] == 'a') {
      a.push_back(1);
    }
    if (s[i] == 'b') {
      a.push_back(0);
    }
  }
  n = a.size();
  psum[0] = a[0];
  for (int i = 1; i < n; i++) {
    psum[i] = psum[i - 1] + a[i];
  }
  int pre = a[0];
  presum[0] = pre;
  for (int i = 1; i < n; i++) {
    if (a[i] == 1) {
      pre++;
    } else {
      pre = 0;
    }
    presum[i] = pre;
  }
  int after = a[n - 1];
  aftersum[n - 1] = after;
  for (int i = n - 2; i >= 0; i--) {
    if (a[i]) {
      after++;
    } else {
      after = 0;
    }
    aftersum[i] = after;
  }
}

int main() {
  prep();
  int threeSug = 0;
  int twoSug = 0;
  int oneSug = max(psum[n - 1], n - (psum[n - 1]));
  threeSug = check3();
  twoSug = check2();
  int ans = max(threeSug, twoSug);
  ans = max(ans, oneSug);
  cout << ans;
}