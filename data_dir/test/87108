#include<bits/stdc++.h>
using namespace std;

typedef long long int lli;
typedef pair<int,int> pii;
typedef vector<int> vec;

#define ones(x) __builtin_popcount(x)
#define onesl(x) __builtin_popcountl(x)
#define onesll(x) __builtin_popcountll(x)

#define pb push_back
#define mp make_pair
#define mt make_tuple
#define scn(n) scanf("%d",&n)
#define scnll(n) scanf("%lld",&n)
#define scn2(n,m) scanf("%d%d",&n,&m)
#define scn3(n,m,w) scanf("%d%d%d",&n,&m,&w)
#define scn2ll(n,m) scanf("%lld%lld",&n,&m)
#define atoz(v) v.begin(),v.end()
#define ratoz(v) v.rbegin(),v.rend()
#define Fill(a,v) memset(a,v,sizeof(a))
#define sz(v) v.size()
#define fi first
#define se second
#define inf 1e9
#define pi acos(-1.0)
#define sqr(x) x*x
#define max3(a,b,c) max(a,max(b,c))
#define min3(a,b,c) min(a,min(b,c))
#define ten(n) (int)1e##n
#define tenll(n) (lli)1e##n
#define N 400005


int tree[N][26];
string s;

void build(int i, int lo ,int hi){

    if(lo == hi){
        tree[i][s[lo]-'a'] = 1;
        return;
    }

    int mid = (lo+hi)/2;
    int L = i*2+1;

    build(L,lo,mid);
    build(L+1,mid+1,hi);

    for(int j=0; j<26; j++) tree[i][j] = tree[L][j] + tree[L+1][j];
}

int query(int i ,int lo, int hi, int x, int y , int j){

    if(x<=lo && hi<=y){

        return tree[i][j];
    }

    if(hi<x || y<lo) return 0;

    int mid = (lo+hi)/2;
    int L = i*2+1;

    return query(L,lo,mid,x,y,j) + query(L+1,mid+1,hi,x,y,j);
}
int before;

void update(int i ,int lo, int hi,int pos){

    if(lo == hi && hi == pos){

        tree[i][before] = 0;
        tree[i][s[pos]-'a'] = 1;
        return;
    }

    if(hi<pos || pos<lo) return;

    int mid = (lo+hi)/2;
    int L = i*2+1;

    update(L,lo,mid,pos) ;
    update(L+1,mid+1,hi,pos);

    for(int j=0; j<26; j++) tree[i][j] = tree[L][j] + tree[L+1][j];
}

#define FastIO ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
int main()
{
    ///freopen("output.txt","w",stdout);
    ///freopen("input.txt","r",stdin);


FastIO
    cin>>s;

    s = "$" + s;
int n = s.size() -1;
    build(1,1,n);

    int q;
    cin>>q;

    while(q--){
        int t,l;
        cin>>t>>l;

        if(t == 1){
            int pos = l;

            char c;
            cin>>c;


            before = s[pos]-'a';
            s[pos] = c;
            update(1,1,n,pos);

        }
        else{
            int r;
            cin>>r;
            int cnt = 0;
            for(int i=0; i<26; i++){
                cnt += (query(1,1,n,l,r,i)>0);
            }
            //cout<<" -----------   ";
            cout<<cnt<<endl;
        }
    }


    return 0;
}
