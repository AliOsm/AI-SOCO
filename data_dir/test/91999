//{{{By oToToT
#include <iostream>
#include <iomanip>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <bitset>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <random>
#include <utility>
#include <stack>
#include <sstream>
#include <functional>
#include <deque>
#include <cassert>
using namespace std;
/* include everything for Kotori~ <3 */

typedef long long lld;
typedef unsigned long long llu;
typedef long double llf;
typedef pair<int,int> PII;
typedef pair<int,lld> PIL;
typedef pair<lld,int> PLI;
typedef pair<lld,lld> PLL;
template<typename T>
using maxHeap = priority_queue<T,vector<T>,less<T>>;
template<typename T>
using minHeap = priority_queue<T,vector<T>,greater<T>>;
/* define some types for Ruby! */

#define FF first
#define SS second
#define SZ(x) (int)(x.size())
#define ALL(x) begin(x), end(x)
#define PB push_back
#define WC(x) while(x--)
/* make code shorter for Di~a~ */

template<typename Iter>
ostream& _out(ostream &s, Iter b, Iter e) {
	s<<"[";
	for ( auto it=b; it!=e; it++ ) s<<(it==b?"":" ")<<*it;
	s<<"]";
	return s;
}
template<typename A, typename B>
ostream& operator <<( ostream &s, const pair<A,B> &p ) { return s<<"("<<p.FF<<","<<p.SS<<")"; }
template<typename T>
ostream& operator <<( ostream &s, const vector<T> &c ) { return _out(s,ALL(c)); }
/* make output easier for Ainyan~n~ */

bool debug = 0;
#define DUMP(x) if(debug) cerr<<__PRETTY_FUNCTION__<<":"<<__LINE__<<" - "<<#x<<"="<<x<<'\n'
template<typename T>
void DEBUG(const T& x){if(debug) cerr<<x;}
template<typename T, typename... Args>
void DEBUG(const T& head,const Args& ...tail){
	if(debug){cerr<<head; DEBUG(tail...);}
}
/* Let's debug with Nico~Nico~Ni */
//}}}
const int N = 1000 + 5;
const int MOD = 1000000007;

vector<int> need;
int dp_cnt[N];
bool dped_cnt[N];
int count(int);

int dig[N];
lld dp[N][2][N];
bool dped[N][2][N];
lld go(int,bool,int);

int main(int argc, char* argv[]){
	if(argc>1 and string(argv[1])=="-D") debug=1;
	if(!debug){ios_base::sync_with_stdio(0);cin.tie(0);}
	string ss; cin>>ss;
	int n; cin>>n;
	if(n==0){
		cout << 1 << '\n';
		return 0;
	}
	dp_cnt[1] = 0;
	dped_cnt[1] = 1;
	for(int i=1;i<=1000;i++){
		if(count(i) == n-1) need.PB(i);
	}
	if(need.empty()){
		cout << 0 << '\n';
		return 0;
	}
	reverse(ALL(ss));
	for(int i=0;i<SZ(ss);i++) dig[i] = ss[i]-'0';
	go(SZ(ss)+1, false, need.back());
	lld ans = 0;
	for(auto i: need){
		ans = (ans+go(SZ(ss), false, i))%MOD;
	}
	cout << ans-(n==1) << '\n';
	return 0;
}

int count(int x){
	if(dped_cnt[x]) return dp_cnt[x];
	dped_cnt[x] = true;
	dp_cnt[x] = count(__builtin_popcount(x)) + 1;
	return dp_cnt[x];
}

lld go(int pos, bool any, int cnt){
	if(cnt < 0) return 0;
	if(pos < 0) return cnt == 0;
	if(dped[pos][any][cnt]) return dp[pos][any][cnt];
	dped[pos][any][cnt] = true;
	auto& ret = dp[pos][any][cnt];
	ret = 0;
	for(int i=0;i<2;i++){
		if(!any and i>dig[pos]) break;
		ret = (ret+go(pos-1, any or i<dig[pos], cnt-(i==1)))%MOD;
	}
	return ret;
}