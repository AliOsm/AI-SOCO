#include <bits/stdc++.h>
using namespace std;


class Solution {

  struct DisjointSet {

    int n, component;
    vector<int> parent, rank;

    DisjointSet(int _n = 26) : n(_n), component(_n) {
      parent.resize(n);
      iota(parent.begin(), parent.end(), 0);
      rank.assign(n, 0);
    }

    int anc(int v) {
      return v == parent[v] ? v : parent[v] = anc(parent[v]);
    }

    bool isInSameComponent(int a, int b) {
      return anc(a) == anc(b);
    }

    void unite(int a, int b) {
      a = anc(a);
      b = anc(b);
      if (a == b) {
        return;
      } else {
        if (rank[a] < rank[b]) {
          swap(a, b);
        }
        parent[b] = a;
        rank[a] += rank[a] == rank[b];
        --component;
      }
    }
  };

  vector<bool> isExist;
  vector<string> passwords;
  DisjointSet disjointSet;
  int n;

  int minimalNumberOfPassword(const vector<string> passwords) {
    for (const auto s : passwords) {
      for (auto c : s) {
        isExist[c - 'a'] = true;
      }
      for (auto c : s) {
        disjointSet.unite(c - 'a', s[0] - 'a');
      } 
    }
    return static_cast<int>(disjointSet.component - count(isExist.begin(), isExist.end(), false));
  }

public:
  Solution() {
    isExist.assign(26, false);
  }

  void run() {
    cin >> n;
    passwords.resize(n);
    for (int i = 0; i < n; ++i) {
      cin >> passwords[i];
    }
    cout << minimalNumberOfPassword(passwords) << '\n';
  } 
};

int main() {
  ios_base::sync_with_stdio(false); 
  cin.tie(0);
  Solution().run();
}

