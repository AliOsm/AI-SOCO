#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif

typedef long long int64;
typedef double real;

const int MaxN = 1003, MaxK = 52, MaxC = 0x3F3F3F3F, NA = -1;

int a [MaxK];
int z [MaxN];
int m, n;

int main (void)
{
 int i, j, k, q, r, s, t;
 while (scanf (" %d %d", &n, &m) != EOF)
 {
  for (i = 0; i < m; i++)
   scanf (" %d", &a[i]);
  s = 0;
  t = 0;
  r = NA;
  for (i = 0; i < m; i++)
  {
   s += a[i];
   if (t < a[i])
   {
    t = a[i];
    r = i;
   }
  }
  assert (r != NA);
//  printf ("%d\n", r);
  q = s - t;
  if (s < n || q * 2 < n || (n > 1 && m == 1) || ((n & 1) == 1 && m == 2))
   printf ("-1\n");
  else
  {
   t = min (t, n / 2);
   k = 0;
   for (i = t; i > 0 && k < n; i--)
   {
//    printf ("%d %d\n", k, t);
    assert (k != n - 1);
    z[k++] = r;
    t--;
    assert (t >= 0);
    assert (k + t * 2 < n);
    for (j = 0; j < m; j++)
     if (j != r && a[j] > 0)
     {
      z[k++] = j;
      a[j]--;
      assert (k + t * 2 <= n);
      if (k + t * 2 == n)
       break;
     }
   }
//   printf ("%d %d\n", k, t);
   assert (k == n);
   for (i = 0; i < n; i++)
    printf ("%d%c", z[i] + 1, i + 1 < n ? ' ' : '\n');
  }
 }
 return 0;
}
