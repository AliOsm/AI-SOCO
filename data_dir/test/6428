#include<stdio.h>
#include<queue>
#include<vector>
#include<algorithm>
#include<functional>
#include<iostream>
#define ll long long
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define BS binary_search
#define SIZE 2000100
#define MOD 1000000009LL
#define bpc __builtin_popcount

using namespace std;

inline ll getnum()
{
  char c = getchar();
  ll num, sign = 1;
  for (; c<'0' || c>'9'; c = getchar())if (c == '-')sign = -1;
  for (num = 0; c >= '0'&&c <= '9';)
  {
    c -= '0';
    num = num * 10 + c;
    c = getchar();
  }
  return num*sign;
}

vector<int> V[1000004];
int P[1000005][22], L[1000005], C[1000005];
int Pow[22],dont[1000005];

int dfs(int n)
{
  for (int i = 1; Pow[i] <= L[n]; i++)P[n][i] = P[P[n][i - 1]][i - 1];
  for (int i = 0; i<V[n].size(); i++)
  {
    int x = V[n][i];
    if (L[x] != 0)continue;
    P[x][0] = n;
    L[x] = L[n] + 1;
    C[n] += dfs(x);
  }
  return C[n];
}

int Ancestor(int n, int l)
{
  for (int i = 0; Pow[i] <= l; i++)
  {
    if (l&Pow[i])n = P[n][i];
  }
  return n;
}

int main()
{
  Pow[0] = 1;
  for (int i = 1; i <= 20; i++)Pow[i] = Pow[i - 1] * 2;

  int n = getnum(), k = getnum();
  L[n] = 1;

  for (int i = 1; i < n; i++)
  {
    int a = getnum(), b = getnum();

    V[a].pb(b);
    V[b].pb(a);
  }

  dfs(n);
  dont[n] = 1;
  k = n - k - 1;
  int nn = n;

  while (n && k)
  {
    if (!dont[n])
    {
      int l = 20, x = n;

      while (l >= 0)
      {
        if (P[x][l] && !dont[P[x][l]]) x = P[x][l];
        l--;
      }

      if (L[n] - L[x] + 1 <= k)
      {
        x = n;
        while (!dont[x])
        {
          dont[x] = 1;
          x = P[x][0];
          k--;
        }
      }
    }
    n--;
  }

  for (int i = 1; i <= nn; i++)if (!dont[i])printf("%d ", i);
}