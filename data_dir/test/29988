#pragma comment(linker, "/stack:640000000")

#include<bits/stdc++.h>
#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
#define ll long long int
#define scanl(a) scanf("%lld",&a)
#define scanii(a,b) scanf("%d%d",&a,&b)
#define scaniii(a,b,c) scanf("%d%d%d",&a,&b,&c)
#define scanll(a,b) scanf("%lld%lld",&a,&b)
#define scanlll(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define scani(a) scanf("%d",&a)
#define clr(a) memset(a,0,sizeof(a))
#define clr_(a) memset(a,-1,sizeof(a))
#define pb(a) push_back(a)
#define pii pair<int,int>
#define sqr(a) a*a
#define eps 1e-9
#define inf INT_MAX
#define pi acos(-1.0)
#define ff first
#define ss second
#define INF 1e18
#define endl '\n'
#define vsort(v) sort(v.begin(),v.end())
#define all(v) v.begin(),v.end()
#ifdef shaft
     #define debug(args...) {cerr<<"Debug: "; dbg,args; cerr<<endl;}
#else
    #define debug(args...)  // Just strip off all debug tokens
#endif

struct debugger{
    template<typename T> debugger& operator , (const T& v){
        cerr<<v<<" ";
        return *this;
    }
}dbg;
set<pii>st;
bool mark[400010];
int main()
{
     ///ios_base::sync_with_stdio(0);
     ///cin.tie(0);
    #ifdef shaft
        freopen("in.txt","r",stdin);
        ///freopen("out.txt","w",stdout);
    #endif ///shaft
    int n,k;
    while(scanii(n,k)==2)
    {
        int arr[n+10],next[n+10],pos[400010];
        for(int i=1;i<=n;i++)
        {
            scani(arr[i]);
        }
        for(int i=1;i<=400000;i++)pos[i]=n+1;
        for(int i=n;i>=1;i--)
        {
            next[i]=pos[arr[i]];
            pos[arr[i]]=i;
        }
        int ans=0,tot=0;
        for(int i=1;i<=n;i++)
        {
            int x=arr[i];
            if(mark[x])
            {
                st.erase(pii(pos[x],x));
                pos[x]=next[i];
                st.insert(pii(pos[x],x));
                continue;
            }
            if(tot==k){
                set<pii>::iterator it=st.end();it--;
                st.erase(it);
                mark[it->ss]=0;
                ans++;
                pos[x]=next[i];
                st.insert(pii(pos[x],x));
                mark[x]=1;
            }
            else{
                mark[x]=1;
                ans++;
                tot++;
                pos[x]=next[i];
                st.insert(pii(pos[x],x));
            }
        }

        printf("%d\n",ans);
    }
    return 0;
}

