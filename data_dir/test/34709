#include <bits/stdc++.h>
using namespace std;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;

const int mxN = 100010;
int res[mxN],sz;
vector<int> q[mxN];
vector<int> occ[mxN];
int pointer[mxN];

int sumTree[mxN<<2];

void upd(int ind,int val,int n = 1,int l = 0,int r = sz-1) {
	if(l == r) {
		sumTree[n] += val;
		return;
	}
	int md = (l + r)>>1;
	if(ind <= md)
		upd(ind,val,n<<1,l,md);
	else
		upd(ind,val,n<<1|1,md+1,r);
	sumTree[n] = sumTree[n<<1] + sumTree[n<<1|1];
}

int getInd(int val,int n = 1,int l = 0,int r = sz-1) {
//	cerr<<val<<' '<<n<<' '<<l<<' '<<r<<'\n';
	if(sumTree[n] < val)
		return -1;
	if(l == r) {
		return l;
	}
	int md = (l + r)>>1;
	if(sumTree[n<<1] >= val)
		return getInd(val,n<<1,l,md);
	return getInd(val - sumTree[n<<1],n<<1|1,md+1,r);
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	int N;
	cin>>N;
	vector<int> a(N),v;
	for(int i = 0;i < N;i++) {
		cin>>a[i];
		if(v.empty() || v.back() != a[i]) {
			v.push_back(a[i]);
			occ[v.back()].push_back(v.size()-1);
		}
	}
	for(int i = 1;i <= N;i++) {
		q[0].push_back(i);
	}
	sz = v.size();
	for(int i = 1;i <= N;i++) {
		if(!occ[i].empty()) {
			upd(occ[i][0],1);
		}
	}
	for(int i = 0;i < sz;i++) {
		int to = i;
		sort(q[i].begin(),q[i].end());
		for(auto k : q[i]) {
//			cerr<<i<<' '<<k<<'\n';
			res[k]++;
			to = getInd(k + 1);
			if(to != -1) {
				if(to < (int)v.size())
					q[to].push_back(k);
			}
		}
		upd(i,-1);
		pointer[v[i]]++;
		if(pointer[v[i]] < (int)occ[v[i]].size())
			upd(occ[v[i]][pointer[v[i]]],1);
	}
	for(int i = 1;i <= N;i++) {
		cout<<res[i]<<" \n"[i == N];
	}
	return 0;
}
