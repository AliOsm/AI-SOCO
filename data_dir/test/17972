#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <set>
#include <map>
#include <unordered_map>
#include <cassert>
#include <iostream>
#include <iomanip>    
#include <cstring>
#include <cmath>

#define pb push_back
#define all(x) (x).begin(), (x).end()
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
#define rep(i, n) for (int (i) = 0; (i) < (n); (i)++)
#define forn(i, n) for (int (i) = 1; (i) <= (n); (i)++)

using namespace std;

template<class T> inline void umax(T &a,T b){if(a < b) a = b;}
template<class T> inline void umin(T &a,T b){if(a > b) a = b;}
template<class T> inline T abs(T a){return a > 0 ? a : -a;}

typedef long long ll;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 2e5 + 100;

int a[N];
int cnt[N];
int pref[N];

int main() {
  int n = read();
  int root = read() - 1;
  rep (i, n) {
    a[i] = read();
  }

  int res = (a[root] != 0);
  if (n == 1) {
    printf("%d\n", res);
    return 0;
  }

  vi ds;
  rep (i, n) {
    if (i != root) {
      ds.pb(a[i]);
    }
  }

  for (int d: ds) {
    cnt[d] += 1;
  }

  forn (i, n) {
    pref[i] = pref[i - 1] + cnt[i];
  }

  int best = inf;
  int nonex = 0;
  forn (h, n - 1) {
    nonex += (cnt[h] == 0);
    int bad = cnt[0] + pref[n] - pref[h];
    umin(best, max(bad, nonex));
  }
  printf("%d\n", best + res);
  return 0;    
}