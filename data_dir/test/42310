/*<<head>> {{{*/
#include <bits/stdc++.h>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <string>
#include <cmath>
#include <queue>
#include <stack>
#include <set>
#include <map>
using namespace std;
typedef double db;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
#define dd(x) cout << #x << " = " << x << ", "
#define de(x) cout << #x << " = " << x << endl
#define rep(i,a,b) for(int i=(a);i<(b);++i)
#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define fi first
#define se second
//INF = 1 061 109 567 ; INF + INF = 2 122 219 134 ;
//LINF = 4 557 430 888 798 830 399 ; LINF + LINF = 9 114 861 777 597 660 798 ;
const int INF = 0x3f3f3f3f;     // -INF: 0xc0   abs(-INF) = INF + 1
const ll LINF = 0x3f3f3f3f3f3f3f3f;
/*}}}*/                         // zr, zm
const int MOD = (int)1e9+7;     // when MOD = 1e9+7, inv2 = 500000004
const int N = (int)-1;

// ------- 变量 ------- //

ll n;
int k;

// ------- 函数 ------- //

vector < pair<ll, int> > pf;
void DPF(ll x) {
    pf.clear();
    for (ll i = 2; i * i <= x; ++i) if (x % i == 0) {
        int cnt = 0;
        while (x % i == 0) x /= i, cnt++;
        pf.pb(mp(i, cnt));
    }
    if (x > 1) pf.pb(mp(x, 1));
}

inline int add(int a, int b) { return (a += b) >= MOD ? a - MOD : a; }
inline int mul(int a, int b) { return 1ll * a * b % MOD; }

int dp[60], inv[60], pw[60];
int work(ll p, int q) {
    memset(dp, 0, sizeof(dp));
    dp[q] = 1;
    rep(j, 1, k+1) rep(i, 0, q+1) rep(ii, i, q+1) {
        if (ii == i) dp[i] = mul(dp[ii], inv[ii+1]);
        else dp[i] = add(dp[i], mul(dp[ii], inv[ii+1]));
    }
    pw[0] = 1;
    rep(i, 1, q+1) pw[i] = mul(pw[i-1], p % MOD);
    int res = 0;
    rep(i, 0, q+1) res = add(res, mul(dp[i], pw[i]));
    return res;
}

void Init() {
    DPF(n);
    inv[1] = 1;
    rep(i, 2, 60) inv[i] = (ll)(MOD - MOD / i) * inv[MOD % i] % MOD;
}

int Solve() {
    int ans = 1;
    for (auto o : pf) ans = mul(ans, work(o.fi, o.se));
    return printf("%d\n", ans);
}

// ------- main ------- //

int main ()
{
    //ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    //freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);

    //Pre();
    //int t; scanf("%d", &t); while (t--) {
    while (~scanf("%lld%d", &n, &k)) {
    //while(fgets(s, N, stdin)) {   // 注意 fgets 会读入换行符
        //if (n == 0) break;
        //static int kase = 0; printf("Case %d: ", ++kase);
        Init();
        Solve();
        //if (t) puts("");
    }
    return 0;
}