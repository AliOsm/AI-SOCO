///                                                     ببِسْمِ اللَّهِ الرَّحْمَنِ الرَّحِيم
#include <bits/stdc++.h>
#define br   break
#define off  exit( 0 )
#define cn   continue
#define rt   return
#define do   double
#define cr   char
#define st   string
#define sc   scanf
#define pr   printf
#define mk   make_pair
#define pb   push_back
#define pf   push_front
#define p_f  pop_front
#define p_b  pop_back
#define siz  strlen
#define ff   first
#define ss   second
#define vec  vector
#define gcd  __gcd
#define pi   acos( -1 )
#define ll   long long
#define N    1000256
#define M    1000000007
#define I    1000000000000000000
#define pll  pair < ll, ll >
#define pii  pair < int, int >
#define rep( a, b, c, d )  for( int a = b; a <= c; a += d )
#define rvv( a, b, c, d )  for( int a = b; a >= c; a -= d )
#define en                 printf( "\n" )
#define sqr( a )           a * a
#define all( c )           c.begin(), c.end()
#define srt( c )           sort( all( c ) )
#define rev( c )           reverse( all( c ) )
#define srtr( c )          sort( c.rbegin(), c.rend() )
#define numcounts          __builtin_popcount
#define mxx( x, y, z )     max( x, max( y, z ) )
#define mnn( x, y, z )     min( x, min( y, z ) )
#define mxn( x, y, z )     max( x, min( y, z ) )
#define mnx( x, y, z )     min( x, max( y, z ) )
using namespace std;
ll tests;
int n, m, k;
ll dp[ 1 << 20 ][ 20 ], c[ 20 ][ 20 ], a[ 20 ], ans;
void solve()
{
    sc( "%d%d%d", &n, &m, &k );
    rep( i, 0, n - 1, 1 )
    {

        sc( "%I64d", &a[ i ] );
        dp[ 1 << i ][ i ] = a[ i ];
    }
    rep( i, 1, k, 1 )
    {
        int x, y, z;
        sc( "%d%d%d", &x, &y, &z );
        c[ y - 1 ][ x - 1 ] = z;
    }
    rep( mask, 0, ( 1 << n ) - 1, 1 )
    {
        rep( i, 0, n - 1, 1 )
        {
            if( !( ( 1 << i ) & mask ) )cn;
            rep( j, 0, n - 1, 1 )
            {
                if( ( ( 1 << j ) & mask ) )cn;
                ll newmask = ( mask | ( 1 << j ) );
                dp[ newmask ][ j ] = max( dp[ newmask ][ j ], dp[ mask ][ i ] + c[ i ][ j ] + a[ j ] );
            }
            if( numcounts( mask ) == m )
                ans = max( ans, dp[ mask ][ i ] );
        }
    }
    pr( "%I64d", ans );
}
int main()
{
    /*sc( "%I64d", &tests );
    while( tests -- )*/
        solve();

}













