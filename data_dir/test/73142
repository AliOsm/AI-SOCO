#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 10;
int n, dp[N][2];
long long k, a[N];
bool used[N];
int main(){
	// freopen("input.txt", "r", stdin);
	// freopen("output.txt", "w", stdout);
	ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin>>n>>k;
	for (int i=1; i<=n; i++){
		cin>>a[i];
	}
	if (k == 1){
		cout<<n;
		return 0;
	}
	sort(a+1, a+n+1);
	int ans = 0;
	for (int i=1; i<=n; i++){
		if (used[i] == true){
			continue;
		}
		long long key = a[i];
		vector<int> v;
		v.push_back(0);
		while (true){
			int left = i - 1, right = n;
			while (right - left > 1){
				int mid = (left + right) / 2;
				if (a[mid] >= key){
					right = mid;
				}
				else{
					left = mid;
				}
			}
			int beg = right;
			left = i, right = n + 1;
			while (right - left > 1){
				int mid = (left + right) / 2;
				if (a[mid] > key){
					right = mid;
				}
				else{
					left = mid;
				}
			}
			if (a[left] == key){
				v.push_back(left - beg + 1);
				for (int j=beg; j<=left; j++){
					used[j] = true;
				}
			}
			else{
				break;
			}
			key = key * k;
		}
		for (int i=1; i<v.size(); i++){
			dp[i][0] = max(dp[i-1][0], dp[i-1][1]);
			dp[i][1] = dp[i-1][0] + v[i];
		}
		ans = ans + max(dp[v.size()-1][0], dp[v.size()-1][1]);
		for (int i=1; i<v.size(); i++){
			dp[i][0] = dp[i][1] = 0;
		}
	}
	cout<<ans;
}