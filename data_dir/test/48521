        /*"Success isn't permanent, failure isn't fatal,
                                      it's the courage to continue that counts"*/
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
//typedef tree<pii, null_type, less<pii>, rb_tree_tag, tree_order_statistics_node_update> oset;
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
using namespace std;
const ll mod=1e9+7;         
const int N=1e5+4;
 
typedef pair<int,int> pii;
 
bool visit[4][N];
 
int main()
{
    int n,q;
    
    scn(n); scn(q);
    
    set<pii> blocks;
    
    set<int> up,down;
    
    while(q--)
    {
        int r,c;
        
        scn(r); scn(c);
        
        if(visit[r][c]==0)
        {
            if(r==1)
            up.insert(c);
            else
            down.insert(c);
            
            visit[r][c]=1;
            
            if(r==2)
            {
                rep(i,-1,2)
                if(up.find(c-i)!=up.end())
                blocks.insert({c-i,c});
            }
            else
            {
                rep(i,-1,2)
                if(down.find(c-i)!=down.end())
                blocks.insert({c,c-i});
            }
        }
        else
        {
            visit[r][c]=0;
            
            if(r==1)
            up.erase(c);
            else
            down.erase(c);
            
            if(r==2)
            {
                rep(i,-1,2)
                if(up.find(c-i)!=up.end())
                blocks.erase({c-i,c});
            }
            else
            {
                rep(i,-1,2)
                if(down.find(c-i)!=down.end())
                blocks.erase({c,c-i});
            }
        }
        
        if(blocks.empty())
        cout<<"Yes\n";
        else
        cout<<"No\n";
    }
    
    return 0;
}