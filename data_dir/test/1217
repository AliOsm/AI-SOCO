// 11.01.2018
//
// ������������ ����� �� ����� 4



# include <cstdio>
# include <cstdlib>
# include <cmath>
# include <ctime>
# include <iostream>
# include <iomanip>
# include <set>
# include <cstring>
# include <string>

# include <vector>
//                 insert, append, size
# include <stack>
//                 push, pop, top, empty
# include <queue>
//                 push, pop, front, empty
# include <map>
# include <list>
//                 push_back, begin, end
# include <algorithm>


# define iabs(x) ( (x) < 0 ? (-(x)) : (x) )
# define sqr(x) ( (x) * (x) )


//# define lint long long int
# define lint   __int64


# define x   __XX
# define y   __YY
# define x1   __XX1
# define y1   __YY1

# define fi first
# define se second



using namespace std;


const int K = 11;

typedef pair <int, int> Pair;
typedef pair <int, Pair> Trio;
typedef pair <Pair, Pair> Quattro;
typedef pair <int, char [K]> isPair;



const int N = 111;
const double eps = 1e-9;


int n, m, k, a, b, c;
bool ok;
char s [N][N], name [K];
isPair p [N];


int Word (int is, int i);
int Find (char * str);
int StrEqu (char * s, char * t);
void Copy (char * s, char * t);
void Sorter ();


int main ()
{
# ifndef ONLINE_JUDGE
   freopen ("B.TXT", "r", stdin);
   freopen ("B.OUT", "w", stdout);
# endif

   ios_base::sync_with_stdio (0);

   cin >> p [0].se >> n;

   p [0].fi = 0, k = 1;
   cin.getline (s [0], N);

# ifndef ONLINE_JUDGE
   cout << p [0].se << endl;
   cout << "n = " << n << endl;
# endif

   for ( int i (0); i < n; i++ )
   {
      cin.getline (s [i], N);

# ifndef ONLINE_JUDGE
//   cout << s [i] << endl;
# endif
   }

   for ( int i (0); i < n; i++ )
   {
      int le = Word (i, 0), pos;
      int k1 = Find (s [i]);
      switch ( s [i][le+1] )
      {
         case 'p' : pos = le + 11; m = 15; break;
         case 'c' : pos = le + 14; m = 10; break;
         case 'l' : pos = le + 7; m = 5; break;
      }
      int k2 = Find (s [i] + pos);

      if ( k2 == 0 ) p [k1].fi += m;
      if ( k1 == 0 ) p [k2].fi += m;

# ifndef ONLINE_JUDGE
   cout << s [i] << endl;
   cout << "k = " << k << " le = " << le << " pos = " << pos << " " << s [i][pos] << endl;
   cout << "k1 = " << k1 << " k2 = " << k2 << endl;
# endif
   }

# ifndef ONLINE_JUDGE
   cout << "k = " << k << endl;
   for ( int i (0); i < k; i++ )
   {
      for ( int j (0); p [i].se [j] != 0 && p [i].se [j] != ' '; j++ )
         cout << p [i].se [j];
      cout << " " << p [i].fi << endl;
   }
   cout << endl;
# endif

   Sorter ();

   for ( int i (1); i < k; i++ )
   {
      for ( int j (0); p [i].se [j] != 0 && p [i].se [j] != ' '; j++ )
         cout << p [i].se [j];

# ifndef ONLINE_JUDGE
      cout << " " << p [i].fi;
# endif
      cout << endl;
   }

   return 0;
}

int Find (char * str)
{
   for ( int i (0); i < k; i++ )
      if ( StrEqu (p [i].se, str) == 0 )
         return i;

   Copy (p [k++].se, str);
   return k-1;
}

void Sorter ()
{
   for ( int i (1); i < k-1; i++ )
      for ( int j (1); j < k-i; j++ )
         if ( p [j].fi < p [j+1].fi || p [j].fi == p [j+1].fi && StrEqu (p [j].se, p [j+1].se) > 0 )
         {
            swap (p [j].fi, p [j+1].fi);
            Copy (name, p [j+1].se);
            Copy (p [j+1].se, p [j].se);
            Copy (p [j].se, name);
         }
}

void Copy (char * s, char * t)
{
   for ( ; * t != ' ' && * t != 0 && * t != '\''; s++, t++ )
      * s = * t;
   * s = ' ';
}

int StrEqu (char * s, char * t)
{
   for ( ; * s && * s != ' ' && * s != '\'' && * t && * t != ' ' && * t != '\'' && * s == * t; s++, t++ )
      ;
   if ( (* s == ' ' || * s == 0 || * s == '\'') && (* t == ' ' || * t == 0 || * t == '\'') )
      return 0;
   if ( * s < * t )
      return -1;
   else
      return +1;
}

int Word (int is, int i)
{
   int len = 0;
   if ( s [is][i] == ' ' )
      i++, len++;
   for ( int j (i); s [is][j] != 0 && s [is][j] != ' '; j++ )
      len++;
   return len;
}
