#include <iostream>
#include <vector>
#include <map>
#include <unordered_set>

using namespace std;

struct Point {
    long long x, y;
};

struct Line {
private:

    long long gcd(long long a, long long b) {
        if (a == 0)
           return b;

        return gcd(b % a, a);
    }

public:
    long long a, b, c;

    Line(Point& p1, Point& p2) {
        a = p1.y - p2.y;
        b = p2.x - p1.x;
        c = -a * p1.x - b * p1.y;
    }


    void reduction() {
        long long coef = gcd(gcd(abs(a), abs(b)), abs(c));

        if (a < 0 || (a == 0 && b < 0) || (a == 0 && b == 0 && c < 0))
            coef = -coef;

        a /= coef;
        b /= coef;
        c /= coef;
    }

};

Point arr[2000];
map<pair<long long, long long>, unordered_set<long long> > mas;
vector<long long> counts;

int main() {
    long long n;
    cin >> n;

    for (long long i = 0; i < n; ++i)
        cin >> arr[i].x >> arr[i].y;

    for (long long i = 0; i < n; ++i) {
        for (long long j = i + 1; j < n; ++j) {
            Line line(arr[i], arr[j]);
            line.reduction();

            mas[make_pair(line.a, line.b)].insert(line.c);
        }
    }


    for (auto el : mas)
        counts.push_back(el.second.size());

    long long sum = 0;
    for (long long i = 0; i < counts.size(); ++i)
        sum += counts[i];

    long long ans = 0;
    for (long long i = 0; i < counts.size(); ++i) {
        sum -= counts[i];
        ans += sum * counts[i];
    }

    cout << ans;
}