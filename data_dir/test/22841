#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse2")
#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
#define int long long
using namespace std;
using namespace __gnu_pbds;
typedef tree<pair <int, int>, null_type, less<pair <int, int>>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

int q, id = 0;
vector <long double> st;
long double cur = 0.0, sum[500010];

signed main () {
  scanf("%lld", &q);
  while (q--) {
    int t;
    scanf("%lld", &t);
    if (t == 1) { // add
      int x;
      scanf ("%lld", &x);
      st.push_back(x);
      if (id == 0) {
        sum[id] += (long double)x;
      } else {
        sum[id] = sum[id - 1] + (long double)x;
      }
      id += 1;
      if (st.size() == 1) continue;
      if (st.size() == 2) {
        cur = max(cur, st.back() - (long double)(st[0] + st[1]) / 2.0);
        continue;
      }
      int lo = -1, hi = st.size() - 1;
      while (lo + 1 < hi) {
        int md = (lo + hi) >> 1;
        long double f = (sum[md] + st.back()) / ((long double)md + 2.0);
        long double s;
        int mdx = md + 1;
        if (mdx == st.size() - 1) {
          s = sum[mdx] / ((long double)(mdx) + 1.0);
        } else {
          s = (sum[mdx] + st.back()) / ((long double)mdx + 2.0);
        }
        cur = max (cur, st.back() - min(s, f));
        if (f <= s) {
          hi = md;
        } else {
          lo = md;
        }
      }
    } else { // query
      cout << setprecision(15) << cur << "\n";
    }
  }
  return 0;
}
