/**
*
* Author: MARC
* Lang: GNU C++14
*
**/

#include<bits/stdc++.h>
using namespace std;

#define F first
#define S second
#define ii pair < int , int >
#define LS pair < ll , string >


int x;
bool vis[1<<20];

struct node
{
    node *_0 , *_1 ;
    int C;
    node()
    {
        _1=_0=NULL;
        C=0;
    }
};

void add(node *nd,int i,int x,int val=1)
{
    nd->C+=val;
    if( i < 0 )return;
    if( x&(1<<i) )
    {
        if( !nd->_1 )nd->_1=new node();
        add(nd->_1,i-1,x);
    }
    else
    {
        if( !nd->_0 )nd->_0=new node();
        add(nd->_0,i-1,x);
    }
}

int solve(node *nd,int i)
{
    if( i<0 )return 0;
    if( !nd )nd=new node();

    if( x&(1<<i) )
    {
        if( !nd->_1 )nd->_1=new node();
        if( nd->_1->C == ( 1<<(i) ) )
            return (1<<(i))+solve(nd->_0,i-1);
        else
            return solve(nd->_1,i-1);
    }
    else
    {
        if( !nd->_0 )nd->_0=new node();
        if( nd->_0->C == ( 1<<(i) ) )
            return (1<<(i))+solve(nd->_1,i-1);
        else
            return solve(nd->_0,i-1);
    }
}

int main()
{
    node *root=new node();
    int n , m , s ;
    scanf("%d %d",&n,&m);

    for(int i=0; i<n; i++)
    {
        scanf("%d",&s);
        if( !vis[s] )
        {
            add(root,30,s);
            vis[s]=1;
        }
    }

    for(int i=0; i<m; i++)
    {
        scanf("%d",&s);
        x^=s;
        printf("%d\n",solve(root,30));
    }

    return 0;
}
