#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>

using namespace std;

struct node {
	node* left = nullptr;
	node* right = nullptr;
	int c = 0;
};

inline bool bit(int mask, int pos) {
	return (mask >> pos) & 1;
}

inline void add(node* root, int x) {
	node* cur = root;
	for(int i = 31; i >= 0; --i) {
		if (bit(x, i)) {
			if (cur->right == nullptr) {
				cur->right = new node();
			}
			cur = cur->right;
		} else {
			if (cur->left == nullptr) {
				cur->left = new node();
			}
			cur = cur->left;
		}
		cur->c++;
	}
}

inline void rm(node* root, int x) {
	node* cur = root;
	for(int i = 31; i >= 0; --i) {
		if (bit(x, i)) {
			cur = cur->right;
		} else {
			cur = cur->left;
		}
		cur->c--;
	}
	node* parent = root;
	cur = root;
	for(int i = 31; i >= 0; --i) {
		parent = cur;
		if (bit(x, i)) {
			cur = cur->right;
			if (cur->c == 0) {
				parent->right = nullptr;
				return;
			}
		} else {
			cur = cur->left;
			if (cur->c == 0) {
				parent->left = nullptr;
				return;
			}
		}
	}
}

inline int query(node* root, int x) {
	node* cur = root;
	int ret = 0;
	for(int i = 31; i >= 0; --i) {
		if (bit(x, i)) {
			if (cur->left != nullptr && cur->left->c > 0) {
				ret |= 1 << i;
				cur = cur->left;
			} else {
				cur = cur->right;
			}
		} else {
			if (cur->right != nullptr && cur->right->c > 0) {
				ret |= 1 << i;
				cur = cur->right;
			} else {
				cur = cur->left;
			}
		}
	}
	return max(x, ret);
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie();
	node* root = new node();
	add(root, 0);
	int n;
	cin >> n;
	for(int i = 0; i < n; ++i) {
		string op;
		cin >> op;
		int x;
		cin >> x;
		if (op == "+") add(root, x);
		if (op == "-") rm(root, x);
		if (op == "?") cout << query(root, x) << endl;
	}
	return 0;
}
