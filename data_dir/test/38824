#include <bits/stdc++.h>
using namespace std;
#define ll long long

const int N = 2e5+15;

ll a[N],b[N];

ll rem[N];
bool canDoit(ll reu,int n,int k){
   int use = 0;
   priority_queue<pair<ll,int>,vector<pair<ll,int> >,greater<pair<ll,int> > >pq;
   ll x;
   for(int i=1;i<=n;++i){
      rem[i] = a[i];
      x = rem[i] /b[i] + 1;
      pq.push(make_pair(x,i));
      rem[i] -= x*b[i];
   }
   ll cur,add;
   int id;
   for(int i=0;i<k;++i) {
      while(!pq.empty()) {
         cur = pq.top().first;
         id = pq.top().second;
         if(i==cur){
            if(use==0){
               return false;
            }
            --use;
            rem[id] += reu;
            if(rem[id]<0){
               add = 0;
            } else {
               add = rem[id]/b[id] + 1;
            }
            rem[id] -= b[id]*add;
            pq.pop();
            pq.push(make_pair(cur+add,id));
         } else {
            break;
         }
      }
      ++use;
   }
   return true;
}
void solve() {
   int n,k;
   scanf("%d%d",&n,&k);
   for(int i=1;i<=n;++i){
      scanf("%lld",&a[i]);
   }
   for(int i=1;i<=n;++i){
      scanf("%lld",&b[i]);
   }
   ll l = 0, r= 5e12,mid;
   while(l<r){
      mid = (l+r)/2;
      if(canDoit(mid,n,k)){
         r = mid;
      } else {
         l = mid+1;
      }
   }
   if(l==5e12){
      l = -1;
   }
   printf("%lld\n", l);
}
int main(){
   //freopen("input.txt","r",stdin);
   solve();
}