#include <bits/stdc++.h>
#define MOD 1000000007

using namespace std;

const double pi = acos(-1);
const int N = 1e6 + 5;

int n = 1000000, tree[N << 3], Lazy[N << 3], f, ans;

void ppg(int id, int l, int r){
    if(l != r){
        Lazy[id << 1] = (Lazy[id << 1] + Lazy[id]) % MOD;
        Lazy[id << 1 | 1] = (Lazy[id << 1 | 1] + Lazy[id]) % MOD;;
        int mid = (l + r) >> 1;
        tree[id << 1] = (tree[id << 1] + Lazy[id] * (mid - l + 1ll)) % MOD;
        tree[id << 1 | 1] = (tree[id << 1 | 1] + 1ll * Lazy[id] * (r - mid)) % MOD;
    }
    Lazy[id] = 0;
}

void upd(int s, int e, int v, int id = 1, int l = 1, int r = n){
    if(Lazy[id])
        ppg(id, l, r);
    if(s > r || e < l)
        return;
    if(s <= l && r <= e){
        tree[id] = (tree[id] + v * (r - l + 1ll)) % MOD;
        Lazy[id] = v;
        return;
    }
    int mid = (l + r) >> 1;
    upd(s, e, v, id << 1, l, mid);
    upd(s, e, v, id << 1 | 1, mid + 1, r);
    tree[id] = (tree[id << 1] + tree[id << 1 | 1]) % MOD;
}

int query(int s, int e, int id = 1, int l = 1, int r = n){
    if(Lazy[id])
        ppg(id, l, r);
    if(s > r || e < l)
        return 0;
    if(s <= l && r <= e)
        return tree[id];
    int mid = (l + r) >> 1;
    return (query(s, e, id << 1, l, mid) + query(s, e, id << 1 | 1, mid + 1, r)) % MOD;
}

int main(){
    upd(1, n, 1);
    scanf("%d", &f);
    for(int i=0; i<f; i++){
        int x;
        scanf("%d", &x);
        int q = query(x, x);
        int inc = 1ll * q * x % MOD;
        ans = (ans + inc) % MOD;
        upd(x, x, -q);
        upd(x, n, inc);
    }
    printf("%d\n", ans);
    return 0;
}
