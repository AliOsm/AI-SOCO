/// I won't go back on my word ,that's my ninja way!!!
#include<bits/stdc++.h>
using namespace std;
const int N = 2e5+5 ;

int parent[N] ,Rank[N] ,cnt[N] ;
int find_set(int i){
    if(parent[i]==i)return i;
    return parent[i]=find_set(parent[i]);
}
void join(int i,int j){
    i=find_set(i);
    j=find_set(j);
    int a = cnt[i] ;
    int b = cnt[j] ;

    if(i==j)return ;
    if(Rank[i]>Rank[j]){
        parent[j]=i;
        cnt[find_set(j)] += b ;
    }
    else{
        parent[i]=j;
        if(Rank[i]==Rank[j])++Rank[j];
        cnt[find_set(i)] += a ;
    }
}

int n ,q ;
pair<int ,pair<int,int>> edge[N] ;
pair<int,int> qry[N] ;
long long ans[N] ;
int main(){
    scanf("%d%d",&n,&q);
    for(int i=1;i<=n;++i){
        cnt[i] = 1 ;
        parent[i] = i ;
    }
    --n ;
    for(int i=0;i<n;++i) scanf("%d%d%d",&edge[i].second.first,&edge[i].second.second,&edge[i].first);
    sort(edge,edge+n);

    for(int i=0;i<q;++i){
        scanf("%d",&qry[i].first);
        qry[i].second = i ;
    }
    sort(qry,qry+q);
    int j = 0 ;
    long long anss = 0 ;
    for(int i=0;i<q;++i){
        while(j<n && edge[j].first<=qry[i].first){
            int ii = find_set(edge[j].second.first) ;
            int jj = find_set(edge[j].second.second);
            if(ii==jj)continue;

            anss -= 1ll * cnt[ii] * (cnt[ii]-1)/2 ;
            anss -= 1ll * cnt[jj] * (cnt[jj]-1)/2 ;

            join(ii,jj) ;

            ii = find_set(ii) ;
            anss += 1ll * cnt[ii] * (cnt[ii]-1)/2 ;
            ++j ;
        }
        ans[qry[i].second] = anss ;
    }
    for(int i=0;i<q;++i) printf("%lld ",ans[i]);
    return 0;
}
