// clang-format off
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#ifndef ONLINE_JUDGE
// #define broot
#endif

#ifndef broot
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
// #pragma GCC target ("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#endif

#define int long long
typedef long double ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef gp_hash_table<int, int> umap;
typedef tree<int, null_type, less<int>, rb_tree_tag,
        tree_order_statistics_node_update> oset;
// not that imp
typedef pair<pii, int> piii;
typedef vector<int> vi;
typedef vector<pii> vii;
typedef complex<ld> cd;

#define INF 4557430888798830399ll
#define MOD 1000000007
#define EPS 1e-7
#define PI 3.1415926535897932385
// #define PI acos(-1)

#define pb push_back
#define bitc __builtin_popcountll
#define mp make_pair
#define ff first
#define ss second
#define all(ar) ar.begin(), ar.end()
#define sz(x) (int)(x).size()
#define len(x) (int)x.length()

#define fr(i, a, b) for (int i = (a), _b = (b); i <= _b; i++)
#define rep(i, n) for (int i = 0, _n = (n); i < _n; i++)
#define repr(i, n) for (int i = n - 1; i >= 0; i--)
#define frr(i, a, b) for (int i = (a), _b = (b); i >= _b; i--)
#define foreach(it, ar) for (auto it = ar.begin(); it != ar.end(); it++)
#define fil(ar, val) memset(ar, val, sizeof(ar))  // 0x3f for inf, 0x80 for -INF can also use with pairs
#define trav(a, x) for(auto& a : x)
// #define rep(i, a, b) for(int i = a; i < (b); ++i)  // For kactl
// #define FOR(i, a, b) for (int i = (a); i < (b); i++)  // For Benq
// #define F0R(i, a) for (int i = 0; i < (a); i++)  // For Benq
// #define FORd(i,a,b) for (int i = (b)-1; i >= (a); i--)  // For Benq
// #define F0Rd(i,a) for (int i = (a)-1; i >= 0; i--)  // For Benq

#ifdef broot
template<typename T>
void __p(T a) { cout << a << " "; }
template<typename T>
void __p(std::vector<T> a) { cout << "{ "; for (auto p : a) __p(p); cout << "}"; }
template<typename T, typename F>
void __p(pair<T, F> a) { cout << "{ "; __p(a.first); __p(a.second); cout << "}"; }
template<typename T, typename ...Arg>
void __p(T a1, Arg ...a) { __p(a1); __p(a...); }
template<typename Arg1>
void __f(const char *name, Arg1 &&arg1) {
    cout<<name<<" : ";__p(arg1);cout<<endl;
}
template<typename Arg1, typename ... Args>
void __f(const char *names, Arg1 &&arg1, Args &&... args) {
    int bracket=0,i=0;
    for(; ;i++)
        if(names[i]==','&&bracket==0)
            break;
        else if(names[i]=='(')
            bracket++;
        else if(names[i]==')')
            bracket--;
    const char *comma=names+i;
    cout.write(names,comma-names)<<" : ";
    __p(arg1);
    cout<<"| ";
    __f(comma+1,args...);
}
#define trace(...) cout<<"Line:"<<__LINE__<<" "; __f(#__VA_ARGS__, __VA_ARGS__)
int begtime = clock();
#define end_routine() cout << "\n\nTime elapsed: " << (clock() - begtime)*1000/CLOCKS_PER_SEC << " ms\n\n";
#else
#define endl '\n'
#define trace(...)
#define end_routine()
#endif

mt19937 rng32(chrono::steady_clock::now().time_since_epoch().count());
inline bool equals(double a, double b) { return fabs(a - b) < 1e-9; }
// ll modpow(ll b, ll e, ll mod=MOD) {
//     ll ans=1; for(;e;b=b*b%mod,e/=2) if(e&1) ans=ans*b%mod; return ans; }
// clang-format on

const int maxn = 1000005;
const ll inf = 100000000000000000;

struct Line {
    mutable ll k, m, p;
    bool operator<(const Line& o) const { return k < o.k; }
    bool operator<(ll x) const { return p < x; }
};

struct LineContainer : multiset<Line, less<>> {
    // (for doubles, use inf = 1/.0, div(a,b) = a/b)
    bool minMax = true; // true for min
    // LineContainer(bool minMax): minMax(minMax) {}
    ll div(ll a, ll b) { // floored division
        return a/b;
        // return a / b - ((a ^ b) < 0 && a % b);
    }
    bool isect(iterator x, iterator y) {
        if (y == end()) { x->p = inf; return false; }
        if (x->k == y->k) x->p = x->m > y->m ? inf : -inf;
        else x->p = div(y->m - x->m, x->k - y->k);
        return x->p >= y->p;
    }
    void add(ll k, ll m) {
        if(minMax) k*=-1, m*=-1;
        auto z = insert({k, m, 0}), y = z++, x = y;
        while (isect(y, z)) z = erase(z);
        if (x != begin() && isect(--x, y)) isect(x, y = erase(y));
        while ((y = x) != begin() && (--x)->p >= y->p)
            isect(x, erase(y));
    }
    ll query(ll x) {
        if(empty()) return -inf;
        // assert(!empty());
        auto l = *lower_bound(x);
        ll val = l.k * x + l.m;
        return minMax ? -val : val;
    }
};

typedef long long lld;

LineContainer *plc[200005];
vector<pair<lld,lld> > *pt[200005];
lld a[200005];
lld b[200005];
vector<lld> ed[200005];
LineContainer chull[200005];
vector<pair<lld,lld> > v[200005];
lld dp[200005];

void DFS(lld s, lld p)
{
    lld bigC = -1;
    lld maxi = -1;

    for(auto x:ed[s])
    {
        if(x==p)
            continue;
        DFS(x,s);
    }

    for(auto x:ed[s])
    {
        if(x==p)
            continue;
        if((*pt[x]).size()>maxi)
        {
            maxi = (*pt[x]).size();
            bigC = x;
        }
    }

    if(bigC!=-1)
    {
        pt[s] = pt[bigC];
        plc[s] = plc[bigC];
        for(auto x:ed[s])
        {
            if(x==p || x==bigC)
                continue;
            for(auto y:(*pt[x]))
            {
                (*pt[s]).pb(y);
                (*plc[s]).add(y.ff,y.ss);
            }
        }

        dp[s] = (*plc[s]).query(a[s]);
        (*plc[s]).add(b[s],dp[s]);
        (*pt[s]).pb(mp(b[s],dp[s]));
    }
    else
    {
        dp[s] = 0;
        v[s].pb(mp(b[s],dp[s]));
        chull[s].add(b[s],dp[s]);
        pt[s] = &v[s];
        plc[s] = &chull[s];
    }
}

void solve() 
{
    lld n;
    cin >> n;

    fr(i,1,n)
    {
        cin >> a[i];
    }    
    fr(i,1,n)
    {
        cin >> b[i];
    }

    rep(i,n-1)
    {
        lld u,v;
        cin >> u >> v;
        ed[u].pb(v);
        ed[v].pb(u);
    }

    DFS(1,0);

    fr(i,1,n)
    {
        cout << dp[i] << " ";
    }
    cout << endl;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0), cout.precision(10);  // cout<<fixed;
#ifdef broot
    // cin.exceptions(cin.failbit);
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    int t=1;
    // cin>>t; 
    fr(i,1,t){
        // cout<<"Case #"<<i<<": ";
        solve();
    }
    end_routine();
}