#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

typedef long long ll;
using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 2000000005;
const ll INFLL = 1000000000000000002ll;
const ll MOD = 1000000007;

inline ll min(ll a, ll b, ll c){return min(min(a,b),c);}
inline ll min(ll a, ll b, ll c, ll d){return min(min(min(a,b),c),d);}
inline ll max(ll a, ll b, ll c){return max(max(a,b),c);}
inline ll max(ll a, ll b, ll c, ll d){return max(max(max(a,b),c),d);}

// -------------------------------------------------------------------------------------------------------------

int N, C[200005], D[200005];

void cross(int l1, int r1, int l2, int r2, int &a, int &b)
{
    a = max(l1,l2);
    b = min(r1,r2);
}

int main()
{
    cin >> N;
    f(i,1,N) scanf("%d %d", &C[i], &D[i]);
    int a = 0, b = 0;
    if(D[1] == 1) a = 1900 + C[1], b = INF;
    else a = -INF, b = 1899 + C[1];
    f(i,2,N)
    {
        int ca = 0, cb = 0;
        if(D[i] == 1) ca = 1900 + C[i], cb = INF;
        else ca = -INF, cb = 1899 + C[i];
        int na = a + C[i];
        int nb = b + C[i];
        cross(na,nb,ca,cb,a,b);
        if(a > b)
        {
            cout << "Impossible";
            return 0;
        }
    }
    if(b >= 25001905) cout << "Infinity";
    else cout << b;
}
