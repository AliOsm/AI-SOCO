#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <iterator>
#include <cmath>
#include <set>
#include <deque> 
#include <string>


using namespace std;

int n;
long long base[64];
std::vector<long long> ansResult;

void init() {
	base[0] = 1;
	for (int i = 1 ; i <= 60 ; i++)
		base[i] = base[i - 1] * 2;
}

void doPrint() {
	printf("%d\n", ansResult.size());
	for (int i = 0 ; i < ansResult.size() ; i++)
		printf("%I64d ", ansResult[i]);
	printf("\n");
}

int main()
{
	init();
	int T;
	scanf("%d\n", &T);
	
	for (int ii = 0 ; ii < T ; ii++) {
		scanf("%d", &n);
		if (n == 2) {
			printf("1\n");
			printf("0\n");
			continue;
		}
		if (n == 3) {
			printf("1\n");
			printf("1\n");
			continue;
		}
		
		
		ansResult.clear();
		
		int depth = 0;
		while ((base[depth + 1] - 1) < n) {
			depth++;
		}
		
		long long upBound = base[depth + 1];
		long long lowBound = base[depth];
		
		long long midPos = lowBound + base[depth - 1] - 1;
		
		if (n > midPos) {
			for (int i = 1 ; i <= depth - 1 ; i++)
				ansResult.push_back(base[i - 1]);
			long long left = n - midPos;
			ansResult.push_back(left);
			doPrint();
		} else {	//n <= midPos
			ansResult.push_back(0);
			for (int i = 1 ; i <= depth - 1 ; i++)
				ansResult.push_back(base[i - 1]);
			
			long long left = n - lowBound;
			int p = 1;
			while (left > 0) {
				if (ansResult[p] <= left) {
					left = left - ansResult[p];
					ansResult[p - 1] = ansResult[p];
					ansResult[p] = 0;
				} else {
					ansResult[p - 1] = left;
					ansResult[p] = ansResult[p] - ansResult[p - 1];
					left = 0;
				}
				p++;
			}
			
			doPrint();
		}
	}
	return 0;
}

