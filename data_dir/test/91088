#include <bits/stdc++.h>

#define x0 abc
#define y0 ABC
#define x1 abcd
#define y1 ABCD
#define xn abcde
#define yn ABCDE

#define l_b lower_bound
#define u_b upper_bound

#define fi first
#define se second
#define m_p make_pair

#define p_b push_back
#define po_b pop_back

#define ld long double
#define ll long long

#define re return
#define cont continue

#define MAXLL 9000000000000000000LL
#define MAXINT 2000000000

#define MINLL -9000000000000000000LL
#define MININT -2000000000

#define P acos(-1)

#define endl '\n'

#define OUT cout << "-------" << endl;

using namespace std;

map <int, int> Map;

pair <int, int> a[250001];

vector <int> b[250001], t[250001];

char type;

ll ans;

int len[250001], n, m, i, q, l, r, d, mid, nom, nomN, zn, sum;

bool pole[250001];

    int get(int tl, int tr, int nom, int l, int r, int nomT)
    {
        if (tl > tr)
        re 0;

        if (tl > r || tr < l)
        re 0;

        if (l <= tl && tr <= r)
        re t[nomT][nom];

        int mid = (tl + tr) / 2;

        re get(tl, mid, nom * 2, l, r, nomT) + get(mid + 1, tr, nom * 2 + 1, l, r, nomT);
    }

    void update(int tl, int tr, int nom, int nomN, int zn, int nomT)
    {
        if (tl > tr)
        re;

        if (tl > nomN || tr < nomN)
        re;

        t[nomT][nom] += zn;

        if (tl == tr)
        re;

        int mid = (tl + tr) / 2;

        update(tl, mid, nom * 2, nomN, zn, nomT);
        update(mid + 1, tr, nom * 2 + 1, nomN, zn, nomT);
    }

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> n >> m >> q;

    for (i = 0; i < n; i++)
        if (!pole[i]) {
            nom = i;

            d++;

            t[d].p_b(0);

            b[d].p_b(0);

            while (!pole[nom]) {
                pole[nom] = true;

                len[d]++;

                a[nom + 1] = m_p(d, len[d]);

                b[d].p_b(nom);

                t[d].p_b(0);

                t[d].p_b(0);

                t[d].p_b(0);

                t[d].p_b(0);

                nom = (nom + m) % n;
            }
        }

    while (q--) {
        cin >> type;

        if (type == '+') {
            cin >> zn >> nom;

            nom++;

            sum = 0;

            if (get(1, len[a[nom].fi], 1, a[nom].se, len[a[nom].fi], a[nom].fi) != len[a[nom].fi] - a[nom].se + 1) {
                l = a[nom].se;

                r = len[a[nom].fi];

                while (l <= r) {
                    mid = (l + r) / 2;

                    if (get(1, len[a[nom].fi], 1, a[nom].se, mid, a[nom].fi) != mid - a[nom].se + 1) {
                        r = mid - 1;

                        sum = mid - a[nom].se;
                    }
                    else l = mid + 1;
                }

                update(1, len[a[nom].fi], 1, a[nom].se + sum, 1, a[nom].fi);

                Map[zn] = b[a[nom].fi][a[nom].se + sum] + 1;
            }
            else {
                ans += len[a[nom].fi] - a[nom].se + 1;

                l = 1;

                r = a[nom].se - 1;

                while (l <= r) {
                    mid = (l + r) / 2;

                    if (get(1, len[a[nom].fi], 1, 1, mid, a[nom].fi) != mid) {
                        r = mid - 1;

                        sum = mid - 1;
                    }
                    else l = mid + 1;
                }

                update(1, len[a[nom].fi], 1, sum + 1, 1, a[nom].fi);

                Map[zn] = b[a[nom].fi][sum + 1] + 1;
            }

            ans += sum;
        }
        else {
            cin >> zn;

            nom = Map[zn];

            update(1, len[a[nom].fi], 1, a[nom].se, -1, a[nom].fi);
        }
    }

    cout << ans << endl;

    return 0;
}
