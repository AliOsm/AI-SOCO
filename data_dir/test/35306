#include<iostream>
#include<stdio.h>
#include<assert.h>
#include<string.h>
#include<math.h>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<iomanip>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sqr(x) (x) * (x)
#define LL long long
#define bit __builtin_popcountll
using namespace std;
typedef pair<int, int> pii;
vector<LL> l;
void dfs(LL cur)
{
	if (cur > 1000000000) return;
	l.pb(cur);
	dfs(cur * 10 + 4);
	dfs(cur * 10 + 7);	
}
double intersect(LL a, LL b, LL x, LL y)
{
	if (y < a || b < x) return 0.0;
	if (a <= x) return min(y,b) - x + 1.0;
	return min(y,b) - a + 1.0;
}
int main()
{
	#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	dfs(4);
	dfs(7);
	LL pl,pr,vl,vr,k,a,b,c,d;
	cin>>pl>>pr>>vl>>vr>>k;
	int n = l.size();
	sort(all(l));
	double res = 0.0;
	if (k == 1)
	{
		for(int i = 0; i < n - k + 1; i++)
		{
			a = i > 0 ? l[i - 1] + 1 : 1;
			b = l[i];
			c = l[i + k - 1];
			d = i + k < n ? l[i + k] - 1 : 1000000000;
			res = res + 1.0 * intersect(pl,pr,a,b) / (pr - pl + 1.0) * intersect(vl,vr,c,d) / (vr - vl + 1.0) + 1.0 * intersect(vl,vr,a,b) / (vr - vl + 1.0) * intersect(pl,pr,c,d) / (pr - pl + 1.0);
			res = res - 1.0 * intersect(pl,pr,b,b) / (pr - pl + 1.0) * intersect(vl,vr,c,c) / (vr - vl + 1.0);
		}
		printf("%.9lf\n",res);
		return 0;
	} 
	for(int i = 0; i < n - k + 1; i++)
	{
		a = i > 0 ? l[i - 1] + 1 : 1;
		b = l[i];
		c = l[i + k - 1];
		d = i + k < n ? l[i + k] - 1 : 1000000000;
		res = res + 1.0 * intersect(pl,pr,a,b) / (pr - pl + 1.0) * intersect(vl,vr,c,d) / (vr - vl + 1.0) + 1.0 * intersect(vl,vr,a,b) / (vr - vl + 1.0) * intersect(pl,pr,c,d) / (pr - pl + 1.0);
	}
	printf("%.9lf\n",res);
	return 0;
}
