#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
#define pb push_back
#define F first
#define S second
#define ll long long
#define ull unsigned long long
#define ld long double
#define endl '\n'
#define TIME 1.0*clock()/CLOCKS_PER_SEC
#define pii pair < int , int >
#define Endl '\n'
 
#pragma GCC optimize("Ofast")
 
using namespace std;
using namespace __gnu_pbds;
 
template <typename T> using ordered_set = tree <T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
 
mt19937 gen(chrono::system_clock::now().time_since_epoch().count());
 
const ll mod = 1e9 + 7;
const int FFTM = 998244353;
const int N = 50000;
 
const int SX[4] = {0 , 1 , -1 , 0};
const int SY[4] = {1 , 0 , 0 , -1};
const int rx[8] = {1, -1, 0, 0, 1, 1, -1, -1};
const int ry[8] = {0, 0, 1, -1, 1, -1, 1, -1};
const int kx[8] = {1, 1, -1, -1, 2, 2, -2, -2};
const int ky[8] = {2, -2, 2, -2, 1, -1, 1, -1};
 
vector < vector < int > > G(200000 + 4);
vector < bool > use(200000 + 4);
vector < int > ans(200000 + 4);
 
int dfs(int v, int raz){
    use[v] = 1;
    bool ok = 0;
    int x;
    for (auto to : G[v]){
        if (!use[to]){
            ok = 1;
            x = dfs(to, raz + 1);
        }
    }
    if (ok){
        ans[v] = x;
        return x;
    }
    if (!ok){
        ans[v] = raz;
        return raz;
    }
}
 
void solve(){
    int n;
    cin >> n;
    int a[n];
    for (int i = 0;i < n; ++i){
        cin >> a[i];
        G[i].pb(a[i] - 1);
    }
    for (int i = 0;i < n; ++i){
        if (!use[i])dfs(i, 1);
    }
    for (int i = 0;i < n; ++i){
        G[i].clear();
        use[i] = 0;
    }
    for (int i = 0;i < n; ++i)cout << ans[i] << " ";
    cout << endl;
}
 
int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#endif
    int q;
    cin >> q;
    for (int i = 0;i < q; ++i)solve();
    return 0;
}
