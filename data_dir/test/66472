#include<bits/stdc++.h>
#define all(v) (v).begin(),(v).end()
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ri(x) scanf("%d",&(x))
#define ri2(x,y) scanf("%d %d",&(x),&(y))
#define ri3(x,y,z) scanf("%d %d %d",&(x),&(y),&(z))
#define rll(x) scanf("%lld",&(x))
#define rll2(x,y) scanf("%lld %lld",&(x),&(y))
#define rll3(x,y,z) scanf("%lld %lld %lld",&(x),&(y),&(z))
#define gc(x) ((x) = getchar())
using namespace::std;

const long double PI = acos(-1);
const long long MOD = 1000000000 +7;

typedef long long ll;
typedef pair<ll,ll> pll;
typedef pair<ll,pll> tll;
typedef pair<int,int> ii;
typedef pair<int,ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<iii> viii;
typedef vector<ll> vll;
typedef vector<pll> vpll;
typedef vector<tll> vtll;
typedef vector<string> vs;
typedef set<int> si;
typedef set<ii> sii;
typedef set<iii> siii;

ll gcd(ll a, ll b){ return b==0?a:gcd(b,a%b);}

ll add(ll a, ll b, ll m = MOD){
	if(a >= m) a %= m;
	if(b >= m) b %= m;
	if(a < 0) a += m;
	if(b < 0) b += m;
	ll res = a+b;
	if(res >= m or res <= -m) res %= m;
	if(res < 0) res += m;
	return res;
}

ll mul(ll a, ll b, ll m = MOD){
	if(a >= m) a %= m;
	if(b >= m) b %= m;
	if(a < 0) a += m;
	if(b < 0) b += m;
	ll res = a*b;
	if(res >= m or res <= -m) res %= m;
	if(res < 0) res += m;
	return res;
}

ll pow_mod(ll a, ll b, ll m = MOD){
	ll res = 1LL;
	a = a%m;
	while(b){
		if(b&1) res = mul(res,a,m);
		b >>= 1;
		a = mul(a,a,m);
	}
	return res;
}

ll fastexp(ll a, ll b){
	ll res = 1LL;
	while(b){
		if(b&1) res = res*a;
		b >>= 1;
		a *= a;
	}
	return res;
}

int gcdExtendido(int a, int b, int *x, int *y){
	if(a == 0){
		*x = 0;
		*y = 1;
		return b;
	}
	int x1, y1;
	int gcd = gcdExtendido(b%a,a,&x1,&y1);
	
	*x = y1-(b/a)*x1;
	*y = x1;
	return gcd;
}

int modInverso(int a, int m){
	int x, y;
	int g = gcdExtendido(a,m,&x,&y);
	if(g!=1) return -1;
	else return (x%m + m)%m;
}

/****************************************
*************P*L*A*N*T*I*L*L*A************
*****************************************/

const int N = 100000+5;

int n, m;
vii v;
vii w;
queue<int> Q[N];

void radixSort(vii &a){
	for(int i=0; i<m; i++){
		Q[a[i].second].emplace(i);
	}
	vii carry(a.begin(),a.end());
	int pos = 0;
	for(int i=1; i<=n; i++){
		while(!Q[i].empty()){
			carry[pos++] = a[Q[i].front()];
			Q[i].pop();
		}
	}
	for(int i=0; i<m; i++){
		Q[carry[i].first].emplace(i);
	}
	pos = 0;
	for(int i=1; i<=n; i++){
		while(!Q[i].empty()){
			a[pos++] = carry[Q[i].front()];
			Q[i].pop();
		}
	}
}

bool test(int d){
	for(int i=0; i<m; i++){
		w[i] = v[i];
		w[i].first += d;
		w[i].second += d;
		if(w[i].first > n) w[i].first -= n;
		if(w[i].second > n) w[i].second -= n;
		if(w[i].first > w[i].second) swap(w[i].first,w[i].second);
	}
	radixSort(w);
	for(int i=0; i<m; i++){
		if(v[i] != w[i]){
			return false;
		}
	}
	return true;
}

bool solve(){
	for(int i=1; i*i<=n; i++){
		if(n % i == 0){
			if(test(i)) return true;
			if(i*i != n and i != 1 and test(n/i))  return true;
		}
	}
	return false;
}

int main(){
	ri2(n,m);
	int a, b;
	for(int i=0; i<m; i++){
		ri2(a,b);
		if(a > b) swap(a,b);
		v.emplace_back(mp(a,b));
	}
	radixSort(v);
	w.resize(m);
	puts(solve()?"Yes":"No");
	return 0;
}
