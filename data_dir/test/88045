#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcount(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

const int OO = (int) 2e9;
const double eps = 1e-9;

const int N = 200005;

int n, m, k, x, s;
int a[N], b[N], c[N], d[N];

bool valid(ll t) {
	ll tt = n * 1LL * x;
	if (t >= tt)
		return 1;
	int cnt = 0;
	int idx = upper_bound(d, d + k, s) - d - 1;
	if (idx >= 0 && s >= d[0]) {
		cnt = c[idx];
		if (cnt >= n)
			return 1;
		tt = (n - cnt) * 1LL * x;
		if (t >= tt)
			return 1;
	}
	for (int i = 0; i < m; i++) {
		if (s >= b[i]) {
			ll ss = s - b[i];
			if (t >= n * 1LL * a[i])
				return 1;
			idx = upper_bound(d, d + k, ss) - d - 1;
			if (idx >= 0 && ss >= d[0]) {
				cnt = c[idx];
				if (cnt >= n)
					return 1;
				tt = (n - cnt) * 1LL * a[i];
				if (t >= tt)
					return 1;
			}
		}
	}
	return 0;
}

int main() {
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
#ifndef ONLINE_JUDGE
//	freopen("in.txt", "rt", stdin);
//	freopen("out.txt", "wt", stdout);
#endif
	cin >> n >> m >> k >> x >> s;
	for (int i = 0; i < m; i++)
		cin >> a[i];
	for (int i = 0; i < m; i++)
		cin >> b[i];
	for (int i = 0; i < k; i++)
		cin >> c[i];
	for (int i = 0; i < k; i++)
		cin >> d[i];
	ll st = 0, en = 1LL << 62; // infinity bug
	while (st < en) {
		ll mid = st + (en - st) / 2;
		if (!valid(mid))
			st = mid + 1;
		else
			en = mid;
	}
	cout << st << endl;
	return 0;
}
