#include <bits/stdc++.h>

using namespace std;
const int N = 10005;
string s;
int n;
bool dp[N][4], vis[N][4], done[N][4];
set<string> st;

int solve(int i,int last) {
    if(i > s.length())
        return false;
    if(i == s.length())
        return dp[i][last] = true;

    if(vis[i][last])
        return dp[i][last];
    vis[i][last] = true;
    bool ans = false;
    switch(last) {
        case 0:
            ans = solve(i+2,2) + solve(i+3,3);
            break;
        case 2:
            ans = (solve(i+2,2) && (s.substr(i,2) != s.substr(i-2,2)) ) + solve(i+3,3);
            break;
        case 3:
            ans = (solve(i+3,3) && (s.substr(i,3) != s.substr(i-3,3)) ) + solve(i+2,2);
    }
    return dp[i][last] = ans;
}

void build(int i,int last) {
    if(i == s.length() || done[i][last])
        return;
    bool ans = false;
    done[i][last] = true;
    if(last == 0) {
        if(solve(i+2,2))
            st.insert(s.substr(i,2)), build(i+2,2);
        if(solve(i+3,3))
            st.insert(s.substr(i,3)), build(i+3,3);
    } else if (last == 2) {
        if( solve(i+2,2) && (s.substr(i,2) != s.substr(i-2,2)) )
            st.insert(s.substr(i,2)), build(i+2,2);
        if(solve(i+3,3))
            st.insert(s.substr(i,3)), build(i+3,3);
    } else {
        if( solve(i+3,3) && (s.substr(i,3) != s.substr(i-3,3)) )
            st.insert(s.substr(i,3)), build(i+3,3);
        if(solve(i+2,2))
            st.insert(s.substr(i,2)), build(i+2,2);
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin>>s;
    n = s.length();
    for(int i = 5;i<s.length();i++)
        solve(i,0);
    for(int i = 5;i<s.length();i++)
        build(i,0);
    cout<<st.size()<<endl;
    for(string str : st)
        cout<<str<<endl;

    return 0;
}
