#include "bits/stdc++.h"
using namespace std;
#define pb push_back
// #define int long long
typedef long long ll;
#define fi first
#define se second
#define pii pair<int,int>
#define endl '\n'
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define sz(s) (int)s.size()
#define y1 fdfbvfds
typedef long double f80;
#define all(x) x.begin(), x.end()
 
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
ll rand(ll l,ll r){
    uniform_int_distribution<ll> uid(l, r);
    return uid(rng);
}

const int mod = 1e9 + 7;
const int mod1 = 998244353;
const int B = 37;
int pwr(int a,ll b) {
    int ans = 1;
    while(b) {
        if(b & 1) {
            ans = ((ll)ans * a) % mod;
        }
        a = ((ll)a * a) % mod;
        b >>= 1;
    }
    return ans;
}

const int N = 1005;
int a[N], pt[N];
set<int> cur[155];
bool vis[N];

signed main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int n, k;
    cin >> n >> k;
    fr(i, 1, n) {
        cin >> a[i];
    }
    queue<pii> q, q1;
    fr(i, 1, min(n, k)) {
        q.push({1, i});
        cur[1].insert(i);
        pt[i] = 1;
    }
    int pt1 = min(n, k);
    int m = 0;
    int ans = 0;
    while(!q.empty()) {
        bool lol = 0;
        while(!q.empty()) {
            pii u = q.front();
            q.pop();
            cur[pt[u.se]].erase(u.se);
            u.fi++;
            pt[u.se]++;
            if(pt[u.se] <= a[u.se]) {
                q1.push(u);
            }
            else {
                pt[u.se] = -1;
                lol = 1;
                m++;
            }
        }
        while(!q1.empty()) {
            pii u = q1.front();
            q1.pop();
            cur[pt[u.se]].insert(u.se);
            q.push(u);
        }
        while(pt1 < n && sz(q) < k) {
            pt1++;
            q.push({1, pt1});
            pt[pt1] = 1;
            cur[1].insert(pt1);
        }
        int val = (100.0 * m / n + 0.5);
        for(int x : cur[val]) {
            if(!vis[x]) {
                vis[x] = 1;
                ans++;
            }
        }
        // if(lol)
        //     cout << m << endl;
        // if(cur[val]) {
        //     cout << m << " " << val << " " << cur[val] << endl;
        //     fr(i, 1, n) {
        //         cout << pt[i] << " ";
        //     }
        //     cout << endl;
        // }
    }
    cout << ans;
    return 0;
}