#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <string.h>
#include <cmath>
#include <set>
#include <algorithm>
using namespace std;

int n;
int m;
bool used[50];
int on = 0;
int tw = 0;
vector<int> curr;
vector<int> g[50];

vector<pair<int, int> > t;
vector<int> o;
vector<pair<pair<int, int>, int> > th;

void dfs(int v) {
     used[v] = 1;
     curr.push_back(v + 1);
     for(int i = 0; i < g[v].size(); i++) {
             int to = g[v][i];
             if (!used[to]) dfs(to);
     }
}


int main() {
    for(int i = 0; i < 50; i++) used[i] = 0;
    
    scanf("%d %d", &n, &m);
    
    for(int i = 0; i < m; i++) {
            int a, b;
            scanf("%d %d", &a, &b);
            a--;
            b--;
            g[a].push_back(b);
            g[b].push_back(a);
    }
    
    for(int i = 0; i < n; i++) {
            if (!used[i]) {
                          dfs(i);
                          if (curr.size() == 1) {
                                          o.push_back(curr[0]);
                          }
                          if (curr.size() == 2) {
                                          t.push_back(make_pair(curr[0], curr[1]));
                          }
                          if (curr.size() == 3) {
                                          th.push_back(make_pair(make_pair(curr[0], curr[1]), curr[2]));
                          }
                          if (curr.size() > 3) {
                                          printf("-1");
                                          return 0;
                          }
                          curr.clear();
            }
    }
    
    if (t.size() > o.size()) {
                 printf("-1");
    } else {
           for(int i = 0; i < th.size(); i++) {
                   printf("%d %d %d\n", th[i].first.first, th[i].first.second, th[i].second);
           }
           for(int i = 0; i < t.size(); i++) {
                   printf("%d %d %d\n", t[i].first, t[i].second, o[i]);
           }
           
           for(int i = t.size(); i < o.size(); i += 3) {
                   printf("%d %d %d\n", o[i], o[i + 1], o[i + 2]);
           }
    }
           
    
    return 0;
}
