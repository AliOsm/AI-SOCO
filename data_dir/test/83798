#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define mxs ( int )( ( 1e5 + 7 ) + ( 1e5 + 7 ) )
const int k = 450;
struct data
{
    ll l , r , id;
};
data qu [ mxs ];
bool cmp( data &a , data &b )
{
    ll l_a = a.l / k , l_b = b.l / k;
    if ( l_a == l_b )return a.r < b.r;
    return l_a < l_b;
}
ll ar [ mxs ] , ans [ mxs ] , counter [ (ll)( 1e6 + 7 ) ];
void add( ll x );
void rem( ll x );
ll n , q , i , le , re , sum ;
void brainfuck();
int main()
{
    //cout<<sqrt( ( (double)200000 * (double)200000 ) / (double)200000 );
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cin>>n>>q;
    for ( i = 1; i <= n ; i++ )cin>>ar [ i ];
    for ( i = 1 ; i <= q; i++ )
    {
        cin>>qu [ i ].l>>qu [ i ].r;
        qu [ i ].id = i;
    }
    brainfuck();
    return 0;
}
void brainfuck()
{
    sort( qu + 1 , qu + q + 1 , cmp );
    for ( i = 1 ; i <= q; i++ )
    {
        while( qu [ i ].l < le )add(--le);
        while( qu [ i ].l > le )rem(le++);
        while( qu [ i ].r < re )rem(re--);
        while( qu [ i ].r > re )add(++re);
        ans [ qu [ i ].id ] = sum;
    }
    for ( i = 1 ; i <= q ; i++ )cout<<ans [ i ]<<"\n";
}
void add( ll x )
{
    ll lol = counter [ ar [ x ] ];
    lol *= ( lol * ar [ x ] );
    counter [ ar [ x ] ]++;
    sum -= lol;
    lol = counter [ ar [ x ] ];
    lol *= ( lol * ar [ x ] );
    sum += lol;
}
void rem( ll x )
{
    ll lol = counter [ ar [ x ] ];
    lol *= ( lol * ar [ x ] );
    counter [ ar [ x ] ]--;
    sum -= lol;
    lol = counter [ ar [ x ] ];
    lol *= ( lol * ar [ x ] );
    sum += lol;
}
