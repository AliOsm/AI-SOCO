#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <string>
#include <cstring>
// DON'T DIVIDE
// Greedy, Prefix, Sets/Bsearch, Dfs/bfs, DP
// Stack, Bitmask, Dsu 
using namespace std;

int n;
const int MAXN = 35;
int t[MAXN];
bool used[400][400], vis[400][400][8][32];
int dx[8] = {-1, 0, 1, 1, 1, 0, -1, -1};
int dy[8] = {1, 1, 1, 0, -1, -1, -1, 0};
int ans = 0;

void dfs(int x, int y, int dir, int curr)
{
	if(curr > n)
		return;
	if(vis[x][y][dir][curr])
		return;
	vis[x][y][dir][curr] = true;
	for(int i = 0; i < t[curr]; i++)
	{
		x += dx[dir];
		y += dy[dir];
		if(!used[x][y])
		{
			used[x][y] = true;
			ans++;
		}
	}
	dfs(x, y, (dir + 7) % 8, curr + 1);
	dfs(x, y, (dir + 1) % 8, curr + 1);
}

int main()
{
	ios::sync_with_stdio(0);
	cin >> n;

	for(int i = 0; i < n; i++)
		cin >> t[i];

	dfs(160, 160, 3, 0);

	cout << ans << "\n";
	return 0;
}