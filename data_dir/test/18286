#include<bits/stdc++.h>

//#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
//using namespace __gnu_pbds;

#define ss second
#define ff first
#define int long long
//#define double long double
#define pb push_back


const int N = 1e6 + 51 + 51, MOD = 1e9 + 7, mod = 998244353, INF = 2e18;

mt19937 Flash_new_51(51515);

using vi = vector <int>;
using vp = vector <pair <int, int>>;

//gp_hash_table<int, int> table;

struct Node {
    int k, pos, ind;
    Node() {
        k = pos = ind = 0;
    }
    Node (int k1, int pos1, int ind1) {
        k = k1, pos = pos1, ind = ind1;
    }
};

vector <Node> kek;

bool cmp (Node A, Node B) {
      if (A.k == B.k)  {
        return A.pos < B.pos;
      }
      return A.k < B.k;
}
int t[N], n, ans[N], b[N];
pair <int, int> a[N];
bool used[N];

void inc (int i, int delta) {
    used[i] = 1;
    for(; i < n; i |= (i + 1)) {
        t[i] += delta;
    }
}

int sum (int i) {
    int summ = 0;
    for (; i >= 0; i = (i & (i + 1)) - 1) summ += t[i];
    return summ;
}

int zap (int pos) {
    int l = 0, r = n;
    while (r - l > 1) {
        int m = (r + l) >> 1;
        int k = sum(m);
        if (k == pos) {
           if (used[m]) return b[m];
           else r = m;
        }
        else {
            if (k < pos) l = m;
            else r = m;
        }
    }
    return b[l];
}


signed main() {
    #ifdef Flash
     freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
    #endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> a[i].ff;
        a[i].ss = -i;
        b[i] = a[i].ff;
    }
    sort(a, a + n);
    reverse(a, a + n);
    int q;
    cin >> q;
    for (int i = 0; i < q; i++) {
        int k, pos;
        cin >> k >> pos;
        kek.push_back({k, pos, i});
    }
    sort(kek.begin(), kek.end(), cmp);
    int tek = 0;
    for (auto to : kek) {
        for (int i = tek; i < to.k; i++) {
            inc(abs(a[i].ss), 1);
        }
        tek = to.k;
        ans[to.ind] = zap(to.pos);
    }
    for (int i = 0; i < q; i++) cout << ans[i] << "\n";

}
