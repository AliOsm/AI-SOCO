
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
#include <bitset>
#include <complex>
using namespace std;
#define rep(i, n) for (int (i) = 0; (i) < (n); (i) ++)
#define rep1(i, n) for (int (i) = 1; (i) <= (n); (i) ++)
#define FOR(i, a, b) for (int (i) = (a); (i) <= (b); (i)++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout<<#a<<" :";FOR(i123,x,y)cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int((x).size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

int T;
ll dp[35][35][55];
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0); cin.tie(0);
  for (int n = 1; n <= 30; n++)
  {
    for (int m = 1; m <= 30; m++)
    {
      for (int k = 1; k <= 50; k++)
      {
        ll& x = dp[n][m][k];
        x = INFL;
        if (n * m < k) continue;
        if (n * m == k)
        {
          x = 0;
          continue;
        }
        for (int kk = 0; kk <= k; kk++)
        {
          for (int nn = 1; nn < n; nn++)
          {
            const ll xx1 = dp[nn][m][kk];
            const ll xx2 = dp[n - nn][m][k - kk];
            if (xx1 == INFL) continue;
            if (xx2 == INFL) continue;
            x = min(x, xx1 + xx2 + m * m);
          }
          for (int mm = 1; mm < m; mm++)
          {
            const ll xx1 = dp[n][mm][kk];
            const ll xx2 = dp[n][m - mm][k - kk];
            if (xx1 == INFL) continue;
            if (xx2 == INFL) continue;
            x = min(x, xx1 + xx2 + n * n);
          }
        }
      }
    }
  }
  int T;
  cin >> T;
  rep1(helloworld,T)
  {
    int n, m, k;
    cin >> n >> m >> k;
    cout << dp[n][m][k] << endl;
  }
}
