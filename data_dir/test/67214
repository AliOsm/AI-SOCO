#include<bits/stdc++.h>
using namespace std;

const int N = 1 << 18;
int n , m , x , y;
int arr[N];
int segTree[N];

bool build(int s = 0 , int e  = (1 << n) - 1  , int idx = 1)
{
    if(s == e)
        return segTree[idx] = arr[s] , 1;

    bool c = build(s , (s + e) / 2 , idx * 2 );
    build((s + e) / 2 + 1 , e , idx * 2 + 1 );

    if(c)
        segTree[idx] = segTree[idx * 2] | segTree[idx * 2 + 1];
    else segTree[idx] = segTree[idx * 2] ^ segTree[idx * 2 + 1];

    return !c;
}

bool update(int p , int v , int s = 0 , int e = (1 << n) - 1, int idx = 1)
{
    if(p < s || p > e)
        return 0;

    if(s == e && s == p)
        return segTree[idx] = v , 1;

    bool c = update(p , v , s , (s + e) / 2 , idx * 2 );
    c |= update(p , v , (s + e) / 2 + 1 , e , idx * 2 + 1 );

    if(c)
        segTree[idx] = segTree[idx * 2] | segTree[idx * 2 + 1];
    else segTree[idx] = segTree[idx * 2] ^ segTree[idx * 2 + 1];

    return !c;
}

int main()
{
    ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0);

    cin >> n >> m;
    for(int i = 0 ; i < (1 << n) ; i++)
        cin >> arr[i];

    build();

    while(m--)
    {
        cin >> x >> y;
        x--;
        update(x , y);

        cout << segTree[1] << endl;
    }


    return 0;
}
