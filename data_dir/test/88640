#include <bits/stdc++.h>

using namespace std;

#define mem(a,b) memset(a,b,sizeof(a))
#define FOR(i,j,k) for(i=j;i<=k;i++)
#define REV(i,j,k) for(i=j;i>=k;i--)
#define inf         freopen("in.txt", "r", stdin)
#define outf        freopen("out.txt", "w", stdout)
#define pf          printf
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define sfff(a,b,c)    scanf("%d %d %d", &a, &b, &c)
#define minn          (long long)-1000000000000000000
#define maxx          (long long) 1000000000000000000
#define mod          1000000009
#define LL           long long
#define NL '\n'
#define MAX 100005
#define cnd tree[idx]
#define lnd (2*idx)
#define rnd ((2*idx)+1)
#define PB push_back
#define FF first
#define SS second
typedef pair<int,int> pr;

LL  arr[10000000+1], prime[10000000+1], np, pfac[20+1], tim[20+1], nf, divi[100000], nd;
/// np(num of prime)  , nd (number of divisor)
/// nf (num of prime fac)
///pfac stores prime fac and tim count numbers of a prime fac
/// divi stores the divisor of the number
void sieve( LL n )
{
    LL  m = n, i, j;
    prime[np] = 2;
    np++;
    for( i=3; i<=m; i += 2)
    {
        if( arr[i] == 0 )
         {
            for( j=i*i; j<=n; j += (i+i) )
                arr[j]++;
         }
    }
    for( i=3; i<=n; i += 2)
    {
        if( arr[i] == 0 )
         {
            prime[np] = i;
            np++;
         }
    }


}



void prime_fac( LL  n )
{
    LL  m = sqrt(n);

    for( LL  i=0; i<np && prime[i] <= m ; i++ )
    {
        if( n % prime[i] == 0 )
        {
            LL  a = 0;

            while( n % prime[i] == 0 )
            {
                a++;
                n /= prime[i];

            }
           //cout << prime[i] << ' ' << a << endl;
           pfac[nf] = prime[i];
           tim[nf] = a;
           nf++;
           m = sqrt(n);
        }
    }

    if( n != 1 )
    {
           //cout << n << ' ' << 1 << endl;
           pfac[nf] = n;
           tim[nf] = 1;
           nf++;
    }
}

int main()
{
    ios::sync_with_stdio(false);
    memset( arr, 0, sizeof(arr));
    np = 0; /// number of prime initially 0

    sieve(1000001); /// range of sieve

    LL n, x, i, j, a, b, c, y, z, ans = maxx, d, k;

    cin >> n;

    for( i=1; i<400 && i<n; i++ )
    {
        c = d = 1;
        a = i;
        b = n-i;

        if( a <= 1 || b <= 1 ) continue;
        //cout << a << ' ' << b << endl;
        nf = 0;
        prime_fac( a );

        for( j=0; j<nf; j++ )
        {
            for( k=0; k<tim[j]; k++ )
            {
                c *= pfac[j];
            }

        }

        c /= pfac[0];

        nf = 0;
        prime_fac( b );

        for( j=0; j<nf; j++ )
        {
            for( k=0; k<tim[j]; k++ )
            {
                d *= pfac[j];
            }

        }

        d /= pfac[0];

        //cout << c << ' ' << d << endl << endl;
        ans = min( ans, c+d );


    }

    if( n%2 == 0 )
    {
      ans = 2;
    }

    nf = 0;
    prime_fac( n );

    if( nf == 1 && tim[0] == 1 ) ans = 1;



    cout << min( (LL)3, ans ) << endl;


}
