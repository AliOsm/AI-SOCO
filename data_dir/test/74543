#include <bits/stdc++.h>
using namespace std;
 
#ifdef SG
	#include <debug.h>
#else
	#define show(...)
	#define debug(...)
	#define deepen(...)
	#define timer(...)
#endif
 
#define ARG4(_1,_2,_3,_4,...) _4
 
#define forn3(i,l,r) for (int i = int(l); i < int(r); ++i)
#define forn2(i,n) forn3 (i, 0, n)
#define forn(...) ARG4(__VA_ARGS__, forn3, forn2) (__VA_ARGS__)
 
#define ford3(i,l,r) for (int i = int(r) - 1; i >= int(l); --i)
#define ford2(i,n) ford3 (i, 0, n)
#define ford(...) ARG4(__VA_ARGS__, ford3, ford2) (__VA_ARGS__)
 
#define forv(i,v) for (auto i = v.begin(); i != v.end(); ++i)
#define forr(i,v) for (auto i = v.end(); i != v.begin() && (--i, 1); )
#define ve vector
#define pa pair
#define tu tuple
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) ((int)(a).size())
 
typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef unsigned char uc;
typedef pa<int, int> pii;
typedef pa<int, ll> pil;
typedef pa<ll, int> pli;
typedef pa<ll, ll> pll;
typedef ve<int> vi;
 
const ld pi = 3.1415926535897932384626433832795l;
 
template<typename T> inline auto sqr (T x) -> decltype(x * x) {return x * x;}
template<typename T> inline T abs (T x) {return x > T() ? x : -x;}
template<typename T1, typename T2> inline bool umx (T1& a, T2 b) {if (a < b) {a = b; return 1;} return 0;}
template<typename T1, typename T2> inline bool umn (T1& a, T2 b) {if (b < a) {a = b; return 1;} return 0;}
 
const int N = 1010;

char c[N][N];

const int dx[4] = {-1, 1, 0, 0};
const int dy[4] = {0, 0, -1, 1};

bool use[N][N];
int n, m;

void dfs(int x, int y) {
	use[x][y] = 1;
	forn(i, 4) {
	 	int nx = x + dx[i], ny = y + dy[i];
	 	if (nx < 0 || ny < 0 || nx >= n || ny >= m || c[nx][ny] == '.') {
	 		continue;
	 	}
	 	if (!use[nx][ny]) {
	 		dfs(nx, ny);
	 	}
	}
}

bool bad[N][N];

int main () {
	//std::ios::sync_with_stdio(false);
    //std::cin.tie(nullptr);
	cout.setf(ios::showpoint | ios::fixed);
	cout.precision(20);
#ifdef SG
	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
#endif
	cin >> n >> m;
	string qwe;
	getline(cin, qwe);
	forn(i, n) {
		gets(c[i]);
	}
	bool ok = 1;
	forn(i, n) {
		int minpos = -1, maxpos = -1;
		forn(j, m) {
			if (c[i][j] == '#') {
				if (minpos == -1) {
					minpos = j;
				}
				maxpos = j;
			}
		}
		if (minpos == -1) {
			continue;
		}
		forn(j, m) {
			if (c[i][j] == '.' && j >= minpos && j <= maxpos) {
				ok = 0;
			}
		}
	}
	forn(i, m) {
		int minpos = -1, maxpos = -1;
		forn(j, n) {
			if (c[j][i] == '#') {
				if (minpos == -1) {
					minpos = j;
				}
				maxpos = j;
			}
		}
		forn(j, n) {
			if (c[j][i] == '.' && j >= minpos && j <= maxpos) {
				ok = 0;
			}
		}
	}
	forn(i, n) {
		bool is_black = 0;
		forn(j, m) {
			if (c[i][j] == '#') {
				is_black = 1;
			}
		}
		if (is_black) {
			forn(j, m) {
				if (c[i][j] == '.') {
					bad[i][j] = true;
				}
			}
		}
	}
	forn(i, m) {
		bool is_black = 0;
		forn(j, n) {
			if (c[j][i] == '#') {
				is_black = 1;
			}
		}
		if (is_black) {
			forn(j, n) {
				if (c[j][i] == '.') {
					bad[j][i] = true;
				}
			}
		}
	}
	forn(i, n) {
		bool have_good = 0;
		forn(j, m) {
			if (!bad[i][j]) {
				have_good = 1;
			}
		}
		if (!have_good) {
			ok = 0;
		}
	}
	forn(i, m) {
		bool have_good = 0;
		forn(j, n) {
			if (!bad[j][i]) {
				have_good = 1;
			}
		}
		if (!have_good) {
			ok = 0;
		}
	}


	if (!ok) {
		cout << -1 << endl;
		return 0;
	}
	int cnt = 0;
	forn(i, n) {
		forn(j, m) {
			if (!use[i][j] && c[i][j] == '#') {
				dfs(i, j);
				++cnt;
			}
		}
	}
	cout << cnt << endl;

	return 0;
}