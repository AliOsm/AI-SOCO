#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>
#include <memory.h>
#include <list>
#include <numeric>
#include <functional>

#define ll long long
#define ld long double
#define ull unsigned ll
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pii pair<int,int> 
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vector<int>>
#define endl '\n'
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
const int  Inf = 2e9;
ll LINF = (ll)4e18;
using namespace std;
ll mod = 1e9 + 7;
#define M_PI       3.14159265358979323846   // pi

ll dist[100005];
int used[100005];
int last[100005];

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("horse.in", "r", stdin);
	//freopen("horse.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n, m;
	cin >> n >> m;
	vector<vector<pair<int, ll>>>g(n);
	for (int i = 0; i < m; i++) {
		int a, b, w;
		cin >> a >> b >> w;
		a--, b--;
		g[a].push_back({ b, w });
		g[b].push_back({ a, w });
	}
	for (int i = 0; i < n; i++) dist[i] = 4e18;
	dist[0] = 0;
	priority_queue<pair<ll, int>, vector<pair<ll,int>>, greater<pair<ll,int>>>q;
	q.push({ 0, 0 });
	while (!q.empty()) {
		auto v = q.top();
		q.pop();
		used[v.second] = 1;
		for (auto to : g[v.second]) {
			if (used[to.first]) continue;
			if (v.first + to.second < dist[to.first]) {
				q.push({ v.first + to.second, to.first });
				dist[to.first] = v.first + to.second;
				last[to.first] = v.second;
			}
		}
	}
	if (dist[n - 1] >= 1e18) {
		cout << -1;
		return 0;
	}
	int v = n - 1;
	vector<int>ans;
	do {
		ans.push_back(v);
		v = last[v];
	} while (v != 0);
	ans.push_back(0);
	reverse(ans.begin(), ans.end());
	for (auto x : ans) cout << x + 1<< ' ';
	return	0;
}