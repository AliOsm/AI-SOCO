#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

int main() {
	srand (time(NULL));
    ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(int, n);
	vector<pair<int, int>> cards;
	FOR (i, 0, n) {
		next(string, s);
		int n2 = s[1] - '1';
		int n1;
		if (s[0] == 'R') n1 = 0;
		else if (s[0] == 'G') n1 = 1;
		else if (s[0] == 'W') n1 = 2;
		else if (s[0] == 'B') n1 = 3;
		else n1 = 4;
		cards.push_back(make_pair(n1, n2));
	}
	
	auto ans = IntMaxVal;
	int maxMask = 1 << 5;
	
	FOR (m1, 0, maxMask) FOR (m2, 0, maxMask) {
		bool isOk = true;
		FOR (i1, 0, n) FOR (i2, i1 + 1, n) if (cards[i1] != cards[i2]) {
			bool canCheck = false;
			canCheck = canCheck || (cards[i1].first != cards[i2].first && (m1 & ((1 << cards[i1].first) | (1 << cards[i2].first))));
			canCheck = canCheck || (cards[i1].second != cards[i2].second && (m2 & ((1 << cards[i1].second) | (1 << cards[i2].second))));
			if (!canCheck) isOk = false;
		}
		if (!isOk) continue;
		int cur = 0;
		FOR (b, 0, 5) if (m1 & (1 << b)) cur++;
		FOR (b, 0, 5) if (m2 & (1 << b)) cur++;
		minimize(ans, cur);
	}
	
	cout << ans;
}