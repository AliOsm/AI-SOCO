#include<iostream>
#include<vector>
#include<algorithm>
#include<map>
#include<iterator>
#include<stack>
#include<string>
#include<climits>
#include<bitset>
#include<queue>
#include<cmath>
#include<cstdlib>
#include<cstdio>
#include<sstream>
#include<iomanip>
#include<cstring>
#include<list>
#include<set>

#define ssync ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)

using namespace std;

typedef long long int ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;
typedef vector<vs> vvs;
typedef vector<ll> vll;
typedef vector<vll> vvl;
typedef pair<int,int> pii;
typedef pair<ll,int> pli;
const ll MOD = 1000000007;
const long double PI = 3.14159265;

string toBin(long long int a)
{
	return bitset<64>(a).to_string();
}

string intToString (ll a)
{
	ostringstream temp;
	temp<<a;
	return temp.str();
}

ll powerWithMod(ll base, ll exponent, ll modulus)
{
	ll result = 1;
	base %= modulus;
	while(exponent > 0)
	{
		if(exponent % 2 == 1)
			result = (result * base) % modulus;
		exponent >>= 1;
		base = (base * base) % modulus;
	}
	return result;
}

ll gcdExtended(ll a, ll b, ll *x, ll *y)
{
	if (a == 0)
	{
		*x = 0, *y = 1;
		return b;
	}
	ll x1, y1;
	ll gcd = gcdExtended(b%a, a, &x1, &y1);
	*x = y1 - (b/a) * x1;
	*y = x1;
	return gcd;
}

ll modInverse(ll a, ll m)
{
	ll x, y;
	ll g = gcdExtended(a, m, &x, &y);
	ll res = (x%m + m) % m;
	return res;
}

ll i,j,n,m,k,x,y,a[100001],l[100001],r[100001],d[100001],cnt[100001];

int main()
{
	ssync;
	cin >> n >> m >> k;
	for(i=1;i<=n;i++)
	{
		cin >> x;
		a[i]+=x;
		a[i+1]-=x;
	}
	for(i=1;i<=m;i++)
		cin>>l[i]>>r[i]>>d[i];
	for(i=1;i<=k;i++)
	{
		cin>>x>>y;
		cnt[x]++;
		cnt[y+1]--;
	}
	for(i=1;i<=m;i++)
	{
		cnt[i+1]+=cnt[i];
		a[l[i]]+=d[i]*cnt[i];
		a[r[i]+1]-=d[i]*cnt[i];
	}
	for (i=1;i<=n;i++)
	{
		cout << a[i] << " ";
		a[i+1]+=a[i];
	}
	cout << "\n";
	return 0;
}
