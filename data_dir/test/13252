//Smaug never desolated!!
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
const int MAXN = (int)1503;
const int MAXM = (int)1e5 + 7;
const int infint = (int)1e8 + 3;
const int MOD = (int)1e9 + 7;
const ll inf = (ll)1e18;
ll n, m, a, b, p, fact[MAXM], facrev[MAXM], P[MAXN], partP[MAXN], dpl[MAXN][MAXN], dpr[MAXN][MAXN], partr[MAXN][MAXN], partl[MAXN][MAXN], k, save[MAXN];
ll add(ll a, ll b)
{
	ll c = (a + b);
	if(c < 0)
		c += MOD;
	if(c >= MOD)
		c -= MOD;
	return c;
}
ll mul(ll a, ll b)
{
	ll c = 1LL * a * b % MOD;
	return c;
}
ll pwr(ll a, ll b)
{
	if(b < 0)
		return 0;
	if(b == 0)
		return 1;
	if(b == 1)
		return a % MOD;
	ll c = pwr(a, b / 2);
	c = mul(c, c);
	if(b % 2)
		c = mul(c, a);
	return c;
}
ll inv(ll p)
{
	return pwr(p, MOD - 2);
}
ll C(ll n, ll k)
{
	if(k > n)
		return 0;
	ll m = fact[n];
	m = mul(m, facrev[k]);
	m = mul(m, facrev[n - k]);
	return m;
}
ll def(ll n, ll j)
{
	ll Dragon = add(partr[n][m], -partr[n][j - 1]);
	Dragon = add(Dragon, -partl[n][j + 1]);
	return Dragon;
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	cin >> n >> m >> a >> b >> k;
	p = mul(a, inv(b));
	fact[0] = 1;
	for (int i = 1; i < MAXM; i++)
		fact[i] = mul(fact[i - 1], i);
	facrev[MAXN - 1] = inv(fact[MAXN - 1]);
	for (int i = MAXM - 1; i >= 0; i--)
		facrev[i] = inv(fact[i]);
	for (int i = 0; i <= m; i++)
		P[i] = mul(mul(C(k, i), pwr(p, i)), pwr(add(1, -p), k - i));
	partP[0] = P[0];
	for (int i = 1; i <= m; i++)
		partP[i] = add(partP[i - 1], P[i]);
	//base of DP
	for (int i = 1; i <= m; i++)
		for (int j = i; j <= m; j++)
		{
			dpr[1][j] = add(dpr[1][j], mul(P[i - 1], P[m - j]));
			dpl[1][i] = add(dpl[1][i], mul(P[i - 1], P[m - j]));
		}
	for (int i = 1; i <= m; i++)
		partr[1][i] = add(dpr[1][i], partr[1][i - 1]);
	for (int i = m; i >= 1; i--)
		partl[1][i] = add(dpl[1][i], partl[1][i + 1]);
	//Steps of DP
	for (int i = 2; i <= n; i++)
	{
		//first dpr
		dpr[i][1] = mul(mul(P[0], P[m - 1]), dpl[i - 1][1]);
		save[1] = mul(P[0], dpl[i - 1][1]);
		for (int j = 2; j <= m; j++)
		{
			ll Dragon = save[j - 1];
			Dragon = add(Dragon, mul(partP[j - 2], dpl[i - 1][j]));
			Dragon = add(Dragon, mul(P[j - 1], def(i - 1, j)));
			dpr[i][j] = mul(P[m - j], Dragon);
			save[j] = Dragon;
		}
		//second dpl
		dpl[i][m] = mul(mul(P[0], P[m - 1]), dpr[i - 1][m]);
		save[m] = mul(P[0], dpr[i - 1][m]);
		for (int j = m - 1; j >= 1; j--)
		{
			ll Dragon = save[j + 1];
			Dragon = add(Dragon, mul(partP[m - j - 1], dpr[i - 1][j]));
			Dragon = add(Dragon, mul(def(i - 1, j), P[m - j]));
			dpl[i][j] = mul(P[j - 1], Dragon);
			save[j] = Dragon;
		}
		//third partial ha
		for (int j = 1; j <= m; j++)
			partr[i][j] = add(partr[i][j - 1], dpr[i][j]);
		for (int j = m; j >= 1; j--)
			partl[i][j] = add(partl[i][j + 1], dpl[i][j]);
	}
	cout << partr[n][m]; //=partl[n][1]
}
