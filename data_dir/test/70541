#include <iostream>
#include <cstdio>
#include <map>
#include <cstring>
#include <string>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <queue>
#include <set>

using namespace std;

short dp[2][1002][52];
short ndp[2][1002][52];
short q1[1003];
short q2[1003];
short q0[1003];

int main() {
    ios_base::sync_with_stdio(false);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
    int n, p, k, sk;
	cin >> n >> p >> k;
    cin >> sk;
    for (int i = 0; i < sk; i++) {
        int x;
        cin >> x;
        q0[x] = 1;
    }
    cin >> sk;
    for (int i = 0; i < sk; i++) {
        int x;
        cin >> x;
        q1[x] = 1;
    }

    for (int i = 1; i <= n; i++) {
        q2[i] = q0[i] & q1[i];

        q0[i] += q0[i - 1];
        q1[i] += q1[i - 1];
        q2[i] += q2[i - 1];
    }

    for (int who = 0; who < 2; who++) {
        for (int i = 0; i <= n; i++) {
            for (int diff = 0; diff <= k; diff++) {
                ndp[who][i][diff] = 0;
            }
        }
    }
    short ans = 0;
    for (int sp = 1; sp <= p; sp++) {
        for (int who = 0; who < 2; who++) {
            for (int i = 0; i <= n; i++) {
                for (int diff = 0; diff <= k; diff++) {
                    dp[who][i][diff] = -10000;
                }
            }
        }
        short Mmax = 0;
        for (int i = 1; i <= n; i++) {
            for (int diff = 0; diff <= k; diff++) {
                int pi = i - k;
                int pj = i - diff;
                if (pi < 0) {
                    pi = 0;
                }
                if (pj < 0) {
                    pj = 0;
                }                
                dp[0][i][diff] = ndp[1][pj][pj - pi] + q0[i] - q0[pi] - (q2[pj] - q2[pi]);
                if (k == diff) {
                    if (i >= k) {
                        if (ndp[0][pj][0] > Mmax) {
                            Mmax = ndp[0][pj][0];
                        }
                        if (ndp[1][pj][0] > Mmax) {
                            Mmax = ndp[1][pj][0];
                        }
                        if (dp[0][i][diff] < Mmax + q0[i] - q0[pi]) {
                            dp[0][i][diff] = Mmax + q0[i] - q0[pi];
                        }                                      
                    }   
                }
                ans = max(ans, dp[0][i][diff]);                
            }
            for (int diff = k - 1; diff >= 0; diff--) {
                dp[0][i][diff] = max(dp[0][i][diff], dp[0][i][diff + 1]);
            }
        }

        Mmax = 0;
        for (int i = 1; i <= n; i++) {
            for (int diff = 0; diff <= k; diff++) {
                int pi = i - k;
                int pj = i - diff;
                if (pi < 0) {
                    pi = 0;
                }
                if (pj < 0) {
                    pj = 0;
                }
                dp[1][i][diff] = ndp[0][pj][pj - pi] + q1[i] - q1[pi] - (q2[pj] - q2[pi]);
                if (k == diff) {
                    if (i >= k) {
                        if (ndp[0][pj][0] > Mmax) {
                            Mmax = ndp[0][pj][0];
                        }
                        if (ndp[1][pj][0] > Mmax) {
                            Mmax = ndp[1][pj][0];
                        }
                        if (dp[1][i][diff] < Mmax + q1[i] - q1[pi]) {
                            dp[1][i][diff] = Mmax + q1[i] - q1[pi];
                        }                                                
                    }   
                }
                ans = max(ans, dp[1][i][diff]);                
            }
            for (int diff = k - 1; diff >= 0; diff--) {
                dp[1][i][diff] = max(dp[1][i][diff], dp[1][i][diff + 1]);
            }
        }

        for (int who = 0; who < 2; who++) {
            for (int i = 0; i <= n; i++) {
                for (int diff = 0; diff <= k; diff++) {
                    ndp[who][i][diff] = dp[who][i][diff];
                }
            }
        }
    }
    cout << ans << endl;
	return 0;
}