// Separate what you do from who you are, that's what the guilt trap is all about!
#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef long long int ll;
typedef vector< pair<int, int> > vii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<long long int> vll;
typedef pair<int, int> pii;

const ll INF = 1e18;
const int inf = 1e9;
const int MOD = 1e9 + 7;
const int nax = 1000 + 10;

int n, dist[nax][nax], m, k, visited[nax][nax];
char arr[nax][nax];
int x1, y1, x2, y2;
int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};

bool isvalid(int xx, int yy)
{
    if(xx <= 0 || yy <= 0 || xx > n || yy > m) return false;
    if(arr[xx][yy] == '#') return false;
    return true;
}
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> m >> k;
    for(int i = 1; i <= n; i++)
    {
        for(int j = 1; j <= m; j++)
            cin >> arr[i][j];
    }
    cin >> x1 >> y1 >> x2 >> y2;
    if(x1 == x2 && y1 == y2)
    {
        cout << 0;
        return 0;
    }
    queue<int> q;
    q.push(x1);
    q.push(y1);
    visited[x1][y1] = 1;
    dist[x1][y1] = 0;
    while(!q.empty())
    {
        int xx = q.front(); q.pop();
        int yy = q.front(); q.pop();

        for(int i = 0; i < 4; i++)
        {
            for(int j = 1; j <= k; j++)
            {
                int x = xx + dx[i] * j;
                int y = yy + dy[i] * j;
                if(isvalid(x, y) == false) break;
                if(visited[x][y] == 1)
                {
                    if(dist[x][y] <= dist[xx][yy]) break;
                    else continue;
                }
                dist[x][y] = 1 + dist[xx][yy];
                    q.push(x);
                    q.push(y);
                visited[x][y] = 1;
            }
        }
    }
    if(dist[x2][y2] == 0)
        dist[x2][y2] = -1;
    cout << dist[x2][y2];
    return 0;
}
