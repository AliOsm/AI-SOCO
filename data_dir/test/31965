#define __USE_MINGW_ANSI_STDIO 0
#include <bits/stdc++.h>
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl '\n'
#define ff first
#define ss second
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define int long long
#define all(a) a.begin(), a.end()
#define inf (1LL<<61)
#define ull unsigned long long
#define debug1(x) cerr << #x << ": " << x <<'\n'
#define debug2(x, y) cerr << #x << ": " << x << '\t' << #y << ": " << y <<'\n'
#define debug3(x, y, z) cerr << #x << ": " << x << '\t' << #y << ": " << y << '\t' << #z << ": " << z <<'\n'
using namespace std;
int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
int gcd(int x,int y)
{
    if(y==0)
        return x;
    else
        return gcd(y,x%y);
}
int expo(int n,int m,int p)   //modULAR EXPONENTIATION
{
    int r=1;
    n=n%p;
    while(m>0)
    {
        if(m%2)
            r=(r*n)%p;
        n=(n*n)%p;
        m=m/2;
    }
    return r%p;
}
bool isPrime(int n)
{
    // Corner cases
    if (n <= 1)  return false;
    if (n <= 3)  return true;
 
    // This is checked so that we can skip 
    // middle five numbers in below loop
    if (n%2 == 0 || n%3 == 0) return false;
 
    for (int i=5; i*i<=n; i=i+6)
        if (n%i == 0 || n%(i+2) == 0)
           return false;
 
    return true;
}
const int N=2000000;
int bit1[N]={0},bit2[N]={0};
int a[N],b[N],n;
void upd1(int node,int s,int e,int l,int r,int x)
{
	if(e<l||s>r)
		return;
	if(l<=s&&r>=e)
	{
		bit1[node]+=x;
		return ;
	}
	int mid=(s+e)/2;
	upd1(2*node,s,mid,l,r,x);
	upd1(2*node+1,mid+1,e,l,r,x);
}
void upd2(int node,int s,int e,int l,int r,int x)
{
	if(e<l||s>r)
		return;
	if(l<=s&&r>=e)
	{
		bit2[node]+=x;
		return ;
	}
	int mid=(s+e)/2;
	upd2(2*node,s,mid,l,r,x);
	upd2(2*node+1,mid+1,e,l,r,x);
}
int query1(int node,int s,int e,int l,int r)
{
	if(e<l||s>r)
		return 0;
	if(l<=s&&r>=e)
	{
		return bit1[node];
	}
	int mid=(s+e)/2;
	return query1(2*node,s,mid,l,r)+query1(2*node+1,mid+1,e,l,r);
}
int query2(int node,int s,int e,int l,int r)
{
	if(e<l||s>r)
		return 0;
	if(l<=s&&r>=e)
	{
		return bit2[node];
	}
	int mid=(s+e)/2;
	return query2(2*node,s,mid,l,r)+query2(2*node+1,mid+1,e,l,r);
}
int32_t main()
{
   IOS;
   #ifndef ONLINE_JUDGE
   freopen("input.txt","r",stdin); 
   freopen("output.txt","w",stdout);
   #endif
   /********************* Code starts here ***********************/
   map<int,int>p;
   cin>>n;
   vector<int>c;
   int d=1;
   for(int i=0;i<n;i++)
   {
   	cin>>a[i];
   	c.pb(a[i]);
   }
   for(int i=0;i<n;i++)
   {
   	cin>>b[i];
   	c.pb(b[i]);
   }
   multiset<int>q;
   int co=0;
   for(int i=0;i<n;i++)
   {
   	//debug1(co);
   	q.insert(a[i]+co);
   	int ans=0;
   	
   	auto it=q.begin();
   	
   	while(q.size()&&(*q.begin()-co)<=b[i])
   	{
   		//debug2(*it,q.size());
   		ans=ans+abs(*q.begin()-co);
   		q.erase(q.begin());

   	}
   
   //debug1(co);
   	co=co+b[i];
   	ans=ans+b[i]*(q.size());
   	cout<<ans<<endl;
   }
} 
	