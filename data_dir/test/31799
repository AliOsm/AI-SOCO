#include <bits/stdc++.h>
using namespace std;

#define si(n) scanf("%d",&n)
#define ll long long
#define MAX 100005  //=================> careful here

// *************Manual by isti **********
// this is a O(nlogn) implementation by tonmoy : https://github.com/tanmoymollik/algos/blob/master/suffix_array.cpp
// Declare suffixArray object globally otherwise will get program crush due to memory stack size
//sorted suffix can be found in pos[] array
// lcp[i] array contains lcp of i th and (i-1) th suffix
//****************************************


int Count[MAX], output[MAX];
struct suffixArray {
   #define MAX_lg 18 //=============> careful here
   #define minchar 'a' //=================> careful here
   #define Index(a) (((a) < len) ? index[mlgn][a] : -1)
   int pos[MAX], index[MAX_lg][MAX], lcp[MAX], len, mlgn;

   suffixArray() {}
   suffixArray(const char *S) { create(S); }
   void CountSort(int add) {
      int to = max(len, 27);                        //careful here
      memset(Count, 0, sizeof(Count));
      for(int i = 0; i < len; i++) ++Count[ Index(pos[i] + add) + 1 ];
      for(int i = 1; i <= to; i++) Count[i] += Count[i-1];
      for(int i = len-1; i >= 0; i--) output[ --Count[ Index(pos[i] + add) + 1 ] ] = pos[i];
      for(int i = 0; i < len; i++) pos[i] = output[i];
   }
   int Lcp(int x, int y) { //=============> starting position of two arbitrary suffix
      int ret = 0;
      for(int i = mlgn; i >= 0 && x < len && y < len; i--) if(index[i][x] == index[i][y])
         x += (1 << i),
         y += (1 << i),
         ret += (1 << i);
      return ret;
   }
   void create(const char *S) {
      len = strlen(S), mlgn = 0;
      for(int i = 0; i < len; i++) index[0][i] = S[i] - minchar;
      for(int done = 1; done < len; done <<= 1) {
         for(int i = 0; i < len; i++) pos[i] = i;
         CountSort(done);
         CountSort(0);
         for(int i = 0; i < len; i++) {
            int sc1 = (i > 0) ? Index(pos[i-1] + done) : -1;
            int sc2 = Index(pos[i] + done);
            index[mlgn+1][pos[i]] = (i > 0 && index[mlgn][pos[i]] == index[mlgn][pos[i-1]] && sc1 == sc2) ? index[mlgn+1][pos[i-1]] : i;
         }
         mlgn++;
      }
      lcp[0] = 0;
      for(int i = 1; i < len; i++) lcp[i] = Lcp(pos[i], pos[i-1]);
   }
};

suffixArray node;
char str[MAX],b[MAX];

int main()
{
    //freopen("input.txt","r",stdin);

    int i,j,t,l,r,m;

    scanf("%s",str);
    m=strlen(str);
    str[m]=('z'+1);
    scanf("%s",b);
    strcat(str,b);

    int ans=0,n=strlen(str);
    //cout<<n<<endl;

    node.create(str);

    ans=1e7;
    //printf("%s\n",str+node.pos[0]);
    for(i=1;i<n;i++){
       // printf("%s\n",str+node.pos[i]);
        if(node.pos[i]<m && node.pos[i-1]<m)continue;
        if(node.pos[i]>=m && node.pos[i-1]>=m)continue;
        int z=node.lcp[i];

        if(node.pos[i]<m)z=min(z,m-node.pos[i]);
        else z=min(z,n-node.pos[i]);

        if(node.pos[i-1]<m)z=min(z,m-node.pos[i-1]);
        else {
            z=min(z,n-node.pos[i-1]);

        }

        //cout<<z<<' '<<node.pos[i-1]<<endl;

        int x=0,y=0;
        if(i-1>0){
            x=node.lcp[i-1];

            if(node.pos[i-1]<m)x=min(x,m-node.pos[i-1]);
            else x=min(x,n-node.pos[i-1]);

            if(node.pos[i-2]<m)x=min(x,m-node.pos[i-2]);
            else x=min(x,n-node.pos[i-2]);
        }
        if(i+1<n){
            y=node.lcp[i+1];

            if(node.pos[i]<m)y=min(y,m-node.pos[i]);
            else y=min(y,n-node.pos[i]);
            //if(i==1)cout<<node.pos[i]<<' '<<"==> "<<y<<endl;
            //return 0;

            if(node.pos[i+1]<m)y=min(y,m-node.pos[i+1]);
            else y=min(y,n-node.pos[i+1]);
        }
        //cout<<x<<' '<<y<<' '<<z<<endl;

        if(max(x,y)<z){
            //cout<<"--> "<<i<<' '<<x<<' '<<y<<' '<<z<<endl;
            ans=min(ans,max(x,y)+1);
        }
    }

//    int cnt1=0,cnt2=0;
//    for(i=m-1;i>=0;i--){
//        if(str[i]==str[m-1])cnt1++;
//    }
//    for(i=m;i<n;i++){
//        if(str[i]==str[m-1])cnt2++;
//    }
//    if(cnt1==cnt2)ans=min(ans,cnt1);

    if(ans==1e7)printf("-1\n");
    else printf("%d\n",ans);

}
