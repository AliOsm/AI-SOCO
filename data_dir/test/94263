#include<bits/stdc++.h>
#define ll long long
using namespace std;
int n,m;
inline int pos(int x,int y){return (x-1)*m+y;}
int a[100004],a2[100004];
ll scol[100004],srow[100004];
priority_queue<ll,vector<ll>,greater<ll> >q;
ll getcol(){
    while(!q.empty())q.pop();
    for(int i=1;i<=m;i++){
        ll now=0;
        if(q.size()<4){
            q.push(scol[i]);
        }
        else if(q.top()<scol[i]){
            q.pop();
            q.push(scol[i]);
        }
    }
    ll ret=0;
    while(!q.empty()){
        ret+=q.top();q.pop();
    }
    return ret;
}
ll getrow(){
    while(!q.empty())q.pop();
    for(int i=1;i<=n;i++){
        ll now=0;
        if(q.size()<4){
            q.push(srow[i]);
        }
        else if(q.top()<srow[i]){
            q.pop();
            q.push(srow[i]);
        }
    }
    ll ret=0;
    while(!q.empty()){
        ret+=q.top();q.pop();
    }
    return ret;
}
ll sekcol(){

    ll ret=0;
    for(int i=1;i<=m;i++){
        ll now=scol[i];
        while(!q.empty())q.pop();
        for(int j=1;j<=n;j++){
            if(q.size()<3){
                q.push(srow[j]-a[pos(j,i)]);
            }
            else if(q.top()<srow[j]-a[pos(j,i)]){
                q.pop();
                q.push(srow[j]-a[pos(j,i)]);
            }
        }
        while(!q.empty()){
            now+=q.top();q.pop();
        }
        ret=max(now,ret);
    }
    return ret;
}
ll sekrow(){

    ll ret=0;
    for(int i=1;i<=n;i++){
        ll now=srow[i];
        while(!q.empty())q.pop();
        for(int j=1;j<=n;j++){
            if(q.size()<3){
                q.push(scol[j]-a[pos(i,j)]);
            }
            else if(q.top()<scol[j]-a[pos(i,j)]){
                q.pop();
                q.push(scol[j]-a[pos(i,j)]);
            }
        }
        while(!q.empty()){
            now+=q.top();q.pop();
        }
        ret=max(now,ret);
    }
    return ret;
}
ll work(){
    ll ret=0;
    for(int i=1;i<=n;i++){
        for(int j=i+1;j<=n;j++){
            ll now=srow[i]+srow[j];
            while(!q.empty())q.pop();
            for(int k=1;k<=m;k++){
                if(q.size()<2){
                    q.push(scol[k]-a[pos(i,k)]-a[pos(j,k)]);
                }
                else if(q.top()<scol[k]-a[pos(i,k)]-a[pos(j,k)]){
                    q.pop();
                    q.push(scol[k]-a[pos(i,k)]-a[pos(j,k)]);
                }
            }
            while(!q.empty()){
                now+=q.top();q.pop();
            }
            ret=max(now,ret);
        }
    }
    return ret;
}
int main(){
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;i++)
        for(int j=1;j<=m;j++)
            scanf("%d",&a2[pos(i,j)]);
    if(n>m){
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                a[(j-1)*n+i]=a2[pos(i,j)];
            }
        }
        swap(n,m);
    }
    else{
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                a[pos(i,j)]=a2[pos(i,j)];
            }
        }
    }
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            int v=a[pos(i,j)];
            srow[i]+=v;
            scol[j]+=v;
        }
    }
    ll ans=0;
    ans=max(ans,getcol());
    ans=max(ans,getrow());
    ans=max(ans,sekcol());
    ans=max(ans,sekrow());
    ans=max(ans,work());
    printf("%lld\n",ans);
    return 0;
}
