#include <bits/stdc++.h>

using namespace std;

int n, m;
deque < char > s[300][300];
deque < char > t[300][300];

struct query{
    int x1, y1, x2, y2;
};
vector < query > an;

void move(int x1, int y1, int x2, int y2){
    an.push_back({x1, y1, x2, y2});
    s[x2][y2].push_front(s[x1][y1].back());
    s[x1][y1].pop_back();
}

void output(){
    for(int i = 0; i < n; i++){
    for(int j = 0; j < m; j++){
        cout << "\'";
        for(auto u : s[i][j]) cout << u;
        cout << "\'" << ' ';
    }
    cout << endl;
    }
}

int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin >> n >> m;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            string tmp;
            cin >> tmp;
            for(auto u : tmp){
                s[i][j].push_back(u);
            }
        }
    }
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            string tmp;
            cin >> tmp;
            for(auto u : tmp){
                t[i][j].push_back(u);
            }
        }
    }
    while(!s[0][0].empty()){
        if(s[0][0].back() == '1'){
            move(0, 0, 1, 0);
        }
        else{
            move(0, 0, 0, 1);
        }
    }
    while(!s[1][1].empty()){
        if(s[1][1].back() == '0'){
            move(1, 1, 0, 1);
        }
        else{
            move(1, 1, 1, 0);
        }
    }
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            if(i == j && (i == 0 || i == 1)) continue;
            while(!s[i][j].empty()){
                bool ok = true;
                if(s[i][j].back() == '1'){
                    if(i != 1) move(i, j, 1, j), ok = false;
                }
                else{
                    if(i != 0) move(i, j, 0, j), ok = false;
                }
                if(ok) break;
            }
        }
    }
    for(int j = 1; j < m; j++){
        while(!s[0][j].empty()){
            if(s[0][j].back() == '0'){
                move(0, j, 0, 0);
            }
            else{
                move(0, j, 1, j);
            }
        }
    }
    for(int j = 0; j < m; j++){
        if(j == 1) continue;
        while(!s[1][j].empty()){
            if(s[1][j].back() == '1'){
                move(1, j, 1, 1);
            }
            else{
                move(1, j, 0, j);
                if(j != 0) move(0, j, 0, 0);
            }
        }
    }
//    cout << an.size() << endl;
//    output();
    int hi = t[0][0].size() - 1;
    while(hi >= 0){
        if(t[0][0][hi] == '0'){
            move(0, 0, 0, 1);
            move(0, 1, 0, 0);
        }
        else{
            move(1, 1, 1, 0);
            move(1, 0, 0, 0);
        }
        hi--;
    }
    hi = t[1][1].size() - 1;
    while(hi >= 0){
        if(t[1][1][hi] == '1'){
            move(1, 1, 1, 0);
            move(1, 0, 1, 1);
        }
        else{
            move(0, 0, 1, 0);
            move(1, 0, 1, 1);
        }
        hi--;
    }
    for(int i = 2; i < n; i++){
        for(int j = 2; j < m; j++){
            int hi = t[i][j].size() - 1;
            while(hi >= 0){
                if(t[i][j][hi] == '1'){
                    move(1, 1, 1, j);
                    move(1, j, i, j);
                }
                else{
                    move(0, 0, 0, j);
                    move(0, j, i, j);
                }
                hi--;
            }
        }
    }
//    output();
    for(int i = n - 1; i >= 2; i--){
        int hi = t[i][1].size() - 1;
        while(hi >= 0){
            if(t[i][1][hi] == '1'){
                move(1, 1, i, 1);
            }
            else{
                move(0, 0, i, 0);
                move(i, 0, i, 1);
            }
            hi--;
        }
        hi = t[i][0].size() - 1;
        while(hi >= 0){
            if(t[i][0][hi] == '0'){
                move(0, 0, i, 0);
            }
            else{
                move(1, 1, 1, 0);
                move(1, 0, i, 0);
            }
            hi--;
        }
    }
    hi = t[1][0].size() - 1;
    while(hi >= 0){
        if(t[1][0][hi] == '1'){
            move(1, 1, 1, 0);
        }
        else{
            move(0, 0, 1, 0);
        }
        hi--;
    }
    for(int j = m - 1; j >= 2; j--){
        int hi = t[1][j].size() - 1;
        while(hi >= 0){
            if(t[1][j][hi] == '1'){
                move(1, 1, 1, j);
            }
            else{
                move(0, 0, 0, j);
                move(0, j, 1, j);
            }
            hi--;
        }
        hi = t[0][j].size() - 1;
        while(hi >= 0){
            if(t[0][j][hi] == '0'){
                move(0, 0, 0, j);
            }
            else{
                move(1, 1, 0, 1);
                move(0, 1, 0, j);
            }
            hi--;
        }
    }
    hi = t[0][1].size() - 1;
    while(hi >= 0){
        if(t[0][1][hi] == '0'){
            move(0, 0, 0, 1);
        }
        else{
            move(1, 1, 0, 1);
        }
        hi--;
    }
//    output();
    cout << an.size() << '\n';
    for(auto u : an) cout << u.x1 + 1 << ' ' << u.y1 + 1 << ' ' << u.x2 + 1 << ' ' << u.y2 + 1 << '\n';
    return 0;
}
