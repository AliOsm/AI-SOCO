#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <fstream>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <math.h>
#include <cmath>
#include <queue>
using namespace std;

vector<long long> T(2),X(2);
long long ID[305];
long long dp[100001];
long long CoinSets[300][300];
long long n;
vector<long long> Root(long long i)
{
    long long length=0;
    while(ID[i]!=i)
    {
        length+=1;
        i=ID[i];
    }
    T[0]=i;
    T[1]=length;
    return T;
}
bool Cyclic()
{
    long long i,j,cnt;
    for(i=0;i<n;i++)
    {
        j=ID[i];
        if(j==i){continue;}
        cnt=0;
        while(ID[j]!=j)
        {
            j=ID[j];
            cnt+=1;
            if(cnt==n+1){return true;}
        }
    }
    return false;
}
int main()
{
    ios::sync_with_stdio(false);
    
    long long i,j,q,t,a,b,x,y;
    long long A[301];
    cin>>n>>q>>t;
    for(i=0;i<n;i++)
    {
        cin>>A[i];
    }
    for(i=0;i<n;i++)
    {
        ID[i]=i;
    }
    for(i=0;i<q;i++)
    {
        cin>>a>>b;
        a-=1;
        b-=1;
        ID[b]=a;
    }
    if(Cyclic())
    {
        cout<<0;
        return 0;
    }
    for(i=0;i<n;i++)
    {
        X=Root(i);
        x=X[0];
        y=X[1];
        CoinSets[x][y]=A[i];
    }
    for(i=0;i<300;i++)
    {
        for(j=1;j<300;j++)
        {
            CoinSets[i][j]+=CoinSets[i][j-1];
        }
    }
    vector<long long> Coins;
    for(i=0;i<300;i++)
    {
        for(j=0;j<300;j++)
        {
            if(CoinSets[i][j]==0)
            {
                break;
            }
            if(j>0 && CoinSets[i][j]==CoinSets[i][j-1])
            {
                t+=CoinSets[i][j-1];
                break;
            }
            Coins.push_back(CoinSets[i][j]);
            t-=CoinSets[i][j];
        }
    }
    if(t<0)
    {
        cout<<0;
        return 0;
    }
    if(t==0)
    {
        cout<<1;
        return 0;
    }
    sort(Coins.begin(),Coins.end());
    n=Coins.size();
    dp[0]=1;
    for(i=0;i<n;i++)
    {
        for(j=0;j<=t;j++)
        {
            if(j>=Coins[i])
            {
                dp[j]+=dp[j-Coins[i]];
                dp[j]%=1000000007;
            }
        }
    }
    cout<<dp[t];
    return 0;
}