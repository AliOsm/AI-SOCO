#include<bits/stdc++.h>
using namespace std;

const int N = 2e5 + 5;


int n, w, k, a[N], t[N], ans, curtime, curval;

multiset < int > full, part;

inline void Add(int pos){
    curval += a[pos];
    int tt = (t[pos] + 1) / 2;
    if(part.size() < w){
        curtime += tt;
        part.insert(t[pos]);
    }
    else if(*part.begin() < t[pos]){
        curtime += *part.begin() - (*part.begin() + 1) / 2;
        full.insert(*part.begin());
        part.erase(part.begin());
        part.insert(t[pos]);
        curtime += (t[pos] + 1) / 2;
    }
    else{
        full.insert(t[pos]);
        curtime += t[pos];
    }
}

inline void Del(int pos){
    curval -= a[pos];
    if(full.find(t[pos]) != full.end()){
        curtime -= t[pos];
        full.erase(full.find(t[pos]));
    }
    else{
        if(part.find(t[pos]) != part.end()){
            part.erase(part.find(t[pos]));
        }
        int tt = (t[pos] + 1) / 2;
        curtime -= tt;
        /// osvobodilos mesto v part
        if(!full.empty()){
            int y = *full.rbegin();
            tt = (y + 1) / 2;
            curtime -= y - tt;
            part.insert(y);
            full.erase(--full.end());
        }
    }
}
int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    cin >> n >> w >> k;
    for(int i = 1; i <= n; i++){
        cin >> a[i];
    }
    for(int i = 1; i <= n; i++){
        cin >> t[i];
    }
    for(int i = 1, j = 0; i <= n; i++){
        j = max(j, i);
        while(j <= n){
            Add(j);
            if(curtime > k){
                Del(j);
                break;
            }
            j++;
        }
        ans = max(ans, curval);
        Del(i);
    }
    cout << ans;
}
