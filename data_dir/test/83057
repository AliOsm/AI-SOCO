/*input
4
2 2 3 1
1 2
1 3
1 4
*/
#include <bits/stdc++.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define int long long
#define N 1000005
#define bit(x,y) ((x>>y)&1LL)

struct dsu {
	int par[N], sz[N];
	void init() {
		for (int i = 1; i <= N - 5; i++) par[i] = i, sz[i] = 1;
	}
	int size(int u) {
		return sz[find(u)];
	}
	int find(int x) {
		if (par[x] == x) return x;
		return par[x] = find(par[x]);
	}
	void uni(int x, int y) {
		x = find(x); y = find(y);
		if (x != y) {
			sz[y] += sz[x]; sz[x] = 0;
			par[x] = y;
		}
	}
} d;

int n, m;
vector<pair<int, int> > vertex; // pair<val,id>
vector<vector<int> > a(N);
bool on[N];
int ans = 0;

void solve(int sign) {
	d.init(); memset(on, 0, sizeof(on));
	for (auto cur : vertex) {
		int u = cur.se; int val = cur.fi; on[u] = true;
		int sum = 0;
		for (auto v : a[u]) {
			if (!on[v]) continue;
			ans += sign * sum * d.size(v) * val;
			sum += d.size(v);
			d.uni(u, v);
		}
		ans += sign * sum * val;
	}
}

signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	cin >> n;
	for (int i = 1; i <= n; i++) {
		int t; cin >> t;
		vertex.push_back(mp(t, i));
	}
	for (int i = 1; i <= n - 1; i++) {
		int u, v; cin >> u >> v;
		a[u].push_back(v); a[v].push_back(u);
	}
	sort(vertex.begin(), vertex.end());
	solve(1); reverse(vertex.begin(), vertex.end()); solve(-1);
	cout << ans << endl;
}