///** One Last Try ***///
#include<bits/stdc++.h>
using namespace std;
#define mod 1000000007
#define ll long long int
#define inf ( int  )( 1e9 + 10 )
#define mxs (int)( 1e6 + 10 )
//#define md  int mid = ( l + r )>>1;
//int dx[]={+1,-1,+0,+0};///Four Directions
//int dy[]={+0,+0,+1,-1};///Four directions
//int dx [] = {+1,-1,+0,+0,-1,-1,+1,+1};///Eight Directions
//int dy [] = {+0,+0,+1,-1,+1,-1,-1,+1};///Eight Directions
int ans, t, n, m, i, j , k, a, b, c, d, e,f, sz, q,cases , sum , time_ , marker ;
string s , s2 , s3 , s4;
vector < int > graph [ mxs ] ;
map < pair < int , int > , int > bridges;
map < pair < int , int > , int >::iterator it;
bool visited [ mxs ];
int parent [ mxs ] , dis [ mxs ] , lo [ mxs ] , com [ mxs ] , level [ mxs ];
queue < int > qu;
void brainfuck();
void art ( int source );
int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    ios_base::sync_with_stdio(NULL);
    cin.tie(NULL);
    cout.tie(NULL);
    brainfuck();
    return 0;
}
void brainfuck()
{
    cin>>n>>m;
    while( m-- )
    {
        cin>>a>>b;
        graph [ a ].push_back( b );
        graph [ b ].push_back( a );
    }
    art( 1 );
    memset( visited , 0 , sizeof visited );
    for ( i = 1 ; i <= n; i++ )
    {
        if ( !visited [ i ] )
        {
            com [ i ] = ++marker;
            qu.push( i );
            visited [ i ] = 1;
            while( !qu.empty() )
            {
                a = qu.front();
                qu.pop();
                int sz = graph [ a ].size();
                for ( j = 0 ; j < sz; j++ )
                {
                    b = graph [ a ] [ j ];
                    if ( bridges.find( { a , b } ) != bridges.end() || bridges.find( { b , a } ) != bridges.end() )continue;
                    if ( !visited [ b ] )
                    {
                        visited [ b ] = 1;
                        qu.push( b );
                        com [ b ] = marker;
                    }
                }
            }
        }
    }
    for ( i = 0 ; i <= n ;i++ )graph [ i ].clear();
    memset( visited , 0 , sizeof visited );
    n = marker;
    for ( it = bridges.begin(); it != bridges.end(); it++ )
    {
        a = it->first.first;
        b = it->first.second;
        graph [ com [ a ] ].push_back( com [ b ] );
        graph [ com [ b ] ].push_back( com [ a ] );
    }
    qu.push( 1 );
    visited [ 1 ] = 1;
    c = 0;
    d = 1;
    while( !qu.empty() )
    {
        a = qu.front();
        qu.pop();
        int sz = graph [ a ].size();
        for ( i = 0 ; i < sz; i++ )
        {
            b = graph [ a ] [ i ];
            if ( !visited [ b ] )
            {
                qu.push( b );
                visited [ b ] = 1;
                level [ b ] = level [ a ] + 1;
                if ( level [ b ] > c )
                {
                    d = b;
                    c = level [ b ];
                }
            }
        }
    }
    memset( visited , 0 , sizeof visited );
    memset( level , 0 , sizeof level );
    qu.push ( d );
    visited [ d ] = 1;
    c = 0;
    while( !qu.empty() )
    {
        a = qu.front();
        qu.pop();
        int sz = graph [ a ].size();
        for ( i = 0 ; i < sz; i++ )
        {
            b = graph [ a ] [ i ];
            if ( !visited [ b ] )
            {
                qu.push( b );
                visited [ b ] = 1;
                level [ b ] = level [ a ] + 1;
                if ( level [ b ] > c )c = level [ b ];
            }
        }
    }
    cout<<c;
}
void art ( int source )
{
    lo [ source ] = dis [ source ] = ++time_;
    visited [ source ] = 1;
    int sz = graph [ source ].size();
    for ( int ii = 0 ; ii < sz; ii++ )
    {
        int bb = graph [ source ] [ ii ];
        if ( parent [ source ] == bb )continue;
        if ( visited [ bb ] )lo [ source ] = min( lo [ source ] , dis [ bb ] );
        else
        {
            parent [ bb ] = source;
            art( bb );
            lo [ source ] = min( lo [ source ] , lo [ bb ] );
            if ( dis [ source ] < lo [ bb ] )
            {
                ///This is an articulation bridge
                bridges [ { source , bb } ]  = 1;
            }
        }
    }
}
