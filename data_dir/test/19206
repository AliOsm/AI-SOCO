// So when you feel like hope is gone, Look inside you and be strong, And you'll finally see the truth, That a hero lies in you ... 
 
#include<bits/stdc++.h>

#define F first
#define S second
#define PB push_back
#define sz(s) int((s).size())
#define bit(n,k) (((n)>>(k))&1)

using namespace std;

typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;

const int maxn = 1e5 + 10, mod = 1e9 + 7;
const ll inf = 2e18;

template<typename A, typename B> ostream& operator << (ostream& out, pair<A, B> p){
    out << "{ " << p.F << ", " << p.S <<" }";
    return out;
}
template<typename T> ostream& operator << (ostream& out, vector<T> v){
    out << "[ ";
    for(int i = 0; i < sz(v); i++){
	out << v[i];
	if(i != sz(v)-1)
	    out << " ,";
    }
    out << " ]";
    return out;
}

ll dq[maxn];

ll solve(ll n, ll k){
    ll ksm = 1ll * k * (k+1) /2;
    auto fr = [&](ll x){
		  x -= ksm - k;
		  return (x + k - 1) / k;
	      };
    auto fl = [&](ll x){
		  x -= ksm - k;
		  return x / k;
	      };
    vector<pll> vec;
    vec.PB({n, n});
    
    while(vec.back().F >= ksm + k + 1){
	ll R = fr(vec.back().S + k + 1)-1, L = fl(vec.back().F - k - 1) + k;
	if(L > R)
	    L = R;
	vec.PB({L, R});
    }
    
    reverse( vec.begin(), vec.end() );

    int L = 0, R = 0;
    
    ll pt = 0, cnt = 0, ans = 0;
    
    auto go = [&](){// to make ordere better
		  ll sm = 0;
		  int chosen = 0;
		  while(chosen < k){
		      while(L != R && dq[L] <= pt)
			  ++L;		      
		      ll lim = R!=L ? dq[L] : inf;
		      ll choose = min( lim - pt -1 , k - chosen );
		      if(pt+1 <= n && n <= pt + choose){
			  ans+= n - pt;
			  return true;
		      }
		      sm+= 1ll * choose * (pt + 1 + pt + choose) / 2;
		      ans+= choose;
		      chosen += choose;
		      pt+= choose + (chosen < k);
		  }
		  ++ans;
		  dq[R++] = sm;
		  if(sm == n)
		      return true;
		  return false;
	      };
    while(L == R || dq[R-1] <= vec[0].S)
	if(go())
	    return ans;
    int pos = 0;
    while(true){
	while(pos < sz(vec) && vec[pos].S <= pt)
	    pos++;
	if(pos == sz(vec))
	    break;
	if(pt < vec[pos].F){
	    while(L != R && dq[L] <= pt)
		++L;
	    ll bck = -1;
	    ll emp = vec[pos].F - pt -1 -cnt;
	    while(L != R && dq[L] < vec[pos].F)
		bck = dq[L], ++L, --emp;
	    cnt = emp / k;
	    ans+= cnt * (k+1);
	    pt = vec[pos].F - (emp % k) - 1;
	    if(pt < bck)
		--pt, dq[--L] = bck;
	}
	while(pt < vec[pos].S)
	    if(go())
		return ans;
    }
    assert(0);
}

int main(){
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie();
    
    int q;
    cin >> q;
    while(q--){
	ll n, k;
	cin >> n >> k;
	cout << solve(n, k) << "\n";
    }
    return 0;
}
// #pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math")
// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
