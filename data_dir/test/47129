#include <stdio.h>
#define INF 0x3f3f3f3f
#define MAXN 4005
#define MAX_K 805

int mat[MAXN][MAXN];
int sum[MAXN][MAXN];
int dp[MAX_K][MAXN];
int p[MAX_K][MAXN];

inline int read_int() {
   register char c=0;
   int a=0;
   while (c<33) c=getchar();
   while (c>33) {
       a=a*10+c-'0';
       c=getchar();
   }
   return a;
}

inline int cost(int i, int j, int n) {
    if (i > j) {
        return 0;
    }
    if (j > n) {
        j = n;
    }
    return sum[j][j] - sum[i - 1][j] - sum[j][i - 1] + sum[i - 1][i - 1];
}

void solve(int k, int l1, int l2, int p1, int p2) {
    if (l1 > l2) {
        return;
    }
    int lm = (l1 + l2) / 2;
    p[k][lm] = -1;
    dp[k][lm] = INF;

    for (int i = p1; i <= p2; i++) {
        int aux = dp[k - 1][i] + cost(i + 1, lm, l2);
        if (dp[k][lm] > aux) {
            dp[k][lm] = aux;
            p[k][lm] = i;
        }
    }
    solve(k, l1, lm - 1, p1, p[k][lm]);
    solve(k, lm + 1, l2, p[k][lm], p2);
    return;
}

int main(void) {
    int n, k;

    scanf(" %d %d", &n, &k);
    for (int i = 0; i <= n; i++) {
        sum[i][0] = sum[0][i] = 0;
    }
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            //scanf(" %d", &mat[i][j]);
            mat[i][j] = read_int();
            sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + mat[i][j];
        }
    }
    for (int j = 1; j <= n; j++) {
        dp[1][j] = cost(1, j, n);
    }
    for (int i = 2; i <= k; i++) {
        solve(i, 1, n, 1, n);
    }
    printf("%d\n", dp[k][n] / 2);

    return 0;
}
