#include <bits/stdc++.h>
using namespace std;

#define loop(i,n) for(int i = 0;i < int(n);i++)
#define rloop(i,n) for(int i = int(n);i >= 0;i--)
#define range(i,a,b) for(int i = int(a);i <= int(b);i++)
#define SZ(c) int(c.size())
#define ALL(c) c.begin(), c.end()
#define RALL(c) c.rbegin(), c.rend()
#define PI acos(-1)
#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define sfi1(v) scanf("%d",&v)
#define sfi2(v1,v2) scanf("%d %d",&v1,&v2)
#define sfi3(v1,v2,v3) scanf("%d %d %d",&v1,&v2,&v3)
#define sfll1(v) scanf("%I64d",&v);
#define sfll2(v1,v2) scanf("%I64d %I64d",&v1,&v2)
#define sfll3(v1,v2,v3) scanf("%I64d %I64d %I64d",&v1,&v2,&v3)

typedef vector<int> vi;
typedef vector<pair<int,int> > vii;
typedef long long ll;
typedef pair<int, int> pii;

const int N = 3005;
int v[N] , vis[N] , comp[N] , compe[N];
int n , vis_id , need , have;

void dfs(int idx){
    while(vis[idx] != vis_id){
        vis[idx] = vis_id;
        comp[idx] = have;
        compe[have]++;
        idx = v[idx];
    }
}

void cycles(){
    have = 0;
    vis_id++;
    range(i,1,n)
        if(vis[i] != vis_id){
            have++;
            compe[have] = 0;
            dfs(i);
        }
}

int main()
{

    sfi1(n);
    range(i,1,n)sfi1(v[i]);
    sfi1(need);
    need = n - need;
    cycles();
    int k = abs(have-need);
    printf("%d\n",abs(have-need));
    if(have < need){
        int cnt = 0;
        while(abs(have-need)){
            range(i,1,n){
                if(compe[comp[i]] > 1)
                    range(j,i+1,n){
                        if(comp[i] == comp[j]){
                            printf("%d %d ",i,j);
                            swap(v[i],v[j]);
                            goto hell;
                        }
                    }
            }

            hell:
            cnt++;
            assert(cnt <= k);
            cycles();
        }
    }else{
        int cnt = 0;
        while(abs(have-need)){
            range(i,2,n){
                if(comp[i] != comp[1]){
                    printf("1 %d ",i);
                    swap(v[1],v[i]);
                    break;
                }
            }
            cnt++;
            assert(cnt <= k);
            cycles();
        }
    }

    return 0;
}
