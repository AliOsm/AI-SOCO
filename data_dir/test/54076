#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 10, mod = 1e9 + 7;
int n, k, fc[N], ifc[N], dp[N], pt[N];
string s;
int power(int a, int b) {
	if (!b)
		return 1;
	long long rtr = power(a, b / 2);
	if (b % 2)
		return 1ll * rtr * rtr % mod * a % mod;
	return 1ll * rtr * rtr % mod;
}
void getFc() {
	fc[0] = ifc[0] = pt[0] = 1;
	for (int i = 1; i < N - 5; i++) {
		fc[i] = 1ll * fc[i - 1] * i % mod;
		ifc[i] = 1ll * ifc[i - 1] * power(i, mod - 2) % mod;
		pt[i] = 1ll * pt[i - 1] * 10 % mod;
	}
	return;
}
int ch(int y, int x) {
	if (y > x)
		return 1;
	return 1ll * fc[x] * ifc[y] % mod * ifc[x - y] % mod;
}
int main() {
	cin >> n >> k >> s;
	getFc();
	dp[n - 1] = 1ll * ch(k, n - 1) % mod;
	for (int i = n - 2; i >= 0; i--) {
		if (!(k > i + 1))
			dp[i] = dp[i + 1] - 1ll * ch(k, i + 1) * pt[n - i - 2] % mod + 1ll * ch(k - 1, i) * pt[n - i - 2] % mod;
		else
			dp[i] = dp[i + 1];
		dp[i] %= mod;
		if (!(k > i))
			dp[i] = (dp[i] + 1ll * ch(k, i) * pt[n - i - 1]) % mod;
	}
	int ans = 0;
	for (int i = 0; i < n; i++) {
		ans = (1ll * ans + 1ll * dp[i] * (s[i] - '0')) % mod;
	}
	cout << (ans + 2ll * mod) % mod;
	return 0;
}
