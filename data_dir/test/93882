#include <cstdio>
#include <map>
using namespace std;
int a[500010];
int b[500010];
int la[110];
int dp[110][110], tmp[110];
void upd(int &v, int k) {
	if (v > k) v = k;
}
map<int, int> rot[110];
typedef map<int, int>::iterator I;
int p;
I get(int l, int v) {
	if (rot[l].size() == 1) {
		return rot[l].begin();
	}
	I it = rot[l].upper_bound(v);
	if (it == rot[l].begin()) {
		it = rot[l].end();
	}
	--it;
	return it;
}
void add(int l, int pos, int v) {
	if (rot[l].count(pos)) {
		if (rot[l][pos] <= v) {
			return;
		}
	} else {
		if (!rot[l].size()) {
			rot[l][pos] = v;
			return;
		} else {
			I it = get(l, pos);
			int q = it->first;
			int d = (pos - q + p) % p + it->second;
			if (d <= v) return;
		}
	}
	rot[l][pos] = v;
	I it = rot[l].upper_bound(pos);
	if (it == rot[l].end()) it = rot[l].begin();
	while (it->first != pos) {
		int q = it->first;
		int d = (q - pos + p) % p + v;
		if (d > it->second) {
			return;
		} else {
			I it2 = rot[l].lower_bound(it->first);
			it++;
			rot[l].erase(it2);
			if (it == rot[l].end()) {
				it = rot[l].begin();
			}
		}
	}
}
int main() {
	int n, k;
	scanf("%d%d%d", &n, &k, &p);
	for (int i = 0; i < p; i++) {
		la[i] = -1;
	}
	for (int i = 0; i <= k; i++) {
		for (int j = 0; j <= p; j++) {
			dp[i][j] = 1001001001;
		}
	}
	la[0] = 0;
	dp[0][0] = 0;
	rot[0][0] = 0;
	for (int i = 0; i < n; i++) {
		scanf("%d", &a[i]);
		b[i+1] = b[i] + a[i];
		b[i+1] %= p;
		for (int l = 0; l < k; l++) {
			if (l > i) break;
			I it = get(l, b[i+1]);
			int q = it->first;
			int inc = (b[i+1] - q + p) % p;
			tmp[l+1] = it->second + inc;
		}
		for (int j = 1; j <= k; j++) {
			if (j > i + 1) break;
			add(j, b[i+1], tmp[j]);
		}
	}
	int ans = 1001001001;
	I it = get(k, b[n]);
	printf("%d\n", it->second + (b[n] - it->first + p) % p);
	return 0;
}
