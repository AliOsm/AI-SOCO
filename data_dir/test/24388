/**/
#include<bits/stdc++.h>
using namespace std;

#define pb push_back
#define For(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define all(v) v.begin(),v.end()
#define V vector
typedef long long ll;
/***********************************************/
/* Dear GCC compiler:
 * I've wasted time reading the problem and trying to figure out the solution
 * If there's any syntax error and you've any suggestion, please fix it yourself.
 * I hope my code compile and get accepted. KEE O.o
 *      ____________
 *     /         __ \
 *    /   __    |  | \
 *   /   |__|   |  |  \
 *  (           |__|   )
 *   \                /
 *    \      ___     /
 *     \____________/
 */
/**/
const ll mod = 1000000007;
ll pow_mod(ll base,ll power){
    if(power <= 0)
        return 1LL;
    if(power == 1LL)
        return base;
    if(power&1LL)
        return (base%mod * pow_mod(base,power-1LL)%mod)%mod;
    return pow_mod((base * base)%mod,power>>1LL)%mod;
}
int main(){
    //ios_base::sync_with_stdio(false);
    //cin.tie(nullptr);
    ll n,x;
    scanf("%I64d%I64d",&n,&x);
    V<ll> a(n);
    ll sum = 0LL,res = 0LL;
    For(i,0,n){
        scanf("%I64d",&a[i]);
        sum += a[i];
    }
    map<ll,ll> c;
    For(i,0,a.size()){
        c[sum-a[i]]++;
    }
    bool move = true;
    ll cur = c.begin()->first;
    while(move){
        res = cur;
        ll r = c[cur];
        move = (r%x == 0 && r>0);
        if(move){
            cur++;
            c[cur] += r/x;
        }
    }
    res = min(res,sum);
    res = pow_mod(x,res);
    printf("%I64d",res);
    return 0;
}
/**/