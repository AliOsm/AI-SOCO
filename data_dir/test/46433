#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <cassert>
#include <ctime>


using namespace std;

#ifdef WIN32
  #define LLD "%I64d"
#else
  #define LLD "%lld"
#endif

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef vector<ll> vll;
typedef vector<vll> vvll;

ll rdtsc() {
  ll tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define TASKNAME "text"
#define pb push_back
#define mp make_pair
#define EPS (1e-9)
#define INF ((int)1e9)
#define sqr(x) ((x) * (x))         
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())

const int maxn = 105;
char s[5];
int a[maxn];
int numbers[maxn];

const int maxTaken = 3;
int current[maxTaken];

int solve(int n, int *a, int taken, int maxTaken, int *current, int mask = 0, int lastTaken = -1) {
  if (taken == maxTaken)
    return taken;
  int result = taken;
  int tmp[maxTaken];
  for (int i = lastTaken + 1; i < n; ++i) {
    if (mask & a[i])
      continue;
    tmp[taken] = i;
    int value = solve(n, a, taken + 1, maxTaken, tmp, mask | a[i], i);
    if (result < value) {
      result = value;
      for (int j = taken; j < value; ++j)
        current[j] = tmp[j];
    }
  } 

  return result;
}

bool solve() {
  int n;
  if (scanf("%d", &n) < 1)
    return 0;
  int zero = 0;
  int cnt = 0;
  for (int i = 0; i < n; ++i) {
    scanf(" %s", s);
    int mask = 0;
    int n = strlen(s);
    for (int i = 0; i < n; ++i)
      mask |= ((s[n - 1 - i] != '0') << i);
    if (!mask)
      ++zero;
    else
      a[cnt] = mask, numbers[cnt] = atoi(s), ++cnt;
  }
  int taken = solve(cnt, a, 0, maxTaken, current);
  vector<int> ans;
  for (int i = 0; i < taken; ++i)
    ans.pb(numbers[current[i]]);
  for (int i = 0; i < zero; ++i)
    ans.pb(0);

  printf("%d\n", sz(ans));
  for (int i = 0; i < sz(ans); ++i)
    printf("%d%c", ans[i], " \n"[i == sz(ans) - 1]);
  return 1;
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".in", "r", stdin);
  freopen(TASKNAME".out", "w", stdout);
#endif
  
  while (1) {
    if (!solve())
      break;
    #ifdef DEBUG
      eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
    #endif
  }
  return 0;
}
