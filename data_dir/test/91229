/*Aoi kaze ga ima
Mure no do ao tataitemo
Watashi dake wo tada mitsumete
Hohoenderu anata

Soto fureru mono
Motomeru koto ni muchuu te
Unmei sae wata shiranai
Itaike na hitomi*/

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define INF 2000000000
#define DESPACITO2 1000000000000000
#define DESPACITO 1000000000000000000
#define MOD 1000000007
#define ll long long
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define ii pair<int,int>
#define vii vector<ii>
#define si set<int>
#define msi map<string,int>
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define TRvi(c,it) for(vi::iterator it=(c).begin();it!=(c).end();it++)
#define TRvii(c,it) for(vii::iterator it=(c).begin();it!=(c).end();it++)
#define TRmsi(c,it) for(msi::iterator it=(c).begin();it!=(c).end();it++)
 
 
using namespace std;

ll tree1[1000001],tree2[1000001];
ll pre[1000001];
ll arr[1000001];

void Create(int node,int start,int end)
{
	if(start==end)
	{
		tree1[node]=pre[start];
		tree2[node]=pre[start];
	}
	else
	{
		int mid=(start+end)/2;
		Create(2*node,start,mid);
		Create(2*node+1,mid+1,end);
		tree1[node]=min(tree1[2*node],tree1[2*node+1]);
		tree2[node]=max(tree2[2*node],tree2[2*node+1]);
	}

}

ll q1(int node,int start,int end,int l,int r)
{
	if(start>end or l>r or start>r or end<l)
		return DESPACITO;
	if(start>=l&&end<=r)
		return tree1[node];
	int mid=(start+end)/2;
	ll p=q1(2*node,start,mid,l,r);
	ll q=q1(2*node+1,mid+1,end,l,r);
	return min(p,q);
}

ll q2(int node,int start,int end,int l,int r)
{
	if(start>end or l>r or start>r or end<l)
		return (-1*DESPACITO);
	if(start>=l&&end<=r)
		return tree2[node];
	int mid=(start+end)/2;
	ll p=q2(2*node,start,mid,l,r);
	ll q=q2(2*node+1,mid+1,end,l,r);
	return max(p,q);
}



int main()
{
	IOS;
    #ifndef ONLINE_JUDGE
        // for getting input from input.txt
        freopen("input.txt", "r", stdin);
        // for writing output to output.txt
        freopen("output.txt", "w", stdout);
    #endif
    int n;
    cin >> n;
   	REP(i,1,n)
   		cin >> arr[i];
   	ll mult=1;
   	pre[0]=0;
   	REP(i,1,n-1)
   	{
   		ll val=mult*abs(arr[i]-arr[i+1]);
   		pre[i]=pre[i-1]+val;
   		//cerr << pre[i] << "\n";
   		mult*=-1;
   	}
   	Create(1,1,n-1);
   	ll ans=-DESPACITO2;
   	REP(i,1,n-1)
   	{
   		if(i%2==1)
   		{
   			//cerr << q2(1,1,n-1,i,n-1) << "\n";
   			ans=max(ans,q2(1,1,n-1,i,n-1)-pre[i-1]);
   		}
   		else
   		{
   			//cerr << q1(1,1,n-1,i,n-1) << "\n";
   			ans=max(ans,-1*q1(1,1,n-1,i,n-1)+pre[i-1]);
   		}
   	}
   	cout << ans << "\n";
}
