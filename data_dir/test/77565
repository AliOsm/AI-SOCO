#include <cstring>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
#include <climits>
#include <cctype>
#include <bitset>
#include <list>
#include <fstream>

using namespace std;

#define all(v)              ((v).begin()), ((v).end())
#define allr(v)             ((v).rbegin()), ((v).rend())
#define sz(v)               ((int)((v).size()))
#define clr(v, d)           memset(v, d, sizeof(v))
#define MP                  make_pair
#define lpv(i, v)           for(int i=0;i<sz(v);++i)
#define lpn(i, n)           for(int i=0;i<(int)(n);++i)
#define lps(i, j, n)        for(int i=(j);i<(int)(n);++i)
#define lpb(i, j, n)        for(int i=(j);i>=(int)(n);--i)
#define nul                 puts("")

typedef long long                   ll;
typedef long double                 LD;
typedef vector<int>                 vi;
typedef vector<ll>                  vl;


int dx[]{1, -1, 0, 0};
int dy[]{0, 0, 1, -1};
int dx8[]{1, -1, 0, 0, 1, -1, 1, -1};
int dy8[]{0, 0, 1, -1, 1, -1, -1, 1};

const ll  OO = 1e9 + 7;
int n, m;


int main()
{
	int n, m;
	cin >> n >> m;
	vector<int>v(m), d(m);
	int ans = 0;
	for (int i = 0; i < m; i++)
		cin >> d[i] >> v[i], ans = max(ans, v[i]);

	
	bool OK = false;
	for (int i = 0; i < m - 1; i++)
	{
		int interv = d[i+1] - d[i] ;
		int a = max(v[i + 1], v[i]), b = min(v[i + 1], v[i]);
		
		int rem = a - b;

		if (rem <= interv)
		{
			interv -= rem;
			ans = max(ans, int(a + interv / 2));
		}
		else
			OK = true;
	}

	int L = ans;
	ans = max(ans, max((n - d[m - 1]) + v[m - 1], d[0] - 1 + v[0]));



	if (!OK)
		cout << ans << endl;
	else
		cout << "IMPOSSIBLE" << endl;

	//system("pause");
	return 0;
}