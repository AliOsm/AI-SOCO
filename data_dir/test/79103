#include <bits/stdc++.h>
using namespace std;

const int N = 1003;
int weight[N], beauty[N];
bool vis[N];
vector<int> adj[N];
int w, n, sz, totalweight, totalbeauty;
int memo[N][N];
vector<int> nodes;
vector<vector<int>> v;
void dfs(int node) {
	nodes.push_back(node);
	vis[node] = true;

	totalweight += weight[node];
	totalbeauty += beauty[node];

	for (int i = 0; i < (int) adj[node].size(); i++) {
		int u = adj[node][i];
		if (!vis[u])
			dfs(u);
	}
}
int dp(int i, int sum) {
	if (sum > w)
		return -(int) 1e9;

	if (i == sz)
		return 0;

	int &ret = memo[i][sum];
	if (ret != -1)
		return ret;
	int size = v[i].size();
	ret = max(dp(i + 1, sum), dp(i + 1, sum + v[i][size - 2]) + v[i][size - 1]);

	for (int j = 0; j < size - 2; j++)
		ret = max(ret, dp(i + 1, sum + weight[v[i][j]]) + beauty[v[i][j]]);

	return ret;
}
int main() {
	int m;
	scanf("%d %d %d", &n, &m, &w);
	for (int i = 0; i < n; i++)
		scanf("%d", &weight[i]);
	for (int i = 0; i < n; i++)
		scanf("%d", &beauty[i]);

	for (int i = 0; i < m; i++) {
		int u, v;
		scanf("%d %d", &u, &v);
		--u, --v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	for (int i = 0; i < n; i++) {
		if (!vis[i]) {
			nodes.clear();
			totalweight = totalbeauty = 0;
			dfs(i);

			nodes.push_back(totalweight);
			nodes.push_back(totalbeauty);

			v.push_back(nodes);
		}
	}
	memset(memo, -1, sizeof memo);
	sz = (int) v.size();

	printf("%d\n", dp(0, 0));
}
