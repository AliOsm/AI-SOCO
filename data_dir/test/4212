#include<bits/stdc++.h>
#include <regex>
#include<ext/numeric>
#include<ext/hash_map>
using namespace std;
using namespace __gnu_cxx;

#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)  (int)v.size()
#define WHITE -1
#define GREY   0
#define BLACK  1
#define CLR(a,v) memset(a,v,sizeof a)
#define PC(x) __builtin_popcount(x)
#define PCLL(x) __builtin_popcountll(x)
#define MP make_pair

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<ll> vll;
//typedef unsigned int ui;

typedef complex<double> point;
#define X real()
#define Y imag()
#define vec(a,b) ((b)-(a))
#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define colliner pointOnLine
#define same(a,b) (lengthSqr(vec(a,b))<EPS)
#define lengthSqr(v) (dot(v,v))

const double PI = acos(-1.0);

int dx[] = { 0, -1, 0, 1, -1, -1, 1, 1 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };

int DX[] = { 1, 1, -1, -1, 2, 2, -2, -2 };
int DY[] = { 2, -2, 2, -2, 1, -1, 1, -1 };

const int MAX = 305, MOD = 1e9 + 7, oo = 2e9, LOGMAX = 20;
const ll OO = 1ll << 60;
const double EPS = 1e-9;

int n, m, p, a[MAX][MAX], sp[MAX][MAX], dp[MAX][MAX];
vi x[MAX * MAX], y[MAX * MAX];

void init() {
	for (int i = 0; i < n; ++i)
		for (int j = 0; j < m; ++j)
			sp[i][j] = oo;
}

bool valid(int i, int j) {
	return i >= 0 && i < n && j >= 0 && j < m;
}

void bfs(int l) {
	init();
	queue<ii> q;
	for (int i = 0; i < sz(x[l]); ++i)
		q.push( { x[l][i], y[l][i] }), sp[x[l][i]][y[l][i]] =
				dp[x[l][i]][y[l][i]];
	while (!q.empty()) {
		ii cur = q.front();
		q.pop();
		for (int i = 0; i < 4; ++i) {
			int nx = cur.first + dx[i], ny = cur.second + dy[i];
			if (valid(nx, ny) && a[nx][ny] != l
					&& sp[nx][ny] > sp[cur.first][cur.second] + 1)
				sp[nx][ny] = sp[cur.first][cur.second] + 1, q.push( { nx, ny });
		}
	}
	for (int i = 0; i < sz(x[l + 1]); ++i)
		dp[x[l + 1][i]][y[l + 1][i]] = sp[x[l + 1][i]][y[l + 1][i]];
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
//	freopen("IN.in", "r", stdin);
//	freopen("out.txt", "w", stdout);
#endif
	cin >> n >> m >> p;
	for (int i = 0; i < n; ++i)
		for (int j = 0; j < m; ++j) {
			scanf("%d", &a[i][j]);
			x[a[i][j]].push_back(i);
			y[a[i][j]].push_back(j);
			dp[i][j] = oo;
		}
	for (int i = 0; i < sz(x[1]); ++i)
		dp[x[1][i]][y[1][i]] = x[1][i] + y[1][i];
	for (int i = 2; i <= p; ++i)
		if (sz(x[i]) * 1ll * sz(x[i - 1]) >= n * m)
			bfs(i - 1);
		else
			for (int j = 0; j < sz(x[i]); ++j)
				for (int k = 0; k < sz(x[i - 1]); ++k)
					dp[x[i][j]][y[i][j]] = min(dp[x[i][j]][y[i][j]],
							dp[x[i - 1][k]][y[i - 1][k]]
									+ abs(x[i][j] - x[i - 1][k])
									+ abs(y[i][j] - y[i - 1][k]));
	cout << dp[x[p][0]][y[p][0]];
}
