#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define pb push_back
#define f first
#define s second
#define mod 1000000007
#define inf 1e8

#define pi pair<ll,ll>
#define pii pair<pi,ll>
#define f first
#define mp make_pair
#define s second
#define rep(i,n) for(ll i=0;i<n;i++)
#define forup(i,a,b) for(ll i=a;i<=b;i++)
#define gd(v) scanf("%d",&v)
#define gl(x) scanf("%lld",&x)
#define pd(v) printf("%d\n",v)
#define pl(v) printf("%lld\n",v)
pi tree[400011];
ll h[100011];
vector<pi>v;
pi norm(pi a,pi b){
	if(a.f>b.f) return a;
	return b;
}
pi query(int node,int l,int r,ll s,ll e){
	if(v[r].f<s or e<v[l].f or s>e ) return mp(0,0);
	if( s<=v[l].f and v[r].f<=e ){
		return tree[node];
	}
	int mid=(l+r)/2;
	return  norm( query(2*node,l,mid,s,e),query(2*node+1,mid+1,r,s,e) );
}

void update(int node,int l,int r,ll x,int val){
	if(v[r].f<h[x] or v[l].f>h[x]) return ;
	if(l==r and v[l].s==x){
		tree[node]=norm( tree[node] , mp(val,x) );
		return;
	}
	if(l==r) return;
	int mid=(l+r)/2;
	if(v[l].f==v[r].f){
		if( v[mid].s>=x ){
			update(2*node,l,mid,x,val);
		}
		else{
			update(2*node+1,mid+1,r,x,val);
		}
	}
	else{
		update(2*node,l,mid,x,val);
		update(2*node+1,mid+1,r,x,val);
	}
	tree[node]=norm(tree[2*node],tree[2*node+1]);
}

int dp[100011];
int tr[100011];
int main(){
	ll n,d;
	cin>>n>>d;

	ll mx=0;
	rep(i,n){
		cin>>h[i+1];
		v.pb({ h[i+1],i+1 });
		mx=max(mx,h[i+1]);
	}
	v.pb({0,0});
	sort(v.begin(),v.end());
	pi q;
	int ans=0;
	ll idx;
	for(int i=1;i<=n;i++){
		q=query(1,1,n,0,max(0LL,h[i]-d));
		q=norm(q,query(1,1,n,min(h[i]+d,mx+1),mx));
		dp[i]=q.f+1;
		tr[i]=q.s;
		if(ans<dp[i]){
			ans=dp[i];
			idx=i;
		}
		update(1,1,n,i,dp[i]);
	}
	//cout<<idx<<" ";
	cout<<ans<<"\n";
	vector<ll>w;
	for(int i=idx;i>=1;){
		w.pb(i);
		i=tr[i];
	}
	reverse(w.begin(),w.end());
	for(auto x:w){
		cout<<x<<" ";
	}
}
