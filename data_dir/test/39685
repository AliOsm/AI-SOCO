#include "bits/stdc++.h"
#define MAXN 100009
#define INF 1000000007
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define pb(x) push_back(x)
#define wr cout<<"----------------"<<endl;
#define ppb() pop_back()
#define tr(ii,c) for(__typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)
#define ff first
#define ss second

using namespace std;

typedef long long ll;
typedef pair<ll,ll> PII;
template<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
template<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
const int BLOK=350;
const int N=1e5;
int st[MAXN],en[MAXN],now;
ll arr[MAXN],cnt[MAXN],n,m,w,one;
struct CHT{
	vector<ll>m,b;
	int pnt;
	double intersection(int l1,int l2){
		return 1.0*(b[l1]-b[l2])/(m[l2]-m[l1]);
	}
	void init(int x){
		m.clear();
		b.clear();
		pnt=0;
		for(int i=st[x];i<=en[x];i++){
			m.pb(i);b.pb(arr[i]);
			while(m.size()>=3 and intersection(m.size()-3,m.size()-2)>=intersection(m.size()-3,m.size()-1)){
				m.erase(m.end()-2);
				b.erase(b.end()-2);
			}
		}
	}
	PII tap(int x){
		while(pnt+1<(int)m.size() and m[pnt+1]*x+b[pnt+1]>m[pnt]*x+b[pnt])
			pnt++;
		return mp(m[pnt]*x+b[pnt],m[pnt]);	
	}
}convex[500];
void upd(int x){
	if(!x)
		return;	
	for(int i=1;i<=now;i++){
		if(en[i]<=x)
			cnt[i]++;
		else{
			for(int j=st[i];j<=en[i];j++)
				if(j<=x)
					arr[j]+=j;
			convex[i].init(i);	
			break;
		}	
	}
}
void solve(ll cost){
	ll ans=0,who=0;
	for(int i=1;i<=now;i++){
		PII res=convex[i].tap(cnt[i]);
		if(umax(ans,one*1LL*cost*w+res.ff))
			who=res.ss;
	}
	printf("%lld %lld\n",ans,who);
}
vector<int>adj[MAXN];
int main(){
	#ifndef ONLINE_JUDGE
    freopen("file.in", "r", stdin);
	#endif	
	scanf("%lld%lld",&n,&w);
	int mx=0;
	for(int i=1;i<=n;i++){
		int x,y;
		scanf("%d%d",&x,&y);
		adj[y].pb(x);
		umax(mx,y);
	}now=1;
	for(int i=1;i<=N;i++){
		if(!st[now])	
			st[now]=i;
		if(i%BLOK==0){
			en[now]=i;
			now++;
		}		
	}
	if(N%BLOK==0)	
		now--;
	else
		en[now]=N;
	for(int i=1;i<=now;i++)
		convex[i].init(i);one=n;
	for(int i=0;i<=mx+1;i++){
		solve(i);
		tr(it,adj[i])
			upd(*it),one--;
	}
	return 0;
}
