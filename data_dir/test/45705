#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     std::begin(_obj), std::end(_obj)
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define ceilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define has(_obj, _val)               ((_obj).find(_val) != (_obj).end())
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifdef SHJ_LOCAL
    #define debug(_x)                 std::cerr << (#_x) << " = " << (_x) << '\n' << std::flush;
#else
    #define debug(_x)                 ;
#endif
#define endl "\n"
template<typename Tp>
inline void outarr(Tp _begin, Tp _end, const char* _delim = " ") {
    for (Tp current = _begin; current != _end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = int64_t;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
int cnt[1001];
int gr[20][20];

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    int n;
    cin >> n;
    loop(n * n) {
        int x;
        cin >> x;
        ++cnt[x];
    }
    int k = 1;
    loop(n >> 1) {
        for (int j = 0; j < (n >> 1); ++j) {
            while (k <= 1000 && cnt[k] < 4) {
                ++k;
            }
            if (k > 1000) {
                RET("NO");
            }
            gr[i][j] = gr[n - 1 - i][j] = gr[i][n - 1 - j] = gr[n - 1 - i][n - 1 - j] = k;
            cnt[k] -= 4;
        }
    }
    if (n & 1) {
        k = 1;
        loop(n >> 1) {
            while (k <= 1000 && cnt[k] < 2) {
                ++k;
            }
            if (k > 1000) {
                RET("NO");
            }
            gr[i][n >> 1] = gr[n - 1 - i][n >> 1] = k;
            cnt[k] -= 2;
        }
        loop(n >> 1) {
            while (k <= 1000 && cnt[k] < 2) {
                ++k;
            }
            if (k > 1000) {
                RET("NO");
            }
            gr[n >> 1][i] = gr[n >> 1][n - 1 - i] = k;
            cnt[k] -= 2;
        }
        loop(1001) {
            if (cnt[i] > 0) {
                gr[n >> 1][n >> 1] = i;
                break;
            }
        }
    }
    cout << "YES" endl;
    loop(n) {
        outarr(gr[i], gr[i] + n);
    }

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}