/*######################################################
#########~~~~~####~~~~###~~##~~##~~##~~##~~##~~#########
#########~~##~~##~~##~~##~~~#~~##~~~#~~##~~##~~#########
#~~~~~~##~~~~~###~~~~~~##~~#~~~##~~#~~~##~~##~~##~~~~~~#
#########~~######~~##~~##~~##~~##~~##~~##~~##~~#########
#########~~######~~##~~##~~##~~##~~##~~###~~~~##########
######################################################*/
#include <bits/stdc++.h>
using namespace std;
#pragma GCC optimize("O3")
#define ll long long
#define str string
#define rtn return
#define endl '\n'
#define f first
#define s second
#define pb push_back
#define db long double
#define bs 1000000007
#define inf 2e18
#define eps 1e-15
#define pll pair <ll, ll>
#define vi vector<ll>
#define fill(a,v) memset(a,v,sizeof(a))
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define loop(i,a,b) for(ll i=a;i<b;i++)
#define loop1(i,a,b) for(ll i=a;i<=b;i++)
#define rep(i,b) for(ll i=0;i<b;i++)
#define pool(i,a,b) for(ll i=b-1;i>=a;i--)
#define per(i,a) for(ll i=(a-1);i>=0;i--)
#define min(x, y) (x>y)?y:x
#define max(x, y) (x>y)?x:y
#define remin(x, y) x = min(x, y)
#define remax(x, y) x = max(x, y)

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " = " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << " = " << arg1<<" |";
  __f(comma+1, args...);
}
#else
#define trace(...)
#endif

int n, m;
const int MAXN = 3e5 + 7;
bool seen[MAXN], recStack[MAXN];
vi add[MAXN];
str s;
int dp[MAXN][30];
ll ans;
vi T;

bool Util(int v) {
  if(seen[v] == false) {
    seen[v] = true;
    recStack[v] = true;
    for(auto i : add[v]) {
        if (!seen[i] && Util(i))
            return true;
        else if (recStack[i])
            return true;
    }
  }
  recStack[v] = false;
  return false;
}

bool cycle() {
  loop1 (i, 1, n)
    if (Util(i))
        return true;
  return false;
}

void topo(int s) {
  seen[s] = 1;
  for (auto i : add[s]) {
    if (!seen[i]) topo(i);
  }
  T.pb(s);
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  cin >> n >> m;
  cin >> s;
  rep (i, m) {
    int x, y;
    cin >> x >> y;
    add[x].pb(y);
  }
  if (cycle()) {
    cout << -1 << endl;
    rtn 0;
  }
  fill(seen, 0);
  loop1 (i, 1, n) {
    if (!seen[i]) topo(i);
  }
  reverse(all(T));
  rep (i, n) {
    dp[T[i]][s[T[i] - 1] - 'a']++;
    for (auto j : add[T[i]]) {
      rep (k, 26) {
        dp[j][k] = max(dp[j][k], dp[T[i]][k]);
      }
    }
  }
  int mx = -1;
  loop1 (i, 1, n) rep (j, 26) remax(mx, dp[i][j]);
  cout << mx << endl;
  rtn 0;
}
