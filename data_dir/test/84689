//#pragma GCC optimize("Ofast,no-stack-protector")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
//#pragma GCC target("avx,tune=native")


#include<bits/stdc++.h>

using namespace std;

typedef complex<double> base;
typedef long double ld;
typedef long long ll;

#define pb push_back
#define pii pair<int,int>
#define vi vector<int>

const int maxn=(int)(1e5+5);
const ll mod=(ll)(998244353);
int a[maxn],fact[maxn],inv_fact[maxn],cnt[maxn];

inline int mul(ll a,ll b)
{
    return (a*b)%mod;
}

inline int add(int a,int b)
{
    int ret=a+b;

    if(ret>=mod)
    {
        ret-=mod;
    }

    return ret;
}

inline int sub(int a,int b)
{
    int ret=a-b;

    if(ret<0)
    {
        ret+=mod;
    }

    return ret;
}

inline int poww(ll a,ll b)
{
    int x=1,y=a;

    while(b>0)
    {
        if(b%2)
        {
            x=mul(x,y);
        }

        y=mul(y,y);b/=2;
    }

    return (int)(x%mod);
}

void build()
{
    fact[0]=1;

    for(int i=1;i<maxn;i++)
    {
        fact[i]=mul(fact[i-1],i);
    }

    inv_fact[maxn-1]=poww(fact[maxn-1],mod-2);

    for(int i=maxn-2;i>=0;i--)
    {
        inv_fact[i]=mul(inv_fact[i+1],i+1);
    }
}

vector<int> mult(vector<int>& a,vector<int>& b)
{
    vector<int> ret(a.size()+b.size());

    for(int i=0;i<a.size();i++)
    {
        for(int j=0;j<b.size();j++)
        {
            ret[i+j]=add(ret[i+j],mul(a[i],b[j]));
        }
    }

    while(ret.back()==0)
    {
        ret.pop_back();
    }

    return ret;
}

int C(int n,int r)
{
    if(n<r || min(n,r)<0)
    {
        return 0;
    }

    int val1=fact[n],val2=mul(inv_fact[r],inv_fact[n-r]);

    return mul(val1,val2);
}

int main()
{
    ios_base::sync_with_stdio(0);

    build();int n;cin>>n;

    for(int i=0;i<n;i++)
    {
        cin>>a[i];

        cnt[a[i]]++;
    }

    int res=0;

    vector<int> curr;curr.pb(1);

    for(int i=1;i<=n;i++)
    {
        if(cnt[i]>=2)
        {
            int ways=mul(2,C(cnt[i],2));

            for(int j=0;j<curr.size();j++)
            {
                int zz=mul(curr[j],ways);

                int prob=mul(fact[n-j-2],inv_fact[n]);

                prob=mul(prob,zz);

                res=add(res,prob);
            }
        }

        vector<int> now;now.pb(1);now.pb(cnt[i]);

        curr=mult(curr,now);
    }

    cout<<res<<endl;

    return 0;
}
