#include<bits/stdc++.h>

using namespace std;

using ll = long long int;
using ull = unsigned long long int;
using dd = double;
using ldd = long double;
using si = short int;
using pii = pair<int, int>;
using pll = pair<ll, ll>;

#define all(x) (x).begin(), (x).end()
#define ff first
#define ss second

//debug defines
#ifdef HOME
    #define debug(x) cout << #x << " " << x << endl;
    #define debug_v(x) for (auto j : (x)){ cout << j << " ";} cout << endl;
    #define PO cout << "Pomelo" << endl;
    #define OL cout << "Oliva" << endl;
#else
    #define debug(x) 0
    #define debug_v(x) 0
    #define PO 0
    #define OL 0
#endif // HOME
//end of debug defines

vector<bool> was;

void dfs(int v, vector<vector<int>>& gr, vector<int>& ts)
{
    was[v] = 1;
    for (int i : gr[v])
    {
        if (was[i] == 0)
            dfs(i, gr, ts);
    }
    ts.push_back(v);
}

void dfs_2(int v, vector<vector<int>>& gr, vector<int>& ans, int num)
{
    was[v] = 1;
    ans[v] = num;
    for (int i : gr[v])
    {
        if (was[i] == 0)
            dfs_2(i, gr, ans, num);
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int n;
    cin >> n;
    vector<pair<string, string>> arr(n);
    vector<vector<int>> gr(n * 2);
    for (int i = 0; i < n; ++i)
    {
        cin >> arr[i].ff >> arr[i].ss;
        while (arr[i].ff.size() > 3)
            arr[i].ff.pop_back();
        char t = arr[i].ss[0];
        arr[i].ss = arr[i].ff;
        arr[i].ss.pop_back();
        arr[i].ss += t;
    }
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < n; ++j)
        {
            if (i == j)
                continue;
            if (arr[i].ff == arr[j].ff){
                gr[i * 2].push_back(j * 2 + 1);
                gr[i * 2 + 1].push_back(j * 2 + 1);
            }
            if (arr[i].ff == arr[j].ss)
                gr[i * 2].push_back(j * 2);
            if (arr[i].ss == arr[j].ff)
                gr[i * 2 + 1].push_back(j * 2 + 1);
            if (arr[i].ss == arr[j].ss)
                gr[i * 2 + 1].push_back(j * 2);
        }
    }
    was.assign(n * 2, 0);
    vector<vector<int>> rgr(2 * n);
    for (int i = 0; i < n * 2; ++i)
    {
        for (int j : gr[i])
        {
            rgr[j].push_back(i);
        }
    }
    vector<int> ts;
    for (int i = 0; i < 2 * n; ++i)
    {
        if (was[i] == 0)
            dfs(i, gr, ts);
    }
    reverse(all(ts));
    vector<int> comp(2 * n);
    was.assign(2 * n, 0);
    int num = 0;
    for (int i : ts)
    {
        if (was[i])
            continue;
        ++num;
        dfs_2(i, rgr, comp, num);
    }
    vector<string> answer(n);
    for (int i = 0; i < n; ++i)
    {
        if (comp[i * 2] == comp[i * 2 + 1])
        {
            cout << "NO";
            return 0;
        }
        if (comp[i * 2] < comp[i * 2 + 1])
        {
            answer[i] = arr[i].ss;
        }
        else
        {
            answer[i] = arr[i].ff;
        }
    }
    cout << "YES" << '\n';
    for (int i = 0; i < n; ++i)
    {
        cout << answer[i] << '\n';
    }
 }
