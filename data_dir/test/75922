#pragma comment(linker, "/STACK:64000000")
 
#define _USE_MATH_DEFINES
#define _CRT_NO_DERPECATE
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>
#include <memory.h>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <functional>
#include <complex>
 
using namespace std;
 
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
#define sq(x) ((x)*(x))
#define INF ((int)(2e9))
#define LINF ((int64)(2e18))
#define EPS ((double)(1e-7))
#define MOD ((int64)(1e9 + 9))
#define y0 xdsf
const double PI = 6.283185307179586476925286766559;
const int MAXN = 200100, root = 400;

int n, x, y;
vector < vector < int > > gr;
int64 d[MAXN][2];

int64 dfs(int u, int q = 1, int an = -1)
{
	if (d[u][q] != -1)
		return d[u][q];
	int64 res = 0;
	
	vector < int64 > ans;

	for(int i = 0; i < gr[u].size(); ++i)
	{
		int to = gr[u][i];
		if (to == an)
			continue;
		int64 t = dfs(to, 0, u) + x, t1 = dfs(to, 1, u) + y;
		res += t1;
		ans.push_back(t - t1);
	}
	sort(ans.begin(), ans.end());
	for(int i = 0; i <= min(q, (int)ans.size() - 1); ++i)
		res += ans[i];
	return d[u][q] = res;
}

void solve()
{
	scanf("%d %d %d", &n, &x, &y);
	gr.resize(n + 1);
	for(int i = 0; i < n - 1; ++i)
	{
		int u, v;
		scanf("%d %d", &u, &v);
		gr[u].push_back(v);
		gr[v].push_back(u);
	}
	if (x >= y)
	{
		int flag = 0;
		for(int i = 1; i <= n; ++i)
			if (gr[i].size() == n - 1)
				flag = 1;
		printf("%lld", (n - 2) * (int64) y + (flag ? x : y));
		return;
	}
	memset(d, -1, sizeof d);
	printf("%lld", dfs(1, 1));
}
 
int main()
{
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
#endif
    ios_base::sync_with_stdio(false); cin.tie(0);
    srand(time(0));
	solve();
    return 0;
}  