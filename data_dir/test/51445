#include <cstdio>
#include <iostream>
#include <cstring>
#include <stack>
#include <vector>
using namespace std;
#define REP(i,n) for(int i=0;i<n;i++)
const int SZ=100000;
typedef unsigned long long ll;
int a[SZ], b[SZ];
ll dp[SZ];

struct line
{
	//a+b*x
	ll a, b;
	line(ll a, ll b):a(a),b(b)
	{

	}
};

//l1 < l2
bool compare_intersection(line l1, line l2, int x)
{
	ll num=l2.a-l1.a;
	ll den=l1.b-l2.b;
	return num<den*x;
}

vector<line> st;

int findT(int t)
{
	int l=0;
	int r=st.size()-1;
	while(l<r)
	{
		int c=(l+r)/2;
		if(compare_intersection(st[c],st[c+1],t))
			l=c+1;
		else
			r=c;
	}
	return l;
}

const ll BASE=1000000000;

void do_carry(ll& a1, ll& a2, ll &a3)
{
	if(a3>BASE)
	{
		a2+=a3/BASE;
		a3%=BASE;
	}
	if(a2>BASE)
	{
		a1+=a2/BASE;
		a2%=BASE;
	}
}

void add_line(line l)
{
	while(st.size()>1)
	{
		line l1=st[st.size()-2], l2=st[st.size()-1] , l3=l;
		ll v1,v2;
		v1=l2.a-l1.a;
		v2=l1.b-l3.b;

		ll a1, a2, a3;
		a1=0; a2=0; a3=v1;
		do_carry(a1,a2,a3);
		a1*=v2; a2*=v2; a3*=v2;
		do_carry(a1,a2,a3);

		v1=l3.a-l1.a;
		v2=l1.b-l2.b;

		ll b1, b2, b3;
		b1=0; b2=0; b3=v1;
		do_carry(b1,b2,b3);
		b1*=v2; b2*=v2; b3*=v2;
		do_carry(b1,b2,b3);


//		if((l2.a-l1.a)*(l1.b-l3.b)>(l3.a-l1.a)*(l1.b-l2.b))
		if(a1>b1 || (a1==b1 && (a2>b2||(a2==b2 && a3>=b3))))
			st.pop_back();
		else
			break;
	}
	st.push_back(l);
}

int main()
{
	int n;
	scanf("%d",&n);
	REP(i,n)
		scanf("%d",&a[i]);
	REP(i,n)
		scanf("%d",&b[i]);

	dp[0]=0;
	st.push_back(line(dp[0],b[0]));
	for(int i=1;i<n;i++)
	{
		int j=findT(a[i]);
		dp[i]=st[j].a+a[i]*st[j].b;
		add_line(line(dp[i],b[i]));
	}
//	dp[0]=0;
//	for(int i=1;i<n;i++)
//	{
//		dp[i]=-1;
//		for(int j=0;j<i;j++)
//			if(dp[i]==-1|| dp[i]>dp[j]+a[i]*b[j])
//				dp[i]=dp[j]+a[i]*b[j];
//	}
	cout<<dp[n-1]<<endl;
}
