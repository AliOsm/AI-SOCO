#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int N = 40;
int n, m, q, dp[N][N][N][N], cum[N][N];
char g[N][N + 1];

inline bool check(int a, int b, int c, int d) {
	int ones = cum[c][d];
	if (a != 0)
		ones -= cum[a - 1][d];
	if (b != 0)
		ones -= cum[c][b - 1];
	if (a != 0 && b != 0)
		ones += cum[a - 1][b - 1];
	return ones == 0;
}

int calc(int a, int b, int c, int d) {
	if (a > c || b > d)
		return 0;
	int &res = dp[a][b][c][d];
	if (res != -1)
		return res;
	res = 0;
	if (check(a, b, c, d))
		++res;
	for (int mask = 1; mask < 16; ++mask) {
		int nA = a, nB = b, nC = c, nD = d, ones = 0;
		if (((mask >> 0) & 1) == 1)
			++nA, ++ones;
		if (((mask >> 1) & 1) == 1)
			++nB, ++ones;
		if (((mask >> 2) & 1) == 1)
			--nC, ++ones;
		if (((mask >> 3) & 1) == 1)
			--nD, ++ones;
		if (ones & 1)
			res += calc(nA, nB, nC, nD);
		else
			res -= calc(nA, nB, nC, nD);
	}
	return res;
}

int main() {
//	freopen("in.txt", "r", stdin);
	scanf("%d%d%d", &n, &m, &q);
	for (int i = 0; i < n; ++i)
		scanf("%s", g[i]);
	for (int i = 0; i < n; ++i)
		for (int j = 0; j < m; ++j) {
			if (i != 0)
				cum[i][j] += cum[i - 1][j];
			if (j != 0)
				cum[i][j] += cum[i][j - 1];
			if (i != 0 && j != 0)
				cum[i][j] -= cum[i - 1][j - 1];
			if (g[i][j] == '1')
				++cum[i][j];
		}
	memset(dp, -1, sizeof dp);
	while (q--) {
		int a, b, c, d;
		scanf("%d%d%d%d", &a, &b, &c, &d);
		--a, --b, --c, --d;
		printf("%d\n", calc(a, b, c, d));
	}
	return 0;
}
