/*
ID: Tariqul
PROG: 
LANG: C++
*/

#include <algorithm> 
#include <cctype> 
#include <cmath> 
#include <cstdio> 
#include <cstdlib> 
#include <cstring> 
#include <deque> 
#include <iostream> 
#include <list> 
#include <map> 
#include <numeric> 
#include <queue> 
#include <set> 
#include <sstream> 
#include <stack> 
#include <string> 
#include <vector>

using namespace std; 

#define fo(i,j,n) for(i=j;i<n;++i)
#define Fo(i,j,n) for(i=n-1;i>=j;--i)
#define foo(i,j,v) fo(i,j,sz(v))
#define Foo(i,j,v) Fo(i,j,sz(v))
#define li(v) v.begin(),v.end()
#define sz(v) ((int)v.size())
#define CLR(a,v) memset((a),(v),sizeof(a))
#define inf 1000000001
//typedef long long Long;
typedef __int64 Long;
#define pi (2*acos(0))
#define eps 1e-9

#define two(X) (1<<(X))
#define twoL(X) (((Long)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)

char BUFFER[100000 + 5];
bool readn(int &n)	{ return scanf("%d",&n) == 1; } 
bool readl(Long &n)	{ return scanf("%I64d",&n) == 1; } 
bool readd(double &n){ return scanf("%lf",&n) == 1; } 
bool reads(string &s){ s = ""; int n = scanf("%s",BUFFER); if(n == 1)s = BUFFER; return n == 1; }
bool readln(string &s){ char *valid = gets(BUFFER); if(valid)s = BUFFER; return ((bool)valid); }
const int maxn = 5005;
//const int maxn = 7;
vector<int> Prime,Bad,A,G;
int f[maxn][maxn];
vector<bool> Flag;
map<int,int> mp;
void Prime_Load(int n)
{
Prime.clear();  
int i,j,jr,limit=int(sqrt(n*1.0)+1); Flag.resize(n+1); if(n<2)return; n++; 
for(i=3;i<n;i+=2){ Flag[i-1]=false; Flag[i]=true; }
Flag[0]=Flag[1]=false; Flag[2]=true; if(n%2==1)Flag[n-1]=false;
Prime.push_back(2);
for(i=3;i<limit;i+=2)if(Flag[i])
{ Prime.push_back(i); jr=i*2; j=i+jr; while(j<n){ Flag[j]=false; j+=jr; } } 
for(;i<n;i+=2)if(Flag[i])Prime.push_back(i);
}

int getBeauty(int n)
{
	if(n == 1)return 0;
	if(mp.find(n) != mp.end())return mp[n];
	int i,m = n,val;
	foo(i,0,Prime)
	{
		if(Prime[i] > n)break;
		if(0 == n%Prime[i]){ m = Prime[i]; break; }
	}
	val = getBeauty(n/m);
	if(binary_search(li(Bad),m))val--;
	else val++;
	mp[n] = val;
	return val;
}

template<class T>
T gcd(T a,T b)
{
if(b==0)return a;
return  gcd(b,a%b);
}

int main()
{
	#ifdef localhost
	freopen("D://input.txt","r",stdin);
	//freopen("D://output.txt","w",stdout);
	#endif

	Prime_Load(32000); mp.clear(); mp[1] = 0;
	int i,j,n,m,d,ma = -inf,val,last = 0; cin >> n >> m;
	A.resize(n+1); G.resize(n+1); Bad.resize(m); fo(i,0,n)cin >> A[i];
	foo(i,0,Bad)cin >> Bad[i]; sort(li(Bad));
	fo(i,0,maxn)fo(j,0,maxn)f[i][j] = -inf;
	d = A[0]; G[0] = getBeauty(A[0]);
	fo(i,1,n)
	{
		d = gcd(d,A[i]);
		G[i] = getBeauty(d);
	}
	fo(i,0,n)A[i] = getBeauty(A[i]);
	f[n][n] = A[n] = G[n] = 0;
	
	Fo(i,0,n+1)fo(j,i+1,n+1)
	{
		f[i][j] = max(f[i][j],f[i+1][j] + A[i] - G[j]);
		f[i][i] = max(f[i][i],f[i+1][j] + A[i] - G[i]);
	}
	fo(i,0,n+1)ma = max(ma,f[0][i]);
	cout << ma;
	//cout << sz(Prime);	
	printf("\n");
	return 0;
} 