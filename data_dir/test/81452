#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#include <bits/stdc++.h>
#define all(c) c.begin(),c.end()
#define ll long long
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define mod 1000000007
#define PI 3.1415926536
#define pll pair<ll, ll>
using namespace std;

bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
            if (n % i == 0) {
                  return false;
            }
    }
    return true;
}

inline ll getPow(ll a,ll b) {
    ll res = 1ll, tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
       }
       tp *= tp;
       b >>= 1ll;
    }
    return res;
}

ll vec_mult(ll x1, ll y1, ll x2, ll y2, ll x3, ll y3) {
   return abs((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}

void ok() {
   puts("YES");
   exit(0);
}

void no() {
   puts("NO");
   exit(0);
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

const ll N = 2e5 + 10, inf = 2e18;
ll xx[] = {1, 1, -1, -1};
ll yy[] = {1, -1, 1, -1};
// please, accepted!

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    ll n = nxt(), k = nxt();
    vector<ll> mas(n + 1);
    for(int i = 1; i <= n; i++) {
        mas[i] = nxt();
    }
    ll ct_1 = count(all(mas), -1);
    ll ct_2 = count(all(mas), 1);
    auto solve = [&](ll b) {
       ll ct1 = ct_1;
       ll ct2 = ct_2;
       for(int i = b; i <= n; i += k) {
           if(mas[i] == -1) ct1--;
           else ct2--;
       }
       for(int i = b - k; i >= 1; i -= k) {
           if(mas[i] == -1) ct1--;
           else ct2--;
       }
       return abs(ct1 - ct2);
    };
    ll ans = 0;
    for(int i = 1; i <= n; i++) {
        ans = max(ans, solve(i));
    }
    cout << ans;

}
