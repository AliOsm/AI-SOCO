#define _CRT_SECURE_NO_WARNINGS
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <string>

#define oo 1e9
#define pi 3.1415926536
#define all(x) x.begin(),x.end()
#define sorta(x) sort(all(x))
#define sortam(x,comp) sort(all(x),comp)
#define sortd(x) sort(x.rbegin(),x.rend())
#define sf(x) scanf("%d", &x);
#define sf2(x, y) scanf("%d %d", &x, &y);
#define sf3(x, y, z) scanf("%d %d %d", &x, &y, &z);
#define sfll(x) scanf("%I64d", &x);
#define sfll2(x, y) scanf("%I64d %I64d", &x, &y);
#define sfll3(x, y, z) scanf("%I64d %I64d %I64d", &x, &y, &z);
#define sfd(x) scanf("%f", &x);
#define pr(x) printf("%d ", x);

typedef long long ll;
using namespace std;

vector<vector<int> >g;
vector<ll>vals;
vector<bool>vis;
pair<ll, ll>solve(int i) {
	vis[i] = 1;
	pair<ll, ll>ret(0LL,0LL), tmp;
	for(int j = 0; j < g[i].size(); j++) {
		if(!vis[g[i][j]]) {
			tmp = solve(g[i][j]);
			ret.first = max(ret.first, tmp.first);
			ret.second = max(ret.second, tmp.second);
		}
	}

	vals[i] += ret.second - ret.first;
	if(vals[i] < 0) ret.second += abs(vals[i]);
	else ret.first += vals[i];

	return ret;
}

int main() {
	int n;
	while(cin >> n) {
		g.clear();
		g.resize(n);
		vis.assign(n, 0);
		for(int i = 0; i < n - 1; i++) {
			int a, b;
			sf2(a, b);
			g[a - 1].push_back(b - 1);
			g[b - 1].push_back(a - 1);
		}

		vals.resize(n);
		for(int i = 0; i < n; scanf("%I64d", &vals[i++]));

		pair<ll, ll>res = solve(0);
		cout << res.first + res.second << endl;
	}
	return 0;
}