#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define LOG1(a)			  cerr<< #a << " = " << (a) << "\n"
#define LOG2(a, b)		  cerr<< #a << " = " << (a) << ", " << #b << " = " << (b) << "\n"
#define endl "\n"

typedef long long int ll;
typedef pair<int, int> pii;
typedef vector<pii> vii;
typedef vector<int> vi;

const int inf = 1e9;
const int MOD = 1e9 + 7;
const int nax = 1000000 + 10;

int n, m, fen[nax];
string s;
set<int> set1[256];
int MAXN = 2e5;

void update(int k, int val)
{
    while(k <= MAXN) fen[k] += val, k += (k & -k);
}
int sum(int k)
{
    int ans = 0;
    while(k) ans += fen[k], k -= (k & -k);
    return ans;
}
int givemeindex(int index)
{
    int lo = index, hi = n;
    while(hi - lo > 1)
    {
        int mid = (hi + lo) / 2;
        int ans = sum(mid);
        if(ans < index) lo = mid;
        else hi = mid;
    }
    int ans = sum(lo);
    if(ans == index) return lo;
    else return lo + 1;
}
int main()
{
    ios::sync_with_stdio(0);
    cin >> n >> m;
    cin >> s;
    s = "#" + s;
    for(int i = 1; i <= n; i++) set1[s[i]].insert(i), update(i, 1);
    while(m--)
    {
        int l, r;
        char ch;
        cin >> l >> r >> ch;
        l = givemeindex(l);
        r = givemeindex(r);
        set<int>::iterator itr = set1[ch].lower_bound(l);
        set<int> set2;
        while(itr != set1[ch].end() && *itr <= r) set2.insert(*itr), itr++;
        for(auto x: set2) set1[ch].erase(x), update(x, -1);
    }
    vi left;
    for(int i = 0; i <= 255; i++)
    {
        for(auto x: set1[i]) left.pb(x);
    }
    sort(left.begin(), left.end());
    for(auto x: left) cout << s[x];
    return 0;
}
