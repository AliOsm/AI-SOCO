#include <cstdio>
#include <cstdint>
#include <array>
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <string>
#include <queue>
#include <stack>
#include <cstring>
#include <iterator>
#include <cmath>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <chrono>
#include <cassert>
#include <memory>
#include <utility>
#include <cstddef>
#include <iterator>

#pragma comment(linker, "/stack:20000000")

using namespace std;
using mt = int32_t;
using fl = double;

template<typename T>
constexpr mt infValue = std::numeric_limits<T>::max() - 1000;
template<typename T>
constexpr mt maxValue = std::is_same<T, int>::value ? 1000000007 : 1000000000000000001ll;

#define rep(a, b, i) for(mt i = a; i < (b); ++i)
#define repe(a, b, i) for(mt i = a; i <= (b); ++i)
#define repd(a, b, i) for(mt i = a; i > (b); --i)
#define repde(a, b, i) for(mt i = a; i >= (b); --i)

constexpr mt INF = infValue<mt>;
constexpr int64_t MOD = 1000000007ll;
constexpr double EPS = 1e-6;
constexpr mt MAX = maxValue<mt>;
using pr = pair<mt, mt>;

constexpr auto N = 200011;
constexpr auto K = 6;
constexpr auto P = 19;
constexpr auto M = 200111;

mt n;
pr a[N];
mt answ[N], ba;
mt p[N], c[N];

void make_set(mt v) {
	p[v] = v;
	c[v] = 1;
}

mt find_set(mt v) {
	if (p[v] == v) return v;
	return p[v] = find_set(p[v]);
}

mt merge_set(mt u, mt v) {
	if (!p[u] && !p[v]) return 0;
	if (!p[u]) return c[v];
	if (!p[v]) return c[u];

	u = find_set(u);
	v = find_set(v);
	if (u != v) {
		if (c[u] < c[v]) swap(u, v);
		p[v] = u;
		c[u] += c[v];
		return c[u];
	}
	return c[u];
}

int main(void) {
#ifdef _DEBUG
	freopen("in.txt", "r", stdin);
#endif
	scanf("%d", &n);
	repe(1, n, i) {
		scanf("%d", &a[i].first);
		a[i].second = i;
	}
	sort(a + 1, a + n + 1, greater<pr>());
	repe(1, n, i) {
		mt ta = 1;
		mt j = a[i].second;
		make_set(j);
		ta = max(ta, merge_set(j, j + 1));
		ta = max(ta, merge_set(j - 1, j));

		while (ta > ba) answ[++ba] = a[i].first;
	}
	repe(1, n, i) printf("%d ", answ[i]);
	putc('\n', stdout);

	return 0;
}