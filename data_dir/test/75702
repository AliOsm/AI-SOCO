#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 2e5 + 2;
int a, b, c, n, ans = inf;
int xa[N];
int xb[N];
int xc[N];
int p[N];

int pre[N];
int suf[N];

void input() {
    cin >> a >> b >> c;
    n = a + b + c;
    for(int i = 0; i < a; ++i) {
        cin >> xa[i];
        p[xa[i]] = 1;
    }
    for(int i = 0; i < b; ++i) {
        cin >> xb[i];
        p[xb[i]] = 2;
    }
    for(int i = 0; i < c; ++i) {
        cin >> xc[i];
        p[xc[i]] = 3;
    }
    sort(xa, xa + a);
    sort(xb, xb + b);
    sort(xc, xc + c);
}

void solve() {
    for(int i = n + 1, mid = 0; i >= 1; --i) {
        int lower = lb(xc, xc + c, i) - xc;
        if(p[i] == 2) {
            mid++;
        }
        suf[i] = lower + mid;
    }
    for(int i = 0, mid = 0; i <= n; ++i) {
        int greater = xa - ub(xa, xa + a, i) + a;
        if(p[i] == 2) {
            mid++;
        }
        pre[i] = greater + mid;
    }
    for(int i = 1; i <= n; ++i) {
        pre[i] = min(pre[i], pre[i - 1]);
    }
    for(int i = n; i >= 0; --i) {
        suf[i] = min(suf[i], suf[i + 1]);
    }
    for(int i = 0; i <= n; ++i) {
        ans = min(ans, pre[i] + suf[i + 1]);
    }
    cout << ans << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
