#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <map>
#include <queue>
#include <set>
#include <iomanip>
#include <unordered_set>

using namespace std;
using ll = long long;
const ll mod = 1e9 + 7;

int main() {
    ios_base::sync_with_stdio(false);
    int n, m, c = 0, u = 0, a;
    cin >> n >> m;
    unordered_map<int, int> p, s;
    unordered_map<int, vector<int>> ps, ss;
    vector<pair<int, vector<int>>> sss;
    p.reserve(5*n);
    ps.reserve(5*n);
    for (int i = 0; i < n; ++i) {
        cin >> a;
        ++p[a];
        ps[a].push_back(i);
    }
    s.reserve(5*m);
    ss.reserve(5*m);
    for (int i = 0; i < m; ++i) {
        cin >> a;
        ++s[a];
        ss[a].push_back(i);
    }
    sss.reserve(ss.size());
    for (const auto& ssi: ss) {
        sss.emplace_back(ssi.first, ssi.second);
    }
    int level = 0;
    vector<int> to(n);
    vector<int> levels(m);
    while (true) {
        bool left = true;
        for (auto& si: sss) {
            if (si.second.size() == 0) continue;
            int value = si.first;
            int sovp = 0;
            auto it = p.find(value);
            if (it != p.end()) {
                sovp = min(si.second.size(), static_cast<size_t>(it->second));
                c += sovp;
                u += level * sovp;
                int j = si.second.size() - 1;
                for (int i = it->second - 1; i >= 0 && j >=0 ; --i, --j) {
                    to[ps[value][i]] = si.second[j] + 1;
                    levels[si.second[j]] = level;
                    si.second.pop_back();
                }
                it->second -= sovp;
                if (it->second == 0) p.erase(value);
            }
            if (value > 1) {
                si.first = (si.first + 1) / 2;
                left = false;
            } else {
                si.second.clear();
            }
        }
        if (left) break;
        ++level;
    }
    cout << c << ' ' << u << '\n';
    for (int i = 0; i < m; ++i) {
        cout << levels[i] << ' ';
    }
    cout << '\n';
    for (int i = 0; i < n; ++i) {
        cout << to[i] << ' ';
    }
    return 0;
}