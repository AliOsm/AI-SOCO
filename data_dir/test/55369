//ITNOG
#include<bits/stdc++.h>

using namespace std;
const int maxN = 100*1000 + 5;
int a[maxN];
int mini[4 * maxN];
int maxi[4 * maxN];
void make(int s, int e, int ind)
{
    if(e - s == 1)
    {
	  mini[ind] = maxi[ind] = a[s];
	  return;
    }

    int mid = (s + e) >> 1;
    make(s, mid, 2 * ind + 0);
    make(mid, e, 2 * ind + 1);

    maxi[ind] = max(maxi[2 * ind], maxi[2 * ind + 1]);
    mini[ind] = min(mini[2 * ind], mini[2 * ind + 1]);
}

int get_min(int l, int r, int s, int e, int ind)
{
    if(l >= e || r <= s) return maxN * 100;
    if(l <= s && e <= r) return mini[ind];

    int mid = (s + e) >> 1;
    int x = get_min(l, r, s, mid, 2 * ind + 0);
    int y = get_min(l, r, mid, e, 2 * ind + 1);

    return min(x, y);
}

int get_max(int l, int r, int s, int e, int ind)
{
    if(l >= e || r <= s) return 0;
    if(l <= s && e <= r) return maxi[ind];

    int mid = (s + e) >> 1;
    int x = get_max(l, r, s, mid, 2 * ind + 0);
    int y = get_max(l, r, mid, e, 2 * ind + 1);

    return max(x, y);
}

int n, k;
int check(int t)
{
    int cnt = 0;
    for(int i = 0; i <= n - t; i ++)
    {
	  int mi = get_min(i, i + t, 0, n, 1);
	  int mx = get_max(i, i + t, 0, n, 1);

	  if(mx - mi <= k) cnt ++;
    }
    return cnt;
}
main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    cin >> n >> k;
    for(int i = 0; i < n; i ++)
	  cin >> a[i];
    make(0, n, 1);
    
    int lo = 1, hi = n + 1;
    while(hi - lo > 1)
    {
	  int mid = (hi + lo) >> 1;
	  if(check(mid)) lo = mid;
	  else hi = mid;
    }
    
    cout << lo << ' ' << check(lo) << endl;

    for(int i = 0; i <= n - lo; i ++)
    {
	  int mi = get_min(i, i + lo, 0, n, 1);
	  int mx = get_max(i, i + lo, 0, n, 1);

	  if(mx - mi <= k) { cout << i + 1 << ' ' << i + lo << endl; }
    }
    return 0;
}
