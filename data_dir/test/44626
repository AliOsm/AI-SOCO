#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <algorithm>
#include <functional>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#define MAXN 222222
#define ll long long
using namespace std;



vector<int> edges[MAXN+2];
set<int> pdivs[MAXN+2];

map<int,int> maxx[MAXN+2];

void GetMax(int par,int u,int* ans) {

    for(int v : edges[u]) {
        if (v == par)
            continue;
        GetMax(u,v,ans);
    }

    
    
    for(int p : pdivs[u]) {
        int maxlen = 1;
        set<pair<int,int>> largests;
        for(int v : edges[u]) {
            if (v == par)
                continue;
            if (pdivs[v].find(p) != pdivs[v].end()) {
                maxlen = max(maxlen, maxx[v][p]+1);
                largests.insert({maxx[v][p],v});
                while(largests.size() > 2)
                    largests.erase(largests.begin());
            }
        }
        maxx[u][p]=maxlen;
        *ans = max(*ans, maxlen);
        
        if (largests.size() == 2) {
            *ans = max(*ans, 1+largests.begin()->first+largests.rbegin()->first);
        }
    }
    
    
}



void GetPrimes(int n,set<int>* pdiv) {
    
    for(int x=2;x*x<=n;x++) {
        if (n%x==0) {
            pdiv->insert(x);
            while(n%x==0) {
                n/=x;
            }
        }
    }
    
    if (n > 1)
        pdiv->insert(n);
}




int main() {
    int n;
    cin>>n;
    for(int i=1;i<=n;i++) {
        int x;
        cin>>x;
        GetPrimes(x,&pdivs[i]);
        
    }
    for(int i=1;i<=n-1;i++) {
        int x,y;
        cin>>x>>y;
        edges[x].push_back(y);
        edges[y].push_back(x);
    }

    int ans=0;
    GetMax(-1,1,&ans);
    cout << ans << endl;
    
    
    
}
