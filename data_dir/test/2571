#include <iostream>
#include <algorithm>
#include <cstdio>
#include <vector>
#include <set>

using namespace std;

typedef long long ll;

vector < int > g[200500];
ll n, a[200500];
ll dp[200500][2];
ll ans = 0, p;

void dfs (int v)
{
    for (int i = 0; i < g[v].size(); i ++)
        dfs ( g[v][i] );
    ll t1[2] = {0, 0}, t2[2] = {0, (int) -1e9};
    for (int i = 0; i < g[v].size(); i ++)
    {
        for (int j = 0; j < 2; j ++)
            t1[j] = t2[j];
        t2[0] = t2[1] = 0;
        int to = g[v][i];
        for (int j = 0; j < 2; j ++)
            for (int k = 0; k < 2; k ++)
            {
                int tt = (j + k) % 2;
                t2[ tt ] = max (t2[ tt ], t1[j] + dp[to][k]);
            }
    }
    dp[v][0] = t2[0];
    dp[v][1] = max (t2[1], 1ll * t2[0] + a[v]);
}

int main()
{
//    freopen ("input.txt", "r", stdin);
    scanf ("%I64d", &n);
    for (int i = 1; i <= n; i ++)
    {
        scanf ("%I64d%I64d", &p, &a[i]);
        if (i > 1) g[ p ].push_back( i );
    }
    dfs ( 1 );
    for (int i = 1; i <= n; i ++)
        for (int j = 0; j < 2; j ++)
            ans = max (ans, dp[i][j]);

    printf ("%I64d", ans);
    return 0;
}
