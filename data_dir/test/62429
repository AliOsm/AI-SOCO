#include <stdio.h>

#include <string.h>
#include <vector>
#include <map>
#include <stack>
#include <algorithm>
#include <string>
#include <iostream>
using namespace std;

#define ll long long
#define sf scanf
#define pf printf
#define pb push_back
#define clr(x) memset(x,0,sizeof(x))
#define fr(x,a,b) for(int x=a; x<b;++x)


char g[1000][1000];
int d[8][2] = { {0,1}, {1,1}, {1,0}, {1,-1}, {0,-1}, {-1,-1}, {-1,0}, {-1,1} };

int n,m;

int p[500][500][8];

int check( int x, int y )
{
        if( x < 0 ||  x >= n || y < 0 || y >= m ) return 1;
        if( g[x][y] == '1' ) return 1;
        return 0;
}


void init()
{
    fr(i,0,n)
    {
        fr(j,0,m)
        {
            fr(k,0,8)
            {
                int x = i, y = j;
                int ret = 0;
                while( 1 )
                {
                    if(check( x, y ) == false)
                    {
                        ++ret;
                        x += d[k][0];
                        y += d[k][1];
                    }
                    else break;
                }
                p[i][j][k] = max( ret-1, 0 );
            }
        }
    }
}

int check(int x1,int y1, int x2, int y2 )
{
    if( x1 == x2 )
    {
        if( y1 < y2 )
        {
            int k = 0;
            if( y2 - y1 <= p[x1][y1][k] ) return 1;
        }
        else
        {
            int k = 4;
            if( y1 - y2 <= p[x1][y1][k] ) return 1;
        }
    }
    else if( y1 == y2 )
    {
        if( x1 < x2 )
        {
            int k = 2;
            if( x2 - x1 <= p[x1][y1][k] ) return 1;
        }
        else
        {
            int k = 6;
            if( x1 - x2 <= p[x1][y1][k] ) return 1;
        }
    }
    else
    {
        if( x1 > x2 )
        {
            swap( x1, x2 );
            swap( y1, y2 );
        }

        if( y1 < y2 )
        {
            int k = 1;
            if( y2 - y1 <= p[x1][y1][k] ) return 1;
        }
        else
        {
            int k = 3;
            if( y1 - y2 <= p[x1][y1][k] ) return 1;
        }
    }
    return 0;

    /*
    if( g[x1][y1] == '1' ) return 0;
    int flag1 = x2 - x1;
    int flag2 = y2 - y1;

    int x = 0, y = 0;
    if( flag1 < 0 ) x = -1;
    else if( flag1 > 0 ) x = 1;
    else x = 0;

    if( flag2 < 0 ) y = -1;
    else if( flag2 > 0 ) y = 1;
    else y = 0;

    if( x == 0 && y == 0 )
    {
        return 1;
    }


    return check( x1 + x, y1 + y, x2, y2 );
    */
    /*

    if( x1 == x2 && y1 == y2 ) return 0;
    if( x1 == x2 )
    {
        if( y1 > y2 ) swap( y1,y2 );
        for( int i = y1; i <= y2; ++i )
        {
            if( g[x1][i] == '1' ) return 0;
        }
    }
    else if( y1 == y2 )
    {
        if( x1 > x2 ) swap( x1,x2 );
        for( int i = x1; i <= x2; ++i )
        {
            if( g[i][y1] == '1'  ) return 0;
        }
    }
    else
    {
        if( x1 > x2 )
        {
            swap( x1,x2 );
            swap( y1, y2 );
        }

        if( y1 < y2 )
        {
            int x = x1, y = y1;
            for( int i = y1; i <= y2; ++i )
            {
                if( g[x][y] == '1' ) return 0;
            }
        }
        else
        {
        }
    }

    return 1;
    */
}

int ft( int x, int y, int dir1, int dir2 )
{
    int rx1 = x, ry1 = y;
    int rx2 = x, ry2 = y;

    int ret = 0;
    while( 1 )
    {
        if( check( rx1, ry1 ) ) break;
        if( check( rx2, ry2) ) break;
        if( check(rx1,ry1,rx2,ry2) && !( rx1 == rx2 && ry1 == ry2 ) )
        {
            ++ret;
        }
        rx1 += d[dir1][0];
        ry1 += d[dir1][1];

        rx2 += d[dir2][0];
        ry2 += d[dir2][1];
    }

   // pf("x = %d y = %d dir1 %d dir2 %d ret %d\n",x,y,dir1,dir2,ret);

    return ret;
}

int main()
{
    sf("%d%d",&n,&m);
    fr(i,0,n)
    {
        cin>>g[i];
    }

    init();

    int ans = 0;
    int ret = 0;
    fr(i,0,n)
    {
        fr(j,0,m)
        {
            for( int k = 0; k < 8; k+=2 )
            {
                ans += ft(i,j,k,(k+2)%8);
                ans += ft(i,j,(k+1)%8,(k+3)%8);
            }
        }
    }

    pf("%d\n",ans);

}