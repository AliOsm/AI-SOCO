/* In the name of Allah */
#include<bits/stdc++.h>
using namespace std;

const int N = 5e3 + 5, P = 1e9 + 7;
int n, nxt[N][N], dp[N][N], mn[N][N];
string s;

inline bool cmp(int i, int j, int k) {
	return min(i -= k, j -= k) >= 0 && nxt[i][j] < i + k && s[nxt[i][j]] < s[nxt[j][i]];
}

inline void readInput() {
	cin >> s;
	n = s.size();
}

inline void solve() {
	dp[0][0] = 1;
	memset(mn, 63, sizeof mn);
	for (int i = 0; i <= n; i++)
		nxt[i][n] = n;
	for (int i = n - 1; ~i; i--)
		for (int j = 0; j < n; j++)
			nxt[i][j] = (s[i] ^ s[j]? i: nxt[i + 1][j + 1]);
	for (int i = mn[0][0] = 0; i <= n; i++)
		for (int j = 1; j <= n; j++) {
			int nxt = j - cmp(i, i - j, j);
			if (i >= j && s[i - j] ^ '0') {
				dp[i][j] = dp[i - j][nxt];
				mn[i][j] = mn[i - j][nxt] + 1;
			}
			(dp[i][j] += dp[i][j - 1]) %= P;
			mn[i][j] = min(mn[i][j], mn[i][j - 1]);
		}
}

inline void writeOutput() {
	int ans = P;
	bool ok = false;
	for (int i = 0, cur = 0, t = 1; i <= n; i++) {
		if (dp[n][i]) {
			if (i > 30 && ok)
				break;
			ans = min(ans, (mn[n][i] + cur) % P);
			ok = true;
		}
		(cur += 1LL * (s[n - i - 1] - '0') * t % P) %= P;
		(t <<= 1) %= P;
	}
	cout << dp[n][n] << endl << ans << endl;
}

int main() {
	ios:: sync_with_stdio(0), cin.tie(0), cout.tie(0);
	readInput(), solve(), writeOutput();
	return 0;
}
