#include <bits/stdc++.h>
using namespace std;
#define F first
#define S second
#define ii pair < int , int >
const int N = 200100 , L = 18;
int n , m , pa[N][L] , dep[N] , mx[N][L], p[N] ;
bool used[N] ;
vector < pair < ii , ii > > edge ;
map < ii , int > mp ;
vector < int > adj[N];
long long ANS [N];
int Par(int i){ return p[i]=( i==p[i] )?i:Par(p[i]); }
bool same(int i,int j){ return Par(i)==Par(j); }

void mrg(int i,int j){
if(same(i,j))return;
i=Par(i);j=Par(j);
if( rand()&1 )swap(i,j);
p[i]=p[j];
}


void dfs(int u,int par)
{

    pa[u][0]=par;
    dep[u]=1+dep[par];
    mx[u][0] = mp[{ max(u,par) , min (u,par) }] ;
    for(auto v:adj[u])
        if( v!=par )
        {
            dfs(v,u);
        }

}

/*int jump(int u,int k)
{

    for(int i=0; i<L; i++)
        if( k&(1<<i) )
            u=pa[u][i];

    return u;
}
*/

int get_mx ( int u , int v ){

    int ret = 0 ;
    if  ( u == v ) return ret ;
    if(dep[u]<dep[v])swap(u,v);

    int dif = dep[u]-dep[v];
    //u=jump(u,dif);

     for(int i=0; i<L; i++)
        if( dif&(1<<i) ){
           ret = max ( ret , mx[u][i]);
            u=pa[u][i];
        }

    if( u == v )return ret;

    for(int i=L-1; i>=0; i--)
        if( pa[u][i]!=pa[v][i] )
        {
            ret = max ( ret , mx[u][i]);
            ret = max ( ret , mx[v][i]);
            u=pa[u][i];
            v=pa[v][i];
        }
    return ret = max ( ret , max ( mx[u][0] , mx[v][0] )) ;
}
int main()
{

     scanf("%d %d",&n,&m);
    for(int i=1; i<= m; i++)
    {
        int a , b , c ;
        scanf("%d %d %d",&a,&b,&c);
        mp[{max(a,b),min(a,b)}] = c ;
        edge.push_back({{c,i},{a,b}});
     }
     for  (int i = 1; i <= n; i++ ) p[i]= i ;
    sort( edge.begin() , edge.end() );
     long long all = 0;
     for ( auto x : edge ){
        int c = x.F.F;
        int u = x.S.F ;
        int v = x.S.S ;
        int id = x.F.S;
         if ( same(u,v)) continue ;
         adj[u].push_back(v);
         adj[v].push_back(u);
         all += c ;
         used[id] = 1 ;
         mrg(u,v);
        }
    dfs(1,0);

    for(int j=1; j<L; j++)
        for(int i=1; i<=n; i++){
            pa[i][j]=pa[ pa[i][j-1] ][j-1];
            mx[i][j] = max ( mx[i][j-1] , mx[pa[i][j-1]][j-1] );
        }
      /*  cerr << get_mx(1,3) << "\n"
             << get_mx(2,5) << "\n"
             << get_mx(4,5) << "\n"
             << get_mx(2,3) << "\n"
             << get_mx(2,4) << "\n"
             << get_mx(3,5) << "\n";*/
   for ( auto x : edge  ){
        int c = x.F.F;
        int u = x.S.F ;
        int v = x.S.S ;
        int id = x.F.S;

    if ( used[id] ) ANS[id] = all;
    else {
         int cost =  mp[{max(u,v),min(u,v)}];
        ANS[id] = all+(cost-get_mx(u,v));
    }
   }
   for ( int i = 1; i <= m; i++ )
    printf("%lld\n",ANS[i]);
    return 0;
}
