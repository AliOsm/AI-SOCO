#include<bits/stdc++.h>

#define F first
#define S second
#define int long long
#define ull unsigned long long
#define pb push_back

using namespace std;
int x[20], y[20];
int t[400002][21];
int a[100001][21];
int b[200000];
int d[400002][21];
void push(int v, int tl, int tr, int h){
    if (tr == tl) return;
    if (d[v][h] == 1){
        int mid = (tl + tr) / 2;
        t[v + v][h] = mid - tl + 1 - t[v + v][h];
        t[v + v + 1][h] = tr - mid - t[v + v + 1][h];
        d[v + v][h] ^= 1;
        d[v + v + 1][h] ^= 1;
        d[v][h] = 0;
    }
}
void build(int a[100001][21], int v, int tl, int tr){
    if (tl == tr)
    for (int i = 0; i < 21; i++){
        t[v][i] = a[tl][i];
    } else{
        int mid = (tl + tr) / 2;
        build(a, v + v, tl, mid);
        build(a, v + v + 1, mid + 1, tr);
        for (int i = 0; i < 21; i++){
            t[v][i] = t[v + v][i] + t[v + v + 1][i];
        }
    }
}
int query(int v, int tl, int tr, int l, int r){
    if (l > r) return 0;
    if (l == tl && r == tr){
        int x = 0;
        for (int i = 0; i < 21; i++){
            x += t[v][i] * (1LL << i);
        }
        return x;
    }
    for (int i = 0; i < 21; i++)
        push(v, tl, tr, i);
    int mid = (tl + tr) / 2;
    return query(v + v, tl, mid, l, min(r, mid)) + query(v + v + 1, mid + 1, tr, max(l, mid + 1), r);
}
void update(int v, int tl, int tr, int l, int r, int h){
    if (l > r) return;
    if (l == tl && r == tr){
        t[v][h] = tr - tl + 1 - t[v][h];
        d[v][h] ^= 1;
        return;
    }
    push(v, tl, tr, h);
    int mid = (tr + tl) / 2;
    update(v + v, tl, mid, l, min(r, mid), h);
    update(v + v + 1, mid + 1, tr, max(mid + 1, l), r, h);
    t[v][h] = t[v + v][h] + t[v + v + 1][h];
}
main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    int n;
    cin >> n;
    for (int i = 0; i < n; i++){
        int x;
        cin >> x;
        b[i] = x;
        for (int j = 0; j < 21; j++){
            a[i][j] = x % 2;
            x /= 2;
        }
    }
    build(a, 1, 0, n - 1);
    int q;
    cin >> q;
    while(q--){
        int t;
        cin >> t;
        if (t == 1){
            int l, r;
            cin >> l >> r;
            --l;
            --r;
            cout << query(1, 0, n - 1, l, r) << endl;
        } else{
            int l, r, x;
            cin >> l >> r >> x;
            --l;
            --r;
            for (int i = 0; i < 21; i++){
                if (x & 1)
                    update(1, 0, n - 1, l, r, i);
                x >>= 1;
            }
        }
    }
}
