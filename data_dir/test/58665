#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
vector<int> E[101010];
int a[101010];
int done[101010];
long long b[101010];
long long ans;
long long gcd(long long x, long long y) {
	if (y == 0) return x;
	return gcd(y, x%y);
}
long long lcm(long long x, long long y) {
	if (gcd(x, y) == 0ll) return 0;
	return x * y / gcd(x, y);
}
long long rec(int v) {
	done[v] = 1;
	if (a[v]) {
		b[v] = 1;
		return a[v];
	}
	int k = 0;
	long long sum = 0, m = 1001001001001001001ll, t, B = 1;
	for (int i = 0; i < E[v].size(); i++) {
		int u = E[v][i];
		if (done[u]) continue;
		t = rec(u);
		m = min(t, m);
		sum += t;
		B = lcm(b[u], B);
		if (B > m) {
			B = 0;
		}
		++k;
	}
	b[v] = B * k;
	if (B) {
		m = m / B * B;
	} else {
		m = 0;
	}
	ans += sum - m * k;
	return m * k;
}
int main() {
	int N;
	cin >> N;
	for (int i = 0; i < N; i++) {
		cin >> a[i];
	}
	for (int i = 0; i < N-1; i++) {
		int s, t;
		cin >> s >> t;
		--s; --t;
		E[s].push_back(t);
		E[t].push_back(s);
	}
	rec(0);
	cout << ans << endl;
	return 0;
}
