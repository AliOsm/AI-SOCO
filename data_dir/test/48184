#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define MAX ((ll)(2e15))
#define pi (2*acos(0))
#define mp make_pair
#define M ((ll)(1e9 + 7))
#define xx first
#define yy second
#define NN ((ll)(1e6+2))
#define N ((ll)(3e3+5))
#define eps 0
#define log 15
#define pb push_back
#define MOD 998244353


using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef unsigned long long lu;

typedef tree < ll,  null_type,  less < ll >,  rb_tree_tag,  tree_order_statistics_node_update > o_set;



///kmp
int prefx[N+N];
void kmp(char s[]){
    prefx[0] = -1;
    int now;
    for(int i = 1; s[i]!='\0'; i++){
        now = prefx[i-1];
        while(now!=-1 && s[i]!=s[now+1]) now = prefx[now];
        if(s[i]==s[now+1]) prefx[i] = now+1;
        else prefx[i] = -1;
    }
}


char a[N+N], b[N+N], in[N][N], tar[N][N];

int m[N], pos[N];


int main()
{
    int n;
    scanf("%d",&n);
    for(int i = 0; i<n; i++){
        scanf("%s",in[i]);
        m[i] = strlen(in[i]);
    }

    a[0] = b[0] = '\0';

    int len = 0;

    for(int i = 0; i<n; i++){
        scanf("%s",tar[i]);

    }

    for(int i = 0; i<n; i++){
        bool flag = 0;
        for(int j = 0; j<m[i]; j++){
            if(tar[i][j]!=in[i][j]){
                flag = 1;
                for(int k = m[i]-1; k>=0; k--){
                    if(tar[i][k]!=in[i][k]){
                        len = k-j+1;
                        a[len] = b[len] = '\0';
                        for(int h = 0; j<=k; j++, h++){
                            a[h] = in[i][j];
                            b[h] = tar[i][j];
                        }
                        break;
                    }
                }
                break;
            }
        }
        if(flag) break;
    }
    memset(pos,-1,sizeof pos);
    int mn = 3005;
    for(int i = 0; i<n; i++){
        for(int j = 0; j<m[i]; j++){
            if(tar[i][j]!=in[i][j]){
                pos[i] = j;
                mn = min(mn,pos[i]);
                for(int k = m[i]-1; k>=0; k--){
                    if(tar[i][k]!=in[i][k]){
                        if(k-j+1!=len){
                            printf("NO\n");
                            return 0;
                        }
                        for(int h = 0; j<=k; j++, h++){
                            if(a[h]!=in[i][j] || b[h]!=tar[i][j]){
                                printf("NO\n");
                                return 0;
                            }
                        }
                        break;
                    }
                }
                break;
            }
        }
    }


    while(mn>0){
        char c = '#';
        for(int i = 0; i<n; i++){
            if(pos[i]==-1) continue;
            if(c=='#') c = in[i][pos[i]-1];
            else if(c!=in[i][pos[i]-1]){
                c = '#';
                break;
            }
        }

        if(c=='#') break;
        for(int i = 0; i<n; i++){
            if(pos[i]>0) pos[i]--;
        }
        mn--;
        len++;
    }

    while(1){
        char c = '#';
        for(int i = 0; i<n; i++){
            if(pos[i]==-1) continue;
            if(in[i][pos[i]+len]=='\0'){
                c = '#';
                break;
            }
            if(c=='#') c = in[i][pos[i]+len];
            else if(c!=in[i][pos[i]+len]){
                c = '#';
                break;
            }
        }
        if(c=='#') break;
        len++;
    }

    for(int i = 0; i<n; i++){
        if(pos[i]!=-1){
            for(int j = 0; j<len; j++){
                a[j] = in[i][j+pos[i]];
                b[j] = tar[i][j+pos[i]];
            }
            ///a[len] = b[len] = '\0';
            break;
        }
    }

    ///printf("%s\n%s\n",a,b);
    ///if(len==0) return -1;
    a[len] = b[len] = '#';
    for(int i = 0; i<n; i++){

        for(int j = 0; ; j++){
            a[len+j+1] = in[i][j];
            ///b[len+j+1] = tar[i][j];
            if(in[i][j]=='\0') break;
        }

        ///printf("%d\n%s\n%s\n",i,a,b);

        kmp(a);
        int in_id = -1;
        for(int j = 0; in[i][j]!='\0'; j++){
            if(prefx[len+1+j]==len-1){
                if(pos[i]==-1 || pos[i]+len-1!=j){
                    printf("NO\n");
                    return 0;
                }
                break;
            }
        }
        ///kmp(b);

        /*if(in_id!=-1 && prefx[len+1+in_id]!=len-1){
            printf("NO\n");
            return 0;
        }

        for(int j = 0; j<in_id-len+1; j++){
            if(in[i][j]!=tar[i][j]){
                printf("NO\n");
                return 0;
            }
        }

        for(int j = in_id+1; in[i][j]!='\0'; j++){
            if(in[i][j]!=tar[i][j]){
                printf("NO\n");
                return 0;
            }
        }*/
    }

    printf("YES\n");
    a[len] = b[len] = '\0';
    printf("%s\n%s\n",a,b);
    return 0;
}
