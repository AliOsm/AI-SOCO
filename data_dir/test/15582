#include <iostream>
#include <string>
#include <ctime>
#include <cstring>
#include <deque>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#define ll long long
#define fname ""
#define F first
#define S second
#define mp make_pair
#define pb push_back 

using namespace std;

const int N = 3005;

const int inf = 1e9;

const int M = 1e9;

int n, m, u, v, mn[2], result, d[N][N], s[2], t[2], l[2];             

vector < int > g[N];

void bfs (int st)
{
    queue < int > q;
    for (int i = 1;i <= n;i ++)
        d[st][i] = inf;
    d[st][st] = 0;
    q.push (st);
    while (q.size ())
    {
        int u = q.front ();
        q.pop ();
        for (int i = 0;i < g[u].size ();i ++)
        {
            int to = g[u][i];
            if (d[st][u] + 1 < d[st][to])
            {
                d[st][to] = d[st][u] + 1;
                q.push (to);
            }
        }
    }
}

int main ()
{
//  freopen (fname".in", "r", stdin);
//  freopen (fname".out", "w", stdout);
    scanf ("%d%d", &n, &m);
    result = m + 1;
    for (int i = 0;i < m;i ++)
    {
        scanf ("%d%d", &u, &v);
        g[u].pb (v);
        g[v].pb (u);
    }
    for (int i = 1;i <= n;i ++)
        bfs (i);
    int sum = 0;
    bool can = 1;
    for (int i = 0;i < 2;i ++)
    {
        scanf ("%d%d%d", &s[i], &t[i], &l[i]);
        if (d[s[i]][t[i]] > l[i])
            can = 0;
        sum += d[s[i]][t[i]];
    }
    if (can)
        result = min (result, sum);
    for (int i = 1;i <= n;i ++) 
        for (int j = 1;j <= n;j ++)
        {
            bool can = 1;
            int sum = d[i][j];
            for (int k = 0;k < 2;k ++)
            {
                mn[k] = min (d[s[k]][i] + d[t[k]][j], d[s[k]][j] + d[t[k]][i]);
                if (mn[k] + d[i][j] > l[k])
                    can = 0;
                sum += mn[k];
            }
            if (can)
                result = min (result, sum);
        }
    printf ("%d", m - result);
    return 0;
}       