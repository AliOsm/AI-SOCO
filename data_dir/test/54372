#include <algorithm>
#include <iostream>
#include <valarray>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <numeric>
#include <complex>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <ctime>
#include <cmath>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <ext/algorithm>

using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i)
#define error(x) cout << #x << " = " << (x) << endl;
#define all(n) (n).begin(), (n).end()
#define Size(n) ((int)(n).size())
#define mk make_pair
#define pb push_back
#define F first
#define S second
#define X real()
#define Y imag()

typedef long long ll;
typedef pair<ll, ll> pii;
typedef pair<ll, ll> pll;
typedef complex<double> point;

template <class P, class Q> void smin(P &a, Q b) { if (b < a) a = b; } 
template <class P, class Q> void smax(P &a, Q b) { if (b > a) a = b; } 
template <class P, class Q> bool in(const P &a, const Q &b) { return a.find(b) != a.end(); }

const int MAXN = 55*1000;

int dp[121][MAXN];
pii par[121][MAXN], best;
int nx[26][MAXN], pr[26][MAXN];
string s;

inline void update(int len, int pos, int ans, pii p) {
	if (pos < 1 || ans >= Size(s)) return;
	if (ans < dp[len][pos]) {
		dp[len][pos] = ans;
		par[len][pos] = p;
		if (len <= 100) smax(best, pii(len, pos));
	}
}

int main() {
	memset(dp, -1, sizeof dp);
	FOR(i, 0, 26) FOR(j, 0, MAXN) pr[i][j] = -1, nx[i][j] = MAXN;

	cin >> s;
	s = "$"+s;

	FOR(i, 1, Size(s)) {
		FOR(j, 0, 26) pr[j][i] = pr[j][i-1];
		if (i > 1) pr[s[i-1]-'a'][i] = i-1;
	}

	for (int i = Size(s)-1; i >= 1; i--) {
		FOR(j, 0, 26) nx[j][i] = nx[j][i+1];
		if (i+1 < Size(s)) nx[s[i+1]-'a'][i] = i+1;
	}

	FOR(i, 0, 111) FOR(j, 0, MAXN) dp[i][j] = MAXN;
	FOR(i, 1, Size(s)) update(1, i, i, pii(0, s[i]-'a'));
	FOR(i, 1, Size(s)) if (nx[s[i]-'a'][i] < Size(s)) update(2, i, nx[s[i]-'a'][i], pii(0, s[i]-'a'));

	FOR(len, 1, 111) FOR(pos, 1, Size(s)) if (dp[len][pos] < Size(s)) FOR(ext, 0, 26) 
		update(len+2, pr[ext][pos], nx[ext][dp[len][pos]], mk(pos, ext));

	int len = best.F, pos = best.S;
	string s;
	string srev;
	while (len > 0) {
		char c = 'a'+par[len][pos].S;
		s += c;
		if (len > 1) srev += c;
		pos = par[len][pos].F;
		len -= 2;
	}
	reverse(all(srev));
	cout << s + srev << endl;
	return 0;
}

