#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
#include <unordered_map>
#include <unordered_set>

using namespace std;
void Emsawy(){
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);   // don't use scanf & printf
	cin.tie(0);
	cout.tie(0);
}

#define sz(v)			((int)((v).size()))
#define all(v)			((v).begin()), ((v).end())
#define allr(v)			((v).rbegin()), ((v).rend())
#define clr(v,d)		memset(v, d, sizeof(v))
#define sf(x)			scanf("%d", &x)
#define sf2(x,y)		scanf("%d %d", &x, &y)
#define sf3(x,y,z)		scanf("%d %d %d", &x, &y, &z)
#define sfll(x)			scanf("%I64d", &x)
#define sfll2(x,y)		scanf("%I64d %I64d", &x, &y)
#define sfll3(x,y,z)		scanf("%I64d %I64d %I64d", &x, &y, &z)
#define angle(a)		(atan2((a).imag(), (a).real()))
#define vec(a,b)		((b)-(a))
#define length(a)		(hypot((a).imag(), (a).real()))
#define dp(a,b)			((conj(a)*(b)).real()) // if zero prep
#define cp(a,b)			((conj(a)*(b)).imag()) // if zero parl
#define same(p1,p2)		(dp(vec(p1,p2),vec(p1,p2)) <= EPS)
#define rotate0(p,ang)		((p)*exp(Point(0,ang)))
#define rotateA(p,ang,about)	(rotate0(vec(about,p),ang)+about)
#define reflect0(v,m)		(conj((v)/(m))*(m))
#define normalize(a)		(a)/length(a)
#define lengthSqr(p)		dp(p,p)
#define pii			pair<int,int>
#define V			vector
#define MP			make_pair
#define X			real()
#define Y			imag()

typedef complex<double> 	point;
typedef long long ll;

const double PI = acos(-1.0);
const double EPS = 1e-10;
const ll mod = ll(1e9 + 7), oo = ll(1e9);


int dx[]{1, -1, 0, 0, 1, -1, 1, -1};
int dy[]{0, 0, 1, -1, 1, -1, -1, 1};

V<V<pii> > adj;
int n, m, k, t, c;

int main()
{
	Emsawy();

	while (cin >> n){
		V<char>v(n + 1);
		V<ll>D(n + 1), U(n + 1), d(n + 1), u(n + 1);
		for (int i = 1; i <= n; i++){
			cin >> v[i];
			if (v[i] == 'D'){
				d[i] = i;
				D[i] ++;
			}
			if (v[i] == 'U'){
				u[i] = n - i + 1;
				U[i] ++;
			}
			D[i] += D[i - 1];
			U[i] += U[i - 1];
			d[i] += d[i - 1];
			u[i] += u[i - 1];
		}

		V<ll>ans(n + 1);
		for (int i = 1; i <= n; i++){
			ll lu = U[i - 1] - U[0];
			ll rd = D[n] - D[i];
			ll needl, needr, end;
			if (lu == rd){
				needl = lu;
				needr = lu;
				if (v[i] == 'D') end = 0;
				else end = 1;
			}
			else if (lu > rd){
				if (v[i] == 'D'){
					needl = rd + 1;
					needr = rd;
					end = 1;
				}
				else{
					needl = rd;
					needr = rd;
					end = 1;
				}
			}
			else {
				if (v[i] == 'D'){
					needl = lu;
					needr = lu;
					end = 0;
				}
				else {
					needl = lu;
					needr = lu + 1;
					end = 0;
				}
			}
			int posl = i, posr = i;
			int s = 1, e = i;
			while (s <= e){
				int mid = (s + e) / 2;
				if (U[i - 1] - U[mid - 1] >= needl)
					s = mid + 1, posl = mid;
				else
					e = mid - 1;
			}
			s = i, e = n;
			while (s <= e){
				int mid = (s + e) / 2;
				if (D[mid] - D[i] >= needr)
					e = mid - 1, posr = mid;
				else
					s = mid + 1;
			}
			ans[i] += (d[posr] - d[i]) - (needr *1LL* i);
			ans[i] += (u[i - 1] - u[posl - 1]) - (needl *1LL* (n - i + 1));
			ans[i] *= 1LL * 2;
			ans[i] += (end ? n - i + 1 : i);
		}
		for (int i = 1; i <= n; i++)
			cout << ans[i] << " ";
		cout << endl;
	}
	return 0;
}