#include "bits/stdc++.h"
#include "ext/pb_ds/assoc_container.hpp"
#include "ext/pb_ds/tree_policy.hpp"
using namespace __gnu_pbds;
using namespace std;
typedef long long ll;
#define int long long
#define pb push_back
#define fi first
#define se second
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define all(x) x.begin(), x.end()
#define IO ios :: sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define pii pair<int,int>
#define sz(x) (int)x.size()
const int mod = 1e9 + 7;
// const int mod1 = 998244353;
typedef long double f80;
 
#ifndef LOCAL
#pragma GCC optimize ("O2")
#define endl '\n'
#endif
 
template<typename T>
using ordered_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
 
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){
    uniform_int_distribution<int> uid(l, r);
    return uid(rng);
}
 
ll pwr(ll a,ll b, ll mod){
    a %= mod;
    int ans = 1;
    while(b){
        if(b & 1) ans = (ans * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return ans;
}
 
string to_string(string s) {
  return '"' + s + '"';
}
 
string to_string(const char* s) {
  return to_string((string) s);
}
 
string to_string(bool b) {
  return (b ? "true" : "false");
}
 
template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
 
template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}
 
void debug_out() { cerr << endl; }
 
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}
 
#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

void debug1(int a[], int l,int r) {
	#ifdef LOCAL
		vector<int> temp(a + l, a + r + 1);
		debug(temp);
	#endif
}

const int N = 5e5 + 5;
int a[N];
pii cnt[N];
vector<pii> queries;
int ans[N];
int mul(int p,int q) {
	if(p <= (2e18 / q))
		return p * q;
	return 1e18;
}
ordered_set<int> order;
void solve(){
	int n, m, q;
	cin >> n >> m >> q;
	fr(i, 1, m) {
		cnt[i].se = i;
	}
	fr(i, 1, n) {
		cin >> a[i];
		cnt[a[i]].fi++;
	}
	sort(cnt + 1, cnt + m + 1);
	cnt[m + 1].fi = 2e18;
	fr(i, 1, q) {
		int k;
		cin >> k;
		queries.pb({k, i});
	}
	sort(all(queries));
	int low = n + 1;
	int pt = 0;
	for(int i = 1; i <= m; i++) {
		order.insert(cnt[i].se);
		int lim = cnt[i + 1].fi - cnt[i].fi;
		while(pt < sz(queries) && queries[pt].fi >= low && queries[pt].fi <= low + mul(lim, i) - 1) {
			ans[queries[pt].se] = *order.find_by_order((queries[pt].fi - low) % i);
			pt++;
		}
		low = min((int)1e18, low + mul(lim, i));
	}
	fr(i, 1, q) {
		cout << ans[i] << endl;
	}
}
signed main(){
    IO;
    #ifdef LOCAL
        freopen("inp.txt","r", stdin);
        freopen("out.txt", "w", stdout);
    #endif
    cout << setprecision(10) << fixed;
    int t = 1;
    // cin >> t;
    fr(tt, 1, t){
        solve();
    }
    return 0;
} 