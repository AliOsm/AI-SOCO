#include <bits/stdc++.h>

using namespace std ;

int SIZE = (int)1e5 + 1 ;
vector<int > primes ;
vector<bool > isComposite(SIZE , false) ;

void seive()
{
    isComposite[0] = isComposite[1] = true ;

    for(int i = 2 ; i <= SIZE ; i++)
        if(!isComposite[i])
        {
            primes.push_back(i) ;
            if(1LL * i * i <= SIZE)
                for(int j = i * i ; j <= SIZE ; j+= i)
                    isComposite[j] = true ;
        }
}

int main()
{
    ios_base :: sync_with_stdio(false) ;
    cin.tie(nullptr) ;
    seive() ;
    int n ;
    cin >> n ;
    if(n == 2)
        cout << -1 << '\n' ;
    else
    {
        long long ans [n] ;
        ans[0] = 2 * 5 ;
        ans[n - 1] = 3 * 5 ;
        for(int i = 1 ; i < n - 1 ; i++)
            ans [i] = 2 * 3 ;
        int ptr = 3 ;
        for(int i = 0 ; i < n ; i++)
            ans[i] *= 1LL * primes[ptr++] ;
        for(long long x : ans)
            cout << x << '\n' ; 
    }
    return 0 ;
}