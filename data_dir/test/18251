#include<bits/stdc++.h>
#include<random>
#include<unordered_map>
#include<unordered_set>
using namespace std;


long long int n;


vector<vector<long long int> > v;


#define MAX 1000002

vector<long long int> pr;
bool use[MAX];

vector<long long int> V;

long long int dp[MAX];

map<long long int, int> m;

bool ok[MAX];

bool isprime(long long int val){
	if (val <= 1)return false;
	for (long long int i = 2; i*i <= val; i++){
		if (val%i == 0LL)return false;
	}
	return true;
}

int main(){
	scanf("%lld", &n);
	for (int i = 2; i < MAX; i++){
		if (use[i] == false){
			use[i] = true;
			pr.push_back(i);
			for (int j = i * 2; j < MAX; j+=i){
				use[j] = true;
			}
		}
	}
	int checked = 0;
	for (int i = 0; i < pr.size(); i++){
		long long int mul = 1;
		vector<long long int> mp;
		while (mul*pr[i] + 1LL <= n){
			mul *= pr[i];
			if (n % (mul + 1LL) == 0LL){
				mp.push_back(mul + 1LL);
			}
		}
		if (mp.size()){
			v.push_back(mp);
			checked = pr[i];
		}
	}
	for (long long int i = 1; i*i <= n; i++){
		if (n%i == 0LL){
			V.push_back(i);
			if(i*i!=n)V.push_back(n / i);
		}
	}
	sort(V.begin(), V.end());
	for (int i = 0; i < V.size(); i++){
		m[V[i]] = i;
	}
	dp[m[n]] = 1;
	int mn = m[n];
	for (int j = 0; j < v.size(); j++){
		for (int i = 0; i <= mn; i++){
			long long int vap = dp[i];
			for (int k = 0; k < v[j].size(); k++){
				if (V[i] % v[j][k] == 0LL){
					long long int go = V[i] / v[j][k];
					dp[m[go]] += vap;
					ok[i] = true;
				}
			}
		}
	}
	long long int ans = dp[0];
	for (int i = 1; i < V.size(); i++){
		if (V[i]-1>checked){
			if (isprime(V[i]-1)){
				ans += dp[i];
			}
		}
	}
	printf("%lld\n", ans);
	return 0;
}