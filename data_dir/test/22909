#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
const int maxn=1000010;
bool fix[maxn];
int n,k;
int step[maxn][20],dep[maxn];
vector<int> g[maxn];
void dfs(int u,int fa){
	step[u][0]=fa;
	for(int i=0;i<(int)g[u].size();i++){
		int v=g[u][i];
		if(v==fa) continue;
		dep[v]=dep[u]+1;
		dfs(v,u);
	}
}
void init_step(){
	memset(step,-1,sizeof step);
	dfs(n,-1);
	for(int i=1;i<20;i++)
		for(int v=1;v<=n;v++)
			if(step[v][i-1]!=-1)
				step[v][i]=step[step[v][i-1]][i-1];
}
inline int find_unfix(int v){
	for(int i=19;i>=0;i--)
		if(step[v][i]!=-1 && !fix[step[v][i]])
			v=step[v][i];
	return v;
}
vector<int> ans;
int main(){
	int a,b;
	scanf("%d%d",&n,&k);
	for(int i=1;i<n;i++){
		scanf("%d%d",&a,&b);
		g[a].push_back(b);
		g[b].push_back(a);
	}
	init_step();
	fix[n]=true;
	int remain=n-1;
	for(int v=n-1;v>=1;v--){
		if(fix[v]) continue;
		int unfix=find_unfix(v);
		if(remain-(dep[v]-dep[unfix]+1)>=k){
			int curv=v;
			while(!fix[curv]){
				fix[curv]=true;
				curv=step[curv][0];
				remain--;
			}
		}else{
			ans.push_back(v);
		}
	}
	sort(ans.begin(),ans.end());
	for(int i=0;i<(int)ans.size();i++)
		printf("%d ",ans[i]);
	puts("");
	return 0;
}