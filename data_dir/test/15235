#include <bits/stdc++.h>
using namespace std;
#define REP(i, n) for (int i = 0; i < int(n); i++)
#define FOR(i, a, b) for (int i = a; i < int(b); i++)
#define FOREACH(i, v) for (__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define SIZE(v) ((int)(v).size())
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define ll long long
#define pii pair<int, int>

const int MAX = 4001000;

int n, a, b, x[MAX], N, id[MAX];
int st[MAX], pot;

void init() {
	pot = 1;
	while(pot < N) pot *= 2;
	REP(i, 2*pot) st[i] = MAX;
}

void up(int leaf, int v) {
	int node = pot + leaf;
	st[node] = min(st[node], v);
	node /= 2;
	while(node > 0) {
		st[node] = min(st[2*node], st[2*node + 1]);
		node /= 2;
	}
}

int query(int node, int l, int r, int L, int R) {
	if(r < L || R < l) return MAX;
	else if(L <= l && r <= R) return st[node];
	else return min(query(2*node, l, (l + r)/2, L, R), query(2*node + 1, (l + r)/2 + 1, r, L, R));
}

int q(int l, int r) {
	return query(1, 0, pot - 1, l, r);
}

int t(int X) {
	if(a%X == 0) return (a/X)*X;
	else return (a/X + 1)*X;
}

set<int> X;

int main() {
	scanf("%d", &n);
	REP(i, n) {
		scanf("%d", x + i);
		X.insert(x[i]);
	}
	scanf("%d %d", &b, &a);

	N = b - a + 1;
	init();

	for(int i = a; i <= b; i++) id[i - a] = 0;
	FOREACH(x, X)
		for(int y = t(*x); y <= b; y += *x) id[y - a] = max(id[y - a], *x);
	
	up(b - a, 0);
	for(int i = b - 1; i >= a; i--) {
		//int ans = q(i + 1 - a, i + 1 - a);
		int ans;
		if(id[i - a] != 0) ans = q(i + 1 - a, min(b, i + id[i - a] - 1) - a);
		else ans = q(i + 1 - a, i + 1 - a);
		up(i - a, ans + 1);
	}
	printf("%d\n", q(0, 0));





}