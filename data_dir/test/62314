#include <bits/stdc++.h>
typedef long long ll;
using namespace std;

void update(int i, int l, int r, int a, int b, int tr[], int v){
	if(l > b || r < a)
		return;
	if(l >= a && r <= b){
		tr[i] = max(tr[i], v);
		return;
	}

	update(i * 2, l, (l + r) / 2, a, b, tr, v);
	update(i * 2 + 1, (l + r) / 2 + 1, r, a, b, tr, v);
	tr[i] = max(tr[i * 2], tr[i * 2 + 1]);
}

int get(int i, int l, int r, int a, int b, int tr[]){
	if(l > b || r < a)
		return 0;
	if(l >= a && r <= b)
		return tr[i];
	return max(get(i * 2, l, (l + r) / 2, a, b, tr),
			get(i * 2 + 1, (l + r) / 2 + 1, r, a, b, tr));
}

int trC[1 << 21], trD[1 << 21];
int main() {
	ios_base::sync_with_stdio(false);
	int n, c, d; cin >> n >> c >> d;
	vector<pair<pair<int,int>, char> >a(n);
	for(int i = 0; i < n; i++)
		cin >> a[i].first.first >> a[i].first.second >> a[i].second;
	int res = 0, mnC = 1e9, mnD = 1e9;
	for(int i = 0; i < n; i++){
		if(a[i].second == 'C'){
			int tmp = c - a[i].first.second;
			if(tmp > 0 && mnC <= tmp)
				res = max(res, a[i].first.first + get(1, 0, (1 << 19), 1, tmp, trC));
			if(tmp >= 0 && mnD <= d)
				res = max(res, a[i].first.first + get(1, 0, (1 << 19), 1, d, trD));
			mnC = min(mnC, a[i].first.second);
			update(1, 0, (1 << 19), a[i].first.second, a[i].first.second, trC, a[i].first.first);
		}
		else{
			int tmp = d - a[i].first.second;
			if(tmp > 0 && mnD <= tmp)
				res = max(res, a[i].first.first + get(1, 0, (1 << 19), 1, tmp, trD));
			if(tmp >= 0 && mnC <= c)
				res = max(res, a[i].first.first + get(1, 0, (1 << 19), 1, c, trC));
			mnD = min(mnD, a[i].first.second);
			update(1, 0, (1 << 19), a[i].first.second, a[i].first.second, trD, a[i].first.first);
		}

	}

	cout << res << endl;
	return 0;
}
