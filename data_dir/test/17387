#include <bits/stdc++.h>
using namespace std;
#define ff first
#define ss second
using ll = long long; using ld = long double; const char nl = '\n';
/* -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- */
#include <bits/extc++.h>
namespace pbds =  __gnu_pbds;
template <typename key, typename val=pbds::null_type, typename comp=less<key>>
using ostree=pbds::tree<key,val,comp,pbds::rb_tree_tag,pbds::tree_order_statistics_node_update>;
using vi = vector< int >; using vll = vector< ll >;
#define all(x) std::begin(x), std::end(x)
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
template <typename...Args, template<typename...> typename T> string to_string(T<Args...> const&);
string to_string(string const&s){return '"'+s+'"';}
string to_string(char const &c) {return to_string(string(1,c));}
string to_string(char const *c) {return to_string(string(c));}
string to_string(bool const &b) {return (b ? "T" : "F");}
template<typename... Args> string to_string(pair<Args...> const&p)
{return "("+to_string(p.first)+", "+to_string(p.second)+")";}
template <typename...Args, template<typename...> typename T> string to_string(T<Args...> const&S)
{string s = "{"; for(auto const& e: S)s+=" "+to_string(e);s+=" }"; return s;}
template<typename Tail> void debug_out(Tail t) {cerr<<" "<<to_string(t)<<" ]"<<endl;}
template<typename Head, typename... Tail> void debug_out(Head h, Tail... t)
{cerr << " " << to_string(h) << ","; debug_out(t...);}
#define pr(...) cerr<<"["<<(#__VA_ARGS__)<<"] : [", debug_out(__VA_ARGS__)
template <typename T> void dbr(T lb, T ub)
{cerr<<'{';for(auto it=lb; it!=ub; it++)cerr<<' '<<to_string(*it); cerr<<" }"<<endl;}
template<typename T, typename Comp=less<T>> bool smin(T &mem, T const&v, Comp const&cmp=Comp())
{return cmp(v, mem) ? mem = v, true : false;}
template<typename T, typename Comp=less<T>> bool smax(T &mem, T const&v, Comp const&cmp=Comp())
{return cmp(mem, v) ? mem = v, true : false;}
/* -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- */



int main() {
  ios::sync_with_stdio(0); cin.tie(0);

  int m, n, k, t; cin >> m >> n >> k >> t;
  int a[m];
  for(int i=0; i<m; i++) cin >> a[i];
  sort(a, a+m, greater<>());

  using Trap = tuple<int,int,int>;
  vector< Trap > traps(k);

  for(auto &[l,r,d]: traps) {
    cin >> l >> r >> d;
    l--;
  }

  int lo = 0, hi = m;
  while( lo < hi ) {
    int mid = (lo+hi+1) / 2;
    int cutoff = a[mid-1];
    using Event = pair<int, int>;
    vector< Event > ev;

    for(auto [l, r, d]: traps)
      if( d > cutoff ) {
	ev.emplace_back(l, 0);
	ev.emplace_back(r, 1);
      }
    sort(all(ev));

    // pr(mid, cutoff, ev);
    int last = -1, del = 0, need = 0;
    for(auto [x, ty]: ev) {
      if( del == 0 ) last = x;
      if( ty == 0 ) {
	del++;
      } else {
	del--;
      }
      if( del == 0 ) need += x - last;
    }

    if( 2 * need + n + 1 <= t ) lo = mid;
    else hi = mid-1;
  }
  cout << lo << nl;

}
