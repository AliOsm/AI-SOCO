/* Author: Dhruv Rastogi */
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define int long long
#define all(sdk) sdk.begin(),sdk.end()
#define mll map<int, int>
#define pb push_back
#define rep(i,a,b) for(int i=a;i<b;++i)
#define repd(i,a,b) for(int i=a;i>=b;--i)
#define mp make_pair
#define hell 1000000007
#define endl '\n'
#define vvll vector<vector<int> >
#define vll vector<int>
#define mint map<int,int> 
#define sz(x) (int)x.size()
#define sll set<int>
#define pll pair<int,int>
#define F first
#define S second
const long double PI = acos(-1.0);

vll op[1000005],cl[1000005];
int vis[500005];
pll a[500005];
set<int> adjlist[500005];


void dfs(int node){
	vis[node]=1;
	for(int i:adjlist[node]){
		if(!vis[i]) dfs(i);
	}
}
void solve(){  
	int n;
	cin>>n;
	rep(i,1,n+1){
		int x,y;
		cin>>x>>y;
		a[i].F=x;
		a[i].S=y;
		op[x].pb(i);
		cl[y].pb(i);
	}
	set<pll> active;
	set<pll> edges;
	rep(i,1,2*n+1){
		for(int j:op[i]){
			active.insert(mp(a[j].F,j));
		}
		for(int j:cl[i]) active.erase(mp(a[j].F,j));
		for(int j:cl[i]){
			auto it=active.upper_bound(mp(a[j].F,(int)1e6));
			while(it!=active.end()){
				edges.insert(mp(min(it->S,j),max(it->S,j)));
				if(sz(edges)>=n){
					cout<<"NO"<<endl;
					return;
				}
				++it;
			}
		}
		
	}
	for(auto k:edges){
		adjlist[k.F].insert(k.S);
		adjlist[k.S].insert(k.F);
	}
	int cnt=0;
	rep(i,1,n+1){
		if(!vis[i]){
			dfs(i);
			++cnt;
		}
	}
	if(cnt==1 && sz(edges)==n-1){
		cout<<"YES"<<endl;
	}
	else cout<<"NO"<<endl;
}

signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int t=1;
    // cin>>t;
    while(t--){
        solve();
    }
    return 0;
}