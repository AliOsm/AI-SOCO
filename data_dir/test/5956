#include <iostream>
#include <cmath>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <set>
#include <assert.h>


using namespace std;


typedef long double ld;


const int sze = 1 << 17, INF = 1e9 + 10;


#define int long long


int t[sze];


void add(int ind, int v)
{
	while (ind < sze)
	{
		t[ind] += v;
		ind += ind & -ind;
	}
}


int sum(int ind);


int sum(int l, int r)
{
	return sum(r) - sum(l - 1);
}


int sum(int ind)
{
	if (!ind)
		return 0;

	int cnt = 0;
	while (ind >= 1)
	{
		cnt += t[ind];
		ind -= ind & -ind;
	}

	return cnt;
}


signed main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	int w, L;
	cin >> w >> L;

	vector<int> values(w + 1);
	for (int i = 1; i < w; ++i)
	{
		int v;
		cin >> v;
		add(i, v);
	}

	values[0] = INF;
	add(w, INF);

	for (int i = 0; i < w; ++i)
	{
		while (values[i] && sum(i + 1, min(i + L, w)))
		{
			int l = i, r = min(i + L, w) + 1;

			while (r - l > 1)
			{
				int m = (l + r) >> 1;

				if (sum(i + 1, m))
					r = m;
				else
					l = m;
			}

			assert(r != min(i + L, w) + 1);

			int v = min(values[i], sum(r, r));
			values[i] -= v;
			values[r] += v;
			add(r, -v);
		}
	}

	cout << values[w];

	return 0;
}
