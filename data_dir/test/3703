#include<cassert>
#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<algorithm>
#include<queue>
#include<vector>
#include<map>
#include<cstdlib>
#include<ctime>
#include<set>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); ++i) 
#define ford(i, n) for(int i = 1; i <= (int)(n); ++i) 
#define pb push_back
#define mp make_pair
#define all(a) a.begin(), a.end()

typedef long long li;
typedef pair<int, int> pt;

const int N = 1009;
const int INF = 1e9;
const int MOD = INF + 7;
const li INF64 = 1ll * INF * INF;

struct zbs{
    int u, d, l, r;
};

vector <int> now;
int n, m, q;
int a[N][N];
zbs X[N][N];

void upd(int pos, char type){
    if(type == 'd'){
        int j = pos, cnt = 0;
        for(int i = n-1; i >= 0; --i){
            if(a[i][j])
                ++cnt;
            else
                cnt = 0;
            X[i][j].d = cnt;            
        }
    }
    if(type == 'u'){
        int j = pos, cnt = 0;
        forn(i, n){
            if(a[i][j])
                ++cnt;
            else
                cnt = 0;
            X[i][j].u = cnt;            
        }
    }

    if(type == 'r'){
        int i = pos, cnt = 0;
        for(int j = m-1; j >= 0; --j){
            if(a[i][j])
                ++cnt;
            else
                cnt = 0;
            X[i][j].r = cnt;            
        }
    }
    if(type == 'l'){
        int i = pos, cnt = 0;
        forn(j, m){
            if(a[i][j])
                ++cnt;
            else
                cnt = 0;
            X[i][j].l = cnt;            
        }
    }
}

int calc(int pos){
    for(int i = pos+1; i < now.size(); ++i)
        now[i] = min(now[i], now[i-1]);
    for(int i = pos-1; i >= 0; --i)
        now[i] = min(now[i], now[i+1]);
    int ans = -1;
    int l = pos, r = pos;
    while(true){
        while(r + 1 < now.size() && now[r+1] >= now[l])
            ++r;
        ans = max(ans, (r-l+1) * now[l]);
        if(l == 0)
            break;
        --l;
    }

    reverse(all(now));
    pos = now.size() - pos - 1;
    l = pos, r = pos;
    while(true){
        while(r + 1 < now.size() && now[r+1] >= now[l])
            ++r;
        ans = max(ans, (r-l+1) * now[l]);
        if(l == 0)
            break;
        --l;
    }

    return ans;
}

int main(){
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif      
    cin >> n >> m >> q;
    forn(i, n)
        forn(j, m)
            cin >> a[i][j];

    forn(i, n){
        upd(i, 'l');
        upd(i, 'r');
    }
    forn(j, m){
        upd(j, 'u');
        upd(j, 'd');
    }

    forn(i, q){
        int type, x, y;
        cin >> type >> x >> y;
        --x, --y;
        if(type == 1){
            a[x][y] = 1 - a[x][y];
            upd(y, 'u');
            upd(y, 'd'); 
            upd(x, 'l');
            upd(x, 'r');
        }
        else{
            if(a[x][y] == 0)
                cout << 0 << endl;
            else{
                int ans = -1;

                now.clear();
                int l = y;
                while(l-1 >= 0 && a[x][l-1])
                    --l;
                for(int i = l; i < m; ++i){
                    if(!a[x][i])
                        break;
                    now.pb(X[x][i].u);
                }
                ans = max(ans, calc(y - l));

                now.clear();
                l = y;
                while(l-1 >= 0 && a[x][l-1])
                    --l;
                for(int i = l; i < m; ++i){
                    if(!a[x][i])
                        break;
                    now.pb(X[x][i].d);
                }
                ans = max(ans, calc(y - l));

                now.clear();
                l = x;
                while(l-1 >= 0 && a[l-1][y])
                    --l;
                for(int i = l; i < n; ++i){
                    if(!a[i][y])
                        break;
                    now.pb(X[i][y].l);
                }
                ans = max(ans, calc(x - l));

                now.clear();
                l = x;
                while(l-1 >= 0 && a[l-1][y])
                    --l;
                for(int i = l; i < n; ++i){
                    if(!a[i][y])
                        break;
                    now.pb(X[i][y].r);
                }
                ans = max(ans, calc(x - l));

                cout << ans << endl;
            }
        }
    }
}