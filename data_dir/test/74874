#include <iostream>
#include <vector>
#include <math.h>
#include <map>
#include <set>
#include <iomanip>
#include <unordered_map>
#include <unordered_set>
#include <string>
#include <queue>
#include <algorithm>

using namespace std;


typedef long long ll;

//#define int ll


struct node
{
	int left, right, parent, left_weight, right_weight;

	node()
	{
		left = 0, right = 0, parent = 0, left_weight = 0, right_weight = 0;
	}

	node(int a, int b, int c, int d, int e)
	{
		left = a;
		right = b;
		parent = c;
		left_weight = d;
		right_weight = e;
	}
};


const int sze = 1e6 + 10, INF = 1e8;
int power[sze] = {};
vector<int> left_v[sze], right_v[sze], middle_v[sze];
vector<ll> cnt_left[sze], cnt_right[sze];
node vertices[sze] = {};
vector<int> length;


void my_merge(int v)
{
	int i = 0, j = 0;
	middle_v[v].push_back(0);

	while (i < left_v[v].size() && j < right_v[v].size())
	{
		if (left_v[v][i] < right_v[v][j])
			middle_v[v].push_back(left_v[v][i++]);
		else
			middle_v[v].push_back(right_v[v][j++]);//True?
	}

	for (; i < left_v[v].size(); ++i)
		middle_v[v].push_back(left_v[v][i]);

	for (; j < right_v[v].size(); ++j)
		middle_v[v].push_back(right_v[v][j]);

}


void dfs(int v)
{
	if (!v)
		return;

	int l = vertices[v].left, r = vertices[v].right, left_w = vertices[v].left_weight, right_w = vertices[v].right_weight;
	dfs(l);
	dfs(r);

	left_v[v].resize(middle_v[l].size());
	cnt_left[v].resize(middle_v[l].size());
	copy(middle_v[l].begin(), middle_v[l].end(), left_v[v].begin());

	for (int i = 0; i < left_v[v].size(); ++i)
		left_v[v][i] = min((ll)INF, (ll)left_w + (ll)left_v[v][i]);

	right_v[v].resize(middle_v[r].size());
	cnt_right[v].resize(middle_v[r].size());
	copy(middle_v[r].begin(), middle_v[r].end(), right_v[v].begin());

	for (int i = 0; i < right_v[v].size(); ++i)
		right_v[v][i] = min((ll)INF, (ll)right_w + (ll)right_v[v][i]);

	if (right_v[v].size())
	{
		cnt_right[v][0] = right_v[v][0];

		for (int i = 1; i < right_v[v].size(); ++i)
			cnt_right[v][i] = cnt_right[v][i - 1] + (ll)right_v[v][i];
	}

	if (left_v[v].size())
	{
		cnt_left[v][0] = left_v[v][0];

		for (int i = 1; i < left_v[v].size(); ++i)
			cnt_left[v][i] = cnt_left[v][i - 1] + (ll)left_v[v][i];

	}

	my_merge(v);
}


ll solution(int v, int distance, int start_distance, int may_left, int may_right)
{
	if (!v || distance > start_distance)
		return 0;

	ll ans = start_distance - distance;
	int current = start_distance - distance;

	if (may_left)
	{
		int lb = -1, rb = left_v[v].size();

		while (rb - lb > 1)
		{
			int m = (lb + rb) >> 1;
			if (left_v[v][m] > current)
				rb = m;
			else
				lb = m;
		}

		ll cnt;
		if (lb != -1)
			cnt = (ll)cnt_left[v][lb] + (ll)distance * (ll)rb;
		else
			cnt = 0;

		ans += (ll)(lb + 1) * (ll)start_distance - (ll)cnt;
	}

	if (may_right)
	{
		int lb = -1, rb = right_v[v].size();

		while (rb - lb > 1)
		{
			int m = (lb + rb) >> 1;
			if (right_v[v][m] > current)
				rb = m;
			else
				lb = m;
		}

		ll cnt;
		if (lb != -1)
			cnt = (ll)cnt_right[v][lb] + (ll)distance * (ll)rb;
		else
			cnt = 0;

		ans += (ll)(lb + 1) * (ll)start_distance - (ll)cnt;
	}

	int parent = vertices[v].parent;
	if (parent)
		if (vertices[parent].left == v)
			ans += solution(parent, distance + vertices[parent].left_weight, start_distance, 0, 1);
		else
			ans += solution(parent, distance + vertices[parent].right_weight, start_distance, 1, 0);

	return ans;
}


signed main()
{
	ios::sync_with_stdio(false);

	int n, m;

	cin >> n >> m;
	length.resize(n);
	for (int i = 0; i + 1 < n; i++)
		cin >> length[i];

	for (int i = 1; i < n; i++)
	{
		int v = (i + 1) / 2, u = i + 1;

		vertices[u].parent = v;

		if (vertices[v].left)
		{
			vertices[v].right = u;
			vertices[v].right_weight = length[i - 1];
		}
		else
		{
			vertices[v].left = u;
			vertices[v].left_weight = length[i - 1];
		}
	}

	dfs(1);

	for (int i = 0; i < m; i++)
	{
		int start, distance;
		cin >> start >> distance;

		cout << solution(start, 0, distance, 1, 1) << '\n';
	}

	return 0;
}