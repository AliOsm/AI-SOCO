#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <assert.h>
#include <fstream>
#include <iomanip>
#include <bitset>
#include <string>
#include <cstdio>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>
using namespace std;

#define int64 long long
#define mp make_pair

const int64 inf = 1e18;
const double pi = acos(-1.0);

#ifdef _DEBUG
    const int N = 3010;
#else
    const int N = 300010;
#endif

int n;
bool dp[N], dp1[N], dp2[N];
vector <int> g[N];
pair <int, int> p1[N];

void dfs(int v, int u, int p)
{
    for (int i = 0; i < g[v].size(); i++)
        if (g[v][i] != p) dfs(g[v][i], u, v);
    int r = 0;
    for (int i = 0; i < g[v].size(); i++)
        if (g[v][i] != p) r++;
    if (r == 0)
    {
        dp1[v] = true;
        dp2[v] = true;
        dp[v] = true;
        return;
    }
    if (r > 1) dp1[v] = false;
    else
    {
        for (int i = 0; i < g[v].size(); i++)
            if (g[v][i] != p) dp1[v] = dp1[g[v][i]];
    }
    if (r > 2) dp2[v] = false;
    else 
    {
        dp2[v] = true;
        for (int i = 0; i < g[v].size(); i++)
            if (g[v][i] != p)
            {
                if (!dp1[g[v][i]]) dp2[v] = false;
            }
    }
    int k = 0, l = 0;
    for (int i = 0; i < g[v].size(); i++)
        if (g[v][i] != p)
        {
            if (dp2[g[v][i]]) k++;
            else if (dp[g[v][i]]) l++;
            else
            {
                dp[v] = false;
                return;
            }
        }
    if (dp1[v] || dp2[v]) dp[v] = true;
    else
    {
        if (v == u) 
        {
            if (l <= 2 && k >= r - l) dp[v] = true;
            else dp[v] = false;
        }
        else
        {
            if (l <= 1 && k >= r - l) dp[v] = true;
            else dp[v] = false;
        }
    }
}       

bool solve(int v)
{
    for (int i = 1; i <= n; i++)
    {
        dp1[i] = false;
        dp2[i] = false;
        dp[i] = false;
    }
    dfs(v, v, -1);
    return dp[v];
}

int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    srand(time(0));
    scanf("%d", &n);
    for (int i = 1; i < n; i++)
    {
        int a, b;
        scanf("%d%d", &a, &b);
        g[a].push_back(b);
        g[b].push_back(a);
    }
    for (int i = 1; i <= n; i++) p1[i] = mp(g[i].size(), i);
    sort(p1 + 1, p1 + n + 1);
    for (int i = n; i >= max(1, n - 1); i--)
        if (solve(p1[i].second))
        {
            cout << "Yes";
            return 0;
        }
    cout << "No";
    return 0;
}