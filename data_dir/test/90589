#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 100;

int a[N], f[N];
long long dp[N][21];
int L, R;
long long inf = 1e18;
long long cnt;

void add(int idx) {
    cnt += f[a[idx]];
    f[a[idx]]++;
}

void sub(int idx) {
    f[a[idx]]--;
    cnt -= f[a[idx]];
}

long long query(int l, int r) {
    assert(l <= r);
    while(L > l) add(--L);
    while(L < l) sub(L++);
    while(R > r) sub(R--);
    while(R < r) add(++R);
    return cnt;
}


void solve(int l, int r, int ql, int qr, int k) {
    if(l > r) return;
    long long ans = inf;
    int opt = -1;
    int mid = (l + r) / 2;
    for(int i = ql; i <= qr; i++) {
        if(i <= mid) {
            long long cur = query(i, mid) + dp[i-1][k-1];
            if(cur < ans) ans = cur, opt = i;
        }
    }
    dp[mid][k] = ans;
    solve(l, mid-1, ql, opt, k);
    solve(mid + 1, r, opt, qr, k);
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    int n, K;
    cin >> n >> K;
    for(int i = 1; i <= n; i++) {
        cin >> a[i];
    }
    for(int i = 1; i <= n; i++) {
        dp[i][0] = inf;
    }
    for(int i = 1; i <= K; i++) {
        L = 1, R = 0, cnt = 0;
        for(int i = 0; i <= n; i++) f[i] = 0;
        solve(1,n,1,n,i);
    }
    cout << dp[n][K] << "\n";
}
