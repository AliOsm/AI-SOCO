#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int MX = 200005;

vector<int> neigh[MX];
int depth[MX];
int dfs(int v, int p, int d)
{
	depth[v] = d;
	int x = v;
	for (int u : neigh[v]) {
		if (u == p) continue;
		int t = dfs(u, v, d + 1);
		if (depth[t] > depth[x]) x = t;
	}
	return x;
}

int dist[MX][2];
void dfs2(int v, int p, int d, int i)
{
	dist[v][i] = d;
	for (int u : neigh[v]) {
		if (u == p) continue;
		dfs2(u, v, d + 1, i);
	}
}

int deg[MX];

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0), cout.tie(0);

	int n;
	cin >> n;
	
	for (int i = 0; i < n - 1; i++) {
		int u, v;
		cin >> u >> v;
		neigh[u].push_back(v);
		neigh[v].push_back(u);
	}
	
	int v1 = dfs(1, 0, 0);
	int v2 = dfs(v1, 0, 0);
	
	dfs2(v1, 0, 0, 0);
	dfs2(v2, 0, 0, 1);
	
	queue<int> Q;
	
	for (int v = 1; v <= n; v++) {
		if (v == v1 || v == v2) continue;
		deg[v] = neigh[v].size();
		if (deg[v] == 1) Q.push(v);
	}
	
	ll ans = 0;
	vector<pair<int, int>> ans_v;
	
	while (!Q.empty()) {
		int v = Q.front();
		Q.pop();

		if (dist[v][0] > dist[v][1]) {
			ans_v.emplace_back(v, v1);
			ans += dist[v][0];
		}
		else {
			ans_v.emplace_back(v, v2);
			ans += dist[v][1];
		}

		for (int u : neigh[v]) {
			if (u == v1 || u == v2) continue;
			deg[u]--;
			if (deg[u] == 1) Q.push(u);
		}
	}
	
	int d = dist[v2][0];
	while (v1 != v2) {
		ans_v.emplace_back(v1, v2);
		ans += d;
		d--;
		for (int u : neigh[v1]) {
			if (dist[u][1] < dist[v1][1]) {
				v1 = u;
				break;
			}
		}
	}
	
	cout << ans << "\n";
	for (auto& p : ans_v) {
		cout << p.first << " " << p.second << " " << p.first << "\n";
	}
}
