/*
digu_J - Digvijay Janartha
NIT Hamirpur - INDIA
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

template < typename T > using ordered_set = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;

typedef double db;
typedef long long ll;
typedef pair < ll, ll > pll;
typedef vector < ll > vll;
typedef map < ll, ll > mll;
typedef set < ll > sll;
typedef vll lnum;

#define pb push_back
#define F first
#define S second
#define D(x) cout << (#x) << " is " << (x) << endl
#define fast_io() ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0)

const ll INF = LLONG_MAX;
const ll base = 1e9;
const db PI = acos(-1);
const ll MOD = 1e9 + 7;
const ll N = 1e5 + 10;

void solve();

int main() {
    fast_io();
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
        for (int i = 0; i < 1; ++i) {
            solve();
        }
    #endif
    #ifdef ONLINE_JUDGE
        solve();
    #endif
    #ifndef ONLINE_JUDGE
            cout << "Time: " << (int)(clock() * 1000. / CLOCKS_PER_SEC) << "ms";
    #endif
    return 0;
}

void solve() {
    ll n;
    cin >> n;
    string s;
    cin >> s;
    if (n == 1) {
        cout << "0\n" << s << "\n";
    } else if (n == 2) {
        if (s[0] == s[1]) {
            cout << "1\n" << s[0];
            if (s[0] == 'R') {
                cout << "B\n";
            } else {
                cout << "R\n";
            }
        } else {
            cout << "0\n";
            cout << s << "\n";
        }
    } else {
        ll ans[6], sup = MOD;
        fill(ans, ans + 6, 0);
        string b[6];
        b[0] = "RGB", b[1] = "RBG", b[2] = "BGR", b[3] = "BRG", b[4] = "GRB", b[5] = "GBR";
        for (ll i = 0; i < 6; ++i) {
            for (ll j = 3; j < n; ++j) {
                b[i] += b[i][j % 3];
            }
            for (ll j = 0; j < n; ++j) {
                ans[i] += (b[i][j] != s[j]);
            }
            sup = min(sup, ans[i]);
        }
        cout << sup << "\n";
        if (!sup) {
            cout << s << "\n";
            return;
        }
        for (ll i = 0; i < 6; ++i) {
            ll temp = 0;
            for (ll j = 0; j < n; ++j) {
                temp += (b[i][j] != s[j]);
            }
            if (sup == temp) {
                for (ll j = 0; j < n; ++j) {
                    cout << b[i][j];
                }
                cout << "\n";
                return;
            }
        }
    }
    return;
}
