#include <bits/stdc++.h>

using namespace std;

int ara[200005];
vector<int>ans_vec;
bool done[105];

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int line,n,m,i,j,k;
    cin>>line;
    while(line--)
    {
        cin>>n>>k;
        int mn=1e9,mx=-1e9;
        for(i=1; i<=n; i++)
        {
            cin>>ara[i];
            mn=min(mn,ara[i]);
            mx=max(mx,ara[i]);
        }
        memset(done,false,sizeof done);
        ans_vec.clear();
        if(n==k)
        {
            cout<<n<<endl;
            for(i=1; i<=n; i++)
            {
                cout<<ara[i]<<' ';
            }
            cout<<endl;
        }
        else if(k==1)
        {
            bool flag=true;
            for(i=2; i<=n; i++)
            {
                if(ara[i]!=ara[i-1])
                {
                    flag=false;
                    break;
                }
            }
            if(flag)
            {
                cout<<n<<endl;
                for(i=1; i<=n; i++)
                {
                    cout<<ara[i]<<' ';
                }
                cout<<endl;
            }
            else
            {
                cout<<-1<<endl;
            }
        }
        else
        {
            set<int>st;
            vector<int>temp;
            for(i=1; i<=n; i++) st.insert(ara[i]);
            set<int>::iterator it;
            for(it=st.begin(); it!=st.end(); it++)
            {
                temp.push_back(*it);
                done[*it]=true;
            }
            bool flag=true;
            if((int)st.size()>k) flag=false;
            if(!flag)
            {
                cout<<-1<<endl;
            }
            else
            {
                int tot=(int)st.size();
                for(i=1; i<=n; i++)
                {
                    if(tot==k) break;
                    if(!done[i])
                    {
                        temp.push_back(i);
                        tot++;
                    }
                }
                int curIndx=1,curVal=0;
                while(curIndx<=n)
                {
                    if(ara[curIndx]==temp[curVal])
                    {
                        ans_vec.push_back(temp[curVal]);
                        curIndx++;
                    }
                    else
                    {
                        ans_vec.push_back(temp[curVal]);
                    }

                    curVal++;
                    if(curVal==tot) curVal=0;
                }
                cout<<(int)ans_vec.size()<<endl;
                for(int v: ans_vec)
                {
                    cout<<v<<' ';
                }
                cout<<endl;
            }

        }

    }

}
