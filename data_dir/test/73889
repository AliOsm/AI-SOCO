# include <stdio.h>
# include <bits/stdc++.h>
using namespace std;
# define fi cin
# define fo cout
# define x first
# define y second
# define ll long long
# define IOS ios_base :: sync_with_stdio(0);cin.tie(0)
# define p(v) cerr << #v << " = " << v << '\n'
# define p2(v) cerr << #v << " = " << (complex < int > (v.x,v.y)) << '\n'
# define vi vector < int >
# define vll vector < ll >
# define pii pair < int , int >
//# pragma GCC target ("sse4")
# define mp make_pair
const int len = 350;
int main(void)
{
    #ifdef CF
    freopen("input","r",stdin);
    #endif // CF
    srand(time(0));
    fo << fixed << setprecision(7);
    cerr << fixed << setprecision(7);
    int n,m;
    IOS;
    fi>>n>>m;
    static int s[1 << 17];
    for (int i = 1;i <= n;++i)
        fi>>s[i];
    for (int i = 1;i <= n;++i)
        s[i] += i;
    for (int i = 1;i <= n;++i)
        s[i] = min(s[i],n + 1);
    static pii D[1 << 17];
    static int cur[1 << 17];
    static int l[1 << 17];
    static int r[1 << 17];
    cur[n + 1] = -1;
    int now = 0;
    for (int i = 1;i <= n;++i)
        {
            if (i % len == 1) ++now,l[now] = i;
            cur[i] = now;
            r[now] = i;
        }
    for (int i = 1;i <= n;++i)
        D[i].x = i,D[i].y = 1;
    for (int i = n;i;--i)
        if (cur[i] == cur[s[i]])
            D[i].x = D[s[i]].x,D[i].y = 1 + D[s[i]].y;
    while (m --)
    {
        int op;
        fi>>op;
        if (!op)
        {
            int a,b;
            fi>>a>>b;
            s[a] = a + b;
            for (int i = r[cur[a]];i >= l[cur[a]];--i)
                if (cur[i] == cur[s[i]])
                    D[i].x = D[s[i]].x,D[i].y = 1 + D[s[i]].y;
                else
                    D[i] = {i,1};
        }
        else
        {
            int v;
            fi>>v;
            int ans = 0,Last = v;
            while (v <= n)
            {
                ans += D[v].y;
                Last = D[v].x;
                v = s[D[v].x];
            }
            fo << Last << ' ' << ans << '\n';
        }
    }
    cerr << "Time elapsed :" << clock() * 1000.0 / CLOCKS_PER_SEC << " ms" << '\n';
    return 0;
}


