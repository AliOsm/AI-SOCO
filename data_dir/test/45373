// In the name of God.
// We're nothing and you're everything.
// Ya Ali!
 
#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;


using namespace std;
typedef long long ll;
const int maxn = 5e3 + 14;
tree<int, null_type, less<int>, rb_tree_tag,tree_order_statistics_node_update> os;
struct Line{
	int x, sy, ey;
};
struct Eve{
	int x, y;
	bool ad;
	void make(bool after = 0){
		if(ad && !after)
			os.insert(y);
		else
			os.erase(y);
	}
};
int count(int l, int r){
	return l >= r ? 0 : os.order_of_key(r + 1) - os.order_of_key(l);
}
int c2(int x){
	return x * (x - 1) / 2;
}
int n;
vector<Line> v;
vector<Eve> even;
int main(){
	ios::sync_with_stdio(0), cin.tie(0);
	cin >> n;
	for(int i = 0; i < n; i++){
		int sx, sy, ex, ey;
		cin >> sx >> sy >> ex >> ey;
		if(sx > ex)
			swap(sx, ex);
		if(sy > ey)
			swap(sy, ey);
		if(sx == ex)
			v.push_back({sx, sy, ey});
		else{
			even.push_back({sx, sy, 1});
			even.push_back({ex, sy, 0});
		}
	}
	sort(v.begin(), v.end(), [](Line a, Line b){  return a.x < b.x;  });
	sort(even.begin(), even.end(), [](Eve a, Eve b){  return a.x < b.x;  });
	ll ans = 0;
	for(int i = 0; i < v.size(); i++){
		os.clear();
		auto l = v[i];
		int ptr = 0;
		while(ptr < even.size() && even[ptr].x <= l.x)
			even[ptr++].make();
		for(int j = i + 1; j < v.size(); j++){
			while(ptr < even.size() && even[ptr].x < v[j].x)
				even[ptr++].make(1);
			ans += c2(count(max(l.sy, v[j].sy), min(l.ey, v[j].ey)));
		}
	}
	cout << ans << '\n';
}
