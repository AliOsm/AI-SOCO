#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int N = 4e7 + 7;
const int MOD = 1e9 + 7;
const int INF = 1e9 + 9;
const int M = 32;

int used = 1;
int child[N][2];
int cnt[N];

void add(int x)
{
	int v = 0;
	for (int i=M-1; i>=0; i--)
	{
		cnt[v]++;
		bool bit = (x >> i) & 1;
		if (child[v][bit] == 0)
			child[v][bit] = used++;
		v = child[v][bit];
	}
	cnt[v]++;
}

int get(int x, int k)
{
	int v = 0;
	int ans = 0;
	for (int i=M-1; i>=0; i--)
	{
		bool bit = (x >> i) & 1;
		bool kb = (k >> i) & 1;
		if (kb == 0 && child[v][!bit])
			ans += cnt[child[v][!bit]];
		if (child[v][bit^kb] == 0)
			break;
		v = child[v][bit^kb];
	}
	return ans;
}

int main()
{
	ios::sync_with_stdio(false);

	int n, k;
	cin >> n >> k;
	k--;
	add(0);
	int xr = 0;
	ll ans = 0;
	for (int i=0; i<n; i++)
	{
		int x;
		cin >> x;
		xr ^= x;
		ans += get(xr, k);
		add(xr);
	}
	cout << ans << "\n";
	return 0;
}
