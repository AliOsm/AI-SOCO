/*
 _     _                             
| |__ | |__   __ _  __ _ _   _  __ _ 
| '_ \| '_ \ / _` |/ _` | | | |/ _` |
| |_) | | | | (_| | (_| | |_| | (_| |
|_.__/|_| |_|\__,_|\__, |\__, |\__,_|
                   |___/ |___/       
*/
#include<bits/stdc++.h>

#define ll          long long
#define pb          push_back
#define ppb         pop_back
#define	endl		'\n'
#define mii         map<ll int,ll int>
#define pii         pair<ll int,ll int>
#define vi          vector<ll int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define what_is(x)  cerr << #x << " is " << x << endl;
using namespace std;

#define N  500005

int a[N],seg[N<<2];

void build(int node,int start,int end){
    if(start==end){
        seg[node]=a[start];
        return;
    }
    int mid=(start+end)>>1;
    build(node<<1,start,mid);
    build(node<<1|1,mid+1,end);
    seg[node]=min(seg[node<<1],seg[node<<1|1]);
}
int query(int node,int start,int end,int l,int r){
    if(l<=start && r>=end) return seg[node];
    if(r<start || l>end) return hell;
    int mid=(start+end)>>1;
    int ans1=query(node<<1,start,mid,l,r);
    int ans2=query(node<<1|1,mid+1,end,l,r);
    return min(ans1,ans2);
}
void update(int node,int start,int end,int x,int val){
    if(start==end){
        a[x]+=val;
        seg[node]+=val;
        return;
    }
    int mid=(start+end)>>1;
    if(start<=x && x<=mid) update(node<<1,start,mid,x,val);
    else update(node<<1|1,mid+1,end,x,val);
    seg[node]=min(seg[node<<1],seg[node<<1|1]);
}

int query2(int node,int start,int end,int mini)
{
	int ret=-1;
	if(start==end)
	{
		if(seg[node]>=mini) ret=1;
		else ret=0;
	}
	else
	{
		if(seg[node]>=mini) ret=end-start+1;
	    else
	    {
	    	int mid=(start+end)>>1;
	    	int l=query2(2*node,start,mid,mini);
	    	if(l!=mid-start+1) ret=l;
	    	else ret=l+query2(2*node+1,mid+1,end,mini);
	    }
	}
	// cout<<node<<" "<<start<<" "<<end<<" "<<mini<<" "<<ret<<endl;
	return ret;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
	// cin>>TESTS;
	while(TESTS--)
	{
		int q,x;
		cin>>q>>x;
		build(1,0,x-1);
		while(q--)
		{
			int y;
			cin>>y;
			y%=x;
			update(1,0,x-1,y,1);
			int mini=query(1,0,x-1,0,x-1);
			int bkj=query2(1,0,x-1,mini+1);
			// cout<<mini<<" "<<bkj<<endl;
			int ans=mini*x+bkj;
			cout<<ans<<endl;
		}
	}
	return 0;
}