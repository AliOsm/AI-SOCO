/*
    OUTLAW!!
           ---SIDHU MOOSEWALA
                                */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli M=998244353.;   
lli INF=1e17;
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcount(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctz(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clz(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffs(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,y,k,m;
const double pi1=3.14159265358979323846;
//unordered_map<pair<ll,lli>,lli> mp;
lli me(lli a,lli b,lli M)
{
    if(b==0)
    return 1;
    else if(b%2==0)
    return me((a*a)%M,b/2,M);
    else
    return (a%M*me((a*a)%M,(b-1)/2,M)%M)%M;
}
lli mI(lli a,lli m)
{
    return me(a,m-2,m);
}
//lli tot=0;
vector<lli> pf(string s) {
    int n = (int)s.length();
    vector<lli> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}
//map<ll,lli> dp;
//set<lli> s[100005];
//lli dp[3005][3005];
//ost s[500005];
//string sdp[3005][3005];
lli vis[3000004];
vector<lli> v[500000];
lli cx,cy;
void dfs(lli i)
{
    if(vis[i])
    return;
    if(i>=200000)
    cy++;
    else
    cx++;
    vis[i]=1;
    for(auto &j: v[i])
    dfs(j);
}
struct edge
{
    lli x,y,z;
};
bool cmp(edge a,edge b)
{
    if(a.y==b.y)
    return a.z<b.z;
    return a.y<b.y;
}
lli dp[600][600];
lli dps[20][2][1<<11];
lli mk[1005];
void calc(lli k)
{
    for(lli i=1;i<=1000;i++)
    {
        lli oo=bip(i);
        mk[i]+=1;
        if(i==1)
        continue;
        mk[i]+=mk[oo];
    }
}
lli dpsa[20][2];
/*lli solve(string s,lli n,lli a[])
{
    for(int j=0;j<n;j++)
    {
        for(int i=0;i<(1<<10);i++)
        {
            bitset<10> v(i);
            for(int p=0;p<10;p++)
            {
                if(v[p])
                {
                    lli dd=i^(1<<p);
                    for(int cnt=1;cnt<=n;cnt++)
                    {
                    if(cnt==1)
                    {
                    dp[j+1][1][i][p][cnt][1]+=dp[j][1][dd][p][cnt-1][1];
                    if(s[j]-'0'>p)
                    dp[j+1][1][i][p][cnt][1]+=dp[j][0][dd][p][cnt-1][1];
                    else if(s[j]-'0'==p)
                    dp[j+1][0][i][p][cnt][1]+=dp[j][0][dd][p][cnt-1][1];
                    if(p>0)
                    {
                        dp[j+1][1][i][p][cnt][1]+=dp[j][1][dd][p][cnt-1][0];
                        if(s[j]-'0'>p)
                        dp[j+1][1][i][p][cnt][1]+=dp[j][0][dd][p][cnt-1][0];
                        else if(s[j]-'0'==p)
                        dp[j+1][0][i][p][cnt][1]+=dp[j][0][dd][p][cnt-1][0];
                    }
                    }
                    else
                    {
                    dp[j+1][1][i][p][cnt][1]+=dp[j][1][i][p][cnt-1][1];
                    if(s[j]-'0'>p)
                    dp[j+1][1][i][p][cnt][1]+=dp[j][0][i][p][cnt-1][1];
                    else if(s[j]-'0'==p)
                    dp[j+1][0][i][p][cnt][1]+=dp[j][0][i][p][cnt-1][1];
                    if(p>0)
                    {
                        dp[j+1][1][i][p][cnt][1]+=dp[j][1][i][p][cnt-1][0];
                        if(s[j]-'0'>p)
                        dp[j+1][1][i][p][cnt][1]+=dp[j][0][i][p][cnt-1][0];
                        else if(s[j]-'0'==p)
                        dp[j+1][0][i][p][cnt][1]+=dp[j][0][i][p][cnt-1][0];
                    }
                    }
                    }
                }
            }
        }
    }
    lli ans=0;
        for(int i=0;i<(1<<10);i++)
        {
            for(int j=0;j<10;j++)
            {
                for(int p=0;p<19;p++)
                {
                    if(p==a[j+1])
                    continue;
                    ans+=dp[n][0][i][j][p][1]+dp[n][1][i][j][p][1];
                }
            }
        }
        return ans;
}
void fueldp()
{
    for(int i=0;i<19;i++)
    {
        for(int j=0;j<(1<<10);j++)
        {
            for(int p=0;p<10;p++)
            {
                dp[i][0][j][p][0][0]=0;
            }
        }
    }
        for(int j=0;j<(1<<10);j++)
        {
            for(int i=0;i<10;i++)
            dp[0][0][j][i][0][0]=1;
        }
}*/
lli mx1=1;
lli mx2=1;
lli solve(vector<lli>vv[],char ch)
{
    lli cnt=1;
    lli mx=1;
    lli dd=ch;
    lli sa=1;
    lli cc=1;
    for(int j=1;j<vv[dd].size();j++)
    {
        if((vv[dd][j]-vv[dd][j-1])==1)
        cnt++,sa=1;
        else if(((vv[dd][j]-vv[dd][j-1]))==2)
        cc=2,cnt=1,sa=1;
        else
        {
            cnt=1;
            if((vv[dd][j]-vv[dd][j-1])==0)
            sa++;
            else
            sa=1;
        }
        mx=max(mx,cnt);
        mx1=max(mx1,sa);
        mx2=max(mx2,cc);
    }
    return mx;
}
int main()
{
    ios_base::sync_with_stdio(0);
    string a,b,c;
    vector<lli> vv[150];
    map<string,lli> ml;
    cin>>a>>b>>c;
        vv[a[1]].push_back(a[0]);
        vv[b[1]].push_back(b[0]);
        vv[c[1]].push_back(c[0]);
        sort(vv['p'].begin(),vv['p'].end());
        sort(vv['m'].begin(),vv['m'].end());
        sort(vv['s'].begin(),vv['s'].end());
        lli ans=1;
        if(vv['p'].size())
        ans=solve(vv,'p');
        if(vv['m'].size())
        ans=max(ans,solve(vv,'m'));
        if(vv['s'].size())
        ans=max(ans,solve(vv,'s'));
        //cout<<mx2<<endl;
        ans=3-ans;
        ans=min(ans,3-mx1);
        ans=min(ans,3-mx2);
        cout<<ans;
    //for(int i=1;i<=n;i++)
}