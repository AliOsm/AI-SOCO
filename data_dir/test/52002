#include <bits\stdc++.h>
using namespace std;

#define VIC ios::sync_with_stdio(0);cin.tie(0);ios_base::sync_with_stdio(0);
#define sfi(x) scanf("%d", &x)
#define sfi2(x, y) scanf("%d%d", &x,&y)
#define sfl2(x, y) scanf("%I64d%I64d", &x,&y)
#define sfl(x) scanf("%I64d", &x)
#define sfd(x) scanf("%lf", &x)
#define sfd2(x, y) scanf("%lf%lf", &x, &y)
#define sfs(x) scanf("%s", &x)
#define wtf(s) freopen((s), "w", stdout)
#define rff(s) freopen((s), "r", stdin)
#define mod 998244353
#define pi (2 * acos(0))
#define x first
typedef long double ld;
typedef long long ll;
const int N = 1e5 + 5;
//g++ -std=c++11 main.cpp && a.exe

bool vis[N], lucky[N];
vector<int> v[N];

int compSize(int node)
{
    int ans = 1;

    for (auto it: v[node])
        if (!vis[it])
            vis[it] = true, ans += compSize(it);
    return ans;
}

int n, dp[N], c[N];
void generateLucky()
{
    for (int i = 1; i <= n; i++)
    {
        int x = i;
        lucky[i] = true;
        while (x && lucky)
        {
            if (!(x % 10 == 4 || x % 10 == 7))
                lucky[i] = false;
            x /= 10;
        }
    }
}

vector<int> a;

int main()
{
    VIC
    int m, x, y;
    cin >> n >> m;
    generateLucky();
    while (m--)
    {
        cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }
    for (int i = 1; i <= n; i++)
    {
        dp[i] = 1e9;
        if (!vis[i])
            vis[i] = true, c[compSize(i)]++;
    }
    for (int i = 1; i <= 77777; i++)
    {
        if (!c[i])
            continue;
        if (lucky[i])
            return cout << 0, 0;
        a.push_back(i);
    }
    for (auto it: a)
    {
        int j = 1, left = 0;
        while (j + left <= c[it])
        {
            for (int i = n; i > 0; i--)
            {
                if (i - j * it < 0)
                    continue;
                dp[i] = min(dp[i], dp[i - j * it] + j);
            }
            left += j;
            j *= 2;
        }
        left = c[it] - left;
        j = left;
        for (int i = n; i > 0 && left; i--)
        {
            if (i - j * it < 0)
                continue;
            dp[i] = min(dp[i], dp[i - j * it] + j);
        }
    }
    int ans = 1e9;
    for (int i = 1; i <= min(n, 77777); i++)
    {
        if (!lucky[i])
            continue;
        ans = min(ans, dp[i]);
    }
    if (ans == 1e9)
        ans = 0;
    cout << ans - 1;
    return 0;
}
