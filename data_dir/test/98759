#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector< ii > vii;

#define INF 0x3F3F3F3F
#define LINF 0x3F3F3F3F3F3F3F3FLL
#define pb push_back
#define mp make_pair
#define pq priority_queue
#define LSONE(s) ((s)&(-s)) //LASTBIT
#define EPS 1e-7
#define PI  3.1415926535897932384626433832795028841971693993
#define DEG_to_RAD(X)   (X * PI / 180)

//////////////////////
int dx[] = {1,-1,0,0};
int dy[] = {0,0,-1,1};	
//////////////////////

const int N = 100100;


ll tree[N*4];
ll v[N];
int n;
vector< pair<int,int> > g;

void build( int no, int l, int r )
{
	if( l == r ){ tree[no]=v[l]; return; }
	int mid = (l+r)/2;
	build(no*2,l,mid);
	build(no*2+1,mid+1,r);
	tree[no] = __gcd(tree[no*2],tree[no*2+1]);
}

ll query( int no, int l, int r, int i, int j)
{
	if(r<i || l>j) return INF;
	if(l>=i && r<=j) return tree[no];
	int nxt = no<<1;
	int mid = (l+r)>>1;
	ll x1 = query(nxt,l,mid,i,j);
	ll x2 = query(nxt+1,mid+1,r,i,j);
	if(x1==INF) return x2;
	if(x2==INF) return x1;
	return __gcd(x1,x2);
}

int main()
{
	scanf("%d",&n);
	for(int i=0;i<n;++i)
	{
		scanf("%lld",v+i);
		g.pb(mp(v[i],i));
	}
	build(1,0,n-1);
	sort(g.begin(),g.end());
	int q;
	scanf("%d",&q);
	while(q--)
	{
		int l,r;
		scanf("%d %d",&l,&r);
		l--;r--;
		ll x = query(1,0,n-1,l,r);
		ll fd = upper_bound(g.begin(),g.end(),ii(x,r))-g.begin();
		ll fl = lower_bound(g.begin(),g.end(),ii(x,l))-g.begin();
		printf("%lld\n",(r-l+1)-(fd-fl));
	}
	return 0;
}

