/*
  Anton Gulikov
*/
#pragma comment(linker,"/STACK:300000000")
#include <iostream>
#include <fstream>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <list>
#include <math.h>
#include <string>
#include <stdlib.h>
#include <stack>

#define gcd(a,b) __gcd((a),(b))
#define sqr(a) ((a)*(a))
#define odd(a) ((a)&1)
#define foru(i,n) for (int i=0;i<(n);i++)
#define ford(i,n) for (int i=(n)-1;i>=0;i--)
#define forab(i,l,r) for (int i=(l);i<=(r);i++)
#define forabd(i,r,l) for (int i=(r);i>=(l);i--)
#define fillchar(a,b) memset((a),(b),sizeof((a)))
#define pb push_back
#define F first
#define S second
#define all(x) x.begin,x.end
#define pw2(x) (1ull<<(x))
#define mp make_pair

const long double eps=1e-20;
const long double pi=acos(-1.0);
const long long inf=1000*1000*1000*1000*1000*1000;
const long long base=1000*1000*1000+7;

using namespace std;

vector < vector <int> > g(111111);
bool used[111111];
int k1,ko;
bool fl;
int n,m,x,y;

void dfs(int v){
	used[v]=true;
	foru(i,g[v].size()) if (!used[g[v][i]]){
		dfs(g[v][i]);
		break;
	}
}

void dfs2(int v){
	used[v]=true;
	foru(i,g[v].size()) if (!used[g[v][i]]) dfs2(g[v][i]);
}
		

int main(){
	ios_base :: sync_with_stdio(false);
	cin>>n>>m;
	foru(i,m){
		cin>>x>>y;
		x--; y--;
		g[x].pb(y);
		g[y].pb(x);
	}
	foru(i,n) if (g[i].size()==1){ dfs(i); break;}
	fl=true;
	foru(i,n) if (g[i].size()==1) ko++; else if (g[i].size()==2) k1++;
	foru(i,n) if (!used[i]) fl=false;
	if (fl && ko==2 && k1==n-2) { cout<<"bus topology"; return 0;}
	foru(i,n) used[i]=false;
	fl=true;
	foru(i,n) fl&=(g[i].size()==2);
	dfs2(0);
	foru(i,n) fl&=used[i];
	if (fl){ cout<<"ring topology"; return 0;}
	fl=true;
	foru(i,n) used[i]=false;
	ko=0;
	k1=0;
	foru(i,n) if (g[i].size()==1) ko++; else if (g[i].size()==n-1) k1++;
	if (ko==n-1 && k1==1){
		cout<<"star topology"; return 0;
	}
	cout<<"unknown topology";
	return 0;
}
	
