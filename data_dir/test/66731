/* winners never quit and quitters never win.
      #swap                                 */
#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef long double ld;
#pragma GCC optimize ("-O3")
#define mod 1000000007
#define inf 1000000000000000000
#define rk 256
#define pb push_back
#define mp make_pair
#define vc vector
#define fs first
#define sec second
#define pq priority_queue
#define lb lower_bound
#define ub upper_bound
#define pll pair<ll,ll> 
#define pls pair<ll,string>
#define psl pair<string,ll>
#define plc pair<ll,char>
#define pcl pair<char,ll>
#define pss pair<string,string>
#define all(v) v.begin(),v.end()
#define tol(s) transform(s.begin(),s.end(),s.begin(),::tolower);
#define tou(s) transform(s.begin(),s.end(),s.begin(),::toupper);
#define T ll t=0;cin>>t;for(ll test=0;test<t;test++)
struct vertex
{
    bool vis=false;
    ll in=0;
    ll out=0;
    vc<ll> adj;
    ll col=0;
};
vc<ll> eu,seg(3200000,0),lazy(3200000,0);
ll tim=0;

void update(ll qlow,ll qhigh,ll low,ll high,ll pos,ll val)
{
    if(low>high)
        return;
    if(lazy[pos]>0)
    {
        seg[pos]=lazy[pos];
        if(low!=high)
        {
            lazy[2*pos+1]=lazy[pos];
            lazy[2*pos+2]=lazy[pos];
        }
        lazy[pos]=0;
    }
    if(qlow>high or qhigh<low)
        return;
    if(qlow<=low and qhigh>=high)
    {
        seg[pos]=val;
        if(low!=high)
        {
            lazy[2*pos+1]=val;
            lazy[2*pos+2]=val;
        }
        return;
    }
    ll mid=(low+high)/2;
    update(qlow,qhigh,low,mid,2*pos+1,val);
    update(qlow,qhigh,mid+1,high,2*pos+2,val);
    seg[pos]=(seg[2*pos+1]|seg[2*pos+2]);
}

ll query(ll qlow,ll qhigh,ll low,ll high,ll pos)
{
    if(low>high)
        return 0;
    if(lazy[pos])
    {
        seg[pos]=lazy[pos];
        if(low!=high)
        {
            lazy[2*pos+1]=lazy[pos];
            lazy[2*pos+2]=lazy[pos];
        }
        lazy[pos]=0;
    }
    if(qlow>high or qhigh<low)
        return 0;
    if(qlow<=low and qhigh>=high)
    {
        return seg[pos];
    }
    ll mid=(low+high)/2;
    return (query(qlow,qhigh,low,mid,2*pos+1) | query(qlow,qhigh,mid+1,high,2*pos+2));
}
void dfs(vertex x[],ll sor)
{ 
    x[sor].vis=true;
    x[sor].in=tim;
    tim++;
    eu.pb(sor);

    for(auto y:x[sor].adj)
    {
        if(!x[y].vis)
        {
            dfs(x,y);
        }
    }
    x[sor].out=tim;
    tim++;
    eu.pb(sor);

}
 
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
	//isprime();
	//coeff();
	/*freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);*/
    ll n,m;
    cin>>n>>m;
    vertex x[n];
    for(ll a=0;a<n;a++)
    {
        ll b;
        cin>>b;
        x[a].col=(1LL<<b);
    }
    
    for(ll a=0;a<n-1;a++)
    {
        ll u,v;
        cin>>u>>v;
        u--,v--;
        x[u].adj.pb(v);
        x[v].adj.pb(u);
    }
    dfs(x,0*1LL);
    for(ll b=0;b<2*n;b++)
    {
        ll a=eu[b];
        update(b,b,0,2*n-1,0,x[a].col);
    }
    while(m--)
    {
        ll t;
        cin>>t;
        if(t==1)
        {
            ll ver,col;
            cin>>ver>>col;
            ver--;
            update(x[ver].in,x[ver].out,0,2*n-1,0,(1LL<<col));
        }
        else
        {
            ll ver;
            cin>>ver;
            ver--;
            cout<<__builtin_popcountll(query(x[ver].in,x[ver].out,0,2*n-1,0))<<endl;
        }
        
    }
	return 0;
}