#include <bits/stdc++.h>
using namespace std;
int gcd(int a, int b, long long &x, long long &y) {
    if (a == 0) {
        x = 0; y = 1;
        return b;
    }
    long long x1, y1;
    int d = gcd(b%a, a, x1, y1);
    x = y1 - (b / a) * x1;
    y = x1;
    return d;
}
bool find_any_solution(int a, int b, int c, long long &x0, long long &y0, long long &g) {
    g = gcd(abs(a), abs(b), x0, y0);
    if (c % g) {
        return false;
    }
    x0 *= c / g;
    y0 *= c / g;
    if (a < 0) x0 = -x0;
    if (b < 0) y0 = -y0;
    return true;
}
int k;
void print(int a,int b,int c){
	printf("%d\n",c);
	printf("%d ",a);
	printf("%d ",b);
	for(int i = 2;i < c;i++)printf("0 ");
	puts("");
	exit(0);
}
void print0(int a,int b,int c){
	printf("%d\n",c);
	printf("%d ",a);
	printf("%d ",-a);
	for(int i = 3;i < c - 1;i++)printf("0 ");
	printf("-1 %d ",b + a + 1);
	puts("");
	exit(0);
}
int main(){
// 	freopen("input.txt","r",stdin);
	cin >> k;
	for(int i = 1;i <= 1000000;i++){
		if((1 - i)/2 < -1000000)continue;
		if((1 - i)/2 >= 0)continue;
		if(i + (1 - i)/2*2 != k)continue;
		if(i - (1 - i)/2 > 0)continue;
		puts("2");
		cout << i << " " << (1 - i)/2 << endl;
		return 0;
	}
	for(int i = 3;i <= 2000;i++){
		long long a = 0,b = 0,c = 0;
		bool is = find_any_solution(i - 1,i,k,a,b,c);
		if(!is)continue;
		int consta = i/c,constb = (i - 1)/c;
		int l = 0,r = 1e6;
		while(l <= r){
			int mid = (l + r)/2;
			long long x0 = a + mid*1LL*consta;
			long long y0 = b - mid*1LL*constb;
			long long tempa = (i - 1)*(a + mid*1LL*consta);
			long long tempb = i*(b - mid*1LL*constb);
			if(abs(x0) > 1000000)r = mid - 1;
			else if(abs(x0) > 1000000)l = mid + 1;
			else {
				if(y0 + x0 <= 0 && abs(y0 + x0) <= 1000000)print(x0,y0,i);
				if(x0 > y0 && abs(y0 + x0 + 1) <= 1000000 && y0 + x0 + 1 <= x0){
					if(i != 3)print0(x0,y0,i);
					else if(x0 + 1 <= 1000000){
						puts("3");
						cout << x0 << " " << -x0 - 1 << " " << y0 + x0 + 1 << endl;
						return 0;
					}
				}
				l = mid + 1;
			}
		}
	}
	puts("-1");
}