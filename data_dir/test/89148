                /*"Success isn't permanent, failure isn't fatal,
                                      it's the courage to continue that counts"*/
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
const ll mod=1e9+7;         
const int N=1e5+4;

typedef pair<int,int> pii;

map<pii,string> dp;

string s;

int k;

string rec(int ind,int points)
{
    if(ind==s.size())
    {
        if(points==k or points==-k)
        return "";
        
        return "-1";
    }
    
    if(points==k or points==-k)
    return "-1";
    
    if(dp.find({ind,points})!=dp.end())
    return dp[{ind,points}];
    
    string here="-1";
    
    if(s[ind]!='?')
    {
        if(s[ind]=='W')
        {
            here=rec(ind+1,points+1);
                
            if(here!="-1")
            here.pb('W');
        }
        else if(s[ind]=='L')
        {
            here=rec(ind+1,points-1);
                
            if(here!="-1")
            here.pb('L');
        }
        else
        {
            here=rec(ind+1,points);
                
            if(here!="-1")
            here.pb('D');
        }
    }
    else
    {
        string s1,s2,s3;
        
        s1=rec(ind+1,points+1); 
        
        s2=rec(ind+1,points-1); 
        
        s3=rec(ind+1,points);
        
        if(s1!="-1")
        {
            here=s1;
            
            here.pb('W');
        }
        else if(s2!="-1")
        {
            here=s2;
            
            here.pb('L');
        }
        else if(s3!="-1")
        {
            here=s3;
            
            here.pb('D');
        }
    }
    
    dp[{ind,points}]=here;
    
    return here;
}

int main()
{
    int n;
    
    scn(n); scn(k);
    
    cin>>s;
    
    string ans=rec(0,0);
    
    if(ans!="-1")
    {
        reverse(ans.begin(),ans.end());
        
        cout<<ans;
        
        return 0;
    }
    
    cout<<"NO";
    
    return 0;
}