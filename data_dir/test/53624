#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             1e9
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>


#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())

#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);

#ifdef VAMP
     #define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template < typename Arg1 >
    void __f(const char* name, Arg1&& arg1){
        cout << name << " = " << arg1 << std::endl;
    }
    template < typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names+1, ',');
        cout.write(names, comma - names) << " = " << arg1 <<" | ";
        __f(comma+1, args...);
    }
#else
    #define debug(...)
#endif

const int N = 200005;
int n , ara[N];
int col[N];

int main()
{
    #ifdef VAMP
        clock_t tStart = clock();
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    FastRead
    int t;
    cin >> t;
    while(t--){
        cin >> n;
        deque<int>D;
        for(int i = 0;i < n;i++){
            cin >> ara[i];
            D.push_back(ara[i]);
        }
        int p = 0;
        for(int i = 0;i < n;i++){
            if(ara[i] == ara[(i + 1) % n]){
                p = i;
                break;
            }
        }
        for(int i = 0;i < p;i++){
            D.push_back(D[0]);
            D.pop_front();
        }
        for(int i = 0;i < n;i++)ara[i] = D[i];
//        for(int i = 0;i < n;i++)cout << ara[i] << " ";
//        cout << "\n";

        for(int i = 0;i < n;i++){
            if(i == 0)col[i] = 1;
            else if(i == n - 1){
                if(ara[0] == ara[1]){
                    col[0] = col[i - 1];
                }else if(ara[i - 1] == ara[i - 2]){
                    col[i - 1] = col[0];
                }
                set<int>st;
                if(ara[i] != ara[i - 1])st.insert(col[i - 1]);
                if(ara[i] != ara[0])st.insert(col[0]);
                for(int j = 1;j <= 3;j++){
                    if(st.find(j) == st.end()){
                        col[i] = j;
                        break;
                    }
                }
            }else{
                if(ara[i] == ara[i - 1]){
                    col[i] = col[i - 1];
                    continue;
                }
                if(col[i - 1] == 1)col[i] = 2;
                else col[i] = 1;
            }
        }
        int ans = 0;
        for(int i = 0;i < n;i++)ans = max(ans,col[i]);
        cout << ans << "\n";
        for(int i = 0;i < n;i++)cout << col[(i - p + n) % n] << " ";
        cout << "\n";


    }

    #ifdef VAMP
        fprintf(stderr, "\n>> Runtime: %.10fs\n", (double) (clock() - tStart) / CLOCKS_PER_SEC);
    #endif
}
