#include<bits/stdc++.h>
#include<unordered_map>
using namespace std;
typedef long long ll;
const ll inf=(1ll<<60);
const ll mod=1e9+7;
const int MX=109;
int n,m,best[MX][MX],dp[MX][MX*100],k,sum[MX][MX][MX],x;
vector<int>v[MX];
int DP(int x,int y){
    if(y==0)return 0;
    if(x==n)return -inf;
    int &ret=dp[x][y];if(ret!=-1)return ret;
    ret=DP(x+1,y);
    for(int i=1;i<=v[x].size()&&y-i>=0;i++){
        ret=max(ret,DP(x+1,y-i)+best[x][i]);
    }
    return ret;
}
int main(){
    cin>>n>>m;
    for(int i=0;i<n;i++){
        scanf("%d",&k);
        while(k--){
            scanf("%d",&x);
            v[i].push_back(x);
        }
    }
    for(int i=0;i<n;i++){
        for(int j=0;j<v[i].size();j++){
            int s=0;
            for(int k=j;k<v[i].size();k++){
                s+=v[i][k];
                sum[i][j][k]=s;
            }
        }
    }
    for(int i=0;i<n;i++){
        int sz=v[i].size();
        for(int items=1;items<=sz;items++){
            for(int j=0;j<items;j++){
                best[i][items]=max(best[i][items],sum[i][0][j]+sum[i][sz-items+j+1][sz-1]);
            }
            best[i][items]=max(best[i][items],sum[i][0][items-1]);
            best[i][items]=max(best[i][items],sum[i][sz-items][sz-1]);
        }
    }
    memset(dp,-1,sizeof(dp));
    cout<<DP(0,m)<<endl;
}
