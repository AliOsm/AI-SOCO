
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define read            freopen("C:\\Users\\Dell\\Desktop\\in.txt", "r", stdin)
#define write           freopen("C:\\Users\\Dell\\Desktop\\in.txt", "w", stdout)
#define pii             pair<int , int >
#define inf             INT_MAX/3
#define in(a)           scanf("%d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%d%d", &a, &b)
#define in3(a, b, c)    scanf("%d%d%d", &a, &b, &c)
#define pn              printf("\n")
#define pr(a)           printf("%d\n", a)
#define prs(a)          printf("%d ", a)
#define pr2(a, b)       printf("%d %d\n", a, b)
#define pr3(a, b, c)    printf("%d %d %d\n", a, b, c)
#define pcs(a)          printf("Case %d: ", a)
#define MP              make_pair
#define vi              vector<int >
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define pb              push_back
#define MEM(a, b)       memset((a), (b), sizeof(a))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)
#define x               first
#define y               second

typedef long long LL;
//int  dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int  dx[]={1,1,0,-1,-1,-1,0,1,0};int dy[]={0,1,1,1,0,-1,-1,-1,0};//8 direction
//int  dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(int n, int pos) {return (n & (1<<pos))>>pos;} //typecast 1 in case of int
//int  on(int n, int pos) {return n | (1<<pos);} //typecast 1 in case of int
//int  off(int n, int pos) {return n & ~(1<<pos);} //typecast 1 in case of int
//bool operator < (const data &d) const{return cost<d.cost;} //reverse in priority queue

const int M=200100;

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

int n, permA[M], permB[M], ordA[M], ordB[M], sum[M], p[M];
ordered_set S;

void perm_to_fact(int *p, int *ord)
{
    S.clear();
    for (int i=0; i<n; i++) S.insert(i);
    for (int i=0; i<n; i++)
    {
        ord[i]=S.order_of_key(p[i]);
        S.erase(p[i]);
    }
}

void fact_to_perm(int *ord, int *p)
{
    S.clear();
    for (int i=0; i<n; i++) S.insert(i);
    for (int i=0; i<n; i++)
    {
        p[i]=*S.find_by_order(ord[i]);
        S.erase(p[i]);
    }
}

int main()
{
#ifndef ONLINE_JUDGE
    read;
#endif
    int i, j, k;

    in(n);
    for (i=0; i<n; i++) in(permA[i]);
    for (i=0; i<n; i++) in(permB[i]);

    perm_to_fact(permA, ordA);
    perm_to_fact(permB, ordB);

//    for (i=0; i<n; i++) prs(ordA[i]);pn;
//    for (i=0; i<n; i++) prs(ordB[i]);pn;

    int carry=0;
    for (i=n-1, j=1; i>=0; i--, j++)
    {
        sum[i]=(ordA[i]+ordB[i]+carry)%j;
        carry=(ordA[i]+ordB[i]+carry)/j;
    }

    fact_to_perm(sum, p);
    for (i=0; i<n; i++) prs(p[i]);
    pn;

return 0;
}
