#include<bits/stdc++.h>
#define LL long long
using namespace std;

const int N = 3000+7;
const int M = 1e9+7;
int n;
int x[N], y[N];

int power(int a, int p)
{
    int ans = 1, pa = a;
    for (int i=0; i<30; i++) {
        if (p & (1<<i)) ans = (1LL*ans * pa)%M;
        pa = (1LL*pa*pa)%M;
    }
    return ans%M;
}

unordered_map<int, int> mp;
int inverse(int a)
{
    if (mp.count(a))    return mp[a];
    return mp[a] = power(a, M-2);
}

int f(int v)
{
    int ans = 0;
    for (int i=0; i<n; i++)
    {
        int cof = 1;
        for (int j=0; j<n; j++)
            if (i != j) {
                int inv = inverse(x[i] - x[j]);
                int mul = (1LL * (v - x[j]) * inv)%M;
                cof = (1LL * mul*cof)%M;
            }
        ans = (ans + 1LL * cof * y[i])%M;
    }
    return (ans+M)%M;
}


int par[N];
vector<int> adj[N];
LL dp[N][N];

void dfs(int u)
{
    for (auto v: adj[u])
        if (v!=par[u])
            dfs(v);

    for (int i=1; i<=n; i++) {
        LL cur = 1;
        for (auto v: adj[u])
            if (v!=par[u])
                cur = (cur * dp[v][i])%M;
        dp[u][i] = (dp[u][i-1]+cur)%M;
    }
}

int main()
{
    LL D;
    cin>>n>>D;
    //n = 3000, D = 5518181;

    for (int i=2; i<=n; i++)
    {
        cin>>par[i];
       // par[i] = 1+rand()%(i-1);
        adj[par[i]].push_back(i);
        adj[i].push_back(par[i]);
    }

    dfs(1);
    n++;
    for (int i=0; i<=n; i++)
        x[i] = i, y[i] = dp[1][i];

    cout<<f(D)<<endl;
}
