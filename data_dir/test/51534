/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

template<ll SIZE>
struct DSU {
    ll par[SIZE], sz[SIZE];

    DSU() {
        fill(par, par + SIZE, -1);
        fill(sz, sz + SIZE, 1);
    }

    ll Find(ll v) {
        return (par[v] == -1 ? v : par[v] = Find(par[v]));
    }

    ll Union(ll v, ll u) {
        ll pv = Find(v), pu = Find(u);
        if (pv == pu) return 0;
        if (sz[pv] < sz[pu]) swap(pv, pu); // union by rank
        par[pu] = pv;
        sz[pv] += sz[pu];
        return 1;
    }

    ll getSize(ll v) {
        return sz[Find(v)];
    }
};

ll n, m, D, deg[MAXN], mark[MAXN];
vector<pair<ll, pll>> E;
map<pll, ll> inMST;
vector<ll> adj[MAXN];
DSU<MAXN> dsu;

void BFS(ll v) {
    queue<ll> Q;
    mark[v] = 1;
    Q.push(v);

    while (!Q.empty()) {
        ll v = Q.front();
        Q.pop();
        for (ll u : adj[v]) {
            if (!mark[u]) {
                mark[u] = 1;
                Q.push(u);
                cout << v << sep << u << endl;
            }
        }
    }
}

int main() {
    fast_io;

    cin >> n >> m >> D;
    for (ll i = 0; i < m; i++) {
        ll v, u;
        cin >> v >> u;
        E.push_back({(u == 1 || v == 1 ? 1e9 : 1), {v, u}});
    }
    Sort(E);

    for (ll i = 0; i < m; i++) {
        ll w = E[i].X, v = E[i].Y.X, u = E[i].Y.Y;
        if (dsu.Union(v, u)) {
            adj[v].push_back(u);
            adj[u].push_back(v);
            deg[v]++;
            deg[u]++;
            inMST[{min(v, u), max(v, u)}] = 1;
        }
    }
    if (deg[1] > D) return cout << "NO" << endl, 0;
    for (ll i = 0; i < m; i++) {
        ll w = E[i].X, v = E[i].Y.X, u = E[i].Y.Y;
        if ((u == 1 || v == 1) && inMST[{min(v, u), max(v, u)}] == 0 && deg[1] < D) {
            deg[u]++;
            deg[v]++;
            adj[v].push_back(u);
            adj[u].push_back(v);
        }
    }
    if (deg[1] != D) return cout << "NO" << endl, 0;
    cout << "YES" << endl;
    BFS(1);

    return 0;
}
/*

*/
