#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
#include <map>
#include <iostream>
#include <vector>
#include <set>
#include <functional>
#include <map>
#include <string> 
#include <stack>

using namespace std;

const int maxn = 500 + 10;

int n, m;
vector<int> g[maxn];

int was[maxn][maxn][2]; //>2?
pair<pair<int, int>, int> que[maxn * maxn + maxn * maxn], par[maxn][maxn][2];
int lt, rt;

int main() {

#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

	cin >> n >> m;

	for (int i = 0; i < m; ++i) {
		int a, b;
		scanf("%d%d", &a, &b);
		--a, --b;

		g[a].push_back(b);
		g[b].push_back(a);

	}

	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			was[i][j][0] = was[i][j][1] = -1;
		}
	}
	was[0][n - 1][0] = 0;

	//par ? init

	lt = 0, rt = 1;
	que[0] = make_pair(make_pair(0, n - 1), 0);

	while (lt < rt) {
		int i, j, t;
		i = que[lt].first.first;
		j = que[lt].first.second;
		t = que[lt].second;
		++lt;

		int step = was[i][j][t] + 1;
		int cur = t == 0 ? i : j;
		int in, jn, tn = t ^ 1;

		for (int iter = 0, sz = g[cur].size(); iter < sz; ++iter) {
			int to = g[cur][iter];

			if (t == 0) {
				in = to, jn = j;
			} else {
				in = i, jn = to;
			}

			if (was[in][jn][tn] == -1 && !(in == jn && tn == 0)) {
				was[in][jn][tn] = step;	
				par[in][jn][tn] = make_pair(make_pair(i, j), t);
				que[rt] = make_pair(make_pair(in, jn), tn);
				++rt;
			}

			if (was[n - 1][0][0] != -1) break;
		}

		if (was[n - 1][0][0] != -1) break;
	}

	if (was[n - 1][0][0] == -1) {
		cout << -1;
	} else {
		int k = was[n - 1][0][0] / 2;
		cout << k << endl;

		stack<int> fst, scd;
		pair<pair<int, int>, int> cur = make_pair(make_pair(n - 1, 0), 0);
		fst.push(cur.first.first);
		scd.push(cur.first.second);
		for (int iter = 0; iter < k; ++iter) {
			cur = par[cur.first.first][cur.first.second][cur.second];
			cur = par[cur.first.first][cur.first.second][cur.second];
			fst.push(cur.first.first);
			scd.push(cur.first.second);
		}

		while (!fst.empty()) {
			printf("%d ", fst.top() + 1);
			fst.pop();
		}

		cout << endl;

		while (!scd.empty()) {
			printf("%d ", scd.top() + 1);
			scd.pop();
		}
	}

	return 0; 
}