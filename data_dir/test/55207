#include<bits/stdc++.h>
#define left dfsdfsdf
#define right sdfsdfs
using namespace std;
const int N = 1e3;
int a[N][N], left[N][N], right[N][N], up[N][N], down[N][N], n, m, q;


int f(vector<int> &a, vector<int> &b) {
    int res = 0, l = 1e9, r = 1e9;

    for (int i = 0; i < a.size(); i++) {
        l = min(l, a[i]);
        r = min(r, b[i]);
        res = max(res, (i + 1) * (l + r - 1));
    }

    return res;
}


main() {
#ifndef ONLINE_JUDGE
    freopen("1.txt", "r", stdin);
#endif // ONLINE_JUDGE

    scanf("%d%d%d", &n, &m, &q);

    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++) {
            scanf("%d", &a[i][j]);
            if (!a[i][j]) {
                continue;
            }
            down[i][j] = left[i][j] = 1;
            if (i) {
                down[i][j] += down[i - 1][j];
            }
            if (j) {
                left[i][j] += left[i][j - 1];
            }
        }

    for (int i = n - 1; i >= 0; i--)
        for (int j = m - 1; j >= 0; j--) {
            if (!a[i][j]) {
                continue;
            }
            right[i][j] = up[i][j] = 1;
            if (i + 1 < n) {
                up[i][j] += up[i + 1][j];
            }
            if (j + 1 < m) {
                right[i][j] += right[i][j + 1];
            }
        }

    while (q--) {
        int action, x, y;
        scanf("%d%d%d", &action, &x, &y);
        x--; y--;
        if (action == 1) {
            a[x][y] ^= 1;
            for (int x1 = x; x1 < n; x1++) {
                if (!a[x1][y]) {
                    down[x1][y] = 0;
                    continue;
                }
                down[x1][y] = 1;
                if (x1) {
                    down[x1][y] += down[x1 - 1][y];
                }
            }
            for (int x1 = x; x1 >= 0; x1--) {
                if (!a[x1][y]) {
                    up[x1][y] = 0;
                    continue;
                }
                up[x1][y] = 1;
                if (x1 + 1 < n) {
                    up[x1][y] += up[x1 + 1][y];
                }
            }
            for (int y1 = y; y1 < m; y1++) {
                if (!a[x][y1]) {
                    left[x][y1] = 0;
                    continue;
                }
                left[x][y1] = 1;
                if (y1) {
                    left[x][y1] += left[x][y1 - 1];
                }
            }
            for (int y1 = y; y1 >= 0; y1--) {
                if (!a[x][y1]) {
                    right[x][y1] = 0;
                    continue;
                }
                right[x][y1] = 1;
                if (y1 + 1 < m) {
                    right[x][y1] += right[x][y1 + 1];
                }
            }
            continue;
        }
        vector<int> A, B;
        for (int x1 = x; x1 < n; x1++) {
            if (!a[x1][y]) {
                break;
            }
            A.push_back(left[x1][y]);
            B.push_back(right[x1][y]);
        }
        int ans = f(A, B);
        A.clear();
        B.clear();
        for (int x1 = x; x1 >= 0; x1--) {
            if (!a[x1][y]) {
                break;
            }
            A.push_back(left[x1][y]);
            B.push_back(right[x1][y]);
        }
        ans = max(ans, f(A, B));
        A.clear();
        B.clear();
        for (int y1 = y; y1 >= 0; y1--) {
            if (!a[x][y1]) {
                break;
            }
            A.push_back(up[x][y1]);
            B.push_back(down[x][y1]);
        }
        ans = max(ans, f(A, B));
        A.clear();
        B.clear();
        for (int y1 = y; y1 < m; y1++) {
            if (!a[x][y1]) {
                break;
            }
            A.push_back(up[x][y1]);
            B.push_back(down[x][y1]);
        }
        ans = max(ans, f(A, B));
        printf("%d\n", ans);
    }

    return 0;
}
