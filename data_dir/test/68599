#include <bits/stdc++.h>

using namespace std ;

const int MAX = 1e5 + 10 ;

int arr[MAX] ;
int n ;

long long xf , yf , ax , ay , bx , by ;
long long x , y , t;

long long dist(long long x1 , long long y1 , long long x2 , long long y2)
{
	return (abs(x2 - x1) + abs(y2 - y1)) ; 
}

bool onpath(long long x1 , long long x2 , long long x)
{
	if(x1 >= x2 && x >= x2 && x <= x1)
		return 1 ;
	if(x2 >= x1 && x >= x1 && x <= x2)
		return 1 ;
	return 0 ;
}

int main()
{
	ios_base::sync_with_stdio(0) ;
	cin.tie(0) ;
	cin>>xf>>yf>>ax>>ay>>bx>>by ; 
	cin>>x>>y>>t ;
	long long curx , cury , prvx , prvy ;
	vector< pair<long long , long long> >v ;
	bool flag = false ;
	for(int i = 0 ; ; ++i)
	{
		if(i == 0)
			curx = xf , cury = yf ;
		else
		{
			curx = prvx * ax + bx ;
			cury = prvy * ay + by ;
		}
		if(dist(x , y , curx , cury) <= t)
		{
			if(curx == x)
			{
				if(cury < y)
					v.push_back({curx , cury}) ;
				else if(cury == y)
					flag = true ;
				else
					v.push_back({curx , cury}) ;
			}
			else if(curx < x)
				v.push_back({curx , cury}) ;
			else
				v.push_back({curx , cury}) ;
		}
		else if(curx > x)
			break ;
		prvx = curx , prvy = cury ;
	}
	int ans = 0 ;
	long long x1 , y1 , x2 , y2 ;
	for(int i = 0 ; i < v.size() ; ++i)
	{
		x1 = v[i].first , y1 = v[i].second ;
		for(int j = 0 ; j < v.size() ; ++j)
		{
			int cnt = 0 ;
			x2 = v[j].first , y2 = v[j].second ;
			if(dist(x , y , x1 , y1) + dist(x1 , y1 , x2 , y2) > t)
				continue ;
			for(int k = 0 ; k < v.size() ; ++k)
			{
				if(onpath(x , x1 , v[k].first) == 1 && onpath(y , y1 , v[k].second) == 1)
					cnt++ ;
				else if(onpath(x1 , x2 , v[k].first) && onpath(y1 , y2 , v[k].second))
					cnt++ ;
			}
			ans = max(ans , cnt) ;
		}
	}
	if(flag == true)
		ans++ ;
	return cout<<ans<<"\n" , 0 ;
}		