#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
using namespace std;

string s[3];
int p[4];
int ans = 1e9;

int solve(int a, int b, int c)
{
    string t = s[a] + "#" + s[b];
    vector<int> z(t.length());
    int n = t.length();
    int ab = n - 1;
    for (int i = 1, l = 0, r = 0; i < n; ++i)
    {
        if (i <= r)
            z[i] = min(z[i - l], r - i + 1);
        while (i + z[i] < n && t[z[i]] == t[i + z[i]])
            ++z[i];
        if (i + z[i] - 1 > r)
            r = i + z[i] - 1, l = i;
        if (i + z[i] == n)
            ab = min(ab, n - 1 - z[i]);
    }
    string tmp = s[a].substr(n - 1 - ab);
    t = s[b] + tmp + "#" + s[c];
    z.clear();
    z.resize(t.length());
    n = t.length();
    int bc = n - 1;
    for (int i = 1, l = 0, r = 0; i < n; ++i)
    {
        if (i <= r)
            z[i] = min(z[i - l], r - i + 1);
        while (i + z[i] < n && t[z[i]] == t[i + z[i]])
            ++z[i];
        if (i + z[i] - 1 > r)
            r = i + z[i] - 1, l = i;
        if (i + z[i] == n)
            bc = min(bc, n - 1 - z[i]);
    }
    t = s[c] + "#" + s[b] + tmp;
    z.clear();
    z.resize(t.length());
    n = t.length();
    int cb = n - 1;
    for (int i = 1, l = 0, r = 0; i < n; ++i)
    {
        if (i <= r)
            z[i] = min(z[i - l], r - i + 1);
        while (i + z[i] < n && t[z[i]] == t[i + z[i]])
            ++z[i];
        if (i + z[i] - 1 > r)
            r = i + z[i] - 1, l = i;
        if (i + z[i] == n)
            cb = min(cb, n - 1 - z[i]);
    }
    return min(bc, cb);
}

int main()
{
    cin >> s[0] >> s[1] >> s[2];
    p[1] = 1;
    p[2] = 2;
    do
    {
        ans = min(ans, solve(p[0], p[1], p[2]));
    } while (next_permutation(p, p + 3));
    cout << ans << endl;
    return 0;
}