#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;
const int maxn = 1e6 + 8;
int type[maxn], val[maxn], n;
vector<int> adjlist[maxn], leafs;
bool change[maxn];
// AND - 0
// OR - 1
// XOR - 2
// NOT - 3
// IN - 4

void dfs(int cur) {
	if (type[cur] == 4) {
		val[cur] = adjlist[cur][0];
		return;
	}
	for (auto u : adjlist[cur])
		dfs(u);
	if (type[cur] == 3)
		val[cur] = 1 - val[adjlist[cur][0]];
	else if (type[cur] == 0)
		val[cur] = val[adjlist[cur][0]] & val[adjlist[cur][1]];
	else if (type[cur] == 1)
		val[cur] = val[adjlist[cur][0]] | val[adjlist[cur][1]];
	else
		val[cur] = val[adjlist[cur][0]] ^ val[adjlist[cur][1]];
}

int main()
{
	fastread;
	cin >> n;
	for (int i = 1; i <= n; i++) {
		string op;
		int x, y;
		cin >> op;
		if (op[0] == 'A')
			type[i] = 0;
		else if (op[0] == 'O')
			type[i] = 1;
		else if (op[0] == 'X')
			type[i] = 2;
		else if (op[0] == 'N')
			type[i] = 3;
		else
			type[i] = 4;
		if (type[i] >= 3) {
			cin >> x;
			adjlist[i].pb(x);
			if (type[i] == 4)
				leafs.pb(i);
		} else {
			cin >> x >> y;
			adjlist[i].pb(x);
			adjlist[i].pb(y);
		}
	}
	dfs(1);
	change[1] = true;
	queue<int> q;
	q.push(1);
	while (!q.empty()) {
		int cur = q.front();
		q.pop();
		if (type[cur] == 4)
			continue;
		else if (type[cur] == 3) {
			change[adjlist[cur][0]] = true;
			q.push(adjlist[cur][0]);
		} else if (type[cur] == 0) {
			if ((val[adjlist[cur][0]] & (1 - val[adjlist[cur][1]])) != val[cur]) {
				change[adjlist[cur][1]] = true;
				q.push(adjlist[cur][1]);
			}
			if ((val[adjlist[cur][1]] & (1 - val[adjlist[cur][0]])) != val[cur]) {
				change[adjlist[cur][0]] = true;
				q.push(adjlist[cur][0]);
			}
		} else if (type[cur] == 1) {
			if ((val[adjlist[cur][0]] | (1 - val[adjlist[cur][1]])) != val[cur]) {
				change[adjlist[cur][1]] = true;
				q.push(adjlist[cur][1]);
			}
			if ((val[adjlist[cur][1]] | (1 - val[adjlist[cur][0]])) != val[cur]) {
				change[adjlist[cur][0]] = true;
				q.push(adjlist[cur][0]);
			}
		} else if (type[cur] == 2) {
			if ((val[adjlist[cur][0]] ^ (1 - val[adjlist[cur][1]])) != val[cur]) {
				change[adjlist[cur][1]] = true;
				q.push(adjlist[cur][1]);
			}
			if ((val[adjlist[cur][1]] ^ (1 - val[adjlist[cur][0]])) != val[cur]) {
				change[adjlist[cur][0]] = true;
				q.push(adjlist[cur][0]);
			}
		}
	}
	for (auto u : leafs) {
		if (change[u])
			cout << 1 - val[1];
		else
			cout << val[1];
	}
	return 0;
}