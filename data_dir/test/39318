#include <cstdio>
#include <algorithm>

int const N = 100100;
int const INF = (int)1e9;

int a[N];
int dist[N];
int q[N];

int calc(int start, int n) {
	std::fill(dist, dist + N, INF);
	dist[start] = 0;
	int head = 0;
	int tail = 0;
	q[tail++] = start;
	while (head < tail) {
		int v = q[head++];
		for (int to : {v % 2 == 0 ? v / 2 : N, v * 2, v * 2 + 1}) {
			if (to < N && dist[to] == INF) {
				dist[to] = dist[v] + 1;
				q[tail++] = to;
			}
		}
	}
	int ret = 0;
	for (int i = 0; i < n; ++i) {
		ret += dist[a[i]];
		if (ret > INF) {
			ret = INF;
		}
	}
	return ret;
}

int main() {
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n; ++i) {
		scanf("%d", a + i);
	}
	int ans = calc(0, n);
	int ma = *std::max_element(a, a + n);
	for (int v = ma; v > 0; v /= 2) {
		for (int x = v; x <= ma; x *= 2) {
			ans = std::min(ans, calc(x, n));
		}
	}
	printf("%d\n", ans);
}