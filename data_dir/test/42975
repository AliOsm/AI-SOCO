/* ****revpro**** */
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")
#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define endl	   '\n'
#define pii         pair<ll,ll>
#define vi          vector<ll>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll i=a;i<b;i++)
#define repr(i,a,b) for(ll i=b-1;i>=a;i--)    
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define mii	    map<ll,ll>
using namespace std;

#define TIME        cerr << "\nTime elapsed: " << setprecision(5) <<1000.0 * clock() / CLOCKS_PER_SEC << "ms\n";
#define FAST ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define N  100005
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;  
#define ordered_set tree<double, null_type,less<double>, rb_tree_tag,tree_order_statistics_node_update> 
void solve()
{
	string s;
	cin>>s;
	ll n=sz(s);
	ll dp[n+1][3];
	rep(i,0,n+1) rep(j,0,3) dp[i][j]=hell;
	repr(i,0,n){
		rep(j,0,3) dp[i][j]=dp[i+1][j];
		dp[i][s[i]-'1']=i;
	}
	ll ans=hell;
	rep(i,0,n){
		// rep(j,0,3) cout<<dp[i][j]<<' ';
		// cout<<endl;
		ll t=*max_element(dp[i],dp[i]+3);
		ans=min(ans,t-i+1);
	}
	if(ans<=n){
		cout<<ans<<endl;
	}
	else cout<<0<<endl;
}
signed main()
{
	
		/***********************************/
    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
    mt19937_64 generator (seed);
    /***********************************/
 #ifndef ONLINE_JUDGE
      // for getting input from input.txt
     freopen("input.txt", "r", stdin);
//     // for writing output to output.txt
//     freopen("output1.txt", "w", stdout);
 #endif
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
	cin>>TESTS;
	while(TESTS--)
	{
		solve();
		
	}
	TIME
	return 0;
}