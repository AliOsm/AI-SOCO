//#pragma GCC target("avx2")
//#pragma GCC optimization("O3")
//#pragma GCC optimization("unroll-loops")
//assert(q==w) если q!=w --> runtime error
//ordered_set find_by_order() -> возвращает итератор на k-ый по величине элемент(отсчёт с нуля)
//ordered_set order_of_key() -> возвращает количество элементов в множестве,строго меньших,чем наш элемент
#include <bits/stdc++.h>
#include <random>
#include <ext/pb_ds/assoc_container.hpp>

#define pb push_back
#define F first
#define S second
#define all(x) x.begin(),x.end()
#define ub upper_bound
#define lb lower_bound
#define bit __builtin_popcount
#define memset(x) memset(x,0,sizeof(x))

using namespace std;
using namespace __gnu_pbds;

template<typename T> using ordered_set=tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());


typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<vector<int> > matrix;

inline void boost(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}

const ll maxn=3123;
const ll inf=1e9+123;
const ll linf=1e18+123;
const ll mod=1e9+7;
const double eps=1e-9;
const double pi=acos(-1);
int dx[8]={0,1,-1,0,1,-1,1,-1};
int dy[8]={1,0,0,-1,1,1,-1,-1};

int a[maxn],dp[maxn][maxn];

bool was[maxn][maxn];

int main(){
    boost();
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    int n,h,l,r;
    cin>>n>>h>>l>>r;
    for(int i=1;i<=n;i++){
        cin>>a[i];
    }
    was[1][0]=1;
    for(int i=1;i<=n;i++){
        for(int j=0;j<=h;j++){
            if(was[i][j]==1){
                int cntr=(j+a[i])%h;
                was[i+1][cntr]=1;
                dp[i+1][cntr]=max(dp[i+1][cntr],dp[i][j]+(l<=cntr && cntr<=r));

                cntr=(j+a[i]-1)%h;
                was[i+1][cntr]=1;
                dp[i+1][cntr]=max(dp[i+1][cntr],dp[i][j]+(l<=cntr && cntr<=r));
            }
        }
    }
    int ans=0;
    for(int i=0;i<=h;i++){
        ans=max(ans,dp[n+1][i]);
    }
    cout<<ans;
	exit(0);
}
