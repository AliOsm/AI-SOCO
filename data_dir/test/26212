//besmellah
#include <bits/stdc++.h>
using namespace std;

#define int long long
const int maxn = 2e5 + 5;
int seg[4 * maxn];
map <int, int> M, C;

void add(int id, int L, int R, int idx, int val) {
	if (idx < L || idx >= R)
		return;
	if (R == L + 1) {
		seg[id] += val;
		return;
	}
	int mid = (L + R) / 2;
	add(2 * id + 0, L, mid, idx, val);
	add(2 * id + 1, mid, R, idx, val);
	seg[id] = seg[2 * id] + seg[2 * id + 1];
}

int get(int id, int L, int R, int l, int r) {
	if (R <= l || r <= L || r <= l)
		return 0;
	if (L >= l && R <= r)
		return seg[id];
	int mid = (L + R) / 2;
	return get(2 * id, L, mid, l, r) + get(2 * id + 1, mid, R, l, r);
}

int32_t main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	int n;
	cin >> n;
	vector <int> compress;
	for (int i = 0; i < n; i++) {
		int a, b;
		cin >> a >> b;
		a--;
		b--;
		if (M.find(a) == M.end())
			M[a] = a;
		if (M.find(b) == M.end())
			M[b] = b;
		swap(M[a], M[b]);
		compress.push_back(a);
		compress.push_back(b);
	}
	sort(compress.begin(), compress.end());
	compress.resize(unique(compress.begin(), compress.end()) - compress.begin());
	int sz = compress.size(), ans = 0;
	compress.push_back(2e9);
	for (int i = 0; i < sz; i++) {
		C[compress[i]] = i;
	}
	for (int i = 0; i < sz; i++) {
		int id = compress[i];
		int x = M[id];
		ans += get(1, 0, sz, C[x] + 1, sz);
		add(1, 0, sz, C[x], 1);
		add(1, 0, sz, i + 1, compress[i + 1] - compress[i] - 1);
	}
	fill(seg, seg + 4 * maxn, 0);
	for (int i = sz - 1; i >= 0; i--) {
		int x = M[compress[i]];
		add(1, 0, sz, i, compress[i + 1] - compress[i] - 1);
		ans += get(1, 0, sz, 0, C[x]);
	}
	cout << ans;
}
