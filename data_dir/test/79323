#include <bits/stdc++.h>
using namespace std;
#define ll long long

vector < pair<string, ll> > Name(1010);
ll n;

vector < vector < pair<string, ll> > > a(1010);



map <string, ll> already;
map <string, ll> ::iterator ii;
int main()
{
   // freopen("input.txt","r",stdin);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin>>n;
    ll i,j;

    for(i = 1; i<=n; i++)
    {
        string w;
        ll version;
        cin>>w>>version;
        // добавление первого
        if (i == 1)
        {
            already[w] = version;
        }

        Name[i] = make_pair(w, version);
        ll m;
        cin>>m;
        for(j=0; j<m; j++)
        {
            cin>>w>>version;
            a[i].push_back(make_pair(w, version));
        }

    }

/*
    for(i = 1; i<=n; i++)
    {
        cout<<Name[i].first<<" "<<Name[i].second<<" : ";
        for(j=0; j<a[i].size(); j++)
            cout<<a[i][j].first<<" "<<a[i][j].second<<"   + ";
        cout<<endl;
    }
*/

    vector < pair <string, ll> > q;
    map < string, ll > pretendent;
    q.push_back(Name[1]);
    while (q.size() > 0) {
        ll qs = 0, qf = q.size();
        vector < pair <string, ll> > temp;
        temp.clear();
        pretendent.clear();
        while (qs < qf)
        {
            ll cur;
            for(i = 1; i<=n; i++)
            {
                if (Name[i].first == q[qs].first && Name[i].second == q[qs].second)
                    cur = i;
            }

            for(i=0; i<a[cur].size(); i++)
            {
                //ll Next = a[cur][i];
                string  task = a[cur][i].first;
                ll version = a[cur][i].second;
                if (already[task] == 0) // ещё не была выбрана
                        pretendent[task] = max(pretendent[task], version);
            }
                    // перенос в уже выбранную группу
            qs++;
        }
        q.clear();
        for(ii = pretendent.begin(); ii!=pretendent.end(); ii++)
        {
            string task = ii->first;
            ll version = ii->second;
            already[task] = version;
            q.push_back( make_pair(task, version) );

        }
    }

    // удаление первого, если он есть
    if ( already[ Name[1].first ] == Name[1].second)
        already.erase( Name[1].first );

    cout<<already.size()<<endl;
    for(ii = already.begin(); ii!=already.end(); ii++)
    {
        cout<<ii->first<<" "<<ii->second<<endl;
    }


    return 0;
}
