#include <set>
#include <bitset>
#include <queue>
#include <deque>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>

#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cstring>
#include <string>

#include <vector>
#include <list>
#include <map>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>

using namespace std;

#define FORN(i,a,b) for (int i=(a),_b=(b); i<_b; i++)
#define DOWN(i,b,a) for (int i=(b)-1,_a=(a); i>=_a; i--)
#define RESET(a,b) memset((a),(b),sizeof(a))

#define MX(X,Y) X=max((X),(Y))
#define MN(X,Y) X=min((X),(Y))

#define fs first
#define sc second

#define MAXI 1000000000
#define ULL unsigned long long

#define SC(x) scanf("%d",&x)
#define SC2(x,y) scanf("%d%d",&x,&y)
#define PR(x) printf("%d ",x)
#define PR2(x,y) printf("%d %d ",x,y)
#define PRS(x) printf("%s ",x)
#define END printf("\n")

#define PB push_back
#define MP make_pair
#define ALL(x) (x).begin(),(x).end()

const double pi = acos(-1.0); //NOTES:pi
const double eps = 1e-11; //NOTES:eps
typedef long long int64; //NOTES:int64
typedef unsigned long long uint64; //NOTES:uint64

template<typename T> inline void DebM(T A[], T ii, T jj){//Debug sequence
    END;PRS("----------------DEBUG----------------");END;
    FORN (i,ii,jj) PR(A[i]);
    END;PRS("-------------------------------------");END;
}

template<typename T> inline void DebF(T n){//Debug element
    END;PRS("----------------DEBUG----------------");END;
    PR(n);
    END;PRS("-------------------------------------");END;
}

template<class T> inline T sqr(T x){//NOTES:sqr
    return x*x;
}

template<class T> inline T multiplyMod(T a,T b,T m) {return 
(T)((((int64)(a)*(int64)(b)%(int64)(m))+(int64)(m))%(int64)(m));}//NOTES:multiplyMod(

template<class T> inline vector<pair<T, int> > factorize(T n){//NOTES:factorize(
    vector<pair<T, int> > R;
    for (T i = 2; n > 1;) {
        if (n % i == 0) {
            int C = 0;
            for (; n % i == 0; C++, n /= i);
            R.push_back(make_pair(i, C));
        }
        i++;
        if (i > n / i) i = n;
    }
    if (n > 1) R.push_back(make_pair(n, 1));
    return R;
}

template<class T> inline bool isPrimeNumber(T n){//NOTES:isPrimeNumber(
    if (n <= 1)return false;
    for (T i = 2; i * i <= n; i++) if (n % i == 0) return false;
    return true;
}

template<class T> inline T powerMod(T p, int e, T m){//NOTES:powerMod(
    if (e == 0)return 1 % m;
    else if (e % 2 == 0) {
        T t = powerMod(p, e / 2, m);
        return multiplyMod(t, t, m);
    } else return multiplyMod(powerMod(p, e - 1, m), p, m);
}

double dist(double x1, double y1, double x2, double y2) {//NOTES:dist(
    return sqrt(sqr(x1 - x2) + sqr(y1 - y2));
}

double distR(double x1, double y1, double x2, double y2) {//NOTES:distR(
    return sqr(x1 - x2) + sqr(y1 - y2);
}

template<class T> T cross(T x0, T y0, T x1, T y1, T x2, T y2) {//NOTES:cross(
    return (x1 - x0)*(y2 - y0)-(x2 - x0)*(y1 - y0);
}

int crossOper(double x0, double y0, double x1, double y1, double x2, double y2){//NOTES:crossOper(
    double t = (x1 - x0)*(y2 - y0)-(x2 - x0)*(y1 - y0);
    if (fabs(t) <= eps) return 0;
    return (t < 0) ? -1 : 1;
}

bool isIntersect(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4){//NOTES:isIntersect(
    return crossOper(x1, y1, x2, y2, x3, y3) * crossOper(x1, y1, x2, y2, x4, y4) < 0 && crossOper(x3, y3, x4, y4, x1, y1) * crossOper(x3, y3, x4, y4, x2, y2) < 0;
}

bool isMiddle(double s, double m, double t) {//NOTES:isMiddle(
    return fabs(s - m) <= eps || fabs(t - m) <= eps || (s < m) != (t < m);
}

//Translator
bool isUpperCase(char c) {
    return c >= 'A' && c <= 'Z';
}//NOTES:isUpperCase(

bool isLowerCase(char c) {
    return c >= 'a' && c <= 'z';
}//NOTES:isLowerCase(

bool isLetter(char c) {
    return c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z';
}//NOTES:isLetter(

bool isDigit(char c) {
    return c >= '0' && c <= '9';
}//NOTES:isDigit(

char toLowerCase(char c) {
    return (isUpperCase(c)) ? (c + 32) : c;
}//NOTES:toLowerCase(

char toUpperCase(char c) {
    return (isLowerCase(c)) ? (c - 32) : c;
}//NOTES:toUpperCase(

template<class T> string toString(T n) {
    ostringstream ost;
    ost << n;
    ost.flush();
    return ost.str();
}//NOTES:toString(

int toInt(string s) {
    int r = 0;
    istringstream sin(s);
    sin >> r;
    return r;
}//NOTES:toInt(

int64 toInt64(string s) {
    int64 r = 0;
    istringstream sin(s);
    sin >> r;
    return r;
}//NOTES:toInt64(

double toDouble(string s) {
    double r = 0;
    istringstream sin(s);
    sin >> r;
    return r;
}//NOTES:toDouble(

int main(){
    int ans=0,a,A[20];
    string b;
    SC(a);
    cin>>b;
    int i=0;
    while (a!=0){
        A[i++]=a%10;
        a/=10;
    }
    sort(A,A+i);
    int  j=0;
    while (A[j]==0) j++;
    ans=A[j];
    int t=0;
    while (t!=i){
        if (t!=j)
            ans=ans*10+A[t];
        t++;
    }
    if (i==0) ans=0;
    PRS(toString(ans)==b?"OK":"WRONG_ANSWER");
}