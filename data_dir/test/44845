#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define forq(i , a , b) for (int i = (a); i <= (b); ++i)
#define forr(i , b) forq( i , 0 , b - 1 )
#define F first
#define S second
#define IF -> F
#define IS -> S
#define qqmemset(array , val) memset (array , val , sizeof(array))
#define ALLV(vect) vect.begin() , vect.end()
#define mid (st + en) / 2
#define lef 2 * Node
#define rig lef + 1
#define Parent Node + (Node & (~Node + 1))
#define Neig Node - (Node & (~Node + 1))

ll R = 7 + 1e9 , NUMTESTCASE ;
const int NN = 10 + 1e6 ;
const double pi = acos(-1.0) ;
int di [4] = {1 , 0 , -1 , 0} , dj [4] = {0 , 1 , 0 , -1} , DI [8] = {1 , 1 , 0 , -1 , -1 , -1 , 0 , 1} , DJ [8] = {0 , 1 , 1 , 1 , 0 , -1 , -1 , -1} ;
using namespace std;
string t ;
bool check (int st , int en) {
    if (st >= en) return true ;
    return (t [st] == t [en]) && check(st + 1 , en - 1) ;
}
string mx (string s) {
    vector <int> Draft ;
    t = s ;
    forr (i , s.size ()) if (s[i] == s[0]) Draft.push_back(i) ;
    int j = Draft.size() - 1 ;
    while (!check(0 , Draft[j])) j -- ;
    string Res = "" ;
    forq (i , 0 , Draft [j]) Res += s [i] ;
    return Res ;
}

int main()
{
    ios_base::sync_with_stdio(false); cin.tie(NULL);
    for (cin >> NUMTESTCASE ; NUMTESTCASE ; NUMTESTCASE --) {
        string s ;
        cin >> s ;
        string r = s ;
        t = s ;
        reverse(ALLV(r)) ;
        if (r == s) {
            cout << r << "\n" ;
            continue ;
        }
        int u = 0 , v = s.size () - 1 ;
        string l = "" ; r = "" ;
        while (s[u] == s[v]) {
            l += s[u] ; u ++ ;
            r += s[v] ; v -- ;
        }
        string sti = "" , res = l ;
        reverse(ALLV(r)) ;
        while (u != v + 1) sti += s[u ++] ;
        string s1 = mx (sti) ;
        reverse(ALLV(sti)) ;
        string s2 = mx (sti) ;
        if (s1.size () > s2.size ()) res += s1 ;
        else res += s2 ;
        res += r ;
        string res1 = mx (s) ;
        reverse(ALLV(s)) ;
        string res2 = mx (s) ;
        if (res.size () < max (res1.size () , res2.size())) {
            if (res1.size () > res2.size ()) cout << res1 ;
                else cout << res2 ;
        } else cout << res ;
        cout << endl ;
    }
    return 0;
}
