#include <bits/stdc++.h>
using namespace std;

int const N = 2e3 + 10;

typedef pair <int, int> pii;

int n, m;
char s[N][N];

int mrk[N][N];
bool cicle = false;

int dp[N][N];
pii p[N][N];

void dfs (int x, int y)
{
	mrk[x][y] = 1;

	int i = x, j = y;

	if (s[x][y] == '>')
		j++;

	if (s[x][y] == '<')
		j--;

	if (s[x][y] == '^')
		i--;

	if (s[x][y] == 'v')
		i++;

	if (mrk[i][j] == 1)
	{
		cicle = true;
		return;
	}

	if (s[i][j] != '#')
	{
		dfs (i, j);
		dp[x][y] = dp[i][j] + 1;
		p[x][y] = p[i][j];
	}
	else
	{
		dp[x][y] = 1;
		p[x][y] = pii (x, y);
	}

	mrk[x][y] = 2;
}

int dx[] = {0, 0, -1, 1};
int dy[] = {-1, 1, 0, 0};

void solve ()
{
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if (!mrk[i][j] && s[i][j] != '#')
			{

				bool jump = false;

				for (int k = 0; k < 4; k++)
				{
					int x = i + dx[k];
					int y = j + dy[k];

					if (x < 0 || y < 0 || x >= n || y >= m)
						continue;

					if (s[x][y] == '>')
						y++;

					if (s[x][y] == '<')
						y--;

					if (s[x][y] == '^')
						x--;

					if (s[x][y] == 'v')
						x++;

					if (x == i && y == j)
						jump = true;
				}

				if (jump)
					continue;

				dfs (i, j);
				if (cicle)
				{
					printf ("-1\n");
					return;
				}
			}

	int len = 0, x = -1, y = -1;

	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if (s[i][j] != '#' && dp[i][j] > len)
			{
				len = dp[i][j];
				x = i;
				y = j;
			}

	bool find = false;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if (s[i][j] != '#' && dp[i][j] == len && p[i][j] != p[x][y])
				find = true;

	if (!len)
	{
		printf ("0\n");
		return;
	}

	if (find)
		printf ("%d\n", len + len);
	else
		printf ("%d\n", len + len - 1);
}

int main ()
{
	scanf ("%d %d", &n, &m);

	for (int i = 0; i < n; i++)
		scanf (" %s", s[i]);

	solve ();

	return 0;
}