#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define INF 2000000000
#define MOD 1000000007
#define DESPACITO 1000000000000000000
#define ll long long
#define pb push_back
#define mp make_pair
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)

 
using namespace std;
//using namespace __gnu_pbds;

//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;

/*
struct Point
{
    int x,y;
    
    Point(int a,int b) {
        x = a;
        y = b;
    }
};

struct PointMethods
{
    Point a, b;
    int dot,cross,distance;

    PointMethods(Point x,Point y) {
        a = x;
        b = y;
        dot = (((a.x) * (b.x)) +  ((a.y) * (b.y)));
        cross = ((a.x) * (b.y) - (a.y) * (b.x));
        int u = (a.x) - (b.x);
        int v = (a.y) - (b.y);
        distance = sqrt(1.0 * u * u + 1.0 * v * v); 
    }
};

struct Line
{
    int a,b,c;

    Line(int x,int y,int z) {
        a = x;
        b = y;
        c = z;
    }

    Line(Point A, Point B) {
        a = B.y - A.y;
        b = B.x - A.x;
        c = -a * (A.x) - b * (A.y);
    }

};

struct LineMethods
{
    Line a, b;

    LineMethods(Line x,Line y) {
        a = x;
        b = y;
    }

    Point intersection() {
        a = B.y - A.y;
        b = B.x - A.x;
        c = -a * (A.x) - b * (A.y);
    }
    
};

struct LineSegment
{
    int a,b,c;

};*/

int main()
{
    IOS;
    #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
    #endif
    int t;
    cin >> t;
    while(t--)
    {
        string s;
        cin >> s;
        int u = 0, d = 0, l = 0, r = 0;
        REP(i,0,s.length()-1)
        {
            if(s[i] == 'U')
                u++;
            else if(s[i] == 'D')
                d++;
            else if(s[i] == 'R')
                r++;
            else
                l++;
        }
        int us = min(u,d),ls = min(r,l);
        if(us == 0)
        {
            ls = min(ls,1);
            string ans = "";
            REP(i,0,ls-1)
                ans += "R";
            REP(i,0,ls-1)
                ans += "L";
            cout << (ans.length()) << "\n";
            cout << ans << "\n";
            continue;
        }
        if(ls == 0)
        {
            us = min(us,1);
            string ans = "";
            REP(i,0,us-1)
                ans += "U";
            REP(i,0,us-1)
                ans += "D";
            cout << (ans.length()) << "\n";
            cout << ans << "\n";
            continue;
        }
        string ans = "";
        REP(i,0,us-1)
            ans += "U";
        REP(i,0,ls-1)
            ans += "R";
        REP(i,0,us-1)
            ans += "D";
        REP(i,0,ls-1)
            ans += "L";
        cout << (ans.length()) << "\n";
        cout << ans << "\n";
    }
}