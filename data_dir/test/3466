#include <iostream>
#include <vector>
#include <complex>
#include <map>
#include <algorithm>
#include <cassert>
#include <functional>
#include <set>
#include <iomanip>
#include <unordered_map>
#include <cstring>
#include <bitset>
#include <numeric>
#include <queue>

using namespace std;

typedef unsigned long long ULong;
typedef long long Long;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
typedef pair<int,PII> PIP;

using namespace std;

struct LinearSieve {
    VI primes, primeFactor;

    LinearSieve(int L) : primeFactor(L + 1) {
        for (int i = 2; i < primeFactor.size(); ++i) {
            if (primeFactor[i] == 0) primes.push_back(primeFactor[i] = i);
            for (int j = 0; j < primes.size() && primes[j] <= primeFactor[i] &&
                            i * primes[j] <= L; ++j)
                primeFactor[i * primes[j]] = primes[j];
        }
    }

    VI factors(int n) {
        VI F;
        while (n > 1) F.push_back(primeFactor[n]), n /= primeFactor[n];
        return F;
    }


    VI distinctFactors(int n) {
        VI R = factors(n);
        R.erase(unique(R.begin(), R.end()), R.end());
        return R;
    }

    void rec(vector<int> &V, int tp, int id, int c, VI &A) {
        if (id == V.size()) {
            A.push_back(c);
        } else {
            rec(V, 0, id + 1, c, A);
            if (tp == 1 || V[id] != V[id - 1])
                rec(V, 1, id + 1, c * V[id], A);
        }
    }

    VI divisors(int n) {
        VI f = factors(n), R;
        rec(f, 1, 0, 1, R);
        sort(R.begin(), R.end());
        return R;
    }
};

int coprimes(int A, int B, const VI &F) {
    VI M(1<<F.size());
    M[0] = 1;
    int an = B - A + 1;
    for (int i = 1; i < (1 << F.size()); ++i) {
        int lb = i & -i;
        int lbid = 31 - __builtin_clz(lb);
        int sz = __builtin_popcount(i);
        M[i] = M[i ^ lb] * F[lbid];
        an += ((sz % 2 == 0) ? 1 : -1) * (B / M[i] - (A-1) / M[i]);
    }
    return an;
}


int main() {

    LinearSieve L(1000000);
    int N;
    cin >> N;
    for (int i = 0; i < N; ++i) {
        int x, p, k;
        cin >> x >> p >> k;
        VI D = L.distinctFactors(p);
        int lo = x, hi = 1000000000;
        int ret = -1;
        while (lo <= hi) {
            int m = (lo + hi) / 2;
            if (coprimes(x+1, m, D) >= k) {
                ret = m;
                hi = m - 1;
            } else {
                lo = m + 1;
            }
        }
        cout << ret << endl;
    }


}