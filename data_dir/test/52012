/*input
4
-4 -2 4 5


5
-1 -2 -1 -2 -1

3
1 3 1
*/
#include <bits/stdc++.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define N 4005
#define bit(x,y) ((x>>y)&1LL)
#define loop(x) for(int xv=1; xv<=x; xv++)

#define what_is(x) cerr << #x << " is " << x << endl;
#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
    cerr << *it << " = " << a << endl;
    err(++it, args...);
}
template <class T1, class T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &a) {
    return os << '(' << a.first << ", " << a.second << ')';
}
template <class T>
ostream &operator<<(ostream &os, const vector<T> &a) {
    os << '[';
    for (unsigned int i = 0; i < a.size(); i++)
        os << a[i] << (i < a.size() - 1 ? ", " : "");
    os << ']';
    return os;
}
template <class T>
ostream &operator<<(ostream &os, const set<T> &a) {
    os << '{';
    for (typename set<T>::iterator it = a.begin(); it != a.end(); it++) {
        typename set<T>::iterator jt = it;
        os << *it << (++jt != a.end() ? ", " : "");
    }
    os << '}';
    return os;
}
template <class T1, class T2>
ostream &operator<<(ostream &os, map<T1, T2> &a) {
    os << "{\n";
    for (typename map<T1, T2>::iterator it = a.begin(); it != a.end(); it++) {
        typename map<T1, T2>::iterator jt = it;
        os << "  " << it->first << ": " << it->second << (++jt != a.end() ? ",\n" : "\n");
    }
    os << '}';
    return os;
}

int dp[N][105][92][2];
int sum[N], a[N];
int n;

int getSum(int l, int r) {
    return sum[r] - sum[l - 1];
}

const int offset = 100;
int mxfx = -1e9;
int cal(int l, int lx, int pre, int wh) {

    // lx = (l-1)-(n-r) l+r-n-1
    // lx = l+r - n - 1 => r = lx-l+n+1
    int r = lx - l + n + 1;
    if (wh == 0) {
        if (l + pre - 1 > r) return 0;
        mxfx = max(mxfx, lx);
        int &ret = dp[l][lx + offset][pre][0];
        if (ret != -1) return ret;
        ret = -1e9;
        int nl = l + pre - 1;
        if (nl <= r)
            ret = max(ret, sum[nl] - sum[l - 1] + cal(nl + 1, nl + r - n , pre, 1));
        nl = l + pre;
        if (nl <= r)
            ret = max(ret, sum[nl] - sum[l - 1] + cal(nl + 1, nl + r - n, pre + 1, 1));
        return ret;
    }
    else {
        if (r - pre + 1 < l) return 0;
        int &ret = dp[l][lx - pre + offset][pre][1];
        if (ret != -1) return ret;
        ret = 1e9;
        int nr = r - pre + 1;
        if (nr >= l)
            ret = min(ret, sum[nr - 1] - sum[r] + cal(l, l + nr - n - 2, pre, 0));
        nr = r - pre;
        if (nr >= l)
            ret = min(ret, sum[nr - 1] - sum[r] + cal(l, l + nr - n - 2, pre + 1, 0));
        return ret;
    }
    assert(false);
}

signed main() {
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
#ifdef in1code
    freopen("1test.inp", "r", stdin);
#endif
    cin >> n;
    for (int i = 1; i <= n; i++) cin >> a[i], sum[i] = sum[i - 1] + a[i];
    memset(dp, -1, sizeof(dp));
    cout << cal(1, 0, 1, 0) << endl;
    // cout << 1.0 * clock() / CLOCKS_PER_SEC << endl;
}