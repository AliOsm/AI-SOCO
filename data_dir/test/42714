#include <bits/stdc++.h>

#define SZ(x) ((int(x.size())))

typedef long long ll;

using namespace std;

const int maxn = 510, INF = 1*1000*1000*1000+10;
vector <int> vec[maxn], pa, pb;
int n, m, u, v, d[maxn][maxn][2];
pair <pair <int, int>, bool> par[maxn][maxn][2], cur;
queue <pair <pair <int, int>, bool> > q;
bool mark[maxn][maxn][2];

inline void bfs ()
{
	while (!q.empty())
	{
		cur = q.front();
		q.pop();
		if (cur.second)
		{
			for (int i = 0; i < SZ(vec[cur.first.second]); i++)
			{
				if (vec[cur.first.second][i] != cur.first.first && !mark[cur.first.first][vec[cur.first.second][i]][0])
				{
					mark[cur.first.first][vec[cur.first.second][i]][0] = 1;
					par[cur.first.first][vec[cur.first.second][i]][0] = cur;
					q.push ({{cur.first.first, vec[cur.first.second][i]}, 0});
					d[cur.first.first][vec[cur.first.second][i]][0] = d[cur.first.first][cur.first.second][1] + 1;
				}
			}
		}
		else
		{
			for (int i = 0; i < SZ(vec[cur.first.first]); i++)
			{
				if (!mark[vec[cur.first.first][i]][cur.first.second][1])
				{
					mark[vec[cur.first.first][i]][cur.first.second][1] = 1;
					par[vec[cur.first.first][i]][cur.first.second][1] = cur;
					q.push ({{vec[cur.first.first][i], cur.first.second}, 1});
					d[vec[cur.first.first][i]][cur.first.second][1] = d[cur.first.first][cur.first.second][0] + 1;
				}
			}
		}
	}
}

int main()
{
	ios::sync_with_stdio(0);
	memset (d, 63, sizeof d);
	cin >> n >> m;
	for (int i = 0; i < m; i++)
	{
		cin >> u >> v;
		u--;
		v--;
		vec[u].push_back (v);
		vec[v].push_back (u);
	}
	d[0][n - 1][0] = 0;
	par[0][n - 1][0] = {{-1, -1}, 0};
	mark[0][n - 1][0] = 1;
	q.push ({{0, n - 1}, 0});
	bfs ();
	if (d[n - 1][0][0] > INF)
	{
		cout << -1;
		return 0;
	}
	cout << d[n - 1][0][0] / 2 << endl;
	cur = {{n - 1, 0}, 0};
	while (par[cur.first.first][cur.first.second][cur.second].first.first != -1)
	{
		if (cur.second)
			pa.push_back (cur.first.first + 1);
		else
			pb.push_back (cur.first.second + 1);
		cur = par[cur.first.first][cur.first.second][cur.second];
	}
	cout << 1;
	for (int i = SZ(pa) - 1; i >= 0; i--)
		cout << " " << pa[i];
	cout << endl << n;
	for (int i = SZ(pb) - 1; i >= 0; i--)
		cout << " " << pb[i];
	return 0;
}
