#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

const int N = 1e5 + 10;
char s[N], t[N];

int main() {
  scanf("%s", s);
  int n = strlen(s);
  int m = 0;
  for (int i = 0; i < n; ++i) {
    if (s[i] != 'a') t[m++] = s[i];
  }
  if (m % 2) {
    puts(":(");
    return 0;
  }
  m /= 2;
  bool found = false;
  for (int i = 0; i < m; ++i) {
    if (t[i] != t[i + m]) found = true;
  }
  for (int i = n - 1; i >= n - m; --i) {
    if (s[i] == 'a') found = true;
  }
  s[n - m] = 0;
  puts(found ? ":(" : s);
  return 0;
}
