#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 80 + 7;
const int INF = 1e9 + 7;

int edge[N][N];

int dp[N][N][2][N];

int main()
{
	ios::sync_with_stdio(false);

	int n, k;
	cin >> n >> k;
	int m;
	cin >> m;
	memset(edge, 63, sizeof edge);
	for (int i=0; i<m; i++)
	{
		int u, v, c;
		cin >> u >> v >> c;
		u--, v--;
		edge[u][v] = min(edge[u][v], c);
	}


	memset(dp, 63, sizeof dp);
	for (int i=0; i<n; i++)
		for (int j=i+1; j<=n; j++)
			for (int k=0; k<2; k++)
				dp[i][j][k][0] = 0;
	int ans = INF;
	for (int j=1; j<=n; j++)
		for (int i=j-1; i>=0; i--)
		{
			for (int k=i+1; k<j; k++)
				for (int l=1; l<n; l++)
				{
					dp[i][j][0][l] = min(dp[i][j][0][l], dp[i+1][k+1][1][l-1] + edge[i][k]);
					dp[i][j][0][l] = min(dp[i][j][0][l], dp[k][j][0][l-1] + edge[i][k]);
				}
			for (int k=i; k < j-1; k++)
				for (int l=1; l<n; l++)
				{
					dp[i][j][1][l] = min(dp[i][j][1][l], dp[i][k+1][1][l-1] + edge[j-1][k]);
					dp[i][j][1][l] = min(dp[i][j][1][l], dp[k][j-1][0][l-1] + edge[j-1][k]);
				}
			/*for (int k=0; k<2; k++)
				for (int l=0; l<n; l++)
					cout << i << " " << j << " " << k << " " << l << " : " << dp[i][j][k][l] << "\n";*/
			ans = min(ans, dp[i][j][0][k-1]);
			ans = min(ans, dp[i][j][1][k-1]);
		}
	if (ans == INF)
		cout << "-1\n";
	else
		cout << ans << "\n";


	return 0;
}
