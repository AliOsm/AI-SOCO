#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC optimization ("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define rep(i,a,b) for(int i = (a); i < (b); i++)
#define iter(it,c) for(auto it = (c).begin(); it != (c).end();++it)
#define pb push_back
#define fs first
#define sc second
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vii> vvii;

const int INF = ~(1<<31);
const double pi = acos(-1);
const double EPS = 1e-9;
typedef unsigned long long ull;

template <class T> T smod(T a, T b) {
  return (a % b + b) % b; }

map<int,vi> L;

int c(string s) {
    string v = "aeoiu";
    int nm = 0;
    rep(i,0,size(s)) {
        rep(j,0,size(v)) if(s[i] == v[j]) nm++;
    }
    return nm;
}

int last(string s) {
    string v = "aeoiu";
    for(int i = int(size(s))-1; i >= 0; i--) {
        rep(j,0,size(v)) if(s[i] == v[j]) return j;
    }
    return 0;
}

int A1[100'050];
int A2[100'050];
int A3[100'050];
int A4[100'050];

int main() {
    cin.sync_with_stdio(false);
    vector<string> k;
    int n;
    cin >> n;
    rep(i,0,n) {
        string s;
        cin >> s;
        k.pb(s);
        L[c(s)].pb(i);
    }
    /*
    iter(it,L) {
        cout << it->first << endl;
        vi EE = it->second;
        iter(it2,EE) cout << k[*it2] << " ";
        cout << endl;
    }*/
    vector<int> DA;
    vector<int> LO;
    int nmgood = 0;
    iter(it,L) {
        vi EMPT;
        vi H = it->second;
        vvi D;
        vi E;
        rep(i,0,5) D.pb(E);
        iter(it2,H) D[last(k[*it2])].pb(*it2);
        rep(i,0,5) {
            int nm = size(D[i]);
            if(nm % 2 == 1) {
                EMPT.pb(D[i][nm-1]);
                D[i].pop_back();
                nm--;
            }
            rep(j,0,nm/2) {
                DA.pb(D[i][j*2]);
                DA.pb(D[i][j*2+1]);
            }
        }
        int nm = size(EMPT);
        if(nm%2 == 1) {
            EMPT.pop_back();
        }
        iter(it,EMPT) LO.pb(*it);
    }
    int sol = 0;
    //rep(i,0,size(DA)) cout << k[DA[i]] << " ";
    //cout << endl;
    while(true) {
        if(size(DA) >= 2 && size(LO) >= 2) {
            A1[sol] = LO.back();
            LO.pop_back();
            A2[sol] = DA.back();
            DA.pop_back();
            A3[sol] = LO.back();
            LO.pop_back();
            A4[sol] = DA.back();
            DA.pop_back();
        } else if(size(DA) >= 4) {
            A1[sol] = DA.back();
            DA.pop_back();
            A3[sol] = DA.back();
            DA.pop_back();
            A2[sol] = DA.back();
            DA.pop_back();
            A4[sol] = DA.back();
            DA.pop_back();
        
        } else break;
        sol++;
    }
    cout << sol << endl;
    rep(i,0,sol) {
        cout << k[A1[i]] << " " << k[A2[i]] << endl;
        cout << k[A3[i]] << " " << k[A4[i]] << endl;
    }

    return 0;
}












