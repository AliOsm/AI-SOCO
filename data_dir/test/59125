#include <bits/stdc++.h>

#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

typedef long long ll;
typedef pair<int, int> ii;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 4444;

int n, k;
int f[N];
int nf[N];
int s[N][N];

int q[N];

int cost(int from,int to){
    return s[to][to] - s[from][to] - s[to][from] + s[from][from];
}

int eval(int i,int to){
    return f[i] + cost(i, to);
}

int get_x(int i,int j){
    int l = j - 1, r = n + 1;
    while(l + 1 < r){
        int m = (l + r) >> 1;
        if(eval(i, m) > eval(j, m))
            r = m;
        else
            l = m;
    }
    return r;
}

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    n = read();
    k = read();

    char c;
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= n; j++){
            c = getchar();
            while(c < '0' || c > '9')
                c = getchar();
            s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + c - '0';
        }
    }

    for(int i = 1; i <= n; i++)
        f[i] = cost(0, i);
    for(int qq = 2; qq <= k; qq++){
        int b = 1, e = 0;
        for(int i = 1; i <= n; i++){
            while(b + 1 <= e && eval(q[b + 1], i) < eval(q[b], i))
                ++b;
            nf[i] = eval(q[b], i);
            while(e - b + 1 >= 2 && get_x(q[e], i) < get_x(q[e - 1], q[e]))
                --e;
            q[++e] = i;
        }
        for(int i = 0; i <= n; i++)
            f[i] = nf[i];
    }

    printf("%d\n", f[n] >> 1);

    return 0;
}
