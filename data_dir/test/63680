#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
typedef long long ll;

using namespace std;

ll a[200005];
ll b[200005];
map <ll, int> lazem;
map <ll, bool> mohem;
vector <ll> ans;

int main()
{
    ll n, m, p;
    cin >> n >> m >> p;    
    for (int i = 0; i<n; i++)
        cin >> a[i];
    for (int i = 0; i<m; i++)
    {
        cin >> b[i];
        mohem[ b[i] ] = true;
        lazem[ b[i] ]++;
    }
    for (int i = 0; i<p; i++)
    {
        if (i + (m-1)*p >= n)
            continue;
        map <ll, int> tedad;
        ll sum = 0;
        for (int j = 0; j<m; j++)
        {
            int now = i + j*p;
            if (mohem.find( a[now] ) != mohem.end())
            {
                if (tedad[ a[now] ] < lazem[ a[now] ])
                    sum++;
                tedad [ a[now] ]++;
            }
        }
        ll start = i;        
        do
        {
//            cout << start << ' ' << sum << endl;
            if (sum == m)
                ans.push_back(start);
            ll jadid = start + m*p;
            if (mohem.find( a[start] ) != mohem.end())
            {
                if (tedad[ a[start] ] <= lazem[ a[start] ])
                    sum--;
                tedad[ a[start] ]--;
            }
            if (jadid >= n)
            {
                start += p;
                continue;
            }
            if (mohem.find( a[jadid] ) != mohem.end())
            {
                if (tedad[ a[jadid] ] < lazem[ a[jadid] ])
                    sum++;
                tedad [ a[jadid] ]++;
            }
            start += p;
        }while (start + (m-1)*p < n);
    }
    sort(ans.begin(), ans.end());
    cout << ans.size() << endl;
    for (int i = 0; i<ans.size(); i++)
        cout << ans[i] + 1 << ' ';
    cout << endl;
    return 0;
}
