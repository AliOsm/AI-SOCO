#include <bits/stdc++.h>

using namespace std;
int p[210];


int main()
{
    int t;
    cin >> t;
    while(t--)
    {
        vector < set < int > > v, temp;
        int n;
        cin >> n;
        for(int i = 0; i<n - 1; i++)
        {
            set < int > curr;
            int k;
            cin >> k;
            for(int j = 0; j<k; j++)
            {
                int x;
                cin >> x;
                curr.insert(x);
            }
            v.push_back(curr);
        }
        temp = v;
        for(int i = 1; i<=n; i++)
        {
            p[1] = i;
            int Extra = i, idx = 2;
            while(idx <= n)
            {
                for(int j = 0; j<n - 1; j++)
                {
                    if(v[j].find(Extra) != v[j].end())
                    {
                        v[j].erase(Extra);
                    }
                }
                int cnt = 0, Next = -1;
                for(int j = 0; j<n - 1; j++)
                {
                    if(v[j].size() == 1)  cnt++, Next = j;
                }
                if(cnt != 1)   break;
                Extra = *v[Next].begin();
                p[idx] = Extra;
                idx++;
            }
            v = temp;
            if(idx > n)
            {
                bool ch = true;
                for(int j = 0; j<n - 1; j++)
                {
                    set < int > curr;
                    bool flag = false;
                    for(int k = 1; k<=n; k++)
                    {
                        curr.insert(p[k]);
                        if(k > v[j].size())  curr.erase(p[k - v[j].size()]);
                        if(k >= v[j].size())  flag|=(curr == v[j]);
                    }
                    ch&=flag;
                }
                if(ch)
                {
                    for(int i = 1; i<=n; i++)  cout << p[i] << " ";
                    cout << '\n';
                    break;
                }
            }
        }
    }
    return 0;
}
