#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;*/
#define itn int
#define all(c) c.begin(),c.end()
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define ll long long
#define pll pair<ll, ll>
#define mp(x, y) make_pair(x, y)
using namespace std;
 
const ll N = 3e5 + 5, inf = 1e18, mod = 998244353 ;
const double PI = 3.1415926536;
int days[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 
bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}
 
vector<ll> fact(ll n) {
    n = abs(n);
    ll t = 0;
    vector<ll> ans;
    for (ll i = 1; i * i <= n; i++) {
        if (n % i == 0) {
            ans.push_back(i);
            if (n / i != i) {
                ans.push_back(n / i);
            }
        }
    }
    return ans;
}
 
inline ll getPow(ll a,ll b) {
    ll res = 1ll, tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
       }
       tp *= tp;
      // tp %= mod; res %= mod;
       b >>= 1ll;
    }
    return res;
}
 
ll vec_mult(const pll & t1, const pll & t2, const pll & t3) {
   const ll & x1 = t1.first, y1 = t1.second;
   const ll & x2 = t2.first, y2 = t2.second;
   const ll & x3 = t3.first, y3 = t3.second;
   return abs((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}
 
void ok() {
   cout << "YES" << endl;
   exit(0);
}
 
void no() {
   cout << "NO" << endl;
   exit(0);
}
 
inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}
 
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    ll n = nxt(), m = nxt();
    vector<ll> p(n);
    vector<ll> invPerm(n);
    for (int i = 0; i < n; i++) {
        p[i] = nxt() - 1;
        invPerm[p[i]] = i;
    }
 
    vector<multiset<ll>> d(n);
    multiset<ll> st;
    for (int i = 0; i < m; i++) {
        ll x = nxt() - 1, y = nxt() - 1;
        if (invPerm[x] > invPerm[y]) {
            swap(x, y);
        }
        d[invPerm[x]].insert(invPerm[y]);
        st.insert(invPerm[y]);
    }
 
    ll ans = n * (n + 1ll) / 2ll;
    for (int i = 0; i < n; i++) {
        multiset<ll>::iterator it = st.lower_bound(i);
        if (it != st.end()) {
            ans -= n - *it;
        }
        for (auto x : d[i]) {
            st.erase(st.find(x));
        }
    }
    cout << ans;
    return 0;
}