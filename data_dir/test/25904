#include <bits/stdc++.h>
#include <ctime>

using namespace std;

#define ALL(x) x.begin(), x.end()
#define bits(x) __builtin_popcount(x)
#define bitsll(x) __builtin_popcountll(x)
#define precision(a) fixed << setprecision(a)

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair <int, int> pii;
typedef vector <int> vi;

template <class T>
inline T sqr (T x) {
	return x * x;
}

template <class T>
inline bool isSquare (T x) {
	T y = sqrt(x + 0.5);
	return (y * y) == x;
}

template <class T1, class T2>
inline T1 gcd (T1 a, T2 b) {
	return b ? gcd(b, a % b) : a;
}

template <class T1, class T2>
inline T1 eqMin (T1 & x, const T2 & y) {
	if (T1(y) < x)
		return x = y;
	return x;
}

template <class T1, class T2>
inline T1 eqMax (T1 & x, const T2 & y) {
	if (T1(y) > x)
		return x = y;
	return x;
}

template <class T1, class T2>
inline T1 min (const T1 & x, const T2 & y) {
	return x < (T1) y ? x : (T1) y;
}

template <class T1, class T2>
inline T1 max (T1 & x, const T2 & y) {
	return x > (T1) y ? x : (T1) y;
}

template <typename T>
inline T getint () {
	T x = 0, p = 1;
	char ch;
	do {
		ch = getchar();
	} while (ch <= ' ');
	if (ch == '-')
		p = -1, ch = getchar();
	while (ch >= '0' && ch <= '9')
		x = x * 10 + ch - '0', ch = getchar();
	return x * p;
}

struct _flag_t {
	string val;
}
const _1d{", "}, _2d{"\n  "};
_flag_t _flag = _1d;

ostream & operator<< (ostream & os, _flag_t flag) {
	_flag = flag;
	return os;
}

template <class It>
ostream & _out (ostream & os, It f, It l) {
	if (f == l) return os << "{}";
	_flag_t cur_flag = _flag;
	os << _1d << "{ " << *f;
	for (; ++f != l; os << cur_flag.val << *f);
	return os << " }";
}

template <class C>
auto operator<< (ostream & os, C const & cont)
-> decltype(begin(cont), end(cont), cont.size(), declval <ostream &>()) {return _out(os, begin(cont), end(cont));}

ostream & operator<< (ostream & os, string const & s) {return os << s.data();}

template <class X, class Y>
ostream & operator<< (ostream & os, pair <X, Y> const & p) {return os << "[" << p.first << ", " << p.second << "]";}

const double PI = acos(-1);
const double EPS = 1e-8;
const int INF = (int) 2e9;
const int MOD = (int) 1e9 + 7;
const int MAXN = (int) 1;

int n;
string s, t;
vector <int> v1, v2;

vector <int> conv (const string & s) {
	vector <int> res;
	res.reserve(s.size());
	for (char ch : s) {
		res.push_back(ch - 'a');
	}
	return res;
}

int main () {
	ios_base::sync_with_stdio(false);
	cin >> n;
	cin >> s >> t;

	v1 = conv(s), v2 = conv(t);

	reverse(ALL(v1));
	reverse(ALL(v2));
	v1.push_back(0);
	v2.push_back(0);
	int buf = 0;
	for (int i = 0; i <= n; i++) {
		v1[i] += buf + v2[i];
		buf = v1[i] / 26;
		v1[i] %= 26;
	}

	reverse(ALL(v1));
	int cur = 0;
	vector <int> result;
	for (int i = 0; i < v1.size(); i++) {
		cur = cur * 26 + v1[i];
		if (i)
			result.push_back(cur / 2);
		cur = cur - (cur / 2) * 2;
	}

	for (int it : result) {
		cout << char(it + 'a');
	}
}