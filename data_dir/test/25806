//
//  main.cpp
//  HashCodePractice
//
//  Created by Юрий Бондарчук on 23/02/2018.
//  Copyright © 2018 Yury Bandarchuk. All rights reserved.
//

#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <utility>
#include <vector>
#include <fstream>
#include <iomanip>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>

using namespace std;

#define pb push_back
#define mp make_pair
#define F first
#define S second

const int N = 5050;
const int ONE_MIL = (int)1e6;
const int ONE_TEN = (int)1e4;
const int MAX_SIZE = 30 * 1000 * 1000;

int n;
char s[N];
int cnt[MAX_SIZE];
vector< pair<int, int> > have[N];
int kek[30][N];
int cds[N];

int main() {
    gets(s + 1);
    n = (int)strlen(s + 1);
    for (int i = 1; i <= n; ++i) {
        cds[i] = (int)s[i] - (int)'a' + 1;
    }
    for (int start = 1; start <= n; start++) {
        int i = start;
        int pos = 1;
        int prefix = cds[start];
        while (pos <= n) {
            int value = prefix * ONE_MIL + cds[i] * 10000 + pos;
            ++cnt[value];
            ++i;
            ++pos;
            if (i > n) {
                i = 1;
            }
        }
    }
    for (int start = 1; start <= n; start++) {
        int i = start;
        int pos = 1;
        int prefix = cds[start];
        while (pos <= n) {
            int value = prefix * ONE_MIL + cds[i] * 10000 + pos;
            if (cnt[value] == 1) {
                ++kek[prefix][pos];
            }
            ++i;
            ++pos;
            if (i > n) {
                i = 1;
            }
        }
    }
    int good = 0;
    for (int i = 0; i < 30; ++i) {
        int val = 0;
        for (int j = 0; j <= n; ++j) {
            val = max(val, kek[i][j]);
        }
        good += val;
    }
    double ans = 1.0 * good / (1.0 * n);
    printf("%.20f\n", ans);
    return 0;
}
