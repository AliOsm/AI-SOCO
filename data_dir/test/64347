#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds ;
#define ll long long
#define ld long double
#define pp pair<ll,pair<ll,ll> >
#define rep(i,a,b) for(ll i=a;i<b;i+=1)
#define all(c) (c).begin(),(c).end()
#define pb push_back
#define sz(a) int((a).size())
#define hell 1000000007
#define f first
#define s second
#define sll(x) scanf("%lld",&x)
#define si(x) scanf("%d",&x)
typedef tree<ll , null_type , less<ll> , rb_tree_tag , tree_order_statistics_node_update > ordered_set ;
ll t = 1 ;
const ll N = 1000005 ;
vector<ll> fac(N) , inv(N) ;
ll powMod( ll base , ll expo )
{
    ll ans = 1 ;
    while( expo > 0 )
    {
        if( expo & 1 )
            ans = ( ans * base ) % hell ;
        base = ( base * base ) % hell ;
        expo >>= 1 ;
    }
    return ans ;
}
ll sumdig( ll x )
{
    ll ans = 0 ;
    while( x > 0 )
    {
        ans += x % 10 ;
        x /= 10 ;
    }
    return ans ;
}
ll C( ll x , ll y )
{
    ll ans = fac[x] ;
    ans = ( ans * inv[y] ) % hell ;
    ans = ( ans * inv[x-y] ) % hell ;
    return ans ;
}
ll check( ll x , ll a , ll b )
{
    while( x > 0 )
    {
        if(x%10 != a && x%10 != b )
            return false ;
        x /= 10 ;
    }
    return true ;
}
void solve()
{
    ll n , a , b , ans = 0 ;
    cin >> a >> b >> n ;
    rep( i , 0 , n + 1 )
    {
        ll cur = i*a + ( n - i ) * b ;
        if( check(cur,a,b) ){
            ans = ( ans + C( n , i ) )%hell ;
            //cout << "i : " << i << "\n" ;
        }
    }
    cout << ans ;
}
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    fac[0] = 1 ;
    rep( i , 1 , N )
        fac[i] = ( fac[i-1] * i ) % hell ;
    inv[N-1] = powMod( fac[N-1] , hell - 2 ) ;
    for( ll i = N - 2 ; i >= 0 ; i-- )
    {
        inv[i] = ( inv[i+1] * ( i + 1 ) ) % hell ;
    }
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    //cin>>t;
    while(t--)
        solve();
    return 0 ;
}
