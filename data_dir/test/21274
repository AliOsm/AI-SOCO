#include <bits/stdc++.h>
using namespace std;

#define int long long
typedef pair <int, int> pii;
typedef pair <pii, int> ppi;

const int N = 1e5 + 10;
int n, k, dis[N][2];
bool mark[N][2];
char c;
queue <ppi> que;

int32_t main() {
	cin >> n >> k;
	for (int i = 0; i < 2; i++) {
		for (int j = 0; j < n; j++) {
			cin >> c;
			if (c == '-')
				mark[j][i] = 1;
		}
	}
	
	for (int i = 0; i < N; i++)
		dis[i][0] = dis[i][1] = (int)1e9 + 10;
	
	dis[0][0] = 0;
	que.push({{0, 0}, 0});
	while (que.size()) {
		int i = que.front().first.first, j = que.front().first.second, c = que.front().second;
		que.pop();
		if (dis[i][j] < c || c > i)
			continue;
		dis[i][j] = c;
		
		if (i + k >= n) {
			dis[n][!j] = min(dis[n][!j], c + 1);
			continue;
		}
		
		if (mark[i + k][!j] && dis[i + k][!j] > c + 1) {
			dis[i + k][!j] = c + 1;
			que.push({{i + k, !j}, c + 1});
		}
		if (mark[i + 1][j] && dis[i + 1][j] > c + 1) {
			dis[i + 1][j] = c + 1;
			que.push({{i + 1, j}, c + 1});
		}
		if (i && mark[i - 1][j] && dis[i - 1][j] > c + 1) {
			dis[i - 1][j] = c + 1;
			que.push({{i - 1, j}, c + 1});
		}
	}
	
//	for (int i = 0; i < 2; i++) {
//		for (int j = 0; j <= n; j++)
//			cout << dis[j][i] << " ";
//		cout << endl;
//	}
	
	if (dis[n][0] <= n || dis[n][1] <= n)
		cout << "YES";
	else
		cout << "NO";
}

