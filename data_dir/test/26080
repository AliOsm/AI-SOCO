#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define rep(i, a, b) for(int i=(a); i<(b); i++)
#define repi(i, a, b) for(int i=(a); i>(b); i--)
#define db(x) (cerr << #x << ": " << (x) << '\n')
#define sync ios_base::sync_with_stdio(false), cin.tie(NULL)
#define tests(t) int t; cin >> t; while(t--)
#define iceil(n, x) (((n) + (x) - 1) / (x))
#define ll long long
#define gcd __gcd
#define eb emplace_back
#define pb push_back
#define pf push_front
#define pob pop_back
#define pof pop_front
#define sz size()
#define all(v) (v).begin(), (v).end()
#define uni(v) sort(all(v)); (v).erase(unique(all(v)), (v).end())
#define pii pair<int, int>
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vi>
#define fi first
#define se second
#define pqueue priority_queue
#define bitcount(x) __builtin_popcount(x)
#define cps CLOCKS_PER_SEC
#define PI acos(-1.0)
#define EPS 1e-9
#define mod 1000000007
#define N 200005
using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

template<typename T>
using minpq = priority_queue<T, vector<T>, greater<T>>;

template<typename T>
using maxpq = priority_queue<T>;

//All indexing is 0-based
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update> ordered_set;
//methods: find_by_order(k); & order_of_key(k);
//To make it an ordered_multiset, use pairs of (value, time_of_insertion)
//to distinguish values which are similar Or
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, 
             tree_order_statistics_node_update> ordered_multiset;

template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;
//ordered_map<int, int> my_map;

template<typename T>
void printv(const vector<T>& v) { for(auto i : v) cerr << i << ' '; cerr << '\n'; }

template<typename T>
void printv(const vector<pair<T, T>>& v) { for(auto p : v) cerr << "(" << p.fi << ", " << p.se << "), "; cerr << '\n'; }

//Returns no. of values x for which ceil(n / x) == y (y must be > 1).
inline ll CC(ll n, ll y) { return iceil(n, y-1) - iceil(n, y); }

//Returns no. of values x for which floor(n / x) == y
inline ll FF(ll n, ll y) { return n / y - n / (y+1); }

//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c; }
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c; }
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p; }

#define int ll
#define trace(...) 42

int n, m;
vpii adj[N];  

/*-----------------DSU----------------*/
int P[N], Rank[N];
void make_set(int i) {
    P[i] = i; 
    Rank[i] = 0;
}

void init() {
    for(int i = 0; i < n; i++) make_set(i);
}

int find_set(int i) {
    if(i == P[i]) return i;
    else return P[i] = find_set(P[i]);
}

void merge_sets(int i, int j) {
    i = find_set(i);
    j = find_set(j);
    if(i == j) return;
    int ri = Rank[i], rj = Rank[j];
    if(ri < rj)     P[i] = j;
    else if(ri > rj)P[j] = i;
    else            P[i] = j, Rank[j]++;
}
/*--------------End of DSU---------------*/

#define pip pair<int, pii> 

vector<pip> Edges, MSTedges;
int mnwt;

void add_edge(int u, int v, int w) {
    Edges.pb({w, {u, v}});
}

//O(E lg E)
void Kruskal() {
    sort(Edges.begin(), Edges.end());
    mnwt = 0;
    MSTedges.clear();

    init();

    for(auto p : Edges) {
        int u, v, w;
        w = p.fi, u = p.se.fi, v = p.se.se;
        if(find_set(u) != find_set(v)) {
            merge_sets(u, v);
            mnwt += w;
            MSTedges.pb(p);
        }
    }
}

const int inf = 1e9;

#define lgN 20
int L[N]; //level of the node in the tree
int dp[N][lgN]; //dp[i][j] = 2^j th parent of ith node
int mx[N][lgN]; //mx[i][j]: Maximum weight edge between i and its 2^jth parent.
int par_edge[N];
int T[N]; //Parent of the node

void dfs(int i, int p, int dis = 0)
{
    for(auto pp : adj[i]){
        int j = pp.fi;
        if(j != p){
            par_edge[j] = pp.se;
            T[j] = i;
            L[j] = L[i] + 1;
            dfs(j,i);
        }
    }
}

void prep()
{
    T[0] = -1;
    L[0] = 0;
    par_edge[0] = -inf;
    dfs(0,-1);
  
    memset(dp , -1 , sizeof dp);
  
    for(int j=0;1 << j < n;j++){
        for(int i=0;i<n;i++){
            if(j==0) dp[i][j] = T[i];
            else if(dp[i][j-1] != -1)
            dp[i][j] = dp[dp[i][j-1]][j-1];
        }
    }

    for(int j=0;1 << j < n;j++){
        for(int i=0;i<n;i++) {
            mx[i][j] = -inf;
            if(dp[i][j] != -1) {
                if(j == 0) mx[i][j] = par_edge[i];
                else mx[i][j] = max(mx[i][j-1], mx[dp[i][j-1]][j-1]);
            }

        // if(mx[i][j] != -inf) trace(i, j, dp[i][j], mx[i][j]);
        }
    }
}

int lca(int p,int q)
{
    if(L[p] < L[q])
        swap(p , q); // p lies below q
  
    int log;
    //Find out largest j s.t. 2 ** j <= L[p]
    for(log = 0; 1 << log <= L[p]; log++);
    log--;
  
    for(int i=log; i>=0 ;i--)
        if(L[p] - (1<<i) >= L[q])   
            p = dp[p][i];
    if(p == q)
        return p;
  
    for(int i=log; i>=0 ;i--)
        if(dp[p][i]!=-1 and dp[p][i] != dp[q][i])
            p = dp[p][i] , q = dp[q][i];
    return T[p];
}

//Returns max. weight edge on the vertical path from u upto l.
int find2(int u, int l) {
    trace(u, l);
    int log;
    //Find out largest j s.t. 2 ** j <= L[u]
    for(log = 0; 1 << log <= L[u]; log++);
    log--;
  
    int ans = -inf;

    for(int i=log; i>=0 ;i--)
        if(L[u] - (1<<i) >= L[l]) { 
            ans = max(ans, mx[u][i]); 
            u = dp[u][i];
        }
    trace(ans);
    return ans;
}

//Find max. weight edge in the path from u to v.
int find(int u, int v) {
    int l = lca(u, v);
    trace(u, v, l);
    return max(find2(u, l), find2(v, l));
}

map<pii, int> idx;
int ans[N];

main()
{   
    #ifndef ONLINE_JUDGE
        freopen("/home/tarun/Desktop/input.txt", "r", stdin);
     // freopen("/home/tarun/Desktop/output.txt", "w", stdout);
    #endif
    sync;
    clock_t clk = clock();
    cerr << "I will return...\n";

    cin >> n >> m;
    rep(i, 0, m) {
        int u, v, w; cin >> u >> v >> w;
        --u, --v;
        idx[{u, v}] = i;
        add_edge(u, v, w);
    }

    Kruskal();

    for(auto p : MSTedges) {
        int u, v, w;
        w = p.fi; tie(u, v) = p.se;
        adj[u].pb({v, w});
        adj[v].pb({u, w});
        // trace(u, v, w);
    }

    prep();

    rep(i, 0, m) {
        int u, v, w;
        auto p = Edges[i];
        tie(u, v) = p.se, w = p.fi;
        int id = idx[{u, v}];
        ans[id] = mnwt + w - find(u, v);
        // trace(id, ans[id], w);
    }

    rep(i, 0, m) cout << ans[i] << '\n';

    cerr << "...don't you ever hang your head.\n";
    cerr << "Time (in ms): " << double(clock() - clk) * 1000.0 / cps << '\n';
}

//Compile using:
//g++ -o filename.exe --std=c++11 filename.cpp
//Use -D CP for defining a macro CP in the local environment



