//bool still_within(int a, int b){
//    assert(a > b);
//    assert(b > 0);
//    cout << "? " << b-1 << ' ' << a-1 << endl;
//    char c;
//    cin >> c;
//    return c == 'y';
//}
//    //return x_wins(1<<i,1<<(i-1));
//void _(){
//    string start;
//    while(cin >> start){
//        if(start == "end")
//            break;
//        cout << "? 0 1" << endl;
//        char one_test;
//        cin >> one_test;
//        if(one_test == 'x'){
//            cout << "! 1" << endl;
//            continue;
//        }
//        int large_bit = 1;
//        while(still_within(1<<(large_bit+1),1<<large_bit))
//            ++large_bit;
//        int ans = 1<<large_bit;
//        for(int i = large_bit-1; i >= 0; --i){
//            if(still_within(ans+(1<<i),ans))
//                ans += 1<<i;
//        }
//        cout << "! " << ans << '\n';
//    }
//}
//
// ================================================ 
// ^^^	ABOVE is what I wrote in my editor	^^^
// ------------------------------------------------ 
// vvv	BELOW is automatically generated 	vvv
// ================================================ 
#include <iomanip>
#include <cassert>
#include <vector>
#include <iostream>
#include <string>
using namespace std;
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
template <typename T>
T _();
template <typename IT>
ostream& print(IT b, IT e, string sep = " ", ostream& stream = cout){
    for(IT it = b; it != e; ++it){
        stream << *it;
        if(it + 1 != e)
            stream << sep;
    }
    return stream;
}
template <typename IT>
istream& read(IT b, IT e, istream& stream = cin){
    for(IT it = b; it != e; ++it)
        stream >> *it;
    return stream;
}
template <typename T>
ostream& operator<<(ostream& stream, vector<T>& t){
    return print(all(t), " ", stream);
}
template <typename T>
ostream& operator<<(ostream& stream, vector<T>&& t){
    return print(all(t), " ", stream);
}
template <typename T>
istream& operator>>(istream& stream, vector<T>& t){
    return read(all(t), stream);
}
template <typename T>
void print(T x, string end = "\n"){
    cout << x << end;
}
template <typename t>
void print(vector<t> arr, string sep = " "){
    if(arr.empty()){
        return;
    }
    print(arr.begin(), arr.end(), sep);
    cout << '\n';
}
template <typename T>
void print(vector<vector<T>> arr){
    for(int i = 0; i < sz(arr); ++i){
        cout << "[" << arr[i] << "]";
        if(i + 1 < sz(arr))
            cout << ", ";
    }
    cout << '\n';
}
bool still_within(int a, int b){
    assert(a > b);
    assert(b > 0);
    cout << "? " << b-1 << ' ' << a-1 << endl;
    char c;
    cin >> c;
    return c == 'y';
}
    //return x_wins(1<<i,1<<(i-1));
void _(){
    string start;
    while(cin >> start){
        if(start == "end")
            break;
        cout << "? 0 1" << endl;
        char one_test;
        cin >> one_test;
        if(one_test == 'x'){
            cout << "! 1" << endl;
            continue;
        }
        int large_bit = 1;
        while(still_within(1<<(large_bit+1),1<<large_bit))
            ++large_bit;
        int ans = 1<<large_bit;
        for(int i = large_bit-1; i >= 0; --i){
            if(still_within(ans+(1<<i),ans))
                ans += 1<<i;
        }
        cout << "! " << ans << '\n';
    }
}

int main(){
    cout << fixed << setprecision(15);
        _();
}
