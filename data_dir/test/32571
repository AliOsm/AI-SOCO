#include<bits/stdc++.h>
using namespace std;
const int MX=5009;
struct node {
    node* child[2];
    int sz , match;
    node(){
        child[0]=child[1]=NULL;
        sz=match=0;
    }
} *head;
bool dp[MX][MX];
void insert_(string &str , int start , int cnt){
    node *it = head; int sz=str.size();
    for(int j=0;j<sz;j++){
        int let=str[j]-'a';
        if(!it->child[let]) it->child[let]=new node();
        it=it->child[let];
        it->sz+=cnt;
        if(dp[start][start+j]){
            it->match++;
            cnt--;
        }
    }
}

string str , sol;
void find_Kth(node *it , int K){
    if(it->match >= K) return;
    if(!it) return;
    K-=it->match;
    for(int j=0;j<2;j++){
        if(!it->child[j]) continue;
        if(it->child[j]->sz >= K){
            sol.push_back(j+'a');
            find_Kth(it->child[j] , K);
            break;
        }
        K-=it->child[j]->sz;
    }
}
int n , cnt[MX] , last[MX];
int main(){
    head = new node();
    cin>>str;
    n=str.size();
    str="#"+str;
    for(int len=1;len<=n;len++){
        for(int j=1;j<=n;j++){
            int i=j+len-1;
            if(i>n) break;
            if(len < 5)
                dp[j][i]=(str[j]==str[i]);
            else dp[j][i]=(dp[j+2][i-2] & (str[j]==str[i]));
            if(dp[j][i]) {
                last[j]=max(last[j] , i);
                cnt[j]++;
            }
        }
    }

    for(int j=1;j<=n;j++){
        string Q=str.substr(j , last[j]-j+1);
        insert_(Q , j , cnt[j]);

    }

    //cout<<head->sz<<endl;
    int K;
    cin>>K;
    find_Kth(head , K);
    cout<<sol<<endl;

}