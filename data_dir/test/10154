#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     (_obj).begin(), (_obj).end()
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define CeilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifdef SHJ_LOCAL
#define debug(_x)                     std::cerr << (#_x) << " = " << (_x) << '\n' << std::flush;
#else
#define debug(_x)                     {}
#endif
#define endl "\n"
template<typename Tp>
inline void outarr(Tp _begin, Tp _end, const char* _delim = " ") {
    for (Tp current = _begin; current != _end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = long long;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
bool IsGood(int x, int col, int n, int m) {
    return 1 <= x && x <= n * m && x % m == col;
}

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    int n, m;
    cin >> n >> m;
    vector<vector<int>> gr(m, vector<int>(n));
    loop(n) {
        for (int j = 0; j < m; ++j) {
            cin >> gr[j][i];
        }
    }
    vector<int> cnt(n);
    int ans = 0;
    for (int j = 0; j < m; ++j) {
        fill(all(cnt), 0);
        loop(n) {
            if (IsGood(gr[j][i], (j < m - 1 ? j + 1 : 0), n, m)) {
                int p = j < m - 1 ? gr[j][i] / m : gr[j][i] / m - 1;
                ++cnt[(i - p + n) % n];
            }
        }
        int cur = n;
        loop(n) {
            cur = min(cur, i + n - cnt[i]);
        }
        ans += cur;
    }
    cout << ans << endl;

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}