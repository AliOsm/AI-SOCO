#include <iostream>
#define LL long long
#define pb push_back
#define mp make_pair
#define fi first
#define sc second
using namespace std;

int n,m,q,a[1010][1010],up[1010][1010],down[1010][1010],lft[1010][1010],rght[1010][1010],l,r,x,y,z,mn,ans;

int main() {
	scanf("%d %d %d",&n,&m,&q);
	for(int i=1;i<=n;i++){
		for(int j=1;j<=m;j++){
			scanf("%d",&a[i][j]);
			if(a[i][j]){
				up[i][j] = up[i-1][j] + a[i][j];
				lft[i][j] = lft[i][j-1] + a[i][j];
			}
		}
	}
	for(int i=n;i>=1;i--){
		for(int j=m;j>=1;j--){
			if(a[i][j]){
				down[i][j] = down[i+1][j] + a[i][j];
				rght[i][j] = rght[i][j+1] + a[i][j];
			}
		}
	}
	for(int i=0;i<q;i++){
		scanf("%d %d %d",&z,&y,&x);
		ans = 0;
		if(z==1){
			a[y][x] = !a[y][x];
			for(int i=1;i<=m;i++){
				if(a[y][i]) lft[y][i] = lft[y][i-1]+a[y][i];
				else lft[y][i] = 0;
			}
			for(int i=m;i>=1;i--){
				if(a[y][i]) rght[y][i] = rght[y][i+1]+a[y][i];
				else rght[y][i] = 0;
			}
			for(int i=1;i<=n;i++){
				if(a[i][x]) up[i][x] = up[i-1][x]+a[i][x];
				else up[i][x] = 0;
			}
			for(int i=n;i>=1;i--){
				if(a[i][x]) down[i][x] = down[i+1][x]+a[i][x];
				else down[i][x] = 0;
			}
			continue;
		}
		l = r = x;
		mn = up[y][x];
		ans = max(ans, mn);
		while(l>1 || r<m){
			if(l==1 || (r!=m && up[y][r+1]>=up[y][l-1])){
				r++;
				mn = min(mn, up[y][r]);
			}
			else{
				l--;
				mn = min(mn, up[y][l]);
			}
			ans = max(ans, mn*(r-l+1));
		}
		l = r = x;
		mn = down[y][x];
		ans = max(ans, mn);
		while(l>1 || r<m){
			if(l==1 || (r!=m && down[y][r+1]>=down[y][l-1])){
				r++;
				mn = min(mn, down[y][r]);
			}
			else{
				l--;
				mn = min(mn, down[y][l]);
			}
			ans = max(ans, mn*(r-l+1));
		}
		l = r = y;
		mn = lft[y][x];
		ans = max(ans, mn);
		while(l>1 || r<n){
			if(l==1 || (r!=n && lft[r+1][x]>=lft[l-1][x])){
				r++;
				mn = min(mn, lft[r][x]);
			}
			else{
				l--;
				mn = min(mn, lft[l][x]);
			}
			ans = max(ans, mn*(r-l+1));
		}
		l = r = y;
		mn = rght[y][x];
		ans = max(ans, mn);
		while(l>1 || r<n){
			if(l==1 || (r!=n && rght[r+1][x]>=rght[l-1][x])){
				r++;
				mn = min(mn, rght[r][x]);
			}
			else{
				l--;
				mn = min(mn, rght[l][x]);
			}
			ans = max(ans, mn*(r-l+1));
		}
		printf("%d\n", ans);
	}
	return 0;
}