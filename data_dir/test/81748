#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <set>
#include <string>
#include <vector>

using namespace std;

const int MaxN = 102, MaxL = 10000007, NA = -1, MaxC = 0x3F3F3F3F;

bool b [MaxN];
int c [MaxL];
int l [MaxN], r [MaxN];
int a [MaxN];
int n;

bool bipart (int v)
{
 if (b[v]) return false;
 b[v] = true;
 int u;
 for (u = l[v]; u < l[v] + MaxN && u <= r[v]; u++)
  if (c[u] == NA || bipart (c[u]))
  {
   c[u] = v;
   a[v] = u;
   return true;
  }
 for (u = r[v]; u > r[v] - MaxN && u >= l[v]; u--)
  if (c[u] == NA || bipart (c[u]))
  {
   c[u] = v;
   a[v] = u;
   return true;
  }
 return false;
}

int main (void)
{
 int i;
 while (scanf (" %d", &n) != EOF)
 {
  for (i = 0; i < n; i++)
   scanf (" %d %d", &l[i], &r[i]);
  memset (c, NA, sizeof (c));
  for (i = 0; i < n; i++)
  {
   memset (b, 0, sizeof (b));
   if (!bipart (i))
    assert (false);
  }
  for (i = 0; i < n; i++)
   printf ("%d%c\n", a[i], i + 1 < n ? ' ' : '\n');
 }
 return 0;
}
