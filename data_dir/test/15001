#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

int main() {
	srand (time(NULL));
    ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(int, n);
	next(int, k);
	
	vector<vector<int> > edges(n);
	vector<vector<int> > edgeIndices(n);
	FOR (i, 0, n - 1) {
		next(int, a);
		next(int, b);
		a--;
		b--;
		edges[a].push_back(b);
		edges[b].push_back(a);
		edgeIndices[a].push_back(i + 1);
		edgeIndices[b].push_back(i + 1);
	}
	
	vector<int> parent(n);
	vector<int> parentRoad(n);
	int root = 0;
	vector<int> q;
	q.push_back(root);
	parent[root] = -1;
	parentRoad[root] = -1;
	FOR (i, 0, n) {
		int v = q[i];
		FOR (j, 0, edges[v].size()) {
			auto dest = edges[v][j];
			if (dest != parent[v]) {
				parent[dest] = v;
				parentRoad[dest] = edgeIndices[v][j];
				q.push_back(dest);
			} else {
				edges[v][j] = edges[v].back();
				edges[v].pop_back();
				edgeIndices[v][j] = edgeIndices[v].back();
				edgeIndices[v].pop_back();
				j--;
			}
		}
	}
	
	vector<int> dp[n];
	FOR (i, 0, n) dp[i].assign(k, IntMaxVal);
	vector<vector<int>> roads[n];
	FOR (i, 0, n) roads[i].resize(k);
	
	FORD (i, n - 1, 0) {
		int v = q[i];
		
		dp[v][0] = 0;
		FOR (j, 0, edges[v].size()) {
			auto child = edges[v][j];
			FOR (total, 0, k) if (dp[v][total] != IntMaxVal) {
				dp[v][total]++;
				roads[v][total].push_back(edgeIndices[v][j]);
			}
			FORD (total, k - 1, 0) {
				FORD (inChild, total - 1, 0) {
					if (dp[child][inChild] == IntMaxVal) continue;
					if (dp[v][total - inChild - 1] == IntMaxVal) continue;
					
					int val = dp[v][total - inChild - 1] - 1 + dp[child][inChild];
					if (dp[v][total] > val) {
						dp[v][total] = val;
						
						roads[v][total].clear();
						for (auto x : roads[v][total - inChild - 1]) if (x != edgeIndices[v][j]) roads[v][total].push_back(x);
						for (auto x : roads[child][inChild]) roads[v][total].push_back(x);
					}
				}
			}
		}
	}
	
	FOR (i, 0, n) if (i != root && dp[i][k - 1] != IntMaxVal) {
		dp[i][k - 1]++;
		roads[i][k - 1].push_back(parentRoad[i]);
	}
	
	int ans = IntMaxVal;
	for (auto &v : dp) minimize(ans, v[k - 1]);
	cout << ans << endl;
	FOR (i, 0, n) if (dp[i][k - 1] == ans) {
		for (auto x : roads[i][k - 1]) cout << x << ' ';
		break;
	}
	
}