#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;
#define ll long long
//increase stack size
#pragma comment(linker, "/STACK:16777216")

ll mxm() {return LLONG_MIN;}
template<typename... Args>
ll mxm(ll a, Args... args) { return max(a,mxm(args...)); }

ll mnm() {return LLONG_MAX;}
template<typename... Args>
ll mnm(ll a, Args... args) { return min(a,mnm(args...)); }

template<class T> ostream& operator<<(ostream& os,vector<T> V){
	os<<"[ ";for(auto v:V)os<<v<<" ";return os<<"]";
}
template<class L,class R> ostream& operator<<(ostream& os,pair<L,R> P){
	return os<<"("<<P.first<<","<<P.second<<")";
}

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__,__VA_ARGS__)
template<typename Arg1>
void __f(const char* name,Arg1&& arg1){
	cout<<name<<" : "<<arg1<<endl;
}
template <typename Arg1,typename... Args>
void __f(const char* names,Arg1&& arg1,Args&&... args){
	const char* comma=strchr(names+1,',');cout.write(names,comma-names)<<" : "<<arg1<<" | ";__f(comma+1,args...);
}
#else
#define trace(...) 1
#endif

#define ld long double
#define pll pair<ll,ll>
#define ii pair<int,int>
#define vll vector<ll>
#define vii vector<ii>
#define vi vector<int>
#define vpll vector<pll>
#define vld vector<ld>
#define vvld vector<vld>
#define vvi vector<vi>
#define vvll vector<vll>
#define vvpll vector<vpll>
#define vvii vector<vii>
#define I insert
#define F first
#define S second
#define pb push_back
#define endl "\n"
#define all(x)	x.begin(),x.end()

const int mod=998244353;
// 128 bit: __int128
inline int add(int a,int b){a+=b;if(a>=mod)a-=mod;return a;}
inline int sub(int a,int b){a-=b;if(a<0)a+=mod;return a;}
inline int mul(int a,int b){return (a*1ll*b)%mod;}
inline int power(int a,int b){int rt=1;while(b>0){if(b&1)rt=mul(rt,a);a=mul(a,a);b>>=1;}return rt;}
inline int inv(int a){return power(a,mod-2);}

struct compare{
	bool operator() (const int &a,const int &b) const{
		return a>b;
	}
};

const int N = 1e5 + 5;
int st[4 * N][2][2], iprob[4 * N][2], prob[N][2];

void upd(int l, int r, int id, int x, int a, int b, int val){
	if(l > x || r < x) return;
	if(l == x && r == x){
		st[id][a][b] = val;
		return;
	}
	int mid = l + r >> 1;
	upd(l, mid, id * 2, x, a, b, val);
	upd(mid + 1, r, id * 2 + 1, x, a, b, val);
	for(int i = 0; i < 2; i++)
		for(int j = 0; j < 2; j++)
			st[id][i][j] = add(mul(iprob[id * 2][0], mul(st[id * 2][i][0], st[id * 2 + 1][0][j])), 
								mul(iprob[id * 2][1], mul(st[id * 2][i][1], st[id * 2 + 1][1][j])));
}

void build(int l, int r, int id){
	for(int i = 0; i < 2; i++)
		iprob[id][i] = inv(prob[r][i]);
	int mid = l + r >> 1;
	if(l != r)
		build(l, mid, id * 2), build(mid + 1, r, id * 2 + 1);
}

int get(){
	int ans = 0;
	for(int i = 0; i < 2; i++)
		for(int j = 0; j < 2; j++)
			ans = add(ans, st[1][i][j]);
	return ans;
}

int main()
{
	ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);cout<<setprecision(25);
	int n;
	cin >> n;
	if(n == 1){
		cout << 0 << endl;
		return 0;
	}
	vector<pair<ii, int> > v(n);
	vector<pair<pair<double, ii>, ii> > events;
	for(int i = 0; i < n; i++){
		cin >> v[i].F.F >> v[i].F.S >> v[i].S;
		if(i > 0)
			prob[i - 1][0] = mul(v[i].S, inv(100)), prob[i - 1][1] = sub(1, prob[i - 1][0]);
		if(i > 0){
			int d = v[i].F.F - v[i - 1].F.F, v2 = v[i].F.S, v1 = v[i - 1].F.S, va, vb;
			for(int j = 0; j < 2; j++)
				for(int k = 0; k < 2; k++){
					va = (j == 0 ? 1 : -1) * v1, vb = (k == 0 ? 1 : -1) * v2;
					if(va <= vb) continue;
					events.pb({{1.0 * d / (va - vb), {mul(d, inv(va - vb)), i - 1}}, {j, k}});
				}
		}
	}
	build(0, n - 2, 1);
	for(int i = 0; i < n - 1; i++){
		int p1 = mul(v[i].S, inv(100)), p2 = mul(v[i + 1].S, inv(100));
		for(int j = 0; j < 2; j++)
			for(int k = 0; k < 2; k++){
				int pa = (j == 0 ? p1 : sub(1, p1)), pb = (k == 0 ? p2 : sub(1, p2));
				upd(0, n - 2, 1, i, j, k, mul(pa, pb));
			}
	}
	sort(all(events));
	int init = get();
	int tot = 0;
	for(int i = 0; i < events.size(); i++){
		int ans = events[i].F.S.F, id = events[i].F.S.S, a = events[i].S.F, b = events[i].S.S;
		upd(0, n - 2, 1, id, a, b, 0);
		int newinit = get();
		tot = add(tot, mul(sub(init, newinit), ans));
		init = newinit;
	}
	cout << tot << endl;
}