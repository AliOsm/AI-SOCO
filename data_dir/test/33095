#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<long long, int>, // change type
//        null_type,
//        less<pair<long long, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

//template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)((x).size())
#define pb push_back
#define T first
#define P second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
#define debug(x) cerr << #x << " : " << (x) << endl
const double PI = 3.14159265358979323846;
const double eps = (1e-10);
int isGreater(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}

struct DSU{
    vector<int> parent, rank;
    DSU(int n)
    {
        parent.resize(n);
        rank.resize(n, 1);
        rep(i,0,n)
            parent[i] = i;
    }

    int f(int i)
    {
        if (i == parent[i])
            return i;
        return parent[i] = f(parent[i]);
    }

    void link(int x, int y)
    {
        x = f(x), y = f(y);
        if (rank[x] > rank[y])
            swap(x, y);
        parent[x] = y;
        if (rank[x] == rank[y])
            ++rank[y];
    }

};


void solve()
{
    int n, k;
    string s;
    cin >> n >> k >> s;
    DSU dsu(n);
    for (int i = 0; i < n; ++i)
        dsu.link(i, n - i - 1);
    for (int i = 0; i < k; ++i)
        for (int j = i + k; j < n; j += k)
            dsu.link(i, j);

    vector<int> sum(n, 0);
    vector<vector<int> > freq(n, vector<int>(26, 0));
    for (int i = 0; i < n; ++i)
    {
        int p = dsu.f(i);
        sum[p]++;
        freq[p][s[i] - 'a']++;
    }
    int ans = 0;
    for (int i = 0; i < n; ++i)
        ans += sum[i] - *max_element(all(freq[i]));
    cout << ans << '\n';

}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("AC.txt", "w", stdout);
#endif
    int tc;
    cin >> tc;
    while(tc--)
        solve();
    return 0;
}