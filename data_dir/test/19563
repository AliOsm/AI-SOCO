#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <iterator>
#include <cmath>
#include <deque> 

using namespace std;


int n, k;
struct Song
{
	long long length;
	long long beauty;
	
    bool operator < (const Song &a) const {
        return this->length > a.length;//��Сֵ����
    }
};
Song songs[300010];

bool compareBeauty(const Song &a, const Song &b)
{
	if (a.beauty == b.beauty)
		return a.length > b.length;
	else
		return a.beauty > b.beauty;
}

std::priority_queue<Song> q;	//��ǰk���ĸ裬��С�ѣ��������Ƿ�Χ����̵� 

int main()
{
	scanf("%d%d", &n, &k);
	for (int i = 0 ; i < n ; i++)
		scanf("%I64d%I64d", &(songs[i].length), &(songs[i].beauty));
		
	sort(songs, songs + n, compareBeauty);	//��Beauty�������� 
	
	long long maxPleasure = 0;
	long long curLength = 0;
	long long curBeauty = 100000000;
	long long curPleasure; 
	for (int i = 0 ; i < k ; i++)	//ֻ������ 
	{
		curLength = curLength + songs[i].length;
		if (curBeauty > songs[i].beauty)
			curBeauty = songs[i].beauty;	//ֻ��Խ��ԽС 
		
		curPleasure = curBeauty * curLength;
		if (maxPleasure < curPleasure)
			maxPleasure = curPleasure;
		
		q.push(songs[i]);
	}
	
	for (int i = k ; i < n ; i++)	//��1��1
	{
		//���ص���ÿ�γ����Ļ᲻���ǱȽ�С��
		//����бȽϴ���ϵĿ��ܴ��ڣ����Ѿ���ǰ������� 
		
		curLength = curLength + songs[i].length;
		if (curBeauty > songs[i].beauty)
			curBeauty = songs[i].beauty;	//ֻ��Խ��ԽС 
		q.push(songs[i]);
		Song curSong = q.top();
		q.pop();
		curLength = curLength - curSong.length;	//��̵� 
		
		curPleasure = curBeauty * curLength;
		if (maxPleasure < curPleasure)
			maxPleasure = curPleasure;
	} 
	
	printf("%I64d\n", maxPleasure);
	
	return 0;
}

