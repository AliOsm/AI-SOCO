#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define scanl(a) scanf("%lld",&a)
#define scanii(a,b) scanf("%d%d",&a,&b)
#define scaniii(a,b,c) scanf("%d%d%d",&a,&b,&c)
#define scanll(a,b) scanf("%lld%lld",&a,&b)
#define scanlll(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define scani(a) scanf("%d",&a)
#define clr(a) memset(a,0,sizeof(a))
#define clr_(a) memset(a,-1,sizeof(a))
#define pb(a) push_back(a)
#define pii pair<int,int>
#define sqr(a) a*a
#define eps 1e-9
#define inf 1e9
#define pi acos(-1.0)
#define ff first
#define ss second
#define INF 1e18
#define siz 100010
#define dbug(xx1) cout<<xx1<<" "
int Set(int n,int pos){return n=n | (1<<pos);}///sets the pos bit
int reset(int n,int pos){return n=n & ~(1<<pos);}///resets the pos bit
bool check(int n,int pos){return (bool)(n & (1<<pos));}///return pos bit
ll power(ll xx1,ll n)
{
    ///complexx1ity O(logn)
    if(n==0)return 1;
    else if(n%2==0)
    {
        ll y=power(xx1,n/2);
        return y*y;
    }
    else
        return xx1*power(xx1,n-1);
}
int strTOint(string s)
{
    stringstream ss;
    int xx1;
    ss<<s;
    ss>>xx1;
    return xx1;
}
double geo_dist(int a,int b,int c,int d)
{
    double dd=(double)(a-c)*(a-c)+(b-d)*(b-d);
    double r=sqrt(dd)+eps;
    return r;
}
ll bigmod(ll a,ll p,ll m)
{
    if(p==0)return 1%m;
    if(p%2==0)
    {
        ll y=bigmod(a,p/2,m);
        return (y*y)%m;
    }
    else
    {
        return (a*bigmod(a,p-1,m))%m;
    }
}
ll xx1,y,d,g;
void exx1t_gcd(ll a,ll b)
{
    if(b==0)
    {
        xx1=1;y=0;d=a;return;
    }
    exx1t_gcd(b,a%b);
    ll xx11=y;
    ll y1=xx1-(a/b)*y;
    xx1=xx11;
    y=y1;
}
ll modInv (ll a,ll m ) {

    ///if m prime
    ///ll xx1 = bigmod( a, m - 2, m ); ///(axx1)%m = 1
   /// i m not prime;
    exx1t_gcd( a, m);
    ///Process xx1 so that it is between 0 and m-1
    xx1 %= m;
    if ( xx1 < 0 ) xx1 += m;
    return xx1;
}
vector<int>num;
void input(string s)
{
    ///declare a gloabl vector num & values will be in num
    istringstream ss(s);
    int n;
    while(ss>>n)
    {
        num.pb(n);
    }
}
int fxx1[]={0,0,-1,1,-1,1,1,-1};
int fy[]={1,-1,0,0,1,1,-1,-1};
///FOR KNIGHT MOVE
///int fxx1[]={2,1,-1,-2,-2,-1,1,2};
///int fy[]={1,2,2,1,-1,-2,-2,-1};
map<string,int>mp;
vector<ll>v1,v2;
ll pot[1000010];
ll cost[1000100];
int main()
{
    ///freopen("in.txx1t","r",stdin);
    ///freopen("out.txx1t","w",stdout);
    ll n,m,k;
    while(scanlll(n,m,k)==3)
    {
        v1.clear();v2.clear();
        ll xx1,s;
        scanll(xx1,s);
        unsigned ll ans=(unsigned ll)(n*xx1);

        for(int i=0;i<m;i++)scanl(pot[i]);
        for(int i=0;i<m;i++){
                scanl(cost[i]);
                if(cost[i]<=s)
                {
                    unsigned ll temp=(unsigned ll)pot[i];
                    unsigned ll res=(unsigned ll)(temp*n);
                    ans=min(ans,res);
                }
        }
        for(int i=0;i<k;i++)
        {
            ll pq;
            scanl(pq);
            v1.pb(pq);
        }
         for(int i=0;i<k;i++)
        {
            ll pq;
            scanl(pq);
            if(pq<=s)
            {
                unsigned ll temp=(unsigned ll)(n-v1[i]);
                unsigned ll res=(unsigned ll)(temp*xx1);
                ans=min(ans,res);
            }
            v2.pb(pq);
        }
        for(int i=0;i<m;i++)
        {
            if(cost[i]<=s)
            {
                ll somoi=pot[i];
                ll val=s-cost[i];
                if(val<=0)continue;
                int up=upper_bound(v2.begin(),v2.end(),val)-v2.begin()-1;

              //  cout<<up<<endl;
                if(up<0)
                {
                    continue;
                }
                ll add=v1[up];
                ll temp=n-add;
                unsigned ll res=(unsigned ll)(temp*somoi);
                ans=min(ans,res);
            }
        }
        printf("%llu\n",ans);
    }
    return 0;
}

