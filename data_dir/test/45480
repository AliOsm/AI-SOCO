#include <bits/stdc++.h>
using namespace std;

int const N = 2e5 + 10;

int n, c[N];
vector <int> adj[N], tree[N];

int id = 1;

void dfs0 (int v, int ID, int par)
{
	for (int i = 0; i < adj[v].size(); i++)
	{
		int u = adj[v][i];

		if (u == par)
			continue;

		if (c[u] != c[v])
		{
			++id;
			tree[ID].push_back (id);
			tree[id].push_back (ID);
			dfs0 (u, id, v);
		}
		else
			dfs0 (u, ID, v);
	}
}

int white, black;

void dfs1 (int v, int cor, int par)
{
	if (!cor)
		white++;
	else
		black++;

	for (int i = 0; i < tree[v].size(); i++)
	{
		int u = tree[v][i];

		if (u == par)
			continue;

		dfs1 (u, cor ^ 1, v);
	}
}

int maior = -1, idx = -1;

void dfs2 (int v, int par, int dis)
{
	if (dis > maior)
	{
		idx = v;
		maior = dis;
	}

	for (int i = 0; i < tree[v].size(); i++)
	{
		int u = tree[v][i];

		if (u == par)
			continue;

		dfs2 (u, v, dis + 1);
	}
}

void find_diameter ()
{
	dfs2 (1, -1, 1);
	dfs2 (idx, -1, 1);
}

int solve ()
{
	dfs0 (1, 1, -1);
	dfs1 (1, 0, -1);

	int ans = min (black, white);

	find_diameter();

	ans = min (ans, maior / 2);

	return ans;
}

int main ()
{
	cin.sync_with_stdio (false);
	cin.tie (0);
	cout.tie (0);

	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> c[i];

	for (int i = 1; i <= n - 1; i++)
	{
		int u, v;
		cin >> u >> v;
		adj[u].push_back (v);
		adj[v].push_back (u);
	}

	cout << solve() << '\n';
	return 0;
}