#include <algorithm>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

bool palin(const string &s) {
	for (int i = 0, j = s.length() - 1; i < j; i++, j--)
		if (s[i] != s[j])
			return false;
	return true;
}

int main() {
	ios::sync_with_stdio(false);
	int k, n;
	cin >> k >> n;
	unordered_map<string,vector<int>> map;
	map.reserve(k * 2);
	while (k-- > 0) {
		string s;
		int a;
		cin >> s >> a;
		vector<int> &aa = map[s];
		aa.push_back(a);
	}
	k = map.size();
	int *a0 = new int[k]();
	int *a1 = new int[k]();
	k = 0;
	for (auto &e : map) {
		vector<int> &aa = e.second;
		sort(aa.begin(), aa.end());
	}
	for (auto &e : map) {
		const string &s = e.first;
		vector<int> &aa = e.second;
		if (palin(s)) {
			int sum = 0, l = aa.size();
			for (int i = l - 1, a; i > 0 && (a = aa[i] + aa[i - 1]) > 0; i -= 2)
				sum += a;
			a0[k] = sum;
			sum = max(aa[l - 1], 0);
			for (int i = l - 2, a; i > 0 && (a = aa[i] + aa[i - 1]) > 0; i -= 2)
				sum += a;
			a1[k] = sum;
		} else {
			string t(s);
			reverse(t.begin(), t.end());
			if (s < t) {
				auto it = map.find(t);
				if (it != map.end()) {
					vector<int> &bb = it->second;
					int sum = 0;
					for (int i = aa.size() - 1, j = bb.size() - 1, ab; i >= 0 && j >= 0 && (ab = aa[i] + bb[j]) > 0; i--, j--)
						sum += ab;
					a0[k] = sum;
					a1[k] = 0;
				}
			}
		}
		k++;
	}
	int sum = 0;
	for (int i = 0; i < k; i++)
		sum += a0[i];
	int max = sum;
	for (int i = 0; i < k; i++)
		max = std::max(max, sum - a0[i] + a1[i]);
	cout << max << endl;
	return 0;
}
