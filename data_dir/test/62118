//be naame khodaa

#include <iostream>
#include <algorithm>
#include <vector>

typedef long long ll;

const ll P = 1e9+7;

using namespace std;

int a;
int sz[1050];
ll dp[2][100005], f[100005], rf[100005];
vector <int> luck;

ll Pow(int a, int b)
{
	if (b == 1)
		return a;
	ll ans = Pow(a, b/2);
	ans = ans*ans%P;
	if (b%2)
		ans = ans*a%P;
	return ans;
}

bool lucky(int x)
{
	while (x)
	{
		if (x%10 != 4 && x%10 != 7)
			return false;
		x /= 10;
	}
	return true;
}

ll C(int n, int k)
{
	return (n >= k) ? (f[n]*rf[k])%P * rf[n-k]%P : 0;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	int n, k, l = 0, nl = 0;
	cin >> n >> k;
	for (int i = 0; i < n; i++)
	{
		cin >> a;
		if (lucky(a))
			luck.push_back(a);
	}

	sort(luck.begin(), luck.end());
	sz[0] = n - luck.size();
	for (int i = 0; i < luck.size(); i++)
	{
		if (i == 0 || luck[i] != luck[i-1])
			l++;
		sz[l]++;
	}

	f[0] = 1;
	rf[0] = 1;
	for (int i = 1; i <= sz[0]; i++)
	{
		f[i] = f[i-1]*i%P;
		rf[i] = rf[i-1]*Pow(i, P-2)%P;
	}


	for (int i = 0; i <= k; i++)
		dp[0][i] = C(sz[0], i);
	for (int i = 1; i <= l; i++)
	{
		dp[i%2][0] = 1;
		for (int j = 1; j <= k; j++)
			dp[i%2][j] = (dp[1-i%2][j] + (dp[1-i%2][j-1]*sz[i]))%P;
	}
	cout << dp[l%2][k] << endl;
    return 0;
}
