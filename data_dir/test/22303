#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> PI;
char grid[4][110][110],all_grid[410][410],ch[410][410];
int id[4],n;
int calc_cost(bool is_black){
	int cost=0;
	if(is_black){
		if(all_grid[0][0]=='0')
			cost++;
		ch[0][0]='1';
	}else{
		if(all_grid[0][0]=='1')
			cost++;
		ch[0][0]='0';
	}
	for(int i=0;i<2*n;i++){
		if(i>0){
			int v=ch[i-1][0]-'0';
			if(all_grid[i][0]==ch[i-1][0]){
				ch[i][0]=(v^1)+'0';
				cost++;
			}else
				ch[i][0]=all_grid[i][0];
		}
		for(int j=1;j<2*n;j++){
			int v=ch[i][j-1]-'0';
			if(all_grid[i][j]==ch[i][j-1]){
				ch[i][j]=(v^1)+'0';
				cost++;
			}else
				ch[i][j]=all_grid[i][j];
		}
	}
	return cost;
}
int main(){
	scanf("%d",&n);
	for(int i=0;i<4;i++)
		for(int j=0;j<n;j++)
			scanf("%s",grid[i][j]);
	for(int i=0;i<4;i++)
		id[i]=i;
	int ans=1e5+10;
	do{
		for(int i=0;i<n;i++)
			for(int j=0;j<n;j++)
				all_grid[i][j]=grid[id[0]][i][j];
		for(int i=0;i<n;i++)
			for(int j=n;j<2*n;j++)
				all_grid[i][j]=grid[id[1]][i][j-n];
		for(int i=n;i<2*n;i++)
			for(int j=0;j<n;j++)
				all_grid[i][j]=grid[id[2]][i-n][j];
		for(int i=n;i<2*n;i++)
			for(int j=n;j<2*n;j++)
				all_grid[i][j]=grid[id[3]][i-n][j-n];
		ans=min(ans,calc_cost(0));
		for(int i=0;i<n;i++)
			for(int j=0;j<n;j++)
				all_grid[i][j]=grid[id[0]][i][j];
		for(int i=0;i<n;i++)
			for(int j=n;j<2*n;j++)
				all_grid[i][j]=grid[id[1]][i][j-n];
		for(int i=n;i<2*n;i++)
			for(int j=0;j<n;j++)
				all_grid[i][j]=grid[id[2]][i-n][j];
		for(int i=n;i<2*n;i++)
			for(int j=n;j<2*n;j++)
				all_grid[i][j]=grid[id[3]][i-n][j-n];
		ans=min(ans,calc_cost(1));
	}while(next_permutation(id,id+4));
	printf("%d\n",ans);
	return 0;
}