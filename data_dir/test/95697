#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#define ll long long
using namespace std;
int THR[15];

ll M[33][3];

int Hash(ll x, ll y) {
    x%=100003;
    y%=100003;
    
    int retval = (x*1000000007+y)%100003;
    retval = (retval + 100003)%100003;
    return retval;
}


bool can[100004];

int main() {
    THR[0]=1;
    for(int j=1;j<15;j++) {
        THR[j]=THR[j-1]*3;
    }
    
    
    int n;
    cin>>n;
    
    
    
    for(int i=0;i<n;i++) {
        cin>>M[i][0]>>M[i][1]>>M[i][2];
        //M[i][0]=rand()%10000000-5000000;
        //M[i][1]=rand()%10000000-5000000;
        //M[i][2]=rand()%10000000-5000000;

    }
    
    
    for(int m=0;m<100003;m++)
        can[m]=false;
    
    
    
    int n1 = n/2;
    int n2 = n-n/2;
    
    map<pair<int,int>,pair<ll,int> > hashes1;
    
    // 0 to n1-1
    for(int mask=0;mask<THR[n1];mask++) {
        int m = mask;
        ll T1=0;
        ll T2=0;
        ll T3=0;
        for(int j=0;j<n1;j++) {
            T1+=M[j][0];
            T2+=M[j][1];
            T3+=M[j][2];
            
            if (m%3==0) {
                T1-=M[j][0];
            } else if (m%3==1) {
                T2-=M[j][1];
            } else {
                T3-=M[j][2];
            }
            
            m/=3;
        }
        
        pair<int,int> H = make_pair(T2-T1, T3-T2);
        ll total = T1+T2+T3;
        
        
        map<pair<int,int>,pair<ll,int> >::iterator it = hashes1.find(H);
        
        
        
        if (it == hashes1.end()) {
            hashes1[H] = make_pair(total,mask);
        } else if ((it->second).first < total) {
            it->second = make_pair(total,mask);
        }
    }
    
    
    bool found=false;
    ll best_total = -1;
    int best_m1 = -1;
    int best_m2 = -1;
    
    // n1 to n-1
    for(int mask=0;mask<THR[n2];mask++) {
        int m = mask;
        ll T1=0;
        ll T2=0;
        ll T3=0;
        for(int j=0;j<n2;j++) {
            if (m%3==0) {
                T2+=M[j+n1][1];
                T3+=M[j+n1][2];
            } else if (m%3==1) {
                T1+=M[j+n1][0];
                T3+=M[j+n1][2];
            } else {
                T1+=M[j+n1][0];
                T2+=M[j+n1][1];
            }
            
            m/=3;
        }
        
       
        
        // need T1-T2 and T2-T3.
        map<pair<int,int>, pair<ll,int > >::iterator it
        = hashes1.find(make_pair(T1-T2, T2-T3));
        
        if (it == hashes1.end())
            continue;
        
        
        
        ll total = T1+T2+T3+(it->second).first;
        
        if (!found || total > best_total) {
            found = true;
            best_total = total;
            best_m1 = (it->second).second;
            best_m2 = mask;
        }
        
    }
    
    
    
    
    
    if (best_m1 == -1) {
        printf("Impossible\n");
        return 0;
    }
    
    
    
    for(int j=0;j<n1;j++) {
        
        if (best_m1%3==0) {
            printf("MW\n");
        } else if (best_m1%3==1) {
            printf("LW\n");
        } else {
            printf("LM\n");
        }
        
        best_m1/=3;
    }
    
    
    
    for(int j=0;j<n2;j++) {
        
        if (best_m2%3==0) {
            printf("MW\n");
        } else if (best_m2%3==1) {
            printf("LW\n");
        } else {
            printf("LM\n");
        }
        
        best_m2/=3;
    }
    
    
    
    
}