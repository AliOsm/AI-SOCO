#include<bits/stdc++.h>
using namespace std;

long long int dp[76][76][76][2];

int n;

#define MAX 76
char buf[76];


deque<int> V;
deque<int> K;
deque<int> O;

string s;

int calcV(int v_id, int target){
	int id = upper_bound(V.begin(), V.end(), target) - V.begin();
	id = max(0, v_id - id);
	return id;
}
int calcO(int v_id, int target){
	int id = upper_bound(O.begin(), O.end(), target) - O.begin();
	id = max(0, v_id - id );
	return id;
}
int calcK(int v_id, int target){
	int id = upper_bound(K.begin(), K.end(), target) - K.begin();
	id = max(0, v_id - id);
	return id;
}
int main(){
	cin >> n;
	scanf("%s", buf);
	s = buf;
	for (int i = 0; i < s.size(); i++){
		if (s[i] == 'V'){
			V.push_back(i);
			continue;
		}
		if (s[i] == 'K'){
			K.push_back(i);
			continue;
		}
		O.push_back(i);
	}
	for (int i = 0; i < MAX; i++){
		for (int j = 0; j < MAX; j++){
			for (int k = 0; k < MAX; k++){
				for (int kk = 0; kk < 2; kk++){
					dp[i][j][k][kk] = LLONG_MAX;
				}
			}
		}
	}
	dp[0][0][0][0] = 0;
	for (int i = 0; i < n; i++){
		for (int j = 0; j <= i; j++){
			for (int k = 0; k <= i; k++){
				for (int kk = 0; kk < 2; kk++){
					if (dp[i][j][k][kk] != LLONG_MAX){
						int cntv = j;
						int cntk = k;
						int cnto = i-j-k;
						if (cntv != V.size()){
							long long int &val = dp[i + 1][j + 1][k][true];
							long long int inv = dp[i][j][k][kk];
							inv += calcK(cntk, V[cntv]) + calcO(cnto, V[cntv]);
							val = min(val, inv);
						}
						if (kk == false && cntk != K.size()){
							long long int &val = dp[i + 1][j][k + 1][false];
							long long int inv = dp[i][j][k][kk];
							inv += calcV(cntv, K[cntk]) + calcO(cnto, K[cntk]);
							val = min(val, inv);
						}
						if (cnto != O.size()){
							long long int &val = dp[i + 1][j][k][false];
							long long int inv = dp[i][j][k][kk];
							inv += calcV(cntv, O[cnto]) + calcK(cntk, O[cnto]);
							val = min(val, inv);
						}
					}
				}
			}
		}
	}
	long long int ans = dp[n][V.size()][K.size()][0];
	ans = min(ans, dp[n][V.size()][K.size()][1]);
	printf("%lld\n", ans);
	return 0;
}