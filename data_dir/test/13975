#include <iostream>
#include <vector>
#define pb push_back

using namespace std;
const int MAXN = 100005;

vector<int> E[MAXN];
int goal[MAXN], current[MAXN];
vector<int> ans;

void dfs(int node, int father = -1, int height = 0, int odd_flag = 0, int even_flag = 0){

    if(height % 2 == 0 && even_flag)
        current[node ] ^= 1;
    
    if(height % 2 != 0 && odd_flag)
        current[node] ^= 1;
        
    if(current[node] != goal[node])
    {
        ans.pb(node);
        if(height % 2 == 0) even_flag ^= 1;
        else odd_flag ^= 1;
    }
    
    for(int i=0; i < E[node].size(); i++){
        int v = E[node][i];
        if(v == father) continue;
        
        dfs(v,node, height ^ 1, odd_flag, even_flag);
    }
}

int main() {
    int n; cin >> n;
    
    for(int i=1; i < n; i++){
        int u, v; cin >> u >> v;
        E[u].pb(v);
        E[v].pb(u);
    }
    
    for(int i=1; i <= n; i++){
        cin >> current[i];
    }
    
    for(int i=1; i <= n; i++)
        cin >> goal[i];
        
    dfs(1);
    cout <<ans.size() << endl;
    
    for(int i=0; i < ans.size(); i++)
        cout << ans[i] << endl;
    return 0;
}