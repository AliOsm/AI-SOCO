#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cassert>
#include <queue>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define pb push_back
#define fst first
#define snd second
#define SZ(x) ((int)x.size())
typedef long long ll;
#define dforn(i, n) for(int i = n - 1; i >= 0; i--)

const int MAXN = 128;

int n, sz[MAXN];
string s[MAXN], t[MAXN];

bool solve(){
  //~ printf("Probando con:");
  //~ forn(i, 6){
    //~ printf(" %s", t[i].c_str());
  //~ }
  //~ puts("");
  if(t[0][0] != t[3][0]) return false;
  if(t[0].back() != t[4][0]) return false;
  if(t[3].back() != t[1][0]) return false;
  if(t[1].back() != t[5][0]) return false;
  if(t[5].back() != t[2].back()) return false;
  if(t[4].back() != t[2][0]) return false;
  if(SZ(t[0]) + SZ(t[2]) - 1 != SZ(t[1])) return false;
  if(SZ(t[3]) + SZ(t[5]) - 1 != SZ(t[4])) return false;
  if(t[1][SZ(t[0])-1] != t[4][SZ(t[3])-1]) return false;
  return true;
}

void pintarH(int x, int y, string r, vector<string> &G){
  forn(i, SZ(r)){
    G[x][y+i] = r[i];
  }
}

void pintarV(int x, int y, string r, vector<string> &G){
  forn(i, SZ(r)){
    G[x+i][y] = r[i];
  }
}

vector<string> generate(){
  vector<string> grid(SZ(t[4]), string(SZ(t[1]), '.'));
  
  pintarH(0, 0, t[0], grid);
  pintarH(SZ(t[3])-1, 0, t[1], grid);
  pintarH(SZ(t[4])-1, SZ(t[0])-1, t[2], grid);
  
  pintarV(0, 0, t[3], grid);
  pintarV(0, SZ(t[0])-1, t[4], grid);
  pintarV(SZ(t[3])-1, SZ(t[1])-1, t[5], grid);
  
  return grid;
  //~ forn(i, SZ(grid)){
    //~ printf("%s\n", grid[i].c_str());
  //~ }
}

int main() {
  //~ freopen("input.in", "r", stdin);
  while(cin >> s[0]){
    forr(i, 1, 6) cin >> s[i];
    
    int p[] = {0, 1, 2, 3, 4, 5};
    vector<vector<string>> ans;
    do {
      forn(i, 6){
        t[i] = s[p[i]];
      }
      if(solve()){
        ans.pb(generate());
      }
    } while(next_permutation(p, p + 6));
    if(!SZ(ans)){
      puts("Impossible");
    } else {
      sort(ans.begin(), ans.end());
      forn(i, SZ(ans[0])){
        printf("%s\n", ans[0][i].c_str());
      }
    }
  }
  return 0;
}
