//IOI 2021
#include <bits/stdc++.h>
using namespace std;
mt19937 parsa(chrono::steady_clock::now().time_since_epoch().count());
#define pb push_back
#define ff first
#define ss second

typedef long long ll;
typedef pair<int, int> pii;

const ll MAXN = 2 * 100 * 1000 + 17, inf = 1e17;

ll n, m, d[MAXN], k, b[MAXN];
priority_queue<ll> ans;
vector<pii> adj[MAXN];

void dij(int v) {
	vector<int> ver;
	d[v] = 0;
	set<pii> s;
	s.insert({0, v});
	while (s.size()) {
		int u = s.begin() -> ss;
		s.erase(s.begin());
		ver.pb(u);
		if (ans.size() == k && ans.top() <= d[u])
			continue;
		else if (u <= v)
			;
		else {
			if (ans.size() < k)
				ans.push(d[u]);
			else {
				ans.pop();
				ans.push(d[u]);
			}
		}
		for (auto i : adj[u]) {
			ll z = i.ff, w = i.ss;
			if (w + d[u] < d[z]) {
				s.erase({d[z], z});
				d[z] = d[u] + w;
				s.insert({d[z], z});
			}
		}
	}
	for (auto i : ver)
		d[i] = inf;
}

int main() {
	ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> k;
	for (int i = 1; i <= n; i++)
		d[i] = inf;
	vector<pair<int, pii>> edge;
	for (int i = 1; i <= m; i++) {
		int v, u, w;
		cin >> v >> u >> w;
		if (m <= k) {
			adj[v].pb({u, w});
			adj[u].pb({v, w});
		}
		else
			edge.pb({w, {v, u}});
	}
	if (m > k) {
		sort(edge.begin(), edge.end());
		for (int i = 0; i < k; i++)
			adj[edge[i].ss.ff].pb({edge[i].ss.ss, edge[i].ff}), adj[edge[i].ss.ss].pb({edge[i].ss.ff, edge[i].ff});
	}
	int fr = 1, bk = n;
	for (int i = 1; i <= n; i++)
		if (i % 2)
			dij(fr++);
		else
			dij(bk--);
	cout << ans.top() << endl;
	return 0;

}
