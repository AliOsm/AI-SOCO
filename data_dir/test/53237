/**
 *    author:  skmonir
 *    created: 18-Sep-2017 12:06:59
**/
#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <typename T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <typename T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <typename T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <typename T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

const int N = (int) 1e5 + 5;
const int INF = (int) 1e9 + 7;
const long long MOD = (long long) 1e9 + 7;

#define error(args...) {vector <string> _v = split(#args, ','); err(_v.begin(), args); cout << endl;}
vector <string> split(const string &s, char c) {
    vector <string> v;
    stringstream ss(s); string x;
    while (getline(ss, x, c)) v.emplace_back(x);
    return move(v);
}
void err(vector <string> :: iterator it) {}
template <typename T, typename... Args>
void err(vector <string> :: iterator it, T a, Args... args) {
    cout << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << ", ";
    err(++it, args...);
}
vector <int> v[N * 2];
vector <int> a;
int BinarySearch(int l, int r , int tar) {
    while ( l <= r) {
        int mid = ( l + r ) >> 1;
        if (a[mid] <= tar) {
            r = mid - 1;
        }
        else l = mid + 1;
    }

    return l;
}
int main() {
    int n ;
    Int(n);
    int mm = 0;
    for (int i = 0 ; i < n ; i++) {
        int x;
        Int(x);
        if (!a.empty()) {
            int ind = BinarySearch(0, a.size() - 1 , x);
            //cout << ind << endl;
            if (ind < 0)ind = 0;
            v[ind].push_back(x);
            if (a.size() == ind) {
                a.push_back(x);
            }
            else a[ind] = x;
            mm = max(mm, ind);
        }
        else {
            v[0].push_back(x);
            a.push_back(x);
        }
    }
    for (int i = 0 ; i <= mm ; i++) {
        for (auto j : v[i]) {
            printf("%d ", j);
        }
        printf("\n");
    }

    return 0;
}