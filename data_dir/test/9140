//Ansh Khanna
#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define fi first
#define se second
using namespace std;
#define sd(x) scanf("%d",&x)
#define pd(x) printf("%d",x)
#define sl(x) scanf("%lld",&x)
#define pl(x) printf("%lld",x)
#define mem(x,a) memset(x,a,sizeof(x))
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define all(v) v.begin(),v.end()
#define N (int)(1e5+500)
int dfs_count[100005];
int dfs_min[100005];
int vis[100005];
int cost[100005];
vector<int> v[100005];
vector<int> SCC[100005];
vector<int> s;
int dfs_counter=0,nscc=0;
int pa[N],possans[N];
void tarjan(int u)
{
    vis[u]=1;
    dfs_count[u]=dfs_min[u]=dfs_counter++;
    s.push_back(u);
    for(int j=0;j<v[u].size();j++)
    {
        int p=v[u][j];
        if(dfs_count[p]==-1)
            tarjan(p);
        if(vis[p])
        {
            dfs_min[u]=min(dfs_min[u],dfs_min[p]);
        }
    }
    if(dfs_count[u]==dfs_min[u])
    {
       while(!s.empty())
       {
           int v1=s.back();
           s.pop_back();
           vis[v1]=0;
           SCC[nscc].push_back(v1);
           if(u==v1)
            break;

       }
        nscc++;
    }

}
void solve(){
    int n;
    sd(n);
    for(int i=1;i<=n;i++){
        int x;
        sd(x);
        v[x].pb(i);
        pa[i]=x;
    }
    mem(dfs_count,-1);
    for(int i=1;i<=n;i++){
        if(dfs_count[i]==-1){
            tarjan(i);
        }
    }
    ll ans=1;
    for(int i=0;i<nscc;i++){
        int k=SCC[i].size();
        if(k==1){
           int to=SCC[i][0];
           if(pa[to]!=to){
              printf("-1");
              return;
           }
        }
        else{
            int p;
            if(k%2)
                p=k;
            else
                p=k/2;
            ans=(ans*(1ll)*p)/__gcd(ans,(ll)p);
        }
    }
    pl(ans);
}
int main(){
   //freopen("input.IN","r",stdin);
   //freopen("out.txt","w",stdout);
   int t=1;
   //sd(t);
   //ios_base::sync_with_stdio(false);
   for(int i=1;i<=t;i++){
       //printf("Case #%d: ",i);
       solve();
   }
   return 0;
}
