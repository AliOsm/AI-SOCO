#include <bits/stdc++.h>
using namespace std;
#define pf push_front
#define pb push_back
#define FOR(i,begin,end) for (int i=begin;i<=end;i++)
#define rep(i,t) for (int i=0;i<t;i++)
#define pii pair<LL,LL>
#define pi pair<pii,pii>
#define X first
#define Y second 
#define fast cin.tie(0),cout.tie(0),ios::sync_with_stdio(false) 
typedef long long LL;
const LL maxN=2e5+7,MOD=1e9+7,INF=1e18+7,N=5000+7;
LL n,m,ans,x,y,h[maxN],d[maxN],p[maxN][20],dp[maxN],st,en,mid,t,val[maxN],e[maxN],help,cnt[maxN],hx,hy,po[20];
vector<int>pos,neg;
vector<pii>a[maxN];
void dfs(int s, int par)
{
    dp[s]=++t;
    cnt[s]=1;
    p[s][0]=par;
    FOR(i,1,18)
        p[s][i]=p[p[s][i-1]][i-1];
    rep(i,a[s].size())
    {
        if(a[s][i].X!=par)
            h[a[s][i].X]=h[s]+1,d[a[s][i].X]=d[s]+a[s][i].Y,dfs(a[s][i].X,s),cnt[s]+=cnt[a[s][i].X];
    }
    e[s]=t;
}
LL dis(LL x, LL w)
{
    LL res=x;
    for(LL j=18;j>=0;j--)
    {
        if(w>=po[j])
            x=p[x][j],w-=po[j];
    }
    return x;
}
bool is_good(LL vert, LL f)
{
    LL res=dis(vert,f);
    if(d[vert]-d[res]<=val[vert])
        return true;
    return false;
}
main()  
{
    fast;
    po[0]=1;
    FOR(i,1,18)
        po[i]=po[i-1]*2;
    cin>>n;
    FOR(i,1,n)
        cin>>val[i];
    FOR(i,2,n)  
        cin>>x>>y,a[i].pb(pii(x,y)),a[x].pb(pii(i,y));
    dfs(1,0);
    FOR(i,1,n)
    {
        st=0;
        en=h[i];
        FOR(j,1,18)
        {
            mid=(st+en)>>1;
            if(is_good(i,mid))
                st=mid;
            else
                en=mid;
        }
        if(is_good(i,en))
            help=dis(i,en);
        else
        {
            if(is_good(i,mid))
                help=dis(i,mid);
            else
                help=dis(i,st);
        }
        neg.pb(dp[p[help][0]]);
    }
    sort(neg.begin(),neg.end());
    FOR(i,1,n)
    {
        if(e[i]>=neg[n-1])
            hy=n;
        else
            hy=upper_bound(neg.begin(),neg.end(),e[i])-neg.begin();
        hx=lower_bound(neg.begin(),neg.end(),dp[i])-neg.begin();
        cout<<cnt[i]-hy+hx-1<<" ";
    }
    return cout<<'\n',0;
}