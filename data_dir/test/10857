#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;

//DSU
struct DSU {
    int N;
    vector<int> component, weight;

    DSU(int n) {
        N = n;
        component.resize(n + 1);
        weight.resize(n + 1);
        for (int i = 0; i <= N; i++) {
            component[i] = i;
            weight[i] = 1;
        }
    }

    int root(int x) {
        while (component[x] != x) {
            component[x] = component[component[x]];
            x = component[x];
        }
        return x;
    }

    void merge(int x, int y) {
        if (same(x, y))
            return;
        x = root(x);
        y = root(y);
        if (weight[x] < weight[y])
            swap(x, y);
        weight[x] += weight[y];
        component[y] = x;
    }

    bool same(int x, int y) {
        return root(x) == root(y);
    }

};

//end of DSU

int main()
{
	fastread;
	int n,m;
	cin>>n>>m;
	DSU d(n);
	for(int i=0;i<m;i++){
		int len,prev,cur;
		cin>>len;
		for(int j=0;j<len;j++){
			cin>>cur;
			if(j!=0){
				d.merge(prev,cur);
			}
			prev=cur;
		}
	}
	for(int i=1;i<=n;i++){
		cout<<d.weight[d.root(i)]<<" ";
	}
	return 0;
}