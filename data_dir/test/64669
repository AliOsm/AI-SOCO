#include<bits/stdc++.h>
#define all(v) (v).begin(),(v).end()
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ri(x) scanf("%d",&(x))
#define ri2(x,y) scanf("%d %d",&(x),&(y))
#define ri3(x,y,z) scanf("%d %d %d",&(x),&(y),&(z))
#define rll(x) scanf("%lld",&(x))
#define rll2(x,y) scanf("%lld %lld",&(x),&(y))
#define rll3(x,y,z) scanf("%lld %lld %lld",&(x),&(y),&(z))
#define gc(x) ((x) = getchar())
using namespace::std;

const long double PI = acos(-1);
const long long MOD = 1000000000 +7;

typedef long long ll;
typedef pair<ll,ll> pll;
typedef pair<ll,pll> tll;
typedef pair<int,int> ii;
typedef pair<int,ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<iii> viii;
typedef vector<ll> vll;
typedef vector<pll> vpll;
typedef vector<tll> vtll;
typedef vector<string> vs;
typedef set<int> si;
typedef set<ii> sii;
typedef set<iii> siii;

ll gcd(ll a, ll b){ return b==0?a:gcd(b,a%b);}

ll add(ll a, ll b, ll m = MOD){
	if(a >= m) a %= m;
	if(b >= m) b %= m;
	if(a < 0) a += m;
	if(b < 0) b += m;
	ll res = a+b;
	if(res >= m or res <= -m) res %= m;
	if(res < 0) res += m;
	return res;
}

ll mul(ll a, ll b, ll m = MOD){
	if(a >= m) a %= m;
	if(b >= m) b %= m;
	if(a < 0) a += m;
	if(b < 0) b += m;
	ll res = a*b;
	if(res >= m or res <= -m) res %= m;
	if(res < 0) res += m;
	return res;
}

ll pow_mod(ll a, ll b, ll m = MOD){
	ll res = 1LL;
	a = a%m;
	while(b){
		if(b&1) res = mul(res,a,m);
		b >>= 1;
		a = mul(a,a,m);
	}
	return res;
}

ll fastexp(ll a, ll b){
	ll res = 1LL;
	while(b){
		if(b&1) res = res*a;
		b >>= 1;
		a *= a;
	}
	return res;
}

int gcdExtendido(int a, int b, int *x, int *y){
	if(a == 0){
		*x = 0;
		*y = 1;
		return b;
	}
	int x1, y1;
	int gcd = gcdExtendido(b%a,a,&x1,&y1);
	
	*x = y1-(b/a)*x1;
	*y = x1;
	return gcd;
}

int modInverso(int a, int m){
	int x, y;
	int g = gcdExtendido(a,m,&x,&y);
	if(g!=1) return -1;
	else return (x%m + m)%m;
}

/****************************************
*************P*L*A*N*T*I*L*L*A************
*****************************************/

const int SUML = 200+5;
const int E = 26;

int n;
ll l;
int a[SUML];
int p[SUML];
char s[SUML];
int nodes = 1;
int suf[SUML];
int val[SUML];
bool vis[SUML];
int super[SUML];
int enter[SUML];
int go[SUML][E];
ll C[SUML][SUML];
ll R[SUML][SUML];
ll M[SUML][SUML];
int trie[SUML][E];

void insert(int npat){
	int pos = 0;
	int len = strlen(s);
	for(int i=0; i<len; i++){
		int nxt = s[i] - 'a';
		if(trie[pos][nxt] == 0){
			p[nodes] = pos;
			enter[nodes] = nxt;
			trie[pos][nxt] = nodes++;
		}
		pos = trie[pos][nxt];
	}
	val[pos] += a[npat];
}

int getSuffixLink(int);

int getGo(int u, int c){
	if(go[u][c] != -1) return go[u][c];
	if(trie[u][c]) return go[u][c] = trie[u][c];
	return go[u][c] = u ? getGo(getSuffixLink(u),c) : 0;
}

int getSuffixLink(int u){
	if(suf[u] != -1) return suf[u];
	if(p[u] == 0) return suf[u] = 0;
	return suf[u] = getGo(getSuffixLink(p[u]),enter[u]);
}

int getSuperLink(int u){
	if(super[u] != -1) return super[u];
	if(u == 0) return super[u] = 0;
	if(val[getSuffixLink(u)]) return super[u] = getSuffixLink(u);
	return super[u] = getSuperLink(getSuffixLink(u));
}

int getCost(int u){
	if(vis[u]) return val[u];
	vis[u] = true;
	val[u] += getCost(getSuperLink(u));
	return val[u];
}

void buildAutomaton(int n_pat){
	for(int i=1; i<=n_pat; i++){
		scanf("%s",s);
		insert(i);
	}
	for(int i=0; i<nodes; i++){
		suf[i] = super[i] = -1;
		for(int j=0; j<E; j++){
			go[i][j] = -1;
		}
	}
	for(int i=0; i<nodes; i++){
		getSuffixLink(i);
		getSuperLink(i);
		for(int j=0; j<E; j++){
			getGo(i,j);
		}
		getCost(i);
	}
}

void buildMatrix(){
	for(int i=0; i<nodes; i++){
		for(int j=0; j<nodes; j++){
			M[i][j] = -1;
		}
	}
	for(int i=0; i<nodes; i++){
		for(int j=0; j<E; j++){
			int nxt = getGo(i,j);
			M[i][nxt] = val[nxt];
		}
	}
}

void multiply(int type){
	for(int i=0; i<nodes; i++){
		for(int j=0; j<nodes; j++){
			C[i][j] = -1;
			for(int k=0; k<nodes; k++){
				if(type){
					if(R[i][k] == -1 or M[k][j] == -1) continue;
					C[i][j] = max(C[i][j],R[i][k] + M[k][j]);
				}
				else{
					if(M[i][k] == -1 or M[k][j] == -1) continue;
					C[i][j] = max(C[i][j],M[i][k] + M[k][j]);
				}
			}
		}
	}
	for(int i=0; i<nodes; i++){
		for(int j=0; j<nodes; j++){
			if(type) R[i][j] = C[i][j];
			else M[i][j] = C[i][j];
		}
	}
}

void fastexpo(ll x){
	for(int i=0; i<nodes; i++){
		for(int j=0; j<nodes; j++){
			R[i][j] = -1;
		}
	}
	R[0][0] = 0;
	while(x > 0){
		if(x & 1) multiply(1);
		multiply(0);
		x >>= 1;
	}
}

int main(){
	ri(n);
	rll(l);
	for(int i=1; i<=n; i++) ri(a[i]);
	buildAutomaton(n);
	buildMatrix();
	fastexpo(l);
	ll ans = 0LL;
	for(int i=0; i<nodes; i++){
		ans = max(ans,R[0][i]);
	}
	cout << ans << endl;
	return 0;
}
