#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 7001;

int dp[N][2];
int cn[N][2];
int st[N][2];
int ln[2];
int n;

bool vis[N][2];

void input() {
    cin >> n;
    cin >> ln[0];
    for(int i = 1; i <= ln[0]; ++i) {
        cin >> st[i][0];
    }
    cin >> ln[1];
    for(int i = 1; i <= ln[1]; ++i) {
        cin >> st[i][1];
    }
}

int prev(int u, int x) {
    if(u > x) {
        return u - x;
    } else {
        return u + n - x;
    }
}

void dfs(int u, int t) {
    if(vis[u][t]) {
        return;
    }
    vis[u][t] = 1;
    if(dp[u][t] == 0) {
        for(int i = 1; i <= ln[!t]; ++i) {
            if(prev(u, st[i][!t]) == 1) {
                continue;
            }
            dp[prev(u, st[i][!t])][!t] = 1;
            dfs(prev(u, st[i][!t]), !t);
        }
    } else {
        for(int i = 1; i <= ln[!t]; ++i) {
            if(prev(u, st[i][!t]) == 1) {
                continue;
            }
            if(++cn[prev(u, st[i][!t])][!t] == ln[!t]) {
                dp[prev(u, st[i][!t])][!t] = 0;
                dfs(prev(u, st[i][!t]), !t);
            }
        }
    }
}

void solve() {
    memset(dp, -1, sizeof dp);
    dp[1][0] = 0;
    dp[1][1] = 0;
    dfs(1, 0);
    dfs(1, 1);
    for(int i = 2; i <= n; ++i) {
        if(dp[i][0] == 1) {
            cout << "Win ";
        } else if(dp[i][0] == 0) {
            cout << "Lose ";
        } else {
            cout << "Loop ";
        }
    }
    cout << "\n";
    for(int i = 2; i <= n; ++i) {
        if(dp[i][1] == 1) {
            cout << "Win ";
        } else if(dp[i][1] == 0) {
            cout << "Lose ";
        } else {
            cout << "Loop ";
        }
    }
    cout << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
