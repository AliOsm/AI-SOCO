#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <string>
#include <cstring>
// DON'T DIVIDE
// Greedy, Prefix, Sets/Bsearch, Dfs/bfs, DP
using namespace std;

int n, m;
const int MAXN = 100005;
int a[MAXN];
vector<int> adj[MAXN];

int dfs(int idx, int par, int curr)
{
	if(a[idx] == 0)
		curr = 0;
	else
		curr++;
	if(curr > m)
		return 0;
	int total = 0;
	for(int i = 0; i < adj[idx].size(); i++)
		if(adj[idx][i] != par)
			total += dfs(adj[idx][i], idx, curr);

	if(adj[idx].size() == 1 && idx != 1)
		return 1;
	return total;
}

int main()
{
	ios::sync_with_stdio(0);
	cin >> n >> m;

	for(int i = 1; i <= n; i++)
		cin >> a[i];
	for(int i = 1; i <= n - 1; i++)
	{
		int u, v;
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	cout << dfs(1, 1, 0) << "\n";

	return 0;
}