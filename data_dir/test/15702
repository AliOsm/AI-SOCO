#include<bits/stdc++.h>
#define mp make_pair
#define int long long
#define pb push_back
#define ppb pop_back
#define mod 1000000007
#define mx 200011
#define inf 1000000009
#define ff first
#define ss second
using namespace std;
int n,m;
int tree[5*mx],arr[mx],arr1[mx];
multiset<int>s;
void build(int nd,int b,int e){
    if(b==e){
        tree[nd]=arr1[b];
        return;
    }
    int mid=(b+e)>>1;
    build(nd<<1,b,mid);
    build(nd<<1|1,mid+1,e);
    tree[nd] = tree[nd<<1]+tree[nd<<1|1];
    return;
}
int query1(int nd,int b,int e,int val){
    if(b==e)return b;
    int mid=(b+e)>>1;
    int l=nd<<1;
    int r=l+1;
    if(tree[l]>=val)return query1(l,b,mid,val);
    else return query1(r,mid+1,e,val-tree[l]);
}
int query2(int nd,int b,int e,int i,int j){
    if(e<i || b>j)return 0;
    if(b>=i && e<=j)return tree[nd];
    return query2(nd<<1,b,(b+e)>>1,i,j)+query2(nd<<1|1,( (b+e)>>1 )+1,e,i,j);
}
void upd(int nd,int b,int e,int i){
    if(e<i || b>i)return;
    if(b==e && b==i){
        tree[nd]=1;
        return;
    }
    upd(nd<<1,b,(b+e)>>1,i);
    upd(nd<<1|1,1+( (b+e)>>1 ),e,i);
    tree[nd]=tree[nd<<1]+tree[nd<<1|1];
    return;
}
 main()
{
//    freopen("in.txt","r",stdin);
//    freopen("out.txt","w",stdout);
//    cout<<"100000"<<endl;
//    for(int i=1;i<=100000;i++){
//        cout<<i<<" ";
//    }
//    cout<<endl;
//    for(int i=1;i<=100000;i++){
//        cout<<i<<" ";
//    }
//    cout<<endl;
    scanf("%lld",&n);
    int val=0;
    for(int i=1;i<=n;i++){
        scanf("%lld",&arr[i+1]);
        val += arr[i+1];
        arr[i+1]+=arr[i];
    }
    arr1[1]=1,arr1[n+2]=1;
    build(1,1,n+2);
    map<int,int>mymap;
    priority_queue<int>pq;
    pq.push(val);
   // printf("%lld\n",val);
    for(int i=1;i<=n;i++){
        int index;
        scanf("%lld",&index);
        index++;
        int temp = query2(1,1,n+2,1,index) ;
        int l = query1( 1,1,n+2 , temp );
        int r = query1(1,1,n+2 , temp+1 );
        if(l+1>r-1)val=0;
        else val = arr[r-1]-arr[l];
        if(val){
            mymap[val]++;
        }
        if(l+1>index-1)val=0;
        else val = arr[ index-1 ]-arr[l];
        if(val)pq.push(val);
        if(index+1>r-1)val=0;
        else val = arr[r-1]-arr[index];
        if(val)pq.push(val);
        upd(1,1,n+2,index);
        if(pq.size()){
            bool flag=0;
            while(pq.size()){
                int value=pq.top();
                if(mymap[value]==0){
                    flag=1;
                    printf("%lld\n",value);
                    break;
                }
                else{
                    mymap[value]--;
                    pq.pop();
                }
            }
            if(!flag)printf("0\n");
        }
        else{
            printf("0\n");
        }
    }
    return 0;
}
