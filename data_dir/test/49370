#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <set>
#include <map>
#include <unordered_map>
#include <cassert>
#include <iostream>
#include <iomanip>    
#include <cstring>
#include <cmath>
#include <functional>
#include <utility>

#define pb push_back
#define all(x) (x).begin(), (x).end()
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
#define rep(i, n) for (int (i) = 0; (i) < (n); (i)++)
#define forn(i, n) for (int (i) = 1; (i) <= (n); (i)++)

using namespace std;

template<class T> inline void umax(T &a,T b){if(a < b) a = b;}
template<class T> inline void umin(T &a,T b){if(a > b) a = b;}
template<class T> inline T abs(T a){return a > 0 ? a : -a;}

typedef long long ll;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 2e5 + 100;
const int mod = 1e9 + 7;

inline int add(int x, int y) {
	return (x + y >= mod) ? x + y - mod : x + y;
}

inline int mul(int x, int y) {
	return ll(x) * y % mod;
}

inline int mpow(int x, int n) {
	int res = 1;
	while (n > 0) {
		if (n & 1) {
			res = mul(res, x);
		}
		x = mul(x, x);
		n >>= 1;
	}
	return res;
}

int fact[N], ifact[N];

int choose(int n, int k) {
	return mul(fact[n], mul(ifact[n - k], ifact[k]));
}

int H(int n, int k) {
	if (n == 0) {
		return (k == 0);
	}
	return choose(n + k - 1, n - 1);
}

int f, w, h;
	
int calc(int cf, int cw, int hw) {
	if (ll(hw) * cw > w) {
		return 0;
	}
	int putF = cf;
	int putW = hw * cw;
	if (putF > f) {
		return 0;
	}
	//printf("%d, %d -> %d\n", cf, f - putF, H(cf, f - putF));
	//printf("%d, %d -> %d\n", cw, w - putW, H(cw, w - putW));
	return mul(H(cf, f - putF), H(cw, w - putW));
}

int main() {
	fact[0] = 1;
	for (int i = 1; i < N; i++) {
		fact[i] = mul(fact[i - 1], i);
	}
	ifact[N - 1] = mpow(fact[N - 1], mod - 2);
	for (int i = N - 2; i >= 0; i--) {
		ifact[i] = mul(ifact[i + 1], i + 1); 
	}

	f = read();
	w = read();
	h = read();

	int sumP = 0, sumQ = 0;
	for (int len = 1; len <= f + w; len++) {
		int small = len / 2;
		int big = len - small;
		sumP = add(sumP, calc(big, small, h + 1));
		sumQ = add(sumQ, calc(big, small, 1));
		sumP = add(sumP, calc(small, big, h + 1));
		sumQ = add(sumQ, calc(small, big, 1));
		//printf("len = %d\n", len);
		//printf("-- %d %d\n", sumP, sumQ);	
	}

	printf("%d\n", mul(sumP, mpow(sumQ, mod - 2)));

	return 0;     
}