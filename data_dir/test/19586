#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int) 1.01e9;
const ld EPS = 1e-9;

void precalc() {
}


const int maxn = (int) 2e3 + 10;
int n;
int ls[maxn][3];

bool read() {
  if (scanf("%d", &n) < 1) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < 3; ++j) {
      int x;
      scanf("%d", &x);
      ls[i][j] = x;
    }
  }
  return 1;
}

long long gcd(long long a, long long b) {
  for (; b; a %= b, swap(a, b)) ;
  return a;
}

struct Ratio {
  long long a, b;

  Ratio(long long x = 0) : a(x), b(1) {}
  Ratio(long long _a, long long _b) : a(_a), b(_b) {norm();}

  void norm() {
    long long d = abs(gcd(a, b));
    assert(d);
    a /= d, b /= d;
    if (b < 0 || (b == 0 && a < 0)) {
      a = -a, b = -b;
    }
  }

  inline bool operator < (const Ratio &r) const {
    if (a != r.a) {
      return a < r.a;
    }
    return b < r.b;
  }

  inline bool operator == (const Ratio &r) const {
    return a == r.a && b == r.b;
  }
};

Ratio b[maxn];

void solve() {
  long long res = 0;
  {
    int n0 = n;
    n = 0;
    int zero = 0;
    for (int i = 0; i < n0; ++i) {
      if (ls[i][2] == 0) {
        ++zero;
      } else {
        memcpy(ls[n++], ls[i], sizeof(ls[i]));
      }
    }
    //eprintf("zero = %d\n", zero);
    res += (long long) zero * (zero - 1) / 2 * (n0 - zero);
    res += (long long) zero * (zero - 1) * (zero - 2) / 6;
  }
  for (int i = 0; i < n; ++i) {
    int normi = ls[i][0] * ls[i][0] + ls[i][1] * ls[i][1];
    int cnt = 0;
    for (int j = i + 1; j < n; ++j) {
      int normj = ls[j][0] * ls[j][0] + ls[j][1] * ls[j][1];
      b[cnt] = Ratio((long long) ls[i][2] * normj * ls[i][0] - (long long) ls[j][2] * normi * ls[j][0],
                     (long long) ls[i][2] * normj * ls[i][1] - (long long) ls[j][2] * normi * ls[j][1]);
      ++cnt;
    }
    sort(b, b + cnt);
    for (int i = 0; i < cnt;) {
      int i0 = i; 
      while (i < cnt && b[i] == b[i0]) {
        ++i;
      }
      res += (i - i0) * (i - i0 - 1) / 2;
    }
  }
  printf(LLD "\n", res);
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("Time: %.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
