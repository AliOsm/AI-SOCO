#include "bits/stdc++.h"
using namespace std;
#ifndef LOCAL
#define endl '\n'
#endif

#define fr(i, a, b) for(int i = a; i <= b; i++)
#define rf(i, a, b) for(int i = a; i >= b; i--)
#define pf push_front
#define pb push_back
#define eb emplace_back
#define fi first
#define se second
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define sz(x) (int)x.size()
#define rsz resize()
#define lb lower_bound
#define ub upper_bound
#define br cout << endl

typedef long long ll;
typedef long double f80;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;

int pct(int x) { return __builtin_popcount(x); }
int pct(ll x) { return __builtin_popcountll(x); } 
int bit(int x) { return 31 - __builtin_clz(x); } // floor(log2(x))
int bit(ll x) { return 63 - __builtin_clzll(x); } // floor(log2(x))
int cdiv(int a, int b) { return a / b + !(a < 0 || a % b == 0); }
ll cdiv(ll a, ll b) { return a / b + !(a < 0 || a % b == 0); }
int nxt_C(int x) { int c = x & -x, r = x + c; return (((r ^ x) >> 2) / c) | r; }
ll nxt_C(ll x) { ll c = x & -x, r = x + c; return (((r ^ x) >> 2) / c) | r; }

vector<int> get_bits(int mask) {
	vector<int> bb;
	while(mask) { int b = bit(mask); bb.pb(b); mask ^= (1 << b); }
	reverse(all(bb));
	return bb;
}

int get_mask(vector<int> v) {
	int mask = 0;
	for(int x : v) { mask ^= (1 << x); }
	return mask;
}

template<typename T>
void uniq(vector<T> &v) { sort(all(v)); v.resize(unique(all(v)) - v.begin()); }
template<typename T>
void leftShift(vector<T> &v, ll k) { k %= sz(v); if(k < 0) k += sz(v); rotate(v.begin(), v.begin() + k, v.end()); }
template<typename T>
void rightShift(vector<T> &v, ll k) { leftShift(v, sz(v) - k); }

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll rand(ll l, ll r){
	uniform_int_distribution<ll> uid(l, r);
	return uid(rng);
}

void pr() {}
void sc() {}

template <typename Head, typename... Tail>
void pr(Head H, Tail... T) { cout << H << " "; pr(T...); }

template <typename Head, typename... Tail>
void sc(Head &H, Tail &... T) { cin >> H; sc(T...); }

#ifdef LOCAL
#define debug(...) cerr << "[L:" << __LINE__ << "][" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

#ifndef LOCAL
string to_string(__int128 x) {
	string s = "";
	bool neg = 0;
	if(x < 0) { s += "-"; neg = 1; x = -x; }
	if(!x) s += '0';
	while(x) {
		int rem = x % 10;
		s += to_string(rem);
		x /= 10;
	}
	reverse(s.begin() + neg, s.end());
	return s;
}
#endif

const int mod = 1e9 + 7; // 998244353;

int pwr(int a,int b) {
	int ans = 1;
	while(b) {
		if(b & 1) ans = (ans * 1LL * a) % mod;
		a = (a * 1LL * a) % mod;
		b >>= 1;
	}
	return ans;
}

/*
	Lookout for overflows!!
	Check array sizes!!
	Clear before test cases!!
	Use the correct modulo!!
	Check for corner cases!!
	Are you forgetting something?!
	Read problem statement carefully!!!
*/

struct Edge {
  int u, v;
  ll cap, flow;
  Edge() {}
  Edge(int u, int v, ll cap): u(u), v(v), cap(cap), flow(0) {}
};
struct Dinic {
  int N;
  vector<Edge> E;
  vector<vector<int>> g;
  vector<int> d, pt;
  Dinic(int N): N(N), E(0), g(N), d(N), pt(N) {}
  void AddEdge(int u, int v, ll cap){
    if (u != v) {
      E.emplace_back(u, v, cap);
      g[u].emplace_back(sz(E) - 1);
      E.emplace_back(v, u, 0);
      g[v].emplace_back(sz(E) - 1);
    }
  }
  bool BFS(int S, int T){
    queue<int> q({S});
    fill(d.begin(), d.end(), N + 1);
    d[S] = 0;
    while(!q.empty()){
      int u = q.front(); q.pop();
      if (u == T) break;
      for (int k: g[u]){
        Edge &e = E[k];
        if (e.flow < e.cap && d[e.v] > d[e.u] + 1){
          d[e.v] = d[e.u] + 1;
          q.emplace(e.v);
        }
      }
    }
    return d[T] != N + 1;
  }
  ll DFS(int u, int T, ll flow = -1){
    if (u == T || flow == 0) return flow;
    for (int &i = pt[u]; i < g[u].size(); ++i){
      Edge &e = E[g[u][i]];
      Edge &oe = E[g[u][i]^1];
      if (d[e.v] == d[e.u] + 1){
        ll amt = e.cap - e.flow;
        if (flow != -1 && amt > flow) amt = flow;
        if (ll pushed = DFS(e.v, T, amt)){
          e.flow += pushed;
          oe.flow -= pushed;
          return pushed;
        }
      }
    }
    return 0;
  }
  ll MaxFlow(int S, int T){
    ll total = 0;
    while (BFS(S, T)){
      fill(pt.begin(), pt.end(), 0);
      while (ll flow = DFS(S, T))
        total += flow;
    }
    return total;
  }
};

const int N = 105;
const int M = 1005;
int dist[N][N];
ll x[M], a[M], f[M];
ll y[M], d[M];

int ans[M];

void solve() {
	int n, m;
	sc(n, m);
	fr(i, 1, n) {
		fr(j, 1, n) {
			dist[i][j] = 1e9 + 5;
		}
		dist[i][i] = 0;
	}
	fr(i, 1, m) {
		int u, v;
		sc(u, v);
		dist[u][v] = 1;
		dist[v][u] = 1;
	}
	fr(k, 1, n) {
		fr(i, 1, n) {
			fr(j, 1, n) {
				dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
			}
		}
	}
	int s, b;
	ll k, h;
	sc(s, b, k, h);
	fr(i, 1, s) {
		sc(x[i], a[i], f[i]);
	}
	fr(i, 1, b) {
		sc(y[i], d[i]);
	}
	Dinic mf(s + b + 5);
	int S = s + b + 1, T = S + 1;
	int SS = T + 1;
	fr(i, 1, s) {
		mf.AddEdge(S, i, 1);
	}
	fr(i, 1, b) {
		mf.AddEdge(s + i, T, 1);
	}
	fr(i, 1, s) {
		fr(j, 1, b) {
			if(a[i] >= d[j] && dist[x[i]][y[j]] <= f[i]) {
				mf.AddEdge(i, j + s, 1);
			}
		}
	}
	int maxmatch = mf.MaxFlow(S, T);
	fr(i, 0, maxmatch) {
		ans[i] = i;
	}
	fr(i, maxmatch + 1, s) {
		ans[i] = maxmatch;
	}
	ll req = 1e18;
	fr(i, 0, s) {
		ll val = i * h + ans[s - i] * k;
		req = min(req, val);
	}
	cout << req;
}

signed main() {
	ios :: sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	int t = 1;
	// cin >> t;
	for(int tt = 1; tt <= t; tt++) {
		solve();
	}
	return 0;
}