#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <climits>
#include <unordered_map>
#include <iterator> 
#include <bitset>
#include <complex>
#include <random>
#include <chrono>
#include <functional>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ui unsigned int
#define mp make_pair
#define inf32 INT_MAX
#define inf64 LLONG_MAX
#define PI acos(-1)
#define cos45 cos(PI/4)
#define ld long double
#define inf 1000000
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pli pair<ll, int>
#define pil pair<int, ll>
#pragma GCC optimize ("O3")
//#define x first
//#define y second
const int mod = (1e9) + 7, mod2 = 998244353;
const double eps = 1e-10;
const int siz = 2e5 + 5, siz2 = 21, lg = 31, block = 317, block2 = 1000, mxv = 1e6;

int n, arr[siz], indof[siz], l[siz], r[siz];
stack<int> locmx;

int solve(int l, int r, int mxind) {
	int mx = arr[mxind], tot = 0;
	if (mxind-l < r-mxind) {
		for (int i = l; i < mxind; i++) {
			int otherind = indof[mx - arr[i]];
			if (otherind > mxind && otherind <= r) {
				tot++;
			}
		}
	}
	else {
		for (int i = mxind+1; i <= r; i++) {
			int otherind = indof[mx - arr[i]];
			if (otherind < mxind && otherind >= l) {
				tot++;
			}
		}
	}
	return tot;
}
void calclr() {
	for (int i = 0; i < n; i++) {
		while (!locmx.empty()) {
			int ind = locmx.top();
			if (arr[ind] < arr[i]) {
				r[ind] = i - 1;
				locmx.pop();
			}
			else {
				l[i] = ind + 1;
				break;
			}
		}
		if (locmx.empty()) {
			l[i] = 0;
		}
		locmx.push(i);
	}
	while (!locmx.empty()) {
		int ind = locmx.top();
		r[ind] = n - 1;
		locmx.pop();
	}
}
int main()
{
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%d", &arr[i]);
		indof[arr[i]] = i;
	}
	calclr();
	int tot = 0;
	for (int i = 0; i < n; i++) {
		tot += solve(l[i], r[i], i);
	}
	printf("%d\n", tot);
	return 0;
}