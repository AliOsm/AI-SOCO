# include <iostream>
# include <string>

using namespace std;

const int N = 2e5 + 100;
const int len = 3 * N;

int n, m;
int a[N];
long long tree[len];
long long pls[len];

void change( int td )
{
	if ( pls[td] == 0 )
		return;
	
	if ( ( td << 1 ) < len ){
		pls[( td << 1 )] += pls[td];
		pls[( td << 1 ) + 1] += pls[td];
	}
	tree[td] += pls[td];
	pls[td] = 0;
		
}

void build( int tl = 1, int tr = n, int td = 1 )
{
	if ( tl > tr )
		return;
	
	if ( tl == tr ){
		tree[td] = a[tl];
		return;
	}
	
	else{
		int tm = ( tl + tr ) >> 1;
		build( tl, tm, ( td << 1 ) );
		build( tm + 1, tr, ( td << 1 ) + 1 );
		tree[td] = min( tree[( td << 1 )], tree[( td << 1 ) + 1] );
		
		return;
	}
}

void update( int l, int r, int x, int tl = 1, int tr = n, int td = 1 )
{
	change( td );
	if ( tl > tr || r < tl || tr < l )
		return;
	
	if ( l <= tl && tr <= r ){
		pls[td] += x;
		change( td );
		return;
	}
	
	else{
		change( td );
		int tm = ( tl + tr ) >> 1;
		update( l, r, x, tl, tm, ( td << 1 ) );
		update( l, r, x, tm + 1, tr, ( td << 1 ) + 1 );
		tree[td] = min( tree[( td << 1 )], tree[( td << 1 ) + 1] );
		
		return;
	}
}

long long get( int l, int r, int tl = 1, int tr = n, int td = 1 )
{
	if ( tl > tr || r < tl || tr < l )
		return 1e18;
	
	change( td );
	if ( l <= tl && tr <= r )
		return tree[td];
	
	else{
		int tm = ( tl + tr ) >> 1;
		return min( get( l, r, tl, tm, ( td << 1 ) ), get( l, r, tm + 1, tr, ( td << 1 ) + 1 ) );
	}
}

int main()
{
	cin >> n;
	for ( int i = 1; i <= n; i ++ )
		cin >> a[i];
	
	build( );
	
	cin >> m;
	string s;
	getline( cin, s );
	
	while ( m-- ){
		getline( cin, s );
		s += ' ';
		int cnt = 0, lf = 0, rg = 0, v = 0;
		string dg;
		for ( auto c: s ){
			if ( c == ' ' ){
				if ( lf == 0 )
					lf = stoi( dg ) + 1;
				else if ( rg == 0 )
					rg = stoi( dg ) + 1;
				else
					v = stoi( dg );
				dg = "";
				cnt++;
			}
			else
				dg += c;
		}
		if ( cnt == 3 ){
			if ( lf > rg ){
				update( 1, rg, v );
				update( lf, n, v );
			}
			else{
				update( lf, rg, v );
			}
		}
		
		else{
			if ( lf > rg ){
				cout << min( get( 1, rg ), get( lf, n ) ) << endl;
			}
			else{
				cout << get( lf, rg ) << endl;
			}
		}
	}

}
/*

5
1 2 3 4 5
5
0 4
0 3 1
3 4 -1
2 4
0 4

*/
