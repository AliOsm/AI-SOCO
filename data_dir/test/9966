//
// d.cpp
//
// Siwakorn Srisakaokul - ping128
// Written on Friday,  6 December 2013.
//

#include <cstdio>
#include <iostream>
#include <sstream>
#include <cstdlib>
#include <string>
#include <vector>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <cmath>
#include <algorithm>
#include <map>
#include <ctype.h>
#include <string.h>

#include <assert.h>

using namespace std;

typedef long long LL;
typedef pair<int, int> PII;
typedef pair<PII, int> PII2;

#define MAXN 2005

int R, C;
char board[MAXN * 2][MAXN * 2];
int leftMost = MAXN;
int upMost = MAXN;
int rightMost = -1;
int bottomMost = -1;
int numW = 0;

bool good(int ii, int jj, int s){
    int tt = 0;
    for(int i = 0; i < s; i++ ){
        if(board[ii][jj + i] == 'w') tt++;
        if(ii + s - 1 != ii && board[ii + s - 1][jj + i] == 'w') tt++;
    }

    for(int i = 1; i < s - 1; i++ ){
        if(board[ii + i][jj] == 'w') tt++;
        if(jj + s - 1 != jj && board[ii + i][jj + s - 1] == 'w') tt++;
    }
    return tt == numW;
}

void print(int i, int j, int s){
    for(int k = 0; k < s; k++ ){
        if(board[i][j + k] == '.') board[i][j + k] = '+';
        if(board[i + s - 1][j + k] == '.') board[i + s - 1][j + k] = '+';
        if(board[i + k][j] == '.') board[i + k][j] = '+';
        if(board[i + k][j + s - 1] == '.') board[i + k][j + s - 1] = '+';
    }
    for(int k = 0; k < R; k++ ) printf("%s\n", board[k]);
}

int main(){
    scanf("%d %d", &R, &C);
    for(int i = 0; i < R; i++ ) scanf("%s", board[i]);
    for(int i = 0; i < R; i++ ){
        for(int j = 0; j < C; j++ ){
            if(board[i][j] == 'w'){
                numW++;
                leftMost = min(leftMost, j);
                upMost = min(upMost, i);
                rightMost = max(rightMost, j);
                bottomMost = max(bottomMost, i);
            }
        }
    }

    int s = max(rightMost - leftMost + 1, bottomMost - upMost + 1);

    if(s == rightMost - leftMost + 1 && s == bottomMost - upMost + 1){
        if(good(upMost, leftMost, s)){
            print(upMost, leftMost, s);
            return 0;
        }
    } else {
        if(rightMost - leftMost + 1 < s){
            for(int i = leftMost; i >= 0; i-- ){
                if(i + s - 1 < C && good(upMost, i, s)){
                    print(upMost, i, s);
                    return 0;
                }
            }
        }
        if(bottomMost - upMost + 1 < s){
            for(int i = upMost; i >= 0; i-- ){
                if(i + s - 1 < R && good(i, leftMost, s)){
                    print(i, leftMost, s);
                    return 0;
                }
            }
        }
    }

    printf("-1\n");

    return 0;
}
