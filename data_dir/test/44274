#include <iostream>
#include <iomanip>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <map>
#include <functional>
#include <algorithm>
#include <locale>

typedef signed char int8_t;
typedef unsigned char uint8_t;
typedef signed short int16_t;
typedef unsigned short uint16_t;
typedef signed long int32_t;
typedef unsigned long uint32_t;
typedef signed long long int64_t;
typedef unsigned long long uint64_t;

typedef long double double_t;

typedef std::string string8_t;

typedef std::vector<uint32_t> VectorUInt32;
typedef std::vector<double_t> VectorDouble;

template<typename T>
inline T Min(const T& a, const T& b) { return a < b ? a : b; }
template<typename T>
inline T Max(const T& a, const T& b) { return a < b ? b : a; }
template<typename T>
inline T Abs(const T& a) { return a > 0 ? a : (-a); }

template<typename T>
inline string8_t ToString(const T& val)
{
	std::ostringstream ostr;
	ostr << val;
	return ostr.str();
}

const double_t Eps = 1.0e-8;
inline bool IsEqual(const double_t n1, const double_t n2) { return Abs(n1 - n2) < Eps; }
inline bool IsLess(const double_t n1, const double_t n2) { return n1 + Eps < n2; }
inline bool IsGreater(const double_t n1, const double_t n2) { return n1 > n2 + Eps; }


bool Solve(std::istream& ist, std::ostream& ost)
{
	///////////////////////////////////////
	// attempt to input:
	///////////////////////////////////////
	uint32_t s;
	ist >> s;

	uint32_t a, b, c;
	ist >> a >> b >> c;

	if (!ist) { return false; }

	///////////////////////////////////////
	// solve:
	double_t x, y, z;
	if (a + b + c == 0)
	{
		x = s;
		y = 0;
		z = 0;
	}
	else
	{
		const double_t sum = a + b + c;
		const double_t mult = s / sum;
		x = mult * a;
		y = mult * b;
		z = mult * c;
	}

	ost << std::fixed;
	ost << std::setprecision(16) << x << ' ';
	ost << std::setprecision(16) << y << ' ';
	ost << std::setprecision(16) << z << std::endl;


	return true;
}

int main()
{
	std::istream& ist = std::cin;
	std::ostream& ost = std::cout;

#if !defined(ONLINE_JUDGE)
	while (Solve(ist, ost)) { }
#else //!defined(ONLINE_JUDGE)
	Solve(ist, ost);
#endif
}
