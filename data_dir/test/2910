/*
ID: hamed_51
PROG: ?
LANG: C++
*/

#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#if (_win32 || __win32__)
#define LLD "%i64d"
#else
#define LLD "%lld"
#endif

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << x << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-8
//#define endl "\n"

inline void read(register int *n) {
	register char c; *n = 0;
	do { c = getchar(); } while (c < '0' || c > '9');
	do { *n = c-'0'+*n*10; c = getchar(); } while (c >= '0' && c <= '9');
}

int main(int argv, char **argc) {
	int n, m, ind;
	cin >> n >> m >> ind;
	vector<string> V(n);
	FOR(i, 0, n) cin >> V[i];
	vector<pair<int, pii> > res;
	FOR(i, 0, n) FOR(j, 0, m) if (V[i][j] == '*') FOR(k, 1, max(n, m)) {
		if (i < k || i+k >= n || j < k || j+k >= m) break;
		if (V[i+k][j] != '*') continue;
		if (V[i-k][j] != '*') continue;
		if (V[i][j+k] != '*') continue;
		if (V[i][j-k] != '*') continue;
		res.pb(make_pair(k, pii(i, j)));
	}
	ind--;
	sort(all(res));
	if (ind < Size(res)) {
		int k = res[ind].X;
		cout << res[ind].Y.X+1 << " " << res[ind].Y.Y+1 << endl;
		cout << res[ind].Y.X+1-k << " " << res[ind].Y.Y+1 << endl;
		cout << res[ind].Y.X+1+k << " " << res[ind].Y.Y+1 << endl;
		cout << res[ind].Y.X+1 << " " << res[ind].Y.Y+1-k << endl;
		cout << res[ind].Y.X+1 << " " << res[ind].Y.Y+1+k << endl;
	} else cout << -1 << endl;
	return 0;
}

