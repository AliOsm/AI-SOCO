//I_F_A
#include "bits/stdc++.h"
using namespace std;

long long gcd(long long a,long long b){
	
	return b == 0 ? a : gcd(b,a%b);
}

void createZ(string s,long long len,long long Z[]){
	
	long long L,R,k;
	
	L = R = 0;
	
	for(long long i=1;i<len;i++){
		
		if(i > R){
			
			L = R = i;
			
			while(R < len && s[R] == s[R - L]){
				
				R++;
			}
			
			Z[i] = R - L;
			
			R--;
		}
		else{
			
			k = i -  L;
			if(Z[k] < R - i + 1){
				
				Z[i] = Z[k];
			}
			else{
				
				L = i;
				
				while(R < len && s[R] == s[R - L]){
					
					R++;
				}
				
				Z[i] = R - L;
				
				R--;
			}
		}
	}
}

bool func(string s,long long len,long long Z[],long long counter){
	
	for(long long i=counter;i<len;i=i+counter){
		
		if(Z[i] < counter){
			
			return false;
		}
	}	
	return true;
}

int main(){
	
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);;
	
	string a,b;
	cin >> a >> b;
	
	long long n = a.length() , m = b.length();
	
	long long Z1[n+1] , Z2[m+1];
	createZ(a,n,Z1);
	createZ(b,m,Z2);
	
	long long d = gcd(n,m);

	set<long long> myset;
	
	long long index = 0;
	while(index < n && index < m && a[index] == b[index]){
		
		index++;
	}
	
	for(long long i=1;i<=sqrt(d);i++){
		
		if(d%i == 0){
			
			if(d <= index && func(a,n,Z1,i) && func(b,m,Z2,i)){
				
				myset.insert(i);
			}
			if(d <= index && func(a,n,Z1,d/i) && func(b,m,Z2,d/i)){
				
				myset.insert(d/i);
			}
		}
	}
	
	cout << myset.size() << endl;
}