//testing








#include <algorithm>
#include <iostream>
#include <iterator>
#include <numeric>
#include <sstream>
#include <fstream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <string>
#include <cstdio>
#include <vector>
#include <cmath>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <map>
#include <set>
using namespace std;
#define LL long long
#define sd(x) scanf("%d",&x)
#define sc(x) scanf("%c",&x)
#define sl(x) scanf("%lld",&x)
#define pdn(x) printf("%d\n",x);
#define pln(x) printf("%lld\n",x);
#define pds(x) printf("%d ",x);
#define pls(x) printf("%lld ",x);
#define pst(x) printf("%s",x);
#define ss(x) scanf("%s",x)
#define all(x) x.begin(),x.end()
#define compress(x) {sort(all(x));(x).resize(unique(all(x))-(x).begin());}
template<class T> inline void umax(T &a,T b){if(a<b) a = b ;}
typedef pair<int, int> ii;
typedef pair<LL, LL> PII;
typedef  vector <int> VI;
typedef vector <LL> VL;
typedef vector <ii> VII;
#define bitcount  __builtin_popcount
#define sz size()
#define pb push_back
#define F first
#define S second
#define rep(i,a,b) for(int  i=(a);i<(b);i++)
#define repl(i,a,b) for(LL i=(a);i<(b);i++)
#define repv(i,b,a) for(int i=(b);i>=(a);i--)
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define LLD long double
 
const int INF  = 1e9 + 7;
const double eps = 1e-8;
const int LN = 20;
//const LL INF = 0x0123456789ABCDEFLL;

typedef double T;
const T EPS = 1e-12;
struct PT { 
  T x, y; 
  PT() {} 
  PT(T x, T y) : x(x), y(y) {}
  bool operator<(const PT &rhs) const { return make_pair(y,x) < make_pair(rhs.y,rhs.x); }
  bool operator==(const PT &rhs) const { return make_pair(y,x) == make_pair(rhs.y,rhs.x); }
};

T cross(PT p, PT q) { return p.x*q.y-p.y*q.x; }
T area2(PT a, PT b, PT c) { return cross(a,b) + cross(b,c) + cross(c,a); }



void ConvexHull(vector<PT> &pts) {
  sort(pts.begin(), pts.end());
  pts.erase(unique(pts.begin(), pts.end()), pts.end());
  vector<PT> up, dn;
  for (int i = 0; i < pts.size(); i++) {
    while (up.size() > 1 && area2(up[up.size()-2], up.back(), pts[i]) >= 0) up.pop_back();
    while (dn.size() > 1 && area2(dn[dn.size()-2], dn.back(), pts[i]) <= 0) dn.pop_back();
    up.push_back(pts[i]);
    dn.push_back(pts[i]);
  }
  pts = dn;
  for (int i = (int) up.size() - 2; i >= 1; i--) pts.push_back(up[i]);
  
}
map <pair <int , int> , vector <int> > a;
vector <PT> b;
set <int> c;
inline void  solve(void){
        int n , x ,y;
        cin >> n;   
        rep(i,0,n) {
            cin >> x >> y;
            b.pb(PT(1.0/(double)x  , 1.0/(double)y));
            a[mp(x , y)].pb(i);
        }
        ConvexHull(b);
        int f = 0 , p = 0;

        rep(i,1,b.sz) {
            if(b[i].x < b[p].x || (b[i].x == b[p].x && b[i].y < b[p].y)) {
                p = i;
            }  
        }
        x = (int) (1.0/b[0].x + 0.5) ; y  = (int) (1.0/b[0].y + 0.5);
        rep(j,0,a[mp(x,y)].sz) {
            c.insert(a[mp(x,y)][j]);
        }
        if(p > 0) {
            rep(i,p,b.sz) {
                 x = (int) (1/b[i].x + 0.5);  y  = (int) (1/b[i].y + 0.5);
                 rep(j,0,a[mp(x,y)].sz) {
                    c.insert(a[mp(x,y)][j]);
                }
            }
        }
        for(set <int> :: iterator  it = c.begin() ; it!=c.end() ;it++) cout << *it + 1 << " ";
        return;
}

void init() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
}

int main(int argc, const char * argv[]){
    //freopen("beloved.in","r",stdin);
    //freopen("beloved.out","w",stdout);
    init();
    solve();
    return 0;
}
// NEVER QUIT  