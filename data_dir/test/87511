/////////////////////////   _LeMur_
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <ctime>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <list>
#include <map>
#include <set>

using namespace std;

const int N = 100005;
const int inf = 1000 * 1000 * 1000;
const int mod = 998244353;

int n , m , k;
int x[N];

bool used[N] , color[N];
int a[N] , b[N] , c[N] , cost[N];

vector < pair<int,int> > G;

int parent[N] , sz[N] , gumar[N];

int findher(int a){
    if(a == parent[a])return a;
    return parent[a] = findher(parent[a]);
}

void tmerge(int a,int b){
    a = findher(a);
    b = findher(b);
    if(sz[b] > sz[a]) swap(a , b);
    parent[b] = a;
    sz[a] += sz[b];
    gumar[a] += gumar[b];
}

int main(){
    scanf("%d%d%d",&n,&m,&k);
    for(int i=1;i<=k;i++){
        int x;
        scanf("%d",&x);
        cost[x] = 1;
    }
    for(int i=1;i<=m;i++){
        scanf("%d%d%d",&a[i],&b[i],&c[i]);
        G.push_back(make_pair(c[i] , i));
    }
    sort(G.begin() , G.end());
    for(int i=1;i<=n;i++){
        parent[i] = i;
        sz[i] = 1;
        gumar[i] = cost[i];
    }
    int answ = 0;
    int A = 0;
    for(int i=0;i<(int)G.size();i++){
        int id = G[i].second;
        int aa = a[id];
        int bb = b[id];
        if(findher(aa) != findher(bb)){
            answ = G[i].first;
            tmerge(aa , bb);
            int P = findher(aa);
            if(gumar[P] == k)break;
        }
    }
    while(k--){
        printf("%d ",answ);
    }
    cout<<endl;
    return 0;
}
