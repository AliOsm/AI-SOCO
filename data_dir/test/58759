#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

const int N = 1e5 + 5;
int a[N];
int b[N];
int lazy[4 * N];

void propagate(int node, int l, int r)
{
  if(lazy[node] == 0)
    return;
  if(l == r)
    b[l] = a[lazy[node]];
  if(l != r)
  {
      int mid = (l + r) >> 1;
      lazy[(node << 1)] = lazy[node];
      lazy[(node << 1) + 1] = lazy[node] + (mid - l + 1);
  }
  lazy[node] = 0;
}
void update(int node, int l, int r, int st, int en, int segst)
{
  if(st > r || en < l)
    return;
  propagate(node, l, r);
  if(st <= l && r <= en)
  {
    lazy[node] = segst + (l - st);
    return;
  }
  int mid = (l + r) >> 1;
  update((node << 1), l, mid, st, en, segst);
  update((node << 1) + 1, mid + 1, r, st, en, segst);
}

int query(int node, int l, int r, int idx)
{
  propagate(node, l, r);
  if(l == r)
    return b[l];
  int mid = (l + r) >> 1;
  if(idx <= mid)
    return query((node << 1), l, mid, idx);
  else
    return query((node << 1) + 1, mid + 1, r, idx);
}

int main()
{
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  int n, q;
  cin >> n >> q;
  for(int i = 1; i <= n; i++)
    cin >> a[i];
  for(int i = 1; i <= n; i++)
    cin >> b[i];
  while (q--)
  {
    int t;
    cin >> t;
    if(t == 1)
    {
      int x, y, len;
      cin >> x >> y >> len;
      update(1, 1, n, y, y + len - 1, x);
    }
    else
    {
      int idx;
      cin >> idx;
      cout << query(1, 1, n, idx) << '\n';
    }
  }
  return 0;
}
