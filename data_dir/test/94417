#include<bits/stdc++.h>
#define node pair<int , int>
using namespace std;

vector<int > arr ;

int getDigit(int num , int x)
{
    while (x-->0)
        num /= 10 ;
    return num % 10 ;
}
void add(pair<int , int >& p , int x)
{
    if(p.first > x)
    {
        p.second = p.first ;
        p.first = x ;
    }
    else if(p.second > x)
        p.second = x ;
}
node combine(node &l , node &r)
{
    node ans = {1 << 30 , 1 << 30};
    add(ans , l.first) ;
    add(ans , l.second) ;
    add(ans , r.first) ;
    add(ans , r.second) ;
    return ans ;
}
class segmentTree
{
public:
    int N , d;
    node *sTree ;
    segmentTree(int n , int c)
    {
        N = n ;
        d = c ;
        sTree = new node [N << 1] ;
        build(1 , 1 , N) ;
    }
    void build(int nod , int b , int e)
    {
        if(b == e)
        {
            sTree[nod] = {1 << 30 , 1 << 30};
            if(getDigit(arr[b] , d) > 0)
                add( sTree[nod], arr[b]) ;
        }
        else
        {
            int mid = b + e >> 1 ;
            build(nod << 1 , b , mid) ;
            build(nod << 1 | 1 , mid + 1 , e) ;
            sTree[nod] = combine(sTree[nod << 1] , sTree[nod << 1 | 1]) ;
        }
    }
    void update(int index , int val)
    {
        index += N - 1 ;
        sTree[index] = {1 << 30 , 1 << 30};
        if(getDigit(val , d) > 0)
            add(sTree[index] , val) ;
        while(index > 1)
        {
            index >>= 1 ;
            sTree[index] = combine(sTree[index << 1] , sTree[index << 1 | 1]) ;
        }
    }


    node query(int i, int j)
    {
        return query(1,1,N,i,j);
    }
    node query(int nod, int b, int e, int i, int j)
    {
        if(i > e || b > j)
            return {1 << 30 , 1 << 30} ;

        if(i <= b && e <= j)
            return sTree[nod];
        int mid = b + e >> 1;
        node l = query(nod<<1,b,mid,i,j) ;
        node r = query(nod<<1 | 1,mid + 1,e,i,j) ;
        return combine(l,r);
    }
};

int main()
{
    ios_base :: sync_with_stdio(false) ;
    cin.tie(nullptr) ;
    int n , m , N ;
    cin >> n >> m ;
    N = 1 ;
    while (N < n) N <<= 1 ;
    arr = vector<int >(N + 1) ;
    for(int i = 1 ; i <= n ; i++)
        cin >> arr[i] ;
    vector<segmentTree> seg;
    for(int i = 0 ; i < 9 ; i ++)
        seg.push_back( {N , i});

    while (m--)
    {
        int t ;
        cin >> t ;
        if(t == 1)
        {
            int idx , x ;
            cin >> idx >> x ;
            for(int i = 0 ; i < 9 ; i ++)
                seg[i].update(idx , x) ;
        }
        else
        {
            int ans = -1 ;
            int l , r ;
            cin >> l >> r ;
            for(int i = 0 ; i < 9 ; i ++)
            {
                node cur = seg[i].query(l , r) ;
                if(cur.first < 1 << 30 && cur.second < 1 << 30)
                {
                    if(ans == -1)
                        ans = cur.first + cur.second ;
                    else
                        ans = min(ans , cur.first + cur.second) ;
                }
            }
            cout << ans << '\n' ;

        }
    }
    return 0 ;
}