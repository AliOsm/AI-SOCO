#pragma GCC optimize("O3")

# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

# include <stdio.h>
# include <bits/stdc++.h>


#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace __gnu_pbds;
using namespace std;
 
typedef
tree<pair<int,int>,null_type,less<pair<int,int>>,rb_tree_tag, tree_order_statistics_node_update> ordered_set;

inline bool isvowel (char c) {
	c = tolower(c);
    if (c == 'a' || c == 'e' || c == 'i' || c == 'y' || c == 'o' || c == 'u') return 1;
    return 0;
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 6e5 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, m, k;
ll d[N], w[N];
vector < int > g[N];
vector < int > q[N];
map < ll, ll > s[N];

inline void add (map < ll, ll > &s, ll d, ll w) {
	s[d] += w;
	auto it = s.upper_bound(d);
	ll cd = 0, cw = 0;
	for (; it != s.end() && cw <= w; it = s.erase(it)) {
		cw += it -> S;
		cd = it -> F;
	}
	if (cw > w) s[cd] = cw - w;
}

int main () {
	scanf("%d%d%d", &n, &m, &k);
	for (int i = 2, p; i <= n; i ++) {
		scanf("%d", &p);
		g[p].pb(i);
	}
	For (i, 1, m) {	
		int v;
		scanf("%d%lld%lld", &v, d + i, w + i);
		q[v].pb(i); 
	}
	FOr(v, n, 1) {
		int mx = v;
		for (int j : g[v]) if (s[mx].size() < s[j].size()) mx = j;
		s[v].swap(s[mx]);
		for (int j : g[v]) for (auto x : s[j]) s[v][x.F] += x.S;
		for (int j : q[v]) {
			add(s[v], d[j], w[j]);
		} 
	}
	ll ans = 0;
	for (auto x : s[1]) ans += x.S;
	printf("%lld\n", ans);
	return Accepted;
}

// B...a