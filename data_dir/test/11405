#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <math.h>
#include <ctype.h>
#include <assert.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <list>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <numeric>
using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;

#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(),(x).end()
#define clr(t,v) memset((t),(v),sizeof(t))
#define endl ('\n')

const int inf=1999999999;
const double pi=acos(-1.0);
const double eps=1e-10;
char gc(){char c;while(isspace(c=getchar()));return c;}
int gs(char* s){gets(s);int l=strlen(s);while(l && isspace(s[l-1]))s[--l]=0;return l;}

int x[100000];
int a[100100];
pair<ii,int> d[100000];
void add(int i,int v)
{
    i++;
    while(i<100050)
    {
        a[i]=max(a[i],v);
        i+=(i&-i);
    }
}
int get(int i)
{
    i++;
    int v=-inf;
    while(i)
    {
        v=max(v,a[i]);
        i-=(i&-i);
    }
    return v;
}
ii tr[100000];
int main()
{
//  freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
    ios::sync_with_stdio(false);
    for(int i=0;i<100100;i++)
        a[i]=-inf;
    int n;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        int a,b;
        cin>>a>>b;
        x[i]=a;
        d[i]=mp(mp(a,b),i);
    }
    sort(x,x+n);
    sort(d,d+n);
    for(int i=n-1;i>=0;i--)
    {
        int r=d[i].first.first+d[i].first.second;
        int p=lower_bound(x,x+n,r)-x-1;
        int nr=get(p);
        nr=max(nr,r);
        add(i,nr);
        tr[d[i].second]=mp(d[i].first.first,nr);
    }
    for(int i=0;i<n;i++)
        cout<<lower_bound(x,x+n,tr[i].second)-lower_bound(x,x+n,tr[i].first)<<' ';
    return 0;
}
