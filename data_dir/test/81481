#include<bits/stdc++.h>
using namespace std;
#define PII pair<int,int>
#define f first
#define s second
#define VI vector<int>
#define LL long long
#define MP make_pair
#define LD long double
#define PB push_back
#define PLL pair <LL, LL>
#define ALL(V) V.begin(),V.end()
#define abs(x) max((x),-(x))
#define PDD pair<LD,LD> 
#define VPII vector< PII > 
#define siz(V) ((int)V.size())
#define FOR(x, b, e)  for(int x=b;x<=(e);x++)
#define FORD(x, b, e) for(int x=b;x>=(e);x--)
#define REP(x, n)     for(int x=0;x<(n);x++)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#ifdef DEB
#define debug cerr << "[LINE:" << __LINE__ << "] " << boolalpha
#else
#define debug if(0) cout
#endif
#define fs(r) r.f, r.s
template <typename T, typename C>
ostream & operator<<(ostream &os, pair<T, C> x) {
	return os << "<" << x.f << ", " << x.s << ">";
}
template <typename T>
auto operator<<(ostream&os, T x) -> typename enable_if<is_same<decltype(x.begin()), decltype(x.end())>::value && !is_same<T, string>::value, ostream &>::type {
	os << "{";
	int cou = 0;
	for (auto c : x) {
		if (cou++)
			os << ", ";
		os << c;
	}
	return os << "}";
}
#define cr << "][" << 
#define rr << "] = " << 
#define cc << "[" <<
#define ao << ' ' 
#define name(a) #a << " = " << (a) ao
#define arr(a, i) #a cc #i rr #a cc i rr a[i] ao
#define arr2(a, i, j) #a cc #i cr #j rr #a cc i cr j rr a[i][j] ao
#define arr3(a, i, j, k) #a cc #i cr #j cr #k rr #a cc i cr j cr k rr a[i][j][k] ao
#define arr4(a, i, j, k, q) #a cc #i cr #j cr #k cr #q rr #a cc i cr j cr k cr q rr a[i][j][k][q] ao
template <typename T>
string strmask(T r) {
	string ans;
	REP(i, 8 * (int)sizeof(T)) {
		ans += '0' + !!(((T)1 << i) & r);
		if (i % 5 == 4)
			ans += '.';
	}
	return ans;
}
#if 0 
ostream & operator<< (ostream & os, __int128_t x) {
	if (x < 0) {
		os << '-';
		x = -x;
	}
	if (x >= 10)
		os << x / 10;
	return os << (int)x % 10;
}
ostream & operator<< (ostream & os, __uint128_t x) {
	if (x >= 10)
		os << x / 10;
	return os << (int)x % 10;
}
#endif
#define nmask(a) #a << " = " << strmask(a) ao
int split(const VI & points, int first, int last) {
	if (points.empty())
		return 0;
	int ans = min(last - points[0], points.back() - first);
	REP(i, siz(points) - 1) {
		debug << arr(points, i) << arr(points, i + 1) << name(first) << name(last) << name(points[i] - first + last - points[i + 1]) << endl;
		mini(ans, points[i] - first + last - points[i + 1]);
	}
	return ans;
}
int main() {
	int n;
	scanf("%d", &n);
	int last_green = -1;
	VI red, blue;
	int ans = 0;
	REP(i, n) {
		int x;
		char c;
		scanf("%d %c", &x, &c);
		if (c == 'G') {
			debug << name(x) << name(last_green) << name(red) << name(blue) << endl;
			if (last_green == -1) {
				if (!blue.empty())
					ans += x - blue[0];
				if (!red.empty())
					ans += x - red[0];
			}
			else {
				if (red.empty() && blue.empty())
					ans += x - last_green;
				else {
					int len = x - last_green;
					int curr = 2 * len;
					int rdist = split(red, last_green, x);
					int bdist = split(blue, last_green, x);
					debug << name(len) << name(bdist) << name(rdist) << endl;
					mini(curr, len + rdist + bdist);
					ans += curr;
				}
			}
			last_green = x;
			red.clear();
			blue.clear();
		}
		else if (c == 'R')
			red.PB(x);
		else
			blue.PB(x);
	}

	if (last_green == -1) {
		if (!red.empty())
			ans += red.back() - red[0];
		if (!blue.empty())
			ans += blue.back() - blue[0];
	}
	else {
		if (!red.empty())
			ans += red.back() - last_green;
		if (!blue.empty())
			ans += blue.back() - last_green;
	}
	printf("%d\n", ans);
}
