#include <bits/stdc++.h>
#define ll long long
#define pll pair <ll,ll>
#define plll pair <ll,pll>

using namespace std;

const ll N = 220;
const ll K = 62;
const ll Inf = 1e9;

ll n;
ll a[100100];
ll Cnt[K];
vector <ll> Adj[N];
bool Vis[N][N];
queue <plll> q;

ll BFS(ll S)
{
    while(!q.empty())   q.pop();

    memset( Vis, false, sizeof(Vis));

    Vis[S][S] = true;
    q.push(plll(0,pll(S,S)));

    while(!q.empty())
    {
        plll p = q.front(); q.pop();

        ll Dist = p.first;
        ll Node = p.second.first;
        ll Last = p.second.second;

        if(Node == S && Last != S)  return Dist;

        for(ll Ch : Adj[Node])
            if(Ch != Last)
                if(!Vis[Ch][Node])
                {
                    Vis[Ch][Node] = true;
                    q.push(plll(Dist+1,pll(Ch,Node)));
                }
    }

    return Inf;
}

int main()
{
    cin >> n;

    for(ll i = 0; i < n; i++)
    {
        scanf("%I64d", a + i);

        for(ll j = 0; j < K; j++)
            if(a[i] & (1LL << j))
                Cnt[j]++;
    }

    for(ll j = 0; j < K; j++)
        if(Cnt[j] >= 3)
            return 0 * puts("3");

    sort( a, a + n, greater <ll> ());

    while(n > 0 && !a[n - 1])   n--;

    for(ll i = 0; i < n; i++)
        for(ll j = i + 1; j < n; j++)
            if(a[i] & a[j])
            {
                Adj[i].push_back(j);
                Adj[j].push_back(i);
            }

    ll Ans = Inf;

    for(ll i = 0; i < n; i++)   Ans = min( Ans, BFS(i));

    if(Ans == Inf)  Ans = -1;

    cout << Ans << endl;
}
