#include <bits/stdc++.h>

using namespace std;

#define int long long

const int MOD = 1e6 + 3;

typedef long long ll;

int add(int a, int b) {
    ll res = (ll)a + b;
    return res % MOD;
}

int sub(int a, int b) {
    ll res = (ll)a - b;
    res %= MOD;
    res += MOD;
    return res % MOD;
}

int mul(int a, int b) {
    ll res = (ll)a * b;
    return res % MOD;
}

int binpow(int a, int b) {
    if (b == 0) {
        return 1;
    } else if (b & 1) {
        int tmp = binpow(a, b - 1);
        return mul(tmp, a);
    } else {
        int tmp = binpow(a, b / 2);
        return mul(tmp, tmp);
    }
}

int inv(int x) {
    return binpow(x, MOD - 2);
}

int divv(int a, int b) {
    return mul(a, inv(b));
}

int gauss (vector < vector<int> > a, vector<int> & ans) {
    int n = (int) a.size();
    int m = (int) a[0].size() - 1;
    
    vector<int> where (m, -1);
    for (int col=0, row=0; col<m && row<n; ++col) {
        int sel = row;
        for (int i=row; i<n; ++i)
            if (a[i][col] > 0)
                sel = i;
        for (int i=col; i<=m; ++i)
            swap (a[sel][i], a[row][i]);
        where[col] = row;
        for (int i=0; i<n; ++i)
            if (i != row) {
                int c = divv(a[i][col], a[row][col]);
                for (int j=col; j<=m; ++j)
                    a[i][j] = sub(a[i][j], mul(a[row][j], c));
            }
	        ++row;
    }
    
    ans.assign (m, 0);
    for (int i=0; i<m; ++i)
        if (where[i] != -1)
            ans[i] = divv(a[where[i]][m], a[where[i]][i]);
    for (int i=0; i<n; ++i) {
        int sum = 0;
        for (int j=0; j<m; ++j)
            sum = add(sum, mul(ans[j], a[i][j]));
        if (abs(sum - a[i][m]) > 0) {
            cerr << "ws" << endl;
            assert(false);
            exit(0);
        }
    }
    
    for (int i=0; i<m; ++i) {
        if (where[i] == -1) {
            cerr << "many sol";
            assert(false);
            exit(0);
        }
    }
    return 1;
}

int query(int x) {
    cout << "? " << x << endl;
    int res;
    cin >> res;
    if (res == -1) {
        assert(false);
        exit(0);
    }
    return res;
}

const int MAXK = 10;

int solve() {
    vector<vector<int>> b(MAXK + 1, vector<int> (MAXK + 2));
    for (int i = 0; i <= MAXK; i++) {
        int q = query(i);
        b[i][MAXK + 1] = q;
        for (int j = 0; j <= MAXK; j++) {
            b[i][j] = binpow(i, j);
        }
    }
    vector<int> a;
    gauss(b, a);
    /*cerr << "exp a" << endl;
    for (auto t : a) {
        cerr << t << ' ';
    }*/
    for (int i = 0; i < MOD; i++) {
        int cur = 0;
        for (int j = 0; j < (int)a.size(); j++) {
            cur = add(cur, mul(a[j], binpow(i, j)));
        }
        if (cur == 0) {
            return i;
        }
    }
    return -1;
}

signed main() {
    
    int res = solve();
    cout << "! " << res << endl;
}
