#include <iostream>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <vector>
#include <cmath>
#include <algorithm>
#include <map>
#include <queue>
#include <set>
#include <climits>
//#include <priority_queue>
using namespace std;
#define ll long long
#define x first
#define y second
#define pii pair<int, int>
#define pdd pair<double, double>
#define L(s) (int)(s).size()
#define VI vector<int>
#define all(s) (s).begin(), (s).end()
#define pb push_back
#define mp make_pair
vector<pair<char, int> > s[2];
char st[1111111];
int main() {
  scanf("%s", st);
  int n = (int)strlen(st);
  s[0].pb(mp(st[0], 1));
  for(int i = 1; i < n; ++i) {
    if (st[i] != s[0].back().x) {
      s[0].pb(mp(st[i], 1));
    } else {
      s[0].back().y++;
    }
  }

  int cur = 0, nxt = 1, ans = 0;
  while(L(s[cur]) > 1) {
    int min_act = min(s[cur][0].y, s[cur].back().y);
    for(int i = 1; i < L(s[cur]) - 1; ++i) {
      min_act = min(min_act, s[cur][i].y / 2 + s[cur][i].y % 2);
    }
//  for(int i = 0; i < L(s[cur]); ++i) cerr << s[cur][i].x << " " << s[cur][i].y << " ";
//  cerr << endl;
    s[nxt].clear();
    if (s[cur][0].y > min_act) {
      s[nxt].pb(mp(s[cur][0].x, s[cur][0].y - min_act));
    }
    for(int i = 1; i < L(s[cur]) - 1; ++i) {
      if (s[cur][i].y > 2 * min_act) {
        if (L(s[nxt]) && s[nxt].back().x == s[cur][i].x) {
          s[nxt].back().y += s[cur][i].y - 2 * min_act;
        } else {
          s[nxt].pb(mp(s[cur][i].x, s[cur][i].y - 2 * min_act));
        }
      }
    }
    if (s[cur].back().y > min_act) {
        if (L(s[nxt]) && s[nxt].back().x == s[cur].back().x) {
          s[nxt].back().y += s[cur].back().y - min_act;
        } else {
          s[nxt].pb(mp(s[cur].back().x, s[cur].back().y - min_act));
        }
    }
    swap(cur, nxt);
    ans += min_act;
  }
  cout << ans << endl;
}
