//#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
//#pragma comment(linker, "/STACK:16777216")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;

template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifdef _offline
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // _offline
}

struct edge {
    int to, cap, flow, cost;

    edge() : to(-1), cap(0), flow(0), cost(0) {};
    edge(int _to, int _cap, int _flow, int _cost) : to(_to), cap(_cap), flow(_flow), cost(_cost) {};
};

const int INF = 1e9 + 7;
const int MAXN = 200;
int mn[MAXN], mx[MAXN];
int q[MAXN];
bool used[MAXN];
int p[MAXN], d[MAXN], par[MAXN];
vector<int> g[MAXN];
vector<edge> ed;
int n, s, t;

void add_edge(int u, int v, int cap, int flow, int cost) {
    g[u].push_back(ed.size());
    ed.push_back(edge(v, cap, flow, cost));
    g[v].push_back(ed.size());
    ed.push_back(edge(u, 0, -flow, -cost));
}

void Ford_Bellman() {
    fill(d, d + MAXN, INF);
    fill(used, used + MAXN, false);
    d[s] = 0;
    par[s] = -1;
    int qh = 0, qt = 1;
    q[0] = s;
    while (qh != qt) {
        int v = q[qh++];
        if (qh == MAXN) {
            qh = 0;
        }
        used[v] = false;
        for (int id : g[v]) {
            if (ed[id].cap - ed[id].flow > 0 && d[ed[id].to] > d[v] + ed[id].cost) {
                d[ed[id].to] = d[v] + ed[id].cost;
                par[ed[id].to] = id;
                if (!used[ed[id].to]) {
                    q[qt++] = ed[id].to;
                    if (qt == MAXN) {
                        qt = 0;
                    }
                    used[ed[id].to] = true;
                }
            }
        }
    }
    for (int i = 0; i < MAXN; ++i) {
        p[i] = d[i];
    }
}

bool Dijkstra() {
    fill(d, d + MAXN, INF);
    set<pii> setik;
    d[s] = 0;
    par[s] = -1;
    for (int i = 0; i < MAXN; ++i) {
        setik.insert({d[i], i});
    }
    while (setik.size()) {
        int v = setik.begin()->second;
        setik.erase(setik.begin());
        for (int id : g[v]) {
            int cost = p[v] + ed[id].cost - p[ed[id].to];
            if (ed[id].cap - ed[id].flow > 0 && d[ed[id].to] > d[v] + cost) {
                setik.erase({d[ed[id].to], ed[id].to});
                d[ed[id].to] = d[v] + cost;
                par[ed[id].to] = id;
                setik.insert({d[ed[id].to], ed[id].to});
            }
        }
    }
    for (int i = 0; i < MAXN; ++i) {
        p[i] = d[i];
    }
    return (d[t] != INF);
}

int min_cost_max_flow() {
    int flow = 0;
    Ford_Bellman();
    while (Dijkstra()) {
        int pushed = INF;
        int cur = t;
        while (cur != s) {
            pushed = min(pushed, ed[par[cur]].cap - ed[par[cur]].flow);
            cur = ed[par[cur] ^ 1].to;
        }
        flow += pushed;
        cur = t;
        while (cur != s) {
            ed[par[cur]].flow += pushed;
            ed[par[cur] ^ 1].flow -= pushed;
            cur = ed[par[cur] ^ 1].to;
        }
    }
    return (flow == n ? 1 : -1);
}

signed main() {
    FAST_IO();
    int q;
    cin >> n >> q;
    for (int i = 1; i <= n; ++i) {
        mn[i] = 1;
        mx[i] = n;
    }
    while (q--) {
        int t, l, r, v;
        cin >> t >> l >> r >> v;
        for (int i = l; i <= r; ++i) {
            if (t == 1) {
                mn[i] = max(mn[i], v);
            }
            else {
                mx[i] = min(mx[i], v);
            }
        }
    }
    s = n + 1;
    t = n + 2;
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
            add_edge(s, i + 100, 1, 0, j * 2 - 1);
        }
    }
    for (int i = 1; i <= n; ++i) {
        for (int j = mn[i]; j <= mx[i]; ++j) {
            add_edge(j + 100, i, 1, 0, 0);
        }
        add_edge(i, t, 1, 0, 0);
    }
    if (min_cost_max_flow() == -1) {
        cout << -1;
        return 0;
    }
    int cost = 0;
    for (int id : g[s]) {
        if (ed[id].flow == 1) {
            cost += ed[id].cost;
        }
    }
    cout << cost;
}
