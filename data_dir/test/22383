#include <bits/stdc++.h>

using namespace std;

#ifdef DGC
#include "debug.h"
#else
#define debug(...) 9715
#endif
typedef long long ll;
typedef long double ld;
typedef complex<ld> point;
#define F first
#define S second

struct que
{
	int pos, id;
};

#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>     // Including tree_order_statistics_node_update

using namespace __gnu_pbds;

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

int main()
{
	#ifdef DGC
		freopen("a.in", "r", stdin);
		//freopen("b.out", "w", stdout);
	#endif

	ios_base::sync_with_stdio(0), cin.tie(0);

	int n;
	cin >> n;
	vector<int> a(n);
	map<int, vector<int>> mp;
	for (int i = 0, x; i < n; ++i)
	{
		cin >> x;
		mp[x].push_back(i);
		a[i] = x;
	}

	int m;
	cin >> m;
	vector<vector<que>> v(n+1);
	for (int i = 0, k, p; i < m; ++i)
	{
		cin >> k >> p;
		v[k].push_back({ --p, i });
	}

	for (auto &i : mp)
		reverse(i.S.begin(), i.S.end());

	vector<int> ans(m);
	ordered_set<int> s;

	auto it = prev(mp.end());
	for (int k = 1; k <= n; ++k)
	{
		if (it->S.empty()) it = prev(it);
		s.insert(it->S.back());
		//debug(it->F, it->S.back());
		it->S.pop_back();

		for (auto qs : v[k])
			ans[qs.id] = a[*s.find_by_order(qs.pos)];
	}

	for (auto i : ans)
		cout << i << "\n";

	return 0;
}
