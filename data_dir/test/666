#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
#define ii pair<int,int>
#define ll long long
#define pll pair<ll,ll>
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 
#define iiordered_set tree<pll, null_type,less<pll>, rb_tree_tag,tree_order_statistics_node_update>
using namespace std;
#define MOD 1000000007
ll power(ll a,ll b, ll m=MOD)
{
    ll res=1;
    while(b>0)
    {
        if(b&1)
            res=(res*a)%m;
        a=(a*a)%m;
        b>>=1;
    }
    return res%m;
}
ll inverse(ll a,ll m=MOD)
{
    return power(a,m-2,m);
}
#define INFl 1e18
#define vi vector<int>
#define vvi vector<vi>
#define vl vector<long long>
#define vvl vector<vl>
#define vii vector<ii>
#define vvii vector<vii>
#define F first
#define S second
#define forl(i,n) for(int i=0;i<n;i++)
#define fore(i,n) for(int i=1;i<=n;i++)
#define rforl(i,n)  for(int i=n-1;i>=0;i--)
#define rfore(i,n)  for(int i=n;i>=1;i--)
#define CASE(t) cout<<"Case #"<<(t)<<": ";
#define INF 1100000009
#define gcd(a,b) __gcd(a,b)
#define all(x)  x.begin(),x.end()
#define mp make_pair
#define pb push_back
#define print(x)    for(auto it=x.begin();it!=x.end();it++) cout<<*it<<' '; cout<<endl;
#define printii(x)  for(auto it=x.begin();it!=x.end();it++) cout<<it->F<<' '<<it->S<<endl;  
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
ll compute(string s)
{
	if(s.empty())	
		return 1;
	if(s.size()==1)	return 2;
	multiset<ll> ss;
	ll p=0;
	forl(i,s.length())
	{
		if(s[i]=='1')	p++;
		else 	p--;
		ss.insert(p);
	}
	ll res=INFl;
	p=0;
	ll mn=0,mx=0;
	forl(i,s.length())
	{
		res=min(res,max(*ss.rbegin()+1,mx)-min(*ss.begin()+1,mn)+1);
		res=min(res,max(*ss.rbegin()-1,mx)-min(*ss.begin()-1,mn)+1);
		if(s[i]=='1')	p++;
		else p--;
		ss.erase(ss.find(p));
		mx=max(mx,p);
		mn=min(mn,p);
	}
	return res;
}
ll calc(string s)
{
	int p=0,mn=0,mx=0;
	forl(i,s.length())
	{
		if(s[i]=='1')	p++;
		else 	p--;
		mx=max(mx,p);
		mn=min(mn,p);
	}
	return mx-mn+1;
}
void solve()
{
	string s;	
	cin>>s;
	int n=s.length();
	if(n==1)
	{
		cout<<2<<endl;
		return;
	}
	ll ans=INFl;
	string x,y;
	forl(i,n)
	{
		if(s[i]=='W')	y+='1';
		else if(s[i]=='S') y+='0';
		else if(s[i]=='D') x+='1';
		else	x+='0';
	}
	ans=min(ans,calc(x)*calc(y));
	ans=min(ans,calc(x)*compute(y));
	ans=min(ans,compute(x)*calc(y));
	cout<<ans<<endl;
}
int main()
{
	int T;
	cin>>T;
	while(T--)	solve();
}