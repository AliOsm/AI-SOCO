#include <bits/stdc++.h>

#define pb push_back
#define pp pop_back
#define mp make_pair
#define ld long double
#define f first
#define s second
#define ll long long

using namespace std;

const int N = 5e5;

const int len = 400;

const int mod = 1e9 + 7;

int n, q, sz[N], lvl[N];

struct edge
{
  int u, v, c;
} e[N];

vector < int > g[N];

void dfs(int v = 1, int p = -1)
{
  sz[v] = 1;
  for (auto to : g[v])
  {
    if (to != p)
    {
      lvl[to] = lvl[v] + 1;
      dfs(to, v);
      sz[v] += sz[to];
    }
  }
}

ld C(int n, int k)
{
  if (k == 1) return n;
  else return 1.0 * (n - 1) * n / 2;
}

int main()
{
  ios_base::sync_with_stdio(0);
  #ifdef wws
    freopen("in", "r", stdin);
  #endif
  cin >> n;
  for (int i = 1;i < n;i++)
  {
    cin >> e[i].u >> e[i].v >> e[i].c;
    g[e[i].u].pb(e[i].v);
    g[e[i].v].pb(e[i].u);
  }
  dfs();
  ld all = 1.0 * n * (n - 1) * (n - 2);
  ld now = 0.0;
  for (int i = 1;i < n;i++)
  {
    if (lvl[e[i].u] > lvl[e[i].v]) swap(e[i].u, e[i].v);
    ld num = 1.0 * C(sz[e[i].v], 1) * C(n - sz[e[i].v], 2) + 1.0 * C(sz[e[i].v], 2) * C(n - sz[e[i].v], 1);
    now += 2.0 * e[i].c * 6.0 * num;
  }
  cin >> q;
  while(q--)
  {
    int i, w;
    cin >> i >> w;
    int old = w;
    w = e[i].c - w;
    e[i].c = old;
    ld num = 1.0 * C(sz[e[i].v], 1) * C(n - sz[e[i].v], 2) + 1.0 * C(sz[e[i].v], 2) * C(n - sz[e[i].v], 1);
    ld x = 2.0 * w * 6.0 * num;
    now -= x;
    cout << fixed << setprecision(10) << now / all << endl;
  }
  return 0;
}
