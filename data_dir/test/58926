
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j123 = n; (i) < j123; (i) ++)
#define rep1(i, n) for (int (i) = 1, j123 = n; (i) <= j123; (i) ++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout << #a << " :";for(int i123=(x);i123<=(y);i123++) cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int(x.size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

int N, M;
char T[2010][2010];
int cnt[2010][2010];
int dx[4] = {0, -1, 0, 1};
int dy[4] = {-1, 0, 1, 0};
string fst = ">v<^";
string snd = "<^>v";
queue< pair<int,int> > q;
int good(int x, int y)
{
  return 1 <= x && x <= N && 1 <= y && y <= M;
}
inline int add_tile(int x, int y)
{
  rep(i,4)
  {
    int xx = x + dx[i];
    int yy = y + dy[i];
    if (!good(xx,yy)) continue;
    cnt[xx][yy]++;
    if (cnt[xx][yy] == 3 && T[xx][yy]=='.')
      q.push(mp(xx,yy));
  }
  return 0;
}
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0);
  clr(T);
  cin >> N >> M;
  rep1(i,N) rep1(j,M) cin >> T[i][j];
  rep(i,N+2) rep(j,M+2) if (T[i][j] != '.')
  add_tile(i,j);
  rep1(i,N) rep1(j,M) if (cnt[i][j] == 3)
  q.push( mp(i,j) );

  while (!q.empty())
  {
    int x = q.front().first;
    int y = q.front().second;
    q.pop();
    if (T[x][y] != '.') continue;
    rep(i,4)
    {
      int xx = x + dx[i];
      int yy = y + dy[i];
      if (T[xx][yy] != '.') continue;
      T[x][y]   = fst[i];
      T[xx][yy] = snd[i];
      add_tile(x,y);
      add_tile(xx,yy);
      break;
    }
  }
  rep1(i,N) rep1(j,M) if (T[i][j] == '.')
  {
    cout << "Not unique" << endl;
    return 0;
  }
  rep1(i,N) 
  {
    rep1(j,M)
    cout << T[i][j];
    cout << endl;
  }

}
