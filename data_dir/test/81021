#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define MAX ((int)(1e9 + 5))
#define MAXL ((ll)(1e18 + 5))
#define MAX_X ((int)(1e6 + 2))
#define pi (2.0*acos(0))
#define M ((int)(1e9 + 7))
#define NN ((ll)(305))
#define N ((int)(2e5 + 5))
#define eps (0)
#define fastio ios_base::sync_with_stdio(false),cin.tie(NULL)
#define log 29
#define endl "\n"
//#define int ll


using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef unsigned long long ull;

/*fast io
ios_base::sync_with_stdio(false);
cin.tie(NULL);
*/


typedef tree < int ,  null_type,  less < int >,  rb_tree_tag,  tree_order_statistics_node_update > o_set;
/// o_set s;
/// s.order_of_key(k) : Number of items strictly smaller than k .
/// *(s.find_by_order(k)) : K-th element in a set (counting from zero).

string str;
int query()
{
    cout<<str<<endl;
    fflush(stdout);
    int a;
    cin>>a;
    return a;
}

int main()
{
    //fastio;

    for(int i = 0; i<300; i++) str += 'a';

    int a = query();
    if(a==0) return 0;
    //cout<<a<<endl;
    a = 300 - a;
    //cout<<a<<endl;
    //cout<<str.length()<<endl;
    str = "";
    for(int i = 0; i<300; i++) str += 'b';

    int b = query();
    if(b==0) return 0;
    //cout<<b<<endl;
    b = 300 - b;
    //cout<<b<<endl;
    int n = a + b;
    //cout<<a<<" "<<b<<" " <<n<<endl;
//    str.clear();
   // cout<<str.length()<<endl;
    //printf("%d %s\n",i,str);
    //cout<<a<<" "<<b<<endl;

    str = "";


    for(int i = 0; a>0 && b>0; i++){
        int tmp = b;
        str += 'a';
        while(tmp--) str += 'b';
        int x = query();
        assert(x>=0);
        if(x==0) return 0;
        tmp = b;
        while(tmp--) str.erase(str.end()-1);
        if(x==n-i-b-1){
            a--;
        }
        else{
            b--;
            str.erase(str.end()-1);
            str += 'b';
        }
    }

    while(a--){
        str += 'a';

    }
   // printf("%d %s\n",i,str);
    while(b--){
        //cout<<"asd\n";
        str += 'b';

    }
    //printf("%d %s\n",i,str);
   // printf("%d %s\n",i,str);
    a = query();
    assert(a==0);
    return 0;
}
