#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 1e5 + 7;
const int LG = 18;

int st[N], ft[N], d[N], par[N][LG], tim;
vector<int> adj[N];

void dfs(int v, int p)
{
	st[v] = tim++;
	for (auto u : adj[v])
		if (u != p)
		{
			d[u] = d[v] + 1;
			par[u][0] = v;
			for (int i=1; i<LG; i++)
				par[u][i] = par[par[u][i-1]][i-1];
			dfs(u, v);
		}
}

struct cmp{
	bool operator ()(int a, int b)
	{
		return st[a] < st[b];
	}
};

multiset<int, cmp> on;

inline int get_par(int v, int a)
{
	for (int i=0; i<LG; i++)
		if ((a >> i) & 1)
			v = par[v][i];
	return v;
}

inline int lca(int v, int u)
{
	if (d[u] > d[v])
		swap(u, v);
	v = get_par(v, d[v] - d[u]);
	if (v == u)
		return v;
	for (int i=LG-1; i>=0; i--)
		if (par[v][i] != par[u][i])
			v = par[v][i], u = par[u][i];
	return par[v][0];
}

inline int nxt(int v)
{
	auto it = on.upper_bound(v);
	if (it == on.end())
		return *on.begin();
	return *it;
}

inline int prv(int v)
{
	auto it = on.lower_bound(v);
	if (it == on.begin())
		return *on.rbegin();
	it--;
	return *it;
}

inline int dis(int u, int v)
{
	return d[u] + d[v] - 2 * d[lca(u, v)];
}

int main()
{
	ios::sync_with_stdio(false);

	int n, k;
	cin >> n >> k;
	k = 2 * (k-1);
	for (int i=1; i<n; i++)
	{
		int u, v;
		cin >> u >> v;
		u--, v--;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	dfs(0, -1);
	int p = 0, sz = 0, ans = 0;
	for (int i=0; i<n; i++)
	{
		bool found = true;
		while (found && p < n)
		{
			found = false;
			if (on.empty())
			{
				on.insert(p);
				found = true;
				p++;
			}
			else
			{
				int v = prv(p);
				int u = nxt(p);
				if (sz + dis(v, p) + dis(p, u) - dis(u, v) <= k)
				{
					sz += dis(v, p) + dis(p, u) - dis(u, v);
					on.insert(p);
					p++;
					found = true;
				}
			}
		}
		ans = max(ans, p - i);
		int v = prv(i);
		int u = nxt(i);
		sz += dis(u, v) - dis(u, i) - dis(v, i);
		on.erase(i);
	}
	cout << ans << "\n";
	return 0;
}
