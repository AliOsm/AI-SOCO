#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <string>
#include <cstring>
#include <cstdio>
// DON'T DIVIDE
// Greedy, Prefix, Sets/Bsearch, Dfs/bfs, DP
// Stack, Bitmask, Dsu 
using namespace std;

int n, k;
const int MAXN = 50005, MAXK = 505;
vector<int> adj[MAXN];
long long dp[MAXN][MAXK];
int p[MAXN];

void dfs(int idx, int par)
{
	dp[idx][0] = 1;
	for(int i = 0; i < adj[idx].size(); i++)
	{
		if(adj[idx][i] != par)
		{
			dfs(adj[idx][i], idx);
			p[adj[idx][i]] = idx;
			for(int j = 1; j <= k; j++)
				dp[idx][j] += dp[adj[idx][i]][j - 1];
		}
	}
}

int main()
{
	ios::sync_with_stdio(0);
	cin >> n >> k;

	for(int i = 0; i < n - 1; i++)
	{
		int u, v;
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	dfs(1, -1);

	long long ans = 0;
	for(int i = 1; i <= n; i++)
	{
		ans += dp[i][k];
		long long cnt = 0;
		for(int j = 0; j < adj[i].size(); j++)
		{
			int nxt = adj[i][j];
			if(nxt == p[i])
				continue;
			for(int x = 1; x < k; x++)
				cnt += dp[nxt][x - 1] * (dp[i][k - x] - dp[nxt][k - x - 1]);
		}
		ans += cnt / 2;
	}
	cout << ans << "\n"; 

	return 0;
}
