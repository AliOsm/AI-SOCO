
/*
	Training Contest 13 : Let's work on Trees and Graphs
	http://acm.hust.edu.cn/vjudge/contest/131283#overview
	
	233C. Cycles
*/

#include <bits/stdc++.h>
using namespace std;
typedef long long int lli;

int f[105][105];

int main()
{
	int k; cin>>k;

	
	// Find a full graph that contains less than K circle with len 3
	// A full graph with t nodes contains C(t , 3) cycles with len 3
	
	int a[105] = {};
	for ( int i=3 ; i<=100 ; i++ ) a[i] = (i * (i-1) * (i-2)) / (3 * 2 * 1);
	
	int n = 0;
	int t = 100;
	while ( a[t] > k ) t--;
	n += t;
	k -= a[t];
	
	for ( int i=1 ; i<=n ; i++ ) 
		for ( int j=1 ; j<=n ; j++ )
			f[i][j] = i!=j;
		
		
	// Now with adding new node to graph and connecting it to m first nodes of complete graph ( m < t always. why? )
	// we will add C(m , 2) = m * (m-1) / 2 extra circles with len 3
	
	// add nodes as much as needed and connect edges Greedily ( like coin changing , biggest to smallest )
	// ( ! I an not sure that greedy coin changing is valid or not , i am testing it. if not use DP. )
	
	int b[105] = {}; 
	for ( int i=2 ; i<=n ; i++ ) b[i] = ( i * (i-1) ) / (2);
	
	while ( k && t )
	{
		if ( b[t] <= k ) 
		{
			k -= b[t] , n++;
			
			for ( int i=1 ; i<=t ; i++ )
				f[i][n] = f[n][i] = true;
		}
		else 
			t--;
	}
	
	// --------------------------------------
	
	cout<<n<<"\n";
	for ( int i=1 ; i<=n ; i++ )
	{
		for ( int j=1 ; j<=n ; j++ )
			cout<<f[i][j];
		cout<<"\n";
	}
	
	return 0;
}



















