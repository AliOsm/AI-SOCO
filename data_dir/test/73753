#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <iomanip>
#include <cmath>
#include <queue>
#define pb push_back
#define mp make_pair
#define int long long
#pragma GCC optimize("O3")
 const long long mod1=998244353;
    const long long mod2=1000000007;
long long pow(int a,int b) {
    if (b==0 || a==1) return 1;
   
    if (b%2==0) { long long k=pow(a,b/2); return (k*k); }
    else { long long k=pow(a,b/2); return k*k*a; }
}
long long powmod(long long a,long long b,long long mod) {
    if (b==0 || a==1)  {if (mod==1) return 0; else return 1; }
   
    if (b%2==0) { long long k=powmod(a,b/2,mod); return (k*k)%mod; }
    else {long long k=powmod(a,b/2,mod); return ( (k*k) %mod *a)% mod; }
}
long long gcd(long long a, long long b) {
    if (a==0) return b;
    if (b==0) return a;
    if (a>b) return gcd(a%b,b); else return gcd(b%a,a);
}
int prime(int p) { // 1 - простое
    for (int i=2;i*i<=p;i++) {
        if (p%i==0 && i<p) return 0;  
    }
    return 1;
}
long long sqr(long long i) {
    return i*i;
}
using namespace std;
 
signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
     
     /* --------- */
     
int a,k;
cin>>a>>k;
int m[a];

for (int i=0;i<a;i++) cin>>m[i]; 
if (a==1) {cout<<"0"; return 0; }
int l=0;
int r=k; 
int q[a]; 
while (r-l>1) {
    int mid=(l+r)/2;
    
    if (m[0]+mid>=k) q[0]=0; else q[0]=m[0]; 
    for (int i=1;i<a;i++) { if (q[i-1]==0 && m[i]+mid>=k) q[i]=0; else
    { if (m[i]+mid>=k) if ((m[i]+mid)%k>=q[i-1] || q[i-1]>m[i]) q[i]=q[i-1]; else q[i]=m[i]; 
    if (m[i]+mid<k) if (m[i]+mid<q[i-1] && m[i]<q[i-1]) { l=mid+1;  break; } else q[i]=max(q[i-1],m[i]); 
    }
   // cout<<q[i]<<" ";
    if (i==a-1) r=mid; } 
}

if (m[0]+l>=k) q[0]=0; else q[0]=m[0]; 
    for (int i=1;i<a;i++) { if (q[i-1]==0 && m[i]+l>=k) q[i]=0; else
    { if (m[i]+l>=k) if ((m[i]+l)%k>=q[i-1] || q[i-1]>m[i]) q[i]=q[i-1]; else q[i]=m[i];
    if (m[i]+l<k) if (m[i]+l<q[i-1]) { cout<<r; return 0;  } else q[i]=max(q[i-1],m[i]); 
    }
  //  cout<<q[i]<<" ";
    if (i==a-1) cout<<l;  }
   /* --------- */
    return 0;
}