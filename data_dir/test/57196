#define _CRT_SECURE_NO_WARNINGS
 
#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstdlib>
#include <cassert>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <string>
#include <queue>
#include <stack>
#include <deque>
 
using namespace std;
 
#define forn(i,n) for (int i = int(0); i < int(n); i++)
#define forb(i,n) for (int i = int(n-1); i >= int(0); i--)
#define for1(i,n) for (int i = int(1); i <= int(n); i++)
#define fore(i,a,n) for (int i = int(a); i < int(n); i++)
 
#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define sz size()
#define sqr(x) ((x)*(x))
#define cube(x) ((x)*(x)*(x))
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define min3(a, b, c) min(a, min(b, c))
#define max3(a, b, c) max(a, max(b, c))
#define dist(x1, y1, x2, y2) sqrt(ld (sqr(x1 - x2) + sqr(y1 - y2)))
   
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
  
const int maxn = 501;
const int MAXN = 30001;
const int logn = 12;
const int inf = (int) 1e9;
const int alpha = 26;
const int my_hash = 31;
const long long base = (ll) 1e9;
const long long my_mod = 2674894331;
const long long l_inf = (ll) 4e18;
const long long mod = (ll) 1e9 + 7;
const long long l_mod = (ll) 1e18 - 11;
const double fi = (sqrt(5.0) + 1) / 2.0;
const double pi = acos(-1.0);
const double eps = 1e-8;
const double EPS = 0.00005;

int n;
vector<pair<int, int> > list;
string ans = "";

void rec(int pos, int &next_pos) {
	ans.pb('(');
	while (next_pos < n) {
		if ((next_pos - pos) * 2 + 1 >= list[pos].fr) {
			if ((next_pos - pos) * 2 + 1 <= list[pos].sc) {
				ans.pb(')');
			} else {
				printf("IMPOSSIBLE");
				exit(0);
			}
			return;
		}
		next_pos++;
		rec(next_pos, next_pos);
	}
	printf("IMPOSSIBLE");
	exit(0);
}

int main() {
	ios_base::sync_with_stdio(0);
	scanf("%d ", &n);
	list = vector<pair<int, int> > (n);
	forn(i, n)
		scanf("%d %d ", &list[i].fr, &list[i].sc);
	int pos = 0;
	while (pos < n) {
		rec(pos, pos);
		pos++;
	}
	cout << ans;
}