/*
ID: hepic
PROG: sabotage
LANG: C++11
*/
#include <bits/stdc++.h>

#define FOR(i, a, b) for(auto i=a; i<=b; ++i)
#define REP(i, a, b) for(auto i=a; i<b; ++i)
#define FORI(i, a, b) for(auto i=a; i!=b+1-2*(a>b); i+=1-2*(a>b))
#define REPI(i, a, b) for(auto i=a-(a>b); i!=b-(a>b); i+=1-2*(a>b))
#define ALL(v) v.begin(),v.end()
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define pf(a) push_front(a)
#define eb(a, b) emplace_back(a, b)
#define fir first
#define sec second
#define what_is(x) cout<<#x<<" is "<<x<<endl;
#define type(x) typeid(x).name()
#define ms(arr, val) memset(arr, val, sizeof(arr))
#define min3(a,b,c) min(min(a,b),c)
#define max3(a,b,c) max(max(a,b),c)
#define PI acos(-1)
#define open_read1 freopen("C:\\Users\\Hepic\\Desktop\\a.txt", "r", stdin)
#define open_write1 freopen("C:\\Users\\Hepic\\Desktop\\b.txt", "w", stdout)
#define open_read freopen("team.in", "r", stdin)
#define open_write freopen("team.out", "w", stdout)

using namespace std;

typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair<double, double> PDD;
typedef pair<int, int> PII;
typedef pair<int, PII> PIPII;
typedef pair<PII, PII> PPIIPII;
typedef pair<LL, LL> PLL;
typedef pair<ULL, ULL> PUU;
typedef pair<LL, PLL> PLPLL;
typedef pair<PLL, PLL> PPLLPLL;
typedef pair<int, LL> PIL;
typedef pair<LL, int> PLI;


template<typename T, typename T1>
ostream& operator << (ostream &out, pair<T, T1> obj)
{
    out<<"("<<obj.first<<","<<obj.second<<")";
    return out;
}


template<typename T, typename T1>
ostream& operator << (ostream &out, map<T, T1> cont)
{
    typename map<T, T1>::const_iterator itr = cont.begin();
    typename map<T, T1>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, set<T> cont)
{
    typename set<T>::const_iterator itr = cont.begin();
    typename set<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, multiset<T> cont)
{
    typename multiset<T>::const_iterator itr = cont.begin();
    typename multiset<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, template<typename ELEM, typename ALLOC=allocator<ELEM>> class CONT>
ostream& operator << (ostream &out, CONT<T> cont)
{
    typename CONT<T>::const_iterator itr = cont.begin();
    typename CONT<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, unsigned int N, typename CTy, typename CTr>
typename enable_if<!is_same<T, char>::value, basic_ostream<CTy, CTr> &>::type
operator << (basic_ostream<CTy, CTr> &out, const T (&arr)[N])
{
     REP(i, 0, N)
        out<<arr[i]<<" ";
    out<<endl;

    return out;
}


template<typename T>
T gcd(T a, T b)
{
    T min_v = min(a, b);
    T max_v = max(a, b);

    while(min_v)
    {
        T temp = max_v % min_v;
        max_v = min_v;
        min_v = temp;
    }

    return max_v;
}


template<typename T>
T lcm(T a, T b)
{
    return (a*b) / gcd(a, b);
}


template<typename T>
T fast_exp_pow(T base, T exp, T mod)
{
    LL res = 1;

    while(exp)
    {
        if(exp&1)
        {
            res *= base;
            res %= mod;
        }

        exp >>= 1;
        base *= base;
        base %= mod;

    }

    return res % mod;
}

/*#################################################################################################################
#################################################################################################################
#################################################################################################################
#################################################################################################################*/

#define SIZE 100010

int N, L, Tbeg, Tend, Tmid;
LL S;
LL numbers[SIZE], dp_solve[SIZE], seg_tree_1[SIZE];
PLL seg_tree[4*SIZE];



void build(int Tbeg=0, int Tend=N-1, int ind=0)
{
    if(Tbeg == Tend)
    {
        seg_tree[ind] = mp(numbers[Tbeg], numbers[Tbeg]);
        return;
    }

    int Tmid = (Tbeg + Tend) >> 1;

    build(Tbeg, Tmid, 2*ind+1);
    build(Tmid+1, Tend, 2*ind+2);

    seg_tree[ind].fir = min(seg_tree[2*ind+1].fir, seg_tree[2*ind+2].fir);
    seg_tree[ind].sec = max(seg_tree[2*ind+1].sec, seg_tree[2*ind+2].sec);
}


PLL query(int Qbeg, int Qend, int Tbeg=0, int Tend=N-1, int ind=0)
{
    if(Tbeg >= Qbeg  &&  Tend <= Qend)
        return seg_tree[ind];

    if(Tbeg > Qend  ||  Tend < Qbeg)
        return mp(INT_MAX, -INT_MAX);

    int Tmid = (Tbeg + Tend) >> 1;

    PLL ret1 = query(Qbeg, Qend, Tbeg, Tmid, 2*ind+1);
    PLL ret2 = query(Qbeg, Qend, Tmid+1, Tend, 2*ind+2);
    PLL ret = mp(min(ret1.fir, ret2.fir), max(ret1.sec, ret2.sec));

    return ret;
}


void update_1(int pos, LL value, int Tbeg=0, int Tend=N, int ind=0)
{
    if(Tbeg == Tend  &&  Tbeg == pos)
    {
        seg_tree_1[ind] = value;
        return;
    }

    if(Tbeg > pos  ||  Tend < pos)
        return;

    int Tmid = (Tbeg + Tend) >> 1;

    update_1(pos, value, Tbeg, Tmid, 2*ind+1);
    update_1(pos, value, Tmid+1, Tend, 2*ind+2);

    if(seg_tree_1[2*ind+1] == -1)
       seg_tree_1[ind] = seg_tree_1[2*ind+2];

    else if(seg_tree_1[2*ind+2] == -1)
       seg_tree_1[ind] = seg_tree_1[2*ind+1];

    else
        seg_tree_1[ind] = min(seg_tree_1[2*ind+1], seg_tree_1[2*ind+2]);
}


LL query_1(int Qbeg, int Qend, int Tbeg=0, int Tend=N, int ind=0)
{
    if(Tbeg >= Qbeg  &&  Tend <= Qend)
        return seg_tree_1[ind];

    if(Tbeg > Qend  ||  Tend < Qbeg)
        return -1;

    int Tmid = (Tbeg + Tend) >> 1;

    LL ret1 = query_1(Qbeg, Qend, Tbeg, Tmid, 2*ind+1);
    LL ret2 = query_1(Qbeg, Qend, Tmid+1, Tend, 2*ind+2);
    LL ret;

    if(ret1 == -1)
        ret = ret2;

    else if(ret2 == -1)
        ret = ret1;

    else
        ret = min(ret1, ret2);

    return ret;
}



int main()
{
//    open_read1;
    scanf("%d%lld%d", &N, &S, &L);

    REP(i, 0, N)
        scanf("%lld", numbers+i);

    build();
    ms(dp_solve, -1);
    ms(seg_tree_1, -1);
    update_1(0, 0);

    FOR(i, 1, N)
    {
        Tbeg = 1, Tend = i;

        while(Tbeg < Tend)
        {
            Tmid = (Tbeg + Tend) >> 1;
            PLL ret = query(Tmid-1, i-1);

//            cout<<Tmid<<", "<<i<<" = "<<ret<<endl;

            if(ret.sec - ret.fir <= S)
                Tend = Tmid;
            else
                Tbeg = Tmid + 1;
        }

//        cout<<" = "<<Tend<<endl;

        if(i-Tend+1 < L)
            dp_solve[i] = -1;
        else
        {
            if(i == 1)
            {
                if(L == 1)
                    dp_solve[i] = 1;
            }
            else
            {
                LL ret = query_1(Tend-1, i-L);

                if(ret != -1)
                    dp_solve[i] = ret + 1;

//                cout<<Tend-1<<" "<<i-L+1<<" "<<ret<<" "<<dp_solve[i]<<endl;
            }

            update_1(i, dp_solve[i]);
        }
    }

    printf("%lld\n", dp_solve[N]);
    return 0;
}
