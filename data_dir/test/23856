#include <bits/stdc++.h>

typedef long long ll;
using namespace std;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000002;
const ll INFLL = 100000000000000000ll;
const ll MOD = 1000000007;

// ----------------------------------------------------------------------------------------------------------

const int MAX = 100005;

bool Out[MAX];
int N, T[MAX];
ll K;
priority_queue<pii,vii,greater<pii>> Q;

int query(int x)
{
    int ret = 0;
    while(x > 0)
    {
        ret += T[x];
        x -= x&-x;
    }
    return ret;
}

void update(int x, int v)
{
    while(x <= N)
    {
        T[x] += v;
        x += x&-x;
    }
}

int query(int l, int r)
{
    return query(r) - query(l-1);
}

int main()
{
    cin >> N >> K;
    ll Rem = N;
    f(i,1,N) update(i,1);

    int pos = 0;

    f(i,1,N)
    {
        int x;
        scanf("%d", &x);
        Q.push({x,i});
    }

    int last = 1;

    while(!Q.empty())
    {
        pii p = Q.top();
        Q.pop();

        int x = p.first, id = p.second;

        ll rounds = pos>id ? x-last-1 : x-last;
        last = x;

        ll need = pos > id ? query(pos+1,N) + query(1,id) : query(pos+1,id);
        need += (ll) Rem * rounds;

        if(need > K)
        {
            vector<int> v;

            f(i,pos+1,N) if(!Out[i]) v.pb(i);
            f(i,1,pos) if(!Out[i]) v.pb(i);
            ll start = K%Rem;
            f(i,start,Rem-1) printf("%d ", v[i]);
            f(i,0,start-1) printf("%d ", v[i]);
            return 0;
        }

        K -= need;

        pos = id;
        update(id,-1);
        Out[id] = true;
        Rem--;
    }

    if(K) cout << "-1";
}
