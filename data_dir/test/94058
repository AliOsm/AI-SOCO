#include <iostream>
#include <fstream>
#include <algorithm>
#include <iomanip>
#include <random>
#include <ctime>
#include <bitset>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <cmath>
#include <climits>
#include <cstring>
#include <queue>
#include <deque>
#include <list>
#include <stack>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma GCC optimize("O3")
#define ld long double
#define ull unsigned long long
#define ll long long
#define pb push_back
#define pii pair<int, int>
#define pll pair<ll, ll>
#define all(x) x.begin(), x.end()
#define fast_io cout.tie(0), cin.tie(0), ios_base::sync_with_stdio(0)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
using namespace std;
ld eps = (ld)1 / 1e9;
ll inf = 1e18;
ll sqr(ll a) { return a * a; }
ll gcd(ll a, ll b) { return !a ? b : gcd(b % a, a); }
ll binpow(ll a, ll b, ll mod) { return b ? (b % 2 ? (a * (sqr(binpow(a, b / 2, mod)) % mod)) % mod : sqr(binpow(a, b / 2, mod)) % mod) : 1; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vector<int> vc[27][27];
vector<pii> ans;

int main()
{
    fast_io;
    ll n, i, j, k, t;
    string a, b;
    cin >> n >> a >> b;
    for (i = 0; i < n; i++)
    {
        if (a[i] == b[i]) continue;
        vc[a[i] - 'a'][b[i] - 'a'].pb(i + 1);
    }
    for (i = 0; i < 26; i++)
    {
        for (j = 0; j < 26; j++)
        {
            if (vc[i][j].empty()) continue;
            for (k = 0; k < vc[i][j].size() - 1; k += 2) ans.pb({vc[i][j][k], vc[i][j][k + 1]});
            t = vc[i][j][vc[i][j].size() - 1];
            if (vc[i][j].size() % 2)
            {
                if (vc[j][i].empty()) cout << -1, exit(0);
                else
                {
                    ans.pb({t, t});
                    ans.pb({t, vc[j][i][vc[j][i].size() - 1]});
                    vc[j][i].pop_back();
                }
            }
            vc[i][j].clear();
        }
    }
    cout << ans.size() << '\n';
    for (auto f: ans) cout << f.first << ' ' << f.second << '\n';
    return 0;
}