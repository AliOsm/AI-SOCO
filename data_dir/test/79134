#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <cmath>
#include <ctime>
#include <string>
#include <cstdlib>
#include <algorithm>
using namespace std;
#define read freopen("C:\\Users\\USER\\Desktop\\in.txt", "r", stdin)
#define write freopen("C:\\Users\\USER\\Desktop\\out.txt", "a", stdout)
#define inf 1<<30
#define pii pair<int, int>
#define ff first
#define ss second
#define in(a) scanf("%d", &a)
#define ins(a) scanf("%s", a)
#define in2(a, b) scanf("%d%d", &a, &b)
#define in3(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define pn printf("\n");
#define pcs(a) printf("Case %d: ", a)
#define pr(a) printf("%d\n", a)
#define pr(a) printf("%d\n", a)
#define prs(a) printf("%d ", a)
#define pr2(a, b) printf("%d %d\n", a, b)
#define pr3(a, b ,c) printf("%d %d %d\n", a, b, c)
#define vi vector<int>
#define msi map<string, int>
#define mii map<int, int>
#define si set<int>
#define cl clear()
#define sz size()
#define pb push_back
#define MAX(A,B) (((A)>(B))?(A):(B))
#define MIN(A,B) (((A)<(B))?(A):(B))
#define all(X) (X).begin(), (X).end ()
#define iter(it, X) for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(int n, int pos) {return (bool) (n & (1<<pos));}
//int on(int n, int pos) {return n | (1<<pos);}
//int off(int n, int pos) {return n & ~(1<<pos);}
//bool operator < (const data &d) const{return cost<d.cost;}
typedef long long LL;
typedef struct data sd;
vi temp, g[100010], gT[100010];
stack<int>s;
int n, e, visited[100010], cost[100010];
void _visit()
{
    for (int i=0; i<=n; i++) visited[i]=false;
}
void dfs_1(int u)
{
    int i, m=g[u].sz, v;
    visited[u]=true;
    for (i=0; i<m; i++)
        {
            v=g[u][i];
            if (!visited[v])
            dfs_1(v);
        }
s.push(u);
}
void dfs_2(int u)
{
    int i, m=gT[u].sz, v;
    visited[u]=true;
    for (i=0; i<m; i++)
        {
            v=gT[u][i];
            if (!visited[v])
            dfs_2(v);
        }
temp.pb(cost[u]);
}
int main()
{
    //use %I64d
   // read;
    int i, j, k, p, q;
    LL sum=0, ways=1;

    in(n);
    for (i=1; i<=n; i++) in(cost[i]);
    in(e);
    while (e--)
    {
        in2(i, j);
        g[i].pb(j);
        gT[j].pb(i);
    }

    _visit();

    for (i=1; i<=n; i++) if (!visited[i]) dfs_1(i);

    _visit();
    LL minn=inf, cnt=0;

    while (!s.empty())
    {
        j=s.top();
        s.pop();
        minn=inf; cnt=0;

        if (!visited[j])
        {
            temp.cl;
            dfs_2(j);

            for (i=0; i<temp.sz; i++)
            {
          //      prs(temp[i]);
                if (temp[i]<minn)
                {
                    minn=temp[i];
                    cnt=1;
                }
                else if (temp[i]==minn) cnt++;
            }

            sum+=minn;
            ways= (ways*cnt)%1000000007;
        }
    }
printf("%I64d %I64d\n", sum, ways);
//file?
return 0;
}
