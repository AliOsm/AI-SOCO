//Solution by Tima
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <bitset>
#define f first
#define s second
#define ll long long
#define ull unsigned long long
#define mp make_pair
#define pb push_back
#define vi vector <int>
#define ld long double
#define pii pair<int, int>
#define y1 sda
using namespace std;    
const int N = int(1e5) + 10, mod = int(1e9)  + 7; 

inline int readInt() 
{ 
    int x = 0; 
    char ch = getchar(); 
    while (ch < '0' || ch > '9') 
        ch = getchar(); 
    while (ch >= '0' && ch <= '9') 
    { 
        x = (x << 3) + (x << 1) + ch - '0'; 
        ch = getchar(); 
    } 
    return x; 
}

int n,m, ans;

int t[2*N],u[N], w[N], v[N], f[N], p[N];

int id[N];

vector <int> g[N];

bool cmp(int a,int b){
	return (v[a] < v[b] || (v[a] == v[b] && w[a] < w[b]));
}

void upd(int v,int d){
	v += m - 1;
	t[v] = d;
	while(v > 1){
	    v >>= 1;
	    t[v] = max(t[v + v], t[v + v + 1]);
	}
}

int get(int l,int r){
	int res = 0;
	l += m - 1;
	r += m - 1;
	while(l <= r){
		if(l & 1) res = max(res, t[l]);
		if(!(r & 1)) res = max(res, t[r]);
		l = (l + 1) >> 1;
		r = (r - 1) >> 1;
	}
	return res;
}

int main () {
	n = readInt(), m = readInt();
	for(int i = 1; i <= m; i++){
		u[i] = readInt();
		v[i] = readInt();
		w[i] = readInt();
		g[v[i]].pb(w[i]);
		id[i] = i;
	}
	sort(id + 1, id + m + 1, cmp);
	for(int i = 1; i <= m; i++){
		if(!f[v[id[i]]]) f[v[id[i]]] = i;
		p[id[i]] = i;
	}
	for(int i = 1; i <= n; i++){
		if(!f[i]) f[i] = m + 1;
		sort(g[i].begin(), g[i].end());
	}
	for(int i = 1; i <= m; i++){
		int x = lower_bound(g[u[i]].begin(), g[u[i]].end(), w[i]) - g[u[i]].begin();
		x--;
		int d = get(f[u[i]], f[u[i]] + x) + 1;		
		upd(p[i], d);
		ans = max(ans, d);
	}
	printf("%d", ans);


return 0;
}