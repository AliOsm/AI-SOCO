#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

int cnt[1 << 20];
map<string, set<string> > adj;

int get_diff(int i, int j, int k, int a, int b, int c) {
	int minn = 2e9 + 5, maxx = -(2e9 + 5);
	int si = __builtin_popcount(i), sj = __builtin_popcount(j), sk = __builtin_popcount(k);
	minn = min({a / si, b / sj, c / sk});
	maxx = max({a / si, b / sj, c / sk});
	return maxx - minn;
}

string to_bin(int x) {
	string bin = "";
	while(x) {
		bin += (x & 1) + '0';
		x >>= 1;
	}
	while((int) bin.size() < 7) {
		bin += '0';
	}
	reverse(bin.begin(), bin.end());
	return bin;
}

int main() {
	ios_base::sync_with_stdio(false);
	
	vector<string> heroes {"Anka", "Chapay", "Cleo", "Troll", "Dracul", "Snowy", "Hexadecimal"};
	const int H = 7;

	int n;
	cin >> n;
	fori(i, 0, n) {
		string aa, lixo, bb;
		cin >> aa >> lixo >> bb;
		adj[aa].insert(bb);
	}
	int a, b, c;
	cin >> a >> b >> c;

	fori(i, 0, 1 << H) {
		fori(j, 0, H) {
			if(i & (1 << j)) {
				fori(k, 0, H) {
					if(i & (1 << k)) {
						if(adj[heroes[j]].count(heroes[k])) {
							cnt[i]++;
						}
					}
				}
			}
		}
	}
	
	int best_diff = 2e9 + 5, best_likes = -1;
	int all = (1 << H) - 1;
	fori(i, 1, 1 << H) {
		fori(j, 1, 1 << H) {
			if(i & j) {
				continue;
			}
			int k = all & (~i & ((1 << H) - 1)) & (~j & ((1 << H) - 1));
			if(k == 0) {
				continue;
			}
			int total_cnt = cnt[i] + cnt[j] + cnt[k];
			int A = get_diff(i, j, k, a, b, c);
			int B = get_diff(i, j, k, a, c, b);
			int C = get_diff(i, j, k, b, a, c);
			int D = get_diff(i, j, k, b, c, a);
			int E = get_diff(i, j, k, c, a, b);
			int F = get_diff(i, j, k, c, b, a);
			int M = min({A, B, C, D, E, F});
			if(best_diff > M) {
				best_diff = M;
				best_likes = total_cnt;
			}
			else if(best_diff == M) {
				best_likes = max(best_likes, total_cnt);
			}
		}
	}
	
	cout << best_diff << " " << best_likes << '\n';

	return 0;
}

