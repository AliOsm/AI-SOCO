#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <bitset>
#include <random>
#include <cassert>

using std::ios_base;
using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::fixed;

using std::vector;
using std::string;
using std::stack;
using std::queue;
using std::deque;
using std::map;
using std::set;
using std::unordered_map;
using std::unordered_set;
using std::bitset;

using std::tuple;
using std::make_tuple;
using std::pair;
using std::make_pair;

using std::sort;
using std::reverse;
using std::nth_element;

#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()
#define sqr(x) ((x) * (x))

#define forn(i, n) for (int i = 0; i < (n); i++)
#define fornr(i, n) for (int i = (n) - 1; i >= 0; i--)
#define forab(i, a, b) for (int i = (a); i < (b); i++)

int n;
string ss[105];

string s, t;
char l;
bool u[105];

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;

    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> ss[i];
        for (char& c : ss[i])
            c = std::tolower(c);
    }

    cin >> s;
    t = s;
    for (char& c : t)
        c = std::tolower(c);

    cin >> l;
    l = std::tolower(l);

    for (int i = 0; i < n; ++i) {
        int m = ss[i].size();
        for (int j = 0; j + m <= (int) t.size(); ++j) {
            if (t.substr(j, m) == ss[i]) {
                for (int k = j; k < j + m; ++k)
                    u[k] = true;
            }
        }
    }

    for (int i = 0; i < (int) s.size(); ++i) {
        char x = t[i] == l ? (t[i] == 'a' ? 'b' : 'a') : l;
        if (u[i]) {
            if (std::islower(s[i])) {
                s[i] = std::tolower(x);
            } else {
                s[i] = std::toupper(x);
            }
        }
    }
    cout << s << '\n';


#ifdef LOCAL
    cerr << "\n== " << 1.0 * clock() / CLOCKS_PER_SEC << " sec.\n";
#endif
    return 0;
}
