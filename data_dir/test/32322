#include <algorithm>
#include <iostream>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdlib>
#include <cstdio>
#include <bitset>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

const int inf = 1e9 + 143;
const long long longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 81010;

int n;
vector<int> g[N];
int sz[N], d[N];

void dfs(int u,int p){
    sz[u] = 1;
    for(int v : g[u]){
        if(v != p){
            d[v] = d[u] + 1;
            dfs(v, u);
            sz[u] += sz[v];
        }
    }
}

long long choose(int n,int r){
    if(r == 2)
        return (long long)n * (n - 1) / 2ll;
}

long long ans1 = 0LL, ans2 = 0LL;

void solve(int u,int p,long long up1,long long up2){
    long long sum = 0LL;
    for(int v : g[u]){
        if(v != p)
            sum += choose(sz[v], 2);
    }
    ans1 += (choose(sz[u], 2) - sum) * up1;
    ans2 += (choose(sz[u], 2) - sum) * up2;
    for(int v : g[u]){
        if(v != p){
            long long down = sum - choose(sz[v], 2);
            long long nup1 = up1 + choose(sz[u] - sz[v], 2) - down + (long long)(sz[u] - sz[v]) * (n - sz[u]);
            long long nup2 = up2 + down;
            solve(v, u, nup1, nup2);
        }
    }
}

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    n = read();

    for(int i = 1; i < n; i++){
        int u = read();
        int v = read();
        g[u].push_back(v);
        g[v].push_back(u);
    }

    dfs(1, 0);

    solve(1, 0, 0LL, 0LL);

    cout << ans1 * 2LL + ans2 << endl;

    return 0;
}
