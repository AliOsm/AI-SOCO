#import <bits/stdc++.h>
#define pb push_back
#define F first
#define S second
#define ins insert
#define mp make_pair
#define fo(i, n1, n, x) for(int i = n1; i <= n; i += x)
#define foo(i, n, n1, x) for(int i = n; i >= n1; i -= x)
#define bit __builtin_popcount
#define md (l + ((r - l) / 2))
#define all(x) x.begin(),x.end()
#define ll long long
#define ld long double
#define eb emplace_back
#define ub upper_bound
#define lb lower_bound
#define ios ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define file(s) if (fopen(s".in", "r")) freopen(s".in", "r", stdin), freopen(s".out", "w", stdout)

using namespace std;

const int N = 1e5 + 11, mod = 1e9 + 7;
const int INF1 = 2e9 + 11;
const ll INF2 = 2e18 + 11;
const int base = 500;
const int P = 31;
const int dx[] = {1, -1, 0, 0, 1, 1, -1, -1};
const int dy[] = {0, 0, 1, -1, 1, -1, 1, -1};
const double EPS = 1e-12;
const double PI = acos(-1.0);

#define int ll

int n, m, a[N], sz[N], pr[N], ans;
vector < int > v;
struct edge {
    int u, v, cost;
    bool operator <(const edge &a) const {
        return cost > a.cost;
    }
} e[N];
inline int f(int x) {
    return (x == pr[x] ? x : pr[x] = f(pr[x]));
}
main() {
    file("queue");
    ios;
    cin >> n >> m;
    fo(i, 1, n, 1) cin >> a[i];
    fo(i, 1, m, 1) {
        cin >> e[i].u >> e[i].v;
        e[i].cost = min(a[e[i].u], a[e[i].v]);
    }
    fo(i, 1, n, 1) pr[i] = i, sz[i] = 1;
    sort(e + 1, e + m + 1);
    fo(i, 1, m, 1) {
        int x = e[i].u, y = e[i].v;
        x = f(x);
        y = f(y);
        if (x != y) ans += sz[x] * sz[y] * e[i].cost, pr[y] = x, sz[x] += sz[y];
    }
    cout << fixed << setprecision(6) << ans * 2.0 / n / (n - 1);
    return 0;
}
