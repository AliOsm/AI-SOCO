
#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <unordered_set>
#include <bitset>


using namespace std;



#define pb push_back
#define pii pair<int, int>
#define mp make_pair
#define ull unsigned long long
#pragma comment(linker, "/STACK:64000000")
#define null NULL
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define fornr(i, n) for (int i = (n); i >= 0; --i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)
#define all(a) a.begin(), a.end()
#define vi vector<int>
#define v(a) vector<a>

//typedef long double ld;
typedef long double ld;
typedef pair<ld, ld> pldld;
typedef long long ll;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;


typedef unsigned int ui;
typedef unsigned char uc;
const int infi = 1e9 + 7;
const ll infl = 2e18 + 7;

/*
template <class T1, class T2>
istream & operator >> (istream &in, pair<T1, T2> a) {
return in >> a.first >> a.second;
}*/

/*
const int MAX_MEM = 9e8;
int mpos = 0;
char mem[MAX_MEM];
inline void * operator new ( size_t n ) {
char *res = mem + mpos;
mpos += n;
assert(mpos <= MAX_MEM);
return (void *)res;
}
inline void operator delete ( void * ) { }

inline void * operator new [] ( size_t ) { assert(0); }
inline void operator delete [] ( void * ) { assert(0); }
*/

static const int buf_size = 4096;

inline int getChar() {
	static char buf[buf_size];
	static int len = 0, pos = 0;
	if (pos == len)
		pos = 0, len = fread(buf, 1, buf_size, stdin);
	if (pos == len)
		return -1;
	return buf[pos++];
}

inline int readChar() {
	int c = getChar();
	while (c <= 32)
		c = getChar();
	return c;
}

inline int readInt() {
	int s = 1, c = readChar();
	int x = 0;
	if (c == '-')
		s = -1, c = getChar();
	while ('0' <= c && c <= '9')
		x = x * 10 + c - '0', c = getChar();
	return s == 1 ? x : -x;
}

int pos[101];
int ar[200500];

pair<int, pii> zp[200500];


int main() {
	srand(time(null));
	cin.sync_with_stdio(false);
	cin.tie(0);

//	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	//freopen("floor.in", "r", stdin); freopen("floor.out", "w", stdout);
	int n, q, m;
	cin >> n >> q >> m;
	forn(i, n)
		cin >> ar[i];
	forn(i, q)
		cin >> zp[i].first >> zp[i].second.first >> zp[i].second.second;
	forn(i, m) {
		cin >> pos[i];
		--pos[i];
	}
	reverse(zp, zp + q);
	forn(asd, q) {
		int l = zp[asd].second.first - 1, r = zp[asd].second.second - 1;
		if (zp[asd].first == 1) {
			forn(i, m) {
				if (pos[i] < l || pos[i] > r)
					continue;
				if (pos[i] == l)
					pos[i] = r;
				else
					--pos[i];
			}
		}
		else {
			forn(i, m) {
				if (pos[i] < l || pos[i] > r)
					continue;
				pos[i] = l + (r - pos[i]);
			}
		}
	}
	forn(i, m)
		cout << ar[pos[i]] << ' ';


	return 0;
}