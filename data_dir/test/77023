#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
#define ii pair<int,int>
#define ll long long
#define pll pair<ll,ll>
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 
#define iiordered_set tree<pll, null_type,less<pll>, rb_tree_tag,tree_order_statistics_node_update>
using namespace std;
#define MOD 1000000007
ll power(ll a,ll b, ll m=MOD)
{
    ll res=1;
    while(b>0)
    {
        if(b&1)
            res=(res*a)%MOD;
        a=(a*a)%MOD;
        b>>=1;
    }
    return res;
}
ll inverse(ll a,ll m=MOD)
{
    return power(a,m-2,m);
}
int ceil(int a,int b)
{
    return (a+b-1)/b;
}
#define INFl (1e18+5)
#define vi vector<int>
#define vvi vector<vi>
#define vl vector<long long>
#define vvl vector<vl>
#define vll vector<pll>
#define vii vector<ii>
#define vvii vector<vii>
#define tri pair<int,ii>
#define F first
#define S second
#define forl(i,n) for(int i=0;i<n;i++)
#define fore(i,n) for(int i=1;i<=n;i++)
#define rforl(i,n)  for(int i=n-1;i>=0;i--)
#define rfore(i,n)  for(int i=n;i>=1;i--)
#define CASE(t) cout<<"Case #"<<(t)<<": ";
#define INF 1020000000
#define gcd(a,b) __gcd(a,b)
#define all(x)  x.begin(),x.end()
#define mp make_pair
#define pb push_back
#define print(x)    for(auto it=x.begin();it!=x.end();it++) cout<<*it<<' '; cout<<endl;
#define printii(x)  for(auto it=x.begin();it!=x.end();it++) cout<<it->F<<' '<<it->S<<endl;  
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
int dx[]={1,-1,0,0};
int dy[]={0,0,1,-1};
int n;
bool valid=true;
bool check(int x,int y)
{
	return x<n && x>=0 && y<n && y>=0;
}
vector<vector<ii>> a;
char res[1005][1005];
int main()
{
	fastio;
	cin>>n;
	a.assign(n,vector<ii>(n));
	queue<ii> start;
	vvi vis(n,vi(n,0));
	int cnt=0;
	forl(i,n)
	forl(j,n)
	{
		cin>>a[i][j].F>>a[i][j].S;
		a[i][j].F--;a[i][j].S--;
		if(a[i][j].F==i && a[i][j].S==j)
			start.push(a[i][j]),vis[i][j]=1,res[i][j]='X',cnt++;
	}
	while(!start.empty())
	{
		ii tmp=start.front();
		start.pop();
		int x=tmp.F,y=tmp.S;
		forl(i,4)
		{
			int nx=x+dx[i];
			int ny=y+dy[i];
			if(!check(nx,ny) || vis[nx][ny])	continue;
			if(a[nx][ny]==mp(-1,-1))	continue;
			if(a[nx][ny]!=a[x][y])	continue;
			vis[nx][ny]=1;
			start.push(mp(nx,ny));
			if(x==nx-1)	res[nx][ny]='U';
			if(x==nx+1)	res[nx][ny]='D';
			if(y==ny+1)	res[nx][ny]='R';
			if(y==ny-1)	res[nx][ny]='L';
			cnt++;
		}
	}
	forl(i,n)
	forl(j,n)
	{
		if(a[i][j]==mp(-2,-2))
		{
			// cout<<i<<' '<<j<<endl;
			forl(k,4)
			{
				int x=i+dx[k],y=j+dy[k];
				if(!check(x,y))	continue;
				if(a[x][y]==a[i][j])
				{
					if(x==i-1)	res[i][j]='U';
					if(x==i+1)	res[i][j]='D';
					if(y==j+1)	res[i][j]='R';
					if(y==j-1)	res[i][j]='L';
					cnt++;
					break;
				}
			}
		}
	}
	if(cnt!=n*n)
	{
		cout<<"INVALID"<<endl;
		return 0;
	}
	cout<<"VALID"<<endl;
	forl(i,n)
	{
		cout<<res[i]<<endl;
	}

}