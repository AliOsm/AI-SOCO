#include <iostream>
#include<memory.h>
#include <map>
#include <string>
#include <iomanip>
#include <fstream>
#include <vector>
#include <algorithm>
#include <stack>
#include <queue>
#include <cmath>
#include <set>
using namespace std;

/*
*/

int main()
{
	int n;
	cin>>n;
	vector<int> lp(n);
	vector<int> hp(n);
	for (int i = 0; i < n; i++) cin>>lp[i]>>hp[i];
	vector<int> r(n, -1);
	vector<pair<pair<int, int>, int> > p(n);
	for (int i = 0; i < n; i++)
	{
		p[i].first.first = lp[i];
		p[i].first.second = hp[i];
		p[i].second = i;
	}
	sort(p.begin(), p.end());
	int m;
	cin>>m;
	vector<int> la(m);
	vector<int> ha(m);
	vector<int> rem(m);
	for (int i = 0; i < m; i++) cin>>la[i]>>ha[i]>>rem[i];
	vector<pair<pair<int, int>, int> > a(m);
	for (int i = 0; i < m; i++)
	{
		a[i].first.first = la[i];
		a[i].first.second = ha[i];
		a[i].second = i;
	}
	sort(a.begin(), a.end());
	set<pair<int, int> > open;
	int j = 0;
	for (int i =0; i < n; i++)
	{
		while (j < a.size() && a[j].first.first <= p[i].first.first) {
			open.insert(make_pair(a[j].first.second, a[j].second));
			j++;
		}
		pair<int, int> val = make_pair(p[i].first.second, -1);
		set<pair<int, int> > ::iterator it = open.lower_bound(val);
		if (it == open.end())
		{
			cout<<"NO"<<endl;
			return 0;
		}
		
		int in = (*it).second;
		rem[in]--;
		if (rem[in] == 0) open.erase(it);
		r[p[i].second] = in;
	}
	cout<<"YES"<<endl;
	for (int i = 0; i < n; i++)
	{
		cout<<r[i]+1<<" ";
	}
}