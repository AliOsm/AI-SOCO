 /// Bismillahir-Rahmanir-Rahim
#include <bits/stdc++.h>
#define        ll                              long long int
#define        FOR(x,y,z)                      for(int x=y;x<z;x++)
#define        pii                             pair<int,int>
#define        pll                             pair<ll,ll>
#define        CLR(a)                          memset(a,0,sizeof(a))
#define        SET(a)                          memset(a,-1,sizeof(a))
#define        N                               200010
#define        M                               1000000007
#define        pi                              acos(-1.0)
#define        ff                              first
#define        ss                              second
#define        pb                              push_back
#define        inf                              (1e9)+1000
#define        eps                             1e-9
#define        ALL(x)                          x.begin(),x.end()
using namespace std;
int dx[]={0,0,1,-1,-1,-1,1,1};
int dy[]={1,-1,0,0,-1,1,1,-1};
template < class T> inline T biton(T n,T pos){return n |((T)1<<pos);}
template < class T> inline T bitoff(T n,T pos){return n & ~((T)1<<pos);}
template < class T> inline T ison(T n,T pos){return (bool)(n & ((T)1<<pos));}
template < class T> inline T gcd(T a, T b){while(b){a%=b;swap(a,b);}return a;}
template <typename T> string NumberToString ( T Number ) { ostringstream ss; ss << Number; return ss.str(); }
inline int nxt(){int aaa;scanf("%d",&aaa);return aaa;}
inline ll lxt(){ll aaa;scanf("%lld",&aaa);return aaa;}
inline double dxt(){double aaa;scanf("%lf",&aaa);return aaa;}
template <class T> inline T bigmod(T p,T e,T m){T ret = 1;
for(; e > 0; e >>= 1){
    if(e & 1) ret = (ret * p) % m;p = (p * p) % m;
} return (T)ret;}
#ifdef sayed
     #define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template < typename Arg1 >
    void __f(const char* name, Arg1&& arg1){
        cerr << name << " is " << arg1 << std::endl;
    }
    template < typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names+1, ',');
        cerr.write(names, comma - names) << " is " << arg1 <<" | ";
        __f(comma+1, args...);
    }
#else
    #define debug(...)
#endif
///******************************************START******************************************
int ar[N];
int go(string s,int a,int b){
    int ind= -1;
    for(int i= s.length()-1;i>=0;i--){
        if(s[i]-'0'==b) {
            ind= i;
            break;
        }
    }
    if(ind ==-1) return inf;
    int ans = s.length()-1-ind;
    s.erase(s.begin()+ind);

    ind = -1;
    for(int i= s.length()-1;i>=0;i--){
        if(s[i]-'0'==a) {
            ind= i;
            break;
        }
    }
    if(ind ==-1) return inf;
    ans += s.length()-1-ind;
    s.erase(s.begin()+ind);
    s+=(char)(a+'0');
    s+=(char)(b+'0');

    ind = -1;
    for(int i= 0;i<s.length()-2;i++){
        if((s[i]-'0')>0) {
            ind= i;
            break;
        }
    }
    if(ind ==-1) return inf;
    ans+=ind;

    return ans;
}
int main(){
    #ifdef sayed
    //freopen("out.txt","w",stdout);
    // freopen("in.txt","r",stdin);
    #endif
    //ios_base::sync_with_stdio(false);
    //cin.tie(0);
    string s;
    cin>>s;
    if(s.length()==1){
        cout<<-1<<endl;;
    } else if(s.length()==2) {
        int num = s[0]-'0';
        num*=10;
        num+=s[1]-'0';
        if(num%25==0) {
            cout<<0<<endl;
        } else {
            swap(s[0],s[1]);
            num = s[0]-'0';
            num*=10;
            num+=s[1]-'0';
            if(num%25==0) {
                cout<<1<<endl;;
            } else {
                cout<<-1<<endl;
            }

        }
    } else {
        int ans = inf;
        ans = min(ans,go(s,5,0));
        ans = min(ans,go(s,0,0));
        ans = min(ans,go(s,2,5));
        ans = min(ans,go(s,7,5));
        if(ans==inf) ans =-1;
        cout<<ans<<endl;

    }

    return 0;
}
