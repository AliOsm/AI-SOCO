#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("tune=native")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef tree<pair<ll, int>, null_type, less<pair<ll, int>>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int MAX_N = 200005;

int n;
ll t;
ll a[MAX_N];
ordered_set cntPrefSum;
int uniqueCnt = 0;

int main()
{
    ios::sync_with_stdio(false);
    cin >> n >> t;
    for (int i = 0; i < n; i++)
        cin >> a[i];

    ll currSum = 0;
    for (int i = 0; i < n; i++)
    {
        currSum += a[i];
        cntPrefSum.insert({currSum, uniqueCnt});
        uniqueCnt++;
    }

    currSum = 0;
    ll result = 0;
    for (int i = 0; i < n; i++)
    {
        auto it = cntPrefSum.lower_bound({t + currSum, -1});
        if (it == cntPrefSum.end())
            result += n - i;
        else
            result += cntPrefSum.order_of_key(*it);

        currSum += a[i];
        auto it2 = cntPrefSum.lower_bound({currSum, -1});
        if (it2 != cntPrefSum.end() && it2->first == currSum)
            cntPrefSum.erase(it2);
    }
    cout << result << endl;

    ll _result = 0;
    for (int i = 0; i < n; i++)
    {
        auto it = cntPrefSum.lower_bound({t + currSum, -1});
        _result += cntPrefSum.order_of_key(*it);

        currSum += a[i];
        auto it2 = cntPrefSum.lower_bound({currSum, -1});
        if (it2 != cntPrefSum.end() && it2->first == currSum)
            cntPrefSum.erase(it2);
    }
    if (result != _result)
        cerr << "!" << endl;
}