#include <bits/stdc++.h>
#define endl '\n'

//#pragma GCC optimize ("O3")
//#pragma GCC target ("sse4")

using namespace std;
template<class T, class T2> inline int chkmax(T &x, const T2 &y) { return x < y ? x = y, 1 : 0; }
template<class T, class T2> inline int chkmin(T &x, const T2 &y) { return x > y ? x = y, 1 : 0; }
const int MAXN = (1 << 20);

template <class T>
struct fenwick
{
	int sz;
	T tr[MAXN];

	void init(int n)
	{
		sz = n + 1;
		memset(tr, 0, sizeof(tr));
	}

	T query(int idx)
	{
		T ans = 0;
		for(; idx >= 1; idx -= (idx & -idx))
			chkmax(ans, tr[idx]);
		return ans;
	}

	void update(int idx, T val)
	{
		if(idx <= 0) return;
		for(; idx <= sz; idx += (idx & -idx))
			chkmax(tr[idx], val);
	}
};

int n;
int a[MAXN];
vector<int> sorted;

void read()
{
	cin >> n;
	for(int i = 0; i < n; i++)
	{
		int x;
		cin >> x;
		
		a[i] = x;
		sorted.push_back(x);
		sorted.push_back(2 * x);
	}
}

fenwick<int> t;

int get(int x) { return lower_bound(sorted.begin(), sorted.end(), x) - sorted.begin() + 1; }

void solve()
{
	sort(sorted.begin(), sorted.end());
	sorted.erase(unique(sorted.begin(), sorted.end()), sorted.end());

	t.init(sorted.size() + 1);
	for(int i = n - 1; i >= 0; i--)
	{
		int dp = 1 + t.query(get(2 * a[i]));
		t.update(get(a[i]), dp);
	}

	cout << t.query(t.sz) << endl;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	read();
	solve();
	return 0;
}

