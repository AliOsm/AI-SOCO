#include <bits/stdc++.h>
using namespace std;

const int MAX = 1e6 + 10; 
const int OO = 0x3f3f3f3f;
const double EPS = 1e-9; 

#define bug(x) cout << #x << " = " << x << '\n'
#define FOR(i, a, n) for(int i = a; i < n; i++)
#define REP(i, n) FOR(i, 0, n)
#define fi first
#define se second
#define pb push_back
#define mt make_tuple
#define all(vetor) vetor.begin(), vetor.end()
//#define gc getchar_unlocked

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ii, int> iii;

string grid[1005];

int x, y, xx, yy, n, m, k;
bool cor[1005][1005];
int dist[1005][1005];
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

bool check(int l, int r)
{
    if(l >= 0 and l < n and r >= 0 and r < m) return true;
    return false;
}

int solve()
{
    memset(dist, 63, sizeof(dist));
    queue<iii> q;
    q.push({{x, y}, 0});
    dist[x][y] = 0;
    while(!q.empty())
    {
        int l = q.front().fi.fi, r = q.front().fi.se, d = q.front().se;
        q.pop();
        if(xx == l and yy == r) return d;
        if(cor[l][r]) continue;
        for(int j = 0; j < 4; j++)
            for(int i = 1; i <= k; i++)
            {
                int u = l + (dx[j] * i), v = r + (dy[j] * i);
                if(!check(u, v) or grid[u][v] == '#' or dist[u][v] < dist[l][r] + 1) break;
                if(!cor[u][v])
                    dist[u][v] = d + 1, q.push({{u, v}, d + 1});
            }
        cor[l][r] = true;
    }
    return -1;
}

int main()
{
    cin >> n >> m >> k;
    REP(i, n) cin >> grid[i];
    cin >> x >> y >> xx >> yy;
    x--; y--; xx--; yy--;
    cout << solve() << '\n';
    
	return 0;
}