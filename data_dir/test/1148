#include <iostream>
#include <cstring>

#include <string>
#include <vector>
#include <algorithm>

using namespace std;

#define SZ(a) int((a).size())
#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)

typedef long long llong;
typedef vector<int> VI;
typedef vector<VI> VVI;

llong F(llong n) {
   return n*(n+1)/2;
}

llong F(llong a, llong b, llong NN) {
   if (b <= 0) return NN;
   a = max(a, 1LL);
   llong rem = NN - (b-a+1);
   return F(b) - F(a-1) + rem;
}

bool trace;
llong need(llong N, llong M, llong K, llong x) {
   llong nL = K-1;
   llong nR = N-K;
   llong needed = x;
   if (nL > 0) {
      needed += F(x - nL, x-1, nL);
      if (trace)
         cerr << "* L " << nL << ' ' << needed << endl;
   }
   if (nR > 0) {
      needed += F(x - nR, x-1, nR);
      if (trace)
         cerr << "* R " << nR << ' ' << needed << endl;
   }
   return needed;
}

llong solve(llong N, llong M, llong K) {
   if (N == 1)
      return M;

   llong lo = 1, hi = M;

   llong res = -1;
   while (lo <= hi) {
      llong mid = lo + (hi - lo) / 2;
      llong req = need(N, M, K, mid);
      if (req > M) {
         hi = mid - 1;
      } else {
         lo = mid + 1;
         res = mid; 
      }
   }
   return res;
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(NULL);

   int N, M, K;
   cin >> N >> M >> K;

//   cerr << need(N, M, K, 2) << endl;

   llong res = solve(N, M, K);
   cout << res << '\n';

   return 0;
}
