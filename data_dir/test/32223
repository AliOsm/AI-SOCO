#include <bits/stdc++.h>

#define pii pair<int, int>

#define pb push_back
#define mp make_pair

#define f first
#define s second

using namespace std;

typedef long long ll;

const int N = (int) 3e6 + 7;
const int MOD = (int) 1e9 + 9;

int n;
int a[N];

int lp[N];

int m;

int cnt[N];
long long prefix[N];

vector<pii> p;
vector<int> all;

long long s[N];

vector<long long> squares;

inline int calc(const long long &val) {
  return squares.end() - lower_bound(squares.begin(), squares.end(), val);
}

void factorize(int x) {
  p.clear();
  while (x > 1) {
    int y = lp[x];
    int deg = 0;
    while (x % y == 0) {
      deg++;
      x /= y;
    }
    p.pb(mp(y, deg));
  }
}

void gen_divisors(int pos = 0, int cur = 1) {
  if (pos == p.size()) {
    all.pb(cur);
  } else {
    int prod = 1;
    gen_divisors(pos + 1, cur * prod);
    for (int d = 1; d <= p[pos].s; d++) {
      prod *= p[pos].f;
      gen_divisors(pos + 1, cur * prod);
    }
  }
}

int main() {
  #ifdef LOCAL
  freopen("in", "r", stdin);
  #endif

  for (int i = 2; i * i < N; i++) {
    if (!lp[i]) {
      for (int j = i * i; j < N; j += i)
        lp[j] = i;
    }
  }
  for (int i = 2; i < N; i++)
    if (!lp[i]) lp[i] = i;

  scanf("%d", &n);
  for (int i = 1; i <= n; i++) {
    scanf("%d", &a[i]);
    ++cnt[a[i]];
    squares.pb(a[i] * 1ll * a[i]);
  }
  sort(squares.begin(), squares.end());
  for (int i = 1; i < N; i++)
    prefix[i] = prefix[i - 1] + cnt[i];

  for (int x = 1; x < N; x++) {
    factorize(x);
    all.clear();
    gen_divisors();
    s[x] = s[x - 1];
    for (auto y : all)
      s[x] += cnt[y] * (prefix[x / y] - prefix[(x - 1) / y]);
  }

  scanf("%d", &m);
  for (int i = 1; i <= m; i++) {
    int x;
    scanf("%d", &x);
    long long total = n * 1ll * n - s[x - 1] - calc(x);
    printf("%lld\n", total);
  }

  return 0;
}
