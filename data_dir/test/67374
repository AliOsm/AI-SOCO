#include "bits/stdc++.h"
//#include "ext/pb_ds/tree_policy.hpp"
//#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
#define EX0 exit(0);
#define twop(x) (1LL<<x)

typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}

template<typename A,typename B > inline void in(A&x,B&y){in(x);in(y);}
template<typename A,typename B,typename C>inline void in(A&x,B&y,C&z){in(x);in(y);in(z);}
template<typename A,typename B,typename C,typename D> inline void in(A&x,B&y,C&z,D&xx){in(x);in(y);in(z);in(xx);}




template <class T>
void upd(T&a,T&b) {
    a = max(a,b);
}

void modify(int&x){
    x%=5;x+=5;x%=5;
}
struct SegTree{
    static const int maxn = 100010;
    
    struct node{
        int l,r;
        int cnt,shift;
        ll val[5];
        void add(int index,ll v){
            cnt++;
            index-=shift;
            modify(index);
            val[index]+=v;
        }
        void del(int index,ll v){
            cnt--;
            index-=shift;
            modify(index);
            val[index]-=v;
        }
        ll query(int index){
            index-=shift;modify(index);
            return val[index];
        }
        void init(){
            mst(val,0);
        }
        void pr(){
            REP(i,0,5)cout<<val[i]<<' ';
            cout<<endl;
        }
    };
    
    node no[maxn*4];
    void push_up(int ind){
        no[ind].init();
        no[ind].cnt = no[lson].cnt+no[rson].cnt;
        REP(i,0,5)no[ind].val[i]+=no[lson].query(i)+no[rson].query(i);
    }
    void push_down(int ind){
        no[lson].shift+=no[ind].shift;
        no[rson].shift+=no[ind].shift;
        no[ind].shift = 0;
    }
    void build(int l,int r,int ind){
        no[ind].l = l;
        no[ind].r = r;
        if(l == r){
            
        }else{
            int mid = (l+r)/2;
            build(l,mid,lson);
            build(mid+1,r,rson);
            push_up(ind);
        }
    }
    void update(int l,int r,int ind,int val){
        if(l>no[ind].r || r<no[ind].l)return;
        if(l<=no[ind].l && no[ind].r <= r){
            no[ind].shift+=val;
        }else{
            push_down(ind);
            update(l,r,lson,val);
            update(l,r,rson,val);
            push_up(ind);
        }
    }
    void add(int l,int ind,int val,int pos,int a){
        if(l>no[ind].r || l<no[ind].l)return;

        if(l<=no[ind].l && no[ind].r <= l){
            if(a)no[ind].add(pos, val);
            else no[ind].del(pos, val);
        }else{
            push_down(ind);
            add(l,lson,val,pos,a);
            add(l,rson,val,pos,a);
            push_up(ind);
        }
      //  no[ind].pr();
    }
    void query(int l,int r,int ind,int& ans){
        if(l>no[ind].r || r<no[ind].l)return;
        if(l<=no[ind].l && no[ind].r <= r){
            ans+=no[ind].cnt;
        }else{
            push_down(ind);
            query(l,r,lson,ans);
            query(l,r,rson,ans);
            push_up(ind);
        }
    }
};

SegTree tree;
string op[100010];
int val[100010];
vector<int>x;
int main(){
 //   fr("/Users/zhangqingchuan/Desktop/做题/做题/input.txt");
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    int n;cin>>n;
    REP(i,0,n){
        cin>>op[i];
        if(op[i]=="sum"){
            
        }else{
            cin>>val[i];
            x.PB(val[i]);
        }
    }
    sort(all(x));
    complete_unique(x);
    tree.build(0,sz(x), 1);
    REP(i,0,n){
       // dbg(val[i]);
        if(op[i]=="sum"){
            cout<<tree.no[1].val[2]<<endl;
        }else if(op[i]=="add"){
            int ind = LB(all(x),val[i])-x.begin();
            tree.update(ind+1, sz(x), 1, 1);
            int cntB4 = 0;
            tree.query(0, ind-1, 1, cntB4);
            tree.add(ind, 1, val[i], cntB4, 1);
            
        }else{
            //del
            int ind = LB(all(x),val[i])-x.begin();
            tree.update(ind+1, sz(x), 1, -1);
            int cntB4 = 0;
            tree.query(0, ind-1, 1, cntB4);
            tree.add(ind, 1, val[i], cntB4, 0);
        }
     //   dbg("##############");
    }
    return 0;
}
