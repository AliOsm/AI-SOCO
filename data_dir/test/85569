#include<bits/stdc++.h>
using namespace std;
const int N = 100 * 1000 + 20, inf = 1e9;
int a[N], dp1[N], dp2[N], n, dp[N];

void LIS() {
    dp[0] = -inf;
    for (int i = 1; i <= n; i++)
        dp[i] = inf;
    for (int i = 0; i < n; i++) {
        dp1[i] = upper_bound(dp, dp + n, a[i]) - dp;
        dp[upper_bound(dp, dp + n, a[i]) - dp] = a[i];
    }
    return;
}

int main() {
    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
    int m, l, r;
    cin >> m >> n;
    for (int i = 0; i < m; i++) {
        cin >> l >> r;
        a[--l]++;
        a[r]--;
    }
    for (int i = 1; i <= n; i++)
        a[i] = a[i - 1] + a[i];
    LIS();
    for (int i = 0; i < n; i++)
        dp2[i] = dp1[i];
    reverse(a, a + n);
    LIS();
    reverse(dp1, dp1 + n);
    int ans = 0;
    for (int i = 0; i < n; i++)
        ans = max(ans, dp1[i] + dp2[i] - 1);
    return cout << ans << "\n", 0;
}