/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, k, nsz;

ll check(ll x) {
    ll ans = 0;
    ll sz = 0, t = x;
    while (t) {
        sz++;
        t /= 2;
    }
    for (ll i = sz; i < 61; i++) {
        ll N = (1LL << i) - 1;
        if (i > nsz) continue;
        N = min(N, n);
        ll A = (x << (i - sz));
        ans += max(0LL, min((1LL << (i - sz)), N - A + 1));
    }
    return ans;
}

int main() {
    fast_io;

    cin >> n >> k;

    ll t = n;
    while (t) {
        nsz++;
        t /= 2;
    }

    ll ans = 1;
    for (ll i = 1; i < 61; i++) {
        ll l = (1LL << (i - 1)) - 1, r = (1ll << (i));
        while (r - l > 1) {
            ll mid = (l + r) / 2;
            if (check(mid * 2) + check(2 * mid + 1) >= k) l = mid;
            else r = mid;
        }
        if (l != (1LL << (i - 1)) - 1) ans = 2 * l;
        l = (1LL << (i - 1)) - 1, r = (1ll << (i));
        while (r - l > 1) {
            ll mid = (l + r) / 2;
            if (check(2 * mid + 1) >= k) l = mid;
            else r = mid;
        }
        if (l != (1LL << (i - 1)) - 1) ans = max(ans, 2 * l + 1);
    }
    cout << ans << endl;

    return 0;
}
/*

*/
