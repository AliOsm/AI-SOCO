#include<bits/stdc++.h>

using namespace std;

#define FOR(i,j,k) for(int i=j;i<=k;i++)
#define PB push_back
#define MAX 100010


int tot;
struct node
{
    int val, lev;
    char ch;
    node *next[26], *fail, *pa;
    int output;

    node()
    {
        output = 1;
        lev = 0;
        pa = fail = NULL;
        FOR(i,0,25) next[i] = NULL;
    }
};

node *Root;

int ID(char ch)
{
    int v = ch - 'a';
    return v;
}

void in(string str,int p)
{
    node *s = Root;
    int n = str.size();

    FOR(i,0,n-1)
    {
        int x = ID( str[i] );
        if(s->next[x] == NULL)
        {
            s->next[x] = new node();

            s->next[x]->ch = str[i];
            s->next[x]->pa = s;
        }
        s = s->next[x];
    }
    return;
}

queue<node*> que;
stack<node*> stk;
vector<int> shit[MAX];

int bfs(node* p)
{
    que.push( p );

    while(!que.empty())
    {
        p = que.front(); que.pop();
        int C = ID( p->ch ); /// what is my character

        if(p->pa == Root)
        {
            p->fail = Root;
        }
        else
        {
            node *s = p->pa->fail;

            while(true)
            {
                if(s->next[C] != NULL)
                {
                    p->fail = s->next[C];
                    break;
                }
                else if(Root == s)
                {
                    p->fail = s;
                    break;
                }

                s = s->fail;
            }
        }

        stk.push( p );
        FOR(i,0,25)
        {
            if(p->next[i] != NULL)
            {
                ///cout << p->ch << ' ' << p->next[i]->ch << ' ' << p->lev << endl;
                p->next[i]->lev = p->lev + 1;
                que.push( p->next[i] );
            }
        }
    }


    int ret = 0;
    while(!stk.empty())
    {
        p = stk.top(); stk.pop();
       /// cout << p->ch << ' ' << p->lev << ' ' << p->output << endl;

        if(p->lev - p->fail->lev == 1 && p->output)
        {
            p->fail->output = 0;
            ///cout << -1 << endl;
        }
       /// cout << 1 << endl;
        if(p != Root) ret += p->output;
    }

    return ret;
}

string pattern[MAX];

int main()
{
    ios::sync_with_stdio(false);
   /// freopen("in.txt", "r", stdin);
    ///freopen("out.txt", "w", stdout);

    int tc;

    cin >> tc;

    FOR(tt,1,tc)
    {
        Root = new node();
        Root->fail = Root;
        Root->pa = Root;

        int n;

        cin >> n;
        FOR(i,1,n)
        {
            cin >> pattern[i];
            in( pattern[i] , i);
        }

        cout << bfs( Root ) << endl;
    }

    return 0;
}

/*
4
a
in
tin
sting

aastingstinga
*/



