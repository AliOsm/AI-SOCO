#include <bits/stdc++.h>
using namespace std;
#define all(v) ((v).begin()),((v).end())
#define ll long long
#define fastIO cout << fixed << setprecision(12), ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)
double const EPS = 1e-12, PI = acos(-1);
const int N = 2e5 + 9, M = 1e7 + 9, OO = 1e9 + 7, MOD = 1e9 + 7, MOD2 = 998244353;
const ll inf = 1e18;

int arr[N], color[N], vis[N];
vector<int> adj[N];

void dfs(int node, int col) {
	color[node] = col;
	vis[node] = 1;
	for(auto it: adj[node]) {
		if(!vis[it]) {
			int nw = col + 1;
			if(nw > 2) nw = 1;
			dfs(it, nw);
		} else if(color[node] != color[it]) {
			continue;
		} else {
			color[it] = 3;
		}
	}
}

int main() {
	fastIO;
#ifdef LOCAL
//	freopen("input.in", "rt", stdin);
#endif
	int t;
	cin >> t;
	while(t--) {
		int n;
		cin >> n;
		set<int> st;
		for (int i = 0; i < n; ++i) {
			cin >> arr[i];
			vis[i] = 0;
			st.insert(arr[i]);
			color[i] = 1;
			adj[i].clear();
		}
		if((int)st.size() == 1) {
			cout << 1 << '\n';
			for (int i = 0; i < n; ++i)
				cout << 1 << ' ';
			cout << '\n';
			continue;
		}
		for (int i = 0; i < n; ++i) {
			if(arr[i] != arr[(i + 1) % n]) {
				adj[i].push_back((i + 1) % n);
				adj[(i + 1) % n].push_back(i);
			}
		}
		for (int i = 0; i < n; ++i) {
			if(vis[i]) continue;
			dfs(i, 1);
		}
		set<int> kamm;
		for (int i = 0; i < n; ++i)	kamm.insert(color[i]);
		cout << kamm.size() << '\n';
		for (int i = 0; i < n; ++i) cout << color[i] << ' ';
		cout << '\n';
	}
	return 0;
}
