#include<bits/stdc++.h>
using namespace std ;
#define LL int
#define MOD 1000000007LL
#define PI acos(-1.0)
//#define CIN ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)


/*
// Ordered set
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template<typename T> using orderset = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
//orderset<int> s ; //orderset<int>::iterator it ;
//orderset<int> X; //X.insert(1); //X.insert(2); //X.insert(4); //X.insert(8); //X.insert(16);
//cout<<*X.find_by_order(1)<<endl; // 2 //cout<<*X.find_by_order(2)<<endl; // 4 //cout<<*X.find_by_order(4)<<endl; // 16 //cout<<(end(X)==X.find_by_order(6))<<endl; // true
//cout<<X.order_of_key(-5)<<endl;  // 0 //cout<<X.order_of_key(1)<<endl;   // 0 //cout<<X.order_of_key(3)<<endl;   // 2 //cout<<X.order_of_key(4)<<endl;   // 2 //cout<<X.order_of_key(400)<<endl; // 5
*/

LL n,Q,x,Sz;
LL tree[1000006] ;

void Update( int pos , int val ){
    while( pos <= n ){
        tree[pos] += val ;
        pos = pos + ( pos & -pos ) ;
    }
}
LL Query( int pos ){
    LL ret = 0 ;
    while( pos > 0 ){
        ret += tree[pos] ;
        pos = pos - ( pos & -pos ) ;
    }
    return ret ;
}

void Input(){
    scanf("%d",&n) ;
    scanf("%d",&Q) ;
    for( int i = 1  ; i <= n ; i ++ ){
        scanf("%d",&x) ;
        Update( x , 1 ) ;
    }
}

void Calculation(){
    for( int i = 1  ; i <= Q ; i ++ ){
        scanf("%d",&x) ;
        if( x < 0 ){
            x *= -1 ;
            LL left = 1 , right = n , mid , pos ;
            while( left <= right ){
                mid = left + ( right - left ) / 2 ;
                LL tot = Query( mid ) ;
                if( tot >= x ){
                    pos = mid ;
                    right = mid - 1 ;
                }
                else{
                    left = mid + 1 ;
                }
            }
            Update( pos , -1 ) ;
        }
        else{
            Update( x , 1 ) ;
        }
    }
    LL res = 0 ;
    for( int i = 1 ; i <= n ; i ++ ){
        if( tree[i] ){
            res = i ;
            break ;
        }
    }
    printf("%d\n",res) ;

}


void Solve(){
    Input() ;
    Calculation() ;
}

int main()
{

    //CIN;
    int q ;
    q = 1 ;
    //scanf("%d",&q) ;
    //caseno = 0 ;
    while( q-- ){
        //caseno ++ ;
        Solve() ;
    }



    return 0 ;
}
