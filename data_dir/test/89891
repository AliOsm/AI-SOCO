#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <cmath>
#include <cstring>
#include <queue>
#include <stack>
#include <algorithm>
#include <sstream>
using namespace std; 

#define f first
#define s second
#define mp make_pair
#define sz(a) int((a).size()) 
#define pb push_back 
#define all(c) (c).begin(),(c).end() 
#define forit(it,S) for(__typeof(S.begin()) it = S.begin(); it != S.end(); ++it)
#ifdef WIN32
	#define I64d "%I64d"
#else
	#define I64d "%lld"
#endif

typedef pair <int, int> pi;
const int inf = int(2e9 + 2222);
int n, m, d[111111];
vector <pi> e[111111];
vector <int> t[111111];
priority_queue <pi, vector <pi>, greater <pi> > pq;

int main() {
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; ++i) {
		int u, v, c;
		scanf("%d%d%d", &u, &v, &c);
		--u, --v;
		e[u].pb(mp(v, c));
		e[v].pb(mp(u, c));
	}
	for (int i = 0; i < n; ++i) {
		int k, x;
		scanf("%d", &k);
		while (k--) {
			scanf("%d", &x);
			t[i].pb(x);
		}
	}
	for (int i = 1; i < n; ++i)
		d[i] = inf;
	d[0] = 0;
	pq.push(mp(d[0], 0));
	while (!pq.empty()) {
		pi top = pq.top();
		pq.pop();
		int u = top.s;
		if (d[u] < top.f) continue;
		int x = d[u];
		int j = 0;
		while (j < t[u].size() && t[u][j] < x)
			++j;
		while (j < t[u].size() && t[u][j] <= x) {
			x = t[u][j] + 1;
			j++;
		}
		forit (it, e[u]) {
			int v = (*it).f;
			int c = (*it).s;
			if (d[v] > x + c) {
				d[v] = x + c;
				pq.push(mp(d[v], v));
			}
		}
	}
	
	if (d[n - 1] < inf)
		cout << d[n - 1] << endl;
	else
		puts("-1");
	return 0;		
}