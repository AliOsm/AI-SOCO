/*input
10
abcdeabcde
5 5 5 5 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
*/
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define int long long
#define N 1005
// const int INF = 1e18;
const int mod = 1e9 + 7;

int n;
string s;
int cnt[N][30];
int allow[30];
int dp1[N], dp[N];
bool mark[N][N];

bool check(int l, int r) {
	int tmp[26];
	for (int i = 0; i < 26; i++) tmp[i] = cnt[r][i] - cnt[l - 1][i];
	for (int i = 0; i < 26; i++) if (tmp[i] != 0 && r - l + 1 > allow[i]) return false;
	return true;
}

bool valid(int l, int r) {
	return mark[l][r];
}

void prep() {
	for (int i = 0; i < s.size(); i++) {
		for (int j = 0; j < 26; j++) cnt[i + 1][j] = cnt[i][j];
		cnt[i + 1][s[i] - 'a']++;
	}
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= i; j++) mark[j][i] = check(j, i);
}


void solve1() {
	dp1[0] = 1;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= i; j++) {
			if (valid(j, i)) {
				dp1[i] += dp1[j - 1];
				dp1[i] %= mod;
			}
		}
	}
	cout << dp1[n] << endl;
}

void solve2() {
	int ret = 0;
	for (int i = 1; i <= n; i++) for (int j = 1; j <= i; j++) if (valid(j, i)) ret = max(i - j + 1, ret);
	cout << ret << endl;
}
void solve3() {
	memset(dp, 127, sizeof(dp));
	dp[0] = 0;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= i; j++) {
			if (valid(j, i)) {
				dp[i] = min(dp[i], dp[j - 1] + 1);
			}
		}
	}
	cout << dp[n] << endl;
}

signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n;
	cin >> s;
	for (int i = 0; i < 26; i++) cin >> allow[i];
	prep();
	solve1();
	solve2();
	solve3();
}