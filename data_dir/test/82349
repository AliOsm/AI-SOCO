// Charan Sriramula

#include<bits/stdc++.h>
using namespace std;
typedef long double ld;
typedef long long int ll;

const ll lg=22;
const ll N=3e5+5;
const ll INF=1e18;
const ll mod=1e9+7;
const double PI = 3.14159265358979323846;

#define is(n) scanf("%d",&n)
#define io(n) printf("%d\n",n)
#define ls(n) scanf("%lld",&n)
#define lo(n) printf("%lld\n",n)

#define f first
#define s second
#define pb(x) push_back(x)
#define pf(x) push_front(x)
#define mp(x,y) make_pair(x,y)
#define GCD(a,b) __gcd((a),(b))
#define all(v) v.begin(),v.end()
#define bits(x) __builtin_popcount(x)
#define LCM(a,b) ((a)*(b))/GCD((a),(b))
#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);
template<typename T> T power(T x,T y,ll m){T ans=1;while(y>0){if(y&1LL) ans=(ans*x)%m;y>>=1LL;x=(x*x)%m;}return ans%m;}

struct nodex
{
  ll ff;
  ll ss;
};

nodex r[N];
ll maxi=-INF;
multiset<ll> ins;
vector<pair<ll,ll> > g[N];
ll n,m,u,v,w,a[N],node[N];

void DFS(ll cur,ll par,ll val)
{
  ins.insert(val);
  node[cur]=max(val,val-*ins.begin());
  for(ll i=0;i<g[cur].size();i++)
  {
    ll child=g[cur][i].f;
    ll edgewei=g[cur][i].s;
    if(child==par){continue;}
    DFS(child,cur,val+a[child]-edgewei);
  }
  ins.erase(val);
}

ll DFSX(ll cur,ll par)
{
  ll mx=0,my=0;
  for(ll i=0;i<g[cur].size();i++)
  {
    ll child=g[cur][i].f;
    ll edgewei=g[cur][i].s;
    if(child==par){continue;}
    ll mz=DFSX(child,cur)-edgewei;
    if(mz>mx){my=mx;mx=mz;}
    else if(mz>my){my=mz;}
  }
  r[cur].ff=mx;r[cur].ss=my;
  return mx+a[cur];
}

int main()
{
  cin>>n;
  m=n-1;
  for(ll i=1;i<=n;i++){cin>>a[i];}
  while(m--)
  {
    cin>>u>>v>>w;
    g[u].pb(mp(v,w));
    g[v].pb(mp(u,w));
  }
  DFS(1,0,a[1]);
  DFSX(1,0);
  for(ll i=1;i<=n;i++){maxi=max(maxi,max(node[i]+r[i].ff,a[i]+r[i].ff+r[i].ss));}
  cout<<maxi<<endl;
}
