#include<bits/stdc++.h>
using namespace std;

#define scl(x) scanf("%lld",&x)
#define sc(x)  scanf("%d",&x)
#define ll long long
#define lop(i,n) for(int i=0;i<n;++i)
typedef pair<int, int> ii;
typedef pair<ll, ll> pll;

bool isprime(int x){
	for(int i=2;i*i<=x;i++)
		if(x%i==0)
			return 0;
	return 1;
}
/*
 * find some prime number m in the range [n,1.5n]
 * let the sum of degrees = 2*m, with each degree either 2 or 3
 * sum of degree is in range [2*n,3*n]
 * we will have 2*m-2*n nodes with degree 3
 * and n-(2*m-2*n) = 3*n-2*m nodes with degree 2
 *
 * note that number of nodes with degree 3 is even, connect
 * each pair of them with 1 edge, now they are similar to nodes of
 * degree 2
 *
 * a number of nodes with degree 2 can be connected together
 * in the form of a cycle, but be careful not to have neighbours
 * in the same pairs
 */

int n;

int main(){
#ifndef ONLINE_JUDGE
	freopen("i.txt","r",stdin);
#endif
	sc(n);
	int m=n;
	while(!isprime(m))m++;
	printf("%d\n",m);
	for(int i=0;i<2*m-2*n;i+=2)
		printf("%d %d\n",i+1,i+2);
	vector<int> vec;
	for(int i=1;i<=n;i+=2)vec.push_back(i);
	for(int i=2;i<=n;i+=2)vec.push_back(i);
	lop(i,n-1)printf("%d %d\n",vec[i],vec[i+1]);
	printf("%d %d\n",vec[n-1],vec[0]);
}
