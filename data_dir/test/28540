#include <bits/stdc++.h>
using namespace std;

#define F first
#define S second
#define ll long long
#define ld long double
#define vi   vector<int>
#define pii pair<int, int>
#define ull unsigned long long
#define sz(v)  ((int)((v).size()))
#define all(v) ((v).begin()),((v).end())
#define MEM(dp,i) memset(dp ,i, sizeof (dp))
#define repit( cont , i  ) for( auto i : cont)
#define forr(c,x,n)   for(ll c=x;c<=(ll)n; ++c )
#define forrr(c,x,n)  for(ll c=x;c>=( ll )n ;--c )
#define db(x) cout << " LOOK " <<(#x) <<" = " <<  x << '\n'
#define ICPC ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define printarr(a , l , r ) forr ( i , l , r )cout << a[i] << " ";cout<<endl;
#define printarr2(a, n , m) forr ( i , 1 , n){forr ( j , 1, m )cout << a[i][j] << " ";cout<<endl;}

//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);

vector < vector < int >> v;
int n ,  m  , node ;
int dis1[200007] , dis2[200007] ;

void bfs ( int s , bool f )
{

    queue < int > q; q.push(s);
    if ( !f ) dis1[s] = 1 ; else dis2[s] =1 ;
    while ( !q.empty())
    {
        int c = q.front(); q.pop();
        if  ( f)   node = max ( node ,  dis1[c]-1 ) ;
        for ( auto i : v[c] )
        {
            if ( !f )
            {
            if ( !dis1[i]  )
            {
                q.push(i);
                dis1[i] = dis1[c]+1 ;
            }}
            else
            {
            if ( !dis2[i]  && dis2[c]+1 < dis1[i] )
            {
                q.push(i);
                dis2[i] = dis2[c]+1 ;

            }}
        }
    }
}

int main()
{
    cin >> n >> m ; v.resize(n+1);
    forr ( i , 1, n-1 )
    {
        int x , y ; cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }
   bfs(1, 0);  bfs(m ,1);
   cout << node * 2 ;
}

