#define _CRT_SECURE_NO_WARNINGS 1
#include <iostream>
#include <vector>
#include <queue>
#include <functional>
#include <stdio.h>
#include <map>
#include <algorithm>
#include <set>
#include <string>
#include <cstring>
#include <sstream>
#include <cmath>
#include <iomanip>
#include <cstdio>
#include <numeric>
#include <utility>

using namespace std;
typedef long long ll;
#define sc(x)           scanf("%d",&x)
#define sz(v)			(v.size())
#define mem(x,d)		memset(x,d,sizeof(x))
const int dx[] = { 0, -1, 0, 1, -1, -1, 1, 1 };
const int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };
const int N = 1005;
int n, m,par[N],P[N],cnt,Cost; bool v[N];
vector<pair<int, int>>adj[N];
struct Edge
{
	int f, t, c;
	bool operator < (const Edge& x) const
	{
		return c > x.c;
	}
};
void dfs(int cur,int par)
{
	cnt++;
	for (int i = 0; i < sz(adj[cur]); ++i) 
		if (adj[cur][i].first != par) 
			Cost += adj[cur][i].second,dfs(adj[cur][i].first, cur);
}
int main()
{
	//#ifndef ONLINE_JUDGE
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	//#endif
	sc(n); int x,mx = -1,mn = 1e9,start,End;
	priority_queue<Edge>pq;
	mem(par, -1);
	for (int i = 0; i < n; ++i)
	{
		sc(x);
		if (x > mx) mx = x, start = i + 1;
		if (x < mn) mn = x, End = i + 1;
	}
	int y; sc(m);
	for (int i = 0; i < m; ++i)
	{
		sc(x); sc(y); sc(mx);
		pq.push({ x,y,mx });
	}
	while (!pq.empty())
	{
		Edge ne = pq.top(); pq.pop();
		if (par[ne.t] == -1)
		{
			par[ne.t] = ne.f;
			adj[ne.f].push_back({ ne.t,ne.c });
		}
	}
	dfs(start,start);
	if (cnt == n) printf("%d\n", Cost);
	else printf("-1\n");
	return 0;
}