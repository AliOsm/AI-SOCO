// need
#include <iostream>
#include <algorithm>

// data structure
#include <bitset>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#include <complex>
//#include <deque>
#include <valarray>
#include <array>
#include <unordered_map>

// stream
//#include <istream>
//#include <sstream>
//#include <ostream>
#include <fstream>

// etc
#include <cassert>
#include <cmath>
#include <functional>
#include <iomanip>
#include <chrono>
#include <random>
#include <numeric>

// input
#define INIT std::ios::sync_with_stdio(false);std::cin.tie(0);
#define VAR(type, ...)type __VA_ARGS__;MACRO_VAR_Scan(__VA_ARGS__);
template<typename T> void MACRO_VAR_Scan(T& t) { std::cin >> t; }
template<typename First, typename...Rest>void MACRO_VAR_Scan(First& first, Rest&...rest) { std::cin >> first; MACRO_VAR_Scan(rest...); }
#define VEC_ROW(type, n, ...)std::vector<type> __VA_ARGS__;MACRO_VEC_ROW_Init(n, __VA_ARGS__); for(int i=0; i<n; ++i){MACRO_VEC_ROW_Scan(i, __VA_ARGS__);}
template<typename T> void MACRO_VEC_ROW_Init(int n, T& t) { t.resize(n); }
template<typename First, typename...Rest>void MACRO_VEC_ROW_Init(int n, First& first, Rest&...rest) { first.resize(n); MACRO_VEC_ROW_Init(n, rest...); }
template<typename T> void MACRO_VEC_ROW_Scan(int p, T& t) { std::cin >> t[p]; }
template<typename First, typename...Rest>void MACRO_VEC_ROW_Scan(int p, First& first, Rest&...rest) { std::cin >> first[p]; MACRO_VEC_ROW_Scan(p, rest...); }
#define VEC(type, c, n) std::vector<type> c(n);for(auto& i:c)std::cin>>i;
#define MAT(type, c, m, n) std::vector<std::vector<type>> c(m, std::vector<type>(n));for(auto& r:c)for(auto& i:r)std::cin>>i;

// output
#define OUT(d) std::cout<<(d);
#define FOUT(n, d) std::cout<<std::fixed<<std::setprecision(n)<<(d);
#define SOUT(n, c, d) std::cout<<std::setw(n)<<std::setfill(c)<<(d);
#define SP std::cout<<" ";
#define TAB std::cout<<"\t";
#define BR std::cout<<"\n";
#define SPBR(i, n) std::cout<<(i + 1 == n ? '\n' : ' ');
#define ENDL std::cout<<std::endl;
#define FLUSH std::cout<<std::flush;
#define SHOW(d) {std::cerr << #d << "\t:" << (d) << "\n";}
#define SHOWVECTOR(v) {std::cerr << #v << "\t:";for(const auto& xxx : v){std::cerr << xxx << " ";}std::cerr << "\n";}
#define SHOWVECTOR2(v) {std::cerr << #v << "\t:\n";for(const auto& xxx : v){for(const auto& yyy : xxx){std::cerr << yyy << " ";}std::cerr << "\n";}}
#define SHOWQUEUE(a) {auto tmp(a);std::cerr << #a << "\t:";while(!tmp.empty()){std::cerr << tmp.front() << " ";tmp.pop();}std::cerr << "\n";}

// utility
#define ALL(a) (a).begin(),(a).end()
#define FOR(i, a, b) for(int i=(a);i<(b);++i)
#define RFOR(i, a, b) for(int i=(b)-1;i>=(a);--i)
#define REP(i, n) for(int i=0;i<int(n);++i)
#define RREP(i, n) for(int i=int(n)-1;i>=0;--i)
#define FORLL(i, a, b) for(ll i=ll(a);i<ll(b);++i)
#define RFORLL(i, a, b) for(ll i=ll(b)-1;i>=ll(a);--i)
#define REPLL(i, n) for(ll i=0;i<ll(n);++i)
#define RREPLL(i, n) for(ll i=ll(n)-1;i>=0;--i)
#define IN(a, x, b) (a<=x && x<b)
template<typename T> inline T CHMAX(T& a, const T b) { return a = (a < b) ? b : a; }
template<typename T> inline T CHMIN(T& a, const T b) { return a = (a > b) ? b : a; }
#define EXCEPTION(msg) throw std::string("Exception : " msg " [ in ") + __func__ + " : " + std::to_string(__LINE__) + " lines ]"
#define TRY(cond, msg) try {if (cond) EXCEPTION(msg);}catch (std::string s) {std::cerr << s << std::endl;}
void CHECKTIME(std::function<void()> f) { auto start = std::chrono::system_clock::now(); f(); auto end = std::chrono::system_clock::now(); auto res = std::chrono::duration_cast<std::chrono::nanoseconds>((end - start)).count(); std::cerr << "[Time:" << res << "ns  (" << res / (1.0e9) << "s)]\n"; }

// test
template<class T> std::vector<std::vector<T>> VV(int n, int m, T init = T()) {
	return std::vector<std::vector<T>>(n, std::vector<T>(m, init));
}
template<typename S, typename T>
std::ostream& operator<<(std::ostream& os, std::pair<S, T> p) {
	os << "(" << p.first << ", " << p.second << ")"; return os;
}

// type/const
//#define int ll
using ll = long long;
using ull = unsigned long long;
using ld = long double;
using PAIR = std::pair<int, int>;
using PAIRLL = std::pair<ll, ll>;
constexpr int INFINT = 1 << 30;                          // 1.07x10^ 9
constexpr int INFINT_LIM = (1LL << 31) - 1;              // 2.15x10^ 9
constexpr ll INFLL = 1LL << 60;                          // 1.15x10^18
constexpr ll INFLL_LIM = (1LL << 62) - 1 + (1LL << 62);  // 9.22x10^18
constexpr double EPS = 1e-9;
constexpr int MOD = 1000000007;
constexpr double PI = 3.141592653589793238462643383279;

template<class T, size_t N> void FILL(T(&a)[N], const T& val) { for (auto& x : a) x = val; }
template<class ARY, size_t N, size_t M, class T> void FILL(ARY(&a)[N][M], const T& val) { for (auto& b : a) FILL(b, val); }
template<class T> void FILL(std::vector<T>& a, const T& val) { for (auto& x : a) x = val; }
template<class ARY, class T> void FILL(std::vector<std::vector<ARY>>& a, const T& val) { for (auto& b : a) FILL(b, val); }

// ------------>8------------------------------------->8------------


int dy4[] = { -1, 0, 1, 0 };
int dx4[] = { 0, 1, 0, -1 };

signed main() {
	INIT;

	VAR(int, n, k);
	MAT(int, a, 4, n);

	int cnt = 0;

	std::vector<int> ans;
	bool conti = false;
	do {
		conti = false;
		for (int I = 0; I < 4; I += 3) REP(J, n) {
			if (a[I][J] == 0) continue;

			std::vector<std::vector<int>> dist(4, std::vector<int>(n, INFINT));
			dist[I][J] = 0;
			std::queue<PAIR> que({ PAIR(I, J) });
			PAIR okp(-1, -1);
			while (!que.empty()) {
				auto p = que.front(); que.pop();
				REP(d, 4) {
					int dy = p.first + dy4[d];
					int dx = p.second + dx4[d];
					if (!IN(0, dy, 4) || !IN(0, dx, n)) continue;
					if (dist[dy][dx] <= dist[p.first][p.second] + 1) continue;
					if (a[dy][dx] == a[I][J]) {
						dist[dy][dx] = dist[p.first][p.second] + 1;
						okp = PAIR(dy, dx);
						while (!que.empty()) que.pop();
						break;
					}
					if (a[dy][dx] != 0) continue;
					if (dy == 0 || dy == 3) continue;
					dist[dy][dx] = dist[p.first][p.second] + 1;
					que.push(PAIR(dy, dx));
				}
			}
			if (okp.first == -1) continue;
			conti = true;
			++cnt;
			int mark = a[I][J];
			while (okp.first != I || okp.second != J) {
				a[okp.first][okp.second] = a[I][J] = 0;
				REP(d, 4) {
					int dy = okp.first + dy4[d];
					int dx = okp.second + dx4[d];
					if (!IN(0, dy, 4) || !IN(0, dx, n)) continue;
					if (dist[okp.first][okp.second] <= dist[dy][dx]) continue;
					if (dist[dy][dx] >= dist[okp.first][okp.second]) continue;
					ans.emplace_back(mark);
					ans.emplace_back(dy + 1);
					ans.emplace_back(dx + 1);
					okp.first = dy;
					okp.second = dx;
					break;
				}
			}
		}
		if (!conti) { // rotate
			int ny = -1, nx = -1;
			FOR(i, 1, 3) if (ny == -1) REP(j, n) {
				if (a[i][j] == 0) {
					ny = i;
					nx = j;
					break;
				}
			}

			if (ny == -1) break;

			int py = ny, px = nx;
			do {
				int dy = -1, dx = -1;
				if (py == 1) {
					if (px == n - 1) {
						dy = 2; dx = n - 1;
					}
					else {
						dy = 1; dx = px + 1;
					}
				}
				else {
					if (px == 0) {
						dy = 1; dx = 0;
					}
					else {
						dy = 2; dx = px - 1;
					}
				}

				if (a[dy][dx] != 0) {
					ans.emplace_back(a[dy][dx]);
					ans.emplace_back(py + 1);
					ans.emplace_back(px + 1);
				}
				std::swap(a[py][px], a[dy][dx]);
				std::swap(py, dy);
				std::swap(px, dx);
			} while (py != ny || px != nx);

			conti = true;
		}
	} while (ans.size() / 3 <= 20000 && cnt < k);

	if (ans.size() / 3 > 20000 || cnt != k) {
		OUT(-1)BR;
	}
	else {
		OUT(ans.size() / 3)BR;
		REP(i, ans.size()) {
			OUT(ans[i])SPBR(i % 3, 3);
		}
	}

	return 0;
}