#include <bits/stdc++.h>
using namespace std;
const int maxn = 85;
#define LD double

vector<int> all;
int l[maxn], r[maxn];
LD dp[maxn][maxn];
LD ans[maxn][maxn];

int main(){
    int n;
    scanf("%d",&n);

    for(int i=1; i<=n; i++){
        scanf("%d %d",&l[i], &r[i]);
        all.push_back(l[i]);
        all.push_back(r[i]);
    }

    sort(all.begin(), all.end());
    all.erase(unique(all.begin(), all.end()), all.end());

    for(int i=1; i<=n; i++){
        int pre = -1;
        for(int x : all){
            if(pre == -1) {pre = x; continue;}
            int now = x;
            if(r[i] <= pre) {pre = x; continue;}
            if(l[i] >= now) {pre = x; continue;}

            int t = 0;
            int age = 0;
            memset(dp, 0, sizeof(dp)); dp[0][0] = 1;

            for(int j=1; j<=n; j++){
                if(i == j) continue;

                if(r[j] <= pre) age++;
                else if(l[j] >= now);
                else{
                    ++t;
                    LD before = (pre - l[j]) * 1.0L / (r[j] - l[j]);
                    LD after  = (r[j] - now) * 1.0L / (r[j] - l[j]);
                    LD inside = 1 - before - after;
                    for(int u=t; u>=0; u--){
                        for(int v=t-u; v>=0; v--){
                            dp[u][v] *= after;
                            if(u) dp[u][v] += dp[u - 1][v] * before;
                            if(v) dp[u][v] += dp[u][v - 1] * inside;
                        }
                    }
                }
            }

            LD wgt = now - pre;
            wgt /= (r[i] - l[i]);
            for(int u=0; u<=t; u++)
                for(int v=0; v<=t-u; v++)
                    for(int w=0; w<=v; w++)
                        ans[i][age + u + w + 1] += (dp[u][v] / (v + 1)) * wgt;

            pre = now;
        }
    }

    for(int i=1; i<=n; i++){
        for(int p=1; p<=n; p++){
            double curr = ans[i][p];
            printf("%.10f ", curr);
        }
        printf("\n");
    }
}
