#include <bits/stdc++.h>
using namespace std;

#define loop(i,n) for(int i = 0;i < int(n);i++)
#define rloop(i,n) for(int i = int(n);i >= 0;i--)
#define range(i,a,b) for(int i = int(a);i <= int(b);i++)
#define SZ(c) int(c.size())
#define ALL(c) c.begin(), c.end()
#define RALL(c) c.rbegin(), c.rend()
#define PI acos(-1)
#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define sfi1(v) scanf("%d",&v)
#define sfi2(v1,v2) scanf("%d %d",&v1,&v2)
#define sfi3(v1,v2,v3) scanf("%d %d %d",&v1,&v2,&v3)
#define sfll1(v) scanf("%I64d",&v);
#define sfll2(v1,v2) scanf("%I64d %I64d",&v1,&v2)
#define sfll3(v1,v2,v3) scanf("%I64d %I64d %I64d",&v1,&v2,&v3)

typedef vector<int> vi;
typedef vector<pair<int, int> > vii;
typedef long long ll;
typedef pair<int, int> pii;

const int N = 1e9;
int pl, pr, vl, vr, k;
long double ans;
vector<ll> vec;

long double solve(int L, int R, int X, int Y) {
	L = max(L, pl);
	R = min(R, pr);
	X = max(X, vl);
	Y = min(Y, vr);
	if (L > R || X > Y)
		return 0;

	long double a = 1.0 * (R - L + 1) / (pr - pl + 1);
	long double b = 1.0 * (Y - X + 1) / (vr - vl + 1);
	return a * b;
}

void getAns() {
	swap(pl, vl);
	swap(pr, vr);
	for (int i = 1; i < vec.size() - 1 && i + k - 1 < vec.size() - 1; i++) {
		int j = i + k - 1;
		ans += solve(vec[i - 1] + 1, vec[i], vec[j], vec[j + 1] - 1);
	}
}

bool inRange(int x, int y, int a) {
	return x <= a && a <= y;
}

int main() {

#ifndef ONLINE_JUDGE
	//freopen("in.in", "r", stdin);
	//freopen("out.in", "w", stdout);
#endif
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	queue<ll> q;
	vec.push_back(0);
	q.push(4), q.push(7);
	while (!q.empty()) {
		ll u = q.front();
		q.pop();
		vec.pb(u);
		if (u * 10 + 4 < N) {
			q.push(u * 10 + 4);
		}

		if (u * 10 + 7 < N) {
			q.push(u * 10 + 7);
		}

	}

	vec.push_back(N + 5);

	cin >> pl >> pr >> vl >> vr >> k;
	getAns();
	getAns();
	if (k == 1) {
		for (long long nxt : vec) {
			if (inRange(pl, pr, nxt) && inRange(vl, vr, nxt)) {
				long double a = 1.0 / (pr - pl + 1);
				long double b = 1.0 / (vr - vl + 1);
				ans -= a * b;
			}
		}
	}

	cout << fixed << setprecision(12) << ans << endl;

	return 0;
}
