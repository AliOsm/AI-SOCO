/**/
#define _USE_MATH_DEFINES
#include<bits/stdc++.h>
using namespace std;

#define pb push_back
#define For(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define all(v) v.begin(),v.end()
#define V vector
typedef unsigned long long ll;
/***********************************************/
/* Dear MinGW compiler:
 * I've wasted time reading the problem and trying to figure out the solution
 * If there's any syntax error and you've any suggestion, please fix it yourself.
 * I hope my code compile and get accepted. KEE O.o
 *      ____________
 *     /  __        \
 *    /  |  |    __  \
 *   /   |  |   |__|  \
 *  (    |__|          )
 *   \                /
 *    \      ___     /
 *     \____________/
 */
const ll mod = 1000000007;
V<ll> edge;
map<pair<int,int>,int > ind;
class cmp
{
public:
  bool operator() (pair<ll,pair<int,int>>& lhs, pair<ll,pair<int,int>>& rhs) const
  {
	  if(lhs.first != rhs.first)
		  return lhs.first > rhs.first;
	  return edge[ind[{lhs.second.first,lhs.second.second}]] > edge[ind[{rhs.second.first,rhs.second.second}]];
  }
};
int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	int n,m,u,v;
	ll w;
	cin>>n>>m;
	edge.resize(m+1);
	V<V<pair<int,ll> > > graph(n+1);
	V<int> ans;
	ll res = 0;
	For(i,0,m){
		cin>>u>>v>>w;
		edge[i] = w;
		ind[{u,v}] = i;
		ind[{v,u}] = i;
		graph[u].pb({v,w});
		graph[v].pb({u,w});
	}
	cin>>u;
	V<ll> dist(n+1,LLONG_MAX);
	priority_queue<pair<ll,pair<int,int>>,V<pair<ll,pair<int,int>>>,cmp >pq;
	pq.push({0,{u,u}});
	while(!pq.empty()){
		w = pq.top().first;
		int u1 = pq.top().second.first;
		int v1 = pq.top().second.second;
		pq.pop();
		if(dist[v1] <= w)
			continue;
		dist[v1] = w;
		ans.pb(ind[{u1,v1}]);
		For(i,0,graph[v1].size()){
			v = graph[v1][i].first;
			if(v==u1)
				continue;
			ll w1 = graph[v1][i].second;
			if(w1 + w < dist[v]){
				pq.push({w1+w,{v1,v}});
			}
		}
	}
	sort(all(ans));
	For(i,1,ans.size()){
		res += edge[ans[i]];
	}
	cout<<res<<endl;
	For(i,1,ans.size())
	cout<<ans[i]+1<<" \n"[i == ans.size()-1];
	return 0;
}
/**/
