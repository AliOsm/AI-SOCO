/////////////////////////   _LeMur_
#define _CRT_SECURE_NO_WARNINGS
#include <unordered_map>
#include <unordered_set>
#include <functional>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <chrono>
#include <random>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <ctime>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <list>
#include <map>
#include <set>

using namespace std;

const int N = 200005;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;

int t;
int n;

vector < pair<int,int> > g[N];

long long dp[N][3];
int sz[N];

void dfs1(int v,int p){
    sz[v] = 1;
    dp[v][0] = dp[v][1] = 0;

    for(int i=0;i<(int)g[v].size();i++){
        int to = g[v][i].first;
        if(to == p)continue;
        dfs1(to , v);
        sz[v] += sz[to];
    }

    long long d0 = -1 , d1 = -1;
    for(int i=0;i<(int)g[v].size();i++){
        int to = g[v][i].first;
        int len = g[v][i].second;

        if(to == p)continue;

        if(d0 == -1){
            d0 = dp[to][1] + len;
            d1 = dp[to][0];
        }
        else{
            long long old0 = d0 , old1 = d1;

            d0 = min(old0 + dp[to][0] , old1 + dp[to][1] + len);
            d1 = min(old1 + dp[to][0] , old0 + dp[to][1] + len);
        }
    }

    if(d0 == -1){
        dp[v][1] = 0;
        dp[v][0] = inf * 1ll * inf;
    }
    else{
        dp[v][0] = d0;
        dp[v][1] = d1;
    }
}

long long pat;

void dfs2(int v,int p){
    for(int i=0;i<(int)g[v].size();i++){
        int to = g[v][i].first;
        int len = g[v][i].second;

        if(to == p)continue;

        pat += min(sz[to] , n - sz[to]) * 1ll * len;
        dfs2(to , v);
    }
}

void clean(){
    for(int i=1;i<=n;i++){
        g[i].clear();
    }
}

int main(){
    cin >> t;
    while(t--){
        scanf("%d",&n);
        n *= 2;
        for(int i=1;i<n;i++){
            int a , b , t;
            scanf("%d%d%d",&a,&b,&t);
            g[a].push_back(make_pair(b , t));
            g[b].push_back(make_pair(a , t));
        }

        dfs1(1 , -1);
        pat = 0;
        dfs2(1 , -1);

        cout << dp[1][0] << " " << pat << endl;

        clean();
    }
    return 0;
}
