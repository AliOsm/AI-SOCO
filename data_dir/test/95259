#include "bits/stdc++.h"
// #include "ext/pb_ds/assoc_container.hpp"
// #include "ext/pb_ds/tree_policy.hpp"
// using namespace __gnu_pbds;
using namespace std;
typedef long long int ll;
#define int long long
#define pb push_back
#define fi first
#define se second
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define all(x) x.begin(), x.end()
#define IO ios :: sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define pii pair<int,int>
#define sz(x) (int)x.size()
const int mod = 1e9 + 7;
const int mod1 = 998244353;
typedef long double f80;

#ifndef LOCAL
#pragma GCC optimize ("O3")
// #define endl '\n'
#endif

// template<typename T>
// using ordered_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){
    uniform_int_distribution<int> uid(l, r);
    return uid(rng);
}

ll pwr(ll a,ll b){
	a %= mod;
    int ans = 1;
    while(b){
        if(b & 1) ans = (ans * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return ans;
}

string to_string(string s) {
  return '"' + s + '"';
}

string to_string(const char* s) {
  return to_string((string) s);
}

string to_string(bool b) {
  return (b ? "true" : "false");
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

bool between(int x,int y,int z){
	if(x == y) return x == z;
	if(z == x || z == y) return 1;
	cout << "? " << x << " " << z << " " << y << endl;
	string s;
	cin >> s;
	return s == "Yes";
}
int n, k;
bool check_leaf(int x){
	int r = rand(1, n);
	while(r == x) r = rand(1, n);
	fr(i, 1, n){
		if(i != x && between(i, r, x)) return 0;
	}
	return 1;
}
bool check_leaf2(int l, int x, int t){
	int c = 0;
	fr(i, 1, n){
		if(i != x && between(l, i, x)) return 0;
	}
	fr(i, 1, n){
		if(between(l, x, i)) c++;
	}
	return c == t;
}

void solve(){
	cin >> n >> k;
	vector<int> lol;
	fr(i, 1, n){
		lol.pb(i);
	}
	int h = 0, tot = 0, c = 1;
	while(tot < n){
		tot += c;
		c *= k;
		h++;
	}
	h--;
	srand(time(NULL));
	random_shuffle(all(lol));
	int l1;
	for(int x : lol){
		if(check_leaf(x)){
			l1 = x;
			break;
		}
	}
	int l2;
	random_shuffle(all(lol));
	for(int x : lol){
		if(x != l1 && check_leaf2(l1, x, 2 * h + 1)){
			l2 = x;
			break;
		}
	}
	vector<int> v;
	fr(i, 1, n){
		if(i != l1 && i != l2){
			if(between(l1, l2, i))
				v.pb(i);
		}
	}
	vector<int> ans;
	ans.pb(l1);
	ans.pb(l2);
	for(int x : v){
		vector<int> temp;
		temp.pb(l1);
		fr(i, 0, sz(ans) - 2){
			if(between(ans[i], ans[i + 1], x))
				temp.pb(x);
			temp.pb(ans[i + 1]);
		}
		ans = temp;
	}
	cout << "! " << ans[sz(ans) / 2];
}
signed main(){
    IO;
    // #ifdef LOCAL
    //     freopen("inp.txt","r", stdin);
    //     freopen("out.txt", "w", stdout);
    // #endif
    int t = 1;
    // cin >> t;
    fr(tt, 1, t){
        solve();
    }
    return 0;
}