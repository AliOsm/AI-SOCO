#include <bits/stdc++.h>

using namespace std;

const int N = 1e5 + 5;
const int mod = 1e9 + 7;

typedef long long ll;

int n, d[N], up[25][N], k[N], m;
vector<int> g[N];

void dfs(int v, int p) {
    k[v] = 1;
    d[v] = d[p] + 1;
    up[0][v] = p;
    for (int i = 1; i <= 21; i++) {
        up[i][v] = up[i - 1][up[i - 1][v]];
    }
    for (int i = 0; i < g[v].size(); i++) {
        if (p != g[v][i]) {
            dfs(g[v][i], v);
            k[v] += k[g[v][i]];
        }
    }
}

int lca(int a, int b) {
    if (d[a] > d[b])
        swap(a, b);
    for (int i = 21; i >= 0; i--) {
        if (d[up[i][b]] >= d[a])
            b = up[i][b];
    }
    if (a == b)
        return a;
    for (int i = 21; i >= 0; i--) {
        if (up[i][a] != up[i][b])
            a = up[i][a], b = up[i][b];
    }
    return up[0][a];
}

int go(int v, int dst) {
    int u = v;
    for (int j = 21; j >= 0; j--) {
        if (d[u] - d[up[j][v]] < dst) {
            v = up[j][v];
        }
    }
    return v;
}

main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n;
    for (int i = 1; i < n; i++) {
        int u, v;
        cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs(1, 0);
    cin >> m;
    for (int i = 1; i <= m; i++) {
        int x, y;
        cin >> x >> y;
        if (x == y) {
            cout << n << "\n";
            continue;
        }
        if (d[x] != d[y]) {
            if (d[x] > d[y])
                swap(x, y);
            int p = lca(x, y);
            int dst = (d[x] - d[p]) + (d[y] - d[p]);
            if (dst % 2 == 1) {
                cout << "0\n";
                continue;
            }
            dst /= 2;
            int h = go(y, dst);
            cout << k[up[0][h]] - k[h] << "\n";
        } else {
            int p = lca(x, y);
            int h1 = go(x, d[x] - d[p]),
            h2 = go(y, d[y] - d[p]);
            cout << n - k[h1] - k[h2] << "\n";
        }
    }
}
