#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define FILE "skyline"
#define ld long double
#define endl '\n'
//#define int long long
#define pii pair <int, int>

//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;
using namespace __gnu_pbds;

typedef tree <pii,null_type,less<pii>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const int N = 5e5 + 5;
const ll mod = 1e9 + 7;
const ll mod1 = 1e9 + 9;
const int rx[8] = {1, 1, 1, 0, 0, -1, -1, -1};
const int ry[8] = {-1, 0, 1, -1, 1, -1, 0, 1};
const ld pi = acos(-1.0);
const ll kek = 227;
const int B = 350;

map <ll, vector <pii>> all;
ll a[N];
int p[N], sz[N];

ll bp(ll a, ll n) {
    ll res = 1;
    while (n) {
        if (n & 1) {
            res *= a;
            res %= mod;
            --n;
        } else {
            a *= a;
            a %= mod;
            n >>= 1;
        }
    }
    return res;
}

int get(int x) {
    if (x == p[x]) return x;
    return p[x] = get(p[x]);
}

void unite(int x, int y) {
    if (sz[x] < sz[y]) swap(x, y);
    sz[x] += sz[y];
    p[y] = x;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    srand(time(0));
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    // freopen(FILE".in", "r", stdin);
    //  freopen(FILE".out", "w", stdout);
#endif // LOCAL
    int n, m, k;
    cin >> n >> m >> k;
    for (int i = 0; i < n; i++) cin >> a[i];
    for (int i = 0; i < n; i++) p[i] = i, sz[i] = 1;
    for (int i = 0; i < m; i++) {
        int x, y;
        cin >> x >> y;
        x--;
        y--;
        ll cur = a[x] ^ a[y];
        all[cur].pb({x, y});
    }
    ll res = 0;
    ll left = (1ll << k);
    for (auto x : all) {
        left--;
        int cnt = n;
        for (auto y : x.S) {
            int fi = get(y.F);
            int se = get(y.S);
            if (fi != se) {
                unite(fi, se);
                cnt--;
            }
        }
        for (auto y : x.S) {
            p[y.F] = y.F;
            sz[y.F] = 1;
            p[y.S] = y.S;
            sz[y.S] = 1;
        }
        res += bp(2, cnt);
        res %= mod;
    }
    left %= mod;
    res += bp(2, n) * left;
    res %= mod;
    cout << res << endl;
    return 0;
}
