#include <bits/stdc++.h>

using namespace std;

const int N = 1e5 + 5;

int n;
int nodes = 0;
int subtree[N];
set<int> g[N];
vector<int> gc[N];
int root_centroid;
int ans[N];

void dfs(int u, int p) {
	nodes++;
	subtree[u] = 1;
	for (auto v : g[u]) {
		if (v == p) continue;
		dfs(v, u);
		subtree[u] += subtree[v];
	}
}

int centroid(int u, int p) {
	for (auto v : g[u]) {
		if (v == p) continue;
		if (subtree[v] > (nodes / 2))
			return centroid(v, u);
	}
	return u;

}

void decompose(int u, int p) {
	nodes = 0;
	dfs(u, u);
	int v = centroid(u, u);
	if (root_centroid == 0) root_centroid = v;
	else gc[p].push_back(v);
	for (auto w : g[v]) {
		g[w].erase(v);
		decompose(w, v);
	}
}

void dismiss() {
	cout << "Impossible!" << '\n';
	exit(0);
}

void answer(int u, int c) {
	if (c < 0) dismiss();
	ans[u] = c;
	for (auto v : gc[u]) {
		answer(v, c - 1);
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
		
	cin >> n;
	for (int i = 1; i < n; i++) {
		int u, v;
		cin >> u >> v;
		g[u].insert(v);
		g[v].insert(u);
	}
	decompose(1, 1);
	answer(root_centroid, 26);
	for (int i = 1; i <= n; i++) {
		cout << char(27 - ans[i] + int('A') - 1) << (i == n ? '\n' : ' ');
	}

	return 0;
}