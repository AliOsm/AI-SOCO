/**/
#include <bits/stdc++.h>
using namespace std;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compile and get accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;

bool out[41000];
int dist[41000];
vector<int> graph[41000];
int vis[41000];
pair<int,int> nxt[2][210];
int dp[41000];

int dfs(int v) {
	vis[v] = 1;
	int res = INT_MIN;
	if(out[v])
		res = 1;
	for(auto u : graph[v]) {
		if(vis[u] == 1) {
			cerr<<u<<' '<<v<<endl;
			cout<<"Draw\n";
			exit(0);
		}
		if(vis[u] == 2) {
			res = max(res,dp[u] + 1);
		}
		if(vis[u] == 0) {
			res = max(res,dfs(u) + 1);
		}
	}
	vis[v] = 2;
	return dp[v] = res;
}


int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	int h,t,R,N,M,state = 0;
	cin>>h>>t>>R;
	state = h * 201 + t;
	cin>>N;
	for(int i = 1;i <= N;i++) {
		cin>>nxt[0][i].first>>nxt[0][i].second;
	}
	cin>>M;
	for(int i = 1;i <= M;i++) {
		cin>>nxt[1][i].first>>nxt[1][i].second;
	}
	for(int head = 0;head <= R;head++) {
		for(int tail = 0;tail <= R;tail++) {
			if(head + tail == 0)
				continue;
			if(head + tail > R)
				break;
			int nh = min(head,N),nt = min(tail,M);
			int state = head * 201 + tail;
			for(int i = 1;i <= nh;i++) {
				int tohead = head - i + nxt[0][i].first;
				int totail = tail + nxt[0][i].second;
				int tostate = tohead * 201 + totail;
				if(tohead + totail > R) {
					out[state] = true;
				}else {
					graph[state].push_back(tostate);
				}
			}
			for(int i = 1;i <= nt;i++) {
				int tohead = head + nxt[1][i].first;
				int totail = tail - i + nxt[1][i].second;
				int tostate = tohead * 201 + totail;
				if(tohead + totail > R) {
					out[state] = true;
				}else {
					graph[state].push_back(tostate);
				}
			}
		}
	}

	fill(dist,dist + 41000,INT_MAX);
	dist[state] = 0;
	queue<int> bfs;
	bfs.push(state);
	while(!bfs.empty()) {
		int u = bfs.front();
		bfs.pop();
		for(auto v : graph[u]) {
			if(dist[v] <= dist[u] + 1)
				continue;
			dist[v] = dist[u] + 1;
			bfs.push(v);
		}
	}
	if(dist[0] < INT_MAX) {
		cout<<"Ivan\n"<<dist[0];
		return 0;
	}
	int out = dfs(state);
	cout<<"Zmey\n"<<out;
	return 0;
}
/**/
