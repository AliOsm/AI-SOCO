/**
 *    +--+--+--++--++--In the name of ALLAH--++--++--+--+--+
 *
 *    author:  skmonir
 *    created: 09-Jun-2019 20:53:07
**/

#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define mod                 1000000007LL
#define len(x)              (int) x.size()
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = 2e5 + 7;
const int inf = 1e9 + 7;

int col[N];
vector <int> g[N];

void bfs() {
    col[1] = 1;
    queue <int> q;
    q.push(1);
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        for (int v : g[u]) {
            if (col[v] == -1) {
                col[v] = col[u] ^ 1;
                q.push(v);
            }
        }
    }
}

int solve() {
    int n, m; Int(n, m);
    FOR (i, 0, n) {
        col[i] = -1;
        g[i].clear();
    }
    FOR (i, 1, m) {
        int u, v; Int(u, v);
        g[u].push_back(v);
        g[v].push_back(u);
    }

    bfs();

    vector <int> a, b;
    FOR (i, 1, n) {
        if (col[i] == 0) {
            a.push_back(i);
        } else {
            b.push_back(i);
        }
    }

    if (len(a) > len(b)) {
        a = b;
    }

    printf("%d\n", len(a));
    FOR (i, 0, len(a) - 1) {
        printf("%d ", a[i]);
    }
    printf("\n");

    return 0;
}

int main() {
    int tests = 1, CaseNo = 0; Int(tests);
    while (tests--) {
        //printf("Case %d: ", ++CaseNo);
        solve();
    }
    return 0;
}