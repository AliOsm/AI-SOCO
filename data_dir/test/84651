#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> pi;
constexpr int inf = 0x3f3f3f3f;
constexpr double EPS = 1e-30;
constexpr double PI = atan(1) * 4;

template <class T> inline void chmax(T& x, T y) {if (x < y) x = y;}
template <class T> inline void chmin(T& x, T y) {if (x > y) x = y;}
inline int LSB(int i) {return (i & -i);}

constexpr int maxn = 2e5+5;

int n, a[maxn];
vector <int> seg[4*maxn];
ll res;

void build(int node, int left, int right){
    if (left == right){
        seg[node].push_back(a[left]);
        return;
    }

    int mid = (left + right) >> 1;
    build(2*node, left, mid);
    build(2*node + 1, mid + 1, right);
    merge(seg[2*node].begin(), seg[2*node].end(), seg[2*node + 1].begin(), seg[2*node + 1].end(), back_inserter(seg[node]));
}

int query(int node, int left, int right, int ql, int qr, int val){
    if (left > right || left > qr || right < ql || ql > qr) return 0;
    if (ql <= left && right <= qr){
        return seg[node].end() - lower_bound(seg[node].begin(), seg[node].end(), val);
    }

    int mid = (left + right) >> 1;
    return query(2*node, left, mid, ql, qr, val) + query(2*node + 1, mid + 1, right, ql, qr, val);
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);

    cin >> n;
    for (int i = 1; i <= n; i++) cin >> a[i];

    build(1, 1, n);
    for (int i = 1; i <= n; i++){
        if (a[i] >= i){ //'Covers' more than the current season
            res += query(1, 1, n, 1, a[i], i) - 1;
        }
        else res += query(1, 1, n, 1, a[i], i);
    }

    cout << res / 2 << endl;
    return 0;
}
