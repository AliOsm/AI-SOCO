#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <memory.h>
#include <stack>
#pragma comment (linker, "/STACK:667177216")
#define ll long long
#define ull unsigned long long
#define INF 1000000007;
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define vI vector<int>
#define vvI vector<vector<int>>
#define vLL vector<LL>
#define vS vector<string>
#define fori(i, n) for(int (i)=0; (i)<n; (i)++)
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
#define forI(tmp) for(auto(it)=(tmp).begin();(it)!=(tmp).end();(it)++)
#define PI 3.14159265356
#define LD long double
#define sc(a) scanf("%d", &(a))
#define scLL(a) scanf("%I64d", &(a))
typedef long long LL;
using namespace std;
const LL MOD = 1000000000 + 7;
vector<LL> facts;

LL bp(LL a, LL p) {
	if (p == 0) return 1;
	LL res = bp(a, p >> 1);
	res *= res;
	res %= MOD;
	if (p & 1) res *= a;
	res %= MOD;
	return res;
}

LL inv(LL n) {
	return bp(n, MOD - 2);
}

LL getC(int k, int n) {
	return ((facts[n] * inv(facts[k])) % MOD * inv(facts[n - k])) % MOD;
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
	//freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#endif	
	facts.push_back(1);
	LL fact = 1;
	for (LL i = 1; i <= 200000; ++i) {
		fact *= i;
		fact %= MOD;
		facts.push_back(fact);
	}

	LL n;
	scanf("%I64d", &n);
	vector<LL> a(n);
	forn(i, 0, n)scanf("%I64d", &a[i]);
	if (n == 1){ cout<<a[0];return 0;}
	LL mn = 1;
	if (a.size() % 2 != 0) {
		for (int i = 0; i < a.size() - 1; i++) {
			a[i] = a[i] + mn * a[i + 1];
			a[i] %= MOD;
			mn *= -1;
		}
		
		a.pop_back();
	}

	if (a.size() % 4 == 0) {
		int lvl = a.size() / 2 - 1;
		LL ans = 0;
		for (int i = 0; i < a.size(); i += 2) {
			ans += (a[i] * getC(i / 2, lvl)) % MOD;
			ans %= MOD;
			ans -= (a[i + 1] * getC(i / 2, lvl)) % MOD;
			ans %= MOD;
		}

		ans += MOD;
		ans %= MOD;
		cout << ans;
		return 0;
	}
	else {
		int lvl = a.size() / 2 - 1;
		LL ans = 0;
		for (int i = 0; i < a.size(); i += 2) {
			ans += (a[i] * getC(i / 2, lvl)) % MOD;
			ans %= MOD;
			ans += (a[i + 1] * getC(i / 2, lvl)) % MOD;
			ans %= MOD;
		}

		ans += MOD;
		ans %= MOD;
		cout << ans;
		return 0;
	}

	/*int n;
	cin >> n;
	vector<vector<int> > a;
	for (int i = 1; i <= n; ++i) {
		a.push_back(vector<int>() = { i });
	}

	int mn = 1;
	while (a.size() > 1) {
		vector<vector<int> > b;
		
		for (int i = 0; i < a.size() - 1; ++i) {
			vector<int> cur;

			for (int j = 0; j < a[i].size(); ++j) {
				cur.push_back(a[i][j]);
			}

			for (int j = 0; j < a[i + 1].size(); ++j) {
				cur.push_back(mn * a[i + 1][j]);
			}

			b.push_back(cur);
			mn *= -1;
		}

		a = b;
	}

	map<int, int> total;
	forn(i, 0, a[0].size())if (a[0][i] > 0) total[a[0][i]]++; else total[-a[0][i]]--;
	for (auto it : total) {
		cout << it.first << " " << it.second << endl;
	}*/


	return 0;
}