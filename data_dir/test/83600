#include <bits/stdc++.h>
using namespace std;
const int M = 100 * 200002;
#define null 0
int l[M], r[M], cnt[M], sz = 1;
int root[200005];
int getCount(int n) {
	return n == null ? 0 : cnt[n];
}

int copy(int pre) {
	int n = sz++;
	cnt[n] = getCount(pre);
	return n;
}

int getLeft(int n) {
	return (n == null ? null : l[n]);
}

int getRight(int n) {
	return (n == null ? null : r[n]);
}

int update(int pre, int s, int e, int pos) {
	int n = copy(pre);
	if (s == e) {
		cnt[n]++;
		return n;
	}
	int mid = (s + e) >> 1;
	if (pos <= mid) {
		r[n] = getRight(pre);
		l[n] = update(getLeft(pre), s, mid, pos);
	} else {
		l[n] = getLeft(pre);
		r[n] = update(getRight(pre), mid + 1, e, pos);
	}
	cnt[n] = getCount(l[n]) + getCount(r[n]);
	return n;
}

int query(int left, int right, int s, int e, int s1, int e1) {
	if (s > e1 || e < s1)
		return 0;
	int dl = (left == null ? 0 : getCount(left));
	int dr = (right == null ? 0 : getCount(right));
	if (s >= s1 && e <= e1)
		return dr - dl;
	return query(getLeft(left), getLeft(right), s, s + e >> 1, s1, e1)
			+ query(getRight(left), getRight(right), (s + e >> 1) + 1, e, s1,
					e1);
}

int main() {
//	freopen("in.txt", "rt", stdin);
	int n;

	scanf("%d", &n);
	long long ans = 0;
	for (int i = 1; i <= n; ++i) {
		int x;
		scanf("%d", &x);
		int v=getCount(root[min(i-1,x)]);
		ans += (v - query(root[0], root[min(i-1,x)], 0, 1e9, 0, i - 1));
		root[i] = update(root[i - 1], 0, 1e9, x);
	}
	printf("%lld", ans);
}
