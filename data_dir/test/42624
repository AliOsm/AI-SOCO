
#pragma GCC optimize("O3")
#include<queue>
#include <cmath>
#include <complex>
#include<map>
#include <string>
#include<iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <string>
#include <iostream>
#include <stdio.h>
#include<bits/stdc++.h>


/*
#define x real()
#define y imag()
#define angle(a)                (atan2((a).imag(), (a).real()))
#define vec(a,b)                ((b)-(a))
#define same(p1,p2)             (dp(vec(p1,p2),vec(p1,p2)) < EPS)
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel
#define length(a)               (hypot((a).imag(), (a).real()))
#define normalize(a)            (a)/length(a)
//#define polar(r,ang)            ((r)*exp(point(0,ang)))  ==> Already added in c++11
#define rotateO(p,ang)          ((p)*exp(point(0,ang)))
#define rotateA(p,ang,about)  (rotateO(vec(about,p),ang)+about)
#define reflectO(v,m)  (conj((v)/(m))*(m))
*/

#define pi 3.141592654
#define forr(i,a,b) for(int i=a;i<=b;i++)
#define F first
#define S second
#define input ios_base::sync_with_stdio(0);cin.tie(0);


const double PI  = acos(-1.0);
using namespace std;
typedef pair<double,double>pdd;
typedef long long  ll;
typedef pair<ll, ll>pii;
typedef complex<double> point;

//int x[8]={1,0,0,-1,-1,-1,1,1};
//int y[8]={0,1,-1,0,-1,1,-1,1};
const int N=2000007,M=1000000;
const double EPS= 1e-9,eps=-1e9;

int n,m,a[N];
ll k[N],tree[N];

void add(int idx)
{
    for(;idx<=n;idx+=(idx&-idx))tree[idx]++;
}

ll get(int idx)
{
    ll ans=0;
    for(;idx;idx-=(idx&-idx))ans+=tree[idx];
    return ans;
}

 int main()
{
//freopen("travel.in","r",stdin);
//freopen("travel.out","w",stdout);
//__builtin_popcount()
input;


cin>>n>>m;
ll sum=0;
vector<pair<int,int>>v;
forr(i,1,m)
{
    cin>>a[i];
    if(i>1)sum+=abs(a[i]-a[i-1]);
}

forr(i,1,m)
{
    if(i<m)v.push_back({min(a[i],a[i+1]),max(a[i],a[i+1])});
    if(i-1>0)
    {
        if(a[i-1]>a[i])k[a[i]]+=a[i]-1;
        else if(a[i-1]<a[i])k[a[i]]+=a[i-1]-abs(a[i]-a[i-1]);
    }
    if(i+1<=m)
    {
        if(a[i+1]>a[i])k[a[i]]+=a[i]-1;
        else if(a[i+1]<a[i])k[a[i]]+=a[i+1]-abs(a[i]-a[i+1]);
    }
}
sort(v.begin(),v.end());
ll j=0,t=v.size();
forr(i,1,n)
{
    while(j<t&&v[j].F<i)
    {
        add(v[j].S);
        j++;
    }
  //  cout<<j-get(i)<<endl;
    cout<<sum+(ll)k[i]-(j-get(i))<<" ";
}

return 0;
}
