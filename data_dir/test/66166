/*
 * WATCH THIS
 */
#include "bits/stdc++.h"

#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define F first
#define S second

using ll = long long;
using ii = pair<int, int>;

template<class C> void amin(C &a4, C b4) {
	a4 = min(a4, b4);
}
template<class C> void amax(C &a4, C b4) {
	a4 = max(a4, b4);
}

template<class T> ostream &operator<<(ostream& os, vector<T> V) {
	os << "[";
	for (auto vv : V)
		os << vv << ",";
	return os << "]";
}
template<class L, class R> ostream &operator<<(ostream &os, pair<L, R> P) {
	return os << "(" << P.first << "," << P.second << ")";
}
const int N = 1e5 + 5;
const int mod = 1e9 + 7;
/*
 * count numbers
 * where count1 < x
 * and count1 + count2 >= x
 * i want to deduce count 2
 */
int dp[707][707][10][2];
int pwr[707];
string x;
int solve(int idx, int cnt, int target, bool fbound) {
	if (cnt < 0)
		cnt = 0;
	if (idx == 700)
		return cnt == 0;
	int &ret = dp[idx][cnt][target][fbound];
	if (~ret)
		return ret;
	ret = 0;
	for (int digit = 0; digit < 10; digit++)
		if (fbound || (digit + '0') <= x[idx]) {
			ret += solve(idx + 1, cnt - (digit >= target), target,
					fbound | (x[idx] > (digit + '0')));
			if (ret >= mod)
				ret -= mod;
		}
	return ret;
}

int main() {
#ifdef ONLINE_JUDGE
	ios_base::sync_with_stdio(0);
	cin.tie(0);
#endif
	pwr[0] = 1;
	for (int i = 1; i <= 700; i++)
		pwr[i] = pwr[i - 1] * 1ll * 10 % mod;
	cin >> x;
	reverse(x.begin(), x.end());
	while (x.size() < 700)
		x.push_back('0');
	reverse(x.begin(), x.end());
	memset(dp, -1, sizeof dp);
	int ans = 0;
	for (int i = 700; i >= 1; --i) {
		int sv[10] = { };
		for (int j = 1; j < 10; ++j) {
			sv[j] = solve(0, i, j, 0);
			sv[j - 1] -= sv[j];
			if (sv[j - 1] < 0)
				sv[j - 1] += mod;
		}
		for (int j = 1; j < 10; ++j) {
			ans = (ans + 1ll * sv[j] * j % mod * pwr[i - 1] % mod) % mod;
		}
	}

	cout << ans << '\n';

	return 0;
}
