#include <bits/stdc++.h>
using namespace std;

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<ll,ll> pii;
typedef pair<pii, ll> para;
const ll inf = 1e9 + 7;
const ll maxN = 1e6 + 5;
const ll MOD = 1e9 + 7;

string s;
int P[maxN], sz[maxN];
vi graph[maxN];
vector<pii> ans;

void DFS(int s, int par) {
	sz[s]++;
	for (auto v: graph[s]) {
		DFS(v, s);
		sz[s] += sz[v];
	}
}
int main() {
	ios_base::sync_with_stdio(0);
	cin >> s;
	int n = sz(s);
	vector<char> vec(n + 1);
	FORD(i, n - 1, 0) vec[i + 1] = s[i];
	P[1] = 0;
	int t = 0;
	FOR(i, 2, n) {
		while (t > 0 && vec[t + 1] != vec[i]) t = P[t];
		if (vec[t + 1] == vec[i]) t++;
		P[i] = t;
	}
	RI(i, n) {
		graph[P[i]].pb(i);
	}
	DFS(0, -1);
	int len = P[n];
	ans.pb({n, 1});
	while (len > 0) {
		ans.pb({len, sz[len]});
		len = P[len];
	}
	reverse(ans.begin(), ans.end());
	cout << sz(ans) << endl;
	for (auto p: ans) cout << p.st << " " << p.nd << endl;
	return 0;
}
