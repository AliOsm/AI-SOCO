#include <algorithm>
#include <cassert>
#include <iostream>
#include <map>
#include <vector>
using namespace std;

const int INF = 1e9 + 5;

int N;
vector<int> P;
map<vector<int>, int> save;

int solve(int position, int previous, int even, int odd) {
    if (position >= N)
        return 0;

    vector<int> key = {position, previous, even, odd};

    if (save.find(key) != save.end())
        return save[key];

    int answer = INF;

    if (P[position] > 0) {
        answer = (previous != P[position] % 2) + solve(position + 1, P[position] % 2, even, odd);
    } else {
        if (even > 0)
            answer = min(answer, (previous != 0) + solve(position + 1, 0, even - 1, odd));

        if (odd > 0)
            answer = min(answer, (previous != 1) + solve(position + 1, 1, even, odd - 1));
    }

    return save[key] = answer;
}

int main() {
    cin >> N;
    P.resize(N);
    vector<bool> present(N + 1, false);

    for (int &p : P) {
        cin >> p;
        present[p] = true;
    }

    int even = 0, odd = 0;

    for (int i = 1; i <= N; i++)
        if (!present[i]) {
            if (i % 2 == 0)
                even++;
            else
                odd++;
        }

    int answer = min(solve(0, 0, even, odd), solve(0, 1, even, odd));
    cout << answer << '\n';
}
