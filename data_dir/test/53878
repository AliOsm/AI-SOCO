#include<bits/stdc++.h>
#define LL long long
#define fi first
#define se second
#define mk make_pair
#define PII pair<int, int>
#define PLI pair<LL, int>
#define ull unsigned long long
using namespace std;

const int N = 2000 + 7;
const int inf = 0x3f3f3f3f;
const LL INF = 0x3f3f3f3f3f3f3f3f;
const int mod = 1e9 + 7;
const double eps = 1e-8;

char s[N][N];
int n, k, tot, dp[N][N];
bool in[N][N];
char ans[N];

int main() {
    scanf("%d%d", &n, &k);
    for(int i = 1; i <= n; i++)
        scanf("%s", s[i] + 1);

    memset(dp, inf, sizeof(dp));
    dp[1][1] = (s[1][1] == 'a') ? 0 : 1;
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= n; j++) {
            if(i + 1 <= n) dp[i+1][j] = min(dp[i+1][j], dp[i][j]+(s[i+1][j]!='a'));
            if(j + 1 <= n) dp[i][j+1] = min(dp[i][j+1], dp[i][j]+(s[i][j+1]!='a'));
        }
    }
    int ret = 0;
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= n; j++)
            if(dp[i][j] <= k) ret = max(ret, i + j);

    vector<PII> v1, v2;

    if(ret) {
        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= n; j++) {
                if(i + j == ret && dp[i][j] <= k) v1.push_back(mk(i, j));
            }
        }
        for(int i = 1; i <= ret-1; i++) ans[tot++] = 'a';
    } else {
        v1.push_back(mk(1, 1));
        ans[tot++] = s[1][1];
    }

    while(v1.size()) {
        v2.clear();
        char mn = 'z' + 1;
        for(int i = 0; i < v1.size(); i++) {
            int r = v1[i].fi, c = v1[i].se;
            if(r + 1 <= n) mn = min(mn, s[r+1][c]);
            if(c + 1 <= n) mn = min(mn, s[r][c+1]);
        }
        if(mn > 'z') break;
        ans[tot++] = mn;
        for(int i = 0; i < v1.size(); i++) {
            int r = v1[i].fi, c = v1[i].se;
            if(r + 1 <= n && s[r+1][c]==mn && !in[r+1][c])
                in[r+1][c] = 1, v2.push_back(mk(r+1, c));
            if(c + 1 <= n && s[r][c+1]==mn && !in[r][c+1])
                in[r][c+1] = 1, v2.push_back(mk(r, c+1));
        }
        v1 = v2;
    }
    ans[tot] = '\0';
    puts(ans);
    return 0;
}

/*
*/
