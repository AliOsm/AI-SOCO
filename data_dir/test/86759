#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <ctime>
#include <cstring>
#include <queue>
#include <cmath>
#include <map>
#include <algorithm>

using namespace std;

int nextInt() {
    char c;
    int x = 0, p = 1;
    do {
        c = getchar();
    } while (c <= 32);
    if (c == '-') {
        p = -1;
        c = getchar();
    }
    while (c >= '0' && c <= '9') {
        x = x * 10 + c - '0';
        c = getchar();
    }
    return x * p;
}

const int maxn = 1e5 + 5;

bool isPrime(int x) {
    for (int i = 2; i < x; i++)
        if (x % i == 0) return false;
    return true;
}

int dels[66][66], len[66];
int pos[66], pr[66], z, msk[66];
int * mmsk;
int n, b[111];

void factorize(int x, int * dels, int & len, int & mask) {
    len = 0; mask = 0;
    for (int i = 0; pr[i]; i++) {
        int q = pr[i];
        while (x % q == 0) {
            dels[len++] = q;
            x /= q;
            mask |= (1 << pos[q]);
        }
    }
}

const int kPrimes = 17;

const int maxMask = 1 << kPrimes;

vector<int> v[maxMask];
short f[maxMask][105];
short p[maxMask][105];

int main()
{
//    freopen("input.txt", "r", stdin);

    int z = 0;

    for (int i = 2; i <= 60; i++)
        if (isPrime(i)) {
            pos[i] = z;
            pr[z++] = i;
        }

    for (int i = 1; i <= 60; i++)
        factorize(i, dels[i], len[i], msk[i]);

    mmsk = msk;

    memset(f, 255, sizeof(f));

    for (int mask = 0; mask < maxMask; mask++)
        for (int j = 1; j <= 60; j++)
            if ((mask & msk[j]) == 0) v[mask].push_back(j);

    cin >> n;

    for (int i = 0; i < n; i++)
        cin >> b[i];

    f[0][0] = 0;

    for (int i = 0; i < n; i++) {
        for (int mask = 0; mask < maxMask; mask++) {
            if (f[mask][i] == -1) continue;
            for (int j = (int)v[mask].size() - 1; j >= 0; j--) {
                /*if (j == 0) {
                    int qqq = 0;
                    qqq++;qqq--;
                }*/
                int num = v[mask][j];
                int raz = (num > b[i] ? num - b[i] : b[i] - num);
                int nMask = mask ^ msk[num];
                if (f[mask][i] + raz < f[nMask][i + 1] || f[nMask][i + 1] == -1) {
                    f[nMask][i + 1] = f[mask][i] + raz;
                    p[nMask][i + 1] = num;
                }
            }
        }
    }

    int msk = -1;
    int mi = 1e9;

    for (int mask = 0; mask < maxMask; mask++) {
        if (mi > f[mask][n] && f[mask][n] != -1) {
            msk = mask;
            mi = f[mask][n];
        }
    }

    vector<int> answer;

    int len = n;

    while (len != 0) {
        answer.push_back(p[msk][len]);
        msk ^= mmsk[p[msk][len]];
        len--;
    }

    reverse(answer.begin(), answer.end());

    for (size_t i = 0; i < answer.size(); i++)
        cout << answer[i] << ' ';

    cout << '\n';

    return 0;
}
