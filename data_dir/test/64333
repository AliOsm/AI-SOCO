#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <unordered_set>
#include <bitset>


using namespace std;



#define pb push_back
#define pii pair<int, int>
#define mp make_pair
#define ull unsigned long long
#pragma comment(linker, "/STACK:64000000")
#define null NULL
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define fornr(i, n) for (int i = (n); i >= 0; --i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)
#define all(a) a.begin(), a.end()
#define vi vector<int>
#define v(a) vector<a>

//typedef long double ld;
typedef long double ld;
typedef pair<ld, ld> pldld;
typedef long long ll;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;


typedef unsigned int ui;
typedef unsigned char uc;
const int infi = 1e9 + 7;
const ll infl = 2e18 + 7;

/*
template <class T1, class T2>
istream & operator >> (istream &in, pair<T1, T2> a) {
return in >> a.first >> a.second;
}*/

/*
const int MAX_MEM = 9e8;
int mpos = 0;
char mem[MAX_MEM];
inline void * operator new ( size_t n ) {
char *res = mem + mpos;
mpos += n;
assert(mpos <= MAX_MEM);
return (void *)res;
}
inline void operator delete ( void * ) { }

inline void * operator new [] ( size_t ) { assert(0); }
inline void operator delete [] ( void * ) { assert(0); }
*/


ll dp[2010][2010];

void upd(ll &a, ll b) {
	a = min(a, b);
}

ll A[2010];
ll B[2010];

int main() {
	cin.sync_with_stdio(false);
	cin.tie(0);

//	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
	//freopen("delicious.in", "r", stdin);freopen("delicious.out", "w", stdout);
	forn(i, 2010)
		forn(j, 2010)
		dp[i][j] = infl;
	dp[0][0] = 0;
	int n, k;
	ll p;
	cin >> n >> k >> p;
	forn(i, n)
		cin >> A[i];
	forn(i, k)
		cin >> B[i];
	sort(A, A + n);
	sort(B, B + k);
	forn(i, n) {
		forn(j, k) {
			if (dp[i][j] == infl)
				continue;
			upd(dp[i][j + 1], dp[i][j]);
			upd(dp[i + 1][j + 1], max(dp[i][j], abs(B[j] - p) + abs(A[i] - B[j])));
		}
	}
	ll mn = infl;
	forn(i, k + 1)
		upd(mn, dp[n][i]);
	cout << mn;
	return 0;
}