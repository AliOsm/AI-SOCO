#include <iostream>
#include <iomanip>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <map>
#include<unordered_map>
#include <set>
#include<unordered_set>
#include <queue>
#include <stack>
#include <vector>
#include<bitset>
#include<deque>
#include<string>
#include<list>
#include<iterator>
#include<sstream>
#include <algorithm>
#include <math.h>

#define lli long long int
#define ld long double
#define lower(a) transform(a.begin(),a.end(),a.begin(),::tolower);

using namespace std;

const int N = 3e5 + 500;
const long long mod = 1e9 + 7;
const long long cmod = 998244353 ;
const long long inf = 1LL << 61;
const int M = 1e6 + 500;
const lli ths = 1LL << 40;
const int NN = 5e3 + 6;

void pre() {
    return ;
}

lli bit[N], bit2[N];
lli n;

void update(lli idx, lli x) {
    idx ++;
    for(; idx <= n; idx += idx & -idx) {
        bit[idx] += x;
        bit2[idx] ++;
    }
}

vector<lli>  query(lli idx) {
    idx ++;
    lli ans = 0, ans2 = 0;
    for( ; idx ; idx -= idx & -idx) {
        ans += bit[idx];
        ans2 += bit2[idx];
    }
    vector<lli> P(2);
    P[0] = ans;
    P[1] = ans2;
    return P;
}

void solve()
{
    cin>>n;
    vector<pair<lli, lli> > a(n);
    for(int i = 0; i < n; i ++) {
        cin>>a[i].first;
    }
    vector<lli> v;
    for(int i = 0; i < n; i ++) {
        cin>>a[i].second;
        v.push_back(a[i].second);
    }
    sort(v.begin(), v.end());
    sort(a.begin(), a.end());
    lli ans = 0;
    for(int i = 0; i < n; i ++) {
        lli cnt = lower_bound(v.begin(), v.end(), a[i].second) - v.begin();
        vector<lli> X = query(cnt);
        ans += X[1] * a[i].first - X[0];
        update(cnt, a[i].first);
    }
    cout<<ans;
    cout<<'\n';
    return ;
}

/*
*/

int main()
{
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);

//    pre();

    int t = 1;
//    cin>>t;
    while(t --)
    {
        solve();
    }
    return 0;
}
/*
*/
