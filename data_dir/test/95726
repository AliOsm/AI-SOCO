#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     (_obj).begin(), (_obj).end()
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define CeilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifdef SHJ_LOCAL
#define debug(_x)                     std::cerr << (#_x) << " = " << (_x) << '\n' << std::flush;
#else
#define debug(_x)                     {}
#endif
#define endl "\n"
template<typename Tp>
inline void outarr(Tp _begin, Tp _end, const char* _delim = " ") {
    for (Tp current = _begin; current != _end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = long long;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
vector<ll> Factorize(ll x) {
    vector<ll> res;
    if ((x & 1) == 0) {
        do {
            x >>= 1;
        } while ((x & 1) == 0);
        res.push_back(2);
    }
    for (ll i = 3; i * i <= x; i += 2) {
        if (x % i == 0) {
            do {
                x /= i;
            } while (x % i == 0);
            res.push_back(i);
        }
    }
    if (x > 1) {
        res.push_back(x);
    }
    return res;
}

bool HasBit(int x, int b) {
    return (x >> b) & 1;
}

ll F(ll x) {
    const auto facts = Factorize(x);
    const int full_mask = 1 << sz(facts);
    ll res = x - 1;
    for (int mask = 1; mask < full_mask; ++mask) {
        ll d = 1;
        loop(sz(facts)) {
            if (HasBit(mask, i)) {
                d *= facts[i];
            }
        }
        if (__builtin_popcount(mask) & 1) {
            res -= (x - 1) / d;
        } else {
            res += (x - 1) / d;
        }
    }
    return res;
}

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    ll n, k;
    cin >> n >> k;
    k = CeilDiv(k, 2);
    while (k-- > 0 && n > 1) {
        n = F(n);
    }
    cout << n % MOD << endl;

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}
