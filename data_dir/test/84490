#include <bits/stdc++.h>

#define x0 abc
#define y0 ABC
#define x1 abcd
#define y1 ABCD
#define xn abcde
#define yn ABCDE

#define l_b lower_bound
#define u_b upper_bound

#define fi first
#define se second
#define m_p make_pair

#define p_b push_back
#define po_b pop_back

#define ld long double
#define ll long long

#define MAXLL 1000000000000000000LL
#define MAXINT 2000000000

#define MINLL -1000000000000000000LL
#define MININT -2000000000

#define P acos(-1)

#define endl '\n'

#define OUT cout << "-------" << endl;

using namespace std;

vector <ll> v[350001];

ll one, two, a[350001], b[350001], n, m, i, j, z, t, k, l, ans;

bool pole[350001], x;

    ll mod(ll a)
    {
        return a % 998244353;
    }

    ll st(ll a, ll b)
    {
        if (b == 0)
        return 1LL;

        ll c = st(a, b / 2);

        if (b % 2 != 0)
        return mod(mod(a * c) * c);
        else return mod(c * c);
    }

    void dfs(ll nom, ll deep)
    {
        ll i;

        pole[nom] = true;

        k++;

        a[k] = nom;

        b[nom] = deep % 2;

        if (deep % 2 != 0)
        l++;

        for (i = 0; i < v[nom].size(); i++)
            if (!pole[v[nom][i]]) dfs(v[nom][i], deep + 1);
    }

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> t;

    while (t--) {
        cin >> n >> m;

        for (i = 1; i <= n; i++) {
            v[i].clear();

            pole[i] = false;
        }

        for (i = 1; i <= m; i++) {
            cin >> one >> two;

            v[one].p_b(two);

            v[two].p_b(one);
        }

        ans = 1;

        for (z = 1; z <= n; z++)
            if (!pole[z]) {
                k = l = 0;

                dfs(z, 1);

                x = true;

                for (i = 1; i <= k; i++)
                    for (j = 0; j < v[a[i]].size(); j++)
                        if (b[a[i]] == b[v[a[i]][j]]) x = false;

                if (!x)
                ans = 0;

                ans = mod(ans * (st(2LL, l) + st(2LL, k - l)));
            }

        cout << ans << endl;
    }

    return 0;
}
