#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace __gnu_pbds;
using namespace std;
typedef tree<pair<int,int> ,null_type,less<pair<int,int> >,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
long long MOD = 1e9+7;
pair<int,int> dx[4] = {{1,0},{-1,0},{0,1},{0,-1}};
long long fastpow(long long x,long long k)
{
    if(!k)
        return 1;
    if(k & 1)
        return ((x * fastpow(x,k-1) % MOD) % MOD) % MOD;
    long long ans = fastpow(x,k/2);
    ans %= MOD;
    ans *= ans;
    ans %= MOD;
    return ans;
}
long long sumF(long long x)
{
    int s = 0;
    while(x)
        s += x%10,x /= 10;
    return s;
}
vector<int> edgeList[200005];
int color[200005];
int mx = 0;
void DFS(int idx,int p)
{
    vector<int> col;
    int c = 0;
    for(int i = 1;i <= mx && c < (int)edgeList[idx].size();i++)
    {
        if(i == color[idx])
            continue;
        if(p != -1 && color[p] == i)
            continue;
        c++;
        col.push_back(i);
    }
    for(int i = 0;i < edgeList[idx].size();i++)
    {
        if(p == edgeList[idx][i]) continue;
        color[edgeList[idx][i]] = col.back(),col.pop_back();
    }
    for(int i = 0;i < edgeList[idx].size();i++)
    {
        int tNode = edgeList[idx][i];
        if(tNode == p)
            continue;
        DFS(tNode,idx);
    }
}
int main()
{
    int n;
    cin >> n;
    for(int i = 1;i <= n-1;i++)
    {
        int u,v;
        scanf("%d %d",&u,&v);
        edgeList[u].push_back(v);
        edgeList[v].push_back(u);
        mx = max(mx,(int)edgeList[u].size() + 1);
        mx = max(mx,(int)edgeList[v].size() + 1);
    }
    color[1] = 1;
    DFS(1,-1);
    cout << mx << endl;
    for(int i = 1;i <= n;i++)
        printf("%d ",color[i]);
    return 0;
}
