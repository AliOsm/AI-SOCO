#include<queue>
#include <cmath>
#include <complex>
#include<map>
#include <string>
#include<iostream>
#include<bits/stdc++.h>


#define pi 3.141592654
#define forr(i,a,b) for(int i=a;i<=b;i++)
#define F first
#define S second
#define input ios_base::sync_with_stdio(0);cin.tie(0);


using namespace std;
typedef pair<double,double>pdd;
typedef long long  ll;
typedef pair<ll, ll>pii;
typedef complex<double> point;
//template<typename T>T gcd(T x, T y) { if(y == 0)return x; else return gcd(y, x%y); }
//typedef bitset<30> mask;
//int x[8]={1,0,0,-1,-1,-1,1,1};
//int y[8]={0,1,-1,0,-1,1,-1,1};
//#define var(x) ((x)<<1)
//#define nvar(x) ((x)^1)
const int N=500005,M=1000000;
const double EPS= 1e-9;
int n,r,c,num[7000008],k[21][1000005],v[21][1000005];
string a[1000006];
string s;


 int main()
{
//freopen("travel.in","r",stdin);
//freopen("travel.out","w",stdout);
input;

cin>>n>>r>>c;
forr(i,1,n)
{
    cin>>a[i];
    s+=a[i];
    if(i!=n)s+=' ';
}

int cnt=0;
for(int i=0;i<(int)s.size();i++)
{
    if(i==0||s[i]==' ')++cnt;
    num[i]=cnt;
}



for(int i=0;i<(int)s.size();i++)
{
    if(i==0||s[i-1]==' ')
    {
        if(i+c<(int)s.size()){k[0][num[i]]=num[i+c]-num[i];if(k[0][num[i]])v[0][num[i]]=num[i+c];}
        else k[0][num[i]]=num[(int)s.size()-1]-num[i]+1;
    }
}


forr(j,1,20)
forr(i,1,n)
{
  k[j][i]=k[j-1][i]+k[j-1][v[j-1][i]];
  v[j][i]=v[j-1][v[j-1][i]];
}

int ans=0,st=0;

forr(i,1,n)
{
    int t=r,val=0,p=i;
    for(int j=20;j>-1;j--)
        if(t>=(1<<j)&&k[j][p]){
            val+=k[j][p],t-=(1<<j);
            p=v[j][p];
        }
    if(val>ans)
    {
        ans=val;
        st=i;
    }
}
cnt=0;
for(int i=st;i<st+ans;i++)
{
    if(cnt+(int)a[i].size()<c)cout<<a[i]<<" ";
    else if(cnt+(int)a[i].size()==c)cout<<a[i];
    else{
        cnt=0,cout<<endl;
        r--;
        if(!r)break;
        if(cnt+(int)a[i].size()<c)cout<<a[i]<<" ";
        else if(cnt+(int)a[i].size()==c)cout<<a[i];
    }
    cnt+=(int)a[i].size()+1;
}

return 0;
}
