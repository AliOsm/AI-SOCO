#include <bits/stdc++.h>
 
using namespace std;
 
#define x first
#define y second
#define mp make_pair
#define pb push_back
#define sqr(a) ((a) * (a))
#define sz(a) int(a.size())
#define all(a) a.begin(), a.end()
#define forn(i, n) for(int i = 0; i < int(n); i++) 
#define fore(i, l, r) for(int i = int(l); i < int(r); i++)
 
typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
 
template <class A, class B> ostream& operator << (ostream& out, const pair<A, B> &a) {
	return out << "(" << a.x << ", " << a.y << ")";
}
 
template <class A> ostream& operator << (ostream& out, const vector<A> &v) {
	out << "[";
	forn(i, sz(v)) {
		if(i) out << ", ";
		out << v[i];
	}
	return out << "]";
}
 
mt19937 rnd(time(NULL));
 
const int INF = int(1e9);
const li INF64 = li(1e18);
const int MOD = INF + 7;
const ld EPS = 1e-9;
const ld PI = acos(-1.0);

const int N = 5000 + 7;
const int M = 100 * 1000 + 13;

int n, m;
int a[N];
pt q[M];

bool read() {
	if (scanf("%d", &n) != 1)
		return false;
	forn(i, n)
		scanf("%d", &a[i]);
	scanf("%d", &m);
	forn(i, m){
		scanf("%d%d", &q[i].x, &q[i].y);
		--q[i].x, --q[i].y;
	}
	return true;
}

int ans[N][N];

int calc(){
	vector<int> tmp1, tmp2;
	forn(i, n - 1)
		tmp1.pb(a[i] ^ a[i + 1]);
	forn(_, n - 2){
		tmp2.clear();
		forn(j, sz(tmp1) - 1)
			tmp2.pb(tmp1[j] ^ tmp1[j + 1]);
		tmp1 = tmp2;
	}
	return tmp1[0];
}

void solve() {	
	forn(i, n)
		ans[i][i] = a[i];
	fore(len, 1, n)
		forn(i, n - len + 1)
			ans[i][i + len] = ans[i][i + len - 1] ^ ans[i + 1][i + len];
	fore(len, 1, n)
		forn(i, n - len + 1)
			ans[i][i + len] = max({ans[i][i + len], ans[i][i + len - 1], ans[i + 1][i + len]});
	forn(i, m){
		int l = q[i].x, r = q[i].y;
		printf("%d\n", ans[l][r]);
	}
}
 
int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
 
	int tt = clock();
 
#endif
 
	cerr.precision(15);
	cout.precision(15);
	cerr << fixed;
	cout << fixed;
	
#ifdef _DEBUG
	while (read()) {	
#else
	if (read()) {
#endif
		solve();
 
#ifdef _DEBUG
	cerr << "TIME = " << clock() - tt << endl;
	tt = clock();
#endif
 
	}
}