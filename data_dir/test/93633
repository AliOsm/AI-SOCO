#include <algorithm>
#include <string.h>
#include <stdio.h>
#include <iostream>
#include <vector>
#include <queue>
#include <cmath>
#include <set>
#include <map>
#include <stack>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const int inf = 0x3f3f3f3f;
const ll oo = 0x3f3f3f3f3f3f3f3fll;
const double eps = 1e-6;

const int N = 100010;
const int M = 5010;

#define pb push_back
#define sz(x) ((x).size())

int n, m, q, hash[N], Hash[N], dp[510][N], color[N];
ll ans[N], rest[N], a[N];
vector<int> vt[N];

void cal(int x){
	int t = hash[x];
	for(int i = 0; i < sz(vt[t]); i++)
		color[vt[t][i]] = x;
	for(int i = 1; i <= m; i++){
		for(int j = 0; j < sz(vt[i]); j++){
			if(color[vt[i][j]] != x) continue;
			dp[x][i]++;
		}
	}
}

int main(){
	scanf("%d%d%d", &n, &m, &q);
	for(int i = 1; i <= n; i++)
		scanf("%I64d", &a[i]);
	int cnt = 0;
	for(int i = 1; i <= m; i++){
		int k = 0;
		scanf("%d", &k);
		for(int j = 0; j < k; j++){
			int x;
			scanf("%d", &x);
			vt[i].pb(x);
			ans[i] += a[x];
		}
		if(k <= 300) continue;
		hash[++cnt] = i;
		Hash[i] = cnt;
	}
	for(int i = 1; i <= cnt; i++)
		cal(i);
	for(int j = 0; j < q; j++){
		char s[11];
		scanf("%s", s);
		if(s[0] == '?'){
			int k;
			scanf("%d", &k);
			ll sum = 0;
			if(sz(vt[k]) <= 300){
				for(int i = 1; i <= cnt; i++)
					sum += rest[hash[i]] * dp[i][k];
				for(int i = 0; i < sz(vt[k]); i++)
					sum += a[vt[k][i]];
			}
			else{
				sum = ans[k];
				for(int i = 1; i <= cnt; i++)
					sum += rest[hash[i]] * dp[i][k];
			}
			cout << sum << endl;
		}
		else{
			int k, x;
			scanf("%d%d", &k, &x);
			if(sz(vt[k]) <= 300){
				for(int i = 0; i < sz(vt[k]); i++){
					a[vt[k][i]] += x;
				}
				for(int i = 1; i <= cnt; i++){
					ans[hash[i]] += 1ll * dp[i][k] * x;
				}
			}
			else{
				rest[k] += x;
			}
		}
	}
	return 0;
}