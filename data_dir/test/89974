#include <bits/stdc++.h>

using namespace std;

using ll = long long;

const int N = 3500;
const int fun = 1e9;

vector <int> a[N];
map <pair<int, int>, set<int>> er;

int d[N][N];

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
#ifdef arrias
    freopen("true.txt", "r", stdin);
#endif
    int n, m, k;
    cin >> n >> m >> k;
    for (int i = 0; i < m; ++i) {
        int x, y;
        cin >> x >> y;
        a[x].push_back(y);
        a[y].push_back(x);
    }
    for (int i = 0; i < k; ++i) {
        int x, y, z;
        cin >> x >> y >> z;
        er[{x, y}].insert(z);
    }
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
            d[i][j] = fun;
        }
    }
    d[1][1] = 0;
    queue <pair<int, int>> q;
    q.push({1, 1});
    while (!q.empty()) {
        auto fr = q.front();
        q.pop();
        int u = fr.first;
        int v = fr.second;
        for (int to : a[v]) {
            if (er[{u, v}].count(to)) continue;
            if (d[v][to] > d[u][v] + 1) {
                d[v][to] = d[u][v] + 1;
                q.push({v, to});
            }
        }
    }
    int res = fun, node = -1;
    for (int i = 1; i <= n; ++i) {
        if (d[i][n] < res) {
            node = i;
            res = d[i][n];
        }
    }
    if (res == fun) {
        cout << -1;
        return 0;
    }
    vector <int> ans;
    ans.push_back(n);
    int x = node, y = n;
    while (true) {
        ans.push_back(x);
        if (x == 1) break;
        for (int i = 1; i <= n; ++i) {
            if (d[i][x] + 1 == d[x][y]) {
                y = x;
                x = i;
                break;
            }
        }
    }
    cout << ans.size() - 1 << "\n";
    for (int i = ans.size() - 1; i > -1; --i) {
        cout << ans[i] << " ";
    }
    return 0;
}