/*input
3 4 2 2
1 10 3 59

*/
#include <bits/stdc++.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define __builtin_popcount __builtin_popcountll
#define bit(x,y) ((x>>y)&1LL)
#define loop(i,l,r) for(int i=(int)l; i<=(int)r; i++)
#define rloop(i,l,r) for(int i=(int)l; i>=(int)r; i--)
//const int N=;
template <class T1, class T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &a) {
	return os << '(' << a.first << ", " << a.second << ')';
}
template <class T>
ostream &operator<<(ostream &os, const vector<T> &a) {
	os << '[';
	for (unsigned int i = 0; i < a.size(); i++)
		os << a[i] << (i < a.size() - 1 ? ", " : "");
	os << ']';
	return os;
}
struct Data {
	int pos, val;
	Data(int _pos, int _val): pos(_pos), val(_val) {};
};

int n, m, h, w;
int g[3000 * 3005];
int a[3005][3005];
int p[3005][3005];

signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	cin >> n >> m >> h >> w;
	int X, Y, Z;
	cin >> g[0] >> X >> Y >> Z;
	loop(i, 1, n * m) g[i] = (1LL * g[i - 1] * X + Y) % Z;
	loop(i, 1, n) {
		loop(j, 1, m) {
			a[i][j] = g[(i - 1) * m + j - 1];
		}
	}
	// loop(i, 1, n) {
	// 	loop(j, 1, m) {
	// 		cout << a[i][j] << sp;
	// 	}
	// 	cout << endl;
	// }
	// cout << endl;
	loop(row, 1, n) {
		deque<Data> dq; // pos,val
		auto add = [&](Data now) {
			while (!dq.empty() && now.pos - dq.front().pos + 1 > w) dq.pop_front();
			while (!dq.empty() && dq.back().val >= now.val) dq.pop_back();
			dq.push_back(now);
		};
		loop(col, 1, m) {
			add(Data(col, a[row][col]));
			p[row][col] = dq.front().val;
			// cout << p[row][col] << sp;
		}
		// cout << endl;
	}
	long long ans = 0;
	loop(col, w, m) {
		deque<Data> dq; // pos,val
		auto add = [&](Data now) {
			while (!dq.empty() && now.pos - dq.front().pos + 1 > h) dq.pop_front();
			while (!dq.empty() && dq.back().val >= now.val) dq.pop_back();
			dq.push_back(now);
		};
		loop(row, 1, n) {
			add(Data(row, p[row][col]));
			if (row >= h) ans += dq.front().val;
		}
	}
	cout << ans << endl;
}