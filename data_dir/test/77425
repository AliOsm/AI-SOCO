// ~/SolverToBe/Developers/Corvus
// ~/sudo apt-get verdict Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <functional>
#include <assert.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

const int N = 200005, M = 505;
const ll MOD = 1e9 + 7;
const double eps = 1e-9;

ll T;

ll fast_power(ll b, ll n) {
	if (n == 0) return 1;
	if (n == 1) return b;
	if (n % 2 == 1) return (b * fast_power(b, n - 1)) % MOD;
	ll r = fast_power(b, n / 2);
	return (r*r) % MOD;
}

ll sumEven(ll n) {
	n %= MOD;
	return (n*((n + 1) % MOD)) % MOD;
}

ll sumOdd(ll n) {
	n %= MOD;
	return (n*n) % MOD;
}

ll Log(ll n) {
	for (ll i = 0; i <= 60; i++) {
		if ((1ll << i) == n)
			return i;
		if ((1ll << i) > n)
			return i - 1;
	}
	return 0;
}

ll calc(ll x) {
	ll odd = 0, even = 0;
	for (ll l = 0; l <= 60 && x > 0; l++) {
		if (l % 2 == 0) odd += min(x, 1ll << l);
		else even += min(x, 1ll << l);
		x -= (1ll << l);
	}
	return (sumOdd(odd) + sumEven(even)) % MOD;
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif
	T = fast_power(2, MOD - 2);
	ll l, r;
	scanf("%lld%lld", &l, &r);
	ll ans = calc(r);
	if (l != 1) ans = (ans - calc(l - 1) + MOD) % MOD;
	printf("%lld\n", ans);
	return 0;
}