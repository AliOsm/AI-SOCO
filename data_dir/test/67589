#include <bits/stdc++.h>
using namespace std;

struct Node{
	int id, val;
	Node(){
		
	}
	Node(int _id, int _val){
		id = _id;
		val = _val;
	}
};

const int N = 3e5 + 10;

int a[N], _hash[N];
vector <int> v[N];
set <Node> s;

bool operator <(Node p, Node q){
	if (p.val == q.val) return p.id < q.id;
	return p.val < q.val;
}

int main(){
	int n, m, x, y;
	long long ans;
	set <Node>::iterator it;
	scanf("%d %d",&n,&m);
	for (int i = 1; i <= n; i++){
		scanf("%d",&a[i]);
		_hash[a[i]] = i;
	}
	for (int i = 1; i <= m; i++){
		scanf("%d %d",&x,&y);
		if (_hash[x] > _hash[y]) swap(x, y);
		v[_hash[x]].push_back(_hash[y]);
		s.insert(Node(i, _hash[y]));
	}
	ans = 0;
	for (int i = 1; i <= n; i++){
		if (s.empty()) ans += n - i + 1;
		else ans += (s.begin()->val) - i;
		for (int j = 0; j < v[i].size(); j++){
			it = s.lower_bound(Node(0, v[i][j]));
			s.erase(it);
		}
	}
	printf("%I64d\n",ans);
	return 0;
}