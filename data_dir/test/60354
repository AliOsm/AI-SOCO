#include <iostream>
#include <cstdio>
#include <string>
#include <algorithm>
#include <cctype>
#include <cstring>
#include <vector>
#include <sstream>
#include <set>
#include <ctime>
#include <queue>
#include <map>
#include <stack>
#include <cmath>
using namespace std;
typedef long long LL;
const int N = 1005;
const int MOD = 1000000007;
struct Edge {
	int v , w , next;
}e[N << 1];
int start[N] , tot , n , m;
int st , ed , t[N] , c[N] , in[N];
LL dist[N][N] , dp[N];
void add (int u , int v , int w) {
	e[tot].v = v;e[tot].w = w;e[tot].next = start[u];
	start[u] = tot ++;
}
void spfa (int s) {
	memset (dist[s] , 0x11 , sizeof (dist[s]));
	dist[s][s] = 0;
	queue <int> que;
	memset (in , 0 , sizeof (in));
	que.push (s);
	in[s] = 1;
	while (!que.empty ()) {
		int u = que.front ();que.pop ();
		for (int i = start[u] ; i != -1 ; i = e[i].next) {
			int v = e[i].v , w = e[i].w;
			if (dist[s][v] > dist[s][u] + w) {
				dist[s][v] = dist[s][u] + w;
				if (!in[v]) {
					in[v] = 1;
					que.push (v);
				}
			}
		}
		in[u] = 0;
	}
}
void gao (int s) {
	memset (dp , 0x11 , sizeof (dp));
	dp[s] = 0;
	queue <int> que;
	memset (in , 0 , sizeof (in));
	que.push (s);in[s] = 1;
	while (!que.empty ()) {
		int u = que.front ();que.pop ();
		for (int i = 1 ; i <= n ; i ++) {
			if (u != i) {
				LL d = dist[u][i];
				if (d <= t[u]) {
					if (dp[i] > dp[u] + c[u]) {
						dp[i] = dp[u] + c[u];
						if (!in[i]) {
							in[i] = 1;
							que.push (i);
						}
					}
				}
			}
		}
		in[u] = 0;
	}
}
int main(){
#ifndef ONLINE_JUDGE
    freopen ("input.txt" , "r" , stdin);
    // freopen ("output.txt" , "w" , stdout);
#endif
    memset (start , -1 , sizeof (start));
    scanf ("%d %d" , &n , &m);
    scanf ("%d %d" , &st , &ed);
    for (int i = 0 ; i < m ; i ++) {
    	int u , v , w;
    	scanf ("%d %d %d" , &u , &v , &w);
    	add (u , v , w);
    	add (v , u , w);
    }
    for (int i = 1 ; i <= n ; i ++) {
    	scanf ("%d %d" , t + i , c + i);
    }
    for (int i = 1 ; i <= n ; i ++) {
    	spfa (i);
    }
    gao (st);
    if (dp[ed] == 0x1111111111111111) dp[ed] = -1;
    printf ("%I64d\n" , dp[ed]);
    return 0; 
}