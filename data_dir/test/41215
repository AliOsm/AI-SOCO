#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int MAX = 2e5 + 5;
const ll INF = (ll) 1e18;
ll arr[MAX];
vector<int> candidates[5];
int n, k, b, c;

inline ll calc(int from, int to) {
	if(from <= to) {
		return 1LL * (to - from) * c;
	}
	return 1LL * ((to + 5) - from) * c;
}

int main() {
	scanf("%d %d %d %d", &n, &k, &b, &c);
	fori(i, 1, n + 1) {
		scanf("%lld", arr + i);
		arr[i] += (ll) 1e9;
		fori(j, 0, 5) {
			candidates[(arr[i] + j) % 5].push_back(arr[i] + j);
		}
	}

	sort(arr + 1, arr + n + 1);

	b = min(b, 5 * c);
	ll ans = INF;
	fori(md, 0, 5) {
		sort(candidates[md].begin(), candidates[md].end());
		candidates[md].erase(unique(candidates[md].begin(), candidates[md].end()), candidates[md].end());
		ll sum = 0;	
		priority_queue<ll> pq;
		int ptr = 1;
		fori(j, 0, candidates[md].size()) {
			while(ptr <= n && arr[ptr] <= candidates[md][j]) {
				ll exc = 1LL * (arr[ptr] / 5);
				ll prev_guy = exc * 5 + md;
				if(prev_guy < arr[ptr]) {
					exc++;
				}
				ll val = calc(arr[ptr] % 5, md) - exc * b;
				sum += val;
				pq.push(val);
				ptr++;
			}
			while((int) pq.size() > k) {
				sum -= pq.top(); pq.pop();
			}
			if((int) pq.size() == k) {
				ll cur = sum + 1LL * (candidates[md][j] / 5) * b * k;	 
				ans = min(ans, cur);
			}
		}
	}
	printf("%lld\n", ans);

	return 0;
}

