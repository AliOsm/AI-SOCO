#include "omp.h"
#include <iostream>
#include <iomanip>
#include <string>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <vector>
#include <cassert>
#include <fstream>
#include <algorithm>
#include <list>
#include <random>
#include <ctime>
#include <random>
#include <bitset>
#include <unordered_set>
#include <cassert>
#include <list>
#include <functional>


using namespace std;

typedef long long ll;
typedef long double ld;


const int sze = 1 << 17, INF = 1e9 + 10;



signed main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, k;
	cin >> n >> k;

	vector<int> values(n), used(n);
	for (int i = 0; i < n; ++i)
		cin >> values[i];

	sort(values.begin(), values.end());

	for (int i = 1; i < n; ++i)
	{
		int ind = i - 1;
		while (ind >= 0 && !used[ind] && values[i] > values[ind] && values[i] <= values[ind] + k)
		{
			used[ind] = 1;
			ind--;
		}
	}

	int ans = 0;
	for (int i = 0; i < n; ++i)
	{
		if (!used[i])
			ans++;
	}

	cout << ans;
	return 0;
}
