#include <bits/stdc++.h>
using namespace std;

using ll = long long;
using ii = pair<int,int>;
const int N = 2e5+10;
const int oo = 1e9;

int n, m;
vector<int> g[N], h[N];
int k, p[N];

int vis[N], dist[N], way[N];
priority_queue<ii, vector<ii>, greater<ii>> q;

void dijkstra(int src) {
	q.push({0, src});
	for(int i = 1; i <= n; i++) dist[i] = oo;
	dist[src] = 0;

	while(!q.empty()) {
		auto U = q.top(); q.pop();
		int u = U.second, cw = U.first;
		for(int v : g[u]) {
			if(dist[v] > cw + 1) {
				dist[v] = cw + 1;
				q.push({cw + 1, v});
			}
		}
	}
}

int lo, hi;
void go(int i) {
	if(i == k - 1) return;
	int u = p[i];
	int isShort = 0, cnt = 0;
	for(int v : h[u]) {
		if(dist[v] == dist[u] - 1) {
			cnt++;
			if(v == p[i + 1]) isShort = 1;
		}
	}
	if(isShort) {
		if(cnt > 1) hi++;
	}
	else {
		lo++, hi++;
	}
	go(i + 1);
}

int main() {
	scanf("%d %d", &n, &m);
	for(int i = 0; i < m; i++) {
		int u, v; scanf("%d %d", &u, &v);
		g[v].push_back(u);
		h[u].push_back(v);
	}	
	scanf("%d", &k);
	for(int i = 0; i < k; i++)
		scanf("%d", &p[i]);
	dijkstra(p[k - 1]);
	go(0);
	printf("%d %d\n", lo, hi);
	return 0;
}