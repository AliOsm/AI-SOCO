#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define forq(i , a , b) for (int i = (a); i <= (b); ++i)
#define forr(i , b) forq( i , 0 , b - 1 )
#define F first
#define S second
#define IF -> F
#define IS -> S
#define qqmemset(array , val) memset (array , val , sizeof(array))
#define ALLV(vect) vect.begin() , vect.end()
#define mid (st + en) / 2
#define lef 2 * Node
#define rig lef + 1
#define Parent Node + (Node & (~Node + 1))
#define Neig Node - (Node & (~Node + 1))

ll R = 7 + 1e9 , NUMTESTCASE ;
const int NN = 10 + 5e6  ;
const double pi = acos(-1.0) ;
int di [4] = {1 , 0 , -1 , 0} , dj [4] = {0 , 1 , 0 , -1} , DI [8] = {1 , 1 , 0 , -1 , -1 , -1 , 0 , 1} , DJ [8] = {0 , 1 , 1 , 1 , 0 , -1 , -1 , -1} ;
using namespace std;
bool sieve [NN] ;
ll Pref [NN] ;
int dsu [NN] ;
int Get (int x){
    if (x <= 1 ) return 0 ;
    if (Pref [x]) return Pref [x] ;
    return 1 + Get(x / dsu [x]) ;
}
int main()
{
    qqmemset(sieve , true) ;
    forq (p , 2 , NN - 1) {
        if (sieve [p]) {
            for (int j = p ; j < NN ; j += p)
                dsu [j] = min(dsu[j] + NN * (dsu[j] == 0) , p) , sieve [j] = false ;
        }
    }
    forq (i , 1 , NN - 1) Pref [i] = Get (i) ;
    forq (i , 1 , NN - 1) Pref [i] += Pref [i - 1] ;
    int t , a , b ; cin >> t ;
    while (t --) {
        scanf("%d%d" , &a , &b) ;
        printf("%I64d\n" , Pref [a] - Pref [b]) ;
    }
    return 0;
}
