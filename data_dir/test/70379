# include <bits/stdc++.h>

using namespace std;

vector < vector <int> > nxt;

int check(string a, string b) {
    int n = a.size(), m = b.size();
    a = ' ' + a;
    b = ' ' + b;
    vector < vector <int> > dp(m + 2, vector <int> (n + 2, 1e9));
    dp[0][0] = 0;
    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= n; j++) {
            if (dp[i][j] >= 1e5) continue;
            if (i + 1 <= m) {
                dp[i + 1][j] = min(dp[i + 1][j], nxt[ b[i + 1] - 'a' ][ dp[i][j] + 1 ]);
            }
            if (j + 1 <= n) {
                dp[i][j + 1] = min(dp[i][j + 1], nxt[ a[j + 1] - 'a' ][ dp[i][j] + 1 ]);
            }
        }
    }
    return dp[m][n];
}

void solve() {
    string s, t;
    cin >> s >> t;
    vector < vector <int> > new_next(26, vector <int>(s.size() + 2, 1e9));
    nxt = new_next;
    int n = s.size();
    s = ' ' + s;
    for (int i = n; i >= 1; i--) {
        for (int j = 0; j < 26; j++)
            nxt[j][i] = nxt[j][i + 1];
        nxt[ s[i] - 'a' ][i] = i;
    }
    int p = nxt[ t[0] - 'a' ][1];
    for (int i = 1; i < t.size(); i++) {
        string a, b;
        for (int j = 0; j < i; j++) {
            a += t[j];
        }
        for (int j = i; j < t.size(); j++) {
            b += t[j];
        }
        if (check(a, b) <= n) {
            puts("YES");
            return ;
        }
        if (p <= n) {
            p = nxt[ t[i] - 'a' ][p + 1];
        }
    }
    if (p <= n) {
        puts("YES");
    } else {
        puts("NO");
    }
}

int main() {
//    ios::sync_with_stdio(false);
//    cin.tie(0);
    int tests = 1;
    cin >> tests;
    while (tests--) {
        solve();
    }
}
