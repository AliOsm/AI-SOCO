#include <cstdlib>
#include <iostream>
#include <map>
#include <stdio.h>
#include <vector>
#include<bits/stdc++.h>
#include <ctype.h>
#include <list>
#include <stack>
#include <queue>
#include <string.h>
#include <iomanip>
#include <string>
#include <algorithm>
#include <cmath>
#define _CRT_SECURE_NO_DEPRECATE
#define INF 1000000000
#define Set(a, s) memset(a, s, sizeof (a))
#define ALL(x) x.begin() , x.end()
#define UNIQUE(c) (c).resize(unique(ALL(c))-(c).begin())
#define lp(i,n) for (int i=0 ; i<n ; i++)
#define lpn(i,n) for (int i=n ;i>=0 ;i--)
#define upcase(x) transform(x.begin(), x.end(), x.begin(), ::toupper)
#define locase(x) transform(x.begin(), x.end(), x.begin(), ::tolower)
#define findIndex(v,x) find(v.begin(), v.end(), x) - v.begin()
#define PI 3.14159265358979323846
#define pf printf
#define CLR(a) memset(a,0,sizeof(a))
#define FILL(a,v) memset(a,v,sizeof(a))
#define SSTR( x ) dynamic_cast< std::ostringstream & >( \
       ( std::ostringstream() << std::dec << x ) ).str()
#define mp(x,y) make_pair(x,y)
#define s second
#define f first


using namespace std;

typedef long long ll;
typedef std::pair<int,int> ii;
typedef std::pair<std::string,int> si;
typedef vector<int> vi;
typedef vector<ii> vii;

unsigned power( unsigned val, unsigned _pow=0 ) {
  if ( _pow <= 0 )
    return 1;
  return val * power( val, _pow-1 );
}
int str2int (const string &str) {
  stringstream ss(str);
  int num;
  if((ss >> num).fail())
  {
      //ERROR
  }
  return num;
}
/*bool operator<(const state& lhs, const state& rhs){
  return lhs.dist > rhs.dist;
}*/

class test{
public:
  int x, y;
  test(int a, int b){
    x = a;
    y = b;
  }
};

class UnionFind {                                              // OOP style
private:
  vi p, rank, setSize;                       // remember: vi is vector<int>
  int numSets;
public:
  UnionFind(int N) {
    setSize.assign(N, 1); numSets = N; rank.assign(N, 0);
    p.assign(N, 0); for (int i = 0; i < N; i++) p[i] = i; }
  int findSet(int i) { return (p[i] == i) ? i : (p[i] = findSet(p[i])); }
  bool isSameSet(int i, int j) { return findSet(i) == findSet(j); }
  void unionSet(int i, int j) { 
    if (!isSameSet(i, j)) { numSets--; 
    int x = findSet(i), y = findSet(j);
    // rank is used to keep the tree short
    if (rank[x] > rank[y]) { p[y] = x; setSize[x] += setSize[y]; }
    else                   { p[x] = y; setSize[y] += setSize[x];
                             if (rank[x] == rank[y]) rank[y]++; } } }
  int numDisjointSets() { return numSets; }
  int sizeOfSet(int i) { return setSize[findSet(i)]; }
};


//int dx[]={-1,1,0,0,1,1,-1,-1};
//int dy[]={0,0,1,-1,1,-1,1,-1};

  ll arr1 [100001] , arr2 [100001];
   int n , m; 
   long long f(long num)
  {
    ll ans = 0;
    for(int i =0 ; i < n ; ++i)
    {
      if(arr1[i] >=num) continue;
      else ans += abs(num - arr1[i]);
    }
    for(int i =0 ; i < m ; ++i)
    {
      if(arr2[i] <=num) continue;
      else ans += abs(num - arr2[i]);
    }
    
    return ans;
      
  }

int main() {
  
  //freopen("omar.txt","r",stdin);
  //freopen("C.out","w",stdout);

  
  
    cin>>n>>m;
   
    for(int i = 0 ; i < n ; ++i) cin>>arr1[i];
    for(int i = 0 ; i < m ; ++i) cin>>arr2[i];
    sort(arr1,arr1+n);sort(arr2,arr2+m);
    
    ll left = arr1[0] , right = arr2[m-1];
    while(right - left > 3)
    {
      ll g = left + (right-left)/3 , h = left + 2*(right - left) /3;
      if(f(g)<f(h))
        right = h;
      else left = g;
    }
    
    ll ans = f(left);
    for(ll i = left +1 ; i <= right ; ++i)
      if(f(i)<ans)
        ans = f(i);
    cout<<ans;
  



  return 0;
}