#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             2e16
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>


#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())


#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);

vector<pii>G[100005];
int dp[100005],Xor[100005];

int rec(int n)
{
     int answer = 1e9;
     for(int i = 0;i < G[n].size();i++){
        int st = G[n][i].first;
        int ed = G[n][i].second + st - 1;
        int x = Xor[ed] ^ Xor[st-1];
        if(x == 0)answer = min(answer,G[n][i].second);
    }
    return answer;
}
int main()
{
    MEM(dp,-1);

    for(int i = 1;i <= 100000;i++){
        for(int j = i,sum = i;sum <= 100000;j++,sum += j){
            if(j-i+1>=2)G[sum].push_back(mk(i,j-i+1));
        }
    }

    for(int n = 1;n <= 100000;n++){
        set<int>ST;
        for(int i = 0;i < G[n].size();i++){
            int st = G[n][i].first;
            int ed = G[n][i].second + st - 1;
            int x = Xor[ed] ^ Xor[st-1];
            ST.insert(x);
        }
        for(int i = 0; ;i++){
            if(ST.find(i) == ST.end()){
                dp[n] = i;
                break;
            }
        }
        Xor[n] = Xor[n-1] ^ dp[n];
    }

    int n;
    cin >> n;

    if(dp[n] == 0){
        cout << -1 << endl;
        return 0;
    }
    cout << rec(n) << endl;

}
