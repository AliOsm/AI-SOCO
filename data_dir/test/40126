#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds ;
#define ll long long
#define ld long double
#define pp pair<ll,ll>
#define rep(i,a,b) for(ll i=a;i<b;i+=1)
#define all(c) (c).begin(),(c).end()
#define pb push_back
#define sz(a) int((a).size())
#define present(c,x) ((c).find(x) != (c).end())
#define mp make_pair
#define hell 1000000007
#define F first
#define S second
#define sll(x) scanf("%lld",&x)
#define si(x) scanf("%d",&x)
typedef tree<pp , null_type , less<pp> , rb_tree_tag , tree_order_statistics_node_update > ordered_set ;
ll t=1;
const ll N = 100005 ;
ll n , x , y , w ;
set<pair<ll,ll> > v[N] ;
map<pair<ll,ll> , ll > wt ;
vector<ll> a(N,0) , val( N , -1e15 ) , vis( N , 0 ) , rem( N , 0 ) , p(N,0) ;
void dfs( ll x , ll par ){
    p[x]=par;
    if(par)
    {
        val[x] = max( val[x] , val[par] + wt[{x,par}] ) ;
        val[x] = max( val[x] , wt[{x,par}] ) ;
        if(val[x]>a[x])
        {
            rem[x]=1;
        }
    }
    for(auto it : v[x] )
    {
        if( it.F != par )
        {
            dfs( it.F , x ) ;
        }
    }
}
ll dfs2( ll x , ll par ){
    if( vis[x] )
        return 0 ;
    vis[x]=1;
    ll xx = 1 ;
    for(auto it : v[x] )
    {
        if(it.F!=par)
            xx+=dfs2(it.F,x);
    }
    return xx ;
}
void solve()
{
    cin >> n ;
    rep( i , 1 , n + 1 )
        cin >> a[i] ;
    rep( i , 2 , n + 1 ){
        cin >> x >> y ;
        v[i].insert({x,y});
        v[x].insert({i,y});
        wt[{x,i}]=y;
        wt[{i,x}]=y;
    }
    //val[1]=0;
    dfs(1,0);
    x = 0 ;
    rep( i , 2 , n + 1 ){
        if(rem[i])
            x+=dfs2( i , p[i] ) ;
    }
    cout << x  ;
}
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    //cin>>t;
    while(t--)
        solve() ;
    return 0 ;
}
