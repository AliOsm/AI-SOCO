#include <stdio.h>
#include <math.h>
#include <string.h>
#include <limits.h>
#include <stdlib.h>
#include <algorithm>
#include <iostream>
#include <utility>
#include <vector>
#include <string>
#include <unordered_map>
#include <map>
#include <queue>
#include <set>
#include <stack>

using namespace std;

#define long long long
#define fi first
#define se second
typedef pair<int,int> ii;

const int INF = 2e9+10;
int n, m;
ii tree[800003][10];

ii best(ii a, ii b)
{
	int mx = 0, mx2 = 0;
	if(a.fi < b.fi)
	{
		mx = a.fi;
		mx2 = min(a.se, b.fi);
	}
	else
	{
		mx = b.fi;
		mx2 = min(b.se, a.fi);
	}
	return {mx, mx2};

}

void update(int pos, int kir, int kan, int d, int idx, int val)
{
	if(kir == idx && kan == idx)
		tree[pos][d] = {val,INF};
	else if(kan < idx || kir > idx) return;
	else
	{
		int mid = (kir+kan)/2;
		update(pos*2, kir, mid, d, idx, val);
		update(pos*2+1, mid+1, kan, d, idx, val);
		tree[pos][d] = best(tree[pos*2][d], tree[pos*2+1][d]);
	}
}

ii query(int pos, int kir, int kan, int d, int qkir, int qkan)
{
	if(qkir <= kir && kan <= qkan) return tree[pos][d];
	else if(kan < qkir || qkan < kir) return {INF,INF};
	else
	{
		int mid = (kir+kan)/2;
		return best(query(pos*2, kir, mid, d, qkir, qkan),
					query(pos*2+1, mid+1, kan, d, qkir, qkan));
	}
}

int main()
{
	// ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	// freopen("input.in", "r", stdin);

	scanf("%d %d", &n, &m);
	for(int i = 1; i <= n; i++)
	{
		int x; scanf("%d", &x);
		int temp = x;
		for(int j = 0; j < 10; j++)
		{
			if(temp%10)
				update(1, 1, n, j, i, x);
			else
				update(1, 1, n, j, i, INF);
			temp /= 10;
		}
	}
	while(m--)
	{
		int t, x, y;
		scanf("%d %d %d", &t, &x, &y);
		if(t == 1)
		{
			int temp = y;
			for(int i = 0; i < 10; i++)
			{
				if(temp%10)
					update(1, 1, n, i, x, y);
				else
					update(1, 1, n, i, x, INF);
				temp /= 10;
			}
		}
		else
		{
			int mx = INF;
			for(int i = 0; i < 10; i++)
			{
				ii ans = query(1, 1, n, i, x, y);
				if(ans.se != INF) mx = min(mx, ans.fi+ans.se);
				
				// printf("%d|%d ", query(1, 1, n, i, x, y).fi, query(1, 1, n, i, x, y).se); printf("\n");
			}
			printf("%d\n", (mx == INF)? -1 : mx);
		}
	}
}








