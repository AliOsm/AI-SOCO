#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <assert.h>
#include <tuple>

const int kB = 8;
std::string f[1 << kB][3];
using Node = std::tuple<std::string, int, int>;
std::priority_queue<Node, std::vector<Node>, std::greater<Node>> pq;
std::string table[1 << kB] = {
"!x&x",
"!(x|y|z)",
"!x&!y&z",
"!x&!y",
"!x&!z&y",
"!x&!z",
"!(!y&!z|x|y&z)",
"!(x|y&z)",
"!x&y&z",
"!(!y&z|!z&y|x)",
"!x&z",
"!(!z&y|x)",
"!x&y",
"!(!y&z|x)",
"!x&(y|z)",
"!x",
"!y&!z&x",
"!y&!z",
"!(!x&!z|x&z|y)",
"!(x&z|y)",
"!(!x&!y|x&y|z)",
"!(x&y|z)",
"!(!x&!y|x&y|z)|!x&!y&z",
"!((x|y)&z|x&y)",
"!x&y&z|!y&!z&x",
"!x&y&z|!y&!z",
"!x&z|!y&!z&x",
"!x&z|!y&!z",
"!x&y|!y&!z&x",
"!x&y|!y&!z",
"!x&(y|z)|!y&!z&x",
"!x|!y&!z",
"!y&x&z",
"!(!x&z|!z&x|y)",
"!y&z",
"!(!z&x|y)",
"!x&!z&y|!y&x&z",
"!x&!z|!y&x&z",
"!x&!z&y|!y&z",
"!x&!z|!y&z",
"!x&y&z|!y&x&z",
"!(!x&z|!z&x|y)|!x&y&z",
"!(x&y)&z",
"!(!z&x|y)|!x&z",
"!x&y|!y&x&z",
"!(!y&z|x)|!y&x&z",
"!x&y|!y&z",
"!x|!y&z",
"!y&x",
"!(!x&z|y)",
"!y&(x|z)",
"!y",
"!x&!z&y|!y&x",
"!x&!z|!y&x",
"!x&!z&y|!y&(x|z)",
"!x&!z|!y",
"!x&y&z|!y&x",
"!(!x&z|y)|!x&y&z",
"!x&z|!y&x",
"!x&z|!y",
"!x&y|!y&x",
"!(!x&!y&z|x&y)",
"!x&(y|z)|!y&x",
"!x|!y",
"!z&x&y",
"!(!x&y|!y&x|z)",
"!x&!y&z|!z&x&y",
"!x&!y|!z&x&y",
"!z&y",
"!(!y&x|z)",
"!x&!y&z|!z&y",
"!x&!y|!z&y",
"!x&y&z|!z&x&y",
"!(!x&y|!y&x|z)|!x&y&z",
"!x&z|!z&x&y",
"!(!z&y|x)|!z&x&y",
"!(x&z)&y",
"!(!y&x|z)|!x&y",
"!x&z|!z&y",
"!x|!z&y",
"!z&x",
"!(!x&y|z)",
"!x&!y&z|!z&x",
"!x&!y|!z&x",
"!z&(x|y)",
"!z",
"!x&!y&z|!z&(x|y)",
"!x&!y|!z",
"!x&y&z|!z&x",
"!(!x&y|z)|!x&y&z",
"!x&z|!z&x",
"!(!x&!z&y|x&z)",
"!x&y|!z&x",
"!x&y|!z",
"!x&(y|z)|!z&x",
"!x|!z",
"!y&x&z|!z&x&y",
"!(!x&y|!y&x|z)|!y&x&z",
"!y&z|!z&x&y",
"!(!z&x|y)|!z&x&y",
"!y&x&z|!z&y",
"!(!y&x|z)|!y&x&z",
"!y&z|!z&y",
"!(!y&!z&x|y&z)",
"!x&y&z|!y&x&z|!z&x&y",
"!(!x&y|!y&x|z)|!x&y&z|!y&x&z",
"!(x&y)&z|!z&x&y",
"!(!z&x|y)|!x&z|!z&x&y",
"!(x&z)&y|!y&x&z",
"!(!y&x|z)|!x&y|!y&x&z",
"!(x&y)&z|!z&y",
"!x|!y&z|!z&y",
"!(y&z)&x",
"!(!x&y|z)|!y&x",
"!y&z|!z&x",
"!y|!z&x",
"!y&x|!z&y",
"!y&x|!z",
"!y&(x|z)|!z&y",
"!y|!z",
"!(y&z)&x|!x&y&z",
"!(!x&y|z)|!x&y&z|!y&x",
"!(x&y)&z|!z&x",
"!x&z|!y|!z&x",
"!(x&z)&y|!y&x",
"!x&y|!y&x|!z",
"!x&y|!y&z|!z&x",
"!(x&y&z)",
"x&y&z",
"!(x|y|z)|x&y&z",
"!x&!y&z|x&y&z",
"!x&!y|x&y&z",
"!x&!z&y|x&y&z",
"!x&!z|x&y&z",
"!(!y&!z|x|y&z)|x&y&z",
"!(x|y&z)|x&y&z",
"y&z",
"!(x|y|z)|y&z",
"!x&z|y&z",
"!x&!y|y&z",
"!x&y|y&z",
"!x&!z|y&z",
"!x&(y|z)|y&z",
"!x|y&z",
"!y&!z&x|x&y&z",
"!y&!z|x&y&z",
"!(!x&!z|x&z|y)|x&y&z",
"!(x&z|y)|x&y&z",
"!(!x&!y|x&y|z)|x&y&z",
"!(x&y|z)|x&y&z",
"!(!x&!y|x&y|z)|!x&!y&z|x&y&z",
"!((x|y)&z|x&y)|x&y&z",
"!y&!z&x|y&z",
"!y&!z|y&z",
"!x&z|!y&!z&x|y&z",
"!(x&z|y)|y&z",
"!x&y|!y&!z&x|y&z",
"!(x&y|z)|y&z",
"!x&(y|z)|!y&!z&x|y&z",
"!x|!y&!z|y&z",
"x&z",
"!(x|y|z)|x&z",
"!y&z|x&z",
"!x&!y|x&z",
"!x&!z&y|x&z",
"!x&!z|x&z",
"!x&!z&y|!y&z|x&z",
"!(x|y&z)|x&z",
"(x|y)&z",
"!(x|y|z)|(x|y)&z",
"z",
"!x&!y|z",
"!x&y|x&z",
"!(!y&z|x)|x&z",
"!x&y|z",
"!x|z",
"!y&x|x&z",
"!y&!z|x&z",
"!y&(x|z)|x&z",
"!y|x&z",
"!x&!z&y|!y&x|x&z",
"!(x&y|z)|x&z",
"!x&!z&y|!y&(x|z)|x&z",
"!x&!z|!y|x&z",
"!y&x|y&z",
"!(!x&z|y)|y&z",
"!y&x|z",
"!y|z",
"!x&y|!y&x|x&z",
"!x&!z|!y&x|y&z",
"!x&y|!y&x|z",
"!x|!y|z",
"x&y",
"!(x|y|z)|x&y",
"!x&!y&z|x&y",
"!x&!y|x&y",
"!z&y|x&y",
"!x&!z|x&y",
"!x&!y&z|!z&y|x&y",
"!(x|y&z)|x&y",
"(x|z)&y",
"!(x|y|z)|(x|z)&y",
"!x&z|x&y",
"!(!z&y|x)|x&y",
"y",
"!x&!z|y",
"!x&z|y",
"!x|y",
"!z&x|x&y",
"!y&!z|x&y",
"!x&!y&z|!z&x|x&y",
"!(x&z|y)|x&y",
"!z&(x|y)|x&y",
"!z|x&y",
"!x&!y&z|!z&(x|y)|x&y",
"!x&!y|!z|x&y",
"!z&x|y&z",
"!(!x&y|z)|y&z",
"!x&z|!z&x|x&y",
"!x&!y|!z&x|y&z",
"!z&x|y",
"!z|y",
"!x&z|!z&x|y",
"!x|!z|y",
"(y|z)&x",
"!(x|y|z)|(y|z)&x",
"!y&z|x&y",
"!(!z&x|y)|x&y",
"!z&y|x&z",
"!(!y&x|z)|x&z",
"!y&z|!z&y|x&y",
"!x&!y|!z&y|x&z",
"(x|y)&z|x&y",
"!(x|y|z)|(x|y)&z|x&y",
"x&y|z",
"!x&!y|x&y|z",
"x&z|y",
"!x&!z|x&z|y",
"y|z",
"!x|y|z",
"x",
"!y&!z|x",
"!y&z|x",
"!y|x",
"!z&y|x",
"!z|x",
"!y&z|!z&y|x",
"!y|!z|x",
"x|y&z",
"!y&!z|x|y&z",
"x|z",
"!y|x|z",
"x|y",
"!z|x|y",
"x|y|z",
"!x|x"
};
bool cmp(const std::string &lhs, const std::string &rhs)
{
    if (lhs.empty()) return false;
    if (rhs.empty()) return true;

    if (lhs.size() != rhs.size()) return lhs.size() < rhs.size();
    for (std::size_t i = 0; i < lhs.size(); ++ i)
        if (lhs[i] != rhs[i])
            return lhs[i] < rhs[i];
    return false;
}

bool operator < (const Node &lhs, const Node &rhs)
{
    return cmp(std::get<0>(lhs), std::get<0>(rhs));
}

void update(int mask, int t, const std::string &s)
{
    if (cmp(s, f[mask][t])) {
        f[mask][t] = s;
        pq.emplace(s, mask, t);
    }
}

void transferE(int mask, int t, int mask2, int t2)
{
    if (t == 0 && t2 == 1) {
        update(mask | mask2, 0, f[mask][t] + "|" + f[mask2][t2]);
    } else if (t == 1) {
        update(mask, 0, f[mask][t]);
    }
}

void transferT(int mask, int t, int mask2, int t2)
{
    if (t == 1 && t2 == 2) {
        update(mask & mask2, 1, f[mask][t] + "&" + f[mask2][t2]);
    } else if (t == 2) {
        update(mask, 1, f[mask][t]);
    }
}

void transferF(int mask, int t)
{
    if (t == 2) {
        update(mask ^ 0xff, 2, "!" + f[mask][t]);
    } else if (t == 0) {
        update(mask, 2, "(" + f[mask][t] + ")");
    }
}

void prepare()
{
    for (int c = 0; c < 3; ++ c) {
        int mask = 0;
        for (int i = 0; i < 8; ++ i)
            if (i >> 2 - c & 1)
                mask |= 1 << i;
        f[mask][2] = std::string(1, c + 'x');
        pq.emplace(f[mask][2], mask, 2);
    }
    std::vector<std::pair<int, int>> fixed;
    while (!pq.empty()) {
        std::string tmp;
        int mask, t;
        std::tie(tmp, mask, t) = pq.top(); pq.pop();
        if (tmp != f[mask][t]) continue;
        fixed.emplace_back(mask, t);
        transferF(mask, t);
        for (auto _ : fixed) {
            int mask2, t2;
            std::tie(mask2, t2) = _;
            transferE(mask, t, mask2, t2);
            transferE(mask2, t2, mask, t);
            transferT(mask, t, mask2, t2);
            transferT(mask2, t2, mask, t);
        }
    }
    for (int mask = 0; mask < 1 << kB; ++ mask) {
        table[mask] = "";
        for (int t = 0; t < 3; ++ t)
            if (cmp(f[mask][t], table[mask]))
                table[mask] = f[mask][t];
    }
}

int main()
{
    // prepare();
    // for (int mask = 0; mask < 1 << kB; ++ mask)
    //     printf("\"%s\",\n", table[mask].c_str());
    // return 0;
    int cas;
    scanf("%d", &cas);
    while (cas--) {
        char s[10];
        scanf("%s", s);
        int mask = 0;
        for (int i = 0; i < 8; ++ i)
            if (s[i] == '1')
                mask |= 1 << i;
        printf("%s\n", table[mask].c_str());
    }
}
