/*
ID: Tariqul
PROG:
LANG: C++
*/

#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define fo(i,j,n) for(i=j;i<n;++i)
#define Fo(i,j,n) for(i=n-1;i>=j;--i)
#define foo(i,j,v) fo(i,j,sz(v))
#define Foo(i,j,v) Fo(i,j,sz(v))
#define li(v) v.begin(),v.end()
#define sz(v) ((int)v.size())
#define CLR(a,v) memset((a),(v),sizeof(a))
#define inf 1000000001
typedef long long Long;
//typedef __int64 Long;
#define pi (2*acos(0))
#define eps 1e-9

#define two(X) (1<<(X))
#define twoL(X) (((Long)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)

char BUFFER[100000 + 5];
bool readn(int &n)	{ return scanf("%d",&n) == 1; }
bool readl(Long &n)	{ return scanf("%I64d",&n) == 1; }
bool readd(double &n){ return scanf("%lf",&n) == 1; }
bool reads(string &s){ s = ""; int n = scanf("%s",BUFFER); if(n == 1)s = BUFFER; return n == 1; }
bool readln(string &s){ char *valid = gets(BUFFER); if(valid)s = BUFFER; return ((bool)valid); }

const int maxn = 2000 + 10;
string s[maxn];
set<pair<int,int> > st;
int deg[maxn][maxn];

bool isConnect(int i, int j, int n, int m)
{
	if(i < 0 || j < 0 || i >= n || j >= m)return false;
	return (s[i][j] == '.');
}

void update(int i, int j)
{
    deg[i][j]--;
	if(deg[i][j] == 0)st.clear();
	else if(deg[i][j] == 1)st.insert(make_pair(i,j));
}

void doit(int i1, int j1, int i2, int j2, int n, int m)
{
    st.erase(make_pair(i2,j2));
	char ch1, ch2;
	if(i1 == i2)
	{
		ch1 = '<', ch2 = '>';
		if(j1 > j2)swap(ch1,ch2);
	}
	else if(j1 == j2)
	{
		ch1 = '^', ch2 = 'v';
		if(i1 > i2)swap(ch1,ch2);
	}
	s[i1][j1] = ch1;
	s[i2][j2] = ch2;
	int i = i2, j = j2;
	if(isConnect(i + 1, j + 0, n, m))update(i+1,j);
	if(isConnect(i - 1, j + 0, n, m))update(i-1,j);
	if(isConnect(i + 0, j + 1, n, m))update(i,j+1);
	if(isConnect(i + 0, j - 1, n, m))update(i,j-1);
}

bool can(int n, int m)
{
	CLR(deg,0);
	int i,j,cnt = 0;
	fo(i,0,n)cin >> s[i];
	fo(i,0,n)fo(j,0,m)if(s[i][j] == '.')
	{
        cnt++;
		if(isConnect(i + 1, j + 0, n, m))deg[i][j]++;
		if(isConnect(i - 1, j + 0, n, m))deg[i][j]++;
		if(isConnect(i + 0, j + 1, n, m))deg[i][j]++;
		if(isConnect(i + 0, j - 1, n, m))deg[i][j]++;
		if(1 == deg[i][j])st.insert(make_pair(i,j));
		if(0 == deg[i][j])return false;
	}

	while(sz(st))
	{
        cnt -=2;
		pair<int,int> p1 = *st.begin(); st.erase(p1);
		i = p1.first; j = p1.second;
			 if(isConnect(i + 1, j + 0, n, m))doit(i,j,i+1,j, n, m);
		else if(isConnect(i - 1, j + 0, n, m))doit(i,j,i-1,j, n, m);
		else if(isConnect(i + 0, j + 1, n, m))doit(i,j,i,j+1, n, m);
		else if(isConnect(i + 0, j - 1, n, m))doit(i,j,i,j-1, n, m);
	}
	return (cnt == 0);
}

int main()
{
	#ifdef localhost
	freopen("/home/tariqul/APC/Contest/input.txt","r",stdin);
	//freopen("/home/tariqul/APC/Contest/output.txt","w",stdout);
	#endif
	int i,n,m;
	cin >> n >> m;
	if(false == can(n, m)){ cout << "Not unique" << endl; return 0; }
	fo(i,0,n)cout << s[i] << endl;

	return 0;
}
