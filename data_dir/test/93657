#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <map>
typedef long long int64;
const int inf=0x7FFFFFFF;
#define show(x) cout << x << endl
#define rep(i,n) for(int i=0;i<n;i++)
#define mset(a,i) memset(a,i,sizeof(a))
#define PB(i) push_back(i)

using namespace std;
const int mod = 1e9 + 7;
int N;
int a[101], dp[101][101];
void add(int &x, int val) {
	x += val;
	if(x >= mod)
		x -= mod;
}

int C[101][101];
void pre() {
	C[0][0] = 1;
	for(int i = 1; i < 101; i ++) {
		C[i][0] = 1;
		for(int j = 1; j <= i; j ++) {
			add(C[i][j], (C[i - 1][j - 1] + C[i - 1][j]) % mod);
		}
	}
}

int dfs(int pos, int left) {
	if(pos > 9)		return left == 0;
	int &ret = dp[pos][left];
	if(ret != -1)
		return ret;
	ret = 0;
	for(int i = max(0, a[pos]); i <= left; i ++) {
		add(ret, dfs(pos + 1, left - i) * 1LL * C[left][i] % mod);
	}
	return ret;
}

int main() {
	pre();
	scanf("%d", &N);
	rep(i, 10) 
		scanf("%d", a + i);
	int ans = 0;
	for(int len = 1; len <= N; len ++) {
		for(int i = 1; i <= 9; i ++) {
			a[i] --;
			mset(dp, -1);
			add(ans, dfs(0, len - 1));
			a[i] ++;
		}
	}
	printf("%d\n", ans);
	return 0;
}

