#include <bits/stdc++.h>
using namespace std;

const int N = 101, D = 4;

int n, m;
int delta_x[] = {0, 0, 1, -1},
	delta_y[] = {1, -1, 0, 0};
char c[N][N];

bool is_val(int x, int y) {
	return 0 <= x && x < n && 0 <= y && y < m;
}

bool ok(int x, int y, char me) {
	for (int i = 0; i < D; i++) {
		int X = x + delta_x[i],
			Y = y + delta_y[i];
		if (is_val(X, Y) && c[X][Y] == me)
			return false;
	}
	return true;
}

char f(int x, int y) {
	for (char c = 'A';; c++)
		if (ok(x, y, c))
			return c;
}

bool can(int x, int y, int l) {
	if (is_val(x + l, y + l) == false)
		return false;
	for (int i = 0; i <= l; i++)
		if (c[x + i][y + l] || c[x + l][y + i])
			return false;
	if (f(x, y + l) == f(x, y))
		return true;
	else
		return false;
}

void paint(int x, int y) {
	char me = f(x, y);
	int l = 1;
	while (can(x, y, l))
		l++;
	for (int i = 0; i < l; i++)
		for (int j = 0; j < l; j++)
			c[x + i][y + j] = me;
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if (c[i][j] == 0)
				paint(i, j);
	for (int i = 0; i < n; i++, cout << '\n')
		for (int j = 0; j < m; j++)
			cout << c[i][j];
}
