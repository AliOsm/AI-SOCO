#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <utility>
#include <algorithm>
#include <memory.h>
#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>

using namespace std;

#pragma comment (linker, "/STACK:64000000")

#define pb push_back
#define pii pair<int, int>
#define pdi pair<double, int>
#define pll pair<ll, ll>
#define pib pair<int, bool>
#define pli pair<ll, int>
#define pil pair<int, ll>
#define vi vector<int>
#define inf 2000000000
#define mod 1000000007
#define mod2 536870911
#define y1 uhgeg
#define eps 1e-9
#define prime 3001
#define N 200005

typedef long long ll;
typedef unsigned long long ull;

int n, m, l, j, i, h, k, q1, q2, q, a[500500], lp[500500], pr[500500], rad[500500], odd[500500], num;
ll pairs[500500], cnt[500500], ans, all;
bool b[500500];
vector<int> divs;

void gen_divs(int q)
{
	if (q == 1)
	{
		divs.pb(1);
		return;
	}
	else
	{
		gen_divs(q / lp[q]);
		int prm = lp[q], c = divs.size();
		for (int j = 0; j < c; j++)
		{
			divs.pb(divs[j] * prm);
		}
	}
}

void sieve()
{
	rad[1] = 1;
	odd[1] = 1;
	for (j = 2; j <= 500000; j++)
	{
		if (!lp[j])
		{
			lp[j] = j;
			rad[j] = pr[++l] = j;
			odd[j] = -1;
		}
		for (i = 1; i <= l; i++)
		{
			q = pr[i] * j;
			if (q > 500000)
			{
				break;
			}
			lp[q] = pr[i];
			rad[q] = rad[j];
			if (rad[j] % pr[i])
			{
				rad[q] *= pr[i];
			}
			odd[q] = -1 * odd[j];
		}
	}
}

void solve()
{
	sieve();
	scanf ("%d%d", &n, &m);
	for (j = 1; j <= n; j++)
	{
		scanf ("%d", &a[j]);
		a[j] = rad[a[j]];
	}
	for (j = 1; j <= m; j++)
	{
		scanf ("%d", &num);
		q = a[num];
		divs.clear();
		gen_divs(q);
		if (b[num])
		{
			for (i = 0; i < divs.size(); i++)
			{
				ans -= pairs[divs[i]] * odd[divs[i]];
				pairs[divs[i]] -= (cnt[divs[i]] - 1);
				cnt[divs[i]]--;
				ans += pairs[divs[i]] * odd[divs[i]];
			}
			all--;
		}
		else
		{
			for (i = 0; i < divs.size(); i++)
			{
				ans -= pairs[divs[i]] * odd[divs[i]];
				pairs[divs[i]] += cnt[divs[i]];
				cnt[divs[i]]++;
				ans += pairs[divs[i]] * odd[divs[i]];
			}
			all++;
		}
		b[num] = !b[num];
		printf ("%I64d\n", ans);
	}
}

int main()
{
	ios_base::sync_with_stdio(false);cin.tie(0);
	//freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
	solve();
	return 0;
}