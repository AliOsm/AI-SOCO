#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> pi;
constexpr int inf = 0x3f3f3f3f;
constexpr double EPS = 1e-15;
constexpr double PI = atan(1) * 4;

template <typename T> inline bool chmax(T& x, T y) {return x < y ? x = y, 1 : 0;}
template <typename T> inline bool chmin(T& x, T y) {return x > y ? x = y, 1 : 0;}
inline int LSB(int i) {return (i & -i);}

/*
    - Read carefully
    - Look for patterns/observations
    - Think backwards
*/

constexpr int maxn = 2e5+5;

int t, n, p[maxn], c[maxn], res = inf;
vector <int> v;
bool vis[maxn];

void cycle(int node){
    if (vis[node]) return;
    vis[node] = true;

    v.push_back(node);
    cycle(p[node]);
}

bool solve(int jump){
//    printf("Jump = %d\n", jump);
//    for (auto it : v) printf("Cycle contains %d\n", it);
//    printf("\n");
    for (int i = 0; i < jump; i++){
        bool good = true;
        for (int j = i; j < v.size(); j += jump){
            if (c[v[j]] != c[v[i]]){
                good = false;
                break;
            }
        }

        if (good) return true;
    }

    return false;
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin >> t;
    while (t--){
        cin >> n;
        for (int i = 1; i <= n; i++){
            cin >> p[i];
        }

        for (int i = 1; i <= n; i++){
            cin >> c[i];
            vis[i] = false;
        }

        res = inf;

        for (int i = 1; i <= n; i++){
            v.clear();
            if (!vis[i]){
                cycle(i);
                int m = v.size();
                for (int j = 1; j * j <= m; j++){
                    if (m % j) continue;
                    if (solve(j)){
                        chmin(res, j);
                        break;
                    }
                }

                for (int j = 1; j * j <= m; j++){
                    if (m % j) continue;
                    if (solve(m / j)){
                        chmin(res, m / j);
                    }
                }
//                for (auto it : v) cout << it << " ";
//                cout << endl << endl;
            }
        }

        cout << res << endl;
    }
    return 0;
}
