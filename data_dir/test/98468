#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <sstream>
#include <cassert>
#include <queue>
#include <bitset>
#include <ctime>
using namespace std;
#define forr(i, a, b) for(ll i = (a); i < (ll) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define db(v) cerr << #v << " = " << v << endl
#define pb push_back
#define sz(x) ((ll)x.size())
#define fst first
#define snd second
typedef long long ll;
typedef pair<ll, ll> ii;
const ll MAXN = 200050;
const ll INF = (ll)1e18 + 9901;

struct Edge {
  ll f, t, cost, son;
};

ll oper(ll a, ll b){
  if(a >= (INF + b - 1) / b) return INF;
  return min(INF, a*b);
}
#define NEUT (1)
struct STree { // segment tree for min over integers
	vector<ll> st;ll n;
	STree(ll n): st(4*n+5,NEUT), n(n) {}
	void upd(ll k, ll s, ll e, ll p, ll v){
		if(s+1==e){st[k]=v;return;}
		ll m=(s+e)/2;
		if(p<m)upd(2*k,s,m,p,v);
		else upd(2*k+1,m,e,p,v);
		st[k]=oper(st[2*k],st[2*k+1]);
	}
	ll query(ll k, ll s, ll e, ll a, ll b){
		if(s>=b||e<=a)return NEUT;
		if(s>=a&&e<=b)return st[k];
		ll m=(s+e)/2;
		return oper(query(2*k,s,m,a,b),query(2*k+1,m,e,a,b));
	}
	void upd(ll p, ll v){upd(1,0,n,p,v);}
	ll query(ll a, ll b){return query(1,0,n,a,b);}
}; // usage: STree rmq(n);rmq.init(x);rmq.upd(i,v);rmq.query(s,e);

vector<Edge> E;
vector<ll> g[MAXN];
ll peso[MAXN];
ll wg[MAXN],dad[MAXN],dep[MAXN]; // weight,father,depth
void dfs1(ll x){
	wg[x]=1;
	for(ll yy:g[x]){
    ll y = E[yy].f ^ E[yy].t ^ x;
    if(y!=dad[x]){
      dad[y]=x;dep[y]=dep[x]+1;dfs1(y);
      wg[x]+=wg[y];
      peso[y]=E[yy].cost;
      E[yy].son = y;
    }
  }
}
ll curpos,pos[MAXN],head[MAXN];
void hld(ll x, ll c){
	if(c<0)c=x;
	pos[x]=curpos++;head[x]=c;
	ll mx=-1;
	for(ll yy:g[x]){
    ll y = E[yy].f ^ E[yy].t ^ x;
    if(y!=dad[x]&&(mx<0||wg[mx]<wg[y]))mx=y;
  }
	if(mx>=0)hld(mx,c);
	for(ll yy:g[x]){
    ll y = E[yy].f ^ E[yy].t ^ x;
    if(y!=mx&&y!=dad[x])hld(y,-1);
  }
}
void hld_init(){dad[0]=-1;dep[0]=0;dfs1(0);curpos=0;hld(0,-1);}
ll query(ll x, ll y, STree& rmq){
	ll r=NEUT;
	while(head[x]!=head[y]){
		if(dep[head[x]]>dep[head[y]])swap(x,y);
		r=oper(r,rmq.query(pos[head[y]],pos[y]+1));
		y=dad[head[y]];
	}
	if(dep[x]>dep[y])swap(x,y); // now x is lca
	r=oper(r,rmq.query(pos[x],pos[y]+1));
	return r;
}
// for updating: rmq.upd(pos[x],v);

ll n, m;
const ll K = 19;
ll F[K][1<<K],D[1<<K];
void lca_dfs(ll x){
	for(ll yy : g[x]){
		ll y = E[yy].f ^ E[yy].t ^ x;if(y==F[0][x])continue;
		F[0][y]=x;D[y]=D[x]+1;lca_dfs(y);
	}
}
void lca_init(){
	D[0]=0;F[0][0]=-1;
	lca_dfs(0);
	forr(k,1,K)forn(x,n)
		if(F[k-1][x]<0)F[k][x]=-1;
		else F[k][x]=F[k-1][F[k-1][x]];
}
ll lca(ll x, ll y){
	if(D[x]<D[y])swap(x,y);
	for(ll k=K-1;k>=0;--k)if(D[x]-(1<<k)>=D[y])x=F[k][x];
	if(x==y)return x;
	for(ll k=K-1;k>=0;--k)if(F[k][x]!=F[k][y])x=F[k][x],y=F[k][y];
	return F[0][x];
}




int main(){
  while(scanf("%lld %lld", &n, &m) >= 1){
    forn(i, MAXN) g[i].clear(), peso[i] = 1;
    forn(i, n-1){
      ll a, b, c;
      scanf("%lld %lld %lld", &a, &b, &c);
      --a; --b;
      g[a].pb(sz(E));
      g[b].pb(sz(E));
      E.pb((Edge){a, b, c, -1});
    }
    lca_init();
    hld_init();
    STree rmq(n+5);
    forn(i, n){
      rmq.upd(pos[i], peso[i]);
    }
    forn(i, m){
      ll t;
      scanf("%lld", &t);
      if(t == 1){
        ll a, b, y;
        scanf("%lld %lld %lld", &a, &b, &y);
        --a; --b;
        ll who = lca(a, b);
        ll old = query(who, who, rmq);
        rmq.upd(pos[who], 1);
        ll k = query(a, b, rmq);
        rmq.upd(pos[who], old);
        printf("%lld\n", y/k);
      } else {
        ll p, c;
        scanf("%lld %lld", &p, &c);
        --p;
        E[p].cost = c;
        rmq.upd(pos[E[p].son], c);
      }
    }
  }
  return 0;
}
