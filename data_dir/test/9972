#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>

using namespace std;

#define MAX 100002

#define MAX_VAL 2000002
#define MAX_LOG 20

int n;
int a[MAX];
vector<int> v[MAX_LOG];
set<int> s;
bool flag[MAX_VAL];
int main(){
    scanf("%d", &n);
    for (int i = 0; i < n; i++){
        scanf("%d", &a[i]);
        for (int j = 0; j < MAX_LOG; j++){
            if ((a[i] >> j) & 1){
                v[j].push_back(i);
            }
        }
    }
    for (int i = 0; i < MAX_LOG; i++){
        v[i].push_back(n);
    }
    set<int>::iterator ite;
    for (int i = 0; i < n; i++){
        s.clear();
        for (int j = 0; j < MAX_LOG; j++){
            if (v[j].size()>1&&(((a[i]>>j)&1)==0)){
                s.insert(j);
            }
        }
        int ind = i+1;
        int val = a[i];
        flag[val] = true;
        while (ind < n){
            int mint = n;
            if (s.empty()){
                break;
            }
            bool ok = false;
            for (int i1 = 0; i1 < MAX_LOG;i1++){
                if ((val >> i1) & 1){
                    continue;
                }
                ok = true;
                int j = i1;
                int in = lower_bound(v[j].begin(), v[j].end(), ind) - v[j].begin();
                mint = min(mint, v[j][in]);
            }
            if (ok == false){
                break;
            }
            if (mint == n){
                break;
            }
            val |= a[mint];
            flag[val] = true;
            ind = mint + 1;
        }
    }
    int countt = 0;
    for (int i = 0; i < MAX_VAL; i++){
        if (flag[i]){
            countt++;
        }
    }
    printf("%d\n", countt);
    return 0;
}