#include <iostream>
#include <map>
#include <vector>
#include <set>

using namespace std;

int kol=0;

struct tree;

vector< tree*> ones[20];

struct tree
{
public:
    int n;
    tree* par;
    tree* l;
    tree* r;
    int quenum;
    vector<int> res;
    bool sorted()
    {
        if (l)
        {
            return 0;
        }
        return 1;
    }
    tree(tree* p,int q)
    {
        par=p;
        kol++;
        n=q;
        if (q>1)
        {
            l=new tree(this,q/2);
            r=new tree(this,n-q/2);
            quenum=1+max(l->quenum,r->quenum);
            ones[quenum].push_back(this);
        }
        else
        {
            l=0;
            r=0;
            quenum=0;
        }
    }
};


void go(tree* t,int l,int r)
{
    if (t->sorted())
    {
        for (int i=l;i<r;i++)
        {
            t->res.push_back(i);
        }
    }
    else
    {
        int m=(l+r+1)/2;
        go(t->l,m,r);
        go(t->r,l,m);
        for (auto x:t->l->res)
        {
            t->res.push_back(x);
        }
        for (auto x:t->r->res)
        {
            t->res.push_back(x);
        }
    }
}

int main()
{
    int n,k;
    cin >> n >> k;
    if (k==n+n-1)
    {
        for (int i=n;i;i--)
        {
            cout << i << ' ';
        }
        return 0;
    }
    if (k%2==0)
    {
        cout << -1;
        return 0;
    }
    tree* kek=new tree(0,n);
    if (k>kol)
    {
        cout << -1;
        return 0;
    }
    int kk=n+n-1;
    int q=0;
    while(kk>k)
    {
        kk-=2;
        while (ones[q].empty())
        {
            q++;
        }
        auto x=ones[q].back();
        ones[q].pop_back();
        x->l=x->r=0;
    }
    go(kek,0,n);
    for (auto x:kek->res)
    {
        cout << x+1 << ' ';
    }
    return 0;
}
