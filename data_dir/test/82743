#include <iostream>
#include <algorithm>
#include <cstdlib>
#include <vector>
#include <map>
#include <string>
using namespace std;

const long long MOD = 1e9 + 7;

int limit;

long long endingWith[11][1010];
long long recEnd(int n, int last) {
    if (endingWith[n][last] != -1)
        return endingWith[n][last];
    if (n == 1)
        return endingWith[n][last] = 1;
    endingWith[n][last] = 0;
    for (int pred = 1; pred <= last; pred++)
        endingWith[n][last] = (endingWith[n][last] + recEnd(n - 1, pred)) % MOD;
    return endingWith[n][last];
}

long long startingWith[11][1010];
long long recStart(int n, int first) {
    if (startingWith[n][first] != -1)
        return startingWith[n][first];
    if (n == 1)
        return startingWith[n][first] = 1;
    startingWith[n][first] = 0;
    for (int next = first; next <= limit; next++)
        startingWith[n][first] = (startingWith[n][first] + recStart(n - 1, next)) % MOD;
    return startingWith[n][first];
}

int main() {
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    for (int i = 0; i < 11; i++) {
        fill(endingWith[i], endingWith[i] + 1010, -1);
        fill(startingWith[i], startingWith[i] + 1010, -1);
    }

    int len;
    cin >> limit >> len;

    long long res = 0;

    for (int i = 1; i <= limit; i++) {
        long long a = recEnd(len, i);
        for (int j = i; j <= limit; j++) {
            long long b = recStart(len, j);
            long long add = a * b % MOD;
            res = (res + add) % MOD;
        }
    }

    cout << res;
}