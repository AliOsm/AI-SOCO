#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 30;
const int MOD = 1e9 + 7;

struct Query {
  int t, L, R;
};

int main() {
  int n, q, m;
  scanf("%d%d%d", &n, &q, &m);
  vector<int> a(n);
  vector<Query> b(q);
  for (int i = 0; i < n; ++i) scanf("%d", &a[i]);
  for (int i = 0; i < q; ++i) {
    scanf("%d%d%d", &b[i].t, &b[i].L, &b[i].R);
    --b[i].L; --b[i].R;
  }
  for (int i = 0; i < m; ++i) {
    int x;
    scanf("%d", &x);
    --x;
    for (int i = q - 1; i >= 0; --i) {
      int L = b[i].L, R = b[i].R;
      if (b[i].t == 1) {
        if (x >= L && x <= R) {
          --x;
          if (x < L) x = R;
        }
      } else {
        if (x >= L && x <= R) {
          x = L + R - x;
        }
      }
    }
    printf("%d%c", a[x], " \n"[i + 1 == m]);
  }
  return 0;
}
