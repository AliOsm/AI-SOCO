#pragma comment(linker, "/STACK:256000000")

#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <random>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <complex>
#include <tuple>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<int, int64> pil;
typedef pair<int, bool> pib;
const int INF = (int) (1e9 + 1e5);
const int64 LINF = (int64) (1e18);
const int64 BASE = 1003;
const double EPS = 1e-9;
#define sq(x) ((x)*(x))
#define FAIL(what) {throw logic_error(string(what));}
#define ASSERT(exp) {if (!(exp)) {FAIL("");}}
#define ASSERTC(exp, what) {if (!(exp)) {FAIL(what);}}
#define y1 fjgjf
//typedef complex<double> comp;
const int MOD = 1000000007;

int tnum;
const int MAXN = 1500500;

int n, s, k;
int a[MAXN];
bool can;

void init() {
    scanf ("%d%d", &n, &s);
}

void solve() {
    can = (s >= n * 2);
    if (can) {
        int left = s;
        for (int i = 1; i <= n; ++i) {
            a[i] = (left / (n - i + 1));
            left -= a[i];
        }
        k = 1;
    }
}

void print_answer() {
    if (can) {
        printf("YES\n");
        for (int i = 1; i <= n; ++i) {
            printf("%d ", a[i]);
        }
        printf("\n%d\n", k);
    } else {
        printf("NO\n");
    }
}

void precalc() {
}

void run() {
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(getenv("OUTPUT_PATH"), "wt", stdout);
#endif // _MY_DEBUG
    precalc();
    int t = 1; //scanf ("%d", &t);
    for (tnum = 1; tnum <= t; ++tnum) {
        init();
        solve();
        print_answer();
    }
}

signed main() {
    srand(90);
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    run();
    return 0;
}
