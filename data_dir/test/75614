#pragma GCC optimize("Ofast")
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace __gnu_pbds;
using namespace std;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define PI 3.1415926535897932384626433832795
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
long long MOD = 1e9+7;
pair<int,int> dx[4] = {{1,0},{-1,0},{0,1},{0,-1}};
const int RANDOM = chrono::high_resolution_clock::now().time_since_epoch().count();
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
struct chash {int operator()(int x) const { return x ^ RANDOM; }};
string toString(long long x){stringstream ss;ss << x;string str = ss.str();return str;}
long long fastpow(long long x,long long k){if(!k)return 1;if(k & 1)return ((x * fastpow(x,k-1) % MOD) % MOD) % MOD;
long long ans = fastpow(x,k/2);ans %= MOD;ans *= ans;ans %= MOD;return ans;}
long long sumF(long long x){int s = 0;while(x)s += x%10,x /= 10;return s;}
bool isS(char c){return (c >= 'a' && c <= 'z');}
bool isB(char c){return (c >= 'A' && c <= 'Z');}
bool isD(char c){return (c >= '0' && c <= '9');}
bool isSqrt(long long x){ long long f = sqrt((long double)x + 0.5); return f*f == x;}
long long lcm(long long a,long long b){return a * (b / __gcd(a,b));}
int main()
{
    IO;
    int n;
    cin>>n;
    vector<pair<int,int> > arr(n);
    for(int i = 0 ; i < n ; i++)
        cin >> arr[i].first >> arr[i].second;

    long long goodBoy,vesco,tbango;
    map<int,int> goodiesBoy,BadestBoys;
    map<pair<int,int>,map<pair<int,int>,bool> > Volvo;

    goodBoy=vesco=tbango=0;
    map<pair<int,int>,long long> m;
    for(int i = 0 ; i < n ; i++)
    {
        for(int j =  i+1 ; j< n ; j++)
        {
            int num = arr[i].second - arr[j].second;
            int den = arr[i].first - arr[j].first;

            if(den == 0)
            {
                BadestBoys[arr[i].first]++;
                vesco++;
                continue;
            }
            if(num == 0)
            {
                goodiesBoy[arr[i].second]++;
                goodBoy++;
                continue;
            }
            if(num < 0)
            {
                den*=-1;
                num*=-1;
            }
            int gg = __gcd(abs(num),abs(den));
            num/=gg;
            den/=gg;
            int yintnum = num*-1*arr[i].first + arr[i].second*den;
            int yintden = den;
            if(yintnum < 0 ) yintden*=-1;
            //cout<<num<<" "<<den<<" "<<yintnum<<"\n";
            if(yintnum == 0)
            {
                yintden = 0;
                if(Volvo[ {num,den}][ {yintnum,yintden}]) continue;
                Volvo[ {num,den}][ {yintnum,yintden}] = 1;
                m[ {num,den}]++;

                continue;
            }
            gg = __gcd(abs(yintnum),abs(yintden));
            yintnum/=gg;
            yintden/=gg;

            if(Volvo[ {num,den}][ {yintnum,yintden}]) continue;
            Volvo[ {num,den}][ {yintnum,yintden}] = 1;
            m[ {num,den}]++;
        }
    }

    long long SecondStrike = 0;
    for(auto  it : m) SecondStrike+= it.second;
    long long wires = goodiesBoy.size() + BadestBoys.size() + SecondStrike;
    long long ans = wires*(wires-1)/2;
    goodBoy =goodiesBoy.size();
    vesco = BadestBoys.size();
    //cout<<SecondStrike<<" "<<goodBoy<<" "<<vesco<<"\n";
    if(goodBoy)ans -= goodBoy*(goodBoy-1)/2;
    if(vesco)ans -= vesco*(vesco-1)/2;
    for(auto it : m)
    {
        ans -= (it.second)*(it.second-1)/2;
    }
    cout<<ans;
    return 0;
}
