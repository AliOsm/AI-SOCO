/* Author haleyk10198 */
/* �@��:  haleyk10198 */
/* CF handle: haleyk100198*/
#include <bits/stdc++.h>

#define MOD 1000000007
#define LINF (1LL<<60)
#define INF 2147483647
#define PI 3.1415926535897932384626433
#define ll long long
#define pii pair<int,int>
#define mp(x,y) make_pair((x),(y))

using namespace std;

string itos(int x){
	stringstream ss;
	ss << x;
	return ss.str();
}

int n, k, s;
ll dist[400010];
vector<pair<int, ll> > near[400010];
vector<int> xs;

void getID(int l, int r){
	for(l+=n, r+=n; l < r; l>>=1, r>>=1){
		if(l&1)
			xs.push_back(l++);
		if(r&1)
			xs.push_back(--r);
	}
	return;
}

priority_queue<pair<ll, int> >pq;

int main(){
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	ios_base::sync_with_stdio(false);
	cin >> n >> k >> s;
	for(int i = 1; i < n; i++){
		near[i].push_back(mp(i*2, 0));
		near[i].push_back(mp(i*2+1, 0));
		near[i*2+2*n].push_back(mp(i+2*n, 0));
		near[i*2+1+2*n].push_back(mp(i+2*n, 0));
	}
	for(int i = n; i < 2*n; i++)
		near[i].push_back(mp(i+2*n, 0)), near[i+2*n].push_back(mp(i, 0));
	while(k--){
		int type;
		cin >> type;
		xs.clear();
		if(type == 1){
			int u, v;
			ll w;
			cin >> u >> v >> w;
			--u, --v;
			near[u+n].push_back(mp(v+n, w));
		}
		else if(type == 2){
			int u, l, r;
			ll w;
			cin >> u >> l >> r >> w;
			getID(--l, r);
			--u;
			for(auto x: xs)
				near[u+n].push_back(mp(x, w));
		}
		else if(type == 3){
			int v, l, r;
			ll w;
			cin >> v >> l >> r >> w;
			getID(--l, r);
			--v;
			for(auto x: xs)
				near[x+2*n].push_back(mp(v+n, w));
		}
	}
	fill(dist, dist+400010, -1);
	pq.push(mp(0, --s+n));
	while(pq.size()){
		auto var = pq.top();
		int now = var.second;
		pq.pop();
		if(dist[now] != -1)
			continue;
		dist[now] = -var.first;
		for(auto x: near[now]){
			int nxt = x.first;
			ll cost = x.second;
			pq.push(mp(-(cost+dist[now]), nxt));
		}
	}
	for(int i = 0; i < n; i++)
		cout << dist[i+n] << (i+1 == n? '\n': ' ');
	return 0;
}

