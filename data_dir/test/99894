#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse4,avx")

#include "bits/stdc++.h"

#ifdef PRINTERS
#include "printers.hpp"
using namespace printers;
#define tr(a)		cerr<<#a<<" : "<<a<<endl
#else
#define tr(a)    
#endif

#define ll          long long
#define pb          push_back
#define mp          make_pair
#define pii         pair<int,int>
#define vi          vector<int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define endl        '\n'
#define rep(i,a,b)	for(int i=a;i<b;i++)
using namespace std;

int cnt[1000001];
int base[300001];

template <class T> void get(T &n) {
    int p;
    n = 0;
    do {
        p=getchar();
    } while( !isdigit(p));
    while ( isdigit(p) ) {
        n = (n << 3) + (n << 1) + (p - '0');
        p = getchar();
    }
}
ll BIT[300001];

void update(int idx,int val){
	for(;idx<=300000;idx+=idx&-idx){
		BIT[idx]+=val;
	}
}

ll query(int idx){
	ll ans=0;
	for(;idx;idx-=idx&-idx){
		ans+=BIT[idx];
	}
	return ans;
}

void solve(){
	int n,m;
	get(n);
	get(m);
	for(int i=1;i<=1000000;i++){
		for(int j=i;j<=1000000;j+=i){
			cnt[j]++;
		}
	}
	set<int>s;
	rep(i,1,n+1){
		get(base[i]);
		update(i,base[i]);
		if(cnt[base[i]]!=base[i])s.insert(i);
	}
	while(m--){
		int ch;
		get(ch);
		if(ch==1){
			int l,r;
			get(l);
			get(r);
			auto it=s.lower_bound(l);
			while(it!=s.end() and *it<=r){
				update(*it,cnt[base[*it]]-base[*it]);
				base[*it]=cnt[base[*it]];
				int cur=base[*it];
				if(cnt[cur]==cur){
					it=s.erase(it);
				}
				else{
					it++;
				}
			}
		}
		else{
			int l,r;
			get(l);
			get(r);
			printf("%lld\n",query(r)-query(l-1));
		}
	}
}

int main(){
	int t=1;
//	cin>>t;
	while(t--){
		solve();
	}
	return 0;
}