#include <bits/stdc++.h>
#define MAX (ll)(2e5 + 7)
#define INF (ll)(1e17)

using namespace std;
using ll = long long;

struct pt {
	int x, y;
	pt () {};
	pt (int _x, int _y) {
		x = _x, y = _y;
	}
	pt operator-(const pt& p) const {return pt (x - p.x, y - p.y);}
	pt operator+(const pt& p) const {return pt (x + p.x, y + p.y);}
	int cross (const pt& p) const {return x * p.y - y * p.x;}
	int cross (const pt& a, const pt& b) const {return (a - *this).cross (b - *this);}
};

bool tri (pt& a, pt& b, pt& c, pt& point) {
	int si = abs (a.cross (b, c));
	int ss = abs (point.cross (a, b)) + abs (point.cross (b, c)) + abs (point.cross (c, a));
	return ss == si;
}

int main () {
	pair<int, int> x = {INF, -INF}, y = {INF, -INF};
	for (int i = 0; i < 4; i++) {
		int a, b;
		cin >> a >> b;
		x.first = min (x.first, a);
		x.second = max (x.second, a);
		y.first = min (y.first, b);
		y.second = max (y.second, b);
	}
	vector<pt> v;
	for (int i = 0; i < 4; i++) {
		int a, b;
		cin >> a >> b;
		v.push_back (pt (a, b));
	}
	bool fl = 0;
	for (int i = x.first; i <= x.second; i++) {
		for (int j = y.first; j <= y.second; j++) {
			for (int k = 0; k < 4; k++) {
				pt pp = pt (i, j);
				if (tri (v[k], v[(k + 1) % 4], v[(k + 2) % 4], pp)) {
					fl = 1;
				}
			}
		}
	};
	if (fl) {
		cout << "YES\n";
	}
	else {
		cout << "NO\n";
	}
}
