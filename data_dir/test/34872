//Author - Rahil Malhotra
#include <bits/stdc++.h>
using namespace std;
 
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl '\n'
#define int long long
#define double long double

#define x first
#define y second
const int BLOCK_SIZE=450;

int store[1000005];
bool cmp(pair<pair<int, int>,int> p, pair<pair<int, int>,int> q) 
{
    if (p.x.x / BLOCK_SIZE != q.x.x / BLOCK_SIZE)
        return p < q;
    return (p.x.x / BLOCK_SIZE & 1) ? (p.x.y < q.x.y) : (p.x.y > q.x.y);
}
int32_t main()
{
    IOS
    int n,t;
    cin>>n>>t;
    int arr[n+2]={},ans[t]={};
    for(int i=1;i<=n;i++)
        cin>>arr[i];
    vector<pair<pair<int,int>,int>>query;
    for(int i=0;i<t;i++)
    {
        int a,b;
        cin>>a>>b;
        query.push_back({{a,b},i});
    }
    sort(query.begin(),query.end(),cmp);
    int cur_l = 1;
    int cur_r = 0;
    int sum=0;
    for (auto q : query) 
    {
        while (cur_l > q.x.x) 
        {
            cur_l--;
            store[arr[cur_l]]++;
            sum+=arr[cur_l]*(store[arr[cur_l]]*store[arr[cur_l]]-(store[arr[cur_l]]-1)*(store[arr[cur_l]]-1));
        }
        while (cur_r < q.x.y) 
        {
            cur_r++;
            store[arr[cur_r]]++;
            sum+=arr[cur_r]*(store[arr[cur_r]]*store[arr[cur_r]]-(store[arr[cur_r]]-1)*(store[arr[cur_r]]-1));
        }
        while (cur_l < q.x.x) 
        {
            sum-=arr[cur_l]*(store[arr[cur_l]]*store[arr[cur_l]]-(store[arr[cur_l]]-1)*(store[arr[cur_l]]-1));
            store[arr[cur_l]]--;
            cur_l++;
        }
        while (cur_r > q.x.y) 
        {
            sum-=arr[cur_r]*(store[arr[cur_r]]*store[arr[cur_r]]-(store[arr[cur_r]]-1)*(store[arr[cur_r]]-1)); 
            store[arr[cur_r]]--;
            cur_r--;
        }
        ans[q.y] = sum;
    }
    for(int i=0;i<t;i++)
        cout<<ans[i]<<endl;
}
