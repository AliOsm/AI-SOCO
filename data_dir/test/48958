#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef long long int ll;
typedef vector< pair<int, int> > vii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<long long int> vll;
typedef pair<int, int> pii;

const ll INF = 1e18;
const int inf = 1e9;
const int MOD = 1e9 + 7;
const int nax = 1000000 + 10;

int n, arr[nax], m;
vi graph[nax];
int dist[nax];
int s[nax];

void dfs(int v, int par)
{
    if(par != -1)
        dist[v] = dist[par] + 1;
    if(arr[v] == 1)
        s[v] = 1;
    else
        s[v] = 0;
    for(auto x: graph[v])
    {
        if(x == par) continue;
            dfs(x, v);
        s[v] += s[x];
    }
}
int main()
{
    ios::sync_with_stdio(0);
    cin >> n >> m;
    for(int i = 1; i <= n - 1; i++)
    {
        int u, v;
        cin >> u >> v;
        graph[u].pb(v);
        graph[v].pb(u);
    }
    for(int i = 1; i <= m; i++)
    {
        int num;
        cin >> num;
        arr[num] = 1;
    }
    dfs(1, -1);
    int start = -1;
    for(int i = 1; i <= n; i++)
    {
        if(arr[i] == 0) continue;
        if(start == -1)
            start = i;
        if(dist[i] > dist[start])
            start = i;
    }
    memset(dist, 0, sizeof(dist));
    dfs(start, -1);
    int ans = 0;
    int maxi = 0;
    int ansv;
    for(int i = 1; i <= n; i++)
    {
        if(s[i] > 0 && m - s[i] > 0)
            ans += 2;
            if(arr[i] == 1)
        maxi = max(maxi, dist[i]);
    }
    ansv = start;
    for(int i = 1; i <= n; i++)
    {
        if(arr[i] == 1 && i < start && dist[i] == maxi)
            {
                ansv = i;
                break;
            }
    }
    cout << ansv << endl;
    cout << ans - maxi << endl;
    return 0;
}
