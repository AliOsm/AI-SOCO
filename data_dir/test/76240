// In The Name Of God :
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <bits/stdc++.h>
using namespace std ;
using namespace __gnu_pbds;
#define X first 
#define Y second
//#define X real() 
//#define Y imag()
#define int long long
typedef long double ld ;
typedef pair < int , int > pii ; 
typedef pair < pii , int > pii_i ; 
typedef pair < int , pii > pi_ii ; 
typedef complex < long double > Point ;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
const int maxn = 1e6 + 20 ;
const int maxL = 22 ;
const ld inf = 1e13 ;
int n , ar [ maxn ] , p [ maxn ] , ans , par [ maxn ] , Sum [ maxn ] , size [ maxn ] , goh [ maxn ] ;
bool mark [ maxn ] ;

int get_par ( int x ) 
{ 
  if ( par [ x ] == x )
    return x ; 
  par [ x ] = get_par ( par [ x ] ) ;
  return par[x] ;
}

void merge ( int x , int y )
{
  if ( get_par ( x ) == get_par ( y ) )
    return ;
  if ( size [ par [ x ] ] > size [ par [ y ] ] )
    swap ( x , y ) ;
  Sum [ par [ x ] ] += Sum [ par [ y ] ] ;
  par [ par [ y ] ] = par [ x ]  ;
  size [ par [ x ] ] += size [ par [ y ] ] ;  
} 

main ( )
{
  cin >> n ;
  for ( int i = 0 ; i < n ; i ++ )
    cin >> ar [ i ] ;
  for ( int i = 0 ; i < n ; i ++ )
    cin >> p [ i ] , p [ i ] -- ;
  if ( n == 1 )
    cout << 0 , exit ( 0 ) ;
  for ( int i = 0 ; i < n ; i ++ )
    par [ i ] = i ;
  for ( int i = 0 ; i < n ; i ++ )
    size [ i ] = 1 ;
  //  cout << p [ 0 ] << endl ;
  for ( int i = n - 1 ; i >= 0 ; i -- )
    {
      if ( p [ i ] == 0 )
	{
	  if ( mark [ 1 ] == 0 )
	    ;//Sum [ 0 ] = ar [ 0 ] ;
	  else
	    {
	      merge ( 0 , 1 ) ;
	      //Sum [ par [ 0 ] ] += ar [ 0 ] ;
	      //   ans = max ( ans , Sum [ par [ 1 ] ] ) ;
	    } 
	}
      else if ( p [ i ] == n - 1 )
	{
	  if ( mark [ n - 2 ] == 0 )
	    ;//ans = max ( ar [ n - 1 ] , ans ) , Sum [ n - 1 ] = ar [ n - 1 ] ;
	  else
	    {
	      merge ( n - 2 , n - 1 ) ;
	      //Sum [ par [ n - 1 ] ] += ar [ n - 1 ] ;
	      //ans = max ( ans , Sum [ par [ n - 1 ] ] ) ;
	    } 
	}
      else
	{
	  if ( ( mark [ p [ i ] - 1 ] == 0 ) && ( mark [ p [ i ] + 1 ] == 1 ) )
	    {
	      merge ( p [ i ] , p [ i ] + 1 ) ;
	      //  Sum [ par [ p [ i ] ] ] += ar [ p [ i ] ] ;
	      //ans = max ( ans , Sum [ par [ p [ i ] + 1 ] ] ) ;
	    } 
	  if ( ( mark [ p [ i ] - 1 ] == 1 ) && ( mark [ p [ i ] + 1 ] == 0 ) )
	    {
	      //ans = max ( ans , Sum [ par [ p [ i ] - 1 ] ] ) ;
	      //Sum [ par [ p [ i ] ] ] += ar [ p [ i ] ] ;
	      merge ( p [ i ] , p [ i ] - 1 ) ;
	    } 
	  if ( ( mark [ p [ i ] - 1 ] == 1 ) && ( mark [ p [ i ] + 1 ] == 1 ) )
	    {
	      merge ( p [ i ] + 1 , p [ i ] - 1 ) ;
	      merge ( p [ i ] + 1 , p [ i ] ) ;
	      //Sum [ par [ p [ i ] ] ] += ar [ p [ i ] ] ;
	    } 
	}
      mark [ p [ i ] ] = 1 ;
      Sum [ get_par ( p [ i ] ) ] += ar [ p [ i ] ] ;
      ans = max ( ans , Sum [ par [ p [ i ] ] ] ) ;
      goh [ i ] = ans ;
    }
  for ( int i = 1 ; i < n ; i ++ )
    cout << goh [ i ] << ' ' ;
  cout << 0 << endl;
} 
