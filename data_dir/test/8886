#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds ;
#define ll long long
#define ld long double
#define rep(i,a,b) for(ll i=a;i<b;i+=1)
#define all(c) (c).begin(),(c).end()
#define pb push_back
#define sz(a) int((a).size())
#define hell (ll)998244353
#define f first
#define s second
#define sll(x) scanf("%lld",&x)
#define si(x) scanf("%d",&x)
typedef tree< ll , null_type , less<ll> , rb_tree_tag , tree_order_statistics_node_update > ordered_set ;
ll t = 1 ;
const ll N = 6e5 + 55 , x = 37 ;
vector<ll> p(N) ;
ll find_hash( string& s )
{
    ll ans = 0 ;
    rep( i , 0 , sz(s) )
    {
        ans = ( ans + ((s[i]-'a'+1)*p[i]) )%hell ;
    }
    return ans ;
}
bool check(string& s , string& sk )
{
	ll cnt = 0 ;
    rep( i , 0 , min(sz(s),sz(sk)) )
    {
        if( s[i] != sk[i] )
            cnt++ ;
    }
    return sz(s) == sz(sk) and cnt == 1 ;
}
void solve()
{
    ll q , m ;
    map<ll,string> mapa ;
    cin >> q >> m ;
    rep( i , 0 , q )
    {
        string s ;
        cin >> s ;
        ll hs = find_hash(s) ;
        mapa[hs] = s ;
    }
    rep( _ , 0 , m )
    {
        string s ;
        cin >> s ;
        bool ans = false ;
        ll n = sz(s) ;
        vector<ll> pref(n) , suf(n) ;
        pref[0] = (s[0]-'a'+1) ;
        rep( i , 1 , n )
            pref[i] = ( pref[i-1] + ((s[i]-'a'+1)*p[i]) )%hell ;
        suf[n-1] = ((s[n-1]-'a'+1)*p[n-1])%hell ;
        for( ll i = n - 2 ; i >= 0 ; i-- )
            suf[i] = ( suf[i+1] + ((s[i]-'a'+1)*p[i]) )%hell ;
        rep( i , 0 , n )
        {
            ll pr = 0 , sf = 0 ;
            if( i > 0 )
                pr = pref[i-1] ;
            if( i < n - 1 )
                sf = suf[i+1] ;
            ll cur = ( pr + sf ) % hell ;
            rep( j , 0 , 3 )
            {
                if( j != (s[i]-'a') )
                {
                    ll temp = (cur+((j+1)*p[i]) ) % hell ;
                    if( mapa.find(temp) != mapa.end() )
                    {
						string sk = mapa[temp] ;
						if( check(s,sk) )ans = true ;
					}
                }
            }
        }
        ans ? cout << "YES\n" : cout << "NO\n" ;
    }
}
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    p[0] = 1 ;
    rep( i , 1 , N )
        p[i] = ( p[i-1] * x ) % hell ;
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    //cin>>t;
    while(t--)
        solve() ;
    return 0 ;
}
