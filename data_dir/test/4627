#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 2e5 + 1;
int n, a, b, c;
int arr[N];

void input() {
    cin >> n >> a >> b >> c;
    for(int i = 0; i < n; ++i) {
        cin >> arr[i];
    }
    int tmp[3] = {a, b, c};
    sort(tmp, tmp + 3);
    a = tmp[0];
    b = tmp[1];
    c = tmp[2];
}

bool test(int q) {
    int xa = 0;
    int xb = 0;
    int xc = 0;
    int xab = 0;
    int xac = 0;
    int xbc = 0;
    int xabc = 0;
    for(int i = 0; i < n; ++i) {
        if(xa + xab + xac + xabc < q && arr[i] <= a) {
            xa++;
        } else if(xb + xab + xbc + xabc < q && arr[i] <= b) {
            xb++;
        } else if(xc + xac + xbc + xabc < q && arr[i] <= c) {
            xc++;
        } else if(xa + xb + xab + xac + xbc + xabc < q && arr[i] <= a + b) {
            xab++;
        } else if(xa + xc + xab + xac + xbc + xabc < q && arr[i] <= a + c) {
            xac++;
        } else if(xb + xc + xab + xac + xbc + xabc < q && arr[i] <= b + c) {
            xbc++;
        } else if(xa + xb + xc + xab + xac + xbc + xabc < q && arr[i] <= a + b + c) {
            xabc++;
        } else {
            return 0;
        }
    }
    return 1;
}

int bin_search(int l, int r) {
    if(l == r) {
        return l;
    }
    int q = l + r >> 1;
    if(test(q)) {
        return bin_search(l, q);
    } else {
        return bin_search(q + 1, r);
    }
}

void solve() {
    sort(arr, arr + n, greater <int> {});
    for(int i = 0; i < n; ++i) {
        if(arr[i] > a + b + c) {
            cout << "-1\n";
            return;
        }
    }
    cout << bin_search(0, inf) << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
