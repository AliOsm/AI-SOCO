#include <bits/stdc++.h>

using namespace std;

using ll = long long;

const int MAXN = 400500;
const int MOD = 1000000007;
const int MAXK = 301;

int t[4 * MAXN];
int pu[4 * MAXN];
ll mask[4 * MAXN];
ll pumask[4 * MAXN];

int num[MAXN];

int mul(int x, int y) {
  return (1LL * x * y) % MOD;
}

int binpow(int x, int n) {
  int res = 1;
  for (; n > 0; n /= 2) {
    if (n & 1) res = mul(res, x);
    x = mul(x, x);
  }
  return res;
}

ll msk[MAXK];

void apply(int v, int x, ll msk, int len) {
  t[v] = mul(t[v], binpow(x, len));
  pu[v] = mul(pu[v], x);
  mask[v] |= msk;
  pumask[v] |= msk;
}

void push(int v, int len) {
  if (pu[v] == 1 && pumask[v] == 0) {
    return;
  }
  apply(v + v, pu[v], pumask[v], (len + 1) / 2);
  apply(v + v + 1, pu[v], pumask[v], len / 2);
  pu[v] = 1;
  pumask[v] = 0;
}

void update(int v, int l, int r, int x, int tl, int tr) {
  if (l <= tl && tr <= r) {
    apply(v, x, msk[x], tr - tl + 1);
    return;
  }
  push(v, tr - tl + 1);
  int tm = (tl + tr) / 2;
  if (l <= tm) {
    update(v + v, l, r, x, tl, tm);
  }
  if (r > tm) {
    update(v + v + 1, l, r, x, tm + 1, tr);
  }
  t[v] = mul(t[v + v], t[v + v + 1]);
  mask[v] = mask[v + v] | mask[v + v + 1];
}

pair<int, ll> get(int v, int l, int r, int tl, int tr) {
  if (l <= tl && tr <= r) {
    return pair<int, ll>{t[v], mask[v]};
  }
  push(v, tr - tl + 1);
  int tm = (tl + tr) / 2;
  if (r <= tm) {
    return get(v + v, l, r, tl, tm);
  }
  if (l > tm) {
    return get(v + v + 1, l, r, tm + 1, tr);
  }
  auto a = get(v + v, l, r, tl, tm);
  auto b = get(v + v + 1, l, r, tm + 1, tr);
  return pair<int, ll>{mul(a.first, b.first), a.second | b.second};
}

int inv[MAXK];
int pr[MAXK];

int main() {
  ios_base::sync_with_stdio(false);
  memset(num , -1, sizeof num);
  int cnt = 0;
  for (int i = 2; i <= 300; ++i) {
    bool ok = true;
    for (int j = 2; j * j <= i; ++j) {
      if (i % j == 0) ok = false;
    }
    if (!ok) {
      continue;
    }
    num[i] = cnt;
    pr[cnt++] = i;
  }

  for (int i = 1; i <= 300; ++i) {
    for (int j = 2; j <= i; ++j) if (num[j] != -1 && i % j == 0) {
      msk[i] |= 1LL << num[j];
    }
  }

  inv[0] = inv[1] = 1;
  for (int i = 2; i <= 300; ++i) {
    inv[i] = mul(inv[MOD % i], MOD - MOD / i);
  }

  int n, q;
  cin >> n >> q;
  for (int i = 0; i < 4 * n; ++i) {
    t[i] = 1;
    pu[i] = 1;
    mask[i] = 0;
    pumask[i] = 0;
  }
  for (int i = 0; i < n; ++i) {
    int x;
    cin >> x;
    update(1, i, i, x, 0, n - 1);
  }

  for (int i = 0; i < q; ++i) {
    string s;
    cin >> s;
    if (s[0] == 'M') {
      int l, r, x;
      cin >> l >> r >> x;
      --l; --r;
      update(1, l, r, x, 0, n - 1);
    } else {
      int l, r;
      cin >> l >> r;
      --l, --r;
      auto res = get(1, l, r, 0, n - 1);
      int ans = res.first;
      for (int j = 0; j < 62; ++j) {
        if (res.second >> j & 1) {
          ans = mul(ans, pr[j] - 1);
          ans = mul(ans, inv[pr[j]]);
        }
      }
      cout << ans << '\n';
    }
  }
  return 0;
}