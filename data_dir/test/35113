#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int)1e9 + 1;
const ld EPS = 1e-9;

const int maxm = 200 + 10;
const int maxn = 2 * maxm;
int edges[maxm][2];
int can[maxn][maxn];

int vs[maxn];

int ans[maxn];

bool solve() {
  int m, pr;
  if (scanf("%d%d", &m, &pr) < 2) {
    return 0;
  }
  
  int cnt = 0;
  for (int i = 0; i < m; ++i) {
    int s, t;
    scanf("%d%d", &s, &t);
    edges[i][0] = s, edges[i][1] = t;
    vs[cnt++] = s;
    vs[cnt++] = t;
  }
  sort(vs, vs + cnt);
  cnt = unique(vs, vs + cnt) - vs;

  for (int i = 0; i < cnt; ++i) {
    for (int j = 0; j < cnt; ++j) {
      can[i][j] = 0;
    }
  }

  for (int i = 0; i < m; ++i) {
    for (int j = 0; j < 2; ++j) {
      edges[i][j] = lower_bound(vs, vs + cnt, edges[i][j]) - vs;
    }
    int s = edges[i][0], t = edges[i][1];
    can[s][t] = can[t][s] = 1;
  }

  for (int i = 0; i < cnt; ++i) {
    int fri = 0;
    for (int j = 0; j < cnt; ++j) {
      fri += can[i][j];
    }
    int res = 0;
    for (int j = 0; j < cnt; ++j) {
      if (can[i][j] || j == i) {
        continue;
      }
      int tog = 0;
      for (int k = 0; k < cnt; ++k) {
        tog += can[i][k] && can[j][k];
      }
      if (tog * 100 >= fri * pr) {
        ans[res++] = j;
      }
    }
    printf("%d: %d", vs[i], res);
    for (int j = 0; j < res; ++j) {
      printf(" %d", vs[ans[j]]);
    }
    printf("\n");
  }
  return 1;
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  while (1) {
    if (!solve()) {
      break;
    }
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
