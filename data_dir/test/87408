#pragma comment(linker,"/STACK:300000000")
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <map>
#include <set>
#include <queue>
#include <iomanip>
#include <memory.h>
#include <cstdio>
#include <sstream>
#include <deque>
#include <bitset>
#include <numeric>
#include <ctime>

using namespace std;

#define show(x) cout << #x << " = " << (x) << endl;
#define fori(i,n) for(int i = 0; i < (n); i++)
#define forn(i,n) for(int i = 1; i <= (n); i++)
#define forab(i,a,b) for(int i = (a); i <= (b); i++)
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
const double pi = 3.1415926535897932384626433832795;
template<class T> T abs(T &a) { return a >= 0 ? a : -a; };
template<class T> T sqr(T &x) { return x * x; }
typedef pair<int,int> ii;
typedef long long ll;
///////////////////////////////////////

int n;
vector<string> w;
vector<vector<int> > g;

vector<string> rev;

map<string,int> id;

int getID(string &s)
{
    int z = sz(id);
    if(id.find(s) == id.end())
    {
        id[s] = z;
        rev.push_back(s);
    }   
    return id[s];
}

void doGraph(int cur)
{
    string &s = w[cur];
    int n = sz(s);
    fori(i,n)
        g[cur].push_back(getID(s[i]+string()));
    fori(i,n)
        for(int j = i+1; j < n; j++)
            g[cur].push_back(getID(string()+s[i]+s[j]));
    fori(i,n)
        for(int j = i+1; j < n; j++)
            for(int k = j+1; k < n; k++)
                g[cur].push_back(getID(string()+s[i]+s[j]+s[k]));
    fori(i,n)
        for(int j = i+1; j < n; j++)
            for(int k = j+1; k < n; k++)
                for(int l = k+1; l < n; l++)
                    g[cur].push_back(getID(string()+s[i]+s[j]+s[k]+s[l]));

}

vector<int> used;
vector<int> p;

bool kuhn(int k)
{
    fori(i,sz(g[k]))
    {
        int to = g[k][i];
        if(used[to])
            continue;
        if(p[to] == -1)
        {
            p[to] = k;
            return true;
        }
        used[to] = true;
        if(kuhn(p[to]))
        {
            p[to] = k;
            return true;
        }
    }
    return false;
}

void no()
{
    cout << -1;
    exit(0);
}

__int32 main()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    cin >> n;
    w.resize(n);
    g.resize(n);
    fori(i,n)
        cin >> w[i];
    fori(i,n)
        doGraph(i);
    used.resize(sz(id));
    p.resize(sz(id),-1);
    fori(i,n)
    {
        used.assign(sz(id),0);
        if(!kuhn(i))
            no();
    }
    vector<string> ans(n);
    fori(i,sz(id))
        if(p[i] != -1)
            ans[p[i]] = rev[i];
    fori(i,n)
        cout << ans[i] << endl;
}