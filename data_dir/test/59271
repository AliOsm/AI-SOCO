#include <bits/stdc++.h>
using namespace std;

typedef long long int64;
const int MAX = 4e6 + 5;
int n, a[MAX], lo[MAX], up[MAX], UP[MAX];
int64 x, y, b[MAX], t[MAX];

int main() {
	scanf("%d%lld%lld", &n, &x, &y);

	for(int i = 1; i <= n; i++)
		scanf("%d", &a[i]);

	sort(a + 1, a + n + 1);

	for(int i = 1; i <= n; i++) {
		b[i] = 1LL * a[i] * y;
		t[i] = t[i - 1] + b[i];
	}

	int64 sol = 1LL * x * n;

	int l = 4e6;

	for(int i = 1; i <= l; i++) {
		lo[i] = lower_bound(a + 1, a + n + 1, i) - a;
		up[i] = upper_bound(a + 1, a + n + 1, i) - a;
		int64 v = 1LL * y * i - x;
		UP[i] = upper_bound(b + 1, b + n + 1, v) - b;
	}

	for(int i = 2; i <= l; i++) {
		int last = 1;
		int64 cost = 0;
		for(int j = i; j <= l; j += i) {
			int st = lo[last];
			int nd = up[j] - 1;
			int p = UP[j] - 1;

			if(p < st) {
				int64 sum = t[nd] - t[st - 1];
				cost += 1LL * (nd - st + 1) * y * j - sum;
			}

			else if(p > nd)
				cost += 1LL * (nd - p + 1) * x;

			else {
				int64 sum = t[nd] - t[p];
				cost += 1LL * (nd - p) * y * j - sum;
				cost += 1LL * (p - st + 1) * x;
			}
			
			if(nd == n)
				break;

			last = j + 1;
		}

		sol = min(sol, cost);
	}

	printf("%lld\n", sol);
	return 0;
}