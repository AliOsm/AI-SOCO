

#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <unordered_set>
#include <bitset>


using namespace std;



#define pb push_back
#define pii pair<int, int>
#define mp make_pair
#define ull unsigned long long
#pragma comment(linker, "/STACK:64000000")
#define null NULL
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define fornr(i, n) for (int i = (n); i >= 0; --i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)
#define all(a) a.begin(), a.end()
#define vi vector<int>
#define v(a) vector<a>

//typedef long double ld;
typedef long double ld;
typedef pair<ld, ld> pldld;
typedef long long ll;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;


typedef unsigned int ui;
typedef unsigned char uc;
const int infi = 1e9 + 7;
const ll infl = 2e18 + 7;

/*
template <class T1, class T2>
istream & operator >> (istream &in, pair<T1, T2> a) {
return in >> a.first >> a.second;
}*/

/*
const int MAX_MEM = 9e8;
int mpos = 0;
char mem[MAX_MEM];
inline void * operator new ( size_t n ) {
char *res = mem + mpos;
mpos += n;
assert(mpos <= MAX_MEM);
return (void *)res;
}
inline void operator delete ( void * ) { }

inline void * operator new [] ( size_t ) { assert(0); }
inline void operator delete [] ( void * ) { assert(0); }
*/

static const int buf_size = 4096;

inline int getChar() {
	static char buf[buf_size];
	static int len = 0, pos = 0;
	if (pos == len)
		pos = 0, len = fread(buf, 1, buf_size, stdin);
	if (pos == len)
		return -1;
	return buf[pos++];
}

inline int readChar() {
	int c = getChar();
	while (c <= 32)
		c = getChar();
	return c;
}

inline int readInt() {
	int s = 1, c = readChar();
	int x = 0;
	if (c == '-')
		s = -1, c = getChar();
	while ('0' <= c && c <= '9')
		x = x * 10 + c - '0', c = getChar();
	return s == 1 ? x : -x;
}

typedef pair<string, string> pss;
vector<pair<string, int> > tmp;
vector<int> ar1, ar2;
int used[100500];
int check(string &s) {
	forn(i, (int)s.size())
		if (s[i] < '0' || s[i] > '9')
			return 0;
	if (!s.size())
		return 0;
	if (s[0] == '0')
		return 0;
	return 1;
}
int get1(string &s) {
	int ans = 0;
	forn(i, (int)s.size()) {
		ans *= 10;
		ans += s[i] - '0';
	}
	return ans;
}
vector<pii> qwe;

vector<string> ans;
string get1(int a) {
	string ans;
	while (a) {
		ans += a % 10 + '0';
		a /= 10;
	}
	reverse(all(ans));
	return ans;
}
void add_ans(string a, string b) {
	ans.pb("move " + a + ' ' + b);
	return;
}

int used1[1000000];

int main() {
	srand(time(null));
	cin.sync_with_stdio(false);
	cin.tie(0);

//	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	//freopen("floor.in", "r", stdin); freopen("floor.out", "w", stdout);
	int n;
	cin >> n;
	int sum = 0;
	forn(i, n) {
		string s;
		int a;
		cin >> s >> a;
		sum += a;
		if (check(s)) {
			int b = get1(s);
			used1[b] = 1;
			if (b < 1 || b > n) {
				tmp.pb(mp(s, a));
				continue;
			}
			qwe.pb(mp(b, a));
		}
		else
			tmp.pb(mp(s, a));
	}
	forn(i, (int)qwe.size()) {
		int pos = qwe[i].first;
		int flag = qwe[i].second;
		used[pos] = 1;
		if (flag) {
			if (pos <= sum) {
				continue;
			}
			ar2.pb(pos);
		}
		else {
			if (pos <= sum)
				ar1.pb(pos);
		}
	}
	int asdqwe;
	for (int i = 999999; i; --i) {
		if (used1[i])
			continue;
		asdqwe = i;
		break;
	}
	vector<int> fr1, fr2;
	for (int i = 1; i <= sum; ++i)
		if (!used[i])
			fr1.pb(i);
	for (int i = sum + 1; i <= n; ++i)
		if (!used[i])
			fr2.pb(i);
	if (fr1.empty() && fr2.empty() && ar1.size() && ar2.size()) {
		int a = ar1.back();
		ar1.pop_back();
		fr1.push_back(a);
		add_ans(get1(a), get1(asdqwe));
		tmp.pb(mp(get1(asdqwe), 0));
	}
	while (ar1.size() || ar2.size()) {
		if (ar1.size() && fr2.size()) {
			int a = ar1.back();
			ar1.pop_back();
			int b = fr2.back();
			fr2.pop_back();
			add_ans(get1(a), get1(b));
			fr1.push_back(a);
		}
		if (ar2.size() && fr1.size()) {
			int a = ar2.back();
			ar2.pop_back();
			int b = fr1.back();
			fr1.pop_back();
			add_ans(get1(a), get1(b));
			fr2.pb(a);
		}
	}
	forn(i, tmp.size()) {
		string a = tmp[i].first;
		int flag = tmp[i].second;
		if (flag) {
			int b = fr1.back();
			fr1.pop_back();
			add_ans(a, get1(b));
		}
		else {
			int b = fr2.back();
			fr2.pop_back();
			add_ans(a, get1(b));
		}
	}
	cout << ans.size() << '\n';
	forn(i, (int)ans.size())
		cout << ans[i] << '\n';

	return 0;
}