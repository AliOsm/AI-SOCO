#include <string.h>
#include <assert.h>
#include <cassert>
#include <unordered_map>
 
#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <stack>
#include <queue>
#include <set>
 
#include <map>
#include <vector>
#include <string>
#include <stdlib.h>
#include <cassert>
 
#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf
 
#define pf printf
#define mp make_pair
#define N 300000
 
const int mod = 998244353;
 
using namespace std;
 
string s[N],t[N];
int n;
int f[N],lt[N],ut[N];
int low, up;

bool check(const vector<int> & vec) {
	int max_v = -1, min_v = -1;
	int ret = 0;
	for(int i = vec.size()-1; i >=0;--i) {
		if(vec[i] < max_v) {
			ret = 1;
		}
		if(max_v==-1 || vec[i]>max_v) {
			max_v = vec[i];
		}
		if(min_v==-1||vec[i]<min_v) {
			min_v = vec[i];
		}
	}
	low = min_v;
	up = max_v;
	return ret;
}

int main() {
	cin>>n;
	int tot = 0;
	vector<int> lw,uw;
	fr(i,0,n) {
		int t;
		cin>>t;
		vector<int> ft;
		fr(j,0,t) {
			int x;
			cin>>x;
			ft.pb(x);
		}
		int ret = check(ft);
		if(ret){
			f[i] = 1;
			tot++;
		}
		else {
			f[i] = 0;
			lt[i] = low;
			ut[i] = up;
			lw.pb(low);
			uw.pb(up);
		}
	}
	sort(lw.begin(), lw.end());
	sort(uw.begin(), uw.end());
	ll ans = 0;
	fr(i,0,n) {
		//printf("i = %d f = %d\n",i,f[i]);
		if(f[i]) {
			ans += n;
		}
		else {
			int lower = lt[i];
			auto it = upper_bound(uw.begin(), uw.end(),lower)-uw.begin();
			//printf("lower = %d size = %d tot = %d\n",lower, uw.size()-it, tot);
			ans += uw.size() - it;
			ans += tot;
		}
	}
	cout<<ans<<endl;
}
