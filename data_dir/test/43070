#include <bits/stdc++.h>
using namespace std;
vector<int> adjList[100005];
int tim = 0;
stack<int> mastack;
bool inStack[100005];
vector<int> Prices[100005];
int Found[100005];
int lowRank[100005];
bool visited[100005];
void DFS(int node)
{
    visited[node] = true;
    mastack.push(node);
    inStack[node] = true;
    Found[node] = lowRank[node] = tim++;
    for(int i = 0;i < adjList[node].size();i++)
    {
        if(!visited[adjList[node][i]])
        {
            DFS(adjList[node][i]);
            lowRank[node] = min(lowRank[node],lowRank[adjList[node][i]]);
        } else if(inStack[adjList[node][i]])
        {
            lowRank[node] = min(lowRank[node],Found[adjList[node][i]]);
        }
    }
    if(lowRank[node] == Found[node])
    {
        while(mastack.top() != node)
        {
            int tope = mastack.top();
            mastack.pop();
            Prices[node].push_back(tope);
            inStack[tope] = false;
        }
        inStack[node] = false;
        Prices[node].push_back(node);
        mastack.pop();
    }
}
bool comp(vector<int> &a,vector<int>& b)
{
    if(a.size() > b.size())
        return true;

    return false;
}
int main()
{
    int n;
    cin >> n;
    vector<int> Way(n);
    for(int i = 0;i < n;i++)
        scanf("%d",&Way[i]),adjList[i+1].push_back(Way[i]);
    if(n == 1)
    {
        cout << "1";
        return 0;
    }
    for(int i = 1;i <= n;i++)
    {
        if(!visited[i])
            DFS(i);
    }
    vector<long long > Sz;
    for(int i = 1;i <= n;i++)
        Sz.push_back(Prices[i].size());
    sort(Sz.begin(),Sz.end(),greater<long long>());
    long long StSize = Sz[0] + Sz[1];
    long long Best = StSize * StSize;
    for(int i = 2;i < n;i++)
        Best +=  (Sz[i] * Sz[i]);
    cout << Best;
}

