#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define int long long
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
 
vector<vector<int> >adj;
int dp[300005];
int mx=0;
int parent[300005];
void dfs(int ver,int pr)
{
    parent[ver]=pr;
    vector<int>mm;
    for(auto i:adj[ver])
    {
        if(i!=pr)
        {
            dfs(i,ver);
            mm.push_back(dp[i]);
        }
    }
    sort(mm.begin(),mm.end(),greater<>());
    int sz=mm.size();
    dp[ver]++;
    if(sz>0)
    {
        int zz=0;
        if(parent[ver]!=0)  
            zz++;
        dp[ver]+=mm[0]+sz-1;
        mx=max(mx,dp[ver]+zz);
    }
    if(sz>1)
    {
        int zz=0;
        if(parent[ver]!=0)
            zz++;        
        mx=max(mx,1+mm[0]+mm[1]+sz-2+zz);
    }
}

signed main()
{
     ios_base::sync_with_stdio(false);
     cin.tie(NULL);  
   
 #ifndef ONLINE_JUDGE
    if(fopen("INPUT.txt","r"))
    {
    freopen ("INPUT.txt" , "r" , stdin);
    freopen ("OUTPUT.txt" , "w" , stdout);
    }
 #endif
 
// -------------------------------------Code starts here---------------------------------------------------------------------     

    int t;
    cin>>t;
    while (t--)
    {    
        int n;
        cin>>n;
        adj.clear();
        adj.resize(n+1);
        int x,y;
        for(int i=0;i<n-1;i++)
        {
            cin>>x>>y;
            adj[x].push_back(y);
            adj[y].push_back(x);
        }
        mx=0;
        for(int i=1;i<=n;i++)
            dp[i]=0;
        if(n>2)
        {
            for(int i=1;i<=n;i++)
            {
                if(adj[i].size()>1)
                {
                    dfs(i,0);
                    break;
                }
            }
        }
        else
        {
            dfs(1,0);
        }        
        cout<<mx<<'\n';
    }

// -------------------------------------Code ends here------------------------------------------------------------------
     clock_t clk;
 	clk = clock();
 
    clk = clock() - clk;
 	cerr << fixed << setprecision(6) << "Time: " << ((double)clk)/CLOCKS_PER_SEC << "\n";
 	return 0;
 }