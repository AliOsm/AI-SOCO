#include <iostream>

using namespace std;

const int N = 1e5 + 100;

typedef long long ll;
ll n, m, a[2*N], t[4*N];

void build(int v, int l, int r){
	if(l == r){
		t[v] = a[l];
		return;
	}
	else{ 
		int mid = (l + r)>>1;
		build(v+v, l, mid);
		build(v+v+1, mid+1, r);
	}
}

void update_el(int v, int l, int r, int pos, int val){
	if(l == r){
		t[v] = val;
	}
	else{
		int mid = (l + r)>>1;
		if(pos<= mid){
			update_el(v+v, l, mid, pos, val);
		}
		else{
			update_el(v+v+1, mid + 1, r, pos, val);
		}
	}
}

void update(int v, int tl, int tr, int l, int r, int val){
	if(l > r) return;
	if(l == tl && tr == r){
		t[v] += val;
	}
	else{
		int mid = (tl + tr)>>1;
		update(v+v, tl, mid, l, min(mid, r), val);
		update(v+v+1, mid+1, r, max(l, mid+1), r, val);
	}
}

long long get (int v, int tl, int tr, int pos) {
	if (tl == tr)
		return t[v];
	int mid = (tl + tr)>>1;
	if (pos <= mid)
		return t[v] + get (v+v, tl, mid, pos);
	else
		return t[v] + get (v+v+1, mid+1, tr, pos);
}

ll add;

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> m;
	for(int i = 0; i < n; i++){
		cin >> a[i];
	}
	for(int i = 0; i < m; i++){
		int op;
		cin >> op;
		if(op == 1){
			int pos, val;
			cin >> pos >> val;
			pos--;
			a[pos] = val - add;
		}	
		else if(op == 2){
			int y;
			cin >> y;
			add+=y;
		}
		else if(op == 3){
			int pos;
			cin >> pos;
			pos--;
			cout << a[pos] + add << endl;
		}
	}
}