#include <iostream>
#include <bits/stdc++.h>
#define ll long long

using namespace std;
vector < int > v[100100];
ll c[5][100100] , cost = 0 , Ans[100100] ,n , dp[100100][4][4];
const ll Inf = 1e18;

ll DFS(int Node , int p , int Lasttype , int Lasttype2){

    if(dp[Node][Lasttype][Lasttype2] != -1)  return dp[Node][Lasttype][Lasttype2];
    ll Res = Inf;
    bool go = false;
    for(auto j : v[Node]){
        if(j != p){
            go = true;
            for(int k = 1;k<=3;k++){
                if(k != Lasttype2 && k != Lasttype)  Res = min(Res , c[k][Node] + DFS(j , Node , k , Lasttype));
            }
        }
    }
    if(go)  return dp[Node][Lasttype][Lasttype2] = Res;
    for(int k = 1;k<=3;k++){
        if(k != Lasttype2 && k != Lasttype)  return c[k][Node];
    }

}

void path(int Node , int p , int Lasttype , int Lasttype2){

    ll optimal = DFS(Node , p , Lasttype , Lasttype2);
    for(auto j : v[Node]){
        if(j != p){
            for(int k = 1;k<=3;k++){
                if(k != Lasttype2 && k != Lasttype && c[k][Node] + DFS(j , Node , k , Lasttype) == optimal)  {
                    Ans[Node] = k;
                    path(j , Node , k , Lasttype);
                }
            }
        }
    }
    for(int k = 1;k<=3;k++){
        if(k != Lasttype2 && k != Lasttype)  {
                Ans[Node] = k;
                for(int i = 1;i<=n;i++)  cout << Ans[i] << " ";
                exit(0);

        }
    }
}

int main()
{
    memset(dp , -1 , sizeof(dp));
    cin >> n;
    for(int i = 1;i<=n;i++)  cin >> c[1][i];
    for(int i = 1;i<=n;i++)  cin >> c[2][i];
    for(int i = 1;i<=n;i++)  cin >> c[3][i];
    for(int i = 0;i<n - 1;i++){
        int x,y;  cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }
    int Node;
    for(int i =1;i<=n;i++)  {
            if(v[i].size() >= 3)  return cout << -1 , 0;
            if(v[i].size() == 1)  Node = i;
    }
    cout << DFS(Node , -1 , 0 , 0) << '\n';
    path(Node , -1 , 0 , 0);
    return 0;
}
