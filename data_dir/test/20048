#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <algorithm>
#include <functional>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <tuple>
#include <numeric>
#define MAXN 1000
#define ll long long
using namespace std;


vector<int> candies[222];
int A[222];
int B[222];

int main() {
    int n,m;
    cin>>n>>m;
    for(int i=0;i<m;i++) {
        cin>>A[i];
        cin>>B[i];
        A[i]--;
        B[i]--;
    }
    
    
    for(int st=0;st<n;st++) {
        
        vector<int> train_candies;
        for(int i=0;i<n;i++) {
            candies[i].clear();
        }
        for(int i=0;i<m;i++) {
            candies[A[i]].push_back(B[i]);
        }
        
        int curr = st;
        int num_displacements = m;
        for(int step=0;;step++) {
            int j=0;
            for(int x : train_candies) {
                if (x != curr) {
                    train_candies[j++] = x;
                } else {
                    //printf("delivering at %d\n",curr);
                    candies[curr].push_back(curr);
                    num_displacements--;
                }
            }
            train_candies.resize(j);
            //printf("Train has %d\n",(int)train_candies.size());
            if (num_displacements == 0) {
                printf("%d ",step);
                break;
            }
            
            int min_dist = -1;
            int id = -1;
            for(int i=0;i<candies[curr].size();i++) {
                if (candies[curr][i]!=curr) {
                    int dist = (candies[curr][i]-curr+n)%n;
                    if (min_dist == -1 || dist > min_dist) {
                        id = i;
                        min_dist = dist;
                    }
                }
            }
            
            if (id != -1) {
                int i = id;
                //printf("Taking %d from %d\n",candies[curr][i], curr);
                train_candies.push_back(candies[curr][i]);
                for(int j=i+1;j<candies[curr].size();j++) {
                    candies[curr][j-1]=candies[curr][j];
                }
                candies[curr].resize(candies[curr].size()-1);
            }
            
            curr = (curr + 1)%n;
        }
    }
    cout << endl;

    
}
