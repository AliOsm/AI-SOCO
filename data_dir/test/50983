#include <bits/stdc++.h>

using namespace std;

#define SZ(x) ((int)(x).size())
#define PB(x) push_back(x)
#define MEMSET(x,v) memset(x,v,sizeof(x))
#define REP(i,n) for(int (i)=0;(i)<(n);++(i))
#define x(t) get<0>(t)
#define y(t) get<1>(t)
#define z(t) get<2>(t)

template<class A, class B> inline bool mina(A &x, B y) {return (x > y)?(x=y,1):0;}
template<class A, class B> inline bool maxa(A &x, B y) {return (x < y)?(x=y,1):0;}

typedef long long LL;
typedef tuple<int, int> T2;
typedef tuple<int, int, int> T3;

#define INF (0x3f3f3f3f)

#define MAXN (405)

T2 edges[MAXN * MAXN];
int dist[MAXN][MAXN];
vector<int> adj[MAXN];
int d[MAXN];

int main() {
    int N, M;
    cin >> N >> M;
    int u, v;
    bool in_rail = false;
    REP(i, M) {
        cin >> u >> v;
        if (u > v) swap(u, v);
        u--, v--;
        edges[i] = T2(u, v);
        if (u == 0 && v == N - 1) {
            in_rail = true;
        }
    }

    if (!in_rail) {
        REP(i, M) {
            dist[x(edges[i])][y(edges[i])] = true;
            dist[y(edges[i])][x(edges[i])] = true;
        }
    } else {
        REP(i, N) REP(j, N) dist[i][j] = true;
        REP(i, M) {
            dist[x(edges[i])][y(edges[i])] = false;
            dist[y(edges[i])][x(edges[i])] = false;
        }
    }
    REP(i, N) {
        REP(j, N) {
            if (i != j && dist[i][j]) adj[i].push_back(j);
        }
    }
    MEMSET(d, INF);
    queue<int> Q;
    Q.push(0);
    d[0] = 0;
    while (!Q.empty()) {
        u = Q.front();
        Q.pop();
        for (auto v : adj[u]) {
            if (d[v] > d[u] + 1) {
                d[v] = d[u] + 1;
                Q.push(v);
            }
        }
    }
    if (d[N - 1] != INF) {
        printf("%d\n", d[N - 1]);
    } else {
        printf("-1\n");
    }
    return 0;
}
