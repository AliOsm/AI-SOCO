#include<bits/stdc++.h>
using namespace std;

#define int           long long 
#define S             second
#define F             first
#define pb            push_back
#define ppb           pop_back()
#define ppb           pop_back()
#define B(c)          (c).begin()
#define E(c)          (c).end()
#define all(c)        (c).begin(),(c).end()
#define rall(c)       (c).rbegin(),(c).rend() 
#define lb            lower_bound
#define si(c)         (int)((c).size())
#define lcm(a,b)      (a * (b / __gcd(a,b)))  
#define inf           (int)(1e18)
#define err           cerr << "move" << '\n';
#define endl          '\n'
#define mp            make_pair

typedef vector<int>                           vi;
typedef pair<int,int>                         pii;
typedef vector<pii>                           vpi;
typedef vector<vector<int> >                  vvi;;
typedef priority_queue<pii, vector<pii>, greater<pii> > pq;

void solve(){
    int n, T;
    double p;
    cin >> n >> p >> T;
    double dp[n+1][T+1], ans = 0, pb[n+1][T+1];
    memset(dp, 0, sizeof(dp));
    memset(pb, 0, sizeof(pb));
    pb[0][0] = 1;
    for(int t = 1; t <= T; t++)
        pb[0][t] = (1-p)*pb[0][t-1];
    for(int i = 1; i <= n; i++){
        for(int t = 1; t <= T; t++){
            dp[i][t] = pb[i-1][t-1]*p+dp[i][t-1];
            pb[i][t] = pb[i-1][t-1]*p+pb[i][t-1]*(1-p);
        }
    }
    for(int i = 1; i <= n; i++){
        ans += dp[i][T];
    }
    cout << ans << endl;
}

signed main(){

    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);    
    int t = 1;
    clock_t start, end; 
    start = clock(); 

    cout << fixed << setprecision(20);
    

    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
    freopen("error.txt", "w", stderr);
    #endif
    
    //cin >> t;

    while(t--){
        solve();
    }

    end = clock();
    double time_taken = double(end - start) / double(CLOCKS_PER_SEC); 
    //cerr<<time_taken;
}