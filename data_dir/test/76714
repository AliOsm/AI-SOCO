#define _CRT_SECURE_NO_WARNINGS 1
#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <numeric>
#include <sstream>
#include <cmath>
#include<cstring>
#include<iomanip>
#include<queue>
#include<functional>
#include<iterator>
#include<istream>
using namespace std;
#define pi 3.141592653589793
#define ii pair<int,int>
#define llll pair<ll,ll>
#define ll long long
#define p10(ans) printf("%0.10f\n", ans);
#define pr(ans) printf("%d\n", ans);
#define scc(x)  scanf("%c", &c);
#define pll(ans) printf("%lld\n", ans);
#define scll(x) scanf("%lld",&x);
#define sci(x)  scanf("%d",&x);
#define pc(ans)  printf("%c", ans);
#define ps(s)    printf("%s\n", s.c_str());
#define mod 1000000007
#define mem(arr,d) memset(arr,d,sizeof(arr))
#define ninf -10000000000000000;
#define inf 10000000000000000;
/*ll power(ll base, ll exp) {
	base %= mod;
	ll result = 1;
	while (exp > 0) {
		if (exp & 1)
			result = (result * base) % mod;
		base = (base * base) % mod;
		exp >>= 1;
	}
	return result;
}
*/
/*long long gcd(long long a, long long b)
{
	if (b == 0)return a; return gcd(b, a%b);
}
long long lcm(long long a, long long b) {
	return  a * b / gcd(a, b);
}
*/
int o,n,m;
int ans;
int par[1000010];
int rankk[1000010];
char arr[1010][1010];
bool vis[1010][1010];
map<pair<int, int>,int>mp;
int ansarr[1010][1010];
void init()
{
	for (int i = 0; i < o; ++i) { par[i] = i; rankk[i] = 1;}
}
bool valid(int i, int j)
{
	if (vis[i][j] || i < 0 || j<0 || i>(n - 1) || j>(m - 1) || arr[i][j] == '*')return false;
	return true;
}

int findset(int u)
{
	if (u == par[u])return u;
	else return par[u] = findset(par[u]);
}
void link(int u, int v)
{
	int a = findset(u); int b = findset(v);
	if (a != b)
	{
		par[b] = a;
		rankk[a] += rankk[b];
	}
}
void dfs(int i, int j)
{
	vis[i][j] = 1;
	if (valid(i + 1, j)) { link((i*m + j), ((i + 1)*m + j));  dfs(i + 1, j); }
	if (valid(i - 1, j)) { link((i*m + j), ((i - 1)*m + j));  dfs(i - 1, j); }
	if (valid(i, j + 1)) { link((i*m + j), (i*m + j+1));  dfs(i, j + 1); }
	if (valid(i, j - 1)) { link((i*m + j), (i*m + j-1));  dfs(i, j - 1); }
}
void dfs2(int i, int j)
{
	vis[i][j]=1;
	if (valid(i + 1, j))dfs2(i + 1, j);
	else 
	{
		if ((i + 1) < n)
		{
			if (arr[i + 1][j] == '*'&&mp.count({ par[(i*m + j)],((i + 1)*m + j) })==0)
			{
				ansarr[i + 1][j] += rankk[par[i*m + j]];
				mp[{ par[(i*m + j)], ((i + 1)*m + j) }] = 1;
			}
		}
	}
	if (valid(i - 1, j))dfs2(i - 1, j);
	else
	{
		if ((i-1) >= 0)
		{
			if (arr[i - 1][j] == '*'&&mp.count({ par[(i*m + j)],((i - 1)*m + j) })==0)
			{
				ansarr[i - 1][j] += rankk[par[i*m + j]];
				mp[{ par[(i*m + j)], ((i - 1)*m + j) }] = 1;
			}
		}
	}
	if (valid(i , j+1))dfs2(i , j+1);
	else
	{
		if ((j + 1) < m)
		{
			if (arr[i][j+1] == '*'&&mp.count({ par[(i*m + j)],((i)*m + j+1) })==0)
			{
				ansarr[i][j+1] += rankk[par[i*m + j]];
				mp[{ par[(i*m + j)], ((i)*m + j+1) }] = 1;
			}
		}
	}
	if (valid(i, j-1))dfs2(i, j-1);
	else
	{
		if ((j-1) >= 0)
		{
			if (arr[i][j-1] == '*'&&mp.count({ par[(i*m + j)],((i)*m + j-1) })==0)
			{
				ansarr[i][j-1] += rankk[par[i*m + j]];
				mp[{ par[(i*m + j)], ((i)*m + j-1) }] = 1;
			}
		}
	}
}
int main()
{
	char c1,c2;
	sci(n); sci(m);
	o = n*m;
	init();
	for (int i = 0; i < n; ++i)
	{
		scanf("%s", arr[i]);
	}
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < m; ++j)
		{
			if (arr[i][j] == '*')continue;
			else if (!vis[i][j])dfs(i, j);
		}

	}
	mem(vis, 0);

	for (int i = 0; i < o; ++i)par[i] = findset(i);
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < m; ++j)
		{
			if (arr[i][j] == '*')continue;
			else if (!vis[i][j])dfs2(i, j);
		}

	}

	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < m; ++j)
		{
			if (ansarr[i][j] == 0&&arr[i][j]!='*')printf(".");
			else printf("%d", (ansarr[i][j] + 1)%10);
		}
		printf("\n");

	}
  return 0;
}