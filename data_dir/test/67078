#include <bits/stdc++.h>
using namespace std;



set<int> do_swap[300000];

class Solution {
  int n, m;
  vector<int> A, at;
  vector<bool> vis;
  int but = 0;
  void dfs(int a) {
    if (a == but) return;
    while (not do_swap[A[a]].count(A[a - 1]) and not vis[A[a - 1]]) {
      vis[A[a - 1]] = 1;
      dfs(a - 1);
    }
    if (do_swap[A[a]].count(A[a - 1])) {
      swap(A[a], A[a - 1]);
      return dfs(a - 1);
    }
    but = a + 1;
  }
public:
  void run() {
    cin >> n >> m;
    vis.resize(n);
    A.resize(n);
    at.resize(n);
    for (int i = 0; i < n; ++i) cin >> A[i], --A[i], at[A[i]] = i;
    for (int i = 0; i < m; ++i) {
      int a, b; cin >> a >> b; --a, --b;
      do_swap[b].insert(a);
    }
    int Nastya = A.back();
    dfs(n - 1);
    cout << n - 1 - (find(A.begin(), A.end(), Nastya) - A.begin()) << '\n';
  }
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  Solution().run();
}
