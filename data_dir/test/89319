//#pragma GCC optimize("Ofast")
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0);}

int const maxn = 200005;

int par[maxn];
int rnk[maxn];

pair<int,int> to[maxn];
pair<int,int> from[maxn];
int used[maxn];
int we[maxn];

inline int get_par(const int x)
{
    return par[x] == x ? x : par[x] = get_par(par[x]);
}

inline void uni(int x, int y)
{
    x = get_par(x);
    y = get_par(y);
    if (x != y)
    {
        if (rnk[x] <= rnk[y])
        {
            par[x] = y;
        }
        else
        {
            par[y] = x;
        }
        if (rnk[x] = rnk[y])
            ++rnk[y];
    }
}


int main()
{
//    freopen("in.txt", "r", stdin);
//    freopen("out.txt", "w", stdout);
    ios_base::sync_with_stdio(false);

    int n,m;
    cin >> n >> m;

    for(int i = 1; i <= m; ++i)
    {
        int a,b,c;
        cin >> a >> b >> c;
        auto p = make_pair(c, i);
        if (to[a] < p)
            to[a] = p;
        if (to[b] < p)
            to[b] = p;
        from[i] = {a,b};
        we[i] = c;
    }

    vector<int> num(m);
    for(int i = 0; i < m; ++i)
        num[i] = i + 1;

    for(int i = 0; i < maxn; ++i)
        par[i] = i;


    sort(begin(num), end(num), [&](const int& x, const int& y) {return we[x] > we[y];});

    int res = 0;
    for(int i : num)
    {
        int x,y;
        tie(x,y) = from[i];
        x = get_par(x);
        y = get_par(y);
        if (x == y)
        {
            if (!used[x])
            {
                res += we[i];
                used[x] = 1;
            }
        }
        else
        {
            int r = used[x] + used[y];
            if (r == 0)
                uni(x,y);
            else if (r == 1)
            {
                used[x] = used[y] = 1;
            }
            if (r < 2)
                res += we[i];

        }
    }
    cout << res << endl;
}
