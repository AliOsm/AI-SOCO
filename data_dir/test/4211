#include <bits/stdc++.h>
using namespace std;

typedef pair <int, int> P;

const int N = 2e5 + 10;

vector <P> G[N];
vector <int> f[N];
vector <string> ans;
queue <P> q;
int d[N];
int n, m, k;
char rec[N];

void bfs(){
	int u, v, dd;
	P pa;
	while (!q.empty()){
		pa = q.front();
		q.pop();
		u = pa.first;
		dd = pa.second;
		for (int i = 0; i < G[u].size(); i++){
			v = G[u][i].first;
			if (d[v] == -1){
				d[v] = dd + 1;
				q.push(make_pair(v, dd + 1));
			}
		}
	}
}

void dfs(int x){
	if (ans.size() >= k) return;
	if (x == n + 1){
		ans.push_back(rec + 1);
		return;
	}
	for (int i = 0; i < f[x].size(); i++){
		rec[f[x][i]] = '1';
		dfs(x + 1);
		rec[f[x][i]] = '0';
	}
}

int main(){
	int u, v;
	scanf("%d %d %d",&n,&m,&k);
	for (int i = 1; i <= m; i++){
		scanf("%d %d",&u,&v);
		G[u].push_back(make_pair(v, i));
		G[v].push_back(make_pair(u, i));
	}
	q.push(make_pair(1, 0));
	memset(d, -1, sizeof(d));
	d[1] = 0;
	bfs();
	for (int i = 2; i <= n; i++){
		for (int j = 0; j < G[i].size(); j++){
			if (d[i] == d[G[i][j].first] + 1) f[i].push_back(G[i][j].second);
		}
	}
	for (int i = 0; i <= m; i++) rec[i] = '0';
	dfs(2);
	printf("%d\n",(int)ans.size());
	for (int i = 0; i < ans.size(); i++)
		cout << ans[i] << '\n';
	return 0;
}