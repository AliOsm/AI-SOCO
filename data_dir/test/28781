#include<iostream>
#include<sstream>
#include<algorithm>
#include<set>
#include<map>
#include<queue>
#include<complex>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cassert>
using namespace std;

#define rep(i,n) for(int i=0;i<(int)n;i++)
#define each(i,c) for(__typeof(c.begin()) i=c.begin();i!=c.end();i++)
#define pb push_back
#define mp make_pair
#define all(c) c.begin(),c.end()
#define dbg(x) cerr<<__LINE__<<": "<<#x<<" = "<<(x)<<endl

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pi;
const int inf=(int)1e9;
const double EPS=1e-9, INF=1e12;

int n, *fail;
string in[100010];
vector<vi> e;

int *buildFail(const char *p) {
  int m = strlen(p);
  int *fail = new int[m+1];
  int j = fail[0] = -1;
  for (int i = 1; i <= m; ++i) {
    while (j >= 0 && p[j] != p[i-1]) j = fail[j];
    fail[i] = ++j;
  }
  return fail;
}
ll rec(int c, int p){
	ll res = 0;
	rep(i, e[c].size()){
		int t = p;
		rep(j, in[e[c][i]].size()){
			while(t >= 0 && in[e[c][i]][j] != in[0][t]) t = fail[t];
			if(++t == in[0].size()){
				res++;
				t = fail[t];
			}
		}
		res += rec(e[c][i], t);
	}
	return res;
}
int main(){
	
	cin >> n;
	e.resize(n);
	for(int i = 1; i < n; i++){
		int p;
		cin >> p;
		p--;
		e[p].pb(i);
		cin >> in[i];
	}
	cin >> in[0];
	
	fail = buildFail(in[0].c_str());
	cout << rec(0, 0) << endl;
	
	return 0;
}
