#include <bits/stdc++.h>

using namespace std;

#define out(x) cerr << #x"=" << x << endl

long long fac[20];
int n, k;
int ps;
int cnt;
int pw[10];
vector<int> v;

int getnum(int msk, int sz) {
  int res = 0;
  for (int i = 0; i < sz; ++i) {
    res += pw[i] * (msk >> i & 1 ? 7 : 4);
  }
  return res;
}

void init() {
  pw[0] = 1;
  for (int i = 1; i <= 9; ++i) {
    pw[i] = pw[i - 1] * 10;
  }
  for (int i = 1; i <= 9; ++i) {
    for (int j = 0; j < (1 << i); ++j) {
      v.push_back(getnum(j, i));
    }
  }
  sort(v.begin(), v.end());
  /*
  for (int i = 0; i < v.size(); ++i) {
    printf("%d ", v[i]);
  }*/
}

vector<int> gen(int k, const vector<int> &v) {
  int sz = v.size();
  vector<int> res;
  vector<int> v2 = v;
  int t = k / fac[sz - 1];
  res.push_back(v2[t]);
  if (v.size() == 1)
    return res;
  for (int i = t; i < (int)v2.size() - 1; ++i) {
    v2[i] = v2[i + 1];
  }
  v2.pop_back();
  vector<int> tmp = gen(k % fac[sz - 1], v2);
  for (int i = 0; i < tmp.size(); ++i) {
    res.push_back(tmp[i]);
  }
  return res;
}

int check(int x) {
  while (x) {
    int q = x % 10;
    if (q != 7 && q != 4)
      return 0;
    x /= 10;
  }
  return 1;
}

int get(int x) {
  int sz = upper_bound(v.begin(), v.end(), x) - v.begin();
  return sz;
}

int main() {
  init();
  scanf("%d%d", &n, &k);
  k--;
  fac[0] = 1;
  for (int i = 1; ; ++i) {
    fac[i] = fac[i - 1] * i;
    if (fac[i] > k) {
      ps = i;
      break;
    }
  }
  if (n - ps + 1 < 1) {
    puts("-1");
    return 0;
  }
  vector<int> a;
  for (int i = n - ps + 1; i <= n; ++i) {
    a.push_back(i);
  }
  vector<int> b = gen(k, a);
  for (int i = 0; i < b.size(); ++i) {
    if (check(b[i]) && check(i + n - ps + 1)) {
      ++cnt;
    }
  }
  cnt += get(n - ps);
  printf("%d\n", cnt);
  return 0;
}
