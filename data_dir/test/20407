//template by murugappan....Copied from chamow :p

#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define ld long double
#define x first
#define y second
#define pb push_back
#define mp make_pair
#define priq(i,comp) priority_queue( i, vector< i >,comp)
template<class t>
t lcm(t a,t b)
{
    return ((a*b)/__gcd(a,b));
}
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);

//end of template
//graham scan algorithm,reference : geeks for geeks

#define point pair< pair<ll,ll>, pair<ll,ll> >

point refer;

ll orientation(point prev,point cur,point nxt)
{
    ll val=(cur.x.y-prev.x.y)*(nxt.x.x-cur.x.x)-(cur.x.x-prev.x.x)*(nxt.x.y-cur.x.y);
    if(val>0)
        val=1;
    else if(val<0)
        val=-1;
    return val;
}

ll ptdist(point& p,point& q)
{
    ll xval=(q.x.x-p.x.x);
    ll yval=(q.x.y-p.x.y);
    yval*=yval;
    xval*=xval;
    return xval+yval;
}

bool ptcompare(point& p,point& q)
{
    ll val=orientation(refer,p,q);
    if(val==-1)
        return true;
    else if(val==1)
        return false;
    else
    {
        ll pdist,qdist;
        pdist=ptdist(refer,p);
        qdist=ptdist(refer,q);
        return pdist<qdist;
    }
}


point getbtop(stack<point>& s)
{
    point temp=s.top();
    s.pop();
    point req=s.top();
    s.push(temp);
    return req;
}
//end of graham scan



const ll maxn=2e5;
//map< point, ll > bpt,pos;
int main()
{
    /*
        assert(freopen("input.txt","r",stdin));
        assert(freopen("output.txt","w",stdout));
    */
    //inside main
    fastread;
    ll n,m;
    cin>>n;
    point p[maxn];
    for(ll i=0;i<n;i++)
    {
        cin>>p[i].x.x>>p[i].x.y;
        p[i].y.x=0;
    }
    cin>>m;
    for(ll i=n;i<(m+n);i++)
    {
        cin>>p[i].x.x>>p[i].x.y;
        p[i].y.x=1;
    }
    ll minpos=0;
    for(ll i=0;i<(m+n);i++)
    {
        //cin>>p[i].x>>p[i].y;
        {
            if(p[i].x.y<p[minpos].x.y || (p[i].x.y==p[minpos].x.y && p[minpos].x.x>p[i].x.x))
                minpos=i;
        }
    }
    bool can=true;
    refer=p[minpos];
    swap(p[0],p[minpos]);
    sort(p+1,p+m+n,ptcompare);
    for(ll i=0;i<(m+n);i++)
    {
        p[i].y.y=i;
        //cout<<p[i].x.x<<"  "<<p[i].x.y<<"   "<<p[i].y.y<<endl;
    }
    stack<point> s;
    vector< point > good;
    good.pb(p[0]);
    for (ll i=1; i<(n+m); i++)
   {
       // Keep removing i while angle of i and i+1 is same
       // with respect to p0
       while (i < m+n-1 && orientation(refer, p[i],p[i+1]) == 0)
          i++;
        good.pb(p[i]);  // Update size of modified array
   }
//end of main contents

    s.push(good[0]);
   s.push(good[1]);
   s.push(good[2]);

   for (ll i = 3; i < good.size(); i++)
   {
      // Keep removing top while the angle formed by
      // points next-to-top, top, and points[i] makes
      // a non-left turn
      while (orientation(getbtop(s), s.top(), good[i]) != -1)
         s.pop();
      s.push(good[i]);
   }
   point f=s.top();
    while(!s.empty())
    {
        //cout<<"ssss"<<s.top().x.x<<s.top().x.y<<endl;
        if(s.size()>1)
        {
            point st,en;
            st=s.top();
            en=getbtop(s);
            //cout<<"new check\n";
            //cout<<st.x.x<<"   "<<st.x.y<<endl;
            //cout<<en.x.x<<"    "<<en.x.y<<endl;
            ll spos,epos;
            spos=st.y.y;
            epos=en.y.y;
            if(spos>epos)
                swap(spos,epos);
            //cout<<spos<<"   "<<epos<<endl;
            //cout<<pos[mp(-10,0)]<<"tag"<<endl;
            for(ll i=(spos+1);i<epos;i++)
            {
                if(orientation(p[spos],p[i],p[epos])==0)
                {
                    //cout<<"ceh";
                    can=false;
                }
            }
        }
        else
        {
            point st,en;
            st=s.top();
            en=f;
            //cout<<"new check\n";
//            cout<<st.x.x<<"   "<<st.x.y<<endl;
//            cout<<en.x.x<<"    "<<en.x.y<<endl;
            ll spos,epos;
            spos=st.y.y;
            epos=en.y.y;
            if(spos>epos)
                swap(spos,epos);
            //cout<<spos<<"   "<<epos<<endl;
            //cout<<pos[mp(0,-10)]<<"tag"<<endl;
            for(ll i=0;i<(m+n);i++)
            {
                if(p[i].y.x==0)
                    continue;
                if(i==spos || i==epos)
                    continue;
                if(orientation(p[spos],p[i],p[epos])==0)
                {
                    can=false;
//                    cout<<p[spos].x.x<<"  "<<p[spos].x.y<<endl;
//                    cout<<p[epos].x.x<<"  "<<p[epos].x.y<<endl;
//                    cout<<p[i].x.x<<"  "<<p[i].x.y<<endl;
//                    cout<<"nnn";
                }
            }
        }
        if(s.top().y.x==1)
        {
            can=false;
            //cout<<s.top().x.x<<"  "<<s.top().x.y<<endl;
            //cout<<"yeah";
        }
        s.pop();
    }
    if(can)
        cout<<"YES";
    else
        cout<<"NO";
    return 0;
}


