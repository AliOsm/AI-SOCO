#include <iostream>
#include <vector>
#include <algorithm>
#include <iterator>

using namespace std;

vector<vector<int>> a;
vector<int> cats;

int main()
{
	ios::sync_with_stdio (false);

	int dfs (int, int, int, int);

	a.assign (*istream_iterator<int>(cin), vector<int>());
	cats.resize (a.size());
	
	int m = *istream_iterator<int>(cin);

	copy_n (istream_iterator<int>(cin), cats.size(), cats.begin());

	for (size_t i = 0; i < a.size() - 1; i++) {
		int p = *istream_iterator<int>(cin) - 1, q = *istream_iterator<int>(cin) - 1;
		a[p].push_back (q);
		a[q].push_back (p);
	}

	cout << dfs (0, 0, m, 0);
}

int dfs (int v, int p, int m, int in_seq)
{
	if ((in_seq += cats[v]) > m)
		return 0;

	if (cats[v] == 0)
		in_seq = 0;

	if (v != 0 && a[v].size() == 1)
		return 1;			// is leaf

	int cnt = 0;

	for (size_t i = 0; i < a[v].size(); i++) {
		if (a[v][i] != p)
			cnt += dfs (a[v][i], v, m, in_seq);
	}

	return cnt;
}
