#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
#define sc(a) scanf("%d", &a)
#define sc2(a, b) scanf("%d%d", &a, &b)
#define sc3(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define pri(x) printf("%d\n", x)
#define prie(x) printf("%d ", x)
#define mp make_pair
#define pb push_back
#define BUFF ios::sync_with_stdio(false);
#define db(x) cerr << #x << " == " << x << endl
#define dbs(x) cerr << x << endl
#define imprime(x, Y)                              \
  for (int X = 0; X < Y; X++) cerr << x[X] << " "; \
  cerr << endl;
typedef long long int ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vector<ii> > vvii;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3fll;
const ld pi = acos(-1);
const int MOD = 1e9 + 7;
const int N = 200010;
int v[N];
int n, k;
vi aux;
vii tam;
int main()
{
  sc2(n, k);
  int neg=0;
  for (int i = 0; i < n; i++) {
    sc(v[i]);
    if(v[i]<0) neg++;
  }
  aux.pb(1);
  int t=1;
  bool pos = true;
  for (int i = 0; i < n; i++) {
    if (v[i] < 0 and pos) {
      aux.pb(-1);
      pos = false;
      tam.pb(mp(t,aux.size()-1));
      t=1;
    }
    else if (v[i] >= 0 and !pos) {
      aux.pb(1);
      pos = true;
  //    tam.pb(mp(t,aux.size()-1));
      t=1;
    }
    else if(v[i]>=0 and pos){
      t++;
    }
    else if(v[i]<0 and !pos){
      t++;
    }
  }
  if(!pos) t=INF;
  sort(tam.begin(),tam.end());
//  for(int i=0;i<tam.size();i++) cout<<tam[i].first<<" ";
//  cout<<endl;
  if(neg>k){
    cout<<-1<<endl;
  }
  else{
    int sobra=k-neg;
    int troca=aux.size()-1;
    for(int i=0;i<tam.size();i++) {
      if(sobra>=tam[i].first and tam[i].second>1) sobra-=tam[i].first,troca-=2;
    }
    if(sobra>=t) sobra-=t,troca--;
    cout<<troca<<endl;
  }
  return 0;
}
