#include <bits/stdc++.h>

using namespace std;

const int N = 100005;
const int K = 42;

int n, m, result[N], len[N], val[K], cnt[K];
vector<int> g[N], pos[N];

int GCD[K][K], REM[K][K];

void solve(int l, int r, int id) {
    int a = l, b = l;
    while (a <= r) {
        while (b <= r) {
            int curPos = g[id][b];
            int curLen = len[pos[id][b]];
            bool failed = false;
            if (cnt[curLen] > 0 && val[curLen] != curPos)
                failed = true;
            for (int i = 1; i < K && !failed; ++i) {
                int r = GCD[i][curLen];
                if (cnt[i] > 0 && REM[curPos][r] != REM[val[i]][r]) {
                    failed = true;
                }
            }
            if (!failed) {
                val[curLen] = curPos;
                ++cnt[curLen];
                ++b;
            } else {
                break;
            }
        }
        result[id] = max(result[id], b - a);
        int curPos = g[id][a];
        int curLen = len[pos[id][a]];
        --cnt[curLen];
        ++a;
    }
}

int main() {
    ios::sync_with_stdio(false);

    for (int i = 1; i < K; ++i)
        for (int j = 1; j < K; ++j) {
            GCD[i][j] = __gcd(i, j);
            REM[i][j] = i % j;
        }

    cin >> n >> m;
    for (int i = 0; i < n; ++i) {
        int size, x;
        cin >> size;
        len[i] = size;
        for (int j = 0; j < size; ++j) {
            cin >> x;
            --x;
            pos[x].push_back(i);
            g[x].push_back(j);
        }
    }
    for (int i = 0; i < m; ++i) {
        int size = (int)pos[i].size();
        for (int j = 0; j < size; ++j) {
            int it = j;
            while (it + 1 < size && pos[i][it + 1] == pos[i][it] + 1)
                ++it;
            solve(j, it, i);
            j = it;
        }
    }
    for (int i = 0; i < m; ++i) {
        cout << result[i] << '\n';
    }
    return 0;
}
