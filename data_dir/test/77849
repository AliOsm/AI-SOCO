#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wunused-result"
#pragma GCC diagnostic ignored "-Wmissing-declarations"

#define FINAL_OUT(x) {cout << x << '\n'; exit(0);}


int const maxn = 100005;

vector<int> gr[maxn];

pair<int,int> edges[maxn];

int mask[maxn];

bool test(int x, int y, int h, int t)
{
    if (gr[x].size() <= h || gr[y].size() <= t)
        return false;
    //if (gr[x].size() + gr[y].size() > 2 * (t + h + 1))
     //   return true;

    int cnt = 0;

    for(int v : gr[x])
    {
        mask[v] = 1;
        ++cnt;
    }
    for(int v: gr[y])
    {
        cnt -= mask[v];
        ++cnt;
    }

    for(int v : gr[x])
        mask[v] = 0;
    for(int v : gr[y])
        mask[v] = 0;

    return cnt > t + h + 1;
}

vector<int> ans1;
vector<int> ans2;

void get_ans(int x, int y, int h, int t)
{
    for(int v: gr[x])
        mask[v] = 1;
    for(int v: gr[y])
        ++mask[v];

    vector<int> xnear;
    vector<int> ynear;
    vector<int> all;
    for(int v : gr[x])
        if (mask[v] == 1)
            xnear.push_back(v);
        else
            all.push_back(v);

    for(int v: gr[y])
        if (mask[v] == 1)
            ynear.push_back(v);

    for(int i = 0; ans1.size() < h && i < xnear.size(); ++i)
        if (xnear[i] != y)
            ans1.push_back(xnear[i]);

    while (ans1.size() < h)
    {
        ans1.push_back(all.back());
        all.pop_back();
    }

    for(int i = 0; i < ynear.size() && ans2.size() < t; ++i)
        if (ynear[i] != x)
            ans2.push_back(ynear[i]);
    while (ans2.size() < t)
    {
        ans2.push_back(all.back());
        all.pop_back();
    }
}


pair<int,int> ans;
int main()
{
//    freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);

    ios_base::sync_with_stdio(false);

    int n,m, h, t;
    cin >> n >> m >> h >> t;
    for(int i = 0; i < m; ++i)
    {
        cin >> edges[i].first >> edges[i].second;
        gr[edges[i].first].push_back(edges[i].second);
        gr[edges[i].second].push_back(edges[i].first);
    }
    ans = {0,0};
    for(int i = 0; i < m; ++i)
    {
        if (test(edges[i].first, edges[i].second, h, t))
        {
            get_ans(edges[i].first, edges[i].second, h, t);
            ans = edges[i];
            break;
        }
        swap(edges[i].first, edges[i].second);
        if (test(edges[i].first, edges[i].second, h, t))
        {
            get_ans(edges[i].first, edges[i].second, h, t);
            ans = edges[i];
            break;
        }
    }
    if (ans.first == 0)
        FINAL_OUT("NO");
    cout << "YES\n";
    cout << ans.first << ' ' << ans.second << endl;
    for(int i = 0; i < ans1.size(); ++i)
        cout << ans1[i] << " \n"[i == ans1.size() - 1];
    for(int i = 0; i < ans2.size(); ++i)
        cout << ans2[i] << " \n"[i == ans2.size() - 1];
}
