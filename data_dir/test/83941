// CONTEST SOURCE
#include <iostream>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <vector>
#include <cmath>
#include <algorithm>
#include <map>
#include <queue>
#include <sstream>
#include <set>
//#include <priority_queue>
using namespace std;
#define ll long long
#define x first
#define y second
#define pii pair<int, int>
#define pdd pair<double, double>
#define L(s) (int)(s).size()
#define VI vector<int>
#define all(s) (s).begin(), (s).end()
#define pb push_back
#define mp make_pair
#define inf 1000000000
int n, col[222222], com[222222], k, d[222222];
vector<int> e[222222], g[222222];
void dfs(int v) {
  com[v] = k;
  for(int i = 0; i < L(e[v]); ++i) {
    if (col[v] == col[e[v][i]] && com[e[v][i]] == -1) {
      dfs(e[v][i]);
    }
  }
}
void dfs2(int v, int cd) {
  d[v] = cd;
  for(int i = 0; i < L(g[v]); ++i) {
    if (d[g[v][i]] < 0) {
      dfs2(g[v][i], cd + 1);
    }
  }
}
int main() {
  scanf("%d", &n);
  for(int i = 0; i < n; ++i) scanf("%d", &col[i]);
  for(int i = 0; i < n - 1; ++i) {
    int u, v; scanf("%d%d", &u, &v); --u; --v;
    e[u].pb(v); e[v].pb(u);
  }
  memset(com, -1, sizeof(com));
  for(int i = 0; i < n; ++i) {
    if (com[i] == -1) {
      dfs(i);
      ++k;
    }
  }

  for(int i = 0; i < n; ++i) {
    for(int j = 0; j < L(e[i]); ++j) {
      if (com[i] != com[e[i][j]]) {
        g[com[i]].pb(com[e[i][j]]);
        g[com[e[i][j]]].pb(com[i]);
      }
    }
  }

  memset(d, -1, sizeof(d));
  dfs2(0, 0);
  int pos = max_element(d, d + k) - d;

  memset(d, -1, sizeof(d));
  dfs2(pos, 0);
  int len = *max_element(d, d + k) + 1;
  cout << len / 2 << endl;


}
