#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>

#define pb push_back
#define mp make_pair
#define all(c) (c).begin(), (c).end()
#define rall(c) (c).rbegin(), (c).rend()
#define tr(c, i) for (typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define rtr(c, i) for (typeof((c).rbegin()) i = (c).rbegin(); i != (c).rend(); --i)
#define contains(c, x) ((c).find(x) != (c).end())
#define Contains(c, x) (find(all(c), x) != (c).end())
#define REP(i, a, b) for (int i = (a); i < (b); ++i)
#define rep(i, n) REP(i, 0, (n))
#define To_String to_string< char,std::char_traits<char>,std::allocator<char> >

typedef long long ll;
typedef unsigned long long ull;
using namespace std;

int a[100010];
int n, len;

int main()
{
    ios_base::sync_with_stdio(0);
    while (cin >> n >> len) {
        int k;
        rep(i, n) cin >> a[i];
        cin >> k;
        ll sum[2] = { 0 }, ex[2] = { 0 };
        ll res = 0;
        set<pair<int, int>, greater<pair<int, int> > > s[2];
        set<pair<int, int> > s2[2];
        rep(i, len) {
            int p = (a[i] < 0);
            s[p].insert(mp(abs(a[i]), i));
            sum[p] += abs(a[i]);
        }
        rep(i, 2) {
            typeof(s[i].begin()) it = s[i].begin();
            int j = 0;
            while (it != s[i].end() && j < k) {
                if (it->first != 0) {
                    ex[i] += it->first;
                    s2[i].insert(*it);
                    j++;
                }
                it++;
            }
            tr(s2[i], it) s[i].erase(s[i].find(*it));
        }

        res = max(abs(sum[0]-sum[1]+2*ex[1]), abs(sum[1]-sum[0]+2*ex[0]));
        for (int i=0; i+len<n; ++i) {
            int p = (a[i] < 0);
            pair<int, int> A = mp(abs(a[i]), i);
            if (contains(s[p], A)) {
                s[p].erase(s[p].find(A));
            }
            else {
                s2[p].erase(s2[p].find(A));
                ex[p] -= abs(a[i]);
                if (!s[p].empty()) {
                    s2[p].insert(*s[p].begin());
                    ex[p] += s[p].begin()->first;
                    s[p].erase(s[p].begin());
                }
            }
            sum[p] -= abs(a[i]);

            int l = i + len;
            p = (a[l] < 0);
            A = mp(abs(a[l]), l);
            sum[p] += abs(a[l]);
            s[p].insert(A);

            typeof(s[p].begin()) it = s[p].begin();
            //while (it != s[p].end() && s2[p].size() < k) {
            if (it != s[p].end() && s2[p].size() < k) {
                typeof(it) jt = it; jt++;
                if (it->first > 0) {
                    s2[p].insert(*it);
                    ex[p] += it->first;
                    s[p].erase(it);
                }
                it = jt;
            }
            it = s[p].begin();
            if (it != s[p].end() && !s2[p].empty() && s2[p].begin()->first < it->first) {
            //while (it != s[p].end() && !s2[p].empty() && s2[p].begin()->first < it->first) {
                typeof(it) jt = it; jt++;
                if (jt != s[p].end()) jt = s[p].find(*jt);
                typeof(s2[p].begin()) t = s2[p].begin();
                ex[p] += it->first - t->first;
                s[p].insert(*t);
                s[p].erase(it);
                s2[p].insert(*it);
                s2[p].erase(t);
                it = jt;
            }
            ll x = max(abs(sum[0]-sum[1]+!!k*2*ex[1]), abs(sum[1]-sum[0]+!!k*2*ex[0]));
            res = max(res, x);
        }

        cout << res << endl;
    }
    return 0;
}