#include <bits/stdc++.h>
using namespace std;

using pii = pair<int, int>; using vi = vector<int>;
template <class T> istream &operator>>(istream &, vector<T> &);
template <class T> ostream &operator<<(ostream &, const vector<T> &);
using ll = long long; using vll = vector<long long>;
constexpr int INF = 0x3f3f3f3f; constexpr ll BINF = 0x3f3f3f3f3f3f3f3fLL;

ll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; }
ll lcm(ll a, ll b) { return a / gcd(a, b) * b; }

int solve() {
	ll a, b; cin >> a >> b;
	if (a > b) swap(a, b);
	ll diff = b - a;
	if (diff <= 1)
		cout << 0 << endl;
	else {
		pair<ll,ll> mn{lcm(a, b), 0};
		vector<ll> facts;
		for (ll f=1;f*f<=diff;f++) if (diff % f == 0) facts.push_back(f), facts.push_back(diff / f);
		// try to make a divisible by the shxt in facts
		for (ll x : facts) {
			ll target = (a + x - 1) / x * x;
			ll k = target - a;
			ll mygcd = lcm(a + k, b + k);
			mn = min(mn, pair<ll,ll>(mygcd, k));
		}
		cout << mn.second << endl;
		//for (ll k=1;k<=100000;k++)
		//	mn = min(mn, pair<ll,ll>(lcm(a + k, b + k), k));
		//cout << mn.second << endl;
	}
	return 0;
}

int main() {
	ios::sync_with_stdio(0);
	// precompute();
	// int t; cin >> t; for (int i=1;i<=t;i++)
	solve();
	// cout << (solve() ? "YES" : "NO") << endl;
	return 0;
}

template <class T> istream &operator>>(istream &is, vector<T> &v) {
	for (auto it=v.begin();it!=v.end();++it) is >> *it;
	return is;
}

template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
	for (auto it=v.begin();it!=v.end();) os << *it << " \n"[++it==v.end()];
	return os;
}
