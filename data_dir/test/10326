#include <iostream>
#include <vector>
#include <string>
#include <cassert>
#include <cstring>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <algorithm>
#include <map>
#include <cmath>
#include <numeric>
#include <functional>
#include <ctime>

using namespace std;
typedef long long Long;
typedef long double Double;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
typedef pair<Long,Long> PLL;

int read(int &x) { return scanf("%d", &x); }
int read(int &x, int &y) { return scanf("%d%d", &x, &y); }
int read(int &x, int &y, int &z) { return scanf("%d%d%d", &x, &y, &z); }
int read(Long &x) { return scanf("%lld", &x); }
char buff[2000010];
int read(string &s) { int r = scanf("%s", buff); s = buff; return r; }

#define dlog2(n) ((n) == -1 ? 0 : (31-__builtin_clz(n)))


int dp(int id, int r, vector<PII> &NEG) {
    if (id == NEG.size()) {
        return 0;
    }
    static int mem[102][60010];
    static bool cat[102][60010];
    if (cat[id][r]) return mem[id][r];
    int w = 0;
    // use it
    if (r >= NEG[id].first && r + NEG[id].second >= 0) {
        w = max(w, dp(id+1, r + NEG[id].second, NEG) + 1);
    }
    w = max(w, dp(id+1, r, NEG));
    cat[id][r] = 1;
    return mem[id][r] = w;
}

int solve(vector<PII> POS, vector<PII> NEG, int R) {
    sort(POS.begin(), POS.end());
    int x = 0;
    for (int i = 0; i < POS.size(); ++i) {
        if (R < POS[i].first) {
            continue;
        }
        R += POS[i].second;
        x++;
    }
    sort(NEG.rbegin(), NEG.rend(), [](PII a, PII b) {
        return a.first - b.second < b.first - a.second;
    });
    return dp(0, R, NEG) + x;
    for (int i = 0; i < NEG.size(); ++i) {
        if (R < NEG[i].first || R + NEG[i].second <= 0) {
            continue;
        }
        R += NEG[i].second;
        x++;
    }
    return x;
}

int main() {

    int N, R;
    read(N, R);
    vector<PII> POS, NEG;
    for (int i = 0; i < N; ++i) {
        int a, b;
        read(a, b);
        if (b >= 0) POS.push_back(PII(a, b));
        else NEG.push_back(PII(a, b));
    }
    cout << solve(POS, NEG, R) << endl;
//    cout << (solve(POS, NEG, R) == N ? "YES" : "NO") << endl;


    return 0;
}

/*
6 6
4 4 2 2
6 3



 */