#include<bits/stdc++.h>
using namespace std;
int idx,in[200010],out[200010],sum[1600010],all[1600010];
bool rev[1600010],isIn[400010],light[400010];
vector<int> g[200010];
void dfs(int u){
	in[u]=++idx;
	isIn[idx]=true;
	for(int& v:g[u])
		dfs(v);
	out[u]=++idx;
}
void build(int l,int r,int idx){
	if(l==r){
		all[idx]=isIn[l];
		sum[idx]=light[l];
	}else{
		int mid=(l+r)>>1;
		build(l,mid,idx<<1);
		build(mid+1,r,idx<<1|1);
		all[idx]=all[idx<<1]+all[idx<<1|1];
		sum[idx]=sum[idx<<1]+sum[idx<<1|1];
	}
}
void down(int idx){
	if(rev[idx]){
		rev[idx<<1]=!rev[idx<<1];
		rev[idx<<1|1]=!rev[idx<<1|1];
		sum[idx<<1]=all[idx<<1]-sum[idx<<1];
		sum[idx<<1|1]=all[idx<<1|1]-sum[idx<<1|1];
		rev[idx]=false;
	}
}
void modify(int l,int r,int ql,int qr,int idx){
	if(l==ql && r==qr){
		rev[idx]=!rev[idx];
		sum[idx]=all[idx]-sum[idx];
	}else{
		int mid=(l+r)>>1;
		down(idx);
		if(qr<=mid) modify(l,mid,ql,qr,idx<<1);
		else if(ql>mid) modify(mid+1,r,ql,qr,idx<<1|1);
		else{
			modify(l,mid,ql,mid,idx<<1);
			modify(mid+1,r,mid+1,qr,idx<<1|1);
		}
		sum[idx]=sum[idx<<1]+sum[idx<<1|1];
	}
}
int query(int l,int r,int ql,int qr,int idx){
	if(l==ql && r==qr) return sum[idx];
	int mid=(l+r)>>1;
	down(idx);
	if(qr<=mid) return query(l,mid,ql,qr,idx<<1);
	else if(ql>mid) return query(mid+1,r,ql,qr,idx<<1|1);
	return query(l,mid,ql,mid,idx<<1)+query(mid+1,r,mid+1,qr,idx<<1|1);
}
int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int n,p;
	cin>>n;
	for(int i=2;i<=n;i++){
		cin>>p;
		g[p].push_back(i);
	}
	dfs(1);
	for(int i=1;i<=n;i++){
		cin>>light[in[i]];
	}
	build(1,idx,1);
	int q,v;
	string o;
	cin>>q;
	while(q--){
		cin>>o>>v;
		if(o[0]=='p'){
			modify(1,idx,in[v],out[v],1);
		}else{
			cout<<query(1,idx,in[v],out[v],1)<<'\n';
		}
	}
	return 0;
}