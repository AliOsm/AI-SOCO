#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define MOD 1000000000
ll fib[200005][2][2],lazy[800005];
int A[200005];
struct ret
{
    pair<ll,ll> r;
    int sz;
};
pair<ll,ll> tree[800005];
pair<ll,ll> add(pair<ll,ll> a,pair<ll,ll> b)
{
    return {(a.first+b.first)%MOD,(a.second+b.second)%MOD};
}
void build_tree(int node, int a, int b)
{
  	if(a > b)
        return;
  	if(a == b)
  	{
        tree[node] = {A[a],0};
		return;
	}
	build_tree(node*2, a, (a+b)/2);
	build_tree(node*2+1, 1+(a+b)/2, b);
	int sz=(a+b)/2-a+1;
    pair<ll,ll> tmp={((fib[sz][0][0]*tree[node*2+1].first)%MOD+(fib[sz][0][1]*tree[node*2+1].second)%MOD)%MOD,((fib[sz][1][0]*tree[node*2+1].first)%MOD+(fib[sz][1][1]*tree[node*2+1].second)%MOD)%MOD};
	tree[node] = add(tree[node*2], tmp);
}
void update(int node,int a,int b,int index,int val)
{
    if(lazy[node] != 0)
    {
   		tree[node]={(tree[node].first+lazy[node]*((fib[b-a+2][0][0]-1+MOD)%MOD))%MOD,(tree[node].second+lazy[node]*((fib[b-a+1][0][0]-1+MOD)%MOD))%MOD};
		if(a != b)
		{
			lazy[node*2] = (lazy[node*2]+lazy[node])%MOD;
            lazy[node*2+1] = (lazy[node*2+1]+lazy[node])%MOD;
		}
   		lazy[node] = 0;
  	}
    if(index<a||index>b)
        return;
    if(a==b)
    {
        tree[node]={val,0};
        return;
    }
    update(2*node,a,(a+b)/2,index,val);
    update(2*node+1,(a+b)/2+1,b,index,val);
    int sz=(a+b)/2-a+1;
    pair<ll,ll> tmp={((fib[sz][0][0]*tree[node*2+1].first)%MOD+(fib[sz][0][1]*tree[node*2+1].second)%MOD)%MOD,((fib[sz][1][0]*tree[node*2+1].first)%MOD+(fib[sz][1][1]*tree[node*2+1].second)%MOD)%MOD};
	tree[node] = add(tree[node*2], tmp);
}
void update_tree(int node, int a, int b, int i, int j, int value)
{
  	if(lazy[node] != 0)
    {
   		tree[node]={(tree[node].first+lazy[node]*((fib[b-a+2][0][0]-1+MOD)%MOD))%MOD,(tree[node].second+lazy[node]*((fib[b-a+1][0][0]-1+MOD)%MOD))%MOD};
		if(a != b)
		{
			lazy[node*2] = (lazy[node*2]+lazy[node])%MOD;
            lazy[node*2+1] = (lazy[node*2+1]+lazy[node])%MOD;
		}
   		lazy[node] = 0;
  	}
	if(a > b || a > j || b < i)
		return;
  	if(a >= i && b <= j)
  	{
   		tree[node]={(tree[node].first+value*((fib[b-a+2][0][0]-1+MOD)%MOD))%MOD,(tree[node].second+value*((fib[b-a+1][0][0]-1+MOD)%MOD))%MOD};
		if(a != b)
		{
			lazy[node*2] = (lazy[node*2]+value)%MOD;
            lazy[node*2+1] = (lazy[node*2+1]+value)%MOD;
		}
        return;
	}
	update_tree(node*2, a, (a+b)/2, i, j, value);
	update_tree(1+node*2, 1+(a+b)/2, b, i, j, value);
	int sz=(a+b)/2-a+1;
    pair<ll,ll> tmp={((fib[sz][0][0]*tree[node*2+1].first)%MOD+(fib[sz][0][1]*tree[node*2+1].second)%MOD)%MOD,((fib[sz][1][0]*tree[node*2+1].first)%MOD+(fib[sz][1][1]*tree[node*2+1].second)%MOD)%MOD};
	tree[node] = add(tree[node*2], tmp);
}
ret query_tree(int node, int a, int b, int i, int j)
{
	if(lazy[node] != 0)
    {
   		tree[node]={(tree[node].first+lazy[node]*((fib[b-a+2][0][0]-1+MOD)%MOD))%MOD,(tree[node].second+lazy[node]*((fib[b-a+1][0][0]-1+MOD)%MOD))%MOD};
		if(a != b)
		{
			lazy[node*2] = (lazy[node*2]+lazy[node])%MOD;
            lazy[node*2+1] = (lazy[node*2+1]+lazy[node])%MOD;
		}
   		lazy[node] = 0;
  	}
  	if(a > b || a > j || b < i)
        return {{0,0},0};
	if(a >= i && b <= j)
		return {tree[node],b-a+1};
	ret q1 = query_tree(node*2, a, (a+b)/2, i, j);
	ret q2 = query_tree(1+node*2, 1+(a+b)/2, b, i, j);
	pair<ll,ll> tmp={((fib[q1.sz][0][0]*q2.r.first)%MOD+(fib[q1.sz][0][1]*q2.r.second)%MOD)%MOD,((fib[q1.sz][1][0]*q2.r.first)%MOD+(fib[q1.sz][1][1]*q2.r.second)%MOD)%MOD};
	ret res = {add(q1.r, tmp),q1.sz+q2.sz};
	return res;
}
int main()
{
    int i,n,m,t,x,v,d;
    fib[0][0][0]=fib[0][1][1]=1;
    for(i=1;i<200005;i++)
    {
        fib[i][0][0]=(fib[i-1][0][0]+fib[i-1][1][0])%MOD;
        fib[i][0][1]=(fib[i-1][0][1]+fib[i-1][1][1])%MOD;
        fib[i][1][0]=fib[i-1][0][0];
        fib[i][1][1]=fib[i-1][0][1];
    }
    scanf("%d%d",&n,&m);
    for(i=1;i<=n;i++)
        scanf("%d",&A[i]);
    build_tree(1,1,n);
    while(m--)
    {
        scanf("%d%d%d",&t,&x,&v);
        if(t==1)
            update(1,1,n,x,v);
        else if(t==2)
            printf("%lld\n",query_tree(1,1,n,x,v).r.first);
        else
        {
            scanf("%d",&d);
            update_tree(1,1,n,x,v,d);
        }
    }
    return 0;
}
