#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define ppl pair<ll,ll>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcountll
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=100000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;


ll dir[10][2] = {{-5,-5} , {-1,0} , {-1,1} , {0,1} , {1,1} , {1,0} , {1,-1} , {0,-1} , {-1,-1}};


ll t[505];

bool vis[505][505];
bool vis2[505][505][35][11];
ll n;
void dfs(ll x,ll y,ll dep,ll len,ll dr)
{
	if(dr == 0)dr = 8;
	if(dr == 9)dr = 1;

	if(vis2[x][y][dep][dr])return;
	if(len > t[dep])vis2[x][y][dep][dr] = true;
	
	assert(x>=1 && x<=500);
	assert(y>=1 && y<=500);

	ll cx = x;
	ll cy = y;
	afor(i,1,len)
	{
		vis[cx][cy] = true;
		cx+= dir[dr][0];
		cy+= dir[dr][1];
	}

	ll sx = x + (len-1)*(dir[dr][0]);
	ll sy = y + (len-1)*(dir[dr][1]);

	if(dep == n)return;
	dfs(sx,sy,dep+1,t[dep+1]+1,dr-1);
	dfs(sx,sy,dep+1,t[dep+1]+1,dr+1);

}
int main()
{
  finp;
  cin>>n;
  afor(i,1,n)cin>>t[i];

  dfs(250,250,1,t[1],1);
  ll ans = 0;
  
  afor(i,1,500)afor(j,1,500)
  {
  	 if(vis[i][j])++ans;
  }



  cout<<ans;
return 0;
}