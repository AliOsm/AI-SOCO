#include <bits/stdc++.h>

using namespace std;

#define F first
#define S second
#define pb push_back
#define mp make_pair

typedef long long ll;
typedef pair <int, int> ii;
typedef vector <int> vi;
const int N = 200005;
const int M = 40;
 
ll path[N], comp[N];
bool mark[N];
vector < ii > v[N];
vector < ll > cyc[N];
 
void dfs (int cur, int id){
	comp[cur] = id;
	mark[cur] = true;
	for (int i = 0; i < v[cur].size(); i++){
		int nei = v[cur][i].F, wei = v[cur][i].S;
		if (mark[nei]) cyc[id].pb(path[cur] ^ path[nei] ^ wei);
		else {
			path[nei] = (path[cur] ^ wei);
			dfs(nei, id);
		}
	}
}

int n, m;
 
int main() {
  scanf("%d %d", &n, &m);
	for (int i = 0; i < m; i++){
	  int a, b, c;
	  scanf("%d %d %d", &a, &b, &c);
	  a--; b--;
		v[a].pb(mp(b, c));
		v[b].pb(mp(a, c));
	}
	for (int i = 0; i < n; i++) {
		if (!mark[i]){
			dfs(i, i);
			int r = 0;
			for (int b = M; b >= 0; b--){
				int cur;
				for (cur = r; cur < cyc[i].size(); cur++) if ((cyc[i][cur] >> b) & 1) break;
				if (cur == cyc[i].size()) continue;
				swap(cyc[i][r], cyc[i][cur]);
				for (int j = r+1; j < cyc[i].size(); j++) if ((cyc[i][j] >> b) & 1) cyc[i][j] ^= cyc[i][r];
				r++;
			}
			cyc[i].erase(cyc[i].begin() + r, cyc[i].end());
		}
	}
	int id = comp[0];
	ll ret = (path[0] ^ path[n - 1]);
	for (int i = 0; i < cyc[id].size(); i++) ret = min(ret, ret ^ cyc[id][i]);
	printf("%d\n", ret);
	return 0;
}
 