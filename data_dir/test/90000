// KALAM
# include<bits/stdc++.h>

using namespace std;

const int N = 600000 + 77 , L = 20;

struct Trie {
	int tim = 0;
	vector < int > le;
	vector < int > ri;
	void Push(){
		le.push_back(- 1);
		ri.push_back(- 1);
		tim ++;
	}
	Trie() {
		le.clear();
		ri.clear();
		tim = 0;
		Push();
	}
	void Add(int x){
		int cur = 0;
		for(int i = L - 1;i >= 0;i --){
			int t = (x & (1 << i));
			if(t > 0){
				if(ri[cur] == - 1){
					Push();
					ri[cur] = tim - 1;
				}
				cur = ri[cur];
			}
			else {
				if(le[cur] == - 1){
					Push();
					le[cur] = tim - 1;
				}
				cur = le[cur];
			}
		}
	}
	int Get(int x){
		int cur = 0 , nw = 0;
		for(int i = L - 1;i >= 0;i --){
			int t = (x & (1 << i));
			if(ri[cur] == - 1 || (le[cur] != - 1 && (t == 0))){
				cur = le[cur];
			}
			else {
				nw += (1 << i);
				cur = ri[cur];
			}
		}
		return x ^ nw;
	}
};
int n , q , x;
bool M[N];
int main(){
   ios::sync_with_stdio(0);cin.tie(0);
   Trie T = Trie();
   cin >> n >> q;
   for(int i = 1;i <= n;i ++){
      int t;
      cin >> t;
      M[t] = 1;
   }
   for(int i = 0;i < N;i ++){
      if(!M[i]){
         T.Add(i);
      }
   }
   while(q --){
      int t;
      cin >> t;
      x ^= t;
      cout << T.Get(x) << '\n';
   }
   return 0;
}
