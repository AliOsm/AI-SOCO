#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair <int, int> ii;

int a[200005], b[200005], n;

ii tree[4*200005];

void build(int i, int l, int r){
    if(l == r){
        tree[i] = ii(a[l], b[l]);
        return;
    }
    int nxt = 2*i, md = (l+r)/2;
    build(nxt, l, md);
    build(nxt+1, md+1, r);
    tree[i].first = max(tree[nxt].first, tree[nxt+1].first);
    tree[i].second = min(tree[nxt].second, tree[nxt+1].second);
}

ii get(int i, int l, int r, int x, int y){
    if(l > y or r < x)
        return {-1e9, 1e9};
    if(l >= x and r <= y)
        return tree[i];
    int nxt = 2*i, md = (l+r)/2;
    ii L = get(nxt, l, md, x, y), R = get(nxt+1, md+1, r, x, y);
    ii ans = ii(max(L.first, R.first), min(L.second, R.second));
    return ans;
}

bool valid(int esq, int dir){
    ii aux = get(1, 1, n, esq, dir);
    if(aux.first == aux.second) return true;
    else return false;
}

int main(){

    scanf("%d", &n);
    for(int i = 1; i <= n; i++)
        scanf("%d", &a[i]);
    for(int i = 1; i <= n; i++)
        scanf("%d", &b[i]);
    
    build(1, 1, n);
    
    ll res = 0;
    for(int i = 1; i <= n; i++){
        int esq = i, dir = n, r1 = 1e9;
        while(esq <= dir){
            int mid = (esq+dir)/2;
            ii aux = get(1, 1, n, i, mid);
            int dif = aux.first - aux.second;
            
            if(dif == 0){
                r1 = min(r1, mid);
                dir = mid-1;
            }
            else if(dif > 0) dir = mid-1;
            else esq = mid+1;
        }
        
        esq = i; dir = n; int r2 = -1e9;
        while(esq <= dir){
            int mid = (esq+dir)/2;
            ii aux = get(1, 1, n, i, mid);
            int dif = aux.first - aux.second;
            
            if(dif == 0){
                r2 = max(r2, mid);
                esq = mid+1;
            }
            else if(dif > 0) dir = mid-1;
            else esq = mid+1;
        }
        // cout << i << " " << r1 << " " << r2 << endl;
        if(r1 != 1e9) res += (r2-r1+1);
    }
    cout << res << endl;
	return 0;
}