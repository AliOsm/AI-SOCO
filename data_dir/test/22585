#include "assert.h"
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

using namespace std;

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

template<typename T> inline void swap(pair<T, T> &p) { swap(p.first , p.second ); }

#define all(v) v.begin(),v.end()

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) { if (i) os << ' '; os << v[i]; } os << endl; return os; }
template <typename T1, typename T2> ostream& operator << (ostream& os, const vector<pair<T1, T2>> &v) { for (int i = 0 ; i < v.size() ; i++) { os << v[i] << endl; } return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, const pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

int get_max_swaps(vector<int> v, int n, int k) {
	auto sorted = v;
	sort(all(sorted));
	map<int, int> opt_counter;
	FOR (i, 0, k) opt_counter[sorted[i]]++;

	int swaps = 0;
	FOR (i, 0, k) {
		if (!opt_counter[v[i]]) {
			int j = i + 1;
			while (!opt_counter[v[j]]) j++;
			while (j > i) {
				swap(v[j], v[j - 1]);
				swaps++;
				j--;
			}
		}

		opt_counter[v[i]]--;
	}
	cerr << swaps;
	return swaps;
}

inline int add(int a, int b) {
	if (max(a, b) == IntMaxVal) return IntMaxVal;
	return a + b;
}

int main() {
	srand (time(NULL));
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(int, n);
	next(int, k);
	next(int, s);

	auto v = readVector<int>(n);

	if (s >= get_max_swaps(v, n, k)) {
		sort(all(v));
		v.resize(k);
		cout << accumulate(all(v), 0) << endl;
		return 0;
	}

	vector<vector<int>> dp(n + 1, vector<int>(s + 1, IntMaxVal));

	dp[0][0] = 0;
	FOR (len, 1, n + 1) {
		static vector<vector<int>> dp2(n + 1, vector<int>(s + 1, IntMaxVal));
		dp2[0][0] = 0;
		FOR (leave, 1, len + 1) FOR (swaps, 0, s + 1) {
			minimize(dp2[leave][swaps], dp[leave][swaps]);
			if (leave > 0 && swaps >= len - leave) minimize(dp2[leave][swaps], add(dp[leave - 1][swaps - (len - leave)] , v[len - 1]));
			// cout << len << ' ' << leave << ' ' << swaps << ' ' << dp[len][leave][swaps] << endl;
		}
		swap(dp, dp2);
	}

	int res = IntMaxVal;
	FOR (swaps, 0, s + 1) minimize(res, dp[k][swaps]);
	cout << res;
}