//#pragma GCC optimise("Ofast,unroll-loops,no-stack-protector,fast-math");
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,abm,mmx,popcnt,avx,avx2,tune=native")
          
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
          
using namespace std;
using namespace __gnu_pbds;
          
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
          
using matrix = vector<vector<ll>>;
template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
          
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
//#define int long long
 
void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifndef _offline
    //freopen("chess.in", "r", stdin);
    //freopen("chess.out", "w", stdout);
    #endif
}   

const int MAXN = 3e5 + 100;
int st[MAXN];
int arr[MAXN];
int fs[MAXN], lt[MAXN];
int val[MAXN], prval[MAXN];

signed main() {
    FAST_IO();
    int hg = -1;
    for (int i = 1; i < MAXN; ++i) {
        if (!(i & (i - 1))) {
            hg++;
        }
        st[i] = hg;
    }
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        for (int i = 0; i < n; ++i) {
            fs[i] = -1;
            lt[i] = -1;
        }
        vector<int> xs;
        for (int i = 0; i < n; ++i) {
            cin >> arr[i];
            xs.push_back(arr[i]);
        }
        sort(all(xs));
        xs.resize(unique(all(xs)) - xs.begin());
        int sz = xs.size();
        for (int i = 0; i < n; ++i) {
            arr[i] = lower_bound(all(xs), arr[i]) - xs.begin();
            if (fs[arr[i]] == -1) {
                fs[arr[i]] = i;
            }
            lt[arr[i]] = i;
        }
        kawaii_set<int> setik;
        for (int i = n - 1; i >= 0; --i) {
            setik.insert(arr[i]);
            if (i == fs[arr[i]]) {
                auto it = setik.lower_bound(arr[i]);
                if (it == setik.begin()) {
                    val[arr[i]] = -1;
                }
                else {
                    val[arr[i]] = *prev(it);
                }
            }
        }
        prval[0] = val[0];
        for (int i = 1; i < sz; ++i) {
            prval[i] = max(prval[i - 1], val[i]);
        }
        int res = 1e9 + 7;
        for (int i = -1; i < sz; ++i) {
            int pos = upper_bound(prval, prval + sz, i) - prval;
            res = min(res, i + 1 + sz - pos);
        }
        cout << res << '\n';
    }
}   