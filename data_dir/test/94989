//#include<iostream>
//#include<cstring>
#include<bits/stdc++.h>
#include<tr1/unordered_map>
using namespace std;
long long MOD = 1000000007ll;

inline void print(char pt) {
	printf("%c\n", pt);
}
inline void print(int pt) {
	printf("%d\n", pt);
}
inline void print(long long pt) {
	printf("%I64d\n", pt);
}
inline void print(double pt) {
	printf("%f\n", pt);
}
inline void print(char pt[]) {
	printf("%s\n", pt);
}

inline void scan(int &pt) {
	scanf("%d", &pt);
}
inline void scan(char &pt) {
	scanf("%c", &pt);
}
inline void scan(long long &pt) {
	scanf("%I64d", &pt);
}
inline void scan(double &pt) {
	scanf("%lf", &pt);
}
inline void scan(char pt[]) {
	scanf("%s", pt);
}
struct pii {
	int a;
	int b;
	friend int operator<(pii a, pii b) {
		return a.a < b.a;
	}
};

struct str {
	char val[1005];
	str() {
		memset(val, 0, sizeof(val));
	}
	friend int operator<(str a, str b) {
		return strcmp(a.val, b.val) < 0;
	}
};

//int gcd(int x, int y) {
//	return y ? gcd(y, x % y) : x;
//}
//int lcm(int x, int y) {
//	return x * (y / gcd(x, y));
//}
long long gcd(long long x, long long y) {
	return y ? gcd(y, x % y) : x;
}
long long lcm(long long x, long long y) {
	return x * (y / gcd(x, y));
}

int bits[50];
void getbits() {
	for (int i = 0; i < 30; i++) {
		bits[i] = 1 << i;
	}
}

long long Q_pow(long long x, long long y) {
	long long res = 1;
	while (y) {
		if (y % 2 == 1) {
			res *= x;
			res %= MOD;
		}
		x = x * x;
		x %= MOD;
//		if(x<=1e-5){
//			return 0;
//		}
		y /= 2;
	}
	return res;
}

//返回d=gcd(a,b);和对应于等式ax+by=d中的x,y
long long extend_gcd(long long a, long long b, long long &x, long long &y) {
	if (a == 0 && b == 0)
		return -1; //无最大公约数
	if (b == 0) {
		x = 1;
		y = 0;
		return a;
	}
	long long d = extend_gcd(b, a % b, y, x);
	y -= a / b * x;
	return d;
}
//*********求逆元素*******************
//ax = 1(mod n)
long long mod_reverse(long long a, long long MOD) {
	long long x, y;
	long long d = extend_gcd(a, MOD, x, y);
	if (d == 1)
		return (x % MOD + MOD) % MOD;
	else
		return -1;
}

int n, m, d;

char stra[100050];
int father[100];
int findfather(int nowi) {
	int tf = nowi;
	while (father[tf] != tf) {
		tf = father[tf];
	}
	int ti;
	while (nowi != tf) {
		ti = nowi;
		nowi = father[nowi];
		father[ti] = tf;
	}
	return tf;
}

int main() {
	scan(n);
	scan(m);
	for (int i = 1; i <= n; i++) {
		father[i] = i;
	}
	int l, r;
	while (m--) {
		scan(l);
		scan(r);
		l = findfather(l);
		r = findfather(r);
		father[l] = r;
		l = findfather(l);
		r = findfather(r);
	}

	int ansa = n;
	for (int i = 1; i <= n; i++) {
		if (father[i] == i)
			ansa--;
	}

	long long tansa = 1ll << ansa;
	print(tansa);

}
