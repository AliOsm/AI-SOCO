#include<bits/stdc++.h>
#include<unordered_map>
using namespace std;
typedef long long ll;
typedef double D;
const ll inf=(1ll<<62);
const ll mod=1e9+7;
const int MX=2e5+9;
int n,m,x,y,seg1[MX*5],seg2[MX*5],ans[MX],in[MX],out[MX],lvl[MX],timer;
vector<int>v[MX];
void dfs(int x,int p){
    in[x]=++timer;
    for(auto pp:v[x]){
        if(pp==p)continue;
        lvl[pp]=(lvl[x]+1)%2;
        dfs(pp,x);
    }
    out[x]=timer;
}
void up1(int node,int l,int r,int ind,int val){
    if(l>ind||r<ind)return;
    if(l==r){
        seg1[node]+=val;
        return ;
    }
    int mid=(l+r)/2;
    up1(node*2,l,mid,ind,val);
    up1(node*2+1,mid+1,r,ind,val);
    seg1[node]=seg1[node*2]+seg1[node*2+1];
}
void up2(int node,int l,int r,int ind,int val){
    if(l>ind||r<ind)return;
    if(l==r){
        seg2[node]+=val;
        return ;
    }
    int mid=(l+r)/2;
    up2(node*2,l,mid,ind,val);
    up2(node*2+1,mid+1,r,ind,val);
    seg2[node]=seg2[node*2]+seg2[node*2+1];
}
int q1(int node,int l,int r,int s,int e){
    if(l>e||r<s)return 0;
    if(l>=s&&r<=e)return seg1[node];
    int mid=(l+r)/2;
    return q1(node*2,l,mid,s,e)+q1(node*2+1,mid+1,r,s,e);
}
int q2(int node,int l,int r,int s,int e){
    if(l>e||r<s)return 0;
    if(l>=s&&r<=e)return seg2[node];
    int mid=(l+r)/2;
    return q2(node*2,l,mid,s,e)+q2(node*2+1,mid+1,r,s,e);
}
void pro1(int x,int lev,int val){
    if(lev)up1(1,1,n,in[x],val);
    else up2(1,1,n,in[x],val);
}
void pro2(int x,int lev,int val){
    if(lev)up1(1,1,n,out[x]+1,val);
    else up2(1,1,n,out[x]+1,val);
}
void pro(int x,int val){
    if(lvl[x]){
        pro1(x,1,val);
        pro1(x,0,-val);
        pro2(x,1,-val);
        pro2(x,0,+val);
        return;
    }
    pro1(x,0,val);
    pro1(x,1,-val);
    pro2(x,0,-val);
    pro2(x,1,+val);
}
int type,val;
int main(){
    scanf("%d%d",&n,&m);
    for(int i=0;i<n;i++)
        scanf("%d",&ans[i+1]);
    for(int i=0;i<n-1;i++){
        scanf("%d%d",&x,&y);
        v[x].push_back(y);
        v[y].push_back(x);
    }
    dfs(1,-1);
    while(m--){
        scanf("%d",&type);
        if(type==1){
            scanf("%d%d",&x,&y);
            pro(x,y);
        }
        else{
            scanf("%d",&x);
            if(lvl[x])printf("%d\n",ans[x]+q1(1,1,n,1,in[x]));
            else printf("%d\n",ans[x]+q2(1,1,n,1,in[x]));
        }
    }
}
