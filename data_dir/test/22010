/* Author haleyk10198 */
/* �@��:  haleyk10198 */
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define MOD 1000000007
#define LINF (1LL<<60)
#define INF 2147483647
#define PI 3.1415926535897932384626433
#define ll long long
#define pii pair<int,int>
#define mp(x,y) make_pair((x),(y))

using namespace std;
using namespace __gnu_pbds;

string itos(int x){
	stringstream ss;
	ss<<x;
	return ss.str();
}

ll dp[25][2010],f[200010],c[200010],g[2010],h[2010];
pii pos[2010];

ll p,q,pcnt;

int n,m,k,s,low,stmp;

ll pwr(ll b,ll e){
	if(e==0)
		return 1;
	if(e==1)
		return b;
	return (pwr((b*b)%MOD,e/2)*pwr(b,e%2))%MOD;
}

ll combin(int n,int k){
	ll tmp=(f[n]*c[k])%MOD;
	return (tmp*c[n-k])%MOD;
}

int main(){
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	ios_base::sync_with_stdio(false);
	cin>>n>>m>>k>>s;
	stmp=s;
	low=sizeof(int)*8-__builtin_clz(s&(-s))-1;
	f[0]=c[0]=1;
	for(int i=1;i<200010;i++)
		f[i]=(f[i-1]*i)%MOD,c[i]=pwr(f[i],MOD-2);
	for(int i=0;i<k;i++)
		cin>>pos[i].first>>pos[i].second;
	sort(pos,pos+k);
	q=combin(n+m-2,n-1);
	p=q*stmp;
	p%=MOD;
	for(int i=k-1;i>=0;i--){
		for(int j=k-1;j>i;j--){
			if(pos[j].first>=pos[i].first&&pos[j].second>=pos[i].second){
				int dx=(pos[j].first-pos[i].first);
				int dy=(pos[j].second-pos[i].second);
				ll tmp=(combin(dx+dy,dx)*g[j])%MOD;
				if((g[i]-=tmp)<0)
					g[i]+=MOD;
			}
		}
		g[i]+=combin(n+m-pos[i].first-pos[i].second,n-pos[i].first);
		g[i]%=MOD;
	}
	for(int cnt=1;cnt<=20;cnt++){
		ll tt=0;
		stmp=(++stmp)/2;
		for(int i=0;i<k;i++){
			for(int j=0;j<i;j++){
				if(pos[j].first<=pos[i].first&&pos[j].second<=pos[i].second){
					int dx=(pos[i].first-pos[j].first);
					int dy=(pos[i].second-pos[j].second);
					ll tmp=combin(dx+dy,dx);
					tmp*=((dp[cnt-1][j]-dp[cnt][j]+MOD)%MOD);
					tmp%=MOD;
					dp[cnt][i]+=tmp;
					dp[cnt][i]%=MOD;
				}
			}
			if(cnt==1){
				dp[cnt][i]+=combin(pos[i].first+pos[i].second-2,pos[i].first-1);
				dp[cnt][i]%=MOD;
				pcnt+=dp[cnt][i]*combin(n+m-pos[i].first-pos[i].second,n-pos[i].first);
				pcnt%=MOD;
			}
			tt+=dp[cnt][i]*g[i];
			tt%=MOD;
		}
		if((pcnt-=tt)<0)
			pcnt+=MOD;
		p-=((tt*(s-stmp))%MOD);
		if(p<0)
			p+=MOD;
	}
	p-=((pcnt*(s-1))%MOD);
	if(p<0)
		p+=MOD;
	p*=pwr(q,MOD-2);
	p%=MOD;
	cout<<p<<endl;
	return 0;
}


