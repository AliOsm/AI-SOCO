#include <bits/stdc++.h>
#define base 1000000007LL
#define ll long long
#define ld double
#define X first
#define Y second
#define pb push_back
#define EPS 1e-9
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORE(i,a,b) for (int i = (a); i >= (b); i--)
#define FORALL(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
using namespace std;
typedef pair<int, int> II;
typedef pair<II, int> III;

int n;
ll a[200010], s[200010];
vector<ll> M, C;

ld getIntersection(int l1, int l2)
{
    if (l2 == sz(M)) return 1e20;
    return (ld) (C[l1] - C[l2]) / (M[l2] - M[l1]);
}

ll query(ll k)
{
    //cout << k << " " << c << endl;
    ll res = 0;
    int dau = 0, cuoi = sz(M)-1;
    while (dau <= cuoi) {
        int mid = (dau + cuoi) >> 1;
        if (k <= getIntersection(mid, mid+1)) cuoi = mid-1;
        else dau = mid+1;
    }
    res = M[dau] * k + C[dau];
    //cout << M[dau] << ' ' << C[dau] << " " << res + c << " " << dau << endl;
    return res;
}

bool isBad(int l1, int l2, int l3)
{
    // bad khi giao cua l1 va l3 nam ben trai giao cua l1 va l2
    // intersection(l1,l2) has x-coordinate (c1-c2)/(m2-m1)
	// intersection(l1,l3) has x-coordinate (c1-c3)/(m3-m1)
    return (ld) (C[l3] - C[l1]) / (M[l1] - M[l3]) < (ld) (C[l2] - C[l1]) / (M[l1] - M[l2]);
}

void add(ll m, ll c)
{
    //cout << m << " " << c << endl;
    M.pb(m);
    C.pb(c);
    while (sz(M) >= 3 && isBad(sz(M)-3, sz(M)-2, sz(M)-1)) {
        M.erase(M.end()-2);
        C.erase(C.end()-2);
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(NULL);
    //freopen("inp.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    cin >> n;
    FOR(i,1,n) cin >> a[i];
    FOR(i,1,n) s[i] = s[i-1] + a[i];
    ll res = 0, now = 0;
    add(0, 0);
    FOR(i,1,n) {
        ll m = now + i * a[i];
        res = max(res, m - query(-s[i]));
        now += i * a[i];
        add(-i, s[i] * (-i)  + now);
    }
    cout << res;
    return 0;
}
