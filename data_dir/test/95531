#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
const int mod = 1e9 + 7;
vector < int > dv[N * 5];
int arr[2 * N], freq[5 * N], spf[5 * N];
bool vis[2 * N];
vector < int > st;
vector < int > primes;
long long solve (int i, int cnt, int num, bool last){
    long long ret = 0 ;
    if (last) {
        if (cnt && cnt % 2)
            ret += freq[num];
        else if (cnt)
            ret -= freq[num];
    }
    if (i == primes.size()) {
        return ret;
    }
    ret += solve(i + 1, cnt + 1, num * primes[i], 1);
    ret += solve(i + 1, cnt, num, 0);
    return ret ;
}
void Sieve(){
    spf[1] = 1;
    for (int i=2; i< 5 * N; i++)
        spf[i] = i;
    for (int i=4; i< 5 * N; i+=2)
        spf[i] = 2;
    for (int i=3; i*i< 5 * N; i+=2){
        if (spf[i] == i){
            for (int j=i*i; j< 5 * N; j+=i)
                if (spf[j]==j)
                    spf[j] = i;
        }
    }
}
void prime_fact(int x){
    while (x != 1) {
        st.push_back(spf[x]);
        x = x / spf[x];
    }
}
int main() {
    Sieve();
    for(int i = 1 ; i < N * 5 ; i++ ){
        for(int j = 1 ; j * j <= i ; j++){
            if (i % j)
                continue;
            if (i / j == j)
                dv[i].push_back(j);
            else{
                dv[i].push_back(j);
                dv[i].push_back(i / j);
            }
        }
    }
    int n, q;
    scanf("%d%d",&n,&q);
    for(int i = 1 ; i <= n ; i++)
        scanf("%d",&arr[i]);
    int m = 0;
    long long ans = 0;
    while(q--){
        int x;
        scanf("%d",&x);
        if (vis[x]){
            vis[x] = 0;
            x = arr[x];
            st.clear();
            prime_fact(x);
            primes.clear();
            sort(st.begin(), st.end());
            for(int i = 0 ; i < st.size() ; i++)
                if (i == 0 || st[i] != st[i - 1])
                    primes.push_back(st[i]);
            long long A = 0;
            A = solve(0, 0, 1, 0) ;
            if (x == 1)
                A = 1;
            A = m - A;
            ans -= A;
            for(int i = 0 ; i < dv[x].size() ; i++){
                freq[dv[x][i]]--;
            }
            m--;
        }
        else {
            m++;
            vis[x] = 1;
            x = arr[x];
            st.clear();
            prime_fact(x);
            primes.clear();
            sort(st.begin(), st.end());
            for(int i = 0 ; i < st.size() ; i++)
                if (i == 0 || st[i] != st[i - 1])
                    primes.push_back(st[i]);
            long long A = 0;
            for(int i = 0 ; i < dv[x].size() ; i++){
                freq[dv[x][i]]++;
            }
            A = solve(0, 0, 1, 0) ;
            if (x == 1)
                A = 1;
            A = m - A;
            ans += A;
        }
        printf("%lld\n",ans);
    }
    return 0;
}