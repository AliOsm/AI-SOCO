/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const ld PI = 3.14159265358979323846;

#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

class CMedianSmoothing {
public:
	void solve(std::istream& in, std::ostream& out) {
        int n; in>>n;
        int res = 0;
        vi arr(n);
        f(i, n) in>>arr[i];
        f(i, n-1){
            if(arr[i]==arr[i+1]) continue;
            int start = i;
            while(i<n-1 and arr[i]!=arr[i+1]) ++i;
            int len = i-start+1;
            if(len&1){
                rep(k, start, i) arr[k] = arr[start];
                res = max(res,len/2);
            }
            else{
                f(k, len){
                    if(k<len/2) arr[start+k] = arr[start];
                    else arr[start+k] = arr[i];
                }
                res = max(len/2-1, res);
            }
        }
        out<<res<<'\n';
        for(int x: arr) out<<x<<' ';
	}
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	CMedianSmoothing solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
