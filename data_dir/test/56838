// #include <iostream>
// #include <math.h>
// #include <algorithm>
// using namespace std;

// int a[102];
// int b[102];
// int c[102];
// double cc[102];
// int l[102];
// int r[102];
// int tm[102];
// int x[102][202];
// double hak[102][202];
// int n, m;

// int gcd(int a, int b) {
//   if (b == 0) return a;
//   return gcd(b, a % b);
// }

// void harcum() {
//   cout << "? ";
//   for (int i = 0; i < n; i++) {
//     cout << a[i] << " ";
//   }
//   cout << endl;
//   cout.flush();
//   for (int i = 0; i < n; i++) {
//     cin >> b[i];
//   }
// }

// void gum(int i, int j, double k) {
//   for (int l = 0; l < 2 * n; l++) {
//     hak[i][l] += k * hak[j][l];
//   }
// }

// int main() {
//   cin >> n >> m;
//   if (m == 1) {
//     cout << "A ";
//     for (int i = 0; i < n; i++) cout << 1 << " ";
//     cout << endl;
//     cout.flush();
//     return 0;
//   }
//   for (int i = 0; i < n; i++) {
//     a[i] = 1;
//   }
//   harcum();
//   for (int i = 0; i < n; i++) {
//     c[i] = b[i];
//   }
//   for (int i = 0; i < n; i++) {
//     if (i) {
//       a[i - 1]--;
//     }
//     a[i]++;
//     harcum();
//     int gc = abs(b[0] - c[0]);
//     for (int j = 1; j < n; j++) {
//       gc = gcd(gc, abs(b[j] - c[j]));
//     }
//     for (int j = 0; j < n; j++) {
//       x[i][j] = (b[j] - c[j]) / gc;
//     }
//     x[i][n + i] = 1;
//   }

//   for (int i = 0; i < n; i++) {
//     for (int j = 0; j < 2 * n; j++) {
//       hak[i][j] = x[i][j];
//     }
//     hak[i][n + i] = 1;
//   }
//   for (int i = 0; i < n; i++) {
//     if (hak[i][i] == 0) {
//       for (int j = 0; j < n; j++) {
//         if (hak[j][i] != 0) {
//           gum(i, j, 1);
//         }
//       }
//     }
//   }
//   for (int j = n - 1; j >= 0; j--) {
//     for (int i = 0; i < n; i++) {
//       if (i != j) {
//         gum(i, j, -hak[i][j] / hak[j][j]);
//       }
//     }
//   }
//   for (int i = 0; i < n; i++) {
//     double baj = hak[i][i];
//     for (int j = 0; j < 2 * n; j++) {
//       hak[i][j] /= baj;
//     }
//   }
//   for (int i = 0; i < n; i++) {
//     for (int j = 0; j < 2 * n; j++) {
//       cout << x[i][j] << " ";
//     }
//     cout << endl;
//   }
//   for (int i = 0; i < n; i++) {
//     for (int j = 0; j < 2 * n; j++) {
//       cout << hak[i][j] << " ";
//     }
//     cout << endl;
//   }
//   for (int i = 0; i < n; i++) {
//     l[i] = 1;
//     r[i] = m + 1;
//   }
//   while (1) {
//     int qan = 0;
//     for (int i = 0; i < n; i++) {
//       a[i] = (l[i] + r[i]) / 2; 
//       if (r[i] - l[i] > 1) {
//         qan++;
//       }
//     }
//     if (qan == 0) {
//       break;
//     }
//     harcum();

//     for (int i = 0; i < n; i++) {
//       cc[i] = 0;
//       for (int j = 0; j < n; j++) {
//         cc[i] += hak[n + i][j] * b[i];
//       }
//       cout << cc[i] << " ";
//     }
//     cout << endl;
//     for (int i = 0; i < n; i++) {
//       if (cc[i] <= 0) {
//         l[i] = a[i];
//       } else {
//         r[i] = a[i];
//       }
//     }
//   }
//   cout << "A ";
//   for (int i = 0; i < n; i++) {
//     cout << l[i] << " ";
//   }
//   cout << endl;
//   cout.flush();
//   return 0;
// }

// #include <iostream>
// #include <string>
// #include <cstdio>
// using namespace std;
// int sz;
// int pf[300010];
// string s;
// int f[300010];

// void add2(int x) {
//   x++;
//   for (; x <= 300; x += x & -x) {
//     f[x]++;
//   }
// }

// int get(int k) {
//   int res = 0;
//   for (; k; k -= k & -k) {
//     res += f[k];
//   }
//   return sz - res;
// }

// void add(char x) {
//   s.push_back(x);
//   sz++;
//   if (sz == 1) {
//     return;
//   }
//   int j = pf[sz - 2];
//   while (j != 0 && x != s[j]) {
//     j = pf[j - 1];
//   }
//   if (x == s[j]) {
//     j++;
//   }
//   pf[sz - 1] = j;
//   add2(j);
// }

// int main() {
//   int n;
//   scanf("%d", &n);
//   int last = 0;
//   for (int i = 0; i < n; ++i) {
//     char c[6];
//     scanf(" %s", c);
//     if (c[0] == 'a') {
//       char x;
//       scanf(" %c", &x);
//       add('a' + ((x - 'a' + last) % 26));
//     } else {
//       int k;
//       scanf("%d", &k);
//       last = get((last + k - 1) % sz + 1);
//       printf("%d\n", last);
//     }
//   }
//   for (int i = 0; i < sz; ++i) {
//     cout << pf[i] << endl;
//   }
//   return 0;
// }

/*#include <iostream>
using namespace std;
int main() {
  for (int n = 20; n <= 2000; n++) {
    long double mx = -1;
    for (int x = 1; 4 * x < 3 * n + 210; x++) {
      long double ans = (1 - x * 1.0L / n / n);
      long double k = (1 - x * 1.0L / n / n);
      for (int q = 0; q < 3 * n + 210 - 4 * x; q++) {
        ans *= k;
      }
      mx = max(mx, 1 - ans);
    }
    if (n % 20 == 0)
      cout << n << " " << mx << endl;
  }
  return 0;
}*/

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>

using namespace std;
vector <pair<int, int> > dzax[502][502], verev[502][502];
long long d[500002];
long long e[500002];
long long havayi[503][504];
const long long inf = 1000 * 1000 * 1000ll * 1000 * 1000 * 1000 + 1000;
long long dp1[502][502][2];
long long dp2[502][502][2];

int main() {
  int n, m, k;
  cin >> n >> m >> k;
  for (int i = 0; i < k; i++) {
    int x, y, D, T, E;
    cin >> x >> y >> D >> T >> E;
    d[i] = D;
    e[i] = E;
    int x1 = x, y1 = y, x2 = x + D, y2 = y - D, x3 = x + D, y3 = y, x4 = x, y4 = y + D;
    bool galua1 = ((x1 + y1) >= T + 0) && ((x1 + y1 - T) % 4 == 0);
    bool galua2 = ((x2 + y2) >= T + 1) && ((x2 + y2 - T) % 4 == 1);
    bool galua3 = ((x3 + y3) >= T + 2) && ((x3 + y3 - T) % 4 == 2);
    bool galua4 = ((x4 + y4) >= T + 3) && ((x4 + y4 - T) % 4 == 3);
    // cout << i << " "<< galua1 << " "<< galua2 << " "<< galua3<< " "<< galua4 << endl;
    if (galua1) {
      havayi[x1][y1] += E;
    }
    if (galua2) {
      havayi[x2][y2] += E;
    }
    if (galua3) {
      havayi[x3][y3] += E;
    }
    if (galua4) {
      havayi[x4][y4] += E;
    }
    if (galua1 && galua4) {
      dzax[x4][y4].push_back(make_pair(y1, i));
    }
    if (galua2 && galua3) {
      dzax[x3][y3].push_back(make_pair(y2, i));
    }
    if (galua1 && galua3) {
      verev[x3][y3].push_back(make_pair(x1, i));
    }
  }
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      sort(dzax[i][j].begin(), dzax[i][j].end());
      sort(verev[i][j].begin(), verev[i][j].end());
    }
  }
  
  for (int j = 0; j < m; j++)
    for (int b = 0; b <= 1; b++)
      for (int k = 0; k <= max(n, m); k++)
        dp1[j][k][b] = inf;

  for (int b = 0; b <= 1; b++)
    for (int k = 0; k <= max(n, m); k++)
      dp1[0][k][b] = 0;

  for (int i = 0; i < n; i++)
    for (int j = 0; j < m; j++) {
      if (i + j == 0) continue;
      for (int bb = 0; bb <= 1; bb++) 
        for (int k = 0; k <= max(m,n); k++)
          dp2[j][k][bb] = inf;
      ///// b == 0
      int b = 0;
      for (int k = 2; k <= (b ? j : i); k++) {
        dp2[j][k][b] = dp1[j][k - 1][b] + havayi[i][j];
        for (int l = 0; l < verev[i][j].size(); l++)
          if (verev[i][j][l].first >= i - k)
            dp2[j][k][b] -= e[verev[i][j][l].second];
      }
      if (i > 0) {
        dp2[j][1][0] = dp1[j][0][0];
        for (int l = 1; l <= j; l++)
          dp2[j][1][0] = min(dp2[j][1][0], dp1[j][l][1]);
        dp2[j][1][0] += havayi[i][j];
      }
      ///// b == 1
      b = 1;
      for (int k = 2; k <= (b ? j : i); k++) {
        dp2[j][k][b] = dp2[j - 1][k - 1][b] + havayi[i][j];
        for (int l = 0; l < dzax[i][j].size(); l++)
          if (dzax[i][j][l].first >= j - k)
            dp2[j][k][b] -= e[dzax[i][j][l].second];
      }
      if (j > 0) {
        dp2[j][1][1] = dp2[j - 1][0][1];
        for (int l = 1; l <= i; l++)
          dp2[j][1][1] = min(dp2[j][1][1], dp2[j - 1][l][0]);
        dp2[j][1][1] += havayi[i][j];
        for (int l = 0; l < dzax[i][j].size(); l++)
          if (d[dzax[i][j][l].second] == 1)
            dp2[j][1][1] -= e[dzax[i][j][l].second];
      }
      memcpy(dp1[j], dp2[j], sizeof dp1[j]);
    }
  // for (int i = 0; i < n; i++)
  //   for (int j = 0; j < m; j++)
  //     for (int b = 0; b <= 1; b++)
  //       for (int k = 1; k <= (b ? j : i); k++) {
  //         cout << i << " " << j << " " << k << " " << b << " " << dp[i][j][k][b] << endl;
  //       }
  long long ans = inf;
  for (int k = 0; k <= max(n, m); k++) {
    ans = min(ans, dp1[m - 1][k][0]);
    ans = min(ans, dp1[m - 1][k][1]);
  }
  cout << ans << endl;
  return 0;
}

/*
3 3 5
0 1 1 0 7
1 1 1 0 10
1 1 1 1 2
1 1 1 2 2
0 1 1 2 3
*/