/* ****revpro**** */

#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define endl       '\n'
#define pii         pair<ll,ll>
#define vi          vector<ll>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll i=a;i<b;i++)
#define repr(i,a,b) for(ll i=b-1;i>=a;i--)    
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define mii        map<ll,ll>
using namespace std;

#define N  100005
ll n,ma,cnt=0;
vi a[26],in(26,0),order;
set<ll> nextnode;
set <ll> q;
void topsort()
{
    for(auto i:q)
    if(!in[i])
        nextnode.insert(i);
    while(!nextnode.empty())
    {
        ll cur=*nextnode.begin();
        nextnode.erase(cur);
        order.pb(cur);
        cnt++;
        for(auto i:a[cur])
        {
            in[i]--;
            if(!in[i])
                nextnode.insert(i);
        }
    }
    if(cnt!=ma) //Failed
    {
        cout<<"Impossible";
    }
    else
    {
        for(auto i:order)
            cout<<char(i+'a');
        rep(i,0,26)
        if(!present(q,i))
            cout<<char(i+'a');
    }
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int TESTS=1;
//    cin>>TESTS;
    while(TESTS--)
    {
        
        ll n;
        cin>>n;
        map <pii,ll> m;
        ll si[n];
        string s[n];
        rep(i,0,n)
            {cin>>s[i];si[i]=sz(s[i]);}
        rep(i,0,n-1)
        rep(j,i+1,n)
        {
            ll c=0;
            rep(k,0,min(si[i],si[j]))
            {
                if(s[i][k]!=s[j][k])
                {
                    c=1;
                    q.insert(s[i][k]-'a');
                    q.insert(s[j][k]-'a');
                    if(!m[{s[i][k]-'a',s[j][k]-'a'}])
                    {
                        m[{s[i][k]-'a',s[j][k]-'a'}]=1;
                        a[s[i][k]-'a'].pb(s[j][k]-'a');
                        in[s[j][k]-'a']++;
                    }
                    break;
                }
            }
            if(!c)
            {
                if(si[i]>si[j])
                {
                    cout<<"Impossible";
                    return 0;
                }
            }
        }
        ma=q.size();
        topsort();
    }
    return 0;
}