#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> adj[100100];
int res[100100];

vector<int> v;
void dfs(int a, int p, int d, int r1, int r2) {
	int &t = (d % 2) ? r1 : r2;
	res[a] ^= t;
	if (res[a]) {
		t ^= 1;
		v.push_back(a);
	}
	for (int i = 0; i < adj[a].size(); i++) {
		int b = adj[a][i];
		if (b != p) {
			dfs(b, a, d + 1, r1, r2);
		}
	}
}

int main() {
	int n;
	cin >> n;
	for (int i = 0; i < n - 1; i++) {
		int a, b;
		cin >> a >> b;
		a--;
		b--;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	for (int k = 0; k < 2; k++) {
	for (int i = 0; i < n; i++) {
		int a;
		cin >> a;
		res[i] ^= a;
	}
	}
	dfs(0, -1, 0, 0, 0);
	cout << v.size() << '\n';
	for (int i = 0; i < v.size(); i++) {
		cout << v[i] + 1 << '\n';
	}
}