#include <bits/stdc++.h>

using namespace std;
const int N =2e5 +  9 ;
typedef long long  ll ;
#define f first
#define s second
vector < int > adj[N];
int timer;
int in[400010] , out[400010] , a[400010]  , v[400010] , vis[400010] ;
vector < int > trav;
void dfs(int s , int parent , int par){
   trav.push_back(s);
    v[s] = par;
    in[s] = ++timer ;
    for(int i : adj[s]){
        if(i!=parent)
            dfs(i , s , par ^ 1);
    }
    out[s] =++timer;
}
int BIT[400010] ;
void upd( int pos , int val )
{
    for ( ; pos < 400010 ; pos += pos & -pos )
        BIT[pos] += val ;
}

int get( int pos )
{
    int sum = 0 ;
    for ( ; pos >= 1 ; pos -= pos & -pos )
        sum += BIT[pos] ;
    return sum ;
}
int main()
{




    int n , m , u , vv , x ,y , z;
    scanf("%d %d" , &n , &m);
    int curr = 1;
    for(int i = 1 ; i<=n ; ++i){
        scanf("%d" , a + i);
    }
    for(int i = 1 ; i <n ; ++i){
        scanf("%d %d" , &u , &vv);
        adj[u].push_back(vv);
        adj[vv].push_back(u);
    }
    dfs(1 , - 1 , 0);
//    for(int i = 0 ; i< n ; ++i){
//        cout << trav[i] << " ";
//    }
//    cout << endl;
//    for(int i = 1 ; i<=n ; ++i){
//        cout << in[i] << " ";
//    }
//    cout << endl;
//    for(int i = 1 ; i<=n ; ++i){
//        cout << out[i] << " ";
//    }
//    cout << endl;
    while ( m-- )
    {
        scanf("%d" , &x);
        if ( x == 2 )
        {
            cin >> y ;
            if ( v[y] & 1 ){
                int ans =  a[y] - get(in[y]) ;
                printf("%d\n" , ans);
            }
            else{
                int ans =  a[y] + get(in[y]) ;
                printf("%d\n" , ans);
            }
        }
        else
        {
            scanf("%d %d" , &y , &z);
            if ( v[y] & 1 )
            {
                upd(in[y],-z) ;
                upd(out[y],z) ;
            }
            else
            {
                upd(in[y],z) ;
                upd(out[y],-z) ;
            }
        }
    }
   //  cout << v[1];
    return 0;
}
