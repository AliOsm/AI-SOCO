#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace __gnu_pbds;
using namespace std;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define PI 3.1415926535897932384626433832795
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
long long MOD = 1e9+7;
pair<int,int> dx[4] = {{1,0},{-1,0},{0,1},{0,-1}};
const int RANDOM = chrono::high_resolution_clock::now().time_since_epoch().count();
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
struct chash {int operator()(int x) const { return x ^ RANDOM; }};
string toString(long long x){stringstream ss;ss << x;string str = ss.str();return str;}
long long fastpow(long long x,long long k){if(!k)return 1;if(k & 1)return ((x * fastpow(x,k-1) % MOD) % MOD) % MOD;
long long ans = fastpow(x,k/2);ans %= MOD;ans *= ans;ans %= MOD;return ans;}
long long sumF(long long x){int s = 0;while(x)s += x%10,x /= 10;return s;}
bool isS(char c){return (c >= 'a' && c <= 'z');}
bool isB(char c){return (c >= 'A' && c <= 'Z');}
bool isD(char c){return (c >= '0' && c <= '9');}
bool isSqrt(long long x){ long long f = sqrt((long double)x + 0.5); return f*f == x;}
bool isCubic(long long x) {long long f = cbrt((long double)x + 0.5); return f*f*f == x;}
long long lcm(long long a,long long b){return a * (b / __gcd(a,b));}
vector<long long> divVec(long long x){vector<long long> tmp;for(long long i = 2;1LL*i*i <= x;i++){if(x % i == 0){tmp.push_back(i);if(x / i != i)
tmp.push_back(x / i);}}sort(tmp.begin(),tmp.end());return tmp;}
long long countDiv(long long L,long long R,long long C){return ((R/C) - ((L-1)/C));}
map<long long,long long> freq;
int random_int(int l,int r){return uniform_int_distribution<int>(l,r)(rng);}
vector<pair<int,int > > edgeList[300005];
pair<int,pair<int,int> > edge[300005];
int lowestComputed[300005];
map<int,int> bestAns[300005];
int lastIdx[300005];
int lastBest[300005];
int DP[300005];
int n,m;
void cleaar(int idx)
{
    edge[idx] = make_pair(0,make_pair(0,0));
    edgeList[idx].clear();
    lowestComputed[idx] = 0;
    bestAns[idx].clear();
    lastIdx[idx] = 0;
    lastBest[idx] = 0;
    DP[idx] = 0;
}
int solve(int idx)
{
    if(idx == m)
        return 0;
    int toGo = edge[idx].second.first;

    int curWeight = edge[idx].second.second;
    //cout << "Inside Node " << toGo << " With Weight" << toGo << endl;
    if(lowestComputed[toGo] <= curWeight)
    {
        map<int,int>::iterator it = bestAns[toGo].upper_bound(curWeight);
        //cout << "Cur Node" << " " << toGo << " - Cur Weight " << curWeight;
        if(it == bestAns[toGo].end())
        {
            //cout << "Not Found" << endl;
            return 0;
        }
        //cout << it->second << endl;
        return DP[idx] = it->second;
    }
    int& curBest = lastBest[toGo];
    for(int& i = lastIdx[toGo];i >= 0 && edgeList[toGo][i].first > curWeight;i--)
    {
       // cout << curBest << " " << curWeight << endl;
        curBest = max(curBest,1 + solve(edgeList[toGo][i].second));
        bestAns[toGo][edgeList[toGo][i].first] = curBest;
        lowestComputed[toGo] = curWeight;
    }
    //cout << "Cur Node1" << " " << toGo << " - Cur Weight " << curWeight << " " << lowestComputed[toGo] << " ";
    //cout << " " << curBest << endl;

    return curBest;
}
void solve3(int testc)
{
    memset(DP,-1,sizeof DP);
    cin >> n >> m;
    for(int i = 1;i <= n;i++)
        cleaar(i);
    for(int i = 0;i < m;i++)
    {
        int u,v,w;
        scanf("%d %d %d",&u,&v,&w);
        edge[i].first = u;
        edge[i].second.first = v;
        edge[i].second.second = w;
        edgeList[u].push_back(make_pair(w,i));
    }
    for(int i = 1;i <= n;i++)
    {
        sort(edgeList[i].begin(),edgeList[i].end());
        lowestComputed[i] = 1e7;
        lastIdx[i] = edgeList[i].size() - 1;
    }
    int B = 0;
    for(int i = 0;i < m;i++)
    {
        //cout << "START NEW DFS" << endl;
        B = max(B,solve(i));
    }
    cout << B+1 << endl;
}
void solve2(int testc)
{
    cin >> n;
    vector<int> dp(n+1,0);
    vector<int> oldDp(n+1,0);
    vector<int> maxw(n+1,0);
    vector<pair<int,pair<int,int> > > Edges(n);

    for(int i = 0;i < n-1;i++)
        cin >> Edges[i].second.first >> Edges[i].second.second >> Edges[i].first;
    sort(Edges.begin(),Edges.end());
    int ans = 0;
    for(int i = 0;i < Edges.size();i++)
    {
       int u, v, w;
		w=Edges[i].first;
		u=Edges[i].second.first;
		v=Edges[i].second.second;
		int val;
		if(w == maxw[u])
			val = oldDp[u]+1;
		else
			val = dp[u]+1;
		if(val > dp[v]){
			if(maxw[v] != w)
				oldDp[v]=dp[v];
			dp[v] = val;
			maxw[v]=w;
			ans=max(ans, val);
		}
    }
    cout << "Case " << testc << ": " << ans << endl;
    return;
}
void generateGraphs()
{
    int n = random_int(10,20);
    cout << n << endl;
    bool visited[n+1][n+1] = {false};
    int edges = n-1;
    while(edges > 0)
    {
        int u = random_int(1,n);
        int v = random_int(1,n);
        if(u == v || visited[u][v])
            continue;
        int w = random_int(1,30);
        visited[u][v] = visited[v][u] = true;
        cout << u << " " << v << " " << w << endl;
        edges--;
    }
}
int main()
{
    //freopen("output.txt","r",stdin);
    //freopen("output2.txt","w",stdout);
    int c = 1;
    while(c--)
    {
        //solve2(1000-c);
        solve3(1-c);
        //generateGraphs();
    }
}
