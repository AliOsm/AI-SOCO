#include<bits/stdc++.h>
using namespace std;
#define int long long
typedef long long ll;

const int Max = 2e5+10;
vector<pair<int, int>> adj[Max];
int value[Max];

bool cmp(const pair<int, int> &x, const pair<int, int> &y) {
    return x.second < y.second;
}

int32_t main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int n, m;
    cin >> n >> m;
    for(int i = 1; i <= n; ++i) {
        cin >> value[i];
    }
    int u,v,w;
    for(int i = 0; i < m; ++i) {
        cin >> u >> v >> w;
        adj[u].push_back({v,w});
        adj[v].push_back({u,w});
    }
    /*
    for(int i = 1; i <= n; ++i) {
        sort(arr[i].begin(), arr[i].end(), cmp);
    }*/
    set<pair<int, int>> outside;//value, node
    for(int i = 2; i <= n; ++i) {
        outside.insert({value[i], i});
    }
    set<pair<int, int>> inside;//value, node
    inside.insert({value[1], 1});
    int res = 0;
    set<pair<int, int>> special;//value, node: special deals
    for(auto &p : adj[1]) {
        special.insert({p.second, p.first});
    }
    vector<bool> isInside(n+1, false);
    isInside[1] = true;
    for(int i = 1; i < n; ++i) {
        int nextWeight = inside.begin()->first + outside.begin()->first;
        int nextNode = outside.begin()->second;
        if(!special.empty()) {
            int tempWeight = special.begin()->first;
            int tempNode = special.begin()->second;
            if(tempWeight < nextWeight) {
                nextWeight = tempWeight;
                nextNode = tempNode;
            }
        }
        //cout << "here: " << nextNode << ' ' << nextWeight << '\n';
        res += nextWeight;
        isInside[nextNode] = true;
        outside.erase({value[nextNode], nextNode});
        inside.insert({value[nextNode], nextNode});
        while(!special.empty() && isInside[special.begin()->second]) {
            special.erase(special.begin());
        }
        for(auto &p : adj[nextNode]) {
            if(isInside[p.first]) continue;
            special.insert({p.second, p.first});
        }
    }
    cout << res << '\n';
    return 0;
}











































