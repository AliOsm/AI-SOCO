#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update


#define f first
#define s second
#define pb push_back
#define mp make_pair
#define clr(dp,i) memset(dp,i,sizeof(dp))
#define opt     ios_base::sync_with_stdio(NULL);cin.tie(NULL);cout.tie(NULL);

using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag,
tree_order_statistics_node_update> oset;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef pair<int, int> pii;
const long long mod = 1e9+7;
const ld pi = 3.14159265358979323846264338327950288;
//========================================
map<int, int> mep;
int sz[100001];
int main()
{
	ll n, x, y;
	cin >> n >> x >> y;
	string s;
	cin >> s;
	ll zero = 0, one = 0;
	for(int i=0; i<n; i++)
	{
		s[i]=='0' ? zero++ : one++;
		while(s[i] == s[i+1])
		i++;
	}
	if(zero)
	cout << min(zero * y, min((zero-1) * x + y, one * y + y)) << endl;
	else
	cout << 0 << endl;
}