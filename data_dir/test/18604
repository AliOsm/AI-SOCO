#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;*/
#define itn int
#define all(c) c.begin(),c.end()
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define ll long long
#define ull unsigned long long
#define pll pair<ll, ll>
#define pii pair<int, int>
#define mp(x, y) make_pair(x, y)
using namespace std;

const ll inf = 1e18;
const double PI = 3.1415926536;
int days[13] = {0, 31, 28, 31, 30, 31,30, 31, 31, 30, 31, 30, 31};

template<typename T>
ostream& operator <<(ostream& out, const vector<T>& mas) {
    for (const auto& x : mas) {
        out << x << ' ';
    }
    return out;
}

void ok() {
    cout << "YES" << '\n';
}

void no() {
    cout << "NO" << '\n';
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}


string And(const string& t1, const string& t2) {
    string ans = "";
    for (int i = 0; i < t1.size(); i++) {
        if (t1[i] == '1' && t2[i] == '1') {
            ans += '1';
        } else {
            ans += '0';
        }
    }
    return ans;
}

int cnt(const string& t1, const string& t2) {
    int ans = 0;
    for (int i = 0; i < t1.size(); i++) {
        if (t1[i] != t2[i]) {
            ans += 1;
        }
    }
    return ans;
}

static const int SZ_D = 10;
static const vector<string> digits = {
    "1110111", "0010010", "1011101", "1011011",
    "0111010", "1101011", "1101111", "1010010",
    "1111111", "1111011"
};

void solve() {
    int n = nxt(), k = nxt();
    vector<string> tablo(n);
    for (int i = 0; i < n; i++) {
        cin >> tablo[i];
    }
    reverse(all(tablo));
    int trans[n][SZ_D];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < SZ_D; j++) {
            if (And(tablo[i], digits[j]) == tablo[i]) {
                trans[i][j] = cnt(tablo[i], digits[j]);
            } else {
                trans[i][j] = -1;
            }
        }
    }

    bool dp[n + 1][k + 1];
    int prev[n + 1][k + 1];
    memset(dp, false, sizeof(dp));
    memset(prev, -1, sizeof(prev));
    dp[0][0] = true;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j <= k; j++) {
            for (int to = 0; to < SZ_D; to++) {
                if (trans[i][to] == -1 || j + trans[i][to] > k || !dp[i][j]) {
                    continue;
                }
                int t = j + trans[i][to];
                dp[i + 1][t] |= dp[i][j];
                prev[i + 1][t] = max(to, prev[i + 1][t]);
            }
        }
    }

    if (!dp[n][k]) {
        cout << -1 << '\n';
    } else {
        int i = n;
        int j = k;
        string ans = "";
        while (i > 0) {
            int cur_dig = prev[i][j];
            ans += char(cur_dig + '0');
            j -= trans[i - 1][cur_dig];
            i--;
        }
        cout << ans << '\n';
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    int t = 1;
    while (t--) {
        solve();
    }

    return 0;
}
