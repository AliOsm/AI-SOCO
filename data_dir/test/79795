#include "omp.h"
#include <iostream>
#include <cmath>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <map>
#include <string>
#include <set>
#include <cassert>



using namespace std;


typedef long double ld;
typedef long long ll;


const int psze = 20, sze = 1 << 10, INF = 1e9 + 1, M = 1e6, root = 1;


signed main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, m, k;
	cin >> n >> m >> k;
	
	int dp[sze << 1][sze << 1];

	for (int i = 0; i < sze; ++i)
		for (int j = 0; j < sze; ++j)
			dp[i][j] = INF;

	dp[0][0] = 0;

	for (int i = 0; i < n; ++i)
	{
		string s;
		cin >> s;

		vector<int> values(m);

		for (int z = 0; z < m; ++z)
			values[z] = (!z ? 0 : values[z - 1]) + int(s[z] == '1');

		if (!values[m - 1])
		{
			for (int j = 0; j < sze; ++j)
				dp[i + 1][j] = dp[i][j];
			
			continue;
		}

		for (int j = 0; j < sze; ++j)
			dp[i + 1][j + values[m - 1]] = dp[i][j];


		vector<int> cnt(m + 1, INF);

		for (int j = 0; j < m; ++j)
			cnt[values[j]] = min(cnt[values[j]], j + 1);

		for (int j = 0; j < m; ++j)
			for (int z = j + 1; z < m; z++)
				cnt[values[z] - values[j]] = min(cnt[values[z] - values[j]], z - j);

		for (int j = 0; j <= k; ++j)
		{
			if (dp[i][j] == INF)
				continue;

			for (int z = 1; z <= values[m - 1]; ++z)
			{
				dp[i + 1][j + values[m - 1] - z] = min(dp[i + 1][j + values[m - 1] - z], dp[i][j] + cnt[z]);
			}
		}
	}


	int ans = INF;
	for (int i = 0; i <= k; ++i)
		ans = min(ans, dp[n][i]);

	cout << ans;
	return 0;
}