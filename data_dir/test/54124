#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

//#define PB push_back
#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template < typename F, typename S > ostream& operator << ( ostream& os, const pair< F, S > & p ) { return os << "(" << p.first << ", " << p.second << ")"; }
template < typename T > ostream &operator << ( ostream & os, const vector< T > &v ) { os << "{";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "}";}
template < typename T >ostream &operator << ( ostream & os, const set< T > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "]";}
template < typename T >ostream &operator << ( ostream & os, const multiset< T > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "]";}
template < typename F, typename S >ostream &operator << ( ostream & os, const map< F, S > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << it -> first << " = " << it -> second ;}return os << "]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
clock_t tStart = clock();
#define timeStamp dbg("Execution Time: ", (double)(clock() - tStart)/CLOCKS_PER_SEC)
void faltu () {cerr << endl;}
template <typename T>void faltu( T a[], int n ) {for(int i = 0; i < n; ++i) cerr << a[i] << ' ';cerr << endl;}
template <typename T, typename ... hello>
void faltu( T arg, const hello &... rest) {cerr << arg << ' ';faltu(rest...);}
//#else
//#define dbg(args...)

int r, s, p;
double dp[105][105][105];

void reset()
{
    for( int i = 0; i < 105; ++i ) for( int j = 0; j < 105; ++j ) for( int k = 0; k < 105; ++k ) dp[i][j][k] = -1.1;
}

double recur( int rock, int scissor, int paper, int ok )
{
    if( !scissor && !paper && rock ) {
        if( ok == 0 ) return 1.0;
        return (double)0.0;
    }
    if( !rock && !paper && scissor ) {
        if( ok == 1 ) return 1.0;
        return (double)0.0;
    }
    if( !rock && !scissor && paper ) {
        if( ok == 2 ) return 1.0;
        return (double)0.0;
    }
    if( !rock && !scissor && !paper ) return (double)0.0;
    double &ret = dp[rock][scissor][paper], ret1 = 0.0, ret2 = 0.0, ret3 = 0.0;
    if( ret != -1.1 ) return ret;
    ret = 0.0;
    int total = rock + scissor + paper;


    double den = 1 -((double)(rock*(rock-1))/(double)(total*(total-1))) -((double)(scissor*(scissor-1))/(double)(total*(total-1))) -((double)(paper*(paper-1))/(double)(total*(total-1)));

    if( rock && scissor ) ret1 = max(ret1, ((double)(2*rock*scissor)/(double)(total*(total-1))) * (0.0 + recur( rock, scissor-1, paper, ok )));
    if( rock && paper ) ret2 = max(ret2, ((double)(2*rock*paper)/(double)(total*(total-1))) * (0.0 + recur( rock-1, scissor, paper, ok )));
    if( scissor && paper ) ret3 = max(ret3, ((double)(2*scissor*paper)/(double)(total*(total-1))) * (0.0 + recur( rock, scissor, paper-1, ok )));

    double num = ret1 + ret2 + ret3;
    ret = num/den;
    //dbg(ret);
    return ret;


}

int main()
{
    optimize();
    fraction();
    cin >> r >> s >> p;
    reset();
    cout << recur( r, s, p, 0 ) << " ";
    reset();
    cout << recur( r, s, p, 1 ) << " ";
    reset();
    cout << recur( r, s, p, 2 );
}



























