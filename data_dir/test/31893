#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <climits>
#include <unordered_map>
#include <iterator> 
#include <bitset>
#include <complex>
#include <random>
#include <chrono>
#include <functional>
using namespace std;
typedef complex<double> cd;
#define ll long long
#define ull unsigned long long
#define ui unsigned int
#define mp make_pair
#define inf32 INT_MAX
#define inf64 LLONG_MAX
#define PI acos(-1)
#define cos45 cos(PI/4)
#define ld long double
#define inf INT_MAX
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pli pair<ll, int>
#define pil pair<int, ll>
#pragma GCC optimize("O3")
//#define x first
//#define y second
const int mods[10] = { 1000000007, 999999937, 999999929, 999999893, 999999883, 999999797, 999999761, 999999757, 999999751, 999999739 };
int mod1 = (1e9) + 7, mod2 = 998244353;
const long double eps = 1e-10;
const int siz = 1e5 + 5, siz2 = 2e5 + 5, lg = 20, block = 448, block2 = 1000, mxv = 5e5, sqrt_mod = 31630;
const int alpha_sz = 26;

int n, a[101], b[101];
char init[101];
bool tog[101][125], cur[101][125];

int gcd(int a, int b) {
	return b == 0 ? a : gcd(b, a%b);
}

int main()
{
	scanf("%d%s", &n, init);
	int mxbi = INT_MIN;
	int lcm = 1;
	for (int i = 0; i < n; i++) {
		scanf("%d%d", &a[i], &b[i]);
		mxbi = max(mxbi, b[i]);
		lcm = lcm * 2 * a[i] / gcd(lcm, 2 * a[i]);
	}
	for (int i = 0; i < n; i++) {
		for (int j = b[i]; j <= mxbi+lcm-2; j += a[i]) {
			tog[i][j] = 1;
		}
	}
	int mx = 0;
	for (int i = 0; i < n; i++) {
		cur[i][0] = init[i] - '0';
		mx += cur[i][0];
	}
	for (int i = 1; i <= mxbi+lcm-2; i++) {
		int curv = 0;
		for (int j = 0; j < n; j++) {
			cur[j][i] = tog[j][i] ^ cur[j][i - 1];
			curv += cur[j][i];
		}
		mx = max(mx, curv);
	}
	printf("%d\n", mx);
	return 0;
}