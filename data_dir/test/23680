//In the name of God

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <int , int> pii;

const int N = 1e5+10 , mod = 1e9+7 , K = 50;

vector <int> g[N] , topol , good , h[N] , G[N * K];
vector <pii> vec;
bool mark[N] , mk[N][K] , mark2[N * K];
string s[N];
int d , dp[N * K] , cmp[N] , cnt , state[N][K] , ret[N * K];

void dfs(int v){
   mark[v] = true;
   for(int u : g[v])
      if(!mark[u])
         dfs(u);
   topol.push_back(v);
}

void dfs4(int v){
   mark2[v] = true;
   for(int u : G[v])
      if(!mark2[u])
         dfs4(u);
   topol.push_back(v);
}

void dfs2(int v){
   mark[v] = true;
   cmp[v] = cnt;
   for(int u : h[v])
      if(!mark[u])
         dfs2(u);
}

void dfs3(int v , int st){
   state[v][st] = cnt;
   mk[v][st] = true;
   if(s[v][st] == '1' && !mark[v]){
      mark[v] = true;
      good.push_back(v);
   }
   for(int u : g[v])
      if(cmp[u] == cmp[v] && !mk[u][(st + 1) % d])
         dfs3(u , (st + 1) % d);
}

int32_t main(){
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
   int n , m;
   cin >> n >> m >> d;
   for(int i = 0 ; i < m ; i++){
      int u , v;
      cin >> u >> v;
      u--; v--;
      g[u].push_back(v);
      h[v].push_back(u);
   }
   for(int i = 0 ; i < n ; i++){
      if(!mark[i])
         dfs(i);
   }
   reverse(topol.begin() , topol.end());
   memset(mark , 0 , sizeof(mark));
   for(int v : topol)
      if(!mark[v])
         dfs2(v) , cnt++;
   for(int i = 0 ; i < n ; i++)
      cin >> s[i];
   cnt = 0;
   memset(mark , 0 , sizeof(mark));
   for(int i = 0 ; i < n ; i++)
      for(int j = 0 ; j < d ; j++)
         if(!mk[i][j]){
            dfs3(i , j);
            ret[cnt] = good.size();
            cnt++;
            for(int v : good)
               mark[v] = false;
            good.clear();
         }
   set <pii> st;
   for(int i = 0 ; i < n ; i++)
      for(int j = 0 ; j < d ; j++)
         for(int u : g[i])
            if(state[i][j] != state[u][(j + 1) % d]){
               G[state[i][j]].push_back(state[u][(j + 1) % d]);
            }
   topol.clear();
   for(int i = 0 ; i < cnt ; i++){
      if(!mark2[i])
         dfs4(i);
   }
   for(int v : topol){
      for(int u : G[v])
         dp[v] = max(dp[v] , dp[u]);
      dp[v] += ret[v];
   }
   cout << dp[state[0][0]];
   return 0;
}
