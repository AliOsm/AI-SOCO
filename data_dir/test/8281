#include <bits/stdc++.h>

using namespace std;

int const N = 1e5 + 10;

struct point
{
	int x, y, id;
} p[N + N];

bool operator < (point a, point b)
{
	return (a.x < b.x) || (a.x == b.x && a.y < b.y);
}

int n, m;

point upper[N], lower[N];
int topU, topL;

long long cross (point a, point b, point c)
{
	return (long long) (c.x - a.x) * (long long) (b.y - a.y) - (long long) (c.y - a.y) * (long long) (b.x - a.x);
}

void solve ()
{
	sort (p, p + n + m);
	for (int i = 0; i < n + m; i++)
	{
		while (topU >= 2 && cross (upper[topU - 1], upper[topU], p[i]) < 0)
			topU--;
		topU++;
		upper[topU] = p[i];
	}
	for (int i = n + m - 1; i >= 0; i--)
	{
		while (topL >= 2 && cross (lower[topL - 1], lower[topL], p[i]) < 0)
			topL--;
		topL++;
		lower[topL] = p[i];
	}
	bool ok = 1;
	for (int i = 1; i <= topU; i++)
		if (upper[i].id != 0)
			ok = 0;
	for (int i = 1; i <= topL; i++)
		if (lower[i].id != 0)
			ok = 0;
	if (ok)
		printf ("YES\n");
	else
		printf ("NO\n");
}

int main ()
{
	cin.sync_with_stdio (false);
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		int x, y;
		cin >> x >> y;
		p[i].x = x;
		p[i].y = y;
		p[i].id = 0;
	}
	cin >> m;
	for (int i = 0; i < m; i++)
	{
		int x, y;
		cin >> x >> y;
		p[n + i].x = x;
		p[n + i].y = y;
		p[n + i].id = 1;
	}
	solve ();
	return 0;
}