#include <bits/stdc++.h>

#define ll long long
#define ull unsigned long long
#define all(v)  v.begin() , v.end()
#define rall(v)  v.rbegin() , v.rend()
#define FOR(it,A) for(typeof A.begin() it = A.begin(); it!=A.end(); it++)
#define REP(i,n) for(int i=0;i<(n);i++)
#define pb push_back
#define vi vector<int>
#define vll vector<ll>
#define vull vector<ull>
#define vvi vector< vector<int> >
#define pii pair< int , int >
#define pll pair< ll , ll >
#define mp make_pair
#define fi first
#define se second
#define sc(x) scanf("%d",&x)
#define clr(t,val) memset( t , val , sizeof(t) )
#define ones(x) __builtin_popcount(x)
#define test puts("************test************");
#define sync ios_base::sync_with_stdio(false);

#define N 305
#define MOD 1000000007
#define INF (1<<30)
#define EPS (1e-5)

using namespace std;
struct Point
{
    int x , y;
    Point(){}
    Point( int x , int y ):x(x) , y(y) {}
    void read(){ scanf( "%d%d" , &x , &y );}
}O( 0 , 0 );
Point operator -( const Point &A , const Point &B ){ return Point( A.x - B.x , A.y - B.y );}
Point operator +( const Point &A , const Point &B ){ return Point( A.x + B.x , A.y + B.y );}
int dot( const Point &A ,const Point &B ){ return A.x*B.x + A.y*B.y;}
int cross( const Point &A , const Point &B ){ return A.x*B.y - A.y*B.x;}
int area(const Point &A, const Point &B, const Point &C) { return cross(B - A, C - A); }
Point P[ N ];
int A[ N ] , B[ N ];

int main()
{
    int n;
    while( scanf( "%d" , &n ) == 1 )
    {
        REP( i , n )P[i].read();
        int maxi = 0 , neg , pos ;
        REP( i , n )for( int j = i + 1 ; j < n ; ++j )
        {
            neg = pos = 0;
            REP( k , n )
                if( k != i && k != j && area( P[i] , P[j] , P[k] ) != 0 )
                {
                    if( area( P[i] , P[j] , P[k] ) < 0 )A[neg++] = -area( P[i] , P[j] , P[k] );
                    if( area( P[i] , P[j] , P[k] ) > 0 )B[pos++] = area( P[i] , P[j] , P[k] );
                }
            if( pos == 0 )
            {
                maxi = max( maxi , *max_element( A , A + neg ) - *min_element( A , A + neg ) );
            }
            else if( neg == 0 )
            {
                maxi = max( maxi , *max_element( B , B + pos ) - *min_element( B , B + pos ) );
            }
            else
            {
                maxi = max( maxi , *max_element( A , A + neg ) + *max_element( B , B + pos ) );
            }
        }
        printf( "%.10lf\n" , maxi/2.0 );
    }
}