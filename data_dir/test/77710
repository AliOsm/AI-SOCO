//marico el que lo lea
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <stdlib.h>
#include <assert.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int, int> ii;

void fastIO() {std::ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);}

#define pb push_back
#define all(obj) obj.begin(), obj.end()
#define ms(obj, val) memset(obj, val, sizeof(obj))
#define ms2(obj, val, sz) memset(obj, val, sizeof(obj[0])*sz)

#define fst first
#define snd second

template<typename T, typename U> inline void mnze(T &x, U y) {if(y < x) x = y;}
template<typename T, typename U> inline void mxze(T &x, U y) {if(x < y) x = y;}

void _scan( int &x ) { scanf("%d",&x); }
void _scan( long long &x ) { scanf("%lld",&x); }
void _scan( double &x ) { scanf("%lf",&x); }
void _scan( char &x ) { scanf(" %c",&x); }
void _scan( char *x ) { scanf("%s",x); }
void scan() {}
template<typename T, typename... U>
void scan( T& head, U&... tail ) { _scan(head); scan(tail...);}

template<typename T> void _dbg(const char* sdbg, T h)
	{ cerr<<sdbg<<"="<<h<<"\n"; }
template<typename T, typename... U> void _dbg(const char* sdbg, T h, U... t) {
	while(*sdbg != ',')cerr<<*sdbg++;
	cerr<<"="<<h<<","; _dbg(sdbg+1, t...);
}

#ifdef LOCAL
#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)
#define debugv(x) {{cerr<<#x<<" = "; for(auto _i:x) cerr<<_i<<", ";cerr<<"\n";}}
#define debuga(x, sz) {{cerr<<#x<<" = ";for(int _i=0;_i<sz;_i++)cerr<<x[_i]<<", ";cerr<<"\n";}}
#else
#define debug(...) (__VA_ARGS__)
#define debugv(x)
#define debuga(x, sz)
#define cerr if(0)cout
#endif

ll MOD = 1e9+7;

inline ll Msum(ll x){return x;}
template<typename... Rest>
inline ll Msum(ll x, Rest... rest){ return (x + Msum(rest...)) % MOD; }

inline ll Mprod(ll x){return x;}
template<typename... Rest>
inline ll Mprod(ll x, Rest... rest){ return x * Mprod(rest...) % MOD; }

inline ll Mnorm(ll x){ return (x%MOD + MOD) %MOD; }
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

struct BIT{
    int N, MAXLOG;
    vll a;
    void init(int n){
		ll pot = 1, k=0;
		while(pot < n) pot*=2, k++;
        a.resize(pot+2);
        N = pot; MAXLOG = k-1;
    }
    void upd(int p, ll val){
        for(++p; p <= N; p += p & -p)
            a[p] += val;
    }

    // sum[0,p]
    ll sum(int p){
        ll ret = 0;
        for(++p; p; p -= p & -p)
            ret += a[p];
        return ret;
    }

    // gets greatest p such that sum[0,p] <= K
	// Be sure there is such p!
    ll BIT_inv(ll K){
        int ret = 0;
        for(int j = MAXLOG ; j >= 0 ; j--){
            int shift = (1<<j);
            if(a[ret + shift] <= K){
                K -= a[ret + shift];
                ret += shift;
            }
        }
        return --ret;
    }
};

const int MAXN = 3e5+5;

int n, m;
int a[2*MAXN];

int lst[MAXN];
int mn[MAXN], mx[MAXN];

int main(){
	scan(n, m);
	for(int i=0; i<(int)m; i++) scan(a[i]), a[i]--;

	ms(lst, -1);
	for(int i=0; i<(int)n; i++) mn[i]=i+1, mx[i]=i+1;

	BIT bit;
	bit.init(n+m+1);
	for(int i=0; i<(int)n+m; i++){
		if(i<n){
			int x = n-i-1;
			if(lst[x] > -1) bit.upd(lst[x], -1);
			lst[x] = i;
			bit.upd(lst[x], 1);
			continue;
		}
		int x = a[i-n];
		int difs = bit.sum(i) - bit.sum(lst[x]);
		mn[x] = 1;
		mxze(mx[x], difs+1);
		if(lst[x] > -1) bit.upd(lst[x], -1);
		lst[x] = i;
		bit.upd(lst[x], 1);
	}
	for(int x=0; x<(int)n; x++){
		int difs = bit.sum(n+m-1) - bit.sum(lst[x]);;
		mxze(mx[x], difs+1);
		printf("%d %d\n", mn[x], mx[x]);
	}
}
