#include <bits/stdc++.h>
using namespace std;

vector<int> goodPrime;
vector<int> badPrime;
set<int> badPrimeSet;
bool mat[1000001] = { 0 };
void generate_primes(int n) {
	goodPrime.clear();
	if (badPrimeSet.count(2) == 0) goodPrime.push_back(2);
	for (int i = 3; i * i <= n; i += 2) {
		if (mat[i] == 0) {
			for (int j = i * i; j < n; j += 2 * i)
				mat[j] = 1;
		}
	}
	for (int i = 3; i <= n; i += 2)
	if (!mat[i] && badPrimeSet.count(i) == 0)
		goodPrime.push_back(i);
}

int a[100100];
int good[100100];
int bad[100100];
const int MX = 5010;
int memo[MX][MX];
bool vis[MX][MX];

int dp(int i, int lasti) {
	if (i == -1) return 0;

	int &ret = memo[i][lasti];
	if (vis[i][lasti]) return ret;
	vis[i][lasti] = 1;

	ret = dp(i - 1, lasti);
	int gain = ((bad[i] - bad[lasti]) - (good[i] - good[lasti])) * (i + 1);
	ret = max(ret * 1, gain + dp(i - 1, i));
	return ret;
}

int main() {
	//freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);
	ios::sync_with_stdio(0);
	cin.tie(0);

	int n, m; cin >> n >> m;
	for (int i = 0; i < n; i++) cin >> a[i];
	for (int i = 0; i < m; i++) {
		int x; cin >> x;
		badPrime.push_back(x);
		badPrimeSet.insert(x);
	}
	generate_primes(200100);
	int ans = 0;
	for (int i = 0; i < n; i++) {
		int num = a[i];
		for (int j = 0; j < m; j++) while (num % badPrime[j] == 0) num /= badPrime[j], ans--;
		for (int j = 0; j < goodPrime.size(); j++) while (num % goodPrime[j] == 0) num /= goodPrime[j], ans++;
		if (num > 1) ans++;
	}
	vector<int> gPrime;
	vector<int> bPrime;
	for (int i = 0; i < m; i++) while (a[0] % badPrime[i] == 0) a[0] /= badPrime[i], bPrime.push_back(badPrime[i]), bad[0]++;
	for (int i = 0; i < goodPrime.size(); i++) while (a[0] % goodPrime[i] == 0) a[0] /= goodPrime[i], gPrime.push_back(goodPrime[i]), good[0]++;
	if (a[0] > 1) gPrime.push_back(a[0]), good[0]++;

	for (int i = 1; i < n; i++) {
		vector<int> g;
		vector<int> b;
		for (int j = 0; j < gPrime.size(); j++) {
			if (a[i] % gPrime[j] == 0) a[i] /= gPrime[j], g.push_back(gPrime[j]), good[i]++;
		}
		for (int j = 0; j < bPrime.size(); j++) {
			if (a[i] % bPrime[j] == 0) a[i] /= bPrime[j], b.push_back(bPrime[j]), bad[i]++;
		}
		gPrime = g, bPrime = b;
	}
	ans += dp(n - 1, MX);
	cout << ans << endl;

	return 0;
}