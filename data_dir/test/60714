using namespace std;
#include <bits/stdc++.h>
#define ll long long
#define pll pair <ll,ll>
#define pii pair <int,int>
#define fir first
#define sec second
#define mp make_pair
#define pb push_back
#define MASK(i) ((1LL)<<(i))
#define BIT(x,i) (((x)>>(i))&1)
#define all(c) (c).begin(),(c).end()
#define sz(c) (c).size()
#define fn "test"    ///FILE_NAME_HERE
#define rep(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rrep(c,it) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)

template <class T,class U>
void maximize(T &x,U y)
{
    if(x < y)x=y;
}
template <class T,class U>
void minimize(T &x,U y)
{
    if(x > y)x=y;
}
template <class T>
T Abs(T x)
{
    return (x < (T)0 ? -x : x);
}
template <class T,class U,class V>
T addmod(T x,U y,V mod)
{
    return ((x + y)%mod + mod)%mod;
}
template <class T,class U,class V>
T submod(T x,U y,V mod)
{
    return ((x - y)%mod + mod)%mod;
}
template <class T,class U,class V>
T mulmod(T x,U y,V mod)
{
    return (ll)x*y%mod;
}
///---------------------------------------------------------END_TEMPLATE-------------------------------------------------------///

namespace task{

void solve()
{
    int q;
    cin>>q;
    while(q--)
    {
        int n;
        cin>>n;
        if(!(n & 1))
        {
            if(n==2)
                cout<<-1<<'\n';
            else
            {
                int k=n/2;
                if(k & 1)--k;
                cout<<k/2<<'\n';
            }
        }
        else
        {
            if(n < 9)
                cout<<-1<<'\n';
            else
            {
                int k=(n - 1)/2;
                int c;
                if(k & 1)c=(k - 1)/2 - 1;
                else c=k/2;
                if(c < 2)cout<<-1<<'\n';
                else cout<<(k & 1) + c - 1<<'\n';
            }
        }
    }
}}

int main(void)
{
    cin.sync_with_stdio(false);
#ifndef ONLINE_JUDGE
    freopen(fn".inp","r",stdin);
    freopen(fn".out","w",stdout);
#endif // ONLINE_JUDGE
    task::solve();
}
