#define  _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<map>
#include<cmath>
#include<vector>
#include<algorithm>
#include<iomanip>
#include<cmath>
#include<stack>
#include<math.h>
#include<set>
#include<string>
#include<cstring>
#include<queue>
#include<complex>	
#include<math.h>
#include<sstream>	
#include<cstdio>
using namespace std;

const double EPS = 1e-7;
const double PI = acos(-1.0);
const double ZERO = 0;
const double DOUBLE_MAX = 1/ZERO;
typedef complex<double> point;
#define X real()
#define Y imag()
#define rad(p) (atan2((p.Y),(p.X)))
#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define length(a) hypot((a).X,(a).Y)
#define normalize(p) ((p)/length(p))
#define rotate(p,origin,ang) (((p)-(origin))*exp(point(0,(ang)))+(origin))
#define collinear(a,b,c) ( fabs( cross((a)-(b),(c)-(b))) < EPS)
#define bisector(a,b) (((a)+(b))/2.0) // return the mid point
#define polar(r,theta) (point((r),0)*exp(point(0,(theta))))
#define LSOne(S) (S & (-S))

#define rep(i,n) for(int i=0;i<n;i++)
#define repi(i,a,n) for(int i=a;i<n;i++)
#define inf (0x7fffffff)
#define mp make_pair
#define read freopen("in.in","r",stdin)
#define write freopen("out.out","w",stdout)
#define scf(xx) scanf("%d",&xx)
typedef  long long ll;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef   double ld;


vector<vi> fact(62);
int n;
vi a(101);
vi prim;
int dp[101][1<<19];
int pr[65]={0};
vi sol(101);
int solve(int id,int mask){
	if(id==n){ return 0;}
	if ( dp[id][mask]!=-1)return dp[id][mask];
	int res=a[id]-1 + solve(id+1,mask);
	sol[id]=1;
	repi(i,2,58){
		int msk=mask; bool ok=1;
		rep(j,fact[i].size()){ 
			if( 1<<pr[fact[i][j]] &mask) { ok=0; break;}
			msk|=(1<<pr[fact[i][j]]);
		}
		if(!ok)continue;
		if(res > abs(a[id]-i) + solve(id+1, msk)) { res= abs(a[id]-i) + solve(id+1, msk); }
	}
	return dp[id][mask]=res;
}
void print(int id,int mask){
	if(id==n)return ;
	int res=inf,x,ms;
	repi(i,1,58){
		int msk=mask;bool ok=1;
		rep(j,fact[i].size()){ 
			if( 1<<pr[fact[i][j]] &mask) { ok=0; break;}
			msk|=(1<<pr[fact[i][j]]);
		}
		if(!ok)continue;
		if(id==n-1){ 
			if(abs(a[id]-i) < res) { res=abs(a[id]-i); x=i; ms=msk; }
		}
		else if(dp[id+1][msk]!=-1 && dp[id+1][msk]+abs(a[id]-i) < res) { res=abs(a[id]-i)+dp[id+1][msk]; x=i; ms=msk; }
	}
	cout<<x<<" ";
	print(id+1,ms);
}
int main(){
	//read;
	memset(dp,-1,sizeof dp);
	repi(i,1,62){
		int k=i,p=2;
		while(k!=1){
			while(k%p)p++;
			fact[i].push_back(p);
			while(k%p==0)k/=p;
		}
	}
	int p[]={2,3,5,7,11,13,17,19,23,29,31,37,39,41,43,47,51,53,57,59,61};
	prim=vi(p,p+21);
	rep(i,prim.size())pr [prim[i]]=i;
	cin>>n;
	rep(i,n)cin>>a[i];
	solve(0,0);
	print(0,0);
	return 0;
}