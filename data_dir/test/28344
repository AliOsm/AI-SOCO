#include <bits/stdc++.h>
#define ll long long
using namespace std;

const int Mod = 1e9 + 7;
const int N = 1e5 + 100;

int Power[N];
int idx[100];
int M[100], Cnt[100];
int Dp[1 << 19 | 7][72];

bool isPrime(int x)
{
    if (x == 2) return true;
    for (int i = 2; i * i <= x; i++)
        if (x%i == 0) return false;
    return true;
}

int GetMask(int x)
{
    int Mask = 0;
    for (int i = 2; i * i <= x; i++)
        while(x%i == 0){
            Mask ^= idx[i];
            x /= i;
        }
    if (x > 1) Mask ^= idx[x];
    return Mask;
}

int Solve(int Mask, int Num)
{
    if (Num > 70)
        return (Mask == 0);

    int &ret = Dp[Mask][Num];
    if (ret + 1) return ret;

    ll C1 = 0, C2 = 0;
    if (Cnt[Num]){
        C1 = ((ll) Solve((Mask ^ M[Num]), Num + 1) % Mod * Power[Cnt[Num] - 1] % Mod ) %Mod;
        C2 = ((ll) Solve(Mask, Num + 1) % Mod * Power[Cnt[Num] - 1] % Mod ) % Mod;
    }else C1 = Solve(Mask, Num + 1);

    return ret = (C1%Mod + C2%Mod) % Mod;
}

int main()
{
    memset(Dp, -1, sizeof Dp);

    Power[0] = 1;
    for (int i = 1; i < N; i++)
        Power[i] = (2 * Power[i - 1]) % Mod;

    int j = 0;
    for (int i = 2; i <= 70; i++)
        if (isPrime(i)){
            idx[i] = (1 << j);
            j++;
        }

    for (int i = 2; i <= 70; i++)
        M[i] = GetMask(i);

    int n;  scanf("%d", &n);
    for (int i = 0; i < n; i++){
        int a;  scanf("%d", &a);
        Cnt[a]++;
    }

    printf("%d\n", Solve(0, 1) - 1);
    return 0;
}
