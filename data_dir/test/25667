#include <iostream>
#include <cstdio>
#include <map>
#include <cstring>
#include <string>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <queue>
#include <set>
#include <unordered_map>

using namespace std;

#define prev prevv

int n;
long long m;
int x[300000];
int y[300000];
int z[300000];
int Next[300000];
int Pr[300000];
int u[300000];
int sz[300000];
int Mx[300000];
int temp, ver, tot;
long long ans;
int M;

void dfs2pre(int v, int p) {
    sz[v] = 1;
    tot++;
    for (int i = Pr[v]; i; i = Next[i]) {
        if (u[i] == 0 && y[i] != p) {
            dfs2pre(y[i], v);
        }
    }
}

void dfs2(int v, int p) {
    //cout << "! " << v << endl;
    sz[v] = 1;
    Mx[v] = 0;
    for (int i = Pr[v]; i; i = Next[i]) {
        if (u[i] == 0 && y[i] != p) {
            dfs2(y[i], v);
            sz[v] += sz[y[i]];
            Mx[v] = max(Mx[v], sz[y[i]]);
        }
    }
    Mx[v] = max(Mx[v], tot - sz[v]);
    if (Mx[v] < temp) {
        temp = Mx[v];
        ver = v;
    }
}

unordered_map<int, int> Q;

void dfs3(int v, int P, long long r, long long p, int op, int calc) {    
    if (calc && r == 0) {
        ans++;
    }
    if (op == 1) {
        Q[r]++;
    }
    if (op == -1) {
        Q[r]--;
    }
    for (int i = Pr[v]; i; i = Next[i]) {
        if (u[i] == 0 && y[i] != P) {
            dfs3(y[i], v, (r + z[i] * p) % m, (p * 10) % m, op, calc);
        }
    }
}

long long Pow(long long a, long long b) {
    long long s = 1;
    while (b) {
        if (b % 2) {
            s = (s * a) % m;
        }
        a = (a * a) % m;
        b /= 2;
    }
    return s;
}

void dfs4(int v, int P, long long r, long long p) {    
    if (r == 0) {
        ans += Q[0];
    } else {        
        ans += Q[(m - r) * Pow(p * 10 % m, M - 1) % m];
    }
    for (int i = Pr[v]; i; i = Next[i]) {
        if (u[i] == 0 && y[i] != P) {
            dfs4(y[i], v, (r * 10 + z[i]) % m, (p * 10) % m);
        }
    }
}

int phi (int n) {
	int result = n;
	for (int i=2; i*i<=n; ++i)
		if (n % i == 0) {
			while (n % i == 0)
				n /= i;
			result -= result / i;
		}
	if (n > 1)
		result -= result / n;
	return result;
}

void dfs(int v) {
    tot = 0;
    temp = 100000000;
    ver = 0;
    dfs2pre(v, 0);
    dfs2(v, 0);
    Q.clear();    
    Q[0]++; 
    //cout << tot << endl;
    //cout << v << "    " << ver << " " << temp << endl;       
    for (int i = Pr[ver]; i; i = Next[i]) {
        if (u[i] == 0) { 
            dfs3(y[i], ver, z[i] % m, 10 % m, 1, 1);
        }
    }
    //cout << ans << endl;
    for (int i = Pr[ver]; i; i = Next[i]) {
        if (u[i] == 0) {             
            dfs3(y[i], ver, z[i] % m, 10 % m, -1, 0);
            dfs4(y[i], ver, z[i] % m, 1);
            dfs3(y[i], ver, z[i] % m, 10 % m, 1, 0);            
        }
    }    
    //cout << ver << " " << ans << endl;

    for (int i = Pr[ver]; i; i = Next[i]) {
        if (u[i] == 0) {
            u[i] = 1;
            if (i <= n - 1) {
                u[i + n - 1] = 1;                
            } else {
                u[i - (n - 1)] = 1;
            }
            dfs(y[i]);
        }
    }
}

int main() {
	ios_base::sync_with_stdio(0);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);    
	cin >> n >> m;
    M = phi(m);
    for (int i = 1; i <= n - 1;  i++) {
        cin >> x[i] >> y[i] >> z[i];
        x[i + n - 1] = y[i];
        y[i + n - 1] = x[i];
        z[i + n - 1] = z[i];
    }
    for (int i = 1; i <= n + n - 2; i++) {
        Next[i] = Pr[x[i]];
        Pr[x[i]] = i;
    }
    ans = 0;
    dfs(0);
    cout << ans << endl;    
	return 0;
}