#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;

#define FOR(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define SZ(c) ((int)(c).size())

int g[60], deg[60];
int FIND(int x) {
	return g[x]==x?x:(g[x]=FIND(g[x]));
}
void UNION(int x, int y) {
	g[FIND(x)]=FIND(y);
}
int main(void) {
	int n, m;
	scanf("%d%d", &n, &m);
	for(int i=1;i<=n;i++) g[i] = i;
	for(int i=0;i<m;i++) {
		int x, y;
		scanf("%d%d", &x, &y);
		UNION(x, y);
	}	
	for(int i=1;i<=n;i++) deg[FIND(i)]++;
	for(int i=1;i<=n;i++) if(deg[FIND(i)]>3) { puts("-1"); return 0; }
	int d[4]={};
	for(int i=1;i<=n;i++) d[deg[i]]++;
	if(d[2]>d[1]) { puts("-1"); return 0; }
	int a[60][3], na[60]={};
	for(int i=1;i<=n;i++) a[FIND(i)][na[FIND(i)]++] = i;
	vector<int> one;
	for(int i=1;i<=n;i++) if(deg[i]==3) {
		printf("%d %d %d\n", a[i][0], a[i][1], a[i][2]);
	}
	for(int i=1;i<=n;i++) if(deg[i]==1) one.push_back(i);
	for(int i=1;i<=n;i++) if(deg[i]==2) {
		printf("%d %d %d\n", a[i][0], a[i][1], one.back());
		one.pop_back();
	}
	while(!one.empty()) {
		int x = one.back(); one.pop_back();
		int y = one.back(); one.pop_back();
		int z = one.back(); one.pop_back();
		printf("%d %d %d\n", x, y, z);
	}
	return 0;
}
