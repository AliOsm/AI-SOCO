#include <bits/stdc++.h>

using namespace std;

set<int> adj[100005];
int sz[100005],lev[100005];
int dp[100005][20];
int par[100005],dis[100005];
int n,m;
int nn;

void dfs1(int x,int pa)
{
	dp[x][0]=pa;
	for(int i=1;i<20;i++)
		dp[x][i]=dp[dp[x][i-1]][i-1];
	if(pa!=-1) lev[x]=lev[pa]+1;
	else lev[x]=0;
	for(auto it=adj[x].begin();it!=adj[x].end();it++)
	{
		if(*it == pa) continue;
		dfs1(*it,x);
	}
}
void dfs2(int x,int pa)
{
	sz[x]=1; nn++;
	for(auto it=adj[x].begin();it!=adj[x].end();it++)
	{
		if(*it == pa) continue;
		dfs2(*it,x);
		sz[x]+=sz[*it];
	}
}

int getcentroid(int x,int pa)
{
	for(auto it=adj[x].begin();it!=adj[x].end();it++)
	{
		if(*it == pa) continue;
		if(sz[*it]>nn/2) return getcentroid(*it,x);
	}
	return x;
}

void decompose(int root,int p)
{
	nn=0;
	dfs2(root,-1);
	int centroid=getcentroid(root,-1);
	if(p==-1) p=centroid;
	par[centroid]=p;
	for(auto it=adj[centroid].begin();it!=adj[centroid].end();it++)
	{
		adj[*it].erase(centroid);
		decompose(*it,centroid);
	}
}

int lca(int x,int y)
{
	if(lev[x]<lev[y]) swap(x,y);
	for(int i=19;i>=0;i--)
	{
		if(lev[x]-(1<<i)>=lev[y])
		{
			x=dp[x][i];
		}
	}
	if(x==y) return x;
	for(int i=19;i>=0;i--)
	{
		if(dp[x][i]!=dp[y][i])
		{
			x=dp[x][i]; y=dp[y][i];
		}
	}
	return dp[x][0];
}

int dist(int x,int y)
{
	return lev[x]+lev[y]-2*lev[lca(x,y)];
}

void update(int x)
{
	int z=x;
	//cout << "UPDATE: " << z << endl;
	while(1)
	{
		//cout << z << endl;
		dis[z]=min(dist(x,z),dis[z]);
		if(z==par[z]) return;
		z=par[z];
	}
}

int query(int x)
{
	int z=x;
	int ans=(1<<30);
	//cout << "QUERY: "<< x << endl;
	while(1)
	{
		//cout << z << endl;
		ans=min(ans,dist(x,z)+dis[z]);
		if(z==par[z]) break;
		z=par[z];
	}
	return ans;
}

int main()
{
	scanf("%d %d",&n,&m);
	for(int i=1;i<=n;i++)
		dis[i]=1<<30;
	for(int i=0;i<n-1;i++)
	{
		int x,y;
		scanf("%d %d",&x,&y);
		adj[x].insert(y);
		adj[y].insert(x);
	}
	dfs1(1,-1);
	decompose(1,-1);
	update(1);
	while(m--)
	{
		int a,b;
		scanf("%d %d",&a,&b);
		if(a==1) update(b);
		else printf("%d\n",query(b));
	}

}