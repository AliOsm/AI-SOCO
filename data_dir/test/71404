//============================================================================
// Name        : hoba.cpp :)
// Author      : (O_O Diab) (Why_not) (el 3AQ)
// Copyright   : please, Don't touch me :(
// Description : problem in C++
// MAIN IDEA   :
//============================================================================
#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define rw freopen("input.txt","r",stdin),freopen("output.txt","w",stdout);
#define pb push_back
#define F first
#define S second
#define pf push_front
#define lp(i,a,b) for (int i=a;i<=(int)b;++i)
#define lp2(i,a,b) for (ll i=a;i>=b;--i)
#define f(x) return cout<<x<<"\n",0
#define pii pair<int,int>
#define pll pair<ll,ll>
#define all(c) c.begin(),c.end()
#define allr(c) c.rbegin(),c.rend()
#define p(x) cout<<#x<<" = { "<<x<<" } \n"
#define vi vector<int>
#define vs vector<string>
#define vl vector<ll>
#define vii vector<pii>
#define vll vector<pll>
#define re return
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
#define EPS 1e-6
// to convert string to number use int a = stoi(string);
// to convert number to string use string s = to_string(int);
#define FAST ios::sync_with_stdio(0),ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0)
#define clr(c,x) memset(c,x,sizeof(c));
using namespace std;
const ll INFL = 0x3f3f3f3f3f3f3f3fLL;
const int dx[] = { 0, 1, 0, -1, 1, -1, 1, -1 };
const int dy[] = { 1, 0, -1, 0, 1, -1, -1, 1 };
const int N = 3e3 + 5, mod = (int) 1e9 + 7, INF = 0x3f3f3f3f, ALPHA = 26;
vi g[N];
queue<int> q;
bool vis[N] = { };
int d[N][N] = { };
void bfs(int node) {
	clr(vis, 0);
	q.push(node);
	vis[node] = true;
	while (!q.empty()) {
		int a = q.front();
		q.pop();
		for (auto u : g[a]) {
			if (vis[u])
				continue;
			d[node][u] = d[node][a] + 1;
			vis[u] = true;
			q.push(u);
		}
	}
}
int main() {
	int n, e;
	cin >> n >> e;
	lp(i,1,e)
	{
		int u, v;
		cin >> u >> v;
		g[u].pb(v);
		g[v].pb(u);
	}
	lp(i,1,n)
		bfs(i);
	int s1, t1, c1, s2, t2, c2;
	cin >> s1 >> t1 >> c1 >> s2 >> t2 >> c2;
	if ((!d[s1][t1] && s1 != t1) || d[s1][t1] > c1 || (!d[s2][t2] && s2 != t2)
			|| d[s2][t2] > c2)
		f(-1);
	int ans = e - (d[s1][t1] + d[s2][t2]);
	lp(i,1,n)
	{
		lp(j,i,n)
		{
			if (d[s1][i] + d[i][j] + d[t1][j] <= c1
					&& d[s2][i] + d[t2][j] + d[i][j] <= c2)
				ans = max(ans,
						e
								- (d[s1][i] + d[i][j] + d[t1][j] + d[s2][i]
										+ d[t2][j]));
			if (d[t1][i] + d[i][j] + d[s1][j] <= c1
					&& d[s2][i] + d[t2][j] + d[i][j] <= c2)
				ans = max(ans,
						e
								- (d[t1][i] + d[i][j] + d[s1][j] + d[s2][i]
										+ d[t2][j]));
			if (d[s1][j] + d[i][j] + d[t1][i] <= c1
					&& d[s2][j] + d[t2][i] + d[i][j] <= c2)
				ans = max(ans,
						e
								- (d[t1][i] + d[i][j] + d[s1][j] + d[t2][i]
										+ d[s2][j]));
			if (d[s1][i] + d[i][j] + d[t1][j] <= c1
					&& d[s2][j] + d[t2][i] + d[i][j] <= c2)
				ans = max(ans,
						e
								- (d[s1][i] + d[i][j] + d[t1][j] + d[t2][i]
										+ d[s2][j]));
		}
	}
	f(ans);
	return 0;
}