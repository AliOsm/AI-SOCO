#include <bits/stdc++.h>
#define ll  long long
using namespace std;
ll dp[19][1 << 8][7][8][9][2];
char dp3[10][11][11], dp4[1 << 8][7][8][9][10];
string target;
char check(int mask, int r7, int r8, int r9, int last) {
	char &ret = dp4[mask][r7][r8][r9][last];
	if (ret != -1) return ret;
	int r2 = last & 1;
	int r3 = dp3[3][r9][10];
	int ar[10] = { r2, r3, dp3[4][r8][10], dp3[5][last][10], r2 | r3, r7, r8, r9 };
	for (int i = 2; i <= 9; i++)
		if ((mask & (1 << (i - 2))) && ar[i - 2]) return ret = 0;
	return ret = 1;
}
ll solve() {
	for (int ind = 18; ind >= 0; ind--)
		for (int mask = (1 << 8) - 1; mask >= 0; mask--)
			for (int r7 = 0; r7 < 7; r7++) {
				int E = 1;
				if (18 - ind < 3) E = 8;
				for (int r8 = 0; r8 < E; r8++)
					for (int r9 = 0; r9 < 9; r9++) {
						ll &ret = dp[ind][mask][r7][r8][r9][0];
						ll &ret2 = dp[ind][mask][r7][r8][r9][1];
						ret = 0;
						ret2 = 0;
						for (int i = 0, nmask; i <= 9; i++) {
							nmask = mask;
							if (i > 1) nmask |= (1 << (i - 2));
							if (ind < 18) {
								if (ind <= 15) {
									if (i <= (target[ind] - '0')) ret +=
											dp[ind + 1][nmask][dp3[7][r7][i]][0][dp3[9][r9][i]][(i < (target[ind] - '0'))];
									ret2 += dp[ind + 1][nmask][dp3[7][r7][i]][0][dp3[9][r9][i]][1];
								} else {
									if (i <= (target[ind] - '0')) ret +=
											dp[ind + 1][nmask][dp3[7][r7][i]][dp3[8][r8][i]][dp3[9][r9][i]][(i
													< (target[ind] - '0'))];
									ret2 += dp[ind + 1][nmask][dp3[7][r7][i]][dp3[8][r8][i]][dp3[9][r9][i]][1];
								}
							} else {
								ret2 += check(nmask, dp3[7][r7][i], dp3[8][r8][i], dp3[9][r9][i], i);
								if (i <= (target[ind] - '0')) ret += check(nmask, dp3[7][r7][i], dp3[8][r8][i],
										dp3[9][r9][i], i);
							}
						}
					}
			}
	return dp[0][0][0][0][0][0];
}
ll get(ll n) {
	if (!n) return 1;
	string x = "";
	while (n) {
		x += char((n % 10) + '0');
		n /= 10;
	}
	reverse(x.begin(), x.end());
	while (x.size() < 19)
		x = "0" + x;
	target = x;
	return solve();
}
int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	memset(dp4, -1, sizeof dp4);
	for (int i = 1; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			for (int k = 0; k < 10; k++) {
				dp3[i][j][k] = (j * 10 + k) % i;
			}
			dp3[i][j][10] = j % i;
		}
	}
	int t;
	cin >> t;
	while (t--) {
		ll a, b;
		cin >> a >> b;
		cout << get(b) - get(a - 1) << '\n';
	}
	return 0;
}
