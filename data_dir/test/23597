#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef pair<int, int> pi;
const int inf = 0x3f3f3f3f;

inline void chmax(int& x, int y) {if (x < y) x = y;}
inline void chmin(int& x, int y) {if (x > y) x = y;}
inline int LSB(int i) {return (i & -i);}

int n, m, a[305], b[305], adj[305][305], par[305], asum, bsum;
bool vis[305];

bool bfs(int s, int e){
    queue <int> q;
    q.push(s);

    memset(vis, false, sizeof(vis));
    while (!q.empty()){
        int v = q.front();
        q.pop();

        if (vis[v]) continue;
        vis[v] = true;

        for (int i = 0; i <= 2*n + 1; i++){
            if (adj[v][i] > 0 && !vis[i]){
                q.push(i);
                par[i] = v;
            }
        }
    }

    return vis[e];
}

int ff(int s, int e){
    int ret = 0;
    while (bfs(s, e)){
        int flow = inf;
        for (int i = e; i != s; i = par[i]) chmin(flow, adj[par[i]][i]);
        for (int i = e; i != s; i = par[i]) {
            adj[par[i]][i] -= flow;
            adj[i][par[i]] += flow;
        }

        ret += flow;
    }

    return ret;
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);

    cin >> n >> m;
    for (int i = 1; i <= n; i++) cin >> a[i], asum += a[i];
    for (int i = 1; i <= n; i++) cin >> b[i], bsum += b[i];
    for (int i = 0, x, y; i < m; i++){
        cin >> x >> y;
        adj[x][y + n] = adj[y][x + n] = inf;
    }

    if (asum != bsum){
        printf("NO\n");
        return 0;
    }

    for (int i = 1; i <= n; i++) {
        adj[0][i] = a[i], adj[i + n][2*n + 1] = b[i];
        adj[i][i + n] = a[i];
    }

    if (ff(0, 2*n + 1) != asum){
        printf("NO\n");
        return 0;
    }

    printf("YES\n");
    for (int i = 1; i <= n; i++){
        for (int j = n + 1; j <= 2*n; j++){
            printf("%d ", adj[j][i]);
        }
        printf("\n");
    }

    //printf("%d", inf);
	return 0;
}
