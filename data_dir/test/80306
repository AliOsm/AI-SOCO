#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
#include <set>
using namespace std;

vector < vector<int> > g, gr;
vector<char> used;
vector<int> order, component;

void dfs1(int v) 
{
	used[v] = true;
	for (size_t i = 0; i < g[v].size(); ++i)
	{
		if (!used[g[v][i]])
			dfs1(g[v][i]);
	}
	order.push_back(v);
}

void dfs2(int v) 
{
	used[v] = true;
	component.push_back(v);
	for (size_t i = 0; i < gr[v].size(); ++i)
	{
		if (!used[gr[v][i]])
			dfs2(gr[v][i]);
	}
}

int main(void)
{
	int n;
	cin >> n;
	vector<int> v(n);
	for (int i = 0; i < n; ++i)
	{
		cin >> v[i];
	}
	g.resize(n);
	gr.resize(n);
	int m;
	cin >> m;
	for (int i = 0; i < m; ++i)
	{
		int a, b;
		cin >> a >> b; 
		--a, --b;
		g[a].push_back(b);
		gr[b].push_back(a);
	}

	used.assign(n, false);
	for (int i = 0; i<n; ++i)
	if (!used[i])
		dfs1(i);
	used.assign(n, false);
	int cnt = 0;
	vector<int> c(n);
	long long ans = 0;
	long long sp = 1;
	for (int i = 0; i<n; ++i) 
	{
		int vv = order[n - 1 - i];
		if (!used[vv]) 
		{
			dfs2(vv);
			++cnt;
			int mx = 1e9;
			int hh = 0;
			for (int u = 0; u < component.size(); ++u)
			{
				int qw = component[u];
				mx = min(mx, v[qw]);
				c[qw] = cnt;
			}
			for (int u = 0; u < component.size(); ++u)
			{
				int qw = component[u];
				if (v[qw] == mx)
					++hh;
			}
			ans += mx;
			sp *= hh;
			sp %= 1000000007;
			component.clear();
		}
	}
	cout << ans << " " << sp;
}