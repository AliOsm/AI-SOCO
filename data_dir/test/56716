/*
    NO 
        TIME 
            TO 
                DIE
                    --007
                            */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli mod=1e9+7ll;
lli INF=1e17;
lli eps=1e-8;
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,y,k,m,x;
const double pi=3.14159265358979323846;
//matrix exponentiation is associative and distributive
lli me(lli a,lli b)
{
    lli res=1;
    while(b)
    {
        if(b&1)
        res=(res%mod*a%mod)%mod;
        a=a*a;
        a%=mod;
        b=b>>1;
    }
    return res;
}
lli mI(lli a)
{
    return (me(a,mod-2)%mod+mod)%mod;
}
bool cmp(ll a,ll b)
{
    if(a.second==b.second)
    return a.first<b.first;
    return a.second<b.second;
}
struct pt
{
    long double x,y;
    pt() {}
    pt(long double _x, long double _y) : x(_x), y(_y) {}
    pt operator-(const pt& p) const { return pt(x - p.x, y - p.y); }
    long double dot(const pt& p) const { return x * p.x + y * p.y ; }
    long double cross(const pt& p) const { return x * p.y - p.x * y; }
};
 
bool operator < (pt p, pt q)
{
 if(p.x!=q.x)
 return p.x<q.x;
 return p.y<q.y;
}
 
struct seg
{
    pt p,q;
};
 
double get_distance(pt p,pt q)
{
    return sqrt(pow(p.x-q.x,2.0) + pow(p.y-q.y,2.0) );
}
 
double get_area(pt p1,pt p2,pt p3)
{
    return (p2.x - p1.x) * (p3.y - p2.y) - (p3.x - p2.x) * (p2.y - p1.y);
}
 
double get_area(long double r)
{
    return pi*(r*r);
}
 
bool equall_to(pt p , pt q)
{
    if(p.x==q.x&&p.y==q.y)
    return true;
    return false;
}
struct edge
{
    lli x,y,z;
};
 
bool operator <(edge e,edge f)
{
    return e.x<f.x;
}
lli sparse[100005][25][10];
lli dp[100005][6];
void precompute()
{
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        sparse[i][0][j]=dp[i][j];
    }
    
    lli end=20;
    for(int i=1;i<=end;i++)
    {
        lli span=(1<<i);
        for(int j=1;j+span<=n+1;j++)
        {
            for(int k=1;k<=m;k++)
            sparse[j][i][k]=max(sparse[j][i-1][k],sparse[j+(1<<(i-1))][i-1][k]);
        }
    }
    
}
bool check(lli start,lli len)
{
    lli end=start + len;
    if(end>n)
    return false;
    lli temp=k;
    lli first=log2(len+1);
    // lli second=end-(first)+1;
    for(int j=1;j<=m;j++)
    {
        temp-=max(sparse[start][first][j],sparse[end - (1<<first) +1][first][j]);
        // uu[j]=max(sparse[start][first][j],sparse[second][first][j]);
    }
    // if(temp>=0)
    // cout<<len<<" "<<start<<"\n";
    if(temp<0)
    return false;
    return true;
}
lli uu[10];
void res(lli start,lli len)
{
    lli end=start+len;
    len++;
    lli first=log2(len);
    for(int j=1;j<=m;j++)
    {
        uu[j]=max(sparse[start][first][j],sparse[end - (1<<first) +1][first][j]);
        // uu[j]=max(sparse[start][first][j],sparse[second][first][j]);
    }
    // cout<<sparse[start][first][1]<<" "<<first<<"\n";
}

int main()
{
 mem2(dp,1e15);
 cin>>n>>m>>k;
 for(int i=1;i<=n;i++)
 {
     lli a[m+1];
     for(int j=1;j<=m;j++)
     {
         cin>>a[j];
         dp[i][j]=a[j];
     }
 }
 lli mm=0;
lli anss[m+1];
mem1(anss,0);
 if(n==1)
 {
     for(int i=1;i<=m;i++)
     k-=dp[1][i];
     if(k>=0)
     {
         for(int j=1;j<=m;j++)
         cout<<dp[1][j]<<" ";
     }
     else
     {
         for(int j=1;j<=m;j++)
         cout<<0<<" ";
     }
     return 0;
 }
 precompute();
//  cout<<sparse[1][2][1]<<"\n";
for(int i=1;i<=n;i++)
{
    lli l=0;
    lli r=n;
    lli ans=1e15;
    while(l<r)
    {
        lli m=(l+r)/2;
        if(check(i,m))
        {
            l=m+1,ans=m;
        }
        else
        r=m;
    }
    if(ans!=1e15)
    {
        if(mm<ans)
        {
            // cout<<ans<<" "<<i<<"\n";
            mm=ans;
            res(i,ans);
            for(int j=1;j<=m;j++)
            {
                anss[j]=uu[j];
            }
        }
    }
}
// cout<<sparse[1][0][2]<<"\n";
for(int j=1;j<=m;j++)
cout<<anss[j]<<" ";

}