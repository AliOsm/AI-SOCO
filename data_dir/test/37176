/*input
2 2 2
1 1
2 2

3 3 3
2 2 2
1 1 3
*/
#ifdef UncleGrandpa
#include <prettyprint.hpp>
#endif
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define bit(x,y) ((x>>y)&1)
#define loop(i,l,r) for(int i=(l); i<=(r); i++)
#define rloop(i,l,r) for(int i=(l); i>=(r); i--)
#define debug(x...) {cout << "[" << #x << "] ="; _print(x);}
void _print() {cout << endl;}
template<typename T, typename... Ts> void _print(const T& value, const Ts&... values) {cout << ' ' << value; _print(values...);}
template<typename T, typename... Ts> void print(const T& value, const Ts&... values) {cout << value; _print(values...);}
// change cout to cerr for debug in crash
// priority to use auto
// const int N =;

map<int, int> mark;
signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	int n, m, k;
	cin >> n >> m >> k;
	loop(i, 1, n) {
		int t; cin >> t; mark[t]++;
	}
	loop(i, 1, m) {
		int t; cin >> t; mark[t]--;
	}
	vector<pair<int, int> > vec(mark.begin(), mark.end());
	while (!vec.empty()) {
		if (vec.back().se == 0) {
			vec.pop_back();
			continue;
		}
		if (vec.back().se > 0) {
			cout << "YES" << endl;
			exit(0);
		}
		auto rec = vec.back();
		vec.pop_back();
		if (!vec.empty()) {
			vec.back().se += rec.se;
		}
	}
	cout << "NO" << endl;
}