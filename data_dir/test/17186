#include <map>
#include <vector>
#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

typedef long long ll;

struct fenwick
{
	int n;
	int *a;
	fenwick(int N){
		n=N;
		a=new int[n];
		REP(i,n)
			a[i]=0;
	}
	~fenwick()
	{
		delete[] a;
	}
	void inc(int i, int v)
	{
		for(;i<n;i|=i+1)
			a[i]+=v;
	}
	int sum(int i)
	{
		int res=0;
		for(;i>=0;i=(i&(i+1))-1)
			res+=a[i];
		return res;
	}
	int getsum(int l, int r)
	{
		return sum(r)-sum(l-1);
	}
};

vector<int> v;
vector<int> f1,f2;
int n;

template<typename T1,typename T2>
void build_function(T1 start, T1 end, T2 res)
{
	vector<int> prv(n);
	for(;start!=end;start++, res++)
	{
		*res=prv[*start]+1;
		prv[*start]=*res;
	}
}

int main()
{
	scanf("%d",&n);
	v.resize(n);
	f1.resize(n);
	f2.resize(n);
	vector<int> shrink;
	REP(i,n)
		scanf("%d",&v[i]);
	shrink=v;
	sort(shrink.begin(),shrink.end());
	shrink.erase(unique(shrink.begin(),shrink.end()),shrink.end());
	REP(i,n)
		v[i]=lower_bound(shrink.begin(),shrink.end(),v[i])-shrink.begin();
	build_function(v.begin(),v.end(),f1.begin());
	build_function(v.rbegin(),v.rend(),f2.rbegin());
	fenwick tree(n+1);
	REP(i,n)
		tree.inc(f2[i],1);
	ll res=0;
	REP(i,n)
	{
		tree.inc(f2[i],-1);
		res+=tree.getsum(0,f1[i]-1);
	}
	cout<<res<<endl;
	return 0;
}
