#include <bits/stdc++.h>
using namespace std;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pb push_back
#define pf push_front
#define F first
#define re return
#define S second
#define ll long long
#define f(i) return cout<<i<<"\n",0;
#define vi vector<int>
#define vl vector<ll>
#define vs vector<string>
#define vii vector<pii>
#define vll vector<pll>
#define lp(i,a,b) for (int i=(a);i<=(int)(b);++i)
#define lp2(i,a,b) for (int i=(a);i>=(b);--i)
#define clr(c,x) memset(c,x,sizeof(c))
#define allr(v) v.rbegin(),v.rend()
#define all(v) v.begin(),v.end()
const int N=2e5+5,mod=(int)1e9+7;
int n, l;
vector<int> adj[N];

int timer;
int tin[N], tout[N];
vector<vector<int>> up;

void dfs(int v, int p)
{
    tin[v] = ++timer;
    up[v][0] = p;
    for (int i = 1; i <= l; ++i)
        up[v][i] = up[up[v][i-1]][i-1];

    for (int u : adj[v])
    {
        if (u != p)
            dfs(u, v);
    }

    tout[v] = ++timer;
}

inline bool is_ancestor(int u, int v)
{
    return tin[u] <= tin[v] && tout[u] >= tout[v];
}

inline int lca(int u, int v)
{
    if (is_ancestor(u, v))
        return u;
    if (is_ancestor(v, u))
        return v;
    for (int i = l; i >= 0; --i)
    {
        if (!is_ancestor(up[u][i], v))
            u = up[u][i];
    }
    return up[u][0];
}

inline void preprocess(int root)
{
    timer = 0;
    l = 19;
    up.assign(n+3, vector<int>(l + 1));
    dfs(root, root);
}
int dp[N]= {};
set<int>exist[N];
void depth(int node,int par,int len=1)
{
    dp[node]=len;
    for (auto u:adj[node])
    {
        if (u==par) continue;
        depth(u,node,len+1);
    }
}
int main()
{
    ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);
    int m;
    cin>>n>>m;
    lp(i,1,n-1)
    {
        int x,y;
        cin>>x>>y;
        adj[x].pb(y);
        adj[y].pb(x);
        exist[x].insert(y);
        exist[y].insert(x);
    }
    depth(1,1);
    preprocess(1);
    while(m--)
    {
        int kk;
        cin>>kk;
        vi vv;
        int cur=1,mx=0;
        while(kk--)
        {
            int x;
            cin>>x;
            vv.pb(x);
            if (dp[x]>=mx)
            {
                mx=dp[x];
                cur=x;
            }
        }
        bool is=true;
        for (auto u:vv)
        {
            int z=lca(u,cur);
            if (u==z||exist[u].count(z))
                continue;
            is=false;
            break;
        }
        cout<<((is==true)?"YES":"NO")<<"\n";
    }
    return 0;
}