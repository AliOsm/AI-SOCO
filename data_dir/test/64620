//==================================
//==========   WARNING   ===========
//==================================
//===   Contains too many bugs   ===
//==================================

#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cmath>
#include <set>
#include <functional>
#include <queue>
#include <iomanip>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<ll,ll> pr;

//#define double long double

const ll mod7 = 1000000007;

#define NAME "string"

int gcd(int a,int b)
{
    while(b)
    {
        a%=b;
        swap(a,b);
    }
    return a;
}

int a[1000000];
int b[1000000];

bool used[1000000];

vector<int> z[200000];

map<int,int> go;

int main()
{
    //freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
    //freopen(NAME".in","r",stdin); freopen(NAME".out","w",stdout);
   

    int n,m,p;
    scanf("%d %d %d",&n,&m,&p);
    for(int i=0;i<n;++i)
    {
        scanf("%d",&a[i]);
    }
    for(int i=0;i<m;++i)
    {
        scanf("%d",&b[i]);
        go[b[i]]++;
    }
    int j=0;
    for(;j<n;++j)
    {
        if(!used[j])
        {
            for(int i=0;j+i*p<n;++i)
            {
                used[i*p+j] = true;
                z[j].push_back(a[i*p+j]);
            }
        }
        else
        break;
    }

    vector<int> ans;

    for(int i=0;i<j;++i)
    {
        if(z[i].size()<m)
            continue;
        map<int,int> data;
        for(int k=0;k<m;++k)
        {
            data[z[i][k]]++;
        }
        if(data==go)
        {
            ans.push_back(1+i);
        }
        for(int k=m;k<z[i].size();++k)
        {
            data[z[i][k-m]]--;
            if(data[z[i][k-m]]==0)
            {
                data.erase(z[i][k-m]);
            }
            data[z[i][k]]++;
            if(data==go)
            {
                ans.push_back(1+i+(k-m+1)*p);
            }
        }
    }
    sort(ans.begin(),ans.end());
    printf("%d\n",ans.size());
    for(int i=0;i<ans.size();++i)
        printf("%d ",ans[i]);

    return 0;
}