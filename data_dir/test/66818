
#include<bits/stdc++.h>


using namespace std;

using ll   = long long;
using ii   = pair   < int , int >;
using i3   = pair   < int , ii  >;
using li   = pair   < ll  , int >;
using lii  = pair   < ll  , ii  >;
using pll  = pair   < ll  , ll  >;
using vi   = vector < int       >;
using vl   = vector < ll        >;
using vii  = vector < ii        >;
using vli  = vector < li        >;
using vpll = vector < pll       >;
using vi3  = vector < i3        >;
using vlii = vector < lii       >;


const int N = 4e5 + 5;
const ll INF = 1e17 + 7;
const double eps = 1e-9 , PI = acos(-1);



int n , m;

set < int > adj[N];
bool ok[N];

set < int > allP;

void marry(){

    for(int i = 1 ; i <= n ; i ++){
            if(adj[i].size() > 0){
                    int p = *(adj[i].begin());

                    ok[i] = 1;

                    for(int v : adj[p]){
                            adj[v].erase(adj[v].find(p));
                    }

            }
    }
}

bool cmp(int a , int b){
    return (int(adj[a].size()) > int(adj[b].size()));
}

bool improve(){

    vi v(n);
    iota(v.begin() , v.end() , (1 , 1));
    sort(v.begin() , v.end() , cmp);
    //for(int u : v) cout << u << " "; cout << endl;

    for(int u : v){
            /*
            cout << "u = " << u << endl;
            cout << "ok = " << ok[u] << endl;
            cout << "p = " << p << endl;
            */
            if(!ok[u]){
                    if(!allP.empty()){
                            printf("IMPROVE\n%d %d\n" , u , *(allP.begin()));
                            return 1;
                    }
            }

            for(int prnc : adj[u]){
                    allP.insert(prnc - n - 1);
            }
    }
    return 0;
}

void solve(int testCase){

    scanf("%d" , &n);

    for(int i = 1 ; i <= 3*n ; i ++){
            adj[i].clear();
            ok[i] = 0;
    }
    allP.clear();
    for(int i = 1 ; i <= n ; i ++){
            allP.insert(i);
    }

    for(int i = 1 ; i <= n ; i ++){
            int k; scanf("%d" , &k);

            for(int j = 1 ; j <= k ; j ++){
                    int p; scanf("%d" , &p);


                    if(allP.count(p)){
                            allP.erase(allP.find(p));
                    }

                    p += n + 1;
                    adj[i].insert(p);
                    adj[p].insert(i);
            }
    }

    marry();

    if(improve()){
            return;
    }

    printf("OPTIMAL\n");
}

main(){

    int t = 1;
    scanf("%d" , &t);

    for(int testCase = 1 ; testCase <= t ; testCase ++){
            solve(testCase);
    }

    return 0;
}
