#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef pair<ll,ll> ii;
typedef vector<ll> vi;
typedef vector< ii > vii;

#define INF 0x3F3F3F3F
#define LINF 0x3F3F3F3F3F3F3F3FLL
#define pb push_back
#define mp make_pair
#define pq priority_queue
#define LSONE(s) ((s)&(-s)) //LASTBIT
#define DEG_to_RAD(X)   (X * PI / 180)
#define F first
#define S second
#define PI 2*acos(0)

#ifdef ONLINE_JUDGE
#define debug(args...)
#else
#define debug(args...) fprintf(stderr,args)
#endif

//////////////////////
int dx[] = {1,-1,0,0};
int dy[] = {0,0,-1,1};
//////////////////////

void arquivo()
{
	freopen("","r",stdin);
	freopen("","w",stdout);
}

const int N = 300100;
const int M = 26;

vi G[N];
ll c[N];
int n;
char s[N];

int occ = 0;
int idx[N];
int tr[N][M];
ll sz[N];
ll foo[N];

void go( int x, int y ){
	sz[x] = 1;
	for(int i=0;i<26;++i){
		int xx = tr[x][i], yy = tr[y][i];
		if( xx != -1 && yy != -1 ) go(xx,yy);
		if( xx == -1 && yy != -1 ) tr[x][i] = yy;
	}
	for(int i=0;i<26;++i){
		if( tr[x][i] != -1 ) sz[x] += sz[tr[x][i]];
	}
}

void dfs0( int x, int ult ){
	idx[x] = occ++;
	sz[idx[x]]++;
	for(int i=0;i<G[x].size();++i){
		int y = G[x][i];
		if( y == ult ) continue;
		dfs0(y,x);
		int c = s[y]-'a';
		if( tr[idx[x]][c] == -1 ){
			tr[idx[x]][c] = idx[y];
			sz[idx[x]] += sz[idx[y]];
		}
		else{
			sz[idx[x]] -= sz[tr[idx[x]][c]];
			go(tr[idx[x]][c],idx[y]);
			sz[idx[x]] += sz[tr[idx[x]][c]];
		}
	}
	foo[x] = sz[idx[x]]+c[x];
}


int main()
{
	//ios::sync_with_stdio(0);
	scanf("%d",&n);
	for(int i=0;i<n;++i) scanf("%lld",c+i);
	scanf(" %s",s);
	for(int i=0;i+1<n;++i){
		int x,y; scanf("%d %d",&x,&y);
		x--;y--;
		G[x].pb(y);
		G[y].pb(x);
	}
	memset(tr,-1,sizeof tr);
	dfs0(0,0);
	ll mx = -1, qtd = 0;
	for(int i=0;i<n;++i){
		if( foo[i] > mx ) qtd = 1, mx = foo[i];
		else if( foo[i] == mx ) qtd++;
	}
	printf("%lld\n%lld\n",mx,qtd);
	return 0;
}
