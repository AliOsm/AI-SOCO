#include <stdio.h>
#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second

using namespace std;
//using namespace __gnu_pbds;

//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int N = 100000;
const int inf = (int)1e8 + 1;
const ll big = (ll)1e18 + 1;
const int P = 31;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const int MAX_INT = (1 << 31) - 1;
const double eps = 1e-6;
const double pi = atan2(0, -1);

/*void print(vector<auto> &a)
{
    for (auto i : a)
        cout << i << " ";
    cout << endl;
}*/

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("lamps.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    //int TL = 0.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    int n, m;
    cin >> n >> m;
    string a[n];
    rep(i, 0, n)
        cin >> a[i];
    int b[n][3];
    rep(i, 0, n)
        rep(j, 0, 3)
            b[i][j] = inf;
    rep(i, 0, n)
        rep(j, 0, m)
            if (a[i][j] >= '0' && a[i][j] <= '9')
                b[i][0] = min(b[i][0], min(j, m - j));
            else if (a[i][j] >= 'a' && a[i][j] <= 'z')
                b[i][1] = min(b[i][1], min(j, m - j));
            else if (a[i][j] == '#' || a[i][j] == '*' || a[i][j] == '&')
                b[i][2] = min(b[i][2], min(j, m - j));
    int ans = inf;
    rep(i, 0, n)
        rep(j, 0, n)
            rep(k, 0, n)
                if (i != j && i != k && j != k)
                    ans = min(ans, b[i][0] + b[j][1] + b[k][2]);
    cout << ans << endl;
    return 0;
}