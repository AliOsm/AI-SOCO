#ifdef LOCAL
//#  define _GLIBCXX_DEBUG
#else
#  define cerr __get_ce
#endif
#include <bits/stdc++.h>

using namespace std;
#define next __next
#define prev __prev
#define right __right
#define left __left
#define index __index

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;

typedef pair<int, int> pii;
typedef pair<int, int> ipair;
#define szof(x) ((int)(x).size())
#define ff first
#define ss second
#define puba push_back
#define bend(x) (x).begin(), (x).end()

int const INF = 100 + (int) 1e9;
ll const INFL = 100 + (ll) 1e18;
ld const PI = 3.141592653589793238462643L;
mt19937 tw(960172);

bool is_prime(ll x) { for (ll y = 2; y * y <= x; ++y) if (x % y == 0) return 0; return x > 1; }
ll rnd(ll x, ll y) { static uniform_int_distribution<ll> d; return d(tw) % (y - x + 1) + x; }
ll sqr(int a) { return (ll) a * a; } template<class T> T sqr(T const& a) { return a * a; }
ll gcd(ll a, ll b) { while (b > 0) { ll t = a % b; a = b; b = t; } return a; }

int const N = 333;

int n, m, t;
int tp, tu, td;
int a[N][N];
int rows[N][N], revrows[N][N];
int cols[N][N], revcols[N][N];

int calc_cost(int from, int to) {
    if (from < to)
        return tu;
    if (from > to)
        return td;
    return tp;
}

void solve() {
    scanf("%d%d%d%d%d%d", &n, &m, &t, &tp, &tu, &td);
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < m; ++j)
            scanf("%d", a[i] + j);
    for (int i = 0; i < n; ++i) {
        rows[i][0] = 0;
        for (int j = 0; j < m - 1; ++j)
            rows[i][j + 1] = rows[i][j] + calc_cost(a[i][j], a[i][j + 1]);
        revrows[i][m - 1] = 0;
        for (int j = m - 2; j >= 0; --j)
            revrows[i][j] = revrows[i][j + 1] + calc_cost(a[i][j + 1], a[i][j]);
    }
    for (int j = 0; j < m; ++j) {
        cols[0][j] = 0;
        for (int i = 0; i < n - 1; ++i)
            cols[i + 1][j] = cols[i][j] + calc_cost(a[i][j], a[i + 1][j]);
        revcols[n - 1][j] = 0;
        for (int i = n - 2; i >= 0; --i)
            revcols[i][j] = revcols[i + 1][j] + calc_cost(a[i + 1][j], a[i][j]);
    }
    int i1 = -1, j1 = -1, i2 = -1, j2 = -1, diff = INF;
    for (int x1 = 0; x1 < n; ++x1)
        for (int x2 = x1 + 2; x2 < n; ++x2)
            for (int y1 = 0; y1 < m; ++y1)
                for (int y2 = y1 + 2; y2 < m; ++y2) {
                    int cur = rows[x1][y2] - rows[x1][y1] + 
                              cols[x2][y2] - cols[x1][y2] + 
                              revrows[x2][y1] - revrows[x2][y2] +
                              revcols[x1][y1] - revcols[x2][y1] - t;
                    cur = cur > 0 ? cur : -cur;
                    if (cur < diff) {
                        i1 = x1;
                        j1 = y1;
                        i2 = x2;
                        j2 = y2;
                        diff = cur;
                        if (diff == 0)
                            goto end;
                    }
                }
end:
    cout << i1 + 1 << ' ' << j1 + 1 << ' ' << i2 + 1 << ' ' << j2 + 1 << '\n';
}

int main() {
    //freopen("", "r", stdin);
    //freopen("", "w", stdout);
    cout << setprecision(15) << fixed;
#ifdef LOCAL
    cerr << setprecision(6) << fixed;
#endif
    int tcnt = 1;
    //scanf("%d", &tcnt);
    for (int test = 1; test <= tcnt; ++test)
        solve();
#ifdef LOCAL
    cerr << "time: " << (ll) clock() * 1000 / CLOCKS_PER_SEC << " ms" << endl;
#endif
}
