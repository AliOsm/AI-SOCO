#include<bits/stdc++.h>
using namespace std;

const int N = 1e5 + 5;

vector < int > adj[N] , ans;
int n , m;

bool vis[N][3];
int    p[N][3];
int color[N];


void path(int u , int state){

    printf("Win\n");

    ans.push_back(u);
    while( 1 ){
        u = p[u][state];
        state = !state;
        ans.push_back(u);
        if(u == p[u][state])break;
    }

    for(int i = ans.size() - 1 ; i >= 0 ; i --)
        printf("%d " , ans[i]);
}

void dfs(int u , int f){

    vis[u][f] = 1;

    if(adj[u].size() == 0 && f == 0){
        path(u , 0);
        exit(0);
    }

    for(auto v : adj[u]){
        if(vis[v][!f])continue;

        p[v][!f] = u;
        dfs(v , !f);
    }
}

bool cyc = 0;

void dfs_cyc(int u){
    color[u] = 1;

    for(auto v : adj[u]){
        if(color[v] == 0)
            dfs_cyc(v);
        else if(color[v] == 1)cyc = 1;
    }
    color[u] = 2;
}

main(){
    scanf("%d %d" , &n , &m);

    int c , v;
    for(int i = 1 ; i <= n ; i ++){
        scanf("%d" , &c);
        for(int j = 0 ; j < c ; j ++){
            scanf("%d" , &v);

            adj[i].push_back(v);
        }
    }

    for(int i = 0 ; i < N ; i ++)p[i][0] = p[i][1] = i;

    int s;
    scanf("%d" , &s);

    dfs(s , 1);

    dfs_cyc(s);
    if(cyc)printf("Draw\n");
    else printf("Lose");
}
