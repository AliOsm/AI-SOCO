#include <iostream>
#include <algorithm>
#define MOD 1000000007
using namespace std;
int f[200001];
int f_inv[200001];
pair<int, int> events[400000];
int C(int n, int k) {
	return int((long long)f[n] * f_inv[k] % MOD * f_inv[n - k] % MOD);
}
int mpow(int base, int exp) {
	if(exp == 0) return 1;
	else {
		int x = mpow(base, exp / 2);
		if(exp % 2 == 0) {
			return int((long long)x * x % MOD);
		} else {
			return int((long long)x * x % MOD * base % MOD);
		}
	}
}
int main() {
	f[0] = 1;
	for(int i = 1; i <= 200000; i++) {
		f[i] = int((long long)i * f[i-1] % MOD);
	}
	for(int i = 0; i <= 200000; i++) {
		f_inv[i] = mpow(f[i], MOD - 2);
	}
	int n, k;
	cin >> n >> k;
	for(int i = 0; i < n; i++) {
		int start, end;
		cin >> start >> end;
		events[2*i] = make_pair(start, 1);
		events[2*i+1] = make_pair(end + 1, -1);
	}
	sort(events, events + 2*n);
	int depth = 0;
	int prev = 0;
	long long ans = 0;
	for(int i = 0; i < 2*n; i++) {
		pair<int, int> event = events[i];
		if(depth >= k) {
			ans += (long long)C(depth, k) * (event.first - prev) % MOD;
			ans %= MOD;
		}
		depth += event.second;
		prev = event.first;
	}
	cout << ans << endl;
	return 0;
}