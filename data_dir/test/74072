#include <bits/stdc++.h>

using namespace std;

#define F first
#define S second

#define endl '\n'

#define mp make_pair
#define pb push_back

#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

#define sol (root + root)
#define sag (root + root + 1)
#define orta ((bas + son) >> 1)

#define bit __builtin_pop_bcount

#ifndef D
	#define dbg(x) 0
	#define dbgs(x) 0
#else
	#define dbg(x) cerr << (#x) << " --> " << (x) << endl
	#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#endif

typedef long long ll;
typedef pair < int, int > pii;

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 5e5 + 5;

int n, m, a[N], next[N], kd[N << 2], ans[N];

pair < pii, int > q[N];

map < int , int > M;

vector < pii > v;

int update(int root, int bas, int son, int x) {

	if(son < x or x < bas) return kd[root];

	if(x <= bas and son <= x) return kd[root] = next[x] - x;

	return kd[root] = min(update(sol, bas, orta, x), update(sag, orta + 1 , son, x));

}

int query(int root, int bas, int son, int x, int y) {

	if(son < x or y < bas) return inf;

	if(x <= bas and son <= y) return kd[root];

	return min(query(sol, bas, orta, x, y), query(sag, orta + 1, son, x, y));

}

int main() {
	
	ios :: sync_with_stdio(0);

	FOR(i, 0, (N << 2) - 1) kd[i] = inf;

	cin >> n >> m;

	FOR(i, 1, n)
		cin >> a[i];

	ROF(i, n, 1)
	{
		next[i] = M[a[i]];

		M[a[i]] = i;
	}

	FOR(i, 1, m)
	{
		cin >> q[i].F.S >> q[i].F.F;

		q[i].S = i;
	}

	sort(q + 1, q + m + 1);

	FOR(i, 1, m)
		swap(q[i].F.F, q[i].F.S);

	FOR(i, 1, n)
		if(next[i])
			v.pb(mp(next[i], i));

	sort(v.begin(), v.end());

	int j = 0;

	FOR(i, 1, m)
	{
		while(j < v.size() and v[j].F <= q[i].F.S)
		{
			update(1, 1, n, v[j].S);

			j++;
		}

		ans[q[i].S] = query(1, 1, n, q[i].F.F, q[i].F.S);
	}

	FOR(i, 1, m)
	{
		if(ans[i] == inf)
			ans[i] = -1;

		cout << ans[i] << endl;
	}

	return 0;

}
