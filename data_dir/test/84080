/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(int x) { return 8*sizeof(int)-__builtin_clz(x); }

namespace std {
    template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}};
}
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};
template <typename T> struct bounded_priority_queue {
	inline bounded_priority_queue(ui X) : A(X), B(0), s(0) {}
	inline void push(ui L, T V) { B = max(B, L); A[L].push(V); ++s; }
	inline const T &top() const { return A[B].front(); }
	inline void pop() { --s; A[B].pop(); while (B > 0 && A[B].empty()) --B; }
	inline bool empty() const { return A[B].empty(); }
	inline void clear() { s = B = 0; for (auto &a: A) a = queue<T>(); }
	inline ui size() const { return s; }
private:
	vector<queue<T>> A; ui B; int s;
};


#endif
// #include "../l/mod.h"

constexpr double PI = 3.14159265358979323846;


vector<double> COS, SIN;

class TaskE {
public:
    struct Block {
        Block(int l) : L(l, 1), A(l, 0), l(l) {
            recalc();
        }
        void recalc() {
            int ang = 0;
            double dx = 0, dy = 0;
            for (int i = 0; i < l; ++i) {
                ang += A[i];
                if (ang >= 360) ang -= 360;
                dx += L[i]*SIN[ang];
                dy += L[i]*COS[ang];
            }

            length = sqrt(dx*dx+dy*dy);
            angle = atan2(dy, dx) - PI/2;
            totAngle = ang*PI/180;
        }

        vector<int> L, A;
        int l;
        double angle, length, totAngle;
    };

    void solve(istream& cin, ostream& cout) {
        int N, M; cin >> N >> M;
        int K = 2.5 * sqrt(N);
        if (K == 0) K = 1;

        COS.clear(); SIN.clear();
        for (int i = 0; i < 360; ++i) {
            COS.push_back(cos(i*PI/180));
            SIN.push_back(sin(i*PI/180));
        }

        vector<Block> blocks;
        for (int j = 0; j < N; j += K) {
            blocks.emplace_back(min(K, N-j));
        }

        cout << fixed << setprecision(4);
        for (int i = 0; i < M; ++i) {
            int x,y,z; cin >> x >> y >> z;
            int b = (y-1)/K;
            int c = (y-1)%K;
            if (x == 1) {
                blocks[b].L[c] += z;
            } else {
                (blocks[b].A[c] += 360-z) %= 360;
            }
            blocks[b].recalc();

            double a = 0, dx = 0, dy = 0;
            for (auto &block : blocks) {
                dx += block.length*sin(a-block.angle);
                dy += block.length*cos(a-block.angle);
                a += block.totAngle;
                if (a > 2*PI) a -= 2*PI;
            }
//            if (N == 300000) {
//                if (i%10000==0) cout << "x" << endl;
//            } else {
                cout << dy << ' ' << dx << '\n';
//            }
        }
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	TaskE solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}
