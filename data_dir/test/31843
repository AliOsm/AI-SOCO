
#include<bits/stdc++.h>


using namespace std;

using ll   = long long;
using ii   = pair   < int , int >;
using i3   = pair   < int , ii  >;
using li   = pair   < ll  , int >;
using lii  = pair   < ll  , ii  >;
using pll  = pair   < ll  , ll  >;
using vi   = vector < int       >;
using vl   = vector < ll        >;
using vii  = vector < ii        >;
using vpll = vector < pll       >;
using vi3  = vector < i3        >;
using vlii = vector < lii       >;


const int N = 2e5 + 5 , L = 20;
const ll INF = 1e17 + 7;
const double eps = 1e-9 , PI = acos(-1);



int n , m;

vi  adj[N];
int dep[N];
int  to[N][L];
int  sz[N];

void dfs(int u , int p){
     to[u][0] = p;
     sz[u]    = 1;
    dep[u]    = 1 + dep[p];

    for(int i = 1 ; i < L ; i ++){
            to[u][i] = to[ to[u][i-1] ][i-1];
    }

    for(int v : adj[u]){
            if(v != p){
                    dfs(v , u);
                    sz[u] += sz[v];
            }
    }

}

int jump(int u , int k){ for(int i = 0 ; i < L ; i ++)if(k & (1 << i))u = to[u][i]; return u;}

int getLCA(int u , int v){
    u = jump(u , dep[u] - dep[v]);
    if(u == v)return u;

    for(int i = L-1 ; i >= 0 ; i --){
            if(to[u][i] != to[v][i]){
                    u = to[u][i];
                    v = to[v][i];
            }
    }
    return to[u][0];
}


void solve(int testCase){

    scanf("%d" , &n);

    for(int i = 1 ; i < n ; i ++){
            int u , v;
            scanf("%d %d" , &u , &v);

            adj[u].push_back(v);
            adj[v].push_back(u);
    }

    dfs(1 , 0);

    scanf("%d" , &m);

    while( m -- ){
            int u , v;
            scanf("%d %d" , &u , &v);

            if(u == v){
                    printf("%d\n" , n);
                    continue;
            }

            if(dep[u] < dep[v])swap(u , v);

            int lca = getLCA(u , v);
            int dis = dep[u] + dep[v] - 2*dep[lca];

            if(dis&1){
                    printf("0\n");
            }
            else if(dep[u] == dep[v]) {
                    int upar = jump(u , dep[u] - dep[lca] - 1);
                    int vpar = jump(v , dep[v] - dep[lca] - 1);

                    printf("%d\n" , n - sz[upar] - sz[vpar]);
            }
            else {
                    int mid = jump(u , dis / 2);
                    int del = jump(u , dis / 2 - 1);

                    printf("%d\n" , sz[mid] - sz[del]);
            }

    }

}

main(){

    int t = 1;
    // scanf("%d" , &t);

    for(int testCase = 1 ; testCase <= t ; testCase ++){
            solve(testCase);
    }

    return 0;
}
