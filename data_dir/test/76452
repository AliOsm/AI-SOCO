/*
Anton Gulikov
*/
#include <iostream>
#include <fstream>
#include <stack>
#include <cstdlib>
#include <cmath>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <algorithm>
#include <ctime>
#include <cassert>
#include <stdio.h>
#include <queue>

#define mp make_pair
#define pb push_back
#define pi acos(-1.) + 0.
#define foru(i,n) for(int i = 0; i < n; i++)
#define ford(i,n) for(int i = n - 1; i >= 0; i--)
#define forab(i,l,r) for(int i = l; i <= r; i++)
#define forabd(i,r,l) for(int i = r; i >= l; i--)
#define sqr(x) ((x) * (x))
#define F first
#define S second

const long long base = 1000000000 + 7;

using namespace std;

int binPow(long long a, long long b, long long mod){
    long long res = 1;
    long long tmp = a;
    while (b)
    {
        if (b & 1)
        {
            res = (tmp * 1ll * res) % mod;
        }
        tmp = (tmp * 1ll * tmp) % mod;
        b >>= 1;
    }
    return res;
}

void solve()
{
    long long n, m, dx, dy;
    cin >> n >> m >> dx >> dy;
    if (n == 1)
    {
        cout << "0 0 ";
        return;
    }
    long long phi = 0;
    for (int i = 1; i < n; i++)
    {
        if (__gcd(i * 1ll, n) == 1)
            phi++;
    }
    long long rev = binPow(dx, phi - 1, n);
    long long cnt[n];

    for (int i = 0; i < n; i++)
        cnt[i] = 0;

    for (int i = 0; i < m; i++)
    {
        long long x,y;
        cin >> x >> y;
        long long c = (x * rev) % n;
        cnt[(n + y - (c * 1ll * dy) % n) % n]++;
    }
    int pos = 0;
    for (int i = 0; i < n; i++)
        if (cnt[i] > cnt[pos])
            pos = i;
    cout << 0 <<  ' ' << pos << endl;
}

int main(){
    ios_base :: sync_with_stdio(false);
    int test = 1;
    while (test--){
        solve();
    }
    return 0;
}