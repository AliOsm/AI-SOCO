#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, greater<>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long int64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//998244353;
const int base = 2187;
const double eps = 1e-8;
const int N = 100'000;
const int LOGN = 19;

int n, m, k;

int64 calc(string_view s) {
  vector<int> a(26, 0);
  int64 res = 0;
  for (char c : s) {
    c -= 'a';
    ++a[c];
    for (int i = c; i < 26; ++i) {
      res += a[i];
    }
  }
  return res;
}

void solve(int test) {
  string s, t;
  cin >> n >> s >> t;
  int inv1 = calc(s) & 1;
  int inv2 = calc(t) & 1;
  sort(begin(s), end(s));
  sort(begin(t), end(t));
  bool flag = false;
  for (size_t i = 0; i + 1 < s.size(); ++i) {
    flag |= s[i] == s[i + 1];
    flag |= t[i] == t[i + 1];
  }
  if (s == t && (flag || inv1 == inv2)) {
    cout << "YES\n";
  } else {
    cout << "NO\n";
  }
}

void precalc() {
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  precalc();
  int test = 1;
  cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i) {
    solve(i);
  }
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}
