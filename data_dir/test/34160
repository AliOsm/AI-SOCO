#include <iostream>
#include <iomanip>
#include <math.h>
using namespace std;

typedef pair <double, double> Point;

Point v[1100];
int n;

double d(Point a, Point b, Point x); /// distance form (a, b) to x
double d(Point a, Point b); /// distance form a to b
Point intersection(Point a, Point b, Point x, Point y);
double cross(Point a, Point b);


int main()
{
	double dmin = 3e18;
	ios_base :: sync_with_stdio(0);
	cin.tie(0);

	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> v[i].first >> v[i].second;

	for (int i = 0; i < n; i++) {
		dmin = min(dmin, d(v[(i - 1 + n) % n], v[(i + 1) % n], v[i]));
		dmin = min(dmin, d(v[(i - 1 + n) % n], v[(i - 2 + n) % n], v[i]));
		dmin = min(dmin, d(v[(i + 1) % n], v[(i + 2) % n], v[i]));
	}

	cout << setprecision(9) << fixed << sqrt(dmin) / 2.0;
}


Point intersection(Point a, Point b, Point x, Point y)
{
	double t = cross({ a.first - b.first, a.second - b.second }, { y.first - a.first, y.second - a.second });
	t /= cross({ b.first - a.first, b.second - a.second }, { x.first - y.first, x.second - y.second });
	return { t * x.first + (1.0 - t) * y.first, t * x.second + (1.0 - t) * y.second };
}

double d(Point a, Point b)
{
	return (a.first - b.first) * (a.first - b.first) + (a.second - b.second) * (a.second - b.second);
}

double d(Point a, Point b, Point x)
{
	Point y = { x.first + a.second - b.second, x.second + b.first - a.first };
	Point inters = intersection(a, b, x, y);
	return d(x, inters);
}

double cross(Point a, Point b)
{
	return a.first * b.second - a.second * b.first;
}