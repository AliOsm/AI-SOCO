// eddy1021
#pragma GCC optimize("O3")
#include <bits/stdc++.h>
using namespace std;
typedef double D;
typedef long double LD;
typedef long long LL;
typedef pair<int,int> PII;
typedef pair<LL,LL> PLL;
#define mod9 1000000009LL
#define mod7 1000000007LL
#define INF  1023456789LL
#define INF16 10000000000000000LL
#define eps 1e-9
#define SZ(x) (int)(x).size()
#define ALL(x) (x).begin(), (x).end()
#define IOS ios_base::sync_with_stdio(0); cin.tie(0)
#ifndef ONLINE_JUDGE
#define debug(...) printf(__VA_ARGS__)
#else 
#define debug(...)
#endif
inline LL getint(){
  LL _x=0,_tmp=1; char _tc=getchar();    
  while( (_tc<'0'||_tc>'9')&&_tc!='-' ) _tc=getchar();
  if( _tc == '-' ) _tc=getchar() , _tmp = -1;
  while(_tc>='0'&&_tc<='9') _x*=10,_x+=(_tc-'0'),_tc=getchar();
  return _x*_tmp;
}
inline LL add( LL _x , LL _y , LL _mod = mod7 ){
  _x += _y;
  return _x >= _mod ? _x - _mod : _x;
}
inline LL sub( LL _x , LL _y , LL _mod = mod7 ){
  _x -= _y;
  return _x < 0 ? _x + _mod : _x;
}
inline LL mul( LL _x , LL _y , LL _mod = mod7 ){
  _x *= _y;
  return _x >= _mod ? _x % _mod : _x;
}
LL mypow( LL _a , LL _x , LL _mod ){
  if( _x == 0 ) return 1LL;
  LL _ret = mypow( mul( _a , _a , _mod ) , _x >> 1 , _mod );
  if( _x & 1 ) _ret = mul( _ret , _a , _mod );
  return _ret;
}
LL mymul( LL _a , LL _x , LL _mod ){
  if( _x == 0 ) return 0LL;
  LL _ret = mymul( add( _a , _a , _mod ) , _x >> 1 , _mod );
  if( _x & 1 ) _ret = add( _ret , _a , _mod );
  return _ret;
}
inline bool equal( D _x ,  D _y ){
  return _x > _y - eps && _x < _y + eps;
}
void sleep( double sec = 1021 ){
  clock_t s = clock();
  while( clock() - s < CLOCKS_PER_SEC * sec );
}
#define Bye exit(0)
int __ = 1 , _cs;
/*********default*********/
#define N 131073
#define MAXH 100000
int lb[ N ];
#include <bits/extc++.h>
using namespace __gnu_pbds;
#include <ext/pb_ds/assoc_container.hpp>
typedef cc_hash_table<int,int> umap_t;
umap_t bit[ N << 1 ];
inline void modify( int no , int x , int v ){
  for( int i = x ; i <= MAXH ; i += lb[ i ] ){
    auto it = bit[ no ].find( i );
    if( it == bit[ no ].end() )
      bit[ no ][ i ] = v;
    else if( v < it->second )
      it->second = v;
  }
}
inline int query( int no , int x ){
  int ret = INF;
  for( int i = x ; i ; i -= lb[ i ] ){
    auto it = bit[ no ].find( i );
    if( it == bit[ no ].end() ) continue;
    if( it->second < ret ) ret = it->second;
  }
  return ret;
}
#define mid ((l+r)>>1)
#define L(X) (X<<1)
#define R(X) (1+(X<<1))
void modify_t( int no , int l , int r , int p , int pp , int vv ){
  modify( no , pp , vv );
  if( l == r ) return;
  if( p <= mid ) modify_t( L( no ) , l , mid , p , pp , vv );
  else modify_t( R( no ) , mid + 1 , r , p , pp , vv );
}
int query_t( int no , int l , int r , int ql , int qr , int qu ){
  if( r < ql or l > qr or ql > qr ) return INF;
  if( ql <= l and r <= qr ) return query( no , qu );
  return min( query_t( L( no ) , l , mid , ql , qr , qu ) ,
              query_t( R( no ) , mid + 1 , r , ql , qr , qu ) );
}
void build(){
  for( int i = 1 ; i < N ; i ++ )
    lb[ i ] = i & (-i);
}
int n , r , a[ N ];
vector<int> v[ N ];
void init(){
  n = getint();
  r = getint();
  for( int i = 1 ; i <= n ; i ++ )
    a[ i ] = getint();
  for( int i = 1 ; i < n ; i ++ ){
    int ui = getint();
    int vi = getint();
    v[ ui ].push_back( vi );
    v[ vi ].push_back( ui );
  }
}
int dep[ N ] , in[ N ] , out[ N ] , stmp , maxh;
void go( int now , int prt , int tdep ){
  dep[ now ] = tdep;
  in[ now ] = ++ stmp;
  modify_t( 1 , 1 , n , in[ now ] , tdep , a[ now ] );
  maxh = max( maxh , tdep );
  for( int son : v[ now ] ){
    if( son == prt ) continue;
    go( son , now , tdep + 1 );
  }
  out[ now ] = stmp;
}
void solve(){
  go( r , r , 1 );
  int q = getint() , lst = 0; while( q -- ){
    int pi = getint();
    int qi = getint();
    int xi = ((pi + lst) % n) + 1;
    int ki = (qi + lst) % n;
    lst = query_t( 1 , 1 , n , in[ xi ] , out[ xi ] , min( maxh , dep[ xi ] + ki ) );
    printf( "%d\n" , lst );
  }
}
int main(){
  build();
  //__ = getint();
  while( __ -- ){
    init();
    solve();
  }
}
