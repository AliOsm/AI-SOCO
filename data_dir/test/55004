#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define FORE(i, a, n) for (i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << (x) << endl;
#define ull unsigned long long
#define pii pair<int, int>
//#define pii pair<ll, ll>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-10
//#define endl "\n"
#define pdd pair<double, double>
//#define mp make_pair

const int MAXN = 111;

bool fav[MAXN];
int m, k;

int main() {
	ifstream cin("input.txt");
	ofstream cout("output.txt");
	cin >> m >> k;
	FOR(i, 0, k) {
		int x;
		cin >> x;
		fav[x] = true;
	}
	int n;
	cin >> n;
	vector<pii> movies;
	while (n--) {
		string tmp;
		cin >> tmp;
		int d;
		cin >> d;
		int f = 0;
		int rem = 0;
		FOR(i, 0, d) {
			int x;
			cin >> x;
			if (x == 0)
				rem++;
			else if (fav[x])
				f++;
		}
		movies.pb(pii(f+max(0, rem - (m-d+rem - (k-f))), min(rem, k-f)+f));
	}
	//FOREACH(it, movies) cout << it->X << " " << it->Y << endl;
	FOR(i, 0, Size(movies)) {
		int mn = -1;
		int mx = -1;
		FOR(j, 0, Size(movies)) if (i != j) {
			mx = max(movies[j].Y, mx);
			mn = max(movies[j].X, mn);
		}
		//cout << "! " << mn << " " << mx << endl;
		if (mn > movies[i].Y)
			cout << 1 << endl;
		else if (mx <= movies[i].X)
			cout << 0 << endl;
		else
			cout << 2 << endl;
	}
	return 0;
}

