#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int N = 5e5 + 100;

int par[N];
vector<int> grp[N];
vector <int> belong[N];

int parent(int u) {
    if(par[u] == u) return u;
    return par[u] = parent(par[u]);
}

void merge(int u, int v) {
    u = parent(u);
    v = parent(v);
    if(u == v) return;
    if(grp[u].size() < grp[v].size()) swap(u, v);
    par[v] = u;
    for(int node : grp[v]) {
        grp[u].push_back(node);
    }
    grp[v].clear();
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int n, m;
    cin >> n >> m;
    for(int i = 1; i <= m; i++) {
        int k;
        cin >> k;
        for(int j = 0; j < k; j++) {
            int x;
            cin >> x;
            grp[i].push_back(x);
            belong[x].push_back(i);
        }
        par[i] = i;
    }
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j < belong[i].size(); j++) {
            int u = belong[i][j-1], v = belong[i][j];
            merge(u, v);
        }
    }
    vector <int> res(n + 1, 1);
    for(int i = 1; i <= m; i++) {
        sort(grp[i].begin(), grp[i].end());
        grp[i].erase(unique(grp[i].begin(), grp[i].end()), grp[i].end());
        for(int x : grp[i]) {
            res[x] = grp[i].size();
        }
    }
    for(int i = 1; i <= n; i++) {
        cout << res[i] << " " ;
    }
    return 0;
}
