# include <iostream>
# include <string>
# include <vector>

using namespace std;

string cit = "\\cite{";
string bib = "\\bibitem{";
string beg = "\\begin{thebibliography}{99}";
string ed = "\\end{thebibliography}";
string text;

vector < string > links;
vector < string > sources;
string ss[1000];

string getcite( int i )
{
	int j = i;
	for ( j ; j < i + cit.size(); j ++ ){
		if ( cit[j - i] != text[j] )
			return "";
	}
	
	string ret = "";
	for ( j; j < text.size(); j++ ){
		if ( text[j] != '}' )
			ret += text[j];
			
		else
			break;
	}
	return ret;
}

void check( )
{
	string st = "";
	
	for ( size_t j = bib.size(); j < text.size(); j ++ ){
		
		if ( text[j] == '}' )
			break;
		
		st += text[j];
	}
	
	for ( size_t i = 0; i < links.size(); i ++ ){
		if ( links[i] == st ){
			ss[i] = text;
			break;
		}
	}
}

int main()
{	
	ios_base::sync_with_stdio( false );
	
	while ( getline( cin, text ) ){
		if ( text == beg )
			break;
	
		if ( text.size() < cit.size() )
			continue;
		for ( int i = 0; i < text.size() - cit.size() ; i ++ ){
			if ( text[i] == '\\' ){
				string ct = getcite( i );
				if( ct != "" ) 
					links.push_back( ct );
			}
		}
	}
	while ( getline( cin, text ) ){
		
		if( text == ed )
			break;
		sources.push_back( text );
		
		check( );
	}
	
	string res = "Correct";
	for ( size_t i = 0; i < sources.size(); i ++ ){
		if ( sources[i] != ss[i] ){
			res = "Incorrect";
			break;
		}
	}
	
	if ( res == "Correct" ){
		cout << res;
		return 0;
	}
	
	else{
		cout << res << endl;
		cout << beg << endl;
		for ( size_t i = 0; i < sources.size(); i ++ ){
			cout << ss[i] << endl;
		}
		cout << ed;
		
		return 0;
	}
}
