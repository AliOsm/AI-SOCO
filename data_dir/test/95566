#include<bits/stdc++.h>

using namespace std;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int n, m, D;
	cin >> n >> m >> D;
	vector<vector<int>> g(n);
	vector<int> deg(n, 0);
	while (m--) {
		int x, y;
		cin >> x >> y;
		x--;
		y--;
		deg[x]++;
		deg[y]++;
		g[x].push_back(y);
		g[y].push_back(x);
	}
	if (deg[0] < D) {
		cout << "NO\n";
		return 0;
	}
	vector<vector<int>> comps;
	vector<bool> usd(n, false);
	queue<int> q;
	for (int i = 1; i < n; i++) {
		if (!usd[i]) {
			usd[i] = true;
			comps.push_back({});
			q.push(i);
			while (!q.empty()) {
				int v = q.front();
				q.pop();
				comps.back().push_back(v);
				for (auto &u : g[v]) {
					if (!usd[u] && u != 0) {
						usd[u] = true;
						q.push(u);
					}
				}
			}
		}
	}
	vector<int> d;
	for (auto &comp : comps) {
		vector<int> dd;
		for (auto &v : comp) {
			for (auto &u : g[v]) {
				if (u == 0) {
					dd.push_back(v);
				}
			}
		}
		dd.pop_back();
		for (auto &v : dd) {
			d.push_back(v);
		}
	}
	if ((int)d.size() < deg[0] - D) {
		cout << "NO\n";
		return 0;
	}
	while ((int)d.size() > deg[0] - D) {
		d.pop_back();
	}
	vector<bool> kek(n, false);
	for (auto &v : d) {
		kek[v] = true;
	}
	vector<pair<int, int>> eds;
	fill(usd.begin(), usd.end(), false);
	usd[0] = true;
	for (auto &v : g[0]) {
		if (!kek[v]) {
			q.push(v);
			eds.push_back({0, v});
			usd[v] = true;
		}
	}
	while (!q.empty()) {
		int v = q.front();
		q.pop();
		for (auto &u : g[v]) {
			if (!usd[u]) {
				q.push(u);
				usd[u] = true;
				eds.push_back({v, u});
			}
		}
	}
	cout << "YES\n";
	for (auto &ed : eds) {
		cout << ed.first + 1 << " " << ed.second + 1 << '\n';
	}
	return 0;
}
