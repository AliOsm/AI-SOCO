#include <stdio.h> 
#include <cmath>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <stack>
#include <iostream>
#include <sstream>
#include <fstream>
#include <algorithm>

using namespace std;

int otkr[123456];
int otkrL[123456];
int otkrR[123456];
int zakr[123456];
int zakrL[123456];
int zakrR[123456];

pair<pair<int, int>, int> quests[123456];
int ans[123456];

int main() 
{ 
	int n, m;
	cin >> n >> m;
	vector<vector<int> > a(n, vector<int>(m));
	for (int i = 0; i < n; ++i)
		for(int j = 0; j < m; ++j)
			cin >> a[i][j];

	set<pair<int, int> > st;
	for(int j = 0; j < m; ++j)
	{
		int cur = 0;
		for (int i = 1; i < n; ++i)
		{
			if (a[i-1][j] > a[i][j])
			{
				st.insert(make_pair(cur, i-1));
				cur = i;
			}
		}
		st.insert(make_pair(cur, n-1));
	}
	set<pair<int, int> > st2;
	for (set<pair<int, int> >::iterator it = st.begin(); it != st.end(); ++it)
	{
		st2.insert(make_pair(it->first + 1, it->second + 1));
	}

	int q;
	cin >> q;
	for(int i = 0; i < q; ++i)
	{
		quests[i].second = i;
		int l, r;
		cin >> l >> r;
		quests[i].first.first = l;
		quests[i].first.second = r;
	}

	sort(quests, quests + q);
	set<pair<int, int> > curSt;
	int curMx = -1;
	set<pair<int, int> >::iterator t = st2.begin();
	for(int i = 0; i < q; ++i)
	{
		while(t != st2.end() && t->first <= quests[i].first.first)
		{
			curMx = max(curMx, t->second);
			++t;
		}
		if(curMx >= quests[i].first.second)
			ans[quests[i].second] = 1;
	}
	for(int i = 0; i < q; ++i)
		cout << (ans[i] ? "Yes\n" : "No\n");

}