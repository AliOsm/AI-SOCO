#include <bits/stdc++.h>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef unsigned int uint;
typedef long double ld;
//#define ll __int128
#define int ll
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
typedef vector<int> vi;
typedef vector< vi > vvi;
typedef vector< vvi > vvvi;
typedef vector<pii> vpi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vvl> vvvl;
typedef vector<ld> vld;
typedef vector<vld> vvld;

#define inmin(a, b) a = min(a, (b))
#define inmax(a, b) a = max(a, (b))
#define mp(a,b) make_pair(a,b)
#define modsum(a, b) ((a) + (b) >= M ? (a) + (b) - M : (a) + (b))
#define modsubtract(a, b) ((a) - (b) < 0 ? (a) - (b) + M : (a) - (b))
#define modmultiply(a, b) (((a) * (b)) % M)
#define ALL(a) a.begin(),a.end()
#define RALL(a) a.rbegin(),a.rend()
#define sqr(x) ((x) * (x))
#define fori(i, n) for(int i = 0; i < int(n); ++i)
#define cint const int &
#define SZ(a) ((int)(a.size()))
#define watch(x) cout << (#x) << " = " << x << endl;

const double PI = atan2(1, 0) * 2;

const string DIGITS = "0123456789";
const string ALPH = "abcdefghijklmnopqrstuvwxyz";


template<class T>
ostream & operator << (ostream &out, vector<T> &a) {
    out << "{";
    for (auto x : a) out << x << " ";
    return out << "}";
}

void smain();

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);


#ifdef ART_HOME
    freopen("input.txt", "r", stdin);
    clock_t start = clock();
#endif
    cout << setprecision(12) << fixed;
    smain();
#ifdef ART_HOME
    cout << "\n\n\n";
    cout << "TOTAL EXECUTION TIME: " << float(clock() - start) / CLOCKS_PER_SEC << endl;
#endif
}


const int M = 1e9 + 7;


inline int MOD(int v)
{
    return v % M;
}


int bin_pow(int v, int pw)
{
    int res = 1;
    while (pw)
    {
        if (pw & 1)
            res = MOD(res * v);

        v = MOD(v * v);
        pw >>= 1;
    }

    return res;
}


const int N = 50;
int dp[2][N];

int solution(int p, int cnt, int k)
{
    for (int i = 0; i < N; ++i)
        dp[0][i] = dp[1][i] = 0;

    int cur = 0;
    dp[cur][cnt] = 1;

    for (int i = 0; i < k; ++i)
    {
        int vl = 0;

        for (int j = cnt; j >= 0; --j)
        {
            vl = MOD(vl + dp[cur][j] * bin_pow(j + 1, M - 2));
            dp[cur ^ 1][j] = MOD(dp[cur ^ 1][j] + vl);
        }

        for (int j = 0; j <= cnt; ++j)
            dp[cur][j] = 0;

        cur ^= 1;
    }

    int ans = 0;
    for (int i = 0; i <= cnt; ++i)
        ans = MOD(ans + dp[cur][i] * bin_pow(p, i));

    return ans;
}


void smain()
{
    int n, k;
    cin >> n >> k;

    int d = 2;
    int ans = 1;
    while (d * d <= n)
    {
        int v = 0;

        while (n % d == 0)
        {
            n /= d;
            v++;
        }

        if (v)
            ans = MOD(ans * solution(d, v, k));

        d++;
    }

    if (n > 1)
        ans = MOD(ans * solution(n, 1, k));

    cout << ans << '\n';
}