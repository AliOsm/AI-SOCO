//AUTHOR : TIRTH JARSANIA
//COLLEGE : DAIICT
//TOPIC : DFS WALK
//ADVISER : BHAUTIK 

#include<bits/stdc++.h>
using namespace std;

#define INF LONG_LONG_MAX
#define MINF LONG_LONG_MIN
#define pi acos(-1)
#define bp __builtin_popcount
#define ll long long int
#define ld long double
#define pii pair<ld,ld>
#define For(i,a,b) for(ll i=a;i<b;i++)
#define Fori(i,a,b,p) for(ll i=a;i<b;i+=p)
#define Ror(i,a,b) for(ll i=a;i>b;i--)
#define Rori(i,a,b,p) for(ll i=a;i>b;i-=p)

#define precision(x,d) cout<<fixed<<setprecision(d)<<x
#define minQueue priority_queue<ll,vector<ll>,greater<ll> > 
#define maxQueue priority_queue<ll> 

#define pb push_back
#define pf push_front
#define ff first
#define ss second
#define FILL(a,b) memset((a),(b),sizeof((a)))
#define FAST ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);srand(time(NULL))

#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
  
#define os tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 
#define ofk order_of_key
#define fbo find_by_order

const ll N = 2e5+5;

set<ll> g[N];
vector<bool> vis(N,0);
vector<bool> vis1(N,0);
vector<ll> a;
stack <ll> st;
vector<ll> sz(N);

void dfs(ll v,ll p)
{
        st.push(v);
        vis1[v] = 1;
        for(auto it : g[v])
        {
            if(!vis1[it])
            {
                dfs( it , v );
                st.push(v);
            }
        }
        
        if(sz[v] % 2 == 0)
        {
            if(p)
            {
                sz[p]--;
            }
            while(!st.empty())
            {
                ll up = st.top();
                st.pop();
                if(up == p)
                {
                    st.push(up);
                    break;
                }
                if(!vis[up])
                {
                    vis[up] = 1;
                    a.pb(up);
                }
            }
        }
}
int main()
{
    FAST;
    ll n;
    cin >> n;
    For(i ,1 , n+1 )
    {
        ll v;
        cin >> v;
        if(v)
        {
            g[v].insert(i);
            g[i].insert(v);
        }
    }
    For(i,1,n+1)
        sz[i] = g[i].size();
    dfs(1,0);
   //cout << a.size() << endl;
    if(a.size() == n)
    {
        cout << "YES\n";
        for(auto &it: a)
            cout << it<< endl;
    }
    else
        cout << "NO";
}