#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <vector>
#include <string>
#include <cstring>
#include <map>
#include <set>
#include <queue>
#include <unordered_set>


using namespace std;
const int N = 51;

int n, m;
char ch[N][N];
int used[N][N];
pair < int, int > parent[N][N];
int dx[4] = {0, 0, -1, 1};
int dy[4] = {1, -1, 0, 0};
bool flag = false;

void dfs(int y, int x, char c)
{
	used[y][x] = 1;
	for (int k = 0; k < 4; ++k)
	{
		if (y + dy[k] < 0 || y + dy[k] >= n || x + dx[k] < 0 || x + dx[k] >= m)
			continue;
		if (used[y + dy[k]][x + dx[k]] == 1 && c == ch[y + dy[k]][x + dx[k]] && make_pair(y + dy[k], x + dx[k]) != parent[y][x])
			flag = true;
		if (used[y + dy[k]][x + dx[k]] == 0 && c == ch[y + dy[k]][x + dx[k]])
		{
			parent[y + dy[k]][x + dx[k]] = make_pair(y, x);
			dfs(y + dy[k], x + dx[k], c);
		}
	}
	used[y][x] = 2;
}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	scanf("%d%d\n", &n, &m);
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < m; ++j)
			scanf("%c", &ch[i][j]);
		scanf("\n");
	}

	memset(used, 0, sizeof(used));

	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < m; ++j)
		{
			if (used[i][j] == 0)
			{
				dfs(i, j, ch[i][j]);
			}
		}
	}
	if (flag == true)
		cout << "Yes" << endl;
	else
		cout << "No" << endl;


	return 0;
}