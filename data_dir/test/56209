#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cassert>
#include <complex>

using namespace std;
void file(){
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
}
int dx[8]={1,-1,0,0,1,-1,1,-1};
int dy[8]={0,0,-1,1,1,-1,-1,1};
int cost[2][1000],n,m,x,y,memo[1000][1000][2];
int solve(int idx,int len,int col){
    if(idx==m){
        if(len<x||len>y){
            return 1e9;
        }
        return 0;
    }
    if(memo[idx][len][col]!=-1){return memo[idx][len][col];}
    int ans=1e9;
    // change
    if(len>=x){
        ans=min(ans,solve(idx+1,1,col^1)+cost[col^1][idx]);
    }
    // append
    if(len<y){
        ans=min(ans,solve(idx+1,len+1,col)+cost[col][idx]);
    }
    return memo[idx][len][col]=ans;}
int main(){
    memset(memo,-1,sizeof(memo));
    scanf("%d%d%d%d",&n,&m,&x,&y);
    char c;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            scanf(" %c",&c);
            cost[(c=='#')^1][j]++;
        }
    }
    cout<<min(solve(1,1,1)+cost[1][0],solve(1,1,0)+cost[0][0])<<endl;
    return 0;
}