 	#include <bits/stdc++.h>

#define fore(i, l, r) for(int i = int(l); i < int(r); i++)
#define forn(i, n) fore(i, 0, n)
#define nfor(i, n) fore(int i = int(n) - 1; i >= 0; --i)
#define for1(i, n) for(int i = 1; i < int(n); ++i)

#define mp make_pair
#define pb push_back
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define x first
#define y second
#define correct(x, y, xmax, ymax) ((x) >= 0 && (x) < (xmax) && (y) >= 0 && (y) < (ymax))

using namespace std;
    
template<typename T> inline T abs(T a){ return ((a < 0) ? -a : a); }
template<typename T> inline T sqr(T a){ return a * a; }
template<class T> T gcd(T a, T b) { return a ? gcd (b % a, a) : b; }
template<class T> T lcm(T a, T b) { return a / gcd (a, b) * b; }
template<class T> T sign(T a) { return a > 0 ? 1 : (a < 0 ? -1 : 0); }

template<class A, class B> ostream& operator <<(ostream &out, const pair<A, B> &p) {
    return out << "(" << p.x << ", " << p.y << ")";
};

template<class A> ostream& operator <<(ostream &out, const vector<A> &v) {
    out << "[";
    forn(i, sz(v)) {
        if(i)
            out << ", ";
        out << v[i];
    }
    return out << "]";
}

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
typedef vector <int> vi;
const int dx[] = {-1, 0, 1,  0};
const int dy[] = { 0, 1, 0, -1};
const int dxK[] = {-1, -1, 0, 1, 1,  1,  0, -1};
const int dyK[] = { 0,  1, 1, 1, 0, -1, -1, -1};
const int dxKn[] = {-2, -1, 1, 2,  2,  1, -1, -2};
const int dyKn[] = { 1,  2, 2, 1, -1, -2, -2, -1};

const int INF = int(1e9) + 100;
const li INF64 = int(1e18) + 100;
const ld EPS = 1e-9;
const ld PI = acosl(-1.0);
const int N = 300 * 1000 + 9;

int n, m;
set <int> bad[N];
set <int> bad2[N];
int a[N];
int cnt[N];

inline bool read() {
    if(!(cin >> n >> m))
        return false;
	
    return true;
}

void add(int i, int j){
	//cout << i << ' ' << x << endl;
	int i1 = i / m, j1 = i % m;
	int i2 = j / m, j2 = j % m;
	if(abs(i1 - i2) + abs(j1 - j2) != 1)
		return;
	if(j >= 0 && j < n * m){
		//cout << i << ' ' << j << endl;
		bad[i].insert(j);
	}
	
	
}

bool ok(vector <int> v){
	forn(i, n * m){
		int x;
		x = i + 1;
		if(x >= 0 && x < n * m)
			if(bad[v[i]].count(v[x]))
				return false;
		
		x = i - 1;
		if(x >= 0 && x < n * m)
			if(bad[v[i]].count(v[x]))
				return false;
		
		x = i + m;
		if(x >= 0 && x < n * m)
			if(bad[v[i]].count(v[x]))
				return false;
				
		x = i - m;
		if(x >= 0 && x < n * m)
			if(bad[v[i]].count(v[x]))
				return false;
	}
	
	return true;
}

inline void solve() {

	
	forn(i, n * m){
		int x = i;
		add(i, x - 1);
		add(i, x + 1);
		add(i, x - m);
		add(i, x + m);
		
		if(i == 1){
		
		}
	}
	
	if(n * m < 10){//puts("b");
		
		vector <int> v;
		forn(i, n * m)
			v.pb(i);
		
		do{
			if(ok(v)){
				puts("YES");
				forn(i, n){
					forn(j, m)	
						cout << v[i * m + j] + 1 <<  ' ';
					cout << endl;
				}
				return;
			}
		}while(next_permutation(all(v)));
		
		puts("NO");
		return;
	}
	
	vector <int> b, w;
	forn(i, n) forn(j, m)
		if((i + j) & 1)
			w.pb(i * m + j);
		else
			b.pb(i * m + j);
	
	memset(a, -1, sizeof a);
	forn(i, sz(b))	
		a[i] = b[i];
	//forn(i, sz(w))
	//	a[i + sz(b)] = w[i];
			
	forn(i, n * m){
		if(i < sz(b))
			continue;
		
		int x;
		x = i + 1;
		if(x >= 0 && x < n * m  && x < sz(b)){
			for(set <int> :: iterator it = bad[a[x]].begin(); it != bad[a[x]].end(); ++it){
				bad2[i].insert(*it);	
				++cnt[*it];
			}
		}
		
		x = i - 1;
		if(x >= 0 && x < n * m  && x < sz(b)){
			for(set <int> :: iterator it = bad[a[x]].begin(); it != bad[a[x]].end(); ++it){
				bad2[i].insert(*it);	
				++cnt[*it];
			}
			
		}
		
		x = i + m;
		if(x >= 0 && x < n * m  && x < sz(b)){
		for(set <int> :: iterator it = bad[a[x]].begin(); it != bad[a[x]].end(); ++it){
				bad2[i].insert(*it);	
				++cnt[*it];
			}	
		}
		
		x = i - m;
		if(x >= 0 && x < n * m  && x < sz(b)){
			for(set <int> :: iterator it = bad[a[x]].begin(); it != bad[a[x]].end(); ++it){
				bad2[i].insert(*it);	
				++cnt[*it];
			}
		}
	}
	set <pt> q;
	//cout << sz(b)  << endl;
	forn(i, n * m){
		int ii = i / m, jj = i % m;
		if((ii + jj) & 1){
			q.insert(mp(-cnt[i], i));
		//	cout << cnt[i] << ' ' << i << endl;
			//cout << a[i] << endl;
		}
	}//return;
	
	for(int i = sz(b); i < n * m; ++i){
		//cout << sz(q) << endl;return;
		set<pt > :: iterator it = q.begin();
		while(it != q.end() && bad2[i].count(it->y) > 0)
			++it;
		
		assert(it != q.end());
		int id = it->y;
		q.erase(it);
		a[i] = id;
	}
	//forn(i, n){
	//}
	vector <int> vv(n * m);
	forn(i, n * m)
		vv[i] = a[i];
	//assert(ok(vv));
	
	puts("YES");
	forn(i, n){
		forn(j, m)
			cout << a[i * m + j]  + 1 << ' ';
		cout << endl;
	}
}

int main() {
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    int tt = clock();
#endif
    cout << fixed << setprecision(15);
    cerr << fixed << setprecision(15);

    while(read()) {
        solve();

#ifdef _DEBUG
        cerr << "TIME = " << clock() - tt << endl;
        tt = clock();
#endif
    }

    return 0;
}