#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <set>
#include <string>
#include <cmath>
#include <algorithm>
#include <assert.h>
#include <memory.h>
#include <string.h>
#include <complex>
#include <queue>

using namespace std;

#pragma comment(linker, "/STACK:100000000")

#define ll long long
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x).size()
#define fr(i,a,b) for(int i = (a);i <= (b);i++)
#define fd(i,a,b) for(int i = (a);i >= (b);i--)

int ri(){int x;scanf("%d",&x);return x;}

int matrix[1010][1010];
int dx[4] = {0, 1, 0, -1};
int dy[4] = {1, 0, -1, 0};


vector<pair<int, pair<int, int> > > e;
int cid[1010][1010];
vector<pair<int, int> > comp[1000100];
bool act[1010][1010];

void clearvector(vector<pair<int, int> > &a) {
	vector<pair<int, int> > b;
	swap(a, b);
}

ll w[1000100];
int n, m;
ll k;
ll curval = 0;

void un(int a, int b) {
	if(sz(comp[a]) < sz(comp[b])) {
		for(int i = 0; i < sz(comp[a]); i++) {
			comp[b].pb(comp[a][i]);
			cid[comp[a][i].first][comp[a][i].second] = b;
		}
		clearvector(comp[a]);
	}
	else {
		for(int i = 0; i < sz(comp[b]); i++) {
			comp[a].pb(comp[b][i]);
			cid[comp[b][i].first][comp[b][i].second] = a;
		}
		clearvector(comp[b]);
	}
}

void add(int x, int y) {
	curval = matrix[x][y];
	act[x][y] = true;
	for(int ww = 0; ww < 4; ww++) {
		int nx = x + dx[ww];
		int ny = y + dy[ww];
		if(nx < 1 || nx > n || ny < 1 || ny > m) continue;
		if(act[nx][ny] && cid[nx][ny] != cid[x][y]) un(cid[x][y], cid[nx][ny]);
	}
	w[cid[x][y]] = sz(comp[cid[x][y]]) * curval;
}

void go(int x, int y, int val, int &cnt) {
	if(cnt == 0) return;
	matrix[x][y] = val;
	int ccc = cid[x][y];
	cid[x][y] = -1;
	cnt--;
	if(cnt == 0) return;
	for(int ww = 0; ww < 4; ww++) {
		int nx = x + dx[ww];
		int ny = y + dy[ww];
		if(nx < 1 || nx > n || ny < 1 || ny > m) continue;
		int nxt = cid[nx][ny];
		if(nxt == ccc) go(nx, ny, val, cnt);
	}
}

void answer(int a, int x, int y) {
	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= m; j++)
			matrix[i][j] = 0;
	int ost = k / curval;
	go(x, y, curval, ost);

	cout << "YES" << endl;
	for(int i = 1; i <= n; i++) {
		for(int j = 1; j <= m; j++) {
			printf("%d ", matrix[i][j]);
		}
		printf("\n");
	}
}


int main()
{
	//freopen("input.txt", "rt", stdin);
	//freopen("output.txt", "wt", stdout);

	scanf("%d %d %lld", &n, &m, &k);

	int cnt = 0;
	for(int i = 1; i <= n; i++) {
		for(int j = 1; j <= m; j++) {
			scanf("%d", &matrix[i][j]);
			e.pb(mp(matrix[i][j], mp(i, j)));
			cid[i][j] = ++cnt;
			comp[cnt].pb(mp(i, j));
		}
	}
	sort(e.rbegin(), e.rend());

	for(int i = 0; i < sz(e); i++) {
		add(e[i].second.first, e[i].second.second);
		int x = cid[e[i].second.first][e[i].second.second];
		if(w[x] >= k && k % curval == 0) {
			answer(x, e[i].second.first, e[i].second.second);
			return 0;
		}
	}
	cout << "NO" << endl;



	return 0;
}
