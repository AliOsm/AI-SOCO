#include <iostream>
#include <cmath>
#include <string>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <fstream>
#include <cassert>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <stack>
#include <functional>
#include <numeric>
#include <ctime>
#include <cstdlib>
#include <sstream>

using namespace std;

#define f first
#define s second
#define mp make_pair
#define pb push_back
#define pii pair<int, int>
#define pll pair<long long, long long>
#define y1 stupid_y1
#define ll long long
#define vi vector<int>
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x)*(x))
#define sz(a) (int)a.size()
#define mypair pair < pii, pii >
#define file "a"

const int inf = (int)1e9;
const int maxn = (int)1e5+11;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int mod = (int)1e9 + 7;

int cnt2[2], cnt3[2];
int ans2[2], ans3[2];

void doIt(ll &s, int id){
    while (s%3 == 0){
        cnt3[id]++;
        s/=3;
    }
    while (s%2 == 0){
        cnt2[id]++;
        s/=2;
    }
}

void dividing(ll &a, ll &b, int id){
    int two = ans2[id];
    int three = ans3[id];
    for (int i=0;i<three;i++){
        if ( a%3 == 0 ) (a/=3)*=2;
        else if ( b%3 == 0 ) (b/=3)*=2;
    }
    for (int i=0;i<two;i++){
        if ( a%2 == 0 ) a/=2;
        else if ( b%2 == 0) b/=2;
    }
}

int main () {

    #ifdef LOCAL
    freopen(file".in", "r", stdin);
    freopen(file".out", "w", stdout);
    #endif

    ll a, b, c, d;
    cin >>a>>b>>c>>d;

    ll sa = a*b;
    ll sb = c*d;

    doIt(sa, 0);
    doIt(sb, 1);

    if ( sa != sb ){
        cout <<-1<<endl;
        return 0;
    }

    int mini3 = max(cnt3[0], cnt3[1]) - min(cnt3[0], cnt3[1]);

    if ( cnt3[0] > cnt3[1] ){
        cnt2[0] += mini3;  
        ans3[0] = mini3;        
    }
    else {
        cnt2[1] += mini3;
        ans3[1] = mini3;
    }

    int mini2 = max(cnt2[0], cnt2[1]) - min(cnt2[0], cnt2[1]);



    int total = mini2 + mini3;
    cout <<total<<endl;

    if ( cnt2[0] > cnt2[1] ){
        ans2[0] += mini2;
    }
    else {
        ans2[1] += mini2;
    }

    dividing(a,b,0);
    dividing(c,d,1);

    cout <<a<<" "<<b<<endl;
    cout <<c<<" "<<d<<endl;



    #ifdef LOCAL
    cerr << (double)clock() * 1.0 / CLOCKS_PER_SEC << endl;
    #endif

    return 0;
}


