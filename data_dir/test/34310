#include <bits/stdc++.h>
using namespace std;
using K = long double;
using ll = long long;

#define REP(i, n) for (int i = 0; i < (n); ++i)
#define SIZE(a) ((int)(a).size())

const int maxn = 1000000 + 5, sigma = 26;
 
int s[maxn], len[maxn], link[maxn], to[maxn][sigma], diff[maxn], slink[maxn];
 
int n, last, sz;
 
void init()
{
    s[n++] = -1;
    link[0] = 1;
    len[1] = -1;
    sz = 2;
}
 
int get_link(int v)
{
    while(s[n - len[v] - 2] != s[n - 1]) v = link[v];
    return v;
}
 
void add_letter(int c)
{
    s[n++] = c;
    last = get_link(last);
    if(!to[last][c])
    {
        len [sz] = len[last] + 2;
        link[sz] = to[get_link(link[last])][c];
        diff[sz] = len[sz] - len[link[sz]];
        if (diff[sz] == diff[link[sz]]) {
        	slink[sz] = slink[link[sz]];
        } else {
        	slink[sz] = link[sz];
        }
        to[last][c] = sz++;
    }
    last = to[last][c];
}

const int inf = 1000*1000*1000 + 7;

char fst[maxn], snd[maxn], a[maxn];
int f[maxn], prv[maxn];
pair<int,int> memo[maxn];

pair<int,int> go(int v) {
	int n = ::n - 1;
	memo[v].first = f[n - len[slink[v]] - diff[v]];
	memo[v].second = n - len[slink[v]] - diff[v];
	if (diff[v] == diff[link[v]]) {
		if (memo[link[v]].first < memo[v].first)
			memo[v] = memo[link[v]];
	}
	return memo[v];
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);

	cin >> fst >> snd;
	int n = 1;
	for (int i = 0; fst[i]; ++i) {
		a[n++] = fst[i];
		a[n++] = snd[i];
	}

	init();

	for (int i = 1; i < n; ++i) {
		f[i] = inf;
		add_letter(a[i]);
		if (i % 2 == 0 && a[i] == a[i - 1]) f[i] = f[i - 2], prv[i] = i - 2;
		for (int now = last; len[now] > 0; now = slink[now]) {
			auto rs = go(now);
			if (i % 2 == 0 && f[i] > rs.first + 1) {
				f[i] = rs.first + 1;
				prv[i] = rs.second;
			}
		}
	}

	if (f[n-1] == inf) {
		cout << -1 << '\n';
		return 0;
	}

	cout << f[n-1] << '\n';
	int where = n-1;
	vector<pair<int,int>> out;
	while (where > 0) {
		int p = prv[where];
		if (where-p > 2) {
			cout << (p+1)/2+1 << ' ' << where/2 << '\n';
		}
		where = p;
	}

	return 0;
}