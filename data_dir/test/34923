#include <bits/stdc++.h>
using namespace std;

#define int           long long
#define S             second
#define F             first
#define pb            push_back
#define all(c)        (c).begin(),(c).end()
#define rall(c)       (c).rbegin(),(c).rend() 
#define lb            lower_bound
#define si(c)         (int)((c).size())
#define lcm(a, b)      (a * (b / __gcd(a,b)))  
#define inf           (long long )(1e18+1)
#define endl          '\n'
#define mp            make_pair
#define time(s)       (double(clock()-s)/double(CLOCKS_PER_SEC))
#define debug(args...)    _F(#args, args)
#define vi            std::vector<int>
#define pii           pair<int, int> 
#define vpi           vector<pii>

clock_t start;
mt19937_64 rng(chrono::system_clock::now().time_since_epoch().count());

template<typename T> void _F(const char *name, T arg1){
    cerr << name << " = " << arg1 << endl;
}
template<typename T, typename... Args> void _F(const char *names, T arg1, Args... args){
    const char *name = strchr(names, ',');
    cerr.write(names, name-names) << " = " << arg1 << endl;
    _F(name+2, args...);
}
template<typename T1, typename T2> istream& operator>>(istream& in, pair<T1, T2> &q){
    in >> q.F >> q.S; return in;
}
template<typename T1, typename T2> ostream& operator<<(ostream& out, pair<T1, T2> &q){
    out << q.F << " " << q.S; return out;
}
template< typename T1, typename T2> pair<T1, T2> operator+(pair<T1, T2> p1, pair<T1, T2> p2){
    return {p1.F+p2.F, p1.S+p2.S};
}
template< typename T1, typename T2> pair<T1, T2> operator-(pair<T1, T2> p1, pair<T1, T2> p2){
    return {p1.F-p2.F, p1.S-p2.S};
}

const int N = 2e5+1;

struct RangeSeg{
    int seg[4*N], lazy[4*N];
    
    void push(int v, int s, int e){
        if(s != e){lazy[2*v] += lazy[v], lazy[2*v+1] += lazy[v];}
        seg[v] += lazy[v], lazy[v] = 0;
    }

    void upd(int s, int e, int v, int l, int r, int x){
        if(lazy[v])push(v, s, e);
        if(r < l || s > e || r < s || l > e) return;
        if(l <= s && r >= e){lazy[v] += x, push(v, s, e); return;}
        int m = (s+e)>>1;
        upd(s, m, 2*v, l, r, x);
        upd(m+1, e, 2*v+1, l, r, x);
        seg[v] = max(seg[2*v], seg[2*v+1]);
    }

    int query(int s, int e, int v, int l, int r){
        if(lazy[v])push(v, s, e);
        if(r < l || s > e || r < s || l > e)return 0;
        if(l <= s && r >= e) return seg[v];
        int m = (s+e)>>1;
        int ll = query(s, m, 2*v, l, r);
        int rr = query(m+1, e, 2*v+1, l, r);
        return max(ll, rr);
    }
}st1, st2;

void solve(){
    int n;
    cin >> n;
    int p[n], l[n];
    for(int i = 0; i < n; i++){
        cin >> p[i] >> l[i];
    }
    int nx[n][20];
    int cost[n][20];
    for (int i = 0; i < n; i++) {
        nx[i][0] = (int)(upper_bound(p, p+n, p[i]+l[i])-p);
        nx[i][0]--;
    }
    st1.upd(0, n-1, 1, n-1, n-1, nx[n-1][0]);
    st2.upd(0, n-1, 1, n-1, n-1, p[n-1]+l[n-1]);
    cost[n-1][0] = 0;
    for(int i = n-2; i >= 0; i--){
        nx[i][0] = max(nx[i][0], st1.query(0, n-1, 1, i+1, nx[i][0]));
        st1.upd(0, n-1, 1, i, i, nx[i][0]);
        st2.upd(0, n-1, 1, i, i, p[i]+l[i]);
        if(nx[i][0] < n-1){
            cost[i][0] = p[nx[i][0]+1]-st2.query(0, n-1, 1, i, nx[i][0]);
        }
        else cost[i][0] = 0;
    }
    for(int i = 1; i < 20; i++){
        for(int j = 0; j < n; j++){
            if(nx[j][i-1] < n-1){
                nx[j][i] = nx[nx[j][i-1]+1][i-1];
                cost[j][i] = cost[j][i-1]+cost[nx[j][i-1]+1][i-1];
            }else{
                nx[j][i] = n-1;
                cost[j][i] = cost[j][i-1];
            }
            //cout << nx[j][i] << " ";
        }//cout << endl;
    }
    int q;
    cin >> q;
    while(q--){
        int l, r, ans = 0;
        cin >> l >> r;
        l--, r--;
       // cout << "move" << endl;
        for(int i = 19; i >= 0; i--){
            if(nx[l][i] < r){
                //cout << nx[l][i] << " " << r << " " << cost[l][i] << " " << i << endl;
                ans += cost[l][i];
                l = nx[l][i]+1;
            }
        }
        cout << ans << endl;
    }
}

signed main(){

    ios_base::sync_with_stdio(0); 
    cin.tie(0); cout.tie(0);   

    int t = 1;
    start = clock(); 

    cout << fixed << setprecision(12);

    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
    freopen("error.txt", "w", stderr);
    #endif

    //cin >> t;

    for(int i = 1; i <= t; ++i){
        //cout << "Case #" << i << ": "; 
        solve();
        //cout << endl;
    }
    //cerr << time(start);
    return 0;
}