#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 200000 + 10;
const int M = 1000000007;
const double eps = 1e-9;
const double PI = acos(-1);
const int oo = 1000000000;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> ii;
#define pb push_back 
#define all(c) (c).begin(),(c).end()
int n,v[N];
vi g,idx;

void add(int x, int u){
	if(!x)return;
	for(int i=0,j=17,k=17; i<g.size(); ++i,--j){
		while(!(g[i]&(1<<j)))
			--j;
		while(!(x&(1<<k)))
			--k;
		if(k>j){
			g.insert(g.begin()+i,x);
			idx.insert(idx.begin()+i,u);
			return;
		}else if(k==j){
			x^=g[i];
			if(!x)return;
		}
	}
	g.push_back(x);
	idx.push_back(u);
}

int main(){
	cin>>n;
	int OR=0;
	for(int i=0; i<n; ++i){
		scanf("%d",&v[i]);
		OR|=v[i];
	}
	int best=0;
	for(int x=1; (1<<x)-1<=OR; ++x){
		for(int i=0; i<n; ++i)
			if(v[i]<(1<<x))
				add(v[i],i);
		if(g.size()==x)
			best=x;
		g.clear();
		idx.clear();
	}
	for(int i=0; i<n; ++i)
		if(v[i]<(1<<best))
			add(v[i],i);
	cout<<best<<endl;
	cout<<0;
	for(int i=1; i<(1<<best); ++i){
		int gray=i^(i>>1), cur=0;
		for(int j=g.size()-best; j<g.size(); ++j)
			if(gray&(1<<(j-(int)g.size()+best)))
				cur^=v[idx[j]];
		printf(" %d", cur);
	}
	puts("");
	return 0;	
}