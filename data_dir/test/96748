#include <bits/stdc++.h>
using namespace std;

const int Mod = 1000000007;

int fac[110010], inv[110010];

int dp[2][100010], a[100010], l[100010], r[100010], v[100010];

int exp(int a, int b, int c) {
    int ans = 1, num = a;
    while (b) {
        if (b & 1) ans = (long long)ans * num % c;
        num = (long long)num * num % c;
        b = b / 2;
    }
    return ans;
}

int C(int n, int m) {
    if (n < 0 || m < 0) return 0;
    if (n < m) return 0;
    int ans = fac[n];
    ans = (long long)ans * inv[m] % Mod;
    ans = (long long)ans * inv[n - m] % Mod;
    return ans;
}

int main() {
    fac[0] = 1;
    inv[0] = 1;
    for (int i = 1; i <= 110000; i++) {
        fac[i] = ((long long)fac[i - 1] * i) % Mod;
        inv[i] = exp(fac[i], Mod - 2, Mod);
    }
    int n, m;
    scanf("%d%d", &n, &m);
    for (int i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }
    for (int i = 0; i < m; i++) {
        scanf("%d%d%d", &l[i], &r[i], &v[i]);
        l[i]--;
        r[i]--;
    }
    for (int i = 0; i < n; i++) {
        dp[0][i] = 0;
    }
    int now = 0;
    for (int i = 101; i > 0; i--) {
        now = 1 - now;
        for (int j = 0; j < n; j++) {
            dp[now][j] = dp[1 - now][j];
        }
        for (int j = 0; j < m ; j++) {
            if (v[j] -  (i - 1) == 0) {
                dp[now][l[j]] += 1;
            }
            if (r[j] + 1 < n) {
                int p = r[j] - l[j];
                int pv = v[j] - (i - 1);
                dp[now][r[j] + 1] -= C(pv + p, pv);
                dp[now][r[j] + 1] %= Mod;
            }
        }
        for (int j = 1; j < n; j++) {
            dp[now][j] += dp[now][j - 1];
            dp[now][j] %= Mod;
        }
        for (int j = 0; j < n; j++) {
            dp[now][j] = (dp[now][j] % Mod + Mod) % Mod;
        }
    }
    for (int i = 0; i < n; i++) {
        printf("%d ", ((dp[now][i] + a[i]) % Mod + Mod) % Mod);
    }
    puts("");
    return 0;
}