#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE

#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <cmath>
#include <sstream>
#include <utility>
#include <ctime>
#include <memory.h>
#include <cctype>
#include <cstdlib>

using namespace std;

#pragma comment (linker, "/STACK:64000000")

#define y0 qwe
#define y1 asd
#define sz size()
#define pb push_back
#define fors(w,s) for(map <int, int> :: iterator w = s.begin(); w != s.end(); w++)
#define pii pair<int, int>
#define pll pair<ll, ll>
#define ull unsigned long long
#define vi vector <int>
#define vvi vector <vi>
#define inf 2000000000
#define mod 1000000007
#define ll long long
#define maxint 2139062143 //2147483647
#define maxll 9223372036854775807
#define fi first
#define se second
#define eps 1e-9
#define doubleinf 1000000000000000.0

struct treap
{
    int x, y, l, r, num, cnt;
};

int m, t, y, l, g, q, n, q1, q2, p1, p2, cnt, k, j, i, h, der, pos[1000001], num[1000001], dd[1000001];
treap d[1000001];
bool a[1000001];

inline void update(int q)
{
    d[q].cnt = d[d[q].l].cnt + 1 + d[d[q].r].cnt;
}

int merge (int q1, int q2)
{
    if (!q1 || !q2)
    {
        return (max(q1, q2));
    }
    if (d[q1].y < d[q2].y)
    {
        d[q1].r = merge(d[q1].r, q2);
        update(q1);
        return q1;
    }
    else
    {
        d[q2].l = merge(q1, d[q2].l);
        update (q2);
        return q2;
    }
}

pii split (int q, int num)
{
    if (!q)
    {
        return pii(0, 0);
    }
    pii p0;
    if (num <= d[d[q].l].cnt)
    {
        p0 = split(d[q].l, num);
        d[q].l = p0.second;
        p0.second = q;
        update(q);
    }
    else
    {
        p0 = split(d[q].r, num - d[d[q].l].cnt - 1);
        d[q].r = p0.first;
        p0.first = q;
        update(q);
    }
    return p0;
}

int get (int q, int num)
{
    if (num <= d[d[q].l].cnt)
    {
        return get(d[q].l, num);
    }
    else
    {
        if (num > d[d[q].l].cnt + 1)
        {
            return get(d[q].r, num - d[d[q].l].cnt - 1);
        }
        else
        {
            return d[q].x;
        }
    }
}

inline void swap (int num, int val)
{
    pii p0 = split(der, 1);
    d[p0.first].x = val;
    pii p1 = split(p0.second, num - 1);
    der = merge(merge(p1.first, p0.first), p1.second);
}

inline void solve()
{
    srand(1337);
    scanf ("%d%d", &n, &m);
    for (j = 1; j <= n; j++)
    {
        d[j].y = rand();
        d[j].num = j;
        d[j].cnt = 1;
        der = merge(der, j);
    }
    for (j = 1; j <= m; j++)
    {
        scanf ("%d%d", &num[j], &pos[j]);
    }
    for (j = m; j; j--)
    {
        q = get(der, 1);
        if ((q && q != num[j]) || (a[num[j]] && q != num[j]))
        {
            printf ("-1\n");
            return;
        }
        a[num[j]] = 1;
        swap (pos[j], num[j]);
    }
    for (j = 1; j <= n; j++)
    {
        dd[a[j]] = j;
    }
    q1 = 1;
    for (j = 1; j <= n; j++)
    {
        q = get(der, j);
        if (!q)
        {
            while (a[q1])
            {
                q1++;
            }
            q = q1;
            a[q1] = 1;
        }
        printf ("%d ", q);
    }
}

inline void init()
{
    
}

inline void answer()
{
    
}

int main()
{
    //freopen ("input.txt","r",stdin); freopen ("output.txt","w",stdout);
    //freopen ("olympiad.in","r",stdin); freopen ("olympiad.out","w",stdout);
    init();
    solve();
    answer();
    return 0;
}