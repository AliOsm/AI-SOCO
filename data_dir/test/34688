#pragma GCC optimize("O3")
#include <bits/stdc++.h>

using namespace std;
using namespace __gnu_cxx;


#define f first
#define s second
#define sz(x) (int)(x).size()
#define em empty()
#define pb push_back
#define eb emplace_back
#define pf push_front
#define mem(a,b,s) for(int i=0 ; i<=s ; ++i) a[i]=b;
#define mem2(a,r,c,b) for(int i=0 ; i<=r ; ++i)    for(int j=0 ; j<=c ; ++j)    a[i][j]=b;
#define all(a) a.begin(),a.end()
#define rall(a)	a.rbegin(),a.rend()
#define mp make_pair
#define in insert
#define sc(x) scanf("%d",&(x))
#define scl(a)	scanf("%lld",&a)
#define sc2(a,b)	scanf("%d%d",&a,&b)
#define rep(x,a,b)	for(auto x=a ; x<=b ; ++x)
#define irep(x,a,b)	for(auto x=a ; x>=b ; --x)
#define X real()
#define Y imag()
#define vec(a,b) ((b)-(a))
#define polar(r,t) ((r)*exp(point(0,(t))))
#define angle(v) (atan2((v).Y,(v).X))
#define length(v) ((long double)hypot((v).Y,(v).X))
#define lengthSqr(v) (dot(v,v))
#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define rotate(v,t) (polar(v,t))
#define rotateabout(v,t,a)  (rotate(vec(a,v),t)+(a))
#define reflect(p,m) ((conj((p)/(m)))*(m))
#define normalize(p) ((p)/length(p))
#define same(a,b) (lengthSqr(vec(a,b))<EPS)
#define mid(a,b) (((a)+(b))/point(2,0))
#define perp(a) (point(-(a).Y,(a).X))
#define colliner pointOnLine
#define debug(x)	cerr << #x << " is " << x << endl;

typedef unsigned long long ull;
typedef long long ll;
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<pair<int,int> > vii;
typedef set<int> si;
typedef set<pair<int,int> > sii;
typedef map<int,int>	mii;
typedef pair<int,char>	ic;
typedef pair<int,string> is;
typedef long double ld;
typedef priority_queue<ii> pqii;
typedef priority_queue<int>pqi;
typedef complex<long double> point;
typedef string BIGINT;
typedef vector<point> polygon;

const long double pi=acos(-1);
const long double EPS = 1e-9;
const int MAXN=1e5+10;
const ll MOD=1e9+7;
const int oo=2e9+10;
const ll OO=1e18;

int dx[]={0,1,0,-1,-1,-1,1,1};
int dy[]={1,0,-1,0,-1,1,-1,1};

int n,m,x,y,ch[MAXN],root,pr[MAXN];
int *ds,orgdist[MAXN],dist[MAXN];
vi ver[MAXN],detree[MAXN];
bool dead[MAXN];
int tot,ans[MAXN],dp[20][MAXN];

void dfs0(int no=1, int par=0,int dst=0)
{
	dp[0][no]=par,orgdist[no]=dst;
	rep(i,1,18)	dp[i][no]=dp[i-1][dp[i-1][no]];
	for(auto& e:ver[no])	if(e!=par)	dfs0(e,no,dst+1);
}

int LCA(int u, int v)
{
	if(orgdist[u]>orgdist[v])	swap(u,v);
	int d=orgdist[v]-orgdist[u];
	int i=0;
	while(d)
	{
		if(d&1)	v=dp[i][v];
		++i,d>>=1;
	}
	if(u==v)	return u;
	irep(i,18,0)
		if(dp[i][u]!=dp[i][v])	u=dp[i][u],v=dp[i][v];
	return dp[0][u];
}


int dfs(int no, int par=0, int dst=0)
{
	dist[no]=dst,ch[no]=1,++tot;
	for(auto& e:ver[no])	if(e!=par && !dead[e])	ch[no]+=dfs(e,no,dst+1);
	return ch[no];
}

int getCentroid(int no, int par=0)
{
	int hv=no,mx=-1;
	for(auto& e:ver[no])	if(e!=par && !dead[e] && ch[e]>mx)	mx=ch[e],hv=e;
	if((mx<<1)<=tot)	return no;
	return getCentroid(hv,no);
}

int decompose(int no=1, int par=0)
{
	tot=0,dfs(no);
	no=getCentroid(no);
	pr[no]=par;
	if(!root)	root=no;
	dead[no]=1;
	for(auto& e:ver[no])	if(!dead[e])	detree[no].pb(decompose(e,no));
	return no;
}

int distance(int u, int v)
{	return orgdist[u]+orgdist[v]-2*orgdist[LCA(u,v)];	}

void Update(int no, int rd)
{
	while(no)
		ans[no]=min(ans[no],distance(rd,no)),no=pr[no];
}

int getAns(int no, int cur)
{
	int ret=oo;
	while(no)
		ret=min(ret,ans[no]+distance(no,cur)),no=pr[no];
	return ret;
}

int main()
{
//	srand(time(0));
//	ios_base::sync_with_stdio(false);
//	cin.tie(NULL);
//	cout.tie(NULL);
#ifndef ONLINE_JUDGE
 	freopen("In.txt","r",stdin);
//	freopen("Out.txt","w",stdout);
#else
//	freopen("stations.in","r",stdin);
//	freopen("output.txt","w",stdout);
#endif

 	scanf("%d%d",&n,&m);
 	rep(i,2,n)	scanf("%d%d",&x,&y),ver[x].pb(y),ver[y].pb(x);
 	dfs0();
 	decompose();
 	fill(ans,ans+n+1,oo);
 	Update(1,1);
 	while(m--)
 	{
 		scanf("%d%d",&x,&y);
 		if(x==1)	Update(y,y);
 		else printf("%d\n",getAns(y,y));
 	}

}
