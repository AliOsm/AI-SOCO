#include<bits/stdc++.h>

#define SZ(x) ((int(x.size())))

using namespace std;

const int maxn = 100*1000+10, mod = 1000000007, maxm = 400;
bool knap[maxn], flg, mark[maxm], bark[maxm];
int n, q, u, v, hoy;
long long b[maxm], ravesh[maxn], t;
vector <int> vec[maxm][2];

void amoo (int x)
{
    mark[x] = 1;
    if (!flg)
    {
        for (int i = 0; i < SZ(vec[x][1]); i++)
        {
            if (mark[vec[x][1][i]])
            {
                flg = 1;
                break;
            }
            amoo(vec[x][1][i]);
            b[x]+=b[vec[x][1][i]];
        }
        if (x != hoy)
        {
            t -= b[x];
            if (t < 0)
                flg = 1;
        }
    }
}

void dfs (int x)
{
    if (!flg)
    {
        if (SZ(vec[x][0]) == 0)
        {
            hoy = x;
            amoo(x);
        }
        else
        {
            bark[x] = 1;
            for (int i = 0; i < SZ(vec[x][0]); i++)
            {
                if (bark[vec[x][0][i]])
                {
                    flg = 1;
                    break;
                }
                dfs(vec[x][0][i]);
            }
        }
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin >> n >> q >> t;
    for (int i = 1; i <= n; i++)
        cin >> b[i];
    for (int i = 0; i < q; i++)
    {
        cin >> u >> v;
        vec[v][1].push_back(u);
        vec[u][0].push_back(v);
    }
    for (int i = 1; i <= n; i++)
    {
        if (!mark[i])
        {
            dfs(i);
            if (flg)
            {
                cout << 0;
                return 0;
            }
        }
    }
    knap[0] = 1;
    ravesh[0] = 1;
    for (int i = 1; i <= n; i++)
    {
        for (int j = 0; j <= t-b[i]; j++)
        {
            if (knap[j])
            {
                knap[j+b[i]] = 1;
                ravesh[j+b[i]] = (ravesh[j+b[i]] + ravesh[j])%mod;
            }
        }
    }
    cout << ravesh[t];
    return 0;
}