#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <cmath>
#include <ctime>
#include <string>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <functional>

using namespace std;

vector<pair<int, int> > edges;
vector<int> g[5555];

int used[55555];

bool dfs(int v, int p)
{
  used[v] = 1;
  for (int i = 0; i < g[v].size(); ++i)
  {
    int to = g[v][i];
    if (used[to] == 1)
      return false;
    else if (!used[to])
      if (!dfs(to, p))
        return false;
  }
  used[v] = 2;
  return true;
}

int main()
{
  ios_base::sync_with_stdio(0);
  cin.tie(0);

  int n, m;
  cin >> n >> m;

  for (int i = 1; i <= m; ++i)
  {
    int u, v;
    cin >> u >> v;
    g[u].push_back(v);
    edges.push_back(make_pair(u, v));
  }

  bool ok = 1;
  for (int i = 1; i <= n; ++i)
  {
    if (!used[i])
      if (!dfs(i, i))
        ok = 0;
  }

  cout << 1 + (int(!ok)) << endl;

  for (int i = 0; i < m; ++i)
  {
    if (ok)
      cout << 1 << " ";
    else
      cout << 1 + (edges[i].first > edges[i].second) << " ";
  }

}