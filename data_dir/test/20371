#include <bits/stdc++.h>
using namespace std;
 
typedef long long LL;
 
const int N = 4e5 + 7;
 
LL t[N << 2], lzy[N << 2];
 
 
 
void propagate(int l, int r, int v) {
        if(lzy[v]) {
                t[v] = lzy[v];
                if(l != r) {
                        lzy[v << 1] = lzy[v << 1 | 1] = lzy[v];
                }
                lzy[v] = 0;
        }
}
 
void update(int l, int r, int v, int L, int R, LL val) {
        propagate(l, r, v);
        if(l > R || r < L) return;
        if(l >= L && r <= R) {
                lzy[v] = val;
                propagate(l, r, v);
                return;
        }
        int mid = (l + r) >> 1;
        update(l, mid, v << 1, L, R, val);
        update(mid + 1, r, v << 1 | 1, L, R, val);
        t[v] = t[v << 1] | t[v << 1 | 1];
}
 
LL query(int l, int r, int v, int L, int R) {
        propagate(l, r, v);
        if(l > R || r < L) return 0;
        if(l >= L && r <= R) return t[v];
        int mid = (l + r) >> 1;
        LL x = query(l, mid, v << 1, L, R) | query(mid + 1, r, v << 1 | 1, L, R);
        t[v] = t[v << 1] | t[v << 1 | 1];
        return x;
}
 
 
int color[N], st[N], en[N], tme, n;
 
vector <int> adj[N];
 
void dfs(int u, int p) {
        st[u] = ++tme;
        update(1, n, 1, st[u], st[u], 1LL << color[u]);
        for(int v: adj[u])
                if(v != p)
                        dfs(v, u);
        en[u] = tme;
}
 
int main() {
        ios_base :: sync_with_stdio(0); cin.tie(0);cout.tie(0);
        int m; cin >> n >> m;
        for(int i = 1; i <= n; i++) {
                cin >> color[i];
        }
        for(int i = 1; i < n; i++) {
                int u, v; cin >> u >> v;
                adj[u].push_back(v);
                adj[v].push_back(u);
        }
        dfs(1, -1);
 
        for(int i = 1; i <= m; i++) {
                int t, u; cin >> t >> u;
                if(t == 1) {
                    int c; cin >> c;
                    update(1, n, 1, st[u], en[u], 1LL << c);
                }  else {
                    cout << __builtin_popcountll(query(1, n, 1, st[u], en[u])) << endl;
                }
        }
 
}