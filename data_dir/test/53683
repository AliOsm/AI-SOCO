#include <bits/stdc++.h>
#include <cctype>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, std::less<>, rb_tree_tag, tree_order_statistics_node_update>;
using namespace std;
typedef long long int64;
typedef unsigned long long uint64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//*/998244353;
const int base = 2187;
const double eps = 1e-9;
const int N = 300'000;
const int LOGN = 19;

int n, m, k;

void solve(int) {
  cin >> n >> k;
  vector<int64> a(n), b(n);
  for (int64& x : a) {
    cin >> x;
  }
  for (int64& x : b) {
    cin >> x;
  }
  auto ok = [&] (int64 add) {
    if (add == 0) {
      for (int i = 0; i < n; ++i) {
        if (a[i] / b[i] < k - 1) {
          return 0;
        }
      }
      return 1;
    }
    vector<vector<int>> c(k);
    vector<int64> bal = a;
    for (int i = 0; i < n; ++i) {
      int64 pos = a[i] / b[i];
      if (pos < k) {
        c[pos].push_back(i);
      }
    }
    int64 cur = 1;
    for (int i = 0; i < k - 1; ++i, ++cur) {
      for (int id : c[i]) {
        int64 req = (i + 1) * b[id];
        int64 dif = req - bal[id];
        int64 sub = (dif + add - 1) / add;
        cur -= sub;
        if (cur < 0) {
          return 0;
        }
        bal[id] += sub * add;
        int64 pos = bal[id] / b[id];
        if (pos < k) {
          c[pos].push_back(id);
        }
      }
    }
    return 1;
  };
  int64 l = 0, r = inf64;
  while (l < r) {
    int64 mid = (l + r) / 2;
    if (ok(mid)) {
      r = mid;
    } else {
      l = mid + 1;
    }
  }
  if (l == inf64) {
    l = -1;
  }
  cout << l << '\n';
}

void precalc() {
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i) {
    solve(i);
  }
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}

