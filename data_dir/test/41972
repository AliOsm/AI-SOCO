// copied by Nurstan Duisengaliev
// skatal
#include <bits/stdc++.h>
 
#define ll long long
#define all(x) x.begin(), x.end()
#define in insert
#define mp make_pair
#define F first
#define S second
#define ppf pop_front
#define pb push_back
#define ppb pop_back
#define pf push_front
#define pii pair <int, int>
#define boost() ios_base::sync_with_stdio(0), cin.tie(0)
#define sz(x) x.size()
 
using namespace std;
 
const int N = (int)3e5 + 123;
const int mod = (int)1e9 + 7;
const ll INF = (ll)1e18 + 7;
int n, k, d;
queue <int> q;
bool used[N];
vector <int> g[N];
map <pii, bool> m;
pii b[N];
void solve () {
	cin >> n >> k >> d;
	for (int i = 1; i <= k; i ++) {
		int x;
		cin >> x;
		q.push (x);
		used[x] = 1;
	}	
	for (int i = 1; i < n; i ++) {
		int l, r;
		cin >> l >> r;
		b[i].F = l;
		b[i].S = r;
		g[l].pb(r);
		g[r].pb(l);
		m[mp (min(l, r), max(l, r))] = 0;
	}
	while (q.size() != 0) {
		int v = q.front();
		q.pop();
		for (int i = 0; i < g[v].size(); i ++) {
			int to = g[v][i];
			if (used[to] == 0) {
				used[to] = 1;
				q.push (to);
				m[mp(min(to, v), max(to, v))] = 1;
			}
		}
	}	
	int sum = 0;
	vector <int> ans;
	for (int i = 1; i < n; i ++) {
	    if (m[mp(min(b[i].F, b[i].S), max(b[i].F, b[i].S))] == 0) {
	    	sum ++;
	    	ans.pb(i);
	    }
	}
	cout << sum;
	cout << endl;
	for (int i = 0; i < sum; i ++) cout << ans[i] << " ";
}
 
main () {
//	freopen (".in", "r", stdin);
//	freopen (".out", "w", stdout);
	boost ();
	int TT = 1;
//  cin >> TT;
	while (TT --) {
		solve ();
	}
	return 0;	
}