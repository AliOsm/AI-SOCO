//#pragma GCC optimize("Ofast,no-stack-protector")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
//#pragma GCC target("avx,tune=native")
// Anand Jaisingh

#include<bits/stdc++.h>

using namespace std;

typedef complex<double> base;
typedef long double ld;
typedef long long ll;

#define pb push_back
#define pii pair<int,int>

const int maxn=(int)(2e5+5);
const ll mod=(ll)(998244353);
int a[maxn],fact[maxn],inv_fact[maxn],bit[maxn];
bool v[maxn];
vector<int> vec;

inline int mul(ll a,ll b)
{
    return (a*b)%mod;
}

inline int add(int a,int b)
{
    int ret=a+b;

    if(ret>=mod)
    {
        ret-=mod;
    }

    return ret;
}

inline int sub(int a,int b)
{
    int ret=a-b;

    if(ret<0)
    {
        ret+=mod;
    }

    return ret;
}

inline int poww(ll a,ll b)
{
    int x=1,y=a;

    while(b>0)
    {
        if(b%2)
        {
            x=mul(x,y);
        }

        y=mul(y,y);b/=2;
    }

    return (int)(x%mod);
}

void build()
{
    fact[0]=1;

    for(int i=1;i<maxn;i++)
    {
        fact[i]=mul(fact[i-1],i);
    }

    inv_fact[maxn-1]=poww(fact[maxn-1],mod-2);

    for(int i=maxn-2;i>=0;i--)
    {
        inv_fact[i]=mul(inv_fact[i+1],i+1);
    }
}

int query1(int idx)
{
    int ret=0;

    while(idx<maxn)
    {
        ret+=bit[idx];idx+=idx&-idx;
    }

    return ret;
}

int query3(int idx)
{
    int ret=0;

    while(idx>0)
    {
        ret+=bit[idx];idx-=idx&-idx;
    }

    return ret;
}

int query2(int num)
{
    if(vec.size()==0)
    {
        return 0;
    }

    int low=0,high=vec.size()-1;

    while(low<high)
    {
        int mid=(low+high+1)>>1;

        if(vec[mid]>=num)
        {
            low=mid;
        }
        else
        {
            high=mid-1;
        }
    }

    return (vec[low]>=num?low+1:0);
}

void update1(int idx,int val)
{
    while(idx>0)
    {
        bit[idx]+=val;idx-=idx&-idx;
    }
}

void update2(int idx,int val)
{
    while(idx<maxn)
    {
        bit[idx]+=val;idx+=idx&-idx;
    }
}

int query4(int num)
{
    if(vec.size()==0)
    {
        return 0;
    }

    int low=0,high=vec.size()-1;

    while(low<high)
    {
        int mid=(low+high+1)>>1;

        if(vec[mid]<=num)
        {
            low=mid;
        }
        else
        {
            high=mid-1;
        }
    }

    return (vec[low]<=num?low+1:0);
}

int C(int n,int r)
{
    if(n<r || min(n,r)<0)
    {
        return 0;
    }

    int val1=fact[n],val2=mul(inv_fact[r],inv_fact[n-r]);

    return mul(val1,val2);
}


int main()
{
    ios_base::sync_with_stdio(0);

    int n;cin>>n;build();

    for(int i=1;i<=n;i++)
    {
        cin>>a[i];

        if(a[i]>=1)
        {
            v[a[i]]=true;
        }
    }

    int left=0;

    for(int i=1;i<=n;i++)
    {
        if(!v[i])
        {
            vec.pb(i);

            left++;
        }
    }

    reverse(vec.begin(),vec.end());

    int den=fact[left],num=0,places=0;

    for(int i=1;i<=n;i++)
    {
        if(a[i]>=1)
        {
            int now1=query1(a[i]+1),now2=query2(a[i]);

            num=add(num,mul(now1,fact[left]));

            if(left>=1)
            {
                num=add(num,mul(places,mul(now2,fact[left-1])));
            }

            update1(a[i],1);
        }

        else
        {
            places++;
        }
    }

    fill(bit,bit+maxn,0);reverse(vec.begin(),vec.end());places=0;

    for(int i=n;i>=1;i--)
    {
        if(a[i]>=1)
        {
            int now1=query3(a[i]-1),now2=query4(a[i]);

       //     num=add(num,mul(now1,fact[left]));

            if(left>=1)
            {
                num=add(num,mul(places,mul(now2,fact[left-1])));
            }

            update2(a[i],1);
        }

        else
        {
            places++;
        }
    }

    if(left>=2)
    {
        int zz=mul(C(left,2),mul(C(left,2),fact[left-2]));

        num=add(num,zz);
    }

    den=poww(den,mod-2);int res=mul(num,den);

  //  cout<<num<<" "<<den<<endl;

    cout<<res<<endl;

    return 0;
}
