#include <cstring>
#include <iostream>
#include <algorithm>
#include <unordered_set>
#include <vector>

using namespace std;

int N, M;
unordered_set<int> ST[100002];
vector<int> V[100002], W[100002];
int in_nod[100002], out_nod[100002];
int wh[100002];
bool S[100002];

void sortT(int x)
{
    S[x] = true;

    for (auto it = W[x].begin(); it != W[x].end(); ++it)
        if (!S[*it])
            sortT(*it);

    wh[x] = ++wh[0];
}

int nodes;
bool cycle;

void Dfs(int x)
{
    S[x] = true;

    ++nodes;

    for (auto it = V[x].begin(); it != V[x].end(); ++it)
    {
        if (!S[*it])
            Dfs(*it);
        if (wh[x] < wh[*it] && ST[x].find(*it) != ST[x].end())
            cycle = true;
    }
}

int main()
{
    cin.sync_with_stdio(false);

    cin >> N >> M;
    for (int i = 1, nod1, nod2; i <= M; ++i)
    {
        cin >> nod1 >> nod2;
        W[nod1].push_back(nod2);
        ST[nod1].insert(nod2);
        V[nod1].push_back(nod2);
        V[nod2].push_back(nod1);
    }

    for (int i = 1; i <= N; ++i)
        if (!S[i])
            sortT(i);
    memset(S, 0, sizeof(S));

    int result = 0;
    for (int i = 1; i <= N; ++i)
        if (!S[i])
        {
            nodes = 0, cycle = false;
            Dfs(i);

            result += nodes - !cycle;
        }

    cout << result << '\n';
}