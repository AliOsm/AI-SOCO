#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
const ll N = 1e5 + 5;
const ll MX = 1e12 + 10;
const int LOGMX = log(1e12) + 1;
const ll MOD = 1e9 + 7;
ll dp[N] , segtree[N*LOGMX] ,arr[N],len=2,L[N*LOGMX],R[N*LOGMX];
void update(ll pos,ll val,ll l=0,ll r=MX,ll idx=1){
    if(pos<l || pos>=r)
        return;
    if(l==r-1)
        return void(segtree[idx]=val);
    ll mid = (l+r)>>1;
    if(pos>=mid && !R[idx])
        R[idx]=len++;
    if(pos<mid && !L[idx])
        L[idx]=len++;
    update(pos,val,l,mid,L[idx]);
    update(pos,val,mid,r,R[idx]);
    segtree[idx] = max(segtree[L[idx]] , segtree[R[idx]]);
}
ll query(ll ql,ll qr,ll l=0,ll r=MX,ll idx=1){
    if(ql<=l && r<=qr )
        return segtree[idx];
    if(r<=ql || l>=qr || !idx)
        return 0;
    ll mid = (l+r)>>1;
    return max(query(ql,qr,l,mid,L[idx]) , query(ql,qr,mid,r,R[idx]));
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ll n,r,h;
    cin>>n;

    for(ll i=1;i<=n;i++){
        cin>>r>>h;
        arr[i] = r*r*h;
    }

    for(ll i=n;i>=1;i--){
        dp[i] = arr[i] + query(arr[i]+1,MX);
        update(arr[i],dp[i]);
    }
    ll val = query(0,MX);
    ld ans = acos(-1)*1.0*val;
    cout<<fixed<<setprecision(18)<<ans;
}
