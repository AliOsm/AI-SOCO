#include <bits/stdc++.h>
#define MAX (ll)(2e5 + 1)
#define MOD (ll)(1e9 + 7)
using namespace std;
using ll = long long;
ll seg[4 * MAX];
ll lazy[4 * MAX];
ll ar[MAX];

ll build (int st, int en, int ind) {
 lazy[ind] = 0;
 if (st == en) {
  seg[ind] = ar[st];
  return seg[ind];
 }
 seg[ind] = build (st, (st + en) >> 1, ind << 1) + build (((st + en) >> 1) + 1, en, ind << 1 | 1);
 return seg[ind];
}
ll ch (int q, int st, int en, int ind, ll su);

void la (int st, int en, int ind) {
 lazy[ind] = ch (st, st, (st + en) >> 1, ind << 1, lazy[ind]);
 ch(st , ((st + en) >> 1) + 1, en, ind << 1 | 1, lazy[ind]);
 lazy[ind] = 0;
}

ll ch (int q, int st, int en, int ind, ll su) {
 if (seg[ind] == 0 || su == 0) {
	return su;
 }
 if (q <= st) {
  if (st < en) {
   lazy[ind] += su;
  }
  ll xx = seg[ind];
  seg[ind] = max (seg[ind] - su, 0LL);
  return max (su - xx, 0LL);
 }
 if (q >= st && q <= en) {
  if (lazy [ind]) {
   la (st, en, ind);
  }
  ll xx = su;
  su = ch (q, st, (st + en) >> 1, ind << 1, su);
  su = ch (q, ((st + en) >> 1) + 1, en, ind << 1 | 1, su);
  seg[ind] -= xx - su;
  return su;
 }
 else {
  return su;
 }
}

ll query (int q, int st, int en, int ind) {
 if (lazy[ind]) {
  la (st, en, ind);
 }
 if (st == en) {
  if (st == q) {
   return seg[ind];
  }
  return 0;
 }
 if (q >= st && q <= en) {
  return query (q, st, (st + en) >> 1, ind << 1) + query (q, ((st + en) >> 1) + 1, en, ind << 1 | 1);
 }
 return 0;
}

int main () {
 int n;
 cin >> n;
 for (int i = 0; i < n; i++) {
  cin >> ar[i + 1];
 }
 build (1, n, 1);
 int m;
 cin >> m;
 for (int i = 0; i < m; i++) {
  short d;
  cin >> d;
  if (d == 1) {
   int p, x;
   cin >> p >> x;
   ch (p, 1, n, 1, x);
  }
  else {
   int q;
   cin >> q;
   cout << ar[q] - query (q, 1, n, 1) << "\n";
  } 
 }
}
