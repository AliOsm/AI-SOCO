#include <bits/stdc++.h>

using namespace std;

#define MAX 200005
#define INF 12345678
int cost[MAX], d[MAX];
vector<int> adj[MAX], rev[MAX];
stack<int> S;
bool vis[MAX];
int mins = INF, comp[MAX], n, arr[MAX], out[MAX];

void dfs(int u)
{
    vis[u] = true;
    for(int i=0; i<adj[u].size(); i++){
        int v = adj[u][i];
        if(vis[v] == false) dfs(v);
    }
    S.push(u);
}

void dfs2(int u, int sz)
{
    vis[u] = true;
    comp[u] = sz;
    mins = min(mins, cost[u]);
    for(int i=0; i<rev[u].size(); i++){
        int v = rev[u][i];
        if(vis[v] == false) dfs2(v, sz);
    }
}

int main()
{
    scanf("%d", &n);
    for(int i=1; i<=n; i++) scanf("%d", &cost[i]);
    for(int i=1; i<=n; i++){
        int u = i;
        scanf("%d", &arr[i]);
        int v = arr[i];
        adj[u].push_back(v);
        rev[v].push_back(u);
    }
    memset(vis, false, sizeof vis);
    for(int i=1; i<=n; i++){
        if(vis[i] == false){
            dfs(i);
        }
    }
    memset(vis, false, sizeof vis);
    int cnt = 0;
    while(!S.empty()){
        int u = S.top();
        S.pop();
        if(vis[u]) continue;
        else {
            cnt++;
            mins = INF;
            dfs2(u, cnt);
            d[cnt] = mins;
        }
    }
    memset(out, 0, sizeof out);
    for(int i=1; i<=n; i++){
        int u = i, v = arr[i];
        int p = comp[u], q = comp[v];
        if(p != q){
            out[p]++;
        }
    }
    int ans = 0;
    for(int i=1; i<=cnt; i++){
        if(out[i] == 0){
            ans += d[i];
        }
    }
    cout << ans;
}

