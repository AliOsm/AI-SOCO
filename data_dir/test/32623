#include <bits/stdc++.h>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)
typedef long long ll;
typedef pair < int, int > ii;

const int inf = 1e9 + 333;
const ll linf = 1e18 + inf;

const int N = 100 + 5;
const int M = 1000 + 5;

int n, m;
int a[N];
double dp[N][N * M], sum[N][N * M];

int main() {

	scanf("%d %d", &n, &m);

	if(m == 1) {
		puts("1");
		return 0;
	}

	int sm = 0;

	for(int i = 1; i <= n; i++) {
		scanf("%d", a + i);
		sm += a[i];
	}

	for(int i = 0; i < sm; i++) {
		dp[n + 1][i] = m - 1;
	}

	sum[n + 1][0] = dp[n + 1][0];

	for(int i = 1; i < N * M; i++)
		sum[n + 1][i] = sum[n + 1][i - 1] + dp[n + 1][i];

	for(int i = n; i >= 1; i--) {
		for(int sm = 0; sm <= n * m; sm++) {
			dp[i][sm] = sum[i + 1][min(n * m, sm + m)] - sum[i + 1][sm];
			if(sm + a[i] <= n * m)
				dp[i][sm] -= dp[i + 1][sm + a[i]];
			dp[i][sm] /= m - 1;
			sum[i][sm] = sm ? sum[i][sm - 1] : 0;
			sum[i][sm] += dp[i][sm];
		}
	}

	printf("%.12lf\n", dp[1][0] + 1);

	return 0;

}
