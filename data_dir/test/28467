#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define FILE "t9"
#define ld long double
#define endl '\n'
#define pii pair <int, int>
#define last fedgfre
#define ull unsigned long long
//#define int long long

//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;
using namespace __gnu_pbds;

typedef tree <int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const int N = 1e3 + 5;
//const ll mod = 998244353;
const int rx[8] = {1, -1, 0, 0, 1, 1, -1, -1 };
const int ry[8] = {0, 0, 1, -1, 1, -1, 1, -1 };
const ld pi = acos(-1.0);
const int B = 9e3;

const int kx[8] = {1, 1, -1, -1, 2, 2, -2, -2};
const int ky[8] = {2, -2, 2, -2, 1, -1, 1, -1};

mt19937 gen(chrono::high_resolution_clock::now().time_since_epoch().count());

int a[N][N];
bitset <N> bs[N];
int n, m;

bool can(int mid) {
    for (int i = 0; i < n; i++) bs[i].reset();
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (a[i][j] < mid) bs[i][j] = 0;
            else bs[i][j] = 1;
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if ((bs[i] & bs[j]).count() > 1) {
                return 1;
            }
        }
    }
    return 0;
}


int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //  srand(time(0));
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    //  freopen(FILE".in", "r", stdin);
//   freopen(FILE".out", "w", stdout);
#endif // LOCAL
    cin >> n >> m;
    int mx = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> a[i][j];
            mx = max(mx, a[i][j]);
        }
    }
    if (n <= 2 && m <= 2) {
        cout << min({a[0][0], a[n - 1][0], a[0][m - 1], a[n - 1][m - 1]});
        return 0;
    }
    int l = 0, r = mx, res = 0;
    while (l <= r) {
        int mid = (l + r) >> 1;
        if (can(mid)) {
            res = mid;
            l = mid + 1;
        } else r = mid - 1;
    }
    cout << res;
    return 0;
}
