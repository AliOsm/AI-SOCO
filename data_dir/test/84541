#include <iostream>
#include <string>
#include <cstring>
#include <stdio.h>
#include <iomanip>
#include <math.h>
#include <vector>
#include<cctype>
#include<algorithm>
#include<set>
#include<stack>
#include<map>
#include<time.h>
#include<iterator>
#include <deque>
#include <sstream>
#include<queue>
#include<stdlib.h>
#include<bitset> 
#include <utility>
#include<assert.h>
#include<functional>
#include<limits.h>
#include <stdlib.h>
#include <time.h> 
#define fn(i,n) for(int (i) = 0;(i) < (n);(i)++)
#define f1n(i,n) for(int (i) = 1;(i) <= (n);(i)++)
#define mk(f,s) make_pair((f),(s))

#define defV(dp,e) memset(dp,e,sizeof dp)

#define ri(n) scanf("%d",&n)
#define rl(n) scanf("%lld",&n)
#define rs(s) scanf("%s",s)

#define PI acos(-1.0)

using namespace std;

typedef long long ll;
typedef pair<int, int > pp;

typedef vector<int  > v1;
typedef vector<ll  > vl;
typedef vector<pp  > vpp;
typedef vector<bool  > vb;
typedef vector<char > vc;
typedef vector<v1 > v2;

int const bound = 2e6 + 2, N = 5e5 + 2;
ll OO = 1e18;
int oo = 1e9, mod =oo+7;
double eps=1e-6;
int n,aa[N];
pp seg[N*4];
void upd(int pos,int l,int r,int at,int val){
    if(l>at||r<at)return ;
    if(l==at&&r==at){
        seg[pos]={val,at};
        return ;
    }
    upd(pos*2+1,l,(l+r)>>1,at,val);
    upd(pos*2+2,(l+r)/2+1,r,at,val);    
    seg[pos]=max(seg[pos*2+1],seg[pos*2+2]);
}
pp get(int pos,int l,int r,int lx,int rx){
    if(l>rx||r<lx)return {0,0};
    if(l>=lx&&r<=rx){
        return seg[pos];
    }
    return max(get(pos*2+1,l,(l+r)/2,lx,rx),get(pos*2+2,(l+r)/2+1,r,lx,rx));
}
int main(){
    scanf("%d",&n);
    int cop[N];
    fn(i,n){
        scanf("%d",&aa[i]);
        upd(0,0,n-1,i,aa[i]);
    }
    int an=0;
    fn(i,n){
        int l=0,r=i,mid,left=-1;
        while(l<=r){
            mid=(l+r)>>1;
            if(get(0,0,n-1,mid,i).first==aa[i]){
                left=mid;
                r=mid-1;
            }else l=mid+1;
        }
        int right=-1;
        l=i,r=n-1;
        while(l<=r){
            mid=(l+r)>>1;
            if(get(0,0,n-1,i,mid).first==aa[i]){
                right=mid;
                l=mid+1;
            }else r=mid-1;
        }
        if(left==-1||right==-1)continue;
        l=left,r=right;
        upd(0,0,n-1,i,0);
        int mx=0;
        while(l<=i&&r>=i){
            pp where=get(0,0,n-1,l,r);
            if(where.second!=i)mx=max(mx,aa[i]^where.first);
            if(where.second>i)r=where.second-1;
            else l=where.second+1;
        }
        upd(0,0,n-1,i,aa[i]);        
        an=max(an,mx);
    }
    printf("%d\n",an);
    return 0;
}