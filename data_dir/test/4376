/* In the name of Allah */
#include<bits/stdc++.h>
using namespace std;

vector<int> p;
const int N = 1e6 + 5;
int n, A, B, a[N], cnt[N][2];

inline void decompose(int x) {
	for (int i = 2; i * i <= x; i++)
		if (!(x % i)) {
			p.push_back(i);
			while (!(x % i))
				x /= i;
		}
	if (x > 1)
		p.push_back(x);
}

inline long long calc(int x) {
	for (int i = 0; i < n; i++) {
		cnt[i][0] = cnt[i - 1][0];
		cnt[i][1] = cnt[i - 1][1];
		if (a[i] % x) {
			cnt[i][0]++;
			cnt[i][1] += (a[i] % x == 1 || a[i] % x == x - 1);
		}
	}
	long long ans = 1e18, mn = A;
	for (int i = 0; i < n; i++) {
		if (cnt[i][0] == cnt[i][1])
			mn = min(mn, 1LL * cnt[i][1] * B - 1LL * i * A);
		if (cnt[n - 1][0] - cnt[i][0] == cnt[n - 1][1] - cnt[i][1])
			ans = min(ans, 1LL * i * A + 1LL * (cnt[n - 1][1] - cnt[i][1]) * B + mn);
	}
	return ans;
}

inline void read_input() {
	cin >> n >> A >> B;
	for (int i = 0; i < n; i++)
		cin >> a[i];
}

inline void solve() {
	long long ans = 1e18;
	for (int i = -1; i < 2; i++) {
		decompose(a[0] + i);
		decompose(a[n - 1] + i);
	}
	sort(p.begin(), p.end());
	for (int i = 0; i < p.size(); i++)
		if (!i || p[i] ^ p[i - 1])
			ans = min(ans, calc(p[i]));
	cout << ans;
}

int main() {
	ios:: sync_with_stdio(0), cin.tie(0), cout.tie(0);
	read_input(), solve();
	return 0;
}
