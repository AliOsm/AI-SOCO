#include<bits/stdc++.h>
using namespace std;

#define int           long long 
#define pi            acos(-1)
#define S             second
#define F             first
#define pb            push_back
#define ff            fflush(stdout)
#define ppb           pop_back()
#define B(c)          (c).begin()
#define E(c)          (c).end()
#define all(c)        (c).begin(),(c).end()
#define rall(c)       (c).rbegin(),(c).rend() 
#define lb            lower_bound
#define si(c)         (int)((c).size())
#define lcm(a,b)      (a*(b/__gcd(a,b)))  
#define inf           (int)1e18
#define err           cerr << "move" << '\n';
#define oh_no         {cout << -1 << endl; return;}

typedef vector<int>                           vi;
typedef pair<int,int>                         pii;
typedef vector<pii>                           vpi;
typedef pair<int,pii>                         pipii;
typedef vector<vector<int> >                  vvi;
typedef map<int,int>                          mp;
typedef map<string,set<int> >                 msi;
typedef priority_queue<pii, vector<pii>, greater<pii> > pq;


void solve(){
    int n, k, curr = 0, sum = 0; cin >> n >> k;
    int a[n];
    vpi v;
    vi ans;
    for(int i = 0; i < n ; i++){
        cin >> a[i];
        v.pb({a[i], i});
    }
    sort(rall(v));
    for(int i = 0; i < k; i++){
        ans.pb(v[i].S+1);
        sum += v[i].F;
    }
    sort(all(ans));
    cout << sum << endl;
    for(int i = 0; i < si(ans)-1; i++){
        cout << ans[i] - curr << " ";
        curr = ans[i];
    }
    cout << n - curr << endl;
}

signed main(){

    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);    
    int t = 1;
    clock_t start, end; 
    start = clock(); 

    cout << fixed << setprecision(8);
    

    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
    freopen("error.txt", "w", stderr);
    #endif

    //cin >> t;

    while(t--){
        solve();
    }

    end = clock();
    double time_taken = double(end - start) / double(CLOCKS_PER_SEC); 
    //cerr<<time_taken;
}