#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <cmath>
#include <ctime>
#include <string>
#include <cstdlib>
#include <algorithm>
using namespace std;
#define read freopen("C:\\Users\\USER\\Desktop\\in.txt", "r", stdin)
#define write freopen("C:\\Users\\USER\\Desktop\\out.txt", "a", stdout)
#define inf 1<<30
#define pii pair<int, int>
#define ff first
#define ss second
#define in(a) scanf("%I64d", &a)
#define ins(a) scanf("%s", a)
#define in2(a, b) scanf("%I64d%I64d", &a, &b)
#define in3(a, b, c) scanf("%I64d%I64d%I64d", &a, &b, &c)
#define pn printf("\n");
#define pcs(a) printf("Case %I64d: ", a)
#define pr(a) printf("%I64d\n", a)
#define pr(a) printf("%I64d\n", a)
#define prs(a) printf("%I64d ", a)
#define pr2(a, b) printf("%I64d %I64d\n", a, b)
#define pr3(a, b ,c) printf("%I64d %I64d %I64d\n", a, b, c)
#define vi vector<int>
#define msi map<string, int>
#define mii map<int, int>
#define si set<int>
#define cl clear()
#define sz size()
#define pb push_back
#define MAX(A,B) (((A)>(B))?(A):(B))
#define MIN(A,B) (((A)<(B))?(A):(B))
#define all(X) (X).begin(), (X).end ()
#define iter(it, X) for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(int n, int pos) {return (bool) (n & (1<<pos));}
//int on(int n, int pos) {return n | (1<<pos);}
//int off(int n, int pos) {return n & ~(1<<pos);}
//bool operator < (const data &d) const{return cost<d.cost;}
#define ext(a) {printf("%s\n", a); return 0;}
typedef long long LL;
typedef struct data sd;
set<LL>A;
void preprocess(LL i, LL sum)
{
    if (i>10) return ;

    if (sum) A.insert(sum);

    preprocess(i+1, sum*10+4);
    preprocess(i+1, sum*10+7);
}
int main()
{
    //use %I64d
    //read;
    preprocess(0, 0);

    set<LL>::iterator it;
    LL l, r, temp, last, i, j, k, sum=0;

    in2(l, r);

    it=A.lower_bound(l);
    last=l-1;

    for (; it!=A.end(); ++it)
    {
        if (*it>r)
        {
            sum+= (*it)*(r-last);
            pr(sum);
            return 0;
        }
        else
        {
            sum+= (*it)*(*it-last);
            last=*it;
        }
    }
//file?
return 0;
}
