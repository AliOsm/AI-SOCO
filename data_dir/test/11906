#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

struct dsu {
    dsu(int n) {
        for(int i = 0; i < n; i++) {
            P.push_back(i);
            R.push_back(1);
        }
    }
    int findSet(int x) {
        return (P[x] == x) ? x : P[x] = findSet(P[x]);
    }
    bool unionSet(int x, int y) {
        x = findSet(x), y = findSet(y);
        if(x == y) return false;
        if(R[x] > R[y]) {
            P[y] = x;
            R[x] += R[y];
        }
        else {
            P[x] = y;
            R[y] += R[x];
        }
        return true;
    }
    int getRank(int x) {
        return R[findSet(x)];
    }
    private:
    vector<int> P, R;
};

int main() {
    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    int n, m;
    cin >> n >> m;
    dsu my_dsu(n);
    for(int i = 0; i < m; i++) {
        int k;
        cin >> k;
        vector<int> a(k);
        for(int j = 0; j < k; j++) {
            cin >> a[j];
            a[j]--;
        }
        if(k <= 1) continue;
        for(int j = 0; j < k - 1; j++) {
            my_dsu.unionSet(a[j], a[j + 1]);
        }
    }
    for(int i = 0; i < n; i++) {
        cout << my_dsu.getRank(i) << " ";
    }
    cout << endl;
}

/**
*/
