#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (ll) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <ll, ll> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const ll inf = numeric_limits <ll>::max() >> 2;
const ll N = 301;
ll dp[N][N];
ll cs[N][N];
ll n, m, k;

void input() {
    cin >> n >> m >> k;
    fill(cs[0], cs[N], inf);
    for(ll i = 1; i <= m; ++i) {
        ll l; cin >> l;
        ll r; cin >> r;
        ll w; cin >> w;
        for(ll k = l; k <= r; ++k) {
            cs[k][r] = min(cs[k][r], w);
        }
    }
}

ll calc(ll i, ll j) {
    if(i == n + 1) {
        return j? inf: 0;
    }
    if(dp[i][j] != -1) {
        return dp[i][j];
    }
    ll res = inf;
    for(ll k = i; k <= n; ++k) {
        res = min(res, cs[i][k] + calc(k + 1, max(0ll, j - (k - i + 1))));
    }
    res = min(res, calc(i + 1, j));
    return dp[i][j] = res;
}

void solve() {
    memset(dp, -1, sizeof dp);
    if(calc(1, k) >= inf) {
        cout << "-1\n";
    } else {
        cout << calc(1, k) << "\n";
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
