#pragma GCC optimize("O3")

# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

# include <stdio.h>
# include <bits/stdc++.h>


#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define lb lower_bound
#define ub upper_bound
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace __gnu_pbds;
using namespace std;
 
template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
inline void Input_Output () {
	//freopen(".in", "r", stdin);
   //freopen(".out", "w", stdout);
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 6e5 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
ll n, k;

inline int get (ll l, ll r) {
	cout << l << ' ' << r << endl;
	string res;
	cin >> res;
	
	return (res == "Yes");
}

int main () {
	srand(time(0));
	ios_base::sync_with_stdio(0);
	cin >> n >> k;
	ll l = 1, r = n;
	while (1) {
		if (r - l <= 4 * k + 1) {
			ll g = rand() % (r - l + 1);
			if (get(l + g, l + g)) {
				exit(0);
			}
		} else {
			ll md = (l + r) / 2ll;

			if (get(l, md)) {
				r = md;
			} else l = md + 1;

		}

		l -= k;
		r += k;

		if (l < 1) l = 1;
		if (r > n) r = n;
	}
   
   return Accepted;
}

// B...a