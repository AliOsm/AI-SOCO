#include <bits/stdc++.h>
using namespace std;
using ll = long long;

const int maxn = 2e5+5;
int n, q;
ll a[maxn], cap[maxn];
int BLOCK, bucket[maxn], first[maxn];
ll amtLeft[maxn];

void add(int i, ll amt) {
    if (i > n || amt == 0) return;
    if (amtLeft[bucket[i]] == 0) {
        add(first[bucket[i]+1],amt);    
    }
    else if (i != first[bucket[i]]) {
        for (int j = i; bucket[j] == bucket[i]; j++) {
            ll take = min(a[j],amt);
            a[j] -= take;
            amt -= take;
            amtLeft[bucket[j]] -= take;
            if (amt == 0) break;
        }
        if (amt > 0) add(first[bucket[i]+1],amt);
    }
    else {
        if (amtLeft[bucket[i]] <= amt) {
            amt -= amtLeft[bucket[i]];
            amtLeft[bucket[i]] = 0;
            add(first[bucket[i]+1],amt);    
        }
        else {
            for (int j = i; bucket[j] == bucket[i]; j++) {
                ll take = min(a[j],amt);
                a[j] -= take;
                amt -= take;
                amtLeft[bucket[j]] -= take;
                if (amt == 0) break;
            }
            assert(amt == 0);
            return;
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(false); cin.tie(0);
    cin >> n;
    for (int i = 1; i <= n; i++) {
        cin >> a[i];
        cap[i] = a[i];
    }
    BLOCK = sqrt(n) + 1;
    memset(bucket,-1,sizeof bucket);
    for (int i = 1; i <= n; i++) {
        bucket[i] = (i-1)/BLOCK;
        amtLeft[bucket[i]] += a[i];
        if (bucket[i] != bucket[i-1]) first[bucket[i]] = i;
    }
    first[bucket[n]+1] = n + 1; //for invalid case
    int q; cin >> q;
    while (q--) {
        int t; cin >> t;
        if (t == 1) {
            //add
            int x, p; cin >> x >> p;
            add(x,p);
            /*
            for (int i = 1; i <= n; i++) {
                cout << i << ": " << a[i] << endl;
            }
            cout << "----" << endl;
            */
        }
        else {
            //query
            int k; cin >> k;
            if (amtLeft[bucket[k]] == 0) {
                cout << cap[k] << '\n';
            }
            else {
                cout << (cap[k] - a[k]) << '\n';
            }
        }
    }
}

