#pragma comment(linker, "/STACK:64000000")
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int n;
string s;

pii get(char x) {
    if ('1' <= x && x <= '3') {
        return mp(0, x - '1');
    }
    if ('4' <= x && x <= '6') {
        return mp(1, x - '4');
    }
    if ('7' <= x && x <= '9') {
        return mp(2, x - '7');
    }
    return mp(3, 1);
}

bool ok(pii a) {
    int x = a.f, y = a.s;
    if (x < 0 || y < 0) return false;
    if (x < 3 && y < 3) return true;
    if (y >= 3) return false;
    if (x > 3) return false;
    if (x == 3) return y == 1;
    return false;
}

char get(pii a) {
    int x = a.f, y = a.s;
    if (x < 3 && y < 3) {
        return char(x * 3 + y + 1 + '0');
    }
    return '0';
}

bool can(char x, char y, char z) {
    pii a = get(y);
    pii b = get(z);
    pii c = mp(b.f - a.f, b.s - a.s);
    pii ans = get(x);
    ans = mp(ans.f + c.f, ans.s + c.s);
    if (ok(ans)) return true;
    return false;
}

char get(char x, char y, char z) {
    pii a = get(y);
    pii b = get(z);
    pii c = mp(b.f - a.f, b.s - a.s);
    pii ans = get(x);
    ans = mp(ans.f + c.f, ans.s + c.s);
    return get(ans);
}

int main(){
    
    cin >> n >> s;
    
    for (char c = '0'; c <= '9'; c++) {
        if (c == s[0]) continue;
        char cur = c;
        bool ok = 1;
        for (int i = 1; i < s.size(); i++) {
            if (can(cur, s[i - 1], s[i])) {
                cur = get(cur, s[i - 1], s[i]);
            } else {
                ok = 0;
                break;
            }
        }
        if (ok) {
            printf("NO\n");
            return 0;
        }
    }
    
    printf("YES\n");
    
    return 0;
}
