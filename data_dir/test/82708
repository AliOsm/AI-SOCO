#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <bitset>
#include <random>
#include <cassert>

using std::ios_base;
using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::fixed;

using std::vector;
using std::string;
using std::stack;
using std::queue;
using std::deque;
using std::map;
using std::set;
using std::unordered_map;
using std::unordered_set;
using std::bitset;

using std::tuple;
using std::make_tuple;
using std::pair;
using std::make_pair;

using std::sort;
using std::reverse;
using std::nth_element;

#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()
#define sqr(x) ((x) * (x))

#define forn(i, n) for (int i = 0; i < (n); i++)
#define fornr(i, n) for (int i = (n) - 1; i >= 0; i--)
#define forab(i, a, b) for (int i = (a); i < (b); i++)

int g[5][5];

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;

    int m;
    cin >> m;
    for (int i = 0; i < m; ++i) {
        int v, u;
        cin >> v >> u;
        v--, u--;
        g[v][u] = g[u][v] = 1;
    }

    bool ok = false;
    for (int mask = 0; mask < (1 << 5); ++mask) {
        if (__builtin_popcount(mask) != 3)
            continue;
        vector<int> v;
        for (int i = 0; i < 5; ++i)
            if (mask & (1 << i))
                v.pb(i);
        int c = 0;;
        for (int i : v) {
            for (int j : v) {
                if (i != j)
                    c += g[i][j];
            }
        }
        ok |= c == 0 || c == 6;
    }

    cout << (ok ? "WIN\n" : "FAIL\n");

#ifdef LOCAL
    cerr << "\n== " << 1.0 * clock() / CLOCKS_PER_SEC << " sec.\n";
#endif
    return 0;
}
