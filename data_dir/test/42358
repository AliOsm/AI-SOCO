/* In the name of Allah */
#include<bits/stdc++.h>
using namespace std;

const int N = 250 + 5;
int n, q, sz[3], dp[N][N][N];
set<int> p[30];
string s, a[3];

int main() {
	ios:: sync_with_stdio(0), cin.tie(0), cout.tie(0);
	cin >> n >> q >> s;
	for (int i = 0; i < n; i++)
		p[s[i] - 'a'].insert(i);
	memset(dp, 63, sizeof dp);
	dp[0][0][0] = -1;
	while (q--) {
		char c;
		int id;
		cin >> c >> id;
		if (c ^ '+')
			sz[--id]--, a[id].pop_back();
		else {
			cin >> c;
			int st[3] = {}, en[3] = {sz[0], sz[1], sz[2]};
			a[--id] += c, st[id] = en[id] = ++sz[id];
			for (int i = st[0]; i <= en[0]; i++)
				for (int j = st[1]; j <= en[1]; j++)
					for (int k = st[2]; k <= en[2]; k++) {
						dp[i][j][k] = (i || j || k? n: -1);
						if (i) {
							auto it = p[a[0][i - 1] - 'a'].upper_bound(dp[i - 1][j][k]);
							if (it != p[a[0][i - 1] - 'a'].end())
								dp[i][j][k] = min(dp[i][j][k], *it);
						}
						if (j) {
							auto it = p[a[1][j - 1] - 'a'].upper_bound(dp[i][j - 1][k]);
							if (it != p[a[1][j - 1] - 'a'].end())
								dp[i][j][k] = min(dp[i][j][k], *it);
						}
						if (k) {
							auto it = p[a[2][k - 1] - 'a'].upper_bound(dp[i][j][k - 1]);
							if (it != p[a[2][k - 1] - 'a'].end())
								dp[i][j][k] = min(dp[i][j][k], *it);
						}
					}
		}
		cout << (dp[sz[0]][sz[1]][sz[2]] < n? "YES\n": "NO\n");
	}
}
