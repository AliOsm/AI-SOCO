/*
    Author: Nguyen Tan Bao
    Status:
    Idea:
*/
 
#include <bits/stdc++.h>
#define FI first
#define SE second
#define EPS 1e-9
#define ALL(a) a.begin(),a.end()
#define SZ(a) int((a).size())
#define MS(s, n) memset(s, n, sizeof(s))
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORE(i,a,b) for (int i = (a); i >= (b); i--)
#define FORALL(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
//__builtin_ffs(x) return 1 + index of least significant 1-bit of x
//__builtin_clz(x) return number of leading zeros of x
//__builtin_ctz(x) return number of trailing zeros of x
 
using namespace std;
using ll = long long;
using ld = double;
typedef pair<int, int> II;
typedef pair<int, II> III;
typedef complex<ld> cd;
typedef vector<cd> vcd;
 
const ll MODBASE = 1000000007LL;
const int MAXN = 1000010;
const int MAXM = 30010;
const int MAXK = 16;
const int MAXQ = 200010;

string s[MAXN];
int dist[MAXN], e[MAXN];
int n, m;
queue<II> q, q2;
int dx[8] = {1,0,0,-1,-1,-1,1,1};
int dy[8] = {0,1,-1,0,1,-1,-1,1};

int toIndex(int i, int j) {
    return (i-1) * m + j;
}

bool check(int d) {
    while (!q.empty()) q.pop();
    while (!q2.empty()) q2.pop();
    FOR(i,1,n)
        FOR(j,1,m)
            if (dist[toIndex(i,j)] >= d) {
                q.push(II(i,j));
                e[toIndex(i,j)] = 1;
            }
            else e[toIndex(i,j)] = 0;

    FOR(p,1,d) {
        while (!q2.empty()) q2.pop();
        while (!q.empty()) {
            II r = q.front(); q.pop();
            FOR(i,0,7) {
                int u = r.FI + dx[i];
                int v = r.SE + dy[i];
                if (s[u][v] == 'X') {
                    if (e[toIndex(u,v)] == 0) {
                        e[toIndex(u,v)] = 1;
                        q2.push(II(u,v));
                    }
                }
                else return false;
            }
        }
        q = q2;
    }
    FOR(i,1,n)
        FOR(j,1,m)
            if ((s[i][j] == 'X') != e[toIndex(i,j)]) return false;
    return true;
}

bool check2(int i, int j) {
    int cnt = 0;
    FOR(k,0,7) cnt += s[i+dx[k]][j+dy[k]] == 'X';
    return cnt == 8;
}


int main() {
    ios::sync_with_stdio(0);
    cin.tie(nullptr);
    cin >> n >> m;
    FOR(i,1,n) {
        cin >> s[i];
        s[i] = "." + s[i] + ".";
    }
    s[0] = s[n+1] = s[1];
    FOR(i,1,m) s[0][i] = s[n+1][i] = '.';

    FOR(i,1,n) FOR(j,1,m) dist[toIndex(i,j)] = 1000000000;
    FOR(i,1,n)
        FOR(j,1,m)
            if (s[i][j] == 'X' && !check2(i,j)) {
                q.push(II(i,j));
                dist[toIndex(i,j)] = 0;
            }

    while (!q.empty()) {
        II r = q.front(); q.pop();
        FOR(i,0,7) {
            int u = r.FI + dx[i];
            int v = r.SE + dy[i];
            if (s[u][v] == 'X' && dist[toIndex(u,v)] > dist[toIndex(r.FI,r.SE)] + 1) {
                dist[toIndex(u,v)] = dist[toIndex(r.FI,r.SE)] + 1;
                q.push(II(u,v));
            }
        }
    }

    FOR(i,1,n) FOR(j,1,m)
        if (dist[toIndex(i,j)] == 1000000000) dist[toIndex(i,j)] = -1;

    int dau = 0, cuoi = 10000000, mid;
    while (dau <= cuoi) {
        mid = (dau + cuoi) >> 1;
        if (check(mid)) dau = mid+1;
        else cuoi = mid-1;
    }

    cout << cuoi << "\n";
    FOR(i,1,n) {
        FOR(j,1,m)
            if (dist[toIndex(i,j)] >= cuoi) cout << 'X';
            else cout << '.';
        cout << "\n";
    }
    return 0;
}
