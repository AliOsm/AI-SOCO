#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<ll> vll;
typedef pair<int, int> pii;
typedef vector<string> vs;
typedef vector<bool> vb;
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vector<int> > vvi;
typedef vector<pii> vii;
typedef vector<vector<pii> > vvii;
typedef long double ld;
typedef map<int, int> mapii;
typedef map<string, int> mapsi;

#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pi  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-8)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) { x, {y, z } }

char arr[50][50];

void filla()
{
	rep(i, 0, 25)
		rep(j, 0, 25)
			arr[i][j] = 'A';
}

void fillb()
{
	rep(i, 0, 25)
		rep(j, 25, 50)
			arr[i][j] = 'B';
}

void fillc()
{
	rep(i, 25, 50)
		rep(j, 0, 25)
			arr[i][j] = 'C';
}

void filld()
{
	rep(i, 25, 50)
		rep(j, 25, 50)
			arr[i][j] = 'D';
}

int a, b, c, d;
int dx[] =
{ 0, 0, 1, -1 };
int dy[] =
{ 1, -1, 0, 0 };

bool valid(int i, int j)
{
	return (i >= 0 && j >= 0 && i < 50 && j < 50);
}

bool check(int i, int j, char c)
{
	int cnt = 0, p = 0;
	rep(a, 0, 4)
	{
		int x = i + dx[a], y = j + dy[a];
		if (valid(x, y))
		{
			p++;
			if (arr[x][y] != c)
				cnt++;
		}
	}
	return (cnt == p);
}

bool free(int i, int j, char c)
{
	int cnt = 0;
	rep(a, 0, 4)
	{
		int x = i + dx[a], y = j + dy[a];
		if (valid(x, y))
		{
			cnt += (arr[x][y] == c);
		}
	}
	return (cnt > 2);
}

void placea()
{
	rep(i, 0, 24)
	{
		rep(j, 0, 24)
		{
			if (b && check(i, j, 'B') && free(i - 1, j, 'A'))
			{
				arr[i][j] = 'B';
				b--;
			}
			else if (c && check(i, j, 'C') && free(i - 1, j, 'A'))
			{
				arr[i][j] = 'C';
				c--;
			}
			else if (d && check(i, j, 'D') && free(i - 1, j, 'A'))
			{
				arr[i][j] = 'D';
				d--;
			}
		}
	}
}

void placeb()
{
	rep(i, 0, 24)
	{
		rep(j, 26, 50)
		{
			if (a && check(i, j, 'A') && free(i - 1, j, 'B'))
			{
				arr[i][j] = 'A';
				a--;
			}
			else if (c && check(i, j, 'C') && free(i - 1, j, 'B'))
			{
				arr[i][j] = 'C';
				c--;
			}
			else if (d && check(i, j, 'D') && free(i - 1, j, 'B'))
			{
				arr[i][j] = 'D';
				d--;
			}
		}
	}
}

void placec()
{
	rep(i, 26, 50)
	{
		rep(j, 0, 24)
		{
			if (b && check(i, j, 'B') && free(i - 1, j, 'C'))
			{
				arr[i][j] = 'B';
				b--;
			}
			else if (a && check(i, j, 'A') && free(i - 1, j, 'C'))
			{
				arr[i][j] = 'A';
				a--;
			}
			else if (d && check(i, j, 'D') && free(i - 1, j, 'C'))
			{
				arr[i][j] = 'D';
				d--;
			}
		}
	}
}

void placed()
{
	rep(i, 26, 50)
	{
		rep(j, 26, 50)
		{
			if (b && check(i, j, 'B') && free(i - 1, j, 'D'))
			{
				arr[i][j] = 'B';
				b--;
			}
			else if (c && check(i, j, 'C') && free(i - 1, j, 'D'))
			{
				arr[i][j] = 'C';
				c--;
			}
			else if (a && check(i, j, 'A') && free(i - 1, j, 'D'))
			{
				arr[i][j] = 'A';
				a--;
			}
		}
	}
}

map<char, int> mp;
bool visited[51][51];
void flood(int i, int j)
{
	visited[i][j] = true;
	rep(a, 0, 4)
	{
		int x = i + dx[a], y = j + dy[a];
		if (valid(x, y) && !visited[x][y] && arr[x][y] == arr[i][j])
			flood(x, y);
	}
}

void check()
{
	rep(i, 0, 50)
	{
		rep(j, 0, 50)
		{
			if (!visited[i][j])
			{
				mp[arr[i][j]]++;
				flood(i, j);
			}
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> a >> b >> c >> d;

	filla(), fillb(), fillc(), filld();

	a--, b--, c--, d--;

	while (a + b + c + d)
	{
		placea();
		placeb();
		placec();
		placed();
	}
	cout << "50 50\n";
	rep(i, 0, 50)
	{
		rep(j, 0, 50)
			cout << arr[i][j];
		cout << endl;
	}

//	check();
//	cout << mp['A'] << " " << mp['B'] << " " << mp['C'] << " " << mp['D']
//			<< endl;

	return 0;
}

