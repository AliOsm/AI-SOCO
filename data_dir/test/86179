#include <bits/stdc++.h>
/*
Spesialist, here i come :v
*/
#define ld long double
#define ll long long
#define mp make_pair
#define pb push_back
#define endl '\n'
#define mod 1000000007
#define INF 1000000000
#define PI acos(-1.0)
using namespace std;
ll prime[1<<20];    int numofprimes;
ll gcd(ll a, ll b) { return (b == 0 ? a : gcd(b, a % b)); }
ll lcm(ll a, ll b) { return (a * (b / gcd(a, b))); }
ll POWER(ll x,ll y, ll m){
    if(y==0) return 1;
    if(y%2==0) { ll temp= POWER(x,y/2,m);   temp*=temp; temp%=m;	return temp;	}
    ll temp= POWER(x,y-1,m);    temp*=x;	temp%=m;	return temp;
}
ll POWER(ll x,ll y){
    if(y==0) return 1;
    if(y%2==0) { ll temp= POWER(x,y/2);   temp*=temp;  return temp;	}
    ll temp= POWER(x,y-1);    temp*=x;	return temp;
}
void runEratosthenesSieve(int upperBound){
    int upperBoundSquareRoot = (int)sqrt((double)upperBound);
    bool *isComposite = new bool[upperBound + 1];
    memset(isComposite, 0, sizeof(bool) * (upperBound + 1));
    for (int m = 2; m <= upperBoundSquareRoot; m++) {
        if (!isComposite[m]) {
                prime[numofprimes++]=m;
                for (int k = m * m; k <= upperBound; k += m)
                    isComposite[k] = true;
        }
    }
    for (int m = upperBoundSquareRoot+1; m <= upperBound; m++)
        if (!isComposite[m])
                prime[numofprimes++]=m;
    delete [] isComposite;
}

int main(){
    ifstream fin("ali");
    int a,b;
    cin>>a>>b;
    ll ans=0;
    while(1){
        if(a<=0 || b<=0)break;
        if(a==1 && b==1)break;
        if(a>b){
            ans++;
            a-=2;
            b++;
            continue;
        }
        ans++;
        b-=2;
        a++;
    }
    cout<<ans<<endl;
}
