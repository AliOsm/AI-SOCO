#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<long long, int>, // change type
//        null_type,
//        less<pair<long long, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

//template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)(x).size()
#define pb push_back
#define X first
#define Y second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
#define debug(x) cerr << #x << " : " << (x) << endl
const double PI = 3.14159265358979323846;
const double eps = (1e-10);
int isGreater(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}


const int MAX_N = 101;
int sum[MAX_N], index[MAX_N];

int getSum(int l, int r)
{
    if (l > r)
        return 0;
    int ret = sum[r];
    if (l)
        ret -= sum[l - 1];
    return ret;
}

bool valid(int l, int r)
{
    return getSum(l, r) == max(0, r - l + 1);
}

void solve()
{
    clr(sum, 0);
    int n, m;
    cin >> n >> m;
    vector<int> a(n);
    rep(i,0,n)
        cin >> a[i];
    rep(i,0,m)
    {
        int p;
        cin >> p;
        --p;
        sum[p] = 1;
    }
    for (int i = 1; i < MAX_N; ++i)
        sum[i] += sum[i - 1];
    vector<int> b(a);
    sort(all(b));
    for (int i = n - 1; i >= 0; --i)
        index[b[i]] = i;

    for (int i = 0; i < n; ++i)
    {
        int to = index[a[i]];
        if (to < i)
        {
            int l, r;
            l = to, r = i - 1;
            if (!valid(l, r))
            {
                cout << "NO\n";
                return;
            }
        }
        index[a[i]]++;
    }
    cout << "YES\n";
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("AC.txt", "w", stdout);
#endif
    int tc;
    cin >> tc;
    while(tc--)
    {
        solve();
    }

    return 0;
}