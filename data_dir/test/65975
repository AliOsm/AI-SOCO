#include <bits/stdc++.h>

using namespace std;

const int maxn = 1e6 + 100;
vector <int> adj[maxn];
bool mark[maxn], bad[maxn];

bool dfs(int v) {
	mark[v] = true;
	bool ret = bad[v];
	for (auto u : adj[v])
		if (!mark[u])
			ret |= dfs(u);
	return ret;
}

int main() {
	ios_base::sync_with_stdio(false);
	int n, m;
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		int v, u;
		cin >> v >> u;
		v--, u--;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}

	int ans = 0;
	for (int v = 0; v < n; v++)
		if ((int)adj[v].size() % 2 == 1)
			bad[v] = true, ans++;

	int x = 0, y = 0;
	for (int v = 0; v < n; v++)
		if (!mark[v]) {
			if (dfs(v))
				x++, ans -= 2;
			else {
				if (v == 0 || adj[v].size() != 0)
					y++;
			}
		}
	ans /= 2;
	ans += x + y;
	if (x == 0 && y == 1)
		ans--;
	cout << ans << endl;
	return 0;
}