#include "bits/stdc++.h"
#include "ext/pb_ds/tree_policy.hpp"
#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}

template<int maxn>
struct dsu{
    int f[maxn];
    dsu(){
        init();
    }
    void init(){
        REP(i,0,maxn)f[i] = i;
    }
    int fa(int c){
        if(c==f[c])return c;
        return f[c]=fa(f[c]);
    }
    void merge(int a,int b){
        if(fa(a)==fa(b))return;
        f[fa(a)] = fa(b);
    }
    bool same(int a,int b){
        return fa(a) == fa(b);
    }
};

dsu<100010>bcj;

bool isLucky(int c){
    while(c){
        if(c%10!=4&&c%10!=7)return false;
        c/=10;
    }
    return true;
}

int sum[100010];
int main(){
    int n;in(n);
    REP(i,1,n){
        int u,v,len;in(u);in(v);in(len);
        if(!isLucky(len))bcj.merge(u,v);
    }
    REP(i,1,n+1){
        sum[bcj.fa(i)]++;
    }
    ll ans = 0;
    REP(i,1,n+1){
        ll temp = bcj.fa(i);
        temp = n-sum[temp];
        ans+=temp*(temp-1);
    }
    cout<<ans;
    return 0;
}