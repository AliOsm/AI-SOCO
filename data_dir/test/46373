#include <bits/stdc++.h>

using namespace std;

int len[6] ;
double cross(double x1, double y1, double x2 , double y2)
{
    return x1*y2 - x2*y1 ;
}
pair < double, double> rotate_point(double x, double y, double x0 =0 , double y0 =0, double theta = 30/180. * acos(-1) )
{
    double x1, y1 ;
    x -= x0 ; y -= y0 ;
    x1 = x * cos(theta) - y * sin(theta) ;
    y1 = y * cos(theta) + x * sin(theta) ;
    return {x1 + x0,y1+ y0} ;
}
double dot(double x1, double y1, double x2, double y2)
{
    return x1*x2 + y1*y2 ;
}
pair < double, double > move_along_line(double x0, double y0, double x1, double y1, double dst)
{
    double x = x1-x0, y = y1-y0;
    double norm = sqrt(dot(x,y,x,y)) ;
    x/= norm ; y /= norm ;
    return {x0+x*dst, y0+y*dst};
}
double f_dst(double x1, double y1, double x2, double y2)
{
    return sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2)) ;
}
double move_along_polygon()
{
    int n = 6;
    double x[n],y[n];
    x[0]=y[0] = 0 ;
    x[1] = len[0] ;
    y[1] = 0 ;
    x[2] = len[0] + len[1] ;
    y[2] = 0 ;
    pair < double, double > p ;
    double area = 0 ;
    for ( int i =2 ; i < n-1 ; ++i )
    {
        p = rotate_point(x[i],y[i], x[i-1],y[i-1], 60/180.0*acos(-1)) ;
        x[i] = p.first ; y[i] = p.second ;
        p = move_along_line(x[i-1],y[i-1],x[i],y[i], len[i]+len[i-1]) ;
        x[i+1] = p.first ;
        y[i+1] = p.second ;
        area += cross(x[i],y[i],x[i-1],y[i-1]) ;
    }
    p = rotate_point(x[5],y[5], x[4],y[4], 60/180.*acos(-1)) ;
    x[5] = p.first ; y[5] = p.second;
    area += cross(x[5],y[5],x[4],y[4]) ;
    area = abs(area)/2.0 ;
    return area ;
}
int main()
{
    ios_base::sync_with_stdio(0) ; cin.tie(0) ;
    for ( int i = 0 ; i < 6 ; ++i ) cin >> len[i];
    double area = move_along_polygon();
    double tri_area = sin(60*acos(-1)/180) / 2.0 ;
    cout << fixed << setprecision(0) << area/tri_area ;

    return 0 ;
}
