#include <bits/stdc++.h>
using namespace std;

int N, k;

vector<int> X[2020];
int C[2020], A[2020];

void getSubtree(int node, int par, vector<int> &V)
{
    V.push_back(A[node]);

    for(auto x : X[node])
        if(x != par)
            getSubtree(x, node, V);
}

bool dfs(int node, int par)
{
    for(auto x : X[node])
        if(x != par)
        {
            if(!dfs(x, node))
                return false;
        }
    
    vector<int> V;
    A[node] = ++k;
    getSubtree(node, par, V);

    if(C[node] >= V.size())
    {
        V.clear();
        return false;
    }

    sort(V.begin(), V.end());
    int curr = V[ C[node] ];
    V.clear();
    
    for(int i=1; i<=N; i++)
        if(A[i] && A[i] >= curr)
            A[i]++;
    
    A[node] = curr;
    return true;
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(NULL), cout.tie(NULL);

    cin >> N;

    int root = 0;

    for(int i=1; i<=N; i++)
    {
        int p;
        cin >> p >> C[i];

        if(p)
        {
            X[p].push_back(i);
            X[i].push_back(p);
        }
        else
            root = i;
    }

    if(!dfs(root, 0))
    {
        cout << "NO\n";
        return 0;
    }

    cout << "YES\n";

    for(int i=1; i<=N; i++)
        cout << A[i] << " ";

    return 0;
}
