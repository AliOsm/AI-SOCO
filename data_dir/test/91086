#include<bits/stdc++.h>

using namespace std;

const int Maxn = 5000 + 10;
int n, m, t;
long long dis[Maxn][Maxn];
vector<int> adj[Maxn], jda[Maxn], w[Maxn], lst;
bool mark[Maxn];

void dfs(int v) 
{
	mark[v] = true;
	for(int i = 0; i < (int)adj[v].size(); i ++) 
	{
		if(! mark[adj[v][i]]) 
			dfs(adj[v][i]);
	}
	lst.push_back(v);
	return;
}

void pp(int i, int j) {
	if(i == 0)
	{
		cout << i + 1 << " ";
		return;
	}
	for(int l = 0; l < (int)jda[i].size(); l ++)
		if(dis[jda[i][l]][j - 1] == dis[i][j] - w[i][l])
		{
			pp(jda[i][l], j - 1);
			cout << i + 1 << " ";
			return;
		}
	return;
}

int main() {
	cin >> n >> m >> t;
	for(int i = 0; i < m; i ++) 
	{
		int u, v, wei;
		cin >> u >> v >> wei;
		u --; v --;
		adj[u].push_back(v);
		w[v].push_back(wei);
		jda[v].push_back(u);
	}
	dfs(0);
	reverse(lst.begin(), lst.end());
	for(int i = 0; i < n; i ++)
		for(int j = 0; j <= n; j ++)
			dis[i][j] = LLONG_MAX / 2;
	dis[0][1] = 0;
	for(int i = 0; i < (int)lst.size(); i ++) 
	{
		if(lst[i] == 0)
			continue;
		int u = lst[i];
		for(int j = 1; j <= n; j ++)
			for(int l = 0; l < (int)jda[u].size(); l ++) 
				dis[u][j] = min(dis[u][j], dis[jda[u][l]][j - 1] + w[u][l]);
	}
	for(int i = n; i > 0; i --) 
	{
		if(dis[n - 1][i] <= t) 
		{
			cout << i << endl;
			pp(n - 1, i);
			cout << endl;
			return 0;
		}
	}
	return 0;
}