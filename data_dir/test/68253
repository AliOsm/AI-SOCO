#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <cmath>
#include <ctime>
#include <string>
#include <cstdlib>
#include <algorithm>
using namespace std;
#define read            freopen("C:\\Users\\USER\\Desktop\\in.txt", "r", stdin)
#define write           freopen("C:\\Users\\USER\\Desktop\\in.txt", "a", stdout)
#define rep(n)          for (i=0; i<(n); i++)
#define rep1(a, n)      for (i=(a); i<(n); i++)
#define rep2(i, a, n)   for ((i)=(a); (i)<(n); (i)++)
#define pii             pair<int, int>
#define pll             pair<LL, LL>
#define inf             1<<30
#define in(a)           scanf("%d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%d%d", &a, &b)
#define in3(a, b, c)    scanf("%d%d%d", &a, &b, &c)
#define pn              printf("\n");
#define pcs(a)          printf("Case %d: ", a)
#define pr(a)           printf("%d\n", a)
#define pr(a)           printf("%d\n", a)
#define prs(a)          printf("%d ", a)
#define pr2(a, b)       printf("%d %d\n", a, b)
#define pr3(a, b ,c)    printf("%d %d %d\n", a, b, c)
#define MP              make_pair
#define vi              vector<int>
#define vll             vector<LL>
#define msi             map<string, int>
#define mll             map<LL, LL>
#define _ceil(n, a)     (n)%(a)==0?((n)/(a)):((n)/(a)+1);
#define cl              clear()
#define sz              size()
#define pb              push_back
#define MAX(A,B)        (((A)>(B))?(A):(B))
#define MIN(A,B)        (((A)<(B))?(A):(B))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
typedef long long LL;
//int  dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int  dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int  dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(int n, int pos) {return (bool) (n & (1<<pos));}
//int  on(int n, int pos) {return n | (1<<pos);}
//int  off(int n, int pos) {return n & ~(1<<pos);}
//bool operator < (const data &d) const{return cost<d.cost;}

/* ***************************************************************************************
   *************************************************************************************** */
#define M 101000
int degree[M], visited[M], C[M], indx=0;
map<int, int>city;
vi A[M];
void dfs(int u)
{
    int i, v;
    visited[u]=true;
    prs(C[u]);

    for (i=0; i<A[u].sz; i++)
    {
        v=A[u][i];
        if (!visited[v])
        {
            dfs(v);
        }
    }
}
int main()
{
#ifndef ONLINE_JUDGE
    read;
#endif
    int i, j, k, n;
    in(n);

    rep(M) visited[i]=degree[i]=0;
    rep(n)
    {
        in2(j, k);

        if (city[j]==0) city[j]=++indx;
        if (city[k]==0) city[k]=++indx;

        C[city[k]]=k;
        C[city[j]]=j;

        A[city[j]].pb(city[k]);
        A[city[k]].pb(city[j]);

        degree[city[j]]++;
        degree[city[k]]++;
    }

    rep1(1, n+2)
    {
        if (degree[i]==1)
        {
            dfs(i);
            return 0;
        }
    }
return 0;
}
