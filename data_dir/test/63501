#include <stdio.h>
#include <algorithm>
#include <string.h>
#define lli long long int
using namespace std;

const int MOD = (int)1e9 + 7;
const int MAXN = 202;
const int MAX_K = 1002;

int n, k;
int a[MAXN];
int dp[MAXN][MAXN][MAX_K];

int solve(int pos, int open, int imba) {
    if (imba > k || open < 0) return 0;
    if (pos > n) return open == 0 && imba <= k;
    if (dp[pos][open][imba] != -1) return dp[pos][open][imba];

    int& ans = dp[pos][open][imba];
    ans = 0;

    long long new_imba = imba + open * (a[pos] - a[pos - 1]);
    // add to open and keep opened
    ans += (1LL * open * solve(pos + 1, open, new_imba)) % MOD;
    ans %= MOD;
    // add open and close
    ans += (1LL * open * solve(pos + 1, open - 1, new_imba)) % MOD;
    ans %= MOD;
    // add to new set and leave opened
    ans += solve(pos + 1, open + 1, new_imba);
    ans %= MOD;
    // add to new set and close
    ans += solve(pos + 1, open, new_imba);
    ans %= MOD;

    return ans;
}

int main(void) {

    scanf(" %d %d", &n, &k);
    for (int i = 1; i <= n; i++) {
        scanf(" %d", &a[i]);
    }

    sort(a + 1, a + 1 + n);
    a[0] = a[1];
    memset(dp, -1, sizeof(dp));
    lli ans = solve(1, 0, 0);
    printf("%lld\n", ans);

    return 0;
}
