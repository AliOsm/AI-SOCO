#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <cassert>

using namespace std;

const int MOD = 998244353;

int n, m;
vector<vector<int>> g;

void add(int &x, int y) {
	x += y;
	if (x >= MOD) x -= MOD;
}

int mult(int x, int y) {
	return (long long) x * y % MOD;
}

void read() {
	cin >> n >> m;
	g.clear();
	g.resize(n);
	for (int i = 0; i < m; ++i) {
		int a, b;
		cin >> a >> b;
		--a; --b;
		g[a].push_back(b);
		swap(a, b);
		g[a].push_back(b);
	}
}

int pow2(int n) {
	int res = 1;
	for (int i = 0; i < n; ++i) {
		res = res * 2 % MOD;
	}
	return res;
}

pair<int, int> dfs(int v, vector<int> &color, int curColor) {
	color[v] = curColor;
	pair<int, int> res = make_pair(1, 0);
	for (auto to: g[v]) {
		if (color[to] == color[v]) {
			return make_pair(-1, -1);
		} else if (color[to] != 0) {
			continue;
		} else {
			auto tmp = dfs(to, color, 3 - curColor);
			if (tmp.first == -1) return tmp;
			res.first += tmp.second;
			res.second += tmp.first;
		}
	}
	return res;
}

void solve() {
	vector<int> color(n);
	int res = 1;
	for (int i = 0; i < n; ++i) {
		if (color[i] == 0) {
			pair<int, int> sz = dfs(i, color, 1);
			if (sz.first != -1) {
				int cnt = pow2(sz.first);
				add(cnt, pow2(sz.second));
				res = mult(res, cnt);
			} else {
				res = 0;
			}
		}
	}
	cout << res << '\n';
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	int tests;
	cin >> tests;
	for (int test = 1; test <= tests; ++test) {
		read();
		solve();
	}
	return 0;
}
