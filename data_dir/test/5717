#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <memory.h>
#include <ctime>
 
using namespace std;
 
#define ABS(a) ((a>0)?a:-(a))
#define MIN(a,b) ((a<b)?(a):(b))
#define MAX(a,b) ((a<b)?(b):(a))
#define FOR(i,a,n) for (int i=(a);i<(n);++i)
#define FI(i,n) for (int i=0; i<(n); ++i)
#define pnt pair <int, int>
#define mp make_pair
#define PI 3.14159265358979
#define MEMS(a,b) memset(a,b,sizeof(a))
#define LL long long
#define U unsigned

vector<vector<pnt > > g;
int lab[5010];
LL ans[5010];
LL intree[5010];
int sz[5010];
int h[5010];
LL min1[2];
inline void dfs1(int v, int p)
{
	sz[v]=1;
	intree[v]=ans[v]=0;
	FOR(i,0,g[v].size())
	{
		int to=g[v][i].first;
		if (to==p)
			continue;
		dfs1(to,v);
		sz[v]+=sz[to];
		intree[v]+=intree[to]+g[v][i].second*1ll*sz[to];
	}
}

inline void dfs2(int v, int p, int root, int how)
{
	h[v]=how;
	if (v==root)
	{
		ans[v]=intree[v];
		min1[how]=MIN(min1[how],ans[v]);
	}
	FOR(i,0,g[v].size())
	{
		int to=g[v][i].first;
		if (to==p)
			continue;
		ans[to]=intree[to]+(ans[v]-intree[to]-g[v][i].second*1ll*sz[to]+g[v][i].second*1ll*(sz[root]-sz[to]));
		min1[how]=MIN(min1[how],ans[to]);
		dfs2(to,v,root,how);
	}
}
int main()
{
#ifdef Fcdkbear
    double beg=clock();
	freopen("in.txt","r",stdin);
    //freopen("out.txt","w",stdout);
#endif

	int n;
	scanf("%d",&n);
	g.resize(n);
	FOR(i,0,n-1)
	{
		int v1,v2,w;
		scanf("%d%d%d",&v1,&v2,&w);
		v1--;
		v2--;
		g[v1].push_back(mp(v2,w));
		g[v2].push_back(mp(v1,w));
	}
	LL res=1000000000000000000ll;
	FOR(i,0,n)
	{
		int v1=i;
		FOR(j,0,g[i].size())
		{
			int v2=g[i][j].first;
			if (v1>v2)
				continue;
			int w=g[i][j].second;
			min1[0]=min1[1]=1000000000000000000ll;
			dfs1(v1,v2);
			dfs1(v2,v1);
			dfs2(v1,v2,v1,0);
			dfs2(v2,v1,v2,1);
			LL sum=0;
			FOR(k,0,n)
				sum+=ans[k];
			res=MIN(res,sum/2+min1[0]*1ll*sz[v2]+min1[1]*1ll*sz[v1]+sz[v1]*1ll*w*sz[v2]);
		}
	}
	cout<<res<<endl;
#ifdef Fcdkbear
    double end=clock();
    fprintf(stderr,"*** Total time = %.3lf ***\n",(end-beg)/CLOCKS_PER_SEC);
#endif
    return 0;
}