#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define FILE "series"
#define ld long double
#define endl '\n'
#define pii pair <int, int>
#define last fedgfre
//#define int long long

//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;
using namespace __gnu_pbds;

typedef tree <int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const int N = 3e5 + 5;
const ll mod = 998244353;
const int rx[8] = {1, -1, 0, 0, 1, 1, -1, -1 };
const int ry[8] = {0, 0, 1, -1, 1, -1, 1, -1 };
const ld pi = acos(-1.0);
const int B = (int)sqrt(N);

mt19937 gen(chrono::high_resolution_clock::now().time_since_epoch().count());

vector <int> g[N];
map <pii, int> cost;
int a[N];
ll dp[N];
ll res = 0;

void solve(int v, int pr) {
    vector <ll> paths;
    for (int to : g[v]) {
        if (to == pr) continue;
        solve(to, v);
        int cost = ::cost[ {v, to}];
        ll cur = dp[to] - cost;
        paths.pb(cur);
    }
    sort(paths.rbegin(), paths.rend());
    while (paths.size() < 2) paths.pb(0);
    res = max(res, a[v] + paths[0] + paths[1]);
}

void precalc(int v, int pr) {
    dp[v] = a[v];
    ll opt = -1e18;
    for (int to : g[v]) {
        if (to == pr) continue;
        precalc(to, v);
        int cost = ::cost[ {v, to}];
        ll cur = dp[to] - cost;
        opt = max(opt, cur);
    }
    if (opt > 0) dp[v] += opt;
    res = max(res, dp[v]);
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //  srand(time(0));
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
//       freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#endif // LOCAL
   int n;
    cin >> n;
    for (int i = 0; i < n; i++) cin >> a[i], res = max(res, 1ll * a[i]);
    for (int i = 0; i < n - 1; i++) {
        int x, y, c;
        cin >> x >> y >> c;
        g[x - 1].pb(y - 1);
        g[y - 1].pb(x - 1);
        cost[ {x - 1, y - 1}] = c;
        cost[ {y - 1, x - 1}] = c;
    }
    precalc(0, -1);
    solve(0, -1);
    cout << res;
    return 0;
}