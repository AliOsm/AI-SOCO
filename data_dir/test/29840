#include<bits/stdc++.h>
#define ll long long
#define pii pair<int,int>
#define sf(a) scanf("%d",&a)
#define pf(a) printf("%d\n",a)
#define mem(a,b) memset(a,b,sizeof(a))
#define all(x) x.begin(),x.end()
#define rall(x) x.rbegin(),x.rend()
#define pb push_back
#define F first
#define S second
#define Check cout<< "Done in " << clock() / CLOCKS_PER_SEC <<" sec"<< endl;
#define FastRead ios_base::sync_with_stdio(false);cin.tie(NULL);
using namespace std;
const int MAX = 505;
ll dp[MAX][MAX], first[MAX], last[MAX], classes[MAX] , minDuration[MAX][MAX];
int n , m , k;
string s[MAX];
ll DP(int i,int cnt)
{
    if(cnt<0)
        return 1e9;
    if(i == n)
        return 0;
    ll &ret = dp[i][cnt];
    if(ret != -1)
        return ret;
    ret = DP(i+1,cnt)+minDuration[i][classes[i]];
    for(int j=classes[i]-1;j>=0;j--)
        ret = min(ret,DP(i+1,cnt-(classes[i]-j))+minDuration[i][j]);
    return ret;
}
int main()
{
    FastRead
    cin >> n >> m >> k;
    mem(first,-1);
    for(int i=0; i<n; i++)
    {
        cin >> s[i];
        for(int j=0; j<m; j++)
        {
            if(s[i][j] == '1')
            {
                if(first[i] == -1)
                    first[i] = j;
                last[i] = j;
            }
        }
        if(first[i] != -1)
        {
            for(int j=first[i]; j<=last[i]; j++)
                if(s[i][j] == '1')
                    classes[i]++;
        }
    }
    for(int i=0; i<n; i++)
    {
        for(int j=1; j<=classes[i]; j++)
        {
            deque<ll> dq;
            ll frst,lst;
            minDuration[i][j] = 1e9;
            for(int k=0; k<m; k++)
            {
                if(s[i][k]=='1')
                {
                    dq.push_back(k);
                    if(dq.size()==j)
                    {
                        frst = dq.front();
                        lst = dq.back();
                        minDuration[i][j] = min(minDuration[i][j],lst-frst+1);
                        dq.pop_front();
                    }
                }
            }
            if(minDuration[i][j]==1e9)
                minDuration[i][j] = 0;
            //cout << i << " " << j << " " << minDuration[i][j] << endl;
        }
    }
    mem(dp,-1);
    cout << DP(0,k) << endl;
}
