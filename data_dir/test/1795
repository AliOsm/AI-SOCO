#include <bits/stdc++.h>

using namespace std;

const int Inf = 1e9;
const int N = 1001000;

int n, k;
int Dp[N];  /// Max Depth
int Ans = 0;
int Depth[N];
vector <int> Adj[N];

void max_self(int& x, int y)
{
    x = max( x, y);
}

void DFS0(int x, int p = 0)
{
    Dp[x] = Depth[x] = 1 + Depth[p];

    for(int y : Adj[x])
        if(y != p)
            DFS0( y, x), max_self( Dp[x], Dp[y]);

    if(Adj[x].size() == 1)  Ans++;
}

int Solve(int x, int p = 0)
{
    if(Adj[x].size() == 1)  return Depth[x];

    vector <int> Ch;

    for(int y : Adj[x])
        if(y != p)
            Ch.push_back( Solve( y, x));

    sort( Ch.begin(), Ch.end());

    int Last = Inf;

    while(!Ch.empty())
    {
        if(Last + Ch.back() - 2 * Depth[x] <= k)
        {
            Ans--;
        }

        else
        {
            Last = Ch.back();
        }

        Ch.pop_back();
    }

    return Last;
}

int main()
{
    cin >> n >> k;

    for(int i = 1; i < n; i++)
    {
        int x, y;   scanf("%d%d", &x, &y);

        Adj[x].push_back(y);
        Adj[y].push_back(x);
    }

    int Root = 1;

    while(Adj[Root].size() <= 1)    Root++;

    assert(Root <= n);

    DFS0(Root);
    Solve(Root);

    cout << Ans << endl;
}
