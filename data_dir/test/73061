#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define SPEED ios_base::sync_with_stdio(false); cin.tie(NULL);
#define FOR(i, a, b) for (ll i = a; i < b; ++i)
#define RFOR(i, b, a) for (ll i = b; i >= a; --i)
#define DEBUG(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' ');\
stringstream _ss(_s); istream_iterator<string> _it(_ss); _debug(_it, args);}
#define endl "\n"
#define F first
#define S second
#define pb(x) push_back(x)
#define ALL(x) x.begin(), x.end()
#define mp(x, y) make_pair(x, y)

using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

void _debug(istream_iterator<string>) {}
template<typename T, typename... Args>
void _debug(istream_iterator<string> it, T first, Args... args) {
    cerr << ">> " << *it << " : " << first << endl; _debug(++it, args...);
}
template <typename T1, typename T2>
inline ostream& operator << (ostream& out, pair<T1, T2>& p) {
    return out << "(" << p.F << ", " << p.S << ")";
}
template<typename T>
inline ostream& operator << (ostream& out, const vector<T>& v) {
    if (v.empty()) return out << "[]";
    else { out << '['; copy(ALL(v), ostream_iterator<T>(out, ", ")); return out << "\b\b]"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const set<T>& s) {
    if (s.empty()) return out << "{}";
    else { out << '{'; copy(ALL(s), ostream_iterator<T>(out, ", ")); return out << "\b\b}"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const unordered_set<T>& s) {
    return out << set<T>(ALL(s));
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const map<T1, T2>& m) {
    if (m.empty()) return out << "{}";
    out << '{'; for (auto p : m) { out << p << ", "; } return out << "\b\b}";
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const unordered_map<T1, T2>& m) {
    return out << map<T1, T2>(ALL(m));
}
template<typename T>
inline ostream& operator << (ostream& out, const ordered_set<T>& s) {
    return out << set<T>(ALL(s));
}

typedef long long ll;
typedef long double ld;
typedef vector<long long> vll;
typedef pair<ll, ll> pll;
typedef vector<pair<ll, ll>> vpll;
typedef unordered_map<ll, ll> STll;
/************************************** MAIN PROGRAM ********************************************/

const ll MOD = 1e9 + 9;

ll myPow(ll base, ll exp, ll mod = MOD)
{
    ll result = 1;
    while (exp > 0)
    {
        if (exp & 1) result = (result * base) % mod;
        base = (base * base) % mod;
        exp >>= 1;
    }
    return result;
}

ll modInverse(ll a, ll m = MOD)
{
    return myPow(a, m - 2, m);
}

ll mul(ll a, ll b, ll mod = MOD)
{
    return ((a % mod) * (b % mod)) % mod;
}

ll add(ll a, ll b, ll mod = MOD)
{
    return ((a % mod) + (b % mod) + mod) % mod;
}

int main()
{
  //  DEBUG(myPow(3, 2))
    //freopen("input.txt", "r", stdin);
    //DEBUG(-5 % 4 + 4)
    SPEED
    ll n, a, b, k;
    cin >> n >> a >> b >>k;
    vll s(k);
    FOR(i, 0, k)
    {
        char temp;
        cin >> temp;
        s[i] = (temp == '+') ? 1 : -1;
    }
    ll ans = myPow(a, n);
    ll sum = 0;
    ll q = (b * modInverse(a)) % MOD;
    //DEBUG(modInverse(a))
    FOR(i, 0, k)
    {
        sum = add(sum, s[i % k] * myPow(q, i));
    }

    ll gp_sum;
    if (myPow(q, k) == 1)
        gp_sum = (n + 1) / k;
    else {
        gp_sum = (myPow(myPow(q, k), (n + 1) / k) - 1 + MOD) % MOD;
        gp_sum = (gp_sum * modInverse(myPow(q, k) - 1)) % MOD;
    }
    ans = mul(mul(ans, sum), gp_sum);
    cout << ans;
}
/************************************** END OF PROGRAM ******************************************/
