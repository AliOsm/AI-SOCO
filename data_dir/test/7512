#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define all(x) x.begin(),x.end()

/* we need to store 3 parameters while building the string, one for the current index, for the current prefix, 
   and for the current suffix. 
   we need to check if the current char eqaul the current prefix and the current suffix, if so, we can make both moves and 
   find the optimal one, otherwise, if it either eqaul prifx or suffix, or nothing.
*/

int const N = 401;
int q, n, m, st;
short dp[N][N][N]; 
string s, t; 

short go(int cur, int pref, int suf){
      if(pref > st || suf > m)return false;
      if(cur == n){
         if(pref == st && suf == m)return true;
         return false;
      }
      short &ret = dp[cur][pref][suf];
      if(~ret)return ret;
      ret = go(cur+1, pref, suf);
      if(s[cur] == t[pref] && s[cur] == t[suf]){
         ret = max(ret, go(cur+1, pref+1, suf));
         ret = max(ret, go(cur+1, pref, suf+1));
      }
      if(s[cur] == t[pref]){
           ret = max(ret, go(cur+1, pref+1, suf));
      }
      if(s[cur] == t[suf]){
         ret = max(ret, go(cur+1, pref, suf+1));
      }
      return ret;
      
}

int main(){
    #ifndef ONLINE_JUDGE
    freopen("read.txt","r",stdin);
    #endif
    scanf("%d", &q);
    while(q--){
        cin >> s >> t;
        n = s.size(), m = t.size();
        memset(dp, -1, sizeof dp);
        int an = 0;
        for(int i = 0; i<m; ++i){
           st = i;
           int cur = go(0, 0, i);
           an = max(an, cur);
        }
        if(an)puts("YES");
        else puts("NO");
    }
}