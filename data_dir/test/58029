#include <cstdio>
#include <vector>
#include <cstring>

#define N (1<<18)

#define vi std::vector<int>

int n;
int color[N];
vi g[N];
int ans[N];

void dfs(int node, int parent)
{
   ans[node] = color[node] == 1 ? 1 : -1;
   
   for(int child: g[node])
   {
      if (child == parent)continue;
   
      dfs(child, node);
   
      if (ans[child] >0)
         ans[node] += ans[child];
   }
}

void solve(int node, int parent)
{
   if (node != 1){
      int can = ans[parent] - (ans[node] > 0 ? ans[node] : 0);
      ans[node] += can > 0 ? can : 0;
   }
   for(int child : g[node]){
      if (child == parent)continue;
      solve(child, node);
   }
}

int main(){
   
   scanf("%d", &n);
   
   for(int i= 1; i<=n ;++i) scanf("%d", &color[i]);
   
   for(int i = 1; i<n;++i)
   {
      int u,v;
      scanf("%d%d",&u,&v);
      g[u].push_back(v);
      g[v].push_back(u);
   }
    dfs(1, 0);
    
   solve(1, 0);
   for(int i = 1; i<=n;++i)
      printf("%d ", ans[i]);
}