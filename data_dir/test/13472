#include <bits/stdc++.h>
#define LL long long
#define mp make_pair
#define pb push_back
#define fi first
#define sc second
using namespace std;

LL n,m,x,y,l,r,arr[100100],tree[500100];
map<LL,vector<LL> > mep;

void build(LL node, LL a, LL b){
	if(a>b) return;
	if(a==b){
		tree[node] = arr[a];
		return;
	}
	LL mid = (a+b)/2;
	build(node*2, a, mid);
	build(node*2+1, mid+1, b);
	tree[node] = __gcd(tree[node*2], tree[node*2+1]);
}

LL query(LL node, LL a, LL b, LL i, LL j){
	if(a>j || b<i || a>b) return -1;
	if(a>=i && b<=j) return tree[node];
	LL mid = (a+b)/2;
	LL q1 = query(node*2, a, mid, i, j);
	LL q2 = query(node*2+1, mid+1, b, i, j);
	if(q1==-1) return q2;
	if(q2==-1) return q1;
	return __gcd(q1, q2);
}

int main(){
	ios::sync_with_stdio(0);
	cin.tie();
	cin>>n;
	for(int i=0;i<n;i++){
		cin>>arr[i];
		mep[arr[i]].pb(i);
	}
	build(1, 0, n-1);
	cin>>m;
	while(m--){
		cin>>x>>y;
		x--, y--;
		LL gcd = query(1, 0, n-1, x, y);
//		cout<<gcd<<endl;
		LL r = lower_bound(mep[gcd].begin(), mep[gcd].end(), y+1)-mep[gcd].begin();
		LL l = lower_bound(mep[gcd].begin(), mep[gcd].end(), x)-mep[gcd].begin();
//		cout<<r<<" "<<l<<endl;
		LL ans = y-x+1-r+l;
		cout<<ans<<endl;
	}
	return 0;
}