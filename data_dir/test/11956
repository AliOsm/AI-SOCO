#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int N = 10005;

int id[N];
char grid[105][105];
bool vis[105][105];
int dx[] = {+1,-1,0,0};
int dy[] = {0,0,+1,-1};
int tot;
int n, m;

void dfs(int x, int y) {
    ++tot;
    vis[x][y] = 1;
    grid[x][y] = id[tot] + 'a' - 1;
    for(int k = 0; k < 4; k++) {
        int xx = x + dx[k], yy = y + dy[k];
        if(xx >= 1 && xx <= n && yy >= 1 && yy <= m && vis[xx][yy] == 0) {
            dfs(xx, yy);
        }
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    int a, b, c, d;
    cin >> a >> b >> c >> d >> n;
    for(int i = 1; i <= n; i++) {
        int x;
        cin >> x;
        while(x--) {
            ++tot;
            id[tot] = i;
        }
    }
    tot = 0;
    n = max(b, d);
    m = a + c;
    if(b > d) {
        for(int i = d + 1; i <= n; i++) {
            for(int j = a + 1; j <= m; j++) {
                grid[i][j] = '.';
                vis[i][j] = 1;
            }
        }
    }
    else {
        for(int i = b + 1; i <= n; i++) {
            for(int j = 1; j <= a; j++) {
                grid[i][j] = '.';
                vis[i][j] = 1;
            }
        }
    }

    if(a&1) dfs(b,1);
    else dfs(1,1);
    cout << "YES" << "\n";
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= m; j++) {
            cout << grid[i][j];
        }
        cout << "\n";
    }

    return 0;
}

