#include <bits/stdc++.h>
#define LIM 1000000000000000000
#define eb emplace_back
using namespace std;
typedef long long int ll;
vector<ll> v;
vector<ll> w;
inline ll findroot(ll n)
{
	if (n == 0)
		return 0;
	ll l = 0, r = 1000000001;
	while (l < r)
	{
		ll m = l+(r-l+1)/2;
		ll c = m*m;
		if (c == n)
			return m;
		else if (c > n)
			r = m-1;
		else
			l = m;
	}
	return l;
}

int main(void)
{
	ios::sync_with_stdio(0); cin.tie(0);
	int q; cin >> q;
	for (ll i = 2; i <= 1000000; ++i)
	{
		for (ll j = i*i*i; j <= LIM; j *= i)
		{
			v.eb(j);
			if (LIM/i < j)
				break;
		}
	}
	sort(v.begin(), v.end());
	v.erase(unique(v.begin(), v.end()), v.end());
	for (auto it : v)
	{
		ll y = sqrtl(it);
		if (y*y != it and (y+1)*(y+1) != it)
			w.eb(it);
	}
	ll l, r;
	while(q--)
	{
		cin >> l >> r;
		ll ans = 0;
		if (l > r)
			continue;
		ans = upper_bound(w.begin(), w.end(), r) - lower_bound(w.begin(), w.end(), l);
		--l;
		ans += findroot(r) - findroot(l);
		cout << ans << '\n';
	}
}