#include<bits/stdc++.h>
//#define DEBUG
#define FOR(i,n) for(int i=1;i<=n;i++)
#define FORZ(i,n) for(int i=0;i<n;i++)
#define ll long long
#define ull unsigned long long
#define pii pair<ll,ll>
#define piii pair<pair<int,int>,int>
#define ff first
#define ss second
#define mp make_pair
#define pb push_back
#define SIZE 10000002
#define MOD 1000000007
#define LD long long double
#define bpc __builtin_popcount
#define gentum getnum
using namespace std;

inline ll getnum()
{
    char c = getchar();
    ll num,sign=1;
    for(;c<'0'||c>'9';c=getchar())if(c=='-')sign=-1;
    for(num=0;c>='0'&&c<='9';)
    {
        c-='0';
        num = num*10+c;
        c=getchar();
    }
    return num*sign;
}

int A[3];
ll dp[54][54][2];
ll how[54][54][2];
ll nCk[54][54];
int done[54][54][2];

struct bad
{
    int i;
    int j;
    int where;
};

queue<bad> Q;

ll add(ll i,ll j)
{
	int ans=i+j;
	if(ans>=MOD)ans-=MOD;

	return ans;
}

ll NCK(int i,int j)
{
	if(i==j||j==0)return 1;
	if(nCk[i][j])return nCk[i][j];
	return nCk[i][j]=add(NCK(i-1,j-1),NCK(i-1,j));
}

int main()
{
	int n=getnum(),k=getnum()/50;

	for(int i=1;i<=n;i++)A[getnum()/50]++;

	Q.push({A[1],A[2],1});
    how[A[1]][A[2]][1]=1;
    dp[A[1]][A[2]][1]=1;

    while(Q.size())
    {
        bad B=Q.front();
        Q.pop();

        if(done[B.i][B.j][B.where])continue;

        done[B.i][B.j][B.where]=1;

        int I,J,mul=1;

        if(B.where)I=B.i,J=B.j,mul=-1;
        else I=A[1]-B.i,J=A[2]-B.j;
        
        for(int i=0;i<=I;i++)
            for(int j=0;j<=J;j++)
            {
                if(i+j==0||i+j*2>k)continue;

                if(dp[B.i+i*mul][B.j+j*mul][1-B.where]==0)
                {
                    dp[B.i+i*mul][B.j+j*mul][1-B.where]=dp[B.i][B.j][B.where]+1;
                    ll cnt=(how[B.i][B.j][B.where]*NCK(I,i))%MOD;
                    cnt=(cnt*NCK(J,j))%MOD;
                    how[B.i+i*mul][B.j+j*mul][1-B.where]=cnt;
                    Q.push({B.i+i*mul,B.j+j*mul,1-B.where});
                }
                else if(dp[B.i+i*mul][B.j+j*mul][1-B.where]==dp[B.i][B.j][B.where]+1)
                {
                    ll cnt=(how[B.i][B.j][B.where]*NCK(I,i))%MOD;
                    cnt=(cnt*NCK(J,j))%MOD;
                    how[B.i+i*mul][B.j+j*mul][1-B.where]=add(how[B.i+i*mul][B.j+j*mul][1-B.where],cnt);
                }
            }
    }

    if(dp[0][0][0]==0)cout<<"-1\n0";
    else
    {
        cout<<dp[0][0][0]-1<<"\n"<<how[0][0][0];
    }
}
