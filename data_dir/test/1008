# include <iostream>
# include <sstream>
# include <cstdio>
# include <cstdlib>
# include <algorithm>
# include <string>
# include <cstring>
# include <cmath>
# include <stack>
# include <queue>
# include <vector>
# include <list>
# include <map>
# include <set>
# include <deque>
# include <iterator>
# include <functional>
# include <bitset>
# include <climits>
# include <ctime>
using namespace std;
#define max(a,b) ((a)>(b)?(a):(b))
#define min(a,b) ((a)<(b)?(a):(b))
#define odd(x) ((x)&1)
#define sqr(x) ((x)*(x))
#define mp make_pair
#define pb push_back
#define fir first
#define sec second
#define all(x) (x).begin(),(x).end()
#define mem(a,x) memset(a,x,sizeof(a))
#define rep(i,a,b) for (int i=(a); i<=(b); ++i)
#define per(i,a,b) for (int i=(a); i>=(b); --i)
#define rep_it(it,x) for (__typeof((x).begin()) it=(x).begin(); it!=(x).end(); it++)
#define ____ puts("\n_______________\n\n") 
#define debug(x) ____; cout<< #x << " => " << (x) << endl
#define debug_pair(x) cout<<"\n{ "<<(x).fir<<" , "<<(x).sec<<" }\n"
#define debug_arr(x,n) ____; cout<<#x<<":\n"; rep(i,0,n) cout<<#x<<"["<<(i)<<"] => "<<x[i]<<endl
#define debug_arr2(x,n,m) ____; cout<<#x<<":\n"; rep(i,0,n) rep(j,0,m) cout<<#x<<"["<<(i)<<"]["<<(j)<<"]= "<<x[i][j]<<((j==m)?"\n\n":"    ")
#define debug_set(x) ____; cout<<#x<<": \n"; rep_it(it,x) cout<<(*it)<<" "; cout<<endl
#define debug_map(x) ____; cout<<#x<<": \n"; rep_it(it,x) debug_pair(*it)
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef vector<int> vi;
const int oo = /*2 * 1000 * 1000 * 1000*/0x3f3f3f3f;
const ll ooo=9223372036854775807ll; 
const int _cnt = 1000 * 1000 + 7;
const int _p = 1000 * 1000 * 1000 + 7;
const int N=501005; 
const double PI=acos(-1.0);
const double eps=1e-9;
int o(int x) { return x%_p; }
int gcd(int a, int b) { return b ? gcd(b, a%b) : a; }
int lcm(int a, int b) { return a / gcd(a, b)*b; }

void file_put() {
    freopen("filename.in", "r", stdin);
    freopen("filename.out", "w", stdout);
}

int cur,rb_cnt=5000;
struct KDT {
    int n,root,rb_time; int ans,a,b,c,d,x;
    struct P{
    	int mn[2],mx[2],d[2],lch,rch,key; int sum,lazy;
    	int& operator[](int x) { return d[x]; }
    	P(int x=0,int y=0,int h=0) { d[0]=x,d[1]=y,sum=key=h; rep(i,0,1) mx[i]=mn[i]=d[i]; lch=rch=0; lazy=0; }
    	inline friend bool operator<(P x,P y) { return x[cur]<y[cur]; }
    	inline friend bool operator==(P x,P y) { return x[0]==y[0] && x[1]==y[1]; }
    	inline friend int dis(P x,P y) { return abs(x[0]-y[0])+abs(x[1]-y[1]); }
	} t[N],p[N],T;
    inline void Init(){ n=0; rb_time=rb_cnt; }
    inline bool in(int x1,int y1,int x2,int y2){ return a<=x1 && x2<=c && b<=y1 && y2<=d; }
    inline bool out(int x1,int y1,int x2,int y2){ return x1>c || x2<a || y1>d || y2<b; }
	void insert(int &k,int now) {
		if (!k) { t[k=++n]=T; return; }
		if (T==t[k]) { t[k].key+=T.key,t[k].sum+=T.key; return; }
		if (T[now]<t[k][now]) insert(t[k].lch,now^1); else insert(t[k].rch,now^1); push_up(k); 
	}
    inline void I(int x,int y,int h,int op=0) { 
		if (!op) { p[++n]=P(x,y,h); return; } 
		T=P(x,y,h); insert(root,0); if (n>=rb_time) ReBuild();
	}
    inline void push_up(int k) {
        int l=t[k].lch,r=t[k].rch;
        rep(i,0,1){
            t[k].mn[i]=t[k].mx[i]=t[k][i];
            if (l) t[k].mn[i]=min(t[k].mn[i],t[l].mn[i]),t[k].mx[i]=max(t[k].mx[i],t[l].mx[i]);
            if (r) t[k].mn[i]=min(t[k].mn[i],t[r].mn[i]),t[k].mx[i]=max(t[k].mx[i],t[r].mx[i]);
        }
        t[k].sum=t[l].sum^t[r].sum^t[k].key;
    }
    int B(int l,int r,int op) { 
        if (l>r) return 0; cur=op; int mid=(l+r)/2;  
        nth_element(p+l,p+mid,p+r+1); t[mid]=p[mid];
        t[mid].lch=B(l,mid-1,op^1),t[mid].rch=B(mid+1,r,op^1);
		push_up(mid); return mid;
    }
    inline void Build(){ root=B(1,n,0); }
	inline void ReBuild() { rep(i,1,n) p[i]=P(t[i][0],t[i][1],t[i].key); Build(); rb_time+=rb_cnt; }
	void push_down(int k){
		t[t[k].lch].lazy^=t[k].lazy;
		t[t[k].rch].lazy^=t[k].lazy;
		t[t[k].lch].sum^=t[k].lazy;
		t[t[k].rch].sum^=t[k].lazy;
		t[t[k].lch].key^=t[k].lazy;
		t[t[k].rch].key^=t[k].lazy;
		t[k].lazy=0;
	}
    void Q(int k){
        if (!k || out(t[k].mn[0],t[k].mn[1],t[k].mx[0],t[k].mx[1])) return;
        if (in(t[k].mn[0],t[k].mn[1],t[k].mx[0],t[k].mx[1])) { ans^=t[k].sum; return ; }
        if (in(t[k][0],t[k][1],t[k][0],t[k][1])) ans^=t[k].key; push_down(k); Q(t[k].lch); Q(t[k].rch); 
	}
	void U(int k){
        if (!k || out(t[k].mn[0],t[k].mn[1],t[k].mx[0],t[k].mx[1])) return;
        if (in(t[k].mn[0],t[k].mn[1],t[k].mx[0],t[k].mx[1])) { t[k].lazy^=x; t[k].sum^=x; t[k].key^=x; return ; }
        push_down(k);
        if (in(t[k][0],t[k][1],t[k][0],t[k][1])) t[k].key^=x; U(t[k].lch); U(t[k].rch); push_up(k);
	}
	inline int Query(int _a,int _b,int _c,int _d) { a=_a,b=_b,c=_c,d=_d; ans=0; Q(root); return ans; }
	inline int Update(int _a,int _b,int _c,int _d,int _x) { a=_a,b=_b,c=_c,d=_d; x=_x; U(root); }
};

int r() { return (rand()<<15)|rand(); }

struct ttype{ 
	int a,b,c,d; 
	inline friend bool operator < (const ttype &p1,const ttype &p2) {
		return p1.a<p2.a || p1.a==p2.a && p1.b<p2.b || p1.a==p2.a && p1.b==p2.b && p1.c<p2.c || p1.a==p2.a && p1.b==p2.b && p1.c==p2.c && p1.d<p2.d;
	}
};

struct qtype{
	int t,a,b,c,d;
};

map <ttype,int> M;
int n,m,q,t,a,b,c,d;
qtype Q[N];
KDT T;
bool ch[5005][5005];

int main() {
    //file_put();
    
    srand(time(NULL));
    scanf("%d%d%d",&n,&m,&q);
    T.Init();
    rep(i,1,q) {
    	scanf("%d%d%d%d%d",&t,&a,&b,&c,&d);
    	Q[i]=qtype{t,a,b,c,d};
    	if (t==3) {
    		if (!ch[a][b]) ch[a][b]=1,T.I(a,b,0);
    		if (!ch[c][d]) ch[c][d]=1,T.I(c,d,0);
		}
	}
	T.Build();
	rep(i,1,q) {
		if (Q[i].t!=3) {
			if (!M[ttype{Q[i].a,Q[i].b,Q[i].c,Q[i].d }]) M[ttype{Q[i].a,Q[i].b,Q[i].c,Q[i].d }]=r(); 
			int tt=M[ttype{Q[i].a,Q[i].b,Q[i].c,Q[i].d }];
			T.Update(Q[i].a,Q[i].b,Q[i].c,Q[i].d,tt);
		}
		if (Q[i].t==3) {
			if (T.Query(Q[i].a,Q[i].b,Q[i].a,Q[i].b)==T.Query(Q[i].c,Q[i].d,Q[i].c,Q[i].d)) printf("Yes\n"); else printf("No\n");
		}
	}
    
    return 0;
}

