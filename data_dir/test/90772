/// *********************************************** K
/// B *                                           * H
/// I *    Solved By : Bir Bahadur Khatri(B'ru)   * A
/// R *      Be Positive,be Happy.                * T
/// U *                                           * R
/// *********************************************** I
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <iomanip>
#include <string>
#include <fstream>
#include <sstream>
#include <map>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <set>
#include <list>

#define LL long long int
#define ULL unsigned LL
#define PI 2.0*acos(0.0)
#define D double
#define sz size()
#define PB push_back
#define cp printf("here\n");
#define NL printf("\n")
#define CHR getchar()
#define SQR(n) (n*n)
#define MEM(a,val) memset(a,val,sizeof(a))
#define Max(a,b) ((a>b)?a:b)
#define Min(a,b) ((a<b)?a:b)
#define _Max(a,b,c) Max(a,Max(b,c))
#define _Min(a,b,c) Min(a,Min(b,c))
#define S1(a) a=in<int>()
#define S2(a,b) a=in<int>(),b=in<int>()
#define S3(a,b,c) a=in<int>(),b=in<int>(),c=in<int>()
#define SL1(a) a=in<LL>()
#define SL2(a,b) a=in<LL>(),b=in<LL>()
#define SL3(a,b,c) a=in<LL>(),b=in<LL>(),c=in<LL>()
#define F(i,a,b) for(int i=a;i<b; i++)
#define R(i,a,b) for(int i=a-1;i>=b; i--)
#define all(a) a.begin(),a.end()
#define cnt_bit(a) __builtin_popcountll(a)
#define InpOut freopen("A.txt","r",stdin),freopen("A1.txt","w",stdout)
#define _cin ios_base::sync_with_stdio(0)
#include <time.h>

using namespace std;
template <typename T> T in(){char ch;T n = 0;bool ng = false;while (1){ch = getchar();if (ch == '-'){ng = true;ch = getchar();break;}if (ch>='0' && ch<='9')     break;}while (1){n = n*10 + (ch - '0');ch = getchar();if (ch<'0' || ch>'9')   break;}return (ng?-n:n);}
template<typename T>inline T Dis(T x1,T y1,T x2, T y2){return sqrt( SQR(x1-x2) + SQR(y1-y2) );}
template<typename T>inline T POW(T B,T P){ if(P==0) return 1; if(P&1) return B*POW(B,P-1);  else return SQR(POW(B,P/2));}
template<typename T>inline T ABS(T a) {if(a<0)return -a;else return a;}
template<typename T>inline T Gcd(T a,T b){if(a<0)return Gcd(-a,b);if(b<0)return Gcd(a,-b);return (b==0)?a:Gcd(b,a%b);}
template<typename T>inline T Lcm(T a,T b) {if(a<0)return Lcm(-a,b);if(b<0)return Lcm(a,-b);return a*(b/Gcd(a,b));}
long long Bigmod(long long base, long long power, long long MOD){long long ret=1;while(power){if(power & 1)ret=(ret*base)%MOD;base=(base*base)%MOD;power>>=1;}return ret;}
long long ModInverse(long long number, long long MOD){return Bigmod(number, MOD-2, MOD);}
int Set(int N,int pos){ return N=N | (1<<pos);}
int Reset(int N,int pos){return N= N & ~(1<<pos);}
bool Chkbit(int N,int pos){return (bool)(N & (1<<pos));}
bool isVowel(char ch){ ch=toupper(ch); if(ch=='A'||ch=='U'||ch=='I'||ch=='O'||ch=='E') return true; return false;}
bool isConst(char ch){if (isalpha(ch) && !isVowel(ch)) return true; return false;}
int toInt(string s)  { int sm; stringstream ss(s); ss>>sm; return sm; }
long long int toLlint(string s) { long long int sm; stringstream ss(s); ss>>sm; return sm;}

///**********************************************************//


///         0123456789
#define MX  100007
#define MOD 1000000007
#define INF (1<<28)
#define eps 1e-9

/// ==========================================////

int Lev[MX],Tot[MX],Par[MX],Start[MX],Id[MX];
int ChainNo,Ptr,Pos[MX],A[MX];
vector<int> Adj[MX];

void DFS(int u,int p,int l)
{
    Lev[u]=l;
    Tot[u]=1;
    Par[u]=p;

    F(i,0,Adj[u].sz)
    {
        int v=Adj[u][i];
        if(v!=p)
        {
            DFS(v,u,l+1);
            Tot[u]+=Tot[v];
        }
    }
    return;
}

void HLD(int u,int p)
{
    if(Start[ChainNo]==-1)
    {
        Start[ChainNo]=u;
    }
    Id[u]=ChainNo;
    Pos[u]=++Ptr;
    A[Ptr]=u;

    int Special,mx=-1;
    F(i,0,Adj[u].sz)
    {
        int v=Adj[u][i];
        if(v!=p)
        {
            if(mx<Tot[v])
            {
                mx=Tot[v];
                Special=v;
            }
        }
    }
    if(mx!=-1) HLD(Special,u);

    F(i,0,Adj[u].sz)
    {
        int v=Adj[u][i];
        if(v!=Special&&v!=p)
        {
            ChainNo++;
            HLD(v,u);
        }
    }
    return;
}

int LCA(int u,int v)
{
    while(true)
    {
        int U=Id[u],V=Id[v];
        int Su=Start[U],Sv=Start[V];
        if(U==V)                    return (Lev[u]<Lev[v]?u:v);
        else if(Lev[Su]<Lev[Sv])    v=Par[Sv];
        else                        u=Par[Su];
    }
}

int Climb(int u,int Lv)
{
    while(true)
    {
        int Su=Start[ Id[u] ];
        if(Lev[Su]<=Lv) {
            return A[ Pos[Su]+ (Lv-Lev[Su]) ];
        }
        else u=Par[Su];
    }
}

void Init()
{
    MEM(Start,-1);
    ChainNo=1;
    DFS(1,-1,0);
    HLD(1,-1);
}

int main()
{
    int n;
    S1(n);

    F(i,0,n-1)
    {
        int u,v;
        S2(u,v);
        Adj[u].PB(v);
        Adj[v].PB(u);
    }
    Init();

    int m;
    S1(m);

    while(m--)
    {
        int u,v;
        S2(u,v);
        int Lc=LCA(u,v);
        int Dist=Lev[u]+Lev[v]-(2*Lev[Lc]);
        if(Lev[u]<Lev[v])   swap(u,v);
        if(Dist==0)
        {
            printf("%d\n",n);
        }
        else if(Dist%2){
            printf("%d\n",0);
        }
        else if(Lev[u]==Lev[v]) {
            int U=Climb(u,Lev[Lc]+1);
            int V=Climb(v,Lev[Lc]+1);
            //cout<<U<< " "<<V<<endl;
            printf("%d\n",n-(Tot[U]+Tot[V]));
        }
        else {
            int U=Climb(u,Lev[u]-(Dist/2));
            int V=Climb(u,Lev[u]-(Dist/2)+1);
            printf("%d\n",(Tot[U]-Tot[V]));
        }
    }

    return 0;
}
