#include<bits/stdc++.h>
#define int long long int
#define ull unsigned long long int
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define rev(i,n,init) for(int i=n;i>=init;i--)
#define MAXN 1200005
#define MOD 1000000007
#define f first
#define s second
#define endl '\n'
#define pii pair<int,int>
#define precise cout<<fixed<<setprecision(10)
using namespace std;
const double PI = atan(1.0)*4;
const int64_t INF=100000000000000003;
const int32_t LOG=21;
const int BIG=pow(2,20);
set<pair<int,int>,greater<pii>> s;
set<pii> s1;
vector<pii> v[200005];
int table[200005]={0};
pii gaps[200005];
int n;
void update(int i,int delta)
{
  while(i<=200005)
  {
       table[i]+=delta;
       i+=(i&-i);
  } 
}
int pref_sum(int i)
{
  int sum=0;
  while(i>0)
  {
    sum+=table[i];
    i-=i&-i;
  }
  return sum; 
}
int sum(int l,int r)
{
  if(l>r) return 0;
  return pref_sum(r)-pref_sum(l-1);
}
int range_update(int l,int r,int delta)
{
    update(l,delta);
    update(r+1,-delta);
}
int32_t main(){
        getFaster; 
        int n,k;
        cin>>n>>k;
        rep(i,1,n+1)
        {
        	int l,r;
         	cin>>l>>r;
          v[l].push_back({r,i});
          range_update(l,r,1);
          gaps[i]={l,r};
        }
        vector<int> rem;
        rep(i,1,200005)
        {
            int cur=pref_sum(i);
            rep(j,0,v[i].size())
            {
               s.insert({v[i][j].f,v[i][j].s});
               s1.insert({v[i][j].f,v[i][j].s});
            }
            while(!s.empty() && s.size()>k)
            {
                 pii temp=*s.begin();
                 s.erase(s.begin());
                 s1.erase(temp);
                 rem.push_back(temp.s);
                 int ind=temp.s;
                 range_update(gaps[ind].f,gaps[ind].s,-1);
            }  
           while(!s1.empty() && s1.begin()->f==i)
           {
              pii temp=*s1.begin();
              s1.erase(s1.begin());
              s.erase(temp);
           } 
        }
        cout<<rem.size()<<endl;
        rep(i,0,rem.size())
        cout<<rem[i]<<" ";
        cout<<endl;
        return 0;
}