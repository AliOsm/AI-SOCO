#include <string.h>
#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <stdlib.h>    
#include <time.h> 
#include <stack>
#include <queue>
#include <set>
 
#include <map>
#include <vector>
#include <string>
#include <stdlib.h>
 
#define ll unsigned long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf
 
#define pf printf
#define mp make_pair
 
using namespace std;
const int N = 200110;
const int mod = 1e9+7;
//1000000007;

int inf = 1000000000;

int n,m;
vector<int> num[100];
vector<int> g[N];

int s_num;
int v[N],dis[N];

int bfs(int o_t, int o_s) {
	//printf("%d %d\n",o_t,o_s);
	set<int> x;
	x.insert(o_t);
	x.insert(o_s);
	queue<int> q;
	v[o_t] =1;
	v[o_s]=1;
	dis[o_t] =1;
	dis[o_s] = 2;
	q.push(o_s);
	int ret = -1;
	while(!q.empty()) {
		int t = q.front();
		q.pop();
		v[t] = 0;
		x.insert(t);
		for(int u : g[t]) {
			if(dis[u]) {
			}
			if(dis[u]==0 || dis[u]>dis[t]+1) {
				dis[u] = dis[t]+1;
				if(!v[u]){
					q.push(u);
					v[u] = 1;
				}
			}
			//printf("t = %d u = %d dis = %d\n",t,u,dis[t]);
			if(u==o_t) {
				if(ret==-1 || ret > dis[t]) {
					if(dis[t]>2)
						ret = dis[t];
				}
			}
		}
	}
	for(int t : x) {
		v[t] = 0;
		dis[t] = 0;
	}

	return ret;
}

int main() {
	cin>>n;
	fr(i,1,n+1)v[i] = 0;
	fr(i,0,n) {
		ll t;
		cin>>t;
		for(int j = 0; j < 64; ++j) {
			if(t&(1ull<<j)) {
				num[j].pb(i+1);
			}
		}
	}
	int num_2 = 0;
	int ans = -1;
	for(int i =  0; i < 64; ++i) {
		if(num[i].size()<2)continue;
		if(num[i].size()==2) {
			num_2++;
		}
		else {
			if(ans==-1 || ans > num[i].size()) {
				ans = 3;
				//ans = num[i].size();
			}
		}
	}
	if(ans==-1) {
		if(num_2>0) {
			for(int i = 0; i < 64; ++i) {
				if(num[i].size()<2)continue;
				for(int j = 0; j+1 < num[i].size();++j) {
					//printf("%d %d\n",num[i][j],num[i][j+1]);
					g[num[i][j]].pb(num[i][j+1]);
					g[num[i][j+1]].pb(num[i][j]);
				}
			}
			for(int i = 1; i<=n; ++i) {
				if(g[i].size()>0){
					for(int j = 0; j < g[i].size();++j) {
						int ret = bfs(i,g[i][j]);
						//printf("i = %d ret = %d\n",i,ret);
						if(ret>2) {
							if(ans==-1 || ans > ret) ans = ret;
						}
					}
				}
			}
		}
	}
	cout<<ans<<endl;
}
