#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL_CHECK
#define trace(x) cerr << #x << ": " << x << " ";
#define trnl cerr << "\n";
#else
#define trace(x) {}
#define trnl {}
#endif
typedef long long lolo;
typedef unsigned long long ulolo;
typedef pair<int, int> pii;
#define R(i,n) for(int i=0;i<(n);++i)
#define F(i,a,b) for(int i=(a);i<(b);++i)
#define FS(i,a,b,s) for(int i=(a);i<(b);i+=(s))
#define FD(i,n) for(int i=(n-1);i>=0;--i)
#define FDS(i,n,s) for(int i=(n-1);i>=0;i-=(s))
#define SZ(x) ((int)(x).size())
#define ALL(x) (x).begin(),(x).end()
#define fi first
#define se second
#define M_PI           3.14159265358979323846

const int INF = 2e9 + 23;
const lolo MOD = 1e9 + 7;
const int N = 50 + 10;

string vals;
string suits;
typedef pair<char, char> card;
typedef tuple<int, card, card, card> qel;
map<qel, bool> m;

card getCard(int n) {
  if (n < 0) return {'#', '#'};
  return {vals[n], suits[n]};
}

bool compatibile(card c1, card c2) {
  return c1.fi == c2.fi || c1.se == c2.se;
}

bool dfs(qel q) {
  if (m.find(q) != m.end()) {
    return m[q];
  }
  int n; card c1, c2, c3;
  tie(n, c1, c2, c3) = q;
  if (n == 0) {
    return true;
  }
  if (n == 1) {
    return compatibile(c1, c2);
  }
  trace(n) trace(c1.fi) trace(c1.se) trnl
  card cnew = getCard(n-3);
  if (compatibile(c1, c2)) {
    m[q] |= dfs(make_tuple(n-1, c1, c3, cnew));
  }
  if (compatibile(c1, cnew)) {
    m[q] |= dfs(make_tuple(n-1, c2, c3, c1));
  }
  return m[q];
}

int main()
{
  ios_base::sync_with_stdio(0);
  int n; cin >> n;
  string cur;
  R(i, n) {
    cin >> cur;
    vals.push_back(cur[0]);
    suits.push_back(cur[1]);
  }
  qel q = make_tuple(n-1, getCard(n-1), getCard(n-2), getCard(n-3));
  cout << (dfs(q) ? "YES" : "NO") << "\n";
  return 0;
}
// g++ -W -Wall -Wextra -pedantic -std=c++0x -o p main.cpp
