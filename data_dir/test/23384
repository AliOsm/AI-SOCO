#include <bits/stdc++.h>
#define PI 3.1415926535897932384626
using namespace std;

struct vec
{
    long double x,y;
    bool operator ==(const vec &a) const{
        return x==a.x&&y==a.y;
    }
    bool operator <(const vec &a) const{
        if(a.x!=x) return x<a.x;
        return y<a.y;
    }
    vec operator +(const vec &a) const{
        return {x+a.x,y+a.y};
    }
    vec operator *(const long double &a) const{
        return {x*a,y*a};
    }
    vec operator -(const vec &a) const{
        return {x-a.x,y-a.y};
    }
    vec operator /(const long double &a) const{
        return {x/a,y/a};
    }
    long double len() const{
        return sqrt(x*x+y*y);
    }
    long double dot(const vec &a) const{
        return x*a.x+y*a.y;
    }
    long double crs(const vec &a) const{
        return x*a.y-y*a.x;
    }
    vec proj(const vec &a) const{
        return (a/a.len())*(*this).dot(a)/a.len();
    }
};

struct P
{

    long long x,y;
    bool operator <(const P &a) const{
        if(x!=a.x) return x<a.x;
        return y<a.y;
    }
};


bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y<b.y;
}


long long x,y,z,mod=1000000007;
vector<int> v[1],v1;
int i,n,m,k,a,d,b,c,dx[10]={1,0,-1,0},dy[10]={0,1,0,-1};
int e;
int o[1111];
int l[1111];
int par[1];
int j[1];
//stack<int> s;
set<P> s;
queue<int> q,q1;
P u[1];
char r[1];
//string r,r1;
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
map<int,int> p;
//v.resize(unique(v.begin(),v.end())-v.begin());

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//rng();


int main()
{
    scanf("%d %d %d %d %d",&a,&b,&c,&d,&e);
    k=a/2+1;
    for(int t=1;t<=b;t++)
    {
        scanf("%d",&n);
        d-=n;
        if(n>=e) k--;
        a--;
    }
    for(;a>0&&k>0;q.push(e),a--,k--)
        d-=e;
    if(k>0)
    {
        puts("-1");
        return 0;
    }
    for(;a>0;q.push(1),a--,d--);
    if(d>=0)
    {
        for(;q.size();q.pop())
            printf("%d ",q.front());
        return 0;
    }
    puts("-1");
}
