#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cassert>
#include <queue>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define pb push_back
#define fst first
#define snd second
#define SZ(x) ((int)x.size())
typedef long long ll;
#define dforn(i, n) for(int i = n - 1; i >= 0; i--)

const int MAXN = 100100;

int n, cf, cm, F, C[MAXN], BEST;
pair<int, int> A[MAXN];
ll m, add[MAXN], best, LLENAR, RET[MAXN];

ll sum(int a, int b){
  return add[b] - add[a];
}

void solve(int pos){  
  ll a = -1;
  ll b = F+1;
  while(b-a>1){
    ll c=(a+b)/2;
    // ahora debo encontrar el primero menor que c
    // en el rango [pos, n)
    int lo = pos-1;
    int hi = n;
    while(hi-lo>1){
      int mid=(lo+hi)/2;
      if(C[mid] < c){
        hi = mid; 
      } else {
        lo = mid;
      }
    }
    // hi ahora es el primero menor que c
    if(hi == n){
      a = c;
      continue;
    }
    ll k = ((ll)n-hi)*c - sum(hi, n);
    if(k > m){
      b = c;
    } else {
      a = c;
    }
  }
  // a es el Ãºltimo con el que se puede...
  ll ans = a*(ll)cm + (ll)pos*cf;
  if(ans > best){
    best = ans;
    BEST = pos;
    LLENAR = a;
  }
}

int main() {
  //~ freopen("input.in", "r", stdin);
  while( scanf("%d %d %d %d %lld", &n, &F, &cf, &cm, &m) >= 1 ){
    best = BEST = LLENAR = 0;
    
    forn(i, n){
      scanf("%d", &A[i].fst); A[i].snd = i;
    }
    sort(A, A + n);
    reverse(A, A + n);
    forn(i, n){
      add[i+1]=add[i]+A[i].fst;
    }
    forn(i, n) C[i] = A[i].fst;
    
    forn(i, n+1){
      solve(i);
      m -= F-C[i];
      if(m < 0) break;
    }
    forn(i, n){
      if(i < BEST){
        C[i] = F;
      }
      if(C[i] < LLENAR){
        C[i] = LLENAR;
      }
      RET[A[i].snd] = C[i];
    }
    
    printf("%lld\n", best);
    forn(i, n){
      if(i) printf(" ");
      printf("%lld", RET[i]);
    }
    puts("");
  }
  return 0;
}
