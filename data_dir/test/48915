#include <bits/stdc++.h>
using namespace std;
#define FASTIO ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define LL long long 
#define ar32(x) array<int, x> 
#define ar64(x) array<LL, x>
const int oo = 1e9 + 5;
const int MOD = 998244353;
// const int MOD = 1e9;
const LL ooll = 1e18 + 5;
const int N = 4e5 + 5;
const int lgN = 18;

int n, m, ktot;
vector<int> offer[N];
vector<int> days[N];
int go[N], need[N];

bool check(int d) {
    int hav = 0, done = 0;

    for (int i=1;i<=n;++i) need[i] = go[i];

    for (int i=1;i<=d;++i) {
        ++hav;
        if (i >= N) continue;
        for (auto it : offer[i]) {
            auto jt = upper_bound(days[it].begin(), days[it].end(), d);
            if (jt == days[it].begin()) continue;
            jt--;
            if (*jt != i) continue;
            while(hav > 0 && need[it] > 0) {
                --hav;
                --need[it];
                done++;
            }
        }
    }
    done += hav / 2;
    return done >= ktot;
}

void solve() {
    int i, j;
    cin >> n >> m;
    ktot = 0;
    for (i=1;i<=n;++i) {
        cin >> go[i];
        ktot += go[i];
        days[i].clear();
    }
    for (i=0;i<m;++i) {
        int d, t; cin >> d >> t;
        days[t].push_back(d);
        offer[d].push_back(t);
    }
    for (i=1;i<=n;++i) {
        if (!days[i].empty()) sort(days[i].begin(), days[i].end());
    }
    int lo = 0, hi = ktot + ktot;
    while(lo < hi - 1) {
        int mid = (lo + hi) >> 1;
        if (check(mid)) hi = mid;
        else lo = mid;
    }
    if (check(lo)) hi = lo;
    cout << hi << '\n';
}

int main() {
    FASTIO;
    int t = 1;
    // cin >> t;
    for (int tc=1;tc<=t;++tc) {
        solve();
    }
    return 0;
}