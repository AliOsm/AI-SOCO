/*
~Like a small boat
~On the ocean
~Sending big waves
~Into motion
!Like how a single word
!Can make a heart open
!I might only have one match
!But I can make an explosion
#And all those things I didn't say
#Wrecking balls inside my brain
#I will scream them loud tonight
#Can you hear my voice this time?
@This is my fight song
@Take back my life song
@Prove I'm alright song
@My power's turned on
$Starting right now I'll be strong
$I'll play my fight song
$And I don't really care if nobody else believes
$'Cause I've still got a lot of fight left in me!!!
*/

#include "bits/stdc++.h"
using namespace std;

#define  F  first
#define  S  second
#define  pb push_back
#define  mp make_pair
typedef long long int ll;
const int N = 2e5+5;
vector<int>st[N];
map<int,ll>M;
int Child[N],Centroid[N],vis[N];
ll Nod,Cnt[N];
int Arr[N];
void dfs( int u,int p )
{
    Child[u] = 1;
    ++Nod;
    for(auto v:st[u])
    {
        if( v==p||Centroid[v] )
            continue;
        dfs(v,u);
        Child[u] += Child[v];
    }
}
void Add( int u,int p,int gcd )
{
    gcd = __gcd(gcd,Arr[u]);
    M[gcd]++;
    for(auto v:st[u])
    {
        if(v==p||Centroid[v])
            continue;
        Add(v,u,gcd);
    }
}
void Rem( int u,int p,int gcd )
{
    gcd = __gcd(gcd,Arr[u]);
    M[gcd]--;
    if( M[gcd]==0 )
        M.erase(gcd);
    for(auto v:st[u])
    {
        if(v==p||Centroid[v])
            continue;
        Rem(v,u,gcd);
    }
}
void Cal( int u,int p,int gcd )
{
    gcd = __gcd(gcd,Arr[u]);
    for(auto x:M)
        Cnt[__gcd(gcd,x.F)]+=x.S;
    for(auto v:st[u])
    {
        if(v==p||Centroid[v])
            continue;
        Cal(v,u,gcd);
    }
}
int Find_centroid( int u,int p )
{
    bool F = true;
    int id = 0;
    for(auto v:st[u])
    {
        if( v==p||Centroid[v] )
            continue;
        if( Child[v]>Nod/2 )
            F = false;
        if(!id || Child[v]>Child[id])
            id = v;
    }
    if( F && (Nod-Child[u])<=Nod/2 )
        return u;
    return Find_centroid(id,u);
}

void Get_centroid(int u,int p)
{
    Nod = 0;
    dfs(u,p);
    int root = Find_centroid(u,p);
    Centroid[root] = true;
    Add(root,p,Arr[root]);
    for(auto v:st[root])
    {
        if( Centroid[v] )
            continue;
        Rem(v,root,Arr[root]);
        Cal(v,root,Arr[root]);
    }
    M.erase(Arr[root]);
    for(auto v:st[root])
    {
        if(v==p||Centroid[v])
            continue;
        Get_centroid(v,root);
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int n;
    cin>>n;
    for(int i=1; i<=n; i++)
        cin>>Arr[i],Cnt[Arr[i]]++;
    for(int i=1; i<n; i++)
    {
        int u,v;
        cin>>u>>v;
        st[u].push_back(v);
        st[v].push_back(u);
    }
    Get_centroid(1,-1);
    for(int i=1; i<N; i++)
    {
        if(Cnt[i])
            cout<<i<< " "<<Cnt[i]<< "\n";
    }


    return 0;
}
