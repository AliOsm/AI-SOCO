#include <bits/stdc++.h>
using namespace std;

int ans = 0, n;
vector<int> g[200];
pair<int, int> arr[200];
int f, t;

int dfs(int from, int to) {
	int cnt = 0;
	for(int i = 0; i < g[to].size(); ++i) {
		int too = g[to][i];
		if(too == from) {
			continue;
		}
		if(to == f && too == t) {
			continue;
		}
		if(to == t && too == f) {
			continue;
		}
		cnt = max(cnt, dfs(to, too));
	}
	return cnt + 1;
}

int dfs(int v) {
	int cnt = 0;
	for(int i = 0; i < g[v].size(); ++i) {
		int to = g[v][i];
		if(v == f && to == t) {
			continue;
		}
		if(to == f && v == t) {
			continue;
		}
		cnt = max(cnt, dfs(v, to));
	}
	return cnt;
}

void solve() {
	for(int i = 1; i < n; ++i) {
		int a_1 = 0, a_2 = 0;
		f = arr[i].first; t = arr[i].second;
		bool vis[200];
		memset(vis, false, sizeof(vis));
		queue<int> q;
		vis[f] = true;
		q.push(f);
		while(!q.empty()) {
			int v = q.front();
			q.pop();
			a_1 = max(a_1, dfs(v));
			for(int i = 0; i < g[v].size(); ++i) {
				int to = g[v][i];
				if(to == t) {
					continue;
				}
				if(!vis[to]) {
					q.push(to);
					vis[to] = true;
				}
			}
		}
		vis[t] = true;
		q.push(t);
		while(!q.empty()) {
			int v = q.front();
			q.pop();
			a_2 = max(a_2, dfs(v));
			for(int i = 0; i < g[v].size(); ++i) {
				int to = g[v][i];
				if(to == f) {
					continue;
				}
				if(!vis[to]) {
					q.push(to);
					vis[to] = true;
				}
			}
		}
		ans = max(ans, a_1 * a_2);
	}

	printf("%d", ans);
}

int main() {
	scanf("%d", &n);
	for(int i = 1; i < n; ++i) {
		int from, to;
		scanf("%d%d", &from, &to);
		from--; to--;
		g[from].push_back(to);
		g[to].push_back(from);
		arr[i].first = from; arr[i].second = to;
	}
	solve();

	return 0;
}