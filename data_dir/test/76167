#include <iostream>
#include <ctime>
#include <iomanip>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <cmath>
#include <set>
#include <unordered_set>
#include <unordered_map>
#include <stack>
#include <cassert>
#include <queue>
#include <deque>
#include <climits>
#include <cstring>
#include <random>
#include <bitset>
#include <mutex>

using namespace std;

struct dsu {
    int n;
    vector<int> p;
    vector<int> rank;
    
    int get(int cur) {
        if (p[cur] != cur) {
            p[cur] = get(p[cur]);
        }
        return p[cur];
    }
    
    void merge(int a, int b) {
        a = get(a);
        b = get(b);
        if (a != b) {
            if (rank[a] < rank[b]) {
                swap(a, b);
            }
            p[b] = a;
            if (rank[a] == rank[b]) {
                rank[a]++;
                
            }
        }
    }
    
    dsu(int c) {
        n = c;
        rank.assign(n, 0);
        p.resize(n);
        for (int i = 0; i < n; i++) {
            p[i] = i;
        }
    }
};

int n;

vector<int> cyc;

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    #ifdef LOCAL
    assert(freopen("input.txt", "r", stdin));
    assert(freopen("output.txt", "w", stdout));
    #endif
    
    
    cin >> n;
//
//
    vector<int> a(n);
    for (auto &t : a) {
        cin >> t;
        t--;
    }
    int res = 0;
    int cnt = 0;
    for (int i = 0; i < n; i++) {
        if (a[i] == i) {
            cnt++;
        }
    }
    int root = -1;
    if (cnt >= 1) {
        bool seen = false;
        for (int i = 0; i < n; i++) {
            if (a[i] == i) {
                if (!seen) {
                    root = i;
                    seen = true;
                } else {
                    a[i] = root;
                    res++;
                }
            }
        }
    } else {
        res++;
        dsu cur(n);
        for (int i = 0; i < n; i++) {
            if (cur.get(a[i]) == cur.get(i)) {
                a[i] = i;
                root = i;
                break;
            }
            cur.merge(a[i], i);
        }
    }
    dsu tmp(n);
    for (int i = 0; i < n; i++) {
        if (a[i] != i) {
            if (tmp.get(i) == tmp.get(a[i])) {
                a[i] = root;
                res++;
            }
            tmp.merge(a[i], i);
        }
    }
    cout << res << '\n';
    for (auto t : a) {
        cout << t + 1 << ' ';
    }
}
