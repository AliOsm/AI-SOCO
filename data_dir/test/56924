#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds ;
#define ll int
#define ld long double
#define pp pair<ll,ll>
#define rep(i,a,b) for(ll i=a;i<b;i+=1)
#define all(c) (c).begin(),(c).end()
#define pb push_back
#define sz(a) int((a).size())
#define hell 1000000007
#define f first
#define s second
#define sll(x) scanf("%lld",&x)
#define si(x) scanf("%d",&x)
typedef tree<ll , null_type , less<ll> , rb_tree_tag , tree_order_statistics_node_update > ordered_set ;
ll t = 1 ;
ll numdig( ll x )
{
    ll ans = 0 ;
    while( x > 0 )
    {
        ans++;
        x /= 10 ;
    }
    return ans ;
}
void solve()
{
    string s ;
    ll lcp[8005][8005] , n ,dp[8005] ;
    memset(lcp,0,sizeof(lcp));
    memset(dp,0,sizeof(dp));
    cin >> s ;
    s = "#" + s ;
    n = sz(s) ;
    rep( i , 1 , n )
    {
        rep( j , i + 1 , n )
        {
            ll k = lcp[i][j-1] ;
            while( k > 0 && s[i+k] != s[j] )
                k = lcp[i][i+k-1];
            if(s[i+k]==s[j])
                k++;
            lcp[i][j]=k;
        }
    }
    dp[1]=2;
    rep( i , 2 , n )
    {
        dp[i] = hell ;
        rep( j , 0 , i )
        {
            ll per = i - j , len = i - j ;
            if( len % (len-lcp[j+1][i]) == 0 )
                per = len - lcp[j+1][i] ;
            dp[i] = min( dp[i] , dp[j] + per + numdig(len/per) );
        }
    }
    cout << dp[n-1] ;
}
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    //cin>>t;
    while(t--)
        solve() ;
    return 0 ;
}
