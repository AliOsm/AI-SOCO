#include "bits/stdc++.h"

using namespace std;
using LL = long long;

constexpr int N = 2e5 + 5;
constexpr int INF = 1e9;

int check(int k, multiset< int> st) {
	if (k < 0) return -INF;
	int rv = 0;

	while (!st.empty() && *st.begin() <= k) {
		k -= *st.begin();
		st.erase(st.begin());
		rv += 2;
	}

	return rv;
}

int main() {
	ios::sync_with_stdio(false); cin.tie(nullptr);

	int n, k;
	cin >> n >> k;

	vector< int> temp(n);

	for (int &x : temp) {
		cin >> x;
		if (x < 0) x = 1;
		else x = 0;
	}

	int winter = count(begin(temp), end(temp), 1);

	if (winter == 0) cout << 0, exit(0);
	else if (winter > k) cout << -1, exit(0);

	k -= winter;


	int numOfchange = 0;
	for (int i = 0; i < n; i++) {
		if (i == 0) {
			if (temp[i] == 1) numOfchange++;
		}
		else {
			if (temp[i - 1] != temp[i]) numOfchange++;
		}
	}

	multiset< int> summers;
	int cnt = 0, flag = 0;


	for (int i = 0; i < n; i++) {
		if (temp[i] == 1) flag = 1;
		if (flag == 0) continue;

		if (temp[i] == 0) cnt++;
		else if (cnt > 0) {
			summers.insert(cnt);
			cnt = 0;
		}
	}

	int ans = numOfchange;


	if (cnt > 0) {
		int v1 = check(k - cnt, summers);
		int v2 = check(k, summers);

		ans = min(ans, numOfchange - 1 - v1);
		ans = min(ans, numOfchange - v2);
	}
	else {
		ans = min(ans, numOfchange - check(k, summers));
	}

	cout << ans << endl;
}