#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ff first
#define ss second
#define PI 2*acos(0.0)
#define all(a) a.begin(),a.end()
#define INF (1<<28)
#define mem(a,x) memset(a,x,sizeof(a))
#define SEGMENT_TREE left=2*node,right=left+1,mid=(b+e)/2
using namespace std;


/*------------------------------------BITMASK------------------------------------------*/
//int Change(int N, int pos){return N= N^(1<<pos);}
//bool Check(int N, int pos){return (bool)(N &(1<<pos));}
/*-----------------------------------------------------------------------------------------------*/

/*-----------------------------DIRECTION_ARRAY-------------------------*/
//------FOUR_DIRECTION---------//
//int fx[]={0,1,0,-1};
//int fy[]={1,0,-1,0};


//------EIGHT_DIRECTION---------//
//int fx[]={0,1,1,1,0,-1,-1,-1};
//int fy[]={1,1,0,-1,-1,-1,0,1};
/*--------------------------------------------------------------------------------------*/

//int gcd(int a, int b){return (a==0)? b: gcd(b%a,a);}
//int lcm(int a, int b){return (a/gcd(a,b))*b;}

///-----------------------------START FROM HERE--------------------------------------///

int dp[300005];

int st[300005], en[300005], cost[300005];

vector<pii>vv[300005];
vector<int> suffix[300005];
bool comp(pii a, pii b){
    return cost[a.ss]<cost[b.ss];

}

int bin(int v, int cst){

    int ret=vv[v].size();

    int l=0, h=ret-1;
    while(l<=h){

        int mid=(l+h)/2;
        int u=vv[v][mid].ss;
        if(cost[u]>cst){
            ret=mid;
            h=mid-1;
        }else l=mid+1;

    }
    return ret;
}

int solve(int id){

    if(dp[id]!=-1)return dp[id];
    int ret=1;
    int v=en[id];
    int i=bin(v, cost[id]);
    int I=i;
    int p=-2;
    for( ; i<vv[v].size(); i++){
        if(suffix[v][i]!=-1){
            p=i;
            ret=max(ret, suffix[v][i]);
            break;
        }
        int x=solve(vv[v][i].ss)+1;
        suffix[v][i]=max(suffix[v][i], x);
        ret=max(ret, x);
    }
    if(p==-2)p=vv[v].size()-1;
    for(int j=p; j>=0 && suffix[v][j]!=-1&& j>=I ; j--){
        if(j==suffix[v].size()-1)continue;
        suffix[v][j]=max(suffix[v][j], suffix[v][j+1]);
        //ret=max(ret, suffix[v][j]);
    }
    return dp[id]=ret;

}

int main(){

    int n, m;
    scanf("%d %d", &n, &m);

    for(int i=1; i<=m; i++){

        scanf("%d %d %d", &st[i], &en[i], &cost[i]);
        vv[st[i]].pb(make_pair(en[i], i));
        suffix[st[i]].pb(-1);
    }
    for(int i=1; i<=n; i++){
        sort(all(vv[i]), comp);

    }
    mem(dp,-1);
    int ans=0;

    for(int i=1; i<=m; i++){

        ans=max(ans, solve(i));

    }
    printf("%d\n", ans);

}
