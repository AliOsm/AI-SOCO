//marico el que lo lea
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <stdlib.h>
#include <assert.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int, int> ii;

void fastIO() {
	std::ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
}

#define FOR(i,f,t) for(int i=f; i<(int)t; i++)
#define FORR(i,f,t) for(int i=f; i>(int)t; i--)
#define FORE(i,c) for(auto i = (c).begin(); i != (c).end(); i++)
#define pb push_back
#define all(obj) obj.begin(), obj.end()
#define ms(obj, val) memset(obj, val, sizeof(obj))
#define ms2(obj, val, sz) memset(obj, val, sizeof(obj[0])*sz)

#define fst first
#define snd second

template<typename T, typename U> inline void mnze(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void mxze(T &x, U y) { if(x < y) x = y; }

void _scan( int &x ) { scanf("%d",&x); }
void _scan( long long &x ) { scanf("%lld",&x); }
void _scan( double &x ) { scanf("%lf",&x); }
void _scan( char &x ) { scanf(" %c",&x); }
void _scan( char *x ) { scanf("%s",x); }
void scan() {}
template<typename T, typename... U>
void scan( T& head, U&... tail ) { _scan(head); scan(tail...);}

template<typename T> void _dbg(const char* sdbg, T h) { cerr<<sdbg<<"="<<h<<"\n"; }
template<typename T, typename... U> void _dbg(const char* sdbg, T h, U... t) {
	while(*sdbg != ',')cerr<<*sdbg++;
	cerr<<"="<<h<<","; _dbg(sdbg+1, t...);
}

#ifdef LOCAL
#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)
#define debugv(x) {{cerr <<#x <<" = "; FORE(_i, (x)) cerr <<*_i <<", "; cerr <<"\n"; }}
#define debuga(x, sz) {{cerr <<#x <<" = "; FOR(_i, 0, sz) cerr << x[_i] <<", "; cerr <<"\n"; }}
#else
#define debug(...) (__VA_ARGS__)
#define debugv(x)
#define debuga(x, sz)
#define cerr if(0)cout
#endif

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

vi n;

ll dp[20][4];

ll h(int d, int c){
	if(c<0) return 0;
	ll ret = 1;
	FOR(i,0,c) ret = ret*(d-i);
	FOR(i,0,c) ret = ret/(i+1);
	FOR(i,0,c) ret = ret*9;
	if(c >= 1) ret += h(d, c-1);
	return ret;
}

ll g(int d, int c){
	if(c==-1) return 0;
	if(d==-1) return 1;
	if(n[d] == 0) return g(d-1, c);
	ll &ret = dp[d][c];
	if(ret != -1) return ret;
	ret = g(d-1, c-1) + h(d, c) + (n[d]-1)*h(d, c-1);
	return ret;
}

ll f(ll x){
	if(x==0) return 0;
	n.resize(19);
	FOR(i,0,n.size()){
		n[i] = x%10;
		x/=10;
	}
	ms(dp, -1);
	return g(18, 3)-1;
}

bool classy(int x){
	int cnt = 0;
	while(x){
		cnt += (x%10)>0;
		x/=10;
	}
	return cnt<=3;
}

ll brute(int x){
	int ret = 0;
	FOR(i,1,x+1) ret += classy(i);
	return ret;
}

int main(){
	int T; scan(T);
	while(T--){
		ll L, R; scan(L, R);
		printf("%lld\n", f(R) - f(L-1));
	}
}
