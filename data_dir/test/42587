#include <bits/stdc++.h>
#define endl '\n'

using namespace std;
const int MAXN = (1 << 18);
const int inf = (int)(1e9 + 7);

struct edge
{
	int to, rev, flow, cap;

	edge() {to = -1, rev = -1, flow = 0, cap = 0;}
	edge(int _to, int _rev, int _flow, int _cap)
	{
		to = _to;
		rev = _rev;
		flow = _flow;
		cap = _cap;
	}
};

vector<edge> G[MAXN];

void add_edge(int u, int v, int w)
{
	edge t = edge(v, G[v].size(), 0, w);
	edge r = edge(u, G[u].size(), 0, 0);

	G[u].push_back(t);
	G[v].push_back(r);
}

int n, m;
int s = MAXN - 1, t = MAXN - 2;
int a[MAXN];

void read()
{
	cin >> n;
	for(int i = 0; i < n; i++)
		cin >> a[i];
}

int dist[MAXN];

bool bfs()
{
	for(int i = 0; i <= n; i++)
		dist[i] = inf;
	dist[s] = inf;
	dist[t] = inf;

	queue<int> Q;
	Q.push(s);
	dist[s] = 0;

	while(!Q.empty())
	{
		int u = Q.front();
		Q.pop();

		int sz = G[u].size();
		for(int i = 0; i < sz; i++)
		{
			int v = G[u][i].to;

			if(dist[v] == inf && G[u][i].cap - G[u][i].flow > 0)
			{
				dist[v] = dist[u] + 1;
				Q.push(v);
			}
		}
	}
	 
	return dist[t] != inf;
}

int dfs(int u, int flow)
{
	if(u == t)
		return flow;

	int sz = G[u].size(), v;
	for(int i = 0; i < sz; i++)
	{
		v = G[u][i].to;

		if(dist[v] == dist[u] + 1 && G[u][i].flow < G[u][i].cap)
		{
			int f = dfs(v, min(flow, G[u][i].cap - G[u][i].flow));
			G[u][i].flow += f;
			G[v][G[u][i].rev].flow -= f;

			if(f > 0)
				return f;
		}
	}

	dist[u] = inf;
	return 0;
}

int dinic()
{
	int f = 0, to_add;   
	while(bfs())
	{
		while(to_add = dfs(s, inf)) 
			f += to_add;
	}

	return f;
}

int cnt[MAXN], comp = 1;

void solve()
{
	if(n % 2 == 1)
	{
		cout << "NO" << endl;
		return;
	}

	sort(a, a + n);
	for(int i = n - 1; i >= 0; i--)
		a[i] = a[i] - a[0];

	cnt[a[0]] = 1;
	for(int i = 1; i < n; i++)
		if(a[i] - a[i - 1] > 1)
		{
			cout << "NO" << endl;
			return;
		}
		else cnt[a[i]]++;

	int f = cnt[0] - 1;
	int k = a[n - 1];
	
	for(int i = 1; i < k; i++)
	{
		if(cnt[i] < (f + 2)) 
		{
			cout << "NO" << endl;
			return;
		}

		cnt[i] -= (f + 2);
		f = cnt[i];
	}

	cout << ((cnt[k] == f + 1) ? "YES" : "NO") << endl;

	/*
	for(int i = 0; i <= n; i++)
		if(cnt[i] && i % 2 == 0) 
		{
			add_edge(i, i + 1, 2 * cnt[i]);
			add_edge(i, i - 1, 2 * cnt[i]);
			add_edge(s, i, 2 * cnt[i]);
		}
		else add_edge(i, t, 2 * cnt[i]);

	int ans = n;
	if(dinic() == ans && check()) cout << "YES" << endl;
	else cout << "NO" << endl;
	*/


}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	read();
	solve();
	return 0;
}
