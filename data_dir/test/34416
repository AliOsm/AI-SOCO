#include <bits/stdc++.h>
#include <stdio.h>
using namespace std;

typedef long long ll;
#define all(s) s.begin(),s.end()
#define OO ll(1e15)
#define neig(a, u, e, v) for(int v, e = a.head[u] ; e and (v = a.to[e]) ; e = a.nxt[e])
const int N = 3e5 + 5, M = 5e5 + 4;

int x[] = { 1, -1, 0, 0 };
int y[] = { 0, 0, 1, -1 };

char g[1111][1111];
int vis[1111][1111], vid, n, m;

bool valid(int i, int j) {
	return (i >= 0 && i < n) && (j >= 0 && j < m) && (vis[i][j] != vid)
			&& g[i][j] == '#';
}

void dfs(int i, int j) {
	vis[i][j] = vid;
	for (int k = 0; k < 4; k++) {
		int ni = i + x[k];
		int nj = j + y[k];
		if (valid(ni, nj))
			dfs(ni, nj);
	}
}

int main() {
	int tc = 1;
	//scanf("%d", &tc);
	while (tc--) {
		int ans = 0, f = 1, cnt = 0;
		vid++;
		scanf("%d %d", &n, &m);
		for (int i = 0; i < n; i++)
			scanf("%s", g[i]);
		map<int, int> r, c, rr, cc;
		for (int i = 0; i < n; i++) {
			string s = "";
			for (int j = 0; j < m; j++) {
				if (s.size()) {
					if (g[i][j] != s.back())
						s += g[i][j];
				} else {
					s += g[i][j];
				}
				if (g[i][j] == '#') {
					r[i] = 1;
					c[j] = 1;
					cnt++;
				}
				if (valid(i, j)) {
					ans++;
					dfs(i, j);
				}
			}
			if (s.find("#.#") != -1)
				f = 0;
		}
		for (int i = 0; i < m; i++) {
			string s = "";
			for (int j = 0; j < n; j++) {
				if (s.size()) {
					if (g[j][i] != s.back())
						s += g[j][i];
				} else {
					s += g[j][i];
				}
			}
			if (s.find("#.#") != -1)
				f = 0;
		}
		for (int i = 0; i < n; i++) {
			if (r[i])
				continue;
			for (int j = 0; j < m; j++) {
				if (c[j])
					continue;
				rr[i] = cc[j] = 1;
			}
		}
		for (int i = 0; i < n; i++)
			if (!rr[i] && !r[i])
				f = 0;
		for (int i = 0; i < m; i++)
			if (!cc[i] && !c[i])
				f = 0;
		if (f)
			printf("%d\n", ans);
		else
			puts("-1");
	}
}
