#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327
#endif // M_PI
#define endl "\n"
#define S struct
#define X first
#define Y second
#define V vector
#ifndef __linux__
#define LLD "%I64d"
#else
#define LLD "%ll""d"
#endif
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
using namespace std;
typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
void sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); }
S Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;
S FAIL { FAIL () { cout << "CHANGE!!!" << endl;}};

vector <int> parent;
vector <int> r;
vector <LL> b;
vector <LL> w;

void make_set(int v) {
	parent[v] = v;
	r[v] = 1;
}

int find_set(int t)
{
    if (t == parent[t]) {
        return t;
    }
    return parent[t] = find_set(parent[t]);
}

void union_sets(int x, int y)
{
    x = find_set(x);
    y = find_set(y);
    if (x != y) {
        if (r[x] < r[y]) {
            swap(x, y);
        }
        parent[y] = x;
        w[x] += w[y];
        b[x] += b[y];
        if (r[x] == r[y]) {
            ++r[x];
        }
    }
}

void init(int n)
{
    r.resize(n);
    parent.resize(n);
    FOR (i, 0, n) {
        make_set(i);
    }
}

int main()
{
    int n, m, maxw;
    cin >> n >> m >> maxw;
    w.resize(n);
    b.resize(n);
    GET(w, n);
    GET(b, n);
    auto w0 = w;
    auto b0 = b;
    init(n);
    FOR (i, 0, m) {
        int x, y;
        cin >> x >> y;
        --x, --y;
        union_sets(x, y);
    }
    vector <LL> b2;
    vector <LL> w2;
    vector <vector <LL>> b3(n);
    vector <vector <LL>> w3(n);
    vector <int> idx;
    FOR (i, 0, n) {
        if (parent[i] == i) {
            b2.push_back(b[i]);
            w2.push_back(w[i]);
            idx.push_back(i);
        }
        b3[find_set(i)].push_back(b0[i]);
        w3[find_set(i)].push_back(w0[i]);
    }
    vector <LL> ans(maxw + 1, -1);
    ans[0] = 0;
    FOR (i, 0, w2.size()) {
        auto ans2 = ans;
        FOR (j, w2[i], maxw + 1) {
            if (ans[j - w2[i]] != -1) {
                ans2[j] = max(ans2[j], ans[j - w2[i]] + b2[i]);
            }
        }
        FOR (k, 0, b3[idx[i]].size()) {
            FOR (j, w3[idx[i]][k], maxw + 1) {
                if (ans[j - w3[idx[i]][k]] != -1) {
                    ans2[j] = max(ans2[j], ans[j - w3[idx[i]][k]] + b3[idx[i]][k]);
                }
            }
        }
        ans = ans2;
    }
    cout << *max_element(IT(ans));
    return 0;
}
