#include <bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define pb push_back
#define mp make_pair
typedef long long ll;
const int MAX = 1000008;
int n,root;
ll sum;
int cost[MAX];
vector<vector<int> > g;

vector<int> node;
int r[MAX], l[MAX];

void DFS(int u)
{
    node.pb(u);
    for(int i=0;i<(int)g[u].size();i++){
        int v = g[u][i];
        DFS(v);
    }
    l[u] = node.size() - 1;
}

ll acc[MAX];
int cnt[MAX];
ll sub[MAX];

int main()
{
    ios::sync_with_stdio(false);
	cin >> n;
	g.resize(n);
	for(int i=0;i<n;i++){
        int p,c;
        cin >> p >> c;
        --p;
        cost[i] = c;
        if(p!=-1) g[p].pb(i);
        else root = i;
        sum += c;
	}
	DFS(root);
//	for(int i=0;i<n;i++)
//        cout << node[i] << " ";
//    cout << endl;
//    for(int i=0;i<n;i++)
//        cout << l[node[i]] <<  " ";
//    cout << endl;
    if(sum % 3 != 0){
        cout << -1 << endl;
        return 0;
    }
    acc[0] = cost[ node[0] ];
    for(int i=1;i<n;i++)
        acc[i] = cost[node[i]] + acc[i-1];
//    for(int i=0;i<n;i++)
//        cout << acc[i] << " ";
//    cout << endl;
    cnt[n] = 0;
    for(int i=n-1;i>=0;i--){
        int last = l[node[i]];
        ll s = acc[last] - (i? acc[i-1] : 0);
        sub[i] = s;
        cnt[i] = cnt[i+1];
        if(s == sum / 3) cnt[i]++;
    }
//    for(int i=0;i<n;i++)
//        cout << cnt[i] << " ";
//    cout << endl;
//    for(int i=0;i<n;i++)
//        cout << sub[i] << " ";
//    cout << endl;
    bool ok = false;
    for(int i=1;i<n;i++){
        if(sub[i] == sum / 3){
            int nxt = l[node[i]] + 1;
            if(nxt < n && cnt[nxt] > 0){
                for(int j=nxt;j<n;j++)
                    if(sub[j] == sum / 3){
                        ok = true;
                        cout << node[i]+1 << " ";
                        cout << node[j]+1 << endl;
                        break;
                    }
                break;
            }
        }
        if(sub[i] == 2 * sum / 3){
            int t = cnt[i] - cnt[l[node[i]]+1];
            if(t > 0){
                for(int j=i+1;j<n;j++)
                    if(sub[j] == sum / 3){
                        ok = true;
                        cout << node[i]+1 << " ";
                        cout << node[j]+1 << endl;
                        break;
                    }
                break;
            }
        }
    }
    if(!ok) cout << -1 << endl;
    return 0;
}











