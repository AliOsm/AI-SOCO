#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <vector>

using namespace std;

#define snuke(it,x) for (__typeof((x).begin()) it = (x).begin();\
                it != (x).end(); it ++)


typedef pair<int,int> PII;
typedef long long lld;
const int N = 101000;
int n,K;
vector<PII> edge;
vector<int> dis[N];
int vis[N],deg[N];

void work() {
        if(n==1) {
                if (dis[0].size()==1) {
                        puts("0");
                        return ;
                } else {
                        puts("-1");
                        return ;
                }
        }
        if (dis[0].size()!=1) {
                puts("-1");
                return ;
        }
/*        int keynode = -1,cnt = 0,deep = -1;
        for (int i = 1; i < N-1; i ++) {
                if (dis[i].size()>0 && dis[i-1].size()+dis[i+1].size()+dis[i].size()>=K) {
                        keynode = dis[i][0];
                        deep = i;
                        break;
                }
        }
        if (keynode==-1) {
                puts("-1");
                return ;
        }*/
        int m = n-1;
        for (int i = 0; i < N-1; i ++) {
                int sz = dis[i].size();
                int j = 0;
                int nsz = dis[i+1].size();
                for (int r = 0; r < nsz; r ++) {
                        if (j==sz) {
                                puts("-1");
                                return ;
                        }
                        if (deg[dis[i][j]]>=K) j ++;
                        if (j==sz) {
                                puts("-1");
                                return ;
                        }
                        deg[dis[i][j]] ++;
                        deg[dis[i+1][r]] ++;
                        edge.push_back(PII(dis[i][j],dis[i+1][r]));
        /*                if (dis[i][j]==keynode) {
                                cnt ++;
                                vis[dis[i+1][r]] = 1;
                        } else if (dis[i+1][r]==keynode) {
                                cnt ++;
                                vis[dis[i][j]] = 1;
                        }*/
                }
        }
  /*      m -= cnt;
        vis[keynode] = 1;
        for (int k = -1; k <= 1; k ++) {
                for (int i = 0; i < (int)dis[deep+k].size(); i ++) {
                        int v = dis[deep+k][i];
                        if (vis[v]) continue;
                        if (cnt==K) break;
                        edge.push_back(PII(keynode,v));
                        vis[v] = 1;
                        cnt ++;
                }
        }
        m += cnt;*/
        printf("%d\n",m);
        for (int i = 0; i < (int)edge.size(); i ++) {
                printf("%d %d\n",edge[i].first+1,edge[i].second+1);
        }
}

int main() {
        scanf("%d%d",&n,&K);
        for (int i = 0; i < n; i ++) {
                int x;
                scanf("%d",&x);
                dis[x].push_back(i);
        }
        work();
        return 0;
}
