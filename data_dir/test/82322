#include <bits/stdc++.h>

#define x0 abc
#define y0 ABC
#define x1 abcd
#define y1 ABCD
#define xn abcde
#define yn ABCDE

#define l_b lower_bound
#define u_b upper_bound

#define fi first
#define se second
#define m_p make_pair

#define p_b push_back
#define po_b pop_back

#define ld long double
#define ll long long

#define MAXLL 1000000000000000000LL
#define MAXINT 2000000000

#define MINLL -1000000000000000000LL
#define MININT -2000000000

#define P acos(-1)

#define endl '\n'

#define OUT cout << "-------" << endl;

using namespace std;

pair < int, pair <int, int> > ans[181];

vector <int> v[181], vn[181];

int one, two, n, m, i, k, l, kol1, kol2;

bool pole[181];

    void dfs(int nom)
    {
        int i;

        pole[nom] = true;

        vn[k].p_b(nom);

        for (i = 0; i < v[nom].size(); i++)
            if (!pole[v[nom][i]]) dfs(v[nom][i]);
    }

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> n >> m;

    for (i = 1; i <= m; i++) {
        cin >> one >> two;

        v[one].p_b(two);

        v[two].p_b(one);
    }

    for (i = 1; i <= n; i++)
        if (!pole[i]) {
            k++;

            dfs(i);

            if (vn[k].size() > 3) {
                cout << "-1" << endl;

                return 0;
            }
        }

    for (i = 1; i <= n; i++) pole[i] = false;

    for (i = 1; i <= k; i++)
        if (vn[i].size() == 1) kol1++;
        else if (vn[i].size() == 2) kol2++;
        else {
            pole[i] = true;

            l++;

            ans[l] = m_p(vn[i][0], m_p(vn[i][1], vn[i][2]));
        }

    if (kol1 < kol2) {
        cout << "-1" << endl;

        return 0;
    }

    kol1 = kol2;

    for (i = 1; i <= k; i++)
        if (vn[i].size() == 2) {
            pole[i] = true;

            l++;

            ans[l] = m_p(vn[i][0], m_p(vn[i][1], 0));
        }

    for (i = 1; i <= k; i++)
        if ((vn[i].size() == 1) && (kol1 - 1 >= 0)) {
            pole[i] = true;

            ans[l - kol1 + 1].se.se = vn[i][0];

            kol1--;
        }

    kol1 = 0;

    for (i = 1; i <= k; i++)
        if (!pole[i]) kol1++;

    if (kol1 % 3 != 0) {
        cout << "-1" << endl;

        return 0;
    }

    for (i = 1; i <= k; i++)
        if (!pole[i]) {
            if (l == 0) {
                l++;

                ans[l].fi = vn[i][0];

                continue;
            }

            if (ans[l].se.fi == 0)
            ans[l].se.fi = vn[i][0];
            else if (ans[l].se.se == 0)
            ans[l].se.se = vn[i][0];
            else {
                l++;

                ans[l].fi = vn[i][0];
            }
        }

    for (i = 1; i <= n / 3; i++) cout << ans[i].fi << " " << ans[i].se.fi << " " << ans[i].se.se << endl;

    return 0;
}
