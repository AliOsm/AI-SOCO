#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC target("avx,avx2,fma")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("sumsqr.in");ofstream out("sumsqr.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());

vec<int> DS;
vec<vec<int>> inv;
vec<set<int>> AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
int a,k, fn;

void bf2(){
    deque<int> d = {fn};
    int ds = 0, sz = 1, cnt = 0;
    vec<int> us(a);
    us[fn] = 1;
    DS[fn] = 0;
    for(; d.size(); cnt++){
        if(cnt==sz) sz = d.size(), cnt = 0, ds++;
        int v = d[0]; d.pop_front();
        for(int h : inv[v]){
            if(!us[h]){
                us[h] = 1;
                DS[h] = ds+1;
                d.pb(h);
                AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[h].insert(v);
            }
            else if(DS[h]==ds+1){
                AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[h].insert(v);
            }
        }
    }
}

int main() {
    fast;
    cin>>a>>k;
    DS = vec<int>(a, -1);
    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA = vec<set<int>>(a, set<int>());
    inv = vec<vec<int>>(a, vec<int>());
    for(int q=0; q<k; q++){
        int x,y; cin>>x>>y; x--, y--;
        inv[y].pb(x);
    }
    int dl; cin>>dl;
    vec<int> pth(dl);
    for(int q=0; q<dl; q++){
        cin>>pth[q]; pth[q]--;
    }
    fn = pth[dl-1];
    bf2();
    //for(int i : DS) cout<<i<<" "; cout<<endl;
    //for(int i : skok) cout<<i<<" "; cout<<endl;

    int mn = 0, mx = 0;
    for(int q=1; q<dl; q++){
        int x = DS[pth[q-1]];
        int y = DS[pth[q]];
        if(x<=y) mx++, mn++;
        else if(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[pth[q-1]].size()>=2) mx++;
    }
    cout<<mn<<" "<<mx;
}