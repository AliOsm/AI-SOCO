    #include <bits/stdc++.h>
    using namespace std;
     
    #define pb push_back
    #define pp pop_back
     
    typedef long long ll;
    typedef long double ld;
     
    const int MAXN = 2e5 + 20;
    ll c = -1, n, m;
    bool available[MAXN];
    vector <ll> edge[MAXN];
    vector <ll> component[MAXN];
     
     
    void dfs(ll v, ll p) {
    	if (p)	c++;
    	component[c].pb(v);
    	available[v] = false;
    	for (auto i : edge[v]) {
    		if (available[i])
    			dfs(i, 0);
    	}
    }
     
    void dfss(ll v) {
    	available[v] = false;
    	if (available[edge[v][0]])
    		dfss(edge[v][0]);
    	else if (available[edge[v][1]])
    		dfss(edge[v][1]);
    	else
    		return;
    }
     
    bool check(vector <ll> x) {
    	for (auto i : x)
    		if (edge[i].size() != 2)
    			return false;
    	dfss(x[0]);
    	for (auto i : x)
    		if (available[i])	return false;
    	return true;
    }
     
    int main() {
     
    	ios_base::sync_with_stdio(false);	cin.tie(0);	cout.tie(0);
     
    	cin >> n >> m;
    	for (ll i = 0; i < n; i++)	available[i] = true;
    	for (ll i = 0; i < m; i++) {
    		ll x, y;
    		cin >> x >> y;
    		edge[x - 1].pb(y - 1);
    		edge[y - 1].pb(x - 1);
    	}
    	for (ll i = 0; i < n; i++)
    		if (available[i])
    			dfs(i, 1);
     
    	for (ll i = 0; i < n; i++)	available[i] = true;
     
    	ll ans = 0;
    	for (ll i = 0; i <= c; i++)
    		if (check(component[i]))	ans++;
     
    	cout << ans; 
     
    	return 0;
    }