#include <bits/stdc++.h>
using namespace std;
#define ll long long int
// if all node have less than 3 child then exist two node so that passes the all edges
// therefore no matter how distribute labels
// but if one node be have more than 2 child then we can pass the label 0 and label 1 to two of edges 
// in this case biggest MEX is 2. edge with label 0 with other labels has MEX 1 and edge with label 1 with other edges has MEX 0
// and edge with label 0 and 1 has MEX 2
// music by inna spre_Mare
int main()
{
  ios::sync_with_stdio(false),cin.tie(0);
  int n; cin >>n;
  vector <int> res(n - 1); // edge 0 , 1 , ..., n - 2 have lebel x
  vector <bool> seen (n - 1, false); // for seen edges
  map < pair <int, int>, int > edg; // id of edge for two node
  vector< vector<int> > Tree(n + 1); // Tree in the input
  
  for (int i = 0; i < n - 1; ++i){
    int u; cin >>u;
    int v; cin >>v;
    Tree[u].push_back(v);
    Tree[v].push_back(u);
        edg[{u,v}] = i;
        edg[{v,u}] = i;
    };
    int cu = 0;
   
    for (int v = 1; v <= n; ++v) {
      if (Tree[v].size() > 2){
        for (auto ch: Tree[v]) {
          //edg[{v, ch}] id of edge
          res[edg[{v, ch}]] = cu;
          ++cu;
          seen[edg[{v, ch}]] = true;
        }
        break;
      } 
   }

   // travel all edges
   for (auto x: edg) {
    if (seen[ x.second ] == false) {
      res[x.second] = cu;
      ++cu;
      seen[x.second] = true;
    }
   }
    for (int i = 0; i < n - 1; ++i)
      cout<<res[i]<<"\n";
  return 0;
}
