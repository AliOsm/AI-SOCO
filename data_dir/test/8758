#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;

#define FOR(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define SZ(c) ((int)(c).size())

const int LIM = 360360+15, INF = 1e9;
int dp[720720+15];
typedef long long LL;
LL step[15][15];
LL toa[15], tob[15];
LL solve(LL a, LL b, int k) {
	dp[a-b]=0;
	for(LL i=a-1;i>=b;i--) dp[i-b]=dp[i-b+1]+1;
	for(LL i=a;i>=b;i--) {
		if(i-b>0) dp[i-b-1]=min(dp[i-b-1], dp[i-b]+1);
		for(int r=2;r<=k;r++)
			if(i-b-i%r>=0)
				dp[i-b-i%r]=min(dp[i-b-i%r], dp[i-b]+1);
	}
	return dp[0];
}

const int LCM = 360360;
void build_toa(LL x, int k) {
	dp[x]=0;
	for(LL i=x-1;i>=0;i--) dp[i] = dp[i+1]+1;
	for(LL i=x;i>=0;i--) {
		if(i) dp[i-1]=min(dp[i-1], dp[i]+1);
		for(int r=2;r<=k;r++)
			dp[i-i%r]=min(dp[i-i%r], dp[i]+1);
	}
	for(int i=0;i<15;i++) toa[i] = dp[i];
}
void build_tob(LL x, int k) {
	dp[x]=0;
	for(LL i=x+1;i<LCM+15;i++) dp[i] = dp[i-1]+1;
	for(LL i=x+1;i<LCM+15;i++) {
		dp[i]=min(dp[i-1]+1, dp[i]);
		for(int r=2;r<=k;r++)
			if(i-i%r>=x) dp[i]=min(dp[i], dp[i-i%r]+1);
	}
	for(int i=0;i<15;i++) tob[i] = dp[i+LCM];
}
LL solve2(LL a, LL b, int k) {
	LL D = (b/LCM+1)*LCM;
	LL E = (a/LCM-1)*LCM;
	build_toa(a-E,k);
	build_tob(b%LCM,k);
	LL ans = 1LL<<60;
	if(D == E) {
		for(int i=0;i<15;i++) ans=min(ans, toa[i]+tob[i]);
		return ans;
	}
	LL DIF = (E-D)/LCM;
	ans=toa[0]+DIF*step[0][0]+tob[0];
	/*
	for(int i=0;i<15;i++)
		for(int j=0;j<15;j++)
			ans=min(ans, toa[i]+DIF*step[i][j]+tob[j]);*/
	return ans;
}

int main(void) {
	LL a, b;
	int k;
	scanf("%I64d%I64d%d", &a, &b, &k);
	for(int i=0;i<15;i++) {
		for(int j=0;j<i;j++) dp[j] = INF;
		dp[i] = 0;
		for(int j=i+1;j<LIM;j++) {
			dp[j] = dp[j-1]+1;
			for(int r=2;r<=k;r++)
				dp[j] = min(dp[j], dp[j-j%r]+1);
		}
		for(int j=0;j<15;j++) step[j][i] = dp[j+LCM];
	}
	LL ans=0;
	if(a-b<=720720) ans = solve(a,b,k);
	else ans = solve2(a,b,k);
	printf("%I64d\n", ans);
	return 0;
}
