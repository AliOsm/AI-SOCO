#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define int long long
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

vector<vector<int >>adj,adj2;
int vis[5005];
vector<int>comp,temp;
vector<pair<int,int> >p;
int parent[5005];
int mm[5005];
void dfs(int ver)
{
   vis[ver]=1;
   for(auto i:adj[ver])
   {
      if(!vis[i])
         dfs(i);
   }
   comp.push_back(ver);
}

void dfs2(int ver)
{
   temp.push_back(ver);
   vis[ver]=1;
   for(auto i:adj2[ver])
   {
      if(!vis[i])
      {
         dfs2(i);
      }
   }
}

signed main()
{
     ios_base::sync_with_stdio(false);
     cin.tie(NULL);  
 #ifndef ONLINE_JUDGE
    freopen ("INPUT.txt" , "r" , stdin);
    freopen ("OUTPUT.txt" , "w" , stdout);
 #endif

// -------------------------------------Code starts here---------------------------------------------------------------------     

   int n,m,s;
   cin>>n>>m>>s;
   adj.resize(n+1);
   adj2.resize(n+1);
   int x,y;
   for(int i=0;i<m;i++)
   {
      cin>>x>>y;
      p.push_back({x,y});
      adj[x].push_back(y);
      adj2[y].push_back(x);
   }
   for(int i=1;i<=n;i++)
      if(!vis[i])
         dfs(i);
   reverse(comp.begin(),comp.end());
   fill_n(vis,5005,0);
   for(auto i:comp)
   {
      if(!vis[i])
      {
         temp.clear();
         dfs2(i);
         for(auto j:temp)
         {
            parent[j]=i;
         }
      }
   }
   int degree[n+1]={0};
   for(auto i:p)
   {
      if(parent[i.first]!=parent[i.second])
         degree[parent[i.second]]++;
   }
   int ans=0;
   for(int i=1;i<=n;i++)
   {
      if(mm[parent[i]]==0 && degree[parent[i]]==0 && parent[i]!=parent[s])
      {
         ans++;
      }
      mm[parent[i]]=1;
   }
   cout<<ans;

// -------------------------------------Code ends here------------------------------------------------------------------
     clock_t clk;
 	clk = clock();
 
    clk = clock() - clk;
 	cerr << fixed << setprecision(6) << "Time: " << ((double)clk)/CLOCKS_PER_SEC << "\n";
 	return 0;
 }