//its not how good you are...its how good you want to be
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll  long long int
#define inf 1000000000000000000
#define mod 1000003
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"

struct matrix
{
	ll m[101][101];//m is the transformation matrix
	matrix()
	{
		for(int i=0;i<=100;i++)
		{
			for(int j=0;j<=100;j++)
			m[i][j]=0;
		}
	}
}mat;
matrix mul(matrix a,matrix b)
{
	matrix c;
	for(int i=0;i<=100;++i)
	{
		for(int j=0;j<=100;++j)
		{
			c.m[i][j]=0;
			for(int p=0;p<=100;++p)
			{
				c.m[i][j]=(c.m[i][j]+a.m[i][p]*b.m[p][j])%mod;
			}
		}
	}
	return c;
}
matrix pow(matrix base, ll exponent)
{
    matrix result;
    for(int i=0;i<=100;++i)result.m[i][i]=1;
    while (exponent > 0)
    {
        if (exponent % 2 == 1)
            result = mul(result , base);
        exponent = exponent >> 1;
        base = mul(base,base);
    }
    return result;
}
int main()
{
	boost1;boost2;
	ll c,w,h,i,j;
	cin>>c>>w>>h;
	for(i=0;i<w;i++)
	mat.m[i][i+1]=h;
	for(i=0;i<=w;i++)
	mat.m[i][0]=1;
	mat=pow(mat,c);
	ll ans=0;
	for(i=0;i<=w;i++)
	{
		ans+=mat.m[0][i];
		if(ans>=mod)
		ans-=mod;
	}	
	cout<<ans<<endl;
	return 0;
}
