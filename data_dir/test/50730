//AUTHOR : TIRTH JARSANIA
//COLLEGE : DAIICT

#include<bits/stdc++.h>
using namespace std;

#define INF LONG_LONG_MAX
#define MINF LONG_LONG_MIN
#define bp __builtin_popcountll
#define ll long long int
#define ld long double
#define pb push_back
#define ff first
#define ss second
#define pii pair<ll,ll>
#define precision(x,d) cout<<fixed<<setprecision(d)<<x
#define minQueue priority_queue<pii,vector<pii>,greater<pii> > 
#define maxQueue priority_queue<pii> 
#define FAST ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);srand(time(NULL))

struct segTree
{
    ll n;
    vector<ll> a, tree, lazy;
 
    void _update(ll l, ll r, ll val, ll ss, ll se, ll node)
    {
        if(ss < 0 || se >= n)
            return;
        if(r < ss || se < l)
            return;
        tree[node] += lazy[node]*(se-ss+1);
        if(ss != se)
        {
            lazy[2*node+1] += lazy[node];
            lazy[2*node+2] += lazy[node];
        }
        lazy[node] = 0;
 
        if(ss == se)
        {
            tree[node] += val;
            return;
        }
        ll mid = (ss+se)>>1;
        
        if(l <= ss && se <= r)
        {
            tree[node] += val*(se-ss+1);
            lazy[2*node+1] += val;
            lazy[2*node+2] += val;
            return;
        }
        _update(l, r, val, ss, mid, 2*node+1);
        _update(l, r, val, mid+1, se, 2*node+2);
        tree[node] = tree[2*node+1]+tree[2*node+2];
        return ;
    }
 
    ll _query(ll l, ll r, ll ss, ll se, ll node)
    {
        
        if(r < ss || se < l)
            return 0;
        tree[node] += lazy[node]*(se-ss+1);
        if(ss != se)
        {
            lazy[2*node+1] += lazy[node];
            lazy[2*node+2] += lazy[node];
        }
        lazy[node] = 0;
 
        if(l <= ss && se <= r)
            return tree[node];
        ll mid = (ss+se)>>1;
        ll x = _query(l, r, ss, mid, 2*node+1);
        ll y = _query(l, r, mid+1, se, 2*node+2);
        return x+y;
    }
    segTree(ll sz)
    {
        n = sz;
        a.resize(n, 0);
        tree.resize(4*n, 0);
        lazy.resize(4*n, 0);
    }
    ll query(ll l, ll r) {return _query(l, r, 0, n-1, 0);}
    void update(ll l, ll r, ll v) {_update(l, r, v, 0, n-1, 0);}
};

const ll N = 3e5+5;
vector< ll > g[N] ,ans(N,0),dep(N,0);
vector< pii > q[N];
segTree jt(N);
void dfs(ll v, ll p)
{
    dep[v] = dep[p] + 1;
    for( auto &it : q[v] )
        jt.update( dep[v] , dep[v] + it.ff , it.ss );
    ans[v] = jt.query( dep[v] , dep[v] );
    for( auto &it : g[v] )
        if( it != p )
            dfs( it , v);
    for( auto &it : q[v] )
        jt.update( dep[v] , dep[v] + it.ff , -it.ss );
    return ;
        
}
int main()
{
    FAST;
    ll n;
    cin >> n;
    for(ll i = 1; i < n ; i++)
    {
       ll u , v;
       cin >> u >> v;
        g[u].pb(v);
        g[v].pb(u);
    }
    ll m;
    cin >> m;
    for(ll i=0;i<m;i++) 
    {
        ll v , d , x;
        cin >> v >> d >> x;
        q[v].pb({d,x});
    }
    dfs( 1, 0 );
    for( ll i=1;i<=n;i++) cout << ans[i] << " ";
}