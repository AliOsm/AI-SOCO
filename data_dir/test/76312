/**/
#include <bits/stdc++.h>
using namespace std;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;

int cnt[30][100010],cnts[30][100010];

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	int N;
	string s;
	cin>>N>>s;
	for(int i = 0;i < N;i++) {
		if(i) {
			for(int j = 0;j < 26;j++) {
				cnt[j][i] = cnt[j][i-1];
				cnts[j][i] = cnts[j][i-1];
			}
		}
		if(s[i] <= 'Z')
			cnt[s[i] - 'A'][i]++;
		else
			cnts[s[i] - 'a'][i]++;
	}
	int res = N;
	for(int i = 0;i < N;i++) {
		int lo = 1,hi = N - i,cur = -1;
		while(lo <= hi) {
			int md = (lo + hi)>>1;
			bool can = true;
			for(int j = 0;j < 26;j++) {
				can &= (cnt[j][i+md-1] - (i?cnt[j][i-1]:0) > 0) || (cnt[j][N-1] == 0);
				can &= (cnts[j][i+md-1] - (i?cnts[j][i-1]:0) > 0) || (cnts[j][N-1] == 0);
			}
			if(can) {
				cur = md;
				hi = md - 1;
			}else {
				lo = md + 1;
			}
		}
		if(cur != -1)
			res = min(res,cur);
	}
	cout<<res<<'\n';
	return 0;
}
/**/

