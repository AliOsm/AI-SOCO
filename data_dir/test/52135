#include<bits/stdc++.h>
#define lf double
#define ll long long
#define ull unsigned ll
#define ii pair<int,int>
#define lolo pair<ll,ll>
#define il pair<int,ll>
#define iii pair<ii,int>
#define iiii pair<ii,ii>
#define pll pair<ll,ll>
#define ld long int
#define heap priority_queue
#define mp make_pair
#define st first
#define nd second
#define pb push_back
#define pp pop_back
#define all(x) x.begin(),x.end()
#define len(x) strlen(x)
#define sz(x) (int) x.size()
#define orta ((bas+son)/2)
#define min3(x,y,z) min(min(x,y),z)
#define max3(x,y,z) max(max(x,y),z)
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define pw(x) (1<<(x))
#define MOD 1000000007
#define inf 1000000009
#define N 200005
#define LOG 1005
#define M 1005
#define EPS 0.0000001
#define B 10
#define pw(x) (1<<(x))
using namespace std;

int n,q,x,y,t,val;
int a[N],low[N],fin[N],dep[N],S[N*4][2],lazy[N*4][2];
vector<int> v[N];

void push(int node,int bas,int son,int w) {

	S[node][w]+=lazy[node][w];

	if(bas!=son) {

		lazy[node*2][w]+=lazy[node][w];
		lazy[node*2+1][w]+=lazy[node][w];

	}

	lazy[node][w]=0;

}

int get(int node,int bas,int son,int x,int y,int w) {

	push(node,bas,son,w);

	if(bas>y || son<x) return 0;

	if(bas>=x && son<=y) return S[node][w];

	return get(node*2,bas,orta,x,y,w)+get(node*2+1,orta+1,son,x,y,w);

}

void up(int node,int bas,int son,int x,int y,int w,int val) {

	push(node,bas,son,w);

	if(bas>y || son<x) return ;

	if(bas>=x && son<=y) {

		lazy[node][w]+=val;

		push(node,bas,son,w);

		return ;

	}

	up(node*2,bas,orta,x,y,w,val);
	up(node*2+1,orta+1,son,x,y,w,val);

	S[node][w]=S[node*2][w]+S[node*2+1][w];

}

void dfs(int node,int ata,int der) {

	low[node]=++t;

	dep[node]=der;

	for(int i:v[node]) {

		if(i==ata) continue ;

		dfs(i,node,!der);

	}

	fin[node]=t;

} 

int main() {

	scanf("%d %d",&n,&q);

	for(int i=1;i<=n;i++) {

		scanf("%d",&a[i]);

	}

	for(int i=1;i<n;i++) {

		scanf("%d %d",&x,&y);

		v[x].pb(y);
		v[y].pb(x);
	
	}

	dfs(1,0,0);

	while(q--) {

		scanf("%d %d",&t,&x);

		if(t==1) {

			scanf("%d",&val);

			up(1,1,n,low[x],fin[x],dep[x],val);
			up(1,1,n,low[x],fin[x],!dep[x],-val);

		}
		else {

			printf("%d\n",a[x]+get(1,1,n,low[x],low[x],dep[x]));

		}

	}

}
