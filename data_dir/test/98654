#include <bits/stdc++.h>
using namespace std;

struct Edge
{
    int to, nxt;
};
int head[510], c;
Edge v[100010];

int grad[510], grad_init[510];
bool viz[510];
int from, to;
int nr;
pair <int, int> posibil[510];
int cnt;
int tata[510];
bool activ[510];

bool dfs(int nod)
{
    activ[nod] = 1;
    for (int i(head[nod]); i; i = v[i].nxt) {
        int n = v[i].to;
        if (!tata[n]) {
            tata[n] = nod;
            if (dfs(n)) {
                activ[nod] = 0;
                return true;
            }
        }
        else if (activ[n]) {
            activ[nod] = 0;
            posibil[++cnt] = { nod, n };
            while (nod != n) {
                posibil[++cnt] = { tata[nod], nod };
                nod = tata[nod];
            }
            return true;
        }
    }
    activ[nod] = 0;
    return false;
}

void sortop(int nod)
{
    nr++;
    viz[nod] = 1;
    for (int i(head[nod]); i; i = v[i].nxt) {
        if (nod == from && v[i].to == to)
            continue;
        grad[v[i].to]--;
        if (grad[v[i].to] == 0)
            sortop(v[i].to);
    }
}


int main()
{
    int n, m, a, b;
    cin >> n >> m;

    while (m--) {
        cin >> a >> b;
        v[++c] = { b, head[a] };
        head[a] = c;
        grad_init[b]++;
    }

    for (int i(1); i <= n; i++) {
        if (!tata[i]) {
            tata[i] = -1;
            if (dfs(i))
                break;
        }
    }

    if (!cnt) {
        cout << "YES\n";
        return 0;
    }

    for (int i(1); i <= cnt; i++) {
        from = posibil[i].first, to = posibil[i].second;
        for (int j(1); j <= n; j++)
            grad[j] = grad_init[j], viz[j] = 0;

        nr = 0;
        grad[to]--;

        for (int j(1); j <= n; j++)
            if (!viz[j] && grad[j] == 0)
                sortop(j);

        if (nr == n) {
            cout << "YES\n";
            return 0;
        }
    }

    cout << "NO\n";
    return 0;
}
