#include<bits/stdc++.h>

using namespace std;

int const N = 1e3+10;
typedef pair<int,int> pii;

int n, k;

set<pii> Set;
set<pii>::iterator it;

struct node
{
	int c, p, id;
	node (int c, int p, int id) : c(c), p(p), id(id) {}
};
bool operator<(node a, node b)
{
	return (a.p > b.p) || (a.p == b.p && a.c < b.c);
}
vector<node> vec;

vector<pii> resp;

void solve()
{
	sort ( vec.begin(), vec.end());

	int ans = 0;

	for (int i = 0; i < n; i++)
	{
		int P = vec[i].p;
		int C = vec[i].c;
		int ID = vec[i].id;

		if (Set.empty())
			break;

		it = Set.lower_bound( pii( C, -1));

		if (it != Set.end())
		{
			resp.push_back( pii( ID, it->second));
			Set.erase(it);
			ans += P;
		}

	}

	printf ("%d %d\n", resp.size(), ans);
	for(int i = 0; i < resp.size(); i++)
		printf("%d %d\n", resp[i].first, resp[i].second);

}

int main()
{

		scanf (" %d", &n);

		for (int i = 1; i <= n; i++)
		{

			int x, y;
			scanf (" %d %d", &x, &y);

			vec.push_back( node( x, y, i));
			
		}

		scanf (" %d", &k);

		for (int i = 1; i <= k; i++)
		{
			int r;
			scanf (" %d", &r);
			Set.insert( pii(r, i));
		}

		solve();

		return 0;

}