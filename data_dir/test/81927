#include <bits/stdc++.h>

using namespace std;

#define long long long
#define INF (long) 1e18
#define MOD 1'000'000'007
#define mll map<long, long>
#define pll pair<long, long>
#define umap unordered_map
#define umll umap<long, long>
#define uset unordered_set
#define pb push_back
#define FOR(i, a, b) \
  for (long i = (a); i < (long) (b); i++)
#define PRINTV(v) \
  FOR (_i, 0, v.size()) \
    cout << v[_i] << " "; \
  cout << "\n";

int main()
{
  ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);

  long n, m, p;
  cin >> n >> m >> p;

  vector<long> a(n), b(m);
  for (auto &x : a) cin >> x;
  for (auto &x : b) cin >> x;

  set<long> resp;
  FOR (i, 0, p) {
    if (i + (m-1) * p >= n) break;
    unordered_multiset<long> good, bad;
    for (auto &x : b) {
      good.insert(x);
    }
    for (long j = i; j <= i + (m-1) * p; j += p) {
      auto it = good.find(a[j]);
      if (it != good.end()) {
        good.erase(it);
      } else {
        bad.insert(a[j]);
      }
    }
    if (bad.empty() and good.empty()) resp.insert(i);
    for (long j = i + m*p; j < n; j += p) {
      long ant = a[j - m*p];
      auto it = bad.find(ant);
      if (it != bad.end()) {
        bad.erase(it);
      } else {
        good.insert(ant);
      }
      it = good.find(a[j]);
      if (it != good.end()) {
        good.erase(it);
      } else {
        bad.insert(a[j]);
      }
      if (bad.empty() and good.empty()) {
        resp.insert(j - (m-1)*p);
      }
    }
  }
  cout << resp.size() << "\n";
  for (auto &x : resp) {
    cout << x+1 << " ";
  }
  cout << "\n";
}
