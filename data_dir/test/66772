//Pham Huu Canh
//C. Arthur and Table
//Algorithm:
//Complexity:
//AC:

#include <iostream>
#include <fstream>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

#define max64 9223372036854775807LL
#define max32 2147483647
#define maxty 1001001001
#define max16 32767
#define EPS 1e-8
#define ll long long
#define ull unsigned long long
#define pb push_back
#define mp make_pair
#define PQ priority_queue
#define LB lower_bound
#define UB upper_bound
#define fi first
#define se second
#define timmax(x, y)    ((x) > (y) ? (x) : (y))
#define timmin(x, y)    ((x) < (y) ? (x) : (y))
#define fori(i, n)      for((i) = 0; (i) < (n); (i)++)
#define ford(i, n)      for((i) = (n-1); (i) >= 0; (i)--)
#define fore(i, v)      for(typeof(v.begin()) i = v.begin(); i != v.end(); i++)
#define repi(i, a, b)   for((i) = (a); (i) <= (b); (i)++)
#define repd(i, a, b)   for((i) = (a); (i) >= (b); (i)--)
#define all(tmpv)      tmpv.begin(), tmpv.end()

#define fii "c.inp"
#define foo "c.out"
#define MOD 1000000007
#define inf 1000111000111000111LL

using namespace std;

typedef pair<int, int> II;
typedef vector<int> VI;
#define nmax 100005

int a[nmax], b[nmax], d[nmax], sum[nmax], pre[nmax], pri[nmax];
int n;
VI v[nmax];
bool can;

inline int tong(int x){
    int i, t, res = 0;
    for (i = 1; i <= 200 && x; i++){
        t = timmin(x, pri[i]);
        res += t * i;
        x -= t;
    }
    return res;
}

inline void upd(int x){
    fore(ite, v[x]) pri[(*ite)]++;
}

void input()
{
    int i, len;
    
    scanf("%d", &n);
    repi(i, 1, n)   scanf("%d", &a[i]), d[a[i]]++;
    repi(i, 1, n)   scanf("%d", &b[i]), v[a[i]].pb(b[i]), sum[a[i]] += b[i];
    
    repi(i, 1, 100000){
        sum[i] += sum[i-1];
        pre[i] = pre[i-1] + d[i];
    }
    
    int res = maxty;
    repi(len, 1, 100000)    if (d[len]){
        int cost = sum[100000] - sum[len] + tong(timmax(pre[len-1] - d[len] + 1, 0));
        res = timmin(res, cost);
        upd(len);
    }
    
    printf("%d", res);
}

int main()
{
    #ifndef ONLINE_JUDGE
        freopen(fii,"r",stdin);
        freopen(foo,"w",stdout);
    #endif

    input();

    return 0;
}
