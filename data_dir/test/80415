#include <iostream>
#include <cstdio>
#include <algorithm>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <cstring>
#include <fstream>
#include <memory.h>
#include <iomanip>
#include <bitset>
#include <fstream>
#include <string>
#include <list>
#include <unordered_map>

using namespace std;

#define right asfdsg
#define left asfdsvs
#define pb emplace_back
#define F first
#define S second
#define mp make_pair
#define x1 _xxx1
#define y1 _yyy1

#define forn(i, n) for(int i = 0 ; (i) < (n) ; ++i)

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef std::pair < int, int > pii;
typedef std::pair < ll, ll > pll;
typedef std::vector < std::vector < ld > > vld;

const int INF = (int) 2e9 + 7;
const ld EPS = (ld) 1e-5;
const int BASE = (int) 1e9 + 7;
const int MAXN = 1010;
const ll INFLL = (ll) 1e18;

const int POINTS = 5;
int n;
vector <int> g[MAXN];
bool used[MAXN];
vector <int> okr[MAXN][MAXN];
ll rasts[MAXN][MAXN];


template<typename T>
T sqr(T x) {
    return x * x;
}

ll GetRast(const vector<int>& a, const vector<int>& b) {
    ll ans = 0;
    for (int i = 0; i < POINTS; i ++)
        ans += sqr(1ll * a[i] - b[i]);
    return ans;
}

vector<int> GetMid(const vector<int>& a, const vector<int>& b) {
    vector<int>c(POINTS);
    for (int i = 0; i < POINTS; i ++)
        c[i] = (a[i] + b[i]) / 2;
    return c;
}

bool in_circle(const pair< int, int >& c, int id) {
    ll r1 = rasts[c.first][c.second];
    ll r2 = GetRast(okr[c.first][c.second], g[id]);
    return r1 >= r2;
}

int main() {
    scanf ("%d", &n);
    if (n <= 2) {
        printf ("%d\n", n);
        for (int i = 1; i <= n; i ++)
            printf ("%d ", i);
        return 0;
    }
    for (int i = 1; i <= n; i ++) {
        for (int j = 1; j <= POINTS; j++) {
            int x;
            scanf("%d", &x);
            g[i].push_back(2 * x);
        }
    }
    for (int i = 1; i <= n; i ++) {
        for (int j = i + 1; j <= n; j ++) {
            okr[i][j] = GetMid(g[i], g[j]);
            rasts[i][j] = GetRast(okr[i][j], g[i]);
        }
    }
    vector <pair<int,int>> circles;
    for (int i = 1; i <= n; i ++)
        for (int j = i + 1; j <= n; j ++)
            circles.emplace_back(i, j);
    random_shuffle(circles.begin(), circles.end());
    vector<int> ids;
    for (int i = 1; i <= n; i ++)
        ids.push_back(i);
    //random_shuffle(ids.begin(), ids.end());
    vector<int>ans;
    for (int id : ids) {
        bool is_good = true;
        for (auto circle : circles) {
            if (!in_circle(circle, id)) {
                is_good = false;
                break;
            }
        }
        if (is_good) {
            ans.push_back(id);
            break;
        }
    }
    sort(ans.begin(), ans.end());
    cout << ans.size() << "\n";
    for (int id : ans)
        cout << id << " ";
    return 0;
}