#include <stdio.h>
#include <bits/stdc++.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)

using namespace std;

const int N = 200000;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const double eps = 1e-9;
const double pi = atan2(0, -1);
const int ABC = 26;

struct event
{
    int type, x, y1, y2, id;
    event() {}
    event(int x, int y)
    {
        this->type = 0;
        this->x = x;
        this->y1 = y;
    }
    event(int type, int x, int y1, int y2, int id)
    {
        this->type = type;
        this->x = x;
        this->y1 = y1;
        this->y2 = y2;
        this->id = id;
    }
};

bool operator < (event e1, event e2)
{
    if (e1.x != e2.x)
        return e1.x < e2.x;
    else
        return e1.type < e2.type;
}

int F[N];

void add(int x)
{
    for (; x < N; x = (x | (x + 1)))
        F[x]++;
}

int get(int x)
{
    int res = 0;
    for (; x >= 0; x = (x & (x + 1)) - 1)
        res += F[x];
    return res;
}

int ans[N * 20];

int p = 0;
event e[N * 20];

void add_rect(int x1, int y1, int x2, int y2, int id)
{
    e[p++] = event(1, x1 - 1, y1, y2, id);
    e[p++] = event(2, x2, y1, y2, id);
}

ll f(int x)
{
    return (ll)x * (x - 1) / 2;
}

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    //ios_base::sync_with_stdio(0);
    //cin.tie(0);
    //cout.precision(20);
    //ll TL = 0.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    int n, q;
    scanf("%d %d", &n, &q);
    rep(i, 0, n)
    {
        int x;
        scanf("%d", &x);
        x--;
        //cout << x << " " << i << "\n";
        e[p++] = event(x, i);
    }
    rep(i, 0, q)
    {
        int l, d, r, u;
        cin >> l >> d >> r >> u;
        int x1 = d - 1, y1 = l - 1, x2 = u - 1, y2 = r - 1;
        //cout << x1 << " " << y1 << " " << x2 << " " << y2 << "\n";
        add_rect(0, 0, x1 - 1, n - 1, i * 8);
        add_rect(0, 0, n - 1, y1 - 1, i * 8 + 1);
        add_rect(0, y2 + 1, n - 1, n - 1, i * 8 + 2);
        add_rect(x2 + 1, 0, n - 1, n - 1, i * 8 + 3);
        add_rect(0, 0, x1 - 1, y1 - 1, i * 8 + 4);
        add_rect(x2 + 1, 0, n - 1, y1 - 1, i * 8 + 5);
        add_rect(0, y2 + 1, x1 - 1, n - 1, i * 8 + 6);
        add_rect(x2 + 1, y2 + 1, n - 1, n - 1, i * 8 + 7);
    }
    sort(e, e + p);
    rep(i, 0, p)
    {
        //cout << e[i].type << " " << e[i].x << " " << e[i].y1 << " " << e[i].y2 << "\n";
        if (e[i].type == 0)
        {
            add(e[i].y1);
        }
        else
        {
            int res = get(e[i].y2) - get(e[i].y1 - 1);
            if (e[i].type == 1)
                ans[e[i].id] -= res;
            else
                ans[e[i].id] += res;
        }
    }
    /*cout << "\n";
    rep(i, 0, q)
    {
        rep(j, 0, 8)
            cout << ans[i * 8 + j] << " ";
        cout << "\n";
    }*/
    rep(i, 0, q)
    {
        ll res = f(n);
        rep(j, 0, 8)
            if (j < 4)
                res -= f(ans[i * 8 + j]);
            else
                res += f(ans[i * 8 + j]);
        cout << res << "\n";
    }
    return 0;
}
