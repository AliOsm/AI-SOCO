#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

#define PB push_back
#define MP make_pair

#define rep(i,n) for(int i=0;i<(n);++i)
#define REP(i,n) for(int i=1;i<=(n);++i)
#define FOR(i,l,h) for(int i=(l);i<=(h);++i)
#define FORD(i,h,l) for(int i=(h);i>=(l);--i)
#define print(expr) cout<<(#expr)<<" : "<<(expr)<<endl
#define tr(it,c) for(auto it=(c).begin(); it!=(c).end(); ++it)
#define all(c) (c).begin(), (c).end()

typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long int64;
typedef pair<int,int> pii;

const int maxn=100050, inf=0x3fffffff;

int H,M;

struct Seg{
	int *s,n;
	void init(int _n)
	{
		n=_n;
		s=new int[M<<1];
		memset(s,0,sizeof(int)*(M<<1));
		REP(i,n) s[i+M]=i;
		FORD(i,M-1,1) s[i]=min(s[i+i],s[i+i+1]);
	}
	void chg(int x)
	{
		++x;
		if(s[x+M]==inf) s[x+M]=x;
		else s[x+M]=inf;
		x+=M;
		while(x>0)
		{
			x>>=1;
			s[x]=min(s[x+x],s[x+x+1]);
		}
	}
	int __ask(int a,int b)
	{
		int res=inf;
		a=a+M-1; b=b+M+1;
		while(a^b^1)
		{
			if(~a&1) res=min(res,s[a^1]);
			if( b&1) res=min(res,s[b^1]);
			a>>=1; b>>=1;
		}
		return res;
	}
	pii ask(int a)
	{
		++a;
		if(a==1)
		{
			int t=__ask(1,n);
			return MP(t-1,t-1);
		}
		else
		{
			int t=__ask(a,n);
			if(t<inf)
			{
				return MP(t-a,t-1);
			}
			else
			{
				t=__ask(1,a-1);
				return MP(n-a+t,t-1);
			}
		}
	}
}seg[maxn];

int gcd(int a,int b) {return b==0 ? a : gcd(b,a%b);}

map<int,int> mp;
int h,m,n,g;
vector<VI> numberToMine;
pii mineToNumber[maxn];
int64 ans;

int main(void)
{
	ios::sync_with_stdio(false);
	cin>>h>>m>>n; g=gcd(m,h);
	H=0; while((1<<H)<h/g+2) ++H; M=1<<H;
	numberToMine.resize(g,VI(h/g,-1));
	rep(i,g) seg[i].init(h/g);
	rep(i,g) rep(j,h/g)
	{
		int s=(int64(i)+int64(j)*m)%h;
		numberToMine[i][j]=s;
		mineToNumber[s]=MP(i,j);
	}
	while(n--)
	{
		char ch; cin>>ch;
		if(ch=='+')
		{
			int id,hash; cin>>id>>hash;
			int mi=mineToNumber[hash].first, mj=mineToNumber[hash].second;
			pii p=seg[mi].ask(mj);
			int nj=p.second; ans+=p.first;
			seg[mi].chg(nj);
			int nhash=numberToMine[mi][nj];
			mp[id]=nhash;
		}
		else if(ch=='-')
		{
			int id; cin>>id;
			int mi=mineToNumber[mp[id]].first,
				mj=mineToNumber[mp[id]].second;
			seg[mi].chg(mj);
		}
	}
	cout<<ans<<endl;
	return 0;
	
}
