#include <bits/stdc++.h>
using namespace std;
#define rep(i,a,b) for(auto i = (a); i < (b); i++)
#define iter(it,c) for(auto it = (c).begin(); it != (c).end(); ++it)
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector<ii> vii;
const int INF = ~(1<<31);
#define fs first
#define sc second
#define pb push_back

const double EPS = 1e-9;
const double pi = acos(-1);
typedef unsigned long long ull;
typedef vector<vi> vvi;
typedef vector<vii> vvii;
template <class T> T smod(T a, T b) {
    return (a % b + b) % b;
}

int main() {
    cin.sync_with_stdio(false);
    int t;
    cin >> t;
    while(t--) {
        int n;
        cin >> n;
        vvi A(n-1);
        rep(i,0,n-1) {
            int k;
            cin >> k;
            vi B(k);
            rep(j,0,k) cin >> B[j];
            A[i] = B;
        }
        vi SOL;
        rep(i,0,A.size()) {
            if(SOL.size() != 0) break;
            if(A[i].size() != 2) {
                continue;
            }
            vi DONE(n-1,0);
            DONE[i] = 1;
            vi P;
            P = {A[i][1], A[i][0]};

            set<int> H;
            H.insert(P[0]);
            H.insert(P[1]);

            rep(j,0,n-2) {
                rep(z,0,n-1) {
                    if(DONE[z]) continue;
                    int bad = 0;
                    int good = 0;
                    int th = -1;
                    rep(k,0,A[z].size()) {
                        int val = A[z][k];
                        if(H.find(val) == H.end()) {
                            bad++;
                            th = val;
                        } else {
                            good++;
                        }
                    }
                    if(good >= 1 && bad == 1) {
                        P.pb(th);
                        H.insert(th);
                        DONE[z] = 1;
                    }
                }
            }
            if(P.size() == n) {
                // Check if actually good
                bool good = true;
                rep(z,0,A.size()) {
                    vi TH = A[z];
                    int mn = n-1;
                    int mx = 0;
                    rep(j,0,TH.size()) {
                        rep(k,0,P.size()) {
                            if(P[k] == TH[j]) {
                                mx = max(mx, k);
                                mn = min(mn, k);
                            }
                        }
                    }
                    if(mx-mn+1 != A[z].size()) {
                        good = false;
                    }
                }
                if(good) {
                    SOL = P;
                    break;
                }
            }

            DONE = vi(n-1,0);
            DONE[i] = 1;
            P = {A[i][0], A[i][1]};
            H.clear();
            H.insert(P[0]);
            H.insert(P[1]);

             rep(j,0,n-2) {
                rep(z,0,n-1) {
                    if(DONE[z]) continue;
                    int bad = 0;
                    int good = 0;
                    int th = -1;
                    rep(k,0,A[z].size()) {
                        int val = A[z][k];
                        if(H.find(val) == H.end()) {
                            bad++;
                            th = val;
                        } else {
                            good++;
                        }
                    }
                    if(good >= 1 && bad == 1) {
                        DONE[z] = 1;
                        P.pb(th);
                        H.insert(th);
                    }
                }
            }

            if(P.size() == n) {
                bool good = true;
                rep(z,0,A.size()) {
                    vi TH = A[z];
                    int mn = n-1;
                    int mx = 0;
                    rep(j,0,TH.size()) {
                        rep(k,0,P.size()) {
                            if(P[k] == TH[j]) {
                                mx = max(mx, k);
                                mn = min(mn, k);
                            }
                        }
                    }
                    if(mx-mn+1 != A[z].size()) {
                        good = false;
                    }
                }
                if(good) {
                    SOL = P;
                    break;
                }
            }
        }
        iter(it,SOL) cout << *it << " ";
        cout << endl;
    }
    return 0;
}

