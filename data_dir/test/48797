#include<bits/stdc++.h>
using namespace std;

#define ll long long

#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) memset(ar, val, sizeof(ar))
#define fill0(ar) fill((ar), 0)
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef pair<ll, ll> ii;
typedef pair<ii, ll> iii;
typedef vector<ii> vii;
typedef vector<ll> vi;

#define INF 1000000000000000
ll parent[100001];

void DFS(ll src, vector<ll> ed[], ll par, ll disDown[], ll mark[], ll max1[], ll max2[])
{
    parent[src] = par;
    disDown[src] = -2;

    if(mark[src]==1)
        disDown[src] = -1;

    max1[src] = -1;
    max2[src] = -1;

    rep(i,ed[src].size())
    {
        if(ed[src][i]!=par)
        {
            DFS(ed[src][i], ed, src, disDown, mark, max1, max2);
            disDown[src] = max(disDown[src], disDown[ed[src][i]]);
            if(disDown[ed[src][i]]>max2[src])
                max2[src] = disDown[ed[src][i]];
            if(max2[src]>max1[src])
            {
                ll x = max2[src];
                max2[src] = max1[src];
                max1[src] = x;
            }
        }
    }
    if(disDown[src]!=-2)
        disDown[src]++;
}
    
void DFS2(ll src, vector<ll> ed[], ll par, ll disUp[], ll max1[], ll max2[], ll disDown[])
{
    rep(i,ed[src].size())
    {
        if(ed[src][i]!=par)
        {
            disUp[ed[src][i]] = -1;
            if(disDown[ed[src][i]]!=max1[src])
            {
                if(max1[src]!=-1)
                    disUp[ed[src][i]] = 2+max1[src];
                else
                    disUp[ed[src][i]] = -1;
            }
            else
            {
                if(max2[src]!=-1)
                {
                    disUp[ed[src][i]] = 2+max2[src];
                }
                else
                    disUp[ed[src][i]] = -1;
            }
            if(disUp[src]!=-1)
                disUp[ed[src][i]] = max(disUp[ed[src][i]], disUp[src]+1);
            DFS2(ed[src][i], ed, src, disUp, max1, max2, disDown);
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    ll n,m,d;
    cin >> n >> m >> d;

    ll p[m];
    ll mark[n+1];
    fill0(mark);

    rep(i,m)
    {
        cin >> p[i];
        mark[p[i]]++;
    }

    vector<ll> ed[n+1];

    rep(i,n-1)
    {
        ll a,b;
        cin >> a >> b;
        ed[a].pb(b);
        ed[b].pb(a);
    }

    ll disDown[n+1];
    ll disUp[n+1];
    ll max1[n+1];
    ll max2[n+1];

    fill0(disDown);
    fill0(disUp);

    DFS(1, ed, 0, disDown, mark, max1, max2);
    if(mark[1]==1)
        disUp[1] = 0;
    else
        disUp[1] = -1;
    DFS2(1, ed, 0, disUp, max1, max2, disDown);

    ll ans = 0;

    fr(i,1,n)
    {
        ll dist = max(disDown[i], disUp[i]);
        if(dist<=d && dist>=0)
        {
            ans++;
        }

    }

    cout << ans << endl;
}