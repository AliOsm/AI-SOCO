#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>

using namespace std;

typedef size_t index_t;
typedef vector< index_t > index_vector;

typedef vector< char > bool_vector;

typedef int mask_t;

#define safe_forin(i,n) for (int (i) = 0, __size = (n); (i) < __size; ++(i))
#define forin(i,n) for (index_t (i) = 0, __size = (n); (i) < __size; ++(i))
#define forstep(i,n,step) for (index_t (i) = 0, __size = (n); (i) < __size; i += (step))
#define all(x) (x).begin(), (x).end()

#define zero_bit(x) ((x) & 1)
#define is_even(x) (zero_bit(x) == 0)
#define is_odd(x) (zero_bit(x) == 1)

#define space ' '
#define nl '\n'
#define newline cout << nl;
	
int read_int()
{
	int value;
	cin >> value;
	
	return value;
}

string read_string()
{
	string s;
	cin >> s;
	
	return s;
}

template < class T > 
void println(const T & value)
{
	cout << value << nl;
}

template < class T >
void print_vector(const vector< T > & values)
{
	forin(i, values.size())
		cout << values[i] << space;
		
	newline;
}

void print_indexes(const index_vector & indexes)
{
	forin(i, indexes.size())
		cout << indexes[i] + 1 << space;
	
	newline;
}

bool check_index(const index_t index, const size_t size)
{
	return (0 <= index && index < size);
}

bool check_indexes(
	const index_t x, const size_t x_size, 
	const index_t y, const size_t y_size)
{
	return check_index(x, x_size) && check_index(y, y_size);
}

bool get_bit(const mask_t & mask, const index_t bit_index)
{
	return (mask & (1 << bit_index)) != 0;
}

mask_t set_bit(mask_t & mask, const index_t bit_index)
{
	return mask = (mask | (1 << bit_index));
}

const string NONE = "-1 -1";

typedef size_t digit_t;

int main()
{
	cin.sync_with_stdio(0);
	cin.tie(0);
	
	cout.precision(15);
	
	size_t size = read_int();
	digit_t sum = read_int();
	
	if (sum == 0) 
		println(size == 1 ? "0 0" : NONE);
	else if (size * 9 < sum) 
		println(NONE);
	else 
	{		
		// min
		int nines_count = sum / 9;
		digit_t reminder_digit = sum % 9;
		
		int zeros_count = size - nines_count - (reminder_digit == 0 ? 0 : 1);
		
		if (reminder_digit == 0)
		{
			reminder_digit = 9;
			nines_count--;
		}
		
		digit_t second_reminder_digit = 0;
		if (reminder_digit > 1 && zeros_count > 0)
		{
			second_reminder_digit = reminder_digit - 1;
			reminder_digit = 1;
			--zeros_count;
		}
		
		cout << reminder_digit;
		safe_forin (i, zeros_count)
			cout << 0;
		
		if (second_reminder_digit > 0)
			cout << second_reminder_digit;
		
		safe_forin (i, nines_count)
			cout << 9;
		
		cout << space;
		
		// max
		nines_count = sum / 9;
		reminder_digit = sum % 9;
		
		zeros_count = size - nines_count - 1;
		
		safe_forin (i, nines_count)
			cout << 9;
		
		if (nines_count < size)
			cout << reminder_digit;
		
		safe_forin (i, zeros_count)
			cout << 0;
			
		newline;
	}
	
	return 0;
}