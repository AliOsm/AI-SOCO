#include <bits/stdc++.h>
#define ll long long
#define pll pair<ll,ll>
#define fr first
#define sc second

using namespace std;

const ll N = 300300;

void DFS1(ll i = 1,ll p = 0);
void DFS2(ll i = 1,ll p = 0,ll W = 0);

ll w[N];

vector <pll> Adj[N];
multiset <ll> st[N];

ll Ans = 0;

int main()
{
    ll n;   cin>>n;

    for(ll i=1;i<=n;i++)    scanf("%I64d",w+i);

    for(ll i=1;i<n;i++)
    {
        ll x,y,w;   scanf("%I64d%I64d%I64d",&x,&y,&w);

        Adj[x].push_back(pll(y,w));
        Adj[y].push_back(pll(x,w));
    }

    DFS1();
    DFS2();

    cout<<Ans;
}

void DFS1(ll i,ll p)
{
    st[i].insert(w[i]);
    st[i].insert(w[i]);

    for(auto j:Adj[i])
        if(j.fr!=p)
        {
            DFS1(j.fr,i);
            st[i].insert( w[i] + (*st[j.fr].rbegin()) - j.sc );
        }

    Ans = max( Ans , (*st[i].rbegin()) );
}

void DFS2(ll i,ll p,ll W)
{
    W += w[i];

    if(W<w[i])  W = w[i];

    Ans = max( Ans , W );

    for(auto j:Adj[i])
        if(j.fr!=p)
        {
            st[i].erase( st[i].find( w[i] + (*st[j.fr].rbegin()) - j.sc ) );

            DFS2(j.fr,i, max( W , *st[i].rbegin() ) - j.sc );

            st[i].insert( w[i] + (*st[j.fr].rbegin()) - j.sc );
        }
}
