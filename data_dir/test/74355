#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>

#define ABS(a) ((a>0)?a:-(a))
#define MIN(a,b) ((a<b)?(a):(b))
#define MAX(a,b) ((a<b)?(b):(a))
#define FOR(i,a,n) for (int i=(a);i<(n);++i)
#define FI(i,n) for (int i=0; i<(n); ++i)
#define pnt pair <int, int>
#define mp make_pair
#define PI 3.14159265358979
#define MEMS(a,b) memset(a,b,sizeof(a))
#define LL long long
#define U unsigned
using namespace std;
LL a[1010][1010];
vector<vector<pnt > > g;
set <pair<LL,int> > s;
int n,m,x,y;
LL d[1010];
int t[1010];
int c[1010];
void dijkstra(int x)
{
	FOR(i,0,n)
		d[i]=100000000000000ll;
	d[x]=0;
	s.insert(mp(0,x));
	while (s.size())
	{
		int v=s.begin()->second;
		LL dd=s.begin()->first;
		s.erase(s.begin());
		FOR(i,0,g[v].size())
		{
			int to=g[v][i].first;
			if (dd+g[v][i].second<d[to])
			{
				if (s.find(mp(d[to],to))!=s.end())
					s.erase(mp(d[to],to));
				d[to]=dd+g[v][i].second;
				s.insert(mp(d[to],to));
			}
		}
	}
}
int main()
{
	//freopen("in.txt","r",stdin);
	scanf("%d%d%d%d",&n,&m,&x,&y);
	x--;
	y--;
	g.resize(n);
	FOR(i,0,m)
	{
		int v1,v2,c;
		scanf("%d%d%d",&v1,&v2,&c);
		v1--;
		v2--;
		g[v1].push_back(mp(v2,c));
		g[v2].push_back(mp(v1,c));
	}
	FOR(i,0,n)
	{
		dijkstra(i);
		FOR(j,0,n)
			a[i][j]=d[j];
	}
	g.clear();
	g.resize(n);
	FOR(i,0,n)
		scanf("%d%d",&t[i],&c[i]);
	FOR(i,0,n)
		FOR(j,0,n)
			if (a[i][j]<=t[i])
			{
				g[i].push_back(mp(j,c[i]));
				//g[j].push_back(mp(i,c[i]));
			}
	dijkstra(x);
	if (d[y]>=100000000000000ll)
		printf("-1\n");
	else
		cout<<d[y]<<endl;
	return 0;
}