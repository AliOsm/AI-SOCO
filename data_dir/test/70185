#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>
#include <memory.h>
#include <list>
#include <numeric>
#include <functional>
#include <complex>
#include <cassert>

#pragma comment(linker, "/STACK:36777216")

#define ll long long
#define ld long double
#define ull unsigned ll
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pii pair<int,int> 
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vector<int>>
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
const int  Inf = 2e9;
ll LINF = (ll)4e18;
using namespace std;
ll mod = 1e9 + 7;
#define M_PI       3.14159265358979323846   // pi
#define mod 1000000007
ll dp[1001][11];
ll dp2[1001][11];
int n, m;
ll rec(int last, int pos) {
	if (pos == 0) return 1;
	if (dp[last][pos] != -1) return dp[last][pos];
	ll ans = 0;
	for (int i = last; i >= 1; i--) {
		ans += rec(i, pos - 1);
		ans %= mod;
	}
	return dp[last][pos] = ans;
}

ll rec2(int last, int pos) {
	if (pos == 0) return 1;
	if (dp2[last][pos] != -1) return dp2[last][pos];
	ll ans = 0;
	forn(i, last, n + 1) {
		ans += rec2(i, pos - 1);
		ans %= mod;
	}
	return dp2[last][pos] = ans;
}


int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	cout.precision(20); cout.setf(ios::fixed);
	cin >> n >> m;
	ll ans = 0;
	memset(dp, -1, sizeof(dp));
	memset(dp2, -1, sizeof(dp2));
	forn(i, 1, n + 1) {
		ans += (rec(i, m) - rec(i-1, m) + mod) * rec2(i, m) ;
		ans %= mod;
	}
	cout << ans;
	return 0;
}