#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;
const int maxn=3e5+7;

ll dp[maxn][2];

//dp[i][0] : not taking ith element
//dp[i][1] : taking ith element
int valid[maxn];
int pre;
string s,t;

//modulo op

ll mod=1e9+7;

ll add(ll a,ll b){
    return (a+b)%mod;
}

ll sub(ll a,ll b){
    return ((a-b)%mod+mod)%mod;
}

ll mul(ll a,ll b){
    return (a*b)%mod;
}
//end of modulo op

#define vec vector<int>
void computeLPS(string& pattern, vec &lps, ll m);

void KMP(string& text, string& pattern)
{
    ll n = text.length();
    ll m = pattern.length();
    vec lps(m,0);
    
    computeLPS(pattern, lps, m);
    ll i = 0, j = 0;
    while(i < n)
    {
        if(text[i] == pattern[j])
        {
            i++;
            j++;
        }
        if(j == m)
        {
            // cout<<"Pattern found at: "<<i-j<<'\n';
            valid[i-j]=1;
            j = lps[j-1];
        }
        else if(i < n && pattern[j] != text[i])
        {
            if(j != 0)
            {
                j = lps[j-1];
            }
            else
            {
                i = i + 1;
            }
        }
        
    }
}

void computeLPS(string& pattern, vec &lps, ll m)
{
    ll len = 0;
    lps[0] = 0;
    ll i = 1;
    while(i < m)
    {
        if(pattern[i] == pattern[len])
        {
            len++;
            lps[i] = len;
            i++;
        }
        else if(pattern[i] != pattern[len] && len != 0)
        {
            len = lps[len-1];
        }
        else
        {
            lps[i] = 0;
            ++i;
        }
    }
}

int main()
{
    fastread;
    cin>>s>>t;
    KMP(s,t);
    dp[s.size()][0]=1;
    pre=3e5;//dummy infinity
    for(int i=s.length()-1;i>=0;i--){
        dp[i][0]=add(dp[i+1][1],dp[i+1][0]);
        if(valid[i]==0){
            dp[i][1]=dp[i+1][1];
            continue;
        }
        int lim=pre+t.size()-1;
        for(int j=(i+t.size()-1);j<lim && j<s.size();j++)
            dp[i][1]=add(dp[i][1],add(dp[j+1][0],dp[j+1][1]));
        dp[i][1]=add(dp[i][1],dp[pre][1]);
        pre=i;
    }
    cout<<sub(add(dp[0][0],dp[0][1]),1);
    return 0;
}