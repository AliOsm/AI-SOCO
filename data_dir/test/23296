#include <bits/stdc++.h>

using namespace std;

struct no;
typedef no* noptr;

struct no
{
	int v;
	noptr l, r;
	no(int v = 0) : v(v), l(nullptr), r(nullptr)
	{}
};

inline int getv(noptr n) { return (n ? n->v : 0); }

noptr update(noptr old, int pos, int inc, int beg, int end)
{
	if(beg == end)
		return new no(getv(old) + inc);
	int mid = (beg + end) >> 1;
	noptr ans = (old ? new no(*old) : new no());
	if(pos <= mid)
		ans->l = update(ans->l, pos, inc, beg, mid);
	else
		ans->r = update(ans->r, pos, inc, mid + 1, end);
	ans->v = getv(ans->l) + getv(ans->r);
	return ans;
}

int get(noptr n, int a, int b, int beg, int end)
{
	if(!n || b < beg || end < a)
		return 0;
	if(a <= beg && end <= b)
		return n->v;
	int mid = (beg + end) >> 1;
	return get(n->l, a, b, beg, mid) + get(n->r, a, b, mid + 1, end);
}

const int MAXN = 100100, MAXX = 1000100;
noptr pseg[MAXX];
vector<int> x[MAXX];
int n, m, cnt, ans;

int main()
{
	scanf("%d %d", &n, &m);
	for(int i = 0, l, r; i < n; ++i)
		scanf("%d %d", &l, &r), x[r].push_back(l);
	pseg[0] = nullptr;
	for(int i = 1; i < MAXX; ++i)
	{
		pseg[i] = pseg[i - 1];
		for(const int& a : x[i])
			pseg[i] = update(pseg[i], a, 1, 1, MAXX);
	}
	while(m--)
	{
		ans = 0;
		scanf("%d", &cnt);
		for(int i = 1, p, lp = 0; i <= cnt; ++i)
			scanf("%d", &p), ans += get(pseg[MAXX - 1], lp + 1, MAXX, 1, MAXX) - get(pseg[p - 1], lp + 1, p - 1, 1, MAXX) - get(pseg[MAXX - 1], p + 1, MAXX, 1, MAXX), lp = p;
		printf("%d\n", ans);
	}
}