#include <functional>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <fstream>
#include <cstdlib>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <cstdio>
#include <vector>
#include <math.h>
#include <queue>
#include <stack>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef long double ld;

template <typename T>
T nextInt() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if (ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return x * p;
}
const int maxN = (int)1e6 + 10;
const int INF = (int)1e9 + 5;
const int mod = (int)1e9 + 7;
const ll LLINF = (ll)4e18 + 5;

int x[maxN];
int y[maxN];
int w[maxN];

int n, m, q;
int par[maxN];
bool t;
vector <int> c[maxN];
int col[maxN];

void init() {
    t = 0;
    for (int i = 1; i <= n; ++i) {
        par[i] = i;
        col[i] = 0;
        c[i].clear();
        c[i].push_back(i);
    }
}

int get(int x) {
    if (x == par[x]) return x;
    return par[x] = get(par[x]);
}

bool join(int x, int y) {
    if (get(x) == get(y)) {
        if (col[x] == col[y]) t = true;
        return true;
    }
    return false;
}

int order[maxN];

bool bad(int e) {
    int x = ::x[e];
    int y = ::y[e];

    if (join(x, y)) {
        if (t) return true;
        return false;
    }
    int a = x;
    int b = y;
    x = get(x);
    y = get(y);
    if (c[x].size() < c[y].size()) {
        swap(x, y);
        swap(a, b);
    }
    if (col[a] > 0 && col[b] > 0) {
        if (col[a] == col[b]) {
            for (auto z: c[y]) {
                col[z] ^= 3;
            }
        }
    } else if (col[a] > 0) {
        col[b] = col[a] ^ 3;
    } else if(col[b] > 0) {
        col[a] = col[b] ^ 3;
    } else {
        col[a] = 1;
        col[b] = 2;
    }
    while (!c[y].empty()) {
        c[x].push_back(c[y].back());
        c[y].pop_back();
    }
    par[y] = x;
    return false;
}

int process(int l, int r) {
    init();
    for (int i = 0; i < m; ++i) {
        int e = order[i];
        if (l <= e + 1 && e + 1 <= r && bad(e)) {
            return w[e];
        }
    }
    return -1;
}

int main() {

   // freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    n = nextInt<int>();
    m = nextInt<int>();
    q = nextInt<int>();

    for (int i = 0; i < m; ++i) {
        x[i] = nextInt<int>();
        y[i] = nextInt<int>();
        w[i] = nextInt<int>();
        order[i] = i;
    }

    sort(order, order + m, [&](int x, int y) {
        return w[x] > w[y];
    });

    for(int i = 0; i < q; ++i) {
        int l, r;
        l = nextInt<int>();
        r = nextInt<int>();
        printf("%d\n", process(l, r));
    }



    return 0;
}
