#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
#define ii pair<int,int>
#define ll long long
#define pll pair<ll,ll>
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 
#define iiordered_set tree<pll, null_type,less<pll>, rb_tree_tag,tree_order_statistics_node_update>
using namespace std;
#define MOD 1000000007
ll power(ll a,ll b, ll m=MOD)
{
    ll res=1;
    while(b>0)
    {
        if(b&1)
            res=(res*a)%MOD;
        a=(a*a)%MOD;
        b>>=1;
    }
    return res;
}
ll inverse(ll a,ll m=MOD)
{
    return power(a,m-2,m);
}
int ceil(int a,int b)
{
    return (a+b-1)/b;
}
#define INFl 1e18
#define vi vector<int>
#define vvi vector<vi>
#define vl vector<long long>
#define vvl vector<vl>
#define vll vector<pll>
#define vii vector<ii>
#define vvii vector<vii>
#define tri pair<int,ii>
#define F first
#define S second
#define forl(i,n) for(int i=0;i<n;i++)
#define fore(i,n) for(int i=1;i<=n;i++)
#define rforl(i,n)  for(int i=n-1;i>=0;i--)
#define rfore(i,n)  for(int i=n;i>=1;i--)
#define CASE(t) cout<<"Case #"<<(t)<<": ";
#define INF 1020000000
#define gcd(a,b) __gcd(a,b)
#define all(x)  x.begin(),x.end()
#define mp make_pair
#define pb push_back
#define print(x)    for(auto it=x.begin();it!=x.end();it++) cout<<*it<<' '; cout<<endl;
#define printii(x)  for(auto it=x.begin();it!=x.end();it++) cout<<it->F<<' '<<it->S<<endl;  
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)

#define MAX 3005
#define l 15
int n;
vvi g;
ll dp[MAX][MAX];
int st[MAX],ft[MAX],times=0,p[MAX],lca[MAX][l],depth[MAX],sz[MAX];
void dfs(int u,int pp=-1)
{
    sz[u]=1;
    p[u]=pp;
    st[u]=times++;
    lca[u][0]=pp;
    for(int i=1;i<l && lca[u][i-1]!=-1;i++)
        lca[u][i]=lca[lca[u][i-1]][i-1];
    for(int v:g[u])
    {
        if(v!=pp)    
        {
            depth[v]=depth[u]+1;
            dfs(v,u);
            sz[u]+=sz[v];
        }
    }
    ft[u]=times;
}
bool upper(int a,int b)
{
    if(a==-1)   return true;
    return st[a]<=st[b] && ft[a]>=ft[b];
}
int findClosest(int a,int b)
{
    for(int i=l-1;i>=0;i--)
    {
        if(upper(lca[b][i],a))
            continue;
        b=lca[b][i];
    }
    return b;
}
ll calc(int x,int y)
{
    if(dp[x][y]!=-1)    return dp[x][y];
    if(depth[x]>depth[y])   swap(x,y);
    int dx,dy,szx,szy;
    if(upper(x,y))
    {
        dx=findClosest(x,y);
        szx=n-sz[dx];
    }
    else
    {
        dx=p[x];
        szx=sz[x];
    }
    dy=p[y],szy=sz[y];
    ll res=max(calc(x,dy),calc(dx,y))+szx*szy;
    return dp[x][y]=dp[y][x]=res;
}
int main()
{
    cin>>n;
    g.resize(n);
    forl(i,MAX)
    forl(j,MAX) dp[i][j]=-1; 
    forl(i,n-1)
    {
        int u,v;
        cin>>u>>v;
        u--;v--;
        g[u].pb(v);
        g[v].pb(u);
    }
    dfs(0);
    forl(i,n)
        dp[i][i]=0;
    ll ans=0;
    forl(i,n)
    forl(j,n)
    {
        if(i<j)
            dp[i][j]=calc(i,j);
        ans=max(ans,dp[i][j]);
    }
    cout<<ans<<endl;
}