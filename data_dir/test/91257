// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int N = 2*(int)1e5 + 3;

int n, a[N], res[N];
VI jed, in[N], out[N];

int main() {
  init_ios();
  cin >> n;
  for (int i = 1; i <= n; ++i) {
    cin >> a[i];
    res[i] = -1;
  }
  for (int i = 1; i <= n; ++i) {
    if (i-a[i] >= 1) {
      if (a[i]%2 != a[i-a[i]]%2) {
        res[i] = 1;
        jed.PB(i);
      }
      out[i].PB(i-a[i]);
      in[i-a[i]].PB(i);
    }
    if (i+a[i] <= n) {
      if (res[i] == -1 && (a[i]%2 != a[i+a[i]]%2)) {
        res[i] = 1;
        jed.PB(i);
      }
      out[i].PB(i+a[i]);
      in[i+a[i]].PB(i);
    }
  }
  while (jed.size()) {
    VI now;
    for (int v: jed) {
      for (int x: in[v])
        if (res[x] == -1) {
          res[x] = 1+res[v];
          now.PB(x);
        }
    }
    jed = now;
  }
  for (int i = 1; i <= n; ++i)
    cout<<res[i]<<" ";
  cout<<"\n";
}