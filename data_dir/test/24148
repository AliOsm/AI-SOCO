/*
    cnt == 18
    cnt++;
    #2-SAT
*/
#include <bits/stdc++.h> 
using namespace std;
#define fl(i,a,b) for(int i=a;i<b;i++)
#define ll long long
#define endl '\n'
#define pb push_back
#define ff first
#define ss second
#define mx 200005
#define mx2 129
#define mod 1000000007
#define inf 2e9
#define lock taala
#define fast ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
bool lock[mx];
vector<int> key[mx];
bool vis[mx];
stack<int>st;
int cnt[mx];
int f = 1;
// graph and reverse graph for SCC
vector<int> v[mx],rv[mx];
// n + 1 to 2*n are ~x
void add(int x,int y)
{
    v[x].pb(y);
    rv[y].pb(x);
}
void dfs1(int x)
{
    vis[x] = 1;
    for(auto i : v[x])
    {
        if(!vis[i])
        {
            dfs1(i);
        }
    }
    st.push(x);
}
void dfs2(int x)
{
    cnt[x] = f;
    vis[x] = 0;
    for(auto i : rv[x])
    {
        if(vis[i])
        {
            dfs2(i);
        }
    }
}
main()
{
    fast;
    int n,m;
    cin >> n >> m;
    fl(i,1,n+1)
    {
        cin >> lock[i];
    }
    fl(i,1,m+1)
    {
        int x;
        cin >> x;
        fl(j,0,x)
        {
            int y;
            cin >> y;
            key[y].pb(i);
        }
    }
    fl(i,1,n+1)
    {
        int x = key[i][0];
        int y = key[i][1];
        if(lock[i])
        {
            // x and y   or ~x and ~y
            // x or ~y  and ~x or y
            add(y,x);
            //v[y].pb(x);
            add(x+m,y+m);
            //v[x + n].pb(y + n);
            add(x,y);
            //v[x].pb(y);
            add(y+m,x+m);
            //v[y + n].pb(x + n);
        }
        else
        {
            // x and ~y  or ~x and y
            // x or y and ~x or ~y
            add(x+m,y);
            //v[x+n].pb(y);
            add(y+m,x);
            //v[y+n].pb(x);
            add(x,y+m);
            //v[x].pb(y+n);
            add(y,x+m);
            //v[y].pb(x+n);
        }
    }
    fl(i,1,2*m+1)
    {
        if(!vis[i])
        dfs1(i);
    }
    while(!st.empty())
    {
        int x = st.top();
        st.pop();
        if(vis[x] == 0)
        {
            continue;
        }
        dfs2(x);
        f++;
    }
    fl(i,1,m+1)
    {
        if(cnt[i] == cnt[i + m])
        {
            cout<<"NO";
            return 0;
        }
    }
    cout<<"YES";

}