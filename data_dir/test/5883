#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (ll) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <ll, ll> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const ll inf = numeric_limits <int>::max() >> 1;
const ll N = 101;
ll n, m, k;

ll mat[N][N];
ll row[N];
ll col[N];

void input() {
    cin >> n >> m;
    for(ll i = 1; i <= n; ++i) {
        for(ll j = 1; j <= m; ++j) {
            cin >> mat[i][j];
        }
    }    
}

void solve() {
    for(ll i = 1; i < n; ++i) {
        set <ll> dif;
        for(ll j = 1; j <= m; ++j) {
            dif.insert({mat[i][j] - mat[i + 1][j]});
        }
        if(len(dif) > 2) {
            cout << "NO\n";
            return;
        } else if(len(dif) == 2) {
            ll p = *prev(dif.end()) - *dif.begin();
            if(k && p != k) {
                cout << "NO\n";
                return;
            }
            k = p;
        }
    }
    for(ll j = 1; j < m; ++j) {
        set <ll> dif;
        for(ll i = 1; i <= n; ++i) {
            dif.insert({mat[i][j] - mat[i][j + 1]});
        }
        if(len(dif) > 2) {
            cout << "NO\n";
            return;
        }
        else if(len(dif) == 2) {
            ll p = *prev(dif.end()) - *dif.begin();
            if(k && p != k) {
                cout << "NO\n";
                return;
            }
            k = p;
        }
    }
    if(k) {
        for(ll i = 1; i <= n; ++i) {
            for(ll j = 1; j <= m; ++j) {
                if(mat[i][j] >= k) {
                    cout << "NO\n";
                    return;
                }
            }
        }
    } else {
        k = inf;
    }
    cout << "YES\n";
    row[1] = 0;
    col[1] = mat[1][1];
    for(ll i = 2; i <= n; ++i) {
        row[i] = (mat[i][1] - mat[i - 1][1] + row[i - 1] + k) % k;
    }
    for(ll i = 2; i <= m; ++i) {
        col[i] = (mat[1][i] - mat[1][i - 1] + col[i - 1] + k) % k;
    }
    cout << k << "\n";
    for(ll i = 1; i <= n; ++i) {
        cout << row[i] << " ";
    }
    cout << "\n";
    for(ll i = 1; i <= m; ++i) {
        cout << col[i] << " ";
    }
    cout << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
