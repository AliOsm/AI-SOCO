#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>
#include <iomanip>
#include <limits>
#include <chrono>
#include <random>
#include <array>
#include <unordered_map>
#include <functional>
#include <complex>
#include <numeric>

template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

constexpr long long MAX = 5100000;
constexpr long long INF = 1LL << 60;
constexpr int inf = 1 << 28;
//constexpr long long mod = 1000000007LL;
constexpr long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;

int bfs(int start, vector<int>& d, vector<vector<int>> &g) {
	d[start] = 0;
	int last = -1;
	queue<int> q;
	q.push(start);
	while (!q.empty()) {
		int cur = q.front();
		q.pop();
		last = cur;
		for (int next : g[cur]) {
			if (d[next] != -1) continue;
			d[next] = d[cur] + 1;
			q.push(next);
		}
	}
	return last;
}


void suzuken() {
	int n, m, a, b, c; scanf("%d %d %d %d %d", &n, &m, &a, &b, &c);
	a--; b--; c--;
	vector<ll> p(m); for (int i = 0; i < m; i++) scanf("%lld", &p[i]);
	sort(p.begin(), p.end());
	vector<ll> sum(m + 1); for (int i = 0; i < m; i++) sum[i + 1] = sum[i] + p[i];
	vector<vector<int>> g(n);
	for (int i = 0; i < m; i++) {
		int u, v; scanf("%d %d", &u, &v);
		u--; v--;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	vector<int> da(n, -1), db(n, -1), dc(n, -1);
	bfs(a, da, g);
	bfs(b, db, g);
	bfs(c, dc, g);
	ll res = INF;
	for (int i = 0; i < n; i++) {
		if (da[i] + db[i] + dc[i] > m) continue;
		ll tmp = sum[db[i]] * 2;
		tmp += sum[da[i] + db[i] + dc[i]] - sum[db[i]];
		chmin(res, tmp);
	}
	cout << res << "\n";
}
int main()
{
	/*
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	*/
	int kkt; scanf("%d", &kkt);
	while (kkt--) {
		suzuken();
	}

	return 0;
}
 