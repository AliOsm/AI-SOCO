#include <bits/stdc++.h>

using namespace std;

#define long long long
#define INF (long) 1e18
#define MOD ((long) 1e9 + 7)
#define READ(v) for (auto &x : v) cin >> x;
#define mll map<long, long>
#define umll umap<long, long>
#define pll pair<long, long>
#define umap unordered_map
#define uset unordered_set
#define pb push_back
#define pf push_front
#define FOR(i, a, b) \
  for (long i = a; i < (long) b; i++)
#define REP(i, n) FOR(i, 0, n-1)
#define SORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr < b.atr; });
#define UNSORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr > b.atr; });
#define PRINTV(v) \
  FOR (_i, 0, v.size()) { \
    printf("%lld ", v[_i]); \
  } \
  printf("\n");

auto gera_primos(long n)
{
  vector<long> primos;
  vector<bool> crivo(n);
  primos.pb(2);
  for (long i = 3; i <= n; i += 2) {
    if (crivo[i]) continue;
    primos.pb(i);
    for (long j = i; j <= n; j += i) {
      crivo[j] = true;
    }
  }
  return primos;
}

struct Link
{
  long from, to, c, f = 0;
  long id;
};

struct Node
{
  long id, ord, altura = -1, total;
  bool visitado = false;
  long ciclo = 0;
  long pai, dist = INF;
  set<long> out, in;

  Node() {
    static long i = 0;
    id = i++;
  }
};

long n, m;
long a[2000][2000];

long paint(auto &a, long i, long j, long c)
{
  a[i][j] = c;
  long total = 1;
  if (a[i+1][j] == '.') total += paint(a, i+1, j, c);
  if (a[i-1][j] == '.') total += paint(a, i-1, j, c);
  if (j >= 0 and a[i][j-1] == '.') total += paint(a, i, j-1, c);
  if (j <  m and a[i][j+1] == '.') total += paint(a, i, j+1, c);
  return total;
}

int main()
{
  //ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);

  cin >> n >> m;

  FOR (i, 1, n+1) {
    FOR (j, 0, m) {
      char c;
      scanf(" %c", &c);
      a[i][j] = c;
    }
  }
  long c = 1e5;
  mll d;
  FOR (i, 1, n+1) {
    FOR (j, 0, m) {
      if (a[i][j] == '.') {
        d[c] = paint(a, i, j, c);
        c++;
      }
    }
  }
  FOR (i, 1, n+1) {
    FOR (j, 0, m) {
      if (a[i][j] == '*') {
        set<long> colors;
        if (a[i+1][j] >= 1e5) colors.insert(a[i+1][j]);
        if (a[i-1][j] >= 1e5) colors.insert(a[i-1][j]);
        if (j >= 0 and a[i][j-1] >= 1e5) colors.insert(a[i][j-1]);
        if (j <  m and a[i][j+1] >= 1e5) colors.insert(a[i][j+1]);
        long total = 1;
        for (auto &x : colors) {
          total += d[x];
        }
        total %= 10;
        a[i][j] = total + '0';
      }
    }
  }
  FOR (i, 1, n+1) {
    FOR (j, 0, m) {
      if (a[i][j] >= 1e5) {
        a[i][j] = '.';
      }
    }
  }
  FOR (i, 1, n+1) {
    FOR (j, 0, m) {
      putchar(a[i][j]);
    }
    printf("\n");
  }
}
