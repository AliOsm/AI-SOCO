#include <iostream>
#include <cmath>
#include <queue>
#include <vector>
#include <set>
#include <cstdio>
#include <algorithm>
#include <ctime>
#include <cstring>
using namespace std;

int N , SZ;
int arr[30];
short LOG[1<<15];
int mi = 0;
vector<int> ADJ[25];
int SUM[1<<14];
int mem[1<<14][24];
int dp(int mask , int ones)
{
    int b = mask & -mask;
    int id = LOG[b];
    if(mask == 0)return ones == 0;
    if(mem[mask][ones] != -1)return mem[mask][ones];
    int w = 0;
    for(int j = 0; j <= ones && j <= arr[id]-1 && !w; ++j)
    {
        for(int i = 0; i < ADJ[arr[id]-j-1].size() && !w; ++i)
        {
            int nm = ADJ[arr[id]-j-1][i];
            if( nm & mask )continue;
            if( id+1 != SZ && ((mask ^ nm) & (b<<1)) == 0 )continue;
            if( j <= 1 && nm == 0 )continue;
            if( j == 0 && ((nm & -nm) == nm) )continue;
            if(dp(mask ^ nm ^ b, ones-j)) w = 1;
        }
    }
    return mem[mask][ones] = w;
}

int main()
{
    memset(mem,-1,sizeof(mem));
    cin >> N;
    for(int i = 0; i < 15; ++i)
        LOG[1<<i] = i;
    for (int i = 0; i < N; ++i) {
        cin >> arr[i];
    }
    if(N == 1 && arr[0] == 1)
    {
        cout << "YES" << endl;
        return 0;
    }
    sort(arr,arr+N);
    reverse(arr,arr+N);
    if(N!=arr[0])
    {
        cout << "NO" << endl;
        return 0;
    }
    for(int i = 0; i < N; ++i)
    {
        SZ = i;
        if(arr[i] == 1)break;
    }
    if(arr[N-1] != 1)
    {
        cout << "NO" << endl;
        return 0;
    }
    for(int i = 0; i < 25; ++i)
        ADJ[i].reserve(500000);
    if(SZ >= 14)
    {
        cout << "NO" << endl;
        return 0;
    }
    ADJ[0].push_back(0);
    for(int i = 1; i < (1<<SZ); ++i)
    {
        int b = i & -i;
        SUM[i] = SUM[i ^ b] + arr[LOG[b]];
        if(SUM[i] < 25)
            ADJ[SUM[i]].push_back(i);
    }
    cout << (dp(1 , N-SZ) ? "YES" : "NO") << endl;
    return 0;
}




