#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define DEBUG
#ifdef DEBUG
#define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
	template <typename Arg1>
	void __f(const char* name, Arg1&& arg1)
	{
		cerr << name << " = " << arg1 << endl;
	}
	template <typename Arg1, typename... Args>
	void __f(const char* names, Arg1&& arg1, Args&&... args)
	{
		const char* comma = strchr(names + 1, ','); cerr.write(names, comma - names) << " = " << arg1 << " || ";
		__f(comma+1, args...);
	}
#else
#define debug(...)
#endif

template <class Ch, class Tr, class Container>
basic_ostream <Ch, Tr> & operator << (basic_ostream <Ch, Tr> & os, Container const& x) {
    os << "{ ";
    for(auto& y : x) os << y << " ; ";
    return os << "}";
}

template <class X, class Y>
ostream & operator << (ostream & os, pair <X, Y> const& p) {
	return os << "[ " << p.first << ", " << p.second << "]" ;
}

#define FAST_IO std::ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);
#define ll long long int
#define pb push_back
#define mp make_pair
#define ld long double
#define sz(a) (ll)(a).size()
#define endl "\n"

// priority_queue<ll, vector<ll>, less<ll>>pq;     // Max Heap
// priority_queue<ll, vector<ll>, greater<ll>>pq;  // Min Heap

typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
//K-th smallest
//cout << k << "kth (1 based indexing) smallest: " << *A.find_by_order(k - 1) << endl;
//NO OF ELEMENTS < X
//cout << "No of elements less than " << X << " are " << A.order_of_key(X) << endl;

const int MAXN = 1e6 + 5;
const int MAXM = 1e3 + 2;

vector<ll>adj[MAXN], temp, temp2;
ll vis[MAXN], ans[MAXM][MAXM], n, nn;
pair<ll,ll>arr[MAXM][MAXM];
bool f, ff;
stack<ll>ss;

void dfs(ll node, ll req)
{
	temp.pb(node);
	vis[node] = 1;
	if(node == req) f = true;
	for(auto it : adj[node])
	{
		if(vis[it]) continue;
		dfs(it, req);
	}
}

void dfs2(ll node, ll par, ll dd, ll st)
{
	if(node != st && vis[node]) return;
	vis[node] = 1;
	for(auto it : adj[node])
	{
		if(vis[it]) continue;
		dfs2(it, node, dd, st);
	}
	if(par == -1)
	{
		if(dd == 1) return;
		ans[node / n][node % n] = 4;
		return;
	}
	if(par == node + 1) ans[node / n][node % n] = 3;
	else if(par == node - 1) ans[node / n][node % n] = 2;
	else if(par == node - n) ans[node / n][node % n] = 0;
	else ans[node / n][node % n] = 1;
}

void dfs4(ll node, ll par)
{
	ss.push(node);
	vis[node] = 1;
	for(auto it : adj[node])
	{
		if(ff) return;
		if(it == par) continue;
		if(vis[it] == 1)
		{
			ff = true;
			while(!ss.empty())
			{
				temp2.pb(ss.top());
				ss.pop();
			}
			return;
		}
		if(!vis[it]) dfs4(it, node);
	}
	if(!ss.empty()) ss.pop();
}

int main()
{
	FAST_IO;

    cin >> n;
    for(int i=0;i<n;i++)
    	for(int j=0;j<n;j++)
    	{	
    		cin >> arr[i][j].first >> arr[i][j].second;
   			if(arr[i][j].first < 0) continue;	
   			arr[i][j].first -= 1;
   			arr[i][j].second -= 1;
   		}
   	for(int i=0;i<n;i++)
   	{
   		for(int j=0;j<n;j++)
   		{
			if(i > 0 && arr[i][j] == arr[i - 1][j]) adj[n * i + j].pb(n * i + j - n), adj[n * i + j - n].pb(n * i + j);
			if(j > 0 && arr[i][j] == arr[i][j - 1]) adj[n * i + j].pb(n * i + j - 1), adj[n * i + j - 1].pb(n * i + j);
			if(i < n - 1 && arr[i][j] == arr[i + 1][j]) adj[n * i + j].pb(n * i + j + n), adj[n * i + j + n].pb(n * i + j);
			if(j < n - 1 && arr[i][j] == arr[i][j + 1]) adj[n * i + j].pb(n * i + j + 1), adj[n * i + j + 1].pb(n * i + j);
   		}
   	}
   	for(int i=0;i<n*n;i++)
   	{
   		if(vis[i]) continue;
   		f = false;
   		ff = false;
   		temp.clear();
   		temp2.clear();
   		while(!ss.empty()) ss.pop();
   		if(arr[i / n][i % n].first < 0)
   		{
   			if(sz(adj[i]) == 0)
   			{
   				cout << "INVALID" << endl;
   				return 0;
   			}
   			if(i == adj[i][0] + 1) ans[adj[i][0] / n][adj[i][0] % n] = 3;
			else if(i == adj[i][0] - 1) ans[adj[i][0] / n][adj[i][0] % n] = 2;
			else if(i == adj[i][0] - n) ans[adj[i][0] / n][adj[i][0] % n] = 0;
			else ans[adj[i][0] / n][adj[i][0] % n] = 1;

			if(adj[i][0] == i + 1) ans[i / n][i % n] = 3;
			else if(adj[i][0] == i - 1) ans[i / n][i % n] = 2;
			else if(adj[i][0] == i - n) ans[i / n][i % n] = 0;
			else ans[i / n][i % n] = 1;

			vis[adj[i][0]] = vis[i] = 1;
			
			dfs2(adj[i][0], -1, 1, adj[i][0]);
			dfs2(i, -1, 1, i);
   		}
   		else
   		{
   			ll x = n * arr[i / n][i % n].first + arr[i / n][i % n].second;
   			dfs(i, x);
   			if(f == false)
   			{
   				cout << "INVALID" << endl;
   				return 0;
   			}
   			for(auto it : temp) vis[it] = 0;
   			dfs2(x, -1, 0, x);
   		}
   	}
   	cout << "VALID" << endl;
   	for(int i=0;i<n;i++)
   	{
   		string tt = "";
   		for(int j=0;j<n;j++)
   		{
   			if(ans[i][j] == 0) tt += 'U';
   			else if(ans[i][j] == 1) tt += 'D';
   			else if(ans[i][j] == 2) tt += 'L';
   			else if(ans[i][j] == 3) tt += 'R';
   			else tt += 'X';
   		}
   		cout << tt << endl;
   	}
    return 0;
}