/*input
3 6
1 1
3 2
3 2
*/
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define int long long
#define N
#define left left__

vector<pair<int, int> > a;
vector<pair<int, int> > b;
vector<pair<int, int> > c;
int n, m;

bool cmp(pair<int, int> x, pair<int, int> y) {
	return x.se * y.fi < x.fi * y.se;
}
int left[5];
int knapsack() {
	vector<vector<int> > dp;
	dp.assign(b.size() + 5, vector<int>(m + 5, 0));
	for (int i = 1; i <= b.size(); i++) {
		int w = b[i - 1].fi; int val = b[i - 1].se;
		for (int j = 0; j <= m; j++) {
			dp[i][j] = dp[i - 1][j];
			if (j >= w) dp[i][j] = max(dp[i][j], dp[i - 1][j - w] + val);
		}
	}
	return dp[b.size()][m];
}

int solve1() {
	int ret = 0;
	sort(a.begin(), a.end(), cmp);
	while (!a.empty() && m > 40) {
		if (left[a.back().fi] > 6) {
			m -= a.back().fi;
			ret += a.back().se;
			a.pop_back();
		}
		else {
			c.push_back(a.back()); a.pop_back();
		}
	}
	int cnt[5]; memset(cnt, 0, sizeof(cnt));
	for (int i = (signed)c.size() - 1; i >= 0; i--) {
		int x = c[i].fi;
		if (cnt[x]*x > m) continue;
		cnt[x]++; b.push_back(c[i]);
	}
	for (int i = (signed)a.size() - 1; i >= 0; i--) {
		int x = a[i].fi;
		if (cnt[x]*x > m) continue;
		cnt[x]++; b.push_back(a[i]);
	}
	return ret + knapsack();
}


signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef UncleGrandpa
	freopen("1test.inp", "r", stdin);
#endif
	cin >> n >> m;
	for (int i = 1; i <= n; i++) {
		int x, y; cin >> x >> y;
		left[x]++;
		a.push_back(mp(x, y));
	}
	cout << solve1() << endl;
}