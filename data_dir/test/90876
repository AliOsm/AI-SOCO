#pragma GCC optimize("Ofast")
#pragma GCC target("sse4")

#include <iostream>
#include <cstdio>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <queue>
#include <ctime>

using namespace std;

#define REP(i, n) for(int (i) = 0; (i) < (n); (i)++)
#define SZ(a) (int)(a).size()
#define ALL(a) (a).begin(), (a).end()

const long long MOD = (int)1e9 + 7;

set<int> used;
map<int, vector<int> > adj;
int comp;

void dfs(int v) {
	used.insert(v);
	++comp;
	for (int nxt : adj[v]) {
		if (!used.count(nxt)) {
			dfs(nxt);
		}
	}
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int n, m, k;
    cin >> n >> m >> k;
    vector<long long> pw(n + 1);
    pw[0] = 1;
    for (int i = 1; i <= n; i++) {
    	pw[i] = (pw[i - 1] * 2) % MOD;
    }
    vector<long long> c(n);
    REP(i, n) cin >> c[i];
    map<long long, vector<pair<int, int> > > gr;
    int u, v;
    REP(i, m) {
    	cin >> u >> v;
    	--u, --v;
    	gr[c[u] ^ c[v]].push_back(make_pair(u, v));
    }
    long long res = 0;
    long long possible = (1LL << k);
    for (const auto& g : gr) {
    	const auto& edges = g.second;
    	used.clear();
    	adj.clear();
    	for (const auto& e : edges) {
    		adj[e.first].push_back(e.second);
    		adj[e.second].push_back(e.first);
    	}
    	int cnt = 0;
    	int infected = 0;
    	for (const auto& a : adj) {
    		if (!used.count(a.first)) {
    			comp = 0;
    			dfs(a.first);
    			infected += comp;
    			++cnt;
    		}
    	}
    	res += (pw[n - infected] * pw[cnt]) % MOD;
    	res %= MOD;
    	--possible;
    }
    res += (possible % MOD * pw[n]) % MOD;
    res %= MOD;
    cout << res << endl;
    return 0;
}