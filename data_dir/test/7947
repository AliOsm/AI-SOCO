#include <iostream>
#include <string>
#include <set>
#include <string>
#include <vector>
#include <stdio.h>
#include <algorithm>
#include <map>
#include <stdlib.h>
#include <stdint.h>
using namespace std;

int main()
{
	int64_t w, h, n;
	cin >> w >> h >> n;
	map<int64_t, int64_t > qh, qw;
	multiset<pair<int64_t, int64_t> > rh, rw;
	qh[1] = h;
	rh.insert({ h, 1 });
	qw[1] = w;
	rw.insert({ w, 1 });	

	for (int i = 0; i < n; ++i)
	{
		char ch;
		int64_t offset;
		cin >> ch >> offset;

		pair<int64_t, int64_t> it;
		if (ch != 'H')
		{
			qh.swap(qw);
			rh.swap(rw);
		}
		else
			offset = h - offset;

		if (qh.count(offset))
		{
			it = *qh.find(offset);
			qh.erase(offset);
		}
		else if (qh.upper_bound(offset) != qh.end())
		{
			it = *qh.upper_bound(offset);
			if (it.first > offset)
				it = *--qh.upper_bound(offset);
			qh.erase(it.first);
		}
		else 
		{
			it = *qh.rbegin();
			qh.erase(--qh.end());
		}

		int64_t val = (it.second - it.first + 1);
		rh.erase(rh.find({ val, it.first }));

		val = (offset - it.first + 1);
		if (val > 0)
		{
			qh.insert({ it.first, offset });
			rh.insert({ val, it.first });
		}
			
		val = (it.second - offset);
		if (val > 0)
		{
			qh.insert({ offset + 1, it.second });
			rh.insert({ val, offset + 1 });
		}

		if (ch != 'H')
		{
			qh.swap(qw);
			rh.swap(rw);
		}

		cout << 1ull * (rh.rbegin()->first) * (rw.rbegin()->first) << endl;
	}
	return 0;
}