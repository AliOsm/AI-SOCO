#include <bits/stdc++.h>
using namespace std;

#ifdef SG
	#include <debug.h>
#else
	#define show(...)
	#define debug(...)
	#define deepen(...)
	#define timer(...)
#endif

#define ARG4(_1,_2,_3,_4,...) _4

#define forn3(i,l,r) for (int i = int(l); i < int(r); ++i)
#define forn2(i,n) forn3 (i, 0, n)
#define forn(...) ARG4(__VA_ARGS__, forn3, forn2) (__VA_ARGS__)

#define ford3(i,l,r) for (int i = int(r) - 1; i >= int(l); --i)
#define ford2(i,n) ford3 (i, 0, n)
#define ford(...) ARG4(__VA_ARGS__, ford3, ford2) (__VA_ARGS__)

#define ve vector
#define pa pair
#define tu tuple
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) ((int)(a).size())

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef unsigned char uc;
typedef pa<int, int> pii;
typedef pa<int, ll> pil;
typedef pa<ll, int> pli;
typedef pa<ll, ll> pll;
typedef ve<int> vi;

const ld pi = 3.1415926535897932384626433832795l;

template<typename T> inline auto sqr (T x) -> decltype(x * x) {return x * x;}
template<typename T1, typename T2> inline bool umx (T1& a, T2 b) {if (a < b) {a = b; return 1;} return 0;}
template<typename T1, typename T2> inline bool umn (T1& a, T2 b) {if (b < a) {a = b; return 1;} return 0;}

const int dx[4] = {-1, 1, 0, 0};
const int dy[4] = {0, 0, -1, 1};

const int N = 510;

struct Input {
	int n, k;
	char c[N][N];
			
	bool read () {
		if (scanf("%d%d", &n, &k) != 2)
			return 0;
		string qwe;
		getline(cin, qwe);
		for (int i = 0; i < n; ++i) {
			forn(j, n) {
				scanf("%c", &c[i][j]);
			}
			string qwe;
			getline(cin, qwe);
		}
		return 1;
	}

	void init (const Input &input) {
		*this = input;
	}
};

struct Data: Input {
	int ans;
	
	void write () {
		cout << ans << endl;
	}
	
	virtual void solve () {}
	
	virtual void clear () {
		*this = Data();
	}
};

struct Solution: Data {
	vi sz;
	int comp[N][N];
	
	int dfs(int x, int y, int num) {
		comp[x][y] = num;
		int sz = 1;
		forn(k, 4) {
			int nx = x + dx[k], ny = y + dy[k];
			if (nx < 0 || ny < 0 || nx >= n || ny >= n || c[nx][ny] == 'X' || comp[nx][ny] != -1)
				continue;
			sz += dfs(nx, ny, num);
		}
		return sz;
	}
	
	int col[N * N];
	int glob;
	
	void ch(int num, int coeff) {
		if (num < 0)
			return;
		col[num] += coeff;
		if (col[num] == 0) {
			glob -= sz[num];
		} else if (col[num] == 1 && coeff == 1) {
			glob += sz[num];
		}
	}
	
	void addg(int i, int j, int k, int coeff) {
		forn(p, k) {
			if (i >= 0 && i < n && j + p >= 0 && j + p < n) {
				ch(comp[i][j + p], coeff);
			}
		}
	}
 
	void addv(int i, int j, int k, int coeff) {
		forn(p, k) {
			if (i + p >= 0 && i + p < n && j >= 0 && j < n)
				ch(comp[i + p][j], coeff);
		}
	}
	
	int prefsum[N][N];
	
	int get(int i, int j) {
		return prefsum[i + k][j + k] - prefsum[i + k][j] - prefsum[i][j + k] + prefsum[i][j];
	}
	
	void solve () {
		memset(comp, -1, sizeof(comp));
		forn(i, n)
			forn(j, n) {
				if (c[i][j] == 'X' || comp[i][j] > -1)
					continue;
				int teksz = sz(sz);
				sz.pb(dfs(i, j, teksz));
			}
		debug(all(sz));
		forn(i, sz(sz))
			umx(ans, sz[i]);
		memset(prefsum, 0, sizeof(prefsum));
		forn(i, n) {
			int tek = 0;
			forn(j, n) {
				tek += (c[i][j] == 'X');
				prefsum[i + 1][j + 1] = tek + prefsum[i][j + 1];
			}
		}
		glob = 0;
		forn(i, n - k + 1) {
			memset(col, 0, sizeof(col));
			glob = 0;
			forn(j, k) {
				addg(i + j, 0, k + 1, 1);
			}
			addg(i - 1, 0, k, 1);
			addg(i + k, 0, k, 1);
			for (int j = 0; j + k <= n; ++j) {
				if (umx(ans, glob + get(i, j))) {
					debug(mt(i, j, get(i, j)));
				}
				addv(i, j - 1, k, -1);
				addv(i, j + k + 1, k, 1);
				addg(i - 1, j, k, -1);
				addg(i - 1, j + 1, k, 1);
				addg(i + k, j, k, -1);
				addg(i + k, j + 1, k, 1);
			}
		}
	}
	
	void clear () {
		*this = Solution();
	}
};

Solution sol;

int main () {
	cout.setf(ios::showpoint | ios::fixed);
	cout.precision(20);
#ifdef SG
	freopen((problemname + ".in").c_str(), "r", stdin);
//	freopen((problemname + ".out").c_str(), "w", stdout);
	while (sol.read()) {
		sol.solve();
		sol.write();
		sol.clear();
	}
#else
    sol.read();
    sol.solve();
	sol.write();
#endif
	return 0;
}
