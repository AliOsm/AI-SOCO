using namespace std;
#include <bits/stdc++.h>
#define ll int64_t
#define pll pair <ll,ll>
#define pii pair <int,int>
#define fir first
#define sec second
#define pb push_back
#define mp make_pair
#define fn "12D"   ///FILE_NAME_HERE
#define all(c) (c).begin(),(c).end()
#define sz(c) (c).size()
#define MASK(x) ((1LL)<<(x))
#define BIT(x,i) (((x)>>(i)) & 1)
#define rep(c,it) for(__typeof((c).begin()) it = (c).begin();it!=(c).end();++it)
#define rrep(c,it) for(__typeof((c).rbegin()) it = (c).rbegin();it!=(c).rend();++it)

template <class T,class U>
void maximize(T &x,U y)
{
    if(x < y)x=y;
}
template <class T,class U>
void minimize(T &x,U y)
{
    if(x > y)x=y;
}
template <class T>
T Abs(T x)
{
    return x < (T)0 ? -x : x;
}
template <class T,class U,class V>
T addmod(T x,U y,V mod)
{
    return ((x + y) % mod + mod) % mod;
}
template <class T,class U,class V>
T submod(T x,U y,V mod)
{
    return ((x - y) % mod + mod) % mod;
}
template <class T,class U,class V>
T mulmod(T x,U y,V mod)
{
    return (long long)x*y%mod;
}

///---------------------------------------------END_OF_TEMPLATE-------------------------------------------------

namespace task{

const int N=5e5+5;
struct data
{
    int b,i,r;
    data(){}
    data(int _b,int _i,int _r):b(_b),i(_i),r(_r){}
};
data a[N];

const int inf = 2e9;
struct FenwickTree
{
    vector <int> ft;
    FenwickTree(){ft.resize(N + 5,-inf);}
    void update(int node,int val)
    {
        for(;node > 0;node -= node & (-node))
            maximize(ft[node],val);
    }
    int rmq(int node)
    {
        int ret = -inf;
        for(;node <= N;node += node & (-node))
            maximize(ret,ft[node]);
        return ret;
    }
}fen;

int n,ans=0;
vector <int> compress;

void solve()
{
    cin>>n;
    for(int i=1;i<=n;++i)
        cin>>a[i].b;
    for(int i=1;i<=n;++i)
        cin>>a[i].i,compress.pb(a[i].i);
    for(int i=1;i<=n;++i)
        cin>>a[i].r;
    sort(all(compress));
    compress.erase(unique(all(compress)),compress.end());
    sort(a+1,a+1+n,[](const data &x,const data &y)
    {
        return x.b > y.b;
    });
    for(int i=1;i<=n;++i)
        a[i].i = lower_bound(all(compress),a[i].i) - compress.begin() + 1;
    int run = 1;
    for(int i=1;i<=n;++i)
    {
        while(run <= n and a[run].b == a[i].b)
        {
            ans+=(fen.rmq(a[run].i + 1) > a[run].r);
            ++run;
        }
        for(;i < run;++i)
            fen.update(a[i].i,a[i].r);
        --i;
    }
    cout<<ans;
}}

int main()
{
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    #ifndef ONLINE_JUDGE
    freopen(fn".inp","r",stdin);
    freopen(fn".out","w",stdout);
    #endif // ONLINE_JUDGE
    task::solve();
}
