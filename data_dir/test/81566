#include <bits/stdc++.h>
using namespace std;
#define pb  push_back
#define ll  long long
#define vi  vector<int>
#define vvi vector<vi >
#define all(x) x.begin(), x.end()
#define ld  long double
#define eps (ld)1e-15
#define pi  acosl(-1.0)

ld x, y, r, X, Y, R, d, dd, cosal, res;

ld sq(ld x) { return x * x; }

ld square(ld r, ld h) {
    if (h < r) {
        if (h < eps) h = 0;
        ld d = r - h;
        if (d < eps) d = 0;
        ld z  = sqrtl(max((ld)0, sq(r) - sq(d)));
        ld al = acosl(min((ld)1, d / r));
        return al * sq(r) - z * d;
    }
    else {
        h = 2 * r - h;
        if (h < eps) h = 0;
        ld d = r - h;
        if (d < eps) d = 0;
        ld z  = sqrtl(max((ld)0, sq(r) - sq(d)));
        ld al = acosl(min((ld)1, d / r));
        return pi * sq(r) - al * sq(r) + z * d;
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin >> x >> y >> r >> X >> Y >> R;
    if (r > R) {
        swap(r, R);
        swap(x, X);
        swap(y, Y);
    }
    dd = sq(x - X) + sq(y - Y);
    d  = sqrtl(dd);
    if (dd < 0.5) {
        cout << setprecision(20) << fixed << pi * sq(r) << endl;
        return 0;
    }
    if (d - (r + R) > eps)
        res = 0;
    else if (R - r - d > eps) {
        res = pi * sq(r);
    }
    else {
        cosal = (dd + sq(R) - sq(r)) / (2 * d * R);
        if (cosal < eps) cosal = 0;
        res = sq(R) * square(1, 1 - cosal) + sq(r) * square(1, 1 - d / r + R / r * cosal);
    }
    cout << setprecision(20) << fixed << res << endl;

    return 0;
}