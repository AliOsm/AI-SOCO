#include <bits/stdc++.h> 
using namespace std;
typedef complex<int> point; 
typedef long long int lli;
typedef long double ld; 
#define pii pair<int,int> 
#define lasB(b) (b&(-b))
#define mod 1000000007 
#define PI acos(-1.0)
#define PB push_back 
#define EPS (1e-8) 
#define N 200005
#define S second 
#define IM image 
#define F first
#define RE real 
#define B begin 
#define E end

int n,arr1[N],arr2[N],sg;
lli sol;

struct ST{
	int mn[N][33],mx[N][33],k=31,lg[N];
	void compute()
	{
		lg[1]=0;
		for(int i=2;i<N;i++)
			lg[i]=lg[i/2]+1;
		for(int i=1;i<=n;i++)
		{
			mn[i][0]=arr2[i];
			mx[i][0]=arr1[i];
		}
		for(int j=1;j<k;j++)
		{
			for(int i=1;i+(1<<j)<N;i++)
			{
				mn[i][j]=min(mn[i][j-1],mn[i+(1<<(j-1))][j-1]);
				mx[i][j]=max(mx[i][j-1],mx[i+(1<<(j-1))][j-1]);
			}
		}
	}
	int query(int L,int R)
	{
		int lo=lg[R-L+1];
		if(sg==1)
			return max(mx[L][lo],mx[R-(1<<lo)+1][lo]);
		else
			return min(mn[L][lo],mn[R-(1<<lo)+1][lo]);
	}
} S;
int play(int L,int sgn)
{
	int r=n;
	int l=L;
	while(L<=r)
	{
		int mid=(L+r)/2;
		sg=1;
		int M =S.query(l,mid);
		sg=0;
		int Me =S.query(l,mid);
		if((M<Me&&sgn==0) ||(M<=Me&&sgn==1))
			L=mid+1;
		else
			r=mid-1;
	}
	return r;
}
int main()
{
 	ios_base::sync_with_stdio(0);
 	cin.tie(0);cout.tie(0);
 	cin>>n;
 	for(int i=1;i<=n;i++)
 		cin>>arr1[i];
 	for(int i=1;i<=n;i++)
 		cin>>arr2[i];
 	S.compute();
 	for(int i=1;i<=n;i++)
 	{
 		if(arr1[i]>arr2[i])
 			continue;
 		sol+=play(i,1)-play(i,0);
 	}
 	cout<<sol;
}