#include <iostream>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#include <map>
#include <vector>

#define getBit(x,y) ((x)&(1<<(y)))

using namespace std;

struct my {
    int a[10];
    my() {}
    int & operator [](int i) {
        return *(a+i);
    }

    const int & operator [](int i) const{
        return *(a+i);
    }
};

bool operator< (const my& a, const my& b) {
    for (int i=0;i<10;i++)
        if (a[i]==b[i]) continue;
        else if (a[i]<b[i]) return true;
        else return false;
    return false;
}

bool operator== (my& a, my& b){
    for (int i=0;i<10;i++)
        if (a[i]!=b[i]) return false;
    return true;
}

const int MAX_MASK=1<<19;

my f[2][MAX_MASK];
int sizef[2];

int n,m,i,j,c[10];
int a[10][36];
string s[10];

map<my,int> kol[2];

void generateAll(int key, int ll, int rr){
    int lngth=rr-ll+1;
    int size=(1<<(lngth));
    int mask,i,j,cnt=0;
    for (mask=0;mask<size;mask++){
        for (i=0;i<m;i++){
            cnt=0;
            for (j=0;j<lngth;j++)
                if (a[i][ll+j]==(getBit(mask,j)!=0)) cnt++;
            f[key][mask][i]=cnt;
        }
    }
    sizef[key]=size;
}

void foo(my & a, const my & b, int * c){
    for (int i=0;i<10;i++)
        a[i]=c[i]-b[i];
}

int main()
{
    cin >> n >> m;

    for (i=0;i<m;i++){
        cin >> s[i] >> c[i];
        for (j=0;j<n;j++)
            a[i][j]=s[i][j]-'0';
    }

    generateAll(0,0,(n-1)/2);
    generateAll(1,(n-1)/2+1,n-1);

    for (int key=0;key<2;key++){
        for (i=0;i<sizef[key];i++){
            kol[key][f[key][i]]++;
        }
    }
    long long ans=0;
    my t=my();
    for (map<my,int>::iterator it=kol[0].begin();
                               it!=kol[0].end();
                               it++)
    {
        foo(t,it->first,c);
        ans+=it->second*kol[1][t];
    }

    cout << ans;

    return 0;
}
