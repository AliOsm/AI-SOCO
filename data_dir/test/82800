#include<bits/stdc++.h>
#define MOD 1000000007
#define ll long long
#define mp make_pair
#define pb push_back 
using namespace std;
ll A[7010], B[7010], visited[7010];
vector<int> graph[7010];
map<ll, ll> occ, df;
int main(){
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	int n;
	cin >> n;
	for(int i = 0; i < n; i++){
		cin >> A[i];
		occ[A[i]]++;
	}
	for(int i = 0; i < n; i++){
		cin >> B[i];
	}
	for(int i = 0; i < n; i++){
		df[A[i]] += B[i];
	}
	vector<pair<ll, ll> > rt;
	for(auto it = df.begin(); it != df.end(); it++){
		rt.pb(mp(it->first, it->second));
	}
	vector<int> src;
	for(int i = 0; i < rt.size(); i++){
		if(occ[rt[i].first] > 1){
			src.pb(i);
		//	cerr << i << '\n';
		}
	}
	for(int i = 0; i < rt.size(); i++){
		for(int j = 0; j < rt.size(); j++){
			if(i == j)continue;
			if((rt[i].first & rt[j].first) == rt[j].first){
				//cout << A[i] << " "
				//cout << rt[i].first << " " << rt[j].first << '\n';
				//cout << i << " " << j << '\n';
				graph[i].pb(j);
			}
		}
	}
	queue<int> pq;
	if(src.size() == 0){
		cout << 0 << '\n';
		return 0;
	}
	ll maxi = 0;
	memset(visited, 0, sizeof(visited));
	for(int i = 0; i < src.size(); i++){
		pq.push(src[i]);
		visited[src[i]] = 1;
	}
	ll ans = 0;
	while(pq.size()){
		int x = pq.front();
		//visited[x] = 1;
		pq.pop();
		//cerr << x << '\n';
		ans += rt[x].second;
		//cout << x << '\n';
		for(int i = 0; i < graph[x].size(); i++){
			if(!visited[graph[x][i]]){
				pq.push(graph[x][i]);
				visited[graph[x][i]] = 1;
			}
		}
	}	
	cout << ans << '\n';


}