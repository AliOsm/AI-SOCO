#include <bits/stdc++.h>

using namespace std;

const int N = 1e5 + 10;
const long long INF = 1e10 + 10;

int n;
int a[N];
vector<int> g[N];
long long d[N];
long long dp[N];

long long lcm(long long a, long long b) {
  if (a == 0) return 0;
  if (b == 0) return 0;
  return a / __gcd(a, b) * b;
}

void dfs(int v, int p) {
  d[v] += a[v];
  for (int i = 0; i < g[v].size(); ++i) {
    int u = g[v][i];
    if (u == p) continue;
    dfs(u, v);
    d[v] += d[u];
  }
}

void dfs2(int v, int p) {
  long long x = 1;
  int cnt = 0;
  for (int i = 0; i < g[v].size(); ++i) {
    int u = g[v][i];
    if (u == p) continue;
    cnt++;
    dfs2(u, v);
    x = lcm(x, dp[u]);
  }
  if (cnt) {
    dp[v] = x * cnt;
    if (dp[v] > d[v]) {
      dp[v] = 0;
      x = 0;
    }
  }
  else {
    dp[v] = 1;
  }
}

int dfs3(int v, int p, long long t) {
  if (t > d[v]) {
    return 0;
  }
  int cnt = 0;
  int res = 1;
  for (int i = 0; i < g[v].size(); ++i) {
    if (g[v][i] != p) cnt++;
  }
  for (int i = 0; i < g[v].size(); ++i) {
    int u = g[v][i];
    if (u == p) continue;
    res &= dfs3(u, v, t / cnt);
  }
  return res;
}

int check(long long x) {
  return dfs3(1, 0, x * dp[1]);
}

int main() {
  scanf("%d", &n);
  for (int i = 1; i <= n; ++i) {
    scanf("%d", a + i);
  }
  for (int i = 1, u, v; i < n; ++i) {
    scanf("%d%d", &u, &v);
    g[u].push_back(v);
    g[v].push_back(u);
  }
  dfs(1, 0);
  dfs2(1, 0);
  if (!dp[1]) {
    printf("%I64d\n", d[1]);
    return 0;
  }
  long long l = 0, r = INF;
  while (l + 1 < r) {
    long long mid = (l + r) >> 1;
    if (check(mid)) {
      l = mid;
    }
    else {
      r = mid;
    }
  }
  printf("%I64d\n", d[1] - dp[1] * l);
  return 0;
}
