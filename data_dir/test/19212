#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
    #define EXPECT(expr)
#endif
#define NO_IO_TIE ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for( auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for( auto & u: a) fin >> u; return fin; }
/* @@@ ----------------------------------- */

int probC()
{
    size_t n;
    cin >> n;
    vector<int> len(n);
    vector<int> cost(n);
    cin >> len >> cost;

    typedef struct {
        size_t count;
        int cost;
    } value_t;

    map<int, value_t> m;
    unordered_map<int, vector<size_t>> loc;
    loc.reserve( n );

    for(size_t i = 0; i < n; ++ i)
    {
        loc[len[i]].push_back(i);
        auto iter = m.find(len[i]);
        if( iter != end(m) )
        {
            ++(iter->second.count);
            iter->second.cost += cost[i];
        }
        else
            m[len[i]] = {1, cost[i]};
    }

    size_t count = 0;
    auto acc = accumulate(begin(cost), end(cost), 0);

    vector< size_t > cnt( 201, 0 );
    int out = numeric_limits<int>::max();

    for(const auto & pr: m)
    {
        count += pr.second.count;
        acc -= pr.second.cost;

        auto val = acc;
        size_t k = count + 1 < 2 * pr.second.count ? 0
                 : count + 1 - 2 * pr.second.count;
        for(size_t i = 1; 0 < k; ++ i)
        {
            val += i * min(k, cnt[i]);
            k -= min(k, cnt[i]);
        }

        out = min(out, val);
        for(const auto i: loc[pr.first])
            ++ cnt[cost[i]];
    }

    return out;
}


int main( const int argc, char * argv [])
{
    NO_IO_TIE;
    cout  << probC();

    return EXIT_SUCCESS;
}
