#include <bits/stdc++.h>
typedef long long ll;

using namespace std;

const int MAXNODE = 100001;
struct DSU{
	int par[MAXNODE], opp[MAXNODE];
	DSU(){
		memset(par, -1, sizeof par);
		memset(opp, -1, sizeof opp);
	}

	void init(){
		memset(par, -1, sizeof par);
				memset(opp, -1, sizeof opp);
	}

	int getRoot(int v){
		if(v < 0)
			return v;
		if(par[v] < 0) return v;
		return par[v] = getRoot(par[v]);
	}

	bool love(int x, int y){
		return getRoot(x) == getRoot(y);
	}

	bool hate(int x, int y){
		x = getRoot(x);
		y = getRoot(y);
		int oppx = getRoot(opp[x]);
		int oppy = getRoot(opp[y]);
		return x == oppy || y == oppx;
	}

	bool addLove(int x, int y){
		x = getRoot(x);
		y = getRoot(y);
		if(x == y)
			return 1;
		int oppx = getRoot(opp[x]);
		int oppy = getRoot(opp[y]);
		if(oppx == y || oppy == x)
			return 0;
		int lead = merge(x, y);
		int opplead = merge(oppx, oppy);
		opp[lead] = opplead;
		opp[opplead] = lead;
		return 1;
	}

	bool addHate(int x, int y){
		x = getRoot(x);
		y = getRoot(y);
		if(x == y)
			return 0;
		int oppx = getRoot(opp[x]);
		int oppy = getRoot(opp[y]);
		if(oppx == y || oppy == x)
			return 1;
		int lead = merge(x, oppy);
		int opplead = merge(y, oppx);
		opp[lead] = opplead;
		opp[opplead] = lead;
		return 1;
	}

	int merge(int x, int y){
		if(x == -1)
			return y;
		if(y == -1)
			return x;
		if(par[y] < par[x])
			swap(x, y);
		par[x] += par[y];
		par[y] = x;
		return x;
	}
};

int main() {
	int n, m, q; scanf("%d%d%d", &n, &m, &q);
	map<string, int>words;
	for(int i = 0; i < n; i++){
		string tmp; cin >> tmp;
		words[tmp] = i;
	}

	DSU dsu;
	for(int i = 0; i < m; i++){
		int t; scanf("%d", &t);
		string a, b; cin >> a >> b;
		if(t == 1){
			if(dsu.addLove(words[a], words[b]))
				printf("YES\n");
			else printf("NO\n");
		}
		else{
			if(dsu.addHate(words[a], words[b]))
				printf("YES\n");
			else printf("NO\n");
		}
	}

	while(q--){
		string a, b; cin >> a >> b;
		int wa = words[a], wb = words[b];
		if(dsu.love(wa, wb))
			printf("1\n");
		else if(dsu.hate(wa, wb))
			printf("2\n");
		else printf("3\n");
	}
	return 0;
}


