#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ld = long double;
#define ff first
#define ss second
#define nl '\n'
/* -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- */

#define all(x) (x).begin(), (x).end()

template <typename P, typename Q>
ostream&operator<<(ostream&os, const pair<P, Q>&p)
{return os << '(' << p.first << ", " << p.second << ')';}
template <typename K, typename V>
ostream&operator<<(ostream&os, const map<K, V>&v)
{os << '['; for(const auto&it:v) (os << it) << ", "; return os << ']';}
template <typename T> ostream&operator<<(ostream&os, const set<T>&v)
{os << '['; for(const auto&it:v) (os << it) << ", "; return os << ']';}
template <typename T> ostream&operator<<(ostream&os, const vector<T>&v)
{os << '['; for(const auto&it:v) os << it << ", "; return os << ']';}

/* -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- */

using vi = vector<int>;
const int N = 200100;
vi tree[N];
int dst[N], ipt[N], bft[N];
void dfs(int u=1, int par=0, int dp=0) {
  dst[u] = dp;
  for(auto&v:tree[u]) {
    if( v == par ) continue;
    dfs(v, u, dp+1);
  }
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0); cout.tie(0); srand(time(0));

  int n; cin >> n;
  for(int u, v, i = 1; i<n; i++) {
    cin >> u >> v;
    tree[u].emplace_back(v);
    tree[v].emplace_back(u);
  }

  dfs(1);
  for(int i=1; i<=n; i++) {
    cin >> ipt[i];
    bft[ ipt[i] ] = i;
  }
  for(int i=1; i<=n; i++) {
    sort(all(tree[i]),
	 [&](const int&p, const int&q) {
	   return bft[p] < bft[q]; });
  }

  vector<int> Q;
  Q.emplace_back(0);
  Q.emplace_back(1);
  vector< bool > vis(1+n, false);
  vis[1] = true;
  for(int lx=1; lx<Q.size(); lx++) {
    int u = Q[lx];
    for(auto&v:tree[u]) {
      if( vis[v] ) continue;
      vis[v] = true;
      Q.emplace_back(v);
    }
  }
  bool yes = true;
  for(int i=1; i<=n and yes; i++) {
    yes = yes and Q[i] == ipt[i];
  }
  cout << (yes ? "Yes" : "No") << nl;

  return 0;
}

/* -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- */
