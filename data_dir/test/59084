#include <bits/stdc++.h>

typedef long long ll;
using namespace std;

bool ovr(ll n, int f){
	ll tmp = ll(1e18) / n + 1;
	return tmp <= f;
}

void gen(vector<ll>&ret, vector<int>&p, int st, int end){
	priority_queue<pair<ll,int> >q;
	q.push({-1, st});
	while(q.size()){
		ll n = -q.top().first;
		int ind = q.top().second;
		q.pop();
		ret.push_back(n);
		for(int i = ind; i < end; i++)
			if(!ovr(n, p[i]))
				q.push({-n * p[i], i});
	}
}

ll cnt(ll x, vector<ll>&a, vector<ll>&b){
	ll ret = 0;
	for(int i = 0; i < a.size() && a[i] <= x; i++)
		ret += upper_bound(b.begin(), b.end(), x / a[i]) - b.begin();
	return ret;
}

int main(){
	int n; cin >> n;
	vector<int>p(n);
	ll k;
	for(int i = 0; i < n; i++)
		cin >> p[i];
	cin >> k;
	int split = 5;
	if(n < 5)
		split = 1;
	vector<ll>sa, sb;
	gen(sa, p, 0, split);
	gen(sb, p, split, n);

	if(sa.size() > sb.size())
		swap(sa, sb);
//	for(int i = 0; i < 10; i++)
//		cerr << sa[i] << ' ' << sb[i] << endl;
	ll low = 1, high = 1e18, res = -1;
	while(low <= high){
		ll mid = (high + low) >> 1;
		ll c = cnt(mid, sa, sb);
//		cerr << mid << ' ' << c << endl;
		if(c >= k)
			res = mid, high = mid - 1;
		else low = mid + 1;
	}
	cout << res << endl;
	return 0;
}
