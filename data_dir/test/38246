/**
 *    author:  meneketehe
 *    created: 07.03.2019
**/

#include <bits/stdc++.h>
using namespace std;

int v, e, x, y, most, vertex;
vector<int> node[200005];
vector<pair<int,int>> ans;

void solve(int start) {
	queue<int> path;
	path.push(start);

	bitset<200005> visited;
	visited[start] = 1;

	int cur;
	while (!path.empty()) {
		cur = path.front();
		path.pop();

		for (int i = 0; i < node[cur].size(); i++) {
			if (!visited[node[cur][i]]) {
				ans.push_back(make_pair(cur, node[cur][i]));
				visited[node[cur][i]] = 1;
				path.push(node[cur][i]);
			}
		}
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	
	cin >> v >> e;
	for (int i = 0; i < e; i++) {
		cin >> x >> y;
		node[x].push_back(y);
		node[y].push_back(x);
	}

	most = 0;
	for (int i = 1; i <= v; i++) {
		if (node[i].size() > most) {
			most = node[i].size();
			vertex = i;
		}
	}

	solve(vertex);
	for (int i = 0; i < ans.size(); i++) {
		cout << ans[i].first << ' ' << ans[i].second << '\n';
	}

	return 0;
}