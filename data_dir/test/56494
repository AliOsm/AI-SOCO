#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <sstream>
#include <cassert>
#include <queue>
#include <bitset>
#include <ctime>
#include <chrono>
#include <random>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define db(v) cerr << #v << " = " << v << endl
#define pb push_back
#define sz(x) ((int)x.size())
#define fst first
#define snd second
typedef long long ll;
typedef pair<int, int> ii;
const int MAXN = -1;
const int LIM = (int)1e9+1;

int n;
int queries;

int gcd(int a, int b){
  if(b == 0) return a;
  return gcd(b, a%b);
}

bool GREATER(int c){
  queries++;
  
  printf("> %d\n", c);
  fflush(stdout);
  int r;
  scanf("%d", &r);
  return r;
}

int ask(int pos){
  queries++;
  
  printf("? %d\n", pos+1);
  fflush(stdout);
  int v;
  scanf("%d", &v);
  return v;
}

int main(){
  mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
  while(scanf("%d", &n) >= 1){
    queries = 0;
    
    int a = -1;
    int b = LIM;
    while(b - a > 1){
      int c = a + (b-a)/2;
      if(GREATER(c)){
        a = c;
      } else {
        b = c;
      }
    }
    int big = a + 1;
    vector<int> V(n);
    iota(V.begin(), V.end(), 0);
    shuffle(V.begin(), V.end(), rng);
    
    vector<int> W;
    int p = 0;
    while(queries < 60 && p < n){
      int pos = V[p];
      W.pb(ask(pos));
      p++;
    }
    
    int d = -1;
    forn(i, sz(W)){
      int a = W[i];
      int delta = big - a;
      if(d == -1) d = delta;
      else d = gcd(d, delta);
      //~ forr(j, i+1, sz(W)){
        //~ int a = W[i];
        //~ int b = W[j];
        //~ if(a > b) swap(a, b);
        //~ int delta = b - a;
        //~ if(d == -1) d = delta;
        //~ else d = gcd(d, delta);
      //~ }
    }
    
    printf("! %d %d\n", big-d*(n-1), d);
    fflush(stdout);
  }
  return 0;
}
