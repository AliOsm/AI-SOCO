#include <bits/stdc++.h>
using namespace std;
#define INF 1<<30
#define endl '\n'
#define maxn 100005
#define tc printf("Case %d: ", cs)
#define tcn printf("Case %d:\n", cs);
#define FASTIO ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
typedef long long ll;
const double PI = acos(-1.0);

#define dbg1(x) cerr << #x << " = " << x << endl;
#define dbg2(x, y) cerr << #x << " = " << x << ", " << #y << " = " << y << endl;
#define dbg3(x, y, z) cerr << #x << " = " << x << ", " << #y << " = " << y << ", " << #z << " = " << z << endl;
#define dbg4(w,x, y, z) cerr << #w << " = " << w << ", " <<#x << " = " << x << ", " << #y << " = " << y << ", " << #z << " = " << z << endl;

template < typename F, typename S >
ostream& operator << ( ostream& os, const pair< F, S > & p ) {
    return os << "(" << p.first << ", " << p.second << ")";
}

template < typename T >
ostream &operator << ( ostream & os, const vector< T > &v ) {
    os << "{";
    for (auto it = v.begin(); it != v.end(); ++it) {
        if ( it != v.begin() ) os << ", ";
        os << *it;
    }
    return os << "}";
}

template < typename T >
ostream &operator << ( ostream & os, const set< T > &v ) {
    os << "[";
    for (auto it = v.begin(); it != v.end(); ++it) {
        if ( it != v.begin()) os << ", ";
        os << *it;
    }
    return os << "]";
}

template < typename F, typename S >
ostream &operator << ( ostream & os, const map< F, S > &v ) {
    os << "[";
    for (auto it = v.begin(); it != v.end(); ++it) {
        if ( it != v.begin() ) os << ", ";
        os << it -> first << " = " << it -> second ;
    }
    return os << "]";
}

#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)

clock_t tStart = clock();
#define timeStamp dbg("Execution Time: ", (double)(clock() - tStart)/CLOCKS_PER_SEC)

void faltu () { cerr << endl; }

template <typename T>
void faltu( T a[], int n ) {
    for (int i = 0; i < n; ++i) cerr << a[i] << ' ';
    cerr << endl;
}

template <typename T, typename ... hello>
void faltu( T arg, const hello &... rest) { cerr << arg << ' '; faltu(rest...); }
// Program showing a policy-based data structure.
#include <ext/pb_ds/assoc_container.hpp> // Common file 
#include <ext/pb_ds/tree_policy.hpp>
#include <functional> // for less 
#include <iostream>
using namespace __gnu_pbds;
using namespace std;
// GNU link : https://goo.gl/WVDL6g
typedef tree<int, null_type, less_equal<int>, rb_tree_tag,
        tree_order_statistics_node_update>
        new_data_set;

/**___________________________________________________**/

long long Bigmod(long long base, long long power, long long mod) {long long ret = 1; while (power) {if (power & 1)ret = (ret * base) % mod; base = (base * base) % mod; power >>= 1;} return ret;}
long long modInverse(long long number, long long mod) {return Bigmod(number, mod - 2, mod);}
const ll N = 2e5 + 5;
const ll mod = 1e9 + 7;
typedef pair<ll, ll> pll;
ll fact[N];
ll inv[N];
vector<pll> v;

bool isValid(pll a, pll b)
{
    if (a.first <= b.first && a.second <= b.second) return true;
    return false;
}


void calc()
{
    fact[0] = 1;
    inv[0] = modInverse(fact[0], mod);
   // dbg(fact[0], inv[0]);

    for (int i = 1; i < N; i++) {
        fact[i] = (fact[i - 1] * i) % mod;
        inv[i] = modInverse(fact[i], mod);
        // if(i < 10)
        // dbg(fact[i], inv[i]);
    }
}

ll ways(int p, int q, int x, int y)
{
    int n = x - p + y - q, r = x - p;
    ll ans = fact[n];
    ans = (ans * inv[r]) % mod;
    ans = (ans * inv[n - r]) % mod;
    //dbg(ans);
    return ans;
}

ll n, m, k;
ll dp[2007];

ll solve(int id)
{
    ll ans = ways(1, 1, v[id].first, v[id].second);
    for (int i = 0; i < id; i++) {
        if (isValid(v[i], v[id])) {
            ans -= (dp[i] * ways(v[i].first, v[i].second, v[id].first, v[id].second)) % mod;
            ans = (ans + mod) % mod;
        }
    }
    return ans;
}


int main()
{
    FASTIO
    ///*
#ifndef ONLINE_JUDGE
    freopen("in.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    freopen("error.txt", "w", stderr);
#endif
//*/
    calc();
    cin >> n >> m >> k;
    for (int i = 0; i < k; i++) {
        int x, y;
        cin >> x >> y;
        v.push_back({x, y});
    }
    v.push_back({n, m});
    sort(v.begin(), v.end());
    for (int i = 0; i <= k; i++) {
        dp[i] = solve(i);
    }
    cout << dp[k] << endl;
}