#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef pair<ll,ll> pll;
#define Max 1000001
#define inf INT_MAX
#define llinf LONG_LONG_MAX
#define f(i,n) for(i=0;i<n;i++)
#define fast ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define pb push_back
#define ff first
#define ss second
#define all(v) v.begin(),v.end()
#define bp(n) __builtin_popcount(n)
#define endl '\n'
#define v.size() (int)v.size()
#define deb1(a) cout<<a<<endl;
#define deb2(a,b) cout<<a<<' '<<b<<endl;
#define deb3(a,b,c) cout<<a<<' '<<b<<' '<<c<<endl;
#define deb4(a,b,c,d) cout<<a<<' '<<b<<' '<<c<<' '<<d<<endl;
#define deb5(a,b,c,d,e) cout<<a<<' '<<b<<' '<<c<<' '<<d<<' '<<e<<endl;

const ll N=1e5+5,mod=1e9+7,bit=60;

ll x,y,n,s;

ll solve1(ll m)
{
	if(m==0)
	{
		return 1;
	}
	ll lx=n-m+1;
	ll rx=n;
	ll ly=n-m+1;
	ll ry=n;
	if(x==rx)
	{
		rx--;
		lx--;
	}
	else if(x>=lx)
	{
		lx--;
	}
	if(y==ry)
	{
		ry--;
		ly--;
	}
	else if(y>=ly)
	{
		ly--;
	}
	ll h=min(lx+ry,ly+rx);
	return (h>s);
}

ll solve2(ll m)
{
	if(m==0)
	{
		return 1;
	}
	ll lx=1;
	ll rx=m;
	ll ly=1;
	ll ry=m;
	if(lx==x)
	{
		lx++;
		rx++;
	}
	else if(x<=rx)
	{
		rx++;
	}
	if(ly==y)
	{
		ly++;
		ry++;
	}
	else if(y<=ry)
	{
		ry++;
	}
	ll h=max(lx+ry,ly+rx);
	return (h<=s);
}

signed main()
{
    fast;
    ll t=1;
    cin>>t;
    while(t--)
    {
    	 cin>>n>>x>>y;
    	 s=x+y;
    	 ll l=0,r=n-1,mn=n,mx=0;
    	 while(l<=r)
    	 {
    	 	ll mid=(l+r)>>1;
    	 	if(solve1(mid))
    	 	{
    	 		mn=min(mn,n-mid);
    	 		l=mid+1;
    	 	}
    	 	else
    	 	{
    	 		r=mid-1;
    	 	}
    	 }
    	 l=0;
    	 r=n;
    	 while(l<=r)
    	 {
    	 	ll mid=(l+r)>>1;
    	 	if(solve2(mid))
    	 	{
    	 		mx=max(mx,mid);
    	 		l=mid+1;
    	 	}
    	 	else
    	 	{
    	 		r=mid-1;
    	 	}
    	 }
    	 mx=min(n,mx+1);
    	 cout<<mn<<" "<<mx<<endl;
    }
    return 0;
}