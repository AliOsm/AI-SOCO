#include<bits/stdc++.h>
using namespace std;

int ara [1000006];
int ara1[1000006];
int ara2[1000006];
int seg [4000006];
int lazy[4000006];
map<int, int>mp1;
map<int, int>mp2;

void propagate(int n)
{
    lazy[n*2]+= lazy[n];
    seg[n*2]+= lazy[n];
    lazy[n*2 +1]+= lazy[n];
    seg[n*2 +1]+= lazy[n];

    lazy[n]= 0;
    return;
}

void update(int n, int s, int e, int l, int r)
{
    if(s>=l&&e<=r)
    {
        lazy[n]++;
        seg[n]++;
        return;
    }

    if(s>r||e<l)return;

    if(lazy[n])propagate(n);

    int mid= (s+e)/2;
    update(n*2, s, mid, l, r);
    update(n*2 +1, mid+1, e, l, r);

    seg[n]= seg[n*2] + seg[n*2 +1];
    return;
}

int query(int n, int s, int e, int l, int r)
{
    if(s>=l&&e<=r)
        return seg[n];

    if(s>r||e<l)
        return 0;

    if(lazy[n])propagate(n);

    int mid= (s+e)/2;
    return query(n*2, s, mid, l, r) + query(n*2 +1, mid+1, e, l, r);
}

int main()
{
    int n;
    while(scanf("%d", &n)==1)
    {
        for(int i=0; i<n; i++)
            scanf("%d", &ara[i]), mp1[ara[i]]++, ara1[i]= mp1[ara[i]];

        for(int i=n-1; i>=0; i--)
            mp2[ara[i]]++, ara2[i]= mp2[ara[i]];

        mp1.clear();
        mp2.clear();
        memset(seg, 0, sizeof seg);
        memset(lazy, 0, sizeof lazy);

        int mx= 1000001;
        long long res= 0;
        for(int i=n-2; i>=0; i--)
        {
            update(1, 1, n, ara2[i+1]+1, mx);
            res+= (long long)query(1, 1, n, ara1[i], ara1[i]);
        }

        printf("%lld\n", res);
    }

    return 0;
}
