#define _CRT_SECURE_NO_WARNINGS
#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <assert.h>
#include <bitset>
#include <string>
#include <cstdio>
#include <math.h>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <bitset>
#include <map>
using namespace std;

typedef complex<double> base;

#define int64 long long
#define TASK ""
#define mp make_pair
#define pub push_back

#ifdef _DEBUG
const int N = 300010;
#else
const int N = 300010;
#endif


const int nbits = 30;
const int MOD = 1e9;
const int mx = 30000000;
const int C = 100;

int n, a[N], tpow[N], st[20][N];
vector <pair <int, int> > v, tmp;

void build()
{
    int tcur = 0, t1 = 1;
    for (int i = 1; i <= n; i++)
    {
        if (i == t1)
        {
            t1 *= 2;
            if (i != 1) tcur++;
        }
        tpow[i] = tcur;
    }
    for (int i = 1; i <= n; i++) st[0][i] = a[i];
    for (int k = 1; (1 << k) <= n; k++)
    {
        int len = (1 << k);
        int len1 = (1 << (k - 1));
        for (int i = 1; i + len - 1 <= n; i++)
        {
            st[k][i] = max(st[k - 1][i], st[k - 1][i + len1]);
        }
    }
}

int getmax(int l, int r)
{
    int k = tpow[r - l + 1];
    int len = (1 << k);
    return max(st[k][l], st[k][r - len + 1]);
}

int find(int L, int R, int x)
{
    int res = -1;
    int l = L, r = R;
    while (l + 1 < r)
    {
        int m = (l + r) / 2;
        if (getmax(L, m) < x) l = m;
        else r = m - 1;
    }
    if (getmax(L, r) < x) res = r;
    else if (getmax(L, l) < x) res = l;
    return res;
}

int stup()
{
    int res = 0;
    for (int i = 1; i <= n; i++)
    {
        int c1 = 0, c2 = 0;
        for (int j = i; j <= n; j++)
        {
            c1 |= a[j];
            c2 = max(c2, a[j]);
            if (c1 > c2) res++;
        }
    }
    return res;
}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
    srand(time(0));
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
    build();
    int64 res = 0;
    for (int i = n; i >= 1; i--)
    {
        tmp.clear();
        tmp.push_back(make_pair(a[i], i));
        for (int j = 0; j < v.size(); j++) 
        {
            pair <int, int> cp = make_pair(v[j].first | tmp.back().first, v[j].second);
            if (cp.first != tmp.back().first) tmp.push_back(cp);
        }
        v = tmp;
        //cout << "i = " << i << endl;
        //for (int j = 0; j < v.size(); j++) cout << v[j].first << " " << v[j].second << endl;
        //cout << endl;
        for (int j = 0; j < v.size(); j++)
        {
            int L = v[j].second;
            int R;
            if (j == (int)v.size() - 1) R = n;
            else R = v[j + 1].second - 1;
            int k = v[j].first;
            int ind = find(L, R, k);
            if (ind != -1) res += ind - L + 1;
        }
    }
    cout << res;
	return 0;
}