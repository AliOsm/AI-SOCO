#include<bits/stdc++.h>
using namespace std;
string s[505];
int n, m, sx, sy, ex, ey, tx, ty;
int dx[4] = {0, 0, 1, -1};
int dy[4] = {1, -1, 0, 0};
int visited[505][505];
int id;
bool valid(int x, int y) {
	if (x < 0 || y < 0 || x >= n || y >= m)
		return false;
	if (visited[x][y] == id)
		return false;
	if (x == tx && y == ty)
		return true;
	if (s[x][y] == 'X')
		return false;
	return true;
}

bool dfs(int x, int y, bool b) {
	if (x == tx && y == ty && b)
		return true;
	if (b)visited[x][y] = id;
	for (int i = 0; i < 4; i++) {
		if (valid(x + dx[i], y + dy[i]))
			if (dfs(x + dx[i], y + dy[i], 1))
				return true;
	}
	return false;
}

void findPath() {
	id++;
	tx = ex; ty = ey;
	if (dfs(sx, sy, 0))
		cout << "YES\n";
	else
		cout << "NO\n";
}

void findDoublePath() {

	for (int i = 0; i < 4; i++) {
		id++;
		visited[ex][ey] = id;
		tx = ex + dx[i]; ty = ey + dy[i];
		if (tx < 0 || ty < 0 || tx >= n || ty >= m)
			continue;
		if (s[ex + dx[i]][ey + dy[i]] == 'X' && (tx != sx || ty != sy))
			continue;

		bool Valid = false;
		for (int j = 0; j < 4; j++)
			if (i != j && valid(ex + dx[j], ey + dy[j])) {
				visited[ex + dx[j]][ey + dy[j]] = id;
				if (s[ex + dx[j]][ey + dy[j]] == '.')
					Valid = true;
			}
		if (Valid && dfs(sx, sy, 1)) {
			cout << "YES\n";
			return;
		}
	}
	cout << "NO\n";
}

int main() {
	ios::sync_with_stdio(false);

	cin >> n >> m;
	for (int i = 0; i < n; i++)
		cin >> s[i];
	cin >> sx >> sy >> ex >> ey;
	--sx; --sy; --ex; --ey;

	if (s[ex][ey] == 'X')
		findPath();
	else
		findDoublePath();

	return 0;
}

