#include <iostream>
#include<algorithm>
#include<string>
#include<map>
#include <iterator>
#include<iomanip>
#include <time.h>
#include<vector>
#include<cmath>
#include <cstdio>
#include<queue>
#include<unordered_map>
#include<stack>
#include<list>
#include<stdio.h>
#include<set>
#include <functional>

#define hash_mod 2305843009213717
#define mod7 1000000007
#define mod2 30000000
#define pa(a,b) make_pair(a,b)
#define f first
#define s second
#define pb(a)  push_back(a)
#define all(a) a.begin() , a.end()
#define mem(a, b) memset(a, b, sizeof(a))
#define LL  long long int
#define oo 1e9
#define pi 3.141592653589793238
#define eps  1e-6



LL maxx(LL & a , LL & b){ return a>b ?  a : b ;}
LL minn(LL & a , LL & b){ return a>b ?  b : a ;}

using namespace std;
int dx[] = {1 , -1 , 0 , 0} ;
int dy[] = {0 , 0 , 1 , -1} ;
void boostIO()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
}
LL gcd(LL a, LL b) {
    return b == 0 ? a : gcd(b, a % b);
}
int int_gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
}
LL lcm(LL a , LL b )
{
    return (a*b)/gcd(a , b);
}
LL poww(LL base, LL exp , LL mod){
  base %= mod;
  LL result = 1;
  while (exp > 0) {
    if (exp & 1) result = (result * base) % mod;
    base = (base * base) % mod;
    exp >>= 1;
  }
  return result;
}
int lvl[200200] , bit[2][200200] , pos = 0 ;
vector<int>g[200200] ;
pair<int , int> index[200200] ; bool vis[200200] ;
void dfs(int root , int l){

    vis[root] = 1 ; lvl[root] = l ; //index[root] = pos ;
    index[root] = pa(++pos , 0) ;

    for(int i = 0 ; i < g[root].size() ; i++){
        if(!vis[g[root][i]]){
            dfs(g[root][i] , l + 1) ;
        }
    }
    index[root].s = pos ;
    return ;
}
void add(int t , int idx , int val){

    while(idx <= 200000){
        bit[t][idx] += val ;
        idx += (idx & -idx) ;
    }

    return ;
}
int Get(int t , int idx){
    int ret = 0 ;
    while(idx > 0){
        ret += bit[t][idx] ;
        idx -= (idx & -idx) ;
    }

    return ret ;
}
int main()
{
    int n , q ; scanf("%d%d" , &n , &q) ;
    vector<int>a ;
    for(int i = 0 ; i < n ; i++){
        int x ; scanf("%d" , &x) ;
        a.pb(x) ;
    }

    for(int i = 1 ; i < n ; i++){
        int u , v ; scanf("%d%d" , &u , &v) ;
        g[u].pb(v) , g[v].pb(u) ;
    }

    dfs(1 , 0) ;

    while(q--){
        int t , x ; scanf("%d%d" , &t , &x) ;

        if(t == 1){
            int val ; scanf("%d" , &val);

            add(lvl[x] % 2 , index[x].f , val) ;
            add(lvl[x] % 2 , index[x].s + 1 , -val) ;
            add(!(lvl[x] % 2) , index[x].f , -val) ;
            add(!(lvl[x] % 2) , index[x].s + 1 , val) ;
        }
        else{
            printf("%d\n" , Get(lvl[x] % 2 , index[x].f) + a[x - 1]) ;
        }
    }

    return 0 ;
}
