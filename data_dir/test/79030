//IOI 2021
#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define ff first
#define ss second

typedef long long ll;
typedef pair<int, int> pii;

struct DSU {
	//nodes are 1 base
	int SetCnt, FirstSetCnt;
	vector<int> par, sz;

	//constructor
	DSU (const int &x) {
		SetCnt = x;
		FirstSetCnt = x;
		par.resize(x + 1);
		sz.resize(x + 1);
		fill(par.begin(), par.end(), -1);
		fill(sz.begin(), sz.end(), 1);
	}
	//finding root of a vertex
	int find_root(int x) {
		return (par[x] == -1? x: par[x] = find_root(par[x]));
	}

	//merging two component
	bool set_union(int x, int y) {
		int p1 = find_root(x), p2 = find_root(y);
		SetCnt -= (p1 != p2);
		if (sz[p1] > sz[p2])
			swap(p1, p2);
		if (p1 != p2)
			sz[p2] += sz[p1];
		return (p1 == p2? false: (par[p1] = p2) | 1);
	}

	//meging two DSU (adding every edge in second DSU to first DSU) ---> O(n.log*(n))
	bool merge(DSU &x) {
		if (x.size() != FirstSetCnt)
			return false;
		for (int i = 1; i <= FirstSetCnt; i++) {
			int p1 = find_root(i), p2 = x.find_root(i);
			if (p1 != p2)
				set_union(p1, p2);
		}
		return true;
	}

	//clear DSU
	void clear() {
		fill(par.begin(), par.end(), -1);
		fill(sz.begin(), sz.end(), 1);
		SetCnt = FirstSetCnt;
	}

	//number of nodes in component of node x
	int size_cmp(const int &x) {
		return sz[find_root(x)];
	}

	//number of components
	int num_cmp() {
		return SetCnt;
	}

	//number of nodes
	int size() {
		return FirstSetCnt;
	}
};

const int MAXN = 2 * 100 * 1000 + 17;

int r[MAXN], n, q;

int main() {
	ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n >> q;
	iota(r + 1, r + n + 1, 1);
	DSU mmd(n);
	while (q--) {
		int t, x, y;
		cin >> t >> x >> y;
		if (t == 1)
			mmd.set_union(x, y);
		else if (t == 2) {
			while (r[x] < y) {
				int tmp = x;
				mmd.set_union(x, r[x] + 1);
				x = r[x] + 1;
				r[tmp] = y;
			}
		}
		else
			if (mmd.find_root(x) != mmd.find_root(y))
				cout << "NO" << endl;
			else
				cout << "YES" << endl;
	}
	return 0;
}
