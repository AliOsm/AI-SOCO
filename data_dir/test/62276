#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%Ld"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
#include <utility>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
#define SZ 131072
int used[2*SZ] , full[2*SZ];
int lo , hi;
void insert(int vr , int how , int beg=0 , int end=SZ-1){
  if(hi<beg || end<lo)return;
  if(lo<=beg && end<=hi)
   full[vr] += how;
  else insert(2*vr , how , beg , (beg+end)>>1),
       insert(2*vr+1 , how , ((beg+end)>>1)+1 , end);
  if(full[vr])used[vr] = end-beg+1;
  else
   if(vr >= SZ)used[vr] = 0;
   else used[vr] = used[2*vr] + used[2*vr+1];
}
// Solution
int N,M;
vi fo[100010];
vector<pii> add[100010];
int ans[100010];
pii span[100010];
int tim = -1;
void dfs(int vr , int par){
  if(par != -1)
   fo[vr].erase( find(all(fo[vr]) , par) );
  span[vr].fi = ++tim;
  for(int i=0;i<sz(fo[vr]);++i)
   dfs(fo[vr][i] , vr);
  span[vr].se = tim;
}
void solve(int vr){
  for(int i=0;i<sz(add[vr]);++i){
   lo = add[vr][i].fi , hi = add[vr][i].se;
   insert(1 , 1);
                                }
  ans[vr] = used[1];
  if(ans[vr])--ans[vr];
  for(int i=0;i<sz(fo[vr]);++i)
   solve(fo[vr][i]);
  for(int i=0;i<sz(add[vr]);++i){
   lo = add[vr][i].fi , hi = add[vr][i].se;
   insert(1 , -1);
                                }
}
int main(){
  scanf("%d%d" , &N , &M);
  for(int i=1;i<N;++i){
   int a,b; scanf("%d%d" , &a , &b);
   --a , --b;
   fo[a].pb(b) , fo[b].pb(a);
                      }
  dfs(0 , -1);
  for(int i=0;i<M;++i){
   int a , b; scanf("%d%d" , &a , &b);
   --a , --b;
   add[a].pb(span[a]); add[a].pb(span[b]);
   add[b].pb(span[a]); add[b].pb(span[b]);
                      }
  solve(0);
  for(int i=0;i<N;++i)
   printf("%d%c" , ans[i] , (i+1==N ? '\n' : ' '));
  return 0;
}
