#pragma comment(linker, "/STACK:640000000")
#include<iostream>
#include<cstdio>
#include<cassert>
#include<cstring>
#include<ctime>
#include<cstdlib>
#include<cmath>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<bitset>
#include<algorithm>

#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define ll long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
#define forit(it,S) for(__typeof((S).begin()) it = (S).begin(); it != (S).end(); it++)

using namespace std;

typedef pair<int, int> pii;

const double eps = 1e-9;
const double pi = acos(-1.0);

int a[505 * 505];

int gcd(int x, int y) {
    while(y) {
        x %= y;
        swap(x,y);
    }
    return x;
}

int main() {
    #ifdef LOCAL
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    
    int n; cin >> n;
    
    map<int, int> d,dd;
    
    for (int i = 0; i < n * n; i++) {
        int x; scanf("%d",&x);
        a[i] = x;
        d[x]++;
    }
    
    sort(a,a + n * n);
    reverse(a,a + n * n);
    
    vector<int> e;
    
    for (int i = 0; i < n * n;) {
        int j = i;
        while(j < n * n && a[i] == a[j]) j++;
        int val = a[i];
        i = j;
        if (d[val] > 0) {
            int sum = 0;
            for (int k = 0; k < sz(e); k++) if (e[k] % val == 0) {
                sum += dd[e[k]];
            }
            int res = 0;
            while(res * res + 2 * res * sum < d[val]) res++;
            dd[val] = res;
            for (int k = 0; k < sz(e); k++) {
                d[gcd(e[k],val)] -= 2 * dd[e[k]] * dd[val];
            }
            d[val] -= res * res;
            e.pb(val);
        }       
    }
    
    forit(it,dd) {
        for (int i = 0; i < it -> second; i++) {
            cout << it -> first << " "; 
        }
    }
    
    return 0;
}
