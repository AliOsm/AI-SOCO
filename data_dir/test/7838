#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<long long, int>, // change type
//        null_type,
//        less<pair<long long, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

//template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)(x).size()
#define pb push_back
#define X first
#define Y second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
#define debug(x) cerr << #x << " : " << (x) << endl
const double PI = 3.14159265358979323846;
const double eps = (1e-5);
int isGreater(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}

const int MIN = 0, MAX = 1000000000;
int n, sx, sy;
const int MAX_N = 2e5 + 5;

int dist(pair<int, int> a, pair<int, int> b)
{
    return abs(a.X - b.X) + abs(a.Y - b.Y);
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
    cin >> n >> sx >> sy;
    vector<pair<int, int> > p(n);
    rep(i,0,n)
        cin >> p[i].X >> p[i].Y;

    pair<int, int> sol;
    int mx = -1;
    for (int i = -1; i <= 1; i++)
    {
        for (int j = -1; j <= 1; j++)
        {
            if (!i && !j)
                continue;
            int nx = sx + i, ny = sy + j;
            if (nx > MAX || ny > MAX || nx < MIN || ny < MIN)
                continue;
            int temp = 0;
            for (auto item : p)
            {
                if (dist(item, {sx, sy}) == dist(item, {nx, ny}) + dist({nx, ny}, {sx, sy}))
                    temp++;
            }
            if (temp > mx)
            {
                mx = temp;
                sol = {nx, ny};
            }
        }
    }

    cout << mx << '\n';
    cout << sol.X << ' ' << sol.Y << '\n';
    return 0;
}