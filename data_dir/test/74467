#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>
#include <random>
#include <iomanip>


typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(tint i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl



using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) )
		Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Tshirt
{
	tint price,front,back,index;
	Tshirt (tint pp, tint ff, tint bb, tint ii)
	{
		price = pp;
		front = ff;
		back = bb;
		index = ii;
	}
};

bool operator < (Tshirt t1, Tshirt t2)
{
	return make_tuple (t1.price,t1.front,t1.back,t1.index) < make_tuple (t2.price,t2.front,t2.back,t2.index);
}


int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n;
	while (cin >> n)
	{
		vector<set<Tshirt> > r (3);
		vector<Tshirt> t (n, Tshirt(0,0,0,0));
		forn(i,n)
		{
			tint p;
			cin >> p;
			t[i].price = p;
		}
		forn(i,n)
		{
			tint a;
			cin >> a;
			t[i].front = a-1;
			t[i].index = i;
		}
		forn(i,n)
		{
			tint b;
			cin >> b;
			t[i].back = b-1;
		}
		forn(i,n)
		{
			r[t[i].front].insert(t[i]);
			r[t[i].back].insert(t[i]);
		}
		tint m;
		cin >> m;
		forn(i,m)
		{
			if (i)
				cout << " ";
			tint c;
			cin >> c;
			c--;
			if (!r[c].empty())
			{
				Tshirt compra = *r[c].begin();
				if (!r[compra.front].empty())
					r[compra.front].erase(compra);
				if (!r[compra.back].empty())
					r[compra.back].erase(compra);
				cout << compra.price;
			}
			else
				cout << "-1";
		}
		cout << "\n";
	}
	return 0;
}



