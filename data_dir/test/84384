#define _CRT_SECURE_NO_DEPRECATE
#include <ctime>
#include <float.h>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <cstring>
#include <cstdio>
using namespace std;
#define pb push_back
#define inf 1000000000
#define ll long long
#define all(c) (c).begin(), (c).end()
#define VI vector<int>
#define ppb pop_back
#define mp make_pair
#define pii pair<int,int>
#define pdd pair<double,double>
#define L(s) (int)(s).size()
#define x first
#define y second
#define pi 2 * acos(0.)
int n, m;
ll d[222222];
int h[222222];
pair<ll, pair<ll, ll> > tr[222222 << 3];
inline pair<ll, pair<ll, ll> > unite(pair<ll, pair<ll, ll> > l, pair<ll, pair<ll, ll> > r) {
	pair<ll, pair<ll, ll> > ans;
	ans.x = max(max(l.x, r.x), l.y.x + r.y.y);
	ans.y.x = max(l.y.x, r.y.x);
	ans.y.y = max(l.y.y, r.y.y);
	return ans;
}
inline void init(int v, int l, int r) {
	if (l + 1 == r) {
		tr[v].x = 0;
		tr[v].y.x = 2LL * h[l] - d[l];
		tr[v].y.y = 2LL * h[l] + d[l];
		return;
	}
	int mid = (l + r + 1) / 2;
	init(2 * v + 1, l, mid);
	init(2 * v + 2, mid, r);
	tr[v] = unite(tr[2 * v + 1], tr[2 * v + 2]);
}
inline pair<ll, pair<ll, ll> > get(int v,int l, int r, int st, int fn) {
	if (l == st && r == fn) return tr[v];
	int mid = (l + r + 1) / 2;
	if (fn <= mid) return get(2 * v + 1, l, mid, st, fn);
	if (st >= mid) return get(2 * v + 2, mid, r, st, fn);
	return unite(get(2 * v + 1, l, mid, st, mid), get(2 * v + 2, mid, r, mid, fn));
}
int main() {
	
		scanf("%d%d", &n, &m);
		for(int i = 1; i <= n; ++i) {
			int x; 
			scanf("%d", &x);
			d[i] = d[i - 1] + x;
		}
		for(int i = n + 1; i < 2 * n; ++i) {
			d[i] = d[i - 1] + d[i - n] - d[i - 1 - n];
		}
		for(int i = 0; i < n; ++i) {
			scanf("%d", &h[i]);
			h[i + n] = h[i];
		}
		init(0, 0, 2 * n);
	
		while(m--) {
			int st, fn; 
			scanf("%d%d", &st, &fn); --st; --fn;
			if (st <= fn) {
				printf("%I64d\n", get(0, 0, 2 * n, fn + 1, st + n).x);
			} else {
				printf("%I64d\n", get(0, 0, 2 * n, fn + 1, st).x);
			}
		}
}
