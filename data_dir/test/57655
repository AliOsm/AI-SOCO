#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cassert>
#include <climits>
#include <functional>
#include <numeric>
#include <algorithm>
#include <cmath>
#include <ctime>

#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <array>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); i++)
#define forn1(i, n) for(int i = 1; i <= int(n); i++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define mp make_pair
#define pb push_back
#define x first
#define y second

typedef long long li;
typedef long double ld;
typedef pair <int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld PI = acosl(ld(-1));
const ld EPS = 1e-15;

template <typename T> inline T sqr(const T& x) {
	return x * x;
}

template <typename T> inline T abs(const T& x) {
	return x > 0 ? x : -x;
}

inline bool inside(int x, int y, int n, int m) {
	return x >= 0 && x < n && y >= 0 && y < m;
}

inline int rnd() {
	return abs(rand() ^ (rand() << 15));
}

inline int rnd(int n) {
	assert(n > 0);
	return rnd() % n;
}

inline int rnd(int lf, int rg) {
	return lf + rnd(rg - lf + 1);
}

inline li rndLL() {
	return rnd() * 1LL * rnd() + rnd();
}

const int dx[4] = { -1, 0, +1, 0 };
const int dy[4] = { 0, +1, 0, -1 };

const int dx8[8] = { -1, -1, 0, +1, +1, +1, 0, -1 };
const int dy8[8] = { 0, +1, +1, +1, 0, -1, -1, -1 };

const int N = int(2e5) + 555;

int n, k, a[N];

void gen() {
}

bool read() {
	if (scanf("%d %d", &n, &k) != 2) return false;
	forn1(i, n) assert(scanf("%d", &a[i]) == 1);
	return true;
}

int ans[N];
int res[N];

void solve() {
	set<pt> s;
	forn1(i, n) {
		//cerr << "i == " << i << endl;
		int x = a[i];
		auto it = s.begin();
		while (it != s.end() && it->x <= x) it++;
		//if (it != s.begin()) it--;
		if (it == s.begin()) {
			int lf = max(0, x - k + 1);
			ans[i] = lf;
			s.insert(pt(lf, x));
		}
		else {
			
			it--;
		//	cerr << "it x y == " << it->x << ' ' << it->y << endl;
			if (it->y >= x) {
				ans[i] = it->x;
				continue;
			}
			int from = it->x;
			int d = x - it->x + 1;
			if (d <= k) {
				ans[i] = it->x;
				s.erase(it);
				s.insert(pt(from, x));
			}
			else {
				int lf = x - k + 1;
				lf = max(lf, it->y + 1);
				//cerr << "lf == " << lf << endl;
				ans[i] = lf;
				s.insert(pt(lf, x));
			}
		}

		//cerr << "s == " << sz(s) << endl;
		//for (pt p : s) cerr << p.x << ' ' << p.y << endl;
	}

	forn1(i, n) {
		if (i > 1) putchar(' ');
		printf("%d", ans[i]);
	}
	puts("");
}

int main() {
#ifdef _DEBUG
	assert(freopen("input.txt", "rt", stdin));
	assert(freopen("output.txt", "wt", stdout));
#endif

	cout << setprecision(10) << fixed;
	cerr << setprecision(10) << fixed;

	int T = 1;

	srand(int(time(NULL)));

	//assert(scanf("%d", &T) == 1);

	forn(i, T) {
#ifdef _DEBUG
		cerr << "TEST == " << i << endl;
#endif

		assert(read());
		//cout << "Case #" << i + 1 << ": ";
		solve();
#ifdef _DEBUG
		cerr << "curTime == " << clock() << " ms" << endl;
#endif
	}

#ifdef _DEBUG
	cerr << "TIME == " << clock() << " ms" << endl;
#endif
	return 0;
}