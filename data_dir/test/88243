#define  _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<map>
#include<cmath>
#include<vector>
#include<algorithm>
#include<iomanip>
#include<cmath> 
#include<stack>
#include<math.h>
#include<set>
#include<string>
#include<cstring>
#include<queue>
#include<complex>	
#include<assert.h>
#include<math.h>
#include<memory.h>
#include<sstream>	
#include<cstdio>
using namespace std;

#define rep(i,n) for(int i=0;i<n;i++)
#define repi(i,a,n) for(int i=a;i<n;i++)

#define mp make_pair
#define pb push_back
#define fastIO ios::sync_with_stdio(false)
#define read freopen("in.in","r",stdin)
#define write freopen("out.out","w",stdout)
#define scf(xx) scanf("%d",&xx)
#define All(a) a.begin(), a.end()
#define LSOne(S) (S & (-S))

typedef unsigned long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef long double ld;

#define X first 
#define Y second 

int n, m, p;
char s[500010], ord[500010];
int par[500010];
int main(){
	
	//read; write;
	cin >> n >> m >> p;
	scanf("%s%s", s + 1, ord);
	stack<int> ss;
	repi(i, 1, n + 1){
		if (s[i] == '(')ss.push(i);
		else {
			par[i] = ss.top();
			par[ss.top()] = i;
			ss.pop();
		}
	}
	set<ii> st;
	st.insert(mp(1, n));
	set<ii>::iterator cur = st.begin(), it1, it2, it3;
	rep(i, m){
		if (ord[i] == 'D'){
			if (par[p] > p){
				it1 = st.upper_bound(mp(par[p], 1 << 30));
				--it1;
				int fr = cur->first, en = it1->second;
				vector<set<ii>::iterator> v;
				for (it2 = cur; it2 != it1; ++it2) v.push_back(it2);
				v.push_back(it1);
				rep(i, v.size())st.erase(v[i]);
				if (p != fr)st.insert(mp(fr, p - 1));
				if (par[p] != en)st.insert(mp(par[p] + 1, en));
				cur = st.upper_bound(mp(p, 1 << 30));
				if (cur == st.end()){
					cur--;
					p = cur->second;
				}
				else
					p = cur->first;
			}
			else {
				it1 = st.upper_bound(mp(par[p], 1 << 30));
				--it1;
				int fr = it1->first, en = cur->second;
				vector<set<ii>::iterator> v;
				for (it2 = it1; it2 !=cur; ++it2) v.push_back(it2);
				v.push_back(cur);
				rep(i, v.size())st.erase(v[i]);
				if (par[p] != fr)st.insert(mp(fr, par[p] - 1));
				if (p != en)st.insert(mp(p + 1, en));
				cur = st.upper_bound(mp(p, 1 << 30));
				if (cur == st.end()){
					cur--;
					p = cur->second;
				}
				else
					p = cur->first;
			}
		}
		else if(ord[i]=='R'){
			p++;
			if (p > cur->second){
				cur = st.lower_bound(mp(p + 1, 1 << 30));
				p = cur->first;
			}
		}
		else {
			p--;
			if (p < cur->first) {
				cur = st.upper_bound(mp(p - 1, 1 << 30));
				cur--;
				p = cur->second;
			}
		}
	}
	for (it1 = st.begin(); it1 != st.end(); ++it1){
		for (int i = it1->first; i <= it1->second; i++)
			cout << s[i];
	}
	
	return 0;
}