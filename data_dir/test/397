#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"

#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0);}

#define SHOW(x) std::cout << #x << " = " << x << std::endl;


inline int safe_mul(int x, int y) __attribute__ ((warn_unused_result));


int const maxn = 100005;

int tree[maxn * 8];
int sz = 1;

inline int get(int l, int r)
{
    int res = 0;
    for(l += sz, r += sz; l <= r; l = (l + 1) >> 1, r = (r - 1) >> 1)
    {
        if (l & 1)
            res = std::max(res, tree[l]);
        if (~r & 1)
            res = std::max(res, tree[r]);
    }
    return res;
}

inline void upd(int ind, int val)
{
    ind += sz;
    if (tree[ind] > val)
        return;
    for(tree[ind] = val; ind > 1; ind >>= 1)
        tree[ind >> 1] = max(tree[ind], tree[ind ^ 1]);
}

int main()
{
//    freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
	ios_base::sync_with_stdio(0);
	cin.tie(nullptr); cout.tie(nullptr);

    int n,c,d;
    while (sz <= 100000)
        sz <<= 1;

    cin >> n >> c >> d;

    vector<pair<int,int> > costc;
    vector<pair<int,int> > costd;
    costc.clear();
    costd.clear();

    for(int i = 0; i < n; ++i)
    {
        pair<int,int> cur ;
        cin >> cur.first >> cur.second;
        char c;
        cin >> c;
        if (c == 'D')
            costd.push_back(cur);
        else
            costc.push_back(cur);
    }

    int ans;
    ans = 0;
    for(const auto& p : costc)
        if (p.second <= c)
            ans = max(ans, p.first);
    int ansloc = 0;
    for(const auto& p : costd)
        if (p.second <= d)
            ansloc = max(ansloc, p.first);
    if (ans > 0 && ansloc > 0)
        ans += ansloc;
    else
        ans = 0;

    ansloc = 0;
    for(const auto& p : costc)
    {
        int need = c - p.second;
        if (need <= 0)
            continue;

        int cur = p.first + get(0, need);
        upd(p.second, p.first);

        if (cur == p.first) continue;
        ansloc = max(ansloc, cur);
    }

    fill(begin(tree), end(tree), 0);
    ans = max(ans, ansloc);

    ansloc = 0;
    for(const auto& p : costd)
    {
        int need = d - p.second;
        if (need <= 0)
            continue;

        int cur = p.first + get(0, need);
        upd(p.second, p.first);
        if (cur == p.first) continue;
        ansloc = max(ansloc, cur);
    }
    ans = max(ans, ansloc);
    cout << ans << endl;
}


