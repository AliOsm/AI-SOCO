#include <bits/stdc++.h>
#define int long long
#define hash hashhash
#define X first
#define Y second
#define endl "\n"
#define Mp make_pair
#define debug(x) cerr << #x << " = " << x << endl
#define pb push_back
using namespace std;
inline int in(){int32_t x ; scanf("%d",&x) ; return x ; }
inline long long lin(){long long x ; scanf("%lld",&x) ; return x ;}
char ch[4000010];
inline string get(){ scanf("%s",ch) ; return string(ch) ; }
inline void read(int *a , int n ) { for (int i = 0 ; i < n ; i ++) a[i] = in() ; }
template <class blank> inline void out(blank x) {cout << x << endl ; exit(0) ;}
template <class blank , class blank2> inline void smin(blank &a , blank2 b) {a = a <= b ? a : b ;}
template <class blank , class blank2> inline void smax(blank &a , blank2 b) {a = a >= b ? a : b ;}
typedef pair<int , int > pii;
typedef long double ld;
typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<pii> vii;
const int maxn  = 2e5 + 10;
const int maxm = 4e6 + 10;
const int maxlg = 22;
const int base = 29;
const int mod = 1e9 + 7;
const ll inf = 1e18 + 10;
const double eps = 1e-4;
const int SQ = 317;
struct st
{
    int l , r , v , w;
}tblo[maxn];
int n , k;
int dpcpy[maxn],dp[maxn],asked,res[maxn];
vii stree[4*maxn];
const int p = 1e7 + 19;

inline void update(st &shit , int p = 0 , int l = 0 , int r = asked - 1)
{
    if (l > shit.r | r < shit.l || shit.l > shit.r) return ;
    if (l >= shit.l && r <= shit.r){
        stree[p].push_back({shit.v,shit.w});
        return ;
    }
    int mid = (l + r ) >> 1;
    update(shit,2*p+1,l,mid),update(shit,2*p+2,mid+1,r);
}
inline void calc_dp(int v , int w)
{
    for (int i = k ; i >= w ; i --)
        dpcpy[i] = max(dpcpy[i],dpcpy[i-w] + v);
}
inline void build(int p = 0 , int l = 0 , int r = asked - 1)
{
    int pre[maxn];
    for (int i = 0 ; i <= k ; i ++) pre[i] = dpcpy[i];
    for (auto u : stree[p])
        calc_dp(u.first,u.second);
    if (l  == r)
    {
        int tavan = 1;
        int val = dpcpy[1];
        for (int m = 1 ; m <= k ; m ++ , tavan = tavan * ::p % mod , smax(val,dpcpy[m])){
            if (val > 0 ) res[l] = (res[l] + val * tavan)%mod;
        }
        for (int i = 0 ; i <= k ; i ++) dpcpy[i] = pre[i];
        return ;
    }
    int mid = (l + r) >> 1;
    build(2 * p + 1 , l , mid);
    build(2 * p + 2 , mid + 1 , r);
    for (int i = 0 ; i <= k ; i ++) dpcpy[i] = pre[i];
}
int32_t main()
{
    n = in() , k = in();
    memset(dpcpy,-63,sizeof dpcpy);
    dpcpy[0] = 0;
    for (int i = 0 ; i < n ; i ++)
        tblo[i].l = 0 , tblo[i].r = inf , tblo[i].v = in() , tblo[i].w = in();
    int q = in();
    while(q --)
    {
        int tp = in();
        if (tp == 1)
        {
            tblo[n].v = in() , tblo[n].w = in() , tblo[n].l = asked  , tblo[n].r = inf;
            n ++;
        }
        else if (tp == 2)
        {
            int id = in() - 1;
            tblo[id].r = asked - 1;
        }
        else asked ++;
    }
    for (int i = 0 ; i < n ; i ++)
    {
        smin(tblo[i].r,asked-1);
        update(tblo[i]);
    }
    build();
    for (int i = 0 ; i < asked ; i ++ , cout << "\n") cout << res[i];
}
