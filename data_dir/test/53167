#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define SPEED ios_base::sync_with_stdio(false); cin.tie(NULL);
#define FOR(i, a, b) for (ll i = a; i < b; ++i)
#define RFOR(i, b, a) for (ll i = b; i >= a; --i)
#define ALL(x) x.begin(), x.end()
#define DEBUG(args...) { string _s = #args; replace(ALL(_s), ' ', '\0');\
replace(ALL(_s), ',', ' ');\
stringstream _ss(_s); istream_iterator<string> _it(_ss); _debug(_it, args);}
#define endl "\n"
#define F first
#define S second
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)

using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

void _debug(istream_iterator<string>) {}
template<typename T, typename... Args>
void _debug(istream_iterator<string> it, T first, Args... args) {
    cerr << ">> " << *it << " : " << first << endl; _debug(++it, args...);
}
template <typename T1, typename T2>
inline ostream& operator << (ostream& out, const pair<T1, T2>& p) {
    return out << "(" << p.F << ", " << p.S << ")";
}
template<typename T>
inline ostream& operator << (ostream& out, const vector<T>& v) {
    if (v.empty()) return out << "[]";
    else { out << '['; for (auto& e : v) { out << e << ", "; } return out << "\b\b]"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const set<T>& s) {
    if (s.empty()) return out << "{}";
    else { out << '{'; for (auto& e : s) { out << e << ", "; } return out << "\b\b}"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const unordered_set<T>& s) {
    return out << set<T>(ALL(s));
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const map<T1, T2>& m) {
    if (m.empty()) return out << "{}";
    out << '{'; for (auto& p : m) { out << p << ", "; } return out << "\b\b}";
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const unordered_map<T1, T2>& m) {
    return out << map<T1, T2>(ALL(m));
}
template<typename T>
inline ostream& operator << (ostream& out, const ordered_set<T>& s) {
    return out << set<T>(ALL(s));
}

typedef long long ll;
typedef long double ld;
typedef vector<long long> vll;
typedef pair<ll, ll> pll;
typedef vector<pair<ll, ll>> vpll;
typedef unordered_map<ll, ll> STll;
/************************************** MAIN PROGRAM ********************************************/
ll dp[101][27][101];
ll bonusArr[27][27];

int main()
{
   // freopen("input.txt", "r", stdin);
    SPEED
    string s;
    ll k;
    cin >> s >> k;
    ll n;
    cin >> n;
    FOR(i, 0, n)
    {
        char x, y; ll c;
        cin >> x >> y >> c;
        bonusArr[x - 'a'][y - 'a'] = c;
    }
    n = s.size();

    /// dp[i][c][bucket] = max euphony that can be obtained considering only prefix len i of string,
    /// the char next to prefix is c and bucket is allowed number changes.

    FOR(i, 1, n + 1)
    {
        FOR(c, 'a', 'z' + 1)
        {
            FOR(bucket, 0, k + 1)
            {
                /// TODO: Deal with i == n
                ll val = LONG_MIN;
                if (bucket)
                {
                    FOR(_c, 'a', 'z' + 1)
                    {
                        ll newVal = bonusArr[_c - 'a'][c - 'a'] * (i != n) +
                        dp[i - 1][_c - 'a'][bucket - (_c != s[i - 1])];

                        val = max(val, newVal);
                    }
                }
                else
                {
                    val = dp[i - 1][s[i - 1] - 'a'][bucket] + bonusArr[s[i - 1] - 'a'][c - 'a'] * (i != n);
                }
              //  DEBUG(val)
                dp[i][c - 'a'][bucket] = val;
            }
        }
    }
    ll ans = LONG_MIN;
    FOR(c, 'a', 'z' + 1)
    {
        ans = max(ans, dp[n][c - 'a'][k]);
    }
    cout << ans;

/*
    FOR(i, 1, n + 1)
    {
        FOR(c, 'a', 'z' + 1)
        {
            FOR(bucket, 0, k + 1)
            {
                cout << dp[n][c - 'a'][bucket] << " ";
            }
            cout << endl;
        }
        cout << endl << endl;
    }
*/
}
/************************************** END OF PROGRAM ******************************************/
