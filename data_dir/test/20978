#include <bits/stdc++.h>
using namespace std;

const int INF = 0x3f3f3f3f;
using vi = vector<int>;
using vvi = vector<vi>;

int solve() {
    const int M = 3;
    vi k(M); for (int &x : k) cin >> x;
    int n = accumulate(k.begin(), k.end(), 0);
    vi c(n);
    for (int j = 0; j < M; j++) for (int i = 0; i < k[j]; i++) {
        int x; cin >> x; x--;
        c[x] = j;
    }
    vvi dp(n, vi(M, INF));
    for (int i = 0; i < n; i++) for (int j = 0; j < M; j++) {
        if (i > 0) {
            for (int z = 0; z <= j; z++) dp[i][j] = min(dp[i][j], dp[i - 1][z]);
        } else {
            dp[i][j] = 0;
        }
        dp[i][j] += c[i] != j;
    }
    cout << *min_element(dp[n - 1].begin(), dp[n - 1].end()) << endl;
    return 0;
}

int main() {
    ios::sync_with_stdio(false);
    // int t; cin >> t;
    // while (t--) 
    solve();
    return 0;
}