#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 

using namespace std;
using namespace __gnu_pbds; 
  
#define ll long long
#define X first
#define Y second
#define all(x) x.begin(), x.end()
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 

#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename \
	enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
	ris << "(" << d.first << ", " << d.second << ")";
}
sim dor(rge<c> d) {
	*this << "[";
	for (auto it = d.b; it != d.e; ++it)
		*this << ", " + 2 * (it == d.b) << *it;
	ris << "]";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "

const int mod = (int)1e9 + 7;
const int MX = (int)1e5 + 10;

void add_self(int &x, int y){x += y; if(x >= mod) x -= mod;}
void sub_self(int &x, int y){x -= y; if(x < 0) x += mod;}
void mul(int &x, int y){x = x * 1LL * y % mod;}

int main(){

	cin.tie(0); cout.tie(0);
	ios_base::sync_with_stdio(0);
	
	int n, m;
	cin >> n >> m;
	vector<vector<char>> a(n, vector<char>(m));
	vector<bool> cr(n), cc(m);

	// int w = 0;
	for(int i = 0; i < n; ++i){
		for(int j = 0; j < m; ++j){
			cin >> a[i][j];
			// w += a[i][j] == '.';
			if(a[i][j] == '#') cr[i] = cc[j] = true;
		}
	}

	// if(w == n * m) return puts("0"), 0;

	vector<int> row(n), col(m);

	for(int i = 0; i < n; ++i){
		int cnt = 0;
		int streak = 0;
		for(int j = 0; j < m; ++j){
			if(a[i][j] == '#') streak++;
			else{
				if(streak) cnt++;
				streak = 0;
			}
		}
		if(streak) cnt++;
		row[i] = cnt;
	}

	for(int j = 0; j < m; ++j){
		int cnt = 0;
		int streak = 0;
		for(int i = 0; i < n; ++i){
			if(a[i][j] == '#') streak++;
			else{
				if(streak) cnt++;
				streak = 0;
			}
		}
		if(streak) cnt++;
		col[j] = cnt;
	}

	bool ok = true;
	for(int i = 0; i < n; ++i)
		ok &= row[i] <= 1;
	for(int j = 0; j < m; ++j)
		ok &= col[j] <= 1;

	int rxr = n;
	int cxc = m;
	for(auto x : cr) rxr -= x;
	for(auto x : cc) cxc -= x;

	ok &= ((rxr != 0) ^ (cxc != 0)) == 0;

	if(!ok) return puts("-1"), 0;

	const int dx[] = {-1, 1, 0, 0};
	const int dy[] = {0, 0, -1, 1};

	vector<vector<bool>> vis(n, vector<bool>(m));
	auto valid = [&](int x, int y){
		return x >= 0 && x < n && y >= 0 && y < m && a[x][y] == '#' && !vis[x][y];
	};
	int res = 0;
	for(int i = 0; i < n; ++i){
		for(int j = 0; j < m; ++j){
			if(!valid(i, j)) continue;
			queue<array<int, 2>> q;
			q.push({i, j});
			vis[i][j] = true;
			res++;
			while(!q.empty()){
				auto ar = q.front();
				q.pop();
				for(int k = 0; k < 4; ++k){
					int ii = ar[0] + dx[k];
					int jj = ar[1] + dy[k];
					if(valid(ii, jj)){
						vis[ii][jj] = true;
						q.push({ii, jj});
					}
				}
			}
		}
	}
	cout << res << endl;

	return 0;
}