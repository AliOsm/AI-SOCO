#include <bits/stdc++.h>

using namespace std;

void print_an(int x){
    if(x == 1) cout << "tokitsukaze";
    else if(x == 2) cout << "quailty";
    else cout << "once again";
    exit(0);
}

bool ok[100010];

int32_t main(){
    ios_base::sync_with_stdio(false);
    int n, k;
    string s;
    cin >> n >> k >> s;
    int le = 0, ri = 0;
    for(int i = k; i < n; i++){
        ri += s[i] - '0';
    }
    for(int i = 0; i + k <= n; i++){
        if(le == i && ri == n - k - i){
            print_an(1);
        }
        if(le == 0 && ri == 0){
            print_an(1);
        }
        if(i + k < n){
            le += s[i] - '0';
            ri -= s[i+k] - '0';
        }
    }

    vector<int> ones;
    for(int i = 0; i < n; i++){
        if(s[i] == '1') ones.push_back(i);
    }
    for(int i = 0; i + k <= n; i++){
        //0
        bool can_left = false;
        bool can_right = false;
        bool need_left = false;
        bool need_right = false;

        if(ones.size()){
            int ll1, lr1;
            ll1 = ones.front();
            if(ll1 >= i) can_left = true;
            else{
                need_left = true;
                lr1 = (int)(lower_bound(ones.begin(), ones.end(), i) - ones.begin()) - 1;
                lr1 = ones[lr1];
                int len = lr1 - ll1 + 1;
                if(len <= k) can_left = true;
            }
        }
        else can_left = true;

        if(ones.size()){
            int rl1, rr1;
            rr1 = ones.back();
            if(rr1 < i + k) can_right = true;
            else{
                need_right = true;
                rl1 = (int)(lower_bound(ones.begin(), ones.end(), i+k) - ones.begin());
                rl1 = ones[rl1];
                int len = rr1 - rl1 + 1;
                if(len <= k) can_right = true;
            }
        }
        else can_right = true;

        bool curok = true;

        if(need_left && !can_left) curok = false;
        if(need_right && !can_right) curok = false;
        if(need_left && need_right) curok = false;

        ok[i] = curok;
    }

    ones.clear();
    for(int i = 0; i < n; i++){
        if(s[i] == '0') ones.push_back(i);
    }
    for(int i = 0; i + k <= n; i++){
        //0
        bool can_left = false;
        bool can_right = false;
        bool need_left = false;
        bool need_right = false;

        if(ones.size()){
            int ll1, lr1;
            ll1 = ones.front();
            if(ll1 >= i) can_left = true;
            else{
                need_left = true;
                lr1 = (int)(lower_bound(ones.begin(), ones.end(), i) - ones.begin()) - 1;
                lr1 = ones[lr1];
                int len = lr1 - ll1 + 1;
                if(len <= k) can_left = true;
            }
        }
        else can_left = true;

        if(ones.size()){
            int rl1, rr1;
            rr1 = ones.back();
            if(rr1 < i + k) can_right = true;
            else{
                need_right = true;
                rl1 = (int)(lower_bound(ones.begin(), ones.end(), i+k) - ones.begin());
                rl1 = ones[rl1];
                int len = rr1 - rl1 + 1;
                if(len <= k) can_right = true;
            }
        }
        else can_right = true;

        bool curok = true;

        if(need_left && !can_left) curok = false;
        if(need_right && !can_right) curok = false;
        if(need_left && need_right) curok = false;

        if(!(ok[i] & curok)){
            print_an(0);
        }
    }

    print_an(2);
    return 0;
}
