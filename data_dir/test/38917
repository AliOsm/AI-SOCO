#include <cstring>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
#include <climits>
#include <cctype>
#include <bitset>
#include <list>
#include <fstream>

using namespace std;

#define all(v)              ((v).begin()), ((v).end())
#define allr(v)             ((v).rbegin()), ((v).rend())
#define sz(v)               ((int)((v).size()))
#define clr(v, d)           memset(v, d, sizeof(v))
#define MP                  make_pair
#define lpv(i, v)           for(int i=0;i<sz(v);++i)
#define lpn(i, n)           for(int i=0;i<(int)(n);++i)
#define ss 	                second
#define ff  	            first


typedef unsigned long long          ull;
typedef long long                   ll;
typedef long double                 LD;
typedef vector<int>                 vi;
typedef vector<ll>                  vl;

ll suf(ll a){ return (a*(a + 1)) / 2; }
const ll  OO = 1e14, MOD = 1e9 + 7, SIZE = 1e5;
vector<vector<int> >adj, can;

int dx[]{1, -1, 0, 0, 1, -1, 1, -1};
int dy[]{0, 0, 1, -1, 1, -1, -1, 1};


int main()
{
	int n;
	while (cin >> n){
		vector<ll>v(n + 2) , OP;
		int idx = -1;
		v[0] = INT_MAX;
		v[n + 1] = ((n + 1) % 2 == 0 ? INT_MAX : INT_MIN);
		for (int i = 1; i <= n; i++){
			cin >> v[i];
		}
		for (int i = 1; i <= n; i++){
			if (i & 1){
				if (!(v[i] < v[i - 1] && v[i] < v[i + 1]))
					OP.push_back(i);
			}
			else{
				if (!(v[i] > v[i - 1] && v[i] > v[i + 1]))
					OP.push_back(i);
			}
		}
		if (OP.size() >= 10) cout << "0" << endl;
		else{
			ll ans = 0;
			map<pair<int, int>, bool>mp;
			for (int k = 0; k < OP.size(); k++){
				idx = OP[k];
				for (int i = 1; i <= n; i++){
					swap(v[idx], v[i]);
					OP.push_back(i);
					bool ok = true;
					for (int j = 0; j < OP.size() && ok; j++) {
						if (OP[j] & 1){
							if (v[OP[j]] >= v[OP[j] - 1] || v[OP[j]] >= v[OP[j] + 1])
								ok = false;
						}
						else{
							if (v[OP[j]] <= v[OP[j] - 1] || v[OP[j]] <= v[OP[j] + 1])
								ok = false;
						}
					}
					OP.pop_back();
					swap(v[idx], v[i]);
					if (ok &&mp[{max(idx, i), min(idx, i)}] == false) mp[{max(idx, i), min(idx, i)}] = true, ans += ok;
				}
			}
			cout << ans << endl;
		}
	}
	
	return 0;
}


