#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%Ld"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
#include <utility>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
typedef complex<double> point;
#define EPS 1E-9
#define INF 1000000000
#define pi 3.141592653589793238462643
#define x real()
#define y imag()
double det(double a , double b , double c , double d){
  return a*d - b*c;
}
point intersect(point c1 , point v1 , point c2 , point v2){
  double zdet = det(v1.x , -v2.x , v1.y , -v2.y);
  double cdet = det(c2.x - c1.x , -v2.x , c2.y - c1.y , -v2.y);
  if(fabs(zdet) < EPS)return point(INF , INF);
  return c1 + (cdet / zdet)*v1;
}
double vp(point f , point s){
  return f.x * s.y - f.y * s.x;
}
int sgn(double w){
  return fabs(w) < EPS ? 0 : (w>0 ? 1 : -1);
}
bool EQ(point f , point s){
  return fabs(f.x - s.x)<EPS && fabs(f.y - s.y)<EPS;
}
bool between(point f , point t , point w){
  return min(f.x , t.x)-EPS < w.x && w.x < max(f.x , t.x)+EPS &&
         min(f.y , t.y)-EPS < w.y && w.y < max(f.y , t.y)+EPS;
}
vector<point> rect;
void cut(point pf , point pt){
  if(rect.empty())return;
  rect.pb(rect[0]);
  vector<point> T;
  for(int i=1;i<sz(rect);++i){
   T.pb(rect[i-1]);
   point P = intersect(pf , pt-pf , rect[i-1] , rect[i]-rect[i-1]);
   if(P.x == INF)continue;
   if(between(rect[i-1] , rect[i] , P) && !EQ(P , rect[i-1]) && !EQ(P , rect[i]))
    T.pb(P);
                             }
  rect.clear();
  for(int i=0;i<sz(T);++i){
   if(sgn(vp((pt - pf) / abs(pt-pf) , T[i] - pf)) >= 0)
    rect.pb(T[i]);
                          }
}
int main(){
  double W , H , A;
  cin>>W>>H>>A;
  A = A / 180 * pi;
  rect.pb( point(-W/2 , -H/2) ),
  rect.pb( point(W/2 , -H/2) ),
  rect.pb( point(W/2 , H/2) ),
  rect.pb( point(-W/2 , H/2) );
  vector<point> R1;
  for(int i=0;i<4;++i)
   R1.pb( rect[i] * polar(1.0 , A) );
  R1.pb(R1[0]);
  for(int i=1;i<sz(R1);++i){
   cut(R1[i-1] , R1[i]);
                           }
  double S = 0;
  if(!rect.empty()){
   rect.pb(rect[0]);
   for(int i=1;i<sz(rect);++i)
    S += (rect[i].x - rect[i-1].x) * (rect[i].y + rect[i-1].y);
                   }
  S /= 2;
  S = fabs(S);
  printf("%.12lf\n" , S);
  return 0;
}
