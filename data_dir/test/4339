#include <bits/stdc++.h>
 
#define ll long long
#define rep(i, l, r) for (int i = l; i < r; i++)
#define sz(a) (int)a.size()
#define fi first
#define se second
 
using namespace std;
 
const int N = 300000;
const int inf = (int)1e9 + 1;
 
vector<pair<int, int> > g1[N];
int g[N][26];
vector<int> height[N];
int mh = 0;
 
int dfs1(vector<int> &u)
{
    vector<int> x[26];
    for (int i : u)
        rep(j, 0, 26)
            if (g[i][j] != -1)
                x[j].push_back(g[i][j]);
    int cnt = 0;
    rep(j, 0, 26)
        if (sz(x[j]) > 1)
        {
            cnt += sz(x[j]) - 1;
            cnt += dfs1(x[j]);
        }
    return cnt;
}
 
void dfs(int u, int p, int h)
{
    mh = max(mh, h);
    height[h].push_back(u);
    for (auto v : g1[u])
        if (v.fi != p)
        {
            g[u][v.se] = v.fi;
            dfs(v.fi, u, h + 1);
        }
}
 
int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n;
    cin >> n;
    rep(i, 0, n)
        fill(g[i], g[i] + 26, -1);
    rep(i, 0, n - 1)
    {
        int u, v;
        char c;
        cin >> u >> v >> c;
        u--; v--;
        g1[u].push_back({v, c - 'a'});
        g1[v].push_back({u, c - 'a'});
    }
    dfs(0, -1, 0);
    int res = -1, ans = -1;
    rep(h, 1, mh + 1)
    {
        int cnt = sz(height[h]);
        vector<int> u;
        for (int i : height[h - 1])
        {
            u.clear();
            rep(j, 0, 26)
                if (g[i][j] != -1)
                    u.push_back(g[i][j]);
            if (sz(u) > 1)
                cnt += dfs1(u);
        }
        if (cnt > res)
        {
            res = cnt;
            ans = h;
        }
    }
    cout << n - res << endl << ans << endl;
    return 0;
}