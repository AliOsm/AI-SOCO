#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcount(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

const int OO = (int) 2e9;
const double eps = 1e-9;
const int mod = (int) 1e9 + 9;

int n;
pii arr[100005];
map<pii, int> Rank;
set<pii> S;
set<int> FreeSet;

bool isFree(pii p) {
    for (int i = -1; i < 2; i++) {
        if (S.find(mp(p.first + i, p.second + 1)) != S.end()) {
            int cnt = 0;
            for (int j = -1; j < 2; j++) {
                if (S.find(mp(p.first + i + j, p.second)) != S.end())
                    cnt++;
            }
            if (cnt == 1)
                return 0;
        }
    }
    return 1;
}

void update(int cur) {
    FreeSet.erase(cur);
    S.erase(arr[cur]);
    pii p = arr[cur];
    for (int i = -1; i < 2; i++) {
        for (int j = -2; j < 3; j++) {
            if (i || j) {
                if (S.find(mp(p.first + j, p.second + i)) != S.end()) {
                    if (isFree(mp(p.first + j, p.second + i)))
                        FreeSet.insert(Rank[mp(p.first + j, p.second + i)]);
                    else
                        FreeSet.erase(Rank[mp(p.first + j, p.second + i)]);
                }
            }
        }
    }
}

int main() {
    std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
#ifndef ONLINE_JUDGE
//  freopen("in.txt", "rt", stdin);
//  freopen("out.txt", "wt", stdout);
#endif
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> arr[i].first >> arr[i].second;
        Rank[arr[i]] = i;
        S.insert(arr[i]);
    }
    for (int i = 0; i < n; i++) {
        if (isFree(arr[i]))
            FreeSet.insert(i);
    }
    ll res = 0;
    for (int i = 0; i < n; i++) {
        if (i & 1) {
            int cur = *FreeSet.begin();
            res = (res * n + cur) % mod;
            update(cur);
        } else {
            int cur = *--FreeSet.end();
            res = (res * n + cur) % mod;
            update(cur);
        }
    }
    cout << res << endl;
    return 0;
}