#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     (_obj).begin(), (_obj).end()
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define ceilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define has(_obj, _val)               ((_obj).find(_val) != (_obj).end())
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifdef SHJ_LOCAL
    #define debug(_x)                 std::cerr << (#_x) << " = " << (_x) << '\n'; std::cerr.flush();
#else
    #define debug(_x)                 ;
#endif
#define endl                          "\n"
template<typename Tp>
inline void outarr(Tp _array, const std::size_t _N, const char* _delim = " ") {
    Tp end = std::next(_array, _N);
    for (Tp current = _array; current != end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = int64_t;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
const int scoreA[6] = {3, 3, 3, 2, 1, 0};
const int scoreB[6] = {0, 1, 2, 3, 3, 3};
pii dp[4][4][201][201];

void PreCalc() {
    dp[0][0][0][0] = {1, 0};
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            int maxScore = i + j < 4 ? 25 : 15;
            for (int a = 0; a <= 200; ++a) {
                for (int b = 0; b <= 200; ++b) {
                    if (dp[i][j][a][b].first == 0 && dp[i][j][a][b].second == 0) {
                        continue;
                    }
                    for (int x = 0; a + x <= 200; ++x) {
                        if (int y = max(maxScore, x + 2); y + b <= 200) {
                            dp[i][j + 1][a + x][b + y] = {x, y};
                        } else {
                            break;
                        }
                    }
                    for (int x = 0; b + x <= 200; ++x) {
                        if (int y = max(maxScore, x + 2); y + a <= 200) {
                            dp[i + 1][j][a + y][b + x] = {y, x};
                        } else {
                            break;
                        }
                    }
                }
            }
        }
    }
}

bool HAS_ANS = false;
pii ans[5];

void GetAns(int i, int a, int b) {
    HAS_ANS = true;
    cout << scoreA[i] << ':' << scoreB[i] << endl;
    for (int sa = scoreA[i], sb = scoreB[i]; a + b > 0;) {
        auto [x, y] = dp[sa][sb][a][b];
        ans[sa + sb - 1] = {x, y};
        a -= x;
        b -= y;
        if (x > y) {
            --sa;
        } else {
            --sb;
        }
    }
    for (int j = 0; j < scoreA[i] + scoreB[i]; ++j) {
        cout << ans[j].first << ':' << ans[j].second << ' ';
    }
    cout << endl;
}

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    PreCalc();
    int m;
    cin >> m;
    while (m--) {
        HAS_ANS = false;
        int a, b;
        cin >> a >> b;
        loop(6) {
            if (dp[scoreA[i]][scoreB[i]][a][b].first > 0 || dp[scoreA[i]][scoreB[i]][a][b].second > 0) {
                GetAns(i, a, b);
                break;
            }
        }
        if (!HAS_ANS) {
            cout << "Impossible" endl;
        }
    }

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}