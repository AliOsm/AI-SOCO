#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ll, pll> p3l;
typedef pair<char, ll> pcl;
typedef vector<char> vc;
typedef vector<ll> vll;
typedef vector<pll> vpll;
typedef vector<p3l> vp3l;
typedef vector<vll> vvll;
typedef vector<ld> vld;

const ll MOD = (int) 1000000007;

#define fan(i, a, n) for(ll i=a; i<n; ++i)
#define boost ios_base::sync_with_stdio(0);cout.tie(0);cin.tie(0)
#define fna(i, n, a) for(ll i=n-1; i>=a; --i)
#define fit(it, x) for(auto &it:x)
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
#define pb push_back
#define rs resize
#define fst first
#define snd second
#define sz size
#define ins insert
#define ce cout << "\n"

//ll gcd(ll a, ll b) {
//  if (b == 0)
//    return a;
//  else
//    return gcd(b, a % b);
//}
//
//ld sqr(ld a) {
//  return a * a;
//}
//
//ll m = MOD;
//ll mulmod(ll a, ll b) {
//  a %= m;
//  if (b == 0)return 1;
//  if (b % 2 == 0) {
//    return mulmod((a * a) % m, b / 2) % m;
//  } else {
//    return (mulmod((a * a) % m, b / 2) % m * a) % m;
//  }
//}
//
//ll slv(multiset<ll> a,ll st){
//  ll ans = 0;
//  while(true){
//    auto it = a.lower_bound(st);
//    if(it == a.end())break;
//    ans+=st;
//    st*=2;
//    a.erase(it);
//  }
//  return ans;
//}
//ld a,b,c;
//ld x1,y1,x2,y2;
//ld dst(){
//
//}

ll m = MOD;
ll mulmod(ll a, ll b) {
  a %= m;
  if (b == 0)return 0;
  if (b % 2 == 0) {
    return mulmod((a + a) % m, b / 2) % m;
  } else {
    return (mulmod((a + a) % m, b / 2) % m + a) % m;
  }
}

//ll mulm(ll a, ll b) {
//  return ((a % MOD) * (b % MOD)) % MOD;
//}

int main() {
  boost;
  ll n, x, y, ans = 0;
  cin >> n >> x >> y;
  vpll a(n);
  vector<pair<pll, ll>> ev;
  fit(it, a) {
    cin >> it.fst >> it.snd;
    ev.pb({{it.fst,-1}, it.snd});
    ev.pb({{it.snd, 1}, it.fst});
  }
  sort(all(ev));
  multiset<ll> t;
  fit(it, ev) {
    if (it.fst.snd == -1) {
      auto k = t.upper_bound(it.fst.fst);
      if (k != t.begin()) {
        --k;
        ll c = it.fst.fst - *k + 1;
        if (c * y < x) {
          t.erase(k);
        }
        ans += min(x, c * y);
        ans%=MOD;
      } else {
        ans += x;
        ans%=MOD;
      }
    } else {
      ans += mulmod(y , (it.fst.fst - it.snd));
      ans%=MOD;
      t.ins(it.fst.fst + 1);
    }
  }
  cout << ans;

  return 0;
}