#include <bits/stdc++.h>
#ifdef DEMETRIO
#define deb(...) fprintf(stderr,__VA_ARGS__)
#define deb1(x) cerr << #x << " = " << x << endl
#else
#define deb(...) 0
#define deb1(x) 0
#endif
#define pb push_back
#define mp make_pair
#define fst first
#define snd second
#define fore(i,a,b) for(int i=a,ThxDem=b;i<ThxDem;++i)
#define SZ(x) ((int)(x).size())
#define mset(a,v) memset(a,v,sizeof(a))
#define mcopy(a,b) memcpy(a,b,sizeof(a))
using namespace std;
typedef long long ll;

#define EPS 1e-7

struct pt {
	double x,y;
	pt(double x, double y):x(x),y(y){}
	pt(){}
	double norm2(){return *this**this;}
	double norm(){return sqrt(norm2());}
	bool operator==(const pt& p)const{return abs(x-p.x)<EPS&&abs(y-p.y)<EPS;}
	pt operator+(pt p){return pt(x+p.x,y+p.y);}
	pt operator-(pt p){return pt(x-p.x,y-p.y);}
	pt operator*(double t){return pt(x*t,y*t);}
	pt operator/(double t){return pt(x/t,y/t);}
	double operator*(pt p){return x*p.x+y*p.y;}
	pt unit(){return *this/norm();}
	double operator%(pt p){return x*p.y-y*p.x;}
	bool operator<(const pt& p)const{
		return x<p.x-EPS||(abs(x-p.x)<EPS&&y<p.y-EPS);}
	bool left(pt p, pt q){
		return (q-p)%(*this-p)>EPS;}
	pt rot(pt r){return pt(*this%r,*this*r);}
	pt rot(double a){return rot(pt(sin(a),cos(a)));}
	void in(){scanf("%lf%lf",&x,&y);}
};
pt ccw90(1,0);
pt cw90(-1,0);


struct circle {
	pt o;double r;
	circle(pt o, double r):o(o),r(r){}
	circle(){}
	bool has(pt p){return abs((o-p).norm()-r)<EPS;}
	vector<pt> operator^(circle c){
		vector<pt> s;
		double d=(o-c.o).norm();
		if(d>r+c.r+EPS||d+min(r,c.r)+EPS<max(r,c.r))return s;
		double x=(d*d-c.r*c.r+r*r)/(2*d);
		double y=sqrt(r*r-x*x);
		pt v=(c.o-o)/d;
		s.pb(o+v*x-v.rot(ccw90)*y);
		if(y>EPS)s.pb(o+v*x+v.rot(ccw90)*y);
		return s;
	}
	void in(){o.in();scanf("%lf",&r);}
	bool operator <(const circle& c)const{
		return o<c.o||o==c.o&&r+EPS<c.r;
	}
};

set<circle> sc;
vector<circle> c;
int n;
set<pt> p;
vector<pt> qwe[3];

void doit2(circle c0, circle c1){
	auto v=c0^c1;
	if(SZ(v)<2)puts("4");
	else puts("5");
}

int main(){
	scanf("%d",&n);
	fore(i,0,n){
		circle asd;
		asd.in();
		sc.insert(asd);
	}
	c=vector<circle>(sc.begin(),sc.end());n=SZ(c);
	if(n==1){puts("2");return 0;}
	if(n==2){puts(SZ(c[0]^c[1])==2?"4":"3");return 0;}
	auto v01=c[0]^c[1];
	auto v12=c[1]^c[2];
	auto v02=c[0]^c[2];
	//if(SZ(v01)==2&&SZ(v12)==2&&SZ(v02)==2){
	//	if(c2.has(v01[0])||c2.has(v01[1]))puts("7");
	//	else puts("8");
	//	return 0;
	//}
	if(SZ(v01)==0&&SZ(v02)==0){doit2(c[1],c[2]);return 0;}
	if(SZ(v12)==0&&SZ(v01)==0){doit2(c[0],c[2]);return 0;}
	if(SZ(v02)==0&&SZ(v12)==0){doit2(c[0],c[1]);return 0;}
	for(auto q:v01)p.insert(q);
	for(auto q:v12)p.insert(q);
	for(auto q:v02)p.insert(q);
	//printf(" %d\n",SZ(p));
	int r=2-SZ(p);
	/*
	if(SZ(v01)==2)r+=2;
	if(SZ(v12)==2)r+=2;
	if(SZ(v02)==2)r+=2;
	*/
	qwe[0]=v12;
	qwe[1]=v02;
	qwe[2]=v01;
	fore(i,0,3){
		set<pt> z;
		fore(j,0,3)if(j!=i)for(auto q:qwe[j])z.insert(q);
		r+=SZ(z);
	}
	printf("%d\n",r);
	return 0;
}




