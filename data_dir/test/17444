#include <vector>
#include <list>
#include <map>
#include <unordered_set>
#include <deque>
#include <stack>
#include <algorithm>
#include <functional>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <tuple>
#include <set>
#include <iostream>
#define MAXN 1000000
#define ll long long

using namespace std;

// 1...l-1,r+1,...x

int minn[MAXN+2];
int maxx[MAXN+2];
int max_end[MAXN+2];
int min_start[MAXN+2];


int A[MAXN+2];
int BruteForce(int n,int x) {
    
    int ans=0;
    for(int l=1;l<=x;l++)
        for(int r=l;r<=x;r++) {
            vector<int> rem;
            for(int i=1;i<=n;i++) {
                if (A[i]<l || A[i]>r) {
                    rem.push_back(A[i]);
                }
            }
            bool ok=true;
            for(int i=1;i<rem.size();i++) {
                if (rem[i]<rem[i-1]) {
                    ok=false;
                }
            }
            if (ok)  {
                printf("%d,%d\n",l,r);
                ans++;
            }
        }
    return ans;
    
}

int main() {
    int n,x;
    cin>>n>>x;
    for(int i=1;i<=x;i++)
        minn[i]=maxx[i]=-1;
    for(int i=1;i<=n;i++) {
        int v;
        cin>>v;
        //v=rand()%x+1;
        A[i]=v;
        if (minn[v]==-1)
            minn[v]=i;
        maxx[v]=i;
    }
    /*
    for(int i=1;i<=n;i++)
        printf("%d ",A[i]);
    cout << endl;
     */
    //cout << BruteForce(n,x) << endl;
    

    int prev_end = 0;
    
    max_end[0]=0;
    int maxl=0;
    for(int l=1;l<=x;l++) {
        if (minn[l]==-1) {
            maxl=l;
            max_end[l]=max_end[l-1];
            continue;
        }
        if (minn[l]<prev_end) {
            break;
        }
        maxl=l;
        max_end[l]=maxx[l];
        prev_end = max_end[l];
        //printf("l=%d :: %d\n",l,max_end[l]);
    }
    
    int prev_begin = n+1;
    min_start[x+1]=n+1;
    int minr=x+1;
    for(int r=x;r>=1;r--) {
        if (maxx[r]==-1) {
            minr=r;
            min_start[r]=min_start[r+1];
            continue;
        }
        if (maxx[r]>prev_begin)
            break;
        minr=r;
        min_start[r]=minn[r];
        prev_begin = min_start[r];
        //printf("r=%d :: %d\n",r,min_start[r]);

    }
    
    ll ans = 0;
    int currrp1 = minr;
    //cout << minr << endl;
    
    for(int l=1;l<=x;l++) {
        
        // 1 to l-1
        // find all r+1 such that min_start[r+1] > max_end[l-1]
        
        if (l-1 > maxl)
            break;
        
        int reqd = max_end[l-1];
        //cout << currrp1 << endl;
        while(min_start[currrp1] <= max_end[l-1] || currrp1 < max(minr, l+1)) {
            currrp1++;
        }
        
        //printf("me=%d %d vs %d\n",max_end[l-1],currrp1,x+1);
        
        ans += x-currrp1+2;
        
        /*
        for(int rp1=max(minr,l+1);rp1<=x+1;rp1++) {
            if (min_start[rp1] > max_end[l-1]) {
                ans++;
            }
        }
         */
        
        
    }
    cout << ans << endl;
    
    
}
