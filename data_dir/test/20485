#include <bits/stdc++.h>

using namespace std;

const int inf  = 1e9;

const int lim = 3;



int n, m;
vector<int> a;
vector<int> cnt;

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    
    #ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    cin >> n >> m;
    a.resize(n);
    for (auto &t : a) {
        cin >> t;
        t--;
    }
    cnt.resize(m);
    for (auto &t : a) {
        cnt[t]++;
    }
    if (m == 1) {
        cout << cnt[0] / 3;
        return 0;
    }
    if (m == 2) {
        cout << cnt[0] / 3 + cnt[1] / 3;
        return 0;
    }
    int dp[m][lim][lim][lim];

    for (int i = 0; i < m; i++) {
        for (int c1 = 0; c1 < lim; c1++) {
            for (int c2 = 0; c2 < lim; c2++) {
                for (int c3 = 0; c3 < lim; c3++) {
                    dp[i][c1][c2][c3] = -inf;
                }
            }
        }
    }
    //
    for (int c1 = 0; c1 < lim; c1++) {
        int w1 = cnt[0] - c1;
        int w2 = cnt[1] - c1;
        int w3 = cnt[2] - c1;
        if (w1 >= 0 && w2 >= 0 && w3 >= 0) {
            dp[0][0][0][c1] = w1 / 3 + c1;
//            cerr << w1 / 3 + c1 << endl;
        }
    }
    //
    for (int i = 0; i + 1 < m; i++) {
        for (int c1 = 0; c1 < lim; c1++) {
            for (int c2 = 0; c2 < lim; c2++) {
                for (int c3 = 0; c3 < lim; c3++) {
                    if (dp[i][c1][c2][c3] == -inf) {
                        continue;
                    }
                    for (int c4 = 0; c4 < lim; c4++) {
                        int i_1 = cnt[i + 1] - c2 - c3 - c4;
                        int i_2 = 0;
                        if (i + 2 < m) {
                            i_2 = cnt[i + 2] - c3 - c4;
                        } else if (c3 || c4) {
                            continue;
                        }
                        int i_3 = 0;
                        if (i + 3 < m) {
                            i_3 = cnt[i + 3] - c4;
                        } else if (c4) {
                            continue;
                        }
                        if (i_1 >= 0 && i_2 >= 0 && i_3 >= 0) {
                            int cur = dp[i][c1][c2][c3] + i_1 / lim + c4;
                            dp[i + 1][c2][c3][c4] = max(dp[i + 1][c2][c3][c4], cur);
                        }
                    }
                }
            }
        }
    }
    int ans = -inf;
    //
    for (int c1 = 0; c1 < lim; c1++) {
        ans = max(ans, dp[m - 1][c1][0][0]);
    }
    cout << ans;
}
