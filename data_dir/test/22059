#pragma comment(linker, "/STACK:256000000")

#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <time.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <random>
#include <bitset>
#include <unordered_set>
#include <unordered_map>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<int, int64> pil;
const int INF = (int)(1e9 + 1e5);
const int64 LINF = (int64)(1e18);
const int64 MX = 100500;
const double EPS = 1e-9;
#define sq(x) ((x)*(x))
#define FAIL() (*(int*)(0))++
#define ASSERT(exp) {if (!(exp)) exit(0);}
#ifdef _MY_DEBUG
#define I64d lld
#endif
const int MOD = 1000000007;
const int ROOT = 700;
const int PRM_ROOT = 5;
const int LOG = 30;

const int MAXN = 300005;

struct node
{
    int cnt;
    int nxt[2];
};

int n;
int a[MAXN], p[MAXN];
//pii pref_a[LOG][MAXN], pref_p[LOG][MAXN];
//bool busy_a[MAXN], busy_p[MAXN];
vector<int> ans;
node tre[MAXN * LOG];
int v_count;

void init()
{
    scanf ("%d", &n);
    for (int i = 1; i <= n; ++i)
    {
        scanf ("%d", &a[i]);
    }
    for (int i = 1; i <= n; ++i)
    {
        scanf ("%d", &p[i]);
    }
}

/*void fill(int a[], pii p[][MAXN])
{
    for (int i = 1; i <= n; ++i)
    {
        int pref = 0;
        for (int j = 0; j < LOG; ++j)
        {
            pref |= (a[i] & (1 << j));
            p[j][i] = pii(pref, i);
        }
    }
    for (int j = 0; j < LOG; ++j)
    {
        sort(p[j] + 1, p[j] + n + 1);
    }
}

void process()
{
    for (int j = 0; j < LOG; ++j)
    {
        int qa_l = 1, qp_l = 1;
        while (qa_l <= n && qp_l <= n)
        {
            if (pref_a[j][qa_l].first != pref_p[j][qp_l].first)
            {
                if (pref_a[j][qa_l].first < pref_p[j][qp_l].first)
                {
                    ++qa_l;
                }
                else
                {
                    ++qp_l;
                }
            }
            else
            {
                int qa_r = qa_l, qp_r = qp_l;
                while (qa_r < n && pref_a[j][qa_r + 1].first == pref_a[j][qa_r].first)
                {
                    ++qa_r;
                }
                while (qp_r < n && pref_p[j][qp_r + 1].first == pref_p[j][qp_r].first)
                {
                    ++qp_r;
                }
                vector <int> free_a, free_p;
                for (int i = qa_l; i <= qa_r; ++i)
                {
                    int num = pref_a[j][i].second;
                    if (!busy_a[num])
                    {
                        free_a.push_back(num);
                    }
                }
                for (int i = qp_l; i <= qp_r; ++i)
                {
                    int num = pref_p[j][i].second;
                    if (!busy_p[num])
                    {
                        free_p.push_back(num);
                    }
                }
                int size = min(free_a.size(), free_p.size());
                for (int i = 0; i < size; ++i)
                {
                    int num_a = free_a[i], num_p = free_p[i];
                    busy_a[num_a] = true;
                    busy_p[num_p] = true;
                    ans.push_back(a[num_a] ^ p[num_p]);
                }
                qa_l = qa_r + 1;
                qp_l = qp_r + 1;
            }
        }
    }
}*/

int get_child(int v, int sym)
{
    if (!tre[v].nxt[sym])
    {
        tre[v].nxt[sym] = ++v_count;
    }
    return tre[v].nxt[sym];
}

void append(int val)
{
    int v = 0;
    for (int j = LOG - 1; j >= 0; --j)
    {
        int cur = (val >> j) & 1;
        int to = get_child(v, cur);
        v = to;
        ++tre[to].cnt;
    }
}

int get(int val)
{
    int v = 0;
    int res = 0;
    for (int j = LOG - 1; j >= 0; --j)
    {
        int cur = (val >> j) & 1;
        if (!tre[v].nxt[cur] || !tre[tre[v].nxt[cur]].cnt)
        {
            res ^= (1 << j);
            v = tre[v].nxt[cur ^ 1];
        }
        else
        {
            v = tre[v].nxt[cur];
        }
        --tre[v].cnt;
    }
    return res;
}

void solve()
{
    for (int i = 1; i <= n; ++i)
    {
        append(p[i]);
    }
    for (int i = 1; i <= n; ++i)
    {
        ans.push_back(get(a[i]));
    }
}

void print_answer()
{
    for (int i = 0; i < ans.size(); ++i)
    {
        printf("%d ", ans[i]);
    }
}

void run()
{
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#endif // _MY_DEBUG
    int t = 1; //scanf ("%d", &t);
    for (int i = 0; i < t; ++i)
    {
        init();
        solve();
        print_answer();
    }
}
int main()
{
    srand(90);
    ios_base::sync_with_stdio(false); cin.tie(0);
    //test();
    run();
    return 0;
}