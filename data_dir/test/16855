#include <bits/stdc++.h>
using namespace std;
const int N=600001;
int n;
char s[N];
int val[N];
int main() {
	scanf("%d%s",&n,s);
	for(int i=n;i<n+n;++i)
		s[i]=s[i-n];
	int o=0;
	set<pair<int,int> > q;
	int at=-1;
	for(int i=0;i<n+n;++i){
		o+=s[i]=='('?1:-1;
		q.insert({o,i});
		val[i]=o;
		if(i>=n-1){
			int st=i-n>=0?val[i-n]:0;
			if(q.begin()->first==st && o==st){
				at=i-n+1;
				break;
			}
			if(at==-1 && q.begin()->first==st-1 && o==st+1){
				auto A=*q.begin();
				q.erase(q.begin());
				if(q.begin()->first>=st)
					at=i-n+1;
				q.insert(A);
			}
			if(at==-1 && q.begin()->first==st-2 && o==st+2){
				auto A=*q.begin();
				q.erase(q.begin());
				if(q.begin()->first==st-1){
					auto B=*q.begin();
					q.erase(B);
					if(!q.empty() && q.begin()->first==st-1)
						at=i-n+1;
					q.insert(B);
				}
				q.insert(A);
			}
		}
	}
	if(n%2 || at==-1){
		puts("0");
		puts("1 1");
		return 0;
	}
	string cur="";
	for(int i=0;i<n;++i)
		cur+=s[(i+at)%n];
	int bad=-1;
	o=0;
	for(int i=0;i<n;++i){
		o+=cur[i]=='('?1:-1;
		if(o==-1){
			bad=i;
			cur[i]='(';
			break;
		}
	}
	int bad2=-1;
	o=0;
	for(int i=n-1;i>=0;--i){
		o+=cur[i]==')'?1:-1;
		if(o==-1){
			bad2=i;
			cur[i]=')';
			break;
		}
	}
	o=0;
	int res=0;
	for(int i=0;i<n;++i){
		o+=cur[i]=='('?1:-1;
		assert(o>=0);
		if(o==0)
			++res;
	}
	assert(o==0);
	if(bad!=-1){
		cout<<res<<endl;
		bad=(bad+n-at)%n;
		bad2=(bad2+n-at)%n;
		cout<<bad+1<<" "<<bad2+1<<endl;
		return 0;
	}
	int bs=res;
	bad=bad2=0;
	for(int it=0;it<2;++it){
		o=0;
		stack<pair<int,int> > s;
		for(int i=0;i<n;++i){
			if(cur[i]=='('){
				s.push({i,0});
				++o;
			}else{
				--o;
				int start=s.top().first;
				int me=s.top().second;
				s.pop();
				if(s.empty()){
					int curRes=me+1;
					if(res<curRes){
						res=curRes;
						bad=start;
						bad2=i;
						if(it){
							bad=n-bad-1;
							bad2=n-bad2-1;
						}
					}
				}
				if(s.size()==1){
					int curRes=bs+me+1;
					if(res<curRes){
						res=curRes;
						bad=start;
						bad2=i;
						if(it){
							bad=n-bad-1;
							bad2=n-bad2-1;
						}
					}
				}
if(!s.empty())++s.top().second;
			}
		}
		reverse(cur.begin(),cur.end());
		for(auto &x:cur)
			if(x=='(')
				x=')';
			else
				x='(';
	}
	cout<<res<<endl;
	bad=(bad+n+at)%n;
	bad2=(bad2+n+at)%n;
	cout<<bad+1<<" "<<bad2+1<<endl;
	return 0;
}