//Author - Rahil Malhotra
#include <bits/stdc++.h>
using namespace std;
 
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define int long long
#define endl "\n"

const int BLOCK_SIZE=300;
bool cmp(pair<pair<int,int>,int> p, pair<pair<int,int>,int> q) 
{
    if (p.first.first / BLOCK_SIZE != q.first.first / BLOCK_SIZE)
        return p < q;
    return (p.first.first / BLOCK_SIZE & 1) ? (p.first.second < q.first.second) : (p.first.second > q.first.second);
}
int n,m,k;
int arr[100002];
int brr[100002];
int mark[2000002];
int32_t main()
{
    IOS;
    cin>>n>>m>>k;
    int sp[n+2]={};
    for(int i=1;i<=n;i++)
    {
        cin>>arr[i];
        arr[i]^=arr[i-1];
    }
    vector<pair<pair<int,int>,int>>v;
    for(int i=0;i<m;i++)
    {
        int a,b;cin>>a>>b;
        v.push_back({{a,b},i});
    }
    int ans[m];
    sort(v.begin(),v.end(),cmp);
    int cur_l=1;
    int cur_r=0;
    int sum=0;
    mark[0]=1;
    for (auto i:v) 
    {
        while (cur_l > i.first.first) 
        {
            cur_l--;
            sum+=mark[arr[cur_l-1]^k];
            mark[arr[cur_l-1]]++;
        }
        while (cur_r < i.first.second) 
        {
            cur_r++;
            sum+=mark[arr[cur_r]^k];
            mark[arr[cur_r]]++;
        }
        while (cur_l < i.first.first) 
        {
            mark[arr[cur_l-1]]--;
            sum-=mark[arr[cur_l-1]^k];
            cur_l++;
        }
        while (cur_r > i.first.second) 
        {
            mark[arr[cur_r]]--;
            sum-=mark[arr[cur_r]^k];
            cur_r--;
        }
        ans[i.second]=sum;
    }
    for(int i:ans)
        cout<<i<<endl;
}   