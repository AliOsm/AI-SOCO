#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int n, a[600 * 600];
vector <int> ans;
vector <pii> v;
map <int, int> cnt;

void rec(int n) {
    if (n == 0) return;
    int mx = a[n - 1];
    int cnt = 0;
    while (n > 0 && a[n - 1] == mx) {
        cnt++;
        n--;
    }
    for (int i = 0; i < cnt; i++) ans.pb(mx);
    if (n == 0) return;
}

int main(){
    
    scanf("%d", &n);
    for (int i = 0; i < n * n; i++) {
        scanf("%d", a + i);
        cnt[a[i]]++;
    }
    
    sort(a, a + n * n);
    
    int sz = n * n;
    
    while (sz > 0) {
        int mx = a[sz - 1];
        int k = 0;
        while (sz > 0 && a[sz - 1] == mx) {
            sz--;
        }
        k = cnt[mx];
        if (k == 0) continue;
        int sigma = 0;
        for (int i = 0; i < sz(ans); i++) {
            sigma += (__gcd(mx, ans[i])==mx);
        }
        int t = 0;
        while (t * t + 2 * t * sigma < k) t++;
        for (int i = 0; i < sz(ans); i++) {
            int x = __gcd(ans[i], mx);
            cnt[x] -= 2 * t;
        }
        cnt[mx] -= t * t;
        for (int i = 0; i < t; i++) ans.pb(mx);
    }
    
    for (int i = 0; i < sz(ans); i++) {
        if (i) printf(" ");
        printf("%d", ans[i]);
    }
    printf("\n");
        
    return 0;
}
