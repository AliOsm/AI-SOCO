#include<bits/stdc++.h>
using namespace std;
#define ll long long int
vector<pair<ll,pair<ll,ll> > >vec;
vector<pair<ll,ll> >ad[100009],ad2[100009];
ll dis[100009],par[100009];
ll mx,n;
ll lev[100009];
queue<ll>qq;
priority_queue<pair<ll,ll> >pq;
ll p[100009][20];
ll v[100009][20];
void lca()
{
    par[1]=-1;
    memset(p,-1,sizeof(p));
    ll i,j;
    for(i=1;i<=n;i++)
    {
        p[i][0]=par[i];
        v[i][0]=dis[i];
    }
    for(j=1;(1<<j)<n;j++)
    {
        for(i=1;i<=n;i++)
        {
            if(p[i][j-1]!=-1)
            {
                p[i][j]=p[p[i][j-1]][j-1];
                v[i][j]=max(v[i][j-1],v[p[i][j-1]][j-1]);
            }
        }
    }
}
ll find_lca(ll a,ll b)
{
    if(lev[a]<lev[b])
    {
        swap(a,b);
    }
    ll x=0;
    ll i;
    for(i=17;i>=0;i--)
    {
        if(lev[a]-(1<<i)>=lev[b])
        {
            x=max(x,v[a][i]);
            a=p[a][i];
        }
    }
    if(a==b)
    {
        return x;
    }
    for(i=17;i>=0;i--)
    {
        if(p[a][i]!=-1 && p[a][i]!=p[b][i])
        {
            x=max(x,v[a][i]);
            a=p[a][i];
            x=max(x,v[b][i]);
            b=p[b][i];
        }
    }
    x=max(x,v[a][0]);
    x=max(x,v[b][0]);
    return x;
}
ll find_par(ll a)
{
    if(a==par[a])
    {
        return a;
    }
    return par[a]=find_par(par[a]);
}
int main()
{
    ll a,b,c,d,e,i,j,k,l,m,x,y,t,p,q,aa,bb;
    scanf("%lld%lld%lld%lld",&n,&m,&k,&q);
    for(i=0;i<m;i++)
    {
        scanf("%lld%lld%lld",&a,&b,&c);
        ad[a].push_back({c,b});
        ad[b].push_back({c,a});
        vec.push_back(make_pair(c,make_pair(a,b)));
    }
    mx=999999999999999999;
    for(i=1;i<=k;i++)
    {
        dis[i]=0;
        pq.push({0,i});
    }
    for(i=k+1;i<=n;i++)
    {
        dis[i]=mx;
    }
    while(!pq.empty())
    {
        c=-pq.top().first;
        a=pq.top().second;
        pq.pop();
        if(dis[a]<c)
        {
            continue;
        }
        l=ad[a].size();
        for(i=0;i<l;i++)
        {
            b=ad[a][i].second;
            d=ad[a][i].first;
            if(dis[b]>c+d)
            {
                dis[b]=c+d;
                pq.push({-dis[b],b});
            }
        }
    }
    /*for(i=1;i<=n;i++)
    {
        cout<<dis[i]<<endl;
    }*/
    for(i=0;i<m;i++)
    {
        a=vec[i].second.first;
        b=vec[i].second.second;
        vec[i].first+=dis[a]+dis[b];
    }
    sort(vec.begin(),vec.end());
    for(i=1;i<=n;i++)
    {
        par[i]=i;

    }
    for(i=0;i<m;i++)
    {
        aa=vec[i].second.first;
        bb=vec[i].second.second;
        a=find_par(aa);
        b=find_par(bb);
        if(a!=b)
        {
            par[a]=b;
            c=vec[i].first;
            ad2[aa].push_back({bb,c});
            ad2[bb].push_back({aa,c});
        }
    }
    memset(par,-1,sizeof(par));
    lev[1]=0;
    par[1]=1;
    dis[1]=0;
    qq.push(1);
    while(!qq.empty())
    {
        a=qq.front();
        qq.pop();
        l=ad2[a].size();
        for(i=0;i<l;i++)
        {
            b=ad2[a][i].first;
            if(par[b]==-1)
            {
                par[b]=a;
                lev[b]=lev[a]+1;
                dis[b]=ad2[a][i].second;
                qq.push(b);
            }
        }
    }
    lca();
    for(i=0;i<q;i++)
    {
        scanf("%lld%lld",&a,&b);
        x=find_lca(a,b);
        printf("%lld\n",x);
    }

}
