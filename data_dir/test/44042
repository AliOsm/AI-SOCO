#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef long double ld;

vector<vector<int>> tree;
vector<int> colors;
map<pair<int, int>, int> Dp;
bool Mark[100005];

int solve(int node, int parent)
{
    Mark[node] = true;
    if(Dp.find({node, parent}) != Dp.end())
        return Dp[{node, parent}];
    int &ans = Dp[{node, parent}];
    for(auto x: tree[node])
    {
        if(Mark[x])
            continue;
        int ret = solve(x, node);
        if(ret == 0)
            return ans = 0;
        if(ans == 0)
            ans = ret;
        else if(ans != ret && parent != -1)
            return ans = 0;
    }
    if(parent == -1)
        return ans = colors[node];
    else
    {
        if(colors[node] == ans || ans == 0)
            return ans = colors[node];
        else
            return ans = 0;
    }
}

int main()
{
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    int n;
    cin >> n;
    tree.resize(n);
    colors.resize(n);
    for(int i = 0; i < n - 1; i++)
    {
        int a, b;
        cin >> a >> b;
        a--;
        b--;
        tree[a].push_back(b);
        tree[b].push_back(a);
    }
    for(int i = 0; i < n; i++)
    {
        cin >> colors[i];
    }
    for(int i = 0; i < n; i++)
    {
        memset(Mark, 0, sizeof(Mark));
        if(solve(i, -1) != 0)
        {
            cout << "YES\n" << i + 1;
            return 0;
        }
    }
    cout << "NO";
    return 0;
}
