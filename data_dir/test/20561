#pragma comment(linker, "/stack:20000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>

//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/detail/standard_policies.hpp>

#define f first
#define s second

#define pb push_back
#define pp pop_back
#define mp make_pair

#define sz(x) (int)x.size()
#define sqr(x) ((x) * 1ll * (x))
#define all(x) x.begin(), x.end()

#define rep(i, l, r) for (int i = l; i <= r; i++)
#define per(i, l, r) for (int i = l; i >= r; i--)

#define dbg(x) cerr << (#x) << " --> " << (x) << nl;
#define Kazakhstan ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);

#define nl '\n'
#define ioi exit(0);

#define Toktama ""

using namespace std;
//using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
//typedef tree < pair <int, int>, null_type, less < pair <int, int> >, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int N = 2e5 + 7, inf = 1e9 + 7, mod = 1e9 + 7;
const ll linf = (ll)1e18 + 7;
const int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1}, dy[] = {0, 1, 0, -1, 1, -1, 1, -1};

int get_int() {
  char x = getchar();
  bool mns = 0;
  while (!isdigit(x)) mns |= x == '-', x = getchar();
  int res = 0;
  while (isdigit(x)) res = res * 10 + x - '0', x = getchar();
  if (mns) res = -res;
  return res;
}
void add(int &x, int y) {
  x += y;
  if (x >= mod) x -= mod;
  if (x < 0) x += mod;
}
int mult(int x, int y) {
  return x * 1ll * y % mod;
}
int sum(int x, int y) {
  add(x, y);
  return x;
}

int n, m;
vector <int> g[N];

struct SuperMegaUltraEpicDataStructure {
  int tmr;
  int tin[N], tout[N], up[N][20], lvl[N];
  void dfs(int v = 1, int p = 0) {
    tin[v] = ++tmr;
    up[v][0] = p;
    lvl[v] = lvl[p] + 1;
    rep(i, 1, 19) {
      if (up[v][i - 1]) up[v][i] = up[up[v][i - 1]][i - 1];
      else break;
    }
    for (auto to : g[v])
      if (!tin[to]) dfs(to, v);
    tout[v] = tmr;
  }
  bool upper(int x, int y) {
    return tin[x] <= tin[y] && tout[y] <= tout[x];
  }
  int lca(int x, int y) {
    if (upper(x, y)) return x;
    if (upper(y, x)) return y;
    per(i, 19, 0)
      if (up[x][i] && !upper(up[x][i], y))
        x = up[x][i];
    return up[x][0];
  }
  int get(int x, int y) {
    int batya = lca(x, y);
    return lvl[x] + lvl[y] - lvl[batya] * 2;
  }
  void build() {
    dfs();
  }
} t;
struct SuperMegaUltraEpicCentroidDecomposition {
  int batya[N], ans[N];
  bool was[N];
  int dfs1(int v, int p, int &center, int sze) {
    int sum = 1;
    for (auto to : g[v])
      if (!was[to] && to != p) sum += dfs1(to, v, center, sze);
    if (center == -1 && (p == -1 || sum * 2 >= sze)) center = v;
    return sum;
  }
  void dfs0(int v = 1, int p = 0, int sze = n) {
    int nxt = -1;
    dfs1(v, -1, nxt, sze);
    batya[nxt] = p;
    was[nxt] = 1;
    for (auto to : g[nxt])
      if (!was[to]) dfs0(to, nxt, sze >> 1);
  }
  void add(int x) {
    int p = x;
    while (p) {
      ans[p] = min(ans[p], t.get(x, p));
      p = batya[p];
    }
  }
  int calc(int x) {
    int p = x, res = inf;
    while (p) {
      res = min(res, ans[p] + t.get(x, p));
      p = batya[p];
    }
    return res;
  }
  void build() {
    dfs0();
    memset(ans, 0x3f3f3f3f, sizeof(ans));
    add(1);
  }
} dnc;
void solve() {
  n = get_int(), m = get_int();
  rep(i, 2, n) {
    int v = get_int(), u = get_int();
    g[v].pb(u);
    g[u].pb(v);
  }
  t.build();
  dnc.build();
  rep(i, 1, m) {
    int type = get_int(), x = get_int();
    if (type == 2) cout << dnc.calc(x) << nl;
    else dnc.add(x);
  }
}
int main() {
  #ifndef Toktama
    freopen (Toktama".in", "r", stdin);
    freopen (Toktama".out", "w", stdout);
  #endif
  Kazakhstan
  int t = 1;
  while (t--)
    solve();
  ioi
}
