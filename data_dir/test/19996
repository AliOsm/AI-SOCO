#include "bits/stdc++.h"
//#include "ext/pb_ds/tree_policy.hpp"
//#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cerr<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
#define EX0 exit(0);

typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ll inf = 1e9+7;
const ld eps = 1e-9;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a) {
    if(a<0)return -1;
    if(a>0)return 1;
    return 0;
}


template<typename T> inline void in(T &x) {
    x = 0;
    T f = 1;
    char ch = getchar();
    while (!isdigit(ch)) {
        if (ch == '-') f = -1;
        ch = getchar();
    }
    while (isdigit(ch))  {
        x = x * 10 + ch - '0';
        ch = getchar();
    }
    x *= f;
}

ll twop(int x) {
    return 1LL<<x;
}

template<typename A,typename B > inline void in(A&x,B&y) {
    in(x);
    in(y);
}
template<typename A,typename B,typename C>inline void in(A&x,B&y,C&z) {
    in(x);
    in(y);
    in(z);
}
template<typename A,typename B,typename C,typename D> inline void in(A&x,B&y,C&z,D&d) {
    in(x);
    in(y);
    in(z);
    in(d);
}




template <class T>
void upd(T&a,T b) {
    a = max(a,b);
}


ll cost[1000];
ll n,l;
ll total = LLONG_MAX;


void dfs(int cur,ll left,ll ans){
    dbg(cur);
    if(cur == 0){
        total = min(total,ans+left*cost[0]);
        REP(i,1,n){
            total = min(total,ans+cost[i]);
        }
    }else{
        if(left>=twop(cur)){
            for(ll j = cur+1;j<n;j++){
                total = min(total,ans+cost[j]);
            }
        }
        if(left>=twop(cur)){
            dfs(cur-1, left-twop(cur), ans+cost[cur]);
        }else{
            dfs(cur-1, left, ans);
        }
    }
}
int main(){
    //    dbg(1<<31);
    cin>>n>>l;
    REP(i,0,n){
        cin>>cost[i];
    }
    REP(i,1,n){
        REP(j,0,i){
            cost[i] = min(cost[i],cost[j]*twop(i-j));
        }
        dbg(cost[i]);
    }
    
    ll ans = 0;
    ll ini = l/twop(n-1);
    l%=twop(n-1);
    ans+=ini*cost[n-1];
    dfs(n-1, l, ans);
    
    
    
    cout<<total<<endl;
    return 0;
}