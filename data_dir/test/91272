#include<bits/stdc++.h>
#define ll int
#define f first
#define s second
#define pb push_back
#define mp make_pair
using namespace std;
ll n,m,raod;
vector<int>v[1000005];
queue<pair<ll,ll> >q;
pair<ll,ll>p;
vector<ll>g[2000005];
ll visited[2000005],low[2000005],tin[2000005],timer;
bool check(ll x,ll y){
    if(x < 1 || y < 1 || x > n || y > m || v[x][y])return 0;
    return 1;
}
void dfs(int x, int p = -1) {
    visited[x] = true;
    tin[x] = low[x] = timer++;
    for (int i=0; i<g[x].size(); i++) {
        if (g[x][i] == p) continue;
        if (visited[g[x][i]]) {
            low[x] = min(low[x], tin[g[x][i]]);
        } else {
            dfs(g[x][i], x);
            low[x] = min(low[x], low[g[x][i]]);
            if (low[g[x][i]] > tin[x]){
                cout << 1;
                exit(0);
            }
        }
    }
}

void find_bridges() {
    timer = 0;
    for(int i=0; i<=raod; i++)
        tin[i] = low[i] = -1;
    for (int i = 2; i <= raod - 1; ++i) {
        if (!visited[i])
            dfs(i);
    }
}
int main(){
    ios::sync_with_stdio(false);
    cin >> n >> m;
    bool fix1[n+2][m+2],fix2[n+2][m+2];
    pair<ll,ll> ind[n+2][m+2];
    for(int i=0; i<=n+1; i++)
        for(int j=0; j<=m+1; j++){
            ind[i][j] = mp(0,0);
            fix1[i][j] = fix2[i][j] = 0;
        }
    for(int i=1; i<=n; i++){
        v[i].pb(0);
        for(int j=1; j<=m; j++){
            char x;
            cin >> x;
            v[i].pb((x == '#'));
        }
    }
    q.push(make_pair(1 , 1));
    ll ok = 0;
    while(q.size()){
        p = q.front();
        if(p.f == n && p.s == m)ok = 1;
        fix1[p.f][p.s] = 1;
        q.pop();
        if(check(p.f , p.s + 1))if(fix1[p.f][p.s+1]==0){q.push(mp(p.f , p.s + 1));fix1[p.f][p.s+1]=1;}
        if(check(p.f + 1 , p.s))if(fix1[p.f+1][p.s]==0){q.push(mp(p.f + 1 , p.s));fix1[p.f+1][p.s]=1;}
    }
    
    if(ok == 0){
        cout << 0 << endl;
        return 0;
    }
    
    q.push(make_pair(n , m));
    while(q.size()){
        pair<int,int>p = q.front();
        fix2[p.f][p.s] = 1;
        q.pop();
        if(check(p.f , p.s - 1))if(fix2[p.f][p.s-1]==0){q.push(mp(p.f , p.s - 1));fix2[p.f][p.s-1]=1;}
        if(check(p.f - 1 , p.s))if(fix2[p.f-1][p.s]==0){q.push(mp(p.f - 1 , p.s));fix2[p.f-1][p.s]=1;}
    }
    
    for(int i=1; i<=n; i++)
        for(int j=1; j<=m; j++)
            if(fix1[i][j] && fix2[i][j]){
                raod++;
                ind[i][j].f = raod;
                raod++;
                ind[i][j].s = raod;
                if(!((i == 1 && j == 1) || (i == n && j == m))){
                    g[raod].pb(raod-1);
                    g[raod-1].pb(raod);
                }
                if(fix1[i - 1][j] && fix2[i-1][j]){
                    g[raod-1].pb(ind[i-1][j].s);
                    g[ind[i-1][j].s].pb(raod-1);
                }
                if(fix1[i][j-1] && fix2[i][j-1]){
                    g[raod-1].pb(ind[i][j-1].s);
                    g[ind[i][j-1].s].pb(raod-1);
                }
            }
    
    find_bridges();
    
    
    cout << 2;
    
    
    
    return 0;
}
