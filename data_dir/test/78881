#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define el endl
#define INF LONG_LONG_MAX
ll power(ll b,ll p)
{
    ll res=1;
    while(p)
    {
        if(p%2)
        {
            res=(res*b)%1000000007;
            p--;
        }
        else
        {
            b=(b*b)%1000000007;
            p/=2;
        }
    }
    return res;
}
void update(int node,int start,int end,int idx,int val,vector<int> &tree)
{
    if(start==end)
    {
        tree[node]=val;
        return;
    }
    int mid=(start+end)/2;
    if(idx>=start && idx<=mid)
    update(2*node,start,mid,idx,val,tree);
    else
    update(2*node+1,mid+1,end,idx,val,tree);
    tree[node]=max(tree[2*node],tree[2*node+1]);
}
int query(int node,int start,int end,int l,int r,vector<int> &tree)
{
    if(r<start || l>end)
    return 0;
    if(start>=l && end<=r)
    return tree[node];
    int mid=(start+end)/2;
    return max(query(2*node,start,mid,l,r,tree),query(2*node+1,mid+1,end,l,r,tree));
}
ll f,c;
void dfs(ll r,vector<vector<ll> > &v,vector<vector<ll> > &e,vector<ll> &vis,ll s)
{
    vis[r]=s;
    c++;
    for(ll i=0;i<e[r].sz;i++)
    if(vis[e[r][i]]==vis[r])
    f=1;
    for(ll i=0;i<v[r].sz;i++)
    if(!vis[v[r][i]])
    dfs(v[r][i],v,e,vis,s);
}
int main()
{
    ll n,m,k,i,ans=0,a,b;
    cin>>n;
    vector<ll> vis(n+1);
    vector<vector<ll> > v(n+1),e(n+1);
    cin>>k;
    while(k--)
    {
        cin>>a>>b;
        v[a].pb(b);
        v[b].pb(a);
    }
    cin>>m;
    while(m--)
    {
        cin>>a>>b;
        e[a].pb(b);
        e[b].pb(a);
    }
    for(i=1;i<=n;i++)
    {
        if(!vis[i])
        {
            f=0,c=0;
            dfs(i,v,e,vis,i);
            if(!f)
            ans=max(ans,c);
           // cout<<i<<" "<<ans<<el;
        }
    }
    cout<<ans;
}