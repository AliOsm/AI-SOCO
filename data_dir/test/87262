/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
}

int lcm(int a, int b) {
    return a / gcd(a, b) * b;
}

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> a(n);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
        }
        
        int gcd_a = gcd(a[0], a[1]);
        for (int i = 2; i < n; ++i) {
            gcd_a = gcd(gcd_a, a[i]);
        }
        
        out << "YES\n";
        if (gcd_a > 1) {
            out << 0 << "\n";
            return;
        }
        
        int res = 0, cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (a[i] % 2 == 1) {
                ++cnt;
            } else {
                res += cnt / 2 + 2 * (cnt % 2);
                cnt = 0;
            }
        }
        res += cnt / 2 + 2 * (cnt % 2);
        
        out << res << "\n";
    }
};


int main() {
	std::ios::sync_with_stdio(false); cin.tie(nullptr);

	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
