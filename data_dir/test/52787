#include <bits/stdc++.h>

using namespace std;

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);

	int n, m, k;
	cin >> n >> m >> k;
	vector<vector<pair<int, int>>> g(n);
	vector<tuple<int, int, int>> e;
	for (int i = 0; i < m; ++i) {
		int u, v, w;
		cin >> u >> v >> w;
		e.emplace_back(w, u - 1, v - 1);
	}
	sort(e.begin(), e.end());
	for (int i = 0; i < min(m, k); ++i) {
		int u = get<1>(e[i]), v = get<2>(e[i]), w = get<0>(e[i]);
		g[u].emplace_back(v, w);
		g[v].emplace_back(u, w);
	}
	vector<long long> paths;
	vector<bool> was(n);
	auto add_paths = [&](int s) {
		vector<bool> used(n);
		was[s] = used[s] = true;
		priority_queue<pair<long long, int>> q;
		for (auto to : g[s]) {
			q.emplace(-to.second, to.first);
		}
		for (int i = 0; !q.empty() and i < k; ) {
			auto p = q.top();
			q.pop();
			if (used[p.second]) {
				continue;
			}
			used[p.second] = true;
			if (!was[p.second]) {
				++i;
				paths.push_back(-p.first);
			}
			for (auto to : g[p.second]) {
				if (!used[to.first]) {
					q.emplace(p.first - to.second, to.first);
				}
			}
		}
	};
	for (int i = 0; i < n; ++i) {
		add_paths(i);
	}
	sort(paths.begin(), paths.end());
	cout << paths[k - 1];
		
	return 0;
}