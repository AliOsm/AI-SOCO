#include <bits/stdc++.h>

using namespace std;

const int MaxN = 1e4 + 15;
const int MOD = 1e9 + 7;
const int INF = 1e9;

vector <pair<int, int> > v[MaxN];

map<pair<int, int>, int > mp;

int all;
int k[MaxN];
int p[MaxN];
int a, b;

bool OK;

string s;

void solve(int l, int r)
{

    if(mp.count(make_pair(l, r)))
        return;

    mp[make_pair(l, r)] = ++all;

    if(l == r)
    {
        k[all] = 0;
        v[all].resize(1, make_pair(s[l] - '0', s[l] - '0'));
    }else
    {
        pair<int, int> p1 = make_pair(l + 1, p[l] - 1);
        pair<int, int> p2 = make_pair(p[l] + 1, r - 1);

        solve(p1.first, p1.second);
        solve(p2.first, p2.second);

        int k1 = mp[p1];
        int k2 = mp[p2];

        int q = mp[make_pair(l, r)];

        k[q] = k[k1] + k[k2] + 1;

        v[q].resize(1 + min((OK ? b : a), k[q]), {-INF, INF});

        for(int i = 0; i < v[k1].size(); ++i)
            for(int j = 0; j + i <= (OK ? b : a) && j < v[k2].size(); ++j)
            {
                int o = i + j;
                if(!OK)
                {
                    if(o < a && k[q] - (o + 1) <= b)
                    {
                        v[q][o + 1].first = max(v[q][o + 1].first, v[k1][i].first + v[k2][j].first);
                        v[q][o + 1].second = min(v[q][o + 1].second, v[k1][i].second + v[k2][j].second);
                    }
                    if(k[q] - o <= b)
                    {
                        v[q][o].first = max(v[q][o].first, v[k1][i].first - v[k2][j].second);
                        v[q][o].second = min(v[q][o].second, v[k1][i].second - v[k2][j].first);
                    }
                }else
                {
                    if(o < b && k[q] - (o + 1) <= a)
                    {
                        v[q][o + 1].first = max(v[q][o + 1].first, v[k1][i].first - v[k2][j].second);
                        v[q][o + 1].second = min(v[q][o + 1].second, v[k1][i].second - v[k2][j].first);
                    }
                    if(k[q] - o <= a)
                    {
                        v[q][o].first = max(v[q][o].first, v[k1][i].first + v[k2][j].first);
                        v[q][o].second = min(v[q][o].second, v[k1][i].second + v[k2][j].second);
                    }
                }
            }
    }
}

int main()
{
//    freopen("input.txt", "r", stdin);
    cin >> s >> a >> b;

    OK = false;

    if(a > b)
        OK = true;

    vector <int> V;

    for(int i = 0; i < s.size(); ++i)
    {
        if(s[i] == '(')
            V.push_back(i);
        else
        if(s[i] == ')')
        {
            V.pop_back();
        }else
        if(s[i] == '?')
            p[V.back()] = i;
    }

    if(s.size() == 1)
        return cout << s << '\n', 0;

    solve(0, s.size() - 1);

    int k = mp[make_pair(0, s.size() - 1)];

    cout << (OK ? (v[k][b].first) : (v[k][a].first)) << '\n';
    return 0;
}
