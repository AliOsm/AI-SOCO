/**************************************************************
    Problem: ????
    User: Big_Red_Dates
    Language: GNU_C++11
    Result: Accepted
    Time:0 ms
    Memory:0 kb
    length:0 kb
    score: inf
****************************************************************/
//CLOCKS_PER_SEC
using namespace std;
#include<bitset>
#include<deque>
#include<stdint.h>
#include<set>
#include<stack>
#include<cmath>
#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<iomanip>
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<queue>
#include<cstring>
#include<ctime>
#include<map>
#define sqr(x) (x)*(x)
#define sort stable_sort
#define ll long long
#define mk make_pair
#define pb push_back
#define in insert
#define mtr(x,y,z) mk(mk(x,y),z)
#define fi first
#define se second
#define lch(x) ((x)<<1)
#define rch(x) (((x)<<1)|1)
#define all(x) (x).begin(),(x).end()
#define titose CLOCKS_PER_SEC
#define fpi(x) freopen(x,"r",stdin);
#define fpo(x) freopen(x,"w",stdout);
#define fprio fpi("in.txt");fpo("out.txt");
#define fast ios_base::sync_with_stdio(false);
inline void read(int &x){int v=0,f=1;char c=getchar();while (!isdigit(c)&&c!='-') c=getchar();if (c=='-') f=-1; else v=v*10+c-'0';while (isdigit(c=getchar())) v=v*10+c-'0';x=v*f;}
inline void read(ll &x){ll v=0ll,f=1ll;char c=getchar();while (!isdigit(c)&&c!='-') c=getchar();if (c=='-') f=-1; else v=v*10+c-'0';while (isdigit(c=getchar())) v=v*10+c-'0';x=v*f;}
inline void readc(char &x){char c;while ((c=getchar())==' ');x=c;}
inline void writes(string s){puts(s.c_str());}
inline void writeln(){writes("");}
inline void writei(int x){if (x<0){putchar('-');x=abs(x);}if (!x) putchar('0');char a[25];int top=0;while (x){a[++top]=(x%10)+'0';x/=10;}while (top){putchar(a[top]);top--;}}
inline void writell(ll x){if (x<0){putchar('-');x=abs(x);}if (!x) putchar('0');char a[25];int top=0;while (x){a[++top]=(x%10)+'0';x/=10;}while (top){putchar(a[top]);top--;}}
/*
#pragma GCC optimize("-funsafe-loop-optimizations")
#pragma GCC optimize("-funroll-loops")
#pragma GCC optimize("-fwhole-program")
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("-fthread-jumps")
#pragma GCC optimize("-falign-functions")
#pragma GCC optimize("-falign-jumps")
#pragma GCC optimize("-falign-loops")
#pragma GCC optimize("-falign-labels")
#pragma GCC optimize("-fcaller-saves")
#pragma GCC optimize("-fcrossjumping")
#pragma GCC optimize("-fcse-follow-jumps")
#pragma GCC optimize("-fcse-skip-blocks")
#pragma GCC optimize("-fdelete-null-pointer-checks")
#pragma GCC optimize("-fdevirtualize")
#pragma GCC optimize("-fexpensive-optimizations")
#pragma GCC optimize("-fgcse")
#pragma GCC optimize("-fgcse-lm")
#pragma GCC optimize("-fhoist-adjacent-loads")
#pragma GCC optimize("-finline-small-functions")
#pragma GCC optimize("-findirect-inlining")
#pragma GCC optimize("-fipa-sra")
#pragma GCC optimize("-foptimize-sibling-calls")
#pragma GCC optimize("-fpartial-inlining")
#pragma GCC optimize("-fpeephole2")
#pragma GCC optimize("-freorder-blocks")
#pragma GCC optimize("-freorder-functions")
#pragma GCC optimize("-frerun-cse-after-loop")
#pragma GCC optimize("-fsched-interblock")
#pragma GCC optimize("-fsched-spec")
#pragma GCC optimize("-fschedule-insns")
#pragma GCC optimize("-fschedule-insns2")
#pragma GCC optimize("-fstrict-aliasing")
#pragma GCC optimize("-fstrict-overflow")
#pragma GCC optimize("-ftree-switch-conversion")
#pragma GCC optimize("-ftree-tail-merge")
#pragma GCC optimize("-ftree-pre")
#pragma GCC optimize("-ftree-vrp")
#pragma GCC optimize(2)
#pragma GCC optimize(3)
#pragma GCC optimize(4)
#pragma GCC optimize(5)
#pragma GCC optimize(6)
#pragma GCC optimize(7)
#pragma GCC optimize(8)
#pragma GCC optimize(9)
*/
#define pii pair<int,int>
#define pll pair<ll,ll>
#define vi vector<int>
#define vl vector<ll>
#define si set<int>
#define sl set<ll>
#define mii map<int,int>
#define mll map<ll,ll>
#define msi map<string,int>
#define msl map<string,ll>
#define piii pair<int,pii >
#define piipi pair<pii,int>
#define plll pair<ll,pll >
#define pllpl pair<pll,ll>
#define pqi priority_queue<int>
#define pql priority_queue<ll>
#define npqi priority_queue<int,vector<int>,greater<int> >
#define npql priority_queue<ll,vector<ll>,greater<ll> >
#define forup(i,csc,lys) for ((i)=(csc);(i)<=(lys);(i)++)
#define fordo(i,csc,lys) for ((i)=(csc);(i)>=(lys);(i)--)
#define rep0(i,n) for ((i)=0;(i)<(n);(i)++)
#define fe(c,itr) for (__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)
#define rep(i,x) forup ((i),1,(x))
#define repd(i,x) fordo ((i),(x),1)
#define itr iterator
#define lyscsc(itcalc,c) for(__typeof((c).begin()) itcalc=(c).begin();itcalc!=(c).end();itcalc++)
#define NO {cout<<"-1";return 0;}
#define YES {cout<<"YES";return 0;}
#define y0 y000000000000000000000000000
#define y1 y111111111111111111111111111
#define j0 j000000000000000000000000000
#define j1 j111111111111111111111111111
#define cl0(a) memset((a),(0),(sizeof((a))))
#define clz(a) memset((a),(0x16),(sizeof((a))))
#define clf(a) memset((a),(-(0x16)),(sizeof((a))))
#define inf 0x3bbbbbbb
#define lnf 0x1bbbbbbbbbbbbbbbll
#define sqrt divi
#define p2(i) (1ll<<(i))
#define readi read
#define readll read
/*************************************************/
int n,m,d,i,j,a[100005],f[100005][55],g[100005][55],cnt,cc[55],dfn[100005],low[100005],col[100005],ti,vis[100005],ans,dp[200005][55],x,y;
queue<int> qx,qy;
vector<int> seq[100005];
stack<int> stk;
vector<int> e[100005],ee[100005];
char ss[55];
string st[100005];
void tarjan(int x)
{
	dfn[x]=low[x]=++ti;
	stk.push(x);
	fe(e[x],it)
	{
		if (!dfn[*it]) {tarjan(*it);low[x]=min(low[x],low[*it]);} else if (!col[*it]) low[x]=min(low[x],dfn[*it]);
	}
	if (low[x]==dfn[x])
	{
		cnt++;
		while (stk.top()!=x) {col[stk.top()]=cnt;seq[cnt].push_back(stk.top());stk.pop();}
		col[stk.top()]=cnt;stk.pop();seq[cnt].push_back(x);
	}
}
bool dfs1(int x,int y)
{
	if (f[x][y]!=-1) return f[x][y];
}
int dfs3(int x,int y)
{
	if (x==1+n&&y==0)
	{
		return dp[x][y]=g[col[x-n]][y];
	}
	if (dp[x][y]!=-1) return dp[x][y];
	int i;
	int t=vis[col[(x-1)%n+1]];
	dp[x][y]=(-1<<25);
	if (x<=n)
	{
		rep0(i,d) if (f[x][i]) dp[x][y]=max(dp[x][y],dfs3(t+n,(y+d-i)%d));
	}
	else
	{
		fe(seq[col[t]],iit)
		{
			fe(ee[*iit],it) if (col[*it]!=col[t]) rep0(i,d) if (f[*iit][i])
			{
				dp[x][y]=max(dp[x][y],dfs3(*it,(y+d-1+i)%d));
			}
		}
		int t=0;
		rep0(i,d) if (f[x-n][i]) t=max(t,g[col[x-n]][(y+d-i)%d]); 
		dp[x][y]+=t;
	}
	return dp[x][y];
}
int main()
{
	scanf("%d%d%d",&n,&m,&d);
	rep(i,m)
	{
		scanf("%d%d",&x,&y);
		e[x].push_back(y);
		ee[y].push_back(x);
	}
	rep(i,n)
	{
		scanf(" %s",ss); 
		st[i]=ss;
	}
	tarjan(1);
/*	rep(i,n) fe(e[i],it) if (col[i]!=col[*it])
	{
		zbi[col[i]].push_back(col[*it]);
		nbi[col[*it]].push_back(col[i]);
	}*/
	memset(f,0,sizeof(f));
	memset(g,0,sizeof(g));
	memset(dp,-1,sizeof(dp));
	rep(i,n) if (dfn[i])
	{
		if (!vis[col[i]]) {vis[col[i]]=i;f[i][0]=1;qx.push(i);qy.push(0);}
	}
	while (!qx.empty())
	{
		int x=qx.front(),y=qy.front();
		qx.pop();qy.pop();
		fe(e[x],it) if (col[*it]==col[x])
		{
			if (!f[*it][(y+1)%d])
			{
				f[*it][(y+1)%d]=1;
				qx.push(*it);qy.push((y+1)%d);
			}
		}
	}
	rep(i,n) if (dfn[i])
	{
		int t;memset(cc,0,sizeof(cc));
		rep0(t,d) if (st[i][t]=='1')
		{
			rep0(j,d) cc[(t+d-j)%d]|=dfs1(i,j);
		}
		rep0(j,d) g[col[i]][j]+=cc[j];
	}
	rep(i,cnt) rep0(j,d) ans=max(ans,dfs3(vis[i],j));
	cout<<ans<<endl;
	return 0;
}