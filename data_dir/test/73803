#include <bits/stdc++.h>
using namespace std;

int64_t MOD;
void add(int64_t& a, int64_t b){
    a = (a+b) % MOD;
}
void mul(int64_t& a, int64_t b){
    a = a*b % MOD;
}

int64_t power_mod(int64_t num, int64_t power){
    int64_t prod = 1;
    num %= MOD;
    while(power > 0){
        if(power&1) prod = prod * num % MOD;
        num = num * num % MOD;
        power >>= 1;
    }
    return prod;
}

int64_t extgcd(int64_t a, int64_t b, int64_t& x, int64_t& y){
    int64_t d = a;
    if(b != 0){
        d = extgcd(b, a%b, y, x);
        y -= (a/b) * x;
    }else{
        x = 1; y = 0;
    }
    return d;
}

int64_t inv_mod(int64_t a){
    int64_t x, y;
    extgcd(a, MOD, x, y);
    return (MOD + x%MOD) % MOD;
}

int main(){
    int64_t A, B, X;
    cin >> A >> B >> MOD >> X;

    int64_t ans = 0;
    for(int t=0; t<MOD-1; t++){
        if(X < t) continue;
        int64_t V = B * inv_mod(power_mod(A, t));
        add(V, MOD-t);
        mul(V, MOD-1);

        int64_t m = (X-t)/(MOD-1);
        ans += (m-V+MOD)/MOD;
    }
    cout << ans << endl;
    return 0;
}
