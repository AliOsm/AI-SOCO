#include<bits/stdc++.h>
#define god dimasi5eks
#pragma GCC optimize("O3")
#define fi first
#define se second
#define pb push_back
#define pf push_front
#define mod 1000000007

using namespace std;

typedef long long ll;


int add(int a, int b)
{
    ll x = a+b;
    if(x >= mod)
        x -= mod;
    if(x < 0)
        x += mod;
    return x;
}
ll mul(ll a, ll b)
{
    return (a*b) % mod;
}

ll pw(ll a, ll b)
{
    ll ans = 1;
    while(b)
    {
        if(b & 1)
            ans = (ans * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return ans;
}

int n, t, m, a[106][6], timp[102][102], b[106][6];

pair<int, string> cv[102];

vector<string> v[102];

ifstream f("input.txt");
ofstream g("output.txt");
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    f >> n >> t;
    for(int i = 1; i <= n; ++i)
        f >> a[i][1] >> b[i][1] >> a[i][2] >> b[i][2];
    f >> m;
    for(int i = 1; i <= m; ++i)
    {
       f >> cv[i].se;
        f >> cv[i].fi;
    }
    deque<int>cx;
    for(int i = 1; i <= m; ++i)
        cx.pb(i);
    int turn = 1;
    int wh = 1;
    int lft = t;
    while(!cx.empty())
    {
        while(lft && !cx.empty())
        {
            int tex = max(1, cv[cx[0]].fi - a[turn][wh] - b[turn][3 - wh] - timp[turn][cx[0]]);
            int val = cx[0];
            cx.pop_front();
            if(tex <= lft)
            {
                v[turn].pb(cv[val].se);
                lft -= tex;
            }
            else
            {
                timp[turn][val] += lft;
                lft = 0;
                cx.pb(val);
            }
        }
        if(turn < n)
            ++turn;
        else
            if(wh == 1)
                wh = 2, turn = 1;
            else
                wh = 1, turn = 1;
        lft = t;
    }
    for(int i = 1; i <= n; ++i)
    {
        g << v[i].size() << " ";
        for(int j = 0; j < v[i].size(); ++j)
            g << v[i][j] << " ";
        g << '\n';
    }
    return 0;
}
