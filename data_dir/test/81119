#define _CRT_SECURE_NO_WARNINGS
#include <math.h>
#include <memory.h>
#include <stdio.h>

#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>
// #pragma comment(linker, "/STACK:667177216")
#define ll long long
#define ull unsigned long long
#define INF 1000000007
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define mp make_pair
#define vI vector<int>
#define vvI vector<vector<int>>
#define vLL vector<LL>
#define vS vector<string>
#define fori(i, n) for (int(i) = 0; (i) < n; (i)++)
#define forn(it, from, to) for (int(it) = from; (it) < to; (it)++)
#define forI(tmp) for (auto(it) = (tmp).begin(); (it) != (tmp).end(); (it)++)
#define PI 3.14159265356
#define LD long double
#define sc(a) scanf("%d", &(a))
#define scLL(a) scanf("%I64d", &(a))
#define mems(a, val) memset(a, val, sizeof(a))
#define sz(a) (int)(a).size()
typedef long long LL;
using namespace std;
const LL MOD = 998244353;
const LL MAXN = 2 * 100000 + 100;

bool is_pal(string &s) {
  string b = s;
  reverse(all(b));
  return s == b;
}

int main() {
#ifdef ONLINE_JUDGE
  // freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
  freopen("input.txt", "r", stdin);
  // freopen("output.txt", "w", stdout);
#endif
  ios::sync_with_stdio(false);
  cin.tie(0);

  int tt;
  cin >> tt;
  while (tt-- > 0) {
    string s;
    cin >> s;

    if (is_pal(s)) {
      cout << s << endl;
      continue;
    }

    int n = s.size();

    vector<int> d1(n);
    int l = 0, r = -1;
    for (int i = 0; i < n; ++i) {
      int k = i > r ? 1 : min(d1[l + r - i], r - i + 1);
      while (i + k < n && i - k >= 0 && s[i + k] == s[i - k]) ++k;
      d1[i] = k;
      if (i + k - 1 > r) l = i - k + 1, r = i + k - 1;
    }

    vector<int> d2(n);
    l = 0, r = -1;
    for (int i = 0; i < n; ++i) {
      int k = i > r ? 0 : min(d2[l + r - i + 1], r - i + 1);
      while (i + k < n && i - k - 1 >= 0 && s[i + k] == s[i - k - 1]) ++k;
      d2[i] = k;
      if (i + k - 1 > r) l = i - k, r = i + k - 1;
    }

    int max_sim = 0;
    for (int i = 0; i < n / 2; ++i) {
      if (s[i] == s[n - 1 - i])
        max_sim++;
      else
        break;
    }

    string ans;
    int left = 0, right = 0;
    for(int i = 0; i < n; ++i) {
      int len = d1[i] * 2 - 1;
      int from = i - d1[i] + 1;
      int to = i + d1[i] - 1;
      int to_l = from;
      int to_r = n - to - 1;

      if (to_l <= to_r && from <= max_sim) {
        if (2 * from + len > left + right) {
          left = to + 1;
          right = from;
        }
      }

      if (to_r <= to_l && to + 1 >= n - max_sim) {
        if (2 * (n - to - 1) + len > left + right) {
          left = n - to - 1;
          right = n - from;
        }
      }
    }

    for(int i = 0; i < n; ++i) {
      int len = d2[i] * 2;
      //if (len == 0) continue;

      int from = i - d2[i];
      int to = i + d2[i] - 1;
      int to_l = from;
      int to_r = n - to - 1;

      if (to_l <= to_r && from <= max_sim) {
        if (2 * from + len > left + right) {
          left = to + 1;
          right = from;
        }
      }

      if (to_r <= to_l && to + 1 >= n - max_sim) {
        if (2 * (n - to - 1) + len > left + right) {
          left = n - to - 1;
          right = n - from;
        }
      }
    }

    cout<<s.substr(0, left)<<s.substr(n-right, right)<<endl;
  }

  return 0;
}