#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327
#endif // M_PI
#define endl "\n"
#define S struct
#define X first
#define Y second
#define V vector
#ifndef __linux__
#define LLD "%I64d"
#else
#define LLD "%ll""d"
#endif
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
using namespace std;
typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
S Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;
S FAIL { FAIL () { cout << "CHANGE!!!" << endl;}};

int main()
{
    string good;
    cin >> good;
    sort(IT(good));
    string p;
    cin >> p;
    int n;
    cin >> n;
    FOR (t, 0, n) {
        string s;
        cin >> s;
        int i = 0;
        bool ok = true;
        for (; i < p.size() && p[i] != '*'; ++i) {
            if (p[i] == '?') {
                if (binary_search(IT(good), s[i])) {
                    continue;
                } else {
                    ok = false;
                }
            }
            if (s[i] != p[i]) {
                ok = false;
                break;
            }
        }
        int diff = s.size() - p.size();
        int j = s.size() - 1;
        for (; j >= max(0, diff) && p[j - diff] != '*'; --j) {
            if (p[j - diff] == '?') {
                if (binary_search(IT(good), s[j])) {
                    continue;
                } else {
                    ok = false;
                }
            }
            if (s[j] != p[j - diff]) {
                ok = false;
                break;
            }
        }
        if (p[i] == '*' && p[j - diff] == '*') {
            bool flag = true;
            //DEB(i);
            //DEB(p.size() - 1 - (j - diff))
            if (i + (p.size() - 1 - (j - diff)) > s.size()) {
                flag = false;
            }
            FOR (k, i, j + 1) {
                if (binary_search(IT(good), s[k])) {
                    flag = false;
                }
            }
            cout << (flag ? "YES" : "NO") << endl;
            continue;
        }
        if (i == s.size() && s.size() == p.size()) {
            cout << "YES" << endl;
            continue;
        }
        cout << "NO" << endl;
    }
}
