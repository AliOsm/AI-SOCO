#include <bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef pair <ll, ll> pll;

const int Max = 2e6 + 10;
const int Mod = 1e9 + 7;
const ll Inf = 1LL << 62;

unordered_map <int, set <int>> vec;

int gcd[600], mx, n;
int Min[600];
int ar[Max];
int BLOCK_SIZE;

void build( int idx, int val ) {
	int id = idx / BLOCK_SIZE;
	gcd[id] = __gcd( gcd[id], val );
	Min[id] = min( Min[id], val );
}

void query( int idx, int val ) {
	int id = idx / BLOCK_SIZE;
	int cnt = 0, cur = idx;
	bool flg = 0;
	for( int i=idx+1; i<min((id + 1) * BLOCK_SIZE, n+1); i++ ){
		if( ar[i] % ar[idx] == 0 ) {
			cnt++;
		}
		else {
			flg = 1;
			break;
		}
	}
	if( !flg ) {
		int tmp = (id + 1) * BLOCK_SIZE;
		for( int i=id+1; (i+1)*BLOCK_SIZE<n; i++ ) {
			if( gcd[i] % val == 0 && Min[i] % val == 0 ) {
				cnt += BLOCK_SIZE;
				int tot = (i+1) * BLOCK_SIZE - 1;
				tmp = (i+1) * BLOCK_SIZE;
			}
			else {
				for( int j=i*BLOCK_SIZE; j<(i+1)*BLOCK_SIZE; j++ ) {
					if( ar[j] % ar[idx] == 0 ) {
						cnt++;
					}
					else {
						flg = 1;
						break;
					}
				}
				flg = 1;
				break;
			}
		}
		if( !flg ) {
			for( int i=tmp; i<=n; i++ ) {
				if( ar[i] % ar[idx] == 0 ) {
					cnt++;
				}
				else {
					flg = 1;
					break;
				}
			}
		}
	}
	flg = 0;
	for( int i=idx-1; i>=max(1, id*BLOCK_SIZE); i-- ){
		if( ar[i] % ar[idx] == 0 ) {
			cnt++;
			cur = i;
		}
		else {
			flg = 1;
			break;
		}
	}
	//printf("id = %d; cnt = %d\n", id, cnt);
	if( !flg ) {
		for( int i=id-1; i>=0 && max(1, i*BLOCK_SIZE); i-- ) {
			if( gcd[i] % val == 0 && Min[i] % val == 0 ) {
				cnt += BLOCK_SIZE;
				if( i == 0 ) cnt--;
				cur = max(1, i*BLOCK_SIZE);
			}
			else {
				for( int j=(i+1)*BLOCK_SIZE-1; j>=max(1, i*BLOCK_SIZE); j-- ) {
					if( ar[j] % ar[idx] == 0 ) {
						cnt++;
						cur = j;
					}
					else {
						break;
					}
				}
				flg = 1;
				break;
			}
		}
	}
	mx = max( mx, cnt );
	vec[cnt].insert( cur );
	//cout << "- " << cnt << " " << cur << endl;
}

int main() {
	#ifdef Mr_Emrul
		freopen("input.txt", "r", stdin);
		freopen("output.txt", "w", stdout);
	#endif ///Mr_Emrul
	
	//ios_base::sync_with_stdio(false);
	//cin.tie(0);

	ll m, t, k, q;
	
	while( ~scanf("%d", &n) ) {
		BLOCK_SIZE = sqrt( n ), mx = 0;
		for( int i=0; i<600; i++ ) {
			Min[i] = 1e9;
		}
		for( int i=1; i<=n; i++ ) {
			scanf("%d", &ar[i]);
			build( i, ar[i] );
		}
		for( int i=1; i<=n; i++ ) {
			query( i, ar[i] );
			if( ar[i] == 1 ) {
				printf("1 %d\n1\n", n-1);
				goto ses;
			}
		}
		printf("%d %d\n", vec[mx].size(), mx);
		for( int x : vec[mx] ) {
			printf("%d ", x);
		} printf("\n");
		ses:;
		cerr << "--------------------" << endl;
	}
	return 0;
}