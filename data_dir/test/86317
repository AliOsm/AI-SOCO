/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;

class ProblemCFoxAndNames {
public:
    vector<int> adj[26];
    int inD[26];
    set<int> s;
    vector<char> topo(){
        vector<char> res;
        while(!s.empty()){
            int cur = *s.begin();
            res.push_back(cur+'a');
            s.erase(cur);
            for(auto it: adj[cur]){
                inD[it]--;
                if(inD[it] == 0) s.insert(it);
            }
        }
        if(res.size()!=26) res.clear();
        return res;
    }
	void solve(std::istream& in, std::ostream& out) {
		int n; in>>n;
        memset(inD, 0, sizeof(inD));
		string last, cur;
        in>>last;
        for(int i = 1; i<n; ++i){
            in>>cur;
            int j = 0;
            for(;j<last.size() and j<cur.size(); ++j){
                if(last[j] == cur[j]) continue;
                adj[last[j]-'a'].push_back(cur[j]-'a');
                inD[cur[j]-'a']++;
                break;
            }
            if(last.length()>cur.length()){
                if(j == cur.length()){
                    out<<"Impossible";
                    return;
                }
            }
            last = cur;
        }
        for(int i = 0; i<26; ++i){
            if(inD[i]==0) s.insert(i);
        }
        vector<char> res = topo();
        if(res.size()==0) out<<"Impossible";
        else{
            for(char x: res) out<<x;
        }
	}
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	ProblemCFoxAndNames solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
