#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcount(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

const int OO = (int) 2e9;
const double eps = 1e-9;

int a2[1003][1003];
int a5[1003][1003];
int dp2[1003][1003];
int dp5[1003][1003];
int arr[1003][1003];

int main() {
   std::ios_base::sync_with_stdio(false);
   cin.tie(NULL);
   cout.tie(NULL);
#ifndef ONLINE_JUDGE
// freopen("in.txt","rt",stdin);
// freopen("out.txt","wt",stdout);
#endif
   int n, res = OO, i0 = -1, j0 = -1;
   string ans;
   bool zero = 0;
   cin >> n;
   for (int i = 1; i <= n; i++)
      for (int j = 1; j <= n; j++) {
         cin >> arr[i][j];
         if (arr[i][j]) {
            while (arr[i][j] % 2 == 0)
               a2[i][j]++, arr[i][j] /= 2;
            while (arr[i][j] % 5 == 0)
               a5[i][j]++, arr[i][j] /= 5;
//            cout << "(" << a2[i][j] << ", " << a5[i][j] << ")" << " \n"[j == n];
         } else
            zero = 1, res = 1, i0 = i, j0 = j;
      }
   MMS(dp2, 0x7f);
   MMS(dp5, 0x7f);
   dp2[1][1] = a2[1][1];
   dp5[1][1] = a5[1][1];
   dp2[0][1] = dp5[0][1] = 0;
   for (int i = 1; i <= n; i++)
      for (int j = 1; j <= n; j++) {
         if (arr[i][j]) {
            dp2[i][j] = min(dp2[i][j - 1], dp2[i - 1][j]) + a2[i][j];
            dp5[i][j] = min(dp5[i][j - 1], dp5[i - 1][j]) + a5[i][j];
         }
//         cout << "(" << dp2[i][j] << ", " << dp5[i][j] << ")" << " \n"[j == n];
      }
   int pi = n, pj = n;
   bool ok = !arr[1][1]; // zero in the path
   while (pi != 1 || pj != 1) {
      if (!arr[pi][pj])
         ok = 1;
      if (dp2[n][n] < dp5[n][n]) {
         if (pi == 1 || dp2[pi][pj - 1] < dp2[pi - 1][pj])
            ans += 'R', pj--;
         else
            ans += 'D', pi--;
      } else {
         if (pi == 1 || dp5[pi][pj - 1] < dp5[pi - 1][pj])
            ans += 'R', pj--;
         else
            ans += 'D', pi--;
      }
   }
   reverse(all(ans));
   if (!ok)
      res = min(res, min(dp2[n][n], dp5[n][n]));
   if (zero) {
      if (res >= 1) {
         ans = "";
         for (int i = 1; i < i0; i++)
            ans += 'D';
         for (int j = 1; j < j0; j++)
            ans += 'R';
         for (int i = i0; i < n; i++)
            ans += 'D';
         for (int j = j0; j < n; j++)
            ans += 'R';
      }
   }
   cout << res << endl << ans << endl;
   return 0;
}
