#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define se second
#define pi 2*acos(0)
#define PI 3.14159265358979323846264338

typedef long long ll;
typedef unsigned long long ull;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;

const int N = 100010;
const int MX = 123456;
const int mod = (int)1e9 + 7;
const int base = 97;
const ull BS1 = 10000019ULL;
const int INF = (1 << 29);

template < class T > inline void fastScan(T &x){
    register char c = getchar();
    int neg = 0; x = 0;
    for(   ; (c < 48 || c > 57) && (c != '-'); c = getchar());
    if(c == '-') { neg = 1; c = getchar(); }
    for(   ; c > 47 && c < 58; c = getchar()){
        x = (x << 1) + (x << 3) + c - 48;
    }
    if(neg) x = -x;
}

// OrderedSet
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
// template < typename T > using ordered_set = tree < T, null_type, greater < T >, rb_tree_tag, tree_order_statistics_node_update >;

//typedef uint64_t hash_t;
//mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
//const int HASH_COUNT = 2;
//const hash_t HASH_P = (uint32_t)-13337;
//uniform_int_distribution<hash_t> MULT_DIST(0.25 * HASH_P, 0.75 * HASH_P);
//const hash_t HASH_MULT[HASH_COUNT] = {MULT_DIST(rng), MULT_DIST(rng)};

struct Info {
  ll a, b, c;
} inp[N * 6];

int main(){
  int test;
  fastScan(test);
  while(test--){
    int n;
    fastScan(n);
    for(int i = 1; i <= n; i++){
      fastScan(inp[i].a);
      fastScan(inp[i].b);
      inp[i].c = 0;
      inp[i + n].a = inp[i].a;
      inp[i + n].b = inp[i].b;
      inp[i + n].c = inp[i].c;
    }
    for(int i = 1; i < n + n; i++){
      if(inp[i].b < inp[i + 1].a){
        inp[i].c = inp[i + 1].a - inp[i].b;
      }
    }
    ll ans = 1ll * 1e18, ext = 0;
    for(int i = 1; i < n; i++){
      ext += inp[i].c;
    }
    for(int i = 1; i <= n; i++){
      ll tmp = inp[i].a + ext;
      ext += inp[i + n - 1].c;
      ext -= inp[i].c;
      if(tmp < ans){
        ans = tmp;
      }
    }
    printf("%lld\n", ans);
  }
  return 0;
}
