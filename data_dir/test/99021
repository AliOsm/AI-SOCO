#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define IN freopen("transposition-115.txt","r",stdin)
#define OUT freopen("dichromatic.out","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 1000000000000000000LL
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define sq(x)  ((x)*(x))

using namespace __gnu_pbds;
using namespace std ;

#define maxn 10000005
#define mod 1000000007LL

typedef pair<i64,i64> pii ;
typedef  long long int T ;

bool isPrime[maxn] ;
int divCount[maxn] , phi[maxn] , firstPrime[maxn] , primeCnt[maxn] , firstPrimeCnt[maxn] ;
vector <int> prm ;

int main()
{
    int n = 10000000 ;

    memset(isPrime,1,sizeof(isPrime)) ;
    isPrime[1] = 0 ;
    for(int i=2 ; i<=n ; i++)
    {
        if(isPrime[i]) for(int j=i+i ; j<=n ; j+=i) isPrime[j] = 0 ;
    }

    for(int i=2 ; i<=n ; i++) if( isPrime[i] ) prm.pb(i) ;

    for(int i=2 ; i<=n ; i++) phi[i] = i ;

    for(int i=(int)prm.size() - 1 ; i >= 0 ; i-- )
    {
        int p = prm[i] ;
        for(int j=p ; j<=n ; j+=p)
        {
            phi[j] /=p ;
            phi[j] *= (p-1) ;
            divCount[j]++ ; firstPrime[j] = p ;
        }
    }


    i64 ans = 0LL ;

    for(int i=2 ; i<=n ; i++) primeCnt[i] = primeCnt[i-1] + isPrime[i] ;

    scanf("%d",&n) ;

    for(int i=2 ; i<=n ; i++)
    {
        if( !isPrime[i] )
        {
            int comp = (i-2) - primeCnt[i-1] , compWithEdge = (i-1) - phi[i] - divCount[i] ;
            ans += compWithEdge*1 ;
            ans += ( comp - compWithEdge )*2LL ;
        }
    }

 //   printf("Composite Answer : %lld\n",ans) ;

    for(int i=2 ; i<=n ; i++ )
    {
        if( !isPrime[i] ) firstPrimeCnt[ firstPrime[i] ]++ ;
    }

    for(int i=0 ; i<prm.size() && prm[i]*2 <=n  ; i++)
    {
        int p = prm[i] ;

        ans += primeCnt[ min(p-1 , n/p ) ]*2 ;

        ans += (primeCnt[p-1] - primeCnt[ min(p-1 , n/p ) ] )*3 ;

        int r1 = primeCnt[ min(p-1 , n/p ) ]*2 , r2 = (primeCnt[p-1] - primeCnt[ min(p-1 , n/p ) ] )*3 ;

//        printf("%d : %d\n", p , r1+r2 ) ;

        int dis1 = 0 , dis2 = 0 , dis3 = 0 ;

        for(int j=0 ; prm[j]*prm[i] <= n ; j++ )
        {
            if(j==i) continue ;
            dis2 += firstPrimeCnt[ prm[j] ] ;
        }
        for( int j=p+p ; j<=n ; j+=p)
        {
            if( firstPrime[j] != p ) dis2-- ;
            dis1++ ;
        }

        dis3 = ( n-1  - primeCnt[n]) - dis1 - dis2 ;

        ans += dis1*1 + dis2*2 + dis3*3 ;

  //      printf("%d: %d %d %d\n",p,dis1,dis2,dis3) ;
    }

    printf("%lld\n",ans) ;

    return 0 ;
}
