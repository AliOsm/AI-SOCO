#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
const int maxn=100010;
int par[maxn],_rank[maxn];
ll a[maxn];
void init(int n){
	for(int i=1;i<=n;i++)
		par[i]=i;
}
int find(int x){
	if(par[x]==x) return x;
	return par[x]=find(par[x]);
}
inline void unite(int x,int y){
	x=find(x),y=find(y);
	if(x==y) return;
	if(_rank[x]<_rank[y]){
		par[x]=y;
	}else{
		par[y]=x;
		if(_rank[x]==_rank[y]) _rank[x]++;
	}
}
inline bool same(int x,int y){
	return find(x)==find(y);
}
int main(){
	int n,m,l,ans=0;
	scanf("%d%d%d",&n,&m,&l);
	for(int i=1;i<=n;i++){
		scanf("%lld",a+i);
		if(a[i]>l) ans++;
	}
	init(n);
	for(int i=1;i<=n;i++){
		if(a[i]>l){
			if(i>1 && a[i-1]>l && !same(i-1,i)) unite(i-1,i),ans--;
			if(i<n && a[i+1]>l && !same(i+1,i)) unite(i+1,i),ans--;
		}
	}
	int opt,p,d;
	while(m--){
		scanf("%d",&opt);
		if(opt==0){
			printf("%d\n",ans);
		}else{
			scanf("%d%d",&p,&d);
			if(a[p]>l) a[p]+=d;
			else{
				a[p]+=d;
				if(a[p]>l){
					ans++;
					if(p>1 && a[p-1]>l && !same(p-1,p)) unite(p-1,p),ans--;
					if(p<n && a[p+1]>l && !same(p+1,p)) unite(p+1,p),ans--;
				}
			}
		}
	}
	return 0;
}