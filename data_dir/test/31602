// Besmellah

#include<bits/stdc++.h>
using namespace std;

const int MAXN = 100 * 1000 + 19;

int n, m, k, ans, par[MAXN], sz[MAXN];

struct edge {
	int w, u, v;
	bool operator < (const edge& tmp) const {
		if (w < tmp.w)
			return true;
		else if (w == tmp.w) {
			if (u < tmp.u)
				return true;
			if (u == tmp.u)
				return v < tmp.v;
		}
		return false;
	}
};
edge E[MAXN];

int find_root(int v) {
	return (par[v] == -1 ? v : par[v] = find_root(par[v]));
}

void merge(int u, int v) {
	u = find_root(u), v = find_root(v);
	if (u == v)
		return;
	par[v] = u;
	sz[u] += sz[v];
}

int main() {
	ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	memset(par, -1, sizeof(par));
	cin >> n >> m >> k;
	for (int i = 0, v; i < k; i++)
		cin >> v, sz[--v]++;
	for (int i = 0; i < m; i++)
		cin >> E[i].u >> E[i].v >> E[i].w, E[i].v--, E[i].u--;
	sort(E, E + m);
	for (int i = 0; i < m; i++) {
		int u = E[i].u, v = E[i].v, w = E[i].w;
		merge(u, v);
		int root = find_root(u);
		if (sz[root] == k) {
			ans = w;
			break;
		}
	}
	for (int i = 0; i < k; i++)
		cout << ans << ' ';
	return 0;
}
