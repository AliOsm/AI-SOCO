#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 100;
const int SQ = sqrt(N);

int a[N];
int cap[N];
int l[N], r[N];
int ord[N];
int ans[N];
int cnt[N];

void rmp(int *a, int n) {
  map<int, int> mp;
  int k = 0;
  for (int i = 1; i <= n; ++i) {
    if (!mp[a[i]]) {
      mp[a[i]] = ++k;
      cap[k] = a[i];
    }
    a[i] = mp[a[i]];
  }
}

void add(int v, int p, int &now) {
  if (cnt[v] == cap[v]) --now;
  cnt[v] += p;
  if (cnt[v] == cap[v]) ++now;
}

int main()
{
  ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
  int n, m;
  cin >> n >> m;
  for (int i = 1; i <= n; ++i) cin >> a[i];
  for (int i = 0; i < m; ++i) cin >> l[i] >> r[i];
  
  rmp(a, n);
  
  for (int i = 0; i < m; ++i) ord[i] = i;
  sort(ord, ord + m,
      [](int a, int b) {
        return make_pair(l[a]/SQ, r[a]) 
          < make_pair(l[b]/SQ, r[b]);
        });

  int now = 0;
  for (int i = 0, il = 1, ir = 0; i < m; ++i) {
    int id = ord[i];
    while (il < l[id]) {
      add(a[il], -1, now);
      ++il;
    }
    while (l[id] < il) {
      --il;
      add(a[il], 1, now);
    }
    while (ir < r[id]) {
      ++ir;
      add(a[ir], 1, now);
    }
    while (r[id] < ir) {
      add(a[ir], -1, now);
      --ir;
    }
    ans[id] = now;
  }
  
  for (int i = 0; i < m; ++i) {
    cout << ans[i] << '\n';
  }
}
// g++ -W -Wall -Wextra -pedantic -std=c++0x -o p main.cpp
