#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define all(v) (v).begin() , (v).end()
#define popcnt(x) __builtin_popcount(x)
#define inf 0x3f3f3f3f
#define watch(x) cout << (#x) << " is " << (x) << endl
#define rand() (rand() << 15 | rand())
using namespace std;
//using namespace __gnu_pbds;

//template<typename T>
//using ordered_set =
//tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long  ll;
#define EPS 1e-9
#define PI acos(-1.0)
const int N = 3e3 + 4 , MOD = 998244353;
string s , t;
int n , memo[N][N];

int add(int a , int b , int m = MOD){
   a += b;
   while(a >= MOD)a -= MOD;
   while(a < 0) a += MOD;
   return a;
}


int solve(int i , int l , int r){
   if(r < l)
      return 1;
   if(i < 0)
      return 0;
   int &ret = memo[i][l];
   if(~ret)
      return ret;
   ret = 0;
   if(t[l] == '*' || t[l] == s[i])ret = add(ret , solve(i - 1 , l + 1 , r));
   if(t[r] == '*' || t[r] == s[i])ret = add(ret , solve(i - 1 , l , r - 1));
   return ret;
}
void solve(){
   cin >> s >> t;
   memset(memo , -1 , sizeof(memo));
   n = (int)s.size();
   int rs = 0;
   while(t.size() <= s.size()) {
      rs = add(rs , solve((int)t.size() - 1 , 0 , (int)t.size() - 1));
      t.push_back('*');
   }
   cout << rs << "\n";
}
int main() {
#ifndef ONLINE_JUDGE
   freopen("input.txt", "r", stdin);
#endif
   ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
   int t = 1;
   while(t--){
      solve();
   }
}