#include <iostream>
#include <memory.h>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;
typedef long long ll;
struct edge {
	ll g;
	ll s;
	int a;
	int b;
	bool operator <(const edge&t) const {
		if (t.g != g) return t.g > g;
		return t.s > s;
	}
};
vector<edge> ed, v;
vector<int> p;
int n, m;
ll S, G, mx1 = -1, mx2 = -1, ans = 2e18+2e9;

int get(int a) {
	if (p[a] == a)return a;
	return p[a] = get(p[a]);
}

void ins(edge e) {
	int k = 0;
	for (; k < v.size(); ++k)
		if (v[k].s > e.s)
			break;
	v.insert(v.begin() + k, e);
}

void fix(edge e) {
	for (int i = 0; i < n; ++i)
		p[i] = i;
	mx1 = -1; mx2 = -1;
	for (int i = 0; i < v.size(); ++i) {
		int a = v[i].a;
		int b = v[i].b;
		if (get(a) == get(b)) {
			v.erase(v.begin() + i);
			--i;
			continue;
		}
		mx1 = max(mx1, v[i].g*G);
		mx2 = max(mx2, v[i].s*S);
		p[get(b)] = get(a);
	}
	if(v.size()==n-1)
		ans = min(ans, mx1 + mx2);
}

int main() {
	cin >> n >> m >> G >> S;
	p.resize(n);
	for (int i = 0; i < n; ++i)
		p[i] = i;
	for (int i = 0; i < m; ++i) {
		edge e;
		scanf("%d%d%lld%lld", &e.a, &e.b, &e.g, &e.s);
		--e.a; --e.b;
		if (e.a != e.b)
			ed.push_back(e);
	}
	//disconnected
	sort(ed.begin(), ed.end());
	for (int i = 0; i < ed.size(); ++i) {
		int a = ed[i].a;
		int b = ed[i].b;
		ins(ed[i]);
		if (get(a) != get(b)) {
			p[get(b)] = get(a);
			mx1 = max(mx1, ed[i].g*G);
			mx2 = max(mx2, ed[i].s*S);
			if(v.size()==n-1)
				ans = min(ans, mx1 + mx2);
		}else
			fix(ed[i]);
	}
	if (v.size()==n-1)
		cout << ans << endl;
	else
		cout << -1;
}