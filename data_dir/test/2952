#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>

//#include <cstdint>
//#include <cstdlib>
#include <cassert>
//#include <cctype>
#include <climits>
#include <functional>
#include <numeric>
#include <algorithm>
#include <cmath>
#include <ctime>

#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <array>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); i++)
#define forn1(i, n) for(int i = 1; i <= int(n); i++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define mp make_pair
#define pb push_back
#define x first
#define y second

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld PI = acosl(ld(-1));
const ld EPS = 1e-9;

template <typename T> inline T sqr(const T& x) {
	return x * x;
}

template <typename T> inline T abs(const T& x) {
	return x > 0 ? x : -x;
}

inline bool inside(int x, int y, int n, int m) {
	return x >= 0 && x < n && y >= 0 && y < m;
}

inline int rnd() {
	return abs(rand() ^ (rand() << 15));
}

inline int rnd(int n) {
	assert(n > 0);
	return rnd() % n;
}

inline int rnd(int lf, int rg) {
	return lf + rnd(rg - lf + 1);
}

inline li rndLL() {
	return rnd() * 1LL * rnd() + rnd();
}

const int dx[4] = { -1, 0, +1, 0 };
const int dy[4] = { 0, +1, 0, -1 };

const int dx8[8] = { -1, -1, 0, +1, +1, +1, 0, -1 };
const int dy8[8] = { 0, +1, +1, +1, 0, -1, -1, -1 };

const int N = int(2e5) + 555;

int n, m, a[N][4];

void gen() {

}

bool read() {
	if (scanf("%d %d", &n, &m) != 2) return false;
	forn1(i, n) forn(j, m) assert(scanf("%d", &a[i][j]) == 1);
	return true;
}

bool dp[257][16][16][16][16];

int cnt[256];


void solve() {
	//dp[0][4][4][4][4][0] = true;
	cerr << "???" << endl;
	forn1(i, n) {
		int msk = 0;
		forn(j, m) if (a[i][j]) msk |= (1 << j);
		cnt[msk]++;
	}

	n = 0;
	if (cnt[0]) {
		cout << "YES" << endl;
		return;
	}

	//forn(mask, 256) cnt[mask] = INF;

	/*
	0 1 1
	1 1 0
	0 0 1
	1 0 0
	*/

	forn(mask, (1 << m)) {
		forn(i, min(16, cnt[mask])) {
			n++;
			forn(j, m) if (mask & (1 << j)) a[n][j] = 1;
			else a[n][j] = 0;
		}
	}

	forn1(i, n) forn(j, m) if (a[i][j] == 0) a[i][j] = -1;

	forn1(i, n) {
		//forn(j, m) cerr << a[i][j] << ' '; cerr << endl;
	}

	assert(n <= 16 * 16);
	forn1(i, n) {
		vector<int> v(4, 8);
		forn(j, m) v[j] += a[i][j];
		dp[i][v[0]][v[1]][v[2]][v[3]] = true;
	}

	cerr << "WTF" << endl;

	forn1(i, n - 1) {
		vector<int> v(4);
		forn(c1, 16) forn(c2, 16) forn(c3, 16) forn(c4, 16) {
			if (!dp[i][c1][c2][c3][c4]) continue;
			dp[i + 1][c1][c2][c3][c4] = true;
			if (c1 <= 8 && c2 <= 8 && c3 <= 8 && c4 <= 8) {
				cerr << "i 1 2 c3 c4 == " << i << ' ' << c1 << ' ' << c2 << ' ' << c3 << ' ' << c4 << endl;
				cerr << "FOUND" << endl;
				cout << "YES" << endl;
				return;
			}

			v[0] = c1;
			v[1] = c2;
			v[2] = c3;
			v[3] = c4;
			forn(j, m) {
				v[j] += a[i + 1][j];
			}

			forn(j, m) if (v[j] < 0) v[j] = 0;
			bool can = true;
			forn(j, m) if (v[j] >= 16) can = false;
			if (can) {
				dp[i + 1][v[0]][v[1]][v[2]][v[3]] = true;
			}
		}
	}

	forn(c1, 9) forn(c2, 9) forn(c3, 9) forn(c4, 9) if (dp[n][c1][c2][c3][c4]) {
		cout << "YES" << endl;
		return;
	}

	cout << "NO" << endl;
}

int main() {
#ifdef _DEBUG
	assert(freopen("777.txt", "rt", stdin));
	assert(freopen("output.txt", "wt", stdout));
#endif

	cout << setprecision(10) << fixed;
	cerr << setprecision(10) << fixed;

	int T = 1;

	srand(int(time(NULL)));

	//assert(scanf("%d", &T) == 1);

	forn(i, T) {
#ifdef _DEBUG
		cerr << "TEST == " << i << endl;
#endif

		assert(read());
		//cout << "Case #" << i + 1 << ": ";
		solve();
		//if(i == 1) break;
		cerr << "curTime == " << clock() << " ms" << endl;
	}

#ifdef _DEBUG
	cerr << "TIME == " << clock() << " ms" << endl;
#endif
	return 0;
}