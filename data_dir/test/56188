#pragma GCC optimize("Ofast")
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0);}


int main()
{
//    freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    ios_base::sync_with_stdio(false);


    int n,m,k;
    cin >> n >> m >> k;

    vector<tuple<int,int,int,int> > a(m);
    for(auto& d : a)
        cin >> get<0>(d) >> get<1>(d) >> get<2>(d) >> get<3>(d);

    sort(begin(a), end(a));

    int const maxn = 1000006;
    const long long inf = 1000000000000000000LL;
    vector<long long> ans1(maxn, inf);

    {
        int cnt = 0;
        long long sum = 0;
        vector<int> minCost(n + 1, maxn);
        for(const auto& d : a)
        {
            int day, from, to, cost;
            tie(day, from, to, cost) = d;
            if (to == 0)
            {
                if (cost < minCost[from])
                {
                    if (minCost[from] == maxn)
                        ++cnt;
                    else
                        sum -= minCost[from];
                    minCost[from] = cost;
                    sum += cost;
                    if (cnt == n)
                        ans1[day] = min(ans1[day], sum);
                }
            }
        }
        for(int i = 1; i < ans1.size(); ++i)
            ans1[i] = min(ans1[i], ans1[i - 1]);
    }


    reverse(begin(a), end(a));
    vector<long long> ans2(maxn, inf);
    {
        int cnt = 0;
        long long sum = 0;
        vector<int> minCost(n + 1, maxn);
        for(const auto& d : a)
        {
            int day, from, to, cost;
            tie(day, to, from, cost) = d;

            if (to == 0)
            {
                if (cost < minCost[from])
                {
                    if (minCost[from] == maxn)
                        ++cnt;
                    else
                        sum -= minCost[from];
                    minCost[from] = cost;
                    sum += cost;
                    if (cnt == n)
                        ans2[day] = min(ans2[day], sum);
                }
            }
        }
        for(int i = ans2.size() - 2; i >= 0; --i)
            ans2[i] = min(ans2[i], ans2[i + 1]);
    }

    long long best = inf;


    for(int i = 1; i + k  + 1 < maxn; ++i)
    {
        best = min(best, ans1[i] + ans2[i + k + 1]);
    }
    if (best == inf)
        best = -1;
    cout << best << endl;
}
