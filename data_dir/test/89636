#include <bits/stdc++.h>
using namespace std;
#define REP(i, n) for (int i = 0; i < int(n); i++)
#define FOR(i, a, b) for (int i = a; i < int(b); i++)
#define FOREACH(i, v) for (__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define SIZE(v) ((int)(v).size())
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define ll long long
#define pii pair<int, int>

const int MAX = 100100;
int a[MAX];

bitset<MAX> bs;
long long sieve_size;
int desc[MAX];
vector<int> primes;
const ll mod = 1000000007ll;
ll pots[MAX];

void sieve(ll upperbound){
	sieve_size = upperbound + 1;
	bs.set();
	bs[0] = bs[1] = false;
	for(ll i = 2; i < sieve_size; i++) if(bs[i]){
		for(ll j = i*i; j < sieve_size; j += i) bs[j] = false;
		primes.pb(i);
	}
	pots[0] = 1;
	for(ll i = 1; i < MAX; i++)
		pots[i] = (2ll*pots[i - 1])%mod;
}

int dp[71][550000];
bitset<550000> visited[71];
int mask[MAX];

ll solve(int id, int bmk){
	if(!visited[id][bmk]){
		visited[id][bmk] = true;
		if(id == 0){
			if(bmk == 0) dp[id][bmk] = 1;
			else dp[id][bmk] = 0;
		}
		else{
			if(a[id] > 0){
				dp[id][bmk] = (pots[a[id] - 1]*(solve(id - 1, bmk) + solve(id - 1, bmk^mask[id])))%mod;
			}
			else dp[id][bmk] = solve(id - 1, bmk);
		} 
	}
	//printf("id = %d, bm = %d, ans = %lld\n", id, bmk, dp[id][bmk]);
	return dp[id][bmk];
}

int main(){
	sieve(70);
//	printf("isze = %d\n", SIZE(primes));
//	REP(i, SIZE(primes)) printf("%d ", primes[i]);
//	printf("\n");
	int n; scanf("%d", &n);
	int b;
	REP(i, n){
		scanf("%d", &b);
		a[b]++;
	}
	for(int i = 1; i <= 70; i++){
		REP(j, SIZE(primes)){
			int cnt = 0, ii = i;
			while(ii%primes[j] == 0){
				cnt++;
				ii /= primes[j];
			}
			if(cnt%2 == 1) mask[i] += (1 << j);
		}
	}
	printf("%lld\n", (solve(70, 0) - 1ll + mod)%mod);
}