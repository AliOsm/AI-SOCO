#include<bits/stdc++.h>
using namespace std;
#define MOD 1000000007
#define hell 100000000000000000
#define PI 3.1415926535897932384626
#define int long long int
#define fi first
#define se second
#define pq priority_queue
#define pb push_back
#define IOS ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
#define endl '\n'
#define all(x) x.begin(),x.end()
#define pii pair<int,int>
#define fill(x,y) memset(x,y,sizeof(x));
#define what_is(x)  cerr << #x << " is " << x << endl;
#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
template<typename T> T pow(T a,T b, int m){T ans=1; while(b>0){ if(b%2==1) ans=(ans*a)%m; b/=2; a=(a*a)%m; } return ans%m; }
template<typename T> void swap(T *a,T *b){T temp = *a;*a = *b;*b = temp;return ;}

struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
//deque
/*******************************Template ends**************************************/
std::vector<int> v[100+2];
int n,m;
int dis(int x,int y)
{
    if(x <= y)
    {
        return y-x;
    }
    else
    {
        return n-x+y;
    }
}
signed main()
{
    cin >> n >> m;
    rep(i,0,m)
    {
        int a,b;
        cin >> a >> b;
        v[a].pb(b);
    }
    int ans[n+1];
    fill(ans,0);
    rep(i,1,n+1)
    {
        if(!v[i].size())
            continue;
        int temp = (v[i].size()-1)*n;
        int x = MOD; 
        for(auto j:v[i])
        {
            x = min(x,dis(i,j));
        }
        temp += x;
        ans[i] = temp;
    }
    rep(i,1,n+1)
    {
        int out = 0;
        rep(j,1,n+1)
        {
            if(ans[j] > 0)
                out = max(out,dis(i,j)+ans[j]);
        }
        cout << out << " ";
    }
}