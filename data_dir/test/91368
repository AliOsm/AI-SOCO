#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define f first
#define s second
const int N = 2e5 + 5;
bool vis[N];
vector<int>adj[N];
int n, root, ans, tmp, parent[N], arr[N];
bool dfs(int node, int par)
{
    vis[node] = 1;
    for(auto child : adj[node])
    {
        if(!vis[child])
            dfs(child, node);
        else if(vis[child] && child != par)
            tmp = node;
    }
    return ans;
}
int main()
{
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    cin >> n;
    bool found = 0;
    for(int i = 1;i <= n;++i)
    {
        int par;
        cin >> par;
        parent[i] = par;
        if(i != par)
        {
            adj[par].push_back(i);
            adj[i].push_back(par);
        }
        else
        {
            found = 1;
            root = i;
        }
    }
    for(int i = 1;i <= n;++i)
        if(!vis[i])
        {
            tmp = -1;
            dfs(i, i);
            if(~tmp)
                parent[tmp] = tmp;
        }
    for(int i = 1;i <= n;++i)
        if(parent[i] == i && !root)
            root = i;
    for(int i = 1;i <= n;++i)
        if(parent[i] == i)
            parent[i] = root, ++ans;
    cout << ans - found << '\n';
    for(int i = 1;i <= n;++i)
        cout << parent[i] << ' ';
    return 0;
}