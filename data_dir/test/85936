#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <assert.h>
#include <fstream>
#include <iomanip>
#include <bitset>
#include <string>
#include <cstdio>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>

using namespace std;

const int N = 100001;

int n, q;
int a[N];
int c[N];
int posRight[N], posLeft[N];

long long solve(int l, int r)
{
	int m = 0;
	for (int i = l + 1; i <= r; ++i)
		c[m++] = abs(a[i] - a[i - 1]);
	posRight[m - 1] = m;
	for (int i = m - 2; i >= 0; --i)
	{
		int j = i + 1;
		while (j != m && c[i] >= c[j])
			j = posRight[j];
		posRight[i] = j;
	}
	posLeft[0] = -1;
	for (int i = 1; i < m; ++i)
	{
		int j = i - 1;
		while (j != -1 && c[i] > c[j])
			j = posLeft[j];
		posLeft[i] = j;
	}
	long long ans = 0;
	for (int i = 0; i < m; ++i)
	{
		ans += 1ll * (i - posLeft[i]) * (posRight[i] - i) * c[i];
	}
	return ans;
}


int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
	scanf("%d%d", &n, &q);
	for (int i = 0; i < n; ++i)
		scanf("%d", &a[i]);
	for (int i = 0; i < q; ++i)
	{
		int l, r;
		scanf("%d%d", &l, &r); l--; r--;
		printf("%I64d\n", solve(l, r));
	}

    return 0;
}