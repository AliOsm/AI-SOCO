#include <iostream>

using namespace std;

int permutation[100];
long long fact[100];

void writeFact (int n)
{
    fact [0] = 1;
    for (int i = 1; i <= n; i++)
        fact[i] = fact[i - 1] * i;
}

void kthPermutation(int n, int i)
{
    i--;
    int j, k = 0;
    for (k = 0; k < n; ++k)
    {
        permutation[k] = i / fact[n - 1 - k];
        i = i % fact[n - 1 - k];
    }
    for (k = n - 1; k > 0; k--)
        for (j = k - 1; j >= 0; j--)
            if (permutation[j] <= permutation[k])
                permutation[k]++;
    for (i = 0; i < n; i++)
        permutation[i]++;
}

long long lucky[100000];

void findLucky (int n)
{
    lucky[0] = 4;
    lucky[1] = 7;
    int i = 0, now = 2;
    while (lucky[i] < n)
    {
        lucky[now] = lucky[i] * 10 + 4;
        now++;
        lucky[now] = lucky[i] * 10 + 7;
        now++;
        i++;
    }
}

int aksFact (int k)
{
    int i = 0;
    while (k > fact[i])
        i++;
    return i;
}

int sumLucky (int n)
{
    int i = 0;
    while (lucky[i] <= n)
        i++;
    return i;
}

bool isLucky (int n,int m)
{
    while (n > 0)
    {
        if (n % 10 != 4 && n % 10 != 7)
            return false;
        n /= 10;
    }
    while (m > 0)
    {
        if (m % 10 != 4 && m % 10 != 7)
            return false;
        m /= 10;
    }
    return true;
}

int main()
{
    writeFact(15);
    int n, k;
    cin >> n >> k;
    if (n < 14 && k > fact[n])
    {
        cout << -1 << endl;
        return 0;
    }
    findLucky(n + 100);
    int a = aksFact (k);
    int ans = sumLucky(n - a);
    kthPermutation(a,k);
    for (int i = 0; i < a; i++)
    {
        permutation[i] += n - a;
        ans += isLucky(permutation[i] , n - a + i + 1);
    }
    cout << ans << endl;
    return 0;
}