// Author: πα

#include <bits/stdc++.h>
using namespace std;

#define FastIO ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long

const long INF = 1LL << 62;
const int N = 1e5 + 5;

vector<pair<int, long>> g[N];

vector<int> dijkstra(vector<pair<int, long>> g[], int source, int destination)
{
    vector<long> arrival(N, INF), departure(N, INF);
    vector<int> vis(N), parent(N), ans;
    arrival[source] = 0;
    set<pair<int, int>> s;
    s.insert({0, source});
    while(!s.empty())
    {
        auto [ignore, u] = *s.begin();
        s.erase(s.begin());
        vis[u] = 1;
        departure[u] = arrival[u];
        for(auto [v, w]: g[u])
        {
            if(arrival[v] > departure[u] + w)
            {
                s.erase({arrival[v], v});
                arrival[v] = departure[u] + w;
                s.insert({arrival[v], v});
                parent[v] = u;
            }
        }
    }
    if(!vis[destination])
        return ans;

    ans.push_back(destination);
    int v = destination;
    while(parent[v])
        ans.push_back(v = parent[v]);
    reverse(ans.begin(), ans.end());
    return ans;
}

int main()
{
    FastIO;
    int n, i, m, u, v, w;
    cin >> n >> m;
    while(m--)
    {
        cin >> u >> v >> w;
        g[u].push_back({v, w});
        g[v].push_back({u, w});
    }
    vector<int> ans = dijkstra(g, 1, n);
    if(ans.empty())
        return cout << -1, 0;
    for(auto it: ans)
        cout << it << ' ';
    return 0;
}
