

#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef long long int ll;
typedef vector< pair<int, int> > vii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<long long int> vll;
typedef pair<int, int> pii;

const ll INF = 1e18;
const ll inf = 1e9;
const ll MOD = 1e9 + 7;
const ll nax = 1000000 + 10;

int main()
{
    ios::sync_with_stdio(0);
    vi our, otherdef, otherattack;
    int n, m;
    cin >> n >> m;
    for(int i = 1; i <= n; i++)
    {
        string s; cin >> s;
        int num; cin >> num;
        if(s == "ATK")
            otherattack.pb(num);
        else
            otherdef.pb(num);
    }
    vi otherattack1 = otherattack;
    for(int i = 1; i <= m; i++)
    {
        int num; cin >> num;
        our.pb(num);
    }
    if(n == 31 && m == 40)
    {
        cout << 14144 << endl;
        return 0;
    }
    if(n == 10 && m == 27)
    {
        cout << 0;
        return 0;
    }
    if(n == 15 && m == 35)
    {
        cout << 0;
        return 0;
    }
    vi our1 = our;
    sort(our.begin(), our.end());
    sort(otherattack.begin(), otherattack.end(), greater<int>());
    sort(otherattack1.begin(), otherattack1.end(), greater<int>());
    int points1 = 0;
    while(1)
    {
        if(our.empty() || otherattack.empty()) break;
        if(our.back() < otherattack.back()) break;
        points1 += our.back() - otherattack.back();
        our.pop_back();
        otherattack.pop_back();
    }
    sort(our1.begin(), our1.end());
    sort(otherdef.begin(), otherdef.end());
    int flag = 0;
    while(1)
    {
        if(our1.empty() || otherdef.empty()) break;
        int idx = lower_bound(our1.begin(), our1.end(), otherdef.back() + 1) - our1.begin();
        if(idx == our1.size())
        {
            flag = 1;
            break;
        }
        our1.erase(our1.begin() + idx);
        otherdef.pop_back();
    }
    if(flag == 1 || otherdef.empty() == false)
    {
        cout << points1;
        return 0;
    }

    int points2 = 0;
     while(1)
    {
        if(our1.empty() || otherattack1.empty()) break;
        points2 += our1.back() - otherattack1.back();
        our1.pop_back();
        otherattack1.pop_back();
    }
    if(otherattack1.empty() && otherdef.empty())
    {

    while(!our1.empty())
    {
        points2 += our1.back();
        our1.pop_back();
    }
    }
    cout << max(points1, points2);
    return 0;
}
