#include <bits/stdc++.h>

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//#pragma GCC optimize("Ofast")
//1.0 * clock() / CLOCKS_PER_SEC

#define fi first
#define se second
#define ll long long
#define dl double long

using namespace std;

const ll NN = 3e3 + 7;
const int N = 3e5 + 7;
const int M = 22;
const int mod = 1e9 + 7;
const ll inf = 1e18 + 7;
const dl rf = 1e-14;
const int B = sqrt(N);

int a,b,c;
int n,m;
ll p[N];
int d1[N];
int d2[N];
int d3[N];
int p1[N];
int p2[N];
int p3[N];
vector < int > v[N];

void solve1()
{
    cin >> n >> m >> a >> b >> c;
    for( int i = 1; i <= m; i++ ){
        cin >> p[i];
    }
    sort( p + 1 , p + m + 1 );
    for( int i = 1; i <= m; i++ ){
        p[i] += p[i - 1];
    }
    for( int i = 1; i <= n; i++ ){
        v[i].clear();
        d1[i] = d2[i] = d3[i] = 1e9;
        p1[i] = p2[i] = p3[i] = 0;
    }
    for( int i = 1; i <= m; i++ ){
        int x,y;
        cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }
    d1[a] = d2[b] = d3[c] = 0;
    queue < int > q;
    q.push(a);
    while( !q.empty() ){
        int x = q.front();
        q.pop();
        for( auto y : v[x] ){
            if( d1[y] == 1e9 ){
                d1[y] = d1[x] + 1;
                p1[y] = x;
                q.push(y);
            }
        }
    }
    q.push(b);
    while( !q.empty() ){
        int x = q.front();
        q.pop();
        for( auto y : v[x] ){
            if( d2[y] == 1e9 ){
                d2[y] = d2[x] + 1;
                p2[y] = x;
                q.push(y);
            }
        }
    }
    q.push(c);
    while( !q.empty() ){
        int x = q.front();
        q.pop();
        for( auto y : v[x] ){
            if( d3[y] == 1e9 ){
                d3[y] = d3[x] + 1;
                p3[y] = x;
                q.push(y);
            }
        }
    }
    ll ans = 2e18;
    for( int i = 1; i <= n; i++ ){
        if( d1[i] + d2[i] + d3[i] > m )continue;
        ll cnt = p[d2[i]] * 2;
        cnt += p[d1[i] + d3[i] + d2[i]] - p[d2[i]];
        ans = min( ans , cnt );
    }
    cout << ans << "\n";
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    //freopen( "input.txt" , "r" , stdin );
    //freopen( "output.txt" , "w" , stdout );

    int cghf = 1;cin >> cghf;
    while( cghf-- ){
        solve1();
    }
}
