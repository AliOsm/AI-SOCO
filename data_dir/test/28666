#include<bits/stdc++.h>
using namespace std;

typedef double                 ld;
typedef long long                   ll;
typedef pair<int,int>               pii;
typedef pair<ll,ll>                 pll;
typedef pair<string , string>       pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define F                           first
#define S                           second
#define sep                         ' '
#define endl                        '\n'
#define file_io                     freopen("input.txt" , "r+" , stdin) ; freopen("output.txt" , "w+" , stdout);
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define error(x)                    cerr << "$$$ " << x << '\n';
#define error2(x,y)                 cerr << "#F : " << x << "      #S : " << y << '\n';
#define kill(x)                     return cout << x << endl , 0;
#define pb                          push_back

const ll MXN = 3e3 + 10;
const ll MXM = 5e2 + 10;
const ll MX5 = 2e5 + 10;
const ll MX6 = 1e6 + 10;
const ll INF = 8e18;
const ld eps = 1e-9;
const ll MOD = 1e9 + 7; //998244353;

ll power(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * power(a * a % md, b / 2, md) % md : power(a * a % md, b / 2, md) % md));
}
ll bmm(ll a,ll b){
    return (a%b==0 ? b : bmm(b,a%b));
}
string base2(ll n){
    string a="";while(n>=2){a+=(char)(n%2+'0');n/=2;}a+=(char)(n+'0');reverse(all(a));return a;
}

ll n, m, par[MX5], SZ[MX5], Jad[MX5], Max[MX5];
string s[MX5];
set<ll> M;


ll Find(ll u){
    if(par[u] == u){
        return u;
    }
    par[u] = Find(par[u]);
    return par[u];
}

void Union(ll u, ll v){
    ll p1 = Find(u), p2 = Find(v);
    if(p1 == p2){
        return;
    }
    if(SZ[p1] > SZ[p2]){
        par[p2] = p1;
        SZ[p1] += SZ[p2];
        M.erase(p2);
    }
    else{
        par[p1] = p2;
        SZ[p2] += SZ[p1];
        M.erase(p1);
    }
    return;
}

int main(){
    fast_io
    //file_io
    //! E. Minimum spanning tree for each edge
    ll n;
    cin >> n;
    for(int i = 0; i < n; i ++){
        cin >> s[i];
        for(int j = 0; j < s[i].size(); j ++){
            SZ[s[i][j]] = 1;
            par[s[i][j]] = s[i][j];
            M.insert(s[i][j]);
        }
    }
    for(int i = 0; i < n; i ++){
        for(int j = 1; j < s[i].size(); j ++){
            Union(s[i][j], s[i][0]);
        }
    }
    cout << M.size();
    return 0;
}

//! N.N
