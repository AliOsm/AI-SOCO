//#define ONLINE_JUDGE

#if defined(ONLINE_JUDGE)
#define _SECURE_SCL 0
#endif

#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <functional>
#include <memory>
#include <cmath>
#include <climits>
#include <numeric>
#include <tuple>
#include <memory.h>
#include <stdint.h>

#if !defined(__GNUC__)
#else // !defined(__GNUC__)
#define _CrtDbgBreak() __builtin_trap()
#endif // !defined(__GNUC__)

#if defined(ONLINE_JUDGE)
#define LOCAL_TEST 0
#else 
#define LOCAL_TEST 1
#endif

#if LOCAL_TEST
struct AssertsCounter
{
    AssertsCounter(): counter(0) {}
    ~AssertsCounter() { std::cout << std::endl << "DIAG: " << (counter == 0 ? "OK" : "!!!") << " Asserts count: " << counter << std::endl; }
    void Increment() { counter++; }
    uint32_t counter;
};
AssertsCounter g_assertsCounter;
#define LOCAL_ASSERT(expr) { if (!(expr)) {std::cout << "ASSERT FAILED (" << __LINE__ << "): '" << #expr << "'" << std::endl; g_assertsCounter.Increment(); _CrtDbgBreak(); } }
#define LOCAL_ASSERT_EQ(expr1, expr2) { if ((expr1) != (expr2)) {std::cout << "ASSERT FAILED (" << __LINE__ << "): '" << #expr1 << "' == '" << #expr2 << "' (" << (expr1) << " vs " << (expr2) << "')" << std::endl; g_assertsCounter.Increment(); _CrtDbgBreak(); } }
#else
#define LOCAL_ASSERT(expr)
#define LOCAL_ASSERT_EQ(expr1, expr2)
#endif

typedef std::string string8_t;
typedef long double ld_t;

typedef std::vector<size_t> vector_size_t;
typedef std::vector<int32_t> vector_int32_t;
typedef std::vector<uint32_t> vector_uint32_t;
typedef std::vector<int64_t> vector_int64_t;
typedef std::vector<uint64_t> vector_uint64_t;
typedef std::vector<string8_t> vector_string8_t;

typedef std::vector<vector_size_t> vector_2d_size_t;
typedef std::vector<vector_int32_t> vector_2d_int32_t;
typedef std::vector<vector_uint32_t> vector_2d_uint32_t;
typedef std::vector<vector_int64_t> vector_2d_int64_t;
typedef std::vector<vector_uint64_t> vector_2d_uint64_t;

typedef std::set<size_t> set_size_t;
typedef std::set<int32_t> set_int32_t;
typedef std::set<uint32_t> set_uint32_t;
typedef std::set<int64_t> set_int64_t;
typedef std::set<uint64_t> set_uint64_t;
typedef std::set<string8_t> set_string8_t;

typedef std::multiset<size_t> multiset_size_t;
typedef std::multiset<string8_t> multiset_string8_t;

// Auxiliary functions definition
// 
template<typename T> void UpdateMin(T& a, const T b) {a = std::min(a, b);}
template<typename T> void UpdateMax(T& a, const T b) {a = std::max(a, b);}

static const ld_t Eps = 1.0e-09;
template<typename T> bool IsEqual(const T a, const T b) { return std::abs(a - b) < Eps; }
template<typename T> bool IsGreater(const T a, const T b) { return a > b + Eps; }
template<typename T> bool IsLess(const T a, const T b) { return a + Eps < b; }

template<typename T> string8_t ToStr(const T& val) { std::ostringstream ostr; ostr << val; return ostr.str(); }
template<typename T> bool FromStr(const string8_t& str, T& val) {std::istringstream istr(str); istr >> val; return !!istr; }

template<typename T> std::istream& operator>>(std::istream& ist, std::vector<T>& data)
{
    LOCAL_ASSERT(!!ist);
    for (size_t i = 0; i < data.size(); i++) { ist >> data[i]; }
    return ist;
}

template<typename T> T Read(std::istream& ist)
{
    LOCAL_ASSERT(!!ist);
    T val; ist >> val; return val;
}

template<typename T> std::ostream& operator<<(std::ostream& ost, const std::vector<T>& data)
{
    for (size_t i = 0; i < data.size(); i++) { if (i != 0) { ost << ' '; } ost << data[i]; }
    return ost;
}

#if defined(ONLINE_JUDGE)
template<size_t id> class StopWatch { };
#else
#include <library/lib_stopwatch.h>
#include <library/lib_random.h>
library::random::Rand g_rnd;
#endif

struct pt_t
{
    pt_t(): x(0), y(0), index(0) { }

    int64_t x;
    int64_t y;
    size_t index;
};

typedef std::vector<pt_t> vector_pt_t;

struct LessX
{
    bool operator()(const pt_t& lv, const pt_t& rv) const
    {
        return lv.x < rv.x;
    }
};

struct LessY
{
    bool operator()(const pt_t& lv, const pt_t& rv) const
    {
        return lv.y < rv.y;
    }
};

int64_t MakeValidSide(int64_t d)
{
    if (d == 0)
        return 1;
    return (d + 1) / 2;
}

int64_t GetSquare(const int64_t dx, const int64_t dy)
{
    int64_t s = MakeValidSide(dx);
    s *= MakeValidSide(dy);
    return s;
}

bool IsValidAns(const vector_pt_t& byX, const vector_pt_t& byY, const size_t k, const size_t xBegin, const size_t xEnd, const size_t yBegin, const size_t yEnd, int64_t& square)
{
    LOCAL_ASSERT(xBegin + xEnd <= k);
    LOCAL_ASSERT(yBegin + yEnd <= k);
    LOCAL_ASSERT(byX.size() == byY.size());
    const size_t n = byX.size();

    set_size_t indexes;
    for (size_t i = 0; i < xBegin; i++) { indexes.insert(byX[i].index); if (indexes.size() > k) return false; }
    for (size_t i = 0; i < xEnd; i++) { indexes.insert(byX[n - i - 1].index); if (indexes.size() > k) return false; }
    for (size_t i = 0; i < yBegin; i++) { indexes.insert(byY[i].index); if (indexes.size() > k) return false; }
    for (size_t i = 0; i < yEnd; i++) { indexes.insert(byY[n - i - 1].index); if (indexes.size() > k) return false; }

    LOCAL_ASSERT(xBegin + xEnd <= n - 1);
    LOCAL_ASSERT(yBegin + yEnd <= n - 1);
    const int64_t dx = byX[n - 1 - xEnd].x - byX[0 + xBegin].x;
    const int64_t dy = byY[n - 1 - yEnd].y - byY[0 + yBegin].y;
    square = GetSquare(dx, dy);
    return true;
}

int64_t GetAns(const vector_pt_t& pts, const size_t k)
{
    const size_t n = pts.size();
    if (k >= n - 1)
        return GetSquare(0, 0);

    vector_pt_t byX(pts);
    vector_pt_t byY(pts);
    std::sort(byX.begin(), byX.end(), LessX());
    std::sort(byY.begin(), byY.end(), LessY());

    int64_t bestAns = GetSquare(byX[n - 1].x - byX[0].x, byY[n - 1].y - byY[0].y);

    for (size_t xBegin = 0; xBegin <= k; xBegin++)
    {
        for (size_t xEnd = 0; xEnd <= k && xEnd + xBegin <= k; xEnd++)
        {
            for (size_t yBegin = 0; yBegin <= k; yBegin++)
            {
                for (size_t yEnd = 0; yEnd <= k && yEnd + yBegin <= k; yEnd++)
                {
                    int64_t sq;
                    if (IsValidAns(byX, byY, k, xBegin, xEnd, yBegin, yEnd, sq))
                    {
                        if (bestAns > sq)
                        {
                            bestAns = sq;
                        }
                    }
                }
            }
        }
    }


    return bestAns;
}

bool Solve(std::istream& ist, std::ostream& ost, const bool multipleTestMode)
{
    StopWatch<1> sw; (void)sw;

    // 
    size_t n, k;
    ist >> n >> k;

    if (multipleTestMode && !ist)
        return false;

#if LOCAL_TEST
    ost << std::endl << "Next test" << std::endl;
#endif

    vector_pt_t pts(n);
    for (size_t i = 0; i < n; i++)
    {
        int64_t x1, y1, x2, y2;
        ist >> x1 >> y1 >> x2 >> y2;
        pts[i].x = x1 + x2;
        pts[i].y = y1 + y2;
        pts[i].index = i;
    }

    const int64_t bestAns = GetAns(pts, k);
    ost << bestAns << std::endl;
    
    return multipleTestMode;
}


#if LOCAL_TEST
void Test()
{
    using namespace library::random;
    const auto genVector = GenFactory::CreateGenVector(GenRange<size_t>(2, 10), GenRange<int32_t>(-100, +200));

    for (size_t t = 0; t < 10; t++)
    {
        const vector_int32_t data = genVector();
        // size_t ans = GetAns(data);
    }
}
#endif

int main(int argc, const char *argv[])
{
#if LOCAL_TEST
    Test();
#endif

    std::ios_base::sync_with_stdio(false);
    std::istream* ist = &std::cin;
    std::ostream* ost = &std::cout;
    
    std::unique_ptr<std::istream> fileInput;
    
    if (argc > 1)
    {
        fileInput.reset(new std::ifstream(argv[1]));
        if (!(*fileInput))
        {
            std::cout << "File not found: " << argv[1] << std::endl;
        }
        ist = fileInput.get();
    }    
    
#if defined(ONLINE_JUDGE)
    Solve(*ist, *ost, false);
#else
    while(Solve(*ist, *ost, true)) {};
#endif
}
