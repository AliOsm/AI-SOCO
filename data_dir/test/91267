#include <bits/stdc++.h>
using namespace std;
// g++ -std=c++11 -o out sol.cc && ./out

int main() {
	// ios_base::sync_with_stdio(false); cin.tie(0);
	int n; cin >> n; // voters
	int m; cin >> m; // parties
	vector<pair<int, int>> voters;
	int have_votes = 0;
	for (int i = 0; i < n; i++) {
		int p; cin >> p; p--;
		int c; cin >> c;
		voters.push_back(make_pair(p, c));
		if (p == 0) have_votes++;
	}
	auto solve_for = [&] (int max_other) -> long long {
		vector<vector<int>> costs(m - 1);
		for (auto p : voters) {
			if (p.first == 0) continue;
			costs[p.first - 1].push_back(p.second);
		}
		for (auto& cost : costs) {
			sort(cost.begin(), cost.end());
			reverse(cost.begin(), cost.end());
		}
		long long res = 0;
		int extra_votes = 0;
		for (auto& cost : costs) {
			while (cost.size() > max_other) {
				res += cost[cost.size() - 1];
				cost.erase(cost.begin() + cost.size() - 1);
				extra_votes++;
			}
		}
		vector<int> remaining;
		for (const auto& cost : costs) for (const auto c : cost) remaining.push_back(c);
		sort(remaining.begin(), remaining.end());
		reverse(remaining.begin(), remaining.end());
		while (have_votes + extra_votes <= max_other) {
			extra_votes++;
			res += remaining[remaining.size() - 1];
			remaining.erase(remaining.begin() + remaining.size() - 1);
		}
		return res;
	};
	long long res = (long long) 1e18;
	for (int max_other = 0; max_other < n; max_other++) {
		long long temp = solve_for(max_other);
		res = min(res, temp);
	}
	cout << res << endl;
}