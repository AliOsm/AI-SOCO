#include<bits/stdc++.h>
#include<ext/numeric>
using namespace std;
using namespace __gnu_cxx;

const int MAX = 2e5 + 5;
typedef vector<int> vi;
#define CLR(a,x) memset(a,x,sizeof(a))
#define sz(s) (int)s.size()
int n, a[MAX], b[MAX], q;
vi bid[MAX];
bool vis[MAX];

struct comp {
	bool operator ()(const int& l, const int& r) const {
		return bid[l].back() < bid[r].back();
	}
};

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
#endif
	set<int, comp> people;
	cin >> n;
	for (int i = 0; i < n; ++i)
		scanf("%d%d", &a[i], &b[i]), bid[a[i]].push_back(b[i]), vis[a[i]] = 1;
	for (int i = 1; i <= n; ++i)
		if (!bid[i].empty())
			people.insert(i);
	cin >> q;
	for (int i = 1; i <= q; ++i) {
		int k;
		scanf("%d", &k);
		vi erased;
		for (int j = 0; j < k; ++j) {
			int l;
			scanf("%d", &l);
			if (vis[l]) {
				erased.push_back(l);
				people.erase(l);
			}
		}
		if (people.empty())
			puts("0 0");
		else {
			auto it = people.end();
			--it;
			int W = *it;
			if (sz(people) == 1)
				printf("%d %d\n", W, bid[W][0]);
			else {
				--it;
				int W2 = *it;
				int l = 0, r = sz(bid[W]);
				while (l < r) {
					int mid = (l + r) / 2;
					if (bid[W][mid] > bid[W2].back())
						r = mid;
					else
						l = mid + 1;
				}
				printf("%d %d\n", W, bid[W][l]);
			}
		}
		for (auto p : erased)
			people.insert(p);
	}
}
