// KALAM
# include<bits/stdc++.h>

using namespace std;

const int N = 1000000 + 77 , NN = 7000000 + 77;
int q , D[N];
inline vector < int > Get(int x){
   vector < int > V;
   while(x > 1){
      int d = D[x];
      x /= D[x];
      if(D[x] != d){
         V.push_back(d);
      }
   }
   return V;
}
inline int Get(int t , vector < int > & V){
   int res = 0 , sz = V.size();
   for(int msk = 0;msk < (1 << sz);++ msk){
      int val = 1;
      for(int i = 0;i < sz;++ i){
         if(msk & (1 << i)){
            val *= V[i];
         }
      }
      if(__builtin_popcount(msk) & 1){
         res -= t / val;
      }
      else {
         res += t / val;
      }
   }
   return res;
}
inline int Solve(int x , int p , int k){
   vector < int > V = Get(p);
   int tx = Get(x , V);
   k += tx;
   int le = 1 , ri = NN - 1;
   while(ri - le > 1){
      int mid = ((le + ri) >> 1);
      if(Get(mid , V) >= k){
         ri = mid;
      }
      else {
         le = mid;
      }
   }
   return ri;
}
int main(){
   for(int i = 2;i < N;++ i){
      if(D[i] == 0){
         for(int j = i;j < N;j += i){
            D[j] = i;
         }
      }
   }
   ios::sync_with_stdio(0);cin.tie(0);
   cin >> q;
   while(q --){
      int x , p , k;
      cin >> x >> p >> k;
      cout << Solve(x , p , k) << '\n';
   }
   return 0;
}
