#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<string>
#include<math.h>
#include<queue>
#include<stack>
#include<sstream>
#include<stdio.h>
#include<map>
#include<set>
#include<memory.h>
#include<algorithm>
#include<vector>
using namespace std;
typedef long long ll;
ll gcd(ll a, ll b){
    if (!b)
        return a;
    return gcd(b, a%b);
}
ll lcm(ll a, ll b){
    return b / gcd(a, b)*a;
}
#define FOR(I,N) for(int(i)=0;i<int(N);++i)
#define FORK(I,N,K) for(int(i)=0;i<int(N);i+=int(K))
#define mp make_pair
int n, x, k;
pair<int, int> g[300001];
ll s[300001];
ll p[300001];
ll oo = 1ll << 62;
int main(){
    cin >> n;
    for (int i = 1; i <= n; ++i){
        scanf("%d", &x);
        g[i].first = x;
        g[i].second = i;
    }
    cin >> k;
    sort(g + 1, g + n + 1);
    for (int i = 1; i <= n; ++i)
        s[i] = s[i - 1] + g[i].first;
    ll m = k - 1;
    for (int i = 1; i <= n; ++i){
        int e = min(i + k - 1, n);
        if (e != i + k - 1)
            --m;
        p[i] = -g[i].first * m + s[e] - s[i];
    }
    ll best = oo, idx;
    ll cur = 0;
    for (int i = 1; i <= n; ++i){
        if (i < k){
            cur += 1ll * (i - 1)*g[i].first - s[i - 1];
            continue;
        }
        int E = i;
        int S = E - k + 1;
        cur += 1ll * (k - 1)*g[i].first - (s[E - 1] - s[S - 1]);
        if (cur < best){
            best = cur;
            idx = S;
        }
        cur -= p[S];
    }
    for (int i = 0; i < k; ++i)
        printf("%d ", g[i + idx].second);
    cin >> n;
}