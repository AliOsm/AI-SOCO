#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
 
using namespace std;
using namespace __gnu_pbds;
 
#define debug(s) cerr << #s << " = " << s << '\n'
#define all(v) (v).begin(), (v).end()
#define mem(a,val) memset(a, val, sizeof a)
 
#define maxn 300010
#define INF 1e15
#define eps 1e-9
#define pi acos(-1.0)
#define ff first
#define ss second
#define endl '\n'
typedef long long ll;
 
//typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

int n, m;
int l[maxn], r[maxn], q[maxn];
int is[40][maxn], cum[40][maxn], sum[40][maxn];
ll arr[maxn];

bool check(int lft, int rgt, ll val) {
  for (int bit = 0; bit <= 30; ++bit) {
    bool on = false;
    int tot = sum[bit][rgt] - sum[bit][lft - 1];
    if (val & (1 << bit)) {
      if (tot != rgt - lft + 1) return false;
    }
    else {
      if (tot == rgt - lft + 1) return false;
    }
  }
  return true;
}

int main() {
  scanf("%d %d", &n, &m);
  for (int i = 0; i < m; ++i) {
    scanf("%d %d %d", &l[i], &r[i], &q[i]);
    for (int bit = 0; bit <= 30; ++bit) {
      if (q[i] & (1 << bit)) {
        is[bit][l[i]]++;
        is[bit][r[i] + 1]--;
      }
    }
  }
  for (int bit = 0; bit <= 30; ++bit) {
    for (int i = 1; i <= n; ++i) {
      cum[bit][i] = cum[bit][i - 1] + is[bit][i];
    }
  }
  for (int i = 1; i <= n; ++i) {
    for (int bit = 0; bit <= 30; ++bit) {
      if (cum[bit][i]) arr[i] += (1 << bit);
    }
  }
  for (int bit = 0; bit <= 30; ++bit) {
    for (int i = 1; i <= n; ++i) {
      sum[bit][i] = sum[bit][i - 1] + (bool)(arr[i] & (1 << bit));
    }
  }
  bool flag = true;
  for (int i = 0; i < m; ++i) {
    if (!check(l[i], r[i], q[i])) {
      flag = false;
      break;
    }
  }
  if (!flag) {
    puts("NO");
    return 0;
  }
  puts("YES");
  for (int i = 1; i <= n; ++i) printf("%d ", arr[i]);
}