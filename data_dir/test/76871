#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
ordered_set;
#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<pii, int> para;
const int inf = 1e9 + 7;
const ll maxN = 1e6 + 5;
const ll MOD = 1e9 + 7;

int n, m, p;
pii weap[maxN], arm[maxN];
para mon[maxN];
int minWeapCost[maxN], minArmCost[maxN];
int t[4 * maxN], lazy[4 * maxN];

void push(int v) {
    t[v*2] += lazy[v];
    lazy[v*2] += lazy[v];
    t[v*2+1] += lazy[v];
    lazy[v*2+1] += lazy[v];
    lazy[v] = 0;
}

void update(int v, int tl, int tr, int l, int r, int addend) {
	//cout << tl << " " << tr << " " << l << " " << r << endl;
    if (l > r) 
        return;
    if (l == tl && tr == r) {
        t[v] += addend;
        lazy[v] += addend;
    } else {
        push(v);
        int tm = (tl + tr) / 2;
        update(v*2, tl, tm, l, min(r, tm), addend);
        update(v*2+1, tm+1, tr, max(l, tm+1), r, addend);
        t[v] = max(t[v*2], t[v*2+1]);
    }
}

int query(int v, int tl, int tr, int l, int r) {
    if (l > r)
        return -inf;
    if (l <= tl && tr <= r)
        return t[v];
    push(v);
    int tm = (tl + tr) / 2;
    return max(query(v*2, tl, tm, l, min(r, tm)), 
               query(v*2+1, tm+1, tr, max(l, tm+1), r));
}

vector<pii> distinctWeapons() {
	vector<pii> ans = {weap[0]};
	RI(i, n - 1) {
		if (weap[i].st != weap[i - 1].st) {
			ans.pb(weap[i]);
		}
	}
	return ans;
}

vector<pii> distinctArmors() {
	vector<pii> ans = {arm[0]};
	RI(i, m - 1) {
		if (arm[i].st != arm[i - 1].st) {
			ans.pb(arm[i]);
		}
	}
	return ans;
}

int32_t main() {
	ios_base::sync_with_stdio(0);
	cin >> n >> m >> p;
	REP(i, n) {
		cin >> weap[i].st >> weap[i].nd;
	}
	sort(weap, weap + n);
	vector<pii> weapons = distinctWeapons();
	n = sz(weapons);
	
	minWeapCost[n] = inf;
	FORD(i, n - 1, 0) {
		minWeapCost[i] = min(minWeapCost[i + 1], weapons[i].nd);
	}
	
	REP(i, m) {
		cin >> arm[i].st >> arm[i].nd;
	}
	sort(arm, arm + m);
	vector<pii> armors = distinctArmors();
	m = sz(armors);
	minArmCost[m] = inf;
	int maxim = armors[m - 1].st - 1;
	FORD(i, m - 1, 0) {
		minArmCost[i] = min(minArmCost[i + 1], armors[i].nd);
		int x = 1;
		if (i > 0) x = armors[i - 1].st;
		update(1, 1, maxN, x, armors[i].st - 1, -minArmCost[i]);
	}
	
	bool f = false;
	REP(i, p) {
		cin >> mon[i].st.st >> mon[i].st.nd >> mon[i].nd;
		if (mon[i].st.st < weapons[n - 1].st) {
			f = true;
			update(1, 1, maxN, mon[i].st.nd, maxim, mon[i].nd);
		}
	}
	sort(mon, mon + p);
	int ans = max(-minWeapCost[0] - minArmCost[0], query(1, 1, maxN, 1, maxim) - minWeapCost[n - 1]);
	int monPtr = p - 1;
	FORD(i, n - 2, 0) {
		while (monPtr >= 0 && mon[monPtr].st.st >= weapons[i].st) {
			if (mon[monPtr].st.st < weapons[n - 1].st)
				update(1, 1, maxN, mon[monPtr].st.nd, maxim, -mon[monPtr].nd);
			monPtr--;
		}
		ans = max(ans, -minWeapCost[i] + query(1, 1, maxN, 1, maxim));
	}
	cout << ans << endl;
	return 0;
}
