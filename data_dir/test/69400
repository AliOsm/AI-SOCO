#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse2")
#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
#define int long long
using namespace std;
using namespace __gnu_pbds;
typedef tree<pair <int, int>, null_type, less<pair <int, int>>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

int n, m, x = 0;
int a[300010], use[300010];

struct Tr {
  Tr *l = NULL, *r = NULL;
  int cnt = 0, sum = 0;
} tr;

void init (Tr *rt, int deep) {
  if (deep == 0) {
    rt -> sum = 1;
    return;
  }
  init (rt -> l = new Tr(), deep - 1);
  init (rt -> r = new Tr(), deep - 1);
  rt -> sum = (rt -> l -> sum) + (rt -> r -> sum);
}

void add (Tr *rt, int x) {
  for (int i = 19; i >= 0; i--) {
    if (x & (1 << i)) {
      rt = rt -> r;
    } else {
      rt = rt -> l;
    }
    rt -> cnt += 1;
  }
}

int get (Tr *rt, int x) {
  int res = 0;
  for (int i = 19; i >= 0; i--) {
    if (x & (1 << i)) {
      if (rt -> r -> cnt == rt -> r -> sum) {
        rt = rt -> l;
        res |= (1 << i);
      } else {
        rt = rt -> r;
      }
    } else {
      if (rt -> l -> cnt == rt -> l -> sum) {
        rt = rt -> r;
        res |= (1 << i);
      } else {
        rt = rt -> l;
      }
    }
  }
  return res;
}

signed main () {
  init (&tr, 20);
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    if (use[a[i]] == 1) continue;
    use[a[i]] = 1;
    add (&tr, a[i]);
  }
  while (m--) {
    int cur; cin >> cur; x ^= cur;  
    cout << get (&tr, x) << endl;
  }
  return 0;
}

