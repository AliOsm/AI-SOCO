#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pb push_back
#define popb pop_back
#define fo(i , a , b) for (int i = (a); i < (b); ++i)
#define forr(i , b) fo( i , 0 , b )
#define carr( n , array ) forr(i , n) cin >> array[i]
#define cmap( n , map ) forr (i , n) {ll x ; cin >> x ; map [x] ++ ; }
#define cpmap( n , map ) forr (i , n) {ll x , y ; cin >> x >> y ; map [x] = y ; }
#define F first
#define S second
#define IF ->first
#define IS ->second

const ll max9 = 10 + 1e9 ,  max6 = 10 + 1e6 , max12 = 10 + 1e12 , max15 = 10 + 1e15 ;
const ll min6 = -1 * max6 , min9 = -1 * max9 , min12 = -1 *max12 , min15 = -1 * max15 ;
const ll R = 7 + 1e9 , NN = 10 + 1e5 ;
using namespace std;

int main()
{
    ios_base::sync_with_stdio(false); cin.tie(NULL);
    int t ; cin >> t ;
    while(t--){
        int n , a , b , c ; cin >> n >> a >> b >> c ; string s ; cin >> s ;
        int a1 = 0 , b1 = 0 , c1 =0  ;
        forr (i , n) {
            if (s[i] == 'R') a1 ++ ;
            if (s[i] == 'P') b1 ++ ;
            if (s[i] == 'S') c1 ++ ;
        }
        int ans = min( a , c1 ) + min( b , a1 ) + min( c , b1 ) ;
        if ( ans < n / 2 + n % 2 ) cout << "NO" << endl ;
        else {
            char ans [n] ;
            cout << "YES" << endl ;
            forr (i , n) {
                ans [i] = 'A' ;
                if ( s[i] == 'R' && b ) { b -- ; ans [i] = 'P' ;}
                if ( s[i] == 'P' && c ) { c -- ; ans [i] = 'S' ;}
                if ( s[i] == 'S' && a ) { a -- ; ans [i] = 'R' ;}
            }
            forr (i , n) {
                if ( ans [i] != 'A' ) cout << ans [i] ;
                else {
                    if ( b > 0 ) {cout << 'P' ; b -- ;}
                    else {
                        if ( c > 0 ) {cout << 'S' ; c -- ;}
                        else {
                            cout << 'R' ;
                        }
                    }
                }
            }
            cout << endl ;
        }

    }
    return 0;
}
