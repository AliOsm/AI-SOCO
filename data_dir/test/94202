#include <bits/stdc++.h>
using namespace std;

int n,m,c[100005],f[100005],P[100005],S[100005];
bool Free[100005];
vector<int> g[100005],g1[100005];

void PreDFS(int u)
{
    Free[u]=true;
    S[u]=1;
    for(int i=0; i<g1[u].size(); i++)
        if(Free[g1[u][i]]==false)
        {
            PreDFS(g1[u][i]);
            g[u].push_back(g1[u][i]);
            P[g1[u][i]]=u;
            S[u]+=S[g1[u][i]];
        }
}

bool DFS(int u)
{
    bool check=false,check1=false;
    int Count=0;
    for(int i=0; i<g[u].size(); i++)
    {
        if(c[u]!=c[g[u][i]])
            check=true;
        if(DFS(g[u][i])==true)
        {
            check=true;
            check1=true;
        }
        if(c[g[u][i]]==c[P[u]])
            Count+=S[g[u][i]];
    }
    Count+=n-S[u]+(c[u]==c[P[u]]);
    if(check1==false&&(u==1||Count==f[c[P[u]]]))
    {
        cout<<"YES\n"<<u;
        exit(0);
    }
    return check;
}

int main()
{
    //freopen("764C.INP","r",stdin);
    cin>>n;
    int u,v;
    for(int i=1; i<n; i++)
    {
        cin>>u>>v;
        g1[u].push_back(v);
        g1[v].push_back(u);
    }
    for(int i=1; i<=n; i++)
    {
        cin>>c[i];
        f[c[i]]++;
    }
    PreDFS(1);
    DFS(1);
    cout<<"NO";
}
