#include <bits/stdc++.h>
#define ll long long

using namespace std;
int n;
const ll Inf = 1e18;
ll x[2010],y[2010],c[2020],k[2020],Size[2020],par[2010],MaxNode[2010];
vector < pair < ll , pair < int , int > > > Edges;

void init(){
    for(int i=1;i<=n;i++)  Size[i]=1,par[i]=i,MaxNode[i] = c[i];
}

int getparent(int x)
{
    if(x==par[x])  return x;
    return par[x]=getparent(par[x]);
}

void Merge(int x , int y){

    x = getparent(x);
    y = getparent(y);
    if(x==y)  return ;
    if(Size[x] < Size[y])  swap(x,y);

    Size[x]+=Size[y];
    MaxNode[x] = min(MaxNode[x] , MaxNode[y]);
    par[y] = x;
}

bool light[2010],Used[4000100],vis[2020];
int temp;
ll Min;
vector < int > v[2010];

void DFS(int x){

    vis[x] = true;

    if(c[x] < Min){
        Min = c[x];
        temp = x;
    }

    for(auto j : v[x])  if(!vis[j])  DFS(j);
}
int main()
{
    cin >> n;
    for(int i = 1;i<=n;i++){
        cin >> x[i] >> y[i];
    }
    ll Ans = 0;
    for(int i = 1;i<=n;i++)  cin >> c[i] , Ans+=c[i];
    for(int i = 1;i<=n;i++)  cin >> k[i];
    init();
    for(int i = 1;i<=n;i++){
        for(int j = i + 1;j<=n;j++){
            ll cost = (k[i] + k[j]) * (abs(x[i] - x[j]) + abs(y[i] - y[j]));
            Edges.push_back({cost , {i , j}});
        }
    }
    sort(Edges.begin() , Edges.end());
    for(int j = 0;j<Edges.size();j++){
        int x = Edges[j].second.first;
        int y = Edges[j].second.second;
        ll cost = Edges[j].first;
        if(getparent(x) == getparent(y))  continue;
        ll Maxx = MaxNode[getparent(x)];
        ll Maxy = MaxNode[getparent(y)];
        if(max(Maxx , Maxy) == Maxx && (Ans + cost - Maxx) < Ans){
            Ans = (Ans + cost - Maxx);
            Used[j] = true;
            Merge(x , y);
            v[x].push_back(y);
            v[y].push_back(x);
        }
        else if(max(Maxx , Maxy) == Maxy && (Ans + cost - Maxy) < Ans){
            Ans = (Ans + cost - Maxy);
            Used[j] = true;
            Merge(x , y);
            v[x].push_back(y);
            v[y].push_back(x);
        }
    }
    cout << Ans << '\n';
    for(int i = 1;i<=n;i++)  {
        temp = -1 , Min = Inf;
        if(!vis[i]){
            DFS(i);
            light[temp] = true;
        }
    }
    int cnt = 0;
    for(int i = 1;i<=n;i++)  if(light[i])  cnt++;
    cout << cnt << '\n';
    for(int i = 1;i<=n;i++)  if(light[i])  cout << i << " ";
    cout << '\n';
    cnt = 0;
    for(int j = 0;j<Edges.size();j++)   if(Used[j])  cnt++;
    cout << cnt << '\n';
    for(int j = 0;j<Edges.size();j++){
        if(Used[j])  cout << Edges[j].second.first << " " << Edges[j].second.second << '\n';
    }
    return 0;
}
