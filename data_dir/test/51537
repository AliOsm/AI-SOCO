#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

const int N = 2005;
ld pa[N], pb[N], pab[N], C;
int vis[N][N], n, id;
pair<ld, int> dp[N][N];

int dcmp(ld a, ld b)
{
  if(fabs(a - b) < 1e-6)
    return 0;
  else if(a > b)
    return 1;
  else
    return -1;
}
pair<ld, int> get_max(pair<ld, int> p1, pair<ld, int> p2)
{
  int cmp = dcmp(p1.first, p2.first);
  if(cmp == 0)
    return {p1.first, min(p1.second, p2.second)};
  else if(cmp == 1)
    return p1;
  else
    return p2;
}

pair<ld, int> solve(int idx, int balls1)
{
  if(idx == n)
    return {0, 0};
  pair<ld, int> &ret = dp[idx][balls1];
  if(vis[idx][balls1] == id)
    return ret;
  vis[idx][balls1] = id;
  //0 0
  ret = solve(idx + 1, balls1);
  //1 0
  pair<ld, int> c1 = {-N, N};
  if(balls1){
    c1 = solve(idx + 1, balls1 - 1);
    c1.first = c1.first + pa[idx];
  }
  ret = get_max(ret, c1);
  //0 1
  pair<ld, int> c2 = solve(idx + 1, balls1);
  c2.first = c2.first + pb[idx] - C;
  c2.second++;
  ret = get_max(ret, c2);
  //1 1
  pair<ld, int> c3 = {-N, N};
  if(balls1)
  {
    c3 = solve(idx + 1, balls1 - 1);
    c3.first = c3.first + pab[idx] - C;
    c3.second++;
  }
  ret = get_max(ret, c3);
  return ret;
}

int main()
{
    // ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    int a, b;
    scanf("%d%d%d", &n, &a, &b);
    for(int i = 0; i < n; i++){
      double x;
      scanf("%lf", &x);
      pa[i] = x;
    }
    for(int i = 0; i < n; i++){
      double x;
      scanf("%lf", &x);
      pb[i] = x;
    }
    for(int i = 0; i < n; i++)
      pab[i] = (pa[i] + pb[i] - pa[i] * pb[i]);
    ld st = 0, en = 1;
    for(int i = 0; i < 30; i++)
    {
      C = (st + en) / 2;
      id++;
      pair<ld, int> p = solve(0, a);
      if(p.second > b)
        st = C;
      else
        en = C;
    }
    C = en;
    id++;
    pair<ld, int> p = solve(0, a);
    cout << fixed << setprecision(6) << p.first + en * b;
    return 0;
}
