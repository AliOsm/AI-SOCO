#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <iomanip>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
using namespace std;

#define rep(i,n) for(int i=0;i<n;i++)
#define ll long long int
#define f first
#define s second
#define pi pair<ll, ll>
#define pii pair<pi,int>
#define f first
#define s second
#define pb push_back
#define mod 1000000007
#define mp make_pair
#define pb push_back
#define rep(i,n) for(int i=0;i<n;i++)
#define fd(i,a,b) for(int i=a; i>=b; i--)

vector<int>g[300011];
vector<int>O;
int pos[300011];
int sz[300011];
pi val[300011];
void dfs(int v) {
    int m=0;
    O.pb(v);
    pos[v]=O.size();
    for(auto x:g[v]){
        dfs(x);
        sz[v]+=sz[x];
        m=max(m,sz[x]);
    }
    sz[v]++;
    val[v]=make_pair(sz[v],m);
}

struct node
{
    int val;
    node *left, *right;

    node(int val, node *left, node *right):
        val(val), left(left), right(right) {}

    node* insert(int l, int r, int s ,int e,int w);
};
node* root[300011];

node *null = new node(0, NULL, NULL); 

node * node::insert(int l, int r,int s,int e,int w)
{
    if(r<s or e<l) return this;
    if(s<=l and r<=e) {
        return new node(max(w,this->val),this->left,this->right);   
    }
    int m = (l+r)>>1;
    return new node(this->val, this->left->insert(l, m, s, e, w), this->right->insert(m+1, r, s, e, w));
}

int query(node *a,int l, int r, int ind)
{
    if(l == r)
    {
        return a->val;
    }
    int mid = (l+r)/2;
    if(ind<=mid){
        return max(a->val,query(a->left,l,mid,ind));
    }
    return max(a->val,query(a->right,mid+1,r,ind));
}

int main() {

    int N,Q;
    cin >> N >> Q;
    int p;
    for(int i=2;i<=N;i++){
        cin >> p;
        g[p].pb(i);
    }
    null->left = null->right = null;
    root[0]=null;
    dfs(1);
    for(int i=1;i<=N;i++){
        root[i] = root[i-1]->insert(0, N, val[O[i-1]].s, val[O[i-1]].f, i);
        //cout<<O[i-1]<<" "<<val[O[i-1]].f<<" "<<val[O[i-1]].s<<"\n";
    }
    int v,l,r;
    while(Q--){
        cin >> v;
        int S = sz[v];
        l = pos[v];
        r = pos[v] + sz[v] - 1;
        int w = query(root[r],0,N,(S+1)/2);
        cout << O[w-1] << "\n";
    }
}