#pragma GCC target("avx2")
#pragma GCC optimize("O3")
 
#include <x86intrin.h>
#include <bits/stdc++.h>   
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
using namespace __gnu_pbds;
using namespace std;

template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
     
#define F first
#define S second           
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair                                     
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = 95542721;
const int N = (int)1e5 + 123;
const ll inf = (ll)1e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;                  
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

int n, q, a[N];
ll t[4 * N][48], sum[48];
int add[4 * N];

inline int mult (int a, int b) {
   return 1ll * (a % mod) * (b % mod) % mod;
}

inline int Add (int a, int b) {
   a += b;
   if (a >= mod) a %= mod;
   return a;
}

inline void push (int v, int tl, int tr) {
   if (!add[v]) return;
   for (int i = 0; i < 48; i ++) sum[i] = t[v][(i + add[v]) % 48];
   for (int i = 0; i < 48; i ++) t[v][i] = sum[i];
   if (tl != tr) add[v + v] += add[v], add[v + v + 1] += add[v];
   add[v] = 0;
}

void build (int v = 1, int tl = 1, int tr = n) {
   if (tl == tr) {
      t[v][0] = a[tl];
      for (int i = 1; i < 48; i ++) {
         a[tl] = mult (a[tl], mult (a[tl], a[tl]));
         t[v][i] = a[tl];
      }
      return;
   }
   int tm = tl + tr >> 1;
   build (v + v, tl, tm);
   build (v + v + 1, tm + 1, tr);
   for (int i = 0; i < 48; i ++) t[v][i] = Add (t[v + v][i], t[v + v + 1][i]);
}

void upd (int l, int r, int v = 1, int tl = 1, int tr = n) {
   push (v, tl, tr);
   if (tl > r || tr < l) return;
   if (l <= tl && tr <= r) {
      add[v] ++;
      push (v, tl, tr);
      return;
   }
   int tm = tl + tr >> 1;
   upd (l, r, v + v, tl, tm);
   upd (l, r, v + v + 1, tm + 1, tr);
   for (int i = 0; i < 48; i ++) t[v][i] = Add (t[v + v][i], t[v + v + 1][i]);
}

int get (int l, int r, int v = 1, int tl = 1, int tr = n) {
   push (v, tl, tr);
   if (tl > r || tr < l) return 0;
   if (l <= tl && tr <= r) return t[v][0];
   int tm = tl + tr >> 1;
   return Add (get (l, r, v + v, tl, tm), get (l, r, v + v + 1, tm + 1, tr));
}

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                     

inline void Solve () {
   cin >> n;
   for (int i = 1; i <= n; i ++) cin >> a[i];
   build ();
   cin >> q;
   while (q --) {
      int tp, l, r;
      cin >> tp >> l >> r;
      if (tp == 1) cout << get (l, r) << endl;
      else upd (l, r);
   }
}

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
   //cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
