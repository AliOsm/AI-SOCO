#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <bitset>
#define f first
#define s second
#define ll long long
#define ull unsigned long long
#define mp make_pair
#define pb push_back
#define vi vector <int>
#define ld long double
#define pii pair<int, int>
using namespace std;    
const int N = int(1e5) + 10, mod = int(1e9)  + 7;
int n,m,k;
bool used[N];
set <pair<ll,pii> > st;
ll dp[N],d[N];
vector <pii> g[N];
bool ok[N];

int main () {
	scanf("%d%d%d",&n,&m,&k);
	for(int i=1,u,v,w;i<=m;i++){
		scanf("%d%d%d",&u,&v,&w);
		g[u].pb(mp(v,w));
		g[v].pb(mp(u,w));
	}
	ll inf = 1ll * n * mod;
	for(int i=1;i<=n;i++) d[i] = inf;
	int ans = 0;
	int res = 0;
	for(int i = 1,x,y; i <= k ; i++){
		scanf("%d%d",&x,&y);
		if(ok[x]) ans++;
		else res++;
		ok[x] = 1;
		d[x] = min(d[x],y + 0ll);	
	}
	for(int i=1;i<=n;i++){
		st.insert(mp(d[i],mp(1,i)));
	}
	for(int i=2;i<=n;i++) dp[i] = inf;
	res = 0;
	st.insert(mp(0,mp(0,1)));
	while(st.size() > 0){
		int v = (*st.begin()).s.s;
		int f = (*st.begin()).s.f;
		st.erase(st.begin());
		if(used[v]) continue;
		if(f == 0 && d[v] != inf) {
			res++;
		}
		dp[v] = min(d[v],dp[v]);
		used[v] = 1;
		for(int i=0;i<g[v].size();i++){
			int to = g[v][i].f;
			if(dp[to] > dp[v] + g[v][i].s){
				dp[to] = dp[v] + g[v][i].s;
				st.insert(mp(dp[to],mp(0,to)));
			}
		}
	}
	printf("%d\n",ans+res);
return 0;
}

