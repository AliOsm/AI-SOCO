#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>*/
 
#define pb push_back
#define mp make_pair
#define sz(s) ((int)(s.size()))
#define all(s) s.begin(), s.end()
#define rep(i, a, n) for (int i = a; i <= n; ++i)
#define per(i, n, a) for (int i = n; i >= a; --i)
#define onlycin ios_base::sync_with_stdio(false); cin.tie(0) 
using namespace std;
// using namespace __gnu_pbds;
typedef long long ll;
typedef unsigned long long ull;
/*typedef tree<
pair < int, int >,
null_type,
less< pair < int, int > >,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;*/
// find_by_order() order_of_key()
const int MAXN = (int)5e5+228;
const char nxtl = '\n';
const int mod = (int)1e9+7;
const double eps = (double)1e-7;
template<typename T> inline bool updmin(T &a, const T &b) {return a > b ? a = b, 1 : 0;}
template<typename T> inline bool updmax(T &a, const T &b) {return a < b ? a = b, 1 : 0;}

int n, r, a[MAXN];
double y[MAXN];

int main() {
	#ifdef accepted
		freopen(".in", "r", stdin);
		freopen(".out", "w", stdout);
	#endif
	onlycin;
	cin >> n >> r;
	rep(i, 1, n) cin >> a[i];
	rep(i, 1, n) {
		double mx = -1.000;
		bool ok = 0;
		rep(j, 1, i - 1) {
			double need = sqrt(4.0*r*r-(a[j]-a[i])*1.0*(a[j]-a[i])) + y[j];
			if(updmax(mx, need)) ok = 1;
		}
		if(!ok) {
			y[i] = r*1.0;
			cout << setprecision(10) << fixed << y[i] << ' ';
		} else {
			y[i] = mx;
			cout << setprecision(10) << fixed << y[i] << ' ';
		}
	}
	
	return 0;
}