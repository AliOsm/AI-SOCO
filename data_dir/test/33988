/*
▄███████▀▀▀▀▀▀███████▄
░▐████▀▒ЗАПУСКАЕМ▒▀██████▄
░███▀▒▒▒▒▒ДЯДЮ▒▒▒▒▒▒▀█████
░▐██▒▒▒▒▒▒БОГДАНА▒▒▒▒▒████▌
░▐█▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒████▌
░░█▒▄▀▀▀▀▀▄▒▒▄▀▀▀▀▀▄▒▐███▌
░░░▐░░░▄▄░░▌▐░░░▄▄░░▌▐███▌
░▄▀▌░░░▀▀░░▌▐░░░▀▀░░▌▒▀▒█▌
░▌▒▀▄░░░░▄▀▒▒▀▄░░░▄▀▒▒▄▀▒▌
░▀▄▐▒▀▀▀▀▒▒▒▒▒▒▀▀▀▒▒▒▒▒▒█
░░░▀▌▒▄██▄▄▄▄████▄▒▒▒▒█▀
░░░░▄██████████████▒▒▐▌
░░░▀███▀▀████▀█████▀▒▌
░░░░░▌▒▒▒▄▒▒▒▄▒▒▒▒▒▒▐
░░░░░▌▒▒▒▒▀▀▀▒▒▒▒▒▒▒▐
 
*/
#pragma GCC optimize("O3")
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
#include <random>


using namespace std;



#define ll long long
#define ld double
#define null NULL
#define prev prev228
#define index index228
#define left left228
#define right right228
#define hash hash228
#define y1 y1228
#define y0 y0228
#define firn(i, n) for (int i = 0; i < (int)n; ++i)
#define forn(i, n) for (int i = 1; i <= (int)n; ++i)
#define double long double
#define int long long

template<typename T> inline void uin(T &a, T b) {
    if (b < a) a = b;
}

template<typename T> inline void uax(T &a, T b) {
    if (b > a) a = b;
}


const int maxn = 100 * 1000 + 7, inf = 1e9 + 228;


int a[maxn], dist[maxn][101];


vector<int> g[maxn], cit[maxn];



signed main() {
	ios_base::sync_with_stdio(false);
	int n, m, k, s;
	cin >> n >> m >> k >> s;
	forn(i, n) {
		cin >> a[i];
		cit[a[i]].push_back(i);
	}
	forn(i, m) {
		int u, v;
		cin >> u >> v;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	for (int color = 1; color <= k; ++color) {
		queue<int> q;
		forn(i, n) {
			dist[i][color] = inf;
		}
		for (int i : cit[color]) {
			q.push(i);
			dist[i][color] = 0;
		}
		while (!q.empty()) {
			int v = q.front();
			q.pop();
			firn(i, g[v].size()) {
				int to = g[v][i];
				if (dist[v][color] + 1 < dist[to][color]) {
					dist[to][color] = dist[v][color] + 1;
					q.push(to);
				}
			}
		}
	}
	forn(v, n) {
		vector<int> vect;
		forn(i, k) {
			vect.push_back(dist[v][i]);
		}
		sort(vect.begin(), vect.end());
		int kek = 0;
		for (int i = 0; i < s; ++i) {
			kek += vect[i];
		}
		cout << kek << " ";
	}
	cout << "\n";
	return 0;
}



// kek


