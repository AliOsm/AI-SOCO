/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

class BMisloveHasLostAnArray {
public:
    static void solveSlow(std::stringstream& in, std::ostream& out) {
    }
    static constexpr int kStressIterations = 0;
    static void generateTest(std::ostringstream& in, std::ostringstream& out) {
        auto to_input = std::stringstream(in.str());
        solveSlow(to_input, out);
    }
	void solve(std::istream& in, std::ostream& out) {
        auto min = [] (int n, int l, int r) -> int {
            long long res = 0;
            for (int steps = 0, i = 1; steps < l; steps++, i *= 2) res += i;
            res += (n - l);
            return res;
        };
        auto max = [] (int n, int l, int r) -> int {
            long long res = 0;
            for (int steps = 0, i = 1; steps < r; steps++, i *= 2) res += i;
            res += (long long) (n - r) * (1 << (r - 1));
            return res;
        };
        int n, l, r; in >> n >> l >> r;
        out << min(n, l, r) << " " << max(n, l, r) << std::endl;
	}
};


int main() {
    std::ios_base::sync_with_stdio(false);
    BMisloveHasLostAnArray solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
    in.tie(nullptr);
    solver.solve(in, out);
	return 0;
}
