#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <unordered_map>
#include <sstream>
#include <iostream>
#include <cmath>
#include<cstring>
#include <cstdio>
#include <stack>
#include<iomanip>
#include<queue>
#include<functional>
#include<iterator>
#include<new>
#include<cstdlib>
#include<math.h>
#include<fstream>
using namespace std;
#define pi 3.141592653589793
#define ii  pair<int,int>
#define ll long long
#define p10(ans) printf("%0.10f\n", ans)
#define pr(ans) printf("%d\n", ans)
#define scc(x)  scanf("%c\n", &c)
#define pll(ans) printf("%lld\n", ans)
#define scll(x) scanf("%lld",&x)
#define scd(a)  scanf("%lf", &a)
#define sci(x)  scanf("%d",&x)
#define pc(ans)  printf("%c", ans)
#define pd(a)    printf("%lf\n", a)
#define scanfchararray(arr) scanf("%s", arr)
#define printfstring(s)    printf("%s ", s.c_str())
#define all(v)             v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)            ((int)((v).size()))
#define mod 1000000007
#define mem(arr,d) memset(arr,d,sizeof(arr))
#define inf 10000000000000000
#define ninf -10000000000000000;
#define eps 1e-7
#define nearestPowerOfTwo(S) ((int)pow(2.0, (int)((log((double)S) / log(2.0)) + 0.5)))
/*ll power(ll base, ll exp) {
base %= mod;
ll result = 1;
while (exp > 0) {
if (exp & 1)
result = (result * base) % mod;
base = (base * base) % mod;
exp >>= 1;
}
return result;
}
*/
/*long long gcd(long long a, long long b)
{
if (b == 0)return a; return gcd(b, a%b);
}
*/
/*long long lcm(long long a, long long b) {
return  a * b / gcd(a, b);
}
*/

int arr[100010];
set<int>seet;
vector<int>temp;
vector<vector<int>>ans;
set<int>::iterator it;
map<int, int>mp;
map<int, int>compress;
int t[100010];
int main() {
	int n;
	sci(n);
	for (int i = 1; i <= n; ++i) { sci(t[i]); arr[i] = t[i]; }
	sort(t + 1, t + n + 1);
	for (int i = 1; i <= n; ++i)compress[t[i]] = i;
	for (int i = 1; i <= n; ++i) { arr[i] = compress[arr[i]]; mp[arr[i]] = i; seet.insert(arr[i]); }

	for (int i = 1; i <= n; ++i) {
		it = seet.find(i);
		if (it != seet.end()) {
			temp.push_back(arr[i]); int s = i; int idx = i;
			seet.erase(arr[i]);
			int to = arr[arr[idx]];
			if (arr[i] != to) {
				while (!seet.empty()) {
					seet.erase(to);
					temp.push_back(to);
					if (to == s)break;
					else to = arr[to];
				}
			}
			ans.push_back(temp);
			temp.clear();
		}
	}
	pr(ans.size());
	for (int i = 0; i < ans.size(); ++i) {
		printf("%d ", ans[i].size());
		for (int j = 0; j < ans[i].size(); ++j) {
			printf("%d ", mp[ans[i][j]]);
		}
		printf("\n");
	}

}


