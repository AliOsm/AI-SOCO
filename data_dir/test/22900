#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
#include <cassert>
using namespace std;
#define F first
#define S second
#define pb push_back
#define MP make_pair
#define MS0(I) memset(I, 0, sizeof(I));
#define ALL(x) begin(x),end(x)
#define SZ(x) ((int)(x).size())
#define rep(i, n) for(int i = 0; i < n; i ++)
#define rep1(i, a, b) for(int i = a; i < b; i ++)
#define per1(i, a, b) for(int i = a; i >= b; i --)
#define IOS ios_base::sync_with_stdio(0); cin.tie(0)
typedef long long LL;
typedef long double LDB;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
//////////////////////
const long double eps = 1e-13;
const long double PI = acos(-1);
const int INF = (int)1e9;
const LL  INFF = (LL)1e18;
const int mod = (int)1e9 + 7;
const int MXN = (int)2e5 + 7;
PLL a[MXN];
bool cmp(const PLL &u, const PLL &v){
	if(max(u.F, u.S) != max(v.F, v.S))
		return max(u.F, u.S) < max(v.F, v.S);
	if(u.F != v.F) return u.F < v.F;
	return u.S > v.S;
}
LL dp[MXN][2];
vector<int>buf;
PLL lv[MXN], rv[MXN];
void go(int p, LL x, LL y, int pp){
	LL v = max(lv[p].F, lv[p].S);
	LL nx = v, ny = y;	
	LL d = abs(lv[p].F - rv[p].F) + abs(lv[p].S - rv[p].S) + v - x;
	LL v1 = dp[p-1][pp] + abs(nx - lv[p].F) + abs(ny - lv[p].S) + d;
	LL v2 = dp[p-1][pp] + abs(nx - rv[p].F) + abs(ny - rv[p].S) + d;
	dp[p][1] = min(dp[p][1], v1);
	dp[p][0] = min(dp[p][0], v2);
	nx = x, ny = v;
	d = abs(lv[p].F - rv[p].F) + abs(lv[p].S - rv[p].S) + v - y;
	v1 = dp[p-1][pp] + abs(nx - lv[p].F) + abs(ny - lv[p].S) + d;
	v2 = dp[p-1][pp] + abs(nx - rv[p].F) + abs(ny - rv[p].S) + d;
	dp[p][1] = min(dp[p][1], v1);
	dp[p][0] = min(dp[p][0], v2);
	return ;
}
int main(void){
	int n; scanf("%d", &n);
	rep1(i, 1, n+1) scanf("%lld %lld", &a[i].F, &a[i].S);
	sort(a + 1, a + n + 1, cmp);
	buf.pb(0);
	rep1(i, 1, n+1) buf.pb( max(a[i].F, a[i].S) );
	buf.resize( unique(ALL(buf)) - buf.begin() );
	int cntp = 0;
	rep1(i, 1, n+1){
		int rr = i; cntp++;
		while(rr != n && max(a[rr + 1].F, a[rr + 1].S) == max(a[rr].F, a[rr].S) ) rr++;
		lv[cntp] = a[i];
		rv[cntp] = a[rr];
		i = rr;
	}
	rep1(i, 1, cntp+1) dp[i][0] = dp[i][1] = INFF;
	rep1(i, 1, cntp+1){
		go(i, lv[i-1].F, lv[i-1].S, 0);
		go(i, rv[i-1].F, rv[i-1].S, 1);
	}
	LL ans = min(dp[cntp][0], dp[cntp][1]);
	printf("%lld\n", ans);
	return 0;
}
