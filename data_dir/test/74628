#pragma comment(linker, "/STACK:64000000")
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);


int n, a[100100];
double ans = 0;
ll total = 0;
ll t[4 * 100100];

void update(int v, int tl, int tr, int pos, int val) {
    if (tl == tr) {
        t[v] = val;
    } else {
        int mid = (tl + tr) >> 1;
        if (pos <= mid) update(2 * v, tl, mid, pos, val);
        else update(2 * v + 1, mid + 1, tr, pos, val);
        t[v] = t[2 * v] + t[2 * v + 1];
    }
}

ll get(int v, int tl, int tr, int l, int r) {
    if (l > r) return 0;
    if (tr < l || tl > r) return 0;
    if (l <= tl && tr <= r) return t[v];
    int mid = (tl + tr) >> 1;
    ll ans1 = get(2 * v, tl, mid, l, r);
    ll ans2 = get(2 * v + 1, mid + 1, tr, l, r);
    return ans1 + ans2;
}

double f(int i, int j) {
    return (i + 1) * 1.0 * (n - j) / n / (n + 1.0);
}

int main(){

    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        scanf("%d", a + i);
        a[i]--;
    }

    for (int i = 0; i < n; i++) {
        total += get(1, 0, n - 1, a[i] + 1, n - 1);
        update(1, 0, n - 1, a[i], 1);
    }


    memset(t, 0, sizeof t);

// i < j
// f(i, j) = (i+1) * (n - j) / (n * (n + 1))
// for all (i<j and a[i] < a[j]) sum up f(i, j)
// for all (i<j and a[i] > a[j]) sum up 1-f(i,j)
//

    for (int j = 0; j < n; j++) {
        double p = (n - j) / (1.0 * n * (n + 1));
        ans += p * get(1, 0, n - 1, 0, a[j] - 1);
        ans -= p * get(1, 0, n - 1, a[j] + 1, n - 1);
        update(1, 0, n - 1, a[j], j + 1);
    }

    ans += total;

    printf("%.10f\n", ans);

    return 0;
}
