#include<bits/stdc++.h>
using namespace std;
#define inf 1e9;
string s[25];
int a[25][25];
int n, m;
vector<int> groups, costs;
int mem[1 << 20];
int best[20];
bool v[1 << 20];


int solve(int msk) {
    if (msk == (1 << n) - 1)
        return 0;
    if (v[msk])
        return mem[msk];
    v[msk] = true;
    int ans = inf;
    for (int i = 0; i < n; i++)
        if (!(msk & (1 << i)))
            ans = min(ans, best[i] + solve(msk | (1 << i)));
    for (int i = 0; i < int(groups.size()); i++) {
        int group = groups[i];
        int cost = costs[i];
        if ((msk | group) == msk)
            continue;
        ans = min(ans, cost + solve(msk | group));
    }
    return mem[msk] = ans;
}

bool easy(int ind) {
    for (int col = 0; col < m; col++) {
        bool valid = true;
        for (int i = 0; i < n; i++) {
            if (i == ind)
                continue;
            if (s[i][col] == s[ind][col])
                valid = false;
        }
        if (valid)
            return true;
    }
    return false;
}



int main() {
    ios::sync_with_stdio(false);


    cin >> n >> m;
    for (int i = 0; i < n; i++)
        cin >> s[i];
    for (int i = 0; i < n; i++) {
        best[i] = inf;
        for (int j = 0; j < m; j++) {
            cin >> a[i][j];
            best[i] = min(best[i], a[i][j]);
        }
    }


    for (int col = 0; col < m; col++) {
        for (int c = 0; c < 26; c++) {
            int msk = 0;
            int cost = 0;
            int maxCost = 0;
            int cnt = 0;
            for (int i = 0; i < n; i++) {
                if (s[i][col] != c + 'a')
                    continue;
                msk |= (1 << i);
                cost += a[i][col];
                maxCost = max(maxCost, a[i][col]);
                cnt++;
            }
            if (cnt > 1)
                groups.push_back(msk), costs.push_back(cost - maxCost);
        }
    }
    int msk = 0;
    for (int i = 0; i < n; i++)
        if (easy(i))
            msk |= (1 << i);
    cout << solve(msk) << endl;


    return 0;
}
