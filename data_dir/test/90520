#include <iostream>
#include <vector>

using namespace std;

typedef vector<int> int_vector;
typedef long long ll;

int min(int a, int b) {
	return (a < b ? a : b);
}

int dfs(int from, vector< int_vector > & graph, vector<char> & used, int_vector & costs)
{
	used[from] = true;

	int result = costs[from];

	for (int to : graph[from])
	{
		if (used[to]) continue;
	
		result = min(
			result,
 			dfs(to, graph, used, costs)
		);
	}		

	return result;
}

int main() {

	int n, m;
	cin >> n >> m;

	int_vector costs(n, 0);
	for (int i = 0; i < n; ++i)
		cin >> costs[i];

	vector< int_vector > graph(n, int_vector());
	for (int i = 0; i < m; ++i) 
	{
		int from, to;
		cin >> from >> to;

		--from;
		--to;
		
		graph[from].push_back(to);
		graph[to].push_back(from);
	}

	vector<char> used(n, false);

	ll answer = 0;
	for (int v = 0; v < n; ++v) 
		if (!used[v]) 
			answer += dfs(v, graph, used, costs);

	cout << answer;

	return 0;
}