#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<int, int>, // change type
//        null_type,
//        less<pair<int, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)(x).size()
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const double PI = 3.14159265358979323846;
const double eps = (1e-7);
int dcmp(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}

bool cmp(pair<int, list<int>::iterator> p1, pair<int, list<int>::iterator> p2)
{
    return p1.first < p2.first;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    //    freopen("facebook.txt", "w", stdout);
#endif
    list<int> lst;
    int n, K;
    cin >> n >> K;
    vector<pair<int, list<int>::iterator> > pq;
    vector<int> a;
    rep(i,0,n)
    {
        int x;
        cin >> x;
        a.push_back(x);
        lst.push_back(x);
        auto it = lst.end();
        --it;
        pq.push_back({x, it});
    }
    int turn = 1;
    sort(pq.begin(), pq.end(), cmp);
    vector<int> ans(n + 1);
    while(!pq.empty())
    {
        auto cur = pq.back();
        pq.pop_back();
        int skill = cur.first;
        auto it = cur.second;
        if (ans[skill])
            continue;
        ans[skill] = turn;
        int k = K;
        while(k--)
        {
            auto tempIT = it;
            if (tempIT == lst.begin())
                break;
            tempIT--;
            ans[*tempIT] = turn;
            lst.erase(tempIT);
        }
        k = K;
        while(k--)
        {
            auto tempIT = it;
            tempIT++;
            if (tempIT == lst.end())
                break;
            ans[*tempIT] = turn;
            lst.erase(tempIT);
        }
        lst.erase(it);
        turn ^= 3;
    }
    for (int i = 0; i <n; ++i)
        cout << ans[a[i]];
    return 0;
}