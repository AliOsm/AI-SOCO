///****In the name of ALLAH, most Gracious, most Compassionate****//


//#pragma GCC target ("avx2")
//#pragma GCC optimization ("O3")
//#pragma GCC optimization ("unroll-loops")

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <ll, ll> pii;

#define ALL(a) a.begin(), a.end()
#define FastIO ios::sync_with_stdio(false); cin.tie(0);cout.tie(0)
#define IN freopen("input.txt","r+",stdin)
#define OUT freopen("output.txt","w+",stdout)

#define DBG(a) cerr<< "line "<<__LINE__ <<" : "<< #a <<" --> "<<(a)<<endl
#define NL cout<<endl

template < class T1,class T2>
ostream &operator <<(ostream &os,const pair < T1,T2 > &p)
{
    os<<"{"<<p.first<<","<<p.second<<"}";
    return os;
}

const ll N=1e6+50;
const ll oo=1e9+7;

const ll  K =22;
ll dp[N];
ll x[N];
ll mx[N];
ll lg2[N];
ll table[K][N];


void init(ll n)
{
    for(ll i=0; i<n; i++)
        table[0][i] = mx[i];
    for(ll j=1; j<K; j++)
    {
        for(ll i=0; i + (1<<j) <=n ; i++)
            table[j][i] = max(table[j-1][i], table[j-1][ i+(1<<j-1)]);
    }
}
ll getmax(ll l,ll r)
{
    if(l>r)
        return 0;
    assert(l<=r);
    ll x =lg2[r-l+1];
    return max(table[x][l], table[x][r-(1<<x)+1]);
}

int32_t main()
{
    FastIO;

    for(ll i=2; i<N; i++)
        lg2[i] =lg2[i/2]+1;

    ll n;
    cin>>n;
    vector<ll > x(n);
    for(ll i=0; i<n; i++)
    {
        cin>>x[i];
    }
    sort(ALL(x));
    x.erase(unique(ALL(x)), x.end());
    ll a,b;
    cin>>a>>b;
    for(ll xi: x)
    {
        ll low = (b+xi-1)/xi * xi;
//        DBG(low);
        for(; low<=a; low+=xi)
            mx[low-b] =  low+xi -1;
    }
//    DBG(mx);
//    for(ll i=b;i<=a;i++)
//        cout<<mx[i-b]<<" ";
//    NL;

    init(a-b+1);
    ll l = b,r=b;
    while(r<a)
    {
        ll m = getmax(l-b,r-b);

        if(m < r)
        {
            dp[r+1-b] = dp[r-b] + 1;
            r++;
            l=r;
        }
        else
        {
            l=r+1;
            r = min(m,a);
            for(ll i=l; i<=r; i++)
                dp[i-b]= dp[l-1-b]+1;
        }
    }
    cout<<dp[a-b]<<"\n";
}
