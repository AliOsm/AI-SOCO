#include <bits/stdc++.h>
using namespace std;

#define F first
#define S second
#define PB push_back
#define size(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define FR(i, a, b) for(int i = a; i < b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define debug(x) cerr<< #x << ": " << x << endl;
#define fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);

typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

//const int mod = 1000 * 1000 * 1000 + 7;
const int N = 1000 * 1000 + 10;
int a[N], b[N];
vector <int> vec[N];
int seg[N * 4];
int n;
int ind[N];

void add(int pos, int val, int v, int s, int e)
{
	if(e - s <= 1)
	{
		seg[v] = val;
		return;
	}

	int mid = (s + e) / 2;
	if(pos < mid)
		add(pos, val, v * 2, s, mid);
	else
		add(pos, val, v * 2 + 1, mid, e);
	seg[v] = min(seg[v * 2], seg[v * 2 + 1]);
}

int get(int l, int r, int v, int s, int e)
{
	if(e <= l || r <= s)
		return n;
	if(l <= s && e <= r){
		return seg[v];
	}
	int mid = (s + e) / 2;
	return min(get(l, r, v * 2, s, mid), get(l, r, v * 2 + 1, mid, e));
}


int main()
{
	int o;
	cin>> o;
	while(o--)
	{
		cin>> n;
		FR(i, 0, n * 4) seg[i] = n;
		FR(i, 0, n)
		{
			vec[i].clear();
			ind[i] = 0;
		}
		FR(i, 0, n)
		{
			cin>> a[i];
			a[i]--;
			vec[a[i]].PB(i);
		}
		FR(i, 0, n)
		{
			cin>> b[i];
			b[i]--;
		}
		FR(i, 0, n)
		{
			vec[i].PB(n);
			add(i, vec[i][0], 1, 0, n);
		}
		bool check = true;
		FR(i, 0, n)
		{
			if(size(vec[b[i]]) <= ind[b[i]] + 1)
			{
				check = false;
				break;
			}

			int pos = vec[b[i]][ind[b[i]]++];
			int mn_ind = get(0, b[i], 1, 0, n);
			if(mn_ind < pos)
				check = false;
			add(b[i], vec[b[i]][ind[b[i]]], 1, 0, n);
		}

		if(check)
			cout<< "YES\n";
		else
			cout<< "NO\n";
	}
	return 0;
}

