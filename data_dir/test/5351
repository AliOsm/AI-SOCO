//Be Name Khoda
//no comment...
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using mordered_set =  tree<T, null_type, greater<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)1e5 + 7;
const int infint = (int)1e9;
const ll inf = (ll)1e18;
ll par[MAXN], a[MAXN];
vector<ll> G[MAXN];
ll parent(ll v)
{
	return par[v] < 0 ? v : par[v] = parent(par[v]);
}
void merge(ll u, ll v)
{
	if((v = parent(v)) == (u = parent(u)))
		return;
	if(par[v] > par[u])
		swap(u, v);
	par[v] += par[u];
	par[u] = v;
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    ll n, m;
    memset(par, -1, sizeof par);
    cin >> n >> m;
    for (int i = 0; i < n; i++)
		cin >> a[i];
	vector< pair<ll, ll> >  p;
	for (int i = 0; i < n; i++)
		p.push_back({a[i], i});
	sort(p.begin(), p.end());
	reverse(p.begin(), p.end());
	for (int i = 0; i < m; i++)
	{
		ll u, v;
		cin >> u >> v;
		u--, v--;
		if(a[u] > a[v] || (a[u] == a[v] && u > v))
			swap(u, v);
		G[u].push_back(v);
	}
	ld ans = 0, makh = n * (n - 1);
	for (auto u : p)
	{
		set<ll> S;
		for (auto v : G[u.second])
			S.insert(parent(v));
		ll cnt = 0;
		for (auto v : S)
			cnt += -par[v];
		cnt++;
		cnt *= cnt;
		for (auto v : S)
			cnt -= par[v] * par[v];
		cnt--;
		ans += (u.first * cnt * 1.00) / makh;
		for (auto v : G[u.second])
			merge(v, u.second);
	}
	cout << fixed << setprecision(4) << ans;
}
