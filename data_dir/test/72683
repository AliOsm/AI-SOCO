//#pragma GCC optimize("trapv")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("avx,avx2,fma")
//#pragma GCC optimize("unroll-loops")
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
#define pb push_back
#define all(x) x.begin(), x.end()
using namespace std;
using ll = long long;
using vi = vector<int>;
using pi = pair<int, int>;
using vpi = vector<pi>;
const int maxn = 1e2 + 5;
using oset = tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>;
map<string, int> cnt;
int n;
void q(int l, int r, int m) {
	cout << "? " << l << " " << r << endl;
	string t;
	for(int i = 0; i < (r-l+1); i++)
		for(int j = i; j < (r-l+1); j++) {
			cin >> t;
			sort(all(t));
			if(m==2)cnt[t]--;
			else cnt[t]++;
		}
}
int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	cin >> n;
	if(n==1) {
		cout << "? 1 1" << endl;
		char t;
		cin >> t;
		cout << "! " << t << endl;
		return 0;
	}
	q(1, n, 1);
//	for(auto i : cnt)
//		cout << i.first << " " <<i.second << "\n";
	q(2, n, 2);
	vector<string> a;
	for(auto i : cnt)
		if(i.second==1||i.first.size()==n)
			a.pb(i.first);//, cout << i.first << " " << i.second << "\n";
	sort(all(a), [](const string &x, const string &y) {
		return x.size() < y.size();
	});
	map<int, int> cur, nxt;
	string s;
	for(auto i : a) {
		nxt.clear();
		for(auto j : i)
			nxt[j]++;
		for(auto j : nxt)
			if(j.second!=cur[j.first]) {
				s.pb(j.first);
				break;
			}
//		cout << i << "\n";
		cur = nxt;
	}
	cout << "! " << s << "\n";
}
