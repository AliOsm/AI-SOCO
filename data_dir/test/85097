#include <bits/stdc++.h>
using namespace std;

#define loop(i,n) for(int i = 0; i < n; i++)
#define pii pair<int, int>
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define vi vector<int>
#define pb push_back

typedef long long LL;

const LL INF = 1e18 + 5;
const int mod = 1e9 + 7;

#define vpii vector<pii>

const int N = 2 * 1e5 + 5;

namespace UF {
    int comp[N], sz[N];
    void init() {
        loop(i, N) {
            comp[i] = i;
            sz[i] = 1;
        }
    }
    
    int find(int u) {
        if (u == comp[u]) return u;
        return comp[u] = find(comp[u]);
    }
    
    void merge(int u, int v) {
        u = find(u);
        v = find(v);
        if (u == v) return;
        if (sz[u] > sz[v]) swap(u, v);
        comp[u] = v;
        sz[v] += sz[u];
    }
}

pair<LL, int> a[N];
vector<pair<LL, pii> > offers;

int main() {
#ifdef DEBUG
    freopen("in.txt", "r", stdin);
#endif
    ios_base::sync_with_stdio(false);
    int n, m;
    cin >> n >> m;
    loop(i, n) {
        LL val;
        cin >> val;
        a[i] = {val, i};
    }
    sort(a, a + n);
    loop(i, m) {
        int x, y;
        LL w;
        cin >> x >> y >> w;
        x -= 1; y -= 1;
        if (x > y) swap(x, y);
        offers.pb({w, {x, y}});
    }
    for (int i = 1; i < n; i++) {
        offers.pb({a[0].F + a[i].F, {a[0].S, a[i].S}});
    }
    sort(offers.begin(), offers.end());
    UF::init();
    LL ans = 0;
    for (int i = 0; i < offers.size(); i++) {
        int u1 = offers[i].S.F;
        int u2 = offers[i].S.S;
        LL cost = offers[i].F;
        if (UF::find(u1) != UF::find(u2)) {
            ans += cost;
            UF::merge(u1, u2);
        }
    }
    cout << ans << endl;
    return 0;
}