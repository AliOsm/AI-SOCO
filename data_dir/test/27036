#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

#define PB push_back
#define MP make_pair

#define rep(i,n) for(int i=0;i<(n);++i)
#define REP(i,n) for(int i=1;i<=(n);++i)
#define FOR(i,l,h) for(int i=(l);i<=(h);++i)
#define FORD(i,h,l) for(int i=(h);i>=(l);--i)
#define print(expr) cout<<(#expr)<<" : "<<(expr)<<endl
#define tr(it,c) for(VI::iterator it=(c).begin(); it!=(c).end(); ++it)

typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long int64;
typedef pair<int,int> pii;

const int H=17, M=1<<H, inf=0x3fffffff;
int n,k;

//int h[M];
pii seg[M<<1];

pii operator + (const pii &a,const pii &b)
{
	return MP(min(a.first,b.first), max(a.second,b.second));
}

pii get(int a,int b)
{
	a=a+M-1; b=b+M+1;
	pii res=MP(inf,-inf);
	while(a^b^1)
	{
		if(~a&1) res=res+seg[a^1];
		if( b&1) res=res+seg[b^1];
		a>>=1; b>>=1;
	}
	return res;
}

bool can(int t)
{
	REP(i,n)
	{
		int j=i+t-1;
		if(j>n) break;
		pii tmp=get(i,j);
		if(tmp.second-tmp.first<=k) return true;
	}
	return false;
}

void work(int t)
{
	int ct=0;
	ostringstream out;
	REP(i,n)
	{
		int j=i+t-1;
		if(j>n) break;
		pii tmp=get(i,j);
		if(tmp.second-tmp.first<=k)
		{
			++ct;
			out<<i<<' '<<j<<endl;
		}
	}
	cout<<ct<<endl<<out.str();
}

int main(void)
{
	scanf("%d%d",&n,&k);
	REP(i,n) { int a; scanf("%d",&a); seg[i+M]=MP(a,a);}
	FORD(i,M-1,1) seg[i]=seg[i+i]+seg[i+i+1];
	int l=1, r=n,mid;
	while(l<r)
	{
		mid=(l+r+1)>>1;
		if(can(mid)) l=mid;
		else r=mid-1;
	}
	cout<<l<<' ';
	work(l);

}