#include <algorithm>
#include <vector>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>
#include <cstring>
#define pb push_back
#define mp make_pair
#define pp pair<int, int>
#define ppp pair<pp, int>
#define pp4 pair<pp, pp>
#define pp3 pair<ll, pair<int, int> > 
#define fi first
#define se second
#define N  200002
#define mod 1000000007
#define inf 2000000001
#define esp 1e-9
#define BLOCK 333
#define BITNUM 555
#define BASE 311097
typedef long long ll;
const ll oo = (ll)1e18 + 1;
using namespace std;
int nt, n;
int a[N];
int pos[N];
bool stt[N];
int lab[N];

void uni(int r1, int r2) {
    int x = lab[r1] + lab[r2];
    if (lab[r1] < lab[r2]) {
        lab[r1] = x;
        lab[r2] = r1;
    } else {
        lab[r2] = x;
        lab[r1] = r2;
    }
}

int get(int x) {
    if (lab[x] < 0) return x;
    lab[x] = get(lab[x]);
    return lab[x];
}

int main() {
    ios::sync_with_stdio(false);
    // freopen("in.in", "r", stdin);
    // freopen("ou.ou", "w", stdout);
    cin >> nt;

    while (nt--) {
        memset(lab, -1, sizeof(lab));
        memset(stt, false, sizeof(stt));

        cin >> n;
        for (int i = 1; i <= n; i++) {
            cin >> a[i];
            pos[a[i]] = i;
        }

        for (int i = 1; i <= n; i++) {
            int p = pos[i];
            stt[p] = true;

            

            if (p > 1 && stt[p - 1]) {
                int r1 = get(p);
                int r2 = get(p - 1);
                if (r1 != r2)
                    uni(r1, r2);
            }

            if (p < n && stt[p + 1]) {
                int r1 = get(p);
                int r2 = get(p + 1);
                if (r1 != r2) 
                    uni(r1, r2);
            }

            int parent = get(p);
            if (-lab[parent] == i) cout << 1;
            else
                cout << 0;

            // cout << "parent = " << parent << " " << lab[parent] << "\n";
        }
        cout << "\n";
    }
    return 0;
}
