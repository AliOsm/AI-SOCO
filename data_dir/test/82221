#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define SPEED ios_base::sync_with_stdio(false); cin.tie(NULL);
#define FOR(i, a, b) for (ll i = a; i < b; ++i)
#define RFOR(i, b, a) for (ll i = b; i >= a; --i)
#define DEBUG(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' ');\
stringstream _ss(_s); istream_iterator<string> _it(_ss); _debug(_it, args);}
#define endl "\n"
#define F first
#define S second
#define pb(x) push_back(x)
#define ALL(x) x.begin(), x.end()
#define mp(x, y) make_pair(x, y)

using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

void _debug(istream_iterator<string>) {}
template<typename T, typename... Args>
void _debug(istream_iterator<string> it, T first, Args... args) {
    cerr << ">> " << *it << " : " << first << endl; _debug(++it, args...);
}
template <typename T1, typename T2>
inline ostream& operator << (ostream& out, const pair<T1, T2>& p) {
    return out << "(" << p.F << ", " << p.S << ")";
}
template<typename T>
inline ostream& operator << (ostream& out, const vector<T>& v) {
    if (v.empty()) return out << "[]";
    else { out << '['; for (auto& e : v) { out << e << ", "; } return out << "\b\b]"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const set<T>& s) {
    if (s.empty()) return out << "{}";
    else { out << '{'; for (auto& e : s) { out << e << ", "; } return out << "\b\b}"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const unordered_set<T>& s) {
    return out << set<T>(ALL(s));
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const map<T1, T2>& m) {
    if (m.empty()) return out << "{}";
    out << '{'; for (auto& p : m) { out << p << ", "; } return out << "\b\b}";
}
template<typename T1, typename T2, typename... Args>
inline ostream& operator << (ostream& out, const unordered_map<T1, T2, Args...>& m) {
    return out << map<T1, T2>(ALL(m));
}
template<typename T>
inline ostream& operator << (ostream& out, const ordered_set<T>& s) {
    return out << set<T>(ALL(s));
}

typedef long long ll;
typedef long double ld;
typedef vector<long long> vll;
typedef pair<ll, ll> pll;
typedef vector<pair<ll, ll>> vpll;
typedef unordered_map<ll, ll> STll;
/************************************** MAIN PROGRAM ********************************************/


template<typename T, typename... Args>
inline ostream& operator << (ostream& out, const unordered_set<T, Args...>& s) {
    return out << set<T>(ALL(s));
}
struct pair_hash {
    template<typename T1, typename T2>
    inline size_t operator()(const pair<T1, T2>& p) const
    {
        return hash<T1>()(p.first) * 31 + hash<T2>()(p.second);
    }
};

int main()
{
    //freopen("input.txt", "r", stdin);
    SPEED
    ll n, m;
    cin >> n >> m;
    vector<unordered_set<pair<ll, ll>, pair_hash>> sts(m);
    vll a(n);
    FOR(i, 0, n)
    {
        cin >> a[i];
    }
    FOR(i, 1, m)
    {
        int pre, cur;
        cin >> pre;
        FOR(j, 0, n - 1)
        {
            cin >> cur;
            sts[i].insert(mp(pre, cur));
            pre = cur;
        }
    }
    ll run = 1;
    ll ans = 0;
    //DEBUG(sts)
    FOR(i, 0, n - 1)
    {
        pll cur = mp(a[i], a[i + 1]);
        bool inAll = true;
        FOR(j, 1, m)
        {
            inAll &= sts[j].count(cur);
        }
        if (inAll)
            run++;
        else {
            ans += run * (run + 1) / 2LL;
            run = 1;
        }
    }
    ans += run * (run + 1) / 2LL;
    cout << ans;
}
/************************************** END OF PROGRAM ******************************************/
