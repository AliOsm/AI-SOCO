#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL_CHECK
#define trace(x) cerr << #x << ": " << x << " ";
#define trnl cerr << "\n";
#else
#define trace(x) {}
#define trnl {}
#endif
typedef long long lolo;
typedef unsigned long long ulolo;
typedef pair<int, int> pii;
#define R(i,n) for(int i=0;i<(n);++i)
#define F(i,a,b) for(int i=(a);i<(b);++i)
#define FS(i,a,b,s) for(int i=(a);i<(b);i+=(s))
#define FD(i,n) for(int i=(n-1);i>=0;--i)
#define FDS(i,n,s) for(int i=(n-1);i>=0;i-=(s))
#define SZ(x) ((int)(x).size())
#define ALL(x) (x).begin(),(x).end()
#define fi first
#define se second
#define M_PI           3.14159265358979323846

const int INF = 1e9 + 23;
const lolo MOD = 1e9 + 7;
const int N = 1e5 + 10;

vector<pii > gr[N];
lolo dist[N];
set<pii > blocks[N];
int n, m;

lolo getDepart(lolo v, lolo in) {
  auto it = blocks[v].upper_bound({in, INF});
  --it;
  pair<lolo, lolo> span = *it;
  lolo out = in;
  if (span.fi <= in) out = max(in, span.se);
  trace(v) trace(in) trace(out) trnl
  return out;
}

void dijkstra(int s) {
  fill(dist, dist + n, INF * 1LL * INF);
  typedef pair<lolo, lolo> qel;
  priority_queue<qel, vector<qel>, greater<qel> > q;
  q.push({0, s});
  while (!q.empty()) {
    qel el = q.top(); q.pop();
    lolo d = el.fi, u = el.se;
    if (dist[u] < d) continue;
    trace(u) trace(d) trnl
    dist[u] = d;
    lolo depart = getDepart(u, d);
    for (auto& it : gr[u]) {
      int e = it.fi, v = it.se;
      q.push({depart + e, v});
    }
  }
}

void read() {
  cin >> n >> m;
  int a, b, w;
  R(_, m) {
    cin >> a >> b >> w;
    --a, --b;
    gr[a].emplace_back(w, b);
    gr[b].emplace_back(w, a);
  }
  int arrives[N];
  R(i, n) {
    int k; cin >> k;
    R(j, k) cin >> arrives[j];
    if (k == 0 || arrives[0] > 0) {
      blocks[i].insert({0, 0});
    }
    for (int st = 0, en; st < k; st = en+1) {
      en = st;
      while (en+1 < k && arrives[en]+1 == arrives[en+1]) ++en;
      blocks[i].insert({arrives[st], arrives[en]+1});
    }
  }
}

int main()
{
  ios_base::sync_with_stdio(0);
  read();
  dijkstra(0);
  lolo ans = (dist[n-1] != INF * 1LL * INF ? dist[n-1] : -1);
  cout << ans << "\n";
  return 0;
}
// g++ -W -Wall -Wextra -pedantic -std=c++0x -o p main.cpp
