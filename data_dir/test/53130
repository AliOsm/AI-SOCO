#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
const double eps=1e-10;
inline int dcmp(double v){
	if(fabs(v)<eps) return 0;
	return v>0?1:-1;
}
struct Point{
	double x,y;
	Point(double _x=0.0,double _y=0.0):x(_x),y(_y){}
	inline Point operator+(const Point& rhs) const{
		return Point(x+rhs.x,y+rhs.y);
	}
	inline Point operator-(const Point& rhs) const{
		return Point(x-rhs.x,y-rhs.y);
	}
	inline Point operator*(const double& mul) const{
		return Point(x*mul,y*mul);
	}
	inline Point operator/(const double& div) const{
		return Point(x/div,y/div);
	}
	inline double Length(){
		return sqrt(x*x+y*y);
	}
	inline Point rotate(double rad){
		return Point(x*cos(rad)-y*sin(rad),y*cos(rad)+x*sin(rad));
	}
} pt[10010];
inline double cross(Point v1,Point v2){
	return v1.x*v2.y-v1.y*v2.x;
}
inline double get_angle(Point pt){
	return atan2(pt.x,pt.y);
}
inline Point get_center(int n){
	double ss=0;
	Point center=Point(0,0);
	for(int i=2;i<=n-1;i++){
		double s=fabs(cross(pt[i]-pt[1],pt[i+1]-pt[1]));
		center=center+(pt[1]+pt[i]+pt[i+1])/3*s;
		ss+=s;
	}
	if(dcmp(ss)==0) return Point(0,0);
	return center/ss;
}
int main(){
	int n,q,o1=1,o2=2;
	double ang=0.0;
	scanf("%d%d",&n,&q);
	for(int i=1;i<=n;i++)
		scanf("%lf%lf",&pt[i].x,&pt[i].y);
	Point center=get_center(n);
	for(int i=1;i<=n;i++)
		pt[i]=pt[i]-center;
	int o,f,t,v;
	while(q--){
		scanf("%d",&o);
		if(o==1){
			scanf("%d%d",&f,&t);
			int fix_pt=(f==o1)?o2:o1;
			Point real_pt=center+pt[fix_pt].rotate(ang);
			double rad=get_angle(real_pt-center);
			center=real_pt+Point(0,-1)*pt[fix_pt].Length();
			ang+=rad;
			if(fix_pt==o1) o2=t;
			else o1=t;
		}else{
			scanf("%d",&v);
			Point ans=center+pt[v].rotate(ang);
			printf("%.15lf %.15lf\n",ans.x,ans.y);
		}
	}
	return 0;
}