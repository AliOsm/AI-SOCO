#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using PII = pair<int, int>;
using VI = vector<int>;

inline ll sq(ll x) {
  return x * x;
}
inline ll compute(ll x, ll y, ll z) {
  return sq(x - y) + sq(y - z) + sq(x - z);
}

int main() {
#ifdef LOCAL_EXEC
//	freopen("sample.in", "r", stdin);
//	freopen("sample.out", "w", stdout);
#else
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#endif

  int t; cin >> t;
  while (t--) {
    vector<VI> gems(3, VI());
    for (int c = 0; c < 3; c++) {
      int n; cin >> n;
      gems[c].resize(n);
    }
    for (auto& row: gems) {
      for (int& x: row) cin >> x;
      sort(row.begin(), row.end());
    }
    ll ans = compute(gems[0][0], gems[1][0], gems[2][0]);
    for (int c = 0; c < 3; c++) {
      int cp = c == 0 ? 2 : c - 1;
      int cn = c == 2 ? 0 : c + 1;

      int ip = 0, in = 0;
      int sp = gems[cp].size(), sn = gems[cn].size();
      for (int& x: gems[c]) {
        while (ip + 1 < sp && gems[cp][ip + 1] <= x) ip++;
        while (in + 1 < sn && gems[cn][in + 1] <= x) in++;
        for (int i: {ip, ip + 1}) {
          for (int j: {in, in + 1}) {
            if (i < sp && j < sn) {
              ans = min(ans, compute(x, gems[cp][i], gems[cn][j]));
            }
          }
        }
      }
    }
    cout << ans << '\n';
  }

  return 0;
}
