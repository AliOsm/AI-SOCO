//
// c.cpp
//
// Siwakorn Srisakaokul - ping128
// Written on Wednesday, 18 December 2013.
//

#include <cstdio>
#include <iostream>
#include <sstream>
#include <cstdlib>
#include <string>
#include <vector>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <cmath>
#include <algorithm>
#include <map>
#include <ctype.h>
#include <string.h>

#include <assert.h>

using namespace std;

typedef long long LL;
typedef pair<int, int> PII;
typedef pair<PII, int> PII2;

#define MAXN 1005

int R, C;
char board[MAXN][MAXN];
int maxx = -1;

int cx[] = {0, 0, -1, 1}, cy[] = {-1, 1, 0, 0};
char ccc[] = {'D', 'I', 'M', 'A'};
void dfs(int ii, int jj, int depth) {
    maxx = max(maxx, depth);
    if (depth == 3) return ;
    for (int i = 0; i < 4; i++) {
        int iii = ii + cx[i];
        int jjj = jj + cy[i];
        if (iii >= 0 && jjj >= 0 && iii < R && jjj < C && board[iii][jjj] == ccc[depth + 1]) {
            dfs(iii, jjj, depth + 1);
        }
    }
}

int visited[MAXN][MAXN];
bool hasCycle;

void dfs2(int ii, int jj, int depth) {
    visited[ii][jj] = 1; 
    for (int i = 0; i < 4; i++) {
        int iii = ii + cx[i];
        int jjj = jj + cy[i];
        if (iii >= 0 && jjj >= 0 && iii < R && jjj < C && board[iii][jjj] == ccc[(depth + 1) % 4]) {
            if (!visited[iii][jjj])
                dfs2(iii, jjj, (depth + 1) % 4);
            else if (visited[iii][jjj] == 1)
                hasCycle = true;
        }
    }
    visited[ii][jj] = 2;
}

int dfs_number[MAXN][MAXN];

void dfs3(int ii, int jj, int depth) {
    dfs_number[ii][jj] = 1;
    for (int i = 0; i < 4; i++) {
        int iii = ii + cx[i];
        int jjj = jj + cy[i];
        if (iii >= 0 && jjj >= 0 && iii < R && jjj < C && board[iii][jjj] == ccc[(depth + 1) % 4]) {
            if (dfs_number[iii][jjj] == 0)
                dfs3(iii, jjj, (depth + 1) % 4);
            dfs_number[ii][jj] = max(dfs_number[iii][jjj] + 1, dfs_number[ii][jj]);
        }
    }
}


int main() {
    scanf("%d %d", &R, &C);
    for (int i = 0; i < R; i++) scanf("%s", board[i]);
    for (int i = 0; i < R; i++) {
        for (int j = 0; j < C; j++) {
            if (board[i][j] == 'D') {
                dfs(i, j, 0);
            }
        }
    }

    if (maxx < 3) {
        printf("Poor Dima!\n");
        return 0;
    }

    for (int i = 0; i < R; i++) {
        for (int j = 0; j < C; j++) {
            if (board[i][j] == 'D' && !visited[i][j]) {
                dfs2(i, j, 0);
            }
        }
    }
    if (hasCycle) {
        printf("Poor Inna!\n");
    } else {
        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                if (board[i][j] == 'D' && !dfs_number[i][j]) {
                    dfs3(i, j, 0);
                }
            }
        }
        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                maxx = max(maxx, dfs_number[i][j]);
            }
        }

        printf("%d\n", maxx / 4);
    }
    return 0;
}
