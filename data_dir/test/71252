#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <set>
#include <algorithm>
#include <cassert>
#include <queue>
#include <map>
#include <functional>
#include <utility>
#include <iostream>
#include <string>
#include <memory>
#include <cmath>
#include <cctype>
#include <iomanip>

using namespace std;

typedef long long ll;
typedef ::std::pair<ll, ll > pll;
typedef ::std::vector< pll > vll;
typedef ::std::vector<int> vi;

#define sz(x)   ( ( int ) ( ( x ).size() ) )
#define FOR(i,a,b)   for(int i = (a), b__ = (b); i <= b__; ++i)

static constexpr size_t maxn = 1000001;

static constexpr inline ll gcd( ll x, ll y )noexcept { return y == 0 ? x : gcd(y,x%y); }
static const int MOD = 998244353;

int powmod(int x, int n){
    int r = 1;
    while(n){
        if(n&1) r = (r *1ll*x) % MOD ;
        x = (x*1ll*x) % MOD ;
        n/=2;
    }
    return r;
}

int mul(int x, int y){ return x*1ll*y%MOD;}

void upd(int&x, int y){
    
    x += y;
    while (x>=MOD)x-=MOD;
    while(x<0)x+=MOD;
}


int inv(int x){ return powmod(x, MOD-2); }

struct node
{
    int x,y,a,d;
};

struct cmp_node
{
    bool operator ()(node const& a, node const&b)const{ return a.a < b.a ; } 
};

int solve()
{  
    int n,m;
    scanf("%d%d",&n,&m);

    vector< node > v;
    for(int i = 1; i<=n;++i){
        for(int j = 1; j<=m;++j){
            int a;
            scanf("%d",&a);
            v.push_back(node{ i, j, a, 0 } ) ;
        }
    }
    
    sort(v.begin(), v.end(), cmp_node() );
    
    int rx, ry, ra, ri ;
    scanf("%d%d",&rx,&ry);
    
    for(int i = 0; i < sz(v); ++i)
    {
        if (v[i].x == rx && v[i].y == ry){
            ra = v[i].a;
            ri = i ;
            break;
        }
    }
    
    int sx = 0, sy = 0, sx2 = 0, sy2 = 0, sd = 0 ;
    
    for(int l = 0 , nn = sz(v), r = 0; l < nn; l = r)
    {
        while(r < nn && v[l].a == v[r].a)++r;
        int inv_l = -1;
        
        if ( l > 0 ) 
        {
            inv_l = inv( l );
        }
        
        for(int i = l; i < r; ++i)
        {
            int x = v[i].x, y = v[i].y;
            
            v[i].d = 0;
            if (inv_l == -1){
                continue;
            }
            upd(v[i].d, mul(sd, inv_l));
            upd(v[i].d, mul(x,x));
            upd(v[i].d, mul(y,y));
            upd(v[i].d, mul(sx2, inv_l));
            upd(v[i].d, mul(sy2, inv_l));
            upd(v[i].d, mul(mul(-x-x,sx), inv_l));
            upd(v[i].d, mul(mul(-y-y,sy), inv_l));
            
        }
        
        for(int i = l; i < r; ++i){
            int x = v[i].x, y = v[i].y;
            
            upd(sd, v[i].d);
            
            upd(sx2, mul(x,x));
            upd(sy2, mul(y,y));
            
            upd(sx, x);
            
            upd(sy, y);
        }
    }
    
    printf("%d\n", v[ri].d);
    
    return 0;
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen( "input.txt", "r", stdin );
    freopen( "output.txt", "w", stdout );
#endif 
    
    ::std::ios::sync_with_stdio(false); ::std::cin.tie(0); ::std::cout.tie(0);
    
    solve();
    
}
