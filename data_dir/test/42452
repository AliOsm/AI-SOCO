#include <bits/stdc++.h>

using namespace std ;

int n ;
vector < vector < int > > V;
vector < int > ord ;
int st[1000010], en[1000010];
bool tree[4000010] ;
int lazy[4000010] ;
int pa[1000010] ;

int cnt ;
void dfs(int idx , int h, int p)
{
    st[idx] = ++cnt ;
    ord.push_back(idx) ;
    pa[idx] = p ;
    for ( int i = 0 ; i < V[idx].size() ; i++ )
        if ( p - V[idx][i] )
            dfs(V[idx][i],h+1,idx);
    ord.push_back(idx) ;
    en[idx] = ++cnt ;
}
void upd(int idx, int l , int r , int a, int b , bool k)
{
    if ( idx*2+2 < 4000010 && lazy[idx] != -1)
        lazy[idx*2+1] = lazy[idx] ;
    if ( idx*2+2 < 4000010 && lazy[idx] != -1)
        lazy[idx*2+2] = lazy[idx] ;
    if ( lazy[idx] != -1 )
        tree[idx] = lazy[idx],
        lazy[idx] = -1 ;
    if ( a > r || b < l ) return ;
    if ( l >= a && r <= b )
    {
        if ( idx*2+1 < 4000010 )
            lazy[idx*2+1] = k ;
        if ( idx*2+2 < 4000010 )
            lazy[idx*2+2] = k ;
        tree[idx] = k ;
        return ;
    }
    int mid = (l+r)/2 ;
    upd(idx*2+1,l,mid,a,b,k) ;
    upd(idx*2+2,mid+1,r,a,b,k) ;
    tree[idx] = tree[idx*2+1] | tree[idx*2+2] ;
}
bool qu(int idx, int l , int r , int a, int b )
{
    if ( idx*2+2 < 4000010 && lazy[idx] != -1 )
        lazy[idx*2+1] = lazy[idx] ;
    if ( idx*2+2 < 4000010 && lazy[idx] != -1 )
        lazy[idx*2+2] = lazy[idx] ;
    if ( lazy[idx] != -1 )
        tree[idx] = lazy[idx],
        lazy[idx] = -1 ;
    if ( a > r || b < l ) return 0 ;
    if ( l >= a && r <= b ) return tree[idx] ;
    int mid = (l+r)/2 ;
    return qu(idx*2+1,l,mid,a,b) |
            qu(idx*2+2,mid+1,r,a,b) ;
}


int main()
{
    memset(lazy,-1,sizeof lazy) ;
    fill(tree,tree+4000010,1) ;
    int q ;
    scanf("%d",&n) ;
    V.resize(n+10) ;
    int x, y ;
    for ( int i = 2 ; i <= n ; i++ )
    {
        scanf("%d%d",&x,&y) ;
        V[x].push_back(y) ;
        V[y].push_back(x) ;
    }
    dfs(1,1,0) ;
    int a, b;
    int s ,e ;
    scanf("%d",&q) ;
    while ( q-- )
    {
        scanf("%d%d",&a,&b) ;
        s = st[b]-1 ;
        e = en[b]-1 ;
        if ( a == 1 )
        {
            a = qu(0,0,ord.size()-1,s,e) ;
            if ( a && pa[b] )
                upd(0,0,ord.size()-1,st[pa[b]]-1,st[pa[b]]-1,1) ,
                upd(0,0,ord.size()-1,en[pa[b]]-1,en[pa[b]]-1,1) ;
            upd(0,0,ord.size()-1,s,e,0) ;
        }
        else if ( a == 2 )
            upd(0,0,ord.size()-1,s,s,1),
            upd(0,0,ord.size()-1,e,e,1) ;
        else
            printf("%d\n",!qu(0,0,ord.size()-1,s,e)) ;
    }
    return 0 ;
}
