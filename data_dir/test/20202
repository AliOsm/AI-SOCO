//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-9;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i, n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n, m;
int f[100005], sum[100005];

int main(void){
  #ifdef nobik
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
  #endif
  scanf("%d %d", &n, &m);
  f[0] = 1;
  for(int i = 1; i <= 100000; ++i){
    f[i] = f[i - 1];
    if(i >= m){
      f[i] += f[i - m];
      if(f[i] >= mod){
        f[i] -= mod;
      }
    }
    sum[i] = sum[i - 1] + f[i];
    if(sum[i] >= mod){
      sum[i] -= mod;
    }
  }
  forn(i, n){
    int l, r; scanf("%d %d", &l, &r);
    int res = sum[r] - sum[l - 1] + mod;
    if(res >= mod) res -= mod;
    printf("%d\n", res);
  }
  return 0;
}
