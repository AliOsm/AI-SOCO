#include <bits/stdc++.h>

#define F first
#define S second

#define ll long long
#define ull unsigned long long
#define ld long double

#define pb push_back
#define ppb pop_back
#define mp make_pair

#define sz(x) (int) x.size()
#define all(x) x.begin(), x.end()
#define bit(x) __builtin_popcountll(x)
#define sqr(x) ((x) * 1LL * (x))

#define nl '\n'
#define ioi exit(0);

#define NeedForSpeed ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);

#define freopen(x) freopen(x".in", "r", stdin), freopen (x".out", "w", stdout);

using namespace std;

typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <double, double> pdd;

const int N = 1e5 + 7, MxN = 1e6 + 7, mod = 1e9 + 7, inf = 2e9 + 7;
const long long linf = (ll)1e18 + 7;
const double eps = 1e-9;
const int ii[] = {-1, 0, 1, 0, 1, -1, -1, 1}, jj[] = {0, 1, 0, -1, 1, -1, 1, -1};


    int n, q, sz;
    int ls[N * 50], rs[N * 50], root[N];
    pii a[N];
    struct Tree{
        int pref, suff, ans, len;
        Tree(int _len = 0){pref = suff = ans = 0; len = _len;}
    } t[N * 50];

    inline Tree Merge(Tree a, Tree b){
        Tree res;
        res.len = a.len + b.len;
        res.ans = max({a.ans, b.ans, a.suff + b.pref});
        res.pref = a.pref + (a.pref == a.len ? b.pref : 0);
        res.suff = b.suff + (b.suff == b.len ? a.suff : 0);
        return res;
    }

    inline void Update(int pos, int lv, int &v, int tl = 1, int tr = n){
        v = ++sz;
        if (tl == tr){
            t[v].pref = t[v].suff = t[v].ans = t[v].len = 1;
            return;
        }
        int tm = tl + tr >> 1;
        if (pos <= tm) Update(pos, ls[lv], ls[v], tl, tm), rs[v] = rs[lv];
        else Update(pos, rs[lv], rs[v], tm + 1, tr), ls[v] = ls[lv];
        t[v] = Merge(t[ls[v]], t[rs[v]]);
    }

    inline Tree Get(int l, int r, int v, int tl = 1, int tr = n){
        if (l <= tl && tr <= r) return t[v];
        if (tl > r || tr < l) return Tree(tr - tl + 1);
        int tm = tl + tr >> 1;
        Tree L, R;
        L = Get(l, r, ls[v], tl, tm), R = Get(l, r, rs[v], tm + 1, tr);
        return Merge(L, R);
    }

    inline void Build(int &v, int tl = 1, int tr = n){
        if (!v) v = ++sz;
        if (tl == tr)
        {
            t[v].len=1;
            return;
        }
        int tm = tl + tr >> 1;
        Build(ls[v], tl, tm);
        Build(rs[v], tm + 1, tr);
        t[v] = Merge(t[ls[v]],t[rs[v]]);
    }

    inline bool cmp(pii a, pii b){
        if (a.F != b.F) return a.F > b.F;
        return a.S < b.S;
    }

int main(){
    scanf ("%d", &n);
    for (int i = 1; i <= n; i++)
        scanf ("%d", &a[i].F), a[i].S = i;
    sort (a + 1, a + 1 + n, cmp);
    Build(root[0]);
    for (int i = 1; i <= n; i++)
        Update(a[i].S, root[i - 1], root[i]);

    scanf ("%d", &q);
    for (int i = 1, sol, on, x, l, r, m, ans = n; i <= q; i++){
        scanf ("%d%d%d", &sol, &on, &x);
        l = 1, r = n;
        while (l <= r){
            m = l + r >> 1;
            if (Get(sol, on, root[m]).ans >= x) ans = m, r = m - 1;
            else l = m + 1;
        }
        printf ("%d\n", a[ans].F);
    }

    ioi
}