#include <iostream>
#include <cstdio>
#include <cstdlib>
#define lch a[n].lc
#define rch a[n].rc
using namespace std;
const int maxn=1e6+10;
int n,m,root,topt,t=1e6,aa[maxn],b[maxn];
struct da{int lc,rc,ma,tag;}a[4*maxn];
inline void updata(int n){a[n].ma=max(a[lch].ma,a[rch].ma);}
void build_tree(int &n,int l,int r)
{
	n=++topt; if (l==r) {return;}
	int mid=(l+r)>>1;
	build_tree(lch,l,mid); build_tree(rch,mid+1,r);
	updata(n);
}
void push_down(int n)
{
	if (!a[n].tag) return;
	a[lch].ma+=a[n].tag; a[lch].tag+=a[n].tag;
	a[rch].ma+=a[n].tag; a[rch].tag+=a[n].tag;
	a[n].tag=0;
}
void tree_add(int n,int L,int R,int l,int r,int k)
{
	if (L==l && R==r) {a[n].ma+=k; a[n].tag+=k; return;}
	int mid=(L+R)>>1; push_down(n);
	if (r<=mid) tree_add(lch,L,mid,l,r,k);
	else if (l>=mid+1) tree_add(rch,mid+1,R,l,r,k);
	else tree_add(lch,L,mid,l,mid,k),tree_add(rch,mid+1,R,mid+1,r,k);
	updata(n);
}
int qury(int n,int l,int r)
{
	if (l==r) return l;
	int mid=(l+r)>>1; push_down(n);
	if (a[rch].ma>0) return qury(rch,mid+1,r);else return qury(lch,l,mid);
}
int main()
{
	scanf("%d%d",&n,&m);
	build_tree(root,1,t);
	for (int i=1;i<=n;i++) 
	{
		scanf("%d",&aa[i]);
		tree_add(root,1,t,1,aa[i],1);
	}

	for (int i=1;i<=m;i++)
	{
		scanf("%d",&b[i]);
		tree_add(root,1,t,1,b[i],-1);
	}
	
	int q; scanf("%d",&q);
	for (int _=1;_<=q;_++)
	{
		int op,lc,x;
		scanf("%d%d%d",&op,&lc,&x);
		if (op==1)
		{
			tree_add(root,1,t,1,aa[lc],-1);
			aa[lc]=x;
			tree_add(root,1,t,1,aa[lc],1);
		}
		else
		{
			tree_add(root,1,t,1,b[lc],1);
			b[lc]=x;
			tree_add(root,1,t,1,b[lc],-1);
		}
		if (a[root].ma<=0) printf("-1\n");else printf("%d\n",qury(root,1,t));
	}
return 0;
}