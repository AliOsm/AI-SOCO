#include <bits/stdc++.h>

#define pb push_back
#define pf push_front
#define mp make_pair
#define sz size
#define ll long long
#define ld long double
#define fs first
#define sc second
#define forn(i, f, t) for(int i = f; i < t; i++)
#define all(x) (x).begin(), (x).end()
#define ins insert

const int INF = 2147483647;
const int MOD = 1000000007;
const ll INF64 = 9223372036854775807;
const ld EPS = 1e-7;

using namespace std;

pair<pair<int, int>, pair<int, string> > s[1600000];
int l[25], m[25], w[25];
int res = -INF, st, lst;
string ans = "Impossible\n", cur, samp = "";


bool comp(pair<pair<int, int>, pair<int, string> > &a, pair<pair<int, int>, pair<int, string> > &b){
    return (a.fs.fs == b.fs.fs ? (a.fs.sc == b.fs.sc ? a.sc.fs > b.sc.fs : a.fs.sc < b.fs.sc) : a.fs.fs < b.fs.fs);
}


void check(int k, int a, int b, int c, int n){
    if (k == n)
        s[lst++] = mp(mp(a - b, b - c), mp(a, cur));
    else{
        cur[2 * k] = 'L', cur[2 * k + 1] = 'M';
        check(k + 1, a + l[k], b + m[k], c, n);
        cur[2 * k] = 'M', cur[2 * k + 1] = 'W';
        check(k + 1, a, b + m[k], c + w[k], n);
        cur[2 * k] = 'L', cur[2 * k + 1] = 'W';
        check(k + 1, a + l[k], b, c + w[k], n);
    }
}


void check2(int k, int a, int b, int c, int n){
    if (k == n){
        int l = 0, r = lst - 1;
        while (l < r - 1){
            int m = (l + r) / 2;
            if (s[m].fs.fs == b - a){
                if (s[m].fs.sc < c - b) l = m;
                else r = m;
            }
            else if (s[m].fs.fs < b - a) l = m;
            else r = m;
        }
        int t = (s[l].fs.fs == b - a && s[l].fs.sc == c - b ? l : r);
        if (s[t].fs.fs == b - a && s[t].fs.sc == c - b && s[t].sc.fs + a > res){
            res = s[t].sc.fs + a;
            ans = s[t].sc.sc + cur;
        }
    }
    else{
        cur[2 * k - st] = 'L', cur[2 * k + 1 - st] = 'M';
        check2(k + 1, a + l[k], b + m[k], c, n);
        cur[2 * k - st] = 'M', cur[2 * k + 1 - st] = 'W';
        check2(k + 1, a, b + m[k], c + w[k], n);
        cur[2 * k - st] = 'L', cur[2 * k + 1 - st] = 'W';
        check2(k + 1, a + l[k], b, c + w[k], n);
    }
}


int main(){
    // freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
    int n;
    scanf("%d", &n);
    forn(i, 0, n) scanf("%d%d%d", l + i, m + i, w + i);
    int k = n / 2;
    st = 2 * k;
    cur = ""; forn(i, 0, 2 * k) cur += 'M';
    check(0, 0, 0, 0, k);
    sort(s, s + lst, comp);
    cur = ""; forn(i, 2 * k, 2 * n) cur += 'M';
    check2(k, 0, 0, 0, n);
    if (ans == "Impossible\n") {cout << ans; return 0;}
    // for (int i = 0; i < 2 * k; i += 2) printf("%c%c\n", ans[i], ans[i + 1]);
    // for (int i = 2 * n + 2 * k; i < 4 * n; i += 2) printf("%c%c\n", ans[i], ans[i + 1]);
    for (int i = 0; i < 2 * n; i += 2) printf("%c%c\n", ans[i], ans[i + 1]);
    return 0;
}