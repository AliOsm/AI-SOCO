#include <iostream>
#include <cstdio>
#include <algorithm>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <cstring>
#include <fstream>
#include <memory.h>
#include <iomanip>
#include <omp.h>
#include <bitset>
#include <fstream>
#include <string>
#include <list>
#include <unordered_map>

using namespace std;

#define right asfdsg
#define left asfdsvs
#define pb push_back
#define F first
#define S second
#define mp make_pair
#define x1 _xxx1
#define y1 _yyy1

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef std::pair < int, int > pii;
typedef std::pair < ll, ll > pll;
typedef std::vector < std::vector < ld > > vld;

const int INF = (int) 2e9;
const ld EPS = (ld) 1e-5;
const int BASE = (int) 1e9 + 7;
const int MAXN = 600500;
const ll INFLL = (ll) 1e18;

int n, k;
int a[MAXN];
vector < int > masks;
int cnt[MAXN];

int main() {
//    freopen ("input.txt", "r", stdin);
    scanf ("%d%d", &n, &k);
    for (int mask = 0; mask < (1 << 15); mask ++) {
        if (__builtin_popcount(mask) == k)
            masks.emplace_back(mask);
    }
    for (int i = 1; i <= n; i ++)
        scanf ("%d", a + i), cnt[ a[i] ] ++;
    sort (a + 1, a + 1 + n);
    ll ans = 0;

    for (int msk : masks) {
        for (int i = 0; i <= 10000; i ++) {
            if (msk == 0) {
                ans += 1ll * cnt[i] * (cnt[i] - 1) / 2;
            } else {
                if (i < (i ^ msk))
                    ans += 1ll * cnt[i] * cnt[ i ^ msk ];
            }
        }
    }
    cout << ans;
    return 0;
}
