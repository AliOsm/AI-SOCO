/**
 * @author khokharnikunj8
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class BNavigationSystem {
public:
    vector<vector<int>> adj;
    vector<int> dist;
    vector<int> numberOfPaths;
    vector<int> check;

    void BFS(int src, int n) {
        dist[src] = 0;
        numberOfPaths[src] = 1;
        queue<int> q;
        q.push(src);
        check[src] = true;
        while (!q.empty()) {
            int curr = q.front();
            q.pop();
            for (int x : adj[curr]) {
                if (!check[x]) {
                    q.push(x);
                    check[x] = true;
                }
                if (dist[x] > dist[curr] + 1) {
                    dist[x] = dist[curr] + 1;
                    numberOfPaths[x] = 1;
                } else if (dist[x] == dist[curr] + 1) {
                    numberOfPaths[x]++;
                }

            }
        }
    }


    void solve(std::istream &in, std::ostream &out) {
        int n, m;
        in >> n >> m;
        adj.resize(n, vector<int>());
        dist.resize(n, INT32_MAX);
        numberOfPaths.resize(n, 0);
        check.resize(n, false);
        for (int i = 0; i < m; i++) {
            int u, v;
            in >> u >> v;
            u--, v--;
            adj[v].push_back(u);
        }
        int k;
        in >> k;
        vector<int> ar(k);
        for (int i = 0; i < k; i++) in >> ar[i];
        for (int i = 0; i < k; i++) ar[i]--;
        BFS(ar[k - 1], n);
        int min = 0;
        int max = 0;
        for (int i = 1; i < k; i++) {
            if (dist[ar[i]] == dist[ar[i - 1]] - 1) {
                if (numberOfPaths[ar[i - 1]] > 1)max++;
            } else {
                max++;
                min++;
            }
        }
        out << min << " " << max << "\n";

    }
};


int main() {
    BNavigationSystem solver;
    std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
