#include <bits/stdc++.h>

using namespace std;

const int alp = 26;

int root;
vector<int> cnt;
vector<int> term;
vector<vector<int>> t;

int new_node() {
    cnt.push_back(0);
    term.push_back(false);
    int ans = (int)t.size();
    t.push_back(vector<int> (alp, -1));
    return ans;
}

void init() {
    root = new_node();
}

void add(string s) {
    int cur = root;
    cnt[cur]++;
    for (auto x : s) {
        if (t[cur][x - 'a'] == -1) {
            int nw = new_node();
            t[cur][x - 'a'] = nw;
        }
        cur = t[cur][x - 'a'];
        cnt[cur]++;
    }
    term[cur] = true;
}

void add(multiset<int> &a, multiset<int> &b) {
    if (a.size() < b.size()) {
        a.swap(b);
    }
    for (auto t : b) {
        a.insert(t);
    }
}

vector<multiset<int>> h;

void calc(int v, int depth) {
    for (int i = 0; i < alp; i++) {
        if (t[v][i] != -1) {
            calc(t[v][i], depth + 1);
            add(h[v], h[t[v][i]]);
        }
    }
    if (v == root) {
        return;
    }
    if (term[v]) {
        h[v].insert(depth);
    }
    if (h[v].count(depth)) {
        return;
    } else {
        assert(!h[v].empty());
        h[v].erase(prev(h[v].end()));
        h[v].insert(depth);
    }
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    
    #ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
    
    int n;
    cin >> n;
    vector<string> a(n);
    for (auto &t : a) {
        cin >> t;
    }
    init();
    for (auto t : a) {
        add(t);
    }
    h.resize(t.size());
    calc(root, 0);
    int ans = 0;
    for (auto t : h[root]) {
        ans += t;
    }
    cout << ans;
}
