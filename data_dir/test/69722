#include <algorithm>
#include <iostream>
#include <valarray>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <numeric>
#include <complex>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <ctime>
#include <cmath>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <ext/algorithm>

using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i)
#define error(x) cout << #x << " = " << (x) << endl;
#define all(n) (n).begin(), (n).end()
#define Size(n) ((int)(n).size())
#define mk make_pair
#define pb push_back
#define F first
#define S second
#define X real()
#define Y imag()

typedef long long ll;
typedef pair<ll, ll> pii;
typedef pair<ll, ll> pll;
typedef complex<double> point;

template <class P, class Q> void smin(P &a, Q b) { if (b < a) a = b; } 
template <class P, class Q> void smax(P &a, Q b) { if (b > a) a = b; } 
template <class P, class Q> bool in(const P &a, const Q &b) { return a.find(b) != a.end(); }

const int MAXN = 301*1000;

int fen[MAXN], arr[MAXN];

void set_position(int pos, int val) {
	pos++;
	int tmp = val;
	val -= arr[pos];
	arr[pos] = tmp;
	while (pos < MAXN) {
		fen[pos] += val;
		pos += pos&-pos;
	}
}

int get_partial_sum(int pos) {
	pos++;
	int total = 0;
	while (pos) {
		total += fen[pos];
		pos -= pos&-pos;
	}
	return total;
}

int get_position(int pos) {
	return get_partial_sum(pos)-get_partial_sum(pos-1);
}

int n;
int line[MAXN], position[MAXN];

void update(int ind, int who) {
	position[who] = ind;
	line[ind] = who;

	if (who > 0) set_position(who-1, position[who-1] > position[who]);
	if (who+1 < n) set_position(who, position[who] > position[who+1]);
}

int main() {
	ios::sync_with_stdio();

	cin >> n;
	FOR(i, 0, n) {
		int x;
		cin >> x;
		x--;
		update(i, x);
	}

	int q;
	cin >> q;

	while (q--) {
		int t, x, y;
		cin >> t >> x >> y;
		x--; y--;

		if (t == 1) {
			int answer = get_partial_sum(y-1)-get_partial_sum(x-1)+1;
			cout << answer << "\n";
		} else {
			int ax = line[x], ay = line[y];
			update(x, ay);
			update(y, ax);
		}
	}
	return 0;
}

