#include <bits/stdc++.h>
using namespace std;

const int MAXN=1e5+5;
const double EPS=1e-7, INF=1e7;

int N;
double X[MAXN], Y[MAXN];

double binser(double pos,int id) {
	double x, y;
	x=pos-X[id];
	y=abs(Y[id]);
	return (x*x+y*y)/(2.0*y);
	
	double awa, akh;
	awa=0.0;
	akh=INF;
	//cout<<pos<<' '<<id<<'\n';
	
	while (akh-awa>EPS) {
		double cen, x, y, dist;
		cen=awa/2.0+akh/2.0;
		x=X[id]-pos;
		y=abs(Y[id])-cen;
		dist=sqrt(x*x+y*y);
		
		if (cen-awa<EPS||akh-cen<EPS) {
			break;
		}
		
		if (cen>dist) {
			akh=cen;
		}
		else {
			awa=cen;
		}
	}
	
	return awa;
}

int main () {
	//ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	
	cin>>N;
	
	for (int i=0;i<N;i++) {
		cin>>X[i]>>Y[i];
		
		if (Y[i]*Y[0]<0.0) {
			cout<<-1<<'\n';
			return 0;
		}
	}
	
	double awa, akh, res;
	awa=-INF;
	akh=INF;
	
	while (akh-awa>EPS) {
		double cen, radius;
		cen=(awa+akh)/2.0;
		radius=0.0;
		//cout<<cen<<'\n';
		
		if (cen-awa<EPS||akh-cen<EPS) {
			break;
		}
		
		bool geser;
		for (int i=0;i<N;i++) {
			double save;
			save=binser(cen,i);
			
			if (save>radius) {
				radius=save;
				geser=(X[i]>cen);
			}
		}
		
		res=radius;
		
		if (geser) {
			awa=cen;
		}
		else {
			akh=cen;
		}
	}
	
	cout<<fixed<<setprecision(9)<<res<<'\n';
	return 0;
}
