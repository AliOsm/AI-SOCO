#include <bits/stdc++.h>
using namespace std;
const int N = 1000 + 5;

int zhi[ N ], hen[ N ];

unordered_map< uint64_t, int > cache;
uint64_t encode( int x1, int y1, int x2, int y2 ) {
	uint64_t key = x1;
	key <<= 10;
	key |= y1;
	key <<= 10;
	key |= x2;
	key <<= 10;
	key |= y2;
	return key;
}
int ask( int x1, int y1, int x2, int y2 ) {
	uint64_t key = encode( x1, y1, x2, y2 );
	if ( cache.find( key ) != cache.end() )
		return cache[ key ];

	int& ret = cache[ key ];
	printf( "? %d %d %d %d\n", x1, y1, x2, y2 );
	fflush( stdout );
	scanf( "%d", &ret );
	return ret;
}

int main() {
	int n; scanf( "%d", &n );
	vector< int > x;
	for ( int i = 1 ; i <= n - 1 ; ++ i ) {
		hen[ i ] = ask( i, 1, i, n );
		hen[ i ] -= hen[ i - 1 ];
	}
	for ( int i = n ; i >= 1 ; -- i ) {
		hen[ i ] += hen[ i - 1 ];
		if ( hen[ i ] & 1 ) x.push_back( i );
	}
	cache[ encode( n, 1, n, n ) ] = hen[ n ];
	vector< int > y;
	for ( int i = 1 ; i <= n - 1 ; ++ i ) {
		zhi[ i ] = ask( 1, i, n, i );
		zhi[ i ] -= zhi[ i - 1 ];
	}
	for ( int i = n ; i >= 1 ; -- i ) {
		zhi[ i ] += zhi[ i - 1 ];
		if ( zhi[ i ] & 1 ) y.push_back( i );
	}
	cache[ encode( 1, n, n, n ) ] = zhi[ n ];
	vector< pair< int, int > > ans;
	if ( x.empty() ) {
		if ( y.size() == 2 ) {
			{
				int l = 0;
				for ( int len = 1 << 9 ; len >= 1 ; len >>= 1 ) {
					if ( l + len > n ) continue;
					int cnt = ask( l + 1, y[ 0 ], l + len, y[ 0 ] );
					if ( not ( cnt & 1 ) ) l += len;
				}
				ans.emplace_back( l + 1, y[ 0 ] );
			}
			{
				int l = 0;
				for ( int len = 1 << 9 ; len >= 1 ; len >>= 1 ) {
					if ( l + len > n ) continue;
					int cnt = ask( l + 1, y[ 1 ], l + len, y[ 1 ] );
					if ( not ( cnt & 1 ) ) l += len;
				}
				ans.emplace_back( l + 1, y[ 1 ] );
			}
		} else {
			assert( 0 );
		}
	} else if ( y.empty() ) {
		if ( x.size() == 2 ) {
			{
				int l = 0;
				for ( int len = 1 << 9 ; len >= 1 ; len >>= 1 ) {
					if ( l + len > n ) continue;
					int cnt = ask( x[ 0 ], l + 1, x[ 0 ], l + len );
					if ( not ( cnt & 1 ) ) l += len;
				}
				ans.emplace_back( x[ 0 ], l + 1 );
			}
			{
				int l = 0;
				for ( int len = 1 << 9 ; len >= 1 ; len >>= 1 ) {
					if ( l + len > n ) continue;
					int cnt = ask( x[ 1 ], l + 1, x[ 1 ], l + len );
					if ( not ( cnt & 1 ) ) l += len;
				}
				ans.emplace_back( x[ 1 ], l + 1 );
			}
		} else {
			assert( 0 );
		}
	} else {
		for ( int xx : x ) {
			for ( int yy : y ) {
				printf( "? %d %d %d %d\n", xx, yy, xx, yy );
				fflush( stdout );
				int oao; scanf( "%d", &oao );
				if ( oao == 1 ) ans.emplace_back( xx, yy );
			}
		}
	}

	printf( "! %d %d %d %d\n", ans[ 0 ].first, ans[ 0 ].second, ans[ 1 ].first, ans[ 1 ].second );
	fflush( stdout );
	return 0;
} 