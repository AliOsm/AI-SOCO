//In the name of God

#include <iostream>
#include <cstdio>
#include <queue>
#include <vector>
#include <cstring>
#include <cmath>
using namespace std;
#define mp make_pair
const int MAXN=1e5+10,MAXL=20;
int par[MAXN][MAXL],dis[MAXN],h[MAXN],sq;
vector <int> g[MAXN],red;
queue <pair <int,int> > q;

void dfs(int v,int p=0,int hei=0)
{
  h[v]=hei;
  par[v][0]=p;
  for(int i=1;i<MAXL;i++)
    par[v][i]=par[par[v][i-1]][i-1];
  for(int i=0;i<g[v].size();i++)
    {
      int u=g[v][i];
      if(u!=p)
	dfs(u,v,hei+1);
    }
}

int parent(int v,int hei)
{
  for(int i=0;i<MAXL;i++)
    if(hei&(1<<i))
      v=par[v][i];
  return v;
}
  
int LCA(int v,int u)
{
  if(h[v]>h[u])
    swap(v,u);
  u=parent(u,h[u]-h[v]);
  if(u==v)
    return u;
  for(int i=MAXL-1;i>=0;i--)
    if(par[v][i]!=par[u][i])
      v=par[v][i],u=par[u][i];
  return par[v][0];
}

int dist(int v,int u)
{
  int l=LCA(v,u);
  int res=h[v]-h[l]+h[u]-h[l];
  return res;
}

int calc(int v)
{
  int ret=dis[v];
  for(int i=0;i<red.size();i++)
    {
      int u=red[i];
      ret=min(ret,dist(v,u));
    }
  return ret;
}

void bfs()
{
  while(!q.empty())
    {
      pair <int,int> p=q.front();
      q.pop();
      int v=p.first,d=p.second;
      if(dis[v]<=p.second)
	continue;
      dis[v]=p.second;
      for(int i=0;i<g[v].size();i++)
	{
	  int u=g[v][i];
	  if(dis[u]>d+1)
	    q.push(mp(g[v][i],d+1));
	}
    }
}

void update()
{
  for(int i=0;i<red.size();i++)
    q.push(mp(red[i],0));
  bfs();
  red.clear();
}

int main()
{
  int n,m;
  //cin>>n>>m;
  scanf("%d%d",&n,&m);
  sq=sqrt(m);
  memset(dis,127,sizeof dis);
  for(int i=1;i<n;i++)
    {
      int v,u;
      scanf("%d%d",&v,&u);
      //cin>>v>>u;
      v--;u--;
      g[v].push_back(u);
      g[u].push_back(v);
    }
  dfs(0);
  red.push_back(0);
  for(int i=0;i<m;i++)
    {
      int t,v;
      //cin>>t>>v;
      scanf("%d%d",&t,&v);
      v--;
      if(t==1)
	red.push_back(v);
      else
	printf("%d\n",calc(v));
	//cout<<calc(v)<<endl;
      if(i%sq==0)
	update();
    }
  return 0;
}
