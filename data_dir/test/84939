#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:1000000000")
#include <iostream>
#include <string>
#include <stack>
#include <cstring>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <ctime>
#include <cmath>
#include <assert.h>

using namespace std;

const int N = 100001;

vector < pair < int, int > > G[N];
int cnt[N], d[N], t[N];
int n, u, v, w;

bool goodNumber(int x)
{
	while (x > 0)
	{
		if (x % 10 != 4 && x % 10 != 7)
			return false;
		x /= 10;
	}
	return true;
}

void solve1(int v, int parent)
{
	cnt[v] = 1;
	t[v] = 0;
	for (int i = 0; i < G[v].size(); ++i)
	{
		if (G[v][i].first != parent) 
		{
			solve1(G[v][i].first, v);
			cnt[v] += cnt[G[v][i].first];
			if (goodNumber(G[v][i].second) == true)
				t[v] += cnt[G[v][i].first];
			else
				t[v] += t[G[v][i].first];
		}
	}
}

void solve2(int v, int parent)
{
	for (int i = 0; i < G[v].size(); ++i)
	{
		if (G[v][i].first != parent)
		{
			if (goodNumber(G[v][i].second) == true)
				d[G[v][i].first] = cnt[1] - cnt[G[v][i].first];
			else
				d[G[v][i].first] = d[v] + t[v] - t[G[v][i].first];
			solve2(G[v][i].first, v);
		}
	}
}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	scanf("%d", &n);
	for (int i = 1; i < n; ++i)
	{
		scanf("%d%d%d", &u, &v, &w);
		G[v].push_back(make_pair(u, w));
		G[u].push_back(make_pair(v, w));
	}
	solve1(1, 0);
	d[1] = 0;
	solve2(1, 0);
	long long ans = 0;
	for (int i = 1; i <= n; ++i)
	{
		ans += 1ll * t[i] * (t[i] - 1);
		ans += 1ll * d[i] * (d[i] - 1);
		ans += 2ll * t[i] * d[i];
	}
	cout << ans << endl;
    return 0;
}