#include <bits/stdc++.h>
#define err(args...) {}
#ifdef DEBUG
#include "_debug.cpp"
#endif
using namespace std;
using ll = long long;
const int N = 1000;
char grid[N + 1][N + 1];
bool done[N + 1][N + 1] = {};
string g[N + 1];
int di[] = {-1, 1, 0, 0};
int dj[] = {0, 0, -1, 1};
tuple<int, int, int> tpd[N + 1][N + 1];
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int n, m, p;
    cin >> n >> m >> p;
    vector<int> s(p + 1);
    for(int i = 1; i <= p; i++) {
        cin >> s[i];
    }
    priority_queue<tuple<int, int, int, int, int>> pq;
    // turn, player, distance, i, j
    for(int i = 1; i <= n; i++) {
        cin >> g[i];
        for(int j = 1; j <= m; j++) {
            grid[i][j] = g[i][j - 1];
            if('1' <= grid[i][j] and grid[i][j] <= '9') {
                tpd[i][j] = {0, grid[i][j] - '0', 0};
                pq.push({-get<0>(tpd[i][j]), -get<1>(tpd[i][j]), -get<2>(tpd[i][j]), i, j});
            }
        }
    }
    while(not pq.empty()) {
        auto [turn, player, distance, i, j] = pq.top();
        pq.pop();
        turn = -turn;
        player = -player;
        distance = -distance;
        if(not done[i][j]) {
            grid[i][j] = '0' + player;
            tuple<int, int, int> new_tpd = {turn + (distance == s[player]), player, distance == s[player] ? 1 : distance + 1};
            for(int d = 0; d < 4; d++) {
                int ni = i + di[d];
                int nj = j + dj[d];
                if(1 <= ni and ni <= n and 1 <= nj and nj <= m
                and not done[ni][nj] and grid[ni][nj] == '.'
                and (get<1>(tpd[ni][nj]) == 0 or new_tpd < tpd[ni][nj])) {
                    tpd[ni][nj] = new_tpd;
                    pq.push({-get<0>(tpd[ni][nj]), -get<1>(tpd[ni][nj]), -get<2>(tpd[ni][nj]), ni, nj});
                }
            }
            done[i][j] = true;
        }
    }
    vector<int> count(10);
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= m; j++) {
            if('1' <= grid[i][j] and grid[i][j] <= '9') {
                count[grid[i][j] - '0']++;
            }
        }
    }
    for(int i = 1; i <= p; i++) {
        cout << count[i] << " ";
    }
    cout << endl;
    return 0;
}
