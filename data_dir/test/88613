#include <iostream>
#include <ctime>
#include <iomanip>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <cmath>
#include <set>
#include <unordered_set>
#include <unordered_map>
#include <chrono>
#include <stack>
#include <cassert>
#include <queue>
#include <deque>
#include <climits>
#include <cstring>
#include <random>
#include <bitset>

using namespace std;

typedef long long ll;

const int mod = 998244353;

int mul(int a, int b) {
    ll res = (ll)a * (ll)b;
    return res % mod;
}

int add(int a, int b) {
    ll res = (ll)a + b;
    return res % mod;
}

int binpow(int a, int b) {
    if (b == 0) {
        return 1;
    } else if (b % 2 == 0) {
        int res = binpow(a, b / 2);
        return mul(res, res);
    } else {
        int res = binpow(a, b - 1);
        return mul(res, a);
    }
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    #ifdef LOCAL
    assert(freopen("input.txt", "r", stdin));
    assert(freopen("output.txt", "w", stdout));
    #endif
    
    int n, m;
    cin >> n >> m;
    string a, b;
    cin >> a >> b;
    if (a.size() < b.size()) {
        string res;
        for(int i = 0; i < (m - n); i++) {
            res.push_back('0');
        }
        res += a;
        a = res;
    } else if (a.size() > b.size()) {
        string res;
        for(int i = 0; i < (n - m); i++) {
            res.push_back('0');
        }
        res += b;
        b = res;
    }
    int cnt = 0;
    int ans = 0;
    int top = (int)a.size() - 1;
    for (int i = 0; i < (int)a.size(); i++, top--) {
        cnt += (b[i] - '0');
        if (a[i] == '1') {
            int pw = binpow(2, top);
            ans = add(ans, mul(cnt, pw));
        }
    }
    cout << ans << '\n';
}
