/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(int x) { return 8*sizeof(int)-__builtin_clz(x); }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
// #include "../l/mod.h"

class grippingstory {
public:
    int dist(int x, int y, int X, int Y) {
        int dx = abs(x-X);
        int dy = abs(y-Y);
        if (dx > 1e9 || dy > 1e9) return 1e9+1;
        ll d2 = ll(dx)*dx + ll(dy)*dy;
        ll d = sqrt(double(d2));
        while (d*d > d2) --d;
        while (d*d < d2) ++d;
        return int(d);
    }

    void solve(istream& cin, ostream& cout) {

        int X, Y; cin >> X >> Y;
        int W, R; cin >> W >> R;

        int N; cin >> N;
        int M = 1<<logceil(N+1);

        vector<pair<pii, pii>> S(N+1);
        S[0] = {{0,0},{R,W}};
        for (int i = 0; i < N; ++i) {
            int x,y,m,p,r;
            cin >> x >> y >> m >> p >> r;
            S[i+1] = {{dist(x,y,X,Y), m}, {r,p}};
        }

        sort(S.begin(),S.end());
        vector<int> LO(2*M, 2e9), P(N+1, -1), Q;
        for (int i = 0; i < N+1; ++i) {
            if (S[i].x == pii{0,0}) {
//                cout << "starting " << i << endl;
                Q.push_back(i);
            } else {
                LO[M+i] = S[i].x.y;
            }
        }
        for (int i = M - 1; i >= 1; --i) LO[i] = min(LO[2*i], LO[2*i+1]);

        for (int q = 0; q < Q.size(); ++q) {
//            cout << "process " << Q[q] << endl;
            int p = Q[q];
            int x = S[p].y.x;
            int y = S[p].y.y;
            while (true) {
                int i = 1;
                while (i < M) i = 2*i+(LO[2*i] > y);
                i -= M;
                if (i < N+1 && S[i].x.y <= y && S[i].x.x <= x) {
//                    cout << "get " << i << endl;
                    P[i] = p;
                    Q.push_back(i);
                    i += M;
                    LO[i] = 2e9;
                    while (i > 1) {
                        i /= 2;
                        LO[i] = min(LO[2*i], LO[2*i+1]);
                    }
                } else {
                    break;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < N+1; ++i) ans += P[i] != -1;
        cout << ans << endl;

    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	grippingstory solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}
