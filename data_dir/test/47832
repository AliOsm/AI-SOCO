#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
void sprint(string s) {for (int i = 0; i < (int)s.size(); ++i)	printf("%c",s[i]); printf("\n");}
struct FlowEdge {
    int v, u;
    long long cap, flow = 0;
    FlowEdge(int v, int u, long long cap) : v(v), u(u), cap(cap) {}
};
int ta=0,tb=0;
int ans[110][110];
int N;
struct Dinic {
    const long long flow_inf = 1e18;
    vector<FlowEdge> edges;
    vector<vector<int>> adj;
    int n, m = 0;
    int s, t;
    vector<int> level, ptr;
    queue<int> q;

    Dinic(int n, int s, int t) : n(n), s(s), t(t) {
        adj.resize(n);
        level.resize(n);
        ptr.resize(n);
    }

    void add_edge(int v, int u, long long cap) {
        edges.push_back(FlowEdge(v, u, cap));
        edges.push_back(FlowEdge(u, v, 0));
        adj[v].push_back(m);
        adj[u].push_back(m + 1);
        m += 2;
    }

    bool bfs() {
        while (!q.empty()) {
            int v = q.front();
            q.pop();
            for (int id : adj[v]) {
                if (edges[id].cap - edges[id].flow < 1)
                    continue;
                if (level[edges[id].u] != -1)
                    continue;
                level[edges[id].u] = level[v] + 1;
                q.push(edges[id].u);
            }
        }
        return level[t] != -1;
    }

    long long dfs(int v, long long pushed) {
        if (pushed == 0)
            return 0;
        if (v == t)
            return pushed;
        for (int& cid = ptr[v]; cid < (int)adj[v].size(); cid++) {
            int id = adj[v][cid];
            int u = edges[id].u;
            if (level[v] + 1 != level[u] || edges[id].cap - edges[id].flow < 1)
                continue;
            long long tr = dfs(u, min(pushed, edges[id].cap - edges[id].flow));
            if (tr == 0)
                continue;
            edges[id].flow += tr;
            edges[id ^ 1].flow -= tr;
            return tr;
        }
        return 0;
    }

    long long flow() {
        long long f = 0;
        while (true) {
            fill(level.begin(), level.end(), -1);
            level[s] = 0;
            q.push(s);
            if (!bfs())
                break;
            fill(ptr.begin(), ptr.end(), 0);
            while (long long pushed = dfs(s, flow_inf)) {
                f += pushed;
            }
        }
        if(f!=ta){
        	cout<<"NO"<<endl;
        	exit(0);
        }
        cout<<"YES"<<endl;
        for(auto i:edges){
        	if(i.v<=N and i.v>=1 and i.u>N and i.u<=2*N){
        		ans[i.v-1][i.u-N-1]=i.flow;
        	}
        }
        for (int i = 0; i < N; ++i)
        {
        	for (int j = 0; j < N; ++j)
        	{
        		printf("%d ", ans[i][j]);
        	}
        	printf("\n");
        }
    }
};
int main(){
	int m;
	cin>>N>>m;
	int a[N],b[N];
	for (int i = 0; i < N; ++i)
	{
		cin>>a[i];
		ta+=a[i];
	}
	for (int i = 0; i < N; ++i)
	{
		cin>>b[i];
		tb+=b[i];
	}
	if(ta!=tb){
		cout<<"NO"<<endl;
		return 0;
	}
	Dinic d(2*N+2,0,2*N+1);
	for (int i = 0; i < m; ++i)
	{
		int x,y;
		cin>>x>>y;
		d.add_edge(x,N+y,200);
		d.add_edge(y,N+x,200);
	}
	for (int i = 0; i < N; ++i)
	{
		d.add_edge(0,i+1,a[i]);
		d.add_edge(N+i+1,2*N+1,b[i]);
		d.add_edge(i+1,N+i+1,200);
	}
	d.flow();
}