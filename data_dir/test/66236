#include "bits/stdc++.h"
// #include "ext/pb_ds/assoc_container.hpp"
// #include "ext/pb_ds/tree_policy.hpp"
// using namespace __gnu_pbds;
using namespace std;
typedef long long int ll;
// #define int long long
#define pb push_back
#define fi first
#define se second
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define all(x) x.begin(), x.end()
#define IO ios :: sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define pii pair<int,int>
#define sz(x) (int)x.size()
const int mod = 998244353;
const int mod1 = 998244353;
typedef long double f80;

#ifndef LOCAL
#pragma GCC optimize ("O3")
#define endl '\n'
#endif

// template<typename T>
// using ordered_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){
    uniform_int_distribution<int> uid(l, r);
    return uid(rng);
}

ll pwr(ll a,ll b, ll mod){
	a %= mod;
    int ans = 1;
    while(b){
        if(b & 1) ans = (ans * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return ans;
}

string to_string(string s) {
  return '"' + s + '"';
}

string to_string(const char* s) {
  return to_string((string) s);
}

string to_string(bool b) {
  return (b ? "true" : "false");
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

const int N = 3e5 + 5;
const int LOGN = 19;
bool vis[N];
vector<pii> extra;
int dp[LOGN][N], dp1[LOGN][N], dp2[LOGN][N];
int val[N], depth[N];
vector<int> g[N],tr1[4 * N], lol[N];
vector<ll> tr2[4 * N];
void dfs(int u,int p){
	vis[u] = 1;
	dp[0][u] = p;
	dp1[0][u] = u;
	dp2[0][u] = u;
	depth[u] = depth[p] + 1;
	for(int v : g[u]){
		if(vis[v] && v != p){
			extra.pb({u, v});
		}
		else if(v != p){
			dfs(v, u);
		}
	}
}
int get_min(int u,int v){
	int ans = 1e9;
	if(depth[u] < depth[v]) swap(u, v);
	for(int k = LOGN - 1; k >= 0; k--){
		if(depth[dp[k][u]] >= depth[v]){
			ans = min(ans, dp1[k][u]);
			u = dp[k][u];
		}
	}
	if(u == v) return min(ans, u);
	for(int k = LOGN - 1; k >= 0; k--){
		if(dp[k][u] != dp[k][v]){
			ans = min(ans, dp1[k][u]);
			ans = min(ans, dp1[k][v]);
			u = dp[k][u], v = dp[k][v];
		}
	}
	ans = min(ans, dp1[1][u]);
	ans = min(ans, dp1[1][v]);
	return ans;
}
int get_max(int u,int v){
	int ans = 0;
	if(depth[u] < depth[v]) swap(u, v);
	for(int k = LOGN - 1; k >= 0; k--){
		if(depth[dp[k][u]] >= depth[v]){
			ans = max(ans, dp2[k][u]);
			u = dp[k][u];
		}
	}
	if(u == v) return max(ans, u);
	for(int k = LOGN - 1; k >= 0; k--){
		if(dp[k][u] != dp[k][v]){
			ans = max(ans, dp2[k][u]);
			ans = max(ans, dp2[k][v]);
			u = dp[k][u], v = dp[k][v];
		}
	}
	ans = max(ans, dp2[1][u]);
	ans = max(ans, dp2[1][v]);
	return ans;
}
void build(int nd,int s,int e){
	tr1[nd].pb(0);
	fr(i, s, e){
		tr1[nd].pb(val[i]);
	}
	sort(all(tr1[nd]));
	ll ss = 0;
	for(int x : tr1[nd]){
		ss += x;
		tr2[nd].pb(ss);
	}
	if(s == e) return;
	int m = (s + e) >> 1;
	build(nd << 1, s, m);
	build(nd << 1 | 1, m + 1, e);
}
ll query(int nd,int s,int e,int l,int r){
	if(s > r || e < l) return 0;
	if(l <= s && e <= r){
		auto it = upper_bound(all(tr1[nd]), r);
		int idx = it - tr1[nd].begin();
		ll ans = (ll)(tr1[nd].end() - it) * r + tr2[nd][idx - 1];
		return ans;
	}
	int m = (s + e) >> 1;
	return query(nd << 1, s, m, l, r) + query(nd << 1 | 1, m + 1, e, l, r);
}
ll sum(int l,int r){
	return ((ll)r * (r + 1)) / 2 - ((ll)(l - 1) * l) / 2;
}
void solve(){
	int n, m;
	cin >> n >> m;
	fr(i, 1, m){
		int u, v;
		cin >> u >> v;
		g[u].pb(v);
		g[v].pb(u);
	}
	fr(i, 1, n){
		if(!vis[i]){
			dfs(i, 0);
		}
	}
	fr(k, 1, LOGN - 1){
		fr(i, 1, n){
			dp[k][i] = dp[k - 1][dp[k - 1][i]];
			dp1[k][i] = min(dp1[k - 1][i], dp1[k - 1][dp[k - 1][i]]);
			dp2[k][i] = max(dp2[k - 1][i], dp2[k - 1][dp[k - 1][i]]);
		}
	}
	multiset<int> s;
	for(pii x : extra){
		int m1 = get_min(x.fi, x.se), m2 = get_max(x.fi, x.se);
		s.insert(m2 - 1);
		lol[m1 + 1].pb(m2 - 1);
	}
	fr(i, 1, n){
		for(int x : lol[i]){
			s.erase(s.find(x));
		}
		if(!sz(s)){
			val[i] = n;
		}
		else{
			val[i] = *s.begin();
		}
	}
	build(1, 1, n);
	int q;
	cin >> q;
	fr(i, 1, q){
		int l, r;
		cin >> l >> r;
		cout << query(1, 1, n, l, r) - sum(l - 1, r - 1) << endl;
	}
}
signed main(){
    IO;
    #ifdef LOCAL
        freopen("inp.txt","r", stdin);
        freopen("out.txt", "w", stdout);
    #endif
    int t = 1;
    // cin >> t;
    fr(tt, 1, t){
        solve();
    }
    return 0;
}