#include <bits/stdc++.h>
using namespace std;
#define pii             pair<int , int >
#define inf             1111111111
#define in(a)           scanf("%d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%d%d", &a, &b)
#define in3(a, b, c)    scanf("%d%d%d", &a, &b, &c)
#define pn              printf("\n")
#define pr(a)           printf("%d\n", a)
#define prs(a)          printf("%d ", a)
#define pr2(a, b)       printf("%d %d\n", a, b)
#define pr3(a, b, c)    printf("%d %d %d\n", a, b, c)
#define pcs(a)          printf("Case %d: ", a)
#define mp              make_pair
#define vi              vector<int >
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define pb              push_back
#define mem(a, b)       memset((a), (b), sizeof(a))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)
#define x               first
#define y               second
#define lc              (2*i)
#define rc              (2*i+1)

typedef long long LL;
//int  dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int  dx[]={1,1,0,-1,-1,-1,0,1,0};int dy[]={0,1,1,1,0,-1,-1,-1,0};//8 direction
//int  dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(int n, int pos) {return (n & (1<<pos))>>pos;} //typecast 1 in case of int
//int  on(int n, int pos) {return n | (1<<pos);} //typecast 1 in case of int
//int  off(int n, int pos) {return n & ~(1<<pos);} //typecast 1 in case of int
//bool operator < (const data &d) const{return cost<d.cost;} //reverse in priority queue

const int M = 1010;
const double pi = acos(-1.0);

vi A[M];
struct circle {
    double x, y, r;
    circle() {}
    bool operator < (const circle &d) const{return r<d.r;}
};

circle c[M];
double area[M];
int ind[M];

double dist(int i, int j)
{
    return sqrt((c[i].x - c[j].x)*(c[i].x - c[j].x) + (c[i].y - c[j].y)*(c[i].y - c[j].y));
}

double dp[M][2][2];
bool visited[M][2][2];

double call(int u, int apar, int bpar)
{
    if (visited[u][apar][bpar]) return dp[u][apar][bpar];

    double a = 0, b = 0;
    //put u in set a
    if (apar == 0)
    {
        a = area[u];
        if (bpar) a += area[u];
    }
    else
    {
        if (bpar) a += area[u];
    }

    for (int v : A[u]) a += call(v, apar^1, bpar);

    //put u in set b
    if (bpar == 0)
    {
        b = area[u];
        if (apar) b += area[u];
    }
    else
    {
        if (apar) b += area[u];
    }

    for (int v : A[u]) b += call(v, apar, bpar^1);

    visited[u][apar][bpar] = true;
    return dp[u][apar][bpar] = max(a, b);
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("/home/riaz/Documents/in.txt", "r", stdin);
//    freopen("/home/riaz/Documents/out.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);

    int n, i, j, k;

    cin>>n;
    for (i = 0; i < n; i++) cin>>c[i].x>>c[i].y>>c[i].r;
    sort(c, c+n);

    for (i = 0; i < n; i++)
    {
        for (j = i + 1; j < n; j++)
        {
            if (dist(i, j) <= c[j].r)
            {
                A[j+1].pb(i+1);
                ind[i+1]++;
                break;
            }
        }
    }

    for (i = 0; i < n; i++)
    {
        area[i+1] = pi * c[i].r * c[i].r;
        for (int j : A[i+1])
        {
            area[i+1] -= pi * c[j-1].r * c[j-1].r;
        }
    }

    mem(visited, false);

    double sum = 0;
    for (i = 1; i <= n; i++)
    {
        if (ind[i] == 0) sum += call(i, 0, 0);
    }

    cout<<fixed<<setprecision(10);
    cout<<sum<<endl;

return 0;
}