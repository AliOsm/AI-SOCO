#ifdef DEBUG
#define _GLIBCXX_DEBUG
#endif

#include <bits/stdc++.h>

using namespace std;

mt19937 mrand(random_device{} ()); 

int rnd(int x) {
  return mrand() % x;
}

typedef long double ld;
typedef long long ll;

#ifdef DEBUG
#define eprintf(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#else
#define eprintf(...) ;
#endif

#define pb push_back
#define mp make_pair
#define sz(x) ((int) (x).size())
#define TASK "text"

const int inf = (int) 1.01e9;
const ld eps = 1e-11;
const ld pi = acos((ld) -1.0);

const int mod = (int) 1e9 + 7;

void add(int &x, int y) {
  if ((x += y) >= mod) {
    x -= mod;
  }
}

int mult(int x, int y) {
  return (long long) x * y % mod;
}

int power(int x, int pw) {
  int res = 1;
  for (; pw; pw >>= 1) {
    if (pw & 1) {
      res = mult(res, x);
    }
    x = mult(x, x);
  }
  return res;
}

void precalc() {
}


const int maxn = (int) 1e5 + 10;
int lx, ly, rx, ry;

int n;

int read() {
  if (scanf("%d", &n) < 1) {
    return 0;
  }
  scanf("%d%d%d%d", &lx, &ly, &rx, &ry);
  return 1;
}

void solve() {
  ld resl = 0, resr = 1e18;
  for (int i = 0; i < n; ++i) {
    int x, y, vx, vy;
    scanf("%d%d%d%d", &x, &y, &vx, &vy);

    {
      if (!vx) {
        if (!(lx < x && x < rx)) {
          resl = 1e19;
        }
      } else {
        ld lt = (ld) (lx - x) / vx;
        ld rt = (ld) (rx - x) / vx;
        if (lt > rt) {
          swap(lt, rt);
        }
        resl = max(resl, lt);
        resr = min(resr, rt);
      }
    }
    {
      if (!vy) {
        if (!(ly < y && y < ry)) {
          resl = 1e19;
        }
      } else {
        ld lt = (ld) (ly - y) / vy;
        ld rt = (ld) (ry - y) / vy;
        if (lt > rt) {
          swap(lt, rt);
        }
        resl = max(resl, lt);
        resr = min(resr, rt);
      }
    }
  }

  if (resl >= resr - eps) {
    printf("-1\n");
    return;
  }
  printf("%.18f\n", (double) resl);
}

int main() {
  precalc();
#ifdef LOCAL
  freopen(TASK ".out", "w", stdout);
  assert(freopen(TASK ".in", "r", stdin));
#endif

  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("Time %.2f\n", (double) clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
