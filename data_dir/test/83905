
#include<bits/stdc++.h>
using namespace std;
/**
********************************************************************
******************* Author:Bisnu sarkar ****************************
********************************************************************
**/
#define ull            unsigned long long
#define ll             long long
#define vi             vector<int>
#define pb             push_back
#define mp             make_pair
#define pii            pair<int,int>
#define vit            vector<int> :: iterator
#define sit            set<int> :: iterator
#define vrit           vector<int> :: reverse iterator
#define ff             first
#define ss             second
#define endl           '\n';
#define what_is(x)     cerr << #x << " is " << x << endl;
///*....Debugger....*/
#define error(args...) {vector <string> _v = split(#args, ','); err(_v.begin(), args); cout << endl;}
vector <string> split(const string &s, char c)
{
    vector <string> v;
    stringstream ss(s);
    string x;
    while (getline(ss, x, c))
        v.emplace_back(x);
    return move(v);
}
void err(vector <string> :: iterator it) {}
template <typename T, typename... Args>
void err(vector <string> :: iterator it, T a, Args... args)
{
    cout << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << ", ";
    err(++it, args...);
}

int ini()
{
    int x;
    scanf("%d",&x);
    return x;
}
long long inl()
{
    long long x;
    scanf("%lld",&x);
    return x;
}
double ind()
{
    double x;
    scanf("%lf",&x);
    return x;
}
#define Iin ini();
#define Lin inl();
#define Din ind();

int set_1(int n,int pos)
{
    return n = (n | (1<<pos));
}
int reset_0(int n,int pos)
{
    return n= n & ~(1<<pos);
}
bool check_bit(int n,int pos)
{
    return n = n & (1<<pos);
}

int dx[8]= {1,0,-1,0,-1,-1,1,1};
int dy[8]= {0,1,0,-1,-1,1,-1,1};
const int N = (int) 1e2 + 5;
const int M = (int) 1e9 + 7;
const double pi=2* acos(0.0);
const double eps=1e-9;

int a[N];
int n;
int dp[N][N][N][2];

int cal(int pos,int even,int odd,int track)
{
    if(pos>n)
        return 0;

  //  printf("%d %d\n",pos,a[pos]);

    if(dp[pos][even][odd][track]!=-1)
        return dp[pos][even][odd][track];
    int tt=a[pos]%2;
    int res=1000000;
    if(a[pos] !=0)
    {
        res = (pos>1 and track!=tt) + cal(pos+1,even,odd,tt);
    }
    else
    {
        int ev=1000000,od=1000000;
        if(even > 0)
        {
            ev=(pos>1 and (track==1))+cal(pos+1,even-1,odd,0);
        }
        if(odd > 0)
        {
            od=(pos>1 and (track==0))+cal(pos+1,even,odd-1,1);
        }
        res=min(ev,od);

    }
  // printf("%d %d\n",pos,res);
    return dp[pos][even][odd][track]=res;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int t=1,te=0;

    //  cin>>t;
    while(t--)
    {
        memset(dp,-1,sizeof(dp));

        cin>>n;

        int e=n/2,o=(n+1)/2;

        for(int i=1; i<=n; i++)
        {
            cin>>a[i];
            if(a[i]==0)
                continue;
            if(a[i]%2==0)
            {
                e--;
            }
            else
            {
                o--;
            }
        }

        int res = cal(1,e,o,0);
        if(n==1)
            res=0;

        printf("%d\n",res);


        //printf("Case %d: ",++te);
    }
    return 0;
}
