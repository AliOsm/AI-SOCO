#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <cassert>
#include <ctime>


using namespace std;

#ifdef WIN32
    #define LLD "%I64d"
#else
    #define LLD "%lld"
#endif

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef vector<ll> vll;
typedef vector<vll> vvll;

ll rdtsc() {
    ll tmp;
    asm("rdtsc" : "=A"(tmp));
    return tmp;
}

#define TASKNAME "text"
#define pb push_back
#define mp make_pair
#define EPS (1e-9)
#define INF ((int)1e9)
#define sqr(x) ((x) * (x))         
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())

struct Point {
	double x, y;

	int read() {
		int ok = scanf("%lf%lf", &x, &y);
		return ok == 2;
	}

	Point() {}
	Point(double x, double y) : x(x), y(y) {}

	inline Point operator - (const Point &p) const {
		return Point(x - p.x, y - p.y);
	}

	inline double operator ^ (const Point &p) const {
		return x * p.y - y * p.x;
	}

	inline double sabs() const {
		return x * x + y * y;
	}

	inline double abs() const {
		return sqrt(sabs());
	}

	inline int type() const {
		if (fabs(y) < EPS)
			return (x > 0) ? 1 : 3;
		return y > 0 ? 2 : 4;
	}
};

struct angleComp {
	inline bool operator () (const Point &p1, const Point &p2) {
		if (p1.type() != p2.type())
			return p1.type() < p2.type();
		double tmp = (p1 ^ p2);
		return fabs(tmp) > EPS ? tmp > 0 : 0;
	}
};

const int maxn = 300;
Point ps[maxn], qs[maxn];

int MOD;
inline int mmod(int x) {
	return x >= MOD ? x - MOD : x;
}

bool solve() {
	int n;
	if (scanf("%d", &n) < 1)
		return 0;
	for (int i = 0; i < n; i++)
		assert(ps[i].read());
	
	double ans = 0;
	for (int i = 0; i < n; i++) {
		for (int j = i + 1; j < n; j++) {
			double val[2] = {-1, -1};
			for (int k = 0; k < n; k++) {
				if (k == i || k == j)
					continue;
				double S = ((ps[k] - ps[i]) ^ (ps[j] - ps[i]));
				double &cur = val[S > 0];
				cur = max(cur, fabs(S));
			}

			if (val[0] < -0.5 || val[1] < -0.5)
				continue;
			ans = max(ans, val[0] + val[1]);
		}
	}
	ans /= 2.0;
	printf("%.18lf\n", ans);
	return 1;
}

int main() {
	srand(rdtsc());
#ifdef DEBUG
	freopen(TASKNAME".in", "r", stdin);
	freopen(TASKNAME".out", "w", stdout);
#endif
	
	while (1) {
		if (!solve())
			break;
		#ifdef DEBUG
			eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
		#endif
	}
	return 0;
}
