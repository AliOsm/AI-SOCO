/**
 * @author khokharnikunj8
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class BAerodynamic {
public:
    long long dist(long long x, long long y) {
        return x * x + y * y;
    }

    pair<int, int> slope(int x, int y) {
        if (y == 0) return {0, 0};
        if (x == 0) return {INT32_MAX, 0};
        bool flag = false;
        if (x < 0 && y < 0) {
            x *= -1;
            y *= -1;
        } else if (x < 0) {
            flag = true;
            x *= -1;
        } else if (y < 0) {
            flag = true;
            y *= -1;
        }
        int gcd = __gcd(x, y);
        x /= gcd;
        y /= gcd;
        if (flag) x *= -1;
        return {x, y};
    }

    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        vector<pair<int, int>> ar(n);
        for (int i = 0; i < n; i++) {
            in >> ar[i].first >> ar[i].second;
        }
        if (n % 2) {
            out << "No\n";
            return;
        }
        for (int i = 0; i < n / 2; i++) {
            pair<int, int> p1 = slope(ar[i].first - ar[i + 1].first, ar[i].second - ar[i + 1].second);
            pair<int, int> p2 = slope(ar[(n / 2 + i) % n].first - ar[((n / 2 + i + 1) % n)].first,
                                      ar[(n / 2 + i) % n].second - ar[(n / 2 + i + 1) % n].second);
            long long p11 = dist(ar[i].first - ar[i + 1].first, ar[i].second - ar[i + 1].second);
            long long p22 = dist(ar[(n / 2 + i) % n].first - ar[((n / 2 + i + 1) % n)].first,
                                 ar[(n / 2 + i) % n].second - ar[(n / 2 + i + 1) % n].second);

            if (p1.first != p2.first || p1.second != p2.second || p11 != p22) {
                out << "No\n";
                return;
            }
        }
        out << "Yes\n";

    }
};


int main() {
    BAerodynamic solver;
    std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
