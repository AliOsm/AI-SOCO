#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <string>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <fstream>
#include <cassert>
#include <cstring>
#include <unordered_set>
#include <unordered_map>
#include <numeric>
#include <ctime>
#include <bitset>
#include <complex>

using namespace std;

//579

typedef long double ld;

const int INF = 2e9 + 239;
const int IT = 100;

ld max_sum(vector<ld> a) {
	ld mp = 0;
	ld cp = 0;
	ld ans = -INF;
	for (auto t : a) {
		cp += t;
		ans = max(ans, cp - mp);
		mp = min(mp, cp);
	}
	ans = max(ans, (ld)0);
	return ans;
}

ld min_sum(vector<ld> a) {
	ld mp = 0;
	ld cp = 0;
	ld ans = INF;
	for (auto t : a) {
		cp += t;
		ans = min(ans, cp - mp);
		mp = max(mp, cp);
	}
	ans = min(ans, (ld)0);
	return ans;
}

bool check(vector<ld> a, ld x) {
	for (auto &t : a) {
		t -= x;
	}
	ld f = max_sum(a);
	ld s = min_sum(a);
	return abs(f) > abs(s);
}

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	int n;
	cin >> n;
	vector<ld> a(n);
	for (auto &t : a) {
		int val;
		cin >> val;
		t = val;
	}
	{
		ld f = max_sum(a);
		ld s = min_sum(a);
		if (abs(f) <= abs(s)) {
			cerr << "ml" << endl;
			for (auto &t : a) {
				t *= -1;
			} 
		}
	}
	ld l = 0;
	ld r = 1e9;
	for (int it = 0; it < IT; it++) {
		ld m = (r + l) / 2;
		if (check(a, m)) {
			l = m;
		} else {
			r = m;
		}
	}
	cerr << "need is " << l << endl;
	vector<ld> b = a;
	for (auto &t : b) {
		t -= l;
	}
	cout << fixed << setprecision(16) << max_sum(b) << endl;
}
