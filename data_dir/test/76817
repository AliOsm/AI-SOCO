#include<bits/stdc++.h>
using namespace std;

//defines
#define openin freopen("input.txt","r",stdin)
#define openout freopen("output.txt","w",stdout)
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ll long long
#define int long long
#define mod 1000000007
#define repr(i,x,y) for (__typeof(x) i=x;i>=y;i--)
#define rep(i,x,y) for (__typeof(x) i=x;i<=y;i++)
#define all(c) (c).begin(),(c).end()
#define ff first
#define ss second
#define pb push_back
#define mp make_pair

/* Print pair */
template <typename T,typename S>
ostream & operator << (ostream &os , const pair<T,S> &v) {
    os << "(" ;
    os << v.first << "," << v.second << ")" ;
    return os ;
}
/* Print vector */
template <typename T>
ostream & operator << (ostream &os , const vector<T> &v) {
    os << "[" ;
    int sz = v.size() ;
    for(int i = 0 ; i < sz ; ++i) {
        os << v[i] ;
        if(i!=sz-1)os << "," ;
    }
    os << "]\n" ;
    return os ;
}
/* Print set */
template <typename T>
ostream & operator << (ostream &os , const set<T> &v) {
    T last = *v.rbegin() ;
    os << "[" ;
    for(auto it : v) {
        os << it  ;
        if(it != last) os << "," ;
    }
    os << "]\n" ;
    return os ;
}
/* Print Map */
template <typename T,typename S>
ostream & operator << (ostream &os , const map<T,S> &v) {
    for(auto it : v) {
        os << it.first << " : " << it.second << "\n" ;
    }
    return os ;
}
int power(int a , int b)
{
    int res = 1 ;
    while(b)
    {
        if(b%2) {
            res = (res * a) % mod ;
        }
        b/=2 ;
        a = (a*a) % mod ;
    }
    return res ;
}

//debug
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
		cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
		const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

const int N = 305 ;

string words[N] ;

int dp[N][N] ;
bool isEqual[N][N] ;
int pref[N] ;

int32_t main()
{
    fast;
    #ifndef ONLINE_JUDGE
    //freopen("input.txt","r",stdin) ;
    #endif // ONLINE_JUDGE
    int n ; cin >> n ;
    int total_len = n - 1 ;
    for(int i = 0 ; i < n ; ++i) {
        cin >> words[i] ;
        total_len += (words[i].size()) ;
        if(i == 0) pref[i] = words[0].size() ;
        else {
            pref[i] = pref[i - 1] + words[i].size() ;
        }
    }
    //trace(total_len);
    for(int i = 0 ; i < n ; ++i) {
        for(int j = 0 ; j < n ; ++j) {
            isEqual[i][j] = (words[i] == words[j]) ;
        }
    }
    for(int i = n - 1 ; i >= 0 ; --i) {
        for(int j = n - 1 ; j >= 0 ; --j) {
            if(isEqual[i][j]) {
                if(i + 1 < n and j + 1 < n) {
                    dp[i][j] = dp[i + 1][j + 1] + 1 ;
                }
                else dp[i][j] = 1 ;
            }
        }
    }
    int fans = total_len ;
    for(int i = 0 ; i < n ; ++i) {
        for(int len = 1 ; len <= n - i ; ++len) {
            int counts = 1 ;
            int sum = pref[i + len - 1] ;
            if(i) sum -= pref[i - 1] ;
            for(int pos = i + len ; pos < n ; ++pos) {
                if(dp[i][pos] >= len) {
                    counts += 1 ;
                    pos += len - 1 ;
                }
            }
            if(counts > 1) fans = min(fans , total_len - counts * sum + counts) ;
        }
    }
    cout << fans << endl ;
    return 0;
}
