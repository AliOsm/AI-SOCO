#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ff first
#define ss second
#define PI 2*acos(0.0)
#define all(a) a.begin(),a.end()
#define INF (1<<28)
#define mem(a,x) memset(a,x,sizeof(a))
#define SEGMENT_TREE left=2*node,right=left+1,mid=(b+e)/2
using namespace std;


/**------------------------------------BITMASK------------------------------------------**/
//int Change(int N, int pos){return N= N^(1<<pos);}
//bool Check(int N, int pos){return (bool)(N &(1<<pos));}
/**-----------------------------------------------------------------------------------------------**/

/**-----------------------------DIRECTION_ARRAY-------------------------**/
///------FOUR_DIRECTION---------///
//int fx[]={0,1,0,-1};
//int fy[]={1,0,-1,0};


///------EIGHT_DIRECTION---------///
//int fx[]={0,1,1,1,0,-1,-1,-1};
//int fy[]={1,1,0,-1,-1,-1,0,1};
/**--------------------------------------------------------------------------------------**/

//int gcd(int a, int b){return (a==0)? b: gcd(b%a,a);}
//int lcm(int a, int b){return (a/gcd(a,b))*b;}


/*****int exgcd(int A, int B, int *X, int *Y){


    int x2, y2, x1, y1, x, y, r, r1, r2, q;
    x2=1; y2=0;
    x1=0; y1=1;
    for(r2=A, r1=B; r1!=0 ; r2=r1, r1=r, x2=x1, y2=y1, x1=x, y1=y){

        q=r2/r1;
        r=r2%r1;
        x=x2-(x1*q);

        y=y2-(y1*q);
    }
    *X=x2;
    *Y=y2;
    return r2;

}******/




///-----------------------------START FROM HERE--------------------------------------///

ll dis[105][100005];

vector<int> vv[100005];

int arr[100005];
ll ans[100005];


void bfs(int n, int k){

    queue<int>Q;

    for(int i=1; i<=n; i++){
        if(arr[i]==k){
            Q.push(i);
            dis[k][i]=0;
        }

    }

    while(!Q.empty()){

        int u=Q.front();
        Q.pop();

        for(int i=0; i<vv[u].size(); i++){
            int v=vv[u][i];
            if(dis[k][v]!=-1)continue;

            dis[k][v]=dis[k][u]+1;
            Q.push(v);

        }

    }

}
vector<ll>vvv;
int main(){

    int n, m, k,s;
    scanf("%d %d %d %d", &n, &m, &k, &s);
    for(int i=1; i<=n; i++)scanf("%d", &arr[i]);
    mem(dis,-1);

    for(int i=1; i<=m; i++){
        int u, v;
        scanf("%d %d", &u, &v);

        vv[u].pb(v);
        vv[v].pb(u);

    }
    for(int i=1; i<=k; i++)bfs(n,i);
    for(int i=1; i<=n; i++){
        for(int j=1; j<=k; j++){
            vvv.pb(dis[j][i]);


        }
        sort(all(vvv));
        for(int j=0; j<s; j++)ans[i]+=vvv[j];
        vvv.clear();
    }
    for(int i=1; i<=n; i++)printf("%lld ", ans[i]);

}
