/*input
3
2 1
1 2
3 3
23 2 23
3 2 3
*/
#include "bits/stdc++.h"
using namespace std;
int x[2005], y[2005], c[2005], k[2005];
// int ind[2005];
int mark[2005], par[2005];
long long min_cost[2005];
int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);cout.tie(0);
	// iota(ind,ind+2005,0);
	int n; cin >> n;
	for(int i=1;i<=n;++i){
		cin >> x[i] >> y[i];
	}
	for(int i=1;i<=n;++i) cin >> min_cost[i];
	for(int i=1;i<=n;++i) cin >> k[i];


	priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
	for(int i=1;i<=n;++i)
		pq.push({min_cost[i], i});

	vector<int> vis(n+2);
	while(pq.size()){
		int i = pq.top().second; pq.pop();
		vis[i] = 1;
		for(int j=1;j<=n;++j) if(!vis[j]){
			long long dis = 1ll*(abs(x[i]-x[j]) + abs(y[i]-y[j]))*(k[i]+k[j]);
			if(min_cost[j] > dis){
				par[j] = i;
				pq.push({min_cost[j] = dis, j});
			}
		}
	}
	long long ans = 0;
	vector<int> seed;
	vector<pair<int,int>> connections;
	for(int i=1;i<=n;++i){
		if(par[i]){
			connections.push_back({i,par[i]});
		} else {
			seed.push_back(i);
		}
		// cout << i << ' ' << min_cost[i] << endl;
		ans += min_cost[i];
	}
	cout << ans << '\n' << seed.size() << '\n';
	for(int i:seed) cout << i << ' '; cout << '\n';
	cout << connections.size() << '\n';
	for(auto i:connections) cout << i.first << ' ' << i.second << '\n';
}