#define _USE_MATH_DEFINES
#include <array>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 998244353;
mt19937 mrand(random_device{}());
int rnd(int x) { return mrand() % x; }

const int N = 2e3 + 10;
char s[N];
int64 C[N][N], preC[N][N];
int64 p2[N];

int main() {
  for (int i = 0; i < N; ++i) {
    p2[i] = i == 0 ? 1 : p2[i - 1] * 2 % MOD;
    C[i][0] = C[i][i] = 1;
    for (int j = 1; j < i; ++j) {
      C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % MOD;
    }
    preC[i][i] = C[i][i];
    for (int j = i - 1; j >= 0; --j) {
      preC[i][j] = (preC[i][j + 1] + C[i][j]) % MOD;
    }
  }
  scanf("%s", s);
  int n = strlen(s);
  vector<int> Q(n + 1), L(n + 1), R(n + 1);
  for (int i = 0; i < n; ++i) {
    Q[i + 1] = Q[i] + (s[i] == '?');
    L[i + 1] = L[i] + (s[i] == '(');
    R[i + 1] = R[i] + (s[i] == ')');
  }
  int ret = 0;
  for (int i = 0; i < n; ++i) {
    if (s[i] == ')') continue;
    int Q1 = Q[i], Q2 = Q[n] - Q[i + 1];
    int c1 = L[i], c2 = R[n] - R[i + 1];
    // trace(i, Q1, Q2, c1, c2);
    for (int k = 1; k * 2 <= n; ++k) {
      int64 x = c1 > k - 1 ? 0 : C[Q1][k - 1 - c1];
      int64 y = c2 >= k ? p2[Q2] : preC[Q2][k - c2];
      // trace(k, x, y);
      x %= MOD;
      y %= MOD;
      ret = (ret + x * y % MOD) % MOD;
    }
  }
  printf("%d\n", ret);
  return 0;
}
