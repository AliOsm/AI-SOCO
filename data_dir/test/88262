#include <algorithm>
#include <iostream>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdio>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define type(x) __typeof((x).begin())
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

const int inf = 1e9 + 143;
const long long longinf = 2e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 111;
const int M = 21;

struct data{
    int x, k, e;
    bool operator < (const data &a) const{
        return k < a.k;
    }
};

data a[N];
long long f[1 << M];

inline void update(long long &a,long long b){
    if(a == -1 || a > b){
        a = b;
    }
}

int main(){

#ifdef KAZAR
	freopen("f.input","r",stdin);
	freopen("f.output","w",stdout);
	freopen("error","w",stderr);
#endif

    int n = read();
    int m = read();
    long long B = read();

    for(int i = 1; i <= n; i++){
        a[i].x = read();
        a[i].k = read();
        a[i].e = 0;
        int cn = read();
        for(int j = 0; j < cn; j++){
            int x = read() - 1;
            a[i].e |= (1 << x);
        }
    }

    sort(a + 1, a + 1 + n);

    for(int i = 0; i < (1 << m); i++) f[i] = -1;
    f[0] = 0ll;
    int all = (1 << m) - 1;
    long long ans = -1;
    for(int i = 1; i <= n; i++){
        for(int mask = (1 << m) - 1; mask >= 0; mask--){
            if(f[mask] != -1){
                update(f[mask | a[i].e], f[mask] + a[i].x);
            }
        }
        if(f[all] != -1)
            update(ans, f[all] + B * a[i].k);
    }
    cout << ans << endl;

    return 0;
}
