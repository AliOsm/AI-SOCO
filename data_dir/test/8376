///****In the name of Allah, most Gracious, most Compassionate****//

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <int, int> pii;

#define ALL(a) a.begin(), a.end()
#define FastIO ios::sync_with_stdio(false); cin.tie(nullptr);cout.tie(nullptr)
#define IN freopen("input.txt","r+",stdin)
#define OUT freopen("output.txt","w+",stdout)

#define DBG(a) cout<< #a <<" --> "<<(a)<<endl
#define NL cout<<"\n"

template < class T1,class T2>
ostream &operator <<(ostream &os,const pair < T1,T2 > &p)
{
    os<<"{"<<p.first<<","<<p.second<<"}";
    return os;
}

const int N=3e5+5;
const int oo=1e9+7;
int x[5];

bool pos1() // 1 , 4   set
{
    assert(x[4]==x[1]*3);
    if(x[2]!= 0 or x[3]!= 0 )  // jekono ekta ache
    {
        if(x[2]!= 0 and x[3]!= 0) return x[2]+x[3] == 4 * x[1];
        else if(x[2]!=0)
        {
            x[3] =  4 * x[1] - x[2];
            return 1<=x[1] and x[1]<= x[2] and x[2]<=x[3] and x[3]<=x[4];
        }
        else
        {
            assert(x[3]!=0);
            x[2] = 4 * x[1] - x[3];
            return 1<=x[1] and x[1]<= x[2] and x[2]<=x[3] and x[3]<=x[4];
        }
        assert(0);
        return 0;
    }
    else
    {
        x[2] = x[3] = 2 * x[1];
        return 1<=x[1] and x[1]<= x[2] and x[2]<=x[3] and x[3]<=x[4];
    }
}

bool pos()
{
//    DBG(x[1]);
//    DBG(x[2]);
//    DBG(x[3]);
//    DBG(x[4]);
//    NL;
    if(x[1]!=0 or x[4]!=0)
    {
        if(x[1]!=0 and x[4]!=0)
            return (x[4]==x[1] * 3) and pos1();
        else if(x[1]!=0)
        {
            return (x[4] = x[1] * 3 ) and pos1();
        }
        else
        {
            if(x[4]%3) return 0;
            return (x[1] = x[4] / 3 ) and pos1();
        }
    }
    else // no 1 , 4
    {
        if(x[2]!= 0 or x[3]!= 0 )  // jekono ekta ache
        {
            if(x[2]!= 0 and x[3]!= 0)
            {
                if((x[2]+x[3])%4) return 0;
                x[1] = (x[2]+x[3])/4;
                x[4] = x[1]* 3;
                return 1<=x[1] and x[1]<= x[2] and x[2]<=x[3] and x[3]<=x[4];
            }
            else if(x[2]!=0)
            {
                int target = (  - (2 * x[2])%4 + 4 )% 4 ;
                int add = (target - x[2]%4 + 4)%4;
                x[3] = x[2] + add;
                assert((x[2] + x[3] )%4 == 0 );
                return pos();
            }
            else
            {
                int target = (  - (2 * x[3])%4 + 4 )% 4 ;
                int add = (target - x[3]%4 + 4 )%4;
                x[2] = x[3] - add;
                assert((x[2] + x[3] )%4 == 0 );
                return pos();
            }
            assert(0);
            return 0;
        }
        else
        {
            x[1]= x[2]=  1;
            x[3]= x[4]=  3;
            return 1;
        }
    }
}

int n;
int b[N];

bool ans(int i, int j)
{
    if(i==n)
    {
        return pos();
    }
    else
    {
        for(j++; j<=4; j++)
        {
            x[j]= b[i];
            if(ans(i+1, j)) return 1;
            x[j]= 0;
        }
        return 0;
    }
}


int32_t main()
{
    FastIO;
    cin>>n;
    for(int i=0; i<n; i++)
    {
        cin>>b[i];
    }
    sort(b,b+n);
    if(ans(0,0))
    {
        cout<<"YES\n";
        multiset<int > mst;
        for(int i=1;i<=4;i++)
            mst.insert(x[i]);
        for(int i=0;i<n;i++)
            mst.erase(mst.find(b[i]));
        for(int i: mst)
            cout<<i<<"\n";
    }
    else cout<<"NO\n";
}
