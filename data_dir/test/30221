// Charan Sriramula

#include<bits/stdc++.h>
using namespace std;
typedef long double ld;
typedef long long int ll;

const ll lg=14;
const ll N=2e5+5;
const ll INF=1e18;
const ll mod=1e9+7;
const double PI = 3.14159265358979323846;

#define ints(n) scanf("%d",&n)
#define intp(n) printf("%d\n",n)
#define longs(n) scanf("%lld",&n)
#define longp(n) printf("%lld\n",n)

#define f first
#define s second
#define pb(x) push_back(x)
#define pf(x) push_front(x)
#define mp(x,y) make_pair(x,y)
#define GCD(a,b) __gcd((a),(b))
#define all(v) v.begin(),v.end()
#define bits(x) __builtin_popcount(x)
#define LCM(a,b) ((a)*(b))/GCD((a),(b))
#define ms(dp,val) memset(dp,val,sizeof(dp))
#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);
template<typename T> T power(T x,T y,ll m){T ans=1;while(y>0){if(y&1LL) ans=(ans*x)%m;y>>=1LL;x=(x*x)%m;}return ans%m;}

vector<ll> finedge,topo;
ll n,m,u,v,w,ans,mini=INF,col[N],vis[N],pos[N],uu[N],vv[N],ww[N];
vector<pair<ll,pair<ll,ll> > > g[N],nog[N];

void DFS(ll cur)
{
  col[cur]=1;
  for(auto i:nog[cur])
  {
    if(!col[i.s.f]){DFS(i.s.f);}
    else if(col[i.s.f]==1){ans=1;}
  }
  col[cur]=2;
}

void TopoSort(ll cur)
{
  vis[cur]=1;
  for(auto i:nog[cur])
  {
    if(vis[i.s.f]){continue;}
    TopoSort(i.s.f);
  }
  topo.pb(cur);
}

bool F(ll cur)
{
  ans=0;
  for(ll i=1;i<=n;i++)
  {
    col[i]=0;
    nog[i].clear();
    for(auto j:g[i])
    {
      if(j.s.s<=cur){continue;}
      nog[i].pb(mp(j.f,mp(j.s.f,j.s.s)));
    }
  }
  for(ll i=1;i<=n;i++)
  {
    if(col[i]){continue;}
    DFS(i);
  }
  if(ans){return false;}
  if(mini>cur)
  {
    mini=cur;
    topo.clear();
    finedge.clear();
    for(ll i=1;i<=n;i++){vis[i]=0;}
    for(ll i=1;i<=n;i++)
    {
      if(vis[i]){continue;}
      TopoSort(i);
    }
    reverse(all(topo));
    for(ll i=0;i<topo.size();i++){pos[topo[i]]=i;}
    for(ll i=1;i<=m;i++)
    {
      if(ww[i]<=mini&&pos[uu[i]]>pos[vv[i]]){finedge.pb(i);}
    }
  }
  return true;
}

void Binary_Search()
{
  ll low=0,high=INF,mid;
  while(low<=high)
  {
    mid=(low+high)/2;
    if(F(mid)){high=mid-1;}
    else{low=mid+1;}
  }
}

int main()
{
  fast;
  cin>>n>>m;
  for(ll i=1;i<=m;i++)
  {
    cin>>u>>v>>w;
    uu[i]=u;vv[i]=v;ww[i]=w;
    g[u].pb(mp(i,mp(v,w)));
  }
  Binary_Search();
  cout<<mini<<" "<<finedge.size()<<endl;
  sort(all(finedge));
  for(auto i:finedge){cout<<i<<" ";}
}