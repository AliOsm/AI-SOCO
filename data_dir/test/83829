#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const ld PI = acos(-1.0);
const ll LINF = (ll)1e18 + 5;
const int INF = (int)1e9 + 5;

template<class T>
T sqr(T x) { return x * x; }

template<class T>
T abs(T x) { return x < 0 ? -x : x; }

template<class T>
ll round(T x) { return x < 0 ? x - 0.5 : x + 0.5; }

template<class T>
bool chmin(T & x, const T & y) {
	if (y < x) {
		x = y;
		return true;
	}
	return false;
}

template<class T>
bool chmax(T & x, const T & y) {
	if (x < y) {
		x = y;
		return true;
	}
	return false;
}


template<class P, class Q>
ostream & operator <<(ostream & os, const pair<P, Q> & p) {
	return os << "(" << p.first << ", " << p.second << ")";
}

template<class T>
ostream & operator <<(ostream & os, const vector<T> & v) {
	bool was = false;
	os << "{";
	for (typename vector<T>::const_iterator it = v.begin(); it != v.end(); it++) {
		if (was) {
			os << ", ";
		}
		else {
			was = true;
		}
		os << *it;
	}
	os << "}";
	return os;
}

template<class T>
ostream & operator <<(ostream & os, const set<T> & v) {
	bool was = false;
	os << "{";
	for (typename set<T>::const_iterator it = v.begin(); it != v.end(); it++) {
		if (was) {
			os << ", ";
		}
		else {
			was = true;
		}
		os << *it;
	}
	os << "}";
	return os;
}

template<class T>
ostream & operator <<(ostream & os, const multiset<T> & v) {
	bool was = false;
	os << "{";
	for (typename multiset<T>::const_iterator it = v.begin(); it != v.end(); it++) {
		if (was) {
			os << ", ";
		}
		else {
			was = true;
		}
		os << *it;
	}
	os << "}";
	return os;
}

template<class P, class Q>
ostream & operator <<(ostream & os, const map<P, Q> & v) {
	bool was = false;
	os << "{";
	for (typename map<P, Q>::const_iterator it = v.begin(); it != v.end(); it++) {
		if (was) {
			os << ", ";
		}
		else {
			was = true;
		}
		os << *it;
	}
	os << "}";
	return os;
}

#define all(x) (x).begin(), (x).end()

template<class T = int>
T nextInt() {
	ll x = 0;
	bool p = false;
	char c;
	do {
		c = getchar();
	} while (c <= 32);
	if (c == '-') {
		p = true;
		c = getchar();
	}
	while (c >= '0' && c <= '9') {
		x = x * 10 + c - '0';
		c = getchar();
	}
	return (p ? -x : x);
}

int phi(int n) {
	int result = n;
	for (int i = 2; i * i <= n; ++i)
		if (n % i == 0) {
			while (n % i == 0)
				n /= i;
			result -= result / i;
		}
	if (n > 1)
		result -= result / n;
	return result;
}

ll powmod(ll x, ll n, ll p) {
	x %= p;
	ll res = 1 % p;
	while (n) {
		if ((n & 1)) {
			res = (res * x) % p;
			n--;
		}
		else {
			x = (x * x) % p;
			n >>= 1;
		}
	}
	return res;
}

const int N = 100100;

int n;
ll mod, phiMod, globalRes;
ll pw[N], invPw[N];
vector<pair<int, int>> g[N];
bool isDel[N];

void calcPw() {
	pw[0] = invPw[0] = 1;
	for (int i = 1; i < N; i++) {
		pw[i] = (pw[i - 1] * 10) % mod;
		invPw[i] = powmod(pw[i], phiMod - 1, mod);
	}
}

struct my {
	ll up, down;
	int len;
	my() {}
	my(ll up, ll down, int len) : up(up), down(down), len(len) {}
};

void go(int v, int p, ll up, ll down, int len, vector<my> & vec) {
	vec.push_back(my(up, down, len));
	for (auto t : g[v]) {
		int to = t.first;
		int val = t.second;
		if (to == p || isDel[to]) continue;
		ll nup = (up + pw[len] * val) % mod;
		ll ndown = (down * 10 + val) % mod;
		int nlen = len + 1;
		go(to, v, nup, ndown, nlen, vec);
	}
}

ostream & operator <<(ostream & os, const my & m) {
	return os << "(" << m.up << ", " << m.down << ", " << m.len << ")";
}

void process(int v) {
	vector<vector<my>> vecs;
	vecs.push_back({my(0, 0, 0)});
	for (auto t : g[v]) {
		int to = t.first;
		int val = t.second % mod;
		if (isDel[to]) continue;
		vecs.push_back({});
		go(to, v, val, val, 1, vecs.back());
	}
	vector<ll> ups;
	for (const auto & vec : vecs) {
		for (auto z : vec) {
			ups.push_back(z.up);
		}
	}
	sort(all(ups));
	for (const auto & vec : vecs) {
		for (auto z : vec) {
			ll val2 = z.down;
			int len = z.len;
			ll val1 = (mod - val2) * invPw[len];
			val1 %= mod;
			globalRes += upper_bound(all(ups), val1) - lower_bound(all(ups), val1);
		}
	}

	for (const auto & vec : vecs) {
		ups.resize(0);
		for (auto z : vec) {
			ups.push_back(z.up);
		}
		sort(all(ups));
		for (auto z : vec) {
			ll val2 = z.down;
			int len = z.len;
			ll val1 = (mod - val2) * invPw[len];
			val1 %= mod;
			globalRes -= upper_bound(all(ups), val1) - lower_bound(all(ups), val1);
		}
	}
}

int sz[N];

void calcSz(int v, int p) {
	sz[v] = 1;
	for (auto t : g[v]) {
		int to = t.first;
		if (to == p || isDel[to]) continue;
		calcSz(to, v);
		sz[v] += sz[to];
	}
}

int findCentroid(int v, int p, const int all, const int need) {
	bool ok = true;
	for (auto t : g[v]) {
		int to = t.first;
		if (to == p || isDel[to]) continue;
		int z = findCentroid(to, v, all, need);
		if (z != -1) return z;
		ok &= (sz[to] <= need);
	}
	ok &= (all - sz[v] <= need);
	return (ok ? v : -1);
}

void rec(int v) {
	calcSz(v, -1);
	v = findCentroid(v, -1, sz[v], sz[v] / 2);
	assert(v != -1);
	process(v);
	isDel[v] = true;
	for (auto t : g[v]) {
		int to = t.first;
		if (isDel[to]) continue;
		rec(to);
	}
}

int main() {
	srand(time(0));

#ifdef LOCAL
	//gen();
	freopen("input.txt", "r", stdin);
#else
	
#endif

	n = nextInt();
	mod = nextInt();

	phiMod = phi(mod);
	
	calcPw();

	for (int i = 0; i < n - 1; i++) {
		int x, y, w;
		scanf("%d%d%d", &x, &y, &w);
		g[x].push_back(make_pair(y, w));
		g[y].push_back(make_pair(x, w));
	}

	rec(0);

	cout << globalRes << endl;
}