#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ff first
#define ss second
#define PI 2*acos(0.0)
#define all(a) a.begin(),a.end()
#define INF (1<<28)
#define mem(a,x) memset(a,x,sizeof(a))
#define SEGMENT_TREE left=2*node,right=left+1,mid=(b+e)/2
using namespace std;


/**------------------------------------BITMASK------------------------------------------**/
//int Change(int N, int pos){return N= N^(1<<pos);}
//bool Check(int N, int pos){return (bool)(N &(1<<pos));}
/**-----------------------------------------------------------------------------------------------**/

/**-----------------------------DIRECTION_ARRAY-------------------------**/
///------FOUR_DIRECTION---------///
//int fx[]={0,1,0,-1};
//int fy[]={1,0,-1,0};


///------EIGHT_DIRECTION---------///
//int fx[]={0,1,1,1,0,-1,-1,-1};
//int fy[]={1,1,0,-1,-1,-1,0,1};
/**--------------------------------------------------------------------------------------**/

//int gcd(int a, int b){return (a==0)? b: gcd(b%a,a);}
//int lcm(int a, int b){return (a/gcd(a,b))*b;}


/*****int exgcd(int A, int B, int *X, int *Y){


    int x2, y2, x1, y1, x, y, r, r1, r2, q;
    x2=1; y2=0;
    x1=0; y1=1;
    for(r2=A, r1=B; r1!=0 ; r2=r1, r1=r, x2=x1, y2=y1, x1=x, y1=y){

        q=r2/r1;
        r=r2%r1;
        x=x2-(x1*q);

        y=y2-(y1*q);
    }
    *X=x2;
    *Y=y2;
    return r2;

}******/




///-----------------------------START FROM HERE--------------------------------------///

vector<string>SS;
int arr[500][20];

int main(){

    for(int i=0; i<3; i++){
        string S;
        cin>>S;
        SS.pb(S);

    }
    sort(all(SS));
    if(SS[0]==SS[1] && SS[1]==SS[2]){
        cout<<"0";
        return 0;
    }
    for(int i=0; i<3; i++){

        arr[SS[i][1]][SS[i][0]-'0']++;

    }
//    cout<<arr['s'][3]<<endl;
    int ans=2;
    for(int i='a'; i<='z'; i++){
        int pp=3;
        for(int j=1; j<=9; j++){
            int p;
            if(j > 1 &&arr[i][j] && arr[i][j-1] && arr[i][j-2])p=0;
            else if(arr[i][j] && arr[i][j-1])p=1;
            else if(j>1 && arr[i][j] && arr[i][j-2])p=1;
            else if(arr[i][j])p=2;
            else p=3;

            if(arr[i][j]==2){
                p=min(p, 1);

            }
            pp=min(p, pp);
        }

        ans=min(ans, pp);


    }
    cout<<ans;
}
