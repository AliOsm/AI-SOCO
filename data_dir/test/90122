#include <iostream>
#include <bits/stdc++.h>
using namespace std;
const int N = 2e5 + 5;
int bit[N];
void update(int idx , int val)
{
    for( ; idx < N ; idx += idx & -idx)
        bit[idx]  = max(val , bit[idx]);
}
int getAns(int idx)
{
    int maxi = 0;
    for( ; idx  ; idx -= idx & -idx)
        maxi = max(maxi , bit[idx]);
    return maxi;
}
multiset<pair<int,int> >st;
int arr[N],ans[N];
long long cur[N];
pair<int,pair<int,int> > pr[N];
int main()
{
    int n,q;
    cin>>n>>q;
    for(int i = 1 ; i<=n ; ++i)
    {
        scanf("%d%d" , &pr[i].first , &pr[i].second.first);
        pr[i].second.second = i;
        cur[i] = pr[i].second.first;
    }
    sort(pr+1 , pr +n+1);
    for(int i = 1 ; i<=n ; ++i)
    {
        int x = pr[i].first;
        int y = pr[i].second.first;
        update(i , min(1000000000 , x+y));
    }

    while(q--)
    {
        int x,y;
        scanf("%d%d" , &x , &y);
        int l = 1 , r = n;
        while(l<r)
        {
            int mid = l + (r-l)/2;
            if(getAns(mid) >= x) r = mid;
            else l = mid+1;
        }
        if(pr[r].first > x || getAns(r) < x) st.insert({x,y});
        else
        {
            pr[r].second.first = min(1000000000 , pr[r].second.first + y);
            int nwsum =  min(1000000000 , pr[r].first + pr[r].second.first);
            update(r ,nwsum);
            cur[pr[r].second.second] += y;
            ans[pr[r].second.second]++;
            auto it = st.lower_bound({pr[r].first , -1});
            while(it != st.end())
            {
                if(it->first > nwsum) break;
                int y = it->second;
                st.erase(it);
                pr[r].second.first = min(1000000000 , pr[r].second.first + y);
                nwsum =  min(1000000000 , pr[r].first + pr[r].second.first);
                update(r ,nwsum);
                ans[pr[r].second.second]++;
                cur[pr[r].second.second] += y;
                it = st.lower_bound({pr[r].first , -1});
            }
        }
    }
    for(int i = 1 ; i<=n ; ++i) printf("%d %lld\n" , ans[i] , cur[i]);
    return 0;
}
