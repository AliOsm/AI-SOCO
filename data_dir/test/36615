/********************************************
*                                           *
*    Solved By : Bir Bahadur Khatri(B'ru)   *
*      Be Positive,be Happy.                *
*                                           *
*********************************************/

#define ff first
#define D double
#define sz size()
#define ss second
#define PB push_back
#define SQR(n) (n*n)
#define CHR getchar()
#define NL printf("\n")
#include<bits/stdc++.h>
#define ULL unsigned LL
#define PI 2.0*acos(0.0)
#define MP make_pair
#define LL long long int
#define S1(a) a=in<int>()
#define SL1(a) a=in<LL>()
#define Max(a,b) ((a>b)?a:b)
#define Min(a,b) ((a<b)?a:b)
#define all(a) a.begin(),a.end()
#define _Max(a,b,c) Max(a,Max(b,c))
#define _Min(a,b,c) Min(a,Min(b,c))
#define SL2(a,b) a=in<LL>(),b=in<LL>()
#define F(i,a,b) for(int i=a;i<b; i++)
#define S2(a,b) a=in<int>(),b=in<int>()
#define R(i,a,b) for(int i=a-1;i>=b; i--)
#define BitCnt(a) __builtin_popcountll(a)
#define MEM(a,val) memset(a,val,sizeof(a))
#define SL3(a,b,c) a=in<LL>(),b=in<LL>(),c=in<LL>()
#define S3(a,b,c) a=in<int>(),b=in<int>(),c=in<int>()
#define cp printf("***** here here here here *****\n");
#define trace1(x)                cerr << #x << ": " << x << endl;
#define InpOut freopen("A.in","r",stdin),freopen("A1.out","w",stdout)
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;

using namespace std;
template <typename T> T in(){char ch;T n = 0;bool ng = false;while (1){ch = getchar();if (ch == '-'){ng = true;ch = getchar();break;}if (ch>='0' && ch<='9')     break;}while (1){n = n*10 + (ch - '0');ch = getchar();if (ch<'0' || ch>'9')   break;}return (ng?-n:n);}
template<typename T>inline T POW(T B,T P){ if(P==0) return 1; if(P&1) return B*POW(B,P-1);  else return SQR(POW(B,P/2));}
template<typename T>inline T Gcd(T a,T b){if(a<0)return Gcd(-a,b);if(b<0)return Gcd(a,-b);return (b==0)?a:Gcd(b,a%b);}
template<typename T>inline T Lcm(T a,T b) {if(a<0)return Lcm(-a,b);if(b<0)return Lcm(a,-b);return a*(b/Gcd(a,b));}
long long Bigmod(long long base, long long power, long long MOD){long long ret=1;while(power){if(power & 1)ret=(ret*base)%MOD;base=(base*base)%MOD;power>>=1;}return ret;}
bool isVowel(char ch){ ch=toupper(ch); if(ch=='A'||ch=='U'||ch=='I'||ch=='O'||ch=='E') return true; return false;}
long long ModInverse(long long number, long long MOD){return Bigmod(number, MOD-2, MOD);}
bool isConst(char ch){if (isalpha(ch) && !isVowel(ch)) return true; return false;}
int toInt(string s)  { int sm; stringstream ss(s); ss>>sm; return sm; }

///**********************************************************//

#define MD1 1000000007ULL
#define MD2 1000000009ULL
#define MD3 1000000021ULL
#define BS1 10000019ULL
#define BS2 10000079ULL
#define BS3 10000103ULL
#define PUL pair<ULL,ULL>

///         0123456789
#define MX  100007
#define MOD 1000000007
#define INF 2000000000
#define EPS 1e-9
/// ==========================================////



int St[MX];
int Ed[MX];
int Tme,Node[MX];
vector<int> A[MX];

void Dfs(int u,int p) {
    St[u]=++Tme;
    Node[Tme]=u;
    for(int i=0;i<A[u].sz;i++) {
        int v=A[u][i];
        if(v==p) continue;
        Dfs(v,u);
    }
    Ed[u]=Tme;
    return;
}

int n,m,a[MX];

bitset<1001> Tree[MX*4],prm;
int Lazy[MX*4];

bool prime[1000+9];
void seive()
{
    int s=sqrt(m);
    for(int i=2; i<=s; i++)
    {
        if(!prime[i])
        {
            for(int j=2*i; j<=m; j+=i)
            {
                prime[j]=true;

            }
        }
    }
    F(i,2,m) if(prime[i]==false) prm.set(i);
}

void Build(int id,int l,int r) {
    if(l==r) {
        Tree[id].set( a[ Node[l] ] );
        return;
    }
    int mid=(l+r)/2;
    int lft=2*id;
    int rgt=lft+1;

    Build(lft,l,mid);
    Build(rgt,mid+1,r);
    Tree[id]=Tree[lft]|Tree[rgt];
}


void ProPagate(bitset < 1001 > &b , int val) {
    b = ((b << val) ) | (b >> (m - val));
}

void Push(int l,int r,int node) {
    if(Lazy[node]) {

        Lazy[node]%=m;
        ProPagate(Tree[node],Lazy[node]);
        if(l!=r) {
            (Lazy[node*2]+=Lazy[node])%=m;
            (Lazy[node*2+1]+=Lazy[node])%=m;
        }
        Lazy[node]=0;
    }
}

void Update(int id,int l,int r,int st,int ed,int v) {

    if(l>ed||r<st) {
        Push(l,r,id);
        return;

    }
    if(st<=l&&ed>=r) {
        Lazy[id]=(Lazy[id]+v)%m;
        Push(l,r,id);
        return;
    }
    Push(l,r,id);
    int mid=(l+r)/2;
    int lft=2*id;
    int rgt=lft+1;

    Update(lft,l,mid,st,ed,v);
    Update(rgt,mid+1,r,st,ed,v);
    Tree[id]=Tree[lft]|Tree[rgt];
    return;
}
bitset<1001> now;
void Query(int id,int l,int r,int st,int ed) {
    Push(l,r,id);
    if(l>ed||r<st) {
        return;
    }
    if(st<=l&&ed>=r) {
        now|=Tree[id];
        return;
    }

    int mid=(l+r)/2;
    int lft=2*id;
    int rgt=lft+1;
    Query(lft,l,mid,st,ed);
    Query(rgt,mid+1,r,st,ed);
}


int main()
{
    S2(n,m);
    seive();
    for(int i=1;i<=n;i++) {
        S1(a[i]);
        a[i]%=m;
    }

    for(int i=1;i<n;i++) {
        int u,v;
        S2(u,v);
        A[u].PB(v);
        A[v].PB(u);
    }

    Dfs(1,0);

    Build(1,1,n);

    int q;
    S1(q);

    while(q--) {
        int tp;
        S1(tp);
        if(tp==1) {
            int u,v;
            S2(u,v);
            v%=m;
            Update(1,1,n,St[u],Ed[u],v);
        }
        else {
            int u;
            S1(u);
            now.reset();
            Query(1,1,n,St[u],Ed[u]);
            int ans=(now&prm).count();
            printf("%d\n",ans);
        }
    }

    return 0;
}
