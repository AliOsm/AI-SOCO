#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int>PII;

int dx[] = {-2, -2, -1, -1, 1, 1, 2, 2};
int dy[] = {-1, 1, -2, 2, -2, 2, -1, 1};

int knight[8][8], done[8][8];
int vis[8][8];

PII par[8][8];
vector< PII >solve(int x1, int y1)
{
    memset(vis, 0, sizeof vis);
//    cout << "solving " << x1 << " " << y1 << endl;
    queue<int>q;
    q.push(x1);
    q.push(y1);
    vis[x1][y1] = 1;

    int x2 = -1, y2 = -1;
    while (!q.empty()) {
        int x = q.front(); q.pop();
        int y = q.front(); q.pop();

//        if (q.size() > 100000) {
////            cout << "whut" << endl;
//            assert(false);
//        }

        assert(vis[x][y]);

        if (knight[x][y]&&done[x][y]==0) {
            x2 = x;
            y2 = y;
            break;
        }

        for (int k = 0; k < 8; k++) {
            int _x = x + dx[k];
            int _y = y + dy[k];
            if (_x < 0 || _y < 0 || _x > 7 || _y > 7) continue;
            if (vis[_x][_y]) continue;
            vis[_x][_y] = 1;
            q.push(_x);
            q.push(_y);
            par[_x][_y] = PII(x, y);
        }
    }

    assert(x2!=-1);

    vector<PII>vp;
    while (1) {
//        cout << x2 << " " << y2 << endl;
        vp.emplace_back(x2, y2);
        if (x2==x1&&y2==y1) break;
        int tmp = x2;
        x2 = par[x2][y2].first;
        y2 = par[tmp][y2].second;
    }
    return vp;
}

typedef pair<PII,PII>PPP;
vector<PPP>moves;

void print()
{
    for (int j = 0; j < 8; j++) {
        for (int i = 0; i < 8; i++) {
            cout << knight[i][7-j];
        }
        cout << endl;
    }
}

void moveto(const vector<PII>& vp)
{
    for (int i = 0; i+1 < vp.size(); ) {
        assert(knight[vp[i].first][vp[i].second]==0);

        int j;
        for (j = i+1; j < vp.size() && knight[vp[j].first][vp[j].second] == 0; j++);
        assert(j < vp.size());
        for (int k = j; k > i; k--) {
            moves.emplace_back(vp[k], vp[k-1]);
            knight[vp[k-1].first][vp[k-1].second] = 1;
            knight[vp[k].first][vp[k].second] = 0;
        }
        i = j;
    }
}

int main()
{
    int k;
    cin >> k;

    for (int i = 0; i < k; i++) {
        string s;
        cin >> s;
        int x = s[0]-'a', y = s[1]-'1';
        knight[x][y] = 1;
    }

    for (int i = 0; i < 8 && k > 0; i++) {
        for (int j = 0; j < 8 && k > 0; j++) {
            vector<PII>vp = solve(j, i);
            reverse(vp.begin(), vp.end());
            moveto(vp);
            k--;
            done[j][i] = 1;
//            cout << (char)(j+'a') << (char)(i+'1') << " done " << endl;
//            print();
//            int x;
//            cin >> x;
        }
    }

    assert(k==0);

    assert(moves.size() <= 1500);
    cout << moves.size() << endl;
    for (PPP pr : moves) {
        PII p1 = pr.first, p2 = pr.second;
        cout << (char)(p1.first+'a') << (char)(p1.second+'1')
            << "-" << (char)(p2.first+'a') << (char)(p2.second+'1') << endl;
    }

//    print();


    return 0;
}
