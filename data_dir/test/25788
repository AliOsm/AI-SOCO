#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <functional>
#include <queue>
#include <map>

#define ios_fast std::ios_base::sync_with_stdio(false);\
std::cin.tie(0); std::cout.tie(0); std::cerr.tie(0);
#define size(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
#define sort(x) std::sort(all(x))
#define unique(x) (x).erase(std::unique(all(x)), (x).end())
typedef unsigned long long ll;
typedef std::vector<int> vi;
typedef std::vector<vi> vvi;
typedef std::vector<ll> vll;

const bool debug = 0;

vll divisors(ll n) {
    vll ret{1}, st{n};
    for (ll i = 2; i * i <= n; ++i) {
        ll j = n / i;
        if (i * j == n) {
            ret.push_back(i);
            st.push_back(j);
        }
    }
    if (st.back() == ret.back()) {
        st.pop_back();
    }
    while (!st.empty()) {
        ret.push_back(st.back());
        st.pop_back();
    }
    return ret;
}

int main() {
    if (!debug) ios_fast;
    ll a, b; std::cin >> a >> b;
    ll s = a + b;
    // (a+b) - прямоугольник
    // a или b тоже прямоугольник
    vll div_s = divisors(s);
    vll div_a = divisors(a);
    vll div_b = divisors(b);
    ll answ = (ll)1e18L;
    for (ll side1 : div_s) {
        ll side2 = s / side1;
        ll min = std::min(side1, side2);
        ll max = std::max(side1, side2);
        {
            auto it = std::prev(std::upper_bound(all(div_a), min));
            if (*it <= min && a / *it <= max) {
                answ = std::min(answ, 2*(min+max));
            }
        }
        {
            auto it = std::prev(std::upper_bound(all(div_b), min));
            if (*it <= min && b / *it <= max) {
                answ = std::min(answ, 2*(min+max));
            }
        }
    }
    std::cout << answ;
    return 0;
}