#pragma comment(linker, "/STACK:256000000")

#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <random>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <complex>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<int, int64> pil;
const int INF = (int)(1e9 + 1e5);
const int64 LINF = (int64)(1e18);
const int64 MX = 100500;
const double EPS = 1e-9;
#define sq(x) ((x)*(x))
#define FAIL() (*(int*)(0))++
#define ASSERT(exp) {if (!(exp)) exit(0);}
#define y1 fjgjf
#ifdef _MY_DEBUG
#define I64d lld
#endif
typedef complex<double> comp;
const int MOD = 1000000007;

const int MAXN = 205;

struct turn
{
    int num;
    int x;
    int y;
    
    turn(int num, int x, int y) : num(num), x(x), y(y)
    {
    
    }
};

int n, k;

int a[5][MAXN];
int was[5][MAXN];
int timer;
pii target[MAXN];
int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, -1, 0, 1};
vector<turn> ans;
bool ok;
int succ = 0;

void init()
{
    scanf ("%d%d", &n, &k);
    for (int i = 1; i <= 4; ++i)
    {
        for (int j = 1; j <= n; ++j)
        {
            scanf("%d", &a[i][j]);
        }
    }
}

bool is_good(int x, int y)
{
    return 2 <= x && x <= 3 && 1 <= y && y <= n && was[x][y] != timer;
}

bool dfs(int x, int y, int num)
{
    was[x][y] = timer;
    if (a[x][y] == num)
    {
        return true;
    }
    if (a[x][y])
    {
        return false;
    }
    for (int i = 0; i < 4; ++i)
    {
        int xx = x + dx[i];
        int yy = y + dy[i];
        if (is_good(xx, yy))
        {
            bool res = dfs(xx, yy, num);
            if (res)
            {
                ans.emplace_back(num, x, y);
                a[xx][yy] = 0;
                a[x][y] = num;
                return true;
            }
        }
    }
    return false;
}

pii get_prev(int x, int y)
{
    if (x == 2)
    {
        if (y > 1)
        {
            return pii(x, y - 1);
        }
        else
        {
            return pii(3, 1);
        }
    }
    else
    {
        if (y < n)
        {
            return pii(x, y + 1);
        }
        else
        {
            return pii(2, n);
        }
    }
}

void solve()
{
    for (int i = 1; i <= 4; i += 3)
    {
        for (int j = 1; j <= n; ++j)
        {
            if (a[i][j] != 0)
            {
                target[a[i][j]].first = i;
                target[a[i][j]].second = j;
                a[i][j] = 0;
            }
        }
    }
    for (int h = 1; succ != k; ++h)
    {
        bool local_ok = false;
        for (int num = 1; num <= k; ++num)
        {
            if (a[target[num].first][target[num].second] == num)
            {
                continue;
            }
            ++timer;
            bool res = dfs(target[num].first, target[num].second, num);
            succ += (res ? 1 : 0);
            local_ok |= res;
        }
        if (!local_ok)
        {
            if (succ == 0 && k == 2 * n)
            {
                break;
            }
            bool found = false;
            for (int i = 2; i <= 3 && !found; ++i)
            {
                for (int j = 1; j <= n && !found; ++j)
                {
                    if (a[i][j] == 0)
                    {
                        pii prv = get_prev(i, j);
                        if (a[prv.first][prv.second])
                        {
                            ans.emplace_back(a[prv.first][prv.second], i, j);
                            a[i][j] = a[prv.first][prv.second];
                            a[prv.first][prv.second] = 0;
                            found = true;
                        }
                    }
                }
            }
        }
    }
    ok = (succ == k);
}

void print_answer()
{
    if (ok)
    {
        printf("%d\n", ans.size());
        for (int i = 0; i < ans.size(); ++i)
        {
            printf("%d %d %d\n", ans[i].num, ans[i].x, ans[i].y);
        }
    }
    else
    {
        printf("-1\n");
    }
}

void precalc()
{
}

void run()
{
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#endif // _MY_DEBUG
    precalc();
    int t = 1; //scanf ("%d", &t);
    for (int tnum = 1; tnum <= t; ++tnum)
    {
        init();
        solve();
        print_answer();
    }
}
int main()
{
    srand(90);
    ios_base::sync_with_stdio(false); cin.tie(0);
    run();
    return 0;
}