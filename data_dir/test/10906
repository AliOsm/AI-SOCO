#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update


#define f first
#define s second
#define pb push_back
#define mp make_pair
#define clr(dp,i) memset(dp,i,sizeof(dp))
#define opt     ios_base::sync_with_stdio(NULL);cin.tie(NULL);cout.tie(NULL);

using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag,
tree_order_statistics_node_update> oset;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef pair<int, int> pii;
const long long mod = 1e9+7;
const ld pi = 3.14159265358979323846264338327950288;
//========================================

int main()
{
	int n, m;
	cin >> n >> m;
	int a[n+2];
	vector<int> vec;
	a[0] = 0, a[n+1] = m;
	for(int i=1; i<=n; i++)
	cin >> a[i];
	n += 2;
	for(int i=1; i<n; i++)
	{
		vec.pb(a[i] - a[i-1]);
	}
	int left = 0, right = 0;
	for(int i=0; i<vec.size(); i++)
	{
		if(i%2)
		right += vec[i];
		else
		left += vec[i];
	}
	swap(right, left);
	//cout << right << " " << left << endl;
	int ans = right;
	int l = 0;
	right = 0;
	for(int i=0; i<vec.size(); i++)
	{
		if(i%2)
		{
			ans = max(ans, right + left - l - 1);
			l += vec[i];
		}
		else
		{
			ans = max(ans, left - l + right + vec[i] - 1);
			right += vec[i];
		}
	}
	cout << ans << endl;
}