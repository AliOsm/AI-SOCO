#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC target("avx,avx2,fma")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("sumsqr.in");ofstream out("sumsqr.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

int main() {
    fast;
    int z; cin>>z;
    for(; z--;){
        ll a; cin>>a;
        vec<pll> m(a);
        for(int q=0; q<a; q++){
            ll x,y; cin>>x>>y;
            m[q] = {x,y};
        }
        vec<ll> dp(a), ds(a);
        dp[0] = m[0].F;
        for(int q=1; q<a; q++) dp[q] = dp[q-1] + max(0LL, m[q].F-m[q-1].S);
        ds[a-1] = m[a-1].F;
        for(int q=a-2; q>=0; q--) ds[q] = ds[q+1]+m[q].F - min(m[q+1].F, m[q].S);
        ll mn = 1e18;
        for(int q=0; q<a; q++){
            ll tyt = ds[q];
            if(q){
                tyt += dp[q-1] - min(m[0].F, m[a-1].S);
            }
            mn = min(mn, tyt);
        }
        cout<<mn<<"\n";
    }
}