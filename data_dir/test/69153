#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>   
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)4e5 + 123;
const ll inf = (ll)3e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

int n, m, timer, tin[N], fup[N], x[N], y[N], c[N];
vector <pii> w[N], g[N];
bool used[N];

void dfs (int v = 1, int pr = -1) {
   used[v] = 1;
   fup[v] = tin[v] = ++ timer;
   for (int i = 0; i < sz (g[v]); i ++) {
      int to = g[v][i].F, ii = g[v][i].S;
      if (to == pr) continue;
      if (used[to]) fup[v] = min (fup[v], tin[to]);
      else {
         dfs (to, v);
         fup[v] = min (fup[v], fup[to]);
         if (fup[to] > tin[v]) c[ii] = 1;       
      }
   }
}

int mx, ans, res[N], col[N];
vector <int> id, com;
                            
void calc (int v) {
   used[v] = 1;
   ans ++;
   com.pb (v);
   for (auto it : w[v]) {
      int to;
      if (it.S == 1) to = y[it.F];
      else to = x[it.F];
      if (!res[it.F]) res[it.F] = it.S;
      if (!used[to]) calc (to);
   }
}

void f (int v) {
   used[v] = 1;
   for (auto it : g[v]) {
      int to = it.F, ii = it.S;
      if (c[ii] && !res[ii]) {
         if (x[ii] != v) res[ii] = 1;
         else res[ii] = -1;
      }
      if (!used[to]) f (to);
   }
}

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                    

inline void Solve () {
   cin >> n >> m;
   for (int i = 1; i <= m; i ++) {
      cin >> x[i] >> y[i];
      g[x[i]].pb ({y[i], i});
      g[y[i]].pb ({x[i], i});
   }
   dfs ();
   for (int i = 1; i <= m; i ++) {
      if (c[i]) continue;
      w[x[i]].pb ({i, 1});
      w[y[i]].pb ({i, -1});
   }
   memset (used, 0, sizeof used);
   for (int i = 1; i <= n; i ++)
      if (!used[i]) {
         com.clear ();
         ans = 0;
         calc (i);
         if (mx < ans) {
            mx = ans;
            id = com;
         }
      }
   for (auto it : id) col[it] = 1;
   cout << mx << endl;
   memset (used, 0, sizeof used);
   f (id[0]);
   for (int i = 1; i <= m; i ++) {
      if (res[i] == -1) swap (x[i], y[i]);
      cout << x[i] << ' ' << y[i] << endl;
   }   
}                                     

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
// cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
