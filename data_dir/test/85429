#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#include <bits/stdc++.h>

#define all(c) c.begin(),c.end()
#define ll long long
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define mod 1000000007
#define PI 3.14159265
#define pll pair<ll, ll>
using namespace std;

typedef unsigned long long ull;

bool is_prime(int n) {

    for (int i = 2; i * i <= n; ++i) {
            if (n % i == 0) {
                  return false;
            }
    }
    return true;
}

inline ll getPow(ll a,ll b){
    ll res = 1ll,tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
       }
       tp *= tp;
       b >>= 1ll;
    }
    return res;
}

ll coso(ll x1, ll y1, ll x2, ll y2, ll x3, ll y3) {
    return abs((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

void ok() {
    puts("YES");
    exit(0);
}

void no() {
    puts("NO");
    exit(0);
}

ll xx[] = {-1, 1, 0, 0};
ll yy[] = {0, 0, -1, 1};

// please, accepted!
const ll N = 1000000;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
    ll n = nxt();
    vector<ll> mas(n);
    vector<ll> used(n + 1, 0);
    set<ll> buf;
    if(n == 1) {
          cout << 1;
          return 0;
    }
    if(n == 3) {
          cout << "1 1 3";
          return 0;
    }
  /*  if(n == 6) {
          cout << "1 1 1 2 2 6";
          return 0;
    }
    if(n == 7) {
          cout << "1 1 1 1 2 2 6";
          return 0;
    }*/
    ll ct_1 = n / 2 + n % 2, ct_2 = n / 2;
    for(int i = 0; i < ct_1; i++) {
           cout << 1 << " ";
    }
    for(int i = 2; i <= n; i += 2) {
           buf.insert(i);
    }

    while(!buf.empty()) {
         ll step = *buf.begin() * 2;
         ll mn = *buf.begin();
         ll cur = *buf.begin();
         if(buf.size() == 1) {
                cout << *buf.begin();
                break;
         }
         bool flag = 0;
         while(true) {
               if(!buf.count(cur)) break;
               if(buf.size() == 2) {
                     cout << mn << " ";
                     cout << *buf.rbegin() << " ";
                     flag = 1;
                     break;
               }
               buf.erase(cur);
               cout << mn << " ";
               cur += step;
         }
         if(flag) break;

    }

    return 0;
}
