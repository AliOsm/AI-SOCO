/*
Till the roof comes off, till the lights go out
Till my legs give out, canâ€™t shut my mouth.
Till the smoke clears out. Am I high? Perhaps
I'ma rip this shit till my bones collapse.
*/
#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <stack>
#include <string.h>
#include <map>
#include <vector>
#include <queue>
#include <math.h>
#include <stack>
#include <complex>


#define f first
#define s second
#define ll long long
#define sz(v)      ((int)((v).size()))
#define X real()
#define Y imag()
#define angle(a)                (atan2((a).imag(), (a).real()))
#define vec(a,b)                ((b)-(a))
#define same(p1,p2)             (dp(vec(p1,p2),vec(p1,p2)) < EPS)
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel
#define length(a)               (hypot((a).imag(), (a).real()))
#define normalize(a)            (a)/length(a)

using namespace std;

const int N=1001;
typedef pair<int,int>ii;
typedef pair<ii,int>node;
typedef complex<double>point;

const double EPS = 1e-9;
int gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b); }

double getDist(point a,point b){
 return sqrt((a.X-b.X)*(a.X-b.X)+(a.Y-b.Y)*(a.Y-b.Y));
}
int dcmp(double x, double y) {
  return fabs(x - y) <= EPS ? 0 : x < y ? -1 : 1;
}


int main()
{
//     freopen("test.in","r",stdin);
    // freopen("test.out","w",stdout);
  int n,k;
  cin>>n>>k;
  if(n==1)cout<<n<<' ';
  else{
    vector<int>v;
    for(int i=2;i*i<=n;i++){
        while(n%i==0){
            v.push_back(i);
            n/=i;
        }
    }
    if(n>1)v.push_back(n);
    if(k>sz(v)){cout<<-1; return 0;}
    for(int i=0;i<k-1;i++)cout<<v[i]<<' ';
    n=1;
    for(int i=k-1;i<sz(v);i++)n*=v[i];
    cout<<n;
  }
  return 0;
}
