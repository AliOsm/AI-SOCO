#include<bits/stdc++.h>
using namespace std;


struct Seg {
  vector<int> cell;
  Seg* ch[2] = {0};
  int l, m, r;
  Seg(int l, int r, const vector<int>& A) : l(l), r(r), m(l + r >> 1) {
    if (r - l > 1) {
      ch[0] = new Seg(l, m, A);
      ch[1] = new Seg(m, r, A);
      merge(begin(ch[0]->cell), end(ch[0]->cell), 
            begin(ch[1]->cell), end(ch[1]->cell), back_inserter(cell));
    }
    else cell = {A[l]};
  }
  int rk(int ql, int qr, int x) {
    if (ql <= l and r <= qr) {
      return lower_bound(begin(cell), end(cell), x) - begin(cell);
    }
    else {
      int ans = 0;
      if (ql < m) ans += ch[0]->rk(ql, qr, x);
      if (m < qr) ans += ch[1]->rk(ql, qr, x);
      return ans;
    }
  }
};


int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);
  int n, k; cin >> n >> k;
  vector<int> lst(100000, 0), s(n + 1), arr(n + 1);
  for (int i = 1; i <= n; ++i) {
    arr[i] = i;
    int a; cin >> a, --a;
    s[i] = lst[a];
    lst[a] = i;
  }
  auto composite = [=](vector<int> A, vector<int> B) {
    vector<int> C(A.size());
    for (int i = 0; i <= n; ++i) C[i] = A[B[i]];
    return C;
  };
  for (; k; s = composite(s, s), k >>= 1) {
    if (k&1) arr = composite(s, arr);
  }

  Seg root(0, n + 1, arr);
  int last = 0;
  int q; cin >> q;
  while (q--) {
    int x, y; cin >> x >> y;
    x = (last + x) % n + 1;
    y = (last + y) % n + 1;
    if (x > y) swap(x, y);
    ++y;
    last = root.rk(x, y, x);
    cout << last << '\n';
  }
}
