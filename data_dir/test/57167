//
// Created by Ильдар Ялалов on 14.01.2020.
//
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")



#ifdef zxc

#include <random>
#include <iostream>
#include <vector>
#include <string.h>
#include <set>
#include <array>
#include <math.h>
#include <algorithm>
#include <queue>
#include <map>
#include <sstream>
#include <unordered_map>
#include <stack>

#else
#include <bits/stdc++.h>
#endif


using namespace std;
typedef long long ll;
typedef unsigned long long ull;
const int inf_int = 1e9 + 100;
const ll inf_ll = 1e18;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef double dbl;
#define pb push_back
#define eb emplace_back
const double pi = 3.1415926535898;
#define dout if(debug) cout
#define fi first
#define se second
#define sp setprecision
#define sz(a) (int(a.size()))
#define all(a) a.begin(),a.end()
typedef unsigned int uint;

//region debug

template<class T1, class T2>
std::ostream &operator<<(std::ostream &out, const std::pair<T1, T2> &rhs) {
    out << "( " << rhs.first << " , " << rhs.second << " )";
    return out;
}

template<typename A, typename B>
string to_string(pair<A, B> p);

template<typename A, typename B, typename C>
string to_string(tuple<A, B, C> p);

template<typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p);

string to_string(const string &s) {
    return '"' + s + '"';
}

string to_string(const char *s) {
    return to_string((string) s);
}

string to_string(bool b) {
    return (b ? "true" : "false");
}

string to_string(vector<bool> v) {
    bool first = true;
    string res = "{";
    for (int i = 0; i < static_cast<int>(v.size()); i++) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(v[i]);
    }
    res += "}";
    return res;
}

template<size_t N>
string to_string(bitset<N> v) {
    string res = "";
    for (size_t i = 0; i < N; i++) {
        res += static_cast<char>('0' + v[i]);
    }
    return res;
}

template<typename A>
string to_string(A v) {
    bool first = true;
    string res = "{";
    for (const auto &x : v) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(x);
    }
    res += "}";
    return res;
}

template<typename A>
string to_string(vector<vector<A>> v) {
    bool first = true;
    string res = "\n{";
    for (const auto &x : v) {
        if (!first) {
            res += ",\n ";
        }
        first = false;
        res += to_string(x);
    }
    res += "}\n";
    return res;
}

template<typename A, typename B>
string to_string(pair<A, B> p) {
    return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template<typename A, typename B, typename C>
string to_string(tuple<A, B, C> p) {
    return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")";
}

template<typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) {
    return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ", " +
           to_string(get<3>(p)) + ")";
}

void debug_out() { cerr << endl; }

template<typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
    cerr << " " << to_string(H);
    debug_out(T...);
}


//endregion

#ifdef zxc
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif


bool debug = 0;
const int MAXN = 2e5 + 100;
const int LOG = 20;
const int mod = 998244353;
const int MX = (1e7 + 100);
typedef long long li;


vector<int> g_init[MAXN];
int tin[MAXN], tout[MAXN];
int timer;

int up[MAXN][LOG];

void init_dfs(int v, int p) {
    tin[v] = ++timer;
    up[v][0] = p;
    for (int i = 1; i < LOG; ++i) {
        up[v][i] = up[up[v][i - 1]][i - 1];
    }

    for (int to:g_init[v]) {
        if (to == p)
            continue;
        init_dfs(to, v);
    }
    tout[v] = timer;
}

inline bool is_parent(int a, int b) {
    return tin[a] <= tin[b] && tout[b] <= tout[a];
}

int lca(int a, int b) {
    if (is_parent(a, b))
        return a;
    if (is_parent(b, a))
        return b;
    for (int i = LOG - 1; i >= 0; --i) {
        if (!is_parent(up[a][i], b)) {
            a = up[a][i];
        }
    }
    return up[a][0];
}


vector<int> g[MAXN];
int parent[MAXN];

int dp[MAXN][2];
bool bad[MAXN];

void dfs(int v) {
    for (int to:g[v]) {
        dfs(to);
    }

    if (sz(g[v]) == 0) {
        dp[v][0] = 1;
        dp[v][1] = 0;
        return;
    }
    int sum = 0;
    for (int to:g[v]) {
        sum += dp[to][0];
    }

    if (bad[v]) {
        dp[v][0] = sum + 1;
        dp[v][1] = sum;

        debug("bad",v,dp[v][0],dp[v][1]);
        return;
    }
    int val = 1;
    for (int to:g[v]) {
        val += min(dp[to][0], dp[to][1]);
    }
    dp[v][0] = min(val, sum);
    dp[v][1] = inf_int;
    for (int to:g[v]) {
        dp[v][1] = min(dp[v][1], sum - dp[to][0] + dp[to][1]);
    }
    debug("good",v,dp[v][0],dp[v][1]);

}

void solve_query() {
    int k;
    cin >> k;
    vector<int> a;
    for (int i = 1; i <= k; ++i) {
        int v;
        cin >> v;
        a.pb(v);
    }

    sort(all(a), [](int a, int b) -> bool {
        return tin[a] < tin[b];
    });
    vector<int> spec = a;

    for (int i = 1; i < sz(a); ++i) {
        spec.pb(lca(a[i], a[i - 1]));
    }

    sort(all(spec));
    spec.resize(unique(all(spec)) - spec.begin());

    sort(all(spec), [](int a, int b) -> bool {
        return tin[a] < tin[b];
    });


    for (int v : spec) {
        g[v].clear();
        parent[v] = -1;
        bad[v] = false;
    }
    for (int v : a) {
        bad[v] = true;
    }
    stack<int> st;

    debug(a);
    debug(spec);

    int root = spec[0];
    for (int v : spec) {
        while (!st.empty() && !is_parent(st.top(), v)) {
            st.pop();
        }

        if (!st.empty()) {
            parent[v] = st.top();
            g[parent[v]].pb(v);
        }
        st.push(v);
    }

    for (int v : spec) {
        debug(v, parent[v]);

        if (parent[v] == up[v][0] && bad[v] && bad[up[v][0]]) {
            cout << -1 << "\n";
            return;
        }
    }

    dfs(root);
    cout << min(dp[root][0], dp[root][1]) << "\n";

}

void solve() {
    int n;
    cin >> n;
    for (int i = 1; i <= n - 1; ++i) {
        int a, b;
        cin >> a >> b;
        g_init[a].pb(b);
        g_init[b].pb(a);
    }
    init_dfs(1, 1);

    int q;
    cin >> q;
    while (q--)
        solve_query();


}


signed main() {
#ifdef zxc
    freopen("../input.txt", "r", stdin);
//    freopen("../output.txt", "w", stdout);
#else
#endif //zxc
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cout.setf(ios::fixed);
    cout.precision(15);

    int t = 1;
    while (t--)
        solve();


    debug(1.0 * clock() / CLOCKS_PER_SEC);
}


