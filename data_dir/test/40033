#include <bits/stdc++.h>
using namespace std;
const char duom[] ="i.txt";
vector <int > adj [1005];
vector <int > tree;
bool used  [1005];
bool usedt [1005];
int max_dist=0;
pair <int,int> min_node;                //node , weight
vector <pair <int,int>> min_nodes;
int worst_diameters [10000];
int dfs(int node);
int main()
{
   // ifstream cin (duom);
    int n,m;
    cin >>n>>m;
    for(int i=0;i<m;i++)
    {
        int u,v;
        cin >> u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    for(int i=1;i<=n;i++)// node
    {
        if(used[i])continue;

        used[i]=true;
        tree.push_back(i);
        // forming a tree
        for(int j=0;j<tree.size();j++)
        {
            for(int k=0;k<adj[tree[j]].size();k++)//for all neighbors
            {
                if(used[adj[tree[j]][k]])continue;
                tree.push_back(adj[tree[j]][k]);
                used[adj[tree[j]][k]]=true;
            }
        }
        // find minimal node with dfs
        int min_dist=9999999;
        int dist_now;
        max_dist=0;
        for(int j=0;j<tree.size();j++)
        {
            dist_now=dfs(tree[j])-1;
            if(dist_now<min_dist)
            {
                min_dist=dist_now;
                min_node.first=tree[j];
                min_node.second=dist_now;
            }
            if(dist_now>max_dist)
            {
                max_dist=dist_now;
            }
            memset(usedt,0,1001);
        }
        min_dist=9999999;
        min_nodes.push_back(min_node);
        worst_diameters[min_node.first]=max_dist;
        tree.clear();
    }
    // find minimum node
    pair <int,int> worst_node;
    pair <int,int> worst_node_2;
    pair <int,int> worst_node_3;
    worst_node.second=0;
    worst_node_2.second=0;
    worst_node_3.second=0;
    for(int i=0;i<min_nodes.size();i++)
    {
        if(min_nodes[i].second>=worst_node.second)
        {
            worst_node_3=worst_node_2;
            worst_node_2=worst_node;
            worst_node=min_nodes[i];
        }
        else if(min_nodes[i].second>=worst_node_2.second)
        {
            worst_node_3=worst_node_2;
            worst_node_2=min_nodes[i];
        }
        else if(min_nodes[i].second>=worst_node_3.second)
        {
            worst_node_3=worst_node_3;
        }
    }
    if(min_nodes.size()==1)
    {
        cout << max_dist<<endl;
    }else if(min_nodes.size()==2)
    {
        cout << max(min_nodes[0].second+min_nodes[1].second+1,worst_diameters[worst_node.first])<<endl;
    }
    else if(worst_node.second==worst_node_2.second&&worst_node_2.second==worst_node_3.second)
    {
        cout << worst_node.second+worst_node_2.second+2<<endl;
    }
    else
    {
        cout << max(worst_node_2.second+worst_node.second+1,worst_diameters[worst_node.first])<<endl;
    }

    for(int i=0;i<min_nodes.size();i++)
    {
        if(worst_node==min_nodes[i])continue;
        cout << worst_node.first<<" "<<min_nodes[i].first<<endl;
    }

    return 0;
}
int dfs(int node)
{
    usedt[node]=true;
    int minimalke=0;
    for(int i=0;i<adj[node].size();i++)
    {
        if(usedt[adj[node][i]])continue;
        minimalke=max(dfs(adj[node][i]),minimalke);
    }
    return minimalke+1;

}
