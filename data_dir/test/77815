#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<queue>
#include<string>
#include<map>
#include<cmath>
#include<bitset>
#include<set>
#include<iomanip>
#include<fstream>
#include<bitset>

using namespace std;
typedef pair<int,int> ii;
typedef pair<long long,long long> ll;
typedef pair<long long,ll> lll;
long long mod =1000000007LL;


void read(int &x){
	char ch;x=0;
	for(ch=getchar();ch<'0'||ch>'9';ch=getchar());
	x=ch-'0';
}
vector<vector<int> > grid;
int get(int l,int r){
	if(r<l) return 0;
	int ans = grid[r][r];
	if(l==0) return ans/2;
	return (ans-grid[l-1][r]+grid[l-1][l-1]-grid[r][l-1])/2;
}
vector<vector<int> > dp,opt;


/*int f(int x,int y){
	if(dp[x][y]!=-1) return dp[x][y];
	if(y==x) {
		a[x][y]=y-1;
		return dp[x][y]=0;
	}
	if(x==0){
		a[x][y]=y-1;
		return dp[x][y]=get(0,y);
	}

	dp[x][y]=1000000000;
	f(x,y-1);

	for(int l=a[x][y-1]+1;l<=y;l++){
		if(dp[x][y]>=f(x-1,l-1)+get(l,y)){
			dp[x][y]=f(x-1,l-1)+get(l,y);
			a[x][y]=l-1;
		}
	}
	return dp[x][y];
}
*/
void compute(int d,int l,int r,int optl,int optr){
	if(r<l) return ;
	int m = (l+r)/2;
	dp[d][m]=1000000000;
	opt[d][m]=1000000000;
	for(int i=optl;i<=min(optr,m);i++){
		int temp = dp[d-1][i]+get(i+1,m);
		if(temp<dp[d][m]){
			dp[d][m]=temp;
			opt[d][m]=i;
		}
	}
	compute(d,l,m-1,optl,opt[d][m]);
	compute(d,m+1,r,opt[d][m],optr);
}
int main(){
	int n,k;
	cin>>n>>k;
	grid.assign(n,vector<int>(n,0));
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			read(grid[i][j]);
			if(i>0) grid[i][j]+=grid[i-1][j];
			if(i>0&&j>0) grid[i][j]-=grid[i-1][j-1];
			if(j>0) grid[i][j]+=grid[i][j-1];
		}
	}
	dp.assign(k,vector<int>(n,-1));
	opt=dp;
	for(int j=0;j<k;j++){
		if(j==0){
			for(int i=0;i<n;i++){
				dp[j][i]=get(0,i);
			}
		}else{
			compute(j,0,n-1,0,n-1);
		}
	}
	cout<<dp[k-1][n-1]<<endl;



	return 0;
}
