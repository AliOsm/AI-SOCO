#include<stdio.h>
#include<vector>
#include<algorithm>
#include <iostream>
#include <cmath>
#include <complex>
#include<queue>
#include <string>
#include<bits/stdc++.h>
#define pi 3.141592654
#define forr(i,a,b) for(int i=a;i<=b;i++)
#define F first
#define S second
using namespace std;
typedef pair<double,double>pdd;
typedef long long  ll;
typedef pair<ll, ll>pii;
//template<typename T>T gcd(T x, T y) { if(y == 0)return x; else return gcd(y, x%y); }
//typedef bitset<20> mask;
//int x[8]={1,0,0,-1,-1,-1,1,1};
//int y[8]={0,1,-1,0,-1,1,-1,1};
//const double PI = acos(-1.0);
//const double EPS = 1e-9;
//typedef complex<double> point;
string s;
int n,F[100010],cnt[100010],sum[100010],pr[100010],vis[100010];
vector<int>a[100010];
vector<pair<int,int>>ans;
int getNextLen(int len, char c){
  while(len && s[len] != c)
    len = F[len-1];
  if(s[len] == c) ++len;
  return len;
}

void computeF(){
  F[0] = 0;
  for(int i = 1 ; i < n ; ++i)
    F[i] = getNextLen(F[i-1], s[i]);
}

int dfs(int i)
{
    vis[i]=1;
    int c=0;
    for(auto p:a[i])
    {
        if(vis[p]==0)
        {
            pr[p]=i;
           c+=dfs(p);
        }
    }
    return sum[i]=c+cnt[i];
}

void go(int i)
{
    if(i==0)
        return;
    go(pr[i]);
    ans.push_back({i,sum[i]+1});
}
int main()
{

//cout<<Pow((ll)1000000,(ll)110);
//freopen("hotel.in","r",stdin);
//freopen("math.in","w",stdout);
//    char input[15];
//    scanf("%s", &input);  array of char
//  gets(c+1);  array of char
cin>>s;
n=s.size();
computeF();
forr(i,0,n-1)
{
 cnt[F[i]]++;
 a[i+1].push_back(F[i]);
 a[F[i]].push_back(i+1);
}
dfs(0);
string g,h;
go(n);
cout<<ans.size()<<endl;
forr(i,0,ans.size()-1)
cout<<ans[i].F<<" "<<ans[i].S<<endl;
return 0;
}
