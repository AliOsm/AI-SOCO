#define _USE_MATH_DEFINES
#include <array>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;
mt19937 mrand(random_device{}());
int rnd(int x) { return mrand() % x; }

int main() {
  int cas;
  scanf("%d", &cas);
  while (cas--) {
    int n;
    scanf("%d", &n);
    vector<ii> a(n + 1);
    a[0] = {0, 0};
    for (int i = 1; i <= n; ++i) {
      scanf("%d%d", &a[i].second, &a[i].first);
    }
    sort(a.begin(), a.end());
    string ret;
    bool found = false;
    for (int i = 1; i <= n; ++i) {
      int X = a[i].first - a[i - 1].first;
      int Y = a[i].second - a[i - 1].second;
      if (X < 0 || Y < 0) {
        found = true;
        break;
      }
      while (Y--) ret += 'R';
      while (X--) ret += 'U';
    }
    if (found) {
      puts("NO");
    } else {
      puts("YES");
      puts(ret.c_str());
    }
  }
  return 0;
}
