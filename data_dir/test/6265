#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <hash_map>
#include <hash_set>
#include <vector>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iterator>
using namespace std;
#define mems(arr, val) memset(arr, val, sizeof(arr))
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define all(A) (A).begin(), A.end()
#define mp(a, b) make_pair(a, b)
#define forit(it, A) for(auto it = A.begin(); it != A.end(); it++)
typedef long long LL;
typedef pair<int, int> pii;
const LL INF = INT_MAX;
const LL MAXN = 100100;
vector<vector<pii>> G(MAXN);
vector<vector<int>> T(MAXN);
int n,m;

int dijkstra(int s, int t)
{
	vector<int> d(n, INF / 2);
	vector<char> used(n, 0);
	set<pii> S;
	d[s] = 0;
	forn(i, 0, n)
	{
		S.insert(mp(d[i], i));
	}

	while(S.size() > 0)
	{
		auto cur = *S.begin();
		S.erase(cur);
		int from = cur.second;
		if (used[from]) continue;
		used[from] = 1;

		int plus = 0;
		for(int i = 0; i < T[from].size(); ++i)
		{
			if (T[from][i] == cur.first)
			{
				while(i < T[from].size() && T[from][i] == cur.first + plus)
				{
					plus++;
					i++;
				}
				break;
			}
		}

		for(int i = 0; i < G[from].size(); ++i)
		{
			int to = G[from][i].first, len = G[from][i].second;
			if (d[to] > d[from] + len + plus)
			{
				S.erase(mp(d[to], to));
				d[to] = d[from] + len + plus;
				S.insert(mp(d[to], to));
			}
		}
	}

	return d[n - 1] != INF / 2 ? d[n - 1]:-1;

}

int main()
{
#ifdef MY_SOL
    freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#endif
	
	scanf("%d %d", &n, &m);
	
	
	forn(i, 0, m)
	{
		int x,y,t;
		scanf("%d %d %d", &x, &y, &t);
		x--;
		y--;
		G[x].push_back(mp(y, t));
		G[y].push_back(mp(x, t));
	}

	forn(i, 0, n)
	{
		int count;
		scanf("%d", &count);
		forn(j, 0, count)
		{
			int tmp;
			scanf("%d", &tmp);
			T[i].push_back(tmp);
		}
	}

	int tmp = dijkstra(0, n - 1);
	cout<<tmp;
    return 0;
}