#include <bits/stdc++.h>
using namespace std;

#define R first
#define C second

typedef long long Long;

const int N = 2020, M = 200200, MOD = 1e9 + 7;

int n, m, k;
Long fact[M], ans[N];
pair<int, int> p[N];

Long power(Long base, Long exp) {
	Long ans = 1;
	while (exp > 0) {
		if (exp & 1) ans = (ans * base) % MOD;
		exp >>= 1;
		base = (base * base) % MOD;
	}
	return ans;
}

Long modInverse(Long x) {
	return power(x % MOD, MOD - 2);
}

Long nCr(int n, int r) {
	if (r > n) {
		return 0;
	}
	return fact[n] * modInverse(fact[r] * fact[n - r]) % MOD;
}

void init() {
	fact[0] = 1;
	for (int i = 1; i < M; ++i) {
		fact[i] = (fact[i - 1] * i) % MOD;
	}
	p[k] = {n, m};
	sort(p, p + k);
}

int main() {
	cin >> n >> m >> k;
	for (int i = 0; i < k; ++i) {
		cin >> p[i].R >> p[i].C;
	}
	init();
	for (int i = 0; i <= k; ++i) {
		ans[i] = nCr(p[i].R + p[i].C - 2, p[i].R - 1);

		for (int j = 0; j < i; ++j) {
			if (p[j].R <= p[i].R && p[j].C <= p[i].C) {
				int h = p[i].R - p[j].R + 1;
				int w = p[i].C - p[j].C + 1;
				ans[i] = (ans[i] - ans[j] * nCr(w + h - 2, w - 1)) % MOD;
			}
		}

		ans[i] = (ans[i] + MOD) % MOD;
	}
	cout << ans[k] << endl;
	return 0;
}