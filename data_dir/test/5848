#include <vector>
#include <stdio.h>
#include <string.h>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
typedef long long ll;
typedef long double d;
using namespace std;
//int direcy[]= {0,0,1,-1},direcx[]= {-1,1,0,0};
vector<vector<pair<ll,ll> > > v;
ll dfs(ll x,ll last,ll ind)
{
    if(!v[x].size())
        return 0;
    ll sum=dfs(v[x][0].first,x,0)+dfs(v[x][1].first,x,1);
    ll y=abs(v[x][0].second-v[x][1].second);
    v[x][0].second=v[x][1].second=max(v[x][0].second,v[x][1].second);
    v[last][ind].second+=v[x][1].second;
    return y+sum;
}
int main()
{
    cin.tie(0);
    std::ios::sync_with_stdio(false);
    ll n,x;
    vector<ll> w;
    cin >> n;
    for(int i =0;i<pow(2,n+1)-2;i++)
    {
        cin >> x;
        w.push_back(x);
    }
    v.resize(pow(2,n+2));
    for(int i=0;i<pow(2,n)-1;i++)
    {
        v[i].push_back({i*2+1,w[i*2]});
        v[i].push_back({i*2+2,w[i*2+1]});
    }
    ll sum=dfs(1,0,0)+dfs(2,0,1);
    sum+=max(v[0][1].second,v[0][0].second)-min(v[0][1].second,v[0][0].second);
    cout << sum<< endl;
    return 0;
}
