#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <algorithm>
#define INF 0x3f3f3f3f
#define MAXN 105
#define MAX_VAL 60
#define NO 0
#define YES 1
using namespace std;

int v[MAXN];
int factor[MAX_VAL];
int prime[MAX_VAL];
int dp[MAXN][(1 << 17) + 5];
int r[MAXN][(1 << 17) + 5];
int next[MAXN][(1 << 17) + 5];
int n;

int solve(int pos, int mask) {
    if (pos >= n) {
        return 0;
    }
    if (dp[pos][mask] != -1) {
        return dp[pos][mask];
    }

    int mask2;
    int aux = INF;
    int aux2;
    for (int i = 1; i < MAX_VAL; i++) {
        mask2 = factor[i];
        // check if primes not used
        if ((mask2 & mask) == 0) {
            aux2 = abs(v[pos] - i) + solve(pos + 1, mask | mask2);
            if (aux > aux2) {
                next[pos][mask] = mask | mask2;
                aux = aux2;
                r[pos][mask] = i;
            }
        }
    }
    dp[pos][mask] = aux;
    return aux;
}

int main(void) {
    int len = 0;
    int ok;
    int mask;

    for (int i = 2; i < MAX_VAL; i++) {
        ok = YES;
        for (int j = 2; j < i; j++) {
            if (i % j == 0) {
                ok = NO;
                break;
            }
        }
        if (ok) {
            prime[len++] = i;
        }
    }

    memset(factor, 0, sizeof(factor));
    for (int i = 2; i < MAX_VAL; i++) {
        for (int j = 0; j < len; j++) {
            if (i % prime[j] == 0) {
                factor[i] |= 1 << j;
            }
        }
    }

    scanf(" %d", &n);

    for (int i = 0; i < n; i++) {
        scanf(" %d", &v[i]);
    }

    memset(dp, -1, sizeof(dp));
    solve(0, 0);

    mask = 0;
    for (int i = 0; i < n; i++) {
        if (i != 0) {
            printf(" ");
        }
        printf("%d", r[i][mask]);
        mask = next[i][mask];
    }
    return 0;
}
