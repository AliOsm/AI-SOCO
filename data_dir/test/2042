#include <iostream>

#include <vector>

using namespace std;

typedef vector<int> VI;
typedef vector<int> VVI;

typedef pair<int,int> II;

int nnodes;
vector<II> edges;

void build_graph(int K) {
   nnodes = 1;
   int nr = 1;
   for (int k = 1; k < K; ++k)
      edges.push_back(II(nr, nr+k));
   nnodes += K-1;
   for (int deg = 1; deg < K; deg += 2) {
      for (int k = 1; k < K; ++k) {
         edges.push_back( II( nr+k, nnodes+1 ) );
         edges.push_back( II( nr+k, nnodes+2 ) );
      }
      edges.push_back( II(nnodes+1, nnodes+2) );
      nnodes += 2;
   }

   nnodes++;
   nr = nnodes;
   for (int k = 1; k < K; ++k)
      edges.push_back(II(nr, nr+k));
   nnodes += K-1;
   for (int deg = 1; deg < K; deg += 2) {
      for (int k = 1; k < K; ++k) {
         edges.push_back( II( nr+k, nnodes+1 ) );
         edges.push_back( II( nr+k, nnodes+2 ) );
      }
      edges.push_back( II(nnodes+1, nnodes+2) );
      nnodes += 2;
   }

   edges.push_back( II(1, nr) );
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(NULL);

   int K;
   cin >> K;
   if ((K % 2) == 1) {
      cout << "YES\n";
      build_graph(K);
      cout << nnodes << ' ' << edges.size() << '\n';
      for (int j = 0; j < (int) edges.size(); ++j) {
         cout << edges[j].first << ' ' << edges[j].second << '\n';
      }
   }
   else
      cout << "NO\n";

   return 0;
}
