#pragma GCC optimize("O3")

#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <random>
#include <cmath>
#include <chrono>
#include <bitset>

#define ld long double
#define pb push_back
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()

#define int long long
using namespace std;

const int INF = 2e15;
const int MOD = 998244353;
const int MB = 20;

void solve() {
	int n;
	cin >> n;
	vector<int> a(n + 1);
	for (int i = 1; i <= n; i++) {
		cin >> a[i];
	}

	int odd = n / 2 + n % 2, even = n / 2;

	vector<vector<vector<vector<int>>>> dp(2, vector<vector<vector<int>>>(n + 1, vector<vector<int>>(odd + 1, vector<int>(even + 1, INF))));
	dp[0][0][0][0] = 0;
	dp[1][0][0][0] = 0;

	for (int i = 1; i <= n; i++) {
		for (int j = 0; j <= odd; j++) {
			for (int c = 0; c <= even; c++) {
				if (a[i]) {
					if (a[i] % 2) dp[1][i][j][c] = j ? min(dp[0][i - 1][j - 1][c] + 1, dp[1][i - 1][j - 1][c]) : INF;
					else dp[0][i][j][c] = c ? min(dp[0][i - 1][j][c - 1], dp[1][i - 1][j][c - 1] + 1) : INF;
				}
				else {
					dp[1][i][j][c] = j ? min(dp[0][i - 1][j - 1][c] + 1, dp[1][i - 1][j - 1][c]) : INF;
					dp[0][i][j][c] = c ? min(dp[0][i - 1][j][c - 1], dp[1][i - 1][j][c - 1] + 1) : INF;
				}
			}
		}
	}

	cout << min(dp[0][n][odd][even], dp[1][n][odd][even]);
}

signed main() {
	/*
	freopen("search.in", "r", stdin);
	freopen("search.out", "w", stdout);
	*/
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	solve();
}