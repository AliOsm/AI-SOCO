#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <cmath>
#include <bitset>
#include <string>
#include <map>
#include <queue>
#include <cstring>
#include <climits>
using namespace std;

#define uint64 unsigned int64
#define int64 long long
#define rep(i, n) f(i, 0, (n) - 1)
#define f(i, a, b) for(int i = (a); i <= (int)(b); ++i)
#define fr(i, a, b) for(int i = (a); i >= (int)(b); --i)

const int N = 1000;
uint64 a[N][N];
uint64 d[4][N + 2][N + 2];

int main()
{
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
//  freopen("output.txt", "w", stdout);
//  freopen("bigwall.in", "r", stdin);
//  freopen("bigwall.out", "w", stdout);
#endif
  ios_base::sync_with_stdio(false);

  int n, m;
  cin >> n >> m;
  rep(i, n)
    rep(j, m)
      cin >> a[i][j];
  f(i, 1, n)
    f(j, 1, m)
      d[0][i][j] = max(d[0][i - 1][j], d[0][i][j - 1]) + a[i - 1][j - 1];
  fr(i, n, 1)
    f(j, 1, m)
      d[1][i][j] = max(d[1][i + 1][j], d[1][i][j - 1]) + a[i - 1][j - 1];
  fr(i, n, 1)
    fr(j, m, 1)
      d[2][i][j] = max(d[2][i + 1][j], d[2][i][j + 1]) + a[i - 1][j - 1];
  f(i, 1, n)
    fr(j, m, 1)
      d[3][i][j] = max(d[3][i - 1][j], d[3][i][j + 1]) + a[i - 1][j - 1];
  uint64 c = 0;
  f(i, 2, n - 1)
    f(j, 2, m - 1)
      c = max(c, max(d[0][i - 1][j] + d[2][i + 1][j] + d[1][i][j - 1] + d[3][i][j + 1],
        d[0][i][j - 1] + d[2][i][j + 1] + d[1][i + 1][j] + d[3][i - 1][j]));
  cout << c;
}
