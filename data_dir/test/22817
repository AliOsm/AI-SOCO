#include <bits/stdc++.h>
#define PI 3.1415926535897932384626
using namespace std;

struct vec
{
    long double x,y;
    bool operator ==(const vec &a) const{
        return x==a.x&&y==a.y;
    }
    bool operator <(const vec &a) const{
        if(a.x!=x) return x<a.x;
        return y<a.y;
    }
    vec operator +(const vec &a) const{
        return {x+a.x,y+a.y};
    }
    vec operator *(const long double &a) const{
        return {x*a,y*a};
    }
    vec operator -(const vec &a) const{
        return {x-a.x,y-a.y};
    }
    vec operator /(const long double &a) const{
        return {x/a,y/a};
    }
    long double len() const{
        return sqrt(x*x+y*y);
    }
    long double dot(const vec &a) const{
        return x*a.x+y*a.y;
    }
    long double crs(const vec &a) const{
        return x*a.y-y*a.x;
    }
    vec proj(const vec &a) const{
        return (a/a.len())*(*this).dot(a)/a.len();
    }
};

struct P
{

    int x,y,z;
    bool operator <(const P &a) const{
        if(x!=a.x) return x<a.x;
        return y<a.y;
    }
};


bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y<b.y;
}


long long x,y,z,mod=1000000007;
vector<int> v[3010],v1;
int i,n,m,k,a,d,b,c,dx[10]={1,0,-1,0},dy[10]={0,1,0,-1};
int e;
int o[511];
int l[3011][3001];
int par[1];
int j[11];
//stack<int> s;
set<P> s;
queue<int> q,q1;
P u[1];
char r[1];
//string r,r1;
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
map<int,int> p;
//v.resize(unique(v.begin(),v.end())-v.begin());

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//rng();

void f(int n,int p,int m)
{
    for(int h=0;h<v[n].size();h++)
        if(v[n][h]!=p&&l[m][v[n][h]]<0)
    {
        l[m][v[n][h]]=l[m][n]+1;
        f(v[n][h],n,m);
    }
}

int main()
{
    scanf("%d %d",&a,&b);
    for(int t=1;t<=b;t++)
    {
        scanf("%d %d",&n,&m);
        v[n].push_back(m);
        v[m].push_back(n);
    }
    memset(l,-1,sizeof(l));
    for(int t=1;t<=a;t++)
    {
        l[t][t]=0;
        q.push(t);
        for(;q.size();q.pop())
        for(int h=0;h<v[q.front()].size();h++)
        if(l[t][v[q.front()][h]]<0)
        {
            l[t][v[q.front()][h]]=l[t][q.front()]+1;
            q.push(v[q.front()][h]);
        }
        //f(t,0,t);
    }
    for(int t=1;t<=6;t++)
        scanf("%d",&j[t]);
    if(l[j[1]][j[2]]>j[3]||l[j[4]][j[5]]>j[6])
    {
        puts("-1");
        return 0;
    }
    k=l[j[1]][j[2]]+l[j[4]][j[5]];
    for(int t=1;t<=a;t++)
        for(int w=1;w<=a;w++)
    if(l[j[1]][t]+l[t][w]+l[w][j[2]]<=j[3]&&l[j[4]][t]+l[t][w]+l[w][j[5]]<=j[6])
    {
        k=min(k,l[j[1]][t]+l[j[4]][t]+l[t][w]+l[w][j[2]]+l[w][j[5]]);
    }
    for(int t=1;t<=a;t++)
        for(int w=1;w<=a;w++)
    if(l[j[1]][t]+l[t][w]+l[w][j[2]]<=j[3]&&l[j[5]][t]+l[t][w]+l[w][j[4]]<=j[6])
    {
        k=min(k,l[j[1]][t]+l[j[5]][t]+l[t][w]+l[w][j[2]]+l[w][j[4]]);
    }
    printf("%d",b-k);
}
