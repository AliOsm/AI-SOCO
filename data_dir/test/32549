#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define mod 1000000007
#define h1 7897897897897897
#define h2 7897466719774591
#define b1 98762051
#define b2 98765431
#define inf 1000000000
#define pi 3.1415926535897932384626
#define LMAX 9223372036854775807
#define ll long long
#define fi first
#define se second
#define pii pair<int, int>
#define pll pair<ll, ll>
#define vi vector<int>
#define vl vector<ll>
#define vp vector<pii>
#define SET(a, b) memset(a, b, sizeof(a));
#define all(x) (x).begin(), (x).end()
#define flush fflush(stdout)
#define debug printf("Hello\n")
#define FOR(i, a, b) for (int i = (a); i <= (b); i++)
#define FORD(i, a, b) for (int i = (a); i >= (b); i--)
int n, m, k, x, y, sum, cnt, a[100005][20], type, l, r;
int seg[400005][20], lazy[400005][20];
void build(int l, int r, int id, int bit) {
  if (l == r) {
    seg[id][bit] = a[l][bit];
    return;
  }
  int mid = (l + r) / 2;
  build(l, mid, id * 2, bit);
  build(mid+1, r, id * 2 + 1, bit);
  seg[id][bit] = seg[id * 2][bit] + seg[id * 2 + 1][bit];
}
void pushdown(int l, int r, int id, int bit) {
  if (!lazy[id][bit]) return;
  seg[id][bit] = r - l + 1 - seg[id][bit];
  if (l != r) { //propagate to children
    lazy[id * 2][bit] ^= 1;
    lazy[id * 2 + 1][bit] ^= 1;
  }
  lazy[id][bit] = 0;
}
ll query(int l, int r, int id, int lq, int rq, int bit) { // query range [lq, rq]
  pushdown(l, r, id, bit);
  if (r < lq || l > rq) return 0;
  if (lq <= l && r <= rq) return seg[id][bit];
  int mid = (l + r) / 2;
  return query(l, mid, id * 2, lq, rq, bit) + query(mid+1, r, id * 2 + 1, lq, rq, bit);
}
void rangeupdate(int l, int r, int id, int lu, int ru, int bit) { //flip bit in [lu, ru]
  pushdown(l, r, id, bit);
  if (r < lu || l > ru) return;
  if (lu <= l && r <= ru) {
    lazy[id][bit] ^= 1;
    pushdown(l, r, id, bit);
    return;
  }
  int mid = (l + r) / 2;
  rangeupdate(l, mid, id * 2, lu, ru, bit);
  rangeupdate(mid + 1, r, id * 2 + 1, lu, ru, bit);
  seg[id][bit] = seg[id * 2][bit] + seg[id * 2 + 1][bit]; 
}
int main () {
  ios::sync_with_stdio(false);
  cin.tie(0);
  scanf("%d", &n);
  FOR(i, 1, n) {
    scanf("%d", &x);
    FOR(j, 0, 19) {
      if (x & (1<<j)) a[i][j] = 1;
    }
  }
  FOR(i, 0, 19) build(1, n, 1, i);
  scanf("%d", &m);
  FOR(i, 1, m) {
    scanf("%d %d %d", &type, &l, &r);
    if (type == 1) {
      ll ans = 0;
      FOR(j, 0, 19) ans += (1LL << j) * query(1, n, 1, l, r, j);
      printf("%lld\n", ans);
    } else {
      scanf("%d", &x);
      FOR(j, 0, 19) {
        if (x & (1<<j)) rangeupdate(1, n, 1, l, r, j);
      }
    }
  }
  return 0;
}