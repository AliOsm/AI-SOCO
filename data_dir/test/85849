#include<cstdio>
#include<map>
#include<vector>
#include<algorithm>
#include<memory.h>
using namespace std;

const int N = 5005, MOD = 1e9 + 9;


int n, a[N], b[N], ans[N], qn[N], qp[N];


int sz;
map < vector < int >, int > Z;
inline int f(vector < int > &s){
    if(Z.find(s) == Z.end()){
        Z[s] = ++sz;
    }
    return Z[s];
}


int main(){
    scanf("%d", &n);
    for(int i = 1; i <= n; i++){
        scanf("%d", &a[i]);
        int x = abs(a[i]);
        vector < int > q;
        int d = 2;
        while(d * d <= x){
            if(x % d == 0){
                q.push_back(d);
                x /= d;
            }
            else{
                d++;
            }
        }
        if(x > 1){
            q.push_back(x);
        }
        sort(q.begin(), q.end());
        q.push_back(-1);
        int cur = 1;
        vector < int > z;
        for(int j = 1; j < q.size(); j++){
            if(q[j] == q[j - 1]){
                cur++;
            }
            else{
                if(cur & 1){
                    z.push_back(q[j - 1]);
                }
                cur = 1;
            }
        }
        if(a[i] < 0){
            z.push_back(-1);
        }
        b[i] = f(z);
        //printf("%d ", b[i]);
    }
    //return 0;
    for(int i = 1; i <= n; i++){
        int cur = 0;
        memset(qn, 0, sizeof(qn));
        for(int j = i; j <= n; j++){
            if(a[j] == 0){

            }
            else{
                if(++qn[b[j]] == 1){
                    cur++;
                }
            }
            ans[max(1, cur)]++;
        }
    }
    for(int i = 1; i <= n; i++){
        printf("%d ", ans[i]);
    }
}
