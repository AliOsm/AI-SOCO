#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265359
#endif // M_PI
#define endl "\n"
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
using namespace std;
typedef long long LL;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
struct Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;

vector <vector <int>> g;
vector <int> used;
vector <LL> d;
LL res = 0;

void dfs2(int x, int dist = 1)
{
    used[x] = 1;
    int cnt = 0;
    for (auto i: g[x]) {
        if (used[i]) {
            continue;
        }
        dfs2(i, dist + 1);
        ++cnt;
    }
    if (cnt == 0) {
        d.push_back(dist);
    }
}

void dfs(int x)
{
    used[x] = 1;
    d.resize(0);
    for (auto i: g[x]) {
        if (used[i]) {
            continue;
        }
        dfs2(i);
    }
    sort(IT(d));
    reverse(IT(d));
    //DEBA(d);
    FOR (i, 0, d.size()) {
        res = max(res, d[i] + i);
    }
}

int main()
{
    int n;
    scanf("%d", &n);
    g.resize(n);
    used.resize(n);
    d.resize(n);
    FOR (i, 0, n - 1) {
        int x, y;
        scanf("%d %d", &x, &y);
        --x, --y;
        g[x].push_back(y);
        g[y].push_back(x);
    }
    used[0] = 1;
    for (auto i: g[0]) {
        dfs(i);
    }
    cout << res + 1;
}
