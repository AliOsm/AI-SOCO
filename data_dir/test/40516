#include <bits/stdc++.h>
#define ll long long
using namespace std;

const int N=3e5+5;

ll ans;
int a[N];
int Sufmin[N],Sufmax[N]; 

void BothinHalf(int l,int m,int r) {
  Sufmin[m-1]=Sufmax[m-1]=a[m-1];
  for (int i=m-2; i>=l; i--) {
    Sufmin[i]=min(Sufmin[i+1],a[i]);
    Sufmax[i]=max(Sufmax[i+1],a[i]);
  }

  int Max=a[m],Min=a[m],ind;
  for (int i=m+1 ; i<=r; i++) {
    Max=max(Max,a[i]);
    Min=min(Min,a[i]);
    ind=i-(Max-Min);
    if (m<=ind || ind<l) continue;
    if (Min<=Sufmin[ind] && Sufmax[ind]<=Max) 
      ++ans;
  }
}

int f[2*N];
void OneOnOne(int l,int m,int r) {
  Sufmin[m-1]=Sufmax[m-1]=a[m-1];
  for (int i=m-2; i>=l; i--) {
    Sufmin[i]=min(Sufmin[i+1],a[i]);
    Sufmax[i]=max(Sufmax[i+1],a[i]);
  }

  int j=m,k=m;
  int LocalMax=a[m],LocalMin=a[m];
  for (int i=m; i<=r; i++) {
    LocalMax=max(LocalMax,a[i]);
    LocalMin=min(LocalMin,a[i]);

    while (l<=j-1 && Sufmax[j-1]<=LocalMax) {
      --j;
      f[j-Sufmin[j]+N]++;
    }

    while (j<=k-1 && LocalMin<=Sufmin[k-1]) {
      --k;
      f[k-Sufmin[k]+N]--;
    }

    if (Sufmin[j]<=LocalMin && Sufmax[j]<=LocalMax) 
      ans+=f[i-LocalMax+N];
  }

  for (int i=m-1; i>=l; i--) {
    f[i-Sufmin[i]+N]=0;
  }
}

void Comp(int l,int r) {
  int m=(l+r)>>1,md=(r-l+1)%2;
  if (l>=r) return ;
	
  BothinHalf(l,(l+r+1)/2,r);
  reverse(a+l,a+r+1);

  BothinHalf(l,(l+r)/2+1,r);
  reverse(a+l,a+r+1);

  OneOnOne(l,(l+r+1)/2,r);
  reverse(a+l,a+r+1);

  OneOnOne(l,(l+r)/2+1,r);
  reverse(a+l,a+r+1);

  if (md) {
    Comp(l,m-1);
    Comp(m,r);
  }
    else {
    Comp(l,m);
    Comp(m+1,r);
  }
}

main () {
  int n,id;
  scanf("%d",&n);
  for (int i=1; i<=n; i++) {
    scanf("%d",&id);
    scanf("%d",&a[id]);
  }
	
  Comp(1,n);
  ans+=n;
  printf("%I64d\n",ans);
} 