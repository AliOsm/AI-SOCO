//besmellah
#include <bits/stdc++.h>
using namespace std;

#define int long long
const int maxn = 2e5 + 5, inf = 1e18;
int seg[4 * maxn], lazy[4 * maxn], p[maxn], q[maxn], a[maxn];

void relax(int id) {
	int x = lazy[id];
	lazy[id] = 0;
	seg[2 * id + 0] += x;
	lazy[2 * id + 0] += x;
	seg[2 * id + 1] += x;
	lazy[2 * id + 1] += x;
//	cout << x << ' ' << id << endl;
}

void add(int id, int L, int R, int l, int r, int val) {
	if (R <= l || r <= L)
		return;
	if (L >= l && R <= r) {
		seg[id] += val;
		lazy[id] += val;
//		cout << id << ' ' << L << ' ' << R << ' ' << seg[id] << endl;
		return;
	}
	int mid = (L + R) / 2;
	relax(id);
	add(2 * id + 0, L, mid, l, r, val);
	add(2 * id + 1, mid, R, l, r, val);
	seg[id] = min(seg[2 * id], seg[2 * id + 1]);
//	cout << id << ' ' << L << ' ' << R << ' ' << seg[id] << endl;
}

int get(int id, int L, int R, int l, int r) {
//	cout << "GET " << L << ' ' << R << ' ' << l << ' ' << r << ' ' << id << ' ' << seg[id] << endl;
	if (r <= L || R <= l)
		return inf;
	if (L >= l && R <= r)
		return seg[id];
	int mid = (L + R) / 2;
	relax(id);
	return min(get(2 * id + 0, L, mid, l, r), get(2 * id + 1, mid, R, l, r));
}

int32_t main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	int n;
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> p[i];
		p[i]--;
		q[p[i]] = i;
	}
	for (int i = 0; i < n; i++) {
		cin >> a[i];
		add(1, 0, n, i, n, a[i]);
	}
	int ans = get(1, 0, n, 0, n - 1);
	for (int i = 0; i < n; i++) {
		add(1, 0, n, q[i], n, -a[q[i]]);
		add(1, 0, n, 0, q[i], a[q[i]]);
		ans = min(ans, get(1, 0, n, 0, n - 1));
	}
	cout << ans;
}
