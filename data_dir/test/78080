#pragma comment(linker, "/STACK:536870912")
#pragma warning(disable:4996)

//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include<iostream>
#include<algorithm>
#include<queue>
#include<string>
#include<vector>
#include<map>
#include<list>
#include<set>
#include<cstring>
#include<ctime>
#include<cassert>
#include<cmath>
#include<limits>
#include<iterator>
#include<functional>
#include<unordered_map>
#include<unordered_set>
#include<stack>
#include<bitset>
#include<complex>

#define all(v) v.begin(), v.end()
#define setv(ar, val) memset(ar, val, sizeof(ar));
#define ll long long int
#define ld long double
#define ull unsigned long long int
#define PI 3.1415926535897932384626433832795
using namespace std;

const int N = 1e5 + 100;
int a[N];
ll dp[N];


int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int n, c;
	scanf("%d%d", &n, &c);

	ll s = 0;
	for (int i = 0; i < n; i++) {
		scanf("%d", &a[i]);
		s += a[i];
	}

	if (c > n) {
		printf("%lld", s);
		return 0;
	}

	
	multiset<int> st;

	for (int i = 0; i < c; i++)
		st.insert(a[i]);

	ll mx = 0;
	for (int i = 0; i + c - 1 < n; i++) {
		dp[i + c - 1] = mx + *st.begin();
		st.erase(st.lower_bound(a[i]));
		st.insert(a[i + c]);
		mx = max(mx, dp[i]);
	}

	for (int i = 0; i < n; i++)
		mx = max(mx, dp[i]);

	printf("%lld", s - mx);






	return 0;
}