#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<int, int>, // change type
//        null_type,
//        less<pair<int, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)(x).size()
#define pb push_back
#define X first
#define Y second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const double PI = 3.14159265358979323846;
const double eps = (1e-7);
int dcmp(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}

const int MAX_N = 5005;
vector<pair<int, int> > adj[MAX_N];
int n, m;

int dp[MAX_N][MAX_N];
int parent[MAX_N][MAX_N];

void print(int u, int k)
{
    if (u == -1)
        return;
    print(parent[u][k], k - 1);
    cout << u + 1 << ' ';
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
    ll T;
    cin >> n >> m >> T;
    rep(i,0,m)
    {
        int u, v;
        int c;
        cin >> u >> v >> c;
        --u; --v;
        adj[u].pb({v, c});
    }
    clr(dp, 0x7F);
    clr(parent, -1);
    dp[0][0] = 0;
    int ans = 0;
    for (int k = 0; k <= m; ++k)
    {
        int cur = k, nxt = k+1;
        for (int u = 0; u < n; ++u) // these 2 inner loops together have complexity do 2m operations in total
        {
            if (u == n - 1 && dp[cur][u] <= T)
                ans = k + 1;
            for (auto ne : adj[u])
            {
                int v = ne.first;
                int c = ne.second;
                /*
                 * if dp[u][k] has minimum distance to u using exactly k edges, then this is valid
                 */
                if (dp[nxt][v] > dp[cur][u] + c && dp[cur][u] <= T)
                {
                    dp[nxt][v] = dp[cur][u] + c;
                    parent[v][k + 1] = u; // yes i reversed the dimensions in parent
                }
            }
        }
    }
    cout << ans << '\n';
    print(n - 1, ans - 1);
    return 0;
}