


#define _USE_MATH_DEFINES
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <random>
#include <cmath>

#define ll long long
#define ld long double
#define mp make_pair
#define pb push_back
#define int long long

using namespace std;

const int INF = 2e9;

struct SegmentTree {
	vector<int> t;
	int n;
	SegmentTree(vector<int> & a, int x) {
		n = x;
		t.resize(n << 2);
		buildTree(1, 0, n, a);
	}

	void buildTree(int v, int l, int r, vector<int> & a) {
		if (l + 1 == r) {
			t[v] = a[l];
			return;
		}

		int m = (r + l) >> 1;
		int vl = v << 1;
		int vr = vl + 1;

		buildTree(vl, l, m, a);
		buildTree(vr, m, r, a);

		t[v] = t[vl] + t[vr];
	}

	int start, end, res;
	int getSumm(int l, int r) {
		start = l;
		end = r + 1;
		res = 0;
		getSummTree(1, 0, n);
		return res;
	}

	void getSummTree(int v, int l, int r) {
		if (start <= l && r <= end) {
			res += t[v];
			return;
		}

		int m = (r + l) >> 1;
		int vl = v << 1;
		int vr = vl + 1;

		if (start < m) getSummTree(vl, l, m);
		if (m < end) getSummTree(vr, m, r);
	}
};

void solve() {
	int q;
	cin >> q;
	vector<int> a(5e6 + 1);
	for (int i = 2; i < a.size(); i++) {
		if (!a[i]) {
			for (int j = i; j < a.size(); j += i) {
				int x = j;
				while (x % i == 0) {
					x /= i;
					a[j]++;
				}
			}
		}
		a[i] += a[i - 1];
	}
	
	for (int i = 0; i < q; i++) {
		int l, r;
		cin >> r >> l;
		int ans = a[r] - a[l];
		cout << ans << '\n';
	}
}

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	/*
	freopen("distance4.in", "r", stdin);
	freopen("distance4.out", "w", stdout);
	*/
	solve();
}