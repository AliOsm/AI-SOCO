#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             2e16
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>


#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())

#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);

const int N = 100005;
const int M = 350;
int n , q;

int ara[N];
deque<int>g[M];
int freq[M][N];
void Rotate(int l,int r)
{
    if(l/M == r/M){
        int seg = l/M;
        int p1 = l % M, p2 = r % M;
        int temp = g[seg][p2];
        g[seg].erase(g[seg].begin() + p2);
        g[seg].insert(g[seg].begin() + p1,temp);
    }else{
        int seg1 = l/M, seg2 = r/M;
        int p1 = l % M, p2 = r % M;
        int ltemp = g[seg1][p1],rtemp = g[seg2][p2];
        g[seg1].insert(g[seg1].begin() + p1,rtemp);freq[seg1][rtemp]++;
        g[seg2].erase(g[seg2].begin() + p2);freq[seg2][rtemp]--;
        for(int i = seg1 + 1;i <= seg2;i++){
            int v = g[i - 1].back();
            g[i - 1].pop_back();freq[i-1][v]--;
            g[i].push_front(v);freq[i][v]++;
        }
    }
}
int query(int l,int r,int k)
{
    int ans = 0;
    if(l/M == r/M){
        int p1 = l % M,p2 = r % M;
        for(int i = p1;i <= p2;i++)if(g[l/M][i] == k)ans++;
    }else{
        int seg1 = l/M, seg2 = r/M;
        int p1 = l % M, p2 = r % M;
        for(int i = p1;i < g[seg1].size();i++)if(g[seg1][i] == k)ans++;
        for(int i = 0;i <= p2;i++)if(g[seg2][i] == k)ans++;
        for(int i = seg1 + 1;i < seg2;i++)ans = ans + freq[i][k];
    }
    return ans;
}
int main()
{
    scanf("%d",&n);
    REP(i,n)scanf("%d",&ara[i]) , g[i/M].push_back(ara[i]) , freq[i/M][ara[i]]++;

    scanf("%d",&q);
    int ans = 0;
    while(q--){
        int tp;
        scanf("%d",&tp);

        if(tp == 2){
            int l , r , k;
            scanf("%d %d %d",&l,&r,&k);
            l = (l + ans - 1) % n + 1;
            r = (r + ans - 1) % n + 1;
            k = (k + ans - 1) % n + 1;
            if(l > r)swap(l,r);
            l = l - 1;r = r - 1;
            ans = query(l,r,k);
            printf("%d\n",ans);
        }else{
            int l , r;
            scanf("%d %d",&l,&r);
            l = (l + ans - 1) % n + 1;
            r = (r + ans - 1) % n + 1;
            if(l > r)swap(l,r);
            l = l - 1;r = r - 1;
            Rotate(l,r);
        }
    }

}

