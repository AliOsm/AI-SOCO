// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second
#define int long long

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

int t, n, m;

signed main() {
  init_ios();
  cin >> t;
  while (t--) {
    cin >> n >> m;
    int ile = n/m;
    if (ile == 0) {
      cout<<"0\n";
      continue;
    }
    VI cykl;
    cykl.PB(m%10);
    int sum = m%10;
    while (cykl[0] != (cykl.back()+m)%10) {
      cykl.PB((cykl.back()+m)%10);
      sum += cykl.back();
    }
    int cale = ile/cykl.size();
    int res = sum*cale;
    ile %= cykl.size();
    for (int i = 1; i <= ile; ++i)
      res += cykl[i-1];
    cout<<res<<"\n";
  }
}