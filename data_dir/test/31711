#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define size(x) (int) x.size()
#define sqr(x) ((x) * (x))

const int maxn = 100005;
const int logn = 18;
const int inf = (int) 1e9 + 5;
const long long mod = (long long) 1e9 + 7;
const long long base = 2204234849;
const long long l_inf = (long long) 4e18;
const long double pi = acos(-1.0);
const long double eps = 1e-12;

int n;
long long a[maxn];
long long p, q = 2;

long long g1[2][2] = { {0, 1}, {2, 1} };
long long g2[2][2] = { {0, 0}, {0, 0} };
long long g3[2][2] = { {-1, 1}, {2, 0} };
long long ans[2][2] = { {1, 0}, {0, 1} };

void binpow(long long pw) {
	long long x = q;
	q = 1;
	while (pw > 0) {
		if (pw & 1ll) {
			for (int i = 0; i < 2; i++) {
				for (int j = 0; j < 2; j++) {
					g2[i][j] = 0;
					for (int k = 0; k < 2; k++)
						g2[i][j] += ans[i][k] * g1[k][j];
					g2[i][j] %= mod;
				}
			}
			for (int i = 0; i < 2; i++)
				for (int j = 0; j < 2; j++)
					ans[i][j] = g2[i][j];

			q = (q * x) % mod;
		}

		pw >>= 1ll;

		for (int i = 0; i < 2; i++) {
			for (int j = 0; j < 2; j++) {
				g2[i][j] = 0;
				for (int k = 0; k < 2; k++)
					g2[i][j] += g1[i][k] * g1[k][j];
				g2[i][j] %= mod;
			}
		}
		for (int i = 0; i < 2; i++)
			for (int j = 0; j < 2; j++)
				g1[i][j] = g2[i][j];

		x = (x * x) % mod;
	}
	for (int i = 0; i < 2; i++) {
		for (int j = 0; j < 2; j++) {
			g1[i][j] = ans[i][j];
			ans[i][j] = (i == j);
		}
	}
}

long long binpow(long long x, long long y) {
	long long res = 1;
	while (y > 0) {
		if (y & 1ll)
			res = (res * x) % mod;
		y >>= 1ll;
		x = (x * x) % mod;
	}
	return res;
}

long long rev(long long a, long long b) {
	return (binpow(b, mod - 2) * a) % mod;
}

int main() {
	ios_base::sync_with_stdio(false);
	cout.precision(20);
	cout << fixed;
	srand(566);

	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i];

	for (int i = 0; i < n; i++)
		binpow(a[i]);


	for (int it = 0; it < 2; it++) {
		for (int i = 0; i < 2; i++) {
			for (int j = 0; j < 2; j++) {
				g2[i][j] = 0;
				for (int k = 0; k < 2; k++)
					g2[i][j] += g1[i][k] * g3[k][j];
				g2[i][j] %= mod;
				if (g2[i][j] < 0)
					g2[i][j] += mod;
			}
		}
		for (int i = 0; i < 2; i++)
			for (int j = 0; j < 2; j++)
				g1[i][j] = g2[i][j];
	}

	p = rev(g1[0][0] + g1[0][1], 4);
	q = rev(q, 2);
	cout << p << '/' << q;

	return 0;
}
