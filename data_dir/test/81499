#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <bitset>
#include <complex>
#include <unordered_map>
#include <unordered_set>
#include <functional>

//#pragma comment(linker, "/STACK:512000000")

using namespace std;

#define pb emplace_back
#define mp make_pair
#define all(a) (a).begin(), (a).end()
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const int infi = 1e9 + 7;
const ll infl = (ll)1e18 + (ll)7;

const ll mod = 1e9 + 7;
ll dp[60];
ll ndp[60];
ll pow1(ll a, ll p) {
    ll ans = 1;
    while (p) {
        if (p & 1LL) {
            ans *= a;
            ans %= mod;
        }
        a *= a;
        a %= mod;
        p >>= 1;
    }
    return ans;
}
ll get_inv(ll a) {
    return pow1(a, mod - 2);
}
ll inv[100];

vector<pll> get_del(ll n) {
    vector<pll> ans;
    for (ll i = 2; i * i <= n; ++i) {
        if (n % i)
            continue;
        pll cur = { i, 0 };
        while (n % i == 0) {
            n /= i;
            cur.second++;
        }
        ans.pb(cur);
    }
    if (n != 1) {
        ans.pb(n, 1);
    }
    return ans;
}

int32_t main() {
    cin.sync_with_stdio(false);
    cin.tie(0);
    //srand(time(NULL));
   // freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    //freopen("customs.in", "r", stdin); freopen("customs.out", "w", stdout);
    forab(i, 1, 100)
        inv[i] = get_inv(i);
    inv[0] = 1;
    ll n;
    int k;
    cin >> n >> k;
    auto del = get_del(n);
    ll ans = 1;
    for (auto p : del) {
        int m = p.second + 1;
        forn(i, m)
            dp[i] = pow1(p.first, i);
        forn(qwe, k) {
            forn(i, m) {
                ndp[i] = 0;
                forn(j, i + 1)
                    ndp[i] += dp[j];
                ndp[i] %= mod;
                ndp[i] *= inv[i + 1];
                ndp[i] %= mod;
            }
            forn(i, m)
                dp[i] = ndp[i];
        }
        ans *= dp[m - 1];
        ans %= mod;
    }
    cout << ans;

    return 0;
}