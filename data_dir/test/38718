#include <bits/stdc++.h>
using namespace std;

int N,M,K, sqrtN;
int arr[100005], pref[100005], L,R, cnt[4000005];
long long tans, ans[100005];

struct Node{
  int l, r, nth;
  inline bool operator < (const Node& a)const{
    return ((l/sqrtN==a.l/sqrtN) ? (r<a.r) : (l/sqrtN<a.l/sqrtN));
  }
}query[100005];


#define tans_diff(x) tans -= (long long)cnt[pref[x]]*(((pref[x]^K)==pref[x])?(cnt[pref[x]]-1):cnt[pref[x]^K]*2)/2
#define tans_addi(x) tans += (long long)cnt[pref[x]]*(((pref[x]^K)==pref[x])?(cnt[pref[x]]-1):cnt[pref[x]^K]*2)/2
inline long long cal(int l, int r){
  while(L<l){   // remove L
    tans_diff(L);
    --cnt[pref[L]];
    tans_addi(L);
    ++L;
  }
  while(L>l){   // add L-1
    --L;
    tans_diff(L);
    ++cnt[pref[L]];
    tans_addi(L);
  }
  while(R>r){   // remove R
    tans_diff(R);
    --cnt[pref[R]];
    tans_addi(R);
    --R;
  }
  while(R<r){   // add R+1
    ++R;
    tans_diff(R);
    ++cnt[pref[R]];
    tans_addi(R);
  }
  return tans;
}
void init(){
  scanf("%d %d %d", &N, &M, &K);
  sqrtN = sqrt(N);
  for(int i=0;i<N;++i) scanf("%d", arr+i+1);      // 1-base same as statement
  for(int i=0;i<M;++i) scanf("%d %d", &(query[i].l), &(query[i].r)), --query[i].l, query[i].nth=i;
  for(int i=0;i<N;++i) pref[i+1] = arr[i+1] ^ pref[i];
  L=1, R=0;      // [L,R]
}
void sol(){
  sort(query, query+M);
  for(int i=0;i<M;++i){
    ans[query[i].nth] = cal(query[i].l, query[i].r);
  }
  for(int i=0;i<M;++i){
    printf("%lld\n", ans[i]);
  }
}

int main(){
  init();
  sol();
}
