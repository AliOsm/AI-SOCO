#include <iostream>
#include <climits>
#include <algorithm>

using namespace std;
const int oo = numeric_limits<int>::max();
int a[10];
int n;

int move(int at, int to, string& s) {
	if (at == to) {
		return 0;
	}
	if (at < to) {
		swap(s[at], s[at + 1]);
		return 1 + move(at + 1, to, s);
	} else {
		swap(s[at - 1], s[at]);
		return 1 + move(at - 1, to, s);
	}
}

int count(int x, int y, string cc) {
	int r = 0;
	for(int i = n - 1; i >= 0; --i) {
		if (cc[i] - '0' == x) {
			r += move(i, n - 1, cc);
			break;
		}
	}
	for(int i = n - 2; i >= 0; --i) {
		if (cc[i] - '0' == y) {
			r += move(i, n - 2, cc);
			break;
		}
	}
	if (cc[0] == '0') {
		for(int i = 1; i < n; ++i) {
			if (cc[i] != '0') {
				r += move(i, 0, cc);
				return r;
			}
		}
	} else {
		return r;
	}
	return oo;
}

int main() {
	string s;
	cin >> s;
	n = s.size();
	for(int i = 0; i < s.size(); ++i) {
		++a[s[i] - '0'];
	}

	int ret = oo;
	if (a[0] > 1) {
		ret = min(ret, count(0, 0, s));
	}

	if (a[2] > 0 && a[5] > 0) {
		ret = min(ret, count(5, 2, s));
	}
	
	if (a[0] > 0 && a[5] > 0) {
		ret = min(ret, count(0, 5, s));
	}

	if (a[5] > 0 && a[7] > 0) {
		ret = min(ret, count(5, 7, s));
	}

	cout << (ret == oo ? -1 : ret) << endl;

	return 0;
}
