/*  */
#include <iostream>
#include <sstream>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <deque>
#include <bitset>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
#include <functional>
#include <iterator>
#include <iomanip>
using namespace std;
//#pragma comment(linker,"/STACK:102400000,1024000")

#define sti				set<int>
#define stpii			set<pair<int, int> >
#define mpii			map<int,int>
#define vi				vector<int>
#define pii				pair<int,int>
#define vpii			vector<pair<int,int> >
#define rep(i, a, n) 	for (int i=a;i<n;++i)
#define per(i, a, n) 	for (int i=n-1;i>=a;--i)
#define clr				clear
#define pb 				push_back
#define mp 				make_pair
#define fir				first
#define sec				second
#define all(x) 			(x).begin(),(x).end()
#define SZ(x) 			((int)(x).size())
#define lson			l, mid, rt<<1
#define rson			mid+1, r, rt<<1|1
#define getBits(x)		__builtin_popcount(x)
#define getBitIdx(x)	__builtin_ffs(x)

typedef long long LL;
struct node_t {
	int c;
	int l, r;
	
	node_t(int c=0, int l=0, int r=0):c(c),l(l),r(r) {}
};

const int maxn = 2e6;
const int rt = 1;
node_t nd[maxn];
multiset<LL> st;
int l = 2;

inline int newNode() {
	return l++;
}

void Insert(const vi& vc) {
	int sz = vc.size();
	int p = rt;
	
	rep(i, 0, sz) {
		++nd[p].c;
		if (vc[i]) {
			if (!nd[p].r)
				nd[p].r = newNode();
			p = nd[p].r;
		} else {
			if (!nd[p].l)
				nd[p].l = newNode();
			p = nd[p].l;
		}
	}
	++nd[p].c;
}

int Find(const vi& vc) {
	int sz = vc.size();
	int p = rt;
	
	rep(i, 0, sz) {
		if (vc[i]) {
			p = nd[p].r;
		} else {
			p = nd[p].l;
		}
		if (p == 0) return 0;
	}
	int lsz = nd[nd[p].l].c;
	int rsz = nd[nd[p].r].c;
	
	return lsz+rsz < nd[p].c ? nd[p].c:0;
}

void Erase(const vi& vc) {
	int sz = vc.size();
	int p = rt;
	
	rep(i, 0, sz) {
		--nd[p].c;
		if (vc[i]) {
			p = nd[p].r;
		} else {
			p = nd[p].l;
		}
	}
	--nd[p].c;
}

LL toLL(char *s) {
	LL ret = 0;
	while (*s) {
		ret = ret * 10 + *s - '0';
		++s;
	}
	return ret;
}

int main() {
	cin.tie(0);
	ios::sync_with_stdio(false);
	#ifndef ONLINE_JUDGE
		freopen("data.in", "r", stdin);
		freopen("data.out", "w", stdout);
	#endif
	
	int n, ans;
	char op[4];
	char ops[24];
	vi vtmp;
	
	scanf("%d", &n);
	rep(i, 0, n) {
		scanf("%s %s", op, ops);
		vtmp.clear();
		if (op[0] != '?') {
			int len = strlen(ops);
			per(j, 0, len)
				vtmp.emplace_back((ops[j] - '0') & 1);
		} else {
			int len = strlen(ops);
			per(j, 0, len)
				vtmp.emplace_back(ops[j] - '0');
		}
		{
			int sz = vtmp.size();
			while (sz++ < 18) {
				vtmp.emplace_back(0);
			}
		}
		
		if (op[0] == '+') {
			Insert(vtmp);
			st.insert(toLL(ops));
		} else if (op[0] == '-') {
			LL tmp = toLL(ops);
			if (st.count(tmp)) {
				Erase(vtmp);
				auto iter = st.find(tmp);
				st.erase(iter);
			}
		} else {
			ans = Find(vtmp);
			printf("%d\n", ans);
		}
	}
	
	#ifndef ONLINE_JUDGE
		printf("time = %ldms.\n", clock());
	#endif
	
	return 0;
}
