#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

//#define PB push_back
#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template < typename F, typename S > ostream& operator << ( ostream& os, const pair< F, S > & p ) { return os << "(" << p.first << ", " << p.second << ")"; }
template < typename T > ostream &operator << ( ostream & os, const vector< T > &v ) { os << "{";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "}";}
template < typename T >ostream &operator << ( ostream & os, const set< T > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "]";}
template < typename T >ostream &operator << ( ostream & os, const multiset< T > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "]";}
template < typename F, typename S >ostream &operator << ( ostream & os, const map< F, S > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << it -> first << " = " << it -> second ;}return os << "]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
clock_t tStart = clock();
#define timeStamp dbg("Execution Time: ", (double)(clock() - tStart)/CLOCKS_PER_SEC)
void faltu () {cerr << endl;}
template <typename T>void faltu( T a[], int n ) {for(int i = 0; i < n; ++i) cerr << a[i] << ' ';cerr << endl;}
template <typename T, typename ... hello>
void faltu( T arg, const hello &... rest) {cerr << arg << ' ';faltu(rest...);}
//#else
//#define dbg(args...)

const int mx = 1e5+5;
vii adjlist[mx];
int n;
int L[mx], U[mx];

bool func( int num )
{
    while( num != 0 ) {
        if( (num%10 != 4) && (num%10 != 7) ) return 0;
        num /= 10;
    }
    return 1;
}

void dfs1( int u, int par )
{
    int l = adjlist[u].size();
    for( int i = 0; i < l; ++i ) {
        pii v = adjlist[u][i];
        if( v.F == par ) continue;
        dfs1( v.F, u );
        if( v.S ) L[u] += 1 + U[v.F] + L[v.F];
        else {
            L[u] += L[v.F];
            U[u] += 1 + U[v.F];
        }
    }
}

void dfs2( int u, int par )
{
    int l = adjlist[u].size();
    for( int i = 0; i < l; ++i ) {
        pii v = adjlist[u][i];
        if( v.F == par ) continue;
        if( v.S ) {
            L[v.F] += (L[u] - L[v.F] - U[v.F]) + U[u];
        }
        else {
            L[v.F] += (L[u] - L[v.F]);
            U[v.F] += U[u] - U[v.F];
        }
        dfs2( v.F, u );
    }
}

int main()
{
    optimize();
    cin >> n;
    for( int i = 0, u, v, w; i < n-1; ++i ) {
        cin >> u >> v >> w;
        adjlist[u].PB( MP(v, func(w)) );
        adjlist[v].PB( MP(u, func(w)) );
    }
    dfs1(1, 0);
    //for( int i = 1; i <= n; ++i ) cout << L[i] << " "; cout << endl;
    dfs2(1, 0);
    //for( int i = 1; i <= n; ++i ) cout << L[i] << " "; cout << endl;
    ll ans = 0;
    for( int i = 1; i <= n; ++i ) ans += (ll)L[i]*(ll)(L[i]-1);
    cout << ans;
}



























