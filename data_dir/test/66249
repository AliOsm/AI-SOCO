//int _main(){//ot
//	int n;
//	cin >> n;
//	vi arr(n);
//	cin >> arr;
//	int a = count(all(arr),1);
//	int b = count(all(arr),2);
//	int c = count(all(arr),3);
//	int d = count(all(arr),4);
//	int ans = d;
//	ans += c;
//	a -= min(c,a);
//	ans += (a+b*2+3)/4;
//	return ans;
//}
//
// ================================================ 
// ^^^	ABOVE is what I wrote in my editor	^^^
// ------------------------------------------------ 
// vvv	BELOW is automatically generated 	vvv
// ================================================ 
#include <iomanip>
#include <algorithm> //#queue# #include <queue>
#include <vector>
#include <iostream>
#define all(v) (v).begin(),(v).end()
using namespace std;
typedef vector<int> vi;
template<typename IT>
ostream &print(IT b, IT e, string sep = " ", ostream &stream = cout){
	for(IT it = b; it != e; ++it){
		stream << *it;
		if(it+1 != e) stream << sep;
	} 
	return stream;
}
//template<typename T>
//ostream &print(vector<T> &arr, string sep = " ", ostream &stream = cout){
	//print(all(arr),sep,stream);
	//return stream << '\n';
//}
template<typename IT> istream &read(IT b, IT e, istream &stream = cin){
	for(IT it = b; it != e; ++it) stream >> *it; return stream;
}
template<typename T> ostream &operator<<(ostream &stream, vector<vector<T> > &t){
	stream << "[";
	print(all(t),"],[",stream);
	stream << "]";
	return stream;
}
template<typename T> ostream &operator<<(ostream &stream, vector<T> &t){
	return print(all(t)," ",stream);
}
template<typename T> istream &operator>>(istream &stream, vector<T> &t){
	return read(all(t),stream);
}
template <typename T> 
void print(T x){
	cout << x << '\n';
}
template<typename T>
T _main();
const int MOD = 1e9+7;
const int N = 5e5+5;
int _main(){//ot
	int n;
	cin >> n;
	vi arr(n);
	cin >> arr;
	int a = count(all(arr),1);
	int b = count(all(arr),2);
	int c = count(all(arr),3);
	int d = count(all(arr),4);
	int ans = d;
	ans += c;
	a -= min(c,a);
	ans += (a+b*2+3)/4;
	return ans;
}

int main(){
	ios_base::sync_with_stdio(false); cin.tie(0);
	cout << fixed << setprecision(12);
	cout << _main() << '\n';
}
