//#define debug
#define usetr1

/*
 * temp.cpp
 *
 *  Created on: 2012-7-18
 *      Author: BSBandme
 */
//#pragma comment(linker, "/STACK:1024000000,1024000000")

#include <iostream>
#include <fstream>
#include <string.h>
#include <cstdio>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <cassert>
#include <list>
#include <iomanip>
#include <math.h>
#include <deque>
#include <utility>
#include <map>
#include <set>
#include <bitset>
#include <numeric>
#include <climits>
#include <cctype>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <functional>
#include <sstream>

using namespace std;

#ifdef usetr1
#include <tr1/unordered_map>
#include <tr1/unordered_set>
using namespace tr1;
#endif

#ifdef usepb_ds
#include <ext/pb_ds/priority_queue.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
// binomial_heap_tag, rc_binomial_heap_tag, thin_heap_tag, binary_heap_tag
typedef __gnu_pbds::priority_queue<int, greater<int>, pairing_heap_tag> pq_type;
// splay_tree_tag, ov_tree_tag
typedef tree <int, null_type, less <int>, rb_tree_tag, tree_order_statistics_node_update> tree_type;
#endif

#define mpr make_pair
typedef unsigned int ui;
typedef unsigned long long ull;
typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <double, double> pdd;
typedef vector <int> vi;
typedef vector <ll> vll;
typedef vector <double> vd;
typedef vector <string> vs;
typedef map <string, int> mpsi;
typedef map <double, int> mpdi;
typedef map <int, int> mpii;

const double pi = acos(0.0) * 2.0;
const long double eps = 1e-10;
const int step[8][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}, {-1, 1}, {1, 1}, {1, -1}, {-1, -1}};

template <class T> inline T abs1(T a) {return a < 0 ? -a : a;}

template <class T> inline T max1(T a, T b) { return b < a ? a : b; }
template <class T> inline T max1(T a, T b, T c) { return max1(max1(a, b), c); }
template <class T> inline T max1(T a, T b, T c, T d) { return max1(max1(a, b, c), d); }
template <class T> inline T max1(T a, T b, T c, T d, T e) { return max1(max1(a, b, c, d), e); }
template <class T> inline T min1(T a, T b) { return a < b ? a : b; }
template <class T> inline T min1(T a, T b, T c) { return min1(min1(a, b), c); }
template <class T> inline T min1(T a, T b, T c, T d) { return min1(min1(a, b, c), d); }
template <class T> inline T min1(T a, T b, T c, T d, T e) { return min1(min1(a, b, c, d), e); }

inline int jud(double a, double b){
	if(abs(a) < eps && abs(b) < eps) return 0;
	else if(abs1(a - b) / abs1(a) < eps) return 0;
	if(a < b) return -1;
	return 1;
}
template <typename t> inline int jud(t a, t b){
	if(a < b) return -1;
	if(a == b) return 0;
	return 1;
}

// f_lb == 1代表返回相同的一串的左边界，f_small == 1代表返回如果没有寻找的值返回小的数
template <typename it, typename t1>
inline int find(t1 val, it a, int na, bool f_small = 1, bool f_lb = 1){
	int be = 0, en = na - 1;
	if(*a <= *(a + na - 1)){
		if(f_lb == 0) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != 1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != -1) en = mid;
			else be = mid + 1;
		}
		if(f_small && jud(*(a + be), val) == 1) be--;
		if(!f_small && jud(*(a + be), val) == -1) be++;
	} else {
		if(f_lb) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != -1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != 1) en = mid;
			else be = mid + 1;
		}
		if(!f_small && jud(*(a + be), val) == -1) be--;
		if(f_small && jud(*(a + be), val) == 1) be++;
	}
	return be;
}

template <class T> inline T lowb(T num) {return num & (-num); }
inline int bitnum(ui nValue) { return __builtin_popcount(nValue); }
inline int bitnum(int nValue) { return __builtin_popcount(nValue); }
inline int bitnum(ull nValue) { return __builtin_popcount(nValue) + __builtin_popcount(nValue >> 32); }
inline int bitnum(ll nValue) { return __builtin_popcount(nValue) + __builtin_popcount(nValue >> 32); }
inline int bitmaxl(ui a) { if(a == 0) return 0; return 32 - __builtin_clz(a); }
inline int bitmaxl(int a) { if(a == 0) return 0; return 32 - __builtin_clz(a); }
inline int bitmaxl(ull a) { int temp = a >> 32; if(temp) return 32 - __builtin_clz(temp) + 32; return bitmaxl(int(a)); }
inline int bitmaxl(ll a) { int temp = a >> 32; if(temp) return 32 - __builtin_clz(temp) + 32; return bitmaxl(int(a)); }

long long pow(long long n, long long m, long long mod = 0){
	if(m < 0) return 0;
	long long ans = 1;
	long long k = n;
	while(m){
		if(m & 1) {
			ans *= k;
			if(mod) ans %= mod;
		}
		k *= k;
		if(mod) k %= mod;
		m >>= 1;
	}
	return ans;
}

#define  MOD 1000000007
template <class t1, class t2>
inline void add(t1 &a, t2 b, int mod = -1) {
	if(mod == -1) mod = MOD;
	a += b;
	while(a >= mod) a -= mod;
	while(a < 0) a += mod;
}
template <class t>
void output1(t arr) {
	for(int i = 0; i < (int)arr.size(); i++)
		cerr << arr[i] << ' ';
	cerr << endl;
}
template <class t>
void output2(t arr) {
	for(int i = 0; i < (int)arr.size(); i++)
		output1(arr[i]);
}

//....................密..........封..........线..........下..........禁..........止..........hack...............................................


const int maxn = 1000100;
struct node {
	int fa, left, right;
	node(int rfa = -1, int rleft = -1, int rright = -1) :
		fa(rfa), left(rleft), right(rright) {}
} tree[maxn];
int fa[maxn], sz[maxn];
int n, ncond;
bool flag;
int ans[maxn], lans;

vector <pii> cond[maxn];

int getfa(int no) {
	if(fa[no] == -1) return no;
	return fa[no] = getfa(fa[no]);
}

int uni(int a, int b) {
	a = getfa(a), b = getfa(b);
	if(a == b) return 0;
	sz[a] += sz[b];
	fa[b] = a;
	return 1;
}

void dfs(int no) {
	if(no == -1) return;
	dfs(tree[no].left);
	ans[lans++] = no;
	dfs(tree[no].right);
}
int main() {
	ios_base::sync_with_stdio(0);
	#ifdef debug //......................................................................................................
	freopen("input.txt", "r", stdin);
	int __size__ = 256 << 20; // 256MB
	char *__p__ = (char*)malloc(__size__) + __size__;
	__asm__("movl %0, %%esp\n" :: "r"(__p__));
	#endif //...........................................................................................................

	flag = 1;
	scanf("%d%d", &n, &ncond);
	for (int j = 0; j < ncond; j++) {
		int a, b;
		char str[10];
		scanf("%d%d%s", &a, &b, str);
		a--;
		b--;
		if (a >= b)
			flag = 0;
		if (str[0] == 'L')
			cond[a].push_back(mpr(b, 0));
		else
			cond[a].push_back(mpr(b, 1));
	}

	memset(fa, -1, sizeof(fa));
	for (int i = n - 1; i >= 0 && flag; i--) {
		if(cond[i].size() == 0) continue;
		sort(cond[i].begin(), cond[i].end());
		int minv = i, maxv = n + 1;
		for(int j = 0; j < (int)cond[i].size(); j++) {
			int no = getfa(cond[i][j].first);
			if(cond[i][j].second) maxv = min(maxv, no);
			else minv = max(minv, no);
		}
		if(minv >= maxv) {
			flag = 0;
			break;
		}
		int p = getfa(cond[i][cond[i].size() - 1].first);
		for(; p > maxv; ) {
			tree[p - 1].left = p;
			tree[p].fa = p - 1;
			p = getfa(p - 1);
		}
		if(maxv != n + 1) {
			tree[i].right = maxv;
			tree[maxv].fa = i;
		}
		p = getfa(min(maxv - 1, n - 1));
		if(maxv > n) p = minv;
		for(; p > i; ) {
			tree[p - 1].left = p;
			tree[p].fa = p - 1;
			p = getfa(p - 1);
		}
		if(maxv != i + 1) {
			tree[i].left = i + 1;
			tree[i + 1].fa = i;
		}
		for(p = getfa(cond[i][cond[i].size() - 1].first); p > i; p = getfa(p - 1)) {
			uni(p - 1, p);
		}
	}
	for(int i = getfa(n - 1); i != 0; i = getfa(i - 1)) {
		tree[i - 1].left = i;
		tree[i].fa = i - 1;
		uni(i - 1, i);
	}
	if(!flag) {
		puts("IMPOSSIBLE");
		return 0;
	}
	dfs(0);
	for(int i = 0; i < n; i++)
		printf("%d ", ans[i] + 1);
	puts("");

    return 0;
}
