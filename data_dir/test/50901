//satyaki3794
#include <bits/stdc++.h>
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define LEFT(n) (2*(n))
#define RIGHT(n) (2*(n)+1)
 
using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;

ll pwr(ll base, ll p, ll mod = MOD){
ll ans = 1;while(p){if(p&1)ans=(ans*base)%mod;base=(base*base)%mod;p/=2;}return ans;
}
 

ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}


const int N = 100002;
int n, e, tot[N], allowed[N];
vector<ii> edge_list;
vector<int> adj[N];
bool bad[N], done[N];


bool possible(double mid){

	queue<int> qq;
	for(int i=1;i<=n;i++){
		tot[i] = allowed[i] = 0;
		done[i] = false;
		if(bad[i]){
			done[i] = true;
			qq.push(i);
		}
	}

	for(auto it : edge_list){
		tot[it.ff]++;
		allowed[it.ff]++;
		tot[it.ss]++;
		allowed[it.ss]++;
	}

	while(!qq.empty()){

		int v = qq.front();
		qq.pop();

		for(auto it : adj[v]){
			if(done[it])	continue;
			allowed[it]--;
			if(1.0*allowed[it]/tot[it] < mid){
				done[it] = true;
				qq.push(it);
			}
		}
	}

	for(int i=1;i<=n;i++)
		if(!done[i])
			return true;
	return false;
}



int main(){

    // ios_base::sync_with_stdio(0);
    // cin.tie(0);

	int sz;
	scanf("%d%d%d", &n, &e, &sz);
	while(sz--){
		int a;
		scanf("%d", &a);
		bad[a] = true;
	}

	edge_list.resize(e);
	for(int i=0;i<e;i++){
		scanf("%d%d", &edge_list[i].ff, &edge_list[i].ss);
		adj[edge_list[i].ff].pb(edge_list[i].ss);
		adj[edge_list[i].ss].pb(edge_list[i].ff);
	}

	double lo = 0, hi = 1, ans = 0;
	for(int iter=0;iter<100;iter++){
		double mid = (lo + hi)/2;
		if(possible(mid)){
			ans = mid;
			lo = mid;
		}
		else{
			hi = mid;
		}
	}

	possible(ans);
	vector<int> vertices;
	for(int i=1;i<=n;i++)
		if(!done[i])
			vertices.pb(i);

// cout<<ans<<endl;

	printf("%d\n", (int)vertices.size());
	for(auto it : vertices)
		printf("%d ", it);
    return 0;
}








