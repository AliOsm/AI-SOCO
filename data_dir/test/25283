#include<bits/stdc++.h>
#define int long long
using namespace std;
const int N = 2e5 + 10 , INF = 1e16 + 10;
int s[N] , a[N] , mx[N] , res = -INF; 
bool ok = false;
vector < int > edges[N];
int dfs(int x , int p){
      s[x] = a[x];
      for(int i : edges[x]){
            if(i != p){
                  s[x] += dfs(i , x);
                  mx[x] = max(mx[x] , mx[i]); 
            }
      }
      mx[x] = max(mx[x] , s[x]);
      return s[x];
}              
int rec(int x , int p){
      int res = -INF;
      priority_queue < int > pp;
      for(int i : edges[x]){
            if(i != p){
                  res = max(res , rec(i , x));
                  pp.push(-mx[i]);
                  if(pp.size() > 2) pp.pop();
            }
      }
      if(pp.size() == 2){
            int k = -pp.top(); pp.pop();
            k -= pp.top(); 
            res = max(res , k);
      }
      return res;
}
main(){
      memset(mx , -INF , sizeof(mx));
      int n;
      cin >> n;
      for(int i = 1; i <= n; i ++) cin >> a[i];
      for(int i = 1; i < n; i ++){
            int x , y;
            cin >> x >> y;
            edges[x].push_back(y);
            edges[y].push_back(x);
      }
      dfs(1 , 0); 
      res = rec(1 , 0);
      if(res == -INF){
            puts("Impossible"); return 0;
      }
      cout << res;
}