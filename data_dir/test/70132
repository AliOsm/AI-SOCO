#include <cstdio>
#include <algorithm>
using namespace std;
typedef long long ll;

int PL, PR, VL, VR, K, sz = 0;
int A[3000];

void go(int idx, int val, int d)
{
    if (idx == d)
        A[sz++] = val;
    else
    {
        go(idx + 1, 10*val + 4, d);
        go(idx + 1, 10*val + 7, d);
    }
}

int intersection(int a, int b, int c, int d)
{
    if (a > c)
    {
        swap(a, c);
        swap(b, d);
    }
    if (b < c)
        return 0;
    return min(b, d) - max(a, c) + 1;
}

int main()
{
    scanf("%d %d %d %d %d", &PL, &PR, &VL, &VR, &K);

    for (int d = 1; d <= 9; d++) //num digits
        go(0, 0, d);

    ll sum = 0;
    for (int i = 0; i + K <= sz; i++)
    {
        int left = (i == 0) ? 1 : (A[i - 1] + 1);
        int right = (i + K == sz) ? (1<<30) : (A[i + K] - 1);
        sum += (ll)intersection(left, A[i], PL, PR)*intersection(A[i + K - 1], right, VL, VR);
        sum += (ll)intersection(left, A[i], VL, VR)*intersection(A[i + K - 1], right, PL, PR);
        if (K == 1)
            sum -= (ll)intersection(A[i], A[i], PL, PR)*intersection(A[i], A[i], VL, VR);
    }

    printf("%.10f\n", 1.0*sum/(PR - PL + 1)/(VR - VL + 1));

    return 0;
}
