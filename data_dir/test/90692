/*
    TOP GUN: MAVERICK!!
                                */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli mod=1e9+7.;   
lli INF=1e17;
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,y,k,m;
const double pi1=3.14159265358979323846;
//unordered_map<pair<ll,lli>,lli> mp;
lli me(lli a,lli b,lli M)
{
    if(b==0)
    return 1;
    else if(b%2==0)
    return me((a*a)%M,b/2,M);
    else
    return (a%M*me((a*a)%M,(b-1)/2,M)%M)%M;
}
lli mI(lli a,lli m)
{
    return me(a,m-2,m);
}
//lli tot=0;
vector<lli> pf(string s) {
    int n = (int)s.length();
    vector<lli> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}
struct edge
{
    lli sum;
    lli freqbit[30];
};
lli s[1000005];
lli a[200005];
lli lzy[1000005];
void build(lli id,lli l,lli r)
{
    if(r-l<2)
    {
        s[id]=a[l+1];
        return;
    }
    lli mid=(l+r)/2ll;
    build(2*id,l,mid);
    build(2*id+1,mid,r);
    s[id]=min(s[2*id],s[2*id+1]);
}
void upd(lli id,lli l,lli r,lli v)
{
    s[id]+=v;
    lzy[id]+=v;
}
void shift(lli id,lli l,lli r)
{
    lli mid=(l+r)/2ll;
    upd(2*id,l,mid,lzy[id]);
    upd(2*id+1,mid,r,lzy[id]);
    lzy[id]=0;
}
void inc(lli x,lli y,lli id,lli l,lli r,lli val)
{
    if(x>=r||y<=l)
    return;
    if(l>=x&&r<=y)
    {
        upd(id,l,r,val);
        return;
    }
    lli mid=(l+r)/2ll;
    shift(id,l,r);
    inc(x,y,2*id,l,mid,val);
    inc(x,y,2*id+1,mid,r,val);
    s[id]=min(s[2*id],s[2*id+1]);
}
lli rmq(lli x,lli y,lli id,lli l,lli r)
{
     if(x>=r||y<=l)
      return 1e15;
    if(l>=x&&r<=y)
    {
        return s[id];
    }
    lli mid=(l+r)/2ll;
    shift(id,l,r);
    return min(rmq(x,y,2*id,l,mid),rmq(x,y,2*id+1,mid,r));
}
lli mk[1005][150];
lli subArraySum(lli arr[], lli n, lli sum) 
{ 
    /* Initialize curr_sum as value of first element 
       and starting point as 0 */
    lli curr_sum = arr[0], start = 0, i; 
  
    /* Add elements one by one to curr_sum and if the curr_sum exceeds the 
       sum, then remove starting element */
    for (i = 1; i <= n; i++) 
    { 
        // If curr_sum exceeds the sum, then remove the starting elements 
        while (curr_sum > sum && start < i-1) 
        { 
            curr_sum = curr_sum - arr[start]; 
            start++; 
        } 
  
        // If curr_sum becomes equal to sum, then return true 
        if (curr_sum == sum) 
        { 
            //printf ("Sum found between indexes %d and %d", start, i-1); 
            return 1; 
        } 
  
        // Add this element to curr_sum 
        if (i < n) 
          curr_sum = curr_sum + arr[i]; 
    } 
  
    // If we reach here, then no subarray 
    return 0; 
} 
int main()
{
    ios_base::sync_with_stdio(0);
    cin>>n;
    lli a[n+1];
    lli s=0;
    for(int i=1;i<=n;i++)
    cin>>a[i];
    sort(a+1,a+n+1);
    for(int i=1;i<=n;i++)
    s+=a[i];
    if(s%2||a[n]>s-a[n])
    cout<<"NO";
    else
    cout<<"YES";
}