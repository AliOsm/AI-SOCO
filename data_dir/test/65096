# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

# include <stdio.h>
# include <bits/stdc++.h>


#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace __gnu_pbds;
using namespace std;
 
typedef
tree<pair<int,int>,null_type,less<pair<int,int>>,rb_tree_tag, tree_order_statistics_node_update> ordered_set;

inline bool isvowel (char c) {
	c = tolower(c);
    if (c == 'a' || c == 'e' || c == 'i' || c == 'y' || c == 'o' || c == 'u') return 1;
    return 0;
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 6e5 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, m, k;
int pv[N];

int o[N];
int to[N];
int h[N];
int deg[N];
int K;
int sz[N];

inline void add_edge (int a, int b) {
	deg[a] ++, h[++ K] = o[a], o[a] = K, to[K] = b;
}

bool bad (int v, int pr = 0, int dist = 0) {
	if (pv[dist] > 0 && pv[dist] != deg[v]) {
		return 1;
	}
	pv[dist] = deg[v];
	for (int i = o[v]; i > 0; i = h[i]) if (to[i] != pr) {
		if (bad(to[i], v, dist + 1)) return 1;
	}
	return 0;
}

inline bool good (int v) {
	for (int i = 0; i <= n; i ++) pv[i] = 0;

	if (!bad(v)) return 1;
	return 0;
}

int ans = inf, root;
void calc (int v, int pr = 0) {
	sz[v] = 1;
	int mx = 0;
	for (int i = o[v]; i > 0; i = h[i]) if (to[i] != pr) {
		 calc (to[i], v);
		 sz[v] += sz[to[i]];
		 mx = max(mx, sz[to[i]]); 
	}
	mx	= max(mx, n - sz[v]);
	if (mx < ans) {
		ans = mx;
		root = v;
	}
}

int has[N];
void go (int v, int pr = 0, int dist = 0) {
	for (int i = o[v]; i > 0; i = h[i]) if (to[i] != pr) {
		go(to[i], v, dist + 1);
	}
	if (deg[v] == 1) has[dist] = v;
} 

inline int rd(){
    int x=0,fl=1;char ch=getchar();
    for (;ch<48||ch>57;ch=getchar())if(ch=='-')fl=-1;
    for (;48<=ch&&ch<=57;ch=getchar())x=(x<<3)+(x<<1)+(ch^48);
    return x*fl;
}

int main () {
	n = rd();
	for (int i = 1, l, r; i < n; i ++) {
		l = rd(), r = rd();
		add_edge (l, r);
		add_edge (r, l);
	}

	calc(1);
	if (good(root)) {
		printf("%d\n", root);
		exit(0);
	}
	go(root);
	for (int i = 0; i < n; i ++) if (has[i]) {
		
		if (good(has[i])) {
			printf("%d\n", has[i]);
			exit(0);
		}
		
	}
	puts("-1");
	

	return Accepted;
}

// B...a