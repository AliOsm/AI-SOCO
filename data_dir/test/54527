#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int) 1.01e9;
const ld EPS = 1e-9;

void precalc() {
}

struct Point {
  int x, y;

  int read() {
    int tx, ty;
    if (scanf("%d%d", &tx, &ty) < 2) {
      return 0;
    }
    x = tx + ty, y = tx - ty;
    return 1;
  }

  Point() {}
  Point(int _x, int _y) : x(_x), y(_y) {}
};

const int maxn = (int) 2e3 + 10;
int ns[2];
Point ps[2][maxn];

bool read() {
  if (scanf("%d%d", &ns[0], &ns[1]) < 2) {
    return 0;
  }
  for (int it = 0; it < 2; ++it) {
    for (int i = 0; i < ns[it]; ++i) {
      assert(ps[it][i].read());
    }
  }
  return 1;
}

struct Segment {
  int x;
  int l, r;

  Segment() {}
  Segment(int _x, int _l, int _r) : x(_x), l(_l), r(_r) {}

  inline bool operator < (const Segment &s) const {
    if (x != s.x) {
      return x < s.x;
    }
    return l < s.l;
  }
};

bool intersect(const Segment &firstc, const Segment &secondc) {
  return secondc.l <= firstc.x && firstc.x <= secondc.r && 
         firstc.l <= secondc.x && secondc.x <= firstc.r;
}

void buildSegms(int n, Point *ps, int type, Segment *ans, int &res, int T) {
  res = 0;
  for (int i = 0; i < n; ++i) {
    int x = ps[i].x, y = ps[i].y;
    if (type) {
      swap(x, y);
    }
    ans[res++] = Segment(x, y - 2 * T, y + 2 * T);
  }
  for (int i = 0; i < res - 1; ++i) {
    assert(!(ans[i + 1] < ans[i]));
  }

  int cnt = res;
  res = 0;
  for (int i = 0; i < cnt;) {
    int i0 = i;

    while (i < cnt && ans[i].x == ans[i0].x) {
      if (i == i0 || ans[res - 1].r < ans[i].l) {
        ans[res++] = ans[i];
      } else {
        ans[res - 1].r = max(ans[res - 1].r, ans[i].r);
      }
      ++i;
    }
  }
}

inline bool compX(const Point &p1, const Point &p2) {
  if (p1.x != p2.x) {
    return p1.x < p2.x;
  }
  return p1.y < p2.y;
}

inline bool compY(const Point &p1, const Point &p2) {
  if (p1.y != p2.y) {
    return p1.y < p2.y;
  }
  return p1.x < p2.x;
}

Segment qs[2][maxn];

int tmp[maxn];

int d[maxn][maxn];

void solve() {
  sort(ps[0], ps[0] + ns[0], compX);
  sort(ps[1], ps[1] + ns[1], compY);
  const int rINF = (int) 3.01e6;
  int left = 0, right = rINF;
  while (left + 1 < right) {
    int mid = (left + right) / 2;

    int cnt[2];
    buildSegms(ns[0], ps[0], 0, qs[0], cnt[0], mid);
    buildSegms(ns[1], ps[1], 1, qs[1], cnt[1], mid);
    for (int i = 0; i < cnt[1]; ++i) {
      for (int j = 0; j < cnt[1]; ++j) {
        d[i][j] = 0;
      }
    }
    bool ok = 0;
    for (int k = 0; !ok && k < cnt[0]; ++k) {
      int ccnt = 0;
      for (int i = 0; i < cnt[1]; ++i) {
        if (intersect(qs[0][k], qs[1][i])) {
          tmp[ccnt++] = i;
        }
      }
      for (int i = 0; !ok && i < ccnt; ++i) {
        for (int j = i + 1; j < ccnt; ++j) {
          int id1 = tmp[i], id2 = tmp[j];
          if (d[id1][id2]) {
            ok = 1;
            break;
          }
          d[id1][id2] += 1;
        }
      }
    }
    if (ok) {
      right = mid;
    } else {
      left = mid;
    }
  }
  if (right == rINF) {
    printf("Poor Sereja!\n");
  } else {
    printf("%d\n", right);
  }
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
