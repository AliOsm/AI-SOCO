#include <bits/stdc++.h>

using namespace std;
vector<vector<pair<int,int> > >adj;
set<pair<int,int> >st;
int ans=0;
bool vis [300005];
void dfs(int u)
{
    ans++;
    for(auto xx :adj [u])
    {
        int v=xx.first;
        if(xx.second==1)
        {
            if(st.count({v,u}))continue;
            st.insert({u,v});
            if(!vis[v])
            {
                vis[v]=1;
                dfs(v);
            }
        }
        else
        {
            if(!vis[v])
            {
                vis[v]=1;
                dfs(v);
            }
        }
    }
}
void dfs2(int u)
{
    ans++;
    for(auto xx :adj [u])
    {
        int v=xx.first;
        if(xx.second==1)
        {
            continue;
            if(st.count({v,u}) );
            else
            {
                st.insert({v,u});
                continue;
            }
            continue ;
            if(!vis[v])
            {
                vis[v]=1;
                dfs2(v);
            }
        }
        else
        {
            if(!vis[v])
            {
                vis[v]=1;
                dfs2(v);
            }
        }
    }
}
int a[300005];
int dp[300005];
int main()
{
    // freopen("input.txt", "r", stdin);
    ios::sync_with_stdio(0);
    cin.tie(0);
    int n,m,s;
    cin>>n>>m>>s;
    vector<pair<int,int>>edges;
    adj.resize(n+1);
    for(int i = 0 ; i < m ; i++)
    {
        int t,a,b;
        cin>>t>>a>>b;

        if(t==1)
        {
            adj[a].push_back({b,0});
        }
        else
        {
            edges.push_back({a,b});
            adj[a].push_back({b,1});
            adj[b].push_back({a,1});
        }
    }
    memset(vis,0,sizeof vis);
    vis[s]=1;
    dfs(s);
    cout<<ans<<endl;
    for(int i=0; i<edges.size(); i++)
    {
        if(st.count(edges[i]))
            cout<<'+';
        else cout<<'-';
    }
    cout<<endl;
    st.clear();
    memset(vis,0,sizeof vis);
    ans=0;
    vis[s]=1;
    dfs2(s);
    cout<<ans<<endl;
    for(int i=0; i<edges.size(); i++)
    {
        if ( vis[edges[i].first] && vis[edges[i].second] )
            cout << '+' ;
        else if ( vis[edges[i].first] )
            cout << '-' ;
        else if ( vis[edges[i].second] )
            cout << '+' ;
        else cout << '+' ;
        continue ;
        if(st.count(edges[i]))
            cout<<'+';
        else cout<<'-';
    }
    cout<<endl;

    return 0;
}
