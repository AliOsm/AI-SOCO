#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll q , n , p , k , A[MAXN] , ps[MAXN] , cost[MAXN];

int main() {
    fast_io;

    cin >> q;
    while(q--){
        cin >> n >> p >> k;
        for(ll i = 1 ; i <= n ; i++)    cin >> A[i];
        sort(A + 1 , A + n + 1);
        partial_sum(A , A + n + 5 , ps);
        ll ans = 0;
        for(ll i = 1 ; i <= n ; i++){
            if(ps[i] <= p) ans = max(ans , i);
            if(i < k)   cost[i] = ps[i];
            if(i >= k){
                cost[i] = cost[i - k] + A[i];
                if(cost[i] <= p)    ans = max(ans , i);
            }
        }
        cout << ans << endl;
    }

    return 0;
}
/*

*/
