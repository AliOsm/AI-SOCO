#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
#define  int long long int
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <db, db> pdd;
typedef vector<int> vi;
typedef vector<vector<int> > matrix;
#define m1 make_pair
#define pb push_back
#define flush fflush(stdout)
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define reset(x,v) memset(x,v,sizeof(x))
#define sz(x) (int)(x.size())
#define ff first
#define ss second
#define endl "\n"
#define debug(x) (cerr << #x << ": " << x << "\n")
#define setbits(x) __builtin_popcount(x)
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0)return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p;}
const ll hell =1000000007;
const int INF = 0x3f3f3f3f;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;

typedef tree<int, null_type, less<int>, rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;
const int N=100001;int dp[100001];vi pr[N+1];
int InEx(int r,int m)
{
    if(m==1)
        return 0;
    int n=pr[m].size();int sm=0,pro,cnt,in;int j;
    for(int i=0;i<(1<<n);i++)
    {
        ;
        j=1;in=0;pro=1;cnt=0;
        while(j<=i)
        {
            if(j&i)
            {
                pro=pro*pr[m][in];
                cnt++;
            }
            in++;
            j=j<<1;
        }
        if(cnt%2)
        {
            sm-=((int)r/pro);
        }
        else
        {
            sm=sm+((int)(r/pro));
        }
    }
    return sm;
}
int32_t main()
{
    
    IOS;
    int spf[N+1];
    for(int i=1;i<=N;i++)
        spf[i]=i;
    for(int i=2;i<=sqrt(N);i++)
    {
        if(spf[i]==i)
        {
            for(int j=2*i;j<=N;j+=i)
                if(spf[j]==j)
                    spf[j]=i;
        }
    }
    int x;int sp;int cnt=0;
    for(int i=1;i<=N;i++)
    {
        x=i;
        while(x>1)
        {
            sp=spf[x];cnt=0;
            while(!(x%sp))
            { cnt++;x=x/sp;
            }
            if(cnt)
            {
                pr[i].pb(sp);
            }
        }
    }
    int m;
    cin>>m;
    dp[1]=0;int d1,d2,y,sm;
    for(int i=2;i<=m;i++)
    {
        vi v;
        for(int j=1;j<=sqrt(i);j++)
        {
            if(!(i%j))
            {
                d1=j;
                d2=i/j;
                v.pb(d1);
                if(d1!=d2)
                    v.pb(d2);
            }
        }
        sm=m;y=1;
        for(int j=0;j<v.size();j++)
        {
            d1=v[j];
            if(d1!=i)
            {
                d2=i/d1;
                x=m/d1;
                x=InEx(x,d2);
                sm=(sm%hell+(x%hell*dp[d1]%hell)%hell)%hell;
            }
            else
            {
                
                y=m/d1;
                y=m-y;
            }
        }
        y=power(y,hell-2,hell);
        dp[i]=(sm*y)%hell;
    }
    /*
    for(int i=1;i<=4;i++)
        cout<<dp[i]<<" ";
    cout<<endl;
     */
  //  dp[3]+=1;
    //dp[4]+=1;
    int ans=m;
    for(int i=1;i<=m;i++)
    {
        ans=(ans%hell+dp[i]%hell)%hell;
    }
    ans=(ans*power(m,hell-2,hell))%hell;
    cout<<ans<<endl;
    return 0;
}
