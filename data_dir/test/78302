#include <bits/stdc++.h>

using namespace std;

const int inf=(int)1e8;

int arr[5*(int)1e5+5];
int last[5*(int)1e5+5];
int val[5*(int)1e5+5];

struct node{
    pair<int,int>pr;
    node *l;
    node *r;
    node(int pos,int val){
        pr=make_pair(val,pos);
        l=NULL;
        r=NULL;
    }
    node(node *L,node *R){
        pr=min(L->pr,R->pr);
        l=L;
        r=R;
    }

}*root[5*(int)1e5+5];

node *buildTree(int b,int e){
    if(b==e)return new node(b,inf);
    int m=(b+e)>>1;
    return new node(buildTree(b,m),buildTree(m+1,e));
}

node *update(node *now,int b,int e,int pos,int val){
    if(b>pos || e<pos)return now;
    if(b==e)return new node(pos,val);

    int m=(b+e)>>1;
    return new node(update(now->l,b,m,pos,val),update(now->r,m+1,e,pos,val));
}
pair<int,int>query(node* now,int b,int e,int L,int R){
    if(b>R || e<L)return make_pair(inf,inf);
    if(L<=b && e<=R)return now->pr;
    int m=(b+e)>>1;
    return min(query(now->l,b,m,L,R),query(now->r,m+1,e,L,R));
}
int main(){
    int n;
    scanf("%d",&n);

    for(int i=1,x;i<=n;i++){
        scanf("%d",&val[i]);
        arr[i]=last[val[i]];
        last[val[i]]=i;
    }
    root[0]=buildTree(1,n);
    for(int i=1;i<=n;i++){
        root[i]=root[i-1];
        if(arr[i])root[i]=update(root[i],1,n,arr[i],inf);
        root[i]=update(root[i],1,n,i,arr[i]);
    }
    int q,l,r;
    scanf("%d",&q);

    while(q--){
        scanf("%d %d",&l,&r);
        pair<int,int>ret=query(root[r],1,n,l,r);
        if(ret.first>=l)printf("0\n");
        else printf("%d\n",val[ret.second]);
    }

    return 0;
}
