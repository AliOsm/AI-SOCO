//          be name khoda

#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

const int maxN = 1000*1001;
const int maxA = 1000*10000;

bool isPrime[maxA + 1];
int tedad[maxA + 1], f[maxA + 1], a[maxN], sum[maxA + 1],  mx, n, m, p;
vector <int> ps;

void sieve()
{
    for(int i = 2; i <= mx; i++)
        if(!isPrime[i])
        {
            ps.push_back(i);
            for(int j = i; j <= mx; j += i)
                f[ps.size()] += tedad[j], isPrime[j] = 1;
            isPrime[i] = 0;
            //cerr << i << " : " << f[ps.size()] <<  endl;
        }
    p = ps.size();
}

int main()
{
    cin >> n;
    for(int i = 0; i < n; i++)
    {
        cin >> a[i];
        tedad[a[i]]++;
        mx = max(mx, a[i]);
    }
    sieve();
    for(int i = 0; i <= p; i++)
    {
        if(i)
            sum[i] = sum[i - 1];
        sum[i] += f[i];
    }
    cin >> m;
    for(int i = 0; i < m; i++)
    {
        int l, r;
        cin >> l >> r;
        r = min(r, mx);
        int nowr = (lower_bound(ps.begin(), ps.end(), r) - ps.begin());
        int nowl = (lower_bound(ps.begin(), ps.end(), l) - ps.begin());
        if(ps[nowr] != r)
            nowr--;
        if(nowr < nowl || nowl == p || (nowl == nowr && (ps[nowl] > r || ps[nowl] < l)))
        {
            cout << 0 << endl;
            continue;
        }
        //cerr << " -> " << nowr << ", " << nowl << endl;
        if(!nowl)
            cout << sum[nowr + 1] << endl;
        else
            cout << sum[nowr + 1] - sum[nowl] << endl;
    }
    //cin >> n;
}