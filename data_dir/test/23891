#include <iostream>
#include <iomanip>
#include <algorithm>
#include <vector>
#include <string>
#include <cmath>
#include <memory.h>
#include <stack>
#include <fstream>
#include <cstdio>
#include <unordered_map>
#include <map>
#include <list>
#include <queue>
#include <set>
using namespace std;

/**/

int n;
vector<vector<int> > L;
vector<vector<int> > R;
vector<vector<int> > tr;

int solve(int i, int end)
{
	int extendL = i;
	for (int j = 0; j < L[i].size(); j++)
	{
		extendL = max(extendL, L[i][j]);
		if (L[i][j] < i) return -1;
	}
	int startR = i;
	if (extendL > i)
	{
		tr[i][0] = i+1;
		startR = solve(i+1, extendL);
		if (startR == -1) return -1;
	}
	int extendR = max(end, startR);
	for (int j = 0; j < R[i].size(); j++)
	{
		extendR = max(extendR, R[i][j]);
		if (R[i][j] <= startR) return -1;
	}
	int fin = startR;
	startR++;
	if (extendR >= startR)
	{
		tr[i][1] = startR;
		fin = solve(startR, extendR);
		if (fin == -1) return -1;	
	}
	if (fin < end) return -1;
	return fin;
}

void show(int i)
{
	if (i == -1) return;
	show(tr[i][0]);
	cout<<" "<<i+1;
	show(tr[i][1]);
}
int main()
{
	int c;
	cin>>n>>c;
	tr = vector<vector<int> > (n, vector<int> (2, -1));
	L = vector<vector<int> > (n);
	R = vector<vector<int> > (n);
	for (int i = 0; i < c; i++)
	{
		int a, b;
		string side;
		cin>>a>>b>>side;
		a--;
		b--;
		if (a >= b)
		{
			cout<<"IMPOSSIBLE"<<endl;
			return 0;
		}
		if (side == "LEFT")
		{
			L[a].push_back(b);
		}
		else
		{
			R[a].push_back(b);
		}
	}
	int r = solve(0, n-1);
	if (r == -1)
	{
		cout<<"IMPOSSIBLE"<<endl;
	}
	else
	{
		show(0);
		cout<<endl;
	}
}