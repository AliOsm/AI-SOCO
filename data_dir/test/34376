#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>

//#include <cstdint>
//#include <cstdlib>
#include <cassert>
//#include <cctype>
#include <climits>
#include <functional>
#include <numeric>
#include <algorithm>
#include <cmath>
#include <ctime>

#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <array>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); i++)
#define forn1(i, n) for(int i = 1; i <= int(n); i++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define mp make_pair
#define pb push_back
#define x first
#define y second

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld PI = acosl(ld(-1));
const ld EPS = 1e-9;

template <typename T> inline T sqr(const T& x) {
	return x * x;
}

template <typename T> inline T abs(const T& x) {
	return x > 0 ? x : -x;
}

inline bool inside(int x, int y, int n, int m) {
	return x >= 1 && x <= n && y >= 1 && y <= m;
}

inline int rnd() {
	return abs(rand() ^ (rand() << 15));
}

inline int rnd(int n) {
	assert(n > 0);
	return rnd() % n;
}

inline int rnd(int lf, int rg) {
	return lf + rnd(rg - lf + 1);
}

inline li rndLL() {
	return rnd() * 1LL * rnd() + rnd();
}

const int dx[4] = { -1, 0, +1, 0 };
const int dy[4] = { 0, +1, 0, -1 };

const int dx8[8] = { -1, -1, 0, +1, +1, +1, 0, -1 };
const int dy8[8] = { 0, +1, +1, +1, 0, -1, -1, -1 };

const int N = int(222);

void gen() {

}

bool read() {
	return true;
}

bool goodp[33][33];

bool isp(int n) {
	if (n < 2) return false;
	for (int i = 2; i * i <= n; i++) if (n % i == 0) return false;
	return true;
}

void solve() {
	queue<pt> q;
	goodp[0][0] = true;
	q.push(pt(0, 0));

	while (!q.empty()) {
		pt p = q.front();
		q.pop();
		int x = p.x;
		int y = p.y;
		if (x + 2 <= 32 && y + 1 <= 32 && !goodp[x + 2][y + 1]) {
			goodp[x + 2][y + 1] = true;
			q.push(pt(x + 2, y + 1));
		}

		if (x + 1 <= 32 && y + 2 <= 32 && !goodp[x + 1][y + 2]) {
			goodp[x + 1][y + 2] = true;
			q.push(pt(x + 1, y + 2));
		}
	}

	vector<int> pr;
	for (int i = 2; i <= 1000; i++) if (isp(i)) pr.push_back(i);

	int tt;
	assert(scanf("%d", &tt) == 1);

	forn(ttt, tt) {
		int a, b;
		assert(scanf("%d %d", &a, &b) == 2);
		if (a == 1 && b != 1) {
			puts("No");
			continue;
		}

		if (a != 1 && b == 1) {
			puts("No");
			continue;
		}

		if (a == 1 && b == 1) {
			puts("Yes");
			continue;
		}


		bool ok = true;
		forn(i, sz(pr)) {
			int x = pr[i];
			int c1 = 0, c2 = 0;
			while (a % x == 0) {
				a /= x;
				c1++;
			}

			while (b % x == 0) {
				b /= x;
				c2++;
			}

			if (!goodp[c1][c2]) {
				ok = false;
			}
		}

		if (a == 1 && b != 1) {
			puts("No");
			continue;
		}

		if (a != 1 && b == 1) {
			puts("No");
			continue;
		}

		if (a == 1 && b == 1) {
			if (ok) puts("Yes");
			else puts("No");
			continue;
		}

		if (a > b) swap(a, b);
		if (a * 1LL * a != b) {
			puts("No");
			continue;
		}

		puts("Yes");
	}
}

int main() {
#ifdef _DEBUG
	assert(freopen("777.txt", "rt", stdin));
	assert(freopen("output.txt", "wt", stdout));
#endif

	int T = 1;

	srand(int(time(NULL)));

	//assert(scanf("%d", &T) == 1);

	forn(i, T) {
#ifdef _DEBUG
		cerr << "TEST == " << i << endl;
#endif

		assert(read());
		//cout << "Case #" << i + 1 << ": ";
		solve();
		//if(i == 1) break;
		cerr << "curTime == " << clock() << " ms" << endl;
	}

#ifdef _DEBUG
	cerr << "TIME == " << clock() << " ms" << endl;
#endif
	return 0;
}