#include<bits/stdc++.h>

using namespace std;

#define sz(a) (int)(a).size()
typedef long long ll;

struct DSU {
	vector <int> P, R;
	DSU (int n) {
		P.resize(n);
		iota(begin(P), end(P), 0);
		R = vector <int> (n, 1);
	}
	int find(int x) {return x == P[x] ? x : P[x] = find(P[x]);}
	bool unionS(int x, int y) {
		x = find(x), y = find(y);
		if (x == y) return 0;
		if (R[x] > R[y]) swap(x, y);
		R[y] += R[x];
		P[x] = y;
		return 1;
	}
};

char cs[55];
vector <int> idL [26];
int main() {
	int n;
	scanf("%d", &n);

	for (int i = 0; i < n; i++) {
		scanf("%s", cs);
		string s = cs;
		for (char c : s) {
			idL[c-'a'].push_back(i);
		}
	}

	DSU dsu (n);
	for (int i = 0; i < 26; i++) {
		if (idL[i].empty()) continue;
		for (int t : idL[i]) dsu.unionS(t, idL[i][0]);
	}
	set <int> ans;
	for (int i = 0; i < n; i++) ans.insert(dsu.find(i));
	cout << ans.size() << endl;
}
