#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(int i = x; i<(ll)(n); i++)
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'

typedef long long LL;

struct Edge
{
	int u, v;
	LL cap, flow;
	Edge()
	{
	}
	Edge(int u, int v, LL cap) :
			u(u), v(v), cap(cap), flow(0)
	{
	}
};

struct Dinic
{
	int N;
	vector<Edge> E;
	vector<vector<int>> g;
	vector<int> d, pt;

	Dinic(int N) :
			N(N), E(0), g(N), d(N), pt(N)
	{
	}

	void AddEdge(int u, int v, LL cap)
	{
		if (u != v)
		{
			E.push_back(Edge(u, v, cap));
			g[u].push_back(E.size() - 1);
			E.push_back(Edge(v, u, 0));
			g[v].push_back(E.size() - 1);
		}
	}

	bool BFS(int S, int T)
	{
		queue<int> q(
		{ S });
		fill(d.begin(), d.end(), N + 1);
		d[S] = 0;
		while (!q.empty())
		{
			int u = q.front();
			q.pop();
			if (u == T)
				break;
			for (int k : g[u])
			{
				Edge &e = E[k];
				if (e.flow < e.cap && d[e.v] > d[e.u] + 1)
				{
					d[e.v] = d[e.u] + 1;
					q.push(e.v);
				}
			}
		}
		return d[T] != N + 1;
	}

	LL DFS(int u, int T, LL flow = -1)
	{
		if (u == T || flow == 0)
			return flow;
		for (int &i = pt[u]; i < g[u].size(); ++i)
		{
			Edge &e = E[g[u][i]];
			Edge &oe = E[g[u][i] ^ 1];
			if (d[e.v] == d[e.u] + 1)
			{
				LL amt = e.cap - e.flow;
				if (flow != -1 && amt > flow)
					amt = flow;
				if (LL pushed = DFS(e.v, T, amt))
				{
					e.flow += pushed;
					oe.flow -= pushed;
					return pushed;
				}
			}
		}
		return 0;
	}

	LL MaxFlow(int S, int T)
	{
		LL total = 0;
		while (BFS(S, T))
		{
			fill(pt.begin(), pt.end(), 0);
			while (LL flow = DFS(S, T))
				total += flow;
		}
		return total;
	}
};

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	vi vec(6);
	rep(i, 0, 6)
		cin >> vec[i];

	int n;
	cin >> n;

	int src = n + 7, snk = src + 1;
	Dinic flow(snk + 1);
	vector<string> hoba;
	hoba.push_back("S");
	hoba.push_back("M");
	hoba.push_back("L");
	hoba.push_back("XL");
	hoba.push_back("XXL");
	hoba.push_back("XXXL");

	rep(i, 0, 6)
		flow.AddEdge(i + n, snk, vec[i]);

	rep(i, 0, n)
	{
		string x;
		cin >> x;
		string a = "", b = "";
		if (x.find(',') == string::npos)
			a = x;
		else
		{
			int idx = x.find(',');
			a = x.substr(0, idx);
			b = x.substr(idx + 1, sz(x) - idx);
		}
		rep(j, 0, 6)
		{
			if (a == hoba[j] || b == hoba[j])
				flow.AddEdge(i, j + n, 1);
		}
		flow.AddEdge(src, i, 1);
	}

	if (flow.MaxFlow(src, snk) != n)
		return cout << "NO", 0;
	cout << "YES\n";

	rep(i, 0, n)
	{
		for (auto j : flow.g[i])
		{
			auto x = flow.E[j];
			if (x.flow == 1)
			{
				cout << hoba[x.v - n] << endl;
				break;
			}
		}
	}

	return 0;
}
