#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>

using namespace std;
using ll = long long;
const ll MAXN = (ll)1e18;

vector<ll> a;
inline ll squareroot(ll x) {
	ll lo = 0, hi = x;
	while(hi - lo > 1) {
		ll m = lo + (hi - lo) / 2;
		if (m > MAXN / m) {
			hi = m;
			continue;
		}
		if (m * m <= x) {
			lo = m;
		} else {
			hi = m;
		}
	}
	return lo;
}

inline bool isSquare(ll x) {
	ll t = squareroot(x);
	return t * t == x;
}

inline ll query(ll x) {
	int lo = -1, hi = a.size();
	while(hi - lo > 1) {
		int m = lo + (hi - lo) / 2;
		if (a[m] <= x) {
			lo = m;
		} else {
			hi = m;
		}
	}
	return hi + squareroot(x) - 1; 
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie();
	for(ll i = 2; i <= 1000000; ++i) {
		ll cur = i * i * i;
		for(;;) {
			if (!isSquare(cur)) {
				a.push_back(cur);
			}
			if (cur <= MAXN / i) {
				cur *= i;
			} else {
				break;
			}
		}
	}
	sort(a.begin(), a.end());
	auto it = unique(a.begin(), a.end());
	a.resize(distance(a.begin(), it));

	int T;
	cin >> T;
	for(int cs = 0; cs < T; ++cs) {
		ll n;
		cin >> n;
		cout << n - query(n) - 1 << endl;
	}

	return 0;
}
