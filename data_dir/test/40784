#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <cstdlib>
#include <utility>
#include <memory.h>
#include <cassert>
#include <iterator>
#include <bitset>
#include <iomanip>
#include <complex>
#include <queue>
#include <ctime>
#include <deque>
#include <stack>
#include <set>
#include <map>
 
using namespace std;
 
#define pb push_back
#define mp make_pair
#define F first
#define S second

const int N = 300500;

int n, q;
int el = 0;
int f[N];  
int sz[N];
int who[N];
int ans[N];
int lca[22][N];   
vector<int> g[N];

void dfs(int ver, int prev) {
	sz[ver] = 1;
	for (int i = 0; i < (int)g[ver].size(); i++) {
		int to = g[ver][i];
		if (to == prev) continue;
		dfs(to, ver);
		sz[ver] += sz[to];
		if (sz[to] > f[ver]) {
			f[ver] = sz[to];
			who[ver] = to;
		}
	}
	lca[0][ver] = who[ver];
	for (int i = 1; i <= 20; i++) {
		lca[i][ver] = lca[i - 1][lca[i - 1][ver]];
	}
}

int main() {
  //freopen("input.txt","r",stdin);
  //freopen("output.txt","w",stdout);
  scanf("%d%d", &n, &q);
  for (int i = 2; i <= n; i++) {
  	int x;
  	scanf("%d", &x);
  	g[x].pb(i);
  	g[i].pb(x);
  }           
  dfs(1, 1);
  for (int v = 1; v <= n; v++) {
  	ans[v] = v;
  	for (int i = 20; i >= 0; --i) {
  		if (sz[lca[i][ans[v]]] << 1 >= sz[v]) ans[v] = lca[i][ans[v]];
  	}
  }
  while (q--) {
  	int v;
  	scanf("%d", &v);
  	if (ans[v] == 0) ans[v] = v;
  	printf("%d\n", ans[v]);
  }
  return 0;
}