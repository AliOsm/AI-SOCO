#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include <iostream>
#include <cmath>
#include <iomanip>
#include <string>
#include <cstring>
#include <cstdio>
#include <math.h>
#include <algorithm>
#include <stdio.h>
#include <climits>
#include <stack>
#include <queue>
#include <vector>
#include <set>
#include <sstream>
#include <map>
#include <ctime>
#include <cstdlib>
#include <list>
#include <bitset>
#include <functional>
#include <numeric>
#include <utility>
#include<unordered_map>
using namespace std;

typedef unsigned long long ull;
typedef long long ll;
#define OO 1e8
int dx8[] = { 0, 0, 1, -1, 1, -1, 1, -1 };
int dy8[] = { -1, 1, 0, 0, -1, -1, 1, 1 };
int dx4[] = { 0, 1, -1, 0 };
int dy4[] = { 1, 0, 0, -1 };
// start + (end - start) / 2;

bool vis[110];
vector<vector<int>>v, adj;

void dfs(int node){
    vis[node] = 1;
    for (int i = 0; i < adj[node].size(); i++){
        if (!vis[adj[node][i]]){
            dfs(adj[node][i]);
        }
    }
}

int main(){
    int n, m;
    int com = 0, cnt = 0;
    cin >> n >> m;
    v.resize(m + 1);
    adj.resize(n + 1);
    for (int i = 0; i < n; i++){
        int k;
        cin >> k;
        for (int j = 0; j < k; j++){
            int x;
            cin >> x;
            v[x].push_back(i+1);
        }
        if (k == 0){
            vis[i + 1] = 1;
            cnt++;
        }
    }
    for (int i = 1; i <= m; i++){
        for (int j = 0; j < v[i].size(); j++){
            for (int k = j + 1; k < v[i].size(); k++){
                adj[v[i][j]].push_back(v[i][k]);
                adj[v[i][k]].push_back(v[i][j]);
            }
        }
    }
    for (int i = 1; i <= n; i++){
        if (!vis[i]){
            dfs(i);
            com++;
        }
    }
 



   cout << max(0,com - 1)+cnt << "\n";
}