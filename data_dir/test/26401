/*
ID: hamed_51
PROG: ?
LANG: C++
*/

#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#if (_win32 || __win32__)
#define LLD "%i64d"
#else
#define LLD "%lld"
#endif

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << x << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-8
//#define endl "\n"

inline void read(register int *n) {
	register char c; *n = 0;
	do { c = getchar(); } while (c < '0' || c > '9');
	do { *n = c-'0'+*n*10; c = getchar(); } while (c >= '0' && c <= '9');
}

vector<string> rot(vector<string> V) {
	vector<string> res(Size(V[0]), "");
	FOR(j, 0, Size(V[0])) for (int i = Size(V)-1; i >= 0; i--) res[j] += V[i][j];
	return res;
}

int main(int argv, char **argc) {
	int n, m;
	cin >> n >> m;
	vector<string> V(n);
	FOR(i, 0, n) cin >> V[i];
	int tot = 0;
	pii best(100, 100);
	FOR(i, 1, n+1) if (n%i == 0) FOR(j, 1, m+1) if (m%j == 0) {
		set<vector<string> > st;
		FOR(r, 0, n/i) FOR(c, 0, m/j) {
			vector<string> dest;
			FOR(ii, r*i, r*i+i) {
				string tmp = "";
				FOR(jj, c*j, c*j+j)
					tmp += V[ii][jj];
				dest.pb(tmp);
			}
			set<vector<string> > hmm;
			hmm.insert(dest); dest = rot(dest);
			hmm.insert(dest); dest = rot(dest);
			hmm.insert(dest); dest = rot(dest);
			hmm.insert(dest);
			st.insert(*hmm.begin());
		}
		if (Size(st) != (n*m)/(i*j)) continue;
		tot++;
		if (i*j < best.X*best.Y) {
			best.X = i;
			best.Y = j;
		}
	}
	cout << tot << endl << best.X << " " << best.Y << endl;
	return 0;
}

