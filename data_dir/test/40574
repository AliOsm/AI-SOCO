#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define MAX ((ll)(1e18 + 5))
#define MAXL ((ll)(1e18 + 5))
#define MAX_X ((int)(1e6 + 2))
#define pi (2.0*acos(0))
#define M ((int)(1e9 + 7))
#define NN ((ll)(305))
#define N ((int)(1e6 + 5))
#define eps (0)
#define fastio ios_base::sync_with_stdio(false),cin.tie(NULL)
#define log 29
#define endl "\n"


using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef unsigned long long ull;

/*fast io
ios_base::sync_with_stdio(false);
cin.tie(NULL);
*/


typedef tree < pair < int, int >,  null_type,  less < pair < int, int > >,  rb_tree_tag,  tree_order_statistics_node_update > o_set;
/// o_set s;
/// s.order_of_key(k) : Number of items strictly smaller than k .
/// *(s.find_by_order(k)) : K-th element in a set (counting from zero).

int deg[N], par[N];

bool vis[N];

int findpar(int n)
{
    if(par[n]==n) return n;
    return par[n] = findpar(par[n]);
}

int main()
{
    fastio;
    int n , m, loop = 0;
    cin>>n>>m;
    for(int i = 1; i<=n; i++) par[i] = i;
    for(int i = 0; i<m; i++){
        int a,  b;
        cin>>a>>b;
        vis[a] = vis[b] = 1;
        par[findpar(a)] = findpar(b);

        if(a!=b){
            deg[a]++;
            deg[b]++;
        }
        else loop++;
    }
    ll ans = (ll)loop*(m-loop) + (ll)loop*(loop-1)/2;
    vector < int > v;
    for(int i = 1; i<=n; i++) if(vis[i]) v.push_back(i);
    for(int i:v){
        if(findpar(i)!=findpar(v[0])){
            cout<<0<<endl;
            return 0;
        }
        ans += (ll)deg[i]*(deg[i]-1)/2;
    }
    cout<<ans<<endl;
    return 0;
}
