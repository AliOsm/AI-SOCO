#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long ll;

const int MOD = 1000000007;
ll N;
int K;
ll inv[55];
ll dp[55][10005];
vector<ll> P;
vector<int> E;

ll expo(ll a, ll b)
{
    if (b == 0)
        return 1;
    if (b == 1)
        return a;
    if (b % 2 == 0)
        return expo(a*a % MOD, b/2);
    return a*expo(a*a % MOD, (b-1)/2) % MOD;
}

void go(ll num)
{
    for (ll i = 2; i*i <= num; i++)
        if (num % i == 0)
        {
            int cnt = 0;
            while (num % i == 0)
            {
                cnt++;
                num /= i;
            }
            P.push_back(i);
            E.push_back(cnt);
        }
    if (num > 1)
    {
        P.push_back(num);
        E.push_back(1);
    }
}

int main()
{
    ios::sync_with_stdio(0);

    cin >> N >> K;
    go(N);
    
    for (int i = 0; i < 55; i++)
        inv[i] = expo(i + 1, MOD - 2);

    ll ans = 1;
    for (int i = 0; i < P.size(); i++)
    {
        ll p = P[i];
        int e = E[i];
        ll num = 1;
        for (int j = 0; j <= e; j++)
        {
            dp[j][0] = num;
            num = num*p % MOD;
        }
        for (int k = 1; k <= K; k++)
            for (int j = 0; j <= e; j++)
            {
                dp[j][k] = dp[j][k - 1];
                if (j > 0)
                    dp[j][k] = (dp[j][k] + dp[j - 1][k]*j % MOD) % MOD;
                dp[j][k] = dp[j][k]*inv[j] % MOD;
            }
        ans = ans*dp[e][K] % MOD;
    }   

    cout << ans << "\n";

    return 0;
}
