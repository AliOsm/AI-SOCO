#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
#define  int long long int
typedef complex<long double> cd;
const long double pi=acos(-1);
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <db, db> pdd;
typedef vector<int> vi;
typedef vector<vector<int> > matrix;
#define m1 make_pair
#define pb push_back
#define flush fflush(stdout)
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define reset(x,v) memset(x,v,sizeof(x))
#define sz(x) (int)(x.size())
#define ff first
#define ss second
#define endl "\n"
#define debug(x) (cerr << #x << ": " << x << "\n")
#define setbits(x) __builtin_popcount(x)
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0)return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p;}
const ll MOD =998244353;
const ll hell=1000000007;
const int INF = 1e17;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;

typedef tree<int, null_type, less<int>, rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;
const int N=200005;
int pre[N+1];
int pro[N+1];
int query(int l,int r)
{
    r--;
    int ans=(pre[r]-pre[l-1]+MOD)%MOD;
    ans=(ans*power(pro[r],MOD-2,MOD))%MOD;
    return ans;
}
int32_t main()
{
    IOS;
    int n,q;
    cin>>n>>q;
    int p[n+1];
    for(int i=1;i<=n;i++)
    {
        cin>>p[i];
        p[i]=(p[i]*power(100,MOD-2,MOD))%MOD;
    }
    pre[0]=0;
    pro[0]=1;
    for(int i=1;i<=n;i++)
    {
        pre[i]=(pre[i-1]%MOD+pro[i-1]%MOD)%MOD;
        pro[i]=(pro[i-1]%MOD*p[i]%MOD)%MOD;
    }
    //cout<<pre[1]<<" "<<pro[1]<<endl;
    int ans=query(1,n+1);
    //cout<<ans<<endl;
    set<int>s;
    s.insert(1);
    s.insert(n+1);set<int>::iterator it;
    int u,l,r;
    while(q--)
    {
        cin>>u;
        it=s.find(u);
        if(it==s.end())
        {
            s.insert(u);
            it=s.find(u);
            it--;
            l=(*it);
            it++;
            it++;
            r=(*it);
            ans=(ans+query(l,u))%MOD;
            ans=(ans+query(u,r))%MOD;
            ans=(ans-query(l,r)+MOD)%MOD;
            
        }
        else
        {
            it--;
            l=(*it);
            it++;
            it++;
            r=(*it);
            it--;
            s.erase(it);
            ans=(ans-query(l,u)+MOD)%MOD;
            ans=(ans-query(u,r)+MOD)%MOD;
            ans=(ans+query(l,r))%MOD;
        }
        cout<<ans<<endl;
    }
    return 0;
}
