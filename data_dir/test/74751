#include <bits/stdc++.h>

using namespace std;

#define MAX 200005
#define INF 1234567899
int tree[4*MAX];
int ans[4*MAX];
int arr[4*MAX];
int n;
set<int> found;
vector<pair<int, int> > V;

void init(int node, int b, int e)
{
    if(b == e){
        tree[node] = arr[b];
        return;
    }
    int left = 2*node;
    int right = 2*node+1;
    int mid = (b+e)/2;
    init(left, b, mid);
    init(right, mid+1, e);
    tree[node] = min(tree[left], tree[right]);
}

int query(int node, int b, int e, int l, int r)
{
    if(l > e || r < b) return INF;
    if(b >= l && e <= r) return tree[node];
    int left = 2*node;
    int right = 2*node+1;
    int mid = (b+e)/2;
    int q1 = query(left, b, mid, l, r);
    int q2 = query(right, mid+1, e, l, r);
    return min(q1, q2);
}



int main()
{
    scanf("%d", &n);
    for(int i=1; i<=n; i++){
        scanf("%d", &arr[i]);
        V.push_back(make_pair(arr[i], i));
    }
    for(int i=n+1; i<=2*n; i++) arr[i] = arr[i-n];
    init(1, 1, 2*n);
    sort(V.begin(), V.end());
    reverse(V.begin(), V.end());
    for(int i=0; i<V.size(); i++){
        int val = V[i].first;
        int pos = V[i].second;
        set<int> ::iterator it = found.upper_bound(pos);
        int low = pos+1, high = pos+n-1;
        int next = -1;
        if(it != found.end()){
            high = *it;
            next = high;
            high = high-1;
        }
        int best = -1;
        while(low <= high){
            int mid = (low+high)/2;
            int minimum = query(1, 1, 2*n, pos+1, mid);
            //cout << low << " " << high << " " << minimum << " " << val/2 << endl;
            if(2*minimum < val){
                best = mid;
                high = mid-1;
            }
            else {
                low = mid+1;
            }
        }
        //cout << best << endl;
        if(best != -1){
            ans[pos] = best-pos;
        }
        else {
            if(next == -1) ans[pos] = -1;
            else if(ans[next] == -1) ans[pos] = -1;
            else ans[pos] = next-pos+ans[next];
        }
        ans[pos+n] = ans[pos];
        found.insert(pos);
        found.insert(pos+n);
    }
    for(int i=1; i<=n; i++) cout << ans[i] << " ";
}