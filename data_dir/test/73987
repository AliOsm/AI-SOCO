////////////////////////////////////////////    _LeMur_
//#pragma GCC optimize("Ofast,no-stack-protector")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#include <unordered_map>
#include <unordered_set>
#include <functional>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <chrono>
#include <random>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <ctime>
#include <stack>
#include <queue>
#include <cmath>
#include <list>
#include <map>
#include <set>

using namespace std;

const int N = 12;
const int M = 2002;
const int inf = 1000 * 1000 * 1000;
const int mod = 998244353;

int t;
int n , m;

int a[N + 3][M + 3];

int mx[M][(1 << N) + 2];
int answ[M][(1 << N) + 2];

pair <int,int> p[N];

int main(){
	mt19937 myrand(chrono::steady_clock::now().time_since_epoch().count());
    cin >> t;
    while(t--){
        scanf("%d%d",&n,&m);
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                scanf("%d",&a[i][j]);
            }
        }
        for(int j=0;j<m;j++){
            int mx = 0;
            for(int i=0;i<n;i++){
                mx = max(mx , a[i][j]);
            }
            p[j].first = -mx;
            p[j].second = j;
        }
        sort(p , p + m);
        int sz = min(n , m);
        for(int j=0;j<sz;j++){
            int id = p[j].second;
            for(int i=0;i<(1 << n);i++){
                mx[j][i] = 0;
                for(int h=0;h<n;h++){
                    int sum = 0;
                    for(int t=0;t<n;t++){
                        if((i >> t) & 1){
                            sum += a[(h + t) % n][id];
                        }
                    }
                    mx[j][i] = max(mx[j][i] , sum);
                }
            }
        }
        for(int i=0;i<sz;i++){
            for(int j=0;j<(1 << n);j++){
                if(i == 0){
                    answ[i][j] = mx[i][j];
                    continue;
                }
                answ[i][j] = answ[i - 1][j];
                int cur = j;
                while(cur){
                    answ[i][j] = max(answ[i][j] , mx[i][cur] + answ[i - 1][cur ^ j]);
                    cur = (cur - 1) & j;
                }
            }
        }
        printf("%d\n",answ[sz - 1][(1 << n) - 1]);
    }
    return 0;
}
