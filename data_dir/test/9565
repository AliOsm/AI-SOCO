//#include "stdc++.h"
#include<bits/stdc++.h>
#include<iostream>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
using namespace std;
//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//typedef tuple<int, int, int> t3;
typedef long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <ll, int> pli;
typedef pair <db, db> pdd;
typedef vector<int> vi;
#define m1 make_pair
#define pb push_back
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0) return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p; }
#define flush fflush(stdout)
const ll MOD =998244353;
const int INF = 0x3f3f3f3f;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;
ll mx=0,ans=0,tl=0;
void dfs(vector<int> adj[],bool visited[],int u,ll d[],int l,ll a[])
{
    visited[u]=1;
    ans=ans+(l*a[u]);
    for(int i=0;i<adj[u].size();i++)
    {
        if(!visited[adj[u][i]])
        {
            dfs(adj,visited,adj[u][i],d,l+1,a);
            d[u]+=d[adj[u][i]];
        }
    }
}
void dfs1(vector<int> adj[],bool visited[],int u,ll d[],ll ans1)
{
    visited[u]=1;ll ans2;int v;
    for(int i=0;i<adj[u].size();i++)
    {
       // int v=adj[u][i];
        v=adj[u][i];
        if(!visited[v])
        {
            ans2=ans1-d[v]+(tl-d[v]);
            mx=max(mx,ans2);
            dfs1(adj,visited,adj[u][i],d,ans2);
        }
    }
}
int main()
{
    IOS;
    int n;
    cin>>n;
    ll a[n+1];
    for(int i=1;i<=n;i++)
        cin>>a[i];
    vector<int> adj[n+1];int u,v;
    for(int i=0;i<n-1;i++)
    {
        cin>>u>>v;
        adj[u].pb(v);
        adj[v].pb(u);
    }
    //cout<<"ok"<<endl;
    ll d[n+1];bool visited[n+1];
    memset(visited,0,sizeof(visited));
    d[0]=0;
    for(int i=1;i<=n;i++)
        d[i]=a[i];
    dfs(adj,visited,1,d,0,a);
//cout<<"ok"<<endl;
    //cout<<d[1]<<endl;
    //cout<<ans<<endl;
    mx=ans;
    tl=d[1];
    memset(visited,0,sizeof(visited));
    dfs1(adj,visited,1,d,ans);
    cout<<mx<<endl;
}
