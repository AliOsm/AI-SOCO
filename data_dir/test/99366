#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long 

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << endl;
        //use cerr if u want to display at the bottom
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define trace(...)
#endif

typedef trie<string,null_type,trie_string_access_traits<>,pat_trie_tag,trie_prefix_search_node_update> pref_trie;
typedef tree<long int,null_type,less<long int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
typedef cc_hash_table<long int,long int, hash<long int>, equal_to<long int>, direct_mask_range_hashing<long int>, 
hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;

long int dp[1000000][2][2][3];

long int solve(vector<long int> &v, long int be, long int en, long int k, long int continuum, long int used, long int continuum2){
	if(be == en)
		return 0;

	if(dp[be][continuum][used][continuum2] != -1)
		return dp[be][continuum][used][continuum2];

	long int ans1 = 0, ans2 = 0, ans3 = 0, ans4 = 0, ans5 = 0;

	if(continuum2 == 0)
		ans1 = max({solve(v,be+1,en,k,0,0,0),v[be] + solve(v,be+1,en,k,0,0,1), k * v[be] + solve(v,be + 1, en, k ,1,1,1)});
	
	else if(continuum2 == 1){
		if(continuum == 1)
			ans2 = max({k * v[be] + solve(v,be+1,en,k,1,1,1), v[be] + solve(v,be+1,en,k,0,1,1), solve(v,be+1,en,k,0,0,2)});
		
		else{
			if(used == 0)
				ans3 = max({v[be] + solve(v,be+1,en,k,0,0,1), solve(v,be+1,en,k,0,0,2), v[be] * k + solve(v,be+1,en,k,1,1,1)});
		
			else
				ans4 = max({v[be] + solve(v,be+1,en,k,0,1,1), solve(v,be+1,en,k,0,0,2)});
		}
	}
	else{
		ans5 = solve(v,be+1,en,k,0,0,2);
	}

	return dp[be][continuum][used][continuum2] =  max({ans1,ans2,ans3,ans4,ans5});

}

int main(){
   IOS;
 //    #ifndef ONLINE_JUDGE
 //        freopen("in.txt",  "r",  stdin);
 //        freopen("out.txt", "w", stdout);
 //    #endif
   
   long int n,k;
   cin>>n>>k;

   vector<long int> v(n);
   for(long int i = 0; i < n; i++)
   	cin>>v[i];

   memset(dp,-1,sizeof(dp));

   cout<<max({solve(v,0,n,k,0,0,0),solve(v,0,n,k,1,1,1),solve(v,0,n,k,0,0,1)});
   return 0;
}