#include <iostream>
#include <algorithm>
#include <set>
#include <map>
#include <complex>
using namespace std;
typedef long long ll;
typedef complex<ll> point;
#define X real()
#define Y imag()

const int MAXN = 1005;
int N;
point S1[MAXN];
point S2[MAXN];

ll gcd(ll m, ll n)
{
    if (n == 0)
        return m;
    if (m % n == 0)
        return n;
    return gcd(n, m % n);
}

ll cross(point a, point b)
{
    return imag(conj(a)*b);
}

bool straddle(point a, point b, point c, point d) //check if C and D are on opposite sides of line AB
{
    ll c1 = cross(b - a, c - a);
    ll c2 = cross(b - a, d - a);
    return (c1 >= 0 && c2 <= 0) || (c1 <= 0 && c2 >= 0);
}

bool intersect(point a, point b, point c, point d) //check if AB and CD intersect
{
    return straddle(a, b, c, d) && straddle(c, d, a, b);
}

int main()
{
    ios::sync_with_stdio(0);

    cin >> N;
    ll ans = 0;
    for (int i = 0, ax, ay, bx, by; i < N; i++)
    {
        cin >> ax >> ay >> bx >> by;
        ans += gcd(abs(ax - bx), abs(ay - by)) + 1;
        S1[i] = point(ax, ay);
        S2[i] = point(bx, by);
    }

    map<pair<ll, ll>, set<int> > mp;
    for (int i = 0; i < N; i++)
        for (int j = i + 1; j < N; j++)
            if (intersect(S1[i], S2[i], S1[j], S2[j]))
            {
	            ll p = cross(S1[j] - S1[i], S2[i] - S1[i]), q = cross(S2[j] - S1[i], S2[i] - S1[i]);
                point pt = p*S2[j] - q*S1[j];
                if ((pt.X % (p - q) == 0 && pt.Y % (p - q) == 0))
                {
                    pt /= (p - q);
                    pair<ll, ll> key = make_pair(pt.X, pt.Y);
                    mp[key].insert(i);
                    mp[key].insert(j);
                }
            }
    for (map<pair<ll, ll>, set<int> >::iterator it = mp.begin(); it != mp.end(); it++)
        ans -= (it->second).size() - 1;

    cout << ans << "\n";

    return 0;
}
