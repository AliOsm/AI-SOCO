#include <functional>
#include <algorithm>
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <numeric>
#include <iomanip>
#include <cstring>
#include <cassert>
#include <memory>
#include <chrono>
#include <cstdio>
#include <bitset>
#include <vector>
#include <math.h>
#include <queue>
#include <stack>
#include <ctime>
#include <set>
#include <map>

using namespace std;

#define rep(i,a,n) for (int i=(a);i<(n);i++)
#define per(i,n,a) for (int i=(n)-1;i>=(a);i--)
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define fi first
#define se second
#define SZ(x) (int)x.size()

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;

template <typename T>
T nextInt() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if (ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return x * p;
}

const int maxn=(int)2e5+10;
const int inf=(int)1e9+5;
const int mod=(int)1e6+3;
const ll llinf=(ll)1e18+5;
const ld pi=acos(-1.0);

struct pnt{
    ll x,y;
    pnt(){}
    pnt(int x,int y):x(x),y(y){}
    bool operator<(const pnt&rhs)const {
        return x<rhs.x||(x==rhs.x&&y<rhs.y);
    }
    bool operator==(const pnt&rhs)const{
        return x==rhs.x&&y==rhs.y;
    }
};

ll get(pnt a,pnt b,pnt c){
    return a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y);
}

vector<pnt> pts;

int n;

pnt up[maxn];
int uplen;
pnt down[maxn];
int downlen;

pnt hull[maxn];

void findch(){
    sort(all(pts));
    pts.erase(unique(all(pts)),pts.end());

    up[uplen++]=pts[0];
    down[downlen++]=pts[0];
    n=(int)pts.size();
    rep(i,1,n){
        if(i==n-1||get(pts[0],pts[i],pts[n-1])<0){
            while(uplen>=2&&get(up[uplen-2],up[uplen-1],pts[i])>=0)uplen--;
            up[uplen++]=pts[i];
        }
        if(i==n-1||get(pts[0],pts[i],pts[n-1])>0){
            while(downlen>=2&&get(down[downlen-2],down[downlen-1],pts[i])<=0)downlen--;
            down[downlen++]=pts[i];
        }
    }
    n=0;
    rep(i,0,uplen)hull[n++]=up[i];
    per(i,downlen-1,1)hull[n++]=down[i];
}

ll S;

ll triarea(pnt a,pnt b,pnt c){
    return abs((a.x-b.x)*(a.y+b.y)+(b.x-c.x)*(b.y+c.y)+(c.x-a.x)*(c.y+a.y));
}

int nxt(int i){
    return i+1<n?i+1:0;
}

void upd(pnt &a,pnt &b,pnt&c,pnt a2,pnt b2,pnt c2){
    if(triarea(a,b,c)<triarea(a2,b2,c2)){
        a=a2,b=b2,c=c2;
    }
}

void printp(pnt a,pnt b,pnt c){
    cout<<a.x+b.x-c.x<<' '<<a.y+b.y-c.y<<'\n';
}

int main(){

    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);

    ios_base::sync_with_stdio(0);
    cin>>n>>S;
    rep(i,0,n){
        int x,y;
        cin>>x>>y;
        pts.pb(pnt(x,y));
    }
    findch();

    pnt a=hull[0],b=hull[1],c=hull[2];

    rep(i,0,n){
        int cur=nxt(nxt(i));
        int j=i;
        rep(_,0,n){
            j=nxt(j);
            upd(a,b,c,hull[i],hull[j],hull[cur]);
            while(triarea(hull[i],hull[j],hull[cur])<triarea(hull[i],hull[j],hull[nxt(cur)])){
                cur=nxt(cur);
                upd(a,b,c,hull[i],hull[j],hull[cur]);
            }
        }
    }
    //cout<<a.x<<' '<<a.y<<endl;
    //cout<<b.x<<' '<<b.y<<endl;
    //cout<<c.x<<' '<<c.y<<endl;
    printp(a,b,c);
    printp(b,c,a);
    printp(c,a,b);
    return 0;
}
