#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>
#include <tuple>
#include <chrono>

using namespace std;
using ll = long long;
using ull = unsigned long long;
const int oo = numeric_limits<int>::max() / 2;
mt19937 rnd(std::chrono::steady_clock::now().time_since_epoch().count());

bool mp[1001][1001];

int dis(int x1, int y1, int x2, int y2) {
  return abs(x1 - x2) + abs(y1 - y2);
}

int d(int lx, int ly, int xa, int ya, int xb, int yb, int xc, int yc) {
  int d1 = dis(lx, ly, xa, ya);
  int d2 = dis(lx, ly, xb, yb);
  int d3 = dis(lx, ly, xc, yc);
  return d1 + d2 + d3;
}

void p(int xi, int yi, int xa, int ya) {
  // cout << xa << " " << ya << " print" << endl;
  int ax = xi, ay = yi;
  for(int i = 1; i <= xi - xa; ++i) {
    cout << --ax << " " << ay << endl;
  }
  for(int i = 1; i <= xa - xi; ++i) {
    cout << ++ax << " " << ay << endl;
  }
  for(int i = 1; i <= yi - ya; ++i) {
    cout << ax << " " << --ay << endl;
  }
  for(int i = 1; i <= ya - yi; ++i) {
    cout << ax << " " << ++ay << endl;
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int xa, ya, xb, yb, xc, yc;
  cin >> xa >> ya >> xb >> yb >> xc >> yc;
  int mn = -1;
  int xi = -1, yi = -1;
  for(int i = 0; i <= 1000; ++i) {
    for(int j = 0; j <= 1000; ++j) {
      if (mn == -1 || mn > d(i, j, xa, ya, xb, yb, xc, yc)) {
        mn = d(i, j, xa, ya, xb, yb, xc, yc);
        xi = i;
        yi = j;
      }
    }
  }
  // cout << xi << " " << yi << endl;
  cout << ++mn << endl;
  cout << xi << " " << yi << endl;
  p(xi, yi, xa, ya);
  p(xi, yi, xb, yb);
  p(xi, yi, xc, yc);
  return 0;
}
