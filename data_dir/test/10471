#ifdef LOCAL
//#  define _GLIBCXX_DEBUG
#else
#  define cerr __get_ce
#endif
#include <bits/stdc++.h>

using namespace std;
#define next __next
#define prev __prev
#define right __right
#define left __left
#define index __index

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;

typedef pair<int, int> ipair;
#define szof(x) ((int)(x).size())
#define bend(x) (x).begin(), (x).end()

int const INF = 100 + (int) 1e9;
ll const INFL = 100 + (ll) 1e18;
ld const PI = 3.141592653589793238462643L;
mt19937 tw(960172);

bool is_prime(ll x) { for (ll y = 2; y * y <= x; ++y) if (x % y == 0) return 0; return x > 1; }
ll rnd(ll x, ll y) { static uniform_int_distribution<ll> d; return d(tw) % (y - x + 1) + x; }
ll sqr(int a) { return (ll) a * a; } template<class T> T sqr(T const& a) { return a * a; }
ll gcd(ll a, ll b) { while (b > 0) { ll t = a % b; a = b; b = t; } return a; }

int const SZ = 1025;

void make(int a[SZ], int b[SZ], int x) {
    fill(b, b + SZ, 0);
    int par = 0;
    for (int i = 0; i < SZ; ++i) {
        int change = (a[i] + !par) / 2;
        b[i ^ x] += change;
        b[i] += a[i] - change;
        if (a[i] & 1)
            par ^= 1;
    }
}

int a[2][SZ];

void solve() {
    int n, k, x;
    scanf("%d%d%d", &n, &k, &x);
    for (int i = 0; i < n; ++i) {
        int t;
        scanf("%d", &t);
        ++a[0][t];
    }
    int cur = 0;
    while (k--) {
        make(a[cur], a[!cur], x);
        cur ^= 1;
    }
    int mi = INF, ma = -INF;
    for (int i = 0; i < SZ; ++i) {
        if (a[cur][i]) {
            mi = min(mi, i);
            ma = max(ma, i);
        }
    }
    cout << ma << ' ' << mi << '\n';
}

int main() {
    //freopen("", "r", stdin);
    //freopen("", "w", stdout);
    cout << setprecision(15) << fixed;
#ifdef LOCAL
    cerr << setprecision(6) << fixed;
#endif
    int tcnt = 1;
    //scanf("%d", &tcnt);
    for (int test = 1; test <= tcnt; ++test)
        solve();
#ifdef LOCAL
    cerr << "time: " << (ll) clock() * 1000 / CLOCKS_PER_SEC << " ms" << endl;
#endif
}
