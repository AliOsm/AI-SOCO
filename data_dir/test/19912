#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> PI;
int bit[1000010];
int n,k;
inline int lowbit(int _x){
	return _x&-_x;
}
inline void modify(int pos,int add){
	for(int i=pos;i<=n;i+=lowbit(i))
		bit[i]+=add;
}
inline int query(int pos){
	int res=0;
	for(int i=pos;i>0;i-=lowbit(i))
		res+=bit[i];
	return res;
}
inline int getPos(int pos){
	if(pos<1) return pos+n;
	if(pos>n) return pos-n;
	return pos;
}
inline int getSection(int l,int r){
	if(l>r) return query(n)-getSection(r+1,l-1);
	return query(r)-query(l-1);
}
int main(){
	scanf("%d%d",&n,&k);
	ll ans=1;
	if(min(n-k,k)==k){
		for(int i=0,x=1;i<n;i++,x=getPos(x+k)){
			int nxt=getPos(x+k);
			int L=x,R=nxt;
			if(L>R) swap(L,R);
			int edge;
			if(getPos(L+k)==R){
				int l=R,r=getPos(L-k);
				edge=getSection(l,r);
			}else{
				int l=L,r=getPos(R-k);
				edge=getSection(l,r);
			}
			edge=i-edge;
			modify(x,1);
			ans+=edge+1;
			printf("%lld ",ans);
		}
	}else{
		for(int i=0,x=1;i<n;i++,x=getPos(x+k)){
			int nxt=getPos(x+k);
			int L=x,R=nxt;
			if(L>R) swap(L,R);
			int edge;
			if(getPos(L+k)!=R){
				int l=getPos(R-k),r=L;
				edge=getSection(l,r);
			}else{
				int l=getPos(L-k),r=R;
				edge=getSection(l,r);
			}
			edge=i-edge;
			modify(x,1);
			ans+=edge+1;
			printf("%lld ",ans);
		}
	}
	puts("");
	return 0;
}