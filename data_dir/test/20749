#include <bits/stdc++.h>
using namespace std;
using lld = int64_t;
const int N = 200000 + 5;

int n;
vector< int > G[ N ];

void init () {
	cin >> n;
	for ( int i = 1 ; i < n ; ++ i ) {
		int u, v; cin >> u >> v;
		G[ u ].push_back( v );
		G[ v ].push_back( u );
	}
}

lld sz[ N ], odd[ N ], eve[ N ], dp[ N ];
void dfs1 ( int u, int f ) {
	sz[ u ] = 1; eve[ u ] = 1;
	for ( int v : G[ u ] ) if ( v != f ) {
		dfs1( v, u );
		sz[ u ] += sz[ v ];
		eve[ u ] += odd[ v ];
		odd[ u ] += eve[ v ];
		dp[ u ] += dp[ v ] + sz[ v ];
	}
}

lld ans;

void dfs2 ( int u, int f, lld one, lld two, lld s, lld val ) {
	sz[ u ] += s;
	eve[ u ] += one;
	odd[ u ] += two;
	dp[ u ] += val + s;
	ans += ( dp[ u ] + odd[ u ] ) >> 1;
	for ( int v : G[ u ] ) if ( v != f ) {
		lld a = sz[ v ], b = odd[ v ], c = eve[ v ], d = dp[ v ] + sz[ v ];
		sz[ u ] -= sz[ v ];
		eve[ u ] -= odd[ v ];
		odd[ u ] -= eve[ v ];
		dp[ u ]  -= dp[ v ] + sz[ v ];
		dfs2( v, u, odd[ u ], eve[ u ], sz[ u ], dp[ u ] );
		sz[ u ] += a; eve[ u ] += b; odd[ u ] += c; dp[ u ]  += d;
	}
}

void solve () {
	dfs1( 1, 1 );
	dfs2( 1, 1, 0, 0, 0, 0 );
	cout << ans / 2 << '\n';
}

int main() {
	ios_base::sync_with_stdio( false );
	cin.tie( nullptr );
	init(); solve();
	return 0;
}