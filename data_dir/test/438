#include <iostream>
#include<algorithm>
#include<string>
#include<map>
#include <iterator>
#include<iomanip>
#include<vector>
#include<cmath>
#include <cstdio>
#include<queue>
#include<stack>
#include<list>
#include<stdio.h>
#include<set>
#include <functional>

#define mod 1000000007
#define mod2 30000000
#define pa(a,b) make_pair(a,b)
#define f first
#define s seco3nd
#define pb(a)  push_back(a)
#define all(a) a.begin() , a.end()
#define mem(a, b) memset(a, b, sizeof(a))
#define LL  long long int
#define oo 1e9
#define pi 3.14159265359
#define eps  1e-9



LL maxx(LL a , LL b){ return a>b ?  a : b ;}
LL minn(LL a , LL b){ return a>b ?  b : a ;}

using namespace std;
int dx[] = {1 , 1 ,1 , 0 , 0  , -1 , -1  , -1  , 0 };
int dy[] = { -1 , 0  , 1 , 1 , -1 , 0 , 1 , -1 , 0 };
void boostIO()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
}
LL gcd(LL a, LL b) {
    return b == 0 ? a : gcd(b, a % b);
}
LL lcm(LL a , LL b )
{
    return (a*b)/gcd(a , b);
}
LL poww(LL base, LL exp){
  base %= mod;
  LL result = 1;
  while (exp > 0) {
    if (exp & 1) result = (result * base) % mod;
    base = (base * base) % mod;
    exp >>= 1;
  }
  return result;
}
const int Max_N = 100100 ;
int dist[101][Max_N] ;
vector<int>a[Max_N] , type[101] ;
void bfs(int t)
{
    for(int i = 0 ; i <= 100000 ; i++)
        dist[t][i] = 1e9 ;

    queue<int>q ;

    for(int i = 0 ; i < type[t].size() ; i++)
        q.push(type[t][i]) , dist[t][type[t][i]] = 0 ;

    while(!q.empty()){

        int node = q.front() ; q.pop() ;

        for(int i = 0 ; i < a[node].size() ; i++){
            if(dist[t][a[node][i]] > dist[t][node] + 1){
                dist[t][a[node][i]] = dist[t][node] + 1 ;
                q.push(a[node][i]) ;
            }
        }
    }

    return ;
}
int main()
{
    boostIO() ;
    int n , m , k , s ;
    cin >> n >> m >> k >> s ;
    for(int i = 1 ; i <= n ; i++){
        int x ; cin >> x ;
        type[x].pb(i) ;
    }

    for(int i = 0 ; i < m ; i++){
        int u , v ; cin >> u >> v ;
        a[u].pb(v) , a[v].pb(u) ;
    }

    for(int i = 1 ; i <= k ; i++){
        bfs(i) ;
    }

    for(int i = 1 ; i <= n ; i++){
        priority_queue<int>q;  int ans = 0 ;

        for(int j = 1 ; j <= k ; j++){
            q.push(-dist[j][i]) ;
        }

        for(int j = 0 ; j < s ; j++){
            ans = ans + -q.top() ;
            q.pop() ;
        }

        cout << ans << " " ;
    }
}
