#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)

const int N = 4004;
int Mat[N][N];
int Cost(int a, int b, int c, int d) {
	int ret = 0;
	ret += Mat[c][d];
	ret -= Mat[c][b - 1];
	ret -= Mat[a - 1][d];
	ret += Mat[a - 1][b - 1];
	return ret;
}
int dp[N][888], opt[N][888];
void dfs(int k, int l, int r, int optr) {
	if(l > r)	return;
	int m = l + r >> 1;
	dp[m][k] = 1e9;
	for(int i = opt[m][k - 1]; i <= optr && i < m; i ++) {
		if(dp[i][k - 1] == -1)	continue;
		if(dp[m][k] > dp[i][k - 1] + Cost(i + 1, i + 1, m, m) / 2) {
			dp[m][k] = dp[i][k - 1] + Cost(i + 1, i + 1, m, m) / 2;
			opt[m][k] = i;
		}
	}
	dfs(k, l, m - 1, opt[m][k]);
	dfs(k, m + 1, r, optr);
}
char buf[N << 4];
int main() {
	int n, K;
	scanf("%d%d%*c", &n, &K);
	for(int i = 1; i <= n; i ++) {
		gets(buf);
		for(int j = 1; j <= n; j ++) {
			Mat[i][j] = buf[j*2 - 2] - '0';
			Mat[i][j] += Mat[i - 1][j];
			Mat[i][j] += Mat[i][j - 1];
			Mat[i][j] -= Mat[i - 1][j - 1];
		}
	}
	memset(dp, -1, sizeof dp);
	dp[0][0] = 0;
	for(int k = 1; k <= K; k ++) {
		dfs(k, k, n, n);
	}
	printf("%d\n", dp[n][K]);
	return 0;
}

