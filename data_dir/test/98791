#include <bits/stdc++.h>
using namespace std;

int magic;
struct Query
{
    int l, r;
    int id;
    bool operator < (const Query & cmp) const {
        if(l / magic != cmp.l / magic)
            return l / magic < cmp.l / magic ;
        else 
            return r < cmp.r;
    }
    void in() {
        scanf("%d%d", &l, &r);
    }
}query[100010];
int n, m, k;
int cnt[1 << 20];
int a[100010];
int pre[100010];
long long ret[100010];
long long result;
inline void Add(int val) 
{
    result += cnt[k ^ val];
    cnt[val]++;
}
inline void Delete(int val)
{
    cnt[val]--;
    result -= cnt[val ^ k];
}
int main()
{
    scanf("%d%d%d", &n, &m, &k);
    magic = (int)sqrt(n * 1.0);

    for(int i = 1; i <= n; i++) {
        scanf("%d", &a[i]);
        pre[i] = pre[i - 1] ^ a[i];
    }
    for(int i = 0; i < m; i++) {
        query[i].in();
        query[i].l--;// clever to avoid details!
        query[i].id = i;
    }
    sort(query, query + m);
    int l = 1, r = 0;
    for(int i = 0; i < m; i++) {
        while(l < query[i].l) {
            Delete(pre[l++]);
        }
        while(l > query[i].l) {
            Add(pre[--l]);
        }
        while(r > query[i].r) {
            Delete(pre[r--]);
        }
        while(r < query[i].r) {
            Add(pre[++r]);
        }
        ret[query[i].id] = result;
    }
    for(int i = 0; i < m; i++) {
        printf("%I64d\n", ret[i]);
    }
    return 0;
}
