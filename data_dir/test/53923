/* ****revpro**** */
 
#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define endl	   '\n'
#define pii         pair<int,int>
#define vi          vector<ll>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll i=a;i<b;i++)
#define repr(i,a,b) for(ll i=b-1;i>=a;i--)    
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define mii	    map<ll,ll>
using namespace std;
 
#define N  200005
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;  
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 
vector<vector<pii>>  seg(4*N,vector<pii> (10));
ll a[N];
void build(ll cur,ll st,ll end)
{
    if(st==end)
    {
    	int t=a[st];
        rep(i,0,10){
        	seg[cur][i].F=hell;
        	seg[cur][i].S=hell;
        	if(t%10)
        		seg[cur][i].F=a[st];
        	t/=10;
        }
        return;
    }
    ll mid=(st+end)>>1;
    build((cur<<1),st,mid);
    build((cur<<1)+1,mid+1,end);
    rep(i,0,10){
    	seg[cur][i].F=min(seg[cur<<1][i].F,seg[cur<<1|1][i].F);
    	seg[cur][i].S=min(max(seg[cur<<1][i].F,seg[cur<<1|1][i].F),min(seg[cur<<1][i].S,seg[cur<<1|1][i].S));
    }                /* 1-change */
}
void update(ll cur,ll start,ll end,ll idx,ll val)
{
    if(start == end)
    {
    	int t=val;
        rep(i,0,10){
        	seg[cur][i].F=hell;
        	seg[cur][i].S=hell;
        	if(t%10)
        		seg[cur][i].F=val;
        	t/=10;
        }
    }
    else
    {
        ll mid = (start + end) >> 1;
        if(start <= idx and idx <= mid)
            update((cur<<1), start, mid, idx, val);
        else
            update((cur<<1)+1, mid+1, end, idx, val);
        rep(i,0,10){
    	seg[cur][i].F=min(seg[cur<<1][i].F,seg[cur<<1|1][i].F);
    	seg[cur][i].S=min(max(seg[cur<<1][i].F,seg[cur<<1|1][i].F),min(seg[cur<<1][i].S,seg[cur<<1|1][i].S));
    	} 
    }
}
 
vector <pii> query(ll cur,ll st,ll end,ll l,ll r)
{
    if(st>end||st>r||end<l) {vector<pii> v(10,{hell,hell}); return v;}
    if(st>=l&&end<=r) return seg[cur];
    ll mid=(st+end)>>1;
    vector<pii> ans1=query((cur<<1),st,mid,l,r);
    vector<pii> ans2=query((cur<<1)+1,mid+1,end,l,r);
    vector <pii> ans(10,{hell,hell});
     rep(i,0,10){
    	ans[i].F=min(ans1[i].F,ans2[i].F);
    	ans[i].S=min(max(ans1[i].F,ans2[i].F),min(ans1[i].S,ans2[i].S));
    }      
    return ans;                  /* 14-change */
}
 
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	#ifndef ONLINE_JUDGE
    	freopen("input.txt", "r", stdin);
	#endif
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{
		ll n,m;
		cin>>n>>m;
		rep(i,0,n) cin>>a[i];
		build(1,0,n-1);
		rep(i,0,m){
			int t;
			cin>>t;
			if(t==1){
				ll i,x;
				cin>>i>>x;
				update(1,0,n-1,i-1,x);
			}
			else{
				ll l,r;
				cin>>l>>r;
				vector <pii> ans=query(1,0,n-1,l-1,r-1);
				int mi=2*hell;
				rep(k,0,10){
					if((ans[k].F<hell)&&(ans[k].S<hell))
					mi=min(mi,ans[k].F+ans[k].S);
				}
				if(mi<2*(1e9+7)) cout<<mi<<' ';
					else cout<<-1<<' ';
			}
		}	
	}
	return 0;
}