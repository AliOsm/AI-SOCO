#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <hash_map>
#include <map>
#include <hash_set>
#include <set>
#include <stack>
#include <algorithm>
#include <sstream>
#include <queue>
#include <math.h>
using namespace std;
typedef long long LL;
#define mems(arr, val) memset(arr, val, sizeof(arr));
#define all(A) A.begin(), A.end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define INF 2000000000
#define SIZE 1000009
#define MOD 1000000007
#define mp(a, b) make_pair(a, b)
const int MAXN = 200200;
bool used[MAXN];
LL V[MAXN];
vector<vector<LL>> G;
LL ans = 0;

pair<LL, LL> dfs(int v)
{
	used[v] = true;
	pair<LL, LL> ansp = mp(0, 0);
	for(int i = 0; i < G[v].size(); ++i)
	{
		if (!used[G[v][i]])
		{
			pair<LL, LL> resp = dfs(G[v][i]);
			ansp.first = max(resp.first, ansp.first);
			ansp.second = max(resp.second, ansp.second);
		}
	}

	
	LL tV = V[v];
	tV += ansp.first;
	tV -= ansp.second;
	//ans += abs(tV);
	if (tV < 0) ansp.first += -tV; else ansp.second += abs(tV);
	if (v == 0) ans = ansp.second + ansp.first;
	return ansp;
}

int main()
{
#ifdef MY_SOL
	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
#endif
	
	LL n;
	cin>>n;
	G.resize(n);
	forn(i, 0, n - 1)
	{
		int from, to;
		cin>>from>>to;
		from--;
		to--;
		G[from].push_back(to);
		G[to].push_back(from);
	}

	forn(i, 0, n)
		cin>>V[i];

	dfs(0);
	cout<<ans;

	return 0;
}

