#include<bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 

#define ll long long

#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) memset(ar, val, sizeof(ar))
#define fill0(ar) fill((ar), 0)
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld long double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef pair<int, int> ii;
typedef pair<ii, int> iii;
typedef vector<ii> vii;
typedef vector<int> vi;

#define INF 1000000000000000000
#define PI 3.14159265358979323846L

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    ll n,k;
    cin >> n >> k;

    ll a[k];
    rep(i,k)
    {
    	cin >> a[i];
    }

    stack<ll> s;
    s.push(a[0]);

    ll p1 = 1;
    ll ans[n];

    rep(i,k)
    {
    	ans[i] = a[i]; 
    }

    ll now = k;

    ll bari = 1;
    bool used[n+1];
    fill0(used);
    used[a[0]] = 1;

    while(!s.empty())
    {
    	if(p1==k)
    	{
    		break;
    	}
    	else
    	{
    		while(!s.empty() && a[p1]>s.top())
    		{
    			if(bari != s.top())
    			{
    				cout << "-1" << endl;
    				return 0;
    			}
    			s.pop();
    			bari++;
    		}
    		s.push(a[p1]);
    		used[a[p1]] = 1;
    		p1++;
    	}
    }

	while(!s.empty() && bari==s.top())
	{
		s.pop();
		bari++;
	}

	ll last = 1;
	while(!s.empty())
	{
		frr(i,s.top(),last)
		{
			if(!used[i])
			{
				ans[now] = i;
				now++;
				used[i] = 1;
			}
		}
		last = s.top();
		s.pop();
	}

	frr(i,n,1)
	{
		if(!used[i])
		{
			ans[now] = i;
			now++;
			used[i] = 1;
		}
	}

	rep(i,n)
	{
		cout << ans[i] << " ";
	}
	cout << endl;
}
