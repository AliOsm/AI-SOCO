#pragma GCC optimize("omit-frame-pointer")
#pragma GCC optimize("unroll-loops")

#include <bits/stdc++.h>

using namespace std;

#define fr first
#define sc second
#define pb push_back
#define ins insert
#define input freopen("input.txt","r",stdin)
#define output freopen("output.txt","w",stdout)
#define mp make_pair
#define fast_io ios_base::sync_with_stdio(0);
#define form(i,a,n) for (int i=(a);i<(n);i++)
#define forn(i,a,n) for (int i=(a);i<(n);i++)
//iterator , unsigned, begin, end, count, continue
// fixed setprecision

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef vector<int> vi;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

string itosm(ll x){
    if(x == 0)
        return "0";
    string ans = "";
    while(x > 0){
        ans +=((x%10) + '0');
        x/=10;
    }
    reverse(ans.begin(), ans.end());
    return ans;
}

ll stoim(string str){
    ll ans = 0;
    ll k = 1;
    for(int i = str.length()-1; i >= 0; i--){
        ans+=(str[i]-'0')*k;
        k*=10;
    }
    return ans;
}

const ll infll = 1e18 + 3;
const int inf = 1009000999;
const double eps = 1e-7;
const int maxn = 262200;
const int baseint = 1000200013;
const ll basell = 1e18 + 3;
const ld PI = acos(-1.0);
const ll mod = 1e9 + 7;

int a[maxn];
int x, y, tim;
int t[maxn * 2][105];
pair<int, int> p[105];

void push(int v){
    for(int i = 1; i <= 100; i++){
        t[v * 2][i] = t[v][t[v * 2][i]];
        t[v * 2 + 1][i] = t[v][t[v * 2 + 1][i]];
    }
    for(int i = 1; i <= 100; i++)
        t[v][i] = i;
}

void build(int v, int l, int r){
    for(int i = 1; i <= 100; i++)
        t[v][i] = i;
    if(l == r)
        return;
    int c = (l + r)/2;
    build(v * 2, l, c);
    build(v * 2 + 1, c + 1, r);
}

void update(int v, int tl, int tr, int l, int r){
    if(l > r)
        return;
    if(tl == l && tr == r){
        for(int i = 1; i <= 100; i++)
            if(t[v][i] == x)
                t[v][i] = y;
        return;
    }
    push(v);
    int c = (tl + tr)/2;
    update(v * 2, tl, c, l, min(r, c));
    update(v * 2 + 1, c + 1, tr, max(l, c + 1), r);
}

int get(int v, int l, int r, int pos){
    if(l == r){
        return t[v][a[pos]];
    }
    push(v);
    int c = (l + r)/2;
    if(c >= pos)
        return get(v * 2, l, c, pos);
    else
        return get(v * 2 + 1, c + 1, r, pos);

}

void solve(){
    int n;
    cin >> n;
    for(int i = 0; i < n; i++)
        cin >> a[i];
    build(1, 0, n);
    int q;
    cin >> q;
    tim = 1;
    while(q--){
        int l, r;
        cin >> l >> r >> x >> y;
        l--;
        r--;
        update(1, 0, n, l, r);
        tim++;
    }
    for(int i = 0; i < n; i++)
        cout << get(1, 0, n, i) << " ";
}

int main(){
//    srand(228);
    srand(time(0));
    fast_io;
    cin.tie(0);
//    input;
//    output;
//    freopen("money.in", "r", stdin);
//    freopen("money.out", "w", stdout);
//     int t;
//     cin >> t;
//    scanf("%d", &t);
//    int cnt = 1;
//     while(t--){
//        printf("Case %d: ", cnt);
        solve();
//         cout << "\n";
//        puts("");
//        cnt++;
//     }
    return 0;
}
