#define _CRT_SECURE_NO_WARNINGS
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <string>

#define oo 1e9
#define pi 3.1415926536
#define all(x) x.begin(),x.end()
#define sorta(x) sort(all(x))
#define sortam(x,comp) sort(all(x),comp)
#define sortd(x) sort(x.rbegin(),x.rend())
#define pb push_back
#define mp make_pair
#define sf(x) scanf("%d", &x);
#define sfll(x) scanf("%I64d", &x);
#define pr(x) printf("%I64d\n", x);

typedef long long ll;
using namespace std;

int n, len, k;
ll solve(vector<ll>a) {
    ll ret, tret = 0, negSum = 0;
    multiset<ll>Kneg, neg;
    multiset<ll>::iterator it;

    for(int i = 0; i < len; i++) {
        tret += a[i];
        if(a[i] < 0) {
            Kneg.insert(a[i]);
            negSum += abs(a[i]);
            if(Kneg.size()>k) {
                it = Kneg.end(); it--;

                int tmp = *it;
                neg.insert(tmp);
                negSum -= abs(tmp);

                Kneg.erase(it);
            }
        }
    }
    ret = tret + 2LL * negSum;
    int del = 0;
    for(int i = len; i < n; i++, del++) {
        tret -= a[del];
        if(a[del] < 0) {
            it = neg.find(a[del]);
            if(it != neg.end()) neg.erase(it);
            else {
                negSum -= abs(a[del]);
                Kneg.erase(Kneg.find(a[del]));

                if(neg.size()) {
                    negSum += abs(*neg.begin());
                    Kneg.insert(*neg.begin());
                    neg.erase(neg.begin());
                }
            }
        }

        tret += a[i];
        if(a[i] < 0) {
            Kneg.insert(a[i]);
            negSum += abs(a[i]);
            if(Kneg.size()>k) {
                it = Kneg.end(); it--;

                int tmp = *it;
                neg.insert(tmp);
                negSum -= abs(tmp);

                Kneg.erase(it);
            }
        }

        ret = max(ret, tret + 2LL * negSum);
    }

    return ret;
}

int main() {
    sf(n); sf(len);
    vector<ll>a(n), b(n);
    for(int i = 0; i < n; scanf("%I64d", &a[i++]));
    for(int i = 0; i < n; i++) b[i] = -a[i];

    sf(k);

    pr(max(solve(a),solve(b)));
    return 0;
}
