#include <bits/stdc++.h>
using namespace std;
#define mp make_pair
#define pb push_back
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(),(x).end()
#define FOR(it,c) for (__typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
typedef long long ll;
const int oo = (int) 1e9;
const int mod = (int) 1e9 + 7;
const double PI = acos(-1.0);

const int MAX = 300001, L = 20;

int gcd(int a,int b){ if(!b) return a; return gcd(b, a%b); }

int n, arr[MAX], l[MAX];
vector<int> ans;
int SparceGCD[MAX][L], SparceMIN[MAX][L];

void precompute()
{
    l[1] = 0;
    for(int i=2;i<=n;i++)
        l[i] = 1 + l[i/2];
    for(int i=0;i<n;i++){
        SparceMIN[i][0] = arr[i];
        SparceGCD[i][0] = arr[i];
    }
    for(int j = 1 ; j <= l[n] ; j++)
        for(int i = 0; i+(1<<j) <= n ; i++){
            SparceMIN[i][j] = min(SparceMIN[i][j-1], SparceMIN[i+(1<<(j-1))][j-1]);
            SparceGCD[i][j] = gcd(SparceGCD[i][j-1], SparceGCD[i+(1<<(j-1))][j-1]);
        }
}

int MIN(int s,int e)
{
    int Log = l[e-s+1];
    return min(SparceMIN[s][Log], SparceMIN[e-(1<<Log)+1][Log]);
}

int GCD(int s,int e)
{
    int Log = l[e-s+1];
    return gcd(SparceGCD[s][Log], SparceGCD[e-(1<<Log)+1][Log]);
}

bool check(int l)
{
    vector<int> temp;
    bool res = false;
    for(int i=0;i+l<n;i++){
        if(GCD(i,i+l) == MIN(i,i+l)){
            res = true;
            temp.pb(i);
        }
    }
    if(res) ans = temp;
    return res;
}

int main(int argc, char* argv[])
{
    scanf("%d",&n);
    for(int i=0;i<n;i++)
        scanf("%d",&arr[i]);
    precompute();
//    while(true){
//        int l,r; cin >> l >> r;
//        cout << MIN(l, r) << endl;
//    }
    int mx = -1;
    int l = 0, r = n-1;
    while(l <= r){
        int mid = (l+r)/2;
        if(check(mid)) mx = mid, l = mid+1;
        else r = mid-1;
    }
    printf("%d %d\n", sz(ans), mx);
    for(int i=0;i<sz(ans);i++)
        printf("%d%c", ans[i]+1, " \n"[i==sz(ans)-1]);
    return 0;
}
