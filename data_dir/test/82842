/*
LANG: C++
TASK: kimbits
*/
#include <iostream>
#include <fstream>
#include <algorithm>
#include <iomanip>
#include <random>
#include <ctime>
#include <bitset>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <cmath>
#include <climits>
#include <cstring>
#include <queue>
#include <deque>
#include <stack>
#include <list>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma GCC optimize("O3")
#define ld long double
#define ull unsigned long long
#define ll long long
#define pb push_back
#define mp make_pair
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pld pair<ll, double>
#define all(x) x.begin(), x.end()
#define fast_io cout.tie(0), cin.tie(0), ios_base::sync_with_stdio(0)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
using namespace std;
ll sqr(ll a) { return a * a; };
ll gcd(ll a, ll b) { return !a ? b : gcd(b % a, a); }
ll binpow(ll a, ll b, ll mod) { return b ? (b % 2 ? (a * (sqr(binpow(a, b / 2, mod)) % mod)) % mod : sqr(binpow(a, b / 2, mod)) % mod) : 1; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct str { ll x, y, z; };
str a[200001];
pll z[200001];
ll ans[200001], mn[200001];
bool cmp(str a, str b) { return a.z < b.z; }
unordered_map<ll, vector<ll>> ump;
vector<ll> vc;

int main()
{
    //freopen("kimbits.in", "r", stdin), freopen("kimbits.out", "w", stdout);
    fast_io;
    ll n, m, i, j, l = 1, fs, sc, nans = 0, s1, s2;
    cin >> n >> m;
    for (i = 1; i < n; i++) cin >> a[i].x >> a[i].y >> a[i].z;
    for (i = 1; i <= m; i++) cin >> z[i].first, z[i].second = i;
    sort(z + 1, z + m + 1);
    sort(a + 1, a + n, cmp);
    for (i = 1; i <= n; i++) mn[i] = i, ump.insert({i, vc}), ump[i].pb(i);
    for (i = 1; i <= m; i++)
    {
        for (j = l; a[j].z <= z[i].first && j < n; j++)
        {
            if (ump.size() == 1)
            {
                nans = n * (n - 1) / 2;
                break;
            }
            fs = mn[a[j].x], sc = mn[a[j].y];
            s1 = ump[fs].size(), s2 = ump[sc].size();
            //cout << i << ' ' << j << ' ' << fs << ' ' << sc << ' ' << s1 << ' ' << s2 << ' ' << nans << ' ' << a[j].x << ' ' << a[j].y << '\n';
            if (s1 <= s2)
            {
                for (auto f: ump[fs])
                {
                    mn[f] = sc;
                    ump[sc].pb(f);
                }
                ump.erase(fs);
            }
            else
            {
                for (auto f: ump[sc])
                {
                    mn[f] = fs;
                    ump[fs].pb(f);
                }
                ump.erase(sc);
            }
            nans = nans - s1 * (s1 - 1) / 2 - s2 * (s2 - 1) / 2 + (s1 + s2) * (s1 + s2 - 1) / 2;
            //cout << i << ' ' << j << ' ' << fs << ' ' << sc << ' ' << s1 << ' ' << s2 << ' ' << nans << '\n';
        }
        l = j;
        ans[z[i].second] = nans;
    }
    for (i = 1; i <= m; i++) cout << ans[i] << ' ';
    return 0;
}