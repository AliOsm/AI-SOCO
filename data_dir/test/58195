#include <bits/stdc++.h>
using namespace std;

const int MAXN = (int)2e5;
const int INF = (int)1e9;
const double PI = acos(0.0) * 2.0;

int rev(int x, int n) {
    int y = 0;
    while (n) {
        n /= 2;
        if (x % 2) {
            y = y * 2 + 1;
        } else {
            y = y * 2;
        }
        x /= 2;
    }
    return y;
}

void fft(vector <complex <double> > &a, int inverse) {
    if (a.size() == 1) {
        return;
    }
    auto b = a;
    for (int i = 0; i < a.size(); ++i) {
        b[i] = a[rev(i, a.size() / 2)];
    }
    swap(a, b);
    for (int len = 2; len <= a.size(); len *= 2) {
        double ang = 2.0 * PI / len * inverse;
        complex <double> w0(cos(ang), sin(ang));
        for (int i = 0; i < a.size(); i += len) {
            complex <double> w(1);
            for (int j = 0; j < len / 2; ++j) {
                auto u = a[i + j], v = a[i + j + len / 2];
                //cerr << u << ' ' << v << endl;
                a[i + j] = u + v * w;
                a[i + j + len / 2] = u - v * w;
                w *= w0;
            }
        }
    }
    if (inverse == -1) {
        for (int i = 0; i < a.size(); ++i) {
            a[i] /= a.size();
        }
    }
}

vector <int> multiply(vector <int> a, vector <int> b) {
    vector <complex <double> > A(a.begin(), a.end()), B(b.begin(), b.end());
    int deg2 = 1;
    while (deg2 < (int)a.size() && deg2 < (int)b.size()) {
        deg2 *= 2;
    }
    deg2 *= 2;
    while ((int)A.size() < deg2) {
        A.push_back(0);
    }
    while ((int)B.size() < deg2) {
        B.push_back(0);
    }
    fft(A, 1);
    fft(B, 1);
    /*cerr << "A" << endl;
    for (int i = 0; i < A.size(); ++i) {
        cerr << A[i] << ' ';
    }
    cerr << endl;
    cerr << "B" << endl;
    for (int i = 0; i < B.size(); ++i) {
        cerr << B[i] << ' ';
    }
    cerr << endl;*/
    for (int i = 0; i < deg2; ++i) {
        A[i] *= B[i];
    }
    fft(A, -1);
    vector <int> result;
    for (int i = 0; i < deg2; ++i) {
        result.push_back(A[i].real() + 0.5);
    }
    return result;
}

int main() {
    cerr.precision(10);
    cerr << fixed;
    //freopen("input.txt", "r", stdin);
    //freopen("bad.txt", "w", stdout);
    ios_base::sync_with_stdio(0);
/*    int n, m;
    cin >> n >> m;
    vector <int> a(n), b(m);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    for (int i = 0; i < m; ++i) {
        cin >> b[i];
    }
    auto c = multiply(a, b);
    for (int i = 0; i < (int)c.size(); ++i) {
        cout << c[i] << ' ';
    }
}
*/









    int n, m, k;
    string s, t;
    cin >> n >> m >> k >> s >> t;
    string C = "ATGC";
    vector <int> a[4], b[4];
    for (int x = 0; x < (int)C.size(); ++x) {
        a[x].resize(n);
        b[x].resize(n);
        int last = -INF;
        for (int i = 0; i < n; ++i) {
            if (s[i] == C[x]) {
                last = i;
            }
            if (i - last <= k) {
                a[x][i] = 1;
            }
        }
        last = INF;
        for (int i = n - 1; i >= 0; --i) {
            if (s[i] == C[x]) {
                last = i;
            }
            if (last - i <= k) {
                a[x][i] = 1;
            }
        }
        for (int i = 0; i < m; ++i) {
            if (t[i] == C[x]) {
                b[x][i] = 1;
            }
        }
    }
    vector <int> c[4];
    for (int x = 0; x < 4; ++x) {
        reverse(a[x].begin(), a[x].end());
        c[x] = multiply(a[x], b[x]);
    }
    int cnt[4] = { 0, 0, 0, 0 };
    for (int x = 0; x < 4; ++x) {
        for (int i = 0; i < (int)b[x].size(); ++i) {
            cnt[x] += b[x][i];
        }
    }
    int ans = 0;
    /*cerr << "A\n";
    for (int x = 0; x < 4; ++x) {
        cerr << C[x] << ' ';
        for (int i = 0; i < a[x].size(); ++i) {
            cerr << a[x][i] << ' ';
        }
        cerr << endl;
    }
    cerr << "B\n";
    for (int x = 0; x < 4; ++x) {
        cerr << C[x] << ' ';
        for (int i = 0; i < b[x].size(); ++i) {
            cerr << b[x][i] << ' ';
        }
        cerr << endl;
    }
    cerr << "C" << endl;
    for (int x = 0; x < 4; ++x) {
        cerr << C[x] << ' ';
        for (int i = 0; i < c[x].size(); ++i) {
            cerr << c[x][i] << ' ';
        }
        cerr << endl;
    }
    cerr << "CNT" << endl;
    for (int x = 0; x < 4; ++x) {
        cerr << C[x] << ' ' << cnt[x] << endl;
    }
    for (int i = 0; i < 16; ++i) {
        cerr << rev(i, 16) << endl;
    }*/
    for (int pos = 0; pos + m - 1 < n; ++pos) {
        bool f = 1;
        //cerr << pos << endl;
        for (int x = 0; x < 4; ++x) {
            if (c[x][n - 1 - pos] != cnt[x]) {
                f = 0;
                //cerr << x << endl;
                break;
            }
        }
        ans += f;
    }
    cout << ans << endl;
}