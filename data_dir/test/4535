#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<string>
#include<math.h>
#include<queue>
#include<stack>
#include<stdio.h>
#include<map>
#include<set>
#include<memory.h>
#include<algorithm>
#include<vector>
using namespace std;
typedef long long ll;
ll gcd(ll a, ll b){
    if (!b)
        return a;
    return gcd(b, a%b);
}
ll lcm(ll a, ll b){
    return b / gcd(a, b)*a;
}
ll ABS(ll x){
    return (x < 0) ? -x : x;
}
#define FOR(I,N) for(int(i)=0;i<int(N);++i)
#define FORK(I,N,K) for(int(i)=0;i<int(N);i+=int(K))

int n, m, q, x, y;
vector<int>v[300001];
int par[300001];
int lng[300001];
int find(int x){
    if (par[x] == x)
        return x;
    return par[x] = find(par[x]);
}
int vs, vis[300001];
int mx , res;
bool done[300001];
void dfs(int cur, int cost){
    done[cur] = 1;
    vis[cur] = vs;
    if (cost>mx){
        mx = cost;
        res = cur;
    }
    for (int i = 0; i<v[cur].size(); ++i)
    if (vis[v[cur][i]]!=vs)
        dfs(v[cur][i], cost + 1);
}
int main(){
    scanf("%d%d%d", &n, &q, &m);
    for (int i = 1; i <= n; ++i)
        par[i] = i;
    while (q--){
        scanf("%d%d", &x, &y);
        v[x].push_back(y);
        v[y].push_back(x);
        int a = find(x);
        int b = find(y);
        if (a != b)
            par[a] = b;
    }
    for (int i = 1; i <= n;++i)
    if (!done[i]){
        ++vs;
        mx = -1;
        res = i;
        dfs(i, 0);
        ++vs;
        mx = -1;
        dfs(res, 0);
        lng[find(i)] = mx;
    }
    while (m--){
        scanf("%d", &q);
        if (q - 1){
            scanf("%d%d", &x, &y);
            int a = find(x);
            int b = find(y);
            if (a != b){
                int A = lng[a];
                int B = lng[b];
                par[a] = b;
                lng[b] = max(A + B - A / 2 - B / 2 + 1, max(A,B));
            }
        }
        else{
            scanf("%d", &x);
            printf("%d\n", lng[find(x)]);
        }
    }
}