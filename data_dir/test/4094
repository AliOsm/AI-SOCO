#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define ull unsigned long long
#define ld long double
#define endl '\n'
#define TIME 1.0*clock()/CLOCKS_PER_SEC
#define pii pair < int , int >
#define Endl '\n'

#pragma GCC optimize("Ofast")

using namespace std;
using namespace __gnu_pbds;

template <typename T> using ordered_set = tree <T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 gen(chrono::system_clock::now().time_since_epoch().count());

const ll mod = 1e9 + 7;
const int FFTM = 998244353;

const int SX[4] = {0 , 1 , -1 , 0};
const int SY[4] = {1 , 0 , 0 , -1};
const int rx[8] = {1, -1, 0, 0, 1, 1, -1, -1};
const int ry[8] = {0, 0, 1, -1, 1, -1, 1, -1};
const int kx[8] = {1, 1, -1, -1, 2, 2, -2, -2};
const int ky[8] = {2, -2, 2, -2, 1, -1, 1, -1};

typedef cc_hash_table< int, int, hash<int>, equal_to<int>, direct_mask_range_hashing<int>, hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;

string s;
int n;

cc_hash_table < int, vector < int > > mp;

class DO{
private:
    vector < int > t;
public:
    DO(int n){
        t.resize(4 * n);
    }

    void build(int v, int vl, int vr, vector < int > &a){
        if (vl == vr){
            t[v] = a[vl];
            return;
        }
        int mid = vl + ((vr - vl) >> 1);
        build(2 * v + 1, vl, mid, a);
        build(2 * v + 2, mid + 1, vr, a);
        t[v] = min(t[2 * v + 1], t[2 * v + 2]);
    }

    int get(int v, int vl, int vr, int l, int r){
        if (vl >= l && vr <= r)return t[v];
        if (vl > r || vr < l)return 1e9;
        int mid = vl + ((vr - vl) >> 1);
        int q1 = get(2 * v + 1, vl, mid, l, r);
        int q2 = get(2 * v + 2, mid + 1, vr, l, r);
        return min(q1, q2);
    }
};

vector < int > a;

int mx = 0, kol = 1;

int32_t main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output1.txt", "w", stdout);
#else
//    freopen("strings.in", "r", stdin);
//    freopen("strings.out", "w", stdout);
#endif
    cin >> s;
    n = s.size();
    a.resize(n);
    for (int i = 0;i < n; ++i){
        if (!i)a[i] = (s[i] == '(' ? 1 : -1);
        else a[i] = a[i - 1] + (s[i] == '(' ? 1 : -1);
        mp[a[i]].pb(i);
    }
    DO A(n);
    A.build(0, 0, n - 1, a);
//    for (auto to : a){
//        cout << to << " ";
//    }
//    cout << endl;
    for (auto to : mp){
        if (to.S.size() == 1)continue;
        int mn = to.F - 1;
        if (mp[mn].size() == 0)continue;
        int pos = 0;
//        cerr << to.F << " " << mn << endl;
        for (int i = 0;i < to.S.size(); ++i){
            int l = to.S[i];
            if (s[l] == ')')continue;
            int r = -1;
            int kk = pos;
//            cerr << l << endl;
            for (int j = pos;j < mp[mn].size(); ++j){
                kk = j;
                if (mp[mn][j] < l)continue;
                r = mp[mn][j];
//                cerr << "!" << r << endl;
                if (A.get(0, 0, n - 1, l, r) == mn){
                    if (r - l + 1 == mx)kol++;
                    else if (r - l + 1 > mx)mx = r - l + 1, kol = 1;
                }else break;
            }
            pos = kk;
        }
    }
    cout << mx << " " << kol << endl;
    return 0;
}
