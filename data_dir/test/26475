#pragma GCC target("avx2")
#pragma GCC optimize("O3")
   
#include <x86intrin.h>
#include <bits/stdc++.h>   
 
using namespace std;
     
#define F first

#define S second
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)2e5 + 123;
const ll inf = (ll)3e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;                  
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};
                                                               
int n, m, cl[N], used[N], p[N], path[5001][5001];
vector <pii> g[N]; 

void dfs (int v, int pr = 0) {
   p[v] = pr;
   used[v] = 1;
   for (auto it : g[v]) {
      int to = it.F, id = it.S;
      if (!cl[id]) cl[id] = 1;
      if (!used[to]) dfs (to, v);
      else if (used[to] == 1) {
         int x = v, last = -1;
         bool ok = 0;
         while (x != to) {
            if (cl[path[p[x]][x]] != last && last != -1) ok = 1;
            last = cl[path[p[x]][x]];
            x = p[x];
         }
         if (!ok) cl[path[v][to]] = last + 1;
      }
   }
   used[v] = 2;
}

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                     

inline void Solve () {
   cin >> n >> m;
   for (int i = 1; i <= m; i ++) {
      int x, y;
      cin >> x >> y;
      path[x][y] = i;
      g[x].pb ({y, i});
   }
   for (int i = 1; i <= n; i ++) {
      if (!used[i])
         dfs (i);
   }
   cout << *max_element (cl + 1, cl + m + 1) << endl;
   for (int i = 1; i <= m; i ++) cout << cl[i] << ' ';
}                                     

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
// cin >> tt;                                                                                
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
