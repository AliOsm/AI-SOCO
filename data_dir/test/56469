#include <iostream>
#include <algorithm>
#include <string>
#include <string.h>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <functional>
#include <utility>
#include <iostream>
#include <stdlib.h>
#include <vector>
#define ll long long
using namespace std;
ll d[10000][2];
string status(int x, int y, int x1, int y1)
{
	if (x == x1)
	{
		if (y1 > y)
		{
			return "up";
		}
		else
		{
			return "down";
		}

	}
	else if (y == y1)
	{
		if (x1 > x)
		{
			return "right";
		}
		else
		{
			return "left";
		}
	}
}
bool solve(string w, string h)
{
	if (w == "up"&&h == "right")return 1;
	if (w == "left"&&h == "up")return 1;
	if (w == "down"&&h == "left")return 1;
	if (w == "right"&&h == "down")return 1;
	return 0;
}
bool solve2(string w, string h)
{
	if (w == "up"&&h == "left")return 1;
	if (w == "left"&&h == "down")return 1;
	if (w == "down"&&h == "right")return 1;
	if (w == "right"&&h == "up")return 1;
	return 0;
}
int main()
{
	ll n;
	cin >> n;
	for (int i = 0; i < n + 1; i++)
	{
		cin >> d[i][0] >> d[i][1];
	}
	string s = "up";
	string newstate;
	ll tot = 0;
	if (d[n][0] < d[0][0])
	{
		for (int i = 1; i < n; i++)
		{
			newstate = status(d[i][0], d[i][1], d[i + 1][0], d[i + 1][1]);
			if (solve(s, newstate))tot++;
			s = newstate;
		}
	}
	else
	{
		for (int i = 1; i < n; i++)
		{
			newstate = status(d[i][0], d[i][1], d[i + 1][0], d[i + 1][1]);
			if (solve2(s, newstate))tot++;
			s = newstate;
		}
	}

	cout << tot;
}
