//I/O
#include<iostream>
#include<sstream>
//Containers
#include<deque>
#include<initializer_list>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<unordered_map>
#include<unordered_set>
#include<vector>
//C library
#include<cmath>
#include<cassert>
#include<cctype>
#include<climits>
#include<cmath>
#include<cstddef>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
//Miscellaneous
#include<algorithm>
#include<bitset>
#include<complex>
#include<functional>
#include<iomanip>
#include<iterator>
#include<limits>
#include<numeric>
#include<random>
#include<tuple>
#include<utility>

//#include<ext/pb_ds/assoc_container.hpp>
//#include<ext/pb_ds/tree_policy.hpp>

#define endl '\n'
#define rep(i, a, b) for(int i=(a); i<(b); i++)
#define repi(i, a, b) for(int i=(a); i>(b); i--)
#define db(x) (cerr << #x << ": " << (x) << '\n')
#define sync ios_base::sync_with_stdio(false), cin.tie(NULL)
#define tests(t) int t; cin >> t; while(t--)
#define iceil(n, x) (((n) + (x) - 1) / (x))
#define ll long long
#define gcd __gcd
#define pb push_back
#define pf push_front
#define pob pop_back
#define pof pop_front
#define sz size()
#define all(v) (v).begin(), (v).end()
#define uni(v) sort(all(v)); (v).erase(unique(all(v)), (v).end());
#define pii pair<int, int>
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vi>
#define fi first
#define se second
#define umap unordered_map
#define uset unordered_set
#define pqueue priority_queue
#define si(a) scanf("%d", &a)
#define sll(a) scanf("%lld", &a)
#define bitcount(x) __builtin_popcount(x)
#define cps CLOCKS_PER_SEC
#define PI acos(-1.0)
#define EPS 1e-9
#define mod 1000000007
#define MOD 1000000007
#define N 100005
using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

template<typename T>
using minpq = priority_queue<T, vector<T>, greater<T>>;

template<typename T>
using maxpq = priority_queue<T>;

//All indexing is 0-based
//using namespace __gnu_pbds;
//typedef tree<int, null_type, less<int>, rb_tree_tag,
             //tree_order_statistics_node_update> ordered_set;
//methods: find_by_order(k); & order_of_key(k);
//To make it an ordered_multiset, use pairs of (value, time_of_insertion)
//to distinguish values which are similar.

//Returns no. of values x for which ceil(n / x) == y (y must be > 1).
inline ll CC(ll n, ll y) { return iceil(n, y-1) - iceil(n, y); }

//Returns no. of values x for which floor(n / x) == y
inline ll FF(ll n, ll y) { return n / y - n / (y+1); }

//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c;}
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c;}
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p;}

#define int ll
//#define trace(...) 42

inline int nC2(int n) {
    return n * (n-1) / 2;
}

int n, pre[N], g[N], mn[N], cnt[N];

int query(int l, int r) {
    return pre[r] ^ (l ? pre[l-1] : 0);
}

int G(int i) {
    int j, k = 2; //k: No. of piles into which we are splitting the i coins
    bool ok = 0;
    vi v;
    while(i - nC2(k) > 0) {
        int kk = i - nC2(k);
        if(kk % k == 0) {
            j = kk / k; //j: No. of coins in the smallest resultant pile
            int x = query(j, j+k-1);
            v.pb(x); //s.insert(x);
            if(!ok && !x) {
                mn[i] = k;
                ok = 1;
            }
        }
        k++;
    }
    cnt[i] = k;
    j = 0;
    vector<bool> b(v.sz+1);
    for(int i : v) if(i < v.sz) b[i] = 1;
    while(1) {
        if(!b[j++])
            return --j;
    }
}
    

int32_t main()
{   
    #ifndef ONLINE_JUDGE
        freopen("/home/tarun/Desktop/input.txt", "r", stdin);
    //  freopen("/storage/emulated/output.txt", "w", stdout);
    #endif
    sync;
    clock_t clk = clock();
    cerr << "I will return...\n";
    
    cin >> n;
    g[0] = g[1] = 0;
    rep(i, 2, n+1) {
        g[i] = G(i);
        pre[i] = pre[i-1] ^ g[i];
    }
    
    if(!g[n]) cout << -1 << endl;
    else      cout << mn[n] << endl;

    cerr << "...don't you ever hang your head.\n";
    cerr << "Time (in ms): " << double(clock() - clk) * 1000.0 / cps << '\n';
}

//Compile using:
//g++ -o filename.exe --std=c++11 filename.cpp
//Use -D CP for defining a macro CP in the local environment



