#include <bits/stdc++.h>
#define mp make_pair
#define pb push_back
#define fi first
#define sc second
using namespace std;

int n,x,y,k,L[100100],T[100100],P[100100][20],cnt[100100],ans[100100]={0};
vector<int> graph[100100],vec[100100];
map<pair<int,int>,int> abc;

void dfs(int u,int lvl,int p){
	T[u]=p;
	L[u]=lvl;
	for(int i=0;i<graph[u].size();i++){
		int v = graph[u][i];
		if(v==p) continue;
		dfs(v,lvl+1,u);
	}
}

void build(){
	for(int i=0;i<n;i++){
		for(int j=0;(1<<j)<n;j++){
			P[i][j]=-1;
		}
	}
	for(int i=0;i<n;i++) P[i][0] = T[i];
	for(int j=1;(1<<j)<n;j++){
		for(int i=0;i<n;i++){
			if(P[i][j-1]!=-1) P[i][j]=P[P[i][j-1]][j-1];
		}
	}
}

int lca(int u,int v){
	if(L[u]<L[v]) swap(u,v);
	int log;
	for(log=1;(1<<log)<=L[u];log++);
	log--;
	
	for(int i=log;i>=0;i--){
		if(L[u]-(1<<i)>=L[v]) u=P[u][i];
	}
	if(u==v) return u;
	
	for(int i=log;i>=0;i--){
		if(P[u][i]!=-1 && P[u][i]!=P[v][i]){
			u=P[u][i];
			v=P[v][i];
		}
	}
	return T[u];
}

int dist(int u,int v){
	return L[u]+L[v]-2*L[lca(u,v)];
}

int main() {
	cin>>n;
	for(int i=1;i<n;i++){
		cin>>x>>y;
		x--,y--;
		graph[x].pb(y);
		graph[y].pb(x);
		abc[mp(x,y)]=i;
		abc[mp(y,x)]=i;
	}
	dfs(0,0,0);
	build();
	int mxLvl=0;
	for(int i=0;i<n;i++){
		vec[L[i]].pb(i);
		mxLvl=max(mxLvl,L[i]);
	}
	cin>>k;
	for(int i=0;i<k;i++){
		cin>>x>>y;
		x--,y--;
		cnt[x]++,cnt[y]++,cnt[lca(x,y)]-=2;
	}
	for(int i=mxLvl;i>=0;i--){
		for(int j=0;j<vec[i].size();j++){
			int u = vec[i][j];
			int v = T[u];
			if(abc.find(mp(u,v))!=abc.end()) ans[abc[mp(u,v)]]=cnt[u];
			cnt[v]+=cnt[u];
		}
	}
	//for(int i=0;i<n;i++) cout<<cnt[i]<<" ";cout<<endl;
	for(int i=1;i<n;i++) cout<<ans[i]<<" ";
	cout<<endl;
	return 0;
}