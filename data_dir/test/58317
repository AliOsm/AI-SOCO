#include <iostream>
#include <stdio.h>
#include<bits/stdc++.h>
#define ll long long
#define read freopen("input/test (4).txt","r",stdin)
#define write freopen("output/test (4).txt","w",stdout)
#define fr first
#define sc second
#define ii pair < int , int >
#define mp make_pair
using namespace std;
/// Segment Tree
const int max_node = 3001000;
int tree[max_node];
int A[max_node];
void build(int node , int start , int _end)
{
    if(start == _end)
    {
        /// Leaf node will have a single element
        tree[node] = A[start];
    }
    else
    {
        int mid = (start+_end)/2;
        /// Recurse on the left child
        build(node*2   ,start ,mid );
        /// Recurse on the right child
        build(node*2+1 ,mid+1 ,_end);
        /// Internal node will have the sum of both of its children
        tree[node] = tree[node*2]+tree[node*2+1];
    }
}

void update(int node , int start , int _end , int idx , int val)
{
    if(start == _end)
    {
        A[idx] += val;
        tree[node] += val;
    }
    else
    {
        int mid = (start+_end)/2;
        if(start <= idx && idx <= mid)
        {
            /// If idx is in the left child, recurse on the left child
            update(node*2,start,mid,idx,val);
        }
        else
        {
            /// if idx is in the right child, recurse on the right child
            update(node*2+1,mid+1,_end,idx,val);
        }
        /// Internal node will have the sum of both of its children
        tree[node] = tree[2*node]+tree[2*node+1];
    }
 }

int query(int node , int start , int _end, int l , int r)
{
    if(r < start || l > _end)
    {
        /// range represented by a node is completely outside the given range
        return 0;
    }
    if(l <= start && _end<= r)
    {
        /// range represented by a node is completely inside the given range
        return tree[node];
    }
    /// range represented by a node is partially inside and partially outside the given range
    int mid = (start+_end)/2;
    int x1 = query(2*node  ,start , mid , l , r);
    int x2 = query(2*node+1,mid+1 ,_end , l , r);
    return (x1+x2);
}
int main()
{
 int n,m;
 cin>>n>>m;
 for(int i=1;i<=n;i++)
 {
     A[i] = 0;
 }
 int P = 1;
 ll sum = 1;
 if(m*2 > n)
    m = n-m;
 for(int i=0;i<n;i++)
 {
     int R , L;
     int last = P;
     R = P+1;
     if(R > n)
     {
         R = 1;
     }
     P+=m;
     if(P > n)
     {
         P = P%n;
     }
     L = P-1;
     if(L == 0)
     {
         L = n;
     }
     if(R <= L)
         {
             sum = sum+1+query(1,1,n,R,L);
             update(1,1,n,P,1);
             update(1,1,n,last,1);
         }
     else
     {
         sum  = sum+1+query(1,1,n,R,n);
         sum += query(1,1,n,1,L);
         update(1,1,n,P,1);
         update(1,1,n,last,1);
     }
     printf("%I64d ",sum);
 }
}
