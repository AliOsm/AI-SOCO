#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define x first
#define y second
#define ndl '\n'
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define bit __builtin_popcount
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()

using namespace std;
using namespace __gnu_pbds;

template<typename T> using indexed_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef pair<int, ll> pil;
typedef pair<ll, int> pli;
typedef pair<int, ull> piu;
typedef vector<vector<int>> matrix;

const ll INF = 1e18 + 123;
const ld EPS = 1e-9;
const int inf = 1e9 + 123;
const int MOD = 998244353;
const int N = 5e5 + 123;
const int M = 1e6 + 123;
const double pi = acos(-1.0);
const int dx[] = {0, 0, 1, -1};
const int dy[] = {1, -1, 0, 0};

int f[100], rf[100];

int c[30];

int binpow(int a, int b){
    int res = 1;
    while (b){
        if (b&1){
            res = 1ll * a * res % MOD;
        }
        a = 1ll * a * a % MOD;
        b >>= 1;
    }
    return res;

}

void solve(){
    f[0] = rf[0] = 1;
    for (int i = 1; i < 100; i++){
        f[i] = ll(i) * f[i-1] % MOD;
        rf[i] = binpow(f[i], MOD-2);
    }
    ll n;
    cin >> n;
    vector<ll> p;
    for (int i = 2; i <= n/i; i++){
        if (n%i == 0){
            p.pb(i);
            while (n%i == 0){
                n /= i;
            }
        }
    }
    if (n > 1){
        p.pb(n);
    }
    int q;
    cin >> q;
    while (q--){
        ll a, b;
        cin >> a >> b;
        int x = 0, y = 0;
        for (int i = 0; i < sz(p); i++){
            c[i] = 0;
            while (a % p[i] == 0){
                a /= p[i];
                c[i]++;
            }
            while (b % p[i] == 0){
                b /= p[i];
                c[i]--;
            }
            if (c[i] < 0){
                c[i] = -c[i];
                y += c[i];
            }
            else{
                x += c[i];
            }
        }
        int ans = 1ll * f[x] * f[y] % MOD;
        for (int i = 0; i < sz(p); i++){
            ans = 1ll * ans * rf[c[i]] % MOD;
        }
        cout << ans << ndl;
    }
}

int main(){
    #ifdef KAZAKH
        freopen("input.txt", "r", stdin);
    #endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t = 1;
    //cin >> t;
    for (int i = 1; i <= t; i++){
        //cout << "case #" << i << ": ";
        solve();
    }
    return 0;
}
