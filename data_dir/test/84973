#include <iostream>
#include <queue>
#include <set>
using namespace std;
int n, parent[1010];
void Build(){
	for (int i=1; i<=n; i++){
		parent[i] = i;
	}
}
int Find(int v){
	if (v == parent[v]){
		return v;
	}
	return parent[v] = Find(parent[v]);
}
bool Union(int v, int u){
	v = Find(v);
	u = Find(u);
	if (v != u){
		parent[v] = u;
		return true;
	}
	return false;
}
int main(){
	cin>>n;
	Build();
	queue<pair<int, int>> q; 
	set<int> center;
	for (int i=1; i<=n-1; i++){
		int from, to;
		cin>>from>>to;
		if (Union(from, to) == false){
			q.push({from, to});	
		}
	}
	for (int i=1; i<=n; i++){
		center.insert(Find(i));
	}
	cout<<center.size()-1<<endl;
	for (set<int>::iterator it = ++center.begin(); it != center.end(); it++){
		cout<<q.front().first<<" "<<q.front().second<<" ";
		q.pop();
		it--;
		cout<<(*it)<<" ";
		it++;
		cout<<(*it)<<endl;
	}
}