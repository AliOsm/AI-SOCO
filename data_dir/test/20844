#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#include <bits/stdc++.h>

#define all(c) c.begin(),c.end()
#define ll long long
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define mod 1000000007
#define PI 3.14159265
#define pll pair<ll, ll>
using namespace std;

typedef unsigned long long ull;

bool is_prime(int n) {

    for (int i = 2; i * i <= n; ++i) {
            if (n % i == 0) {
                  return false;
            }
    }
    return true;
}

inline ll getPow(ll a,ll b){
    ll res = 1ll,tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
          /* res %= mod;*/
       }
       tp *= tp;
      /* tp %= mod;*/
       b >>= 1ll;
    }
    return res;
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

void ok() {
    puts("YES");
    exit(0);
}

void no() {
    puts("NO");
    exit(0);
}

ll xx[] = {-1, 1, 0, 0};
ll yy[] = {0, 0, -1, 1};

const int N = 1111;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
    ll n = nxt();
    vector<vector<ll>> m(n, vector<ll>(n));
    for(int i = 0; i < n; i++) {
           for(int j = 0; j < n; j++) {
                  m[i][j] = nxt();
           }
    }
    vector<vector<ll>> matrix(n, vector<ll>(n, -1));
    vector<vector<ll>> matrix_2(n, vector<ll>(n, -1));
    ll sum1 = -1, sum2 = -1;
    ll x1, y1, x2, y2;
    for(int i = 0; i < n; i++) {
           ll x = i, y = 0;
           ll dx = i, dy = y;
           ll cur_sum = 0;
           while(x < n && y < n) {
                 cur_sum += m[x][y];
                 x++;
                 y++;
           }
           x = dx, y = dy;
           while(x < n && y < n) {
                 matrix[x][y] = max(matrix[x][y], cur_sum);
                 x++;
                 y++;
           }
    }
    for(int i = 1; i < n; i++) {
           ll x = 0, y = i;
           ll dx = x, dy = y;
           ll cur_sum = 0;
           while(x < n && y < n) {
                 cur_sum += m[x][y];
                 x++;
                 y++;
           }
           x = dx, y = dy;
           while(x < n && y < n) {
                 matrix[x][y] = max(matrix[x][y], cur_sum);
                 x++;
                 y++;
           }
    }


    for(int i = 0; i < n; i++) {
           ll x = i, y = 0;
           ll dx = x, dy = y;
           ll cur_sum = 0;
           while(x >= 0 && y < n) {
                 cur_sum += m[x][y];
                 x--;
                 y++;
           }
           x = dx, y = dy;
           while(x >= 0 && y < n) {
                 matrix_2[x][y] = max(matrix_2[x][y], cur_sum);
                 x--;
                 y++;
           }
    }
    for(int i = 1; i < n; i++) {
           ll x = n - 1, y = i;
           ll dx = x, dy = y;
           ll cur_sum = 0;
           while(x >= 0 && y < n) {
                 cur_sum += m[x][y];
                 x--;
                 y++;
           }
           x = dx, y = dy;
           while(x >= 0 && y < n) {
                 matrix_2[x][y] = max(matrix_2[x][y], cur_sum);
                 x--;
                 y++;
           }
    }
    for(int i = 0; i < n; i++) {
           for(int j = 0; j < n; j++) {
                  if((i + j) % 2) {
                         ll sum = matrix[i][j] + matrix_2[i][j] - m[i][j];
                         if(sum > sum1) {
                               sum1 = sum;
                               x1 = i + 1, y1 = j + 1;
                         }
                  }
                  else {
                         ll sum = matrix[i][j] + matrix_2[i][j] - m[i][j];
                         if(sum > sum2) {
                               sum2 = sum;
                               x2 = i + 1, y2 = j + 1;
                         }
                  }
           }
    }
    cout << sum1 + sum2 << '\n' << x1 << " " << y1 << " " << x2 << " " << y2 << endl;
    \
    return 0;
}
