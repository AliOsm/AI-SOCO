#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

typedef long long ll;
using namespace std;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000002;
const ll INFLL = 100000000000000000ll;
const ll MOD = 1000000007;

// ----------------------------------------------------------------------------------------------------------

bool V[5];
int ax[5], bx[5], ay[5], by[5];

int main()
{
    f(i,1,4) cin >> ax[i] >> ay[i] >> bx[i] >> by[i];
    f(i,1,4) if(ax[i] == bx[i] && ay[i] == by[i])
    {
        cout << "NO";
        return 0;
    }
    f(i,1,4) if(ax[i] == bx[i]) V[i] = true;
    int amv = 0;
    f(i,1,4) if(V[i]) amv++;
    if(amv != 2)
    {
        cout << "NO";
        return 0;
    }
    while(true)
    {
        bool found = false;

        f(i,3,4) f(j,1,2) if(V[i] && !V[j])
        {
            swap(ax[i],ax[j]);
            swap(ay[i],ay[j]);
            swap(bx[i],bx[j]);
            swap(by[i],by[j]);
            swap(V[i],V[j]);
            found = true;
        }

        if(!found) break;
    }

    if(ay[1] > by[1]) swap(ay[1],by[1]);
    if(ay[2] > by[2]) swap(ay[2],by[2]);
    if(ax[3] > bx[3]) swap(ax[3],bx[3]);
    if(ax[4] > bx[4]) swap(ax[4],bx[4]);

    if(ay[3] > ay[4])
    {
        swap(ax[3],ax[4]);
        swap(ay[3],ay[4]);
        swap(bx[3],bx[4]);
        swap(by[3],by[4]);
    }

    if(ax[1] > ax[2])
    {
        swap(ax[1],ax[2]);
        swap(ay[1],ay[2]);
        swap(bx[1],bx[2]);
        swap(by[1],by[2]);
    }

    if(bx[1] != ax[4])
    {
        cout << "NO";
        return 0;
    }
    if(by[1] != ay[4])
    {
        cout << "NO";
        return 0;
    }
    if(bx[4] != bx[2])
    {
        cout << "NO";
        return 0;
    }
    if(by[4] != by[2])
    {
        cout << "NO";
        return 0;
    }
    if(ax[2] != bx[3])
    {
        cout << "NO";
        return 0;
    }
    if(ay[2] != by[3])
    {
        cout << "NO";
        return 0;
    }
    if(ax[3] != ax[1])
    {
        cout << "NO";
        return 0;
    }
    if(ay[3] != ay[1])
    {
        cout << "NO";
        return 0;
    }

    cout << "YES";
}
