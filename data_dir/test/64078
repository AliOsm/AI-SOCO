#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define mod(n, m) (((n%m) + m)%m)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'

const int mod = 1e9 + 7;

vvi matrixUnit(int n)
{
	vvi res(n, vi(n));
	for (int i = 0; i < n; i++)
		res[i][i] = 1;
	return res;
}

vvi matrixAdd(const vvi &a, const vvi &b)
{
	int n = a.size();
	int m = a[0].size();
	vvi res(n, vi(m));
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			res[i][j] = (a[i][j] + b[i][j]) % mod;
	return res;
}

vvi matrixMul(const vvi &a, const vvi &b)
{
	int n = a.size();
	int m = a[0].size();
	int k = b[0].size();
	vvi res(n, vi(k));
	for (int i = 0; i < n; i++)
		for (int j = 0; j < k; j++)
			for (int p = 0; p < m; p++)
				res[i][j] = (res[i][j] + (long long) a[i][p] * b[p][j]) % mod;
	return res;
}

vvi matrixPow(const vvi &a, ll p)
{
	if (p == 0)
		return matrixUnit(a.size());
	if (p & 1)
		return matrixMul(a, matrixPow(a, p - 1));
	return matrixPow(matrixMul(a, a), p / 2);
}

vvi matrixPowSum(const vvi &a, ll p)
{
	int n = a.size();
	if (p == 0)
		return vvi(n, vi(n));
	if (p % 2 == 0)
		return matrixMul(matrixPowSum(a, p / 2),
				matrixAdd(matrixUnit(n), matrixPow(a, p / 2)));
	return matrixAdd(a, matrixMul(matrixPowSum(a, p - 1), a));
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	ll n, m;
	cin >> n >> m;
	if (n < m)
		cout << 1;
	else if (n == m)
		cout << 2;
	else
	{
		vvi mat(m + 1, vi(m + 1));

		mat[0][0] = mat[0][m] = 1;
		rep(i, 0, m)
			mat[i][(i + 1) % m] = 1;

		vvi ret = matrixPow(mat, n + 1);
		cout << ret[0][m] << endl;
	}

	return 0;
}
