#include <vector>
#include <cstring>
#include <cstdio>
#include <queue>
#include <cmath>
#include <string>
#include <iostream>
#include <algorithm>
#include <cassert>
#include <ctype.h>
#include <ctime>
#include <set>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

typedef long long ll;
const double EPS=1e-7;

const int MAXN=100100;
const int INF=2000000000;

ll res[MAXN];

struct Event
{
	int type,x,y;
	Event(int type=0, int x=0, int y=0):type(type),x(x),y(y){}
	bool operator<(const Event& b) const
	{
		if(y!=b.y)
			return y>b.y;
		return type>b.type;
	}
};

int main()
{
	int n,k;
	scanf("%d%d",&n,&k);
	vector<pair<int,int> > v;
	REP(i,n)
	{
		int x,y;
		scanf("%d%d",&x,&y);
//		x=rand();
//		y=rand();
		v.push_back(make_pair(x,y));

	}
	sort(v.begin(), v.end());

	for(int i=v.size()-1;i>0;i--)
		v[i].first-=v[i-1].first;
	REP(i,v.size())
		v[i].first=min(v[i].first, k);
	v[0].first=k;
	for(int i=1;i<v.size();i++)
		v[i].first+=v[i-1].first;

	priority_queue<Event> ev;
	REP(i,n)
	{
		ev.push(Event( 1,v[i].first,v[i].second-k+1));
		ev.push(Event(-1,v[i].first,v[i].second+1));
	}

	vector<int> last(v.back().first+1,-INF);
	vector<int> val(v.back().first+1,0);

	while(!ev.empty())
	{
		Event cur=ev.top(); ev.pop();
		int pos=cur.x;
		REP(j,k)
		{
			int X=pos-j;
			res[val[X]]+=(cur.y-last[X]);
			last[X]=cur.y;
			val[X]+=cur.type;
		}
	}

	REP(i,n)
		printf("%lld ",res[i+1]);
	puts("");

	return 0;
}
