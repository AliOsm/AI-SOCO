#include<bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update> 
#define ll int

#ifdef sarthak
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cout << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
int begtime = clock();
#else
#define trace(...)
#endif

#ifndef sarthak
    #pragma GCC optimize("Ofast")
    #pragma GCC optimize("unroll-loops")
    // #pragma GCC target ("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#endif

#define foreach(it,ar) for (auto it = ar.begin(); it != ar.end(); it++)
#define fort(i,v) for(auto i:v)
#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) rep(i,sizeof(ar)/sizeof(ll)) ar[i]=val
#define fill2(ar,val) rep(i,sizeof(ar)/sizeof(ar[0])) rep(j,sizeof(ar[0])/sizeof(ll)) ar[i][j]=val
#define fill0(ar) memset(ar,0,sizeof(ar))
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld long double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sd(x) scanf("%d",&x)
#define slld(x) scanf("%lld",&x)
#define sd2(x,y) scanf("%d %d",&x,&y)
#define slld2(x,y) scanf("%lld %lld",&x,&y)
#define pd(x) printf("%d\n",x)
#define plld(x) printf("%lld\n",x)
#define pd2(x,y) printf("%d %d\n",x,y)
#define plld2(x,y) printf("%lld %lld\n",x,y)
#define all(ar) ar.begin(), ar.end()
#define endl '\n'
#define sz(x) (int)x.size()
#define len(x) (int)x.length()

typedef pair<ll, ll> ii;
typedef pair<ii, ll> iii;
typedef vector<ii> vii;
typedef vector<ll> vi;

#define INF 1000000000000000000
#define PI 3.14159265358979323846L

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rngb(chrono::steady_clock::now().time_since_epoch().count()); // can give negative values too

const ll N = 500001;
const ll K = 750;
vector<pair<ll, pair<ll, ll> > > v[K];
ll tot = 0;
ll arr[K];
ll cnt[N];

void add(ll x)
{
	if(cnt[x]==0)
	{
		tot++;
		arr[x/K]++;
	}
	else if(cnt[x]==1)
	{
		tot--;
		arr[x/K]--;
	}
	cnt[x]++;
}

void remove(ll x)
{
	if(cnt[x]==1)
	{
		tot--;
		arr[x/K]--;
	}
	else if(cnt[x]==2)
	{
		tot++;
		arr[x/K]++;
	}
	cnt[x]--;
}

ll findAns()
{
	if(tot==0)
		return 0;
	rep(i,K)
	{
		if(arr[i]!=0)
		{
			fr(j,i*K,N)
			{
				if(cnt[j]==1)
					return j;
			}
		}
	}

	return 0;
}

void solve()
{
	ll n;
	sd(n);

	ll a[n];
	rep(i,n)
	{
		sd(a[i]);
	}    

	ll q;
	sd(q);

	rep(i,q)
	{
		ll l,r;
		sd2(l,r);
		l--;
		r--;
		v[l/K].pb(mp(r,mp(l,i)));
	}

	ll ans[q];

	ll p1 = 0;
	ll p2 = 0;
	add(a[0]);

	rep(i,K)
	{
		sort(all(v[i]));
		rep(j,v[i].size())
		{
			ll l = v[i][j].ss.ff;
			ll r = v[i][j].ff;
			ll ind = v[i][j].ss.ss;

			while(p1>l)
			{
				p1--;
				add(a[p1]);
			}
			while(p2<r)
			{
				p2++;
				add(a[p2]);
			}
			while(p1<l)
			{
				remove(a[p1]);
				p1++;
			}
			while(p2>r)
			{
				remove(a[p2]);
				p2--;
			}

			ans[ind] = findAns();
		}
	}

	rep(i,q)
	{
		pd(ans[i]);
	}
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout << fixed;
    cout << setprecision(10);
    #ifdef sarthak
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    ll t = 1;
    // cin >> t;
    while(t--)
    {
        solve();
    }

    #ifdef sarthak
    cerr << "Time elapsed: " << (clock() - begtime)*1000/CLOCKS_PER_SEC << " ms\n\n";
    #endif
}
