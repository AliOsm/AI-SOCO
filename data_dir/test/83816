#include<iostream>
#include<algorithm>
#include<queue>
#include<string>
#include<vector>
#include<map>
#include<list>
#include<set>
#include<cstring>
#include<ctime>
#include<cmath>
#include<limits>
#include<iterator>
#include<functional>
#include<unordered_map>
#include<stack>
#include<bitset>

#define all(v) v.begin(), v.end()
#define setv(ar, val) memset(ar, val, sizeof(ar));
#define ll long long int
#define ull unsigned long long int
#define PI 3.1415926535897932384626433832795
#pragma comment(linker, "/STACK:536870912")
#pragma warning(disable:4996)
using namespace std;

const int N = 1e5 + 100, INF = 1e9;
int a[N];
pair<int, int> s[N];
multiset<int> sz;
set<pair<int, int>> sg;

auto merge(set<pair<int, int>>::iterator x, set<pair<int, int>>::iterator y) {
	sz.erase(sz.lower_bound(y->second - y->first + 1));
	sz.erase(sz.lower_bound(x->second - x->first + 1));
	sz.insert(y->second - x->first + 1);
	pair<int, int> ns = { x->first, y->second };
	sg.erase(y);
	sg.erase(x);
	return sg.insert(ns).first;
}

void upd(int x) {
	auto it = sg.insert({ x, x }).first;
	sz.insert(1);
	if (it != sg.begin()) {
		auto p = prev(it);
		if (p->second + 1 == it->first)
			it = merge(p, it);
	}
	if (next(it) != sg.end()) {
		auto t = next(it);
		if (it->second + 1 == t->first)
			it = merge(it, t);
	}
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int n;
	scanf("%d", &n);

	for (int i = 0; i < n; i++) {
		scanf("%d", &a[i]);
		s[i] = { a[i], i };
	}

	sort(s, s + n);

	int ans = 0, mxc = 0;
	for (int i = 0; i < n; i++) {
		upd(s[i].second);
		if (i == n - 1 || s[i + 1].first != s[i].first) {
			if (*sz.begin() == *sz.rbegin() && mxc < sz.size()) {
				mxc = sz.size();
				ans = s[i].first + 1;
			}
		}
	}

	printf("%d", ans);



	return 0;
}