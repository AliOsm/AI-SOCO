#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <iomanip>
#include <sstream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <stack>
#include <set>
#include <map>
#include <bitset>
#include <cstring>
#include <cctype>
#include <queue>
#include <deque>

using namespace std;

#define fi first
#define se second
#define pf push_front
#define pb push_back
#define mk make_pair
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)x.size()
#define SWS ios_base::sync_with_stdio(false)
#define rfile freopen("input.txt", "r", stdin)
#define wfile freopen("output.txt", "w", stdout)
#define files rfile; wfile

typedef long long ll;
typedef long double ld;

const int Z = (int)1e3 + 111;
const int inf = (int)1e9 + 111;
const ll llinf = (ll)1e18 + 5;
const int MOD = (int)1e9 + 7;

bool used[Z][Z];
char a[Z][Z];
int ans[Z][Z], cnt, n, m, k;
vector <pair<int, int> > path;

int update (int x, int y) {
    if (x - 1 >= 1 && a[x-1][y] == '*') cnt++;
    if (x + 1 <= n && a[x+1][y] == '*') cnt++;
    if (y - 1 >= 1 && a[x][y-1] == '*') cnt++;
    if (y + 1 <= m && a[x][y+1] == '*') cnt++;
}

void dfs (int x, int y) {
    if (x == 0 || y == 0 || x == n + 1 || y == m + 1 || a[x][y] == '*' || used[x][y]) return;
    update(x, y);
    used[x][y] = 1;
    path.pb(mk(x, y));
    dfs(x + 1, y);
    dfs(x - 1, y);
    dfs(x, y - 1);
    dfs(x, y + 1);
}

int main() {
	//files;
	SWS;
	cin >> n >> m >> k;
	for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            cin >> a[i][j];
        }
	}
	for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            if (!used[i][j] && a[i][j] == '.') {
                path.clear();
                cnt = 0;
                dfs(i, j);
                for (auto x : path) {
                    ans[x.fi][x.se] = cnt;
                }
            }
        }
	}
	while (k--) {
        int x, y;
        cin >> x >> y;
        cout << ans[x][y] << '\n';
	}
	return 0;
}