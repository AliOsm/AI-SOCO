#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
#define DEBUG
#ifdef DEBUG
#define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
	template <typename Arg1>
	void __f(const char* name, Arg1&& arg1){
		cerr << name << " : " << arg1 << std::endl;
	}
	template <typename Arg1, typename... Args>
	void __f(const char* names, Arg1&& arg1, Args&&... args){
		const char* comma = strchr(names + 1, ','); cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
	}
#else
#define debug(...)
#endif
#define FOR(i,a,b) 	for(int i=a;i<b;++i)
#define RFOR(i,a,b) 	for(int i=a;i>=b;--i)
#define ln 		"\n"
#define mp make_pair
#define pb push_back
#define sz(a)	ll(a.size())
#define F first
#define S second
#define all(c)	c.begin(),c.end()
#define trace(c,x) for(auto &x:c)
#define pii pair<ll,ll>
typedef long long ll;
typedef long double ld;
typedef	priority_queue<pii,std::vector<pii>,greater<pii> > revpr;

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> pbds;
// ordered_set X
//K-th smallest
//*X.find_by_order(k-1)
//NO OF ELEMENTS < A
//X.order_of_key(A)

const int L=2e5+7;
std::vector<int> adj[L], bridge_tree[L]; // graph, bridge tree
bool visit1[L], visit0[L]; // visit array for both dfs
int start, ar[L]; // stores visit time
int u[L], v[L]; // storing original graph
int cur_comp, comp[L]; // for components in bridge tree
int isBridge[L]; //stores if edge is bridge or not
int error;
int find_next(int i,int vertex)
{
	return ((u[i] == vertex) ? v[i] : u[i]);
}
int dfs0(int vertex, int edge)
{
	ar[vertex] = ++start;
	int cur = ar[vertex], e, nxt;
	visit0[vertex] = 1;
	FOR(i,0,sz(adj[vertex]))
	{
		e = adj[vertex][i];
		nxt = find_next(e, vertex);
		if(!visit0[nxt])
			cur = min(cur, dfs0(nxt, e));
		else if(e != edge) 
			cur = min(cur, ar[nxt]);
	}
	if(ar[vertex] == cur && edge != -1)
	{
		isBridge[edge] = 1;
	}
	return cur;
}
queue<int>q[L];
void dfs1(int vertex)
{
	visit1[vertex] = 1;
	comp[vertex] = ++cur_comp;
	q[vertex].push(vertex);
	int tmp, e, nxt;
	while(!q[vertex].empty())
	{
		tmp = q[vertex].front();
		comp[tmp] = comp[vertex];
		q[vertex].pop();
		FOR(i,0,sz(adj[tmp]))
		{
			e = adj[tmp][i];
			nxt = find_next(e, tmp);
			if(visit1[nxt])continue;
			if(isBridge[e])
			{
				bridge_tree[comp[vertex]].pb(cur_comp + 1);
				bridge_tree[cur_comp + 1].pb(comp[vertex]);
				// debug(comp[vertex], cur_comp+1);
				dfs1(nxt);
			}
			else 
			{
				q[vertex].push(nxt);
				visit1[nxt] = 1;
			}
		}
	}
}
int parent[L][30], st[L], en[L], LCA[L], level[L];
int pras[L], fin[L];

void dfs(int vertex, int _parent, int lvl)
{
	parent[vertex][0] = _parent;
	pras[vertex] = 1;
	// debug(vertex, _parent);
	level[vertex] = lvl+1;
	trace(bridge_tree[vertex], x)
	{
		if(x != _parent  && !pras[x])
			dfs(x, vertex, lvl+1);
	}
}
int lca(int a,int b)
{
	if(level[a]>level[b])swap(a,b);
	int dist=level[b]-level[a];
	// debug(level[a], level[b]);
	int index=0;
	while(dist>0)
	{
		if(dist&1)b=parent[b][index];
		dist>>=1;index++;
	}
	
	RFOR(i,24,0)
	{
		if(parent[a][i]!=-1 && parent[a][i]!=parent[b][i])
		{
			a=parent[a][i];
			b=parent[b][i];
		}
	}
	if(a==b)return a;
	return parent[a][0];
}
struct node{
	int start, end, lca;
};
node final_ans(int vertex, int _parent)
{
	node temp;
	node cur;
	fin[vertex] = 1;
	cur.start = st[vertex];
	cur.end = en[vertex];
	cur.lca = LCA[vertex];
	trace(bridge_tree[vertex], x)
	{
		if(x != _parent)
		{
			temp = final_ans(x, vertex);
			cur.start += temp.start;
			cur.end += temp.end;
			cur.lca += temp.lca;
		}
	}
	// debug(vertex, cur.start, cur.end, cur.lca);
	if(cur.start - cur.lca  > 0 &&   cur.end - cur.lca > 0)
	{
		cout<<"No";
		exit(0);
	}
	return cur;
}
int main()
{
		ios_base::sync_with_stdio(false);
	 	cin.tie(NULL);
	 	int a, b, n, m, q;
	 	cin >> n >> m >> q;
	 	FOR(i,1,m+1)
	 	{
	 		cin >> a >> b;
	 		u[i] = a;
	 		v[i] = b;
	 		adj[a].pb(i);
	 		adj[b].pb(i);
	 	}
	 	FOR(i,1,n+1)
	 	{
	 		if(!visit0[i])
	 			dfs0(i, -1);
	 	}
	 	FOR(i,1,n+1)
	 	{
			if(!visit1[i])
	 			dfs1(i);
	 		// debug(i, comp[i]);
	 	}
	 	FOR(j,1,24)
	 		FOR(i,1,cur_comp+1)
	 			parent[i][j] = -1;
	 	FOR(i,1,cur_comp + 1)
	 	{
	 		if(!pras[i])
	 			dfs(i, -1, 0);
	 	}
	 	// debug(cur_comp);
	 	FOR(j,1,24)
	 		FOR(i,1,cur_comp+1)
	 			if(parent[i][j-1]!=-1)
	 				parent[i][j]=parent[parent[i][j-1]][j-1];
	 			// debug(lca( 2,8));
	 	int l;
	 	while(q--)
	 	{
	 		cin >> a >> b;
	 		st[comp[a]]++;
	 		en[comp[b]]++;
	 		l = lca(comp[a], comp[b]);
	 		if(l == -1)
	 		{
	 			cout<<"No";
	 			exit(0);
	 		}
	 		LCA[l]++;
	 		// debug(lca(comp[a], comp[b]));
	 	}
	 	// FOR(i,1,n+1)debug(i, comp[i], parent[i][0]);
	 	node cur;
	 	FOR(i,1,cur_comp + 1)
	 	{
	 		if(!fin[i])
	 		{
			 	cur = final_ans(i, -1);
	 			if(cur.lca - cur.start > 0 || cur.lca - cur.end > 0)
	 			{
	 				cout<<"No";
	 				exit(0);
	 			}
	 		}
	 	}
	 	cout<<"Yes";
		return 0;
}