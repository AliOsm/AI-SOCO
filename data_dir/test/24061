
// ~/BAU/ACM-ICPC/Teams/A++/BlackBurn95
// ~/sudo apt-get Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <assert.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

const int N = 100001;
int n, k, a[N];
ll BIT[12][N + 1],dp[N+1][12];

void add(int j,int i,ll v) {
	while (i <= N) {
		BIT[j][i] += v;
		i += (i & -i);
	}
}

ll get(int j,int i) {
	ll r = 0;
	while (i > 0) {
		r += BIT[j][i];
		i -= (i & -i);
	}
	return r;
}

int main() {
	std::ios::sync_with_stdio(false);

#ifdef LOCAL
	freopen("input.in", "r", stdin);
#endif

	scanf("%d%d", &n, &k);
	for (int i = 0; i < n; i++)
		scanf("%d", a + i);
	k++;

	ll ans = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 1; j <= k; j++) 
			if (a[i] > 1) dp[a[i]][j] += get(j - 1, a[i] - 1);
		dp[a[i]][1]++;
		for (int j = 1; j <= k; j++)
			add(j, a[i], dp[a[i]][j]);
		ans += dp[a[i]][k];
	}

	printf("%lld\n", ans);

	return 0;
}