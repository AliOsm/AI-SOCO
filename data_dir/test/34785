#include<bits/stdc++.h>
#define ll long long
#define N 200050
using namespace std;
map< int, int > x;
map< int , set<pair<int, int > > > vx;
int a[N],b[N],c[N],d[N],vis[N];
int t[4*N];
int dis[N];
int pr[N];
int val[4*N];
int n;
int cu=0;
pair<int, int > minimum(int v, int tl, int tr, int l, int r) {
    if (l > r)
        return {2e9,2e9};
    if (l == tl && r == tr) {
        return {t[v],val[v]};
    }
    int tm = (tl + tr) / 2;
    pair< int , int > fi = minimum(v*2, tl, tm, l, min(r, tm));
    pair< int , int > se = minimum(v*2+1, tm+1, tr, max(l, tm+1), r);
    if(fi.first<=se.first){return fi;}
    else {return se;}
}
void update(int v, int tl, int tr, int pos, int new_val) {
    if (tl == tr) {
        t[v] = new_val;
        val[v]=pos;
    } else {
        int tm = (tl + tr) / 2;
        if (pos <= tm)
            update(v*2, tl, tm, pos, new_val);
        else
            update(v*2+1, tm+1, tr, pos, new_val);
        t[v] = min(t[v*2] , t[v*2+1]);
        val[v]=val[v*2+1];
        if(t[v*2]==t[v])val[v]=val[v*2];
    }
}
void bfs(){
    queue< int > q;
    for(int i=0;i<n;i++)
        if(a[i]==0&&b[i]==0){
                q.push(i); vis[i]=1;vx[x[a[i]]].erase({0,i});
        if(!vx[x[a[i]]].empty())update(1,0,cu,x[a[i]],vx[x[a[i]]].begin()->first);
        else {update(1,0,cu,x[a[i]],2e9); }
        }
    memset(pr,-1,sizeof(pr));
    while(!q.empty()){
        int top=q.front();
        q.pop();
        if(top==n-1)return ;
        int cx=x[c[top]];
        while(1){
           pair<int , int> p=minimum(1,0,cu,0,cx);
           if(p.second>N)break;
           int in=vx[p.second].begin()->second;
         //  return;x[
            if(p.first<=d[top]&&!vis[in]){
                dis[in]=dis[top]+1;
                q.push(in);
                vis[in]=1;
                pr[in]=top;
                vx[p.second].erase({b[in],in});
                if(!vx[p.second].empty())update(1,0,cu,p.second,vx[p.second].begin()->first);
                else update(1,0,cu,p.second,2e9);
            }
            else break;
        }
    }
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cin>>n;
    for(int i=0;i<4*N;i++)
        t[i]=2e9;
    for(int i=0;i<n;i++)
        cin>>a[i]>>b[i]>>c[i]>>d[i];
    for(int i=0;i<n;i++){
        x[a[i]]++;
        x[c[i]]++;
    }

    for(auto a: x){
        x[a.first]=cu++;
    }
    for(int i=0;i<n;i++){
        vx[x[a[i]]].insert({b[i],i});
    }
    for(int i=0;i<n;i++)
    {
        int beg=vx[x[a[i]]].begin()->first;
        update(1,0,cu,x[a[i]],beg);
    }

   // pair<int, int >w=
    bfs();
    if(vis[n-1]){
        cout<<dis[n-1]+1<<"\n";
        vector< int > f;
        int tmp=n-1;
        while(tmp!=-1){
            f.push_back(tmp);
            tmp=pr[tmp];
        }
        for(int i=f.size()-1;i>=0;i--)
            cout<<f[i]+1<<" ";
        return 0;
    }
        cout<<"-1";
    return 0;
}
