#include <bits/stdc++.h>
#define intt long long
#define pb push_back
#define mk make_pair
#define ii pair<intt,intt>
#define sc second
#define fr first
using namespace std;
vector<int> op[5004];
int dp[5004][5004];
int depth[5004];
 int ans[5004][5004];
vector<ii> tt;
vector<pair<int,ii> > qus;
int pa[5002];
void dfs(int node,int par)
{
    dp[0][node]=par;
    pa[node]=par;
    int i;
    for(i=0;i<op[node].size();i++)
    {
        if(op[node][i]!=par)
        {
            depth[op[node][i]]=depth[node]+1;
            dfs(op[node][i],node);
        }
    }
}
int getKthAncestor(int u, int k) {
	int d = depth[u] - k;

	for (int j =20;j>= 0; j--) {
		int nu = dp[j][u];
		if (nu == -1) continue;
		if (depth[nu] == d) return nu;
		else if (depth[nu] > d) u = nu;
	}
	return -1;
}
int getLCA(int a, int b) {
	if (depth[a] > depth[b]) a = getKthAncestor(a, depth[a] - depth[b]);
	else if (depth[b] > depth[a]) b = getKthAncestor(b, depth[b] - depth[a]);

	//dpth[a] == dpth[b]

	if (a == b) return a;

	for (int j =20; j >= 0; j--) {
		int na = dp[j][a], nb = dp[j][b];

		if (na != -1 && nb != -1 && na != nb)
			a = na, b = nb;
	}

	return dp[0][a];
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin>>n;
     int i,j;
     for(i=0;i<n-1;i++)
     {
         int x,y;
         cin>>x>>y;
         op[x].pb(y);
         op[y].pb(x);
         tt.pb(mk(x,y));
         ans[x][y]=1e6;
         ans[y][x]=1e6;
     }
       int m;
       cin>>m;
       for(i=0;i<m;i++)
       {
           int x,y,z;
           cin>>x>>y>>z;
           qus.pb(mk(z,mk(x,y)));
       }
       memset(dp,-1,sizeof dp);
     depth[1]=0;
     dfs(1,-1);
     for( j=1;j<=20;j++)
     {
         for(i=1;i<=n;i++)
          dp[j][i]=(dp[j-1][i]==-1?-1:dp[j-1][dp[j-1][i]]);
     }
     sort(qus.begin(),qus.end());
     for(i=0;i<m;i++)
     {
         int fir=qus[i].sc.fr;
         int sec=qus[i].sc.sc;
         int lca=getLCA(fir,sec);
         while(fir!=lca)
         {
             ans[fir][pa[fir]]=qus[i].fr;
             ans[pa[fir]][fir]=qus[i].fr;
             fir=pa[fir];
         }
         while(sec!=lca)
         {
             ans[sec][pa[sec]]=qus[i].fr;
             ans[pa[sec]][sec]=qus[i].fr;
             sec=pa[sec];
         }
     }
     for(i=0;i<m;i++)
     {
         int fir=qus[i].sc.fr;
         int sec=qus[i].sc.sc;
         int lca=getLCA(fir,sec);
         int mn=1e9;
         while(fir!=lca)
         {
             mn=min(mn,ans[fir][pa[fir]]);
             fir=pa[fir];
         }
         while(sec!=lca)
         {
             mn=min(mn,ans[sec][pa[sec]]);
             sec=pa[sec];
         }
       //cout<<mn<<endl;
      if(mn!=qus[i].fr)
      {
          cout<<"-1";
          return 0 ;
      }
     }
     for(i=0;i<tt.size();i++)
        cout<<ans[tt[i].fr][tt[i].sc]<<" ";
   return 0;
}
