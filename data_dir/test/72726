#include <iostream>
#include <vector>
#include <algorithm>
#include <iterator>
using namespace std;

int main(void)
{
    int n; 
    cin >> n;
    vector<int> v(n);
    unsigned long long sum = 0;
    for (int i = 0; i != n; ++i)
    {
        cin >> v[i];
        sum += v[i];
    }
    sort(v.begin(), v.end());
    if (v.front() != 0)
    {
        cout << -1;
        return 0;
    }
    if (sum % 3 == 0)
    {
        if (v.back() != 0)
            copy(v.rbegin(), v.rend(), ostream_iterator<int>(cout));
        else
            cout << 0;
        return 0;
    }
    if (sum % 3 == 1)
    {
        auto loc = find_if(v.begin(), v.end(),
            [](int n)
        {
            return n != 0 && n % 3 == 1; 
        } 
        );
        if (loc != v.end())
            v.erase(loc);
        else
        {
            auto f = [](int n)
            {
                return n != 0 && n % 3 == 2; 
            };
            for (int i = 0; i != 2; ++i)
            {
                auto loc = find_if(v.begin(), v.end(), f);
                if (loc != v.end())
                    v.erase(loc);
            }
        }
        if (v.back() != 0)
            copy(v.rbegin(), v.rend(), ostream_iterator<int>(cout));
        else
            cout << 0;
        return 0;
    }
    if (sum % 3 == 2)
    {
        auto loc = find_if(v.begin(), v.end(),
            [](int n)
        {
            return n != 0 && n % 3 == 2; 
        } 
        );
        if (loc != v.end())
            v.erase(loc);
        else
        {
            auto f = [](int n)
            {
                return n != 0 && n % 3 == 1; 
            };
            for (int i = 0; i != 2; ++i)
            {
                auto loc = find_if(v.begin(), v.end(), f);
                if (loc != v.end())
                    v.erase(loc);
            }
        }
        if (v.back() != 0)
            copy(v.rbegin(), v.rend(), ostream_iterator<int>(cout));
        else
            cout << 0;
        return 0;
    }

    return 0;
}
