/**
* @author khokharnikunj8
**/

#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#pragma GCC target("avx,tune=native")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;
#define ll long long

#define endl "\n"
#define si(x) scanf("%d",&x);
#define pi(x) printf("%d",x);
#define sl(x) scanf("%lld",&x);
#define pl(x) printf("%lld",x);
#define len(x) (sizeof(x)/sizeof(x[0]))
#define init(ar, x) for(int iii=0;iii<x;iii++)ar[iii]=0;
#define pb push_back


class CodeHash {
public:
    string precise(double number, int prec) {
        stringstream ss;
        ss << fixed << setprecision(prec) << number;
        return ss.str();
    }
};


class ScanReader {

private:
    FILE *stream;
    char buffer[1 << 11];
    bool is_digit[1 << 8];
    int index, total;


    int scan() {
        if (index >= total) {
            index = 0;
            total = fread(buffer, 1, 1 << 11, stream);
            if (total <= 0)return -1;
        }
        return buffer[index++];
    }

    bool iswhitespace(int n) {
        if (n == ' ' || n == '\n' || n == '\t' || n == '\r' || n == -1)return true;
        return false;
    }

public:
    ScanReader(FILE *stream) {
        this->stream = stream;
        index = total = 0;
        for (int i = 0; i < 1 << 8; i++)is_digit[i] = isdigit(i);
    }

    int scanInt() {
        int integer = 0, temp = scan();
        while (iswhitespace(temp))temp = scan();
        int neg = 1;
        if (temp == '-')neg *= -1, temp = scan();
        while (!iswhitespace(temp))if (is_digit[temp])integer *= 10, integer += (temp - '0'), temp = scan();
        return neg * integer;
    }

    long long scanLong() {
        long long integer = 0;
        int temp = scan();
        while (iswhitespace(temp))temp = scan();
        int neg = 1;
        if (temp == '-')neg *= -1, temp = scan();
        while (!iswhitespace(temp))if (is_digit[temp])integer *= 10, integer += (temp - '0'), temp = scan();
        return neg * integer;
    }

    string scanString() {
        string ss = "";
        int temp = scan();
        while (iswhitespace(temp))temp = scan();
        while (!iswhitespace(temp))ss += temp, temp = scan();
        return ss;
    }

    double scanDouble() {
        int c = scan();
        while (iswhitespace(c)) c = scan();
        int sgn = 1;
        if (c == '-')sgn = -1, c = scan();
        double res = 0;
        while (!iswhitespace(c) && c != '.') {
            if (c == 'e' || c == 'E')return res * pow(10, scanInt());
            res *= 10;
            res += c - '0';
            c = scan();
        }
        if (c == '.') {
            c = scan();
            double m = 1;
            while (!iswhitespace(c)) {
                if (c == 'e' || c == 'E') {
                    return res * pow(10, scanInt());
                }
                m /= 10;
                res += (c - '0') * m;
                c = scan();
            }
        }
        return res * sgn;
    }
};

class PrintWriter {
private:
    FILE *stream;
    static const int BUFFER_SIZE = (1 << 11) - 1;
    static const int MAX_OUT_SIZE = 23;
    int size;
    char buffer[BUFFER_SIZE];

    void write(long long v) {
        if (v < 0)buffer[size++] = '-', v *= -1;
        if (v < 10)
            buffer[size++] = v + 48;
        else {
            write(v / 10);
            buffer[size++] = v % 10 + 48;
        }
    }

public:
    PrintWriter(FILE *stream) {
        this->size = 0;
        this->stream = stream;
    }

    void close() {
        if (size)
            fwrite(buffer, 1, size, stream);
    }

    void println(long long s) {
        if ((size ^ BUFFER_SIZE) < MAX_OUT_SIZE) {
            fwrite(buffer, 1, size, stream);
            size = 0;
        }
        write(s);
        buffer[size++] = '\n';
    }

    void print(long long s) {
        if ((size ^ BUFFER_SIZE) < MAX_OUT_SIZE) {
            fwrite(buffer, 1, size, stream);
            size = 0;
        }
        write(s);
        buffer[size++] = ' ';
    }

    void println(string s) {
        if ((size ^ BUFFER_SIZE) < MAX_OUT_SIZE) {
            fwrite(buffer, 1, size, stream);
            size = 0;
        }
        for (int i = 0; i < s.length(); i++) {
            buffer[size++] = s[i];
            if ((size ^ BUFFER_SIZE) < MAX_OUT_SIZE) {
                fwrite(buffer, 1, size, stream);
                size = 0;
            }
        }
        buffer[size++] = '\n';
    }

    void print(string s) {
        if ((size ^ BUFFER_SIZE) < MAX_OUT_SIZE) {
            fwrite(buffer, 1, size, stream);
            size = 0;
        }
        for (int i = 0; i < s.length(); i++) {
            buffer[size++] = s[i];
            if ((size ^ BUFFER_SIZE) < MAX_OUT_SIZE) {
                fwrite(buffer, 1, size, stream);
                size = 0;
            }
        }
        //buffer[size++] = ' ';
    }
};


FILE *fi = fopen("/home/khokharnikunj8/CLionProjects/M/in.txt", "r+");
FILE *fo = fopen("/home/khokharnikunj8/CLionProjects/M/out.txt", "w+");

class implicitsegmenttreepair {

    struct Node {
        Node *l, *r;
        long long left, right;
        pair<long long, long long> mx;

        Node() : l(NULL), r(NULL), left(0), right(0), mx() {}
    };

    void combine(pair<long long, long long> &a, const pair<long long, long long> &b) {
        if (a.first < b.first)
            a = b;
    }

    void combine(Node *v) {
        v->mx.first = -1;
        v->mx.second = -1;
        if (v->l)combine(v->mx, v->l->mx);
        if (v->r)combine(v->mx, v->r->mx);
    }

    void update(Node *v, long long pos, int val, int tpos) {
        if (v->left == pos && v->right == pos) {
            v->mx = make_pair(val, tpos);
            return;
        }

        long long mid = (v->left + v->right) >> 1;

        if (pos <= mid) {
            if (v->l == NULL)
                v->l = new Node();
            v->l->left = v->left;
            v->l->right = mid;
            update(v->l, pos, val, tpos);
        } else {
            if (v->r == NULL)
                v->r = new Node();
            v->r->left = mid + 1;
            v->r->right = v->right;
            update(v->r, pos, val, tpos);

        }
        combine(v);
    }

    pair<long long, long long> get(Node *v, long long l, long long r) {
        if (v == NULL || v->left > r || l > v->right)
            return pair<long long, long long>();
        if (l <= v->left && v->right <= r)
            return v->mx;
        pair<long long, long long> res = get(v->l, l, r);
        combine(res, get(v->r, l, r));
        return res;
    }


    Node *root;
    long long left, right;
public:
    implicitsegmenttreepair(long long l, long long r) {
        this->root = new Node();
        root->left = l;
        root->right = r;
    }

    pair<long long, long long> query(long long l, long long r) {
        return get(this->root, l, r);
    }

    void update(long long position, long long newV, long long pos) {
        update(this->root, position, newV, pos);
    }
};

int main() {
#ifdef ONLINE_JUDGE
    fi = stdin;fo  = stdout;
#endif
    ScanReader *in = new ScanReader(fi);
    PrintWriter *out = new PrintWriter(fo);
    CodeHash *ch = new CodeHash();
    implicitsegmenttreepair *seg = new implicitsegmenttreepair(0, 1000000000000000ll);
    int n = in->scanInt();
    int d = in->scanInt();
    ll *ar = new ll[n + 1];
    for (int i = 0; i < n; i++)ar[i + 1] = in->scanLong();
    ll mxx=0;
    ll index=0;
    pair<ll,ll>ans[100001];
    for (int i = 1; i <= n; i++) {
        ans[i]={0,0};
        if (ar[i] - d >= 0) {
            pair<ll, ll> tmp = seg->query(0, ar[i] - d);
            if (ans[i].first < tmp.first)ans[i] = tmp;
        }
        if (ar[i] + d <= 1000000000000000ll) {
            pair<ll, ll> tmp = seg->query(ar[i] + d, 1000000000000000ll);
            if (ans[i].first < tmp.first)ans[i] = tmp;
        }
        seg->update(ar[i], ans[i].first + 1, i);
        if(mxx<ans[i].first+1){
            mxx= ans[i].first+1;
            index=i;
        }
    }
    out->println(mxx);
    stack<ll>st;
    while(index!=0){
        st.push(index);
        index = ans[index].second;
    }
    while(!(st.empty())){
        out->print(st.top());
        st.pop();
    }

    out->close();
    return 0;
}

