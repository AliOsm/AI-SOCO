#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 101;
int n, m, k, tc;
int cnt;
int rem;
int prp;

char ans[N][N];
char chi[62];

string t[N];

void input() {
    cnt = 0;
    rem = 0;
    prp = 0;
    cin >> n >> m >> k;
    for(int i = 0; i < n; ++i) {
        cin >> t[i];
        for(int j = 0; j < m; ++j) {
            cnt += t[i][j] == 'R';
        }
    }
    prp = cnt / k;
    rem = cnt % k;
}

void solve() {
    for(int i = 0; i < 10; ++i) {
        chi[i] = (char)('0' + i);
    }
    for(int i = 0; i < 26; ++i) {
        chi[i + 10] = (char)('a' + i);
    }
    for(int i = 0; i < 26; ++i) {
        chi[i + 36] = (char)('A' + i);
    }

    int cur = 0;
    for(int i = 0; i < k; ++i) {
        int num = rem? prp + 1: prp;
        rem = max(rem - 1, 0);
        while(cur < n * m && (i == k - 1 || num)) {
            int x = cur / m;
            int y = cur % m;
            if(x & 1) {
                y = m - 1 - y;
            }
            ans[x][y] = chi[i];
            num -= t[x][y] == 'R';
            cur++;
        }
    }

    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < m; ++j) {
            cout << ans[i][j];
        }
        cout << "\n";
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    cin >> tc;
    while(tc--) {
        input();
        solve();
    }
}
