#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <stack>
#include <string>
#include <cstring>
#include <cstdio>
// Kobe is the GOAT
// DON'T DIVIDE
// Greedy, Prefix, Sets/Bsearch, Dfs/bfs, DP
// Stack, Bitmask, Dsu 
using namespace std;

int n, m;
const int MAXN = 1005;
int a[MAXN][MAXN];
vector<pair<int, pair<int, int> > > r[MAXN], c[MAXN];
pair<int, int> val[MAXN][MAXN];
int rlast[MAXN], clast[MAXN];

int main()
{
	ios::sync_with_stdio(0);
	cin >> n >> m;

	for(int i = 0; i < n; i++)
		for(int j = 0; j < m; j++)
			cin >> a[i][j];

	for(int i = 0; i < n; i++)
	{
		for(int j = 0; j < m; j++)
			r[i].push_back(make_pair(a[i][j], make_pair(i, j)));
		sort(r[i].begin(), r[i].end());
		int curr = 1;
		for(int j = 0; j < m; j++)
		{
			if(j != 0 && r[i][j].first != r[i][j - 1].first)
				curr++;
			val[r[i][j].second.first][r[i][j].second.second].first = curr;
		}
		rlast[i] = curr;
	}

	for(int j = 0; j < m; j++)
	{
		for(int i = 0; i < n; i++)
			c[j].push_back(make_pair(a[i][j], make_pair(i, j)));
		sort(c[j].begin(), c[j].end());
		int curr = 1;
		for(int i = 0; i < n; i++)
		{
			if(i != 0 && c[j][i].first != c[j][i - 1].first)
				curr++;
			val[c[j][i].second.first][c[j][i].second.second].second = curr;
		}
		clast[j] = curr;
	}

	for(int i = 0; i < n; i++)
	{
		for(int j = 0; j < m; j++)
		{
			int x = max(val[i][j].first, val[i][j].second);
			cout << max(x - val[i][j].first + rlast[i], x - val[i][j].second + clast[j]) << " ";
		}
		cout << "\n";
	}

	return 0;
}
