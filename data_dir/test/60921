#include <bits/stdc++.h>
#define pb push_back
#define inf 0x3f3f3f3f
#define all(v) (v).begin() , (v).end()
#define ones(n) __builtin_popcount(n)
using namespace std;

typedef vector<int> vi;
typedef long long ll;

int di[] = {0 , 0 , 1 , -1 , 1 , 1 , -1 , -1};
int dj[] = {1 ,-1 , 0 , 0 , -1 , 1 ,  1 , -1};


const int N = 1e5 + 5;
vi even , odd;
vi parts[N];

int main(){
    int n , par  , E , O , x;
    scanf("%d%d%d",&n,&par,&E);
    O = par - E;

    for(int i = 0 ;i < n ;i++){
        scanf("%d",&x);
        if(x&1)
            odd.pb(x);
        else
            even.pb(x);
    }

    if(odd.size() < O || (odd.size() - O)&1 || even.size() + (odd.size() - O) / 2 < E){
        puts("NO");
        return 0;
    }

    for(int i = 0 ;i < O ;i++){
        parts[i].pb(odd.back());
        odd.pop_back();
    }

    for(int i = O ;i < par ;i++){
        if(even.size()){
            parts[i].pb(even.back());
            even.pop_back();
        }else{
            parts[i].pb(odd.back());
            odd.pop_back();
            parts[i].pb(odd.back());
            odd.pop_back();
        }
    }

    for(int i = 0 ;i < even.size() ;i++)
        parts[0].pb(even[i]);

    for(int j = 1 ;j < odd.size() ;j += 2)
        parts[0].pb(odd[j-1]) , parts[0].pb(odd[j]);

    puts("YES");
    for(int i = 0 ;i < par ;i++){
        printf("%d ",parts[i].size());
        for(int j = 0 ;j < parts[i].size() ;j++)
            printf("%d%c",parts[i][j]," \n"[j == parts[i].size()-1]);
    }
}
