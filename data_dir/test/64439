#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
#include <map>
#include <iostream>
#include <vector>
#include <set>
#include <functional>
#include <map>
#include <string> 
#include <stack>

using namespace std;

string str[10], src[10];
int len[10], srclen[10];
bool flag = false;
int permut[10];

string ans[50];
string bst[50];

int cmps(string& a, string& b) {
	int ss = min(a.length(), b.length());
	for (int i = 0; i < ss; ++i)
		if (a[i] < b[i])
			return -1;
		else
		if (a[i] > b[i])
			return 1;

	if (a.length() < b.length()) return -1;
	if (a.length() > b.length()) return 1;

	return 0;
}

void compar(int n, int m) {
	if (!flag) {
		for (int i = 0; i < n; ++i) bst[i] = ans[i];
		flag = true;
	}

	for (int i = 0; i < n; ++i) {
		if (bst[i].length() == 0) return;
		int ccc = cmps(bst[i], ans[i]);
		if (ccc == -1) return;
		if (ccc == 1) {
			int p = 0;
			while (bst[p].length() > 0) {
				bst[p].clear();
				++p;
			}
			for (int j = 0; j < n; ++j) bst[j] = ans[j];
			return;
		}
	}

	if (bst[n].length() == 0) return;

	int p = 0;
	while (bst[p].length() > 0) {
		bst[p].clear();
		++p;
	}
	for (int j = 0; j < n; ++j) bst[j] = ans[j];

}

void check() {
	if (len[2] + len[5] - 1 != len[0]) return;
	if (len[3] + len[4] - 1 != len[1]) return;
	
	if (str[2][0] != str[3][0]) return;
	if (str[3][len[3] - 1] != str[0][0]) return;
	if (str[2][len[2] - 1] != str[1][0]) return;
	if (str[0][len[2] - 1] != str[1][len[3] - 1]) return;
	if (str[1][len[1] - 1] != str[5][0]) return;
	if (str[0][len[0] - 1] != str[4][0]) return;
	if (str[4][len[4] - 1] != str[5][len[5] - 1]) return;

	int n = len[0], m = len[1];

	for (int i = 0; i < n; ++i) ans[i].clear();

	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			ans[i].push_back('.');
		}
	}

	for (int i = 0; i < len[2]; ++i) {
		ans[i][0] = str[2][i];
	}

	for (int i = 0; i < len[0]; ++i) {
		ans[i][len[3] - 1] = str[0][i];
	}

	for (int i = 0; i < len[5]; ++i) {
		ans[len[2] - 1 + i][len[1] - 1] = str[5][i];
	}

	for (int i = 0; i < len[1]; ++i) {
		ans[len[2] - 1][i] = str[1][i];
	}

	for (int i = 0; i < len[3]; ++i) {
		ans[0][i] = str[3][i];
	}

	for (int i = 0; i < len[4]; ++i) {
		ans[len[0] - 1][len[3] - 1 + i] = str[4][i];
	}

	compar(n, m); //
}

void gen(int p) {
	if (p == 6) {
		for (int i = 0; i < 6; ++i) {
			len[i] = srclen[permut[i]];
			str[i] = src[permut[i]];
		}
		check();
		return;
	}

	gen(p + 1);
	for (int i = p + 1; i < 6; ++i) {
		swap(permut[p], permut[i]);
		gen(p + 1);
		swap(permut[p], permut[i]);
	}
}

int main() {

#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

	for (int i = 0; i < 6; ++i) cin >> src[i], permut[i] = i;
	for (int i = 0; i < 6; ++i) srclen[i] = src[i].length();

	gen(0);


	if (!flag) {
		cout << "Impossible";
	} else {
		int p = 0;
		while (bst[p].length() > 0) {
			cout << bst[p];
			cout << endl;
			++p;
		}
	}

	return 0; 
}