/* winners never quit and quitters never win.
      #swap                                 */
#include <bits/stdc++.h>
using namespace std;
typedef int ll;
#define mod 1000000007
#define rk 256
#define pb push_back
#define mp make_pair
#define vc vector
#define fs first
#define sec second
#define pq priority_queue
#define lb lower_bound
#define ub upper_bound
#define pll pair<ll,ll> 
#define all(v) v.begin(),v.end()
#define T ll t=0;cin>>t;for(ll test=0;test<t;test++)
bool sortsec(const pair<ll,ll> &a,
              const pair<ll,ll> &b)
{
    return (a.fs > b.fs);
}
ll cnt=0;
void dfs(vc<ll> v[],bool visited[],ll sor)
{
    cnt++;
    visited[sor]=true;
    for(ll a=0;a<v[sor].size();a++)
    {
        ll b=v[sor][a];
        if(!visited[b])
        {
            dfs(v,visited,b);
        }
    }
}
 
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
	//isprime();
	ll n=0,m=0,sor=0;
	cin>>n>>m>>sor;
	sor--;
	vc<ll> v[n];
	ll in[n]={0};
	for(ll a=0;a<m;a++)
	{
	    ll i=0,j=0;
	    cin>>i>>j;
	    i--;j--;
	    v[i].pb(j);
	    in[j]++;
	}
	ll ans=0;
	for(ll a=0;a<n;a++)
	{
	    if(!in[a] && a!=sor)
	    {
	        ans++;
	        v[sor].pb(a);
	        in[a]++;
	    }
	}
	bool visited[n]={false},visited1[n]={false};
	dfs(v,visited,sor);
	vc<pll> v1;
	for(ll a=0;a<n;a++)
	{
	    for(ll a=0;a<n;a++)
	    {
	        visited1[a]=visited[a];
	    }
	    if(!visited1[a])
	    {
	        cnt=0;
	        dfs(v,visited1,a);
	        v1.pb(mp(cnt,a));
	    }
	}
	sort(all(v1),sortsec);
	for(ll a=0;a<v1.size();a++)
	{
	    ll b=v1[a].sec;
	    if(!visited[b])
	    {
	        ans++;
	        dfs(v,visited,b);
	    }
	}
	cout<<ans<<endl;
	return 0;
}