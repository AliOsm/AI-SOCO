#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const ll mod=1000000007;
struct Matrix{
	ll grid[20][20];
	int size;
	Matrix(int _sz){
		size=_sz;
		memset(grid,0,sizeof grid);
	}
	inline Matrix operator*(const Matrix& rhs){
		Matrix res(size);
		for(int i=0;i<size;i++){
			for(int j=0;j<size;j++){
				for(int k=0;k<size;k++){
					res.grid[i][j]=(res.grid[i][j]+grid[i][k]*rhs.grid[k][j]%mod)%mod;
				}
			}
		}
		return res;
	}
};
Matrix pow2(Matrix mat,ll k){
	Matrix res=Matrix(mat.size);
	for(int i=0;i<res.size;i++)
		res.grid[i][i]=1;
	while(k>0){
		if(k&1) res=res*mat;
		mat=mat*mat;
		k>>=1;
	}
	return res;
}
ll a[110],b[110],pre[20],tmp[20];
int c[110];
int main(){
	int N;
	ll K;
	scanf("%d%lld",&N,&K);
	for(int i=1;i<=N;i++){
		scanf("%lld%lld%d",a+i,b+i,c+i);
	}
	b[N]=K;
	pre[0]=1;
	for(int i=1;i<=N;i++){
		Matrix mat(c[i]+1);
		for(int j=0;j<=c[i];j++){
			for(int k=0;k<=c[i];k++){
				if(k-1<=j && j<=k+1)
					mat.grid[j][k]=1;
			}
		}
		mat=pow2(mat,b[i]-a[i]);
		memset(tmp,0,sizeof tmp);
		for(int j=0;j<=c[i];j++){
			for(int k=0;k<=c[i];k++){
				tmp[k]=(tmp[k]+mat.grid[j][k]*pre[j]%mod)%mod;
			}
		}
		memset(pre,0,sizeof pre);
		for(int j=0;j<=c[i];j++)
			pre[j]=tmp[j];
	}
	printf("%lld\n",pre[0]);
	return 0;
}