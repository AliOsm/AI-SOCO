#include <cstdio>
#include <string>
#include <cstdlib>
#include <functional>
#include <vector>
#include <set>
#include <map>
#include <iomanip>
#include <queue>
#include <iostream>
#include <algorithm>

using namespace std;
typedef pair<int, int> pr;
typedef pair<pr, pr> prr;
typedef pair<int, pr> edge;

typedef long double ld;
typedef long long ll;
#define MP make_pair
const int inf = -2000000000;
const ll mod7 = 1000000007;
int gcd(int a, int b)
{
    while (b)
    {
        a %= b;
        swap(a, b);
    }
    return a;
}

pair<ll, ll> Calc[11];

string qu[100001];

int main()
{
    string str; cin >> str;
    int n; cin >> n;

    for (int i = 0; i < 10; ++i)
        Calc[i].first = Calc[i].second = -1;

    for (int i = 0; i < n; ++i)
    {
        cin >> qu[i];
    }

    for (int i = n - 1; i >= 0; --i)
    {
        pair<ll, ll> data;
        ll sum = 0, ddd = 1;
        for (int j = 3; j < qu[i].length(); ++j)
        {
            int C = qu[i][j] - '0';
            if (Calc[C].first != -1)
            {
                sum *= Calc[C].second; sum %= mod7;
                sum += Calc[C].first; sum %= mod7;
                ddd *= Calc[C].second; ddd %= mod7;
            }
            else
            {
                sum *= 10; sum += C; sum %= mod7;
                ddd *= 10; ddd %= mod7;
            }
        }
        Calc[qu[i][0] - '0'] = MP(sum, ddd);
    }
    ll sum = 0, ddd = 1;
    for (int j = 0; j < str.length(); ++j)
    {
        int C = str[j] - '0';
        if (Calc[C].first != -1)
        {
            sum *= Calc[C].second; sum %= mod7;
            sum += Calc[C].first; sum %= mod7;
            ddd *= Calc[C].second; ddd %= mod7;
        }
        else
        {
            sum *= 10; sum += C; sum %= mod7;
            ddd *= 10; ddd %= mod7;
        }
    }

    cout << sum;
    return 0;
}