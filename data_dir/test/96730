#include <bits/stdc++.h>

using namespace std;

#define mx 300005
#define int long long
#define pii pair <int, int>
#define piii pair <int, pii>
#define fi first
#define se second
#define mod 1000000007
#define inf 1e18
#define pb push_back
#define mem(ara, x) memset(ara, x, sizeof ara)
#define read() freopen("in.txt", "r", stdin)
#define write() freopen("out.txt", "w", stdout)
#define fst ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

string s[1005];
int r[1005][1005], c[1005][1005];
int tree[1005 * 5][1005];
void init(int node, int b, int e, int idx){
    if (b == e) {
        tree[node][idx] = r[b-1][idx];
        return;
    }
    int Left = node * 2;
    int Right = node * 2 + 1;
    int mid = (b + e) / 2;
    init(Left, b, mid, idx);
    init(Right, mid + 1, e, idx);
    tree[node][idx] = min(tree[Left][idx], tree[Right][idx]);
}
int query(int node, int b, int e, int i, int j, int idx){
    if (i > e || j < b)
        return 99999999;
    if (b >= i && e <= j)
        return tree[node][idx];
    int Left = node * 2;
    int Right = node * 2 + 1;
    int mid = (b + e) / 2;
    int p1 = query(Left, b, mid, i, j, idx);
    int p2 = query(Right, mid + 1, e, i, j, idx);
    return min(p1, p2);
}

int32_t main(){
    //read();
    fst;
    int n, m;
    while(cin >> n >> m){
        for(int i=0;i<n;i++){
            cin >> s[i];
        }
        mem(r, 0);
        mem(c, 0);
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                r[i][j] = 1;
                c[i][j] = 1;
                if(j && s[i][j] == s[i][j-1]) r[i][j] += r[i][j-1];
                if(i && s[i][j] == s[i-1][j]) c[i][j] += c[i-1][j];
                //cout << c[i][j] << " ";
            }
            //cout << endl;
        }
        for(int i=0;i<m;i++){
            init(1, 1, n, i);
        }
        int ans = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                int a = c[i][j];
                int l = i - a;
                if(l<0) continue;
                if(c[l][j] != a) continue;
                l = l - a;
                if(l<0) continue;
                if(c[l][j] < a) continue;
                l = l - a + 1;
                int b = query(1, 1, n, l+1, i+1, j);
                ans += b;
                //cout << "ok" << i << " " << j << " " << l << endl;
            }
        }
        cout << ans << endl;
    }
	return 0;
}























