#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const ld EPS = 1e-11;
const ld PI = acos(-1.0);
const int INF = (int)1e9 + 5;
const ll LINF = (ll)1e18 + 5;

template<class T> 
ll abs(const T & x) { return x < 0 ? -x : x; }

template<class T> 
ll round(const T & x) { return x < 0 ? x - 0.5 : x + 0.5; }

template<class T> 
bool chmin(T & x, const T & y) {
	if (y < x) {
		x = y;
		return true;
	}
	return false;
}

template<class T> 
bool chmax(T & x, const T & y) {
	if (x < y) {
		x = y;
		return true;
	}
	return false;
}

#define all(a) (a).begin(), (a).end()

const int MAX_NODES = 205;

vector<string> prefixes;

int findPrefix(const string & s) {
	int idx = lower_bound(all(prefixes), s) - prefixes.begin();
	if (idx == (int)prefixes.size() || prefixes[idx] != s) return -1;
	return idx;
}

struct mat {
	ll arr[MAX_NODES][MAX_NODES];
	mat() {
		memset(arr, 0, sizeof(arr));
	}
	inline const ll * operator [](int idx) const {
		return arr[idx];
	}
	inline ll * operator [](int idx) {
		return arr[idx];
	}
	mat operator *(const mat & o) const {
		mat res;
		for (int i = 0; i < MAX_NODES; i++) {
			for (int j = 0; j < MAX_NODES; j++) {
				res[i][j] = -LINF;
				for (int k = 0; k < MAX_NODES; k++) {
					res[i][j] = max(res[i][j], (*this)[i][k] + o[k][j]);
				}
			}
		}
		return res;
	}
};

mat powmod(mat a, ll n) {
	mat res;
	for (int i = 0; i < MAX_NODES; i++) {
		for (int j = 0; j < MAX_NODES; j++) {
			res[i][j] = -LINF;
		}
	}
	res[0][0] = 0;
	while (n) {
		if (n % 2 == 1) {
			res = res * a;
			n--;
		}
		else {
			a = a * a;
			n /= 2;
		}
	}
	return res;
}

int main() {
#ifdef LOCAL 
	freopen("input.txt", "r", stdin);
#else
#endif
	
	int n;
	ll l;
	cin >> n >> l;

	vector<int> a(n);

	for (int i = 0; i < n; i++) {
		cin >> a[i];			
	}

	vector<string> s(n);

	for (int i = 0; i < n; i++) {
		cin >> s[i];
	}

	prefixes = {""};

	for (int i = 0; i < n; i++) {
		string z;
		for (char c : s[i]) {
			z.push_back(c);
			prefixes.push_back(z);
		}
	}

	sort(all(prefixes));
	prefixes.erase(unique(all(prefixes)), prefixes.end());
	
	mat m;

	for (int i = 0; i < MAX_NODES; i++) {
		for (int j = 0; j < MAX_NODES; j++) {
			m[i][j] = -LINF;
		}
	}

	for (int v = 0; v < (int)prefixes.size(); v++) {
		for (char c = 'a'; c <= 'z'; c++) {
			string tmp = prefixes[v] + c;
			while (findPrefix(tmp) == -1) tmp.erase(tmp.begin());
			if (prefixes[v] == "" && c == 'h') {
				cerr << tmp << endl;
			}
			int to = findPrefix(tmp);
			m[v][to] = 1;
		}
	}

	for (string s : prefixes) {
		cerr << "s = " << s << endl;
	}
	
	vector<int> costTo(prefixes.size());

	for (int v = 0; v < (int)prefixes.size(); v++) {
		int & sum = costTo[v];
		for (int i = 0; i < n; i++) {
			if (prefixes[v].size() >= s[i].size() && prefixes[v].substr(prefixes[v].size() - s[i].size()) == s[i]) {
				sum += a[i];
			}
		}
	}

	cerr << "aaa" << endl;

	
	for (int x = 0; x < (int)prefixes.size(); x++) {
		for (int y = 0; y < (int)prefixes.size(); y++) {
			if (m[x][y] == 1) {
				m[x][y] = costTo[y];
			}
			else m[x][y] = -LINF;
			cerr << m[x][y] << " ";
		}
		cerr << endl;
	}
	m = powmod(m, l);

	ll res = 0;

	for (int to = 0; to < MAX_NODES; to++) {
		res = max(res, m[findPrefix("")][to]);
	}



	cout << res << endl;
}