#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
using namespace std;
#define MS0(I) memset(I, 0, sizeof(I));
#define MS1(I) memset(I, -1, sizeof(I));
#define rep(i, n) for(int i = 0; i < (n); ++i)
#define rep1(i, s, n) for(int i = (s); i < (n); ++i)
#define per1(i, a, b) for(int i = a; i >= b; --i)
#define DRI(A) int A; scanf("%d", &A);
#define DRII(A, B) int A, B; scanf("%d %d", &A, &B);
#define DRIII(A, B, C) int A, B, C; scanf("%d %d %d", &A, &B, &C);
#define DRL(A) long long A; scanf("%lld", &A);
#define DRLL(A, B) long long A, B; scanf("%lld %lld", &A, &B);
#define DRLLL(A, B, C) long long A, B, C; scanf("%lld %lld %lld", &A, &B, &C);
#define SZ(x) ((int)x.size() )
#define MP make_pair 
#define pb push_back
#define F first
#define S second
#define ALL(I) (I).begin(), (I).end()
#define ios std::ios::sync_with_stdio(false); std::cin.tie(0);
typedef const void CV;
typedef long long LL;
typedef unsigned long long ULL;
typedef double DB;
typedef long double LDB;
typedef pair<int, int> PII; 
typedef pair<int, LL> PIL;
typedef pair<LL, int> PLI;
const double eps = 1e-13;
const double PI = acos(-1);
//////////////////////////////
const LL INFF = 1e18;
const int INF = 1e9;
const int mod = 1e9+7;
const int MAX = 2e5+7;
int a[MAX], c[MAX];
vector<int>edge[MAX];
vector<int>re_edge[MAX];
int gp[MAX], siz[MAX];
int fd(int v){
  return gp[v] == v ? v : gp[v] = fd(gp[v]);
}
void uni(int u, int v){
  u = fd(u), v = fd(v);
  if(u == v) return ;
  if(siz[u] > siz[v]) swap(u, v);
  gp[u] = v;
  siz[v] += siz[u];
  return ;
}
int n;
struct Scc{
  int cntp = 0;
  int re[MAX];
  bitset<MAX>ck;
  void dfs(int u){
    ck[u] = 1;
    for(int v : edge[u]){
      if(!ck[v]) dfs(v);
    }
    re[++cntp] = u;
  }
  void dfs2(int u, int la){
    ck[u] = 1;
    uni(u, la);
    for(int v : re_edge[u]){
      if(!ck[v]) dfs2(v, la);
    }
  }
  void solve(){
    rep1(i, 1, n+1) if(!ck[i]) dfs(i);
    ck.reset();
    per1(i, n, 1) if(!ck[ re[i] ]) dfs2(re[i], re[i]);
  }
}scc;
void init(){
  scanf("%d", &n);
  rep1(i, 1, n+1) siz[i] = 1, gp[i] = i;
  rep1(i, 1, n+1) scanf("%d", c + i);
  rep1(i, 1, n+1) scanf("%d", a + i);
  rep1(i, 1, n+1){
    edge[i].pb( a[i] );
    re_edge[ a[i] ].pb( i );
  }
  return ;
}
int mn[MAX];
bool ok[MAX];
void sol(){
  scc.solve();

  rep1(i, 1, n+1) mn[i] = INF;
  rep1(i, 1, n+1){
    mn[ fd(i) ] = min(mn[ fd(i) ], c[i]);
    for(int v : edge[i]){
      if( fd(v) != fd(i) ){
        ok[ fd(i) ] = 1; break;
      }
    }
  }
  int ans = 0;
  rep1(i, 1, n+1) if( fd(i) == i ){
    if(!ok[i]) ans += mn[i];
  }
  printf("%d\n", ans);
  return ;
}
int main(void){
  init();
  sol();
  return 0;
}
