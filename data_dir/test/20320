////!multi
//void __(){
//    _(ll,n);
//    vl f = factorize(n);
//    vl tf = f;
//    unique(tf);
//    if(tf.size() >= 2){
//        ll a = tf[0];
//        ll b = tf.back();
//        ll c = n/a/b;
//        if(c != a && c != b && c != 1){
//            print "YES";
//            print a,b,c;
//            return;
//        }
//        else
//            print "NO";
//    }
//    else if(f.size() >= 6){
//        ll a = f[0];
//        ll b = f[0]*f[0];
//        ll c = n/a/b;
//        assert(c != a && c != b);
//        print "YES";
//        print a,b,c;
//        return;
//    }
//    else
//        print "NO";
//}
#include <stack>
#include <numeric>
#include <cmath>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <cassert>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define REP_ZERO_INT(i,r) for(int i = 0; i < (r); ++i)
#define GET_REP_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define rep(...) GET_REP_MACRO(__VA_ARGS__,REP_ANY,REP_INT,REP_ZERO_INT)(__VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define T1 template<typename T> static
#ifndef __SIZEOF_INT128__
#define __int128 Big 
#endif
using namespace std;
typedef long long ll;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef vector<ll> vl;
typedef double ld;
const ll MOD = 1e9 + 7;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
namespace FFT_precision{
    template<typename T>vector<T> multiply(const vector<T> & a, const vector<T> & b, bool split = false, bool normalize = false);
}
T1 T mult64(T x, T y, T mod = MOD);
struct Big{
    static const int base = 1000000000;
    static const int base_digits = 9;
    int sign;
    vector<int> a;
    int size(){
        if(a.empty())
            return 0;
        int ans = (sz(a) - 1) * base_digits;
        int ca = a.back();
        while(ca)
            ans++, ca /= 10;
        return ans;
    }
    Big operator^(const Big& v){
        Big ans = 1, a = *this, b = v;
        while(!b.isZero()){
            if(b % 2)
                ans *= a;
            a *= a, b /= 2;
        }
        return ans;
    }
    string to_string(){
        stringstream ss;
        ss << *this;
        string s;
        ss >> s;
        return s;
    }
    int sumof(){
        string s = to_string();
        int ans = 0;
        for(auto c : s)
            ans += c - '0';
        return ans;
    }
    Big()
        : sign(1){
        }
    Big(long long v){
        *this = v;
    }
    Big(const string& s){
        read(s);
    }
    void operator=(long long v){
        sign = 1;
        a.clear();
        if(v < 0)
            sign = -1, v = -v;
        for(; v > 0; v = v / base)
            a.push_back(v % base);
    }
    Big operator+(const Big& v)const{
        if(sign == v.sign){
            Big res = v;
            for(int i = 0, carry = 0; i < max(sz(a), sz(v.a)) || carry; ++i){
                if(i == sz(res.a))
                    res.a.push_back(0);
                res.a[i] += carry + (i < sz(a) ? a[i] : 0);
                carry = res.a[i] >= base;
                if(carry)
                    res.a[i] -= base;
            }
            return res;
        }
        return *this - (-v);
    }
    template<typename T> friend
    Big operator+(const T &v, const Big &b){
        return b+Big(v);
    }
    Big operator-(const Big& v)const{
        if(sign == v.sign){
            if(abs() >= v.abs()){
                Big res = *this;
                for(int i = 0, carry = 0; i < sz(v.a) || carry; ++i){
                    res.a[i] -= carry + (i < sz(v.a) ? v.a[i] : 0);
                    carry = res.a[i] < 0;
                    if(carry)
                        res.a[i] += base;
                }
                res.trim();
                return res;
            }
            return -(v - *this);
        }
        return *this + (-v);
    }
    void operator*=(int v){
        if(v < 0)
            sign = -sign, v = -v;
        for(int i = 0, carry = 0; i < sz(a) || carry; ++i){
            if(i == sz(a))
                a.push_back(0);
            long long cur = a[i] * (long long)v + carry;
            carry = (int)(cur / base);
            a[i] = (int)(cur % base);
            //asm("divl %%ecx" : "=a"(carry), "=d"(a[i]) : "A"(cur), "c"(base));
        }
        trim();
    }
    Big operator*(int v)const{
        Big res = *this;
        res *= v;
        return res;
    }
    void operator*=(long long v){
        if(v < 0)
            sign = -sign, v = -v;
        for(int i = 0, carry = 0; i < sz(a) || carry; ++i){
            if(i == sz(a))
                a.push_back(0);
            long long cur = a[i] * (long long)v + carry;
            carry = (int)(cur / base);
            a[i] = (int)(cur % base);
            //asm("divl %%ecx" : "=a"(carry), "=d"(a[i]) : "A"(cur), "c"(base));
        }
        trim();
    }
    Big operator*(long long v)const{
        Big res = *this;
        res *= v;
        return res;
    }
    friend pair<Big, Big> divmod(const Big& a1, const Big& b1){
        int norm = base / (b1.a.back() + 1);
        Big a = a1.abs() * norm;
        Big b = b1.abs() * norm;
        Big q, r;
        q.a.resize(sz(a.a));
        for(int i = sz(a.a) - 1; i >= 0; i--){
            r *= base;
            r += a.a[i];
            int s1 = sz(r.a) <= sz(b.a) ? 0 : r.a[sz(b.a)];
            int s2 = sz(r.a) <= sz(b.a) - 1 ? 0 : r.a[sz(b.a) - 1];
            int d = ((long long)base * s1 + s2) / b.a.back();
            r -= b * d;
            while(r < 0)
                r += b, --d;
            q.a[i] = d;
        }
        q.sign = a1.sign * b1.sign;
        r.sign = a1.sign;
        q.trim();
        r.trim();
        return make_pair(q, r / norm);
    }
    Big operator/(const Big& v)const{
        return divmod(*this, v).first;
    }
    Big operator%(const Big& v)const{
        return divmod(*this, v).second;
    }
    void operator/=(int v){
        if(v < 0)
            sign = -sign, v = -v;
        for(int i = sz(a) - 1, rem = 0; i >= 0; --i){
            long long cur = a[i] + rem * (long long)base;
            a[i] = (int)(cur / v);
            rem = (int)(cur % v);
        }
        trim();
    }
    Big operator/(int v)const{
        Big res = *this;
        res /= v;
        return res;
    }
    int operator%(int v)const{
        if(v < 0)
            v = -v;
        int m = 0;
        for(int i = sz(a) - 1; i >= 0; --i)
            m = (a[i] + m * (long long)base) % v;
        return m * sign;
    }
    void operator+=(const Big& v){
        *this = *this + v;
    }

    void operator++(){
        *this = *this + 1;
    }
    void operator-=(const Big& v){
        *this = *this - v;
    }
    void operator*=(const Big& v){
        *this = *this * v;
    }
    void operator/=(const Big& v){
        *this = *this / v;
    }
    void operator%=(const Big& v){
        *this = *this-(*this / v)*v;
    }
    bool operator<(const Big& v)const{
        if(sign != v.sign)
            return sign < v.sign;
        if(sz(a) != sz(v.a))
            return sz(a) * sign < sz(v.a) * v.sign;
        for(int i = sz(a) - 1; i >= 0; i--)
            if(a[i] != v.a[i])
                return a[i] * sign < v.a[i] * sign;
        return false;
    }
    bool operator>(const Big& v)const{
        return v < *this;
    }
    bool operator<=(const Big& v)const{
        return !(v < *this);
    }
    bool operator>=(const Big& v)const{
        return !(*this < v);
    }
    bool operator==(const Big& v)const{
        return !(*this < v) && !(v < *this);
    }
    bool operator!=(const Big& v)const{
        return *this < v || v < *this;
    }
    void trim(){
        while(!a.empty() && !a.back())
            a.pop_back();
        if(a.empty())
            sign = 1;
    }
    bool isZero()const{
        return a.empty() || (sz(a) == 1 && !a[0]);
    }
    Big operator-()const{
        Big res = *this;
        res.sign = -sign;
        return res;
    }
    Big abs()const{
        Big res = *this;
        res.sign *= res.sign;
        return res;
    }
    explicit operator long long () const{
        long long res = 0;
        for(int i = sz(a) - 1; i >= 0; i--)
            res = res * base + a[i];
        return res * sign;
    }
    explicit operator int () const{
        return (operator long long)();
    }
    friend Big gcd(const Big& a, const Big& b){
        return b.isZero() ? a : gcd(b, a % b);
    }
    friend Big lcm(const Big& a, const Big& b){
        return a / gcd(a, b) * b;
    }
    void read(const string& s){
        sign = 1;
        a.clear();
        int pos = 0;
        while(pos < sz(s) && (s[pos] == '-' || s[pos] == '+')){
            if(s[pos] == '-')
                sign = -sign;
            ++pos;
        }
        for(int i = sz(s) - 1; i >= pos; i -= base_digits){
            int x = 0;
            for(int j = max(pos, i - base_digits + 1); j <= i; j++)
                x = x * 10 + s[j] - '0';
            a.push_back(x);
        }
        trim();
    }
    friend istream& operator>>(istream& stream, Big& v){
        string s;
        stream >> s;
        v.read(s);
        return stream;
    }
    explicit operator string () const{
        stringstream stream;
        if(sign == -1)
            stream << '-';
        stream << (a.empty() ? 0 : a.back());
        for(int i = sz(a) - 2; i >= 0; --i)
            stream << setw(base_digits) << setfill('0') << a[i];
        return stream.str();
    }
    friend ostream& operator<<(ostream& stream, const Big& v){
        return stream << string(v);
        //if(v.sign == -1)
            //stream << '-';
        //stream << (v.a.empty() ? 0 : v.a.back());
        //for(int i = sz(v.a) - 2; i >= 0; --i)
            //stream << setw(base_digits) << setfill('0') << v.a[i];
        //return stream;
    }
    static vector<int> convert_base(const vector<int>& a, int old_digits, int new_digits){
        if(old_digits == new_digits) return a;
        vector<long long> p(max(old_digits, new_digits) + 1);
        p[0] = 1;
        for(int i = 1; i < sz(p); i++)
            p[i] = p[i - 1] * 10;
        vector<int> res;
        long long cur = 0;
        int cur_digits = 0;
        for(int i = 0; i < sz(a); i++){
            cur += a[i] * p[cur_digits];
            cur_digits += old_digits;
            while(cur_digits >= new_digits){
                res.push_back(int(cur % p[new_digits]));
                cur /= p[new_digits];
                cur_digits -= new_digits;
            }
        }
        res.push_back((int)cur);
        while(!res.empty() && !res.back())
            res.pop_back();
        return res;
    }
    static vl karatsubaMultiply(vl a, vl b){
        while(sz(a) < sz(b)) a.push_back(0);
        while(sz(b) < sz(a)) b.push_back(0);
        while(sz(a) & (sz(a) - 1)) a.push_back(0), b.push_back(0);
        int n = sz(a);
        vl res(n + n);
        if(n <= 32){
            for(int i = 0; i < n; i++)
                for(int j = 0; j < n; j++)
                    res[i + j] += a[i] * b[j];
            return res;
        }
        int k = n >> 1;
        vl a1(a.begin(), a.begin() + k);
        vl a2(a.begin() + k, a.end());
        vl b1(b.begin(), b.begin() + k);
        vl b2(b.begin() + k, b.end());
        vl a1b1 = karatsubaMultiply(a1, b1);
        vl a2b2 = karatsubaMultiply(a2, b2);
        for(int i = 0; i < k; i++)
            a2[i] += a1[i];
        for(int i = 0; i < k; i++)
            b2[i] += b1[i];
        vl r = karatsubaMultiply(a2, b2);
        for(int i = 0; i < sz(a1b1); i++)
            r[i] -= a1b1[i];
        for(int i = 0; i < sz(a2b2); i++)
            r[i] -= a2b2[i];
        for(int i = 0; i < sz(r); i++)
            res[i + k] += r[i];
        for(int i = 0; i < sz(a1b1); i++)
            res[i] += a1b1[i];
        for(int i = 0; i < sz(a2b2); i++)
            res[i + n] += a2b2[i];
        return res;
    }
    Big operator*(const Big& v)const{
        int digs = sz(this->a)+sz(v.a) >= 256 ? 3 : 6;
        int tmp_base = 1; rep(i,digs) tmp_base *= 10;
        vector<int> a6 = convert_base(this->a, base_digits, digs);
        vector<int> b6 = convert_base(v.a, base_digits, digs);
        vl a(a6.begin(), a6.end());
        vl b(b6.begin(), b6.end());
        while(sz(a) < sz(b))
            a.push_back(0);
        while(sz(b) < sz(a))
            b.push_back(0);
        while(sz(a) & (sz(a) - 1))
            a.push_back(0), b.push_back(0);
        vl c;
        if(digs == 6)
            c = karatsubaMultiply(a, b);
        else
            c = FFT_precision::multiply(a,b);
        Big res;
        res.sign = sign * v.sign;
        for(int i = 0, carry = 0; i < sz(c); i++){
            long long cur = c[i] + carry;
            res.a.push_back((int)(cur % tmp_base));
            carry = (int)(cur / tmp_base);
        }
        res.a = convert_base(res.a, digs, base_digits);
        res.trim();
        return res;
    }
};
T1 vector<T> unique(vector<T>& arr){
    sort(all(arr));
    arr.erase(unique(all(arr)), arr.end());
    return arr;
}
T1 istream& read(T, T, istream& = cin);
template<typename int_t = unsigned long long>
struct ModInt{
    static inline int_t add(int_t const&a, int_t const&b, int_t const&mod){
        int_t ret = a+b;
        if(ret>=mod) ret-=mod;
        return ret;
    }
    static inline int_t sub(int_t const&a, int_t const&b, int_t const&mod){
        return add(a, mod-b);
    }
    static inline int_t mul(int_t const&a, int_t const&b, int_t const&mod){
        return mult64(a,b,mod);
    }
    static inline int_t pow(int_t const&a, int_t const&b, int_t const&mod){
        int_t ret = 1;
        int_t base = a;
        for(int i=0;b>>i;++i){
            if((b>>i)&1) ret = mul(ret, base, mod);
            base = mul(base, base, mod);
        }
        return ret;
    }
};
T1 bool miller_rabin_single(T const&x, T base){
    static_assert(is_integral<T>::value);
    if(x<T(4)) return x>T(1);
    if(x%2 == 0) return false;
    base%=x;
    if(base == 0) return true;
    T xm1 = x-1;
    int j = 1;
    T d = xm1/2;
    while(d%2 == 0){ // could use __builtin_ctz
        d/=2;
        ++j;
    }
    T t = ModInt<T>::pow(base, d, x);
    if(t==T(1) || t==T(xm1)) return true;
    for(int k=1;k<j;++k){
        t = ModInt<T>::mul(t, t, x);
        if(t == xm1) return true;
        if(t<=1) break;
    }
    return false;
}
T1 bool miller_rabin_multi(T const&){return true;}
template<typename T, typename... S>
bool miller_rabin_multi(T const&x, T const&base, S const&...bases){
    static_assert(is_integral<T>::value);
    if(!miller_rabin_single(x, base)) return false;
    return miller_rabin_multi(x, bases...);
}
T1 bool miller_rabin(T const&x){
    static_assert(is_integral<T>::value);
    if(x < 316349281) return miller_rabin_multi(x, T(11000544), T(31481107));
    if(x < 4759123141ll) return miller_rabin_multi(x, T(2), T(7), T(61));
    return miller_rabin_multi(x, T(2), T(325), T(9375), T(28178), T(450775), T(9780504), T(1795265022));
}
T1 T isqrt(T const&x){
    static_assert(is_integral<T>::value);
    assert(x>=T(0));
    T ret = static_cast<T>(sqrtl(x));
    while(ret>0 && ret*ret>x) --ret;
    while(x-ret*ret>2*ret)
        ++ret;
    return ret;
}
T1 T icbrt(T const&x){
    static_assert(is_integral<T>::value);
    assert(x>=T(0));
    T ret = static_cast<T>(cbrt(x));
    while(ret>0 && ret*ret*ret>x) --ret;
    while(x-ret*ret*ret>3*ret*(ret+1))
        ++ret;
    return ret;
}
static uint64_t squfof_iter_better(uint64_t const&x, uint64_t const&k, uint64_t const&it_max, uint32_t cutoff_div){
    static vector<uint16_t> saved;
    if(__gcd((uint64_t)k, x)!=1) return __gcd((uint64_t)k, x);
    //cerr << "try: " << x << " " << k << "\n";
    saved.clear();
    uint64_t scaledn = k*x;
    if(scaledn>>62) return 1;
    uint32_t sqrtn = isqrt(scaledn);
    uint32_t cutoff = isqrt(2*sqrtn)/cutoff_div;
    uint32_t q0 = 1;
    uint32_t p1 = sqrtn;
    uint32_t q1 = scaledn-p1*p1;
    if(q1 == 0){
        uint64_t factor = __gcd(x, (uint64_t)p1);
        return factor==x ? 1:factor;
    }
    uint32_t multiplier = 2*k;
    uint32_t coarse_cutoff = cutoff * multiplier;
    //cerr << "at: " << multiplier << "\n";
    uint32_t i, j;
    uint32_t p0 = 0;
    uint32_t sqrtq = 0;
    for(i=0;i<it_max;++i){
        uint32_t q, bits, tmp;
        tmp = sqrtn + p1 - q1;
        q = 1;
        if (tmp >= q1)
            q += tmp / q1;
        p0 = q * q1 - p1;
        q0 = q0 + (p1 - p0) * q;
        if (q1 < coarse_cutoff) {
            tmp = q1 / __gcd(q1, multiplier);
            if (tmp < cutoff) {
                saved.push_back((uint16_t)tmp);
            }
        }
        bits = 0;
        tmp = q0;
        while(!(tmp & 1)) {
            bits++;
            tmp >>= 1;
        }
        if (!(bits & 1) && ((tmp & 7) == 1)) {
            sqrtq = (uint32_t)isqrt(q0);
            if (sqrtq * sqrtq == q0) {
                for(j=0;j<saved.size();++j){
                    if(saved[j] == sqrtq) break;
                }
                if(j == saved.size()) break;
                //else cerr << "skip " << i << "\n";;
            }
        }
        tmp = sqrtn + p0 - q0;
        q = 1;
        if (tmp >= q0)
            q += tmp / q0;
        p1 = q * q0 - p0;
        q1 = q1 + (p0 - p1) * q;
        if (q0 < coarse_cutoff) {
            tmp = q0 / __gcd(q0, multiplier);
            if (tmp < cutoff) {
                saved.push_back((uint16_t) tmp);
            }
        }
    }
    if(sqrtq == 1) { return 1;}
    if(i == it_max) { return 1;}
    q0 = sqrtq;
    p1 = p0 + sqrtq * ((sqrtn - p0) / sqrtq);
    q1 = (scaledn - (uint64_t)p1 * (uint64_t)p1) / (uint64_t)q0;
    for(j=0;j<it_max;++j) {
        uint32_t q, tmp;
        tmp = sqrtn + p1 - q1;
        q = 1;
        if (tmp >= q1)
            q += tmp / q1;
        p0 = q * q1 - p1;
        q0 = q0 + (p1 - p0) * q;
        if (p0 == p1) {
            q0 = q1;
            break;
        }
        tmp = sqrtn + p0 - q0;
        q = 1;
        if (tmp >= q0)
            q += tmp / q0;
        p1 = q * q0 - p0;
        q1 = q1 + (p0 - p1) * q;
        if (p0 == p1)
            break;
    }
    if(j==it_max) {cerr << "RNG\n"; return 1;} // random fail
    uint64_t factor = __gcd((uint64_t)q0, x);
    if(factor == x) factor=1;
    return factor;
}
uint64_t squfof(uint64_t const&x){
    static array<uint32_t, 16> multipliers{1, 3, 5, 7, 11, 3*5, 3*7, 3*11, 5*7, 5*11, 7*11, 3*5*7, 3*5*11, 3*7*11, 5*7*11, 3*5*7*11};
    uint64_t cbrt_x = icbrt(x);
    if(cbrt_x*cbrt_x*cbrt_x == x) return cbrt_x;
    //uint32_t iter_lim = isqrt(isqrt(x))+10;
    uint32_t iter_lim = 300;
    for(uint32_t iter_fact = 1;iter_fact<20000;iter_fact*=4){
        for(uint32_t const&k : multipliers){
            if(numeric_limits<uint64_t>::max()/k<=x) continue; //would overflow
            uint32_t const it_max = iter_fact*iter_lim;
            uint64_t factor = squfof_iter_better(x, k, it_max, 1);
            if(factor==1 || factor==x) continue;
            return factor;
        }
    }
    cerr << "failed to factor: " << x << "\n";
    assert(0);
    return 1;
}
T1 vector<T> factorize(T x){
    static_assert(is_integral<T>::value);
    assert(x >= T(1));
    vector<T> ret;
    const uint32_t trial_limit = 5000;
    auto trial = [&](int i){while(x%i == 0){x/=i; ret.push_back(i);}};
    trial(2); trial(3);
    for(uint32_t i=5, j=2;i<=trial_limit && i*i <= x;i+=j, j=6-j){
        trial(i);
    }
    if(x > 1 && trial_limit*trial_limit >= x)
        trial(x);
    if(x>1){
        static stack<T> s;
        s.push(x);
        while(!s.empty()){
            x = s.top(); s.pop();
            if(!miller_rabin(x)){
                T factor = squfof(x);
                if(factor == 1 || factor == x){assert(0); return ret;}
                s.push(factor);
                s.push(x/factor);
            } else {
                ret.push_back(x);
            }
        }
    }
    sort(ret.begin(), ret.end());
    return ret;
}
T1 T mult64(T x, T y, T mod){
#ifdef __SIZEOF_INT128__
    return ll(__int128(x)*y%mod);
#else
    if(abs(x) >= mod)
        x %= mod;
    if(abs(y) >= mod)
        y %= mod;
    ll tmp = ((ull)x * y - (ull)((ld)x / mod * y + 1.0e-8) * mod);
    if(tmp >= mod)
        tmp -= mod;
    return (tmp < 0) ? (tmp + mod) : tmp;
#endif
}
struct _print {
    string sep,end;
    bool space;
    ostream &stream;
    _print(string _sep=" ",string _end="\n",
            ostream &_stream = cout) 
        : sep(_sep),end(_end),space(false),
            stream(_stream) {}
    ~_print() { stream << end; }

    template <typename T>
        _print &operator , (const T &t) {
            if (space) stream << sep;
            space = true;
            stream << t;
            return *this;
        }
};
#define print _print(),
#define INPUT_WITHOUT_INIT(type,name) type name; cin >> name
#define GET_INPUT_MACRO(_1,_2,_3,_4,_5,_6,_7,_8,NAME,...) NAME
#define _(...) GET_INPUT_MACRO(__VA_ARGS__,_IWI,_IWI,_IWI,_IWI,_IWI,_IWI,INPUT_WITHOUT_INIT)(__VA_ARGS__)
//!multi
void __(){
    _(ll,n);
    vl f = factorize(n);
    vl tf = f;
    unique(tf);
    if(tf.size() >= 2){
        ll a = tf[0];
        ll b = tf.back();
        ll c = n/a/b;
        if(c != a && c != b && c != 1){
            print "YES";
            print a,b,c;
            return;
        }
        else
            print "NO";
    }
    else if(f.size() >= 6){
        ll a = f[0];
        ll b = f[0]*f[0];
        ll c = n/a/b;
        assert(c != a && c != b);
        print "YES";
        print a,b,c;
        return;
    }
    else
        print "NO";
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
    int t;
    cin >> t;
    for(int i = 1; i <= t; ++i){
        __();
    }
}

