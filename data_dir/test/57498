#include <bits/stdc++.h>
#include<fstream>
#define ll long long
#define fr first
#define sc second
#define mp make_pair
#define ii pair<int,int>
#define All(v) v.begin(),v.end()
using namespace std;
int n;
int p[200000];
int sum[200000];
int R[200000];
int ok[200000];
multiset < int > my;
int root(int x)
{
    while(p[x] != x)
    {
        p[x] = p[p[x]];
        x = p[x];
    }
    return x;
}
void M(int i,int j)
{
    int x = root(i),y = root(j);
    if(x != y)
    {
        my.erase(my.find(sum[x]));
        my.erase(my.find(sum[y]));
        sum[x] = sum[x]+sum[y];
        sum[y] = sum[x];
        my.insert(sum[y]);
        p[y] = x;
    }
}
int in(int x)
{
    return (x>=0 && x < n&&ok[x]);
}
int solve2()
{
    multiset < int > :: iterator itr = my.begin();
    int R = *itr;
    R++;
    if(my.lower_bound(R) != my.end())
    {
        return 0;
    }
    return 1;
}
int main()
{

 cin>>n;
 for(int i=0;i<200000;i++)
 {
     p[i] = i;
     sum[i] = 1;
     ok[i] = 0;
 }
 int num = 0;
 vector < ii > v;
 int a[n];
 for(int i=0;i<n;i++)
 {
     cin>>a[i];
     v.push_back(mp(a[i],i));
 }
 v.push_back(mp(1e9+7,-1));
 sort(v.begin(),v.end());
 int id = 0;
 for(int i=0;i<v.size()-1;i++)
 {
     ii temp = v[i];
     ii temp2 = v[i+1];
     ok[temp.sc] = 1;
     my.insert(1);
     if(in(temp.sc-1) )
     {
         M(temp.sc , temp.sc-1);
     }
     if(in(temp.sc+1))
     {
         M(temp.sc , temp.sc+1);
     }

     if(temp.fr != temp2.fr)
     {
         if(solve2())
         {
             if(num < (int)my.size())
             {
                 num = max(num , (int)my.size());
                 id = temp.fr+1;

             }

         }
     }
 }
 cout<<id;

}
