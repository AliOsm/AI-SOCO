#include <bits/stdc++.h>
using namespace std;
using ll = long long;

struct dsu {
  vector<int> fa;
  map<int, int> m;

  dsu(int s) {
    fa.resize(s);
    fill(fa.begin(), fa.end(), -1);
  }

  void make_set() { m[1]++; }
  int count() { return m.size(); }
  int size() { return m.begin()->second; }
  int find(int x) { return fa[x] < 0 ? x : fa[x] = find(fa[x]); }

  void unite(int x, int y) {
    x = find(x);
    y = find(y);
    if (x != y) {
      auto fx = m.find(-fa[x]);
      if (--fx->second == 0) m.erase(fx);
      auto fy = m.find(-fa[y]);
      if (--fy->second == 0) m.erase(fy);
      fa[x] += fa[y];
      fa[y] = x;
      m[-fa[x]]++;
    }
  }
};

int main() {
  cin.tie(0);
  cin.sync_with_stdio(0);

  int n;
  cin >> n;

  vector<int> org(n);
  vector<pair<int, int>> a(n);

  for (size_t i = 0; i < n; i++) {
    cin >> org[i];
    a[i].first = org[i];
    a[i].second = i;
  }

  dsu d(n);
  sort(a.begin(), a.end());

  int ans = 0;
  int cnt = 0;
  for (size_t i = 0, j = 0; i < n; i = j) {
    while (j < n && a[i].first == a[j].first) {
      d.make_set();
      int x = a[j].second;
      if (0 <= x - 1 && org[x - 1] <= a[i].first) d.unite(x - 1, x);
      if (x + 1 < n && org[x + 1] <= a[i].first) d.unite(x, x + 1);
      ++j;
    }
    if (d.count() == 1 && d.size() > cnt) cnt = d.size(), ans = a[i].first + 1;
  }
  
  cout << ans;
}