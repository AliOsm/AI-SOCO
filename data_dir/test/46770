#include <bits/stdc++.h>
#define LL long long
using namespace std;
const int N = 1e5+7, M = 1e9+7;

LL fac[N], invfac[N];

LL power(LL b, LL p) {
    if (p==0)   return 1;
    LL ans = power(b, p/2);
    ans = (ans * ans)%M;
    if (p%2)    ans = (ans * b)%M;
    return ans;
}

void pre() {
    fac[0] = 1;
    for (int i=1; i<N; i++)
        fac[i] = (fac[i-1]*i)%M;

    invfac[N-1] = power(fac[N-1], M-2);
    for (int i=N-2; i>=0; i--)
        invfac[i] = (invfac[i+1] * (i+1))%M;
}

LL C(int n, int k)
{
    if (k<0 || k>n) return 0;
    LL num = fac[n];
    LL denom = (invfac[k] * invfac[n-k])%M;
    return (num * denom)%M;
}

int main()
{
    pre();
    ios::sync_with_stdio(0);
    cin.tie(0);

    int t;
    cin>>t;

    while (t--) {
        int n, k;
        cin>>n>>k;

        LL ans = 0;
        vector<int> primes;

        int x = n;
        for (int i=2; i*i<=n; i++)
            if (x%i==0) {
                primes.push_back(i);
                while (x%i==0)  x/=i;
            }

        if (x>1)    primes.push_back(x);

        int r = primes.size();
        for (int mask = 0; mask < (1<<r); mask++) {
            int sign = (__builtin_popcount(mask)%2 ? -1 : 1);
            int x = n;
            for (int i=0; i<r; i++)
                if (mask & (1<<i))
                    x/=primes[i];
            ans += sign * C(x-1, k-1);
            //cout<<x<<" "<<sign * C(x-1, k-1)<<endl;
        }
        ans = (ans%M+M)%M;
        cout<<ans<<"\n";
    }
}
