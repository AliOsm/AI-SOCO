#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int MX = 100005;
const int MD = 1000000007;

void add(int& a, int b) {
	a += b;
	if (a >= MD) a -= MD;
}
int mod_mult(ll a, ll b) {
	return (a * b) % MD;
}
int exp(int a, int b) {
	int res = 1;
	while (b) {
		if (b % 2 == 1) res = mod_mult(res, a);
		a = mod_mult(a, a);
		b /= 2;
	}
	return res;
}
int inv(int a) {
	return exp(a, MD - 2);
}

int fact[MX];
int inv_fact[MX];

int comb(int n, int k) {
	return mod_mult(fact[n], mod_mult(inv_fact[k], inv_fact[n - k]));
}

int exp25[MX];
int exp26[MX];
int inv_exp26[MX];

map<int, vector<int>> M;

char s[MX];

int main()
{
	fact[0] = 1;
	for (int i = 1; i < MX; i++) {
		fact[i] = mod_mult(i, fact[i - 1]);
	}
	inv_fact[MX - 1] = inv(fact[MX - 1]);
	for (int i = MX - 2; i >= 0; i--) {
		inv_fact[i] = mod_mult(inv_fact[i + 1], i + 1);
	}
	
	exp25[0] = 1;
	for (int i = 1; i < MX; i++) exp25[i] = mod_mult(exp25[i - 1], 25);
	exp26[0] = 1;	
	for (int i = 1; i < MX; i++) exp26[i] = mod_mult(exp26[i - 1], 26);
	inv_exp26[0] = 1;
	inv_exp26[1] = inv(26);
	for (int i = 2; i < MX; i++) inv_exp26[i] = mod_mult(inv_exp26[i - 1], inv_exp26[1]);

	int m;
	ignore = scanf(" %d", &m);
	ignore = scanf(" %s", s);
	int len = strlen(s);
	
	while (m--) {
		int t;
		ignore = scanf(" %d", &t);
		if (t == 1) {
			ignore = scanf(" %s", s);
			len = strlen(s);
		}
		else {
			int n;
			ignore = scanf("%d", &n);
			if (M.find(len) == M.end()) {
				vector<int> vec(MX);
				for (int i = len; i < MX; i++) {
					vec[i] = mod_mult(comb(i - 1, len - 1), mod_mult(exp25[i - len], inv_exp26[i]));
					add(vec[i], vec[i - 1]);
				}
				M[len] = vec;
			}
			int res = mod_mult(M[len][n], exp26[n]);
			printf("%d\n", res);
		}
	}
}
