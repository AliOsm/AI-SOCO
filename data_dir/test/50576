#include <iostream>
#include <ctime>
#include <iomanip>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <cmath>
#include <set>
#include <unordered_set>
#include <unordered_map>
#include <chrono>
#include <stack>
#include <cassert>
#include <queue>
#include <deque>
#include <climits>
#include <cstring>
#include <random>
#include <bitset>
#include <functional>

using namespace std;

bool can(vector<int> a) {
    stack<int> tmp;
    for (auto t : a) {
        if (!tmp.empty() && tmp.top() == t) {
            tmp.pop();
        } else {
            if (!tmp.empty() && tmp.top() < t) {
                return false;
            } else {
                tmp.push(t);
            }
        }
    }
    if (tmp.size() == 0) {
        return true;
    } else {
        for (int i = 0; i < (int)a.size(); i++) {
            if (a[i] == tmp.top()) {
                a.erase(a.begin() + i);
                break;
            }
        }
        stack<int> t2;
        for (auto t : a) {
            if (!t2.empty() && t2.top() == t) {
                t2.pop();
            } else {
                t2.push(t);
            }
        }
        if (t2.size() > 0) {
            return false;
        }
        if (tmp.top() >= *max_element(a.begin(), a.end())) {
            return true;
        } else {
            return false;
        }
    }
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
#ifdef LOCAL
    assert(freopen("input.txt", "r", stdin));
    assert(freopen("output.txt", "w", stdout));
#endif
    
    int n;
    cin >> n;
    vector<int> a(n);
    for (auto &t : a) {
        cin >> t;
    }
    if (n == 1) {
        cout << "Yes";
    } else {
        auto f = can(a);
        if (f) {
            cout << "Yes";
        } else {
            cout << "No";
        }
    }
}
