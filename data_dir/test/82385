#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<int, int> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

const int maxn = 1e5 + 5;

struct two{
	
	int f, s;
	two(){
		f = s = 0;
	}
	
	void update(int x){
		if(x > f){
			s = f;
			f = x;
		}
		else if(x > s)
			s = x;
	}
};

int dp[maxn][2], n, sol;
vector<int> g[maxn];

int dfs(int u, int red, int p){
	
	if(dp[u][red] != -1)
		return dp[u][red];
	
	two red2, any2;
	for(auto &v : g[u])
		if(v != p){
			dfs(v, 0, u);
			dfs(v, 1, u);
		}

	int ans = 0;
	if(red){
		int sz = g[u].size();
		if(u != 1)
			sz--;
		
		for(auto &v : g[u])
			if(v != p)
				ans = max(ans, sz - 1 + max(dfs(v, 1, u), dfs(v, 0, u)));
	}
	else{
		ans = 1;
		for(auto &v : g[u])
			if(v != p)
				ans = max(ans, 1 + dfs(v, 1, u));
	}
	
	for(auto &v : g[u]){
		if(v != p){
			red2.update(dp[v][1]);
			any2.update(max(dp[v][0], dp[v][1]));
		}
	}
	
	sol = max(sol, ans);
	sol = max(sol, 1 + red2.f + red2.s);
	sol = max(sol, (int)g[u].size() - 2 + any2.f + any2.s);
	
	return dp[u][red] = ans;
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	//mt19937 rng(5);
	//srand(time(0));

	cin >> n;
	
	for(int i = 1, a, b; i < n; i++){
		cin >> a >> b;
		g[a].push_back(b);
		g[b].push_back(a);
	}
	
	memset(dp, -1, sizeof(dp));
	dfs(1, 0, -1);
	dfs(1, 1, -1);
	
	cout << sol << endl;

	return 0;
}
