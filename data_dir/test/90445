#include <bits/stdc++.h>

using namespace std;

#define eps 1e-8
#define mod 1000000007
typedef long long ll;
typedef long double ld;

int main()
{
   // ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    vector<string> vec(6);
    vector<string> ans;
    vector<int> w, h;
    vector<int> v(6);
    for(int i = 0; i < 6; i++)
    {
        cin >> vec[i];
        v[i] = i;
    }
    do
    {
        vector<string> vec2(6);
        for(int i = 0; i < 6; i++)
        {
            vec2[i] = vec[v[i]];
        }
        if(!(vec2[0].size() + vec2[4].size() - 1 == vec2[3].size()))
            continue;
        if(!(vec2[1].size() + vec2[5].size() - 1 == vec2[2].size()))
            continue;
        if(!(vec2[0][0] == vec2[1][0]))
            continue;
        if(!(vec2[0].back() == vec2[2][0]))
            continue;
        if(!(vec2[3][0] == vec2[1].back()))
            continue;
        if(!(vec2[2][vec2[1].size() - 1] == vec2[3][vec2[0].size() - 1]))
            continue;
        if(!(vec2[2].back() == vec2[4][0]))
            continue;
        if(!(vec2[3].back() == vec2[5][0]))
            continue;
        if(!(vec2[5].back() == vec2[4].back()))
            continue;
        string sol;
        int n = vec2[3].size();
        int m = vec2[2].size();
        w.push_back(n), h.push_back(m);
        for(int i = 0; i < n; i++)
        {
            if(i < vec2[0].size())
                sol += vec2[0][i];
            else
                sol += '.';
        }
        for(int i = 1; i < vec2[1].size() - 1; i++)
        {
            for(int j = 0;  j < n; j++)
            {
                if(j == 0)
                    sol += vec2[1][i];
                else if(j == vec2[0].size() - 1)
                    sol += vec2[2][i];
                else
                    sol += '.';
            }
        }
        sol += vec2[3];
        for(int i = vec2[1].size(); i < vec2[2].size() - 1; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(j == vec2[0].size() - 1)
                    sol += vec2[2][i];
                else if(j == vec2[3].size() - 1)
                    sol += vec2[5][i - vec2[1].size() + 1];
                else
                    sol += '.';
            }
        }
        for(int i = 0; i < vec2[0].size() - 1; i++)
            sol += '.';
        sol += vec2[4];
        ans.push_back(sol);
    }while(next_permutation(v.begin(), v.end()));
    vector<int> vec3;
    if(ans.empty())
    {
        cout << "Impossible";
        return 0;
    }
    for(int i = 0; i < ans.size(); i++)
    {
        vec3.push_back(i);
    }
    for(int i = 0;; i++)
    {
        bool first = true;
        string prev;
        vector<int> vec4;
        for(auto &x: vec3)
        {
            string current;
            int index = i * w[x];
            if(index >= ans[x].size())
            {
                int index = 0;
                for(int i = 0; i < h[x]; i++)
                {
                    for(int j = 0; j < w[x]; j++)
                    {
                        cout << ans[x][index];
                        index++;
                    }
                    cout << '\n';
                }
                return 0;
            }
            for(int j = 0; j < w[x]; j++)
            {
                current += ans[x][index];
                index++;
            }
            if(first)
            {
                vec4.push_back(x);
                prev = current;
                first = false;
            }
            else
            {
                if(current == prev)
                {
                    vec4.push_back(x);
                }
                else if(current < prev)
                {
                    vec4.clear();
                    vec4.push_back(x);
                    prev = current;
                }
            }
        }
        vec3 = vec4;
    }
    return 0;
}
