#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 2e5 + 7;

int n, k, T[N], M[N], memo[11][N];
unordered_map < int, int > MP[11];

LL solve()
{
    LL ans = 0;
    for(int i = 0; i < n; i++)
    {
        int x = M[i];
        for(int j = 1; j <= 10; j++)
        {
            x = (10LL * x) % k;
            memo[j][i] = x;
            MP[j][x]++;
        }
    }
    for(int i = 0; i < n; i++)
    {
        int d = 0, x = T[i];
        while (x > 0)
            x /= 10, d++;
        int r = (M[i] == 0 ? 0 : k - M[i]);
        auto it = MP[d].find(r);
        if(it != MP[d].end())
            ans += it->second;
        if(memo[d][i] == r)
            ans--;
    }
    return ans;
}

int main()
{
    _upgrade
    cin >> n >> k;
    for(int i = 0; i < n; i++)
    {
        cin >> T[i];
        M[i] = T[i] % k;
    }
    cout << solve() << "\n";
	return 0;
}
