#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <map>
using namespace std;

int n;

int parent[2222];
int rankk[2222];

int Find(int x) {
    if (parent[x] != x) {
        parent[x]=Find(parent[x]);
    }
    return parent[x];
}

bool Union(int x,int y) {
    int xRoot=Find(x);
    int yRoot=Find(y);
    if (xRoot==yRoot)
        return false;
    
    if (rankk[xRoot]<rankk[yRoot]) {
        parent[xRoot]=yRoot;
    } else if (rankk[xRoot]>rankk[yRoot]) {
        parent[yRoot]=xRoot;
    } else {
        parent[yRoot]=xRoot;
        rankk[xRoot]++;
    }
    return true;
}

vector<pair<int, pair<int, int> > > edges;

int curr_dists[2222];


vector<pair<int,int> > Adj[2222];
void dfs(int par, int u, int D) {
    curr_dists[u]=D;
    for(int j=0;j<Adj[u].size();j++) {
        int v = Adj[u][j].first;
        if (par == v) {
            continue;
        }
        dfs(u, v, D+Adj[u][j].second);
    }
}

int D[2002][2002];
bool solve() {
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++) {
            if(D[i][j]!=D[j][i])
                return false;
            if(D[i][i]!=0)
                return false;
            edges.push_back(make_pair(D[i][j], make_pair(i,j)));
        }
    
    sort(edges.begin(), edges.end());
    
    for(int i=0;i<n;i++) {
        parent[i]=i;
        rankk[i]=0;
    }
    
    for(int j=0;j<edges.size();j++) {
        int curr_dist = edges[j].first;
        int u = edges[j].second.first;
        int v = edges[j].second.second;
        
        if (curr_dist > 0 && Union(u,v)) {
            Adj[u].push_back(make_pair(v, curr_dist));
            Adj[v].push_back(make_pair(u, curr_dist));
        }
    }
    
    
    for(int i=0;i<n;i++) {
        for(int j=0;j<n;j++)
            curr_dists[j]=-1;
        dfs(-1, i, 0);
        for(int j=0;j<n;j++) {
            if(curr_dists[j]==-1) {
                return false;
            }
            if(curr_dists[j] != D[i][j]) {
                return false;
            }
        }
    }
    return true;
    
}

int main() {
    cin>>n;
    
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++) {
            scanf("%d",&D[i][j]);
        }
    
    if (solve()) {
        printf("YES\n");
    } else {
        printf("NO\n");
    }
}