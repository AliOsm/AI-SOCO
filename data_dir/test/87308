#include<iostream>
#include<cstdio>

#include<string>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<stack>

#include<iomanip>
#include<algorithm>
#include<cstring>
#include<ctime>
#include<cassert>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); ++i)
#define correct(x, y, n, m) (0 <= x && x < n && 0 <= y && y < m)
#define X first
#define Y second
#define all(a) a.begin(), a.end()
#define pb push_back
#define mp make_pair
#define sz(v) (int)(v.size())

template<typename T> inline T abs(T a){ return ((a < 0) ? -a : a); }
template<typename T> inline T sqr(T a){ return a * a; }

typedef long long li;
typedef unsigned long long uli;
typedef long double ld;
typedef pair<ld, ld> pt;

const int N = 10009;
const int MOD = 1e9 + 7;
const int INF = 1e9;
const li INF64 = 2e18;
const ld PI = 3.1415926535897932384626433832795;
const ld eps = 1e-7;

li n, m, len;
li dp[1 << 18][109];
vector <li> a;

li cntBit(li x){
    li res = 0;
    while(x)
        x = (x & (x - 1)), ++res;
    return res;
}

li calc_dp(li mask, li mod){
    li &res = dp[mask][mod];
    if(res != -1)
        return res;
    
    li curLen = cntBit(mask);   
    if(curLen == len)
        return res = (mod == 0);
    
    li curMod = 1;
    forn(_, curLen)
        curMod = (curMod * 10LL) % m;
    
    res = 0;
    forn(i, len)
        if(!((1 << i) & mask) && !(curLen == len - 1 && a[i] == 0))
            if(!(i > 0 && a[i - 1] == a[i] && !(mask & (1 << (i - 1))) ))
                res += calc_dp(mask | (1 << i), (mod + a[i] * curMod) % m);
            
    return res;
}

int main(){
     
    srand(time(NULL));
    cout << setprecision(10) << fixed;
    cerr << setprecision(10) << fixed;  

    cin >> n >> m;
    
    li cur = n;
    while(cur > 0)
        a.pb(cur % 10), cur /= 10, ++len;
    sort(all(a));
    
    memset(dp, -1, sizeof dp);
    cout << calc_dp(0, 0);
   
    return 0;   
}