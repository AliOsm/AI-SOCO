#include <bits/stdc++.h>

using namespace std;

int n , m ;
string s[1010] ;
int xs , ys , xe , ye ;
bool vis[1010][1010][4] ;
int mod,x,y;
char getNew( char C)
{
    char c = C ;
    for ( int i = 0 ; i < mod ; i++ )
        if ( c == '+' ) c = '+' ;
        else if ( c == '-' ) c = '|' ;
        else if ( c == '|' ) c = '-' ;
        else if ( c == '^' ) c = '>' ;
        else if ( c == '>' ) c = 'v' ;
        else if ( c == 'v' ) c = '<' ;
        else if ( c == '<' ) c = '^' ;
        else if ( c == 'L' ) c = 'U' ;
        else if ( c == 'U' ) c = 'R' ;
        else if ( c == 'R' ) c = 'D' ;
        else if ( c == 'D' ) c = 'L' ;
        else c = '*' ;
    return c ;
}
char dir ;
char c2 ;
bool is_ne(  )
{
    if ( c2 == '*' ) return false ;
    if ( dir == 'r' )
    {
        return c2 == '-' || c2 == '+' || c2 == '<' || c2 == 'D' || c2 == 'U' || c2 == 'R' ;
    }
    else if ( dir == 'l' )
    {
        return c2 == '-' || c2 == '+' || c2 == '>' || c2 == 'D' || c2 == 'U' || c2 == 'L' ;
    }
    else if ( dir == 'u' )
    {
        return c2 == '|' || c2 == '+' || c2 == 'v' || c2 == 'L' || c2 == 'U' || c2 == 'R' ;
    }
    else
    {
        return c2 == '|' || c2 == '+' || c2 == '^' || c2 == 'D' || c2 == 'L' || c2 == 'R' ;
    }
}
int main()
{
    ios_base::sync_with_stdio(0) ;
    cin.tie(0) ;
    cin >> n >> m ;
    for ( int i = 0 ; i < n ; i++ )
        cin >> s[i] ;
    cin >> xs >> ys >> xe >> ye ;
    xs--;
    ys--;
    xe--;
    ye--;
    queue < pair < pair < int , int > , pair < int , int>  > > Q ;
    Q.push({{xs,ys},{0,0}});
    int cnt;
    char c ;
    while ( Q.size() )
    {
        x = Q.front().first.first ;
        y = Q.front().first.second ;
        cnt = Q.front().second.first;
        mod = Q.front().second.second ;
        Q.pop() ;
        if ( x < 0 || y < 0 || x >= n || y >= m || vis[x][y][mod] ) continue ;
        vis[x][y][mod] = 1 ;
        if ( s[x][y] == '*' ) continue ;
        if ( x == xe && y == ye )
        {
            cout << cnt ;
            return 0 ;
        }
        c = getNew(s[x][y]) ;
        Q.push({{x,y},{cnt+1,(mod+1)%4}}) ;
        if ( c == '+' )
        {
            dir = 'u' ;
            if ( x-1 >= 0 )
            {
                c2 = getNew(s[x-1][y]) ;
                if ( is_ne() )
                    Q.push({{x-1,y},{cnt+1,mod}}) ;
            }
            dir = 'd' ;
            if ( x + 1 < n )
            {
                c2 = getNew(s[x+1][y]) ;
                if ( is_ne() )
                    Q.push({{x+1,y},{cnt+1,mod}}) ;
            }
            dir = 'l' ;
            if ( y-1 >= 0 )
            {
                c2 = getNew(s[x][y-1]) ;
                if ( is_ne() )
                    Q.push({{x,y-1},{cnt+1,mod}}) ;
            }
            dir = 'r' ;
            if ( y+1 < m )
            {
                c2 = getNew(s[x][y+1]) ;
                if ( is_ne() )
                    Q.push({{x,y+1},{cnt+1,mod}}) ;
            }
        }
        else if ( c == '>' )
        {
            dir = 'r' ;
            if ( y + 1 < m )
            {
                c2 = getNew(s[x][y+1]) ;
                if ( is_ne() )
                    Q.push({{x,y+1},{cnt+1,mod}}) ;
            }
        }
        else if ( c == '<' )
        {
            dir = 'l' ;
            if ( y - 1 >=0 )
            {
                c2 = getNew(s[x][y-1]) ;
                if ( is_ne() )
                    Q.push({{x,y-1},{cnt+1,mod}}) ;
            }
        }
        else if ( c == 'v' )
        {
            dir = 'd' ;
            if ( x + 1 < n )
            {
                c2 = getNew(s[x+1][y] ) ;
                if ( is_ne() )
                    Q.push({{x+1,y},{cnt+1,mod}}) ;
            }
        }
        else if ( c == '^' )
        {
            dir = 'u' ;
            if ( x-1 >= 0 )
            {
                c2 = getNew(s[x-1][y]) ;
                if ( is_ne() )
                    Q.push({{x-1,y},{cnt+1,mod}}) ;
            }
        }
        else if ( c == 'L' )
        {
            dir = 'u' ;
            if ( x-1 >= 0 )
            {
                c2 = getNew(s[x-1][y]) ;
                if ( is_ne() )
                    Q.push({{x-1,y},{cnt+1,mod}}) ;
            }
            dir = 'd' ;
            if ( x + 1 < n )
            {
                c2 = getNew(s[x+1][y]) ;
                if ( is_ne() )
                    Q.push({{x+1,y},{cnt+1,mod}}) ;
            }
            dir = 'r' ;
            if ( y+1 < m )
            {
                c2 = getNew(s[x][y+1]) ;
                if ( is_ne() )
                    Q.push({{x,y+1},{cnt+1,mod}}) ;
            }        }
        else if ( c == 'R' )
        {
                    dir = 'u' ;
            if ( x-1 >= 0 )
            {
                c2 = getNew(s[x-1][y]) ;
                if ( is_ne() )
                    Q.push({{x-1,y},{cnt+1,mod}}) ;
            }
            dir = 'd' ;
            if ( x + 1 < n )
            {
                c2 = getNew(s[x+1][y]) ;
                if ( is_ne() )
                    Q.push({{x+1,y},{cnt+1,mod}}) ;
            }
            dir = 'l' ;
            if ( y-1 >= 0 )
            {
                c2 = getNew(s[x][y-1]) ;
                if ( is_ne() )
                    Q.push({{x,y-1},{cnt+1,mod}}) ;
            }
        }
        else if ( c == 'U' )
        {
            dir = 'd' ;
            if ( x + 1 < n )
            {
                c2 = getNew(s[x+1][y]) ;
                if ( is_ne() )
                    Q.push({{x+1,y},{cnt+1,mod}}) ;
            }
            dir = 'l' ;
            if ( y-1 >= 0 )
            {
                c2 = getNew(s[x][y-1]) ;
                if ( is_ne() )
                    Q.push({{x,y-1},{cnt+1,mod}}) ;
            }
            dir = 'r' ;
            if ( y+1 < m )
            {
                c2 = getNew(s[x][y+1]) ;
                if ( is_ne() )
                    Q.push({{x,y+1},{cnt+1,mod}}) ;
            }
        }
        else if ( c == 'D' )
        {
                    dir = 'u' ;
            if ( x-1 >= 0 )
            {
                c2 = getNew(s[x-1][y]) ;
                if ( is_ne() )
                    Q.push({{x-1,y},{cnt+1,mod}}) ;
            }

            dir = 'l' ;
            if ( y-1 >= 0 )
            {
                c2 = getNew(s[x][y-1]) ;
                if ( is_ne() )
                    Q.push({{x,y-1},{cnt+1,mod}}) ;
            }
            dir = 'r' ;
            if ( y+1 < m )
            {
                c2 = getNew(s[x][y+1]) ;
                if ( is_ne() )
                    Q.push({{x,y+1},{cnt+1,mod}}) ;
            }
        }
        else if ( c == '-' )
        {
            dir = 'l' ;
            if ( y-1 >= 0 )
            {
                c2 = getNew(s[x][y-1]) ;
                if ( is_ne() )
                    Q.push({{x,y-1},{cnt+1,mod}}) ;
            }
            dir = 'r' ;
            if ( y+1 < m )
            {
                c2 = getNew(s[x][y+1]) ;
                if ( is_ne() )
                    Q.push({{x,y+1},{cnt+1,mod}}) ;
            }
        }
        else if ( c == '|' )
        {
                    dir = 'u' ;
            if ( x-1 >= 0 )
            {
                c2 = getNew(s[x-1][y]) ;
                if ( is_ne() )
                    Q.push({{x-1,y},{cnt+1,mod}}) ;
            }
            dir = 'd' ;
            if ( x + 1 < n )
            {
                c2 = getNew(s[x+1][y]) ;
                if ( is_ne() )
                    Q.push({{x+1,y},{cnt+1,mod}}) ;
            }
        }
    }
    cout << -1 ;
    return 0;
}
