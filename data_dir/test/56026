#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <string>
#include <queue>
#include <stack>
#include <cstring>
#include <iterator>
#include <cmath>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <chrono>
#include <cassert>
#include <memory>
#include <utility>
#include <cstddef>
#include <iterator>

#pragma comment(linker, "/stack:20000000")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;
using mt = int;
using fl = double;

template<typename T>
constexpr mt infValue = std::numeric_limits<T>::max() - 1000;
template<typename T>
constexpr mt maxValue = std::is_same<T, int>::value ? 1000000007 : 1000000000000000001ll;

#define rep(a, b, i) for(mt i = a; i < (b); ++i)
#define repe(a, b, i) for(mt i = a; i <= (b); ++i)
#define repd(a, b, i) for(mt i = a; i > (b); --i)
#define repde(a, b, i) for(mt i = a; i >= (b); --i)

constexpr mt INF = infValue<mt>;
constexpr long long MOD = 1000000007ll;
constexpr double EPS = 1e-6;
constexpr mt MAX = maxValue<mt>;
using pr = pair<mt, mt>;

constexpr mt pw(mt a, mt p) {
	mt r = 1;
	while (p) {
		if (p & 1) r *= a;
		a *= a;
		p >>= 1;
	}
	return r;
}

constexpr auto N = 10;
constexpr auto K = 7;
constexpr auto P = 2;
constexpr auto M = pw(7, 6);

mt n, m, answ;
vector<mt> g[N];
mt p[N];
bool u[100];
mt check() {
	fill(u, u + 100, false);
	mt cnt = 0;
	rep(0, n, v) {
		for (const mt to : g[v]) {
			mt x = p[v] < p[to] ? p[v] + p[to] * 6: p[to] + p[v] * 6;
			cnt += !u[x];
			u[x] = 1;
		}
	}

	return cnt;
}

int main(void) {
#ifdef _DEBUG
	freopen("in.txt", "r", stdin);
#endif
	scanf("%d %d", &n, &m);
	while (m--) {
		mt a, b;
		scanf("%d %d", &a, &b);
		g[a].push_back(b);
		g[b].push_back(a);
	}
	rep(0, M, i) {
		mt mask = i;// 2 + 0 * pw(6, 1) + 5 * pw(6, 2) + 2 * pw(6, 3);//i;
		rep(0, n, j) {
			p[j] = mask % 6;
			mask /= 6;
		}
		answ = max(answ, check());
	}
	printf("%d\n", answ);

	return 0;
}