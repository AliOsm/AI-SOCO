#pragma GCC target("avx2")
#pragma GCC optimize("O3")
   
#include <x86intrin.h>
#include <bits/stdc++.h>   
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
using namespace __gnu_pbds;
using namespace std;

template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
     
#define F first
#define S second           
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair                                     
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)5e5 + 123;
const ll inf = (ll)1e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;                  
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

int n, m, a, b, cnt[N];
int used[N];
vector <int> g[N];
vector <int> ans[2];

void dfs (int v, bool T) {
   used[v] = 1;
   ans[T].pb (v);
   for (auto to : g[v])
      if (!used[to])
         dfs (to, T);
}

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                     

inline void Solve () {
   cin >> n >> m >> a >> b;
   for (int i = 1; i <= n; i ++) g[i].clear ();
   for (int i = 1; i <= n; i ++) used[i] = cnt[i] = 0;
   ans[0].clear (), ans[1].clear ();
   for (int i = 1; i <= m; i ++) {
      int x, y;
      cin >> x >> y;
      g[x].pb (y);
      g[y].pb (x);
   }
   used[b] = 1;
   dfs (a, 0);
   for (int i = 1; i <= n; i ++) used[i] = 0;
   used[a] = 1;
   dfs (b, 1);
   int a0 = 0, a1 = 0;
   for (auto it : ans[0]) cnt[it] ++;
   for (auto it : ans[1]) cnt[it] ++;
   for (auto it : ans[0])
      if (cnt[it] == 1 && it != a && it != b)
         a0 ++;
   for (auto it : ans[1])
      if (cnt[it] == 1 && it != a && it != b)
         a1 ++;
   cout << 1ll * a0 * a1 << endl;
}

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
   cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
                          