/*
	Practce, Practice, Practice.
*/
#include <bits/stdc++.h> 
using namespace std;
#define fl(i,a,b) for(int i=a;i<b;i++)
#define ll long long
#define endl '\n'
#define pb push_back
#define ff first
#define ss second
#define mod 1000000007   
#define inf 1e9
#define fast ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
#define mx 400005
vector<int> v[mx];
map<int,int> mp[mx];
vector<pair<int,int> > edg;
int dp[mx];
int dis[mx];
bool vis[mx];
int h[mx];
int col[mx];
int cntr = 0;
int a,b;
int dp2[mx];
vector<int> ans;
void dfs(int x,int p)
{
	col[x] = 3 - col[p];
	h[x] = 1;
	vis[x] = 1;
	int cnt = 0,cnt2 = 0;
	bool flag = 0;
	for(auto j : v[x])
	{
		if(vis[j])
		{
			// count of back edges and forward edges
			if(j != p && h[j] == 1)
			{	
				if(col[x] == col[j])
				{
					dp2[x]++;
					cntr ++;
					a = x;
					b = j;
				}
				cnt++;
			}
			else if(j != p)
			{
				if(col[x] == col[j])
				{
					dp2[x]--;
				}
				cnt2++;
			}
			continue;
		}
		flag = 1;
		dfs(j,x);
		dp2[x] += dp2[j];
		dp[x] += dp[j];
	}
	dp[x] += -cnt2 + cnt;
	h[x] = 0;
}
void dfs2(int x,int p)
{
	h[x] = 1;
	vis[x] = 1;
	for(auto j : v[x])
	{
		if(!vis[j])
		{
			if(dp2[j] == cntr && dp[j] == cntr)
			{
				ans.pb(mp[x][j]);
			}
			dfs2(j,x);
		}
	}
	h[x] = 0;
}
main()
{
	fast;
	int n , m;
	cin >> n >> m;
	fl(i,1,m+1)
	{
		int x,y;
		cin >> x >> y;
		v[x].pb(y);
		v[y].pb(x);
		mp[x][y] = mp[y][x] = i;
	}
	col[0] = 1;
	fl(i,1,n+1)
	{
		if(!vis[i])
		dfs(i,0);
	}
	if(cntr == 1)
	{
		ans.pb(mp[a][b]);
	}
	if(cntr == 0)
	{
		cout << m << endl;
		fl(i,1,m+1)
		{
			cout << i << " ";
		}
		return 0;
	}
	fl(i,1,n+1)
	{
		vis[i] = 0;
	}
	fl(i,1,n+1)
	{
		dfs2(i,0);
	}
	cout << ans.size() << endl;
	sort(ans.begin(), ans.end());
	fl(i,0,ans.size())
	{
		cout << ans[i] << " ";
	}

}