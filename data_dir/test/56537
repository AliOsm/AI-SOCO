#include <iostream>
#include <fstream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <deque>
#include <algorithm>
#include <array>
#include <bitset>
#include <complex>
using namespace std;

#define REP(i,n) for(int i=0; i<n; ++i)
#define FOR(i,a,b) for(int i=a; i<=b; ++i)
#define FORR(i,a,b) for (int i=a; i>=b; --i)
#define ALL(c) (c).begin(), (c).end()

typedef long long ll;
typedef vector<int> VI;
typedef vector<ll> VL;
typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef pair<int,int> P;
typedef pair<ll,ll> PL;

int in() { int x; scanf("%d", &x); return x; }
ll lin() { ll x; scanf("%lld", &x); return x; }

int main() {
    ll n, d, k;
    cin >> n >> d >> k;

    if (n == 1){
        cout << "NO" << endl;
        return 0;
    }
    if (n == 2){
        if (d == 1){
            cout << "YES" << endl << "1 2" << endl;
        }else{
            cout << "NO" << endl;
        }
        return 0;
    }

    if (d >= n || k == 1){
        cout << "NO" << endl;
        return 0;
    }

    VI c(n), dist(n);
    vector<P> ans;
    REP(i,d){
        c[i]++;
        c[i+1]++;
        ans.push_back(P(i, i+1));
    }
    queue<int> que;
    REP(i,d+1){
        dist[i] = min(abs(i - d / 2), abs(i - (d + 1) / 2));
        que.push(i);
    }
    int x = d + 1;
    while (!que.empty() && x < n) {
        int v = que.front();
        que.pop();
        if (dist[v] == d / 2) continue;
        while (c[v] < k && x < n){
            ans.push_back(P(v, x));
            c[v]++;
            c[x]++;
            dist[x] = dist[v] + 1;
            que.push(x);
            x++;
        }
    }

    if (x < n){
        cout << "NO" << endl;
    }else{
        cout << "YES" << endl;
        for (P p : ans){
            printf("%d %d\n", p.first + 1, p.second + 1);
        }
    }

    return 0;
}