#include <iostream>
#include <cstdio>
#include <sstream>
#include <algorithm>
#include <iomanip>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>

#define x0 abc
#define y0 ABC
#define x1 abcd
#define y1 ABCD
#define xn abcde
#define yn ABCDE

#define l_b lower_bound
#define u_b upper_bound

#define fi first
#define se second
#define m_p make_pair

#define p_b push_back
#define po_b pop_back

#define ld long double
#define ll long long

#define cont continue
#define re return

#define uns unsigned

#define MAXLL 9000000000000000000LL
#define MAXINT 2000000000

#define MINLL -9000000000000000000LL
#define MININT -2000000000

#define P acos(-1)

#define endl '\n'

#define OUT cout << "-------" << endl;

using namespace std;

vector <int> v[1201], vn[1201];

int one, two, a[1201], b[1201], dp[1201][1201], n, m, i, j, k, w, sum1, sum2, ans;

bool pole[1201];

    void dfs(int nom)
    {
        int i;

        vn[k].p_b(nom);

        pole[nom] = true;

        for (i = 0; i < v[nom].size(); i++)
            if (!pole[v[nom][i]]) dfs(v[nom][i]);
    }

    void add(int a, int b)
    {
        int j;

        for (j = 0; j <= w; j++)
            if (dp[i - 1][j] != -1 && j + a <= w) dp[i][j + a] = max(dp[i][j + a], dp[i - 1][j] + b);
    }

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> n >> m >> w;

    for (i = 1; i <= n; i++) cin >> a[i];

    for (i = 1; i <= n; i++) cin >> b[i];

    for (i = 1; i <= w; i++) dp[0][i] = -1;

    for (i = 1; i <= m; i++) {
        cin >> one >> two;

        v[one].p_b(two);

        v[two].p_b(one);
    }

    for (i = 1; i <= n; i++)
        if (!pole[i]) {
            k++;

            dfs(i);
        }

    for (i = 1; i <= k; i++) {
        sum1 = sum2 = 0;

        for (j = 0; j <= w; j++) dp[i][j] = dp[i - 1][j];

        for (j = 0; j < vn[i].size(); j++) {
            add(a[vn[i][j]], b[vn[i][j]]);

            sum1 += a[vn[i][j]];

            sum2 += b[vn[i][j]];
        }

        if (vn[i].size() > 1)
        add(sum1, sum2);
    }

    for (i = 0; i <= w; i++) ans = max(ans, dp[k][i]);

    cout << ans << endl;

    re 0;
}
