#include <bits/stdc++.h>
#define endl '\n'
#define debug(X) cout << #X << " = " << X << endl
#define fori(i,b,e) for (int i = (b); i < (e); ++i)
#define SZ(v) (int)v.size()

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> ii;

const int oo = 1e9;
const int MN = 300010;
const int ML = 20;

int T[MN][ML], ln[MN];
int n;
int a[MN];

void build() {
	// log2 O(1)
	ln[2] = ln[3] = 1;
	fori(i, 4, MN) ln[i] = ln[i / 2] + 1;
	// Sparse table
	for (int i = 0; i < n; i++)
		T[i][0] = a[i];
	for (int j = 1, p = 2; p <= n; j++, p <<= 1)
		for (int i = 0; i + p - 1 < n; i++)
			T[i][j] = __gcd(T[i][j - 1], T[i + (p >> 1)][j - 1]);
}

int query(int l, int r) {
	int k = ln[r - l + 1];
	return __gcd(T[l][k], T[r + 1 - (1 << k)][k]);
}

int can(int len) {
	multiset<int> dict;
	int l = 0, r = 0;
	while (r < n) {
		while (r < n && r - l < len) dict.insert(a[r++]);
		if (dict.count(query(l, r - 1))) return 1;
		dict.erase(dict.find(a[l++]));
	}
	return 0;
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	#ifdef UTP
	freopen("input.txt", "r", stdin);
	#endif
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	build();
	int len = 0;
	if (can(n)) {
		len = n;
	} else {
		int lo = 1, hi = n;
		while (hi - lo > 1) {
			int mi = (hi + lo) / 2;
			if (can(mi)) lo = mi;
			else hi = mi;
		}
		len = lo;
	}
	vector<int> pos;
	multiset<int> dict;
	int l = 0, r = 0;
	while (r < n) {
		while (r < n && r - l < len) dict.insert(a[r++]);
		if (dict.count(query(l, r - 1))) pos.push_back(l);
		dict.erase(dict.find(a[l++]));
	}
	cout << SZ(pos) << " " << len - 1 << endl;
	for (int i = 0; i < SZ(pos); i++)
		cout << pos[i] + 1 << " ";
	cout << endl;
	return 0;
}
