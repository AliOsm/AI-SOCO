#include <cstdio>
#include <utility>
#include <iostream>
#include <set>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

typedef long long Long;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> PII;

vector<int> getPrimes(int N) {
    vector<bool> M(N);
    vector<int> P;
    for (int i = 2; i <= N; ++i) {
        if (M[i]) continue;
        P.push_back(i);
        for (int j = 2*i; j <= N; j += i) {
            M[j] = 1;
        }
    }
    return P;
}

unsigned int _A, _B, _C, _D;
unsigned int f(unsigned int x) {
    return _A * x * x * x + _B * x * x + _C * x + _D;
}

Long mul(Long a, Long b) {
    return (a*b) % (1LL<<32);
}
Long mul(Long a, Long b, Long c) {
    return mul(a, mul(b, c));
}
Long mul(Long a, Long b, Long c, Long d) {
    return mul(mul(a, d), mul(b, c));
}
Long f2(unsigned int x) {
    return (mul(_A, x, x, x) + mul(_B, x, x) + mul(_C, x) + _D) % (1LL<<32);
}

Long bf(Long n) {
    Long t = 0;
    for (int i = 2; i * i <= n; ++i) {
        while (n % i == 0) {
            t += f(i);
            n /= i;
        }
    }
    if (n != 1) t += f(n);
    return t;
}

unsigned int calcInRange(vector<int> &P, int lo, int hi, int LIM, bool de = 0) {
    vector<bool> B(hi - lo + 1);
    if (lo == 1) B[0] = 1;
    unsigned int ans = 0;
    for (Long p : P) {
        Long st = (lo + p - 1) / p * p;
        while (st <= hi) {
            if (st != p) B[st - lo] = 1;
            st += p;
        }
    }
    for (int i = lo; i <= hi; ++i) {
        if (B[i - lo]) continue;
        Long p = i;
        unsigned int o = 0;
        while (p <= LIM) {
            o += LIM / p;
            p *= i;
        }
        ans += o * f(i);
    }
    return ans;
}

Long calcInRange2(vector<int> &P, int lo, int hi, int LIM, bool de = 0) {
    vector<bool> B(hi - lo + 1);
    if (lo == 1) B[0] = 1;
    Long ans = 0;
    for (Long p : P) {
        Long st = (p + lo - 1) / lo * lo;
        while (st <= hi) {
            if (st != p) B[st - lo] = 1;
            st += p;
        }
    }
    for (int i = lo; i <= hi; ++i) {
        if (B[i - lo]) continue;
        Long p = i;
        Long o = 0;
        while (p <= LIM) {
            o += LIM / p;
            p *= i;
        }
        ans += (o * f(i)) % (1LL << 32);
    }
    return ans % (1LL << 32);
}


int main() {

    int N;
    cin >> N >> _A >> _B >> _C >> _D;

    vector<int> P = getPrimes(100000);
    Long ans = 0;
    Long ans2 = 0;
    for (int i = 1; i <= N; i += 100000) {
        ans += calcInRange(P, i, min(i + 99999, N), N, i > 1);
    }
    cout << ans % (1LL << 32) << endl;


    return 0;
}
