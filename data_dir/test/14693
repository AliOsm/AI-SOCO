//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

#include <stdio.h>
#include <bits/stdc++.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)

using namespace std;

inline void setmin(int &x, int y) { if (y < x) x = y; }
inline void setmax(int &x, int y) { if (y > x) x = y; }
inline void setmin(ll &x, ll y) { if (y < x) x = y; }
inline void setmax(ll &x, ll y) { if (y > x) x = y; }

const int N = 100000;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int MOD = (int)1e9 + 7;
const int MOD1 = 998244353;
const double eps = 1e-14;
const double pi = atan2(0, -1);
const int ABC = 26;

ll h[N], p[N];

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    cout << fixed;
    //ll TL = 0.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    int n, m;
    cin >> n >> m;
    rep(i, 0, n)
        cin >> h[i];
    rep(i, 0, m)
        cin >> p[i];
    ll l = -1, r = 1000000000000, mid;
    while (r - l > 1)
    {
        mid = (l + r) / 2;
        int pos = 0;
        bool ok = true;
        rep(i, 0, n)
        {
            if (pos == m)
                break;
            if (p[pos] <= h[i])
            {
                if (h[i] - p[pos] > mid)
                {
                    ok = false;
                    break;
                }
                int new_pos = upper_bound(p, p + m, p[pos] + mid - (h[i] - p[pos])) - p;
                new_pos = max(new_pos, upper_bound(p, p + m, h[i] + (mid - (h[i] - p[pos])) / 2) - p);
                pos = new_pos;
            }
            else
            {
                pos = upper_bound(p, p + m, h[i] + mid) - p;
            }
        }
        if (pos < m)
            ok = false;
        ok ? r = mid : l = mid;
    }
    cout << r << "\n";
    return 0;
}