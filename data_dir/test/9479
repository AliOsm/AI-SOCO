#include <bits/stdc++.h>
 
using namespace std;
 
#define SPEED ios::sync_with_stdio(false); cin.tie(0); cout.tie(0)
#define fileio freopen("in.in", "r", stdin),freopen("out.out", "w", stdout);
#define ll long long int
#define FF first
#define SS second
#define mp make_pair
#define pb push_back
#define pii pair<int,int>
#define pll pair<long long int,long long int>
#define sd(x) scanf("%d",&x)
#define slld(x) scanf("%lld",&x)
#define pd(x) printf("%d\n",x)
#define plld(x) printf("%lld\n",x)
#define pss printf
#define MOD 1000000007
#define INF 1e18
#define eps 0.00001
#define endl '\n'
#define debug(n1) cout<<n1<<endl
ll n,a[100005],b[100005],c[100005],l[100005],r[100005];
ll tree[400005],lazy[400005];
void lazify(ll s,ll e,ll i)
{
	if(lazy[i])
	{
		tree[i]+=lazy[i];
		if(s!=e)
		{
			lazy[2*i]+=lazy[i];
			lazy[2*i+1]+=lazy[i];
		}
		lazy[i]=0;
	}
}
ll qur(ll l,ll r,ll s,ll e,ll i)
{
	if(s>r||e<l||l>r)return -INF;
	lazify(s,e,i);
	if(s>=l&&e<=r)return tree[i];
	ll mid=(s+e)>>1;
	return max(qur(l,r,s,mid,2*i),qur(l,r,mid+1,e,2*i+1));
}
void upd(ll l,ll r,ll s,ll e,ll i)
{
	if(r==0)return;
	lazify(s,e,i);
	if(s>r||e<l)return;
	if(s>=l&&e<=r)
	{
		lazy[i]++;
		lazify(s,e,i);
		return;
	}
	ll mid=(e+s)>>1;
	upd(l,r,s,mid,2*i);
	upd(l,r,mid+1,e,2*i+1);
	tree[i]=max(tree[2*i+1],tree[2*i]);
}
bool check(ll x)
{
	memset(b,0,sizeof b);
	memset(c,0,sizeof c);
	memset(tree,0,sizeof tree);
	memset(lazy,0,sizeof lazy);
	for(ll i=1;i<=n;i++)
	{
		r[i]=0,l[i]=0;
		ll y=min(i-1,x)-a[i];
		if(y<0)continue;
		r[i]=min(n,i+y);
		l[i]=max(1ll,i-y);
		b[min(n+1,i+y+1)]+=-1;
		b[max(1ll,i-y)]+=1;
	}
	ll d=0;
	for(int i=1;i<=n;i++)
	{
		d+=b[i];
		b[i]=d;
	}

	upd(l[n],r[n],1,n,1);
	for(int i=n-1;i>=1;i--)
	{
		ll z=max(0ll,i-a[i]);
		ll k=max(-1ll,x-a[i]);
		ll y=max(qur(max(1ll,i-k),max(1ll,i-z),1,n,1),qur(min(n+1,i+z),min(n,i+k),1,n,1));
		if(k<z)y=-1;
		if(y>0)return 1;
		upd(l[i],r[i],1,n,1);
	}
	return 0;
}
ll binsearch()
{
	ll l=1,r=1000000;
	ll mid=(l+r)>>1;
	if(!check(1000000))return -1;
	while(r-l>1)
	{
		if(check(mid))
			r=mid;
		else 
			l=mid;
		mid=(l+r)>>1;
	}
	while(!check(mid))mid++;
	return mid;
}
int main() {
SPEED;
cin>>n;
for(int i=1;i<=n;i++)
	cin>>a[i];
cout<<binsearch()<<endl;
	return 0;
           } 