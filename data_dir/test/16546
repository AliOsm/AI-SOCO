#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <memory.h>
#include <ctime>
#include <bitset>

using namespace std;

#define ABS(a) ((a>0)?a:-(a))
#define MIN(a,b) ((a<b)?(a):(b))
#define MAX(a,b) ((a<b)?(b):(a))
#define FOR(i,a,n) for (int i=(a);i<(n);++i)
#define FI(i,n) for (int i=0; i<(n); ++i)
#define pnt pair <int, int>
#define mp make_pair
#define PI 3.1415926535897
#define MEMS(a,b) memset(a,b,sizeof(a))
#define LL long long
#define U unsigned

vector<vector<vector<int> > > k,krev;
vector<vector<pair<int, pnt > > > all;
vector<int> v1, v2;
const int N = 4001;

int main()
{
#ifdef Fcdkbear
	freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);
	double beg = clock();
#endif

	int n, p;
	scanf("%d%d", &n, &p);
	all.resize(20001);
	FOR(i, 0, n)
	{
		int c, h, t;
		scanf("%d%d%d", &c, &h, &t);
		all[(t - 1) / p].push_back(mp(t, mp(c, h)));
	}
	k.resize(all.size());
	krev.resize(all.size());
	FOR(i, 0, all.size())
	{
		if (all[i].size() == 0)
			continue;
		sort(all[i].begin(), all[i].end());
		k[i].resize(all[i].size()+1);
		krev[i].resize(all[i].size()+1);
		k[i][0].resize(N + 1,0);
		FOR(j, 0, all[i].size())
		{
			k[i][j+1].resize(N+1,0);
			FOR(c, 0, N+1)
			{
				k[i][j + 1][c] = k[i][j][c];
				if (c >= all[i][j].second.first)
					k[i][j + 1][c] = MAX(k[i][j][c - all[i][j].second.first] + all[i][j].second.second,k[i][j][c]);
			}
		}
		krev[i][0].resize(N + 1,0);
		for (int j = all[i].size() - 1; j >= 0; --j)
		{
			int idx = all[i].size() - j - 1;
			krev[i][idx+1].resize(N+1,0);
			FOR(c, 0, N+1)
			{
				krev[i][idx + 1][c] = krev[i][idx][c];
				if (c>=all[i][j].second.first)
					krev[i][idx + 1][c] = MAX(krev[i][idx][c - all[i][j].second.first] + all[i][j].second.second, krev[i][idx + 1][c]);
			}
		}
	}
	int q;
	scanf("%d", &q);
	FOR(i, 0, q)
	{
		int a, b;
		scanf("%d%d", &a, &b);
		v1.clear();
		v1.resize(N+1,0);
		if (a%p)
		{
			if (a > p) 
			{
				int idx = (a - 1 - p) / p;
				int last = all[idx].size();
				for (int j = (int)all[idx].size() - 1; j >= 0; --j)
				{
					if (all[idx][j].first + p - 1 >= a)
					{
						last = j;
					}
				}
				if (last != all[idx].size())
					v1 = krev[idx][all[idx].size() - last];
			}
		}
		v2.clear();
		v2.resize(N + 1,0);
		int idx = (a - 1) / p;
		int last = -1;
		FOR(j,0,all[idx].size())
		{
			if (all[idx][j].first <= a)
			{
				last = j;
			}
		}
		if (last != -1)
			v2 = k[idx][last+1];
		int res = 0;
		FOR(j, 0, b + 1)
			res = MAX(res, v1[j] + v2[b - j]);
		printf("%d\n", res);
	}

#ifdef Fcdkbear
	double end = clock();
	fprintf(stderr, "*** Total time = %.3lf ***\n", (end - beg) / CLOCKS_PER_SEC);
#endif
	return 0;
}