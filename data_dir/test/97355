#include <bits/stdc++.h>

using namespace std;

#define IO	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define all(x) x.begin(), x.end()

typedef long long ll;
typedef long double ld;

const int INF = 1e9;
const int N = (1 << 18) + 10;
int n, surviver;
double a[20][20];
double dp[N];
int vis[N];
int id = 0;
double go(int msk, int all){
	if(all == 1)
		return 1;
	int tot = all * (all - 1) / 2;
	double &ret = dp[msk];
	if(vis[msk] == id)
		return ret;
	vis[msk] = id;
	ret = 0;
	for(int i = 0; i < n; i++){ // da hayakol
		if(msk & (1 << i))continue;
		for(int j = i + 1; j < n; j++){ // da hayetakel
			if(msk & (1 << j))continue;
			if(i != surviver) ret += a[j][i] / double(tot) * go(msk | (1 << i), all - 1);
			if(j != surviver) ret += a[i][j] / double(tot) * go(msk | (1 << j), all - 1);
		}
	}
	return ret;
}

double conv(string s){
	double ret = 0;
	int i = 0;
	while(i < s.size() && s[i] != '.')
		ret *= 10, ret += (s[i] - '0'), i++;
	i++;
	double t = 1;
	while(i < s.size())
		ret *= 10, ret += (s[i] - '0'), i++, t *= 10;
	return ret / t;
}
inline void get(int i, int j){
	string s;
	cin >> s;
	a[i][j] = conv(s);
}
int main(){
	IO;

	cin >> n;
	for(int i = 0; i < n; i++)
		for(int j = 0; j < n; j++)
			get(i, j);
	for(surviver = 0; surviver < n; surviver++){
		id--;
		cout << fixed << setprecision(10) << go(0, n) << ' ';
	}


	return 0;
}

