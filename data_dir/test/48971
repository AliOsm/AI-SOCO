#include <bits/stdc++.h>
#define MOD 1000000007
#define Nmax 505
#define INF 2000000000
#define eps 0.00000000000001

using namespace std;

const int dx[]={-1,0,1, 0};
const int dy[]={ 0,1,0,-1};

char a[Nmax][Nmax];
int n,m,l,c,tata[Nmax*Nmax],grad[Nmax*Nmax];
bool viz[Nmax*Nmax];
vector <int> L[Nmax*Nmax];
queue <int> Q;

inline int Cod(int lin, int col)
{
    return (lin-1)*m+col;
}

inline void COD(int x)
{
    l=x/m;
    c=x%m;
    if(c) ++l;
    if(!c) c=m;
}

inline void Dfs(int nod)
{
    vector <int> ::iterator it;
    viz[nod]=true;
    int ok=0;
    for(it=L[nod].begin();it!=L[nod].end();++it)
        if(!viz[*it])
        {
            tata[*it]=nod; Dfs(*it); ok=1; ++grad[nod];
        }
    if(!ok)
        Q.push(nod);
}

int main()
{
    int i,j,t,k,radacina;
    #ifndef ONLINE_JUDGE
        freopen ("date.in","r",stdin);
        freopen ("date.out","w",stdout);
    #endif
    cin>>n>>m>>k;
    for(i=1;i<=n;++i)
        cin>>(a[i]+1);
    for(i=1;i<=n;++i)
        for(j=1;j<=m;++j)
            if(a[i][j]=='.')
            {
                for(t=0;t<4;++t)
                    if(a[i+dx[t]][j+dy[t]]=='.')
                    {
                        L[Cod(i,j)].push_back(Cod(i+dx[t],j+dy[t]));
                        L[Cod(i+dx[t],j+dy[t])].push_back(Cod(i,j));
                    }
                radacina=Cod(i,j);
            }
    Dfs(radacina);
    while(k--)
    {
        int nod=Q.front(); Q.pop();
        COD(nod);
        a[l][c]='X';
        --grad[tata[nod]];
        if(!grad[tata[nod]]) Q.push(tata[nod]);
    }
    for(i=1;i<=n;++i) cout<<a[i]+1<<"\n";
    return 0;
}

