#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

struct fraction
{
    int a, b;
};

bool operator < (const fraction& A, const fraction& B)
{
    int a=A.a, b=A.b, c=B.a, d=B.b;
    return a*1LL*d<c*1LL*b;
}

bool operator == (const fraction& A, const fraction& B)
{
    int a=A.a, b=A.b, c=B.a, d=B.b;
    return a*1LL*d==c*1LL*b;
}

int m;
fraction F[259];
fraction F2[259];

int solve_i(int i)
{
    for(int j=0; j<m; j++)
    {
        F2[j].a=F[j].a-i;
        F2[j].b=F[j].b;
    }
    sort(F2, F2+m);

    int maxRun=1, currRun=1;
    for(int j=1; j<m; j++)
    {
        if(F2[j-1]==F2[j]) currRun++;
        else currRun=1;

        maxRun=max(maxRun, currRun);
    }
    return maxRun;
}


int main()
{
    int n;
    cin >> n >> m;
    for(int i=0; i<m; i++)
    {
        cin >> F[i].a >> F[i].b;
    }

    //cout << "---" << endl;

    set<int> special;
    for(int a=0; a<m; a++)
    {
        for(int b=a+1; b<m; b++)
        {
            int xa=F[a].a, xb=F[b].a, ya=F[a].b, yb=F[b].b;

            ll num=ya*1LL*xb-xa*1LL*yb;
            int denum=ya-yb;
            if(denum==0) continue;
            if(num%denum!=0) continue;
            ll div=num/denum;
            if(1<=div && div<=n)
            {
                special.insert(div);
            }
        }
    }

    int result=0;
    for(auto spec_i: special)
    {
        result+=solve_i(spec_i);
    }

    result+=n-special.size();

    cout << result;

    return 0;
}
