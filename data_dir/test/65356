#include<bits/stdc++.h>
using namespace std;

typedef long double                 ld;
typedef long long                   ll;
typedef pair<int,int>               pii;
typedef pair<ll,ll>                 pll;
typedef pair<string , string>       pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define F                           first
#define S                           second
#define sep                         ' '
#define endl                        '\n'
#define file_io                     freopen("input.txt" , "r+" , stdin) ; freopen("output.txt" , "w+" , stdout);
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define error(x)                    cerr << "$$$ " << x << '\n';
#define error2(x,y)                 cerr << "#F : " << x << "      #S : " << y << '\n';
#define kill(x)                     return cout << x << endl , 0;
#define pb                          push_back

const ll MXN = 400 + 10;
const ll MXM = 5e2 + 10;
const ll MX5 = 1e5 + 10;
const ll MX6 = 1e6 + 10;
const ll INF = 8e18;
const ld eps = 1e-9;
const ll MOD = 1e9 + 7; //998244353;

ll power(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * power(a * a % md, b / 2, md) % md : power(a * a % md, b / 2, md) % md));
}
ll bmm(ll a,ll b){
    return (a%b==0 ? b : bmm(b,a%b));
}
string base2(ll n){
    string a="";while(n>=2){a+=(char)(n%2+'0');n/=2;}a+=(char)(n+'0');reverse(all(a));return a;
}

string base3(ll n){
    string a="";while(n>=3){a+=(char)(n%3+'0');n/=3;}a+=(char)(n+'0');/*reverse(all(a))*/;return a;
}

ll n, m, dis[MX5];
bool can[MXN][MXN], vis[MXN];
vector<ll> G[MXN];
int main(){
    fast_io
    //file_io
    cin >> n >> m;
    for(int i = 0; i < m; i ++){
        ll u, v;
        cin >> u >> v;
        can[u][v] = 1;
        can[v][u] = 1;
        G[u].pb(v);
        G[v].pb(u);
    }
    for(int i = 1; i <= n; i ++){
        dis[i] = INF;
    }
    queue<ll> q;
    q.push(1);
    dis[1] = 0;
    vis[1] = 1;
    while(!q.empty()){
        ll u = q.front();
        for(auto v : G[u]){
            if(!vis[v]){
                dis[v] = dis[u] + 1;
                q.push(v);
                vis[v] = 1;
            }
        }
        q.pop();
    }
    ll ans = dis[n];
    for(int i = 1; i <= n; i ++){
        vis[i] = 0;
        dis[i] = INF;
    }
    q.push(1);
    dis[1] = 0;
    vis[1] = 1;
    while(!q.empty()){
        ll u = q.front();
        for(int v = 1; v <= n; v ++){
            if(!vis[v] && can[u][v] == 0){
                dis[v] = dis[u] + 1;
                q.push(v);
                vis[v] = 1;
            }
        }
        q.pop();
    }
    cout << (max(ans, dis[n]) == INF ? -1 : max(ans, dis[n]));
    return 0;
}

//! N.N
