#include<bits/stdc++.h>
using namespace std;
#define ll long long int  
#define mod 1000000007
ll seg[600011];
ll input[100011];
ll lazy[600011];
void update(ll star,ll en,ll low,ll high,ll pos,ll val)
{
    if(low>high)
        return;
    if(lazy[pos]!=0)
    {
        seg[pos]+=lazy[pos];
        if(low!=high)
        {
            lazy[2*pos+1]+=lazy[pos];
            lazy[2*pos+2]+=lazy[pos];
        }
        lazy[pos]=0;
    }
    if(low>en||high<star)
        return ;
    if(low>=star&&high<=en)
    {
        seg[pos]+=val;
        if(low!=high)
        {
          lazy[2*pos+1]+=val;
          lazy[2*pos+2]+=val;
        }
        return ;
    }
    ll mid=(low+high)/2;
    update(star,en,low,mid,2*pos+1,val);
    update(star,en,mid+1,high,2*pos+2,val);
    seg[pos]=(seg[2*pos+1]+seg[2*pos+2]);
    seg[pos]=seg[2*pos+1]+seg[2*pos+2];
}

ll maxq(ll qlow,ll qhigh,ll low,ll high,ll pos)
{
    if(low>high)
            return 0;
    if(lazy[pos]!=0)
    {
        seg[pos]+=lazy[pos];
        if(low!=high)
        {
            lazy[2*pos+1]+=lazy[pos];
            lazy[2*pos+2]+=lazy[pos];
        }
        lazy[pos]=0;
    }
    if(qlow>high||qhigh<low)
        return 0;
    if(low>=qlow&&high<=qhigh)
        return seg[pos];
    ll mid=(low+high)/2;
    return (maxq(qlow,qhigh,low,mid,2*pos+1)+maxq(qlow,qhigh,mid+1,high,2*pos+2));
}
ll ans[100011],pp[100011];
ll bin(ll val,ll arr[],ll n, ll x)
{
    if(x<0)
    {
        // cout<<"mhb";
        if(arr[0]>=val)
            return 0;
        else if(arr[n-1]<=val)
            return n-1;
        else
        {
            ll low=x+1;
            ll high=n-1;
            while(low<=high)
            {
                ll mid=(low+high)/2;
                if(arr[mid]==val)
                    return mid;
                else if((mid-1)>=0&&arr[mid-1]<val&&arr[mid]>val)
                {
                    return mid;
                }
                else if((mid+1)<n&&arr[mid+1]>val&&arr[mid]<val)
                    return mid+1;
                else if(arr[mid]>val)
                    high=mid-1;
                else
                    low=mid+1;
            }
        }
    }
    else
    {
        if((arr[x+1]-arr[x])>=val)
            return x+1;
        else if((arr[n-1]-arr[x])<=val)
            return n-1;
        else
        {
            ll low=x+1;
            ll high=n-1;
            while(low<=high)
            {
                ll mid=(low+high)/2;
                if((arr[mid]-arr[x])==val)
                    return mid;
                else if((mid-1)>=0&&(arr[mid-1]-arr[x])<val&&(arr[mid]-arr[x])>val)
                {
                    return mid;
                }
                else if((mid+1)<n&&(arr[mid+1]-arr[x])>val&&(arr[mid]-arr[x])<val)
                    return mid+1;
                else if((arr[mid]-arr[x])>val)
                    high=mid-1;
                else
                    low=mid+1;
            }
        }
    }
}
int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ll t,i,j,l,m,n;
    cin>>n;
    ll a[n+11];
    ll ap[n+11];
    for(i=0;i<n;i++)
    {
        cin>>a[i];
    }
    for(i=0;i<n;i++)
    {
        cin>>ap[i];
        pp[i]=ap[i];
    }
    for(i=1;i<n;i++)
    {
        ap[i]+=ap[i-1];
    }
    for(i=0;i<n;i++)
    {
        ll p=bin(a[i],ap,n,i-1);
        // if(p==i)
            // cout<<i<<" "<<<<"\n";
        // cout<<p<<" ";
        if(i>0)
        {
            // cout<<(ap[p]-ap[i-1])<<" ";
            if((ap[p]-ap[i-1])<=a[i])
            {
                update(i,p,0,n-1,0,1);
            }
            else
            {
                update(i,p-1,0,n-1,0,1);
                ans[p]+=a[i]-(ap[p-1]-ap[i-1]);
                // cout<<ans[p]<<" ";
            }
        }
        else
        {
            if(ap[p]<=a[i])
            {
                update(i,p,0,n-1,0,1);
            }
            else
            {
                update(0,p-1,0,n-1,0,1);
                if(p==0)
                    ans[p]+=a[i];
                else
                    ans[p]+=(a[i]-ap[p-1]);
                // cout<<ans[p]<<" ";
            }
        }
    }
    for(i=0;i<n;i++)
    {
        // cout<<ans[i]<<" ";
        cout<<(maxq(i,i,0,n-1,0)*pp[i])+ans[i]<<" ";
    }
return 0;
}