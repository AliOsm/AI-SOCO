#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define int long long
#define all(sdk) sdk.begin(),sdk.end()
#define mll map<int, int>
#define pb push_back
#define rep(i,a,b) for(int i=a;i<b;++i)
#define repd(i,a,b) for(int i=a;i>=b;--i)
#define mp make_pair
#define hell 1000000007
#define endl '\n'
#define vvll vector<vector<int> >
#define vll vector<int>
#define mint map<int,int> 
#define sz(x) (int)x.size()
#define sll set<int>
#define pll pair<int,int>
#define F first
#define S second

int dp[2005][2005][2];
int agp[2005],gp[2005];
int k,pa,pb,r;
int expo(int a,int b){
    if(b==0)
    return 1;
    int k = expo(a,b/2);
    if(b&1){
        return (((k*k)%hell)*a)%hell;
    }
    else
        return (k*k)%hell;
}

int inv(int a){
	return expo(a,hell-2);
}

void prep(){	
	r=pa*inv(pa+pb);
	r%=hell;
	gp[0]=1;
	rep(i,1,2005){
		gp[i]=gp[i-1]+expo(r,i);
		gp[i]%=hell;
	}
	rep(i,1,2005){
		agp[i]=agp[i-1]+i*expo(r,i);
		agp[i]%=hell;
	}
}

void solve(){  
	cin>>k>>pa>>pb;
	dp[0][0][1]=(pa+pb)*inv(pa);
	dp[0][0][1]%=hell;
	prep();
        int r1=inv(pa+pb);
        int r2=inv(hell+1-r);
	rep(i,0,k){
		rep(j,0,k)
			rep(l,0,2){
				int add_value=dp[i][j][l]*pa;
				add_value%=hell;
				add_value*=r1;
				add_value%=hell;
				dp[i+1][j][0]+=add_value;
				add_value=dp[i][j][l]*pb;
				add_value%=hell;
				add_value*=r1;
				add_value%=hell;
				if(i)
				dp[i][j+i][1]+=add_value;
		}
	}
	int ans=0;
	rep(i,0,k){
		rep(j,0,k){
			int prob=dp[i][j][1];
			prob*=pb;
			prob%=hell;
			prob*=r1;
			prob%=hell;
			int c=max(0LL,k-i-j);
			int mul1=(j+i)*((r2)%hell-(c==0?0:gp[c-1]));
			mul1%=hell;
			int mul2=(((r*r2)%hell)*r2)%hell-(c==0?0:agp[c-1]);
			mul2%=hell;
			mul1=(mul1+hell)%hell;
			mul2=(mul2+hell)%hell;
			ans+=prob*(mul1+mul2);
			ans%=hell;
		}
	}
	cout<<ans%hell<<endl;
}

signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int t=1;
    // cin>>t;
    while(t--){
        solve();
    }
    return 0;
}