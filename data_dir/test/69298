#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
 
  
  
using namespace std;
  


#define ll long long

const int N = 228228;

int t[N];

int main() {
	int n, k;
	scanf("%d %d", &n, &k);
	int KEK = k;
	int cnt = 0;
	for (int i = 1; i <= n; ++i) {
		int temp;
		scanf("%d", &temp);
		t[i] = (temp >= 0);
		if (t[i] == 0) {
			cnt++;
		}
	}
	if (k < cnt) {
		printf("-1\n");
		return 0;
	}
	if (cnt == 0) {
		cout << 0 << endl;
		return 0;
	}
	multiset<int> s;
	t[n + 1] = 1;
	vector< pair<int, int> > aaa;
	int l = 1, r = 1;
	while (l < n && r < n) {
		while (l < n && t[l] != 0) {
			l++;
		}
		if (t[l] == 0) {
			r = l;
			while (r < n && t[r + 1] != 1) {
				r++;
			}
			aaa.push_back({l, r});
		} else {
			break;
		}
		l = r + 1;
	}
	if (n == 1) {
		aaa.push_back({1, 1});
	}
	for (int i = 0; i < (int)aaa.size() - 1; ++i) {
		s.insert(aaa[i + 1].first - aaa[i].second - 1);
	}
	int ans = (int)aaa.size() * 2;
	k -= cnt;
	while (!s.empty() && k >= 0) {
		int dist = *s.begin();
		if (dist <= k) {
			k -= dist;
			s.erase(s.find(dist));
			ans -= 2;
		} else {
			break;
		}
	}
	s.clear();
	int answer = ans;
	for (int i = 0; i < (int)aaa.size() - 1; ++i) {
		s.insert(aaa[i + 1].first - aaa[i].second - 1);
	}
	k = KEK - cnt;
	int ans2 = (int)aaa.size() * 2;
	if ((n + 1) - aaa.back().second - 1 <= k) {
		k -= (n + 1) - aaa.back().second - 1;
		ans2--;
	}
	while (!s.empty() && k >= 0) {
		int dist = *s.begin();
		if (dist <= k) {
			k -= dist;
			s.erase(s.find(dist));
			ans2 -= 2;
		} else {
			break;
		}
	}
	answer = min(answer, ans2);
	printf("%d\n", answer);
	return 0;
}