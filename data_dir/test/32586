#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int)1e9 + 1;
const ld EPS = 1e-9;

void precalc() {
}

const int maxn = (int) 1e5 + 10;
int a[maxn];

int n;

bool read() {
  if (scanf("%d", &n) < 1) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    scanf("%d", &a[i]);
  }
  return 1;
}

const int maxc = (int) 1e6 + 10;
int cnt[maxc];
int pos[maxc][2];

void solve() {
  memset(cnt, 0, sizeof(cnt));
  memset(pos, -1, sizeof(pos));
  for (int i = 0; i < n; ++i) {
    if (!cnt[a[i]]) {
      pos[a[i]][0] = i, pos[a[i]][1] = i;
    } else {
      pos[a[i]][1] = i;
    }
    cnt[a[i]] += 1;
  }
  int val = *max_element(cnt, cnt + maxc);
  int res = INF, l = -1, r = -1;
  for (int i = 0; i < maxc; ++i) {
    if (cnt[i] == val) {
      //eprintf("%d: [%d..%d]\n", i, pos[i][0], pos[i][1]);
      if (res > pos[i][1] - pos[i][0] + 1) {
        res = pos[i][1] - pos[i][0] + 1;
        l = pos[i][0], r = pos[i][1];
      }
    }
  }

  printf("%d %d\n", l + 1, r + 1);
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
