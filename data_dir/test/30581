///*** One Last Try ***///
#include<bits/stdc++.h>
using namespace std;
#pragma comment(linker, "/stack:200000000")
#define ll long long int
#define inf ( int )( 1e9 )
#define mxs (int)( 1e6 + 10 )
#define md  int mid = ( l + r )>>1;
#define mod (ll)(1e9)+7
//int dx[]={+1,0,+0,-1};///Four Directions
//int dy[]={+0,-1,+1,+0};///Four directions
//int dx [] = {+1,-1,+0,+0,-1,-1,+1,+1};///Eight Directions
//int dy [] = {+0,+0,+1,-1,+1,-1,-1,+1};///Eight Directions
int t, n, m, j, ans, k,a, b, c, d, e,f ,sum , i,sz,lo , hi , mid,q,le,re;
string s, s2, s3, s4;
int ar [ mxs ] , ar2 [ mxs ] ;
char ch;
void brainfuck();
bool finder( int x );
int main()
{
    ios_base::sync_with_stdio(NULL);
    cin.tie(NULL);
    cout.tie(NULL);
    brainfuck();
    return 0;
}
void brainfuck()
{
    cin>>s;
    n = s.size();
    lo = 1 , hi = n;
    for ( i = 0 ; i < n-1; i++ )
    {
        if ( s [ i ] == s [ i + 1 ] )a = 1;
        else {a = 0;break;}
    }
    if ( a || s.size() == 1)
    {
        cout<<"1";
        return;
    }
    while( lo <= hi )
    {
        mid = ( lo + hi ) / 2;
        if ( finder( mid ) )
        {
            ans = mid;
            hi = mid -1;
        }
        else lo = mid + 1;
    }
    cout<<ans;
}
bool finder( int x )
{
    b = 1;
    for ( j = 0; j <= 25; j++ )
    {
        ch = j + 'a';
        a = 0;
        le = 0;
        for ( i = 0; i < n; i++ )
        {
            if ( s [ i ] == ch )a++;
            if ( i - le + 1 > x )
            {
                if ( s [ le ] == ch )a--;
                le++;
            }
            if ( i - le + 1 == x && !a )
            {
                b = 1;
                break;
            }
        }
        if ( i == n )return 1;
    }
    return 0;
}
