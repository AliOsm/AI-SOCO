//vl xor_trans(vl &a){
//	ll h = 1;
//	while(h < sz(a)){
//		for(int i = 0; i < sz(a); i += 2*h){
//			for(int j = i; j < i+h; ++j){
//				ll x = a[j];
//				ll y = a[j+h];
//				a[j] = x+y;
//				a[j+h] = x-y;
//			}
//		}
//		h *= 2;
//	}
//	return a;
//}
//vl xor_conv(vl a, vl b, ll mod = INF){
//	ll sz = 0;
//	while(1 << sz < max(sz(a),sz(b)))
//		++sz;
//	a.resize(1<<sz);
//	b.resize(1<<sz);
//	a = xor_trans(a);
//	b = xor_trans(b);
//	vl c = a;
//	for(int i = 0; i < sz(b); ++i){
//		c[i] %= MOD;
//		b[i] %= MOD;
//		c[i] *= b[i];
//		c[i] %= mod;
//	}
//	c = xor_trans(c);
//	for(ll &x : c)
//		x = x%mod*mod_inverse(1<<sz)%MOD;
//		//x >>= sz;
//	return c;
//}
//vl or_trans(vl &a, bool inverse = false){
//	ll h = 1;
//	while(h < sz(a)){
//		for(int i = 0; i < sz(a); i += 2*h){
//			for(int j = i; j < i+h; ++j){
//				a[j+h] += (inverse ? -a[j] : a[j]);
//			}
//		}
//		h *= 2;
//	}
//	return a;
//}
//vl or_conv(vl a, vl b, ll mod = INF){
//	ll sz = 0;
//	while(1 << sz < max(sz(a),sz(b)))
//		++sz;
//	a.resize(1<<sz);
//	b.resize(1<<sz);
//	a = or_trans(a);
//	b = or_trans(b);
//	vl c = a;
//	for(int i = 0; i < sz(b); ++i)
//		c[i] *= b[i];
//	c = or_trans(c,1);
//	return c;
//}
//vl and_trans(vl &a, bool inverse = false){
//	ll h = 1;
//	while(h < sz(a)){
//		for(int i = 0; i < sz(a); i += 2*h){
//			for(int j = i; j < i+h; ++j){
//				a[j] += (inverse ? -a[j+h] : a[j+h]);
//			}
//		}
//		h *= 2;
//	}
//	return a;
//}
//vl and_conv(vl a, vl b, ll mod = INF){
//	ll sz = 0;
//	while(1 << sz < max(sz(a),sz(b)))
//		++sz;
//	a.resize(1<<sz);
//	b.resize(1<<sz);
//	a = and_trans(a);
//	b = and_trans(b);
//	vl c = a;
//	for(int i = 0; i < sz(b); ++i){
//		c[i] %= mod;
//		b[i] %= mod;
//		c[i] *= b[i];
//		c[i] %= mod;
//	}
//	c = and_trans(c,1);
//	for(ll &x : c)
//		x %= mod;
//	return c;
//}
//vl subset_trans(vl &a, bool inverse = false){
//	int N = 0;
//	while(1<<N < sz(a))
//		++N;
//	if(!inverse){
//		for(int i = 0;i < sz(a); ++i){
//			for(int mask = 0; mask < sz(a); ++mask){
//				if(mask & (1<<i))
//					a[mask] += a[mask^(1<<i)];
//			}
//		}
//	}else{
//		for(int i = 0;i < sz(a); ++i){
//			for(int mask = 0; mask < sz(a); ++mask){
//				if(mask & (1<<i))
//					a[mask] -= a[mask^(1<<i)];
//			}
//		}
//	}
//	return a;
//}
//vl subset_conv(vl a, vl b, ll mod = INF){
//	int sz = 0;
//	while(1 << sz < max(sz(a),sz(b)))
//		++sz;
//	vl c;
//	a.resize(1<<sz);
//	b.resize(1<<sz);
//	c.resize(1<<sz);
//    for(int i = 0; i < 1<<sz; i++)
//    {
//        for(int j = i;; j = (j - 1) & i)
//        {
//            c[i] += a[j] * b[i ^ j];
//			c[i] %= mod;
//            if(j == 0) break;
//        }
//    }
//	return c;
//}
//void _(){
//	vl a(1<<17);
//	int n;
//	cin >> n;
//	for(int i = 0; i < n; ++i){
//		int x;
//		cin >> x;
//		a[x]++;
//	}
//	vl fib(1<<17);
//	fib[0] = 0;
//	fib[1] = 1;
//	for(int i = 2; i < 1<<17; ++i)
//		fib[i] = (fib[i-1]+fib[i-2])%MOD;
//	vl ab = subset_conv(a,a,MOD);
//	for(ll &x : ab) x %= MOD;
//	vl c = a;
//	vl de = xor_conv(a,a,MOD);
//	for(ll &x : de) x %= MOD;
//	for(int i = 0; i < 1<<17; ++i)
//		ab[i] = (ab[i]*fib[i])%MOD;
//	for(int i = 0; i < 1<<17; ++i)
//		c[i] = (c[i]*fib[i])%MOD;
//	for(int i = 0; i < 1<<17; ++i)
//		de[i] = (de[i]*fib[i])%MOD;
//	vl ans = and_conv(ab,c,MOD);
//	//for(ll &x : ans)
//		//if(x != 0)
//			//print(x);
//	for(ll &x : ans) x %= MOD;
//	ans = and_conv(ans,de,MOD);
//	for(ll &x : ans) x %= MOD;
//	ll res = 0;
//	for(int i = 0; i < 17; ++i)
//		res += ans[1<<i];
//	print((res%MOD+MOD)%MOD);
//}
//
// ================================================ 
// ^^^	ABOVE is what I wrote in my editor	^^^
// ------------------------------------------------ 
// vvv	BELOW is automatically generated 	vvv
// ================================================ 
#include <set>
#include <iomanip>
#include <cassert>
#include <vector>
#include <iostream>
#include <string>
#define all(v) (v).begin(),(v).end()
#define sz(v) int(v.size())
using namespace std;
typedef long long ll;
typedef vector<ll> vl;
template<typename IT>
ostream &print(IT b, IT e, string sep = " ", ostream &stream = cout){
    for(IT it = b; it != e; ++it){
        stream << *it;
        if(it+1 != e) stream << sep;
    } 
    return stream;
}
template<typename IT> istream &read(IT b, IT e, istream &stream = cin){
    for(IT it = b; it != e; ++it)
        stream >> *it; 
    return stream;
}
template<typename T> ostream &operator<<(ostream &stream, vector<T> &t){
    return print(all(t)," ",stream);
}
template<typename T> ostream &operator<<(ostream &stream, vector<T> &&t){
    return print(all(t)," ",stream);
}
template<typename T> istream &operator>>(istream &stream, vector<T> &t){
    return read(all(t),stream);
}
template <typename T> 
void print(T x, string end = "\n"){
    cout << x << end;
}
template <typename t> 
void print(vector<t> arr,string sep=" "){
    if(arr.empty()){
        return;
    }
    print(arr.begin(),arr.end(),sep);
    cout << '\n';
}
template <typename T> 
void print(vector<vector<T> > arr){
    for(int i = 0; i < sz(arr); ++i){
        cout << "[" << arr[i] << "]";
        if(i+1 < sz(arr))
            cout << ", ";
    }
    cout << '\n';
}
template<typename T>
T _();
const ll INF = ll(2e18)+666;
const ll MOD = 1e9+7;
template<typename T>
vector<T> operator+(const vector<T> &lhs, const vector<T> &rhs){
    vector<T> ans(lhs);
    assert(ans.size() == rhs.size());
    for(int i = 0; i < rhs.size(); ++i)
        ans[i] += rhs[i];
    return ans;
}
template<typename T>
vector<T> operator+=(vector<T> &lhs, const vector<T> &rhs){
    return lhs = lhs+rhs;
}
template<typename T>
vector<T> operator-(const vector<T> lhs, const vector<T> rhs){
    vector<T> ans(all(lhs));
    assert(ans.size() == rhs.size());
    for(int i = 0; i < rhs.size(); ++i)
        ans[i] -= rhs[i];
    return ans;
}
template<typename T>
vector<T> operator-=(vector<T> &lhs, const vector<T> &rhs){
    return lhs = lhs-rhs;
}
template<typename T>
vector<T> append(vector<T> &lhs, const vector<T> rhs){
    lhs.insert(lhs.end(),all(rhs));
    return lhs;
}
template<typename T>
T max(const vector<T> arr){
    assert(!arr.empty());
    T ans = arr[0];
    for(auto &cur : arr)
        ans = max(ans,cur);
    return ans;
}
template<typename T>
T max(const set<T> s){
    assert(!s.empty());
    return *--s.end();
}
template<typename T, typename G>
vector<T> set_max(vector<T> &base, const vector<G> &comp){
    assert(base.size() == comp.size());
    for(int i = 0; i < (int)comp.size(); ++i)
        base[i] = max(base[i],comp[i]);
    return base;
}
ll ext_euclid(ll a, ll b, ll c, ll d){
    if(c == 0)
        return b;
    return ext_euclid(c,d,a%c,b-a/c*d);
}
ll mod_inverse(ll x, ll mod = MOD){
    return (ext_euclid(mod,0,x,1)+mod)%mod;
}
vl xor_trans(vl &a){
	ll h = 1;
	while(h < sz(a)){
		for(int i = 0; i < sz(a); i += 2*h){
			for(int j = i; j < i+h; ++j){
				ll x = a[j];
				ll y = a[j+h];
				a[j] = x+y;
				a[j+h] = x-y;
			}
		}
		h *= 2;
	}
	return a;
}
vl xor_conv(vl a, vl b, ll mod = INF){
	ll sz = 0;
	while(1 << sz < max(sz(a),sz(b)))
		++sz;
	a.resize(1<<sz);
	b.resize(1<<sz);
	a = xor_trans(a);
	b = xor_trans(b);
	vl c = a;
	for(int i = 0; i < sz(b); ++i){
		c[i] %= MOD;
		b[i] %= MOD;
		c[i] *= b[i];
		c[i] %= mod;
	}
	c = xor_trans(c);
	for(ll &x : c)
		x = x%mod*mod_inverse(1<<sz)%MOD;
		//x >>= sz;
	return c;
}
vl or_trans(vl &a, bool inverse = false){
	ll h = 1;
	while(h < sz(a)){
		for(int i = 0; i < sz(a); i += 2*h){
			for(int j = i; j < i+h; ++j){
				a[j+h] += (inverse ? -a[j] : a[j]);
			}
		}
		h *= 2;
	}
	return a;
}
vl or_conv(vl a, vl b, ll mod = INF){
	ll sz = 0;
	while(1 << sz < max(sz(a),sz(b)))
		++sz;
	a.resize(1<<sz);
	b.resize(1<<sz);
	a = or_trans(a);
	b = or_trans(b);
	vl c = a;
	for(int i = 0; i < sz(b); ++i)
		c[i] *= b[i];
	c = or_trans(c,1);
	return c;
}
vl and_trans(vl &a, bool inverse = false){
	ll h = 1;
	while(h < sz(a)){
		for(int i = 0; i < sz(a); i += 2*h){
			for(int j = i; j < i+h; ++j){
				a[j] += (inverse ? -a[j+h] : a[j+h]);
			}
		}
		h *= 2;
	}
	return a;
}
vl and_conv(vl a, vl b, ll mod = INF){
	ll sz = 0;
	while(1 << sz < max(sz(a),sz(b)))
		++sz;
	a.resize(1<<sz);
	b.resize(1<<sz);
	a = and_trans(a);
	b = and_trans(b);
	vl c = a;
	for(int i = 0; i < sz(b); ++i){
		c[i] %= mod;
		b[i] %= mod;
		c[i] *= b[i];
		c[i] %= mod;
	}
	c = and_trans(c,1);
	for(ll &x : c)
		x %= mod;
	return c;
}
vl subset_trans(vl &a, bool inverse = false){
	int N = 0;
	while(1<<N < sz(a))
		++N;
	if(!inverse){
		for(int i = 0;i < sz(a); ++i){
			for(int mask = 0; mask < sz(a); ++mask){
				if(mask & (1<<i))
					a[mask] += a[mask^(1<<i)];
			}
		}
	}else{
		for(int i = 0;i < sz(a); ++i){
			for(int mask = 0; mask < sz(a); ++mask){
				if(mask & (1<<i))
					a[mask] -= a[mask^(1<<i)];
			}
		}
	}
	return a;
}
vl subset_conv(vl a, vl b, ll mod = INF){
	int sz = 0;
	while(1 << sz < max(sz(a),sz(b)))
		++sz;
	vl c;
	a.resize(1<<sz);
	b.resize(1<<sz);
	c.resize(1<<sz);
    for(int i = 0; i < 1<<sz; i++)
    {
        for(int j = i;; j = (j - 1) & i)
        {
            c[i] += a[j] * b[i ^ j];
			c[i] %= mod;
            if(j == 0) break;
        }
    }
	return c;
}
void _(){
	vl a(1<<17);
	int n;
	cin >> n;
	for(int i = 0; i < n; ++i){
		int x;
		cin >> x;
		a[x]++;
	}
	vl fib(1<<17);
	fib[0] = 0;
	fib[1] = 1;
	for(int i = 2; i < 1<<17; ++i)
		fib[i] = (fib[i-1]+fib[i-2])%MOD;
	vl ab = subset_conv(a,a,MOD);
	for(ll &x : ab) x %= MOD;
	vl c = a;
	vl de = xor_conv(a,a,MOD);
	for(ll &x : de) x %= MOD;
	for(int i = 0; i < 1<<17; ++i)
		ab[i] = (ab[i]*fib[i])%MOD;
	for(int i = 0; i < 1<<17; ++i)
		c[i] = (c[i]*fib[i])%MOD;
	for(int i = 0; i < 1<<17; ++i)
		de[i] = (de[i]*fib[i])%MOD;
	vl ans = and_conv(ab,c,MOD);
	//for(ll &x : ans)
		//if(x != 0)
			//print(x);
	for(ll &x : ans) x %= MOD;
	ans = and_conv(ans,de,MOD);
	for(ll &x : ans) x %= MOD;
	ll res = 0;
	for(int i = 0; i < 17; ++i)
		res += ans[1<<i];
	print((res%MOD+MOD)%MOD);
}
int main(){
    ios_base::sync_with_stdio(false); cin.tie(0);
    cout << fixed << setprecision(15);
    _();
}
