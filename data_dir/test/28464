/////////////////////////   _LeMur_
#include <iostream>
#include <algorithm>
#include <time.h>
#include <stack>
#include <string>
#include <cstring>
#include <cassert>
#include <cstdio>
#include <cmath>
#include <vector>
#include <queue>
#include <map>
#include <set>

using namespace std;

const int N = 105;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;

string s1 , s2;
int dp[N][10];

void solve(int i,int j){
    int x = ((j >> 0) & 1);
    int y = ((j >> 1) & 1);
    dp[i][j] = -1;
    if(x == 0 && s1[i] == 'X'){
        return ;
    }
    if(y == 0 && s2[i] == 'X'){
        return ;
    }
    if(s1[i] == 'X') x = 0;
    if(s2[i] == 'X') y = 0;
    if(x == 0 && y == 1 || x == 1 && y == 0){
        if(dp[i - 1][0] != -1)
            dp[i][j] = max(dp[i][j] , dp[i - 1][0] + 1);
    }
    if(x == 0 && y == 0){
        for(int h=0;h<4;h++){
            if(dp[i - 1][h] != -1)
                dp[i][j] = max(dp[i][j] , dp[i - 1][h]);
        }
    }
    if(x == 1 && y == 1){
        for(int h=0;h<3;h++){
            if(dp[i - 1][h] != -1)
                dp[i][j] = max(dp[i][j] , dp[i - 1][h] + 1);
        }
    }
}

int main(){
    cin>>s1>>s2;
    int n = (int)s1.size();
    for(int i=0;i<4;i++){
        int x = ((i >> 0) & 1);
        int y = ((i >> 1) & 1);
        bool flag = true;
        if(x == 0 && s1[i] == 'X')flag = false;
        if(y == 0 && s2[i] == 'X')flag = false;
        dp[0][i] = flag ? 0 : -1;
    }
    for(int i=1;i<n;i++){
        for(int j=0;j<4;j++){
            solve(i , j);
        }
    }
    int answ = 0;
    for(int i=0;i<4;i++){
        answ = max(answ , dp[n - 1][i]);
    }
    cout<<answ<<endl;
    return 0;
}
