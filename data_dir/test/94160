#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

const int N = 1e6 + 10;
char s[N];
int sum[N];
int p10[N];

inline bool check(int A, int B, int C) {
  if (C < max(A, B) || C > max(A, B) + 1) return false;
  if ((s[A] == '0' && B > 1) || (s[A + B] == '0' && C > 1)) return false;
  int x = sum[A];
  int y = (sum[A + B] - (int64)sum[A] * p10[B] % MOD + MOD) % MOD;
  int z = (sum[A + B + C] - (int64)sum[A + B] * p10[C] % MOD +
           MOD) %  MOD;
  if ((x + y) % MOD != z) return false;
  int i = A - 1, j = A + B - 1, k = A + B + C - 1;
  int ti = 0, tj = A, tk = A + B;
  int carry = 0;
  for (; i >= ti || j >= tj || k >= tk; --i, --j, --k) {
    int x = i >= ti ? s[i] - '0' : 0;
    int y = j >= tj ? s[j] - '0' : 0;
    int z = k >= tk ? s[k] - '0' : 0;
    int cur = x + y + carry;
    if (cur % 10 != z) return false;
    carry = cur / 10;
  }
  return true;
}

int main() {
  scanf("%s", s);
  // int n = 1e6;
  int n = strlen(s);
  // mt19937 mrand(0);
  // for (int i = 0; i < n; ++i) {
  //   s[i] = mrand() % 10 + '0';
  // }
  p10[0] = 1;
  for (int i = 0; i < n; ++i) {
    sum[i + 1] = (sum[i] * 10LL + (s[i] - '0')) % MOD;
    p10[i + 1] = p10[i] * 10LL % MOD;
  }
  int i, j, k;
  for (k = 1; k * 2 <= n; ++k) {
    if (k * 3 < n) continue;
    i = k - 1;
    j = n - k - i;
    if (check(i, j, k)) break;
    i = k;
    j = n - k - i;
    if (check(i, j, k)) break;
    j = k - 1;
    i = n - k - j;
    if (check(i, j, k)) break;
    j = k;
    i = n - k - j;
    if (check(i, j, k)) break;
  }
  for (int u = 0; u < i; ++u) {
    putchar(s[u]);
  }
  putchar('+');
  for (int u = 0; u < j; ++u) {
    putchar(s[i + u]);
  }
  putchar('=');
  for (int u = 0; u < k; ++u) {
    putchar(s[i + j + u]);
  }
  puts("");
  return 0;
}
