#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

int n, m;
int G[1010][1010];
int row[1010][1010];
int col[1010][1010];
int dgm[1010][1010];
int dgs[1010][1010];

int validR(int x1, int y1, int x2, int y2){
	ll res = row[x2][y2];
	if (y1) res -= row[x1][y1 - 1];
	return (res == 0);
}

int validC(int x1, int y1, int x2, int y2){
	ll res = col[x2][y2];
	if (x1) res -=  col[x1 - 1][y2];
	return (res == 0);
}

int validM(int x1, int y1, int x2, int y2){
	int digID = x1 - y1 + 500;
	ll res = dgm[x2][digID];
	if (x1) res -= dgm[x1 - 1][digID];
	return (res == 0);
}

int validS(int x1, int y1, int x2, int y2){
	int digID = x1 + y1;
	ll res = dgs[x2][digID];
	if (x1) res -= dgs[x1 - 1][digID];
	return (res == 0);
}

int main()
{
	//freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);
	ios::sync_with_stdio(0);
	cin.tie(0);

	cin >> n >> m;
	for (int i = 0; i < n; i++){
		string s; cin >> s;
		for (int j = 0; j < m; j++) G[i][j] = s[j] - '0';
	}

	for (int i = 0; i < n; i++){
		for (int j = 0; j < m; j++){
			if (j) row[i][j] = row[i][j - 1];
			row[i][j] += G[i][j];
		}
	}

	for (int j = 0; j < m; j++){
		for (int i = 0; i < n; i++){
			if (i) col[i][j] = col[i - 1][j];
			col[i][j] += G[i][j];
		}
	}

	for (int i = 0; i < n; i++){
		for (int j = 0; j < m; j++){
			int digID = i - j + 500;
			if (i) dgm[i][digID] = dgm[i - 1][digID];
			dgm[i][digID] += G[i][j];
		}
	}

	for (int i = 0; i < n; i++){
		for (int j = 0; j < m; j++){
			int digID = i + j;
			if (i) dgs[i][digID] = dgs[i - 1][digID];
			dgs[i][digID] += G[i][j];
		}
	}

	ll ans = 0;
	for (int x = 0; x < n; x++){
		for (int y = 0; y < m; y++){
			if (G[x][y]) continue;
			for (int i = 1; x + i < n && y + i < m && y - i >= 0; i++){
				if (G[x + i][y - i] || G[x + i][y + i]) break;
				if (validR(x + i, y - i, x + i, y + i)) ans++;
			}
			for (int i = 1; x - i >= 0 && y + i < m && y - i >= 0; i++){
				if (G[x - i][y - i] || G[x - i][y + i]) break;
				if (validR(x - i, y - i, x - i, y + i)) ans++;
			}
			for (int i = 1; y + i < m && x + i < n && x - i >= 0; i++){
				if (G[x - i][y + i] || G[x + i][y + i]) break;
				if (validC(x - i, y + i, x + i, y + i)) ans++;
			}
			for (int i = 1; y - i >= 0 && x + i < n && x - i >= 0; i++){
				if (G[x - i][y - i] || G[x + i][y - i]) break;
				if (validC(x - i, y - i, x + i, y - i)) ans++;
			}
			for (int i = 1; x - i >= 0 && y + i < m; i++){
				if (G[x - i][y] || G[x][y + i]) break;
				if (validM(x - i, y, x, y + i)) ans++;
			}
			for (int i = 1; x - i >= 0 && y - i >= 0; i++){
				if (G[x - i][y] || G[x][y - i]) break;
				if (validS(x - i, y, x, y - i)) ans++;
			}
			for (int i = 1; x + i < n && y - i >= 0; i++){
				if (G[x + i][y] || G[x][y - i]) break;
				if (validM(x, y - i, x + i, y)) ans++;
			}
			for (int i = 1; x + i < n && y + i < m; i++){
				if (G[x + i][y] || G[x][y + i]) break;
				if (validS(x, y + i, x + i, y)) ans++;
			}
		}
	}
	cout << ans << endl;

	return 0;
}