#include<bits/stdc++.h>

using namespace std;

#define int long long

typedef pair<int,int> pii;

const int MAXN = 2000000;
const int INF = 0x3f3f3f3f3f3f3f3f;

int v[MAXN];
int pai[MAXN];
int t[MAXN];
int tam[MAXN];

int find(int x){
  if(pai[x] == x) return x;
  return pai[x] = find(pai[x]);
}

void join(int a,int b){ pai[find(b)] = find(a); }

#undef int
int main(){
#define int long long  
  memset(t,0,sizeof t);
  memset(tam,0,sizeof tam);

  int n;
  cin >> n;

  priority_queue<pii,vector<pii>,greater<pii>> fila;

  v[0] = INF , v[n+1] = INF;

  for(int i = 1;i <= n;i++){
    cin >> v[i];

    fila.push({v[i],i});

    pai[i] = i;

  }

  pii k = {-INF,INF};
  
  int cidades = 0;

  while(!fila.empty()){

    int r = 1;
    int atual = fila.top().second;

    if(v[atual-1] < v[atual]){
      t[tam[find(atual - 1)]] -= 1;
      t[tam[find(atual)]] -= 1;
      join(atual - 1,atual);

      tam[find(atual - 1)] += 1;
      t[tam[find(atual - 1)]] += 1;

      r -= 1;
    }
    if(v[atual+1] < v[atual]){
      t[tam[find(atual + 1)]] -= 1;
      t[tam[find(atual)]] -= 1;
      tam[find(atual + 1)] += 1;

      join(atual + 1,atual);
      t[tam[find(atual)]] += 1;

      
      r -= 1;
    }
    if(v[atual+1] > v[atual] && v[atual] < v[atual - 1]){
      tam[atual] = 1;
      t[tam[find(atual)]] += 1;
    }

    cidades += r;

    //cout << atual << " " << t[tam[find(atual)]] << " " << find(atual) << " " << cidades<< endl;

    if(t[tam[find(atual)]] == cidades && cidades > k.first)
      k.first = cidades , k.second = v[atual] + 1;

    fila.pop();
  }

  cout << k.second << endl;

}






