#include<bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
using namespace std;

#define fr first
#define sc second
#define memset(X,Y) memset(X,Y,sizeof X)
#define all(X) X.begin(),X.end()
#define SZ size()
#define mp make_pair
#define pb push_back
#define Pb pop_back

#define error(args...){vector<string> _v = split(#args,','); err(_v.begin(),args); }
vector <string> split(const string &s,char c)
{
    vector<string> v;
    stringstream ss(s);
    string x;
    while(getline(ss,x,c))
        v.emplace_back(x);
    return move(v);
}
void err(vector<string>:: iterator it) {}
template<typename T,typename ... Args>
void err(vector<string>::iterator it, T a, Args ... args)
{
    cerr << it->substr((*it)[0] == ' ',it->length())
         << " = " << a <<" " ;
    err(++it,args...);
}
template <typename T>
using order_set = tree<T, null_type, less<T>, rb_tree_tag,
      tree_order_statistics_node_update>;

typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,pii> pl;
typedef vector<int> vi;
typedef vector<ll> vll;
double pi=acos(-1);
const ll N = 2 * (1e5) + 10,M = 1e6,mod=1e9 + 7,K = 4 * N;
ll OOL = (1LL<<60)-1;
int OO = 1<<31;
ll n,q,r,mH;
ll p;
ll getH(ll u){
//    if(u%2)return -1;
    ll cur=r;
    ll T=mH;
    while(cur!=u){
        p=cur;
        if(u<cur){
            cur-=1LL<<T;
        }
        else{
            cur+=1LL<<T;
        }
        T--;
    }
    return T;
}
int main(){
    //cout<<(ll)log2(OOL);
    cin>>n>>q;
    r=(n+1)/2;
    ll t=n;
    mH=-1;
    while(t!=1){
        t/=2;
        mH++;
    }
   // error(getH(2));
    while(q--){
        ll u;
        string s;
        cin>>u>>s;
        for(int i=0;i<s.SZ;i++){
            ll H = getH(u);
            if(s[i]=='U'){
                if(u==r)continue;
                u = p;
            }
            else if(s[i]=='R'){
                if(H==-1)continue;
                u+=1LL<<H;
            }
            else{
                if(H==-1)continue;
                u-=1LL<<H;
            }
        }
        cout<<u<<endl;
    }
}