#include<bits/stdc++.h>
#define lf double
#define ll long long
#define ull unsigned ll
#define ii pair<int,int>
#define il pair<int,ll>
#define iii pair<ii,int>
#define iiii pair<ii,ii>
#define pll pair<ll,ll>
#define ld long int
#define heap priority_queue
#define mp make_pair
#define st first
#define nd second
#define pb push_back
#define pp pop_back
#define all(x) x.begin(),x.end()
#define len(x) strlen(x)
#define sz(x) (int) x.size()
#define orta ((bas+son)/2)
#define min3(x,y,z) min(min(x,y),z)
#define max3(x,y,z) max(max(x,y),z)
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define MOD 1000000007
#define inf 1000000009
#define N 100005
#define LOG 23
#define K 1700
#define M 110005
#define EPS 0.0000001
using namespace std; 

int n,q,x,y,root,t;
int a[N],der[N],low[N],fin[N],tut[N];
vector<int> pre[N*4],v[N];
vector<ii> seg[N*4];

int get(int node,int bas,int son,int x,int y,int rang) {

   if(bas>y || son<x) return inf;

   if(bas>=x && son<=y) {

      int pos=upper_bound(all(seg[node]),mp(rang,inf))-seg[node].begin()-1;

      if(pos>=0) {

         return pre[node][pos];

      }

      return inf;

   }

   return min(get(node*2,bas,orta,x,y,rang),get(node*2+1,orta+1,son,x,y,rang));

}

void merge(int sol,int sag,int now) {

   int p1=0,p2=0;

   while(p1<sz(seg[sol]) || p2<sz(seg[sag])) {

      if(p2==sz(seg[sag]) || (p1!=sz(seg[sol]) && seg[sol][p1].st<seg[sag][p2].st)) {

         seg[now].pb(seg[sol][p1]);
         p1++;

      }
      else {

         seg[now].pb(seg[sag][p2]);
         p2++;

      }

   }

}

void build(int node,int bas,int son) {

   if(bas==son) {

      int ind=tut[bas];

      seg[node].pb(mp(der[ind],a[ind]));
      pre[node].pb(a[ind]);
      
      return ;

   }

   build(node*2,bas,orta);
   build(node*2+1,orta+1,son);

   merge(node*2,node*2+1,node);

   for(int i=0;i<sz(seg[node]);i++) {

      if(!i) {

         pre[node].pb(seg[node][i].nd);

      }
      else {

         pre[node].pb(min(pre[node][i-1],seg[node][i].nd));

      }

   }

}

void dfs(int node,int ata,int dep) {

   low[node]=++t;
   tut[t]=node;
   der[node]=dep;

   for(auto i:v[node]) {

      if(i==ata) continue ;

      dfs(i,node,dep+1);

   }

   fin[node]=t;
  
}

int main() {

   scanf("%d %d",&n,&root);

   for(int i=1;i<=n;i++) {

      scanf("%d",&a[i]);

   }

   for(int i=1;i<n;i++) {

      scanf("%d %d",&x,&y);

      v[x].pb(y);
      v[y].pb(x);

   }

   dfs(root,0,0);

   build(1,1,n);

   scanf("%d",&q);

   int last=0;

   while(q--) {

      scanf("%d %d",&x,&y);

      x=(x+last)%n+1;
      y=(y+last)%n;

      last=get(1,1,n,low[x],fin[x],der[x]+y);

      printf("%d\n",last);

   }

}