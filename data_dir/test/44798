
 #include "bits/stdc++.h"
 using namespace std;

 int Array[300005] , Order[300005];
 vector<pair<int,int> > SegTree(300005 * 4);

 void Build( int Node , int low , int high ){
     if( low == high ){
      SegTree[Node].first = Array[low];
      SegTree[Node].second = low;
    }  
     else{
      int middle , Temp1 = Node << 1 , Temp2;
      Temp2 = Temp1 + 1;
      middle = ( low + high ) >> 1;
      Build( Temp1 , low , middle );
      Build( Temp2 , middle + 1 , high );

         if( SegTree[Temp1].first >= SegTree[Temp2].first ){
          SegTree[Node].first = SegTree[Temp1].first;
          SegTree[Node].second = SegTree[Temp1].second; 
        }
         else{
          SegTree[Node].first = SegTree[Temp2].first;
          SegTree[Node].second = SegTree[Temp2].second; 
        }   
    }  	
}

 pair<int,int> query( int Node , int low , int high , int l , int r ){
     if( l <= low && r >= high )
      return SegTree[Node];
     else if( l > high || r < low )
      return make_pair(0,0);
     else{
      int middle , Temp1 = Node << 1;
      pair<int,int> x , y;
      middle = ( low + high ) >> 1;
      x = query( Temp1 , low , middle , l , r );
      y = query( Temp1 + 1 , middle + 1 , high , l , r );
 	  
 	     if( x.first >= y.first )
 	      return x;
 	     else
 	      return y;  
    }   	
}

 void Update( int Node , int low , int high , int index ){
     if( low == high )
      SegTree[Node].first = 0;
     else{
      int middle , Temp1 = Node << 1;
      middle = ( low + high ) >> 1;

         if( index <= middle )
          Update( Temp1 , low , middle , index );
         else
          Update( Temp1 + 1 , middle + 1 , high , index );
      
         if( SegTree[Temp1].first >= SegTree[Temp1 + 1].first ){
          SegTree[Node].first = SegTree[Temp1].first;
          SegTree[Node].second = SegTree[Temp1].second;
        }
         else{
          SegTree[Node].first = SegTree[Temp1 + 1].first;
          SegTree[Node].second = SegTree[Temp1 + 1].second;
        }     	
    } 	
}

 int main(){
  int N , k , i;
  pair<int,int> x;
  long long Ans = 0;
  scanf( "%d%d" , &N , &k );
  
     for( i = 1 ; i <= N ; ++i )
      scanf( "%d" , Array + i );

  Build( 1 , 1 , N );

     for( i = k + 1 ; i <= k + N ; ++i ){
      x = query( 1 , 1 , N , 1 , min( i , N ) );
      Update( 1 , 1 , N , x.second );
      Ans += 1LL * ( i - x.second ) * x.first; 
      Order[x.second] = i;
    }
   
  printf( "%lld\n" , Ans );

     for( i = 1 ; i <= N ; ++i )
      printf( "%d " , Order[i] );

  puts( "" );     
  return 0;
}