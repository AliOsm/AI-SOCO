#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#pragma comment(linker, "/stack:200000000")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;     
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;

template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
}

const int MAXN = 1e5 + 10;
const int MAXD = 7005;
bitset<MAXD> for_first[MAXD], for_fourth[MAXD], a[MAXN];

signed main() {
    FAST_IO();
    for (int i = 1; i < MAXD; ++i) {
        for (int j = 1; j <= i; ++j) {
            if (i % j == 0) {
                for_first[i][j] = 1;
            }
        }
    }
    for (int i = MAXD - 1; i >= 1; --i) {
        for_fourth[i][i] = 1;
        for (int j = i + i; j < MAXD; j += i) {
            for_fourth[i] ^= for_fourth[j];
        }
    }
    int n, q;
    cin >> n >> q;
    string ans = "";
    while (q--) {
        int t;
        cin >> t;
        if (t == 1) {
            int x, v;
            cin >> x >> v;
            a[x] = for_first[v];
        }
        else if (t == 2) {
            int x, y, z;
            cin >> x >> y >> z;
            a[x] = a[y] ^ a[z];
        }
        else if (t == 3) {
            int x, y, z;
            cin >> x >> y >> z;
            a[x] = a[y] & a[z];
        }
        else {
            int x, v;
            cin >> x >> v;
            ans += char('0' + ((a[x] & for_fourth[v]).count() & 1));
        }
    }
    cout << ans;
    return 0;
}