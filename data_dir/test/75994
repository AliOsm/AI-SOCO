#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <cstdio>
#include <map>
#include <unordered_map>
#include <string>
#include <iomanip>
#include <vector>
#include <memory.h>
#include <queue>
#include <set>
#include <unordered_set>
#include <stack> 
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include <bitset>
using namespace std;
#define mems(A, val) memset(A, val, sizeof(A))
#define mp(a, b) make_pair(a, b)
#define all(B) (B).begin(), (B).end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define forit (it, coll) for(auto it = coll.begin(); it != coll.end(); ++it)
#define sz(a) (int)a.size()
#define pb push_back
const int MAXN = 100 * 1000 + 10;
const double EPS = 1e-9;
typedef long long LL;
const LL MOD = 1000 * 1000 * 1000 + 7;

double D[201][405][201];
int norma = 200;
bool U[201][405][201];
int n, l, k;
vector<double> p(201);
vector<int> a(201);
int normalize_cap(int cap) {
	return min(404, cap + norma);
}

double rec(int pos, int cap, int need) {
	if (U[pos][normalize_cap(cap)][need]) return D[pos][normalize_cap(cap)][need];
	if (pos == n ) {
		return cap >= 0 && need == 0 ? 1.0 : 0.0;
	}

	double result = 0.0;
	if (a[pos] == -1) {
		result += p[pos] * rec(pos + 1, cap - 1, max(0, need - 1));
		result += (1 - p[pos]) * rec(pos + 1, cap, need);
	}
	else {
		result += p[pos] * rec(pos + 1, min(200,cap + a[pos]), max(0, need - 1));
		result += (1 - p[pos]) * rec(pos + 1, cap, need);
	}

	U[pos][normalize_cap(cap)][need] = true;
	return D[pos][normalize_cap(cap)][need] = result;
}

int main(int argc, char* argv[]) {

#ifdef _DEBUG
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
	//freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	//freopen("numbers.in", "r", stdin); freopen("numbers.out", "w", stdout);
#endif
	mems(U, 0);
	ios::sync_with_stdio(0);

	
	cin >> n >> l >> k;


	forn(i, 0, n) { int pp;  cin >> pp; p[i] = (double)pp / (double)100; }
	forn(i, 0, n)cin >> a[i];
	printf("%.15f", rec(0, k, l));
	return 0;
}