#include<bits/stdc++.h>
#define YES 1
#define NO 0
using namespace std;
vector< pair<long long, long long> > S[55];
vector< pair<long long, long long> > queries[55][2];
pair<long long, long long> intersect(pair<long long, long long> r1, pair<long long, long long> r2) {
    return make_pair(max(r1.first, r2.first), min(r1.second, r2.second));
}

bool bad(pair<long long, long long> r1, pair<long long, long long> r2) {
    if (r1.second < r2.first)
        return true;
    if (r2.second < r1.first)
        return true;
    return false;
}

bool badSon(pair<long long, long long> father, pair<long long, long long> son) {
    pair<long long, long long> r = make_pair(father.first * 2, father.second * 2 + 1);
    return bad(r, son);
}

int main() {
    ios::sync_with_stdio(false);


    int h, q;
    cin >> h >> q;
    while (q--) {
        int lvl, ans;
        long long L, R;
        cin >> lvl >> L >> R >> ans;
        while (lvl < h) {
            L = 2 * L;
            R = 2 * R + 1;
            lvl++;
        }
        queries[lvl][ans].push_back(make_pair(L, R));
    }

    for (int lvl = h; lvl <= h; lvl++) {
        pair<long long, long long> r;


        // handling YES
        if (queries[lvl][YES].size() == 0)
            r = (make_pair(1LL << (lvl - 1), (1LL << lvl) - 1));
        else {
            r = queries[lvl][YES][0];
            for (int i = 1; i < int(queries[lvl][YES].size()); i++) {
                r = intersect(r, queries[lvl][YES][i]);
                if (r.first > r.second) {
                    cout << "Game cheated!" << endl;
                    return 0;
                }
            }
        }
        // handling NO
        vector<pair<long long, long long> > s;
        sort(queries[lvl][NO].begin(), queries[lvl][NO].end());
        for (int i = 0; i < int(queries[lvl][NO].size()); i++) {
            pair<long long, long long> v = queries[lvl][NO][i];
            if (v.first <= r.first)
                r.first = max(v.second + 1, r.first);
            else {
                s.push_back(make_pair(r.first, min(v.first - 1, r.second)));
                r.first = v.second + 1;
            }
            if (r.second < r.first)
                break;
        }
        if (r.second >= r.first)
            s.push_back(r);



        S[lvl] = s;
        // check for cheating inside this level
        sort(queries[lvl][YES].begin(), queries[lvl][YES].end());
        int index = 0;
        for (int i = 0; i < int(queries[lvl][YES].size()); i++) {
            pair<long long, long long> v = queries[lvl][YES][i];
            while (index < int(s.size()) && bad(v, s[index]))
                index++;
            if (index == int(s.size())) {
                cout << "Game cheated!" << endl;
                return 0;
            }
        }

        if (s.size() == 0) {
            cout << "Game cheated!" << endl;
            return 0;
        }


    }

    if (S[h].size() > 1 || S[h][0].first != S[h][0].second) {
        cout << "Data not sufficient!" << endl;
    }
    else {
        cout << S[h][0].first << endl;
    }






    return 0;
}

