#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define IN freopen("hard1.txt","r",stdin)
#define OUT freopen("hard1.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG printf("Hi\n")
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 1000005
#define FastIO  ios_base::sync_with_stdio(false); cin.tie(NULL)


using namespace __gnu_pbds;
using namespace std ;

typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef pair<i64, i64> pii ;

#define maxn 1000005
#define mod 1000000007LL
#define INF 4500000000000000000LL

char s[1005][1005] ;
int vis[1005][1005] ;
int n , m ;

int dx[] = {1,-1,0,0} ;
int dy[] = {0,0,1,-1} ;

bool valid( int r, int c)
{
    if( r<1 || c<1 || r>n || c>m ) return false ;
    return true ;
}

void dfs(int r, int c)
{
    vis[r][c] = 1 ;
    for(int i=0 ; i<4 ; i++)
    {
        int rr = r + dx[i] ;
        int cc = c + dy[i] ;
        if(valid(rr,cc) && s[rr][cc] == '#' && !vis[rr][cc] ) dfs(rr,cc) ;
    }
}

int main()
{
    scanf("%d %d",&n,&m) ;

    for(int i=1 ; i<=n ; i++)
    {
        scanf("%s",s[i]+1) ;
    }

    int rempty = 0 , cempty = 0 ;

    for(int i=1 ; i<=n ; i++)
    {
        int fl = 1 ;
        for(int j=1 ; j<=m ; j++)
        {
            if( s[i][j]=='#' ) fl = 0 ;
        }
        if(fl) rempty++ ;
    }
    for(int j=1 ; j<=m ; j++)
    {
        int fl = 1 ;
        for(int i=1 ; i<=n ; i++)
        {
            if(s[i][j]=='#') fl = 0 ;
        }
        if(fl) cempty++ ;
    }

    if( (rempty>0 && cempty==0) || (cempty>0 && rempty==0) )
    {
        printf("-1\n") ;
        return 0 ;
    }

    for(int i=1;  i<=n ; i++)
    {
        int fl = 0 ;
        for(int j=1 ; j<=m ; j++)
        {
            if(fl==0 && s[i][j]=='#') fl = 1 ;
            if(fl==1 && s[i][j]=='.') fl = 2 ;
            if(fl==2 && s[i][j]=='#') fl = 3 ;
        }
        if(fl==3)
        {
            printf("-1\n") ;
            return 0 ;
        }
    }

    for(int j=1;  j<=m ; j++)
    {
        int fl = 0 ;
        for(int i=1 ; i<=n ; i++)
        {
            if(fl==0 && s[i][j]=='#') fl = 1 ;
            if(fl==1 && s[i][j]=='.') fl = 2 ;
            if(fl==2 && s[i][j]=='#') fl = 3 ;
        }
        if(fl==3)
        {
            printf("-1\n") ;
            return 0 ;
        }
    }

    int ans = 0 ;

    for(int i=1 ; i<=n ; i++)
    {
        for(int j=1 ; j<=m ; j++)
        {
            if( s[i][j] =='#' && !vis[i][j] )
            {
                dfs(i,j) ;
                ans++ ;
            }
        }
    }

    printf("%d\n",ans) ;

    return 0 ;
}
