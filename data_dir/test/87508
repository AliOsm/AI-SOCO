#include<stdio.h>
#include<string.h>
#include<algorithm>
#include<map>
#include<string>
#include<math.h>
#include<queue>
#include<stack>
#include<iostream>
using namespace std;
#define LL long long
#define mod 1000000007
char str[2005][2005];
int dp[2005][2005], flag[2005][2005];
typedef struct Res
{
	int x;
	int y;
}Res;
Res now, temp;
vector<Res> G, F;
int main(void)
{
	char ch;
	int n, k, i, j, sum;
	scanf("%d%d", &n, &k);
	for(i=1;i<=n;i++)
		scanf("%s", str[i]+1);
	sum = 0;
	memset(dp, 62, sizeof(dp));
	dp[0][1] = dp[1][0] = 0;
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=n;j++)
		{
			if(str[i][j]=='a')
				dp[i][j] = min(dp[i-1][j], dp[i][j-1]);
			else
				dp[i][j] = min(dp[i-1][j], dp[i][j-1])+1;
			if(dp[i][j]<=k)
				sum = max(sum, i+j-1);
		}
	}
	if(k==0)
	{
		now.x = now.y = 1;
		G.push_back(now);
		printf("%c", str[1][1]);
		sum = 1;
	}
	else
	{
		for(i=1;i<=n;i++)
		{
			for(j=1;j<=n;j++)
			{
				if(dp[i][j]<=k && i+j-1==sum)
				{
					now.x = i, now.y = j;
					G.push_back(now);
				}
			}
		}
		for(i=1;i<=sum;i++)
			printf("a");
	}
	while(sum<2*n-1)
	{
		sum++, ch = 'z';
		for(i=0;i<G.size();i++)
		{
			now = G[i];
			if(now.x+1<=n)
				ch = min(ch, str[now.x+1][now.y]);
			if(now.y+1<=n)
				ch = min(ch, str[now.x][now.y+1]);
		}
		printf("%c", ch);
		for(i=0;i<G.size();i++)
		{
			now = G[i];
			if(now.x+1<=n && str[now.x+1][now.y]==ch && flag[now.x+1][now.y]==0)
			{
				flag[now.x+1][now.y] = 1;
				temp.x = now.x+1, temp.y = now.y;
				F.push_back(temp);
			}
			if(now.y+1<=n && str[now.x][now.y+1]==ch && flag[now.x][now.y+1]==0)
			{
				flag[now.x][now.y+1] = 1;
				temp.x = now.x, temp.y = now.y+1;
				F.push_back(temp);
			}
		}
		G.clear();
		for(i=0;i<F.size();i++)
			G.push_back(F[i]);
		F.clear();
	}
	puts("");
	return 0;
}
/*
knweg
aengk
anegg
aaadg
jeaaa
*/