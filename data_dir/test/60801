#include<bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update> 

#define ll long long

#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) memset(ar, val, sizeof(ar))
#define fill0(ar) fill((ar), 0)
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld long double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef pair<ll, ll> ii;
typedef pair<ii, ll> iii;
typedef vector<ii> vii;
typedef vector<ll> vi;

#define INF 1000000000000000000
#define PI 3.14159265358979323846L

ll freq[100005];
ll dp[100005];
vector<ll> v[100001];

void findFact()
{
    fr(i,1,100000)
    {
        for(ll j=1; j<=sqrt(i); j++)
        {
            if(i%j==0)
            {
                v[i].pb(j);
                if(j*j!=i)
                    v[i].pb(i/j);
            }
        }
        sort(v[i].begin(),v[i].end());
    }
}

ll modexp(ll x, ll y, ll p)
{
    ll res = 1;   
    x = x % p;  
    while (y > 0)
    {
        if (y & 1)    
            res = (res*x) % p;
        y = y>>1;     
        x = (x*x) % p; 
    }
    return res;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    ll n;
    cin >> n;

    ll a[n];
    rep(i,n)
    {
        cin >> a[i];
        freq[a[i]]++;
    }

    ll mod = 1000000007;

    frr(i,100000,1)
    {
        freq[i] = freq[i]+freq[i+1];
    }

    findFact();

    dp[1] = 1;
    ll ans = 1;

    fr(i,2,100000)
    {
        if(freq[i]==0)
            break;
        ll prev = 0;
        ll lagana = 1;
        repr(j,v[i].size())
        {
            ll xx = freq[v[i][j]]-prev;
            ll times = j+1;
            ll yy = 0;
            yy = modexp(times,xx,mod);
            if(i==v[i][j])
            {
                ll zz = modexp(times-1,xx,mod);
                yy = yy-zz+mod;
                yy = yy%mod;
            }
            
            lagana = lagana * yy;
            lagana %= mod;
            prev = freq[v[i][j]];
        }

        lagana %= mod;
        dp[i] = lagana;
        ans = ans + dp[i];
        ans %= mod;
    }

    cout << ans << endl;
}