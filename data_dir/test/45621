#include<bits/stdc++.h>
using namespace std;

# define C continue;
# define R return

# define D double
# define I insert
# define ll long long
# define ld long double

# define ull unsigned long long
# define ui unsigned int

# define pb push_back
# define pf push_front

# define vi vector < int >
# define vc vector < char >
# define vs vector < string >
# define vb vector < bool >
# define vd vector < D >
# define vll vector < ll >
# define vull vector < ull >
# define vld vector < ld >
# define PQ priority_queue

# define vvi vector < vector < int > >
# define vvb vector < vector < bool > >
# define vvc vector < vector < char > >
# define vvs vector < vs >
# define vvll vector < vector < ll > >
# define vvd vector < vector < D > >
# define vvld vector < vector < ld > >

# define all(v) (v).begin() , (v).end()
# define allrev(v) (v).rbegin() , (v).rend()
# define allcomp(v) v.begin() , v.end() , comp
# define allrevcomp(v) v.rbegin() , v.rend() , comp

# define pii pair < int , int >
# define pll pair < ll , ll >
# define pld pair < ld , ld >
# define pDD pair < D , D >

# define vpld vector < pld >
# define vpii vector < pii >
# define vpll vector < pll >
# define vpDD vector < pDD >

# define vvpii vector < vector < pii > >
# define F first
# define S second
# define mp make_pair

# define dist(a,b,p,q) sqrt((p-a)*(p-a) + (q-b)*(q-b))

# define pp(n) printf("%.10Lf",n);
# define line cout<<"\n";
# define fast ios_base::sync_with_stdio(false) ; cin.tie(0) ; cout.tie(0);

string vow = "aeiou";
int month[] = {-1, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

const int dxhorse[] = {-2, -2, -1, -1, 1, 1, 2, 2};
const int dyhorse[] = {1, -1, 2, -2, 2, -2, 1, -1};

const int dx[] = { -1 , 0 , 1 , 0 } ;
const int dy[] = { 0 , 1 , 0 , -1 } ;

const ld pie = 3.1415926535897932384626 ;
const ll mod = 1e9 + 7 ;

/// Tip : If a and b are positive integers ; we may say - ceil (a/b) = 1 + floor ( (a-1)/b ) .

void bad () { cout << -1 ; line ; exit ( 0 ) ; }

vvc v ;
int n , m ;

void read ()
{
    cin >> n >> m ;

    v = vvc ( n + 2 , vc ( m + 2 , 'w' ) ) ;

    for ( int i = 1 ; i <= n ; i ++ )
    {
        for ( int j = 1 ; j <= m ; j ++ )
        {
            char c ;
            cin >> c ;

            if ( c == '#' )
                v[i][j] = 'b' ;
        }
    }
}

int cnt_all_white_row = 0 ;
int cnt_all_white_col = 0 ;

void cnt ()
{
    for ( int i = 1 ; i <= n ; i ++ )
    {
        int j = 1 ;
        for ( ; j <= m && v[i][j] == 'w' ; j ++ ) ;

        if ( j > m )
            cnt_all_white_row ++ ;
    }

    for ( int j = 1 ; j <= m ; j ++ )
    {
        int i = 1 ;
        for ( ; i <= n && v[i][j] == 'w' ; i ++ ) ;

        if ( i > n )
            cnt_all_white_col ++ ;
    }

    if ( cnt_all_white_col == 0 && cnt_all_white_row != 0 )
        bad () ;

    if ( cnt_all_white_col != 0 && cnt_all_white_row == 0 )
        bad () ;
}

void wbw ()
{
    for ( int i = 1 ; i <= n ; i ++ )
    {
        int j = 1 ;

        for ( ; j <= m && v[i][j] == 'w' ; j ++ ) ;
        for ( ; j <= m && v[i][j] == 'b' ; j ++ ) ;
        for ( ; j <= m && v[i][j] == 'w' ; j ++ ) ;

        if ( j <= m ) bad () ;
    }

    for ( int j = 1 ; j <= m ; j ++ )
    {
        int i = 1 ;

        for ( ; i <= n && v[i][j] == 'w' ; i ++ ) ;
        for ( ; i <= n && v[i][j] == 'b' ; i ++ ) ;
        for ( ; i <= n && v[i][j] == 'w' ; i ++ ) ;

        if ( i <= n ) bad () ;
    }
}

void dfs ( int x , int y )
{
    v[x][y] = 'w' ;

    for ( int k = 0 ; k < 4 ; k ++ )
    {
        int xx = x + dx[k] ;
        int yy = y + dy[k] ;

        if ( v[xx][yy] == 'b' )
            dfs ( xx , yy ) ;
    }
}

void solve ( int test_case )
{
    read () ;

    cnt () ;
    wbw () ;

    int ans = 0 ;

    for ( int i = 1 ; i <= n ; i ++ )
    {
        for ( int j = 1 ; j <= m ; j ++ )
        {
            if ( v[i][j] == 'b' )
            {
                ans ++ ;
                dfs ( i , j ) ;
            }
        }
    }

    cout << ans ; line ;
}

int main()
{fast
    int t = 1;
    // cin >> t;

    for ( int i = 1 ; i <= t ; i ++ )
    {
        solve ( i ) ;
    }

    return 0;
}
