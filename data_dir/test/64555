#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int a[500500], n;
int can[500500];

int main(){

    scanf("%d", &n);
    for (int i = 0; i < n; i++) scanf("%d", a + i);

    can[0] = can[n - 1] = 1;
    for (int i = 1; i < n - 1; i++) {
        if (a[i] == a[i - 1] || a[i] == a[i + 1]) can[i] = 1;
    }

    int ans = 0;
    for (int i = 0; i < n;) {
        if (can[i]) {
            i = i + 1;
            continue;
        }
        int j = i;
        while (j < n && !can[j]) j++;
        if ((j - i) % 2 == 1) {
            int c = (a[i]^1);
            for (int t = i; t < j; t++) a[t] = c;
            ans = max((j - i + 1) / 2, ans);
        } else {
            int c = a[i];
            ans = max((j - i) / 2, ans);
            for (int t = i, cnt = 0; t < j; t++, cnt++) {
                if (cnt < (j - i) / 2) a[t] = c^1;
                else a[t] = (c^0);
            }
        }
        i = j;
    }


    printf("%d\n", ans);
    for (int i = 0; i < n; i++) {
        if (i) printf(" ");
        printf("%d", a[i]);
    }
    printf("\n");

    return 0;
}