#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) ((x) & -(x))
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int M = 31;
const int N = 1e5 + 1;
const int lim = 1 << M;
int n, m, tmp, ans;

int a[N];
int b[N];

vec <pii> cnta[M];
vec <pii> cntb[M];

vec <int> alla[M];
vec <int> allb[M];

void input() {
    cin >> n >> tmp;
    for(int i = 1; i <= n; ++i) {
        cin >> a[i];
    }
    cin >> m >> tmp;
    for(int i = 1; i <= m; ++i) {
        cin >> b[i];
    }
    for(int i = 1; i <= n; ++i) {
        for(int j = 1; j < M; ++j) {
            alla[j].pb(a[i] & ((1 << j) - 1));
        }
    }
    for(int i = 1; i <= m; ++i) {
        for(int j = 1; j < M; ++j) {
            allb[j].pb(b[i] & ((1 << j) - 1));
        }
    }
}

int add(int a, int x) {
    if(a >= (1 << x)) {
        return a - (1 << x);
    } else {
        return a + (1 << x);
    }
}

void count(vec <int> all[M], vec <pii> cnt[M]) {
    for(int i = 1; i < M; ++i) {
        sort(all(all[i]));
        for(int a = 0; a < len(all[i]); ) {
            int b = a;
            for(; b < len(all[i]) && all[i][a] == all[i][b]; ++b);
            cnt[i].pb({all[i][a], b - a});
            a = b;
        }
    }
}

int get(int k, vec <pii> &cnt) {
    auto it = lb(all(cnt), pii(k, 0));
    if(it == cnt.end() || it->xx != k) {
        return 0;
    } else {
        return it->yy;
    }
}

int calc(int x) {
    int res = 0;
    for(pii p: cnta[x]) {
        res = max(res, p.yy + get(add(p.xx, x - 1), cntb[x]));
    }
    for(pii p: cntb[x]) {
        res = max(res, p.yy + get(add(p.xx, x - 1), cnta[x]));
    }
    return res;
}

void solve() {
    count(alla, cnta);
    count(allb, cntb);
    for(int i = 1; i < M; ++i) {
        ans = max(ans, calc(i));
    }
    cout << max(2, ans) << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
