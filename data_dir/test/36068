#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>
 
using namespace std;
using namespace __gnu_pbds;
 
#define endl '\n'
 
typedef long long ll;
typedef pair<ll, ll> pii;
typedef tree<int, null_type,less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
 
template<typename T>
static T randint(T lo, T hi){
	return uniform_int_distribution<T>(lo, hi)(rng);
}
 

 
int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
 
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
 	
	int t;
	cin >> t;

	while(t--){
		int n, k;
		string s;
		cin >> n >> k >> s;

		int total = 0;
		for(int i = 0; i < n; i++)
			total += (s[i] == '1');

		int ans = total;

		for(int i = 0; i < k; i++){
			vector<int> v;
			int ones = 0;
			for(int j = i; j < n; j += k){
				if(s[j] == '1')
					++ones;
				v.push_back(j);
			}
			
			// cout << i << " :" << endl;

			int N = v.size();
			vector<int> L(N), R(N), Z(N);

			for(int j = 0; j < N; j++){
				if(j){
					Z[j] += Z[j - 1];
					L[j] += L[j - 1];
				}

				if(s[v[j]] == '1')
					L[j]++;
				else
					Z[j]++;
			}

			for(int j = N - 1; j >= 0; j--){
				if(j != N - 1)
					R[j] += R[j + 1];
				
				if(s[v[j]] == '1')
					R[j]++;
			}

			// for(int j = 0; j < N; j++)
			// 	cout << L[j] << " \n"[j + 1 == N];
			// for(int j = 0; j < N; j++)
			// 	cout << Z[j] << " \n"[j + 1 == N];
			// for(int j = 0; j < N; j++)
			// 	cout << R[j] << " \n"[j + 1 == N];

			int mn = 0, cost = n + 5;
			for(int j = 0; j < N; j++){
				int add = Z[j];
				if(j != N - 1)
					add += R[j + 1];
				add += mn;

				// cout << j << " : " << add << endl;

				cost = min(cost, add);
				mn = min(mn, -Z[j] + L[j]);
			}

			int out = total - ones;

			// cout << out + cost << " here" << endl;
			ans = min(ans, out + cost);
		}

		cout << ans << endl;
	}
 
	return 0;
}