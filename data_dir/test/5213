#include <bits/stdc++.h>

using namespace std;

const int N = 20;

int n;
int dp[1 << 16][200];
int r[N], b[N];
char cr[N];

int main() {
  scanf("%d", &n);
  int mx_save = 0;
  for (int i = 0; i < n; ++i) mx_save += i;
  for (int i = 0; i < n; ++i) {
    char s[10];
    scanf("%s%d%d", s, r + i, b + i);
    cr[i] = s[0];
  }
  memset(dp, -1, sizeof(dp));
  dp[0][0] = 0;
  for (int vis = 0; vis < 1 << n; ++vis) for (int j = 0; j <= mx_save; ++j) {
    int c = dp[vis][j];
    if (c == -1) continue;
    int A = 0, B = 0;
    for (int i = 0; i < n; ++i) if (vis >> i & 1) {
      if (cr[i] == 'R') ++A;
      else ++B;
    }
    for (int nxt = 0; nxt < n; ++nxt) if (~vis >> nxt & 1) {
      int save_a = min(A, r[nxt]);
      int save_b = min(B, b[nxt]);
      dp[vis | (1 << nxt)][j + save_a] = max(dp[vis | (1 << nxt)][j + save_a], c + save_b);
    }
  }
  int totr = 0, totb = 0;
  for (int i = 0; i < n; ++i) totr += r[i], totb += b[i];
  int ans = ~0u >> 1;
  for (int save_a = 0; save_a <= mx_save; ++save_a) {
    int save_b = dp[(1 << n) - 1][save_a];
    if (save_b == -1) continue;
    int tmp = max(totr - save_a, totb - save_b);
    ans = min(ans, tmp);
  }
  printf("%d\n", ans + n);
  return 0;
}
