/*
 * app.cpp
 *
 *  Created on: 14.02.2015
 *      Author: Eran
 */

#include <bits/stdc++.h>
#include <ext/rope>

using namespace std;
using namespace __gnu_cxx;

#define stdio true
#define input "windows.in"
#define output "windows.out"

const int maxn = 500000;
const int logn = 16;
const long long mod = 1000000007;
const long long l_inf = (long long) 4e18;

void change(int pos, vector<int> &arr) {
	for (int i = pos; i < (int) arr.size(); i = i | (i + 1))
		arr[i]++;
}

int get(int pos, vector<int> &arr) {
	int sum = 0;
	for (int i = pos; i >= 0; i = (i & (i + 1)) - 1)
		sum += arr[i];
	return sum;
}

int main() {
	ios_base::sync_with_stdio(0);
	srand(time(NULL));
	cin.tie(nullptr);
	cout.precision(10);
	cout << fixed;
	if (!stdio) {
		freopen(input, "r", stdin);
		freopen(output, "w", stdout);
	}
	int w, h, k, maxW, maxH;
	cin >> w >> h >> k;
	vector<int> cutW(w + 1), cutH(h + 1);
	set<pair<int, int> > W, H;
	W.insert(make_pair(-w, 1));
	H.insert(make_pair(-h, 1));
	maxW = w;
	maxH = h;
	change(w, cutW);
	change(h, cutH);
	for (int i = 0; i < k; i++) {
		char t;
		int pos;
		cin >> t >> pos;
		if (t == 'V') {
			int l, r, L, R;
			int val = get(pos, cutW);
			l = 0, r = pos;
			while (l != r) {
				int mid = (l + r) >> 1;
				get(mid, cutW) < val ? l = mid + 1 : r = mid;
			}
			L = l;
			l = pos, r = w;
			while (l != r) {
				int mid = (l + r) >> 1;
				get(mid + 1, cutW) == val ? l = mid + 1 : r = mid;
			}
			R = r + 1;
			int len = R - L;
			W.erase(make_pair(-len, L + 1));
			int len1 = pos - L, len2 = R - pos;
			W.insert(make_pair(-len1, L + 1));
			W.insert(make_pair(-len2, pos + 1));
			maxW = -(W.begin()->first);
			change(pos, cutW);
		} else {
			int l, r, L, R;
			int val = get(pos, cutH);
			l = 0, r = pos;
			while (l != r) {
				int mid = (l + r) >> 1;
				get(mid, cutH) < val ? l = mid + 1 : r = mid;
			}
			L = l;
			l = pos, r = h;
			while (l != r) {
				int mid = (l + r) >> 1;
				get(mid + 1, cutH) == val ? l = mid + 1 : r = mid;
			}
			R = r + 1;
			int len = R - L;
			H.erase(make_pair(-len, L + 1));
			int len1 = pos - L, len2 = R - pos;
			H.insert(make_pair(-len1, L + 1));
			H.insert(make_pair(-len2, pos + 1));
			maxH = -(H.begin()->first);
			change(pos, cutH);
		}
		cout << maxW * 1ll * maxH << endl;
	}
	return 0;
}

