#include <bits/stdc++.h>
#define all(x) (x).begin(), (x).end()
const bool debug = 0;
int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0); std::cerr.tie(0); std::cout.tie(0);
    int n, m;
    while (std::cin >> n >> m) {
        int maxSize = 0;
        // Input edges:
        std::vector<std::vector<int>> next(n);
        for (int i = 0, u, v; i < m; ++i) {
            std::cin >> u >> v;
            --u, --v;
            next[u].push_back(v);
        }
        auto dist = [n](int f, int s) {
            return s >= f ? s - f : n + s - f;
        };
        // Sort edges and search maxSize:
        for (int u = 0; u < n; ++u) {
            std::sort(all(next[u]), [&](int lhs, int rhs) {
                return dist(u, lhs) < dist(u, rhs);
            });
            maxSize = std::max(maxSize, (int)next[u].size());
        }
        if (maxSize == 1) {
            for (int s = 0; s < n; ++s) {
                int cnt = 0;
                for (int u = 0; u < n; ++u) {
                    if (next[u].empty()) { continue; }
                    cnt = std::max(cnt, dist(s,u) + dist(u, next[u][0]));
                    if (debug) {
                        if (s == 2) {
                            std::cout << "u = " << u+1 << ", cnt = " << dist(s,u) + dist(u, next[u][0]) << std::endl;
                        }
                    }
                }
                std::cout << cnt << ' ';
            }
            std::cout << std::endl;
            // 39-->33
            // 38-->32
            // 32+50-38=44
            // 
        } else {
            // Erase some edges:
            for (int u = 0; u < n; ++u) {
                next[u].resize(std::max((int)next[u].size() - maxSize + 2, 0));
            }
            for (int s = 0; s < n; ++s) {
                int cnt = 0;
                for (int u = 0; u < n; ++u) {
                    if (next[u].size() == 1u && u != s) {
                        cnt = std::max(cnt, -dist(u, s) + dist(u, next[u][0]));
                    }
                    if (next[u].size() == 2u) {
                        cnt = std::max(cnt, dist(s, u) + dist(u, next[u][0]));
                    }
                }
                std::cout << cnt + (maxSize - 1) * n << '\n';
            }
            std::cout << std::endl;
        }
    }
    return 0;
}