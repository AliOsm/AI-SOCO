#include <bits/stdc++.h>
using namespace std;
typedef double db;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
#define dd(x) cout << #x << " = " << x << ", "
#define de(x) cout << #x << " = " << x << endl
#define rep(i,a,b) for(int i=(a);i<(b);++i)
#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define fi first
#define se second
//INF = 1 061 109 567 ; INF + INF = 2 122 219 134 ;
//LINF = 4 557 430 888 798 830 399 ; LINF + LINF = 9 114 861 777 597 660 798 ;
const int INF = 0x3f3f3f3f;     // -INF: 0xc0   abs(-INF) = INF + 1
const ll LINF = 0x3f3f3f3f3f3f3f3f;
const int MOD = 1e9+7;     // when MOD = 1e9+7, inv2 = 500000004
const int N = 1e6+7;

// -------------------------------------------------- 变量 -------------------------------------------------- //

char buf[N];

// -------------------------------------------------- 函数 -------------------------------------------------- //

#define ss stringstream

ll parseOr(ss &s);

ll parseInt(ss &s) {
    ll res; s >> res; return res;
}

ll parseBracket(ss &s) {
    if (s.peek() == '(') {
        s.get();
        ll res = parseOr(s);
        s.get();
        return res;
    }
    return parseInt(s);
}

ll parseSign(ss &s) {
    if (s.peek() == '+') { s.get(); return parseSign(s); }
    if (s.peek() == '-') { s.get(); return -parseSign(s); }
    if (s.peek() == '~') { s.get(); return ~parseSign(s); }
    return parseBracket(s);
}

ll parseMul(ss &s) {
    ll res = parseSign(s);
    if (s.peek() == '*') s.get(), res *= parseMul(s);
    if (s.peek() == '/') s.get(), res /= parseMul(s);
    return res;
}

ll parseAdd(ss &s) {
    ll res = parseMul(s);
    if (s.peek() == '+') s.get(), res += parseAdd(s);
    if (s.peek() == '-') s.get(), res -= parseAdd(s);
    return res;
}

ll parseAnd(ss &s) {
    ll res = parseAdd(s);
    if (s.peek() == '&') s.get(), res &= parseAnd(s);
    return res;
}

ll parseXor(ss &s) {
    ll res = parseAnd(s);
    if (s.peek() == '^') s.get(), res ^= parseXor(s);
    return res;
}

ll parseOr(ss &s) {
    ll res = parseXor(s);
    if (s.peek() == '|') s.get(), res |= parseOr(s);
    return res;
}

ll eval(string str) {
    ss s(str);
    return parseOr(s);
}

void Init() {
}

int Solve() {
    string str(buf);
    str = "1*" + str + "*1";
    ll ans = eval(str);
    rep(i, 0, sz(str)) if (str[i] == '*') {
        rep(j, i+1, sz(str)) if (str[j] == '*') {
            ans = max(ans, eval(str.substr(0, i+1)
                                + "("
                                + str.substr(i+1, j-i-1)
                                + ")"
                                + str.substr(j, sz(str)-j)));
        }
    }
    return printf("%I64d\n", ans);
}

// -------------------------------------------------- main -------------------------------------------------- //

int main ()
{
    //freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);

    //Pre();
    //int t; scanf("%d", &t); while (t--) {
    while (~scanf("%s", buf)) {
    //while(fgets(s, N, stdin)) {   // 注意 fgets 会读入换行符
        //if (n == 0) break;
        //static int kase = 0; printf("Case %d: ", ++kase);
        Init();
        Solve();
        //if (t) puts("");
    }
    return 0;
}
