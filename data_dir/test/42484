#include <bits/stdc++.h>

#define pb push_back
#define all(x) (x).begin(), (x).end()

#ifdef KAZAR
  #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
  #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a < b) a = b;}
template<class T> inline void umin(T &a,T b){if(a > b) a = b;}
template<class T> inline T abs(T a){return a > 0 ? a : -a;}

typedef long long ll;
typedef pair<int, int> ii;
typedef vector<int> vi;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 55;

int a[N], b[N], c[N];

map<ii, int> have;

void gen(int i,int n,int ab,int bc,int sa) {
  if (i == n) {
    if (have.count({ab, bc})) {
      umax(have[{ab, bc}], sa);
    } else {
      have[{ab, bc}] = sa;
    }
    return;
  }
  gen(i + 1, n, ab + a[i] - b[i], bc + b[i], sa + a[i]);
  gen(i + 1, n, ab + a[i], bc - c[i], sa + a[i]);
  gen(i + 1, n, ab - b[i], bc + b[i] - c[i], sa);
}

bool found = false;
int best;
int ansAB, ansBC, ansSA;

void calc(int i,int n,int ab,int bc,int sa) {
  if (i == n) {
    if (have.count({-ab, -bc})) {
      int tmp = have[{-ab, -bc}] + sa;
      if (!found || tmp > best) {
        best = tmp;
        ansAB = ab;
        ansBC = bc;
        ansSA = sa;
        found = true;
      }
    }
    return;
  }
  calc(i + 1, n, ab + a[i] - b[i], bc + b[i], sa + a[i]);
  calc(i + 1, n, ab + a[i], bc - c[i], sa + a[i]);
  calc(i + 1, n, ab - b[i], bc + b[i] - c[i], sa);
}

bool found_out;//funny coincidence

string was[N];

void out(int i,int l,int r,int ab,int bc,int sa,int hab,int hbc,int hsa) {
  if (found_out)
    return;
  if (i == r) {
    if (ab == hab && bc == hbc && sa == hsa) {
      for (int x = l; x < r; x++) {
        printf("%s\n", was[x].c_str());
      }
      found_out = true;
    }
    return;
  }
  was[i] = "LM";
  out(i + 1, l, r, ab + a[i] - b[i], bc + b[i], sa + a[i], hab, hbc, hsa);
  was[i] = "LW";
  out(i + 1, l, r, ab + a[i], bc - c[i], sa + a[i], hab, hbc, hsa);
  was[i] = "MW";
  out(i + 1, l, r, ab - b[i], bc + b[i] - c[i], sa, hab, hbc, hsa);
}

int main(){

#ifdef KAZAR
  freopen("f.input","r",stdin);
  freopen("f.output","w",stdout);
  freopen("error","w",stderr);
#endif

  int n = read();

  for (int i = 0; i < n; i++) {
    a[i] = read();
    b[i] = read();
    c[i] = read();
  }

  int m = n / 2;

  gen(0, m, 0, 0, 0);
  calc(m, n, 0, 0, 0);

  eprintf("%d %d\n", ansAB, ansBC);
  eprintf("best = %d\n", best);

  if (!found) {
    puts("Impossible");
  } else {
    found_out = false;
    out(0, 0, m, 0, 0, 0, -ansAB, -ansBC, have[{-ansAB, -ansBC}]);
    assert(found_out);
    found_out = false;
    out(m, m, n, 0, 0, 0, ansAB, ansBC, ansSA);
    assert(found_out);
  }

  return 0;
}
