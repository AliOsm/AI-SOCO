#include <bits/stdc++.h>
using namespace std;
#define sc(x)            scanf("%d",&x)
#define scc(x)           scanf("%c",&x)
#define scl(x)           scanf("%lld",&x)
#define sz(v)	     	(v.size())
#define mem(v, d)		memset(v, d, sizeof(v))
#define oo				2000000100
#define OO				4000000000000000100
#define PI 3.14159265
#define S second
#define F first
typedef unsigned int uint;
typedef long long ll;
//-----------------------------------------------------
const int N = 100100;
const ll MOD = 998244353;
const double EBS = 1e-7;

int dX[] = {0,0,1,-1};
int dY[] = {1,-1,0,0};

//int GCD(ll num,ll ones) { return !ones ? num : GCD(ones,num%ones); }
//ll lcm(ll a, ll b) { return (a / GCD(a, b)) * b; }
//double Len(ll x,ll y,ll X,ll Y) { return sqrt((X-x)*(X-x)+(Y-y)*(Y-y)); }
/*ll fastP(ll b,ll p)
{
    if(p==0) return 1;
    else if(p==1) return b;
    ll a = fastP(b,p/2)%MOD;
    if(p%2) return (((a*a)%MOD)*b)%MOD;
    else return (a*a)%MOD;
}*/
//----------------- ------   -------
int n,cnt[N],t[N],par[N]; ll T,ANS;
vector < pair<int,int> >adj[N];
ll bit1[10*N],bit2[10*N],extra[10*N],ans[N],mx[N];
void Update(int idx,int val)
{
    ll tt = idx;
    for(;idx<10*N;idx+=(idx&-idx))
        bit1[idx]+=tt*val,bit2[idx]+=val;
}
ll Get1(int idx)
{
    ll sum = 0;
    for(;idx;idx-=(idx&-idx))
        sum+=bit1[idx];
    return sum;
}
ll Get2(int idx)
{
    ll sum = 0;
    for(;idx;idx-=(idx&-idx))
        sum+=bit2[idx];
    return sum;
}
int BS(ll curT)
{
    int l = 0,r = 1e6,mid;
    while(l<r)
    {
        mid = l+(r-l+1)/2;
        ll Cost = Get1(mid);
        if(Cost<=curT) l = mid;
        else r = mid - 1;
    }
    return l;
}
ll dfs(int cur,ll curT)
{
    Update(t[cur],cnt[cur]);
    extra[t[cur]]+=cnt[cur];

    int l = BS(curT);

    ans[cur] = Get2(l);
    ll exT = curT - Get1(l);
    ans[cur]+=min(extra[l+1],exT/(l+1));

    priority_queue<ll>pq;
    for(auto x:adj[cur])
        if(x.first != par[cur])
            pq.push(dfs(x.first,curT-2LL*x.second));

    Update(t[cur],-cnt[cur]);
    extra[t[cur]]-=cnt[cur];

    if(!pq.empty() && cur != 1) pq.pop();
    pq.push(ans[cur]);
    ll ret = pq.top();
    return pq.top();

}
int main()
{
    sc(n); scl(T);
    for(int i = 1;i<=n;++i) sc(cnt[i]);
    for(int i = 1;i<=n;++i) sc(t[i]);
    for(int i = 2;i<=n;++i)
    {
        int p,c; sc(p); sc(c);
        par[i] = p;
        adj[i].push_back({p,c});
        adj[p].push_back({i,c});
    }

    cout << dfs(1,T) << endl;





    return 0;
}
