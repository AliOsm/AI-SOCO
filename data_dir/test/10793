#include <iostream>
#include <vector>

using namespace std;

typedef vector<int> int_vector;
typedef long long ll;

int min(int a, int b) {
	return (a < b ? a : b);
}

void dfs(int from, vector< int_vector > & graph, vector<char> & used)
{
	used[from] = true;

	for (int to : graph[from])
	{
		if (used[to]) continue;

 		dfs(to, graph, used);
	}		
}

int main() {

	int n, t;
	cin >> n >> t;
	
	--t;

	int_vector a(n - 1, 0);
	for (int i = 0; i < n - 1; ++i)
		cin >> a[i];

	vector< int_vector > graph(n, int_vector());
	for (int i = 0; i < n - 1; ++i) 
	{
		int from = i;
		int to = i + a[i];
		
		graph[from].push_back(to);
	}

	vector<char> used(n, false);

	dfs(0, graph, used);

	cout << (used[t] ? "YES" : "NO") << endl;

	return 0;
}