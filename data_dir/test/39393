 
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii> vii;

 
struct pt
{
    ll x, y ;
};
 
ll dist( pt a, pt b) 
{ 
    return std::abs(a.x - b.x) + std::abs(a.y - b.y); 
} 

struct cmp_pt
{
    bool operator()(pt a, pt b)const{
        ll mx_a = std::max(a.x, a.y);
        ll mx_b = std::max(b.x, b.y);
        if (mx_a != mx_b) return mx_a > mx_b ;
        
        if (a.x != b.x ) return a.x < b.x ; 
        return a.y > b.y ;
        //return std::max(a.x,a.y) > std::max(b.x,b.y) || std::max(a.x,a.y) == std::max(b.x,b.y) && a.x < b.x ;
    }
};

int solve()
{
    vector<pt> p;
    int n;
    scanf("%d",&n);
    p.resize(n);
    for(int i = 0; i < n; ++i)scanf("%lld%lld", &p[i].x, &p[i].y);
    
    sort(p.begin(), p.end(), cmp_pt());
    
    //for(int i = 0; i < n; ++i)printf("{ %lld %lld } ", p[i].x, p[i].y);
    
  //  printf("\n");
    
    ll ans_l = 0, ans_r = 0;
    
    pt p_l, p_r;
    
    for(int i = 0, j = 0; i < n; i = j)
    {
        
        while(j < n && std::max(p[i].x, p[i].y) == std::max(p[j].x, p[j].y) )
            ++j;
        
        
        ll s  = 0 ;
        
        for(int k = i + 1 ; k < j; ++k)
        {
            s += dist(p[k], p[k-1]);
        }
        
        if (i){
            ll new_ans_l = s + std::min( ans_r + dist (p[ j - 1 ], p_r ) , ans_l + dist( p[ j - 1 ], p_l ) );
            ll new_ans_r = s + std::min( ans_l + dist(p[i], p_l),  ans_r + dist(p[i], p_r) ) ;
            
            ans_l = new_ans_l;
            ans_r = new_ans_r;
            
            p_l = p[i];
            p_r = p[j-1];
        } else {
            ans_l = ans_r = s;
            p_l = p[i];
            p_r = p[j-1];
        }
        
   //     printf("s: %lld ans_l: %lld  ans_r: %lld   p_l: { %lld, %lld}, p_r: { %lld %lld } \n",s, ans_l, ans_r, p_l.x, p_l.y, p_r.x, p_r.y);
        
    }
    
    pt pz = {0,0};
    
    ll ans = std::min(ans_l + dist(p_l, pz), ans_r  + dist(p_r, pz));
    
    printf("%lld\n", ans);
    return 0;
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r",stdin);
    freopen("output.txt", "w", stdout);
#endif 
   ::std::ios::sync_with_stdio(false); ::std::cin.tie(0); ::std::cout.tie(0);
   
   int t = 1;
 //  scanf("%d",&t);
   while(t--)
        solve();
}