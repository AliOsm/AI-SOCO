#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("O3")
#pragma optimize("SEX_ON_THE_BEACH")
#include<bits/stdc++.h>

using ll = long long int;
using ull = unsigned long long int;
using dd = double;
using ldd = long double;

namespace Hashes {
    const int mod197 = 1e9 + 7;
    const int mod199 = 1e9 + 9;
    const int modfft = 998244353;
    int MOD = mod197;

    template<typename T = int>
    struct Hash {
        T me, mod;

        Hash() {}
        Hash(T _me, T _mod = MOD) { me = _me, mod = _mod; if (me >= mod) me %= mod; }

        Hash operator+ (Hash to) {
            to.me += me;
            if (to.me >= to.mod)
                to.me -= to.mod;
            return to;
        }
        Hash operator- (Hash to) {
            to.me -= me;
            to.me *= -1;
            if (to.me < 0)
                to.me += to.mod;
            return to;
        }
        Hash operator* (Hash to) {
            to.me *= me;
            to.me %= to.mod;
            return to;
        }
        Hash& operator+= (Hash to) {
            me += to.me;
            if (me >= mod)
                me -= mod;
            return *this;
        }
        Hash& operator-= (Hash to) {
            me -= to.me;
            if (me < 0)
                me += mod;
            return *this;
        }
        Hash& operator*= (Hash to) {
            me *= to.me;
            me %= mod;
            return *this;
        }
        bool operator==(Hash to) {
            return me == to.me;
        }
        T operator*() {
            return me;
        }
    };
}

namespace someUsefull {
    template<typename T1, typename T2>
    inline void checkMin(T1& a, T2 b) {
        if (a > b)
            a = b;
    }

    template<typename T1, typename T2>
    inline void checkMax(T1& a, T2 b) {
        if (a < b)
            a = b;
    }
}

//name spaces
using namespace std;
using namespace Hashes;
using namespace someUsefull;
//end of name spaces

//defines
#define ff first
#define ss second
#define all(x) (x).begin(), (x).end()

#define NO cout << "NO" << '\n';
#define No cout << "No" << '\n';
#define YES cout << "YES" << '\n';
#define Yes cout << "Yes" << '\n';
//end of defines

//debug defines
#ifdef HOME
#define debug(x) cout << #x << " " << x << endl;
#define debug_p(x) cout << #x << " " << x.ff << " " << x.ss << endl;
#define debug_v(x) {cout << #x << " "; for (auto ioi : x) cout << ioi << " "; cout << endl;}
#define debug_vp(x) {cout << #x << " "; for (auto ioi : x) cout << '[' << ioi.ff << " " << ioi.ss << ']'; cout << endl;}
#define debug_v_v(x) {cout << #x << "/*\n"; for (auto ioi : x) { for (auto ioi2 : ioi) cout << ioi2 << " "; cout << '\n';} cout << "*/" << #x << endl;}
int jjj;
#define wait() cin >> jjj;
#define PO cout << "POMELO" << endl;
#define OL cout << "OLIVA" << endl;
#define gen_clock(x) ll x = clock(); cout << "Clock " << #x << " created" << endl;
#define check_clock(x) cout << "Time spent in " << #x << ": " << clock() - x << endl; x = clock();
#define reset_clock(x) x = clock();
#define say(x) cout << x << endl;
#else
#define debug(x) 0;
#define debug_p(x) 0;
#define debug_v(x) 0;
#define debug_vp(x) 0;
#define debug_v_v(x) 0;
#define wait() 0;
#define PO 0;
#define OL 0;
#define gen_clock(x) 0;
#define check_clock(x) 0;
#define reset_clock(x) 0;
#define say(x) 0;
#endif // HOME
//end of debug defines

ll mod = mod197;
ll p = 137;
ll rev;
int _size = 1 << 20;
vector<ll> pw;

vector<pair<pair<char, char>, pair<int, ll>>> tree(_size << 1, {{0, 0}, {0, 0}});

using pc = pair<pair<char, char>, pair<int, ll>>;
pc mer(pc a, pc b) {
    if (a.ss.ff == 0 || b.ss.ff == 0)
        return (a.ss.ff == 0 ? b : a);
    if (a.ff.ss == '1' && b.ff.ff == '1') {
        debug_p(a.ff);
        debug_p(a.ss);
        debug_p(b.ff);
        debug_p(b.ss);
        ll h = a.ss.ss - pw[a.ss.ff - 1] * '1';
        h %= mod;
        if (h < 0)
            h += mod;
        debug(h);
        ll h2 = b.ss.ss - '1';
        h2 %= mod;
        if (h2 < 0)
            h2 += mod;
        debug(h2);
        h2 *= rev;
        h2 %= mod;
        debug(h2);
        h += h2 * pw[a.ss.ff - 1];
        h %= mod;
        return {{a.ff.ff, b.ff.ss}, {a.ss.ff + b.ss.ff - 2, h}};
    }
    return {{a.ff.ff, b.ff.ss}, {a.ss.ff + b.ss.ff, (a.ss.ss + b.ss.ss * pw[a.ss.ff]) % mod}};
}

pc get(int v, int l, int r, int fl, int fr) {
    if (r <= l || r <= fl || fr <= l) {
        return {{0, 0}, {0, 0}};
    }
    if (fl <= l && r <= fr)
        return tree[v];
    return mer(get(v << 1, l, (r + l) >> 1, fl, fr), get(v << 1 | 1, (r + l) >> 1, r, fl, fr));
}

ll bp(ll a, ll b) {
    ll ans = 1;
    while (b) {
        if (b & 1)
            ans = ans * a % mod;
        a = a * a % mod;
        b >>= 1;
    }
    return ans;
}

void build(string s) {
    rev = bp(p, mod - 2);
    pw.resize(1e6);
    pw[0] = 1;
    for (int i = 1; i < pw.size(); ++i)
        pw[i] = pw[i - 1] * p % mod;
    for (int i = 0; i < s.size(); ++i) {
        tree[i+_size] = {{s[i], s[i]}, {1, s[i]}};
    }
    for (int i = _size - 1; i > 0; --i)
        tree[i] = mer(tree[i << 1], tree[i << 1 | 1]);
}

void solve(int test) {
    int n;
    cin >> n;
    string s;
    cin >> s;
    int q;
    cin >> q;
    vector<int> cnt(n);
    for (int i = 0; i < n; ++i) {
        cnt[i] = (s[i] == '1') + (i ? cnt[i - 1] : 0);
    }
    build(s);
    for (int i = 0; i < q; ++i) {
        int l, r, len;
        cin >> l >> r >> len;
        --l;
        --r;
        if (cnt[l + len - 1] - (l ? cnt[l - 1] : 0) != cnt[r + len - 1] - (r ? cnt[r - 1] : 0)) {
            NO;
            continue;
        }
        if (len <= 2) {
            bool g = 1;
            for (int i = 0; i < len; ++i) {
                if (s[l + i] != s[r + i])
                    g = 0;
            }
            if (g) {
                YES;
            } else {
                NO;
            }
            continue;
        }
        pc a = get(1, 0, _size, l, l + len);
        pc b = get(1, 0, _size, r, r + len);
        debug_p(a.ff);
        debug_p(a.ss);
        debug_p(b.ff);
        debug_p(b.ss);
        if (get(1, 0, _size, l, l + len).ss != get(1, 0, _size, r, r + len).ss) {
            NO;
        } else {
            YES;
        }
    }
}


signed main() {
    ios_base::sync_with_stdio(false);
    cout.tie(0);
    cin.tie(0);
    int t = 1;
    //cin >> t;
    for (int i = 0; i < t; ++i) {
        solve(i);
    }
    return 0;

}
/*
*/
