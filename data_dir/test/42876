/*input
6 2 3 3
7 10 50 12 1 8
*/
#ifdef UncleGrandpa
#include <prettyprint.hpp>
#endif
#include <bits/stdc++.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define int long long
#define loop(i,l,r) for(int i=(l); i<=(r); i++)
#define rloop(i,l,r) for(int i=(l); i>=(r); i--)
#define debug(x...) {cout << "[" << #x << "] ="; _print(x);}
#define fi first
#define se second
void _print() {cout << endl;}
template<typename T, typename... Ts> void _print(const T& value, const Ts&... values) {cout << ' ' << value; _print(values...);}
template<typename T, typename... Ts> void print(const T& value, const Ts&... values) {cout << value; _print(values...);}
// change cout to cerr for debug in crash
// for struct, can write print operator to use print() (even with SegTree)
// const int N =;

vector<pair<int, int> > a;
int n, A, B, k;

int cal(int X) {
	X %= (A + B);
	if (X == 0) X += (A + B);
	return (X - 1) / A;
}

signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n >> A >> B >> k;
	loop(i, 0, n - 1) {
		int t; cin >> t; a.push_back({t, cal(t)});
	}
	sort(a.begin(), a.end(), [&](pair<int, int> X, pair<int, int> Y) {
		return X.se < Y.se;
	});
	// for (auto it : a) cout << it << endl;
	int ans = 0;
	for (auto it : a) {
		if (k >= it.se) {
			k -= it.se;
			ans++;
		}
	}
	cout << ans << endl;
}