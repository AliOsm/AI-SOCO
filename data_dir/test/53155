#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define MOD 1000000007
ll power(ll a,ll b, ll m=MOD)
{
    ll res=1;
    while(b>0)
    {
        if(b&1)
            res=(res*a)%m;
        a=(a*a)%m;
        b>>=1;
    }
    return res;
}
ll inverse(ll a,ll m=MOD)
{
    return power(a,m-2,m);
}
#define INFl 1e18
#define vi vector<int>
#define vvi vector<vi>
#define vl vector<long long>
#define ii pair<int,int>
#define pll pair<ll,ll>
#define vii vector<ii>
#define F first
#define S second
#define forl(i,n) for(int i=0;i<n;i++)
#define fore(i,n) for(int i=1;i<=n;i++)
#define rforl(i,n)  for(int i=n-1;i>=0;i--)
#define rfore(i,n)  for(int i=n;i>=1;i--)
#define INF 1000000009
#define gcd(a,b) __gcd(a,b)
#define all(x)  x.begin(),x.end()
#define mp make_pair
#define pb push_back
#define print(x)    for(auto it=x.begin();it!=x.end();it++) cout<<*it<<' '; cout<<endl;
#define printii(x)  for(auto it=x.begin();it!=x.end();it++) cout<<it->F<<' '<<it->S<<'\n'; 
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
vi computeLPS(string s)
{
    int n=s.length();
    vi LPS(n);
    LPS[0]=0;
    int len=0;
    for(int i=1;i<n;i++)
    {   
        while(len>0 && s[i]!=s[len])
        {
            len=LPS[len-1];
        }
        if(s[i]==s[len])
            len++;
        LPS[i]=len;
    }
    return LPS;
}
vi Find(string s,string t)
{
    vi LPS=computeLPS(t);
    int n=s.length();
    int m=t.length();
    vi res;
    for(int i=0,len=0;i<n;i++)
    {
        while(len>0 && s[i]!=t[len])
            len=LPS[len-1];
        if(s[i]==t[len])
            len++;
        if(len==m)
        {
            res.pb(i-len+1);
            len=LPS[len-1];
        }
    }
    return res;
}
int main()
{
    string s,t;
    cin>>s>>t;
    vi a=Find(s,t);
    int n=s.size();
    int m=a.size();
    int len=t.size();
    vl dp(n+1,0);
    vl sum(n+1,0);
    dp[n]=1;
    sum[n]=1;
    for(int i=n-1;i>=0;i--)
    {
        ll temp=dp[i+1];
        int pos=lower_bound(all(a),i)-a.begin();
        if(pos<m)
        {
            pos=a[pos]+len;
            temp+=sum[pos];
        }
        temp%=MOD;
        dp[i]=temp;
        sum[i]=sum[i+1]+dp[i];
        sum[i]%=MOD;
    }
    cout<<(MOD+dp[0]-1)%MOD<<endl;
}