#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <queue>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <complex>

#define pb push_back
#define mp make_pair

#define f first
#define s second

using namespace std;

typedef pair<int, int> pii;
typedef long long ll;
typedef long double ld;

const int N = (int) 1e6 + 7;
const int MOD = (int) 1e9 + 7;

const int MAGIC = 200;

int bin(int a, int b, int mod) {
  int res = 1;
  while (b) {
    if (b & 1) res = res * 1ll * a % mod;
    b >>= 1;
    a = a * 1ll * a % mod;
  }
  return res;
}

int phi(int x) {
  int res = x;
  for (int i = 2; i * i <= x; i++) {
    if (x % i == 0) {
      while (x % i == 0) x /= i;
      res -= res / i;
    }
  }
  if (x > 1) res -= res / x;
  return res;
}

int getOrder(int a, int Q) {
  int p = phi(Q);
  int ans = p;
  for (int d = 1; d * d <= p; d++) {
    if (p % d == 0) {
      if (bin(a, d, Q) == 1)
        ans = min(ans, d);
      if (bin(a, p / d, Q) == 1)
        ans = min(ans, p / d);
      // p / d
    }
  }
  return ans;
}

int fact[N];
int inv[N];

int cnk(int n, int k, int mod) {
  int res = fact[n];
  res = res * 1ll * bin(fact[k], mod - 2, mod) % mod;
  res = res * 1ll * bin(fact[n - k], mod - 2, mod) % mod;
  return res;
}

int diff[N];

int main() {
  #ifdef LOCAL
  freopen("in.txt", "r", stdin);
  #else
  //freopen(".in", "r", stdin);
  //freopen(".out", "w", stdout);
  #endif

  

  int n, m, a, Q;
  cin >> n >> m >> a >> Q;
  
  int mod = getOrder(a, Q);
  
  fact[0] = 1;
  for (int i = 1; i < N; i++) {
    fact[i] = fact[i - 1] * 1ll * i % mod;
  }

  for (int i = 0; i < n; i++) {
    diff[i] = cnk(m, i, mod);
    //cout<<diff[i]<<' ';
  }
  //cout<<endl;
  //reverse(diff, diff + n);
  int sum = 0;
  vector<int> res;
  for (int i = 0; i < n; i++) {
    sum = (sum + diff[i]) % mod;
    res.pb(bin(a, sum, Q));
  }
  reverse(res.begin(),res.end());
  for (auto it : res)
    cout << it << ' ';

  return 0;
}