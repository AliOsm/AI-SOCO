
// ~/SolverToBe/Developers/Corvus
// ~/sudo apt-get verdict Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h> 
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <functional>
#include <assert.h>
#include <complex>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

const int N = 1000005, M = 1005;
const ll MOD = 1e9 + 7;
const double eps = 1e-9;
const double PI = acos(-1.0);

int n;
char s[N];
vector<int> v[3];

int getAfter(int l, char c) {
	return v[c-'a'][lower_bound(v[c - 'a'].begin(), v[c - 'a'].end(), l) - v[c - 'a'].begin()];
}

int getBefore(int r, int c) {
	int x = upper_bound(v[c - 'a'].begin(), v[c - 'a'].end(), r) - v[c - 'a'].begin();
	x--;
	if (x < 0)
		return -1;
	return v[c - 'a'][x];
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif
	scanf("%s", s);
	n = strlen(s);
	for (int i = 0; i < n; i++)
		v[s[i] - 'a'].push_back(i);
	int l = 0, r = n - 1;
	string a = "", b = "";
	while (l <= r) {
		if (s[l] == s[r]) {
			a += s[l];
			if (l != r) b += s[r];
			l++, r--;
		}
		else {
			int x = getAfter(l, s[r]);
			int y = getBefore(r, s[l]);
			if (y != -1 && y + 1 == r)
				r = y;
			else if (l + 1 == x)
				l = x;
			else l++, r--;
		}
	}
	if (a.size() + b.size() < n / 2) {
		puts("IMPOSSIBLE");
		return 0;
	}
	string ans = a;
	reverse(b.begin(), b.end());
	ans += b;
	puts(ans.c_str());
	return 0;
}