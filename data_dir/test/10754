#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>

using namespace std;

#define ABS(a) ((a>0)?a:-(a))
#define MIN(a,b) ((a<b)?(a):(b))
#define MAX(a,b) ((a<b)?(b):(a))
#define FOR(i,a,n) for (int i=(a);i<(n);++i)
#define FI(i,n) for (int i=0; i<(n); ++i)
#define pnt pair <int, int>
#define mp make_pair
#define PI 3.14159265358979
#define MEMS(a,b) memset(a,b,sizeof(a))
#define LL long long
#define U unsigned
int was[110];
int a[110][110];
int olda[110][110];
int oldwas[110];
int cnt[110];
int oldcnt[110];
int n,m;
int it;
bool dfs(int v)
{
	if (was[v]==it)
		return 0;
	was[v]=it;
	cnt[v]^=1;
	FOR(i,0,n)
		if (a[v][i]!=-1)
		{
			a[v][i]^=1;
			a[i][v]^=1;
		}
	bool f=true;
	FOR(i,0,n)
	{
		if (a[v][i]==0)
			f&=dfs(i);
		if (!f)
			break;
	}
	return f;
}
int main()
{
#ifdef Fcdkbear
    freopen("in.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    double beg=clock();

#endif

	scanf("%d%d",&n,&m);
	MEMS(a,-1);
	FOR(i,0,m)
	{
		int v1,v2,c;
		scanf("%d%d%d",&v1,&v2,&c);
		a[v1-1][v2-1]=c;
		a[v2-1][v1-1]=c;
	}
	it=0;
	FOR(i,0,n)
		FOR(j,0,n)
			if (a[i][j]==0)
			{
				it++;
				FOR(i1,0,n)
				{
					oldwas[i1]=was[i1];
					oldcnt[i1]=cnt[i1];
					FOR(j1,0,n)
						olda[i1][j1]=a[i1][j1];
				}
				bool f=dfs(i);
				if (!f)
				{
					FOR(i1,0,n)
					{
						was[i1]=oldwas[i1];
						cnt[i1]=oldcnt[i1];
						FOR(j1,0,n)
							a[i1][j1]=olda[i1][j1];
					}
					f=dfs(j);
					if (!f)
					{
						printf("Impossible\n");
						return 0;
					}
				}
			}
	int cntt=0;
	FOR(i,0,n)
		cntt+=(cnt[i]!=0);
	printf("%d\n",cntt);
	FOR(i,0,n)
	{
		if (cnt[i])
		{
			printf("%d",i+1);
			cntt--;
			if (cntt)
				printf(" ");
			else
				printf("\n");
		}
	}
#ifdef Fcdkbear
    double end=clock();
    fprintf(stderr,"*** Total time = %.3lf ***\n",(end-beg)/CLOCKS_PER_SEC);
#endif
	return 0;
}