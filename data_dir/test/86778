
#include<bits/stdc++.h>
using namespace std;

#define ll             long long
#define LL             long long
#define gcd(a,b)       __gcd(a,b)
#define lcm(a,b)       a*(b/gcd(a,b))
#define pii            pair<int, int>
#define pll            pair<ll, ll>
#define pil            pair<int, ll>
#define pli            pair<ll, int>
#define vi             vector<int>
#define vl             vector<ll>
#define vii            vector<pii>
#define vll            vector<pll>
#define vil            vector<pil>
#define vli            vector<pli>
#define pb             push_back
#define ppb            pop_back
#define mp             make_pair
#define ff             first
#define ss             second
#define all(v)         v.begin(),v.end()
#define fill(a,b)      memset(a,b,sizeof a)
#define smax(a, b)     a=max(a, b)
#define smin(a, b)     a=min(a, b)
#define sqr(x)         x*x
#define cube(x)        x*x*x
#define endl           '\n'

int in() {
    int n;
    scanf("%d",&n);
    return n;
}

ll Lin() {
    ll n;
    scanf("%lld",&n);
    return n;
}

double Din() {
    double n;
    scanf("%lf",&n);
    return n;
}

const ll inf = 1e17;
const ll mod = 1e9 + 7;
const int N = 1e7 + 5;

int a[N], tree[4 * N], d;

void build(int p, int l, int r) {
    if(l==r) {
        tree[p]=a[l], d=0;
        return;
    }
    int md=(l+r)>>1;
    build(p*2, l, md);
    build(p*2+1, md+1, r);
    d++;
    if(d%2) tree[p]=tree[p*2] | tree[p*2+1];
    else tree[p]=tree[p*2] ^ tree[p*2+1];
}

void update(int p, int l, int r, int x, int v) {
    if(l>x || r<x) return;
    if(l==r) {
        tree[p]=v, d=0;
        return;
    }
    int md=(l+r)>>1;
    update(p*2, l, md, x, v);
    update(p*2+1, md+1, r, x, v);
    d++;
    if(d%2) tree[p]=tree[p*2] | tree[p*2+1];
    else tree[p]=tree[p*2] ^ tree[p*2+1];
}

int main() {
    int n=in(), q=in();
    n=(1<<n);
    for(int i=1; i<=n; i++)
        a[i]=in();
    build(1, 1, n);
    while(q--) {
        int x=in(), v=in();
        update(1, 1, n, x, v);
        printf("%d\n", tree[1]);
    }
    return 0;
}





