#include <bits/stdc++.h>
#define rep(i,a,b) for(int i = (a); i <= (b); i++)
#define rng(a) a.begin(), a.end()
#define ina(n,a) cin >> n; for(int i = 1; i <= n; i++) cin >> a[i]
#define sz(x) (int)(x).size()
#define se second
#define fi first
#define prev            coyhhhhhhyoc    
#define next          sdNNNmNNNNNNNmds  
#define y0           hNNNNy_yNNNNNN_sNh
#define y1          mNNNNNdtdNNNNNNtsNNm
#define yn          mNNNNNNNNy___smNNNms
#define tm            oooooosyysooooot 
#define read               tyhyt        
#define rank              ytmNmo         
#define index              yyy
#define pb push_back
#define pcnt __builtin_popcountll
#define rrep(i,a,b) for(int i = (b); i >= (a); i--)
#define rall(x,a) for(auto x : a)
#define MOD 1000000007
#define endl "\n"
typedef long long ll;
using namespace std;

const int N = 222222;
int a[N], par[N];
bool leaf[N];
vector<int> nodes[N];
int n, t, k;

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> t >> k;
    int mini = 0, maxi = 0, x = 2;
    rep(i, 1, t) {
        cin >> a[i];
        maxi += a[i] - 1;
        mini += max(0, a[i - 1] - a[i]);
        rep(j, 1, a[i]) {
            nodes[i].pb(x++);
        }
    }
    mini += a[t];
    maxi++;
    nodes[0].pb(1);
    if(k < mini || k > maxi) {
        cout << -1 << endl;
        return 0;
    }
    int cnt = k - 1;
    rrep(i, 1, t) {
        for(int j = sz(nodes[i]) - 1; j >= 1; j--) {
            if(cnt && nodes[i + 1].size() <= j) {
                leaf[nodes[i][j]] = true;
                cnt--;
            }
        }
    }
    rrep(i, 1, t) {
        for(int j = sz(nodes[i]) - 1; j >= 1; j--) {
            if(cnt && !leaf[nodes[i][j]]) {
                leaf[nodes[i][j]] = true;
                cnt--;
            }
        }
    }
    rrep(i, 1, t) {
        for(int j = sz(nodes[i]) - 1; j >= 1; j--) {
            int u = nodes[i][j];
            if(nodes[i - 1].size() <= j || leaf[nodes[i - 1][j]]) {
                par[u] = nodes[i - 1][0];
            } else {
                par[u] = nodes[i - 1][j];
            }
        }
        par[nodes[i][0]] = nodes[i - 1][0];
    }
    cout << n << endl;
    rep(i, 1, t) {
        rall(u, nodes[i]) {
            cout << u << " " << par[u] << endl;
        }
    }
    return 0;
}
