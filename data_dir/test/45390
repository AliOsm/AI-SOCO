#include <bits/stdc++.h>
using namespace std;

vector<int> A_ans, B_ans;
int a, b;

vector<int> A, B;
bool can(int x)
{
	long long total = x*1LL*(x+1)/2;
	int s = 0;
	int k = 0;
	while (s + (k + 1) <= a && (k + 1) <= x) {
		k++;
		s += k;
	}
	
	int t = a - s;
	int taken = -1;
	
	for (int i = 1; i <= k; i++) {
		if (i + t > k && i + t <= x) {
			taken = i;
			s = a;
			break;
		}
	}
	
	total -= s;
	
	if (total <= (long long)b) {
		A.clear();
		B.clear();
		
		for (int i = 1; i <= x; i++) {
			if ((i <= k && i != taken) || (taken != -1 && i == taken + t))
				A.push_back(i);
			else 
				B.push_back(i);
		}
	}
	
	return (total <= (long long)b);
}

int main()
{
	ignore = scanf("%d %d", &a, &b);
	
	int L = 0, R = 100000;
	
	while (L <= R) {
		int M = (L + R) / 2;
		if (can(M)) {
			L = M + 1;
			A_ans = A;
			B_ans = B;
		}
		else {
			R = M - 1;
		}
	}
	
	printf("%d\n", (int)A_ans.size());
	for (int x : A_ans) printf("%d ", x);
	printf("\n");
	printf("%d\n", (int)B_ans.size());
	for (int x : B_ans) printf("%d ", x);
}
