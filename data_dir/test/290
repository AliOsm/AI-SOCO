#include <bits/stdc++.h>
using namespace std;

typedef long long int64;
const int MOD = 1e9 + 7;
int n, k;
int64 l;
vector <int> v;

int get(int x) {
	return lower_bound(v.begin(), v.end(), x) - v.begin();
}

int main() {
	scanf("%d%lld%d", &n, &l, &k);

	int dp1[n + 1][k + 1], dp2[n + 1][k + 1], sum1[n + 1], sum2[n + 1], a[n + 1];

	memset(dp1, 0, sizeof(dp1));
	memset(dp2, 0, sizeof(dp2));
	memset(sum1, 0, sizeof(sum1));
	memset(sum2, 0, sizeof(sum2));
	memset(a, 0, sizeof(a));

	for(int i = 0; i < n; i++) {
		scanf("%d", &a[i]);
		v.push_back(a[i]);
	}

	sort(v.begin(), v.end());
	auto it = unique(v.begin(), v.end());
	v.erase(it, v.end());
	int m = v.size();

	for(int i = 0; i < n; i++) {
		dp1[i][k] = 1;
		sum1[get(a[i])] += dp1[i][k];
		sum1[get(a[i])] %= MOD;
	}

	for(int i = 0; i < l % n; i++) {
		dp2[i][k] = 1;
		sum2[get(a[i])] += dp2[i][k];
		sum2[get(a[i])] %= MOD;
	}

	for(int i = m - 1; i >= 0; i--) {
		sum1[i] += sum1[i + 1];
		sum1[i] %= MOD;
		sum2[i] += sum2[i + 1];
		sum2[i] %= MOD;
	}

	for(int j = k - 1; j > 0; j--) {
		for(int i = 0; i < n; i++) {
			dp1[i][j] = sum1[get(a[i])];
			dp2[i][j] = sum2[get(a[i])];
		}

		for(int i = 0; i < m; i++)
			sum1[i] = sum2[i] = 0;

		for(int i = 0; i < n; i++) {
			sum1[get(a[i])] += dp1[i][j];
			sum1[get(a[i])] %= MOD;
			sum2[get(a[i])] += dp2[i][j];
			sum2[get(a[i])] %= MOD;
		}

		for(int i = m - 1; i >= 0; i--) {
			sum1[i] += sum1[i + 1];
			sum1[i] %= MOD;
			sum2[i] += sum2[i + 1];
			sum2[i] %= MOD;
		}
	}

	int sol = 0;
	for(int i = 0; i < n; i++) {
		for(int j = 1; j <= k; j++) {
			int64 v1 = l / n;
			int64 v2 = (l + n - 1) / n;
			int cnt = k - j + 1;

			if(cnt <= v1) {
				int res = (v1 - cnt + 1) % MOD;
				res = (res * 1LL * dp1[i][j]) % MOD;
				sol = (sol + res) % MOD;
			}

			if(cnt <= v2)
				sol = (sol + dp2[i][j]) % MOD;
		}
	}

	printf("%d\n", sol);
	return 0;
}