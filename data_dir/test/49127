
#include<bits/stdc++.h>


using namespace std;

using ll   = long long;
using ii   = pair   < int , int >;
using i3   = pair   < int , ii  >;
using li   = pair   < ll  , int >;
using lii  = pair   < ll  , ii  >;
using pll  = pair   < ll  , ll  >;
using vi   = vector < int       >;
using vl   = vector < ll        >;
using vii  = vector < ii        >;
using vli  = vector < li        >;
using vpll = vector < pll       >;
using vi3  = vector < i3        >;
using vlii = vector < lii       >;


const int N = 1000 + 5 , big = 2e5;
const ll INF = 1e17 + 7;
const double eps = 1e-9 , PI = acos(-1);


int n , m;

ii   p[N][N][3];
int  a[N][N][3];
int dp[N][N][3];

ii fuck(int x){
    ii ret = {0 , 0};

    while(x%2 == 0){
            x /= 2;
            ret.first ++;
    }
    while(x%5 == 0){
            x /= 5;
            ret.second ++;
    }

    return ret;
}

void zeroWalk(int x , int y){
    string ret = "";

    int sx = 1 , sy = 1;
    while(sx < x)ret += "D" , sx ++;
    while(sy < y)ret += "R" , sy ++;
    while(x  < n)ret += "D" , x  ++;
    while(y  < n)ret += "R" , y  ++;

    printf("%s\n" , ret.c_str());
}

void solve(int testCase){

    scanf("%d" , &n);

    int zerox = 0 , zeroy = 0;

    for(int i = 1 ; i <= n ; i ++){
            for(int j = 1 ; j <= n ; j ++){
                    int x; scanf("%d" , &x);

                    if(x == 0){
                            zerox = i;
                            zeroy = j;

                            a[i][j][0] = a[i][j][1] = big;
                    }
                    else {
                            ii ret = fuck(x);

                            a[i][j][0] = ret.first;
                            a[i][j][1] = ret.second;
                    }
            }
    }

    for(int i = 0 ; i <= n ; i ++){
            for(int f : {0 , 1}){
                    dp[0][i][f] = big;
                    dp[i][0][f] = big;
            }
    }
    dp[0][1][0] = dp[0][1][1] = 0;
    dp[1][0][0] = dp[1][0][1] = 0;

    for(int i = 1 ; i <= n ; i ++){
            for(int j = 1 ; j <= n ; j ++){
                    for(int f : {0 , 1}){
                            if(dp[i-1][j][f] <= dp[i][j-1][f]){
                                    p[i][j][f] = {i-1 , j};
                                    dp[i][j][f] = a[i][j][f] + dp[i-1][j][f];
                            }
                            else {
                                    p[i][j][f] = {i , j-1};
                                    dp[i][j][f] = a[i][j][f] + dp[i][j-1][f];
                            }
                    }
            }
    }

    int ans = min(dp[n][n][0] , dp[n][n][1]);
    if((ans >= 1) && zerox){
            printf("1\n");
            zeroWalk(zerox , zeroy);
            return;
    }

    int f = (dp[n][n][0] > dp[n][n][1]);
    int x = n , y = n;

    printf("%d\n" , ans);
    string path = "";
    while(!(x == 1 && y == 1)){
            int nx = p[x][y][f].first ;
            int ny = p[x][y][f].second;

            path += (nx == x ? "R" : "D");

            x = nx;
            y = ny;
    }
    reverse(path.begin() , path.end());
    printf("%s\n" , path.c_str());

}

main(){

    int t = 1;
    // scanf("%d" , &t);

    for(int testCase = 1 ; testCase <= t ; testCase ++){
            solve(testCase);
    }

    return 0;
}
