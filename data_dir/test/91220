#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <queue>
#include <map>
#include <string.h>
#include <vector>
#include <set>

const int N=300010;
const int inf=0x3f3f3f3f;

using namespace std;

#define pb push_back
#define sz(x) ((x).size())

struct Edge{
	int to;
	string str;
	Edge() {}
	Edge(int to, string str):to(to), str(str) {}
};

vector<Edge> vt[N];
int next[N], ans;
string t;

void dfs(int u, int k){
	for(int l = 0; l < sz(vt[u]); l++){
		int to = vt[u][l].to;
		string str = vt[u][l].str;
		int kk = k;
		for(int i = 0, j = k; i < sz(str); i++){
			while(j != -1 && str[i] != t[j + 1]) j = next[j];
			if(str[i] == t[j + 1]) j++;
			if(j + 1 == sz(t)) j = next[j], ans++;
			kk = j;
		}
		dfs(to, kk);
	}
}

int main(){
	int n;
	cin >> n;
	for(int i = 2; i <= n; i++){
		int p;
		string str;
		cin >> p >> str;
		vt[p].pb(Edge(i, str));
	}
	cin >> t;
	next[0] = -1;
	//cout << t << endl;
	for(int i = 1, j = -1; i < sz(t); i++){
		while(j != -1 && t[j + 1] != t[i]) j = next[j];
		if(t[j + 1] == t[i]) next[i] = j + 1, j++;
		else next[i] = -1;
		//cout << next[i] << " ";
	}
	//cout << endl;
	dfs(1, -1);
	cout << ans << endl;
	return 0;
}
