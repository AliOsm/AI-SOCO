#include<bits/stdc++.h>
using namespace std;
int i, j, k, l, x, y, z, m, n, ans, p, q;
#define m_p make_pair
vector < int > vec;
vector < pair < int , int > >pnts;

vector < pair < pair < int , int >, int > > new_vec;

map < int , int > pos;

pair < int, int > pa;

int answe[500000];

int tree[600000];

int maxVal;

void update_BIT(int index, int val)
{

    int i = index;

    while(i <= maxVal){
        tree[i] += val;
        i += (i & -i);
    }


}

int sum(int index)
{

    int i = index;

    int val = 0;

    while(i > 0){
       val += tree[i];
       i -= (i & -i) ;

    }
    return val;
}

int main()
{
    cin >> n;

    for(i = 0; i < n; i++){
        cin >> x >> y;
        pnts.push_back(m_p(x, y));

        new_vec.push_back(m_p(pnts[i], i));

        vec.push_back(x);
        vec.push_back(y);
    }

    sort(vec.begin(), vec.end());

    for(i = 0; i < vec.size(); i++) pos[vec[i]] = i;

    sort(pnts.begin(), pnts.end());
    sort(new_vec.begin(), new_vec.end());

    for(i = 0; i < pnts.size(); i++){

        pnts[i].first = pos[pnts[i].first];
        pnts[i].second = pos[pnts[i].second];
    }

    maxVal = vec.size();


//    for(i = 0; i < pnts.size(); i++) cout << pnts[i].first << ' ' << pnts[i].second << endl;
//    cout << endl << endl;

    for(i = 0; i < n; i++){
        update_BIT(pnts[i].second + 1 , 1);
    }

    for(i = 0; i < n; i++){

        update_BIT(pnts[i].second + 1, -1);

        int x = sum(pnts[i].second + 1);
        int y = sum(pnts[i].first + 1);

        int z = new_vec[i].second;

        answe[z] = x - y;

    }

    for(i = 0; i < n; i++) printf("%d\n", answe[i]);

    return 0;
}
