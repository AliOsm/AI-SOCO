#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
using namespace std;
#define MS0(I) memset(I, 0, sizeof(I));
#define MS1(I) memset(I, -1, sizeof(I));
#define rep(i, n) for(int i = 0; i < (n); ++i)
#define rep1(i, s, n) for(int i = (s); i < (n); ++i)
#define per1(i, a, b) for(int i = a; i >= b; --i)
#define DRI(A) int A; scanf("%d", &A);
#define DRII(A, B) int A, B; scanf("%d %d", &A, &B);
#define DRIII(A, B, C) int A, B, C; scanf("%d %d %d", &A, &B, &C);
#define DRL(A) long long A; scanf("%lld", &A);
#define DRLL(A, B) long long A, B; scanf("%lld %lld", &A, &B);
#define DRLLL(A, B, C) long long A, B, C; scanf("%lld %lld %lld", &A, &B, &C);
#define SZ(X) ((int)X.size() )
#define MP make_pair 
#define pb push_back
#define F first
#define S second
#define ALL(I) (I).begin(), (I).end()
typedef long long LL;
typedef unsigned long long ULL;
typedef double DB;
typedef long double LDB;
typedef pair<int, int> PII; 
typedef pair<int, LL> PIL;
typedef pair<LL, int> PLI;
typedef pair<LL, LL> PLL;
const double eps = 1e-9;
const double PI = acos(-1);
const LL INFF = 1e18;
const int INF = 1e9+1;
const int mod = 1e9+7;
const int MAX = 2e5+7;
struct node{
  node *l, *r;
  LL v, d; int size, pri; 
  node(){};
  node(LL _v) : l(NULL), r(NULL),
  v(_v), d(0), size(1), pri(rand()) {};
};
inline int size(node *t){
  return t ? t->size : 0;
}
inline void pull(node *t){
  t->size = 1 + size(t->l) + size(t->r);
}
void push(node *t){
  if(t->l) t->l->v -= t->d, t->l->d += t->d;
  if(t->r) t->r->v -= t->d, t->r->d += t->d;
  t->d = 0;
}
void split(node *t, LL k, node *&a ,node *&b){
  if(!t){
    a = b = NULL;
    return ;
  }
  push(t);
  if(t->v > k){
    b = t;
    split(t->l, k, a, b->l);
    pull(b);
  }
  else{
    a = t;
    split(t->r, k, a->r, b);
    pull(a);
  }
  return ;
}
node *merge(node *a, node *b){
  if(!a || !b) return a ? a : b;
  if(a->pri > b->pri){
    push(a);
    a->r = merge(a->r, b);
    pull(a);
    return a;
  }
  else{
    push(b);
    b->l = merge(a, b->l);
    pull(b);
    return b;
  }
}
node *rt[MAX];
int n;
vector<PII>edge[MAX];
int a[MAX];
void init(){
  scanf("%d", &n);
  rep1(i, 1, n+1) scanf("%d", a + i);
  rep1(i, 1, n+1) rt[i] = new node(a[i]);
  rep1(i, 2, n+1){
    DRII(p, v);
    edge[p].pb(MP(i, v));
  }
  return ;
}
int ans[MAX];
node *ll, *rr, *rrr;
void dfs(int u){

  for(PII x : edge[u]){
    int v = x.F; LL d = x.S;
    dfs(v);
    split(rt[v], d-1, ll, rt[v]);
    ans[u] += size(rt[v]);
    if(size(rt[v])){
      rt[v]->v -= d;
      rt[v]->d += d;
    }
    if(size(rt[v]) > size(rt[u])) swap(rt[v], rt[u]);
    while(size(rt[v])){
      LL val = rt[v]->v;
      split(rt[v], val, rt[v], rr);
      split(rt[v], val-1, ll, rt[v]);
      split(rt[u], val, rt[u], rrr);
      rt[u] = merge(rt[u], merge(rt[v], rrr));
      rt[v] = merge(ll, rr);
    }
  }
  return ;
}
void sol(){
  dfs(1);
  rep1(i, 1, n+1) printf("%d%c", ans[i], " \n"[i==n]);
  return ;
}
int main(void){
  init();
  sol();
  return 0;
}
