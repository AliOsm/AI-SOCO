#include <bits/stdc++.h>

using namespace std;

int n, m, d, t, ans, idx;
bool state[100001];
int res[100001];
int dist[100001];
vector < vector <int> > adj(100001);

void bfs(int start, int add) {
	ans = 0;
	int mx = 0;
	queue <int> q;
	q.push(start);
	memset(dist, 127, sizeof dist);
	dist[start] = 0;
	while(q.size()) {
		int u = q.front();
		if(dist[u] <= d) {
			res[u] += add;
			ans++;
		}
		q.pop();
		for(int i=0; i<adj[u].size(); i++) {
			int v = adj[u][i];
			if(dist[v] > dist[u] + 1) {
				dist[v] = dist[u] + 1;
				if(state[v] == 1 && mx < dist[v]) {
					mx = dist[v];
					idx = v;
				}
				q.push(v);
			}
		}
	}
}

int main() {
	cin >> n >> m >> d;
	memset(state, 0, sizeof state);
	for(int i=0; i<m; i++) {
		cin >> t;
		state[t] = 1;
	}
	for(int i=1; i<n; i++) {
		int a, b;
		cin >> a >> b;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	if(m == 1) {
		bfs(t, 0);
		cout << ans << '\n';
		return 0;
	}
	memset(res, 0, sizeof res);
	bfs(t, 0);
	bfs(idx, 1);
	bfs(idx, 2);
	ans = 0;
	for(int i=1; i<=n; i++) if(res[i] == 3) ans++;
	cout << ans << '\n';
	return 0;
}