#include <bits/stdc++.h>

using namespace std;
long long  factorial[13] , res = 0 ;
bool OK (int n)
{
    stringstream ss ;
    string s;
    ss << n ;
    ss >> s ;
    ss.clear() ;
    for (int i = 0 ; i < s.size() ; i++ )
    {

        if (s[i] != '4' && s[i] != '7' ) return false ;
    }
    return true ;
}
int main()
{
    int  n , k ;
    cin >> n >> k ;
    vector < int > permutation;
    vector < int > v;
    vector < long long  > luckys ;
    luckys.push_back(4);
    luckys.push_back(7);
    for(int i = 0 ; ; i ++)
    {
        if(luckys[i] > 1e9 ) break;
        luckys.push_back(luckys[i]*10+4);
        luckys.push_back(luckys[i]*10+7);
    }
    factorial[0] = 1;
    for (int i = 1 ; i <= 13 ; i++ )
    {
        factorial[i] = factorial[i-1] * i ;
        if (i <= n ) permutation.push_back(i) ;
    }

    if (n < 13 )
    {
        if (k > factorial[n])
        {
            cout << -1 ;
            return 0 ;
        }
    }
    res = 0 ;


    for (int i = min (n-1,12) ; i >= 1 ; i-- )
    {
        for (int j = 0 ; j < permutation.size() ; j++ )
        {
            if (k > factorial[i] )
                k-= factorial[i] ;
            else
            {
                v.push_back(permutation[j]);
                permutation.erase(permutation.begin()+ j);
                break;
            }
        }
    }
    for (int i = 0 ; i < permutation.size() ; i++ )
        v.push_back(permutation[i]) ;
    int nn = n ;
    if (n > 12 )
    {
        for (int i = 0 ; i < v.size() ; i++ )
        {
            v[i] = n - (13 - v[i]) ;
        }
    }

    for (int i = v.size() - 1 ; i >= 0  ; i-- )
    {
        if (OK(nn) && OK(v[i]) )
        {

            res ++ ;
        }
        nn -- ;
    }

    for (int i = 0 ; ; i ++ )
    {
        if ( luckys[i] < n - 12 ) res ++ ;
        else break;
    }
     cout << res ;

}
