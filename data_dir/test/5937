#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<ctime>
#include<memory.h>
#include<algorithm>
#include<string>
#include<map>
#include<set>
#define sqr(x) ((x)*(x))
#define sqrt(x) sqrt((x)*1.)
#define min(a,b) ((a)<(b)?(a):(b))
#define max(a,b) ((a)>(b)?(a):(b))
#define abs(x) ((x)>0?(x):-(x))
#define getar(m,n) for(int _=0;_<n;++_) cin>>(m)[_];
#define fill(m,v) memset(m,v,sizeof(m))
#define flush {cout.flush();fflush(stdout);}
#define random(x) (((rand()<<15)+rand())%(x))
#define pi 3.1415926535897932
#define y1 stupid_cmath
#define y0 stupid_cmath_make_me_cry
#define tm stupid_ctime
#define long long long
#define foreach(c,i) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)
using namespace std;

int n,m;
int i,j,k,l;
bool p[2222][2222];
bool u[2222][2222];
long s, mnx,mny,mxx,mxy;
int o[2222*2222][2], d;

void bfs(int ax, int ay){
	d = 1;
	o[0][0] = ax;
	o[0][1] = ay;
	u[ax][ay] = true;
	
	int k=0,i,j;
	while(k<d){
		i = o[k][0];
		j = o[k][1];
		
		//cout<<"! "<<i<<' '<<j<<' '<<k<<' '<<d<<endl; flush;
		
		++s;
		mnx = min(mnx,i);
		mxx = max(mxx,i);
		mny = min(mny,j);
		mxy = max(mxy,j);
		
		if(i && !u[i-1][j] && p[i-1][j]==1){
			o[d][0] = i-1; o[d][1] = j;
			u[i-1][j] = true;
			++d;
		}
		if(i<n-1 && !u[i+1][j] && p[i+1][j]==1){
			o[d][0] = i+1; o[d][1] = j;
			u[i+1][j] = true;
			++d;
		}
		if(j && !u[i][j-1] && p[i][j-1]==1){
			o[d][0] = i; o[d][1] = j-1;
			u[i][j-1] = true;
			++d;
		}
		if(j<n-1 && !u[i][j+1] && p[i][j+1]==1){
			o[d][0] = i; o[d][1] = j+1;
			u[i][j+1] = true;
			++d;
		}
		
		++k;
	}
}


bool iscircle(int ax, int ay, int bx, int by){
	double cx = (ax+bx)/2.;
	double cy = (ay+by)/2.;
	
	double mxd = 0;
	double mnd = 1e9;
	
	int x,y;
	for(x=ax;x<=bx;++x)
	for(y=ay;y<=by;++y) if(p[x][y]){
		bool per = ((!x || !p[x-1][y])||(x==n-1 || !p[x+1][y])||(!y || !p[x][y-1])||(y==n-1 || !p[x][y+1]));
		if(per){
			double d = sqr(x-cx)+sqr(y-cy);
			mxd = max(mxd,d);
			mnd = min(mnd,d);
			
			/*if(d==0){
				cout<<"!"<<cx<<' '<<cy<<' '<<x<<' '<<y<<endl;
				cout<<"!"<<p[x+1][y]<<' '<<p[x-1][y]<<' '<<p[x][y+1]<<' '<<p[x][y-1]<<endl;
			}*/
		}
	}
	
	//cout<<sqrt(mxd)<<' '<<sqrt(mnd)<<endl;
	
	return sqrt(mxd)-sqrt(mnd)<3;
}



int main(){
	ios_base::sync_with_stdio(0);
	//freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
	
	
	cin>>n;
	for(i=0;i<n;++i)
	for(j=0;j<n;++j){
		cin>>k;
		p[i][j] = k;
	}
	
	
	int sq=0;
	int cr=0;
	for(i=0;i<n;++i)
	for(j=0;j<n;++j) if(!u[i][j]  && p[i][j]==1){
		s = 0;
		mnx = mny = 1e9;
		mxx = mxy = -1e9;
		bfs(i,j); 
		long s2 = (mxx-mnx+1)*(mxy-mny+1);
		
		
		double k = (double)s2/(double)s;
		//cout<<k<<endl;
		//cout<<i<<' '<<j<<' '<<k<<' '<<abs(k-4/pi)<<endl; flush;
		
		//if(abs(k-1)<1e-5) ++sq; else ++cr;
		
		if( iscircle(mnx, mny, mxx, mxy) ) ++cr; else ++sq;
	}
	
	cout<<cr<<' '<<sq<<endl;
	
	return 0;
}
