#include<iostream>
#include<algorithm>
#include<queue>
#include<string>
#include<vector>
#include<map>
#include<list>
#include<set>
#include<cstring>
#include<ctime>
#include<cmath>
#include<limits>
#include<iterator>
#include<functional>
#include<unordered_map>
#include<stack>
#include<bitset>

#define all(v) v.begin(), v.end()
#define setv(ar, val) memset(ar, val, sizeof(ar));
#define ll long long int
#define ull unsigned long long int
#define PI 3.1415926535897932384626433832795
#pragma comment(linker, "/STACK:536870912")
#pragma warning(disable:4996)
using namespace std;

const int M = 2005, mod = 1e9 + 7;
int dp[M][M][2][2][2][2];

inline void add(int &a, int b) {
	a = (a + b) % mod;
}

char a[M], b[M];


int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int m, d, la, lb;
	scanf("%d%d %s %s", &m, &d, a, b);
	la = strlen(a), lb = strlen(b);

	

	dp[0][0][1][1][0][0] = 1;

	for (int i = 0; i < lb; i++) {
		int j = i - lb + la, cb = b[i] - '0', ca = j >= 0 ? a[j] - '0' : 0;
		for (int r = 0; r < m; r++) {
			for (int t = 0; t < 10; t++) {
				if (t == d && d != 0)
					continue;
				int nr = (r * 10 + t) % m;
				if (t <= cb && t >= ca) {
					add(dp[i + 1][nr][t == ca][t == cb][t != 0][t != 0], dp[i][r][1][1][0][0]);
				}
				if (t >= ca) {
					add(dp[i + 1][nr][t == ca][0][t != 0][t != 0], dp[i][r][1][0][0][0]);
				}
				if (t <= cb)
					add(dp[i + 1][nr][0][t == cb][t != 0][t != 0], dp[i][r][0][1][0][0]);
				add(dp[i + 1][nr][0][0][t != 0][t != 0], dp[i][r][0][0][0][0]);
			}
		}
		for (int k = 0; k < 2; k++) {
			for (int r = 0; r < m; r++) {
				for (int t = (k == 1 ? d : 0); t < (k == 1 ? d + 1 : 10); t++) {
					if (k == 0 && t == d)
						continue;
					int nr = (r * 10 + t) % m;
					if (t <= cb && t >= ca) {
						add(dp[i + 1][nr][t == ca][t == cb][1][1 - k], dp[i][r][1][1][1][k]);
					}
					if (t >= ca) {
						add(dp[i + 1][nr][t == ca][0][1][1 - k], dp[i][r][1][0][1][k]);
					}
					if (t <= cb)
						add(dp[i + 1][nr][0][t == cb][1][1 - k], dp[i][r][0][1][1][k]);
					add(dp[i + 1][nr][0][0][1][1 - k], dp[i][r][0][0][1][k]);
				}
			}
		}
	}

	int ans = 0;
	for (int k = 0; k < 2; k++)
		for (int i = 0; i < 2; i++)
			for (int j = 0; j < 2; j++)
				add(ans, dp[lb][0][i][j][1][k]);
	printf("%d", ans);


	
	return 0;
}