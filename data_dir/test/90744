#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <hash_map>
#include <map>
#include <hash_set>
#include <unordered_map>
#include <set>
#include <stack>
#include <algorithm>
#include <sstream>
#include <queue>

using namespace std;
typedef long long LL;
#define mems(arr, val) memset(arr, val, sizeof(arr));
#define iterat(A) A.begin(), A.end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define INF 2000000000
#define SIZE 1000009
int D[5005];
int P[5005];
int rec(int curW, int curH, int curC, vector<pair<pair<int, int>, int>>  &A)
{
	int result = 0;
	int cur_p;
	for (int i = curC + 1; i < A.size(); ++i)
	{
		if (curW < A[i].first.first && curH < A[i].first.second)
		{
			if (D[i] == -1)
			{
				D[i] = rec(A[i].first.first, A[i].first.second, i, A);
				//P[curC] = P[i];
			}
			//P[curC] = P[i];
			//result = max(D[i] + 1, result);
			if (D[i] + 1 > result)
			{
				result = D[i] + 1;
				P[curC] = i;
			}
		}
	}

	return result;
}

int main()
{
	//freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
	int n,w,h;
	cin>>n>>w>>h;
	vector<pair<pair<int, int>, int>> A(n + 1);
	
	mems(D, -1);
	mems(P, 0);
	forn(i, 1, n + 1)
	{
		cin>>A[i].first.first>>A[i].first.second;
		A[i].second = i;
	}

	sort(iterat(A));
	A[0] = make_pair(make_pair(w, h), 0);
	cout<<rec(w, h, 0, A)<<endl;

	int cur = 0;
	while(cur < n && P[cur] != 0)
	{
		cout<<A[P[cur]].second<<" ";
		cur = P[cur];
	}

	return 0;
}