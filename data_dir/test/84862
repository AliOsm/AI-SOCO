#include <bits/stdc++.h>

using namespace std;

#ifdef SG
	#include <debug.h>
#else
	#define show(...)
	#define debug(...)
	#define deepen(...)
	#define timer(...)
#endif

#define ARG4(_1,_2,_3,_4,...) _4

#define forn3(i,l,r) for (int i = int(l); i < int(r); ++i)
#define forn2(i,n) forn3 (i, 0, n)
#define forn(...) ARG4(__VA_ARGS__, forn3, forn2) (__VA_ARGS__)

#define ford3(i,l,r) for (int i = int(r) - 1; i >= int(l); --i)
#define ford2(i,n) ford3 (i, 0, n)
#define ford(...) ARG4(__VA_ARGS__, ford3, ford2) (__VA_ARGS__)

#define ve vector
#define pa pair
#define tu tuple
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) ((int)(a).size())

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef unsigned char uc;
typedef pa<int, int> pii;
typedef pa<int, ll> pil;
typedef pa<ll, int> pli;
typedef pa<ll, ll> pll;
typedef ve<int> vi;

const ld pi = 3.1415926535897932384626433832795l;

template<typename T> inline auto sqr (T x) -> decltype(x * x) {return x * x;}
template<typename T1, typename T2> inline bool umx (T1& a, T2 b) {if (a < b) {a = b; return 1;} return 0;}
template<typename T1, typename T2> inline bool umn (T1& a, T2 b) {if (b < a) {a = b; return 1;} return 0;}

const int N = 2010;

int center[2 * N];

int main () {
	//std::ios::sync_with_stdio(false);
    //std::cin.tie(nullptr);
	cout.setf(ios::showpoint | ios::fixed);
	cout.precision(20);
#ifdef SG
	freopen("input.txt", "r", stdin);
//	freopen((problemname + ".out").c_str(), "w", stdout);
#endif
    string s;
    getline(cin, s);
    int n = sz(s);
    forn(sum, 2 * n - 1) {
        center[sum] = (sum + 1) / 2;
        for (int l = sum / 2; l >= 0; --l) {
            if (sum - l >= n) {
                break;
            }
            if (s[l] == s[sum - l]) {
                center[sum] = l;
            } else {
                break;
            }
        }
    }
    debug(center, center + 2 * n - 1);
    ll ans = 0;
    forn(i, n - 1) {
        int l = 0, r = 0;
        forn(sum, 2 * n - 1) {
            if (center[sum] > sum - center[sum]) {
                continue;
            }
            if ((sum + 1) / 2 <= i && sum - center[sum] >= i) {
                ++l;
            }
            if (sum / 2 > i) {
                debug(mt(i, sum, center[sum]));
                int left = max(i + 1, center[sum]);
                r += (sum - 2 * left) / 2 + 1;
            }
        }
        ans += 1ll * l * r;
        debug(mt(i, l, r));
    }
    cout << ans << endl;

	return 0;
}