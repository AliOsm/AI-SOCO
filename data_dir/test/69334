#include <bits/stdc++.h>
using namespace std;
#define fastScan ios_base::sync_with_stdio(0); cin.tie(NULL);
#define ABS(x) ((x) < 0 ? -1*(x) : (x))
#define MAX(x,y) ((x) > (y) ? (x) : (y))
#define MIN(x,y) ((x) < (y) ? (x) : (y))
#define mp make_pair
#define pb push_back
#define MOD 1000000007
#define INF 2000000000
#define BINF 20000000000000000LL
#define trace(x)                 cerr << #x << ": " << x << endl;
#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;
using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<ll,ll> pl;
const ld PI = acos(-1.0);
int alphaP[26];

int main()
{
	fastScan;
	string str;
	
	int N,i,j,k,c,cq;
	bool found = false;
	cin >> str;

	if(str.size() < 26)
	{
		cout << -1;
		return 0;
	}
	cq = 0;
	for(i = 0; i < 26; ++i)
	{
		if(str[i] == '?') ++cq;
		else alphaP[str[i]-'A']++;
	}
	c = 0;
	for(j = 0; j < 26; ++j)
	{
		if(!alphaP[j])
			++c;
	}

	for(; str[i]; ++i)
	{
		if(c == 0)
		{
			found = true;
			break;
		}

		if(cq >= c)
		{
			//FOUND CODE
			for(j = 0, k = 0; j < 26; ++j)
			{
				if(str[i-26+j] == '?')
				{
					for(; k < 26; ++k)
						if(alphaP[k] == 0)
							break;

					str[i-26+j] = 'A'+k;
					++k;	
				}
			}
			found = true;
			break;
		}
		else
		{
			if(str[i-26] == '?') --cq;
			else
			{
			 	--alphaP[str[i-26]-'A'];
				if(alphaP[str[i-26]-'A'] == 0) ++c;
			}

			if(str[i] == '?') ++cq;
			else
			{
				++alphaP[str[i]-'A'];
				if(alphaP[str[i]-'A'] == 1) --c;			
			}
		}
	}

	if(cq >= c && found == false)
	{
		//FOUND CODE
		for(j = 0, k = 0; j < 26; ++j)
		{
			if(str[i-26+j] == '?')
			{
				for(; k < 26; ++k)
					if(alphaP[k] == 0)
						break;
				str[i-26+j] = 'A'+k;
				++k;	
			}
		}
		found = true;
	}

	if(found)
	{
		for(i = 0; str[i]; ++i)
			if(str[i] == '?') str[i] = 'A';

		cout << str;
	}
	else cout << -1;

	return 0;
}