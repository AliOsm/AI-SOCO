#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;

template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
//#define int long long

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifndef _offline
    //freopen("switchlamps.in", "r", stdin);
    //freopen("switchlamps.out", "w", stdout);
    #endif
}

const int MAXN = 1e5 + 100;
string str[MAXN];
ll mx[26], mx1[26];

void relax(int id) {
    int n = str[id].size();
    ll cur = 1;
    for (int i = 1; i <= n; ++i) {
        if (i == n || str[id][i] != str[id][i - 1]) {
            mx[str[id][i - 1] - 'a'] = max(mx[str[id][i - 1] - 'a'], cur);
            cur = 1;
        }
        else {
            cur++;
        }
    }
}

signed main() {
    FAST_IO();
    int n;
    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> str[i];
    }
    relax(0);
    for (int i = 1; i < n; ++i) {
        ll sz = str[i].size();
        ll pref = 1, suff = 1;
        char a = str[i][0], b = str[i][sz - 1];
        for (int j = 1; j < sz; ++j) {
            if (str[i][j] == str[i][j - 1]) {
                pref++;
            }
            else {
                break;
            }
        }
        for (int j = sz - 2; j >= 0; --j) {
            if (str[i][j] == str[i][j + 1]) {
                suff++;
            }
            else {
                break;
            }
        }
        if (pref == sz) {
            mx1[a - 'a'] = (mx[a - 'a'] + 1) * sz + mx[a - 'a'];
        }
        else {
            if (a == b) {
                if (mx[a - 'a'] != 0) {
                    mx1[a - 'a'] = suff + 1 + pref;
                }
                else {
                    mx1[a - 'a'] = max(suff, pref);
                }
            }
            else {
                if (mx[a - 'a'] != 0) {
                    mx1[a - 'a'] = pref + 1;
                }
                else {
                    mx1[a - 'a'] = pref;
                }
                if (mx[b - 'a'] != 0) {
                    mx1[b - 'a'] = suff + 1;
                }
                else {
                    mx1[b - 'a'] = suff;
                }
            }
        }
        for (int j = 0; j < 26; ++j) {
            mx[j] = min(mx[j], 1LL);
            if (j == a - 'a' || j == b - 'a') {
                mx[j] = mx1[j];
            }
        }
        relax(i);
    }
    ll ans = 0;
    for (int i = 0; i < 26; ++i) {
        ans = max(ans, mx[i]);
    }
    cout << ans << '\n';
    return 0;       
}