#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

long long yHP,yATK,yDEF;
long long mHP,mATK,mDEF;
long long h,a,d;

bool works(long long i,long long j,long long k)
{
	long long mDec = max((long long)0,yATK+j-mDEF);
	long long yDec = max((long long)0,mATK-(yDEF+k));
	if((yDec==0)&&(mDec!=0))
		return 1;
	else if(mDec==0)
		return 0;
	else if(((yHP+i-1)/yDec)>((mHP-1)/mDec))
		return 1;
	return 0;
}

long long binSearch(long long low,long long high,long long j,long long k)
{
	if(low==high) return low;
	if((low+1)==high)
	{
		if(works(low,j,k)) return low;
		return high;
	}
	long long mid = (low+high)/2;
	if(works(mid,j,k)) return binSearch(low,mid,j,k);
	else return binSearch(mid+1,high,j,k);
}

int main()
{
	cin >> yHP >> yATK >> yDEF;
	cin >> mHP >> mATK >> mDEF;
	cin >> h >> a >> d;
	long long bestCost = (((long long)1)<<40);
	for(long long j=0;j<=1000;j++)
		for(long long k=0;k<=1000;k++)
		{
			long long cost = a*j+d*k+h*binSearch(0,1000000000,j,k);
			bestCost = min(cost,bestCost);
		}
	cout << bestCost << endl;
}