#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
#define dbl(k, x) fixed << setprecision(k) << (x)

template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define _upgrade ios_base::sync_with_stdio(0);
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 55;
const LL INF = LL(1e18) + 7;

LL fac[N];

vector < int > getCycle(int s, LL k) {
	vector < int > res;
	res.resize(s);
	for (int i = 0; i < s; i++)
		res[i] = -1;
	res[0] = s - 1;
	if (s == 1) return res;
	for (int i = 1; i < s; i++) {
		for (int x = 0; x < s; x++) {
			bool ok = true;
			for (int j = 0; j < i; j++)
				ok &= res[j] != x;
			if (!ok) continue;
			if (i == s - 1) {
				res[i] = x;
				break;
			}
			int p = x;
			while(p < i) p = res[p];
			if (p == i) continue;
			LL w = (i == s - 1 ? 1 : fac[s - 2 - i]);
			if (w <= k) {
				k -= w;
				continue;
			}
			res[i] = x;
			break;
		}
	}
	return res;
}

int n;
LL k, dp[N], pre[N][N];

void solve()
{
    cin >> n >> k;

    if(k > dp[n])
    {
        cout << -1 << "\n";
        return;
    }
    k--;
    
    int off = 0;
    for(int i = n; i >= 1; i--)
    {
        DBG(i, k);
        for(int j = 1; j <= i; j++)
        {
            DBG(j);
            if(k >= pre[i][j])
            {
                k -= pre[i][j];
                continue;
            }
            DBG(j);
            LL l = k / dp[i - j];
            vector < int > v = getCycle(j, l);
            for(auto x: v)
                cout << x + 1 + off << " ";

            off += j;
            k %= dp[i - j];
            i -= (j - 1);
            break;
        }
    }
    cout << "\n";
}

int main()
{
    _upgrade
    
    fac[0] = 1;
    for(LL i = 1; i < N; i++)
    {
        if(i <= INF / fac[i - 1])
            fac[i] = i * fac[i - 1];
        else
            fac[i] = INF;
    }

    dp[0] = 1;
    for(int i = 1; i < N; i++)
    {
        dp[i] = dp[i - 1];
        pre[i][1] = dp[i - 1];
        for(int j = 2; j <= i; j++)
        {
            if(fac[j - 2] <= INF / dp[i - j])
            {
                pre[i][j] = fac[j - 2] * dp[i - j];
                dp[i] = min(INF, dp[i] + fac[j - 2] * dp[i - j]);
            }
            else
            {
                pre[i][j] = INF;
                dp[i] = INF;
            }
        }
        //for(int j = 1; j <= i; j++)
        //    DBG(i, j, dp[i], pre[i][j]);
    }

    int t; cin >> t;
    while(t--)
    {
        solve();
    }    

	return 0;
}