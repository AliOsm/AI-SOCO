#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <assert.h>
#include <bitset>
#include <string>
#include <cstdio>
#include <math.h>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <bitset>
#include <map>
using namespace std;

#define int64 long long
#define mp make_pair

#ifdef _DEBUG
const int N = 300000;
#else
const int N = 300000;
#endif

const int64 INF = 1e18;
const int MOD = 1e9+7;

int n;
int a[3][N];
int64 dp[3][N];
bool used[3][N];

int64 solve(int i, int j)
{
	if (used[i][j]) return dp[i][j];
	used[i][j] = true;
	if (j == n - 1)
	{
		dp[i][j] = 0;
		for (int k = i; k < 3; k++) dp[i][j] += a[k][j];
		return dp[i][j];
	}
	dp[i][j] = solve(i, j + 1) + a[i][j];
	int64 tmp = a[i][j];
	for (int k = i - 1; k >= 0; k--)
	{
		tmp += a[k][j];
		dp[i][j] = max(dp[i][j], solve(k, j + 1) + tmp);
	}
	tmp = a[i][j];
	for (int k = i + 1; k < 3; k++)
	{
		tmp += a[k][j];
		dp[i][j] = max(dp[i][j], solve(k, j + 1) + tmp);
	}
	tmp = 0;
	if (i == 0 || i == 2)
	{
		for (int k = 0; k < 3; k++) tmp += a[k][j] + a[k][j + 1];
		if (j < n - 2)
		{
			int i1;
			if (i == 0) i1 = 2;
			else i1 = 0;
			dp[i][j] = max(dp[i][j], solve(i1, j + 2) + tmp);
		}
		else
		{
			if (i == 0) dp[i][j] = max(dp[i][j], tmp);
		}
	}
	return dp[i][j];
}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	cin >> n;
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < n; j++) cin >> a[i][j];
	}
	memset(used, false, sizeof(used));
	cout << solve(0, 0);
	return 0;
}