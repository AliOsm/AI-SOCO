#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <cassert>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>

using namespace std;

#define y1 wwsdf
#define f first
#define s second
#define pb push_back
#define pp pop_back
#define mp make_pair
#define ll long long
#define ld double
#define ull unsigned long long
#define PI pair < int, int > 

const int N = 1e5 + 123;
const int M = 123;
const ld Pi = acos(-1);
const ll Inf = 1e18;
const int inf = 1e9;
const int mod = 1e9 + 7;
const int Sz = 501;

void add(int &a, int b) {
  a += b;
  if (a >= mod) a -= mod;
}
int mult(int a, int b) {
  return 1ll * a * b % mod;
}
int sum(int a, int b) {
  add(a, b);
  return a;
}

int n, k, rt[N], sz, q;

struct tree {
  int l, r, s;
} t[N * 100];
vector < int > occ[N];

void upd(int v, int lv, int p, int val, int tl = 1, int tr = n) {
  t[v].l = t[lv].l;
  t[v].r = t[lv].r;
  t[v].s = t[lv].s;
  if (tl == tr) {
    t[v].s = val;
    return;
  }
  int tm = (tl + tr) / 2;
  if (p <= tm) {
    t[v].l = ++sz;
    upd(t[v].l, t[lv].l, p, val, tl, tm);
  } else {
    t[v].r = ++sz;
    upd(t[v].r, t[lv].r, p, val, tm + 1, tr);
  }
  t[v].s = t[t[v].l].s + t[t[v].r].s;
}
int get(int v, int l, int r, int tl = 1, int tr = n) {
  if (tl > r || tr < l) return 0;
  if (l <= tl && tr <= r) return t[v].s;
  int tm = (tl + tr) / 2;
  return get(t[v].l, l, r, tl, tm) + get(t[v].r, l, r, tm + 1, tr);
}

void solve() {
  cin >> n >> k;
  for (int i = 1;i <= n;i++) {
    int x; cin >> x;
    rt[i] = ++sz;
    upd(rt[i], rt[i - 1], i, 1);
    occ[x].pb(i);
    if (occ[x].size() > k) {
      int tmp = rt[i];
      rt[i] = ++sz;
      int pos = occ[x][occ[x].size() - k - 1];
      upd(rt[i], tmp, pos, 0);
    }
  }
  cin >> q;
  for (int i = 0, lst = 0;i < q;i++) {
    int l, r; cin >> l >> r;
    l = (l + lst) % n + 1;
    r = (r + lst) % n + 1;
    if (l > r) swap(l, r);
    lst = get(rt[r], l, r);
    cout << lst << endl;
  }
}

int main() {
  #ifdef wws
   freopen("in", "r", stdin);
   freopen("out", "w", stdout);
  #endif 
  ios_base::sync_with_stdio(0);
  int tt; tt = 1;
  while(tt--) solve();
  return 0;
}