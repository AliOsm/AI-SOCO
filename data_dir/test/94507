#include<bits/stdc++.h>
using namespace std;
const int MX =  (1<<17);
typedef long long ll;
const int lim = 2e6+1;
vector < int > fact[lim];
bool is[lim];
vector < int > v[MX] , cur[lim];
int arr[MX] , ans[MX] , depth[MX];
int n , QN;
void Pdfs(int x , int p){
    for(auto nxt : v[x]){
        if(nxt == p) continue;
        depth[nxt] = depth[x] + 1;
        Pdfs(nxt , x);
    }
}
void dfs(int x , int p){
    ans[x] = 0;
    //cout<<x<<endl;
    for(auto P : fact[arr[x]]){
        if(!cur[P].empty() && depth[cur[P].back()] > depth[ans[x]])
            ans[x] = cur[P].back();
        cur[P].push_back(x);
    }
    for(auto nxt : v[x]){
        if(nxt == p) continue;
        dfs(nxt , x);
    }
    for(auto P : fact[arr[x]])
        cur[P].pop_back();
}
int main(){
    //cout<<sizeof(fact)*3<<endl;
    scanf("%d %d",&n,&QN);
    for(int j=1;j<=n;j++) scanf("%d",&arr[j]);
    for(int j=1;j<n;j++){
        int a , b;
        scanf("%d %d",&a,&b);
        v[a].push_back(b);
        v[b].push_back(a);
    }
    for(int j = 2 ; j < lim ; j++){
        if(is[j]) continue;
        fact[j].push_back(j);
        for(int i = j + j ; i < lim ; i+=j){
            is[i] = 1;
            fact[i].push_back(j);
        }
    }
    depth[1] = 1;
    Pdfs(1 , -1);
    dfs(1 , -1);
    while(QN--){
        int cmd , x;
        scanf("%d %d",&cmd,&x);
        if(cmd == 1){
            if(ans[x] == 0) puts("-1");
            else printf("%d\n",ans[x]);
            continue;
        }
        scanf("%d",&arr[x]);
        dfs(1 , -1);
    }
}
