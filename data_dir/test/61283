#include<bits/stdc++.h>
using namespace std;

#define fi                      first
#define se                      second
#define pb                      push_back
#define endl                    '\n'
#define all(x)                  x.begin(),x.end()
#define pii                     pair<int,int>
#define pll                     pair< long long int, long long int> 
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define SZ(x)                   ((int)x.size())

#define FOR(i,a,b)              for(int i = a; i < b; ++i)
#define REV(i,a,b)              for(int i = a; i >= b; --i)
#define FORE(i,a,b)             for(int i = a; i <= b; ++i)

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

void solve();

int32_t main()
{
        fast;
        int t = 1;
        // cin >> t;
        for(int i = 1; i <= t; ++i)
                solve();
        cerr << "Time taken: " << ((clock() * 1000) / CLOCKS_PER_SEC) << "ms\n";
}

template <typename A, typename B>
string to_string(pair<A, B> p);
 
string to_string(const string& s) {
        return '"' + s + '"';
}
 
string to_string(const char* s) {
        return to_string((string) s);
}
 
string to_string(bool b) {
        return (b ? "true" : "false");
}
 
string to_string(vector<bool> v) {
        bool first = true;
        string res = "{";
        for (int i = 0; i < static_cast<int>(v.size()); i++) {
                if (!first) {
                        res += ", ";
                }
                first = false;
                res += to_string(v[i]); 
        }
        res += "}";
        return res;
}
 
template <size_t N>
string to_string(bitset<N> v) {
        string res = "";
        for (size_t i = 0; i < N; i++) {
                res += static_cast<char>('0' + v[i]);
        }
        return res;
}
 
template <typename A>
string to_string(A v) {
        bool first = true;
        string res = "{";
        for (const auto &x : v) {
                if (!first) {
                        res += ", ";
                }
                first = false;
                res += to_string(x);
        }
        res += "}";
        return res;
}
 
template <typename A, typename B>
string to_string(pair<A, B> p) {
        return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
 
void debug_out() { 
        cerr << endl; 
}
 
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
        cerr << " " << to_string(H);
        debug_out(T...);
}
 
#ifdef IGM
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...)
#endif

pii p[3];

const int dx[8] = {2, 2, 1, -1,-2,-2, 1, -1};
const int dy[8] = {1, -1, 2, 2, 1,-1, -2, -2};

bool check() {
        int ans[] = {0,0,0};
        FOR(i,0,3) {
                FOR(j,0,3) {
                        if(i == j)
                                continue;
                        if(i == 0) {
                                if(p[i].fi == p[j].fi or p[i].se == p[j].se) {
                                        ans[j]++;
                                        continue;
                                }
                        }
                        else {
                                FOR(k,0,8) {
                                        pii temp = {p[i].fi  + dx[k], p[i].se + dy[k]};
                                        // debug(temp);
                                        if(temp == p[j]) {
                                                ans[j]++;
                                                break;
                                        }

                                }
                        }
                }
        }
        // debug(p[2], ans[2]);
        FOR(i,0,3) {
                // debug(ans[i]);
                if(ans[i]%2) {
                        // debug(p[2]);
                        return false;
                }
        }
        return true;
}

void solve() {
        string a,b;
        cin >> a >> b;
        
        p[0] = {a[0] - 'a' + 1, a[1] - '0'};
        p[1] = {b[0] - 'a' + 1, b[1] - '0'};
        ll ans  = 0;
        // debug(p[0],p[1]);
        FOR(i,1,9) {
                FOR(j,1,9) {
                        p[2] = {i,j};
                        if(p[2] == p[0] or p[2] == p[1])
                                continue;
                        if(check()) {
                                // debug(p[2]);
                                ans++;
                        }
                }
        }
        cout << ans << endl;
}