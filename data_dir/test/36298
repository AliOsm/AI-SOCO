#include <bits/stdc++.h>
#define ll long long

using namespace std;

struct sTrie {
    int to[26];
    int sz;
} trie[300009];
int trieSize;

int NewTrie() {
    ++trieSize;
    trie[trieSize].sz = 1;
    return trieSize;
}

int ans[300009];
int c[300009];
char s[300009];

vector<int> neigh[300009];

int roots[300009];


int MergeTrie(int A, int B)
{
    if (!A || !B) return A+B;

    trie[B].sz = 1;
    for (int i = 0; i < 26; i++) {
        trie[B].to[i] = MergeTrie(trie[A].to[i], trie[B].to[i]);
        trie[B].sz += trie[ trie[B].to[i] ].sz;
    }

    return B;
}

void DFS(int v, int p)
{
    int root = NewTrie();
    for (int i = 0; i < neigh[v].size(); i++) {
        int u = neigh[v][i];
        if (u == p) continue;

        DFS(u, v);

        if (trie[ trie[root].to[ s[u] ] ].sz < trie[ roots[u] ].sz)
            trie[root].to[ s[u] ] = MergeTrie(trie[root].to[ s[u] ], roots[u]);
        else
            trie[root].to[ s[u] ] = MergeTrie(roots[u], trie[root].to[ s[u] ]);
    }

    trie[root].sz = 1;
    for (int i = 0; i < 26; i++) trie[root].sz += trie[ trie[root].to[i] ].sz;

    roots[v] = root;
    ans[v] = c[v] + trie[ roots[v] ].sz;
}

int main()
{
    //freopen("input.txt", "r", stdin);

    int n;
    scanf("%d", &n);

    for (int i = 1; i <= n; i++) scanf("%d", &c[i]);
    scanf(" %s", s + 1);

    for (int i = 0; i < n-1; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        neigh[u].push_back(v);
        neigh[v].push_back(u);
    }

    for (int i = 1; i <= n; i++) s[i] -= 'a';

    DFS(1, 0);

    int maxVal = 0;
    for (int v = 1; v <= n; v++) {
        if (maxVal < ans[v])
            maxVal = ans[v];
    }

    /*
    for (int v = 1; v <= n; v++) {
        printf("%d ", ans[v] - c[v]);
    } return 0;
    */

    int cnt = 0;
    for (int v = 1; v <= n; v++) {
        if (ans[v] == maxVal)
            cnt++;
    }

    printf("%d\n", maxVal);

    printf("%d\n", cnt);
}
