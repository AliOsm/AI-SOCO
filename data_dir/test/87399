#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define int long long
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

vector<vector<pair<int,int> > >adj;
int dis[200005];

void bfs()
{
    queue<int>qq;
    qq.push(1);
    while (!qq.empty())
    {
        int z=qq.front();
        qq.pop();
        for(auto i:adj[z])
        {
            if(dis[i.first]>dis[z]+1)
            {
                dis[i.first]=dis[z]+1;
                qq.push(i.first);
            }
        }
    }    
}

vector<vector<int>>ans;
int res=0,k;
vector<string>fina;

void rec(int x,string &str)
{
    if(res==k)
        return ;
    for(auto i:ans[x-1])
    {
    if(res==k)
        return ;
    str[i]='1';
    if(x==1 && res<k)
    {
        fina.push_back(str);
        res++;
    }
    else if(x>1)
        rec(x-1,str);
    str[i]='0';
    }
}

signed main()
{
     ios_base::sync_with_stdio(false);
     cin.tie(NULL);  
   
 #ifndef ONLINE_JUDGE
    if(fopen("INPUT.txt","r"))
    {
    freopen ("INPUT.txt" , "r" , stdin);
    freopen ("OUTPUT.txt" , "w" , stdout);
    }
 #endif

// -------------------------------------Code starts here---------------------------------------------------------------------     

    fill_n(dis,200005,1e17);
    dis[1]=0;
    int n,m;
    cin>>n>>m>>k;
    adj.resize(n+1);
    int x,y;
    vector<pair<int,int> >p;
    for(int i=0;i<m;i++)
    {
        cin>>x>>y;
        p.push_back({x,y});
        adj[x].push_back({y,i+1});
        adj[y].push_back({x,i+1});
    }
    bfs();
    int res=1;
    int lim=1e9;
    for(int i=1;i<=n;i++)
    {
        vector<int>temp;
        for(auto j:adj[i])
        {
            if(dis[j.first]+1==dis[i])
            {
                temp.push_back(j.second);
            }
        }
        if(temp.size()>0)
        {
            ans.push_back(temp);
            res=(res*temp.size());
            if(res>=k)
            {
                res=lim;
            }
        }
    }
    string aa="#";
    for(int i=0;i<m;i++)
    {
        aa+="0";
    }

    rec(ans.size(),aa);
    cout<<fina.size()<<'\n';
    for(auto i:fina)
    {
        for(int j=1;j<=m;j++)
            cout<<i[j];
        cout<<'\n';
    }

// -------------------------------------Code ends here------------------------------------------------------------------
     clock_t clk;
 	clk = clock();
 
    clk = clock() - clk;
 	cerr << fixed << setprecision(6) << "Time: " << ((double)clk)/CLOCKS_PER_SEC << "\n";
 	return 0;
 }
