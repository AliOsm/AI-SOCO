#define _CRT_SECURE_NO_WARNINGS
#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <assert.h>
#include <bitset>
#include <string>
#include <cstdio>
#include <math.h>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <bitset>
#include <map>
using namespace std;

const int M = 31;

struct Node
{
	int next[2];
	int cnt;
	Node()
	{
		next[0] = next[1] = -1;
		cnt = 0;
	}
};

vector < Node > t;
int q;

int getBit(int x, int j)
{
	if ((x & (1 << j)))
		return 1;
	else
		return 0;
}


void Add(int x)
{
	int v = 0;
	for (int i = M - 1; i >= 0; --i)
	{
		int c = getBit(x, i);
		t[v].cnt++;
		if (t[v].next[c] == -1)
		{
			t.push_back(Node());
			t[v].next[c] = t.size() - 1;
			t[t.size() - 1].cnt = 0;
		}
		v = t[v].next[c];
	}
	t[v].cnt++;
}

int find(int x)
{
	int v = 0;
	int result = 0;
	for (int i = M - 1; i >= 0; --i)
	{
		int c = getBit(x, i);
		if (t[v].next[c ^ 1] != -1 && t[t[v].next[c ^ 1]].cnt > 0)
		{
			result += (1 << i);
			v = t[v].next[c ^ 1];
		}
		else
			v = t[v].next[c];
	}
	return result;
}

void Delete(int x)
{
	int v = 0;
	for (int i = M - 1; i >= 0; --i)
	{
		int c = getBit(x, i);
		t[v].cnt--;
		v = t[v].next[c];
	}
	t[v].cnt--;
}



int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	scanf("%d\n", &q);
	t.push_back(Node());
	Add(0);
	for (int i = 0; i < q; ++i)
	{
		char type;
		int x; 
		scanf("%c%d\n", &type, &x);
		if (type == '-')
		{
			Delete(x);
		}
		else if (type == '+')
		{
			Add(x);
		}
		else
		{
			printf("%d\n", find(x));
		}
	}
	return 0;
}