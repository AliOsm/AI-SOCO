#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")

#include "bits/stdc++.h"
using namespace std;

#define pb push_back
#define F first
#define S second
#define f(i,a,b)  for(int i = a; i < b; i++)
#define endl '\n'

using ll = long long;
using db = long double;
using ii = pair<int, int>;

const int N = 1e7 + 5, LG = 19, MOD = 1e9 + 7;
const int SQ =225;
const long double EPS = 1e-7;
map<string, int> mp;
struct AC_FSM
{
#define ALPHABET_SIZE 26
    struct Node
    {
        int child[ALPHABET_SIZE], failure = 0, match_parent = -1;
        vector<int> match;
        Node()
        {
            for (int i = 0; i < ALPHABET_SIZE; ++i)child[i] = -1;
        }
    };
    vector<Node> a;
    AC_FSM()
    {
        a.push_back(Node());
    }
    void construct_automaton(vector<string> &words)
    {
        for (int w = 0, n = 0; w < words.size(); ++w, n = 0)
        {
            for (int i = 0; i < words[w].size(); ++i)
            {
                if (a[n].child[words[w][i] - 'a'] == -1)
                {
                    a[n].child[words[w][i] - 'a'] = a.size();
                    a.push_back(Node());
                }
                n = a[n].child[words[w][i] - 'a'];
            }
            a[n].match.push_back(w);
        }
        queue<int> q;
        for (int k = 0; k < ALPHABET_SIZE; ++k)
        {
            if (a[0].child[k] == -1) a[0].child[k] = 0;
            else if (a[0].child[k] > 0)
            {
                a[a[0].child[k]].failure = 0;
                q.push(a[0].child[k]);
            }
        }
        while (!q.empty())
        {
            int r = q.front();
            q.pop();
            for (int k = 0, arck; k < ALPHABET_SIZE; ++k)
            {
                if ((arck = a[r].child[k]) != -1)
                {
                    q.push(arck);
                    int v = a[r].failure;
                    while (a[v].child[k] == -1) v = a[v].failure;
                    a[arck].failure = a[v].child[k];
                    a[arck].match_parent = a[v].child[k];
                    while (a[arck].match_parent != -1 &&
                            a[a[arck].match_parent].match.empty())
                        a[arck].match_parent = a[a[arck].match_parent].match_parent;
                }
            }
        }
    }
    long long aho_corasick(string &sentence, vector<string> &words)
    {
        int state = 0, ss = 0;
        vector<int> st(sentence.size());
        vector<int> en(sentence.size());
        vector<int> freq;
        for(auto x : words)freq.pb(mp[x]);
        for (int i = 0; i< sentence.length(); ++i, ss = state)
        {
            while (a[ss].child[sentence[i] - 'a'] == -1)
                ss = a[ss].failure;
            state = a[state].child[sentence[i] - 'a'] = a[ss].child[sentence[i] - 'a'];
            for (ss = state; ss != -1; ss = a[ss].match_parent)
                for (int w : a[ss].match){
                    en[i] += freq[w];
                    st[i + 1 - words[w].length()] += freq[w];
                }
        }
        long long ans = 0;
        for(int i = 0; i + 1 < sentence.size(); i++)
          ans += 1ll * en[i] * st[i+1];
        return ans;
    }
};
int32_t main(){
#ifdef ONLINE_JUDGE
    ios_base::sync_with_stdio(0);
    cin.tie(0);
#endif

  string t;
  cin >> t;

  int n;
  cin >> n;

  vector<string> vt;

  f(i,0,n){
    string s;
    cin >> s;
    mp[s]++;
  }

  for(auto it : mp)vt.pb(it.F);

  AC_FSM ACA;

  ACA.construct_automaton(vt);

  cout << ACA.aho_corasick(t, vt);

  return 0;
}
