#include<cstdio>
#include<cstring>
#include<set>
#include<string>
#include<iostream>
#include<cmath>
#include<vector>
#include<map>
#include<stack>
#include<time.h>
#include<queue>
#include<cstdlib>
#include<algorithm>
using namespace std;
#define lowbit(x) ((x)&(-(x)))
#define sqr(x) ((x)*(x))
#define PB push_back
#define MP make_pair
#define foreach(it, x) for(typeof(x.begin()) it = x.begin(); it!=x.end();it++)
typedef unsigned long long ULL;
typedef long long lld;
typedef vector<int> VI;
typedef vector<string> VS;
typedef pair<int,int> PII;
template <class T>  inline void Min(T &x, T y){if(y < x) x = y;}
template <class T>  inline bool Max(T &x,T y) {
    if(y > x) {
        x  =  y;
        return true;
    }
    return false;
}
const int maxn  =  1010;
int A[maxn];
struct node {
    int l,r,f;
}in[maxn];
pair<pair<int,int>,int> path[maxn][maxn];
int dp[maxn][maxn];
vector<int> YY[maxn][maxn];
struct PP {
    int a,b,c;
}Ans[maxn];
int n , v , m;
int main()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    scanf("%d%d",&n,&v);
    for(int i=1;i<=n;i++) scanf("%d",&A[i]);
    scanf("%d",&m);
    for(int i=1;i<=m;i++) scanf("%d%d%d",&in[i].l,&in[i].r,&in[i].f);
    memset(dp,-1,sizeof(dp));
    dp[1][0] = 0; A[0] = 0;
    vector<pair<int,int> >  p[maxn];
    bool flag;
    for(int i=1;i<=n;i++) {
         for(int k=1;k<=m;k++) {
                if(in[k].l <= i && in[k].r >= i) {
                     p[i].push_back(make_pair(in[k].f,k));
                }
            }
            sort(p[i].begin(),p[i].end());
    }
    for(int i=1;i<=n;i++) {
        for(int j=0;j<=A[i-1];j++) if(dp[i][j]!=-1){
            int sum = v;
            int sz = p[i].size();
            for(int k=0;k<=sz;k++) {
                if(k) {
                  sum += p[i][k-1].first;
                  YY[i][j].push_back(p[i][k-1].second);
                }
                if(sum > j + A[i]) break;
                if(sum < j){
                    flag  =   Max(dp[i+1][A[i]],dp[i][j]+k);
                    if(flag)  path[i+1][A[i]] = MP(MP(i,j),k);
                } else {
                    flag = Max(dp[i+1][A[i]+j-sum],dp[i][j]+k);
                    if(flag) path[i+1][A[i]+j-sum] = MP(MP(i,j),k);
                }
            }
        }
    }
    int ret = 0;
    int a=1,b;
    for(int i=0;i<=A[n];i++) {
        flag = Max(ret,dp[n+1][i]);
        if(flag) {
         a = n + 1; b = i;  
        }
    }
    int c,day = n + 1;
    while(a != 1 ) {
        day -- ;
       int ta = a, tb = b;
        a = path[ta][tb].first.first;
        b = path[ta][tb].first.second;
        c = path[ta][tb].second;
        Ans[day].a = a;
        Ans[day].b = b;
        Ans[day].c = c;
    //   if(n == 400 && v == 400)  printf("day=%d\n",day);
        //if(n == 400 && v == 400) puts("hhhhhhhhhhhh");
    }
    //if(n == 400 && v == 400) puts("debug");
    printf("%d\n",ret);
    for(int i=1;i<=n;i++) {
        printf("%d",Ans[i].c);
        for(int j=0;j<Ans[i].c;j++) {
              printf(" %d",YY[Ans[i].a][Ans[i].b][j]);
        }
        puts("");
    }
    return 0;
}