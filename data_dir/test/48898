#include <bits/stdc++.h>
using namespace std;
 
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define int long long

const int N=5e5+5;

int n, m;
int a[N], ans[N];
map<int, int> idx;
int st[4*N];
vector<pair<int, int> > q[N];

void build(int node, int L, int R)
{
	if(L==R)
	{
		st[node]=1e9;
		return;
	}
	int M=(L+R)/2;
	build(node*2, L, M);
	build(node*2+1, M+1, R);
	st[node]=min(st[node*2], st[node*2+1]);
}

int query(int node, int L, int R, int i, int j)
{
	if(j<L || i>R)
		return 1e9;
	if(i<=L && R<=j)
		return st[node];
	int M=(L+R)/2;
	int left=query(node*2, L, M, i, j);
	int right=query(node*2 + 1, M+1, R, i, j);
	return min(left, right);
}

void update(int node, int L, int R, int pos, int val)
{
	if(L==R)
	{
		st[node]=val;
		return;
	}
	int M=(L+R)/2;
	if(pos<=M)
		update(node*2, L, M, pos, val);
	else
		update(node*2 + 1, M+1, R, pos, val);
	st[node]=min(st[node*2], st[node*2 + 1]);
}

int32_t main()
{
	IOS;
	cin>>n>>m;
	for(int i=1;i<=n;i++)
		cin>>a[i];
	build(1, 1, n);
	for(int i=1;i<=m;i++)
	{
		int l, r;
		cin>>l>>r;
		q[r].push_back({l, i});
	}
	for(int i=1;i<=n;i++)
	{
		int prev=idx[a[i]];
		idx[a[i]]=i;
		if(prev)
			update(1, 1, n, prev, i-prev);
		for(auto &it:q[i])
		{
			int curans=query(1, 1, n, it.first, i);
			if(curans==1e9)
				curans=-1;
			ans[it.second]=curans;
		}
	}
	for(int i=1;i<=m;i++)
		cout<<ans[i]<<endl;
	return 0;
}