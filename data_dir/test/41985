#include <stdio.h>
#include <iostream>
#include <vector>
#include <assert.h>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <sstream>
#include <memory.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>
#include <functional>
#include <algorithm>
using namespace std;
typedef long long ll;
int n;
vector<vector<int> > g;
int ask(vector<int> &v) {
	if (v.size() <= 1)
		return 0;
	printf("? %d\n", v.size());
	for (auto x : v)
		printf("%d ", x + 1);
	printf("\n");
	fflush(0);
	int x;
	scanf("%d", &x);
	return x;
}
vector<int> clr;
bool vis[600][2];
pair<int, bool> p[600][2];
void findBad(int u) {
	for (int i = 0; i < n; ++i)
		if (u != i) {
			vector<int> t;
			t.push_back(u);
			t.push_back(i);
			if (ask(t)) {
				g[u].push_back(i);
				g[i].push_back(u);
			}
		}
	queue<pair<int, bool> > q;
	vis[u][0] = true;
	q.push({ u,0 });
	p[u][0] = { -1,0 };
	while (!q.empty()) {
		int u = q.front().first;
		bool f = q.front().second;
		q.pop();
		for (auto v : g[u])
			if (!vis[v][!f]) {
				vis[v][!f] = true;
				p[v][!f] = { u,f };
				q.push({ v,!f });
			}
	}
	assert(vis[u][1]);
	vector<int> sol;
	bool f = 1;
	while (u != -1) {
		int nu = p[u][f].first;
		bool nf = p[u][f].second;
		u = nu;
		f = nf;
		if (u != -1)
			sol.push_back(u);
	}
	printf("N %d\n", sol.size());
	for (auto x : sol)
		printf("%d ", x + 1);
	printf("\n");
	fflush(0);
	exit(0);
}
int main()
{
	srand(time(0));
	scanf("%d", &n);
	g.resize(n);
	clr.resize(n, -1);
	vector<int> p(n);
	for (int i = 0; i < n; ++i)
		p[i] = i;
	queue<int> q;
	q.push(p[0]);
	clr[q.front()] = 0;
	vector<int> G[2];
	G[0].push_back(q.front());
	while (!q.empty()) {
		int u = q.front();
		q.pop();
		vector<int> nu;
		for (int i = 0; i < n; ++i)
			if (clr[i] == -1)
				nu.push_back(i);
		int last = 0;
		while (true) {
			int l = last, r = (signed)nu.size() - 1, m, at = -1;
			while (l <= r) {
				m = (l + r) / 2;
				vector<int> q1;
				for (int i = 0; i <= m; ++i)
					if (clr[nu[i]] == -1)
						q1.push_back(nu[i]);
				int without = ask(q1);
				q1.push_back(u);
				int with = ask(q1);
				if (with > without) {
					at = m;
					r = m - 1;
				}
				else
					l = m + 1;
			}
			if (at == -1)
				break;
			int v = nu[at];
			clr[v] = !clr[u];
			q.push(v);
			G[clr[v]].push_back(v);
			if (ask(G[clr[v]]))
				findBad(v);
			g[u].push_back(v);
			g[v].push_back(u);
			last = at + 1;
		}
	}
	printf("Y %d\n", G[0].size());
	for (auto x : G[0])
		printf("%d ", x + 1);
	printf("\n");
	fflush(0);
	return 0;
}