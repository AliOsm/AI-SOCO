//http://codeforces.com/contest/835/problem/D

#include <iostream>
#include <string>
#include <cmath>
#include <vector>
#include <algorithm>
#include <iterator>
#include <cstdlib>
#include <cstdio>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <list>

using namespace std;

typedef pair <int, int> pii;
typedef pair <long long, long long> pll;
typedef vector <int> vi;
typedef long long ll;

#define endl "\n"
#define mp make_pair
#define pb push_back

const long long p = 29, mod = 941083981;

string str, rstr;
long long h[5005], rh[5005], deg[5005];
int result[5005], m[5005][5005], r1, l1, k;

int start(int l, int r);
ll getHash(int l, int r);
ll getRHash(int l, int r);

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	
	cin >> str;

	rstr = str;
	reverse(rstr.begin(), rstr.end());

	deg[0] = 1;
	h[0] = str[0] - 'a' + 1;
	rh[str.size() - 1] = str[str.size() - 1] - 'a' + 1;

	for (int i = 1; i <= str.size(); i++)
		deg[i] = (deg[i - 1] * p) % mod;

	for (int i = 1; i < str.size(); i++) {
		h[i] = (h[i - 1] * p + (str[i] - 'a' + 1)) % mod;
		rh[str.size() - i - 1] = (rh[str.size() - i] * p + (str[str.size() - i - 1] - 'a' + 1)) % mod;
	}

	for (int i = 0; i <= 5000; i++) {
		for (int j = 0; j <= 5000; j++)
			m[i][j] = -1;
	}

	for (int i = 0; i < str.size(); i++) {
		for (int j = i; j < str.size(); j++) {
			if (m[i][j] == -1)
				start(i, j);
		}
	}
	
	for (int i = str.size(); i > -1; i--)
		result[i] += result[i + 1];

	for (int i = 1; i <= str.size(); i++)
		cout << result[i] << " ";

	cout << endl << endl;

	return 0;
}

ll getHash(int l, int r) {
	if (l == 0)
		return h[r];

	return ((h[r] - h[l - 1] * deg[r - l + 1]) % mod + mod) % mod;
}

ll getRHash(int l, int r) {
	if (r + 1 == str.size())
		return rh[l];
	
	return ((rh[l] - rh[r + 1] * deg[r - l + 1]) % mod + mod) % mod;
}

int start(int l, int r) {
	if (m[l][r] != -1)
		return m[l][r];

	if (l == 0 && r == 2)
		l = l;

	r1 = l + (r - l + 1) / 2 - 1;

	if ((r - l + 1) & 1)
		l1 = r1 + 2;
	else
		l1 = r1 + 1;

	if (l == r)
		l1 = r1 = l;

	m[l][r] = 0;

	if (l == 0 && r == 2)
		l = l;

	if (getHash(l, r) == getRHash(l, r))
		m[l][r] = 1;

	if (getHash(l, r1) != getHash(l1, r)) {
		result[m[l][r]]++;

		return m[l][r];
	}

	k = 0;
	
	if (r > l)
		k = start(l, r1);

	if (k != 0)
		m[l][r] = k + 1;

	result[m[l][r]]++;

	return m[l][r];
}