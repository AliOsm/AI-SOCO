#include <cstdio>
#include <vector>
#include <iostream>
#include <string>
#include <map>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

vector<vector<int > >v;
vector<vector<int> > dpth;
int p[17][100001];
int t;
int tin[100001];
int tout[100001];
int depthnum[100001];

int nextint()
{
	int t;
	scanf("%d",&t);
	return t;
}

void dfs(int cur,int d)
{
	depthnum[cur]=d;
	tin[cur]=t;
	t++;
	dpth[d].push_back(t);
	
	REP(i,v[cur].size())
		dfs(v[cur][i],d+1);
	t++;
	tout[cur]=t;
}

int get_nth_parent(int cur,int pnum)
{
	REP(i,17)
	{
		if(pnum&(1<<i))
		{
			cur=p[i][cur];
		}
	}
	return cur;
}

int get_nth_childrencnt(int cur,int n)
{
	n+=depthnum[cur];
	if(n>=dpth.size()) return 0;
	int lb;
	int rb;
	int l=0,r=dpth[n].size(),c;
	while(l<r)
	{
		c=(l+r)/2;
		if(dpth[n][c]>=tin[cur])
			r=c;
		else
			l=c+1;
	}
	lb=l;
	l=0,r=dpth[n].size();
	while(l<r)
	{
		c=(l+r)/2;
		if(dpth[n][c]>=tout[cur])
			r=c;
		else
			l=c+1;
	}
	rb=r;
	return rb-lb;
}

int main()
{
	int n;
	scanf("%d",&n);
	v.resize(n+1);
	REP(i,n)
	{
		p[0][i+1]=nextint();
		v[p[0][i+1]].push_back(i+1);
	}
	REP(i,16)
		REP(j,n+1)
			p[i+1][j]=p[i][p[i][j]];
	dpth.resize(n+1);
	dfs(0,0);
	int m=nextint();
	int pv=-1;
	while(m--)
	{
		int v=nextint();
		pv=v;
		int p=nextint();
		int p1,p2;
		p1=get_nth_parent(v,p);
		if(p1==0)
		{
			printf("%d ",0);
		}
		else
		{
			p2=get_nth_parent(v,p-1);
			printf("%d ",max(0,get_nth_childrencnt(p1,p)-1));//-get_nth_childrencnt(p2,p-1));
		}
	}
	puts("");
	return 0;
}
