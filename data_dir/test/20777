#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcountll(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

const int OO = (int) 1e9;
const double eps = 1e-9;

const int _7ABBA = 77;
const int MAXN = 100 + 2 + 900 + _7ABBA;
const int MAXM = (100 * 500 + 2) * 2 + _7ABBA;

int head[MAXN];
int nxt[MAXM], to[MAXM], cap[MAXM];
int edges;
int src, snk;

void init() {
	memset(head, -1, sizeof head);
	edges = 0;
}

void addEdge(int f, int t, int c) {
	nxt[edges] = head[f];
	to[edges] = t;
	cap[edges] = c;
	head[f] = edges++;
}

void addAugEdge(int f, int t, int c) {
	addEdge(f, t, c);
	addEdge(t, f, 0);
}

int vis[MAXN], vid;

int dfs(int cur, int MX) {
	if (vis[cur] == vid || MX == 0)
		return 0;
	vis[cur] = vid;
	if (cur == snk)
		return MX;
	for (int k = head[cur]; ~k; k = nxt[k]) {
		int t = to[k];
		int f = dfs(t, min(MX, cap[k]));
		if (!f)
			continue;
		cap[k] -= f;
		cap[k ^ 1] += f;
		return f;
	}
	return 0;
}

int maxFlow() {
	int ret = 0;
	if (src == snk)
		return OO;
	int f;
	for (vid++; (f = dfs(src, OO)), f; vid++)
		ret += f;
	return ret;
}

const int N = 102;

int a[N];
unordered_map<int, int> primeFactors[N];
int totalPrimes = 0;
int nodes;

void factorize(int x, int idx, bool flag) {
	for (int p = 2; p <= x / p; p++) {
		if (x % p == 0) {
			int cnt = 0;
			while (x % p == 0) {
				cnt++;
				x /= p;
			}
			if (primeFactors[idx].find(p) == primeFactors[idx].end()) {
				primeFactors[idx][p] = nodes + totalPrimes++;
			}
			if (flag) {
				addAugEdge(idx, primeFactors[idx][p], cnt);
			} else {
				addAugEdge(primeFactors[idx][p], idx, cnt);
			}
		}
	}
	if (x != 1) {
		if (primeFactors[idx].find(x) == primeFactors[idx].end()) {
			primeFactors[idx][x] = nodes + totalPrimes++;
		}
		if (flag) {
			addAugEdge(idx, primeFactors[idx][x], 1);
		} else {
			addAugEdge(primeFactors[idx][x], idx, 1);
		}
	}
}

int main() {
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
#ifndef ONLINE_JUDGE
//	freopen("in.txt", "rt", stdin);
//	freopen("out.txt", "wt", stdout);
#endif
	int n, m;
	cin >> n >> m;
	init();
	src = n, snk = n + 1;
	nodes = n + 2;
	for (int i = 0; i < n; i++) {
		cin >> a[i];
		if (i & 1) {
			factorize(a[i], i, 0);
			addAugEdge(i, snk, OO);
		} else {
			factorize(a[i], i, 1);
			addAugEdge(src, i, OO);
		}
	}
	for (int k = 0; k < m; k++) {
		int i, j;
		cin >> i >> j;
		i--, j--;
		if (i & 1)
			swap(i, j);
		int g = __gcd(a[i], a[j]);
		for (int p = 2; p <= g / p; p++) {
			if (g % p == 0) {
				while (g % p == 0) {
					g /= p;
				}
				addAugEdge(primeFactors[i][p], primeFactors[j][p], OO);
			}
		}
		if (g > 1)
			addAugEdge(primeFactors[i][g], primeFactors[j][g], OO);
	}
	cout << maxFlow() << endl;
	return 0;
}
