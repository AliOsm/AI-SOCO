#include <iostream>
#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define ll long long
#define F first
#define S second
#define PI acos(-1)
#define EPS 1e-9
#define BASE 53ll
#define ld long double
#define MAX 1000000000
#define NIL 0
#define INF 1e15
#define infi 1000000000ll;
#define rd(a) scanf("%d",&a)
#define rdll(a) scanf("%I64d",&a)
#define sz(a) (int) a.size()
#define lp(i,a,n) for(int i=(a); i<=(n) ; ++i)
#define lpd(i,n,a) for(int i=(n); i>=(a) ; --i)
#define pi acos(-1)

typedef complex<double>CX;
typedef pair<int,int>ii;
typedef pair<double,ii>node;
typedef pair<vector<int>,int>vii;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const int N=100001;

ll mod=1000000007;
ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
bool is_vowel(char c){if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||c=='y')return 1;return 0;}
double getDistance(double x1,double y1,double x2,double y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}
ll extended_euclidean(ll a,ll b,ll &x,ll &y){if(b==0){x=1;y=0;return a;}ll g = extended_euclidean(b,a%b,y,x);y -= (a/b)*x;return g;}
ll power(ll base,ll p){if(p==1)return base;if(!p)return 1ll;ll ret=power(base,p/2);ret*=ret;ret%=mod;if(p&1)ret*=base;return ret%mod;}

int d[105],p[105],c[105],n,m,id[105];
int state[105];
vector<int>add[105];
int main() {
  //freopen("test.in","r",stdin);
  cin>>n>>m;
  lp(i,0,m-1){
     cin>>p[i]>>d[i]>>c[i];
     id[d[i]]=i+1;
     state[d[i]]=m+1;
     add[p[i]].pb(i);
  }
  set<ii>st;/// finish,cnt
  for(int i=1;i<=n;i++){
      for(int j=0;j<add[i].size();j++){
           st.insert(ii(d[add[i][j]],c[add[i][j]]));
      }
      if(state[i]==m+1||st.empty())continue;
      ii now=*st.begin();
      st.erase(st.begin());
      now.S--;
      state[i]=id[now.F];
      if(now.S>0)st.insert(now);
  }
  if(st.size()){
    cout<<-1;
  }
  else{
        lp(i,0,m-1){
           int sum=0;
           lp(j,1,d[i]){
               if(state[j]==i+1)sum++;
           }
           if(sum!=c[i]) return cout<<-1 ,0;
        }
        lp(i,1,n)cout<<state[i]<<' ';
  }
  return 0;
}
