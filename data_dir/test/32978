#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<int, int> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

const int maxn = 2e5 + 5;

pii edges[maxn];

bool ok[maxn];

vector<pii> g[maxn];
int color[maxn];

bool good(){
	queue<int> Q;
	Q.push(1);
	color[1] = -1;
	while(!Q.empty()){
		int x = Q.front();Q.pop();
		for(auto &e : g[x]){
			int y = e.first;
			if(color[y] != 0 && color[y] == color[x])
				return false;
			if(color[y] == 0){
				if(color[x] == -1)
					color[y] = 1;
				else
					color[y] = -1;
				Q.push(y);
			}
		}
	}
	return true;
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	int n, m;
	cin >> n >> m;
	
	for(int i = 0, a, b; i < m; i++){
		cin >> a >> b;
		g[a].push_back({b, i});
		g[b].push_back({a, i});
		edges[i] = {a, b};
	}
	
	if(!good()){
		cout << "NO" << endl;
		return 0;
	}
	
	for(int i = 0; i < m; i++){
		int u = edges[i].first;
		int v = edges[i].second;
		
		if(color[v] == -1)
			ok[i] = true;
	}
	
	cout << "YES" << endl;
	for(int i = 0; i < m; i++)
		cout << (ok[i] ? "1" : "0");
	cout << endl;	

	return 0;
}
