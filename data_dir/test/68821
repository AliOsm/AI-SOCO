#include<iostream>
#include<algorithm>
#include<map>
#include<queue>
#include<vector>

#define MP make_pair
#define PB push_back
#define F first
#define S second

using namespace std;

const int MAXN = 100005;
int x[MAXN], y[MAXN], z[MAXN], dist[MAXN], pre[MAXN], sh[MAXN], dp[MAXN];
map<int, int> m[MAXN];
queue<int> q;
vector<pair<int, int> > v[MAXN];
bool mark[MAXN];
int n, e;

void enque(int x, int y, int t)
{
	dist[x] = dist[y] + 1;
	pre[x] = y;
	q.push(x);
	dp[x] = dp[y] + t;
	mark[x] = true;
}

void BFS(int s)
{
	enque(s, 0, 0);
	while(!q.empty())
	{
		int x = q.front();
		q.pop();
		for(int i = 0; i < v[x].size(); i++)
			if(!mark[v[x][i].S])
				enque(v[x][i].S, x, v[x][i].F);
			else if(mark[v[x][i].S] && dist[v[x][i].S] == dist[x] + 1 && dp[v[x][i].S] > dp[x] + v[x][i].F)
			{
				dp[v[x][i].S] = dp[x] + v[x][i].F;
				pre[v[x][i].S] = x;
			}
	}
}

int main()
{
	cin >> n >> e;
	for(int i = 0; i < e; i++)
	{
		cin >> x[i] >> y[i] >> z[i];
		z[i] = 1 - z[i];
		x[i]--, y[i]--;
		v[x[i]].PB(MP(z[i], y[i]));
		v[y[i]].PB(MP(z[i], x[i]));
	}
	for(int i = 0; i < n; i++)
		sort(v[i].begin(), v[i].end());
	BFS(0);
	int t = n - 1;
	while(t != 0)
	{
		m[t][pre[t]] = m[pre[t]][t] = 1;
		t = pre[t];
	}
	int ans = 0;
	for(int i = 0; i < e; i++)
		if((z[i] == 1 && m[x[i]][y[i]]) || (z[i] == 0 && !m[x[i]][y[i]]))
			ans++;
	cout << ans << endl;
	for(int i = 0; i < e; i++)
		if((z[i] == 1 && m[x[i]][y[i]]) || (z[i] == 0 && !m[x[i]][y[i]]))
			cout << x[i] + 1 << ' ' << y[i] + 1 << ' ' << z[i] << endl;
	return 0;
}
