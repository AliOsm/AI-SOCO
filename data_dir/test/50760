#include <bits/stdc++.h>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef unsigned int uint;
typedef long double ld;
//#define ll __int128
#define int ll
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
typedef vector<int> vi;
typedef vector< vi > vvi;
typedef vector< vvi > vvvi;
typedef vector<pii> vpi;
typedef vector<ll> vl;
typedef vector<string> vs;
typedef vector<vl> vvl;
typedef vector<vvl> vvvl;
typedef vector<ld> vld;
typedef vector<vld> vvld;

#define inmin(a, b) a = min(a, (b))
#define inmax(a, b) a = max(a, (b))
#define mp(a,b) make_pair(a,b)
#define modsum(a, b) ((a) + (b) >= M ? (a) + (b) - M : (a) + (b))
#define modsubtract(a, b) ((a) - (b) < 0 ? (a) - (b) + M : (a) - (b))
#define modmultiply(a, b) (((a) * (b)) % M)
#define ALL(a) a.begin(),a.end()
#define RALL(a) a.rbegin(),a.rend()
#define sqr(x) ((x) * (x))
#define fori(i, n) for(int i = 0; i < int(n); ++i)
#define cint const int &
#define SZ(a) ((int)(a.size()))
#define watch(x) cout << (#x) << " = " << x << endl;

const double PI = atan2(1, 0) * 2;

const string DIGITS = "0123456789";
const string ALPH = "abcdefghijklmnopqrstuvwxyz";


template<class T>
ostream & operator << (ostream &out, vector<T> &a) {
    out << "{";
    for (auto x : a) out << x << " ";
    return out << "}";
}

void smain();

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);


#ifdef ART_HOME
    freopen("input.txt", "r", stdin);
    clock_t start = clock();
#endif
    cout << setprecision(12) << fixed;
    smain();
#ifdef ART_HOME
    cout << "\n\n\n";
    cout << "TOTAL EXECUTION TIME: " << float(clock() - start) / CLOCKS_PER_SEC << endl;
#endif
}


const int N = 1 << 17, B = 100;
const ld pi = atan2(1, 0) * 2;

int used[N], n, in[N];
vpi vertices[N];
vector<tuple<int, int, int>> edge;


bool dfs(int v, int m, int col)
{
    bool label = 0;
    used[v] = col;
    in[v] = 1;

    for (auto p : vertices[v])
    {
        if (!used[p.first] && p.second > m)
            label = max(label, dfs(p.first, m, col));
        else if (in[p.first] == 1 && p.second > m)
            label = 1;
    }

    in[v] = 2;
    return label;
}


bool check(int m)
{
    fill(used, used + N, 0);
    fill(in, in + N, 0);
    bool label = 0;
    int col = 1;

    for (int i = 1; i <= n; ++i)
        if (!used[i])
            label = max(label, dfs(i, m, col++));

    if (label)
        return false;;

    return true;
}


vi order;


void dfs2(int v, int r, int c) {
    used[v] = 1;
    for (auto p : vertices[v])
    {
        if (!used[p.first] && p.second > r)
            dfs2(p.first, r, c);
    }

    order.push_back(v);
}




void solution(int r)
{
    cout << r << ' ';
    fill(used, used + N, 0);

    for (int i = 1; i <= n; ++i)
        if (!used[i]) {
            dfs2(i, r, i);
        }

    reverse(ALL(order));

    map<int, int> ps;
    for (int i = 0; i < n; ++i)
        ps[order[i]] = i;

    vi ans;
    for (int i = 0; i < SZ(edge); ++i)
    {
        int a, b, c;
        tie(a, b, c) = edge[i];

        if (ps[a] > ps[b])
            ans.push_back(i + 1);
    }

    cout << SZ(ans) << '\n';

    for (int v : ans)
        cout << v << ' ';
}


void smain() {

    int m;
    cin >> n >> m;
    edge.resize(m);

    for (int i = 0; i < m; ++i)
    {
        int a, b, c;
        cin >> a >> b >> c;
        vertices[a].push_back(mp(b, c));
        edge[i] = make_tuple(a, b, c);
    }


    int l = -1, r = 1e9 + 10;
    while (r - l > 1)
    {
        int m = (l + r) >> 1;

        if (check(m))
            r = m;
        else
            l = m;
    }

    solution(r);
}