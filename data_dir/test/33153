/* Author: Dhruv Rastogi */
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define int long long
#define all(sdk) sdk.begin(),sdk.end()
#define mll map<int, int>
#define pb push_back
#define rep(i,a,b) for(int i=a;i<b;++i)
#define repd(i,a,b) for(int i=a;i>=b;--i)
#define mp make_pair
#define hell 1000000007
#define endl '\n'
#define vvll vector<vector<int> >
#define vll vector<int>
#define mint map<int,int> 
#define sz(x) (int)x.size()
#define sll set<int>
#define pll pair<int,int>
#define F first
#define S second
const long double PI = acos(-1.0);

int dp[2005][2005][2];
string a[2005];
//dp[i][j][0] means no. of ways to reach (i,j) if the last move was down
//dp[i][j][1] means no. of ways to reach (i,j) if the last move was right
int BIT[2005][2005][2];
void update(int x,int y,int delta,int type)
{
      for(; x < 2005; x += x&-x)
        BIT[x][y][type] += delta;
}
int query(int x,int y,int type)
{
     int sum = 0;
     for(; x > 0; x -= x&-x)
        sum += BIT[x][y][type];
     return sum;
}

int aage[2005][2005];
int niche[2005][2005];
void solve(){  	
	int n,m;
	cin>>n>>m;
	rep(i,0,n) cin>>a[i];
	rep(i,1,n+1){
		int cnt=0;
		repd(j,m,1){
			aage[i][j]=cnt;
			if(a[i-1][j-1]=='R'){
				++cnt;
			}
		}
	}
	rep(j,1,m+1){
		int cnt=0;
		repd(i,n,1){
			niche[i][j]=cnt;
			if(a[i-1][j-1]=='R'){
				++cnt;
			}
		}
	}
	update(1,1,1,1);
	update(1,1,1,0);
	dp[1][1][0]=1;
	dp[1][1][1]=1;
	rep(i,1,n+1){
		rep(j,1,m+1){
			int lo=0;
			int hi=j;
			while(hi-lo>1){
				int mid=(hi+lo)/2;
				if(aage[i][mid]<=m-j){
					hi=mid;
				}
				else lo=mid;
			}
			dp[i][j][1]=query(j-1,i,0)-query(hi-1,i,0);
			dp[i][j][1]%=hell;

			lo=0;
			hi=i;
			while(hi-lo>1){
				int mid=(lo+hi)/2;
				if(niche[mid][j]<=n-i){
					hi=mid;
				}
				else lo=mid;
			}
			dp[i][j][0]=query(i-1,j,1)-query(hi-1,j,1);
			dp[i][j][0]%=hell;

			update(i,j,dp[i][j][1],1);
			update(j,i,dp[i][j][0],0);
		}
	}
	if(n==1 and m==1) cout<<1<<endl;
	else
	cout<<(dp[n][m][0]+dp[n][m][1])%hell<<endl;
}

signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int t=1;
    // cin>>t;
    while(t--){
        solve();
    }
    return 0;
}