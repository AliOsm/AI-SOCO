/*
    NO 
        TIME 
            TO 
                DIE
                    --007
                            */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli mod=1e9+7;
#define OS //single input use oeis
lli INF=1e17;
lli eps=1e-8;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,z,k,x,m,d,y,q,b,c;
const double pi=3.14159265358979323846;
lli add(lli a, lli b) {
 	lli res = a + b;
 
 	while (res >= mod) res -= mod;
 
 	while (res < 0) res += mod;
 
 	return res;
}
 lli me(lli a,lli b)
{
    lli res=1;
    while(b)
    {
        if(b&1)
        res=(res%mod*a%mod)%mod;
        a=a*a;
        a%=mod;
        b=b>>1;
    }
    return res;
}
lli mI(lli a)
{
    return (me(a,mod-2)%mod+mod)%mod;
}
bool cmp(ll a,ll b)
{
    if(a.first==b.first)
    return a.second>b.second;
    return a.first<b.first;
}
struct edge
{
    lli x,y,z;
    bool operator<(const edge &jj) const{
        // your main logic for the comparator goes here
        return make_pair(x,y) < make_pair(jj.x, jj.y);
    }
};
// double dp[100005];
lli dp[55][2005];
int main()
{
 IO;
 OS;
 lli t;
 cin>>t;
 for(int i=1;i<=t;i++)
 {
     cin>>n;
     set<lli> v[n+1];
     for(int j=1;j<=n;j++)
     {
         lli k;
         cin>>k;
         for(int jj=1;jj<=k;jj++)
         {
             lli x;
             cin>>x;
             v[j].insert(x);
         }
     }
     lli vis[n+1];
     mem1(vis,0);
     lli vis1[n+1];
     mem1(vis1,0);
     set<lli> ss;
     for(int j=1;j<=n;j++)
     ss.insert(j);
     lli cnt=0;
     for(int j=1;j<=n;j++)
     {
         lli idx=-1;
         for(auto &j: v[j])
         {
             if(!vis[j])
             {
                 vis[j]=1;
                 idx=j;
                 break;
             }
         }
         if(idx>0)
         {
             vis1[j]=1;
             ss.erase(idx);
             cnt++;
         }
     }
     if(cnt==n)
     cout<<"OPTIMAL\n";
     else
     {
     lli fg,ff;
     for(int j=1;j<=n;j++)
     {
         if(!vis1[j])
         {
             ff=j;
             fg=*ss.begin();
             break;
         }
     }
     cout<<"IMPROVE\n";
     cout<<ff<<" "<<fg<<"\n";
     }
 }
}