#include<bits/stdc++.h>

#define SZ(x) ((int(x.size())))

typedef long long ll;

using namespace std;

const int maxn = 510;
bool mark[maxn][maxn], park[maxn];
int n, u, v, deg[maxn], x[maxn], m, ind, t, e;
char s[maxn];
vector <int> vec[maxn];

inline bool cmp (const int &a, const int &b)
{
    return deg[a] > deg[b];
}

void dfs (int w)
{
    park[w] = 1;
    t++;
    for (int i = 0; i < SZ(vec[w]); i++)
    {
        if (!park[vec[w][i]])
            dfs (vec[w][i]);
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> m;
    for (int i = 0; i < m; i++)
    {
        cin >> u >> v;
        u--;
        v--;
        deg[u]++;
        deg[v]++;
        mark[u][v] = mark[v][u] = 1;
    }
    for (int i = 0; i < n; i++)
        x[i] = i;
    sort (x, x + n, cmp);
    while (ind < n && deg[x[ind]] == n - ind - 1)
    {
        s[x[ind]] = 'b';
        for (int i = 0; i < n; i++)
        {
            if (mark[i][x[ind]])
            {
                deg[i]--;
                mark[i][x[ind]] = mark[x[ind]][i] = 0;
            }
        }
        ind++;
    }
    if (ind == n)
    {
        cout << "Yes" << endl;
        for (int i = 0; i < n; i++)
            cout << s[i];
        return 0;
    }
    for (int i = ind; i < n; i++)
    {
        for (int j = i + 1; j < n; j++)
        {
            if (mark[x[i]][x[j]])
            {
                e++;
                vec[x[i]].push_back (x[j]);
                vec[x[j]].push_back (x[i]);
            }
        }
    }
    dfs (x[ind]);
    if (e != t * (t - 1) / 2 + (n - ind - t) * (n - ind - t - 1) / 2)
    {
        cout << "No";
        return 0;
    }
    for (int i = ind; i < n; i++)
    {
        if (park[x[i]])
            s[x[i]] = 'a';
        else
            s[x[i]] = 'c';
    }
    cout << "Yes" << endl;
    for (int i = 0; i < n; i++)
        cout << s[i];
	return 0;
}
