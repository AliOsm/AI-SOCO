
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <ctime>
#include <random>
#include <iomanip>

#include <algorithm>
#include <vector>
#include <queue>
#include <string>
#include <stack>
#include <set>
#include <map>
#include <numeric>
#include <functional>
#include <deque>
#include <array>
#include <iterator>
#include <bitset>
#include <initializer_list>

using namespace std;

#include <ext/rope>

using namespace __gnu_cxx;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;

#define int long long


typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VPI;


#define add push_back
#define rem pop_back
#define ALL(x) x.begin(), x.end()
#define SORT(x) sort(ALL(x))
#define SZ(x) int((x).size())
#define F first
#define S second
#define DEBUG(x) cout << #x << " " << x << endl;
#define forn(i, a, b) for(int i = a; i <= b; i++)


const double EPS = 1e-9;
const double PI = acos ( -1. );
const int MOD = 1e9 + 7;
const int MAXN = 500001;
int INF = __INT64_MAX__;
int MAX = -1e18;
int MIN = 1e18;
string YN[] = {"NO", "YES"};


#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))


inline int GCD_E ( int a, int b, int & x, int & y )
{
        if ( !a ) {
                x = 0;
                y = 1;
                return b;
        }
        int x1, y1;
        int d = GCD_E ( b % a, a, x1, y1 );
        x = y1 - ( b / a ) * x1;
        y = x1;
        return d;
}


inline int divMOD ( int a, int b, int m = MOD )
{
        int x, y;
        int g = GCD_E ( b, m, x, y );
        x = ( x % m + m ) % m;
        return ( a * x ) % m;
}


int px[] = { 1, 1, -1, -1 };
int py[] = { -1, 1, -1, 1};
int dx[] = { 1, 0, -1, 0, 1, 1, -1, -1 };
int dy[] = { 0, 1, 0, -1, 1, -1, 1, -1 };
int fx[] = {-2, -2, -1, -1,  1,  1,  2,  2};
int fy[] = {-1,  1, -2,  2, -2,  2, -1,  1};


template<typename T1, typename T2> auto max ( T1 a, T2 b ) { auto max = a > b ? a : b; return max; }
template<typename T1, typename T2> auto min ( T1 a, T2 b ) { auto min = a < b ? a : b; return min; }


int POW ( int a, int n, int m = MOD )
{
        int res = 1;
        while ( n ) {
                if ( n & 1 )
                        res = ( res * a ) % m;
                a = ( a * a ) % m;
                n >>= 1;
        }
        return res;
}


//tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> tr;

vector<int> vc;

string s, t;

set<int> st;


static const int N = 1 << 20;
static const int M = 123456;

static int n, m, k, res, cnt;
static int A[N], B[N];


void solution()
{
        cin >> n;
        int prev = -1;
        forn ( i, 1, n / 2 ){
                cin >> A[i];
                if ( prev == -1 ){
                        B[i] = 0;
                        B[n - i + 1] = A[i];
                        prev = 0;
                }else{
                        if ( A[i] > A[i - 1] ){
                                prev = A[i] - A[i - 1] + prev;
                        }
                        B[i] = prev;
                        B[n - i + 1] = A[i] - prev;
                }
        }
        forn ( i, 1, n )
                cout << B[i] << " ";




}


__INT16_C() main ( __int32 argc, char * argv[] )
{

        //freopen("input.txt", "r", stdin);
        //freopen("output.txt", "w", stdout);

        ios_base::sync_with_stdio ( false ); cin.tie ( nullptr ); cout.tie ( nullptr );
        //cout.precision(15);

        int query = 1;
        //cin >> query;

        while ( query-- ) solution();

}
