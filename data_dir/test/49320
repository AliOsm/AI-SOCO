#include <bits/stdc++.h>
using namespace std;
const int N = (1 << 20) + 10, M = 20 + 1;
int n, m, cnt[M][M], dp[N], sum[N];
string s;
int main() {
	cin >> n >> m;
	cin >> s;
	for (int i = 1; i < s.size(); i++) {
		cnt[s[i] - 'a'][s[i - 1] - 'a']++;
		cnt[s[i - 1] - 'a'][s[i] - 'a']++;
	}
	memset(dp, 127, sizeof(dp));
	for (int i = 0; i < m; i++)
		cnt[i][i] = 0;
	for (int mask = 1; mask < (1 << m); mask++) {
		int p = 0;
		for (int i = 0; i < m; i++) 
			if ((mask >> i) & 1) {
				p = i;
				break;
			}
		int rn = sum[mask ^ (1 << p)];
		for (int i = 0; i < m; i++) {
			if ((mask >> i) & 1)
				rn -= cnt[i][p];
			else
				rn += cnt[i][p];
		}
		sum[mask] = rn;
	}
	dp[0] = 0;
	for (int mask = 0; mask < (1 << m); mask++) {
		for (int i = 0; i < m; i++)
			if (!((mask >> i) & 1)) {
				int rn = mask ^ (1 << i);
				dp[rn] = min(dp[rn], dp[mask] + sum[rn]); 
			}
	}
	cout << dp[(1 << m) - 1];
	return 0;
}
