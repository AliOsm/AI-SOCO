#include <cstdio>
#include <vector>
using namespace std;
char a[2010][2010], b[2010][2010], s[2010];
vector<int> e[8010];
int n;
inline int R(int k, int f) {
	return k + f * 2 * n;
}
inline int C(int k, int f) {
	return k + n + f * 2 * n;
}
int d[8010], low[8010], in[8010], st[8010], stn, g[8010], gn, c;
void dfs(int v) {
	d[v] = low[v] = ++c;
	in[v] = 1;
	st[stn++] = v;
	for (int i = 0; i < e[v].size(); i++) {
		int w = e[v][i];
		if (!d[w]) {
			dfs(w);
			if (low[v] > low[w]) low[v] = low[w];
		} else if (in[w]) {
			if (low[v] > d[w]) low[v] = d[w];
		}
	}
	if (d[v] != low[v]) return;
	++gn;
	do {
		in[st[--stn]] = 0;
		g[st[stn]] = gn;
	} while (st[stn] != v);
}
int main() {
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%s", a[i]);
	}
	for (int i = 0; i < n; i++) {
		scanf("%s", b[i]);
	}
	scanf("%s", s);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			int k = a[i][j] != b[i][j], rc = s[j] == '1', cc = s[i] == '1';
			if (k) {
				if (!rc && !cc) {
					puts("-1");
					return 0;
				}
				if (rc && cc) {
					e[R(i, 0)].push_back(C(j, 1));
					e[R(i, 1)].push_back(C(j, 0));
					e[C(j, 0)].push_back(R(i, 1));
					e[C(j, 1)].push_back(R(i, 0));
				} else if (rc) {
					e[R(i, 0)].push_back(R(i, 1));
				} else if (cc) {
					e[C(j, 0)].push_back(C(j, 1));
				}
			} else {
				if (rc && cc) {
					e[R(i, 0)].push_back(C(j, 0));
					e[R(i, 1)].push_back(C(j, 1));
					e[C(j, 0)].push_back(R(i, 0));
					e[C(j, 1)].push_back(R(i, 1));
				} else if (rc) {
					e[R(i, 1)].push_back(R(i, 0));
				} else if (cc) {
					e[C(j, 1)].push_back(C(j, 0));
				}
			}
		}
	}
	for (int i = 0; i < 4 * n; i++) {
		if (!d[i]) dfs(i);
	}
	vector<int> v;
	for (int i = 0; i < 2 * n; i++) {
		if (g[i] == g[i+2*n]) {
			puts("-1");
			return 0;
		}
		if (g[i] > g[i+2*n]) {
			v.push_back(i);
		}
	}
	printf("%d\n", v.size());
	for (int i = 0; i < v.size(); i++) {
		if (v[i] < n) {
			printf("row %d\n", v[i]);
		} else {
			printf("col %d\n", v[i] - n);
		}
	}
	return 0;
}
