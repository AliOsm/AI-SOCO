#include <bits/stdc++.h>
using namespace std;
struct Bor{
	int cnt;
	Bor *zero;
	Bor *one;
	Bor(){
		cnt = 0;
		zero = NULL;
		one = NULL;
	}
	void Add(Bor *vertex, int value){
		for (int bit=30; bit>=0; bit--){
			if (value & (1 << bit)){
				if (vertex->one == NULL){
					vertex->one = new Bor();
				}
				vertex->one->cnt++;
				vertex = vertex->one;
			}
			else{
				if (vertex->zero == NULL){
					vertex->zero = new Bor();
				}
				vertex->zero->cnt++;
				vertex = vertex->zero;
			}
		}
	}
	void Remove(Bor *vertex, int value){
		for (int bit=30; bit>=0; bit--){
			if (value & (1 << bit)){
				vertex->one->cnt--;
				if (vertex->one->cnt == 0){
					vertex->one = NULL;
					break;
				}
				vertex = vertex->one;
			}
			else{
				vertex->zero->cnt--;
				if (vertex->zero->cnt == 0){
					vertex->zero = NULL;
					break;
				}
				vertex = vertex->zero;
			}
		}
	}
	int Solve(Bor *vertex, int value){
		int ans = 0;
		for (int bit=30; bit>=0; bit--){
			if (value & (1 << bit)){
				if (vertex->zero != NULL){
					ans = ans + (1 << bit);
					vertex = vertex->zero;
				}
				else{
					vertex = vertex->one;
				}
			}
			else{
				if (vertex->one != NULL){
					ans = ans + (1 << bit);
					vertex = vertex->one;	
				}
				else{
					vertex = vertex->zero;
				}
			}
		}
		return ans;
	}
};
int main(){
	// freopen("input.txt", "r", stdin);
	// freopen("output.txt", "w", stdout);
	ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	int q;
	cin>>q;
	Bor *root = new Bor();
	root->Add(root, 0);
	for (int i=1; i<=q; i++){
		char type;
		int value;
		cin>>type>>value;
		if (type == '+'){
			root->Add(root, value);
		}
		else if (type == '-'){
			root->Remove(root, value);
		}
		else{
			int ans = root->Solve(root, value);
			cout<<ans<<'\n';
		}
	}
}