#include <bits/stdc++.h>
using namespace std;

#define mp make_pair
#define pb push_back

typedef long long ll;
typedef pair<int, int> pii;

int n, m;
string s;
string t[100010];
int nxt[1000100][26];
int leaf[1000100];
int sz = 1;

void insert(string &t, int id) {
  int cur = 0;
  for (int i = 0; i < (int)t.size(); ++i) {
    int c = tolower(t[i]) - 'a';
    if (nxt[cur][c] == -1) {
      nxt[cur][c] = sz++;
    }
    cur = nxt[cur][c];
  }
  leaf[cur] = id;
}

int dp[10010];
int p[10010];

int main() {
#ifdef LOCAL
  freopen("input.txt", "r", stdin);
#endif
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  memset(nxt, 0xff, sizeof nxt);
  cin >> n >> s;
  cin >> m;
  for (int i = 1; i <= m; ++i) {
    cin >> t[i];
    insert(t[i], i);
  }
  for (int i = 0; i < n; ++i) {
    int cur = 0;
    int j = i;
    while (true) {
      int c = tolower(s[j]) - 'a';
      if (nxt[cur][c] != -1) {
        cur = nxt[cur][c];
      } else break;
      if (leaf[cur] && (j == 0 || dp[j - 1])) {
        dp[i] = leaf[cur];
        break;
      }
      --j;
      if (j < 0) break;
    }
  }
  if (dp[n - 1]) {
    vector<int> ans;
    int pos = n - 1;
    while (pos >= 0) {
      ans.pb(dp[pos]);
      pos -= t[dp[pos]].size();
    }
    reverse(ans.begin(), ans.end());
    for (int i = 0; i < (int)ans.size(); ++i) {
      cout << t[ans[i]];
      if (i + 1 < (int)ans.size()) {
        cout << ' ';
      } 
    }
  } else {
    assert(false);
  }
  return 0;
}