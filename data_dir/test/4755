// https://codeforces.com/problemset/problem/214/B

// Mistake : I am not using the number theory tricks that if a number is divisible by both 2 and 5 ; then it is
// divisible by 10 ; hence number should contain at least one zero

// Mistake 2 : Started to think about that if a number is divisible by 2,3,5 ; it should be divisible by 30 ;
// and started to think in string modulo direction ( where a large number is given in form of string ; and we
// calculate its modulo wrt some 'mod'

#include<bits/stdc++.h>
using namespace std;

# define C continue;
# define R return

# define D double
# define I insert
# define ll long long
# define ld long double

# define ull unsigned long long
# define ui unsigned int

# define pb push_back
# define pf push_front

# define vi vector < int >
# define vc vector < char >
# define vs vector < string >
# define vb vector < bool >
# define vd vector < D >
# define vll vector < ll >
# define vull vector < ull >
# define vld vector < ld >

# define vvi vector < vector < int > >
# define vvb vector < vector < bool > >
# define vvc vector < vector < char > >
# define vvll vector < vector < ll > >
# define vvd vector < vector < D > >
# define vvld vector < vector < ld > >

# define all(v) (v).begin() , (v).end()
# define allrev(v) (v).rbegin() , (v).rend()
# define allcomp(v) v.begin() , v.end() , comp
# define allrevcomp(v) v.rbegin() , v.rend() , comp

# define pii pair < int , int >
# define pll pair < ll , ll >
# define pld pair < ld , ld >
# define pDD pair < D , D >

# define vpld vector < pld >
# define vpii vector < pii >
# define vpll vector < pll >
# define vpDD vector < pDD >

# define vvpii vector < vector < pii > >
# define F first
# define S second
# define mp make_pair

# define dist(a,b,p,q) sqrt((p-a)*(p-a) + (q-b)*(q-b))

# define pp(n) printf("%.10Lf",n);
# define line cout<<"\n";
# define fast ios_base::sync_with_stdio(false) ; cin.tie(0) ; cout.tie(0);

string vow = "aeiou";

const int dxhorse[] = {-2, -2, -1, -1, 1, 1, 2, 2};
const int dyhorse[] = {1, -1, 2, -2, 2, -2, 1, -1};

const int dx[] = { -1 , 0 , 0 , 1 } ;
const int dy[] = { 0 , -1 , 1 , 0 } ;

const ld pie = 3.14159265358979 ;
const ll mod = 1e9 + 7 ;

void print ( vi &v )
{
    if ( v.back() == -1 ) v.pop_back() ; if ( v.back() == -1 ) v.pop_back() ;
    reverse ( all ( v ) ) ;
    if ( v[0] == 0 ) { cout << 0 ; line ; exit ( 0 ) ; }

    for ( auto i : v )
    {
        if ( i == -1 ) C ;
        cout << i ;
    }

    exit ( 0 ) ;
}

void solve ( int test_case )
{
    int n ; cin >> n ;
    vi v ( n ) ;
    for ( int i=0 ; i < n ; i++ ) cin >> v[i] ;

    sort ( all ( v ) ) ;
    if ( v[0] != 0 ) { cout << -1 ; line ; return ; }
    if ( v[n-1] == 0 ) { cout << 0 ; line ; return ; } // only zeros

    int sum = 0 ;
    for ( auto i : v ) sum += i ;

    sum %= 3 ;

    if ( sum == 0 ) print(v) ;
    else
    {
        int i=0 ;
        for ( ; i < n && v[i] % 3 != sum ; i++ ) ;

        if ( i < n ) { v[i] = -1 ; print(v) ; }
        else
        {
            // we need to delete two minimum digits
            if ( sum == 1 ) sum = 2 ;
            else sum = 1 ;

            for ( int c = 0 , i = 0 ; c < 2 && i < n ; i ++ )
            {
                int d = v[i] % 3 ;
                if ( d == sum )
                    c ++ , v[i] = -1 ;
            }

            print ( v ) ;
        }
    }
}

int main()
{fast
    int t = 1;
    // cin >> t;

    for ( int i=0 ; i < t ; i++ ) solve(i);
    return 0;
}
