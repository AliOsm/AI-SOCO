#define _CRT_SECURE_NO_WARNINGS
//#pragma comment(linker, ”/STACK:1000000000“)

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>

//#include <cstdint>
//#include <cstdlib>
#include <cassert>
//#include <cctype>
#include <climits>
#include <functional>
#include <numeric>
#include <algorithm>
#include <cmath>
#include <ctime>

#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <array>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); i++)
#define forn1(i, n) for(int i = 1; i <= int(n); i++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define mp make_pair
#define pb push_back
#define x first
#define y second

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld PI = acosl(ld(-1));
const ld EPS = 1e-9;

template <typename T> inline T sqr(const T& x) {
	return x * x;
}

template <typename T> inline T abs(const T& x) {
	return x > 0 ? x : -x;
}

inline bool inside(int x, int y, int n, int m) {
	return x >= 0 && x < n && y >= 0 && y < m;
}

inline int rnd() {
	return abs(rand() ^ (rand() << 15));
}

inline int rnd(int n) {
	assert(n > 0);
	return rnd() % n;
}

inline int rnd(int lf, int rg) {
	return lf + rnd(rg - lf + 1);
}

inline li rndLL() {
	return rnd() * 1LL * rnd() + rnd();
}

const int dx[4] = { -1, 0, +1, 0 };
const int dy[4] = { 0, +1, 0, -1 };

const int dx8[8] = { -1, -1, 0, +1, +1, +1, 0, -1 };
const int dy8[8] = { 0, +1, +1, +1, 0, -1, -1, -1 };

const int N = int(22);

int n, m;
int msk[N];

void gen() {
}

bool read() {
	if (!(cin >> n >> m)) return false;
	forn(i, m) {
		int u, v;
		assert(cin >> u >> v);
		u--, v--;
		msk[u] |= (1 << v);
		msk[v] |= (1 << u);
	}
	return true;
}

int dp[(1 << N)];
int from[(1 << N)];
int who[(1 << N)];

void print(int mask) {
	forn(i, n) if (mask & (1 << i)) cerr << i << ' '; cerr << endl;
}

void solve() {
	forn(i, n) msk[i] |= (1 << i);
	forn(i, (1 << n)) dp[i] = INF;
	forn(i, n) dp[(1 << i)] = 0;

	forn(mask, (1 << n)) {
		bool ok = true;
		forn(i, n) if (mask & (1 << i)) {
			if ((msk[i] & mask) != mask) ok = false;
		}

		if (ok) dp[mask] = 0;
	}

	int x = 1;
	forn(i, 22) x *= 3;
	cerr << x << ' ' << x / 1000000 << endl;
	forn(mask, (1 << n)) {
		int cur = dp[mask];
		if (cur == INF) continue;
		forn(i, n) if (mask & (1 << i)) {
			if (cur + 1 < dp[mask | msk[i]]) {
				dp[mask | msk[i]] = cur + 1;
				from[mask | msk[i]] = mask;
				who[mask | msk[i]] = i;
			}
		}
	}

	int ans = dp[(1 << n) - 1];
	assert(ans < INF);
	cout << ans << endl;
	vector<int> res;
	int mm = (1 << n) - 1;
	while (dp[mm] != 0) {
		print(mm);
		cerr << dp[mm] << endl;
		res.push_back(who[mm]);
		mm = from[mm];
	}

	reverse(all(res));
	forn(i, sz(res)) cout << res[i] + 1 << ' '; cout << endl;
}

//#undef _DEBUG

int main() {
#ifdef _DEBUG
	assert(freopen("777.txt", "rt", stdin));
	assert(freopen("output.txt", "wt", stdout));
#endif

	cout << setprecision(10) << fixed;
	cerr << setprecision(10) << fixed;

	int T = 1;

	srand(int(time(NULL)));

	//assert(scanf("%d", &T) == 1);

	forn(i, T) {
#ifdef _DEBUG
		cerr << "TEST == " << i << endl;
#endif

		assert(read());
		//cout << "Case #" << i + 1 << ": ";
		solve();
		//if(i == 1) break;
#ifdef _DEBUG
		cerr << "curTime == " << clock() << " ms" << endl;
#endif
	}

#ifdef _DEBUG
	cerr << "TIME == " << clock() << " ms" << endl;
#endif
	return 0;
}