#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <cstdlib>
#include <utility>
#include <memory.h>
#include <cassert>
#include <iterator>
#include <bitset>
#include <iomanip>
#include <complex>
#include <queue>
#include <ctime>
#include <deque>
#include <stack>
#include <set>
#include <map>
 
using namespace std;
 
#define pb push_back
#define mp make_pair
#define F first
#define S second

using namespace std;

const int N = 200500;

int n, m, k;
int timer = 0;
int psum[N];
int lca[22][N];
bool used[N];
int u[N];
int v[N];
bool bridge[N];
int who[N];
int fup[N];
int tin[N], tout[N];
vector< pair<int, int> > g[N];

void dfs(int ver) {
	who[ver] = timer;
	for (int i = 0; i < (int)g[ver].size(); i++) {
		int to = g[ver][i].F;
		if (who[to] == 0) {
			dfs(to);
		}
	}
}

void dfs(int ver, int prev) {
	++timer;
	tin[ver] = fup[ver] = timer;
	used[ver] = true;
	for (int i = 0; i < (int)g[ver].size(); i++) {
		int to = g[ver][i].F;
		if (to == prev) {
			continue;
		}
		if (used[to]) {
			fup[ver] = min(fup[ver], tin[to]);
		} else {
			dfs(to, ver);
			fup[ver] = min(fup[ver], fup[to]);
			if (fup[to] > tin[ver]) {
				bridge[g[ver][i].S] = true;
			}
		}
	}
}

void dfs_lca(int ver, int prev) {
	++timer;
	tin[ver] = timer;
	lca[0][ver] = prev;
	psum[ver] = psum[prev] + 1;
	for (int i = 1; i <= 20; i++) {
		lca[i][ver] = lca[i - 1][lca[i - 1][ver]];
	}
	for (int i = 0; i < (int)g[ver].size(); i++) {
		int to = g[ver][i].F;
		if (to == prev) continue;
		dfs_lca(to, ver);
	}
	tout[ver] = ++timer;
}

bool upper(int a, int b) {
	return tin[a] <= tin[b] && tout[b] <= tout[a];
}

int get_lca(int a, int b) {
	if (upper(a, b)) return a;
	if (upper(b, a)) return b;
	for (int i = 20; i >= 0; --i) {
		if (!upper(lca[i][a], b)) {
			a = lca[i][a];
		}
	}
	return lca[0][a];
}

int main() {
  //freopen("input.txt","r",stdin);
  //freopen("output.txt","w",stdout);
  scanf("%d%d", &n, &m);
  for (int i = 1; i <= m; i++) {
  	scanf("%d%d", &u[i], &v[i]);
  	g[u[i]].pb(mp(v[i], i));
  	g[v[i]].pb(mp(u[i], i));
  }
  timer = 0;
 	dfs(1, 1);
 	for (int i = 1; i <= n; i++) g[i].clear();
 	for (int i = 1; i <= m; i++) {
 		if (!bridge[i]) {
 			g[u[i]].pb(mp(v[i], i));
 			g[v[i]].pb(mp(u[i], i));
 		}
 	}
 	for (int i = 1; i <= n; i++) {
 		used[i] = false;
 	}
 	timer = 0;
 	for (int i = 1; i <= n; i++) {
 		if (who[i] == 0) {
 			++timer;
 			dfs(i);
 		}
 	}
 	for (int i = 1; i <= n; i++) {
 		g[i].clear();
 	}
 	for (int i = 1; i <= m; i++) {
 		if (bridge[i]) {
 			int _u = who[u[i]];
 			int _v = who[v[i]];
 			if (_u == _v) continue;
 			g[_u].pb(mp(_v, 1));
 			g[_v].pb(mp(_u, 1));
 		}
 	}
 	n = timer;
 	timer = 0;
 	psum[1] = -1;
 	dfs_lca(1, 1);
 	scanf("%d", &k);
 	for (int i = 1; i <= k; i++) {
 		int a, b;
 		scanf("%d%d", &a, &b);
 		a = who[a];
 		b = who[b];
 		printf("%d\n", psum[a] + psum[b] - 2 * psum[get_lca(a, b)]);
 	}
  return 0;
}