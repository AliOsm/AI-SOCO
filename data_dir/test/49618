#include<bits/stdc++.h>

#define x first
#define y second
#define y0 hi1
#define y1 hi2
#define ll long long
#define mp make_pair
#define pb push_back
#define sqr(a) (a)*(a)
#define ld long double
#define all(a) (a).begin(), (a).end()

using namespace std;

const int inf = 2000000000;

const int N = 2e5 + 5;
const int K = 10;

#define int ll

int n, k;
vector<int> g[N];
pair<int, int> dp[N][K];

void dfs1(int v, int pr = -1){
    dp[v][0].x = 0;
    dp[v][0].y = 1;
    for(int i = 0; i < g[v].size(); i++){
        int t = g[v][i];
        if(t == pr){
            continue;
        }
        dfs1(t, v);

        for(int j = 0; j < k; j++){
            int _j = (j + 1) % k;
            if(j == 0){
                dp[v][_j].x += dp[t][j].x + dp[t][j].y;
                dp[v][_j].y += dp[t][j].y;
            } else {
                dp[v][_j].x += dp[t][j].x;
                dp[v][_j].y += dp[t][j].y;
            }
        }
    }

    /*
    cout << v << ": ";
    for(int j = 0; j < k; j++){
        cout << j << "->" << dp[v][j].x << " ";
    }
    cout << "\n";
    */
}

ll ans = 0;

void dfs2(int v, vector<pair<int, int>> val, int pr = -1){
    ll res = 0;
    for(int j = 0; j < k; j++){
        res += dp[v][j].x + val[j].x;
    }
    //cout << v << " " << res << "\n";
    ans += res;

    val[0].y += 1;

    for(int i = 0; i < g[v].size(); i++){
        int t = g[v][i];
        if(t == pr){
            continue;
        }

        for(int j = 0; j < k; j++){
            int _j = (j + 1) % k;
            if(j == 0){
                val[_j].x += dp[t][j].x + dp[t][j].y;
                val[_j].y += dp[t][j].y;
            } else {
                val[_j].x += dp[t][j].x;
                val[_j].y += dp[t][j].y;
            }
        }
    }

    /*
    cout << v << ": ";
    for(int j = 0; j < k; j++){
        cout << j << "->" << val[j].x << " ";
    }
    cout << "\n";
    */

    vector<pair<int, int>> _val;
    _val = val;

    for(int i = 0; i < g[v].size(); i++){
        int t = g[v][i];
        if(t == pr){
            continue;
        }

        val = _val;
        for(int j = 0; j < k; j++){
            int _j = (j + 1) % k;

            if(j == 0){
                val[_j].x -= dp[t][j].x + dp[t][j].y;
                val[_j].y -= dp[t][j].y;
            } else {
                val[_j].x -= dp[t][j].x;
                val[_j].y -= dp[t][j].y;
            }
        }

        vector<pair<int, int>> val1(k, {0, 0});

        for(int j = 0; j < k; j++){
            int _j = (j + 1) % k;
            if(j == 0){
                val1[_j].x += val[j].x + val[j].y;
                val1[_j].y += val[j].y;
            } else {
                val1[_j].x += val[j].x;
                val1[_j].y += val[j].y;
            }
        }

        dfs2(t, val1, v);
    }
}

main(){
    cin.tie(0);
    ios_base::sync_with_stdio(0);

    //freopen("1.txt", "r", stdin);

    cin >> n >> k;
    for(int i = 0; i < n - 1; i++){
        int q, w;
        cin >> q >> w;
        g[q].pb(w);
        g[w].pb(q);
    }

    dfs1(1);

    vector<pair<int, int>> val(k, {0, 0});
    dfs2(1, val);
    cout << ans / 2;
}
