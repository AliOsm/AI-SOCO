#include <functional>
#include <algorithm>
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <numeric>
#include <iomanip>
#include <cstring>
#include <cassert>
#include <memory>
#include <chrono>
#include <cstdio>
#include <bitset>
#include <vector>
#include <math.h>
#include <queue>
#include <stack>
#include <ctime>
#include <set>
#include <map>

using namespace std;

#define rep(i,a,n) for (int i=(a);i<(n);i++)
#define per(i,n,a) for (int i=(n)-1;i>=(a);i--)
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define fi first
#define se second

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef pair<int,int> pii;

template <typename T>
T nextInt() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if (ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return x * p;
}

const int maxn=(int)1e3+10;
const int maxk=(int)1e6+10;
const int inf=(int)1e9+5;
const int mod=(int)1e9 + 7;
const ll llinf=(ll)1e18 + 5;
const ld pi=acos(-1.0);

int n,m,k,p;
int a[maxn][maxn];
ll sr[maxn],sc[maxn];
ll r[maxk],c[maxk];;

int cur=0;
struct cmp{
    bool operator()(int i,int j)const {
        return sr[i]>sr[j];
    }
};
int main() {

  //  freopen("input.txt", "r", stdin);
  //  freopen("output.txt", "w", stdout);

    scanf("%d%d%d%d",&n,&m,&k,&p);
    rep(i,0,n)rep(j,0,m)scanf("%d",a[i]+j),sr[i]+=a[i][j],sc[j]+=a[i][j];

    set<pii>s;
    rep(i,0,n)s.insert(mp(-sr[i],i));
    rep(i,1,k+1){
        int x=s.begin()->se;
        s.erase(s.begin());
        r[i]=r[i-1]+sr[x];
        sr[x]-=m*p;
        s.insert(mp(-sr[x],x));
    }
    s.clear();
    rep(i,0,m)s.insert(mp(-sc[i],i));
    rep(i,1,k+1){
        int x=s.begin()->se;
        s.erase(s.begin());
        c[i]=c[i-1]+sc[x];
        sc[x]-=n*p;
        s.insert(mp(-sc[x],x));
    }
    s.clear();

    ll res=-llinf;
    rep(i,0,k+1){
        res=max(res,c[i]+r[k-i]-1LL*i*(k-i)*p);
    }
    printf("%I64d\n",res);
    return 0;
}
