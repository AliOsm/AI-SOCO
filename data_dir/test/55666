//Believe in yourself.
#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define PB push_back
#define MP make_pair
#define INF 1000000000000000007
#define inf 1000000007
#define y1 dasdsvcvd
using namespace std;

int n, m;
vector <int > g[100005];
vector <int> v;
bool vis[100005];
int h[100005], c[100005], id[100005],start[100005], finish[100005], timer = 0, a[100005], cnt[100005], ans[100005];

struct query{
int left, right, k, id;
};

struct query q[100005];
int block = 333;

void dfs(int x, int par)
{
    start[x] = ++timer;
    a[timer] = c[x];
    for(auto v : g[x])
    {
        if(v != par)
            dfs(v,x);
    }
    finish[x] = timer;
}

bool cmp(struct query x, struct query y)
{
    if(x.left / block != y.left / block)
        return x.left / block < y.left / block;

    return x.right < y.right;
}

int main()
{
  ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
  cin >> n >> m;
  for(int i = 1; i <= n; i++)
  {
      cin >> c[i];
  }
  for(int i = 0; i < n-1; i++)
  { int x, y;
      cin >> x >> y;
      g[x].PB(y);
      g[y].PB(x);
  }
 dfs(1,-1);
 for(int i = 0; i < m; i++)
 {  int x, y;
     cin >> x >> y;
     q[i].left = start[x];
     q[i].right = finish[x];
     q[i].id = i;
     q[i].k = y;
 }

sort(q, q + m, cmp);
int curl = 0, curr = 0;

for(int i = 0; i < m; i++)
{
    int l = q[i].left;
    int r = q[i].right;

    while(curl < l)
    {
        h[a[curl]]--;
        cnt[h[a[curl]]+1]--;
        curl++;
    }
    while(l < curl)
    {
        curl--;
        h[a[curl]]++;
        cnt[h[a[curl]]]++;


    }
    while(curr < r)
    {
        curr++;
        h[a[curr]]++;
        cnt[h[a[curr]]]++;

    }
    while(r < curr)
    {
        h[a[curr]]--;
        cnt[h[a[curr]]+1]--;
        curr--;
    }

    ans[q[i].id] = cnt[q[i].k];
}
for(int i = 0; i < m; i++)
{
    cout << ans[i] <<'\n';
}
return 0;
}
