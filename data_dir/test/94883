#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<long long, int>, // change type
//        null_type,
//        less<pair<long long, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

//template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)(x).size()
#define pb push_back
#define X first
#define Y second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
#define debug(x) cerr << #x << " : " << (x) << endl
const double PI = 3.14159265358979323846;
const double eps = (1e-5);
int isGreater(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}

const int MAX_N = 2e5 + 5;
int to[MAX_N];
bool has[MAX_N], visit[MAX_N];

void dfs(int u, int st){
    visit[u] = 1;
    int v = to[u];
    if (v == -1)
        to[u] = st;
    else if (!visit[v])
        dfs(v, st);
}
int n;
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
    cin >> n;
    int u = 0;
    rep(i,0,n)
    {
        cin >> to[i];
        --to[i];
        if (to[i] != -1)
            has[to[i]] = 1;
        else
            u = i;
    }
    vector<int> singleton;
    rep(i,0,n)
    {
        if (to[i] != -1 && to[to[i]] == -1)
            u = to[i];
        if (!has[i] && to[i] == -1)
            singleton.push_back(i);
    }
    for (int v : singleton){
        if (u != v)
        {
            to[u] = v;
            has[v] = true;
            u = v;
        }
    }

    for (int i = 0; i < n; ++i)
    {
        if (!has[i] && !visit[i])
            dfs(i, i);
    }
    for (int i = 0; i < n; ++i)
        cout << to[i] + 1 << ' ';

    return 0;
}