#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <iomanip>
#include <ctime>
using namespace std;
                                
template <typename T>
T next_int() {  
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if (ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return x * p;         
}

const int max_n = (int)1e6 + 227 + 1;
const int max_int = (int)1e9 + 227 + 1;
const int mod = (int)1e9 + 7;

bool used[max_n];
vector<pair<int, int> > k[max_n];
int ans[max_n];

void build_prime() {
	for(int i = 2; i < max_n; i++) {
		if(used[i]) continue;
		
		k[i].push_back(make_pair(i, 1));

		for(int j = i * 2; j < max_n; j += i) {
			used[j] = 1;
		
			int e = j / i;
			k[j].push_back(make_pair(i, 1));
			while(e % i == 0) e /= i, k[j].back().second++;
		}
        }                   
}

int main() {
//	freopen(".in", "r", stdin);
//	freopen(".out", "w", stdout);
	
	build_prime();

	int n = next_int<int>();
	int m = next_int<int>();

	vector<int> a(n);
	for(int i = 0; i < n; i++) {
		a[i] = next_int<int>();

		for(int j = 0; j < k[a[i]].size(); j++) {
			ans[k[a[i]][j].first] = max(ans[k[a[i]][j].first], k[a[i]][j].second);
		}
	}

	long long mda = 1;
	for(int i = 0; i < max_n; i++) {
		for(int j = 0; j < ans[i]; j++) {
			mda = (mda * i) % m;
		}
	}

	if(mda % m == 0) puts("Yes"); else puts("No");
}