#include <set>
#include <vector>
#include <iostream>

using namespace std;

const int MAXN = 1 << 20;
const long long INF = 1777777777777LL;

vector<pair<pair<long long, long long>, int> > v;

long long isqrt(long long n) {
  long long l = 0, r = 1000000007;
  while (l < r) {
    long long m = (l + r) / 2;
    if (m * m <= n) {
      l = m + 1;
    } else {
      r = m;
    }
  }
  return r - 1;
}

long long sqr(long long x) {
  return x * x;
}

int idx(long long x) {
  for (int i = 0; i < (int)v.size(); ++i) {
    if (x <= v[i].first.second) {
      return i;
    }
  }
  return v.size();
}

pair<int, int> range(long long s) {
  int t = isqrt(isqrt(s));
  if (sqr(sqr(t)) < s) {
    ++t;
  }
  return {idx(t), idx(isqrt(s))};
}

void init() {
  v.push_back({{1, 3}, 0});
  while (v.back().first.second < INF) {
    long long s = v.back().first.second + 1;
    auto t = range(s);
    long long l = s, r = INF + 1;
    while (l < r) {
      long long m = (l + r) / 2;
      if (range(m) == t) {
        l = m + 1;
      } else {
        r = m;
      }
    }
    set<int> st;
    for (int i = t.first; i <= t.second; ++i) {
      st.insert(v[i].second);
    }
    for (int i = 0; ; ++i) {
      if (st.count(i) == 0) {
        cerr << s << " " << r - 1 << " " << i << endl;
        v.push_back({{s, r - 1}, i});
        break;
      }
    }
  }
}

int main() {
  int n;

  init();
  /*
     for (long long i = 1; i < MAXN; ++i) {
     set<int> st;
     for (long long j = 0; j < i; ++j) {
     if (j * j <= i && j * j * j * j >= i) {
     st.insert(sg[j]);
     }
     }
     for (int j = 0; ; ++j) {
     if (st.count(j) == 0) {
     sg[i] = j;
     break;
     }
     }
     if (sg[i] != sg[i - 1]) {
     printf("[%d] = %d\n", (int)i, sg[i]);
     }
     }
     */
  cin >> n;
  long long sg = 0;
  for (int i = 0; i < n; ++i) {
    long long a;
    cin >> a;
    sg ^= v[idx(a)].second;
  }
  cout << (sg == 0 ? "Rublo" : "Furlo") << endl;

  return 0;
}

/*
   [4] = 1
   [16] = 2
   [82] = 0
   [6724] = 3
   [50626] = 1
   */

