#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma comment(linker, "/STACK:16777216")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifdef _offline
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // _offline
}

const int MAXN = 720;
int arr[MAXN];
int dpl[MAXN][MAXN], dpr[MAXN][MAXN];
bool can[MAXN][MAXN];

int getr(int root, int r);

int getl(int root, int l) {
    if (dpl[root][l] != -1) {
        return dpl[root][l];
    }
    dpl[root][l] = 0;
    for (int i = l; i < root; ++i) {
        if (can[root][i] && getr(i, root - 1) == 1 && getl(i, l) == 1) {
            dpl[root][l] = 1;
            break;
        }
    }
    return dpl[root][l];
}

int getr(int root, int r) {
    if (dpr[root][r] != -1) {
        return dpr[root][r];
    }
    dpr[root][r] = 0;
    for (int i = root + 1; i <= r; ++i) {
        if (can[root][i] && getl(i, root + 1) == 1 && getr(i, r) == 1) {
            dpr[root][r] = 1;
            break;
        }
    }
    return dpr[root][r];
}

signed main() {
    FAST_IO();
    memset(dpl, -1, sizeof(dpl));
    memset(dpr, -1, sizeof(dpr));
    int n;
    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }
    for (int i = 0; i < n - 1; ++i) {
        for (int j = i + 1; j < n; ++j) {
            if (__gcd(arr[i], arr[j]) > 1) {
                can[i][j] = true;
                can[j][i] = true;
            }
        }
    }
    for (int i = 0; i < n; ++i) {
        dpl[i][i] = 1;
        dpr[i][i] = 1;
        if (i != 0 && can[i - 1][i]) {
            dpl[i][i - 1] = 1;
            dpr[i - 1][i] = 1;
        }
        if (i != n - 1 && can[i][i + 1]) {
            dpr[i][i + 1] = 1;
            dpl[i + 1][i] = 1;
        }
    }
    for (int i = 0; i < n; ++i) {
        if (getl(i, 0) == 1 && getr(i, n - 1) == 1) {
            cout << "Yes\n";
            return 0;
        }
    }
    cout << "No\n";
}
