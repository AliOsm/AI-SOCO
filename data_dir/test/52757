/* winners never quit and quitters never win.
      #swap                                 */
      
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
using namespace std;
using namespace __gnu_pbds;
#pragma GCC optimize ("-O3")
using ll = long long;
using ld = long double;
const ll mod = 1000000007;
const ll inf = 1000000000000000000;
const ll rk = 256;

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

#define pb push_back
#define mp make_pair
#define vc vector
#define fs first
#define sec second
#define pq priority_queue
#define lb lower_bound
#define ub upper_bound
#define pll pair<ll,ll> 
#define pls pair<ll,string>
#define psl pair<string,ll>
#define plc pair<ll,char>
#define pcl pair<char,ll>
#define pss pair<string,string>
#define all(v) v.begin(),v.end()
#define tol(s) transform(s.begin(),s.end(),s.begin(),::tolower);
#define tou(s) transform(s.begin(),s.end(),s.begin(),::toupper);

#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }

void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
	cerr << *it << " = " << a << endl;
	err(++it, args...);
}

#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define T ll t=0;cin>>t;for(ll test=0;test<t;test++)

struct vertex
{
    vc<ll> adj;
    ll vis=0;
    ll size=1;
    bool find=false;
    ll level=0;
    ll low=0;
    ll parent=-1;
};
ll ans=0,u,v,rem=0;
void dfs(vertex x[],ll sor)
{
    x[sor].vis=1;
    for(auto y:x[sor].adj)
    {
        if(!x[y].vis)
        {
            x[y].level=x[sor].level+1;
            x[y].low=x[y].level;
            x[y].parent=sor;
            dfs(x,y);
            x[sor].size+=x[y].size;
            if(sor==u and x[y].find)
            {
                x[sor].size-=x[y].size;
            }
            if(sor==v and x[y].low<x[sor].level)
            {
                x[sor].size-=x[y].size;
                x[y].low=x[y].level;
            }
            x[sor].low=min(x[sor].low,x[y].low);
            x[sor].find=(x[y].find || x[sor].find);
        }
        else if(y!=x[sor].parent)
        {
            x[sor].low=min(x[sor].low,x[y].level);
        }
    }
    if(sor==v)
    {
        ans+=x[sor].size-1;
    }
    else if(sor==u)
    {
        rem+=x[sor].size-1;
    }
    x[sor].vis=2;
}
 
int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
	//isprime();
	//coeff();
	/*freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);*/
    T
	{
		//cout<<"Case #"<<test+1<<": ";
        ans=0,rem=0;
        ll n,m;
        cin>>n>>m>>u>>v;
        u--,v--;
        vertex x[n];
        rep(a,0,m)
        {
            ll i,j;
            cin>>i>>j;
            i--,j--;
            x[i].adj.pb(j);
            x[j].adj.pb(i);
        }
        x[v].find=true;
        dfs(x,u);
        cout<<ans*rem<<endl;
	}
	return 0;
}