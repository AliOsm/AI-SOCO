/*
author: madhav_1999 aka orthodoxparadox
22 December 2019 at 4:31 AM
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define dbl long double
#define int ll
#define ll long long
#define pii pair<int, int>
#define len(x) (int) x.size()
#define rev(a) reverse(all(a))
#define oiint ostream_iterator<int>(cout, " ") 
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define endl '\n'
#define all(a) a.begin(), a.end()
#define initialise(a, x) memset(a, x, sizeof(a))
#define onlyunique(v) v.erase(unique(all(v)), v.end()); //only for sorted vector
#define inf 2e18
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#ifdef MADHAV
#define dbg(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){cerr << name << " : " << arg1 << endl;}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << "  ";
	__f(comma + 1, args...);}
#else
#define dbg(...) 42
#endif
template <typename X> ostream& operator << (ostream& x,const vector<X>& v){for(int i=0;i<v.size();++i) x<<v[i]<<" ";return x;} 
template <typename X> ostream& operator << (ostream& x,const set<X>& v){for(auto it:v) x<<it<<" ";return x;} 
template <typename X, typename Y> ostream& operator << (ostream& x, const pair<X,Y>& v) {x<<v.ff<<" "<<v.ss;return x;} 
template <typename T, typename S> ostream& operator << (ostream& os, const map<T, S>& v) { for (auto it : v) os << it.first << "=>" << it.second << endl; return os; }
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
struct pair_hash {inline std::size_t operator()(const std::pair<int, int> & v) const {return v.first*31+v.second;}};
const int MOD = 1e9 + 7;

int takemod(int a, int mod = MOD){a%=mod;if(a<0)a+=mod;return a;}

int fast_exp(int base, int expo, int mod = MOD) {
	int res=1;
	while(expo>0) {
		if(expo&1) res=(res*base)%mod;
		base=(base*base)%mod;
		expo>>=1;}
	return res;}

int modinv(int a, int mod = MOD){return takemod(fast_exp(takemod(a), mod-2, mod), mod);}


typedef dbl fd;
const fd PI = acos(-1);
const fd TAU = 2*PI;
const int N = 1e6 + 10;
const int LOGMAX = 21;
const int MAXN = (1LL << LOGMAX);

struct cx {
	fd x, y;
	cx() : x(0), y(0) {}
	cx(fd _x) : x(_x), y(0) {}
	cx(fd _x, fd _y) : x(_x), y(_y) {}
	fd real() {
		return x;
	}
	fd imag() {
		return y;
	}
	void operator= (fd _x) {
		x = _x, y = 0;
	}
	cx operator+ (const cx &c) const {
		return cx(x + c.x, y + c.y);
	}
	cx operator- (const cx &c) const {
		return cx(x - c.x, y - c.y);
	}
	cx operator* (const cx &c) const {
		return cx(x*c.x - y*c.y, x*c.y + y*c.x);
	}
	cx operator/ (fd fac) const {
		return cx(x/fac, y/fac);
	}
	cx& operator= (const cx &c) {
		this->x = c.x, this->y = c.y;
		return *this;
	}
	cx& operator+= (const cx &c) {
		return *this = *this + c;
	}
	cx& operator-= (const cx &c) {
		return *this = *this - c;
	}
	cx& operator*= (const cx &c) {
		return *this = *this * c;
	}
	cx& operator/= (fd fac) {
		return *this = *this/fac;
	}
	cx conjugate() {
		return cx(x, -y);
	}
};


cx omg[MAXN], iomg[MAXN];

void initFFT() {
	fd factor = TAU/MAXN;
	for(int i = 0; i < MAXN >> 1; i++) {
		omg[i] = cx(cos(i*factor), sin(i*factor));
		iomg[i] = omg[i].conjugate();
	}
}
void FFT(vector<cx> &a, bool invert) {
	int n = len(a);
	int mask = 0;
	for(int i = 1; i < n; i++) {
		int bit = n >> 1;
		for(; mask & bit; bit >>= 1) mask ^= bit;
		mask ^= bit;
		if(i < mask) swap(a[i], a[mask]);
	}
	for(int l = 2; l <= n; l <<= 1) {
		for(int i = 0; i < n; i += l) {
			int ind = 0, inc = MAXN/l;
			for(int j = 0; j < (l >> 1); j++) {
				cx u = a[i + j], v = (a[i + j + (l >> 1)] * (invert ? iomg[ind] : omg[ind]));
				a[i + j] = u + v;
				a[i + j + (l >> 1)] = u - v;
				ind += inc;
			}
		}
	}
	if(invert)
		for(int i = 0; i < n; i++)
			a[i] /= n;
}


vector<int> multiply(const vector<int> &a, const vector<int> &b) {
	int n1 = len(a), n2 = len(b);
	int tot = n1 + n2 - 1, n = 1;
	while(n < tot) n <<= 1;
	dbg(n);
	vector<cx> P1(n), P2(n);
	for(int i = 0; i < n1; i++) P1[i] = cx(a[i]);
	for(int i = 0; i < n2; i++) P2[i] = cx(b[i]);
	FFT(P1, 0); FFT(P2, 0);
	for(int i = 0; i < n; i++) P1[i] *= P2[i];
	FFT(P1, 1);
	vector<int> c(tot);
	for(int i = 0; i < tot; i++) c[i] = (int)(P1[i].real() + 0.5);
	return c;
}


void solve()
{
	int n, m, k;
	cin >> n >> m >> k;
	initFFT();
	string gene = "ATGC";
	string s, t;
	cin >> s >> t;
	vector<int> a(n), b(m);
	vector<int> tot(n + m);
	for(int i = 0; i < 4; i++)
	{
		a = vector<int> (n, 0);
		b = vector<int> (m, 0);
		for(int j = 0; j < n; j++)
		{
			if(s[j] == gene[i])
			{
				a[max(0LL, j - k)]++;
				if(j + k + 1 < n)
				{
					a[j + k + 1]--;
				}
			}
		}
		for(int j = 1; j < n; j++)
		{
			a[j] += a[j - 1];
		}
		for(int j = 0; j < n; j++)
		{
			a[j] = min(a[j], 1LL);
		}
		for(int j = 0; j < m; j++)
		{
			b[j] = t[m - 1 - j] == gene[i];
		}
		vector<int> v = multiply(a, b);
		for(int j = 0; j <= n + m - 2; j++)
		{
			tot[j] += v[j]; 
		}
	}
	int ans = 0;
	for(int i = 0; i < n + m; i++)
	{
		ans += (tot[i] == m);
	}
	cout << ans << endl;
}

signed main(){
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	#ifdef MADHAV
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("error.txt", "w", stderr);
	#endif
	clock_t t1, t2;
	t1 = clock();

	int t = 1;
	// cin >> t;
	while(t--)
	{
		solve();
	}
	#ifdef MADHAV
	t2 = clock(); cerr << "time taken: " << (t2-t1)/(dbl)CLOCKS_PER_SEC;
	#endif
	return 0;
}