#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int)1e9 + 1;
const ld EPS = 1e-9;

void precalc() {
}

int n, m;
const int maxn = 50 + 5;
char s[maxn][maxn];

bool read() {
  if (scanf("%d%d", &n, &m) < 1) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    scanf("%s", s[i]);
  }
  return 1;
}

int need[26];

void solve() {
  memset(need, 0, sizeof(need));
  need['a' - 'a'] = 1;
  need['c' - 'a'] = 1;
  need['e' - 'a'] = 1;
  need['f' - 'a'] = 1;
  int res = 0;
  for (int i = 0; i < n - 1; ++i) {
    for (int j = 0; j < m - 1; ++j) {
      for (int it = 0; it < 2; ++it) {
        int cnt = 0;
        for (int dx = 0; dx < 2; ++dx) {
          for (int dy = 0; dy < 2; ++dy) {
            int ch = s[i + dx][j + dy] - 'a';
            if (it) {
              need[ch] += 1;
            } else {
              need[ch] -= 1;
              if (need[ch] == 0) {
                ++cnt;
              }
            }
          }
        }
        if (cnt == 4) {
          ++res;
        }
      }
    }
  }
  printf("%d\n", res);
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
