#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 5;
int per[N][3];
map< pair<int, int> , int > mp, mp1, mp2;
map< pair<int, int> , int >::iterator it;
int sz[N];
int tmp_sz[N];
set<int> pos[N], pos1[N], pos2[N];
set<int>::iterator sit;
int ara[N];

int main( )
{
    int n, i, j, k, l, a, b, c;
    cin >> n;
    for (i = 1; i <= n - 2; i++)
    {
        cin >> a >> b >> c;
        pos1[a].insert(i);
        pos1[b].insert(i);
        pos1[c].insert(i);
        pos2[a].insert(i);
        pos2[b].insert(i);
        pos2[c].insert(i);
        tmp_sz[a]++;
        tmp_sz[b]++;
        tmp_sz[c]++;
        per[i][0] = a;
        per[i][1] = b;
        per[i][2] = c;
    }
    for (i = 1; i <= n; i++)
        mp.insert(make_pair(make_pair(tmp_sz[i], i), i));
    l = (n / 2);
    i = n;
    it = mp.begin( );
    a = (*it).first.second;
    for (j = 1; j <= n; j++)
        sz[j] = tmp_sz[j];
    mp1.insert(make_pair(make_pair(sz[a], a), a));
    for (j = 1; j <= l; j++)
    {
        it = mp1.begin( );
        a = (*it).second;
        mp1.erase(it);
        ara[i--] = a;
        sit = pos1[a].begin( ); k = (*sit);
        for (b = 0; b < 3; b++)
        {
            if (per[k][b] == a) continue;
            c = per[k][b];
            pos1[c].erase(k);
            sz[c]--;
            mp1.insert(make_pair(make_pair(sz[c], c), c));
        }
        it = mp.find(make_pair(tmp_sz[a], a));
        mp.erase(it);
    }

    i = 1;
    it = mp.begin( );
    a = (*it).first.second;
    for (j = 1; j <= n; j++)
        sz[j] = tmp_sz[j];
    mp2.insert(make_pair(make_pair(sz[a], a), a));
    for (j = 1; j <= l; j++)
    {
        it = mp2.begin( );
        a = (*it).second;
        mp2.erase(it);
        ara[i++] = a;
        sit = pos2[a].begin( ); k = (*sit);
        for (b = 0; b < 3; b++)
        {
            if (per[k][b] == a) continue;
            c = per[k][b];
            pos2[c].erase(k);
            sz[c]--;
            mp2.insert(make_pair(make_pair(sz[c], c), c));
        }
        it = mp.find(make_pair(tmp_sz[a], a));
        mp.erase(it);
    }
    if (n % 2 == 1)
    {
        it = mp.begin( );
        ara[i] = (*it).second;
    }
    for (i = 1; i <= n; i++)
        cout << ara[i] << ' ';
    cout << '\n';
    return 0;
}
