#include <bits/stdc++.h>
using namespace std;
#define SZ(v) int((v).size())
#define ALL(vec) begin(vec), end(vec)

typedef long long i64;
template<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}
template<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}
#ifdef Rahul
# define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); \
  stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
#else
# define error(...) 42;
#endif
string to_string(char c) { return "'" + string(1, c) + "'";}
string to_string(string s) { return '"' + s + '"';}
string to_string(const char* s) { return to_string((string) s);}
template<typename A> string to_string(A);
template<typename A, typename B> string to_string(pair<A, B> p){
  return "(" + to_string(p.first) + ": " + to_string(p.second) + ")";}
template<typename A> string to_string(A v) {bool f = false; string r = "{"; 
  for (auto x: v) {if (f) r += ", "; r += to_string(x); f = true;} return r += "}";}
template<typename A> string to_string(vector<vector<A>> v) {string r; 
  for (auto x: v) r += "\n" + to_string(x); return r;}
int Nerr;
template<typename A> string to_string(A *p) {return to_string(vector<A>(p, p + Nerr));}
void err(istream_iterator<string>) { cerr << endl; }
template<typename T,typename... Args> void err(istream_iterator<string> it, T a, Args... args) {
  cerr << *it << " =: " << to_string(a) << "; "; err(++it, args...); }
template<typename T> void kek(T ans) {cout << ans << endl; exit(0);}
int const MOD = 1e9 + 7;
long long const INF = 1e18 + 42;
/***********************************************************************/
const int N = 5001;
int dq[N], up[N];
int good(int n, int d) {
  return d >= dq[n] and d <= n * (n - 1) / 2;
}
void go(int root, int l, int r, int d) {
  if (l > r) return;
  int n = r - l + 1;
  d -= n;
  if (good(n, d)) {
    up[l] = root;
    return go(l, l + 1, r, d);
  }
  for (int i = 1; ; ++i) {
    int j = n - i;
    int li = dq[i], lj = dq[j];
    int ri = i * (i - 1) / 2, rj = j * (j - 1) / 2;
    if (d >= li + lj && d <= ri + rj) {
      up[l] = up[r] = root;
      int di = li, dj = d - di;
      if (dj > rj) {
        dj = rj;
        di = d - dj;
      }
      return go(l, l + 1, l + i - 1, di), go(r, l + i, r - 1, dj);
    }
  }
}
void solve_case() {
  int n, d;
  cin >> n >> d;
  if (!good(n, d)) {
    cout << "NO\n"; return;
  }
  cout << "YES\n";
  go(0, 1, n - 1, d);
  for (int i = 1; i < n; ++i) {
    cout << up[i] + 1 << ' ';
  }
  cout << '\n';
}
int32_t main() {
  cin.tie(nullptr) -> sync_with_stdio(false);
  
  //~ dp[0].insert(0);
  //~ dp[1].insert(0);
  for (int i = 2; i < N; ++i) {
    dq[i] = MOD;
    for (int j = 0; j < i; ++j) {
      //~ for (const int &x : dp[j]) {
        //~ for (const int &y : dp[i - 1 - j]) {
          //~ dp[i].insert(i - 1 + x + y);
        //~ }
      //~ }
      uin(dq[i], dq[j] + j + dq[i - 1 - j] + (i - 1 - j));
    }
    //~ error(i, dq[i], i*(i-1)/2, i*(i-1)/2-dq[i]+1, SZ(dp[i]), *dp[i].begin());
    //~ if (i == 42) break;
  }
  Nerr = 15;
  error(dq);
  int tt; cin >> tt;
  while (tt--) {
    solve_case();
  }
}
