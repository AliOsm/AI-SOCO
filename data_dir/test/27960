#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
//#include <unordered_set>
//#include <unordered_map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
using namespace std;
#define MS0(I) memset(I, 0, sizeof(I));
#define MS1(I) memset(I, -1, sizeof(I));
#define rep(i, n) for(int i = 0; i < (n); ++i)
#define rep1(i, s, n) for(int i = (s); i < (n); ++i)
#define per1(i, a, b) for(int i = a; i >= b; --i)
#define DRI(A) int A; scanf("%d", &A);
#define DRII(A, B) int A, B; scanf("%d %d", &A, &B);
#define DRIII(A, B, C) int A, B, C; scanf("%d %d %d", &A, &B, &C);
#define SZ(X) ((int)X.size() )
#define MP make_pair 
#define pb push_back
#define F first
#define S second
#define ALL(I) (I).begin(), (I).end()
typedef const void CV;
typedef long long LL;
typedef unsigned long long ULL;
typedef double DB;
typedef long double LDB;
typedef pair<int, int> PII; 
const double eps = 1e-9;
const double PI = acos(-1);
const LL INFF = 1e18;
const int INF = 1e9;
const int mod = 1e9+7;
const int MAX = 1e5+7;
struct node{
	LDB x, y;
	void read(){
		scanf("%Lf %Lf", &x, &y);
	}
	node(LDB _x = 0, LDB _y = 0){
		x = _x; y = _y;
	}
	node rotate(LDB _x, LDB _y){
		LDB xx= _y - y + _x;
    	LDB yy= x - _x + _y;
		return node(xx, yy);	
	}
	node operator - (const node & a){
		return node(a.x-x, a.y-y);
	}
	LDB dis(){
		return x*x + y*y;
	}

}pt[5];
pair<LDB, LDB> pt2[5];
void sol(){
	rep(i, 4){
		pt[i].read();
		scanf("%Lf %Lf", &pt2[i].F, &pt2[i].S);
	}
	int ans = INF;
	rep(p1, 4){
		rep(p2, 4){
			rep(p3, 4){ 
				rep(p4, 4){
					vector<LDB>dis;
					rep(i, 4) rep1(j, i+1,4) dis.pb( (pt[i] - pt[j]).dis() );
					sort(ALL(dis));
					bool fg = 1;
					if(dis[0] <= 0) fg = 0;
					rep(i, 3) if(dis[i] != dis[i+1]){
						fg = 0; break;
					}
					if(dis[4] != dis[5]) fg = 0;
					if(dis[3]*2 != dis[4]) fg = 0;
					if(fg) ans = min(ans, p1+p2+p3+p4);
					pt[3] = pt[3].rotate(pt2[3].F, pt2[3].S);
				}
				pt[2] = pt[2].rotate(pt2[2].F, pt2[2].S);
			}
			pt[1] = pt[1].rotate(pt2[1].F, pt2[1].S);
		}
		pt[0] = pt[0].rotate(pt2[0].F, pt2[0].S);
	}
	if(ans == INF) ans = -1;
	printf("%d\n", ans);
}
int main(void){
	DRI(t);
	while(t--){
		sol();
	}
	return 0;
}
