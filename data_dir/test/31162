// in the name of god 
#include <vector>
#include <iostream>
#include <cstdio>
#include <math.h>
#include <cassert>
#include <cstring>
#include <algorithm>
#include <fstream>
#include <set>
#include <map>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp> 
#include <bits/stdc++.h>
using namespace std ;
//using namespace __gnu_pbds;
//#define ordered_set(TYPE) tree<TYPE, null_type, less<TYPE>, rb_tree_tag, tree_order_statistics_node_update>
void operator+=(vector<int>&in1,const vector<int>&in2){for(int i=0;i<in2.size();i++)in1.push_back(in2[i]);}
#define y2 sdfklgjsdkfd
#define y1 sdfklgjsdkafd
#define X first 
#define Y second
#define int  long long  
typedef long long ll ;
typedef long double ld ;
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define ALL(x) (x).begin(),(x).end()
typedef pair < int , int > pii ; 
typedef pair < int , pii > pi_ii ;
typedef pair < pii , int > pii_i ;
typedef pair < pii , pii > pii_ii ;
//#define "%I64d" "%I64d
int mod = 500500507 ;
//1234567891011
const int mod1 = 1e9+9 ;
const int max_Mat = 20*81+11 ; 
struct Mat{int n;int a[max_Mat][max_Mat];Mat(bool x=0){for(int i=0;i<max_Mat;i++)for(int j=0;j<max_Mat;j++)a[i][j]=((i==j)?x:0);}};
inline Mat operator*(const Mat&m1,const Mat&m2){Mat ret;int n=m1.n;ret.n=n;
  for(int i=0;i<n;i++)
    for(int j=0;j<n;j++)
      for(int k=0;k<n;k++)
	ret.a[i][j]=(0LL+ret.a[i][j]+1LL*m1.a[i][k]*m2.a[k][j])%mod;return ret;}inline Mat operator*=(Mat&m1,const Mat&m2){m1=m1*m2;} 
inline Mat operator^(Mat mat,int k){Mat ret(1);ret.n=mat.n;while(k){if(k&1)ret*=mat;k/=2;mat*=mat;}return ret;}
inline void operator^=(Mat &m1, int k){m1=m1^k;} 
inline void print(const Mat&mat){for(int i=0;i<mat.n;i++)for(int j=0;j<mat.n;j++)cout<<mat.a[i][j]<<((j+1==mat.n)?'\n':' ');}
const int maxL = 21 ;
const ll  inf = 1e10 ;
const int baze = 100000 ;
const int maxn = 1e6 + 100 ;
const int base0 = 421 ;
//  freopen ( "input.txt" , "r" , stdin ) ;
//  freopen ( "output.out", "w" , stdout) ;
const int base1 = 627 ;
int l , r ;

main ( )
{
  cin >> l >> r ;
  int x , y , z ;
  x = r / 2 - ( l + 1) / 2 + 1 ;
  y = r / 3 - ( l + 2 ) / 3 + 1 ;
  z = r / 5 - ( l + 4 ) / 5 + 1 ;
  int ans = max ( x , y ) ;
  ans = max ( ans , z ) ;
  if ( l == r )
    cout << l << endl ;
  else if ( ans == x )
    cout << 2 ;
  else   if ( ans == y )
    cout << 3 ;
  else   if ( ans == z )
    cout << 5 ;
  
} 
