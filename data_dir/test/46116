#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define SPEED ios_base::sync_with_stdio(false); cin.tie(NULL);
#define FOR(i, a, b) for (ll i = a; i < b; ++i)
#define RFOR(i, b, a) for (ll i = b; i >= a; --i)
#define ALL(x) x.begin(), x.end()
#define DEBUG(args...) { string _s = #args; replace(ALL(_s), ' ', '\0');\
replace(ALL(_s), ',', ' ');\
stringstream _ss(_s); istream_iterator<string> _it(_ss); _debug(_it, args);}
#define endl "\n"
#define F first
#define S second
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)

using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

void _debug(istream_iterator<string>) {}
template<typename T, typename... Args>
void _debug(istream_iterator<string> it, T first, Args... args) {
    cerr << ">> " << *it << " : " << first << endl; _debug(++it, args...);
}
template <typename T1, typename T2>
inline ostream& operator << (ostream& out, const pair<T1, T2>& p) {
    return out << "(" << p.F << ", " << p.S << ")";
}
template<typename T>
inline ostream& operator << (ostream& out, const vector<T>& v) {
    if (v.empty()) return out << "[]";
    else { out << '['; for (auto& e : v) { out << e << ", "; } return out << "\b\b]"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const set<T>& s) {
    if (s.empty()) return out << "{}";
    else { out << '{'; for (auto& e : s) { out << e << ", "; } return out << "\b\b}"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const unordered_set<T>& s) {
    return out << set<T>(ALL(s));
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const map<T1, T2>& m) {
    if (m.empty()) return out << "{}";
    out << '{'; for (auto& p : m) { out << p << ", "; } return out << "\b\b}";
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const unordered_map<T1, T2>& m) {
    return out << map<T1, T2>(ALL(m));
}
template<typename T>
inline ostream& operator << (ostream& out, const ordered_set<T>& s) {
    return out << set<T>(ALL(s));
}

typedef long long ll;
typedef long double ld;
typedef vector<long long> vll;
typedef pair<ll, ll> pll;
typedef vector<pair<ll, ll>> vpll;
typedef unordered_map<ll, ll> STll;
/************************************** MAIN PROGRAM ********************************************/

auto slope(pair<int, int> x1, pair<int, int> x2) {
    int dx = x2.first - x1.first;
    int dy = x2.second - x1.second;
    int gcd = __gcd(dx, dy);
    dx /= gcd;
    dy /= gcd;
    if (dx * dy < 0) {
        dx = abs(dx);
        dy = -abs(dy);
    } else {
        dx = abs(dx);
        dy = abs(dy);
    }
    return pair<int, int>(dy, dx);
}

int main()
{
   // freopen("input.txt", "r", stdin);
    SPEED
    ll n;
    cin >> n;
    vector<pair<int, int>> pts(n);
    for (auto &[first, second] : pts) cin >> first >> second;
    map<pair<int, int>, vector<pair<int, int>>> thoseWithSlopeO;
    map<pair<int, int>, map<pair<int, int>, int>> cntOfSlopeWithP;

    auto originPt = pts.front();
    for (auto [x, y] : pts) {
        if (originPt == mp(x, y)) continue;
        auto slopeWithO = slope(originPt, {x, y});
        thoseWithSlopeO[slopeWithO].push_back({x, y});
    }
  //  DEBUG(thoseWithSlopeO)
    if ((int)thoseWithSlopeO.size() <= 1) {
        cout << "YES";
        return 0;
    }
    auto p1 = thoseWithSlopeO.begin()->second.front();
    auto p2 = next(thoseWithSlopeO.begin())->second.front();

    for (auto [x, y] : pts) {
        for (auto p : {p1, p2}) {
            if (p == mp(x, y)) continue;
            auto slopeWithP = slope(p, {x, y});
            cntOfSlopeWithP[p][slopeWithP]++;
        }
    }
    bool ok = false;
    //DEBUG(cntOfSlopeWithP)

    for (auto &[slopeWithO, corresPts] : thoseWithSlopeO) {
        pair<int, int> otherPt;
        for (auto p : {p1, p2}) {
            if (slope(originPt, p) != slopeWithO) {
                otherPt = p;
                break;
            }
        }

        for (auto [x, y] : corresPts) {
            auto slopeWithP = slope(otherPt, {x, y});
            cntOfSlopeWithP[otherPt][slopeWithP]--;
            if (cntOfSlopeWithP[otherPt][slopeWithP] == 0) {
                cntOfSlopeWithP[otherPt].erase(slopeWithP);
            }
        }
        auto slopeOfPWithO = slope(originPt, otherPt);
        cntOfSlopeWithP[otherPt][slopeOfPWithO]--;
        if (cntOfSlopeWithP[otherPt][slopeOfPWithO] == 0) {
            cntOfSlopeWithP[otherPt].erase(slopeOfPWithO);
        }

       // DEBUG(cntOfSlopeWithP[otherPt], slopeWithO, otherPt, "\n")
        bool works = int(cntOfSlopeWithP[otherPt].size()) <= 1;
        ok |= works;

        for (auto [x, y] : corresPts) {
            auto slopeWithP = slope(otherPt, {x, y});
            cntOfSlopeWithP[otherPt][slopeWithP]++;
        }
        cntOfSlopeWithP[otherPt][slope(originPt, otherPt)]++;
    }
    if (ok) {
        cout << "YES";
    } else {
        cout << "NO";
    }
}
/************************************** END OF PROGRAM ******************************************/
/** Stuff you should look for:
 * int overflow, array bounds, over-counting, graph is not a tree/connected
 * special cases (n=1?), set/unordered_set TLE, multi-set/set error
 * do something instead of nothing and stay organized
 */
