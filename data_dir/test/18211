#pragma comment(linker,"/STACK:300000000")
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <map>
#include <set>
#include <queue>
#include <iomanip>
#include <memory.h>
#include <cstdio>
#include <sstream>
#include <deque>
#include <bitset>
#include <numeric>
#include <ctime>

using namespace std;

#define show(x) cout << #x << " = " << (x) << endl;
#define fori(i,n) for(int i = 0; i < (n); i++)
#define forn(i,n) for(int i = 1; i <= (n); i++)
#define forab(i,a,b) for(int i = (a); i <= (b); i++)
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
const double pi = 3.1415926535897932384626433832795;
template<class T> T abs(T &a) { return a >= 0 ? a : -a; };
template<class T> T sqr(T &x) { return x * x; }
typedef pair<int,int> ii;
typedef long long ll;
///////////////////////////////////////

int n, t, m;
int a[2][200], b[2][200];
vector<int> c;
vector<string> word;
deque<int> q;
vector<vector<int> > d;
vector<vector<int> > ans;

void process(int k, int who)
{
    int curT = t;
    while(true)
    {
        if(q.empty())
            return;
        int cur = q.front();
        q.pop_front();
        int T = max(1,c[cur]-(a[who][k]+b[1-who][k])-d[k][cur]);
        if(T < curT)
        {
            ans[k].push_back(cur);
            curT -= T;
        }
        else if(T > curT)
        {
            d[k][cur] += curT;
            q.push_back(cur);
            return;
        }
        else //????
        {
            ans[k].push_back(cur);
            return;
        }
    }
}

void print()
{
    fori(i,n)
    {
        cout << sz(ans[i]);
        fori(j,sz(ans[i]))
            cout << ' ' << word[ans[i][j]];
        cout << endl;
    }
}

__int32 main()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    cin >> n >> t;
    ans.resize(n);
    fori(i,n)
        cin >> a[0][i] >> a[1][i] >> b[0][i] >> b[1][i];
    cin >> m;
    d.resize(n,vector<int>(m));
    c.resize(m);
    word.resize(m);
    fori(i,m)
        cin >> word[i] >> c[i];
    d.resize(m);
    fori(i,m)
        q.push_back(i);
    while(true)
        fori(j,2)
            fori(i,n)
            {
                process(i,j);
                if(q.empty())
                {
                    print();
                    return 0;
                }
            }
 }