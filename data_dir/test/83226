#include<algorithm>
#include<iostream>
#include<cstring>
#include<stdio.h>
#include<math.h>
#include<cstring>
#include<cstdio>
#include<vector>
#include<bitset>
#include<string>
#include<cmath>
#include<queue>
#include<tuple>
#include<stack>
#include<map>
#include<set>

#define tp tuple<int , int, int>
#define pii pair<int, int>
#define mt make_tuple
#define mk make_pair
#define pb push_back

#define MOD 1000000007
#define INF 10000000
#define MAX 500005

#define white 0
#define grey 1
#define black 2

typedef long double ld;
typedef long long ll;

const long double eps = 1e-8;
const long double pi = acos(-1);

using namespace std;
char temp[MAX];
int ar[] = {0, 0, -1, 1, 1, 1, -1, -1};
int ac[] = {-1, 1, 0, 0, 1, -1, -1, 1};

struct node {
    int deg, xor_sum, pos;

    node() {}
    node(int a, int b, int c) : deg(a), xor_sum(b), pos(c) {}

    bool operator < (node n) const {
        if(n.deg == deg)
            return xor_sum < n.xor_sum;
        return deg < n.deg;
    }
};

pii a[MAX];

int main() {
#ifndef ONLINE_JUDGE
freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
#endif // ONLINE_JUDGE
ios_base::sync_with_stdio(false);

    int n; cin >> n;
    vector<pii> res;
    queue<int> qu;

    for(int i=0; i<n; i++) {
        cin >> a[i].first >> a[i].second;
        if(a[i].first == 1)
            qu.push(i);
    }

    while(!qu.empty()) {
        auto pos = qu.front();
        qu.pop();
        if(!a[pos].first) continue;
        res.pb(mk(a[pos].second, pos));
        a[a[pos].second].second ^= pos;
        a[a[pos].second].first--;

        if(a[a[pos].second].first == 1)
            qu.push(a[pos].second);
    }

    cout << res.size() << "\n";
    for(auto x : res)
        cout << x.first << " " << x.second << "\n";

    return 0;
}












