#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

struct state {
	bool canForceWin;
	bool canForceLoose;
	
	int ptrs[26];
	
	void init() {
		FOR (i, 0, 26) ptrs[i] = -1;
	}
};

struct {
	vector<state> states;
	
	void init() {
		states.resize(1);
		states.front().init();
	}
	
	void add(string &s) {
		int ptr = 0;
		for (auto c : s) {
			int ix = c - 'a';
			if (states[ptr].ptrs[ix] == -1) {
				states[ptr].ptrs[ix] = states.size();
				states.resize(states.size() + 1);
				states.back().init();
			}
			ptr = states[ptr].ptrs[ix];
		}
	}
		
	void calc(int v = 0) {
		bool any = false;
		FOR (i, 0, 26) if (states[v].ptrs[i] != -1) {
			int p2 = states[v].ptrs[i];
			calc(p2);
			any = true;
			if (!states[p2].canForceLoose) states[v].canForceLoose = true;
			if (!states[p2].canForceWin) states[v].canForceWin = true;
		}
		if (!any) states[v].canForceLoose = true;
	}
	
	state& getRoot() {
		return states.front();
	}
} trie;

bool solve() {
	next(int, n);
	next(int, k);
	
	trie.init();
	
	FOR (i, 0, n) {
		next(string, s);
		trie.add(s);
	}
	
	trie.calc();
	
	auto root = trie.getRoot();
	
	// cout << root.canForceLoose << ' ' << root.canForceWin << endl;
	
	if (root.canForceLoose && root.canForceWin) return true;
	if (!root.canForceWin) return false;
	
	k %= 2;
	return k;
}

int main() {
	srand (time(NULL));
    ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	cout << (solve() ? "First" : "Second") << endl;
}