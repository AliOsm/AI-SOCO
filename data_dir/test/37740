#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define ll long long int
#define pb push_back
#define mp make_pair
#define ld long double
#define sz(a) (ll)(a).size()
#define endl "\n"

typedef tree<pair<ll,ll> ,null_type,less<pair<ll,ll> >,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
//K-th smallest
//cout << k << "kth smallest: " << *A.find_by_order(k-1) << endl;
//NO OF ELEMENTS < X
//cout << "No of elements less than " << X << " are " << A.order_of_key(X) << endl;

vector<ll>ans;
ll val[256];

int main()
{
	std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

 	ll n, k;
 	cin >> n >> k;
 	ll a[n], res = 0;
 	for(int i=0;i<n;i++) cin >> a[i];
 	for(int i=0;i<256;i++) val[i] = -1;
 	for(int i=0;i<n;i++)
 	{
 		if(val[a[i]] != -1) continue;
 		ll flag = false;
 		for(int j=1;j<k;j++)
 		{
 			if(a[i] - j < 0) break; 	
 			if(val[a[i] - j] != -1)
 			{
 				if(a[i] - k + 1 <= val[a[i] - j]) val[a[i]] = val[a[i] - j];
 				else val[a[i]] = a[i] - j + 1;
 				flag = true;
 				break;
 			}
 		}
 		if(!flag) val[a[i]] = max(0ll, a[i] - k + 1);
 		for(int j=val[a[i]];j<=a[i];j++) val[j] = val[a[i]];
 	}		
 	for(int i=0;i<n;i++) cout << val[a[i]] << " ";
 	cout << endl;	
    return 0;
}