#define  _CRT_SECURE_NO_WARNINGS
#include<bits/stdc++.h>
#define read freopen("in.in","r",stdin)
#define write freopen("out.out","w",stdout)
using namespace std;

typedef long long ll;


int n, m;
vector<string> g;
char ss[300010];
int rows[300010][4][2];
int cols[300010][4][2];
int main(){
	//ios::sync_with_stdio(false);
///	read; write;
	scanf("%d%d", &n, &m);
	map<char, int> M;
	M['A'] = 0;
	M['G'] = 1;
	M['C'] = 2;
	M['T'] = 3;
	string rm = "AGCT";
	for (int i = 0; i < n; i++){
		scanf("%s", ss);
		g.push_back(string(ss));
		for (int j = 0; j < m; j++){
			int ch = M[g[i][j]];
			rows[i][ch][j % 2] ++;
			cols[j][ch][i % 2] ++;
		}
	}
	int p[] = { 0, 1, 2, 3 };
	int res = n*m;
	int b[4];
	vector<int> s;
	int w =0;
	int id;
	do{
		// rows
		int temp = 0;
		vector<int> sol;

		for (int i = 0; i < n; i++)
		{
			id = (i % 2) * 2;
			int mn = max(rows[i][p[id]][0] + rows[i][p[id+1]][1], rows[i][p[id]][1] + rows[i][p[id+1]][0]);
			if (rows[i][p[id]][0] + rows[i][p[id + 1]][1] == mn)
				sol.push_back(0);
			else
				sol.push_back(1);
			temp += m - mn;
		}
		if (temp < res){
			w = 0;
			s = sol;
			res = temp;
			for (int i = 0; i < 4; i++)b[i] = p[i];
		}
		
		sol.clear();
		temp = 0;
		for (int i = 0; i < m; i++)
		{
			id = (i % 2) * 2;
			int mn = max(cols[i][p[id]][0] + cols[i][p[id + 1]][1], cols[i][p[id]][1] + cols[i][p[id + 1]][0]);
			if (cols[i][p[id]][0] + cols[i][p[id + 1]][1] == mn)
				sol.push_back(0);
			else
				sol.push_back(1);
			temp += n - mn;
		}
		if (temp < res){
			w = 1;
			s = sol;
			res = temp;
			for (int i = 0; i < 4; i++)b[i] = p[i];
		}
	} while (next_permutation(p, p + 4));

	string str = "AA";
	if (w == 0) {
		for (int i = 0; i < n; i++) {
			id = (i % 2) * 2;
			if (s[i] == 0)str[0] = rm[b[id]] ,str[1]= rm[b[id + 1]];
			else str[0] = rm[b[id + 1]], str[1] = rm[b[id]];
			for (int j = 0; j < m; j++) g[i][j] = str[j % 2];
		}
	}
	else {
		for (int i = 0; i < m; i++) {
			id = (i % 2) * 2;
			if (s[i] == 0)str[0] = rm[b[id]], str[1] = rm[b[id + 1]];
			else str[0] = rm[b[id + 1]], str[1] = rm[b[id]];
			for (int j = 0; j < n; j++) g[j][i] = str[j % 2];
		}
	}
	for (int i = 0; i < n; i++)cout << g[i] << endl;
//	cout << res;
	return 0;
}