#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int) 1.01e9;
const ld EPS = 1e-9;

void precalc() {
}

const int maxn = (int) 1e6 + 10;
int where[maxn];
int final[maxn];
int n, m;

bool read() {
  if (scanf("%d%d", &n, &m) < 2) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    int x;
    scanf("%d", &x);
    --x;
    where[x] = i;

    final[i] = 0;
  }
  for (int i = 0; i < m; ++i) {
    int x;
    scanf("%d", &x);
    --x;
    final[x] = 1;
  }
  return 1;
}

struct FenvTree {
  int a[maxn];
  int n;

  void build(int _n) {
    n = _n;
    for (int i = 0; i < n; ++i) {
      a[i] = 0;
    }
  }

  void add(int x, int toadd) {
    for (int i = x; i < n; i |= (i + 1)) {
      a[i] += toadd;
    }
  }

  int get(int x) {
    int res = 0;
    for (int i = x; i >= 0; i = (i & (i + 1)) - 1) {
      res += a[i];
    }
    return res;
  }
} tree;

void solve() {
  long long res = 0;

  tree.build(n);
  set<int> poss;
  poss.insert(-1);
  poss.insert(n);
  for (int v = 0; v < n; ++v) {
    int pos = where[v];
    if (!final[v]) {
      auto iter = poss.lower_bound(pos);
      assert(iter != poss.end() && iter != poss.begin());
      int r = *iter;
      --iter;
      int l = *iter;
      res += (r - l - 1) - (tree.get(r - 1) - tree.get(l - 1));
      tree.add(pos, 1);
    } else {
      poss.insert(pos);
    }
  }
  printf(LLD "\n", res);
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
