#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <ctime>
#include <cmath>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cstring>
#include <iterator>
using namespace std;

#define pb push_back
#define rs resize
#define mp make_pair
#define inf 1e9
#define pi 3.1415926535897932384626433832795
#define sz(a) (int)(a).size()
#define Sort(a) sort((a).begin(), (a).end())
#define Reverse(a) reverse((a).begin(), (a).end())
#define sf scanf
#define pf printf
#define ms(a, x) memset((a), (x), sizeof(a))
#pragma(comment, linker("\STACK:50000000"))
typedef vector <int> vi;
typedef vector <vi> vvi;
typedef vector <vvi> vvvi;
typedef vector <vvvi> vvvvi;
typedef vector <bool> vb;
typedef vector <vb> vvb;
typedef vector <vvb> vvvb;
typedef vector <vvvb> vvvvb;
typedef long long ll;
typedef vector <ll> vl;
typedef vector <vl> vvl;
typedef vector <vvl> vvvl;
typedef vector <vvvl> vvvvl;
typedef pair <int, int> ii;
typedef vector <ii> vii;
typedef vector <vii> vvii;
typedef pair <int, ll> il;
typedef vector <il> vil;
typedef vector <vil> vvil;
typedef pair <ll, int> li;
typedef vector <li> vli;
typedef vector <vli> vvli;
typedef set <int> si;
typedef set <li> sli;
typedef set <il> sil;
typedef vector <string> vs;
typedef vector <vs> vvs;
typedef vector <vvs> vvvs;
typedef map <string, int> msi;
typedef map <char, int> mci;
typedef pair <ll, ll> pll;

struct edge {
    int v, to, number;

    edge() {}
    edge(int v, int to, int number) : v(v), to(to), number(number) {}
};

void find_edges(int v, vvii &g, vb &u, vector <edge> &a) {
    u[v] = 1;
    for (int i = 0; i < sz(g[v]); ++i) {
        int to = g[v][i].first;
        if (!u[to]) {
            find_edges(to, g, u, a);
            a.pb(edge(to, v, (g[v][i].second % 2 == 0 ? g[v][i].second - 1 : g[v][i].second + 1)));
        }
    }
}

void count_dp(edge x, vvii &g, vi &dp, vi &r) {
    vb u(sz(g));
    u[x.to] = 1;
    vector <edge> a;
    find_edges(x.v, g, u, a);
    dp[x.number] = 1 + (r[x.v] < r[x.to]);
    for (int i = 0; i < sz(a); ++i) {
        if (dp[a[i].number] == -1) {
            count_dp(a[i], g, dp, r);
        }
        if (r[a[i].to] < r[x.to]) {
            dp[x.number] = max(dp[x.number], dp[a[i].number] + 1);
        }
        if (r[a[i].v] < r[x.to]) {
            dp[x.number] = max(dp[x.number], 2);
        }
    }
    return;
}

int main() {
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int m, n;
    cin >> m >> n;
    vvi b(m, vi(n, 0));
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            cin >> b[i][j];
        }
    }
    vi lines(m, 1), cols(n, 1);
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            lines[i] &= b[i][j];
            cols[j] &= b[i][j];
        }
    }
    vvi a(m, vi(n, 0));
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            a[i][j] = lines[i] & cols[j];
        }
    }
    vvi c(m, vi(n, 0));
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            for (int k = 0; k < n; ++k) {
                c[i][j] |= a[i][k];
            }
            for (int k = 0; k < m; ++k) {
                c[i][j] |= a[k][j];
            }
        }
    }
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            if (c[i][j] != b[i][j]) {
                cout << "NO";
                return 0;
            }
        }
    }
    cout << "YES" << endl;
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            cout << a[i][j] << ' ';
        }
        cout << endl;
    }
}