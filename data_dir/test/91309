
#pragma GCC optimize("O3")

#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <random>
#include <cmath>

#define ll long long
#define ld long double
#define pb push_back
#define eb emplace_back
#define int long long
using namespace std;

const int INF = 2e9;
const int MOD = 1e9 + 7;
const int MB = 20;

set<char> l = { '{', '(', '[', '<' };
set<char> r = { '}', ')', ']', '>' };

void solve() {
	string s;
	cin >> s;
	
	stack<char> st;
	for (int i = 0; i < s.size(); i++) {
		if (r.count(s[i]) && !st.empty() && l.count(st.top())) st.pop();
		else st.push(s[i]);
	}

	if (!st.empty()) {
		cout << "Impossible";
		return;
	}
	int ans = 0;
	for (int i = 0; i < s.size(); i++) {
		if (r.count(s[i]) && !st.empty() && l.count(st.top())) {
			
			if (((st.top() == '(' && s[i] == ')') || (st.top() == '[' && s[i] == ']') || (st.top() == '{' && s[i] == '}') || (st.top() == '<' && s[i] == '>'))) {
				
			}
			else {
				ans++;
			}
			st.pop();
		}
		
		else {
			st.push(s[i]);
		}
	}
	cout << ans;
}

signed main() {
	/*
	freopen("search.in", "r", stdin);
	freopen("search.out", "w", stdout);
	*/
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	solve();
}