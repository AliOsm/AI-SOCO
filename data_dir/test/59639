#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
#define ll          long long
#define pb          push_back
#define    endl        '\n'
#define pii         pair<ll int,ll int>
#define vi          vector<ll int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll int)x.size()
#define hell        1e18
#define rep(i,a,b)    for(ll int i=a;i<b;i++)
#define repr(i,a,b) for(ll int i=a;i>b;i--) 
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define MAXN        200005
#define ordered_set tree<ll int, null_type,less<ll int>, rb_tree_tag,tree_order_statistics_node_update> 
ll int fact[21];
void init()
{
    fact[0]=1;
    rep(i,1,21)
    {
        fact[i]=fact[i-1]*i;
    }
}
int main()
{
    init();
    ll int t;
    cin >> t;
    while(t--)
    {
        ll int n;
        cin >> n;
        ll int count1[21];
        rep(i,0,21) count1[i]=0;
        ll int curr=2;
        ll int total=0;
        while(n!=0)
        {
            count1[n%curr]++;
            n=n/curr;
            curr++;
            total++;
        }
        ll int ans=0;
        repr(i,20,0)
        {
            if (count1[i]==0) continue;
            ll int to=total-1;
            count1[i]--;
            ll int ans1=1;
            repr(j,20,-1)
            {
                if (count1[j]==0) continue;
                ll int left=to-max((ll int)0,j-1);
                if (left<count1[j]) {ans1=0;break;}
                ans1=ans1*(fact[left])/(fact[left-count1[j]]*fact[count1[j]]);
                to=to-count1[j];
            }
            count1[i]++;
            ans=ans+ans1;
        }
        cout << ans-1 << endl;
    }
}