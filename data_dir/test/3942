
#include<bits/stdc++.h>


using namespace std;

using ll   = long long;
using ii   = pair   < int , int >;
using i3   = pair   < int , ii  >;
using li   = pair   < ll  , int >;
using lii  = pair   < ll  , ii  >;
using pll  = pair   < ll  , ll  >;
using vi   = vector < int       >;
using vl   = vector < ll        >;
using vii  = vector < ii        >;
using vli  = vector < li        >;
using vpll = vector < pll       >;
using vi3  = vector < i3        >;
using vlii = vector < lii       >;


const int N = 1000 + 5 , mod = 1e9 + 7;
const ll INF = 1e17 + 7;
const double eps = 1e-9 , PI = acos(-1);



int n , m;

char s[N];
int mem[N];
int memMN[N];
int a[30];

int dp(int i){
    if(i == n) return 1;

    int &ret = mem[i];
    if(ret != -1) return ret;

    ret = 0;
    int far = n;
    for(int j = i ; j < n ; j ++){

            far = min(far , i + a[s[j] - 'a']);
            if(far <= j) break;

            ret += dp(j + 1);
            ret %= mod;
    }

    return ret;
}

int dpMN(int i){
    if(i == n) return 0;

    int &ret = memMN[i];
    if(ret != -1) return ret;

    ret = 2e9;
    int far = n;
    for(int j = i ; j < n ; j ++){

            far = min(far , i + a[s[j] - 'a']);
            if(far <= j) break;

            ret = min(ret , 1 + dpMN(j + 1));
    }

    return ret;
}

int memMX[N];

int dpMX(int i){
    if(i == n) return 0;

    int &ret = memMX[i];
    if(ret != -1) return ret;

    ret = 0;
    int far = n;
    for(int j = i ; j < n ; j ++){

            far = min(far , i + a[s[j] - 'a']);
            if(far <= j) break;

            ret = max({ret , j - i + 1 , dpMX(j + 1)});
    }

    return ret;
}

void solve(int testCase){

    scanf("%d" , &n);
    scanf("%s" , s);

    for(int i = 0 ; i < 26 ; i ++) scanf("%d" , &a[i]);


    memset(mem , -1 , sizeof mem);
    memset(memMN , -1 , sizeof memMN);
    memset(memMX , -1 , sizeof memMX);
    int ways = dp(0);
    int mn = dpMN(0);
    int mx = dpMX(0);

    printf("%d\n%d\n%d\n" , ways , mx , mn);
}

main(){

    int t = 1;
    // scanf("%d" , &t);

    for(int testCase = 1 ; testCase <= t ; testCase ++){
            solve(testCase);
    }

    return 0;
}
