#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>
const int N = 100010;
std::vector<std::pair<int,int> > edge[N];
int n, m, deg[N];
bool vis[N];
int belong[N];
bool dfs(int u, int id) {
//    printf("u=%d id=%d\n",u,id);
    vis[u] = true;
    for(std::vector<std::pair<int,int> >::iterator it = edge[u].begin(); it != edge[u].end(); ++it) {
        if(!vis[it->first]) {
            if( dfs(it->first, it->second) ) {
               deg[u] ^= 1;
               if(belong[it->second] == u) {
                   belong[it->second] = it->first;
               } else {
                   belong[it->second] = u;
               }
          //     printf("belong[%d]=%d\n",it->second,belong[it->second]);
            }
        }
    }
    return deg[u];
}
std::pair<int,int> E[N];
std::vector<int> ee[N];
inline int another(int edgeid, int node) {
    if(E[edgeid].first == node) {
        return E[edgeid].second;
    } else {
        return E[edgeid].first;
    }
}
void output() {
    for(int i = 0; i < m; i++) {
        ee[belong[i]].push_back(another(i, belong[i]));
    }
    for(int i = 1; i <= n; i++) {
        int sz = ee[i].size();
        for(int j = 0; j + 1 < sz; j += 2) {
            printf("%d %d %d\n",ee[i][j], i, ee[i][j + 1]);
        }
    }
}
int main() {
    int a, b;
    scanf("%d%d",&n,&m);
    for(int i = 0; i < m; i++) {
        scanf("%d%d",&a,&b);
        edge[a].push_back(std::make_pair(b, i));
        edge[b].push_back(std::make_pair(a, i));
        deg[a] ^= 1;
        E[i] = std::make_pair(a, b);
        belong[i] = a;
    }
    bool can_build = dfs(1, -1);
    if(can_build) {
        printf("No solution\n");
    } else {
        output();
    }
    return 0;
}
