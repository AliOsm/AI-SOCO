#include <iostream>
#include<bits/stdc++.h>
using namespace std;
/* find pattern in text in O(size of text) */
int txt[200100] , pat[200100];
int lps[200100];
int n,m;
void computeLPSArray()
{
    int M = m;
    int len = 0;
    lps[0] = 0;
    int i = 1;
    while (i < M)
    {
        if (pat[i] == pat[len])
        {
            len++;
            lps[i] = len;
            i++;
        }
        else
        {
            if (len != 0)
            {
                len = lps[len-1];
            }
            else
            {
                lps[i] = 0;
                i++;
            }
        }
    }
}
int  KMPSearch()
{
    int ans = 0;
    int M = m;
    int N = n;
    computeLPSArray();
    int i = 0;
    int j  = 0;
    while (i < N)
    {
        if (pat[j] == txt[i])
        {
            j++;
            i++;
        }

        if (j == M)
        {
            ans++;
            j = lps[j-1];
        }

        else if (i < N && pat[j] != txt[i])
        {
            if (j != 0)
                j = lps[j-1];
            else
                i = i+1;
        }
    }
    return ans;
}
int main()
{
    cin>>n>>m;
    for(int i = 0 ; i<n ; i++) scanf("%d" , &txt[i]);
    for(int j = 0 ; j<m ; j++) scanf("%d" , &pat[j]);
    for(int i = 0 ; i<max(n-1,m-1) ; i++) txt[i] = txt[i+1]-txt[i];
    for(int i = 0 ; i<m-1 ; i++) pat[i] = pat[i+1]-pat[i];
    n--,m--;
    if(m!=0) cout<<KMPSearch()<<endl;
    else cout<<n+1<<endl;
    return 0;
}
