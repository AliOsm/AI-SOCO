




#include<bits/stdc++.h>
using namespace std;

#define LL                  long long
#define ull                 unsigned long long LL
#define scl(n)              scanf("%lld", &n)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)

#define MOD                 1000000007
#define MODP                99999999999973LL
#define pb                  push_back
#define mp                  make_pair
#define pp                  pair<LL,LL>
#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e9
#define EPS                 1e-8
#define Pi                  acos(-1.0)

#define N 200005

vector<int>v[N];

LL val[N];


LL ans=0;


void dfs(int s,int par,int dep)
{

    if(dep%2==0)
    {
        LL mn=LONG_LONG_MAX;

        for(int i=0;i<v[s].size();i++)
        {
            int now=v[s][i];
            mn=min(mn,val[now]);

        }

        if(v[s].size()>0)
        {
            val[s]=max(mn,val[par]);
            ans+=val[s]-val[par];
        }
    }
    else
    {
        if(val[s]<val[par])
        {
           // cout<<par<<" "<<s<<" "<<val[par]<<" "<<val[s]<<endl;
            cout<<-1<<endl;
            exit(0);
        }
        ans+=val[s]-val[par];

    }

    for(int i=0;i<v[s].size();i++)
    {
        int now=v[s][i];
        dfs(now,s,dep+1);

    }
}



int main()
{

    int n;
    cin>>n;


    for(int i=2;i<=n;i++)
    {
        int b;
        cin>>b;
        v[b].pb(i);
    }


    for(int i=1;i<=n;i++)
    {
        cin>>val[i];
    }
    ans+=val[1];

    dfs(1,1,1);
    cout<<ans<<endl;



    return 0;
}


/* LL dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* LL dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* LL dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* LL dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction
