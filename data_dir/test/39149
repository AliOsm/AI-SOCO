#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

#define PB push_back
//#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)

const int mx = 2e5+5;
int n;
ll tree1[mx];
vector<int> vec;
int x[mx], v[mx];
map<int,int> mp;
ll tree2[mx];

void update1( int idx, int x )
{
	while( idx < mx ) {
		tree1[idx] += x;
		idx += idx & (-idx);
	}
}

ll query1( int idx )
{
	ll sum = 0;
	while( idx > 0 ) {
		sum += tree1[idx];
		idx -= idx & (-idx);
	}
	return sum;
}

void update2( int idx, int x )
{
	while( idx < mx ) {
		tree2[idx] += x;
		idx += idx & (-idx);
	}
}

ll query2( int idx )
{
	ll sum = 0;
	while( idx > 0 ) {
		sum += tree2[idx];
		idx -= idx & (-idx);
	}
	return sum;
}

vector<pii> hmm(mx);

int main()
{
	optimize();
	cin >> n;
	for( int i = 0; i < n; ++i ) {
		cin >> hmm[i].F;
	}
	for( int i = 0; i < n; ++i ) {
		cin >> hmm[i].S;
		vec.PB(hmm[i].S);
	}
	sort( hmm.begin(), hmm.begin()+n );
	for( int i = 0; i < n; ++i ) {
		x[i+1] = hmm[i].F;
		v[i+1] = hmm[i].S;
	}
	sort(vec.begin(), vec.end());
	vec.erase( unique( vec.begin(), vec.end() ), vec.end() );
	for( int i = 0; i < vec.size(); ++i ) {
		mp[vec[i]] = i+1;
	}
	ll sum = 0;
	for( int i = 1; i <= n; ++i ) {
		sum += query2( mp[v[i]] )*x[i] - query1( mp[v[i]] );
		update1( mp[v[i]], x[i] );
		update2( mp[v[i]], 1 );
		//cout << sum << " ";
	}
	//cout << endl;
	cout << sum << endl;
}





















