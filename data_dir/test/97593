#pragma comment(linker, "/STACK:268435456")
 
#include<iostream>
#include<cstdio>
 
#include<string>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<stack>
#include<bitset>
 
#include<iomanip>
#include<memory.h>
#include<algorithm>
#include<cstring>
#include<ctime>
#include<cmath>
#include<cassert>
 
using namespace std;
 
#define forn(i, n) for(int i = 0; i < (int)(n); ++i)
#define for1(i, n) for(int i = 1; i < (int)(n); ++i)
#define nfor(i, n) for(int i = int(n) - 1; i >= 0; --i)
#define fore(i, a, b) for(int i = int(a); i < int(b); ++i)
#define correct(x, y, n, m) (0 <= x && x < n && 0 <= y && y < m)
#define x first
#define y second
#define all(a) a.begin(), a.end()
#define pb push_back
#define mp make_pair
#define sz(v) (int)(v.size())
#define hash archash
#define next arcnext
#define link arclink
#define y0 arcy0
#define y1 arcy1
#define log2 arclog2
 
template<typename T> inline T abs(T a){ return ((a < 0) ? -a : a); }
template<typename T> inline T sqr(T a){ return a * a; }
template<class T> T gcd(T a, T b) { return a ? gcd (b % a, a) : b; }
template<class T> T lcm(T a, T b) { return a / gcd (a, b) * b; }
template<class T> T sign(T a) { return a > 0 ? 1 : (a < 0 ? -1 : 0); }
 
typedef long long li;
typedef unsigned long long uli;
typedef long double ld;
typedef pair <int, int> pt;
typedef vector <int> vi; 
typedef vector <vector <int> > vvi;
typedef vector <pair <int, int> > vpt; 
 
const int dx[] = {-1, 0, 1,  0};
const int dy[] = { 0, 1, 0, -1};
const int dxK[] = {-1, -1, 0, 1, 1,  1,  0, -1};
const int dyK[] = { 0,  1, 1, 1, 0, -1, -1, -1};
const int dxKn[] = {-2, -1, 1, 2,  2,  1, -1, -2};
const int dyKn[] = { 1,  2, 2, 1, -1, -2, -2, -1};
 
const int N = int(5e5) + 9;
const int M = int(1e3) + 9;
const int LOGN = 10;
const int SQN = 350;
const int MOD = int(1e9) + 7;
const int INF = int(1e9) + 100;
const li INF64 = 2e18;
const ld PI = 3.1415926535897932384626433832795;
const ld EPS = 1e-9;

li a[2][2];
vector <li> cnt[2];

void solve(){
    forn(i, 2) forn(j, 2)
        cin >> a[i][j];
        
    forn(i, 2){
        li cur = li(sqrt(.0 + a[i][i] * 2));
        forn(d, 10000){
            cur += d;
            if(cur * (cur - 1) / 2 == a[i][i])
                cnt[i].pb(cur);
            cur -= d;
        }
    }
    
    if(cnt[0].empty() || cnt[1].empty()){
        puts("Impossible");
        return;
        
    }
    //cout << cnt[0] << ' ' << cnt[1] << endl;
    li cnt0 = -1, cnt1;
    forn(i, sz(cnt[0])) forn(j, sz(cnt[1]))
        if(cnt[0][i] * cnt[1][j] == a[0][1] + a[1][0])
            cnt0 = cnt[0][i], cnt1 = cnt[1][j];
    if(cnt0 == -1){
        puts("Impossible");
        return;
    }
    
    string res = "";
    int n = cnt0 + cnt1;
    forn(i, n){
        if(cnt0 <= a[0][1])
            res += '1', a[0][1] -= cnt0, --cnt1;
        else
            res += '0', a[1][0] -= cnt1, --cnt0;
    }
    reverse(all(res));
    cout << res << endl;
}
	
int main(){

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	srand(time(NULL));
 
	srand(time(NULL));
	cout << setprecision(10) << fixed;
	cerr << setprecision(10) << fixed;   

	solve();
 
	return 0;

}
