#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <iterator>
#include <cmath>
#include <set>
#include <deque> 
#include <string>


using namespace std;

int n, k;
char s[100010];
int letterCount[26];
bool hasNextLetter[26];

std::vector<char> ans;

void doPrint() {
	for (int i = 0 ; i < ans.size() ; i++)
		printf("%c", ans[i]);
	printf("\n");
}

int main()
{
	int T;
	scanf("%d\n", &T);
	
	for (int ii = 0 ; ii < T ; ii++) {
		for (int i = 0 ; i < 26 ; i++) {
			letterCount[i] = 0;
			hasNextLetter[i] = false;
		}
			
		scanf("%d%d\n", &n, &k);
		scanf("%s\n", s);
//		if (k == 1)
		
		for (int i = 0 ; i < n ; i++) {
			letterCount[s[i] - 'a']++;
		}
		
		hasNextLetter[25] = false;
		for (int i = 24 ; i >= 0 ; i--) {
			hasNextLetter[i] = hasNextLetter[i + 1];
			if (letterCount[i + 1] > 0) {
				hasNextLetter[i] = true;
			}
		}
		
		ans.clear();
		bool isFirstLineReady = false; 
		
		int pi = 0;
		while (pi < 26) {
			if (letterCount[pi] == 0) {
				pi++;
				continue;				
			}

				
			if (letterCount[pi] >= k) {	//正好 
				//只能一个一个追加 
				char newCh = 'a' + pi;
				ans.push_back(newCh);
				letterCount[pi] = letterCount[pi] - k;
				isFirstLineReady = true;
				break;
			} else {
				//不够
				//不够就找填充
				//填满后，最后一个就是总根 
				int left = k - letterCount[pi];
				int p = pi + 1;
				while ((p < 26) && (left > letterCount[p])) {
					left = left - letterCount[p];
					p++;
				}
				char newCh = 'a' + p;
				ans.push_back(newCh);
				isFirstLineReady = false;
				break;
			}
		}
		
		if (isFirstLineReady == false) {
			doPrint();
			continue;
		}
		
		//第一行已经处理完毕
		while (pi < 26) {
			if (letterCount[pi] == 0) {
				pi++;
				continue;				
			}
			
			if (hasNextLetter[pi] == false) {
				//最后一个有效数字
				 
				//平铺填充所有数据
				int realLength = letterCount[pi] / k;
				//铺不满要补充 
				if (letterCount[pi] % k != 0)
					realLength++;
					
				char newCh = 'a' + pi;
				for (int i = 0 ; i < realLength ; i++) {
					ans.push_back(newCh);
				}
				break;
			} else {
				//否则应当直接单列填满
				while (pi < 26) {
					char newCh = 'a' + pi;
					for (int i = 0 ; i < letterCount[pi] ; i++) {
						ans.push_back(newCh);
					}
					pi++;
				}
				break;
			}
			
		}
		
		doPrint();
		
	}
	return 0;
}
