#include <bits/stdc++.h>
using namespace std;

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<ll,ll> pii;
typedef pair<pii, ll> para;
const ll inf = 1e9 + 7;
const ll maxN = 1e5 + 5;
//const ll MOD = 998244353;

int n, m, k;
int arr[maxN][6];
deque<int> dq[6];
vi ans;

int sumMaxims() {
	int sum = 0;
	REP(j, m) {
		sum += dq[j].front();
	}
	return sum;
}

vi getMaxims() {
	vi tmp;
	REP(j, m) tmp.pb(dq[j].front());
	return tmp;
}

void push(int ind, int val) {
	while (!dq[ind].empty() && dq[ind].back() < val) dq[ind].pop_back();
	dq[ind].push_back(val);
}

bool ok(int cnt) {
	REP(i, cnt) {
		REP(j, m) {
			push(j, arr[i][j]);
		}
	}
	int d = sumMaxims();
	if (d <= k) {
		ans = getMaxims();
		return true;
	}
	FOR(i, cnt, n - 1) {
		REP(j, m) {
			if (!dq[j].empty() && dq[j].front() == arr[i - cnt][j]) dq[j].pop_front();
			push(j, arr[i][j]);
		}
		int d = sumMaxims();
		if (d <= k) {
			ans = getMaxims();
			return true;
		}
	}
	return false;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin >> n >> m >> k;
	REP(i, n) {
		REP(j, m) {
			cin >> arr[i][j];
		}
	}
	int l = 0, r = n;
	while (r - l > 1) {
		int mid = (l + r) / 2;
		if (ok(mid)) {
			l = mid;
		} else {
			r = mid - 1;
		}
		REP(j, m) dq[j].clear();
	}
	if (ok(l + 1)) l++;
	if (ans.empty()) {
		REP(i, m) ans.pb(0);
	}
	for (auto x: ans) cout << x << " ";
	return 0;
}
