#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <memory.h>
#include <ctime>
#include <bitset>

using namespace std;
 
#define ABS(a) ((a>0)?a:-(a))
#define MIN(a,b) ((a<b)?(a):(b))
#define MAX(a,b) ((a<b)?(b):(a))
#define FOR(i,a,n) for (int i=(a);i<(n);++i)
#define FI(i,n) for (int i=0; i<(n); ++i)
#define pnt pair <int, int>
#define mp make_pair
#define PI 3.14159265358979
#define MEMS(a,b) memset(a,b,sizeof(a))
#define LL long long
#define U unsigned

vector<pnt > a,b,c,d,e;
string s="UDLR";
int res[1000010][3];
int sz;
void solve(vector<pnt > a, int u, int d, int l, int r)
{
	sort(a.begin(),a.end());
	FOR(i,0,a.size())
	{
		if (a[i].first)
		{
			res[sz][0]=1;
			res[sz][1]=a[i].first;
			res[sz++][2]=r;
		}
		if (a[i].second)
		{
			res[sz][0]=1;
			res[sz][1]=a[i].second;
			res[sz++][2]=u;
		}
		res[sz++][0]=2;
		if (a[i].second)
		{
			res[sz][0]=1;
			res[sz][1]=a[i].second;
			res[sz++][2]=d;
		}
		if (a[i].first)
		{
			res[sz][0]=1;
			res[sz][1]=a[i].first;
			res[sz++][2]=l;
		}
		res[sz++][0]=3;
	}
}
int main()
{
#ifdef Fcdkbear
	freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	double beg=clock();
#endif

	int n;
	scanf("%d",&n);
	e.resize(n);
	FOR(i,0,n)
	{
		int x,y;
		scanf("%d%d",&x,&y);
		if ((x>=0) && (y>=0))
			a.push_back(mp(x,y));
		if ((x>=0) && (y<0))
			b.push_back(mp(x,-y));
		if ((x<0) && (y>=0))
			c.push_back(mp(-x,y));
		if ((x<0) && (y<0))
			d.push_back(mp(-x,-y));
	}
	solve(a,0,1,2,3);
	solve(b,1,0,2,3);
	solve(c,0,1,3,2);
	solve(d,1,0,3,2);
	printf("%d\n",sz);
	FOR(i,0,sz)
	{
		printf("%d",res[i][0]);
		if (res[i][0]==1)
			printf(" %d %c",res[i][1],s[res[i][2]]);
		printf("\n");
	}

#ifdef Fcdkbear
	double end=clock();
	fprintf(stderr,"*** Total time = %.3lf ***\n",(end-beg)/CLOCKS_PER_SEC);
#endif
	return 0;
}