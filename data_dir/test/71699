#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int MOD = 1e9 + 7;
const int MAX = 1e5 + 6;
int arr[MAX];
int n;

inline int add(int a, int b) {
	a += b;
	if(a >= MOD) {
		a -= MOD;
	}
	return a;
}

inline int mult(int a, int b) {
	return (1LL * a * b) % MOD;
}

int f_exp(int x, int exp) {
	if(exp == 0) {
		return 1;
	}
	else if(exp & 1) {
		return mult(x, f_exp(x, exp - 1));
	}
	return f_exp(mult(x, x), exp >> 1);
}

vector<int> divisors(int x) {
	vector<int> d;
	for(ll i = 1; i * i <= x; i++) {
		if(x % i == 0) {
			if(i == x / i) {
				d.push_back(i);
			}
			else {
				d.push_back(i);
				d.push_back(x / i);
			}
		}
	}
	return d;
}

int seq[MAX];

int gcd(int a, int b) {
	return !b ? a : gcd(b, a % b);
}

int main() {
	scanf("%d", &n);
	fori(i, 1, n + 1) {
		scanf("%d", arr + i);
	}
	
	sort(arr + 1, arr + n + 1);

	set<int> all;
	fori(i, 1, n + 1) {
		vector<int> d = divisors(arr[i]);
		for(auto &each : d) {
			seq[each] = mult(seq[each], 2);
			all.insert(each);
		}
		for(auto &each : d) {
			seq[each] = add(seq[each], 1);
		}
	}
	
	for(auto it = all.rbegin(); it != all.rend(); it++) {
		vector<int> d = divisors(*it);
		for(auto &each : d) {
			if(each == *it) {
				continue;
			}
			seq[each] = (seq[each] - seq[*it]) % MOD;
			if(0 > seq[each]) {
				seq[each] += MOD;
			}
		}
	}

	int good = 0;
	fori(i, 2, MAX) {
		good = add(good, seq[i]);
	}

	int ans = ((f_exp(2, n) - 1) % MOD) - good;
	ans %= MOD;
	if(0 > ans) {
		ans += MOD;
	}
	printf("%d\n", ans);

	return 0;
}

