/*input
1 3 5 2
ABA
BBB
BBA
BAB
ABB


*/
#include <bits/stdc++.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define mp make_pair
#define loop(i,l,r) for(signed i=(l); i<=(r); i++)
#define rloop(i,l,r) for(signed i=(l); i>=(r); i--)
#define fi first
#define se second
#define __builtin_popcount __builtin_popcountll
#define bit(x,y) ((x>>y)&1LL)
#define sz(x) ((signed)x.size())
void Max(int &x, int y) {x = max(x, y);}
void Min(int &x, int y) {x = min(x, y);}
//const int N=;
template <class T1, class T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &a) {
	return os << '(' << a.first << ", " << a.second << ')';
}
template <class T>
ostream &operator<<(ostream &os, const vector<T> &a) {
	os << '[';
	for (unsigned int i = 0; i < a.size(); i++)
		os << a[i] << (i < a.size() - 1 ? ", " : "");
	os << ']';
	return os;
}
struct dsu {
	vector<int> par, sz;
	void init(int n) {
		sz.assign(n + 5, 1); par = sz;
		for (int i = 0; i < n + 5; i++) par[i] = i;
	}
	int find(int x) {
		return (par[x] == x ? x : par[x] = find(par[x]));
	}
	bool sameSet(int u, int v) {
		return find(u) == find(v);
	}
	void uni(int x, int y) {
		x = find(x); y = find(y);
		if (x != y) {
			sz[y] += sz[x]; sz[x] = 0;
			par[x] = y;
		}
	}
} d;

struct Edge {
	int u, v, weight;
	Edge(int _u, int _v, int _weight): u(_u), v(_v), weight(_weight) {};
};

int n, m, k, w;
vector<string> a;
vector<vector<int> > g(1005);
vector<Edge> e;

vector<pair<int, int> > order;
void dfs(int u, int p) {
	if (u != p) order.push_back(mp(u, p));
	for (auto v : g[u]) if (v != p) dfs(v, u);
}

signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n >> m >> k >> w;
	d.init(k + 1);
	loop(_, 1, k) {
		string s;
		loop(i, 1, n) {
			string t;
			cin >> t; s += t;
		}
		a.push_back(s);
	}
	loop(i, 0, k - 1) e.push_back(Edge(i + 1, 0, n * m));
	loop(i, 0, k - 1) {
		loop(j, i + 1, k - 1) {
			int ret = 0;
			loop(_, 0, n * m - 1) ret += (a[i][_] != a[j][_]);
			if (ret * w > n * m) continue;
			e.push_back(Edge(i + 1, j + 1, ret * w));
		}
	}
	sort(e.begin(), e.end(), [&](Edge & X, Edge & Y) {
		return X.weight < Y.weight;
	});
	int ans = 0;
	for (auto &it : e) {
		if (d.find(it.u) == d.find(it.v)) continue;
		ans += it.weight;
		d.uni(it.u, it.v);
		g[it.u].push_back(it.v);
		g[it.v].push_back(it.u);
	}
	cout << ans << endl;
	dfs(0, 0);
	for (auto it : order) cout << it.fi << sp << it.se << endl;
}
