#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
const int N = 2e5 + 10;
int n, m, a[N];
pair<int, int> treeMin[4*N], treeMax[4*N];
void Build(int v, int vLeft, int vRight){
	if (vLeft == vRight){
		treeMin[v] = {a[vLeft], vLeft};
		treeMax[v] = {a[vLeft], vLeft};
	}
	else{
		int mid = (vLeft + vRight) / 2;
		Build(2*v, vLeft, mid), Build(2*v+1, mid+1, vRight);
		treeMin[v] = min(treeMin[2*v], treeMin[2*v+1]);
		treeMax[v] = max(treeMax[2*v], treeMax[2*v+1]);
	}
}
pair<int, int> GetMin(int v, int vLeft, int vRight, int left, int right){
	if (left > vRight || vLeft > right){
		return {1e9, 1e9};
	}
	if (vLeft >= left && right >= vRight){
		return treeMin[v];
	}
	int mid = (vLeft + vRight) / 2;
	return min(GetMin(2*v, vLeft, mid, left, right), GetMin(2*v+1, mid+1, vRight, left, right));
}
pair<int, int> GetMax(int v, int vLeft, int vRight, int left, int right){
	if (left > vRight || vLeft > right){
		return {-1e9, -1e9};
	}
	if (vLeft >= left && right >= vRight){
		return treeMax[v];
	}
	int mid = (vLeft + vRight) / 2;
	return max(GetMax(2*v, vLeft, mid, left, right), GetMax(2*v+1, mid+1, vRight, left, right));
}
int main(){
	// freopen("input.txt", "r", stdin);
	// freopen("output.txt", "w", stdout);
	ios_base::sync_with_stdio(false), cin.tie(0),cout.tie(0);
	cin>>n>>m;
	for (int i=1; i<=n; i++){
		cin>>a[i];
	}
	Build(1, 1, n);
	for (int i=1; i<=m; i++){
		int left, right, value;
		cin>>left>>right>>value;
		pair<int, int> mn = GetMin(1, 1, n, left, right);
		pair<int, int> mx = GetMax(1, 1, n, left, right);
		if (mn.first != value){
			cout<<mn.second<<endl;
		}
		else if (mx.first != value){
			cout<<mx.second<<endl;
		}
		else{
			cout<<-1<<endl;
		}
	}
}