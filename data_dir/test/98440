//Be Name Khoda
//Ahay! Hormat ha hefz she baradare man ... 
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using kordered_multiset =  tree<T, null_type, greater_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)1e5 + 7;
const ll inf = (ll)1e18;
const int infint = (int)1e9;
int dp[MAXN], c[MAXN], a[MAXN], b[MAXN];
vector<int> G[MAXN];
multiset<int> S;
int sum(int k)
{
	//sum of last k
	int ans = 0, ptr = k;
	for (multiset<int>::reverse_iterator it = S.rbegin(); it != S.rend() && ptr > 0; it++, ptr--)
		ans += *it;
	return ans;
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n;
	cin >> n;
	int mn = infint;
	for (int i = 0; i < n; i++)
	{
		cin >> a[i];
		mn = min(mn, a[i]);
	}
	for (int i = 0; i < n; i++)
	{
		cin >> b[i];
		c[a[i]] += b[i];
		G[a[i]].push_back(b[i]);
	}
	dp[mn] = 0;
	for (auto u : G[mn])
		S.insert(u);
	int all = c[mn];
	for (int i = mn + 1; i < MAXN; i++)
	{
		if(c[i] == 0)
		{
			dp[i] = dp[i - 1];
			continue;
		}
		else
		{
			dp[i] = dp[i - 1] + c[i];
		}
		//There should remain G[i].size() - 1 element
		int cur = 0;
		if(S.size() <= G[i].size() - 1)
			cur = 0;
		else
		{
			cur = all - sum(G[i].size() - 1);
		}
		dp[i] = min(dp[i], cur);
		all += c[i];
		for (auto u : G[i])
			S.insert(u);
	}
	cout << dp[MAXN - 1];
}
