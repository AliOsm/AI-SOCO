#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<int, int>, // change type
//        null_type,
//        less<pair<int, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)(x).size()
#define pb push_back
#define X first
#define Y second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const double PI = 3.14159265358979323846;
const double eps = (1e-7);
int dcmp(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}

const int MOD = 1000000007;
ll mod(ll x)
{
    return x%MOD;
}

ll add(ll x, ll y)
{
    x += y;
    if (x >= MOD)
        x -= MOD;
    if (x < 0)
        x += MOD;
    return x;
}
ll mult(ll x, ll y)
{
    return (x * y)%MOD;
}

ll power(ll base, ll exp)
{
    ll ret = 1;
    for (; exp; exp >>= 1)
    {
        if (exp&1)
            ret = mult(ret, base);
        base = mult(base, base);
    }
    return ret;
}

ll modInverse(ll x)
{
    return power(x, MOD - 2);
}


ll fact[1005], factInverse[1005];
void preFact()
{
    fact[0] = fact[1] = 1;
    factInverse[0] = factInverse[1] = modInverse(1);
    for (ll i = 2; i < 1005; ++i)
    {
        fact[i] = mult(i, fact[i - 1]);
        factInverse[i] = modInverse(fact[i]);
    }

}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
    preFact();
    int n, m;
    cin >> n >> m;
    int last = 0;
    ll ans = fact[n - m];
    vector<int> v(m);
    rep(i,0,m)
        cin >> v[i];
    sort(all(v));
    for (auto x : v)
    {
        x--;
        int size = (x - 1) - last + 1;
        ans = mult(ans, factInverse[size]);
        if (last != 0)
            ans = mult(ans, power(2, max(0, size - 1)));
        last = x + 1;
    }
    int size = n - last;
    ans = mult(ans, factInverse[size]);

    cout << ans;
    return 0;
}