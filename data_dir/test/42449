#include<iostream>
#include<stdio.h>
#include<cassert>
#include<cstring>
#include<time.h>
#include<cstdlib>
#include<cmath>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
#define forit(it,S) for(__typeof((S).begin()) it = (S).begin(); it != (S).end(); it++)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
int hp[2],dt[2],l[2],r[2];
double p[2],h[2][205],hh[205];
int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    for (int i = 0; i < 2; i++) {
        cin >> hp[i] >> dt[i] >> l[i] >> r[i] >> p[i];
    }
    if (p[0] == 100) {
        printf("%.12lf\n",0.0);
        return 0;
    }
    if (p[1] == 100) {
        printf("%.12lf\n",1.0);
        return 0;
    }
    p[0] /= 100.0;
    p[1] /= 100.0;
    int t0 = 0;
    int t1 = 0;
    h[0][hp[0]] = 1.0;
    h[1][hp[1]] = 1.0;
    double res = 0.0;
    for (int it = 0; it < 10000; it++) {
        if (t0 <= t1) {
            for (int i = hp[1]; i >= 0; i--) {
                hh[i] = 0.0;
            }
            for (int i = hp[1]; i >= 1; i--) {
                hh[i] += h[1][i] * p[0];
                for (int j = l[0]; j <= r[0]; j++) {
                    hh[max(i - j,0)] += h[1][i] * (1.0 - p[0]) / (r[0] - l[0] + 1);
                }
            }
            for (int i = hp[1]; i >= 0; i--) {
                h[1][i] = hh[i];
            }
            for (int i = hp[0]; i >= 1; i--) {
                res += h[0][i] * h[1][0];
            }
            t0 += dt[0];
        } else {
            for (int i = hp[0]; i >= 0; i--) {
                hh[i] = 0.0;
            }
            for (int i = hp[0]; i >= 1; i--) {
                hh[i] += h[0][i] * p[1];
                for (int j = l[1]; j <= r[1]; j++) {
                    hh[max(i - j,0)] += h[0][i] * (1.0 - p[1]) / (r[1] - l[1] + 1);
                }
            }
            for (int i = hp[0]; i >= 0; i--) {
                h[0][i] = hh[i];
            }
            t1 += dt[1];
        }
    }
    printf("%.12lf\n",res);
    return 0;
}
