#include <cstdio>
#include <algorithm>
#include <bitset>
using namespace std;

const int MAXN = 1000005;
int N, K;
int P[MAXN];
bool vis[MAXN];
int A[MAXN];
int szA = 0;
int occ[MAXN];
pair<int, int> B[MAXN];
int szB = 0;
bitset<MAXN> dp;

void go(int cur)
{
    int cnt = 0;
    while (!vis[cur])
    {
        cnt++;
        vis[cur] = true;
        cur = P[cur];
    }
    A[szA++] = cnt;
    occ[cnt]++;
}

int getMax()
{
    int k = K, ret = 0, extra = 0;
    for (int i = 0; i < szA && k > 0; i++)
    {
        int use = min(k, A[i]/2);
        ret += 2*use;
        k -= use;
        extra += A[i] % 2 == 1;
    }

    ret += min(k, extra);
    return ret;
}

int getMin()
{
    for (int i = 1; i <= N; i++)
        if (occ[i] > 0)
            B[szB++] = make_pair(i, occ[i]);

    dp[0] = 1;
    for (int i = 0; i < szB; i++)
    {
        int len = B[i].first, num = B[i].second;
        int x = 1;
        while (x <= num)
        {
            dp |= dp<<(x*len);
            num -= x;
            x <<= 1;
        }
        dp |= dp<<(num*len);
    }

    if (dp[K])
        return K;
    return K + 1;
}

int main()
{
    scanf("%d %d", &N, &K);
    for (int i = 1; i <= N; i++)
        scanf("%d", &P[i]);

    for (int i = 1; i <= N; i++)
        if (!vis[i])
            go(i);

    sort(A, A + szA);

    int maxAns = getMax();
    int minAns = getMin();

    printf("%d %d\n", minAns, maxAns);

    return 0;
}
