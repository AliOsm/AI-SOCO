#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<queue>
#include<string>
#include<cstring>
#include<map>
#include<cmath>
#include<bitset>
#include<set>
#include<cstdlib>
#include<complex>
#include<list>
#include<sstream>
#include<cassert>
#include<iomanip>
#include<limits>

using namespace std;

//#define double long double

typedef pair<int,int> ii;
typedef pair<int,long long> il;
typedef pair<long long,long long> ll;
typedef pair<ll,int> lli;
typedef pair<long long,int> li;
typedef pair<double,double> dd;
typedef pair<ii,int> iii;
typedef pair<double,int> di;
typedef pair<int,ii> iii2;
typedef pair<ii,ii> iiii;
int mod = 1000000007LL;
long long large = 2000000000000000000LL;



int gcd(int a,int b){
	if(b==0) return a;
	return gcd(b,a%b);
}
vector<int> g;

int up,uv;
void update(int o,int l,int r){
	if(l==r){
		g[o] = uv;
	}else{
		int m = (l+r)/2;
		if(up<=m) update(o*2,l,m);
		if(up>m) update(o*2+1,m+1,r);
		g[o] = gcd(g[o*2],g[o*2+1]);
	}
}

int ql,qr,cnt,val;

void find(int o,int l,int r){
	if(cnt>=2) return ;
	if(l==r) cnt++;
	else{
		int m = (l+r)/2;
		int re1 = gcd(val,g[o*2]);
		int re2 = gcd(val,g[o*2+1]);
		if(re1!=val) find(o*2,l,m);
		if(re2!=val) find(o*2+1,m+1,r);
	}
}
void query(int o,int l,int r){
	if(ql<=l&&qr>=r){
		if(gcd(val,g[o])!=val) find(o,l,r);
	}else{
		int m = (l+r)/2;
		if(ql<=m) query(o*2,l,m);
		if(qr>m) query(o*2+1,m+1,r);
	}
}
int main(){

	int n;
	cin>>n;
	g.assign(4*n+10,1);
	for(int i=0;i<n;i++){
		int x;
		scanf("%d",&x);
		up = i;
		uv = x;
		update(1,0,n-1);
	}
	int q;
	cin>>q;
	while(q--){
		int t;
		scanf("%d",&t);
		if(t==1){
			scanf("%d%d%d",&ql,&qr,&val);
			ql--;qr--;
			cnt = 0;
			query(1,0,n-1);
			if(cnt>=2) printf("NO\n");
			else printf("YES\n");
		}else{
			scanf("%d%d",&up,&uv);
			up--;
			update(1,0,n-1);
		}
	}




    return 0;
}
