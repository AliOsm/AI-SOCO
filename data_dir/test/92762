#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, std::less<>, rb_tree_tag, tree_order_statistics_node_update>;
using namespace std;
typedef long long int64;
typedef unsigned long long uint64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//*/998244353;
const int base = 2187;
const double eps = 1e-9;
const int N = 300'000;
const int LOGN = 19;

int n, m, k;

void solve(int) {
  int64 n, k;
  cin >> n >> k;
  int64 l = 1, r = n;
  while (l < r) {
    int64 mid = (l + r + 1) / 2;
    int64 x = 0, y = 0;
    int i;
    if (mid & 1) {
      for (i = 1; (1ll << i) * mid <= n; ++i) {
        x += 1ll << (i - 1);
      }
      x += min(1ll << (i - 1), n - (1ll << (i - 1)) * mid + 1);
      for (i = 1; (1ll << i) * (mid + 1) <= n; ++i) {
        y += 1ll << i;
      }
      y += min(1ll << i, n - (1ll << (i - 1)) * (mid + 1) + 1);
    } else {
      for (i = 1; (1ll << i) * mid <= n; ++i) {
        x += 1ll << i;
      }
      x += min(1ll << i, n - (1ll << (i - 1)) * mid + 1);
    }
    if (x >= k || y >= k) {
      l = mid;
    } else {
      r = mid - 1;
    }
  }
  cout << l << '\n';
}

void precalc() {
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i) {
    solve(i);
  }
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}
