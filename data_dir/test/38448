#include <bits/stdc++.h>
using namespace std;
 
const int inf = 0x3f3f3f3f;
 
 
map <int, int> mp;
 
int l[303], cst[303], dp[303][90000];
 
int f(int idx, int g) {
        if(!idx) {
                if(g == 1) return 0;
                return inf;
        }
        if(~dp[idx][mp[g]]) return dp[idx][mp[g]];
        return dp[idx][mp[g]] = min(f(idx - 1, g), cst[idx] + f(idx - 1, __gcd(g, l[idx])));
}
 
int main() {
        int n; cin >> n;
        vector <int> v;
        for(int i = 1; i <= n; i++) {
                cin >> l[i];
                for(int j = 1; j * j <= l[i]; j++) {
                        if(l[i] % j == 0) {
                                v.push_back(j);
                                v.push_back(l[i] / j);
                        }
                }
        }
        for(int i = 1; i <= n; i++) cin >> cst[i];
        sort(v.begin(), v.end()); int t = 0;
        for(int c: v)
                if(!mp[c])
                        mp[c] = ++t;
        assert(t < 90000);
        memset(dp, -1, sizeof dp);
        f(n, 0);
        if(dp[n][0] == inf) cout << -1 << endl;
        else                cout << dp[n][0] << endl;
 
}       
