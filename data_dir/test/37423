#define _USE_MATH_DEFINES
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <random>
#include <cmath>
#include <bitset>

#define ll long long
#define ld long double
//#define mp make_pair
#define pb push_back
#define eb emplace_back
#define int long long
using namespace std;

const int INF = 2e9;
const int MOD = 1e9 + 7;
const int MB = 13;

int goX[] = { -1, 0, 1, 1, 1, 0, -1, -1 };
int goY[] = { 1, 1, 1, 0, -1, -1, -1, 0 };

vector<vector<int>> pref;
bool check(int n, int m, vector<string>& a, int mid) {
	int x = mid;
	vector<vector<int>> now(n, vector<int>(m));
	queue<pair<int, int>> q;
	for (int i = x; i < n - x; i++) {
		for (int j = x; j < m - x; j++) {
			if (a[i][j] == '.') continue;
			int d = pref[i + x + 1][j + x + 1] - pref[i - x][j + x + 1] - pref[i + x + 1][j - x] + pref[i - x][j - x];
			if (d == (x * 2 + 1) * (x * 2 + 1)) {
				q.push({ i, j});
				now[i][j] = mid + 1;
			}
		}
	}

	while (!q.empty()) {
		auto p = q.front();
		q.pop();
		if (now[p.first][p.second] == 1) continue;
		for (int i = 0; i < 8; i++) {
			int x = p.first + goX[i];
			int y = p.second + goY[i];
			if (x >= 0 && y >= 0 && x < n && y < m && !now[x][y]) {
				now[x][y] = now[p.first][p.second] - 1;
				q.push({ x, y });
			}
		}
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (a[i][j] == 'X' && !now[i][j]) return false;
		}
	}
	return true;
}

void solve() {
	int n, m;
	cin >> n >> m;
	vector<string> a(n);
	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}

	


	pref.resize(n + 1, vector<int>(m + 1));
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			pref[i][j] = pref[i - 1][j] + pref[i][j - 1] - pref[i - 1][j - 1] + (a[i - 1][j - 1] == 'X' ? 1 : 0);
		}
	}

	int l = 0;
	int r = min(n, m) + 1;
	while (r - l > 1) {
		int mid = (r + l) >> 1;
		if (check(n, m, a, mid)) l = mid;
		else r = mid;
	}

	int x = l;
	vector<string> ans = a;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			ans[i][j] = '.';
		}
	}

	for (int i = x; i < n - x; i++) {
		for (int j = x; j < m - x; j++) {
			if (a[i][j] == '.') continue;
			int d = pref[i + x + 1][j + x + 1] - pref[i - x][j + x + 1] - pref[i + x + 1][j - x] + pref[i - x][j - x];
			if (d == (x * 2 + 1) * (x * 2 + 1)) ans[i][j] = 'X';
		}
	}
	cout << x << '\n';
	for (int i = 0; i < n; i++) {
		cout << ans[i] << '\n';
	}
}

signed main() {
	/*
	freopen("search.in", "r", stdin);
	freopen("search.out", "w", stdout);
	*/
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	solve();
}