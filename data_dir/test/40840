#pragma GCC optimize ("Ofast")
#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define ll long long
#define ld long double
#define all(a) a.begin(),a.end()
#define endl '\n'
#define ull unsigned long long
#define ios ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define iter vector< int >::iterator
#define iter1 vector<int>::iterator
#define int long long
using namespace std;
using namespace __gnu_pbds;

template<class T>
using ordered_set=tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

template<class T>
using ordered_multiset=tree<T,null_type,less_equal<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rnd1(chrono::steady_clock::now().time_since_epoch().count());

//find_by_order
//order_of_key

const int N=2e5+7;
const int inf=1e18+1e9;
const int mod=1e9+7;
const ld eps=1e-9;

//const int MAX_MEM=1e8;
//int mpos=0;
//char mem[MAX_MEM];
//
//inline void * operator new(size_t n){
//    char *res=mem+mpos;
//    mpos+=n;
//    assert(mpos<=MAX_MEM);
//    return (void*)res;
//}
//
//inline void operator delete(void *) {}

vector<int>g[N];
bool used[N];

main ()
{
    ios;
    int t;
    cin>>t;
    for (int tt=1;tt<=t;++tt){
        int n;
        cin>>n;
        for (int i=1;i<=n;++i){
            g[i].clear();
            used[i]=0;
        }
        for (int i=1;i<=n;++i){
            int k;
            cin>>k;
            for (int j=1;j<=k;++j){
                int x;
                cin>>x;
                g[i].pb(x);
            }
            sort(all(g[i]));
        }
        int first=-1;
        for (int i=1;i<=n;++i){
            bool cc=0;
            for (int j=0;j<g[i].size();++j){
                int to=g[i][j];
                if (!used[to]){
                    used[to]=true;
                    cc=1;
                    break;
                }
            }
            if (!cc)first=i;
        }
        if (first==-1){
            cout<<"OPTIMAL"<<endl;
        }
        else {
            int l=-1;
            for (int j=1;j<=n;++j){
                if (!used[j]){
                    l=j;
                    break;
                }
            }
            cout<<"IMPROVE"<<endl;
            cout<<first<<' '<<l<<endl;
        }
    }
}

//1234561000000000000000000
