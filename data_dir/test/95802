/*
    OUTLAW!!
           ---SIDHU MOOSEWALA
                                */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli M=1000000007;   
lli INF=1e17;
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcount(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctz(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clz(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffs(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,y,k,m;
const double pi1=3.14159265358979323846;
//unordered_map<pair<ll,lli>,lli> mp;
lli me(lli a,lli b,lli M)
{
    if(b==0)
    return 1;
    else if(b%2==0)
    return me((a*a)%M,b/2,M);
    else
    return (a%M*me((a*a)%M,(b-1)/2,M)%M)%M;
}
lli mI(lli a,lli m)
{
    return me(a,m-2,m);
}
//lli tot=0;
vector<lli> pf(string s) {
    int n = (int)s.length();
    vector<lli> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}
//map<ll,lli> dp;
//set<lli> s[100005];
//lli dp[3005][3005];
//ost s[500005];
bool cmp(ll a,ll b)
{
    if(a.second==b.second)
    return a.first<b.first;
    return a.second<b.second;
}
//string sdp[3005][3005];
lli vis[3000004];
vector<lli> v[500000];
lli cx,cy;
void dfs(lli i)
{
    if(vis[i])
    return;
    if(i>=200000)
    cy++;
    else
    cx++;
    vis[i]=1;
    for(auto &j: v[i])
    dfs(j);
}
int tab[200005];
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
        int t,x,n;
        scanf("%d",&t);
        for(int i=1;i<=t;i++)
        {
            scanf("%d",&n);
            vector<lli> vv;
            for(int j=1;j<=n;j++)
            scanf("%d",&x),vv.push_back(x);
            sort(vv.begin(),vv.end());
            vv.resize(unique(vv.begin(),vv.end())-vv.begin());
            lli siz=vv.size()-1;
            int mx=vv[siz];
            for(int j=0;j<=siz;j++)
            tab[j]=vv[j];
            for(int j=siz;j>=0;j--)
            {
              for(int p=j-1;p>=0;p--)
              {
                  if(tab[j]%tab[p])
                  {
                      mx=max(mx,tab[j]+tab[p]);
                      break;
                  }
              }
            }
            for(int j=siz;j>=2&&tab[j]+tab[j-1]+tab[j-2]>mx;j--)
            {
                for(int p=j-1;p>=1&&tab[j]+tab[p]+tab[p-1]>mx;p--)
                {
                    if(!(tab[j]%tab[p]))
                    continue;
                    for(int k=p-1;k>=0&&tab[j]+tab[p]+tab[k]>mx;k--)
                    {
                        if(tab[j]%tab[k]&&tab[p]%tab[k])
                        {
                            mx=max(mx,tab[p]+tab[k]+tab[j]);
                            break;
                        }
                    }
                }
            }
            printf("%d\n",mx);
        }
    //for(int i=1;i<=n;i++)
}//