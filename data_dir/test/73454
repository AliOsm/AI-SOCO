#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <ctime>
#include <cmath>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cstring>
using namespace std;

#define pb push_back
#define rs resize
#define mp make_pair
#define inf 1e9
#define pi 3.1415926535897932384626433832795
#define sz(a) (a).size()
#define sort(a) sort((a).begin(), (a).end())
#define reverse(a) reverse((a).begin(), (a).end())
#define sf scanf
#define pf printf

typedef vector <int> vi;
typedef vector <vi> vvi;
typedef vector <vvi> vvvi;
typedef vector <vvvi> vvvvi;
typedef vector <bool> vb;
typedef vector <vb> vvb;
typedef vector <vvb> vvvb;
typedef vector <vvvb> vvvvb;
typedef long long ll;
typedef vector <ll> vl;
typedef vector <vl> vvl;
typedef vector <vvl> vvvl;
typedef vector <vvvl> vvvvl;
typedef pair <int, int> ii;
typedef vector <ii> vii;
typedef vector <vii> vvii;
typedef pair <int, ll> il;
typedef vector <il> vil;
typedef vector <vil> vvil;
typedef pair <ll, int> li;
typedef vector <li> vli;
typedef vector <vli> vvli;
typedef set <int> si;
typedef set <li> sli;
typedef set <il> sil;
typedef vector <string> vs;
typedef vector <vs> vvs;
typedef vector <vvs> vvvs;
typedef map <string, int> msi;
typedef map <char, int> mci;

int p[(int)1e6 + 1], dp[(int)1e6 + 1], max1[(int)1e6 + 1], max2[(int)1e6 + 1];

inline void count_dp(int v)
{
    if (v == 0)
    {
        dp[v] = max1[v];
        return;
    }
    int pr = dp[v];
    if (dp[v] == max(max1[v], max2[v] + 1))
    {
        return;
    }
    dp[v] = max(max1[v], max2[v] + 1);
    if (max1[p[v]] == pr)
    {
        max1[p[v]] = dp[v];
        count_dp(p[v]);
        return;
    }
    if (max2[p[v]] == pr)
    {
        max2[p[v]] = dp[v];
        if (max2[p[v]] > max1[p[v]])
            swap(max2[p[v]], max1[p[v]]);
        count_dp(p[v]);
    }
    return;
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    int n;
    sf("%d", &n);
    n++;
    max1[0] = 0;
    for (int i = 1; i < n; ++i)
    {
        sf("%d", &p[i]);
        p[i]--;
        max1[i] = max2[i] = 0;
        count_dp(i);
        pf("%d ", dp[0]);
    }
}