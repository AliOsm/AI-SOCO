#include<iostream>
#include<vector>

#define PB push_back

using namespace std;

const int MAXN = 1000056, MAXL = 23;
int par[MAXL][MAXN], a[MAXN], h[MAXN], t[MAXN], n, in = 4;
vector<int> v[MAXN];

void DFS(int n)
{
	for(int x : v[n])
	{
		par[0][x] = n;
		h[x] = h[n] + 1;
		DFS(x);
	}
}

void make_LCA()
{
	for(int i = 1; i < MAXL; i++)
		for(int j = 0; j < in; j++)
			par[i][j] = par[i - 1][par[i - 1][j]];
}

int getpar(int x, int t)
{	
	for(int i = MAXL - 1; i >= 0; i--)
		if(t >= (1 << i))
		{
			x = par[i][x];
			t -= (1 << i);
		}
	return x;
}

int LCA(int x, int y)
{
	if(h[x] < h[y])
		swap(x, y);
	x = getpar(x, h[x] - h[y]);
	if(x == y)
		return x;
	for(int i = MAXL - 1; i >= 0; i--)
		if(par[i][x] != par[i][y])
			x = par[i][x], y = par[i][y];
	return par[0][x];
}

int main()
{
	ios::sync_with_stdio(false);
	cin >> n;
	v[0].PB(1);
	v[0].PB(2);
	v[0].PB(3);
	for(int i = 0; i < n; i++)
	{
		cin >> a[i];
		a[i]--;
		t[i] = in;
		v[a[i]].PB(in++);
		v[a[i]].PB(in++);
	}
	DFS(0);
	make_LCA();
	int l[2] = {1, 2}, diam = 2;
	for(int i = 0; i < n; i++)
	{
		for(int j = 0; j < 2; j++)
		{
			int x = LCA(a[i], l[j]);
			if(h[l[j]] - h[x] + h[a[i]] - h[x] + 1 > diam)
			{
				diam++;
				l[!j] = t[i];
				break;
			}
		}
		cout << diam << ' ';
	}
	cout << endl;
	return 0;
}
