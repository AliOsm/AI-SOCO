///Bismillahir Rahmanir Rahim
#include<bits/stdc++.h>
#define M 100099
using namespace std;
set<int>adj[M+2];
int sub[M+2];
char ses[M+2];
void add_edge(int x,int y)
{
    adj[x].insert(y);
    adj[y].insert(x);
}
void remove_edge(int x,int y)
{
    adj[x].erase(y);
    adj[y].erase(x);
}
void calculate_sub_tree_size(int u,int p)
{
    sub[u]=1;
    for(auto v:adj[u])
    {
        if(v==p)continue;
        calculate_sub_tree_size(v,u);
        sub[u]+=sub[v];
    }
}
int find_centroid(int u,int p,int range)
{
    for(auto v:adj[u])
    {
         if(v==p)continue;
         if(sub[v]>range)
         {
             return find_centroid(v,u,range);
         }
    }
    return u;
}
void centroid_decomposition(int x,char ch)
{
    calculate_sub_tree_size(x,0);
    int cen=find_centroid(x,0,sub[x]/2);
    ses[cen]=ch;
    vector<int>z;
    for(auto v:adj[cen])
    {
        z.push_back(v);
    }

    for(auto x:z)
    {
        remove_edge(cen,x);
        centroid_decomposition(x,ch+1);
    }
}
main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int n;
    cin>>n;
    for(int i=1;i<n;i++)
    {
        int x,y;
        cin>>x>>y;
        add_edge(x,y);
    }
    centroid_decomposition(1,'A');
    for(int i=1;i<=n;i++)
    {
        cout<<ses[i]<<" ";
    }
    cout<<endl;
    return 0;
}
