#include<bits/stdc++.h>
using namespace std;
#define ll long long
ll ara[100005], tree[100005], n;
vector<ll>vec[100005], pri;
void update(ll idx, ll val)
{
    while(idx <= n)
        tree[idx] += val, idx += (idx&-idx);
    return;
}
ll query(ll idx)
{
    ll sum = 0;
    while(idx)
        sum += tree[idx], idx -= (idx&-idx);
    return sum;
}
int main()
{
    ll i, j, k, p, q, x, y;
    cin>>n;
    for(i = 1; i <= n; i++)
    {
        scanf("%I64d", ara+i);
        vec[ara[i]].push_back(i);
    }
    p = 0;
    for(i = 1; i <= 100000; i++)
    {
        if(vec[i].size())
        {
            sort(vec[i].begin(), vec[i].end());
            k = lower_bound(vec[i].begin(), vec[i].end(), p)-vec[i].begin();
            for(j = k; j < vec[i].size(); j++)
                pri.push_back(vec[i][j]);
            for(j = 0; j < k; j++)
                pri.push_back(vec[i][j]);
            q = pri.size();
            p = pri[q-1];
        }
    }
    for(i = 1; i <= n; i++)
        update(i, 1);
    p = x = 0;
    /*for(i = 0; i < n; i++)
        printf("%d ", pri[i]);*/
    for(i = 0; i < pri.size(); i++)
    {
        if(pri[i] > p)
            x += query(pri[i])-query(p);
        else
            x += query(n)-query(p)+query(pri[i]);
        p = pri[i];
        update(pri[i], -1);
    }
    //printf("fuck\n");
    printf("%I64d\n", x);
    return 0;
}
