#include <algorithm>
#include <iostream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <numeric>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

typedef long long ll;
typedef pair < int, int > ii;

const int inf = 1e9 + 333;
const ll linf = 1e18 + 333;

const int N = 1e5 + 5;

int n, m, gr[N];
vector < int > finished, v[N], nd[N];
bool h[N], g[N];

int f(int x) {
    if(x == gr[x])
        return x;
    return gr[x] = f(gr[x]);
}

void dfs(int x) {
    
    h[x] = 1;
    
    foreach(it, v[x])
        if(!h[*it])
            dfs(*it);
    
    finished.push_back(x);
    
}

int main () {
    
    ios :: sync_with_stdio(0);
    
    cin >> n >> m;
    
    for(int i = 1; i <= n; i++)
        gr[i] = i;
    
    for(int i = 1; i <= m; i++) {
        int x, y;
        cin >> x >> y;
        gr[f(x)] = f(y);
        v[x].push_back(y);
    }
    
    for(int i = 1; i <= n; i++)
        nd[f(i)].push_back(i);
    
    int ans = n;
    
    for(int i = 1; i <= n; i++) {
        if(nd[i].empty())
            continue;
        bool w = 0;
        finished.clear();
        foreach(it, nd[i]) {
            int x = *it;
            if(!h[x])
                dfs(x);
        }
        reverse(finished.begin(), finished.end());
        foreach(it, finished) {
            int x = *it;
            bool flag = 0;
            foreach(it, v[x]) {
                int p = *it;
                if(g[p]) {
                    flag = 1;
                    break;
                }
            }
            if(flag) {
                w = 1;
                break;
            }
            g[x] = 1;
        }
        if(!w)
            ans--;
    }
    
    cout << ans << endl;
    
    return 0;
    
}
