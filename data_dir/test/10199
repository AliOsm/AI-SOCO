#include<bits/stdc++.h>
#define P(x,y) make_pair(x,y)
using namespace std;
const int MX=(1<<18);
class Block{
    public:
    int l , r , coef;
    vector < int > oper , S;
    Block(){}
    Block(int a , int b){
        l = a , r = b;
        oper.clear(); S.clear();
        oper.resize(r - l + 1);
        fill(oper.begin() , oper.end() , -2);
        coef = 0;
    }
    void relax(){
        S.clear();
        coef = 0;
        for(auto Q : oper){
            if(Q == -2) continue;
            if(Q == -1){
                if(!S.empty()) S.pop_back();
                else coef++;
            }
            else S.push_back(Q);
        }
    }
};
vector < Block > Blocks;
int n;
int main(){
    scanf("%d",&n);
    int a = 1 , b , lim = 350;
    while(1){
        b = a + lim - 1;
        b = min(b , n);
        Blocks.push_back(Block(a , b));
        if(b == n) break;
        a = b + 1;
    }
    for(int iter = 1 ; iter <= n ; iter++){
        int pos , cmd;
        scanf("%d %d",&pos,&cmd);
        if(cmd == 0) cmd = -1;
        else scanf("%d",&cmd);
        for(int j = 0 ; j < Blocks.size() ; j++){
            if(pos >= Blocks[j].l && pos <= Blocks[j].r){
                Blocks[j].oper[pos - Blocks[j].l] = cmd;
                Blocks[j].relax();
                break;
            }
        }
        int popped = 0;
        int ans = -1;
        for(int j = Blocks.size() - 1 ; j >= 0 ; j--){
            int rem = Blocks[j].S.size() , poppedfrom = Blocks[j].coef;
            if(popped < rem){
                ans = Blocks[j].S[rem - popped - 1];
                break;
            }
            else{
                popped -= rem;
                popped += poppedfrom;
            }
        }
        printf("%d\n",ans);
    }
}
