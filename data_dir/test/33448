//  Copyright Â© 2020 Diego Garcia Rodriguez del Campo. All rights reserved.
#include<bits/stdc++.h>
#define MAX 200005
#define pii pair < int , int >
#define fi first
#define INF 1e9
#define se second
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
using namespace std;
typedef long long ll;

struct node {
    int l, r, id;
};

int N;
node a[MAX];
set < pii > s;
int ans[MAX];
int tree[8*MAX];


void upd( int x , int l , int r , int q , int v )
{
    if( l > q or r < q )
        return;
    if( l == r )
    {
        tree[x] = v;
        return;
    }
    
    int mid = ( l + r ) / 2;
    upd( 2*x+1 , l , mid , q , v );
    upd( 2*x+2 , mid+1 , r , q , v );
    tree[x] = max( tree[2*x+1] , tree[2*x+2] );
}

int qry( int x , int l , int r , int lq , int rq )
{
    if( l > rq or r < lq or lq > rq )
        return -INF;
    if( l >= lq && r <= rq )
        return tree[x];
    int mid = ( l + r) / 2;
    return max( qry( 2*x+1 , l , mid , lq , rq ) , qry( 2*x+2 , mid+1 , r , lq , rq ) );
}

bool can( int x , int y ) {
    return x >= a[y].l && x <= a[y].r && y >= a[x].l && y <= a[x].r ;
}

bool cmpl( node a , node b ) {
    if( a.l != b.l )
        return a.l < b.l;
    return a.r > b.r;
}

bool cmpid( node a  , node b ) {
    return ans[a.id] < ans[b.id];
}


int main()
{
    optimiza_io
    cin >> N;
    for( int i = 1; i <= N; i ++ ) {
        cin >> a[i].l >> a[i].r;
        a[i].id = i;
    }
    
    // GREEEDY LEFT
    sort( a + 1 , a + N + 1 , cmpl );
    
    int id = 1;
    for( int l = 1; l <= N; l ++ ) {
        while( id <= N && a[id].l <= l ) {
            s.insert( { a[id].r , a[id].id } );
            id++;
        }
        auto it = s.begin();
        ans[it->se] = l;
        s.erase( *it );
    }
    
    sort( a + 1 , a + N + 1 , cmpid );
    
    for( int i = 1; i <= N; i ++ ) {
        if( qry( 0 , 1 , N , a[i].l , i - 1 ) >= i ) {
            cout << "NO\n";        
            for( int j = 1; j <= N; j ++ )
                cout << ans[j] << " \n"[j == N];  
            int x = i - 1;
            while( a[x].r < i )
                x--;
            
            swap( ans[a[i].id] , ans[a[x].id] );  
            for( int j = 1; j <= N; j ++ )
                cout << ans[j] << " \n"[j == N];  
            exit( 0 );
        }
        upd( 0 , 1 , N , i , a[i].r );
    }
    
    
    cout << "YES\n";
        for( int j = 1; j <= N; j ++ )
            cout << ans[j] << " ";  
    return 0;
}

// CHECAR LIMITES 


/*

3
1 3
2 2
1 3


*/