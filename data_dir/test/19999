
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j123 = n; (i) < j123; (i) ++)
#define rep1(i, n) for (int (i) = 1, j123 = n; (i) <= j123; (i) ++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout << #a << " :";for(int i123=(x);i123<=(y);i123++) cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int(x.size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;



string inp;
char tmp[10];
void rotate2(string& s)
{
  rep(i,4)
  {
    tmp[i] = s[i];
  }
  rep(i,4)
  {
    s[i] = tmp[(i+1)%4];
  }
}

void rotate0(string& s)
{
  swap(s[1],s[3]);
  swap(s[2],s[4]);
  swap(s[0],s[5]);

}
void rotate1(string& s)
{
  rep(i,6) tmp[i]=s[i];
  s[0]=tmp[4];
  s[4]=tmp[2];
  s[2]=tmp[5];
  s[5]=tmp[0];
}

set<ll> seen;
ll myhash(string& s)
{
  ll ret = 0;
  rep(i,sz(s))
  ret = ret * 26 + s[i]-'A';
  return ret;
}
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0);
  cin >> inp;
  sort(inp.begin(),inp.end());
  do
  {
    string cur = inp;
    int any = 0;
    rep(i,3)
    {
      if (seen.find(myhash(cur)) != seen.end())
        any = 1;
      rep(j,3)
      {
        if (seen.find(myhash(cur)) != seen.end())
          any = 1;
        rep(k,3)
        {
          rotate2(cur);
          if (seen.find(myhash(cur)) != seen.end())
            any = 1;
        }
        rotate1(cur);
      }
      rotate0(cur);
    }
    if (!any)
    {
      seen.insert(myhash(cur));
    }
  } while (next_permutation(inp.begin(),inp.end()));
  cout << sz(seen) << endl;
}
