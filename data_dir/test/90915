#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> P;
typedef pair<P,int> P1;
typedef pair<P,P> P2;
typedef pair<double,int>Q;
#define pu push
#define pb push_back
#define mp make_pair
#define eps 1e-7
#define INF 1000000000
#define mod 1000000007
#define fi first
#define sc second
#define rep(i,x) for(int i=0;i<x;i++)
#define repn(i,x) for(int i=1;i<=x;i++)
#define SORT(x) sort(x.begin(),x.end())
#define ERASE(x) x.erase(unique(x.begin(),x.end()),x.end())
#define POSL(x,v) (lower_bound(x.begin(),x.end(),v)-x.begin())
#define POSU(x,v) (upper_bound(x.begin(),x.end(),v)-x.begin())
int n,k;
int a[50005][11];

int par[50005],ran[50005],sz[50005];
void init(){
	rep(i,50005){
		par[i] = i;
		ran[i] = 0;
		sz[i] = 1;
	}
}
int find(int x){ if(x == par[x]) return x; else return par[x] = find(par[x]); }
void unite(int x,int y){
	x = find(x); y = find(y); if(x==y) return;
	if(ran[x] < ran[y]){
		par[x] = y;
		sz[y] += sz[x];
	}
	else{
		par[y] = x;
		if(ran[x] == ran[y]) ran[x]++;
		sz[x] += sz[y];
	}
}
bool same(int x,int y){ return find(x)==find(y); }
set<P>vec[11];
int main(){
	cin>>n>>k;
	rep(i,n){
		rep(j,k){
			scanf("%d",&a[i][j]);
		//	vec[j].pb(mp(a[i][j],i));
		}
	}
	init();
	set<P>root; //-a[root][0],root
	rep(i,n){
		if(root.empty()){
			root.insert(mp(-a[i][0],i));
		}
		else{
			P mx = mp(INF,INF),mn = mp(-INF,-INF);
			rep(j,k){
				set<P>::iterator it=vec[j].lower_bound(mp(a[i][j],-1));
				
				if(it != vec[j].end()){
					int w = (*it).sc;
					w = find(w);
					set<P>::iterator it = root.lower_bound(mp(-a[w][0],w));
					P x = *it;//cout<<"N"<<endl;
					//cout<<(*it).fi<<" "<<(*it).sc<<" "<<-a[w][0]<<" "<<w<<endl;
					assert(*it == mp(-a[w][0],w));
					mn = max(mn,x);
				}
				if(it != vec[j].begin()){
					it--;
					int w = (*it).sc;
					w = find(w);
					set<P>::iterator it = root.lower_bound(mp(-a[w][0],w));
					P x = *it;//cout<<"NN"<<endl;
					//cout<<(*it).fi<<" "<<(*it).sc<<"  f "<<-a[w][0]<<" "<<w<<endl;

					assert(*it == mp(-a[w][0],w));
					mx = min(mx,x);
				}
			}
			//cout<<mn.fi<<" "<<mn.sc<<" "<<mx.fi<<" "<<mx.sc<<endl;
			if(mx.fi > mn.fi){
				root.insert(mp(-a[i][0],i));
			}
			else{
				set<P>::iterator it = root.lower_bound(mx);
				assert(*it == mx);
				for(;it!=root.end();){
					unite((*it).sc,i); //cout<<(*it).sc<<" "<<i<<endl;
					if(*it == mn){
					    int j = find(i);
					    root.erase(it);
					    root.insert(mp(-a[j][0],j));
					    break;
					}
					root.erase(it++);
				}
			}
		}
		assert(root.size());
		int x = (*root.begin()).sc;
		x = find(x);
		printf("%d\n",sz[x]);
		rep(j,k){
			vec[j].insert(mp(a[i][j],i));
		}
		//for(set<P>::iterator it=root.begin();it!=root.end();it++){
		    //cout<<(*it).fi<<" "<<(*it).sc<<endl;
	//	}
		
	}
}