#include<bits/stdc++.h>
using namespace std;

inline void print(char pt) {
	printf("%c\n", pt);
}
inline void print(int pt) {
	printf("%d\n", pt);
}
inline void print(long long pt) {
	printf("%I64d\n", pt);
}
inline void print(double pt) {
	printf("%f\n", pt);
}
inline void print(char pt[]) {
	printf("%s\n", pt);
}

inline void scan(int &pt) {
	scanf("%d", &pt);
}
inline void scan(char &pt) {
	scanf("%c", &pt);
}
inline void scan(long long &pt) {
	scanf("%I64d", &pt);
}
inline void scan(double &pt) {
	scanf("%lf", &pt);
}
inline void scan(char pt[]) {
	scanf("%s", pt);
}
struct pii {
	int a;
	int b;
	friend int operator<(pii a, pii b) {
		if (a.a != b.a)
			return a.a < b.a;
		return a.b > b.b;
	}
};

struct str {
	char val[200];
	str() {
		memset(val, 0, sizeof(val));
	}
	friend int operator<(str a, str b) {
		return strcmp(a.val, b.val) < 0;
	}
};

int gcd(int x, int y) {
	return y ? gcd(y, x % y) : x;
}
int lcm(int x, int y) {
	return x * (y / gcd(x, y));
}

int bits[50];
void getbits() {
	for (int i = 0; i < 30; i++) {
		bits[i] = 1 << i;
	}
}

struct piii {
	int li;
	int ri;

	int l1;
	int l2;
	int r1;
	int r2;

	friend int operator<(piii a, piii b) {
		return a.li < b.li;
	}
};

int n, m, k;
int tmp;

char stra[100][100];
int visa[100][100];

void bfs(int i, int j, int from) {
	if (i >= n)
		return;
	if (j >= m)
		return;
	if (visa[i][j]) {
		print("Yes");
		exit(0);
	}
	visa[i][j] = 1;
	if (from != 1) {
		if (i - 1 >= 0 && stra[i - 1][j] == stra[i][j])
			bfs(i - 1, j, 2);
	}
	if (from != 2) {
		if (i + 1 < n && stra[i + 1][j] == stra[i][j])
			bfs(i + 1, j, 1);
	}
	if (from != 3) {
		if (j - 1 >= 0 && stra[i][j - 1] == stra[i][j])
			bfs(i, j - 1, 4);
	}
	if (from != 4) {
		if (j + 1 < m && stra[i][j + 1] == stra[i][j])
			bfs(i, j + 1, 3);
	}
}

int main() {
	scan(n);
	scan(m);

	for (int i = 0; i < n; i++) {
		scan(stra[i]);
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (visa[i][j]) {
				continue;
			} else {
				bfs(i, j, 0);
			}
		}
	}
	print("No");
	return 0;
}
