#include<bits/stdc++.h>
#define x first
#define y second
using namespace std;
const int N = 200005;
int n, q, T[N], MX[N * 4];
pair < int , int > A[N];
multiset < int > S[N];
vector < int > U;
void Set(int i, int val, int id = 1, int l = 0, int r = U.size())
{
    if (r - l < 2)
    {
        MX[id] = val;
        return ;
    }
    if (i < (l + r >> 1))
        Set(i, val, id + id, l, l + r >> 1);
    else
        Set(i, val, id + id + 1, l + r >> 1, r);
    MX[id] = max(MX[id + id], MX[id + id + 1]);
}
int Find(int le, int val, int id = 1, int l = 0, int r = U.size())
{
    if (r <= le || MX[id] < val)
        return ((int)U.size());
    if (r - l < 2)
        return (l);
    int i = Find(le, val, id + id, l, l + r >> 1);
    if (i != (int)U.size())
        return (i);
    return (Find(le, val, id + id + 1, l + r >> 1, r));
}
int main()
{
    scanf("%d", &q);
    for (int i = 1; i <= q; i++)
    {
        char ss[10];
        scanf("%s%d%d", &ss, &A[i].x, &A[i].y);
        if (ss[0] == 'a') T[i] = 0;
        if (ss[0] == 'r') T[i] = 1;
        if (ss[0] == 'f') T[i] = 2, A[i].x ++, A[i].y ++;
        U.push_back(A[i].x);
    }
    sort(U.begin(), U.end());
    U.resize(unique(U.begin(), U.end()) - U.begin());
    for (int i = 1; i <= q; i++)
        A[i].x = (int)(lower_bound(U.begin(), U.end(), A[i].x) - U.begin());
    for (int i = 0; i < U.size(); i++)
        S[i].insert(-1), Set(i, -1);
    for (int i = 1; i <= q; i++)
    {
        if (T[i] == 0)
            S[A[i].x].insert(A[i].y), Set(A[i].x, *S[A[i].x].rbegin());
        else if (T[i] == 1)
            S[A[i].x].erase(S[A[i].x].lower_bound(A[i].y)), Set(A[i].x, *S[A[i].x].rbegin());
        else
        {
            int id = Find(A[i].x, A[i].y);
            if (id == (int)U.size())
                printf("-1\n");
            else
                printf("%d %d\n", U[id], *S[id].lower_bound(A[i].y));
        }
    }
    return (0);
}