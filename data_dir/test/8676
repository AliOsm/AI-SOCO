#include<bits/stdc++.h> 

#define ssync ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define F first
#define S second
#define mp make_pair
#define pb push_back

using namespace std;

typedef long long int ll;
typedef unsigned long long int ull;
typedef long double ld;

const ll MOD = 1e9+7;
const ld PI = 3.14159265;

ll powerWithMod(ll base, ll exponent, ll modulus = LLONG_MAX)
{
    ll result = 1;
    base %= modulus;
    while(exponent > 0)
    {
        if(exponent % 2 == 1)
            result = (result * base) % modulus;
        exponent >>= 1;
        base = (base * base) % modulus;
    }
    return result;
}

ll modInverse(ll a, ll m = MOD)
{
    return powerWithMod(a, m-2, m);
}

template<typename T>
void term(T x)
{
    cout << x << "\n";
    exit(0);
}

const ll FLAG = numeric_limits<ll>::max();
ll t,n,a,b;
string s;

int main()
{
    ssync;
    cin>>t;
    while(t--)
    {
        cin >> n >> a >> b >> s;
        vector<vector<ll>> dp(s.size() + 1, vector<ll>(2));
        s += '0';
        dp[0][0] = b;
        dp[0][1] = FLAG;
        for(int i = 1; i < (int)s.size(); i++)
        {
            if(s[i] == '1' or s[i-1] == '1')
                dp[i][0] = FLAG;
            else
            {
                ll ans = FLAG;
                if(dp[i-1][0] != FLAG)
                    ans = min(ans, dp[i-1][0] + a + b);
                if(dp[i-1][1] != FLAG)
                    ans = min(ans, dp[i-1][1] + 2 * a + b);
                dp[i][0] = ans;
            }

            if(i+1 == (int)s.size())
                dp[i][1] = FLAG;
            else
            {
                ll ans = FLAG;
                if(dp[i-1][0] != FLAG)
                    ans = min(ans, dp[i-1][0] + 2 * a + 2 * b);
                if(dp[i-1][1] != FLAG)
                    ans = min(ans, dp[i-1][1] + a + 2 * b);
                dp[i][1] = ans;
            }
        }
        cout << dp.back()[0] << "\n";
    }
    return 0;
}
