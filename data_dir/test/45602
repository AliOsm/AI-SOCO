//Author : Sukarna Paul

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/trie_policy.hpp>
#include<ext/pb_ds/detail/standard_policies.hpp>
#define pi acos(-1)
#define pb push_back
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define ll long long
#define MAX 300005
#define INF 0x3f3f3f3f
template <class T> inline T bigmod(T p,T e,T M){ll ret = 1LL;for(; e > 0LL; e >>= 1LL){if(e & 1LL) ret = (ret * p) % M;p = (p * p) % M;}return (T)ret;}
template <class T> inline T modinverse(T a,T M){return bigmod(a,M-2,M);}   // M is prime}

using namespace std;
using namespace __gnu_pbds;

typedef trie<string,null_type,trie_string_access_traits<>,pat_trie_tag,trie_prefix_search_node_update>pref_trie;
typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
typedef tree<pair<int, int>,null_type,less<pair<int, int>>,rb_tree_tag,tree_order_statistics_node_update> ordered_multiset;




int main(){
    IOS
    //freopen("output.txt","w",stdout);
    int n;
    cin>>n;

    string s;
    cin>>s;
    if(s.length()&1){
        cout<<-1<<"\n";
    }
    else{
        int ts[n],te[n];
        memset(ts,0,sizeof ts);
        memset(te,0,sizeof te);
        for(int i=0;i<n;i++){
            if(i==0){
                if(s[i]=='(')ts[i]++;
                if(s[i]==')')te[i]++;
                continue;
            }
            if(s[i]=='('){
                ts[i]=ts[i-1]+1;
                te[i]=te[i-1];
            }
            if(s[i]==')'){
                te[i]=te[i-1]+1;
                ts[i]=ts[i-1];
            }
        }
        if(ts[n-1]!=te[n-1]){
            cout<<-1<<"\n";


            return 0;
        }
        bool bl=false;
        int ans=0;
        int st=0;
        for(int i=0;i<n;i++){
            if(bl==true && ts[i]==te[i]){
                bl=false;

                ans+=(i-st)+1;
                st=i;
            }
            if(ts[i]<te[i]){
                bl=true;
            }
            if(bl==false)st++;
        }
        cout<<ans<<"\n";

    }
}
