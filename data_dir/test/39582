
#include <bits/stdc++.h>

//#include "rubo.h"
//#define mp make_pair
#define pb push_back
#define ll long long
#define vc vector
//#define in ll
#define SQ(x) (x)*(x)
#define F first
#define S second
//#define ld long double
#define dbl  double
#define pll pair<ll,ll>
#define pii pair<int,int>
#define pdd pair<dbl,dbl>
#define all(x) x.begin(), x.end()
#define loop(xxx, yyy) for(int xxx = 0; xxx < yyy; xxx++)
//#define printf(fmt, ...) (0)
//#define HOME
#define y0 ngacaleiebinvoaeu
#define y1 gnarpipipaigare
#define j1 adsfndnasfafoasp


using namespace std;


const dbl PI = atan(1.0) * 4;
const int N = 1000 * 1000 * 1000 + 123;


vc<int> multiply_vat(vc<int> a, vc<int> b) {
    int n = max(a.size(),b.size());

    vc<int> c(2 * n, 0);
    for (int i = 0; i < a.size(); i++) {
        for (int j = 0; j < b.size(); j++) {
            c[i + j] += a[i] * b[j];
        }
    }

    while(!c.empty() && c.back() == 0){
        c.pop_back();
    }
    return c;
}

typedef complex<double> base;

//void fft (vector<base> & a, bool invert) {
//    int n = (int) a.size();
//    if (n == 1)  return;
//
//    vector<base> a0 (n/2),  a1 (n/2);
//    for (int i=0, j=0; i<n; i+=2, ++j) {
//        a0[j] = a[i];
//        a1[j] = a[i+1];
//    }
//    fft (a0, invert);
//    fft (a1, invert);
//
//    double ang = 2*PI/n * (invert ? -1 : 1);
//    base w (1,0),  wn (cos(ang), sin(ang));
//    for (int i=0; i<n/2; ++i) {
//        a[i] = a0[i] + w * a1[i];
//        a[i+n/2] = a0[i] - w * a1[i];
//        if (invert)
//            a[i] /= 2,  a[i+n/2] /= 2;
//        w *= wn;
//    }
//}
int rev (int num, int lg_n) {
    int res = 0;
    for (int i=0; i<lg_n; ++i)
        if (num & (1<<i))
            res |= 1<<(lg_n-1-i);
    return res;
}
void fft (vector<base> & a, bool invert) {
    int n = (int) a.size();
    int lg_n = 0;
    while ((1 << lg_n) < n)  ++lg_n;

    for (int i=0; i<n; ++i)
        if (i < rev(i,lg_n))
            swap (a[i], a[rev(i,lg_n)]);

    for (int len=2; len<=n; len<<=1) {
        double ang = 2*3.14159265358979323846/len * (invert ? -1 : 1);
        base wlen (cos(ang), sin(ang));
        for (int i=0; i<n; i+=len) {
            base w (1);
            for (int j=0; j<len/2; ++j) {
                base u = a[i+j],  v = a[i+j+len/2] * w;
                a[i+j] = u + v;
                a[i+j+len/2] = u - v;
                w *= wlen;
            }
        }
    }
    if (invert)
        for (int i=0; i<n; ++i)
            a[i] /= n;
}

vc<int> multiply_lav (const vector<int> & a, const vector<int> & b,vector<int> & res) {
    vector<base> fa (a.begin(), a.end()),  fb (b.begin(), b.end());
    size_t n = 1;
    while (n < max (a.size(), b.size()))  n <<= 1;
    n <<= 1;
    fa.resize (n),  fb.resize (n);

    fft (fa, false),  fft (fb, false);
    for (size_t i=0; i<n; ++i)
        fa[i] *= fb[i];
    fft (fa, true);

    res.resize (n);
    for (size_t i=0; i<n; ++i)
        res[i] = int (fa[i].real() + 0.5);
    return res;
}


//vc<int> bin_exp(vc<int> a, int exp) {
//    if (exp == 1) return a;
//
//    vc<int> H;
//    bin_exp(a, exp / 2, H);
//
//    if (exp % 2 == 0) return multiply_lav(H, H, H);
//
//    return multiply_lav(a, multiply_lav(H, H));
//}

int main(){
    int n,k;
    cin>>n>>k;
    vector<int>a(n);
    vector<int>p(1001,0);
    for(int i=0;i<n;i++){
        cin>>a[i];
        p[a[i]]=1;
    }
    vector<int>res;res.push_back(1);
    for(;k;k>>=1){
        if(k&1){
            multiply_lav(res,p,res);
            for(int i=0;i<res.size();i++)if(res[i])res[i]=1;
        }
        multiply_lav(p,p,p);
        for(int i=0;i<p.size();i++)if(p[i])p[i]=1;
    }
    for(int i=0;i<res.size();i++){
        if(res[i]>0)cout<<i<<' ';
    }
    cout<<endl;
    return 0;
}


/*

2
1 1
3 4

 8
 3 4 1 2 1 5 11 9
 7 4 3 8 2 10 6 6
 */
