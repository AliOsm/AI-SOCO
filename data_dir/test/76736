/* ****GT_18**** */
//Motivational Source->FUHPD

#include<bits/stdc++.h>
#define	MIN(a,b,c)	min(min(a,b),c)
#define	MAX(a,b,c)	max(max(a,b),c)
#define ll          long long
#define itr         vector<ll int>::iterator
#define pb          push_back
#define mp          make_pair
#define pii         pair<ll int,ll int>
#define vi          vector<ll int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define endl        '\n'
#define rep(i,a,b)	for(ll int i=a;i<b;i++)
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
using namespace std;
ll n;
ll mn[300005][20],gcd[300005][20];
ll a[300005];
void build_gcd()
{
	rep(i,0,n)
	gcd[i][0]=a[i];
	rep(j,1,20)
	rep(i,0,n-(1<<j)+1)
	gcd[i][j]=__gcd(gcd[i][j-1],gcd[i+(1<<(j-1))][j-1]);
}
ll query_gcd(ll l,ll r)
{
	ll ans=0;
	for(int j=20;j>=0;j--)
	if(l+(1<<j)-1<=r)
	{
		ans=__gcd(ans,gcd[l][j]);
		l+=(1<<j);
	}
	return ans;
}
void build_mn()
{
	rep(i,0,n)
	mn[i][0]=a[i];
	rep(j,1,20)
	rep(i,0,n-(1<<j)+1)
	mn[i][j]=min(mn[i][j-1],mn[i+(1<<(j-1))][j-1]);
}
ll query_mn(ll l,ll r)
{
	ll ans=hell;
	for(int j=20;j>=0;j--)
	if(l+(1<<j)-1<=r)
	{
		ans=min(ans,mn[l][j]);
		l+=(1<<j);
	}
	return ans;
}
ll check(ll k)
{
	rep(i,0,n-k+1)
	{
		if(query_gcd(i,i+k-1)==query_mn(i,i+k-1))
		return 1;
	}
	return 0;
}
void print(ll ans)
{
	vi l;
	rep(i,0,n-ans+1)
	{
		if(query_gcd(i,i+ans-1)==query_mn(i,i+ans-1))
		l.pb(i+1);		
	}
	cout<<sz(l)<<" "<<ans-1<<endl;
	rep(i,0,sz(l))cout<<l[i]<<" ";
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{
		cin>>n;
		rep(i,0,n)
		cin>>a[i];
		build_gcd();
		build_mn();
//		cout<<query_mn(0,3);
		ll lo=1,hi=n,mid=(lo+hi)/2;
		while(hi-lo>1)
		{
			if(check(mid))lo=mid;
			else hi=mid;
			mid=(hi+lo)/2;
		}
		if(check(mid+1))
		print(mid+1);
		else print(mid);
	}
	return 0;
}
