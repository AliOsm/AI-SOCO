//Be Name Khoda
//no comment...
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)2e3 + 7;
const int infint = (int)1e9;
const ll inf = (ll)1e18;
int part[MAXN], dp[MAXN][MAXN], ans[MAXN][MAXN];
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	memset(part, -1, sizeof part);
	string s, t;
	cin >> s >> t;
	for (int i = 0; i < s.size(); i++)
	{
		int cur = 0;
		for (int j = i; j < s.size(); j++)
		{
			if(s[j] == t[cur])
				cur++;
			if(cur == t.size())
			{
				part[i] = j;
				break;
			}
		}
	}
	for (int i = 0; i < s.size(); i++)
		for (int j = 0; j <= s.size(); j++)
			dp[i][j] = -1, ans[i][j] = -1;
	//base
	for (int j = 0; j <= s.size(); j++)
	{
		if(j == 0)
		{
			if(t.size() == 1 && t[0] == s[s.size() - 1])
				dp[s.size() - 1][j] = 1, ans[s.size() - 1][j] = 1;
			else
				dp[s.size() - 1][j] = 0, ans[s.size() - 1][j] = 0;
		}
		else
		if(j == 1)
		{
			dp[s.size() - 1][j] = 0, ans[s.size() - 1][j] = 0;
		}
	}
	for (int i = s.size() - 2; i >= 0; i--)
		for (int j = 0; j <= s.size(); j++)
		{
			//let's calc dp[i][j]
			dp[i][j] = dp[i + 1][j];
			if(j != 0)
				dp[i][j] = max(dp[i][j], dp[i + 1][j - 1]);
			if(part[i] == -1)
			{
				ans[i][j] = dp[i][j];
				if(j != 0)
					ans[i][j] = max(ans[i][j], ans[i + 1][j - 1]);
				continue;
			}
			int len = part[i] - i + 1 - t.size();
			if(len > j)
			{
				ans[i][j] = dp[i][j];
				if(j != 0)
					ans[i][j] = max(ans[i][j], ans[i + 1][j - 1]);
				continue;
			}
			if(part[i] == s.size() - 1 && len == j)
				dp[i][j] = max(dp[i][j], 1);
			if(part[i] == s.size() - 1)
			{
				ans[i][j] = dp[i][j];
				if(j != 0)
					ans[i][j] = max(ans[i][j], ans[i + 1][j - 1]);
				continue;
			}	
			//dp[part[i] + 1][j - len], dp[part[i] + 2][j - len - 1], ...
			if(ans[part[i] + 1][j - len] != -1)
				dp[i][j] = max(dp[i][j], ans[part[i] + 1][j - len] + 1);
			ans[i][j] = dp[i][j];
			if(j != 0)
				ans[i][j] = max(ans[i][j], ans[i + 1][j - 1]);
		}
	for (int i = 0; i <= s.size(); i++)
		cout << dp[0][i] << " ";
}
