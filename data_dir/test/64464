



#include <bits/stdc++.h>//coded by Nurstan ^_^

#define ll long long
#define pb push_back

#define mp make_pair
#define lb lower_bound
#define ub upper_bound

#define all(x) x.begin(), x.end()
#define F first
#define S second

using namespace std;

inline void boost(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
}
string a;
int n;
int X, Y;                                                                          
int b[int(2e5) + 1][4];
bool can (int l, int r) {
	int x = 0, y = 0;
	// U D L R
	int sum = 0;
	int U = 0, D = 0, L = 0, R = 0;
	if(l != 0) {
		U = b[l - 1][0];
		D = b[l - 1][1];
		L = b[l - 1][2];
		R = b[l - 1][3];
	}
	if (r != n - 1) {
		U += b[n - 1][0] - b[r][0];
		D += b[n - 1][1] - b[r][1];
		L += b[n - 1][2] - b[r][2];
		R += b[n - 1][3] - b[r][3];
	}
	if (U > D) {
		y = U - D;
	}
	else {
		y = (D - U) * -1;
	}
	if (R > L) {
		x = R - L;
	}
	else {
		x = (L - R) * -1;	
	}
	sum = abs(X - x) + abs(Y - y);
	if (sum <= (r - l + 1) && (r - l + 1 - sum) % 2 == 0) {
		return true;
	}
	else {
		return false;
	} 
}
void solve () {
	boost();
	cin >> n;
	cin >> a;
	cin >> X >> Y;
	int o = 0, oo = 0;
	  if (a[0] == 'U') {
			b[0][0] = 1;
			b[0][1] = 0;
			b[0][2] = 0;
			b[0][3] = 0;
			o ++;
		}
		if (a[0] == 'D') {
			b[0][0] = 0;
			b[0][1] = 1;
			b[0][2] = 0;
			b[0][3] = 0;
			o --;
		}
		if (a[0] == 'L') {
			b[0][0] = 0;
			b[0][1] = 0;
			b[0][2] = 1;
			b[0][3] = 0;
			oo --;
		}
		if (a[0] == 'R') {
			b[0][0] = 0;
			b[0][1] = 0;
			b[0][2] = 0;
			b[0][3] = 1;
			oo ++;
		}

	for (int i = 1; i < n; i ++) {
		if (a[i] == 'U') {
			b[i][0] = b[i - 1][0] + 1;
			b[i][1] = b[i - 1][1];
			b[i][2] = b[i - 1][2];
			b[i][3] = b[i - 1][3];
			o ++;
		}
		if (a[i] == 'D') {
			b[i][0] = b[i - 1][0];
			b[i][1] = b[i - 1][1] + 1;
			b[i][2] = b[i - 1][2];
			b[i][3] = b[i - 1][3];
			o --;
		}
		if (a[i] == 'L') {
			b[i][0] = b[i - 1][0];
			b[i][1] = b[i - 1][1];
			b[i][2] = b[i - 1][2] + 1;
			b[i][3] = b[i - 1][3];
			oo --;
		}
		if (a[i] == 'R') {
			b[i][0] = b[i - 1][0];
			b[i][1] = b[i - 1][1];
			b[i][2] = b[i - 1][2];
			b[i][3] = b[i - 1][3] + 1;
			oo ++;
		}
	}                             
	if (o == Y && oo == X)	{
		cout << 0;
		return;
	}
	// U D L R
	int l = 1, r = n;
	int ans = -1;
	while (l <= r) {                  
		int mid = (l + r) / 2;
		bool t = 0;
		for (int i = 0; i <= n - mid; i ++) {
			  if (can(i, i + mid - 1) == 1) {
			  	 t = 1;
				 break;
			  }
		}
		if (t == 1) {
			ans = mid;
			r = mid - 1;
		}
		else {
			 l = mid + 1;
		}
	}
	cout << ans;	
}             	                  

int main(){
	boost();
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	int tt = 1;
//	cin >> tt;
	while (tt != 0) {
		solve();
		tt --;
	}                  
	exit(0);
}