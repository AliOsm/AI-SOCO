#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define x first
#define y second
#define ndl '\n'
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define bit __builtin_popcount
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()

using namespace std;
using namespace __gnu_pbds;

template<typename T> using indexed_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef pair<int, ll> pil;
typedef pair<ll, int> pli;
typedef pair<int, ull> piu;
typedef vector<vector<int>> matrix;

const ll INF = 1e18 + 123;
const ld EPS = 1e-9;
const int inf = 1e9 + 123;
const int MOD = 1e9 + 7;
const int N = 5e5 + 13;
const int M = 1e6 + 123;
const double pi = acos(-1.0);
const int dx[] = {0, 0, 1, -1};
const int dy[] = {1, -1, 0, 0};

ll p[N];


int main(){
    #ifdef KAZAKH
        freopen("input.txt", "r", stdin);
    #endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t;
    cin >> t;
    while (t--){
        ll a, m;
        cin >> a >> m;
        ll g = __gcd(a, m);
        a /= g;
        m /= g;
        int n = 0;
        ll x = m;
        for (int i = 2; 1ll*i*i <= x; i++){
            if (x%i == 0){
                p[n++] = i;
                while (x % i == 0){
                    x /= i;
                }
                //cout << i << endl;
            }
        }
        if (x > 1){
            p[n++] = x;
        }
        ll ans = m;
        for (int mask = 1; mask < (1 << n); mask++){
            int cnt = 0;
            ll d = 1;
            for (int i = 0; i < n; i++){
                if (mask & (1 << i)){
                    cnt++;
                    d *= p[i];
                }
            }
            x = d - a % d;
            if (x == d) x = 0;
            ll cur = (m - x) / d + 1;

            if (cnt&1) ans -= cur;
            else ans += cur;
        }
        cout << ans << endl;
    }
    return 0;
}
