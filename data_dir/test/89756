#include<bits/stdc++.h>
#define fr first
#define sc second
#define pb push_back
#define maxheap priority_queue<int>
#define minheap priority_queue<int,vector<int>,greater<int> >

 
const int INF = 1e9+7;
const int MAXN = 2e5 + 20;
const  long double eps = 1e-9;
const long long inf = 1e13;
const long double pi = acos(-1.0);
using namespace std;

int n;
vector < int > g;
long long cost(int ind){
	long long sum = 0;
	for (int i=0; i<g.size(); i+=ind){
		int mid = g[ (2 * i + ind - 1 ) /2];
		for (int j=i; j < i + ind; j++)	 
			sum+=abs(g[j] - mid);
	}
	return sum;
}
void solve(){
	cin>>n;
	for (int i=0; i<n; i++){
		int x;
		cin>>x;
		if (x == 1){
			g.pb(i);
		}
	}
	if (g.size() == 1){
		cout<<-1<<endl;
		return;
	}
	n = g.size();
	long long ans = 1e18;
	for (int div = 2; 1LL * div * div <=n; div++){
		if (n % div !=0) continue;
		ans = min(ans , cost(div));
		while (n % div ==0) n /=div;
	}	
	if (n > 1){
		ans = min(ans , cost(n));
	}
	cout<<ans<<endl;
	
}

 
 
int main() {
ios::sync_with_stdio(NULL), cin.tie(0), cout.tie(0);
cout.setf(ios::fixed), cout.precision(20);
 //freopen("perm.in", "r", stdin);
 //freopen("perm.out", "w", stdout);
 int step;
    step = 1;
    while (step > 0){
        step--;
        solve();
    }
 
return 0;
}