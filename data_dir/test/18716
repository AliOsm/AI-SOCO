#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define int long long
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

int mm[200005];
int seg[800005];
int a[200005];
void build(int ver,int tl,int tr)
{
    if(tl>tr)
        return;
    else if(tl==tr)
        seg[ver]=1;
    else
    {
        int tm=(tl+tr)/2;
        build(2*ver,tl,tm);
        build(2*ver+1,tm+1,tr);
        seg[ver]=seg[2*ver]+seg[2*ver+1];
    }    
}

void upd(int ver,int tl,int tr,int pos)
{
    if(tl>tr)
        return ;
    else if(tl==tr)
        seg[ver]=0;
    else
    {
        int tm=(tl+tr)/2;
        if(tm>=pos)
            upd(2*ver,tl,tm,pos);
        else 
            upd(2*ver+1,tm+1,tr,pos);
        seg[ver]=seg[2*ver]+seg[2*ver+1];
    }    
}

int get(int ver,int tl,int tr,int x)
{
    if(tl>tr||tl>=x)
        return 0;
    else if(tr<x)
        return seg[ver];
    else
    {
        int tm=(tl+tr)/2;
        return get(2*ver,tl,tm,x)+get(2*ver+1,tm+1,tr,x);
    }
}

signed main()
{
     ios_base::sync_with_stdio(false);
     cin.tie(NULL);  
   
 #ifndef ONLINE_JUDGE
    if(fopen("INPUT.txt","r"))
    {
    freopen ("INPUT.txt" , "r" , stdin);
    freopen ("OUTPUT.txt" , "w" , stdout);
    }
 #endif

// -------------------------------------Code starts here---------------------------------------------------------------------     
    
    int n;
    cin>>n;
    build(1,1,n);
    for(int i=1;i<=n;i++)
    {
        cin>>a[i];
        a[i]++;
        int num=get(1,1,n,a[i]);
        mm[n-i]+=num;
        upd(1,1,n,a[i]);
    }
    build(1,1,n);
    for(int i=1;i<=n;i++)
    {
        cin>>a[i];
        a[i]++;
        int num=get(1,1,n,a[i]);
        mm[n-i]+=num;
        upd(1,1,n,a[i]);
    }

    for(int i=1;i<=n-1;i++)
    {
        mm[i+1]+=mm[i]/(i+1);
        mm[i]%=(i+1);
    }
    ordered_set<int>s;
    for(int i=1;i<=n;i++)
        s.insert(i);
    for(int i=n-1;i>=0;i--)
    {
        int num=*s.find_by_order(mm[i]);
        s.erase(num);
        a[i]=num-1;   
    }
    for(int i=n-1;i>=0;i--)
        cout<<a[i]<<" ";

// -------------------------------------Code ends here------------------------------------------------------------------
     clock_t clk;
 	clk = clock();
 
    clk = clock() - clk;
 	cerr << fixed << setprecision(6) << "Time: " << ((double)clk)/CLOCKS_PER_SEC << "\n";
 	return 0;
 }
