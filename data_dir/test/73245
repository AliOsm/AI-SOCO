#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef pair<ll, ll> pii;
typedef vector<pii> vii;
typedef vector<bool> vb;
typedef vector<string> vs;
const int di[] = { -1, 0, 1, 0, -1, 1, 1, -1 };
const int dj[] = { 0, 1, 0, -1, -1, 1, -1, 1 };
const ll MOD = 1e9;
const ll INF = 1e9;
const long double EPS = 1e-7;
#define all(x) x.begin(),x.end()

class Graph
{
	int V;    // No. of vertices
	list<int> *adj;    // An array of adjacency lists

					   // Fills Stack with vertices (in increasing order of finishing
					   // times). The top element of stack has the maximum finishing 
					   // time
	void fillOrder(int v, bool visited[], stack<int> &Stack);

	// A recursive function to print DFS starting from v
	void DFSUtil(int v, bool visited[], vi& ret);
public:
	Graph(int V);
	void addEdge(int v, int w);

	// The main function that finds and prints strongly connected
	// components
	vvi printSCCs();

	// Function that returns reverse (or transpose) of this graph
	Graph getTranspose();
};

Graph::Graph(int V)
{
	this->V = V;
	adj = new list<int>[V];
}

// A recursive function to print DFS starting from v
void Graph::DFSUtil(int v, bool visited[], vi& ret)
{
	// Mark the current node as visited and print it
	visited[v] = true;
	//cout << v << " ";
	ret.push_back(v);

	// Recur for all the vertices adjacent to this vertex
	list<int>::iterator i;
	for (i = adj[v].begin(); i != adj[v].end(); ++i)
		if (!visited[*i])
			DFSUtil(*i, visited, ret);
}

Graph Graph::getTranspose()
{
	Graph g(V);
	for (int v = 0; v < V; v++)
	{
		// Recur for all the vertices adjacent to this vertex
		list<int>::iterator i;
		for (i = adj[v].begin(); i != adj[v].end(); ++i)
		{
			g.adj[*i].push_back(v);
		}
	}
	return g;
}

void Graph::addEdge(int v, int w)
{
	adj[v].push_back(w); // Add w to v’s list.
}

void Graph::fillOrder(int v, bool visited[], stack<int> &Stack)
{
	// Mark the current node as visited and print it
	visited[v] = true;

	// Recur for all the vertices adjacent to this vertex
	list<int>::iterator i;
	for (i = adj[v].begin(); i != adj[v].end(); ++i)
		if (!visited[*i])
			fillOrder(*i, visited, Stack);

	// All vertices reachable from v are processed by now, push v 
	Stack.push(v);
}

// The main function that finds and prints all strongly connected 
// components
vvi Graph::printSCCs()
{
	stack<int> Stack;

	// Mark all the vertices as not visited (For first DFS)
	bool *visited = new bool[V];
	for (int i = 0; i < V; i++)
		visited[i] = false;

	// Fill vertices in stack according to their finishing times
	for (int i = 0; i < V; i++)
		if (visited[i] == false)
			fillOrder(i, visited, Stack);

	// Create a reversed graph
	Graph gr = getTranspose();

	// Mark all the vertices as not visited (For second DFS)
	for (int i = 0; i < V; i++)
		visited[i] = false;

	vvi ret;
	// Now process all vertices in order defined by Stack
	while (Stack.empty() == false)
	{
		// Pop a vertex from stack
		int v = Stack.top();
		Stack.pop();

		// Print Strongly connected component of the popped vertex
		if (visited[v] == false)
		{
			ret.push_back({});
			gr.DFSUtil(v, visited, ret.back());
			//cout << endl;
		}
	}
	return ret;
}

int n, m;
string chr;
vvi adj;

vvi mem(300005, vi(30, -1));
int solve(int idx, int cc) {
	int& ret = mem[idx][cc];
	if (~ret) return ret;
	ret = 0;

	for (int i = 0; i < adj[idx].size(); i++) {
		ret = max(ret, solve(adj[idx][i], cc));
	}

	ret += ((chr[idx] - 'a') == cc);
	return ret;
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n >> m >> chr;
	adj.assign(n, vi());
	Graph g(n);
	
	bool w = false;
	for (int i = 0; i < m; i++) {
		int u, v; cin >> u >> v;
		u--, v--;
		adj[u].push_back(v);
		g.addEdge(u, v);
		if (u == v) w = true;
	}

	if (w) {
		cout << -1 << endl;
		return 0;
	}

	vvi scc = g.printSCCs();
	for (auto& i : scc)
		if (i.size() > 1) {
			cout << -1 << endl;
			return 0;
		}

	int r = 0;
	for (int i = 0; i < 26; i++) {
		for (int j = 0; j < n; j++) {
			r = max(r, solve(j, i));
		}
	}
	cout << r << endl;
	cin.ignore(), cin.get();
}
