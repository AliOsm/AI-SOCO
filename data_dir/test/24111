#include<bits/stdc++.h>
#define ll long long
#define f first
#define s second
#define pb push_back
using namespace std;
ll n,a[3000000],t[3000000],ans[3000000],das[3000000],bol[3000000],pre[3000000],suf[3000000];
ll pown = 1,m;
ll get(ll x){
    ll ret = 0;
    x = pown + x - 1;
    while(x){
        ret += t[x];
        x >>= 1;
    }
    return ret;
}
void updget(ll x,ll L,ll R,ll l,ll r,ll ad){
    if(L > r || R < l)return;
    if(L >= l && R <= r){
        t[x] += ad;
        return;
    }
    t[2 * x] += t[x];
    t[2 * x + 1] += t[x];
    t[x] = 0;
    updget(2 * x , L , (L + R) / 2 , l , r , ad);
    updget(2 * x + 1 , (L + R) / 2 + 1 , R , l , r , ad);
}
void upd(ll x,ll L,ll R,ll ind,ll ad){
    if(L == R){
        ans[x] = 0;
        pre[x] = 0;
        suf[x] = 0;
        bol[x] = 0;
        das[x] = 0;
        if(!ad)
            return;
        ans[x] = 1;
        if(ad == 1){
            suf[x] = 1;
            pre[x] = 1;
            das[x] = 1;
        }
        else {
            pre[x] = 1;
            suf[x] = 1;
            bol[x] = 1;
        }
        return;
    }
    ll mid = (L + R) / 2;
    if(ind <= mid)
        upd(2 * x , L , mid , ind , ad);
    else
        upd(2 * x + 1 , mid + 1 , R , ind , ad);
    ans[x] = max(ans[2 * x] , ans[2 * x + 1]);
    ans[x] = max(ans[x] , bol[2 * x] + pre[2 * x + 1]);
    ans[x] = max(ans[x] , suf[2 * x]  + das[2 * x + 1]);
    pre[x] = pre[2 * x];
    suf[x] = suf[2 * x + 1];
    if(bol[2 * x] == mid - L + 1)pre[x] += pre[2 * x + 1];
    else if(pre[2 * x] == mid - L + 1)pre[x] += das[2 * x + 1];
    if(das[2 * x + 1] == mid - L + 1)suf[x] += suf[2 * x];
    else if(suf[2 * x + 1] == mid - L + 1)suf[x] += bol[2 * x];
    das[x] = das[2 * x];
    if(das[x] == mid - L + 1)das[x] += das[2 * x + 1];
    bol[x] = bol[2 * x + 1];
    if(bol[x] == mid - L + 1)bol[x] += bol[2 * x];
}
int main(){
    ios::sync_with_stdio(false);
    cin >> n;
    while(pown <= n)pown *= 2;
    for(int i=1; i<=n; i++){
        cin >> a[i];
        t[pown + i - 1] = a[i];
        if(i > 1){
            if(a[i] > a[i - 1])upd(1 , 1 , pown , i , -1);
            if(a[i] < a[i - 1])upd(1 , 1 , pown , i , 1);
        }
    }
    
    cin >> m;
    
    while(m--){
        ll l,r,k;
        cin >> l >> r >> k;
        updget(1 , 1 , pown , l , r , k);
        if(l > 1){
            ll a1 = get(l - 1);
            ll a2 = get(l);
            if(a2 > a1)upd(1 , 1 , pown , l , -1);
            if(a2 < a1)upd(1 , 1 , pown , l , 1);
            if(a1 == a2)upd(1 , 1 , pown , l , 0);
        }
        if(r < n){
            ll a1 = get(r);
            ll a2 = get(r + 1);
            if(a2 > a1)upd(1 , 1 , pown , r + 1 , -1);
            if(a2 < a1)upd(1 , 1 , pown , r + 1 , 1);
            if(a1 == a2)upd(1 , 1 , pown , r + 1 , 0);
        }
        cout << ans[1] + 1 << '\n';
    }
    
    
    
    
    return 0;
}
