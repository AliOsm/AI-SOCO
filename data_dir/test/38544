#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef pair<ll,ll> ii;
typedef vector<ll> vi;
typedef vector< ii > vii;

#define INF 0x3F3F3F3F
#define LINF 0x3F3F3F3F3F3F3F3FLL
#define pb push_back
#define mp make_pair
#define pq priority_queue
#define LSONE(s) ((s)&(-s)) //LASTBIT
#define DEG_to_RAD(X)   (X * PI / 180)
#define F first
#define S second
#define PI 2*acos(0)

#ifdef ONLINE_JUDGE
#define debug(args...)
#else
#define debug(args...) fprintf(stderr,args)
#endif

//////////////////////
int dx[] = {1,-1,0,0};
int dy[] = {0,0,-1,1};
//////////////////////

template <typename T>
class FenwickTree {
private:
  int n;
  vector< T > b;
public:
  FenwickTree(int _n) {
    n = _n;
    b.resize(n + 1);
  }
  void update(int x, T v) {
    while(x <= n) {
      b[x] += v;
      x += (x & (-x));
    }
  }
  T query(int x) {
    T r = 0;
    while(x) {
      r += b[x];
      x -= (x & (-x));
    }
    return r;
  }
};

const int N = (int)1e5 + 10;

inline int lstBit(int x) {
  if(x == 0) return 0;
  return 32 - __builtin_clz(x);
}

int main() {
  int n, q;
  scanf("%d %d", &n, &q);
  vector< ll > v(n + 1);
  multiset< int > idx[32];
  FenwickTree< ll > ft(n + 1);
  for(int i = 1; i <= n; ++i) {
    scanf("%lld", &v[i]);
    ft.update(i, v[i]);
    idx[lstBit(v[i])].insert(i);
  }
  while(q--) {
    int p, x; scanf("%d %d", &p, &x);
    ft.update(p, -v[p]);
    idx[lstBit(v[p])].erase(p);
    v[p] = x;
    ft.update(p, v[p]);
    idx[lstBit(v[p])].insert(p);
    int s = -1;
    for(int i = 0; i < 32 && s == -1; ++i) {
      int qtd = 0;
      for(int x : idx[i]) {
        if(ft.query(x) == v[x] * 2LL) {
          s = x;
          break;
        }
        qtd++;
        if(qtd >= 2) break;
      }
    }
    printf("%d\n", s);
  }
  return 0;
}