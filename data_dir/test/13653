#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()
#define boost() ios_base :: sync_with_stdio(0); cin.tie(); cout.tie(); cout << fixed; cout << setprecision(15); srand(time(NULL))
#define endl '\n'
typedef long long ll;
const int _N = 1e5 + 11;
const ll INF = 1e18;
const ll MOD = 1e9 + 7;
const int BLOCKS = 317;

int n, q, k, l, r, t, a[_N], last_ans = 0, curr = 0, cnt[318][_N];
vector <int> arr[_N];

pair <int, int> get_block_number(int idx) {
	int sz = 0;
	idx += 1;
	for (int i = 0; i < BLOCKS; i++) {
		sz += (arr[i].size());
		if (sz >= idx) return {i, idx - (sz - (int)arr[i].size()) - 1};
	}
	return {-1, -1};
}

void del(int block_num, int idx) {
	int val = arr[block_num][idx];
	cnt[block_num][val] -= 1;
	arr[block_num].erase(arr[block_num].begin() + idx);
}

void add(int block_num, int idx, int val) {
	cnt[block_num][val] += 1;
	arr[block_num].insert(arr[block_num].begin() + idx, val);
}

void shift(int l, int r) {
	pair <int, int> v1 = get_block_number(r);
	pair <int, int> v2 = get_block_number(l);
	int val = arr[v1.first][v1.second];
	del(v1.first, v1.second);
	add(v2.first, v2.second, val);
}

int rmq(int l, int r, int k) {
	pair <int, int> v1 = get_block_number(l);
	pair <int, int> v2 = get_block_number(r);
	int res = 0;
	if (v1.first == v2.first) { // same block
		for (int i = v1.second; i <= v2.second; i++) {
			res += (arr[v1.first][i] == k);
		}
		return res;
	}
	for (int i = v1.first + 1; i <= v2.first - 1; i++) {
		res += cnt[i][k];
	}
	for (int i = v1.second; i < (int)arr[v1.first].size(); i++) {
		res += (arr[v1.first][i] == k);
	}
	for (int i = 0; i <= v2.second; i++) {
		res += (arr[v2.first][i] == k);
	}
	return res;
}

int main() {
	boost();
	#ifndef ONLINE_JUDGE
		freopen("in", "r", stdin);
	#endif
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> a[i];
		
//		cout << a[i] << " ";
		
		arr[curr].pb(a[i]);
		cnt[curr][a[i]] += 1;
		if (arr[curr].size() == BLOCKS) curr += 1;
	}

//	cout << endl << "___________________________________________" << endl << endl;

	cin >> q;
	for (int i = 0; i < q; i++) {
		cin >> t >> l >> r;
		l = (l + last_ans - 1) % n + 1;
		r = (r + last_ans - 1) % n + 1;
		if (l > r) swap(l, r);
		l -= 1; r -= 1;
		if (t == 1) { // cycle shift
			shift(l, r);

//			for (int i = 0; i < BLOCKS; i++) {
//				for (auto x : arr[i]) {
//					cout << x << " ";
//				}
//			}
//			cout << endl;

		} else {
			cin >> k;
			k = (k + last_ans - 1) % n + 1;
			last_ans = rmq(l, r, k);
			cout << last_ans << endl;
		}
//		if ((i + 1) % BLOCKS == 0) build();
	}
	return 0;
}
