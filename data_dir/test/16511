#include <bits/stdc++.h>
using namespace std;

const int N = 2e5 + 10;

char s[N];
int U[N], L[N], R[N], D[N];
int n, rw, cn;

bool check(int x){
	int _u, _l, _r, _d, cnt1, cnt2;
	for (int i = 1; i <= n - x + 1; i++){
		_u = U[n] - U[i + x - 1] + U[i - 1];
		_l = L[n] - L[i + x - 1] + L[i - 1];
		_r = R[n] - R[i + x - 1] + R[i - 1];
		_d = D[n] - D[i + x - 1] + D[i - 1];
		if (abs(_r - _l - cn) + abs(_u - _d - rw) <= x) return true;
	}
	return false;
}

int main(){
	int l, r, mid;
	scanf("%d",&n);
	scanf("%s",s + 1);
	scanf("%d %d",&cn,&rw);
	if ((abs(rw) + abs(cn) + n) & 1){
		printf("-1\n");
		return 0;
	}
	U[0] = L[0] = R[0] = D[0] = 0;
	for (int i = 1; i <= n; i++){
		U[i] = U[i - 1];
		L[i] = L[i - 1];
		R[i] = R[i - 1];
		D[i] = D[i - 1];
		if (s[i] == 'U') U[i]++;
		else if (s[i] == 'L') L[i]++;
		else if (s[i] == 'R') R[i]++;
		else D[i]++;
	} 
	l = -1; r = n + 1;
	while (r - l > 1){
		mid = (l + r) >> 1;
		if (check(mid)) r = mid;
		else l = mid;
	}
	if (r > n) printf("-1\n");
	else printf("%d\n",r);
	return 0;
}