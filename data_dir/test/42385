#include <bits/stdc++.h>
using ULL = unsigned long long ;

const int N = 5000 + 5;
const ULL base = 233;
ULL base_pow[N];
int n,K;
char str[N];
ULL lhash[N],rhash[N];


ULL get_hash(ULL *hash,int p,int len) {
    if (len & 1) ++ len;
    return hash[p] - hash[p + len] * base_pow[len / 2];
}

struct Node {
    Node *go[2];
    int cnt;
};

Node pool[N * N],*alloc,*root;

void insert(int p) {
    Node *u = root;
    for (int i = 0; p + i < n; ++ i) {
        int c = str[p + i] - 'a';
        if (u->go[c] == NULL)
            u->go[c] = alloc ++;
        u = u->go[c];
        int len = i + 1;
        if (get_hash(lhash,p,len + 1 >> 1)
                == 
                get_hash(rhash,n - 1 - (p + i),len + 1 >> 1)) {
            u->cnt ++;
        }
    }
}

std::vector<int> path;

bool dfs(Node *u) {
    if (u == NULL) return false;
    K -= u->cnt;
    if (K <= 0) return true;
    path.push_back(0);
    if (dfs(u->go[0])) return true;
    path.back() = 1;
    if (dfs(u->go[1])) return true;
    path.pop_back();
    return false;
}

int main() {
    scanf("%s%d",str,&K);
    n = strlen(str);
    base_pow[0] = 1;
    for (int i = 1; i < N; ++ i)
        base_pow[i] = base_pow[i - 1] * base;
    for (int i = n - 1; i >= 0; -- i) {
        lhash[i] = lhash[i + 2] * base + str[i];
        rhash[i] = rhash[i + 2] * base + str[n - 1 - i];
    }

    alloc = pool;
    root = alloc ++;
    for (int i = 0; i < n; ++ i) {
        insert(i);
    }
    dfs(root);
    for (auto t : path)
        putchar('a' + t);
    puts("");
}

