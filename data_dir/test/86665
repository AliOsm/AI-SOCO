#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <assert.h>
#include <fstream>
#include <iomanip>
#include <bitset>
#include <string>
#include <cstdio>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>
#include <map>

using namespace std;

const int N = 200001;

int n;
vector < pair < int, int > > G[N];
vector < int > ans[N];
int mxk = 0;

void dfs(int v, int k, int parent)
{
	int t = 1;
	for (int i = 0; i < G[v].size(); ++i)
	{
		int to = G[v][i].first; 
		if (to == parent)
			continue;
		if (t == k)
			t++;
		mxk = max(mxk, t);
		ans[t].push_back(G[v][i].second);
		dfs(to, t, v);
		t++;
	}
}

int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
	scanf("%d", &n);
	for (int i = 0; i < n - 1; ++i)
	{
		int u, v; scanf("%d%d", &u, &v); u--; v--;
		G[u].push_back(make_pair(v, i));
		G[v].push_back(make_pair(u, i));
	}
	dfs(0, 0, -1);
	printf("%d\n", mxk);
	for (int i = 1; i <= mxk; ++i)
	{
		printf("%d ", ans[i].size());
		for (int j = 0; j < ans[i].size(); ++j)
			printf("%d ", ans[i][j] + 1);
		printf("\n");
	}
    return 0;
}