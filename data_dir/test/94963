#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template<class T> using OS = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define ll long long
#define ld double
#define ull unsigned long long

const int N = 2e5 + 5;
ll n, x, y, out, sz[N], ans[N];
vector<ll> dp[N];
vector<int> v[N];

void dfsSz(int u, int p) {
    sz[u] = 1;
    for (auto i : v[u])
        if (i != p) {
            dfsSz(i, u), sz[u] += sz[i];
        }
}

void rdfs(int u, int p, ll tot) {
    for (int i = 0; i < v[u].size(); i++)
        if (v[u][i] != p) {
            rdfs(v[u][i], u, tot + ans[u] - dp[u][i] - sz[v[u][i]] + n - sz[u]);
        }
    out = max(out, tot + n);
}

ll dfs(int u, int p) {
    ll re = sz[u];
    for (int i = 0; i < v[u].size(); i++) {
        if (v[u][i] == p) {
            dp[u].push_back(0);
            continue;
        }
        dp[u].push_back(dfs(v[u][i], u));
        re += dp[u].back();
    }
    ans[u] = re;
    return re;
}

int main() {
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);

    cin >> n;
    for (int i = 0; i < n - 1; i++) {
        cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }

    dfsSz(1, 0);
    dfs(1, 0);
    rdfs(1, 0, 0);

    cout << out;

    return 0;
}