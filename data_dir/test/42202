#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
#define  int long long int
typedef complex<long double> cd;
const long double pi=acos(-1);
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <db, db> pdd;
typedef vector<int> vi;
typedef vector<vector<int> > matrix;
#define m1 make_pair
#define pb push_back
#define flush fflush(stdout)
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define reset(x,v) memset(x,v,sizeof(x))
#define sz(x) (int)(x.size())
#define ff first
#define ss second
#define endl "\n"
#define debug(x) (cerr << #x << ": " << x << "\n")
#define setbits(x) __builtin_popcount(x)
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0)return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p;}
const ll MOD =998244353;
const ll hell=1000000007;
const int INF = 1e17;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;

typedef tree<int, null_type, less<int>, rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;
const int N=1000005;
int bit[N+1];
int getparent(int i)
{
    return i-(i & -i);
}
int getnext(int i)
{
    return i+(i & -i);
}
void update(int i,int x)
{
    while(i<=N)
    {
        bit[i]^=x;
        i=getnext(i);
    }
}
int getxor(int i)
{
    int ans=0;
    while(i>0)
    {
        ans=ans^bit[i];
        i=getparent(i);
    }
    return ans;
}
int32_t main()
{
    IOS;
    int n;
    cin>>n;
    int a[n+1];map<int,int>last;
    for(int i=0;i<n;i++)
    {
        cin>>a[i+1];
        last[a[i+1]]=0;
    }
    int m;
    cin>>m;
    vector<pair<int,int> > query[n+1];int l,r;
    for(int i=0;i<m;i++)
    {
        cin>>l>>r;
        query[r].pb(m1(l,i));
    }
    int pre[n+1];int ans[m];
    pre[0]=0;
    for(int i=1;i<=n;i++)
    {
        pre[i]=pre[i-1]^a[i];
    }
    for(int i=1;i<=n;i++)
    {
            if(last[a[i]]!=0)
            update(last[a[i]],a[i]);
            update(i,a[i]);
        
        last[a[i]]=i;
        for(int j=0;j<query[i].size();j++)
        {
            r=i;
            l=query[i][j].first;
            ans[query[i][j].second]=(pre[r]^pre[l-1])^(getxor(r)^getxor(l-1));
        }
    }
    for(int i=0;i<m;i++)
        cout<<ans[i]<<endl;
    return 0;
}
