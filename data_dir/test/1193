#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <string>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <fstream>
#include <cassert>
#include <cstring>
#include <unordered_set>
#include <unordered_map>
#include <numeric>
#include <ctime>
#include <bitset>
#include <complex>
#include <chrono>
#include <random>
#include <functional>

using namespace std;

#define int long long

const int N = 630;
const int L9 = 1e9;
const int L18 = 1e18;

int p[N];
vector<int> pr;

void init() {
	fill(p, p + N, 1);
	for (int i = 2; i < N; i++) {
		for (int j = 2 * i; j < N; j += i) {
			p[j] = 0;
		}
		if (p[i]) pr.push_back(i);
	}
}

// int X;

int query(int x) {
	// return gcd(x, X);
	cout << "? " << x << endl;
	int res;
	cin >> res;
	return res;
}

int f(int x)  {
	int c = x;
	while (c * x <= L9) c *= x;
	return c;
}

void solve() {
	int cmul = 1;
	vector<int> cp;
	vector<int> primes_in;
	auto print = [&]() {
		int res = query(cmul);
		for (auto t : cp) {
			if (res % t == 0) {
				primes_in.push_back(t);
			}
		}
		cp.clear();
		cmul = 1;
	};
	auto apply = [&](int f) {
		if (cmul > L18 / f) {
			print();
		}
		cmul *= f;
		cp.push_back(f);
	};	
	for (auto t : pr) {
		apply(t);
	}
	print();
	int c = 1;
	int x = 1;
	for (int i = 0; i < (int)primes_in.size(); ) {
		vector<int> cur_query;
		int num = 1;
		for (int j = i; j < i + 2 && j < (int)primes_in.size(); j++) {
			cur_query.push_back(primes_in[j]);
			num *= f(primes_in[j]);
		}
		int res = query(num);
		x *= res;
		for (auto t : cur_query) {
			int cnt = 0;
			while (res % t == 0) {
				cnt++;
				res /= t;
			}
			c *= (cnt + 1);
		}
		i += cur_query.size();
	}
	if (x <= 3) {
		if (c == 1) {
			cout << "! " << 4 << endl;
		} else {
			cout << "! " << 9 << endl;
		}
	} else {
		cout << "! " << 2 * c << endl;
	}
}

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);	

	init();
	int q;
	cin >> q;
	while (q--) {
		solve();
	}
	// while (cin >> X) {
	// 	solve();
	// }
}
