#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <memory.h>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 1e18+7;
const long long mod = 2e9+7;
const double eps = 1e-12;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (ll (i)=0;(i)<(ll)(n);(i)++)
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n, m;
int a[25], b[25], c[25];

int next[25][25];
int f[25][25][25];
int g[25][25][25];

void rec(int v, int s){
  if(v == n){
    int x = 0, y = 0;
    forn(i,n){
      if(!c[i]) y++; else{
        if(y) y--; else x++;
      }
    }
    next[x][y] = min(next[x][y],s);
    return;
  }
  c[v] = 0; rec(v+1,s+a[v]);
  c[v] = 1; rec(v+1,s+b[v]);
}

int main(void) {
  #ifndef ONLINE_JUDGE
    freopen("input.txt","rt",stdin);
    freopen("output.txt","wt",stdout);
  #endif
  scanf("%d%d",&n,&m);
  forn(i,n) scanf("%d",a+i);
  forn(i,n) scanf("%d",b+i);
  for(int i=0;i<=n;i++)
    for(int j=0;j<=n;j++){
      next[i][j] = mod;
    }
  rec(0,0);
  for(int k=0;k<=24;k++)
    for(int i=0;i<=n;i++)
      for(int j=0;j<=n;j++)
        f[k][i][j] = g[k][i][j] = mod;
  for(int i=0;i<=n;i++)
    for(int j=0;j<=n;j++)
      f[0][i][j] = next[i][j];
  for(int k=1;k<=24;k++){
    for(int i=0;i<=n;i++)
      for(int j=0;j<=n;j++)
        if(f[k-1][i][j] != mod)
          for(int x=0;x<=n;x++)
            for(int y=0;y<=n;y++)
              if(f[k-1][x][y] != mod){
                if(j < x){
                  int now = f[k-1][i][j] + f[k-1][x][y];
                  if(i + x - j <= n)
                    f[k][i+x-j][y] = min(f[k][i+x-j][y],now);
                } else {
                  int now = f[k-1][i][j] + f[k-1][x][y];
                  if(j + y - x <= n)
                    f[k][i][j+y-x] = min(f[k][i][j+y-x],now);
                }
              }
  }
  int id = 0;
  for(int k=0;k<=24;k++){
    if(m & (1 << k)){
      id++;
      if(id == 1){
        for(int i=0;i<=n;i++)
          for(int j=0;j<=n;j++)
            g[id][i][j] = f[k][i][j];
      } else {
        for(int i=0;i<=n;i++)
          for(int j=0;j<=n;j++)
            if(g[id-1][i][j] != mod)
              for(int x=0;x<=n;x++)
                for(int y=0;y<=n;y++)
                  if(f[k][x][y] != mod){
                    if(j < x){
                      int now = g[id-1][i][j] + f[k][x][y];
                      if(i + x - j <= n)
                        g[id][i+x-j][y] = min(g[id][i+x-j][y],now);
                    } else {
                      int now = g[id-1][i][j] + f[k][x][y];
                      if(j + y - x <= n)
                        g[id][i][j+y-x] = min(g[id][i][j+y-x],now);
                    }
                  }
      }
    }
  }
  printf("%d\n",g[id][0][0]);
  return 0;
}
