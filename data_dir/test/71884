#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;

struct bnode{
    bnode *go[26];
    bool term;
    bnode(){
        for (int i = 0; i < 26; i++)
            go[i] = nullptr;
        term = 0;
    }
};

typedef bnode* node;

node root;

void add(string &s){
    node cur = root;
    for (int i = 0; i < s.size(); i++){
        if (cur->go[s[i]-'a'] == nullptr){
            cur->go[s[i]-'a'] = new bnode();
        }
        cur = cur->go[s[i]-'a'];
    }
    cur->term = 1;
}

typedef multiset<int> mset;

mset myMerge(mset a, mset b){
    if (a.size() < b.size())
        a.swap(b);
    for (auto it : b)
        a.insert(it);
    return a;
}

mset dfs(node v, int deep){
    mset curans;
    for (int i = 0; i < 26; i++){
        if (v->go[i] == nullptr)
            continue;
        mset t = dfs(v->go[i], deep+1);
        curans = myMerge(curans, t);
    }
    if (v->term)
        curans.insert(deep);
    else
    if (deep != 0){
        curans.erase(prev(curans.end()));
        curans.insert(deep);
    }
    return curans;
}

int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    root = new bnode();
    int n;
    cin >> n;
    for (int i = 1; i <= n; i++){
        string s;
        cin >> s;
        add(s);
    }
    mset ans = dfs(root, 0);
    cout << accumulate(ans.begin(), ans.end(), 0);

}
