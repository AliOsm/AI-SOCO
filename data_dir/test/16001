#include <bits/stdc++.h>
using namespace std;
#define all(v) ((v).begin()),((v).end())
#define ll long long
#define fastIO cout << fixed << setprecision(12), ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)
double const EPS = 1e-12, PI = acos(-1);
const int N = 1e6 + 9, M = 1e3 + 9, OO = 1e9 + 7, MOD = 1e9 + 7;
const ll inf = 1e18;

int par[N];

int find(int x) {
	if(x == par[x]) return x;
	return par[x] = find(par[x]);
}

bool join(int x, int y) {
	x = find(x), y = find(y);
	if(x == y)
		return 0;
	par[y] = x;
	return 1;
}

struct edge {
	int from, to;
	ll w;
	edge() {

	}
	edge(int _from, int _to, ll _w) {
		from = _from;
		to = _to;
		w = _w;
	}
	bool operator <(const edge &e) const {
		return w > e.w;
	}
};

int main() {
  fastIO;
#ifdef LOCAL
  freopen("input.in", "rt", stdin);
#endif
  int n, m;
  cin >> n >> m;
  ll total = 0;
  priority_queue<edge> q;
  vector<pair<ll, int>> cost(n);
  for (int i = 1; i <= n; ++i) {
		cin >> cost[i - 1].first;
		cost[i - 1].second = i;
		par[i] = i;
	}
  sort(all(cost));
  for (int i = 1; i < n; ++i)
		q.push({cost[0].second, cost[i].second, cost[0].first + cost[i].first});
  int u, v;
  ll offer;
  for (int i = 0; i < m; ++i) {
		cin >> u >> v >> offer;
		q.push(edge(u, v, offer));
	}
  while(!q.empty()) {
  	edge e = q.top();
  	q.pop();
  	if(join(e.from, e.to))
  		total += e.w;
  }
  cout << total;
  return 0;
}
