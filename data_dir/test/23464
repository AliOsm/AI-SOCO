#include<bits/stdc++.h>
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define ll long long
#define all(a) a.begin(),a.end()
#define endl '\n'
#define y1 y123123

using namespace std;

const int N=5e5+3;
const int inf=1e9+3;
const int md=1e9+7;

int n,k,m,x,y,z,sz1;
int pr[N],sz[N],sm[N];
int res[N];
int h[N];
int p[N];
int d[N*4],ob[N*4],cost[N];
vector<pair<int,pair<int,int> > > g;
vector<pair<int,pair<int,int> > > q;
vector<pair<int,int> > a[N];


//hld_build
int nm,ps;
int head[N],num[N],pos[N];
void build_hld(int v)
{
    pos[v] = ++ps;
    num[v] = nm;
    int mx = 0;
    for(int i=0;i<a[v].size();++i)
    {
        int to=a[v][i].ff;
        if(to==p[v])continue;
        if(sz[to] > sz[mx])mx = to;
    }
    if(mx != 0) build_hld(mx);
    for(int i=0;i<a[v].size();++i)
    {
        int to=a[v][i].ff;
        if(to==p[v] || to==mx)continue;
        nm++;
        head[nm] = to;
        build_hld(to);
    }
}

//tree_update
int t[N];
inline void upd1(int v,int x)
{
    while(v<=n)
    {
        t[v]+=x;
        v|=(v+1);
    }
}
inline int get1(int v)
{
    int res=0;
    while(v>=0)res+=t[v],v=(v&(v+1))-1;
    return res;
}

inline void upd(int v,int x)
{
    v+=sz1-1;
    while(v)
    {
        d[v]+=x;
        v/=2;
    }
}

int get_right(int v,int l,int r,int l_v,int r_v)
{
    if(l>r_v||r<l_v||d[v] == r-l+1)return -1;
    if(l==r)return l;
    int mid=(l+r)/2;
    int z = get_right(v+v,l,mid,l_v,r_v);
    if(z!=-1)return z;
    return get_right(v+v+1,mid+1,r,l_v,r_v);
}

inline void update(int l,int r,int x)
{
    if(get1(r)-get1(l-1)==r-l+1)return;
    while(l<=r)
    {
        l = get_right(1,1,sz1,l,n);
        if(l==-1||l>r)break;
        res[l] = x;
        upd(l,1);
        upd1(l,1);
        l++;
    }
}

inline int get_pr(int v)
{
    if(v==pr[v])return v;
    return pr[v] = get_pr(pr[v]);
}


void dfs(int v,int pr=0)
{
    h[v] = h[pr]+1;
    sz[v] = 1;
    p[v] = pr;
    for(int i=0;i<a[v].size();++i)
    {
        int to=a[v][i].ff;
        if(to == pr)continue;
        cost[to] = a[v][i].ss;
        dfs(to,v);
        sz[v] += sz[to];
    }
}
ll ans;


main()
{
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

    cin>>n>>k>>m;

    sz1 = 1;
    while(sz1<n)sz1+=sz1;

    for(int i=1;i<=n;++i)pr[i] = i, sz[i] = 1;

    for(int i=1;i<=k;++i)
    {
        cin>>x>>y;
        a[x].pb(mp(y,0));
        a[y].pb(mp(x,0));

        x = get_pr(x); y = get_pr(y);
        if(sz[x]<sz[y])swap(x,y);
        sz[x] += sz[y];
        pr[y] = x;
    }

    for(int i=1;i<=m;++i)
    {
        cin>>x>>y>>z;
        g.pb(mp(z,mp(x,y)));
    }

    sort(all(g));
    for(int i=0;i<g.size();++i)
    {
        z = g[i].ff;
        x = g[i].ss.ff;
        y = g[i].ss.ss;
        if(get_pr(x)==get_pr(y))
        {
            q.pb(mp(z,mp(x,y)));
            continue;
        }

        a[x].pb(mp(y,z));
        a[y].pb(mp(x,z));

        x = get_pr(x);
        y = get_pr(y);
        if(sz[x]<sz[y])swap(x,y);
        sz[x] += sz[y];
        pr[y] = x;
    }

    memset(sz,0,sizeof(sz));
    dfs(1);

    nm = 1;
    head[1] = 1;
    build_hld(1);

    for(int i=0;i<q.size();++i)
    {
        int x = q[i].ss.ff;
        int y = q[i].ss.ss;
        int bg=0;
        while(num[x] != num[y])
        {
            if(h[head[num[x]]] < h[head[num[y]]])swap(x,y);
            update(pos[head[num[x]]],pos[x],q[i].ff);
            x = p[head[num[x]]];
        }

        if(h[x] < h[y])swap(x,y);
        update(pos[y]+1,pos[x],q[i].ff);
    }
    for(int i=2;i<=n;++i)
    {
        if(cost[i] == 0)
        {
            int gz = res[pos[i]];
            if(gz == 0)
            {
                cout<<-1;
                return 0;
            }
            ans += gz;
        }
    }

    cout<<ans;
}
/*
*/
