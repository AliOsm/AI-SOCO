#define DBG 1
// No progress
#include<bits/stdc++.h>
//#include<ext/pb_ds/assoc_container.hpp>
//#include<ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define eb emplace_back
#define fi first
#define se second
#define all(x) (x).begin(), (x).end()
#define dbg(x) if (DBG) cerr << #x << " = " << x << '\n';

using namespace std;
//using namespace __gnu_pbds;

typedef long long ll;
typedef pair<int, int> pii;

//template<typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

const int MAXN = (int)2e5 + 5;

vector<int> adj[MAXN], order;
bool used[MAXN];
int n, m, k;

void dfs(int v) {
    used[v] = 1;
    order.pb(v);

    for (int to : adj[v]) {
        if (!used[to]) {
            dfs(to);
            order.pb(v);
        }
    }
}

void solve() {
    scanf("%d %d %d", &n, &m, &k);

    for (int i = 1; i <= m; ++i) {
        int u, v;
        scanf("%d %d", &u, &v);
        adj[u].pb(v);
        adj[v].pb(u);
    }

    dfs(1);
    vector<vector<int> > ans(k);
    int lim = (2 * n + k - 1) / k;

    for (int i = 0; i < order.size(); ++i) {
        ans[i / lim].pb(order[i]);
    }

    for (int i = 0; i < k; ++i) {
        if (ans[i].empty()) {
            ans[i].pb(1);
        }

        printf("%d", ans[i].size());

        for (int x : ans[i]) {
            printf(" %d", x);
        }

        printf("\n");
    }
}

int main() {
    int tt = 1;

    while (tt--) {
        solve();
    }

    return 0;
}
