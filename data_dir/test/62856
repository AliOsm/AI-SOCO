#include <bits/stdc++.h>
using namespace std;
#define int long long
#define IOS ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0)
inline int in(){int32_t x ; scanf("%d",&x) ; return x ;}
inline long long lin(){long long x ; scanf("%lld",&x) ; return x;}
const int maxn = 1e5 + 10;
const int inf = 1e18 ;
struct edge
{
	int v , u , id;
	double w;
	
	inline bool operator <(const edge &b ) const
	{
		return w < b.w;
		
	}
}e[maxn];
int n , m , k;
int pr[maxn];
inline int root(int x) {return pr[x] == x ? x : pr[x] = root(pr[x]);}
inline bool merge(int v , int u)
{
	v = root(v) , u = root(u);
	if (v == u) return false;
	pr[v] = u;
	return true;
} 
vector<int> tree;
inline int check(double add)
{
	for (int i = 0 ; i < m ; i ++)
		if (e[i].v == 0 || e[i].u == 0)
			e[i].w += add;
	tree.clear();
	int used = 0;
	iota(pr,pr+n,0);
	sort(e,e+m);
	for (int i = 0 ; i < m ; i ++)
	{
		if (merge(e[i].v,e[i].u))
		{
			tree.push_back(e[i].id);
			used += e[i].v == 0 || e[i].u ==0;
		}
	}
	
	for (int i = 0 ; i < m ; i ++)
		if (e[i].v == 0 || e[i].u == 0)
			e[i].w -= add;
	return used;
}


int32_t main()
{
    n = in() , m = in() , k = in();
	for (int i = 0 ; i < m ; i ++)
	{
		int v = in() - 1 , u = in() - 1 , w = in();
		e[i].v = v , e[i].u = u , e[i].w = w + bool(!v || !u) * 1e-7 * i;
		e[i].id = i;
	}
	double l = -1e9 , r = 1e9 , mid;
	while(r -l > 1e-8)
	{
		mid = (l + r)/2.0;
		if (check(mid) < k)	
			r = mid;
		else l = mid;
	}
	if (check(l) - k || tree.size() != n - 1)
	{
		return cout << -1 << endl , 0;
	}
	cout << n - 1 << "\n";
	for (auto x : tree) cout << x + 1 << " ";
}
