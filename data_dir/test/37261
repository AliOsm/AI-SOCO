#include <bits/stdc++.h>
 
using namespace std;
 
const int N = 500005;
const int mod = 1000000007;
const int inf = 1000000007;
 
struct Node {
	int u, v, next, idx;
}edge[N];
int n, m, cnt, start[N];
int a, b , c, p[N];
long long s[N];
void add_(int u, int v, int idx){
	edge[cnt].u = u;
	edge[cnt].v = v;
	edge[cnt].idx = idx;
	edge[cnt].next = start[u];
	start[u] = cnt ++;
}
void add(int u, int v, int idx) {
	add_(u, v, idx);
	add_(v, u, idx);
}
 
void bfs(int st, vector<int> &d) {
	queue<int> q;
	q.push(st);
	d[st] = 0;
	while (!q.empty()) {
		int u = q.front();q.pop();
		for(int i = start[u]; i != -1 ; i = edge[i].next) {
			int v = edge[i].v;
			if (d[v] == inf) {
				d[v] = d[u] + 1;
				q.push(v);
			}
		}
	}
}
 
int main () {
	// freopen("input.txt", "r", stdin);
	// freopen("output.txt", "w", stdout);
	int t; cin >> t;
	while (t --) {
		
 
		cin >> n >> m >> a >> b >> c;
		a --;b --; c--;
		for(int i = 0 ; i < n ; i ++) {
			start[i] = -1;
		}
		cnt = 0;
		for (int i = 0 ; i < m ; i ++) {
			cin >> p[i];
		}
		sort(p, p + m);
		for (int i = 0 ; i < m ; i ++) {
			int u, v;
			cin >> u >> v;
			add(u - 1, v - 1, i);
		}
 
 		vector<int> da(n, inf), db(n, inf), dc(n, inf);
		bfs(a, da);
		bfs(b, db);
		bfs(c, dc);
		

		s[0] = 0;
		for(int i = 1 ; i <= m ; i ++) {
			s[i] = s[i - 1] + p[i - 1];
		}
		long long ans = inf * 1LL * inf;;
		for(int i = 0 ; i < n ; i ++) {
			if (da[i] + db[i] + dc[i] > m) continue;
			ans = min(ans, s[db[i]] + s[da[i] + db[i] + dc[i]]);
		}
		cout << ans << endl;
 	}
 
	return 0;
}