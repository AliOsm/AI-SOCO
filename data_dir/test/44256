/* 185A */
#include <iostream>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <deque>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
#include <functional>
using namespace std;
//#pragma comment(linker,"/STACK:102400000,1024000")

#define mpii			map<int,int>
#define vi				vector<int>
#define pii				pair<int,int>
#define vpii			vector<pair<int,int> >
#define rep(i, a, n) 	for (int i=a;i<n;++i)
#define per(i, a, n) 	for (int i=n-1;i>=a;--i)
#define pb 				push_back
#define mp 				make_pair
#define fir				first
#define sec				second
#define all(x) 			(x).begin(),(x).end()
#define SZ(x) 			((int)(x).size())
#define lson			l, mid, rt<<1
#define rson			mid+1, r, rt<<1|1

const int mod = 1e9+7;

// a0 b0	3 1	= a1	b1
// a1 b1	1 3	= a2	b2

typedef struct {
	__int64 m[2][2];
} mat_t;

mat_t matMult(mat_t a, mat_t b) {
	mat_t c;
	
	c.m[0][0] = (a.m[0][0]*b.m[0][0] + a.m[0][1]*b.m[1][0]) % mod;
	c.m[0][1] = (a.m[0][0]*b.m[1][0] + a.m[0][1]*b.m[1][1]) % mod;
	c.m[1][0] = (a.m[1][0]*b.m[0][0] + a.m[1][1]*b.m[1][0]) % mod;
	c.m[1][1] = (a.m[1][0]*b.m[1][0] + a.m[1][1]*b.m[1][1]) % mod;
	c.m[1][1] = (a.m[1][0]*b.m[1][0] + a.m[1][1]*b.m[1][1]) % mod;
	
	return c;
}

__int64 solve(__int64 n) {
	mat_t a, b;
	
	a.m[0][0] = 1;
	a.m[0][1] = 0;
	a.m[1][0] = 3;
	a.m[1][1] = 1;
	b.m[0][0] = b.m[1][1] = 3;
	b.m[1][0] = b.m[0][1] = 1;
	
	--n;
	while (n) {
		if (n & 1)
			a = matMult(a, b);
		b = matMult(b, b);
		n >>= 1;
	}
	
	return a.m[1][0];
}

int main() {
	ios::sync_with_stdio(false);
	#ifndef ONLINE_JUDGE
		freopen("data.in", "r", stdin);
		freopen("data.out", "w", stdout);
	#endif
	
	__int64 n;
	__int64 ans;
	
	cin >> n;
	if (n == 0) {
		ans = 1;
	} else {
		ans = solve(n);
	}
	cout << ans << endl;
	
	#ifndef ONLINE_JUDGE
		printf("time = %d.\n", (int)clock());
	#endif
	
	return 0;
}
