#include <bits/stdc++.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wuninitialized"
using namespace std;


typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define per(i, start, end) for(int i = (int)start-1; i >= end; --i)
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()

int ans[100005];

bool valid(vector<pair<int, int> > const &a, vector<pair<int, int> > const &b, vector<int> const &c, int days, ll s,
           int work[], bool output = 0)
{
    int i = 0;
    priority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > p; // passes and stud idx
    for (auto item : a)
    {
        int maxBug = item.F, bugID = item.S;
        for (; i < sz(b) && b[i].F >= maxBug; ++i)
        {
            p.push(mp(c[b[i].S], b[i].S));
        }
        if (p.empty())
            return false;
        s = s - p.top().F;
        if (s < 0)
            return false;
        int tempID = p.top().S;
        p.pop();
        p.push(mp(0, tempID));
        if (output == 1)
            ans[bugID] = p.top().S + 1;
        work[p.top().S]++;
        if (work[p.top().S] >= days)
            p.pop();

    }
    return true;
}

int main()
{
    ios_base::sync_with_stdio(false);
//    freopen("input.txt", "r", stdin);
    int n, m;
    ll s;
    cin >> n >> m >> s;
    vector<int> c(n); // a bug, b ability, c passes
    vector<pair<int, int> > b, a(m);
    rep(i, 0, m)
    {
        int x;
        cin >> x;
        a[i] = mp(x, i);
    }
    rep(i, 0, n)
    {
        int x;
        cin >> x;
        b.pb(mp(x, i));
    }
    rep(i, 0, n)
    {
        cin >> c[i];
    }

    sort(all(a), greater<pair<int, int> >());
    sort(all(b), greater<pair<int, int> >());

    int st = 1, end = m;
    int work[100005] = {0};
    while (st < end)
    {
        int mid = st + (end - st) / 2;
        if (valid(a, b, c, mid, s, work))
            end = mid;
        else
            st = mid + 1;
        memset(work, 0, sizeof(work));
    }
    if (valid(a, b, c, st, s, work, true))
    {
        cout << "YES" << endl;
        for (auto item : ans)
        {
            if (item != 0)
                cout << item << " ";
        }
    }
    else
        cout << "NO" << endl;


    return 0;
}
