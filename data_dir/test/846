#include<bits/stdc++.h>
using namespace std;
 
#define pb push_back
#define ll long long
#define fr(i,j,k) for(int i=j;i<k;i++)
#define f(n) fr(i,0,n)
#define f1(n) fr(i,1,n+1)
#define ms(i) memset(i,0,sizeof(i));
#define ms1(i) memset(i,-1,sizeof(i));
#define pll pair<ll,ll>
#define pii pair<int,int>
#define F first
#define S second
const int maxn = 2e5 + 5;
const int mod = 1e9 + 7;

int n, m, k;
int dp[20005][2];
int mat[55][20005];
int pre[55][20005];
int mx[100005];
int lz[100005];
void pushdown(int x){
    if(!lz[x])return ;
    lz[x<<1] += lz[x];
    lz[x<<1|1] += lz[x];
    mx[x<<1] += lz[x];
    mx[x<<1|1] += lz[x];
    lz[x] = 0;
}
void pushup(int x){
    mx[x] = max(mx[x<<1], mx[x<<1|1]);
}
void build(int x,int l,int r){
    lz[x] = 0;
    if(l==r){
        mx[x] = dp[l][0];
        return;
    }
    int mid = (l+r) >> 1;
    build(x<<1,l,mid);
    build(x<<1|1,mid+1,r);
    pushup(x);
}
void update(int x,int l,int r,int ql,int qr,int v){
    if(ql <= l&&qr >= r){
        mx[x] += v;
        lz[x] += v;
        return ;
    }
    pushdown(x);
    int mid = (l+r) >> 1;
    if(ql <= mid){
        update(x<<1, l, mid, ql, qr, v);
    }
    if(qr > mid){
        update(x<<1|1, mid + 1, r, ql, qr, v);
    }
    pushup(x);
}
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> m >> k;
    f1(n) {
        fr(j,1,m+1) {
            cin >> mat[i][j];
            pre[i][j] = pre[i][j-1] + mat[i][j];
        }
    }
    f1(m-k+1) {
        dp[i][0] = pre[1][i+k-1] - pre[1][i-1] + pre[2][i+k-1] - pre[2][i-1];
        //cout << dp[i][0] <<' ';
    }
    for (int i = 2 ; i <= n ; i++) {
        build(1,1,m-k+1);
        for(int j = 1;j <= k ; j++) {
            update(1,1,m-k+1,max(j-k+1,1),min(j,m-k+1),-mat[i][j]);
        }
        for (int j = 1 ; j <= m - k + 1 ; j++) {
            dp[j][1] = mx[1] + pre[i][j+k-1] - pre[i][j-1] + pre[i+1][j+k-1] - pre[i+1][j-1];
            if (j != m - k + 1) {
                update(1,1,m-k+1,j+1,min(j+k,m-k+1),-mat[i][j+k]);
            }
            update(1,1,m-k+1,max(j-k+1,1),min(j,m-k+1),mat[i][j]);
        }
        for (int j = 1 ; j <= m - k + 1 ; j++) {
            dp[j][0] = dp[j][1];
        }
    }
    int ans = 0;
    for (int i = 1 ; i <= m - k + 1 ; i++) {
        ans = max(ans, dp[i][0]);
    }
    cout << ans << '\n';
}  