#include <bits/stdc++.h>

#define FOR(i,b,e) for(int i=(b); i <= (e); ++i)
#define FORD(i,b,e) for(int i=(b); i >= (e); --i)
#define REP(i,n) for(int i=0; i < (n); ++i)
#define SIZE(c) (int) (c).size()
#define ALL(c) (c).begin(), (c).end()
#define PB push_back
#define MP make_pair
#define ST first
#define ND second
#define FWD(i,a,b) for (int i=(a); i<(b); ++i)
#define BCK(i,a,b) for (int i=(a); i>(b); --i)
#define PI 3.14159265358979311600
#define pb push_back
#define mp make_pair
#define st first
#define nd second

using namespace std;

typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

typedef vector < int > VI;
typedef vector<ll> VL;

typedef long double K;

const int N = 100005;

int n, a[N], l[N], r[N], used[N];
vector<int> numbers;

int result = 0;

void dfs(int v, int lbound, int rbound) {
	if (lbound > rbound) return;
	if (v == -1) return;
	int itLeft = lower_bound(numbers.begin() + lbound, numbers.begin() + rbound, a[v]) - numbers.begin();
	int itRight = upper_bound(numbers.begin() + lbound, numbers.begin() + rbound, a[v]) - numbers.begin();
	result += itRight - itLeft;
	dfs(l[v], lbound, itLeft);
	dfs(r[v], itRight, rbound);
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	cin >> n;
	FOR (i, 1, n) {
		cin >> a[i] >> l[i] >> r[i];
		if (l[i] != -1) used[l[i]] = 1;
		if (r[i] != -1) used[r[i]] = 1;
		numbers.push_back(a[i]);
	}

	sort(numbers.begin(), numbers.end());

	int root = 1;
	while (used[root]) ++root;

	dfs(root, 0, SIZE(numbers));

	result = n - result;

	cout << result << '\n';

	return 0;
}