/////////////////////////   _LeMur_
#define _CRT_SECURE_NO_WARNINGS
#include <unordered_map>
#include <unordered_set>
#include <functional>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <chrono>
#include <random>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <ctime>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <list>
#include <map>
#include <set>

using namespace std;

const int N = 5005;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;
mt19937 myrand(chrono::steady_clock::now().time_since_epoch().count());

int t;

string s;
string answ = "";

bool dp[N][N];

bool update(int &x, int y) {
    if (y > x) {
        x = y;
        return true;
    }
    return false;
}

int main() {
    cin >> t;
    while (t--) {
        cin >> s;

        int n = (int)s.size();

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < (int)s.size(); j++) {
                if (j + i - 1 == (int)s.size()) break;
                int l = j, r = j + i - 1;
                if (i == 1 || i == 2 && s[l] == s[r] || s[l] == s[r] && dp[l + 1][r - 1]) {
                    dp[l][r] = true;
                } else {
                    dp[l][r] = false;
                }
            }
        }

        int res = 0;
        answ = "";

        for (int i = 0; i < n; i++) {
            if (dp[0][i]) {
                bool f = update(res, i + 1);
                if (f) {
                    answ = "";
                    for (int j = 0; j <= i; j++) {
                        answ += s[j];
                    }
                }
            }
            if (dp[i][n - 1]) {
                bool f = update(res, n - i);
                if (f) {
                    answ = "";
                    for (int j = i; j < n; j++) {
                        answ += s[j];
                    }
                }
            }
        }

        string str = "";
        for (int i = 0;; i++) {
            if (s[i] != s[n - 1 - i]) break;
            str += s[i];
            for (int j = i + 1; j < n - 1 - i; j++) {
                if (dp[i + 1][j]) {
                    bool f = update(res, j - (i + 1) + 1 + 2 * (i + 1));
                    if (f) {
                        answ = str;
                        for (int h = i + 1; h <= j; h++) {
                            answ += s[h];
                        }
                        reverse(str.begin(), str.end());
                        answ += str;
                        reverse(str.begin(), str.end());
                    }
                }
                if (dp[j][n - 2 - i]) {
                    bool f = update(res, n - 2 - i - j + 1 + 2 * (i + 1));
                    if (f) {
                        answ = str;
                        for (int h = j; h <= n - 2 - i; h++) {
                            answ += s[h];
                        }
                        reverse(str.begin(), str.end());
                        answ += str;
                        reverse(str.begin(), str.end());
                    }
                }
            }
        }

        cout << answ << endl;
    }
	return 0;
}
