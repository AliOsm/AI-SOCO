#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;
int l[100010], e[100010];
struct P {
	int c, x, y;
};
inline int ab(int x) {
	return x > 0 ? x : -x;
}
int main() {
	int n, m, cl, ce, v;
	scanf("%d%d%d%d%d", &n, &m, &cl, &ce, &v);
	for (int i = 0; i < cl; i++) {
		scanf("%d", &l[i]);
		--l[i];
	}
	for (int i = 0; i < ce; i++) {
		scanf("%d", &e[i]);
		--e[i];
	}
	sort(l, l + cl);
	sort(e, e + ce);
	int q;
	scanf("%d", &q);
	while (q--) {
		int x, y, X, Y;
		scanf("%d%d%d%d", &y, &x, &Y, &X);
		--x; --y; --X; --Y;
		vector<P> q;
		int ep = lower_bound(e, e + ce, x) - e;
		int h = ab(Y - y) / v, y2 = y < Y ? y + v * h : y - v * h;
		q.push_back((P){0, x, y});
		if (ep < ce) {
			q.push_back((P){ab(e[ep] - x) + h, e[ep], y2});
			q.push_back((P){ab(e[ep] - x) + h + 1, e[ep], Y});
		}
		if (--ep >= 0) {
			q.push_back((P){ab(e[ep] - x) + h, e[ep], y2});
			q.push_back((P){ab(e[ep] - x) + h + 1, e[ep], Y});
		}
		int ans = 1001001001;
		for (int i = 0; i < q.size(); i++) {
			x = q[i].x;
			h = ab(q[i].y - Y);
			vector<P> nq;
			if (h) {
				int lp = lower_bound(l, l + cl, x) - l;
				if (lp < cl) {
					ans = min(ans, q[i].c + h + ab(l[lp] - x) + ab(l[lp] - X));
				}
				if (--lp >= 0) {
					ans = min(ans, q[i].c + h + ab(l[lp] - x) + ab(l[lp] - X));
				}
			} else {
				ans = min(ans, q[i].c + ab(x - X));
			}
		}
		printf("%d\n", ans);
	}
	return 0;
}
