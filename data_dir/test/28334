#include<bits/stdc++.h>

using namespace std;

#define fRead(x)  freopen(x,"r",stdin)
#define fWrite(x) freopen (x,"w",stdout)

#define LL long long
#define ULL unsigned long long
#define ff first
#define ss second
#define pb push_back
#define INF 2e16
#define PI acos(-1.0)
#define mk make_pair

#define min3(a,b,c) min(a,min(b,c))
#define max3(a,b,c) max(a,max(b,c))
#define min4(a,b,c,d) min(a,min(b,min(c,d)))
#define max4(a,b,c,d) max(a,max(b,max(c,d)))
#define SQR(a) ((a)*(a))
#define FOR(i,a,b) for(int i=a;i<=b;i++)
#define REP(i,b) for(int i=0;i<b;i++)
#define ROF(i,a,b) for(int i=a;i>=b;i--)
#define MEM(a,x) memset(a,x,sizeof(a))
#define ABS(x) ((x)<0?-(x):(x))

#define scanI(a) scanf("%d",&a)
#define scanI2(a,b) scanI(a) , scanI(b)
#define scanI3(a,b,c) scanI(a), scanI(b), scanI(c)
#define scanI4(a,b,c,d) scanI(a), scanI(b), scanI(c), scanI(d)

#define scanL(a) scanf("%I64d",&a)
#define scanL2(a,b) scanL(a) , scanL(b)
#define scanL3(a,b,c) scanL(a), scanL(b), scanL(c)
#define scanL4(a,b,c,d) scanL(a), scanL(b), scanL(c), scanL(d)

#define SORT(v) sort(v.begin(),v.end())
#define REV(v) reverse(v.begin(),v.end())

#define FastRead ios_base::sync_with_stdio(0);cin.tie(nullptr);

const int N = 100005;

LL n,A,cf,cm,m;
pair<LL,LL>ara[N];
LL cum[N],pre[N];
int main()
{
    FastRead
    cin >> n >> A >> cf >> cm >> m;
    for(int i = 1;i <= n;i++){
        cin >> ara[i].first;
        ara[i].second = i;
        pre[i] = ara[i].first;
    }
    sort(ara + 1,ara + n + 1);
    reverse(ara + 1,ara + n + 1);
    for(int i = n;i >= 1;i--)cum[i] = cum[i + 1] + ara[i].first;
    ara[0].first = A;

    LL answer = -1;
    vector<int>vec;
    for(int i = 0;i <= n;i++){
        LL need = A - ara[i].first;
        if(need > m)break;
        ara[i].first += need;
        m = m - need;

        LL lo = i + 1, hi = n + 1,mid,ans;
        while(lo <= hi){
            mid = (lo + hi)/2;
            LL ele = n + 1 - mid;
            if(ele * ara[mid].first - cum[mid] <= m){
                ans = mid;
                hi = mid - 1;
            }else{
                lo = mid + 1;
            }
        }
        LL ele = n + 1 - ans;
        LL rest = m - (ele * ara[ans].first - cum[ans]);
        LL com = ara[n].first;
        if(ele > 0)com = ara[ans].first + rest/ele;
        com = min(com,A);
        if(i * cf + cm * com > answer){
            answer = i * cf + cm * com;
            vec.clear();
            vec.push_back(i);
            vec.push_back(ans);
            vec.push_back(com);
        }
    }
    cout << answer << "\n";
    for(int i = 1;i <= vec[0];i++){
        pre[ara[i].second] = A;
    }
    for(int i = vec[1];i <= n;i++){
        pre[ara[i].second] = vec[2];
    }
    for(int i = 1;i <= n;i++)cout << pre[i] << " ";
}
