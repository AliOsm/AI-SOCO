#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

#define PB push_back
#define MP make_pair

#define rep(i,n) for(int i=0;i<(n);++i)
#define REP(i,n) for(int i=1;i<=(n);++i)
#define FOR(i,l,h) for(int i=(l);i<=(h);++i)
#define FORD(i,h,l) for(int i=(h);i>=(l);--i)
#define print(expr) cout<<(#expr)<<" : "<<(expr)<<endl
#define tr(it,c) for(VI::iterator it=(c).begin(); it!=(c).end(); ++it)

typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long int64;
typedef pair<int,int> pii;

const int maxn=150050;
const int H=18, M=1<<H;
int n,m,c;
int64 x[maxn], p[maxn], P[maxn]={}, f[maxn];

struct Node{
	int64 min,max,res;
	Node(int64 _min=0, int64 _max=0, int64 _res=0): min(_min),max(_max), res(_res){}
};

Node operator + (Node a,Node b)
{
	Node res;
	res.min=min(a.min,b.min);
	res.max=max(a.max,b.max);
	res.res=max(max(a.res,b.res),b.max-a.min);
	return res;
}

Node seg[M<<2];
inline void upd(int t) { seg[t] = seg[t+t] + seg[t+t+1];}

Node ask(int a,int b)
{
	a=a+M-1, b=b+M+1;
	Node L(1LL<<40,-1LL<<40,0),R(1LL<<40,-1LL<<40,0);
	while(a^b^1)
	{
		if(~a&1) L = L + seg[a^1];
		if( b&1) R = seg[b^1] + R;
		a>>=1; b>>=1;
	}
	return L+R;
}

int main(void)
{
	scanf("%d%d%d",&n,&m,&c);
	REP(i,n) scanf("%d",x+i);
	FOR(i,2,n) scanf("%d",p+i), P[i] = P[i-1] + p[i];
	REP(i,n) f[i] = 50*x[i] - c*P[i];
	REP(i,n)
	{
		seg[i+M] = Node(f[i],f[i],0);
	}
	FORD(i,M-1,1) upd(i);
	int64 ans=0;
	rep(i,m)
	{
		int a,b; scanf("%d%d",&a,&b);
		ans += ask(a,b).res;
	}
	printf("%.20lf\n",(double)ans/100);
	return 0;
}
