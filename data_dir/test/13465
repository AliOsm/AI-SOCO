#include <bits/stdc++.h>
#define base 1000000007LL
#define ll long long
#define X first
#define Y second
#define pb push_back
#define MAXN 210010
#define Scan(a) scanf("%I64d", &a)
#define CLR(a) memset(a,0,sizeof(a))
#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; i++)
#define FORE(i,a,b) for(int i=(a),_b=(b); i>=_b; i--)

using namespace std;

typedef pair<int, int> II;
typedef vector<II> vi;

string s, p;
int z[200010], suffix[1010], prefix[1010], m;

void ZFunction(string s, int n)
{
    int L = 0, R = 0;
    z[0] = s.length();
    FOR(i,1,n-1)
        if (i > R) {
            L = R = i;
            while (R < n && s[R] == s[R-L]) R++;
            z[i] = R-L; R--;
        }
        else {
            int k = i-L;
            if (z[k] < R-i+1) z[i] = z[k];
            else {
                L = i;
                while (R < n && s[R] == s[R-L]) R++;
                z[i] = R-L; R--;
            }
        }
}

int main()
{
    ios::sync_with_stdio(0);
    //freopen("inp.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    cin >> s >> m;
    string S = s;
    reverse(S.begin(), S.end());
    int res = 0;
    FOR(i,1,m) {
        cin >> p;
        if (p.length() > s.length()) continue;
        if (p.length() == 1) continue;
        string x = p + "#" + s;
        int n = x.length();
        ZFunction(x, n);
        FOR(j,1,p.length()) prefix[j] = -1;
        FOR(j,p.length()+1,n-1) {
            int c = z[j];
            if (c && prefix[c] == -1) prefix[c] = j-p.length()-1;
        }
        FORE(j,p.length()-1,1)
            if (prefix[j] == -1 || (prefix[j] > prefix[j+1] && prefix[j+1] != -1)) prefix[j] = prefix[j+1];
        reverse(p.begin(), p.end());
        x = p + "#" + S;
        ZFunction(x, n);
        FOR(j,1,p.length()) suffix[j] = -1;
        FOR(j,p.length()+1,n-1) {
            int c = z[j];
            if (c && suffix[c] == -1) suffix[c] = s.length()-1-(j-p.length()-1);
        }
        FORE(j,p.length()-1,1)
            if (suffix[j] == -1 || suffix[j] < suffix[j+1]) suffix[j] = suffix[j+1];
        FOR(j,1,p.length())
            if (prefix[j] != -1 && suffix[p.length()-j] != -1)
                if (prefix[j]+p.length()-1 <= suffix[p.length()-j]) {
                    res++;
                    break;
                }
    }
    cout << res;
    return 0;
}
