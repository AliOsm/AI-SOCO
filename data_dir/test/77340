// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
//#define endl "\n"
#define mod 1000000007
//#define int long long
#define inf 200000000
const int maxnodes=1005;
#define ll long long
#define N 51
#define EPS 0.01
#define ld long double


int v[N][N];
int vis[N][N];
int n;
int sx,sy;
bool flip = 0;
int check(int x,int y)
{
    return (x >= 0 and x < n and y >= 0 and y < n);
}
int query(int x1,int y1,int x2,int y2)
{
    cout << "? " << 1 + x1 << " " << 1 + y1 << " " << 1 + x2 << " " << 1 + y2 << endl;
    int resp;
    cin >> resp;
    return resp;
}

void make_ans(int x,int y,int val)
{
    if(val != v[x][y])
        flip = 1;
    cout << "!" << endl;
    for(int i = 0;i < n;i++)
    {
        for(int j = 0;j < n;j++)
        {
            if(flip and (i+j) % 2 == 1)
                v[i][j] = !v[i][j];
            cout << v[i][j];
        }
        cout << endl;
    }
    exit(0);
}

int checkans(int x,int y,int a,int b,int c,int d)
{
    if((a^c) == (b^d))
    {
        int resp;
        if(sx + sy < x + y )
            resp = query(sx,sy,x,y);
        else
            resp = query(x,y,sx,sy);
        if(resp)
        {
            return v[sx][sy];
        }
        else
            return !v[sx][sy];

    }
    else
        return  -1;
}

void dfs(int x,int y,int cnt,int a,int b,int c,int d)
{
    // cerr << x << " " << y << " " << cnt << " " << a << " " << b << " " << c << " " << d << endl;
    if(!check(x,y))
        return;
    
    if(cnt == 0)
    {
        dfs(x,y+1,cnt+1,a,b,c,d);
        dfs(x+1,y,cnt+1,a,b,c,d);
    }
    if(cnt == 1)
    {
        dfs(x,y+1,cnt+1,a,v[x][y],c,d);
        dfs(x+1,y,cnt+1,a,v[x][y],c,d);
    }
    if(cnt == 2)
    {
        dfs(x,y+1,cnt+1,a,b,v[x][y],d);
        dfs(x+1,y,cnt+1,a,b,v[x][y],d);
    }
    if(cnt == 3)
    {
        // cerr << sx << " " << sy << " " <<  x << " " << y << " " << b << " " << c << endl;
        int resp = checkans(x,y,a,b,c,v[x][y]);
        if(resp == -1)
            return;
        else
            make_ans(x,y,resp);
    }
}

void dfs2(int x,int y,int cnt,int a,int b,int c,int d)
{
    // cerr << x << " " << y << " " << cnt << " " << a << " " << b << " " << c << " " << d << endl;
    if(!check(x,y))
        return;
    
    if(cnt == 0)
    {
        dfs2(x,y-1,cnt+1,a,b,c,d);
        dfs2(x-1,y,cnt+1,a,b,c,d);
    }
    if(cnt == 1)
    {
        dfs2(x,y-1,cnt+1,a,v[x][y],c,d);
        dfs2(x-1,y,cnt+1,a,v[x][y],c,d);
    }
    if(cnt == 2)
    {
        dfs2(x,y-1,cnt+1,a,b,v[x][y],d);
        dfs2(x-1,y,cnt+1,a,b,v[x][y],d);
    }
    if(cnt == 3)
    {
        // cerr << sx << " " << sy << " " <<  x << " " << y << " " << b << " " << c << endl;
        int resp = checkans(x,y,a,b,c,v[x][y]);
        if(resp == -1)
            return;
        else
            make_ans(x,y,resp);
    }
}

int32_t main()
{
    IOS;
    // #ifndef ONLINE_JUDGE
    // freopen("int.txt","r",stdin);
    // freopen("out.txt","w",stdout);
    // #endif
    memset(vis,0,sizeof(vis));
    memset(v,0,sizeof(v));

    cin >> n;
    queue<pair<int,int>> q;
    q.push({0,0});
    v[0][0] = 1;
    vis[0][0] = 1;
    v[n-1][n-1] = 0;
    vis[n-1][n-1] = 1;
    while(!q.empty())
    {
        pair<int,int> p = q.front();
        q.pop();
        int x = p.first;
        int y = p.second;
        if(check(x+2,y) and !vis[x+2][y])
        {
            v[x+2][y] = v[x][y];
            int resp = query(x,y,x+2,y);
            if(!resp)
                v[x+2][y] = !v[x][y];
            vis[x+2][y] = 1;
            q.push({x+2,y}); 
        }
        if(check(x, y + 2) and !vis[x][y + 2])
        {
            v[x][y + 2] = v[x][y];
            int resp = query(x,y,x,y + 2);
            if(!resp)
                v[x][y + 2] = !v[x][y];
            vis[x][y + 2] = 1;
            q.push({x,y + 2}); 
        }
        if(check(x + 1, y + 1) and !vis[x + 1][y + 1])
        {
            v[x + 1][y + 1] = v[x][y];
            int resp = query(x,y,x + 1,y + 1);
            if(!resp)
                v[x + 1][y + 1] = !v[x][y];
            vis[x + 1][y + 1] = 1;
            q.push({x + 1,y + 1}); 
        }

        if(check(x - 1, y - 1) and !vis[x - 1][y - 1])
        {
            v[x - 1][y - 1] = v[x][y];
            int resp = query(x - 1,y - 1,x,y);
            if(!resp)
                v[x - 1][y - 1] = !v[x][y];
            vis[x - 1][y - 1] = 1;
            q.push({x - 1,y - 1}); 
        }
    }
    q.push({0,1});
    vis[0][1] = 1;
    while(!q.empty())
    {
        pair<int,int> p = q.front();
        q.pop();
        int x = p.first;
        int y = p.second;
        if(check(x+2,y) and !vis[x+2][y])
        {
            v[x+2][y] = v[x][y];
            int resp = query(x,y,x+2,y);
            if(!resp)
                v[x+2][y] = !v[x][y];
            vis[x+2][y] = 1;
            q.push({x+2,y}); 
        }
        if(check(x, y + 2) and !vis[x][y + 2])
        {
            v[x][y + 2] = v[x][y];
            int resp = query(x,y,x,y + 2);
            if(!resp)
                v[x][y + 2] = !v[x][y];
            vis[x][y + 2] = 1;
            q.push({x,y + 2}); 
        }
        if(check(x + 1, y + 1) and !vis[x + 1][y + 1])
        {
            v[x + 1][y + 1] = v[x][y];
            int resp = query(x,y,x + 1,y + 1);
            if(!resp)
                v[x + 1][y + 1] = !v[x][y];
            vis[x + 1][y + 1] = 1;
            q.push({x + 1,y + 1}); 
        }

        if(check(x - 1, y - 1) and !vis[x - 1][y - 1])
        {
            v[x - 1][y - 1] = v[x][y];
            int resp = query(x - 1,y - 1,x,y);
            if(!resp)
                v[x - 1][y - 1] = !v[x][y];
            vis[x - 1][y - 1] = 1;
            q.push({x - 1,y - 1}); 
        }
    }

    for(int i = 0;i < n;i += 2)
    {
        for(int j = 0;j < n;j += 2)
        {
            sx = i;
            sy = j;
            dfs(i,j,0,v[i][j],0,0,0);
            dfs2(i,j,0,v[i][j],0,0,0);
        }
    }
}
    
 
 
 
 