#include <bits/stdc++.h>

using namespace std;

#define sz(a) int(a.size())

char bf [2010];

int vx [2010][2010];
int vy [2010][2010];

bool check (int r, int c, int x, int y, vector <string> &s) {
	if (r < 0 || c < 0 || r >= sz(s) || c >= sz(s[0])) return 0;
	return s[r][c] == '.' && (vx[r][c] < x || vy[r][c] < y);
}


int main () {
	memset(vx, -1, sizeof(vx));
	memset(vy, -1, sizeof(vy));

	int n, m, r, c, x, y;
	scanf("%d%d%d%d%d%d",&n,&m,&r,&c,&x,&y);
	vector <string> s (n);

	for (string &t : s) {
		scanf("%s",bf);
		t = bf;
	}

	queue <pair <int,int> > bfs;
	bfs.push({r-1,c-1});
	vx[r-1][c-1] = x, vy[r-1][c-1] = y;

	while (!bfs.empty()) {
		auto t = bfs.front();
		bfs.pop();
		int tr = t.first, tc = t.second;
		int tx = vx[tr][tc], ty = vy[tr][tc];

		for (int j = tr-1; j >= 0; j--) {
			if (!check(j,tc,tx,ty,s)) break;
			vx[j][tc] = tx;
			vy[j][tc] = ty;
			bfs.push({j,tc});
		}

		for (int j = tr+1; j < sz(s); j++) {
			if (!check(j,tc,tx,ty,s)) break;
			vx[j][tc] = tx;
			vy[j][tc] = ty;
			bfs.push({j,tc});
		}

		if (check(tr,tc+1,tx,ty-1,s) && ty) {
			vx[tr][tc+1] = tx;
			vy[tr][tc+1] = ty-1;
			bfs.push({tr,tc+1});
		}
		if (check(tr,tc-1,tx-1,ty,s) && tx) {
			vx[tr][tc-1] = tx-1;
			vy[tr][tc-1] = ty;
			bfs.push({tr,tc-1});
		}
	}
	int ans = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (vx[i][j] != -1) ans++;
		}
	}
	cout << ans << endl;

}
