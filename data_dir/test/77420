#include <cstdint>
#include <cstdio>
#include <cmath>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cassert>
#include <stack>
#include <set>
#include <sstream>
using namespace std;
 
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef long long Long;


struct Team{
	Long B,W;
	bool operator<(const Team &T)const{
		return B > T.B;
	}
};

int main()
{
	
	int N;
	cin >> N;
	N--;
	vector<Team> V(N);
	Team me;
	cin >> me.B >> me.W;
	for (int i = 0; i < N; ++i) {
		cin >> V[i].B >> V[i].W;
	}
	sort(V.begin(),V.end());
	set<Long> S;
	for(int i = 0; i < N; ++i){
		S.insert(-V[i].B);
	}
	S.insert(0);
	int p = 0;
	int mi = N;
	multiset<Long> NN;
	for(Long b : S){
		b = -b;
		while(p < N && V[p].B > b){
			NN.insert(V[p].W - V[p].B + 1);
			p++;
		}
		while(me.B > b && NN.size()){
			Long d = me.B - b;
			if(*NN.begin() <= d){
				Long given = *NN.begin();
				NN.erase(NN.begin());
				me.B -= given;
			}else{
				break;
			}
		}
		if(me.B >= b){
//			cout << b  << " " << NN.size() << endl;
			mi = min(mi, (int)NN.size());
		}
	}
	cout << mi+1 << endl;
	
	
	
}
/*

4
5 10000
3 10000
7 10000
6 6



 */
