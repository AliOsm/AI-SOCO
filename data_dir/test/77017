#include<iostream>
#include<algorithm>
#include<vector>

#define int long long
#define F first
#define S second

using namespace std;

const int SQ = 800, sq = 700;
vector<pair<int, int> > v[SQ];
int lazy[SQ];
int n, q;


void add(int l, int r, int x)
{
	int sl = l / sq, sr = r / sq;
	if(sl == sr)
	{
		for(int i = 0; i < v[sl].size(); i++)
			if(v[sl][i].S >= l && v[sl][i].S <= r)
				v[sl][i].F += x;
		sort(v[sl].begin(), v[sl].end());
		return;
	}
	for(int i = 0; i < v[sl].size(); i++)
		if(v[sl][i].S >= l)
			v[sl][i].F += x;
	sort(v[sl].begin(), v[sl].end());

	for(int i = sl + 1; i < sr; i++)
		lazy[i] += x;

	for(int i = 0; i < v[sr].size(); i++)
		if(v[sr][i].S <= r)
			v[sr][i].F += x;
	sort(v[sr].begin(), v[sr].end());
}

int get(int y)
{
	int MIN = 1e9, MAX = -1;
	for(int i = 0; i <= (n - 1) / sq; i++)
	{
		pair<int, int> p = {y - lazy[i], -1};
		int l = lower_bound(v[i].begin(), v[i].end(), p) - v[i].begin();
		p = {y - lazy[i], 1e9};
		int r = upper_bound(v[i].begin(), v[i].end(), p) - v[i].begin();
		if(v[i][l].F == y - lazy[i])
		{
			MIN = min(MIN, v[i][l].S);
			MAX = max(MAX, v[i][r - 1].S);
		}
	}
	if(MAX == -1)
		return -1;
	return MAX - MIN;
}

main()
{
	cin >> n >> q;
	for(int i = 0; i < n; i++)
	{
		int a;
		cin >> a;
		v[i / sq].push_back({a, i});
	}
	for(int i = 0; i <= (n - 1) / sq; i++)
		sort(v[i].begin(), v[i].end());
	while(q--)
	{
		int t;
		cin >> t;
		if(t == 1)
		{
			int l, r, x;
			cin >> l >> r >> x;
			l--, r--;
			add(l, r, x);
		}
		else
		{
			int y;
			cin >> y;
			cout << get(y) << endl;
		}
	}
	return 0;
}
