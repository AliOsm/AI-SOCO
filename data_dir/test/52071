#include <bits/stdc++.h>

#define repit(i, v) for(typeof(v.begin()) i = v.begin(); i != v.end(); ++ i)
int a[10], b[10], at, bt, x[8], y[8];
int ans = 0;
std::vector<int> A(5, 0), B(5, 0);
bool square() {
	int seq[4];
	for(int i = 0; i < 4; i ++)
		seq[i] = a[i];
	std::sort(seq, seq + 4);
	bool ret = false;
	do {
		bool flag = true;
		for(int i = 0; i < 3; i ++) {
			int x1 = x[seq[(i + 1) % 4]] - x[seq[i % 4]];
			int y1 = y[seq[(i + 1) % 4]] - y[seq[i % 4]];
			int x2 = x[seq[(i + 2) % 4]] - x[seq[(i + 1) % 4]];
			int y2 = y[seq[(i + 2) % 4]] - y[seq[(i + 1) % 4]];
			if(x1 * x1 + y1 * y1 != x2 * x2 + y2 * y2)
				flag = false;
			if(x1 * x1 + y1 * y1 == 0 || x2 * x2 + y2 * y2 == 0)
				flag = false;
			if(x1 * x2 + y1 * y2 != 0)
				flag = false;
			if(!flag)
				break;
		}
		if(flag) {
			ret = true;
			break;
		}
	}while(std::next_permutation(seq, seq + 4));
	return ret;
}

bool rec() {
	int seq[4];
	for(int i = 0; i < 4; i ++)
		seq[i] = b[i];
	std::sort(seq, seq + 4);
	bool ret = false;
	do {
		bool flag = true;
		for(int i = 0; i < 3; i ++) {
			int x1 = x[seq[(i + 1) % 4]] - x[seq[i % 4]];
			int y1 = y[seq[(i + 1) % 4]] - y[seq[i % 4]];
			int x2 = x[seq[(i + 2) % 4]] - x[seq[(i + 1) % 4]];
			int y2 = y[seq[(i + 2) % 4]] - y[seq[(i + 1) % 4]];
			if(x1 * x1 + y1 * y1 == 0 || x2 * x2 + y2 * y2 == 0)
				flag = false;
			if(x1 * x2 + y1 * y2 != 0)
				flag = false;
			if(!flag)
				break;
		}
		if(flag) {
			ret = true;
			break;
		}
	}while(std::next_permutation(seq, seq + 4));
	return ret;
}
void dfs(int i) {
	if(ans)	return;
	if(i == 8) {
		if(at != bt || at != 4)	return;
		if(square() && rec()) {
			for(int j = 0; j < 4; j ++)
				A[j] = a[j], B[j] = b[j];
			ans = 1;
		}
		return;
	}
	a[at ++] = i;
	dfs(i + 1);
	at --;
	b[bt ++] = i;
	dfs(i + 1);
	bt --;
}

int main() {
	int n = 8;
	for(int i = 0; i < n; i ++) {
		scanf("%d%d", x + i, y + i);
	}
	dfs(0);
	if(ans == 0)
		puts("NO");
	else {
		puts("YES");
		for(int i = 0; i < 4; i ++)
			printf("%d ", A[i] + 1);
		puts("");
		for(int i = 0; i < 4; i ++)
			printf("%d ", B[i] + 1);
		puts("");
	}
	return 0;
}


