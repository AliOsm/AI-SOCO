#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
const ld PI=acos(-1);
struct Circle{
	ll r,x,y;
	bool operator<(const Circle& rhs) const{
		return r<rhs.r;
	}
} circle[1010];
int par[1010];
ll dp[1010][2][2];
vector<int> g[1010];
inline bool check(Circle& a,Circle& b){
	return a.r*a.r>=(a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);
}
void dfs(int u){
	ll sum[2][2]={0};
	for(int& v:g[u]){
		dfs(v);
		for(int i=0;i<2;i++)
			for(int j=0;j<2;j++)
				sum[i][j]+=dp[v][i][j];
	}
	for(int i=0;i<2;i++){
		for(int j=0;j<2;j++){
			dp[u][i][j]=max(sum[i^1][j]+circle[u].r*circle[u].r*(i==0?-1:1),sum[i][j^1]+circle[u].r*circle[u].r*(j==0?-1:1));
		}
	}
}
int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int N;
	ll x,y,r;
	cin>>N;
	for(int i=1;i<=N;i++){
		cin>>x>>y>>r;
		circle[i]=(Circle){r,x,y};
	}
	sort(circle+1,circle+1+N);
	for(int i=1;i<=N;i++){
		par[i]=-1;
		for(int j=1;j<i;j++){
			if(par[j]==-1 && check(circle[i],circle[j])){
				g[i].push_back(j);
				par[j]=i;
			}
		}
	}
	ll ans=0;
	for(int i=1;i<=N;i++){
		if(par[i]==-1){
			dfs(i);
			ans+=dp[i][1][1];
		}
	}
	cout<<fixed<<setprecision(13)<<(ld)ans*PI<<'\n';
	return 0;
}