#include <iostream>
#include <vector>
#include <cstdio>
#include <queue>
#include <algorithm>
#include <cassert>
#include <map>
#include <tuple>
#include <cmath>
#include <complex>
#include <set>
#include <cstring>
#include <numeric>
using namespace std;
typedef long long Long;
typedef long double Double;
typedef long long Long;
typedef vector<Long> VL;
typedef pair<Long, Long> PLL;

struct DisjointSet
{
	vector<int> E;
	vector<int> P; // if < 0 then negative size, else parentId
	DisjointSet(int N) : P(N, -1) {}
	int find(int x) {
		return P[x] < 0 ? x : (P[x] = find(P[x]));
	}
	bool join(int x,int y) {
		if((x = find(x)) == (y = find(y))) return false;
		E.push_back(x);
		E.push_back(y);
		if(P[y] < P[x]) swap(x,y);
		P[x] += P[y];
		P[y] = x;
		return true;
	}
	void clear() {
		for (int v : E) {
			P[v] = -1;
		}
		E.clear();
	}
};

struct Edge {
	int u, v;
	Long x;
	bool operator<(const Edge &e) const {
		return x < e.x;
	}
};
#define MOD 1000000007
int mp(Long b, Long e) {
	if (e == 0) return 1;
	Long sq = mp(b, e / 2);
	sq = (sq * sq) % MOD;
	return (e & 1) ? (sq * b) % MOD : sq;
}
int mult(int a, int b) {
	return (1LL*a*b) % MOD;
}

int main() {

	int N, M, K;
	cin >> N >> M >> K;
	VL V(N);
	for (int i = 0; i < N; ++i) {
		scanf("%lld", &V[i]);
	}
	vector<Edge> E;
	for (int i = 0; i < M; ++i) {
		int u, v;
		scanf("%d%d", &u, &v);
		u--;v--;
		Long x = V[u] ^ V[v];
		E.push_back({u, v, x});
	}
	sort(E.begin(), E.end());
	int sz = 0;
	DisjointSet DS(N);
	Long cnt = 0;
	for (int i = 0; i < M; ++i) {
		int n = N;
		DS.clear();
		for (int j = i; j < M && E[i].x == E[j].x; ++j) {
			n -= DS.join(E[j].u, E[j].v);
			i = j;
		}
		sz++;
		cnt = (cnt + mp(2, n)) % MOD;
	}
	cnt = (cnt + mult( (mp(2, K) - sz + MOD) % MOD, mp(2, N))) % MOD;
	cout << cnt << endl;
	
	

}

/*

40 -> (20)

 */
