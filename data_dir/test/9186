#include<bits/stdc++.h>

using namespace std;

#define LL long long
#define DD double
#define Pb push_back
#define Bp pop_back
#define Pf push_front
#define Fp pop_front
#define Ub upper_bound
#define Lb lower_bound
#define In insert
#define All(x) x.begin(), x.end()
#define mem(a, b) memset(a, b, sizeof(a))
#define fast ios_base::sync_with_stdio(0);cin.tie(0)
#define X first
#define Y second
#define mx1 10
#define mx2 110
#define mx3 1010
#define mx4 10010
#define mx5 100010
#define mx6 1000010

typedef vector<LL> Vl;
typedef vector<DD> Vd;
typedef vector<bool> Vb;
typedef vector<Vl> VVl;
typedef pair<LL, LL> Pll;
typedef pair<DD, DD> Pdd;
typedef vector<Pll> Vpl;
typedef vector<Pdd> Vpd;
typedef queue<LL> Ql;
typedef stack<LL> Sl;
typedef deque<LL> Dl;

LL _set(LL N, LL pos) {return N = N | (1 << pos);}
LL _reset(LL N, LL pos) {return N = N & ~(1 << pos);}
bool _check(LL N, LL pos) {return (bool)(N & (1 << pos));}
bool _upper(char a) {return a >= 'A' && a <= 'Z';}
bool _lower(char a) {return a >= 'a' && a <= 'z';}
bool _digit(char a) {return a >= '0' && a <= '9';}

LL dx[] = {1, -1, 0, 0, -1, -1, 1, 1};
LL dy[] = {0, 0, 1, -1, -1, 1, -1, 1};

///**************************DONE****************************///

LL a[2 * mx4][2 * mx2];
LL g[2 * mx4][2 * mx2];
LL vis[2 * mx2];
LL has[2 * mx2];
VVl G(2 * mx2);
Vl ans;

void dfs(LL u)
{
    vis[u] = 1;
    ans.Pb(u);

    for(auto i: G[u]){
        if(!vis[i])
            dfs(i);
    }
}

int main()
{
    LL n;
    cin >> n;

    if(n == 2){
        LL k;
        cin >> k;

        LL x;
        cin >> x;
        cout << "1 " << x << '\n' << k - 1 << ' ';

        for(LL i = 1; i < k; i++)
            cin >> x, cout << x << ' ';
        return 0;
    }

    LL N = n * (n - 1) / 2;
    for(LL i = 0; i < N; i++){
        LL k;
        cin >> k;

        for(LL j = 0; j < k; j++){
            cin >> a[i][j];

            has[a[i][j]] = 1;
            for(LL w = 0; w < j; w++)
                g[a[i][j]][a[i][w]]++, g[a[i][w]][a[i][j]]++;
        }
    }

    for(LL i = 1; i <= 200; i++){
        for(LL j = 1; j <= 200; j++){
            if(g[i][j] == n - 1)
                G[i].Pb(j), G[j].Pb(i);
        }
    }

    for(LL i = 1; i <= 200; i++){
        if(has[i] && !vis[i]){
            ans.clear();

            dfs(i);
            cout << ans.size() << ' ';
            for(auto j: ans)
                cout << j << ' ';
            cout << '\n';
        }
    }

    return 0;
}
