#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

const int N = 1e5 + 10;
char s[N], t[N];

int f[30];
int find(int x) {
  if (f[x] != f[f[x]]) f[x] = find(f[x]);
  return f[x];
}

int main() {
  int n;
  scanf("%d", &n);
  scanf("%s%s", s, t);
  for (int i = 0; i < 26; ++i) f[i] = i;
  vector<ii> ret;
  for (int i = 0; i < n; ++i) {
    if (s[i] != t[i]) {
      int x = s[i] - 'a';
      int y = t[i] - 'a';
      int rx = find(x), ry = find(y);
      if (ry != rx) {
        f[ry] = rx;
        ret.push_back({x, y});
      }
    }
  }
  printf("%d\n", (int)ret.size());
  for (int i = 0; i < ret.size(); ++i) {
    printf("%c %c\n", (char)(ret[i].first + 'a'), (char)(ret[i].second + 'a'));
  }
  return 0;
}
