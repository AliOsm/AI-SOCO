#include<bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
using namespace std;

#define fr first
#define sc second
#define memset(X,Y) memset(X,Y,sizeof X)
#define all(X) X.begin(),X.end()
#define SZ size()
#define mp make_pair
#define pb push_back
#define Pb pop_back

#define error(args...){vector<string> _v = split(#args,','); err(_v.begin(),args); }
vector <string> split(const string &s,char c)
{
    vector<string> v;
    stringstream ss(s);
    string x;
    while(getline(ss,x,c))
        v.emplace_back(x);
    return move(v);
}
void err(vector<string>:: iterator it) {}
template<typename T,typename ... Args>
void err(vector<string>::iterator it, T a, Args ... args)
{
    cerr << it->substr((*it)[0] == ' ',it->length())
         << " = " << a <<" " ;
    err(++it,args...);
}
template <typename T>
using order_set = tree<T, null_type, less<T>, rb_tree_tag,
      tree_order_statistics_node_update>;

typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<ll,pii> pl;
typedef vector<int> vi;
typedef vector<ll> vll;
double pi = acos(-1);
const ll N = (1e5) + 10 , M = 111 , mod=1e9 + 7 , K = 4 * N;
ll OOL = 1e18;
int OO = 1e9;
ll n,a[N],ans;
ll fa[N],fb[N],suf[N];
int main(){
    cin >> n;
    for(int i=1;i<=n;i++){
        cin>>a[i];
    }
    for(int i=n;i>0;i--){
        suf[i]=suf[i + 1];
        if(!fa[a[i]])
            suf[i]++;
        fa[a[i]]=1;
    }
    for(int i=1;i<=n-1;i++){
        if(!fb[a[i]])
            ans+=suf[i+1];
        fb[a[i]]=1;
    }
    cout<<ans;
}