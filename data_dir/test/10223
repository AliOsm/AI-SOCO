#define _USE_MATH_DEFINES
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <cmath>
#include <bitset>
#include <string>
#include <map>
#include <queue>
#include <hash_map>
#include <hash_set>
#include <cstring>
#include <climits>
using namespace std;

#define uint64 unsigned int64
#define int64 long long
#define rep(i, n) f(i, 0, n - 1)
#define f(i, a, b) fd(i, a, b, 1)
#define fd(i, a, b, d) for(int i = (a); i <= (int)(b); i += (d))

#ifndef ONLINE_JUDGE
#include <time.h>
clock_t _time;
void startProfile()
{
  _time = clock();
  cout << "Begin profiling..\n...\n";
}
void stopProfile()
{
  cout << "\n...\nEnd profiling. Time: %f sec.\n", (double)(clock() - _time) / CLOCKS_PER_SEC;
}
#endif

int divCount(int num, int div)
{
  int result = 0;
  while (num != 0 && num % div == 0)
  {
    result++;
    num /= div;
  }
  return result;
}

string buildPath(const vector<vector<int> > &c, const int n)
{
  int i, j;
  i = j = n - 1;
  vector<char> path(2 * n - 2);
  while(i != 0 or j != 0)
  {
    if(j == 0)
    {
      path[i + j - 1] = 'D';
      i--;
    }
    else if(i == 0)
    {
      path[i + j - 1] = 'R';
      j--;
    }
    else if(c[i - 1][j] < c[i][j - 1])
    {
      path[i + j - 1] = 'D';
      i--;
    }
    else
    {
      path[i + j - 1] += 'R';
      j--;
    }
  }
  return string(path.begin(), path.end());
}

int findPath(const vector<vector<int> > &a, int n, int k, string& path)
{
  vector<vector<int> > c(n);
  rep(i, n)
    c[i] = vector<int>(n);
  rep(i, n) rep(j, n)
    c[i][j] = divCount(a[i][j], k);
  f(i, 1, n - 1)
  {
    c[i][0] += c[i - 1][0];
    c[0][i] += c[0][i - 1];
  }
  f(i, 1, n - 1) f(j, 1, n - 1)
    c[i][j] += min(c[i - 1][j], c[i][j - 1]);

  path = buildPath(c, n);
  return c[n - 1][n - 1];
}

void checkZero(const vector<vector<int> > &a, int n, int& zeroCount, string& path)
{
  rep(i, n) rep(j, n)
  {
    if(a[i][j] == 0)
    {
      zeroCount = 1;
      path = string(j, 'R') + string(n - 1, 'D') + string(n - j - 1, 'R');
      return;
    }
  }
}

int main()
{
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  //freopen("output.txt", "w", stdout);
  startProfile();
#endif

  iostream::sync_with_stdio(false);

  int n;
  cin >> n;
  cin.get();

  vector<vector<int> > a(n);
  rep(i, n)
  {
    a[i] = vector<int>(n);
    rep(j, n)
    {
      cin >> a[i][j];
    }
  }

  string path, path2, path5;
  int minTwos = findPath(a, n, 2, path2);
  int minFives = findPath(a, n, 5, path5);
  int zeroCount;
  if(minTwos < minFives)
  {
    zeroCount = minTwos;
    path = path2;
  }
  else
  {
    zeroCount = minFives;
    path = path5;
  }

  if(zeroCount > 1)
    checkZero(a, n, zeroCount, path);

  cout << zeroCount << endl << path;


#ifndef ONLINE_JUDGE
  stopProfile();
#endif
  return 0;
}
