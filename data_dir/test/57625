#include<bits/stdc++.h>
#define ll long long
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define BS binary_search
#define SIZE 2000100
#define MOD 1000000009LL
#define bpc __builtin_popcount

using namespace std;

inline ll getnum()
{
    char c = getchar();
    ll num,sign=1;
    for(;c<'0'||c>'9';c=getchar())if(c=='-')sign=-1;
    for(num=0;c>='0'&&c<='9';)
    {
        c-='0';
        num=num*10+c;
        c=getchar();
    }
    return num*sign;
}

int dp[200004][2];//0 parent first//1 child first
vector<int> V[200005],Me[200005],Them[200005],Any[200005],ans;
int pos=1;

void dfs(int n,int p)
{
    for(int i=0;i<V[n].size();i++)
    {
        int x=V[n][i];
        if(x-p)
        {
            dfs(x,n);
            if(dp[x][0]&&!dp[x][1])Me[n].pb(x);
            if(dp[x][1]&&!dp[x][0])Them[n].pb(x);
            if(dp[x][1]&&dp[x][0])Any[n].pb(x);
        }
    }

    if((V[n].size()-Them[n].size())%2)
    {
        dp[n][0]=1;
        if(Any[n].size())dp[n][1]=1;
    }
    else
    {
        dp[n][1]=1;
        if(Any[n].size())dp[n][0]=1;
    }
}

void ddfs(int n,int state)
{
    int rem=V[n].size()-state;

    for(int i=0;i<Them[n].size();i++)ddfs(Them[n][i],0),rem--;

    if(rem%2)
    {
        ddfs(Any[n].back(),0);
        Any[n].pop_back();
    }

    ans.pb(n);

    for(int i=0;i<Any[n].size();i++)ddfs(Any[n][i],1);
    for(int i=0;i<Me[n].size();i++)ddfs(Me[n][i],1);
}

int main()
{
    int n=getnum();

    for(int i=1;i<=n;i++)
    {
        int x=getnum();
        if(x)V[x].pb(i),V[i].pb(x);
    }

    dfs(1,0);

    if(dp[1][1])
    {
        printf("YES\n");

        ddfs(1,0);
        
        for(int i=0;i<ans.size();i++)printf("%d\n",ans[i]);
    }
    else printf("NO\n");

}