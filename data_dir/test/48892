// This is the second practice implementation done so as to confirm that everything learnt here has sinked into
// the brain completely. For better implementation ; view previous AC submission !


#include<bits/stdc++.h>
using namespace std;

# define C continue;
# define R return

# define D double
# define I insert
# define ll long long
# define ld long double

# define ull unsigned long long
# define ui unsigned int

# define pb push_back
# define pf push_front

# define vi vector < int >
# define vc vector < char >
# define vs vector < string >
# define vb vector < bool >
# define vd vector < D >
# define vll vector < ll >
# define vull vector < ull >
# define vld vector < ld >

# define vvi vector < vector < int > >
# define vvb vector < vector < bool > >
# define vvc vector < vector < char > >
# define vvll vector < vector < ll > >
# define vvd vector < vector < D > >
# define vvld vector < vector < ld > >

# define all(v) (v).begin() , (v).end()
# define allrev(v) (v).rbegin() , (v).rend()
# define allcomp(v) v.begin() , v.end() , comp
# define allrevcomp(v) v.rbegin() , v.rend() , comp

# define pii pair < int , int >
# define pll pair < ll , ll >
# define pld pair < ld , ld >
# define pDD pair < D , D >

# define vpld vector < pld >
# define vpii vector < pii >
# define vpll vector < pll >
# define vpDD vector < pDD >

# define vvpii vector < vector < pii > >
# define F first
# define S second
# define mp make_pair

# define fast ios_base::sync_with_stdio(false) ; cin.tie(0) ; cout.tie(0);
# define dist(a,b,p,q) sqrt((p-a)*(p-a) + (q-b)*(q-b))

# define pp(n) printf("%.10Lf",n);
# define line cout<<"\n";

string vow = "aeiou";

const int dxhorse[] = {-2, -2, -1, -1, 1, 1, 2, 2};
const int dyhorse[] = {1, -1, 2, -2, 2, -2, 1, -1};

const int dx[] = { -1 , 0 , 0 , 1 } ;
const int dy[] = { 0 , -1 , 1 , 0 } ;

const ld pie = 3.14159265358979 ;
const ll mod = 1e9 + 7 ;

void solve ( int test_case )
{
    int n , k ;
    cin >> n >> k ;

    vll v ( n + 1 ) ;
    for ( int i=1 ; i < n + 1 ; i++ )
    {
        cin >> v[i] ;
        v[i] += v[i-1] ;
    }

    vll sum ( n + 1 ) ; // window_sum
    for ( int i=k ; i < n + 1 ; i++ )
        sum[i] = v[i] - v[i-k] ;

    vll maxx ( n + 1 ) ;
    for ( int i = k ; i < n + 1 ; i++ )
        maxx[i] = max ( maxx[i-1] , sum[i] ) ;

    ll ans = LLONG_MIN ;
    ll w ; // stores the value of the max window uptil i-1.

    int r ;
    for ( int i=k+1 ; i+k-1 < n + 1 ; i++ )
    {
        ll temp = sum[i+k-1] + maxx[i-1] ;
        if ( temp > ans )
            ans = temp , r = i , w = maxx[i-1] ;
    }

    int l = 1 ;
    for ( ; sum[l] != w ; l++ ) ;

    l = l-k+1 ;
    cout << l << " " << r ; line

}

int main()
{
    int t = 1;
    //cin >> t;

    for ( int i=0 ; i < t ; i++ ) solve(i);
    return 0;
}
