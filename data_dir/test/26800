#define _CRT_SECURE_NO_WARNINGS
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <fstream>
#include <map>
#include <set>
#include <queue>
#include <memory.h>
#include <memory.h>
#include <time.h>
#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <algorithm>
#include <cstdio>
#include <set>
#include <queue>
#include <cassert>
#include <climits>
#define sz(x) int((x).size())
#define FOR(i,a,b) for(ll(i) = (a); (i) <= (b); ++(i))
#define ROF(i,a,b) for(ll(i) = (a); (i) >= (b); --(i))
#define rep(i,n) for (int(i) = 0; (i) < (n); ++(i))
#define fe(i,a) for (ll(i) = 0; (i) < int((a).size()); ++(i))
#define C(a) memset((a),0,sizeof(a))
#define pb push_back
#define ppb pop_back
#define all(c) (c).begin(), (c).end()
#define sqr(a) (a)*(a)
#define mp(a,b) make_pair((a), (b))
#define X first
#define Y second
#define file freopen("input.txt","r",stdin)
#define file2 freopen("output.txt", "w",stdout)
#define text freopen("input.txt","r",stdin); freopen("output.txt", "w",stdout)
using namespace std;
typedef vector<int> vint;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pii;
#define y1 vamdlsfmvldf
using namespace std;
const int mod = (int)1e9 + 7;
const long double INF = (long double)(1e3);
const int N = 100005;
const double PI = acos(-1.0);
const double eps = 1e-9;
int main()
{
    double y1, y2, yw, xb, yb, r;
    while (cin>> y1 >> y2 >> yw >> xb >> yb >> r)
    {
        double yr = yw - r;
        double my1 = yr + (yr - y1);
        double my2 = yr + (yr - y2);

        double aim_y = my1 - r;
        double inc_y = (aim_y - yb) / xb;
        double xw = (aim_y - yr) / inc_y;

        double a = PI / 2 - atan2(aim_y - yb, xb);
        double d = r / sin(a);
        if (aim_y - d < my2)
            puts("-1");
        else
            printf("%.10f\n", xw);
    }
}
