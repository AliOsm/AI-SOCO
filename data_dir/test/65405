#include <bits/stdc++.h>
using namespace std;

int main() {
#ifdef LOCAL_DEFINE
	freopen("data.in", "rt", stdin);
	// freopen("data.out", "w", stdout);
	auto _start = chrono::high_resolution_clock::now();
#endif

	ios::sync_with_stdio(false);
	cin.tie(0);
	cout << fixed << setprecision(15);
	int n, k, A, B;
	cin >> n >> k >> A >> B;
	vector<int> a(k);
	for (int i = 0; i < k; i++) {
		cin >> a[i];
		a[i]--;
	}
	sort(a.begin(), a.end());
	function<long long(int, int)> dfs = [&](int l, int r) {
		int na = lower_bound(a.begin(), a.end(), r) - lower_bound(a.begin(), a.end(), l);
		if(na == 0) {
			return 1ll * A;
		}
		if (r - l >= 2) {
			long long res = dfs(l, (l + r) >> 1) + dfs((l + r) >> 1, r);
			if (na > 0) {
				res = min(res, 1ll * B * na * (r - l));
			} else {
				res = min(res, 1ll * A);
			}
			return res;
		} else {
			if (na > 0) {
				return 1ll * B * na * (r - l);
			} else {
				return 1ll * A;
			}
		}
	};
	cout << dfs(0, 1 << n) << '\n';

#ifdef LOCAL_DEFINE
	auto _end = chrono::high_resolution_clock::now();
	cerr << "elapsed time: " << chrono::duration<double, milli>(_end - _start).count() << " ms\n";
#endif
	return 0;
}