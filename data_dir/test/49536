#include <bits/stdc++.h>
using namespace std;

vector<vector<int>> g;

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);
  int n, m; cin >> n >> m;
  g.assign(n, {});
  for (int i = 0; i < m; ++i) {
    int u, v; cin >> u >> v;
    --u, --v;
    g[u].push_back(v);
    g[v].push_back(u);
  }
  set<int> S;
  for (int i = 0; i < n; ++i) sort(g[i].begin(), g[i].end()), S.insert(i);
  int ans = 0;
  while (S.size()) {
    int u = *S.begin(); S.erase(S.begin());
    ++ans;
    queue<int> q;
    q.push(u);
    while (q.size()) {
      int u = q.front(); q.pop();
      while (S.size() and (g[u].empty() or *S.begin() < g[u][0])) {
        q.push(*S.begin());
        S.erase(S.begin());
      }
      for (int v : g[u]) {
        while (S.upper_bound(v) != S.end() and 
               not binary_search(g[u].begin(), g[u].end(), *S.upper_bound(v))) {
          auto it = S.upper_bound(v);
          q.push(*it);
          S.erase(it);
        }
      }
    }
  } 
  cout << ans - 1 << '\n';
}
