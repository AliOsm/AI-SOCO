#include <bits/stdc++.h>
#define x first
#define y second
#define pb push_back
#define mp make_pair
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define all(v) v.begin(),v.end()
#define boost ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0)

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<int,ll> pil;
typedef pair<ll,int> pli;
typedef pair<ll,ll> pll;

const ll INF=1e18;
const int inf = 2e9;
const ll mod = 1e8;
const ld pi = acos(-1);
const int dx[4]={0,0,1,-1};
const int dy[4]={1,-1,0,0};
void add(int &a,int b){
	a+=b;
	if(a>=mod)a-=mod;
}
const int N = 1e5+5;
const ll M=2e5+1;
const int K=sqrt(1e5);

vector<int>g[N];
int lvl[N],up[N][21],tin[N],tout[N],timer,d[N],k;

void dfs(int v,int p){
	tin[v]=++timer;
	up[v][0]=p;
	lvl[v]=lvl[p]+1;
	for(int i=1;i<=17;i++){
		up[v][i]=up[up[v][i-1]][i-1];
	}
	for(int i=0;i<sz(g[v]);i++){
		int to=g[v][i];
		if(to!=p)dfs(to,v);
	}
	tout[v]=timer;
}

bool upper(int a,int b){
	return tin[a]<=tin[b]&&tout[a]>=tout[b];
}

int lca(int a,int b){
	if(upper(a,b))return a;
	if(upper(b,a))return b;
	for(int i=17;i>=0;i--){
		if(!upper(up[a][i],b)){
			a=up[a][i];
		}
	}
	return up[a][0];
}

int dist(int x,int y){
	int l=lca(x,y);
	return lvl[x]+lvl[y]-2*lvl[l];
}

int main(){
	boost;
	int n,m;
	cin>>n>>m;
	for(int i=1;i<n;i++){
		int u,v;
		cin>>u>>v;
		g[u].pb(v);
		g[v].pb(u);
	}
	dfs(1,1);
	k=sqrt(m);
	vector<pii>q[m/k+3];
	for(int i=1;i<=m;i++){
		int t,x;
		cin>>t>>x;
		q[i/k].pb(mp(t,x));	
	}
	d[1]=0;
	set<pii>s;
	for(int i=1;i<=n;i++){
		d[i]=dist(1,i);
	}
	for(int i=0;i<=m/k;i++){
		vector<int>v;
		for(int j=0;j<sz(q[i]);j++){
			if(q[i][j].x==1)v.pb(q[i][j].y);
			else{
				int ans=d[q[i][j].y];
				for(int z=0;z<sz(v);z++){
					int u=v[z];
					ans=min(ans,dist(u,q[i][j].y));
				}
				cout<<ans<<"\n";
			}
		}
		for(int j=0;j<sz(v);j++)s.insert(mp(0,v[j])),d[v[j]]=0;
		while(!s.empty()){
			pii p=*s.begin();
			s.erase(p);
			int ve=p.y;
			for(int j=0;j<sz(g[ve]);j++){
				int to=g[ve][j];
				if(d[to]>d[ve]+1){
					s.erase(mp(d[to],to));
					d[to]=d[ve]+1;
					s.insert(mp(d[to],to));
				}
			}
		}
	}
}
