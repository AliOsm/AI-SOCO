#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define pi pair<int,int>
#define pl pair<ll,ll>
const int N = 1e5+15,MAXI = 1e8;


vector<int> adj[N];

int chsz[N],a[N],parent[N];

ll gcd(ll a,ll b){
    if(a==0)return b;
    return gcd(b%a,a);
}

ll lcm(ll a,ll b){
    ll R= a*b;
    R/= gcd(a,b);
    return R;
}
ll cur[N];

ll sum= 0;

void dfs(int root,int par){
    bool is = 0;
    ll R;
    for(auto ch : adj[root]){
        if(ch==par)continue;
        ++chsz[root];
        parent[ch]= root;
        dfs(ch,root);
        if(!is){
            R = cur[ch];
            is = 1;
        }
        else{
            R= lcm(R,cur[ch]);
            if(R>MAXI){
                cout<<sum<<endl;
                exit(0);
            }
        }

    }

    if(chsz[root]==0){
        cur[root]= 1;
    }
    else{
        cur[root]= R*chsz[root];
        if(R>MAXI){
                cout<<sum<<endl;
                exit(0);
        }
    }
}

int main(){
    //freopen("input.txt","r",stdin);
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;++i)scanf("%d",&a[i]),sum += a[i];
    for(int i=0;i<n-1;++i){
        int x,y;
        scanf("%d%d",&x,&y);
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
    dfs(1,0);

    ll X = cur[1];
    queue<pair<int,ll> >q;
    q.push(make_pair(1,X));

    ll R = MAXI;

    while(!q.empty()){
        int node = q.front().first;
        X= q.front().second;

        q.pop();
        if(chsz[node]==0){
            R= min(R, a[node]/X);
        }
        else{
            X/=chsz[node];
            for(auto ch : adj[node]){
                if(ch==parent[node])continue;
                q.push(make_pair(ch,X));
            }
        }
    }
    cout<<sum-cur[1]*R<<endl;
}