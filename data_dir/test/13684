#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long 

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << endl;
        //use cerr if u want to display at the bottom
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define trace(...)
#endif

typedef trie<string,null_type,trie_string_access_traits<>,pat_trie_tag,trie_prefix_search_node_update> pref_trie;
typedef tree<long int,null_type,less<long int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
typedef cc_hash_table<long int,long int, hash<long int>, equal_to<long int>, direct_mask_range_hashing<long int>, 
hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;

long int possible(long int start, vector<pair<long int,long int>> &v, long int n){
		for(long int i = 0; i < n; i++){
			long int startDivision = (start >= 1900) ? 1 : 2;
			long int expectedStartDivison = v[i].second;
			start += v[i].first;
			if(startDivision > expectedStartDivison)
					return 1;
			else if(startDivision < expectedStartDivison)
					return -1;
		}
		return 0;
}

int main(){
   IOS;
 //    #ifndef ONLINE_JUDGE
 //        freopen("in.txt",  "r",  stdin);
 //        freopen("out.txt", "w", stdout);
 //    #endif
   
   	long int n;
   	cin>>n;

   	vector<pair<long int,long int>> v(n);
   	bool div2 = false;
   	long int sum = 0;
   	for(long int i = 0; i < n; i++){
   		cin>>v[i].first>>v[i].second;
   		if(v[i].second == 2)
   			div2 = true;
   		sum += v[i].first;
   	}

   	if(!div2)
   		return cout<<"Infinity",0;

   	long int start = -1e18, end = 1e18, ans = -1e18;
   	while(start <= end){
   		long int currentRating = (start + end) / 2;
   		long int guide = possible(currentRating,v,n);
   		// trace(currentRating,guide);
   		if(guide == 1)
   			start = currentRating + 1;
   		else if(guide == -1)
   			end = currentRating - 1;
   		else{
   				ans = currentRating;
   				start = currentRating + 1;
   		}
   	}

   	if(ans == -1e18)
   		cout<<"Impossible";
   	else
   		cout<<ans + sum;

   return 0;
}