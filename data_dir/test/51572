#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

bool dp[2][10][10][10][10];

bool func(int x1, int y1, int x2, int y2){
    if(x1 <= x2 && y1 <= y2) return true;
    if(x1 + y1 <= max(x2, y2)) return true;
    return false;
}

int dx[] = {0,-1,-1}, dy[] = {-1,0,-1};

int main(void){
    int p,i,j,k,l,d;
    
/*  REP(i,10) REP(j,10) REP(k,10) REP(l,10) if(i != k || j != l){
        // p = 0
        if(i == 0 && j == 0) dp[0][i][j][k][l] = true;
        if(k != 0 || l != 0){
            if(i > 0 && (i-1 != k || j != l) && !dp[1][i-1][j][k][l]) dp[0][i][j][k][l] = true;
            if(j > 0 && (j-1 != l || i != k) && !dp[1][i][j-1][k][l]) dp[0][i][j][k][l] = true;
        }
        
        // p = 1
        if(k == 0 && l == 0) dp[1][i][j][k][l] = true;
        if(i != 0 || j != 0){
            int k2,l2;
            REP(d,3){
                int k2 = k + dx[d], l2 = l + dy[d];
                if(k2 >= 0 && l2 >= 0 && (k2 != i || l2 != j) && !dp[0][i][j][k2][l2]) dp[1][i][j][k][l] = true;
            }
        }
    }
    
    cout << dp[0][0][1][0][0] << endl;
    
    REP(i,10) REP(j,10) REP(k,10) REP(l,10) if(i != k || j != l) if(func(i, j, k, l) != dp[0][i][j][k][l]) cout << "A" << i << ' ' << j << ' ' << k << ' ' << l << endl; */
    
    int x1,y1,x2,y2;
    cin >> x1 >> y1 >> x2 >> y2;
    bool ans = func(x1, y1, x2, y2);
    cout << (ans ? "Polycarp" : "Vasiliy") << endl;
    
    return 0;
}
