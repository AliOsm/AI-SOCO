#include "omp.h"
#include <iostream>
#include <iomanip>
#include <string>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <vector>
#include <cassert>
#include <fstream>
#include <algorithm>
#include <list>
#include <random>
#include <ctime>
#include <random>
#include <bitset>
#include <unordered_set>
#include <cassert>
#include <list>


using namespace std;

typedef long long ll;
typedef long double ld;


const int sze = 1e6 + 1;
int counting[sze], cur_counting[sze];


signed main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int mx = 0;

	int t;
	cin >> t;
	for (int i = 0; i < t; ++i)
	{
		int a;
		cin >> a;
		counting[a]++;
		mx = max(mx, a);
	}

	if (counting[0] > 1)
	{
		cout << "-1\n";
		return 0;
	}

	vector<int> dividers;
	dividers.reserve(200);
	for (int i = 1; i * i <= t; ++i)
	{
		if (!(t % i))
		{
			dividers.push_back(i);
			dividers.push_back(t / i);
		}
	}

	sort(dividers.begin(), dividers.end());
	dividers.erase(unique(dividers.begin(), dividers.end()), dividers.end());

	int boder = 1;
	while (counting[boder] == (boder << 2))
		boder++;

	for (int n : dividers)
	{
		int cnt = 0;
		for (int i = 0; i < sze; ++i)
		{
			cur_counting[i] = counting[i];
			if (counting[i])
				cnt++;
		}


		int m = t / n;

		int **maps = new int*[n];
		for (int i = 0; i < n; ++i)
			maps[i] = new int[m];

		int s = boder - 1;
		int c = 0;

		for (int i = 0; i < n; ++i)
			for (int j = 0; j < m; ++j)
			{
				maps[i][j] = abs(s - i) + abs(c - j);
				
				cur_counting[maps[i][j]]--;

				if (!cur_counting[maps[i][j]])
					cnt--;
				else if (cur_counting[maps[i][j]] == -1)
					cnt++;
			}

		if (!cnt)
		{
			cout << n << ' ' << m << '\n' << boder << ' ' << 1 << '\n';
			return 0;
		}

		int l = c + 1, r = m - 1;

		for (int i = 0; l < r; ++i)
		{
			for (int j = 0; j < n; ++j)
			{
				cur_counting[maps[j][l]]--;

				if (!cur_counting[maps[j][l]])
					cnt--;
				else if (cur_counting[maps[j][l]] == -1)
					cnt++;

				cur_counting[maps[j][r]]++;

				if (!cur_counting[maps[j][r]])
					cnt--;
				else if (cur_counting[maps[j][r]] == 1)
					cnt++;
			}

			if (!cnt)
			{
				cout << n << ' ' << m << '\n' << boder << ' ' << l + 1 << '\n';
				return 0;
			}

			l++;
			r--;
		}

		for (int i = 0; i < n; ++i)
			delete[] maps[i];
	}

	cout << "-1\n";
	return 0;
}