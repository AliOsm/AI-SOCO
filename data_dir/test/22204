#include <bits/stdc++.h>

using namespace std;

int n;
vector < pair < int, int > > g[100010];
int p[20][100010];
int tin[100010], tout[100010], dfstimer;
int an[100010];
int go[100010];

void dfs1(int v, int par)
{
    tin[v] = dfstimer++;
    p[0][v] = par;
    for(int i = 1; i < 20; i++){
        p[i][v] = p[i-1][p[i-1][v]];
    }
    for(auto e : g[v]){
        int to = e.first;
        if(to != par){
            dfs1(to, v);
        }
    }
    tout[v] = dfstimer++;
}

int dfs2(int v, int par, int edge)
{
    int cur = 0;
    for(auto e : g[v]){
        int to = e.first;
        int ed = e.second;
        if(to != par){
            cur += dfs2(to, v, ed);
        }
    }
    cur += go[v];
    an[edge] = cur;
    return cur;
}

bool upper(int a, int b)
{
    return tin[a] <= tin[b] && tout[b] <= tout[a];
}

int lca(int a, int b)
{
    if(upper(a, b)) return a;
    if(upper(b, a)) return b;
    for(int i = 19; i >= 0; i--){
        if(!upper(p[i][a], b)) a = p[i][a];
    }
    return p[0][a];
}

int main()
{
    scanf("%d", &n);
    for(int i = 0; i < n - 1; i++){
        int from, to;
        scanf("%d%d", &from, &to);
        g[from].emplace_back(to, i);
        g[to].emplace_back(from, i);
    }
    dfs1(1, 1);
    int k;
    scanf("%d", &k);
    for(int i = 0; i < k; i++){
        int a, b;
        scanf("%d%d", &a, &b);
        int l = lca(a, b);
        ++go[a];
        --go[l];
        ++go[b];
        --go[l];
    }
    dfs2(1, 1, -1);
    for(int i = 0; i < n - 1; i++) printf("%d ", an[i]);
    return 0;
}
