#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;
typedef unsigned long long ull;

const int MAX_N = 100005;
const int A = 26;

int n;
bool exists[A];
ull res[MAX_N][A];

int main()
{
	ios::sync_with_stdio(false);
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		string s; cin >> s;
		int sLen = (int)s.length();
		bool type1 = true;
		for (int j = 1; j < sLen; j++)
			type1 &= s[j] == s[0];

		if (i != 0)
			for (int j = 0; j < A; j++)
				if (res[i - 1][j] > 0)
					res[i][j] = 1;

		if (type1)
		{
			int currC = s[0] - 'a';
			if (i == 0)
				res[i][currC] = sLen;
			else
				res[i][currC] = res[i - 1][currC] + sLen * (res[i - 1][currC] + 1ULL);
		}
		else
		{
			int leftC = s[0] - 'a', rightC = s.back() - 'a';
			int prLen = 0, suffLen = 0;
			for (int j = 0; j < sLen; j++)
			{
				if (s[j] == s[0])
					prLen++;
				else
					break;
			}
			for (int j = sLen - 1; j >= 0; j--)
			{
				if (s[j] == s.back())
					suffLen++;
				else
					break;
			}

			if (leftC != rightC)
			{
				res[i][leftC] = (exists[leftC] ? 1 : 0) + ull(prLen);
				res[i][rightC] = (exists[rightC] ? 1 : 0) + ull(suffLen);
			}
			else
				res[i][leftC] = exists[leftC] ? (1ULL + prLen + suffLen) : max(prLen, suffLen);

			int currLen = 1;
			for (int j = 1; j < sLen; j++)
			{
				if (s[j] == s[j - 1])
					currLen++;
				else
				{
					res[i][s[j - 1] - 'a'] = max(res[i][s[j - 1] - 'a'], ull(currLen));
					currLen = 1;
				}
			}
			res[i][s.back() - 'a'] = max(res[i][s.back() - 'a'], ull(currLen));
		}

		for (char c : s)
			exists[c - 'a'] = true;
	}

	ull result = 1;
	for (int i = 0; i < A; i++)
		result = max(result, res[n - 1][i]);
	cout << result << endl;
}