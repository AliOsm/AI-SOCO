#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
#include <fstream>
#include <cassert>
#include <cmath>
#include <sstream>
#include <time.h>
#include <iomanip>
#include <complex>
#include <unordered_map>
using namespace std;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<unsigned, unsigned> ii;
typedef pair<double,double> dd;
typedef pair<char,char> cc;
typedef vector<ii> vii;
typedef long long ll;
typedef pair<ll, ll> l4;
typedef long double ld;

typedef unsigned ui;
#define mp make_pair
#define pb push_back

vector<ll> p;
vector<int> cnt;
ll gcd(ll a, ll b)
{
  if (!b)
    return a;
  return gcd(b, a%b);
}
ll A;
ll solve(ll y)
{
  if (!y)
    return 0;
  ll g = gcd(A, y);
  y /= g;
  A /= g;
  for (int i = 0; i < p.size() && p[i] <= g; ++i)
    {
      while (cnt[i] > 0 && g%p[i] == 0)
	{
	  --cnt[i];
	  g/=p[i];
	}
    }
  ll nxt = 0;
  for (int i = 0; i < p.size() && p[i] <= y; ++i)
    if (cnt[i])
      nxt = max(nxt, y/p[i]*p[i]);
  cerr <<  y << " " << nxt << " " << y-nxt << endl;
  return y-nxt+solve(nxt);
}

int main()
{
  ll a, b;
  scanf("%lld %lld", &a, &b);
  A = a;
  for (ll i = 2; i * i <= a; ++i)
    if (a%i == 0)
      {
	p.pb(i);
	cnt.pb(0);
	while (a % i == 0)
	  {
	    a /= i;
	    cnt.back() += 1;
	  }
      }
  if (a != 1)
    {
      p.pb(a);
      cnt.pb(1);
    }
  printf("%lld\n", solve(b));
}
