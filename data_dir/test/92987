#include <bits/stdc++.h>
using namespace std;

#define gc getchar unlocked
#ifndef ONLINE JUDGE
#define gc getchar
#endif // ONLINE JUDGE

#define pc putchar_unlocked
#ifndef ONLINE JUDGE
#define pc putchar
#endif // ONLINE JUDGE
/*************Fast io **********/
#define scani2(a,b) scani(a) , scani(b)
#define scani3(a,b,c) scani(a), scani(b), scani(c)
#define scani4(a,b,c,d) scani(a), scani(b), scani(c), scani(d)
#define scani5(a,b,c,d,e) scani(a), scani(b), scani(c), scani(d) , scani(e)
template <typename T> T scani(T &n){n = 0;bool negative = false;char c = gc();while( c < '0' || c > '9'){if(c == '-') negative = true;c = gc();}while(c >= '0' && c <= '9'){n = n*10 + c-48;c = gc();}if(negative) n = ~(n-1);return n;}
template <typename T> void write(T n,int type = true){if(n<0) {pc('-');n = -n;}if(!n) {pc('0');if(type==32) pc(' '); else if(type) pc('\n'); return;}char buff[22];int len = 0;while(n) buff[len++] = n%10+48,n/=10;for(int i=len-1;i>=0;i--) pc(buff[i]);if(type==32) pc(' '); else if(type) pc('\n');}
int scans(char *a){int i=0;char c = 0;while(c < 33) c = gc();while(c > 33){a[i++] = c;c = gc();}a[i] = 0;return i;}


/******************************/

char a[200], b[200], c[200];
int lena, lenb, lenc;
int fail[112];
/// fail[i] will indicate the length of largest proper prefix sub-string [0 : i] that is also its proper suffix.
void prefix_function(char *str) {
	int now = fail[1] = 0;
	int len = strlen(str);
	for(int i = 2; i <= lenc; i++) {
		while(now != 0 && str[now + 1] != str[i]) now = fail[now];
		if(str[now + 1] == str[i]) fail[i] = ++now;
	}
}
int dp[112][112][112];
int call(int posa, int posb, int posc){
    if(posc >= lenc) return -200;
    if(posa > lena || posb > lenb) return 0;
    int &res = dp[posa][posb][posc];
    if(res != -1) return res;
    res = max(call(posa + 1, posb, posc), call(posa, posb + 1, posc));
    if(a[posa] == b[posb]){
        while(posc != 0 && a[posa] != c[posc + 1]) posc = fail[posc];
        if(a[posa] == c[posc + 1]) posc += 1;
        res = max(res, call(posa + 1, posb + 1, posc) + 1);
    }
    return res;
}
void path(int posa, int posb, int posc){
    if(posc >= lenc) return;
    if(posa > lena || posb > lenb) return;
    int res = call(posa, posb, posc);
    if(res == call(posa + 1, posb, posc)) path(posa + 1, posb, posc);
    else if(res == call(posa, posb + 1, posc)) path(posa, posb + 1, posc);
    else if(a[posa] == b[posb]) {
        while(posc != 0 && a[posa] != c[posc + 1]) posc = fail[posc];
        if(a[posa] == c[posc + 1]) posc += 1;
        int p3 = call(posa + 1, posb + 1, posc) + 1;
        if(p3 == res) {
            putchar(a[posa]);
            path(posa + 1, posb + 1, posc);
        }
    }
    else {
        assert(1 == 2);
    }
}
int main(){
   // ios_base::sync_with_stdio(false);cout.setf(ios::fixed); cout.precision(10);cout.tie(nullptr); cin.tie(nullptr);
    #ifdef shaft
        freopen("in.txt","r",stdin);
       // freopen("out.txt","w",stdout);
    #endif ///shaft
    lena = scans(a + 1);
    lenb = scans(b + 1);
    lenc = scans(c + 1);
//    for(int i = 1; i <= lena; i++) putchar(a[i]); putchar('\n');
//    for(int i = 1; i <= lenb; i++) putchar(b[i]); putchar('\n');
//    for(int i = 1; i <= lenc; i++) putchar(c[i]);
    prefix_function(c);
    memset(dp, -1, sizeof(dp));
    int res = call(1, 1, 0);
  //  cout << res << endl;
    if(res <= 0) puts("0");
    else path(1, 1, 0);
    return 0;
}

