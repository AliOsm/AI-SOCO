/*
    Author: Nguyen Tan Bao
    Status:
    Idea:
*/
 
#include <bits/stdc++.h>
#define FI first
#define SE second
#define EPS 1e-9
#define ALL(a) a.begin(),a.end()
#define SZ(a) int((a).size())
#define MS(s, n) memset(s, n, sizeof(s))
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORE(i,a,b) for (int i = (a); i >= (b); i--)
#define FORALL(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
//__builtin_ffs(x) return 1 + index of least significant 1-bit of x
//__builtin_clz(x) return number of leading zeros of x
//__builtin_ctz(x) return number of trailing zeros of x
 
using namespace std;
using ll = long long;
using ld = double;
typedef pair<int, int> II;
typedef pair<int, II> III;
typedef complex<ld> cd;
typedef vector<cd> vcd;
 
const ll MODBASE = 1000000007LL;
const int MAXN = 200010;
const int MAXM = 1000;
const int MAXK = 16;
const int MAXQ = 200010;

int n;
int dx[4] = {1,0,0,-1};
int dy[4] = {0,1,-1,0};
II a[MAXN], sc;

int dist(II a, II b) {
    return abs(a.FI - b.FI) + abs(a.SE - b.SE);
}

bool check(II sw, II p) {
    return (dist(sc, p) == dist(sw, p) + 1);
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(nullptr);
    cin >> n >> sc.FI >> sc.SE;
    FOR(i,1,n) cin >> a[i].FI >> a[i].SE;

    int res = 0, pos = -1;
    FOR(p,0,3) {
        II sw = II(sc.FI + dx[p], sc.SE + dy[p]);
        if (sw.FI < 0 || sw.FI > 1000000000) continue;
        if (sw.SE < 0 || sw.SE > 1000000000) continue;
        int cnt = 0;
        FOR(i,1,n) cnt += check(sw, a[i]);
        if (cnt > res) {
            res = cnt;
            pos = p;
        }
    }

    cout << res << "\n";
    II sw = II(sc.FI + dx[pos], sc.SE + dy[pos]);
    cout << sw.FI << ' ' << sw.SE << "\n";
    return 0;
}
