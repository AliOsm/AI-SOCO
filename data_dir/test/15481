#include<bits/stdc++.h>
#define x first
#define y second
using namespace std;
typedef pair<int, int> pt;
const long long md = 1e9 + 9;
map<pt, int> a;
set<pair<int, pt>> s;


char isGood(pt cur, pt toTake) {
    if (a.find(cur) == a.end()) {
        return true;
    }

    if (cur.y == 0) {
        return true;
    }

    for (int x = cur.x - 1; x <= cur.x + 1; x++) {
        pt tmp = {x, cur.y - 1};
        if (tmp != toTake && a.find(tmp) != a.end()) {
            return true;
        }
    }

    return false;
}


char canTake(pt cur) {
    if (a.find(cur) == a.end()) {
        return false;
    }
    for (int i = -1; i <= 1; i++)
        if (!isGood({cur.x + i, cur.y + 1}, cur)) {
            return false;
        }
    return true;
}


main() {
#ifndef ONLINE_JUDGE
    freopen("1.txt", "r", stdin);
#endif // ONLINE_JUDGE

    int n;
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        int x, y;
        scanf("%d%d", &x, &y);
        a[{x, y}] = i;
    }

    for (auto i : a)
        if (canTake(i.first)) {
            s.insert({i.second, i.first});
        }

    vector<int> magicPony;

    for (int turn = 0; !s.empty(); turn ^= 1) {
        set<pair<int, pt>>::iterator i;
        if (turn == 0) {
            i = s.end();
            i--;
        } else {
            i = s.begin();
        }
        magicPony.push_back(i->first);
        pt cur = i->second;
        s.erase(i);
        a.erase(cur);
        for (int x = cur.x - 2; x <= cur.x + 2; x++)
            for (int y = cur.y - 1; y <= cur.y + 1; y++) {
                pt tmp = {x, y};
                if (canTake(tmp))  {
                    s.insert({a[tmp], tmp});
                } else if(a.find(tmp) != a.end()) {
                    s.erase({a[tmp], tmp});
                }
            }
        continue;
        if (!isGood({cur.x - 1, cur.y + 1}, {cur.x - 2, cur.y})) {
            pt tmp = {cur.x - 2, cur.y};
            s.erase({a[tmp], tmp});
        }
        if (!isGood({cur.x + 1, cur.y + 1}, {cur.x + 2, cur.y})) {
            pt tmp = {cur.x + 2, cur.y};
            s.erase({a[tmp], tmp});
        }
        if (!isGood({cur.x - 1, cur.y + 1}, {cur.x - 1, cur.y})) {
            pt tmp = {cur.x - 1, cur.y};
            s.erase({a[tmp], tmp});
        }
        if (!isGood({cur.x + 1, cur.y + 1}, {cur.x + 1, cur.y})) {
            pt tmp = {cur.x + 1, cur.y};
            s.erase({a[tmp], tmp});
        }
        ///***************************
    }

    long long res = 0;

    if (magicPony.size() != n) {
//        return 123;
    }

    for (int i : magicPony) {
        //printf("%d ", i);
        res = ((long long) res * n + i) % md;
    }

    printf("%lld", res);

    return 0;
}
