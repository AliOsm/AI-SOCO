#include <cstdio>
#include <iostream>
#include <string>
#include <algorithm>
#include <cmath>
#include <vector>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <stdlib.h>
#include <sstream>
#include <assert.h>
#include <memory.h>

#include <time.h>
#pragma comment(linker, "/STACK:100000000")
using namespace std;

#define mp make_pair
#define pb push_back
#define ll long long
#define sz(x) (int)(x).size()
#define fr(i,a,b) for(int i = (a);i <= (b);i++)

int ri(){int x;scanf("%d",&x);return x;}


int mas[30030];

int dp[30030][500];
pair<int, int> steps[30030];

int main()
{
    
    //freopen("input.txt","rt",stdin);
    //freopen("bipartite.in","rt",stdin);
    //freopen("bipartite.out","wt",stdout);

	int n, d;
	scanf("%d %d", &n, &d);

	for(int i= 0; i < n; i++) {
		int a;
		scanf("%d", &a);
		mas[a]++;
	}
	int add = -d + 250;

	dp[d][d+add] = mas[d];


	
	int res = mas[d];
	for(int i = 0; i < 30000; i++) steps[i] = mp(1e9, -1e9);
	steps[d] = mp(d, d);
	for(int i = d; i < 30000; i++) {
		for(int j = steps[i].first; j <= steps[i].second; j++) {
			if(dp[i][j+add] != -1) {
				if(j != 1 && i + j - 1 <= 30000) {
					dp[i+j-1][j-1+add] = max(dp[i+j-1][j-1+add], dp[i][j+add] + mas[i+j-1]);
					steps[i+j-1].first = min(steps[i+j-1].first, j-1);
					steps[i+j-1].second = max(steps[i+j-1].second, j-1);
					res = max(res, dp[i+j-1][j-1+add]);
				}
				if(i + j  <= 30000) {
					dp[i+j][j+add] = max(dp[i+j][j+add], dp[i][j+add] + mas[i+j]);
					steps[i+j].first = min(steps[i+j].first, j);
					steps[i+j].second = max(steps[i+j].second, j);
					res = max(res, dp[i+j][j+add]);
				}
				if(i + j + 1 <= 30000) {
					dp[i+j+1][j+1+add] = max(dp[i+j+1][j+1+add], dp[i][j+add] + mas[i+j+1]);
					steps[i+j+1].first = min(steps[i+j+1].first, j+1);
					steps[i+j+1].second = max(steps[i+j+1].second, j+1);
					res = max(res, dp[i+j+1][j+1+add]);
				}
			}
		}
	}
	printf("%d", res);
	

    return 0;
}