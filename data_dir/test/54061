using namespace std;
#include<bits/stdc++.h>
#define ll long long
#define pr pair<ll,ll>
#define pii pair<int,int>
#define fir first
#define sec second
#define mp make_pair
#define pb push_back
#define sz(c) ((int)c.size())
#define all(c) (c).begin(),(c).end()
#define inf(type) numeric_limits <type> :: max()
#define fn "271D"  /// ___FILE_NAME_HERE___
#define rep(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define __rep(c,it) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();it++)

template <class T,class U>
void maximize(T &x,U y)
{
    if(x < y)x=y;
}
template <class T,class U>
void minimize(T &x,U y)
{
    if(x > y)x=y;
}
template <class T>
T Abs(T x)
{
    return (x < 0 ? -x : x);
}
template <class T>
T safe_sqrt(T x)
{
    return sqrt(max(x,(T)0));
}
template <class T,class U,class V>
T addmod(T x,U k,V __base)
{
    return ((x+k)%__base + __base)%__base;
}
template <class T,class U,class V>
T submod(T x,U k,V __base)
{
    return ((x-k)%__base + __base)%__base;
}
template <class T,class U,class V>
T mul(T x,U y,V __base)
{
    return (ll)x*y%__base;
}
/*------------------------------------------END_OF_TEMPLATE------------------------------------------*/

const int N=15e2+15;
const ll base[]={1000000007,1000000087};
string s,g;
int good[N];
int n,k;

struct segmentTree
{
    vector <int> tree;
    segmentTree(){tree.resize(4*N+44,0);}
    void buildTree(int l=1,int r=n,int node=1)
    {
        if(l > r)return ;
        if(l==r)return (void)(tree[node]=good[l]);
        int mid=(l+r)>>1;
        buildTree(l,mid,node<<1);
        buildTree(mid+1,r,node<<1|1);
        tree[node]=tree[node<<1]+tree[node<<1|1];
    }
    int rsq(int lef,int rig,int l=1,int r=n,int node=1)
    {
        if(l > r or r < lef or l > rig)return 0;
        if(lef <= l and r <= rig)return tree[node];
        int mid=(l+r)>>1;
        return rsq(lef,rig,l,mid,node<<1)+rsq(lef,rig,mid+1,r,node<<1|1);
    }
}seg;

struct Hash
{
    vector <pr> hs,pw;
    Hash()
    {
        hs.resize(N+4,mp(0,0));
        pw.resize(N+4,mp(0,0));
    }
    void buildHs()
    {
        pw[0]=mp(1,1);
        for(int i=1;i<=n;i++)
        {
            pw[i].fir=(pw[i-1].fir * 27) % base[0];
            pw[i].sec=(pw[i-1].sec * 29) % base[1];
        }
        for(int i=1;i<=n;i++)
        {
            hs[i].fir=(hs[i-1].fir * 27 + s[i] - 'a' + 1) % base[0];
            hs[i].sec=(hs[i-1].sec * 29 + s[i] - 'a' + 1) % base[1];
        }
    }
    pr getHs(int l,int r)
    {
        ll hs1 = (hs[r].fir - hs[l-1].fir*pw[r-l+1].fir + base[0] * base[0]) % base[0];
        ll hs2 = (hs[r].sec - hs[l-1].sec*pw[r-l+1].sec + base[1] * base[1]) % base[1];
        return mp(hs1,hs2);
    }
}h;

void loadData()
{
    cin>>s>>g>>k;
    n=sz(s);
    s=" "+s;
    for(int i=1;i<=n;i++)
       good[i]=(g[s[i]-'a']-'0')^1;
}

map <pr,int> ma;
void solve()
{
    seg.buildTree();
    h.buildHs();
    for(int r=1; r<=n; r++)
        for(int l=1; l<=r; l++)
        {
            int cnt=seg.rsq(l,r);
            if(cnt > k)continue;
            pr hashCode=h.getHs(l,r);
            ma[hashCode]++;
        }
    cout<<sz(ma);
}

int main(void)
{
#ifndef ONLINE_JUDGE
    freopen(fn".inp","r",stdin);
    freopen(fn".out","w",stdout);
#endif // ONLINE_JUDGE
    loadData();
    solve();
}
