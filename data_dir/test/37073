/*jai mata di
lets rock*/
/// NO PAIN <-> NO GAIN
/// FROM ASHES TO THE EMPIRE
#include <bits/stdc++.h>

#define ss second
#define ff first
#define pb push_back
#define faster ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)

using namespace std;

typedef long long ll;
typedef long double ld;

const ll N=1000100,NN=1e5+100,mod=1e9+7,mod2=1e9+9,mod3=998244353,sq=450,base=727,lg=30;

ll n,m,T,cnt[NN],tme[NN],par[NN],cst[NN],fen_cnt[N],fen_tm[N],dp[NN],mx[2][NN];

vector <ll> v[NN];

void add(ll x,ll val){
    for(int i=x;i<N;i+=(-i)&i){
        fen_cnt[i]+=val;
        fen_tm[i]+=val*x;
    }
}
pair <ll,ll> sum(ll x){
    ll y=0,z=0;
    for(int i=x;i>0;i-=(-i)&i){
        y+=fen_tm[i];
        z+=fen_cnt[i];
    }
    return {y,z};
}
ll __(ll t){
    ll b=0,e=N,xx,mid,yy,zz;
    while(e-b>1){
        mid=(b+e)>>1;xx=sum(mid).ff;
        if(xx<t)b=mid;
        else e=mid;
    }
    xx=sum(b).ff;zz=sum(b).ss;yy=sum(b+1).ss-sum(b).ss;
    return zz+min((t-xx)/(b+1),yy);
}
void dfs(ll x,ll t){
    add(tme[x],cnt[x]);
    dp[x]=__(t);
    for(int i=0;i<v[x].size();i++){
        int u=v[x][i];
        dfs(u,t-2*cst[u]);
    }
    add(tme[x],-cnt[x]);
    ll y=max(mx[0][x],dp[x]);
    mx[0][par[x]]=max(mx[0][par[x]],y);
    if(mx[0][par[x]]>mx[1][par[x]])swap(mx[0][par[x]],mx[1][par[x]]);
}
void input(){
    cin>>n>>T;
    for(int i=1;i<=n;i++)cin>>cnt[i];
    for(int i=1;i<=n;i++)cin>>tme[i];
    for(int i=2;i<=n;i++){cin>>par[i]>>cst[i];v[par[i]].pb(i);}
}
void _(){
    input();
    dfs(1,T);
    cout<<max(dp[1],mx[1][1]);
}
int main(){
    _();
}