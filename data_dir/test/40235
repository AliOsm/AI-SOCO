#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cmath>
#include <cstdio>
#include <cstring>

#define forn(i, n) for (int i = 0; i < n; i ++)
#define ford(i, n) for (int i = n - 1; i >= 0; i --)
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define pi 3.1415926535897932
#define ll long long

using namespace std;

struct item{
    string s;
    int a[50], kol;
    item(){
        forn(i, 50)
            a[i] = 0;
        kol = 0;
    }
};

bool cmp1(item a, item b){
    if (a.kol < b.kol) return true;
    else if (a.kol > b.kol) return false;
    forn(i, 50)
        if (a.a[i] < b.a[i]) return true;
        else if (a.a[i] > b.a[i]) return false;
}

bool cmp2(item a, item b){
    if (a.a[0] < b.a[0]) return true;
    else if (b.a[0] < a.a[0]) return false;
    if (a.kol < b.kol) return true;
    else if (a.kol > b.kol) return false;
    forn(i, 50)
        if (a.a[i] < b.a[i]) return true;
        else if (a.a[i] > b.a[i]) return false;
}

int d[10];

vector <item> a;

int main(){
    //freopen ("input.txt", "rt", stdin);
    //freopen ("output.txt","wt",stdout);
    d[0] = 25;
    d[1] = 18;
    d[2] = 15;
    d[3] = 12;
    d[4] = 10;
    d[5] = 8;
    d[6] = 6;
    d[7] = 4;
    d[8] = 2;
    d[9] = 1;
    int t;
    item help;
    cin >> t;
    forn(q, t){
        int n;
        scanf ("%d\n", &n);
        string s;
        forn(i, n){
            getline(cin, s);
            bool q = false;
            forn(j, a.size())
                if (a[j].s == s){
                    if (i < 10) a[j].kol += d[i];
                    a[j].a[i] ++;
                    q = true;
                    break;
                }
            if (!q){
                a.pb(help);
                a[a.size() - 1].s = s;
                a[a.size() - 1].a[i] ++;
                if (i < 10) a[a.size() - 1].kol += d[i];
            }
        }
    }
    sort(a.begin(), a.end(), cmp1);
    cout << a[a.size() - 1].s << endl;
    sort(a.begin(), a.end(), cmp2);
    cout << a[a.size() - 1].s;
    return 0;
}