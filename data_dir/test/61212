#include<bits/stdc++.h>
using namespace std;
int f[100010],s[100010],n,rt,g[100010];
bool vis[100010];
pair<int,int> ans,dp[100010][2];
vector<pair<int,int> > p,q;
vector<int> v[100010];
void dfs(int np)
{
	dp[np][0]=dp[np][1]=make_pair(0,0);
	vis[np]=1;g[np]=0;
	for(auto &x:v[np])
	{
		if(x==rt)continue;
		dfs(x);
		dp[np][0].first+=dp[x][1].first;
		dp[np][0].second+=dp[x][1].second;
		pair<int,int> t=make_pair(1-dp[x][1].first+dp[x][0].first,(s[np]^s[x])-dp[x][1].second+dp[x][0].second);
		if(dp[np][1]<t)dp[np][1]=t,g[np]=x;
	}
	dp[np][1].first+=dp[np][0].first;dp[np][1].second+=dp[np][0].second;
}
void dfs2(int np,int t)
{
	for(auto &x:v[np])
	{
		if(x==rt)continue;
		if(!t||g[np]!=x)dfs2(x,1);
		else p.push_back(make_pair(np,x)),dfs2(x,0);
	}
}
void solve(int pos)
{
	for(;!vis[pos];pos=f[pos])vis[pos]=1;
	pair<int,int> res=make_pair(0,0);
	for(int T=0;T<2;T++)
	{
		rt=pos;
		dfs(rt);
		if(dp[rt][1]>res)
		{
			res=dp[rt][1];
			p.clear();
			dfs2(rt,1);
		}
		pos=f[pos];
	}
	q.insert(q.end(),p.begin(),p.end());
	ans.first+=res.first;ans.second+=res.second;
}
int main()
{
	scanf("%d",&n);
	for(int i=1;i<=n;i++)
		scanf("%d%d",&f[i],&s[i]),s[i]--,v[f[i]].push_back(i);
	for(int i=1;i<=n;i++)
		if(!vis[i])solve(i);
	printf("%d %d\n",ans.first,ans.second);
	for(auto &x:q)printf("%d %d\n",x.first,x.second);
	return 0;
}