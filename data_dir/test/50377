#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define pi pair<ll,ll>
#define f first
//#define mp make_pair
#define s second
#define pb push_back
#define mod 1000000007
#define get(t) scanf("%d",&t)
vector<int>g[100001];
int branch[100001];
int depth[100001];
ll maxcur=0;
void dfs(ll v,ll p,ll k,ll cur){
	branch[v]=p;
	depth[v]=cur;
	//cout<<v<<" "<<branch[v]<<" "<<depth[v]<<"\n";
	maxcur=max(maxcur,cur);
	for(int i=0;i<g[v].size();i++){
		if(g[v][i]==k) continue;
		dfs(g[v][i],p,v,cur+1);
	}
}
vector<vector<int> >bt;
vector<int>btg;
void update(vector<int>& t,ll ind,ll val){
while(ind<t.size()){
	t[ind]+=val;
	ind+=(ind&-ind);
}	
}
ll query(vector<int>&t,ll ind){
	ll ans=0;
	while(ind>0){
		ans+=t[ind];
		ind-=(ind&-ind);
	}
	return ans;
}
int main(){
	ll n,q;
	cin>>n>>q;
	ll u,v;
	for(int i=1;i<=n-1;i++){
		cin>>u>>v;
		g[u].pb(v);
		g[v].pb(u);
	}
	bt.resize(g[1].size()+3);
	btg.resize(100001,0);
	for(int i=0;i<g[1].size();i++){
	dfs(g[1][i],i+1,1,1);
	bt[i+1].resize(maxcur+3,0);
    }
    ll t,x,d;
    ll inroot=0;
	while(q--){
		cin>>t;
		if(t==0){
		cin>>v>>x>>d;	
		if(v==1){
		inroot+=x;
		update(btg,1,x);	
		update(btg,d+1,-x);	
		}	
		else{
		if(d==depth[v]){
			inroot+=x;
			update(bt[branch[v]],1,x);	
		    update(bt[branch[v]],depth[v]+d+1,-x);
		}
		else if(d<depth[v]){
		update(bt[branch[v]],depth[v]-d,x);	
		update(bt[branch[v]],depth[v]+d+1,-x);	
		}	
		else{
		inroot+=x;
		update(btg,1,x);
		update(btg,d-depth[v]+1,-x);	
		update(bt[branch[v]],d-depth[v]+1,x);
		update(bt[branch[v]],d+depth[v]+1,-x);	
		}	
		}	
		}
		else{
		cin>>v;	
		if(v==1) cout<<inroot<<"\n";
		else{
		ll ans=query(btg,depth[v])+query(bt[branch[v]],depth[v]);	
		cout<<ans<<"\n";	
		}	
		}	
	}
} 