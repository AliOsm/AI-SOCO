#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;


//kosarajus-directed


const int maxn=3e5+7;
vector<int> flist[maxn],rlist[maxn];
int cost[maxn];
ll ans[maxn];
int component[maxn],cptr=0;
int visited[maxn];
stack<int> etime;
ll counter[maxn];
//dfs for forward graph
void fdfs(int cur,vector<int> adj[]){
	visited[cur]=1;
	for(auto u:adj[cur]){
		if(visited[u]!=1)
			fdfs(u,adj);
	}
	etime.push(cur);
}

//dfs for reverse graph
void rdfs(int cur,vector<int> adj[]){
	visited[cur]=1;
	component[cur]=cptr;
	for(auto u:adj[cur]){
		if(visited[u]!=1)
			rdfs(u,adj);
	}
}

void kosaraju(){
	for(int i=1;i<maxn;i++){
		if(visited[i]!=1)
			fdfs(i,flist);
	}
	memset(visited,0,sizeof(visited));
	while(!etime.empty()){
		int cur=etime.top();
		etime.pop();
		if(visited[cur]==1)
			continue;
		rdfs(cur,rlist);
		cptr++;		
	}
}

//end of kosarajus

int main()
{
	fastread;
	int n;
	cin>>n;
	for(int i=1;i<=n;i++){
		cin>>cost[i];
	}
	for(int i=1;i<maxn;i++)
		ans[i]=1e18;
	int m;
	cin>>m;
	for(int i=0;i<m;i++){
		int u,v;
		cin>>u>>v;
		flist[u].pb(v);
		rlist[v].pb(u);
	}
	kosaraju();
	for(int i=1;i<maxn;i++){
		int c=component[i];
		if(ans[c]==cost[i]){
			counter[c]++;
		}else if(ans[c]>cost[i]){
			ans[c]=cost[i];
			counter[c]=1;
		}
	}
	ll val=0,ways=1;
	ll mod=1e9+7;
	for(int i=0;i<cptr;i++){
		val+=ans[i];
		if(counter[i]==0){
			// cout<<i<<" ch";
			break;
		}
		ways=(ways*counter[i])%mod;
	}
	cout<<val<<" "<<ways;
	return 0;
}