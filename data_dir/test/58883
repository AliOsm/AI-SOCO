// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")
 
#define MP make_pair
#define PB push_back
#define ST first
#define ND second
 
using namespace __gnu_pbds;
using namespace std;
 
template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
 
//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k
 
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;
 
void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

int t, n;
string s, res;
VI child[30];
bool bad, vis[30];
 
void dfs(int v, int p) {
  vis[v] = true;
  res += (char)(v+'a');
  for (int x: child[v]) {
    if (x != p && vis[x]) {
      bad = true;
      return;
    }
    if (x != p)
      dfs(x, v);
  }
}

int main() {
  init_ios();
  cin >> t;
  while (t--) {
    cin >> s;
    n = s.size();
    for (int i = 0; i < 30; ++i) {
      child[i].clear();
      vis[i] = false;
    }
    bad = false;
    res = "";
    for (int i = 0; i < n; ++i) {
      if (i+1 < n) {
        child[s[i]-'a'].PB(s[i+1]-'a');
        child[s[i+1]-'a'].PB(s[i]-'a');
      }
      if (i) {
        child[s[i-1]-'a'].PB(s[i]-'a');
        child[s[i]-'a'].PB(s[i-1]-'a');
      }
    }
    for (int i = 0; i < 30; ++i) {
      if (child[i].size() == 0)
        continue;
      sort(child[i].begin(), child[i].end());
      child[i].erase(unique(child[i].begin(), child[i].end()), child[i].end());
      if (child[i].size() > 2) {
        cout<<"NO\n";
        bad = true;
        break;   
      }
    }
    if (bad)
      continue;
    for (int i = 0; i < 30; ++i)
      if (!vis[i] && child[i].size() == 1)
        dfs(i, -1);
    if (bad) {
      cout<<"NO\n";
      continue;
    }
    for (int i = 0; i < 26; ++i)
      if (child[i].size() == 0)
        res += (char)(i+'a');
    if (res.size() != 26)
      cout<<"NO\n";
    else
      cout<<"YES\n"<<res<<"\n";
  }
}