#include <iostream>
#include <set>
#include <algorithm>
#include <unordered_map>
#include <vector>
#include <map>
#include <cstring>
#include <assert.h>

#define N 200005
#define LL long long int
using namespace std;

#define MOD 1000000007

set<int> g[N];
bool vis[N],rem[N];
pair<int,int> queries[N];
int ANS=0,deg[N],ans[N];

void remove_node(int node,int k) {
	rem[node]=true;
	ANS--;
	for (auto it:g[node]) if (!rem[it]) {
		deg[it]--;
		g[it].erase(node);
	}
	for (auto it:g[node]) if (!rem[it]) {
		if (deg[it]<k) remove_node(it,k);
	}
}

int main() {
	int n,m,k,u,v,i;
	cin >> n >> m >> k;
	for (i=0;i<m;i++) {
		cin >> u >> v;
		g[u].insert(v);
		g[v].insert(u);
		deg[u]++;deg[v]++;
		queries[i]=make_pair(u,v);
	}
	memset(rem,0,sizeof(rem));
	
	ANS=n;
	for (i=1;i<=n;i++) if (!rem[i] && deg[i]<k) remove_node(i,k);
	
	ans[m-1]=ANS;
	for (i=m-1;i>0;i--) {
		u=queries[i].first;v=queries[i].second;
		
		if (!rem[v]) g[u].erase(v);
		if (!rem[u]) g[v].erase(u);
		
		if (!rem[v]) deg[u]--;
		if (!rem[u]) deg[v]--;
		
		if (!rem[u] && deg[u]<k) remove_node(u,k);
		if (!rem[v] && deg[v]<k) remove_node(v,k);
		ans[i-1]=ANS;
	}
	for (i=0;i<m;i++) cout << ans[i] << '\n';

	return 0;
}