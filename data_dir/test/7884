#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

#define eprintf(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)

inline int rnd(int x) {
  return myrand() % x;
}

#define TASKNAME "text"
#define pb push_back
#define mp make_pair
#define sz(x) ((int)(x).size())

const int INF = (int)1e9 + 1;
const ld EPS = 1e-9;

const int Ps[2] = {(int)1e9 + 7, (int)1e9 + 9};

struct Hash {
  const static int n = 2;
  int a[n];

  Hash(long long x = 0) {
    for (int i = 0; i < n; ++i) {
      a[i] = x % Ps[i];
      if (a[i] < 0)
        a[i] += Ps[i];
    }
  }

  inline void operator += (const Hash &h) {
    for (int i = 0; i < n; ++i) {
      if ((a[i] += h.a[i]) >= Ps[i])
        a[i] -= Ps[i];
    }
  }

  inline void operator -= (const Hash &h) {
    for (int i = 0; i < n; ++i) {
      if ((a[i] -= h.a[i]) < 0)
        a[i] += Ps[i];
    }
  }

  inline void operator *= (const Hash &h) {
    for (int i = 0; i < n; ++i)
      a[i] = (long long) a[i] * h.a[i] % Ps[i];
  }

  inline bool operator == (const Hash &h) const {
    for (int i = 0; i < n; ++i)
      if (a[i] != h.a[i])
        return 0;
    return 1;
  }
};

const Hash Q = 239017;

const int maxp = (int)1e6 + 10;
char p[maxp + 1];

const int maxs = 200 + 10;
char s[maxs];

const int maxk = 2000 + 10;

Hash hp[maxk];

bool solve() {
  int k;
  if (!gets(p) || !gets(s) || scanf("%d", &k) < 1)
    return 0;
  char trash[10];
  assert(gets(trash));

  int n = (int)strlen(p);
  int m = (int)strlen(s);

  if (n / k > m + 2) {
    printf("0\n");
    return 1;
  }

  for (int i = 0; i < k; ++i) {
    hp[i] = 0;
    for (int j = i; j < n; j += k) {
      hp[i] *= Q;
      hp[i] += (int)p[j];
    }
  }
  
  string res = "0";
  for (int cnt = 1; cnt <= m; ++cnt) {
    string cur(k, '0');
    bool fail = 0;
    for (int i = cnt - 1, pos = k - 1; i >= 0; --i) {
      Hash need = 0;
      for (int j = i; j < m; j += cnt)
        need *= Q, need += (int)s[j];
      while (pos >= 0) {
        if (hp[pos] == need)
          break;
        --pos;
      }
      if (pos == -1) {
        fail = 1;
        break;
      }
      cur[pos] = '1';
      --pos;
    }
    if (!fail && (res == "0" || res > cur))
      res = cur;
  }

  printf("%s\n", res.c_str());
  return 1;
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".in", "r", stdin);
  freopen(TASKNAME".out", "w", stdout);
#endif
  
  while (1) {
    if (!solve())
      break;
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
