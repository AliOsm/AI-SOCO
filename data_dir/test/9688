//be naame khodaa

#include <bits/stdc++.h>

const int sq = 320;
const int maxn = 1e5+5;

using namespace std;

int cnt[sq][maxn];
deque <int> dq[sq];

void print()
{
	for (int i = 0; i < sq; i++)
	{
		if (dq[i].size() == 0) return;
		vector <int> v;
		while (dq[i].size())
		{
			cout << dq[i].front() << ' ';
			v.push_back(dq[i].front());
			dq[i].pop_front();
		}
		cout << "| ";
		for (int j = int(v.size())-1; j >= 0; j--)
			dq[i].push_front(v[j]);
	}
	cout << endl;
}

int check(int x, int l, int r, int k)
{
	int ans = 0;
	vector <int> v;
	int y = x*sq;
	while (dq[x].size())
	{
		if (y >= l && y <= r && dq[x].front() == k) ans++;
		v.push_back(dq[x].front());
		dq[x].pop_front();
		y++;
	}
	for (int i = int(v.size())-1; i >= 0; i--)
		dq[x].push_front(v[i]);
	return ans;
}

int get(int x, int p)
{
	int ans = 0;
	vector <int> v;
	for (int y = x*sq; ; y++)
	{
		int z = dq[x].front();
		dq[x].pop_front();
		if (y == p)
		{
			cnt[x][z]--;
			ans = z;
			break;
		}
		v.push_back(z);
	}
	for (int i = int(v.size())-1; i >= 0; i--)
		dq[x].push_front(v[i]);
	return ans;
	print();
}

void Push(int x, int p, int val)
{
	vector <int> v;
	for (int y = x*sq; y != p; y++)
	{
		v.push_back(dq[x].front());
		dq[x].pop_front();
	}
	dq[x].push_front(val);
	cnt[x][val]++;
	for (int i = int(v.size())-1; i >= 0; i--)
		dq[x].push_front(v[i]);
}



int main()
{
	ios_base::sync_with_stdio(false);
	int n, q, a;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		cin >> a;
		dq[i/sq].push_back(a);
		cnt[i/sq][a]++;
	}
//	print();
	cin >> q;
	int lastAns = 0;
	while (q--)
	{
//		print();
		int c, l, r, k;
		cin >> c >> l >> r;
		l = (l + lastAns - 1)%n + 1;
		r = (r + lastAns - 1)%n + 1;
		l--; r--;
		if (l > r) swap(l, r);
		if (c == 1)
		{
			int L = l/sq, R = r/sq;
			for (int i = L; i < R; i++)
			{
				int x = dq[i].back();
				cnt[i][x]--;
				cnt[i+1][x]++;
				dq[i].pop_back();
				dq[i+1].push_front(x);
			}
			if (L < R) r++;
			Push(L, l, get(R, r));
		}
		else
		{
			cin >> k;
			k = (k + lastAns - 1)%n + 1;
			int Cnt = 0, L = l/sq, R = r/sq;
			for (int i = L+1; i < R; i++)
				Cnt += cnt[i][k];
			Cnt += check(L, l, r, k);
			Cnt += (R != L ? check(R, l, r, k) : 0);
			cout << Cnt << endl;
			lastAns = Cnt;
		}
	}
    return 0;
}
