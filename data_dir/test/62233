#include <bits/stdc++.h>
using namespace std;
typedef pair <int, int> pii;

const int N = 1e5 + 10, lg = 15;
int n, m, now = 1, par[N], high[N], dp[N][lg + 1];
pii sf[N];
vector <int> ch[N];
vector <int> vec[N];

void dfs(int v, int h) {
	sf[v].first = now++;
	high[v] = h;
	for (int i : ch[v])
		dfs(i, h + 1);
	sf[v].second = now++;
	vec[h].push_back(sf[v].first);
}

int go_up(int v, int dis) {
	int u = 0;
	while (dis) {
		if (dis & 1)
			v = dp[v][u];
		u++;
		dis /= 2;
	}
	return v;
}

int main() {
	cin >> n;
	for (int i = 0; i < n; i++) {
		int a;
		cin >> a;
		if (!a)
			par[i] = i;
		else {
			par[i] = --a;
			ch[a].push_back(i);
		}
	}
	for (int i = 0; i < n; i++)
		if (par[i] == i)
			dfs(i, 0);
	for (int i = 0; i < n; i++)
		dp[i][0] = par[i];
	for (int j = 1; j <= lg; j++)
		for (int i = 0; i < n; i++)
			dp[i][j] = dp[dp[i][j - 1]][j - 1];
	
	for (int i = 0; i < n; i++)
		sort(vec[i].begin(), vec[i].end());
	
	cin >> m;
	for (int i = 0; i < m; i++) {
		int v, p, w;
		cin >> v >> p;
		v--;
		if (high[v] < p) {
			cout << 0 << " ";
			continue;
		}
		w = go_up(v, p);
		int st = upper_bound(vec[high[v]].begin(), vec[high[v]].end(), sf[w].first) - vec[high[v]].begin();
		int ed = lower_bound(vec[high[v]].begin(), vec[high[v]].end(), sf[w].second) - vec[high[v]].begin() - 1;
		cout << ed - st << " ";
	}
}
