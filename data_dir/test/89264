#define _CRT_SECURE_NO_DEPRECATE
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <cmath>
#ifndef __GNUC__
#include <intrin.h>
#endif // !__GNUC__
#include <bitset>
#include <random>
#include <vector>
#include <cstdio>
#include <string>
#include <cstdlib>
#include <numeric>
#include <cstring>
#include <complex>
#include <cassert>
#include <iterator>
#include <iostream>
#include <algorithm>
#include <functional>
#include <string_view>

int bsf(int x) {
#ifdef __GNUC__
	return __builtin_ctz(x);
#else
	unsigned long i;
	_BitScanForward(&i, x);
	return i;
#endif
}
int bsr(int x) {
#ifdef __GNUC__
	return 31 - __builtin_clz(x);
#else
	unsigned long i;
	_BitScanReverse(&i, x);
	return i;
#endif
}

using namespace std;
typedef long long int64;
const double pi = 3.14159265358979323846;
const int inf = (int)2e+9 + 2;
const int mod = (int)1e+9 + 7;
const double eps = 1e-8;
const int N = 100000;

int n, m, k;
struct point {
	int x;
	int y;
}a[5], b[5];

int vec(const point& p1, const point& p2, const point& p3)
{
	return (p2.x - p1.x) * (p3.y - p1.y) - (p3.x - p1.x) * (p2.y - p1.y);
}

bool cw(const point& p1, const point& p2, const point& p3)
{
	return vec(p1, p2, p3) <= 0;
}

bool ccw(const point& p1, const point& p2, const point& p3)
{
	return vec(p1, p2, p3) >= 0;
}

bool in(const point& p, const point (&ar)[5])
{
	int c1 = 0, c2 = 0;
	for (int i = 0; i < 4; ++i) {
		if (cw(p, ar[i], ar[i + 1]))
			++c1;
		if (ccw(p, ar[i], ar[i + 1]))
			++c2;
	}
	return c1 == 4 || c2 == 4;
}

void solve()
{
	for (int i = 0; i < 4; ++i)
		cin >> a[i].x >> a[i].y;
	for (int i = 0; i < 4; ++i)
		cin >> b[i].x >> b[i].y;
	a[4] = a[0]; b[4] = b[0];
	for (int i = 0; i < 4; ++i) {
		if (in(a[i], b) || in(b[i], a)) {
			cout << "YES";
			return;
		}
	}
	int xmax = accumulate(a, a + 4, -inf, [](int val, const point& pt) { return max(val, pt.x); });
	int ymax = accumulate(a, a + 4, -inf, [](int val, const point& pt) { return max(val, pt.y); });
	int xmin = accumulate(a, a + 4, inf, [](int val, const point& pt) { return min(val, pt.x); });
	int ymin = accumulate(a, a + 4, inf, [](int val, const point& pt) { return min(val, pt.y); });
	int xc = (xmin + xmax) / 2;
	int yc = (ymin + ymax) / 2;
	if (in(point{ xc, yc }, b))
		cout << "YES";
	else 
		cout << "NO";
}

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0), cout.tie(0);
	int test = 1;
	//cin >> test;
	for (; test; --test)
		solve();
	return 0;
}