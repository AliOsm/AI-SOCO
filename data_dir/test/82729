#include <bits/stdc++.h>

using namespace std;

const int MAX = (int) 2e5 + 10;
vector<int> adjList[MAX];
long long size[MAX];
long long total = 0 , rootStart = 0;

long long dfs(int u, int p = -1, long long level = 0l)
{
	rootStart +=  size[u] * level;

	for (int v : adjList[u])
		if (v != p)
			size[u] += dfs(v, u, level + 1);

	return size[u];
}
long long getMax(int u, long long root, int p = -1)
{
	long long ans = root;

	for (int v : adjList[u])
		if (v != p)
			ans = max(ans, getMax(v, root + total - (size[v] * 2ll), u));

	return ans;
}

int main()
{

	ios::sync_with_stdio(false);
	cin.tie(0);

	int n;
	cin >> n;

	for (int i = 0; i < n; i++) cin >> size[i];

	for (int i = 0; i < n - 1; i++)
	{
		int u, v; cin >> u >> v; u--, v--;
		adjList[u].push_back(v); adjList[v].push_back(u);
	}

	rootStart = 0;total = dfs(0);
	cout << getMax(0, rootStart);

	return 0;

}
