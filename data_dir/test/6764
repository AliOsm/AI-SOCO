/*	Look, if you had, one shot, or one opportunity
		To seize everything you ever wanted. In one moment
			Would you capture it,or just let it slip ?4
*/
 
#include<iostream>
using namespace std;
typedef long long int ll;
typedef long double ld;
#define rep(i,a,b)  for(ll i=a;i<b;i++)
#define nl cout<<endl
 
#define pb push_back
#define ff first
#define ss second
#define hell 1000000007
 
#define test4(x,y,z,a) cout<<"x is "<<x<<"		y is "<<y<<"		z is "<<z<<"		a is "<<a<<endl;
#define test3(x,y,z) cout<<"x is "<<x<<"		y is "<<y<<"		z is "<<z<<endl;
#define test2(x,y) cout<<"x is "<<x<<"		y is "<<y<<endl;
#define test1(x) cout<<"x is "<<x<<endl;
#define N 300009
ll power1(ll a,ll b,ll m)
{
	ll ans=1;
	while(b)
	{
		if(b&1)
			ans=(ans*a)%m;
		b/=2;
		a=(a*a)%m;
	}
	return ans;
}
ll power2(ll a,ll b,ll m)
{
	ll ans=1;
	while(b)
	{
		if(b&1)
			ans=(ans*a)%m;
		b/=2;
		a=(a*a)%m;
	}
	return ans;
}          
ll power(ll a,ll b,ll m)
{
	ll ans=1;
	while(b)
	{
		if(b&1)
			ans=(ans*a)%m;
		b/=2;
		a=(a*a)%m;
	}
	return ans;
}      
ll pow(ll base, ll exp)
{
	ll result=1;
     	rep(i,0,exp)
     	result *= base;
     	return result;
}
 
ll find(ll pos)
{
     	ll sum=0,last_sum=0;
     	ll k=1;
     	ll result=0;
 
     	while(true)
	{
        	last_sum = sum;
        	sum+=9*pow(10, k-1)*k;
         	if(sum > pos)
		{
        		ll diff=pos-last_sum;
        		ll rank=diff/k;
             		ll mod=diff%k;
             		if(k==1)
			result=diff+1;
             		else
			result=((pow(10LL,k-1)+rank)/pow(10LL,k-1-mod))%10;
             		break; 
         	}
         	k++;
     	}
     	return result;
}
int gcdExtended(int a, int b, int *x, int *y); 
  
// Function to find modulo inverse of b. It returns 
// -1 when inverse doesn't 
int modInverse(int b, int m) 
{ 
    int x, y; // used in extended GCD algorithm 
    int g = gcdExtended(b, m, &x, &y); 
  
    // Return -1 if b and m are not co-prime 
    if (g != 1) 
        return -1; 
  
    // m is added to handle negative x 
    return (x%m + m) % m; 
} 
  
// Function to compute a/b under modlo m 
void modDivide(int a, int b, int m) 
{ 
    a = a % m; 
    int inv = modInverse(b, m); 
    if (inv == -1) 
       cout << "Division not defined"; 
    else
       cout << "Result of division is " << (inv * a) % m; 
} 
  
// C function for extended Euclidean Algorithm (used to 
// find modular inverse. 
int gcdExtended(int a, int b, int *x, int *y) 
{ 
    // Base Case 
    if (a == 0) 
    { 
        *x = 0, *y = 1; 
        return b; 
    } 
  
    int x1, y1; // To store results of recursive call 
    int gcd = gcdExtended(b%a, a, &x1, &y1); 
  
    // Update x and y using results of recursive 
    // call 
    *x = y1 - (b/a) * x1; 
    *y = x1; 
  
    return gcd; 
} 
int main()
{	
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	int temp1=0;
	int temp2=0;
	int temp3=0;
	temp1*=temp2;
	temp2*=temp3;
	temp3|=1;
	ll t;
	ll i,group_num,member_size,sum,last_sum,last_group_sum,group_sum,pos,res;
	cin>>t;   
	while(t--)
	{
        	group_num=1;
      		last_group_sum=0;
        	member_size=1;
        	sum=0;
        	cin>>i;
         	i--;
        	while(true)
		{
        		last_sum=sum;
        		group_sum=last_group_sum + member_size;
             		sum+=group_sum;
             		if(sum>i)
			{
                		res=find(i-last_sum);
                 		cout<<res<<endl;
                		break;
            		}
             		last_group_sum=group_sum;
             		group_num++;
             		if(group_num/pow(10, member_size)-(group_num-1)/pow(10, member_size) == 1)
			member_size++;
         	}
     	}
}