#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;

const ll MOD = 1e9+7;

ll fact[30], n, a[30];

inline void upd(ll &x, ll y){
    x += y;
    if (x >= MOD)
        x -= MOD;
}

map<pair<ll, int>, int > mp2;
int f1(ll x){
    int n1 = n/2;
    mp2.clear();
    for (int mask = 0; mask < (1<<n1); mask++){
        ll sum = 0;
        for (int i = 0; i < n1; i++){
            if (mask & (1<<i))
                sum += a[i];
        }
        if (sum > x)
            continue;
        ++mp2[{sum, __builtin_popcount(mask)}];
    }
    int n2 = n-n1;
    ll ans = 0;
    for (int mask = 0; mask < (1<<n2); mask++){
        ll sum = 0;
        for (int i = 0; i < n2; i++){
            if (mask & (1<<i))
                sum += a[n1+i];
        }
        if (sum > x)
            continue;
        int cnt = __builtin_popcount(mask);
        for (int k = cnt; k <= n; k++){
            if (mp2.find({x-sum, k-cnt}) == mp2.end())
                continue;
            upd(ans, mp2[{x-sum, k-cnt}]*fact[k]%MOD*fact[n-k]%MOD );
        }
    }
    return ans;
}

ll st[30];

map<pair<ll, ll >, int > mp1[25][25];
map<ll, int> used[25];

int n1, n2;

ll x, y;

void rec1(int pos, int cnt1, int cnt2, ll sum1, ll sum2){
    if (x < sum1 || y-x < sum2)
        return;
    if (pos == n1){
        used[cnt1][sum1] = 1;
        ++mp1[cnt1][cnt2][{sum1, sum2}];
        return;
    }
    rec1(pos+1, cnt1, cnt2, sum1, sum2);
    rec1(pos+1, cnt1+1, cnt2, sum1+a[pos], sum2);
    rec1(pos+1, cnt1, cnt2+1, sum1, sum2+a[pos]);
}

ll ans;

void rec2(int pos, int cnt1, int cnt2, ll sum1, ll sum2){
    if (x < sum1 || y-x < sum2)
        return;
    if (pos == n2){
        for (int i = cnt1; i <= n; i++){
            for (int j = cnt2; j <= n-i; j++){
                if (used[i-cnt1].find(x-sum1) == used[i-cnt1].end())
                    continue;
                /*if (mp1[i-cnt1][j-cnt2].find({x-sum1, (y-x)-sum2} ) != mp1[i-cnt1][j-cnt2].end())*/{
                    //cout << "fnd " << endl;
                    ll cur = fact[i]*fact[j]%MOD*fact[n-i-j]%MOD*mp1[i-cnt1][j-cnt2][{x-sum1, (y-x)-sum2}]%MOD;
                    upd(ans, cur);
                }
            }
        }
        return;
    }
    rec2(pos+1, cnt1, cnt2, sum1, sum2);
    rec2(pos+1, cnt1+1, cnt2, sum1+a[pos+n1], sum2);
    rec2(pos+1, cnt1, cnt2+1, sum1, sum2+a[pos+n1]);
}

void f2(){

    if (x > y)
        swap(x, y);
    n1 = n/2;
    n2 = n-n1;
    rec1(0, 0, 0, 0, 0);
    rec2(0, 0, 0, 0, 0);
}

int b[3];

int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

    cin >> n;
    fact[0] = 1;
    st[0] = 1;
    for (int i = 1; i <= n; i++){
        fact[i] = (fact[i-1] * i) % MOD;
        st[i] = (st[i-1] * 3) % MOD;
    }
    for (int i = 0; i < n; i++){
        cin >> a[i];
    }
    int k;
    cin >> k;
    for (int i = 0; i < k; i++){
        cin >> b[i];
    }
    if (k == 0){
        ans = fact[n];
    } else
    if (k == 1){
        ans = (fact[n]-f1(b[0])+MOD)%MOD;
    } else {
        x = b[0], y = b[1];
        ans = (fact[n]-(f1(b[0])+f1(b[1]))%MOD+MOD)%MOD;
        f2();
    }

    cout << ans;


}
