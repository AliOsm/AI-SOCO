
// In the name of God
// Code by: mrMaster

#include <bits/stdc++.h>

using namespace std;

inline int in() {int x; scanf("%d",&x); return x;}
#define debug(x) cerr << #x << '=' << (x) << endl
#define FOR(i,j,k) for(int i=j;i<k;++i)
#define bpc __builtin_popcount
#define blz __builtin_clz
#define btz __builtin_ctz
#define Size(x) ((int)(x).size())
#define endl '\n'
#define boost ios_base :: sync_with_stdio(false) , cin.tie(0) , cout.tie(0)
#define pb push_back

typedef long long ll;
//typedef long double double;
typedef pair<int,int>pii;

const int INF = 1e9 + 10;
const ll LINF = 1000ll*1000*1000*1000*1000*1000 + 100;
const int MN = 2e5 + 10;

double dp[MN], St[MN] , Fn[MN];
double Sum1 , Sum2;
int sz[MN];
vector<int>adj[MN];
int n;

void input()
{
	n = in();
	for(int i=0;i<n-1;++i){
		int a,b;
		a = in() , b = in();
		--a,--b;
		adj[a].pb(b) , adj[b].pb(a);
	}
	for(int i=0;i<n;++i){
		scanf("%lf %lf" , &St[i] , &Fn[i]);
		Sum1 += St[i] , Sum2 += Fn[i];
	}
}

void dfs_up(int s, int pr)
{
	sz[s] = 1;
	for(int i=0;i<Size(adj[s]);++i){
		int v= adj[s][i];
		if(v == pr) continue;
		dfs_up(v , s);
		sz[s] += sz[v];
	}
	dp[0] += (Fn[s]/Sum2)*(n-sz[s]);
}

void dfs_down(int s, int pr)
{
	if(pr != -1)
		dp[s] = dp[pr] + (Fn[pr]/Sum2)*sz[s] - (Fn[s]/Sum2)*(n-sz[s]);
	for(int i=0;i<Size(adj[s]);++i){
		int v = adj[s][i];
		if(v == pr) continue;
		dfs_down(v , s);
	}
}

int main()
{
	input();
	dfs_up(0 , -1);
	dfs_down(0 , -1);
	double ans = 0;
	for(int i=0;i<n;++i) ans += (St[i]/Sum1)*dp[i];
	double t = ans;
	printf("%.12lf\n" , t);
	return 0;
}

