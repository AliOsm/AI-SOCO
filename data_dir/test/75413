///Bismillahir Rahmanir Rahim
#include<bits/stdc++.h>
#define int long long
#define fi first
#define si second
#define mp make_pair
#define pb push_back
#define pi pair<int,int>
#define f(l,r) for(int i=l;i<=r;i++)
#define M 100009
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define bug(i) //cout<<"ekhane ami  "<<i<<endl;
using namespace std;
const int inf=1e18;
const int mod=1e9+7;
int n,m;
vector<int>of[M+2],adj[M+2],cost[M+2],nxt[M+2];
int dis[M+2];
int fnd(int node,int tym)
{
   int l=0;
   int r=of[node].size();
   int id=-1;
   r--;
   //cout<<l<<" "<<r<<endl;
   while(l<=r)
   {
       int m=(l+r)/2;
       bug(3)
       if(of[node][m]==tym)
       {
           id=m;
           bug(45);
           break;
       }
       else if(of[node][m]>tym)
       {
           r=m-1;
           bug(55)
       }
       else l=m+1;
       bug(77)
   }
   if(id==-1)return tym;
   else return nxt[node][id];
}
void dijkstra(int src)
{
    priority_queue<pi>q;
    f(1,n)dis[i]=inf;
    dis[src]=0;
    bug(6)
    q.push(mp(-fnd(src,0),src));
    bug('a')
    while(!q.empty())
    {   bug(4)
        pi tmp=q.top();
        q.pop();
        int u=tmp.si;
        int ex=fnd(u,dis[u]);
        int sz=adj[u].size();
        for(int j=0;j<sz;j++)
        {
            int w=cost[u][j];
            int v=adj[u][j];
            w+=ex;
            if(w<dis[v])
            {
                dis[v]=w;
                q.push(mp(-fnd(v,w),v));
            }
        }
    }
}
main()
{
  fast
  cin>>n>>m;
  for(int i=0;i<m;i++)
  {
      int u,v,w;
      cin>>u>>v>>w;
      adj[u].push_back(v);
      adj[v].push_back(u);
      cost[u].push_back(w);
      cost[v].push_back(w);
  }
  for(int i=1;i<=n;i++)
  {

      int k;
      cin>>k;
      for(int j=1;j<=k;j++)
      {
          int x;
          cin>>x;
          of[i].push_back(x);
      }
      nxt[i].resize(k);
      of[i].resize(k);
      for(int j=k-1;j>=0;j--)
        {
            if(j==k-1)nxt[i][j]=of[i][j]+1;
            else if(of[i][j]+1==of[i][j+1])
            {
                nxt[i][j]=nxt[i][j+1];
            }
            else
            {
                nxt[i][j]=of[i][j]+1;
            }


        }

  }
  bug(1);
 dijkstra(1);
 if(dis[n]>=inf)
 {
     cout<<"-1"<<endl;
     return 0;
 }
 bug(2);
 cout<<dis[n]<<endl;

    return 0;
}
