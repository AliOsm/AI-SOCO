#include <bits/stdc++.h>
using namespace std;
#define sc(a) scanf("%d", &a)
#define sc2(a, b) scanf("%d %d", &a, &b)
#define sc3(a, b, c) scanf("%d %d %d", &a, &b, &c)
#define pri(x) printf("%d\n", x)
#define prie(x) printf("%d ", x)
#define mp make_pair
#define pb push_back
#define BUFF ios::sync_with_stdio(false);
#define db(x) cerr << #x << " == " << x << endl;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3fll;
const ld pi = acos(-1);
const int MOD = 1e9 + 7;
vii ed;
map<int, int> aparece;
void no() {
  puts("NO");
  exit(0);
}
void yes() {
  puts("YES");
  for (ii x : ed) {
    prie(x.first);
    pri(x.second);
  }
  exit(0);
}
int n;
void trivial() {
  vi deleta;
  for (auto x : aparece)
    if (x.second == 1)
      deleta.pb(x.first);
  for (int x : deleta) {
    aparece.erase(x);
    ed.pb({x, n});
  }
}
template <class T> struct Bit {
  vector<T> bit;
  int n;
  Bit(int n_) : n(n_), bit(n_) {}
  void add(int idx, T val) {
    while (idx < n) {
      bit[idx] += val;
      idx += idx & -idx;
    }
  }
  T sum(int idx) {
    T ret = 0;
    while (idx > 0) {
      ret += bit[idx];
      idx -= idx & -idx;
    }
    return ret;
  }
  T query(int L, int R) {
    T ret = sum(R);
    if (L > 0)
      ret -= sum(L - 1);
    return ret;
  }
};

int main() {
  sc(n);
  vi folha;
  for (int i = 1; i < n; i++) {
    int u, v;
    sc2(u, v);
    if (n != u and n != v) {
      no();
    } else {
      if (n != u)
        aparece[u]++;
      if (n != v)
        aparece[v]++;
    }
  }
  vi nao_aparece;
  vi altura;
  for (int i = 1; i < n; i++)
    if (!aparece.count(i)) {
      nao_aparece.pb(i), altura.pb(0);
    }
  trivial();
  for (auto x : aparece)
    if (x.second - 1 > nao_aparece.size())
      no();
  Bit<int> Dilson(n + 10);
  for (int i = 1; i <= n; i++)
    Dilson.add(i, 1);

  for (int alt = n; alt >= 1; alt--) {
    for (auto x : aparece) {
      if (x.second == alt) {
        int last = x.first;
        int cnt = alt - 1;
        for (int i = (int)nao_aparece.size() - 1; i >= 0; i--) {
          if (nao_aparece[i] > x.first)
            continue;
          if (altura[i] == 0) {
            altura[i] = cnt--;
            if (altura[i] == 1) {
              ed.pb({nao_aparece[i], n});
            }
            ed.pb({last, nao_aparece[i]});
            Dilson.add(i + 1, -1);
            last = nao_aparece[i];
          } else if (altura[i] == cnt and Dilson.query(1, i + 1) < cnt) {
            ed.pb({last, nao_aparece[i]});
            cnt = 0;
            break;
          }
          if (cnt == 0)
            break;
        }
        if (cnt)
          no();
      }
    }
  }
  yes();
}
