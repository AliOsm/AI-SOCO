#include<bits/stdc++.h>
#define si(x) scanf("%d",&x)
#define sii(x,y) scanf("%d %d",&x,&y)
#define siii(x,y,z) scanf("%d %d %d",&x,&y,&z)
#define su(x) scanf("%u",&x)
#define sl(x) scanf("%ld",&x)
#define sli(x) scanf("%lld",&x)
#define slii(x,y) scanf("%lld %lld",&x,&y)
#define sliii(x,y,z) scanf("%lld %lld %lld",&x,&y,&z)
#define slu(x) scanf("%llu",&x)
#define sf(x) scanf("%f",&x)
#define slf(x) scanf("%lf",&x)
#define slff(x,y) scanf("%lf %lf",&x,&y)
#define slfff(x,y,z) scanf("%lf %lf %lf",&x,&y,&z)
#define sc(x) scanf("%c",&x)
#define ss(x) scanf("%s",x)
#define pf printf
#define fpf fprintf
#define pb push_back
#define f(i,x,y,z) for(int i=x;i<y;i=i+z)
#define f1(i,x,y,z) for(int i=x;i>y;i=i-z)
#define MAX 1000000000
#define pi 2*acos(0)
#define mp make_pair
#define M 1000000007
#define xx first
#define yy second
#define N 200005
#define E 10005
#define vc vector
#define pq priority_queue
#define Q queue
#define pathsize 1000000


using namespace std;

typedef long long int ll;
typedef unsigned long long int llu;

struct info
{
    llu sum;
    int el;
}tree[N];

ll a[N], b[N];

int boro(ll n, int l, int r)
{
    int m;
    while(l<r){
        m = (l+r)>>1;
        if(a[m]<=n) l = m+1;
        else r = m;
    }
    if(a[r]<=n) return r+1;
    return r;
}

int soto(ll n, int l, int r)
{
    int m;
    while(l<r){
        m = (1+l+r)>>1;
        if(a[m]>=n) r = m-1;
        else l = m;
    }
    if(a[r]>=n) return r-1;
    return r;
}

int soman(ll n, int l, int r)
{
    int m;
    while(l<r){
        m = (l+r)>>1;
        if(a[m]<n) l = m+1;
        else if(a[m]>n) r = m;
        else return m;
    }
    if(a[r]==n) return r;
    else if(a[r]>n) return r-1;
    return r+1;
}

info add(info a, info b)
{
    a.sum += b.sum;
    a.el += b.el;
    return a;
}


void update(int i, ll v, int n)
{
    ///cout<<"up: "<<i<<" "<<v<<endl;
    while(i<=n)
    {

        tree[i].sum += v;
        tree[i].el++;
        ///cout<<i<<" "<<tree[i].sum<<" "<<tree[i].el<<endl;
        i += (i&(-i));
    }
}

info query(int i, int j)
{
    info ans;
    ans.sum = ans.el = 0;
    if(i>j) return ans;
    while(j>=i){
        ans.sum += tree[j].sum;
        ans.el += tree[j].el;
        j -= (j&(-j));
    }
    i--;
    while(i>j){
        ans.sum -= tree[i].sum;
        ans.el -= tree[i].el;
        i -= (i&(-i));
    }
    return ans;
}

int main()
{
    info tmp;
    llu ans = 0, tmp1;
    int n, sign = 1, tsign;
    scanf("%d",&n);
    for(int i = 1;i<=n;i++){
        scanf("%lld",&a[i]);
        b[i] = a[i];
    }
    sort(a+1,a+1+n);
    ///for(int i = 1;i<=n;i++) cout<<a[i]<<" "<<b[i]<<endl;
   /// cout<<endl;
    for(int i = 1;i<=n;i++){
        tree[i].el = tree[i].sum = 0;
    }
    ///cout<<"sd";
    for(int i = n;i>0;i--)
    {
        ///cout<<"sd";
        tmp = add(query(boro(b[i]+1,1,n),n),query(1,soto(b[i]-1,1,n)));
        ///cout<<tmp.sum<<" "<<tmp.el<<" ";
        ///cout<<"sd";
        ///ans += (tmp.sum-tmp.el*b[i]);
        if(tmp.sum>=(tmp.el*b[i])){
            tmp1 = tmp.sum-tmp.el*b[i];
            tsign = 1;
        }
        else{
            tmp1 = tmp.el*b[i]-tmp.sum;
            tsign = -1;
        }
        if(sign*tsign==1){
            ans += tmp1;
        }
        else{
            if(ans>=tmp1) ans -= tmp1;
            else{
                ans = tmp1-ans;
                sign = -sign;
            }
        }
        update(soman(b[i],1,n),b[i],n);
        ///cout<<i<<" "<<ans<<endl;
       /// cout<<ans<<endl;
    }
    if(sign==-1) printf("-");
    printf("%llu\n",ans);
    return 0;
}
