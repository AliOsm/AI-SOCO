#include <bits/stdc++.h>

// IGNORE THE #pragma, just to suppress annoying warnings on IDE

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wuninitialized"
using namespace std;


typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define per(i, start, end) for(int i = (int)start-1; i >= end; --i)
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
const double PI = 3.14159265358979323846;
const double eps = (1e-9);

int dcmp(double x, double y)
{ return fabs(x - y) <= eps ? 0 : x < y ? -1 : 1; }

int valid(int cur, int index, int d, vector<int> const& a, int res = 0)
{
    if (index == sz(a))
        return res;
    for(int i = -1; i <= 1; ++i)
    {
        if ((a[index] + i) - cur == d)
        {
            return valid(a[index] + i, index+1, d, a, res+abs(i));
        }
    }
    return -1;
}
int main()
{
    ios_base::sync_with_stdio(false);
//    freopen("input.txt", "r", stdin);
    int n;
    cin >> n;
    if (n <= 2)
    {
        cout << 0 << endl;
        return 0;
    }
    vector<int> a;
    rep(i, 0, n)
    {
        int x;
        cin >> x;
        a.pb(x);
    }
    int ans = INT_MAX;
    bool sol = false;
    for (int i = -1; i <= 1; ++i)
    {
        for (int j = -1; j <= 1; ++j)
        {
            int d = (a[1] + j) - (a[0] + i);
            int moves = valid(a[1] + j, 2, d, a);
            if (moves != -1)
            {
                ans = min(ans, moves+abs(i)+abs(j));
                sol = true;
            }
        }
    }
    if (sol)
        cout << ans << endl;
    else
        cout << -1 << endl;
    return 0;
}

#pragma clang diagnostic pop