#include<bits/stdc++.h>
//#define DEBUG
#define FOR(i,n) for(int i=1;i<=n;i++)
#define FORZ(i,n) for(int i=0;i<n;i++)
#define ll long long
#define ull unsigned long long
#define pii pair<int,int>
#define piii pair<pair<int,int>,int>
#define ff first
#define ss second
#define mp make_pair
#define pb push_back
#define SIZE 32622
#define MOD 998244353    
#define LD long long double
#define bpc __builtin_popcount
#define gentum getnum
#define lastbit (1<<30)
using namespace std;

inline ll getnum()
{
    char c = getchar();
    ll num,sign=1;
    for(;c<'0'||c>'9';c=getchar())if(c=='-')sign=-1;
    for(num=0;c>='0'&&c<='9';)
    {
        c-='0';
        num = num*10+c;
        c=getchar();
    }
    return num*sign;
}

char X[][8]={"1110111", "0010010", "1011101", "1011011", "0111010", "1101011", "1101111", "1010010", "1111111", "1111011"};
int siz[]={6,2,5,5,4,5,6,3,7,6};

char S[2004][10];
int dp[2004][2004];
int from[2004][20004];
int is[2004][2004];

int main()
{
    int n=getnum(),k=getnum();

    int tot=0;
    for(int i=1;i<=n;i++)gets(S[i]);

    for(int t=0;t<=9;t++)dp[n+1][0]=1;

    for(int i=0;i<2001;i++)for(int j=0;j<2001;j++)from[i][j]=-1;

    for(int i=n;i>=1;i--)
    {
        for(int j=0;j<=k;j++)
        {
            if(dp[i+1][j]==0)continue;
            for(int t=0;t<=9;t++)
            {
                int need=0,ok=0;
                //printf("%s %s\n",S[i],X[t]);
                for(int p=0;p<7;p++)
                {
                    if(S[i][p]=='1'&&X[t][p]=='0')ok=10;
                    if(S[i][p]=='1'&&X[t][p]=='1')ok++;
                    if(S[i][p]=='0'&&X[t][p]=='1')need++,ok++;
                }

                if(j+need<=k&&ok==siz[t])
                {
                    int jj=j+need;
                    dp[i][jj]=1;

                    if(is[i][jj]==t)
                    {
                        if(from[i][jj]==-1)from[i][jj]=need;
                        else 
                        {
                            int pos=jj-from[i][jj];
                            if(is[i+1][pos]<is[i+1][j])
                            {
                                from[i][jj]=need;
                            }
                        }
                    }
                    if(is[i][jj]<t)
                    {
                        from[i][jj]=need;
                        is[i][jj]=t;
                    }
                    //cout<<i<<' '<<jj<<' '<<need<<' '<<t<<endl;
                }
            }
        }
    }

    if(dp[1][k]==0)
    {
        printf("-1");
    }
    else
    {
        int i=1,j=k;
        
        while(i<=n)
        {
            printf("%d",is[i][j]);
            j-=from[i][j];
            i++;
        }
    }    
}