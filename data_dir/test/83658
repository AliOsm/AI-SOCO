// In The Name Of God :
#include <bits/stdc++.h>
using namespace std ;
#define PB push_back
#define X first 
#define Y second
#define ALL(a) a . begin ( ) , a . end ( ) 
#define print(ab) for(int ii=0;ii<ab.size();ii++)cout<<ab[ii]<< ' ' ;
#define print_pair(ab) for(int i=0;i<ab.size();i++)cout<<ab[i].X<< " " << ab[i].Y<<endl ;
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define int long long 
typedef long long ll ;
typedef long double ld;
typedef pair < int , int > pii ;
typedef pair < int , pii > piii ;
typedef string S ;
const int maxn = 2e5 + 100 ;
const int mod = 1e9 + 7 ;
const int inf = 1LL << 60 ;
const int base = 127 ;
const int maxL = 22 ;
int n , k , ar [ maxn ] , sum [ maxn ] , dp1 [ maxn ] , ans , print [ maxn ] , a , b ; 

main ( ) 
{  
  fast ;
  cin >> n >> k ;
  for ( int i = 0 ; i < n ; i ++ ) 
    cin >> ar [ i ] ; 
  sum [ 0 ] = ar [ 0 ] ; 
  for ( int i = 1 ; i < n ; i ++ )
    sum [ i ] = sum [ i - 1 ] + ar [ i ]  ;
  dp1 [ k - 1 ] = sum [ k - 1 ] ;
  print [ k - 1 ] = 0 ;
  int pos = 0 ;  
  for ( int i = k ; i < n ; i ++ , pos ++ ) 
    if ( dp1 [ i - 1 ] >= sum [ i ] - sum [ pos ] ) 
      print [ i ] = print [ i - 1 ] , dp1 [ i ] = dp1 [ i - 1 ] ; 
    else 
      print [ i ] = pos + 1 , dp1 [ i ] = sum [ i ] - sum [ pos ] ; 
  // for ( int i = 0 ; i < n ; i ++ )
  //   cout << dp1 [ i ] << ' ' ;
  // cout << endl ;
  // for ( int i = 0 ; i < n ; i ++ )
  //   cout << print [ i ] << ' ' ;
  // cout << endl ;
  pos = 2 * k - 1 ;
  for ( int i = k ; pos < n ; i ++ , pos ++ ) 
    if ( ans < sum [ pos ] - sum [ i - 1 ] + dp1 [ i - 1 ] )
      ans = sum [ pos ] - sum [ i - 1 ] + dp1 [ i - 1 ] , a = print [ i - 1 ] , b = i ;
    else if ( ans == sum [ i + k - 1 ] - sum [ i - 1 ] + dp1 [ i - 1 ] )
      { 
	if ( a > print [ i - 1 ] ) 
	  a = print [ i - 1 ] , b = i ;
	else if ( a == print [ i - 1 ] ) 
	  if ( b > i + k - 1 ) 
	    b = i ;
      } 
  //cout << ans << endl ;
  cout << a + 1 << ' ' << b + 1 << endl ;
}
