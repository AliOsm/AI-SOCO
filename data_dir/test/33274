		//			- -- --- ---- -----be name khoda----- ---- --- -- -			\\

#include <bits/stdc++.h>

using namespace std;

const int N = 200002;

int ccc, start[N], finish[N], h[N], ql[N], qr[N];
map <pair<int, pair<int, int>>, int> magic;
vector <int> g[N], level[N];
set <string> st;
string name[N];

void dfs(int v, int dep = 0)
{
	h[v] = dep;
	level[dep].push_back(v);
	start[v] = ccc++;
	for(auto u : g[v])
		dfs(u, dep + 1);
	finish[v] = ccc++;
}

int cnt(int dep, int l, int r)
{
	pair<int, pair<int, int>> call = make_pair(dep, make_pair(l, r));
	if(magic[call])
		return magic[call];
	st.clear();
	for(int i = l; i < r; i++)
		st.insert(name[level[dep][i]]);
	return magic[call] = st.size();
}

int _search(int dep, int x)
{
	int l = -1, r = level[dep].size();
	while(l + 1 < r)
	{
		int mid = (l + r)/2;
		if(start[level[dep][mid]] <= x)
			l = mid;
		else
			r = mid;
	}
	return r;
}

int search(int dep, int v, int t)
{
	ql[t] = _search(dep, start[v]);
	qr[t] = _search(dep, finish[v]);
	if(qr[t] <= ql[t])
		return 1;
	return 0;
}

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	int n, m;
	cin >> n;
	for(int i = 1; i <= n; i++)
	{
		int dad;
		cin >> name[i] >> dad;
		g[dad].push_back(i);
	}
	dfs(0);
	cin >> m;
	for(int i = 0; i < m; i++)
	{
		int v, k;
		cin >> v >> k;
		if(!search(h[v] + k, v, i))
			cout << cnt(h[v] + k, ql[i], qr[i]) << endl;
		else
			cout << 0 << endl;
	}
	return 0;
}
