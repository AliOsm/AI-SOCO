#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>
#include <memory.h>

#define ll long long
#define ld long double
#define ull unsigned ll
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pii pair<int,int> 
#define vi vector<int>
#define vvi vector<vector<int>>
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
const int  Inf = 1e9;
ll LINF = (ll)4e18;
using namespace std;
ll mod = 1e9 + 7;
#define M_PI       3.14159265358979323846   // pi

struct room{
	int l, w, h;

};

struct kek{
	int l, w, c;

};

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("cities.in", "r", stdin);
	//freopen("cities.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	int n;
	cin >> n;
	vector<room> r(n);
	forn(i, 0, n) {
		int l, w, h;
		cin >> l >> w >> h;
		r[i].l = l;
		r[i].w = w;
		r[i].h = h;
	}
	int m;
	cin >> m;
	vector<kek> q(m);
	forn(i, 0, m) {
		int l, w, cost;
		cin >> l >> w >> cost;
		q[i].l = l;
		q[i].w = w;
		q[i].c = cost;
	}
	ll ans = 0;
	forn(i, 0, n) {
		int p = r[i].w * 2 + r[i].l * 2;
		int cur = 2e9;
		forn(j, 0, m) {
			if (q[j].l < r[i].h) continue;
			int tmp = (p + q[j].w - 1) / q[j].w;
			int qq = q[j].l / r[i].h;
			int cnt = (tmp + qq - 1) / qq;
			cur = min(cur, cnt*q[j].c);
		}
		ans += cur;
	}
	cout << ans;
	return 0;
}