// There is nothing in caterpillar that tells you its going to be a butterfly ------------------------------- !
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define pb push_back
#define f first
#define s second
#define mod 1000000007
#define inf 1e18

#define pi pair<ll,ll>
#define pii pair<pi,ll>
#define f first
#define mp make_pair
#define pb push_back
#define s second
#define rep(i,n) for(int i=0;i<n;i++)
#define forup(i,a,b) for(int i=a;i<=b;i++)
ll c[100011];
ll ans[100011];
int pos[100011];
int sz[100011];
vector<int>g[100011];
vector<int>order;
void dfs(int v,int p){
    order.pb(v);
    pos[v]=order.size();
    sz[v]=1;
    for(auto x:g[v]){
        if(x!=p){
            dfs(x,v);
            sz[v]+=sz[x];
        }
    }
}
int buc,maxf=0;
ll sum[100011];
ll m[100011];

void add(int l){
    l=order[l-1];
    sum[m[c[l]]]-=c[l];
    m[c[l]]++;
    sum[m[c[l]]]+=c[l];
    if(m[c[l]]>maxf){
        maxf=m[c[l]];
    }
}
void rem(int l){
    l=order[l-1];
    sum[m[c[l]]]-=c[l];
    m[c[l]]--;
    sum[m[c[l]]]+=c[l];
    if(sum[maxf]==0) maxf--;
}
bool func(pii a,pii b){
    if(a.f.f/buc==b.f.f/buc) return a.f.s<b.f.s;
    return a.f.f/buc < b.f.f/buc;
}
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n,x,y;
    cin >> n;
    rep(i,n){
        cin >> c[i+1];
    }
    rep(i,n-1){
        cin >> x >> y;
        g[x].pb(y);
        g[y].pb(x);
    }
    dfs(1,0);
    vector<pii>Q;
    for(int i=1;i<n+1;i++){
        Q.pb({ {pos[i],pos[i]+sz[i]-1} ,i});
    }
    buc=sqrt(n);
    sort(Q.begin(),Q.end(),func);
    int L=1;
    int R=0;
    int l,r,id;
    for(auto q:Q){
        l=q.f.f;
        r=q.f.s;
        id=q.s;
        while(R<r){
            R++;
            add(R);
        }
        while(R>r){
            rem(R);
            R--;
        }
        while(L<l){
            rem(L);
            L++;
        }
        while(L>l){
            L--;
            add(L);
        }
        ans[id]=sum[maxf];
    }
    rep(i,n){
        cout<<ans[i+1]<<" ";
    }
}
