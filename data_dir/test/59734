#include <bits/stdc++.h>
#define ll  int64_t
#define pii pair<int,int>
#define pll pair<ll,ll>
#define sc second
#define fr first

using namespace std;

const int N = 3e5+100;
const int mod = 998244353;

namespace fft
{
struct num
{
    double x,y;
    num()
    {
        x=y=0;
    }
    num(double x,double y):x(x),y(y) {}
};
inline num operator+(num a,num b)
{
    return num(a.x+b.x,a.y+b.y);
}
inline num operator-(num a,num b)
{
    return num(a.x-b.x,a.y-b.y);
}
inline num operator*(num a,num b)
{
    return num(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);
}
inline num conj(num a)
{
    return num(a.x,-a.y);
}
int base=1;
vector<num> roots= {{0,0},{1,0}};
vector<int> rev= {0,1};
const double PI=acosl(-1.0);
void ensure_base(int nbase)
{
    if(nbase<=base) return;
    rev.resize(1<<nbase);
    for(int i=0; i<(1<<nbase); i++)
        rev[i]=(rev[i>>1]>>1)+((i&1)<<(nbase-1));
    roots.resize(1<<nbase);
    while(base<nbase)
    {
        double angle=2*PI/(1<<(base+1));
        for(int i=1<<(base-1); i<(1<<base); i++)
        {
            roots[i<<1]=roots[i];
            double angle_i=angle*(2*i+1-(1<<base));
            roots[(i<<1)+1]=num(cos(angle_i),sin(angle_i));
        }
        base++;
    }
}
void fft(vector<num> &a,int n=-1)
{
    if(n==-1) n=a.size();
    assert((n&(n-1))==0);
    int zeros=__builtin_ctz(n);
    ensure_base(zeros);
    int shift=base-zeros;
    for(int i=0; i<n; i++)
        if(i<(rev[i]>>shift))
            swap(a[i],a[rev[i]>>shift]);
    for(int k=1; k<n; k<<=1)
    {
        for(int i=0; i<n; i+=2*k)
        {
            for(int j=0; j<k; j++)
            {
                num z=a[i+j+k]*roots[j+k];
                a[i+j+k]=a[i+j]-z;
                a[i+j]=a[i+j]+z;
            }
        }
    }
}
vector<num> fa,fb;

vector<int> multiply_mod(vector<int> &a,vector<int> &b,int m,int eq=0)
{
    int need=a.size()+b.size()-1;
    int nbase=0;
    while((1<<nbase)<need) nbase++;
    ensure_base(nbase);
    int sz=1<<nbase;
    if(sz>(int)fa.size()) fa.resize(sz);
    for(int i=0; i<(int)a.size(); i++)
    {
        int x=(a[i]%m+m)%m;
        fa[i]=num(x&((1<<15)-1),x>>15);
    }
    fill(fa.begin()+a.size(),fa.begin()+sz,num {0,0});
    fft(fa,sz);
    if(sz>(int)fb.size()) fb.resize(sz);
    if(eq) copy(fa.begin(),fa.begin()+sz,fb.begin());
    else
    {
        for(int i=0; i<(int)b.size(); i++)
        {
            int x=(b[i]%m+m)%m;
            fb[i]=num(x&((1<<15)-1),x>>15);
        }
        fill(fb.begin()+b.size(),fb.begin()+sz,num {0,0});
        fft(fb,sz);
    }
    double ratio=0.25/sz;
    num r2(0,-1),r3(ratio,0),r4(0,-ratio),r5(0,1);
    for(int i=0; i<=(sz>>1); i++)
    {
        int j=(sz-i)&(sz-1);
        num a1=(fa[i]+conj(fa[j]));
        num a2=(fa[i]-conj(fa[j]))*r2;
        num b1=(fb[i]+conj(fb[j]))*r3;
        num b2=(fb[i]-conj(fb[j]))*r4;
        if(i!=j)
        {
            num c1=(fa[j]+conj(fa[i]));
            num c2=(fa[j]-conj(fa[i]))*r2;
            num d1=(fb[j]+conj(fb[i]))*r3;
            num d2=(fb[j]-conj(fb[i]))*r4;
            fa[i]=c1*d1+c2*d2*r5;
            fb[i]=c1*d2+c2*d1;
        }
        fa[j]=a1*b1+a2*b2*r5;
        fb[j]=a1*b2+a2*b1;
    }
    fft(fa,sz);
    fft(fb,sz);
    vector<int> res(need);
    for(int i=0; i<need; i++)
    {
        ll aa=fa[i].x+0.5;
        ll bb=fb[i].x+0.5;
        ll cc=fa[i].y+0.5;
        res[i]=(aa+((bb%m)<<15)+((cc%m)<<30))%m;
    }
    return res;
}
vector<int> square_mod(vector<int> &a,int m)
{
    return multiply_mod(a,a,m,1);
}
};


int a[N];
int b[N];
int qu[N];
ll fac[N];
ll inv[N];
int res[N];

ll pw(ll x, ll p){
    if(!p)return 1;
    ll z = pw(x,p/2);
    z *= z;
    z %= mod;
    if(p%2 == 0)
        return z;
    z *= x;
    z %= mod;
    return z;
}

ll c(ll x, ll y){
    if(x < y)return 0;
    ll res = fac[x] * inv[y];
    res %= mod;
    res *= inv[x-y];
    res %= mod;
    return res;
}


void BF(int once,int twice ,int bin,int qin){
    int sz = qu[qin] - b[bin]-1;
    for(int j=0 ;j <=min(twice*2,sz) ; j+=2){
        ll r = c(twice,j/2)*c(once+twice-j/2,sz-j);
        r %= mod;
        r *= pw(2,sz-j);
        r %= mod;
        res[qin] += r;
        if(res[qin] >= mod)
            res[qin] -= mod;
    }
}

int main(){

    fac[0] = inv[0] = 1;
    for(int i=1; i<N; i++){
        fac[i] = fac[i-1]*i;
        fac[i] %= mod;
        inv[i] = pw(fac[i],mod-2);
    }

    int n,k;
    cin>>n>>k;
    for(int i=0 ;i <n ;i ++){
        scanf("%d",&a[i]);
    }

    for(int i=0 ;i <k ;i ++){
        scanf("%d",&b[i]);
    }
    int q;
    cin>>q;
    for(int i=0 ;i <q ;i ++){
        scanf("%d",&qu[i]);
        qu[i] /= 2;
    }

    sort(a,a+n);
    sort(b,b+k);
    int j=0,once = 0;
    int twice = 0;
    int rep[N] = {};
    for(int i=0 ;i < k ;i ++){
        while(j < n && a[j]  < b[i]){
            rep[a[j]]++;
            if(rep[a[j]] == 1)once++;
            if(rep[a[j]] == 2)once--,twice++;
            j++;
        }
        vector<int>x;
        vector<int>y;
        for(int j=0 ;j <=once ; j++){
            ll r = fac[once]*inv[j];
            r %= mod;
            r *= inv[once-j];
            r %= mod;
            r *= pw(2,j);
            r %= mod;
            x.push_back(r);
        }
        for(int j=0 ;j <=2*twice ; j++){
            ll r = fac[2*twice]*inv[j];
            r %= mod;
            r *= inv[2*twice-j];
            r %= mod;
            y.push_back(r);
        }
        x = fft::multiply_mod(x,y,mod);
        for(int j=0 ;j <q ;j ++){
            int nm = qu[j]-b[i]-1;
            if(nm >=0 && nm <x.size()){
                res[j] += x[nm];
                res[j] %= mod;
            }
        }
    }
    for(int i=0 ;i <q ;i ++){
        printf("%d\n",res[i]);
    }
    return 0;
}
