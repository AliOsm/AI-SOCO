#include <bits/stdc++.h>
using namespace std;
#define sc(x)            scanf("%d",&x)
#define scc(x)           scanf("%c",&x)
#define scl(x)           scanf("%lld",&x)
#define sz(v)	     	(v.size())
#define mem(v, d)		memset(v, d, sizeof(v))
#define oo				2000000100
#define OO				4000000000000000100
#define PI 3.14159265
typedef unsigned int uint;
typedef long long ll;
//-----------------------------------------------------
#define N 300005
const int MOD = 1e9 + 7;

int dX[] = {0,0,1,-1};
int dY[] = {1,-1,0,0};

//ll GCD(ll num,ll ones) { return !ones ? num : GCD(ones,num%ones); }
//ll lcm(ll a, ll b) { return (a / GCD(a, b)) * b; }
//double Len(int x,int y,int X,int Y) { return sqrt((X-x)*(X-x)+(Y-y)*(Y-y)); }
/*int fastpower(int a,int x)
{
    if(x == 1) return a;
    if (x==0) return 1;
    int p = fastpower(a,x/2);
    if(x%2) return ((p%m)*(p%m)*(a%m))%m;
s}*/
//----------------------- ------------------------
vector<int>cyc; int v[505]; int n,m;
bool adj[505][505];
bool dfs(int cur)
{
    v[cur] = 2; cyc.push_back(cur); bool ret= 0;
    for(int i=1;i<=n;++i)
    {
        if(!adj[cur][i]) continue;
        int child = i;
        if(v[child] == 2)
        {
            cyc.push_back(child);
            return 1;
        }
        else if(!v[child]) ret = dfs(child);
        if(ret) return 1;
    }
    v[cur] = 1; cyc.pop_back();
    return 0;
}
bool chk()
{
    bool ret = 0; mem(v,0); cyc.clear();
    for(int i=1;i<=n;++i)
    {
        if(!v[i]) ret|=dfs(i);
    }
    return !ret;
}
int main()
{
#ifndef ONLINE_JUDGE
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#endif
    sc(n); sc(m); int x,y;
    for(int i=0;i<m;++i)
    {
        sc(x); sc(y);
        adj[x][y]=1;
    }
    bool C = 0;
    for(int i=1;i<=n;++i)
    {
        if(!v[i]) C = dfs(i);
        if(C == 1) break;
    }
    if(!C) return puts("YES");
    vector<int>Bcyc;
    for(int i=0;i<sz(cyc);++i)  Bcyc.push_back(cyc[i]);
    for(int i=0;i<sz(Bcyc)-1;++i)
    {
        x = Bcyc[i],y=Bcyc[i+1];
        adj[x][y]=0;
        if(chk()) return puts("YES");
        adj[x][y]=1;
    }
    puts("NO");
    return 0;
}