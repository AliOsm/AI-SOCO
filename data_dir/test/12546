//#define ONLINE_JUDGE

#if defined(ONLINE_JUDGE)
#define _SECURE_SCL 0
#endif

#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <functional>
#include <memory>
#include <cmath>
#include <climits>
#include <numeric>
#include <tuple>
#include <memory.h>
#include <stdint.h>

#if !defined(__GNUC__)
#else // !defined(__GNUC__)
#define _CrtDbgBreak() __builtin_trap()
#endif // !defined(__GNUC__)

#if defined(ONLINE_JUDGE)
#define LOCAL_TEST 0
#else 
#define LOCAL_TEST 1
#endif

#if LOCAL_TEST
struct AssertsCounter
{
    AssertsCounter(): counter(0) {}
    ~AssertsCounter() { std::cout << std::endl << "DIAG: " << (counter == 0 ? "OK" : "!!!") << " Asserts count: " << counter << std::endl; }
    void Increment() { counter++; }
    uint32_t counter;
};
AssertsCounter g_assertsCounter;
#define LOCAL_ASSERT(expr) { if (!(expr)) {std::cout << "ASSERT FAILED (" << __LINE__ << "): '" << #expr << "'" << std::endl; g_assertsCounter.Increment(); _CrtDbgBreak(); } }
#define LOCAL_ASSERT_EQ(expr1, expr2) { if ((expr1) != (expr2)) {std::cout << "ASSERT FAILED (" << __LINE__ << "): '" << #expr1 << "' == '" << #expr2 << "' (" << (expr1) << " vs " << (expr2) << "')" << std::endl; g_assertsCounter.Increment(); _CrtDbgBreak(); } }
#else
#define LOCAL_ASSERT(expr)
#define LOCAL_ASSERT_EQ(expr1, expr2)
#endif

typedef std::string string8_t;

typedef std::vector<size_t> vector_size_t;
typedef std::vector<int32_t> vector_int32_t;
typedef std::vector<uint32_t> vector_uint32_t;
typedef std::vector<int64_t> vector_int64_t;
typedef std::vector<uint64_t> vector_uint64_t;

typedef std::vector<vector_size_t> vector_2d_size_t;
typedef std::vector<string8_t> vector_string8_t;

typedef std::set<size_t> set_size_t;
typedef std::set<int32_t> set_int32_t;
typedef std::set<uint32_t> set_uint32_t;
typedef std::set<int64_t> set_int64_t;
typedef std::set<uint64_t> set_uint64_t;

typedef std::set<string8_t> set_string8_t;
typedef std::multiset<string8_t> multiset_string8_t;

// Auxiliary functions definition
// 
template<typename T> inline T Abs(const T a) { return a < 0 ? -a : a; }
template<typename T> inline T Min(const T a, const T b) {return a < b ? a : b;}
template<typename T> inline T Max(const T a, const T b) {return a > b ? a : b;}
template<typename T> inline void UpdateMin(T& a, const T b) {a = Min(a, b);}
template<typename T> inline void UpdateMax(T& a, const T b) {a = Max(a, b);}

static const double Eps = 1.0e-10;
template<typename T> inline bool IsEqual(const T a, const T b) { return Abs(a - b) < Eps; }
template<typename T> inline bool IsGreater(const T a, const T b) { return a > b + Eps; }
template<typename T> inline bool IsLess(const T a, const T b) { return a + Eps < b; }

template<typename T> inline string8_t ToStr(const T& val) { std::ostringstream ostr; ostr << val; return ostr.str(); }
template<typename T> inline bool FromStr(const string8_t& str, T& val) {std::istringstream istr(str); istr >> val; return !!istr; }

template<typename T> inline std::istream& operator>>(std::istream& ist, std::vector<T>& data)
{
    for (size_t i = 0; i < data.size(); i++) { ist >> data[i]; }
    return ist;
}

template<typename T> T Read(std::istream& ist)
{
    LOCAL_ASSERT(!!ist);
    T val; ist >> val; return val;
}

template<typename T> inline std::ostream& operator<<(std::ostream& ost, const std::vector<T>& data)
{
    for (size_t i = 0; i < data.size(); i++) { if (i != 0) { ost << ' '; } ost << data[i]; }
    return ost;
}

#if defined(ONLINE_JUDGE)
template<size_t id> class StopWatch { };
#else
#include <library/lib_stopwatch.h>
#include <library/lib_random.h>
library::random::Rand g_rnd;
#endif

template<typename Func>
double LowerBound(const double& firstX, const double& lastX, const bool y, const Func& func)
{
    double l = firstX;
    double r = lastX;

    const size_t iterationsCount = 160;
    for (size_t i = 0; i < iterationsCount; i++)
    {
        const double m = l + (r - l) * 0.5;
        if (func(m) < y)
        {
            l = m;
        }
        else
        {
            r = m;
        }
    }

    return r;
}

struct edge_t
{
    edge_t(): b(0.0), e(0.0) { }
    edge_t(long double b_, long double e_): b(b_), e(e_) { }

    long double b;
    long double e;
};

typedef std::vector<edge_t> vector_edge_t;

edge_t GetRanges(long double a, long double b, long double c, long double d)
{
    std::vector<long double> s;
    s.push_back(a * c);
    s.push_back(a * d);
    s.push_back(b * c);
    s.push_back(b * d);
    std::sort(s.begin(), s.end());
    return edge_t(*s.begin(), *s.rbegin());
}

bool Solve(std::istream& ist, std::ostream& ost, const bool multipleTestMode)
{
    StopWatch<1> sw; (void)sw;

    // 
    int32_t i00, i01, i10, i11;
    ist >> i00 >> i01 >> i10 >> i11;

    if (multipleTestMode && !ist)
        return false;

#if LOCAL_TEST
    ost << std::endl << "Next test" << std::endl;
#endif

    // 
    double f00 = i00;
    double f01 = i01;
    double f10 = i10;
    double f11 = i11;   

    const std::function<bool(long double)> isOk = [&](long double z) -> bool
    {
        const edge_t eA = GetRanges(f00 - z, f00 + z, f11 - z, f11 + z);
        const edge_t eB = GetRanges(f01 - z, f01 + z, f10 - z, f10 + z);
        LOCAL_ASSERT(eA.b <= eA.e);
        LOCAL_ASSERT(eB.b <= eB.e);

#if 1
        const long double lenA = eA.e - eA.b;
        const long double lenB = eB.e - eB.b;
        const long double totalLen = std::max(eA.e, eB.e) - std::min(eA.b, eB.b);
        if (totalLen > lenA + lenB)
            return false;
        return true;
#else
        if (eA.b > eB.e)
            return false;
        if (eA.e < eB.b)
            return false;
        return true;
#endif
    };

    const long double ans = LowerBound(0.0, 1.0e10, true, isOk);
    ost << std::setprecision(12) << std::fixed << ans << std::endl;

    return multipleTestMode;
}

int main(int argc, const char *argv[])
{
    std::ios_base::sync_with_stdio(false);
    std::istream* ist = &std::cin;
    std::ostream* ost = &std::cout;
    
    std::unique_ptr<std::istream> fileInput;
    
    if (argc > 1)
    {
        fileInput.reset(new std::ifstream(argv[1]));
        if (!(*fileInput))
        {
            std::cout << "File not found: " << argv[1] << std::endl;
        }
        ist = fileInput.get();
    }    
    
#if defined(ONLINE_JUDGE)
    Solve(*ist, *ost, false);
#else
    while(Solve(*ist, *ost, true)) {};
#endif
}