#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
#define loop(i,n) for(int i = 0; i < n; i++)
#define pb push_back
#define pii pair<LL, LL>

const int MX = 2 * 1e5 + 5;
int n, q, m, a[MX];
pair<int, pair<int, int> > Q[MX];

/* Segment Tree: Single element modification, range query */
class Segment_Tree_SR {
	vector<int> t;
	int n;
	int default_val;
	int (*combine)(int, int);
public:
	Segment_Tree_SR(vector<int> a, int (*f) (int, int), int init_val) {
		n = a.size();
		default_val = init_val;
		combine = f;
		t.resize(2*n);
		for (int i=1; i<2*n; i++) t[i] = default_val;
		for (int i=0; i<n; i++) t[i+n] = a[i];
		for (int i=n-1; i>=1; i--) t[i] = combine(t[i<<1], t[i<<1 | 1]);
	}
	void modify(int l, int r, int val) {
               for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
                    if (l&1) { t[l] = combine(t[l], val); l++; }
                    if (r&1) { r--; t[r] = combine(t[r], val); }
                }
	}
	int query(int p) { // Query the range [l, r)
            int res = default_val;
            for (p += n; p > 0; p >>= 1) res = combine(res, t[p]);
            return res;
	}
};

int add(int a, int b) {
    return a + b;
}

int main () {
#ifdef DEBUG
    freopen("in.txt", "r", stdin);
#endif
    cin >> n >> q >> m;
    for (int i = 0; i < n; i++) cin >> a[i];
    for (int i = 0; i < q; i++) {
        int ti, li, ri;
        cin >> ti >> li >> ri;
        Q[i] = {ti, {li, ri}};
    }
    for (int i = 0; i < m; i++) {
        int b;
        cin >> b;
        b--;
        for (int j = q - 1; j >= 0; j--) {
            int li = Q[j].second.first;
            int ri = Q[j].second.second;
            li--;   ri--;
            if (b < li || b > ri) continue;
            if (Q[j].first == 1) { // Rotate
                if (li == ri) continue;
                if (b == li) b = ri;
                else b--;
            }
            else {
                b = ri - (b - li);
            }
        }
        cout << a[b] << " ";
    }
    cout << endl;
    return 0;
}