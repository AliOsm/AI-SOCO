#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define SPEED ios_base::sync_with_stdio(false); cin.tie(NULL);
#define FOR(i, a, b) for (ll i = a; i < b; ++i)
#define RFOR(i, b, a) for (ll i = b; i >= a; --i)
#define ALL(x) x.begin(), x.end()
#define DEBUG(args...) { string _s = #args; replace(ALL(_s), ' ', '\0');\
replace(ALL(_s), ',', ' ');\
stringstream _ss(_s); istream_iterator<string> _it(_ss); _debug(_it, args);}
#define endl "\n"
#define F first
#define S second
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)

using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

void _debug(istream_iterator<string>) {}
template<typename T, typename... Args>
void _debug(istream_iterator<string> it, T first, Args... args) {
    cerr << ">> " << *it << " : " << first << endl; _debug(++it, args...);
}
template <typename T1, typename T2>
inline ostream& operator << (ostream& out, const pair<T1, T2>& p) {
    return out << "(" << p.F << ", " << p.S << ")";
}
template<typename T>
inline ostream& operator << (ostream& out, const vector<T>& v) {
    if (v.empty()) return out << "[]";
    else { out << '['; for (auto& e : v) { out << e << ", "; } return out << "\b\b]"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const set<T>& s) {
    if (s.empty()) return out << "{}";
    else { out << '{'; for (auto& e : s) { out << e << ", "; } return out << "\b\b}"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const unordered_set<T>& s) {
    return out << set<T>(ALL(s));
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const map<T1, T2>& m) {
    if (m.empty()) return out << "{}";
    out << '{'; for (auto& p : m) { out << p << ", "; } return out << "\b\b}";
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const unordered_map<T1, T2>& m) {
    return out << map<T1, T2>(ALL(m));
}
template<typename T>
inline ostream& operator << (ostream& out, const ordered_set<T>& s) {
    return out << set<T>(ALL(s));
}

typedef long long ll;
typedef long double ld;
typedef vector<long long> vll;
typedef pair<ll, ll> pll;
typedef vector<pair<ll, ll>> vpll;
typedef unordered_map<ll, ll> STll;
/************************************** MAIN PROGRAM ********************************************/

int main()
{
   // freopen("input.txt", "r", stdin);
    SPEED
    ll n;
    cin >> n;
    vll a(n);

    for (ll& e : a)
    {
        cin >> e;
    }

    if (n == 1)
    {
        cout << -1;
        return 0;
    }
    sort(ALL(a));
    STll st;
    FOR(i, 0, n - 1)
    {
        st[a[i + 1] - a[i]]++;
    }
    ll frequentD = max_element(ALL(st), [](auto x, auto y)-> bool { if (x.S == y.S)
           return x.F > y.F;
           else  return x.S < y.S; })->F;

    ll minD = min_element(ALL(st))->F;
    ll maxD = max_element(ALL(st))->F;

    /// TODO DEAL WITH 3 elements with d's of same frequency
    if (!(n - 1 - st[frequentD] <= 1 && minD >= frequentD))
    {
        cout << 0;
        return 0;
    }
    if (maxD != frequentD)
    {
        FOR(i, 0, n - 1)
        {
            if (a[i + 1] - a[i] == maxD)
            {
                if (frequentD * 2 == maxD)
                {
                    cout << 1 << endl;
                    cout << a[i] + frequentD;
                    return 0;
                }
                else
                {
                    cout << 0;
                    return 0;
                }
            }
        }
    }
    if (frequentD == 0)
    {
        if (maxD == 0)
        {
            cout << 1 << endl;
            cout << a[0];
            return 0;
        }
        else
        {
            cout << 0;
            return 0;
        }
    }
    if (n == 2 && (a[1] - a[0]) % 2 == 0 && a[0] != a[1])
    {
        cout << 3 << endl;
        cout << a[0] - frequentD << " " << (a[0] + a[1]) / 2 << " " << a[n - 1] + frequentD ;
        return 0;
    }
    cout << 2 << endl;
    cout << a[0] - frequentD << " " << a[n - 1] + frequentD;
}
/************************************** END OF PROGRAM ******************************************/
