#include <bits/stdc++.h>

using namespace std;

const int maxn = 5e4 + 10;
const int maxk = 505;

vector < int> g[maxn];
bool used[maxn];
long long phi[maxn][maxk];
long long f[maxn][maxk];
int n,k;
long long ans[maxn];

void dfs(int v){
    used[v] = true;
    f[v][0] = 1;
    vector < int > child;
    child.clear();
    for (auto u : g[v]) {
        if (!used[u]) {
            dfs(u);
            child.push_back(u);
            for (int i = 0; i <= k; i++) {
                phi[v][i] += f[u][i];
                if (i > 0)
                    f[v][i] += f[u][i - 1];
            }
        }
    }
    for (int l = 0; l <= k - 2; l++) {
        for (auto u : child) {
            ans[v] += f[u][l] * (phi[v][k - 2 - l] - f[u][k - 2 - l]);
        }
    }
    ans[v] /= 2;
    ans[v] += f[v][k];
}

int main() {
    ios_base :: sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> k;
    for (int i = 0; i < n - 1; i++) {
        int x, y;
        cin >> x >> y;
        x--; y--;
        g[x].push_back(y);
        g[y].push_back(x);
    }
    dfs(0);

    long long ret = 0;
    for (int i = 0; i < n; i++)
        ret += ans[i];
    cout << ret << endl;
    return 0;
}