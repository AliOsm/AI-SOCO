#include<bits/stdc++.h>
using namespace std ;
#define LL long long int
#define MOD 1000000007LL
#define PI acos(-1.0)
//#define CIN ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)


/*
// Ordered set
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template<typename T> using orderset = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
//orderset<int> s ; //orderset<int>::iterator it ;
//orderset<int> X; //X.insert(1); //X.insert(2); //X.insert(4); //X.insert(8); //X.insert(16);
//cout<<*X.find_by_order(1)<<endl; // 2 //cout<<*X.find_by_order(2)<<endl; // 4 //cout<<*X.find_by_order(4)<<endl; // 16 //cout<<(end(X)==X.find_by_order(6))<<endl; // true
//cout<<X.order_of_key(-5)<<endl;  // 0 //cout<<X.order_of_key(1)<<endl;   // 0 //cout<<X.order_of_key(3)<<endl;   // 2 //cout<<X.order_of_key(4)<<endl;   // 2 //cout<<X.order_of_key(400)<<endl; // 5
*/

LL caseno,n,m,n1,n2,n3,subgraph,invalid;
vector< LL > nodes[5003][2] ;
vector< LL > V[5003] ;
bool ck[5003] ;
int color[5003] ;
LL dp[5003][5003] ;
LL res[5003] ;

void Input(){
    scanf("%lld",&n) ;
    scanf("%lld",&m) ;
    scanf("%lld",&n1) ;
    scanf("%lld",&n2) ;
    scanf("%lld",&n3) ;
    LL u , v ;
    for( int i = 1 ; i <= m ; i ++ ){
        scanf("%lld%lld",&u,&v) ;
        V[u].push_back( v ) ;
        V[v].push_back( u ) ;
    }
}

void DFS( int u , int state ){
    color[u] = state ;
    nodes[subgraph][state].push_back( u ) ;
    ck[u] = 1 ;
    for( auto v : V[u] ){
        if( !ck[v] ){
            DFS( v , 1 ^ state ) ;
        }
        else if( color[v] == color[u] ){
            invalid = 1 ;
        }
    }
}

void Calculation(){
    subgraph = 0 ;
    invalid = 0 ;
    for( int i = 1 ; i <= n ; i ++ ){
        if( !ck[i] ){
            subgraph ++ ;
            DFS( i , 0 ) ;
            if( invalid ) break ;
        }
    }
    if( !invalid ){
        dp[0][0] = 1 ;
        for( int i = 1 ; i <= subgraph ; i ++ ){
            for( int j = 0 ; j <= n2 ; j ++ ){
                if( dp[j][i-1] ){
                    dp[j+nodes[i][0].size()][i] = 1 ;
                    dp[j+nodes[i][1].size()][i] = 1 ;
                }
            }
        }
        if( !dp[n2][subgraph] ){
            invalid = 1 ;
        }
        else{
            for( int i = subgraph ; i >= 1 ; i -- ){
                if( ( n2 - nodes[i][0].size() >= 0 ) && dp[n2-nodes[i][0].size()][i-1] ){
                    for( auto x : nodes[i][0] ){
                        res[x] = 2 ;
                        n2 -- ;
                    }
                    for( auto x : nodes[i][1] ){
                        if( n1 ){
                            res[x] = 1 ;
                            n1 -- ;
                        }
                        else{
                            res[x] = 3 ;
                        }
                    }
                }
                else if( dp[n2-nodes[i][1].size()][i-1] ){
                    for( auto x : nodes[i][1] ){
                        res[x] = 2 ;
                        n2 -- ;
                    }
                    for( auto x : nodes[i][0] ){
                        if( n1 ){
                            res[x] = 1 ;
                            n1 -- ;
                        }
                        else{
                            res[x] = 3 ;
                        }
                    }
                }
            }
            puts("YES") ;
            for( int i = 1 ; i <= n ; i ++ ){
                printf("%lld",res[i]) ;
            }
            puts("") ;
        }

    }
    if( invalid ) puts("NO") ;

}


void Solve(){
    Input() ;
    Calculation() ;
}

int main()
{

    //CIN;
    int q ;
    q = 1 ;
    //scanf("%d",&q) ;
    caseno = 0 ;
    while( q-- ){
        caseno ++ ;
        Solve() ;
    }



    return 0 ;
}
