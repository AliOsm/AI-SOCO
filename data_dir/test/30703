/*<<head>> {{{*/
#include <bits/stdc++.h>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <string>
#include <cmath>
#include <queue>
#include <stack>
#include <set>
#include <map>
using namespace std;
typedef double db;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
#define dd(x) cout << #x << " = " << x << ", "
#define de(x) cout << #x << " = " << x << endl
#define rep(i,a,b) for(int i=(a);i<(b);++i)
#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define fi first
#define se second
//INF = 1 061 109 567 ; INF + INF = 2 122 219 134 ;
//LINF = 4 557 430 888 798 830 399 ; LINF + LINF = 9 114 861 777 597 660 798 ;
const int INF = 0x3f3f3f3f;     // -INF: 0xc0   abs(-INF) = INF + 1
const ll LINF = 0x3f3f3f3f3f3f3f3f;
/*}}}*/                         // zr, zm
const int MOD = (int)1e9+7;     // when MOD = 1e9+7, inv2 = 500000004
const int N = (int)1e6+7;

// ---------------------------------------- 变量 ---------------------------------------- //

struct Node {
	int s, d, c, id;
	Node () {}
	Node (int s, int d, int c, int id) : s(s), d(d), c(c), id(id) {}
	bool operator < (const Node &rhs) const {
		return d > rhs.d;
	}
};

int n, m;
vector <Node> exam;
int vis[N];
bool ok[N];

// ---------------------------------------- 函数 ---------------------------------------- //

void Init() {
	memset(vis, 0, sizeof(vis));
	memset(ok, 0, sizeof(ok));
	exam.clear();
    rep(i, 0, m) {
    	int s, d, c;
    	scanf("%d%d%d", &s, &d, &c);
    	exam.pb(Node(s, d, c, i+1));
    	vis[d] = i + 1;
	}
}

int Solve() {
	vi ans;
	sort(all(exam), [&](Node a, Node b){return a.s > b.s;});
	priority_queue <Node> todo;
	rep(i, 1, n+1) {
		if (vis[i]) {
			if (!ok[vis[i]]) return puts("-1");
			ans.pb(m + 1);
			continue;
		}
		while (!exam.empty() && exam.back().s <= i) {
			todo.push(exam.back());
			exam.pop_back();
		}
		if (todo.empty()) {
			ans.pb(0);
		} else {
			auto tmp = todo.top();
			todo.pop();
			ans.pb(tmp.id);
			if (--tmp.c > 0) todo.push(tmp);
			else ok[tmp.id] = 1;
		}
	}
	rep(i, 0, sz(ans)) printf("%d%c", ans[i], " \n"[i==sz(ans)-1]);
	return 0;
}

// ---------------------------------------- main ---------------------------------------- //

int main ()
{
    //freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);

    //Pre();
    //int t; scanf("%d", &t); while (t--) {
    while (~scanf("%d%d", &n, &m)) {
    //while(fgets(s, N, stdin)) {   // 注意 fgets 会读入换行符
        //if (n == 0) break;
        //static int kase = 0; printf("Case %d: ", ++kase);
        Init();
        Solve();
        //if (t) puts("");
    }
    return 0;
}