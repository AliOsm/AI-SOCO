#include<bits/stdc++.h>
using namespace std;

//defines
#define openin freopen("input.txt","r",stdin)
#define openout freopen("output.txt","w",stdout)
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ll long long
#define int long long
#define mod 1000000007
#define repr(i,x,y) for (__typeof(x) i=x;i>=y;i--)
#define rep(i,x,y) for (__typeof(x) i=x;i<=y;i++)
#define all(c) (c).begin(),(c).end()
#define ff first
#define ss second
#define pb push_back
#define mp make_pair

/* Print pair */
template <typename T,typename S>
ostream & operator << (ostream &os , const pair<T,S> &v) {
    os << "(" ;
    os << v.first << "," << v.second << ")" ;
    return os ;
}
/* Print vector */
template <typename T>
ostream & operator << (ostream &os , const vector<T> &v) {
    os << "[" ;
    int sz = v.size() ;
    for(int i = 0 ; i < sz ; ++i) {
        os << v[i] ;
        if(i!=sz-1)os << "," ;
    }
    os << "]\n" ;
    return os ;
}
/* Print set */
template <typename T>
ostream & operator << (ostream &os , const set<T> &v) {
    T last = *v.rbegin() ;
    os << "[" ;
    for(auto it : v) {
        os << it  ;
        if(it != last) os << "," ;
    }
    os << "]\n" ;
    return os ;
}
/* Print Map */
template <typename T,typename S>
ostream & operator << (ostream &os , const map<T,S> &v) {
    for(auto it : v) {
        os << it.first << " : " << it.second << "\n" ;
    }
    return os ;
}
int power(int a , int b)
{
    int res = 1 ;
    while(b)
    {
        if(b%2) {
            res = (res * a) % mod ;
        }
        b/=2 ;
        a = (a*a) % mod ;
    }
    return res ;
}

//debug
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
        cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

const int N = 1e5 + 5 ; 

struct node {
    node* next[26] ; 
    int num ; 
    node() {
        memset(next,0,sizeof(next)) ; num = -1 ; 
    }
};

node* root = new node() ; 

void addWord(string &word , int index) {
    node* curr = root ; 
    int len = word.size() ; 
    for(int i = 0 ; i < len ; ++i) {
        int val = 0 ; 
        if(word[i] >= 'A' && word[i] <= 'Z') val = word[i] - 'A' ; 
        else val = word[i] - 'a' ; 
        if(curr->next[val] == NULL) {
            curr->next[val] = new node() ; 
        }
        curr = curr->next[val] ; 
    }
    curr->num = index ; 
}
int dp[N] ;
string words[N] ; 
int32_t main()
{
    fast;
    int n ; cin >> n ; 
    string str ; cin >> str ; str = " " + str ; 
    int m ; cin >> m ; 
    rep(i,1,m) cin >> words[i] ; 
    rep(i,1,m) addWord(words[i],i) ;
    memset(dp , -1 , sizeof(dp)) ; 
    dp[0] = 0 ; 
    rep(i,1,n) {
        node* curr = root ; 
        for(int j = i ; j >= 0 ; --j) {
            if(curr->num + 1 && dp[j] != -1) {
                dp[i] = curr->num ; break ; 
            }
            if(curr->next[str[j]-'a'] == NULL) {
                break ; 
            }
            curr = curr->next[str[j]-'a'] ; 
        }
    }
    vector<string> ans ; 
    for(int i = n ; i > 0 ; i -= words[dp[i]].size()) {
        ans.pb(words[dp[i]]) ; 
    }
    reverse(all(ans)) ; 
    for(auto s : ans) cout << s << " " ; cout << "\n" ; 
    return 0;
}
