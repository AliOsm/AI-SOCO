#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

ll read_long() {
    ll ans = 0;
    char c;
    bool started = false;
    bool is_negative = false;
    while (true) {
        c = getchar();
        if ((c < '0' || c > '9') && c != '-' && !started) continue;
        if ((c < '0' || c > '9') && c != '-' && started) break;
        if (started) {
            ans = ans * 10;
        }
        started = true;
        if (c == '-') is_negative = true;
        else ans += c - '0';
    }
    if (is_negative) ans *= -1;
    return ans;
}

int n, x, y;
vector<int> g[300300];
int p[300300];
int cnt[300300];
ll ans = 0;

void dfs(int v, int par) {
    p[v] = par;
    cnt[v] = 1;
    forit (it, g[v]) {
        int to = *it;
        if (to != par) {
            dfs(to, v);
            cnt[v] += cnt[to];
        }
    }
}

int main(){

    scanf("%d%d%d", &n, &x, &y);
    x--; y--;
    for (int i = 0; i < n - 1; i++) {
        int u, v;
        scanf("%d%d", &u, &v);
        u--; v--;
        g[u].pb(v);
        g[v].pb(u);
    }

    dfs(x, -1);

    int z = y;
    while (p[z] != x) z = p[z];

    ans += cnt[z] * 1ll * (n - 1);
    ans += (n - cnt[z]) * 1ll * (cnt[z] - cnt[y]);
    ans += (n - cnt[z]) * 1ll * (n - cnt[z] - 1);

    cout << ans << endl;

    return 0;
}
