#include <bits/stdc++.h>
using namespace std;
const int MAXN = 2e6;
#define F first
#define S second
struct Node {
    int az, kol;
};
Node t[4 * MAXN];
int t1[4 * MAXN];
int a[MAXN];
int n;
Node combine(Node a, Node b) {
    if (a.az == b.az) return {a.az, a.kol + b.kol};
    return (a.az > b.az ? b : a);
}
void build(int v = 1, int tl = 1, int tr = n) {
    if (tl == tr) {
        t[v].az = a[tl];
        t[v].kol = 1;
        return;
    }
    int tm = (tl + tr) / 2;
    build(v * 2, tl, tm);
    build(v * 2 + 1, tm + 1, tr);
    t[v] = combine(t[v * 2], t[v * 2 + 1]);
}
Node Get(int l, int r, int v = 1, int tl = 1, int tr = n) {
    if (tr < l || r < tl) return {(int)1e9, 0};
    if (l <= tl && tr <= r) return t[v];
    int tm = (tl + tr) / 2;
    return combine(Get(l, r, v * 2, tl, tm), Get(l, r, v * 2 + 1, tm + 1, tr));
}


void Build(int v = 1, int tl = 1, int tr = n) {
    if (tl == tr) {
        t1[v] = a[tl];
        return;
    }
    int tm = (tl + tr) / 2;
    Build(v * 2, tl, tm);
    Build(v * 2 + 1, tm + 1, tr);
    t1[v] = __gcd(t1[v * 2], t1[v * 2 + 1]);
}
int get(int l, int r, int v = 1, int tl = 1, int tr = n) {
    if (tr < l || r < tl) return 0;
    if (l <= tl && tr <= r) return t1[v];
    int tm = (tl + tr) / 2;
    return __gcd(get(l, r, v * 2, tl, tm), get(l, r, v * 2 + 1, tm + 1, tr));
}


int main() {
    cin >> n;
    for (int i = 1; i <= n; i++) {
       cin >> a[i];
    }
    build();
    Build();
    int Q;
    cin >> Q;
    while(Q--) {
        int l, r;
        cin >> l >> r;
        Node res = Get(l, r);
        int GCD = get(l, r);
        if (GCD == res.az) {
            cout << r - l + 1 - res.kol << endl;
        } else {
            cout << r - l + 1 << endl;
        }
    }
	return 0;
}
