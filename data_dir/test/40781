#include <bits/stdc++.h>
using namespace std;

#define int long long

const int MAX = 1e6 + 10; 
const int OO = 0x3f3f3f3f;
const double EPS = 1e-6; 
const long long MOD = 998244353;
const int off = 3 * 1e9; 

#define bug(x) cerr << #x << " = " << x << '\n'
#define _ << " , " <<
#define FOR(i, a, n) for(int i = a; i < n; i++)
#define REP(i, n) FOR(i, 0, n)
#define fi first
#define se second
#define pb push_back
#define mt make_tuple
#define all(vetor) vetor.begin(), vetor.end()
#define X real()
#define Y imag()
#define sc(a) scanf(" %d", &a)
//#define gc getchar_unlocked

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> ii;
typedef pair<int, ii> iii;
typedef complex<ll> Pll;
typedef complex<ld> Pld;

int n, k;
ii arr[MAX];

ii check(int x)
{
    vector<ii> event;
    for(int i = 0; i < n; i++)
        if(arr[i].se - arr[i].fi + 1 >= x)
        {
            event.emplace_back(arr[i].fi, 1);
            event.emplace_back(arr[i].se - x + 2, -1);
        }
    sort(all(event));
    reverse(all(event));
    int cnt = 0, best_pos = 0, best_cnt = 0;
    while(!event.empty())
    {
        int pos = event.back().fi;
        while(!event.empty() and event.back().fi == pos)
        {
            cnt += event.back().se;
            event.pop_back();
        }
        if(cnt > best_cnt)
            best_cnt = cnt, best_pos = pos;
    }  
    return {best_pos, best_cnt};
}

void binary_search()
{
    int b = 0, e = 2 * off, ans = 0;
    while(b <= e)
    {
        int mid = (b + e) / 2;
        if(check(mid).se >= k)
            b = mid + 1, ans = mid;
        else
            e = mid - 1;
    }
    int ini = check(ans).fi;
    cout << ans << '\n';    
    for(int i = 0; i < n and k > 0; i++)
        if(!ans or arr[i].fi <= ini and arr[i].se - ini + 1 >= ans)
            cout << i + 1 << ' ', k--;
    puts("");
}

int32_t main()
{
    cin >> n >> k;
    REP(i, n)
    {
        cin >> arr[i].fi >> arr[i].se;
        arr[i].fi += off;
        arr[i].se += off;
    }
    binary_search();
    
    return 0;
}