/*
ID: essi
LANG: C++
TASK: .cpp
*/

/*
if there exist at least two node with at least two childe then answer is No
	otherwise if n > 2 then there exist just one node with at least two child
	 so  we can do dfs with start of this node
*/
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define sep ios::sync_with_stdio(0),cin.tie(0)
const ll MXi = 1e5 + 5;
vector<int> Tree[MXi];
vector<int> seen(MXi);
int other;
int VV = -1;
void dfs(int node) {
	for (auto adj: Tree[node]) {
		if (seen[adj] == 0) {
			seen[adj] = 1;
			other = adj;
			dfs(adj);
		}
	}

	if (VV != other){
		cout << VV << " " << other;
		cout << "\n";
		other = VV;
	}
}

int main() {
    sep;
    int n, u, v; cin >> n;
    for (int i = 0; i < n - 1; ++i) {
    	cin >> u >> v;
    	Tree[u].emplace_back(v);
    	Tree[v].emplace_back(u);
    }

    int cu = 0, ver = -1, ch, ver1 = -1;
    if (n == 2){
    	cout << "Yes\n1\n1 2\n";
    	return 0;
    }
    for (int i = 1; i <= n; ++i) {
    	ch = Tree[i].size();
    	if (ch > 2) {
    		++cu;
    		ver = i;
    	} else if (ch == 2){
    		ver1 = i;
    	}
    }
    if (cu > 1){
    	cout << "No\n";
    	return 0;
    }
    cout << "Yes\n";
    if (ver != -1) {
    	cout << Tree[ver].size() << "\n";
    	seen[ver] = 1;
	   	VV = ver;
    	dfs(ver);
    }
    else {
    	cout << Tree[ver1].size() << "\n";
    	seen[ver1] = 1;
    	VV = ver1;
    	dfs(ver1);
    }
    

    return 0;
}
