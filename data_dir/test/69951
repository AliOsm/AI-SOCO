
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j123 = n; (i) < j123; (i) ++)
#define rep1(i, n) for (int (i) = 1, j123 = n; (i) <= j123; (i) ++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout << #a << " :";for(int i123=(x);i123<=(y);i123++) cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int(x.size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

int score[30];
map<ll,int> cnt[30];
int A[100100];
ll S[100100];
int N;
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0);
  rep1(i,26) cin >> score[i];
  string foo;
  cin >> foo;
  N = sz(foo);

  rep1(i,N) A[i] = foo[i-1]-'a'+1;

  rep1(i,N) S[i] = score[A[i]] + S[i-1];

  ll ans = 0;
  for (int i = N-1; i >= 1; i--)
  {
    cnt[A[i+1]][S[i]]++;
//    db(A[i+1]);
//    db(S[i]);
    // count how many intervals exists
    // that start at i
    // s.t. the first/last letters are same
    // and score is 0
//    db(cnt[A[i]][S[i]]);
    ans += cnt[A[i]][S[i]];
  }
  cout << ans << endl;

}
