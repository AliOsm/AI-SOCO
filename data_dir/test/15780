#include <bits/stdc++.h>

using namespace std;

#ifdef DGC
#include "debug.h"
#else
#define debug(...)
#endif
typedef long long ll;
typedef long double ld;
typedef complex<ll> point;
#define F first
#define S second



int main()
{
	#ifdef DGC
		//freopen("a.txt", "r", stdin);
		//freopen("b.txt", "w", stdout);
	#endif

	ios_base::sync_with_stdio(0), cin.tie(0);

	int n, m;
	cin >> n >> m;

	vector<vector<int>> adj(n);
	vector<int> ok(n, 0);

	set<pair<int, int>> s;
	for (int i = 0, u, v; i < m; ++i)
	{
		cin >> u >> v;
		--u, --v;
		s.insert({ u, v });
		s.insert({ v, u });
		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	for (auto v : adj[0])
		ok[v] = -1;

	function<void(int)> dfs = [&](int u)
	{
		for (auto v : adj[u])
			if (ok[v] == -1)
			{
				ok[v] = (!(ok[u]-1)) + 1;
				dfs(v);
			}
	};

	for (int u = 0; u < n; ++u)
		if (ok[u] == -1)
		{
			ok[u] = 1;
			dfs(u);
			break;
		}

	bool ans = true;
	for (auto e : s)
		ans &= ok[e.F] != ok[e.S];

	vector<int> cnt(3);
	for (int i = 0; i < n; ++i)
	{
		ans &= ok[i] != -1;
		++cnt[ok[i]];
	}

	for (auto i : cnt)
		ans &= i > 0;

	if (ans)
	{
		vector<vector<int>> x(3);
		for (int i = 0; i < n; ++i)
			x[ok[i]].push_back(i);

		for (int i = 0; i < 3; ++i)
			for (int j = i+1; j < 3; ++j)
				for (auto u : x[i])
				{
					if (!ans) break;
					for (auto v : x[j])
					{
						if (!ans) break;
						ans &= s.find({ u, v }) != s.end();
					}
				}
	}

	if (!ans)
	{
		cout << "-1\n";
		return 0;
	}

	for (auto &i : ok)
		cout << i+1 << " \n"[&i==&ok.back()];

	return 0;
}
