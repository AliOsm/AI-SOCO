#include <cstdio>
#include <cmath>
#include <vector>
using namespace std;
vector<int> e[1000010], ec[1000010], re[1000010];
vector<int> od;
int done[1000010];
void dfs(int v) {
	done[v] = 1;
	for (int i = 0; i < e[v].size(); i++) {
		int w = e[v][i];
		if (!done[w]) {
			dfs(w);
		}
	}
	od.push_back(v);
}
int g[1000010], gs[1000010];
void rdfs(int v, int k) {
	done[v] = 1;
	g[v] = k;
	for (int i = 0; i < re[v].size(); i++) {
		int w = re[v][i];
		if (!done[w]) {
			rdfs(w, k);
		}
	}
}
int gn;
vector<int> ge[1000010], gc[1000010];
long long dp[1000010];
long long f(int x) {
	long long y = sqrt(x * 2);
	while (y * (y - 1) / 2 <= x) {
		++y;
	}
	--y;
	return x * y - (y - 1) * y * (y + 1) / 6;
}
void scc(int n) {
	for (int i = 0; i < n; i++) {
		if (!done[i]) {
			dfs(i);
		}
	}
	for (int i = 0; i < n; i++) {
		done[i] = 0;
	}
	for (int i = n - 1; i >= 0; i--) {
		int v = od[i];
		if (!done[v]) {
			rdfs(v, gn++);
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < e[i].size(); j++) {
			int v = e[i][j];
			if (g[i] == g[v]) {
				gs[g[i]] = 1;
				dp[g[i]] += f(ec[i][j]);
			} else {
				ge[g[i]].push_back(g[v]);
			       	gc[g[i]].push_back(ec[i][j]);
			}
		}
	}
	for (int i = 0; i < n; i++) {
		done[i] = 0;
	}
}
void go(int v) {
	done[v] = 1;
	long long tmp = 0;
	for (int i = 0; i < ge[v].size(); i++) {
		int w = ge[v][i];
		if (!done[w]) go(w);
		if (tmp < dp[w] + gc[v][i]) {
			tmp = dp[w] + gc[v][i];
		}
	}
	dp[v] += tmp;
}

int main() {
	int n, m;
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; i++) {
		int u, v, w;
		scanf("%d%d%d", &u, &v, &w);
		--u; --v;
		e[u].push_back(v);
		ec[u].push_back(w);
		re[v].push_back(u);
	}
	scc(n);
	int s;
	scanf("%d", &s);
	--s;
	go(g[s]);
	printf("%I64d\n", dp[g[s]]);
	return 0;
}
