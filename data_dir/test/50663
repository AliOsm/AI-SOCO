#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcount(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

const int OO = (int) 2e9;
const double eps = 1e-9;

int dx[] = { -1, 0, 0, 1 };
int dy[] = { 0, -1, 1, 0 };

char arr[1003][1003];
int n, m;
int gx, gy, sx, sy;
int cst[1003][1003];
bool vis[1003][1003];

bool ok(int x, int y) {
   return x >= 0 && x < n && y >= 0 && y < m && arr[x][y] != 'T';
}

void bfs() {
   queue<pii> Q;
   Q.push(mp(gx, gy));
   vis[gx][gy] = 1;
   int lvl = 0;
   while (SZ(Q)) {
      int sz = SZ(Q);
      while (sz--) {
         int curX = Q.front().first;
         int curY = Q.front().second;
         cst[curX][curY] = lvl;
         Q.pop();
         for (int i = 0; i < 4; i++)
            if (ok(curX + dx[i], curY + dy[i])
                  && !vis[curX + dx[i]][curY + dy[i]]) {
               Q.push(mp(curX + dx[i], curY + dy[i]));
               vis[curX + dx[i]][curY + dy[i]] = 1;
            }
      }
      lvl++;
   }
}

int main() {
   std::ios_base::sync_with_stdio(false);
   cin.tie(NULL);
   cout.tie(NULL);
#ifndef ONLINE_JUDGE
// freopen("in.txt","rt",stdin);
// freopen("out.txt","wt",stdout);
#endif
   cin >> n >> m;
   for (int i = 0; i < n; i++)
      for (int j = 0; j < m; j++) {
         cin >> arr[i][j];
         if (arr[i][j] == 'E')
            gx = i, gy = j;
         else if (arr[i][j] == 'S')
            sx = i, sy = j;
      }
   bfs();
   int ret = 0;
   for (int i = 0; i < n; i++)
      for (int j = 0; j < m; j++)
         if (vis[i][j] && isdigit(arr[i][j]) && cst[i][j] <= cst[sx][sy])
            ret += arr[i][j] - '0';
   cout << ret << endl;
   return 0;
}
