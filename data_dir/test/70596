/*
▄███████▀▀▀▀▀▀███████▄
░▐████▀▒ЗАПУСКАЕМ▒▀██████▄
░███▀▒▒▒▒▒ДЯДЮ▒▒▒▒▒▒▀█████
░▐██▒▒▒▒▒▒БОГДАНА▒▒▒▒▒████▌
░▐█▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒████▌
░░█▒▄▀▀▀▀▀▄▒▒▄▀▀▀▀▀▄▒▐███▌
░░░▐░░░▄▄░░▌▐░░░▄▄░░▌▐███▌
░▄▀▌░░░▀▀░░▌▐░░░▀▀░░▌▒▀▒█▌
░▌▒▀▄░░░░▄▀▒▒▀▄░░░▄▀▒▒▄▀▒▌
░▀▄▐▒▀▀▀▀▒▒▒▒▒▒▀▀▀▒▒▒▒▒▒█
░░░▀▌▒▄██▄▄▄▄████▄▒▒▒▒█▀
░░░░▄██████████████▒▒▐▌
░░░▀███▀▀████▀█████▀▒▌
░░░░░▌▒▒▒▄▒▒▒▄▒▒▒▒▒▒▐
░░░░░▌▒▒▒▒▀▀▀▒▒▒▒▒▒▒▐

*/
#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>



using namespace std;
  


#define ll long long
#define ld long double
#define null NULL
#define prev prev228
#define count count228
#define index index228
#define left left228
#define right right228
#define hash hash228


const int N = 100 * 1000 + 228, INF = 1000 * 1000 * 1000 + 228;


struct node
{
	int mn;
	node *l, *r;
	node() {
		mn = INF;
		l = r = null;
	}

	node(int _x) {
		mn = _x;
		l = r = null;
	}

	node(node *x) {
		mn = x->mn;
		l = x->l;
		r = x->r;
	}
};


node v;


node* build(int l, int r) {
	node *res = new node(INF);
	if (l == r) {
		return res;
	}
	int m = (l + r) >> 1;
	res->l = build(l, m);
	res->r = build(m + 1, r);
	return res;
}


node* upd(node *v, int l, int r, int i, int x) {
	if (l == r) {
		node* res = new node(v);
		res->mn = min(res->mn, x);
		return res;
	}
	int m = (l + r) >> 1;
	node *res = new node(v);
	if (i <= m) {
		res->l = upd(res->l, l, m, i, x);
	} else {
		res->r = upd(res->r, m + 1, r, i, x);
	}
	res->mn = min(res->l->mn, res->r->mn);
	return res;
}


int get(node *v, int vl, int vr, int l, int r) {
	if (l > r || vl > r || vr < l) {
		return INF;
	}
	if (l <= vl && vr <= r) {
		return v->mn;
	}
	int vm = (vl + vr) >> 1;
	return min(get(v->l, vl, vm, l, r), get(v->r, vm + 1, vr, l, r));
}


vector<int> g[N];

int a[N];

struct point
{
	int in, num;
	point() {}
	point(int _in, int _num) {
		in = _in;
		num = _num;
	}
};


vector<point> p[N];


int left[N], right[N], h[N], timer = 1;

node* V[N];

vector<int> order;


void dfs(int v, int par) {
	if (v == par) {
		h[v] = 1;
	} else {
		h[v] = h[par] + 1;
	}
	order.push_back(v);
	for (int i = 0; i < (int)g[v].size(); ++i) {
		int to = g[v][i];
		if (to != par) {
			dfs(to, v);
			order.push_back(v);
		}
	}
}


signed main() {
	int n, r;
	scanf("%d %d", &n, &r);
	for (int i = 1; i <= n; ++i) {
		scanf("%d", &a[i]);
	}
	for (int i = 0; i < n - 1; ++i) {
		int u, v;
		scanf("%d %d", &u, &v);
		g[u].push_back(v);
		g[v].push_back(u);
	}
	order.push_back(0);
	dfs(r, r);
	int sz = (int)order.size() - 1;
	for (int i = 1; i <= sz; ++i) {
		if (left[order[i]] == 0) {
			left[order[i]] = i;
		}
		right[order[i]] = i;

	}
	for (int i = 1; i <= n; ++i) {
		point kek = point(left[i], i);
		p[h[i]].push_back(kek);
	}
	V[0] = build(1, sz);
	for (int i = 1; i <= n; ++i) {
		V[i] = new node(V[i - 1]);
		for (point kek : p[i]) {
			// cout << "before : ";
			// for (int f = 1; f <= sz; ++f) {
			// 	cout << get(V[i], 1, sz, f, f) << " ";
			// }
			// cout << "\n";
			V[i] = upd(V[i], 1, sz, kek.in, a[kek.num]);
			// cout << "then upd(V[" << i << "], 1, " << sz << ", " << kek.in << ", " << a[kek.num] << "\n";
			// cout << "res : ";
			// for (int f = 1; f <= sz; ++f) {
			// 	cout << get(V[i], 1, sz, f, f) << " ";
			// }
			// cout << "\n";
			// cout << "point : (" << i << ", " << kek.in << ", ; : " << a[kek.num] << ")\n";
		}
	}
	// for (int i = 1; i <= n; ++i) {
	// 	for (int j = 1; j <= sz; ++j) {
	// 		cout << get(V[i], 1, sz, j, j) << " ";
	// 	}
	// 	cout << "\n";
	// }
	int m;
	scanf("%d", &m);
	int last = 0;
	for (int it = 0; it < m; ++it) {
		int P, Q;
		scanf("%d %d", &P, &Q);
		int v = (P + last) % n + 1, k = (Q + last) % n;
		int res = get(V[min(n, h[v] + k)], 1, sz, left[v], right[v]);
		printf("%d\n", res);
		last = res;
	}
	return 0;
}












