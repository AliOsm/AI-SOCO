#define __USE_MINGW_ANSI_STDIO 0
#include <bits/stdc++.h>
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl '\n'
#define ff first
#define ss second
#define mod 998244353
#define pb push_back
#define mp make_pair
#define int long long
#define all(a) a.begin(), a.end()
#define inf (1LL<<61)
#define ull unsigned long long
#define debug1(x) cerr << #x << ": " << x <<'\n'
#define debug2(x, y) cerr << #x << ": " << x << '\t' << #y << ": " << y <<'\n'
#define debug3(x, y, z) cerr << #x << ": " << x << '\t' << #y << ": " << y << '\t' << #z << ": " << z <<'\n'
using namespace std;
int dx[]={1,0,-1};int dy[]={0,0,0}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
int gcd(int x,int y)
{
    if(y==0)
        return x;
    else
        return gcd(y,x%y);
}
int expo(int n,int m,int p)   //modULAR EXPONENTIATION
{
    int r=1;
    n=n%p;
    while(m>0)
    {
        if(m%2)
            r=(r*n)%p;
        n=(n*n)%p;
        m=m/2;
    }
    return r%p;
}
bool isPrime(int n)
{
    // Corner cases
    if (n <= 1)  return false;
    if (n <= 3)  return true;
 
    // This is checked so that we can skip 
    // middle five numbers in below loop
    if (n%2 == 0 || n%3 == 0) return false;
 
    for (int i=5; i*i<=n; i=i+6)
        if (n%i == 0 || n%(i+2) == 0)
           return false;
 
    return true;
}
vector<int>adj[100005];
vector<int>ans;
bool vis[100005];
void dfs(int y)
{
	set<int>s;
	s.insert(0);
	//vis[s]=true;
	//ans.pb(s);
	while(s.size())
	{
		int p = *s.begin();

		s.erase(s.begin());
		if(vis[p])
			continue;
		vis[p]=true;
		ans.pb(p);
		for(int i=0;i<adj[p].size();i++)
		{
			int x=adj[p][i];
			if(!vis[x]){
				s.insert(x);
			}
		}
	}
			
}
int32_t main()
{
   IOS;
   #ifndef ONLINE_JUDGE
   freopen("input.txt","r",stdin); 
   freopen("output.txt","w",stdout);
   #endif
   /********************* Code starts here ***********************/   
   int n,m;
   cin>>n>>m;
   for(int i=0;i<m;i++)
   {
   	int a,b;
   	cin>>a>>b;
   	a--,b--;
   	adj[a].pb(b);
   	adj[b].pb(a);
   }
   for(int i=0;i<n;i++)
   {
   	if(adj[i].size())
   		sort(all(adj[i]));
   }
   dfs(0);
   for(auto x : ans)
   	cout<<x+1<<' ';
}