#include <bits/stdc++.h>

using namespace std;

#define x first
#define y second
#define mp make_pair
#define pb push_back
#define sqr(a) ((a) * (a))
#define sz(a) int(a.size())
#define all(a) a.begin(), a.end()
#define forn(i, n) for(int i = 0; i < int(n); i++) 
#define fore(i, l, r) for(int i = int(l); i < int(r); i++)

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template <class A, class B> ostream& operator << (ostream& out, const pair<A, B> &a) {
	return out << "(" << a.x << ", " << a.y << ")";
}

template <class A> ostream& operator << (ostream& out, const vector<A> &v) {
	out << "[";
	forn(i, sz(v)) {
		if(i) out << ", ";
		out << v[i];
	}
	return out << "]";
}

mt19937 rnd(time(NULL));

const int INF = int(1e9);
const li INF64 = li(1e18);
const int MOD = INF + 7;
const ld EPS = 1e-9;
const ld PI = acos(-1.0);

const int N = 100 * 1000 + 13;

int n, k, p;
vector<int> g[N];

bool read () {
	if (scanf("%d%d%d", &n, &k, &p) != 3)
		return false;
	forn(i, n)
		g[i].clear();
	forn(i, n - 1){
		int v, u;
		scanf("%d%d", &v, &u);
		--v, --u;
		g[v].pb(u);
		g[u].pb(v);
	}
	return true;
}

int d[N];
int cnt[N];

void dfs(int v, int p = -1){
	if (v) ++cnt[d[v]];
	for (auto u : g[v]) if (u != p){
		d[u] = d[v] + 1;
		dfs(u, v);
	}
}

void solve() {
	memset(cnt, 0, sizeof(cnt));
	dfs(0);
	li cost = 0;
	map<int, int> cur;
	int sum = 0;
	int ans = 0;
	forn(i, n){
		cost += sum;
		cur[i] = cnt[i];
		sum += cnt[i];
		while (cost > p || sum > k){
			int dd = i - cur.begin()->x;
			li t;
			if (dd > 0)
				t = min(max(li(sum - k), (cost - p + dd - 1) / dd), li(cur.begin()->y));
			else
				t = min(sum - k, cur.begin()->y);
			cur.begin()->y -= t;
			sum -= t;
			cost -= t * dd;
			if (cur.begin()->y == 0)
				cur.erase(cur.begin());
		}
		ans = max(ans, sum);
	}
	printf("%d\n", ans);
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
	
	int tt = clock();
	
#endif
	
	cerr.precision(15);
	cout.precision(15);
	cerr << fixed;
	cout << fixed;

	while(read()) {	
		solve();
		
#ifdef _DEBUG
	cerr << "TIME = " << clock() - tt << endl;
	tt = clock();
#endif

	}
}