#include <vector>
#include <cstdio>
#include <iostream>
#include <map>
#include <set>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstring>
#include <deque>
#ifdef WIN32
#define I64 "%I64d"
#else
#define I64 "%lld"
#endif
#define speed() ios_base::sync_with_stdio(0), cin.tie()
#define pb push_back
#define mp make_pair
#define y1 y1asd
#define f first
#define s second
#define sz(s) ((int)s.size())
#define all(s) (s).begin(), (s).end()
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
const int mod = (int)1e9 + 7;
const int inf = (1 << 30) - 1;
const int N = (int)1e6 + 5;


int n, m, k, w, x[N], v[N], cnt[N];
pii val[N], a[N];
int f[N];
ll ans;

void add(int R) {
    while (R <= k) {
        f[R]++;
        R |= R + 1;
    }
}
int get(int R) {
    int res = 0;
    while (R >= 0) {
        res += f[R];
        R = (R & (R + 1)) - 1;
    }
    return res;
}

bool cmp(pii a, pii b) {
    return abs((ll)a.f * b.s) < abs((ll)a.s * b.f);
}

void solve() {
    for (int i = 0; i < k; i++) f[i] = 0;
    sort(a + 1, a + 1 + n);
    for (int i = 1; i <= n; i++) {
        int j = i;
        while (j + 1 <= n && a[j + 1] == a[i]) j++;
        for (int t = i; t <= j; t++)
            ans += get(k-1) - get(a[t].s - 1);
        for (int t = i; t <= j; t++)
            add(a[t].s);
        i = j;
        // printf("%d %d\n", a[i].f, a[i].s);
        // printf("%lld\n", ans);
    }
}

int main() {
    scanf("%d %d", &n, &w);
    for (int i = 1; i <= n; i++) {
        scanf("%d %d", x + i, v + i);
        val[k++] = mp(x[i], v[i]);
        val[k++] = mp(x[i], v[i] - w);
        val[k++] = mp(x[i], v[i] + w);
    }
    sort(val, val + k, cmp);

    for (int i = 1; i <= n; i++) {
        a[i].f = lower_bound(val, val + k, mp(x[i], v[i] - w), cmp) - val;
        a[i].s = lower_bound(val, val + k, mp(x[i], v[i] + w), cmp) - val;
        cnt[a[i].f]++;
        // printf("%d/%d (%d, %d)\n", x[i],v[i],a[i].f, a[i].s);
    }
    solve();
    for (int i = 0; i < k; i++) {
        ans += (ll)cnt[i] * (cnt[i]-1) / 2;
    }

    cout << ans << "\n";

#ifdef LOCAL
    cerr << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
#endif
    return 0;
}