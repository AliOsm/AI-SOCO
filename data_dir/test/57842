#include <algorithm>
#include <iostream>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdlib>
#include <cstdio>
#include <bitset>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <set>

#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

typedef long long ll;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 201010;

vector<int> xs;
bool used[N];
bool passed[N];
vector<pair<int, int> > g[N];
int ans[N], l[N], r[N];

void dfs(int u){
    used[u] = 1;
    foreach(it, g[u]){
        int v = it->first;
        int id = it->second;
        if(!passed[id]){
            passed[id] = 1;
            ans[id] = (u < v);
            eprintf("%d -> %d\n",xs[u - 1],xs[v - 1]);
            dfs(v);
        }
    }
}

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    int m = read();

    for(int i = 1; i <= m; i++){
        l[i] = read();
        r[i] = read() + 1;
        xs.push_back(l[i]);
        xs.push_back(r[i]);
    }

    sort(all(xs));
    xs.erase(unique(all(xs)), xs.end());

    int n = xs.size();

    for(int i = 1; i <= m; i++){
        l[i] = lower_bound(all(xs), l[i]) - xs.begin() + 1;
        r[i] = lower_bound(all(xs), r[i]) - xs.begin() + 1;
        g[l[i]].push_back(make_pair(r[i], i));
        g[r[i]].push_back(make_pair(l[i], i));
    }

    vector<int> odds;
    for(int i = 1; i <= n; i++){
        if(g[i].size() & 1){
            odds.push_back(i);
        }
    }

    assert((int)odds.size() % 2 == 0);

    eprintf("nodds = %d\n",odds.size());

    int ptr = m;
    for(int i = 0; i + 1 < odds.size(); i += 2){
        eprintf("%d, %d\n",xs[odds[i] - 1],xs[odds[i + 1] - 1]);
        ++ptr;
        g[odds[i]].push_back(make_pair(odds[i + 1], ptr));
        g[odds[i + 1]].push_back(make_pair(odds[i], ptr));
    }

    for(int i = 1; i <= n; i++){
        if(!used[i]){
            dfs(i);
        }
    }

    for(int i = 1; i <= m; i++){
        printf("%d ", ans[i]);
    }

    return 0;
}

