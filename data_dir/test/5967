#include<bits/stdc++.h>
using namespace::std;

typedef pair<int,int> ii;
typedef pair<int,ii> iii;
typedef vector<iii> viii;

const int N = 200000+5;

int n, m;
int par[N];
viii edges;
int last[N];
int par2[N];
int sizes[N];
int sizes2[N];

void init(){
    for(int i=1; i<=n; i++){
        par[i] = i;
        sizes[i] = 1;
        last[i] = 0;
    }
}

int get(int x){
    return par[x] == x? x : par[x] = get(par[x]);
}

int join(int a, int b, int w){
    a = get(a);
    b = get(b);
    if(a == b){
        if(last[a] < w) return 1;
        else return 2;
    }
    if(sizes[a] > sizes[b]) swap(a,b);
    sizes[b] += sizes[a];
    par[a] = b;
    last[b] = max(last[b],w);
    return 0;
}

int main(){
    scanf("%d %d",&n,&m);
    init();
    int u, v, w;
    for(int i=0; i<m; i++){
        scanf("%d %d %d",&u,&v,&w);
        edges.emplace_back(make_pair(w,make_pair(u,v)));
    }
    sort(edges.begin(),edges.end());
    int ans = 0;
    int L = 0, R = 0;
    while(L < m){
        while(R < m and edges[L].first == edges[R].first){
            R += 1;
        }
        vector<int> edgesExtra, edgesMST;
        for(int i=L; i<R; i++){
            u = edges[i].second.first;
            v = edges[i].second.second;
            w = edges[i].first;
            if(get(u) == get(v)) edgesExtra.emplace_back(i);
            else edgesMST.emplace_back(i);
        }
        for(auto x : edgesMST){
            u = edges[x].second.first;
            v = edges[x].second.second;
            w = edges[x].first;
            int type = join(u,v,w);
            if(type) ans += type - 1;
        }
        L = R;
    }
    cout << ans << endl;
    return 0;
}