#include <iostream>
#include <cstdio>
#include <algorithm>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <functional>
#include <cstring>
#include <fstream>
#include <memory.h>
#include <iomanip>
#include <omp.h>
#include <string>

using namespace std;

#define right asfdsg
#define left asfdsvs
#define MAXN 1000100
#define F first
#define S second
#define pb push_back
#define mp make_pair

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

char s[100500];
int n;
int a[26], b[26];
int sum = 0;
int aa[26], bb[26];

bool ok(int len) {
    int cnt = 0;
    memset(aa, 0, sizeof(aa));
    memset(bb, 0, sizeof(bb));
    for (int i = 1; i <= len; i ++) {
        if (s[i] >= 'a' && s[i] <= 'z') aa[ s[i] - 'a' ] ++, cnt += aa[ s[i] - 'a' ] == 1;
        if (s[i] >= 'A' && s[i] <= 'Z') bb[ s[i] - 'A' ] ++, cnt += bb[ s[i] - 'A' ] == 1;
    }
    if (cnt == sum) return true;
    for (int i = 1; i <= n - len; i ++) {
        if (s[i] >= 'a' && s[i] <= 'z') aa[ s[i] - 'a' ] --, cnt -= aa[ s[i] - 'a' ] == 0;
        if (s[i] >= 'A' && s[i] <= 'Z') bb[ s[i] - 'A' ] --, cnt -= bb[ s[i] - 'A' ] == 0;

        i += len;
        if (s[i] >= 'a' && s[i] <= 'z') aa[ s[i] - 'a' ] ++, cnt += aa[ s[i] - 'a' ] == 1;
        if (s[i] >= 'A' && s[i] <= 'Z') bb[ s[i] - 'A' ] ++, cnt += bb[ s[i] - 'A' ] == 1;
        i -= len;
        if (cnt == sum) return true;
    }
    return false;
}

int main() {
    scanf ("%d\n", &n);
    gets(s + 1);
    for (int i= 1; i <= n; i ++) {
        if (s[i] >= 'a' && s[i] <= 'z') a[ s[i] - 'a' ] = 1;
        if (s[i] >= 'A' && s[i] <= 'Z') b[ s[i] - 'A' ] = 1;
    }

    for (int i = 0; i < 26; i ++)
        sum += a[i] + b[i];
    int l = 1;
    int r = n;
    while ( l != r ) {
        int m = (l + r) >> 1;
        if (ok(m))
            r = m;
        else l = m + 1;
    }
    cout << r;
    return 0;
}
