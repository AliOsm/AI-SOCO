//.cpp
#include <bits/stdc++.h>

using namespace std;

void out() {
    cout<<-1;
    exit(0);
}

const double eps = 1e-7;
const int N = 2e5+9;

int n, m, p, q, sum[300][300], ans, k, u[300][300];
string s[300];
queue<pair<pair<int, int>, int>> Q;

void bfs(int x, int y)
{
    int noise = q*(s[x][y]-'A'+1);
    Q.push({{x, y}, noise});
    u[x][y] = k;
    
    pair<pair<int, int>, int> curr;
    while(Q.size()) 
    {
        curr = Q.front();
        Q.pop();
        x = curr.first.first;
        y = curr.first.second;
        noise = curr.second;
        
        sum[x][y] += noise;
        
        if(noise/2==0) continue;
        
        int dx = x+1, dy = y;
        if(dx<n && s[dx][dy]!='*' && u[dx][dy]!=k) 
            u[dx][dy] = k,
            Q.push({{dx, dy}, noise/2});
        
        dx = x-1; dy = y;
        if(dx>=0 && s[dx][dy]!='*' && u[dx][dy]!=k) 
            u[dx][dy] = k,
            Q.push({{dx, dy}, noise/2});
        
        dx = x; dy = y+1;
        if(dy<m && s[dx][dy]!='*' && u[dx][dy]!=k) 
            u[dx][dy] = k,
            Q.push({{dx, dy}, noise/2});
        
        dx = x; dy = y-1;
        if(dy>=0 && s[dx][dy]!='*' && u[dx][dy]!=k) 
            u[dx][dy] = k,
            Q.push({{dx, dy}, noise/2});
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin>>n>>m>>q>>p;
    for(int i=0; i<n; i++) cin>>s[i];
    
    for(int i=0; i<n; i++)
        for(int j=0; j<m; j++)
            if(s[i][j]>='A' && s[i][j]<='Z')
                k++,
                bfs(i, j);
                
    for(int i=0; i<n; i++)
    {
        for(int j=0; j<m; j++)
        {
            //cout<<sum[i][j]<<"\t";
            if(sum[i][j]>p) ans++;
        }
        //cout<<endl;
    }       
    cout<<ans;
    return 0;
}
