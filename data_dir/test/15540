#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <stack>
#include <memory.h>
#include <list>
#include <numeric>
#include <functional>
#include <complex>
#include <unordered_set>

#define ll long long
#define ld long double
#define ull unsigned ll
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()

using namespace std;


int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("dictionary.in", "r", stdin);
	//freopen("dictionary.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	cout.precision(6); cout.setf(ios::fixed);
	ll x0, y0, ax, ay, bx, by;
	cin >> x0 >> y0 >> ax >> ay >> bx >> by;

	ll xs, ys, t;
	cin >> xs >> ys >> t;

	vector<pair<ll, ll>>points = { { x0, y0 } };
	while (1) {
		ll dx = points.back().first * ax + bx;
		ll dy = points.back().second * ay + by;

		if (dx >= 3e16 || dy >= 3e16) break;
		points.emplace_back(dx, dy);
	}

	int ans = 0;
	for (int i = 0; i < (int)points.size(); i++) {
		for (int j = i; j < (int)points.size(); j++) {
			ll cur = min(
				abs(points[i].first - xs) + abs(points[i].second - ys),
				abs(points[j].first - xs) + abs(points[j].second - ys));

			cur += abs(points[i].first - points[j].first) +
				abs(points[i].second - points[j].second);

			if (cur <= t) {
				ans = max(ans, j - i + 1);
			}
		}
	}

	cout << ans;
	return 0;
}
