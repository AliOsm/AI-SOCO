#include <iostream>
#include <set>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <cstdio>

using namespace std;

const int MAXN = 111111;

vector< pair<double, int> > volumes;
int ranking[MAXN];
double v[MAXN];
double BIT[MAXN];

double query(int pos){
    double ret = 0.0;
    while(pos){
        ret = max(ret, BIT[pos]);
        pos -= pos & -pos;
    }
    return ret;
}

void update(int pos, double value){

    while( pos <= 100000){
        BIT[pos] = max(BIT[pos], value);
        pos += pos & -pos;
    }
}

int main() {


	int n; cin >> n;

    for(int i = 1; i <= n; i++){
        int r, h; cin >> r >> h;
        double volume = acos(-1) * r * r * h;

        volumes.push_back( make_pair(volume, i) );
    }

    sort( volumes.begin(), volumes.end() );

    int r = 1;

    int e = 0;

    for(int i = 0; i < volumes.size(); i = e){


        while( e < n && fabs(volumes[i].first - volumes[e].first) < 1e-15){
            ranking[ volumes[e].second ] = r;
            v[ volumes[e].second ] = volumes[e].first;

            e++;
        }

        r++;

    }

    double ans = 0.0;
    for(int i = 1; i <= n; i++){
        double cur = v[i] + query( ranking[i] - 1 );
        ans = max(ans, cur);
        update(ranking[i], cur);
    }

    printf("%.10lf\n", ans);

	return 0;
}
