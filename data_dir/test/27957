#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define IN freopen("transposition-115.txt","r",stdin)
#define OUT freopen("dichromatic.out","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 2000000000000000000LL
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define SZ(v) ((int)v.size())
#define sq(x)  ((x)*(x))

using namespace __gnu_pbds;
using namespace std ;

#define maxn 300005
#define mod 1000000007LL

typedef pair<i64,i64> pii ;
typedef  long long int T ;

int val[maxn] , Next[maxn] ;

int main()
{
    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

    int n , start , x ;

    scanf("%d %d %d",&n,&start,&x) ;

    vector <int> perm ;
    for(int i=1 ; i<=n ; i++) perm.pb(i) ;
    shuffle(perm.begin(), perm.end(), rng);

    int qLim = 1000 ;

    for(int i=0 ; i<min(n,qLim) ; i++)
    {
        printf("? %d\n",perm[i]) ;
        fflush(stdout) ;
        scanf("%d %d",&val[ perm[i]  ],&Next[ perm[i] ]) ;
        if(val[ perm[i] ]==x)
        {
            printf("! %d\n",x) ;
            return 0 ;
        }
    }

    printf("? %d\n",start) ;
    fflush(stdout) ;
    scanf("%d %d",&val[start],&Next[start]) ;

    if( val[start] >= x )
    {
        printf("! %d\n", val[start] ) ;
        return 0 ;
    }

    int lastIdx = start ;

    for(int i=1 ; i<=n ; i++)
    {
        if(Next[i] != 0 && val[i] < x && val[i] > val[lastIdx] ) lastIdx = i ;
    }

  //  printf("----------%d\n",lastIdx) ;

    while( 1 )
    {
        printf("? %d\n",lastIdx) ;
        fflush(stdout) ;
        scanf("%d %d",&val[lastIdx],&Next[lastIdx]) ;
        if( val[lastIdx] >= x || Next[ lastIdx ] == -1 ) break ;
        lastIdx = Next[lastIdx] ;
    }

    if( val[lastIdx] < x ) printf("! -1\n") ;
    else printf("! %d\n",val[lastIdx]) ;

    return 0 ;
}
