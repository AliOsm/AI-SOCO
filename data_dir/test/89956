#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define ld long double

const int N = 1e6*21 + 15;
const int B = 20;
int num[N], Next[N][2];

int pos = 1;

void dfs(int node,int x,int ind,int add){
	num[node] += add;
	if(ind<0){
		return;
	}
	int p = (x&(1<<ind) )>0 ? 1 : 0;
	if(!Next[node][p]){
		Next[node][p] = pos++;
	}
	dfs(Next[node][p],x,ind-1,add);
}

int query(int node,int x,int ind){
	int p = (x&(1<<ind) )>0 ? 1 : 0;
	if(ind<0){
		return 0;
	}
	int id = Next[node][p];

	if(id==0){
		return ( (1<<(ind+1))-1)&x;
	}
	if(num[id] != (1<<ind)){
		return p*(1<<ind) + query(id,x,ind-1);
	} else {
		p^=1;
		id = Next[node][p];
		if(id==0){
			return (( (1<<(ind))-1)&x) + (p)*(1<<ind);
		}
		return p*(1<<ind) + query(id,x,ind-1);
	}
}

void solve(){
	int root = 0;
	set<int> s;
	int n,m;
	scanf("%d%d",&n,&m);
	for(int i=0;i<n;++i){
		int a;
		scanf("%d",&a);
		if(s.count(a)){
			continue;
		}
		s.insert(a);
		dfs(root,a,B,1);
	}
	int x = 0;
	while(m--){
		int a;
		scanf("%d",&a);
		x^=a;
		printf("%d\n", query(root,x,B)^x);
	}
}
int main(){
	//freopen("input.txt","r",stdin);
	solve();
}