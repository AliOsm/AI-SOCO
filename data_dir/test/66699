#include <bits/stdc++.h>

using namespace std;

#define x first
#define y second
#define mp make_pair
#define pb push_back
#define sqr(a) ((a) * (a))
#define sz(a) int(a.size())
#define all(a) a.begin(), a.end()
#define forn(i, n) for(int i = 0; i < int(n); i++) 
#define fore(i, l, r) for(int i = int(l); i < int(r); i++)

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template <class A, class B> ostream& operator << (ostream& out, const pair<A, B> &a) {
	return out << "(" << a.x << ", " << a.y << ")";
}

template <class A> ostream& operator << (ostream& out, const vector<A> &v) {
	out << "[";
	forn(i, sz(v)) {
		if(i) out << ", ";
		out << v[i];
	}
	return out << "]";
}

mt19937 rnd(time(NULL));

const int INF = int(1e9);
const li INF64 = li(1e18);
const int MOD = INF + 7;
const ld EPS = 1e-9;
const ld PI = acos(-1.0);

int v, u, mod;

bool read () {
	if (scanf("%d%d%d", &v, &u, &mod) != 3)
		return false;
	return true;
}

int inv(int a, int b = mod - 2){
	int res = 1;
	while (b){
		if (b & 1) res = (res * li(a)) % mod;
		a = (a * li(a)) % mod;
		b >>= 1;
	}
	return res;
}

map<pt, pt> p;

void out(int x){
	vector<int> res;
	
	pt cur;
	
	cur = mp(x, 0);
	while (cur.x != v){
		int nxt = p[cur].x;
		if ((nxt + 1) % mod == cur.x)
			res.pb(1);
		else if ((nxt - 1 + mod) % mod == cur.x)
			res.pb(2);
		else
			res.pb(3);
		cur = p[cur];
	}
	
	reverse(all(res));
	
	cur = mp(x, 1);
	while (cur.x != u){
		int nxt = p[cur].x;
		if ((cur.x + 1) % mod == nxt)
			res.pb(1);
		else if ((cur.x - 1 + mod) % mod == nxt)
			res.pb(2);
		else
			res.pb(3);
		cur = p[cur];
	}
	
	printf("%d\n", sz(res));
	for (auto it : res) printf("%d ", it);
	puts("");
}

void bfs(){
	p.clear();
	queue<pt> q;
	q.push(mp(v, 0));
	p[mp(v, 0)] = mp(v, 0);
	q.push(mp(u, 1));
	p[mp(u, 1)] = mp(u, 1);
	
	while (!q.empty()){
		pt it = q.front();
		q.pop();
		
		int nx;
		
		nx = (it.x + 1) % mod;
		if (!p.count(mp(nx, it.y))){
			p[mp(nx, it.y)] = it;
			
			if (p.count(mp(nx, it.y ^ 1))){
				out(nx);
				return;
			}
			
			q.push(mp(nx, it.y));
		}
		
		nx = (it.x - 1 + mod) % mod;
		if (!p.count(mp(nx, it.y))){
			p[mp(nx, it.y)] = it;
			
			if (p.count(mp(nx, it.y ^ 1))){
				out(nx);
				return;
			}
			
			q.push(mp(nx, it.y));
		}
		
		nx = inv(it.x);
		if (!p.count(mp(nx, it.y))){
			p[mp(nx, it.y)] = it;
			
			if (p.count(mp(nx, it.y ^ 1))){
				out(nx);
				return;
			}
			
			q.push(mp(nx, it.y));
		}
	}
	
	assert(false);
}

void solve() {
	if (v == u){
		puts("0\n");
		return;
	}
	
	bfs();
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
	
	int tt = clock();
	
#endif
	
	cerr.precision(15);
	cout.precision(15);
	cerr << fixed;
	cout << fixed;

	while(read()) {	
		solve();
		
#ifdef _DEBUG
	cerr << "TIME = " << clock() - tt << endl;
	tt = clock();
#endif

	}
}