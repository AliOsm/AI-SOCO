//Pham Huu Canh
//C. Valera and Tubes

#include<iostream>
#include<fstream>
#include<string.h>
#include<stdlib.h>
#include<stdio.h>
#include<math.h>
#include<algorithm>
#include<vector>
#include<queue>
#include<stack>
#include<map>
#include<set>

#define max64 9223372036854775807LL
#define max32 2147483647
#define max16 32767
#define EPS 1e-8
#define ll long long
#define ull unsigned long long
#define PB push_back
#define MP make_pair
#define PQ priority_queue
#define timmax(x, y) ((x) > (y) ? (x) : (y))
#define timmin(x, y) ((x) < (y) ? (x) : (y))

#define fi "C.inp"
#define fo "C.out"

using namespace std;

long nhang, ncot, nk;
struct toado
{
    long x, y;
};
toado H[4] = {-1, 0,  0, 1,  1, 0,  0, -1};

void input()
{
    long x, y, h, i;
    
    scanf("%ld %ld %ld", &nhang, &ncot, &nk);
    
    x = y = 1;
    h = 1;
    for (i = 1; i < nk; i++)
    {
        printf("2 %ld %ld", x, y);
        
        x += H[h].x;
        y += H[h].y;
        
        if (y > ncot)
        {
            y = ncot;
            x++;
            h = 3;
        }
        else if (y < 1)
        {
            y = 1;
            x++;
            h = 1;
        }
        
        printf(" %ld %ld\n", x, y);
        x += H[h].x;
        y += H[h].y;
        
        if (y > ncot)
        {
            y = ncot;
            x++;
            h = 3;
        }
        else if (y < 1)
        {
            y = 1;
            x++;
            h = 1;
        }
    }
    
    printf("%ld", nhang * ncot - 2*(nk-1));
    while (x <= nhang)
    {
        printf(" %ld %ld", x, y);
        x += H[h].x;
        y += H[h].y;
        if (y > ncot)
        {
            y = ncot;
            x++;
            h = 3;
        }
        else if (y < 1)
        {
            y = 1;
            x++;
            h = 1;
        }
    }
    printf("\n");
}

int main()
{
    //freopen(fi,"r",stdin);
    //freopen(fo,"w",stdout);
    
    input();
    
    return 0;
}
