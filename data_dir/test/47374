#include <bits/stdc++.h>

using namespace std;

#define fr first
#define sc second
#define pb push_back
#define ins insert
#define input freopen("input.txt","r",stdin)
#define output freopen("output.txt","w",stdout)
#define mp make_pair
#define fast_io ios_base::sync_with_stdio(0);
#define form(i,a,n) for (int i=(a);i<(n);i++)
#define forn(i,a,n) for (int i=(a);i<(n);i++)
//iterator , unsigned, begin, end, count, continue
// fixed setprecision

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef vector<int> vi;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

string itosm(ll x){
    if(x == 0)
        return "0";
    string ans = "";
    while(x > 0){
        ans +=((x%10) + '0');
        x/=10;
    }
    reverse(ans.begin(), ans.end());
    return ans;
}

ll stoim(string str){
    ll ans = 0;
    ll k = 1;
    for(int i = str.length()-1; i >= 0; i--){
        ans+=(str[i]-'0')*k;
        k*=10;
    }
    return ans;
}

const ll infll = 1e18 + 3;
const int inf = 1009000999;
const double eps = 1e-6;
const int maxn = 1e6 + 7777;
const int baseint = 1000200013;
const ll basell = 1e18 + 3;
const ld PI = acos(-1.0);
const ll mod = 1e9 + 7;

int ans[maxn];

void solve(){
    int n;
    cin >> n;
    vector<int> a(n);
    int ai = 0;
    form(i, 0, n)
        cin >> a[i];
    vector<int> b;
    while(a.size()){
        sort(a.begin(), a.end());
        ans[ai++] = a[0];
        form(i, 1, a.size())
            if(a[i] != a[i - 1]){
                ans[ai++] = a[i];
            }
            else
                b.pb(a[i]);
        a.clear();
        for(int x : b)
            a.pb(x);
        b.clear();
    }
    int c = 0;
    form(i, 1, n)
        if(ans[i] > ans[i - 1])
            c++;
    cout << c;
}

int main() {
    srand(time(0));
    fast_io;
    cin.tie(0);
//    freopen("horse.in", "r", stdin);
//    freopen("horse.out", "w", stdout);
//    int t;
//    cin >> t;
//    while(t--)
        solve();
    return 0;
}
