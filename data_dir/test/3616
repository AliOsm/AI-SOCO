#include <bits/stdc++.h>

using namespace std;

#define mem(a,b) memset(a,b,sizeof(a))
#define FOR(i,j,k) for(int i=j;i<=k;i++)
#define REV(i,j,k) for(int i=j;i>=k;i--)
#define FORR(i,j,k,l) for(int i=j;i<=k;i+=l)
#define inf         freopen("in.txt", "r", stdin)
#define outf        freopen("out.txt", "w", stdout)
#define pf          printf
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define sfff(a,b,c)    scanf("%d %d %d", &a, &b, &c)
#define clean(mat,n)   FOR(i,0,n) mat[i].clear()
#define minn          (long long)-1000000000000000000
#define maxx          (long long) 1000000000000000000
#define mod          1000000007
#define M_PI           3.14159265358979323846  /* pi */
#define LL           long long
#define NL '\n'
#define cnd tree[idx]
#define lnd (idx<<1)
#define rnd ((idx<<1)+1)
#define PB push_back
#define F first
#define S second
#define MAX 200010
#define MP make_pair
#define valid(nx,ny)  ((nx >= 0) && (nx < row) && (ny >= 0) && (ny < col))
typedef pair<int,int> PR;

vector<PR> mat[MAX];
set<PR> sota;
int n, dis[MAX], show[MAX], in[MAX], ase[MAX], m, k;
PR ed[MAX];

void dfs(int p)
{
    ///cout << p << endl;
    ase[p] = 1;
    for(auto x : mat[p])
    {
        if(ase[x.F] || in[x.S]) continue;

        sota.erase( MP(dis[x.F], x.F) );
        dis[x.F]--;
        in[x.S] = 1;

        if(dis[x.F] >= k) sota.insert( MP(dis[x.F], x.F) );
        else dfs(x.F);

    }
}

int main()
{
    ios::sync_with_stdio(false);
    ///inf;
    //outf;

    cin >> n >> m >> k;
    FOR(i,1,m)
    {
        cin >> ed[i].F >> ed[i].S;

        mat[ ed[i].F ].PB( MP(ed[i].S, i) );
        mat[ ed[i].S ].PB( MP(ed[i].F, i) );

        dis[ ed[i].F ]++;
        dis[ ed[i].S ]++;
    }

    FOR(i,1,n)
        sota.insert( MP(dis[i], i));

    REV(i,m,1)
    {
        while(!sota.empty())
        {
            PR use = *(sota.begin());
            if(use.F < k)
            {
                ///cout << "Delete " << use.S << endl;
                dfs(use.S);
                sota.erase( use );
            }
            else break;
        }

        show[i] = sota.size();
        if( !in[i] )
        {
           /// cout << "OK" << i << endl;
            int u = ed[i].F, v = ed[i].S;

            in[i] = 1;

            sota.erase( MP(dis[ u ], u) );
            sota.erase( MP(dis[ v ], v) );

            dis[u]--; dis[v]--;

            sota.insert( MP(dis[ u ], u) );
            sota.insert( MP(dis[ v ], v) );
        }
    }

    FOR(i,1,m) cout << show[i] << endl;


    return 0;
}
