#include <bits/stdc++.h>

using namespace std;

#define x first
#define y second
#define mp make_pair
#define pb push_back
#define sqr(a) ((a) * (a))
#define sz(a) int(a.size())
#define all(a) a.begin(), a.end()
#define forn(i, n) for(int i = 0; i < int(n); i++) 
#define fore(i, l, r) for(int i = int(l); i < int(r); i++)

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template <class A, class B> ostream& operator << (ostream& out, const pair<A, B> &a) {
	return out << "(" << a.x << ", " << a.y << ")";
}

template <class A> ostream& operator << (ostream& out, const vector<A> &v) {
	out << "[";
	forn(i, sz(v)) {
		if(i) out << ", ";
		out << v[i];
	}
	return out << "]";
}

mt19937 rnd(time(NULL));

const int INF = int(1e9);
const li INF64 = li(1e18);
const int MOD = INF + 7;
const ld EPS = 1e-9;
const ld PI = acos(-1.0);

const int N = 5000 + 7;

int n;
int a[N];

bool read () {
	if (scanf("%d", &n) != 1)
		return false;
	a[0] = 0;
	forn(i, n)
		scanf("%d", &a[i + 1]);
	a[n + 1] = 0;
	return true;
}

int dp[N][N][2][2];

void solve() {
	forn(i, N) forn(j, N) forn(k, 2) forn(l, 2) dp[i][j][k][l] = INF;
	dp[0][0][0][0] = 0;
	
	forn(i, n){
		forn(j, (i + 1) / 2 + 1){
			dp[i + 1][j][0][0] = min(dp[i + 1][j][0][0], dp[i][j][0][0]);
			dp[i + 1][j][1][0] = min(dp[i + 1][j][1][0], dp[i][j][0][1]);
			dp[i + 1][j][0][0] = min(dp[i + 1][j][0][0], dp[i][j][1][0]);
			
			dp[i + 1][j + 1][0][1] = min(dp[i + 1][j + 1][0][1], dp[i][j][0][0]
															   + a[i] - min(a[i], a[i + 1] - 1)
															   + a[i + 2] - min(a[i + 2], a[i + 1] - 1));
			if (i > 0)
				dp[i + 1][j + 1][0][1] = min(dp[i + 1][j + 1][0][1], dp[i][j][1][0] 
																   - (a[i] - min(a[i], a[i - 1] - 1))
																   + a[i] - min(a[i], min(a[i - 1], a[i + 1]) - 1)
																   + a[i + 2] - min(a[i + 2], a[i + 1] - 1));
		}
	}
	
	fore(j, 1, (n + 1) / 2 + 1){
		int res = INF;
		forn(i, n + 1)
			forn(k, 2)
				forn(l, 2)
					res = min(res, dp[i][j][k][l]);
		printf("%d ", res);
	}
	puts("");
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
	
	int tt = clock();
	
#endif
	
	cerr.precision(15);
	cout.precision(15);
	cerr << fixed;
	cout << fixed;

	while(read()) {	
		solve();
		
#ifdef _DEBUG
	cerr << "TIME = " << clock() - tt << endl;
	tt = clock();
#endif

	}
}