#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define sz size
#define ll long long
#define ld long double
#define fs first
#define sc second
#define forn(i, f, t) for(int i = f; i < t; i++)
#define all(x) (x).begin(), (x).end()
#define ins insert

const int INF = 2147483647;
const int MOD = 1000000007;
const ll INF64 = 9223372036854775807;
const ld EPS = 1e-7;

using namespace std;

bool comp(pair<pair<int, int>, int> a, pair<pair<int, int>, int> b){
    return (a.fs.fs == b.fs.fs ? a.fs.sc > b.fs.sc : a.fs.fs < b.fs.fs);
}


vector<int> p;


int findR(int v){
    return (v == p[v] ? v : p[v] = findR(p[v]));
}


void unionSs(int v1, int v2){
    p[findR(v2)] = findR(v1);
}


int main(){
    //freopen("tests.in", "r", stdin);
    int n, m, f, t, s1 = 0, s2 = 0;
    scanf("%d%d", &n, &m);
    vector<pair<pair<int, int>, int> > a;
    vector<pair<int, int> > ans(m, pair<int, int>());
    vector<char> used(n, 0);
    forn(i, 0, m){
        scanf("%d%d", &f, &t);
        a.pb(mp(mp(f, t), i));
    }
    sort(all(a), comp);
    int lst = 1, lst1 = 1, lst2 = 2;
    forn(i, 0, m){
        if (a[i].fs.sc){
            ans[a[i].sc] = mp(0, lst++);
            if (lst > n){
                printf("-1\n");
                return 0;
            }
            s1 += a[i].fs.fs;
        }
        else{ 
            ans[a[i].sc] = mp(lst1, lst2);
            if (lst1 == lst2 - 1) lst1 = 1, lst2++; else lst1++;
            if (lst2 > n){
                printf("-1\n");
                return 0;
            }
        }
    }
    vector<pair<int, pair<int, int> > > d;
    forn(i, 0, m) d.pb(mp(a[i].fs.fs, mp(ans[a[i].sc].fs, ans[a[i].sc].sc)));
    forn(i, 0, n) p.pb(i);
    sort(all(d));
    forn(i, 0, m){
        if (findR(d[i].sc.fs) != findR(d[i].sc.sc)){
            unionSs(d[i].sc.fs, d[i].sc.sc);
            s2 += d[i].fs;
        }
    }
    if (s1 > s2){
        printf("-1\n");
        return 0;
    }
    forn(i, 0, m) printf("%d %d\n", ans[i].fs + 1, ans[i].sc + 1);
    return 0;
}