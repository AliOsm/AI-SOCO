#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
using namespace std;
#define ll long long
#define mp make_pair
//#define ld long double
const double sn = 1e-6;
int n;
struct el {
	int v, t, i;
};
el es[400005];
int cumu[800005];
int tree[800005 * 4];
map<int, int> mpn;
map < int, bool> mpv;
pair<int, int> ni[200005];
bool cmp(el e1, el e2) {
	if (e1.v != e2.v)
		return e1.v < e2.v;
	return e1.t < e2.t;
}
void build(int node, int s, int e) {
	if (s == e) {
		tree[node] = (cumu[s]>1 ? 1 : 0);
		return;
	}
	int mid = (s + e) / 2;
	build(node * 2, s, mid);
	build(node * 2+1, mid+1, e);
	tree[node] = tree[node * 2] + tree[node * 2 + 1];
}
int qu(int node, int s, int e, int l, int r) {
	if (s > r || e < l)
		return 0;
	if (s >= l && e <= r) {
		return tree[node];
	}
	int mid = (s + e) / 2;
	return qu(node*2, s, mid, l, r) +
		qu(node*2+1, mid+1, e, l, r);
}
int main() {
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		int l, r;
		scanf("%d%d", &l, &r);
		es[2*i] = {l,0, i};
		es[2*i+1] = { r,1, i};
	}
	sort(es, es+2*n, cmp);
	int c = 0, sub = 0;
	for (int i = 0; i < 2 * n; i++) {
		if (mpv[es[i].v]) {
			es[i].v = mpn[es[i].v];
		}
		else {
			mpv[es[i].v] = true;
			int sp = es[i].v - c;
			if (sp > 2)
				sub += sp - 2;
			mpn[es[i].v] = es[i].v - sub;
			c = es[i].v;
			es[i].v = es[i].v - sub;
		}
		if (es[i].t == 0) {
			cumu[es[i].v]++;
			ni[es[i].i].first = es[i].v;
		}
		else {
			cumu[es[i].v+1]--;
			ni[es[i].i].second = es[i].v;
		}
	}
	c=es[2*n-1].v + 1;
	for (int i = 1; i <= c; i++)
		cumu[i] += cumu[i - 1];
	build(1, 0, c);
	for (int i = 0; i < n; i++) {
		int val = qu(1, 0, c, ni[i].first, ni[i].second);
		if (val == ni[i].second - ni[i].first + 1) {
			printf("%d\n", i+1);
			return 0;
		}
	}
	printf("-1\n");
	return 0;
}