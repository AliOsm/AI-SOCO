#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>
#include <queue>
#include <deque>
#include <map>
#include <stack>
#include <stdio.h>
#include <string.h>

using namespace std;

const int N = 2 * 1000 * 100;
vector<int> graph[N];
int mark[N];
vector<int> part1;
vector<int> part2;
int prv = 0;
void input()
{
	part1.clear();
	part2.clear();
	for (int i = 0; i < prv; i++)
	{
		graph[i].clear();
		mark[i] = 0;
	}
	int n,m;
	cin >> n >> m;
	prv = n;
	for (int i = 0; i < m; i++)
	{
		int u,v;
		cin >> u >> v;
		graph[u - 1].push_back(v - 1);
		graph[v - 1].push_back(u - 1);
	}
}
void dfs(int v, int c)
{
	mark[v] = c;
	if (c == 1)
	{
		part1.push_back(v);
		c = 2;
	}
	else
	{
		part2.push_back(v);
		c = 1;
	}
	for (int i = 0; i < graph[v].size(); i++)
	{
		if (mark[graph[v][i]] == 0)
		{
			dfs(graph[v][i], c);
		}
	}
}
void solver()
{
	input();
	dfs(0,1);
	if (part1.size() < part2.size())
	{
		cout << part1.size() << endl;
		for (int i = 0; i < part1.size(); i++)
		{
			cout << part1[i] + 1 << " ";
		}
		cout << endl;
	}
	else
	{
		cout << part2.size() << endl;
		for (int i = 0; i < part2.size(); i++)
		{
			cout << part2[i] + 1 << " ";
		}
		cout << endl;
	}
}
int main(){
	int t;
	cin >> t;
	for (int i = 0; i < t; i++)
	{
		solver();
	}



	
}






