#include <bits/stdc++.h>
using namespace std;

const int MAX = 2e5 + 5;
int n, cent[MAX], sz[MAX];
vector <int> g[MAX];

void dfs2(int u, int pt = 0) {
	sz[u] = 0;

	for(int v : g[u]) {
		if(v == pt || cent[v])
			continue;

		dfs2(v, u);
		sz[u] += sz[v];
	}

	sz[u]++;
}

int dfs1(int u, int r, int pt = 0) {
	int t = -1;

	for(int v : g[u]) {
		if(v == pt || cent[v])
			continue;

		if(t == -1 || sz[v] > sz[t])
			t = v;
	}

	if(t == -1 || 2 * sz[t] <= sz[r])
		return u;

	return dfs1(t, r, u);
}

int ask_dt(int u) {
	printf("d %d\n", u);
	fflush(stdout);
	int x; scanf("%d", &x);

	if(x == -1)
		exit(0);

	return x;
}

int ask_to(int u) {
	printf("s %d\n", u);
	fflush(stdout);

	int x; scanf("%d", &x);

	if(x == -1)
		exit(0);

	return x;
}

int d_1x, lev[MAX];

void dfs_lev(int u, int p = -1, int l = 0) {
	lev[u] = l;

	for(int v : g[u]) {
		if(v != p)
			dfs_lev(v, u, l + 1);
	}
}

void cdec(int u, int p = 0) {
	dfs2(u);
	int c = dfs1(u, u);

	cent[c] = 1;

	int dt = ask_dt(c);

	if(dt == 0) {
		printf("! %d\n", c);
		exit(0);
	}

	if(d_1x == lev[c] + dt) {
		int to = ask_to(c);

		assert(!cent[to]);
		cdec(to, c);
	}

	else {
		for(int v : g[c]) {
			if(!cent[v] && lev[v] < lev[c]) {
				cdec(v, c);
				break;
			}
		}
	}
}

int main() {
	scanf("%d", &n);

	for(int i = 1; i < n; i++) {
		int a, b; scanf("%d%d", &a, &b);
		g[a].push_back(b);
		g[b].push_back(a);
	}

	dfs_lev(1);

	d_1x = ask_dt(1);
	cdec(1);

	return 0;
}