#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <queue>
#include <cstdlib>
#include <ctime>
#include <cassert>

#define pb push_back
#define mp make_pair

#define f first
#define s second

using namespace std;

typedef pair<int, int> pii;
typedef long long ll;

const int N = (int) 1e6 + 7;
const int MOD = (int) 1e9 + 7;

const int SQRT = (int) 320;

int n, m;

vector<int> cnt[N];
vector<int> g[N];
set<int> all;

int color[N];
int root;

void dfs(int v, int par = 0) {
  for (auto it : cnt[v])
    if (color[it])
      all.erase(color[it]);
  for (auto it : cnt[v]) {
    if (!color[it]) {
      if (all.empty()) assert(false);
      color[it] = *all.begin();
      all.erase(color[it]);
    }
  }
  for (auto it : cnt[v])
    all.insert(color[it]);
  for (auto to : g[v]) {
    if (to == par) continue;
    dfs(to, v);
  }
}

int main() {
  #ifdef LOCAL
  freopen("in.txt", "r", stdin);
  #endif

  scanf("%d%d", &n, &m);
  for (int i = 1; i <= n; i++) {
    int k; scanf("%d", &k);
    while (k--) {
      int type;
      scanf("%d", &type);
      cnt[i].pb(type);
    }
  }
  for (int i = 1; i < n; i++) {
    int u, v;
    scanf("%d%d", &u, &v);
    g[u].pb(v);
    g[v].pb(u);
  }
  root = 1;
  for (int i = 1; i <= n; i++) {
    if (cnt[i].size() > cnt[root].size())
      root = i;
  }
  int sz = 0;
  for (auto it : cnt[root])
    all.insert(++sz);
  
  sz = max(sz, 1);

  dfs(root);
  printf("%d\n", sz);
  for (int i = 1; i <= m; i++) {
    if (!color[i]) color[i] = 1;
    printf("%d ", color[i]);
  }

  return 0;
}