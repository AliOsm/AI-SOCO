#include <bits/stdc++.h>

using namespace std;
#define ll long long
const int N = 2e5 + 5;
map<vector<int>, int> mp;
vector<int> p[150];
int g[150][150];

int go(int i, int j) {
    vector<int> res(p[i].size());
    for (int k = 0; k < res.size(); k++)res[k] = p[i][p[j][k]];
    return mp[res];
}

int a[N];
vector<int> ind[150];
int vis[150];

int bfs(vector<int> &e, int id) {
    vis[0] = id;
    queue<int> q;
    q.push(0);
    int ret = 0;
    while (q.size()) {
        int node = q.front();
        q.pop();
        ++ret;
        for (auto &x:e) {
            if (vis[g[node][x]] != id) {
                vis[g[node][x]] = id;
                q.push(g[node][x]);
            }
        }
    }
    return ret;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n, k;
    cin >> n >> k;
    vector<int> perm(k);
    iota(perm.begin(), perm.end(), 0);
    int cnt = 0;
    do {
        p[cnt] = perm;
        mp[perm] = cnt++;
    } while (next_permutation(perm.begin(), perm.end()));

    for (int i = 0; i < cnt; i++) {
        for (int j = 0; j < cnt; j++) {
            g[i][j] = go(i, j);
        }
    }

    for (int i = 0; i < n; i++) {
        vector<int> tmp(k);
        for (auto &x:tmp) cin >> x, --x;
        a[i] = mp[tmp];
        ind[a[i]].push_back(i);
    }
    ll ans = 0;
    int id = 0;
    for (int i = 0; i < n; i++) {
        vector<int> tmp;
        for (int j = 0; j < cnt; j++) {
            auto it = lower_bound(ind[j].begin(), ind[j].end(), i);
            if (it == ind[j].end())continue;
            tmp.push_back(*it);
        }
        sort(tmp.begin(), tmp.end());
        ++id;
        int sz = 1;
        vis[0] = id;
        ans += n - i;
        vector<int> gen = {0};
        for (auto &x:tmp) {
            bool usfel = 0;
            int per = a[x];
            for (auto &y:gen) {
                if (vis[g[y][per]] != id) {
                    usfel = 1;
                    break;
                }
            }
            if (usfel) {
                gen.push_back(per);
                ++id;
                int nsz = bfs(gen, id);
                ans += (n - x) * 1LL * (nsz - sz);
                sz = nsz;
            }
        }

    }
    cout << ans << endl;
    return 0;

}