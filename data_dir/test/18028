#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <cmath>

using namespace std;

const int dx[4]={0,0,-1,1},
          dy[4]={1,-1,0,0};

string s[1111];
int met[1111][1111];
int n,m,xs,ys,xe,ye,d,ans,i,j;

int q[1111*1111][2],qs,qe;

void bfs(int x, int y) {
    memset(met,255,sizeof(met));
    qs=qe=0;
    q[qe][0]=x,q[qe][1]=y;
    qe++;
    met[x][y]=0;
    while (qs<qe) {
        x=q[qs][0],y=q[qs][1];
        qs++;
        for (int step=0;step<4;step++) {
            int xx=x+dx[step],yy=y+dy[step];
            if (xx>=0 && xx<n && yy>=0 && yy<m && met[xx][yy]==-1 && s[xx][yy]!='T') {
                q[qe][0]=xx,q[qe][1]=yy;
                qe++;
                met[xx][yy]=met[x][y]+1;
            }
        }
    }
}

int main()
{
    cin >> n >> m;

    for (i=0;i<n;i++)
        cin >> s[i];

    for (i=0;i<n;i++)
        for (j=0;j<m;j++) {
            if (s[i][j]=='S') {
                xs=i,ys=j;
            }
            else if (s[i][j]=='E') {
                xe=i,ye=j;
            }
        }

    bfs(xe,ye);

    d=met[xs][ys];

    for (i=0;i<n;i++)
        for (j=0;j<m;j++)
            if (s[i][j]>='0' && s[i][j]<='9' && met[i][j]<=d && met[i][j]!=-1) {
                ans+=(int)(s[i][j]-'0');
            }

    cout << ans;

    return 0;
}
