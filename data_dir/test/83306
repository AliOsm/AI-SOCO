// start of CP 3.0
#include <bits/stdc++.h>

//____By:sirjan13____

#define int long long
#define ld long double
#define mod 1000000007
#define mod1 mod
#define mod2 100000009
#define show(a) for(int i=0;i<a.size();i++) cout<<a[i]<<" ";
#define fi first
#define se second
#define vi vector<int>
#define vs vector<string>
#define vll vector<ll>
#define pb push_back
#define pi pair<int,int>
#define si set<int>
#define sll set<ll>
#define pll pair<ll, ll>
#define sci(x) scanf("%d",&x)
#define scs(x)  scanf("%s", x)
#define scll(x) scanf("%I64d",&x)
#define all(v) v.begin(),v.end()
#define sot(v) sort(v.begin(), v.end())
#define maxheap priority_queue<int>
#define minheap priority_queue<int,vector<int>,greater<int>>
#define mp make_pair
#define fast_io() cin.sync_with_stdio(false);cout.sync_with_stdio(false);
#define PI 3.1415926535
#define long_zero 0ll
#define long_one 1ll

inline int sbt(int x){return __builtin_popcount(x);}

using namespace std;

#define TRACE
#ifdef TRACE
#define deb(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << std::endl;
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define deb(...)
#endif
#define N 400013
int a[N], dp[N], n, l, r, k, x, dp1[N];

int32_t main() {
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    fast_io()
    cin >> n >> k;
    for(int i = 1; i <= n; i++) {
        cin >> x;
        a[i] = a[i - 1] + x;
    }
    for(int i = k; i <= n; i++) dp[i - k + 1] = a[i] - a[i - k];
    dp1[1] = dp[1];
    for(int i = 2; i <= (n - k + 1); i++) {
        dp1[i] = max(dp1[i - 1], dp[i]);
    }
    int maxi = -1, l, r;
    for(int i = n - k + 1; i > k; i--) {
        if((dp[i] + dp1[i - k]) >= maxi) {
            maxi = dp[i] + dp1[i - k];
            r = i;
        }
    }
    for(int i = 1; i <= (r - k); i++) {
        if((dp[i] + dp[r]) == maxi) {
            l = i;
            break;
        }
    }
    cout << l << ' ' << r;
    
    return 0;
}
