/*
ID: hepic
PROG: lamps
LANG: C++11
*/
#include<bits/stdc++.h>

#define FOR(i,a,b) for(auto i=a; i!=b+1-2*(a>b); i+=1-2*(a>b))
#define REP(i,a,b) for(auto i=a-(a>b); i!=b-(a>b); i+=1-2*(a>b))
#define ALL(v) v.begin(),v.end()
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define eb(a, b) emplace_back(a, b)
#define fir first
#define sec second
#define what_is(x) cout<<#x<<" is "<<x<<endl;
#define min3(a,b,c) min(min(a,b),c)
#define max3(a,b,c) max(max(a,b),c)
#define SIZE 200010
#define MAXN 1000000007
#define NUM 200010
#define PI 3.141592653589793
#define open_read1 freopen("C:\\Users\\Hepic\\Desktop\\a.txt","r",stdin)
#define open_write1 freopen("C:\\Users\\Hepic\\Desktop\\b.txt","w",stdout)
#define open_read freopen("lamps.in","r",stdin)
#define open_write freopen("lamps.out","w",stdout)

using namespace std;


typedef long long LL;
typedef pair<int,int> PII;
typedef pair<int, PII> PIPII;
typedef pair<LL,LL> PLL;


template<typename T, typename T1>
ostream& operator << (ostream &out, pair<T, T1> obj)
{
    return out<<"("<<obj.first<<","<<obj.second<<")";
}


template<typename T, typename T1>
ostream& operator << (ostream &out, map<T, T1> cont)
{
    typename map<T, T1>::const_iterator itr = cont.begin();
    typename map<T, T1>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;
}


template<typename T>
ostream& operator << (ostream &out, set<T> cont)
{
    typename set<T>::const_iterator itr = cont.begin();
    typename set<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;
}


template<typename T, template<typename ELEM, typename ALLOC=allocator<ELEM>> class CONT>
ostream& operator << (ostream &out, CONT<T> cont)
{
    typename CONT<T>::const_iterator itr = cont.begin();
    typename CONT<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;
}


template<typename T>
T gcd(T a, T b)
{
    T min_v = min(a, b);
    T max_v = max(a, b);

    while(min_v)
    {
        T temp = max_v % min_v;
        max_v = min_v;
        min_v = temp;
    }

    return max_v;
}


template<typename T>
T lcm(T a, T b)
{
    return (a*b) / gcd(a, b);
}

/*#################################################################################################################
#################################################################################################################
#################################################################################################################
#################################################################################################################*/

int B, E;
LL bear[SIZE], elephant[SIZE];
LL diff_bear[SIZE], diff_elephant[SIZE];
LL lps[SIZE], answer;


void compulteLps()
{
    int i=3, len=2;


    lps[2] = 2;

    while(i <= E)
    {
        if(diff_elephant[i] == diff_elephant[len])
        {
            ++len;
            lps[i] = len;
            ++i;
        }

        else if(len > 2)
            len = lps[len-1];

        else
        {
            lps[i] = 2;
            ++i;
        }
    }
}


void KMP()
{
    int b=2, e=2;

    compulteLps();


    while(b <= B)
    {
        if(diff_elephant[e] == diff_bear[b])
        {
            ++b;
            ++e;

            if(e > E)
            {
                e = lps[e-1];
                ++answer;
            }
        }

        else if(e > 2)
            e = lps[e-1];

        else
            ++b;

    }
}





int main()
{
    //open_read1;
    scanf("%d%d", &B, &E);

    FOR(i, 1, B)
        scanf("%I64d", bear+i);

    FOR(i, 1, E)
        scanf("%I64d", elephant+i);


    if(E == 1)
    {
        printf("%d", B);
        return 0;
    }


    diff_bear[1] = 0;
    FOR(i, 2, B)
        diff_bear[i] = bear[i]-bear[i-1];

    diff_elephant[1] = 0;
    FOR(i, 2, E)
        diff_elephant[i] = elephant[i]-elephant[i-1];


    KMP();


    printf("%I64d\n", answer);

    return 0;
}
