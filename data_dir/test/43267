#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
#endif

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class FwdIter> inline auto
dump(FwdIter first, FwdIter last, const char * dlm) -> void {
typedef typename iterator_traits<FwdIter>::value_type value_type;
copy(first, last, ostream_iterator<value_type>(cout, dlm)); }
/* @@@ ----------------------------------- */

// flush out!
const char * probA()
{
    const vector<int> a(
        { 2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,
        79,83,89,97});

    vector<bool> out;
    char ans[4];

    for(size_t i = 0; i < 4; ++i)
    {
        printf("%d\n", a[i]);
        fflush(stdout);
        scanf("%s", ans);

        out.push_back(strcmp(ans, "yes") ? false : true);
    }

    {
        const auto cnt = count(begin(out), end(out), true);
        if(cnt == 0) return "prime";
        if(1 < cnt) return "composite";
    }

    const auto x = a[find(begin(out), end(out), true) - begin(out)];
    {
        printf("%d\n", x * x);
        fflush(stdout);
        scanf("%s", ans);

        if(!strcmp(ans, "yes")) return "composite";
    }

    for(size_t i = 4; x * a[i] < 101; ++ i)
    {
        printf("%d\n", x * a[i]);
        fflush(stdout);
        scanf("%s", ans);

        if(!strcmp(ans, "yes")) return "composite";
    }

    return "prime";
}

int main(const int argc, char * argv [])
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    printf(probA());

    return EXIT_SUCCESS;
}
