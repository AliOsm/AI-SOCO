#include <bits/stdc++.h>
using namespace std;
#define int long long
#define endl '\n'
typedef long long ll;

//returns a^pw % mod
ll fastPow(ll a, ll pw, ll mod) {
    ll res = 1;
    a %= mod;
    while(pw > 0) {
        if(pw & 1) res = (res*a)%mod;
        a = (a*a)%mod;
        pw >>= 1;
    }
    return res;
}

const int mod = 1e6+3;

void gauss(vector<vector<int>> &a) {
    int n = a.size();
    int m = a[0].size()-1;//possible RTE here
    for(int col = 0, row = 0; col < m && row < n; ++col) {
        int sel = row;
        for(int i = row+1; i < n; ++i)
            if(abs(a[i][col]) > abs(a[sel][col])) sel = i;
        if(abs(a[sel][col]) == 0) { continue; }
        for(int j = 0; j <= m; ++j) swap(a[sel][j], a[row][j]);
        //Fraction s = (1 / a[row][col]);
        int s = fastPow(a[row][col], mod-2, mod);
        for(int j = 0; j <= m; ++j) a[row][j] = (a[row][j] * s)%mod;
        for(int i = 0; i < n; ++i) if (i != row && abs(a[i][col]) != 0) {
            int t = a[i][col];
            for(int j = 0; j <= m; ++j) a[i][j] = (a[i][j] - (a[row][j] * t) + mod)%mod;
        }
        ++row;
    }
}

int query(int x) {
    cout << "? " << x << '\n';
    cout << flush;
    int res;
    cin >> res;
    if(res == -1) exit(0);
    if(res == 0) {
        cout << "! " << x << flush;
        exit(0);
    }
    return res;
}

signed main() {
    vector<vector<int>> mat(11, vector<int>(12));
    for(int i = 1; i <= 11; ++i) {
        mat[i-1][11] = query(i);
        for(int j = 0; j < 11; ++j) {
            mat[i-1][j] = fastPow(i, j, mod);
        }
    }
    /*
    for(int i = 0; i < (int)mat.size(); ++i) {
        for(int j = 0; j < (int)mat[i].size(); ++j) {
            cout << mat[i][j] << ' ';
        }
        cout << endl;
    }
    */
    gauss(mat);
    /*
    for(int i = 0; i < (int)mat.size(); ++i) {
        for(int j = 0; j < (int)mat[i].size(); ++j) {
            cout << mat[i][j] << ' ';
        }
        cout << endl;
    }
    */
    for(int x = 0; x < mod; ++x) {
        int y = 0;
        for(int i = 0; i < (int)mat.size(); ++i) {
            y += fastPow(x, i, mod) * mat[i].back() % mod;
            y = (y%mod+mod)%mod;
        }
        assert(0 <= y && y < mod);
        if(y == 0) {
            cout << "! " << x;
            return 0;
        }
    }
    cout << "! " << -1;
}
