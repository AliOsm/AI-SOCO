#include <bits/stdc++.h>

        using namespace std;

        /* ---*-----*-----
        ---------o--------
        -----------------*/

        typedef long long ll;
        typedef long double ld;

        typedef pair<int, int> pi;
        typedef pair<ll,ll> pl;
        typedef pair<ld,ld> pd;

        typedef vector<int> vi;
        typedef vector<ld> vd;
        typedef vector<ll> vl;
        typedef vector<pi> vpi;
        typedef vector<pl> vpl;
        typedef vector<char> vc;

        #define mp make_pair
        #define pb push_back
        #define f first
        #define s second
        #define lb lower_bound
        #define ub upper_bound

        const int MOD = 1000000007;
        const int N = 1e6;
        set<char> vowel={'A', 'O', 'Y', 'E', 'U', 'I','a','o','y','e','u','i'};
        ll gcd(ll a, ll b) { return (b == 0 ? a : gcd(b, a % b)); }

        int dx[]={1,-1,0,0};
        int dy[]={0,0,1,-1};

        int n,m,k,l,ans=0,res=0,posmin,posmax,x,y,z,xmax=0,ymax=0;
        ll tab[N];

        char c,c1;

        string ch,ch1,ch2;

        deque <int> q1,q2,q3,q4;
        map<int,set<int> > adj;
        map<pi ,vpi> mapai;
        unordered_map<string,string> ss;
        unordered_map<string,int>si;
        
        set<char> sc;

        set<ll> sx,sy;

        vl v,vv;
        vpi vvv;
        
        vector<pair<string,string> > vpstr;
        //bool visit[N][N],check2=false;
        
        
        bool prime[N+1];
        
        void sieve(){
            for (int p=2; p*p<=N; p++)
            {
                // If prime[p] is not changed, then it is a prime
                if (prime[p] == true)
                {
                    // Update all multiples of p
                    for (int i=p*2; i<=N; i += p)
                        prime[i] = false;
                }
            }

        }

        int main(){
            ios_base::sync_with_stdio(false);
            memset(prime, true, sizeof(prime));
            //freopen("overcode.in", "r", stdin);
            //memset(graph,0,sizeof(graph));
            //memset(sptSet,0,sizeof(sptSet));
            //memset(visit,0,sizeof(visit));
            //memset(pred,-1,sizeof(tab));
            //memset(tab,0,sizeof(tab()));
            cin >> n ;
            sieve();
            if(n<=2)cout << 1 <<"\n";
            else cout << 2 << "\n";
            for(int i=2;i<=n+1;i++){
                cout << 2-prime[i]<<" ";
            }
            
            return 0;
        }