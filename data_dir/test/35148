#include<bits/stdc++.h>
using namespace std;

typedef pair < int , int > ii;
const int N = 5050 , NN = N*N;

int n , h , w;
ii a[N];
short int mem[N][N];

map < ii , int > id;

bool ok(int i , int last)
{
    int w1 , w2 , h1 , h2;
    w2 = a[last].first , h2 = a[last].second;
    w1 = a[i].first , h1 = a[i].second;


    if( (w1 > w2) && (h1 > h2) )return 1;
    return 0;
}

short int dp(int i , int last)
{
    if(i == n+1)return 0;

    if(mem[i][last] != -1)return mem[i][last];


    if(ok(i , last))
        return mem[i][last] = max( int16_t (dp(i + 1 , i)+1) , dp(i+1 , last));

    return mem[i][last] = dp(i+1 ,last);
}
vector < short int > sol ;
void  elias (int i , int last)
{
    if(i == n+1)return ;


    if(ok(i , last)){
        if ( mem[i][last] == dp ( i+1 , i ) + 1 ){
            sol.push_back( id[ {a[i].first,a[i].second} ] );
            return elias(i+1,i);
        }
    }


    return elias(i+1,last);
}


main()
{
    scanf("%d %d %d" , &n , &w , &h);
    a[0] = {w,h};
    for(int i = 1 ; i <= n ; i ++){
        scanf("%d %d" , &a[i].first , &a[i].second);
        id[ {a[i].first , a[i].second} ] = i;
    }

    sort(a + 1 , a + n + 1);

    memset(mem , -1 , sizeof mem);
    cout << dp(1 , 0) << endl;
    elias(1,0);

    for ( auto x : sol)
    cout << x << " ";
}
