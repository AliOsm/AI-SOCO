#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define FILE "series"
#define ld long double
#define endl '\n'
//#define int long long
#define pii pair <int, int>

//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

using namespace std;
using namespace __gnu_pbds;

typedef tree <int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const int N = 2e3 + 5;
const int rx[4] = {1, -1, 0, 0};
const int ry[4] = {0, 0, 1, -1};

const ll mod = 1e9 + 7;
const ll mod1 = 1e9 + 9;
const int kek = 228233;

pair <ll, ll> pw[N];
string s[N], t[N];
vector <int> all[N];

struct myhash {
    vector <int> h, h1;
    myhash (string s) {
        int n = s.size();
        h.resize(n);
        h1.resize(n);
        h[0] = s[0] - '0' + 1;
        h1[0] = s[0] - '0' + 1;
        for (int i = 1; i < n; i++) {
            h[i] = (1ll * h[i - 1] * kek) % mod;
            h[i] = (h[i] + s[i] - '0' + 1) % mod;
            h1[i] = (1ll * h1[i - 1] * kek) % mod1;
            h1[i] = (h1[i] + s[i] - '0' + 1) % mod1;
        }
    }
    pair <int, int> get(int l, int r) {
        int len = r - l + 1;
        int res = h[r];
        if (l) res -= (1ll * h[l - 1] * pw[len].F) % mod;
        res = (res + mod) % mod;
        int res1 = h1[r];
        if (l) res1 -= (1ll * h1[l - 1] * pw[len].S) % mod1;
        res1 = (res1 + mod1) % mod1;
        return {res, res1};
    }
    myhash () {}
};

myhash hs[N], ht[N];

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    //   freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
#endif // LOCAL
    int n, m;
    cin >> n >> m;
    pw[0] = {1, 1};
    for (int i = 1; i < n; ++i) {
        pw[i].F = (1ll * pw[i - 1].F * kek) % mod;
        pw[i].S = (1ll * pw[i - 1].S * kek) % mod1;
    }
    for (int i = 0; i < n; ++i) cin >> s[i];
    for (int i = 0; i < m; ++i) cin >> t[i];
    for (int i = 0; i < n; ++i) hs[i] = myhash(s[i]);
    for (int i = 0; i < m; ++i) ht[i] = myhash(t[i]);
    for (int i = 0; i < n; ++i) {
        {
            for (int l = 0; l <= n - m; l++) {
                if (hs[i].get(0, m - 1) == ht[0].get(l, l + m - 1)) {
                    all[i].pb(l);
                }
            }
        }
    }
    for (int i = 0; i < n; ++i) {
        if (!all[i].size()) continue;
        for (int pos : all[i]) {
            int cnt = 1;
            for (int j = 1; j < m; ++j) {
                if (hs[i + j].get(0, m - 1) != ht[j].get(pos, pos + m - 1) || ++cnt == m) break;
            }
            if (cnt == m) {
                cout << i + 1 << " " << pos + 1;
                return 0;
            }
        }
    }
    return 0;
}
