#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>

using namespace std;



#define pb push_back
#define pii pair<int, int>
#define mp make_pair
#define ull unsigned long long
#pragma comment(linker, "/STACK:64000000")
#define null NULL
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define fornr(i, n) for (int i = (n); i >= 0; --i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)
#define all(a) a.begin(), a.end()

//typedef long double ld;
typedef double ld;
typedef pair<ld, ld> pldld;
typedef long long ll;
typedef pair<ll, ll> pll;


typedef unsigned int ui;
typedef unsigned char uc;
const int infi = 1e9 + 7;
const ll infl = 1e18 + 7;

/*
const int MAX_MEM = 5e6;
int mpos = 0;
char mem[MAX_MEM];
inline void * operator new ( size_t n ) {
  char *res = mem + mpos;
  mpos += n;
  assert(mpos <= MAX_MEM);
  return (void *)res;
}
inline void operator delete ( void * ) { }

inline void * operator new [] ( size_t ) { assert(0); }
inline void operator delete [] ( void * ) { assert(0); }*/

int x[101], a[101];
int get(vector<pii> &a, vector<pii> &b) {
	int i = 0, j = 0;
	int ans = 0;
	while (1) {
		if (i == (int)a.size())
			break;
		ans += a[i++].second;
		if (j == (int)b.size())
			break;
		ans += b[j++].second;
	}
	return ans;
}

int main() {
	cin.sync_with_stdio(false);
	cin.tie(0);
//	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
	//freopen("ufo.in", "r", stdin);freopen("ufo.out", "w", stdout);
	int s1, s2, cnt1, cnt2;
	s1 = s2 = cnt1 = cnt2 = 0;
	int n;
	cin >> n;
	vector<pii> ar1, ar2;
	forn(i, n) {
		int x, a;
		cin >> x >> a;
		if (x < 0)
			ar1.push_back(mp(-x, a));
		else
			ar2.push_back(mp(x, a));
	}
	sort(all(ar1));
	sort(all(ar2));
	cout << max(get(ar1, ar2), get(ar2, ar1));

	return 0;
}