#include <iostream>
#include<algorithm>
#include<string>
#include<map>
#include <iterator>
#include<iomanip>
#include<vector>
#include<cmath>
#include <cstdio>
#include<queue>
#include<stack>
#include<list>
#include<stdio.h>
#include<set>
#include <functional>
 
#define mod 1000000007
#define mod2 30000000
#define pa(a,b) make_pair(a,b)
#define f first
#define s second
#define pb(a)  push_back(a)
#define all(a) a.begin() , a.end()
#define mem(a, b) memset(a, b, sizeof(a))
#define LL  long long int
#define oo 2e9
#define pi 3.14159265359
#define eps  1e-9
 
 
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
 
LL maxx(LL a , LL b){ return a>b ?  a : b ;}
LL minn(LL a , LL b){ return a>b ?  b : a ;}
 
using namespace std;
int dx[] = {1 , 1 ,1 , 0 , 0  , -1 , -1  , -1  , 0 };
int dy[] = { -1 , 0  , 1 , 1 , -1 , 0 , 1 , -1 , 0 };
void boostIO()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
}
LL gcd(LL a, LL b) {
    return b == 0 ? a : gcd(b, a % b);
}
LL lcm(LL a , LL b )
{
    return (a*b)/gcd(a , b);
}
LL poww(LL base, LL exp){
  base %= mod;
  LL result = 1;
  while (exp > 0) {
    if (exp & 1) result = (result * base) % mod;
    base = (base * base) % mod;
    exp >>= 1;
  }
  return result;
}
struct trie
{
    trie * nodes[27] ;
    bool leaf ;
    trie()
    {
        mem(nodes , 0) ;
        leaf = 0 ;
    }
    void add(char *str){
        if(*str == '\0'){
            leaf = 1 ;
            return ;
        }
        int cur = *str - 'a' ;
        if(nodes[cur] == 0){
            nodes[cur] = new trie() ;
        }
        nodes[cur]->add(str + 1) ;
    }
    bool look_for(char * str){
        if(*str == '\0')
            return leaf ;
 
        int cur = *str - 'a' ;
 
        if(nodes[cur] == 0){
            return false ;
        }
        nodes[cur] -> look_for(str + 1) ;
    }
    bool look_for_prefix(char * str){
        if(*str == '\0')
            return 1;
        int cur = *str - 'a' ;
        if(nodes[cur] == 0)
            return false;
        nodes[cur] -> look_for_prefix(str + 1) ;
    }
};
map<string , int> mp ;
int main()
{
    boostIO() ;
    int n , k , m ; cin >> n >> k >> m ;
    vector<string>words , message ; vector<int>cost ;
    for(int i = 0 ; i < n ; i++){
        string s; cin >> s ;
        words.pb(s) ;
    }
    for(int i = 0 ; i < n ; i++){
        int x; cin >> x ;
        cost.pb(x) ;
    }
    for(int i = 0 ; i < k ; i++){
        int x; cin >> x ;
        int mi = 1e9 + 100 ; vector<int>temp ;
        for(int j = 0 ; j < x ; j++){
            int c ; cin >> c ;
            temp.pb(c) ;
            mi = min(mi , cost[c - 1]) ;
        }
        for(int j = 0 ; j < x ; j++){
            cost[temp[j] - 1] = mi ;
            mp[words[temp[j] - 1]] = cost[temp[j] - 1] ;
        }
    }
    LL ans = 0 ;
    for(int i = 0 ; i < m ; i++){
        string s; cin >> s ;
        ans = ans + mp[s] ;
    }
    cout << ans << endl ;
}
 
