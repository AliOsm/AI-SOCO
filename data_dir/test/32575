#include <bits/stdc++.h>

using namespace std;
#define F first
#define S second
int dx[]={1,-1,0,0};
int dy[]={0,0,1,-1};
const int N=1e3;
int dis[N+1][N+1][3];
bool in[N+1][N+1][3];
int xa,ya,xb,yb,xc,yc;
bool valid(int x,int y)
{
    return x>=0&&x<=N&&y>=0&&y<=N;
}
void bfs()
{
    queue< pair< pair<int,int> , pair<int,int> > >q;
    q.push({{xa,ya},{1,0}});
    q.push({{xb,yb},{1,1}});
    q.push({{xc,yc},{1,2}});
    while(!q.empty())
    {
        pair< pair<int,int> , pair<int,int> > cur=q.front();
        q.pop();
        int x=cur.F.F,y=cur.F.S,d=cur.S.F,st=cur.S.S;
        if(dis[x][y][st]!=0) continue;
        dis[x][y][st]=d;
        for(int i=0;i<4;i++)
        {
            int nx=x+dx[i],ny=y+dy[i];
            if(valid(nx,ny))
                q.push({{nx,ny},{d+1,st}});
        }
    }
}
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    int mn=1e9,x,y;
    cin>>xa>>ya>>xb>>yb>>xc>>yc;
    bfs();
    for(int i=0;i<=N;i++)
        for(int j=0;j<=N;j++)
        {
            int cost=dis[i][j][0]+dis[i][j][1]+dis[i][j][2]-2;
           // cout<<i<<" "<<j<<" "<<cost<<endl;
            if(cost<mn)
            {
                mn=cost;
                x=i;
                y=j;
            }
        }
    vector< pair<int,int> >v;
    v.push_back({x,y});
    for(int j=0;j<3;j++)
    {
        int prvx=x,prvy=y,curx=x,cury=y;
        while(dis[curx][cury][j]!=1)
        {
            for(int i=0;i<4;i++)
            {
                int nx=prvx+dx[i],ny=prvy+dy[i];
                if(!valid(nx,ny)) continue;
                if(dis[nx][ny][j]<dis[curx][cury][j])
                {
                    curx=nx;
                    cury=ny;
                }
            }
          //  cout<<curx<<" "<<cury<<" "<<dis[curx][cury][j]<<endl;
            prvx=curx;
            prvy=cury;
            v.push_back({curx,cury});
        }
    }
    cout<<v.size()<<endl;
    for(auto x:v) cout<<x.F<<" "<<x.S<<endl;
    return 0;
}
