#include <cstring>
#include <vector>
#include <algorithm>
#include <stdio.h>
using namespace std;

const int N = 300000, block = 500;
struct query
{
    long long ld, r, l, id;
};
query q[N];
long long a[N], z[N*22], n, k, m;
long long ans[N];

bool cmp(query a, query b)
{
    if(a.ld < b.ld)
        return true;
    if(a.ld > b.ld)
        return false;
    if(a.r < b.r)
        return true;
    if(a.r > b.r)
        return false;
    if(a.l < b.l)
        return true;
    if(a.l > b.l)
        return false;
    if(a.id < b.id)
        return true;
    if(a.id > b.id)
        return false;
}

int main()
{
    scanf("%d %d %d", &n, &m, &k);
    for(int i = 1; i <= n; i++)
        scanf("%d", &a[i]),
        a[i] ^= a[i-1];
    for(int i = 0; i < m; i++)
    {
        scanf("%d %d", &q[i].l, &q[i].r);
        q[i].ld = q[i].l / block;
        q[i].id = i;
    }
    sort(q, q+m, cmp);
    long long r = 0, l = 0;
    z[0]++;
    long long kol = 0;

    for(int i = 0; i < m; i++)
    {
        while(r < q[i].r)
            r++,
            kol += z[a[r] ^ k],
            z[a[r]]++;
        while(l-1 < q[i].l)
            z[a[l]]--,
            kol -= z[a[l] ^ k],
            l++;
        while(l+1 > q[i].l)
            l--,
            kol += z[a[l] ^ k],
            z[a[l]]++;

        while(r > q[i].r)
            z[a[r]]--,
            kol -= z[a[r] ^ k],
            r--;
        ans[q[i].id] = kol;
    }
    for(int i = 0; i < m; i++)
        printf("%I64d\n", ans[i]);
}
