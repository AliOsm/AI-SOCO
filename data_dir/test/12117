#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#define pii pair<int,int>
#define pb push_back
#define mp make_pair
#define mt make_tuple
#define DEBUG 1
#define cerr if (DEBUG) cerr
#define fprintf if (DEBUG) fprintf
#define local freopen("in.txt","r",stdin);
#define test cerr<<"hi\n";
#define tr(x) cerr<<#x" "<<x<<'\n';
#define fi first
#define se second
#define HH1 402653189
#define HH2 1610612741
#define INF 0x3f3f3f3f3f3f3f3f
#define tii tuple<int,int,int>
#define npos string::npos

using namespace std;

#define MOD 1000000007LL

int n;
long long cp, ct; // pipeline, tall
string s;
long long dp[200005][2];

void solve() {
	cin >> n >> cp >> ct >> s;
	
	long long ans = 0;
	
	vector<pair<char, pii> > v;
	
	v.pb(mp(s[0], mp(0, n)));
	
	for (int i = 1; i < n; i++) {
		if (s[i] != s[i - 1]) {
			v.back().se.se = i;
			v.pb(mp(s[i], mp(i, n)));
		}
	}
	
	vector<pii> seg;
	seg.pb(mp(-1, -1));
	
	for (auto op : v) {
		if (op.fi == '1') seg.pb(op.se);
	}
	
	// seg: closed segments that must be tall
	
//	for (auto op : seg) {
//		cerr << op.fi << ' ' << op.se << '\n';
//	}
	
	ans += n * cp;
	ans += (n + 1) * ct;
	
	for (int i = 0; i <= n; i++)
	for (int j = 0; j <= 1; j++) dp[i][j] = INF;
	
	dp[0][0] = 0;
	int prev = 0;
	
	// dp[i][0 / 1]: at i + 0.5, we are low / hi
	
	for (int i = 1; i < seg.size(); i++) {
		int lb, ub; tie(lb, ub) = seg[i];
		dp[i][0] = min(dp[i][0], dp[i - 1][0] + cp + cp + (ub - lb + 1) * ct);
		dp[i][0] = min(dp[i][0], dp[i - 1][1] + (lb - prev - 1) * ct + cp + (ub - lb + 1) * ct);
		
		dp[i][1] = min(dp[i][1], dp[i - 1][0] + cp + (ub - lb + 1) * ct);
		dp[i][1] = min(dp[i][1], dp[i - 1][1] + (lb - prev - 1) * ct + (ub - lb + 1) * ct);
		
		prev = seg[i].se;
	}
	
	cout << dp[seg.size() - 1][0] + ans << '\n';
}

int main(){
	ios_base::sync_with_stdio(0); cin.tie(0);

	int t; cin >> t;
	while (t--) {
		solve();
	}
}



