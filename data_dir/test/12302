#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <queue>
#define ll long long
using namespace std;

bool IsRowAllA(const vector<string>& grid,int rid) {
    int c=grid[0].size();
    for(int i=0;i<c;i++)
        if (grid[rid][i]!='A')
            return false;
    return true;
}

bool IsColAllA(const vector<string>& grid,int cid) {
    int r=grid.size();
    for(int i=0;i<r;i++)
        if (grid[i][cid]!='A')
            return false;
    return true;
}

int Solve(const vector<string>& grid) {
    int r=grid.size();
    int c=grid[0].size();
    
    bool ok=false;
    bool allA=true;
    for(int i=0;i<r;i++)
        for(int j=0;j<c;j++) {
            if (grid[i][j]=='A')
                ok=true;
            else
                allA=false;
            
        }
    if (!ok)
        return -1;
    
    if (allA)
        return 0;
    
    if (IsRowAllA(grid,0) || IsRowAllA(grid,r-1)
        || IsColAllA(grid,0) || IsColAllA(grid,c-1))
        return 1;
    
    if (grid[0][0]=='A' || grid[0][c-1]=='A' || grid[r-1][0]=='A' || grid[r-1][c-1]=='A')
        return 2;
    
    
    for(int i=0;i<r;i++) {
        if (IsRowAllA(grid,i))
            return 2;
    }
    
    for(int i=0;i<c;i++) {
        if (IsColAllA(grid,i))
            return 2;
    }
    
    
    for(int i=0;i<r;i++)
        for(int j=0;j<c;j++) {
            if (i > 0 && i < r-1 && j > 0 && j < c-1)
                continue;
            if (grid[i][j]=='A')
                return 3;
        }
    return 4;
}

int main() {
    int T;
    cin>>T;
    for(int t=1;t<=T;t++) {
        int r,c;
        cin>>r>>c;
        vector<string> grid;
        for(int i=0;i<r;i++) {
            string S;
            cin>>S;
            grid.push_back(S);
        }
        int ans=Solve(grid);
        if (ans == -1) {
            cout << "MORTAL" << endl;
        } else {
            cout << ans << endl;
        }
        
    }
}
