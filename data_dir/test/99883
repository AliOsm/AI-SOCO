#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<int, int> pii;
typedef tree<int, null_type,less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

template<typename T>
static T randint(T lo, T hi){
	return uniform_int_distribution<T>(lo, hi)(rng);
}



int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	int t;
	cin >> t;
	while(t--){


		ll x, k;
		cin >> x >> k;

		ll lo = 1, hi = 1e15, opt = -1;
		while(lo <= hi){
			ll m = (lo + hi) >> 1;
			ll cnt = m - m / x;
			if(cnt >= k){
				opt = m;
				hi = m - 1;
			} 
			else lo = m + 1;
		}

		cout << opt << endl;
		

	}

	return 0;
}

