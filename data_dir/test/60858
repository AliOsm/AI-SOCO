//let's do it
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll  int
#define inf 1000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 35005

ll n,cnt[maxn],dp[55][maxn],arr[maxn],brr[maxn],lst[maxn],nxt[maxn],temp[maxn];
struct node
{
	int count;
	node *left,*right;
	node(int count,node *left,node *right):
	count(count), left(left), right(right) {}
	node* insert(int l,int r,int w);
};
node *null=new node(0,NULL,NULL);
node *node::insert(int l,int r,int w)
{
	if(l<=w && w<=r)
	{
		if(l==r)
		return new node(this->count+1,null,null);
		int mid=(l+r)/2;
		return new node(this->count+1,this->left->insert(l,mid,w),this->right->insert(mid+1,r,w));
	}
	return this;
}
ll query(node*x,node*y,int a,int b,int l,int r)
{
	if(a>b || a>r || b<l)
	return 0;
	if(a>=l && b<=r)
	return x->count-y->count;
	int mid=(a+b)/2;
	return query(x->left,y->left,a,mid,l,r)+query(x->right,y->right,mid+1,b,l,r);
}
node*root[maxn];

inline ll cost(ll l,ll r)//no of ele bet l to r <=l-1
{
	return query(root[r],root[l-1],0,n,0,l-1);
}
void solve(ll j,ll istart,ll iend,ll kstart,ll kend)
{
	if(istart>iend || kstart==-1 || kend==-1)
	return ;
	ll mid=(istart+iend)/2;
	ll maxi=-1;
	ll pos=-1;
	ll x=min(mid,kend);
	ll distinct=cost(x,mid);
	for(ll k=x;k>=kstart;k--)
	{
		ll got;
		if(k==x)
		got=dp[j-1][k-1]+distinct;
		else
		{
			if(nxt[k]>mid)
			distinct++;
			got=dp[j-1][k-1]+distinct;
		}
		if(got>maxi)
		{
			maxi=got;
			pos=k;
		}
	}
	dp[j][mid]=maxi;
	solve(j,istart,mid-1,kstart,pos);
	solve(j,mid+1,iend,pos,kend);
}
int main()
{
	boost1;boost2;
	ll i,j,k,got;
	cin>>n>>k;
	for(i=1;i<=n;i++)
	cin>>arr[i];
	got=0;
	for(i=1;i<=n;i++)
	{
		if(cnt[arr[i]]==0)
		got++;
		cnt[arr[i]]++;
		dp[1][i]=got;
	}
	for(i=1;i<=n;i++)
	{
		brr[i]=lst[arr[i]];
		lst[arr[i]]=i;
	}
	null->left=null->right=null;
	root[0]=null;
	for(i=1;i<=n;i++)
	root[i]=root[i-1]->insert(0,n,brr[i]);
	for(i=1;i<=n;i++)
	temp[arr[i]]=n+1;
	for(i=n;i>=1;i--)
	{
		nxt[i]=temp[arr[i]];
		temp[arr[i]]=i;
	}
	for(i=2;i<=k;i++)
	solve(i,1,n,1,n);
	cout<<dp[k][n];
	return 0;
}