#include <bits/stdc++.h>
using namespace std;
const int N = 200010;

int a[555][555];
int main() {
    int n;
    long long ret = -1;
    scanf("%d", &n);
    for(int i = 0; i < n; i++) {
        bool f = false;
        long long sum = 0;
        for(int j = 0; j < n; j++) {
            scanf("%d", &a[i][j]);
            if(a[i][j] == 0) f =true;
            sum += a[i][j];
        }
        if(!f) ret = sum;
    }
    if(n == 1) {
        puts("1");
        return 0;
    }

    set<long long> st;
    for(int i = 0; i < n; i++) {
        long long sum = 0;
        bool f = false;
        for(int j = 0; j < n; j++) {
            if(a[i][j] == 0) f = true;
            sum += a[i][j];
        }
        if(!f && sum != ret) {
            puts("-1");
            return 0;
        }
        st.insert(sum);
        sum = 0;
        f = false;
        for(int j = 0; j < n; j++) {
            if(!a[j][i]) f = true;
            sum += a[j][i];
        }
        if(!f && sum != ret) {
            puts("-1");
            return 0;
        }
        st.insert(sum);
    }
    long long sum = 0;
    bool f = false;
    for(int i = 0; i < n; i++) {
        if(a[i][i] == 0) f = true;
        sum += a[i][i];
    }
    if(!f && sum != ret) {
        puts("-1");
        return 0;
    }
    st.insert(sum);
    sum = 0;
    f = false;
    for(int i = 0; i < n; i++) {
        if(a[i][n - i - 1] == 0) f = true;
        sum += a[i][n - i - 1];
    }
    if(!f && sum != ret) {
        puts("-1");
        return 0;
    }
    st.insert(sum);
    if(st.size() != 2 || *st.rbegin() != ret) puts("-1");
    else printf("%I64d\n", *st.rbegin() - *st.begin());
    return 0;
}
