#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC target("avx,avx2,fma")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("board.in");ofstream out("C:\\Users\\BOG\\Desktop\\output.txt");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());

ll a,k,s,p;
vec<ll> m, n, M, N, was;

void check(ll x){
    if(was[x]) return;
    was[x] = 1;
    ll o = 0;
    for(int q=x>=a ? x-a+1 : 0; q<=x; q++){
        if(q>=a) break;
        o += m[q]*n[x-q];
        o%=p;
    }
    if(o){
        cout<<x;
        exit(0);
    }
}

int main() {
    fast;
    cin>>a>>k>>p;
    m = vec<ll>(a);
    n = vec<ll>(k);
    s = a+k-2;
    was = vec<ll>(s+1);
    for(int q=0; q<a; q++){
        cin>>m[q];
        m[q]%=p;
        if(m[q]) M.pb(q);
    }
    for(int q=0; q<k; q++){
        cin>>n[q];
        n[q]%=p;
        if(n[q]) N.pb(q);
    }
    a = k = max(a,k);
    for(; m.size()<a;) m.pb(0);
    for(; n.size()<a;) n.pb(0);
    uid<int> g1(0, M.size()-1);
    uid<int> g2(0, N.size()-1);
    for(;;){
        int c1 = M[g1(rnd)];
        int c2 = N[g2(rnd)];
        check(c1+c2);
    }
}