#include<iostream>
#include<cstdlib>
#include<vector>
#include<climits>
#include<cctype>
#include<map>
#include<list>
#include<cstdio>
#include<algorithm>
#include<memory.h>
#include<cmath>
#include<queue>
#include<fstream>
#include<sstream>
#include<set>
#include<iomanip>
#define L long long int
#define LD long double
#define pi 3.141592653589793238462643383
#define M 1000000007

using namespace std;

struct node
{
       int n;
       int d;
       int v;
};

int c;

int abso(int a)
{
    if(a<0)
    return -a;
    else
    return a;
}

class com
{
      public:
             bool operator()(struct node a,struct node b)
             {
                  return abso(a.d+c)>abso(b.d+c);
             }
};

int main()
{
    int n,i;
    while(cin>>n)
    {
              int h1[n+1],h2[n+1],a[n],b[n];
              multiset<int> ms;
              multiset<int>::iterator it,itl,itu,titu;
              for(i=0;i<n;i++)
              {
              cin>>a[i];
              h1[a[i]]=i;
              }
              for(i=0;i<n;i++)
              {
              cin>>b[i];
              h2[b[i]]=i;
              }
              for(i=1;i<=n;i++)
                               ms.insert(h2[i]-h1[i]);
              c=0;
              for(i=0;i<n;i++)
              {
                               /*for(it=ms.begin();it!=ms.end();it++)
                               cout<<*it<<" ";
                               cout<<"\n";*/
                               itu=ms.lower_bound(-c);
                               if(*itu==-c)
                               cout<<"0\n";
                               else
                               {
                                  if(itu==ms.begin())
                                  {
                                                     //cout<<*itu<<"\n";
                                                     cout<<*itu+c<<"\n";
                                  }
                                  else
                                  {
                                  titu=itu;
                                  itl=--titu;
                                  if(-c-*itl>=0&&-c-*itl<*itu+c)
                                  cout<<-c-*itl<<"\n";
                                  else
                                  cout<<*itu+c<<"\n";
                                  }
                               }
                               it=ms.find(-h1[b[i]]-c);
                               ms.erase(it);
                               c--;
                               ms.insert(n-1-h1[b[i]]-c);
              }
    }
    return 0;
}
