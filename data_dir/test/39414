#include <bits/stdc++.h>
using namespace std;
#define x first
#define y second
#define pto pair<long double, long double>
// const     long double eps = pow(2.0, -26);
const     long double eps = 1e-12;

pto operator+(pto A, pto B) {
    return pto(A.x + B.x, A.y + B.y);
}

pto operator*(pto A, long double t) {
    return pto(A.x * t, A.y * t);
}

long double mtLX, mtRX, mtLY, mtRY;

int getRan(long double w, long double a, long double b) {
    if( w <= a)
        return -1;
    if( a < w && w < b )
        return 0;
    return 1;
}

bool PassedThru(pto a, pto dir, long double t) {
    pto b = a + dir*t;
    int nums[2][2] = {{getRan(a.x, mtLX, mtRX), getRan(b.x, mtLX, mtRX)},
                      {getRan(a.y, mtLY, mtRY), getRan(b.y, mtLY, mtRY)}};

    for(int i=0; i<2; i++) {        
        if(nums[i][0] > nums[i][1])
            swap(nums[i][0], nums[i][1]);
        if(nums[i][0]!=0 && nums[i][1]!=0 && nums[i][0]==nums[i][1])
            return false;
    }
    return true;
}

bool valid(pto a, pto dir, long double t) {
    pto b = a + dir*t;
    return getRan(b.x, mtLX, mtRX)== 0 && getRan(b.y, mtLY, mtRY)==0; 
}

int main() {
    int mouseCnt;
    vector <pto> mouseStarts;
    vector <pto> mouseVecs;
    int tmpA, tmpB, tmpC, tmpD;

    scanf("%d", &mouseCnt);
    scanf("%d%d%d%d", &tmpA, &tmpB, &tmpC, &tmpD);
    mtLX=tmpA, mtLY=tmpB, mtRX=tmpC, mtRY=tmpD;
    // cin >> mtLX >> mtLY >> mtRX >> mtRY ;
    if(mtLX >= mtRX)
        swap(mtLX, mtRX);
    if(mtLY >= mtRY)
        swap(mtLY, mtRY);
    mouseStarts = vector <pto> (mouseCnt);
    mouseVecs = vector <pto> (mouseCnt);
    for(int i=0; i<mouseCnt; i++) {
        // scanf("%d%d", &mouseStarts[i].x, &mouseStarts[i].y);
        // scanf("%d%d", &mouseVecs[i].x, &mouseVecs[i].y);
        // cin >> mouseStarts[i].x >> mouseStarts[i].y;
        // cin >> mouseVecs[i].x >> mouseVecs[i].y;
        scanf("%d%d%d%d", &tmpA, &tmpB, &tmpC, &tmpD);
        mouseStarts[i].x = tmpA,  mouseStarts[i].y = tmpB;
        mouseVecs[i].x = tmpC,  mouseVecs[i].y = tmpD;
    }

    long double ini = -eps, fin = 1e18;
    // while(ini + eps < fin) {
    for(int i=0; i<300 && (ini + eps < fin); i++) {
        long double piv = (ini+fin)/2.0;
        // cout << piv << endl;
        bool vald = true;
        for(int i=0; i<mouseCnt; i++) {

            if(!PassedThru(mouseStarts[i], mouseVecs[i], piv)) {
                vald = false;
                break ;
            }
            // printf("g ");
        }
        // printf("\n");
        if(vald)
            fin = piv;
        else
            ini = piv + eps;
    }

    ini += eps;
    // cout << setprecision(9) << ini << endl;
    bool works = true;
    // ini +=
    for(int i=0; i<mouseCnt; i++) {
        if(!valid(mouseStarts[i], mouseVecs[i], ini)) {
            works = false;
            break ;
        }
    }
    if(!works) {
        printf("-1\n");
                return 0;                    
        ini += eps;
        for(int i=0; i<mouseCnt; i++) {
            if(!valid(mouseStarts[i], mouseVecs[i], ini)) {
                printf("-1\n");
                return 0;                    
            }
        }
    }
    
    // printf("%.9Lf\n", (long double) ini);
    cout << setprecision(9) << ini << endl;
    
    return 0;
}
