#include<bits/stdc++.h>
using namespace std;

#define ll             long long
#define LL             long long
#define gcd(a,b)       __gcd(a,b)
#define lcm(a,b)       a*(b/gcd(a,b))
#define pii            pair<int, int>
#define pll            pair<ll, ll>
#define pil            pair<int, ll>
#define pli            pair<ll, int>
#define vi             vector<int>
#define vl             vector<ll>
#define vii            vector<pii>
#define vll            vector<pll>
#define vil            vector<pil>
#define vli            vector<pli>
#define pb             push_back
#define ppb            pop_back
#define mp             make_pair
#define ff             first
#define ss             second
#define all(v)         v.begin(),v.end()
#define fill(a,b)      memset(a,b,sizeof a)
#define smax(a, b)     a=max(a, b)
#define smin(a, b)     a=min(a, b)
#define sqr(x)         x*x
#define cube(x)        x*x*x
#define endl           '\n'

int in() {
    int n;
    scanf("%d",&n);
    return n;
}

ll Lin() {
    ll n;
    scanf("%lld",&n);
    return n;
}

double Din() {
    double n;
    scanf("%lf",&n);
    return n;
}

const ll inf = 1e17;
const ll mod = 1e9 + 7;
const int N = 2e2 + 5;

int a[N];
vii ball;

int solve(int i) {
    int ans=ball[i].ss, l=i-1, r=i+1, n=ball.size();
    while(l>=0 && r<n) {
        if(ball[l].ff!=ball[r].ff) break;
        if(ball[l].ss+ball[r].ss<=2) break;
        ans+=ball[l].ss+ball[r].ss;
        l--, r++;
    }
    return ans;
}

int main() {
    int n=in(), k=in(), x=in();
    int num=0;
    for(int i=1; i<=n; i++) {
        a[i]=in();
        num++;
        if(i>1 && a[i]!=a[i-1]) {
            ball.pb(mp(a[i-1], num-1));
            num=1;
        }
        if(i==n) {
            ball.pb(mp(a[i], num));
        }
    }
    int ans=0;
    for(int i=0; i<ball.size(); i++) {
        //printf("%d %d\n", ball[i].ff, ball[i].ss);
        if(ball[i].ff==x && ball[i].ss>1) smax(ans, solve(i));
    }
    cout<<ans<<endl;
    return 0;
}






