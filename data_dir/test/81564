#include <bits/stdc++.h>

using namespace std;

int n;
long double p[18][18], pre[(1<<18)], dp[18][(1<<18)];

inline long double get(int mask) {
	if(pre[mask] > -0.5) return pre[mask];
	long double res = 1;
	for(int i=1; i<n; i++) if((mask&(1<<i)) == 0) res *= p[0][i];
	return pre[mask] = res;
}

inline long double memo(int winner, int mask) {
	if(winner == 0) return get(mask);
	if(dp[winner][mask] > -0.5) return dp[winner][mask];
	long double res = p[0][winner] * get(mask);
	for(int i=1; i<n; i++) if((mask&(1<<i)) == 0) res = max(res, p[winner][i] * memo(winner, mask^(1<<i)) + p[i][winner] * memo(i, mask^(1<<i)));
	return dp[winner][mask] = res;
}

int main() {
	ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	cin >> n;
	for(int i=0; i<n; i++) for(int j=0; j<n; j++) cin >> p[i][j];
	for(int j=0; j<(1<<n); j++) {
		pre[j] = -1;
		for(int i=0; i<n; i++) dp[i][j] = -1;
	}
	long double res = 0;
	for(int i=0; i<n; i++) res = max(res, memo(i, (1<<i)));
	cout << fixed << setprecision(15) << res << '\n';
	return 0;
}