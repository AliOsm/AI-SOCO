#include<bits/stdc++.h>
using namespace std;

#define fi                      first
#define se                      second
#define pb                      push_back
#define endl                    '\n'
#define all(x)                  x.begin(),x.end()
#define pii                     pair<int,int>
#define pll                     pair< long long int, long long int> 
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define SZ(x)                   ((int)x.size())

#define FOR(i,a,b)              for(int i = a; i < b; ++i)
#define REV(i,a,b)              for(int i = a; i >= b; --i)
#define FORE(i,a,b)             for(int i = a; i <= b; ++i)

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

void solve();

int main()
{
        fast;
        solve();
}


const int N = 1e5+2;
std::vector<int> adj[N];
std::vector<int> pa(N,0);
std::vector<int> vis(N,0);
std::vector<int> a(N);
std::vector<int> lvl(N,0);
std::vector<int> os(N,0);
int n,m;
void read() {
        cin >> n >> m;
        FOR(i,0,n) pa[i+1] = i+1;
        FOR(i,0,m) {
                int p,q;
                cin >> p >> q;
                pa[q] = p;
                adj[p].pb(q);
                adj[q].pb(p);
        }
        FOR(i,0,n) {
                cin >> a[i+1];
        }
}

std::vector<int> v;

void dfs(int node) {
        vis[node] = 1;
        lvl[node] = lvl[pa[node]] + 1;
        if(os[a[node]] == 0) {
                os[a[node]] = 1;
                v.pb(a[node]);
        }
        if(lvl[a[node]] < lvl[pa[node]] and a[node] != a[pa[node]]) {
                cout << - 1 << endl;
                exit(0);
        }
        for(auto i:adj[node]) {
                if(i != pa[node]) {
                        dfs(i);
                }
        }
}

void solve() {
        read();

        std::vector<int> ans;
        FOR(i,1,n+1) {
                if(vis[i])
                        continue;
                int temp = i;
                while(pa[temp] != temp) {
                        temp = pa[temp];
                }
                v.clear();
                dfs(temp);
                reverse(all(v));
                for(auto j:v) {
                        ans.pb(j);
                }
        }
        cout << SZ(ans) << endl;
        for(auto i:ans) {
                cout << i << endl;
        }
}