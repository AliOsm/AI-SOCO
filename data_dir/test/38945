#define MAXSTACKSIZE [1024 * 1024 * 128]
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <hash_map>
#include <hash_set>
#include <vector>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iterator>
#include <limits>
#include <time.h>
#include <math.h>
using namespace std;
#define mems(arr, val) memset(arr, val, sizeof(arr))
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define all(A) (A).begin(), A.end()
#define mp(a, b) make_pair(a, b)
#define forit(it, A) for(auto it = A.begin(); it != A.end(); it++)
#define M_PI       3.14159265358979323846
#define M_PI_2     1.57079632679489661923
#define M_PI_4     0.785398163397448309616
typedef long long LL;
typedef pair<int, int> pii;
//const LL INF = INT_MAX;
const int MAXN = 110000;
const LL MOD = 1000000007;
const double EPS = 1e-6;
bool D[MAXN];
pair<int, int> p[MAXN];
int main()
{
#ifdef MY_SOL
    freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
    //freopen("movetofront.in", "r", stdin); freopen("movetofront.out", "w", stdout);
#endif
    int n;
    cin>>n;
    vector<pair<string, string>> a(n);
    forn(i,0,n)
        cin>>a[i].first>>a[i].second;

    vector<pair<int, int>> p(n);
    forn(i, 0, n)
    {
        cin>>p[i].first;
        p[i].second = i;
    }

    //sort(all(p));
    string last = "";
    bool flag = true;
    for(int i = 0; i < n; ++i)
    {
        int cur = p[i].first - 1;
        if (i == 0)
        {
            last = min(a[cur].first, a[cur].second);
        }
        else
        {
            string mini = min(a[cur].first, a[cur].second);
            string maxi = max(a[cur].first, a[cur].second);
            if (mini > last)
            {
                last = mini;
            }
            else
            {
                if (maxi > last)
                {
                    last = maxi;
                }
                else
                {
                    cout<<"NO";
                    return 0;
                }
            }
        }
    }

    if (flag)
    {
        cout<<"YES";
        return 0;
    }

    return 0;
}