#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <assert.h>
#include <fstream>
#include <iomanip>
#include <bitset>
#include <string>
#include <cstdio>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>
using namespace std;

#define int64 long long
#define mp make_pair

const int64 inf = 1e18;

#ifdef _DEBUG
    const int N = 300010;
#else
    const int N = 300010;
#endif



int n, q, parent[N], sz[N];
set <pair<int, int> > st;

void make(int v)
{
    parent[v] = v;
    sz[v] = 1;
}

int find(int v)
{
    if (parent[v] == v) return v;
    return parent[v] = find(parent[v]);
}

void merge(int u, int v)
{
    u = find(u);
    v = find(v);
    if (u == v) return;
    if (sz[u] < sz[v]) swap(u, v);
    parent[v] = u;
    sz[u] += sz[v];
}

int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    scanf("%d%d", &n, &q);
    for (int i = 1; i <= n; i++) make(i);
    for (int i = 1; i <= q; i++)
    {
        int t, x, y;
        scanf("%d%d%d", &t, &x, &y);
        if (t == 1)
        {
            merge(x, y);
        }
        else if (t == 2)
        {
            int cur = x;
            int l, r;
            while (cur <= y)
            {
                set <pair<int, int> > :: iterator it = st.lower_bound(mp(-cur, -1));
                if (it == st.end())
                {
                    if (cur + 1 <= y) merge(x, cur + 1);
                    cur++;
                    continue;
                }
                l = -it->first;
                r = -it->second;
                if (r < cur)
                {
                    if (cur + 1 <= y) merge(x, cur + 1);
                    cur++;
                    continue;
                }
                if (r + 1 <= y) merge(x, r + 1);
                cur = r + 1;
            }
            l = x;
            r = y;
            set <pair<int, int> > :: iterator it1 = st.lower_bound(mp(-x, -1));
            set <pair<int, int> > :: iterator it2 = st.lower_bound(mp(-y, -1));
            if (it1 != st.end())
            {
                if (-it1->second >= x) l = -it1->first;
            }
            if (it2 != st.end())
            {
                if (-it2->second >= y) r = -it2->second;
            }
            while (true)
            {
                if (!st.size()) break;
                set <pair<int, int> > :: iterator it = st.lower_bound(mp(-y, -1));
                if (it == st.end()) break;
                if (-it->second < x) break;
                st.erase(it);
            }
            st.insert(mp(-l, -r));
        }
        else
        {
            if (find(x) == find(y)) printf("YES\n");
            else printf("NO\n");
        }
    }
    return 0;
}