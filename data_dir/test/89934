/*
ye mera template hai
apna khud likho bc =_=
*/

/*
Author : Sarvagya Agarwal
*/

#include<bits/stdc++.h>
using namespace std;

//defines
#define openin freopen("input.txt","r",stdin)
#define openout freopen("output.txt","w",stdout)
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ll long long
#define int long long
#define mod 1000000007
#define rep(i,a,n) for(__typeof(n) i=a;i<=n;++i)
#define all(c) (c).begin(),(c).end()
#define ff first
#define ss second
#define pb push_back
#define mp make_pair

//gcd
int gcd(int a,int b)
{
    return __gcd(a,b);
}
//lcm
int lcm(int a,int b)
{
    int g = gcd(a,b);
    return a*(b/g);
}
//power 
int power(int a,int b)
{
    int ans = 1;
    while(b)
    {
        if(b&1)
        {
            ans = (ans*a)%mod;
        }
        a=(a*a)%mod;
        b/=2;
    }
    return ans ;
}

//debug
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
		cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
		const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

// DOBARA OVERFLOW KI GALTI HUI TO TU CHUTIYA HAI BC
// update : TU CHUTIYA HAI BC

bool dp[100000][4];
set<string>Q;
int32_t main()
{
    fast;
    string s;
    cin>>s;
    // pointer index will denote the root 
    int n = s.size();
    if(n<7)
    {
        cout<<0;
        return 0;
    }
    dp[n][2] = dp[n][3] = true;
    dp[n-1][2] = dp[n-1][3] = false;
    dp[n-2][2] = true;
    dp[n-2][3] = false;
    /*for(int i=n-3;i>=5;i--)
    {
        string temp = s.substr(i,2);
        if(dp[i+2][2])
        {
            string temp2 = s.substr(i+2,2);
            if(temp!=temp2)dp[i][2]=true;
            else dp[i][2]=false;
        }
        else dp[i][2]=false;
        temp = s.substr(i,3);
        if(dp[i+3][3])
        {
            if(i+5<n)
            {
                string temp2 = s.substr(i+3,3);
                if(temp!=temp2)dp[i][3]=true;
                else dp[i][3]=false;
            }
            else dp[i][3] = true;
        }
        else dp[i][3] = false;
    }*/
    dp[n-3][2] = false;
    dp[n-3][3] = (n>7)?true:false;
    for(int i=n-4;i>=5;--i)
    {
        rep(j,2,3)
        {
            if(dp[i+j][5-j]==true or (dp[i+j][j]==true and s.substr(i,j)!=s.substr(i+j,j)))
  dp[i][j]=true;
        }
    }
    rep(i,5,n-2)
    {
        if(dp[i][2])
        {
            Q.insert(s.substr(i,2));
        }
    }
    rep(i,5,n-3)
    {
        if(dp[i][3])
        {
            Q.insert(s.substr(i,3));
        }
    }
    cout<<Q.size()<<endl;
    for(auto it:Q)cout<<it<<endl;
    return 0;
}