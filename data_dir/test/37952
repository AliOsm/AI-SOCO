#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 10;
const int maxn = 1 << 20;

struct Node{
	int l, r, id;
}Q[N];

int pos[N];
long long ans[N];
long long flag[maxn];
int a[N];
int n, m, k, L, R;
long long sum;

bool cmp(const Node& x, const Node& y){
	if (pos[x.l] == pos[y.l]) return x.r < y.r;
	return pos[x.l] < pos[y.l];
}

void add(int x){
	sum += flag[a[x] ^ k];
	flag[a[x]]++;
}

void del(int x){
	flag[a[x]]--;
	sum -= flag[a[x] ^ k];
}

int main(){
	scanf("%d %d %d",&n,&m,&k);
	int sz = sqrt(n);
	a[0] = 0;
	memset(flag, 0, sizeof(flag));
	for (int i = 1; i <= n; i++){
		scanf("%d",&a[i]);
		a[i] = a[i] ^ a[i - 1];
		pos[i] = i / sz;
	}
	for (int i = 1; i <= m; i++){
		scanf("%d %d",&Q[i].l,&Q[i].r);
		Q[i].id = i;
	}
	sort(Q + 1, Q + m + 1, cmp);
	L = 1;
	R = 0;
	sum = 0;
	flag[0] = 1;
	for (int i = 1; i <= m; i++){
		while (L < Q[i].l){
			del(L - 1);
			L++;
		}
		while (L > Q[i].l){
			L--;
			add(L - 1);
		}
		while (R < Q[i].r){
			R++;
			add(R);
		}
		while (R > Q[i].r){
			del(R);
			R--;
		}
		ans[Q[i].id] = sum;
	}
	for (int i = 1; i <= m; i++) printf("%I64d\n",ans[i]);
	return 0;
}