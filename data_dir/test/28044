//  Copyright Â© 2020 Diego Garcia Rodriguez del Campo. All rights reserved.
#include<bits/stdc++.h>
#define MAX 200005
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
using namespace std;
typedef long long i64;

int N;
int trp[MAX][3];
int ans[MAX];
set < int > in[MAX];

int main()
{
    optimiza_io
    cin >> N;
    for( int i = 1; i <= N - 2; i ++ ) {
        cin >> trp[i][0] >> trp[i][1] >> trp[i][2];
        sort( trp[i] , trp[i] + 3 );
        
        for( int j = 0; j < 3; j ++ ) {
            in[trp[i][j]].insert( i );
        }
    }
    
    /*
    
    1 2 3
    2 3 4
    3 4 5
    4 5 6
    5 6 7
    6 7 8
    
    */
    
    for( int ini = 1; ini <= N; ini ++ )
        if( in[ini].size() == 1 ) {
            int x = ini;
            for( int i = 1; i + 2 <= N; i ++ ) {
                ans[i] = x;
                int q = *in[x].begin();
                int n1 = trp[q][0];
                int n2 = trp[q][1];
                if( n1 == x )
                    n1 = trp[q][2];
                else if( n2 == x )
                    n2 = trp[q][2];
                
                if( in[n1].size() > in[n2].size() )
                    swap( n1 , n2 );
                else if( in[n1].size() == in[n2].size() && ans[i + 1] && n1 != ans[i + 1] ) 
                    swap( n1 , n2 );
                ans[i + 1] = n1;
                ans[i + 2] = n2;
                in[x].erase( q );
                in[n1].erase( q );
                in[n2].erase( q );
                x = n1;
            }
            break;
        }
    
    for( int i = 1; i <= N; i ++ ) {
        if( in[i].size() == 2 )
            ans[N - 1] = i;
        else if( in[i].size() == 1 )
            ans[N] = i;
    }
    
    for( int i = 1; i <= N; i ++ )
        cout << ans[i] << " ";
    return 0;
}

// CHECAR LIMITES 