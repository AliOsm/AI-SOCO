#include<iostream>
#include<cmath>
#include<algorithm>
#include<string>
#include<string.h>
#include<vector>
#include<set>
#include<map>
#include<cstdio>
#include<queue>
#include<sstream>
#include<list>
#include<bitset>
#include<ctime>
using namespace std;

typedef long long Int;
#define FOR(i,a,b) for(int i=(a); i<=(b);++i)
#define mp make_pair
#define pb push_back
#define sz(s) (int)((s).size())
const int inf = 1000000000;
const int MOD = 1000000007;
const double pi=acos(-1.0);

const int N = 500009;
vector<int>g[N+1];
vector<int> order;
int pos[N+1], last[N+1];
int F[N+1];

void dfs(int v, int f) {
	F[v]=f;
	pos[v]=sz(order);
	order.pb(v);

	FOR(i,0,sz(g[v])-1) {
		int to = g[v][i];
		if(to==f) {
			continue;
		}
		dfs(to, v);
	}

	last[v]=sz(order)-1;
}

struct tree {
	int mx[4*N+4];
	int e[4*N+4];
	int getmax(int v, int l, int r, int from, int to) {
		if(from>to || l>to || from>r) return 0;
		if(l==from && r==to) return mx[v];
		int mid = (l+r)/2;
		int t1 = getmax(2*v, l, mid, from, min(to, mid));
		int t2 = getmax(2*v+1, mid+1, r, max(from, mid+1), to);
		return max(max(t1, t2),e[v]);
	}

	void upd(int v, int  l, int r, int from, int to, int nv) {
		if(from>to || l>to || from>r) return;
		if(l==from && r==to) {
			mx[v]=max(mx[v], nv);
			e[v]=max(e[v],nv);
			return;
		}
		int mid = (l+r)/2;
		upd(2*v, l, mid, from, min(to, mid), nv);
		upd(2*v+1, mid+1, r, max(from, mid+1), to, nv);
		mx[v]=max(mx[2*v], mx[2*v+1]);
	}
};

int mode[N+1];
tree t;

int main() {
	//freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
	int n;
	cin>>n;
	FOR(i,1,n-1) {
		int x,y;
		cin>>x>>y;
		g[x].pb(y);
		g[y].pb(x);
	}
	
	order.clear();
	dfs(1, -1);


	int q;cin>>q;
	FOR(ii,1,q) {
		int v;
		scanf("%d %d",&mode[ii], &v);
		if(mode[ii]==1) {
			//cerr<<pos[v]<<"1 "<<last[v]<<endl;
			int id = t.getmax(1,0,n,pos[v],last[v]);
			
			if(id%2==0 && mode[id/2]==1);else {
				int f = F[v];
				t.upd(1,0,n,pos[v],last[v],2*ii);
				if(f>0)t.upd(1,0,n,pos[f],pos[f],2*ii+1);
			}
			
		}else
			if(mode[ii]==2) {
				//cerr<<pos[v]<<"2 "<<last[v]<<endl;
				t.upd(1,0,n,pos[v],pos[v],2*ii);
			}else
				if(mode[ii]==3) {
					//cerr<<pos[v]<<" 3 "<<last[v]<<endl;
					int id = t.getmax(1,0,n,pos[v],last[v]);
					//cerr<<id<<endl;
					if(id%2==0 && mode[id/2]==1) puts("1");else puts("0");
				}
	}
}