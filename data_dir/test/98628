// In the name of God
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iomanip>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <assert.h>
#include <bitset>
#define sqr(a) ((a)*1LL*(a))
#define all(a) (a).begin(), (a).end()
using namespace std;
 
template <typename T>
T next_int() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if(ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return p * x;
}
 
string next_token() {
    char ch;
    string ans = "";
    do { ch = getchar(); } while(ch <= ' ');
    while(ch > ' ') {
        ans += ch;
        ch = getchar();
    }
    return ans;
}
    
const long long INF = (long long)1e18;
const int INFINT = (int)1e9 + 227 + 1;
const int MAXN = (int)1e6 + 227 + 1; 
const int MOD = (int)1e9 + 7;
const long double EPS = 1e-9;
 
long long bin_pow(long long a, long long b) {
    if(!b) return 1;
    long long ans = bin_pow(a, b / 2);
    ans = ans * ans % MOD;
    if(b % 2) ans = ans * a % MOD;
    return ans;
}

bool used[MAXN];
vector<int> prime;

void build_prime() {
    for(int i = 2; i < MAXN; i++) {
        if(used[i]) continue;

        prime.push_back(i);

        for(int j = i; j < MAXN; j += i)
            used[j] = 1;
    }
}

int dp[501][500 * 31];

int main() {
    // freopen(".in", "r", stdin);

    build_prime();

    map<int, int> k;
    int n; cin >> n;
    int mx_k = 0;
    for(int i = 0; i < n; i++) {
        int a; cin >> a;

        for(int j = 0; j < prime.size(); j++)
            while(a % prime[j] == 0) {
                a /= prime[j];

                k[prime[j]]++;
                mx_k = max(mx_k, k[prime[j]]);
            }

        if(a > 1) k[a]++, mx_k = max(mx_k, k[a]);
    }

    dp[0][0] = 1;
    for(int i = 0; i < n; i++)
        for(int k = 0; k <= mx_k; k++) {
            (dp[i + 1][k] += dp[i][k]) %= MOD;
            (dp[i][k + 1] += dp[i][k]) %= MOD;
        }

    // cout << dp[2][2] << "\n";

    long long ans = 1;
    for(map<int, int> :: iterator i = k.begin(); i != k.end(); i++) {
        int k = i -> second;

        ans = (ans * dp[n][k]) % MOD;
        // cout << k << "\n";
    }

    cout << ans << "\n";
}