#include <algorithm>
#include <cassert>
#include <iostream>
#include <vector>
using namespace std;

const int BITS = 20;

struct query {
    int L, R, index;
};

int N, Q;
vector<int> burgers;
vector<int> answers;
vector<vector<query>> queries_at_start;

int main() {
    scanf("%d", &N);
    burgers.resize(N);
    queries_at_start.assign(N, {});

    for (int &burger : burgers)
        scanf("%d", &burger);

    scanf("%d", &Q);
    answers.resize(Q);

    for (int i = 0; i < Q; i++) {
        query q;
        scanf("%d %d", &q.L, &q.R);
        q.L--;
        q.index = i;
        queries_at_start[q.L].push_back(q);
    }

    vector<int> basis(BITS, 0);
    vector<int> basis_index(BITS, 0);

    for (int start = N - 1; start >= 0; start--) {
        int x = burgers[start], index = start;

        for (int bit = BITS - 1; bit >= 0; bit--)
            if (x >> bit & 1) {
                if (basis[bit] == 0) {
                    basis[bit] = x;
                    basis_index[bit] = index;
                    break;
                }

                if (index < basis_index[bit]) {
                    swap(x, basis[bit]);
                    swap(index, basis_index[bit]);
                }

                x ^= basis[bit];
            }

        for (query &q : queries_at_start[start]) {
            int answer = 0;

            for (int bit = BITS - 1; bit >= 0; bit--)
                if (basis_index[bit] < q.R)
                    answer = max(answer, answer ^ basis[bit]);

            answers[q.index] = answer;
        }
    }

    for (int i = 0; i < Q; i++)
        printf("%d\n", answers[i]);
}
