#include <bits/stdc++.h>
#ifdef DEBUG
#include "_debug.cpp"
#include "callable.hpp/callable.hpp"
#endif
#define endl '\n'
using namespace std;
using ll = long long;
vector<int> address;
vector<vector<int>> ans;
vector<int> curr;
int make(int s, int e) {
    int val = 0;
    for(int i = s; i < e; i++) {
        val *= 10;
        val += address[i];
    }
    return val;
}
int n_digits(int x) {
    return x < 10 ? 1 : 1 + n_digits(x / 10);
}
void rb(int i = 0, int parts = 4) {
    if(parts == 0) {
        if(i == address.size()) {
            ans.push_back(curr);
        }
    } else {
        for(int j = i + 1; j <= address.size(); j++) {
            if(make(i, j) <= 255 and n_digits(make(i, j)) == j - i) {
                curr.push_back(make(i, j));
                rb(j, parts - 1);
                curr.pop_back();
            } else {
                break;
            }
        }
    }
}
bool complete(vector<int>& digits, vector<int>& address) {
    set<int> address_s(address.begin(), address.end());
    bool ans = true;
    for(int x : digits) {
        ans &= address_s.count(x);
    }
    return ans;
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n;
    cin >> n;
    if(n > 6) {
        cout << 0 << endl;
    } else {
        vector<int> digits(n);
        for(int i = 0; i < n; i++) {
            cin >> digits[i];
        }
        for(auto a : digits) {
            for(auto b : digits) {
                address = {a, b, b, a};
                if(complete(digits, address)) rb();
            }
        }
        for(auto a : digits) {
            for(auto b : digits) {
                for(auto c : digits) {
                    address = {a, b, c, b, a};
                    if(complete(digits, address)) rb();
                    address = {a, b, c, c, b, a};
                    if(complete(digits, address)) rb();
                }
            }
        }
        for(auto a : digits) {
            for(auto b : digits) {
                for(auto c : digits) {
                    for(auto d : digits) {
                        address = {a, b, c, d, c, b, a};
                        if(complete(digits, address)) rb();
                        address = {a, b, c, d, d, c, b, a};
                        if(complete(digits, address)) rb();
                    }
                }
            }
        }
        for(auto a : digits) {
            for(auto b : digits) {
                for(auto c : digits) {
                    for(auto d : digits) {
                        for(auto e : digits) {
                            address = {a, b, c, d, e, d, c, b, a};
                            if(complete(digits, address)) rb();
                            address = {a, b, c, d, e, e, d, c, b, a};
                            if(complete(digits, address)) rb();
                        }
                    }
                }
            }
        }
        for(auto a : digits) {
            for(auto b : digits) {
                for(auto c : digits) {
                    for(auto d : digits) {
                        for(auto e : digits) {
                            for(auto f : digits) {
                                address = {a, b, c, d, e, f, e, d, c, b, a};
                                if(complete(digits, address)) rb();
                                address = {a, b, c, d, e, f, f, e, d, c, b, a};
                                if(complete(digits, address)) rb();
                            }
                        }
                    }
                }
            }
        }
        cout << ans.size() << endl;
        for(auto& v : ans) {
            cout << v[0] << '.' << v[1] << '.' << v[2] << '.' << v[3] << endl;
        }
    }
    return 0;
}
