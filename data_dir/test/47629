#pragma GCC optimize("O3")

# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

# include <stdio.h>
# include <bits/stdc++.h>


#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace __gnu_pbds;
using namespace std;
 
typedef
tree<pair<int,int>,null_type,less<pair<int,int>>,rb_tree_tag, tree_order_statistics_node_update> ordered_set;

inline bool isvowel (char c) {
	c = tolower(c);
    if (c == 'a' || c == 'e' || c == 'i' || c == 'y' || c == 'o' || c == 'u') return 1;
    return 0;
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 6e5 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, m;
int a[N], f[N];
int st[N];
int ptr;
vector < pair < int, int > > g[N];
int ans[N];

inline double se (int i, int j) {
	double x = a[i], y = a[j];
	return (i * x + f[j] - f[i] - j * y) / (x - y);
}

int main () {
	scanf("%d", &n);
	For(i, 1, n) {
		scanf("%d", a + i);
		f[i] = f[i - 1] + a[i];
	}

	scanf("%d", &m);
	For(i, 1, m) {
		int x, y;
		scanf("%d%d", &x, &y);
		g[y].pb({x, i});
	}

	For(i, 1, n) {
		while (ptr > 0 && a[st[ptr]] >= a[i]) ptr --;
		while (ptr > 1 && se(st[ptr], i) <= se(st[ptr - 1], i)) ptr --;
		st[++ ptr] = i;
		for (auto x : g[i]) {
			int l = upper_bound(st + 1, st + ptr + 1, i - x.F) - st;
			int r = ptr - 1, res = i;
			while (l <= r) {
				int md = (l + r) >> 1;
				if (se(st[md], st[md + 1]) >= i - x.F) {
					r = md - 1;
					res = st[md];
				} else l = md + 1;
			}
		// 	cout << res << '\n';
			ans[x.S] = f[i] - f[res] + a[res] * (res - i + x.F);
		}
	}
	For(i, 1, m) {
		printf("%d\n", ans[i]);
	}
	
	return Accepted;
}

// B...a