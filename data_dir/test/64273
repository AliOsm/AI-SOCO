#include <bits/stdc++.h>

// limit
#define oo 1000000007LL
#define OO 1000000000000000007LL

// loop
#define fto(i, x, y) for(int i = (x); i <= (y); ++i)
#define fdto(i, x, y) for(int i = (x); i >= (y); --i)
#define ftoa(i, x, y, a) for(int i = (x); i <= (y); i += a)
#define fdtoa(i, x, y, a) for(int i = (x); i >= (y); i -= a)
#define ftoit(it, var) for (__typeof(var.begin()) it = var.begin(); it != var.end(); ++it)
#define fdtoit(rit, var) for (__typeof(var.rbegin()) rit = var.rbegin(); rit != var.rend(); ++rit)

// debug
#define debug cout << "*" << endl;
#define bug1d(a, x, y) { cout << #a << ": "; fto(_, x, y) cout << a[_] << ' '; cout << endl; }
#define bug2d(a, x, y, u, v) { cout << #a << ": " << endl; fto(i, x, y) {fto(j, u, v) cout << a[i][j] << ' '; cout << endl;}; cout << endl;}
#define bug(a) cout << #a << " = " << a << endl;
#define bug2(a, b) cout << #a << " = " << a << "; "; cout << #b << " = " << b << endl;
#define bug3(a, b, c) cout << #a << " = " << a << "; "; cout << #b << " = " << b << "; "; cout << #c << " = " << c << endl;

// operation
#define mp make_pair
#define pb push_back
#define pf push_front

// structure
#define ii pair<int, int>
#define iii pair<ii, int>
#define vi vector<int>
#define vll vector<ll>
#define vii vector<ii>

// get value
#define FF first
#define SS second

// data type
#define ll long long
#define ull unsigned long long

// function
#define lb lower_bound
#define ub upper_bound

using namespace std;

template <class T>
T min(T a, T b, T c) {
    return min(a, min(b, c));
}

template <class T>
T min(T a, T b, T c, T d) {
    return min(a, min(b, min(c, d)));
}

template <class T>
T max(T a, T b, T c) {
    return max(a, max(b, c));
}

template <class T>
T max(T a, T b, T c, T d) {
    return max(a, max(b, max(c, d)));
}

bool cmp(const ii& a, const ii& b) {return (a.FF > b.FF || (a.FF == b.FF && a.SS >= b.SS));}
ll GCD(ll a, ll b) {return (a%b) ? GCD(b, a%b) : b;}

#define Pro "tmp"
#define maxN 200007

int parent[maxN];
vi adj[maxN];

int dp[maxN][27];
int depth[maxN];

int LCA(int u, int v) {
    if (depth[u] < depth[v]) swap(u, v);
    fdto (i, 18, 0) {
        if (depth[dp[u][i]] >= depth[v]) u = dp[u][i];
    }

    if (u == v) return u;
    fdto (i, 18, 0) {
        if (dp[u][i] && dp[u][i] != dp[v][i]) {
            u = dp[u][i];
            v = dp[v][i];
        }
    }

    return parent[u];
}

void DFS(int u) {
    dp[u][0] = parent[u];
    fto (i, 1, 18) {
        if (dp[u][i-1]) dp[u][i] = dp[dp[u][i-1]][i-1];
    }

    fto (i, 0, (int)adj[u].size()-1) {
        int v = adj[u][i];
        if (parent[u] == v) continue;
        parent[v] = u;
        depth[v] = depth[u]+1;
        DFS(v);
    }
    return;
}

int main() {
    #ifndef ONLINE_JUDGE
        freopen(Pro".inp", "r", stdin);
        freopen(Pro".out", "w", stdout);
    #endif // ONLINE_JUDGE

    int n, q;
    scanf("%d%d", &n, &q);

    fto (u, 2, n) {
        int v;
        scanf("%d", &v);
        adj[u].pb(v);
        adj[v].pb(u);
    }

    depth[1] = 1;
    DFS(1);

    fto (i, 1, q) {
        int a, b, c;
        scanf("%d%d%d", &a, &b, &c);

        int ans = 0;
        int d = LCA(a, c), e = LCA(a, b), f = LCA(b, c);

        int res = depth[a]-max(depth[d], depth[e])+1;
        if (d == e) res += depth[f]-depth[d];
        ans = max(ans, res);

        res = depth[b]-max(depth[e], depth[f])+1;
        if (e == f) res += depth[d]-depth[e];
        ans = max(ans, res);

        res = depth[c]-max(depth[d], depth[f])+1;
        if (d == f) res += depth[e]-depth[f];
        ans = max(ans, res);

        printf("%d\n", ans);
    }

    return 0;
}