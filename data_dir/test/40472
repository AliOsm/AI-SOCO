#include <bits/stdc++.h>
using namespace std;
typedef long long int64;
typedef complex<long double> cmplx;
const long double pi = 3.14159265358979323846;
const int inf = (int)2e+9 + 2;
const int mod = 1'000'000'007;//998244353;
const long double eps = 1e-8;
const int N = 100'005;

int n, m, k;
int a[101];

void solve(int test)
{
  cin >> n >> k;
  for (int i = 0; i < n; ++i) {
    int x; cin >> x; ++ a[x];
  }
  int mx = *max_element(a, a + 101);
  int dishes = (mx + k - 1) / k;
  int dif = count_if(a, a + 101, [] (int x) { return x != 0; });
  cout << dishes * dif * k - n;
}

void precalc()
{
}

int main()
{
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i)
      solve(i);
  //cout << endl << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count();
  return 0;
}

