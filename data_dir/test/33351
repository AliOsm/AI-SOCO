#include <bits/stdc++.h>
#define f first
#define s second
#define mp make_pair
#define pb  push_back
using namespace std;
typedef pair<int,int> pii;
typedef pair<int,pii> piii;
typedef vector<piii> viii;

const int N = 1000005;
long long cntR[N], cntL[N], bestR[N], bestL[N], bestAnsL[N], bestAnsR[N];
int main()
{
    memset(bestR, -1, sizeof bestR);
    memset(bestL, -1, sizeof bestL);
    int n,m,k;
    scanf("%d%d%d",&n,&m,&k);
    viii dep, arriv;
    for(int i = 0;i<m;i++) {
        int a,b,c,d;
        scanf("%d%d%d%d",&a,&b,&c,&d);
        if(b == 0)
            dep.pb(mp(a,mp(c,d)));
        else
            arriv.pb(mp(a,mp(b,d)));
    }
    sort(dep.begin(),dep.end());
    sort(arriv.rbegin(),arriv.rend());
    for(int i = 1;i<N;i++) {
        cntR[i] = cntR[i-1];
        bestAnsR[i] = bestAnsR[i-1];
        while(arriv.size() && arriv.back().f ==  i) {
            piii curr = arriv.back();
            arriv.pop_back();
            if(bestR[curr.s.f] == -1) {
                cntR[i]++;
                bestR[curr.s.f] = curr.s.s;
                bestAnsR[i] += (long long)curr.s.s;
            } else {
                if(bestR[curr.s.f] > curr.s.s) {
                    bestAnsR[i] += (long long)curr.s.s - bestR[curr.s.f];
                    bestR[curr.s.f] = curr.s.s;
                }
            }
        }
    }
    for(int i = N-2;i>0;i--) {
        cntL[i] = cntL[i+1];
        bestAnsL[i] = bestAnsL[i+1];
        while(dep.size() && dep.back().f ==  i) {
            piii curr = dep.back();
            dep.pop_back();
            if(bestL[curr.s.f] == -1) {
                cntL[i]++;
                bestL[curr.s.f] = curr.s.s;
                bestAnsL[i] += (long long)curr.s.s;
            } else {
                if(bestL[curr.s.f] > curr.s.s) {
                    bestAnsL[i] += (long long)curr.s.s - bestL[curr.s.f];
                    bestL[curr.s.f] = curr.s.s;
                }
            }
        }
    }
    long long ans = -1;
    for(int i = 1;i<N;i++) {
        if(i+k+1 >= N)
            break;
        if(cntR[i] == n && cntL[i+k+1] == n) {
            long long tempAns = bestAnsR[i] + bestAnsL[i+k+1];
            if(ans == -1 || tempAns < ans)
                ans = tempAns;
        }
    }
    printf("%I64d",ans);
    return 0;
}
