#include <bits/stdc++.h>

using namespace std;
#define all(x) (x).begin(), (x).end()
#define clr(x) memset((x), 0, sizeof(x))
#define clr1(x) memset((x), -1, sizeof(x))
#define pb push_back
#define mp make_pair
#define x first
#define y second
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> PII;
typedef pair<ll, ll> PLL;
typedef pair<ld, ld> PLD;
typedef pair<double, double> PDD;
template<class T = int>
inline T nxt() { T x = 0;int c = getchar();int minus = 0;while (c != '-' && !isdigit(c)) { c = getchar(); }if (c == '-') { minus = 1;c = getchar(); }while (isdigit(c)) { x = x * 10 + c - '0';c = getchar(); }return (minus ? -x : x); }
template<class T>
inline T sqr(T x) { return x * x; }
inline ll isSqr(ll v) { ll t = (ll) sqrt(v);for (ll i = t - 1; i <= t + 1; ++i) { if (i * i == v) return i; }return -1; }
inline ll gcd(ll a, ll b) { a = abs(a);b = abs(b);while (b) { a %= b;swap(a, b); } return a; }



void solve() {
    int n = nxt();
    vector<vector<int> > a(n, vector<int>(n, 0));
    for (int i= 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            a[i][j] = nxt();
        }
    }
    int p[n];
    clr(p);
    char used[n];
    clr(used);
    for (int i = 1; i < n; ++i) {
        for (int j = 0; j < a.size(); ++j) {
            if (used[j]) continue;
            bool ok = true;
            for (int k = 0; k < a.size(); ++k) {
                if (used[k]) continue;
                if (k == j) continue;
                if (a[j][k] != i) ok = false;
            }
            if (ok) {
                p[j] = i;
                used[j] = 1;
                break;
            }
        }
    }
    for (int i = 0; i < n; ++i) {
        if (p[i] == 0) p[i] = n;
    }
    for (int i = 0; i < n; ++i) {
        cout << p[i] << " ";
    }
    cout << "\n";
}

int main() {
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
#define FILE "f"
//    freopen(FILE".in", "r", stdin);
//    freopen(FILE".out", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    solve();

#ifdef LOCAL
    cerr << "time: " << clock() / (double) CLOCKS_PER_SEC << "s." << endl;
#endif
    return 0;
}