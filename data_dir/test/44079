#include<bits/stdc++.h>
#define int long long int
#define ld long double
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define rev(i,n,init) for(int i=n;i>=init;i--)
#define MAXN 200005
#define MOD2 998244353
#define MOD1 1e9+7
#define f first
#define s second
#define endl '\n'
#define pii pair<int,int>
#define piii pair<pii,int>
#define precise(i) cout<<fixed<<setprecision(i)
#define codejam cout<<"Case #"<<ii+1<<": ";
#define impossible cout<<"IMPOSSIBLE"<<endl;
#define error(s) throw runtime_error(s)
using namespace std;
const long double PI = atan(1.0)*4;
const int64_t INF=3e18;
const int32_t LOG=21;
const int MOD=MOD1;

int ans[55][55];
int cnt[55];

int32_t main()
{ 
      getFaster;
      int tests=1;
      cin>>tests;
      rep(ii,0,tests)
      {  
          fill(cnt,cnt+54,0);  
          int n,m,a,b;
          cin>>n>>m>>a>>b;
          bool g=true;
          int nxt=1;
          rep(i,1,n+1)
          {
              int cur=0;  
              rep(j1,1,m+1)
              {
                 int j=nxt;   
                 if(cur==a)break;
                 if(cnt[j]<b)
                 {
                       cnt[j]++;
                       cur++;
                       ans[i][j]=1;
                 }
                 nxt++;
                 if(nxt>m)nxt=1;
              }
              if(cur!=a)
              {
                   g=false;
                   break; 
              }
          }
          rep(j,1,m+1)
          {
                if(cnt[j]!=b)
                g=false;
          }
          if(!g)cout<<"NO"<<endl;
          else
          {
                cout<<"YES"<<endl;
                rep(i,1,n+1)
                {
                      rep(j,1,m+1)
                      cout<<ans[i][j];
                      cout<<endl;
                }
          }
          
          rep(i,1,n+2)rep(j,1,m+2)ans[i][j]=0;
      } 
      return 0;                         
}

/*
 TIPS:
 1.) Check for corner cases (like 0 is exception case)
 2.) Check for global memory sizes,memory refreshments and its complexity 
 3.) Check for sorting criteria (if used 1-based indexing)
 4.) Check for numbers overflow (while multiplying and doing MOD)
 5.) Check for typecasting issues like int to float( while dividing numbers)
*/