#include <bits/stdc++.h>

using namespace std;

struct vec
{
    long double x,y;
    bool operator ==(const vec &a) const{
        return x==a.x&&y==a.y;
    }
    bool operator <(const vec &a) const{
        if(a.x!=x) return x<a.x;
        return y<a.y;
    }
    vec operator +(const vec &a) const{
        return {x+a.x,y+a.y};
    }
    vec operator *(const long double &a) const{
        return {x*a,y*a};
    }
    vec operator -(const vec &a) const{
        return {x-a.x,y-a.y};
    }
    vec operator /(const long double &a) const{
        return {x/a,y/a};
    }
    long double len() const{
        return sqrt(x*x+y*y);
    }
    long double dot(const vec &a) const{
        return x*a.x+y*a.y;
    }
    long double crs(const vec &a) const{
        return x*a.y-y*a.x;
    }
    vec proj(const vec &a) const{
        return (a/a.len())*(*this).dot(a)/a.len();
    }
};


struct P
{
    int x,y;
    bool operator <(const P&a) const{
        if(x!=a.x)
        return x>a.x;
        return y>a.y;
    }
};

bool as(P a,P b)
{
    return a.y>b.y;
}

long long x,y,z,mod=1000000007;
vector<int> v;
int i,n,m,k,a,d,b,c,dx[10]={1,0,-1,0},dy[10]={0,1,0,-1};
int e;
int o[1];
int l[1];



stack<int> s;
//set<P> s;
queue<int> q;

P u[1];
char r[11];
//string r;
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
map<int,int> p,p1;
//v.resize(unique(v.begin(),v.end())-v.begin());

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//rng();

int f(int n)
{
    int o[11];
    memset(o,0,sizeof(o));
    for(;n;n/=10)
        o[n%10]++;
    for(int n=0;n<10;n++)
        if(o[n]>1) return 0;
    return 1;
}

int main()
{
    scanf("%d %d",&a,&b);
    for(int t=a;t<=b;t++)

        if(f(t))
    {

     printf("%d",t);
        return 0;
    }
    printf("%d",-1);
}
