#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse2")
#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
//#define int long long
#define boost() ios_base :: sync_with_stdio(0); cin.tie(); cout.tie(); cout << fixed; cout << setprecision(15); srand(time(NULL))
#define all(x) x.begin(), x.end()
using namespace std;

int n, m, q, k;
int w[15], cnt[(1 << 12) + 10], arr[(1 << 12) + 10][(1 << 12) + 10];
vector <pair <int, int>> v[(1 << 12) + 10];
char s[15];

int get_wu (int a, int b) {
  int res = 0;
  for (int i = 0; i < n; i++) {
    int x = (a & (1 << (n - i - 1)));
    int y = (b & (1 << (n - i - 1)));
    res += (x == y ? w[i] : 0);
  }
  return res;
}

void compute () {
  for (int i = 0; i < (1 << n); i++) {
    for (int j = 0; j < (1 << n); j++) {
      v[i].push_back ({get_wu (i, j), j});
    } //
    stable_sort (all (v[i]));
    for (int j = 0; j < (1 << n); j++) {
      int num = v[i][j].second;
      arr[i][j] += (arr[i][j - 1] + cnt[num]);
    }
  }
}

int to_num () {
  int res = 0;
  for (int i = 0; i < n; i++) {
    if (s[i] == '0') continue;
    res |= (1 << (n - i - 1));
  }
  return res;
}

signed main () {  
  scanf ("%d%d%d", &n, &m, &q);
  for (int i = 0; i < n; i++) scanf ("%d", w + i);
  for (int i = 0; i < m; i++) {
    scanf ("%s", s);
    cnt[to_num()] += 1;
  }
  compute ();
  while (q--) {
    scanf ("%s %d", s, &k);
    int num = to_num ();
    int lo = -1, hi = (1 << n);
    while (lo + 1 < hi) {
      int md = (lo + hi) >> 1;
      if (v[num][md].first <= k) lo = md;
      else hi = md;
    }
    printf ("%d", arr[num][lo]);
    puts ("");
  }
  return 0;
}

