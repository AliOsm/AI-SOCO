#include <iostream>
#include<memory.h>
#include <map>
#include <string>
#include <iomanip>
#include <fstream>
#include <vector>
#include <algorithm>
#include <stack>
#include <queue>
#include <cmath>
#include <set>
using namespace std;

/*
int main()
{
	int n, t;
	cin>>n>>t;
	t--;
	vector<int> a(n-1);
	vector<bool> tk(n, false);
	for (int i =0; i < n-1; i++) cin>>a[i];
	int cur = 0;
	while (cur < t)
	{
		if (tk[cur]) break;
		tk[cur] = true;
		cur = a[cur]+cur;
	}
	if (cur == t) cout<<"YES"<<endl;
	else cout<<"NO"<<endl;
}



vector<int> p;
int find(int i)
{
	if (p[i] == -1 || p[i] == i) return i;
	return p[i] = find(p[i]);
}
bool con(int i, int j)
{
	return find(i) == find(j);
}
void un(int i, int j)
{
	int pi = find(i);
	int pj = find(j);
	if (pi == pj) return ;
	p[pi] = pj;
}

int main()
{
	int n;
	cin>>n;
	vector<int> a(n);
	p = vector<int> (n, -1);
	for (int i = 0; i < n; i++) cin>>a[i];
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			char x;
			cin>>x;
			if (x == '1') un(i, j);
		}
	}
	for (int i = 0; i < n; i++)
	{
		int in = i;
		for (int j = i; j < n; j++)
		{
			if (con(i, j))
			{
				if (a[j] < a[in]) in = j;
			}
		}
		swap(a[in], a[i]);
	}
	for (int i = 0; i < n; i++) cout<<a[i]<<" ";
}
*/

int main()
{
	int n, m;
	cin>>n>>m;
	vector<int> w(n);
	for (int i = 0; i < n; i++) cin>>w[i];
	int x =0;
	vector<int> ord(n);
	vector<int> rd(m);
	vector<bool> put(n, false);
	for (int  i = 0; i < m; i++)
	{
		cin>>rd[i];
		rd[i]--;
		if (put[rd[i]])
			continue;
		else
		{
			ord[x] = rd[i];
			put[rd[i]] = true;
			x++;
		}
	}
	for (int i = 0; i < n; i++)
	{
		if (!put[i])
		{
			ord[x] = i;
			x++;
		}
	}
	int lift = 0;
	for (int i = 0; i < m; i++)
	{
		int in = 0;
		for (int j = 0; j < n; j++)
		{
			if (ord[j] == rd[i])
			{
				in = j;
			}
		}
		for (int j = in; j > 0; j--)
		{
			ord[j] = ord[j-1];
			lift += w[ord[j]];
			
		}
		ord[0] = rd[i];
	}
	cout<<lift<<endl;
}