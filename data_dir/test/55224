#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<ctime>
#include<memory.h>
#include<algorithm>
#include<string>
#include<map>
#include<set>
#define sqr(x) ((x)*(x))
#define sqrt(x) sqrt((x)*1.)
#define min(a,b) ((a)<(b)?(a):(b))
#define max(a,b) ((a)>(b)?(a):(b))
#define abs(x) ((x)>0?(x):-(x))
#define getar(m,n) for(int _=0;_<n;++_) cin>>(m)[_];
#define fill(m,v) memset(m,v,sizeof(m))
#define flush {cout.flush();fflush(stdout);}
#define random(x) (((rand()<<15)+rand())%(x))
#define pi 3.1415926535897932
#define y1 stupid_cmath
#define y0 stupid_cmath_make_me_cry
#define tm stupid_ctime
#define long long long
#define foreach(c,i) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)
using namespace std;

const int N = 3e5 + 747;
int n,m,q;
int i,j,k,l;
int t[N];

map< int, pair<int,int> > wh;

long ans;

struct ddd{
	int *b, len;
	int d;
	int *t;
	bool *u;
	int sth;
	
	void btree(){
		u = new bool[len];
		memset(u,false,len);
		for(d=1;d<len*2;d<<=1);
		t = new int[d*2];
		memset(t,0,d*4*2);
	}
	
	int rsq(int i, int j){
		int s = 0;
		for(i+=d, j+=d; i<=j; i>>=1, j>>=1){
			if(i&1){s+=t[i]; ++i;}
			if(!(j&1)){s+=t[j]; --j;}
		}
		return s;
	}
	
	void add(int id, int l, int r){
		int c;
		int i=l, j=r, o=-1;
		while(i<j){
			c = (i+j)>>1;
			if(rsq(l, c) == (c-l+1)){
				i = c+1;
			}else{
				o = c;
				j = c;
			}
		}
		
		if(o<0){
			cout<<"wtf"<<endl;
			++*(int*)0;
			exit(0);
		}
		
		wh[id] = make_pair(b[o]%n, o);
		
		//cout<<" id "<<id<<" goes to "<<b[o]%n<<endl;
		
		ans += (o-l);
		
		for(i=o+d; i; i>>=1) t[i]++;
		if(o+len < len*2) o+=len; else o-=len;
		for(i=o+d; i; i>>=1) t[i]++;
		
		
		//cout<<"+ "; for(i=d;i<d+len*2;++i) cout<<t[i]; cout<<endl;
	}
	
	void del(int id, int k){
		int i;
		for(i=k+d; i; i>>=1) t[i]--;
		if(k+len < len*2) i=k+len; else i=k-len;
		for(i=i+d; i; i>>=1) t[i]--;
		//cout<<"- "; for(i=d;i<d+len*2;++i) cout<<t[i]; cout<<endl;
	}
	
} a[N];
int w[N][2];


int main(){
	/*srand(74747);
	freopen("input.txt","w",stdout);
	n = 200000;
	cout<<n<<' '<<1<<' '<<n<<endl;
	for(i=0;i<n;++i) cout<<" + "<<i<<" 0"<<endl;
	return 0;*/
	ios_base::sync_with_stdio(0);
	//freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
	
	cin>>n>>m>>q;
	
	for(i=0;i<n;++i) if(!t[i]){
		j = i;
		k = 0;
		for(;;){
			++k;
			j = (j+m)%n;
			if(j==i) break;
		}
		
		a[i].b = new int[k*2];
		j = i;
		k = 0;
		for(;;){
			a[i].b[k] = j;
			w[j][0] = i;
			w[j][1] = k;
			++k;
			t[j] = k;
			j = (j+m)%n;
			if(j==i) break;
		}
		
		a[i].len = k;
		a[i].sth = i;
		
		for(k=0;k<a[i].len;++k) a[i].b[k+a[i].len] = a[i].b[k];
		
		a[i].btree();
	}
	
	
	/*for(i=0;i<n;++i){
		for(j=0;j<a[i].len*2;++j) cout<<a[i].b[j]<<' ';
		cout<<endl;
	}*/
	
	
	
	
	
	char ch;
	int id, hash;
	for(k=0;k<q;++k){
		cin>>ch;
		
		if(ch=='+'){
			cin>>id>>hash;
			i = w[hash][0];
			
			a[i].add(id, w[hash][1], w[hash][1]+a[i].len);
		}else{
			cin>>id;
			
			hash = wh[id].first;
			
			
			i = w[hash][0];
			
			a[i].del(id, wh[id].second);
		}
	}
	
	
	cout<<ans<<endl;
	
	return 0;
}
