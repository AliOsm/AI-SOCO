/*			Arjun Sanjeev
			IIIT-Hyderabad		

	********************************************
	*	"Never regret anything in life.	   *
	*	 If it's good, it's wonderful.	   *
	*	 If it's bad, it's experience."    *
	********************************************	*/

#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define f first
#define s second
#define let(x,a) __typeof(a) x(a)
#define all(a) (a).begin(),(a).end() 
#define endl '\n'
#define present(c,x) ((c).find(x) != (c).end()) 
#define tr(v,it) for(let(it,v.begin()); it != v.end(); it++)
#define rtr(v,it) for(let(it,v.rbegin()); it != v.rend(); it++)

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define LL long long int
#define PII pair<int,int>
#define VI vector<int>
#define inf INT_MAX

using namespace std;

int main()
{
	ios::sync_with_stdio(false);
	string s;
	cin>>s;
	int len=s.length();
	multiset<int> l[2],h[2];
	VI v;
	for(int i=0;i<len;i++) v.pb(s[i]);
	sort(all(v));
	for(int i=0;i<(len+1)/2;i++)
	{
		l[0].insert(v[i]);
		h[0].insert(-v[i]);
	}
	v.clear();
	cin>>s;
	for(int i=0;i<len;i++) v.pb(s[i]);
	sort(all(v),greater<int>());
	for(int i=0;i<len/2;i++)
	{
		l[1].insert(v[i]);
		h[1].insert(-v[i]);
	}
	int left=0,right=len-1;
	char ans[len];
	for(int i=0;i<len;i++)
	{
		int turn=i%2;
		int myLow=*l[turn].begin();
		int myHigh=-(*h[turn].begin());
		int yourLow=*l[1-turn].begin();
		int yourHigh=-(*h[1-turn].begin());
		if(turn==0)
		{
			if(myLow<yourHigh)
			{
				ans[left++]=myLow;
				l[0].erase(l[0].find(myLow));
				h[0].erase(h[0].find(-myLow));
			}
			else
			{
				ans[right--]=myHigh;
				l[0].erase(l[0].find(myHigh));
				h[0].erase(h[0].find(-myHigh));
			}
		}
		else
		{
			if(myHigh>yourLow)
			{
				ans[left++]=myHigh;
				l[1].erase(l[1].find(myHigh));
				h[1].erase(h[1].find(-myHigh));
			}
			else
			{
				ans[right--]=myLow;
				l[1].erase(l[1].find(myLow));
				h[1].erase(h[1].find(-myLow));
			}
		}
	}
	for(int i=0;i<len;i++)
	{
		cout<<ans[i];
	}
	cout<<endl;
	return 0;
}