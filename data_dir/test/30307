/*
author: madhav_1999 aka orthodoxparadox
26-Jan-2019
21:46:38
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define dbl long double
#define int ll
#define ll long long
#define pii pair<int, int>
#define fup(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define fnu for(ll i = 0; i < n; i++)
#define rev(Y) reverse(all(Y))
#define oiint ostream_iterator<int>(cout, " ") 
#define pb emplace_back
#define mp make_pair
#define ff first
#define ss second
#define endl '\n'
#define all(a) a.begin(), a.end()
#define initialise(a, x) memset(a, x, sizeof(a))
#define onlyunique(v) v.erase(unique(all(v)), v.end()); //only for sorted vector
#define inf 2e18
#define infi 1e9 + 10
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize ("O3")
#pragma GCC optimize ("O2")
#pragma GCC optimize("Ofast")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#ifdef __APPLE__
#define dbg(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){cerr << name << " : " << arg1 << endl;}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << "  ";
	__f(comma + 1, args...);}
#else
#define dbg(...)
#endif
template <typename X> ostream& operator << (ostream& x,const vector<X>& v){for(int i=0;i<v.size();++i) x<<v[i]<<" ";return x;} 
template <typename X> ostream& operator << (ostream& x,const set<X>& v){for(auto it:v) x<<it<<" ";return x;} 
template <typename X, typename Y> ostream& operator << (ostream& x, const pair<X,Y>& v) {x<<v.ff<<" "<<v.ss;return x;} 
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
struct pair_hash {inline std::size_t operator()(const std::pair<int, int> & v) const {return v.first*31+v.second;}};
const int mod = 1e9 + 7;

int takemod(int a){return ((a%mod)+mod)%mod;}

int fast_exp(int base, int expo) {
	int res=1;
	while(expo>0) {
		if(expo&1) res=(res*base)%mod;
		base=(base*base)%mod;
		expo>>=1;}
	return res;}

int modinv(int a){return takemod(fast_exp(takemod(a), mod-2));}

const int N = 3e5 + 10;
int sti[4*N], stp[4*N];
int d[N];
int c[N];
int pfl[N], pfr[N];

int right_query(int id, int l, int r, int s, int e)
{
	if (s > r or e < l)
		return -inf;
	if (l >= s and r <= e)
		return sti[id];

	int mid = (l + r) >> 1;
	int q1 = right_query(id << 1, l, mid, s, e);
	int q2 = right_query(id << 1 | 1, mid + 1, r, s, e);
	return max(q1, q2);
}

int left_query(int id, int l, int r, int s, int e)
{
	if (s > r or e < l)
		return -inf;
	if (l >= s and r <= e)
		return stp[id];

	int mid = (l + r) >> 1;
	int q1 = left_query(id << 1, l, mid, s, e);
	int q2 = left_query(id << 1 | 1, mid + 1, r, s, e);
	return max(q1, q2);
}

void build(int id, int l, int r)
{
	if(l == r)
	{
		sti[id] = pfl[l];
		stp[id] = pfr[l];
		return;
	}
	int mid = (l + r) >> 1;
	build(id << 1, l, mid);
	build(id << 1 | 1, mid + 1, r);
	sti[id] = max(sti[id << 1], sti[id << 1 | 1]);
	stp[id] = max(stp[id << 1], stp[id << 1 | 1]);
}

bool mys(const int &a, const int &b)
{
	return d[a] - d[a-1] > d[b] - d[b - 1];
}

signed main(){
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	#ifdef __APPLE__
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("error.txt", "w", stderr);
	#endif
	clock_t t1, t2;
	t1 = clock();

	int n, a;
	cin >> n >> a;
	int ans = 0;
	for(int i = 1; i <= n; i++)
	{
		cin >> d[i] >> c[i];
		c[i] = a - c[i];
		ans = max(ans, c[i]);
	}
	pfl[1] = c[1];
	for(int i = 2; i <= n; i++)
	{
		pfl[i] = pfl[i-1] + c[i];
		dbg(i, pfl[i]);
	}
	pfr[n] = c[n];
	for(int i = n-1; i >= 1; i--)
	{
		pfr[i] = pfr[i + 1] + c[i];
		dbg(i, pfr[i]);
	}
	build(1, 1, n);
	vector<int> v;
	for(int i = 2; i <= n; i++)
	{
		v.pb(i);
	}
	sort(all(v), mys);
	set<int> s;
	vector<int> temp;
	for(int i = 0; i < v.size(); i++){
		dbg(v[i], s);
		auto x = s.lower_bound(v[i]);
		int end_l, front_l;
		if(s.empty())
		{
			dbg(i);
			end_l = n;
			front_l = 1;
		}
		else
		{
			dbg(i);
			// dbg(*x);
			// if(i == 0) return 0;
			if(x == s.end()){
				//all included
				end_l = n;
			}
			else
			{
				end_l = *x - 1;
			}
			if(x == s.begin())
			{
				front_l = 1;
			}
			else
			{
				x--;
				front_l = *x;
			}
		}
		// return 0;
		dbg(end_l, front_l, v[i]);
		// if(i == 2) return 0;
		dbg(d[v[i]], d[v[i] - 1]);
		int curans = (d[v[i]] - d[v[i] - 1])*(d[v[i]] - d[v[i]-1]);
		curans = - curans;
		curans += c[v[i]];
		
		int rans = right_query(1, 1, n, v[i] + 1, end_l);
		int lans = left_query(1, 1, n, front_l, v[i] - 1);
		dbg(lans, rans);
		lans -= pfr[v[i]];
		rans -= pfl[v[i]];
		lans = max(lans, 0LL);
		rans = max(rans, 0LL);
		curans += rans + lans;
		dbg(curans, rans, lans);
		ans = max(ans, curans);
		if(i != v.size() - 1 and d[v[i]] - d[v[i] - 1] == d[v[i + 1]] - d[v[i + 1] - 1])
		{
			temp.pb(v[i]);
		}
		else
		{
			s.insert(v[i]);
			for(int &X : temp){

				s.insert(X);
			}
			temp.clear();
		}
		dbg(s);
	}
	cout << ans << endl;
	t2 = clock(); cerr << "time taken: " << (t2-t1)/(dbl)CLOCKS_PER_SEC;
	return 0;
}