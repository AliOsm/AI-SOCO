#include <bits/stdc++.h>
//For ordered_set
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define MOD 1000000007
#define test int t; cin>>t; while(t--)
#define init(arr,val) memset(arr,val,sizeof(arr))
#define loop(i,a,b) for(int i=a;i<b;i++)
#define loopr(i,a,b) for(int i=a;i>=b;i--)
#define loops(i,a,b,step) for(int i=a;i<b;i+=step)
#define looprs(i,a,b,step) for(int i=a;i>=b;i-=step)
#define ull unsigned long long int
#define ll long long int
#define P pair
#define PLL pair<long long, long long>
#define PII pair<int, int>
#define PUU pair<unsigned long long int, unsigned long long int>
#define L list
#define V vector
#define D deque
#define ST set
#define MS multiset
#define M map
#define UM unordered_map
#define mp make_pair
#define pb push_back
#define pf push_front
#define MM multimap
#define F first
#define S second
#define IT iterator
#define RIT reverse_iterator
#define FAST ios_base::sync_with_stdio(false);cin.tie();cout.tie();
#define FILE_READ_IN freopen("input.txt","r",stdin);
#define FILE_READ_OUT freopen("output.txt","w",stdout);
#define all(a) a.begin(),a.end()
#define ld long double
using namespace std;
// For ordered_set
const ll maxn = 1e5;
const ll inf = 1e9;
const double pi = acos(-1);
char a[1000100];
int tree[450000];
int n;
void build(int node = 0, int start = 0, int end = n-1){
   // printf("start = %d, end = %d\n",start,end);
   if(start == end){
      tree[node] = (1 << (a[start] - 'a'));
      return;
   }
   build(2*node+1,start,((start+end)>>1));
   build(2*node+2,((start+end)>>1)+1,end);
   tree[node] = tree[node+node+1]|tree[node+node+2];
}
 
void update(int ind, int node = 0, int start = 0, int end = n-1){
   // printf("start = %d, end = %d, l = %d, r = %d\n",start,end,l,r);
   if(start == end){
      tree[node] = (1 << (a[start] - 'a'));
      return;
   }
   if(ind <= ((start+end)>>1))update(ind,2*node+1,start,((start+end)>>1));
   else update(ind,2*node+2,((start+end)>>1)+1,end);
   tree[node] = tree[node+node+1]|tree[node+node+2];
}
 
int query(int l, int r, int node = 0, int start = 0, int end = n-1){
   // printf("start = %d, end = %d, l = %d, r = %d\n",start,end,l,r);
   if(end < l || start > r)return 0;
   if(l <= start && end <= r){
      return tree[node];
   }
   int a1 = query(l,r,2*node+1,start,((start+end)>>1));
   int a2 = query(l,r,2*node+2,((start+end)>>1)+1,end);
   return (a1 | a2);
}
 
int active(int n){
   int ans = 0;
   while(n){
      ans+=(n&1);
      n>>=1;
   }
   return ans;
}
 
int main(){
   scanf("%s",a);
   int q;
   n = strlen(a);
   scanf("%d",&q);
   build();
   while(q--){
      int t;
      scanf("%d",&t);
      if(t == 1){
         int p;
         char c;
         scanf("%d %c",&p,&c);
         if(a[p-1] != c){
            a[p-1] = c;
            update(p-1);
         }
      }else{
         int l,r;
         scanf("%d %d",&l,&r);
         l--;
         r--;
         printf("%d\n",active(query(l,r)));
      }
   }
   return 0;
}