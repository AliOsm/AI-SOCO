#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <utility>
#include <vector>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#include <queue>
#include <tuple>

using namespace std;

using ll = long long;
using ld = long double;
using pii = pair<int, int>;

constexpr int MAXN = 100005;
int n;
int a[MAXN];
tuple<int, int, int> queries[MAXN];
int ans[MAXN];

int memo[MAXN];

int solve(const int& k, const int& ind) {
    if (ind > n) return 0;
    if (memo[ind] != -1) return memo[ind];

    return memo[ind] = (1 + solve(k, ind + a[ind] + k));
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);

    scanf("%d", &n);
    for (int i = 1; i <= n; ++i) {
        scanf("%d", a + i);
    }

    int q, p, k;
    scanf("%d", &q);
    for (int i = 0; i < q; ++i) {
        scanf("%d %d", &p, &k);
        queries[i] = make_tuple(k, p, i);
    }

    sort(queries, queries + q);
    memset(memo, -1, sizeof(memo));

    for (int i = 0; i < q; ++i) {
        k = get<0>(queries[i]);
        if (i > 0 and k != get<0>(queries[i - 1]))
            memset(memo, -1, sizeof(memo));

        int sol = solve(k, get<1>(queries[i]));
        ans[get<2>(queries[i])] = sol;
    }
    
    for (int i = 0; i < q; ++i) {
        printf("%d\n", ans[i]);
    }
    return 0;
}
