#include <bits/stdc++.h>

using namespace std;

#define endl           '\n'
#define all(x)         x.begin(), x.end()
#define rall(x)        x.rbegin(), x.rend()
#define mem(x, y)      memset(x, y, sizeof x)

template <typename T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <typename T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <typename T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <typename T>
inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

const int N = (int) 1e5 + 5;
const int INF = (int) 1e9 + 7;
const long long MOD = (long long) 1e9 + 7;


int n, m, k, a[N];

int f1(int _n, int _m) {
    int rest = _m, point = 0;
    for (int j = 1; j <= k; j++) {
        for (int i = 1; i <= _n; i++) {
            if (rest < a[j]) return point;
            point += 1 + (j == k);
            rest -= a[j];
        }
    }
    return point;
}

int f2() {
    int rest = m, point = 0, mx = 0;
    int tot = accumulate(a + 1, a + k + 1, 0);
    for (int i = 1; i <= n; i++) {
        umax(mx, point + f1(n - i + 1, rest));
        if (rest < tot) break;
        rest -= tot, point += k + 1;

    }
    return mx;
}

int main() {
    Int(n), Int(k), Int(m);
    for (int i = 1; i <= k; i++) Int(a[i]);
    sort(a + 1, a + k + 1);

    int point = f2();

    printf("%d\n", point);
    return 0;
}