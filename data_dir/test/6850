#pragma GCC optimize ("Ofast")
#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define int long long int
#define pb push_back
#define fi first
#define se second
#define deb cerr << "Line no." << __LINE__
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define all(x) x.begin(), x.end()
#define IO ios :: sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define pii pair<int,int>
const int mod = 1e9 + 7;
const int mod1 = 998244353;
typedef long double f80;
#ifndef LOCAL
#define endl '\n'
#endif
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){
    uniform_int_distribution<int> uid(l, r);
    return uid(rng);
}
// Description:
// B -> stores the nodes in a bcc
// bcc[u] -> which bcc u is in.
// cmpno -> number of bcc's
// to just get bridges call get_bridge
struct BCC{
    #define N 100005
    vector<int> tree[N], g[N], B[N];
    int U[N], V[N], temp[N], bcc[N], ind[N], T, cmpno, m, n;
    bitset<N> vis, bridge;
    vector<int> Q[N];
    void init(int _n){ n = _n, cmpno = 0, T = 0, m = 0; }
    void reset(int n){
        fr(i, 1, n){
            g[i].clear(), tree[i].clear(), B[i].clear();
            ind[i] = 0;
        }
        bridge.reset();
    }
    int adj(int u,int e){ return U[e] == u ? V[e] : U[e]; }
    void addedge(int u,int v){
        U[m] = u, V[m] = v;
        g[u].pb(m), g[v].pb(m);
        m++;
    }
    void get_bridges(){
        fr(i, 1, n)
            if(!vis[i])
                dfs1(i, -1);
        vis.reset();
    }
    void go(){
        get_bridges();
        fr(i, 1, n)
            if(!vis[i]){
                cmpno++; dfs2(i);
            }
        vis.reset();
    }
    int dfs1(int u,int e){
        vis[u] = 1;
        temp[u] = T++;
        int t = temp[u];
        for(int id: g[u]){
            int v = adj(u, id);
            if(!vis[v]) t = min(t, dfs1(v, id));
            else if(id != e) t = min(t, temp[v]);
        }
        if(t == temp[u] && e != -1) bridge[e] = 1;
        return t;
    }
    void dfs2(int u){
        int cur_cmp = cmpno;
        Q[cur_cmp].pb(u);
        bcc[u] = cur_cmp;
        B[cur_cmp].pb(u);
        vis[u] = 1;
        while(Q[cur_cmp].size() != ind[cur_cmp])
        {
            int u = Q[cur_cmp][ind[cur_cmp]];    
            ind[cur_cmp]++;
            for(int e: g[u])
            {
                int v = adj(u, e);
                if(vis[v]) continue;
                if(bridge[e])
                {
                    cmpno++;
                    tree[cur_cmp].pb(cmpno);
                    tree[cmpno].pb(cur_cmp);
                    dfs2(v);
                }
                else
                {
                    Q[cur_cmp].pb(v);
                    vis[v] = 1;
                    bcc[v] = cur_cmp;
                    B[cur_cmp].pb(v);
                }
            }
        }
    }
    #undef N
}B;
const int N = 1e5 + 5;
const int LOGN = 17;
int dp[LOGN][N], dp1[LOGN][N], depth[N];
int pw[N];
void dfs(int u,int p){
    depth[u] = depth[p] + 1;
    for(int v : B.tree[u]){
        if(v != p){
            dp[0][v] = u;
            dfs(v, u);
        }
    }
}
int solve(int u,int v){
    if(depth[u] < depth[v]) swap(u, v);
    int ans = 0;
    for(int k = LOGN - 1; k >= 0; k--){
        if(depth[dp[k][u]] >= depth[v]) ans += dp1[k][u], u = dp[k][u];
    }
    if(u == v) return ans + dp1[0][u];
    for(int k = LOGN - 1; k >= 0; k--){
        if(dp[k][u] != dp[k][v])
            ans += dp1[k][u] + dp1[k][v], u = dp[k][u], v = dp[k][v];
    }
    return ans + dp1[1][u] + dp1[0][v];
}
void solve(){
    pw[0] = 1;
    int n, m;
    cin >> n >> m;
    fr(i, 1, n)
        pw[i] = (pw[i - 1] << 1) % mod;
    B.init(n);
    fr(i, 1, m){
        int u, v;
        cin >> u >> v;
        B.addedge(u, v);
    }
    B.go();
    for(int i = 1; i <= B.cmpno; i++){
        if(B.B[i].size() > 1)
            dp1[0][i] = 1;
    }
    dfs(1, 0);
    for(int k = 1; k < LOGN; k++){
        fr(i, 1, B.cmpno)
        {
            dp[k][i] = dp[k - 1][dp[k - 1][i]];
            dp1[k][i] = dp1[k - 1][i] + dp1[k - 1][dp[k - 1][i]];
        }
    }
    int k, u, v;
    cin >> k;
    fr(i, 1, k){
        cin >> u >> v;
        cout << pw[solve(B.bcc[u], B.bcc[v])] << endl;
    }
}
signed main(){
    IO;
    #ifdef LOCAL
        freopen("inp.txt","r", stdin);
        // freopen("out.txt", "w", stdout);
    #endif
    clock_t clk = clock();
    int t;
    // cin >> t;
    t = 1;
    while(t--){
        solve();
    }
    cerr << endl << (double)(clock() - clk) / CLOCKS_PER_SEC;
    return 0;
}