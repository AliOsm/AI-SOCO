#include <bits/stdc++.h>
using namespace std;

struct DisJointSet{
  vector<int> pa;
  vector<vector<int>> compo;
  DisJointSet(int n) {
    compo.resize(n);
    for (int i = 0; i < n; ++i) compo[i].push_back(i);
    pa.resize(n);
    iota(pa.begin(), pa.end(), 0);
  }
  int f(int a) { return pa[a] == a ? a : pa[a] = f(pa[a]); }
  bool unite(int a, int b) {
    a = f(a), b = f(b);
    if (a == b) return false;
    if (compo[a].size() > compo[b].size()) swap(a, b);
    compo[b].insert(compo[b].end(), compo[a].begin(), compo[a].end());
    pa[a] = b;
    return true;
  }
};

const long long MOD = 1e9 + 7;
long long powM(long long a, long long b) {
  long long ans = 1;
  for (long long cur = a; b; b >>= 1, cur = cur * cur % MOD) {
    if (b&1) ans = ans * cur % MOD;
  }
  return ans; 
}
class Solution {
  int n, k;
public:
  void run() {
    cin >> n >> k;
    DisJointSet djs(n);
    for (int i = 0; i < n - 1; ++i) {
      int a, b, t;
      cin >> a >> b >> t;
      --a, --b;
      if (!t) djs.unite(a, b);
    }
    long long ans = 0;
    vector<bool> vis(n, false);
    for (int i = 0; i < n; ++i) if (not vis[djs.f(i)]) {
      vis[djs.f(i)] = true;
      (ans += powM((long long) djs.compo[djs.f(i)].size(), k)) %= MOD;
    }
    cout << (powM(n, k) - ans + MOD) % MOD << '\n';
  }
};

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);
  Solution().run();
}
