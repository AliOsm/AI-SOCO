//void _(){
//    int n,m;
//    cin >> n >> m;
//    vl a(n),c(n);
//    cin >> a >> c;
//    vpii cheap_ordering;
//    for(int i = 0; i < n; ++i)
//        cheap_ordering.pb({c[i],i});
//    sort(all(cheap_ordering));
//    int l = 0;
//    while(m--){
//        ll t,d;
//        cin >> t >> d;
//        --t;
//        ll take = min(a[t],d);
//        ll cost = 0;
//        d -= take;
//        a[t] -= take;
//        cost += take*c[t];
//        while(d > 0){
//            if(l == n){
//                cost = 0;
//                break;
//            }
//            t = cheap_ordering[l].Y;
//            if(a[t] == 0){
//                ++l;
//                continue;
//            }
//            ll take = min(a[t],d);
//            d -= take;
//            a[t] -= take;
//            cost += take*c[t];
//        }
//        print(cost);
//    }
//}
//
#include <iomanip>
#include <algorithm>
#include <cassert>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define pb push_back
#define all(v) (v).begin(), (v).end()
#define Y second
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
template <typename F, typename S> static
ostream& operator<<(ostream& stream, const pair<F, S>& t){
    return stream << t.first << ' ' << t.second;
}
template <typename F, typename S> static
istream& operator>>(istream& stream, pair<F, S>& t){
    return stream >> t.first >> t.second;
}
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
T1 istream& operator>>(istream& stream, vector<T>& t){
    return read(all(t), stream);
}
T1 istream& read(T b, T e, istream& stream){
    for(T it = b; it != e; ++it)
        stream >> *it;
    return stream;
}
T1 void print(T x, string end = "\n"){
    cout << x << end;
}
T1 T min(const vector<T>& arr){
    assert(!arr.empty());
    T ans = arr[0];
    for(auto& cur : arr)
        ans = min(ans, cur);
    return ans;
}
T1 ostream& print(T b, T e, string sep = " ", ostream& stream = cout){
    for(T it = b; it != e; ++it){
        stream << *it;
        if(it + 1 != e)
            stream << sep;
    }
    return stream;
}
T1 ostream& operator<<(ostream& stream, const vector<T>& t){
    return print(all(t), " ", stream);
}
T1 void print(vector<T> arr, string sep = " "){
    if(arr.empty()){
        return;
    }
    print(arr.begin(), arr.end(), sep);
    cout << '\n';
}
void _(){
    int n,m;
    cin >> n >> m;
    vl a(n),c(n);
    cin >> a >> c;
    vpii cheap_ordering;
    for(int i = 0; i < n; ++i)
        cheap_ordering.pb({c[i],i});
    sort(all(cheap_ordering));
    int l = 0;
    while(m--){
        ll t,d;
        cin >> t >> d;
        --t;
        ll take = min(a[t],d);
        ll cost = 0;
        d -= take;
        a[t] -= take;
        cost += take*c[t];
        while(d > 0){
            if(l == n){
                cost = 0;
                break;
            }
            t = cheap_ordering[l].Y;
            if(a[t] == 0){
                ++l;
                continue;
            }
            ll take = min(a[t],d);
            d -= take;
            a[t] -= take;
            cost += take*c[t];
        }
        print(cost);
    }
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        _();
}
