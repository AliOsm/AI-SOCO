//#include "stdafx.h"
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <math.h>
#include <ctime>

using namespace std;

typedef long long ll;

const int NMax = 100001;
const int AMT = 262145;
const double eps = 1e-9;
const int MD = (int) 1e9 + 7;

#define Min(x,y) ((x) > (y) ? (y) : (x))
#define Max(x,y) ((x) > (y) ? (x) : (y))
#define Sqr(x) ((x) * (x))
#define Abs(x) ((x) < (0) ? (-(x)) : (x))

int t[21],a[NMax],b[NMax],t1[AMT],t2[AMT];
int cnt,n,m,num,x,y,k;

void push(int v)
{
	if (t1[v] != -1 && t2[v] != -1)
	{
		t1[2 * v + 1] = t1[2 * v] = t1[v];
		t2[2 * v + 1] = t2[2 * v] = t2[v];
		t1[v] = t2[v] = -1;
	}
}

void update(int v,int tl,int tr,int l,int r,int color1,int color2)
{
	if (l > r) return;
	if (l == tl && r == tr)
	{
		t1[v] = color1;
		t2[v] = color2;
		return; 
	}
	push(v);
	int tm = (tl + tr) / 2;
	update(v * 2,tl,tm,l,Min(r,tm),color1,color2);
	update(v * 2 + 1,tm + 1,tr,Max(l,tm + 1),r,color1,color2);
}

void get(int v,int tl,int tr,int &color1,int &color2,int pos)
{
	if (tl == tr)
	{
		color1 = t1[v];
		color2 = t2[v];
		return;
	}
	push(v);
	int tm = (tl + tr) / 2;
	if (pos <= tm) get(v * 2,tl,tm,color1,color2,pos);
	else get(v * 2 + 1,tm + 1,tr,color1,color2,pos);
}

		

int main()
{
	#ifndef ONLINE_JUDGE
      freopen("input.txt", "r", stdin);
      freopen("output.txt", "w", stdout);
	#endif
	cin >> n >> m;
	for (int i = 1;i <= n;i++) cin >> a[i];
	for (int i = 1;i <= n;i++) cin >> b[i];
	t[0] = 1;
	for (int i = 1;i <= 20;i++) t[i] = t[i - 1] * 2;
	for (int i = 20;i >= 1;--i)
		if (t[i] > n) cnt = t[i];
	for (int i = 1;i <= cnt * 2;i++) t1[i] = t2[i] = -1;
	for (int i = 1;i <= m;i++)
	{
		scanf("%i",&num);
		if (num == 1)
		{
			scanf("%i%i%i",&x,&y,&k);
			update(1,1,cnt,y,y + k - 1,x,y);
		}
		if (num == 2)
		{
			scanf("%i",&x);
			int cl1 = 0, cl2 = 0;
			get(1,1,cnt,cl1,cl2,x);
			if (cl1 == -1 && cl2 == -1) cout << b[x] << endl;
			else cout << a[x - cl2 + cl1] << endl;
		}
	}
	return 0;
}
   