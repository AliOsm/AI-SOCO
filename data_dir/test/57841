#include <bits/stdc++.h>
#include <stdio.h>
#include <cstdio>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
 
#define pb push_back
#define mp make_pair
#define sz(s) ((int)(s.size()))
#define all(s) s.begin(),s.end()
#define rep(i,a,n) for(int i=a;i<=n;++i)
#define per(i,n,a) for(int i=n;i>=a;--i)
#define dbg(x) cerr << (#x) << " --> " << (x) << nxtl;
#define onlycin ios_base::sync_with_stdio(false); cin.tie(0) 
using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef tree<
pair < int, int >,
null_type,
less< pair < int, int > >,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

const int MAXN = (int)5e5+228;
const char nxtl = '\n';
const int mod = (int)1e9+7;
const double eps = (double)1e-9;
template<typename T> inline bool updmin(T &a, const T &b) {return a > b ? a = b, 1 : 0;}
template<typename T> inline bool updmax(T &a, const T &b) {return a < b ? a = b, 1 : 0;}

int n;
char s[22][22];
vector < int > v[50];
int go[50][50];
vector < int > dp[50], gomsk[50];

inline void upd(int &x, int row, int val, bool isA, bool isB) {
	if(row&1) {
		if(x == 100) x = val+isA-isB;
		else updmax(x,val+isA-isB);
	} else {
		if(x == 100) x = val-isB+isA;
		else updmin(x,val-isB+isA);
	}
}
int out(int ans) {
	if(ans > 0) cout << "FIRST\n";
	else if(ans < 0) cout << "SECOND\n";
	else cout << "DRAW\n";
	return 0;
}
int pos[22][22];

int main() {
	#ifdef accepted
		freopen(".in", "r", stdin);
		freopen(".out", "w", stdout);
	#endif
	onlycin;
	cin >> n;
	rep(i,0,n-1) rep(j,0,n-1) cin >> s[i][j];
	rep(i,0,n-1) {
		rep(j,0,n-1) {
			pos[i][j] = sz(v[i+j+1]);
			v[i+j+1].pb(i);
		}
	}
	rep(i,1,n+n-2) {
		rep(alpha,0,25) {
			rep(pos,0,sz(v[i+1])-1) {
				int to = v[i+1][pos];
				if(s[to][i-to]-'a' == alpha) go[i][alpha] |= (1<<pos);
			}
		}
	}
	rep(i,1,n+n-1) {
		dp[i].resize(1<<sz(v[i]));
		gomsk[i].resize(1<<sz(v[i]));
		rep(msk,0,(1<<sz(v[i]))-1) {
			dp[i][msk] = 100;
			if(i == n+n-1) continue;
			rep(position,0,sz(v[i])-1) {
				if((1<<position)&msk) {
					if(v[i][position]+1 < n) gomsk[i][msk] |= (1<<pos[v[i][position]+1][i-v[i][position]-1]);
					if(i-v[i][position] < n) gomsk[i][msk] |= (1<<pos[v[i][position]][i-v[i][position]]);
				}
			}
		}
	}
	dp[n+n-1][1] = 0;
	per(i,n+n-2,1) {
		rep(msk,1,(1<<sz(v[i]))-1) {
			rep(alpha,0,25) {
				int nxt = (go[i][alpha] & gomsk[i][msk]);
				if(nxt)
					upd(dp[i][msk],i+1,dp[i+1][nxt],!alpha, alpha==1);
			}
		}
	}
	dp[1][1] += (s[0][0] == 'a') - (s[0][0] == 'b');
	cerr << dp[1][1] << nxtl;
	return out(dp[1][1]);

	return 0;
}
