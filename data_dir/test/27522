/**
 * Dont raise your voice, improve your argument.
 * --Desmond Tutu
 */

#include <bits/stdc++.h>
using namespace std;

const double PI = acos(-1);
typedef long long ll;
#define int ll
#define fori(n) for(int i=0; i<int(n); i++)

#define cins(s) string s; cin>>s;
#define cini(i) int i; cin>>i;
#define cind(d) double d; cin>>d;
#define cinai(a, n) vi a(n); fori(n) { cin>>a[i]; }
#define cinas(s, n) vs s(n); fori(n) { cin>>s[i]; }
#define cinad(a, n) vd a(n); fori(n) { cin>>a[i]; }

typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<double> vd;
typedef vector<bool> vb;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<string> vs;

vector<vector<pii>> rotLeft(vector<vector<pii>> &m) {
    auto ans=vector<vector<pii>>(m[0].size(), vector<pii>(m.size()));

    for(int i=0; i<m.size(); i++)
        for(int j=0; j<m[0].size(); j++) {
            ans[m[0].size()-1-j][i]=m[i][j];
        }
    return ans;
}

/* cannot simulate the transformations since matrix to big, 
 * so calc or every query.
 */
void solve() {
    cini(n);
    cini(m);
    cini(x);
    cini(y);
    cini(z);
    cini(p);

    for(int k=0; k<p; k++) {
        cini(i);
        cini(j);
        i--;
        j--;

        int nn=n;
        int mm=m;

        for(int u=0; u<(4-(x%4))%4; u++) {
            int jrot=i;
            int irot=mm-1-j;
            j=jrot;
            i=irot;
            swap(nn,mm);
        }
        
        if(y&1) {
            j=mm-1-j;
        }

        for(int u=0; u<z%4; u++) {
            int jrot=i;
            int irot=mm-1-j;
            j=jrot;
            i=irot;
            swap(nn,mm);
        }
        cout<<i+1<<" "<<j+1<<endl;
    }
}

signed main() {
    cin.tie(nullptr);
    std::ios::sync_with_stdio(false);
    solve();
}

