//
//  main.cpp
//  Problem
//
//  Created by Юрий Бондарчук on 23.11.15.
//  Copyright © 2015 Юрий Бондарчук. All rights reserved.
//

#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <utility>
#include <cstring>
#include <memory.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define F first
#define S second

const int N = 100500;

int n, m;
int a[N];
int cnt[N];
long long was[N];
vector<int> have[N];

void addEdge(int a, int b) {
    was[a] += (1LL * abs(a - b));
    if (a != b) have[a].pb(b);
}

long long get(int x) {
    long long res = (long long)1e18;
    int pl = 0;
    int pr = (int)have[x].size();
    long long sumRight = 0LL;
    long long sumLeft = 0LL;
    for (size_t i = 0; i < have[x].size(); i++) {
        sumRight += (1LL * have[x][i]);
    }
    for (size_t i = 0; i < have[x].size(); i++) {
        --pr;
        sumRight -= (1LL * have[x][i]);
        res = min(res, 1LL * pl * have[x][i] - sumLeft + sumRight - 1LL * pr * have[x][i]);
        ++pl;
        sumLeft += (1LL * have[x][i]);
    }
    return res;
}
                                

int main() {
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= m; i++) scanf("%d", &a[i]);
    long long res = 0LL;
    for (int i = 2; i <= m; i++) {
        res += (1LL * abs(a[i] - a[i - 1]));
    }
    for (int i = 2; i <= m; i++) {
        addEdge(a[i - 1], a[i]);
        addEdge(a[i], a[i - 1]);
    }
    long long mainRes = res;
    for (int i = 1; i <= n; i++) {
        sort(have[i].begin(), have[i].end());
        res = min(res, mainRes - was[i] + get(i));
    }
    cout << res << endl;
    return 0;
}