#include<bits/stdc++.h>
using namespace std;

#define SQR(n) (n*n)
#define CHR getchar()
#define NL printf("\n")
#define PI 2.0*acos(0.0)
typedef long long LL ;
typedef unsigned long long ULL ;

#define ff first
#define D double
#define sz size()
#define ss second
#define PB push_back
#define MP make_pair
#define all(a) a.begin(),a.end()

#define InpOut freopen("A.in","r",stdin),freopen("A1.out","w",stdout)
#define _cin ios_base::sync_with_stdio(0); cin.tie(0)
#define cp printf("***** here here here here *****\n");


#define S1(a) a=in<int>()
#define SL1(a) a=in<LL>()
#define S2(a,b) a=in<int>(),b=in<int>()
#define SL2(a,b) a=in<LL>(),b=in<LL>()
#define S3(a,b,c) a=in<int>(),b=in<int>(),c=in<int>()
#define SL3(a,b,c) a=in<LL>(),b=in<LL>(),c=in<LL>()
#define F(i,a,b) for(i=a;i<b; i++)
#define R(i,a,b) for(i=a-1;i>=b; i--)


#define Max(a,b) ((a>b)?a:b)
#define Min(a,b) ((a<b)?a:b)

#define _Max(a,b,c) Max(a,Max(b,c))
#define _Min(a,b,c) Min(a,Min(b,c))

#define BitCnt(a) __builtin_popcountll(a)
#define MEM(a,val) memset(a,val,sizeof(a))


template <typename T> T in(){char ch;T n = 0;bool ng = false;while (1){ch = getchar();if (ch == '-'){ng = true;ch = getchar();break;}if (ch>='0' && ch<='9')     break;}while (1){n = n*10 + (ch - '0');ch = getchar();if (ch<'0' || ch>'9')   break;}return (ng?-n:n);}
template<typename T>inline T POW(T B,T P){ if(P==0) return 1; if(P&1) return B*POW(B,P-1);  else return SQR(POW(B,P/2));}
template<typename T>inline T Gcd(T a,T b){if(a<0)return Gcd(-a,b);if(b<0)return Gcd(a,-b);return (b==0)?a:Gcd(b,a%b);}
template<typename T>inline T Lcm(T a,T b) {if(a<0)return Lcm(-a,b);if(b<0)return Lcm(a,-b);return a*(b/Gcd(a,b));}
long long Bigmod(long long base, long long power, long long MOD){long long ret=1;while(power){if(power & 1)ret=(ret*base)%MOD;base=(base*base)%MOD;power>>=1;}return ret;}
bool isVowel(char ch){ ch=toupper(ch); if(ch=='A'||ch=='U'||ch=='I'||ch=='O'||ch=='E') return true; return false;}
template <typename T> LL isLeft(T a,T b,T c) {return(a.x-b.x)*(b.y-c.y)-(b.x-c.x)*(a.y-b.y);}
long long ModInverse(long long number, long long MOD){return Bigmod(number, MOD-2, MOD);}
bool isConst(char ch){if (isalpha(ch) && !isVowel(ch)) return true; return false;}
int toInt(string s)  { int sm; stringstream ss(s); ss>>sm; return sm; }
bool isPrime( LL val )
{
    if( val == 2 )
        return true ;
    if( val % 2 == 0 || val == 1 )
        return false ;
    LL sqrt_N = (LL) ( ( double ) sqrt( val ) ) ;
    for( LL i = 3 ; i <= sqrt_N ; i += 2 ) { if( val % i == 0 ) return false ; } return true ; }


#define MD1 1000000007ULL
#define MD2 1000000009ULL
#define MD3 1000000021ULL
#define BS1 10000019ULL
#define BS2 10000079ULL
#define BS3 10000103ULL
#define PUL pair<ULL,ULL>
#define PLL pair<LL,LL>
#define PII pair<int,int>
#define lchild lft,l,mid
#define rchild rgt,mid+1,r
#define ngood r<st||l>ed
#define good st<=l&&ed>=r
#define seg int mid=(l+r)/2,lft=2*id,rgt=lft+1
#define MX 200005
#define MOD 1000000007
#define INF 2000000000000000LL
#define EPS 1e-9

// Month
map<string , LL>month ;
void Month() { month["January"] = 1 , month["February"] = 2 , month["March"] = 3 , month["April"] = 4 , month["May"] = 5 , month["June"] = 6 ; month["July"] = 7 , month["August"] = 8 , month["September"] = 9 , month["October"] = 10 , month["November"] = 11 , month["December"] = 12 ; }

/**.................................... Code starts Here .......................................**/

bool prm[5000007];
LL N= 5000007;

void sieve()
{
    prm[0] = 1 ;
    for( LL i = 2 ; i <= N ; i ++ )
        prm[i] = 0 ;
    for( LL i = 3 ; i * i <= N ; i += 2 )
    {
        if( prm[i >> 1] == 0 )
        {
            for( LL j = i * i ; j <= N ; j += ( i << 1 ) )
            {
                prm[ j >> 1 ] = 1 ;
            }
        }
    }
}

string s , S[55] ;
vector<string>V[55] , V1 ;
map<string,LL>ma[55] ;

LL n , X ;

int main()
{
    LL t , i , k , j ;

    SL1( n ) ;

    F( k , 1 , n + 1 )
    {
        cin >> s ;
        S[k] = s ;
        LL d = s.size() ;
        F( j , 0 , d )
        {
            string ss = "" ;
            F( i , j , d )
            {
                ss += s[i] ;
            }
            F( i , 0 , j )
            {
                ss += s[i] ;
            }
            if( ma[k][ss] == 0 )
                V[k].PB( ss ) ;
            if( ma[k][ss] == 0 )
            {
                ma[k][ss] = j + 1 ;
            }
            ma[k][ss] = min( ma[k][ss] , j + 1 ) ;
        }
    }
    LL d = V[1].size() ;
    F( i , 0 , d )
    {
        V1.PB( V[1][i] ) ;
    }
    F( k , 2 , n + 1 )
    {
        LL d1 = V1.size() ;
        vector<string>tmp ;
        F( i , 0 , d )
        {
            F( j , 0 , d1 )
            {
                if( V[k][i] == V1[j] )
                {
                    tmp.PB( V1[j] ) ;
                }
            }
        }
        LL f = tmp.size() ;
        V1.clear() ;
        F( i , 0 , f )
        {
            V1.PB( tmp[i] ) ;
        }
    }
    d = V1.size() ;
    LL res = LLONG_MAX ;
    if( d > 0 )
    {
        F( k , 0 , d )
        {
            LL tot = 0 ;
            F( i , 1 , n + 1 )
            {
                tot += ( ma[i][V1[k]] - 1 ) ;
            }
            res = min( tot , res ) ;
        }
        printf("%lld\n",res) ;
    }
    else
    {
        puts("-1") ;
    }

    return 0;
}
