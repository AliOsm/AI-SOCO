#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int N = 20, MOD = 1000 * 1000 * 1000 + 7;

ll n, k, a, b, c;

int sum(int a, int b) {
	a += b;
	if(a < 0)
		a += MOD;
	else if(a >= MOD)
		a -= MOD;
	return a;
}

int mul(int a, int b) {
	return 1LL * a * b % MOD;
}

struct mat {
	int a[N][N];
	mat() {
		memset(a, 0, sizeof a);
	}
	int* operator[](int row) {
		return a[row];
	}
	mat operator*(mat b) {
		mat res;
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				for (int k = 0; k < N; k++)
					res[i][j] = sum(res[i][j], mul(a[i][k], b[k][j]));
		return res;
	}
} dp;

mat power(mat a, ll x) {
	mat res;
	for (int i = 0; i < N; i++)
		res[i][i] = 1;
	while(x) {
		if(x & 1)
			res = res * a;
		a = a * a;
		x >>= 1;
	}
	return res;
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	dp[0][0] = 1;
	cin >> n >> k;
	for (int i = 0; i < n; i++) {
		cin >> a >> b >> c;
		b = min(b, k);
		mat upd;
		for (int j = 0; j <= c; j++)
			for (int y = j - 1; y <= j + 1; y++)
				if(0 <= y && y <= c)
					upd[j][y] = 1;
		dp = dp * power(upd, b - a);
	}
	
	cout << dp[0][0];
	return 0;
}
