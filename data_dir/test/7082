#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <string>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <fstream>
#include <cassert>
#include <cstring>
#include <unordered_set>
#include <unordered_map>
#include <numeric>
#include <ctime>
#include <bitset>
#include <complex>
#include <random>

using namespace std;

#define int long long
const int N = 1e5 + 7;

int hv[N];
int mf[N];
int cnt[N];
int cdiv[N];
vector<int> divs[N];

void init() {
    auto gm = [](int x) {
        int cnt = 0;
        int wx = x;
        for (int i = 2; i * i <= wx; i++) {
            int r = 0;
            while (x % i == 0) {
                cnt++;
                r++;
                x /= i;
            }
            if (r > 1) return 0;
        }
        if (x > 1) cnt++;
        if (cnt % 2 == 0) {
            return 1;
        } else {
            return -1;
        }
    };
    for (int i = 1; i < N; i++) {
        mf[i] = gm(i);
        cnt[i] = 0;
        cdiv[i] = 0;
        hv[i] = 0;
        divs[i].clear();
    }
    for (int i = 1; i < N; i++) {
        for (int j = i; j < N; j += i) {
            divs[j].push_back(i);
        }
    }
}

int solve(vector<int> a) {
    reverse(a.begin(), a.end());
    if (a.empty()) return 0;
    int ans = a.back();
    auto relax = [&](int i, int j) {
        if (gcd(i, j) == 1) {
            ans = max(ans, i * j);
        }
    };

    int cur_predict = 0;

    auto predictor_init = [&](int x) {
        cur_predict = 0;
        for (auto t : divs[x]) {
            cdiv[t] = 1;
            cur_predict += (cdiv[t] * mf[t] * cnt[t]);
        }
    };
    auto predictor_reinit = [&](int x) {
        for (auto t : divs[x]) {
            cdiv[t] = 0;
        }
    };
    auto predict_comprimes = [&]() {
        return cur_predict;
    };
    auto del = [&](int x) {
        for (auto t : divs[x]) {
            cur_predict -= (cdiv[t] * mf[t] * cnt[t]);
            cnt[t]--;
            cur_predict += (cdiv[t] * mf[t] * cnt[t]);
        }
    };
    auto add = [&](int x) {
        for (auto t : divs[x]) {
            cur_predict -= (cdiv[t] * mf[t] * cnt[t]);
            cnt[t]++;
            cur_predict += (cdiv[t] * mf[t] * cnt[t]);
        }
    };
    vector<int> real_stack;
    for (auto t : a) {
        predictor_init(t);
        while (predict_comprimes()) {
            relax(real_stack.back(), t);
            del(real_stack.back());
            real_stack.pop_back();
        }
        add(t);
        real_stack.push_back(t);
        predictor_reinit(t);
    }
    for (auto t : real_stack) {
        del(t);
    }
    return ans;
} 

int run(vector<int> a) {
    init();
    for (auto t : a) {
        hv[t] = 1;
    }
    int ans = -1;
    for (int g = 1; g < N; g++) {
        vector<int> na;
        for (int i = g; i < N; i += g) {
            if (hv[i]) na.push_back(i / g);
        }
        ans = max(ans, solve(na) * g);
    }
    return ans;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    init();
    {
        int n;
        cin >> n;
        vector<int> a(n);
        for (auto &t : a) {
            cin >> t;
        }
        cout << run(a) << '\n';
    }
}   
