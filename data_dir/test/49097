#include <bits/stdc++.h>

using namespace std;

#define out(x) cerr << #x"=" << x << endl

const int N = 1e5 + 10;
const int B = 1e9 + 7;

int n, k;
char s[N];
int a[N];
long long d[N];
long long dd[N];
long long pw[N];
long long fac[N];
long long invf[N];

long long mypow(long long a, long long n) {
  if (n == 0) return 1;
  if (n & 1) return a * mypow(a, n - 1) % B;
  return mypow(a * a % B, n >> 1);
}

long long C(int n, int k) {
  if (k > n || k < 0) {
    return 0;
  }
  return fac[n] * invf[k] % B * invf[n - k] % B;
}

int main() {
  scanf("%d%d", &n, &k);
  scanf("%s", s + 1);
  pw[0] = 1;
  for (int i = 1; i <= n; ++i) {
    pw[i] = pw[i - 1] * 10 % B;
  }
  fac[0] = 1;
  for (int i = 1; i <= n; ++i) {
    fac[i] = fac[i - 1] * i % B;
  }
  for (int i = 0; i <= n; ++i) {
    invf[i] = mypow(fac[i], B - 2);
  }
  for (int i = 1; i <= n; ++i) {
    a[i] = s[i] - '0';
  }
  for (int i = 1; i <= n; ++i) {
    d[i] = (d[i - 1] * 10 + a[i]) % B;
  }
  for (int i = 1; i <= n; ++i) {
    dd[i] = (dd[i - 1] + d[i]) % B;
  }
  if (k == 0) {
    printf("%I64d\n", d[n]);
    return 0;
  }
  if (k == 1) {
    long long ans = 0;
    for (int i = 1; i <= n - 1; ++i) {
      ans = (ans + d[i]) % B;
    }
    for (int i = 1; i <= n - 1; ++i) {
      ans = (ans + d[n] - d[i] * pw[n - i] % B + B) % B;
    }
    printf("%I64d\n", ans);
    return 0;
  }
  long long ans = 0;
  for (int i = 1; i <= n; ++i) {
    ans = (ans + d[i] * C(n - i - 1, k - 1) % B) % B;
  }
  for (int i = 1; i <= n - 1; ++i) {
    ans = (ans + (d[n] - d[i] * pw[n - i] % B + B) % B * C(i - 1, k - 1) % B) % B;
  }
  for (int i = 1; i <= n; ++i) {
    //      d[n - 1] - d[n - i - 1]
    //      d(i + 1) - d[1]
    ans = (ans + (dd[n - 1] - dd[i] + B - (dd[n - 1 - i] - dd[0] + B) % B * pw[i] % B + B) % B * C(n - i - 2, k - 2) % B) % B;
    //      (d[j + i - 1] - d[j] * pw[i] % B + B) % B
  }
  printf("%I64d\n", ans);
  return 0;
}
