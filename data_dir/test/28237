#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <assert.h>
#include <fstream>
#include <iomanip>
#include <bitset>
#include <string>
#include <cstdio>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>
#include <map>

using namespace std;

const int N = 101;

int n, m, k;
int dx[3] = { 1, 0, 0};
int dy[3] = {0, 1, 0};
int dz[3] = {0, 0, 1};
vector < int > G2[N][N][N];
bool a[N][N][N];
int step;
int used[N][N][N];

bool check(int x, int y, int z)
{
	if (x < 0 || x >= n)
		return false;
	if (y < 0 || y >= m)
		return false;
	if (z < 0 || z >= k)
		return false;
	if (a[x][y][z] == false)
		return false;
	return true;
}

void dfs(int x, int y, int z, int c)
{
	used[x][y][z] = step;
	if (c == 0)
		return;
	for (int i = 0; i < 3; ++i)
	{
		if (check(x + dx[i], y + dy[i], z + dz[i]) == true && used[x + dx[i]][y + dy[i]][z + dz[i]] != step)
			dfs(x + dx[i], y + dy[i], z + dz[i], c - 1);
	}
}

int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
	scanf("%d%d%d\n", &n, &m, &k);
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < m; ++j)
		{
			for (int c = 0; c < k; ++c)
			{
				char ch; scanf("%c", &ch);
				a[i][j][c] = (ch == '0' ? 0 : 1);

			}
			scanf("\n");
		}
		scanf("\n");
	}
	memset(used, -1, sizeof(used));
	int ans = 0;
	step = 0;
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < m; ++j)
		{
			for (int c = 0; c < k; ++c)
			{
				if (a[i][j][c] == false)
					continue;
				int ok = false;
				for (int j1 = 0; j1 < 3; ++j1)
				{
					if (check(i - dx[j1], j - dy[j1], c - dz[j1]) == false)
						continue;
					for (int j2 = 0; j2 < 3; ++j2)
					{
						if (check(i + dx[j2], j + dy[j2], c + dz[j2]) == true)
						{
							used[i][j][c] = step;
							dfs(i - dx[j1], j - dy[j1], c - dz[j1], 2);
							used[i][j][c] = 0;
							if (used[i + dx[j2]][j + dy[j2]][c + dz[j2]] != step && ok == false)
							{
								ans++;
								ok = true;
							}
							step++;
						}
					}
				}
			}
		}
	}
	cout << ans << endl;
    return 0;
}