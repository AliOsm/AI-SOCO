#include <iostream>
#include <set>
#include <vector>
using namespace std;

long long dp[5000][5001][2];
int n, b;
vector<int> g[5000];
int c[5000];
int d[5000];
long long INF = 1LL << 60;
int sz[5000];

void dfs(int v) {
	sz[v] = 1;
	dp[v][0][0] = 0;
	dp[v][1][0] = c[v];
	dp[v][1][1] = c[v] - d[v];
	for (int to : g[v]) {
		dfs(to);
		for (int j = sz[v]; j >= 0; j--) {
			for (int k = 0; k <= sz[to]; k++) {
				dp[v][j + k][0] = min(dp[v][j + k][0], dp[v][j][0] + dp[to][k][0]);
				dp[v][j + k][1] = min(dp[v][j + k][1], dp[v][j][1] + dp[to][k][1]);
				dp[v][j + k][1] = min(dp[v][j + k][1], dp[v][j][1] + dp[to][k][0]);
			}
		}
		sz[v] += sz[to];
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	cin >> n >> b;
	for (int i = 0; i < n; i++) {
		cin >> c[i] >> d[i];
		if (i != 0) {
			int p;
			cin >> p;
			p--;
			g[p].push_back(i);
		}
	}
	
	for (int i = 0; i < n; i++) {
		for (int j = 0; j <= n; j++) {
			for (int k = 0; k < 2; k++) {
				dp[i][j][k] = INF;
			}
		}
	}
	
	dfs(0);
	int curr = n;
	
	//cout << dp[0][6][1] << endl;
	while (curr > 0 && min(dp[0][curr][0], dp[0][curr][1]) > b) curr--;
	cout << curr;
	
	return 0;
}