#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const int N = 5e5 + 5;
int arr[N], mn_l[N], mn_r[N], out[N], n;
ll dp1[N], dp2[N];

ll solve_l(int idx)
{
	if(idx < 0)
		return 0;
	ll &ans = dp1[idx];
	if(~ans)
		return ans;
	ans = 0;
	int len;
	if(mn_l[idx] == -1)
		len = idx + 1;
	else
		len = idx - mn_l[idx];
	return ans = 1ll * len * arr[idx] + solve_l(mn_l[idx]);
}


ll solve_r(int idx)
{
	if(idx < 0)
		return 0;
	ll &ans = dp2[idx];
	if(~ans)
		return ans;
	ans = 0;
	int len;
	if(mn_r[idx] == -1)
		len = n - idx;
	else
		len = mn_r[idx] - idx;
	return ans = 1ll * len * arr[idx] + solve_r(mn_r[idx]);
}

void output_l(int idx)
{
	if(idx < 0)
		return;
	int nxt = -1;
	for(int i = idx; i >= 0; i--)
	{
		if(arr[i] < arr[idx]){
			nxt = i;
			break;
		}
		out[i] = arr[idx];
	}
	output_l(nxt);
}

void output_r(int idx)
{
	if(idx < 0)
		return;
	int nxt = -1;
	for(int i = idx; i < n; i++)
	{
		if(arr[i] < arr[idx]){
			nxt = i;
			break;
		}
		out[i] = arr[idx];
	}
	output_r(nxt);
}

int main()
{
	ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
	cin >> n;
	for(int i = 0; i < n; i++)
	{
		cin >> arr[i];
	}
	stack<int> st;
	for(int i = 0; i < n; i++)
	{
		while(st.size() && arr[st.top()] > arr[i])
			st.pop();
		if(st.size())
			mn_l[i] = st.top();
		else
			mn_l[i] = -1;
		st.push(i);
	}
	while(st.size())
		st.pop();
	for(int i = n - 1; i >= 0; i--)
	{
		while(st.size() && arr[st.top()] > arr[i])
			st.pop();
		if(st.size())
			mn_r[i] = st.top();
		else
			mn_r[i] = -1;
		st.push(i);
	}
	memset(dp1, -1, sizeof dp1);
	memset(dp2, -1, sizeof dp2);
	ll sol = 0;
	for(int i = 0; i < n; i++)
	{
		sol = max(sol, solve_l(i) + solve_r(i) - arr[i]);
	}
	for(int i = 0; i < n; i++)
	{
		if(solve_l(i) + solve_r(i) - arr[i] == sol)
		{
			output_l(i);
			output_r(i);
			break;
		}
	}
	for(int i = 0; i < n; i++)
		cout << out[i] << ' ';
	return 0;
}
