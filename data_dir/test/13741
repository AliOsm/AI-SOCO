#include <iostream>
#include <utility>
#include <algorithm>
#include <cmath>
#include <algorithm>
#include <vector>
#include <cstring>
#include <math.h>
#include <map>
#include <vector>
#include <iomanip>
#include <set>
#include <deque>
#define ss second
#define ff first
#define use_fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define ret(n) return cout << n, 0
#define se(n) cout << setprecision(n) << fixed
#define ll long long
#define pb push_back
using namespace std;

const int N = 1e6 + 100, PI = 3.14159265359, M = 1e9 + 7;
typedef pair <ll, ll> pii;
map <ll, ll> m;
map <string, bool> mark;
map <string, vector <string> > v;
ll ans = 0;

void dfs(string s, ll sum) {
	mark[s] = true;
	ans = max(ans, sum);
	for(int i = 0; i < v[s].size(); i++)
		if(!mark[v[s][i]])  {
			dfs(v[s][i], sum + 1);
		}
}

int main() {
	use_fast;
	ll n;
	cin >> n;
	for(int i = 0; i < n; i++) {
		string s1, s2, s3;
		cin >> s1 >> s2 >> s3;
		for(int i = 0; i < s1.size(); i++) 
			if(s1[i] >= 'A' && s1[i] <= 'Z')
				s1[i] = s1[i] - 'A' + 'a';
		for(int i = 0; i < s3.size(); i++) 
			if(s3[i] >= 'A' && s3[i] <= 'Z')
				s3[i] = s3[i] - 'A' + 'a';
		v[s1].pb(s3); 
		v[s3].pb(s1);
	}
	dfs("polycarp", 1);
	cout << ans;
}
