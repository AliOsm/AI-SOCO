#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int MAX = 5e3 + 5;
const ll INF = 0x3F3F3F3F3F3F3F3F;
vector<int> adj[MAX];
int p[MAX], size[MAX], c[MAX], d[MAX];
ll dp[MAX][MAX][2];
int n, b;

void dfs(int source) {
	size[source] = 1;
	dp[source][0][0] = 0;
	dp[source][1][0] = c[source];
	dp[source][1][1] = c[source] - d[source];

	for(auto &each : adj[source]) {
		dfs(each);
		ford(i, size[source], 0) {
			fori(j, 1, size[each] + 1) {
				dp[source][i + j][0] = min(dp[source][i + j][0], dp[source][i][0] + dp[each][j][0]);
				dp[source][i + j][1] = min(dp[source][i + j][1], dp[source][i][1] + dp[each][j][0]);
				dp[source][i + j][1] = min(dp[source][i + j][1], dp[source][i][1] + dp[each][j][1]);
			}
		}
		size[source] += size[each];
	}
}

int main() {
	scanf("%d %d", &n, &b);
	fori(i, 1, n + 1) {
		scanf("%d %d", c + i, d + i);
		if(i >= 2) {
			scanf("%d", p + i);
			adj[p[i]].push_back(i);
		}
	}

	memset(dp, 0x3F, sizeof dp);
	dfs(1);

	int best = 0;
	fori(i, 1, n + 1) {
		if(dp[1][i][0] <= b || dp[1][i][1] <= b) {
			best = i;
		}
	}	

	printf("%d\n", best);

	return 0;
}

