/*
ID: hepic
PROG: sabotage
LANG: C++11
*/
#include <bits/stdc++.h>

#define FOR(i, a, b) for(auto i=a; i<=b; ++i)
#define REP(i, a, b) for(auto i=a; i<b; ++i)
#define FORI(i, a, b) for(auto i=a; i!=b+1-2*(a>b); i+=1-2*(a>b))
#define REPI(i, a, b) for(auto i=a-(a>b); i!=b-(a>b); i+=1-2*(a>b))
#define ALL(v) v.begin(),v.end()
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define pf(a) push_front(a)
#define eb(a, b) emplace_back(a, b)
#define fir first
#define sec second
#define what_is(x) cout<<#x<<" is "<<x<<endl;
#define type(x) typeid(x).name()
#define ms(arr, val) memset(arr, val, sizeof(arr))
#define min3(a,b,c) min(min(a,b),c)
#define max3(a,b,c) max(max(a,b),c)
#define PI acos(-1)
#define open_read freopen("disrupt.in", "r", stdin)
#define open_write freopen("disrupt.out", "w", stdout)

using namespace std;

typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair<double, double> PDD;
typedef pair<int, int> PII;
typedef pair<int, PII> PIPII;
typedef pair<PII, PII> PPIIPII;
typedef pair<LL, LL> PLL;
typedef pair<ULL, ULL> PUU;
typedef pair<LL, PLL> PLPLL;
typedef pair<PLL, PLL> PPLLPLL;
typedef pair<int, LL> PIL;
typedef pair<LL, int> PLI;


template<typename T, typename T1>
ostream& operator << (ostream &out, pair<T, T1> obj) {
    out << "(" << obj.first << ", " << obj.second << ")";
    return out;
}


template<typename T, typename T1>
ostream& operator << (ostream &out, map<T, T1> cont) {
    typename map<T, T1>::const_iterator itr = cont.begin();
    typename map<T, T1>::const_iterator ends = cont.end();

    for(; itr != ends; ++itr) {
        out << *itr << " ";
    }

    out<<endl;
    return out;
}


template<typename T>
ostream& operator << (ostream &out, set<T> cont) {
    typename set<T>::const_iterator itr = cont.begin();
    typename set<T>::const_iterator ends = cont.end();
    
    for(; itr != ends; ++itr) {
        out << *itr << " ";
    }

    out << endl;
    return out;
}


template<typename T>
ostream& operator << (ostream &out, multiset<T> cont) {
    typename multiset<T>::const_iterator itr = cont.begin();
    typename multiset<T>::const_iterator ends = cont.end();

    for (; itr != ends; ++itr) {
        out << *itr << " ";
    }

    out << endl;
    return out;
}


template<typename T, template<typename ELEM, typename ALLOC=allocator<ELEM>> class CONT>
ostream& operator << (ostream &out, CONT<T> cont) {
    typename CONT<T>::const_iterator itr = cont.begin();
    typename CONT<T>::const_iterator ends = cont.end();

    for (; itr != ends; ++itr) {
        out << *itr << " ";
    }

    out << endl;
    return out;
}


template<typename T, unsigned int N, typename CTy, typename CTr>
typename enable_if<!is_same<T, char>::value, basic_ostream<CTy, CTr> &>::type
operator << (basic_ostream<CTy, CTr> &out, const T (&arr)[N]) {
    REP (i, 0, N) {
        out << arr[i] << " ";
    }

    out << endl;
    return out;
}


template<typename T>
T GCD(T a, T b) {
    T min_v = min(a, b);
    T max_v = max(a, b);

    while (min_v) {
        T temp = max_v % min_v;
        max_v = min_v;
        min_v = temp;
    }

    return max_v;
}


template<typename T>
T LCM(T a, T b) {
    return (a*b) / gcd(a, b);
}


template<typename T>
T fastExpPow(T base, T exp, T mod) {
    T res = 1;

    while (exp) {
        if (exp&1) {
            res *= base;
            res %= mod;
        }

        exp >>= 1;
        base *= base;
        base %= mod;
    }

    return res % mod;
}

/*#################################################################################################################
###################################################################################################################
###################################################################################################################
#################################################################################################################*/

#define SIZE 100010

int N;
int inDegree[5];
char result[3 * SIZE];
vector<int> graph[5], order;
string S, T;


void topSort() {
    stack<int> stc;

    REP (i, 0, 3) {
        if (inDegree[i] == 0) {
            stc.push(i);
        }
    }

    while (!stc.empty()) {
        int node = stc.top();
        stc.pop();

        order.pb(node);
        
        for (auto connNode: graph[node]) {
            if (--inDegree[connNode] == 0) {
                stc.push(connNode);
            }
        }
    }
    
    reverse(ALL(order));
}


int main() {
    scanf("%d", &N);
    cin >> S >> T;
    
    graph[S[0] - 'a'].pb(S[1] - 'a');
    graph[T[0] - 'a'].pb(T[1] - 'a');
    
    ++inDegree[S[1] - 'a'];
    ++inDegree[T[1] - 'a'];

    topSort();
    printf("YES\n");
    
    if (order.size() == 3) {
        for (auto elem: order) {
            REP (i, 0, N) {
                printf("%c", elem + 'a');
            }
        }

        printf("\n");
        return 0;
    } else if (S[0] == S[1] && T[0] == T[1]) {
        char ch1 = S[0];
        char ch2 = T[0];
        
        if (ch1 == ch2) {
            ch2 = ((ch2 - 'a' + 1) % 3) + 'a';
        }

        char ch3 = 'a' + 'b' + 'c' - ch1 - ch2;

        for (int i = 0; i < 3 * N; i += 3) {
            result[i] = ch1;
            result[i + 1] = ch3;
            result[i + 2] = ch2;
        }
    } else {
        if (T[0] == T[1]) {
            swap(S[0], T[0]);
            swap(S[1], T[1]);
        }

        char ch1 = S[0];
        char ch2 = T[0];
        
        if (ch1 == ch2) {
            ch2 = T[1];
        }

        char ch3 = 'a' + 'b' + 'c' - ch1 - ch2;

        for (int i = 0; i < 2 * N; i += 2) {
            result[i] = ch1;
            result[i + 1] = ch3;
        }
        
        REP (i, 2 * N, 3 * N) {
            result[i] = ch2;
        }
    }
    
    REP (i, 0, 3 * N) {
        printf("%c", result[i]);
    }

    printf("\n");
    return 0;
}
