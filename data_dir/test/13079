#include<bits/stdc++.h>
using namespace std;

const int MAX_N = 2e5 + 10, MAX_K = 20;

int n, a[MAX_N];
long long sum[MAX_N], dp[MAX_N], max_dp[MAX_N];

int get_sum(int l, int r) {
    return sum[r] - (l ?  sum[l - 1] : 0);
}

struct node {
    int lv, rv;
    long long max_val = -1e18;
    node *left = NULL, *right = NULL;

    node(int l, int r) : lv(l), rv(r) {
        if (l < r) {
            int m = (l + r) / 2;
            left = new node(l, m);
            right = new node(m + 1, r);
        }
    }

    void update(int p, long long n_val) {
        if (p < lv || rv < p) {
            return;
        }

        max_val = max(max_val, n_val);

        if (lv != rv) {
            left->update(p, n_val);
            right->update(p, n_val);
        }
    }

    long long get(int l, int r) {
        if (r < lv || rv < l) {
            return -1e18;
        }

        if (l <= lv && rv <= r) {
            return max_val;
        }

        return max(left->get(l, r), right->get(l, r));
    }
} *rmq;

long long f(int i) {
    if (i >= n - 1) {
        return 0;
    }

    long long res = sum[n - 1];
    res = max(res, rmq->get(i + 1, n - 1));
    rmq->update(i, sum[i] - res);

    /*for (int j = i + 1; j < n; j++) {
        res = max(res, sum[j] - f(j));
    }*/

    return res;
}

main() {
    #ifdef T0RRES
    freopen("1.txt", "r", stdin);
    #endif // T0RRES

    scanf("%d", &n);
    rmq = new node(0, n - 1);

    for (int i = 0; i < n; i++) {
        scanf("%d", &a[i]);
        sum[i] = a[i] + (i ? sum[i - 1] : 0);
    }

    dp[n - 1] = 0;

    for (int i = n - 2; i >= 0; i--) {
        dp[i] = sum[n - 1];
        static set<long long> s;

        if (!s.empty()) {
            dp[i] = max(dp[i], *s.rbegin());
        }

        s.insert(sum[i] - dp[i]);
    }

    printf("%I64d", dp[0]);
}
