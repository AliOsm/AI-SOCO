#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
#include <random>
#include <cassert>
#include <sstream>
using namespace std;
#define F first
#define S second
#define pb push_back
#define PB push_back
#define MP make_pair
#define ALL(x) begin(x), end(x)
#define SZ(x) (int)(x).size()
#define IOS ios_base::sync_with_stdio(0); cin.tie(0)
#define ln(i, n) " \n"[i == n]
typedef long long LL;
typedef long double LDB;
typedef double D;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
//////////////////////
const long double eps = 1e-13;
const long double PI = acos(-1);
const int INF = (int)1e9 + 7;
const LL  INFF = (LL)1e18;
const int mod = (int)1e9 + 7;
const int MXN = (int)1e6 + 7;
int a[MXN], siz[MXN], gp[MXN], pos[MXN];
vector<int> mem[MXN];
int fd(int v) { return gp[v] == v ? v : gp[v] = fd(gp[v]); }
void go(int v, int p) {
	reverse(ALL(mem[v]));
	for (int x : mem[v]) {
		pos[x] = p;
		go(x, p-1);
		p -= siz[x];
	}
}
struct Seg {
#define ls p<<1
#define rs p<<1|1
	int ll[MXN<<2], rr[MXN<<2], v[MXN<<2], d[MXN<<2];
	void bd(int l, int r, int p = 1) {
		ll[p] = l, rr[p] = r, v[p] = -INF;
		if (l == r) return ;
		int mid = (l + r) >> 1;
		bd(l, mid, ls);
		bd(mid+1, r, rs);
	}
	inline void pushdown(int p) {
		d[ls] += d[p];
		d[rs] += d[p];
		v[ls] += d[p];
		v[rs] += d[p];
		d[p] = 0;
	}
	int qy() { return v[1]; }
	void md1(int pp, int val, int p = 1) {
		if (ll[p] == rr[p]) {
			v[p] = val;
			return ;
		}
		pushdown(p);
		int mid = (ll[p] + rr[p]) >> 1;
		if (pp <= mid) md1(pp, val, ls);
		else md1(pp, val, rs);
		v[p] = max(v[ls], v[rs]);
	}
	void md2(int l, int r, int p = 1) {
		if (ll[p] > r || rr[p] < l) return ;
		if (l <= ll[p] && rr[p] <= r) {
			d[p]++;
			v[p]++;
			return ;
		}
		pushdown(p);
		md2(l, r, ls);
		md2(l, r, rs);
		v[p] = max(v[ls], v[rs]);
	}
}seg;
int main() {
	int n, k; scanf("%d %d", &n, &k);
	for (int i = 1; i <= n; i++)
		scanf("%d", a + i);
	for (int i = 1; i <= n; i++) {
		siz[i] = 1;
		gp[i] = i;
	}
	set<PII> st;
	for (int i = 1; i <= n; i++) {
		auto rr = st.lower_bound({a[i], -INF});
		for (auto it = st.begin(); it != rr; it++) {
			siz[i] += siz[-it->S];
			mem[i].pb(-it->S);
		}
		while (!st.empty() && st.begin()->F < a[i])
			st.erase(st.begin());
		st.insert({a[i], -i});
	}
	int cntp = 0;
	for (auto it : st) {
		cntp += siz[-it.S];
		pos[-it.S] = cntp;
		go(-it.S, cntp-1);
	}
	seg.bd(1, n);
	for (int i = 1; i <= k; i++) {
		seg.md1(pos[i], 0);
		seg.md2(1, pos[i]);
	}
	printf("%d ", seg.qy());
	for (int i = k + 1; i <= n; i++) {
		seg.md1(pos[i-k], -INF);
		seg.md1(pos[i], 0);
		seg.md2(1, pos[i]);
		printf("%d ", seg.qy());
	}
	puts("");
	return 0;
}
