
#pragma GCC optimize("Ofast")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")


#include <bits/stdc++.h>
#include <ext/rope>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>


using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;


#define int long long
#define add push_back
#define rem pop_back
#define F first
#define S second

#define ALL(x) x.begin(), x.end()
#define SORT(x) sort(ALL(x))
#define REV(x) reverse(ALL(x))
#define DEBUG(x) cout << #x << " " << x << endl;

#define forn(i, a, b) for(int i = a; i <= b; i++)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))


template<typename T1, typename T2> auto max ( T1 a, T2 b ) { auto max = a > b ? a : b; return max; }
template<typename T1, typename T2> auto min ( T1 a, T2 b ) { auto min = a < b ? a : b; return min; }

template<typename T1, typename T2> void updmax ( T1 &a, T2 b ) { a = a > b ? a : b; }
template<typename T1, typename T2> void updmin ( T1 &a, T2 b ) { a = a < b ? a : b; }


int px[] = { 1, -1, 0, 0 };
int py[] = { 0, 0, -1, 1 };
int dx[] = { 1, 0, -1, 0, 1, 1, -1, -1 };
int dy[] = { 0, 1, 0, -1, 1, -1, 1, -1 };


const double EPS = 1e-9;
const double PI = acos ( -1. );
const int mod = ( int ) 1e9 + 7;
long long inf = __INT64_MAX__;


tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> tr;


static const int MAXN = ( int ) 5e5 + 10;
static int a[MAXN], b[MAXN];


int n, m, k;
int res, ans, cnt;
string s, t;


void solution()
{
	getline( cin, s );
	getline( cin, t );
	int i = 0, j = 0;
	while( s[i] == '0' ) i++;
	while( t[j] == '0' ) j++;
	if( s.size() - i > t.size() - j )
		cout << '>' << endl;
	else if( s.size() - i < t.size() - j )
		cout << '<' << endl;
	else{
		while( i < s.size() && j < t.size() ){
			if( s[i] > t[j] ){
				cout << '>' << endl;
				return;
			}
			if( s[i] < t[j] ){
				cout << '<' << endl;
				return;
			}
			i++;
			j++;
		}
		cout << '=' << endl;
	}



}


int32_t main ( )
{

        //freopen("input.txt", "r", stdin);
        //freopen("output.txt", "w", stdout);

        ios_base::sync_with_stdio ( false ); cin.tie ( nullptr ); cout.tie ( nullptr );
        //cout.precision(15);

        int query = 1;
        // cin >> query;

        while ( query-- ) solution();

        return 0;

}
