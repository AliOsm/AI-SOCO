#include <iostream>
#include <algorithm>
#include <string>
#include <ctype.h>
#include<queue>
#include <vector>
#include <set>
#include<cmath>
//#include<bits/stdc++.h>
#include<unordered_map>
#include <map>
#include<functional>
#include<stack>
#include<list>
#include<iomanip>
using namespace std;
#define ll long long
#define MAX 100000+5
#define MOD 100000000
#define INF 1000000000000000
#define edge pair<int,int>
int n, m;
int dx[] = { 1, 0, -1, 0, 1, -1, -1, 1 };
int dy[] = { 0, 1, 0, -1, 1, 1, -1, -1 };
vector<ll>v;
vector<string>s, rev;
ll dp[MAX][2];

int main()
{
	cin >> n;
	v.resize(n);
	s.resize(n);
	rev.resize(n);
	for (int i = 0; i < n; i++)cin >> v[i];
	for (int i = 0; i < n; i++)cin >> s[i], rev[i] = s[i], reverse(rev[i].begin(), rev[i].end());

	for (int i = 0; i <= n; i++)dp[i][0] = INF, dp[i][1] = INF;
	dp[0][0] = 0;
	dp[0][1] = v[0];
	
	for (int i = 1; i < n; i++){
			if (s[i - 1] <= s[i])
				dp[i][0] = min(dp[i][0],dp[i - 1][0]);
			if (s[i - 1] <= rev[i])
				dp[i][1] = min(dp[i][1],dp[i - 1][0] + v[i]);
			if (rev[i - 1] <= s[i])
				dp[i][0] = min(dp[i][0], dp[i - 1][1]);
			if (rev[i - 1] <= rev[i])
				dp[i][1] = min(dp[i][1], dp[i - 1][1] + v[i]);
	}
	ll ans = min(dp[n - 1][0], dp[n - 1][1]);
	if (ans == INF)cout << -1;
	else cout << ans;
	//system ("pause");
	//return 0;
}