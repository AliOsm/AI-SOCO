#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cstdlib>
const int N = 150001;
int a[310],b[310],t[310];
long long dp[2][N];
int Q[N];
long long val[N];
int main()
{
    int n,m,d;
    while(scanf("%d%d%d",&n,&m,&d)!=EOF) 
    {
        for(int i = 0; i < m; i++)
        {
            scanf("%d%d%d",&a[i],&b[i],&t[i]);
        }
        int cur=0,nxt=1;
        for(int i = 1; i <= n; i++) dp[cur][i] = 0;
        for(int i = 0; i < m; i++)
        {
            std::swap(cur,nxt);
            int head = 0, tail = 0;
            long long len = i ? (t[i]-t[i-1]) : t[i];
            len *= d;
            dp[cur][1] = dp[nxt][1] + b[i] - abs(a[i]-1);
            Q[tail] = 1;
            val[Q[tail++]] = dp[nxt][1];
            for(int j = 2; j <= n; j++)
            {
                long long v = dp[nxt][j] ;
                while(head<tail&&val[Q[tail-1]]<v) tail--;
                Q[tail] = j;
                val[Q[tail++]] = v;
                while(head<tail&&j-Q[head]>len) head++;
                dp[cur][j] = val[Q[head]] + b[i] - abs(a[i] - j);
            }
            head=0,tail=0;
            Q[tail] = n;
            val[Q[tail++]] = dp[nxt][n];
            for(int j = n-1; j >= 1; j--)
            {
                long long v = dp[nxt][j] ;
                while(head<tail&&val[Q[tail-1]]<v) tail--;
                Q[tail] = j;
                val[Q[tail++]] = v;
                while(head<tail&&Q[head]-j>len) head++;
                dp[cur][j] = std::max(dp[cur][j], val[Q[head]] + b[i] - abs(a[i]-j));
            }
/*            for(int j = 1; j <= n; j++)
            {
                printf("%I64d ",dp[cur][j]);
            }
            puts("");
            */
        }
        printf("%I64d\n",*std::max_element(dp[cur]+1,dp[cur]+n+1));
    }
    return 0;
}