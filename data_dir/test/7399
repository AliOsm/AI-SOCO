#include <bits/stdc++.h>

using namespace std;

int n, sz[1002], cen;
vector<int>g[1002];

bool cmp (int x, int y) {
  return sz[x] < sz[y];
}

void dfs1 (int x, int p) {
  sz[x] = 1;
  for (auto it : g[x]) {
    if (it == p)
      continue;
    dfs1(it, x);
    sz[x]+= sz[it];
  }
}

int centroid (int x, int p) {
  for (auto it : g[x]) {
    if (it == p)
      continue;
    if (sz[it] > sz[1] / 2)
      return centroid(it, x);
  }
  return x;
}

void dfs (int x, int p, int s, int step) {
  cout << x << " " << p << " " << s * step << "\n";
  int aux = 1;
  for (auto it : g[x]) {
    if (it != p) {
      dfs(it, x, aux, step);
      aux += sz[it];
    }
  }
}

int main()
{
  cin >> n;
  for (int i = 1; i < n; i++) {
    int x, y;
    cin >> x >> y;
    g[x].push_back(y);
    g[y].push_back(x);
  }
  dfs1(1, 0);
  cen = centroid(1, 0);
  dfs1(cen, 0);
  sort(g[cen].begin(), g[cen].end(), cmp);
  int i, sum = 1;
  for (i = 0; sum - 1 < (n - 1) / 3; i++) {
    dfs(g[cen][i], cen, sum, 1);
    sum += sz[g[cen][i]];
  }
  int sum1 = 1;
  for (; i < g[cen].size(); i++) {
    dfs(g[cen][i], cen, sum1, sum);
    sum1 += sz[g[cen][i]];
  }
  return 0;
}
