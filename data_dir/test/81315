#include <bits/stdc++.h>
#define isz(x) (int)(x).size()
using ll = long long;
struct Key {
    int p, lt, rt;
    ll operator()() const { return rt | ((lt|(ll(p) << 16)) << 16); }
};
std::unordered_map<ll,int> cache;
const int mod = 998244353;
std::string s, t;
bool equal(char a, char b) { return a == '*' || b == '*' || a == b; }
int dp(int p, int lt, int rt) {
    if (p < 0) return 1;
    Key key{p,lt,rt};
    auto it = cache.find(key());
    if (it != cache.end()) return it->second;
    int curr = 0;
    if (equal(s[p], t[lt])) curr += dp(p-1,lt+1,rt);
    if (equal(s[p], t[rt])) curr += dp(p-1,lt,rt-1);
    return cache[key()] = ((curr >= mod) ? curr -= mod : curr);
}
int main() {
    cache.reserve(int(2e7));
    std::cin >> s >> t;
    int need = isz(t),answ(0);
    while (isz(t) < isz(s)) t += '*';
    for (int last = isz(s)-1; last >= need-1; last--) {
        answ += dp(last,0,last);
        if (answ >= mod) answ -= mod;
    }
    std::cout << answ << std::endl;
    return 0;
}