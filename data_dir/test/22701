#include <bits/stdc++.h>
using namespace std;
using LL = long long;
using PII = pair<int, int>;
using VI = vector<int>;

struct vec {
  LL x, y;
  vec(): x(0), y(0) {}
  vec(LL a, LL b): x(a), y(b) {}
  vec operator-(const vec& other) const {
    return vec(x - other.x, y - other.y);
  }
  int quad() const {
    if (x > 0 && y >= 0) return 1;
    if (y > 0 && x <= 0) return 2;
    if (x < 0 && y <= 0) return 3;
    return 4;
  }
  LL cross(const vec& v) const {
    return x * v.y - y * v.x;
  }

  bool operator<(const vec& v) const {
    if (quad() != v.quad()) {
      return quad() < v.quad();
    }
    return cross(v) > 0;
  }
};

LL choose(int n, int r) {
  if (n < r) return 0;
  LL num = 1, den = 1;
  for (int i = 1; i <= r; i++) {
    num *= (n - i + 1);
    den *= i;
  }
  return num / den;
}

int main() {
#ifdef LOCAL_EXEC
	freopen("sample.in", "r", stdin);
//	freopen("sample.out", "w", stdout);
#else
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#endif

  int n; cin >> n;
  vector<vec> pts(n);
  for (auto& p: pts) {
    cin >> p.x >> p.y;
  }

  LL ans = 0;

  for (int i = 0; i < n; i++) {
    auto p = pts[i];
    vector<vec> sub;
    for (int j = 0; j < n; j++) {
      if (i == j) continue;
      sub.push_back(pts[j] - p);
    }
    sort(sub.begin(), sub.end());
    for (int j = 0; j < n - 1; j++) {
      sub.push_back(sub[j]);
    }

    LL cur = choose(n - 1, 4);
    for (int j = 0, k = 0; j < n - 1; j++) {
      while (k + 1 < j + n - 1 && sub[j].cross(sub[k + 1]) >= 0) {
        k++;
      }
      cur -= choose(k - j, 3);
    }
    ans += cur;
  }

  cout << ans << endl;

  return 0;
}
