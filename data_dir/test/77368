#include <bits/stdc++.h> 
using namespace std;
#define fl(i,a,b) for(int i=a;i<b;i++)
#define ll long long
#define endl '\n'
#define pb push_back
#define ff first
#define ss second
#define int long long 
#define mx 200005
#define mx2 15
#define inf 4e18
#define int long long
#define fast ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
 vector<int> v;
map<int,int> mp;
int rev[mx];
inline int add(int x,int y, int mod)
{
    if(y < 0)
        y = mod + y;
    if(x + y >= mod)
        return x + y - mod;
    return x + y;
}
inline int sub(int x,int y, int mod)
{
    if(y < 0)
        y = mod + y;
    if(x - y < 0)
        return x - y + mod;
    return x - y;
}
inline int mul(int x,int y, int mod)
{
    if(y < 0)
        y = mod + y;
    return 1LL * x * y % mod;
}
ll power(ll x, ll y, ll mod)
{
    ll res = 1;
    while(y)
    {
        if(y&1)
            res = res * x % mod;
        y >>= 1;
        x = x*x%mod;
    }
    return res;
}
int n;
int mod1 = 2000000011;
int mod2 = 2000000033;
int P1 = 31;
int P2 = 37;
int arr[mx],brr[mx],power1[mx],power2[mx],h1[mx],h2[mx];
int inv1[mx], inv2[mx];
void precomp()
{
    power1[0] = power2[0] = 1;
    fl(i,1,mx)
    {
        power1[i] = mul(power1[i-1],P1,mod1);
        power2[i] = mul(power2[i-1],P2,mod2);
    }
    int ans = 0;
    inv1[0] = inv2[0] = 1;
    inv1[1] = power(P1,mod1-2,mod1);
    inv2[1] = power(P2,mod2-2,mod2);
    fl(i,2,mx)
    {
        inv1[i] = mul(inv1[i-1],inv1[1],mod1);
        inv2[i] = mul(inv2[i-1],inv2[1],mod2);
    }
}
int queryh1(int l,int r)
{
    int val = sub(h1[r] , h1[l - 1],mod1);
    val = mul(val,inv1[l - 1],mod1);
    return val;
 
}
int queryh2(int l,int r)
{
    int val = sub(h2[r] , h2[l - 1],mod2);
    val = mul(val,inv2[l - 1],mod2);
    return val;
}
pair<int,int> query(int l,int r)
{
    int val1 = queryh1(l,r);
    int val2 = queryh2(l,r);
    return {val1,val2};
}
vector<int> id[mx];
vector<int> ans[mx];
void solve(int x)
{
    fl(i,0,id[x].size())
    {
        fl(j,i+1,id[x].size())
        {
            int len = id[x][j] - id[x][i];
            if(id[x][j] + len - 1 > n)
                continue;
            auto a = query(id[x][i],id[x][i] + len - 1);
            auto b = query(id[x][j],id[x][j] + len - 1);
            if(a == b)
            ans[len].pb(id[x][i]);
        }
    }
}
main()
{
    fast;
 
    cin >> n;
    precomp();
    fl(i,1,n+1)
    {
        cin >> arr[i];
        v.pb(arr[i]);
    }
    v.pb(-1);
    sort(v.begin(), v.end());
    int k = 1;
    fl(i,1,v.size())
    {
        if(v[i] == v[i-1])
            continue;
        mp[v[i]] = k;
        rev[k] = v[i];
        k++;
    }
    fl(i,1,n+1)
    {
        arr[i] = mp[arr[i]];
        id[arr[i]].pb(i);
        h1[i] = add(h1[i - 1],mul(power1[i - 1],arr[i],mod1),mod1);
        h2[i] = add(h2[i - 1],mul(power2[i - 1],arr[i],mod2),mod2);
    }
    fl(i,1,mx)
    {
        if(id[i].size() > 1)
        solve(i);
    }
    int curr = 1;
    fl(i,1,n+1)
    {
        sort(ans[i].begin(), ans[i].end());
        for(auto j : ans[i])
        {
            if(j >= curr)
                curr = j + i;
        }
    }
    cout << n - curr + 1 << endl;
    fl(i,curr,n+1)
    {
        cout << rev[arr[i]] << " ";
    }
 
}