#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

ll n;

vector<ll> v;
vector<ll> sqrts;
int main() {
  ios::sync_with_stdio(0);

  cin >> n;
  v.resize(1);
  v.push_back(0);
  sqrts.resize(n); // only sqrt(n) is needed
  
  ll s = 0;
  
  cout.precision(10);
  
  for (int i = 0; i < n; i++) {
    ll q; cin >> q;
    if (q == 1) {
      ll len, x; cin >> len >> x;
      
      s += len*x;
      
      ll sqlen = sqrt(len);
      while(len > sqlen*sqlen) {
        v[len]+=x;
        len--;
      }
      for (int i = 1; i <= sqlen; i++) {
        sqrts[i] += x;
      }
    } else if (q == 2) {
      ll x; cin >> x;
      v.push_back(x);
      s += x;
    } else {
      ll sqlen = sqrt(v.size()-1);
      if (sqlen*sqlen == v.size()-1 && sqrts[sqlen]) {
        for (int i = (sqlen-1)*(sqlen-1)+1; i <= sqlen*sqlen; i++) {
          v[i] += sqrts[sqlen];
        }
        sqrts[sqlen] = 0;
      }
      s -= v.back();
      v.pop_back();
    }
    cout << fixed << ld(s)/(v.size()-1)  << endl;
  }
}