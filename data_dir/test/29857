#include <bits/stdc++.h>
using namespace std;

int n, parent[100005], besar[100005];

int findParent(int a) {
	return parent[a] == a ? a : parent[a] = findParent(parent[a]);
}

void merge(int a, int b) {
	a = findParent(a);
	b = findParent(b);

	if (a != b) {
		parent[b] = a;
		besar[a] += besar[b];
	}
}

int getSize(int a) {
	return besar[findParent(a)];
}

bool lucky(int num) {
	while (num > 0) {
		if (num % 10 != 4 && num % 10 != 7) {
			return false;
		}

		num /= 10;
	}

	return true;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> n;
	for (int i = 1; i <= n; i++) {
		parent[i] = i;
		besar[i] = 1;
	}

	for (int i = 0; i < n - 1; i++) {
		int u, v, w;
		cin >> u >> v >> w;

		if (!lucky(w)) {
			merge(u, v);
		}
	}

	long long ans = 0;
	for (int i = 1; i <= n; i++) {
		ans += (long long) (n - getSize(i)) * (n - getSize(i) - 1);
	}

	cout << ans << '\n';

	return 0;
}