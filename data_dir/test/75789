#include <bits/stdc++.h>
using namespace std;

int n, a;
long long dp[1 << 20], langkah[20][20];
vector<int> num[20];

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> a;
		num[a - 1].push_back(i);
	}

	for (int i = 0; i < 20; i++) {
		for (int j = 0; j < 20; j++) {
			if (i == j) continue;
			if ((int) num[i].size() == 0 || (int) num[j].size() == 0) continue;

			int cur = num[j].size() - 1;
			for (int pos = num[i].size() - 1; pos >= 0; pos--) {
				while (cur >= 0 && num[j][cur] > num[i][pos]) {
					cur--;
				}
				langkah[i][j] += cur + 1;
			}
		}
	}

	for (int i = 0; i < (1 << 20); i++) {
		dp[i] = 1e18;
	}

	dp[0] = 0;
	for (int i = 0; i < (1 << 20); i++) {
		vector<int> was;
		for (int j = 0; j < 20; j++) {
			if (i & (1 << j)) was.push_back(j);
		}

		for (int j = 0; j < 20; j++) {
			if (i & (1 << j)) continue;

			long long sum = 0;
			for (int k = 0; k < was.size(); k++) {
				sum += langkah[was[k]][j];
			}

			dp[i | (1 << j)] = min(dp[i | (1 << j)], dp[i] + sum);
		}
	}

	cout << dp[(1 << 20) - 1] << '\n';
	
	return 0;
}