#include <bits/stdc++.h>
using namespace std;
const int Nmax = 50;
int n, m, d[4] = {1, 0, -1, 0}, c[4] = {0, 1, 0, -1}, p, q;
char s[Nmax+2][Nmax+2];
bool kt[Nmax+1][Nmax+1];

int init();
int solve();
int DFS(int x, int i, int j, bool &k);

int main()
{
    init();
    solve();
}

int init()
{
    int i, j;
    char x[Nmax+2];

    scanf("%d%d", &n, &m);
    for (i = 1; i <= n; i++)
    {
        scanf("%s", &x);
        for (j = 1; j <= m; j++) s[i][j] = x[j-1];
    }
    memset(kt, true, sizeof kt);
}

int solve()
{
    int i, j;
    bool k = false;

    for (i = 1; i <= n; i++)
        for (j = 1; j <= m; j++)
    {

        memset(kt, true, sizeof kt);
        p = i;
        q = j;
        DFS(1, i, j, k);
        if (k)
        {
            printf("Yes");
            return 0;
        }
    }

    printf("No");
}

int DFS(int x, int i, int j, bool &k)
{
    int u, v, t;

    if (k) return 0;
    kt[i][j] = false;
    for (t = 0; t <= 3; t++)
    {
        u = i + d[t];
        v = j + c[t];
        if (x >= 4 && u == p && v == q)
        {
            k = true;
            return 0;
        }
        if (kt[u][v] && s[u][v] == s[p][q]) DFS(x + 1, u, v, k);
    }
}































