#include <bits/stdc++.h>
using namespace std;
const int N = 1e3 + 5;
const int mod = 1e9 + 7;
int n ;
int a[26];
int cnt[N][26];
string s;
long long dp[N];
int cut_dp[N];
int satisfy[N][N];
int max_dp[N];
int mx = 1;
int mn = (int) 1e6;
long long solve(int pos) {
    if(pos >= n) {
        return 0;
    }
    if(dp[pos] != -1)
        return dp[pos];

    long long rekt = satisfy[pos][n - 1];
    for(int i = pos; i <= n - 2; ++i) {
        if(satisfy[pos][i]) {
            rekt += solve(i + 1);
            if(rekt >= mod) {
                rekt -= mod;
            }
        }
    }
    dp[pos] = rekt;
    return rekt;
}

int cuts(int pos) {
    if(pos >= n) {
        return 0;
    }
    if(cut_dp[pos] != -1) {
        return cut_dp[pos];
    }
    if(satisfy[pos][n - 1]) {
        return 1;
    }
    int rekt = (int) 1e6;
    for(int i = pos; i <= n - 2; ++i) {
        if(satisfy[pos][i]) {
            rekt = min(rekt , 1 + cuts(i + 1) );
        }
    }
    cut_dp[pos] = rekt;
    return rekt;
}

int mz(int pos) {
    if(pos >= n) {
        return 0;
    }
    if(max_dp[pos] != -1) {
        return max_dp[pos];
    }
    if(satisfy[pos][n - 1]) {
        return n - pos;
    }
    int rekt = 1;
    for(int i = pos; i <= n - 2; ++i) {
        if(satisfy[pos][i]) {
            rekt = max(rekt , max(i - pos + 1 , mz(i + 1) ) );
        }
    }
    max_dp[pos] = rekt;
    return rekt;
}

int main() {
    cin >> n;
    cin >> s;
    for(int i = 0; i < 26; ++i) cin >> a[i];
    ++cnt[0][(int) s[0] - 'a'];
    for(int i = 1; i < n; ++i) {
        for(int j = 0; j < 26; ++j)
            cnt[i][j] = cnt[i - 1][j];
        cnt[i][(int) s[i] - 'a']++;
    }
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < n; ++j) {
            bool rekt = 1;
            for(int k = 0; rekt && k < 26; ++k) {
                int tms = cnt[j][k] ;
                if(i > 0) {
                    tms -= cnt[i - 1][k];
                }
                if(tms > 0) {
                    rekt &= a[k] >= (j - i + 1);
                }
            }
            satisfy[i][j] = rekt;
        }
    }
    mx = 1;
    mn = (int) 1e6;
    memset(dp , -1 , sizeof dp);
    memset(cut_dp , -1 , sizeof cut_dp);
    memset(max_dp , -1 , sizeof max_dp);
    dp[0] = solve(0);
    printf("%lld\n" , dp[0]);
    max_dp[0] = mz(0);
    printf("%d\n" , max_dp[0]);
    cut_dp[0] = cuts(0);
    printf("%d\n" , cut_dp[0]);
}
