#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>

using namespace std;



#define pb push_back
#define pii pair<int, int>
#define mp make_pair
#define ull unsigned long long
#pragma comment(linker, "/STACK:64000000")
#define null NULL
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define fornr(i, n) for (int i = (n); i >= 0; --i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)

typedef long double ld;
typedef pair<ld, ld> pldld;
typedef long long ll;
typedef pair<ll, ll> pll;


typedef unsigned int ui;
typedef unsigned char uc;
const int infi = 1e9 + 7;
const ll infl = 1e18 + 7;
/*
const int MAX_MEM = 2e8;
int mpos = 0;
char mem[MAX_MEM];
inline void * operator new ( size_t n ) {
  char *res = mem + mpos;
  mpos += n;
  assert(mpos <= MAX_MEM);
  return (void *)res;
}
inline void operator delete ( void * ) { }

inline void * operator new [] ( size_t ) { assert(0); }
inline void operator delete [] ( void * ) { assert(0); }*/

int color[100500];
vector<vector<int> > g;
int dp[100500];
void dfs1(int v, int p = -1) {
	int flag = 1;
	forn(i, (int)g[v].size()) {
		int to = g[v][i];
		if (to == p)
			continue;
		dfs1(to, v);
		if (dp[to] == -1 || color[to] != color[v])
			flag = 0;
	}
	if (!flag)
		dp[v] = -1;
	else
		dp[v] = color[v];
	return;
}
void dfs2(int v, int p = -1, int c = color[0]) {
	int flag = 1;
	int cnt = 0;
	int a;
	forn(i, (int)g[v].size()) {
		int to = g[v][i];
		if (to == p)
			continue;
		if (dp[to] == -1) {
			flag = 0;
		}
		if (dp[to] != c)
			++cnt, a = to;
	}
	if (flag) {
		cout << "YES\n" << v + 1;
		exit(0);
	}
	if (cnt > 1) {
		return;
	}
	if (color[v] != c)
		return;
	if (cnt == 1) 
		dfs2(a, v, c);
	else {
		forn(i, (int)g[v][i])
			if (p != g[v][i])
				dfs2(g[v][i], v, c);
	}
}

int main() {
	cin.sync_with_stdio(false);
	cin.tie(0);
//	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
	//freopen("ufo.in", "r", stdin);freopen("ufo.out", "w", stdout);
	int n;
	cin >> n;
	g.resize(n);
	forn(i, n - 1) {
		int u, v;
		cin >> u >> v;
		--u, --v;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	forn(i, n)
		cin >> color[i];
	dfs1(0);
	dfs2(0);
	cout << "NO";

	return 0;
}