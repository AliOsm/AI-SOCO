/////////////////////////////////////////
//                                     //
//  Action - Inspiration - Motivation  //
//                                     //
/////////////////////////////////////////

#include <bits/stdc++.h>
using namespace std;

struct query {
	int u, v, val;

	bool operator<(query other) const {
		if (u != other.u) return u < other.u;
		if (v != other.v) return v < other.v;
		return val < other.val;
	}
};

int n, m, ans[5005], edge[2][5005];
query q[5005];
pair<int,int> pre[5005];
vector<int> adj[5005];

void dfs(int u, int par) {
	for (int nxt : adj[u]) {
		int v = edge[0][nxt] == u ? edge[1][nxt] : edge[0][nxt];
		if (v == par) continue;

		pre[v] = {u, nxt};
		dfs(v, u);
	}
}

void update(int u, int v, int val) {
	while (v != u) {
		ans[pre[v].second] = max(ans[pre[v].second], val);
		v = pre[v].first;
	}
}

int check(int u, int v, int val) {
	int cur = INT_MAX;
	while (v != u) {
		cur = min(cur, ans[pre[v].second]);
		v = pre[v].first;
	}

	return cur == val;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> n;
	for (int i = 0; i < n - 1; i++) {
		int u, v; cin >> u >> v;
		adj[u].push_back(i);
		adj[v].push_back(i);
		edge[0][i] = u;
		edge[1][i] = v;
	}

	cin >> m;
	for (int i = 0; i < m; i++) {
		cin >> q[i].u >> q[i].v >> q[i].val;
	}

	sort(q, q + m);

	int cur = 0;
	for (int i = 0; i < m; i++) {
		if (q[i].u != cur) {
			cur = q[i].u;
			pre[cur] = {cur, 0};
			dfs(cur, cur);
		}
		
		update(q[i].u, q[i].v, q[i].val);
	}

	bool ok = true;
	cur = 0;
	for (int i = 0; i < m; i++) {
		if (q[i].u != cur) {
			cur = q[i].u;
			pre[cur] = {cur, 0};
			dfs(cur, cur);
		}

		ok &= check(q[i].u, q[i].v, q[i].val);
	}

	if (ok) {
		for (int i = 0; i < n - 1; i++) {
			cout << max(ans[i], 1) << (i + 1 < n - 1 ? ' ' : '\n');
		}
	} else {
		cout << -1 << '\n';
	}

	return 0;
}