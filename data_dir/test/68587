#include <bits/stdc++.h>
using namespace std;

#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define FORd(i, a, b) for (int i = (a) - 1; i >= (b); i--)
#define FORall(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define sz(a) int((a).size())
#define present(t, x) (t.find(x) != t.end())
#define all(a) (a).begin(), (a).end()
#define uni(a) (a).erase(unique(all(a)), (a).end())
#define pb push_back
#define pf push_front
#define mp make_pair
#define fi first
#define se second
#define prec(n) fixed<<setprecision(n)
#define bit(n, i) (((n) >> (i)) & 1)
#define bitcount(n) __builtin_popcountll(n)
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef vector<pi> vii;
const int MOD = (int) 1e9 + 7;
const int FFTMOD = 1007681537;
const int INF = (int) 1e9;
const ll LINF = (ll) 1e18;
const ld PI = acos((ld) -1);
const ld EPS = 1e-6;
inline ll gcd(ll a, ll b) {ll r; while (b) {r = a % b; a = b; b = r;} return a;}
inline ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}
inline ll fpow(ll n, ll k, int p = MOD) {ll r = 1; for (; k; k >>= 1) {if (k & 1) r = r * n % p; n = n * n % p;} return r;}
template<class T> inline int chkmin(T& a, const T& val) {return val < a ? a = val, 1 : 0;}
template<class T> inline int chkmax(T& a, const T& val) {return a < val ? a = val, 1 : 0;}
inline ll isqrt(ll k) {ll r = sqrt(k) + 1; while (r * r > k) r--; return r;}
inline ll icbrt(ll k) {ll r = cbrt(k) + 1; while (r * r * r > k) r--; return r;}
inline void addmod(int& a, int val, int p = MOD) {if ((a = (a + val)) >= p) a -= p;}
inline void submod(int& a, int val, int p = MOD) {if ((a = (a - val)) < 0) a += p;}
inline int mult(int a, int b, int p = MOD) {return (ll) a * b % p;}
inline int inv(int a, int p = MOD) {return fpow(a, p - 2, p);}
inline int sign(ld x) {return x < -EPS ? -1 : x > +EPS;}
inline int sign(ld x, ld y) {return sign(x - y);}
#define db(x) cerr << #x << " = " << (x) << " ";
#define endln cerr << "\n";

const int maxn = 5000 + 5;
int n, k;
int a[maxn];
int fac[maxn];
int f[maxn];

vi mul(vi v, int a, int b) {
    int n = sz(v);
    vi res(n + 1);
    FOR(i, 0, n + 1) {
        if (i < sz(v)) {
            addmod(res[i], mult(b, v[i]));
        }
        if (i) {
            addmod(res[i], mult(a, v[i - 1]));
        }
    }
    return res;
}
vi div(vi v, int a, int b) {
    int n = sz(v);
    vi res(n - 1);
    int ia = inv(a);
    FORd(i, n - 1, 0) {
        res[i] = mult(ia, v[i + 1]);
        submod(v[i + 1], mult(res[i], a));
        submod(v[i], mult(res[i], b));
    }
    return res;
}
vi add(vi a, vi b) {
    int n = max(sz(a), sz(b));
    vi res(n);
    FOR(i, 0, n) {
        if (i < sz(a)) addmod(res[i], a[i]);
        if (i < sz(b)) addmod(res[i], b[i]);
    }
    return res;
}

void solve() {
    fac[0] = 1; FOR(i, 1, maxn) fac[i] = mult(fac[i - 1], i);
    cin >> n >> k;
    f[0] = 1; FOR(i, 1, maxn) f[i] = mult(f[i - 1], k - i + 1);
    FOR(i, 0, n) cin >> a[i];
    vi v(1, 1), res;
    FOR(i, 0, n) {
        v = mul(v, MOD - 1, a[i]);
    }
    FOR(i, 0, n) {
        res = add(res, div(v, MOD - 1, a[i]));
    }
    int ans = 0;
    FOR(i, 0, sz(res)) {
        if (i < k) {
            addmod(ans, mult(res[i], mult(fpow(n, k - i - 1), mult(inv(i + 1), f[i + 1]))));
        }
    }
    ans = mult(ans, inv(fpow(n, k)));
    cout << ans << "\n";
}

int main(int argc, char* argv[]) {
    ios_base::sync_with_stdio(0), cin.tie(0);
    if (argc > 1) {
        assert(freopen(argv[1], "r", stdin));
    }
    if (argc > 2) {
        assert(freopen(argv[2], "wb", stdout));
    }
    solve();
    cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";
    return 0;
}
