/*input
5 1 2 5 3
*/
#include "bits/stdc++.h"
using namespace std;
const long long md=1e9+7;
long long n,f1,f2,f3,c;

vector<vector<long long>> I(5,vector<long long>(5));

long long power(long long a,long long p,long long m=md){
	return p?power(a*a%m,p/2,m)*(p&1?a:1)%m:1;
}

vector<vector<long long>> mul(vector<vector<long long>> &a,vector<vector<long long>> &b){
	vector<vector<long long>> res(a.size(),vector<long long>(b[0].size()));
	for(int i=0;i<res.size();++i) for(int j=0;j<res[0].size();++j)
		for(int k=0;k<b.size();++k) (res[i][j]+=a[i][k]*b[k][j]) %= md-1;
	return res;
}
vector<vector<long long>> power(vector<vector<long long>> a,long long p){
	if(p == 1) return a;
	auto tmp = power(mul(a,a),p/2);
	if(p&1) return mul(a,tmp);
	else return tmp;
}

int baby_giant(int g, int h){
	unordered_map<int,int> mp;
	int sq = ceil(sqrt(md));
	for(int i=0,now=1;i<sq;++i)
		mp[now] = i, now = (long long) now*g % md;
	for(int i=0,jmp=power(g,md-1-sq);i<sq;++i){
		if(mp.find(h)!=mp.end()) return i*sq+mp[h];
		h = (long long) h*jmp % md;
	}
	return -1;
}

int main(){
	for(int i=0;i<5;++i) I[i][i] = 1;

	cin>>n>>f1>>f2>>f3>>c;
	vector<vector<long long>> matrix(5,vector<long long>(5));
	matrix[0][0] = matrix[0][1] = matrix[0][2] = 1;
	matrix[0][3] = baby_giant(5,c);
	matrix[1][0] = matrix[2][1] = 1;
	matrix[3][3] = 1;
	matrix[3][4] = 2;
	matrix[4][4] = 1;
	auto raised = power(matrix,n-3);

	vector<vector<long long>> b(5,vector<long long>(1));
	b[0][0] = baby_giant(5,f3);
	b[1][0] = baby_giant(5,f2);
	b[2][0] = baby_giant(5,f1);
	b[3][0] = 2;
	b[4][0] = 1;

	
	auto res = mul(raised, b)[0][0];

	cout<<power(5,res);
	
}