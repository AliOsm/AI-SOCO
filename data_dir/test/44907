
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j123 = n; (i) < j123; (i) ++)
#define rep1(i, n) for (int (i) = 1, j123 = n; (i) <= j123; (i) ++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout << #a << " :";for(int i123=(x);i123<=(y);i123++) cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int(x.size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

int N, K;
int undecided[3*100100];
ll A[3*100100];
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0); cin.tie(0);
  cin >> N >> K;
  rep1(i,N) A[i] = -2e9+i;
  rep1(i,N) 
  {
    string s;
    cin >> s;
    if (0 && N == 99941 && K == 52 && A[N+1] == 388)
    {
      if ( (i == 123343-99941) || (i==123499-99941) )
      {
        db(i);
        db(s);
      }
    }
    if (s == "?")
    {
      undecided[i+N] = 1;
    }
    else
    {
      stringstream ss;
      ss << s;
      ss >> A[i+N];
      if (0 && N == 99941 && K == 52 && A[N+1] == 388)
      {
        if ( (i == 123343-99941) || (i==123499-99941) )
        {
          db(i);
          db(s);
          db(A[i+N]);
        }
      }
    }
  }
  rep1(i,N) A[i+2*N]=2e9+1ll*i;
  N = 3*N;
  for (int from = 1; from <= K; from++)
  {
    int lastIndex = from;
    while (lastIndex <= N)
    {
      int cur = lastIndex + K;
      int numUndetermined = 0;
      while (cur <= N && undecided[cur])
      {
        numUndetermined++;
        cur = cur + K;
      }
      if (cur > N) 
      {
        break;
      }
      if (A[lastIndex] + numUndetermined + 1 > A[cur])
      {
        cout << "Incorrect sequence" << endl;
        if (0 && N == 3*99941 && K == 52)
        {
          db(lastIndex);
          db(A[lastIndex]);
          db(undecided[lastIndex]);
          db(cur);
          db(A[cur]);
          db(undecided[cur]);
        }
        return 0;
      }
      if (lastIndex + K == cur) 
      {
        lastIndex = cur;
        continue;
      }
      if (0 <= A[lastIndex])
      {
//        db("Case 1");
        int x = lastIndex+K;
        int val = A[lastIndex]+1;
        while (x != cur)
        {
        if (0 && N == 3*99941 && K == 52)
          assert(123343!=x&&"haha3");
          A[x] = val;
          val ++;
          x += K;
        }
      }
      else if (A[cur] <= 0)
      {
//        db("Case 2");
        int x = cur - K;
        int val = A[cur] - 1;
        while (x != lastIndex)
        {
        if (0 && N == 3*99941 && K == 52)
          assert(123343!=x&&"haha4");
          A[x] = val;
          val --;
          x -= K;
        }
      }
      else
      {
//        db("Case 3");
        int bestPosFor0 = -1;
        ll score = INFL;
        int debug = 0;
        for (int ind = lastIndex+K; ind <= cur-K; ind += K)
        {
          if (A[lastIndex] > -((ind - lastIndex)/K))
          {
            continue;
          }
          if (A[cur] < (cur - ind) / K)
          {
            continue;
          }
          ll x;
          ll curscore = 0;
          x = (ind-lastIndex)/K;
          x--;
          curscore += x * (x-1) / 2;
          x = (cur-ind)/K;
          x--;
          curscore += x * (x-1) / 2;
//          db(curscore); db(ind);
          if (curscore < score)
          {
            score = curscore;
            bestPosFor0 = ind;
          }
        }
        if (0&&N == 3*99941 && K == 52 && bestPosFor0 <= 0)
        {
          db(lastIndex);
          db(cur);
          db(K);
          for (int ind = lastIndex+K; ind <= cur-K; ind += K)
          {
            if (A[lastIndex] > -((ind - lastIndex)/K))
            {
              db(A[lastIndex]);
              db(ind);
              db(-((ind-lastIndex)/K));
              continue;
            }
            if (A[cur] < (cur - ind) / K)
            {
              db(A[cur]);
              db(ind);
              db((cur-ind)/K);
              continue;
            }
          }
        }
//        db(bestPosFor0); db(score);
//        assert(bestPosFor0 >= 1);
        int haha = 0;
        for (int i = bestPosFor0; i > lastIndex; i-=K)
        {
          if (N == 3*99941 && K == 52)
            assert(123343!=i&&"haha1");
          A[i] = haha;
          haha--;
        }
        haha = 0;
        for (int i = bestPosFor0; i < cur; i+=K)
        {
          if (0 && N == 3*99941 && K == 52)
          {
            if(123343==i)
            {
              db(bestPosFor0);
              db(cur);
              db(lastIndex);
              db(undecided[i]);
              db(i);

            }
          }
          A[i] = haha;
          haha++;
        }
      }
      lastIndex = cur;
    }
  }
  //  dba(A,1,N);
  for (int i = (N/3)+1; i <= 2*(N/3); i++)
    cout << A[i] << ((i==(2*(N/3)))?'\n':' ');
}
