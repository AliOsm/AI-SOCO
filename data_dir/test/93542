#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define FORE(i, a, n) for (i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << x << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
//#define EPS 1e-13
#define endl "\n"
#define pdd pair<double, double>

int game[255][255];

int main() {
	game['R']['S'] = game['S']['P'] = game['P']['R'] = 1;
	ll n, lcm, tota = 0, totb = 0;
	string a, b;
	cin >> n >> a >> b;
	lcm = Size(a)/__gcd(Size(a), Size(b))*Size(b);
	FOR(i, 0, lcm) {
		char x = a[i%Size(a)];
		char y = b[i%Size(b)];
		if (game[x][y]) totb += n/lcm + int(i%lcm < n%lcm);
		if (game[y][x]) tota += n/lcm + int(i%lcm < n%lcm);
	}
	cout << tota << " " << totb << endl;
	return 0;
}

