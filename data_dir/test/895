#include <bits/stdc++.h>
using namespace std;
#define read            freopen("C:\\Users\\Dell\\Desktop\\in.txt", "r", stdin)
#define write           freopen("C:\\Users\\Dell\\Desktop\\out.txt", "w", stdout)
#define pii             pair<int , int >
#define inf             2111111111
#define linf            9111111111111111111
#define in(a)           scanf("%d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%d%d", &a, &b)
#define in3(a, b, c)    scanf("%d%d%d", &a, &b, &c)
#define pn              printf("\n");
#define pr(a)           printf("%d\n", a)
#define prs(a)          printf("%d ", a)
#define pr2(a, b)       printf("%d %d\n", a, b)
#define pr3(a, b ,c)    printf("%d %d %d\n", a, b, c)
#define MP              make_pair
#define vi              vector<int >
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define pb              push_back
#define MEM(a, b)       memset((a), (b), sizeof(a))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)
typedef long long LL;
//int  dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int  dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int  dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(int n, int pos) {return (n & (1<<pos))>>pos;} //typecast 1 in case of int
//int  on(int n, int pos) {return n | (1<<pos);} //typecast 1 in case of int
//int  off(int n, int pos) {return n & ~(1<<pos);} //typecast 1 in case of int
//bool operator < (const data &d) const{return cost<d.cost;} //reverse in priority queue

/* ***************************************************************************************
   *************************************************************************************** */
const int M=110, mod=1000000007;
char A[M], B[M], V[M];
int alen, blen, vlen, dp[M][M][M][2], dir[M][M][M][2], pi[M];
void computeLPSArray(char *T)
{
    int len = 0,i;
    int M=vlen;
    pi[0] = 0;
    i = 1;
    while (i < M)
    {
        if (T[i] == T[len])
        {
            len++;
            pi[i] = len;
            i++;
        }
        else
        {
            if (len != 0)
            {
                len = pi[len-1];
            }
            else
            {
                pi[i] = 0;
                i++;
            }
        }
    }
}
int call(int i, int j, int k, int skipped)
{
    if (i==alen||j==blen) return 0;
    if (dp[i][j][k][skipped]!=-1) return dp[i][j][k][skipped];

    int a=0, b=0, p;
    if (A[i]==B[j])
    {
        if (A[i]==V[k])
        {
            if (k+1!=vlen) a=1+call(i+1, j+1, k+1, false);
        }
        else
        {
            if (k>0) a=call(i, j, pi[k-1], true);
            else a=1+call(i+1, j+1, 0, skipped);
        }

        if (!skipped) b=call(i+1, j+1, k, skipped);
    }
    else
    {
        a=call(i+1, j, k, skipped);
        b=call(i, j+1, k, skipped);
    }

dir[i][j][k][skipped]=a>=b?1:2;
return dp[i][j][k][skipped]=max(a, b);
}
int main()
{
#ifndef ONLINE_JUDGE
    read;
    //int->int :: inf->linf
#endif
    int i, j, k, n;
    string ans;

    ins(A);
    ins(B);
    ins(V);
    alen=strlen(A);
    blen=strlen(B);
    vlen=strlen(V);

    computeLPSArray(V);
    MEM(dp, -1);
    MEM(dir, -1);
    k=call(0, 0, 0, 0);

    i=j=k=0;
    int skipped=false;
    while (dir[i][j][k][skipped]!=-1)
    {
        if (A[i]==B[j])
        {
            if (dir[i][j][k][skipped]==1)
            {
                if (A[i]==V[k])
                {
                    if (k+1!=vlen)
                    {
                        ans+=A[i];
                        i++;
                        j++;
                        k++;
                        skipped=false;
                    }
                    else break;
                }
                else
                {
                    if (k>0)
                    {
                        k=pi[k-1];
                        skipped=true;
                    }
                    else
                    {
                        ans+=A[i];
                        i++;
                        j++;
                    }
                }
            }
            else
            {
                i++;
                j++;
            }
        }
        else
        {
            if (dir[i][j][k][skipped]==1) i++;
            else j++;
        }
    }

    if (ans.sz==0) ans+='0';

    cout<<ans<<endl;

return 0;
}
