#include <cstdio>
#include <algorithm>

int const N = 110;
int const INF = (int)1e7;
int const M = 150100;

int a[N];
int len;
int p[N];
int dp[N][M];
int val[N][M];
int b[N];
int msk[N];

bool is_prime(int x) { 
	for (int i = 2; i * i <= x; ++i) if (x % i == 0) return false; 
	return true; 
}

int getmask(int x) {
	int ret = 0;
	for (int i = 0; i < len; ++i) {
		if (x % p[i] == 0) {
			ret |= 1 << i;
		}
	}
	return ret;
}

int main() {
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n; ++i) scanf("%d", a + i);
	for (int i = 2; i < 60; ++i) if (is_prime(i)) p[len++] = i;
	for (int i = 1; i < 60; ++i) msk[i] = getmask(i);
	std::fill(dp[0], dp[0] + (1 << n), INF);
	dp[0][0] = 0;
	int const full = 1 << len;
	for (int i = 0; i < n; ++i) {
		int old = a[i];
		for (int mask = 0; mask < full; ++mask) {
			dp[i + 1][mask] = INF;
			for (int value = 1; value < 60; ++value) {
				int sub = msk[value];
				if ((mask | sub) == mask) {
					int now = dp[i][mask ^ sub] + std::abs(old - value);
					if (now < dp[i + 1][mask]) {
						dp[i + 1][mask] = now;
						val[i + 1][mask] = value;
					}
				}
			}
		} 
	}
	int ans = 0;
	for (int mask = 1; mask < full; ++mask) if (dp[n][mask] < dp[n][ans]) ans = mask;
	for (int i = n; i > 0; --i) {
		b[i - 1] = val[i][ans];
		ans ^= getmask(val[i][ans]);
	}
	for (int i = 0; i < n; ++i) printf("%d ", b[i]);
	puts("");
}
