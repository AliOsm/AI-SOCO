#include <bits/stdc++.h>
using namespace std;

const int MAXN = 200005;
int n, m;
int a[MAXN];
int ord[MAXN];
bool cmp(const int &A, const int &B) {
	return make_pair(a[A], -A) < make_pair(a[B], -B);
}
vector<pair<int, int> > queries[MAXN];
int ans[MAXN];

int tree[MAXN];
void upd(int i, int val) {
	i++;
	while (i < MAXN) {
		tree[i] += val;
		i += (i & -i);
	}
}
int read(int i) {
	i++;
	int res = 0;
	while (i > 0) {
		res += tree[i];
		i -= (i & -i);
	}
	return res;
}
int main() {
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%d", a + i);
		ord[i] = i;
	}
	sort(ord, ord + n, cmp);
	reverse(ord, ord + n);
	scanf("%d", &m);
	for (int i = 0; i < m; i++) {
		int k, pos;
		scanf("%d %d", &k, &pos);
		k--;
		queries[k].push_back({i, pos});
	}
	for (int i = 0; i < n; i++) {
		upd(ord[i], 1);
		for (int j = 0; j < queries[i].size(); j++) {
			int pos = queries[i][j].second;
			int ind = queries[i][j].first;
			int lo = 0;
			int hi = n - 1;
			while (lo <= hi) {
				int md = (lo + hi) / 2;
				if (read(md) >= pos) {
					hi = md - 1;
				} else {
					lo = md + 1;
				}
			}
			ans[ind] = lo;
		}
	}
	for (int i = 0; i < m; i++) printf("%d\n", a[ans[i]]);
}
