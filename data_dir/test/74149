/////////////////////////   _LeMur_
#define _CRT_SECURE_NO_WARNINGS
#include <unordered_map>
#include <unordered_set>
#include <functional>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <chrono>
#include <random>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <ctime>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <list>
#include <map>
#include <set>

using namespace std;

const int N = 1000005;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;
mt19937 myrand(chrono::steady_clock::now().time_since_epoch().count());

int t, n;

string s;
string answ = "";

bool update(int &x, int y) {
    if (y > x) {
        x = y;
        return true;
    }
    return false;
}

int h1[N], h2[N];
int p[N];

int calc1(int l, int r) {
    if (l == 0) return h1[r];
    int answ = h1[r] - h1[l - 1] * 1ll * p[r - l + 1] % mod;
    answ = (answ + mod) % mod;
    return answ;
}

int calc2(int l, int r) {
    if (l == 0) return h2[r];
    int answ = h2[r] - h2[l - 1] * 1ll * p[r - l + 1] % mod;
    answ = (answ + mod) % mod;
    return answ;
}

bool dp(int l, int r) {
    return calc1(l, r) == calc2(n - 1 - r, n - 1 - l);
}

int main() {
    p[0] = 1;
    for (int i = 1; i <= 1000 * 1000; i++) {
        p[i] = p[i - 1] * 31ll % mod;
    }

    cin >> t;
    while (t--) {
        cin >> s;

        n = (int)s.size();

        for (int i = 0; i < n; i++) {
            h1[i] = s[i] - 'a' + 1;
            if (i) {
                h1[i] += h1[i - 1] * 31ll % mod;
                h1[i] %= mod;
            }
        }

        reverse(s.begin(), s.end());

        for (int i = 0; i < n; i++) {
            h2[i] = s[i] - 'a' + 1;
            if (i) {
                h2[i] += h2[i - 1] * 31ll % mod;
                h2[i] %= mod;
            }
        }

        reverse(s.begin(), s.end());

        int res = 0;
        answ = "";

        for (int i = n - 1; i >= 0; i--) {
            if (dp(0, i)) {
                bool f = update(res, i + 1);
                if (f) {
                    answ = "";
                    for (int j = 0; j <= i; j++) {
                        answ += s[j];
                    }
                }
                break;
            }
        }

        for (int i = 0; i < n; i++) {
            if (dp(i, n - 1)) {
                bool f = update(res, n - i);
                if (f) {
                    answ = "";
                    for (int j = i; j < n; j++) {
                        answ += s[j];
                    }
                }
                break;
            }
        }

        string str = "";
        for (int i = 0;; i++) {
            if (s[i] != s[n - 1 - i]) break;
            str += s[i];
            if (s[i + 1] == s[n - 2 - i]) continue;
            for (int j = i + 1; j < n - 1 - i; j++) {
                if (dp(j, n - 2 - i)) {
                    bool f = update(res, n - 2 - i - j + 1 + 2 * (i + 1));
                    if (f) {
                        answ = str;
                        for (int h = j; h <= n - 2 - i; h++) {
                            answ += s[h];
                        }
                        reverse(str.begin(), str.end());
                        answ += str;
                        reverse(str.begin(), str.end());
                    }
                    break;
                }
            }
            for (int j = n - 2 - i; j >= i + 1; j--) {
                if (dp(i + 1, j)) {
                    bool f = update(res, j - (i + 1) + 1 + 2 * (i + 1));
                    if (f) {
                        answ = str;
                        for (int h = i + 1; h <= j; h++) {
                            answ += s[h];
                        }
                        reverse(str.begin(), str.end());
                        answ += str;
                        reverse(str.begin(), str.end());
                    }
                }
            }
        }

        cout << answ << endl;
    }
	return 0;
}
