// I can't tell you what it really is,
// I can only tell you what it feels like.
#include "bits/stdc++.h"
using namespace std;

const int MOD = 1e9 + 7;

struct mod_int {
    int val;
    mod_int(long long v = 0) {
        if (v < 0) v = v % MOD + MOD;
        if (v >= MOD) v %= MOD;
        val = v;
    }

    static int mod_inv(int a, int m = MOD) {
        int g = m, r = a, x = 0, y = 1;
        while (r != 0) {
            int q = g / r;
            g %= r; swap(g, r);
            x -= q * y; swap(x, y);
        }
        return x < 0 ? x + m : x;
    }

    mod_int& operator+=(const mod_int &other) {
        val += other.val;
        if (val >= MOD) val -= MOD;
        return *this;
    }

    mod_int& operator-=(const mod_int &other) {
        val -= other.val;
        if (val < 0) val += MOD;
        return *this;
    }

    static unsigned fast_mod(uint64_t x, unsigned m = MOD) {
      return x % m;
    }

    mod_int& operator*=(const mod_int &other) {
        val = fast_mod((uint64_t) val * other.val);
        return *this;
    }

    mod_int& operator/=(const mod_int &other) {
        return *this *= other.inv();
    }

    friend mod_int operator+(const mod_int &a, const mod_int &b) { return mod_int(a) += b; }
    friend mod_int operator-(const mod_int &a, const mod_int &b) { return mod_int(a) -= b; }
    friend mod_int operator*(const mod_int &a, const mod_int &b) { return mod_int(a) *= b; }
    friend mod_int operator/(const mod_int &a, const mod_int &b) { return mod_int(a) /= b; }

    mod_int& operator++() {
        val = val == MOD - 1 ? 0 : val + 1;
        return *this;
    }

    mod_int& operator--() {
        val = val == 0 ? MOD - 1 : val - 1;
        return *this;
    }

    mod_int operator++(int) { mod_int before = *this; ++*this; return before; }
    mod_int operator--(int) { mod_int before = *this; --*this; return before; }

    mod_int operator-() const {
        return val == 0 ? 0 : MOD - val;
    }

    bool operator==(const mod_int &other) const { return val == other.val; }
    bool operator!=(const mod_int &other) const { return val != other.val; }

    mod_int inv() const {
        return mod_inv(val);
    }

    mod_int pow(long long p) const {
        assert(p >= 0);
        mod_int a = *this, result = 1;

        while (p > 0) {
            if (p & 1)
                result *= a;

            a *= a;
            p >>= 1;
        }

        return result;
    }

    friend ostream& operator<<(ostream &stream, const mod_int &m) {
        return stream << m.val;
    }
};

const int N = 71;
const int mx = 19;
mod_int dp[71][1+(1<<19)];
bool vis[N][(1+(1<<19))];

int prime[19], preMask[N];

void pre() {
	int p[101] = {};  
  for (int i = 2; i <= 100; ++i) {
    if (!p[i]) {
      for (int j = i<<1; j <= 100; j += i)
        p[j] |= 1;
    }
  }
  int k = 0;
  for (int i = 2; i < 70; ++i) {
  	if (!p[i]) prime[k++] = i;
  }
  for (int i = 2; i <= 70; ++i) {
  	int mask = 0, tmp = i;
  	for (int j = 0; j < mx; ++j) {
  		if (tmp % prime[j] == 0) {
  			do {
  				mask ^= (1<<j);
  				tmp /= prime[j];
  			}	while (tmp % prime[j] == 0);
  		}
  		if (tmp < prime[j]) break;
  	}
  	preMask[i] = mask;
  }
}

int h[N], cnt = 0;
mod_int po = 2;

mod_int go(int id, int mask) {
	++cnt;
	/*if (cnt > 10000) {
		cout << "seems infinte loop";
		exit(0);
	}*/
	if (id == N) return !mask;
	if (!h[id]) return go(id+1, mask);
	if (vis[id][mask]) return dp[id][mask];

	vis[id][mask] = true;

	mod_int ref = 0;	
		
	if (h[id] == 1) {
		ref = go(id+1, mask);
		ref += go(id+1, mask^preMask[id]);
	}
	else {
		ref = po.pow(h[id]) / 2 * (go(id+1, mask) + go(id+1, mask^preMask[id]));
	}
	return dp[id][mask] = ref;
}

signed main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
	pre();  
	int N, x;
	cin >> N;
	for (int i = 0; i < N; ++i) {
		cin >> x;
		++h[x];
	}
	mod_int ans = go(1,0) - 1;
	cout << ans;
  return 0;
}
// 1). Try forming/rearranging the equations if any
// 2). If problem asks to count, try counting in reverse(it can be easier sometimes)