#include <iostream>
#include <algorithm>
#include <fstream>
#include <vector>
#include <deque>
#include <assert.h>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <stdio.h>
#include <string.h>
#include <utility>
#include <math.h>
#include <bitset>
#include <iomanip>
#include <complex>
using namespace std;
//#define int long long
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef long double ld;
typedef long long ll;
#define X first
#define Y second
#define all(o) o.begin(), o.end()
#define endl '\n'
#define IOS ios::sync_with_stdio(0), cin.tie(0)

int gcd(int x,int y){ return (!y ? x : gcd(y, x%y)); }
const int maxn = 6e5 + 10;
const int SS = 4 * maxn;
int seg[SS], lazy[SS], seg_n;
void upd(int v,int val){
	seg[v] += val;
	lazy[v] += val;
}
void shift(int v){
	upd(2 * v, lazy[v]);
	upd(2 * v + 1, lazy[v]);
	lazy[v] = 0;
}
void update(int x,int y,int val,int v=1,int l=0,int r = seg_n){
	if(x >= r || y <= l)
		return;
	if(x <= l && y >= r){
		upd(v, val);
		return;
	}
	int mid = r + l >> 1;
	shift(v);
	update(x, y, val, 2*v, l, mid);
	update(x, y, val, 2*v + 1, mid, r);
	seg[v] = max(seg[2 * v], seg[2 * v + 1]);
}
int x[maxn], y[maxn];
pii p[maxn];
int32_t main(){
	IOS;
	int n, r;
	cin >> n >> r;
	r = 2 * r + 1;
	int Ans = 0;	
	for(int i=0; i<n; i++){
		int u, v;
		cin >> u >> v;
		x[i] = u + v;
		y[i] = u - v;
		//cout << "xy" << x[i] << " " << y[i] << endl;
	}
	vi ys;
	vector<pair<pii,pii> > qs;
	for(int i=0; i<n; i++){
		p[i] = {x[i], y[i]};
		ys.push_back(y[i]);
		ys.push_back(y[i] + r);
		qs.push_back({{x[i] + r, -1}, {y[i], y[i] + r}});
		qs.push_back({{x[i], +1}, {y[i], y[i] + r}});
	}
	sort(p, p + n);
	sort(all(ys));
	sort(all(qs));
	ys.resize(unique(all(ys)) - ys.begin());
	seg_n = ys.size();
	int ans = 0;
	for(int i=0; i<qs.size(); i++){
		auto t = qs[i];
		//cout << t.X.X << " " << t.X.Y << " " << t.Y.X << " " << t.Y.Y << endl;
		int lef = qs[i].Y.X;
		int rig = qs[i].Y.Y;
		int val = qs[i].X.Y;
		lef = lower_bound(all(ys), lef) - ys.begin();
		rig = lower_bound(all(ys), rig) - ys.begin();
	//	cout << "LEF" << lef << " " << rig << " " << val << endl;
		update(lef, rig, val);
		ans = max(ans, seg[1]);
		//cout << seg[1] << ":DDDDDDDDDDDDDDDDDDDDDDDDDD" << endl;
	}
	cout << ans << endl;
}
