#include <bits/stdc++.h>
using namespace std;

// why am I so weak

const int dx[4] = {0, 1, 0, -1}, dy[4] = {1, 0, -1, 0};
const char cx[4] = {'<', '^', '>', 'v'}, cy[4] = {'>', 'v', '<', '^'};

int n, m;
int deg[2055][2055];
char mat[2055][2055];

typedef pair<int, int> P;

#define ft first
#define sd second

inline bool valid(int x, int y) {
	if (x < 0 || x >= n || y < 0 || y >= m || mat[x][y] != '.') return false;
	return true;
}
int main() {
	scanf("%d %d", &n, &m);

	for (int i = 0; i < n; i++) scanf("%s", mat[i]);

	for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) if (mat[i][j] == '.') {
		for (int k = 0; k < 4; k++) {
			int nx = i + dx[k], ny = j + dy[k];

			if (valid(nx, ny)) {
				deg[i][j]++;		
			}
		}
	}

	queue<P> que;

	for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) if (deg[i][j] == 1) que.push(P(i, j));

	while (!que.empty()) {
		P p = que.front(); que.pop();

		if (mat[p.ft][p.sd] != '.') continue;

		for (int i = 0; i < 4; i++) {
			int nx = p.ft + dx[i], ny = p.sd + dy[i];

			if (valid(nx, ny)) {
				mat[p.ft][p.sd] = cx[i];
				mat[nx][ny] = cy[i];

				for (int j = 0; j < 4; j++) {
					int nnx = nx + dx[j], nny = ny + dy[j];

					if (valid(nnx, nny)) {
						deg[nnx][nny]--;

						if (deg[nnx][nny] == 1) {
							que.push(P(nnx, nny));
						}
					}
				}
			}
		}
	}

	for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) if (mat[i][j] == '.') {
		puts("Not unique");
		return 0;
	}

	for (int i = 0; i < n; i++) puts(mat[i]);

	return 0;
}

