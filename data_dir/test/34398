/*
    TOP GUN: MAVERICK!!
                                */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli mod=1e9+7ll;
lli INF=1e17;
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,y,k,m;
const double pi1=3.14159265358979323846;
//unordered_map<pair<ll,lli>,lli> mp;
lli me(lli a,lli b,lli M)
{
    if(b==0)
    return 1;
    else if(b%2==0)
    return me((a*a)%M,b/2,M);
    else
    return (a%M*me((a*a)%M,(b-1)/2,M)%M)%M;
}
lli mI(lli a,lli m)
{
    return me(a,m-2,m);
}
//lli tot=0;
vector<lli> pf(string s) {
    int n = (int)s.length();
    vector<lli> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}
lli mk[1005][1005];
string a;
lli s[400005][31];
void build(int id = 1,int l = 0,int r = n){
	if(r - l < 2){	//	l + 1 == r
		s[id][a[l]-'a']=1;
		return ;
	}
	int mid = (l+r)/2;
	build(id * 2, l, mid);
	build(id * 2 + 1, mid, r);
	for(int i=0;i<26;i++)
	{
	    s[id][i]=(s[2*id+1][i]||s[2*id][i]);
	}
}
 
void modify(int p,char x,int id = 1,int l = 0,int r = n){
	if(r - l < 2){
		//	l = r - 1 = p
		s[id][a[p]-'a']=0;
		s[id][x-'a']=1;
		// cout<<s[id][x-'a']<<" "<<x<<" "<<p<<" "<<s[id][a[p]-'a']<<" "<<a[p]<<"\n";
		a[p] = x;
		return ;
	}
	// cout<<l<<" "<<r<<" "<<s[id][2]<<"\n";
	int mid = (l + r)/2;
	if(p < mid)
		modify(p, x, id * 2, l, mid);
	else
		modify(p, x, id * 2 + 1, mid, r);
		for(int j=0;j<26;j++)
	{
	 s[id][j]=(s[2*id+1][j]||s[2*id][j]);	
	}
}
// set<lli> st;
bitset<31> sum(int x,int y,int id = 1,int l = 0,int r = n){
	if(x >= r or l >= y)
	{
		bitset<31> bb;
		return bb;
	}
	if(x <= l && r <= y)	
	{
	    bitset<31> ss;
	    for(int j=0;j<26;j++)
	    {
	    	if(s[id][j])
	    	ss[j]=1;
	    }
	    return ss;
	}
	int mid = (l+r)/2;
	bitset<31>  s1,s2;
	s1=sum(x, y, id * 2, l, mid);
	s2=sum(x, y, id * 2 + 1, mid, r);
	for(int j=0;j<31;j++)
	{
		if(s2[j])
		s1[j]=1;
	}
	return s1;
}
int main()
{
    ios_base::sync_with_stdio(0);
    cin>>a;
    n=a.length();
    build(1,0,n);
    lli q;
    cin>>q;
    for(int i=1;i<=q;i++)
    {
    	lli x,y,z;
        cin>>x>>y;
        if(x==1)
        {
        	char z;
        	cin>>z;
            modify(y-1,z,1,0,n);
        }
        else
        {
        	lli z;
        	cin>>z;
        	bitset<31> bb;
            bb=sum(y-1,z,1,0,n);
            lli cc=0;
            for(int j=0;j<31;j++)
            {
            	cc+=bb[j];
            }
            cout<<cc<<"\n";
            // we.clear();
        }
        // st.clear();
    }
}