#include <iostream>
#include <vector>
using namespace std;

int n;
int a[100000];

vector<pair<int, int> > g;
int ans[100000];

int INF = 1 << 30;

int t[400000];

int query(int v, int tl, int tr, int ql, int qr) {
    if (qr < ql) {
        return 0;
    } else if (tl == ql && tr == qr) {
        return t[v];
    } else {
        int tm = (tl + tr) >> 1;
        return max(query(v << 1, tl, tm, ql, min(qr, tm)), query((v << 1) + 1, tm + 1, tr, max(ql, tm + 1), qr));
    }
}

void update(int v, int tl, int tr, int pos, int val) {
    if (tl == tr) {
        t[v] = val;
    } else {
        int tm = (tl + tr) >> 1;
        if (pos <= tm) {
            update(v << 1, tl, tm, pos, val);
        } else {
            update((v << 1) + 1, tm + 1, tr, pos, val);
        }
        t[v] = max(t[v << 1], t[(v << 1) + 1]);
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        ans[i] = 0;
    }
    
    for (int i = 0; i < 400000; i++) {
        t[i] = 0;
    }
    
    for (int i = 0; i < n; i++) {
        while (g.size() > 0 && g.back().first < a[i]) {
            g.pop_back();
        }
        if (g.size() != 0) {
            ans[i] = query(1, 0, n - 1, g.back().second + 1, i - 1) + 1;
            update(1, 0, n - 1, i, ans[i]);
        }
        g.push_back({a[i], i});
    }
    int glAns = 0;
    for (int i = 0; i < n; i++) {
        glAns = max(glAns, ans[i]);
    }
    cout << glAns;
    
    return 0;
}