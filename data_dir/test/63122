#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int n, x, ans = 2e9 + 1;
int a[200005][3];
vector<pair<int, int>> cnt1[200005];
vector<pair<int, int>> cnt2[200005];
vector<int> dp[200005];
int search(int cur, int id){
	int left = 0, right = cnt2[id].size() - 1, mid;
	while (right - left > 1){
		mid = (left + right) / 2;
		int temp = cnt2[id][mid].first;
		if (cur >= temp){
			left = mid;
		}
		if (temp > cur){
			right = mid;
		}
	}
	if (cnt2[id][left].first > cur){
		return left;
	}
	if ((cnt2[id].size() > 1) && (cnt2[id][right].first > cur)){
		return right;
	}
	return -1;
}
int main(){
	cin>>n>>x;
	for (int i=0; i<n; i++){
		cin>>a[i][0]>>a[i][1]>>a[i][2];
	}
	for (int i=0; i<n; i++){
		int diff = a[i][1] - a[i][0] + 1;
		cnt1[diff].push_back(make_pair(a[i][1], a[i][2]));
	}
	for (int i=0; i<n; i++){
		int diff = x - (a[i][1] - a[i][0] + 1);
		if (diff > 0){
			cnt2[diff].push_back(make_pair(a[i][0], a[i][2]));
		}
	}
	for (int i=0; i<=200000; i++){
		if ((cnt1[i].size() > 0) && (cnt2[i].size() > 0)){
			sort(cnt2[i].begin(), cnt2[i].end());
		}
	}
	for (int i=0; i<=200000; i++){
		if ((cnt1[i].size() > 0) && (cnt2[i].size() > 0)){
			for (int j=0; j<cnt2[i].size()+1; j++){
				dp[i].push_back(2e9);
			}
			for (int j=cnt2[i].size()-1; j>=0; j--){
				dp[i][j] = min(dp[i][j+1], cnt2[i][j].second);
			}
		}
	}
	for (int i=0; i<=200000; i++){
		if ((cnt1[i].size() > 0) && (cnt2[i].size() > 0)){
			for (int j=0; j<cnt1[i].size(); j++){
				int curcost1 = cnt1[i][j].second;
				int cur = cnt1[i][j].first;
				int id = i;
				int now = search(cur, id);
				if (now != -1){
					int curcost2 = dp[id][now];
					ans = min(ans, curcost1 + curcost2);
				}
			}
		}
	}
	if (ans == 2e9 + 1){
		cout<<-1;
		return 0;
	}
	cout<<ans;
}