
// ~/BAU/ACM-ICPC/Teams/Rampage/Corvus
// ~/sudo apt-get verdict Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <functional>
#include <assert.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
const int N = 205, M = 1000005;
const ll MOD = 1e9 + 7;
const double eps = 1e-9;

int n, m, dist[N][N];
vector<pair<pair<int, int>, int> > e;

int calc(int a, int b, int c) {
	vector<pair<int, int> > v;
	for (int i = 0; i < n; i++)
		v.push_back(make_pair(dist[a][i], dist[b][i]));
	sort(v.begin(), v.end());
	int maxLeft = 0, maxRight = 0;
	int ans = 1e9;
	for (int i = n - 1; i >= 0; i--) {
		maxLeft = v[i].first;
		if (maxLeft + c < maxRight) ans = min(ans, maxRight);
		else if (maxRight + c < maxLeft) ans = min(ans, maxLeft);
		else ans = min(ans, (maxLeft + maxRight + c) / 2);
		maxRight = max(maxRight, v[i].second);
	}
	maxLeft = 0;
	if (maxLeft + c < maxRight) ans = min(ans, maxRight);
	else if (maxRight + c < maxLeft) ans = min(ans, maxLeft);
	else ans = min(ans, (maxLeft + maxRight + c) / 2);
	return ans;
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif	
	scanf("%d%d", &n, &m);
	memset(dist, 0x3f3f3f3f, sizeof dist);
	for (int i = 0, a, b, c; i < m; i++) {
		scanf("%d%d%d", &a, &b, &c);
		a--, b--;
		c *= 2;
		dist[a][b] = c, dist[b][a] = c;
		e.push_back(make_pair(make_pair(a, b), c));
	}
	for (int i = 0; i < n; i++)
		dist[i][i] = 0;
	for (int k = 0; k < n; k++)
		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
	int ans = 1e9;
	for (int i = 0; i < m; i++)
		ans = min(ans, calc(e[i].first.first, e[i].first.second, e[i].second));
	printf("%0.2lf\n", 1.0*ans / 2);
	return 0;
}