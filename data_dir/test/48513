#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
 
#define SZ(x) ((int)(x).size())
#define PB(x) push_back(x)
#define MEMSET(x,v) memset(x,v,sizeof(x))
#define REP(i,n) for(int i=0;(i)<(n);++(i))
#define x first
#define y second
#define INF (0x3f3f3f3f)
 
typedef long long LL;
typedef pair<LL, LL> P2;
typedef tree<int, null_type, less<>, rb_tree_tag, tree_order_statistics_node_update> OST;
mt19937 rng32(chrono::steady_clock::now().time_since_epoch().count());
template<class A, class B> inline bool mina(A &x, B y) {return (x > y)?(x=y,1):0;}
template<class A, class B> inline bool maxa(A &x, B y) {return (x < y)?(x=y,1):0;}
 
const int MAXN = 2e5+5;
const int MAXD = 11;
 
map<int, int> cnt_fraction_digits[MAXD];
int N, K;
int in[MAXN];
int num_digits[MAXN];
int aaa[MAXN];
 
int main() {
    scanf("%d %d", &N, &K);
    REP(i, N) {
        scanf("%d", &in[i]);
        LL x = in[i];
        while (x) {
            num_digits[i]++;
            x /= 10;
        }
        x = in[i];
        REP(j, MAXD) {
            x %= K;
            cnt_fraction_digits[j][x]++;
            if (j == num_digits[i]) aaa[i] = x;
            x *= 10;
        }
    }
    LL ans = 0;
    REP(i, N) {
        LL b = in[i];
        int need = (K - (b % K)) % K;
        if (cnt_fraction_digits[num_digits[i]].count(need))
            ans += cnt_fraction_digits[num_digits[i]][need];
        if (aaa[i] == need) ans--;
    }
    cout << ans << endl;
    return 0;
}