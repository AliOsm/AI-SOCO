#include <iostream>
#include <cstdio>
#include <algorithm>
#include <map>

using namespace std;

int dp[310];
int n;
int l[350], c[350];
map < int, int > s;
map < int, int > :: iterator it;

int gcd (int a, int b)
{
    if (b == 0)
        return a;
    else
        return gcd (b, a % b);
}

int main()
{
//    freopen ("input.txt", "r", stdin);
    cin >> n;
    for (int i = 0; i < n; i ++)
        cin >> l[i];
    for (int i = 0; i < n; i ++)
        cin >> c[i];
    for (int i = 0; i < n; i ++)
    {
        if ( s.find( l[i] ) == s.end() )
            s[ l[i] ] = c[i];
        else
            s[ l[i] ] = min (s[ l[i] ], c[i]);
        it = s.begin();
        for (; it != s.end(); it ++)
        {
            int zn = it -> first;
            int sum = it -> second;

                int newC = gcd (zn, l[i]);
                int newSum = sum + c[i];
                if ( s.find( newC ) == s.end() )
                    s[newC] = newSum;
                else
                    s[newC] = min (s[newC], newSum);

        }
    }
    it = s.begin();
    while (it -> first < 1)
        it ++;
    if (it -> first != 1)
    {
        cout << "-1";
        return 0;
    }
    cout << it -> second;
    return 0;
}
