#include<bits/stdc++.h>
using namespace std;
typedef long double ld;
typedef long long int ll;

const ll logx=30;
const ll N=1e5+5;
const ll M=3e5+5;
const ll mod=1e9+7;
const ll INF=1e18+5;
const double PI = 3.14159265;

#define ints(n) scanf("%d",&n)
#define intp(n) printf("%d\n",n)
#define longs(n) scanf("%intd",&n)
#define longp(n) printf("%intd\n",n)

inline ll mul(ll a, ll b){ return (a * 1ll * b) % mod; }
inline ll sub(ll a, ll b){ ll c = a - b; if(c < 0) c += mod; return c; }
inline ll add(ll a, ll b){ ll c = a + b; if(c > mod) c -= mod; return c; }

#define f first
#define s second
#define pb(x) push_back(x)
#define pf(x) push_front(x)
#define mp(x,y) make_pair(x,y)
#define GCD(a,b) __gcd((a),(b))
#define all(v) v.begin(),v.end()
#define bits(x) __builtin_popcount(x)
#define LCM(a,b) ((a)*(b))/GCD((a),(b))
#define ms(dp,val) memset(dp,val,sizeof(dp))
#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);
#define printclock cerr<<"Time : "<<1000*(ld)clock()/(ld)CLOCKS_PER_SEC<<"ms\n";
template<typename T> T power(T x,T y,ll m){T ans=1;while(y>0){if(y&1LL) ans=(ans*x)%m;y>>=1ll;x=(x*x)%m;}return ans%m;}

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

#define pii pair<int,int>

int n,m;
set<int> ser;
vector<int> rows;
map<int,vector<int> > block;
map<int,vector<pair<pii,pii> > > freex;

void Check()
{
  int ini=block[1].size(),lim=n+1,siz=rows.size();
  if(ini){lim=block[1][0];}
  for(auto &i:freex[rows[0]])
  {
    if(i.s.f>lim){break;}
    i.f.f=1;
  }
  for(int i=0;i<siz-1;i++)
  {
    int currow=rows[i];
    int nexrow=rows[i+1];
    for(auto j:freex[rows[i]])
    {
      if(!j.f.f){continue;}
      ll l=j.f.s,r=j.s.s;
      for(auto &h:freex[rows[i+1]])
      {
        if(h.f.f){continue;}
        if(h.s.f<l)
        {
          if(h.s.s<l){continue;}
          h.f.f=1;
          h.f.s=l;
        }
        else
        {
          if(h.s.f>r){break;}
          h.f.f=1;
          h.f.s=h.s.f;
        }
      }
    }
  }
  int path=0;
  if(rows[siz-1]==n)
  {
    vector<pair<pii,pii> > lasblock=freex[rows[siz-1]];
    int lasblocksiz=lasblock.size();
    int l=lasblock[lasblocksiz-1].s.f,r=lasblock[lasblocksiz-1].s.s;
    path|=(lasblock[lasblocksiz-1].f.f);
    if(!path){cout<<-1<<endl;}
    else
    {
      if(r==n){cout<<2*(n-1)<<endl;}
      else{cout<<-1<<endl;}
    }
  }
  else
  {
    for(auto i:freex[rows[siz-1]]){path|=(i.f.f);}
    if(path){cout<<2*(n-1)<<endl;}
    else{cout<<-1<<endl;}
  }
}

int main()
{
  fast;
  cin>>n>>m;
  int fcheck=0;
  while(m--)
  {
    int u,v;
    cin>>u>>v;
    ser.insert(u);
    block[u].pb(v);
    fcheck|=(u==n&&v==n);
  }
  if(fcheck){cout<<-1<<endl;exit(0);}
  vector<int> temp;
  for(auto i:ser){rows.pb(i);sort(all(block[i]));}
  for(int i=1;i<rows.size();i++)
  {
    int cur=rows[i];
    int prev=rows[i-1];
    if(cur-prev==1){continue;}
    temp.pb(cur-1);
    if(prev+1>=cur-1){continue;}
    temp.pb(prev+1);
  }
  for(auto i:temp){freex[i].pb(mp(mp(0,1),mp(1,n)));rows.pb(i);}
  sort(all(rows));
  for(auto i:rows)
  {
    vector<int> blocked=block[i];
    int siz=blocked.size();
    if(!siz){continue;}
    if(blocked[0]>1){freex[i].pb(mp(mp(0,1),mp(1,blocked[0]-1)));}
    for(int j=0;j<siz-1;j++)
    {
      if(blocked[j]+1==blocked[j+1]){continue;}
      freex[i].pb(mp(mp(0,blocked[j]+1),mp(blocked[j]+1,blocked[j+1]-1)));
    }
    if(blocked[siz-1]+1<=n){freex[i].pb(mp(mp(0,blocked[siz-1]+1),mp(blocked[siz-1]+1,n)));}
  }
  Check();
}
