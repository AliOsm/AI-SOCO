#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 
 
#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define ppl pair<ll,ll>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcountll
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>
#define fr first
#define se second
 
using namespace std;
using namespace __gnu_pbds;
 
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T>
void pt(T v){cout<<v;}
template <typename T>
void pt(vector<T> v){for(auto &i:v)pt(i),cout<<" ";}
template <typename T1, typename T2>
void pt(map<T1, T2> v){for(auto &i:v)pt(i.first),cout<<"->",pt(i.second),cout<<"\n";}
template <typename T>
void pt(set<T> v){for(auto &i:v)pt(i);cout<<" ";}
 
char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}
 
const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N = 1000000;
const long double PI = acos(-1);
 
 
int n;
vpp edg;
 
int tr[5*N + 5];
 
void update(int node, int a, int b, int i, int x) {
  if (a > b || a > i || b < i)return;
  if (a == b) {
    tr[node] = x;
    return;
  }
  int mid = (a + b) /2;
  update(node*2, a, mid, i, x);
  update(node*2+1, mid + 1, b, i, x);
  tr[node] = min(tr[node*2], tr[node*2 + 1]);
}
 
int query(int node, int a, int b, int i, int j) {
  if (a > b || i > j || a > j || b < i) return infs;
  if (a >= i && b <= j) return tr[node];
  int mid = (a + b) /2;
  int r1 = query(node*2, a, mid, i, j);
  int r2 = query(node*2+1, mid + 1, b, i, j);
  return min(r1, r2);
}
vi vlist[N + 5];
int ip[N  + 5];
int el[N + 5];
int id[N + 5];
int find(int p) {
  int root = p;
  while (root != id[root]) root = id[root];
  while (p != root) {
    int tmp = id[p];
    id[p] = root;
    p = tmp;
  }
  return root;
}
int comps;
void merge(int u, int v) {
  int uu = find(u);
  int vv = find(v);
  if (uu == vv) return;
  comps--;
  id[vv] = uu;
}
int main()
{
  finp;
  cin >> n;
  afor(i, 0, 10 * n) tr[i] = infs;
  vpp v;
 
  afor(i, 1, n) {
    int l, r;
    cin >> l >> r;
    ip[l] = i;
    el[i] = r;
    vlist[r].pb(l);
  }
 // sort(v.begin(), v.end());
  int m = 0;
 
  afor(en, 1, 2 * n) {
    for (int st : vlist[en]) {
      vpp tmp;
      int ps = ip[st];
      while(m <= n - 1) {
        int lef = query(1, 1, 2 * n, st, en);
        if (lef >= st) break;
        m++;
        int pos = ip[lef];
        edg.pb({pos, ps});
        int rv = el[pos];
        update(1, 1, 2 * n, rv, infs);
        tmp.pb({rv, lef});
      }
      for (auto xx : tmp) update(1, 1, 2 * n, xx.fr, xx.se);
    }
 // cout << en << " " << vlist[en].size() << endl;
    for (int st : vlist[en]) {
      int ps = ip[st];
      update(1, 1, 2 * n, en, st);
      //assert(0);
    }
 
  }
  //update(1, 1, 2*n, 3, 5);
 // cout << query(1, 1, 2*n, 1, 2*n) << endl;
 
  if (m != n - 1) {
    cout << "NO";
    return 0;
  }
  afor(i, 1, n) id[i] = i;
  comps = n;
  for (auto xx : edg) merge(xx.fr, xx.se);
 
  if (comps == 1) cout << "YES";
  else cout << "NO";
 
 
 
return 0;
}