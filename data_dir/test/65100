#include <iostream>
#include <fstream>
#include <algorithm>
#include <iomanip>
#include <random>
#include <ctime>
#include <bitset>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <cmath>
#include <cstring>
#include <queue>
#include <deque>
#include <stack>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define ld long double
#define ull unsigned long long
#define ll long long
#define pb push_back
#define pii pair<int, int>
#define pll pair<ll, ll>
#define all(x) x.begin(), x.end()
#define fast_io cout.tie(0), cin.tie(0), ios_base::sync_with_stdio(0)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
using namespace std;
ld eps = (ld)1 / 1e15;
ll inf = 1e18, mod2 = 998244353, mod1 = 1e9 + 7;
ll sqr(ll a) { return a * a; }
ll qb(ll a) { return a * a * a; }
ll gcd(ll a, ll b) { return !a ? b : gcd(b % a, a); }
ll binpow(ll a, ll b, ll mod) { return b ? (b % 2 ? (a * (sqr(binpow(a, b / 2, mod)) % mod)) % mod : sqr(binpow(a, b / 2, mod)) % mod) : 1; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ll a[40002], b[40002], k1[40002], k2[40002], prefa[40002], prefb[40002];

int main()
{
    //freopen("race.in", "r", stdin), freopen("race.out", "w", stdout);
    fast_io;
    ll n, m, i, j, t, k, ans = 0;
    cin >> n >> m >> k;
    for (i = 1; i <= n; i++) cin >> a[i], prefa[i] = a[i] + prefa[i - 1];
    for (i = 1; i <= m; i++) cin >> b[i], prefb[i] = b[i] + prefb[i - 1];
    for (i = 1; i <= sqrt(k); i++)
    {
        if (k % i) continue;
        t = i;
        for (j = t; j <= n; j++)
            if (prefa[j] - prefa[j - t] == t) k1[t]++;
        for (j = t; j <= m; j++)
            if (prefb[j] - prefb[j - t] == t) k2[t]++;
        t = k / i;
        if (t == i) break;
        for (j = t; j <= n; j++)
            if (prefa[j] - prefa[j - t] == t) k1[t]++;
        for (j = t; j <= m; j++)
            if (prefb[j] - prefb[j - t] == t) k2[t]++;
    }
    for (i = 1; i <= sqrt(k); i++)
    {
        t = k / i;
        if (i <= n && t <= m) ans += k1[i] * k2[t];
        if (t != i && i <= m && t <= n) ans += k2[i] * k1[t];
    }
    cout << ans;
    return 0;
}