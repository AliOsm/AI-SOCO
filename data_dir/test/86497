#define _CRT_SECURE_NO_WARNINGS
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <fstream>
#include <map>
#include <set>
#include <queue>
#include <memory.h>
#include <time.h>
#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <algorithm>
#include <cstdio>
#include <set>
#include <queue>
#include <cassert>
#include <climits>
#define sz(x) int((x).size())
#define FOR(i,a,b) for(ll(i) = (a); (i) <= (b); ++(i))
#define ROF(i,a,b) for(ll(i) = (a); (i) >= (b); --(i))
#define rep(i,n) for (int(i) = 0; (i) < (n); ++(i))
#define fe(i,a) for (ll(i) = 0; (i) < int((a).size()); ++(i))
#define C(a) memset((a),0,sizeof(a))
#define pb push_back
#define ppb pop_back
#define all(c) (c).begin(), (c).end()
#define sqr(a) (a)*(a)
#define mp(a,b) make_pair((a), (b))
#define X first
#define Y second
#define file freopen("input.txt","r",stdin)
#define file2 freopen("output.txt", "w",stdout)
#define text freopen("input.txt","r",stdin); freopen("output.txt", "w",stdout)
using namespace std;
typedef vector<int> vint;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pii;
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <string>
#include <vector>
#include <climits>
#include <cassert>
#define y1 vamdlsfmvldf
using namespace std;
const int mod = (int)1e9 + 7;
const int INF = (int)(1e9);
const int N = 210;
using namespace std;
#define INF (1<<29)
int graph[N][N];
int dist[N][N];
bool edge[N][N];
double func(int d, vector <pair <int, int> > v){
    int n = (int)v.size();
    sort(v.begin(), v.end());
    reverse(v.begin(),v.end());
    int prev = -1;
    vector <pair <int, int> > w;
    rep(i, n) if(v[i].second > prev){
        prev = v[i].second;
        w.push_back(v[i]);
    }
    int m = (int)w.size();
    double ans = min(w[0].first, w[m - 1].second);
    rep(i, m - 1){
        double tmp = (w[i].second + w[i + 1].first + d) / 2.0;
        ans = min(ans, tmp);
    }
    return ans;
}

int main(){
    int n, m;
    cin >> n >> m;
    rep(i, n)
        rep(j, n)
        if(i != j) dist[i][j] = INF;
    int a, b, w;
    rep(i, m){
        scanf("%d%d%d", &a, &b, &w); a--; b--;
        graph[a][b] = graph[b][a] = w;
        dist[a][b] = dist[b][a] = w;
        edge[a][b] = edge[b][a] = true;
    }
    rep(k, n)
        rep(i, n)
            rep(j, n)
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
    double ans = INF;
    rep(i, n)
        rep(j, n)
            if(i < j && edge[i][j]){
            vector <pair <int, int> > v;
            rep(k, n) v.push_back(make_pair(dist[i][k], dist[j][k]));
            double tmp = func(graph[i][j], v);
            ans = min(ans, tmp);
    }
    printf("%.9lf\n", ans);
    return 0;
}
