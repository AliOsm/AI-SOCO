/*jai mata di
let's rock*/
#include<bits/stdc++.h>
using namespace std;
const int N=1000004;
const int Inf=1e9+7;
char s[N];
int tree[4*N],sum[N];
void build(int nd,int l,int r)
{
    if(l==r)
    {
        tree[nd]=sum[l];
        return ;
    }
    int mid=(l+r)/2;
    build(2*nd,l,mid);
    build(2*nd+1,mid+1,r);
    tree[nd]=min(tree[2*nd],tree[2*nd+1]);
}
int query(int nd,int l,int r,int ql,int qr)
{
    if(l>r || qr<l || ql>r) return Inf;
    if(ql<=l && qr>=r) return tree[nd];
    int mid=(l+r)/2;
    return min(query(2*nd,l,mid,ql,qr),query(2*nd+1,mid+1,r,ql,qr));
}
int main()
{
    int n;
    scanf("%d",&n);
    scanf("%s",s+1);
    int i;
    for(i=1;i<=n;i++)
    {
        if(s[i]=='(')
            sum[i]=sum[i-1]+1;
        else sum[i]=sum[i-1]-1;
    }

    build(1,1,n);
    if(sum[n]==2)
    {
        int cnt=0;
        for(i=1;i<=n;i++)
        {
            if(sum[i]<0) break;
            if(s[i]=='(')
            {
                int mn=query(1,1,n,i,n);
                if(mn>=2) cnt++;
            }
        }
        printf("%d\n",cnt);
    }
    else if(sum[n]==-2)
    {
        int cnt=0;
        for(i=1;i<=n;i++)
        {
            if(s[i]==')')
            {
                int mn=query(1,1,n,i,n);
                if(mn>=-2)
                    cnt++;
            }
            if(sum[i]<0)
                break;
        }
        printf("%d\n",cnt);
    }
    else printf("0\n");
    return 0;
}
