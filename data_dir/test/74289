#include<cstdio>
#include<algorithm>

int c, n, m, p[200005], a[200005];
long long t;
int ans1, ans2;

struct mypair {
	long long x;
	int y;
	mypair operator + (const mypair& other) const {
		mypair n;
		n.x = x + other.x;
		n.y = y + other.y;
		return n;
	}
	mypair operator += (const mypair& other) {
		x += other.x;
		y += other.y;
	}
	mypair() {
		x = y = 0;
	}
	mypair(long long x, int y): x(x), y(y) {}
	bool operator < (const mypair& other) const{
		return x < other.x || y < other.y;
	}
} bit[200005];

void update(int x, mypair y) {
	for (int i = x; i <= n; i += i & (-i)) {
		bit[i] += y;
	}
}

mypair query(int x) {
	mypair y;
	for (int i = x; i; i -= i & (-i)) {
		y += bit[i];
	}
	return y;
}

mypair search1(mypair x) {
	int l = 0, r = n;
	while (l < r) {
		int m = (l + r + 1) / 2;
		if (x.x < query(m).x) {
			r = m - 1;
		} else {
			l = m;
		}
	}
	return query(l);
}

mypair search2(mypair x) {
	int l = 0, r = n;
	while (l < r) {
		int m = (l + r + 1) / 2;
		if (x.y < query(m).y) {
			r = m - 1;
		} else {
			l = m;
		}
	}
	return query(l);
}

int search3(mypair x) {
	int l = 0, r = n;
	while (l < r) {
		int m = (l + r + 1) / 2;
		mypair tmp = query(m);
		if (x.x < tmp.x || x.y < tmp.y) {
			r = m - 1;
		} else {
			l = m;
		}
	}
	return query(l).y;
}

int main() {
	scanf("%d", &c);
	while (c --> 0) {
		scanf("%d %d %lld", &n, &m, &t);
		for (int i = 1; i <= n; i++) {
			scanf("%d", &p[i]);
			a[i] = i;
		}
		std::sort(a + 1, a + n + 1, [] (int x, int y) {
			return p[x] < p[y];
		});
		ans1 = ans2 = 0;
		for (int i = 1, j = 1; i <= n; i = j) {
			while (j <= n && p[a[i]] == p[a[j]]) j++;
			for (int k = i; k < j; k++) {
				update(a[k], {p[a[k]], 1});
			}
			mypair tmp = search1({t/2, 0});
			mypair tmp2 = search2({0, tmp.y - tmp.y % m});
			int tmp3 = search3({t - tmp2.x, tmp.y - tmp.y % m + m});
			if (tmp3 >= ans1) {
				ans1 = tmp3;
				ans2 = p[a[i]];
			}
		}
		for (int k = 1; k <= n; k++) {
			update(k, {-p[k], -1});
		}
		if (ans2 > t) ans2 = t;
		printf("%d %d\n", ans1, ans2);
	}
}