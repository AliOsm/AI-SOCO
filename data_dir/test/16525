#include<iostream>
#include <bits/stdc++.h>
#define ll long long
//g++ -std=c++11 main.cpp && a.exe
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
using namespace std;
int n , m ,h[200009],heavy[200009],ans[200009],q,a[200009] , cnt[200009] ;
string s[100009];
vector<int> v[200009],root, newid[200009],vis[200009];
vector<pair<int,int> > qq[200009] ;
void add(int node , int val){
  vis[h[node]][a[node]]+=val;
  if(vis[h[node]][a[node]]==0 || (vis[h[node]][a[node]]==1 &&val==1))
  cnt[h[node]]+=val;
  for(auto i : v[node])
  add(i,val);
}
int dfs(int node , int p)
{
  int sum=1 , mx=-1 ;
  h[node]=h[p]+1;
  newid[h[node]].push_back(node);
  vis[h[node]].push_back(0);
  vis[h[node]].push_back(0);
  for(auto i : v[node])
  {
    int x=dfs(i,node);
    sum+=x;
    if(x>mx)
    mx=x , heavy[node]=i;
  }
  return sum ;
}
void solve(int node , int keep){
  for(auto i : v[node])
  if(i!=heavy[node])
  solve(i,0);
  if(heavy[node])
  solve(heavy[node],1);

  for(auto i : v[node])
  if(i!=heavy[node])
  add(i,1);

  vis[h[node]][a[node]]++;
  if(vis[h[node]][a[node]]==1)
  cnt[h[node]]++;
  //cout<<node<<" "<<mop[3]["igor"]<<" "<<cnt[3]<<endl;
  while(!qq[node].empty())
 {

   ans[qq[node].back().second]=cnt[qq[node].back().first];
   qq[node].pop_back();
 }
 if(keep==0){
    for(auto i :v[node])
    add(i,-1);
    vis[h[node]][a[node]]--;
    if(vis[h[node]][a[node]]==0)
    cnt[h[node]]--;
  }
}
int main()
{
  IO
  cin>>n;
  map<string,int> id ;
  int cnt=1;
  for(int i=1;i<=n;i++){
    int x;
    cin>>s[i]>>x;
    v[x].push_back(i);
  }

    dfs(0,n+5);
  for(int i=1;i<=n;i++){
    map<string,int> mop ;
    int cntt=1 ;
    for(auto j :newid[i])
    if(!mop[s[j]])
    a[j]=cntt++ , mop[s[j]]=cntt-1;
    else
    a[j]=mop[s[j]];
  }

  cin>>q;
  for(int i=1;i<=q;i++){
    int x, y ;
    cin>>x>>y;

    qq[x].push_back({y+h[x],i});
  }

  solve(0,1);
  for(int i=1;i<=q;i++)
  cout<<ans[i]<<endl;
    return 0;
}
