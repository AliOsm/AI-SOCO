#include <bits/stdc++.h>
using namespace std;
#define sc(x)            scanf("%d",&x)
#define scc(x)           scanf("%c",&x)
#define scl(x)           scanf("%lld",&x)
#define sz(v)	     	(v.size())
#define mem(v, d)		memset(v, d, sizeof(v))
#define oo				2000000100
#define OO				2000000000000000100
#define PI 3.14159265
#define S second
#define F first
#define Ceil(x,y) ((x+y-1)/y)
#define EPS 1e-8
#define IO ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL);
const double pi=3.14159265358979323846264338327950288419716939937510582097494459;
typedef unsigned int uint;
typedef long long ll;
int dX[] = {0,0,1,-1,0};
int dY[] = {1,-1,0,0,0};
string alpha = "abcdefghijklmnopqrstuvwxyz";
const int MOD = 998244353;
const int N = 100100;
vector<int>adj[N];
int n,m,q,par[N],ans[N],cnt;
bool arr[1005][1005];
struct query{ int t,x,y; };
vector<query>Q;
void toggle(int x)
{
    for(int i = 1;i<=m;++i){
            if(arr[x][i]) cnt--,arr[x][i] = 0;
            else cnt++,arr[x][i] = 1;
        }
}
void Update(int idx)
{
    if(!idx) return ;
    query cur = Q[idx];
    if(cur.t == 1 && !arr[cur.x][cur.y]) arr[cur.x][cur.y] = 1,cnt++;
    if(cur.t == 2 && arr[cur.x][cur.y]) arr[cur.x][cur.y] = 0,cnt--;
    if(cur.t == 3) toggle(cur.x);
}

void dfs(int cur)
{
    bool old_value; int old_answer;

    if(cur && Q[cur].t <= 2)
        old_value = arr[Q[cur].x][Q[cur].y],old_answer = cnt;

    Update(cur);
    ans[cur] = cnt;

    for(auto u:adj[cur]) dfs(u);

    if(cur && Q[cur].t <= 2)
        arr[Q[cur].x][Q[cur].y] = old_value,cnt = old_answer;
    else
        toggle(Q[cur].x);
}
int main()
{
    for(int i = 1;i<N;++i) par[i] = i;
    sc(n); sc(m); sc(q);
    int cur = 0; Q.resize(q+5);

    for(int i = 1;i<=q;++i)
    {
        int t,x,y = -1; sc(t); sc(x);
        if(t<=2) sc(y);
        Q[i] = {t,x,y};
        if(t == 4) par[i] = par[x],cur = par[x];
        else adj[cur].push_back(i),cur = i;
    }
    dfs(0);
    for(int i = 1;i<=q;++i)
        printf("%d\n",ans[par[i]]);

    return 0;
}
