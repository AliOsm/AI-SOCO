#pragma GCC optimise("Ofast,unroll-loops,no-stack-protector,fast-math");
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,abm,mmx,popcnt,avx,avx2,tune=native")
          
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
          
using namespace std;
using namespace __gnu_pbds;
          
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
          
using matrix = vector<vector<ll>>;
template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
          
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
//#define int long long
          
void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifndef _offline
    //freopen("trains.in", "r", stdin);
    //freopen("trains.out", "w", stdout);
    #endif
}

signed main() {
    FAST_IO();
    int n;
    string a, b;
    vector<int> c;
    cin >> n >> a >> b;
    for (int i = 0; i < n; ++i) {
        c.push_back(int(a[i]) + int(b[i]) - 2 * int('a') + 2);
    }
    int carry = 0;
    for (int i = n - 1; i >= 0; --i) {
        while (c[i] > 26) {
            if (i == 0) {
                carry++;
            }
            else {
                c[i - 1]++;
            }
            c[i] -= 26;
        }
    }
    for (int i = 0; i < n; ++i) {
        carry *= 26;
        carry += c[i];
        c[i] = carry / 2;
        carry %= 2;
    }
    for (int i = 0; i < n; ++i) {
        if (c[i] == 0) {
            for (int j = i - 1; j >= 0; --j) {
                if (c[j] != 1) {
                    c[j]--;
                    for (int k = j + 1; k <= i; ++k) {
                        c[k] = 26;
                    }
                    break;
                }
            }
        }
    }
    for (int i = 0; i < n; ++i) {
        cout << char('a' + c[i] - 1);
    }
    return 0;
}