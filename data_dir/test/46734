#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

typedef long long ll;
using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000005;
const ll INFLL = 1000000000000000002ll;
const ll MOD = 1000000007;

inline ll min(ll a, ll b, ll c){return min(min(a,b),c);}
inline ll min(ll a, ll b, ll c, ll d){return min(min(min(a,b),c),d);}
inline ll max(ll a, ll b, ll c){return max(max(a,b),c);}
inline ll max(ll a, ll b, ll c, ll d){return max(max(max(a,b),c),d);}

// -------------------------------------------------------------------------------------------------------------

bool In[100005], U[100005];
int Curr[100005], N, Q;
vector<int> P[100005];

string tostr(int x)
{
    string ret;
    while(x)
    {
        ret += (char) (x%10 + '0');
        x /= 10;
    }
    reverse(all(ret));
    return ret;
}

string add(int x)
{
    if(In[x]) return "Already on";
    for(int p : P[x]) if(Curr[p]) return "Conflict with " + tostr(Curr[p]);
    In[x] = true;
    for(int p : P[x]) Curr[p] = x;
    return "Success";
}

string rem(int x)
{
    if(!In[x]) return "Already off";
    In[x] = false;
    for(int p : P[x]) Curr[p] = 0;
    return "Success";
}

int main()
{
    f(i,2,100000) if(!U[i]) for(int k = i; k <= 100000; k += i) P[k].pb(i), U[k] = true;
    cin >> N >> Q;
    while(Q--)
    {
        string t;
        cin >> t;
        if(t[0] == '+')
        {
            int x;
            scanf("%d", &x);
            cout << add(x) << "\n";
        }
        else
        {
            int x;
            scanf("%d", &x);
            cout << rem(x) << "\n";
        }
    }
}
