#include <bits/stdc++.h>
using namespace std;
 
# define fast ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
# define cases cin >> tests; while(tests--)
# define int long long
# define ch cout << "no rest for the wicked\n\n";
# define ch1(x) cout << '\n' << #x" : " << x << '\n';
# define ch2(x, y) cout << '\n' <<  #x" : " << x << " || " << #y" : " << y << '\n';
# define lcm(a, b) (((a) * (b))/__gcd(a, b))
# define fore(i, n) for(auto i = 0; i < n; i++)

int ans[350000] = {0}, visited[350000];
int alla = 0, balla = 0;
vector <int> arr[350001], path;

void dfs(int a, int b)
{
    visited[a] = 1;
    path.push_back(a);
    
    if(a == b)
    {
        fore(i, path.size())
        {
            // cout << path[i] << ' ';
            ans[path[i]] = 1;
        }
        // cout << endl;
    }
    else
    {
        for(int i = 0; i < arr[a].size(); i++)
        {
            if(!visited[arr[a][i]])
            {
                dfs(arr[a][i], b);
            }
        }
    }
    path.pop_back();
}

void dafus( int node, int &alla)
{
    visited[node] = 1;
    alla ++;
    for(int i = 0; i < arr[node].size(); i++)
    {
        if(!visited[arr[node][i]] && ans[arr[node][i]] == 0)
            dafus(arr[node][i], alla);
    }
}

void solve()
{
    int nodes, f, r;
    cin >> nodes >> f >> r;
    fore(i, nodes-1)
    {
        int u, v;
        cin >> u >> v;
        arr[u].push_back(v);
        arr[v].push_back(u);
    }
    //int visited[nodes+1] = {0};
    //vector <int> path;
    dfs(f, r);
    fore(i, nodes+1) visited[i] = 0;
    
    dafus(r, alla);
    dafus(f, balla);
    
    cout << (nodes * (nodes - 1)) - (balla * alla);
}

signed main()
{
    fast;
    int tests = 1;
    
    // cases
    solve();
    
    return 0;
}