#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const int mx = 1000050;

ll tree[4*mx];
ll prop[4*mx];

void propagate(ll l , ll r , ll idx)
{
    if(prop[idx] == 0)return;
    ll node = r-l+1;
    tree[idx] += node*prop[idx];
    if(l != r)
    {
        prop[2*idx] += prop[idx];
        prop[2*idx+1] += prop[idx];
    }
    prop[idx] = 0;
}

void update(ll l , ll r , ll idx , ll left ,ll right , ll val)
{
    propagate(l,r,idx);
    if(l > right || r < left)return;
    if(l >= left && r <= right)
    {
        ll node = r-l+1;
        tree[idx] += node*val;
        if(l != r)
        {
            prop[2*idx] += val;
            prop[2*idx+1] += val;
        }
        return;
    }
    ll lc , rc , mid = (l+r)/2;
    lc = 2*idx;
    rc = lc+1;
    update(l,mid,lc,left,right,val);
    update(mid+1,r,rc,left,right,val);
    tree[idx] = tree[lc] + tree[rc];
}
void update2(ll l , ll r, ll idx , ll tar)
{
    propagate(l,r,idx);
    if(tar < l || tar > r)
    {
        return;
    }
    if(tar == l && l== r)
    {
        tree[idx] = 0;
        return;
    }
    ll lc , rc , mid = (l+r)/2;
    lc = 2*idx;
    rc = lc+1;
    update2(l,mid,lc,tar);
    update2(mid+1,r,rc,tar);
    tree[idx] = tree[lc] + tree[rc];
}

int main()
{

    ll sum = 0 , i , j , k , n , m , type , cnt = 1 , l ,val;
    double a , b , c;
    scanf("%lld",&n);
    while(n--)
    {
        scanf("%lld",&type);
        if(type == 1)
        {
            scanf("%lld %lld",&l,&val);
            update(1,mx-1,1,1,l,val);
        }
        else if(type == 2)
        {
            cnt++;
            scanf("%lld",&val);
            update(1,mx-1,1,cnt,cnt,val);
        }
        else
        {
            update2(1,mx-1,1,cnt);
            cnt--;
        }
        a = (double)tree[1];
        b=  (double)cnt;
        c = a/b;
        printf("%.10lf\n",c);
    }
    return 0;
}
