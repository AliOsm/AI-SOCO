#pragma comment(linker, "/STACK:256000000")
 
#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <time.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <random>
#include <unordered_map>
#include <unordered_set>
#include <complex>
using namespace std;
 
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef complex < double > base;
const int INF = (int)(1e9);
const int64 LINF = (int64)(1e18);
const double EPS = 1e-13;
#define sq(x) ((x)*(x))
#define FAIL() ((*(int*)(0))++)
const int MAXN = 2000100;

int n, m, k;
vector < int > ans;
vector < vector < int > > gr, res;
int was[MAXN];

void dfs(int u, int anc)
{
	if (was[u])
		return;
	was[u] = 1;
	ans.push_back(u);
	for(int i = 0; i < gr[u].size(); ++i)
	{
		int to = gr[u][i];
		dfs(to, u);
	}
	if (u != 0)
	ans.push_back(anc);
}

void solve()
{
	cin >> n >> m >> k;
	gr.resize(n);
	res.resize(k);
	for(int i = 0; i < m; ++i)
	{
		int u, v;
		cin >> u >> v;
		u--, v--;
		gr[u].push_back(v);
		gr[v].push_back(u);
	}
	dfs(0, 0);
	int cap = ((2 * n + (k - 1)) / k);
	
	int l = 0, cur = 0;
	for(int i = 0; i < ans.size(); ++i)
	{
		if ((int)ans.size() - i < k - l)
		{
			l++;
			cur = 0;
		}
		if (cap == cur)
		{
			l++;
			cur = 0;
		}
		res[l].push_back(ans[i]);
		cur++;
	}

	for(int i = 0; i < k; ++i)
	{
		cout << res[i].size() << ' ';
		for(int j = 0; j < res[i].size(); ++j)
		{
			cout << res[i][j] + 1 << ' ';
		}
		cout << '\n';
	}
}

int main()
{
	cin.tie(0); ios_base::sync_with_stdio(false);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
#endif
    srand(88);
	//cerr << g(30);

	   solve();
		//cout << endl;
	
    return 0;
}