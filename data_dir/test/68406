#include <bits/stdc++.h>
using namespace std;

#define         ll      long long int
#define         pb      push_back
#define         pii     pair<int, int>
#define         piii    pair<int, pii>
#define         ff      first
#define         ss      second
#define         mk      make_pair
#define         inf     10000000000

vector<int> team[100];
vector<int> gr[100];
int man[100];
int avail = 0;

int addTeam(int x, int y)
{
    if (man[x] == 0 && man[x] == man[y])
    {
        ++avail;
        man[x] = avail;
        man[y] = avail;
        team[avail].pb(x);
        team[avail].pb(y);
        return 1;
    }

    if (man[x] == 0 && man[y] != 0)
    {
        if (team[man[y]].size( ) >= 3)  return -1;
        man[x] = man[y];
        team[man[y]].pb(x);
        return 1;
    }

    if (man[y] == 0 && man[x] != 0)
    {
        if (team[man[x]].size( ) >= 3)  return -1;
        man[y] = man[x];
        team[man[x]].pb(y);
        return 1;
    }

    return 0;
}

int solve( )
{
    int i, j;

    for (i = 1; i <= avail; i++)
    {
        if (team[i].size( ) == 2)
        {
            for (j = 1; j <= avail; j++)
            {
                if (i != j && team[j].size( ) == 1)
                {
                    team[i].pb(team[j][0]);
                    team[j].clear( );
                    break;
                }
            }
        }
    }

    for (i = 1; i <= avail; i++)
    {
        if (team[i].size( ) == 1)
        {
            for (j = 1; j <= avail; j++)
            {
                if (i != j && team[j].size( ) == 2)
                {
                    team[i].pb(team[j][0]);
                    team[i].pb(team[j][1]);
                    team[j].clear( );
                    break;
                }
                if (i != j && team[j].size( ) == 1)
                {
                    team[i].pb(team[j][0]);
                    team[j].clear( );
                    break;
                }
            }
        }
    }

    for (i = 1; i <= avail; i++)
    {
        if (team[i].size( ) > 0 && team[i].size( ) < 3)
        {
            return 0;
        }
    }

    return 1;
}

int main( )
{
    int n, m;
    int x, y, f = 1, i, j;

    cin >> n >> m;

    while (m--)
    {
        cin >> x >> y;
        gr[x].pb(y);
        gr[y].pb(x);
    }

    for (i = 1; i <= n; i++)
    {
        if (man[i] == 0)
        {
            f = 0;
            for (j = 0; j < gr[i].size( ); j++)
            {
                f = addTeam(i, gr[i][j]);
                if (f == 1) break;
                if (f == -1)
                {
                    cout << "-1\n";
                    return 0;
                }
            }
            if (f == 0)
            {
                ++avail;
                team[avail].pb(i);
                man[i] = avail;
            }
        }
    }

    if (solve( ) == 0)
    {
        cout << "-1\n";
        return 0;
    }

    for (i = 1; i <= avail; i++)
    {
        for (j = 0; j < team[i].size( ); j++)
        {
            cout << team[i][j] << " ";
        }
        if (team[i].size( ) == 3) cout << "\n";
    }

    return 0;
}
