#include<bits/stdc++.h>
using namespace std;

const int N = 1e3 + 10;
bool mark[N][N];
string s[N];
int h[N][N], dy[4] = {0, -1, 1, 0}, dx[4] = {1, 0, 0, -1}, rootf, roots, n, m;
char pp[N][N], ch[] = {'D', 'L', 'R', 'U'};

bool isOk(int x, int y) {
    return (x >= 0 && x < n && y >=0 && y < m && (s[x][y] != '*'));
}

void bfs(int rootx, int rooty) {
    mark[rootx][rooty] = true;
    queue<pair<int,int> > q;
    q.push({rootx, rooty});
    while (q.size()) {
        pair<int, int> v = q.front();
        q.pop();
        int x = v.first, y = v.second;
        for (int i = 0; i < 4; i++) {
            if (isOk(x + dx[i], y + dy[i]) && !mark[x + dx[i]][y + dy[i]]) {
                h[x + dx[i]][y + dy[i]] = h[x][y] + 1;
                pp[x + dx[i]][y + dy[i]] = ch[3 - i];
                mark[x + dx[i]][y + dy[i]] = true;
                q.push({x + dx[i], y + dy[i]});
            }
        }
    }
}

int main() {
    int k;
    cin >> n >> m >> k;
    for (int i = 0; i < n; i++)
            cin >> s[i];
    int x = 0, y = 0;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            if (s[i][j] == 'X') {
                x = i;
                y = j;
            }
    if (k % 2) {
        cout << "IMPOSSIBLE\n";
        return 0;
    }
    bfs(x, y);
    string ans = "";
    while (k--) {
        bool flag = false;
        for (int i = 0; i < 4; i++) {
            if (isOk(x + dx[i], y + dy[i]) && k >= h[x + dx[i]][y + dy[i]]) {
                ans += ch[i];
                x += dx[i];
                y += dy[i];
                flag = true;
                break;
            }
        }
        if (!flag) {
            cout << "IMPOSSIBLE\n";
            return 0;
        }
    }
    cout << ans << "\n";
    return 0;
}
