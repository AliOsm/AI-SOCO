#pragma GCC optimize("O3")
#include<bits/stdc++.h>
#include<map>
#include<iostream>
#include <cstring>
#include <iomanip>
#include <algorithm>
#define forr(i,a,b) for(int i=a;i<=b;i++)
#define F first
#define S second
#define input ios_base::sync_with_stdio(0);cin.tie(0);

//const double PI  = acos(-1.0);
using namespace std;
//typedef pair<double,double>pdd;
typedef long long  ll;
//typedef pair<ll, ll>pii;
//typedef complex<double> point;
//int x[8]={1,0,0,-1,-1,-1,1,1};
//int y[8]={0,1,-1,0,-1,1,-1,1};


//char rv[4]={'D','R','L','U'};
const double EPS = 1e-9;
const int N = 5e5 + 9;
int n,x;
map<int,vector<int>>cnt;

void fac(int x)
{
    for(int i=2;i*i<=x;i++)
    {
        if(x%i)continue;
        int c=0;
        while(x%i==0)x/=i,c++;
        cnt[i].push_back(c);
    }
    if(x>1)cnt[x].push_back(1);
}

 int main()
{
//freopen("circles.in ","r",stdin);
//freopen("circles.out","w",stdout);
//__builtin_popcount()
input
        cin>>n;
        forr(i,1,n)
        {
            cin>>x;
            fac(x);
        }
        ll ans=1;
        for(auto p:cnt)
        {
            if((int)p.S.size()<=n-2)continue;
            sort(cnt[p.F].begin(),cnt[p.F].end());
            if((int)p.S.size()==n)while(cnt[p.F][1]--)ans*=(ll)p.F;
            else while(cnt[p.F][0]--)ans*=(ll)p.F;
        }
        cout<<ans<<endl;




return 0;
}
