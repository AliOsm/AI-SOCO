#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef long double ld;
#define F first
#define S second
#define ii pair <int,int>

const int N=200100;

int n,k,deg[N],r;
vector <int> adj[N];
vector <ii> v;
map <ii,int> mp;

bool ok(int mid)
{
    int x=0;
    for(int i=1;i<=n;i++)
        x += deg[i]>mid ? 1 : 0;

    return x<=k;
}

void dfs(int u,int v,int last)
{
    int pos = last==1 ? 2 : 1;
    if( pos>r )
        pos=r;

    for(auto x:adj[u])
    {
        if(x==v)
            continue;

        mp [ { min(x,u) , max(x,u) } ] = pos;

        dfs(x,u,pos);

        pos++;
        if(pos==last)
            pos++;

        if(pos>r)
            pos=r;
    }
}

int main()
{
    scanf("%d%d",&n,&k);
    for(int i=0;i<n-1;i++)
    {
        int a,b;
        scanf("%d%d",&a,&b);
        adj[a].push_back(b);
        adj[b].push_back(a);
        deg[a]++;
        deg[b]++;
        v.push_back({a,b});
    }

    int low=1,high=n-1;
    while(high>low)
    {
        int mid=(low+high)/2;
        if(ok(mid))
            high=mid;
        else
            low=mid+1;
    }

    r=low;

    dfs(1,1,0);

    printf("%d\n",r);
    for(auto x:v)
        printf("%d ",mp[ { min(x.F,x.S) , max(x.F,x.S) } ] );
}
