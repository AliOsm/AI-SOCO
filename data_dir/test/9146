#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
 
#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2
 
#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound
 
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;
 
template <class T1, class cmp = less <T1>> using Tree = tree <T1, null_type, cmp, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2> using um = unordered_map <T1, T2>;
template <class T> using us = unordered_set <T>;
template <class T> using vec = vector <T>;
 
const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 2e5 + 1;
int n, a, b, c, sum;

pii ans;

vec <int> path;

struct Graph {
    int lef[N];
    int rig[N];
    bool stk[N];
    vec <int> adj[N];
} graph;

void input() {
    cin >> n;
    for(int i = 1; i < n; ++i) {
        int u; cin >> u;
        int v; cin >> v;
        graph.adj[u].pb(v);
        graph.adj[v].pb(u);
    }
}

pii dfs(int u, int h) {
    static int t = 0;
    pii res = {h, u};
    graph.stk[u] = 1;
    graph.lef[u] = ++t;
    for(int v: graph.adj[u]) {
        if(graph.stk[v]) {
            continue;
        }
        res = max(res, dfs(v, h + 1));
    }
    graph.rig[u] = t;
    graph.stk[u] = 0;
    return res;
}

void solve() {
    a = dfs(1, 0).yy;
    b = dfs(a, 0).yy;
    sum += dfs(a, 0).xx;
    for(int i = 1; i <= n; ++i) {
        if(graph.lef[i] <= graph.lef[b] && graph.rig[i] >= graph.rig[b]) {
            path.pb(i);
            graph.stk[i] = 1;
        }
    }
    for(int e: path) {
        for(int v: graph.adj[e]) {
            if(!graph.stk[v]) {
                ans = max(ans, dfs(v, 1));
            }
        }
    }
    c = ans.yy;
    sum += ans.xx;
    cout << sum << "\n";
    if(c == 0) {
        c = (min(a, b) == 1? (max(a, b) == 2? 3: 2): 1);
    }
    cout << a << " " << b << " " << c << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
