#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <cstdio>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <numeric>
#include <stack>
#include <deque>
#include <memory.h>
#include <string>
#include <unordered_map>

#define ull unsigned long long
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define vI vector<int>
#define vvI vector<vector<int>>
#define vLL vector<ll>
#define vS vector<string>
#define fori(i, n) for(int (i)=0; (i)<n; (i)++)
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
#define forI(tmp) for(auto(it)=(tmp).begin();(it)!=(tmp).end();(it)++)
#define PI 3.14159265356
#define LD long double
#define sc(a) scanf("%d", &(a))
#define scc(a) scanf("%lld", &(a))
#pragma comment (linker, "/STACK:5000000000")
typedef long long ll;
const ll mod = 1000000007;
ll Inf = (ll)2e9;
ll LINF = (ll)1e18 + 1e17;

using namespace std;


int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
		
	int t;
	cin >> t;
	while (t--)
	{
		int n;
		cin >> n;
		map<int, int> can;
		fori(i, n)
		{
			int x;
			cin >> x;
			can[x]++;
		}
		double mx = Inf;
		pair<int, int> ans;
		for (auto it = can.begin(); it != can.end(); it++)
		{
			if (it->second >= 4)
			{
				double a = it->second;
				double res = 16;
				if (res < mx)
				{
					mx = res;
					ans = { it->first,it->first };
				}
			}
			if (it->second < 2)
				continue;
			auto itt = it;
			itt++;
			while (itt != can.end() && itt->second < 2)
				itt++;
			if (itt == can.end())
				break;
			double a = it->first, b = itt->first;
			double res = 4 * (a*a + 2 * a*b + b*b) / (a*b);
			if (res < mx)
			{
				mx = res;
				ans = { it->first,itt->first };
			}
			
		}
		cout << ans.first << " " << ans.first << " " << ans.second << " " << ans.second << endl;

	}
	return 0;
}