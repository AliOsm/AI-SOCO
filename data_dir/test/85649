#include <bits/stdc++.h>

#define eb emplace_back
#define pb push_back
#define ll long long
#define ld long double
#define mp make_pair
#define f first
#define s second
#define PII pair<int, int>
#define ull unsigned long long
#define all(s) s.begin(), s.end()
#define sz(a) (int)a.size()
#define forn(i, a, b) for (int i = a; i <= b; ++i)
#define for1(i, a, b) for (int i = a; i >= b; --i)

const int INF = (int)1e9 + 7;
const int N = (int)1e6 + 7;
const int MAXN = (int)5e5 + 228;

using namespace std;

int n, d[N];
int id[N];

int lamp[N], pos[N];

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);

#ifdef Local
  freopen(".in", "r", stdin);
#else
  // freopen("sum.in", "r", stdin);
  // freopen("sum.out", "w", stdout);
#endif
  cin >> n;
  for (int i = 1; i <= n; ++i) cin >> d[i];
  for (int i = 1; i <= n; ++i) id[i] = i;

  sort(id + 1, id + 1 + n, [&](int x, int y) { return d[x] > d[y]; });
  int l = 100001;
  int r = n + l - 1, turn = 0;
  for (int ii = 1; ii <= n; ++ii) {
    int i = id[ii];
    if (!turn)
      pos[i + i - 1] = l, lamp[l++] = i + i - 1;
    else
      pos[i + i - 1] = r, lamp[r--] = i + i - 1;
    turn ^= 1;
  }
  for (int i = 100001; i < 100000 + n; ++i)
    cout << lamp[i] << ' ' << lamp[i + 1] << endl;
  l = lamp[100001], r = lamp[n + 100000];
  int l_pos = 100001;
  int r_pos = n + l_pos - 1;
  for (int ii = 1; ii <= n; ++ii) {
    int i = id[ii];
    d[i]--;
    int cur = pos[i + i - 1];
    if (cur - d[i] > l_pos) {
      cout << i + i << ' ' << lamp[cur - d[i]] << '\n';
    } else if (cur + d[i] < r_pos) {
      cout << i + i << ' ' << lamp[cur + d[i]] << '\n';
    } else {
      if (r_pos - cur == d[i]) {
        r_pos++;
        cout << i + i << ' ' << r << endl;
        r = i + i;
        lamp[r_pos] = r;
      } else if (cur - l_pos == d[i]) {
        l_pos--;
        cout << i + i << ' ' << l << endl;
        l = i + i;
        lamp[l_pos] = l;
      } else
        assert(0);
    }
  }

  return 0;
}