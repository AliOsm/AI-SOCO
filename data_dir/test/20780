#include <bits/stdc++.h>
using namespace std;
const char duom[] ="i.txt";
vector <int > a [200005];
vector <int> adj1[200005];
vector <int> adj2[200005];
bool vis [200005];
bool prime[200005];
set <int > nodes ;
int ans ;
pair <int,int> dfs(int v,int p)
{
    pair <int,int> best = {1,v};
    pair <int,int> other ;
    vis[v]=true;
    for(auto i: adj2[v])
    {
        if(i==p)continue;
        other=dfs(i,v);
        if(other.first+1>best.first)
        {
            best=other;
            best.first++;
        }
    }
    return best;
}
int main()
{
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  //  ifstream cin (duom);
    int n;
    cin >>n;
    int x;
    for(int i=0;i<n;i++)
    {
        cin >>x;
        a[x].push_back(i+1);
    }
    for(int i=0;i<n-1;i++)
    {
        int u,v;
        cin >> u>>v;
        adj1[u].push_back(v);
        adj1[v].push_back(u);
    }
    for(int i=2;i<=2e5;i++)prime[i]=true;
    for(int i=2;i<=2e5;i++)
    {
        if(!prime[i])continue;
        for(int j=i;j<=2e5;j+=i)
        {
            prime[j]=false;
            for(int k:a[j])
            {
                nodes.insert(k);
            }
        }
        for(int j:nodes)
        {
            vis[j]=0;
            adj2[j].clear();
        }
        for(int j:nodes)
        {
            for(int k:adj1[j])
            {
                if(nodes.count(k))
                {
                    adj2[j].push_back(k);
                }
            }
        }
        for(int j:nodes)
        {
            if(vis[j])continue;
            ans= max(ans,dfs(dfs(j,-1).second,-1).first);
        }
        nodes.clear();
    }
    cout << ans;
    return 0;
}
