#define _CRT_SECURE_NO_WARNINGS
#include <vector>
#include <iostream>
#include <string>
#include <algorithm>
#include <iterator>
#include <queue>
#include <set>
#include <stdio.h>
#include <climits>
#include <map>
#include <time.h>
#include <random>
#include <bitset>
//#include "rubo.h"

#define dbl long double
#define pb push_back
#define mp make_pair
#define SQ(x) (x)*(x)
#define ll long long
#define ull unsigned long long
#define vc vector
#define F first
#define S second
//#define in ll
#define pll pair<ll,ll>
#define pii pair<int,int>
#define all(x) x.begin(), x.end()
#define loop(xxx, yyy) for(int xxx = 0; xxx < yyy; xxx++)
//#define printf(fmt...) (0)
//#define puts(fmt...) (0)

//#include "rubo.h"

using namespace std;

const int N = 222222;

int p[N];

vc<int> used(N, 0);

ll c = 0;

void dfs(ll v) {
	if (used[v]) return;

	c++;
	used[v] = 1;
	dfs(p[v]);
}

int main() {
	ll n;
	cin >> n;
	for (ll i = 1; i <= n; i++) {
		cin >> p[i];
	}


	vc<ll> comps;
	for (int i = 1; i <= n; i++) {
		if (!used[i]) {
			c = 0;
			dfs(i);
			comps.push_back(c);
		}
	}

	//for (int e : comps)
	//	cout << e << ' ';
	//cout << endl;

	ll res = 0;

	sort(all(comps));
	if (comps.size() == 1) {
		res = n*n;
	}
	else if (comps.size() == 2) {
		res = n*n;
	}
	else {
		res = 0;
		int l = comps.size();
		loop(i, l-2) {
			res += comps[i] * comps[i];
		}
		res += (comps[l - 1] + comps[l - 2])*(comps[l - 1] + comps[l - 2]);
	}

	cout << res << endl;
	return 0;
}
