//  Copyright Â© 2018 Diego Garcia Rodriguez del Campo. All rights reserved.

#include<bits/stdc++.h>
#define MAX 300005
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
using namespace std;
typedef long long i64;

struct nodo
{
    i64 v, id;
};

bool cmp ( nodo a , nodo b ) { return a.v < b.v; }
bool cmp2 ( nodo a , i64 b ) { return a.v < b; }

i64 N, A, B;
bool ok;
nodo a[MAX];

i64 bin( i64 x )
{
    i64 ini = 1, fin = N;
    while( ini < fin )
    {
        i64 mid = ( ini + fin ) / 2;
        if( a[mid].v < x )
            ini = mid + 1;
        else
            fin = mid;
    }
    if( a[ini].v < x )
        return 0;
    return ini;
}

void solve( i64 x1 , i64 x2 , bool t )
{
    if( ok ) return;
    i64 tam = 0;
    bool yes = false;
    for( i64 i = N; i >= 1; i -- )
    {
        tam++;
        if( a[i].v * tam >= x2 )
        {
            yes = true;
            break;
        }
    }
    if( ! yes ) return;
    for( i64 i = 1; i <= N; i ++ )
    {
        i64 val = ceil( double(x1)/(double)i );
        i64 pos = bin( val );
        if( pos && N - pos + 1 >= tam + i )
        {
            cout << "Yes\n";
            ok = true;
            if( ! t )
            {
                cout << i << " " << tam << "\n";
                for( i64 j = 0; j < i; j ++ )
                    cout << a[pos + j].id << " ";
                cout << "\n";
                for( i64 j = 0; j < tam; j ++ )
                    cout << a[N - j].id << " ";
                cout << "\n";
            }
            else
            {
                cout << tam << " " << i << "\n";
                for( i64 j = 0; j < tam; j ++ )
                    cout << a[N - j].id << " ";
                cout << "\n";
                for( i64 j = 0; j < i; j ++ )
                    cout << a[pos + j].id << " ";
                cout << "\n";
            }
            return;
        }
    }
}

int main()
{
    optimiza_io
    cin >> N >> A >> B;
    for( i64 i = 1; i <= N; i ++ )
        cin >> a[i].v, a[i].id = i;
    sort( a + 1 , a + N + 1 , cmp );
    solve( A , B , 0 );
    solve( B , A , 1 );
    if( ! ok ) cout << "No\n";
    return 0;
}
