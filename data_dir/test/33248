#include <bits/stdc++.h>
#define pb push_back
#define pi pair<int, int>
#define pii pair<pi, int>
#define f first
#define s second
#define ll long long
#define rep(i,n) for(int i=0;i<n;i++)
using namespace std;
vector<int>g[200011];
vector<int>D;
int root;
void dfs(int v,int p,int d,int &maxd,int &y) {
    for(auto x:g[v]) {
        if(x!=p) {
            dfs(x,v,d+1,maxd,y);
        }
    }
    if(d > maxd) {
        maxd = d;
        y = v;
    }
}
bool calc(int v,int p,int r2) {
    if(v==r2) {
        D.pb(v);
        return 1;
    }
    for(auto x:g[v]) {
        if(x!=p) {
            if(calc(x,v,r2)){
                D.pb(v);
                return 1;
            }
        }
    }
    return 0;
}
int process(int x) {
    if(x%2==0) return process(x/2);
    return x;
}
int find(int v,int p) {
    map<int,int>S;
    for(auto x:g[v]) {
        if(x!=p) {
            int cur = find(x,v);
            if(cur == -1) return -1;
            S[cur+1]++;
        }
    }
    if(S.size() ==0) return 0;
    if(S.size() == 1) {
        if(v==root) {
            return process(S.begin()->f);
        }
        return S.begin()->f;
    }
    if(S.size() == 2 and v== root) {
        int ret = 0;
        for(auto x:S) ret+=x.f;
        return process(ret);
    }
    return -1;
}
int main() {
    int n,u,v;
    cin >> n;
    rep(i,n-1) {
        cin >> u >> v;
        g[u].pb(v);
        g[v].pb(u);
    }

    int r1,r2;
    int maxd = 0;
    dfs(1,0,0,maxd,r1);
    maxd = 0;
    dfs(r1,0,0,maxd,r2);
    calc(r1,0,r2);

    int ans = -1;
    root = D[D.size()/2];
    ans = max(ans,find(root,0));

    root = D[D.size()/2-1];
    ans = max(ans,find(root,0));
    cout << ans;
}
