#include <bits/stdc++.h>
using namespace std;

#define REP(i, n) for(int i = 0; i < n; i++)
#define clr(t, val) memset(t, val, sizeof(t))

#define all(v)  v.begin() , v.end()
#define SZ(v) ((int)(v).size())

typedef long long Long;
typedef vector<int> vInt;
typedef vector<vInt> vvInt;
typedef vector<string> vStr;
typedef pair<int, int> Pair;
typedef pair<Long, Long> PairLong;
typedef vector<Pair> vPair;
typedef vector<PairLong> vPairLong;

vInt getFreq(string &str) {
	vInt ans(10);
	REP (i, SZ(str)) {
		ans[str[i] - '0'] ++;
	}
	return ans;
}

int getMin(vInt a, vInt b) {
	REP (i, 10){
		REP(j, a[i]) {
			bool found = false;
			for (int k = i; k < 10; ++k) {
				if (b[k]) {
					found = true;
					b[k] --;
					break;
				}
			}
			if (found) {
				continue;
			} else {
				return accumulate(all(b), 0);
			}
		}
	}
	return accumulate(all(b), 0);
}

int getMax(vInt a, vInt b) {
	int ans = 0;
	REP (i, 10){
		REP(j, a[i]) {
			bool found = false;
			for (int k = i + 1; k < 10; ++k) {
				if (b[k]) {
					found = true;
					b[k] --;
					ans ++;
					break;
				}
			}
			if (found) {
				continue;
			} else {
				return ans;
			}
		}
	}
	return ans;
}
int main() {
	int n;
	string a, b;
	while (cin >> n >> a >> b) {
		vInt freqA = getFreq(a);
		vInt freqB = getFreq(b);
		int minimum = getMin(freqA, freqB);
		int maximum = getMax(freqA, freqB);
		cout << minimum << "\n" << maximum << '\n';
	}	
}
