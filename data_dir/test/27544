//Solution by Tima
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <bitset>
#define f first
#define s second
#define ll long long
#define ull unsigned long long
#define mp make_pair
#define pb push_back
#define vi vector <int>
#define ld long double
#define pii pair<int, int>
#define y1 sda
using namespace std;    
const int N = int(1e6) + 10, mod = int(1e9)  + 7; 

char s[N], a[N], b[N];

int t,n,k;
char used[500], ans[500], us[500], c[500];

void make(){
	vector <int> x,y;
	for(int i = 0; i < k; i++){
		if(used[i] == '0') x.pb(i);
		if(ans[i] == '0') y.pb(i);
	} 
	for(int i = 0; i < x.size(); i++){
		used[x[i]] = char(y[i] + 'a');
		ans[y[i]] = char(x[i] + 'a');
	}
}

void gous(){
	for(int i = 0; i < k; i++){
		used[i] = us[i];
		ans[i] = c[i];
	}
}

bool cana(int x){
    for(int i = 0; i < k; i++){
    	us[i] = used[i];
    	c[i] = ans[i];
    }
    us[s[x] - 'a'] = a[x];
    c[a[x] - 'a'] = s[x];
    for(int i = x + 1; i <= n; i++){
    	int id = s[i] - 'a';
    	if(us[id] != '0'){
    		if(us[id] < a[i]) return 0; 
    		if(us[id] > a[i]){
    			gous();
    			make();
    			return 1;
    		}
    	}
    	else{
    		int ok = 0;
    		for(int j = k - 1; j >= a[i] - 'a'; j--){
    			if(c[j] == '0'){
    				c[j] = s[i];
    				us[id] = char(j + 'a');
    				ok = 1;
    				break;
    			}
    		}
    		if(!ok) return 0;
    		if(us[id] > a[i]){
    			gous();
    			make();
    			return 1;
    		}
    	}
    }
    gous();
    make();
    return 1;
}

bool canb(int x){
    for(int i = 0; i < k; i++){
    	us[i] = used[i];
    	c[i] = ans[i];
    }
    us[s[x] - 'a'] = b[x];
    c[b[x] - 'a'] = s[x];
    for(int i = x + 1; i <= n; i++){
    	int id = s[i] - 'a';
    	if(us[id] != '0'){
    		if(us[id] > b[i]) return 0; 
    		if(us[id] < b[i]){
    			gous();
    			make();
    			return 1;
    		}
    	}
    	else{
    		int ok = 0;
    		for(int j = 0; j <= b[i] - 'a'; j++){
    			if(c[j] == '0'){
    				c[j] = s[i];
    				us[id] = char(j + 'a');
    				ok = 1;
    				break;
    			}
    		}
    		if(!ok) return 0;
    		if(us[id] < b[i]){
    			gous();
    			make();
    			return 1;
    		}
    	}
    }
    gous();
    make();
    return 1;
}


void solve(){
	scanf("%d", &k);
	scanf("\n%s\n%s\n%s",s + 1, a + 1, b + 1);
	n = strlen(s + 1);
	for(int i = 0; i < k; i++){
		used[i] = '0', ans[i] = '0';
	}
	bool bad = 0;
	for(int i = 1; i <= n; i++){
		int id = s[i] - 'a';
		if(used[id] != '0'){
			if(used[id] < a[i] || used[id] > b[i]){
				bad = 1;
				break;
			}
		}
		if(a[i] == b[i]){
			if(used[id] == '0' && ans[a[i] - 'a'] != '0'){
				bad = 1;
				break;
			}
			used[id] = a[i];
			ans[a[i] - 'a'] = s[i]; 
		}
		else{
			if(a[i] > b[i]){
				bad = 1;
				break;
			}
		    if(used[id] != '0'){
		    	if(used[id] > a[i] && used[id] < b[i]){
		    		make();
		    		break;
		    	}
		    	if(used[id] == b[i]){
		    		if(!canb(i)){
		    		    bad = 1;
		    		}
		    	}
		    	else if(used[id] == a[i]){
		    		if(!cana(i)){
		    			bad = 1;
		    		}
		    	}
		    	break;
		    }
		    else{
		    	bool f = 0;
		    	for(int x = a[i] - 'a' + 1; x < b[i] - 'a'; x++){
		    		if(ans[x] == '0'){
		    			used[id] = char(x + 'a');
		    			ans[x] = s[i];
		    			make();
		    			f = 1;
		    			break;
		    		}
		    	}
		    	if(f) break;
		    	if(ans[a[i] - 'a'] == '0' && cana(i)){
		    		break;
		    	}
		    	if(ans[b[i] - 'a'] == '0' && canb(i)){
		    		break;
		    	}
		    	bad = 1;
		    	break;
		    }
		}
	}
	if(bad){
		puts("No");
	}
	else{
		make();
		puts("Yes");
		for(int i = 0; i < k; i++){
			printf("%c", used[i]);
		}
		printf("\n");
	}

}

int main () {
	scanf("%d", &t);
	while(t--){
		solve();
	}

return 0;
}