#include <bits/stdc++.h>

#define x0 abc
#define y0 ABC
#define x1 abcd
#define y1 ABCD
#define xn abcde
#define yn ABCDE

#define l_b lower_bound
#define u_b upper_bound

#define fi first
#define se second
#define m_p make_pair

#define p_b push_back
#define po_b pop_back

#define ld long double
#define ll long long

#define cont continue
#define re return

#define MAXLL 9000000000000000000LL
#define MAXINT 2000000000

#define MINLL -9000000000000000000LL
#define MININT -2000000000

#define P acos(-1)

#define endl '\n'

#define OUT cout << "-------" << endl;

using namespace std;

ll dp[1201][2501][2][2], n, i, j, k, ans;

    ll mod(ll a)
    {
        re a % 998244353;
    }

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> n >> k;

    dp[1][1][0][0] = 1;

    dp[1][2][0][1] = 1;

    dp[1][2][1][0] = 1;

    dp[1][1][1][1] = 1;

    for (i = 1; i <= n - 1; i++)
        for (j = 1; j <= i * 2; j++) {
            dp[i + 1][j][0][0] = mod(dp[i + 1][j][0][0] + dp[i][j][0][0]);

            dp[i + 1][j + 1][0][1] = mod(dp[i + 1][j + 1][0][1] + dp[i][j][0][0]);

            dp[i + 1][j + 1][1][0] = mod(dp[i + 1][j + 1][1][0] + dp[i][j][0][0]);

            dp[i + 1][j + 1][1][1] = mod(dp[i + 1][j + 1][1][1] + dp[i][j][0][0]);

            dp[i + 1][j][0][0] = mod(dp[i + 1][j][0][0] + dp[i][j][0][1]);

            dp[i + 1][j][0][1] = mod(dp[i + 1][j][0][1] + dp[i][j][0][1]);

            dp[i + 1][j + 2][1][0] = mod(dp[i + 1][j + 2][1][0] + dp[i][j][0][1]);

            dp[i + 1][j][1][1] = mod(dp[i + 1][j][1][1] + dp[i][j][0][1]);

            dp[i + 1][j][0][0] = mod(dp[i + 1][j][0][0] + dp[i][j][1][0]);

            dp[i + 1][j + 2][0][1] = mod(dp[i + 1][j + 2][0][1] + dp[i][j][1][0]);

            dp[i + 1][j][1][0] = mod(dp[i + 1][j][1][0] + dp[i][j][1][0]);

            dp[i + 1][j][1][1] = mod(dp[i + 1][j][1][1] + dp[i][j][1][0]);

            dp[i + 1][j + 1][0][0] = mod(dp[i + 1][j + 1][0][0] + dp[i][j][1][1]);

            dp[i + 1][j + 1][0][1] = mod(dp[i + 1][j + 1][0][1] + dp[i][j][1][1]);

            dp[i + 1][j + 1][1][0] = mod(dp[i + 1][j + 1][1][0] + dp[i][j][1][1]);

            dp[i + 1][j][1][1] = mod(dp[i + 1][j][1][1] + dp[i][j][1][1]);
        }

    for (i = 0; i <= 1; i++)
        for (j = 0; j <= 1; j++) ans = mod(ans + dp[n][k][i][j]);

    cout << ans << endl;

    re 0;
}
