#include <bits/stdc++.h>
using namespace std;
#define ll long long

struct point{
int x,y;
};
int getDist(point l , point r){
    int res = ((l.x-r.x)*(l.x-r.x))+((l.y-r.y)*(l.y-r.y));
    return res;
}
bool checkRight(point one, point two , point three){
    int f = getDist(one,two);
    int s = getDist(one,three);
    int t = getDist(two,three);
    if (!f || !s || !t) return false;
    return (f+s==t || f+t==s || s+t == f);
}
int main()
{
    vector <point> v;
    vector <point> shift;
    shift.push_back({-1,0});
    shift.push_back({1,0});
    shift.push_back({0,-1});
    shift.push_back({0,1});
    for (int i = 0 ; i < 3 ; i++){
        int x,y; cin>>x>>y;
        v.push_back({x,y});
    }
    if (checkRight(v[0],v[1],v[2]))
        cout << "RIGHT" << endl;
   else {
            bool almost = 0;
        for (int i = 0 ; i < shift.size() ; i++){
           point New;
           New.x = v[0].x+shift[i].x;
           New.y = v[0].y+shift[i].y;
           almost |= checkRight(New,v[1],v[2]);

           New.x = v[1].x+shift[i].x;
           New.y = v[1].y+shift[i].y;
           almost |= checkRight(v[0],New,v[2]);

           New.x = v[2].x+shift[i].x;
           New.y = v[2].y+shift[i].y;
           almost |= checkRight(v[0],v[1],New);
        }
        if (almost == 1)
            cout << "ALMOST" << endl;
        else
            cout << "NEITHER" << endl;
    }
    return 0;
}
