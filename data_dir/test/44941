#include<bits/stdc++.h>
using namespace std;
#include <ext/rope>
using namespace __gnu_cxx;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define int long long
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VPI;
typedef map<string, int> MAPS;
typedef map<char, int> MAPC;
typedef map<int, int> MAPI;
typedef set<int> SETI;
typedef set<string> SETS;
typedef set<char> SETC;
typedef complex<double> POINT;
typedef tree<int, int, less<int>, rb_tree_tag,
        tree_order_statistics_node_update> ordered_map;
typedef trie<string, null_type, trie_string_access_traits<>,
        pat_trie_tag, trie_prefix_search_node_update> TRIE;


#define add push_back
#define rem pop_back
#define ALL(x) x.begin(), x.end()
#define SORT(x) sort(ALL(x))
#define SZ(x) int((x).size())
#define F first
#define S second
#define NEW(x, y, z) x y; x::iterator z;


void INPUT(int *a, int size)
{
        for(int i = 0; i < size; ++i)
                cin >> a[i];
}
void OUTPUT(int *a, int size)
{
        for(int i = 0; i < size; ++i)
                cout << a[i] << " ";
        cout << endl;
}


#define REPI(it, x) for(__typeof((x).begin()) it = (x).begin(); it != (x).end(); it++)
#define REP(i, a, b)  for(int i = a; i <  b; i++)
#define REPN(i, a, b) for(int i = a; i <= b; i++)
#define REPV(i, b, a) for(int i = b; i >= a; i--)


const double EPS = 1e-9;
const double PI = acos(-1.);
const int MOD = 998244353;
const int MAXN = 500001;
int INF = __INT64_MAX__;
int MAX = -1e16;
int MIN = 1e16;
string YN[] = {"NO", "YES"};


#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))


template<typename T1, typename T2> T2 max(T1 a, T2 b)
{
        T2 res = a > b ? a : b;
        return res;
}
template<typename T1, typename T2> T2 min(T1 a, T2 b)
{
        T2 res = a < b ? a : b;
        return res;
}



int n, res, m, cnt, l, a, L[MAXN], T[MAXN];
string s;

void solution()
{
        cin >> n >> l >> a;
        REPN(i, 1, n) cin >> L[i] >> T[i];
        REPN(i, 1, n){
                cnt += (L[i] - (L[i - 1] + T[i - 1])) / a;
        }
        cnt += (l - (L[n] + T[n])) / a;
        cout << cnt;
}
/*
5 15 3
0 3
3 3
6 3
9 3
12 3
*/
__INT16_C() main()
{
        //freopen("input.txt", "r", stdin);
        //freopen("output.txt", "w", stdout);

        ios_base::sync_with_stdio(false);
        cin.tie(nullptr);
        cout.tie(nullptr);

        int t = 1;
        // cin >> t;

        while(t--) solution();
}