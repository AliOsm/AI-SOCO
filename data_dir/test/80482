#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
#include <chrono>
#include <random>

using namespace std;

#define int long long
#define ll long long
//#define double long double
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()

const int INF = 2e9;
const int MB = 32;
const int MOD = 998244353;

bool cmp(const pair<int, pair<int, int>>& one, const pair<int, pair<int, int>>& two) {
    if (one.second.second == two.second.second) return one.second.first < two.second.first;
    return one.second.second < two.second.second;
}

int get(int n, int b, vector<pair<int, pair<int, int>>>& a) {
    vector<int> dp(n + 1), pref(n + 1);
    dp[0] = pref[0] = 1;
    

    vector<int> aq(n + 1);
    for (auto& p : a) {
        if ((p.first >> b) & 1) {
            aq[p.second.first]++;
            if (p.second.second + 1 <= n) aq[p.second.second + 1]--;
        }
    }
    for (int i = 1; i <= n; i++) aq[i] += aq[i - 1];

    int id = 0, mx = 0;
    for (int i = 1; i <= n; i++) {
        while (id < a.size() && a[id].second.second < i) {
            if(!((a[id].first >> b) & 1)) mx = max(mx, a[id].second.first);
            id++;
        }
        if (!aq[i]) dp[i] = (pref[i - 1] - (mx ? pref[mx - 1] : 0) + MOD) % MOD;
        pref[i] = (pref[i - 1] + dp[i]) % MOD;
    }
    
    while (id < a.size()) {
        if (!((a[id].first >> b) & 1))mx = max(mx, a[id].second.first);
        id++;
    }

    int ans = 0;
    for (int i = mx; i <= n; i++) ans = (ans + dp[i]) % MOD;
    return ans;
}

void solve() {
    int n, k, m;
    cin >> n >> k >> m;
    vector<pair<int, pair<int, int>>> a(m);
    for (int i = 0; i < m; i++) {
        int l, r, x;
        cin >> l >> r >> x;
        a[i] = { x, {l, r} };
    }
    sort(all(a), cmp);

    int ans = 1;
    for (int b = 0; b < k; b++) {
        ans = ans * get(n, b, a) % MOD;
    }
    cout << ans;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    int t = 1;
    //int t;
    //cin >> t;
    while(t--) solve();
}