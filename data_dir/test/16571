#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327
#endif // M_PI
#define endl "\n"
#define S struct
#define X first
#define Y second
#define V vector
#ifndef __linux__
#define LLD "%I64d"
#else
#define LLD "%ll""d"
#endif
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
using namespace std;
typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
S Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;
S FAIL { FAIL () { cout << "CHANGE!!!" << endl;}};

enum {SPORT = 2, CONTEST = 1};

int main()
{
    int n;
    cin >> n;
    vector <int> v(n);
    GET(v, n);
    vector <vector <int>> dp(n + 1, vector <int> (3, 10000));
    dp[0][0] = 0;
    FOR (i, 0, n) {
        FOR (j, 0, 3) {
            if (v[i] & SPORT) {
                dp[i + 1][2] = min(dp[i][0], dp[i + 1][2]);
                dp[i + 1][2] = min(dp[i][1], dp[i + 1][2]);
            }
            if (v[i] & CONTEST) {
                dp[i + 1][1] = min(dp[i][0], dp[i + 1][1]);
                dp[i + 1][1] = min(dp[i][2], dp[i + 1][1]);
            }
            dp[i + 1][0] = min(dp[i][2] + 1, dp[i + 1][0]);
            dp[i + 1][0] = min(dp[i][1] + 1, dp[i + 1][0]);
            dp[i + 1][0] = min(dp[i][0] + 1, dp[i + 1][0]);
        }
    }
    int res = INT_MAX;
    FOR (i, 0, 3) {
        res = min(res, dp[n][i]);
    }
    cout << res;
}
