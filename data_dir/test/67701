/*
.....   .   .   .   .
  .    . .   . .   . .
  .   .....   .   .....
  .  .     .  .  .     .
*/
#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <stdio.h>
#include <cstdio>
#include <math.h>
#include <cmath>
#include <string>
#include <cstring>
#include <queue>
#include <deque>
#include <random>
#include <iomanip>

using namespace std;

template<typename T> void uin(T &a, T b) {
    if (b < a) {
        a = b;
    }
}

template<typename T> void uax(T &a, T b) {
    if (b > a) {
        a = b;
    }
}

const int maxn = 2002;

int x[maxn], y[maxn], cnt[maxn][maxn];

int X, Y;

void go(int to_x, int to_y) {
    cout << to_x << " " << to_y << endl;
    X = to_x;
    Y = to_y;
    int k, nx, ny;
    cin >> k >> nx >> ny;
    if (k == -1) {
        exit(0);
    }
    --cnt[x[k]][y[k]];
    x[k] = nx;
    y[k] = ny;
    ++cnt[x[k]][y[k]];
}

void GOTO(int tox, int toy, int dx, int dy) {
    while (X != tox) {
        if (cnt[X + dx][Y + dy] == 1) {
            go(X + dx, Y);
        }
        go(X + dx, Y + dy);
    }
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cin >> X >> Y;
    for (int i = 1; i <= 666; ++i) {
        cin >> x[i] >> y[i];
        ++cnt[x[i]][y[i]];
    }
    while (X < 500) {
        go(X + 1, Y);
    }
    while (X > 500) {
        go(X - 1, Y);
    }
    while (Y < 500) {
        go(X, Y + 1);
    }
    while (Y > 500) {
        go(X, Y - 1);
    }
    int c1 = 0, c2 = 0, c3 = 0, c4 = 0;
    for (int i = 1; i <= 500; ++i) {
        for (int j = 1; j <= 500; ++j) {
            c1 += cnt[i][j];
        }
    }
    for (int i = 1; i <= 500; ++i) {
        for (int j = 500; j <= 999; ++j) { 
            c2 += cnt[i][j];
        }
    }
    for (int i = 500; i <= 999; ++i) {
        for (int j = 1; j <= 500; ++j) {
            c3 += cnt[i][j];
        }
    }
    for (int i = 500; i <= 999; ++i) {
        for (int j = 500; j <= 999; ++j) {
            c4 += cnt[i][j];
        }
    }
    vector<int> kek;
    kek.push_back(c1);
    kek.push_back(c2);
    kek.push_back(c3);
    kek.push_back(c4);
    sort(kek.begin(), kek.end());
    if (c1 == kek[0]) {
        GOTO(999, 999, 1, 1);
    } else if (c2 == kek[0]) {
        GOTO(999, 1, 1, -1);
    } else if (c3 == kek[0]) {
        GOTO(1, 999, -1, 1);
    } else {
        GOTO(1, 1, -1, -1);
    }
    return 0;
}







