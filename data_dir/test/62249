#include <iostream>
#include <string>
#include <vector>
#include <cassert>

typedef std::vector<std::string> vs;

vs gen(int nRows, std::string s) {
    const int n = (int)s.size();
    int nCols = n / nRows;
    vs ans;
    for (int i = 0; i < n % nRows; ++i) {
        ans.push_back(s.substr(0, nCols+1));
        s = s.substr(nCols+1);
    }
    while ((int)ans.size() < nRows) {
        ans.push_back(s.substr(0, nCols) + (n % nRows == 0 ? "" : "*"));
        s = s.substr(nCols);
    }
    return ans;
}

int main() {
    std::string s;
    while (std::cin >> s) {
        bool flag = false;
        for (int i = 1; !flag && i <= 5; ++i) {
            auto ret = gen(i, s);
            if ((int)ret[0].size() <= 20) {
                std::cout << ret.size() << ' ' << ret[0].size() << '\n';
                for (auto& it : ret) {
                    std::cout << it << '\n';
                }
                flag = true;
            }
        }
        assert(flag);
    }
    return 0;
}