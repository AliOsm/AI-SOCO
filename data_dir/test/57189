#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
ordered_set;	

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<pii, int> para;
const ll inf = 1e18 + 7;
const ll maxN = 1e6 + 5;
const ll MOD = 1e9 + 7;


int n, m, arr[maxN], swaps[maxN];

bool solve() {
	cin >> n >> m;
	RI(i, n) {
		cin >> arr[i];
	}
	REP(i, m) {
		cin >> swaps[i];
	}
	sort(swaps, swaps + m);
	bool f = true;
	while (f) {
		f = false;
		REP(i, m) {
			int x = swaps[i];
			int y = x + 1;
			if (arr[x] > arr[y]) {
				f = true;
				swap(arr[x], arr[y]);
			}
		}
	}
	RI(i, n - 1) {
		//cout << arr[i] << " ";
		if (arr[i] > arr[i + 1]) {
			return false;
		}
	}
	//cout << endl;
	return true;
}

int main() {
	ios_base::sync_with_stdio(0);
	int t;
	cin >> t;
	REP(_, t) {
		bool x = solve();
		if (x) cout << "YES\n";
		else cout << "NO\n";
	}
	return 0;
}
