
// ~/BAU/ACM-ICPC/Teams/A++/BlackBurn95
// ~/sudo apt-get Accpeted
// OverflowLimitExceeded

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <assert.h>
#include <utility>
#include <functional>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

const int N = 100001;
int n, in[26];
vector<string> v;
set<int> c;
vector<set<int> > g;
char s[N + 2];

bool vis[26], cycle;
string cur;
vector<string> res;

void dfs(int u) {
	if (cycle) return;
	if (vis[u]) {
		cycle = 1;
		return;
	}

	vis[u] = 1;
	cur += char(u + 'a');

	for (auto it = g[u].begin(); it != g[u].end(); it++) 
		dfs(*it);
}

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
#endif

	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%s", s);
		v.push_back(string(s));

		int f[26] = {};
		for (int j = 0; j < v.back().size(); j++) {
			if (f[v.back()[j]-'a']) {
				puts("NO");
				return 0;
			} 
			f[v.back()[j] - 'a']++;
		}

		for (int j = 0; j < 26; j++)
			if (f[j])
				c.insert(j);
	}

	g.resize(26);
	for (int i = 0; i < n; i++) {
		for (int j = 1; j < v[i].size(); j++) {
			g[v[i][j - 1] - 'a'].insert(v[i][j] - 'a');
			in[v[i][j] - 'a']++;
		}
	}

	for (int i = 0; i < 26; i++)
		if (g[i].size() > 1) {
			puts("NO");
			return 0;
		}

	cycle = 0;
	vector<int> tmp;
	for (auto it = c.begin(); it != c.end(); it++)
		if (in[*it] == 0)
			tmp.push_back(*it);

	for(int i=0; i<tmp.size(); i++) {
		if (!vis[tmp[i]]) {
			cur = "";
			dfs(tmp[i]);
			if (cycle) {
				puts("NO");
				return 0;
			}
			res.push_back(cur);
		}
	}

	string ans = "";
	sort(res.begin(), res.end());

	for (int i = 0; i < res.size(); i++)
		ans += res[i];
	
	for (int i = 0; i < v.size(); i++) {
		int cnt = 0;
		for (int j = 0; j < ans.size(); j++)
			if (ans[j] == v[i][0] && (ans.substr(j)).find(v[i]) != string::npos)
				cnt++;

		if (cnt != 1) {
			puts("NO");
			return 0;
		}
	}
	puts(ans.c_str());
	return 0; 
}