# include <stdio.h>
# include <bits/stdc++.h>


#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace std;

inline bool isvowel (char c) {
	c = tolower(c);
    if (c == 'a' || c == 'e' || c == 'i' || c == 'y' || c == 'o' || c == 'u') return 1;
    return 0;
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 6e5 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};

int n;
ll a[N];
vector < ll > st[66];
vector < ll > ans;

int main () {
    cin >> n;
    For (i, 1, n) {
        cin >> a[i];
        FOr (j, 60, 0) {
            if (a[i] & (1ll << j)) {
                st[j].pb(a[i]);
                break;
            }
        }
    }
    
    FOr (i, 60, 0) {
        if (st[i].empty()) continue;
        vector < ll > res;
        
        res.pb(st[i].back ());
        st[i].pop_back ();
        for (ll to : ans) {
            res.pb(to);
            if (to & (1ll << i)) {
                if (st[i].size()) {
                    res.pb(st[i].back ());
                    st[i].pop_back ();
                }
            }
        }
        if (st[i].size ()) {
            puts("No");
            exit(0);
        }
        
        swap(ans, res);
    }
    
    puts("Yes");
    for (auto to : ans) {
        cout << to << ' ';
    }
	return Accepted;
}

// Coded By OB