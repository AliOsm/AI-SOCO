
#include<bits/stdc++.h>
using namespace std;

#define fast ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)
#define ll long long
#define ld long double
#define pb push_back
#define fe first
#define se second
#define nl "\n"
#define pp pair < ll , ll > 
#define sz(x) (ll)x.size()
#define st(x) sort(x.begin(),x.end())
#define rst(x) sort(x.rbegin(), x.rend())
#define all(x) x.begin(),x.end()
long double pi = 3.14159265358979323;
 
const double EPS = 1e-12;
const int N = 1e5 + 5;
const int mod = 1e9 + 7;
const int k = 17;
ll arr[N]; 
map < ll , ll > mp; 
ll sparse[N];
ll dp[k][N];
ll n; 
 void build(){
    sparse[0] = -1;
    for(int i = 1 ; i <= n ; ++i){
        dp[0][i] = arr[i];
        sparse[i] = sparse[i >> 1] + 1;
    }
    for(int i = 1 ; i < k ; ++i){
        for(int j = 1 ; j + (1 << i) - 1 <= n ; ++j){
            dp[i][j] = __gcd(dp[i - 1][j] , dp[i - 1][j + (1 << (i - 1))]);
        }
    }
}
int query(int l , int r){
    int k = sparse[r - l + 1];
    int ql = dp[k][l];
    int qr = dp[k][r - (1 << k) + 1];
    return __gcd(ql , qr);
}
int main()
{
    fast;
   // ll n;
    cin >> n ;
    for(int i = 1 ; i <= n ;i++ ){
      cin >> arr[i];
    }
    //sparse table O(logn) m query kr rha h !!!
   build();

   for(int i = 1 ; i <= n ;i++ ){
      for(int j = i ; j <= n ;){
         //har possible gcd k upar traverse kr rha hun ....
         ll val = query(i,j); //Binary search kaa istemal  -> main pta krna chahta hun kahan tk y gcd possible h 
         if(val == query(i,n)){
            mp[val] += n - j + 1;
            j = n + 1;
         }
         else{
               ll l = j , r = n ;
               while(l < r){
                  ll mid = (l + r) >> 1;
                  if(query(i , mid) == val){
                     l = mid + 1;
                  }
                  else
                     r = mid;
               }
               mp[val] += r - j;
               j = r ;
         }
      }
   }
   ll q;
   cin >> q ;
   while(q--){
      ll x;
      cin >>x ;
      cout << mp[x] << "\n";
   }
    





















    
    return 0;
    
}