#include <bits/stdc++.h>
using namespace std;
    const int INF = 2000000000;

    struct Edge {
        int from, to, cap, flow, index;
        Edge(int from, int to, int cap, int flow, int index) :
            from(from), to(to), cap(cap), flow(flow), index(index) { }
    };

    struct Dinic {
        int N;
        vector<vector<Edge> > G;
        vector<Edge *> dad;
        vector<int> Q;

        Dinic(int N) : N(N), G(N), dad(N), Q(N) { }

        void AddEdge(int from, int to, int cap) {
            G[from].push_back(Edge(from, to, cap, 0, G[to].size()));
            if(from == to) G[from].back().index++;
            G[to].push_back(Edge(to, from, 0, 0, G[from].size() - 1));
        }

        long long BlockingFlow(int s, int t) {
            fill(dad.begin(), dad.end(), (Edge *)NULL);
            dad[s] = &G[0][0] - 1;

            int head = 0, tail = 0;
            Q[tail++] = s;
            while(head < tail) {
                int x = Q[head++];
                for(int i = 0; i < G[x].size(); i++) {
                    Edge &e = G[x][i];
                    if(!dad[e.to] && e.cap - e.flow > 0) {
                        dad[e.to] = &G[x][i];
                        Q[tail++] = e.to;
                    }
                }
            }
            if(!dad[t]) return 0;

            long long totflow = 0;
            for(int i = 0; i < G[t].size(); i++) {
                Edge *start = &G[G[t][i].to][G[t][i].index];
                int amt = INF;
                for(Edge *e = start; amt && e != dad[s]; e = dad[e->from]) {
                    if(!e) {
                        amt = 0;
                        break;
                    }
                    amt = min(amt, e->cap - e->flow);
                }
                if(amt == 0) continue;
                for(Edge *e = start; amt && e != dad[s]; e = dad[e->from]) {
                    e->flow += amt;
                    G[e->to][e->index].flow -= amt;
                }
                totflow += amt;
            }
            return totflow;
        }

        long long GetMaxFlow(int s, int t) {
            long long totflow = 0;
            while(long long flow = BlockingFlow(s, t))
                totflow += flow;
            return totflow;
        }
    };
int mat[101][101];
int main()
{
    int n,m;
    cin>>n>>m;
    Dinic d(2*n+2);
    int src=2*n;
    int dst=src+1;
    vector<int>v1(n),v2(n);
    int total=0,total2=0;
    for(int i=0;i<n;i++)
    cin>>v1[i],total+=v1[i];
    for(int i=0;i<n;i++)
    cin>>v2[i],total2+=v2[i];
    for(int i=0;i<n;i++)
    d.AddEdge(src,i,v1[i]);
    for(int i=0;i<n;i++)
    d.AddEdge(i+n,dst,v2[i]);
    for(int i=0;i<n;i++)
    d.AddEdge(i,i+n,1e9);
    for(int i=0;i<m;i++){
        int a,b;
        cin>>a>>b;
        a--;
        b--;
        d.AddEdge(a,b+n,1e9);
        d.AddEdge(b,a+n,1e9);
    }
    memset(mat,0,sizeof mat);
    if(d.GetMaxFlow(src,dst)==total&&total==total2){
        cout<<"YES"<<endl;
        for(int j=0;j<n;j++){
            for(Edge i : d.G[j]){
                if(i.from==src||i.to==src)continue;
                if(i.from==dst||i.to==dst)continue;
                //cout<<i.from<<" "<<i.to<<" "<<i.flow<<endl;
                mat[(i.from)%n][(i.to)%n]+=i.flow;
            }
        }
        for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cout<<mat[i][j]<<" ";
        }
        cout<<endl;
        }
    }
    else {
        cout<<"NO"<<endl;
    }


    return 0;
}
