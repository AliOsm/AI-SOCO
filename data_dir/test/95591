#include <bits/stdc++.h>
#define base 1000000007LL
#define ll long long
#define X first
#define Y second
#define ld double
#define pb push_back
#define EPS 1e-9
#define all(a) a.begin(),a.end()
#define sz(a) int((a).size())
#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORE(i,a,b) for (int i = (a); i >= (b); i--)
#define FORALL(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define what_is(x) cout << #x << " is " << x << endl;
#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
//__builtin_ffs(x) return 1 + index of least significant 1-bit of x
//__builtin_clz(x) return number of leading zeros of x
//__builtin_ctz(x) return number of trailing zeros of x

using namespace std;
typedef pair<int, int> II;
typedef pair<ll, II> III;

void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
	cout << *it << " = " << a << endl;
	err(++it, args...);
}

int n, m, L;
ll a[100010];
set<II> s;

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(NULL);
    cin >> n >> m >> L;
    FOR(i,1,n) cin >> a[i];
    int cnt = 0, l = 0, r = 0;
    FOR(i,1,n) 
        if (a[i] > L) {
            if (cnt == 0) {
                l = i;
                r = i-1;
            }
            r++;
            cnt++;
        }
        else {
            if (cnt) {
                s.insert({l, r});
                cnt = l = r = 0;
            }
        }
    if (cnt) s.insert({l, r});
    FOR(o,1,m) {
        int ch;
        cin >> ch;
        if (ch == 0) {
            cout << sz(s) << "\n";
        }
        else {
            int p, d;
            cin >> p >> d;
            if (a[p] <= L && a[p] + d > L) {
                //cout << "wut?\n";
                if (sz(s) == 0) {
                    s.insert(II(p, p));
                }
                else {
                    set<II>::iterator it = s.upper_bound(II(p, 0));
                    //cout << it->X << " " << it->Y << endl;
                    if (it != s.end()) {
                        if (it == s.begin()) {
                            if (it->X - 1 == p) {
                                
                                s.insert({it->X - 1, it->Y});
                                s.erase(it);
                            }
                            else s.insert({p, p});
                        }
                        else {
                            set<II>::iterator itt = it;
                            itt--;
                            if (it->X - 1 == p && itt->Y + 1 == p) {
                                s.insert({itt->X, it->Y});
                                s.erase(it);
                                s.erase(itt);
                            }
                            else if (it->X - 1 == p) {
                                s.insert({it->X - 1, it->Y});
                                s.erase(it);
                            }
                            else if (itt->Y + 1 == p) {
                                s.insert({itt->X, itt->Y+1});
                                s.erase(itt);
                            }
                            else s.insert({p, p});
                        }
                    }
                    else {
                        set<II>::iterator itt = it;
                        itt--;
                        if (itt->Y + 1 == p) {
                            s.insert({itt->X, itt->Y+1});
                            s.erase(itt);
                        }
                        else s.insert({p, p});
                    }
                    
                }
            } 
            a[p] += d;
        }
    }
    return 0;
}

