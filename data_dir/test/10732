#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> void mini(T &l, T r) {l = min(l, r);}
template <class T> void maxi(T &l, T r) {l = max(l, r);}

template <class T> using Tree = tree <T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

string to_string(string s) {
    return '"' + s + '"';
}

string to_string(bool a) {
    return a ? "T" : "F";
}

string to_string(const char* s) {
    return to_string((string) s);
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
    return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A>
string to_string(A v) {
    bool first = true;
    string res = "{";
    for (const auto &x : v) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(x);
    }
    res += "}";
    return res;
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
    cerr << " " << to_string(H);
    debug_out(T...);
}

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

#define X first
#define Y second

using ll = long long;
using ld = long double;

const int N = 2e5 + 10;

int n, m, k;
int x[N], y[N];
set <int> e[N];
int ind[N];
bool inset[N];
int ans[N];

void dec(set < pair <int, int> > &st, int x) {
    st.erase({ind[x], x});
    ind[x]--;
    st.insert({ind[x], x});
}

void del(set < pair <int, int> > &st) {
    if (st.empty()) return;
    while (!st.empty()) {
        auto it = st.begin();
        if (it->X < k) {
            for (auto y : e[it->Y]) /*if (inset[y])*/ {
                assert(inset[y]);
                dec(st, y);
                e[y].erase(it->Y);
            }
            ind[it->Y] = 0;
            e[it->Y].clear();
            inset[it->Y] = 0;
            st.erase(it);
        } else {
            break;
        }
    }
}

void run() {
    scanf("%d%d%d", &n, &m, &k);
    for (int i = 1; i <= m; ++i) {
        scanf("%d%d", x + i, y + i);
        ind[x[i]]++;
        ind[y[i]]++;
        e[x[i]].insert(y[i]);
        e[y[i]].insert(x[i]);
    }

    set < pair <int, int> > st;
    for (int i = 1; i <= n; ++i) {
        st.emplace(ind[i], i);
        inset[i] = 1;
    }

    del(st);
    debug(st);
    debug(vector <int> (ind + 1, ind + n + 1));
    ans[m] = st.size();

    for (int i = m; i >= 1; --i) {
        if (inset[x[i]] && inset[y[i]]) {
            dec(st, x[i]);
            dec(st, y[i]);
            e[x[i]].erase(y[i]);
            e[y[i]].erase(x[i]);
            debug(ind[x[i]], ind[y[i]], x[i], y[i]);
            del(st);
            debug(ind[x[i]], ind[y[i]], x[i], y[i]);
            debug(i, st);
        }
        ans[i - 1] = st.size();
    }

    for (int i = 1; i <= m; ++i) {
        printf("%d\n", ans[i]);
    }
}

int main() {
    run();
    return 0;
}
