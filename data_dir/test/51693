#include <bits/stdc++.h>

using namespace std;

#define mem(a,b) memset(a,b,sizeof(a))
#define FOR(i,j,k) for(int i=j;i<=k;i++)
#define REV(i,j,k) for(int i=j;i>=k;i--)
#define FORR(i,j,k,l) for(int i=j;i<=k;i+=l)
#define inf         freopen("in.txt", "r", stdin)
#define outf        freopen("out.txt", "w", stdout)
#define pf          printf
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define sfff(a,b,c)    scanf("%d %d %d", &a, &b, &c)
#define minn          (long long)-1000000000000000000
#define maxx          (long long) 1000000000000000000
#define mod          1000000007
#define M_PI           3.14159265358979323846  /* pi */
#define LL           long long
#define NL '\n'
#define cnd tree[idx]
#define lnd (idx<<1)
#define rnd ((idx<<1)+1)
#define PB push_back
#define F first
#define S second
#define MAX 100010
#define sz 100010
#define MK make_pair
#define valid(nx,ny)  ((nx >= 0) && (nx < row) && (ny >= 0) && (ny < col))
typedef pair<int,int> pr;

long long  arr[10000000+1], prime[10000000+1], np, pfac[20+1], tim[20+1], nf, divi[100000], nd;
/// np(num of prime)  , nd (number of divisor)
/// nf (num of prime fac)
///pfac stores prime fac and tim count numbers of a prime fac
/// divi stores the divisor of the number
void sieve( long long n )
{
    long long  m = sqrt(n), i, j;
    prime[np] = 2; np++;
    for( i=3; i<=m; i += 2)
    {
        if( arr[i] == 0 )
         {
            for( j=i*i; j<=n; j += (i+i) )
                arr[j]++;
         }
    }
    for( i=3; i<=n; i += 2)
    {
        if( arr[i] == 0 )
         {
            prime[np] = i;
            np++;
         }
    }
}

struct info
{
    int x, y, v;
};
vector<info> vec;

int main()
{
    ios::sync_with_stdio(false);

    sieve(6000001); /// range of sieve
    sort(prime, prime+np);
    ///cout << np << endl;
    int n, m;
    LL x, y = 0, a = 0, b, c = 0, z = 0;

    cin >> n >> m;
    x = lower_bound(prime, prime+np, n) - prime;
    x = prime[x]; a = x;
    cout << x << ' ' << x << endl;

    FOR(i,1,n-2)
    {
        x--; z++;
        cout << i << ' ' << i+1 << ' ' << 1 << NL;
    }

    cout << n-1 << ' ' << n << ' ' << x << endl;
    z++;

    x = upper_bound(prime, prime+np, n) - prime;
    x++; x++;

    x = prime[x];

    FOR(i,1,n)
        FOR(j, i+2, n)
        {
            if(z < m)
            {
                z++;
                cout << i << ' ' << j << ' ' << x << endl;
            }
            else break;
        }

}

