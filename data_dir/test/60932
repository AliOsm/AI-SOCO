//ITNOG
#include<bits/stdc++.h>
 
using namespace std;
 
#define scan(x) do{while((x=getchar())<'0'); for(x-='0'; '0'<=(_=getchar()); x=(x<<3)+(x<<1)+_-'0');}while(0)
char _;

//#define int long long 
#define rep(i, s, e) for(int i = s; i < e; i ++)
typedef double ld;

const int maxN = 200*1000 + 5;
const int maxM = 1000*1000 + 5;
const int mod = 1000*1000*1000 + 7;
const int base = 701;
const int maxL = 17;
typedef long long ll;
#define X first
#define Y second

vector<int> vec[maxN];
vector<int> c[maxN][2];
int deg[maxN];
bool mark[maxN], ans[maxN];
bool good[maxN];

main()
{
    ios::sync_with_stdio(0); cin.tie(0); 
    int n,m;cin >> n >> m;
    
    rep(i,0,n)
    {
	  int len; cin >> len;
	  rep(j,0,len)
	  {
		int x; cin >> x; vec[i].push_back(x);
 		int fl = 0;
		if(x < 0) x = -x, fl = 1;
		c[x][fl].push_back(i);
		deg[x] ++;
	  }
    }

    rep(i,1,m+1)
    {
	  if(deg[i] == 0) { mark[i] = 1; continue; }
	  if(deg[i] == 1) 
	  {
		mark[i] = 1;
		if(c[i][0].size()) good[c[i][0][0]] = 1, ans[i] = 1;
		else good[c[i][1][0]] = 1;
		continue;
	  }
	  
	  if(c[i][0].size() == 2)
	  {
		ans[i] = 1; mark[i] = 1;
		rep(j,0,2)
		    good[c[i][0][j]] = 1;
		continue;
	  }

	  if(c[i][1].size() == 2)
	  {
		mark[i] = 1;
		rep(j,0,2)
		    good[c[i][1][j]] = 1;
		continue;
	  }
    }
    
    queue<int> q;
    rep(i,0,n) if(good[i] == 1) q.push(i);

    while(q.size())
    {
	  int v = q.front(); q.pop();
	  rep(i,0,vec[v].size())
	  {
		int u = vec[v][i];
		int fl = 0;
		if(u < 0) u = -u, fl = 1;

		if(mark[u] == 0)
		{
		    if(fl) ans[u] = 1; mark[u] = 1;
		    int pp = c[u][!fl][0];
		    if(good[pp] == 0) 
			  good[pp] = 1, q.push(pp);
		}
	  }
    }

    
    rep(i,0,n) if(good[i] == 0 && vec[i].size() == 1) q.push(i);
    
    rep(i,0,n) deg[i] = vec[i].size();
    set<int> s;
    rep(i,0,n) if(!good[i]) s.insert(i);


    

    while(s.size())
    {
	  while(q.size())
	  {
		int v = q.front(); q.pop();
		if(deg[v] == 0) { cout << "NO" << endl; return 0; }
		s.erase(v);
		good[v] = 1;
		
		rep(i,0,vec[v].size())
		{
		    int u = vec[v][i];
		    int fl = 0;
		    if(u < 0) u = -u, fl = 1;
		    
		    if(mark[u] == 0)
		    {
			  if(fl==0) ans[u] = 1; 
			  mark[u] = 1;
			  int pp = c[u][!fl][0];
			  if(good[pp] == 0)
			  {
				deg[pp] --;
				if(deg[pp] == 1) q.push(pp);
			  }
		    }
		    
		}
	  }

	  int v = *s.begin(); s.erase(v);
	  bool ch = good[v];
	  good[v] = 1;
	  
	  rep(i,0,vec[v].size())
	  {
		int u = vec[v][i];
		int fl = 0;
		if(u < 0) u = -u, fl = 1;

		if(mark[u] == 0)
		{
		    if(ch == 0)
		    {
			  if(fl==0) ans[u] = 1; 
			  mark[u] = 1;
			  ch = 1;
			  
			  int pp = c[u][!fl][0];
			  if(good[pp] == 0)
			  {
				deg[pp] --;
				if(deg[pp] == 1) q.push(pp);
			  }
		    }
		    else
		    {
			  if(fl) ans[u] = 1; 
			  mark[u] = 1;
			  int pp = c[u][!fl][0];
			  if(good[pp] == 0) 
				good[pp] = 1;
		    }
		}
	  }
    }


    cout << "YES" << endl;
    rep(i,1,m+1) cout << ans[i];
    cout << endl;    
    return 0;
}
