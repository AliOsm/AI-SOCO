#include<bits/stdc++.h>
#define MP make_pair
#define PB push_back
#define PP pop_back()
#define ALL(x) x.begin(),x.end()
#define st first
#define nd second
#define sz(x) (int) x.size()
#define pii pair<int,int>
#define ii int,int
#define ll long long
#define lf double
#define llu long long unsigned
#define INPUT freopen("inp.in","r",stdin);
#define OUTPUT freopen("oup.out","w",stdout);
#define sag(x) 2*x+1
#define sol(x) 2*x
#define orta (lf((bas+son)/2.0000000000))
#define MIN3(x,y,z) min(min(x,y),z)
#define MAX3(x,y,z) max(max(x,y),z)
#define FOR(i,j,k) for(int i=j;i<=k;i++)
#define ROF(i,j,k) for(int i=j;i>=k;i--)
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define MOD 100000000
#define inf 105
#define N 100005
using namespace std;
int n,m,x[N],y[N],cev[N],pr[N];
vector< pii > row[2*N],col[2*N],di1[2*N],di2[2*N];
int main() {
    scanf("%d %d",&n,&m);
    FOR(i,1,m) {
        scanf("%d %d",&x[i],&y[i]);
        row[x[i]].PB(MP(y[i],i));
        col[y[i]].PB(MP(x[i],i));
        di1[N+y[i]-x[i]+1].PB(MP(x[i],i));
        di2[y[i]+x[i]-1].PB(MP(x[i],i));
    }
    FOR(i,1,2*N) {
        if(sz(row[i])) {
            sort(ALL(row[i]));
            FOR(j,0,sz(row[i])-1) {
                if(!j || !(sz(row[i])-j-1)) {
                    cev[row[i][j].nd]+=!!(sz(row[i])-1);
                }
                else {
                    cev[row[i][j].nd]+=2;
                }
            }
        }
        if(sz(col[i])) {
            sort(ALL(col[i]));
            FOR(j,0,sz(col[i])-1) {
                if(!j || !(sz(col[i])-j-1)) {
                    cev[col[i][j].nd]+=!!(sz(col[i])-1);
                }
                else {
                    cev[col[i][j].nd]+=2;
                }
            }
        }
        if(sz(di1[i])) {
            sort(ALL(di1[i]));
            FOR(j,0,sz(di1[i])-1) {
                if(!j || !(sz(di1[i])-j-1)) {
                    cev[di1[i][j].nd]+=!!(sz(di1[i])-1);
                }
                else {
                    cev[di1[i][j].nd]+=2;
                }
            }
        }
        if(sz(di2[i])) {
            sort(ALL(di2[i]));
            FOR(j,0,sz(di2[i])-1) {
                if(!j || !(sz(di2[i])-j-1)) {
                    cev[di2[i][j].nd]+=!!(sz(di2[i])-1);
                }
                else {
                    cev[di2[i][j].nd]+=2;
                }
            }
        }
    }
    FOR(i,1,m) {
        pr[cev[i]]++;
    }
    FOR(i,0,8) {
        printf("%d ",pr[i]);
    }
}
