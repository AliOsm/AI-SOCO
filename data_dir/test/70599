#include <bits/stdc++.h>
using namespace std;

using ll = long long;
const int sz = 1e5 + 10;
const int mod = 1000007;

const int INF = 1e9;

struct edmonds_karp {
        int n;
        vector < int > par;
        vector < bool > vis;
        vector < vector < int > > graph;

        edmonds_karp () {}
        edmonds_karp( int _n ) : n( _n ), par( _n ), vis( _n ), graph( _n, vector < int > ( _n, 0 ) ) {}
        ~edmonds_karp() {}

        void add_edge( int from, int to, int cap, bool directed ) {
                graph[ from ][ to ] += cap;
                graph[ to ][ from ] = directed ? graph[ to ][ from ] + cap : graph[ to ][ from ];
        }

        void set_edge_cap( int from, int to, int cap, bool directed ) {
                graph[ from ][ to ] = cap;
                graph[ to ][ from ] = directed ? cap : graph[ to ][ from ];
        }

        bool bfs( int src, int sink ) {
                int u;
                fill( vis.begin(), vis.end(), false );
                fill( par.begin(), par.end(), -1 );
                vis[ src ] = true;
                queue < int > q;
                q.push( src );
                while( !q.empty() ) {
                        u = q.front();
                        q.pop();
                        if( u == sink ) return true;
                        for(int i=0; i<n; i++) {
                                if( graph[u][i] > 0 and not vis[i] ) {
                                        q.push( i );
                                        vis[ i ] = true;
                                        par[ i ] = u;
                                }
                        }
                }
                return par[ sink ] != -1;
        }

        int min_val( int i ) {
                int ret = INF;
                for( ; par[ i ] != -1; i = par[ i ] ) {
                        ret = min( ret, graph[ par[i] ][ i ] );
                }
                return ret;
        }

        void augment_path( int val, int i ) {
                for( ; par[ i ] != -1; i = par[ i ] ) {
                        graph[ par[i] ][ i ] -= val;
                        graph[ i ][ par[i] ] += val;
                }
        }

        int max_flow( int src, int sink ) {
                int min_cap, ret = 0;
                while( bfs( src, sink ) ) {
                        augment_path( min_cap = min_val( sink ), sink );
                        ret += min_cap;
                }
                return ret;
        }
};

int from[555], to[555];
double cap[555];

int main() {
        #ifdef CLown1331
                freopen("in.txt", "r", stdin);
        #endif /// CLown1331

        int n, m;
        int x;

        while( cin >> n >> m >> x ) {

                edmonds_karp flow_graph( n );

                for( int i=0; i<m; i++ ) {
                        cin >> from[i] >> to[i] >> cap[i];
                        --from[i]; --to[i];
                }

                double lo = 1.0 / x, hi = INF, mid;
                int flow;

                for( int iter=0; iter<128; iter++ ) {
                        mid = ( lo + hi ) / 2;
                        for( int j=0; j<m; j++ ) flow_graph.set_edge_cap( from[j], to[j], cap[j] / mid, 0 );
                        flow = flow_graph.max_flow( 0, n - 1 );
                        if( flow >= x ) lo = mid; else hi = mid;
                }

                cout << fixed << setprecision( 16 ) << ( mid ) * x << "\n";

                cerr << "-----\n";
        }

        return 0;
}
