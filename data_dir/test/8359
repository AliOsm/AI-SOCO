#include <iostream>
#include <utility>
#include <algorithm>
#include<cmath>
#include<algorithm>
#include<vector>
#include<cstring>
#include <math.h>
#include <map>
#include <ctime>
#include <vector>
#include <iomanip>
#include <set>
#include <deque>
#define ss second
#define ff first
#define time() printf("%fs.\n", (float) clock () / CLOCKS_PER_SEC)
#define use_fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define ret(n) return cout << n, 0
#define se(n) cout << setprecision(n) << fixed
#define ll long long
#define pb push_back
using namespace std;

const ll N = 2e6, OO = 1e18, M = 1e9 + 7;
typedef pair <ll, ll> pii;
pii a[N];
string s;
bool b[N];
vector <ll> v[N];

string bi(ll x) {
	string t = "";
	if(x > 0) {
		t = (x % 2 + '0');
		t += bi(x / 2); 
	}
	return t;
}

ll il(string t) {
	ll x = 0;
	for(int i = 0; i < t.size(); i++)
		x = (x * 2) + (t[i] - '0'); 
	return x;
}

void w(string t1, string t2) {
	if(t1.size() == s.size()) {
		ll x = il(t1), y = il(t2);
		if(t1 == t2 || x == 0 || y == 0 || x < y)
			return;
		v[x].pb(y);
		v[y].pb(x);
		a[x].ff++;
		a[y].ff++;
		return;
	}
	if(s[t1.size()] == '0') {
		t1 += '0';
		t2 += '0';
		w(t1, t2);
		t1[t1.size() - 1] = '1';
		t2[t2.size() - 1] = '1';
		w(t1, t2);
	}
	else {
		t1 += '1';
		t2 += '0';
		w(t1, t2);
		t1[t1.size() - 1] = '0';
		t2[t2.size() - 1] = '1';
		w(t1, t2);
	}
}

int main () {
	ll n, m;
	cin >> n >> m;
	s = bi(m);
	while(s.size() < n) {
		s += '0';
	}
	n = 1 << n;
	for(int i = 1; i < n; i++)
		a[i].ss = i;
	reverse(s.begin(), s.end());
	string h = "";
	w(h, h);
	sort(a + 1, a + n);
	vector <ll> t;
	for(int i = 1; i < n; i++) {
		if(a[i].ss != m) {
			if(b[a[i].ss] == false) {
				t.pb(a[i].ss);
				for(int j = 0; j < v[a[i].ss].size(); j++)
					b[v[a[i].ss][j]] = true;
			}
		}
	}
	if(t.size() == 0)
		ret(0);
	cout << t.size() << endl;
	cout << t[0] << " ";
	for(int i = 1; i < t.size(); i++) {
		ll x =  t[i] xor t[i - 1];
		cout << x << " ";
	}
	return 0;
}

