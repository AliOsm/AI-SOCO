#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
typedef long long ll;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e3 + 5;
const double eps = 1e-6;
using namespace std;
int X[MAXN], Y[MAXN];
double ans = 0;
int dp[MAXN][MAXN], n = 0;

double cross(int i, int j, int k)
{
    return (X[j] - X[i]) * (X[k] - X[i]) + (Y[j] - Y[i]) * (Y[k] - Y[i]);
}

void f(double x, double y, double mi)
{
    for (int i = 0; i < n; i++)
        if (hypot(X[i] - x, Y[i] - y) + eps < mi)
            return;
    ans = max(ans, mi);
}

int main()
{
    ni(n);
    for (int i = 0; i < n; i++)
        scanf("%d %d", X + i, Y + i);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            dp[i][j] = (X[i]-X[j])*(X[i]-X[j])+(Y[i]-Y[j])*(Y[i]-Y[j]);
    for (int i = 0; i < n; i++)
        for (int j = i + 1; j < n; j++)
            for (int k = j + 1; k < n; k++)
                if (cross(i, j, k) > 0 && cross(j, i, k) > 0 && cross(k, i, j) > 0)
                {
                    double a1 = -2 * (X[j]-X[i]);
                    double b1 = -2 * (Y[j]-Y[i]);
                    double c1 = X[i]*X[i]-X[j]*X[j]+Y[i]*Y[i]-Y[j]*Y[j];
                    double a2 = -2 * (X[k]-X[i]);
                    double b2 = -2 * (Y[k]-Y[i]);
                    double c2 = X[i]*X[i]-X[k]*X[k]+Y[i]*Y[i]-Y[k]*Y[k];
                    if (X[i] == X[j])
                        swap(a1, a2), swap(b1, b2), swap(c1, c2);
                    b2 -= b1 * a2 / a1;
                    c2 -= c1 * a2 / a1;
                    double b = c2 / b2;
                    c1 -= b1 * b;
                    double a = c1 / a1;
                    f(a, b, hypot(X[i] - a, Y[i] - b));
                }
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
        {
            if (i == j)
                continue;
            for (int k = 0; k < n; k++)
            {
                if (i == k || k == j)
                    continue;
                for (int l = 0; l < n; l++)
                {
                    if (i == l || l == j || k == l)
                        continue;
                    if (!(dp[i][j] == dp[k][l] && dp[i][k] == dp[j][l] && dp[i][j] + dp[j][k] == dp[i][k]))
                        continue;
                    f(0.5 * (X[i] + X[k]), 0.5 * (Y[i] + Y[k]), sqrt(dp[i][k]) / 2.);
                }
            }
        }
    if (ans < eps)
        return !pri(-1);
    printf("%.20f\n", ans);
    return 0;
}
