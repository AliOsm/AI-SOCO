#include <cstdio>
#include <string>
#include <vector>
#include <iostream>
#include <set>
#include <map>
#include <algorithm>

using namespace std;

bool isPrefix(const string &str, const string &prefix) {
    return str.substr(0, prefix.length()) == prefix;
}

bool isSuffix(const string &str, const string &suffix) {
    return str.substr(str.length() - suffix.length()) == suffix;
}

string getSolution(const string &str, const vector<string> &v) {
    vector<int> prefix, suffix, both;
    for (int i = 0; i < v.size(); ++i) {
        bool is_prefix = isPrefix(str, v[i]);
        bool is_suffix = isSuffix(str, v[i]);
        if (is_prefix && is_suffix)
            both.push_back(i);
        else if (is_prefix)
            prefix.push_back(i);
        else if (is_suffix)
            suffix.push_back(i);
        else
            return "";
    }
    if (suffix.size() * 2 > v.size() || prefix.size() * 2 > v.size())
        return "";
    string solution(v.size(), 'P');
    vector<bool> used_lengths(str.length(), false);
    for (int i : suffix) {
        solution[i] = 'S';
        used_lengths[v[i].length()] = true;
    }
    int need = v.size() / 2 - suffix.size();
    if (need > both.size())
        return "";
    for (int i : both) {
        if (!used_lengths[v[i].length()]) {
            solution[i] = 'S';
            used_lengths[v[i].length()] = true;
            --need;
            if (need == 0)
                break;
        }
    }
    if (need != 0)
        return "";
    return solution;
}

int main(int argc, char **argv) {
    int n;
    cin >> n;
    vector<string> v(2 * n - 2);
    vector<string> longest;
    for (auto & str : v) {
        cin >> str;
        if (str.length() == n - 1)
            longest.push_back(str);
    }
    string solution1 = getSolution(longest[0] + longest[1].back(), v);
    string solution2 = getSolution(longest[1] + longest[0].back(), v);
    if (solution1.empty())
        cout << solution2 << "\n";
    else
        cout << solution1 << "\n";
    return 0;
}