#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
#define ii pair<int,int>
#define ll long long
#define pll pair<ll,ll>
// order_of_key(k), find_by_order(k)
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 
#define iiordered_set tree<pll, null_type,less<pll>, rb_tree_tag,tree_order_statistics_node_update>
using namespace std;
auto clk=clock();
mt19937_64 rang(chrono::high_resolution_clock::now().time_since_epoch().count());
ll rng(ll lim) {
    uniform_int_distribution<ll> uid(0,lim-1);
    return uid(rang);
}
#define rd(x)   scanf("%d",&x);
#define MOD 1000000007
// #define MOD 998244353
// #define left(x) (x<<1)
// #define right(x)    ((x<<1)|1)
// #define mid(l,r)    ((l+r)>>1)
#define INFl 1e18
#define vi vector<int>
#define vvi vector<vi>
#define vl vector<long long>
#define vvl vector<vl>
#define forl(i,n) for(int i=0;i<n;i++)
#define fore(i,n) for(int i=1;i<=n;i++)
#define debug(x)    printf("DEBUG:%d\n",x);
ll power(ll a,ll b, ll m=MOD)
{
    ll res=1;
    while(b>0)
    {
        if(b&1)
            res=(res*a)%m;
        a=(a*a)%m;
        b>>=1;
    }
    return res;
}
ll inverse(ll a,ll m=MOD)
{
    return power(a,m-2,m);
}
int ceil(int a,int b)
{
    return (a+b-1)/b;
}
#define sz(x) (x.size())
#define vll vector<pll>
#define vii vector<ii>
#define vvii vector<vii>
#define F first
#define S second
#define forl(i,n) for(int i=0;i<n;i++)
#define fore(i,n) for(int i=1;i<=n;i++)
#define CASE(t) cout<<"Case #"<<(t)<<": ";
#define INF 1020000000
#define gcd(a,b) __gcd(a,b)
#define all(x)  x.begin(),x.end()
#define mp make_pair
#define pb push_back
#define print(x)    for(auto it=x.begin();it!=x.end();it++) cout<<*it<<' '; cout<<endl;
#define printii(x)  for(auto it=x.begin();it!=x.end();it++) cout<<it->F<<' '<<it->S<<endl;  
vvl matmul(const vvl &a,const vvl &b,ll M=MOD)
{
    int n=a.size(),m=a[0].size(),l=b[0].size();
    assert(m==b.size());
    vvl c(n,vl(l,0));
    forl(i,n)
    forl(j,l)
    forl(k,m)
    {
        c[i][j]=(c[i][j]+a[i][k]*b[k][j])%M;
    }
    return c;
}
vvl matpow(vvl a,ll p,ll M=MOD)
{
    assert(a.size()==a[0].size());
    int n=a.size();
    vvl res(n,vl(n,0));
    forl(i,n)   res[i][i]=1;
    while(p>0)
    {
        if(p&1) res=matmul(res,a,M);
        a=matmul(a,a,M);
        p>>=1;
    }
    return res;
}
void sieve(vi& primes,int mx)
{
    vi is_comp(mx,0);
    for(int i=2;i<mx;i++)
    {
        if(!is_comp[i])
            primes.pb(i);
        for(int j=0;j<primes.size()&&primes[j]*i<mx;j++)
        {
            is_comp[i*primes[j]]=1;
            if(i%primes[j]==0)
                break;
        }
    }
}
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
#define p 31
#define MAX 50001
#define SQ INF   //TODO Change this to 200
#define int ll
int pw[MAX],invpw[MAX],hsh[MAX];
string s;
int n;
void precalc()
{
    pw[0]=1;
    for(int i=1;i<MAX;i++)
        pw[i]=(pw[i-1]*p)%MOD;
    invpw[MAX-1]=inverse(pw[MAX-1]);
    for(int i=MAX-2;i>=0;i--)
        invpw[i]=(invpw[i+1]*p)%MOD;
}
int hashstr(string s)
{
    int cur=0;
    for(int i=0;i<s.length();i++)
    {
        cur=cur+pw[i]*(s[i]-'a'+1)%MOD;
        cur%=MOD;
    }
    return cur;
}
void findHash()
{
    int cur=0;
    for(int i=0;i<n;i++)
    {
        cur=cur+pw[i]*(s[i]-'a'+1)%MOD;
        cur%=MOD;
        hsh[i]=cur;
    }
}
int getHash(int l,int r)
{
    if(l==0)    return hsh[r];
    else
    {
        int cur=(MOD+hsh[r]-hsh[l-1])%MOD*invpw[l]%MOD;
        return cur;
    }
}
struct qNode
{
    string a,b;
    int ha,hb,idx,res;
    qNode(string x,string y,int i)
    {
        a=x,b=y,idx=i;
        ha=hashstr(a);
        hb=hashstr(b);
        res=INF;
    }
    qNode(){}
};
unordered_map<int,vi> mm;
unordered_map<int,vi> qid;
map<ii,int> dp;
vector<qNode> query;
void solve1(string a)
{
    // cout<<a<<endl;
    int len=a.length();
    int h=hashstr(a);
    unordered_map<int,int> mn;
    // cout<<h<<endl;
    vi prv(n,-1),nxt(n,-1);
    vi &occ=mm[h];
    for(int x:occ)
        prv[x]=x,nxt[x]=x;
    for(int i=1;i<n;i++)
    {
        if(prv[i]==-1) prv[i]=prv[i-1];
    }
    for(int i=n-2;i>=0;i--)
    {
        if(nxt[i]==-1)  nxt[i]=nxt[i+1];
    }
    for(int i=0;i<n;i++)
    {
        forl(j,4)
        {
            if(i+j>=n)  continue;
            int l=i,r=i+j;
            int hh=getHash(l,r);
            if(prv[i]!=-1)
            {
                int lens=max(r,prv[i]+len-1)-min(l,prv[i])+1;
                if(mn.count(hh))    mn[hh]=min(mn[hh],lens);
                else mn[hh]=lens;
            }
            if(nxt[i]!=-1)
            {
                int lens=max(r,nxt[i]+len-1)-min(l,nxt[i])+1;
                if(mn.count(hh))    mn[hh]=min(mn[hh],lens);
                else mn[hh]=lens;
            }
        }
    }
    for(int Q:qid[h])
    {
        qNode &q=query[Q];
        int hh=q.ha^q.hb^h;
        if(mn.count(hh))
            q.res=min(q.res,mn[hh]);
    }
}
void solve()
{
    cin>>s; n=s.length();   findHash(); 
    forl(i,n)
    forl(j,4)
    {
        if(i+j>=n)  break;
        mm[getHash(i,i+j)].pb(i);
        // cout<<getHash(i,i+j)<<' '<<i<<' '<<i+j<<endl;
    }
    int Q;
    cin>>Q;
    forl(i,Q)
    {
        string a,b;
        cin>>a>>b;
        qid[hashstr(a)].pb(i);
        qid[hashstr(b)].pb(i);
        query.pb(qNode(a,b,i));
    }
    forl(i,Q)
    {
        qNode &q=query[i];
        if(q.res!=INF)   continue;
        if(mm[q.ha].size()>=SQ)
            solve1(q.a);
        else if(mm[q.hb].size()>=SQ)
            solve1(q.b);
        else
        {
            if(dp.count(mp(q.ha,q.hb)))
            {
                q.res=dp[mp(q.ha,q.hb)];
                continue;
            }
            vi &occ1=mm[q.ha];
            vi &occ2=mm[q.hb];
            int pa=-1,pb=-1,la=sz(q.a),lb=sz(q.b);
            int p1=0,p2=0;
            while(p1<sz(occ1) && p2<sz(occ2))
            {
                if(occ1[p1]<occ2[p2])
                {
                    if(pb!=-1)
                    {
                        int L=min(occ1[p1],pb);
                        int R=max(occ1[p1]+la,pb+lb);
                        q.res=min(q.res,R-L);
                    }
                    pa=occ1[p1];
                    p1++;
                }
                else
                {
                    if(pa!=-1)
                    {
                        int L=min(occ2[p2],pa);
                        int R=max(occ2[p2]+lb,pa+la);
                        q.res=min(q.res,R-L);
                    }
                    pb=occ2[p2];
                    p2++;
                }
            }
            if(p1<sz(occ1))
            {
                if(pb!=-1)
                {
                    int L=min(occ1[p1],pb);
                    int R=max(occ1[p1]+la,pb+lb);
                    q.res=min(q.res,R-L);
                }
                pa=occ1[p1];
                p1++;
            }
            if(p2<sz(occ2))
            {
                if(pa!=-1)
                {
                    int L=min(occ2[p2],pa);
                    int R=max(occ2[p2]+lb,pa+la);
                    q.res=min(q.res,R-L);
                }
                pb=occ2[p2];
                p2++;
            }
            dp[mp(q.ha,q.hb)]=dp[mp(q.hb,q.ha)]=q.res;
        }
    }
    forl(i,Q)
    {
        if(query[i].res!=INF)
            cout<<query[i].res<<endl;
        else
            cout<<-1<<endl;
    }

}   
signed main()
{
    // #ifndef loc
    // freopen("in.txt","r",stdin);
    // freopen("out.txt","w",stdout);
    // #endif
    fastio;
    precalc();
    signed T=1;
    // cin>>T;
    fore(t,T)   
    {
        // CASE(t);
        solve();
    }

#ifdef loc
        cout<<"~~~~~~~~~~~~~~~~~~~~~~~~"<<endl<<"Time elapsed: "<<(double)(clock()-clk)/CLOCKS_PER_SEC<<endl;
#endif
}