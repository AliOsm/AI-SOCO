#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)

using namespace std;
const int N = 11000;
int sa[N], t[N], t2[N], c[N];
bool cmp(int *r, int a, int b, int l) {
	return r[a] == r[b] && r[a + l] == r[b + l];
}
void build_sa(char *s, int n, int m) {
	int p = 1, *x = t, *y = t2;
	rep(i, m)	c[i] = 0;
	rep(i, n)	c[x[i] = s[i]] ++;
	for(int i = 1; i < m; i ++)	c[i] += c[i - 1];
	for(int i = n - 1; i >= 0; i --) sa[--c[x[i]]] = i;
	for(int j = 1; p<n; j<<=1, m=p) {
		p = 0;
		for(int i = n - j; i < n; i ++)	y[p ++] = i;
		rep(i, n)if(sa[i]>=j) y[p ++] = sa[i] - j;
		rep(i, m)	c[i] = 0;
		rep(i, n)	c[x[y[i]]] ++;
		for(int i = 1; i < m; i ++)	c[i] += c[i - 1];
		for(int i = n-1; ~i; i--)	sa[-- c[x[y[i]]]] = y[i];
		swap(x, y);
		p=1, x[sa[0]] = 0;
		for(int i = 1; i < n; i ++)
			x[sa[i]] = cmp(y, sa[i - 1], sa[i], j)?p-1:p++;
	}
}
int rnk[N], H[N];
void getheight(char *s, int n) {
	int i, j, k = 0;
	for(i = 1; i <= n; i ++)	rnk[sa[i]] = i;
	for(i=0;i<n;H[rnk[i++]]=k)
		for(k?k--:0,j=sa[rnk[i]-1];s[i+k]==s[j+k];k++);
}
char s[N];
int belong[N];
char buf[N];
bool check(int n, int k) {
	H[n + 1] = H[1] = 0;
	int cnt[2] = {0, 0};
	for(int i = 1; i <= n + 1; i ++) {
		if(H[i] < k) {
			if(cnt[0] == 1 && cnt[1] == 1)
				return true;
			cnt[0] = cnt[1] = 0;
			cnt[belong[sa[i]]] ++;
		} else {
			cnt[belong[sa[i]]] ++;
		}
	}
	return false;
}


void Go(int n, int m) {
	int len;
	for(len = 1; len <= m; len ++) {
		if(check(n, len))
			break;
	}
	if(len == m + 1)
		puts("-1");
	else
		printf("%d\n", len);
}
int main() {
	int n = 0, m = 1e9;
	rep(i, 2) {
		scanf("%s", buf);
		int len = strlen(buf);
		rep(j, len) {
			belong[n] = i;
			s[n ++] = buf[j];
		}
		s[n ++] = '#';
		m = min(m, len);
	}
	s[-- n] = 0;
	build_sa(s, n + 1, 128);
	getheight(s, n);
	Go(n, m);
	return 0;
}

