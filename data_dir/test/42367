#include<bits/stdc++.h>
using namespace std;
typedef long long LL;

const int MAXX = 1<<18;
LL bit[MAXX+7];

void update(int idx, LL v)
{
    while (idx <= MAXX) {
        bit[idx] += v;
        idx += idx&(-idx);
    }
}

int findFirst(LL T)
{
    int idx = 0;
    for (int i = 17; i >= 0; i--) {
        int g = idx+(1<<i);
        if (bit[g] <= T) {
            T -= bit[g];
            idx = g;
        }
    }

    return idx+1;
}

const int MAXN = 200007;
LL a[MAXN];

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    LL n, T;
    cin >> n >> T;

    LL sm = 0;
    set<int>st;
    for (LL i = 1; i <= n; i++) {
        cin >> a[i];
        sm += a[i];
        st.insert(i);
        update(i, a[i]);
    }

    LL ans = 0;
    LL sz = n;
    while (!st.empty()) {
        LL lo = 0;
        LL hi = T/sm;

        while (lo <= hi) {
            LL mid = (lo+hi)/2;
            if (mid*sm <= T) lo = mid+1;
            else hi = mid-1;
        }

//        cout << hi <<  "x" << endl;
        ans += hi*sz;
        T -= hi*sm;
//        cout << ans << " - "<< T << endl;

//        T -= sm;
//        ans += sz;
        while (1) {
            int idx = findFirst(T);
//            cout << "-> " << idx << endl;
            auto it = st.lower_bound(idx);
            if (it==st.end()) break;
            idx = *it;
            update(idx, -a[idx]);
//            cout << idx << " not taken" << endl;
            sm -= a[idx];
            sz--;
            st.erase(idx);
        }
    }


    cout << ans << endl;


    return 0;
}
