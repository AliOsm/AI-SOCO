#include <stdio.h>
#include <iostream>
#include <vector>
#include <assert.h>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <stack>
#include <string>
#include <sstream>
#include <memory.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
using namespace std;
typedef long long ll;
int main()
{
	int n, k;
	cin >> n >> k;
	vector<vector<int> > g(4, vector<int>(n, -1));
	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < n; ++j) {
			int x;
			cin >> x;
			if (x)
				g[i][j] = x - 1;
		}
	}
	vector<vector<int> > res;
	int done = 0;
	while (res.size() <= 20000) {
		bool nomove = true;
		for (int i = 1; i <= 2; ++i)
			for (int j = 0; j < n; ++j) {
				int r = i == 1 ? 0 : 3;
				if (g[i][j] != -1 && g[i][j] == g[r][j]) {
					res.push_back({ g[i][j],r,j });
					g[i][j] = -1;
					++done;
					nomove = false;
				}
			}
		if (done == k)
			break;
		bool firstMoved = false;
		for (int i = 0; i + 1 < n; ++i)
			if (g[1][i] == -1 && g[1][i + 1] != -1) {
				if (i == 0)
					firstMoved = true;
				swap(g[1][i], g[1][i + 1]);
				res.push_back({ g[1][i],1,i });
				nomove = false;
			}
		if (g[1][n - 1] == -1 && g[2][n - 1] != -1) {
			swap(g[1][n - 1], g[2][n - 1]);
			res.push_back({ g[1][n - 1],1,n - 1 });
			nomove = false;
		}
		for (int i = n - 1; i > 0; --i) {
			if (g[2][i] == -1 && g[2][i - 1] != -1) {
				swap(g[2][i], g[2][i - 1]);
				res.push_back({ g[2][i],2,i });
				nomove = false;
			}
		}
		if (!firstMoved) {
			if (g[1][0] != -1 && g[2][0] == -1) {
				swap(g[1][0], g[2][0]);
				res.push_back({ g[2][0],2,0 });
				nomove = false;
			}
		}
		if (nomove) {
			res.resize(20001);
			break;
		}
	}
	if (res.size() > 20000)
		puts("-1");
	else {
		printf("%d\n", res.size());
		for (auto x : res)
			printf("%d %d %d\n", x[0] + 1, x[1] + 1, x[2] + 1);
	}
	return 0;
}