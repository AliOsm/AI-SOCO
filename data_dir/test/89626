#include<bits/stdc++.h>
using namespace std;
typedef complex<double> Point;
#define EPS 1e-9
#define OO 1e9
#define X real()
#define Y imag()
#define vec(a,b) 	((b) - (a))
#define polar(r,t) 	((r) * exp(Point(0, (t))))
#define angle(v) 	(atan2((v).Y, (v).X))
#define length(v) 	((double)hypot((v).Y, (v).X))
#define lengthSqr(v) 	(dot(v, v))
#define dot(a,b) 	((conj(a) * (b)).real())
#define cross(a,b) 	((conj(a) * (b)).imag())
#define rotate(v,t) 	(polar(v, t))
#define rotateabout(v,t,a)  (rotate(vec(a, v), t) + (a))
#define reflect(p,m) 	((conj((p) / (m))) * (m))
#define normalize(p) 	((p) / length(p))
#define same(a,b) 	(lengthSqr(vec(a, b)) < EPS)
#define mid(a,b)	(((a) + (b)) / point(2, 0))
#define perp(a) 	(point(-(a).Y, (a).X))
#define colliner 	pointOnLine
#define all(v) v.begin(),v.end()
#define sz(v) (int)v.size()

pair<long double, int> arr[100005];

const long double PI = acos(-1);

int main() {
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);

	int n;
	cin >> n;

	for (int i = 0; i < n; ++i) {
		double x, y;
		cin >> x >> y;

		arr[i] = {fmod((angle(Point(x,y))+2*PI),(2*PI)),i+1};
	}

	sort(arr, arr + n);

	int f = n - 1;
	long double best = arr[0].first + 2 * PI - arr[n - 1].first;

	for (int i = 0; i + 1 < n; ++i) {
		long double angle = arr[i + 1].first - arr[i].first;
		angle = min(angle, 2 * PI- angle);
		if (angle < best)
		  best = angle, f = i;
	}
//	cout << best << endl;

	cout << arr[f].second << ' ' << arr[(f + 1) % n].second;

	return 0;
}
