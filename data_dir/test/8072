#include <bits/stdc++.h>
using namespace std;
const int N = 2e5 + 10;
int w, h, n, y_ans[N], x_ans[N];
long long all_ans[N];
vector<pair<int, int>> y_type, x_type;
set<int> y_pos, x_pos;
int main(){
	cin>>w>>h>>n;
	for (int i=1; i<=n; i++){
		char type;
		cin>>type;
		int pos;
		cin>>pos;
		if (type == 'H'){
			y_type.push_back({pos, i});
			y_pos.insert(pos);
		}
		else{
			x_type.push_back({pos, i});
			x_pos.insert(pos);
		}
	}
	y_pos.insert(0);
	y_pos.insert(h);
	x_pos.insert(0);
	x_pos.insert(w);
	int mx = 0, prev = 0;
	for (auto it: y_pos){
		int cur = it;
		mx = max(mx, cur - prev);
		prev = cur;
	}
	int y_mx = mx;
	mx = 0, prev = 0;
	for (auto it: x_pos){
		int cur = it;
		mx = max(mx, cur - prev);
		prev = cur;
	}
	int x_mx = mx;
	for (int i=y_type.size()-1; i>=0; i--){
		int pos = y_type[i].first;
		int id = y_type[i].second;
		y_ans[id] = y_mx;
		set<int>::iterator it_left = y_pos.lower_bound(pos);
		it_left--;
		int left = *it_left;
		set<int>::iterator it_right = y_pos.upper_bound(pos);
		int right = *it_right;
		y_pos.erase(pos);
		y_mx = max(y_mx, right - left);
	}
	for (int i=x_type.size()-1; i>=0; i--){
		int pos = x_type[i].first;
		int id = x_type[i].second;
		x_ans[id] = x_mx;
		set<int>::iterator it_left = x_pos.lower_bound(pos);
		it_left--;
		int left = *it_left;
		set<int>::iterator it_right = x_pos.upper_bound(pos);
		int right = *it_right;
		x_pos.erase(pos);
		x_mx = max(x_mx, right - left);
	}
	if (y_ans[1] == 0){
		y_ans[1] = h;
	}
	if (x_ans[1] == 0){
		x_ans[1] = w;
	}
	for (int i=1; i<=n; i++){
		if (y_ans[i+1] == 0){
			y_ans[i+1] = y_ans[i];
		}
		if (x_ans[i+1] == 0){
			x_ans[i+1] = x_ans[i];
		}
	}
	for (int i=0; i<y_type.size(); i++){
		int id = y_type[i].second;
		all_ans[id] = 1LL * y_ans[id] * x_ans[id];
	}
	for (int i=0; i<x_type.size(); i++){
		int id = x_type[i].second;
		all_ans[id] = 1LL * y_ans[id] * x_ans[id];
	}
	for (int i=1; i<=n; i++){
		cout<<all_ans[i]<<'\n';
	}
}