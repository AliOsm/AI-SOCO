#include <bits/stdc++.h>

using namespace std;

#define x first
#define y second
#define mp make_pair
#define pb push_back
#define sqr(a) ((a) * (a))
#define sz(a) int(a.size())
#define all(a) a.begin(), a.end()
#define forn(i, n) for(int i = 0; i < int(n); i++) 
#define fore(i, l, r) for(int i = int(l); i < int(r); i++)

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template <class A, class B> ostream& operator << (ostream& out, const pair<A, B> &a) {
	return out << "(" << a.x << ", " << a.y << ")";
}

template <class A> ostream& operator << (ostream& out, const vector<A> &v) {
	out << "[";
	forn(i, sz(v)) {
		if(i) out << ", ";
		out << v[i];
	}
	return out << "]";
}

mt19937 rnd(time(NULL));

const int INF = int(1e9);
const li INF64 = li(1e18);
const int MOD = INF + 7;
const ld EPS = 1e-9;
const ld PI = acos(-1.0);

const int N = 54;

int n, m;
string s[N];

bool read () {
	if (scanf("%d%d", &n, &m) != 2)
		return false;
	//s[0] = s[n + 1] = string(m + 2, 'W');
	static char buf[N];
	forn(i, n){
		scanf("%s", buf);
		//s[i] = string(1, 'W') + string(buf) + string(1, 'W');
		s[i] = buf;
	}
	//n += 2;
	//m += 2;
	return true;
}

int clr[N][N];
char rclr[N * N];
vector<int> g[N * N];
int k;

bool in(int x, int y){
	return (0 <= x && x < n && 0 <= y && y < m);
}

int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

void dfs(int x, int y){
	clr[x][y] = k;
	forn(i, 4){
		int nx = x + dx[i];
		int ny = y + dy[i];
		if (in(nx, ny) && clr[nx][ny] == -1 && s[x][y] == s[nx][ny])
			dfs(nx, ny);
	}
}

int bfs(int st){
	queue<int> q;
	vector<int> d(k, INF);
	d[st] = 0;
	q.push(st);
	int res = 0;
	while (!q.empty()){
		int v = q.front();
		q.pop();
		if (rclr[v] == 'B')
			res = max(res, d[v]);
		for (auto u : g[v]) if (d[u] > d[v] + 1){
			d[u] = d[v] + 1;
			q.push(u);
		}
	}
	return res;
}

void solve() {
	forn(i, N * N) g[i].clear();
	memset(clr, -1, sizeof(clr));
	
	k = 0;
	forn(i, n) forn(j, m) if (clr[i][j] == -1){
		dfs(i, j);
		rclr[k] = s[i][j];
		++k;
	}
	
	forn(x, n) forn(y, m) forn(i, 4){
		int nx = x + dx[i];
		int ny = y + dy[i];
		if (in(nx, ny) && clr[nx][ny] != clr[x][y]){
			g[clr[x][y]].pb(clr[nx][ny]);
			g[clr[nx][ny]].pb(clr[x][y]);
		}
	}
	
	forn(i, n){
		sort(all(g[i]));
		g[i].resize(unique(all(g[i])) - g[i].begin());
	}
	
	/*forn(i, n){
		forn(j, m)
			cerr << clr[i][j] << " ";
		cerr << endl;
	}
	
	forn(v, k) for (auto u : g[v]) if (v < u)
		cerr << v << " " << u << endl;*/
	
	int ans = INF;
	forn(i, k)
		ans = min(ans, bfs(i));
	if (k == 1 && rclr[0] == 'W')
		puts("0");
	else
		printf("%d\n", ans + 1);
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
	
	int tt = clock();
	
#endif
	
	cerr.precision(15);
	cout.precision(15);
	cerr << fixed;
	cout << fixed;

#ifdef _DEBUG
	while(read()) {	
#else
	if (read()){
#endif
		solve();
		
#ifdef _DEBUG
	cerr << "TIME = " << clock() - tt << endl;
	tt = clock();
#endif

	}
}