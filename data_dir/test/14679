#include <bits/stdc++.h>
using namespace std;
using LL = long long;
using ULL = unsigned long long;
using VI = vector<int>;
using VL = vector<LL>;
using PII = pair<int, int>;
using PLL = pair<LL, LL>;

#define SZ(a) (int)a.size()
#define ALL(a) a.begin(), a.end()
#define MP make_pair
#define PB push_back
#define EB emplace_back
#define f first
#define s second
#define FOR(i, a, b) for (int i = (a); i<(b); ++i)
#define RFOR(i, b, a) for (int i = (b)-1; i>=(a); --i)
#define FILL(a, b) memset(a, b, sizeof(a))

void dout() { cerr << endl; }

template <typename Head, typename... Tail>
void dout(Head H, Tail... T) {
    cerr << H << ' ';
    dout(T...);
}

const long double PI = acos(-1.0);

void solve()
{
	int n;
	cin >> n;
	n *= 2;
	long double r = cos(PI / n) / (2 * sin(PI / n));
	long double len = sqrt(r * r + 0.5 * 0.5);
	cout << fixed << setprecision(9) << 2 * len << "\n";
}

const int LOG = 21;

const int MAXN = 1 << LOG;

int t[MAXN];

void upd(int pos, int val)
{
	for (int i = pos; i < MAXN; i |= i + 1)
	{
		t[i] += val;
	}
}

int get(int pos)
{
	int sum = 0;
	for (int i = pos; i >= 0; i = (i & (i + 1)) - 1)
	{
		sum += t[i];
	}
	return sum;
}

int get(int l, int r)
{
	return get(r) - get(l - 1);
}

int kth(int k)// first sum[pos] > x
{
    int pos = (1 << LOG) - 1;
    for (int i = LOG - 1; i >= 0; --i)
    {
        pos ^= 1 << i;
        if (t[pos] <= k)
        {
            k -= t[pos];
            pos ^= 1 << i;
        }
    }
    return pos;
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int n, q;
    cin >> n >> q;

	int a;
    for (int i = 0; i < n; ++i)
    {
    	cin >> a;
    	upd(a, 1);
    }
    int k;
    for (int i = 0; i < q; ++i)
    {
    	cin >> k;
    	if (k < 0)
    	{
    		k = -k;
    		int pos = kth(k - 1);
    		upd(pos, -1);
    	}
    	else
    	{
    		upd(k, 1);
    	}
    }
    if (get(0, MAXN - 1) == 0 || kth(0) > n)
    {
    	cout << 0 << "\n";
    	return 0;
    }
    cout << kth(0) << "\n";
    
	return 0;
}