
#include<bits/stdc++.h>
#define pb push_back
#define ff first
#define ss second
#define mp make_pair
#define mod 1000000007
#define deb(x) cout<<#x<<" : "<<x<<endl;
#define deb2(x,y) cout<<#x<<" : "<<x<<"\t"<<#y<<" : "<<y<<endl;
#define deb3(x,y,z) cout<<#x<<" : "<<x<<"\t"<<#y<<" : "<<y<<"\t"<<#z<<" : "<<z<<endl;
#define inf 1000000000000000 

#define FIO ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define endl '\n'
typedef long long ll;

 
using namespace std;
 
 
long long modulo(long long base,long long exponent,long long modulus);
long long choose(ll n,ll k);
ll inverse(ll a,ll m);
void build();
void fileio();
ll ncr(ll n,ll r);
 
const int nax=1e6+10;
const int LG=log2(nax)+1;
vector<ll> fact(nax);
 

ll dp[2][5005];
ll prefix[2][5005];
 
int32_t main() {
 
    FIO
    //fileio();
    //build();

    ll n,a,b,k;
    cin>>n>>a>>b>>k;

    dp[0][a]=1;

	for(int j=1;j<=k;j++)
	{
		for(int i=1;i<=n;i++)
		{
			dp[j%2][i]=0;
		}

		for(int i=1;i<=n;i++)
		{
			ll dist = abs(i-b);
			ll l = max(1LL,i-dist+1);
			ll r = min(n,i+dist-1);

			// deb3(i,l,r);
			dp[j%2][l]+=dp[(j+1)%2][i];
			dp[j%2][l]%=mod;
			dp[j%2][i]-=dp[(j+1)%2][i];
			dp[j%2][i]+=mod;
			dp[j%2][i]%=mod;


			dp[j%2][i+1]+=dp[(j+1)%2][i];
			dp[j%2][i+1]%=mod;

			dp[j%2][r+1]-=dp[(j+1)%2][i];
			dp[j%2][r+1]+=mod;
			dp[j%2][r+1]%=mod;
		}
		for(int i=1;i<=n;i++)
		{
			dp[j%2][i]+=dp[j%2][i-1];
			dp[j%2][i]%=mod;
		}
	}

	ll ans=0;
	for(int i=1;i<=n;i++)
	{
		ans+=dp[k%2][i];
		ans%=mod;
	}
	cout<<ans<<endl;
    
 
    return 0;
}
 
ll ncr(ll n,ll r)
{
    if(r>n || r<0 || n<0)
        return 0;
    ll ans=fact[n];
    ll temp=(fact[n-r]*fact[r])%mod;
    ans=(ans*inverse(temp,mod))%mod;
    return ans;
}

void fileio()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
} 
void build()
{
    fact[0]=1;
    for(ll i=1;i<nax;i++)
        fact[i]=(fact[i-1]*i)%mod;   
}
 
long long modulo(long long base,long long exponent,long long modulus)
{
    if(modulus ==1)
        return 0;
 
    long long result=1;
    base=base % modulus;
    while(exponent>0)
    {
        if(exponent%2==1)
        {
            result=(result*base) % modulus;
 
        }
        exponent=exponent>>1;
        base = (base*base) % modulus;
    }
    return result;
}
 
long long choose(ll n,ll k)
{
    if(k==0)  return 1;
    return (n* choose(n-1,k-1))/k;
}
 
void EE(ll a,ll b,ll &co1,ll &co2)
{
    if(a%b==0)
    {
        co1=0;
        co2=1;
        return;
    }
    EE(b,a%b,co1,co2);
    ll temp=co1;
    co1=co2;
    co2=temp-co2*(a/b);
}
 
ll inverse(ll a,ll m)
{
    ll x,y;
    EE(a,m,x,y);
    if(x<0) x+=m;
    return x;
}