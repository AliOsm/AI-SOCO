#include <bits/stdc++.h>
#define mkp make_pair
#define mt make_tuple
#define ff first
#define ss second
using namespace std;
typedef long long int ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef tuple<int, int, int> tt;

int ans1 = 0;
int cur1 = 0;

int ans2 = 0;
vector<int> cur2(2);

void upd(int a, int b, int c, int i, int j) {
    if (min(min(a, b), c) > ans2) {
        ans2 = min(min(a, b), c);
        cur2[0] = i;
        cur2[1] = j;
    }
}

int main() {
    int n;
    scanf("%d", &n);
    map<pii, int> mp;
    map<pii, int> ptr;
    int ans1 = 0;
    int cur1 = 0;

    vector<int> vec(3);
    for (int i = 0; i < n; i++) {
        int a, b, c;
        for (int z = 0; z < 3; z++)
            scanf("%d%", &vec[z]);
        sort(vec.begin(), vec.end());
        a = vec[0];
        b = vec[1];
        c = vec[2];

        if (a > ans1) {
            ans1 = a;
            cur1 = i;
        }

        pii ab = mkp(a, b), bc = mkp(b, c), ac = mkp(a, c);
        if (mp.count(ab))
            upd(a, b, c + mp[ab], i, ptr[ab]);
        if (mp.count(bc))
            upd(b, c, a + mp[bc], i, ptr[bc]);
        if (mp.count(ac))
            upd(a, c, b + mp[ac], i, ptr[ac]);

        if (!mp.count(ab)) {
            mp[ab] = c;
            ptr[ab] = i;
        } else if (c > mp[ab]) {
            mp[ab] = c;
            ptr[ab] = i;
        }

        if (!mp.count(bc)) {
            mp[bc] = a;
            ptr[bc] = i;
        } else if (a > mp[bc]) {
            mp[bc] = a;
            ptr[bc] = i;
        }

        if (!mp.count(ac)) {
            mp[ac] = b;
            ptr[ac] = i;
        } else if (b > mp[ac]) {
            mp[ac] = b;
            ptr[ac] = i;
        }
    }

    if (ans1 > ans2) {
        cout << 1 << endl << cur1 + 1;
    } else {
        cout << 2 << endl << cur2[0] + 1 << " " << cur2[1] + 1;
    }
}
