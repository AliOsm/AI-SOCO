#include <iostream>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
#include <map>
#include <stdio.h>
#include <string.h>
#include <memory.h>

using namespace std;

int n, k, size;

bool fun(int point, vector<pair<pair<int, int>, bool> > arr) {
    sort(arr.rbegin(), arr.rend());
    int tie = arr[k - 1].first.first, index = k - 1;
    if (point > tie)
        return true;
    if (point == tie) {
        int count = 0;
        while (index < size && arr[index].first.first == tie)
            count++, index++;
        for (int j = 0; j < size; j++) {
            if (arr[j].first.first == tie && arr[j].second)
                count--;
            if (count == 0)
                return true;
        }
    }
    return false;
}

int DP(int i, int point, vector<pair<pair<int, int>, bool> > arr) {
    if (i == size) {
        if (fun(point, arr))
            return 0;
        else
            return 1e9;
    }
    vector<pair<pair<int, int>, bool> > temp = arr;
    int res = 1e9;
    //Win on Player i
    temp[i].second = true;
    res = min(res, temp[i].first.second + DP(i + 1, point + 1, temp));
    //Lose to Player i
    temp[i].second = false, temp[i].first.first++;
    res = min(res, DP(i + 1, point, temp));
    return res;
}

int main() {
//#ifndef ONLINE_JUDGE
//freopen("test.in", "rt", stdin);
//freopen( "test.out" , "wt" , stdout );
//#endif
    vector<pair<pair<int, int>, bool> > arr;
    cin >> n >> k;
    int x, y;
    for (int i = 0; i < n; i++) {
        cin >> x >> y;
        arr.push_back(make_pair(make_pair(x, y), false));
    }
    if (k == n + 1)
        cout << 0 << endl;
    else {
        size = int(arr.size());
        int res = DP(0, 0, arr);
        if (res == 1e9)
            res = -1;
        cout << res << endl;
    }
    return 0;
}