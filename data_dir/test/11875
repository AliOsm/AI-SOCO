#include <iostream>
#include <vector>
#include <cstdio>
#include <algorithm>
#include<string>
#include<map>
using namespace std;

typedef long long ll;
vector<vector<int>>t, x, q;
ll ww[1000100];
bool used[1000010];
ll sol[1000100];
void dfs(int v, int f)
{
	used[v] = 1;
	x[f].push_back(ww[v]);
	q[f].push_back(v);
	for (int i = 0; i < t[v].size(); i++)
	{
		if (!used[t[v][i]])
		{
			dfs(t[v][i], f);
		}
	}
}
int main() {

	ll n, k;
	cin >> n >> k;

	t.resize(n + 1);
	x.resize(n + 1);
	q.resize(n + 1);
	for (int i = 1; i <= n; i++)
	{
		cin >> ww[i];
	}
	int a, b;
	for (int i = 0; i < k; i++)
	{
		cin >> a >> b;
		t[a].push_back(b);
		t[b].push_back(a);
	}
	for (int i = 1; i <= n; i++)
	{

		if (!used[i])
		{
			dfs(i, i);
			sort(x[i].rbegin(), x[i].rend());
		}
		sort(q[i].begin(), q[i].end());
	}
	for (int i = 1; i <= n; i++)
	{
		if (x[i].size() != 0)
		{
			//sol[i] = x[i][0];
			//cout << x[i].size() << "   " << q[i].size() << endl;
			for (int j = 0; j < q[i].size(); j++)
			{
				//cout << i << "   " << q[i][j] << "   " << q[i][j] << endl;
				sol[q[i][j]] = x[i][j];
			}
		}
	}
	for (int i = 1; i <= n; i++)
	{
		if (sol[i] == 0)
		{
			sol[i] = ww[i];
		}
		cout << sol[i] << " ";
	}
	//system("pause");
}