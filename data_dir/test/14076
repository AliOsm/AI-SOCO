#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef vector<pii> vii;
typedef vector<bool> vb;
typedef vector<string> vs;
const int di[] = { -1, 0, 1, 0, -1, 1, 1, -1 };
const int dj[] = { 0, 1, 0, -1, -1, 1, -1, 1 };
const ll MOD = 1e9 + 7;
const ll INF = 1e9;
const long double EPS = 1e-10;
#define all(n) n.begin(),n.end()

vi prefixTable(const string &needle) {
	int m = needle.size();
	vi pi(m + 1);
	pi[0] = -1;
	for (int i = 0; i < m; ++i) {
		pi[i + 1] = pi[i];
		while (pi[i + 1] > -1 && needle[pi[i + 1]] != needle[i])
			pi[i + 1] = pi[pi[i + 1]];

		pi[i + 1]++;
	}
	return pi;
}

string s, sr;

bool found(string& w) {
	if (w.length() == 1) return false;
	string ts = w + "$" + s;
	vi pi = prefixTable(ts);
	vi pidx(w.length() + 1, INF);

	for (int i = w.length() + 2; i <= ts.length(); i++) {
		int sz = pi[i];
		pidx[sz] = min(pidx[sz], i - ((int)w.length() + 1));
	}

	//if (pidx[w.length()] != INF) return true;

	reverse(all(w));
	ts = w + "$" + sr;
	pi = prefixTable(ts);

	for (int i = w.length() + 2; i <= ts.length(); i++) {
		int ci = sr.length() + 1 - (i - ((int)w.length() + 1));
		int sz = pi[i];
		if (pidx[w.length() - sz] < ci)
			return true;
	}
	return false;
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> s;
	sr.resize(s.length());
	reverse_copy(all(s), sr.begin());

	int n; cin >> n;
	vs w(n);

	int r = 0;
	for (int i = 0; i < n; i++) {
		cin >> w[i];
		r += found(w[i]);
	}

	cout << r << endl;
	cin.ignore(), cin.get();
}
