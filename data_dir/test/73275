#pragma GCC optimize ("Ofast")
#include "bits/stdc++.h"
#include "ext/pb_ds/assoc_container.hpp"
#include "ext/pb_ds/tree_policy.hpp"
using namespace __gnu_pbds;
using namespace std;
typedef long long int ll;
#define int long long int
#define pb push_back
#define fi first
#define se second
#define deb cerr << "Line no." << __LINE__
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define all(x) x.begin(), x.end()
#define IO ios :: sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define pii pair<int,int>
#define sz(x) (int)x.size()
const int mod = 1e9 + 7;
const int mod2 = 1e9 + 6;
const int mod1 = 998244353;
typedef double f80;
#ifndef LOCAL
#define endl '\n'
#endif

template<typename T>
using ordered_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){
    uniform_int_distribution<int> uid(l, r);
    return uid(rng);
}
ll pwr(int a,int b,int mod){
    ll ans = 1;
    while(b){
        if(b & 1) ans = (ans * a) % mod;
        a = ((ll)a * a) % mod;
        b >>= 1;
    }
    return ans;
}
const int N = 1e5 + 5;
const int M = 205;
int dp[N][M];
multiset<pii> ss;
int s[N], t[N], d[N], w[N];
vector<pii> gg[N];
void solve(){
    int n, m, k;
    cin >> n >> m >> k;
    fill(&dp[0][0], &dp[0][0] + N*M, 1e18);
    dp[0][0] = 0;
    fr(i, 1, k){
        cin >> s[i] >> t[i] >> d[i] >> w[i];
        gg[s[i]].pb({w[i], d[i]});
        gg[t[i] + 1].pb({-w[i], d[i]});
    }
    fr(i, 0, n - 1){
        for(pii x : gg[i + 1]){
            if(x.fi < 0)
                ss.erase(ss.find({-x.fi, x.se}));
            else
                ss.insert(x);
        }
        pii y = {-1, -1};
        if(!ss.empty()) y = *prev(ss.end());
        fr(j, 0, m){
            dp[i + 1][j + 1] = min(dp[i + 1][j + 1], dp[i][j]);
            if(y.fi != -1)
                dp[y.se][j] = min(dp[y.se][j], dp[i][j] + y.fi);
            else
                dp[i + 1][j] = min(dp[i + 1][j], dp[i][j]);
        }
    }
    int ans = 1e18;
    fr(i, 0, m) ans = min(ans, dp[n][i]);
    cout << ans;
}
signed main(){
    IO;
    #ifdef LOCAL
        freopen("inp.txt","r", stdin);
        // freopen("out.txt", "w", stdout);
    #endif
    clock_t clk = clock();
    int t = 1;
    // cin >> t;
    fr(tt, 1, t){
        solve();
    }
    cerr << endl << setprecision(10) << fixed << (double)(clock() - clk) / CLOCKS_PER_SEC;
    return 0;
}