#include <bits/stdc++.h>
using namespace std;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl




typedef long long ll;
const ll mod = 1e9+7;
const int maxn = 1e6 + 5;


int n, k;
map<string,vector<ll>> mp;
int main() {
    ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);
    cin>>n>>k;
    for (int i=0; i<n; i++) {
	string s; ll c; cin>>s>>c;
	mp[s].push_back(c);
    }



    ll ans = 0;
    ll mx = 0;
    for (auto& p: mp) {
	string s = p.first;
	string t = s; reverse(t.begin(), t.end());
	if (s<t) continue;


	
	//pal
	if (s==t) {
	    sort(mp[s].begin(), mp[s].end(), greater<ll>());
	    int i;
	    for (i=0; i+1<(int)mp[s].size(); i+=2) {
		if (mp[s][i]+mp[s][i+1]>=0) {
		    ans += mp[s][i]+mp[s][i+1];
		    mx=max(mx, -mp[s][i+1]);//last neg pair not worth
		} else {
		    break;
		}
	    }
	    if (i<(int)mp[s].size()) {
		mx=max(mx, mp[s][i]);//take odd pal
	    }
	} else {

	    sort(mp[s].begin(), mp[s].end(), greater<ll>());
	    sort(mp[t].begin(), mp[t].end(), greater<ll>());
	    for (int i=0; i<(int)min(mp[s].size(), mp[t].size()); i++) {
		if (mp[s][i]+mp[t][i]>=0) {
		    ans += mp[s][i]+mp[t][i];
		}
	    }
	}
	
    }

    //in the end, either we should get rid of the shitty negative pal pair, or we should
    //add one central pal to create the best answer possible
    
    ans += mx;
    cout<<ans<<endl;  

    return 0;
}
