//              +-- -- --++-- +-In the name of ALLAH-+ --++-- -- --+              \\

#include <bits/stdc++.h>

using namespace std ;

int const N = 5000 + 10 , inf = 1e9 + 10 ;
int n , dp[2][N][N] , sz[N] ;
vector <int> g[N] ;

inline void smin (int &a , int b) {
	a = min(a , b) ;
}

void pre () {
	for (int c = 0 ; c < 2 ; c ++) {
		for (int i = 0 ; i < N ; i ++) {
			for (int j = 0 ; j < N ; j ++) {
				dp[c][i][j] = inf ;
			}
		}
	}
}

int Tmp[2][N] , Base[2][N] ;
void dfs (int v , int par = -1) {
//	int big = -1 ;
	
	if (g[v].size() == 1) {
		sz[v] = 1 ;

		dp[0][v][1] = 0 ;
		dp[1][v][0] = 0 ;

		return ;
	}

	for (int u : g[v]) {
		if (u == par) {
			continue ;
		}

		dfs(u , v) ;
		sz[v] += sz[u] ;
	
//		if (big == -1 || sz[u] > sz[big]) {
//			big = u ;
//		}
	}

	for (int c = 0 ; c < 2 ; c ++) {
		for (int i = 0 ; i <= sz[v] ; i ++) {
			Base[c][i] = Tmp[c][i] = inf ;
		}
	}

	int S = 0 ; //sz[big] ;

//	for (int c = 0 ; c < 2 ; c ++) {
//		for (int i = 0 ; i <= S ; i ++) {
//			for (int nc = 0 ; nc < 2 ; nc ++) {
//				smin(Base[c][i] , dp[nc][big][i] + (c != nc)) ;
//			}
//		}
//	}

	Base[0][0] = Base[1][0] = 0 ;

	for (int u : g[v]) {
		if (u == par/* || u == big*/) {
			continue ;
		}

		S += sz[u] ;

		for (int c = 0 ; c < 2 ; c ++) {
			for (int i = 0 ; i <= S ; i ++) {
				for (int nc = 0 ; nc < 2 ; nc ++) {
					for (int j = 0 ; j <= sz[u] && j <= i ; j ++) {
						smin(Tmp[c][i] , Base[c][i - j] + dp[nc][u][j] + (c != nc)) ;
					}
				}
			}
		}

		for (int c = 0 ; c < 2 ; c ++) {
			for (int i = 0 ; i <= S ; i ++) {
				Base[c][i] = Tmp[c][i] ;
				Tmp[c][i] = inf ;
			}
		}
	}
	
	for (int c = 0 ; c < 2 ; c ++) {
		for (int i = 0 ; i <= S ; i ++) {
			dp[c][v][i] = Base[c][i] ;
		}
	}
}

int main(){
	ios::sync_with_stdio(false) , cin.tie(0) , cout.tie(0) ;

	pre() ;

	cin >> n ;

	for (int i = 0 ; i < n - 1 ; i ++) {
		int u , v ;

		cin >> u >> v ;
		u -- , v -- ;

		g[u].push_back(v) ;
		g[v].push_back(u) ;
	}

	int root = -1 ;

	for (int i = 0 ; i < n ; i ++) {
		if (g[i].size() > 1) {
			root = i ;
			break ;
		}
	}
	
	dfs(root) ;

	cout << dp[0][root][sz[root] / 2] << '\n' ;
}
