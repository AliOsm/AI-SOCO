#include <bits/stdc++.h>

using namespace std;

#define SZ(x) ((int)(x).size())
#define PB(x) push_back(x)
#define MEMSET(x,v) memset(x,v,sizeof(x))
#define REP(i,n) for(int (i)=0;(i)<(n);++(i))
#define x first
#define y second

typedef long long LL;
typedef pair<int, int> P2;
template<class A, class B> inline bool mina(A &x, B y) {return (x > y)?(x=y,1):0;}
template<class A, class B> inline bool maxa(A &x, B y) {return (x < y)?(x=y,1):0;}

// -- Adapted from Stanford ACM team notebook --
double INF = 1e100;
double EPS = 1e-9;

typedef double T;
struct Point {
    T x, y;
    Point() {}
    Point(T x, T y) : x(x), y(y) {}
    Point(const Point &p) : x(p.x), y(p.y) {}
    Point operator + (const Point &p) const { return Point(x+p.x, y+p.y); }
    Point operator - (const Point &p) const { return Point(x-p.x, y-p.y); }
    Point operator * (T c)            const { return Point(x*c,   y*c  ); }
    Point operator / (T c)            const { return Point(x/c,   y/c  ); }
    bool  operator < (const Point &p) const { return make_pair(y,x) < make_pair(p.y,p.x); }
    bool  operator ==(const Point &p) const { return make_pair(y,x) == make_pair(p.y,p.x); }
};

T cross(Point p, Point q) { return p.x*q.y-p.y*q.x; }
T area2(Point a, Point b, Point c) { return cross(a,b) + cross(b,c) + cross(c,a); }
T dot(Point p, Point q) { return p.x*q.x+p.y*q.y; }
T dist2(Point p, Point q) { return dot(p-q,p-q); }

// compute distance from c to line between a and b
double DistancePointLine(Point a, Point b, Point c) {
    Point ac = c - a;
    Point ab = b - a;
    return abs(cross(ac, ab) / sqrt(dot(ab, ab)));
}

const int MAXN = 1005;

int N;
Point in[MAXN];

double solve(Point a, Point b, Point c) {
    return DistancePointLine(b, c, a) / 2.0;
}

int main() {
    cin >> N;
    REP(i, N) {
        cin >> in[i].x >> in[i].y;
    }
    double ans = 1e10;
    REP(i, N) {
        Point a = in[i];
        Point b = in[(i + 1) % N];
        Point c = in[(i + 2) % N];
        mina(ans, solve(a, b, c));
        mina(ans, solve(b, a, c));
        mina(ans, solve(c, a, b));
    }
    printf("%.9lf\n", ans);
    return 0;
}
