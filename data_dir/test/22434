#include <bits/stdc++.h>
#define LL long long
using namespace std;

int getsum(int a, int b) {
    if (b < a)  return (getsum(a, 10) + getsum(0, b))%11;
    return ((b-a+1)*(b+a)/2)%11;
}

const int N = 1e5+7, K = 17;
const int start = 23, bad = 22;

int id(int par, int rem) {
    return par*11 + rem ;
}

int go(int u, int ch) {
    assert(ch < 10 && ch >= 0);
    if (u == bad)   return bad;
    if (u == start) {
        if (ch == 0)    return bad;
        return id(1, ch);
    }

    int par = u/11;
    int rem = u%11;
    if (ch >= rem)  return bad;

    int val[2] = {9, 10};

    int ans = val[!par];
    int st = (val[par]+1)%11;
    int en = (rem + 10)%11;
    ans = (ans + getsum(st, en) + ch + 1)%11;
    return id(!par, ans);
}

int r[N][K][24];

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    string s;
    cin>>s;

    int n = s.size();
    for (int i=n; i>0; i--) {
        for (int j=0; j<=23; j++)   r[i][0][j] = go(j, s[i-1] - '0');
        int left = n-i+1;
        for (int k=1; k<K; k++) {
            if ((1<<k) > left)      fill(r[i][k], r[i][k]+25, bad);
            else {
                for (int j=0; j<=23; j++)
                    r[i][k][j] = r[i+(1<<(k-1))][k-1][r[i][k-1][j]];
            }
        }
    }

    long long ans = 0;
    for (int i=1; i<=n; i++) {
        int len = 0;
        int state = start;
        int cur = i;

        for (int k=K-1; k>=0; k--)
            if (r[cur][k][state] != bad) {
                state = r[cur][k][state];
                cur += 1<<k;
                len += 1<<k;
                if (cur > n)    break;

            }
        ans += len;
    }
    cout<<ans<<endl;
}
