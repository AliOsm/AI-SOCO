#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define eb emplace_back
#define ll long long
#define pii pair < int, int >
#define fr first
#define sc second
#define mk make_pair
#define sz(s) (int)s.size()
#define all(s) s.begin(), s.end()
#define ok cerr << "ok\n";
#define whatis(x) cerr << #x << " = " << x << endl;

const int N = (int)1e5 + 7;
const int inf = (int)1e9 + 7;

int a[N];
int f[N];
int s[N];
int sz;

main() {
  int n, k, m;
  scanf("%d %d %d", &n, &k, &m);
  for (int i = 1; i <= n; i++) {
    scanf("%d", &a[i]);
  }
  bool fl = 0;
  if (k >= n) {
    for (int i = 2; i <= n; i++) {
      if (a[i] != a[i - 1]) fl = 1;
    }
    if (fl) {
      cout << n * 1LL * m;
    } else {
      cout << n * 1LL * m % k;
    }
    return 0;
  }
  for (int i = 1; i <= n; i++) {
    s[++sz] = a[i];
    if (sz > 1 && s[sz] == s[sz - 1]) {
      f[sz] = f[sz - 1] + 1;
    } else {
      f[sz] = 1;
    }
    if (f[sz] == k) {
      sz -= k;
    }
  }
  int ans = 0;
  int L = 1;
  int R = sz;
  while (s[L] == s[R] && L < R) {
    int l = L;
    int r = R;
    int cnt = 0;
    while (s[L] == s[l] && l < r && cnt < k) l++, cnt++;
    while (s[R] == s[r] && l < r && cnt < k) r--, cnt++;
    if (cnt == k) {
      ans += k;
      L = l;
      R = r;
    } else {
      break;
    }
  }
  fl = 1;
  for (int i = L + 1; i <= R; i++) {
    if (s[i] != s[i - 1]) {
      fl = 0;
    }
  }
  if (fl) {
    cout << (((R - L + 1) * 1LL * m % k == 0) ? 0 : (R - L + 1) * 1LL * m % k + ans);
  } else {
    cout << (R - L + 1) * 1LL * m + ans;
  }
}
