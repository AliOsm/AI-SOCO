#include <iostream>

#include <vector>
#include <set>
#include <map>
#include <string>
#include <algorithm>
#include <cstring>

#include <cassert>

typedef long long llong;

#define SZ(a) int((a).size())

#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)

#define REPD(i,n) for(int i=(n)-1;i>=0;--i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i)

using namespace std;

string solve(const string& S) {
   string layout;
   if (SZ(S) <= 1) {
      REP(k, 26)
         layout += 'a' + k;
      return layout;
   }

   set<char> seen;

   layout += S[0];
   seen.insert(S[0]);

   layout += S[1];
   seen.insert(S[1]);

   int cur_pos = 1;

   FOR(i, 2, SZ(S)-1) {
      char c = S[i];
   // cerr << "i: " << i << "  c:" << c << endl;
      assert( layout[cur_pos] != c );
      if (seen.count(c)) {
         if (cur_pos-1 >= 0 && layout[cur_pos-1] == c) {
            cur_pos--;
         }
         else if (cur_pos+1 < SZ(layout) && layout[cur_pos+1] == c) {
            cur_pos++;
         }
         else
            return "";
      }
      else {
         if (cur_pos == 0) {
            layout.insert(0, 1, c);
            seen.insert(c);
         }
         else if (cur_pos == SZ(layout)-1) {
            layout += c;
            cur_pos++;
            seen.insert(c);
         }
         else
            return "";
      }
   // cerr << "cur_pos: " << cur_pos << "  layout:" << layout << endl;
   }
  
   REP(k, 26) {
      char c = 'a' + k;
      if (seen.count(c) == 0)
         layout += c;
   }
  
   return layout;
}

int main(int argc, char *argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(NULL);

   int TC;
   cin >> TC;
   FOR(tc, 1, TC) {
      string S;
      cin >> S;
      string res = solve(S);
      if (res.empty())
         cout << "NO\n";
      else {
         cout << "YES\n";
         cout << res << '\n';
      }
   }

   return 0;
}
