//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0); }
inline int safe_mul(const int x, const int y) __attribute__ ((warn_unused_result));

inline int getVal(const char c) {
    return 1 << (c - 'a');
}

inline int getMask(const string& s) {
    int res = 0;
    for(char c : s) {
        res |= getVal(c);
    }
    return res;
}

int main()
{
//    freopen("in.txt","r", stdin);
//    freopen("out.txt", "w", stdout);
//    cout << fixed << setprecision(15);
    ios_base::sync_with_stdio(false);

    int n;
    cin >> n;
    vector<pair<int,string> > a;
    for(int i = 0; i < n; ++i) {
        string s,t;
        cin >> s >> t;
        int mask = getMask(t);
        while (!s.empty() && (getVal(s.back()) & mask))
            s.pop_back();
        a.emplace_back(mask, s);
    }

    auto copya = a;
    sort(a.begin(), a.end());
    a.erase(unique(begin(a), end(a)), a.end());
    size_t sz = a.size();
    cout << sz << endl;
    vector<vector<int> > ans(sz);
    for(int i = 0; i < n; ++i) {
        ans[lower_bound(begin(a), end(a), copya[i]) - begin(a)].push_back(i + 1);
    }

    for(const auto& vec : ans) {
        auto vsz = vec.size();
        cout << vsz << ' ';
        for(int i = 0; i < vsz; ++i) {
            cout << vec[i] << " \n"[i == vsz - 1];
        }
    }
}
