// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

int a[10][10];
long double res[10][10], res2[10][10];

PII jump(int i, int j, int len) {
  if (i%2 == 0) {
    if (j >= len)
      return {i, j-len};
    len -= j+1;
    --i;
    if (len == 0)
      return {i, 0};
    return jump(i, 0, len);
  }
  else {
    if (j+len < 10)
      return {i, j+len};
    len -= (10-j);
    --i;
    if (len == 0)
      return {i, 9};
    return jump(i, 9, len);
  }
}

int main() {
  init_ios();
  long double coef = 1./6.;
  for (int i = 0; i < 10; ++i)
    for (int j = 0; j < 10; ++j)
      cin >> a[i][j];
  for (int i = 0; i < 10; ++i) {
    if (i%2 == 0) {
      for (int j = 0; j <= 9; ++j) {
        for (int k = 1; k <= 6; ++k) {
          if (i == 0 && j == 0)
            continue;
          PII wh = jump(i, j, k);
          res[i][j] += coef*(1+res[wh.ST][wh.ND]);  
          if (wh == MP(0, 0)) {
            res[i][j] = 6./k*(res[i][j]+1-(long double)k/6.);
            break;
          }
        }
        res2[i][j] = res[i][j];
        if (a[i][j] != 0)
          res[i][j] = min(res[i][j], res2[i-a[i][j]][j]);
      }
    }
    else {
      for (int j = 9; j >= 0; --j) {
        for (int k = 1; k <= 6; ++k) {
          PII wh = jump(i, j, k);
          res[i][j] += coef*(1+res[wh.ST][wh.ND]);  
        }
        res2[i][j] = res[i][j];
        if (a[i][j] != 0)
          res[i][j] = min(res[i][j], res2[i-a[i][j]][j]);
      }
    }
  }
  cout<<fixed<<setprecision(10)<<res[9][0]<<"\n";
}