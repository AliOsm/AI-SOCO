#include <bits/stdc++.h>
using namespace std;
#define ll unsigned long long
#define f(i, x, n) for(int i = x; i < (int)n; ++i)

int const L = 11;
struct S{
	string l, r;
	int an;
	bitset<1 << L> vis[L + 1];
	void ad(string s, int ln){
		int z = 0;
		f(i, 0, ln)z = z << 1 | (s[i] - '0');
		vis[ln][z] = true;
		f(i, ln, s.size()){
			z = z << 1 | (s[i] - '0');
			z &= (1 << ln) - 1;
			vis[ln][z] = true;
		}
	}
	bool ok(int ln){
		if (ln > L)return false;
		f(i, 0, 1 << ln)if (!vis[ln][i])return false;
		return true;
	}
	S(){}
	S (string s){
		f(i, 1, L + 1)vis[i].reset();
		f(i, 1, min(L, (int)s.size()) + 1)ad(s, i);
		if ((int)s.size() <= L)l = r = s;
		else l = s.substr(0, 11), r = s.substr((int)s.size() - 11, 11);
		an = 0;
		while (ok(an + 1))++an;
	}
	S operator +(S o){
		int pan = max(an, o.an) + 1;
		string ns = r + o.l;
		S s;
		f(i, 1, L + 1)s.vis[i] = vis[i] | o.vis[i];
		f(i, pan, min(L, (int)ns.size()) + 1)s.ad(ns, i);
		
		s.an = pan - 1;
		while (s.ok(s.an + 1))++s.an;
		
		if ((int)l.size() == 11)s.l = l;
		else s.l = ns.substr(0, min(11, (int)ns.size()));
		
		if ((int)o.r.size() == 11)s.r = o.r;
		else s.r = ns.substr(max(0, (int)ns.size() - 11), min(11, (int)ns.size()));
		
		return s;
	}
};

vector<S> x;
char in[101];

int main(){
	int n;
	scanf("%d", &n);
	f(i, 0, n){
		scanf("%s", in);
		x.push_back(S(in));
	}
	int m;
	scanf("%d", &m);
	f(i, 0, m){
		int a, b;
		scanf("%d%d", &a, &b);
		--a;
		--b;
		x.push_back(x[a] + x[b]);
		printf("%d\n", x.back().an);
	}
}