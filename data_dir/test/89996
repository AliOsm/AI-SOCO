/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const ld PI = 3.14159265358979323846;

#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

class CTheBigRace {
public:
    long long lcm, t, w, b, g, res, x;
	void solve(std::istream& in, std::ostream& out) {
	    in>>t>>w>>b;
	    res = -1;
	    x = t; 
        g = __gcd(w, b);
        if(t/b>=w/g){
            lcm=w/g*b;
            res+=t/lcm*min(w,b);
            t%=lcm;
        }
        res+=min(min(w,b),t+1);
        g = __gcd(res, x);
        res/=g;
        x/=g;
        out<<res<<'/'<<x;
	}
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	CTheBigRace solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
