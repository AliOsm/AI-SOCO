#include <bits/stdc++.h>
using namespace std;
#define FILE"substrcmp"
const long long mod=100000000007;
int main()
{
    int n;
    cin>>n;
    int D[n];
    for (int i=0; i<n; i++)
    {
        cin>>D[i];
    }
    vector<pair<int, int> >F;
    int l=0;
    int x=1;
    int ans=0;
    for (int i=1; i<n; i++)
    {
        if (D[i]>D[i-1])
        {
            x++;
        }
        else
        {
            F.push_back({l, l+x-1});
            l=i;
            ans=max(ans, x);
            x=1;
        }
    }
    F.push_back({l, l+x-1});
    ans=max(ans, x);
    for (int i=0; i<F.size(); i++)
    {
        if (F[i].second==F[i].first)
        {
            if (i>0 && i<F.size()-1)
            {
                if (D[F[i-1].second]+1<D[F[i+1].first])
                {
                    ans=max(ans, F[i+1].second-F[i+1].first+F[i-1].second-F[i-1].first+3);
                }
                else
                {
                    ans=max(ans, max(F[i+1].second-F[i+1].first, F[i-1].second-F[i-1].first)+2);
                }
            }
            else if (i==0 && i==F.size()-1)
            {
                cout<<1;
                return 0;
            }
            else if (i==0)
            {
                ans=max(ans, F[i+1].second-F[i+1].first+2);
            }
            else
            {
                ans=max(ans, F[i-1].second-F[i-1].first+2);
            }
        }
        else
        {
            if (F[i].first!=0)
            {
                if (D[F[i].first+1]>D[F[i-1].second]+1)
                {
                    ans=max(ans, F[i].second-F[i].first+F[i-1].second-F[i-1].first+2);
                }
                else
                {
                    ans=max(ans, max(F[i].second-F[i].first, F[i-1].second-F[i-1].first)+2);
                }
            }
            if (F[i].second!=n-1)
            {
                if (D[F[i+1].first]>D[F[i].second-1]+1)
                {
                    ans=max(ans, F[i].second-F[i].first+F[i+1].second-F[i+1].first+2);
                }
                else
                {
                    ans=max(ans, max(F[i].second-F[i].first, F[i+1].second-F[i+1].first)+2);
                }
            }
        }
    }
    cout<<ans;
    return 0;
}