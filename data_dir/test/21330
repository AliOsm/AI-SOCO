#include <iostream>
#include <vector>
#include <complex>
#include <map>
#include <algorithm>
#include <cassert>
#include <functional>
#include <set>
#include <iomanip>
#include <unordered_map>
#include <cstring>
#include <bitset>
#include <numeric>
#include <queue>
#include <stack>
#include <unordered_set>

using namespace std;

typedef unsigned long long ULong;
typedef long long Long;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<Long> VL;
typedef vector<VI> VVL;
typedef pair<int,int> PII;
typedef pair<int,PII> PIP;

using namespace std;

int read(int &a) { return scanf("%d", &a); }
int read(Long &a) { return scanf("%lld", &a); }
char buff[1000010];
int read(char &a) { int r = scanf("%s", buff); a = buff[0]; return r; }
int read(string &a) { int r = scanf("%s", buff); a = buff; return r; }
int read(double &a) { return scanf("%lf", &a); }
int read(int &a, int &b) { return scanf("%d%d", &a, &b); }
int read(int &a, int &b, int &c) { return scanf("%d%d%d", &a, &b, &c); }

double getTime() {
    return 1.0 * clock() / CLOCKS_PER_SEC;
}

#define bitId(x) (31-__builtin_clz(x))
#define lowestBit(x) ((x) & -(x))
#define forEachBit(i, x) \
    for (int cx = (x), i = bitId((x) & -(x)) \
            ; cx > 0 && (i = bitId(cx & -cx)) >= 0 \
            ; cx ^= cx & -cx)
#define forEachSubset(i, x) for (int i = x+1; i > 0 && (i = (i - 1) & x) >= 0 ; )


int dx[] = {-1, 0, 0, 1,  -1, -1, 1, 1};
int dy[] = {0, -1, 1, 0,  -1, 1, -1, 1};
#define forAllDirections(ni, nj, i, j, SZ) for (int k = 0, ni, nj; k < SZ && (ni = i + dx[k], nj = j + dy[k], 1); ++k)

int go(int ci, int cj, VVI &M, set<PII> VECS, vector<PII> &O) {
    M[ci][cj] = VECS.size();
    if (VECS.size() == M.size() * M[0].size() - 1) {
        for (auto V : M) {
            for (int v : V) {
                cout << v << " ";
            }
            cout << endl;
        }
//        for (auto p : O) {
//            cout << p.second <<" ";
//        }
        cout << endl;
        M[ci][cj] = -1;
        return 1;
    }
    int r = 0;
    for (int i = -(int)M.size() + 1; i < (int)M.size(); ++i) {
        for (int j = -(int)M[0].size() + 1; j < (int)M[0].size(); ++j) {
            if (VECS.count(PII(i, j))) continue;
            int ni = ci + i;
            int nj = cj + j;
            if (ni < 0 || nj < 0 || ni >= M.size() || nj >= M[0].size()) continue;
            VECS.insert(PII(i, j));
            O.push_back(PII(i, j));
            if (M[ci + i][cj + j] == -1) {
                int t = go(ci + i, cj + j, M, VECS, O);
                if (!t) {
//                    cout << ":(" << endl;
                }else {
                    r += t;
//                    return true;
                }
            }
            VECS.erase(PII(i, j));
            O.pop_back();
        }
    }
    M[ci][cj] = -1;
    return r;
}

pair<VI, VI> get(int N) {
    VI R(N, -1);
    int p = 0;
    for (int i = N-1, j = 0; i >= 1; --i, j ^= 1) {
        R[p] = p + (j ? -1 : 1) * i;
        p = R[p];
    }
    VI IR(N, -1);
    for (int i = 0; i < N; ++i) {
        if (R[i] != -1) {
            IR[R[i]] = i;
        }
    }
    return make_pair(R, IR);
}

void solve(int N, int M) {
    auto T = get(M);
    int s = 0, e = N-1;
    int i = 0, j = 0;
    printf("%d %d\n", i+1, j+1);
    auto moveI = [&](int i) {
        return i == e ? s : e;
    };
    while (s < e) {
        for (int k = 0; k < M-1; ++k) {
            j = T.first[j];
            i = moveI(i);
            printf("%d %d\n", i+1, j+1);
        }
        i = moveI(i);
        printf("%d %d\n", i+1, j+1);
        for (int k = 0; k < M-1; ++k) {
            j = T.second[j];
            i = moveI(i);
            printf("%d %d\n", i+1, j+1);
        }
        s++; e--;
        if (s <= e) {
            i = s;
            printf("%d %d\n", i+1, j+1);
        }
    }
    if (s == e) {
        for (int k = 0; k < M-1; ++k) {
            j = T.first[j];
            printf("%d %d\n", i+1, j+1);
        }
    }
}

int main(int argc, char *argv[]) {

    int N, M;
    read(N, M);
    solve(N, M);
    return 0;


    for (int R = 1; R <= 1; ++R) {
        for (int C = 1; C <= 5; ++C) {
            VVI M(R, VI(C, -1));
            set<PII> S;
            vector<PII> O;
            go(0, 0, M, S, O);
        }
        cout << " " << endl;
    }
}
