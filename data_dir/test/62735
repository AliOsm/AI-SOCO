#include <iostream>
#include <iomanip>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <map>
#include<unordered_map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include<bitset>
#include<deque>
#include<string>
#include<list>
#include<iterator>
#include<sstream>
#include <algorithm>
#define lli long long int
#define lower(a) transform(a.begin(),a.end(),a.begin(),::tolower);

using namespace std;

const int N = 3e5 + 500;
const long long mod = 1e9 + 7;
const long long inf = 1LL << 57;
const int M = 1e6 + 500;
const lli ths = 1LL << 40;

bool ok[N];
lli dp[N], router[N];

void solve()
{
    lli n, k;
    cin>>n>>k;
    string s;
    cin>>s;
    for(int i = 0; i < n; i ++)
        dp[i] = inf;
    lli pos = N - 1;
    for(int i = n - 1; i >= -k; i --)
    {
        if(i >= 0 && s[i] == '1')
            pos = i;
        router[i + k] = pos;
    }
    /*
    for(int i = 0; i < n; i ++)
        cout<<router[i]<<' ';
    cout<<endl;
    */
    for(int i = n - 1; i >= 0; i --)
    {
        if((router[i] - i) <= k)
        {
//            cout<<"THIS"<<endl;
            lli x = router[i] - k;
            if(x < 0)
                x = 0;
            dp[x] = min(dp[i + 1] + router[i] + 1, dp[x]);
        }
  //      cout<<"YES"<<endl;
        dp[i] = min(dp[i], dp[i + 1] + i + 1);
    }
    /*
    for(int i = 0; i < n + 1; i ++)
        cout<<dp[i]<<' ';
    cout<<endl;
    */
    cout<<dp[0];
    return ;
}

/*
7
6 7 4 1 2 11 6
5
1 2 10 4 5
*/

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    lli t;
    t = 1;
//    cin>>t;
    while(t --)
    {
        solve();
    }
    return 0;
}
