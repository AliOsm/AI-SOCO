#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327
#endif // M_PI
#define endl "\n"
#define S struct
#define X first
#define Y second
#define V vector
#ifndef __linux__
#define LLD "%I64d"
#else
#define LLD "%ll""d"
#endif
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
#define YESNO(cond) cout << ((cond) ? "Yes" : "No") << endl;
#define UMAX(left, right) left = max(left, right);
#define UMIN(left, right) left = min(left, right);
using namespace std;
typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
void yes() { cout << "Yes" << endl;}
void no() { cout << "No" << endl;}
S Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;
S FAIL { FAIL () { cout << "CHANGE!!!" << endl;}};

S Point
{
    Point() { clear();}
    void clear()
    {
        minc = LLONG_MAX;
        maxc = LLONG_MIN;
        max_dist = 0;
        prev_pos = LLONG_MIN;
    }
    void add(LL pos) {
        if (minc == LLONG_MAX) {
            minc = pos;
        }
        maxc = pos;
        max_dist = max(max_dist, pos - prev_pos);
        prev_pos = pos;
    }
    LL minc;
    LL maxc;
    LL max_dist;
    LL prev_pos;
};

int main()
{
    int n;
    cin >> n;
    vector<pair<char, LL>> v;
    v.reserve(n);
    FOR (i, 0, n) {
        string s;
        int x;
        cin >> x >> s;
        x += 1'000'000'002;
        v.push_back({s[0], x});
    }
    LL res = 0;
    Point red;
    Point blue;
    Point green;
    FOR (i, 0, n) {
        if (v[i].X == 'R') {
            red.add(v[i].Y);
        } else if (v[i].X == 'B') {
            blue.add(v[i].Y);
        } else {
            red.add(v[i].Y);
            blue.add(v[i].Y);
            if (green.prev_pos == LLONG_MIN) {
                res += 2 * v[i].Y - red.minc - blue.minc;
            } else {
                res += min(3 * (v[i].Y - green.prev_pos) - red.max_dist - blue.max_dist, 2 * (v[i].Y - green.prev_pos));
            }
            green.add(v[i].Y);
            red.clear();
            red.add(v[i].Y);
            blue.clear();
            blue.add(v[i].Y);
        }
    }
    if (green.minc == LLONG_MAX) {
        if (blue.minc != LLONG_MAX) {
            res += blue.maxc - blue.minc;
        }
        if (red.minc != LLONG_MAX) {
            res += red.maxc - red.minc;
        }
        cout << res;
        return 0;
    }
    res += red.maxc + blue.maxc - 2 * green.prev_pos;
    cout << res;
}