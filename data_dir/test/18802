//The best is yet to come...
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 1000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 100001

string S;
ll sa[maxn], pos[maxn], tmp[maxn], lcp[maxn], N, gap, freq[maxn],t[4*maxn];
ll tree[4*maxn];

bool Sufcmp(int i, int j){
	if(pos[i] != pos[j]){
		return pos[i] < pos[j];
	}
	i += gap; j += gap;
	return (i < N && j < N) ? pos[i] < pos[j] : i > j;
}
 
void buildSA(){
	N = S.size();
	for(int i = 0; i < N; i++){
		sa[i] = i;
		pos[i] = S[i];
	}
	tmp[0] = 0;
	for(gap = 1; ; gap = (gap << 1)){
		sort(sa, sa + N, Sufcmp);
		for(int i = 0; i < N-1; i++) tmp[i+1] = tmp[i] + Sufcmp(sa[i], sa[i+1]);
		for(int i = 0; i < N; i++) pos[sa[i]] = tmp[i];
		if(tmp[N-1] == N-1) break;
	}
}
 
void buildLCP(){
	N = S.size();
	lcp[0] = 0;
	for(int i = 0, k = 0; i < N; i++){
		if(pos[i] != N-1){
			for(int j = sa[pos[i]+1]; S[i+k] == S[j+k]; )
				k++;
			lcp[pos[i]+1] = k;
			if(k) k--;
		}
	}
}
void build(ll node,ll a,ll b)
{
	if(a==b)
	{
		tree[node]=lcp[a];
		return;
	}
	ll mid=(a+b)/2;
	build(2*node,a,mid);
	build(2*node+1,mid+1,b);
	tree[node]=min(tree[2*node],tree[2*node+1]);
}
ll query(ll node,ll a,ll b,ll l,ll r)
{
	if(a>b || a>r || b<l)
	return inf;
	if(a>=l && b<=r)
	return tree[node];
	ll mid=(a+b)/2;
	return min(query(2*node,a,mid,l,r),query(2*node+1,mid+1,b,l,r));
}
//check assert statement
ll get(ll i,ll j)
{
	if(i>N-1 || j>N-1 || i<0 || j<0 || j<i)
	assert(false);
	if(i==j)
	return N-sa[i];
	return query(1,0,N-1,i+1,j);
}
int main()
{
	boost1;boost2;	
	ll i,j,k,req,lo,mid,hi,len;
	cin>>S;
	N=S.size();
	cin>>k;
	if(k>N*(N+1)/2)
	{
		cout<<"No such line.";
		return 0;
	}
	buildSA();
	buildLCP();
	build(1,0,N-1);
	req=k;
	for(i=0;i<N;i++)
	{
		if(i==0)
		len=1;
		else
		len=lcp[i]+1;
		for(j=len;j<=N-sa[i];j++)
		{
			lo=i;
			hi=N;
			while(hi-lo>1)
			{
				mid=(lo+hi)/2;
				if(get(i,mid)>=j)
				lo=mid;
				else
				hi=mid;
			}
			req=req-(lo-i+1);
			if(req<=0)
			{
				cout<<S.substr(sa[i],j);
				return 0;
			}
		}
	}
	assert(false);
	return 0;
}
