#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<stdio.h>
#include<algorithm>
#include<vector>
#include<map>
#include<set>
using namespace std;
#define FOR(I,N) for(int(i)=0;i<int(N);++i)
typedef long long ll;
ll gcd(ll a, ll b){
    if (!b)
        return a;
    return gcd(b, a%b);
}
const int N = 1e5 + 5;
int n, a[N], q;
int dp[20][N];
map<int, ll>res;
int mem[N];
int find(int len){
    if (mem[len])
        return mem[len];
    while ((1 << mem[len]) * 2 <= len)
        ++mem[len];
    return mem[len];
}
int get(int start, int end){
    int len = end - start + 1;
    int K = find(len);
    return gcd(dp[K][start], dp[K][end - (1 << K) + 1]);
}
int main(){
    cin >> n;
    FOR(0, n){
        scanf("%d", &a[i + 1]);
        dp[0][i + 1] = a[i + 1];
    }
    for (int k = 1; (1 << k) <= n; ++k){
        for (int i = 1; i + (1 << k) - 1 <= n; ++i)
            dp[k][i] = gcd(dp[k - 1][i], dp[k - 1][i + (1 << (k - 1))]);
    }
    for (int i = 1; i <= n; ++i){
        int minIdx = i;
        int cur = a[i];
        while (minIdx <= n){
            int low = minIdx;
            int high = n;
            int best = minIdx;
            while (low <= high){
                int mid = (low + high) / 2;
                if (get(i, mid) == cur){
                    best = mid;
                    low = mid + 1;
                }
                else high = mid - 1;
            }
            int g = get(i, best);
            res[g] += best - minIdx + 1;
            minIdx = best + 1;
            cur = gcd(g, a[minIdx]);
        }
    }
    scanf("%d", &q);
    while (q--){
        scanf("%d", &n);
        printf("%lld\n", res[n]);
    }
}