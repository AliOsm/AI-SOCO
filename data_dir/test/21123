#include <iostream>
#include <cstdio>
#include <algorithm>
#include <memory.h>
#include <vector>

using namespace std;

struct trie
{
    trie * child[3];
    bool fl;
    trie ()
    {
        child[0] = child[1] = child[2] = NULL;
        fl = false;
    }
};

trie * Beg;
string st;
int n, m;

void add (string s)
{
    trie * v = Beg;
    for (int i = 0; i < s.size(); i ++)
    {
        int k = (int) s[i] - 'a';
        if (v -> child[k] == NULL)
            v -> child[k] = new trie();
        v = v -> child[k];
    }
    v -> fl = true;
}

bool dfs (trie * v, int sz, bool need)
{
    if (sz == st.size())
    {
        if (need) return v -> fl;
        else return false;
    }
    int k = (int) st[sz] - 'a';
    if (need)
    {
        if (v -> child[k] == NULL) return false;
        return dfs (v -> child[k], sz + 1, need);
    }
    for (int i = 0; i < 3; i ++)
    {
        if (v -> child[i] == NULL) continue;
        if (dfs (v->child[i], sz + 1, (i != k))) return true;
    }
    return false;
}

int main()
{
    Beg = new trie();
    cin >> n >> m;
    for (int i = 0; i < n; i ++)
    {
        string s;
        cin >> s;
        add(s);
    }
    for (int i = 0; i < m; i ++)
    {
        cin >> st;
        if (dfs (Beg, 0, 0))
            cout << "YES\n";
        else cout << "NO\n";
    }
    return 0;
}
