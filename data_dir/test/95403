//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,abm,mmx,avx,avx2,popcnt,tune=native")
//#pragma GCC optimize("SEX_ON_THE_BEACH")	
//#pragma GCC optimize("fast-math")
#pragma GCC optimize("unroll-loops")
#pragma comment(linker, "/STACK:36777216")

#define _CRT_SECURE_NO_WARNINGS

#include <set>
#include <map>
#include <deque>
#include <cmath>
#include <queue>
#include <cassert>
#include <random>
#include <bitset>
#include <iomanip>
#include <numeric>
#include <time.h>//////////////
#include <ctime>
#include <string>
#include <cstdio>
#include <vector>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
#define mp make_pair
#define pbc push_back
#define pob pop_back()
#define empb emplace_back
#define queuel queue<long long>
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define matrix vector<vector<ll>>
#define pin(p) cin >> p.first >> p.second;
#define rev(v) reverse(v.begin(), v.end());
#define mx(v) max_element(v.begin(), v.end());
#define mn(v) min_element(v.begin(), v.end());
#define sout(s, c) for (auto i : s) cout << i << c;
#define pout(p) cout << p.first << " " << p.second;
#define er(v, l, r) erase(v.begin() + l, v.begin() + r);
#define vin(v) for (ll i = 0; i < v.size(); ++i) cin >> v[i];
#define vout(v, c) for (int i = 0; i < v.size(); ++i) cout << v[i] << c;
#define pushi(v, a) for (int i = 0; i < a.size(); ++i) v.push_back(a[i]);
#define sin(s, n) for (int i = 0; i < n; ++i){int a; cin >> a; s.insert(a); }
#define fastio() ios_base::sync_with_stdio(0); cout.tie(0); cin.tie(0); srand(time(NULL))
#define sp system("pause")
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
using namespace std;//СЂСџВ¦Р‚СЂСџВ¦Р‚СЂСџВ¦Р‚СЂСџВ¦Р‚СЂСџВ¦Р‚СЂСџВ¦Р‚СЂСџВ¦Р‚СЂСџВ¦Р‚СЂСџВ¦Р‚СЂСџВ¦Р‚
					//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
const int MAXN = 3e5 + 228;
const ll inf = 1e16;
const ld EPS = 1e-4;
const ld PI = acos(-1);
const int mod = (int)998244353;
//const int MOD = 1000000007;
const int MOD9 = 1000000009;
const int a228 = 18;
const ll MOD = 1000000007;
const int maxelem = 12000000;
const int fsconst = 12000;
vector<int> f(MAXN);
void add(int r, int x)
{
	if (r < 0) return;
	for (; r < MAXN; r |= (r + 1))
	{
		f[r] += x;
	}
}
int get(int r)
{
	int ans = 0;
	for (; r >= 0; r = (r& (r + 1)) - 1)
	{
		ans += f[r];
	}
	return ans;
}
bool cmp(pair<int, int> a, pair<int, int> b)
{
	if (a.first == b.first) return a.second < b.second;
	return a.first < b.first;
}
signed main()
{
	fastio();
	int n;
	cin >> n;
	vector<pair<int, int>> kek;
	vector<pair<int, int>> sss;
	vector<vector<pair<int, int>>> polys(n);
	for (int i = 0; i < n; ++i)
	{
		int k;
		cin >> k;
		polys[i].resize(k);
		for (int j = 0; j < k; ++j)
		{
			cin >> polys[i][j].first >> polys[i][j].second;
		}
	}
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < polys[i].size(); ++j)
		{
			int ti = (j - 1 + polys[i].size()) % polys[i].size();
			kek.pbc({ polys[i][j].first - polys[i][ti].first, polys[i][j].second - polys[i][ti].second });
			int gg = __gcd(kek.back().first, kek.back().second);
			gg = abs(gg);
			kek.back().first /= gg;
			kek.back().second /= gg;
		}
	}
	sss = kek;
	sort(all(kek), cmp);
	kek.resize(unique(all(kek)) - kek.begin());
	vector<int> pref(n);
	pref[0] = polys[0].size();
	for (int i = 1; i < n; ++i)
	{
		pref[i] = pref[i - 1] + polys[i].size();
	}

	int q;
	cin >> q;
	vector<int> ansos(q);
	vector<pair<int, int>> qs(q);
	/*cout << "vectors" << endl;
	for (int i = 0; i < kek.size(); ++i)
	{
		cout << kek[i].first << ' ' << kek[i].second << endl;
	}
	sp;*/
	rev(pref);
	pref.pbc(0);
	rev(pref);
	vector<vector<int>> rg(3e5 + 1);
	for (int i = 0; i < q; ++i)
	{
		int x, y, z;
		cin >> x >> y;
		x--;
		y--;
		rg[pref[y + 1] - 1].pbc(i);
		qs[i] = { pref[x], pref[y + 1] - 1 };
	}
/*	cout << "queries" << endl;
	for (int i = 0; i < q; ++i)
	{
		cout << qs[i].first << ' ' << qs[i].second << endl;
	}
	sp;*/
/*	cout << "nowans" << endl;
	for (int i = 0; i < q; ++i)
	{
		cout << ansos[i] << endl;
	}
	sp;*/
/*	cout << "beg" << endl;
	for (int i = 0; i < sss.size(); ++i)
	{
		for (int j : beg[i]) cout << j << ' ';
		cout << endl;
	}
	sp;*/
	vector<int> lst(3e5 + 1, -1);
	for (int i = 0 ; i< sss.size(); ++i)
	{
		int num = lower_bound(all(kek), sss[i], cmp) - kek.begin();
		add(lst[num], -1);
		add(i, 1);
		lst[num] = i;
	///	cout << num << endl;
		for (int j : rg[i])
		{
			ansos[j] += get(qs[j].second) - get(qs[j].first - 1);
		}
	}
	for (int i = 0; i < q; ++i)
	{
		cout << ansos[i] << endl;
	}
//sp;
}