#include <bits/stdc++.h>
using namespace std;

signed main() {
  ios::sync_with_stdio(false);

  int N;
  cin >> N;

  vector<int> P(N);
  for (int i = 0; i < N; ++i) {
    cin >> P[i];
    --P[i];
  }

  vector<vector<int>> G(N);
  int root = -1;
  for (int i = 0; i < N; ++i) {
    if (~P[i]) {
      G[P[i]].emplace_back(i);
      G[i].emplace_back(P[i]);
    } else {
      root = i;
    }
  }

  if (N & 1) {
    vector<int> size(N); {
      function<void(int, int)> dfs_size = [&](int u, int fa) {
        size[u] = 1;
        for (int v : G[u]) {
          if (v == fa) continue;
          dfs_size(v, u);
          size[u] += size[v];
        }
      };
      dfs_size(root, -1);
    }
    vector<int> ans; {
      function<void(int, int)> dfs = [&](int u, int fa) {
        for (int v : G[u]) {
          if (v == fa) continue;
          if (~size[v] & 1) {
            dfs(v, u);
          }
        }
        ans.emplace_back(u);
        for (int v : G[u]) {
          if (v == fa) continue;
          if (size[v] & 1) {
            dfs(v, u);
          }
        }
      };
      dfs(root, -1);
    }
    cout << "YES" << endl;
    for (int a : ans) {
      cout << a + 1 << "\n";
    }
  } else {
    cout << "NO" << endl;
  }

  return 0;
}
