/// a.cpp

# include <stdio.h>
# include <bits/stdc++.h>
using namespace std;
const pair < int , int > DD[] = {{1,0},{1,1},{0,1},{-1,1},{-1,0},{-1,-1},{0,-1},{1,-1}};
# define fi cin
# define fo cout
# define x first
# define y second
# define ll long long
# define IOS ios_base :: sync_with_stdio(0);cin.tie(0)
# define p(v) cerr << #v << " = " << v << '\n'
# define p2(v) cerr << #v << " = " << (complex < __typeof(v.x) > (v.x,v.y)) << '\n'
# define vi vector < int >
# define vl vector < ll >
# define pll pair < ll , ll >
# define pii pair < int , int >
# define mp make_pair
# define db long double
# define fail puts("-1")
# define yes puts("YES")
# define no puts("NO")
# define PP puts("Possible")
# define II puts("Impossible")
# define vii vector < pii >
# define vll vector < pll >
# define pb push_back
# define pdd pair < db , db >
# define int ll
template < class T > T smin(T &a,T b) {if (a > b) a = b;return a;}
template < class T > T smax(T &a,T b) {if (a < b) a = b;return a;}
int32_t main(void)
{
    #ifdef CF
    freopen("input","r",stdin);
    #endif // CF
    srand(time(0));
    fo << fixed << setprecision(7);
    cerr << fixed << setprecision(7);
    static vi g[1 << 20];
    vi a,b;
    IOS;
    int n;
    fi>>n;
    static int v[1 << 20];
    for (int i = 1;i <= n;++i)
        fi>>v[i];
    for (int i = 2;i <= n;++i)
    {
        int par;
        fi>>par;
        g[par].pb(i);
    }
    function < int(int) > dfs = [&](int node)
    {
        int wh = -1;
        if (g[node].empty())
            wh = 1;
        for (auto it : g[node])
            wh = 1 - dfs(it);
        if (wh)
            a.pb(v[node]);
        else
            b.pb(v[node]);
        return wh;
    };
    dfs(1);
    int Xor = 0;
    for (auto it : a)
        Xor ^= it;
    ll ans = 0;
    ll sz = a.size();
    if (!Xor)
        ans += sz * (sz - 1) / 2;
    sz = b.size();
    if (!Xor)
        ans += sz * (sz - 1) / 2;
    static map < int , int > M;
    for (auto it : b)
        ++M[it];
    for (auto it : a)
        ans += M[it ^ Xor];
    fo << ans << '\n';
    cerr << "Time elapsed :" << clock() * 1000.0 / CLOCKS_PER_SEC << " ms" << '\n';
    return 0;
}
