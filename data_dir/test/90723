// Handle equal intercepts

#include<bits/stdc++.h>
using namespace std;

#define ll long long

#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) memset(ar, val, sizeof(ar))
#define fill0(ar) fill((ar), 0)
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef pair<int, int> ii;
typedef pair<ii, int> iii;
typedef vector<ii> vii;
typedef vector<int> vi;

#define INF 1000000000000000000

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    
    ll n;
    cin >> n;

    map<string, ll> m;
    m["void"] = 0;
    rep(i,n)
    {
        ll an = 0;
        ll em = 0;

        string x;
        cin >> x;

        if(x=="typedef")
        {
            string a;
            string b;
            cin >> a >> b;

            string x = "";
            rep(j,a.length())
            {
                if(a[j]=='&')
                    an++;
                else if(a[j]=='*')
                    em++;
                else
                {
                	x = x+a[j];
                }
            }

            if(m.find(x)==m.end())
            {
            	m[b] = -1;
            	continue;
            }
            ll tt = (em-an)+m.find(x)->second;
            if(tt<0 || m.find(x)->second<0)
            	m[b] = -1;
            else
            	m[b] = tt;
        }
        else
        {
        	string a;
        	cin >> a;

        	string x = "";
        	ll em = 0;
        	ll an = 0;
            rep(j,a.length())
            {
                if(a[j]=='&')
                    an++;
                else if(a[j]=='*')
                    em++;
                else
                {
                	x = x+a[j];
                }
            }

            if(m.find(x)==m.end())
            {
            	cout << "errtype" << endl;
            	continue;
            }
            ll xx = m[x];
            if(xx<0)
            	cout << "errtype" << endl;
            else
            {
            	ll tt = (em-an)+xx;
            	if(tt<0)
            		cout << "errtype" << endl;
            	else
            	{
            		cout << "void";
            		rep(i,tt)
            		{
            			cout << "*";
            		}
            		cout << endl;
            	}
            }
        }
    }
}