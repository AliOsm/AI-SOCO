#include <bits/stdc++.h>

using namespace std ;

#define fast ios_base::sync_with_stdio(false) , cin.tie(NULL) , cout.tie(NULL) 
#define pb push_back
#define int long long

template<typename T , typename S> 
ostream& operator << (ostream& os , const pair<T,S> &v) {
	os << "(" << v.first << "," << v.second << ")" ;
	return os ;
}

template<typename T>
ostream& operator << (ostream& os , const vector<T> &v) {
	os << "[" ;
	int sz = v.size() ; 
	for(int i = 0 ; i < sz ; ++i) {
		os << v[i] ; 
		if(i != sz - 1) os << "," ;
	}
	os << "]\n" ;
	return os ;
} 

//debug
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
		cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
		const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

const int N = 301 ;
int n ; 
string str ; 
int len[N][2] ;
const int mod = 1e9 + 7 ;
int dp[202][202][202][2] ; 
int sz ; 

int solve(int idx , int balance , int matched , int once) {
	int &res = dp[idx][balance][matched][once] ;
	if(res != -1) return res ;
	res = 0 ; 
	if(idx == n + n + 1) {
		if(balance == 0 and once) return res = 1 ; 
		return res = 0 ;
	}
	res = (res + solve(idx + 1 , balance + 1 , len[matched][0] , (once | len[matched][0] == sz))) % mod ;
	if(balance > 0) {
		res = (res + solve(idx + 1 , balance - 1 , len[matched][1] , (once | len[matched][1] == sz))) % mod ;
	}
	return res ;
}

int32_t main() {
	
	fast ; 
	cin >> n ; 
	cin >> str ;
	sz = str.size() ;
	str = " " + str ;
	if(str[1] == '(') len[0][0] = 1 ; 
	else len[0][1] = 1 ;
	string pref = "" ; 
	
	auto calc = [](string& pref){
		int bla = pref.size() , ans = 0 ;
		for(int i = 1 ; i < bla + 1 ; ++i) {
			if(str.substr(1,i) == pref.substr(bla-i,i)) {
				ans = max(ans, i) ;
			}
		}
		return ans ;
	};
	for(int i = 1 ; i < sz + 1 ; ++i) {
		pref += str[i] ;
		pref += "(" ; 
		len[i][0] = calc(pref) ;
		pref.pop_back() ; 
		pref += ")" ; 
		len[i][1] = calc(pref) ;
		pref.pop_back() ;
	}
	memset(dp , -1 , sizeof(dp)) ; 
	
	cout << solve(1,0,0,0) << endl ; 

	return 0 ; 
}