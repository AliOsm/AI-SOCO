// Task-ID: 1480
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <iomanip>
#include <cstdio>
#include <vector>
#include <string>
#include <stack>
#include <climits>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define For(i,a,b) for(int (i)=(a);(i)<=(b);(i)++)
#define FOR(i,a) For(i,1,a)
#define Ford(i,a,b) for(int (i)=(a);(i)>=(b);(i)--)
#define Rep(i,a,b) for(int (i)=(a);(i)<(b);(i)++)
#define REP(i,a) Rep(i,0,a)
#define type(x) __typeof(x.begin())
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#define compress(x) {sort(all(x));(x).resize(unique(all(x))-(x).begin());}
#define fill(x,y) memset(x,y,sizeof x)
#define all(x) x.begin(),x.end()
#define two(x) (1LL<<(x))
#define fi first
#define se second
#define gcd __gcd
#define pb push_back
#define mp make_pair

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
    #define dbg(x) cerr<<#x<<":"<<(x)<<endl
    #define dg(x) cerr<<#x<<":"<<(x)<<' '
#else
    #define eprintf(...) 0
    #define dbg(x) 0
    #define dg(x) 0
#endif

using namespace std;

typedef long long Lint;
typedef long double ld;
typedef pair<int,int> ii;
typedef pair<int,ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;

const int inf = 1e9+5143;
const Lint Linf = 1e18+5413;
const double eps = 1e-10;
const double pi = acos(-1);

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T lcm(T a,T b){
	return a/gcd(a,b)*b;
}

inline int read(){
    int res = 0LL ;int neg ;
    while(1){
        char ch = getchar();
        if(ch>='0' && ch<='9' || ch=='-'){
            if(ch=='-') neg = -1;
            else neg = 1 , res = ch-'0';
            break;
        }
    }
    while(1){
        char ch = getchar();
        if(ch>='0' && ch<='9') res*=10,res+=ch-'0';
        else break;
    }
    return res*neg;
}

const int N = 1717;

const int dx[] = {0,1,0,-1};
const int dy[] = {1,0,-1,0};

int a[N][N];
int U[N][N], L[N][N];
bool used[N][N];
int n, m;

void pass(int x,int y){
    queue<ii> q;
    q.push(mp(x,y));
    used[x][y] = 1;
    while(!q.empty()){
        int x = q.front().fi;
        int y = q.front().se;
        q.pop();
        REP(i,4){
            int nx = x + dx[i];
            int ny = y + dy[i];
            if(!used[nx][ny] && nx > 0 && nx <= n && ny > 0 && ny <= m && a[nx][ny]){
                q.push(mp(nx,ny));
                used[nx][ny] = 1;
            }
        }
    }
}

int main(){

#ifdef KAZAR
	freopen("f.input","r",stdin);
	freopen("f.output","w",stdout);
	freopen("error","w",stderr);
#endif

    n = read();
    m = read();

    FOR(i,n) FOR(j,m){
        a[i][j] = read();
    }

    int bcc = 0;

    FOR(i,n) FOR(j,m) if(a[i][j] && !used[i][j]){
        ++bcc;
        pass(i,j);
    }

    if(bcc > 1){
        puts("-1");
        return 0;
    }

    int odd = 0;
    int g = 0;

    FOR(i,n) FOR(j,m) if(a[i][j]){
        U[i][j] = U[i - 1][j] + 1;
        L[i][j] = L[i][j - 1] + 1;
        if(!(a[i - 1][j] && a[i + 1][j]) && !(a[i][j - 1]  && a[i][j + 1])){
            g = gcd(g,U[i][j] - 1);
            g = gcd(g,L[i][j] - 1);
        }
        int edges = 0;
        REP(k,4){
            if(i + dx[k] > 0  && i + dx[k] <= n && j + dy[k] > 0 && j + dy[k] <= m){
                if(a[i + dx[k]][j + dy[k]])
                    edges++;
            }
        }
        if(edges & 1)
            ++odd;
    }

    if(g <= 1){
        puts("-1");
        return 0;
    }

    if(odd != 0 && odd != 2){
        puts("-1");
        return 0;
    }

    FOR(i,max(n,m)) if(i > 1 && g % i == 0) printf("%d ",i);

    return 0;
}
