#include<bits/stdc++.h>
using namespace std;
#define pb push_back
// #define int long long
typedef long long ll;
#define fi first
#define se second
#define mp make_pair
#define pii pair<ll,int>
#define endl '\n'
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define sz(s) (int)s.size()
#define y1 fdfbvfds
typedef long double f80;
#define all(x) x.begin(), x.end()
typedef unsigned long long ull;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
ll rand(ll l,ll r){
    uniform_int_distribution<ll> uid(l, r);
    return uid(rng);
}

const int mod = 1e9 + 7;
int pwr(int a,int b) {
	if(b == -1) return pwr(a, mod - 2);
    int ans = 1;
    while(b) {
        if(b & 1) {
            ans = (ans * 1LL * a) % mod;
        }
        a = (a * 1LL * a) % mod;
        b >>= 1;
    }
    return ans;
}

const int N = 1e5 + 5;
const int LOGN = 17;
pii dp[LOGN][N];

int a[N], n;
int lg2[N];

void build() {
	fr(i, 2, N - 1) {
		lg2[i] = lg2[i >> 1] + 1;
	}
	fr(i, 1, n) {
		dp[0][i] = {a[i], i};
	}
	for(int k = 1; k < LOGN; k++) {
		int p = (1 << k);
		for(int i = 1; i + p - 1 <= n; i++) {
			dp[k][i] = max(dp[k - 1][i], dp[k - 1][i + p / 2]);
		}
	}
}

pii query(int l,int r) {
	int len = (r - l + 1);
	int k = lg2[len];
	return max(dp[k][l], dp[k][r - (1 << k) + 1]);
}

ll dp1[N];

signed main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    cin >> n;
    a[n] = 1e9;
    fr(i, 1, n - 1) {
    	cin >> a[i];
    }
    build();
    ll ans = 0;
    for(int i = n - 1; i >= 1; i--) {
    	pii p = query(i + 1, a[i]);
    	dp1[i] = dp1[p.se] - (a[i] - p.se) + n - i;
    	ans += dp1[i];
    }
    cout << ans;
    return 0;
}