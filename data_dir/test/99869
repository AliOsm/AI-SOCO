//In the name of God

#include <iostream>
#include <algorithm>
#include <set>
#include <cstdio>
using namespace std;
#define left(x) ((x)*2)
#define right(x) (((x)*2)+1)
#define power first.second
#define place first.first
#define int long long
#define mp make_pair
const int MAXN=2e5+10;
int p[MAXN],t[MAXN],seg[MAXN*4],cnt[MAXN],n;
pair <pair <int,int>,int> tmp[MAXN];
multiset <pair <int,int> > S;
multiset<pair <int,int> >::iterator it;

void update(int ind)
{
  seg[ind]=max(seg[left(ind)],seg[right(ind)]);
}

void add(int s,int e,int ind,int x,int val)
{
  if(e<=x or s>x)
    return;
  if(e-s==1)
    {
      seg[ind]=val;
      return;
    }
  int mid=(s+e)/2;
  add(s,mid,left(ind),x,val);
  add(mid,e,right(ind),x,val);
  update(ind);
}

int idx=-1;

void fin(int s,int e,int ind,int x)
{
  if(seg[ind]<x or idx!=-1)
    return;
  if(s+1==e)
    {
      idx=s;
      return;
    }
  int mid=(s+e)/2;
  fin(s,mid,left(ind),x);
  fin(mid,e,right(ind),x);
}

void feed(int x,int y,int ind)
{
  while(1)
    {
      it=S.lower_bound(mp(x,0));
      if(it==S.end())
	break;
      if((*it).first>x+y)
	break;
      cnt[tmp[ind].second]++;
      y+=(*it).second;
      S.erase(it);
    }
  add(0,n,1,ind,x+y);
  tmp[ind].power=y;
  t[tmp[ind].second]=y;
}

void eat(int x,int y)
{
  idx=-1;
  fin(0,n,1,x);
  if(tmp[idx].place>x or idx==-1)
    return;
  feed(tmp[idx].place,tmp[idx].power,idx);
}

main()
{
  int m;
  //cin>>n>>m;
  scanf("%I64d%I64d",&n,&m);
  for(int i=0;i<n;i++)
    {
      scanf("%I64d%I64d",&p[i],&t[i]);
      //cin>>p[i]>>t[i];
      tmp[i]=mp(mp(p[i],t[i]),i);

    }
  sort(tmp,tmp+n);
  for(int i=0;i<n;i++)
    add(0,n,1,i,tmp[i].place+tmp[i].power);
  for(int i=0;i<m;i++)
    {
      int x,y;
      scanf("%I64d%I64d",&x,&y);
      //cin>>x>>y;
      S.insert(mp(x,y));
      eat(x,y);

    }
  for(int i=0;i<n;i++)
    printf("%I64d %I64d\n",cnt[i],t[i]);
    //cout<<cnt[i]<<" "<<t[i]<<endl;
}
