/// Updated! https://www.youtube.com/watch?v=U07_n9xGIlM
#include<bits/stdc++.h>

using namespace std;
#define ll long long
#define dbug printf("I am here\n");
#define fast ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
const int maxn = 2000;

const ll inf = 1e18;
bool vis[maxn];
bool dp[2000][2000];
int ans[maxn] , n;

bool solve(int cur , int cnt){
    //cout << cur << " " << cnt << endl;
    if(cnt == n)return true;
    if(dp[cur][cnt])return false;
    dp[cur][cnt] = true;
    for(int i = 1; i<=4; i++){
        if(vis[cur+i] == false and i >= 2 and (cur+i) <= n){
            ans[cnt] = i+cur;
            vis[cur+i] = true;
            if(solve(i+cur , cnt+1))return true;
            vis[cur+i] = false;
        }
    }
    for(int i = 1; i<=4; i++){
        if( (cur-i) >= 1 and vis[cur-i] == false and i >= 2 ){
            ans[cnt] = cur-i;
            vis[cur-i] = true;
            if(solve(cur-i , cnt+1))return true;
            vis[cur-i] = false;
        }
    }
    return false;
}

int main()
{
    fast;

    int test;
    cin >> test;
    while(test--){
        cin >> n;
        bool fl = false;
        for(int i = 1; i<=n; i++){
            ans[0] = i;
            memset(vis,false,sizeof vis);
            memset(dp,false,sizeof dp);
            vis[i] = true;
            if(solve(i , 1)){
                for(int i = 0; i<n; i++){
                    cout << ans[i] << " ";
                }
                fl = true;
                break;
            }
        }
        if(!fl)cout << -1 ;
        cout << endl;
        memset(dp,false,sizeof dp);
    }



}
/*



*/
