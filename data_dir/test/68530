#include <cstdio>
#include <stack>
#include <algorithm>
using namespace std;
int a[1010][1010];
int H[1010][1010], W[1010][1010];
int rH[1010][1010], rW[1010][1010];
int n, m;
void scanx(int x) {
	for (int j = 0; j <= m+1; j++) {
		H[x][j] = rH[x][j] = 0;
	}
	int s = 1;
	for (int j = 1; j <= m+1; j++) {
		if (!a[x][j]) {
			for (int t = j-1; t >= s; t--) {
				H[x][t] = j - t;
			}
			s = j+1;
		}
	}
	s = m;
	for (int j = m; j >= 0; j--) {
		if (!a[x][j]) {
			for (int t = j+1; t <= s; t++) {
				rH[x][t] = t - j;
			}
			s = j-1;
		}
	}
}
void scany(int y) {
	for (int i = 0; i <= n+1; i++) {
		W[i][y] = rW[i][y] = 0;
	}
	int s = 1;
	for (int i = 1; i <= n+1; i++) {
		if (!a[i][y]) {
			for (int t = i-1; t >= s; t--) {
				W[t][y] = i - t;
			}
			s = i+1;
		}
	}
	s = n;
	for (int i = n; i >= 0; i--) {
		if (!a[i][y]) {
			for (int t = i+1; t <= s; t++) {
				rW[t][y] = t - i;
			}
			s = i-1;
		}
	}
}
int L[1010], R[1010];
int A[1010];
int go(int pos, int lim) {
	for (int i = 0; i <= lim+1; i++) {
		L[i] = R[i] = 0;
	}
	stack<int> st;
	for (int i = 1; i <= lim; i++) {
		while (st.size() && A[st.top()] >= A[i]) {
			st.pop();
		}
		L[i] = st.size() ? st.top() + 1 : 1;
		st.push(i);
	}
	while (st.size()) {
		st.pop();
	}
	for (int i = lim; i >= 1; i--) {
		while (st.size() && A[st.top()] >= A[i]) {
			st.pop();
		}
		R[i] = st.size() ? st.top() : lim + 1;
		st.push(i);
	}
	int res = 0;
	for (int i = 1; i <= lim; i++) {
		if (L[i] <= pos && pos < R[i]) {
			res = max(res, (R[i] - L[i]) * A[i]);
		}
	}
	return res;
}
int main() {
	int q;
	scanf("%d%d%d", &n, &m, &q);
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			scanf("%d", &a[i][j]);
		}
	}
	for (int i = 1; i <= n; i++) {
		scanx(i);
	}
	for (int j = 1; j <= m; j++) {
		scany(j);
	}
	while (q--) {
		int op, x, y;
		scanf("%d%d%d", &op, &x, &y);
		if (op == 1) {
			a[x][y] = 1 - a[x][y];
			scanx(x);
			scany(y);
		} else {
			int ans = 0;
			for (int j = 1; j <= m; j++) {
				A[j] = W[x][j];
			}
			ans = max(ans, go(y, m));
			for (int j = 1; j <= m; j++) {
				A[j] = rW[x][j];
			}
			ans = max(ans, go(y, m));
			for (int i = 1; i <= n; i++) {
				A[i] = H[i][y];
			}
			ans = max(ans, go(x, n));
			for (int i = 1; i <= n; i++) {
				A[i] = rH[i][y];
			}
			ans = max(ans, go(x, n));
			printf("%d\n", ans);
		}
	}
	return 0;
}
