#include <bits/stdc++.h>

using namespace std;
using namespace placeholders;

template <class T> void mini(T &l, T r) {l = min(l, r);}
template <class T> void maxi(T &l, T r) {l = max(l, r);}

template <class TH> void _dbg(const char *sdbg, TH h) {
  cerr << sdbg << "=" << h << "\n";
}
template <class TH, class ...TA> void _dbg(const char *sdbg, TH h, TA ...a) {
  while (*sdbg != ',') cerr << *sdbg++; cerr << "=" << h << ","; _dbg(sdbg + 1, a...);
}
template <class T> ostream &operator<<(ostream &os, vector <T> v) {
  os << "[";
  for (auto vv : v) os << vv << ",";
  return os << "]";
}
template <class L, class R> ostream &operator<<(ostream &os, pair <L, R> p) {
  return os << "(" << p.first << "," << p.second << ")";
}

#define eput(...) _dbg(#__VA_ARGS__, __VA_ARGS__)

const int N = 1 << 24;

int n;
int a[N];

void calc_sum(int m, int i, int k) {
  if (i < 0) return;
  calc_sum(m, i - 1, k);
  calc_sum(m + (1 << i), i - 1, k);
  for (int j = 0; j < (1 << i); ++j) {
    a[m + (1 << i) + j] += a[m + j];
  }
}

void run() {
  scanf("%d", &n);
  for (int i = 1; i <= n; ++i) {
    int m = 0;
    char s[10];
    scanf("%s", s);
    for (int j = 0; j < 3; ++j) m |= 1 << (s[j] - 'a');
    ++a[m];
  }
  
  calc_sum(0, 23, 24);

  int ans = 0;
  for (int i = 0; i < (1 << 24); ++i) {
    a[i] = n - a[i];
    ans ^= a[i] * a[i];
  }

  printf("%d\n", ans);

}

int main() {
  run();
  return 0;
}
