#include <sstream>
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <stdint.h>
using namespace std;

void solve()
{
    int n, m;
    int64_t t;
    cin >> n >> m >> t;
    vector < vector<pair<int, int> >> g(n);
    for (int i = 0; i < m; ++i)
    {
        int a, b, c;
        cin >> a >> b >> c;
        --a, --b;
        g[a].push_back(make_pair(b, c));
    }
    int inf = 1000000000+1;
    vector<vector<int> > dp(n + 1, vector<int>(n + 1, inf));
    vector<vector<int> > p(n+1, vector<int>(n+1, -1));
    dp[0][0] = 0;
    for (int u = 0; u < n; ++u)
    {
        for (int i = 0; i < n; ++i)
        {
            if (dp[i][u] >= inf)
                continue;
            for (int j = 0; j < g[i].size(); ++j)
            {
                int to = g[i][j].first;
                int l = g[i][j].second;
                if (0ll + dp[i][u] + l > t)
                    continue;
                if (dp[i][u] + l < dp[to][u + 1])
                {
                    dp[to][u + 1] = dp[i][u] + l;
                    p[to][u + 1] = i;
                }
            }
        }
    }
    int ans = 0;
    for (int u = 0; u < n; ++u)
    {
        if (dp[n - 1][u] <= t)
        {
            ans = u;
        }
    }
    vector<int> res;
    for (int cur = n - 1; cur != -1; cur = p[cur][ans--])
    {
        res.push_back(cur + 1);
    }
    cout << res.size() << endl;
    for (int i = (int)res.size() - 1; i >= 0; --i)
    {
        cout << res[i] << " ";
    }
}
 
int main(void)
{
    std::ios_base::sync_with_stdio(false);
    solve();
    return 0;
}