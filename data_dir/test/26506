# include <iostream>
# include <sstream>
# include <cstdio>
# include <cstdlib>
# include <algorithm>
# include <string>
# include <cstring>
# include <cmath>
# include <stack>
# include <queue>
# include <vector>
# include <list>
# include <map>
# include <set>
# include <deque>
# include <iterator>
# include <functional>
# include <bitset>
# include <climits>
# include <ctime>
#define max(a,b) ((a)>(b)?(a):(b))
#define min(a,b) ((a)<(b)?(a):(b))
#define odd(x) (x&1)
#define debug(x) cout << #x << " => " << x << endl
typedef long long ll;
typedef long double ld;
const ll oo = /*2 * 1000 * 1000 * 1000*/0x3f3f3f3f;
const int _cnt = 1000 * 1000;
const int _p = 1000 * 1000 * 1000 + 7;
//const int _p = 1007;
ll o(ll x) { return x%_p; }
int gcd(int a, int b) { return b ? gcd(b, a%b) : a; }
//ll gcd(ll a, ll b) { return b ? gcd(b, a%b) : a; }
int lcm(int a, int b) { return a / gcd(a, b)*b; }
using namespace std;

void file_put() {
    freopen("filename.in", "r", stdin);
    freopen("filename.out", "w", stdout);
}

ll n,k,m;
int l,cnt=0;
ll c[105][105],s=0,t=0,p=1,ans=1;

struct ttype{
    ll a[2][2];
};

ttype chen(ttype x, ttype y){
    ttype p;
    memset(p.a,0,sizeof(p.a));
    for (int i=0; i<=1; i++)
        for (int j=0; j<=1; j++)
            for (int k=0; k<=1; k++){
                p.a[i][j]=( p.a[i][j] + x.a[i][k]*y.a[k][j]% m ) % m;
            }
    return p;
}

/*ll quick_mi(ll a,ll k){
    if (k==0 || k==1) return (a-1)*k+1;
    ll t=quick_mi(a,k>>1);
    return (((t*t)%m)*quick_mi(a,k&1))%m;
}*/

ll quick_mi(ll a,ll b) {
    ll ret=1;
    for (; b; b>>=1) {
        if (b&1) ret=ret*a%m;
        a=a*a%m;
    }
    return ret;
}

ttype quick_mi(ttype a,ll k){
    ttype p;
    p.a[0][0]=p.a[1][1]=1;
    p.a[0][1]=p.a[1][0]=0;
    if (k==0) return p;
    if (k==1) return a;
    p=quick_mi(a,k>>1);
    return chen(chen(p,p),quick_mi(a,k&1));
}

ttype T;

int main() {
    //file_put();

    scanf("%I64d%I64d%d%I64d",&n,&k,&l,&m);
    ans%=m;
    /*c[0][0]=1;
    for (int i=1; i<=n+1; i++){
        c[i][0]=1;
        for (int j=1; j<=i; j++)
            c[i][j]=(c[i-1][j]+c[i-1][j-1])%m;
    }
    for (int i=0; i<=n; i++){
        if (n-i+1<i) break;
        s+=c[n-i+1][i];
        s%=m;
    }
    for (int i=1; i<=n; i++) {
        p*=2;
        p%=m;
    }*/
    for (int i=0; i<=1; i++)
        for (int j=0; j<=1; j++)
            T.a[i][j]=1;
    T.a[1][1]=0;
    T=quick_mi(T,n-1);
    s=(T.a[0][0]*2+T.a[0][1])%m;
    p=quick_mi(2,n);
    t=(p-s+m)%m;
    int x=0;
    for (; k; k>>=1) {
        cnt+=(k&1);
        if (++x>l) {
            printf("%d\n",0);
            return 0;
        }
    }
    for (int i=1; i<=cnt; i++) {
        ans=ans*t%m;
    }
    for (int i=1; i<=l-cnt; i++) {
        ans=ans*s%m;
    }
    cout<<ans<<endl;

    return 0;
}
