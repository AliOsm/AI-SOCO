#include<bits/stdc++.h>
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define inf INT_MAX
#define ninf INT_MIN
using namespace std;
const ll mod=1e9+7;         
const int N=1e5+4;
ll val[N],ans[N];
vector<int> v[N];
ll gcd(ll a,ll b)
{
    if(b==0)
    return a;
    return gcd(b,a%b);
}
void dfs(int node,int par,unordered_map<ll,ll> pm)
{
    unordered_map<ll,ll> tm;
    pm[val[node]]++;
    //ans[i] stores summation of all f(u,v) ending at v.
    //at max log2(n) different gcd values
    //reason:-sort all distinct gcd values in decreasing order,each next element
    //has to be the divisor of the previous element.
    for(auto it:pm)
    {
        ll d=gcd(it.F,val[node]);
        tm[d]+=it.S;
        ll here=(d*it.S)%mod;
        ans[node]=(ans[node]+here)%mod;
    }
    for(int it:v[node])
    if(it!=par)
    dfs(it,node,tm);
}
int main()                  
{
    int n;
    scn(n);
    rep(i,1,n+1)
    lscn(val[i]);
    rep(i,0,n-1)
    {
        int a,b;
        scn(a);scn(b);
        v[a].pb(b);
        v[b].pb(a);
    }
    unordered_map<ll,ll> tm;
    dfs(1,-1,tm);
    ll final=0;
    rep(i,1,n+1)
    final=(final+ans[i])%mod;
    lpri(final);
}