#include <algorithm>
#include <bitset>
#include <cassert>
#include <chrono>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <map>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
using namespace std;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

int N;
vector<int> adj[200005];
int sz[200005];
ll anc[200005];
ll chd[200005];

void get_sz(int cur, int prv)
{
    sz[cur] = 1;
    for (auto nxt : adj[cur])
    {
        if (nxt == prv)
            continue;
        get_sz(nxt, cur);
        sz[cur] += sz[nxt];
    }
}

void dfs1(int cur, int prv)
{
    chd[cur] = 1;
    for (auto nxt : adj[cur])
    {
        if (nxt == prv)
            continue;
        dfs1(nxt, cur);
        chd[cur] += chd[nxt] + sz[nxt];
    }
}

void dfs2(int cur, int prv)
{
    for (auto nxt : adj[cur])
    {
        if (nxt == prv)
            continue;
        anc[nxt] = anc[cur] + chd[cur] - chd[nxt] - sz[nxt] + N - sz[nxt];
        dfs2(nxt, cur);
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

    cin >> N;
    for (int i = 0, a, b; i < N - 1; i++)
    {
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }

    get_sz(1, 0);
    dfs1(1, 0);
    dfs2(1, 0);
    ll ans = anc[1] + chd[1];
    for (int i = 2; i <= N; i++)
        ans = max(ans, anc[i] + chd[i]);
    cout << ans << "\n";

    return 0;
}
