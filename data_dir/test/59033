#include<bits/stdc++.h>
#define In_the_name_of_allah_the_merciful ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define Alhamdulillah return 0;;
#define pb push_back
#define mp make_pair
#define lb lower_bound
#define ub upper_bound
#define ins insert
#define fi first
#define se second
#define pi pair<int,int>
#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v) ((ll)((v).size()))
#define reset(v,val) memset(v,val,sizeof(v));
#define rep(i, x, n) for ( i = x; i<=(ll)(n); i++)
#define irep(i, x, n) for( i = x; i<(ll)(n); i++)
#define _rep(i, x, n) for ( i =x; i>=(ll)(n); i--)
#define _irep(i, x, n) for( i =x; i>(ll)(n); i--)
using namespace std;
typedef   long long   int  ll;
const long long  mod=1e9+7;
const ll MOD = 1e9 + 7;
ll n,m,k,res=0,ans=0,sm=0,edge=-1;
ll a[500050],club[500050],vis[500005]={0},match[500005]={0},dp[500005],out[500005]={0};
set< ll >st,st1,st2;
set<ll>stres;
string s,s1,s2,s3,s4;
vector<ll>v,vnode,vans,v3,adj[500005];
vector< pi >vv,vv1,v1,v2;
vector< pair< int,pi> > vvv;
priority_queue <ll> q;
map< pair< ll,pi >,ll > red;
set< ll > ::iterator it,it1,it2;
int voyel(char c){
	if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||c=='y')return 1;
	return 0;
}

bool dfs(int v){// v is in X, it returns true if and only if there is an augmenting path starting from v
    if(vis[v])return 0;
	vis[v] = true;
	for(ll u : adj[v])
		if(match[u] == -1 or dfs(match[u])) // match[i] = the vertex i is matched with in the current matching, initially -1
			return match[u] =v, true;
	return false;
}



int main(){
In_the_name_of_allah_the_merciful
	ll i=0,j=0,x,y,z=0,mx=0,nb0=0,nb=0,nbmax=0,nbinf=0,mm=5e9,idx=0,ok=0,l,r,negatif=0,positif=0,q,w,d;
	char c;
  // freopen("a.in","r",stdin);
   cin>>n>>m;
   for(i=1;i<=n;i++)cin>>a[i];
   for(i=1;i<=n;i++){
    cin>>club[i];

   }
   cin>>q;
   memset(out,0,sizeof(out));
   for(i=1;i<=q;i++){
      cin>>x;
      out[x]=1;
      v.pb(x);
   }
   memset(match,-1,sizeof(match));
   for(i=1;i<=n;i++){
      if(!out[i]){
         adj[a[i]].pb(club[i]);
      }
   }
   ans=0;
   for(i=(sz(v)-1);i>=0;i--){
       while(true){
            memset(vis,0,sizeof(vis));
           if(!dfs(ans))break;
           ans++;
       }
       dp[i]=ans;
       x=v[i];
       adj[a[x]].pb(club[x]);
    }
   for(i=0;i<q;i++){
      cout<<dp[i]<<endl;
   }
Alhamdulillah
 }
