/*######################################################
#########~~~~~####~~~~###~~##~~##~~##~~##~~##~~#########
#########~~##~~##~~##~~##~~~#~~##~~~#~~##~~##~~#########
#~~~~~~##~~~~~###~~~~~~##~~#~~~##~~#~~~##~~##~~##~~~~~~#
#########~~######~~##~~##~~##~~##~~##~~##~~##~~#########
#########~~######~~##~~##~~##~~##~~##~~###~~~~##########
######################################################*/
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define str string
#define rtn return
#define endl '\n'
#define f first
#define s second
#define sz(x) (int)(x).size()
#define pb push_back
#define db long double
#define Mod 1000000007
#define nu 100005
#define inf 2e18
#define eps 1e-15
#define pll pair <ll, ll>
#define vi vector<ll>
#define fill(a,v) memset(a,v,sizeof(a))
#define all(x) (x).begin(),(x).end()
#define loop(i,a,b) for(ll i=a;i<b;i++)
#define loop1(i,a,b) for(ll i=a;i<=b;i++)
#define rep(i,b) for(ll i=0;i<b;i++)
#define pool(i,a,b) for(ll i=b-1;i>=a;i--)
#define per(i,a) for(ll i=(a-1);i>=0;i--)

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " = " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << " = " << arg1<<" |";
  __f(comma+1, args...);
}
#else
#define trace(...)
#endif

set<ll> points;
map<ll, ll> mp, rmp;
vector<pll> point;
ll l[400005];
ll r[400005];
ll ans[200005];
ll n;
int t;
void compress() {
  for (auto i : points) {
    mp[i] = ++t;
    rmp[t] = i;
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  //start
  cin >> n;
  rep (i, n) {
    ll x, y;
    cin >> x >> y;
    point.pb({x, y});
    points.insert(x);
    points.insert(y);
  }
  compress();
  rep (i, n) {
    point[i].f = mp[point[i].f];
    point[i].s = mp[point[i].s];
    l[point[i].f]++;
    r[point[i].s]--;
  }
  ll sx = 0;
  loop (i, 1, t) {
    if (r[i] == 0) {
      sx += l[i];
      ans[sx] += rmp[i + 1] - rmp[i];
    } else {
      sx += l[i];
      ans[sx]++;
      sx += r[i];
      ans[sx] += rmp[i + 1] - rmp[i] - 1;
    }
  }
  sx += l[t];
  //cout << sx << endl;
  ans[sx]++;
  loop1 (i, 1, n) {
    cout << ans[i] << ' ';
  }
  cout << endl;
  rtn 0;
}
