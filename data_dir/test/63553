#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define sz(s) ((int)(s.size()))
#define all(s) s.begin(),s.end()
#define rep(i,a,n) for(int i=a;i<=n;++i)
#define per(i,n,a) for(int i=n;i>=a;--i)

typedef long long ll;
typedef unsigned long long ull;

using namespace std;

const int MAXN = 3e5 + 256;
const char nxtl = '\n';
const double eps = (double)1e-9;
template<typename T> inline bool updmin(T &a, const T &b) {return a > b ? a = b, 1 : 0;}
template<typename T> inline bool updmax(T &a, const T &b) {return a < b ? a = b, 1 : 0;}

int n, m, c[MAXN], color[MAXN], k;
ll d[555][555];
int dst[MAXN];
vector < int > go[MAXN];
bool u[MAXN], done[MAXN];
int clr[555];
vector < int > tmp;
set < int > cur;
void dfs(int x) {
	u[x] = 1;
	cerr << x << ' ';
	tmp.pb(color[x]);
	for(auto &to : go[x]) { if(!u[to] && cur.count(color[to])) dfs(to); }
	go[x].clear();
}

int main() {
	#ifdef accepted
		freopen(".in", "r", stdin);
		freopen(".out", "w", stdout);
	#endif
	srand(time(NULL));
	scanf("%d%d%d", &n, &m, &k);
	rep(i, 1, k) rep(j, 1, k) d[i][j] = (ll)1e15;
	rep(i, 1, k) {
		scanf("%d", c + i);
		c[i] += c[i-1];
		clr[i] = c[i];
		rep(j, c[i-1]+1, c[i]) color[j] = i;
	}
	rep(i, 0, m-1) {
		int u, v, x; scanf("%d%d%d", &u, &v, &x);
		if(x == 0) { go[v].pb(u); go[u].pb(v); }
		if(color[u] == color[v]) continue;
		updmin(d[color[u]][color[v]], x*1ll);
		updmin(d[color[v]][color[u]], x*1ll);
	}
	rep(i, 1, k) cur.insert(i);
	while(!cur.empty()) { dfs(clr[*cur.begin()]); for(auto &to : tmp) cur.erase(to); tmp.clear(); cerr << nxtl; }
	rep(i, 1, n) if(!u[i]) return cout << "No\n", 0;
	rep(i, 1, k) d[i][i] = 0;
  for (int kk = 1; kk <= k; ++kk)
 		for (int i = 1; i <= k; ++i)
    	for (int j = 1; j <= k; ++j)                    
  			d[i][j] = min (d[i][j], d[i][kk] + d[kk][j]);
 	rep(i, 1, k) rep(j, 1, k) if(d[i][j] != d[j][i]) return cout << "No\n", 0;
	puts("Yes");
	rep(i, 1, k) {
		rep(j, 1, k) {
			if(d[i][j] > (ll)1e13) cout << -1 << ' ';
			else cout << d[i][j] << ' ';
		}
		puts("");
	}

	return 0;
}