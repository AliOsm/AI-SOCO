#include <bits/stdc++.h>
#define endl '\n'
using namespace std;
typedef long long ll;
#ifndef __MODINT_INCLUDED_
#define __MODINT_INCLUDED_
// WARNING: use with caution; significant constant factor slowdown
ll M;
typedef long long ll;
struct modint {
    ll val;
    modint() : val(0) {}
    modint(ll val) : val(val) {}
    explicit operator ll() const { return val; }
    bool operator==(const modint& y) const { return val == y.val; }
    bool operator!=(const modint& y) const { return val != y.val; }
    bool operator< (const modint& y) const { return val <  y.val; }
    bool operator<=(const modint& y) const { return val <= y.val; }
    bool operator> (const modint& y) const { return val >  y.val; }
    bool operator>=(const modint& y) const { return val >= y.val; }
    modint operator+(const modint& y) const { return (val + y.val) % M; }
    modint operator*(const modint& y) const { return val * y.val % M; }
    modint operator^(const ll y) const {
        if(y == 0) {
            return 1;
        } else {
            modint z = *this^(y / 2);
            return z * z * (y % 2 ? *this : 1);
        }
    }
    modint operator^(const modint& y) const { return *this ^ y.val; }
    modint operator-() const { return M - val; }
    modint operator~() const { return *this ^ (M - 2); }
    modint operator-(const modint& y) const { return *this + -y; }
    modint operator/(const modint& y) const { return *this * ~y; }
    modint& operator=(const modint& y) { val = y.val; return *this; }
    modint& operator+=(const modint& y) { return *this = *this + y; }
    modint& operator*=(const modint& y) { return *this = *this * y; }
    modint& operator^=(const modint& y) { return *this = *this ^ y; }
    modint& operator-=(const modint& y) { return *this = *this - y; }
    modint& operator/=(const modint& y) { return *this = *this / y; }
    modint& operator++() { return *this += 1; }
    modint& operator--() { return *this -= 1; }
    modint operator++(int) { modint m = *this; ++(*this); return m; }
    modint operator--(int) { modint m = *this; --(*this); return m; }
};
ostream& operator<<(ostream& os, const modint& m) { os << m.val; return os; }
#endif
#ifndef __PERMUTATIONS_INCLUDED_
#define __PERMUTATIONS_INCLUDED_
#define N 200'000
int np2[N+1];
modint fac[N+1];
void make_facs() {
    np2[0] = 0;
    fac[0] = 1;
    for(int i = 1; i <= N; i++) {
        np2[i] = np2[i-1];
        int j = i;
        while(j % 2 == 0) {
            np2[i]++;
            j /= 2;
        }
        fac[i] = fac[i-1] * j;
    }
}
#endif
modint C(vector<int> occ) {
    int n = accumulate(occ.begin(), occ.end(), 0);
    modint ans = fac[n];
    int p2 = np2[n];
    for(int x : occ) {
        if(x == 2) {
            p2--;
        }
    }
    return ans * (modint(2) ^ p2);
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    map<int, map<int, int>> coords;
    int n;
    cin >> n;
    for(int i = 0; i < n; i++) {
        int ai;
        cin >> ai;
        coords[ai][i]++;
    }
    for(int i = 0; i < n; i++) {
        int bi;
        cin >> bi;
        coords[bi][i]++;
    }
    cin >> M;
    make_facs();
    modint ans = 1;
    for(auto& e : coords) {
        vector<int> occ;
        for(auto& m : e.second) {
            occ.push_back(m.second);
        }
        ans *= C(occ);
    }
    cout << ans << endl;
    return 0;
}
