#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <sstream>
#include <cassert>
#include <queue>
#include <bitset>
#include <ctime>
#include <random>
#include <chrono>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define db(v) cerr << #v << " = " << v << endl
#define pb push_back
#define sz(x) ((int)x.size())
#define fst first
#define snd second
typedef long long ll;
typedef pair<int, int> ii;
const int MAXN = 1000005;
const int MOD = (int)1e9 + 7;

int n, m, a, b, f[MAXN], fi[MAXN], inv[MAXN];

int mul(int a, int b){
  return ((ll)a * b) % MOD;
}

int expmod(int b, ll e);

int calc_inv(int v){
  if(v < MAXN) return inv[v];
  return expmod(v, MOD-2);
}

int expmod(int b, ll e){
  if(e < 0) return calc_inv(expmod(b, -e));
  if(!e) return 1;
  if(e&1) return mul(b, expmod(b, e-1));
  int k = expmod(b, e/2);
  return mul(k, k);
}

int add(int a, int b){
  return a + b >= MOD ? a + b - MOD : a + b;
}

int choose(int n, int k){
  return mul(mul(f[n], fi[k]), fi[n-k]);
}

int main(){
  inv[1] = 1;
  f[0] = 1;
  fi[0] = 1;
  forr(i, 2, MAXN) inv[i]=MOD-((ll)(MOD/i)*inv[MOD%i])%MOD;
  forr(i, 1, MAXN) f[i] = mul(f[i-1], i);
  forr(i, 1, MAXN) fi[i] = mul(fi[i-1], inv[i]);
  while(scanf("%d %d %d %d", &n, &m, &a, &b) >= 1){
    int ans = 0;
    forr(l, 1, n){
      if(l > m) break;
      int v = 1;
      v = mul(v, l + 1);
      v = mul(v, expmod(n, n - l - 2));
      v = mul(v, expmod(m, n - l - 1));
      v = mul(v, choose(m - 1, l - 1));
      v = mul(v, choose(n - 2, l - 1));
      v = mul(v, f[l - 1]);
      ans = add(ans, v);
    }
    printf("%d\n", ans);
  }
  return 0;
}
