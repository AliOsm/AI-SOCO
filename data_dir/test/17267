#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define MAX ((int)(1e9))
#define MAX_X ((int)(1e6 + 2))
#define pi (2.0*acos(0))
#define M ((ll)(1e9 + 7))
#define NN ((ll)(305))
#define N ((int)(2e5 + 5))
#define eps (0)
#define log 20


using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef unsigned long long ull;


typedef tree < pair < int, int >,  null_type,  less < pair < int, int > >,  rb_tree_tag,  tree_order_statistics_node_update > o_set;
/// o_set s;
/// s.order_of_key(k) : Number of items strictly smaller than k .
/// *(s.find_by_order(k)) : K-th element in a set (counting from zero).

char str[N], ans[N];

bool vis[N];

struct info{
    int lef , rig;
}arr[N], brr[N];

bool cmp(info a , info b)
{
    return a.lef<b.lef;

}


bool cmp1(info a , info b)
{
    return a.rig<b.rig;

}


ll chk(int val , int n)
{
    //if(val==11) cout<<"asdas\n";
    vector < int > v;
    int i;
    for(i = n; i>0 && brr[i].rig>=val; i--){
        v.push_back(brr[i].lef);
    }
    sort(v.begin(),v.end());
    int rem = n/2 + 1;
    ll sum = 0;
    while(rem>0){
        rem--;
        sum += max(val,v.back());
        v.erase(v.end()-1);
        //if(val==11) cout<<i<<" "<<rem<<" "<<arr[i].lef<<endl;
    }
    sum += (ll)rem*val;
    //if(val==11) cout<<sum<<endl;
    for(; i>0; i--) v.push_back(brr[i].lef);
    sort(v.begin(),v.end());
    for(int i = 0; i<n/2; i++) sum += v[i];
    //if(val==11) cout<<sum<<endl;
    return sum;
}

int main()
{

    int t = 2e9 + 1;
    //cout<<t<<endl;
    scanf("%d",&t);
    while(t--){
        int n;
        ll sum;
        scanf("%d %lld",&n,&sum);
        for(int i = 1; i<=n; i++){
            scanf("%d %d",&arr[i].lef,&arr[i].rig);
            brr[i] = arr[i];
            //sum -= arr[i].lef;
        }

        sort(arr+1,arr+n+1,cmp);
        sort(brr+1,brr+n+1,cmp1);

//        for(int i = 1; i<=n; i++) cout<<brr[i].rig<<" ";
//        cout<<endl;

        //for(int i = 1; i<=n; i++) cout<<arr[i].lef<<" ";

        int lef = arr[1+n/2].lef, rig = brr[1+n/2].rig;
        //cout<<lef<<" "<<rig<<endl;
        while(lef<rig){
            int mid = (lef+rig+1)/2;
            if(chk(mid,n)<=sum) lef = mid;
            else rig = mid-1;
        }
        printf("%d\n",lef);

    }
    return 0;
}
