#include<bits/stdc++.h>

using namespace std;

#define getSeed std::chrono::system_clock::now().time_since_epoch().count()

#define ll long long

#define all(x) x.begin(), x.end()

const int mod = (int) 1e9 + 7;
const int mod2 = 998244353;

const int mx = 22;

ll n, s;
ll a[mx], fact[mx], inv[mx];

ll binpow(ll b, int exp){

	b %= mod;
	ll res = 1ll;

	while(exp){
		if(exp & 1) res = (res * b) % mod;
		b = (b * b) % mod;
		exp >>= 1;
	}

	return res % mod;
}

//for lower constraints 

// int nck(int i, int kk){

// 	if(kk == 0) return 1;

// 	if(kk < 0 || i >= n) return 0;

// 	int res = 0;
// 	for(int j = 0; j <= a[i]; ++j){
// 		if(kk - j >= 0)
// 			res += nck(i + 1, kk - j);
// 	}

// 	return res;
// }

ll nck(ll n, int k){

	if(n < k || k < 0) return 0;

	ll res = 1ll;

	for(int i = 0; i < k; ++i){
		res = res * ((n - i) % mod);
		res %= mod;
	}

	res = (res * inv[k]) % mod;
	return res;
}

int main(){

    cin.tie(0);
    cin.sync_with_stdio(0);

    #ifdef Cyborg101
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif

    cin >> n >> s;

    for(int i = 0; i < n; ++i){
    	cin >> a[i];
    }

    fact[0] = 1ll;
    inv[0] = 1ll;

    for(int i = 1; i <= n; ++i){
    	fact[i] = (i * fact[i - 1]) % mod;
    	inv[i] = binpow(fact[i], mod - 2);
    }

    ll res = nck(s + n - 1, n - 1) % mod;

    int NX = 1 << n;

    for(int mask = 1; mask < NX; ++mask){

    	ll groupMX = 0;
    	int set_bits = 0;

    	for(int bit = 0; bit < n; ++bit){
    		if((1 << bit) & mask){
    			set_bits++;
    			groupMX += a[bit] + 1;
    		}	
    	}


		ll comp = nck(s + n - 1 - groupMX, n - 1);
    	res = res - (set_bits & 1 ? comp : -comp);

    	if(res >= mod) res -= mod;
    	else if(res < 0) res += mod;
    }

    cout << res << endl;

    return 0;
}