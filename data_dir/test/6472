#include <bits/stdc++.h>
using namespace std;

#define rep(i, v)       for(int i=0;i<sz(v);++i)
#define lp(i, n)        for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)    for(int i=(j);i<(int)(n);++i)
#define all(v)              ((v).begin()), ((v).end())
#define sz(v)               ((int)((v).size()))
#define clr(v, d)           memset(v, d, sizeof(v))
#define lpd(i, j, n)    for(int i=(j);i>=(int)(n);--i)

typedef long long         ll;
const ll OO = 1e8;

const double EPS = (1e-7);
int dcmp(double x, double y) {  return fabs(x-y) <= EPS ? 0 : x < y ? -1 : 1;   }

#define pb                  push_back
#define MP                  make_pair
#define P(x)                cout<<#x<<" = { "<<x<<" }\n"
typedef long double       ld;
typedef vector<int>       vi;
typedef vector<double>    vd;
typedef vector<pair<int, int> > vii;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;


#define FilesX


const int N = 100;

int main() // B
{
#ifdef Files
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    ios::sync_with_stdio(false);
    
    int n, s; cin >> n >> s;
    vii buy;
    vii sell;
    lp(i, n){
        char di; int pi, qi;
        cin >> di >> pi >> qi;
        if(di == 'B')  buy.push_back(make_pair(pi, qi));
        else sell.push_back(make_pair(pi, qi));
    }
    sort(all(buy), std::greater<pair<int, int> >()); sort(all(sell));
    lp(i, buy.size() - 1){
        if(buy[i].first == buy[i + 1].first){
            buy[i].second += buy[i + 1].second;
            buy.erase(buy.begin() + i + 1);
            i--;
        }
    }
    lp(i, sell.size() - 1){
        if(sell[i].first == sell[i + 1].first){
            sell[i].second += sell[i + 1].second;
            sell.erase(sell.begin() + i + 1);
            i--;
        }
    }
    int mini = min(s, (int)sell.size());
    lp(i, mini){
        cout << "S " << sell[mini - i - 1].first << ' ' << sell[mini - i - 1].second << endl;
    }
    lp(i, min(s, (int)buy.size())){
        cout << "B " << buy[i].first << ' ' << buy[i].second << endl;
    }
    
    
    return 0;
}