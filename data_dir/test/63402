#include <bits/stdc++.h>
using namespace std;

#ifdef SG
    #include <debug.h>
#else
    #define show(...)
    #define debug(...)
    #define deepen(...)
    #define timer(...)
#endif

#define ARG4(_1,_2,_3,_4,...) _4

#define forn3(i,l,r) for (int i = int(l); i < int(r); ++i)
#define forn2(i,n) forn3 (i, 0, n)
#define forn(...) ARG4(__VA_ARGS__, forn3, forn2) (__VA_ARGS__)

#define ford3(i,l,r) for (int i = int(r) - 1; i >= int(l); --i)
#define ford2(i,n) ford3 (i, 0, n)
#define ford(...) ARG4(__VA_ARGS__, ford3, ford2) (__VA_ARGS__)

#define ve vector
#define pa pair
#define tu tuple
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) ((int)(a).size())

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef unsigned char uc;
typedef pa<int, int> pii;
typedef pa<int, ll> pil;
typedef pa<ll, int> pli;
typedef pa<ll, ll> pll;
typedef ve<int> vi;

const ld pi = 3.1415926535897932384626433832795l;

template<typename T> inline auto sqr (T x) -> decltype(x * x) {return x * x;}
template<typename T1, typename T2> inline bool umx (T1& a, T2 b) {if (a < b) {a = b; return 1;} return 0;}
template<typename T1, typename T2> inline bool umn (T1& a, T2 b) {if (b < a) {a = b; return 1;} return 0;}

const int N = 100100;

struct Input {
    int n;
    int m;
    int a[N];
    int b[N];
        
    bool read () {
        if (scanf("%d", &n) != 1)
            return 0;
        cin >> m;
        forn(i, m) {
            scanf("%d%d", &a[i], &b[i]);
        }
        return 1;
    }

    void init (const Input &input) {
        *this = input;
    }
};

struct Data: Input {
    ve<pii> ans;
    bool ok;
        
    void write () {
        if (ok) {
            forn(i, sz(ans)) {
                printf("%d %d\n", ans[i].fs + 1, ans[i].sc + 1);
            }
        } else {
            puts("-1");
        }
    }
    
    virtual void solve () {}
    
    virtual void clear () {
        *this = Data();
    }
};

struct Solution: Data {
    int in[N];
    int out[N]; 

    void solve () {
        ok = 0;
        int sz1 = 0, sz2 = 0;
        forn(i, m) {
            if (b[i] == 1) {
                in[sz1++] = i;
            } else {
                out[sz2++] = i;
            }
        }
        auto cmp = [&](int i, int j) {
            return a[i] < a[j]; 
        };
        sort(in, in + sz1, cmp);
        sort(out, out + sz2, cmp);
        int t2 = 0;
        ans.resize(m);
        forn(idx, sz1) {
            ans[in[idx]] = mp(idx, idx + 1);
            int i = in[idx];
            forn(j, idx) {
                if (t2 == sz2) {
                    break;
                }
                if (a[i] > a[out[t2]]) {
                    return;
                }
                ans[out[t2]] = mp(j, idx + 1);  
                t2++;
            }
        }
        ok = 1;
    }
    
    void clear () {
        *this = Solution();
    }
};

Solution sol;

int main () {
    cout.setf(ios::showpoint | ios::fixed);
    cout.precision(20);
#ifdef SG
    freopen((problemname + ".in").c_str(), "r", stdin);
//  freopen((problemname + ".out").c_str(), "w", stdout);
    while (sol.read()) {
        sol.solve();
        sol.write();
        sol.clear();
    }
#else
    sol.read();
    sol.solve();
    sol.write();
#endif
    return 0;
}
