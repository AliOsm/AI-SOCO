#include <iostream>
#include <fstream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <deque>
#include <algorithm>
#include <array>
using namespace std;

#define REP(i,n) for(int i=0; i<n; ++i)
#define FOR(i,a,b) for(int i=a; i<=b; ++i)
#define FORR(i,a,b) for (int i=a; i>=b; --i)
#define ALL(c) (c).begin(), (c).end()

typedef long long ll;
typedef vector<int> VI;
typedef vector<ll> VL;
typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef pair<int,int> P;
typedef pair<ll,ll> PL;
typedef vector<double> VD;

int main() {
    int n;
    cin >> n;
    VL p(n);
    vector<char> c(n);
    REP(i,n) cin >> p[i] >> c[i];
    VL r, g, b;
    REP(i,n){
        if (c[i] == 'R') r.push_back(p[i]);
        if (c[i] == 'B') b.push_back(p[i]);
        if (c[i] == 'G') g.push_back(p[i]);
    }

    ll ans = 0;

    if (g.size() == 0){
        if (r.size()) ans += r.back() - r[0];
        if (b.size()) ans += b.back() - b[0];
        cout << ans << endl;
        return 0;
    }

    if (r.size() && r[0] < g[0]) ans += g[0] - r[0];
    if (b.size() && b[0] < g[0]) ans += g[0] - b[0];
    if (r.size() && r.back() > g.back()) ans += r.back() - g.back();
    if (b.size() && b.back() > g.back()) ans += b.back() - g.back();

    int m = g.size();
    REP(i,m-1){
        int k = lower_bound(ALL(b), g[i]) - b.begin();
        bool nob = (k >= b.size()) || (b[k] > g[i+1]);
        ll mab = g[i+1] - g[i];
        if (!nob) mab = b[k] - g[i];
        while (k < (int)b.size()-1 && b[k+1] < g[i+1]){
            mab = max(mab, b[k+1] - b[k]);
            k++;
        }
        if (k < b.size()) mab = max(mab, g[i+1] - b[k]);

        k = lower_bound(ALL(r), g[i]) - r.begin();
        bool nor = (k >= r.size()) || (r[k] > g[i+1]);
        ll mar = g[i+1] - g[i];
        if (!nor) mar = r[k] - g[i];
        while (k < (int)r.size()-1 && r[k+1] < g[i+1]){
            mar = max(mar, r[k+1] - r[k]);
            k++;
        }
        if (k < r.size()) mar = max(mar, g[i+1] - r[k]);

        ll di = g[i+1] - g[i];
        // cout << di << " " << mab << " " << mar << endl;
        ans += min(2 * di, 3 * di - mab - mar);
    }
    cout << ans << endl;

    return 0;
}