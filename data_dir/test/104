#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const int N = 2e5 + 5;
const ll INF = 1e18 + 5;
const ll mod = 1e9 + 7;
const int tx[] = {1, -1, 0, 0}, ty[] = {0, 0, 1, -1};
const ll bs = 31;

#define int ll

ll n, m;
ll d[205];

struct matrix {
    ll m[105][105];
    matrix() {
        memset(m, 0, sizeof(m));
    }
    matrix operator * (matrix a) {
        matrix c = matrix();
        for (int i = 0; i <= 100; i++) {
            for (int j = 0; j <= 100; j++) {
                for (int k = 0; k <= 100; k++) {
                    c.m[i][j] = (c.m[i][j] + (m[i][k] * a.m[k][j]) % mod) % mod;
                }
            }
        }
        return c;
    }
};

matrix dp, t;

matrix bpow(matrix a, ll b) {
    matrix res = matrix();
    for (int i = 0; i <= 100; i++)
        res.m[i][i] = 1;
    while (b) {
        if (b % 2)
            res = res * a;
        a = a * a;
        b /= 2;
    }
    return res;
}

main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> m;
    d[0] = 1;
    dp = matrix();
    for (int i = 0; i <= m; i++) {
        d[i + 1] += d[i];
        d[i + m] += d[i];
        dp.m[0][i] = d[i];
    }
    t = matrix();
    for (int i = 0; i < m; i++) {
        t.m[i + 1][i] = 1;
    }
    t.m[m][m] = 1;
    t.m[1][m] = 1;
    matrix ans = dp * bpow(t, max(n - m, 0ll));
    cout << ans.m[0][min(n, m)];
    return 0;
}
