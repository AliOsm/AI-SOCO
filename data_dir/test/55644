#define _CRT_SECURE_NO_WARNINGS
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define N 1000100

int n;
ll seg[2][N * 5];
pair<ll, ll> a[N];


void update(int idx, int i, ll val, int p = 1, int L = 1, int R = n){
	if (L > i || R < i) return;
	if (L == i && R == i){
		seg[idx][p] += val;
		return;
	}

	int mid = (L + R) / 2;
	update(idx, i, val, p * 2, L, mid);
	update(idx, i, val, p * 2 + 1, mid + 1, R);
	seg[idx][p] = seg[idx][p * 2] + seg[idx][p * 2 + 1];
}

ll query(int idx, int i, int j, int p = 1, int L = 1, int R = n){
	if (L > j || R < i) return 0;
	if (L >= i && R <= j) return seg[idx][p];

	int mid = (L + R) / 2;
	ll c1 = query(idx, i, j, p * 2, L, mid);
	ll c2 = query(idx, i, j, p * 2 + 1, mid + 1, R);
	return c1 + c2;
}

int main(){
//	freopen("in.in", "r", stdin);
//	freopen("out.out", "w", stdout);
	ios::sync_with_stdio(0);
	cin.tie();
	cout.tie();
	
	cin >> n;
	for (int i = 1; i <= n; i++) cin >> a[i].first, a[i].second = i;
	sort(a + 1, a + n + 1);

	ll ans = 0;
	for (int i = 1; i <= n; i++){
		ll val = a[i].first, id = a[i].second;
		ll after = query(0, id, n);
		ans += query(1, id, n);
		update(0, id, 1);
		update(1, id, after);
	}
	cout << ans << endl;

	return 0;
}