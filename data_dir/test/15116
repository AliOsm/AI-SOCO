#include <bits/stdc++.h>
using namespace std;

#define int           long long
#define S             second
#define F             first
#define pb            push_back
#define B(c)          (c).begin()
#define E(c)          (c).end()
#define all(c)        (c).begin(),(c).end()
#define rall(c)       (c).rbegin(),(c).rend() 
#define lb            lower_bound
#define si(c)         (int)((c).size())
#define lcm(a, b)      (a * (b / __gcd(a,b)))  
#define inf           (int)(1e9)
#define endl          '\n'
#define pow(x, n)     (int)(pow(x, n))
#define mp            make_pair
#define tp            template
#define ty            typename

typedef vector<int>                           vi;
typedef pair<int,int>                         pii;
typedef vector<pii>                           vpi;
typedef priority_queue<pii, vector<pii>, greater<pii> > pq;

clock_t start;
mt19937_64 rng(chrono::system_clock::now().time_since_epoch().count());

tp<ty T1, ty T2> istream& operator>>(istream& in, pair<T1, T2> &q){
    in >> q.F >> q.S; return in;
}
tp<ty T1, ty T2> ostream& operator<<(ostream& out, pair<T1, T2> &q){
    out << q.F << " " << q.S; return out;
}
tp< ty T1, ty T2> pair<T1, T2> operator+(pair<T1, T2> p1, pair<T1, T2> p2){
    return {p1.F+p2.F, p1.S+p2.S};
}
tp< ty T1, ty T2> pair<T1, T2> operator-(pair<T1, T2> p1, pair<T1, T2> p2){
    return {p1.F-p2.F, p1.S-p2.S};
}
const int MOD = 1e9+7;

inline  void normal(int &a) { a = (a+MOD)%MOD; }
inline  int modMul(int a, int b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a*b)%MOD; }
inline  int modAdd(int a, int b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a+b)%MOD; }
inline  int modSub(int a, int b) { a %= MOD, b %= MOD; normal(a), normal(b); a -= b; normal(a); return a; }
inline  int modPow(int b, int p) { int r = 1; while(p) { if(p&1) r = modMul(r, b); b = modMul(b, b); p >>= 1; } return r; }
inline  int modInv(int a) { return modPow(a, MOD-2); }
inline  int modDiv(int a,int b) { return modMul(a, modInv(b)); }

const int N = 5e3+10;

class Hash{
public:
    static int p1, p2;
    static int pp1[N], pp2[N];
    static int mm1[N], mm2[N];
    static bool pcdone;

    vector<int> h1, h2;

    static void precalc(){
        if(pcdone)return ;
        pcdone = 1;
        p1 = 937, p2 = 991;
        pp1[0] = 1;//pp2[0] = 1;
        for (int i = 1; i < N; ++i){
            pp1[i] = (pp1[i-1]*p1)%MOD;
            //pp2[i] = (pp2[i-1]*p2)%MOD;
        }
        for (int i = 0; i < N; ++i){
            mm1[i] = modInv(pp1[i]);
            //mm2[i] = modInv(pp2[i]);
        }
    }
    void build(string s){
        precalc();
        h1.assign(si(s), 0);
        //h2.assign(si(s), 0);
        h1[0] = pp1[0]*s[0];
        //h2[0] = pp2[0]*s[0];
        for (int i = 1; i < si(s); ++i) {
            h1[i] = (h1[i-1]+pp1[i]*s[i])%MOD;
            //h2[i] = (h2[i-1]+pp2[i]*s[i])%MOD;
        }
    }
    int subhash(int l,int r){
        if(l < 0||r >= si(h1))return -2;
        if(r < l)return -1;
        if(l == 0)return h1[r];
        int hash1=0,hash2=0;
        hash1 = (h1[r]-h1[l-1]+MOD)*mm1[l]%MOD;
        //hash2 = (h2[r]-h2[l-1]+MOD)*mm2[l]%MOD;
        return hash1;
    }

    int subbhash(int l1, int r1, int l2, int r2){
        int ff = subhash(l1, r1);
        int rr = subhash(l2, r2);
        rr = modMul(rr, pp1[r1+1]);
        ff = modAdd(ff, rr);
        //ff.S = modAdd(ff.S, rr.S);
        return ff;
    }
}hhf, hhr;

int Hash::p1, Hash::p2;
int Hash::pp1[N], Hash::pp2[N];
int Hash::mm1[N],Hash::mm2[N];
bool Hash::pcdone;


void solve(){  
    string sss, r;
    cin >> sss;
    r = sss;
    reverse(all(r));
    hhf.build(sss);
    hhr.build(r);
    int n = si(sss);
    int s = 2, e = n, i1 = 0, j1 = n, ans = 1;
    for(int i  = 0; i < n; i++){
        for(int j = i+1; j < n; j++){
            if(ans >= i+1+(n-j))continue;
            int ff = hhf.subbhash(0, i, j, n-1);
            int rr = hhr.subbhash(0, n-1-j, n-i-1, n-1);
            if(ff == rr  && ans < i+1+(n-j)){
                ans = i+1+n-j;
                i1 = i, j1 = j;
            }
        }
        if(ans >= i+1)continue;
        int ff = hhf.subhash(0, i);
        int rr = hhr.subhash(n-i-1, n-1);
        if(ff == rr && ans < i+1){
            ans = i+1;
            i1 = i, j1 = n;
        }
        ff = hhr.subhash(0, i);
        rr = hhf.subhash(n-i-1, n-1);
        if(ff == rr && ans < i+1){
            ans = i+1;
            i1 = -1, j1 = n-i-1;
        }
    }
    for(int ii = 0; ii <= i1; ii++){
        cout << sss[ii];
    }
    for(int ii = j1; ii < n; ii++){
        cout << sss[ii];
    }cout << endl;
}

signed main(){

    ios_base::sync_with_stdio(0); 
    cin.tie(0); cout.tie(0);   

    int t = 1;
    start = clock(); 

    cout << fixed << setprecision(15);

    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
    freopen("error.txt", "w", stderr);
    #endif
    
    cin >> t;

    while(t--){
        solve();
    }

    double time_taken = double(clock() - start) / double(CLOCKS_PER_SEC); 
    cerr << time_taken;
    return 0;
}