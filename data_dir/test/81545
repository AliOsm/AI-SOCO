#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>
#include <bitset>
 
using namespace std;
 
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define forn1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)((a).size())
#define mp make_pair
#define pb push_back
#define X first
#define Y second
#define x first
#define y second
#define y1 __y1
#define sqr(x) ((x) * (x))
 
typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
 
const int INF = (int)(1e9);
const li INF64 = (li)(INF) * (li)(INF);
const ld eps = 1e-9;
const ld pi = ld(3.1415926535897932384626433832795);
 
bool in(int i, int j, int n, int m)
{
    return i >= 1 && i <= n && j >= 1 && j <= m;
}
 
inline int myrand()
{
    return (rand() ^ (rand() << 15));
}
 
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};
 
const int N = 5e5 + 555;

string a, b, c;
li can[256];

inline bool read()
{
    if(!(cin >> a >> b >> c))
        return false;
    return true;
}

li cntA[256], cntB[256], cntC[256];

inline void solve()
{
    forn(i, sz(a))
        cntA[a[i]]++;
    forn(i, sz(b))
        cntB[b[i]]++;
    forn(i, sz(c))
        cntC[c[i]]++;

    int ans = 0, cnt1 = 0, cnt2 = 0;
    cerr << "WTF" << endl;

    for(int c1 = 0; c1 <= 100000; c1++)
    {
        bool ok = true;
        //int* can = new int[256];
        forn(i, 256)
            can[i] = 0;
        forn(j, 256)
        {
            can[j] = cntA[j] - cntB[j] * 1LL * c1;
            if(can[j] < 0)
            {
                ok = false;
            }
        }

        if(!ok)
        {
            //delete can;
            //can.swap(vector<int>());
            continue;
        }

        li mn = INF;
        bool was = false;
        forn(j, 256)
        {
            if(cntC[j] > 0)
            {
                was = true;
                mn = min(mn, can[j] / cntC[j]);
            }
        }

        while(!was);

        if(c1 + mn > ans)
        {
            ans = c1 + mn, cnt1 = c1, cnt2 = mn;
        }

        //delete can;
        //can.swap(vector<int>());
    }

    cerr << ans << ' ' << cnt1 << ' ' << cnt2 << endl;

    string res;
    res.erase();

    assert(cnt1 * 1LL * sz(b) + cnt2 * 1LL * sz(c) <= li(sz(a)));

    forn(i, cnt1)
        res += b;
    forn(i, cnt2)
        res += c;

    if(a == string(100000, 'a'))
    {
        //cout << ans << ' ' << cnt1 << ' ' << cnt2 << endl;
    }

    //assert(cnt1 * 1LL * sz(b) + cnt2 * 1LL * sz(c) <= li(sz(a)));

    multiset<char> ss;
    forn(i, sz(a))
        ss.insert(a[i]);
    forn(i, sz(res))
        ss.erase(ss.find(res[i]));

    for(multiset<char>::iterator it = ss.begin(); it != ss.end(); it++)
        res += *it;
    cout << res << endl;

    return;
}

int main() {
#ifdef _DEBUG
    assert(freopen("input.txt", "rt", stdin));
    assert(freopen("output.txt", "wt", stdout));
#endif

    cout << setprecision(10) << fixed;
    cerr << setprecision(10) << fixed;

    srand(int(time(NULL)));

    assert(read());
    solve();

#ifdef _DEBUG
    cerr << "TIME == " << clock() << " ms" << endl;
#endif
    return 0;
}