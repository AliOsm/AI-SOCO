#include<bits/stdc++.h>
using namespace std;

const int N = 2000 + 20, mod = 1e9 + 7;
int a[N], n, d, ans;
vector<int> adj[N];

int sum(int a, int b) {
    return ((1LL * a + b) % mod + mod) % mod;
}

int mul(int a, int b) {
    return ((1LL * a * b) % mod + mod) % mod;
}

bool cmp(int i, int j) {
    return (a[i] ^ a[j]? a[i] < a[j]: i < j);
}

int dfs(int v, int mn, int par = -1) {
    int res = 1;
    for (auto u: adj[v])
        if (u ^ par)
            if (cmp(mn, u) && a[u] <= a[mn] + d)
                res = mul(res, sum(dfs(u, mn, v), 1));
    return res;
}

int main() {
    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
    cin >> d >> n;
    for (int i = 0; i < n; i++)
        cin >> a[i];
    for (int i = 1; i < n; i++) {
        int u, v;
        cin >> u >> v;
        adj[--u].push_back(--v);
        adj[v].push_back(u);
    }
    for (int i = 0; i < n; i++)
        ans = sum(ans, dfs(i, i));
    return cout << ans << "\n", 0;
}