#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <set>
#include <string>
#include <cmath>
#include <algorithm>
#include <assert.h>
#include <memory.h>
#include <string.h>
#include <complex>
#include <queue>
#include <cstdlib>
#include <ctime>
using namespace std;

#define ll long long
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x).size()


int mas[1000100];
int xorsum[1000100];

int ans[1000100];

vector<pair<pair<int, int>, int> > qu;

map<int, vector<int>> st;

int fen[1000100];

int sum (int r)
{
  int result = 0;
  for (; r >= 0; r = (r & (r+1)) - 1)
    result ^=fen[r];
  return result;
}

void inc (int i, int delta)
{
  for (; i < 1000100; i = (i | (i+1)))
    fen[i]^= delta;
}

int sum (int l, int r)
{
  return sum (r) ^ sum (l-1);
}

int main() {
  //freopen("input.txt", "rt", stdin);
  //freopen("output.txt", "wt", stdout);

  int n;
  scanf("%d", &n);
  for(int i = 1; i <= n; i++) {
    scanf("%d", &mas[i]);
    //mas[i] = i * 10 + 3;
    st[mas[i]].pb(i);
    xorsum[i] = xorsum[i-1] ^ mas[i];
  }
  for (auto it = st.begin(); it != st.end(); it++) {
    reverse(it->second.begin(), it->second.end());
    inc(it->second.back(), it->first);
  }

  int m = 1000000;
  scanf("%d", &m);
  qu.resize(m);
  for(int i = 0; i < m; i++) {
    scanf("%d %d", &qu[i].first.first, &qu[i].first.second);
    //qu[i].first.first = min(n, i + 1);
    //qu[i].first.second = n;
    qu[i].second = i;
  }

  sort(qu.begin(), qu.end());

  int p = 1;

  for(int i = 0; i < m; i++) {
    int l = qu[i].first.first;
    int r = qu[i].first.second;
    while (p < l) {
      auto it = st.find(mas[p]);
      it->second.pop_back();
      if(!it->second.empty()) {
        inc(it->second.back(), it->first);
      }
      p++;
    }
    int idx = qu[i].second;
    ans[idx] = sum(l, r) ^ xorsum[r] ^ xorsum[l-1];
  }
  for(int i = 0; i < m; i++) {
    printf("%d\n", ans[i]);
  }

  return 0;
}
