// Charan Sriramula

#include<bits/stdc++.h>
using namespace std;
typedef long double ld;
typedef long long int ll;

const ll logx=30;
const ll N=1e5+5;
const ll INF=1e18+5;
const ll mod=1e9+7;
const double PI = 3.14159265358979323846;

#define ints(n) scanf("%d",&n)
#define intp(n) printf("%d\n",n)
#define longs(n) scanf("%intd",&n)
#define longp(n) printf("%intd\n",n)

inline ll mul(ll a, ll b){ return (a * 1ll * b) % mod; }
inline ll sub(ll a, ll b){ ll c = a - b; if(c < 0) c += mod; return c; }
inline ll add(ll a, ll b){ ll c = a + b; if(c > mod) c -= mod; return c; }

#define f first
#define s second
#define pb(x) push_back(x)
#define pf(x) push_front(x)
#define mp(x,y) make_pair(x,y)
#define GCD(a,b) __gcd((a),(b))
#define all(v) v.begin(),v.end()
#define bits(x) __builtin_popcount(x)
#define LCM(a,b) ((a)*(b))/GCD((a),(b))
#define ms(dp,val) memset(dp,val,sizeof(dp))
#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);
template<typename T> T power(T x,T y,ll m){T ans=1;while(y>0){if(y&1LL) ans=(ans*x)%m;y>>=1ll;x=(x*x)%m;}return ans%m;}

#define trace1(x)                cerr<<#x<<": "<<x<<endl
#define trace2(x, y)             cerr<<#x<<": "<<x<<" | "<<#y<<": "<<y<<endl
#define trace3(x, y, z)          cerr<<#x<<":" <<x<<" | "<<#y<<": "<<y<<" | "<<#z<<": "<<z<<endl
#define trace4(a, b, c, d)       cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl
#define trace5(a, b, c, d, e)    cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<endl
#define trace6(a, b, c, d, e, f) cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<" | "<<#f<<": "<<f<<endl

vector<ll> g[N];
ll n,col[N],dp[N][2];

void DFS(ll cur,ll par)
{
  dp[cur][0]=1-col[cur];
  dp[cur][1]=col[cur];

  for(auto i:g[cur])
  {
    if(i==par){continue;}

    DFS(i,cur);

    // including i

    ll u=dp[cur][0];
    ll v=dp[cur][1];

    dp[cur][0]=dp[cur][1]=0;

    dp[cur][0]+=u*dp[i][0];
    dp[cur][1]+=(v*dp[i][0])+(u*dp[i][1]);

    if(dp[cur][0]>=mod){dp[cur][0]%=mod;}
    if(dp[cur][1]>=mod){dp[cur][1]%=mod;}

    // excluding i

    dp[cur][0]+=u*dp[i][1];
    dp[cur][1]+=v*dp[i][1];

    if(dp[cur][0]>=mod){dp[cur][0]%=mod;}
    if(dp[cur][1]>=mod){dp[cur][1]%=mod;}

  }
}

int main()
{
  cin>>n;
  for(ll i=2;i<=n;i++)
  {
    ll u;
    cin>>u;
    u++;
    g[u].pb(i);
    g[i].pb(u);
  }
  for(ll i=1;i<=n;i++){cin>>col[i];}
  DFS(1,0);
  cout<<dp[1][1]%mod<<endl;
}
