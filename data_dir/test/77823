#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (ll) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <ll, ll> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const ll inf = numeric_limits <ll>::max() >> 1;
const ll mod = 1e9 + 7;
const ll M = 10001;
const ll N = 101;
ll pw[N][N][2];
ll bn[N][N];
ll dp[N][M];
ll n, m, k;

void input() {
    cin >> n >> m >> k;
}

ll fpow(ll b, ll p) {
    ll res = 1;
    ll pow = b;
    while(p) {
        if(p & 1) {
            res *= pow;
            res %= mod;
        }
        pow *= pow;
        pow %= mod;
        p >>= 1;
    }
    return res;
}

void calc_bin() {
    for(ll i = 0; i < N; ++i) {
        for(ll j = 0; j <= i; ++j) {
            if(i == j || !j) {
                bn[i][j] = 1;
                pw[i][j][0] = 
                pw[i][j][1] = 1;
            } else {
                bn[i][j] = (bn[i - 1][j] + bn[i - 1][j - 1]) % mod;
                pw[i][j][0] = fpow(bn[i][j], m / n);
                pw[i][j][1] = fpow(bn[i][j], m / n + 1);
            }
        }
    }
}

ll cal(ll i) {
    if(i < m % n) {
        return 1;
    } else {
        return 0;
    }
}

ll calc(ll i, ll j) {
    if(dp[i][j] != -1) {
        return dp[i][j];
    }
    if(i == n) {
        return !j? 1: 0;
    }
    ll res = 0;
    for(ll k = 0; k <= min(n, j); ++k) {
        res += pw[n][k][cal(i)] * calc(i + 1, j - k) % mod;
        res %= mod;
    }
    return dp[i][j] = res;
}

void solve() {
    calc_bin();
    memset(dp, -1, sizeof dp);
    cout << calc(0, k) << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
