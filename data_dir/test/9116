#include <bits/stdc++.h>
using namespace std;

typedef long long i64;

struct Q
{
    i64 timeact, arrived, type;
    Q(i64 a = 0, i64 b = 0,
      i64 c = 0) : timeact(a), arrived(b), type(c) { }
    bool operator< (const Q & x) const
    {
        if (timeact == x.timeact) {
            if (type == x.type)
                return arrived < x.arrived;
            return type > x.type;
        }
        return timeact < x.timeact;
    }
};

multiset <Q> events;


i64 disp[5];
multiset <
i64> people[5];

i64 ans;

i64 tact, t[4];

void adjust(Q x)
{
    disp[x.type]++;
    if (x.type == 3) {
        ans = max(ans, x.timeact - x.arrived + 1);
        return;
    }
    people[x.type + 1].insert(x.arrived);
}

void mk_sett()
{
    for (
         i64 i(1); i <= 3; i++) {
        if (disp[i] && !people[i].empty()) {
            disp[i]--;
            events.insert((Q){ tact + t[i], *people[i].begin(), i });
            people[i].erase(people[i].begin());
        }
    }
}



int main()
{
    ios_base :: sync_with_stdio(0);
    cin.tie(0);


    i64 n;
    cin >> disp[1] >> disp[2] >> disp[3] >> t[1] >> t[2] >> t[3] >> n;

    while (n--) {

        i64 x;
        cin >> x;
        events.insert((Q){ x, x, 0 });
    }

    while (!events.empty()) {
        tact = events.begin()->timeact;
        adjust(*events.begin());
        events.erase(events.begin());
        mk_sett();
    }

    cout << ans - 1ll;

    return 0;
}
