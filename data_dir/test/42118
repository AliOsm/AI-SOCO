#include <cstdio>
#include <cstring>
#include <cmath>
#include <stack>
#include <algorithm>
using namespace std;
typedef long long LL;
#define INF 0x3f3f3f3f
#define eps 1e-10
#define MAXN 200010

const int MOD = 1e9+7;
int n, a[MAXN], cnt, dfn[MAXN], low[MAXN];
bool instack[MAXN];
stack<int> s;
LL ans;

LL Sol(int x) {
	if (x == 1) return 2;
	LL res = 1, tmp = 2;
	while (x > 0) {
		if (x&1) res = res * tmp % MOD;
		tmp = tmp * tmp % MOD;
		x >>= 1;
	}
	return res - 2;
}

void Tarjan(int x) {
	dfn[x] = low[x] = cnt++; instack[x] = 1; s.push(x);
	if (dfn[a[x]] == -1) {
		Tarjan(a[x]);
		low[x] = min(low[x], low[a[x]]);
	}
	else if (instack[a[x]])
		low[x] = min(low[x], dfn[a[x]]);
	if (low[x] == dfn[x]) {
		int A, tmp = 0;
		do {
			A = s.top(); s.pop();
			instack[A] = 0;
			tmp++;
		} while (A != x);
		ans = ans * Sol(tmp) % MOD;
	}
}

int main() {
	memset(dfn, -1, sizeof(dfn));
	memset(instack, 0, sizeof(instack));
	scanf("%d", &n);
	for (int i = 1; i <= n; i++)
		scanf("%d", &a[i]);
	cnt = 0; ans = 1;
	for (int i = 1; i <= n; i++)
		if (dfn[i] == -1) Tarjan(i);
	ans = (ans%MOD+MOD) % MOD;
	printf("%I64d\n", ans);
	return 0;
}
