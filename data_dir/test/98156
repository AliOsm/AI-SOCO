// g++ -std=c++14 -O2 -Wall -Wextra a.cpp
//In The Name Of God :
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
#include <bits/stdc++.h>
using namespace std ;
//using namespace __gnu_pbds;
#define X first 
#define Y second
//#define int  long long
typedef long long ll ;
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define ALL(x) (x).begin(),(x).end()
#define size(x) ((int)((x).size()))
typedef pair < int , int > pii ; 
typedef pair < pii , int > pii_i ;
typedef pair < int , pii > pi_ii ;
typedef pair < pii , pii > pii_ii ;
//#define ordered_set(TYPE) tree<TYPE, null_type, less<TYPE>, rb_tree_tag, tree_order_statistics_node_update>
//#define "%I64d" "%
const int maxL = 20 ;
//const int inf = 1e9+100 ;
typedef long long ll ;
int mod = 1e9+7 ;
ll mod1 = 1e9+7 ;
int inf = 1e12 ;
int linf = 1e18 ;
typedef long double ld ;
const int maxn = 1e5+100 ;
const int maxk = 210 ;
const int baze = 330 ;
#define next rerekewlrejgtlilrelfd
int n , q , ar [ maxn ] , hlp [ maxn ] ; 
int nxt [ maxn*10 ] [ 26 ] , eof = 1 ;
int f [ maxn*10 ] ;

void build ( )
{
  int chiz [ eof+100 ];
  int st = 0 , en = 1 ;
  chiz [ 0 ] = 0 ;
  while ( st < en )
    {
      int v = chiz [ st ++ ] ;
      for ( int i = 0 ; i < 26 ; i ++ )
	if ( nxt [ v ] [ i ] )
	  {
	    f [ nxt [ v ] [ i ] ] = !!v*nxt [ f [ v ] ] [ i ] ;
	    chiz [ en++ ] = nxt [ v ] [ i ] ;
	  }
	else
	  nxt [ v ] [ i ] = nxt [ f [ v ] ] [ i ] ;
    } 
       
} 

int add ( const string &x )
{
  int cur = 0 ;
  for ( char y : x )
    if ( nxt [ cur ] [ y-'a' ] )
      cur = nxt [ cur ] [ y-'a' ] ;
    else
      cur = nxt [ cur ] [ y-'a' ] = eof ++ ;
  return cur ; 
}

namespace segment
{
  int data [ 4 * (maxn*10) ] ;
  int get ( int pos , int st = 0 , int en = eof , int id = 1 )
  {
    if ( en - st < 2 )
      return data [ id ] ;
    int mid = (st+en)>>1 ;
    if ( pos < mid )
      return data [ id ] + get ( pos , st , mid , id<<1 ) ;
    else
      return data [ id ] + get ( pos , mid , en , id<<1^1 ) ;
  } 

  void add ( int l , int r , int val , int st = 0 , int en = eof , int id = 1 )
  { 
    if ( l <= st && en <= r )
      {
	data [ id ] += val ;
	return ;
      }
    if ( en <= l || r <= st )
      return ;
    int mid = (st+en)>>1 ;
    add ( l , r , val , st , mid , id<<1 ) ;
    add ( l , r , val , mid , en , id<<1^1 ) ; 
  }
}
string s [ maxn ] ;
vector < int > vc [ maxn * 10 ] ;
#define time sdfghjhgwjkhfdxcvbnhytfd
#define end sdfghjhgwjkhfdxcvbnhytf
int time = 0 ;
int start [ maxn * 10 ] ;
int end [ maxn * 10 ] ;
bitset < maxn > mark ; 

void dfs ( int v )
{
  start [ v ] = time ++ ;
  for ( int u : vc [ v ] )
    dfs ( u ) ;
  end [ v ] = time ;
} 

int aaah ( string t )
{
  int ret = 0 ;
  for ( auto x : t )
    ret *= 10 ,
      ret += x - '0' ;
  return ret ;
}

char type [ maxn ] ;
string t [ maxn ] ;

int32_t main ( )
{
  fast ;
  cin >> q >> n ;
  for ( int i = 0 ; i < n ; i ++ )
    {
      string s ; 
      cin >> s ;
      ar [ i ] = add ( s ) ;
    }
  for ( int i = 0 ; i < q ; i ++ )
    {
      string goh ;
      cin >> goh ;
      type [ i ] = goh [ 0 ] ;
      goh = goh . substr ( 1 ) ;
      if ( type [ i ] == '?' ) 
	t [ i ] = goh ; 
      else 
	hlp [ i ] = aaah ( goh ) - 1 ; 
    }
  //for ( int i = 0 ; i < q ; i ++)
  //cout << type [ i ] << ' '  << hlp [ i ] << ' '<<t [ i ] << endl ;
  build ( ) ; 
  for ( int i = 1 ; i < eof ; i ++)
    vc [ f [ i ] ] . push_back ( i ) ;
  dfs ( 0 ) ;
  //for ( int i = 0 ; i < n ; i ++ )
  //cout << ar [ i ] << ' ' ;
  //cout << endl ;
  for ( int x = 0 ; x < n ; x ++ )
    segment::add ( start [ ar [ x ] ] , end [ ar [ x ] ] , +1 ) ;
  mark.set();
  
  for ( int i = 0 ; i < q ; i ++ )
    {
      if ( type [ i ] == '?' )
	{
	  int cur = 0 ;
	  int ret = 0 ;
	  for ( char y : t [ i ] )
	    {
	      cur = nxt [ cur ] [ y-'a' ] ;
	      ret += segment::get ( start[cur] ) ;
	    }
	  cout << ret << endl ;
	} 
      else if ( type [ i ] == '+' )
	if ( mark [ hlp [ i ] ] == 0 )
	  segment::add ( start [ ar [ hlp [ i ] ] ] , end [ ar [ hlp [ i ] ] ] , +1 ) , mark [ hlp [ i ] ] = 1;
	else
	  ;
      else
	if ( mark [ hlp [ i ] ] == 1 )
	  segment::add ( start [ ar [ hlp [ i ] ] ] , end [ ar [ hlp [ i ] ] ] , -1 ) , mark [ hlp [ i ] ] = 0 ;
	else
	  ;
    } 
} 
