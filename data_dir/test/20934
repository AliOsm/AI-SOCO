// Charan Sriramula

#include<bits/stdc++.h>
using namespace std;
typedef long double ld;
typedef long long int ll;

const ll logx=5;
const ll N=2e5+5;
const ll INF=1e18+5;
const ll mod=1e9+7;
const double PI = 3.14159265358979323846;

#define ints(n) scanf("%d",&n)
#define intp(n) printf("%d\n",n)
#define longs(n) scanf("%intd",&n)
#define longp(n) printf("%intd\n",n)

inline ll mul(ll a, ll b){ return (a * 1ll * b) % mod; }
inline ll sub(ll a, ll b){ ll c = a - b; if(c < 0) c += mod; return c; }
inline ll add(ll a, ll b){ ll c = a + b; if(c > mod) c -= mod; return c; }

#define f first
#define s second
#define pb(x) push_back(x)
#define pf(x) push_front(x)
#define mp(x,y) make_pair(x,y)
#define GCD(a,b) __gcd((a),(b))
#define all(v) v.begin(),v.end()
#define bits(x) __builtin_popcount(x)
#define LCM(a,b) ((a)*(b))/GCD((a),(b))
#define ms(dp,val) memset(dp,val,sizeof(dp))
#define fast ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
template<typename T> T power(T x,T y,ll m){T ans=1;while(y>0){if(y&1LL) ans=(ans*x)%m;y>>=1ll;x=(x*x)%m;}return ans%m;}

#define trace1(x)                cerr<<#x<<": "<<x<<endl
#define trace2(x, y)             cerr<<#x<<": "<<x<<" | "<<#y<<": "<<y<<endl
#define trace3(x, y, z)          cerr<<#x<<":" <<x<<" | "<<#y<<": "<<y<<" | "<<#z<<": "<<z<<endl
#define trace4(a, b, c, d)       cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl
#define trace5(a, b, c, d, e)    cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<endl
#define trace6(a, b, c, d, e, f) cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<" | "<<#f<<": "<<f<<endl

pair<ll,ll> p[N];
vector<pair<ll,ll> > g[N];
ll n,m,yes,lev[N],vis[N],col[N],ans[N];

void DFS(ll cur,ll par)
{
  col[cur]=col[par]^1;
  vis[cur]=1;
  for(auto i:g[cur])
  {
    if(vis[i.f])
    {
      if(i.f!=par&&col[i.f]==col[cur]){yes=1;}
    }
    else{DFS(i.f,cur);}
  }
}

void BFS()
{
  queue<ll> q;
  q.push(1);
  vis[1]=1;
  col[1]=0;
  while(q.size())
  {
    ll cur=q.front();q.pop();
    for(auto i:g[cur])
    {
      if(vis[i.f]){continue;}
      vis[i.f]=1;
      q.push(i.f);
      if(col[cur]==0)
      {
        ll idx=i.s;
        if(p[idx].f==cur){ans[idx]=0;}
        else{ans[idx]=1;}
      }
      else
      {
        ll idx=i.s;
        if(p[idx].f==cur){ans[idx]=1;}
        else{ans[idx]=0;}
        //ans[idx]=1;
      }
      col[i.f]=col[cur]^1;
    }
  }
}

int main()
{
  fast;
  cin>>n>>m;
  for(ll i=0;i<m;i++)
  {
    ll u,v;
    cin>>u>>v;
    p[i].f=u;p[i].s=v;
    g[u].pb(mp(v,i));
    g[v].pb(mp(u,i));
  }
  DFS(1,0);
  if(yes){cout<<"NO"<<endl;exit(0);}
  ms(vis,0);
  ms(col,0);
  BFS();
  //cout<<endl;
  cout<<"YES"<<endl;
  for(ll i=0;i<m;i++)
  {
    if(col[p[i].f]==0){ans[i]=0;}
    else{ans[i]=1;}
  }
  for(ll i=0;i<m;i++){cout<<ans[i];}
}
