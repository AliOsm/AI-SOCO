#include <bits/stdc++.h>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

typedef long long ll;
typedef unsigned long long ull;
typedef complex<double> point;
#define X real()
#define Y imag()
#define M_PI 3.1415926535897932384626433832795
#define EPS 1e-12
#define vec(a,b) ((b)-(a))
#define length(v) (hypot((v).Y,(v).X))
#define angle(v) (atan2((v).Y,(v).X))

void fastInOut();

const int N = 100000;
int n;
double v, T, totDis, r;
point center;
vector<pair<double, double> > rngs;

double fixAng(double ang) {
	return fmod(fmod(ang, 2.0 * M_PI) + 2.0 * M_PI, 2.0 * M_PI);
}

bool solveQuadEqu(double a, double b, double c, double &v) {
	double prt1 = b * b - 4 * a * c;
	if (prt1 < 0.0)
		return 0;
	double v1 = (-b + sqrt(prt1)) / (2.0 * a);
	double v2 = (-b - sqrt(prt1)) / (2.0 * a);
	if (min(v1, v2) < 0.0)
		v = max(v1, v2);
	else
		v = min(v1, v2);
	return (v >= 0.0);
}

bool addCircleToRng() {
	double ang = 0.0, ang1, ang2, val;
	double distCircle = length(center), a = 1.0, b = -2.0 * distCircle, c = distCircle * distCircle - r * r;
	if (center.X * center.X + center.Y * center.Y <= r * r)
		return 1;
	if (distCircle - r > totDis)
		return 0;
	for (double sz = atan2(r, sqrt(c)) / 2.0; sz >= EPS; sz /= 2.0)
		if (solveQuadEqu(a, b * cos(ang + sz), c, val) && val <= totDis)
			ang += sz;
	ang1 = fixAng(angle(center) + ang), ang2 = fixAng(angle(center) - ang);
	if (ang1 > ang2)
		swap(ang1, ang2);
	if (ang2 - ang1 > M_PI) {
		rngs.push_back(make_pair(ang2, 2.0 * M_PI));
		rngs.push_back(make_pair(0.0, ang1));
	} else
		rngs.push_back(make_pair(ang1, ang2));
	return 0;
}

double getRet() {
	sort(rngs.begin(), rngs.end());
	double tot = 0.0, st = 0.0;
	for (int i = 0; i < int(rngs.size()); ++i) {
	     st = max(st, rngs[i].first);
	     tot += max(0.0, rngs[i].second - st);
	     st = max(st, rngs[i].second);
	}
	return tot / (2.0 * M_PI);
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#endif
	fastInOut(), cout << fixed << setprecision(11);
	int x, y;
	cin >> x >> y >> v >> T >> n, totDis = v * T;
	point cpySt = point(x, y);
	bool is = 0;
	for (int i = 0; i < n; ++i)
		cin >> x >> y >> r, center = point(x, y), center = vec(cpySt, center), is |= addCircleToRng();
	cout << (is ? 1.0 : getRet()) << "\n";
	return 0;
}

void fastInOut() {
	ios_base::sync_with_stdio(0);
	cin.tie(NULL), cout.tie(NULL);
}