/*input
4 5
asdf


*/

#include <iostream>
#include <iomanip>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include <algorithm>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> PII;
typedef pair<ll , ll> PLL;
typedef long double ld;

#define pb push_back
#define all(c) c.begin(),c.end()
#define allr(c) c.rbegin(),c.rend()
int mod = 1000000007;
const int INF = 1034567891;
const ll LL_INF = 1234567890123456789ll;
#define PI 3.14159265
#define endl '\n'
#define F first
#define S second
#define debug(x) cout << #x << " = " << x << endl;
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cout << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

#define out(container) for (auto it : container) cout << it << " "; cout << endl;


template < typename T > T GCD(T a, T b)            { ll t; while(a) { t = a; a = b % a; b = t; } return b; }
template < typename T > string toString(T a)       { return to_string(a); }
template < typename T > void toInt(string s, T &x) { stringstream str(s); str >> x;}
inline int add(int x, int y){ x += y; if(x >= mod) x -= mod; return x;}
inline int sub(int x, int y){ x -= y; if(x < 0) x += mod; return x;}
inline int mul(int x, int y){ return (x * 1ll * y) % mod;}
inline int powr(int a, ll b){
  int x = 1 % mod;
  while(b){
    if(b & 1) x = mul(x, a);
    a = mul(a, a);
    b >>= 1;
  }
  return x;
}
inline int inv(int a){ return powr(a, mod - 2);}

ll solution(vector<int>& A, int k) 
{ 
    // seiz of the vector 
    // which does is constant 
    const int N = A.size(); 
  
    // bases cases 
    if (N < k || N < 1 || k < 1) 
        return 0; 
    if (N == k) 
        return 1; 
  
    // Prepare arrays for recursion 
    vector<ll> v1(N, 0); 
    vector<ll> v2(N, 0); 
    vector<ll> v3(N, 0); 
  
    // initiate separately for k = 1 
    // intiate the last element 
    v2[N - 1] = 1; 
    v3[A[N - 1] - 1] = 1; 
  
    // initiate all other elements of k = 1 
    for (int i = N - 2; i >= 0; i--) { 
  
        // initialize the front element 
        // to vector v2 
        v2[i] = v2[i + 1]; 
  
        // if element v[a[i]-1] is 0 
        // then increment it in vector v2 
        if (v3[A[i] - 1] == 0) { 
            v2[i]++; 
            v3[A[i] - 1] = 1; 
        } 
    } 
  
    // iterate for all possible values of K 
    for (int j = 1; j < k; j++) { 
  
        // fill the vectors with 0 
        fill(v3.begin(), v3.end(), 0); 
  
        // fill(v1.begin(), v1.end(), 0) 
        // the last must be 0 as from last no unique 
        // subarray can be formed 
        v1[N - 1] = 0; 
  
        // Iterate for all index from which unique 
        // subsequences can be formed 
        for (int i = N - 2; i >= 0; i--) { 
  
            // add the number of subsequence formed 
            // from the next index 
            v1[i] = v1[i + 1]; 
  
            // start with combinations on the 
            // next index 
            v1[i] = v1[i] + v2[i + 1]; 
  
            // Remove the elements which have 
            // already been counted 
            v1[i] = v1[i] - v3[A[i] - 1]; 
  
            // Update the number used 
            v3[A[i] - 1] = v2[i + 1]; 
        } 
  
        // prepare the next iteration 
        // by filling v2 in v1 
        v2 = v1; 
    } 
  
    // last answer is stored in v1 
    return v1[0]; 
} 

ll solve(int a[], int n, int k) 
{ 
    vector<int> v; 
  
    // fill the vector with a[] 
    v.assign(a, a + n); 
  
    // Function call to print the count 
    // of unique susequences of size K 
    return solution(v, k); 
} 

int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);  

  int n, k;
  cin >> n >> k;
  string str;
  cin >> str;
  int arr[n];
  map <int, int> mp;
  int cur = 0;
  for (int i = 0; i < n; i++) {
    int x = (int)str[i] - 96;
    if (mp[x] == 0) {
      mp[x] = ++cur;
      x = cur;
    } else {
      x = mp[x];
    }
    arr[i] = x;
  }
  //out(arr);
  ll ans = 0;
  for (int i = n; i >= 0 && k; i--) {
    ll cnt = solve(arr, n, i);
    if (i == 1) {
      cnt = cur;
    }
    if (i == 0) {
      cnt = 1;
    }
    //debug(cnt);
    if (k >= cnt) {
      ans += cnt * 1ll * (n - i);
      k -= cnt;
    }
    else {
      ans += k * 1ll * (n - i);
      k = 0;
    }
    //trace(ans, k);
  }
  cout << (k == 0 ? ans : -1) << endl;


  return 0;
}