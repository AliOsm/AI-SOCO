#include <bits/stdc++.h>

#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define foreach(it, v) for(auto it=(v).begin(); it != (v).end(); ++it)

#define _ ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define __ freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);

#define tr(...) cout<<__FUNCTION__<<' '<<__LINE__<<" = ";trace(#__VA_ARGS__, __VA_ARGS__)

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;

template<typename S, typename T> 
ostream& operator<<(ostream& out,pair<S,T> const& p){out<<'('<<p.fi<<", "<<p.se<<')';return out;}

template<typename T>
ostream& operator<<(ostream& out,vector<T> const& v){
int l=v.size();for(int i=0;i<l-1;i++)out<<v[i]<<' ';if(l>0)out<<v[l-1];return out;}

template<typename T>
void trace(const char* name, T&& arg1){cout<<name<<" : "<<arg1<<endl;}

template<typename T, typename... Args>
void trace(const char* names, T&& arg1, Args&&... args){
const char* comma = strchr(names + 1, ',');cout.write(names, comma-names)<<" : "<<arg1<<" | ";trace(comma+1,args...);}

const int N = 500100;

int a[N];
int par1[N];
int par2[N];

int main(){ _
  int n;
  cin >> n;
  
  for(int i = 0; i <= n; i++){
    cin >> a[i];
  }
  
  for(int i = 1; i <= n; i++){
    if(a[i-1] > 1 and a[i] > 1){
      cout << "ambiguous" << endl;
      
      int prev = 1;
      int cnt = 1;
      for(int j = 1; j < i; j++){
        for(int k = 0; k < a[j]; k++){
          ++cnt;
          par1[cnt] = par2[cnt] = prev;
        }
        prev = cnt;
      }
      
      ++cnt;
      par1[cnt] = prev;
      par2[cnt] = prev-1;
      
      for(int k = 1; k < a[i]; k++){
        ++cnt;
        par1[cnt] = par2[cnt] = prev;     
      }
      
      prev = cnt;
      for(int j = i+1; j <= n; j++){
        for(int k = 0; k < a[j]; k++){
          ++cnt;
          par1[cnt] = par2[cnt] = prev;
        }
        prev = cnt;
      }
      
      for(int i = 1; i <= cnt; i++){
        cout << par1[i] << ' ';
      }
      cout << endl;
      
      for(int i = 1; i <= cnt; i++){
        cout << par2[i] << ' ';
      }
      cout << endl;
      
      
      return 0;
    }
  }
  
  cout << "perfect" << endl;
  
  return 0;
}
