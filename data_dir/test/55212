#include <iostream>
#include <vector>
#include <cstdio>
#include <queue>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <cmath>
#include <complex>
#include <set>
#include <cstring>
#include <numeric>
#include <ctime>
#include <map>
using namespace std;
typedef long long Long;
typedef long double Double;
typedef long long Long;
typedef vector<int> VI;
typedef vector<Long> VL;
typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef pair<Long, Long> PLL;

struct DisjointSet
{
  vector<int> P; // if < 0 then negative size, else parentId
  DisjointSet(int N) : P(N, -1) {}
  int find(int x) {
    return P[x] < 0 ? x : (P[x] = find(P[x]));
  }
  bool join(int x,int y) {
    if((x = find(x)) == (y = find(y))) return false;
    if(P[y] < P[x]) swap(x,y);
    P[x] += P[y];
    P[y] = x;
    return true;
  }
};

struct LCAWithDist {
  int N;
  VVI T;
  VVI adj;
  VI L;
  VVL D;
  VVL dis;
  LCAWithDist(int N) : N(N), T(20, VI(N, -1)), D(20, VL(N)), adj(N), dis(N), L(N) { }
  void addEdge(int u, int v, Long c) {
    adj[u].push_back(v);
    dis[u].push_back(c);
    adj[v].push_back(u);
    dis[v].push_back(c);
  }
  
  void build() {
    dfs(0);
    for (int i = 1; i < 20; ++i) {
      for (int j = 0; j < N; ++j) {
        if (T[i-1][j] != -1) {
          T[i][j] = T[i-1][ T[i-1][j] ];
          D[i][j] = D[i-1][ T[i-1][j] ] + D[i-1][j];
        }
      }
    }
  }
  void dfs(int u, int p = -1, Long dtp = 0, int lvl = 0) {
    T[0][u] = p;
    D[0][u] = dtp;
    L[u] = lvl;
    for (int i = 0; i < adj[u].size(); ++i) {
      int v = adj[u][i];
      Long nd = dis[u][i];
      if (v == p) continue;
      dfs(v, u, nd, lvl + 1);
    }
  }
  Long getDist(int u, int v) {
    Long ans = 0;
    if (L[u] < L[v]) swap(u, v);
    for (int i = 19; i >= 0; --i) {
      if (L[u] - (1 << i) >= L[v]) {
        ans += D[i][u];
        u = T[i][u];
      }
    }
    if (u == v) return ans;
    for (int i = 19; i >= 0; --i) {
      if (T[i][u] != T[i][v]) {
        ans += D[i][u]; 
        ans += D[i][v];
        u = T[i][u]; 
        v = T[i][v];
      }
    }

    return ans + (D[0][u] + D[0][v]);
  }
};

struct Edge {
  int u, v;
  Long c;
};

VL ditra(int st, vector<vector<Edge>> &G) {
  typedef pair<Long, int> PLI;
  priority_queue<PLI, vector<PLI>, greater<PLI>> PQ;
  VL D(G.size(), 1000000000000000000LL);
  D[st] = 0;
  PQ.push({D[st], st});
  while (PQ.size()) {
    PLI c = PQ.top(); PQ.pop();
    if (D[c.second] < c.first) continue;
    for (Edge e : G[c.second]) {
      if (D[e.v] > c.first + e.c) {
        D[e.v] = c.first + e.c;
        PQ.push({D[e.v], e.v});
      }
    }
  }
  for (Long d : D) assert(d < 1000000000000000000LL);
  return D;
  
}

int main() {

  int N, M;
  cin >> N >> M;
  DisjointSet DS(N);
  LCAWithDist LCA(N);
  vector<Edge> E;
  vector<vector<Edge>> G(N);
  set<int> SPN;
  for (int i = 0; i < M; ++i) {
    int u, v;
    Long c;
    cin >> u >> v >> c;
    u--;v--;
    if (DS.join(u, v)) {
      LCA.addEdge(u, v, c);
    } else {
      E.push_back({u, v, c});
      SPN.insert(u);
      SPN.insert(v);
    }
    G[u].push_back({u, v, c});
    G[v].push_back({v, u, c});
  }
  VI SP(SPN.begin(), SPN.end());
  VVL DT;
  for (int v : SP) {
    DT.push_back(ditra(v, G));
  }
  LCA.build();
  int Q;
  cin >> Q;
  for (int i = 0; i < Q; ++i) {
    int u, v;
    cin >> u >> v;
    u--;v--;
    Long bd = LCA.getDist(u, v);
    for (VL &vv : DT) {
      bd = min(bd, vv[u] + vv[v]);
    }
    cout << bd << endl;
  }
  
  return 0;
}
/*

3 3
1 2 3
2 3 1
3 1 5
3
1 2
1 3
2 3


8 13
1 2 4
2 3 6
3 4 1
4 5 12
5 6 3
6 7 8
7 8 7
1 4 1
1 8 3
2 6 9
2 7 1
4 6 3
6 8 2
8
1 5
1 7
2 3
2 8
3 7
3 4
6 8
7 8



 */
