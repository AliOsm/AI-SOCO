/*
▄███████▀▀▀▀▀▀███████▄
░▐████▀▒ЗАПУСКАЕМ▒▀██████▄
░███▀▒▒▒▒▒ДЯДЮ▒▒▒▒▒▒▀█████
░▐██▒▒▒▒▒▒БОГДАНА▒▒▒▒▒████▌
░▐█▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒████▌
░░█▒▄▀▀▀▀▀▄▒▒▄▀▀▀▀▀▄▒▐███▌
░░░▐░░░▄▄░░▌▐░░░▄▄░░▌▐███▌
░▄▀▌░░░▀▀░░▌▐░░░▀▀░░▌▒▀▒█▌
░▌▒▀▄░░░░▄▀▒▒▀▄░░░▄▀▒▒▄▀▒▌
░▀▄▐▒▀▀▀▀▒▒▒▒▒▒▀▀▀▒▒▒▒▒▒█
░░░▀▌▒▄██▄▄▄▄████▄▒▒▒▒█▀
░░░░▄██████████████▒▒▐▌
░░░▀███▀▀████▀█████▀▒▌
░░░░░▌▒▒▒▄▒▒▒▄▒▒▒▒▒▒▐
░░░░░▌▒▒▒▒▀▀▀▒▒▒▒▒▒▒▐
TAYA
*/
#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
#include <random>


using namespace std;



#define ll long long
#define ld double
#define null NULL
#define prev prev228
#define index index228
#define left left228
#define right right228
#define hash hash228
#define y1 y1228
#define y0 y0228
#define firn(i, n) for (int i = 0; i < (int)n; ++i)
#define forn(i, n) for (int i = 1; i <= (int)n; ++i)
#define int long long

template<typename T> inline void uin(T &a, T b) {
    if (b < a) a = b;
}

template<typename T> inline void uax(T &a, T b) {
    if (b > a) a = b;
}

const int maxn = 100 * 1000 + 7;

int n, m, x;

int A[maxn];

bool used[20];

struct Segment_Tree
{
	struct node
	{
		int cnt;
		vector<int> left, right;
		int l, r;
		node() {
			left.clear();
			right.clear();
			cnt = l = r = 0;
		}
	};


	inline void unite(node &res, node a, node b) {
		if (a.l == 0) {
			res = b;
			return ;
		}
		if (b.l == 0) {
			res = a;
			return ;
		}
		res.l = a.l, res.r = b.r;
		res.cnt = a.cnt + b.cnt;
		res.left = a.left;
		int OR = 0;
		for (int i : a.left) OR |= A[i];
		for (int pos : b.left) {
			if ((OR | A[pos]) != OR) {
				res.left.push_back(pos);
			}
		}
		res.right = b.right;
		OR = 0;
		for (int i : b.right) OR |= A[i];
		for (int pos : a.right) {
			if ((OR | A[pos]) != OR) {
				res.right.push_back(pos);
			}
		}
		OR = 0;
		int fir, sec;
		for (int lt = 0; lt < (int)a.right.size(); ++lt) {
			int l = a.right[lt];
			OR |= A[l];
			int cur = OR;
			int ptr = -1;
			while (ptr + 1 < (int)b.left.size() && cur < x) {
				cur |= A[b.left[ptr + 1]];
				++ptr;
			}
			if (cur < x) continue;
			if (lt + 1 < (int)a.right.size())
				fir = (a.right[lt] - a.right[lt + 1]);
			else
				fir = a.right[lt] - a.l + 1;
			if (ptr == -1) sec = (b.r - b.l + 1);
			else sec =  (b.r - b.left[ptr] + 1);
			res.cnt += fir * sec;
		}
		b.left.pop_back();
	}


	node res = node();

	vector< node > d;

	void build(int l, int r, int v = 1) {
		d[v].l = l;
		d[v].r = r;
		if (l == r) {
			if (A[l] >= x) d[v].cnt = 1;
			d[v].left.push_back(l);
			d[v].right.push_back(r);
		} else {
			int m = (l + r) >> 1;
			build(l, m, v << 1);
			build(m + 1, r, v << 1 | 1);
			unite(d[v], d[v << 1], d[v << 1 | 1]);
		}
	}

	Segment_Tree() {}

	Segment_Tree(int _n) {
		int ss = 1;
		while (ss <= _n) ss <<= 1;
		ss <<= 1;
		d.resize(ss + 3, node());
		build(1, _n);
	}


	void update(int pos, int value, int v = 1) {
		if (d[v].l == d[v].r) {
			A[pos] = value;
			if (value >= x) d[v].cnt = 1;
			else d[v].cnt = 0;
			d[v].left = d[v].right = {pos};
		} else {
			int m = (d[v].l + d[v].r) >> 1;
			if (pos <= m) {
				update(pos, value, v << 1);
			} else {
				update(pos, value, v << 1 | 1);
			}
			unite(d[v], d[v << 1], d[v << 1 | 1]);
		}
	}

	void get(int l, int r, int v = 1) {
		if (l > r || d[v].l > r || d[v].r < l) return ;
		if (l <= d[v].l && d[v].r <= r) {
			unite(res, res, d[v]);
			return ;
		}
		get(l, r, v << 1);
		get(l, r, v << 1 | 1);
	}

	void print() {
		cout << "\n\nprint:\n\n";
		for (int v = 1; v < (int)d.size(); ++v) {
			if (d[v].l == 0) return ;
			cout << "v=" << v << " l=" << d[v].l << " r=" << d[v].r << " cnt=" << d[v].cnt << "\n";
			cout << "left : ";
			for (int i : d[v].left) cout << i << " ";
			cout << endl;
			cout << "right : ";
			for (int i : d[v].right) cout << i << " ";
			cout << endl;
		}
		cout << "\n\n";
	}
};

Segment_Tree st;

inline void init() {
	st = Segment_Tree(n);
}

inline void update(int pos, int value) {
	st.update(pos, value);
}

inline int get(int l, int r) {
	st.res = Segment_Tree::node();
	st.get(l, r);
	return st.res.cnt;
}


signed main() {
    ios_base::sync_with_stdio(false);
	cin.tie(0);
	cin >> n >> m >> x;
	forn(i, n) cin >> A[i];
	init();
	//st.print();
	forn(iter, m) {
		int type;
		cin >> type;
		if (type == 1) {
			int pos, value;
			cin >> pos >> value;
			update(pos, value);
			//st.print();
		} else {
			int l, r;
			cin >> l;
			cin >> r;
			cout << get(l, r) << "\n";
		}
	}	
	return 0;
}



// kek











