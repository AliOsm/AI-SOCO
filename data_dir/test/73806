/**
 *    +--+--+--++--++--In the name of ALLAH--++--++--+--+--+
 *
 *    author:  skmonir
 *    created: 06-Sep-2018 20:49:27
**/

#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define mod                 1000000007LL
#define len(x)              (int) x.size()
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> inline void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = 2e5 + 7;
const int inf = 1e9 + 7;

vector <int> v;
int F[N], B[N], FC[N], BC[N];

int solve() {
    int n; Int(n);
    FOR (i, 1, n) {
        Int(F[i], B[i]);
        v.push_back(F[i]);
        v.push_back(B[i]);
    }

    sort(all(v));
    v.erase(unique(all(v)), v.end());

    FOR (i, 1, n) {
        F[i] = lower_bound(all(v), F[i]) - v.begin() + 1;
        B[i] = lower_bound(all(v), B[i]) - v.begin() + 1;

        ++FC[F[i]];
        if (F[i] != B[i]) ++BC[B[i]];
    }

    int need = (n + 1) / 2, res = inf;
    FOR (i, 1, n + n) {
        if (FC[i] >= need) return printf("0\n");
        if (FC[i] + BC[i] < need) continue;
        umin(res, need - FC[i]);
    }

    if (res == inf) res = -1;

    printf("%d\n", res);

    return 0;
}

int main() {
    int tests = 1, CaseNo = 0; //Int(tests);
    while (tests--) {
        //printf("Case %d: ", ++CaseNo);
        solve();
    }
    return 0;
}