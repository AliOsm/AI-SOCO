/*
ID: hamed_51
PROG: ?
LANG: C++
*/

#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#if (_win32 || __win32__)
#define LLD "%i64d"
#else
#define LLD "%lld"
#endif

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << x << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-8
#define endl "\n"

inline void read(register int *n) {
	register char c; *n = 0;
	do { c = getchar(); } while (c < '0' || c > '9');
	do { *n = c-'0'+*n*10; c = getchar(); } while (c >= '0' && c <= '9');
}

#define MAXN 5050
int n, where[MAXN], parent[MAXN], cap[MAXN], went[MAXN], firstday[MAXN];
pii priority[MAXN];
vector<int> adj[MAXN], capacity[MAXN];

void dfs(int pos = 0, int par = 0, int bw = 0) {
	cap[pos] = bw;
	parent[pos] = par;
	FOR(i, 0, Size(adj[pos])) if (adj[pos][i] != par)
		dfs(adj[pos][i], pos, capacity[pos][i]);
}

int main() {
	cin >> n;
	FOR(i, 0, n) cin >> priority[i].X, priority[i].Y = i, where[i] = i;
	sort(priority, priority+n);
	FOR(i, 1, n) {
		int u, v, c;
		cin >> u >> v >> c;
		u--; v--;
		adj[u].pb(v);
		capacity[u].pb(c);
		adj[v].pb(u);
		capacity[v].pb(c);
	}
	dfs(0);
	FOR(rep, 0, n) {
		memset(went, 0, sizeof went);
		FOR(i, 0, n) {
			int cur = priority[i].Y;
			if (where[cur] == 0) continue;
			if (went[where[cur]] < cap[where[cur]]) {
				went[where[cur]]++;
				where[cur] = parent[where[cur]];
				if (where[cur] == 0) firstday[cur] = rep+1;
			}
		}
	}
	FOR(i, 0, n) cout << firstday[i] << " ";
	cout << endl;
	return 0;
}

