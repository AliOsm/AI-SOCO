#include<bits/stdc++.h>
#define rep(i,n) for(int i=0;i<(int)n;i++)
#define all(c) (c).begin(),(c).end()
#define mp make_pair
#define pb push_back
#define dbg(...) do{cerr<<__LINE__<<": ";dbgprint(#__VA_ARGS__, __VA_ARGS__);}while(0);

using namespace std;

namespace std{template<class S,class T>struct hash<pair<S,T>>{size_t operator()(const pair<S,T>&p)const{return ((size_t)1e9+7)*hash<S>()(p.first)+hash<T>()(p.second);}};template<class T>struct hash<vector<T>>{size_t operator()(const vector<T> &v)const{size_t h=0;for(auto i : v)h=h*((size_t)1e9+7)+hash<T>()(i)+1;return h;}};}
template<class T>ostream& operator<<(ostream &os, const vector<T> &v){os<<"[ ";rep(i,v.size())os<<v[i]<<(i==v.size()-1?" ]":", ");return os;}template<class T>ostream& operator<<(ostream &os,const set<T> &v){os<<"{ "; for(const auto &i:v)os<<i<<", ";return os<<"}";}
template<class T,class U>ostream& operator<<(ostream &os,const map<T,U> &v){os<<"{";for(const auto &i:v)os<<" "<<i.first<<": "<<i.second<<",";return os<<"}";}template<class T,class U>ostream& operator<<(ostream &os,const pair<T,U> &p){return os<<"("<<p.first<<", "<<p.second<<")";}
void dbgprint(const string &fmt){cerr<<endl;}template<class H,class... T>void dbgprint(const string &fmt,const H &h,const T&... r){cerr<<fmt.substr(0,fmt.find(","))<<"= "<<h<<" ";dbgprint(fmt.substr(fmt.find(",")+1),r...);}
typedef long long ll;typedef vector<int> vi;typedef pair<int,int> pi;const int inf = (int)1e9;const double INF = 1e12, EPS = 1e-9;

string a, b;
int n, m, K;
int dp[3][1010][2][11];

int main(){
	cin.tie(0); cin.sync_with_stdio(0);
	cin >> n >> m >> K >> a >> b;
	memset(dp, -1, sizeof(dp));
	
	int ans = -1;
	dp[0][0][0][0] = 0;
	rep(i, n + 1){
		memset(dp[(i + 2) % 3], -1, sizeof(dp[(i + 2) % 3]));
		rep(j, m + 1) rep(flag, 2) rep(k, K + 1) if(dp[i % 3][j][flag][k] >= 0){
			
			int cur = dp[i % 3][j][flag][k];
			int match = i < n && j < m && a[i] == b[j];
			
			if(i < n) dp[(i + 1) % 3][j][0][k] = max(dp[(i + 1) % 3][j][0][k], cur);
			if(j < m) dp[i % 3][j + 1][0][k]   = max(dp[i % 3][j + 1][0][k], cur);
			
			if(match && (k + (flag == 0)) <= K){
				dp[(i + 1) % 3][j + 1][1][k + (flag == 0)] = max(dp[(i + 1) % 3][j + 1][1][k + (flag == 0)], cur + 1);
				
				//dbg(i, j, k, flag, cur);
			}
		}
	}
	rep(j, m + 1) rep(flag, 2) rep(k, K + 1) ans = max(ans, dp[n % 3][j][flag][k]);
	cout << ans << endl;
	
	return 0;
}