#pragma comment(linker,"/stack:67108864")
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <sstream>
#include <fstream>
#include <climits>
#include <cfloat>
#include <functional>
#include <ctime>
#include <numeric>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <utility>
#include <bitset>
#include <string>
#include <list>
#include <stack>
#include <vector>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <typeinfo>
#include <cassert>
#include <ctime>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); ++i)
#define forn1(i, n) for(int i = 1; i <= int(n); ++i)
#define ford(i, n) for(int i = int(n) - 1; i >= 0; --i)
#define ford1(i, n) for(int i = int(n); i > 0; --i)
#define foran(i, a, n) for(int i = int(a); i <= int(n); ++i)

#define mp make_pair
#define pb push_back
#define sqr(x) (x)*(x)
#define all(v) (v).begin(),(v).end()

typedef long double ld;
typedef long long ll;

const ld EPS = 1e-9;
const ld PI = 3.1415926535897932384626433832795;
const ll INF = 1000 * 1000 * 1000 + 9;
const int NMAX = 2 * 1000 * 100 + 3;

ll n, k, a;
ll m;
multiset <ll> pos;
ll shot[NMAX];

inline bool read()
{
    pos.clear();
    if (!(cin >>n >>k >>a))
        return false;
    if (!(cin >>m))
        return false;
    forn(i, m)
    {
        cin >>shot[i];
    }
    return true;
}

inline void solve()
{   
    pos.insert(0);
    pos.insert(n + 1);
    ll cur = (n + 1)/(a + 1);
    if(cur < k)
    {
        cout <<"NO" <<endl;
        return;
    }
    bool t = false;
    forn(i, m)
    {
        if(shot[i] > n || shot[i] < 1) continue;
        ll l, r;
        multiset <ll> ::iterator it = pos.upper_bound(shot[i]);
        r = *(it);
        if(r == 0)
        {
            throw;
        }
        it--;
        l = *(it);
        pos.insert(shot[i]);
        cur -= (r - l)/(a + 1);
        cur += (shot[i] - l)/(a + 1);
        cur += (r - shot[i])/(a + 1);
        if (cur < k && (!t))
        {
            cout <<i + 1 <<endl;
            t = true;
        }
    }
    if(!t)
        cout <<-1 <<endl;
}

int main()
{
    ifstream ifile("input.txt");
    if (ifile) {
        freopen("input.txt", "rt", stdin);
    }
#ifdef ONLINE_JUDGE
    if (ifile) {
        freopen("output.txt","wt",stdout);
    }
#endif
    while(read())
    {
        solve();
        break;
    }
    return 0;
}