#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>
#include <iomanip>
#include <limits>
#include <chrono>
#include <random>
#include <array>
#include <unordered_map>
#include <functional>
#include <complex>
#include <numeric>

template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

constexpr long long MAX = 5100000;
constexpr long long INF = 1LL << 60;
constexpr int inf = 1 << 28;
//constexpr long long mod = 1000000007LL;
constexpr long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;

void suzuken() {
	int n; scanf("%d", &n);
	vector<vector<int>> vv(n - 1);
	vector<set<int>> vs(n);
	for (int i = 0; i < n - 1; i++) {
		int k; scanf("%d", &k);
		vv[i].resize(k);
		for (int j = 0; j < k; j++) {
			scanf("%d", &vv[i][j]);
			vv[i][j]--;
			vs[vv[i][j]].insert(i);
		}
	}
	vector<int> singles;
	for (int i = 0; i < n; i++) {
		if (vs[i].size() == 1) singles.push_back(i);
	}
	for (auto single : singles) {
		for (int top = 0; top < n; top++) {
			if (single == top) continue;
			auto tvs = vs;
			bool ok = true;
			vector<int> res;
			res.push_back(single);
			while (res.size() < n - 1) {
				int idx = *tvs[res.back()].begin();
				int next = -1;
				for (int e : vv[idx]) {
					//cout << e << " " << idx << endl;
					tvs[e].erase(tvs[e].find(idx));
					if (e != top and tvs[e].size() == 1) {
						next = e;
					}
				}
				if (next == -1) {
					ok = false;
					break;
				}
				res.push_back(next);
			}
			if (!ok) continue;
			res.push_back(top);
			reverse(res.begin(), res.end());
			vector<int> pos(n);
			for (int i = 0; i < n; i++) pos[res[i]] = i;
			for (auto &v : vv) {
				vector<int> tmp;
				for (int e : v) tmp.push_back(pos[e]);
				sort(tmp.begin(), tmp.end());
				for (int i = 0; i + 1 < tmp.size(); i++) {
					if (tmp[i + 1] - tmp[i] != 1) {
						ok = false;
						break;
					}
				}
				if (!ok) break;
			}
			if (!ok) continue;
			for (int i = 0; i < n; i++) {
				cout << res[i] + 1;
				if (i + 1 == n) cout << "\n";
				else cout << " ";
			}
			return;
		}
	}
}
int main()
{
	/*
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	*/
	int kkt; scanf("%d", &kkt);
	while (kkt--) {
		suzuken();
	}
	return 0;
}
 