/*
  ------------------------- Hachiikung ---------------------------------
  ---------------------- Worrachate Bosri ------------------------------
  ------ Faculty of Computer Engineering Chulalongkorn University ------
*/
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<stack>
#include<list>
#include<set>
#include<map>
#include<string>
#include<utility>
using namespace std;
#define REP(i,FN) for(int i=0;i<FN;i++)
#define FOR(i,ST,FN) for(int i=ST;i<=FN;i++)
#define FORD(i,FN,ST) for(int i=FN;i>=ST;i--)
#define FORX(i,c) for(typeof(c.begin())i=c.begin();i!=c.end();i++)
#define pause system("pause")
#define S scanf
#define P printf
#define X first
#define Y second
#define pb push_back
#define PII pair<int,int>
#define mp make_pair
#define sz size()
#define eps 1e-8

const int MOD(1000000007);
const int INF((1<<30)-1);
const int MAXN();

int n, dp[25][(1<<13)+5][25];

vector<int>a;

bool DP(int node,int mask,int leaf){

    if(node == n) return mask == 0 && leaf == 0;

    if(mask&(1<<node)) return false;

    if(dp[node][mask][leaf] != -1) return dp[node][mask][leaf];

    dp[node][mask][leaf] = 0;

    int submask = mask;

    while(true)
    {
        int s = 0, cnt = 0;

        REP(j,n)
        {
            if(submask&(1<<j))
            {
                cnt++;
                s += a[j];
            }
        }

        int L = a[node]-s-1;

        if(L >= 0 && L+cnt > 1)
            dp[node][mask][leaf] |= DP(node+1, mask^submask, leaf-L);

        if(submask == 0) break;

        submask = (submask-1)&mask;
    }

    return dp[node][mask][leaf];
}

int main(){

    S("%d",&n);

    int leaf = 0;

    REP(i,n)
    {
        int x;
        S("%d",&x);
        if(x == 1) leaf++;
        else a.pb(x);
    }

    if(leaf < (n+1)/2)
    {
        P("NO");
        return 0;
    }

    sort(a.begin(),a.end(),greater<int>());

    n = a.sz;

    if(n == 0)
    {
        P("%s",leaf == 1 ? "YES" : "NO");
        return 0;
    }

    REP(i,n)
        REP(j,1<<n)
            FOR(k,0,leaf)
                dp[i][j][k] = -1;

    P("%s",DP(0,(1<<n)-2,leaf) ? "YES" : "NO");
}
