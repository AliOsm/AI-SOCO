/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
using namespace std;

#define int long long
#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

const int N = 1e3+5;
int dp[N][N];

class CPostcard {
public:
    int n, k;
    string s;
    vector<char> ans;
    bool rec(int i, int j){
        if(i == n and j == k) return true;
        if(i >= n) return false;
        if(dp[i][j] != -1) return dp[i][j];
        bool res = false;
        if(s[i] == '*'){
            res = rec(i+1, j);
            int cur = j;
            while(!res and cur < k){
                ans[cur] = s[i-1];
                res = rec(i+1, cur + 1);
                ++cur;
            }
            if(!res) res = rec(i+1, j - 1);
        }
        else if(s[i] == '?'){
            res = rec(i+1, j);
            if(!res) res = rec(i+1, j - 1);
        }
        else{
            ans[j] = s[i];
            res = rec(i+1, j+1);
        }
        return dp[i][j] = res;
    }

	void solve(std::istream& in, std::ostream& out) {
        in >> s;
        n = s.length();
        in >> k;
        ans = vector<char>(5*N, '.');
        memset(dp, -1, sizeof dp);
        if(rec(0, 0)) f(i, k) out << ans[i];
        else out << "Impossible";
	}
};


int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	CPostcard solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
