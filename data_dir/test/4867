#include <bits/stdc++.h>
#define pb push_back
#define F first
#define S second
#define sq(x) (x) * (x)
#define ins insert
#define mp make_pair
#define bit __builtin_popcount
#define all(x) x.begin(),x.end()
#define ll long long
#define eb emplace_back
#define ub upper_bound
#define lb lower_bound
#define ios ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define file(s) if (fopen(s".in", "r")) freopen(s".in", "r", stdin), freopen(s".out", "w", stdout)
#define er erase

using namespace std;

const int N = 1e6 + 11, mod = 1e9 + 7;
const int INF1 = 2e9;
const ll INF2 = 2e18;
const int base = 500;
const int P = 31;
const int dx[] = {1, -1, 0, 0};
const int dy[] = {0, 0, 1, -1};
const double EPS = 1e-7;
const double PI = acos(-1.0);

string s;
int m, n;
struct vertex {
    int len, open, closed;
} t[N * 4];
inline vertex combine(vertex a, vertex b) {
    vertex c;
    int mn = min(a.open, b.closed);
    c.len = a.len + b.len + mn;
    c.open = a.open + b.open - mn;
    c.closed = a.closed + b.closed - mn;
    return c;
}
inline void build(int v, int l, int r) {
    if (l == r) {
        t[v].open = (s[l] == '(');
        t[v].closed = (s[l] == ')');
        return;
    }
    int md = l + ((r - l) >> 1);
    build(v + v, l, md);
    build(v + v + 1, md + 1, r);
    t[v] = combine(t[v + v], t[v + v + 1]);
}
inline vertex get(int v, int l, int r, int left, int right) {
    if (left > r || right < l) {
        return {0, 0, 0};
    }
    if (left <= l && r <= right) {
        return t[v];
    }
    int md = l + ((r - l) >> 1);
    return combine(get(v + v, l, md, left, right), get(v + v + 1, md + 1, r, left, right));
}
inline int ans(int l, int r) {
    int anss = get(1, 1, n, l, r).len * 2;
    return anss;
}
main() {
    file("queue");
    ios;
    cin >> s >> m;
    n = s.size();
    s = "#" + s;
    build(1, 1, n);
    for (int l, r; m--;) {
        cin >> l >> r;
        cout << ans(l, r) << "\n";
    }
    return 0;
}
/// 243368KZ
