#pragma GCC optimize("O3","unroll-loops")
#include <iostream>
#include <complex>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <random>
 
using namespace std;
template<typename T1, typename T2>inline void chkmin(T1 &x, T2 y) { if (x > y) x = y; }
template<typename T1, typename T2>inline void chkmax(T1 &x, T2 y) { if (x < y) x = y; }
#define sz(c) (int)(c).size()
#define all(c) (c).begin(), (c).end()
#define rall(c) (c).rbegin(), (c).rend()
#define left left228
#define right right228
#define rank rank228
#define y1 y1228
#define read(FILENAME) freopen((FILENAME + ".in").c_str(), "r", stdin)
#define write(FILENAME) freopen((FILENAME + ".out").c_str(), "w", stdout)
#define files(FILENAME) read(FILENAME), write(FILENAME)
#define pb push_back
#define mp make_pair
using ll = long long;
using ld = long double;
const int MAXMEM = 200 * 1000 * 1024;
char _memory[MAXMEM];//
size_t _ptr = 0;
void* operator new(size_t _x) { _ptr += _x; return _memory + _ptr - _x; }
void operator delete (void*) noexcept {}
const string FILENAME = "input";
const int MAXN = 100228;
const int BLOCK = 30;
const int BLOCK1 = 1000;
int n, w, q;
int x[MAXN];
int ans[MAXN];
int mx[MAXN][18];
int mx1[MAXN][18];
int gr[MAXN];


inline int getmax(const int l, const int r) {
    int grs = 31 - __builtin_clz(r - l + 1);
    return max(mx1[l][grs], mx1[r - (1 << grs) + 1][grs]);
}


inline int getmin(const int l, const int r) {
    int grs = 31 - __builtin_clz(r - l + 1);
    return min(mx[l][grs], mx[r - (1 << grs) + 1][grs]);
}


inline bool check(const int l, const int r, int k) {
    if (l > r || r >= n) {
        return false;
    }
    int f = getmin(l, r);
    int f1 = getmax(l, r);
    return f + w - f1 >= k;
}


inline int findGroupEnd(const int i, const int k) {
    int l = i;
    int r = n - 1;
    while (l < r) {
        int mid = (l + r + 1) >> 1;
        if (check(i, mid, k)) {
            l = mid;
        } else {
            r = mid - 1;
        }
    }
    return l + 1;
}


int curs[MAXN];
int jump[MAXN];
int target[MAXN];

int val;

void calc(int i) { 
    if (curs[i] - i  == BLOCK) {
        jump[i] = 0;
        target[i] = i;
    } else {
        if (curs[i] >= n) {
            jump[i] = 1;
            target[i] = curs[i];
        } else {
            if (target[curs[i]] >= i + BLOCK) {
                int t = curs[i];
                int cnt = 1;
                int val = i + BLOCK;
                while (curs[t] < val) {
                    cnt++;
                    t = curs[t];
                }
                target[i] = curs[t];
                jump[i] = cnt + 1;
            } else {
                jump[i] = 1 + jump[curs[i]];
                target[i] = target[curs[i]];
            }
        }
    }
}


void calc1(int i) { 
    if (curs[i] - i == BLOCK) {
        jump[i] = 0;
        target[i] = i;
    } else {
        if (curs[i] >= n) {
            jump[i] = 1;
            target[i] = curs[i];
        }
    }
}


int gt[MAXN];
int ls[MAXN];
int ft[MAXN];
int ukr;
int nxt[MAXN];
bool used[MAXN];
int st[MAXN];
int uks;
int grs;
int stacker[MAXN];
int ukt = 0;
int curuk[MAXN];
int curval[MAXN];


void dfs(int start) { 
    ukt = 0;  
    stacker[ukt] = start;
    curuk[start] = gt[start];
    ukt++;
    uks = 0;
    curval[start] = 0;
    while (ukt) {
        int u = stacker[ukt - 1];
        if (curuk[u] == gt[u]) {
            used[u] = true;
            if (u <= grs) {
                 if (target[curs[u]] >= u + BLOCK) {
                    while (curval[u] < uks && st[curval[u]] >= u + BLOCK) {
                        curval[u]++;
                    }
                    int l = curval[u];
                    jump[u] = uks - l;
                    if (curs[st[l]] - st[l] == BLOCK) {
                        target[u] = st[l];
                    } else {
                        jump[u]++;
                        target[u] = curs[st[l]];
                    }
                } else {
                    jump[u] = 1 + jump[curs[u]];
                    target[u] = target[curs[u]];
                }
            }   
            st[uks] = u;
            uks++;
        } 
        if (curuk[u] == -1) {
            uks--;
            ukt--;
            continue;
        } 
        int h = ft[curuk[u]];
        curuk[u] = nxt[curuk[u]];
        if (!used[h]) {
            stacker[ukt] = h;
            curval[h] = curval[u];
            curuk[h] = gt[h];
            ukt++;
        }
    }
}


void add(int a, int b) {
    if (gt[a] == -1) {
        gt[a] = ukr;
        ls[a] = ukr;
        ft[ukr] = b;
        nxt[ukr] = -1;
        ukr++;
    } else {
        nxt[ls[a]] = ukr;
        ft[ukr] = b;
        nxt[ukr] = -1;
        ls[a] = ukr;
        ukr++;
    }
}

void update(int tt) {
    // ukr = 0;
    // for (int j = min(i + BLOCK, n); j >= max(0, i - BLOCK - 5); j--) {
    //     gt[j] = -1;
    // }
    // for (int j = min(i + BLOCK, n); j >= max(0, i - BLOCK - 5); j--) {
    //     used[j] = false;
    // }
    // for (int j = max(0, i - BLOCK - 5); j <= i; j++) {
    //     if (curs[j] == BLOCK || j + curs[j] >= n) {
    //         calc1(j);
    //         used[j] = true;
    //         continue;
    //     }
    //     add(j + curs[j], j);
    // }
    // grs = i;
    // for (int j = min(i + BLOCK, n); j >= max(0, i - BLOCK - 1); j--) {
    //     if (!used[j]) {
    //         dfs(j);
    //     }
    // }
    for (int i = tt; i >= max(0, tt - BLOCK - 1); i--) {
        int val = i + BLOCK;
        if (curs[i] == val) {
            jump[i] = 0;
            target[i] = i;
        } else {
            if (curs[i] >= n) {
                jump[i] = 1;
                target[i] = curs[i];
            } else {
                if (target[curs[i]] >= val) {
                    int t = curs[i];
                    int cnt = 1;
                    while (curs[t] < val) {
                        cnt++;
                        t = curs[t];
                    }
                    target[i] = curs[t];
                    jump[i] = cnt + 1;
                } else {
                    jump[i] = 1 + jump[curs[i]];
                    target[i] = target[curs[i]];
                }
            }
        }
    }
}


bool bad[MAXN];
int curs2[MAXN];



inline bool comp(const pair<int, pair<int, int> > &a, const pair<int, pair<int, int> > & b) {
    return a.first < b.first;
}

int useded[MAXN];
int ukted;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
   // read(FILENAME);     
    cin >> n >> w >> q;
    for (int i = 0; i < n; i++) {
        cin >> x[i];
        mx[i][0] = x[i];
        mx1[i][0] = x[i];
    }
    for (int i = n - 1; i >= 0; i--) {
        for (int k = 1; k < 18; k++) {
            mx[i][k] = mx[i][k - 1];
            mx1[i][k] = mx1[i][k - 1];
            int t = i + (1 << (k - 1));
            if (t < n) {
                chkmin(mx[i][k], mx[t][k - 1]);
                chkmax(mx1[i][k], mx1[t][k - 1]);
            }
        }
    }
    assert(double(clock()) / CLOCKS_PER_SEC <= 0.3);
    int cur = 1;
    int step = 0;
    for (int i = 1; i <= n; i++) {
        if (cur + cur <= i) {
            cur += cur;
            step++;
        }
        gr[i] = step;
    }
    vector<pair<int, int> > st;
    for (int it = 0; it < q; it++) {
        int k;
        cin >> k;
        st.pb({k, it});
    }
    sort(all(st));
    vector<pair<int, pair<int, int> > > g;
    vector<pair<int, int> > g1;
    for (int i = 0; i < n; i++) {
        for (int j = 1; j <= BLOCK; j++) {
            int maxk = 0;
            if (i + j - 1 >= n) {
                maxk = 0;
            } else {
                int s = getmin(i, i + j - 1);
                int s1 = getmax(i, i + j - 1);
                maxk = max(0, s + w - s1);
            }
            if (maxk) {
                g.pb({maxk + 1, {i, j - 1}});
                chkmax(curs[i], j);
            }
        }
        curs[i] = i + curs[i];
        if (i + BLOCK1 <= n) {
            int s = getmin(i, i + BLOCK1 - 1);
            int s1 = getmax(i, i + BLOCK1 - 1);
            if (max(0, s + w - s1) != 0) {
                g1.pb({max(0, s + w - s1) + 1, i});
                bad[i] = true;
            }   
        }
        curs2[i] = n;
    }
    sort(all(g), comp);
    sort(all(g1));
    val = 1;
    int uk = 0;
    for (int i = n - 1; i >= 0; i--) {
        calc(i);
    }
    int uk1 = 0;
    for (int it = 0; it < q; it++) {
        val = st[it].first; 
        ukted++;
        vector<int> h;
        while (uk < sz(g) && g[uk].first <= val) {
            int gh = curs[g[uk].second.first];
            chkmin(curs[g[uk].second.first], g[uk].second.first + g[uk].second.second);
            if (curs[g[uk].second.first] != gh) {
                h.pb(g[uk].second.first);
            }
            uk++;
        }
        for (auto x: h) {
            if (useded[x] != ukted) {
                useded[x] = ukted;
                update(x);
            }
        }
        while (uk1 < sz(g1) && g1[uk1].first <= val) {
            bad[g1[uk1].second] = false;
            curs2[g1[uk1].second] = BLOCK1 - 1 + g1[uk1].second;
            uk1++;
        }
        int cur = 0;
        int cnt = 0;
        while (cur < n) {
            if (curs[cur] - cur == BLOCK) {
                if (bad[cur]) {
                    cnt++;
                    cur = findGroupEnd(cur, val);
                } else {
                    while (!check(cur,curs2[cur] - 1, val)) {
                        curs2[cur]--;
                    }
                    cnt++;
                    cur = curs2[cur];
                }
            } else {
                cnt+= jump[cur];
                cur = target[cur];
            }
        }
        ans[st[it].second] = cnt - 1;
    }
    for (int it = 0; it < q; it++) {
        cout << ans[it] << '\n';
    }
    return 0;
}               
