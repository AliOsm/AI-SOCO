#include <bits/stdc++.h>

using namespace std;

#define f first
#define s second
#define mp make_pair
#define pb push_back
#define sz(x) ((int)((x).size()))
#define all(x) (x).begin(),(x).end()
#define deb(x) cerr << "(" << #x << " = " << x << ")\n";
#define bp(x) __builtin_popcount(x)

typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<int> vi;

int n;
map < pii, vector < pii > > g;
int N;
int was[1000 * 1000 + 100];
string name[1000 * 1000 + 100];
map < string, int > id;

void read(int &proj, int &ver) {
	string s;
	cin >> s >> ver;
	cin.ignore();
	if(!id.count(s)) {
		id[s] = ++N;
		name[N] = s;
	}
	proj = id[s];
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin >> n;
    cin.ignore();

    int sp, sv;
    for(int i = 0; i < n; ++i) {
    	int proj, ver;
    	read(proj, ver);
    	if(i == 0) {
    		sp = proj;
    		sv = ver;
    	}
    	int k;
    	cin >> k;
    	cin.ignore();
    	for(int j = 0; j < k; ++j) {
    		int x, y;
    		read(x, y);
    		g[mp(proj, ver)].pb(mp(x, y));
    	}
    	string s;
    	getline(cin, s);
    }

    queue < pii > q;
    q.push(mp(sp, sv));
    was[sp] = 1;

    vector < pair<string, int> > ans;
    while(!q.empty()) {
    	set < pii > nq;
    	while(!q.empty()) {
    		pii v = q.front();
    		q.pop();
    		for(int i = 0; i < sz(g[v]); ++i) {
    			int proj = g[v][i].f;
    			int ver = g[v][i].s;
    			if(!was[proj]) {
    				nq.insert(mp(-ver, proj));
    			}
    		}
    	}
    	for(auto it : nq) {
    		int proj = it.s;
    		int ver = -it.f;
    		if(!was[proj]) {
    			q.push(mp(proj, ver));
    			ans.pb(mp(name[proj], ver));
    			was[proj] = 1;
    		}
    	}
    }

    sort(all(ans));
    cout << sz(ans) << "\n";
    for(int i = 0; i < sz(ans); ++i) {
    	cout << ans[i].f << " " << ans[i].s << "\n";
    }


    return 0;
}
