#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;

struct event
{
	int type, day, exam;
	event(int type_, int day_, int exam_): type(type_), day(day_), exam(exam_) {}
};

int main()
{
	int n, m;
	cin >> n >> m;
	vector<int> s(m), d(m), c(m);
	vector<event> events;
	events.reserve(2 * m);
	for (int i = 0; i < m; i++)
	{
		cin >> s[i] >> d[i] >> c[i];
		s[i]--; d[i]--;
		events.push_back(event(0, s[i], i));
		events.push_back(event(1, d[i], i));
	}
	sort(events.begin(), events.end(), [](event eA, event eB)
	{
		if (eA.day != eB.day)
			return eA.day < eB.day;
		if (eA.type != eB.type)
			return eA.type > eB.type;
		return eA.exam < eB.exam;
	});
	reverse(events.begin(), events.end());

	bool haveResult = true;
	vector<int> result(n);
	vector<bool> canPrepareExam(m);
	vector<int> examDaysPrepared(m);
	for (int i = 0; i < n; i++)
	{
		bool hadExam = false;
		while (!events.empty() && events.back().day <= i)
		{
			if (events.back().type == 0)
				canPrepareExam[events.back().exam] = true;
			else
			{
				hadExam = true;
				if (examDaysPrepared[events.back().exam] == c[events.back().exam])
					result[i] = m + 1;
				else
					haveResult = false;
			}
			events.pop_back();
		}
		if (!haveResult)
			break;
		if (hadExam)
			continue;
		int minExam = -1, minExamDay = n;
		for (int j = 0; j < m; j++)
			if (canPrepareExam[j] && examDaysPrepared[j] < c[j] && d[j] < minExamDay)
			{
				minExam = j;
				minExamDay = d[j];
			}
		if (minExam == -1)
			result[i] = 0;
		else
		{
			result[i] = minExam + 1;
			examDaysPrepared[minExam]++;
		}
	}

	if (haveResult)
	{
		for (int x : result)
			cout << x << " ";
		cout << endl;
	}
	else
		cout << "-1" << endl;
}