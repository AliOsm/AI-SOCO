#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcount(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

const int OO = (int) 2e9;
const double eps = 1e-9;

const int N = 100005;

struct _hash {
	int operator()(const pii& key) const {
		return (key.first + key.second) % 1000003;
	}
};

int n, m;
bool r[N];
int a[N][2];
vector<pair<int, bool> > adj[N];
hash_map<pii, bool, _hash> M;
int vis[N];

bool dfs(int cur, bool col) {
	if (vis[cur] != -1 && vis[cur] != col)
		return 0;
	vis[cur] = col;
	for (int i = 0; i < SZ(adj[cur]); i++) {
		int to = adj[cur][i].first;
		bool edgeCol = adj[cur][i].second;
		if (edgeCol) {
			if (vis[to] != -1 && vis[to] != col)
				return 0;
		} else {
			if (vis[to] != -1 && vis[to] == col)
				return 0;
		}
	}
	for (int i = 0; i < SZ(adj[cur]); i++) {
		int to = adj[cur][i].first;
		bool edgeCol = adj[cur][i].second;
		if (edgeCol) {
			if (vis[to] == -1 && !dfs(to, col))
				return 0;
		} else {
			if (vis[to] == -1 && !dfs(to, !col))
				return 0;
		}
	}
	return 1;
}

int main() {
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
#ifndef ONLINE_JUDGE
//	freopen("in.txt", "rt", stdin);
//	freopen("out.txt", "wt", stdout);
#endif
	cin >> n >> m;
	for (int i = 1; i <= n; i++)
		cin >> r[i];
	for (int i = 1; i <= m; i++) {
		int k, x;
		cin >> k;
		for (int j = 0; j < k; j++) {
			cin >> x;
			a[x][0] ? (a[x][1] = i) : (a[x][0] = i);
		}
	}
	for (int i = 1; i <= n; i++) {
		int fr = a[i][0], to = a[i][1];
		if (fr > to)
			swap(fr, to);
		if (M.find(mp(fr, to)) == M.end()) {
			M[mp(fr, to)] = r[i];
			adj[fr].pb(mp(to, r[i]));
			adj[to].pb(mp(fr, r[i]));
		} else if (r[i] != M[mp(fr, to)]) { // two rooms with the same switches but have different values
			cout << "NO\n";
			return 0;
		}
	}
	MMS(vis, -1);
	for (int i = 1; i <= m; i++) {
		if (vis[i] == -1 && !dfs(i, 1)) {
			cout << "NO\n";
			return 0;
		}
	}
	cout << "YES\n";
	return 0;
}
