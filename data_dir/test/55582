#include<iostream>
#include<map>
#include<cmath>
#include<vector>
#include<algorithm>
#include<iomanip>
#include<cmath>
#include<stack>
#include<math.h>
#include<set>
#include<string>
#include<cstring>
#include<queue>
#include<complex>
#include<cstdio>
using namespace std;


#define rep(i,n) for(int i=0;i<n;i++)
#define repi(i,a,n) for(int i=a;i<n;i++)
#define inf (0x7fffffff)
#define mp make_pair
#define read freopen("in.in","r",stdin)
#define write freopen("out.out","w",stdout)
#define scf(xx) scanf("%d",&xx)
typedef  long long ll;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef pair<ll,int> li;
typedef  long double ld;


struct edge {
	int fr,to,w;
	edge(int f,int t,int ww){fr=f; to=t; w=ww;}
	edge(){fr=0,to=0,w=0;}
};
struct node{
	int f,t,e;
	ll dis;
	node(int ff=0,int tt=0,ll d=0,int ee=0){f=ff; t=tt; dis=d; e=ee;}
	bool operator<(const node& ob)const{
		return dis>ob.dis;
	}
};
vector<edge> E(100001,edge());
vector<vector<ii> > G(100001),G1(100001),G2(100001),GG(100001);
vector<ll> dist(100001,-1),dist1(100001,-1);
//vi par(100001,0),next(100001),con(100001);
vi result(100001,0);
int n,m,S,T;
bool can[100001],vis[100001];
void dij(){
	priority_queue<li,vector<li>,greater<li> >Q;
	Q.push(mp(0,T));
	while(!Q.empty()){
		li p=Q.top(); Q.pop();
		if(dist1[p.second]!=-1)continue;
		dist1[p.second]=p.first;
	//	can[p.second]=1;
		rep(i,GG[p.second].size())
			Q.push(mp(p.first+E[GG[p.second][i].second].w , GG[p.second][i].first));
	}
}
void dijextra(){
	priority_queue<node> Q;
	Q.push(node(0,S,0,m));
	while(!Q.empty()){
		node nod=Q.top(); Q.pop();
		if(dist[nod.t]!=-1 && dist[nod.f]+E[nod.e].w==dist[nod.t]){
//			con[nod.t]++; con[nod.f]++; next[nod.f]=nod.t; result[nod.e]=2;continue;
			//result[nod.e]=2;
			G1[nod.f].push_back(mp(nod.t,nod.e));
			G2[nod.t].push_back(mp(nod.f,nod.e));
			G1[nod.t].push_back(mp(nod.f,nod.e));
		}
		if(dist[nod.t]!=-1)continue;
		dist[nod.t]=nod.dis; //result[nod.e]=2;
		//con[nod.f]++; con[nod.t]++; par[nod.t]=nod.f; next[nod.f]=nod.t;
		if(nod.f){
		//result[nod.e]=2;
		G1[nod.f].push_back(mp(nod.t,nod.e));
		G2[nod.t].push_back(mp(nod.f,nod.e));
		G1[nod.t].push_back(mp(nod.f,nod.e));}
		if( nod.t==T)continue;
		rep(i,G[nod.t].size()){
			Q.push(node(nod.t ,G[nod.t][i].first , nod.dis+ E[G[nod.t][i].second].w,G[nod.t][i].second));
		}

	}
}
void dfs1(int id){
	can[id]=1;
	rep(i,G2[id].size()){
		result[G2[id][i].second]=2;
		if(!can[G2[id][i].first])
			dfs1(G2[id][i].first);
	}
}

 
vector< vector<int> > comToNode;        
vector<int> nodeToCom;

vector<int> indx;               // order of each node in the DFS, initialized by -1
vector<int> lowLink;    // after runing the algorithm, it has a unique indx for each component, this indx is the minimum indx for the set of nodes in that component
stack<int> stk;                 // has the current nodes currently in the stack
int curIndex;   // the graph
vector<bool> inStack;   // 1 for nodes that are currently in the stack, 0 otherwise

void tarjanDFS(int i,int par) {
        lowLink[i] = indx[i] = curIndex++;
        stk.push(i);
        inStack[i] = 1;
		int x=0;
		rep(j,G1[i].size())x+=(par==G1[i][j].first);
        for(int j=0;j<G1[i].size();j++) {
			if(!can[G1[i][j].first] ||(x==1 &&  G1[i][j].first==par) ) continue;
			if(indx[ G1[i][j].first ]==-1) {
				tarjanDFS( G1[i][j].first ,i);
				lowLink[i] = min(lowLink[i],lowLink[ G1[i][j].first ]);
                }
			else if(inStack[ G1[i][j].first ]) 
				lowLink[i] = min(lowLink[i],indx[ G1[i][j].first ]);
        }
        if(indx[i] == lowLink[i])       { 
                vector<int> v;
                while(!stk.empty()) {
                        int ind = stk.top();
                        stk.pop();
                        v.push_back(ind);                       // updating the answer
                        nodeToCom[ind] = comToNode.size();      // updating the answer
                        inStack[ind] = 0;       
                        if(ind==i) break;
                }
                comToNode.push_back(v);                         // updating the answer
        }
}

void tarjanSCC(int n) {

        indx = vector<int>(n+1,-1);
        lowLink = vector<int>(n+1,-1);
        nodeToCom = vector<int>(n+1,-1);
        comToNode = vector< vector<int> >();
        inStack = vector<bool>(n+1,0);
        stk = stack<int>();
        curIndex = 0;

        for(int i=0;i<n;i++) 
                if(indx[i]==-1) 
                        tarjanDFS(i,0);
}


//

void dfs(int id){
	vis[id]=1;
	rep(i,G1[id].size())
		if( can[G1[id][i].first]){
			int e=G1[id][i].second;
			if(nodeToCom[E[e].fr]!=nodeToCom[E[e].to])
				result[G1[id][i].second]=1;
			else result[G1[id][i].second]=2;
			if(!vis[G1[id][i].first])
				dfs(G1[id][i].first);
		}
}

int main(){
	//	read;
	cin>>n>>m>>S>>T;
	ll x,y,z;	
	rep(i,m){
		//cin>>E[i].fr>>E[i].to>>E[i].w;
		scanf("%d%d%d",&E[i].fr,&E[i].to,&E[i].w);
		G[E[i].fr].push_back(mp(E[i].to,i));
		GG[E[i].to].push_back(mp(E[i].fr,i));
	}
	memset(can,false,sizeof can);
	memset(vis,false,sizeof vis);
	dijextra();
	dij();
	dfs1(T);
	tarjanSCC(n+1);
	
	
	dfs(S);
	/*x=S;
	while(G1[x].size()==1){
		result[G1[x][0].second]=1;
		x=G1[x][0].first;
	}*/
	//x=T;
	//while(G2[x].size()==1){
	//	result[G2[x][0].second]=1;
	//	x=G2[x][0].first;
	//}
	ll sp=dist[T];
	rep(i,m){
		if(dist[E[i].fr]==-1 || dist1[E[i].to]==-1)printf("NO\n");
		else if(result[i]==1) printf("YES\n");
		/*else if(result[i]==2){
			if(E[i].w!=1) printf("CAN 1\n");
			else  printf("NO\n");
		}
		else {
			x=dist[E[i].to]-dist[ E[i].fr]-1;
			if(x>0)printf("CAN %I64d\n",E[i].w-x);
			else printf("NO\n");
		}*/
		else {
			x=sp-1-dist[E[i].fr]-dist1[E[i].to];
			if(x<1)printf("NO\n");
			else printf("CAN %I64d\n",E[i].w-x);
		}
	}
}
