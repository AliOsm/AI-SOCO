/*input
3 9
*/
// Revisited 28/01/20
/* HOW TO? 
Solve just by printing permutations and observe the rules, nothing special here
*/
#include <bits/stdc++.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define mp make_pair
#define fi first
#define se second
#define __builtin_popcount __builtin_popcountll
#define int long long
#define loop(i,l,r) for(int i=(l); i<=(r); i++)
#define rloop(i,l,r) for(int i=(l); i>=(r); i--)
#define bit(x,y) ((x>>y)&1LL)
const int N = 1e6 + 5;
template <class T1, class T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &a) {
    return os << '(' << a.first << ", " << a.second << ')';
}
template <class T>
ostream &operator<<(ostream &os, const vector<T> &a) {
    os << '[';
    for (unsigned int i = 0; i < a.size(); i++)
        os << a[i] << (i < a.size() - 1 ? ", " : "");
    os << ']';
    return os;
}

int n, lim;
int ans[N]; bool mark[N];
signed main() {
    ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef in1code
    freopen("1test.inp", "r", stdin);
#endif
    cin >> n >> lim;
    // int orlim = lim;
    if (lim < n * (n + 1) / 2) {
        cout << -1 << endl;
        return 0;
    }
    lim -= n * (n + 1) / 2;
    memset(ans, -1, sizeof(ans));
    int curDis = n - 1; int base = 1;
    rloop(i, n, 1) {
        if (lim >= curDis) {
            ans[base] = i;
            lim -= curDis;
        }
        else {
            int d = curDis - lim;
            ans[base + d] = i;
            break;
        }
        base++; curDis -= 2;
        if (curDis <= 0) break;
    }
    loop(i, 1, n) if (ans[i] != -1) mark[ans[i]] = true;
    int peak = 1;
    loop(i, 1, n) {
        if (ans[i] != -1) continue;
        while (mark[peak] == true) peak++;
        mark[peak] = true; ans[i] = peak;
    }
    int sumx = 0;
    loop(i, 1, n) sumx += max(ans[i], i);
    // assert(sumx <= orlim);
    cout << sumx << endl;
    loop(i, 1, n) cout << i << sp;
    cout << endl;
    loop(i, 1, n) cout << ans[i] << sp;
    cout << endl;
}
