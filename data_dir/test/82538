#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>


#define LL long long
#define uLL unsigned long long
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define vI vector<int>
#define vvI vector<vector<int>>
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
#define forI(tmp) for(auto(it)=(tmp).begin();(it)!=(tmp).end();(it)++)
#define PI 3.14159265356
#define sc(a) scanf("%d", &(a))
const LL mod = 1000000007;
const LL Inf = 2 * 1e9;
using namespace std;
int toint(string s) {
	LL ans = 0;
	forn(i, 0, s.length()) ans = ans * 10 + (s[i] - '0');
	return ans;
}

LL gcd(LL a, LL b) {
	if (b == 0)
		return a;
	else
		return gcd(b, a % b);
}

LL lcm(LL a, LL b) {
	return a / gcd(a, b) * b;
}
int n;
vector<int> ans;


int main()
{
#ifdef _DEBUG
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#else
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	//ios::sync_with_stdio(false);
	cin >> n;
	ans.resize(n,Inf);
	int k = 1;
	while (k < n) {
		vector<int> q1,q2;
		vector<bool> used(n),used2(n);
		for (int i = 0; i < n; i += 2*k) {
			for (int j = i; j < min(n,i+k); j++) {
				q1.push_back(j + 1);
				used[j] = true;
			}
		}
		printf("%d\n",q1.size());
		forn(i, 0, q1.size()) {
			printf("%d ",q1[i]);
		}
		printf("\n");
		fflush(stdout);
		forn(i, 0, n) {
			int tmp;
			scanf("%d",&tmp);
			if (!used[i]) ans[i] = min(ans[i], tmp);
		}
		for (int i = k; i < n; i += 2*k) {
			for (int j = i; j < min(n, i + k); j++) {
				q2.push_back(j + 1);
				used2[j] = true;
			}
		}
		printf("%d\n", q2.size());
		forn(i, 0, q2.size()) {
			printf("%d ", q2[i]);
		}
		printf("\n");
		fflush(stdout);
		forn(i, 0, n) {
			int tmp;
			scanf("%d", &tmp);
			if (!used2[i]) ans[i] = min(ans[i], tmp);
		}
		k *= 2;
	}
	printf("-1\n");
	forn(i, 0, n) printf("%d ",ans[i]);
	return 0;
}