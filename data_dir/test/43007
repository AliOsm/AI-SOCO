#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;

#define FOR(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define SZ(c) ((int)(c).size())

typedef long long LL;
const int N = 100005;
int a[N], n;
const int MOD = 1e9+7;
vector<int> fac[N];

LL bigmod(LL x, LL p) {
	if(p==0) return 1LL;
	if(p==1) return x;
	return bigmod(x*x%MOD, p/2) * (p%2? x:1LL) % MOD;
}

int c[N];
LL solve(vector<int> &b) {
	int m = SZ(b);
	for(int i=0;i<m;i++) {
		c[i] = lower_bound(a, a+n+1, b[i]) - a;
		c[i] = n - c[i];
	}
	LL ret = bigmod(m, c[0]) - bigmod(m-1, c[0]);
	ret = (ret%MOD+MOD)%MOD;
	for(int i=1;i<m;i++)
		ret = ret*bigmod(m-i, c[i]-c[i-1])%MOD;
	return ret;
}

void add(LL &ans, LL val) {
	ans = (ans+val)%MOD;
}
int main(void) {
	const int INF = 1e9;
	LL ans=0;
	scanf("%d", &n);
	for(int i=0;i<n;i++) scanf("%d", &a[i]);
	sort(a, a+n); a[n] = INF;
	for(int i=1;i<N;i++) fac[i].push_back(i);
	for(int i=1;i<N;i++) {
		LL r = solve(fac[i]);
		add(ans, r);
		FOR(it, fac[i]) if(i+*it < N) fac[i+*it].push_back(*it);
		fac[i]=vector<int>();
	}
	ans=(ans%MOD+MOD)%MOD;
	printf("%I64d\n", ans);
	return 0;
}
