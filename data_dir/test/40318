#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>   
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)2e5 + 123;
const ll inf = (ll)3e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

int n, q, s[N], b[N], sz, pref[N];
vector <int> v;

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                    

inline void Solve () {
   cin >> n;
   for (int i = 1; i <= n; i ++) cin >> s[i], v.pb (s[i]);
   sort (all (v));
   v.resize (unique (all (v)) - v.begin ());
   for (int i = 0; i < sz (v) - 1; i ++) {
      b[++ sz] = v[i + 1] - v[i];   
      //cout << b[sz] << ' ';
   }
   sort (b + 1, b + sz + 1);
   for (int i = 1; i <= sz; i ++) pref[i] = pref[i - 1] + b[i];
   cin >> q;
   while (q --) {
      int l, r;
      cin >> l >> r;
      r -= l - 1;
      int pos = lb (b + 1, b + sz + 1, r) - b;
      pos --;
      ll how = sz - pos + 1;
      ll ans = 1ll * r * how;
      ans += 1ll * pref[pos];
      cout << ans << ' ';
   }   
}                                     

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
// cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
