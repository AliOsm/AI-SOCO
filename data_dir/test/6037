#include <cstdio>
#include <vector>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <bitset>
using namespace std;
#define pii pair<int,  int>
#define pb push_back
#define x first
#define y second
#define mp make_pair
#define L(s) (int)s.size()
#define ll long long
#define inf 1000000000
inline int lcm(int x, int y) {
	if (!x || !y) return x + y;
	while( x && y) if (x >= y) x %= y; else y %= x;
	return x + y;
//	if (x == -1 || y == -1) return -1;
//	if (!x || !y) return x + y;
//	int cx = x, cy = y;
//	while(cx && cy) if (cx >= cy) cx %= cy; else cy %= cx;
//	int g = (cx + cy);
//	ll val = (ll)x  / g * y;
//	if (val > inf) return -1;
//	return (int) val;
}
int s[111111], d[111111], n, k, t;
vector<int> pos[111111];
int tr[111111 << 2];
void put(int v, int l, int r, int pos, int val) {
	tr[v] = lcm(tr[v], val);
	if (l + 1 == r) return;
	int mid = (l + r + 1) / 2;
	if (pos < mid) put(2 * v + 1, l, mid, pos, val);
	else put(2 * v + 2, mid, r, pos, val);
}
int get(int v, int l, int r, int st, int fn) {
	if (l == st && r == fn) return tr[v];
	int ret = 0, mid = (l + r + 1) / 2;
	if (st < mid) ret = lcm(ret, get(2 * v + 1, l, mid, st, min(mid, fn)));
	if (fn > mid) ret = lcm(ret, get(2 * v + 2, mid, r, max(st, mid), fn));
	return ret;
}
int main() {
	scanf("%d", &n);
	for(int i = 0; i < n; ++i) {
		scanf("%d", &s[i]);
		put(0, 0, n, i, s[i]);
		d[i] = s[i];
	}

	sort(d, d + n);
	k = unique(d, d + n) - d;
	for(int i = 0; i < n; ++i) {
		pos[lower_bound(d, d + k, s[i]) - d].pb(i);
	}

	scanf("%d", &t);
	while(t--) {
		int a, b;
		scanf("%d%d", &a, &b);
		int lcm = get(0, 0, n, a - 1, b);

		if (lcm == -1) {
			printf("%d\n", b - a + 1);
			continue;
		}

		int lcmpos = lower_bound(d, d + k, lcm) - d;
		if (lcmpos == k || d[0] > lcm || d[k - 1] < lcm || d[lcmpos] != lcm) {
			printf("%d\n", b - a + 1);
			continue;
		}

		int start = lower_bound(pos[lcmpos].begin(), pos[lcmpos].end(), a - 1) - pos[lcmpos].begin();
		int end = lower_bound(pos[lcmpos].begin(), pos[lcmpos].end(), b) - pos[lcmpos].begin();
		printf("%d\n", b - a + 1 - max(0, end - start));
	}
}
