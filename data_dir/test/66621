#include <bits/stdc++.h>

using namespace std;

const int N = 1e2;
const long long MX = ((long long)1e18) + 1LL;

long long dp[N][N], us[N][N], pw[N];
long long n;
string k;

long long to_number(string str) {
    long long ans = 0;
    long double x = 0;
    for(int i = int(str.size()) - 1; i >= 0; i--) {
        ans *= 10LL;
        x *= 10;
        ans += str[i] - '0';
        x += str[i] - '0';
    }
    if(x > 2e18)
        return MX;
    return min(MX, ans);
}

long long sum(long long a, long long b) {
    return min(a + b, MX);
}

long long mult(long long a, long long b) {
    long double ans = 1.0 * a * b;
    if(ans > 2e18)
        return MX;
    return min(a * b, MX);
}

long long calc(int i, long long j) {
    if(i >= k.size())
        return 0;
    if(us[i][j])
        return dp[i][j];
    us[i][j] = 1;
    dp[i][j] = MX + 1;

    for(int h = 1; h + i <= k.size(); h++) {
        if(h != 1 && k[h + i - 1] == '0')
            continue;
        if(to_number(k.substr(i, h)) >= n)
            break;
        long long t = sum(calc(i + h, j + 1), mult(to_number(k.substr(i, h)), pw[j]));
        if(t < dp[i][j])
            dp[i][j] = t;
    }
//    cout << i << " " << j << "  = " << dp[i][j] << "\n";
    return dp[i][j];
}

int main() {
    ios::sync_with_stdio(false);

    cin >> n;

    pw[0] = 1;
    for(int i = 1; i < N; i++)
        pw[i] = mult(pw[i - 1], n);

    cin >> k;
    reverse(k.begin(), k.end());

    cout << calc(0, 0) << "\n";


    return 0;
}
