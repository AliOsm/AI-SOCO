#include <bits/stdc++.h>

using namespace std;

const int N = 101;
const int M = N * N;

vector<int> g[N];
int from[M], to[M];
char let[M];
int dp[N][N][26];      

void dfs(int x, int y, int z) {
  dp[x][y][z] = 0;
  for (int id : g[x]) {
    int w = to[id];
    int l = let[id] - 'a';
    if (l < z) {
      continue;
    }
    if (dp[y][w][l] == -1) {
      dfs(y, w, l);
    }
    if (dp[y][w][l] == 0) {
      dp[x][y][z] = 1;
    }  
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    cin >> from[i] >> to[i] >> let[i];
    from[i]--; 
    to[i]--;
    g[from[i]].push_back(i);
  }
  memset(dp, -1, sizeof dp);
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      for (int k = 0; k < 26; k++) {
        if (dp[i][j][k] == -1) {
          dfs(i, j, k);
        }
      }
    }
  }
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      cout << (char) (1 - dp[i][j][0] + 'A');
    }
    cout << '\n';
  }
  return 0;
}