#include <iostream>
#include <iomanip>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <string>
#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <bitset>
#include <deque>
#include <map>
#include <queue>
#include <set>
#include <sstream>
using namespace std;

typedef long long ll;

struct state {
	int a, b, c;
	state(int a, int b, int c) :a(a), b(b), c(c) {}
};

const int N = 1e3;
int n, g[N][N], row[N];
vector<state> sol;

int main(int argc, char **argv) {
//	freopen("in.txt", "r", stdin);
	scanf("%d", &n);
	for (int i = 1; i < n; ++i) {
		int a, b;
		scanf("%d%d", &a, &b);
		--a; --b;
		g[a][b] = 1;
		++row[a];
	}
	for (int i = n - 1; i >= 0; --i) {
		int at = i;
		for (int j = i - 1; j >= 0; --j)
			if (row[j] > row[at])
				at = j;
		if (row[at] == 0)
			continue;
		if (at == i)
			continue;
		for (int j = 0; j < n; ++j)
			swap(g[i][j], g[at][j]);
		swap(row[i], row[at]);
		sol.push_back(state(at, i, 1));
	}
	int to = 0;
	for (int i = 0; i < n; ++i) {
		for (int j = to; j < n; ++j)
			if (g[i][j] == 1) {
				if (j != to) {
					for (int k = 0; k < n; ++k)
						swap(g[k][j], g[k][to]);
					sol.push_back(state(j, to, 2));
				}
				++to;
			}
	}
	printf("%d\n", (int)sol.size());
	for (int i = 0; i < sol.size(); ++i)
		printf("%d %d %d\n", sol[i].c, sol[i].a + 1, sol[i].b + 1);
	return 0;
}