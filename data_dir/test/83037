#include <bits/stdc++.h>
#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 1000000007
#define maxn 200005
#define IN freopen("input.txt","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define infd 1000000000.0 ;
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define sq 318
#define off 15
#define ceiling(x,y) ( x%y ? x/y +1 : x/y )

using namespace std ;

int par[100005] , op[100005] ;

int findPar(int u)
{
    if( par[u]==u ) return u;
    return par[u] = findPar(par[u]) ;
}

int mergeTree(int u  , int v)
{
    if( u==0 ) return v ;
    if( v==0 ) return u ;
    int parU = findPar(u) , parV = findPar(v) ;
    if(parU!=parV) par[parU] = parV ;
    return parV;
}

int main()
{
    string s , s1 , s2 ;
    char str[25] , str1[25] , str2[25] ;
    map <string,int> M ;

    int i , j , k , l  , m , n , q , u , v , parU , parV ;

    sf("%d %d %d",&n,&m,&q) ;

    for(i=1 ; i<=n ; i++){
        sf("%s",str) ;
        s = str ;
        M[s] = i ;
        par[i] = i ;
        op[i] = 0 ;
    }
    int c ;

    for(i=1 ; i<=m ; i++)
    {
        sf("%d %s %s",&c,str1,str2) ;
        s1 = str1 ; s2 = str2 ;
        u = M[s1] ; v = M[s2] ;
        parU = findPar(u) ; parV = findPar(v) ;

        if( (c==2 && parU==parV) || (c==1 && op[parU]==parV)  ) pf("NO\n") ;
        else{
            pf("YES\n") ;
            if(c==1)
            {
                int p = mergeTree(parU,parV) ;
                int p1 = mergeTree(op[parU] , op[parV] ) ;
                op[p] = p1 ;
                op[p1] = p ;
            }
            else{

                int p = mergeTree(parU,op[parV]) ;
                int p1 = mergeTree(parV,op[parU]) ;
                op[p] = p1 ;
                op[p1] = p ;
            }
        }

    }
    for(i=1 ; i<=q ; i++)
    {
        sf("%s %s",str1,str2) ;
        s1 = str1 ; s2 = str2 ;
        u = M[s1] ; v = M[s2] ;
        parU = findPar(u) ; parV = findPar(v) ;
        if(parU==parV) pf("1\n");
        else if( op[parU]==parV ) pf("2\n") ;
        else pf("3\n") ;
    }
    return 0 ;
}
