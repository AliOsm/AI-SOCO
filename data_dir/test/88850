#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define rep(i, a, b) for(int i=(a); i<(b); i++)
#define repi(i, a, b) for(int i=(a); i>(b); i--)
#define db(x) (cerr << #x << ": " << (x) << '\n')
#define sync ios_base::sync_with_stdio(false), cin.tie(NULL)
#define tests(t) int t; cin >> t; while(t--)
#define iceil(n, x) (((n) + (x) - 1) / (x))
#define ll long long
#define gcd __gcd
#define eb emplace_back
#define pb push_back
#define pf push_front
#define pob pop_back
#define pof pop_front
#define sz size()
#define all(v) (v).begin(), (v).end()
#define uni(v) sort(all(v)); (v).erase(unique(all(v)), (v).end())
#define pii pair<int, int>
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vi>
#define fi first
#define se second
#define pqueue priority_queue
#define bitcount(x) __builtin_popcount(x)
#define cps CLOCKS_PER_SEC
#define PI acos(-1.0)
#define EPS 1e-9
#define mod 1000000007
using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

template<typename T>
using minpq = priority_queue<T, vector<T>, greater<T>>;

template<typename T>
using maxpq = priority_queue<T>;

//All indexing is 0-based
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update> ordered_set;
//methods: find_by_order(k); & order_of_key(k);
//To make it an ordered_multiset, use pairs of (value, time_of_insertion)
//to distinguish values which are similar Or
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, 
             tree_order_statistics_node_update> ordered_multiset;

template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;
//ordered_map<int, int> my_map;

template<typename T>
void printv(const vector<T>& v) { for(auto i : v) cerr << i << ' '; cerr << '\n'; }

template<typename T>
void printv(const vector<pair<T, T>>& v) { for(auto p : v) cerr << "(" << p.fi << ", " << p.se << "), "; cerr << '\n'; }

//Returns no. of values x for which ceil(n / x) == y (y must be > 1).
inline ll CC(ll n, ll y) { return iceil(n, y-1) - iceil(n, y); }

//Returns no. of values x for which floor(n / x) == y
inline ll FF(ll n, ll y) { return n / y - n / (y+1); }

//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c; }
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c; }
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p; }

#define Inv Fermat

int power(int a, ll b,int p = mod)
{
    int res = 1;
    while(b > 0){
        if(b & 1) res = mul(res, a, p);
        a = mul(a, a, p);
        b >>= 1;
    }
    return res;
}

//Computes a^(-1) mod p
// p must be a prime no.
// Fermat's little theorem: a^(p-1) = 1(mod p)
//So, we have a^(p-2) = a^(-1) (mod p)
inline int Fermat(int a, int p = mod){ return power(a, p-2, p);}

#define N 100005
#define int ll
// #define trace(...) 42

#define div DIV 

int m, dp[N];
int inv[N];
vi div[N], pdiv[N]; //divisors and prime divisors.

void prep() {
    rep(i, 1, N) {
        if(i != 1 && !pdiv[i].size()) { //i is prime.
            for(int j = i; j < N; j += i) {
                pdiv[j].pb(i);
            }
        }
        for(int j = i; j < N; j += i) {
            div[j].pb(i);
        }
        inv[i] = Inv(i);
    }
}

inline bool bit(int n, int b) {
    return (n >> b) & 1;
}

int rec(int x) {
    if(x == 1) return 0;
    int &ans = dp[x];

    if(ans != -1) return ans;
    ans = 0;
    int k;

    for(int y : div[x]) {
        int a = x / y;
        int n = m / y;
        int b = 0;

        //Now, we find b (1 <= b <= n) s.t. gcd(a, b) = 1.
        vi v = pdiv[a];
        int np = v.size();
        for(int mask = 0; mask < (1 << np); mask++) {
            int cnt = bitcount(mask);
            int k = 1;
            rep(i, 0, np) if(bit(mask, i)) k *= v[i];
            (cnt % 2 == 0) ? (b += n / k) : (b -= n / k);
        }
        if(y == x) k = b;
        else       ans = add(ans, mul(b, rec(y)));
    }

    ans = mul(ans, inv[m]);
    ans = add(ans, 1);
    ans = mul(ans, m);
    assert(k < m);
    ans = mul(ans, inv[m-k]);

    // trace(x, ans);
    return ans;
}

main()
{   
    #ifndef ONLINE_JUDGE
        freopen("/home/tarun/Desktop/input.txt", "r", stdin);
     // freopen("/home/tarun/Desktop/output.txt", "w", stdout);
    #endif
    sync;
    clock_t clk = clock();
    cerr << "I will return...\n";

    cin >> m;
    memset(dp, -1, sizeof dp);
    prep();

    int ans = 0;
    rep(i, 1, m+1) ans = add(ans, rec(i));

    ans = mul(ans, inv[m]);
    ans = add(ans, 1);
    cout << ans << '\n';

    cerr << "...don't you ever hang your head.\n";
    cerr << "Time (in ms): " << (double)(clock() - clk) * 1000.0 / cps << '\n';
}

//Compile using:
//g++ -o filename.exe --std=c++11 filename.cpp
//Use -D CP for defining a macro CP in the local environment


