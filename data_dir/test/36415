#include <iostream>
#include <stdio.h>
#include <bits/stdc++.h>
#include <math.h>
#include <string>
#include <sstream>
#define ll long long
#define F first
#define S second
#define pb push_back
#define ld long double
#define pll pair<long long,long long>
#define pld pair<long double,long double>
#define ios     ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
using namespace std;
ll mod=1000000007;
ll gcd (ll a,ll b)
{
    if(b==0)
        return a;
    else
        return gcd(b,a%b);
}
ll fastexp(ll x ,ll n)
{
    ll result =1;
    while(n>0)
    {
        if(n%2==1)
            result*=x;
        x*=x;
        n=n/2;
    }
    return result;
}

ll modularExp(ll x,ll n,ll mod)
{
    ll result=1;
    while(n>0)
    {
        if(n%2==1)
            result=(result*x)%mod;
        x=((x%mod)*(x%mod))%mod;
        n=n/2;
    }
    return (result)%mod;
}
bool isPrime(ll n)
{
    for(ll i=2;i*i<=n;i++)
        if(n%i==0)
            return false;
    return true;
}
bool mycomp(pll &a,pll &b)
{
    if(a.F!=b.F)
        return a.F < b.F;
    else
        return a.S < b.S;
}
vector<ll> v[100005];
set<ll> st[100005];
vector<ll> col(100005),visited(100005);
void dfs(ll node)
{
     visited[node]=1;
     for(auto it:v[node])
     {
          if(!visited[it])
               dfs(it);
          if(col[it]!=col[node])
               st[col[node]].insert(col[it]);
     }
}

void solve()
{
     ll n,m;
     cin>>n>>m;
     ll i;
     for(i=1;i<=n;i++)
          cin>>col[i];
     for(i=1;i<=m;i++)
     {
          ll x,y;
          cin>>x>>y;
          v[x].pb(y);
          v[y].pb(x);
     }
     for(i=1;i<=n;i++)
          if(!visited[i])
               dfs(i);
     ll ans=col[1];
     ll mt=st[col[1]].size();
     for(i=2;i<=n;i++)
     {
          if(st[col[i]].size()>mt)
          {
               mt=st[col[i]].size();
               ans=col[i];
          }
          else if(st[col[i]].size()==mt)
               ans=min(ans,col[i]);
     }    // ans=max(ans,(ll)st[i].size());
     cout<<ans;
     
}

int main()
{
    ios;
    ll t;
//    cin>>t;
  t=1;
    while(t--)
        solve();
}
