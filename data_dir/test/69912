#include <bits/stdc++.h>

#define mp make_pair
#define pb push_back
#define sc second
#define fr first
#define pii pair<int,int>
#define pll pair<ll,ll>
#define vi vector<int>
#define all(x) x.begin(),x.end()
#define N 101010
#define M 202
#define SZ size()
#define ll long long
#define OOL 1e18
#define memset(x,y) memset((x),(y),sizeof (x))
using namespace std;

ll n,m,k;
vector<pll> in[N],out[N];
ll best[N],d[N];
ll dp[N][M];
ll solve(ll i,ll j){
    if(i>=n+1){
        return 0;
    }
    ll &ret=dp[i][j];
    if(ret!=-1)return ret;
    ret=solve(d[i],j)+best[i];
    if(j)
        ret=min(ret,solve(i+1,j-1));
    return ret;
}
int main(){
    cin >> n >> m >> k;
    for(int i=0;i<k;i++){
        ll d,l,r,c;
        scanf("%lld%lld%lld%lld",&l,&r,&d,&c);
        in[l].pb(mp(c,d));
        out[r].pb(mp(c,d));
    }
    multiset<pii> se;
    for(int i=1;i<=n;i++){
        for(pll x:in[i]){
            se.insert(x);
        }
        if(se.SZ){
            pll cur=*(--se.end());
            best[i]=cur.fr;
            d[i]=max((ll)i+1,cur.sc+1);
        }
        else{
            d[i]=i+1;
        }
        for(pll x:out[i]){
            se.erase(se.find(x));
        }
    }
    memset(dp,-1);
    cout << solve(1,m);
}
/*
50 0 5
3 50 50 1
3 36 40 1
12 23 40 1
11 16 48 1
34 45 48 1
*/
