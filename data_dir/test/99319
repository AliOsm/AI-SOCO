#include<bits/stdc++.h>

#define ll long long
#define Add_Speed ios_base::sync_with_stdio(0);cin.tie(NULL);
#define pb push_back
#define mp make_pair
#define f first
#define sz size()
#define s second
#define all(s) s.begin(), s.end()
#define file(s) freopen(s".in","r",stdin); freopen(s".out","w",stdout);
#define inf INT_MAX    

                                                                                                                                            
using namespace std;

const int maxn = 5e5 + 10;
const int maxM = 5e5;
const int mod = 1e9 + 7;
const int maxlog = 20;
const int P = mod;        

ll tsum[4 * maxn];
int n, a[maxn], m;
pair<int ,int> tmax[4 * maxn];
void build(int v = 1, int tl = 1, int tr = n){
  if(tl == tr){
    tmax[v] = {a[tl], tl};
    tsum[v] = a[tl];
    return;
  }
  int tm = (tl + tr) >> 1;
  build(v + v, tl, tm);
  build(v + v + 1, tm + 1, tr);
  tsum[v] = tsum[v + v] + tsum[v + v + 1];
  tmax[v] = max(tmax[v + v], tmax[v + v + 1]);
}
ll getS(int l, int r, int v = 1, int tl = 1, int tr = n){
  if(l > r || tr < l || tl > r)
    return 0;
  if(l <= tl && tr <= r)
    return tsum[v];
  int tm = (tl + tr) >> 1;
  return getS(l, r, v + v, tl, tm) + getS(l, r, v + v + 1, tm + 1, tr);
}
pair<int, int> getM(int l, int r, int v = 1, int tl = 1, int tr = n){
  if(l > r || tr < l || tl > r)
    return mp(0, 0);
  if(l <= tl && tr <= r)
    return tmax[v];
  int tm = (tl + tr) >> 1;
  return max(getM(l, r, v + v, tl, tm), getM(l, r, v + v + 1, tm + 1, tr));
}
void upd(int pos, int val, int v = 1, int tl = 1, int tr = n){
  if(tl == tr){
    tmax[v] = {val, tl};
    tsum[v] = val;
    return;
  }
  int tm = (tl + tr) >> 1;
  if(pos <= tm)
    upd(pos, val, v + v, tl, tm);
  else
    upd(pos, val, v + v + 1, tm + 1, tr);
  tsum[v] = tsum[v + v] + tsum[v + v + 1];
  tmax[v] = max(tmax[v + v], tmax[v + v + 1]);
}
int main () {
  Add_Speed
  cin >> n >> m;
  for(int i = 1; i <= n; i++)
    cin >> a[i];
  build();
  while(m--){
    int t, l, r, x;
    cin >> t >> l >> r;
    if(t == 1)
      cout << getS(l, r) << endl;
    else if(t == 3){
      upd(l, r);
    }else{
      cin >> x;
      while(1){
        pair<int, int> cur = getM(l, r);
        if(cur.f < x)
          break;
        upd(cur.s, cur.f % x); 
      }
    }
  } 
}
