#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <vector>
#include <string>
#include <cstring>
#include <map>
#include <set>
#include <queue>
#include <unordered_set>
#include <ctime>

using namespace std;
const int N = 300001;
const long long INF = 1e18;

struct Edge
{
	int v, c, pos;
	Edge(int v, int c, int pos) : v(v), c(c), pos(pos) {};
	Edge(){};
};


vector < Edge > G[N];
int n, m, s, u, v, w;
long long dist[N];
int parent[N];
int c[N];
vector < int > pos;
set < pair < long long, int > > st;

void djiekstra(int s)
{
	long long ans = 0;
	for (int i = 1; i <= n; ++i)
		dist[i] = INF;
	dist[s] = 0;
	for (int i = 1; i <= n; ++i)
		st.insert(make_pair(dist[i], i));
	while (!st.empty())
	{
		int v = (*st.begin()).second;
		long long d = (*st.begin()).first;
		st.erase(st.begin());
		for (int i = 0; i < G[v].size(); ++i)
		{
			if (dist[G[v][i].v] > d + G[v][i].c || (dist[G[v][i].v] == d + G[v][i].c && c[G[v][i].v] > G[v][i].c))
			{
				st.erase(make_pair(dist[G[v][i].v], G[v][i].v));
				dist[G[v][i].v] = d + G[v][i].c;
				st.insert(make_pair(dist[G[v][i].v], G[v][i].v));
				c[G[v][i].v] = G[v][i].c;
				parent[G[v][i].v] = G[v][i].pos;
				
			}
		}
	}
	for (int i = 1; i <= n; ++i)
	{
		if (i == s)
			continue;
		ans += c[i];
		pos.push_back(parent[i]);
	}
	printf("%I64d\n", ans);
	for (int i = 0; i < pos.size(); ++i)
		printf("%d ", pos[i] + 1);
		
}




int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
/*#else
	freopen(TASK".in", "r", stdin);
	freopen(TASK".out", "w", stdout);*/
#endif
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; ++i)
	{
		scanf("%d%d%d", &u, &v, &w);
		G[u].push_back(Edge(v, w, i));
		G[v].push_back(Edge(u, w, i));
	}
	scanf("%d", &s);
	djiekstra(s);
	
	return 0;
}