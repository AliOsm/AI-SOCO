#define _CRT_SECURE_NO_WARNINGS
#include "bits/stdc++.h"

#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) ((x)&(-(x)))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define sz(x) ((int)x.size())
#define EX0 exit(0);

typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
typedef vector<ll> VLL;
typedef vector<int> VI;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9 + 7;
const ll inf = 1e9 + 7;
const ld eps = 1e-9;
const db PI = atan(1) * 4;

template<typename T, typename S>inline bool upmin(T&a, const S&b) { return a > b ? a = b, 1 : 0; }
template<typename T, typename S>inline bool upmax(T&a, const S&b) { return a < b ? a = b, 1 : 0; }

ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a%b); }
namespace SOLVE {
    vector<VI> edges;
    VI ids, low_link;
    VI on_stack;
    stack<int> s;
    int scc_count = 0;
    int id = 0;
    
    void dfs(int at) {
        s.push(at);
        on_stack[at] = 1;
        ids[at] = low_link[at] = id++;
        
        for (int to : edges[at]) {
            if (ids[to] == -1) {
                dfs(to);
                low_link[at] = min(low_link[at], low_link[to]);
            }
            else if (on_stack[to]) {
                low_link[at] = min(low_link[at], ids[to]);
            }
        }
        if (ids[at] == low_link[at]) {
            while (sz(s)) {
                low_link[s.top()] = ids[at];
                on_stack[s.top()] = 0;
                if (s.top() == at) {
                    s.pop();
                    break;
                }
                s.pop();
            }
            scc_count++;
        }
    }
    
    void main() {
        int n, temp;
        cin >> n;
        edges.resize(n);
        ids.resize(n, -1);
        on_stack.resize(n);
        low_link.resize(n, 10000);
        
        REP(i, 0, n) {
            REP(j, 0, n) {
                scanf("%d",&temp);
                if (temp != 0) {
                    edges[i].push_back(j);
                }
            }
        }
        
        REP(i, 0, n) {
            if (ids[i] == -1) {
                dfs(i);
            }
        }
        
        if (scc_count == 1) cout << "YES" << endl;
        else cout << "NO" << endl;
        
        
    }
}


signed main() {
    
    int t;
    //    in(t);
    t = 1;
    while (t--) {
        SOLVE::main();
        
    }
    
    return 0;
}
