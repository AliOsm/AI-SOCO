#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

int n, m, k;
string s, t;
int LCS[1001][1001][11][2];

int main() {
    ios::sync_with_stdio(false);
    cin >> n >> m >> k;
    cin >> s >> t;
    for(int i = 0; i <= n; i++) {
        for(int gaps = 0; gaps <= k; gaps++) {
            LCS[i][0][gaps][0] = 0;
            LCS[i][0][gaps][1] = 0;
        }
    }
    for(int j = 0; j <= m; j++) {
        for(int gaps = 0; gaps <= k; gaps++) {
            LCS[0][j][gaps][0] = 0;
            LCS[0][j][gaps][1] = 0;
        }
    }
    for(int i = 0; i <= n; i++) {
        for(int j = 0; j <= m; j++) {
            LCS[i][j][0][0] = 0;
            LCS[i][j][0][1] = 0;
        }
    }
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= m; j++) {
            for(int gaps = 1; gaps <= k; gaps++) {
                if(s[i-1] == t[j-1]) {
                    LCS[i][j][gaps][0] = max(
                        max(LCS[i-1][j][gaps][0], LCS[i][j-1][gaps][0]),
                        max(LCS[i-1][j][gaps][1], LCS[i][j-1][gaps][1])
                    );
                    LCS[i][j][gaps][1] = max(1 + LCS[i-1][j-1][gaps-1][0], 1 + LCS[i-1][j-1][gaps][1]);
                } else {
                    LCS[i][j][gaps][0] = max(
                        max(LCS[i-1][j][gaps][0], LCS[i][j-1][gaps][0]),
                        max(LCS[i-1][j][gaps][1], LCS[i][j-1][gaps][1])
                    );
                    LCS[i][j][gaps][1] = 0;
                }
            }
        }
    }
    int ans = 0;
    for(int i = 0; i <= n; i++) {
        for(int j = 0; j <= m; j++) {
            ans = max(ans, LCS[i][j][k][0]);
            ans = max(ans, LCS[i][j][k][1]);
        }
    }
    cout << ans << endl;
    return 0;
}
