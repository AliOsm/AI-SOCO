#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

#define PB push_back
//#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)


int r[505][505], g[505][505];
int y[505][505], b[505][505];
const int MAXN = 505;
const int MAXM = 505;
long long arr[MAXN][MAXM];
const int LOGN = log2(MAXN) + 1;
const int LOGM = log2(MAXM) + 1;
long long sp[MAXN][MAXM][LOGN + 1][LOGM + 1];
int prelog[max(MAXN, MAXM)];
int N, M;

void init_log()
{
	prelog[1] = 0;
	for( int i = 2; i < max(MAXN, MAXM); ++i ) prelog[i] = prelog[i/2] + 1;
}

void init()
{
	for( int i = 0; i < N; ++i )
		for( int j = 0; j < M; ++j )
			sp[i][j][0][0] = arr[i][j];

	for( int k = 1; k <= LOGN; ++k ) {
        for( int i = 0; i + (1 << k) <= N; ++i ) {
            for( int j = 0; j < M; ++j ) {
                sp[i][j][k][0] = max(sp[i][j][k - 1][0] , sp[i + (1 << (k - 1))][j][k - 1][0]);
            }
        }
    }

    for( int l = 1; l <= LOGM; ++l ) {
        for( int k = 0; k <= LOGN; ++k ) {
            for( int i = 0; i + (1 << k) <= N; ++i ) {
                for( int j = 0; j + (1 << l) <= M; ++j ) {
                    sp[i][j][k][l] = max(sp[i][j][k][l - 1] , sp[i][j + (1 << (l - 1))][k][l - 1]);
                }
            }
        }
    }
}

long long query( int r1, int c1, int r2, int c2 )
{
	int a = prelog[(r2 - r1) + 1];
    int b = prelog[(c2 - c1) + 1];
    return max(max(sp[r1][c1][a][b], sp[r2 - (1 << a) + 1][c1][a][b]), max(sp[r1][c2 - (1 << b) + 1][a][b], sp[r2 - (1 << a) + 1][c2 - (1 << b) + 1][a][b]));
}

int sumr( int r1, int c1, int r2, int c2 )
{
	return r[r2][c2] - r[r2][c1-1] - r[r1-1][c2] + r[r1-1][c1-1];
}

int sumy( int r1, int c1, int r2, int c2 )
{
	return y[r2][c2] - y[r2][c1-1] - y[r1-1][c2] + y[r1-1][c1-1];
}

int sumg( int r1, int c1, int r2, int c2 )
{
	return g[r2][c2] - g[r2][c1-1] - g[r1-1][c2] + g[r1-1][c1-1];
}

int sumb( int r1, int c1, int r2, int c2 )
{
	return b[r2][c2] - b[r2][c1-1] - b[r1-1][c2] + b[r1-1][c1-1];
}

bool check( int r1, int c1, int r2, int c2, int len )
{
	return (query( r1, c1, r2, c2 ) >= len);
}

int main()
{
	optimize();
	init_log();
	int n, m, q;
	cin >> n >> m >> q;
	N = n+1, M = m+1;
	string s[n+1];
	for( int i = 1; i <= n; ++i ) {
		cin >> s[i];
		s[i] = '#' + s[i];
	}
	for( int i = 1; i <= n; ++i ) {
		for( int j = 1; j <= m; ++j ) {
			r[i][j] = r[i-1][j]+r[i][j-1]-r[i-1][j-1];
			y[i][j] = y[i-1][j]+y[i][j-1]-y[i-1][j-1];
			g[i][j] = g[i-1][j]+g[i][j-1]-g[i-1][j-1];
			b[i][j] = b[i-1][j]+b[i][j-1]-b[i-1][j-1];
			if( s[i][j] == 'R' ) ++r[i][j];
			if( s[i][j] == 'Y' ) ++y[i][j];
			if( s[i][j] == 'G' ) ++g[i][j];
			if( s[i][j] == 'B' ) ++b[i][j];
		}
	}
	for( int i = 1; i <= n-1; ++i ) {
		for( int j = 1; j <= m-1; ++j ) {
			int lim = min( min(i, j), min(n-i+1, m-j+1) );
			for( int k = 1; k <= lim; ++k ) {
				if( sumr( i-k+1, j-k+1, i, j ) != k*k ) break;
				if( sumg( i-k+1, j+1, i, j+k ) != k*k ) break;
				//dbg(-2);
				if( sumy( i+1, j-k+1, i+k, j ) != k*k ) break;
				//dbg(-3);
				if( sumb( i+1, j+1, i+k, j+k ) != k*k ) break;
				//dbg(-4);
				arr[i][j] = k;
			}
		}
	}
	init();
	//dbg(query(2, 2, 2, 2));
	//for( int i = 1; i <= n; ++i )
		//for( int j = 1; j <= m; ++j ) dbg(i, j, query(i, j, i, j));
	for( int i = 0; i < q; ++i ) {
		int r1, c1, r2, c2;
		cin >> r1 >> c1 >> r2 >> c2;
		int lo = 1, hi = min((r2-r1+1)/2, (c2-c1+1)/2), mid;
		while( lo <= hi ) {
			mid = (lo + hi)/2;
			if( check( r1+mid-1, c1+mid-1, r2-mid, c2-mid, mid ) ) lo = mid+1;
			else hi = mid-1;
		}
		int ans = hi*hi*4;
		cout << ans << endl;
	}
}





















