#include "bits/stdc++.h"
using namespace std;
char Array[5201][5201];
int dp[5201][5201];
char Str[1301];
vector<int> Factors;

void FillBits( int row , int N ){
    int i , j , k , Num , limit = ( N / 4 );

    for( i = 1 , k = 1 ; i <= limit ; ++i , k += 5 ){
        if( Str[i] >= '0' && Str[i] <= '9' ) Num = Str[i] - '0';
        else Num = ( Str[i] - 'A' ) + 10;
        j = 0;
        k += 3;

        while( j <= 3 ){
            Array[row][k] = ( ( Num >> j ) & 1 ) + '0';
            ++j;
            --k;
        }
    }
}

bool IsPossible( int N , int Comp ){
    if( Comp == 1 ) return true;
    int i , j , Num , Count = Comp * Comp;

    for( i = Comp ; i <= N ; i += Comp ){
        for( j = Comp ; j <= N ; j += Comp ){
            Num = dp[i][j] - dp[i - Comp][j] - dp[i][j - Comp] + dp[i - Comp][j - Comp];
            if( Num != 0 && Num != Count ) return false;
        }
    }

    return true;
}

int FindMaxCompression( int N ){
    int i , j;

    for( i = 1 ; i <= N ; ++i ){
        for( j = 1 ; j <= N ; ++j ){
            if( Array[i][j] == '1' ) dp[i][j] = dp[i][j - 1] + 1;
            else dp[i][j] = dp[i][j - 1];
        }
    }

    for( i = 1 ; i <= N ; ++i ){
        for( j = 1 ; j <= N ; ++j )
            dp[j][i] += dp[j - 1][i];
    }

    for( i = int(Factors.size()) - 1 ; i >= 0 ; --i ){
        if( IsPossible( N , Factors[i] ) ) return Factors[i];
    }

    return 1;
}

void FindFactors( int N ){
    int i , limit = sqrt( N );
    if( ( limit + 1 ) * ( limit + 1 ) <= N ) ++limit;
    else if( limit * limit > N ) --limit;

    for( i = 1 ; i < limit ; ++i ){
        if( N % i == 0 ){
            Factors.emplace_back( i );
            Factors.emplace_back( N / i );
        }
    }

    if( N % limit == 0 ){
        Factors.emplace_back( limit );
        if( limit != N / limit ) Factors.emplace_back( N / limit );
    }

    sort( Factors.begin() , Factors.end() );
}

int main(){
    int N , i;
    scanf( "%d" , &N );

    for( i = 1 ; i <= N ; ++i ){
        scanf( "%s" , Str + 1 );
        FillBits( i , N );
    }

    FindFactors( N );
    printf( "%d\n" , FindMaxCompression( N ) );
    return 0;
}