#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;



void imprimirVector (vector<int> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}


int minimoMap (map<char, int> q)
{
	int mini = 500000000;
	for(auto p : q)
	{
		if (p.second < mini)
			mini = p.second;
	}
	return mini;
} 

struct Par
{
	Par(int xx, int yy)
	{
		x = xx;
		y = yy;
	}
	int x,y;
};

int main()
{
	string a,b,c;
	cin >> a >> b >> c;
	map<char,int> qa;
	map<char,int> qb;
	map<char,int> qc;
	
	forn(i,a.size())
		qa[a[i]]++;
	forn(i,b.size())
		qb[b[i]]++;
	forn(i,c.size())
		qc[c[i]]++;
	
	int maxB = 0;
	int maxC = 0;
	while (minimoMap(qa) >= 0)
	{
		for(auto q : qb)
			qa[q.first] -= q.second;
		maxB++;
			
	}
	//debug(maxB);
	for(auto q : qb)
		qa[q.first] += q.second;
	maxB--;
	//debug(maxB);
	Par maxi = Par(maxB,maxC);
	map<char,int> maxiQ;
	while (maxB >= 0)
	{
		while (minimoMap(qa) >= 0)
		{
			for(auto q : qc)
				qa[q.first] -= q.second;
			maxC++;
		}
		for(auto q : qc)
			qa[q.first] += q.second;
		maxC--;
		if (maxi.x + maxi.y < maxB + maxC)
		{
			//debug(maxB);
			//debug(maxC);
			maxi = Par(maxB,maxC);
			//cout << " --- " << endl;
		}
		maxB--;
		for(auto q : qb)
			qa[q.first] += q.second;
	}
	forn(i,maxi.x)
	{
		for(auto q : qb)
			maxiQ[q.first] -= q.second;
		cout << b;
	}
	forn(i,maxi.y)
	{
		for(auto q : qc)
			maxiQ[q.first] -= q.second;
		cout << c;
	}
	
	forn(i,a.size())
		maxiQ[a[i]]++;
	for(auto q : maxiQ)
		forn(i,q.second)
			cout << q.first;
	cout << endl;
	
	
	
	return 0;
}



