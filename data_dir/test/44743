#include <bits/stdc++.h>
using namespace std;
using ii = pair<int, int>;
int BAD = (int) 2e9;
struct State {
    int city, visited, time, prev;
    State(int city, int visited, int time, int prev) :
        city(city), visited(visited), time(time), prev(prev) {}
};
int ri() {
    int tmp; cin >> tmp;
    return tmp;
}
int main() {
    int n = ri(), m = ri(), T = ri();
    vector<vector<ii>> adj(n);
    for (int i = 0; i < m; i++) {
        int u = ri() - 1;
        int v = ri() - 1;
        int t = ri();
        adj[u].push_back(make_pair(v, t));
    }
    auto cmp = [] (const State & a, const State & b) {
        return a.time > b.time;
    };
    priority_queue<State, vector<State>, decltype(cmp)> pq(cmp);
    pq.push(State(0, 1, 0, -1));
    vector<vector<int>> prev(n, vector<int>(n + 1, BAD));
    while (!pq.empty()) {
        State state = pq.top(); pq.pop();
        if (state.time > T) break;
        if (prev[state.city][state.visited] != BAD) continue;
        prev[state.city][state.visited] = state.prev;
        for (auto & nxt : adj[state.city]) {
            pq.push(State(nxt.first, state.visited + 1, state.time + nxt.second, state.city));
        }
    }
    for (int visited = n; visited >= 0; visited--) {
        if (prev[n - 1][visited] != BAD) {
            cout << visited << endl;
            int cur = n - 1, vis = visited;
            vector<int> res;
            while (cur != -1) {
                res.push_back(cur + 1);
                cur = prev[cur][vis];
                vis--;
            }
            reverse(res.begin(), res.end());
            for (int val : res) cout << val << " ";
            cout << endl;
            return 0;
        }
    }
}


