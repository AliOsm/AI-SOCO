#include <bits/stdc++.h>
using namespace std;
using ll = long long;

const int maxn = 2005;
int n, m;
char grid[maxn][maxn];
int comp[maxn][maxn];
int r, c, x, y;
int sz[maxn*maxn];
bool seen[maxn*maxn];

set<int> L[maxn*maxn], R[maxn*maxn];

int main() {
    ios_base::sync_with_stdio(false); cin.tie(NULL);
    cin >> n >> m;
    cin >> r >> c >> x >> y;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> grid[i][j];
        }
    }
    int pt = 1;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (grid[i][j] == '*') continue;
            if (i == 0 || grid[i-1][j] == '*') comp[i][j] = pt++;
            else comp[i][j] = comp[i-1][j];

            sz[comp[i][j]]++;
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 1; j < m; j++) {
            if (grid[i][j] == '*') continue;
            if (j > 0 && grid[i][j-1] == '.') {
                L[comp[i][j]].insert(comp[i][j-1]);
                R[comp[i][j-1]].insert(comp[i][j]);
            }
        }
    }
    queue<pair<int,pair<int,int>>> q;
    int ans = 0;
    q.push({comp[r-1][c-1],{x,y}});
    seen[comp[r-1][c-1]] = true;
    while (!q.empty()) {
        auto f = q.front(); q.pop();
        int i = f.first;
        int X = f.second.first;
        int Y = f.second.second;
        assert(sz[i] > 0);
        ans += sz[i];

        if (X > 0) {
            for (int j: L[i]) {
                if (seen[j]) continue;
                seen[j] = true;
                q.push({j,{X-1,Y}});
            }
        }

        if (Y > 0) {
                for (int j: R[i]) {
                if (seen[j]) continue;
                seen[j] = true;
                q.push({j,{X,Y-1}});
            }
        }
    }
    cout << ans << '\n';
}

