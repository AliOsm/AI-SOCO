/**
 *    author:  skmonir
 *    created: 16.09.2017
**/
#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <typename T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <typename T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <typename T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <typename T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

const int N = (int) 2e5 + 5;
const int INF = (int) 1e9 + 7;
const long long MOD = (long long) 1e9 + 7;

vector <int> g[N], t[N];
int col[N], F[N], G[N], d;

void Compress(int u, int p, int prv) {
    FOR (i, 1, g[u].size()) {
        int v = g[u][i - 1];
        if (v == p) continue;
        if (col[prv] != col[v]) {
            t[prv].push_back(v);
            Compress(v, u, v);
        } else Compress(v, u, prv);
    }
}

void Diameter(int u, int p) {
    vector <int> sub;
    FOR (i, 1, t[u].size()) {
        int v = t[u][i - 1];
        if (v == p) continue;
        Diameter(v, u);
        sub.push_back(F[v]);
    }
    sort(rall(sub));
    F[u] = G[u] = 0;
    if (!sub.empty()) F[u] = 1 + sub[0];
    if (sub.size() > 1) G[u] = 2 + sub[0] + sub[1];
    umax(d, max(F[u], G[u]));
}

int main() {
    int n; Int(n);
    FOR (i, 1, n) Int(col[i]);
    FOR (i, 2, n) {
        int u, v; Int(u), Int(v);
        g[u].push_back(v);
        g[v].push_back(u);
    }

    Compress(1, 1, 1);
    Diameter(1, 1);

    printf("%d\n", (d + 1) / 2);

    return 0;
}