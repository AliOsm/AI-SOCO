#include<iostream>
#include<vector>
#include<map>
#include<set>
#include<cassert>
#include<cassert>
#include<unordered_map>
#include<unordered_set>
#include<functional>
#include<queue>
#include<stack>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<sstream>
#include<iomanip>
#include<cstdio>
#include<cstdlib>
#include<numeric>
#include<random>
#include<chrono>
#include<bitset>
using namespace std;

#define all(x) (x).begin(), (x).end()
#define pb push_back
#define xx first
#define yy second
#define sz(x) (int)(x).size()
#define gc getchar
#define IO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define mp make_pair

#ifndef ONLINE_JUDGE
#  define LOG(x) (cerr << #x << " = " << (x) << endl)
#else
#  define LOG(x) ((void)0)
#endif

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const double PI=3.1415926535897932384626433832795;
const ll INF = 1LL<<62;
const ll MINF = -1LL<<62;

template<typename T> T getint() {
	T val=0;
	char c;
	
	bool neg=false;
	while((c=gc()) && !(c>='0' && c<='9')) {
		neg|=c=='-';
	}

	do {
		val=(val*10)+c-'0';
	} while((c=gc()) && (c>='0' && c<='9'));

	return val*(neg?-1:1);
}

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); uniform_int_distribution<int>(0, n-1)(rng)


int main() {
	IO;
	int n,k;
	cin>>n>>k;
	string t;
	cin>>t;
	vector<int> arr(n);
	for(int i=0;i<sz(t);++i) arr[i]=t[i]=='R';
	
	vector<vector<int>> ops;
	while(1) {
		bool ok=false;
		for(int i=0;i+1<n;++i) {
			ok|=(arr[i]>arr[i+1]);
		}
		
		if(!ok) break; 
		
		ops.push_back({});
		vector<int>& curr=ops.back();
		for(int i=0;i+1<n;++i) {
			if(arr[i]==1 && arr[i+1]==0) {
				curr.push_back(i+1);
				swap(arr[i], arr[i+1]);
				i++;
			}	
		}
	}
	//~ LOG(sz(ops));
	//~ LOG(k);
	if(sz(ops)>k) {
		cout<<"-1\n";
		return 0;
	}
	int need=k-sz(ops);
	vector<vector<int>> ans;
	for(auto i:ops) {
		ans.pb({});
		for(auto j:i) {
			if(need>0) {
				ans.back().pb(j);
				ans.pb({});
				need--;
			}else {
				ans.back().pb(j);
			}
		}
		
		if(ans.back().empty()) {
			need++;
			ans.pop_back();
		}
		
	}
	
	if(need==0) {
		for(auto i:ans) {
			cout<<sz(i);
			for(auto j:i) cout<<" "<<j;
			cout<<"\n";
		}
	}else {
		cout<<"-1\n";
	}
	

	return 0;
}
