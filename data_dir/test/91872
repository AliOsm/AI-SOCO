#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

vector < pair < pair < int, int >, pair < int, int > > > solution;


inline void add(int x1, int y1, int x2, int y2) {
	solution.push_back({{x1, y1}, {x2, y2}});
}

inline void from_to(int x1, int y1, int x2, int y2) {
	if (x1 != x2) {
		add(x1, y1, x2, y1);
	}
	if (y1 != y2) {
		add(x2, y1, x2, y2);
	}
}

int main() {
	int n, m;
	cin >> n >> m;
	vector < vector < string > > before(n, vector < string>(m, ""));

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> before[i][j];
			reverse(before[i][j].begin(), before[i][j].end());
		}
	}

	vector < int > cnt0(m, 0), cnt1(m, 0);

	for (int j = 1; j < m; j++) {
		for (const auto& ch: before[0][j]) {
			if (ch == '0') {
				add(0, j, 0, 0);
			} else {
				add(0, j, 1, j);
				cnt1[j]++;
			}
		}
	}

	for (int j = 1; j < m; j++) {
		for (const auto& ch: before[1][j]) {
			if (ch == '1') {
				add(1, j, 1, 0);
			} else {
				add(1, j, 0, j);
				cnt0[j]++;
			}
		}
	}

	for (int j = 1; j < m; j++) {
		for (int tmp_ = 0; tmp_ < cnt0[j]; tmp_++) {
			add(0, j, 0, 0);
		}
	}

	for (int j = 1; j < m; j++) {
		for (int tmp_ = 0; tmp_ < cnt1[j]; tmp_++) {
			add(1, j, 1, 0);
		}
	}

	for (int i = 2; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if ((i == 0 && j == 0) || (i == 1 && j == 0)) {
				continue;
			}
			for (const auto& ch: before[i][j]) {
				if (ch == '0') {
					from_to(i, j, 0, 0);
				} else {
					from_to(i, j, 1, 0);
				}
			}
		}
	}

	for (const auto& ch: before[0][0]) {
		if (ch == '0') {
			add(0, 0, 0, 1);
			add(0, 1, 0, 0);
		} else {
			add(0, 0, 1, 0);
		}
	}

	for (const auto& ch: before[1][0]) {
		if (ch == '1') {
			add(1, 0, 1, 1);
			add(1, 1, 1, 0);
		} else {
			add(1, 0, 0, 0);
		}
	}

	// 00000
	// 11111


	vector < vector < string > > after(n, vector < string >(m, ""));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> after[i][j];
			reverse(after[i][j].begin(), after[i][j].end());
		}
	}

	int k1 = 0;
	int k2 = 0;
	int l1 = 0;
	int l2 = 0;

	for (const auto& ch: after[0][0]) {
		if (ch == '0') {
			k1++;
		} else {
			l1++;
		}
	}

	for (const auto& ch: after[1][0]) {
		if (ch == '0') {
			k2++;
		} else {
			l2++;
		}
	}

	for (int q = 0; q < k1; q++) {
		add(0, 0, 0, 1);
	}

	for (int q = 0; q < l2; q++) {
		add(1, 0, 1, 1);
	}

	for (const auto& ch: after[0][0]) {
		if (ch == '0') {
			add(0, 1, 0, 0);
		} else {
			add(1, 0, 0, 0);
		}
	}

	for (const auto& ch: after[1][0]) {
		if (ch == '1') {
			add(1, 1, 1, 0);
		} else {
			add(0, 0, 1, 0);
		}
	}

	for (int i = n - 1; i >= 2; i--) {
		for (int j = m - 1; j >= 0; j--) {
			for (const auto& ch: after[i][j]) {
				if (ch == '0') {
					from_to(0, 0, i, j);
				} else {
					from_to(1, 0, i, j);
				}
			}
		}
	}

	for (int j = m - 1; j > 0; j--) {
		for (const auto& ch: after[1][j]) {
			if (ch == '0') {
				add(0, 0, 0, j);
			}
		}
		for (const auto& ch: after[0][j]) {
			if (ch == '1') {
				add(1, 0, 1, j);
			}
		}
		for (const auto& ch: after[0][j]) {
			if (ch == '0') {
				add(0, 0, 0, j);
			} else {
				add(1, j, 0, j);
			}
		}
		for (const auto& ch: after[1][j]) {
			if (ch == '0') {
				add(0, j, 1, j);
			} else {
				add(1, 0, 1, j);
			}
		}
	}



	cout << solution.size() << "\n";
	for (const auto& x: solution) {
		cout << x.first.first + 1 << " " << x.first.second + 1<< " " << x.second.first + 1<< " " << x.second.second + 1 << "\n";
	}
	return 0;
}