#include "bits/stdc++.h"

#ifdef PRINTERS
#include "printers.hpp"
using namespace printers;
#define tr(a)		cerr<<#a<<" : "<<a<<endl;
#else
#define tr(a)    
#endif

#define ll          long long
#define pb          push_back
#define mp          make_pair
#define pii         pair<int,int>
#define vi          vector<int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define endl        '\n'
#define rep(i,a,b)	for(int i=a;i<b;i++)
using namespace std;

vi x;
int merge_tree[23][200005];
void build(int h,int l,int r){
	if(l==r){
		merge_tree[h][l]=x[l];
		return;
	}
	build(h+1,l,(l+r)/2);
	build(h+1,(l+r)/2+1,r);
	int i=l,j=(l+r)/2+1,k=l;
	while(i<=(l+r)/2 and j<=r){
		if(merge_tree[h+1][i]<merge_tree[h+1][j]){
			merge_tree[h][k++]=merge_tree[h+1][i++];
		}
		else{
			merge_tree[h][k++]=merge_tree[h+1][j++];	
		}
	}
	while(i<=(l+r)/2){
		merge_tree[h][k++]=merge_tree[h+1][i++];
	}
	while(j<=r){
		merge_tree[h][k++]=merge_tree[h+1][j++];
	}
}
int query(int h,int l,int r,int a,int b,int p,int q){
	if(q<p or b<a or r<l)return 0;
	if(b<l or a>r)return 0;
	if(a<=l and r<=b){
		return max(0,int(upper_bound(merge_tree[h]+l,merge_tree[h]+r+1,q)-lower_bound(merge_tree[h]+l,merge_tree[h]+r+1,p)));
	}
	return query(h+1,l,(l+r)/2,a,b,p,q)+query(h+1,(l+r)/2+1,r,a,b,p,q);
}
void solve(){
	int n,q;
	cin>>n>>q;
	x.resize(n+1);
	rep(i,1,n+1)cin>>x[i];
	build(0,1,n);
	while(q--){
		int l,d,r,u;
		cin>>l>>d>>r>>u;
		swap(d,u);
		ll ans=(1LL*n*(n-1))/2;
		ans-=(1LL*(l-1)*(l-2))/2;
		ans-=(1LL*(n-r)*(n-r-1))/2;
		ans-=(1LL*(u-1)*(u-2))/2;
		ans-=(1LL*(n-d)*(n-d-1))/2;
		if(l>1){
			int temp=query(0,1,n,1,l-1,1,u-1);
			ans+=(1LL*(temp)*(temp-1))/2;
			temp=query(0,1,n,1,l-1,d+1,n);
			ans+=(1LL*(temp)*(temp-1))/2;
		}
		if(r<n){
			int temp=query(0,1,n,r+1,n,1,u-1);
			ans+=(1LL*(temp)*(temp-1))/2;
			temp=query(0,1,n,r+1,n,d+1,n);
			ans+=(1LL*(temp)*(temp-1))/2;
		}
		cout<<ans<<endl;
	}
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int t=1;
//	cin>>t;
	while(t--){
		solve();
	}
	return 0;
}