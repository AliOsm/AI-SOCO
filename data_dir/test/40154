#include <bits/stdc++.h>

using namespace std;

/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;
#define ll long long
#undef ll

using ll = long long;

const int N = 2e5 + 5;
ll freq[N];
ll sum[N];

int n, m;
void upd(ll * bit, int idx, int v) {
	for (idx++; idx <= n; idx += idx & -idx)
		bit[idx] += v;
}
ll get(ll * bit, int idx) {
	ll ret = 0;
	for (idx++; idx; idx -= idx & -idx)
		ret += bit[idx];
	return ret;
}
int bitSearch(int v) {
	int sum = 0;
	int pos = 0;
	for (int i = 17; i >= 0; --i) {
		if (pos + (1 << i) < n && sum + freq[pos + (1 << i)] < v) {
			sum += freq[pos + (1 << i)];
			pos += (1 << i);
		}
	}
	return pos + 1;
}
ll get(ll * bit, int l, int r){
	return get(bit,r) - get(bit,l-1);
}

vector<pair<int, int>> vp;
ll t;
int solve(int limit){
	
	int lo = 0, hi = limit;
	
	while(lo < hi){
		int x = lo + (hi-lo+1) / 2;
		int pos = (x / m) * m;
		int idx = bitSearch(pos);
		ll init = get(sum,0,idx-1) * 2;
		if(x >= m){
			if(x % m == 0){
				int idx2 = bitSearch(pos-m+1);
				init -= get(sum,idx2-1,idx-1);
			}	else {
				int idx2 = bitSearch(x);
				init += get(sum,idx,idx2-1);
			}
		}	else {
			init = get(sum,0,bitSearch(x)-1);
		}
		if(init <= t)
			lo=x;
		else
			hi=x-1;
	}
	return lo;
}
int main(int argc, char** argv) {
#ifdef ONLINE_JUDGE
	ios_base::sync_with_stdio(0);
	cin.tie(0);
#endif
	int c;
	cin >> c;
	while (c--) {
		cin >> n >> m >> t;
		vp.clear();
		for (int i = 0; i < n; i++) {
			int x;
			cin >> x;
			vp.push_back( { x, i });
		}
		pair<int,int>ans = {0,1};
		sort(begin(vp), end(vp));
		for (int i = 1; i <= n; i++)
			freq[i] = sum[i] = 0;
		for (int i = 0; i < n;) {
			int j = i;
			for (; j < n && vp[i].first == vp[j].first; j++)
				;
			for (int x = i; x < j; x++) {
				upd(freq, vp[x].second, 1);
				upd(sum, vp[x].second, vp[x].first);
			}
			int x = solve(j);
			if(x > ans.first){
				ans = {x,vp[i].first};
			}
			i = j;
		}
		cout << ans.first << ' ' << ans.second << '\n';
	}

	return 0;
}
