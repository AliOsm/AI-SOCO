#include<stdio.h>
#include<string.h>
#include<iostream>
#include<sstream>
#include<algorithm>
#include<set>
#include<map>
#include<deque>
#include<queue>
#include<vector>
#include<list>
#include<tr1/unordered_map>
#include<functional>
using namespace std;

inline void print(char pt) {
	printf("%c\n", pt);
}
inline void print(int pt) {
	printf("%d\n", pt);
}
inline void print(long long pt) {
	printf("%I64d\n", pt);
}
inline void print(double pt) {
	printf("%.20f\n", pt);
}
inline void print(char pt[]) {
	printf("%s\n", pt);
}
inline void print() {
	printf("\n");
}

inline int scan(int &pt) {
	return scanf("%d", &pt);
}
inline int scan(char &pt) {
	return scanf("%c", &pt);
}

inline int scan(long long &pt) {
	return scanf("%I64d", &pt);
}
inline int scan(double &pt) {
	return scanf("%lf", &pt);
}
inline int scan(char pt[]) {
	return scanf("%s", pt);
}

const long long moda = 421412341324321ll;
using namespace std;

struct child {
	int v, d, i;
	friend int operator<(const child &a, const child &b) {
		return a.i < b.i;
	}
};
map<child, long long> mapa;
int n;
int tmp;
vector<int> veca;

int main() {
	scan(n);
	child c;
	for (int i = 0; i < n; i++) {
		scan(c.v);
		scan(c.d);
		c.i = i;
		scan(tmp);
		mapa[c] = tmp;
	}
	while (1) {
		if (mapa.size() == 0) {
			print((int) veca.size());
			for (int au : veca) {
				print(au);
			}
			exit(0);
		}
		child f = mapa.begin()->first;
		mapa.erase(mapa.begin());
		veca.push_back(f.i + 1);

		int i = 0;
		for (auto it = mapa.begin(); it != mapa.end(); i++) {
			if (f.v - i > 0)
				it->second -= f.v - i;
			if (it->second < 0) {
				auto it2 = it;
				it2++;
				for (; it2 != mapa.end(); it2++) {
					it2->second -= it->first.d;
				}
				it2 = it;
				it++;
				mapa.erase(it2);
			} else {
				it++;
			}
		}
	}

	return 0;
}
