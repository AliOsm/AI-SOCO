#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define eb emplace_back
#define mt make_tuple

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int N = 100010;
const int dir[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};

int getdir(char c)
{
	if (c == 'U')
		return 0;
	if (c == 'D')
		return 1;
	if (c == 'R')
		return 2;
	return 3;
}

int dx, dy;
char s[N];

int w[N][2];
int n;

bool test(ll mid)
{
	ll x = mid * w[n-1][0];
	ll y = mid * w[n-1][1];
	ll moves = mid * n;
		
	ll dist = abs(x - dx) + abs(y - dy);
	return moves >= dist;
}

int main()
{
	int xa, ya, xb, yb;
	scanf("%d %d %d %d", &xa, &ya, &xb, &yb);
	
	dx = xb - xa;
	dy = yb - ya;

	scanf("%d %s", &n, s);
	
	for (int i = 0; i < n; i++)
	{
		int d = getdir(s[i]);
		w[i][0] = dir[d][0];
		w[i][1] = dir[d][1];
		if (i)
		{
			w[i][0] += w[i-1][0];
			w[i][1] += w[i-1][1];
		}
	}

	ll lo = 1, hi = 1e10;
	while (lo < hi)
	{
		ll mid = (lo+hi)/2;
		if (test(mid))
			hi = mid;
		else
			lo = mid+1;
	}
	
	if (!test(lo))
	{
		printf("-1\n");
		return 0;
	}

	ll x = w[n-1][0] * (lo-1);
	ll y = w[n-1][1] * (lo-1);
	
	ll ans = (lo-1) * n;
	for (int i = 0; i < n; i++)
	{
		int d = getdir(s[i]);
		x += dir[d][0];
		y += dir[d][1];
		ans++;
		if (ans >= abs(x - dx) + abs(y - dy))
		{
			printf("%lld\n", ans);
			return 0;
		}
	}
	assert(0);
	return 0;
}


