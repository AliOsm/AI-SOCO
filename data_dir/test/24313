/*input
2 20
aabbaaaaabbbbbbaabbb
aabaabbbabbaabaaabaa
129031 157657 633540 354251 528473 948025 107960 614275 976567 779835 628647 672528 278433 254595 676151 992850 419435 163397 816037 682878
97253 367892 938199 150466 687355 886265 900135 530415 409478 505794 468915 83346 765920 348268 600319 334416 410150 728362 239354 368428
*/
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define int long long
#define N 25
#define bit(x,y) ((x>>y)&1)
const int INF = 1e9;
// const int mod = 1e9+7;

int n, m;
vector<string> a;
int c[N][N];
int mn[N];
int dp[(1 << 20)];
pair<int, int> best[N][N];

void prep() {
	for (int k = 0; k < n; k++) {
		for (int j = 0; j < m; j++) {
			int sum = 0;
			int t = -INF;
			int mask2 = 0;
			for (int i = 0; i < n; i++) {
				if (a[i][j] == a[k][j]) {
					mask2 ^= (1 << i);
					sum += c[i][j];
					t = max(t, c[i][j]);
				}
			}
			best[k][j] = mp(mask2, sum - t);
		}
	}
}

signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n >> m;
	for (int i = 1; i <= n; i++) {
		string s; cin >> s;
		a.push_back(s);
	}
	for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) cin >> c[i][j];
	prep();
	memset(mn, 127, sizeof(mn));
	for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) mn[i] = min(mn[i], c[i][j]);
	memset(dp, 127, sizeof(dp));
	dp[0] = 0;
	for (int mask = 1; mask < (1 << n); mask++) {
		for (int i = 0; i < n; i++) if (bit(mask, i)) dp[mask] = min(dp[mask], mn[i] + dp[mask ^ (1 << i)]);
		int p;
		for (int i = 0; i < n; i++)
			if (bit(mask, i)) {
				p = i; break;
			}
		for (int i = 0; i < m; i++) {
			int mask3 = 0;
			for (int j = 0; j < n; j++) if (bit(mask, j) && bit(best[p][i].fi, j) == 0) mask3 |= (1 << j);
			dp[mask] = min(dp[mask], best[p][i].se + dp[mask3]);
		}

	}
	cout << dp[(1 << n) - 1] << endl;
}