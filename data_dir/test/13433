#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             2e16
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>


#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())

#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);

const int N = 100005;
int n , m , sq;
int ara[N],upto[N],cost[N];

void update(int a,int b)
{
    int seg = a/sq;
    int L = sq * seg;
    int R = sq * (seg + 1) - 1;

    upto[a] = a;
    cost[a] = 0;
    ara[a] = b;

    for(int i = a;i >= L;i--){
        if(i + ara[i] <= min(R,n - 1)){
            cost[i] = 1 + cost[i + ara[i]];
            upto[i] = upto[i + ara[i]];
        }
    }
}
int main()
{
    FastRead
    cin >> n >> m;
    sq = 2 * sqrt(n + 1);

    REP(i,n){
        cin >> ara[i];
        update(i,ara[i]);
    }

    while(m--){
        int tp;cin >> tp;
        if(tp == 0){
            int a , b;
            cin >> a >> b;
            a--;
            update(a,b);
        }else{
            int a;cin >> a;
            a--;
            int pre,c = 0;
            while(a <= n - 1){
                c += cost[a];
                a = upto[a];
                pre = a;
                a = a + ara[a];
                c = c + 1;
            }
            cout << pre + 1<< " " << c << "\n";
        }
    }


}

