#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define f(i, x, n) for (int i = x; i < (int)(n); ++i)

int const N = 200000;
int m, n, an[N + 1];
ll d[2], s;
pair<int, int> x[N], w[N + 1];
vector<int> ev1[N], ev2[N];

int inc(int x, int d){
	x += d;
	return x >= n ? x - n : x;
}

int dec(int x, int d){
	x -= d;
	return x < 0 ? x + n : x;
}

int ds(int p, int r){
	int d = w[r].first - x[p].first;
	if (d < 0)d += m;
	return min(d, m - d);
}

bool po(int p, int r){
	int d = w[r].first - x[p].first;
	if (d < 0)d += m;
	if (d < m - d)return false;
	return true;
}

void ad(int p, int r){
	int i = po(p, r);
	d[i] += w[r + 1].first - w[r].first;
}

void er(int p, int r){
	int i = po(p, r);
	d[i] -= w[r + 1].first - w[r].first;
}

int main(){
	scanf("%d%d", &m, &n);
	f(i, 0, n){
		scanf("%d", &w[i].first);
		--w[i].first;
		w[i].second = i + 1;
	}
	sort(w, w + n);
	w[n].first = w[0].first + m;
	f(i, 0, n){
		scanf("%d", &x[i].first);
		--x[i].first;
		x[i].second = i + 1;
	}
	sort(x, x + n);
	f(i, 0, n){
		int z = w[i].first - (m - 1 >> 1);
		if (z < 0)z += m;
		int j = lower_bound(x, x + n, make_pair(z, 0)) - x;
		if (j == n)j = 0;
		if (!po(j, i)){
			int t = i - j;
			if (t < 0)t += n;
			ev1[t].push_back(j);
		}
	}
	f(i, 0, n){
		int z = w[i].first + 1;
		if (z == m)z = 0;
		int j = lower_bound(x, x + n, make_pair(z, 0)) - x;
		if (j == n)j = 0;
		if (j < 0)j += n;
		if (po(j, i)){
			int t = i - j;
			if (t < 0)t += n;
			ev1[t].push_back(j);
		}
	}
	f(i, 0, n){
		int z = x[i].first + (m + 1 >> 1);
		if (z >= m)z -= m;
		int j = lower_bound(w, w + n, make_pair(z, 0)) - w;
		--j;
		if (j < 0)j += n;
		if (!po(i, j)){
			int t = j - i;
			if (t < 0)t += n;
			ev2[t].push_back(i);
		}
	}
	f(i, 0, n){
		int z = x[i].first;
		int j = lower_bound(w, w + n, make_pair(z, 0)) - w;
		--j;
		if (j < 0)j += n;
		if (po(i, j)){
			int t = j - i;
			if (t < 0)t += n;
			ev2[t].push_back(i);
		}
	}
	f(i, 0, n)ad(i, i);
	f(i, 0, n)s += ds(i, i);
	ll tc = s;
	int bst = 0;
	f(i, 0, n - 1){
		for (int u: ev2[i]){
			er(u, inc(u, i));
			s -= ds(u, inc(u, i));
		}
		s += d[0];
		s -= d[1];
		for (int u: ev2[i]){
			ad(u, inc(u, i));
			s += ds(u, inc(u, i + 1));
		}
		for (int u: ev1[i]){
			er(u, inc(u, i));
			ad(dec(u, 1), inc(u, i));
		}
		if (s < tc){
			tc = s;
			bst = i + 1;
		}
	}
	f(i, 0, n)an[w[inc(i, bst)].second] = x[i].second;
	printf("%lld\n%d", tc, an[1]);
	f(i, 2, n + 1)printf(" %d", an[i]);
	printf("\n");
}