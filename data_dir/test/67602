#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define ll long long
#define ld long double
#define fr first
#define sc second
#define pb push_back
#define mp make_pair

const ll INF = 1e18 + 1;
const ll N = 1e6 + 5;
const ll MOD = 1e9 + 7;

using namespace std;
using namespace __gnu_pbds;

vector< vector<ll> > g(N + 5);
ll n, m, k, r, x, y, l, gc, c, t, u, v, cur, ans, cnt, mn(INF), mx(-INF);
pair<int, int> ch[N + 5];
bool z[N + 5], useless[N + 5], useless2[N + 5];
string s[N + 5];
void read(ll &in)
{
    scanf("%I64d", &in);
}

void read(ll &in1, ll &in2)
{
    scanf("%I64d%I64d", &in1, &in2);
}
void read(ll &in1, ll &in2, ll &in3)
{
    scanf("%I64d%I64d%I64d", &in1, &in2, &in3);
}

ll gcd (ll a, ll b)
{
    if (b == 0)
        return a;
    else
        return gcd (b, a % b);
}

void dfs(ll x)
{
    if(s[x] == "IN")
    {
        return;
    }
    else if(s[x] == "NOT")
    {
        dfs(ch[x].first);
        z[x] = !z[ch[x].first];
    }
    else if(s[x] == "XOR")
    {
        dfs(ch[x].first);
        dfs(ch[x].second);
        z[x] = z[ch[x].first] ^ z[ch[x].second];
    }
    else if(s[x] == "AND")
    {
        dfs(ch[x].first);
        dfs(ch[x].second);
        if(z[ch[x].first] == 0)
            useless[ch[x].second] = true;
        if(z[ch[x].second] == 0)
            useless[ch[x].first] = true;
        z[x] = z[ch[x].first] & z[ch[x].second];
    }
    else
    {
        dfs(ch[x].first);
        dfs(ch[x].second);
        if(z[ch[x].first] == 1)
            useless[ch[x].second] = true;
        if(z[ch[x].second] == 1)
            useless[ch[x].first] = true;
        z[x] = z[ch[x].first] | z[ch[x].second];
    }
}
void dfs2(ll x)
{
    if(useless[x])
    {
        cnt++;
    }
    if(s[x] == "IN")
    {
        if(cnt > 0)
            useless2[x] = true;
    }
    else if(s[x] == "NOT")
    {
        dfs2(ch[x].first);
    }
    else if(s[x] == "XOR")
    {
        dfs2(ch[x].first);
        dfs2(ch[x].second);
    }
    else if(s[x] == "AND")
    {
        dfs2(ch[x].first);
        dfs2(ch[x].second);
    }
    else
    {
        dfs2(ch[x].first);
        dfs2(ch[x].second);
    }
    if(useless[x])
        cnt--;
}
ll bpow(ll x, ll p)
{
    ll res;
    if(p == 0)
    {
        return 1;
    }
    else
    {
        res = bpow(x, p >> 1);
        res = (res * res) % MOD;
        if(p & 1)
        {
            res = (res * x) % MOD;
        }
        return res;
    }
}
/* Simple binary search
l = 0;
r = smth.size() - 1;
while(l < r)
{
    m = (l + r) / 2;
    if(x <= smth[m])
    {
        r = m;
    }
    else
    {
        l = m + 1;
    }
}
*/
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n;
    for(int i = 1; i <= n; i++)
    {
        cin >> s[i];
        if(s[i] == "IN")
        {
            cin >> z[i];
        }
        else if(s[i] == "XOR" || s[i] == "OR" || s[i] == "AND")
        {
            cin >> ch[i].first >> ch[i].second;
        }
        else
        {
            cin >> ch[i].first;
        }
    }
    dfs(1);
    dfs2(1);
    for(int i = 1; i <= n; i++)
    {
        if(s[i] == "IN")
        {
            cout << !(useless2[i] ^ z[1]);
        }
    }
    return 0;
}