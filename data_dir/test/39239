#include <cstdio>
#include <memory.h>
#include <cstring>
#include <vector>
#include <deque>
#include <cstdlib>
#include <queue>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <functional>
#include <iostream>
#include <set>
#include <list>
#include <map>
#include <time.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef unsigned long long llu;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<string, int> psi;
const ll MOD = 1e9 + 7;
const long double PI = 3.141592653589793238462643383279502884197;

priority_queue<int, vector<int>, greater<int> > pq;
vector<pii> v[5000];

int t;
int n;
int dp[5000][5001];
int back[5000][5001];

int go(int o, int kk) {
	if (kk < 0) return 1e9 + 7;
	if (o == n - 1) {
		if (kk == 0) return 0;
		return 1e9 + 7;
	}
	if (dp[o][kk] != -1) return dp[o][kk];

	int miv = 1e9 + 7, mivi = -1;
	for (int i = 0; i < sz(v[o]); i++) {
		int tt = go(v[o][i].second, kk - 1) + v[o][i].first;

		if (tt < miv) {
			miv = tt;
			mivi = v[o][i].second;
		}
	}

	back[o][kk] = mivi;
	return dp[o][kk] = miv;
}

int main() {
	memset(dp, -1, sizeof(dp));
	int m;
	scanf("%d %d %d", &n, &m, &t);

	int a, b, c;
	while (m--) {
		scanf("%d %d %d", &a, &b, &c);
		a--; b--;
		v[a].push_back({ c, b });
	}

	for (int i = n; i >= 1; i--) {
		if (go(0, i - 1) <= t) {
			printf("%d\n", i);

			printf("%d ", 1);
			int t = 0;
			int cnt = i - 1;

			while (back[t][cnt]) {
				t = back[t][cnt--];
				printf("%d ", t + 1);
			}

			return 0;
		}
	}
}