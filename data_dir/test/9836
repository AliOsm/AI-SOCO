#include <bits/stdc++.h>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
typedef long long ll;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e5 + 5;
const double eps = 1e-9;
using namespace std;
int a[MAXN];
ll BIT[3][MAXN];
int n;

void add(int i, int ind, ll v)
{
    while (ind < MAXN)
    {
        BIT[i][ind] += v;
        ind += ind & -ind;
    }
}

ll sum(int i, int ind)
{
    ll ret = 0;
    while (ind > 0)
    {
        ret += BIT[i][ind];
        ind -= ind & -ind;
    }
    return ret;
}

ll get(int i, int l, int r)
{
    return sum(i, r) - sum(i, l - 1);
}

vi arr;

int main()
{
    ll k;
    ni(n), nl(k);
    for (int i = 1; i <= n; i++)
    {
        ni(a[i]);
        arr.pb(a[i]);
    }
    sort(arr.begin(), arr.end());
    arr.resize(unique(arr.begin(), arr.end()) - arr.begin());
    for (int i = 1; i <= n; i++)
        a[i] = lower_bound(arr.begin(), arr.end(), a[i]) - arr.begin() + 1;
    for (int i = 2; i <= n; i++)
        add(1, a[i], 1);
    ll cur = 0;
    for (int i = 1; i <= n; i++)
    {
        cur += get(2, a[i] + 1, arr.size());
        add(2, a[i], 1);
    }
    ll ans = 0;
    int l = 1, r = 2;
    for (l = 1; l <= n; l++)
    {
        if (r == l)
        {
            cur -= get(0, a[r] + 1, arr.size());
            cur -= get(1, 1, a[r]);
            add(1, a[r], -1);
            r++;
        }
        if (l != 1)
        {
            cur += get(0, a[l] + 1, arr.size());
            cur += get(1, 1, a[l] - 1);
        }
        add(0, a[l], 1);
        for (; r <= n && cur > k; r++)
        {
            cur -= get(0, a[r] + 1, arr.size());
            cur -= get(1, 1, a[r] - 1);
            add(1, a[r], -1);
        }
        if (r > n)
            break;
        ans += n - r + 1;
    }
    prl(ans);
    return 0;
}
