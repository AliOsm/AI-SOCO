//Be Name Khoda
//tan man gar tanhast    dele man ba delhast.
//doostani daram      behtar az barge derakht
//ke doayam guyand    va doashan guyam.
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)2007;
const int infint = (int)1e9;
const ll inf = (ll)1e18;
const ll base = 37;
#pragma optimize O3
ll hsh[MAXN], pwr[MAXN];
ll hash_range(ll l, ll r)
{
	ll ans = hsh[r];
	if(l != 0)
		ans -= pwr[r - l + 1] * hsh[l - 1];
	return ans;
}
unordered_map<ll, ll> M;
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	string s;
	cin >> s;
	string fir, last;
	cin >> fir >> last;
	hsh[0] = (s[0] - 'a' + 1), pwr[0] = 1;
	for (int i = 1; i < s.size(); i++)
		hsh[i] = hsh[i - 1] * base + (s[i] - 'a' + 1), pwr[i] = pwr[i - 1] * base;
	
	ll F = fir[0] - 'a' + 1;
	for (int i = 1; i < fir.size(); i++)
		F = F * base + (fir[i] - 'a' + 1);
	
	ll S = last[0] - 'a' + 1;
	for (int i = 1; i < last.size(); i++)
		S = S * base + (last[i] - 'a' + 1);
	ll MX = max(fir.size(), last.size());
	for (int i = 0; i + MX - 1 < s.size(); i++)
		for (int j = i + MX - 1; j < s.size(); j++)
			if(hash_range(i, i + fir.size() - 1) == F and hash_range(j - last.size() + 1, j) == S)
			{
				M[hash_range(i, j)]++;
			}
	cout << M.size();
}
