#include <bits/stdc++.h>
using namespace std;

const int N = (1 << 18) + 5;
const long long INF = 1e18;

long long dp[N][20];
long long minx[N];
int a[N];

int main() {
	int n, k, p;
	scanf("%d", &n);
	for (int i = 1; i <= n; i++) {
		scanf("%d", &a[i]);
		if (a[i] == -1) {
			p = i;
		}
	}
	for (int i = 1; i < p; i++) {
		a[i] = 0;
	}
	for (int i = 1; ; i++) {
		if ((1 << i) == n) {
			k = i;
			break;
		}
	}
	memset(minx, 0, sizeof(minx));
	for (int j = 1, now; j <= k; j++){
		now = (1 << j) - 1;
		for (int i = now + (p <= now ? 1 : 0); i <= n; i++) {
			if (i == p) continue;
			dp[i][j] = minx[i - 1] + a[i];
		}
		minx[0] = INF;
		for (int i = 1; i <= n; i++) {
			if (i < now + (p <= now ? 1 : 0)) {
				minx[i] = INF;
			} else {
				minx[i] = min(minx[i - 1], dp[i][j]);
			}	
		}
	}
	printf("%I64d\n", minx[n]);
	return 0;
}