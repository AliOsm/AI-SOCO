//{{{By oToToT
#include <iostream>
#include <iomanip>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <bitset>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <random>
#include <utility>
#include <stack>
#include <sstream>
#include <functional>
#include <deque>
#include <cassert>
using namespace std;
/* include everything for Kotori~ <3 */

typedef long long lld;
typedef unsigned long long llu;
typedef long double llf;
typedef pair<int,int> PII;
typedef pair<int,lld> PIL;
typedef pair<lld,int> PLI;
typedef pair<lld,lld> PLL;
template<typename T>
using maxHeap = priority_queue<T,vector<T>,less<T>>;
template<typename T>
using minHeap = priority_queue<T,vector<T>,greater<T>>;
/* define some types for Ruby! */

#define FF first
#define SS second
#define SZ(x) (int)(x.size())
#define ALL(x) begin(x), end(x)
#define PB push_back
#define WC(x) while(x--)
/* make code shorter for Di~a~ */

template<typename Iter>
ostream& _out(ostream &s, Iter b, Iter e) {
	s<<"[";
	for ( auto it=b; it!=e; it++ ) s<<(it==b?"":" ")<<*it;
	s<<"]";
	return s;
}
template<typename A, typename B>
ostream& operator <<( ostream &s, const pair<A,B> &p ) { return s<<"("<<p.FF<<","<<p.SS<<")"; }
template<typename T>
ostream& operator <<( ostream &s, const vector<T> &c ) { return _out(s,ALL(c)); }
/* make output easier for Ainyan~n~ */

bool debug = 0;
#define DUMP(x) if(debug) cerr<<__PRETTY_FUNCTION__<<":"<<__LINE__<<" - "<<#x<<"="<<x<<'\n'
template<typename T>
void DEBUG(const T& x){if(debug) cerr<<x;}
template<typename T, typename... Args>
void DEBUG(const T& head,const Args& ...tail){
	if(debug){cerr<<head; DEBUG(tail...);}
}
/* Let's debug with Nico~Nico~Ni */
//}}}
const int MOD = 1000000007;
const int N = 100000 + 5;

lld qPow(lld a, lld b){
	lld ret = 1;
	while(b){
		if(b&1) ret = ret*a%MOD;
		a = a*a%MOD;
		b >>= 1;
	}
	return ret;
}

lld arr1[N], arr2[N];
lld cnt0[N];

int main(int argc, char* argv[]){
	if(argc>1 and string(argv[1])=="-D") debug=1;
	if(!debug){ios_base::sync_with_stdio(0);cin.tie(0);}
	lld n, m; cin >> n >> m;
	for(int i=1;i<=n;i++) cin >> arr1[i];
	for(int i=1;i<=n;i++) cin >> arr2[i];
	for(int i=1;i<=n;i++){
		cnt0[i] += arr1[i]==0;
		cnt0[i] += arr2[i]==0;
	}
	for(int i=n;i>=1;i--) cnt0[i] += cnt0[i+1];
	lld same = 1;
	lld P = 0, Q = qPow(m, cnt0[1]);
	for(int i=1;i<=n;i++){
		if(arr1[i]==0 and arr2[i]==0){
			lld cur = (m*(m-1)/2)%MOD;
			cur = cur*qPow(m, cnt0[i+1])%MOD;
			cur = cur*same%MOD;
			P = (P+cur)%MOD;
			same = same*m%MOD;
		}
		if(arr1[i]==0 and arr2[i]!=0){
			lld cur = (m-arr2[i])*qPow(m, cnt0[i+1])%MOD;
			cur = cur*same%MOD;
			P = (P+cur)%MOD;
		}
		if(arr1[i]!=0 and arr2[i]==0){
			lld cur = (arr1[i]-1)*qPow(m, cnt0[i+1])%MOD;
			cur = cur*same%MOD;
			P = (P+cur)%MOD;
		}
		if(arr1[i]!=0 and arr2[i]!=0){
			if(arr1[i] > arr2[i]){
				lld cur = qPow(m, cnt0[i]);
				cur = cur*same%MOD;
				P = (P+cur)%MOD;
			}
			if(arr1[i] != arr2[i]) break;
		}
	}
	cout << (P * qPow(Q, MOD-2))%MOD << '\n';
	return 0;
}