#include <cstdio>
#include <vector>
#include <set>
#include <map>
using namespace std;
typedef long long ll;

const int N = 3e5 + 10;
const ll INF = 1e16;

map < pair<int,int>, int > edge;
vector < pair<int,int> > adj[N];
set < pair<int,int> > s;
set <int> edges;
set <int>::iterator it;
int we[N];
ll d[N];
int par[N];

int main() {
  int n, m;
  scanf("%d %d", &n, &m);
  for (int i = 0; i < m; ++i) {
    int u, v;
    scanf("%d %d %d", &u, &v, &we[i]);
    u --, v --;
    adj[u].push_back( make_pair(v, we[i]) );
    adj[v].push_back( make_pair(u, we[i]) );
    edge[ make_pair(u, v) ] = edge[ make_pair(v, u) ] = i + 1;
  }
  int u;
  scanf("%d", &u);
  u --;
  for (int i = 0; i < n; ++i) {
    d[i] = INF;
  }
  s.insert( make_pair(0, u) );
  d[u] = 0, par[u] = -1;
  while (!s.empty()) {
    int x = s.begin()->second;
    s.erase(s.begin());
    for (int i = 0; i < (int)adj[x].size(); ++i) {
      int v = adj[x][i].first;
      int w = adj[x][i].second;
      if (w + d[x] < d[v]) {
	s.erase( make_pair(d[v], v) );
	d[v] = d[x] + w;
	par[v] = x;
	s.insert( make_pair(d[v], v) );
      } else if (w + d[x] <= d[v] && we[edge[make_pair(v, x)] - 1] < we[edge[make_pair(v, par[v])] - 1]) {
	par[v] = x;
      }
    }
  }
  ll ans = 0;
  for (int i = 0; i < n; ++i) {
    if (par[i] != -1) {
      if (edges.count(edge[ make_pair(i, par[i]) ]) == 0) {
	edges.insert( edge[ make_pair(i, par[i]) ] );
	ans += we[edge[ make_pair(i, par[i]) ] - 1];
      }
    }
  }
  printf("%I64d\n", ans);
  for (it = edges.begin(); it != edges.end(); ++it) {
    printf("%d ", *it);
  }
  puts("");
  return 0;
}
