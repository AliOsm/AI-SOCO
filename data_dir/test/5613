/**
 *    +--+--+--++--++--In the name of ALLAH--++--++--+--+--+
 *
 *    author:  skmonir
 *    created: >
**/

#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define mod                 1000000007LL
#define len(x)              (int) x.size()
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = 2e5 + 7;
const int inf = 1e9 + 7;

long long a[N], b[N];

int solve() {
    int n, m, k; Int(n, m, k);
    FOR (i, 1, n) {
        Int(a[i]);
        b[i] = a[i];
    }

    sort(a + 1, a + n + 1);
    reverse(a + 1, a + n + 1);

    vector <int> p;
    multiset <int> st;
    long long res = 0;
    FOR (i, 1, m * k) {
        res += a[i];
        st.insert(a[i]);
    }

    printf("%lld\n", res);

    int foo = 0, sz = 0;
    FOR (i, 1, n) if (k > 1) {
        ++sz;
        if (foo < m and st.count(b[i])) {
            ++foo;
            st.erase(st.find(b[i]));
        }
        if (foo == m and sz >= m) {
            --k;
            sz = 0;
            foo = 0;
            p.push_back(i);
        }
    }

    for (int i = 0; i < p.size(); ++i) {
        printf("%d ", p[i]);
    }
    printf("\n");

    return 0;
}

int main() {
    int tests = 1, CaseNo = 0; //Int(tests);
    while (tests--) {
        //printf("Case %d: ", ++CaseNo);
        solve();
    }
    return 0;
}