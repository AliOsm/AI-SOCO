#include <stdio.h>
#include <vector>
#include <algorithm>
#define pb push_back
using namespace std;

const int MAXN = 500005;
const int INF = (int)1e9;

vector <int> g[MAXN];
int tree[4 * MAXN];
int lazy[4 * MAXN];
int tin[MAXN];
int tout[MAXN];
int p[MAXN];
int timer = 0;

void init(int node, int a, int b) {
    lazy[node] = -1;
    if (a == b) {
        return;
    }
    int mid = (a + b) / 2;
    init(node * 2, a, mid);
    init(node * 2 + 1, mid + 1, b);
    return;
}

void solve_lazy(int node, int a, int b) {
    if (lazy[node] != -1) {
        tree[node] = lazy[node];
        if (a != b) {
            lazy[node * 2] = lazy[node * 2 + 1] = lazy[node];
        }
        lazy[node] = -1;
    }
    return;
}

void make_lazy(int node, int a, int b, int val) {
    if (a != b) {
        lazy[node * 2] = lazy[node * 2 + 1] = val;
    }
    return;
}

void update(int node, int a, int b, int i, int j, int val) {
    solve_lazy(node, a, b);
    if (a > b || b < i || a > j) {
        return;
    }
    if (i <= a && b <= j) {
        tree[node] = val;
        make_lazy(node, a, b, val);
        return;
    }
    int mid = (a + b) / 2;
    update(node * 2, a, mid, i, j, val);
    update(node * 2 + 1, mid + 1, b, i, j, val);
    tree[node] = min(tree[node * 2], tree[node * 2 + 1]);
    return;
}

int query(int node, int a, int b, int i, int j) {
    solve_lazy(node, a, b);
    if (a > b || b < i || a > j) {
        return INF;
    }
    if (i <= a && b <= j) {
        return tree[node];
    }
    int mid = (a + b) / 2;
    int q1 = query(node * 2, a, mid, i, j);
    int q2 = query(node * 2 + 1, mid + 1, b, i, j);
    return min(q1, q2);
}

void DFS(int node, int par = -1) {
    p[node] = par;
    tin[node] = ++timer;

    for (int i = 0; i < (int)g[node].size(); i++) {
        int viz = g[node][i];
        if (viz != par) {
            DFS(viz, node);
        }
    }
    tout[node] = timer;
    return;
}

int main(void) {
    int n, q;
    int a, b;
    int op, v;

    scanf(" %d", &n);
    for (int i = 1; i < n; i++) {
        scanf(" %d %d", &a, &b);
        g[a].pb(b);
        g[b].pb(a);
    }

    DFS(1);

    scanf(" %d", &q);
    while(q--) {
        scanf(" %d %d", &op, &v);
        if (op == 1) {
            int got_water = query(1, 1, n, tin[v], tout[v]);
            if (got_water == 0) {
                update(1, 1, n, tin[p[v]], tin[p[v]], 0);
            }
            update(1, 1, n, tin[v], tout[v], 1);
        } else if (op == 2) {
            update(1, 1, n, tin[v], tin[v], 0);
        } else {
            int ans = query(1, 1, n, tin[v], tout[v]);
            printf("%d\n", ans);
        }
    }
    return 0;
}
