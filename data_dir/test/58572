#include "omp.h"
#include <iostream>
#include <iomanip>
#include <string>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <vector>
#include <cassert>
#include <fstream>
#include <algorithm>
#include <list>
#include <random>
#include <ctime>
#include <random>
#include <bitset>

using namespace std;

typedef long long ll;
typedef long double ld;


const int sze = 1e4 + 10, psze = 101, block = 100, MOD1 = 1e9 + 7, x1 = 139;

bitset<sze> blocks[block + 1];
vector<int> values[sze];

void add(int l, int r, int x)
{
	if (l / block == r / block)
	{
		for (int i = l; i <= r; ++i)
			values[i].push_back(x);

		return;
	}

	for (int i = l / block + 1; i < r / block; ++i)
		blocks[i] |= blocks[i] << x;

	for (int i = l; i < (l / block + 1) * block; ++i)
		values[i].push_back(x);
	
	for (int i = (r / block) * block; i <= r; ++i)
		values[i].push_back(x);
}


signed main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, q;
	cin >> n >> q;
	bitset<sze> ans;


	for (int i = 0; i <= block; ++i)
		blocks[i][0] = 1;

	for (int i = 0; i < q; ++i)
	{
		int l, r, x;
		cin >> l >> r >> x;
		add(l, r, x);
	}

	for (int i = 1; i <= n; ++i)
	{
		bitset<sze> cur = blocks[i / block];
		
		for (int v : values[i])
			cur |= cur << v;

		ans |= cur;
	}

	int cnt = 0;
	for (int i = 1; i <= n; ++i)
		if (ans[i])
			cnt++;

	cout << cnt << '\n';
	for (int i = 1; i <= n; ++i)
		if (ans[i])
			cout << i << ' ';

	return 0;
}