#define _CRT_SECURE_NO_WARNINGS
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <fstream>
#include <map>
#include <set>
#include <queue>
#include <memory.h>
#include <time.h>
#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <algorithm>
#include <cstdio>
#include <set>
#include <queue>
#include <cassert>
#include <climits>
#define sz(x) int((x).size())
#define FOR(i,a,b) for(ll(i) = (a); (i) <= (b); ++(i))
#define ROF(i,a,b) for(ll(i) = (a); (i) >= (b); --(i))
#define rep(i,n) for (int(i) = 0; (i) < (n); ++(i))
#define fe(i,a) for (ll(i) = 0; (i) < int((a).size()); ++(i))
#define C(a) memset((a),0,sizeof(a))
#define pb push_back
#define ppb pop_back
#define all(c) (c).begin(), (c).end()
#define sqr(a) (a)*(a)
#define mp(a,b) make_pair((a), (b))
#define X first
#define Y second
#define file freopen("input.txt","r",stdin)
#define file2 freopen("output.txt", "w",stdout)
#define text freopen("input.txt","r",stdin); freopen("output.txt", "w",stdout)
using namespace std;
typedef vector<int> vint;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pii;
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <string>
#include <vector>
#include <climits>
#include <cassert>
#define y1 vamdlsfmvldf
using namespace std;
const int mod = (int)1e9 + 7;
const int INF = (int)(1e9);
const int N = 100005;
using namespace std;
int n, m;
string s;
string t;
int a[26], b[26];
int main() {
	cin >> s >> t;
	n = s.size();
	m = t.size();
	for(int i = 0; i < n; ++i){
		a[s[i] - 'a']++;
	}
	for(int i = 0 ; i < m; ++i){
		b[t[i] - 'a']++;
	}
	int flag = 0;
	for(int i = 0; i < 26; ++i){
		if(a[i] < b[i]) flag = 1;
	}
	if(flag == 1){
		printf("need tree\n");
		return 0;
	}
	if(n == m){
		printf("array\n");
		return 0;
	}
	int ind = 0;
	int i = 0;
	while(i < n && ind < m){
		if(s[i] == t[ind]){
			++i;
			++ind;
		}
		else ++i;
	}
	if(ind == m){
		printf("automaton\n");
		return 0;
	}
	printf("both\n");
	return 0;
}