//Dream your Code, Code your Dream [Siriuslight -Subham Pal]
#include<bits/stdc++.h>
#define FIO ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);
using namespace std;    typedef long long ll;    typedef long double ld;

const int inf = 1e9;
const ll INF = 1e18, MOD = 1e9+7;;
const ll N = 1e6+5;
int a[N], n;
int suff[N];
ll ans;
unordered_map <int, int> mp;
vector <int> T[N<<2];

bool cmp(const int a, const int b){
    return a < b;
}

void build(int v, int tl, int tr){
    if(tl == tr){
        T[v].push_back(suff[tl]);
    }
    else{
        int tm = tl + tr >> 1;
        build(v<<1, tl, tm);
        build(v<<1^1, tm + 1, tr);
        sort(T[v<<1].begin(), T[v<<1].end());
        sort(T[v<<1^1].begin(), T[v<<1^1].end());
        merge(T[v<<1].begin(), T[v<<1].end(), T[v<<1^1].begin(), T[v<<1^1].end(), back_inserter(T[v]), cmp);
    }
}

ll query(int v, int tl, int tr, int l, int r, int val){
    if(tl > r || l > tr || l > r)
        return 0LL;
    if(tl >= l && tr <= r){
        return (ll)(lower_bound(T[v].begin(), T[v].end(), val) - T[v].begin());
    }
    int tm = tl + tr >> 1;
    ll res = (ll)query(v<<1, tl, tm, l, r, val) + (ll)query(v<<1^1, tm + 1, tr, l, r, val);
    return res;
}

int main(){
    FIO;
    cin >> n;
    for(ll i = 1; i <= n; i++){
        cin >> a[i];
    }
    for(ll i = n; i >= 1; i--){
        mp[a[i]]++;
        suff[i] = mp[a[i]];
    }

    build(1, 1, n);

    mp.clear();
    for(ll i = 1; i < n; i++){
        mp[a[i]]++;
        ans += (ll)query(1, 1, n, i + 1, n, mp[a[i]]);
    }
    cout << ans;
    return 0;
}
