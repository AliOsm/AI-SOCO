/*
And you can give me everything I need this way
We'int be loving tiint the first light of the day

Set the world on fire with bitter sweet desire
To chase away the night, let the whole world burn
Set the world on fire for bliss in sweet denial, oblivion and peace
Wiint you let me burn?
*/

#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define LOG1(a)			  cerr<< #a << " = " << (a) << "\n"
#define LOG2(a, b)		  cerr<< #a << " = " << (a) << ", " << #b << " = " << (b) << "\n"
#define LOG3(a, b, c)     cerr<< #a << " = " << (a) << ", " << #b << " = " << (b) << ", "<< #c << " = " << (c) << "\n"
#define LOG4(a, b, c, d)  cerr<< #a << " = " << (a) << ", " << #b << " = " << (b) << ", "<< #c << " = " << (c) << ", " << #d << " = " << (d) << "\n"
#define endl "\n"

typedef long long int ll;
typedef pair<int, int> pii;
typedef vector<pii> vii;
typedef vector<int> vi;
typedef vector<long long int> vll;

const double EPS = 1e-9;
const double pi = acos(-1);
const int INF = 1e18;
const int inf = 1e9;
const int MOD = 1e9 + 7;
const int nax = 200000 + 10;
const int base = 29;

ll hash1[nax], hash2[nax];
int n;
string s1, s2;
ll po[nax], invmodi[nax];

ll power(ll a, ll n)
{
    ll ans = 1;
    while(n)
    {
        if(n % 2 == 1) ans = (ans % MOD * a) % MOD;
        a = (a % MOD * a) % MOD;
        n /= 2;
    }
    return ans;
}
ll givemehash(int l, int r, ll hashi[])
{
    ll ans = hashi[r] - hashi[l - 1] * po[r - l + 1];
    ans %= MOD;
    if(ans < 0) ans += MOD;
    return ans;
}
bool solve(int l1, int r1, int l2, int r2)
{
    if(l1 == r1) return s1[l1] == s2[r2];
    ll hash11 = givemehash(l1, r1, hash1);
    ll hash22 = givemehash(l2, r2, hash2);
    if(hash11 == hash22) return true;
    int len = (r1 - l1 + 1);
    if(len % 2 == 1) return false;
    len /= 2;
    if(solve(l1 + len , r1, l2, l2 + len - 1) && solve(l1, l1 + len - 1, l2 + len, r2)) return true;
    if(solve(l1 + len, r1, l2 + len, r2) && solve(l1, l1 + len - 1, l2, l2 + len - 1)) return true;
    return false;
}
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> s1 >> s2;
    n = s1.length();
    po[0] = 1;
    s1 = "#" + s1;
    s2 = "#" + s2;
    for(int i = 1; i <= n; i++)
    {
        po[i] = (po[i - 1] * base) % MOD;
        //invmodi[i] = power(po[i], MOD - 2);
    }
    for(int i = 1; i <= n; i++)
    {
        hash1[i] = (hash1[i - 1] * base + (s1[i] - '0')) % MOD;
        hash2[i] = (hash2[i - 1] * base + (s2[i] - '0')) % MOD;
    }
    if(solve(1, n, 1, n)) cout << "YES";
    else cout << "NO";
    return 0;
}
