//**KEEP IT SHORT AND SIMPLE**

#include <bits/stdc++.h>
#define IO ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define FILES freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#define REP(i,a,b) for (int i = a; i < b; i++)
#define NL '\n'
#define F first
#define S second
#define dot(a, b) (conj(a) * (b)).real()
#define cross(a, b) (conj(a)* (b)).imag()
using namespace std;
typedef long long ll;
typedef long double ld;
typedef bool bl;
typedef vector < vector<long long> > vvl;
typedef vector <long long> vll;
typedef pair <long long, long long> pll;
typedef map <long long, long long> mll;
typedef map <long long, bool> mlb;
typedef priority_queue<long long, vector<long long>, greater<long long> > minPq;
typedef tuple<ll, ll, ll> line;
typedef complex<double> point;
const double pi = 2 * acos(0.0);
const int OO = 0x3f3f3f3f;
const int NMAX = 200010;
ll n, m;
vvl Adj(NMAX);
ll color[NMAX];
bl valid;
void dfs(ll point, ll parent)
{
    color[point] = 3 - color[parent];
    for(int i = 0;i < Adj[point].size();i++)
    {
        ll temp = Adj[point][i];
        if(color[point] == color[temp])
        {
            valid = 0;
            return;
        }
        if(!color[temp])
            dfs(temp, point);
    }
}
int main()
{
    IO
    valid = 1;
    cin >> n >> m;
    vector<bl>ans(m);
    ll u[m], v[m];
    REP(i, 0, m)
    {
        cin >> u[i] >> v[i];
        Adj[u[i]].push_back(v[i]);
        Adj[v[i]].push_back(u[i]);
    }
    color[0] = 1;
    dfs(1, 0);
    if(!valid)
    {
        cout << "NO";
        return 0;
    }
    REP(i, 0, m)
    {
        if(color[u[i]] == color[v[i]])
        {
            cout << "NO";
            return 0;
        }
        ans[i] = (color[u[i]] == 2);
    }
    cout << "YES" << NL;
    REP(i, 0, ans.size()) cout << ans[i];
    return 0;
}
