#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int gcd(int a, int b) {
	while (b) {
		int c = a % b;
		a = b;
		b = c;
	}
	return a;
}

int a[705];
bool can[705][705];

bool canLeft[705][705];
bool canRight[705][705];

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);

	int n;
	cin >> n;
	
	for (int i = 1; i <= n; i++) cin >> a[i];

	for (int i = 0; i <= n + 1; i++) {
		for (int j = i; j <= n + 1; j++) {
			can[i][j] = can[j][i] = (gcd(a[i], a[j]) != 1);
		}
	}
	
	for (int len = 1; len <= n; len++) {
		for (int L = 1, R = len; R <= n; L++, R++) {
			for (int root = L; root <= R; root++) {
				if ((root == L || canRight[L][root - 1]) && (root == R || canLeft[root + 1][R])) {
					if (can[L - 1][root]) canLeft[L][R] = true;
					if (can[root][R + 1]) canRight[L][R] = true;
				}
			}
		}
	}
	
	if (canLeft[1][n]) {
		cout << "Yes\n";
	}
	else {
		cout << "No\n";
	}
}
