#include<iostream>
#include<vector>
#include<sstream>
#include<algorithm>
#include<numeric>
#include<cstdlib>
#include<cmath>
#include<complex>
#include<set>
#include<map>
#include<queue>
#include<cassert>

using namespace std;

#define rep(i,n) for(int i=0;i<n;i++)
#define rp(i,c) rep(i,(c).size())
#define fr(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)
#define pb push_back
#define mp make_pair
#define all(c) (c).begin(),(c).end()
#define dbg(x) cerr<<#x<<" = "<<(x)<<endl

typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int,int> pi;
typedef long long ll;

const int MX=2000010, mod=51123987;
int n,rad[2*MX];
ll l[2*MX], r[2*MX];
char text[MX];

void longest_palindrome(char *text, int n) {
  int i, j, k;
  for (i = 0, j = 0; i < 2*n; i += k, j = max(j-k, 0)) {
    while (i-j >= 0 && i+j+1 < 2*n && text[(i-j)/2] == text[(i+j+1)/2]) ++j;
    rad[i] = j;
    for (k = 1; i-k >= 0 && rad[i]-k >= 0 && rad[i-k] != rad[i]-k; ++k)
      rad[i+k] = min(rad[i-k], rad[i]-k);
  }
  //return *max_element(rad, rad+2*n); // ret. centre of the longest palindrome
}

void run()
{
	cin>>n>>text;
	longest_palindrome(text,n);
	
	rep(i,2*n){
		l[max(0,i-rad[i])]++;
		l[i+1]--;
		r[i]++;
		r[i+rad[i]]--;
	}
	rep(i,2*n)l[i+1]+=l[i], r[i+1]+=r[i];
	
	ll palis=0, pairs=0, sum=0;
	rep(i,2*n)(palis+=(rad[i]+1)/2)%=mod;
	
	for(int i=n;i>=0;i--){
		(pairs+=r[i*2]*sum)%=mod;
		(sum+=l[i*2])%=mod;
	}
	
	cout<<((palis*(palis-1)/2-pairs)%mod+mod)%mod<<endl;
}

int main()
{
#ifndef ONLINE_JUDGE
	int cs=3;rep(i,cs)
#endif
	run();
}
