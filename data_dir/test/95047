#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int n;
vector<vector<int> > a;
ll ans = 0;
vector<int> v;

int main(){

    scanf("%d", &n);
    int cnt = 0;
    for (int i = 0; i < n; i++) {
        int k, x;
        vector<int> tmp;
        scanf("%d", &k);
        int mn = inf;
        bool found = false;
        while (k--) {
            scanf("%d", &x);
            if (mn < x) found = true;
            mn = min(mn, x);
            tmp.pb(x);
        }
        if (found) cnt++;
        else {
            a.pb(tmp);
            v.pb(tmp[0]);
        }
    }

    sort(all(v));

    ans = cnt * 1ll * (n - cnt) * 2;
    ans += cnt * 1ll * cnt;

    for (int i = 0; i < a.size(); i++) {
        if (v.empty()) continue;
        int y = a[i].back();
        int x = a[i][0];
        if (v.back() <= y) continue;
        int l = 0, r = sz(v) - 1;
        int best = r;
        while (l <= r) {
            int mid = (l + r) >> 1;
            if (v[mid] > y) {
                best = mid;
                r = mid - 1;
            } else l = mid + 1;
        }
        ans += sz(v) - best;
    }

    cout << ans << endl;

    return 0;
}
