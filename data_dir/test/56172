
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <cstdio>
#include <random>
#include <chrono>
#define ll long long
#define ld long double
#define pb push_back
#define eb emplace_back
//#define int long long
using namespace std;

const int INF = 2e9;
const int MOD = 1e9 + 7;

int getBitCount(int x) {
	int res = 0;
	for (int i = 0; i < 20; i++) {
		if ((x >> i) & 1) res++;
	}
	return res;
}

void solve() {
	int n, m;
	string s;
	cin >> n >> m >> s;
	vector<vector<int>> q(m, vector<int>(m));
	for (int i = 0; i < n - 1; i++) {
		int a = s[i] - 'a';
		int b = s[i + 1] - 'a';
		q[a][b]++;
		q[b][a]++;
	}

	vector<int> dp(1 << m, INF);
	dp[0] = 0;
	for (int i = 1; i < dp.size(); i++) {
		int bitCount = getBitCount(i);
		for (int x = 0; x < m; x++) {
			if (((i >> x) & 1) == 0) continue;
			int res = dp[i ^ (1 << x)];
			for (int y = 0; y < m; y++) {
				if (x == y) continue;
				if ((i >> y) & 1) res += q[x][y] * bitCount;
				else res -= q[x][y] * bitCount;
			}
			dp[i] = min(res, dp[i]);
		}
	}
	cout << dp[dp.size() - 1];
}

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	//freopen("network.in", "r", stdin);
	//freopen("network.out", "w", stdout);
	solve();
}
