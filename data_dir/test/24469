#include <iostream>
#include <vector>
#include <algorithm>
#include <iterator>
#include <functional>

using namespace std;

int main()
{
	typedef pair<int, int> pairii;
	vector<pairii> v;

	generate_n (back_inserter(v), *istream_iterator<int>(cin), 
				[]() { return make_pair(*istream_iterator<int>(cin), *istream_iterator<int>(cin)); });

	vector<pair<int, int>>::iterator it = find (v.begin(), v.end(),
		                                        make_pair (max_element (v.begin(), v.end(),
								                           [] (const pairii& m, const pairii& v) { return m.first < v.first; })->first, 
	                                            min_element (v.begin(), v.end(), 
					                                       [] (const pairii& v, const pairii& m) { return v.second < m.second; })->second)); 

	cout << (it == v.end() ? - 1 : distance (v.begin(), it) + 1);
}
