/*
    STARK_BOY
*/
#include <bits/stdc++.h>
#include <fstream>
using namespace std;
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define repe(i,a,b) for(ll i=a;i<=b;i++)
#define bac(i,a,b) for(ll i=a;i>=b;i--)
#define pb push_back
#define mp make_pair
#define F first
#define S second
typedef long long ll;
typedef vector< ll > vi;
typedef vector<pair<ll,ll> > vpii;
typedef pair<ll,ll> pii;
#define all(c) c.begin(),c.end()
#define ios ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define PI           3.14159265358979323846  /* pi */
mt19937 rng32(chrono::steady_clock::now().time_since_epoch().count());
#define N 1000005
//Variables Start
ll inf=1e18,MOD=1e9+7;
//Variables End
const int nax=1e5+5;
int n,a[nax],bit[nax][2],b[nax];

void upd(int pos,int val,int ind){
	for(;pos<=n; pos += pos&-pos){
		bit[pos][ind] = min(val,bit[pos][ind]);
	}
}

int get(int pos,int ind){
	int res  = INT_MAX;
	for(;pos>0;pos -= pos&-pos){
		res = min(res,bit[pos][ind]);
	}
	return res;
}
void solve(){
	cin>>n;
	vector<int> v(n),sv,out(n);
	for(int i=0;i<n;i++)cin>>v[i];
	
	//intialise
	
	for(int i=0;i<=n+1;i++){
		bit[i][0] = bit[i][1] = INT_MAX;
	}
	//rotating array
	int pos_min=0;
	for(int i=0;i<n;i++){
		if(v[pos_min]>v[i]){
			pos_min=i;
		}
	}
	vector<int> replace;
	for(int i = pos_min+1;i<n;i++)replace.pb(v[i]);
	for(int i=0; i<=pos_min;i++)replace.pb(v[i]);
	v = replace;
	//for(auto i:v)cout<<i<<" ";
	//cout<<endl;
	
	// coordinate compression
	sv = v; sort(all(sv));
	sv.resize(unique(all(sv))-sv.begin());
	for(int i=0;i<n;i++){
		a[i] = lower_bound(all(sv),v[i])-sv.begin() + 1;
	}
	int ans=1,max_so_far=v.back();
	for(int i=0;i<n;i++){
		if(max_so_far > 2*v[i]){
			break;
		}
		ans++;
		max_so_far = max( max_so_far,v[i]);
	}
	if(ans == n+1){
		for(int i=0;i<n;i++)cout<<-1<<" ";
		cout<<endl;
		return;
	}
	out[n-1] = ans;upd(a[n-1],n-1,0);upd(n-a[n-1]+1,n-1,1);
	for(int i=n-2;i>=0;i--){
		//cout<<"yo";
		if(v[i] <= v[i+1]){
			out[i] = 1+out[i+1];
			upd(a[i],i,0);
			upd(n-a[i]+1,i,1);
		}
		else{
			int val = (v[i]-1)/2;
			int cord = upper_bound(all(sv),val)-sv.begin();
			//cout<<i<<" "<<cord<<endl;
			int pos1 = get(cord,0);
			upd(a[i],i,0);
			int pos2 = get(n-a[i]+1,1);
			upd(n-a[i]+1,i,1);
			
			//cout<<pos1<<" "<<pos2<<endl;
			if(pos1==INT_MAX && pos2==INT_MAX){
				out[i] = n-1-i + out[n-1];
			}else if(pos1<pos2){
				out[i] = pos1-i;
			}
			else out[i] = out[pos2] + pos2 - i;
		}
		//cout<<out[i]<<endl;
	}
	
	// rotating reverse
	vector<int> fin(n);
	for(int i=0;i<=pos_min;i++)fin[i] = out[n-1-pos_min+i];
	for(int i=pos_min+1;i<n;i++)fin[i] = out[i-pos_min-1];
	
	for(auto i:fin)cout<<i<<" ";
	cout<<endl;
}
int main()
{
    ios
    int ti=1;
    //cin>>ti;
    for(int i=1;i<=ti;i++)
    {
		solve();        
    }
    return 0;
        
}
