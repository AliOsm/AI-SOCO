
// In the name of God
#include <bits/stdc++.h>

using namespace std;
#define Size(x) ((int)(x).size())
#define pb push_back
typedef long long ll;
typedef long double ld;
typedef pair<int,int>pii;
const int INF = 1e9 + 10;
const int MN = 2e5 + 10;

int n ,k , cen;
bool is[MN];
int sz[MN];
vector<int>adj[MN] , vec[MN];
set<pii>S;
pii ans[MN];
int Sz = 0;

void dfs(int s,int pr)
{
	sz[s] = is[s];
	int mx = 0;
	for(int i=0;i<Size(adj[s]);++i) if(adj[s][i] != pr){
		dfs(adj[s][i] , s);
		sz[s] += sz[adj[s][i]];
		mx = max(mx , sz[adj[s][i]]);
	}
	mx = max(mx , 2*k-sz[s]);
	if(mx <= k) cen = s;
}

void dfs1(int s,int pr,int rt)
{
	if(is[s]) vec[rt].pb(s);
	for(int i=0;i<Size(adj[s]);++i){
		int v = adj[s][i];
		if(v == pr) continue;
		dfs1(v , s , rt);
	}
}


void solve()
{
	while(Size(S) >= 2){
		int t1 = S.rbegin()->second;
		S.erase(--(S.end()));
		int t2 = S.rbegin()->second;
		S.erase(--(S.end()));
		ans[Sz++] = make_pair(vec[t1].back() , vec[t2].back());
		vec[t1].pop_back() , vec[t2].pop_back();
		if(!vec[t1].empty()) S.insert(make_pair(Size(vec[t1])  , t1));
		if(!vec[t2].empty()) S.insert(make_pair(Size(vec[t2]) , t2));
	}
	if(Size(S))
		ans[Sz++] = make_pair(vec[S.begin()->second].back() , cen);
	cout << 1 << endl << cen+1 << endl;
	for(int i=0;i<Sz;++i) cout << ans[i].first+1 << ' '<< ans[i].second+1 << ' ' << cen+1 << endl;
}

int main()
{
	ios_base :: sync_with_stdio(false) ,cin.tie(0) , cout.tie(0);
	cin >> n >> k;
	for(int i=0;i<n-1;++i){
		int a,b;cin >> a >> b;
		--a,--b;
		adj[a].pb(b) , adj[b].pb(a);
	}
	for(int i=0;i<2*k;++i){
		int t;cin >> t;
		is[t-1] = true;
	}
	dfs(0 , -1);
	for(int i=0;i<Size(adj[cen]);++i){
		dfs1(adj[cen][i] , cen  ,i);
		if(Size(vec[i])) S.insert(make_pair(Size(vec[i]) , i));
	}
	solve();
	return 0;
}

