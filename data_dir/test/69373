#include <iomanip>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <ctime>
#include <cstdio>
#include <cmath>
#include <queue>
#include <bitset>
#include <string>
 
#define ll long long
#define mp make_pair
#define pb push_back
 
using namespace std;
 
const int N = 4000100;
const int M = 20;
const int b = 20;
const ll INF = 4e18;

int n, a[N];
ll c[M][M];
ll f[1 << M][M];
ll dp[1 << M];
int lowbit[1 << M];
int num[N];
vector <int> g[N];

ll calc(int x, int y) {
    if (g[x].size() == 0 || g[y].size() == 0) return 0;
    int j = 0;
    ll res = 0;
    for (int i = 0; i < g[x].size(); i++) {
        while (j < g[y].size() && g[y][j] <= g[x][i]) j++;
        res += (int)g[y].size() - j;
    }
    return res;
}

int main() {
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
    for (int i = 1; i <= n; i++) a[i]--;
    for (int i = 1; i <= n; i++) g[a[i]].pb(i);
    for (int mask = 0; mask < (1 << b); mask++) {
        for (int i = 0; i < b; i++) {
            if (mask & (1 << i)) {
                lowbit[mask] = i;
                break;
            }
        }
    }
    for (int i = 0; i < b; i++) {
        for (int j = 0; j < b; j++) {
            if (i == j) continue;
            c[i][j] = calc(i, j);
            //if (g[i].size() > 0 && g[j].size() > 0) cout << i << " " << j << " " << c[i][j] << endl;
        }
    }
    for (int mask = 0; mask < (1 << b); mask++) { //change
        for (int i = 0; i < b; i++) {
            if (mask & (1 << i)) continue;
            if (mask == 0) f[mask][i] = 0;
            else {
                int newmask = (mask ^ (1 << lowbit[mask]));
                f[mask][i] = f[newmask][i] + c[i][lowbit[mask]];
                //cout << mask << " " << i << " " << lowbit[mask] << " " << f[mask][i] << endl;
            }
        }
    } 
    dp[0] = 0;
    for (int mask = 1; mask < (1 << b); mask++) {
        dp[mask] = INF;
        for (int i = 0; i < b; i++) {
            if (!(mask & (1 << i))) continue;
            int newmask = (mask ^ (1 << i));
            dp[mask] = min(dp[mask], dp[newmask] + f[newmask][i]);
        }
    }
    cout << dp[(1 << b) - 1];
    return 0;
}