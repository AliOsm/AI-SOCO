#define _CRT_SECURE_NO_DEPRECATE
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <cmath>
#ifndef __GNUC__
#include <intrin.h>
#endif // !__GNUC__
#include <random>
#include <vector>
#include <cstdio>
#include <string>
#include <cstdlib>
#include <numeric>
#include <cstring>
#include <complex>
#include <cassert>
#include <iostream>
#include <algorithm>
#include <functional>

int bsf(int x) {
#ifdef __GNUC__
	return __builtin_ctz(x);
#else
	unsigned long i;
	_BitScanForward(&i, x);
	return i;
#endif
}
int bsr(int x) {
#ifdef __GNUC__
	return 31 - __builtin_clz(x);
#else
	unsigned long i;
	_BitScanReverse(&i, x);
	return i;
#endif
}

using namespace std;
typedef long long int64;
const double pi = 3.14159265358979323846;
const int inf = (int)2e+9 + 2;
const int mod = (int)1e+9 + 7;
const double eps = 1e-8;
const int N = 400000;

int n, m, k;

string pat = "aeiouy";

void solve()
{
	cin >> n;
	vector<int> a(n + 2);
	for (int i = 1; i <= n; ++i)
		cin >> a[i];
	a[0] = 1;
	a[n + 1] = 1'000'000;
	int ans = inf;
	for (int i = 0; i <= n; ++i) {
		int t = max(a[i] - 1, 1'000'000 - a[i + 1]);
		ans = min(ans, t);
	}
	cout << ans;
}

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0), cout.tie(0);
	int test = 1;
	//cin >> test;
	for (; test; --test)
		solve();
	return 0;
}