/*	 Hello World!	*/

#include <bits/stdc++.h>

#define pb push_back
#define pf push_front
#define mp make_pair
#define f first
#define s second
#define let(x,a) __typeof(a) x(a)
#define all(a) (a).begin(),(a).end() 
#define endl '\n'
#define present(c,x) ((c).find(x) != (c).end()) 
#define tr(v,it) for( let(it,v.begin()) ; it != v.end() ; it++)
#define rtr(v,it) for( let(it,v.rbegin()) ; it != v.rend() ; it++)
#define rep1(i,n) for(int i=0; i<(int)n;i++)
#define rep2(i,a,b) for(int i=(int)a; i<=(int)b; i++)

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define LL long long int
#define PII pair<int,int>
#define VI vector<int>
#define inf INT_MAX
#define PDD pair<double,double>

using namespace std;

void FastIO()
{
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	cout.tie(NULL);
}

double foo(PDD a, PDD b)
{
	return (a.f-b.f)*(a.f-b.f) + (a.s-b.s)*(a.s-b.s);
}

int main()
{
	FastIO();
	int n;
	double a,b,dmin=1e18,dmax=0,A,B,C,x1,y1,x,y;
	cin>>n>>a>>b;
	vector< PDD > V;
	for(int i=0;i<n;i++)
	{
		cin>>x>>y;
		V.pb(mp(x,y));
	}
	for(int i=0;i<n;i++)
	{
		PDD p1=V[i];
		PDD p2=V[(i+1)%n];
		A=p2.s-p1.s;
		B=-(p2.f-p1.f);
		y1=p1.s;
		x1=p1.f;
		C=(-B*y1 - A*x1);
		x=(B*(B*a-A*b)-A*C)/(A*A+B*B);
		y=(A*(-B*a+A*b)-B*C)/(A*A+B*B);
		if(fabs(sqrt(foo(mp(x,y),p1))+sqrt(foo(mp(x,y),p2))-sqrt(foo(p1,p2)))<1e-6)
		{
			dmin=min(dmin,foo(mp(x,y),mp(a,b)));
		}
		dmin=min(dmin,foo(p1,mp(a,b)));
		dmax=max(dmax,foo(p1,mp(a,b)));
	}
	cout<<setprecision(20)<<fixed<<2*asin(1)*(dmax-dmin)<<endl;
	return 0;
}