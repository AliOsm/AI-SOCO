//***********************************
//********     WARNING      *********
//***    Bugs are everywhere!     ***
//***********************************

#include <iostream>
#include <list>
#include <stack>
#include <cmath>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <cstdlib>
#include <cstdio>
#include <set>
#include <queue>
#include <functional>
#include <ctime>
#include <iomanip>
#include <iterator>

using namespace std;
#define double long double

typedef long long ll;
typedef unsigned long long ull;

typedef pair<int,int> pr;
typedef pair<ll,ll> prl;

const int mod7 = 1000000007;
const int oo = 1000000000;
const double PI = acos(-1.);

string s[201];

map<char,set<char> > graph;
set<char> need;

char data[10] = {'R','G','B','Y','W','1','2','3','4','5'};


int main()
{
    ios::sync_with_stdio(false);

    int n;
    cin >> n;
    for(int i=0;i<n;++i)
    {
        cin >> s[i];
        graph[s[i][0]].insert(s[i][1]);
        graph[s[i][1]].insert(s[i][0]);
        need.insert(s[i][0]);
        need.insert(s[i][1]);
    }
    
    int lim = 1 << 10;
    int ans = 25;
    
    for(int i=0;i<lim;++i)
    {
        int cnt = 0;
        set<char> used;
        for(int j=0;j<10;++j)
        {
            if((i>>j)&1)
            {
                used.insert(data[j]);
                ++cnt;
            }
        }

        bool bad = false;
        
        for(int j=0;j<n && !bad;++j)
        {
            for(int k=j+1;k<n;++k)
            {
                if(s[j]==s[k])
                    continue;
                char A = s[j][0];
                char B = s[j][1];
                char C = s[k][0];
                char D = s[k][1];
                if(A!=C)
                {
                    if(used.find(A)!=used.end()
                        || used.find(C)!=used.end())
                        continue;
                }
                if(B!=D)
                {
                    if(used.find(B)!=used.end()
                        || used.find(D)!=used.end())
                        continue;
                }
                bad = true;
                break;
            }
        }

        if(!bad)
        {
            ans = min(ans,cnt);
        }
    }
    cout << ans;
    return 0;
}