#include <bits/stdc++.h>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef long long ll;
typedef unsigned long long llu;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<string, int> psi;
typedef pair<char, int> pci;
typedef pair<int, char> pic;
const ll MOD = (ll)1e9 + 7;
const long double PI = 3.141592653589793238462643383279502884197;

ll fac[1], inv[1];
ll gcd(ll a,ll b){return b?gcd(b,a%b):a;}
ll mp(ll a,ll b){ll ret=1;while(b){if(b&1)ret=ret*a%MOD;a=a*a%MOD;b>>=1;}return ret;}
ll cmb(ll r, ll c) {return fac[r] * inv[c] % MOD * inv[r - c] % MOD;}


vector<int> x;
int cnt[400005];
int vec[400005];
int n;

int main() {
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        scanf("%d", &vec[i]);
        x.push_back(vec[i]);
    }

    sort(all(x));
    x.erase(unique(all(x)), x.end());

    for (int i = 0; i < n; i++) {
        int t = lower_bound(all(x), vec[i]) - x.begin();
        cnt[t]++;
    }

    int ord[400005];
    iota(ord, ord + sz(x), 0);
    sort(ord, ord + sz(x), [](int a, int b){ return cnt[a] < cnt[b]; });

    int cc = 0;
    int mav = 0;
    int r = 0, c = 0;
    int l = 0;

    for (int i = 1; i * i <= n; i++) {
        while (l < sz(x) && cnt[ord[l]] <= i) {
            cc += cnt[ord[l]];
            l++;
        }

        int sum = sz(x) - l;
        int tt = (sum * i + cc) / i;

        if (mav <= tt * i && i <= tt) {
            mav = tt * i;
            r = i, c = tt;
        }
    }

    printf("%d\n", mav);
    printf("%d %d\n", r, c);

    vector<int> vv;
    for (int ii = 0; ii < sz(x); ii++) {
        int i = ord[sz(x) - ii - 1];
        for (int j = 0; j < min(r, cnt[i]); j++)
            vv.push_back(x[i]);
    }

    vector<int> mat[3000];
    for (int i = 0; i < r; i++) mat[i].resize(c);

    int xx = 0, yy = 0;
    for (int i = 0; i < mav; i++) {
        mat[xx][yy] = vv[i];
        xx++; yy++;
        xx %= r; yy %= c;

        /*
        if (mat[xx][yy]) yy++;
        yy %= c;
        */

        while (mat[xx][yy] && i != mav - 1) {
            yy++;
            yy %= c;
        }
    }

/*
    for (int i = 0; i < r; i++)
        for (int j = 0; j < c; j++)
            assert(mat[i][j]);
*/

    for (int i = 0; i < r; i++) {
        for (int j = 0; j < c; j++)
            printf("%d ", mat[i][j]);
        printf("\n");
    }
}