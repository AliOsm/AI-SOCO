#include <bits/stdc++.h>
#define int long long
using namespace std;
inline int input(){int32_t x ; scanf("%d",&x);return x;}
inline int in(){int32_t x ; scanf("%d",&x);return x;}
const int maxn = 2e5 + 10;
int n , q;
string s;
inline int value(char ch)
{
    if (ch >= 'a' && ch <= 'z') return ch - 'a';
    else if (ch >= 'A' && ch <= 'Z') return ch - 'A' + 26;
    return ch - '0' + 52;
}
vector<int> positions[100];
int stree[4 * maxn];
bool mark[maxn];
set<int> pos[100];
inline int get(int ql , int qr , int p = 0 , int l =0  , int r = n - 1)
{
    if (l > qr || r < ql ) return 0 ;
    if (l >= ql && r <= qr) return stree[p];
    int mid = (l + r) >> 1;
    return get(ql,qr,2*p+1,l,mid)+get(ql,qr,2*p+2,mid+1,r);
    
}
inline void update(int qx , int p = 0 , int l = 0 , int r = n - 1)
{
    if (l > qx || r < qx) return ;
    if (l == r) {stree[p] = 1 ; return ; }
    int mid = (l + r) >> 1;
    update(qx,2*p+1,l,mid),update(qx,2*p+2,mid+1,r);
    stree[p] = stree[2 * p + 1] + stree[2 * p + 2];
}
inline int bs(int val , int lim)
{
    int low = -1 , hi = positions[val].size();
    while (low + 1 < hi)
    {
        int mid = (low + hi) >> 1;
        int ss = positions[val][mid] - get(0,positions[val][mid]);
        if (ss <= lim ){
            low = mid;
        }
        else hi = mid;
    }
    return hi;
}
int Q[maxn],t;
inline void doJob(int l , int r , int val)
{
    int high = bs(val,r);
    int low = bs(val,l-1);
    if (low == high) return;
    set<int>::iterator it =  pos[val].lower_bound(positions[val][low]);
    t = 0;
    while(it != pos[val].end() && (high == positions[val].size() || *it < positions[val][high]))
    {
        mark[*it] = true;
        update(*it);
        Q[t ++] = *it;
        it ++;
    }
    for (int i = 0 ; i < t ; i ++)
        pos[val].erase(Q[i]);
}
int32_t main()
{
    n = in() , q = in();
    cin >> s;
    for (int i = 0 ; i < s.size() ; i ++){
        
        positions[value(s[i])].push_back(i);
        pos[value(s[i])].insert(i);
    }
    while(q --)
    {
        int l = in() - 1 , r = in() - 1 ; char ch ; do{ch = getchar() ; } while(!(ch >= 'a' && ch <= 'z') && !(ch >= 'A' && ch <= 'Z') &&
                                                                                !(ch >= '0' && ch <= '9'));
        doJob(l,r,value(ch));
    }
    for (int i = 0 ; i < n ; i ++)
        if (!mark[i]) cout << s[i];
}