/* prev contains the minimum cut. If prev[v] == -1, then v is not
 * reachable from s; otherwise, it is reachable.
 * RUNNING TIME: O(n^3)
*/
#include <bits/stdc++.h>
#define NN 305

 using namespace std;
int cap[NN][NN], deg[NN], adj[NN][NN];
int q[NN], prev[NN],a[NN],b[NN],n,m,sumb,suma;
int dinic( int n, int s, int t )
{
    int flow = 0;
    while( true )
    {
        memset( prev, -1, sizeof( prev ) );
        int qf = 0, qb = 0;
        prev[q[qb++] = s] = -2;
        while( qb > qf && prev[t] == -1 )
            for( int u = q[qf++], i = 0, v; i < deg[u]; i++ )
                if( prev[v = adj[u][i]] == -1 && cap[u][v] )
                    prev[q[qb++] = v] = u;
        if( prev[t] == -1 ) break;
        for( int z = 0; z < n; z++ ) if( cap[z][t] && prev[z] != -1 )
        {
            int bot = cap[z][t];
            for( int v = z, u = prev[v]; u >= 0; v = u, u = prev[v] )
                bot =min(bot , cap[u][v]);
            if( !bot ) continue;
            cap[z][t] -= bot;
            cap[t][z] += bot;
            for( int v = z, u = prev[v]; u >= 0; v = u, u = prev[v] )
            {
                cap[u][v] -= bot;
                cap[v][u] += bot;
            }
            flow += bot;
        }
    }
    return flow;
}
int main()
{
	cin>>n>>m;
	for(int i=0 ; i<n ; i++){
		cin>>a[i];
		suma += a[i];
	}
	for(int i=0 ; i<n ; i++){
		cin>>b[i];
		sumb += b[i];
	}
	for(int i=0 ; i<m ; i++){
		int x,y;cin>>x>>y;
		x--;y--;
		cap[x][n+y] = a[x];
		cap[y][n+x] = a[y];
	}
	for(int i=0 ; i<n ; i++){
		cap[2*n][i] = a[i];
		cap[i+n][2*n+1] = b[i];
		cap[i][n+i] = a[i];
	}
    for( int u = 0; u < 2*n+2; u++ )
        for( int v = 0; v < 2*n+2; v++ ) if( cap[u][v] || cap[v][u] )
            adj[u][deg[u]++] = v;
    if( dinic( 2*n+2, 2*n, 2*n+1 ) == sumb && sumb == suma ){
    	cout<<"YES\n";
    	for(int i=0 ; i<n ; i++,cout<<endl)
    		for(int j=0 ; j<n ; j++)
    			cout<<cap[j+n][i]<<' ';
    }
    else
    	cout<<"NO\n";
    return 0;
}