#include <bits/stdc++.h>

using namespace std ;

const int MAXN = 4010 , MAXK = 810 ;

int dp[2][MAXN], cost1[MAXN][MAXN] , cost[MAXN][MAXN] , arr[MAXN][MAXN] ;

void solve(int g , int l , int r , int kl , int kr)
{
	if(l > r)
		return ;
	int mid = (l + r) >> 1 ;
	int p ;
	int Min = 1e9 ;
	int now = g & 1 ;
	int prv = !(now) ;
	for(int k = kl ; k <= min(mid , kr) ; ++k)
	{
		int newcost = dp[prv][k-1] + cost[k][mid] ;
		if(newcost < Min)
		{
			Min = newcost ;
			p = k ;
		}
	}
	dp[now][mid] = Min ;
	solve(g , l , mid-1 , kl , p) ;
	solve(g , mid+1 , r , p , kr) ;
}

int readInt () {
	bool minus = false;
	int result = 0;
	char ch;
	ch = getchar();
	while (true) {
		if (ch == '-') break;
		if (ch >= '0' && ch <= '9') break;
		ch = getchar();
	}
	if (ch == '-') minus = true; else result = ch-'0';
	while (true) {
		ch = getchar();
		if (ch < '0' || ch > '9') break;
		result = result*10 + (ch - '0');
	}
	if (minus)
		return -result;
	else
		return result;
}

int main()
{
	cin.tie(0) ;
	int n , k ;
	n = readInt() ;
	k = readInt() ;
	for(int i = 1 ; i <= n ; ++i)
	{
		for(int j = 1 ; j <= n ; ++j)
			arr[i][j] = readInt() ;
	}
	for(int i = 1 ; i <= n ; ++i)
	{
		cost1[i][i] = 0 ;
		for(int j = i+1 ; j <= n ; ++j)
			cost1[i][j] = cost1[i][j-1] + arr[i][j] ; 
	}
	for(int j = n ; j >= 1 ; --j)
	{
		cost[j][j] = 0 ;
		for(int i = j-1 ; i >= 1 ; --i)
			cost[i][j] = cost[i+1][j] + cost1[i][j] ;
	}
	for(int i = 1 ; i <= n ; ++i)
		dp[1][i] = cost[1][i] ;
	for(int g = 2 ; g <= k ; ++g)
		solve(g , g , n , g , n) ; 
	return printf("%d" , dp[k&1][n]) , 0 ;
}