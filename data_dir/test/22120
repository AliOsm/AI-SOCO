/*
    Author : harshit15
    Before submission
    - Fast IO
    - mx value
    - int overflow
*/
#include <bits/stdc++.h> 
using namespace std;
#define fl(i,a,b) for(int i=a;i<b;i++)
#define ll long long
#define endl '\n'
#define pb push_back
#define ff first
#define ss second
#define mod 1000000007
#define mx 400005
#define mx2 15
#define inf 4e18
#define fast ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
ll arr[mx];
int h[mx];
int builtin_popcount(ll z)
{
	int c = 0;
	while(z)
	{
		c += (z&1);
		z >>= 1;
	}
	return c;
}
ll A[mx];
ll tree[4*mx];
ll lazy[4*mx];
void build(int node, int start, int end)
{
    if(start == end)
    {
        tree[node] = A[start];
    }
    else
    {
        int mid = (start + end) / 2;
        build(2*node, start, mid);
        build(2*node+1, mid+1, end);
        tree[node] = tree[2*node] | tree[2*node+1];
    }
}
void updateRange(int node, int start, int end, int l, int r, ll val)
{
    if(lazy[node] != 0)
    { 
        tree[node] = lazy[node];    // Update it
        if(start != end)
        {
            lazy[node*2] = lazy[node];                  // Mark child as lazy
            lazy[node*2+1] = lazy[node];                // Mark child as lazy
        }
        lazy[node] = 0;                                  // Reset it
    }
    if(start > end or start > r or end < l)              // Current segment is not within range [l, r]
        return;
    if(start >= l and end <= r)
    {
        tree[node] = val;
        if(start != end)
        {
            lazy[node*2] = val;
            lazy[node*2+1] = val;
        }
        return;
    }
    int mid = (start + end) / 2;
    updateRange(node*2, start, mid, l, r, val);        // Updating left child
    updateRange(node*2 + 1, mid + 1, end, l, r, val);   // Updating right child
    tree[node] = tree[node*2]  | tree[node*2+1];        // Updating root with max value 
}
ll queryRange(int node, int start, int end, int l, int r)
{
    if(start > end or start > r or end < l)
        return 0;         
    if(lazy[node] != 0)
    { 
        tree[node] = lazy[node];    // Update it
        if(start != end)
        {
            lazy[node*2] = lazy[node];                  // Mark child as lazy
            lazy[node*2+1] = lazy[node];                // Mark child as lazy
        }
        lazy[node] = 0;                                  // Reset it
    }
    if(start >= l and end <= r)             // Current segment is totally within range [l, r]
        return tree[node];
    int mid = (start + end) / 2;
    ll p1 = queryRange(node*2, start, mid, l, r);         // Query left child
    ll p2 = queryRange(node*2 + 1, mid + 1, end, l, r); // Query right child
    return (p1 | p2);
}
main()
{
	fast;
	string s;
	cin >> s;
	int n = s.size();
	s = 'a' + s;
	fl(i,1,n+1)
	{
		arr[i] = s[i] - 'a';
		arr[i] = (1LL << arr[i]);
	}
	
	fl(i,1,n+1)
	{
		A[i] = arr[i];
	}
	build(1,1,mx-1);
	int q;
	cin >> q;

	while(q--)
	{
		int t;
		cin >> t;
		if(t == 1)
		{
			ll x;
			char y;
			cin >> x;
			cin >> y;
			int z = y - 'a';
			z = (1LL<< z);
			//cout<<h[x]<<" "<<h[x] + subtree[x]<<endl;
			updateRange(1,1,mx-1,x,x,z);	 
		}
		else
		{
			int l,r;
			cin >> l >> r;

			ll z= queryRange(1,1,mx-1,l,r);
			//cout<<h[x]<<" "<<h[x] + subtree[x]<<endl;
			cout<<__builtin_popcount(z)<<endl;
		}
	}
 
 
 
 
}