#include <stdio.h>
#include <vector>
#include <algorithm>
#define pb push_back
using namespace std;

struct Op {
    int idx;
    int v1;
    int v2;

    Op() {}
    Op(int idx, int v1, int v2):idx(idx), v1(v1), v2(v2) {}
};

const int MAXN = (int)2e5 + 5;
const int INF = (int)1e9 + 5;

int a[MAXN];

void print_sol(vector<Op>& ans) {
    for (int i = 0; i < (int)ans.size(); i++) {
        if (ans[i].idx == 1) {
            printf("%d %d %d\n", ans[i].idx, ans[i].v1, ans[i].v2);
        } else {
            printf("%d %d\n", ans[i].idx, ans[i].v1);
        }
    }
    return;
}

int main(void) {
    int n;
    int neg = 0;
    int small_neg = -INF;
    int small_neg_idx = -1;

    vector<int> zero_idx;
    vector<Op> ans;

    scanf(" %d", &n);
    for (int i = 1; i <= n; i++) {
        scanf(" %d", &a[i]);
        if (a[i] == 0) {
            zero_idx.pb(i);
        } else if (a[i] < 0) {
            neg++;
            if (a[i] > small_neg) {
                small_neg = a[i];
                small_neg_idx = i;
            }
        }
    }

    for (int i = 0; i < (int)zero_idx.size() - 1; i++) {
        ans.pb(Op(1, zero_idx[i], zero_idx[i + 1]));
    }

    if (neg % 2 == 1) {
        if (zero_idx.size() > 0) {
            ans.pb(Op(1, zero_idx.back(), small_neg_idx));
        }
        if (ans.size() < n - 1) {
            ans.pb(Op(2, small_neg_idx, 0));
        }
        int last = -1;
        for (int i = 1; i <= n; i++) {
            if (a[i] != 0 && i != small_neg_idx) {
                if (last == -1) {
                    last = i;
                } else {
                    ans.pb(Op(1, i, last));
                }
            }
        }
    } else {
        if (zero_idx.size() > 0) {
            if (ans.size() < n - 1) {
                ans.pb(Op(2, zero_idx.back(), 0));
            }
        }
        int last = -1;
        for (int i = 1; i <= n; i++) {
            if (a[i] != 0) {
                if (last == -1) {
                    last = i;
                } else {
                    ans.pb(Op(1, i, last));
                }
            }
        }
    }
    print_sol(ans);
    return 0;
}
