#include <bits/stdc++.h>

using namespace std;

#define x first
#define y second
#define mp make_pair
#define pb push_back
#define sqr(a) ((a) * (a))
#define sz(a) int(a.size())
#define all(a) a.begin(), a.end()
#define forn(i, n) for(int i = 0; i < int(n); i++) 
#define fore(i, l, r) for(int i = int(l); i < int(r); i++)

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template <class A, class B> ostream& operator << (ostream& out, const pair<A, B> &a) {
	return out << "(" << a.x << ", " << a.y << ")";
}

template <class A> ostream& operator << (ostream& out, const vector<A> &v) {
	out << "[";
	forn(i, sz(v)) {
		if(i) out << ", ";
		out << v[i];
	}
	return out << "]";
}

mt19937 rnd(time(NULL));

const int INF = int(1e9);
const li INF64 = li(1e18);
const int MOD = INF + 7;
const ld EPS = 1e-9;
const ld PI = acos(-1.0);

pt a[4], b[4];

bool read () {
	if (scanf("%d%d", &a[0].x, &a[0].y) != 2)
		return false;
	fore(i, 1, 4) scanf("%d%d", &a[i].x, &a[i].y);
	forn(i, 4) scanf("%d%d", &b[i].x, &b[i].y);
	return true;
}

bool in(pt a, pt b[4]){
	int x1 = INF, x2 = -INF, y1 = INF, y2 = -INF;
	
	forn(i, 4){
		x1 = min(x1, b[i].x);
		x2 = max(x2, b[i].x);
		y1 = min(y1, b[i].y);
		y2 = max(y2, b[i].y);
	}
	
	return (x1 <= a.x && a.x <= x2 && y1 <= a.y && a.y <= y2);
}

struct line{
	int A, B, C;
	line(){};
	line(pt a, pt b){
		A = a.y - b.y;
		B = b.x - a.x;
		C = -A * a.x - B * a.y;
	}
};

inline int area (pt a, pt b, pt c) {
	return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);
}
 
inline bool intersect_1 (int a, int b, int c, int d) {
	if (a > b)  swap (a, b);
	if (c > d)  swap (c, d);
	return max(a,c) <= min(b,d);
}
 
bool intersect (pt a, pt b, pt c, pt d) {
	return intersect_1 (a.x, b.x, c.x, d.x)
		&& intersect_1 (a.y, b.y, c.y, d.y)
		&& area(a,b,c) * area(a,b,d) <= 0
		&& area(c,d,a) * area(c,d,b) <= 0;
}

void solve() {
	forn(i, 4) if (in(b[i], a)){
		puts("YES");
		return;
	}
	
	forn(i, 4){
		a[i] = mp(a[i].x + a[i].y, a[i].x - a[i].y);
		b[i] = mp(b[i].x + b[i].y, b[i].x - b[i].y);
	}
	
	forn(i, 4) if (in(a[i], b)){
		puts("YES");
		return;
	}
	
	forn(i, 4) forn(j, 4) if (intersect(a[i], a[(i + 1) % 4], b[j], b[(j + 1) % 4])){
		puts("YES");
		return;
	}
	
	puts("NO");
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
	
	int tt = clock();
	
#endif
	
	cerr.precision(15);
	cout.precision(15);
	cerr << fixed;
	cout << fixed;

	while(read()) {	
		solve();
		
#ifdef _DEBUG
	cerr << "TIME = " << clock() - tt << endl;
	tt = clock();
#endif

	}
}