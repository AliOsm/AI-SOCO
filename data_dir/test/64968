#include<bits/stdc++.h>
#define rep(i,start,lim) for(lld i=start;i<lim;i++)
#define repd(i,start,lim) for(lld i=start;i>=lim;i--)
#define scan(x) scanf("%lld",&x)
#define print(x) printf("%lld ",x)
#define f first
#define s second
#define pb push_back
#define mp make_pair
#define br printf("\n")
#define sz(a) lld((a).size())
#define YES printf("YES\n")
#define NO printf("NO\n")
#define all(c) (c).begin(),(c).end()
using namespace std;
#define INF         1011111111
#define LLINF       1000111000111000111LL
#define EPS         (double)1e-10
#define MOD         1000000007
#define PI          3.14159265358979323
using namespace std;
typedef long double ldb;
typedef long long lld;
lld powm(lld base,lld exp,lld mod=MOD) {lld ans=1;while(exp){if(exp&1) ans=(ans*base)%mod;exp>>=1,base=(base*base)%mod;}return ans;}
typedef vector<lld> vlld;
typedef pair<lld,lld> plld;
typedef map<lld,lld> mlld;
typedef set<lld> slld;
#define N 10005
#define B1 31
#define B2 37
#define MOD1 1000000007
#define MOD2 1000000009
map<plld,lld> hashmap;
map<string,string> m2;
lld p1[10*N],p2[10*N];
lld prv[N],mk[N];
int main()
{
	p1[0] = p2[0] = 1;
	rep(i,1,10*N) p1[i] = (p1[i-1]*B1)%MOD1, p2[i] = (p2[i-1]*B2)%MOD2;
	string s,t;
	lld n,m,maxm=0;
	cin>>n>>s>>m;
	s=" "+s;
	rep(i,1,m+1) {
		cin>>t;
		lld hash1=0,hash2=0;
		lld tmp = sz(t);
		maxm = max(maxm, tmp);
		string tatti ="";
		rep(j,0,tmp) if(t[j]>='A' and t[j]<='Z') tatti += tolower(t[j]); else tatti += t[j];
		m2[tatti] = t;
		t = tatti;
		rep(j,0,tmp) hash1 = (hash1 + (t[j]-'a'+1) * p1[j])%MOD1, hash2 = (hash2 + (t[j]-'a'+1) * p2[j])%MOD2; 
		hashmap[mp(hash1,hash2)] ++;
	}
	mk[0]=1;
	rep(i,1,n+1) {
		lld hash1 = 0, hash2 = 0;
		string tatti="";
		repd(j,i,1) {
			if((i-j+1) > maxm) break;
			tatti += s[j];
			hash1 = (hash1 + (s[j]-'a'+1) * p1[i-j])%MOD1, hash2 = (hash2 + (s[j]-'a'+1) * p2[i-j])%MOD2;  
			if(mk[j-1] and hashmap[mp(hash1,hash2)]>0) {
				mk[i]=1;
				prv[i] = j-1;
				break;
			}
		}
	} 
	string ans="";
	lld curr=n;
	vector<string> v;
	while(1) {
		string tmp="";
		lld neeche = prv[curr];
		repd(i,curr,neeche+1) tmp += s[i];
		tmp = m2[tmp];
		v.pb(tmp);
		if(neeche == 0) break; 
		curr = neeche;
	}
	reverse(all(v));
	for(auto i:v) cout<<i<<" ";
	return 0;
}