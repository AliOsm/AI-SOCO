#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 1000000007
#define maxn 5005
#define IN freopen("C.in","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 5000000000000000000LL
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 2
#define sq(x) ((x)*(x))

using namespace __gnu_pbds;
using namespace std ;

typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

i64 gcd(i64 a, i64 b)
{
    if(b==0) return a ;
    return gcd(b,a%b) ;
}

i64 lcm(i64 a, i64 b) {return a*(b/gcd(a,b)) ; }

i64 w[1005] , a[1005] ;
pair <i64,i64> dp[1002][6800] , res[1002][6800] ;
map <i64,i64> M ;

int main()
{
    i64 i , j , k , l , m , n ;

    scanf("%lld %lld",&n,&k) ;

    for(i=1 ; i<=n ; i++)
    {
        scanf("%lld",&w[i]) ;
        a[i] = gcd(w[i],k) ;
    }
    if(k==1)
    {
        m = 1000000000000000LL ;
        for(i=1 ; i<=n ; i++)
        {
            if(w[i]<=m){
                m = w[i] ;
                j = i ;
            }
        }
        printf("1\n%lld\n",j) ;
        return 0 ;
    }
    vector <i64> divisor ;
    divisor.pb(0) ;

    for(i=1 ;i*i <=k ; i++ )
    {
        if(k%i==0){
            divisor.pb(i) ;
            if( (k/i) != i ) divisor.pb(k/i) ;
        }
    }

    sort(divisor.begin(),divisor.end()) ;

    for(i=1 ; i<divisor.size() ; i++) M[ divisor[i] ] = i ;
    m = (i64)divisor.size() - 1 ;
 //   for(i=1 ; i<=m ; i++) printf("%lld\n",divisor[i]) ;

    for(i=0; i <=m ; i++) dp[0][i] = mp(INF,INF) ;
    dp[0][1] = mp(0,0) ;
    res[0][1] = mp(0,1) ;

    for(i=1 ; i<=n ; i++)
    {
        for(j=1 ; j<=m ; j++)
        {
            dp[i][j] = dp[i-1][j] ;
            if(dp[i][j].xx!=INF) res[i][j] = res[i-1][j] ;
        }
        for(j=1 ; j<=m ; j++)
        {
            if(dp[i-1][j].xx==INF) continue ;
          //  printf("crossed %lld %lld\n",i,j) ;
            i64 x = divisor[j] ;
            i64 part = gcd((k/x),a[i]) ;
            i64 z = part*x ;
            i64 l = M[z] ;
         //   printf("%lld %lld %lld %lld\n",x,part,z,l) ;
            if( (dp[i][l].xx > dp[i-1][j].xx + 1) || (dp[i][l].xx==(dp[i-1][j].xx+1) && (dp[i][l].yy > dp[i-1][j].yy + w[i]) ) ){
                dp[i][l].xx = dp[i-1][j].xx + 1 ;
                dp[i][l].yy = dp[i-1][j].yy + w[i] ;
                res[i][l] = mp(i,part) ;
            }
        }
 /*       printf("i----->%lld\n",i) ;
        for(j=1 ; j<=m ; j++)
        {
            if(dp[i][j].xx!=INF) printf("%lld->%lld %lld\n",divisor[j],dp[i][j].xx,dp[i][j].yy) ;
        }
*/
    }

    if(dp[n][ M[k] ].xx==INF) printf("-1\n") ;
    else{
     //   printf("%lld\n",dp[n][  M[k] ]) ;
        vector <i64> ans ;
        i = n ;
        while(i>0 && k!=1)
        {
            ans.pb( res[i][ M[k] ].first ) ;
            m = k ;
            k = k/res[i][ M[k] ].second ;
            i = res[i][ M[m] ].first - 1 ;
        }
        printf("%d\n",(int)ans.size()) ;
        for(i=0 ; i<ans.size() ; i++) printf("%lld ",ans[i]) ;
        printf("\n") ;
    }

    return 0 ;
}
