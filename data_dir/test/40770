#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef pair<int, int > pii;
typedef pair<ll, ll > pll;
typedef complex<double> point;

#define X real()
#define Y imag()
#define F first
#define S second
#define mk(x, y) make_pair((x), (y))
#define mt(x, y, z ,w) make_tuple((x), (y), (z),(w))
#define pb(x) push_back(x)
#define sz(x)((int)((x).size()))
#define all(x)	((x).begin()), ((x).end())
#define debug(x) dout << "[" #x "] = " << x << '\n'
#define IN "input.in"
#define OUT "output.out"

#define MAX 2000005
//#define MOD 1000000007
#define eps 1e-7

const ll OO = 0x0101010101010101;

class debug_t {
public:
    template<typename T>
    debug_t& operator << (const T& o) {
#ifdef Adel_SaadEddin_PC
        cout << o << flush;
        cerr << o << flush;
#endif
        return *this;
    }
    void end() {
        *this << "\nExecution Time = " << clock() * 1.0 / CLOCKS_PER_SEC << '\n';
        exit(0);
    }
} dout;

#define MOD 100000000

ll n1, n2, k1, k2;
ll dp[105][105][15][15][2];

ll solve(ll i, ll j, ll cnt1, ll cnt2, bool flag) {
    if(cnt1 > k1 || cnt2 > k2)
        return flag = false;
    if(i >= n1 && j >= n2) {
//        cout << s << " : " << flag << "\n";
        return flag;
    }

    ll &ret = dp[i][j][cnt1][cnt2][flag];
    if(ret + 1)
        return ret;
    ret = 0;

    ll solve1 = 0, solve2 = 0;
    if(i < n1)
        solve1 += solve(i + 1, j, cnt1 + 1, 0, flag);
    if(j < n2)
        solve2 += solve(i, j + 1, 0, cnt2 + 1, flag);

//    cout << solve1 << " " << solve2 << "\n";

    return ret = (solve1 + solve2) % MOD;
}

int dr[] = { 0,0,-1,1 };
int dc[] = { -1,1,0,0 };

int main() {
#ifdef Adel_SaadEddin_PC
    freopen(IN, "r", stdin);
//    freopen(OUT, "w", stdout);
#endif // Adel_SaadEddin_PC
ios_base::sync_with_stdio(false);

    memset(dp, -1, sizeof(dp));
    cin >> n1 >> n2 >> k1 >> k2;

    cout << solve(0, 0, 0, 0, true) << "\n";

    return 0;
}

