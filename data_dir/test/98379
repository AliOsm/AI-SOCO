//
// Created by Ильдар Ялалов on 14.01.2020.
//
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")



#ifdef zxc

#include <random>
#include <iostream>
#include <vector>
#include <string.h>
#include <set>
#include <array>
#include <math.h>
#include <algorithm>
#include <queue>
#include <map>
#include <sstream>

#else
#include <bits/stdc++.h>
#endif


using namespace std;
typedef long long ll;
typedef unsigned long long ull;
const int inf_int = 1e9 + 100;
const ll inf_ll = 1e18;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef double dbl;
#define pb push_back
#define eb emplace_back
const double pi = 3.1415926535898;
#define dout if(debug) cout
#define fi first
#define se second
#define sp setprecision
#define sz(a) (int(a.size()))
#define mp make_pair
#define all(a) a.begin(),a.end()

//region debug

template<class T1, class T2>
std::ostream &operator<<(std::ostream &out, const std::pair<T1, T2> &rhs) {
    out << "( " << rhs.first << " , " << rhs.second << " )";
    return out;
}

template<typename A, typename B>
string to_string(pair<A, B> p);

template<typename A, typename B, typename C>
string to_string(tuple<A, B, C> p);

template<typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p);

string to_string(const string &s) {
    return '"' + s + '"';
}

string to_string(const char *s) {
    return to_string((string) s);
}

string to_string(bool b) {
    return (b ? "true" : "false");
}

string to_string(vector<bool> v) {
    bool first = true;
    string res = "{";
    for (int i = 0; i < static_cast<int>(v.size()); i++) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(v[i]);
    }
    res += "}";
    return res;
}

template<size_t N>
string to_string(bitset<N> v) {
    string res = "";
    for (size_t i = 0; i < N; i++) {
        res += static_cast<char>('0' + v[i]);
    }
    return res;
}

template<typename A>
string to_string(A v) {
    bool first = true;
    string res = "{";
    for (const auto &x : v) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(x);
    }
    res += "}";
    return res;
}

template<typename A>
string to_string(vector<vector<A>> v) {
    bool first = true;
    string res = "\n{";
    for (const auto &x : v) {
        if (!first) {
            res += ",\n ";
        }
        first = false;
        res += to_string(x);
    }
    res += "}\n";
    return res;
}

template<typename A, typename B>
string to_string(pair<A, B> p) {
    return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template<typename A, typename B, typename C>
string to_string(tuple<A, B, C> p) {
    return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")";
}

template<typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) {
    return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ", " +
           to_string(get<3>(p)) + ")";
}

void debug_out() { cerr << endl; }

template<typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
    cerr << " " << to_string(H);
    debug_out(T...);
}


//endregion

#ifdef zxc1
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif


bool debug = 0;
const int MAXN = 2e6 + 100;
const int LOG = 20;
const int mod = 1e9 + 7;
const int MX = (1e7 + 100);
typedef long long li;

struct event {
    int x, y;
    int L;
};
vector<event> add[MAXN];
vector<event> rem[MAXN];

int a[300][300];
int n, m;

inline int get_id(int x, int y) {
    return x * m + y;
}


int parent[MAXN];

int get_parent(int v) {
    if (parent[v] == v)
        return v;
    return parent[v] = get_parent(parent[v]);
}

bool union_set(int a, int b) {
    a = get_parent(a);
    b = get_parent(b);
    if (a != b) {
        parent[a] = b;
        return true;
    }
    return false;
}

int dx[4] = {1, -1, 0, 0};
int dy[4] = {0, 0, 1, -1};

inline bool is_ok(int x, int y) {
    return x >= 0 && x < n && y >= 0 && y < m && a[x][y] != -1;
}

int dif[MAXN];

void process(vector<event> &L, int coef) {
    if (L.empty())
        return;
    for (int i = 0; i < n; ++i) {
        for (int e = 0; e < m; ++e) {
            a[i][e] = -1;
        }
    }

    for (int i = 0; i < n * m + 10; ++i) {
        parent[i] = i;
    }

    for (auto cur : L) {
        int x = cur.x, y = cur.y;
        int comp = 1;
        a[x][y] = 1;
        int v1 = get_id(x, y);
        for (int j = 0; j < 4; ++j) {
            int x1 = x + dx[j];
            int y1 = y + dy[j];
            int v2 = get_id(x1, y1);
            if (is_ok(x1, y1)) {
                if (union_set(v1, v2)) {
                    comp--;
                }
            }
        }
        dif[cur.L] += comp * coef;
    }
}

void solve() {
    cin >> n >> m;
    int q;
    cin >> q;
    int mx = 0;


    for (int i = 0; i < q; ++i) {
        int x, y, c;
        cin >> x >> y >> c;
        x--;
        y--;
        if (a[x][y] == c) {
            continue;
        }
        mx = max(mx, c);
        event temp = {x, y, i + 1};
        rem[a[x][y]].emplace_back(temp);
        a[x][y] = c;
        add[c].emplace_back(temp);
    }


    for(int i = 0;i<n;++i){
        for(int e = 0; e<m;++e){
            event temp = {i,e,q+1};
            rem[a[i][e]].emplace_back(temp);
        }
    }

    for (int i = 0; i <= mx; ++i) {
        process(add[i], +1);
    }

    for (int i = 0; i <= mx; ++i) {
        reverse(all(rem[i]));
        process(rem[i], -1);
    }

    int start = 1;
    for (int i = 1; i <= q; ++i) {
        start += dif[i];
        cout << start << "\n";
    }
}


signed main() {
#ifdef zxc
    freopen("../input.txt", "r", stdin);
    //  freopen("../output.txt", "w", stdout);
#else
#endif //zxc
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cout.setf(ios::fixed);
    cout.precision(15);

    int t = 1;
    while (t--)
        solve();


    debug(1.0 * clock() / CLOCKS_PER_SEC);
}


