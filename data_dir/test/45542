#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int) 1.01e9;
const ld EPS = 1e-9;

void precalc() {
}

int n;
const int maxn = 500 + 10;
int b[maxn * maxn];

bool read() {
  if (scanf("%d", &n) < 1) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < n; ++j) {
      scanf("%d", b + i * n + j);
    }
  }
  return 1;
}

int gcd(int a, int b) {
  for (; b; a %= b, swap(a, b)) ;
  return a;
}

void solve() {
  int m = n * n;
  sort(b, b + m);
  reverse(b, b + m);
  multiset<int> kill;
  vector<int> a;
  for (int i = 0; i < m; ++i) {
    int x = b[i];
    auto iter = kill.find(x);
    if (iter != kill.end()) {
      kill.erase(iter);
      continue;
    }
    a.pb(x);
    for (int i = 0; i < sz(a) - 1; ++i) {
      int val = gcd(a[i], x);
      kill.insert(val);
      kill.insert(val);
    }
  }
  assert(sz(a) == n);
  for (int i = 0; i < n; ++i) {
    printf("%d%c", a[i], " \n"[i == n - 1]);
  }
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("Time: %.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
