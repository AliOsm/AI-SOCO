#include <iostream>
#include <vector>
using namespace std;
int n, m, cnt;
vector<int> graph[105];
bool used[105];
int dfs(int v, int parent){
	used[v] = true;
	for (int i=0; i<graph[v].size(); i++){
		int cur = graph[v][i];
		if (used[cur] == true && cur != parent){
			cnt++;
		}
	}
	for (int i=0; i<graph[v].size(); i++){
		int cur = graph[v][i];
		if (used[cur] == false){
			dfs(cur, v);
		}
	}
}
int main(){
	cin>>n>>m;
	for (int i=1; i<=m; i++){
		int from, to;
		cin>>from>>to;
		graph[from].push_back(to);
		graph[to].push_back(from);
	}
	dfs(1, -1);
	for (int i=1; i<=n; i++){
		if (used[i] == false){
			cout<<"NO";
			return 0;
		}
	}
	if (cnt == 1){
		cout<<"FHTAGN!";
		return 0;
	}
	cout<<"NO";
}