#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> ii;
typedef tuple<int,int,int> i3;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;

int bucket = sqrt(2e5)+5;

struct query{
    int idx, esq, dir;
    query(){}
    query(int _idx, int _esq, int _dir){idx = _idx; esq = _esq; dir = _dir;}
    bool operator < (const query& other) const{
        if(esq/bucket == other.esq/bucket){
            if(dir == other.dir) return idx < other.idx;
            else return dir < other.dir;
        }
        else return esq/bucket < other.esq/bucket;
    }
};

struct Mo{
    vector<int> a;
    vector<query> vq;
    
    vector<int> freq;
    vector<ll> res;
    ll sum;
    
    Mo(){}
    Mo(vector<int> _a, vector<query> _vq){
        a = _a;
        vq = _vq;
        res.resize(vq.size());
        freq.assign(1e6, 0);
        sum = 0;
    }
    
    void add(int x){
        sum -= 1LL*x*freq[x]*freq[x];
        freq[x]++;
        sum += 1LL*x*freq[x]*freq[x];
    }
    
    void remove(int x){
        sum -= 1LL*x*freq[x]*freq[x];
        freq[x]--;
        sum += 1LL*x*freq[x]*freq[x];
    }
    
    void build(){
        sort(vq.begin(), vq.end());        
        int L = 0, R = -1;
        for(auto q : vq){
            int esq = q.esq, dir = q.dir, idx = q.idx;
            // cout << esq << " " << dir << " " << L << " " << R << endl;
            while(R < dir) ++R, add(a[R]);
            while(R > dir) remove(a[R]), R--;
            while(L < esq) remove(a[L]), L++;
            while(L > esq) L--, add(a[L]);
            res[idx] = sum;
            // cout << L << " " << R << endl;
        }
    }
};

int main(){

    int n, t; scanf("%d %d", &n, &t);
    vector<int> a(n);
    for(int i = 0; i < n; i++)
        scanf("%d", &a[i]);
    vector<query> vq;
    for(int i = 0; i < t; i++){
        int esq, dir; scanf("%d %d", &esq, &dir);
        vq.push_back(query(i, esq-1, dir-1));
    }

    Mo mozin(a, vq);
    mozin.build();

    for(int i = 0; i < t; i++)
        printf("%lld\n", mozin.res[i]);
	return 0;
}