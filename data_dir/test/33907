/*
    Take me to church
    I'll worship like a dog at the shrine of your lies
    I'll tell you my sins and you can sharpen your knife
    Offer me that deathless death
    Good God, let me give you my life
*/
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
bool OK1 = 0;
vector < int > A, B, V;
bool Solve(int n = 0, bool w1 = 0, bool w2 = 0)
{
    if (n == A.size())
        return 1;
    if (w1 && w2)
        return 1;
    if (w2)
    {
        for (int i = A[n] + 1; i <= 9; i ++)
            if (V[i])
                return 1;
        if (!V[A[n]])
            return 0;
        V[A[n]] --;
        bool rt = Solve(n + 1, 0, 1);
        V[A[n]] ++;
        return (rt);
    }
    if (w1)
    {
        for (int i = 0; i < B[n]; i ++)
            if (V[i])
                return 1;
        if (!V[B[n]])
            return 0;
        V[B[n]] --;
        bool rt = Solve(n + 1, 1, 0);
        V[B[n]] ++;
        return (rt);
    }
    for (int i = A[n] + 1; i < B[n]; i ++)
        if (V[i])
            return 1;
    bool rt;
    if (V[A[n]])
    {
        V[A[n]] --;
        rt = Solve(n + 1, 0, 1);
        V[A[n]] ++;
        if (rt) return 1;
    }
    if (V[B[n]])
    {
        V[B[n]] --;
        rt = Solve(n + 1, 1, 0);
        V[B[n]] ++;
        return (rt);
    }
    return 0;
}
int Generate(int n, int d)
{
    if (d == 10)
    {
        V[0] = n;
        if (OK1 && V[1] == 1 && V[0] == (int)A.size() - 1)
            return 1;
        return (Solve());
    }
    int SM = 0;
    for (int i = 0; i <= n; i ++)
        V[d] = i, SM += Generate(n - i, d + 1);
    return (SM);
}
int main()
{
    ll L, R;
    scanf("%lld%lld", &L, &R);
    if (L == R) return !printf("1");
    if (R == (ll)(1e18)) R --, OK1 = 1;
    for (int i = 0; i < 18; i ++)
        A.push_back(L % 10), L /= 10;
    for (int i = 0; i < 18; i ++)
        B.push_back(R % 10), R /= 10;
    while (A.size() && A.back() == B.back())
        A.pop_back(), B.pop_back();
    reverse(A.begin(), A.end());
    reverse(B.begin(), B.end());
    V = vector < int > (10, 0);
    return !printf("%d", Generate((int)A.size(), 1));
}