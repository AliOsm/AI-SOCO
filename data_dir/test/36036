#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define ll long long
#define sz(s) int(s.size())
#define ull unsigned long long
#define sc(s) scanf("%d",&s)
#define pr(s) printf("%d ",s)
#define all(s) s.begin(),s.end()
#define start ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;

const int MAXN = 1e5 + 256;
const char nxt = '\n';
inline void in (string Q) {Q += ".in";freopen (Q.c_str(), "r", stdin);}
inline void out (string Q) {Q += ".out";freopen (Q.c_str(), "w", stdout);}
inline void open_file (string Q) {in (Q);out (Q);}
inline bool Pal (const string& s) {
	return equal(s.begin(), s.end(), s.rbegin());
}
ull p = 991, pw[MAXN], h[MAXN];
struct query {
	string cur; int l, r;
	ull hsh[5555];
	query(){}
	query (string x, int y, int z) {
		cur = x; l = y; r = z;
	}
	inline void in () {
		string x; int L, R;
		cin >> x >> L >> R;
		cur = x, l = L, r = R;
		make_hash ();
		return;
	}
	inline void out () {
		cout << cur << ' '<< l << ' '<< r << nxt;
		return;
	}
	inline void make_hash () {
		hsh[0] = cur[0] - 'a' + 1;
		for (int i = 1; i < sz (cur); ++i) {
			hsh[i] = hsh[i - 1] * p + (cur[i] - 'a' + 1);
		}
		return;
	}
	inline ull get (int l, int r) {
		if (!l)
			return hsh[r];
		return hsh[r] - pw[r - l + 1] * hsh[l - 1];
	}
	inline int calc (ull H, int SZ) {
		int res = 0;
		for (int i = 0; i + SZ - 1 < sz (cur); ++i) {
			if (get (i, i + SZ - 1) == H)
				res++;
		}
		return res;
	}
} q[20];
string s;
int n;
ull geth (int l, int r) {
	if (!l)
		return h[r];
	return h[r] - pw[r - l + 1] * h[l - 1];
}
set < pair < ull, int > > S;
vector < pair < ull, int > > deleted;

int main () {
	start
	#ifdef accepted
		in ("");
	#endif
	if (0)
		open_file ("");

	cin >> s;
	pw[0] = 1; h[0] = s[0] - 'a' + 1;
	for (int i = 1; i <= 2000; ++i)
		pw[i] = pw[i - 1] * p;
	for (int i = 1; i < sz (s); ++i) {
		h[i] = h[i - 1] * p + (s[i] - 'a' + 1);
	}
	for (int i = 0; i < sz (s); ++i) {
		for (int j = i; j < sz (s); ++j) {
			S.insert (mp (geth (i, j), j - i + 1));
		}
	}
	cin >> n;

	for (int i = 1; i <= n; ++i) {
		q[i].in ();
	}
	for (int i = 1; i <= n; ++i) {
		for (auto &to : S) {
			int calced = q[i].calc (to.first, to.second);
			if (calced >= q[i].l && calced <= q[i].r)
				continue;
			deleted.pb (to);
		}
	}
	for (auto it : deleted) {
		if (S.count (it))
			S.erase (S.find (it));
	}
	cout << sz (S);

    return 0;
}