#include<bits/stdc++.h>
//#include<ext/pb_ds/assoc_container.hpp>
//#include<ext/pb_ds/tree_policy.hpp>
#define rep(i, a, b) for(int i=(a); i<(b); i++)
#define repi(i, a, b) for(int i=(a); i>(b); i--)
#define db(x) (cerr << #x << ": " << (x) << '\n')
#define sync ios_base::sync_with_stdio(false), cin.tie(NULL)
#define tests(t) int t; cin >> t; while(t--)
#define iceil(n, x) (((n) + (x) - 1) / (x))
#define ll long long
#define gcd __gcd
//#define mp make_pair
#define pb push_back
#define pf push_front
#define pob pop_back
#define pof pop_front
#define sz size()
#define all(v) (v).begin(), (v).end()
#define uni(v) sort(all(v)); (v).erase(unique(all(v)), (v).end());
#define pii pair<int, int>
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vi>
#define fi first
#define se second
#define umap unordered_map
#define uset unordered_set
#define pqueue priority_queue
#define si(a) scanf("%d", &a)
#define sll(a) scanf("%lld", &a)
#define bitcount(x) __builtin_popcount(x)
#define cps CLOCKS_PER_SEC
#define PI acos(-1.0)
#define EPS 1e-9
#define mod 1000000007
#define MOD 1000000007
#define N 30
using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

template<typename T>
using minpq = priority_queue<T, vector<T>, greater<T>>;

template<typename T>
using maxpq = priority_queue<T>;

//All indexing is 0-based
//using namespace __gnu_pbds;
//typedef tree<int, null_type, less<int>, rb_tree_tag,
 //            tree_order_statistics_node_update> ordered_set;
//methods: find_by_order(k); & order_of_key(k);
//To make it an ordered_multiset, use pair of (value, time_of_insertion)
//to distinguish values which are similar

//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c;}
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c;}
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p;}

//Returns no. of values x for which ceil(n / x) == y (y must be > 1).
inline ll CC(ll n, ll y) { return iceil(n, y-1) - iceil(n, y); }

//Returns no. of values x for which floor(n / x) == y
inline ll FF(ll n, ll y) { return n / y - n / (y+1); }

int n, k;
vi s, a, b, v;
int mp[N]; //mp[i]: character to which the ith character has been mpped to
bool used[N]; //used[i]: to indicate whether the ith character has been mpped to from some other char
int temp[N];

void strtoarr(string& s, vi& v) {
    v.clear();
    for(char c : s) {
        v.pb(c - 'a');
    }
}

void print(const vi& v) {
    for(int i : v) cerr << i << ' ';
    cerr << '\n';
}

bool canExtend() {
    int last = k - 1;
    memcpy(temp, mp, sizeof temp);
    v.clear();

    for(int i = 0; i < n; i++) {
        if(temp[s[i]] >= 0) {
            v.pb(temp[s[i]]);
            continue;
        }
        while(used[last]) last--;
        temp[s[i]] = last--;
        v.pb(temp[s[i]]);
    }
    //print(v);
    return v >= a;
}

int32_t main()
{   
    #ifndef ONLINE_JUDGE
        freopen("/home/tarun/Desktop/input.txt", "r", stdin);
//      freopen("/home/tarun/Desktop/output.txt", "w", stdout);
    #endif
    sync;
    clock_t clk = clock();
    cerr << "I will return...\n";
    
    tests(t) {
        string ss;
        cin >> k; 
        cin >> ss; strtoarr(ss, s); n = ss.sz;
        cin >> ss; strtoarr(ss, a);
        cin >> ss; strtoarr(ss, b);
        //print(s); print(a); print(b);

        memset(mp, -1, sizeof mp);
        memset(used, 0, sizeof used);

        if(!canExtend()) {
            cout << "NO\n";
            continue;
        }

        for(int i = 0; i < n; i++) {
            if(mp[s[i]] >= 0) {
                continue;
            }
            for(int j = 0; j < k; j++) {
                if(used[j]) continue;
                mp[s[i]] = j;
                used[j] = 1;
                if(!canExtend()) {
                    mp[s[i]] = -1;
                    used[j] = 0;
                }
                else {
                    break;
                }
            }
        }
        for(int i = 0; i < k; i++) {
            if(mp[i] == -1) {
                for(int j = 0; j < k; j++) {
                    if(!used[j]) {
                        mp[i] = j;
                        used[j] = 1;
                        break;
                    }
                }
            }
        }
        for(int i = 0; i < n; i++) s[i] = mp[s[i]];
        if(s > b) {
            cout << "NO\n"; continue;
        }
        cout << "YES\n";
        for(int i = 0; i < k; i++) cout << (char)(mp[i] + 'a');
        cout << "\n";
    }
    
    cerr << "...don't you ever hang your head.\n";
    cerr << "Time (in ms): " << double(clock() - clk) * 1000.0 / cps << '\n';
}







