#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define F first
#define S second
#define int long long
#define ull  unsigned long long
#define pb push_back
#define double long double

using namespace std;
using namespace __gnu_pbds;
typedef  tree< int , null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int N = 51;
vector < pair < int, int > > g[N];
int b[N], res[N][N][N][N], a[N];
bool used[N][N][N][N];
void dfs(int v, int p = 0){
    for (auto u: g[v]){
        if (u.F == p) continue;
        dfs(u.F, v);
        b[v] += b[u.F];
    }
    b[v] += a[v];
}
int solve(int f, int t, int l, int r, int w){
    if (l + r == 0) return 0;
    if (used[f][t][l][r]){
        return res[f][t][l][r];
    }
    used[f][t][l][r] = 1;
    if (g[t].size() == 1){
        if (r != 0)
        return res[f][t][l][r] = solve(t, f, r, 0, w) + w; else return 0;
    }
    int k = 1;
    vector < vector < int > > a(g[t].size());
    for (auto u: g[t]){
        if (u.F == f) continue;
        if (g[t].size() > 2){
                a[k].pb(1e9);
            for (int i = 1; i <= l; i++){
                a[k].pb(solve(t, u.F, i, r + l - i, u.S) + u.S);
            }
        }else{
            for (int i = 0; i < l; i++) a[k].pb(1e15);
            a[k].pb(solve(t, u.F, l, r, u.S) + u.S);
        }
        k++;
    }
    vector < vector < int > > dp(g[t].size());
    for (int i = 0; i < k; i++)
        for (int j = 0; j <= l; j++) dp[i].pb(0);
    for (int i = 0; i < k; i++) dp[i][0] = 1e15;
    for (int i = 1; i < k; i++){
        for (int j = 1; j <= l; j++){
            for (int p = 0; p <= j; p++){
                a[i][0] = 1e15;
                dp[i][j] = max(dp[i][j], min(dp[i - 1][j - p], a[i][p]));
            }
        }
    }
    return res[f][t][l][r] = dp[k - 1][l];
}
main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //freopen("input.txt",  "r", stdin);
    //freopen("output.txt", "w", stdout);
    int n;
    cin >> n;
    for (int i = 1; i < n; i++){
        int u, v, w;
        cin >> u >> v >> w;
        g[u].pb({v, w});
        g[v].pb({u, w});
    }
    int s;
    cin >> s;
    int m;
    cin >> m;
    for (int i = 1; i <= m; i++){
        int x;
        cin >> x;
        a[x]++;
    }
    dfs(s);
    int ans = 1e15;
    for (auto v: g[s]){
        if (b[v.F] == 0) continue;
        ans = min(solve(s, v.F, b[v.F], m - b[v.F], v.S) + v.S, ans);
    }
    cout << ans;
}
