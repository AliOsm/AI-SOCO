///*** One Last Try ***///
#include<bits/stdc++.h>
using namespace std;
#pragma comment(linker, "/stack:200000000")
#define ll long long int
#define inf ( int )( 1e9 + 1e9 )
#define mxs (int)( 1e6 + 10 )
#define md  int mid = ( l + r )>>1;
#define mod (ll)(1e9)+7
//int dx[]={+1,0,+0,-1};///Four Directions
//int dy[]={+0,-1,+1,+0};///Four directions
//int dx [] = {+1,-1,+0,+0,-1,-1,+1,+1};///Eight Directions
//int dy [] = {+0,+0,+1,-1,+1,-1,-1,+1};///Eight Directions
ll t, n, m, j, ans, k,a, b, c, d, e,f ,sum , i,sz,row,col;
string s, s2, s3, s4;
vector < ll > v ;
map < ll , vector < ll > > graph;
ll ar [ mxs ] , ar2 [ mxs ] ;
map < ll , ll > visited;
void brainfuck();
int main()
{
    ios_base::sync_with_stdio(NULL);
    cin.tie(NULL);
    cout.tie(NULL);
    brainfuck();
    return 0;
}
void brainfuck()
{
   cin>>n;
   for ( i = 1 ; i <= n; i++ )cin>>ar [ i ];
   for ( i = 1 ; i <= n; i++ )
   {
       for ( j = 1 ; j <= n; j++ )
       {
           if ( ar [ i ] % 3 == 0 && ar  [ i ] / 3 == ar [ j ] )graph [ ar [ i ] ].push_back( ar [ j ] );
           if ( ar [ i ] + ar [ i ] == ar [ j ] )graph [ ar [ i ] ].push_back( ar [ j ] );
       }
   }
   for ( i = 1 ; i <= n; i++ )
   {
       v.clear();
       visited.clear();
       queue < ll > qu;
       qu.push( ar [ i ] );
       visited [ ar [ i ] ] = 1;
       v.push_back( ar [ i ] );
       while( !qu.empty() )
       {
           a = qu.front();
           qu.pop();
           sz = graph [ a ].size();
           for ( j = 0; j < sz; j++ )
           {
               b = graph [ a ] [ j ];
               if( visited.find( b ) == visited.end() )
               {
                   qu.push( b );
                   visited [ b ] = 1;
                   v.push_back( b );
               }
           }
       }
       if ( v.size() == n )
       {
           for ( i = 0 ; i < n; i++ )cout<<v [ i ]<<" ";
           return;
       }
   }
}
