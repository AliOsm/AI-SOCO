#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#define rank wewere
using namespace std;

struct dsu
{
    int kol;
    int zero;
    int parent[200500];
    int rank[200500];

    void make_set (int v)
    {
        parent[v] = v;
        rank[v] = 0;
    }

    int find_set (int v)
    {
        if (v == parent[v])
            return v;
        return parent[v] = find_set (parent[v]);
    }

    void union_sets (int a, int b)
    {
        a = find_set (a);
        b = find_set (b);
        if (a != b)
        {
            --kol;
            if (rank[a] < rank[b])
                swap (a, b);
            parent[b] = a;
            if (rank[a] == rank[b])
                ++rank[a];
        }
    }

    dsu(int n)
    {
        for (int i=0;i<n;i++)
            make_set(i);
        kol=n;
        zero=0;
    }
};


vector<int> r[200500];
vector<int> c[200500];

int main()
{
    int n,m;
    scanf("%d",&n);
    scanf("%d",&m);
    dsu rdsu(n),cdsu(m);
    int q;
    scanf("%d",&q);
    for (int i=0; i<q; i++)
    {
        int a,b;
        scanf("%d",&a);
        scanf("%d",&b);
        --a;--b;
        r[a].push_back(b);
        c[b].push_back(a);
    }
    for (int i=0;i<n;i++)
    {
        if (r[i].empty())
        {
            ++rdsu.zero;
        }
        for (auto j:r[i])
        {
            cdsu.union_sets(r[i][0],j);
        }
    }
    for (int i=0;i<m;i++)
    {
        if (c[i].empty())
        {
            ++cdsu.zero;
        }
        for (auto j:c[i])
        {
            rdsu.union_sets(c[i][0],j);
        }
    }
    int a1=rdsu.kol-rdsu.zero;
    int a2=rdsu.zero;
    int b1=cdsu.kol-cdsu.zero;
    int b2=cdsu.zero;
    if (a1!=b1)
    {
        return -1;
    }
    int res=a1-1+a2+b2;
    cout << res;
    return 0;
}
