#pragma GCC target("avx2")
#pragma GCC optimize("O3")
 
#include <x86intrin.h>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <string>
#include <bitset> 
#include <vector>
#include <cmath>
#include <deque>
#include <queue>
#include <stack>
#include <map>
#include <set>
//#include <ordered_set>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
 
//using namespace __gnu_pbds;
using namespace std;
 
//template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
     
#define F first
#define S second           
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair                                     
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = 998244353;
const int N = (int)2e5 + 1;
const ll inf = (ll)1e18 + 1;
 
const double pi = acos (-1.0);
const double eps = 1e-7;                  
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};
 
int n, k, fact[N], inv[N], ans;
 
inline int add (int a, int b) {
	a += b;
	if (a >= mod) a -= mod;
	if (a < 0) a += mod;
	return a;
}

inline int mult (int a, int b) {
	return 1ll * a * b % mod;
}

inline int binpow (int a, int b) {
	int res = 1;
	while (b) {
		if (b & 1) res = mult (res, a);
		a = mult (a, a);
		b >>= 1;
	}
	return res;
}             

inline int C (int n, int k) {
	return mult (fact[n], mult (inv[n - k], inv[k]));
}

inline void boost () {
   ios_base :: sync_with_stdio (0);
   cin.tie (0), cout.tie (0);
}
 
inline void Solve () {
	cin >> n >> k;
	if (k > n) cout << 0, exit (0);
	int t = n - k;
	inv[0] = fact[0] = 1;
	for (int i = 1; i <= n; i ++) fact[i] = mult (fact[i - 1], i), inv[i] = binpow (fact[i], mod - 2);
	for (int i = 0; i <= t; i ++) {
		int val = mult (C (t, i), binpow (t - i, n));
		if (i & 1) ans = add (ans, -val);
		else ans = add (ans, val);
	}                              
	ans = mult (ans, C (n, t));
	if (t != n) ans = add (ans, ans);
	cout << ans;

}
 
signed main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
   //cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}