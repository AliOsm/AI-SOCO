#include<bits/stdc++.h>
#define fr first
#define sc second
#define pb push_back
#define maxheap priority_queue<int>
#define minheap priority_queue<int,vector<int>,greater<int> >
#define mp make_pair
 
const int INF = 1e9+7;
const int MAXN = 3e5 + 20;
const double eps = 1e-9;
const long long inf = 1e18;
const long double pi = acos(-1.0);
using namespace std;
 
int d[MAXN] , a[MAXN] , b[MAXN] , maxb[MAXN];
int n,m;
void qsort(int first, int last){
	int l,r,c,x;
	if (first < last) {
		x = a[ (first + last) / 2];
		l = first;
		r = last;
		while (l <= r){
			while (a[l] > x) l++;
			while (a[r] < x) r--;
			if (l <=r ){
				c = a[l];
				a[l] = a[r];
				a[r] = c;
				
				c = b[l];
				b[l] = b[r];
				b[r] = c;
				
				
				l++;
				r--;
			}
 		}
 		qsort(first , r);
 		qsort(l , last);
	}
}

void solve(){

	cin>>n;
	for (int i=1; i<=n; i++) cin>>d[i];
	cin>>m;
	for (int i=1; i<=m; i++) 
		cin>>a[i]>>b[i];
		qsort(1,m);
	
	for (int i=1; i<=m; i++){
		maxb[i] = maxb[i-1];
		if (b[i] > maxb[i]) maxb[i] = b[i];
	}
	int maxd = 0;
	for (int i=1; i<=n; i++) maxd = max(maxd , d[i]);
	
	if (maxd > a[1]) {
		cout<<-1<<endl;
		return;
	} 
	int p = 1;
	int ans = 1;
	maxd = d[1];
	bool bol = false;
	for (int i=2; i<=n; i++){
		int l = 0;
		int r = m + 1;
		maxd = max(maxd , d[i]);
		
		while (r - l > 1){
			int mm = (r + l) / 2;
			if (a[mm] >= maxd) l = mm;
			else
			r = mm;
		}
		
		int mxb = maxb[l];
		//cout<<l<<" L "<<endl;
		if (mxb > p){
			p++;
		
			continue;
		}
		else{
		     bol = true;
			ans++;
			p = 1;
			maxd = d[i];
		}
	}
	cout<<ans<<endl;
}
 
 
int main() {
ios::sync_with_stdio(NULL), cin.tie(0), cout.tie(0);
cout.setf(ios::fixed), cout.precision(20);
 //freopen("perm.in", "r", stdin);
 //freopen("perm.out", "w", stdout);
 
int t;
cin>>t;
 
	while (t > 0){
		t--;
		solve();
	}
 
return 0;
}
