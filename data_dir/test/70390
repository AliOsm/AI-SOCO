#include <algorithm>
#include <bitset>
#include <cassert>
#include <chrono>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <map>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
using namespace std;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

int N;
map<vector<int>, int> cache;
bool used[605];
vector<int> adj[605];
vector<int> P[2];
vector<int> path;

void print(char c, vector<int>& v)
{
    cout << c << " " << v.size() << "\n";
    for (auto x : v)
        cout << x << " ";
    cout << "\n";
    fflush(stdout);
}

int ask(vector<int> query)
{
    if (query.size() <= 1)
        return 0;
    sort(query.begin(), query.end());
    query.resize(unique(query.begin(), query.end()) - query.begin());
    if (cache.count(query))
        return cache[query];

    print('?', query);
    int ret;
    cin >> ret;
    return cache[query] = ret;
}

bool has_edge(vector<int>& A, vector<int>& B)
{
    vector<int> AB(A.begin(), A.end());
    AB.insert(AB.end(), B.begin(), B.end());
    return ask(AB) - ask(A) - ask(B) > 0;
}

void bsearch(vector<int>& v, vector<int>& w)
{
    for (int i = 0; i < 2; i++)
    {
        while (v.size() > 1)
        {
            vector<int> tmp(v.begin(), v.begin() + v.size()/2);
            if (has_edge(w, tmp))
                v = tmp;
            else
                v = vector<int>(v.begin() + v.size()/2, v.end());
        }
        swap(v, w);
    }
}

void dfs(int cur, int prv, int t)
{
    P[t].push_back(cur);
    for (auto nxt : adj[cur])
        if (nxt != prv)
            dfs(nxt, cur, t^1);
}

bool find_path(int cur, int prv, int dest)
{
    path.push_back(cur);
    if (cur == dest)
        return true;
    for (auto nxt : adj[cur])
        if (nxt != prv && find_path(nxt, cur, dest))
            return true;
    path.pop_back();
    return false;
}

void get_cycle(vector<int>& cur)
{
    vector<int> left(cur.begin(), cur.begin() + cur.size()/2);
    vector<int> right(cur.begin() + cur.size()/2, cur.end());
    if (ask(left) > 0)
    {
        get_cycle(left);
        return;
    }
    if (ask(right) > 0)
    {
        get_cycle(right);
        return;
    }
    bsearch(left, right);
    find_path(left[0], 0, right[0]);
    print('N', path);
}

int main()
{
    ios::sync_with_stdio(0);

    cin >> N;
    used[1] = true;

    for (int e = 0; e < N - 1; e++)
    {
        vector<int> in_tree, not_tree;
        for (int i = 1; i <= N; i++)
        {
            if (used[i])
                in_tree.push_back(i);
            else
                not_tree.push_back(i);
        }
        bsearch(in_tree, not_tree);
        adj[in_tree[0]].push_back(not_tree[0]);
        adj[not_tree[0]].push_back(in_tree[0]);
        used[not_tree[0]] = true;
    }

    dfs(1, 0, 0);
    if (ask(P[0]) != 0)
        get_cycle(P[0]); 
    else if (ask(P[1]) != 0)
        get_cycle(P[1]);
    else
        print('Y', P[0]);

    return 0;
}
