#pragma comment (linker, "/STACK:64000000")

#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <memory.h>
#include <sstream>
#include <cassert>
#include <ctime>
#include <complex>



#define pb push_back
#define int64 long long
#define pll pair<ll, ll>
#define pii pair<int, int>
//#define mp make_pair
#define sq(x) ((x)*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
//#define _MOD 1000000007LL
//#define MOD(x) (((x) + 2LL * (_MOD)) % (_MOD))
#define INF ((int)(1e9))
#define LINF ((long long)(1e16))
#define EPS (1e-8)
#define PI (3.1415926535897932384626433832795)
#define y1 asdf_1
#define y0 asdf_2
#define j0 jj0
#define LMOD 1000000007
//#define HMOD 536870911
#define HMOD ((long long)(1e18) + 3LL)
#ifdef _MY_DEBUG
#define HMOD 1000000007
#endif
#define MAX 2000000000
#define HBASE1 1009
#define HBASE2 3001
#define MAXN 1000000
typedef unsigned long long ull;
typedef long double ldd;

using namespace std;

int a[1000500];
int n;

inline void solve()
{
	scanf ("%d", &n);
	for (int j = 1; j <= n; j++)
	{
		scanf ("%d", &a[j]);
		while (!(a[j] % 2))
		{
			a[j] /= 2;
		}
		while (!(a[j] % 3))
		{
			a[j] /= 3;
		}
	}
	sort (a + 1, a + n + 1);
	if (a[1] == a[n])
	{
		printf ("Yes\n");
	}
	else
	{
		printf ("No\n");
	}
}

int main()
{
	//FILE *f = fopen("input.txt", "wt"); fprintf(f, "123"); fclose(f);
	//	freopen("input.txt", "w", stdout); testgen(100000); return 0;
	//freopen("output.txt", "w", stdout);   precalc(); /*for (int i = 20; i < 21; i++)*/ stresstest(5, 25, 120000, 1291);   return 0;

	ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
	freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#endif

	solve();

	return 0;
}