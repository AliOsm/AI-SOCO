#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <cstdlib>
#include <cassert>
#include <cmath>
#include <string>
#include <queue>
#include <stack>
#include <iomanip>
#include <set>
#include <deque>
#include <fstream>

using namespace std;

#define forn(i,n) for (int i = int(0); i < int(n); i++)
#define forb(i,n) for (int i = int(n-1); i >= int(0); i--)
#define for1(i,n) for (int i = int(1); i <= int(n); i++)
#define fore(i,a,n) for (int i = int(a); i < int(n); i++)

#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define sz size()
#define sqr(x) ((x)*(x))
#define cube(x) ((x)*(x)*(x))
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define min3(a, b, c) min(a, min(b, c))
#define max3(a, b, c) max(a, max(b, c))
#define dist(x1, y1, x2, y2) sqrt(ld (sqr(x1 - x2) + sqr(y1 - y2)))
  
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
 
const int maxn = 100005;
const int MAXN = 1000000;
const int logn = 12;
const int inf = 2e9;
const int alpha = 26;
const int my_hash = 31;
const long long base = 1000000000;
const long long my_mod = 2674894331;
const long long l_inf = 4e18;
const long long mod = 1000000007;
const double pi = acos(-1.0);
const double eps = 1e-10;

bool check_1(ll k, ll a, ll b, ll c) {
	ll d = min3(a, b, c);
	a -= d;
	b -= d;
	c -= d;
	return (a + b + c <= k) && (k - (a + b + c)) % 3 == 0;
}

bool check_2(ll n, ll a, ll b, ll c) {
	ll d = min3(a, b, c);
	a -= d;
	b -= d;
	c -= d;
	return n >= max3(a, b, c) * 3 - (a + b + c) && 
		(n - (max3(a, b, c) * 3 - (a + b + c))) % 3 == 0;
}

int main() {
	int t;
	scanf("%d ", &t);
	for (int i = 0; i < t; i++) {
		ll n, k, d1, d2;
		scanf("%I64d %I64d %I64d %I64d ", &n, &k, &d1, &d2);
		if (check_1(k, d2, d1 + d2, d1) && check_2(n - k, d2, d1 + d2, d1))
			printf("yes\n");
		else if (check_1(k, d1 + d2, d2, 0) && check_2(n - k, d1 + d2, d2, 0))
			printf("yes\n");
		else if (check_1(k, 0, d1, d1 + d2) && check_2(n - k, 0, d1, d1 + d2))
			printf("yes\n");
		else if (check_1(k, d1, 0, d2) && check_2(n - k, d1, 0, d2))
			printf("yes\n");
		else
			printf("no\n");
	}
}