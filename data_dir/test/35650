#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<ll> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef vector<pii> vii;
typedef vector<bool> vb;
typedef vector<string> vs;
const int di[] = { 0, 1 };
const int dj[] = { 1, 0 };
const ll MOD = 1e9 + 7;
const ll INF = 1e9;
const long double EPS = 1e-10;
#define all(n) n.begin(),n.end()

int n, k;
vs g;
vvi cnt;

inline bool valid(int i, int j) {
	return i >= 0 && i < n && j >= 0 && j < n;
}

inline void fillCell(int x, int y) {
	for (int d = 0; d < 2; d++) {
		bool w = false;
		for (int i = 0; i < k; i++) {
			if (!valid(x + i * di[d], y + i * dj[d]) || g[x + i * di[d]][y + i * dj[d]] == '#') {
				w = true; break;
			}
		}

		if (!w) {
			for (int i = 0; i < k; i++) {
				cnt[x + i * di[d]][y + i * dj[d]]++;
			}
		}
	}
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n >> k;
	g.resize(n);
	cnt.assign(n, vi(n));
	for (int i = 0; i < n; i++) {
		cin >> g[i];
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			fillCell(i, j);
		}
	}

	int mxi = 0, mxj = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (cnt[i][j] > cnt[mxi][mxj])
				mxi = i, mxj = j;
		}
	}
	cout << mxi + 1 << " " << mxj + 1 << endl;
	cin.ignore(), cin.get();
}
