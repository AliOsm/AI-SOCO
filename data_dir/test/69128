#include<bits/stdc++.h>
#define MP make_pair
#define PB push_back
#define PP pop_back()
#define ALL(x) x.begin(),x.end()
#define st first
#define nd second
#define sz(x) (int) x.size()
#define pii pair<int,int>
#define ii int,int
#define ll long long
#define lf double
#define llu long long unsigned
#define INPUT freopen("inp.in","r",stdin);
#define OUTPUT freopen("oup.out","w",stdout);
#define sag(x) 2*x+1
#define sol(x) 2*x
#define orta ((bas+son)/2)
#define set(x,y) memset(x,y,sizeof(x))
#define MIN3(x,y,z) min(min(x,y),z)
#define MAX3(x,y,z) max(max(x,y),z)
#define FOR(i,j,k) for(int i=j;i<=k;i++)
#define ROF(i,j,k) for(int i=j;i>=k;i--)
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define MOD 1000000007
#define inf 1000000000000000000
#define N 200005
using namespace std;
ll a[N],lazy[(N<<2)];
ll z;
int x,y,n,q;
pair< ll,pii > ST[(N<<2)];
void build(int node,int bas,int son) {
    if(bas==son) {
        ST[node]=MP(a[bas],MP(bas,son));
        return ;
    }
    build(sol(node),bas,orta);
    build(sag(node),orta+1,son);
    ST[node]=MP(min(ST[sol(node)].st,ST[sag(node)].st),MP(bas,son));
}
void update(int node,int bas,int son,int val) {
    if(bas>y || son<x) return ;
    if(bas>=x && son<=y) {
        lazy[node]+=val;
        return ;
    }
    update(sol(node),bas,orta,val);
    update(sag(node),orta+1,son,val);
    ST[node].st=min(ST[sol(node)].st+lazy[sol(node)],ST[sag(node)].st+lazy[sag(node)]);
}
ll get(int node,int bas,int son) {
    if(bas>y || son<x) return inf;
    if(bas>=x && son<=y) return ST[node].st+lazy[node];
    return min(get(sol(node),bas,orta),get(sag(node),orta+1,son))+lazy[node];
}
int main() {
    scanf("%d",&n);
    FOR(i,0,n-1) scanf("%lld",a+i);
    build(1,0,n-1);
    scanf("%d",&q);
    while(q--) {
        char c;
        scanf("%d %d%c",&x,&y,&c);
        if(c!='\n') {
            scanf("%lld",&z);
            if(x>y) {
                int xx=x,yy=y;
                x=0;
                update(1,0,n-1,z);
                x=xx,y=n-1;
                update(1,0,n-1,z);
            }
            else {
                update(1,0,n-1,z);
            }
        }
        else {
            if(x>y) {
                int xx=x,yy=y;
                x=0;
                ll cev1=get(1,0,n-1);
                x=xx,y=n-1;
                ll cev2=get(1,0,n-1);
                printf("%lld\n",min(cev1,cev2));
            }
            else {
                printf("%lld\n",get(1,0,n-1));
            }
        }
    }
}
