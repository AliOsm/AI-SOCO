#include "bits/stdc++.h"
using namespace std;
#define pb push_back
// #define int long long
typedef long long ll;
#define fi first
#define se second
#define pii pair<int,int>
#define endl '\n'
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define sz(s) (int)s.size()
#define y1 fdfbvfds
typedef long double f80;
#define all(x) x.begin(), x.end()

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
ll rand(ll l,ll r){
	uniform_int_distribution<ll> uid(l, r);
	return uid(rng);
}

int cnt[20][20];
int cost[20][1 << 20];
int lg2[(1 << 20)];
ll dp[(1 << 20)];

signed main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int n, m;
    cin >> n >> m;
    string s;
    cin >> s;
    fr(i, 0, n - 2) {
    	cnt[s[i] - 'a'][s[i + 1] - 'a']++;
    	cnt[s[i + 1] - 'a'][s[i] - 'a']++;
    }
    lg2[1] = 0;
    fr(i, 2, (1 << m) - 1) {
    	lg2[i] = (lg2[i >> 1] + 1);
    }
    for(int j = 0; j < m; j++) {
    	cost[j][0] = 0;
    	for(int mask = 1; mask < (1 << m); mask++) {
    		cost[j][mask] = (cost[j][(mask ^ (1 << lg2[mask]))] + cnt[j][lg2[mask]]);
    	}
    }
    int tot = (1 << m) - 1;
    fr(i, 1, tot) {
    	dp[i] = 1e15;
    }
    fr(i, 0, tot) {
    	int pos =__builtin_popcount(i);
    	for(int j = 0; j < m; j++) {
    		if(!((i >> j) & 1)) {
    			int c1 = cost[j][i];
    			int c2 = cost[j][(tot ^ i ^ (1 << j))];
    			ll val = (c1 - c2) * 1LL * pos;
    			int mmask = i ^ (1 << j);
    			dp[mmask] = min(dp[mmask], dp[i] + val);
    		}
    	}
    }
    cout << dp[tot];
    return 0;
}