#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds ;
#define ll long long
#define ld float
#define rep(i,a,b) for(ll i=a;i<b;i+=1)
#define all(c) (c).begin(),(c).end()
#define pb push_back
#define sz(a) int((a).size())
#define hell (ll)1000000007
#define f first
#define s second
#define sll(x) scanf("%lld",&x)
#define si(x) scanf("%d",&x)
typedef tree< ll , null_type , less<ll> , rb_tree_tag , tree_order_statistics_node_update > ordered_set ;
ll t = 1 ;
const ll N = 1e5 + 5 ; 
ll a[31][N] , segtree[4*N] ;
vector<ll> ans(N+1);
void build( ll node , ll l , ll r )
{
    if( l == r ){
        segtree[node] = ans[l] ;
        return;
    }
    ll mid = ( l + r ) >> 1 ;
    build( node*2 , l , mid ) ;
    build( node*2 + 1 , mid + 1 , r ) ;
    segtree[node] = segtree[node*2] & segtree[node*2+1] ;
}
ll query( ll node , ll l , ll r , ll aa , ll bb ){
    if( l > r || aa > r || bb < l )
        return (1LL<<31)-1 ;
    if( aa <= l and r <= bb ){
        return segtree[node] ;
    }
    ll mid = ( l + r ) >> 1 ;
    return query(node*2,l,mid,aa,bb) & query(node*2+1,mid+1,r,aa,bb) ;
}
void solve()
{
    memset(a,0,sizeof(a));
    ll n , m , l , r , q ;
    cin >> n >> m ;
    vector<vector<ll> > v ;
    rep( i , 0 , m ){
        cin >> l >> r >> q ;
        v.pb({l,r,q});
        rep( j , 0 , 31 ){
            if( (q>>j) & 1 ){
                a[j][l]++;
                a[j][r+1]--;
            }
        }
    }
    rep( i , 0 , 31 ){
        rep( j , 1 , n + 1){
            a[i][j] += a[i][j-1] ;
        }
    }
    rep( i , 1 , n + 1 ){
        ans[i] = 0 ;
        rep( j , 0 , 31 ){
            if( a[j][i] > 0 )
                ans[i] |= (1LL<<j);
        }
    }
    build( 1 , 1 , n ) ;
    rep( i , 0 , m ){
        if( query( 1 , 1 , n , v[i][0] , v[i][1] ) != v[i][2] ){
			puts("NO");
			return;
		}
    }
    cout << "YES\n" ;
    rep( i , 1 , n + 1 )
		cout << ans[i] << " " ;
}
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    //cin>>t;
    while(t--)
        solve() ;
    return 0 ;
}
