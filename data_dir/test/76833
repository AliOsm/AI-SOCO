#include <bits/stdc++.h>
#define ll long long
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
using namespace std;
const int N = 1e5 + 50;
int n, m, len, a[N], dp[N], ans1[N], ans2[N];

void solve()
{
    // gets the Longest Non Decreasing subsequence ending at point i in ans1
    // and the LNIS starting from point i in ans2
    for(int i = 1; i <= m; i++)
    {
        auto it = upper_bound(dp + 1, dp + len + 1, a[i]) - dp;
        ans1[i] = it;
        dp[it] = a[i];
        if(it > len)
            len = it;
    }
    len = 0;
    for(int i = m; i > 0; i--)
    {
        auto it = upper_bound(dp + 1, dp + len + 1, a[i]) - dp;
        ans2[i] = it;
        dp[it] = a[i];
        if(it > len)
            len = it;
    }
}

int main()
{
    IO;
    cin >> n >> m;
    for(int i = 0; i < n; i++)
    {
        int l, r;
        cin >> l >> r;
        a[l]++;
        a[r + 1]--;
    }
    for(int i = 1; i <= m; i++)
        a[i] += a[i - 1];
    solve();
    int ans = -1;
    for(int i = 1; i <= m; i++)
        ans = max(ans, ans1[i] + ans2[i] - 1);
    cout << ans;
}