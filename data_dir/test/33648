#include <iostream>
#include <vector>
using namespace std;

const int MX = 1000005;

vector<long long> primes;
bool check[MX];

void gen_primes() {
  primes.emplace_back(2);
  for ( int i = 3; i < MX; i += 2 ) {
    if ( check[i] ) continue;
    primes.emplace_back(i);
    for ( int j = i + i; j < MX; j += i) check[j] = true;
  } 
}

vector<pair<long long, int>> factor(long long x) {
  int times;
  vector<pair<long long, int>> ret;
  for ( int i = 0; i < primes.size() && primes[i] * primes[i] <= x; ++i ) {
    times = 0;
    while ( x % primes[i] == 0 ) {
      x /= primes[i];
      times++;
    }
    if ( times ) ret.push_back({primes[i], times});
  }
  if ( x > 1 ) ret.push_back({x, 1});
  return ret;
}

int main() {
  gen_primes();
  long long n, b;
  while ( cin >> n >> b ) {
    vector<pair<long long, int>> mx = factor(b);
    long long answer = 1e18;
    for ( int i = 0; i < mx.size(); ++i ) {
      pair<long long, int> init = mx[i];
      mx[i].first = 1;
      long long anst = 0;
      while ( mx[i].first <= n / init.first ) {
        mx[i].first *= init.first;
        anst += n / mx[i].first;
      }
      answer = min(answer, anst / mx[i].second);
    }
    cout << answer << endl;
  }
  return 0;
}