#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <utility>
#include <algorithm>
#include <memory.h>
#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <complex>

using namespace std;

#define pb push_back
#define pii pair<int, int>
#define pdi pair<double, int>
#define pdii pair<pdi, int>
#define pll pair<ll, ll>
#define pli pair<ll, int>
#define vi vector<int>
#define inf 2000000000
#define mod 1000000007
#define y1 uhgeg
#define lim 31700
#define eps 1e-9
#define prime 3001

typedef long long ll;
typedef unsigned long long ull;
typedef complex<double> comp;

struct query
{
	int x1, y1, x2, y2, num;
	query (int x1, int y1, int x2, int y2, int num) : x1(x1), y1(y1), x2(x2), y2(y2), num(num)
	{
	}
};

struct ferry
{
	int x, y;
	ferry (int x, int y) : x(x), y(y)
	{
	}
};

int n, m, j, i, h, l, k, q1, q2, q3, q4, a[100500], ans, ptr, w;
vector <query> qu;
vector<ferry> f;
int tree[400500];
bool b[200500];

void build(int i, int p1, int p2)
{
	memset(tree, 0, sizeof(tree));
}

void update(int i, int p1, int p2, int q, int val)
{
	if (p1 == p2)
	{
		tree[i] = val;
		return;
	}
	int p = (p1 + p2) >> 1;
	if (q <= p)
	{
		update(i << 1, p1, p, q, val);
	}
	else
	{
		update((i << 1) + 1, p + 1, p2, q, val);
	}
	tree[i] = min(tree[i << 1], tree[(i << 1) + 1]);
}

int get_min(int i, int p1, int p2, int q1, int q2)
{
	if (q1 <= p1 && p2 <= q2)
	{
		return tree[i];
	}
	int p = (p1 + p2) >> 1;
	int res = inf;
	if (q1 <= p)
	{
		res = min(res, get_min(i << 1, p1, p, q1, q2));
	}
	if (q2 > p)
	{
		res = min(res, get_min((i << 1) + 1, p + 1, p2, q1, q2));
	}
	return res;
}

bool cmp_query_x(query q1, query q2)
{
	return q1.x2 < q2.x2;
}

bool cmp_query_y(query q1, query q2)
{
	return q1.y2 < q2.y2;
}

bool cmp_ferry_x(ferry q1, ferry q2)
{
	return q1.x < q2.x;
}

bool cmp_ferry_y(ferry q1, ferry q2)
{
	return q1.y < q2.y;
}

void solve()
{
	scanf ("%d%d%d%d", &w, &h, &n, &m);
	for (j = 1; j <= n; j++)
	{
		scanf ("%d%d", &q1, &q2);
		f.pb(ferry(q1, q2));
	}
	for (j = 1; j <= m; j++)
	{
		scanf ("%d%d%d%d", &q1, &q2, &q3, &q4);
		qu.pb(query(q1, q2, q3, q4, j));
	}
	sort (qu.begin(), qu.end(), cmp_query_x);
	sort (f.begin(), f.end(), cmp_ferry_x);
	for (j = 0; j < qu.size(); j++)
	{
		while (ptr < f.size() && f[ptr].x <= qu[j].x2)
		{
			update(1, 1, h, f[ptr].y, f[ptr].x);
			ptr++;
		}
		if (get_min(1, 1, h, qu[j].y1, qu[j].y2) >= qu[j].x1)
		{
			b[qu[j].num] = 1;
		}
	}
	build(1, 1, w);
	ptr = 0;
	sort (qu.begin(), qu.end(), cmp_query_y);
	sort (f.begin(), f.end(), cmp_ferry_y);
	for (j = 0; j < qu.size(); j++)
	{
		while (ptr < f.size() && f[ptr].y <= qu[j].y2)
		{
			update(1, 1, w, f[ptr].x, f[ptr].y);
			ptr++;
		}
		if (get_min(1, 1, w, qu[j].x1, qu[j].x2) >= qu[j].y1)
		{
			b[qu[j].num] = 1;
		}
	}
	for (j = 1; j <= m; j++)
	{
		if (b[j])
		{
			printf ("YES\n");
		}
		else
		{
			printf ("NO\n");
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);cin.tie(0);
	//freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
	srand(333);
	solve();
	return 0;
}