#include <bits/stdc++.h>
using namespace std;

int n, m;
vector<string> g;
vector<string> g2;
char s[1000005];
int dr[] = { 0, -1, -1, -1, 0, 1, 1, 1 };
int dc[] = { 1, 1, 0, -1, -1, -1, 0, 1 };
vector<vector<int> > dis;
vector<vector<int> > dis2;
bool within(int i, int j) {
	if (i < 0 || j < 0)
		return false;
	if (i >= n || j >= m)
		return false;
	return true;
}
bool dam(int i, int j) {
	return within(i, j) && g[i][j] == 'X';
}
int main() {
	scanf("%d %d", &n, &m);
	g = vector<string>(n);
	dis = vector<vector<int> >(n, vector<int>(m, -1));
	for (int i = 0; i < n; i++) {
		scanf("%s", s);
		g[i] = string(s);
	}
	g2 = g;
	queue<pair<int, int> > q;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (!dam(i, j))
				continue;
			bool ok = true;
			for (int k = 0; k < 8; k++) {
				if (!dam(i + dr[k], j + dc[k])) {
					ok = false;
					break;
				}
			}
			if (!ok) {
				q.push( { i, j });
				dis[i][j] = 0;
			}
		}
	}
	while (!q.empty()) {
		pair<int, int> cur = q.front();
		q.pop();
		for (int k = 0; k < 8; k++) {
			int x = cur.first + dr[k];
			int y = cur.second + dc[k];
			if (dam(x, y) && dis[x][y] == -1) {
				q.push( { x, y });
				dis[x][y] = dis[cur.first][cur.second] + 1;
			}
		}
	}
	int lo = 0;
	int hi = min(n, m);
	int ans;
	while (lo <= hi) {
		dis2 = vector<vector<int> >(n, vector<int>(m, -1));
		queue<pair<int, int> > qu;
		int mid = (lo + hi) / 2;
		for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) {
			if (dis[i][j] >= mid) g2[i][j] = 'X';
			else g2[i][j] = '.';
			if (g2[i][j] == 'X') {
				qu.push({i, j});
				dis2[i][j] = 0;
			}
		}

		while (!qu.empty()) {
			pair<int, int> cur = qu.front();
			qu.pop();
			if (dis2[cur.first][cur.second] == mid) break;
			for (int k = 0; k < 8; k++) {
				int x = cur.first + dr[k];
				int y = cur.second + dc[k];
				if (!within(x, y)) {
					break;
				}
				if (g2[x][y] == '.') {
					g2[x][y] = 'X';
					qu.push( { x, y });
					dis2[x][y] = dis2[cur.first][cur.second] + 1;
				}
			}
		}
		bool less = false;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (dam(i, j) && g2[i][j] == '.') {
					less = true;
				}
			}
		}
		if (less) hi = mid - 1;
		else lo= mid + 1;
	}
	printf("%d\n", hi);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (dis[i][j] >= hi)
				g2[i][j] = 'X';
			else
				g2[i][j] = '.';
		}
		printf("%s\n", g2[i].c_str());
	}

}
