/*input
10
+ 8
+ 9
+ 11
+ 6
+ 1
? 3
- 8
? 3
? 8
? 11
*/
#include <iostream>
#include <cstdio>
#include <vector>
#include <functional>
#include <math.h>
#include <string.h>
#include <utility>
#include <algorithm>
#include <iomanip>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <stdlib.h>
#include <list>
#include <assert.h>
#include <time.h>
#include <fstream>
#include <sstream>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define ll long long
#define N 100005
#define bit(x,y) ((x>>y)&1)
int sumXor[1000005];

struct Node {
	int child[2]; int cnt[2];
	Node() {
		memset(child, -1, sizeof(child));
		memset(cnt, 0, sizeof(cnt));
	}
};

Node node[6500000];
int numNode = 0; ll ans = 0;
void add(int x) {
	int cur = 0;
	for (int i = 31; i >= 0; i--) {
		if (bit(x, i)) {
			if (node[cur].child[1] == -1)
				node[cur].child[1] = ++numNode;
			node[cur].cnt[1]++;
			cur = node[cur].child[1];
		}
		else {
			if (node[cur].child[0] == -1)
				node[cur].child[0] = ++numNode;
			node[cur].cnt[0]++;
			cur = node[cur].child[0];
		}
	}
}
void del(int x) {
	int cur = 0;
	for (int i = 31; i >= 0; i--) {
		if (bit(x, i)) {
			node[cur].cnt[1]--;
			cur = node[cur].child[1];
		}
		else {
			node[cur].cnt[0]--;
			cur = node[cur].child[0];
		}
	}
}

void dfs(int cur, ll val, ll pos) {
	if (pos == -1) {
		ans = max(ans, val);
		return;
	}
	int t = bit(val, pos);
	if (t == 0) {
		if (node[cur].child[1] != -1 && node[cur].cnt[1] != 0) {
			val ^= (1LL << pos);
			cur = node[cur].child[1];
		}
		else {
			cur = node[cur].child[0];
		}
		dfs(cur, val, pos - 1);
	}
	else {
		if (node[cur].child[0] != -1 && node[cur].cnt[0] != 0) {
			cur = node[cur].child[0];
		}
		else {
			val ^= (1LL << pos);
			cur = node[cur].child[1];
		}
		dfs(cur, val, pos - 1);
	}
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	int q; cin >> q;
	add(0);
	while (q--) {
		char c; cin >> c;
		if (c == '+') {
			int t; cin >> t;
			add(t);
		}
		else if (c == '-') {
			int t; cin >> t;
			del(t);
		}
		else {
			int t; cin >> t;
			ans = 0;
			dfs(0, t, 31);
			cout << ans << endl;
		}
	}
}
