// In the name of God
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iomanip>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <assert.h>
#include <bitset>
#define sqr(a) ((a)*1LL*(a))
#define all(a) (a).begin(), (a).end()
using namespace std;
 
template <typename T>
T next_int() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if(ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return p * x;
}
 
string next_token() {
    char ch;
    string ans = "";
    do { ch = getchar(); } while(ch <= ' ');
    while(ch > ' ') {
        ans += ch;
        ch = getchar();
    }
    return ans;
}
    
const long long INF = (long long)1e18;
const int INFINT = (int)1e9 + 227 + 1;
const int MAXN = (int)301; 
const int MOD = (int)1e9 + 7;
const long double EPS = 1e-9;
 
long long bin_pow(long long a, long long b) {
    if(!b) return 1;
    long long ans = bin_pow(a, b / 2);
    ans = ans * ans % MOD;
    if(b % 2) ans = ans * a % MOD;
    return ans;
}

set<int> mx;
set<pair<int, int> > heh;
int a[MAXN][MAXN];
int dp[MAXN][MAXN];

int pr[MAXN][MAXN];

int f(int a, int b) {
    if(a == b) return 0;
    if(a < b) return 1;
    return 2;
}

int k[2][MAXN];

int main() {
    // freopen(".in", "r", stdin);

    int n, m, t; cin >> n >> m >> t;
    int e[3] = {0, 0, 0}; 
    cin >> e[0] >> e[1] >> e[2];

    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            a[i][j] = next_int<int>();
        }
    }

    int ansi = INFINT;
    pair<pair<int, int>, pair<int, int> > pe;
    for(int l = 0; l < m; l++) {
        for(int i = 0; i < n; i++)
            k[0][i] = k[1][i] = 0;

        for(int r = l + 1; r < m; r++) {
            for(int i = 0; i < n; i++) {
                k[0][i] += e[f(a[i][r - 1], a[i][r])];
                k[1][i] += e[f(a[i][r], a[i][r - 1])];
            }

            mx.clear();
            heh.clear();

            for(int i = 0; i < n; i++) {

                if(i) {
                    dp[l][r] += e[f(a[i][l], a[i - 1][l])];
                    dp[l][r] += e[f(a[i - 1][r], a[i][r])];
                }

                // if(i == 1 && l == 0 && r == 5) {
                //     cout << k[0] << "\n";
                // }
                // if(i == 2 && l == 0 && r == 5) {
                //     cout << k[1] << "\n";
                // }

                if(r - l >= 2) {
                    int ans = INFINT;
                    int p = -1;
                    set<int> :: iterator j = mx.lower_bound((dp[l][r] + k[1][i]) - t);
                    set<int> :: iterator temp = j; 

                    if(j != mx.begin()) j--;
                    for(int it = 1; it && j != mx.end(); it--, j--) {
                        if(ans > abs(t - (dp[l][r] + k[1][i] - *j))) {
                            ans = abs(t - (dp[l][r] + k[1][i] - *j));
                            p = *j;
                        }

                        if(j == mx.begin()) break;
                    }
                    j = temp;
                    for(int it = 2; it && j != mx.end(); it--, j++) {
                        if(ans > abs(t - (dp[l][r] + k[1][i] - *j))) {
                            ans = abs(t - (dp[l][r] + k[1][i] - *j));
                            p = *j;
                        }
                    }

                    if(ansi > ans) {
                        ansi = ans;

                        pe.first.first = (*heh.lower_bound(make_pair(p, -1))).second + 1;
                        pe.second.first = i + 1;
                        pe.first.second = l + 1;
                        pe.second.second = r + 1;
                    }
                }

                if(i - 1 >= 0) {
                    mx.insert(pr[l][r]);
                    heh.insert(make_pair(pr[l][r], i - 1));
                }

                pr[l][r] = dp[l][r] - k[0][i];
            }
        }
    } 

    // cout << ansi << "\n";

    cout << pe.first.first << " " << pe.first.second << " " << pe.second.first << " " << pe.second.second << "\n";
}