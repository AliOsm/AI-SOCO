/**************************************************************
    Problem: ????
    User: little_Bear_c
    Language: GNU_C++11
    Result: Accepted
    Time:0 ms
    Memory:0 kb
    length:0 kb
    score: inf
****************************************************************/
//CLOCKS_PER_SEC
using namespace std;
#include<bitset>
#include<deque>
#include<stdint.h>
#include<set>
#include<stack>
#include <iostream>
#include <algorithm>
#include<cmath>
#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<iomanip>
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<queue>
#include<cstring>
#include<ctime>
#include<map>
#define sqr(x) (x)*(x)
#define sort stable_sort
#define ll long long
#define mk make_pair
#define pb push_back
#define in insert
#define mtr(x,y,z) mk(mk(x,y),z)
#define fi first
#define se second
#define lch(x) ((x)<<1)
#define rch(x) (((x)<<1)|1)
#define all(x) (x).begin(),(x).end()
#define titose CLOCKS_PER_SEC
#define fpi(x) freopen(x,"r",stdin);
#define fpo(x) freopen(x,"w",stdout);
#define fprio fpi("in.txt");fpo("out.txt");
#define fast ios_base::sync_with_stdio(false);
void read(int &x){int v=0,f=1;char c=getchar();while (!isdigit(c)&&c!='-') c=getchar();if (c=='-') f=-1; else v=v*10+c-'0';while (isdigit(c=getchar())) v=v*10+c-'0';x=v*f;}
void read(ll &x){ll v=0ll,f=1ll;char c=getchar();while (!isdigit(c)&&c!='-') c=getchar();if (c=='-') f=-1; else v=v*10+c-'0';while (isdigit(c=getchar())) v=v*10+c-'0';x=v*f;}
void readc(char &x){char c;while ((c=getchar())==' ');x=c;}
void writes(string s){puts(s.c_str());}
void writeln(){writes("");}
void writei(int x){if (x<0){putchar('-');x=abs(x);}if (!x) putchar('0');char a[25];int top=0;while (x){a[++top]=(x%10)+'0';x/=10;}while (top){putchar(a[top]);top--;}}
void writell(ll x){if (x<0){putchar('-');x=abs(x);}if (!x) putchar('0');char a[25];int top=0;while (x){a[++top]=(x%10)+'0';x/=10;}while (top){putchar(a[top]);top--;}}
/*
#pragma GCC optimize("-funsafe-loop-optimizations")
#pragma GCC optimize("-funroll-loops")
#pragma GCC optimize("-fwhole-program")
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("-fthread-jumps")
#pragma GCC optimize("-falign-functions")
#pragma GCC optimize("-falign-jumps")
#pragma GCC optimize("-falign-loops")
#pragma GCC optimize("-falign-labels")
#pragma GCC optimize("-fcaller-saves")
#pragma GCC optimize("-fcrossjumping")
#pragma GCC optimize("-fcse-follow-jumps")
#pragma GCC optimize("-fcse-skip-blocks")
#pragma GCC optimize("-fdelete-null-pointer-checks")
#pragma GCC optimize("-fdevirtualize")
#pragma GCC optimize("-fexpensive-optimizations")
#pragma GCC optimize("-fgcse")
#pragma GCC optimize("-fgcse-lm")
#pragma GCC optimize("-fhoist-adjacent-loads")
#pragma GCC optimize("-finline-small-functions")
#pragma GCC optimize("-findirect-inlining")
#pragma GCC optimize("-fipa-sra")
#pragma GCC optimize("-foptimize-sibling-calls")
#pragma GCC optimize("-fpartial-inlining")
#pragma GCC optimize("-fpeephole2")
#pragma GCC optimize("-freorder-blocks")
#pragma GCC optimize("-freorder-functions")
#pragma GCC optimize("-frerun-cse-after-loop")
#pragma GCC optimize("-fsched-interblock")
#pragma GCC optimize("-fsched-spec")
#pragma GCC optimize("-fschedule-insns")
#pragma GCC optimize("-fschedule-insns2")
#pragma GCC optimize("-fstrict-aliasing")
#pragma GCC optimize("-fstrict-overflow")
#pragma GCC optimize("-ftree-switch-conversion")
#pragma GCC optimize("-ftree-tail-merge")
#pragma GCC optimize("-ftree-pre")
#pragma GCC optimize("-ftree-vrp")
#pragma GCC optimize(2)
#pragma GCC optimize(3)
#pragma GCC optimize(4)
#pragma GCC optimize(5)
#pragma GCC optimize(6)
#pragma GCC optimize(7)
#pragma GCC optimize(8)
#pragma GCC optimize(9)
*/
inline long long inc(int &x){return ++x;}
inline long long inc(long long &x){return ++x;}
inline long long inc(int &x,long long y){return x+=y;}
inline long long inc(long long &x,long long y){return x+=y;}
inline double inc(double &x,double y){return x+=y;}
inline long long dec(int &x){return --x;}
inline long long dec(long long &x){return --x;}
inline long long dec(int &x,long long y){return x-=y;}
inline long long dec(long long &x,long long y){return x-=y;}
inline double dec(double &x,double y){return x-=y;}
inline long long mul(int &x){return x=((long long)x)*x;}
inline long long mul(long long &x){return x=x*x;}
inline long long mul(int &x,long long y){return x*=y;}
inline long long mul(long long &x,long long y){return x*=y;}
inline double mul(double &x,double y){return x*=y;}
inline long long divi(const int &x)
{
	long long ans,l,r,mid;
	ans=0;l=0;r=0x3fffffff;
	while (l<r)
	{
		mid=(l+r)/2;
		if (mid*mid<=x)
		{
			ans=mid;
			l=mid+1;
		}
		else r=mid;
	}
	return ans;
}
inline long long divi(const long long &x)
{
	long long ans,l,r,mid;
	ans=0;l=0;r=0x3fffffff;
	while (l<r)
	{
		mid=(l+r)/2;
		if (mid*mid<=x)
		{
			ans=mid;
			l=mid+1;
		}
		else r=mid;
	}
	return ans;
}
inline long long divi(int &x,long long y){return x/=y;}
inline long long divi(long long &x,long long y){return x/=y;}
inline double divi(double &x,double y){return x/=y;}
inline long long mod(int &x,long long y){return x%=y;}
inline long long mod(long long &x,long long y){return x%=y;}
#define pii pair<int,int>
#define pll pair<ll,ll>
#define vi vector<int>
#define vl vector<ll>
#define si set<int>
#define sl set<ll>
#define mii map<int,int>
#define mll map<ll,ll>
#define msi map<string,int>
#define msl map<string,ll>
#define piii pair<int,pii >
#define piipi pair<pii,int>
#define plll pair<ll,pll >
#define pllpl pair<pll,ll>
#define pqi priority_queue<int>
#define pql priority_queue<ll>
#define npqi priority_queue<int,vector<int>,greater<int> >
#define npql priority_queue<ll,vector<ll>,greater<ll> >
#define forup(i,x,y) if ((x)<=(y)) for ((i)=(x);(i)<=(y);(i)++)
#define fordo(i,x,y) if ((x)>=(y)) for ((i)=(x);(i)>=(y);(i)--)
#define rep(i,x) forup ((i),1,(x))
#define repd(i,x) fordo ((i),(x),1)
#define itr iterator
#define forwyx(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define NO {cout<<"NO";return 0;}
#define YES {cout<<"YES";return 0;}
#define y0 y000000000000000000000000000
#define y1 y111111111111111111111111111
#define j0 j000000000000000000000000000
#define j1 j111111111111111111111111111
#define cl0(a) memset((a),(0),(sizeof((a))))
#define clz(a) memset((a),(0x16),(sizeof((a))))
#define clf(a) memset((a),(-(0x16)),(sizeof((a))))
#define inf 0x3bbbbbbb
#define lnf 0x1bbbbbbbbbbbbbbbll
#define sqrt divi
#define p2(i) (1ll<<(i))
#define readi read
#define readll read
/*************************************************/
int n,m,i,j,a[1000005],ans,f[1000005],wyx=1e9+7,l,r=1e9,cnt,ti,vis[1000005];
string op[1000005];
char ss[10];
vector<int> all;
set<int> s;
struct seg
{
	int l,r,s,a1,a2,f1,f2;
	int upd1()
	{
		if (l==r)
		{
			if (s) f1=1;
		}
		a1=1;
	}
	int upd2()
	{
		if (l==r)
		{
			if (s) f2=1;
		}
		a2=1;
	}
}tr[4564561];
void build(int x,int l,int r)
{
	tr[x].l=l;
	tr[x].r=r;
	if (l!=r)
	{
		build(x*2,l,(l+r)/2);
		build(x*2+1,(l+r)/2+1,r);
	}
}
void pushdo(int x)
{
	if (tr[x].a1)
	{
		tr[x*2].upd1();
		tr[x*2+1].upd1();
		tr[x].a1=0;
	}
	if (tr[x].a2)
	{
		tr[x*2].upd2();
		tr[x*2+1].upd2();
		tr[x].a2=0;
	}
}
void update(int x,int y,int c)
{
	if (tr[x].l>y||tr[x].r<y) return;
	if (tr[x].l==tr[x].r)
	{
		tr[x].s=c;
		return;
	}
	pushdo(x);
	update(x*2,y,c);
	update(x*2+1,y,c);
}
void update2(int x,int l,int r,int c)
{
	if (tr[x].l>r||tr[x].r<l) return;
	if (tr[x].l>=l&&tr[x].r<=r)
	{
		if (c==1) tr[x].upd1(); else tr[x].upd2();
		return;
	}
	pushdo(x);
	update2(x*2,l,r,c);
	update2(x*2+1,l,r,c);
}
int main()
{
	s.insert(0);s.insert(1e9);
	scanf("%d",&n); 
	rep(i,n)
	{
		scanf(" %s",ss);
		op[i]=ss;
		read(a[i]);
		all.pb(a[i]);
	}
	sort(all(all));
	all.resize(unique(all(all))-all.begin());
/*	if (all.size()==n)
	{
		cout<<n+1;
		return 0;
	}*/
	rep(i,n)
	{
		a[i]=upper_bound(all(all),a[i])-all.begin();
	}
	build(1,1,all.size());
	ti=1;
	rep(i,n)
	{
//		cerr<<op[i]<<endl;
		if (op[i]=="ADD")
		{
			update(1,a[i],1);
			if (a[i]<l) update2(1,a[i],a[i],1);
			if (a[i]>r) update2(1,a[i],a[i],2);
			if (l<a[i]&&a[i]<r)
			{
				vis[a[i]]=ti;
				cnt++;
			}
			f[a[i]]++;
			s.insert(a[i]);
		}
		else
		{
			ti++;cnt=0;
			f[a[i]]--;
			update2(1,1,a[i]-1,1);
			update2(1,a[i]+1,all.size(),2);
			update(1,a[i],0);
			s.erase(a[i]);
			set<int>::itr it=s.upper_bound(a[i]);
			r=*it;
			l=*(--it);
		}
	}
/*	repd(i,n)
	{
		if (op[i]=="ADD")
		{
			while (f[a[i]]>0)
			{
				f[a[i]]--;
				update2(1,1,a[i]-1,1);
				update2(1,a[i]+1,all.size(),2);
				update(1,a[i],0);
			}
		}
	}*/
	ans=cnt+1;
	rep(i,1564500)
	{
		if (tr[i].l)
		{
			pushdo(i);
			if (tr[i].l==tr[i].r&&vis[tr[i].l]!=ti)
			{
				(ans*=(2-tr[i].f1-tr[i].f2))%=wyx;
			}
		}
	}
	cout<<ans;
	return 0;
}