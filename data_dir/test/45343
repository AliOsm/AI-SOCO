#include<bits/stdc++.h>
#define int long long int
#define ld long double
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define rev(i,n,init) for(int i=n;i>=init;i--)
#define MAXN 200005
#define MOD2 998244353
#define MOD1 1e9+7
#define f first
#define s second
#define ylol1 y1
#define endl '\n'
#define pii pair<int,int>
#define piii pair<pii,int>
#define precise(i) cout<<fixed<<setprecision(i)
#define codejam cout<<"Case #"<<ii+1<<": ";
#define impossible cout<<"IMPOSSIBLE"<<endl;
#define error(s) throw runtime_error(s)
using namespace std;
const long double PI = atan(1.0)*4;
const int64_t INF=1e14;
const int32_t LOG=21;
const int MOD=MOD1;

int power(int x,int y)
{
	 if(y==0)return 1;
	 int temp=power(x,y/2);
	 temp=(temp*temp)%MOD;
	 if(y&1)temp=(temp*x)%MOD;
	 return temp;
}

int dp[100005];
int cnt[100005];
int a[100005];

int32_t main()
{ 
      getFaster;
      int tests=1;
      //cin>>tests;
      rep(ii,0,tests)
      {
           int n;
           cin>>n;
           rep(i,0,n)cin>>a[i];

           rep(i,0,n)
           {
               for(int j=1;j*j<=a[i];j++)
               {
               	  if(a[i]%j==0)
               	  {
               	  	   cnt[j]++;
                       if(j!=a[i]/j)cnt[a[i]/j]++;
               	  }
               }
           }

           rev(i,100001,1)
           {
                int tot=(power(2,cnt[i])-1+MOD)%MOD;
                dp[i]=tot;
                for(int j=2*i;j<=100000;j+=i)
                {
                    dp[i]=dp[i]-dp[j]+MOD;
                    while(dp[i]>=MOD)dp[i]-=MOD;
                } 
           }

           cout<<dp[1]<<endl;   
      }
      return 0;                         
}

/*
 TIPS:
 1.) Check for corner cases (like 0 is exception case)
 2.) Check for global memory sizes,memory refreshments and its complexity 
 3.) Check for sorting criteria (if used 1-based indexing)
 4.) Check for numbers overflow (while multiplying and doing MOD)
 5.) Check for typecasting issues like int to float( while dividing numbers)
*/