#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
#define lowbit(x) (x & (-x))
using namespace std;
int last[605];
int pre[200005];
int e[200005];
int f[200005];
int w[200005];
int d[605];
int r[605];
int a[605];
int v[605];
int p[605];
int c, k, m, src, dest, ans;
int cost(int x) {
  int src = 0;
  while (x) {
    ++src;
    x -= lowbit(x);
  }
  return src;
}
void add(int x, int y, int z, int d) {
  e[++m] = y, f[m] = z, w[m] = d, pre[m] = last[x], last[x] = m;
  e[++m] = x, f[m] = 0, w[m] = -d, pre[m] = last[y], last[y] = m;
}
bool spfa() {
  int i, x, y;
  memset(d, 0x3f, sizeof(d));
  queue<int> q;
  q.push(src);
  d[src] = 0;
  v[src] = 1;
  while (q.size()) {
    x = q.front();
    q.pop();
    v[x] = 0;
    for (i = last[x]; i; i = pre[i])
      if (f[i] && d[y = e[i]] > d[x] + w[i]) {
        d[y] = d[x] + w[i];
        if (!v[y]) q.push(y), v[y] = 1;
        r[y] = i;
      }
  }
  if (d[dest] == 0x3f3f3f3f) return 0;
  return 1;
}

void update() {
  int x;
  for (x = dest; x != src; x = e[r[x] ^ 1]) {
    f[r[x]]--;
    f[r[x] ^ 1]++;
  }
  ans += d[dest];
}
int main() {
  int i, j, cnt = 0;
  scanf("%d%d", &c, &k);
  for (i = 1; i <= c; ++i) scanf("%d", &a[i]);
  src = c * 2 + 1, dest = src + 1, m = 1;
  add(src, 0, k, 0);
  for (i = 1; i <= c; ++i)
    add(0, c + i, 1, cost(a[i])), add(src, i, 1, 0), add(c + i, dest, 1, 0);
  for (i = 1; i < c; ++i)
    for (j = i + 1; j <= c; ++j)
      if (a[i] == a[j])
        add(i, c + j, 1, 0);
      else
        add(i, c + j, 1, cost(a[j]));
  while (spfa()) update();
  memset(v, 0, sizeof(v));
  for (i = last[0]; i != 0; i = pre[i])
    if (!(i & 1) && !f[i]) v[e[i] - c] = ++cnt;
  for (i = 1; i <= c; ++i)
    for (j = last[i]; j != 0; j = pre[j])
      if (!(j & 1) && !f[j]) p[e[j] - c] = i;
  for (i = 1; i <= c; ++i)
    if (p[i] && a[i] != a[p[i]])
      cnt += 2;
    else
      ++cnt;
  printf("%d %d\n", cnt, ans);
  for (i = 1; i <= c; ++i) {
    if (p[i]) v[i] = v[p[i]];
    if (a[i] != a[p[i]]) printf("%c=%d\n", 'a' + v[i] - 1, a[i]);
    printf("print(%c)\n", 'a' + v[i] - 1);
  }
  return 0;
}
