#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <cmath>
#include <ctime>
#include <map>
#include <iomanip>
#include <set>
#include <queue>
#include <iostream>
#include <algorithm>

#define For(i,a,b) for(int (i)=(a);i<=(b);(i)++)
#define Rep(i,a,b) for(int (i)=(a);i<(b);(i)++)
#define fi first
#define se second
#define dbg(x) cerr<<#x<<":"<<x<<endl
#define fill(x,y) memset(x,y,sizeof(x))

#define NEW (trie *)calloc(1,sizeof(trie))

using namespace std;

typedef long long Lint;
typedef pair<int,int> ii;
typedef pair<Lint,ii> iii;

const int MAXN = 1e5+5;
const int inf = 1e9+5;

struct trie{
	trie *next[2];
}*root;

int N;
int bit[50];
Lint ar[MAXN];
Lint UP[MAXN];

inline Lint make(Lint x){

	For(i,0,40)
		bit[40-i] = (x>>i)&1;
	
}

void insert(trie *node = root ,int k=0){
	
	if(k>40) return;
	
	if(node->next[bit[k]]==NULL) 
		node->next[bit[k]] = NEW;
	
	insert(node->next[bit[k]],k+1);
	
}

Lint f(trie *node=root,int k=0){
	
	if(k>40) return 0LL;
	
	if(node->next[bit[k]^1]!=NULL)
		return f(node->next[bit[k]^1],k+1)+(1LL<<(40-k));
	
	else if(node->next[bit[k]]!=NULL)
		return f(node->next[bit[k]],k+1);
	
	return 0LL;
		
}

int main(){
	
	root = NEW; 
	
	cin >> N ; 
	
	For(i,1,N) cin >> ar[i];
	
	for(int i=N;i>0;i--) UP[i] = ar[i]^UP[i+1];
	
	Lint ans = 0 ;
	
	make(0);insert();
	
	Lint x = 0 ;
	
	For(i,1,N){
	
		make(UP[i]);ans = max(ans,f());
		
		x^=ar[i];
		make(x);insert();
		
	}
	
	make(0);ans=max(ans,f());

	cout << ans << endl;
	
	return 0;
}
