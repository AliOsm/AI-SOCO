#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> pii;
#define pb push_back 
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz(v) (int((v).size()))
const ll INF = 1e18;
const int MOD = 1e9+7;
const int N = 5e5+5;
int gcd_(int a, int b){
	int moves = 0;
	while(b != 0){
		++moves;
		if(moves > 90)
			return -1;
		if(a < b){
			swap(a,b);
			continue;
		}
		a -= b;
	}
	return moves;
}
ll ipow(ll x, ll p){
	if(p == 0)
		return 1;
	if(p == 1)
		return x;
	return (ll)ipow((ll)x*x%p,p/2)*ipow(x,p%2)%p;
}
ll ext_euclid(ll a, ll b, ll c, ll d){
	if(c == 0)
		return b;
	return ext_euclid(c,d,a%c,b-a/c*d);
}
ll inverse(int x, int p){
	//return ipow(x,p-2);
	return (ext_euclid(p,0,x,1)%p+p)%p;
}
vi path(ll u, ll p){
	if(u == 0)
		return {1};
	ll a = u, b = 1;
	while(gcd_(a,b) == -1){
		ll r = (rand()<<16+rand())%(p-1)+1;
		if(a*r%p != 0 && b*r%p != 0 && __gcd(u*r%p,1*r%p) == 1){
			a = (u*r)%p;
			b = (1*r)%p;
		}
		if(a*inverse(a,p)%p != 1){
			//cout << a << ' ' << inverse(a,p) << ' ' << a*inverse(a,p)%p<< '\n';
			assert(false);
		}
		//if(a != 0){
			//assert(a*inverse(a,p)%p == 1);
		//}
		//cout << a*inverse(a)%p << '\n';
		//cout << b*inverse(b)%p << '\n';
		//cout << a << ' ' << b << ' ' << __gcd(a,b) << ' ' << a*inverse(b,p)%p << '\n';
	}
	//cout << __gcd(a,b) << '\n';
	//cout << "\tmaking\n";
	vi ans;
	while(a != 1 || b != 1){
		//cout << u << " = " << a << ' ' << b << '\n';
		//cout << (ll)a * inverse(b,p) % p << '\n';
		if(a < b){
			swap(a,b);
			//cout << 3 << '\n';
			u = inverse(u,p);
			ans.pb(3);
			continue;
		}
		a -= b;
		ans.pb(2);
		u = (u-1+p)%p;
	}
	//cout << "-------\n";
	//cout << ans.size() << '\n';
	//for(int x : ans)
		//cout << x << '\n';
	//cout << "-------\n";
	return ans;
}
int test(int u, int p, vector<int> op){
	for(int x : op){
		if(x == 1)
			u = (u+1)%p;
		else if(x == 2)
			u = (u-1+p)%p;
		else
			u = inverse(u,p);
		//cout << u << '\n';
	}
	return u;
}
int main(){
	srand(time(0));
	int u,v,p;
	cin >> u >> v >> p;
	vi ans1 = path(u,p);
	vi ans2 = path(v,p);
	//cout << "test1: " << test(u,p,ans1) << '\n';
	//cout << "test2: " << test(v,p,ans2) << '\n';
	reverse(all(ans2));
	for(int &x : ans2)
		if(x == 1)
			x = 2;
		else if(x == 2)
			x = 1;
	//cout << ans1.size() << '\n';
	//cout << ans2.size() << '\n';
	vi ans = ans1;
	ans.insert(ans.end(),all(ans2));

	//cout << "test3: " << test(u,p,ans) << '\n';
	//assert(test(u,p,ans)==v);
	cout << ans.size() << '\n';
	for(int i = 0; i < ans.size(); ++i)
		cout << ans[i] << " \n"[i==ans.size()-1];
}
