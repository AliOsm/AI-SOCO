#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<int, int>, // change type
//        null_type,
//        less<pair<int, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)(x).size()
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const double PI = 3.14159265358979323846;
const double eps = (1e-8);

int n;
string s;
vector<int> a, ans;
int mem[200005][4];

int solve(int i, int prv)
{
    if (i == n)
        return 0;
    int &ret = mem[i][prv];
    if (~ret)
        return ret;
    ret = INT_MAX;
    for (int c = 0; c < 3; ++c)
    {
        if (c != prv)
            ret = min(ret, (c != a[i]) + solve(i + 1, c));
    }
    return ret;
}

void buildPath(int i, int prv)
{
    if (i == n)
        return;
    int ret = mem[i][prv];
    for (int c = 0; c < 3; ++c)
    {
        if (c != prv)
        {
            if (ret == (c != a[i]) + solve(i + 1, c))
            {
                ans.pb(c);
                buildPath(i + 1, c);
                return;
            }
        }
    }
    return;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
    clr(mem, -1);
    cin >> n;
    cin >> s;
    a.resize(n);
    rep(i,0,sz(s))
    {
        if (s[i] == 'R')
            a[i] = 0;
        else if (s[i] == 'G')
            a[i] = 1;
        else
            a[i] = 2;
    }
    cout << solve(0, 3) << '\n';
    buildPath(0, 3);
    for (auto item : ans)
    {
        if (item == 0)
            cout << 'R';
        else if (item == 1)
            cout << 'G';
        else
            cout << 'B';
    }
    return 0;
}