#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

//#define PB push_back
#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template < typename F, typename S >ostream& operator << ( ostream& os, const pair< F, S > & p ) {return os << "(" << p.first << ", " << p.second << ")";}
template < typename T >ostream &operator << ( ostream & os, const vector< T > &v ) {os << "{";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "}";}
template < typename T >ostream &operator << ( ostream & os, const set< T > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "]";}
template < typename T >ostream &operator << ( ostream & os, const multiset< T > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "]";}
template < typename F, typename S >ostream &operator << ( ostream & os, const map< F, S > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << it -> first << " = " << it -> second ;}return os << "]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
clock_t tStart = clock();
#define timeStamp dbg("Execution Time: ", (double)(clock() - tStart)/CLOCKS_PER_SEC)
void faltu () {cerr << endl;}
template <typename T>void faltu( T a[], int n ) {for(int i = 0; i < n; ++i) cerr << a[i] << ' ';cerr << endl;}
template <typename T, typename ... hello>void faltu( T arg, const hello &... rest) {cerr << arg << ' ';faltu(rest...);}
//#else
//#define dbg(args...)

const int mx = 1e5+5;
int n, m;
ll a[mx];
struct info
{
	ll sum = 0;
	int boro = 0;
}tree[mx * 4];

void init( int node, int l, int r )
{
	if( l == r ) {
		tree[node].sum = a[l];
		tree[node].boro = l;
		return;
	}
	int mid = (l + r)/2;
	init( 2*node, l, mid );
	init( 2*node+1, mid+1, r );
	tree[node].sum = tree[2*node].sum + tree[2*node+1].sum;
	if( a[tree[2*node].boro] > a[tree[2*node+1].boro] ) tree[node].boro = tree[2*node].boro;
	else tree[node].boro = tree[2*node+1].boro;
}

void update( int node, int l, int r, int b, int e, int x )
{
	if( l > e || r < b ) return;
	if( l >= b && r <= e ) {
		tree[node].sum = x;
		tree[node].boro = l;
		return;
	}
	int mid = (l + r)/2;
	update( 2*node, l, mid, b, e, x );
	update( 2*node+1, mid+1, r, b, e, x );
	tree[node].sum = tree[2*node].sum + tree[2*node+1].sum;
	if( a[tree[2*node].boro] > a[tree[2*node+1].boro] ) tree[node].boro = tree[2*node].boro;
	else tree[node].boro = tree[2*node+1].boro;

}

pll query( int node, int l, int r, int b, int e )
{
	if( l > e || r < b ) return MP(0, 0);
	if( l >= b && r <= e ) return MP( tree[node].sum, tree[node].boro );
	int mid = (l + r)/2;
	pll p1 = query( 2*node, l, mid, b, e );
	pll p2 = query( 2*node+1, mid+1, r, b, e );
	pll p;
	p.F = p1.F + p2.F;
	if( a[p1.S] > a[p2.S] ) p.S = p1.S;
	else p.S = p2.S;
	return p;
}

int main()
{
	optimize();
	cin >> n >> m;
	for( int i = 1; i <= n; ++i ) cin >> a[i];
	a[0] = -inf;
	init( 1, 1, n );
	for( int i = 0, type, l, r, x, k; i < m; ++i ) {
		cin >> type;
		if( type == 1 ) {
			cin >> l >> r;
			pll p = query( 1, 1, n, l, r );
			cout << p.F << endl;
		}
		else if( type == 2 ) {
			cin >> l >> r >> x;
			ll p = inf;
			while( p >= x ) {
				pll q = query( 1, 1, n, l, r );
				p = a[q.S];
				//dbg(q.S, p);
				a[q.S] = p%x;
				update( 1, 1, n, q.S, q.S, p%x );
			}
		}
		else {
			cin >> k >> x;
			a[k] = x;
			update( 1, 1, n, k, k, x );
		}
	}
}






















