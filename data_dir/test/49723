#include <bits/stdc++.h>
#define pb push_back
#define F first
#define S second
#define ll long long
#define sq(x) (x) * (x)
#define ins insert
#define mp make_pair
#define bit __builtin_popcount
#define all(x) x.begin(),x.end()
#define eb emplace_back
#define ub upper_bound
#define lb lower_bound
#define ios ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define file(s) if (fopen(s".in", "r")) freopen(s".in", "r", stdin), freopen(s".out", "w", stdout)
#define er erase

using namespace std;

const int N = 1e5 + 11, mod = 1e9 + 7;
const double EPS = 1e-7;
const int INF = 2e9;
const int base = 500;
const int dx[] = {1, -1, 0, 0};
const int dy[] = {0, 0, 1, -1};

#define int ll

int n, a[N];
int z[N * 4], t[N * 4][33];
inline void push(int v, int l, int r) {
    if (l != r) {
        z[v + v] ^= z[v];
        z[v + v + 1] ^= z[v];
    }
    if (z[v]) {
        for (int i = 0; i <= 27; ++i) {
            if ((z[v] >> i) & 1) {
                t[v][i] = r - l + 1 - t[v][i];
            }
        }
    }
    z[v] = 0;
}
inline void build(int v, int l, int r) {
    if (l == r) {
        for (int i = 0; i <= 27; ++i) {
            if (((a[l] >> i) & 1)) {
                t[v][i] = 1;
            }
        }
        return;
    }
    int md = l + ((r - l) >> 1);
    build(v + v, l, md);
    build(v + v + 1, md + 1, r);
    for (int i = 0; i <= 27; ++i) {
        t[v][i] = t[v + v][i] + t[v + v + 1][i];
    }
}
inline int get(int v, int l, int r, int left, int right) {
    push(v, l, r);
    if (left > r || right < l) {
        return 0;
    }
    if (left <= l && r <= right) {
        int ans = 0;
        for (int i = 0; i <= 27; ++i) {
            ans += (1 << i) * t[v][i];
        }
        return ans;
    }
    push(v, l, r);
    int md = l + ((r - l) >> 1);
    return get(v + v, l, md, left, right) + get(v + v + 1, md + 1, r, left, right);
}
inline void upd(int v, int l, int r, int left, int right, int val) {
    push(v, l, r);
    if (left > r || right < l) {
        return;
    }
    if (left <= l && r <= right) {
        z[v] ^= val;
        push(v, l, r);
        return;
    }
    push(v, l, r);
    int md = l + ((r - l) >> 1);
    upd(v + v, l, md, left, right, val);
    upd(v + v + 1, md + 1, r, left, right, val);
    for (int i = 0; i <= 27; ++i) {
        t[v][i] = t[v + v][i] + t[v + v + 1][i];
    }
}
main() {
    file("queue");
    ios;
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
    }
    int m;
    build(1, 1, n);
    cin >> m;
    while (m--) {
        int t, l, r, x;
        cin >> t >> l >> r;
        if (t == 2) {
            cin >> x;
            upd(1, 1, n, l, r, x);
        }
        else {
            cout << get(1, 1, n, l, r) << "\n";
        }
    }
    return 0;
}
/// 243368KZ
