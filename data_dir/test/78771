
#include <iostream>
#include <ctime>
#include <iomanip>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <cmath>
#include <set>
#include <unordered_set>
#include <unordered_map>
#include <chrono>
#include <stack>
#include <cassert>
#include <queue>
#include <deque>
#include <climits>
#include <cstring>
#include <random>
#include <bitset>

using namespace std;


signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    #ifdef LOCAL
    assert(freopen("input.txt", "r", stdin));
    assert(freopen("output.txt", "w", stdout));
    #endif
    
    int n;
    cin >> n;
    vector<int> v(n);
    vector<int> d(n);
    vector<int> p(n);
    for (int i = 0; i < n; i++) {
        cin >> v[i] >> d[i] >> p[i];
    }
    vector<int> is(n, 1);
    int pos = -1;
    for (int i = 0; i < n; i++) {
        for (int j = pos + 1; j < n; j++) {
            if (is[j]) {
                pos = j;
                break;
            }
        }
        if (pos == -1) {
            break;
        }
        for (int j = pos + 1, cnt = v[pos]; j < n; j++) {
            if (is[j]) {
                p[j] -= max(0, cnt);
                cnt--;
            }
        }
        vector<int> ok;
        for (int j = pos + 1; j < n; j++) {
            if (is[j] && p[j] >= 0) {
                ok.push_back(j);
            }
        }
        for (int j = pos + 1; j < n; j++) {
            if (is[j] && p[j] < 0) {
                is[j] = 0;
                for (auto k : ok) {
                    if (k > j) {
                        p[k] -= d[j];
                    }
                }
            }
        }
    }
    vector<int> res;
    for (int i = 0; i < n; i++) {
        if (is[i] == 1) {
            res.push_back(i + 1);
        }
    }
    cout << (int)res.size() << '\n';
    for (auto t : res) {
        cout << t << ' ';
    }
}
