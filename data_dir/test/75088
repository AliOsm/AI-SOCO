#include <iostream>
#include <map>
#include <cmath>
#include <vector>
#include <algorithm>

using namespace std;

const int MAXN = 200001;
int dp[MAXN], a[MAXN], from[MAXN];
map<int, int> mp;
map<int, int> idx;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	int n;
	cin >> n;
	for(int i = 0; i < n; ++i) {
		cin >> a[i];
	}

	fill(dp, dp + n, -1);
	fill(from, from + n, -1);
	dp[0] = 1;
	mp.insert({a[0], 1});
	idx.insert({a[0], 0});

	for(int i = 1; i < n; ++i) {
		int x = a[i] - 1;
		auto itr = mp.find(x);
		if (itr != mp.end()) {
			dp[i] = itr->second + 1;
			from[i] = idx[x];
		} else {
			dp[i] = 1;
		}
		itr = mp.find(a[i]);
		if (itr == mp.end() || mp[a[i]] < dp[i]) {
			mp[a[i]] = dp[i];
			idx[a[i]] = i;
		}	
	}
	int at = -1;
	for(int i = 0; i < n; ++i) {
		if (at == -1 || dp[i] > dp[at]) {
			at = i;
		}
	}
	cout << dp[at] << endl;
	vector<int> ans;
	while(at != -1) {
		ans.push_back(at + 1);
		at = from[at];
	}
	reverse(ans.begin(), ans.end());
	for(auto i : ans) {
		cout << i << " ";
	}
	cout << endl;

	return 0;
}
