#include <bits/stdc++.h>
using namespace std;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long 

    
class DisjointSet{
    vector<long int> parent, size;
    long int n, connected;


    public:
        DisjointSet(long int n) : n(n){
            parent.resize(n);
            size.resize(n);
            for(long int i = 0; i < n; i++){
                parent[i] = i;
                size[i] = 1;
            }
            connected = n;
        }
        void join(long int a,long int b){
            long int x = findParent(a);
            long int y = findParent(b);
            
            if(x == y)
                return;
            connected--;

            if(size[x] > size [y])
                swap(x, y);
 
            size[y] += size[x];
            size[x] = 0;
            parent[x] = parent[y];
            
        }
        long int findParent(long int a){
            if(a == parent[a])
                return a;
            return parent[a] = findParent(parent[a]); 
        }
        
        long int getSize(long int k){
            return size[findParent(k)];
        }

        long int getParent(long int x){
        	return parent[x];
        }
};
    

int main(){
   IOS;
 //    #ifndef ONLINE_JUDGE
 //        freopen("in.txt",  "r",  stdin);
 //        freopen("out.txt", "w", stdout);
 //    #endif
   	

   	long int n,m,k;
   	cin>>n>>m>>k;

   	vector<long int> c(n);
   	for(long int i = 0; i < n; i++)
   		cin>>c[i];

   	DisjointSet ds(n);
   	for(long int i = 0; i < m; i++){
   		long int a,b;
   		cin>>a>>b;
   		ds.join(a-1,b-1);
   	}

   	for(long int i = 0; i < n; i++)
   		ds.findParent(i);

   	unordered_map<long int,list<long int>> umap;

   	for(long int i = 0; i < n; i++)
   		umap[ds.getParent(i)].push_back(i);

   	long int ans = 0;
   	for(auto ele : umap){
   		unordered_map<long int,long int> colorCount;
   		long int maxC = 0;	

   		for(auto e : ele.second){
   			colorCount[c[e]]++;
   			maxC = max(maxC,colorCount[c[e]]);
   		}
   		ans += (ele.second.size() - maxC);
   	}
   	cout<<ans;

   return 0;
}