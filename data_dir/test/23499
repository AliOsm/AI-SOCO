#include <bits/stdc++.h>
  
using namespace std;
  
template<class T> void ckmin(T &a, T b) { a = min(a, b); }
template<class T> void ckmax(T &a, T b) { a = max(a, b); }
  
#define pb push_back
#define mp make_pair
#define cotu cout
#define itn int
#define Red ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define F first
#define S second
#define sz(x) (int)x.size()
#define all(x) (x).begin(), (x).end()
#define rep(i, n) for(int i = 0; i < n; ++i)
#define repr(i,n) for(int i = n - 1; i >= 0; --i)
#define Rep(i, a, n) for(int i = (a); i <=(n); ++i)
#define repst(i, n) for(auto it = n.begin(); it != n.end(); ++it)
#define Repr(i, a, n) for(int i = (n); i >= (a); --i)
#define setp(x) fixed << setprecision(x)
#define ordered_set tree<int , null_type,less<int >, rb_tree_tag,tree_order_statistics_node_update> 
  
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
  
typedef long long ll;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
  
const int inf = int(1e9);
const int mod = inf + 9;
const int N = 2e7 + 555; // TL MB
const double PI = acos(-1.0);
void mul(ll &x, ll y){
	x *= y;
	if(x >= mod) x %= mod;
}
 
void add(ll &x, ll y){
	x += y;
	if(x >= mod) x -= mod;
	if(x < 0) x += mod;
}
ll bp(ll a, ll n){
	ll r = 1;
	while(n){
		if(n & 1) mul(r, a);
		mul(a, a);
		n >>= 1;
	}
	return r;
 
}

ll inv(ll x){
	return bp(x, mod - 2);
}
void solve()
{
	ll n, a, b, k;
	string s;
	cin >> n >> a >> b >> k >> s;
	ll cnt = (n + 1) / k;
	ll res = 0;
	// form = (q^ n - 1) / (q - 1)
	ll upq = bp(b, k);
	ll dwq = bp(a, k);
	ll q = upq * inv(dwq) % mod;
	ll qn = bp(upq, cnt) * inv(bp(dwq, cnt)) % mod;
	ll up;
	if(q == 0) {
		up = 1;
	}
	else{
		add(q, - 1);
		add(qn, -1);
		up = qn * inv(q) % mod;
		mul(up, bp(a, n));
	}
	rep(i, k)
	{
		if(q == 0){
			ll y = bp(a, n - i) * bp(b, i) % mod;
			if(s[i]== '-') y = -y;
add(res, y * cnt % mod);
			continue;
		}
		ll x = bp(b, i);
		mul(x, inv(bp(a, i)));
		mul(x, up);
		if(s[i] == '+') add(res, x);
		else add(res, -x);
		// a ^ (n - i - k * x) * b ^ (i + k * x) * (c)
		// a ^ n / a ^ (i + k * x) * b ^ (i + k * x)
		// a ^ n * b ^ (i + k * x) / a ^ (i + k * x)
		// a ^ n * sum(b ^ (i + k * x) / a ^ (i + k * x))
		// sum(b ^ (k * x) / a ^ (k * x)) * (a ^ n * b ^ i / a ^ i), 1 <= i <= k, 0 <= x <= n / k
	}
	// cout << cnt;
	// 
	// b ^ 0 / a ^ 0 + b ^ 1 / a ^ 1 + b ^ 2 / a ^ 2
	// sum(b ^ i / a ^ (n / k - i)))
	// cout << cnt << '\n';
	cout << res;


	// cout << res;
	// b ^ 0 / a ^ 0 + b ^ 1 / a ^ 1 + b ^ 2 / a ^ 2

}




 // a b c a b c a b c a b c
 
int main()
{
	// freopen("input.txt", "r", stdin);
	// freopen("output.txt", "w", stdout);
    Red;
  	// precalc();
  	int T = 1;
  	// cin >> T;
  	for(int i = 1; i <= T; ++i){
  		solve();
  	}
  	return 0;

}