#include<bits/stdc++.h>
using namespace std;

const int N = 1000 * 1000 + 20, mod = 1e9 + 7;
int a[N], fen[N];
vector<int> vec, ans;

int sum(int a, int b) {
    return ((1LL * a + b) % mod + mod) % mod;
}

int mul(int a, int b) {
    return ((1LL * a * b) % mod + mod) % mod;
}

void compress() {
    sort(vec.begin(), vec.end());
    vec.resize(unique(vec.begin(), vec.end()) - vec.begin());
    for (int i = 0; i < vec.size(); i++)
        ans.push_back(0);
}

int dex(int x) {
    return lower_bound(vec.begin(), vec.end(), x) - vec.begin();
}


int get(int p) {
    int res = 0;
    for (p++; p; p -= p & -p)
        res = sum(res, fen[p]);
    return res;
}

void update(int p, int x) {
    for (p++; p < N; p += p & -p)
        fen[p] = sum(fen[p], x);
}

int main() {
    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
    int n;
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        vec.push_back(a[i]);
    }
    compress();
    for (int i = 0; i < n; i++) {
        int x = sum(a[i], mul(a[i], get(dex(a[i]))));
        update(dex(a[i]), sum(x, -ans[dex(a[i])]));
        ans[dex(a[i])] = x;
    }
    int ans2 = 0;
    for (int i = 0; i < ans.size(); i++)
        ans2 = sum(ans2, ans[i]);
    return cout << ans2 << "\n", 0;
}