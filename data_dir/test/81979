#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <vector>


using namespace std;

const int N = 1000000;

int a[N], gcd[N][21], n;

int getr(int ll, int a) {
    int curgcd = a;
    for(int j = 20; j >= 0; j--) {
        if(ll + (1 << j) >= n || __gcd(curgcd, gcd[ll + 1][j]) != curgcd)
            continue;
        ll += (1 << j);
    }
    return ll;
}





int getl(int rr, int a) {
    int curgcd = a;
    for(int j = 20; j >= 0; j--) {
        if(rr - (1 << j) < 0 || __gcd(gcd[rr - (1 << j)][j], curgcd) != curgcd)
            continue;
        rr -= 1 << j;
    }
    return rr;
}



//i + 1..i + (1 << j);

void build() {
    for(int i = 0; i < n; i++) {
        gcd[i][0] = a[i];
    }

    for(int j = 1; j <= 20; j++) {
        for(int i = 0; i < n; i++) {
            if(i + (1 << (j - 1)) < n)
                gcd[i][j] = __gcd(gcd[i][j - 1], gcd[i + (1 << (j - 1))][j - 1]);
            else {
                gcd[i][j] = gcd[i][j - 1];
            }
        }
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin >> n;

    for(int i = 0; i < n; i++) {
        cin >> a[i];
    }

    build();

    vector<pair<int, int> > ans;

    for(int i = 0; i < n; i++) {
        int ll = getl(i, a[i]);
        int rr = getr(i, a[i]);

//        cout << ll << " " << i << " " << rr << "\n";

        if(ans.size() && ans[0].second < rr - ll)
            ans.clear();

        if(!ans.size() || ans[0].second <= rr - ll)
            ans.push_back(make_pair(ll, rr - ll));
    }
    sort(ans.begin(), ans.end());
    ans.resize(unique(ans.begin(), ans.end()) - ans.begin())
    ;

    cout << ans.size() << " " << ans[0].second << "\n";
    for(int i = 0; i < ans.size(); i++) {
        cout << ans[i].first + 1 << " ";
    }
    return 0;
}
