#include <bits/stdc++.h>
#define int long long
using namespace std;
#define IOS ios::sync_with_stdio(false) , cin.tie(0) , cout.tie(0)
inline int in(){int32_t x ; scanf("%d",&x) ; return x ; }
inline long long lin(){long long x ; scanf("%lld",&x) ; return x ;}
const int maxn = 1e6 + 10;
struct matrix
{
    int mini[5][5];
}stree[maxn];
int n , q;
string s;
inline matrix merge(matrix a , matrix b)
{
    matrix ret;
    memset(ret.mini,63,sizeof ret.mini);
    for (int i = 0 ; i < 5 ; i ++)
        for (int j = i ; j < 5 ; j ++)
            for (int k = j ; k < 5 ; k ++)
                ret.mini[i][k] = min(ret.mini[i][k],a.mini[i][j]+b.mini[j][k]);
    return ret;
}
inline void build(int p = 0 , int l = 0 , int r = n - 1)
{
    if (l == r)
    {
        memset(stree[p].mini,63,sizeof stree[p].mini);
        for (int i = 0 ; i < 5 ; i ++) stree[p].mini[i][i] = 0;
        if (s[l] == '2') stree[p].mini[0][1] = 0 , stree[p].mini[0][0] = 1;
        else if (s[l] == '0') stree[p].mini[1][2] = 0 , stree[p].mini[1][1] = 1;
        else if (s[l] == '1') stree[p].mini[2][3] = 0 , stree[p].mini[2][2] = 1;
        else if (s[l] == '7') stree[p].mini[3][4] = 0 , stree[p].mini[3][3] = 1;
        else if (s[l] == '6') stree[p].mini[3][3] = stree[p].mini[4][4] = 1;
        return ;
    }
    int mid = (l + r) >> 1;
    build(2 * p + 1,  l ,mid);
    build(2 * p + 2 , mid + 1 , r);
    stree[p] = merge(stree[2 * p + 1] , stree[2 * p + 2]);
}
inline matrix get(int ql , int qr , int p = 0 , int l = 0 , int r = n - 1)
{
    if (l >= ql && r <= qr) return stree[p];
    int mid = (l + r) >> 1;
    if (qr <= mid) return get(ql,qr,2*p+1,l,mid);
    if (ql >= mid + 1) return get(ql,qr,2*p+2,mid+1,r);
    matrix a , b;
    a = get(ql,qr,2*p+1,l,mid);
    b = get(ql,qr,2*p+2,mid+1,r);
    return merge(a,b);
}
int32_t main()
{
    IOS;
    cin >> n >> q;
    cin >> s;
    build();
    while (q --)
    {
        int ql , qr ; cin >> ql >> qr ; ql -- , qr -- ;
        matrix ret = get(ql,qr);
        if (ret.mini[0][4] > n)
            cout << -1 << "\n";
        else cout << ret.mini[0][4] << "\n";
    
    }
}
