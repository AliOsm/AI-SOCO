#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <cstring>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <memory.h>
#include <ctime>

using namespace std;

#pragma comment(linker, "/STACK:128000000")

typedef pair<int, int> pii;
typedef long long int64;
typedef pair<int64, int64> pii64;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pii> vpii;
typedef vector<vpii> vvpii;
typedef pair<pii,int> piii;
typedef pair<int64,pii> piii64;
typedef pair<pii,pii> piiii;

#define y1 dsjfksdj_fks
#define y2 alksaad_sa

struct station
{
    int l;
    int r;
    int c;
    int id;

    void read(int _id)
    {
        id = _id;
        scanf("%d%d%d", &l, &r, &c);
    }

    void magic()
    {
        swap(l, r);
        l = -l;
        r = -r;
    }

    bool operator < (const station &B) const
    {
        return l < B.l;
    }
};

struct ads
{
    int l;
    int r;
    int id;

    void read(int _id)
    {
        id = _id;
        scanf("%d%d", &l, &r);
    }

    void magic()
    {
        swap(l, r);
        l = -l;
        r = -r;
    }

    bool operator < (const ads &B) const
    {
        return l < B.l;
    }
};

const int maxn = 200005;
const int maxm = maxn;

int n, m;
station a[maxm];
ads b[maxn];

inline void init()
{
    scanf("%d%d", &n, &m);
    for (int i = 0; i < n; ++i)
        b[i].read(i);
    for (int i = 0; i < m; ++i)
        a[i].read(i);
    sort(b, b + n);
    sort(a, a + m);
}

priority_queue <pii> Q;

inline pair<int64, pii> solve()
{
    while (!Q.empty()) Q.pop();

    pair <int64, pii> res = pair <int64, pii>(0, pii(-1, -1));
    int j = 0;
    for (int i = 0; i < m; ++i)
    {
        int L = a[i].l;
        while (j < n && b[j].l <= L)
        {
            Q.push(pii(b[j].r, b[j].id));
            ++j;
        }
        if (!Q.empty() && Q.top().first > L)
        {
            pair <int64, pii> cur = pair <int64, pii> ((int64)(min(Q.top().first, a[i].r) - L) * (int64)a[i].c, pii(Q.top().second, a[i].id));
            res = max(res, cur);
        }
    }
    return res;
}

struct ev
{
    int x;
    int act;
    int id;

    bool operator < (const ev &B) const
    {
        return pii(x, act) < pii(B.x, B.act);
    }
};

struct tnode{
        pii tree[4000000];
        tnode(){
                for (int i = 0; i < 4000000; ++i) {
                        tree[i] = pii(-1, -1);
                }
        }
};
tnode qwe;
void upd1(int i, int tl, int tr, int x, pii a) {
        if (tl == tr) {
                qwe.tree[i] = a;
                return;
        }
        if (x <= ((tl + tr) >> 1)) {
                upd1(i << 1, tl, (tl + tr) >> 1, x, a);
        }
        else
        {
                upd1((i << 1) | 1, ((tl + tr) >> 1) + 1, tr, x, a);
        }
        qwe.tree[i] = max(qwe.tree[i << 1], qwe.tree[(i << 1) + 1]);
        return;
}
void upd(int x, pii a) {
        upd1(1, 0, 900000, x, a);
}
pii getmax1(int i, int tl, int tr, int l, int r) {
        if (l > r) {
                return pii(-1, -1);
        }
        if (tl == l && tr == r) {
                return qwe.tree[i];
        }
        return max(getmax1(i << 1, tl, (tl + tr) >> 1, l, min(r, (tl + tr) >> 1)), getmax1((i << 1) + 1, ((tl + tr) >> 1) + 1, tr, max(l, ((tl + tr) >> 1) + 1), r));
}
pii getmax(int l, int r) {
        return getmax1(1, 0, 900000, l, r);
}

ev e[maxm << 2];

inline int get_ind(int val, int l)
{
    int L = 0, R = l - 1;
    while (L <= R)
    {
        int mid = ((L + R) >> 1);
        if (e[mid].x == val) return mid;
        if (e[mid].x < val)
            L = mid + 1;
        else
            R = mid - 1;
    }
    return -1;
}

inline pair<int64, pii> solve2()
{
    int l = 0;
    for (int i = 0; i < m; ++i)
    {
        ev cur_ev;
        
        cur_ev.x = a[i].l;
        cur_ev.act = 0;
        cur_ev.id = i;
        e[l++] = cur_ev;
        
        cur_ev.x = a[i].r;
        cur_ev.act = 3;
        cur_ev.id = i;
        e[l++] = cur_ev;
    }

    for (int i = 0; i < n; ++i)
    {
        ev cur_ev;
        
        cur_ev.x = b[i].l;
        cur_ev.act = 1;
        cur_ev.id = i;
        e[l++] = cur_ev;
        
        cur_ev.x = b[i].r;
        cur_ev.act = 2;
        cur_ev.id = i;
        e[l++] = cur_ev;
    }
    
    sort(e, e + l);

    pair <int64, pii> res = pair <int64, pii>(0, pii(-1, -1));
    
    for (int it = 0; it < l; ++it)
    {
        if (e[it].act == 0)
        {
            int cur_id = e[it].id;
            pii newp(a[cur_id].c, cur_id);
            int ind = get_ind(a[cur_id].r, l);
            upd(ind, newp);
            continue;
        }
        if (e[it].act == 1)
        {
            int cur_id = e[it].id;
            int ind = get_ind(b[cur_id].r, l);
            pii curp = getmax(ind, l - 1);
            pair <int64, pii> cur = pair <int64, pii> ((int64)(b[cur_id].r - b[cur_id].l) * (int64)curp.first, pii(b[cur_id].id, a[curp.second].id));
            res = max(res, cur);
            continue;
        }
    }

    return res;
}

int main()
{
    //freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    
    init();

    pair <int64, pii> res = solve();

    res = max(res, solve2());

    for (int i = 0; i < n; ++i)
        b[i].magic();
    for (int i = 0; i < m; ++i)
        a[i].magic();
    sort(b, b + n);
    sort(a, a + m);

    res = max(res, solve());

    cout << res.first << endl;
    if (res.first)
    {
        cout << res.second.first + 1 << " " << res.second.second + 1 << endl; 
    }

    return 0;
}