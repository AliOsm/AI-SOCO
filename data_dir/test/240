#include <bits/stdc++.h>

using namespace std;

typedef pair <int,int> pii;

const int N = 100100;

int P[N];
int Ans[N];
vector <pii> Adj[N];

void DFS(int x, int p = 0)
{
    for(pii y : Adj[x])
        if(y.first != p)
            P[y.first] = y.second, DFS(y.first, x);
}

int main()
{
    int n;  cin >> n;

    for(int i = 1; i < n; i++)
    {
        int x, y;   scanf("%d%d", &x, &y);

        Adj[x].emplace_back(y, i);
        Adj[y].emplace_back(x, i);
    }

    vector <int> Leafs;

    for(int x = 1; x <= n; x++)
        if(Adj[x].size() == 1)
            Leafs.push_back(x);

    if(Leafs.size() == 2)
    {
        for(int i = 1; i < n; i++)  printf("%d\n", i - 1);
        return 0;
    }

    int Root = 1;
    while(Adj[Root].size() == 1)    Root++;

    set <int> st;
    for(int i = 0; i < n - 1; i++)  st.insert(i);

    DFS(Root);

    memset(Ans, -1, sizeof(Ans));

    for(int i = 0; i < 3; i++)  Ans[P[Leafs[i]]] = *st.begin(), st.erase(st.begin());

    for(int i = 1; i < n; i++)
        if(Ans[i] == -1)
            Ans[i] = *st.begin(), st.erase(st.begin());

    for(int i = 1; i < n; i++)  printf("%d\n", Ans[i]);
}
