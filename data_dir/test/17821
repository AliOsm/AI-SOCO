#include <bits/stdc++.h>
using namespace std;
#define f(i, x, n) for (int i = x; i < (int)(n); ++i)
#define ll long long
const int N=100000;
const ll oo=1e18;
int n,l,r;

pair<ll,ll> seg[40*N+100];

struct ev{
	int z, t, d;
	void sc(){
		char cc;
		scanf(" %c%d",&cc,&t);
		if(cc=='+')
			z=0;
		else if(cc=='-')
			z=1;
		else
			z=2;
		if(!z)
			scanf("%d",&d);
	}
};
ev q[3*N];

pair<ll,ll> merge(auto y, auto z){
	if(z.first==-oo)
		return y;
	pair<ll,ll> ret;
	ret.first=max(z.first, y.first+z.second);
	ret.second=y.second+z.second;
	return ret;
}

void build(int u, int s, int e){
	if(s==e){
		seg[u]={-1,-1};
		return;
	}
	build(u*2, s, (s+e)/2);
	build(u*2+1, (s+e)/2+1, e);
	seg[u]=merge(seg[u*2], seg[u*2+1]);
}

void upd(int u, int s, int e, int x){
	if(s>l || e<r)
		return;
	if(s==e){
		seg[u].first+=x;
		seg[u].second+=x;
		return;
	}
	upd(u*2, s, (s+e)/2, x);
	upd(u*2+1, (s+e)/2+1, e, x);
	seg[u]=merge(seg[u*2], seg[u*2+1]);
}

pair<ll,ll> get(int u, int s, int e) {
	if(s>l)
		return {-oo, -oo};
	if(e<=l)
		return seg[u];
	return merge(get(u*2, s, (s+e)/2), get(u*2+1, (s+e)/2+1, e));
}

int main(){
	//freopen("input.txt","r",stdin);
	cin>>n;
	build(1,1,10*N);
	for(int i=1; i<=n; ++i){
		q[i].sc();
		if(!q[i].z){
			l=r=q[i].t;
			upd(1,1,10*N,q[i].d);
		}else if(q[i].z==1){
			int id=q[i].t;
			l=r=q[id].t;
			upd(1,1,10*N,-q[id].d);
		} else{
			l=r=q[i].t;
			printf("%lld\n", max(0ll, 1+get(1,1,10*N).first));
		}
	}

}


