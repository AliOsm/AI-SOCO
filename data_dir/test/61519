#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <iterator>
//#include <cmath>
#include <set>
#include <deque> 
#include <string>


using namespace std;

long long n, l, r;

std::vector<long long> ans;

void doSearch(long long curL, long long curR, long long curHeadNum) {
	
	for (int i = 1 ; i <= n - 1 ; i++) {
		curHeadNum = i;
		if (curHeadNum >= n)
			return;
			
		//1 2 1 3 1 4
		long long sectLen = (n - curHeadNum) * 2;	//前段长度 
		long long nextL = curL + sectLen;		//下一个左界
		long long nextR = curR - 1;			//下一个右界
		
		long long curNum;
		if (l < nextL) {
			long long p;
			if (l <= curL) {
				p = curL;
				curNum = curHeadNum + 1;
			} else {
				long long dist = l - curL;
				p = l;
	//			if (dist % 2 == 0)
	//				curNum = curHeadNum;
	//			else
				curNum = curHeadNum + dist / 2 + 1;
			}
			
			while (p < nextL) {
				if (p > r)
					break;
					
				if (p % 2 == 1) {
					ans.push_back(curHeadNum);
				} else {
					ans.push_back(curNum);
					curNum++;
				}
				
				p++;
			}
		}
		
		curL = nextL;
		curR = nextR;
	}
	
//	doSearch(nextL, nextR, curHeadNum + 1);
	
	
	//没有收尾！收尾就是1 
//	if (r >= curR) {
//		ans.push_back(curHeadNum);
//	}
}

int main()
{
	int T;
	scanf("%d", &T);
	
	for (int ii = 0 ; ii < T ; ii++) {
		ans.clear();
		
		scanf("%I64d%I64d%I64d", &n, &l, &r);
		
		long long limit = n * (n - 1) + 1;
		
		doSearch(1, limit, 1);
		if (r == limit) {
			ans.push_back(1);
		}
		
		for (int i = 0 ; i < ans.size() ; i++) {
			printf("%I64d ", ans[i]);
		}
		printf("\n");
	}
	return 0;
}


//递归 