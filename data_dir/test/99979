#include<bits/stdc++.h>
using namespace std;
#define M 200005

const int SZ = 2200;
const int K = 50;

struct query
{
    int tp, l, r;
} qrs[M];

int ara[M], pri[M];
int frq[M], cutu[M];
int ans[M];

int getBox(int idx) { return (idx+SZ-1)/SZ; }

void addVal(int x)
{
    cutu[frq[x]]--;
    frq[x]++;
    cutu[frq[x]]++;
}

void delVal(int x)
{
    cutu[frq[x]]--;
    frq[x]--;
    cutu[frq[x]]++;
}

int main()
{
    int n, q;
    scanf("%d %d", &n, &q);

    for(int i = 1; i <= n; i++) scanf("%d", ara+i);
    for(int i = 1; i <= q; i++) scanf("%d %d %d", &qrs[i].tp, &qrs[i].l, &qrs[i].r);

    map<int, int> ma;
    int cur = 0;

    for(int i = 1; i <= n; i++)
    {
        if(ma.find(ara[i]) == ma.end()) ma[ara[i]] = ++cur;
    }
    for(int i = 1; i <= n; i++) ara[i] = ma[ara[i]];

    for(int i = 1; i <= q; i++)
    {
        if(qrs[i].tp == 1) continue;

        int val = qrs[i].r;
        if(ma.find(val) == ma.end()) ma[val] = ++cur;
    }
    for(int i = 1; i <= q; i++)
    {
        if(qrs[i].tp == 1) continue;

        qrs[i].r = ma[qrs[i].r];
    }

    for(int i = 1; i <= n; i++) assert(ara[i] <= n);

    for(int lb = 1; lb < K; lb++)
    {
        for(int rb = lb; rb < K; rb++)
        {
            for(int i = 1; i <= n+n; i++) pri[i] = ara[i], frq[i] = cutu[i] = 0;

            int curL = 0, curR = 0;
            for(int i = 1; i <= q; i++)
            {
                if(qrs[i].tp == 2)
                {
                    int idx = qrs[i].l, val = qrs[i].r;

                    if(idx >= curL && idx <= curR)
                    {
                        delVal(pri[idx]);
                        addVal(val);
                    }
                    pri[idx] = val;
                }
                else
                {
                    int l = qrs[i].l, r = qrs[i].r;
                    if(getBox(l) != lb || getBox(r) != rb) continue;

                    while(curR < r) addVal(pri[++curR]);
                    while(curL > l) addVal(pri[--curL]);
                    while(curR > r) delVal(pri[curR--]);
                    while(curL < l) delVal(pri[curL++]);

                    for(int j = 1; cutu[j]; j++) ans[i] = j;
                    ans[i]++;
                }
            }
        }
    }

    for(int i = 1; i <= q; i++)
    {
        if(qrs[i].tp == 2) continue;
        printf("%d\n", ans[i]);
    }

    return 0;
}
