#include <cstdio>
#include <vector>
#include <utility>
#include <algorithm>
using namespace std;
const int N = 300010;
int b[N];
void add(int *bb, int n, int p, int x) {
	while (p < n) {
		bb[p] += x;
		p += p & -p;
	}
}
int sum(int *bb, int p) {
	int res = 0;
	while (p) {
		res += bb[p];
		p -= p & -p;
	}
	return res;
}
pair<int, pair<int, int> > v[100010];
int kst[100010], ked[100010];
vector<pair<int, int> > a, ta;
vector<int> ks;
int main() {
	int n, k;
	scanf("%d%d", &n, &k);
	for (int i = 0; i < n; i++) {
		int x, r, t;
		scanf("%d%d%d", &x, &r, &t);
		a.push_back(make_pair(t, x));
		v[i] = make_pair(r, make_pair(t, x));
	}
	sort(a.begin(), a.end());
	ta = a;
	for (int i = 0; i < a.size(); i++) {
		int t = a[i].first, j = i;
		while (j < a.size() && a[j].first == t) {
			j++;
		}
		ta.push_back(make_pair(t, -1001001001));
		ta.push_back(make_pair(t, 2001001001));
		i = j - 1;
	}
	a = ta;
	sort(a.begin(), a.end());
	for (int i = 0; i < a.size(); i++) {
		int t = a[i].first, j = i;
		while (j < a.size() && a[j].first == t) {
			j++;
		}
		kst[ks.size()] = i;
		ked[ks.size()] = j;
		ks.push_back(t);
		i = j - 1;
	}
	sort(v, v + n);
	long long ans = 0;
	for (int i = 0; i < n; i++) {
		int r = v[i].first, t = v[i].second.first, x = v[i].second.second;
		int tp = lower_bound(ks.begin(), ks.end(), t) - ks.begin();
		int kp = lower_bound(a.begin() + kst[tp], a.begin() + ked[tp], v[i].second) - a.begin();
		int tst = lower_bound(ks.begin(), ks.end(), t - k) - ks.begin();
		int ted = lower_bound(ks.begin(), ks.end(), t + k + 1) - ks.begin();
		ans += sum(b + kst[tp], kp - kst[tp]);
		for (int j = tst; j < ted; j++) {
			int tt = ks[j];
			int pst = lower_bound(a.begin() + kst[j], a.begin() + ked[j], make_pair(tt, x - r)) - a.begin();
			int ped = lower_bound(a.begin() + kst[j], a.begin() + ked[j], make_pair(tt, x + r + 1)) - a.begin();
			add(b + kst[j], ked[j] - kst[j], pst - kst[j], 1);
			add(b + kst[j], ked[j] - kst[j], ped - kst[j], -1);
		}
	}
	printf("%I64d\n", ans);
	return 0;
}
