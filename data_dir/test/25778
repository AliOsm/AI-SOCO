#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define ppl pair<ll,ll>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcountll
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=100000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

int n,m;
int d[N+5];
int drem[N+5];
int a[N+5];
int avail;

set<int> nex;


int nexx[N+5];
int las[N+5];
bool done[N+5];

int main()
{
  finp;
  cin>>n>>m;

  afor(i,1,n)
  {
    cin>>a[i];
  }

  bfor(i,n,1)
  {
    nexx[i] = las[a[i]];
    las[a[i]] = i;
  }

  afor(i,1,m)
  {
    cin>>d[i];
    drem[i] = d[i];
  }

  bool f = true;
  int ans = 0;

  afor(i,1,n)
  {
    if(!a[i] || done[a[i]])
      {
        ++avail;
        if(a[i])
        {
          nex.erase(i);
          if(nexx[i])nex.insert(nexx[i]);
        }
      }
    else
    {
      ans = i;
      if(avail >= drem[a[i]])
      {
        avail-=drem[a[i]];
        drem[a[i]] = 0;
        done[a[i]] = true;
        if(nexx[i])nex.insert(nexx[i]);
      }
      else
      {
        int tot = avail;
       
        while(nex.size())
        {
          int j = *nex.begin();
          if(nexx[i] && nexx[i]<=j)break;
       
           ans = j;
           done[a[j]] = false;
             
           nex.erase(j);
        
           drem[a[j]]=d[a[j]];
           tot+=d[a[j]] + 1;
        
          if(tot >= drem[a[i]])break;
        }
       
      
        if(tot < drem[a[i]])
        {
         avail = tot + 1;
        }
        else
        {
           done[a[i]] = true;
           drem[a[i]] = 0;
           
           avail = tot - d[a[i]];

           if(nexx[i])nex.insert(nexx[i]);
        }
      }
    }
  }

f = true;
afor(i,1,m)
{
  if(!done[i])
  {
    f = false;
    break;
  }
}

  if(!f)cout<<"-1";
  else cout<<ans;
  
return 0;
}