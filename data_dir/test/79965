#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;

#define FOR(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define SZ(c) ((int)(c).size())

typedef long long LL;
const int N = 100005;
vector<int> a[100005];
LL ans = 0;
LL pos[N], neg[N] ,v[N];

void dfs(int x, int from=-1) {
	pos[x] = neg[x] = 0;
	FOR(it, a[x]) if(*it != from) {
		dfs(*it, x);
		pos[x] = max(pos[x], pos[*it]);
		neg[x] = min(neg[x], neg[*it]);
	}
	v[x] -= pos[x] + neg[x];
	if (v[x] > 0) pos[x] += v[x];
	if (v[x] < 0) neg[x] += v[x];
}

int main(void) {
	int n;
	scanf("%d", &n);
	for(int i=0;i<n-1;i++) {
		int x, y;
		scanf("%d%d", &x, &y);
		a[x].push_back(y);
		a[y].push_back(x);
	}
	for(int i=1;i<=n;i++) scanf("%I64d", &v[i]);
	dfs(1);
	printf("%I64d\n", pos[1] - neg[1]);
	return 0;
}
