#include <iostream>
#include <map>
#include <vector>
#include <set>
#include <algorithm>
#include <cmath>
#include <assert.h>
#include <queue>
using namespace std;

#define all(a) (a).begin(), (a).end()

const int MAX_A = (int)2e5;

vector<vector<int> > a;
set<int> q[MAX_A + 1];

set<int> used;
vector<int> dp;
int ans = 0;

void go(int v, int type, int pr = -1) {
    used.insert(v);

    dp[v] = 1;

    multiset<int> dist;
    for (int to : a[v]) {
        if (to == pr || q[type].find(to) == q[type].end()) {
            continue;
        }

        go(to, type, v);
        dp[v] = max(dp[v], dp[to] + 1);

        dist.insert(dp[to]);
        if (dist.size() > 2) {
            dist.erase(dist.begin());
        }
    }

    ans = max(ans, dp[v]);
    if (dist.size() == 2) {
        ans = max(ans, *dist.begin() + (*--dist.end()) + 1);
    }
}

int main() {
    // freopen("in.txt", "rt", stdin);
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    int n;
    cin >> n;

    for (int i = 0; i < n; ++i) {
        int a;
        cin >> a;

        for (int j = 2; j * j <= a; ++j) {
            if (a % j == 0) {
                q[j].insert(i);
            }

            while (a % j == 0) {
                a /= j;
            }
        }

        if (a > 1) {
            q[a].insert(i);
        }
    }

    a.resize(n);
    for (int i = 1; i < n; ++i) {
        int x, y;
        cin >> x >> y;
        --x;
        --y;

        a[x].push_back(y);
        a[y].push_back(x);
    }

    dp.resize(n);
    for (int i = 2; i <= MAX_A; ++i) {
        for (int v : q[i]) {
            if (used.find(v) != used.end()) {
                continue;
            }

            go(v, i);
        }
        used.clear();
    }

    cout << ans << "\n";
}
