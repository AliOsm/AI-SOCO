// Why am I so dumb? :c
// chrono::system_clock::now().time_since_epoch().count()
                                                  
#include<bits/stdc++.h>
//#include<ext/pb_ds/assoc_container.hpp>
//#include<ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define mp make_pair

#define all(x) (x).begin(), (x).end()

#define fi first
#define se second

using namespace std;
//using namespace __gnu_pbds;

typedef long long ll;   
typedef pair<int, int> pii;
//template<typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

const int MAXN = (int)3e3 + 5;
const ll INF = (ll)1e15;

pair<int, ll> dp[MAXN][MAXN], ndp[MAXN];

vector<int> adj[MAXN];

int arr[MAXN];

int sub[MAXN];

int n, m;

void dfs(int v, int pr = -1) {    
    fill(dp[v], dp[v] + n + 1, mp(-n, -INF));
    dp[v][0] = mp(0, 0);
    sub[v] = 1;

    for (int to : adj[v]) {
        if (to == pr) {
            continue;
        }

        dfs(to, v);
    }

    for (int i = 1; i <= n + 1; ++i) {
        ndp[i] = mp(-n, -INF);
    }

    for (int to : adj[v]) {
        if (to == pr) {
            continue;
        }            

        for (int i = 0; i <= sub[v] + sub[to] + 1; ++i) {
            ndp[i] = mp(-n, -INF);
        }

        for (int i = sub[v]; i >= 0; --i) {
            for (int j = sub[to]; j >= 0; --j) {
                pair<int, ll> A = dp[v][i];
                pair<int, ll> B = dp[to][j];

                if (A.se == -INF || B.se == -INF || A.fi < 0 || B.fi < 0) {
                    continue;
                }

                if (B.se > 0) {
                    ndp[i + j + 1] = max(ndp[i + j + 1], mp(A.fi + B.fi + 1, A.se));
                }
                else {
                    ndp[i + j + 1] = max(ndp[i + j + 1], mp(A.fi + B.fi, A.se));
                }

                ndp[i + j] = max(ndp[i + j], mp(A.fi + B.fi, A.se + B.se));
            }            
        }

        sub[v] += sub[to];

        for (int j = 0; j < sub[v]; ++j) {
            dp[v][j] = ndp[j];
        }
    }

    for (int i = 0; i < n; ++i) {
        if (dp[v][i].se != -INF) {
            dp[v][i].se += arr[v];
        }
    }
}

void solve() {
    scanf("%d %d", &n, &m);

    for (int i = 1; i <= n; ++i) {
        adj[i].clear();
        arr[i] = 0;
    }

    for (int i = 1, x; i <= n; ++i) {
        scanf("%d", &x);
        arr[i] = -x;
    }

    for (int i = 1, x; i <= n; ++i) {
        scanf("%d", &x);
        arr[i] += x;        
    }

    for (int i = 1; i < n; ++i) {
        int u, v;
        scanf("%d %d", &u, &v);
        adj[u].pb(v);
        adj[v].pb(u);
    }
    
    dfs(1);    
    printf("%d\n", dp[1][m - 1].fi + (dp[1][m - 1].se > 0));
}

int main() {
    int tt;
    scanf("%d", &tt);

    while (tt--) {
        solve();
    }

    return 0;
}
