#include <iostream>

using namespace std;

typedef long long int lint;

int r = 547;
int mida = 600;

int permutacion[500000];
int posicion[500000];
int valor[500000];
int sumaderecha[600][1200];
int suma[600];

lint total = 0;

int n;

void actualiza(int posval, int newval) {
  valor[posval] = newval;
  int base = posval / r;
  for (int i = 0; i < mida + mida; i++) sumaderecha[base][i] = 0;
  int posini = (posval / r) * r;
  int posfin = posini + r;
  int s = 0;
  for (int i = posfin - 1; i >= posini; i--) {
    s += valor[i];
    sumaderecha[base][mida + s]++;
  }
  suma[base] = s;
}

void calcula(int pos) {
  int posini = (pos / r) * r;
  lint s = valor[pos];
  for (int posact = pos - 1; posact >= posini; posact--) {
    s += valor[posact];
    if (s == 1 or s == 2) total++;
  }
  for (int base = pos / r - 1; base >= 0; base--) {
    if (s < mida - 10 and s > -mida + 10)
      total +=
          sumaderecha[base][mida - s + 1] + sumaderecha[base][mida - s + 2];
    s += suma[base];
  }
}

int main() {
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> permutacion[i];
    permutacion[i]--;
    posicion[permutacion[i]] = i;
  }
  for (int i = 0; i < n + mida + mida; i++) valor[i] = 0;
  for (int i = 0; i < n; i++) {
    actualiza(i, 1);
    int p = posicion[i];
    if (p > 0) {
      int ii = permutacion[p - 1];
      if (ii < i) actualiza(ii, valor[ii] - 1);
    }
    if (p < n - 1) {
      int ii = permutacion[p + 1];
      if (ii < i) actualiza(ii, valor[ii] - 1);
    }
    calcula(i);
  }
  cout << total << endl;
}
