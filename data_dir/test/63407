#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>

#define pb push_back
#define mp make_pair
#define all(c) (c).begin(), (c).end()
#define rall(c) (c).rbegin(), (c).rend()
#define tr(c, i) for (typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define rtr(c, i) for (typeof((c).rbegin()) i = (c).rbegin(); i != (c).rend(); --i)
#define contains(c, x) ((c).find(x) != (c).end())
#define Contains(c, x) (find(all(c), x) != (c).end())
#define REP(i, a, b) for (int i = (a); i < (b); ++i)
#define rep(i, n) REP(i, 0, (n))
#define To_String to_string< char,std::char_traits<char>,std::allocator<char> >

typedef long long ll;
typedef unsigned long long ull;
using namespace std;

int visited[2][200010];
int main()
{
	ios_base::sync_with_stdio(0);
	int n, k;
	string walls[2];
	while (cin >> n >> k) {
		cin >> walls[0] >> walls[1];
		bool found = false;
		queue<pair<int, int> > q;
		q.push(mp(0, 0));
		visited[0][0] = 1;
		while (!q.empty()) {
			int which = q.front().first;
			int pos = q.front().second;
			q.pop();
			if (pos >= n) { found = true; break; }
			if (pos < visited[which][pos]-1) continue;
			if (walls[which][pos] == 'X') continue;

			if (!visited[which][pos+1]) {
				q.push(mp(which, pos+1));
				visited[which][pos+1] = visited[which][pos] + 1;
			}
			if (pos-1>=0 && !visited[which][pos-1]) {
				q.push(mp(which, pos-1));
				visited[which][pos-1] = visited[which][pos] + 1;
			}
			if (!visited[1-which][pos+k]) {
				q.push(mp(1-which, pos+k));
				visited[1-which][pos+k] = visited[which][pos] + 1;
			}
		}
		cout << (found ? "YES" : "NO") << endl;
	}
	return 0;
}
