//#define ONLINE_JUDGE

#if defined(ONLINE_JUDGE)
#define _SECURE_SCL 0
#endif

#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <functional>
#include <memory>
#include <cmath>
#include <climits>
#include <numeric>
#include <tuple>
#include <memory.h>
#include <stdint.h>

#if !defined(__GNUC__)
#else // !defined(__GNUC__)
#define _CrtDbgBreak() __builtin_trap()
#endif // !defined(__GNUC__)

#if defined(ONLINE_JUDGE)
#define LOCAL_TEST 0
#else 
#define LOCAL_TEST 1
#endif

#if LOCAL_TEST
struct AssertsCounter
{
	AssertsCounter(): counter(0) {}
	~AssertsCounter() { std::cerr << std::endl << "DIAG: " << (counter == 0 ? "OK" : "FAIL!!!") << " Asserts count: " << counter << std::endl; }
	void Increment() { counter++; }
	uint32_t counter;
};
AssertsCounter g_assertsCounter;
#define LOCAL_ASSERT(expr) { if (!(expr)) {std::cerr << "ASSERT FAILED (" << __LINE__ << "): '" << #expr << "'" << std::endl; g_assertsCounter.Increment(); _CrtDbgBreak(); } }
#define LOCAL_ASSERT_EQ(expr1, expr2) { if ((expr1) != (expr2)) {std::cerr << "ASSERT FAILED (" << __LINE__ << "): '" << #expr1 << "' == '" << #expr2 << "' (" << (expr1) << " vs " << (expr2) << "')" << std::endl; g_assertsCounter.Increment(); _CrtDbgBreak(); } }
#else
volatile bool isLocalTestEnabled = 0;
#define LOCAL_ASSERT(expr)
#define LOCAL_ASSERT_EQ(expr1, expr2)
#endif

bool g_isLocalPrintEnabled = (bool)(LOCAL_TEST);
#define LOCAL_PRINT() if (!g_isLocalPrintEnabled) { } else std::cerr // << .. << ..

typedef std::string string8_t;
typedef long double ld_t;

typedef std::vector<size_t> vector_size_t;
typedef std::vector<uint8_t> vector_uint8_t;
typedef std::vector<int32_t> vector_int32_t;
typedef std::vector<uint32_t> vector_uint32_t;
typedef std::vector<int64_t> vector_int64_t;
typedef std::vector<uint64_t> vector_uint64_t;
typedef std::vector<string8_t> vector_string8_t;

typedef std::vector<vector_size_t> vector_2d_size_t;
typedef std::vector<vector_int32_t> vector_2d_int32_t;
typedef std::vector<vector_uint32_t> vector_2d_uint32_t;
typedef std::vector<vector_int64_t> vector_2d_int64_t;
typedef std::vector<vector_uint64_t> vector_2d_uint64_t;

typedef std::set<size_t> set_size_t;
typedef std::set<int32_t> set_int32_t;
typedef std::set<uint32_t> set_uint32_t;
typedef std::set<int64_t> set_int64_t;
typedef std::set<uint64_t> set_uint64_t;
typedef std::set<string8_t> set_string8_t;

typedef std::multiset<size_t> multiset_size_t;
typedef std::multiset<string8_t> multiset_string8_t;

// Auxiliary functions definition
// 
template<typename T> void UpdateMin(T& a, const T b) {a = std::min(a, b);}
template<typename T> void UpdateMax(T& a, const T b) {a = std::max(a, b);}

const ld_t Pi = std::atan(1.0L) * 4.0L;
static const ld_t Eps = 1.0e-09;
template<typename T> bool IsEqual(const T a, const T b) { return std::abs(a - b) < Eps; }
template<typename T> bool IsGreater(const T a, const T b) { return a > b + Eps; }
template<typename T> bool IsLess(const T a, const T b) { return a + Eps < b; }
template<typename T> bool IsGreaterEqual(const T a, const T b) { return !IsLess(a, b); }
template<typename T> bool IsLessEqual(const T a, const T b) { return !IsGreater(a, b); }

template<typename T> string8_t ToStr(const T& val) { std::ostringstream ostr; ostr << val; return ostr.str(); }
template<typename T> bool FromStr(const string8_t& str, T& val) {std::istringstream istr(str); istr >> val; return !!istr; }

template<typename T> std::istream& operator>>(std::istream& ist, std::vector<T>& data)
{
	LOCAL_ASSERT(!!ist);
	for (size_t i = 0; i < data.size(); i++) { ist >> data[i]; }
	return ist;
}

template<typename T> T Read(std::istream& ist)
{
	LOCAL_ASSERT(!!ist);
	T val; ist >> val; return val;
}

template<typename T> std::ostream& operator<<(std::ostream& ost, const std::vector<T>& data)
{
	for (size_t i = 0; i < data.size(); i++) { if (i != 0) { ost << ' '; } ost << data[i]; }
	return ost;
}

#if defined(ONLINE_JUDGE)
template<size_t id> class StopWatch { };
#else
#include <library/lib_stopwatch.h>
#include <library/lib_random.h>
library::random::Rand g_rnd;
#endif

char GetMainLetter(const string8_t& s)
{
	LOCAL_ASSERT(s.size() == 27);
	std::map<char, size_t> cn;
	for (size_t i = 0; i < s.size(); i++)
	{
		const char c = s[i];
		cn[c] += 1;
	}

	LOCAL_ASSERT(cn.size() == 26);
	for (char c = 'A'; c <= 'Z'; c++)
	{
		if (cn[c] == 2)
			return c;
	}

	LOCAL_ASSERT(false && false);
	return '0';
}

size_t GetMainDistance(const string8_t& s, const char c, size_t& p, size_t& q)
{
	p = s.find(c);
	LOCAL_ASSERT(p != string8_t::npos);
	q = s.find(c, p + 1);
	LOCAL_ASSERT(q != string8_t::npos);
	LOCAL_ASSERT(p != q);
	return q - p;
}

const char FreeCell = '.';

void Put(int32_t& x, int32_t& y, const char c, vector_string8_t& ans)
{
	const int32_t dx[] = { 0, -1, -1,  0, +1};
	const int32_t dy[] = {-1,  0, +1, +1,  0};

	for (size_t i = 0; i < 5; i++)
	{
		int32_t nx = x + dx[i];
		int32_t ny = y + dy[i];
		if (nx < 0 || nx >= (int32_t)ans.size())
			continue;
		if (ny < 0 || ny >= (int32_t)ans[0].size())
			continue;

		if (ans[nx][ny] == FreeCell)
		{
			ans[nx][ny] = c;
			x = nx;
			y = ny;
			return;
		}
	}

	LOCAL_ASSERT(false);
}


void Fill(int32_t& x, int32_t& y, const string8_t& s, vector_string8_t& ans)
{
	for (size_t i = 0; i < s.size(); i++)
	{
		Put(x, y, s[i], ans);
	}
}

bool TryGetAns(const string8_t& s, vector_string8_t& ans)
{
	const char mainLetter = GetMainLetter(s);
	size_t pos1 = s.size();
	size_t pos2 = s.size();
	const size_t mainDistance = GetMainDistance(s, mainLetter, pos1, pos2);

	if (mainDistance <= 1)
		return false;

	ans.resize(2);
	ans[0] = string8_t(13, FreeCell);
	ans[1] = string8_t(13, FreeCell);

	const string8_t beginPart = s.substr(0, pos1);
	const string8_t internalPart = s.substr(pos1 + 1, mainDistance - 1);
	const string8_t endPart = s.substr(pos2 + 1);

	const int32_t x0 = 1;
	const int32_t y0 = (mainDistance + 1) / 2 - 1;

	{
		int32_t x = x0;
		int32_t y = y0;
		Fill(x, y, internalPart, ans);
	}
	{
		int32_t x = x0;
		int32_t y = y0;
		Fill(x, y, endPart, ans);
		Fill(x, y, beginPart, ans);
	}

	LOCAL_ASSERT(ans[x0][y0] == FreeCell);
	ans[x0][y0] = mainLetter;

	return true;
}

#if LOCAL_TEST
bool IsOk(const string8_t& s, const vector_string8_t& ans, const int32_t x0, const int32_t y0)
{
	const int32_t dx[] = {-1, -1, -1,  0,   0, +1, +1, +1};
	const int32_t dy[] = {-1,  0, +1, -1,  +1, -1,  0, +1};

	int32_t x = x0;
	int32_t y = y0;
	LOCAL_ASSERT(ans[x][y] == s[0]);

	for (size_t i = 1; i < s.size(); i++)
	{
		bool isFound = false;
		for (size_t j = 0; j < 8; j++)
		{
			int32_t nx = x + dx[j];
			int32_t ny = y + dy[j];
			if (nx < 0 || nx >= (int32_t)ans.size())
				continue;
			if (ny < 0 || ny >= (int32_t)ans[0].size())
				continue;

			if (ans[nx][ny] != s[i])
				continue;

			isFound = true;
			x = nx;
			y = ny;
			break;
		}

		if (!isFound)
			return false;
	}
	
	return true;
}

bool IsOk(const string8_t& s, const vector_string8_t& ans)
{
	LOCAL_ASSERT(ans.size() == 2);
	LOCAL_ASSERT(ans[0].size() == 13);
	LOCAL_ASSERT(ans[1].size() == 13);
	for (int32_t x0 = 0; x0 < ans.size(); x0++)
	{
		for (int32_t y0 = 0; y0 < ans[x0].size(); y0++)
		{
			if (ans[x0][y0] == s[0])
			{
				if (IsOk(s, ans, x0, y0))
					return true;
			}
		}
	}
	
	return false;
}
#endif

bool Solve(std::istream& ist, std::ostream& ost, const bool multipleTestMode)
{
	StopWatch<1> sw; (void)sw;

	// 
	string8_t s;
	ist >> s;

	if (multipleTestMode && !ist)
		return false;

	//
	LOCAL_PRINT() << std::endl << "Next test" << std::endl;

	vector_string8_t ans;
	if (TryGetAns(s, ans))
	{
		LOCAL_ASSERT(ans.size() == 2);
		LOCAL_ASSERT(ans[0].size() == 13);
		LOCAL_ASSERT(ans[1].size() == 13);
		ost << ans[0] << std::endl;
		ost << ans[1] << std::endl;
		LOCAL_ASSERT(IsOk(s, ans));
		return multipleTestMode;
	}
	else
	{
		ost << "Impossible" << std::endl;
	}

	return multipleTestMode;
}


#if LOCAL_TEST
void Test()
{
	using namespace library::random;
	const auto genVector = GenFactory::CreateGenVector(GenRange<size_t>(2, 10), GenRange<int32_t>(-100, +200));

	for (size_t t = 0; t < 10; t++)
	{
		const vector_int32_t data = genVector();
		// size_t ans = GetAns(data);
	}

	const char Main = 'A';
	const string8_t Base = "BCDEFGHIJKLMNOPQRSTUVWXYZ";
	for (size_t i = 0; i <= Base.size(); i++)
	{
		for (size_t j = i; j <= Base.size(); j++)
		{
			string8_t p1 = Base.substr(0, i);
			string8_t p2 = Base.substr(i, j - i);
			string8_t p3 = j < Base.size() ? Base.substr(j) : "";

			string8_t s = p1 + Main + p2 + Main + p3;

			vector_string8_t ans;
			if (TryGetAns(s, ans))
			{
				LOCAL_ASSERT(IsOk(s, ans));
			}
			else
			{
				LOCAL_ASSERT(p2 == "");
			}
		}
	}
}
#endif

int main(int argc, const char *argv[])
{
#if LOCAL_TEST
	Test();
#endif

    std::ios_base::sync_with_stdio(false);
    std::istream* ist = &std::cin;
    std::ostream* ost = &std::cout;
    
    std::unique_ptr<std::istream> fileInput;
    
    if (argc > 1)
    {
        fileInput.reset(new std::ifstream(argv[1]));
        if (!(*fileInput))
        {
            std::cout << "File not found: " << argv[1] << std::endl;
        }
        ist = fileInput.get();
    }    
    
#if defined(ONLINE_JUDGE)
    Solve(*ist, *ost, false);
#else
    while(Solve(*ist, *ost, true)) {};
#endif
}
