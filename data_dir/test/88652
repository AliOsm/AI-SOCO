#include<bits/stdc++.h>
using namespace std;

#define all(x) begin(x), end(x)
#define sz(x) (ll)(x).size()

using ll = int;
using ld = long double;
constexpr ll inf = 0x3FFFFFFF;


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    ll n, m;
    cin >> n >> m;
    vector<string> in(n);
    for (ll i = 0; i < n; i++) cin >> in[i];

    vector<vector<ll>> dist(n+4, vector<ll>(m+4));
    for (ll i = 2; i < n+2; i++) {
        for (ll j = 2; j < m+2; j++) {
            if (in[i-2][j-2] == 'X') dist[i][j] = -1;
        }
    }
    queue<pair<ll, ll>> q;
    for (ll i = 1; i < n+3; i++) {
        for (ll j = 1; j < m+3; j++) {
            if (dist[i][j] == 0) q.push({i, j});
        }
    }
    while (!q.empty()) {
        ll i = q.front().first;
        ll j = q.front().second;
        q.pop();
        for (ll di = -1; di <= 1; di++) {
            for (ll dj = -1; dj <= 1; dj++) {
                if (dist[i+di][j+dj] < 0) {
                    dist[i+di][j+dj] = dist[i][j] + 1;
                    q.push({i+di, j+dj});
                }
            }
        }
    }

    vector<vector<pair<ll, ll>>> todo(1000007);
    for (ll i = 1; i < n+3; i++) {
        for (ll j = 1; j < m+3; j++) {
            todo[dist[i][j]].push_back({i, j});
        }
    }
    auto gen = [&](ll l){
        vector<string> res(n, string(m, '.'));
        vector<vector<ll>> tmp(n+4, vector<ll>(m+4));
        for (;l < sz(todo); l++) {
            for (auto e : todo[l]) {
                q.push(e);
                tmp[e.first][e.second] = dist[e.first][e.second];
            }
        }
        while (!q.empty()) {
            ll i = q.front().first;
            ll j = q.front().second;
            q.pop();
            if (tmp[i][j] >= 1) res[i-2][j-2] = 'X';
            if (tmp[i][j] <= 1) continue;
            for (ll di = -1; di <= 1; di++) {
                for (ll dj = -1; dj <= 1; dj++) {
                    if (tmp[i+di][j+dj] == 0) {
                        tmp[i+di][j+dj] = tmp[i][j] - 1;
                        q.push({i+di, j+dj});
                    }
                }
            }
        }
        return res;
    };
    ll l = 1;
    ll r = 1000007;
    while (l + 1 < r) {
        ll mid = (l + r) / 2;
        if (gen(mid) == in) {
            l = mid;
        } else {
            r = mid;
        }
    }
    cout << l-1 << endl;
    for (ll i = 2; i < n+2; i++) {
        for (ll j = 2; j < m+2; j++) {
            cout << (dist[i][j] < l ? '.' : 'X');
        }
        cout << "\n";
    }
}
