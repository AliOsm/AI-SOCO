#include <bits/stdc++.h>
#define int long long
#define fs first
#define sc second
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define mp make_pair
#define len(v) ((int)v.size())
#define vc vector
#define pr pair
#define all(v) v.begin(), v.end()
using namespace std;
template<typename T, typename U>
inline ostream &operator<<(ostream &_out, const pair<T, U> &_p) {
    _out << _p.first << ' ' << _p.second;
    return _out;
}
template<typename T, typename U>
inline istream &operator>>(istream &_in, pair<T, U> &_p) {
    _in >> _p.first >> _p.second;
    return _in;
}
template<typename T>
inline ostream &operator<<(ostream &_out, const vector<T> &_v) {
    if (_v.empty()) { return _out; }
    _out << _v.front();
    for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; }
    return _out;
}
template<typename T>
inline istream &operator>>(istream &_in, vector<T> &_v) {
    for (auto &_i : _v) { _in >> _i; }
    return _in;
}
const int MAXN = 1e5;
const int INF = 1e9;
const int MOD = 1e9 + 7;
class Hideandseek {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n, k;
        in >> n >> k;
        vc<int> x(k);
        in >> x;
        vc<int> firsts(n + 1, k), lasts(n + 1, -1);
        for (int i = 1; i <= k; i++) {
            lasts[x[i - 1]] = i;
        }
        for (int i = k; i >= 1; i--) {
            firsts[x[i - 1]] = i;
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = max(i - 1, 1ll); j <= min(n, i + 1); j++)
                if (j == i) {
                    if (lasts[i] == -1)
                        ans++;
                } else {
                    ans += (firsts[j] - lasts[i]) >= 0;
                }
        }
        out << ans;
    }
};
main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    Hideandseek solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}