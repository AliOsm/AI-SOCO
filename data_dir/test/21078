//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef cc_hash_table<int,int,hash<int>> ht;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e8 + 7;
const int MAXN = 1e6 + 5;
const double eps = 1e-9;
int c[MAXN];
int vis[MAXN][3];
char str[10];
map<string,int> m;

int _min(int a1, int a2, int a3, int a4, int a5) {
    int ret = min(a1, a2);
    ret = min(ret, min(a3, a4));
    return min(ret, a5);
}

int main()
{
    int n;
    ni(n);
    m["A"] = INF;
    m["B"] = INF;
    m["C"] = INF;
    m["AB"] = INF;
    m["BC"] = INF;
    m["AC"] = INF;
    m["ABC"] = INF;
    for (int i = 0; i < n; i++) {
        ni(c[i]);
        scanf("%s", str);
        int mi = strlen(str);
        sort(str, str + mi);
        if (mi == 1) {
            if (strcmp(str, "A") == 0)
                m["A"] = min(c[i], m["A"]);
            else if (strcmp(str, "B") == 0)
                m["B"] = min(c[i], m["B"]);
            else if (strcmp(str, "C") == 0)
                m["C"] = min(c[i], m["C"]);
        } else if (mi == 2) {
            if (strcmp(str, "AB") == 0) {
                m["AB"] = min(c[i], m["AB"]);
                m["A"] = min(c[i], m["A"]);
                m["B"] = min(c[i], m["B"]);
            } else if (strcmp(str, "AC") == 0) {
                m["AC"] = min(c[i], m["AC"]);
                m["A"] = min(c[i], m["A"]);
                m["C"] = min(c[i], m["C"]);
            } else if (strcmp(str, "BC") == 0) {
                m["BC"] = min(c[i], m["BC"]);
                m["C"] = min(c[i], m["C"]);
                m["B"] = min(c[i], m["B"]);
            }
        } else {
            m["ABC"] = min(c[i], m["ABC"]);
            m["A"] = min(c[i], m["A"]);
            m["B"] = min(c[i], m["B"]);
            m["C"] = min(c[i], m["C"]);
        }
    }
    int ans = _min(m["A"] + m["B"] + m["C"], m["A"] + m["BC"], m["AC"] + m["B"], m["AB"] + m["C"], m["ABC"]);
    if (ans >= INF)
        ans = -1;
    pri(ans);
    return 0;
}
