// In the name of god
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iomanip>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <bitset>
#define sqr(a) ((a)*(a))
#define all(a) (a).begin(), (a).end()
using namespace std;
 
template <typename T>
T next_int() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if(ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return p * x;
}
 
string next_token() {
    char ch;
    string ans = "";
    do { ch = getchar(); } while(ch <= ' ');
    while(ch > ' ') {
        ans += ch;
        ch = getchar();
    }
    return ans;
}
 
const long long INF = (long long)1e18;
const int INFINT = (int)1e9 + 227 + 1;
const int MAXN = (int)1e6 + 227 + 1;    
const int MOD = (int)1e9 + 7;
const long double EPS = 1e-9;

long long bin_pow(long long a, long long b) {
    if(!b) return 1;
    long long ans = bin_pow(a, b / 2);
    ans = ans * ans % MOD;
    if(b % 2) ans = ans * a % MOD;
    return ans;
}

struct fenwik {
    vector<long long> f;

    fenwik(int len) {
        f.resize(len + 227 + 1, 0);
    }

    void inc_s(int p, long long c) {
        for(int i = p; i < f.size(); i += (i & (-i)))
            f[i] += c;
    }

    void inc(int p, long long c) {
        inc_s(1, c);
        inc_s(p + 1, -c);
    }

    long long get(int p) {
        long long ans = 0;
        for(int i = p; i > 0; i -= (i & (-i)))
            ans += f[i];
    
        return ans;
    }
} ;


int main() {
    // freopen(".in", "r", stdin);

    string a = next_token();

    int n = a.size();

    fenwik f(n), s(n);

    int m; cin >> m;
    vector<vector<pair<int, int> > > b(n);
    vector<int> ans(m);
    for(int i = 0; i < m; i++) {
        int l = next_int<int>() - 1;
        int r = next_int<int>() - 1;

        b[r].push_back(make_pair(l, i));
    }

    for(int i = 0; i < a.size(); i++) {
        if(a[i] == '(') {
            f.inc(i + 1, 1);
        } else {
            int l = 1; 
            int r = i + 1;
            while(r - l > 1) {
                int c = (l + r) / 2;
                if(f.get(c) > 0)
                    l = c;
                else
                    r = c;
            }

            int pe = -1;
            if(f.get(r) > 0)
                pe = r;
            else
            if(f.get(l) > 0)
                pe = l;

            if(pe != -1) {
                s.inc(pe, 1);
                f.inc(pe, -1);
            }
        }   

        for(int j = 0; j < b[i].size(); j++) {
            ans[b[i][j].second] = s.get(b[i][j].first + 1) * 2;
        }
    }

    for(int i = 0; i < m; i++)
        cout << ans[i] << "\n";
}
