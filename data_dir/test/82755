#include <bits/stdc++.h>

typedef long long ll;
using namespace std;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = a; i <= b; i++)
#define fd(i,a,b) for(int i = a; i >= b; i--)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) (int) x.size()
#define vii vector<pair<int,int>>

struct Query
{
    int l,r,id;
    Query(int _l, int _r, int _id) : l(_l), r(_r), id(_id) {};
    friend bool operator < (Query q1, Query q2)
    {
        if(q1.l / 300 != q2.l / 300) return q1.l/300 < q2.l/300;
        else if((q1.l/300) & 1) return q1.r > q2.r;
        else return q1.r < q2.r;
    }
};

int A[100005], Ans[100005], N, Q;
unordered_map<int,int> Cnt;
vector<Query> Queries;

int main()
{
    scanf("%d %d", &N, &Q);
    f(i,1,N) scanf("%d", &A[i]);
    f(i,1,Q)
    {
        int l,r;
        scanf("%d %d", &l, &r);
        Queries.pb(Query(l,r,i));
    }

    sort(all(Queries));

    int ans = 0, l = 1, r = 0;

    for(Query q : Queries)
    {
        while(r < q.r)
        {
            r++;
            Cnt[A[r]]++;
            if(Cnt[A[r]] == A[r]) ans++;
            if(Cnt[A[r]] == A[r]+1) ans--;
        }
        while(l < q.l)
        {
            Cnt[A[l]]--;
            if(Cnt[A[l]] == A[l]-1) ans--;
            if(Cnt[A[l]] == A[l]) ans++;
            l++;
        }
        while(r > q.r)
        {
            Cnt[A[r]]--;
            if(Cnt[A[r]] == A[r]-1) ans--;
            if(Cnt[A[r]] == A[r]) ans++;
            r--;
        }
        while(l > q.l)
        {
            l--;
            Cnt[A[l]]++;
            if(Cnt[A[l]] == A[l]) ans++;
            if(Cnt[A[l]] == A[l]+1) ans--;
        }

        Ans[q.id] = ans;
    }

    f(i,1,Q) printf("%d\n", Ans[i]);
}
