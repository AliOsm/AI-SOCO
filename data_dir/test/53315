#define _USE_MATH_DEFINES 
#define _CRT_SECURE_NO_DEPRECATE 
#include <iostream> 
#include <cstdio> 
#include <cstdlib> 
#include <vector> 
#include <sstream> 
#include <string> 
#include <map> 
#include <set> 
#include <algorithm> 
#include <cmath> 
#include <cstring> 
#include <queue>
#include <time.h>
using namespace std; 
#define mp make_pair 
#define pb push_back 
#define all(C) (C).begin(), (C).end() 
#define sz(C) (int)(C).size() 
#define PRIME 123 
#define PRIME1 31415 
typedef long long int64; 
typedef unsigned long long uint64; 
typedef pair<int, int> pii; 
typedef vector<int> vi; 
typedef vector<vector<int> > vvi; 
//------------------------------------------------------------ 
#define y1 asdf
#define y2 asdqwer
const int N = 5010; 
int n, m;
int64 mod = 1e9 + 7;
vector < vector < int > > gr, gr1;
int IsEnd[N], stri[N];
int z2[N][N][2], z1[N][N][2];

int dfs(int u, int p = 0)
{
    int flag = 1;
    //cerr << u << ' ' << p << endl;
    for(int i = 0; i < gr[u].size(); ++i)
    {
        int to = gr[u][i];
        if (to == p)
            continue;
        gr1[u].push_back(to);
        flag = 0;
        stri[u] += dfs(to, u);
    }
    IsEnd[u] = flag;
    if (flag)
        stri[u] = 1;
    return stri[u];
}
int fun(int u, int cnt, int col);

int fun1(int u, int par, int id, int cnt, int col)
{
    if (id == gr[par].size())
    {
        if (cnt <= stri[u])
            return min(fun(u, cnt, col), fun(u, cnt, col ^ 1) + 1);
        return 1000000000;
    }
    if (z2[u][cnt][col] != -1)
        return z2[u][cnt][col];
    int ans = 1e9;
    for(int j = 0; j <= min(cnt, stri[u]); ++j)
    {
        for(int k = 0; k < 2; ++k)
        {
            int t = fun(u, j, k) + fun1(gr[par][id], par, id + 1, cnt - j, col) + (k != col);
            //cerr << fun(u, j, k) << ' ' << fun1(gr[par][id], par, id + 1, cnt - j, col);
            ans = min(ans, t); 
        }
    }
    return z2[u][cnt][col] = ans;
}


int fun(int u, int cnt, int col)
{
    if (IsEnd[u])
    {
        if (cnt == 1 && col == 0)
            return 0;
        if (cnt == 0 && col == 1)
            return 0;
        return 1000000000;
    }
    if (z1[u][cnt][col] != -1)
        return z1[u][cnt][col];
    
    return z1[u][cnt][col] = fun1(gr[u][0], u, 1, cnt, col);
}

void solve()
{
    cin >> n;
    gr.resize(n + 1);
    gr1.resize(n + 1);
    for(int i = 0; i < n - 1; ++i)
    {
        int a, b;
        cin >> a >> b;
        gr[a].push_back(b);
        gr[b].push_back(a);
    }
    if (n == 2)
    {
        cout << 1 << endl;
        return;
    }
    int root = 0;
    for(int i = 0; i < n; ++i)
        if (gr[i].size() != 1)
            root = i;
    memset(z1, -1, sizeof z1);
    memset(z2, -1, sizeof z2);
    dfs(root);
    gr = gr1;
    cout << min(fun(root, stri[root] / 2, 0), fun(root, stri[root] / 2, 1)); 
}

int main()
{
    ios_base::sync_with_stdio(false);cin.tie(0);
    #ifdef WIN32
        freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    #endif  
    solve();
    return 0;
} 