#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>
 
using namespace std;
using namespace __gnu_pbds;
 
#define endl '\n'
 
typedef long long ll;
typedef pair<ll, ll> pii;
typedef tree<int, null_type,less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
 
template<typename T>
static T randint(T lo, T hi){
	return uniform_int_distribution<T>(lo, hi)(rng);
}

 
int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
 
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
 		
 	vector<ll> x = {500, 1000, 1500, 2000, 2500};
 	vector<ll> m(5), w(5);

 	ll h1, h2;

 	for(int i = 0; i < 5; i++)
 		cin >> m[i];
 	for(int i = 0; i < 5; i++)
 		cin >> w[i];
 	cin >> h1 >> h2;

 	ll ans = 100 * h1 - 50 * h2;

 	for(int i = 0; i < 5; i++){
 		ll s1 = 3 * x[i] / 10;
 		ll s2 = (250 - m[i]) * x[i] / 250 - 50 * w[i];
 		// cout << s1 << " " << s2 << endl;
 		ans += max(s1, s2);
 	}

 	cout << ans << endl;
 
	return 0;
}