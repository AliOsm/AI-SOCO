#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <fstream>
#include <map>
#include <stack>
#include <stdio.h>
#include <algorithm>
#include <sstream>
#include <unordered_map>
#include <cmath>
#include <queue>
#include <time.h>

using namespace std;
#define ll long long
const ll MOD = 10009;
#define mp(a, b) make_pair(a, b)
#define PI 3.1415926535897
#define PPI 6.28318530718
#define EPS 0.0001
#define pii pair<ll, ll>
#define INF 2000000009ll
#define null NULL


#define E 2.71828182846 
#define DEBUG 41

#ifndef DEBUG

ifstream in("tree.in");
ofstream out("tree12.txt");
#define cin in
#define cout out

#endif

pii a[654321];
int mapka[654321];
set<int> setka;
int n, q;

int getL(int i, int len)
{
    int rr = i;
    int r = i;
    int l = 1;

    if(a[r].first - a[l].first <= len)
        return 1;
    if(a[r].first - a[r-1].first > len)
        return r;
    while(r - l > 1)
    {
        int m = (r+l) / 2;
        if(a[rr].first - a[m].first > len)
            l = m;
        else
            r = m;
    }
    if(a[rr].first - a[l].first <= len)
        return l;
    return r;

}
int getR(int i, int len)
{
    if(a[i+1].first - a[i].first > len)
        return i;
    if(a[n].first - a[i].first <= len)
        return n;
    int r = n;
    int l = i;
    while(r - l > 1)
    {
        int m = (r+l) / 2;
        if(a[m].first - a[i].first > len)
            r = m;
        else
            l = m;
    }
    if(a[r].first - a[i].first <= len)
        return r;
    return l;
}

int main() 
{
    cin >> n >> q;
    for(int i = 1; i <= n; ++i)
    {
        cin >> a[i].first;
        a[i].second = i;
    }
    sort(a+1, a + n+1);
    a[0] = mp(-INF, 0);
    a[n+1] = mp(INF, n+1);
    for(int i = 0; i <= n+1; ++i)
        mapka[a[i].second] = i;
    
    for(int i = 0; i < q; ++i)
    {
        int x, l;
        cin >> x >> l;
        x = mapka[x];
        if(n == 1)
        {
            cout << "1\n";
            continue;
        }
        bool r = 1;
        while(true)
        {
            if(a[x].first - a[x-1].first > l && a[x+1].first - a[x].first > l)
            {
                cout << a[x].second << "\n";
                break;
            }

            if(r)
            {
                if(x == n)
                {
                    r = 0;
                    continue;
                }
                
                int nextX = getR(x, l);
                if(nextX == x)
                {
                    r = 0;
                    continue;
                }

                int nextnextX = getL(nextX, l - abs(a[x].first - a[nextX].first));
                if(nextnextX == x)
                {
                    l %= 2*abs(a[x].first - a[nextX].first);
                    continue;
                }
                else
                {
                    l -= abs(a[x].first - a[nextX].first) + abs(a[nextnextX].first - a[nextX].first);
                    x = nextnextX;
                }

            }
            else
            {
                if(x == 1)
                {
                    r = 1;
                    continue;
                }

                int nextX = getL(x, l);
                if(nextX == x)
                {
                    r = 1;
                    continue;
                }

                int nextnextX = getR(nextX, l - abs(a[x].first - a[nextX].first));
                if(nextnextX == x)
                {
                    l %= 2*abs(a[x].first - a[nextX].first);
                    continue;
                }
                else
                {
                    l -= abs(a[x].first - a[nextX].first) + abs(a[nextnextX].first - a[nextX].first);
                    x = nextnextX;
                }
            }
        }
    }


    return 0;
}
