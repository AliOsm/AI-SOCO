// #pragma GCC optimize("O3")
#include <bits/stdc++.h>
using namespace std;
#define ff first
#define ss second
using ll = long long;
using ld = long double;
const char nl = '\n';
/*----------------------------------------------------------------------------*/
#include <bits/extc++.h>
namespace pbds = __gnu_pbds;
template <typename key, typename val = pbds::null_type,
          typename comp = less<key>>
using ostree = pbds::tree<key, val, comp, pbds::rb_tree_tag,
                          pbds::tree_order_statistics_node_update>;
using vi = vector<int>;
using vll = vector<ll>;
#define all(x) std::begin(x), std::end(x)
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
template <typename... Args, template <typename...> typename T>
string to_string(T<Args...> const &);
string to_string(string const &s) { return '"' + s + '"'; }
string to_string(char const &c) { return to_string(string(1, c)); }
string to_string(char const *c) { return to_string(string(c)); }
string to_string(bool const &b) { return (b ? "T" : "F"); }
template <typename... Args> string to_string(pair<Args...> const &p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
template <typename... Args, template <typename...> typename T>
string to_string(T<Args...> const &S) {
  string s = "{";
  for (auto const &e : S)
    s += " " + to_string(e);
  s += " }";
  return s;
}
template <typename Tail> void debug_out(Tail t) {
  cerr << " " << to_string(t) << " ]" << endl;
}
template <typename Head, typename... Tail> void debug_out(Head h, Tail... t) {
  cerr << " " << to_string(h) << ",";
  debug_out(t...);
}
#define pr(...) cerr << "[" << (#__VA_ARGS__) << "] : [", debug_out(__VA_ARGS__)
template <typename T> void dbr(T lb, T ub) {
  cerr << '{';
  for (auto it = lb; it != ub; it++)
    cerr << ' ' << to_string(*it);
  cerr << " }" << endl;
}
template <typename T, typename Comp = less<T>>
bool smin(T &mem, T const &v, Comp const &cmp = Comp()) {
  return cmp(v, mem) ? mem = v, true : false;
}
template <typename T, typename Comp = less<T>>
bool smax(T &mem, T const &v, Comp const &cmp = Comp()) {
  return cmp(mem, v) ? mem = v, true : false;
}
/*----------------------------------------------------------------------------*/



int main() {
  ios::sync_with_stdio(0); cin.tie(0);

  int n; cin >> n;
  int a[1+n], rev[1+n], mark[1+n];
  memset(a, 0, sizeof a);
  memset(rev, 0, sizeof rev);
  for(int i=1; i<=n; i++) {
    cin >> a[i];
    rev[a[i]] = i;
  }
  memset(mark, -1, sizeof mark);

  vector< pair<int, int> > v;

  for(int i=1; i<=n; i++) {
    if( mark[i] != -1 ) continue;
    int j = i;
    bool cyc = false;
    for(; a[j] != 0; j = a[j]) {
      if( mark[j] ) {
	cyc = true;
	break;
      }
      mark[j] = 1;
    }
    if( cyc ) continue;

    int k = j;
    for(; rev[k] != 0; k = rev[k]){
      // pr(k, rev[k]);
      mark[k] = 1;
    }
    // pr(i, j, k);
    // dbr(mark, mark+1+n);
    mark[k] = 1;
    v.emplace_back(k, j);
  }

  for(int i=0; i<(int)v.size(); i++) {
    int j = i + 1; if( j == (int)v.size() ) j = 0;
    a[ v[i].ss ] = v[j].ff;
  }

  for(int i=1; i<=n; i++) cout << a[i] << " \n"[i==n];

}
