#include <iostream>

#include <algorithm>

using namespace std;

#define HIGHESTSETBIT(mask) ( sizeof(int)*8-1-__builtin_clz((mask)) )

#define MAXN 100004

int N;
int S[MAXN];

int f(int hbit) {
   int res = 0;
   for (int i = 0; i < N; ) {
      // find first integer with hbit ON
      for (; i < N && 0 == (S[i] & (1<<hbit)); ++i);
   // cerr << "i = " << i << endl;
      // find next with hbit OFF
      int j = i;
      for (; j < N && 0 != (S[j] & (1<<hbit)); ++j);
      if (j >= N) break;
      --j;
   // cerr << "j = " << j << endl;
      int k = j+1, mx = 0;
      for (; k < N && 0 == (S[k] & (1<<hbit)); ++k) {
         mx = max(mx, S[k]);
         res = max(res, mx ^ S[j]);
      }
      i = k-1;
   }
   return res;
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(NULL);

   cin >> N;
   for (int i = 0; i < N; ++i)
      cin >> S[i];

   int res = 0;
   for (int i = 1; i < N; ++i)
      res = max(res, S[i] ^ S[i-1]);

   int hbit = 30;
   for (; hbit >= 0; --hbit) {
      bool eq = true;
      int t = (S[0] >> hbit) & 1;
      for (int i = 0; i < N; ++i)
         if (((S[i] >> hbit) & 1) != t) {
            eq = false;
            break;
         }
      if (!eq) break;
   }
// cerr << hbit << endl;

   res = max(res, f(hbit));

   reverse(S, S+N);

   res = max(res, f(hbit));

   cout << res << endl;

   return 0;
}
