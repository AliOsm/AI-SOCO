#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define eb emplace_back
#define mt make_tuple
#define emp emplace

using namespace std;
using ll = long long;
using ii = pair<int, int>;

const int N = 100010;
int ufds[N];
int n, m;
vector<tuple<int, int, int, int> > ve;
vector<ii> g[N];

int find(int x)
{
	if (x == ufds[x])
		return x;
	return ufds[x] = find(ufds[x]);
}

void unio(int x, int y)
{
	ufds[find(x)] = find(y);
}

const int LOGN = 18;
int p[N][LOGN], mi[N][LOGN];
int depth[N];

void dfs(int u, int last, int d)
{
	depth[u] = d;
	for (ii edg : g[u])
	{
		int v = edg.fi, w = edg.se;
		if (v == last) continue;
		p[v][0] = u;
		mi[v][0] = w;
		dfs(v, u, d+1);
	}
}

const int M = 1000010;
int ans[M];

int query(int a, int b)
{
	int ret = 0;
	if (depth[a] != depth[b])
	{
		if (depth[a] > depth[b])
			swap(a, b);
		int diff = depth[b] - depth[a];
		for (int i = 0; diff >> i; i++)
		{
			if ((diff >> i)&1)	
			{
				ret = max(ret, mi[b][i]);
				b = p[b][i];
			}
		}
	}
	if (a == b)
		return ret;
	for (int i = LOGN-1; i >= 0; i--)
	{
		if (p[a][i] != p[b][i])
		{
			ret = max({ret, mi[a][i], mi[b][i]});
			a = p[a][i];
			b = p[b][i];
		}
	}
	ret = max({ret, mi[a][0], mi[b][0]});
	return ret;
}

int main()
{
	scanf("%d %d", &n, &m);
	
	if (m == n-1) return 0;

	for (int i = 0; i < m; i++)
	{
		int u, v, w;
		scanf("%d %d %d", &u, &v, &w);
		ve.eb(w, u, v, i);
	}

	sort(ve.begin(), ve.end());
	iota(ufds+1, ufds+n+1, 1);
	
	for (int i = 0; i < ve.size(); i++)
	{
		int u, v, w, id;
		tie(w, u, v, id) = ve[i];
		if (find(u) != find(v))
		{
			unio(u, v);
			g[u].eb(v, w);
			g[v].eb(u, w);
			ans[id] = -1;
		}
	}

	dfs(1, 0, 0);
	for (int i = 1; i < LOGN; i++)
	{
		for (int u = 1; u <= n; u++)
		{
			p[u][i] = p[p[u][i-1]][i-1];
			mi[u][i] = max(mi[u][i-1], mi[p[u][i-1]][i-1]);
		}
	}

	for (int i = 0; i < m; i++)
	{
		int u, v, w, id;
		tie(w, u, v, id) = ve[i];
		if (ans[id] == -1) continue;
		ans[id] = query(u, v);
	}
	bool first = true;
	for (int i = 0; i < m; i++)
	{
		if (ans[i] != -1)
		{
			if (first) first = false;
			else printf(" ");
			printf("%d", ans[i]);
		}
	}
	printf("\n");
	return 0;
}


