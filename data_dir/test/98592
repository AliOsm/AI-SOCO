#include <bits/stdc++.h>

using namespace std;

#define ok printf("ok\n");
#define pf printf
#define sc scanf
#define br printf("\n")

#define scs(a) scanf("%s",a)
#define sc1(a) scanf("%d",&a)
#define sc2(a,b) scanf("%d %d",&a,&b)
#define sc3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define sc1l(a) scanf("%lld",&a)
#define sc2l(a,b) scanf("%lld %lld",&a,&b)
#define sc3l(a,b,c) scanf("%lld %lld %lld",&a,&b,&c)
#define sc1d(a) scanf("%lf",&a)
#define sc2d(a,b) scanf("%lf %lf",&a,&b)
#define sc3d(a,b,c) scanf("%lf %lf %lf",&a,&b,&c)
#define pfs(a) printf("%s",a)
#define pf1(a) printf("%d",a)
#define pf2(a,b) printf("%d %d",a,b)
#define pf1l(a) printf("%lld",a)
#define pf2l(a,b) printf("%lld %lld",a,b)
#define pf1d(a) printf("%lf",a)
#define pf2d(a,b) printf("%lf %lf",a,b)

#define pii pair<int,int>
#define pll pair<long long,long long>
#define mp make_pair
#define F first
#define S second
#define pb push_back

#define mem0(a) memset(a,0,sizeof(a))
#define mem1(a) memset(a,-1,sizeof(a))

#define read freopen("input.txt","r",stdin)
#define write freopen("output.txt","w",stdout)

long long inline gcd(long long x,long long y){return !y?(long long)abs(x):gcd(y,x%y);}  //returns always positive gcd
long long inline lcm(long long a,long long b){return ((long long)abs((a/gcd(a,b))*b));} //returns always positive lcm
double inline cartesian_dist(double x1,double y1,double x2,double y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}

long long bigmod(long long b,long long p,long long m){              //for both positive and negative base
    if(!p)return 1%m;
    else if(p&1)return (((b%m)+m)%m*bigmod(b,p-1,m))%m;
    else {long long ret=bigmod(b,p/2,m);return (ret*ret)%m;}
}
// inverse will exist if and only if gcd(a,m) is 1
long long inverse(long long a,long long m){return bigmod(a,m-2,m);}  //if Mod is prime
long long extended(long long a,long long m){
    long long oldr=a,r=m,oldans=1,ans=0,quotient;
    while(r){
        quotient=oldr/r;
        oldr=oldr-r*quotient;
        swap(oldr,r);
        oldans=oldans-ans*quotient;
        swap(oldans,ans);
    }
    return ((oldans%m)+m)%m;
}

//int inline set_bit(int mask,int i){return mask=mask|(1<<i);}
//int inline reset_bit(int mask,int i){return mask=mask&~(1<<i);}
//bool inline check_bit(int mask,int i){return mask&(1<<i);}

typedef long long ll;
const double PI=acos(-1.0);
const double eps=10E-12;

struct node{
    int x,y,r;
    bool operator<(const node &p)const{
        return r<p.r;
    }
}arr[1000+5];

bool vis[1000+5];
vector<pair<int,double> >vec[1000+5];


double ans=0;

void build(int i,int j){
    if(sqrt((double)((ll)arr[i].x-(ll)arr[j].x)*((ll)arr[i].x-(ll)arr[j].x)+((ll)arr[i].y-(ll)arr[j].y)*((ll)arr[i].y-(ll)arr[j].y))<arr[i].r+arr[j].r){
        if(arr[i].r>arr[j].r && !vis[j]){
            vec[i].pb(mp(j,PI*(double)((ll)arr[j].r*(ll)arr[j].r)));
            vis[j]=1;
            //cout<<i<<" "<<j<<" "<<PI*(double)(arr[j].r*arr[j].r)<<endl;
        }
        else if(arr[i].r<arr[j].r && !vis[i]){
            vec[j].pb(mp(i,PI*(double)((ll)arr[i].r*(ll)arr[i].r)));
            vis[i]=1;
            //cout<<j<<" "<<i<<" "<<PI*(double)(arr[i].r*arr[i].r)<<endl;
        }
    }
}
void dfs(int u,int id,int only){

    for(int i=0;i<vec[u].size();i++){
        //cout<<u<<" "<<vec[u][i].F<<" "<<id<<" "<<only<<" "<<vec[u][i].S<<endl;
        if(id || only==1)ans+=vec[u][i].S;
        else ans-=vec[u][i].S;
        //if()ans+=vec[u][i].S;
        dfs(vec[u][i].F,id^1,only+1);
    }
}
int main(){
    int n;
    sc1(n);
    for(int i=1;i<=n;i++)sc3(arr[i].x,arr[i].y,arr[i].r);
    sort(arr+1,arr+n+1);
    //for(int i=1;i<=n;i++)printf("%d %d %d\n",arr[i].x,arr[i].y,arr[i].r);
    for(int i=2;i<=n;i++){
        for(int j=1;j<i;j++){
            build(i,j);
        }
    }
    /*for(int i=1;i<=n;i++){
        for(int j=0;j<vec[i].size();j++)printf("%d %d\n",i,vec[i][j].F);
    }*/
    for(int i=1;i<=n;i++){
        if(!vis[i]){
            //cout<<i<<endl;
            //cout<<arr[i][0]<<" "<<arr[i][1]<<" "<<arr[i][2]<<endl;
            ans+=PI*(double)((ll)arr[i].r*(ll)arr[i].r);
            dfs(i,1,1);
        }
    }
    printf("%.10lf\n",ans);
    //cout<<ans<<endl;

    return 0;
}
