#include <bits/stdc++.h>
#define int long long
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
#define sz(a) (int)a.size()

using namespace std;

const int N = 1500;
int dp[4][N][N];
int a[N][N];
int n, m, q;

void query(int x, int y) {
        a[x][y] ^= 1;
        for (int i = 1; i <= n; ++i) {
                if (a[i][y] == 0) {
                        dp[0][i][y] = 0;
                }
                else {
                        dp[0][i][y] = dp[0][i - 1][y] + 1;
                }
        }
        for (int i = n; i >= 1; --i) {
                if (a[i][y] == 0) {
                        dp[1][i][y] = 0;
                }
                else {
                        dp[1][i][y] = dp[1][i + 1][y] + 1;
                }
        }
        for (int j = 1; j <= m; ++j) {
                if (a[x][j] == 0) {
                        dp[2][x][j] = 0;
                }
                else {
                        dp[2][x][j] = dp[2][x][j - 1] + 1;
                }
        }
        for (int j = m; j >= 1; --j) {
                if (a[x][j] == 0) {
                        dp[3][x][j] = 0;
                }
                else {
                        dp[3][x][j] = dp[3][x][j + 1] + 1;
                }
        }
}

int get(vector<int> &a, int pos) {
        int ret = 0, mn = 1e18;
        int ptr = pos - 1;
        for (int i = pos; i < a.size(); ++i) {
                mn = min(mn, a[i]);
                while (ptr > -1 && a[ptr] >= mn) {
                        ptr--;
                }
                ret = max(ret, mn * (i - ptr));
        }
        mn = 1e18, ptr = pos;
        for (int i = pos - 1; i > -1; --i) {
                mn = min(mn, a[i]);
                while (ptr < a.size() && a[ptr] >= mn) {
                        ptr++;
                }
                if (ptr > pos) {
                        ret = max(ret, mn * (ptr - i));
                }
        }
        return ret;
}

signed main() {
#ifdef tron
        freopen("a.txt", "r", stdin);
#endif
        ios::sync_with_stdio(0);
        cin.tie(0);
        cin >> n >> m >> q;
        
        for (int i = 1; i <= n; ++i) {
                for (int j = 1; j <= m; ++j) {
                        cin >> a[i][j];
                }
                for (int j = 1; j <= m; ++j) {
                        if (a[i][j]) {
                                dp[2][i][j] = dp[2][i][j - 1] + 1;
                        }
                }
                for (int j = m; j >= 1; --j) {
                        if (a[i][j]) {
                                dp[3][i][j] = dp[3][i][j + 1] + 1;
                        }
                }
        }

        for (int j = 1; j <= m; ++j) {
                for (int i = 1; i <= n; ++i) {
                        if (a[i][j])
                                dp[0][i][j] += dp[0][i - 1][j] + 1;
                }
                for (int i = n; i >= 1; --i) {
                        if (a[i][j])
                                dp[1][i][j] += dp[1][i + 1][j] + 1;
                }
        }
        

        while (q--) {
                int op, x, y;
                cin >> op >> x >> y;
                if (op == 1) {
                        query(x, y);
                }
                else {
                        int ans = 0;
                        vector<int> now;
                        for (int j = 1; j <= m; ++j) {
                                now.push_back(dp[0][x][j]);
                        }
                        ans = max(ans, get(now, y - 1));
                        now.clear();
                        for (int j = 1; j <= m; ++j) {
                                now.push_back(dp[1][x][j]);
                        }
                        ans = max(ans, get(now, y - 1));
                        now.clear();
                        for (int i = 1; i <= n; ++i) {
                                now.push_back(dp[2][i][y]);
                        }
                        ans = max(ans, get(now, x - 1));
                        now.clear();
                        for (int i = 1; i <= n; ++i) {
                                now.push_back(dp[3][i][y]);
                        }
                        ans = max(ans, get(now, x - 1));
                        cout << ans << "\n";
                }
        }

        return 0;

}