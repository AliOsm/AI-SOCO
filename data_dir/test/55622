#include <bits/stdc++.h>

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//#pragma GCC optimize("Ofast")
//1.0 * clock() / CLOCKS_PER_SEC

#define fi first
#define se second
#define ll long long
#define dl double long

using namespace std;

const ll NN = 3e3 + 7;
const int N = 3e5 + 7;
const int M = 22;
const int mod = 1e9 + 7;
const ll inf = 1e18 + 7;
const dl rf = 1e-14;
const int B = sqrt(N);

int n;
int a[N];
int b[N];
int p[N];
int p1[N];
int sz[N];

int get( int x )
{
    return (p1[x] == x ? x : p1[x] = get(p1[x]));
}

void solve1()
{
    cin >> n;
    set < pair < int , int > > s;
    for( int i = 1; i <= n; i++ ){
        cin >> a[i];
        p[a[i]] = i;
        s.insert({1 , i});
    }
    for( int i = 1; i <= n; i++ ){
        p1[i] = i;
        sz[i] = 1;
        b[i] = 0;
    }
    p1[n + 1] = 0;
    for( int i = 1; i <= n; i++ ){
        if( (--s.end())->fi != s.begin()->fi ){
            auto x = *(--s.end());
            s.erase(--s.end());
            //cout << x.fi << " " << x.se << " " << i << " 1\n";
            int y = get( x.se + 1 );
            if( x.se != y && y != 0 && !b[y] ){
                p1[x.se] = y;
                s.erase({ sz[y] , y });
                sz[y] += sz[x.se];
                s.insert({ sz[y] , y });
            }
            b[x.se] = i;
        }else{
            int y = get( p[i] );
            int x = get( y + 1 );
            s.erase({ sz[y] , y });
            //cout << y << " " << x << " " << i << " 2\n";
            if( x != y && x != 0 && !b[x] ){
                p1[y] = x;
                s.erase({ sz[x] , x });
                sz[x] += sz[y];
                s.insert({ sz[x] , x });
            }
            b[y] = i;
        }
    }
    for( int i = 1; i <= n; i++ ){
        if( a[i] != b[i] ){
            cout << "No\n";
            return;
        }
        //cout << b[i] << " ";
    }
    //cout << "\n";
    cout << "Yes\n";
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    //freopen( "input.txt" , "r" , stdin );
    //freopen( "output.txt" , "w" , stdout );

    int cghf = 1;cin >> cghf;
    while( cghf-- ){
        solve1();
    }
}
