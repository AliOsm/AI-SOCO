using namespace std;
#include<bits/stdc++.h>
#define ll long long
#define pr pair<ll,ll>
#define pii pair<int,int>
#define fir first
#define sec second
#define mp make_pair
#define pb push_back
#define sz(c) ((int)c.size())
#define all(c) (c).begin(),(c).end()
#define fn "455C"  /// ___FILE_NAME_HERE___
#define rep(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define __rep(c,it) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();it++)

template <class T,class U,class V>
T triplemax(T x,U y,V z){return max(max(x,y),z);}
const int MAXN=3e5+5;
vector <int> adj[MAXN];
int lab[MAXN],cnt[MAXN],dist[MAXN];
bool mark[MAXN];
int n,m,q;

void addEdge(int u,int v)
{
    adj[u].pb(v);
    adj[v].pb(u);
}

int dst(int x)
{
    return (dist[x] + 1)/2;
}

int findp(int x)
{
    return lab[x]==x ? x : findp(lab[x]);
}

void join(int x,int y,int can)
{
    x=findp(x),y=findp(y);
    if(x==y)return ;
    if(cnt[x] < cnt[y])swap(x,y);
    lab[y]=x,cnt[x]+=cnt[y];
    if(!can)return ;
    dist[x]=triplemax(dst(x) + dst(y) + 1,dist[x],dist[y]);
}

pii res;
void dfs(int u,int f,int deep)
{
    for(int i=0;i<sz(adj[u]);i++)
    {
        int v=adj[u][i];
        if(v==f)continue;
        if(deep+1 > res.fir)
            res=mp(deep+1,v);
        dfs(v,u,deep+1);
    }
}

int longestPath(int u)
{
    res=mp(0,0);
    dfs(u,u,0);
    res.fir=0;
    dfs(res.sec,res.sec,0);
    return res.fir;
}

int main(void)
{
    #ifndef ONLINE_JUDGE
    freopen(fn".inp","r",stdin);
    freopen(fn".out","w",stdout);
    #endif // ONLINE_JUDGE
    scanf("%d%d%d",&n,&m,&q);
    for(int i=1;i<=n;i++)lab[i]=i,cnt[i]=1;
    for(int u,v,i=1;i<=m;i++)
    {
        scanf("%d%d",&u,&v);
        addEdge(u,v);
        join(u,v,false);
    }
    for(int i=1;i<=n;i++)
    {
        int par=findp(i);
        if(mark[par])continue;
        dist[par]=longestPath(par);
        mark[par]=true;
    }
    while(q--)
    {
        int type,u,v;
        scanf("%d%d",&type,&u);
        if(type==1)
            printf("%d\n",dist[findp(u)]);
        else
        {
            scanf("%d",&v);
            join(u,v,true);
        }
    }
}