#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define pi 3.141592653589793238
#define int long long
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

vector<vector<int> >adj;
int vis[100005][105];
int dis[100004][105];
int cnt[100005];
int ans[100005];
int col[100005];
int n,m,k,s;
void bfs()
{
   queue<pair<int,int>>qq;
   for(int i=1;i<=n;i++)
   {
      cnt[i]=1;
      qq.push({i,col[i]});
      dis[i][col[i]]=0;      
   }
   while (!qq.empty())
   {
      pair<int,int>pp=qq.front();
      qq.pop();
      for(auto i:adj[pp.first])
      {
         if(dis[i][pp.second]>dis[pp.first][pp.second]+1)
         {
            dis[i][pp.second]=dis[pp.first][pp.second]+1;
            if(cnt[i]<s)
            {
               cnt[i]++;
               ans[i]+=dis[i][pp.second];
            }
            qq.push({i,pp.second});
         }
      }
   }   
}

signed main()
{
     ios_base::sync_with_stdio(false);
     cin.tie(NULL);  
     cout.tie(0);   
 #ifndef ONLINE_JUDGE
    if(fopen("INPUT.txt","r"))
    {
    freopen ("INPUT.txt" , "r" , stdin);
    freopen ("OUTPUT.txt" , "w" , stdout);
    }
 #endif
 
// -------------------------------------Code starts here---------------------------------------------------------------------     

   cin>>n>>m>>k>>s;
   adj.resize(n+1);
   for(int i=1;i<=n;i++)
      cin>>col[i];
   
   int x,y;
   fill_n(&dis[0][0],100004*105,1e17);
   for(int i=1;i<=m;i++)
   {
      cin>>x>>y;
      adj[x].push_back(y);
      adj[y].push_back(x);
   }
   bfs();
   for(int i=1;i<=n;i++)
   {
      cout<<ans[i]<<" ";
   }

// -------------------------------------Code ends here------------------------------------------------------------------
     clock_t clk;
 	clk = clock();
 
    clk = clock() - clk;
 	cerr << fixed << setprecision(6) << "Time: " << ((double)clk)/CLOCKS_PER_SEC << "\n";
 	return 0;
 }
 