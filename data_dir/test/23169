#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int) 1.01e9;
const ld EPS = 1e-9;

const ld PI = acos(-1.0L);

void precalc() {
}

ld x, y, z;

bool read() {
  double _x, _y, _z;
  if (scanf("%lf%lf%lf", &_x, &_y, &_z) < 3) {
    return 0;
  }
  x = _x, y = _y, z = _z;
  return 1;
}

ld xs[3];
int perm[3];

int sign(ld x) {
  return x < -EPS ? -1 : x > EPS;
}
pair<int, ld> getValue(int perm[3], int type) {
  int first = 0;
  if (!type) {
    ld value = log(xs[perm[0]]);
    first = sign(value);
    if (!first) {
      return mp(0, 0);
    }
    value *= first;
    value = log(value) + log(xs[perm[1]]) * xs[perm[2]];
    return mp(first, first * value);
  } else {
    ld value = log(xs[perm[0]]) * xs[perm[1]] * xs[perm[2]];
    first = sign(value);
    if (!first) {
      return mp(0, 0);
    }
    value *= first;
    value = log(value);
    return mp(first, first * value);
  }
}

void solve() {
  xs[0] = x, xs[1] = y, xs[2] = z;
  for (int i = 0; i < 3; ++i) {
    perm[i] = i;
  }
  pair<int, ld> res(-1e9, 0);
  string ans = "NO";
  for (int iter = 0; iter < 3; ++iter) {
    perm[0] = iter;
    for (int i = 0, p = 1; i < 3; ++i) {
      if (i == iter) {
        continue;
      }
      perm[p++] = i;
    }
    for (int type = 0; type < 2; ++type) {
      for (int rot = 0; rot < 2; ++rot) {
        auto value = getValue(perm, type);
        //eprintf("(%d,%d,%d) type=%d:\n", perm[0], perm[1], perm[2], type);
        //eprintf("%d %.18f\n", value.first, (double) value.second);
        if ((res.first < value.first) || (res.first == value.first && res.second < value.second - EPS)) {
          res = value;
          ans = "";
          if (type) {
            ans += "(";
          }
          for (int i = 0; i < 3; ++i) {
            if (i) {
              ans += "^";
            }
            ans += (char) ('x' + perm[i]);
            if (type && i == 1) {
              ans += ")";
            }
          }
        }
        swap(perm[1], perm[2]);
      }
    }
  }
  printf("%s\n", ans.c_str());
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
    //break;
#ifdef DEBUG
    eprintf("Time: %.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
