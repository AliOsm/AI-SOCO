#include <bits/stdc++.h>
#define base 1000000007LL
#define ll long long
#define ld long double
#define X first
#define Y second
#define pb push_back
#define EPS 1e-9
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORE(i,a,b) for (int i = (a); i >= (b); i--)
#define FORALL(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
using namespace std;
typedef pair<int, int> II;
typedef pair<II, int> III;

double PI = acos(-1);

struct point {
    ll x, y;
    point(ll x = 0, ll y = 0) {
        this->x = x;
        this->y = y;
    }
    bool operator== (point& p) {
        return p.x == x && p.y == y;
    }
};

struct vecto {
    ll x, y;
    vecto(ll x = 0, ll y = 0) {
        this->x = x;
        this->y = y;
    }
    bool operator== (vecto& v) {
        return v.x == x && v.y == y;
    }
    bool operator< (const vecto& v) const {
        if (v.x == x) return y < v.y;
        return x < v.x;
    }
};

vecto toVec(point a, point b)
{
    return vecto(b.x - a.x, b.y - a.y);
}

ll crossProduct(vecto a, vecto b)
{
    return a.x * b.y - a.y * b.x;
}

ll dotProduct(vecto a, vecto b)
{
    return a.x * b.x + a.y * b.y;
}

ll dist(point a, point b)
{
    return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);
}

int n, pointer;
ll a[100010], b[100010], dp[100010];
vector<ll> M, C;

ll query(ll k)
{
    if (pointer >= sz(M)) pointer = sz(M) - 1;
    while (pointer < sz(M)-1 && M[pointer+1]*k + C[pointer+1] < M[pointer] * k + C[pointer]) pointer++;
    return M[pointer] * k + C[pointer];
}

bool isBad(int l1, int l2, int l3)
{
    // bad khi giao cua l1 va l3 nam ben trai giao cua l1 va l2
    // intersection(l1,l2) has x-coordinate (c1-c2)/(m2-m1)
	// intersection(l1,l3) has x-coordinate (c1-c3)/(m3-m1)
    return (ld) (C[l3] - C[l1]) / (M[l1] - M[l3]) < (ld) (C[l2] - C[l1]) / (M[l1] - M[l2]);
}

void add(ll m, ll c)
{
    M.pb(m);
    C.pb(c);
    while (sz(M) >= 3 && isBad(sz(M)-3, sz(M)-2, sz(M)-1)) {
        M.erase(M.end()-2);
        C.erase(C.end()-2);
    }
}

int main()
{
    //int t = 0;
    ios::sync_with_stdio(0);
    //freopen("inp.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    cin >> n;
    FOR(i,1,n) cin >> a[i];
    FOR(i,1,n) cin >> b[i];
    dp[1] = 0;
    add(b[1], dp[1]);
    pointer = 0;
    FOR(i,2,n) {
        dp[i] = query(a[i]);
        if (i != n) add(b[i], dp[i]);
    }
    //FOR(i,1,n) cout << dp[i] << " "; cout << endl;
    cout << dp[n];
    return 0;
}
