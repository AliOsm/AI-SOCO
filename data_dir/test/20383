#include <bits/stdc++.h>
#define REP(i, n) for (long long i = 0; i < n; i++)
using namespace std;
typedef int Long;

const Long N = 1010;

Long cel[N][N];
Long precal[2][N][N];
Long memo[2][N][N];
pair < Long, pair<Long,Long> > parent[2][N][N];
bool used[2][N][N];

Long dp(Long x, Long y, Long n, Long t){
	if(x == n-1 && y == n-1){
		return precal[t][x][y];
	}
	if(used[t][x][y]){
		return memo[t][x][y];
	}
	used[t][x][y] = true;
	Long ans = 1e9;
	if(x != n-1){
		Long aux = dp(x+1,y,n,t)+precal[t][x][y];
		if(aux < ans){
			ans = aux;
			parent[t][x][y] = {t,{x+1,y}};
		}
	}
	if(y != n-1){
		Long aux = dp(x,y+1,n,t)+precal[t][x][y];
		if(aux < ans){
			ans = aux;
			parent[t][x][y] = {t,{x,y+1}};
		}
	}
	memo[t][x][y] = ans;
	return ans;
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.precision(10);
	cout << fixed;
    
    Long n;
    cin >> n;
    Long xxx = -1;
    Long yyy = -1;
    for(Long i = 0; i < n; i++){
    	for(Long j = 0; j<  n; j++){
    		cin >> cel[i][j];
    		if(cel[i][j] == 0){
    			xxx = i;
    			yyy = j;
			}
		}
	}
	
	for(Long i = 0; i < n; i++){
		for(Long j = 0; j < n; j++){
			Long cn = 0;
    		while(cel[i][j] > 0 && cel[i][j] % 2 == 0){
    			cel[i][j] /= 2;
    			cn++;
			}
			precal[0][i][j] = cn;
		}
	}
	
	for(Long i = 0; i < n; i++){
		for(Long j = 0; j < n; j++){
			Long cn = 0;
    		while(cel[i][j] > 0 && cel[i][j] % 5 == 0){
    			cel[i][j] /= 5;
    			cn++;
			}
			precal[1][i][j] = cn;
		}
	}
	
	parent[0][n-1][n-1] = {-1,{-1,-1}};
	parent[1][n-1][n-1] = {-1,{-1,-1}};
	
	Long ans1 = dp(0,0,n,0);
	Long ans2 = dp(0,0,n,1);
	Long t, x, y;
	if(ans1 == min(ans1,ans2)){
		x = y = 0;
		t = 0;
	}else{
		x = y = 0;
		t = 1;
	}
	
	if(xxx != -1 && min(ans1,ans2) != 0){
		cout << 1 << endl;
		for(Long i = 0; i < xxx; i++){
			cout << "D";
		}
		for(Long i = 0; i < n-1; i++){
			cout << "R";
		}
		for(Long i = xxx; i < n-1; i++){
			cout << "D";
		}
	}else{
		cout << min(ans1,ans2) << endl;
		while(parent[t][x][y].first != -1){
			if(parent[t][x][y].second.first == x+1){
				cout << "D";
			}else{
				cout << "R";
			}
			Long xx = parent[t][x][y].second.first;
			Long yy = parent[t][x][y].second.second;
			x = xx;
			y = yy;
		}
	}
	return 0;
}