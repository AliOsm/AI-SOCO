#include <bits/stdc++.h>

using namespace std;

struct SubString
{
    string s;
    int index;
    int len;
    SubString(string s, int index, int len):
        s(s), index(index), len(len){}

    bool operator< (const SubString t) {
        return len > t.len;
    }
};

bool isValid(string& s1, string& s2, string& s)
{
    bool pre = true;
    for (int i = 0; i < s1.size(); i++)
        pre &= (s1[i] == s[i]);

    bool suf = true;
    for (int i = 1; i <= s2.size(); i++)
        suf &= (s2[s2.size() - i] == s[s.size() - i]);

    return pre && suf;
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

    int n;  cin >> n;

    vector <SubString> str;
    for (int i = 0; i < 2*n - 2; i++) {
        string s;   cin >> s;
        str.push_back(SubString(s, i, s.size()));
    }

    sort(str.begin(), str.end());

    vector <char> Ans(str.size());
    for (int i = 0; i < 2; i++) {
        swap(str[0], str[1]);
        bool can = true;
        for (int j = 1; j < str[0].len; j++)
            can &= (str[0].s[j] == str[1].s[j - 1]);

        string s = str[0].s;     s.push_back(str[1].s.back());

        for (int j = 0; can && j < str.size(); j += 2)
            if (isValid(str[j].s, str[j + 1].s, s)) {
                Ans[str[j].index] = 'P';
                Ans[str[j + 1].index] = 'S';
            }
            else if (isValid(str[j + 1].s, str[j].s, s)) {
                Ans[str[j].index] = 'S';
                Ans[str[j + 1].index] = 'P';
            }
            else can = false;

        if (can) break;
    }

    for (auto x : Ans)  cout << x;  cout << '\n';

    return 0;   
}
