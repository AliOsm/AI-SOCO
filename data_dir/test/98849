// rc.cpp : Defines the entry point for the console application.
//

#include <math.h>

#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <functional>
#include <iomanip>
#include <iterator>
#include <regex>

using namespace std;

#define PI 3.14159265358979323846
#define EPS 1.E-8

#define FIN(a, n) { for (ul _ = 0; _ < n; ++_) cin >> (a)[_]; }
#define FOUT(a, n) { cout << a[0]; for (ul _ = 1; _ < n; ++_) cout << ' ' << a[_]; cout << '\n'; }

typedef unsigned char uc;
typedef unsigned int ui;
typedef unsigned long long ul;
typedef long long sl;

char s[501];

ui ix[500],
nx;

sl v[501],
   dp[2][501];

int main(int argc, char* argv[])
{
    ios_base::sync_with_stdio(false);

    ui n, m, k;
    cin >> n >> m >> k;

    sl a = 0;
    ui c = 0;
    for (ui i = 0; i < n; ++i) {
        cin >> s;

        nx = 0;
        for (ui j = 0; s[j]; ++j) {
            if (s[j] == '1')
                ix[nx++] = j;
        }

        if (nx) {
            ui z = ix[nx - 1] - ix[0] + 1;
            a += z;

            v[0] = 0;
            for (ui j = 0; j < nx; ++j) {
                ui d = nx - j - 1;

                ui mx = 0;
                for (ui f = 0; f + d < nx; ++f) {
                    ui q = ix[f + d] - ix[f] + 1;
                    if (z - q > mx)
                        mx = z - q;
                }
                v[j] = mx;
            }
            if (nx <= k)
                v[nx] = z;

            fill(dp[c], dp[c] + k + 1, 0);
            for (ui j = 0; j <= nx; ++j) {
                for (ui f = 0; f <= k; ++f) {
                    if (f + j > k)
                        break;
                    dp[c][f + j] = max(dp[c][f + j], dp[1 - c][f] + v[j]);
                }
            }

            c = 1 - c;
        }
    }

    cout << a - dp[1 - c][k] << endl;

    return 0;
}
