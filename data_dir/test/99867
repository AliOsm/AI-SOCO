#include <bits/stdc++.h>
using namespace std;
int n;
int arr[100005];
int DP[100005][2][2];
int solve(int idx,bool startedTaking,bool ChangedElement)
{
    if(idx == n+1)
        return 0;
    if(DP[idx][startedTaking][ChangedElement] != -1)
        return DP[idx][startedTaking][ChangedElement];
    int C = 0;
    if(!startedTaking)
    {
        if(arr[idx] < arr[idx+1] || idx == n)
            C = max(C,1 + solve(idx + 1,true,ChangedElement));
        else if(arr[idx] >= arr[idx+1] && idx != n)
            C = max(C,2 + solve(idx + 2,true,true));
        C = max(C,solve(idx + 1,startedTaking,ChangedElement));
    } else {
        if(arr[idx] > arr[idx-1])
            C = max(C,1 + solve(idx + 1,startedTaking,ChangedElement));
        else if(arr[idx] <= arr[idx-1] && !ChangedElement)
        {
            C = max(C,1 + solve(n+1,true,true));
            if(arr[idx+1] > arr[idx-1]+1)
                C = max(C,1 + solve(idx + 1,startedTaking,true));
            else if(arr[idx-2]+1 < arr[idx] && idx >= 3)
                C = max(C,1+ solve(idx + 1,startedTaking,true));

        }
    }
    return DP[idx][startedTaking][ChangedElement] = C;
}
int main()
{
    memset(DP,-1,sizeof DP);
    cin >> n;
    for(int i = 1;i <= n;i++)
        scanf("%d",&arr[i]);
    cout << solve(1,false,false);
    return 0;
}
