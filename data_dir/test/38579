#include <cstdio>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <cmath>
#include <cstring>
#include <queue>
#include <cassert>
#include <iostream>
#include <array>
using namespace std;

typedef long long ll;

const int MAXE=100000;
const int INF=1000000000;

vector<vector<int> > g;
vector<vector<int> > gr;
vector<char> used;
vector<int> order, component;

void dfs1 (int v) {
	used[v] = true;
	for (size_t i=0; i<g[v].size(); ++i)
		if (!used[ g[v][i] ])
			dfs1 (g[v][i]);
	order.push_back (v);
}

void dfs2 (int v) {
	used[v] = true;
	component.push_back (v);
	for (size_t i=0; i<gr[v].size(); ++i)
		if (!used[ gr[v][i] ])
			dfs2 (gr[v][i]);
}

int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		int n,m;
		scanf("%d%d",&n,&m);
		g.clear();
		gr.clear();
		g.resize(n);
		gr.resize(n);
		for(int i=0;i<m;i++)
		{
			int a,b;
			scanf("%d%d",&a,&b);
			a--;
			b--;
			if(a==b) continue;

			g[a].push_back(b);
			gr[b].push_back(a);
		}
		used.assign(n, 0);
		order.clear();
		for(int i=0;i<n;i++)
			if(!used[i])
				dfs1(i);
		used.assign(n, 0);
		component.clear();
		for (int i=0; i<n; ++i) {
				int v = order[n-1-i];
				if (!used[v]) {
					component.clear();
					dfs2 (v);
				}
		}
		if(component.size()==n) {
			printf("No\n");
		}
		else
		{
			used.assign(n,0);
			for(int i:component)
				used[i]=true;
			vector<int> kit;
			for(int i=0;i<n;i++)
				if(!used[i])
					kit.push_back(i);
			printf("Yes\n");
			printf("%d %d\n", (int)component.size(), (int)kit.size());
			for(int i:component)
				printf("%d ",i+1);
			puts("");
			for(int i:kit)
				printf("%d ",i+1);
			puts("");
		}
	}
	return 0;
}
