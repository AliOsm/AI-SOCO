#include <cstdio>
#include <vector>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <queue>
#include <cassert>
#include <ctime>
using namespace std;

const int MAXN=1000001;
const int MAXFACT=MAXN+100;
const int MOD=1000000007;
typedef long long ll;

int sito[MAXN];
ll fact[MAXFACT];
ll rfact[MAXFACT];
ll rev[MAXFACT];

int dp[8][8];

ll cnk(ll n, ll k)
{
	if(k==0) return 1;
	if(n<k) return 0;
	return fact[n]*rfact[k]%MOD*rfact[n-k]%MOD;
}

int main()
{
	rev[1]=1;
	for(int i=2;i<MAXFACT;i++)
		rev[i]=(MOD-MOD/i*rev[MOD%i]%MOD)%MOD;
	fact[0]=1;
	rfact[0]=1;
	for(int i=1;i<MAXFACT;i++)
	{
		fact[i]=fact[i-1]*i%MOD;
		rfact[i]=rfact[i-1]*rev[i]%MOD;
	}
	for(int i=2;i*i<MAXN;i++)
		if(!sito[i])
		{
			for(int j=i*i;j<MAXN;j+=i)
				sito[j]=i;
		}
	for(int i=2;i<MAXN;i++)
		if(!sito[i])
			sito[i]=i;

	int q;
	vector<int> pw;
	scanf("%d",&q);
//	q=1000000;
	while(q--)
	{
		int r, n;
		scanf("%d%d",&r,&n);
//		r=1000000;
//		n=510510;//rand()%1000000+1;
		pw.clear();
		while(n>1)
		{
			int p=sito[n];
			int c=0;
			while(n%p==0)
			{
				n/=p;
				c++;
			}
			pw.push_back(c);
		}
		int k=pw.size();
		for(int i=0;i<=k;i++)
			for(int j=0;j<=i;j++)
				dp[i][j]=0;
		dp[0][0]=1;
		for(int i=0;i<k;i++)
		{
			ll cnk1=cnk(r+pw[i],pw[i]);
			ll cnk2=cnk(r+pw[i]-1,pw[i]);
			ll incv=(cnk1-cnk2+MOD)%MOD;
			for(int j=0;j<=i;j++)
			{
				dp[i+1][j]=(dp[i+1][j]+dp[i][j]*cnk2)%MOD;
				dp[i+1][j+1]=(dp[i+1][j+1]+dp[i][j]*incv)%MOD;
			}
		}
		ll res=0;
		for(int i=0;i<=k;i++)
			res=(res+(1LL<<i)*dp[k][i])%MOD;
		printf("%lld\n",res);
	}
	cerr<<clock()/double(CLOCKS_PER_SEC)<<endl;
	return 0;
}
