#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>   
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)2e5 + 123;
const ll inf = (ll)3e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

string s;
set <char> c;

inline bool pal (string s) {
   string cur = s;
   reverse (all (cur));
   return (cur == s);
}
 
inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                    

inline void Solve () {
   cin >> s;
   int n = sz (s);
   for (int i = 0; i < n / 2; i ++) c.in (s[i]);
   if (sz (c) == 1) cout << "Impossible", exit (0);
   for (int i = 0; i < n; i ++) c.in (s[i]);
   if (sz (c) == 1) cout << "Impossible", exit (0);
   for (int len = 1; len < n; len ++) {
      string k1 = s.substr (0, len);
      string k2 = s.substr (len, n - len);
      string cur1 = k1;
      cur1 += k2;
      string cur2 = k2;
      cur2 += k1;
      if (cur1 != s && pal (cur1)) cout << 1, exit (0);
      if (cur2 != s && pal (cur2)) cout << 1, exit (0);
   }               
   cout << 2;
}                                     

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;                            
// cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
