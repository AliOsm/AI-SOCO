#include<bits/stdc++.h>
using namespace std;
#define int long long

template <typename A, typename B>
string to_string(pair<A, B> p);
 
string to_string(const string& s) {
        return '"' + s + '"';
}
 
string to_string(const char* s) {
        return to_string((string) s);
}
 
string to_string(bool b) {
        return (b ? "true" : "false");
}
 
string to_string(vector<bool> v) {
        bool first = true;
        string res = "{";
        for (int i = 0; i < static_cast<int>(v.size()); i++) {
                if (!first) {
                        res += ", ";
                }
                first = false;
                res += to_string(v[i]); 
        }
        res += "}";
        return res;
}
 
template <size_t N>
string to_string(bitset<N> v) {
        string res = "";
        for (size_t i = 0; i < N; i++) {
                res += static_cast<char>('0' + v[i]);
        }
        return res;
}
 
template <typename A>
string to_string(A v) {
        bool first = true;
        string res = "{";
        for (const auto &x : v) {
                if (!first) {
                        res += ", ";
                }
                first = false;
                res += to_string(x);
        }
        res += "}";
        return res;
}
 
template <typename A, typename B>
string to_string(pair<A, B> p) {
        return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
 
void debug_out() { 
        cerr << endl; 
}
 
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
        cerr << " " << to_string(H);
        debug_out(T...);
}
 
#ifdef IGM
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...)
#endif

inline int cube(int x) {
        return x*x*x;
}
 
vector<int> v;
int res = 0;
int cur = 1;
int m;
bool check(int i) {
        int sum = res + (cube(v[i]+1) - cube(v[i]));
        // debug(i,sum,v[i]);
        if(sum > m)
                return false;
        std::vector<int> temp;
        while(sum) {
                int x = cbrt(sum);
                temp.push_back(x);
                sum -= cube(x);        
        }
        if(temp.size() == v.size()) {
                res = res + cube(v[i]+1) - cube(v[i]);
                v[i]++;
                return true;
        }
        return false;
} 


signed main() {
    cin >> m;
    
    for(int i = 1; i < (int)1e5; ++ i) {
        cur = i;
        while(res + (cur*cur*cur) < (cur+1)*(cur+1)*(cur+1) and res + (cur*cur*cur) <= m) {
            res += (cur*cur*cur);
            v.push_back(cur);
        }
    }
    // debug(v,res);
 
    reverse(v.begin(), v.end());
    for(int i = 0; i < (int)v.size(); ++i) {
        while(check(i)) {
        }
        // debug(v);
    }

    // debug(v);
    cout << v.size() << " " << res << endl;
    return 0;
}