#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int maxn=1e5+7;
const int inf=INT_MAX;
const ll inff=1e18;
const ll mod=1e9+7;
#define pii pair<int,int>
#define mkp make_pair
#define F first
#define S second
#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
//#define int ll

#ifdef HNO2
#define IOS
#else
#define endl '\n'
#define IOS ios::sync_with_stdio(0); cin.tie(0);
#endif // HNO2

const int B=325;

vector<int> G[maxn];
int used[maxn],maxdepth[maxn],dp[maxn];

int calculate[maxn];

void init()
{
    memset(used,0,sizeof(used));
    memset(maxdepth,0,sizeof(maxdepth));
    memset(dp,0,sizeof(dp));
}

//
vector<int> vv;
int pp[maxn];

void predfs(int now,int p)
{
    pp[now]=p;
    for (int i:G[now])
    {
        if (i!=p) predfs(i,now);
    }
    vv.pb(now);
}
//

void dfs(int x)
{
    for (int now:vv)
    {
        int p=pp[now];
        pii maxx=mkp(0,0);

        int tmpsum=0;
    for (int i:G[now])
    {
        if (i!=p)
        {
            //dfs(i,now,x);
            tmpsum+=dp[i];

            if (!used[i])
            {
                maxdepth[now]=max(maxdepth[now],maxdepth[i]+1);
                if (maxdepth[i]>=maxdepth[maxx.F]) maxx.S=maxx.F,maxx.F=i;
                else if (maxdepth[i]>=maxdepth[maxx.S]) maxx.S=i;
            }
        }
    }

    dp[now]=tmpsum;
    if (maxx.F!=0&&maxx.S!=0&&maxdepth[maxx.F]+maxdepth[maxx.S]+2>=x)
    {
        used[now]=1;
        maxdepth[now]=0;
        dp[now]=max(dp[now],tmpsum+1);
    }
    if (maxx.F!=0&&maxdepth[maxx.F]+1>=x)
    {
        //cout<<now<<endl;
        used[now]=1;
        maxdepth[now]=0;
        dp[now]=max(dp[now],tmpsum+1);
    }
    }
}

int ans[maxn];

int32_t main()
{
    IOS
    int n;
    cin>>n;
    for (int i=1;i<=n-1;i++)
    {
        int x,y;
        cin>>x>>y;
        G[x].pb(y);
        G[y].pb(x);
    }

    predfs(1,-1);

    ans[0]=n;
    calculate[0]=1;
    for (int i=1;i<=B;i++)
    {
        init();
        dfs(i);
        ans[i]=dp[1];
        calculate[i]=1;
    }

    for (int i=B+1;i<=n;i++) ans[i]=inf;

    for (int i=0;i<=min(ans[1]-1,B);i++)
    {
        int L=1,R=n;
        while (R-L>1)
        {
            int M=(L+R)>>1;
            if (!calculate[M])
            {
                init();
                dfs(M);
                ans[M]=dp[1];
            }
            else dp[1]=ans[M];

            if (dp[1]>i) L=M;
            else R=M;
            calculate[M]=1;
        }
        for (int j=L+1;j<=n;j++) ans[j]=min(ans[j],i);
    }

    for (int i=0;i<=n-1;i++) cout<<ans[i]<<endl;
}

