#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <string>
#include <cstring>
#include <cstdio>
using namespace std;
// Kobe is the GOAT
// DON'T DIVIDE
// Greedy, Prefix, Sets/Bsearch, Dfs/bfs, DP
// Stack, Bitmask, Dsu 

int n, m, k;
const int MAXN = 505;
pair<int, int> e[10005];
int par[MAXN], ans[20005], c[10005], prep[10005][MAXN];
vector<pair<pair<int, int>, int> > q;

int find_parent(int p)
{
	if(par[p] == p)
		return p;
	return par[p] = find_parent(par[p]);
}

bool merge(int a, int b)
{
	int x = find_parent(a), y = find_parent(b);
	if(par[x] != y)
	{
		par[x] = y;
		return true;
	}
	return false;
}

bool cmp(pair<pair<int, int>, int> a, pair<pair<int, int>, int> b)
{
	if(a.first.first == b.first.first)
		return a.first.second > b.first.second;
	return a.first.first < b.first.first;
}

int main()
{
	ios::sync_with_stdio(0);
	cin >> n >> m;

	for(int i = 1; i <= m; i++)
		cin >> e[i].first >> e[i].second;

	cin >> k;
	for(int i = 0; i < k; i++)
	{
		int l, r;
		cin >> l >> r;
		q.push_back(make_pair(make_pair(l, r), i));
	}
	sort(q.begin(), q.end(), cmp);

	int curr = n;
	for(int i = 1; i <= n; i++)
		par[i] = i;
	for(int i = 1; i <= m; i++)
	{
		for(int j = 1; j <= n; j++)
			prep[i][j] = par[j];
		c[i] = curr;
		if(merge(e[i].first, e[i].second))
			curr--;
	}

	int idx = 0;
	for(int i = 1; i <= m; i++)
	{
		int counter = c[i];
		for(int j = 1; j <= n; j++)
			par[j] = prep[i][j];
		for(int j = m; j >= i; j--)
		{
			while(q[idx].first.first == i && q[idx].first.second == j)
			{
				ans[q[idx].second] = counter;
				idx++;
			}
			if(merge(e[j].first, e[j].second))
				counter--;
		}
	}

	for(int i = 0; i < k; i++)
		cout << ans[i] << "\n";

	return 0;
}
