#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>
#include <tuple>
#include <chrono>

using namespace std;
using ll = long long;
using ull = unsigned long long;
const int N = 300010;
const int oo = numeric_limits<int>::max() / 2;
mt19937 rnd(std::chrono::steady_clock::now().time_since_epoch().count());

int n;
vector<ll> w;
vector<pair<int, ll>> g[N];
ll dp[N][4];

inline ll max1(ll a, ll b, ll c) {
  return max(a, max(a, b));
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
  cin >> n;
  for(int i = 0; i < n; ++i) {
    ll x;
    cin >> x;
    w.emplace_back(x);
  }

  for(int i = 0; i < n - 1; ++i) {
    int u, v;
    cin >> u >> v;
    --u; --v;
    ll weight;
    cin >> weight;
    g[v].emplace_back(u, weight);
    g[u].emplace_back(v, weight);
  }

  std::function<void(const int, const int)> dfs = [&](const int v, const int p) {
    dp[v][0] = 0;
    dp[v][1] = w[v];
    dp[v][2] = w[v];
    ll mx1 = 0, mx2 = 0;
    for(auto edge : g[v]) {
      int to = edge.first;
      ll weight = edge.second;
      if (to == p) {
        continue;
      }
      dfs(to, v);
      if (dp[to][1] - weight >= 0) {
        dp[v][1] = max(dp[v][1], w[v] + dp[to][1] - weight);
      }
      dp[v][0] = max(dp[v][0], max1(dp[to][0], dp[to][1], dp[to][2]));
      if (dp[to][1] - weight < 0) {
        continue;
      }
      if (mx1 < dp[to][1] - weight) {
        mx2 = mx1;
        mx1 = dp[to][1] - weight;
      } else if (mx2 < dp[to][1] - weight) {
        mx2 = dp[to][1] - weight;
      }
    }
    if (mx1 >= 0 && mx2 >= 0) {
      dp[v][2] = max(dp[v][2], mx1 + mx2 + w[v]);
    }
  };
  
  dfs(0, -1);
  ll mx = 0;
  for(int i = 0; i < n; ++i) {
    for(int j = 0; j < 3; ++j) {
      mx = max(mx, dp[i][j]); 
    }
  }

  cout << mx << endl;
	return 0;
}
