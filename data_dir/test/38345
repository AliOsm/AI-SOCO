#include <bits/stdc++.h>

typedef long long ll;
using namespace std;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 2000000005;
const ll INFLL = 1000000000000000002ll;
const ll MOD = 1000000007;

inline ll min(ll a, ll b, ll c){return min(min(a,b),c);}
inline ll min(ll a, ll b, ll c, ll d){return min(min(min(a,b),c),d);}
inline ll max(ll a, ll b, ll c){return max(max(a,b),c);}
inline ll max(ll a, ll b, ll c, ll d){return max(max(max(a,b),c),d);}

// -------------------------------------------------------------------------------------------------------------

int T[200005], N, A[200005];
vector<int> Queries[200005];

void update(int x)
{
    while(x > 0)
    {
        T[x]++;
        x -= x&-x;
    }
}

int query(int x)
{
    int ret = 0;
    while(x <= 200000)
    {
        ret += T[x];
        x += x&-x;
    }
    return ret;
}

int main()
{
    faster_io();
    cin >> N;
    f(i,1,N) cin >> A[i];
    f(i,1,N) A[i] = min(A[i], N);
    ll ans = 0;
    f(i,1,N) Queries[A[i]].pb(i);
    f(i,1,N)
    {
        update(A[i]);
        for(int q : Queries[i]) ans += query(q);
    }
    f(i,1,N) if(A[i] >= i) ans--;
    //cout << (ans - N) / 2;
    cout << ans / 2;
}
