#include<bits/stdc++.h>
//#include<ctime>
//#include <stdlib.h>
//#define time ios_base::sync_with_stdio(false);cin.tie(false);
#define dpp(arr,val) memset(arr,val,sizeof (arr))
using namespace std;
typedef long long ll;
//typedef unsigned long long ull;
//const int oo=0x3f3f3f3f ;
ll mod=1e9+7;
//double eps=1e-9;
double pi=acos(-1);
//bool isprime(ll value){int cnt=0;for (ll i=1; i*i<=value; i++){if (value%i==0){cnt++;if (i*i!=value){cnt++;}}}if (cnt==2){return true;}else{return false;}}
ll fastpower(ll b,ll p){ll ans=1;while(p){if (p%2){ans=(ans*b);}b=b*b;p/=2;}return ans;}
ll fastpowermod(ll b,ll p,ll m){ll ans=1;while(p){if (p%2){ans=((ans%m)*(b%m))%m;}b=((b%m)*(b%m))%m;p/=2;}return ans%m;}
string  makeitstring(ll n){string ans;bool ch=0;if (n<0){n*=-1;ch=1;}if (n==0){ans="0";};while (n){ll mod=n%10;mod+=48;char m=mod;ans=m+ans;n/=10;}if (ch){ans='-'+ans;}return ans;}
//ll makeitnumber(string s){ll ans=0;for (ll i=0; i<s.size(); i++){if(s[i]!='-'){ll num=s[i]-'0';ans+=(num*fastpower(10,(ll)s.size()-i-1));}}if(s[0]=='-'){return ans*-1;}else {return ans;}}
//bool composite[(int)1e5+20];
//void sieve(){composite[0]=composite[1]=true;for (int i=2; i*i<=1e5+10; i++){for (int j=i*i; j<=1e5+10; j+=i){composite[j]=true;}}}
// gold bach (using induction)theory any number can be expressed as the sum of three prime numbers
// if num>2 and any even number greater than two can be expressed as the sum of two prime numbers
//ll ny[12]= {31,28,31,30,31,30,31,31,30,31,30,31};
//ll ly[12]= {31,29,31,30,31,30,31,31,30,31,30,31};
//bool valid(int x,int y,int n,int m){return (x>=0&&y<m&&x<n&&y>=0);}
//ll ncr(ll n,ll r){ll ans=1;r=min(r,n-r);for (int i=1;i<=r;i++){ans*=(n-r+i);ans/=i;}return ans;}
//bool checksqrt(double f){return (sqrt(f)*sqrt(f)==f);}
//ll lcm(ll a,ll b){return (a/__gcd(a,b))*b;}
//struct element{ll l,r,index;};
//bool cmp(element a,element b){if (a.l==b.l){return a.r>b.r;}else {return a.l<b.l ;}}
//bool isPowerOfTwo(ll x){return (x && !(x & (x - 1)));}
//bool checkpower(long double n){long double f=sqrt(n);return !(f-floor(f));}
//string multiply(string one,string two){string s;int cnt=0;if (one[0]=='-'){reverse(one.begin(),one.end());one.pop_back();reverse(one.begin(),one.end());cnt++;}if (two[0]=='-'){reverse(two.begin(),two.end());two.pop_back();reverse(two.begin(),two.end());cnt++;}int n1=one.size();int n2=two.size();vector<int>ans(n1+n2,0);int pos1=0;int pos2=0;for (int i=n1-1; i>=0; i--){int carry=0;int digit1=one[i]-'0';pos2=0;for (int j=n2-1; j>=0; j--){int digit2=two[j]-'0';int sum=(digit1*digit2)+ans[pos1+pos2]+carry;carry=sum/10;ans[pos1+pos2]=sum%10;pos2++;}if (carry>0){ans[pos1+pos2]+=carry;}pos1++;}bool check=0;for (int i=ans.size()-1; i>=0; i--){if (ans[i]){check=true;}if (check){s+=makeitstring(ans[i]);}}if(!check){s+='0';}if (cnt%2){s='-'+s;}return s;}
//double eps =1e-9;
//void comparing_doubles(double f,double s){if (f-s>eps){cout<<">"<<endl;}else if (f-s<-eps){cout<<"<"<<endl;}else{// if (abs(f-s)<eps)cout<<"=";}}
ll gcd(ll a,ll b){while(b!=0){ll a2=a;a=b;b=a2%b;}return a;}
//ll solve(ll n){return (n*(n+1))/2;}
//ll cumsumrule(ll l,ll r,vector<ll>&cum){if (!l){return cum[r];}else {return cum[r]-cum[l-1];}}
/*struct point{
    ll x,y;
};
bool eq(point p1,point p2){return (p1.x==p2.x&&p1.y==p2.y);}
ll distance(point p1,point p2){ll dis=0;dis+=((p1.x-p2.x)*(p1.x-p2.x));dis+=((p1.y-p2.y)*(p1.y-p2.y));return dis;}
bool sq(point p1,point p2,point p3,point p4)
{
    if ((eq(p1,p2)||eq(p1,p3)||eq(p1,p4))||(eq(p2,p3)||eq(p2,p4))||eq(p3,p4))
    {
        return 0;
    }

    ll d2=distance(p1,p2);
    ll d3=distance(p1,p3);
    ll d4=distance(p1,p4);
    if (d2==d3&&2*d2==d4&&2*d2==distance(p2,p3)) {
    ll d=distance(p2,p4);return (d==distance(p3,p4)&&d==d2);
    }
    if (d3==d4&&2*d3==d2&&2*d3==distance(p3, p4)) {
        ll d=distance(p2, p3);
        return (d==distance(p2,p4)&&d==d3);
    }
    if (d2==d4&&2*d2==d3&&2*d2==distance(p2,p4)){
        ll d = distance(p2, p3);
        return (d==distance(p3, p4)&&d==d2);
    }

    return 0;
}



void rot(ll &x1,ll &y1,ll x2, ll y2)
{
 ll xf=x2-(y1-y2);
 ll yf=y2+(x1-x2);
 x1=xf;
 y1=yf;

}*/
ll dp[(int)1e5+11];
ll n,k;
ll solve(ll i)
 {
     if(i+k>1e5+10){return dp[i]=1;}
     ll &ret=dp[i];
     if (~ret){return ret%mod;}
     return ret=(solve(i+1)+solve(i+k))%mod;
 }
int main()
{
   ll sum=0;
   dpp(dp,-1);
   scanf("%lld%lld",&n,&k);
 for (int i=0;i<=1e5+10;i++)
 {
    solve(1e5+10-i-1);

 }
 reverse(dp,dp+100000+11);
 for (int i=1;i<1e5+10;i++)
 {
     dp[i]=(dp[i]+dp[i-1])%mod;
 }

    for (int i=0;i<n;i++)
    {
        ll a,b;
        scanf("%lld%lld",&a,&b);
    printf("%lld\n",(dp[b]-dp[a-1]+mod)%mod);
    }
    return 0;
}

