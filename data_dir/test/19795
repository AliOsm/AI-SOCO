# include <bits/stdc++.h>
using namespace std;
# define fi cin
# define fo cout
# define x first
# define y second
# define ll long long
# define IOS ios_base :: sync_with_stdio(0)
# define CF
int v[1 << 20];
vector < int > s[1 << 20];
const int mod1 = 1e9 + 7;
const int mod2 = 666013;
char c[1 << 20];
int ans[1 << 20];
void Merge(set < pair < int , int > > &a,set < pair < int , int > > &b)
{
    if (a.size() < b.size()) swap(a,b);
    for (auto it : b) a.insert(it);
    b.clear();
}
set < pair < int , int > > dfs(int node,int prev,pair < int , int > H)
{
    set < pair < int , int > > S;
    S.insert(H);
    for (auto it : s[node])
        if (it != prev)
        {
            auto w = dfs(it,node,{(1ll * 37 * H.x + c[it]) % mod1,(1ll * 37 * H.y + c[it]) % mod2});
            Merge(S,w);
        }
    ans[node] = S.size();
    return S;
}
int main(void)
{
    #ifdef CF
    #endif // CF
    srand(time(0));
    fo << fixed << setprecision(7);
    cerr << fixed << setprecision(7);
    int n;
    IOS;
    fi>>n;
    for (int i = 1;i <= n;++i) fi>>v[i];
    fi>>(c+1);
    for (int i = 1;i < n;++i)
    {
        int a,b;
        fi>>a>>b;
        s[a].push_back(b);
        s[b].push_back(a);
    }
    for (int i = 1;i <= n;++i) c[i] -= '0';
    dfs(1,0,{c[1],c[1]});
    int mx = -1,cnt = 0;
    for (int i = 1;i <= n;++i)
    {
        if (mx < ans[i] + v[i]) mx = ans[i] + v[i],cnt = 0;
        cnt += ans[i] + v[i] == mx;
    }
    fo << mx << '\n' << cnt << '\n';
    return 0;
}

