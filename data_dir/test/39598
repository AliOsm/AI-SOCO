#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             2e16
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>


#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())

#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);

const int N = 200005;

int pr[N],seg[N],Sad[N];
int a[N],b[N];
int find(int r)
{
    if(pr[r] == r)return r;
    else return pr[r] = find(pr[r]);
}
vector<int>g[N];
int man[N];
int main()
{
    FastRead
    int n , k;
    cin >> n >> k;
    FOR(i,1,N - 1)pr[i] = i,seg[i] = 1,man[i] = 0;
    map<pair<int,int>,int>mp;

    int sad = 0,ans = 0;
    FOR(i,1,k)
    {
        cin >> a[i] >> b[i];
        if(a[i] > b[i])swap(a[i],b[i]);

        if(mp[mk(a[i],b[i])] > 0){
            sad++;
            Sad[i] = 1;
            continue;
        }
        mp[mk(a[i],b[i])] = 1;
    }
    FOR(i,1,k)
    {
        if(Sad[i])continue;
        int u = find(a[i]);
        int v = find(b[i]);
        man[u]++;
        if(u == v)continue;
        pr[v] = u;
        seg[u] += seg[v];
        man[u] += man[v];
    }
    FOR(i,1,n)
    {
        if(find(i) == i and man[i] > 0){
            int edges = seg[i] - 1;
            ans = ans + min(edges,man[i]);
        }
    }

    cout << k - ans << "\n";
}

