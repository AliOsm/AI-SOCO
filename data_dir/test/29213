#include<bits/stdc++.h>
using namespace std;
long long arr[3];
long long egcd(long long a,long long b){
       long long x=0,y=1,u=1,v=0,q,r,m,n;
    while(a != 0){
    q=b/a;
        r= b%a;
       m = x-u*q;
        n = y-v*q;
       b=a;
       a=r;
       x=u;
       y=v;
        u=m; v=n;
    }
    long long gcd = b;
    arr[0]=gcd; arr[1]=x; arr[2]=y;
}
int main()
{
    long long m,a1,h1,x1,y1,h2,a2,x2,y2,i,mm1,mm2,nn1,nn2;
    cin>>m>>h1>>a1>>x1>>y1>>h2>>a2>>x2>>y2;
    long long a=h1,b=h2;
    long long t=0,t1=0;
    long long f=0;
    long long pos1=-1,pos2=-1;
    long long instance=0;
    long long mmr=2*m+5;
    while(mmr--)
    {
        t++;
        h1=(x1*h1+y1)%m;

        if(h1==a1 && instance==0)
        {
            mm1=t; instance=1;
        }
        else if(h1==a1 && instance==1)
        {
             mm2=t; instance=2;
             break;
        }
    }

    long long instance2 =0;
    mmr= 2*m+5;
        while(mmr--)
        {
        t1++;
        h2=(x2*h2+y2)%m;

        if(h2==a2 && instance2==0)
        {
            nn1=t1; instance2=1;
        }
        else if(h2==a2 && instance2==1)
        {
             nn2=t1; instance2=2;
             break;
        }
        }

        if(instance<1 || instance2<1)
           {
               cout<<-1<<endl; return 0;
           }

if(instance==2 && instance2==1)
{
    if(nn1-mm1>=0 && (nn1-mm1)%(mm2-mm1)==0)
      {
          cout<<nn1<<endl; return 0;
      }
      else {cout<<-1<<endl; return 0;}
}
else if(instance==1 && instance2==2)
{
    if(mm1-nn1>=0 && (mm1-nn1)%(nn2-nn1)==0)
      {
          cout<<mm1<<endl; return 0;
      }
      else {cout<<-1<<endl; return 0;}
}
  long long d1=mm2-mm1;
         long long d2=nn2-nn1;
         long long fgh = nn1-mm1;
         egcd(d1,d2);
         if(fgh%arr[0]!=0)
         {
             cout<<-1<<endl; return 0;}
         fgh  = fgh/arr[0];
         long long mat[2][3];
         mat[0][0] = d2/arr[0];
         mat[0][1] = d1/arr[0];
         mat[0][2] = 0;
         mat[1][0] = arr[1]*fgh;
         mat[1][1]  = -1*arr[2]*fgh;
         mat[1][2]  = nn1-mm1;
               if(mat[1][1]<=0 && mat[1][0]<=0)
               {    mat[1][1] = -mat[1][1];
                    mat[1][0] = -mat[1][0];
                   long long dfactor = max( (mat[1][0]+mat[0][0]-1)/mat[0][0],(mat[1][1]+mat[0][1]-1)/mat[0][1]);

                   long long ans = (dfactor*mat[0][1])-mat[1][1];

                   cout<<(ans*d2)+nn1<<endl;
               }
              else if(mat[1][1]>=0 && mat[1][0]>=0)
                {
                      long long dfactor = min(mat[1][0]/mat[0][0],mat[1][1]/mat[0][1]);
                    long long ans = -dfactor*mat[0][1]+mat[1][1];
                    cout<<ans*d2+nn1<<endl;
                }
    return 0;
}
