#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <unordered_map>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

ll read_long() {
    ll ans = 0;
    char c;
    bool started = false;
    bool is_negative = false;
    while (true) {
        c = getchar();
        if ((c < '0' || c > '9') && c != '-' && !started) continue;
        if ((c < '0' || c > '9') && c != '-' && started) break;
        if (started) {
            ans = ans * 10;
        }
        started = true;
        if (c == '-') is_negative = true;
        else ans += c - '0';
    }
    if (is_negative) ans *= -1;
    return ans;
}

int q;
int par[32][(int)1e6];
short rating[32][(int)1e6];
unordered_map<int, int> id, neg;
int sz = 0;
int last = 0;

void init(int value) {
    if (id.count(value) == 0) {
        id[value] = sz;
        for (int i = 0; i < 30; i++) par[i][sz] = sz, rating[i][sz] = 0;
        sz++;
        neg[value] = sz;
        for (int i = 0; i < 30; i++) par[i][sz] = sz, rating[i][sz] = 0;
        sz++;
    }
}

int get_parent(int i, int v) {
    if (v == par[i][v]) return v;
    return par[i][v] = get_parent(i, par[i][v]);
}

bool eq(int i, int x, int y) {
    return get_parent(i, x) == get_parent(i, y);
}

void merge(int i, int x, int y) {
    x = get_parent(i, x);
    y = get_parent(i, y);
    if (x == y) return;
    if (rating[i][x] < rating[i][y]) swap(x, y);
    par[i][y] = x;
    if (rating[i][x] == rating[i][y]) rating[i][x]++;
}

int main(){

    init(-1);

    scanf("%d", &q);
    while (q--) {
        int type;
        scanf("%d", &type);
        int lp, rp, xp;
        if (type == 1) {
            scanf("%d%d%d", &lp, &rp, &xp);
            int l = (lp ^ last);
            int r = (rp ^ last);
            if (l > r) swap(l, r);
            int x = (xp ^ last);
            init(l - 1);
            init(r);
            bool ok = 1;
            for (int i = 0; i < 30 && ok; i++) {
                if ((1 << i)&x) {
                    if (eq(i, id[l - 1], id[r])) ok = 0;
                } else {
                    if (eq(i, id[l - 1], neg[r])) ok = 0;
                }
            } 
            if (!ok) continue;
            for (int i = 0; i < 30 && ok; i++) {
                if ((1 << i)&x) {
                    merge(i, id[l - 1], neg[r]);
                    merge(i, neg[l - 1], id[r]);
                } else {
                    merge(i, id[l - 1], id[r]);
                    merge(i, neg[l - 1], neg[r]);
                }
            } 
        } else {
            scanf("%d%d", &lp, &rp);
            int l = (lp ^ last);
            int r = (rp ^ last);
            if (l > r) swap(l, r);
            if (id.count(l - 1) == 0 || id.count(r) == 0) {
                last = 1;
                printf("-1\n");
                continue;
            }
            int cur = 0;
            for (int i = 0; i < 30 && cur >= 0; i++) {
                if (eq(i, id[l - 1], id[r]));
                else if (eq(i, id[l - 1], neg[r])) cur |= (1 << i);
                else cur = -1;
            }
            printf("%d\n", cur);
            if (cur == -1) cur = 1;
            last = cur;
        }
    }

    return 0;
}
