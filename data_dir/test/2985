#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%Ld"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
#include <utility>
#include <cassert>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
// Solution
ll n , m , b;
vi x , k;
vector< vi > good;
vi msk;
#define INF 1500000000000000000LL
ll BEST = INF;
ll dp[(1<<20) + 100];
bool compare(const int& f , const int& s){
  return k[f] < k[s];
}
int main(){
  vi idx;
  cin>>n>>m>>b;
  x.resize(n) , k.resize(n);
  good.resize(n);
  for(int i=0;i<n;++i){
   idx.pb(i);
   int cnt;
   scanf("%d%d%d" , &x[i] , &k[i] , &cnt);
   good[i].resize(cnt);
   for(int j=0;j<cnt;++j)
    scanf("%d" , &good[i][j]);
   msk.pb(0);
   for(int j=0;j<cnt;++j)
    msk.back() |= 1<<(good[i][j]-1);
                      }
  sort(all(idx) , compare);
  for(int i=1;i<(1<<m);++i)
   dp[i] = INF;
  dp[0] = 0;
  for(int i=0;i<sz(idx);++i){
   int p = idx[i];
   int cm = msk[p];
   int cp = x[p];
   for(int u=0;u<(1<<m);++u)
    relaxMin(dp[u] , cp + dp[u ^ (u&cm)]);
   if(dp[(1<<m)-1] < INF)
    relaxMin(BEST , dp[(1<<m)-1] + k[p]*b);
                            }
  if(BEST < INF)
   cout<<BEST<<'\n';
  else puts("-1");
  return 0;
}
