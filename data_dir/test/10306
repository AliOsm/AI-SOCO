/*
ID: hamed_51
PROG: ?
LANG: C++
*/

#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#if (_win32 || __win32__)
#define LLD "%i64d"
#else
#define LLD "%lld"
#endif

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << x << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-13
//#define endl "\n"

inline void read(register int *n) {
	register char c; *n = 0;
	do { c = getchar(); } while (c < '0' || c > '9');
	do { *n = c-'0'+*n*10; c = getchar(); } while (c >= '0' && c <= '9');
}

#define MAXN 101*1000

ll h[MAXN], p[MAXN], pw = 193;
string s;
int n;

inline ll hash(int i, int j) {
	if (i == 0) return h[j];
	return h[j]-p[j-i+1]*h[i-1];
}

struct cmp {
	bool operator () (const pii &A, const pii &B) {
		if (hash(A.X, A.Y) == hash(B.X, B.Y)) return 0;
		int mx = min(A.Y-A.X, B.Y-B.X);
		if (hash(A.X, A.X+mx) == hash(B.X, B.X+mx)) return A.Y-A.X > B.Y-B.X;
		int mn = 0;
		while (mn < mx) {
			int mid = (mn+mx)/2;
			if (hash(A.X, A.X+mid) == hash(B.X, B.X+mid))
				mn = mid+1;
			else
				mx = mid;
		}
		return s[A.X+mn] > s[B.X+mn];
	}
};

priority_queue<pii, vector<pii>, cmp> Q;

string bt(string s, int k) {
	vector<string> V;
	FOR(i, 0, Size(s)) FOR(j, i, Size(s)) V.pb(s.substr(i, j-i+1));
	sort(all(V));
	if (k >= Size(V)) return "No such line.";
	return V[k-1];
}

int main() {
	p[0] = 1;
	FOR(i, 1, MAXN) p[i] = p[i-1]*pw;
	int k;
	cin >> s >> k;
	n = Size(s);
	FOR(i, 0, n) h[i] = (i?h[i-1]:0)*pw+s[i];
	FOR(i, 0, n) Q.push(pii(i, i));
	FOR(i, 1, k) if (Size(Q)) {
		pii last = Q.top();
		Q.pop();
		last.Y++;
		if (last.Y < n) Q.push(last);
	}
	if (Size(Q)) {
		pii res = Q.top();
		FOR(i, res.X, res.Y+1) cout << s[i];
		cout << endl;
	} else cout << "No such line." << endl;
	return 0;
}

