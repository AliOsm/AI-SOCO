#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const int mx = 1e6+5;

bool vis[mx];
vector<int> prime;
vector<int> vec;
int x;

void seive()
{
    int i , j , k;
    vis[0] = vis[1] = 1;
    for(i = 4 ; i < mx ; i+= 2)vis[i] = 1;
    for(i = 3 ; i*i < mx ; i+= 2)
    {
        if(vis[i])continue;
        for(j = i*i ; j < mx ; j+= 2*i)
        {
            vis[j] = 1;
        }
    }
    for(i = 2 ; i < mx ; i++)
    {
        if(!vis[i])prime.push_back(i);
    }
    int sq = sqrt(x);
    int num = x;
    int l = prime.size();
    for(i = 0 ;i < l && prime[i] <= sq ; i++)
    {
        k = 0;
        while(num%prime[i] == 0)
        {
            num = num/prime[i];
            k = 1;
        }
        if(k)
        {
            sq = sqrt(num);
            vec.push_back(prime[i]);
        }
    }
    if(num>1)vec.push_back(num);
}
bool func(int num)
{
    int l , r , mid ,  p , q , n , i , q1 , p1;
    l = vec.size();
    for(i = 0 ;  i < l && vec[i] < num ; i++)
    {

        if(num%vec[i] == 0)
        {
            p = num;

        }
        else
        {
            q = num/vec[i];
            p = vec[i]*(q+1);
        }

        if(p == x) return 1;

    }
    return 0;
}

int main()
{

    int i , j , k , p , q, n , m , l , r , mid;
    scanf("%d",&x);
    seive();
    l = 3;
    r = x-1;
    bool ok;
    while(l <= r)
    {
        mid = (l+r)/2;
        ok = 0;
        for(i = 0 ; i < prime.size() && prime[i] < mid ; i++)
        {
            if(mid%prime[i] == 0)
            {
                p = mid;
            }
            else
            {
                q = mid/prime[i];
                p = prime[i]*(q+1);
            }
            if(func(p))
            {
                ok = 1;
                break;
            }
        }
        if(ok)r=mid-1;
        else l = mid+1;
    }
    printf("%d\n",r+1);

    return 0;
}

