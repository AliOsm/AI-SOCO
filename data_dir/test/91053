#include <bits/stdc++.h>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef long long ll;
typedef unsigned long long llu;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<string, int> psi;
typedef pair<char, int> pci;
typedef pair<int, char> pic;
const ll MOD = (ll)1e9 + 7;
const long double PI = 3.141592653589793238462643383279502884197;

ll gcd(ll a,ll b){return b?gcd(b,a%b):a;}
ll mp(ll a,ll b){ll ret=1;while(b){if(b&1)ret=ret*a%MOD;a=a*a%MOD;b>>=1;}return ret;}

priority_queue<int, vector<int>, greater<int>> pq;
vector<int> v;

char ans[101];

int main() {
    int n;
    scanf("%d", &n);

    if (n <= 3) {
        printf("? 1 1\n");
        fflush(stdout);
        char t;
        scanf(" %c", &t);
        ans[0] = t;

        if (n >= 2) {
            printf("? 2 2\n");
            fflush(stdout);
            scanf(" %c", &t);
            ans[1] = t;
        }

        if (n == 3) {
            printf("? 3 3\n");
            fflush(stdout);
            scanf(" %c", &t);
            ans[2] = t;
        }

        printf("! %s", ans);
        fflush(stdout);
        return 0;
    }

    int nn = n / 2;
    printf("? 1 %d\n", nn);
    printf("? 2 %d\n", nn);
    fflush(stdout);

    int d[101] = {0};
    for (int i = 0; i < (nn + 1) * nn / 2; i++) {
        string t;
        cin >> t;
        for (char c : t) d[sz(t)] += c;
    }

    for (int i = 0; i < (nn - 1) * nn / 2; i++) {
        string t;
        cin >> t;
        for (char c : t) d[sz(t)] -= c;
    }

    for (int i = nn; i >= 1; i--)
        d[i] -= d[i - 1];

    for (int i = 1; i <= nn; i++)
        ans[i - 1] = d[i];

    printf("? 1 %d\n", n);
    fflush(stdout);

    memset(d, 0, sizeof(d));
    for (int i = 0; i < n * (n + 1) / 2; i++) {
        string t;
        cin >> t;
        for (char c : t) d[sz(t)] += c;
    }

    // d[1]과 d[2]의 차이는
    if (n % 2) ans[nn] = d[nn + 1] - d[nn];
    ans[n - 1] = d[n] - (d[2] - d[1]) - ans[0];
    for (int i = 1; i < nn; i++) {
        int tt = (d[i + 1] - d[i]) - (d[i + 2] - d[i + 1]);
        ans[n - i - 1] = tt - ans[i];
    }

    printf("! %s\n", ans);
    fflush(stdout);
}