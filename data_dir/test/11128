//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-12;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n, d, X;

int nxt(){
  X = (1LL * X * 37 + 10007) % 1000000007;
  return X;
}

int a[100005], b[100005];
int pos[100005];
int res[100005];
set<int> x, y;

int main(void){
  #ifdef nobik
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
  #endif
  scanf("%d %d %d", &n, &d, &X);
  forn(i, n){
    a[i] = i + 1;
  }
  forn(i, n){
    swap(a[i], a[nxt() % (i + 1)]);
  }
  forn(i, n){
    if(i < d) b[i] = 1; else b[i] = 0;
  }
  forn(i, n){
    swap(b[i], b[nxt() % (i + 1)]);
  }
  forn(i, n) x.insert(i);
  forn(i, n) if(b[i]) y.insert(i);
  forn(i, n){
    pos[a[i]] = i;
  }
  for(int i = n; i >= 1; --i){
    int it = pos[i];
    set<int> :: iterator F = x.lower_bound(it);
    set<int> :: iterator S = y.begin();
    for(; F != x.end();){
      int cur = *F;
      S = y.lower_bound(cur - it);
      if(S == y.end()){
        break;
      }
      if(*S == cur - it){
        res[cur] = i;
        x.erase(F);
      }
      F = x.lower_bound(it + *S);
    }
  }
  forn(i, n) printf("%d\n", res[i]);
  return 0;
}
