/*
Anton Gulikov
*/
#include <iostream>
#include <fstream>
#include <stack>
#include <cstdlib>
#include <cmath>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <algorithm>
#include <ctime>
#include <cassert>
#include <stdio.h>
#include <queue>

#define mp make_pair
#define pb push_back
#define foru(i,n) for(int i = 0; i < n; i++)
#define ford(i,n) for(int i = n - 1; i >= 0; i++)
#define forab(i,l,r) for(int i = l; i <= r; i++)
#define forabd(i,r,l) for(inr i = r; i >= l; i--)
#define sqr(x) ((x) * (x))
#define F first
#define S second

const long long base = 1000000000 + 7;

using namespace std;

int p[311111],k[311111],r[311111];
int n,m,testq,x,y,t;

int find_set(int v){
	if (p[v] != v)
		p[v] = find_set(p[v]);
	return p[v];
}

void union_set(int x, int y){
	x = find_set(x);
	y = find_set(y);
	if (x == y) return;
	int l1 = k[x];
	int l2 = k[y];
	int l3 = ((k[x] + 1) / 2) + ((k[y] + 1) / 2) + 1;
	l1 = max(l1, l2);
	l1 = max(l1, l3);
	if (r[x] < r[y]) swap(x,y);
	p[y] = x;
	k[x] = l1;
	if (r[x] == r[y]) r[x]++;
}

int f[311111];
bool used[311111];
vector <int> g[311111];

void dfs(int v){
	used[v] = true;
	int m1 = 0;
	int m2 = 0;
	foru(i,g[v].size()){
		int to = g[v][i];
		if (!used[to]){
			dfs(to);
			if (f[to] >= m1){
				m2 = m1;
				m1 = f[to];
			} else if (f[to] > m2) m2 = f[to];
		}
	}
	k[find_set(v)] = max(k[find_set(v)], m1 + m2);
	f[v] = m1 + 1;
}

void solve(){
	cin >> n >> m >> testq;
	foru(i,n){
		p[i] = i;
		r[i] = 0;
		k[i] = 0;
	}
	foru(i,m){
		cin >> x >> y;
		x--; y--;
		g[x].pb(y);
		g[y].pb(x);
		union_set(x,y);
	}	
	foru(i,n){ k[i] = 0;
	}
	foru(i,n) if (!used[i]) dfs(i);
	while(testq--){
		cin >> t;
		if (t == 1){
			cin >> x;
			x--;
			x = find_set(x);
			cout << k[x] << "\n";
		} else{
			cin >> y >> x;
			x--; y--;
			union_set(x,y);
		}
	}
}

int main(){
	ios_base :: sync_with_stdio(false);
	int test = 1;
	while (test--){
		solve();
	}
	return 0;
}