// 45
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define IOS ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0)
inline int in(){int32_t x ; scanf("%d",&x) ; return x ;}
inline long long lin(){long long x ; scanf("%lld",&x) ; return x;}
const int maxn = 1e6 + 10;
const int inf = 1e18 + 10;
vector<int> g[2][maxn];
int pr[maxn];
inline int root(int x) {return pr[x] == x ? x : pr[x] = root(pr[x]);}
inline void merge(int v , int u) {pr[root(v)] = root(u);}
set<pair<int,int> > edges;
int cur ;
vector<int> shit[maxn];
int h[maxn];
pair<pair<int,int> , pair<int,int> > ans[maxn];
inline void dfs(int node , int fl , int fa = -1)
{
    for (auto u : g[fl][node]) if (u - fa) dfs(u,fl,node);
    if (fa + 1 && root(node) - root(fa))
    {
        if (fl == 0)
        {
            shit[root(node)].push_back(cur);
            ans[cur].first = {node+1,fa+1};
            cur ++;
        }
        else
        {
            ans[shit[root(node)][h[root(node)]]].second = {node+1,fa+1};
            h[root(node)] ++;
        }
    }
}
int32_t main()
{
    int n = in();
    iota(pr,pr+n,0);
    for (int _ = 0 ; _ < 2 ; _ ++)
    {
        for (int i = 0 ; i < n - 1 ; i ++)
        {
            int v = in() - 1 , u = in() - 1;
            if (v > u ) swap(v,u);
            if (_ == 0 ) edges.insert({v,u});
            g[_][v].push_back(u);
            g[_][u].push_back(v);
            if (_ == 1 && edges.find(make_pair(v,u)) != edges.end()) merge(v,u);
        }
    }
    dfs(0,0,-1);
    dfs(0,1,-1);
    cout << cur << endl;
    for (int i = 0 ; i < cur ; i ++)
        cout << ans[i].first.first << " " << ans[i].first.second << " " << ans[i].second.first << " " << ans[i].second.second << "\n";
}
