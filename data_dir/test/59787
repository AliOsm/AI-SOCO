#include <iostream>
#include <vector>

using namespace std;

int p[500500];
int a[500500];
int res[500500];
vector<pair<int,int> > qs[500500];

class node
{
    public:
    node* l;
    node* r;
    int val;
    node(int li,int ri)
    {
        val=1e9;
        if (li+1==ri)
            return;
        int mi=(li+ri)>>1;
        l=new node(li,mi);
        r=new node(mi,ri);
    }
    void upd(int li,int ri,int ind,int nval)
    {
        if (li+1==ri)
            val=nval;
        else
        {
            int mi=(li+ri)>>1;
            if (ind<mi)
                l->upd(li,mi,ind,nval);
            else
                r->upd(mi,ri,ind,nval);
            val=min(l->val,r->val);
        }
    }
    int que(int li,int ri,int l,int r)
    {
        //cout << li << ' ' << ri << ' ' << l << ' ' << r << endl;
        if (l>=r)
            return 1e9;
        if (li==l&&ri==r)
        {
            //cout << val << endl;
            return val;
        }
        int mi=(li+ri)>>1;
        return min(
            this->l->que(li,mi,l,min(mi,r)),
            this->r->que(mi,ri,max(mi,l),r)
        );
    }
};

int A(int i)
{
    if (i<0)
        return -i;
    return a[i];
}

int main()
{
    int n;
    scanf("%d",&n);
    for (int i=0;i<n;i++)
    {
        scanf("%d",a+i);
        p[a[i]]=-a[i];
    }
    int q;
    scanf("%d",&q);
    for (int i=0;i<q;i++)
    {
        int l,r;
        scanf("%d",&l);
        scanf("%d",&r);
        qs[r-1].push_back({l-1,i});
    }
    node* tree = new node(0,n);
    for (int i=0;i<n;i++)
    {
        if (p[a[i]]>=0)
            tree->upd(0,n,p[a[i]],p[a[i]]);
        tree->upd(0,n,i,p[a[i]]);
        p[a[i]]=i;
        for (auto qu:qs[i])
        {
            int l=qu.first;
            int ind=qu.second;
            int f=tree->que(0,n,l,i+1);
            if (f<l)
            {
                res[ind]=A(f);
            }
            else
                res[ind]=0;
        }
        //cout << endl;
    }
    for (int i=0;i<q;i++)
    {
        printf("%d\n",res[i]);
    }
    return 0;
}
