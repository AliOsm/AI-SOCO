#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef vector<pii> vii;
typedef vector<bool> vb;
typedef vector<string> vs;
const int di[] = { -1, 0, 1, 0, -1, 1, 1, -1 };
const int dj[] = { 0, 1, 0, -1, -1, 1, -1, 1 };
const ll MOD = 1e9 + 7;
const ll INF = 1e9;
const long double EPS = 1e-10;
#define all(n) n.begin(),n.end()

int gcd(int a, int b) {
	return b == 0 ? a : gcd(b, a % b);
}

struct Angle {
	ll x, y;

	Angle() {}

	Angle(ll x, ll y) {
		ll g = gcd(x, y);
		x /= g;
		y /= g;
		this->x = x;
		this->y = y;
	}

	bool operator < (Angle other) const {
		if (x != other.x)
			return x < other.x;
		return y < other.y;
	}
};

int n;
vii p;

bool solve(pii org) {
	map<Angle, vi> cnt;
	for (int i = 0; i < n; i++) {
		if (p[i] != org)
			cnt[Angle(p[i].first - org.first, p[i].second - org.second)].push_back(i);
	}

	int mx = 0;
	Angle mxangle;
	for (auto& i : cnt)
		if (i.second.size() > mx)
			mx = i.second.size(), mxangle = i.first;

	if (mx == 1) {
		return false;
	}

	vi v = cnt[mxangle];
	vb vis(n); vis[0] = true;
	for (int i = 0; i < v.size(); i++) {
		vis[v[i]] = true;
	}

	int c = 0;
	while (c < n && vis[c]) c++;
	cnt.clear();
	for (int i = c + 1; i < n; i++) {
		if (!vis[i])
			cnt[Angle(p[i].first - p[c].first, p[i].second - p[c].second)].push_back(i);
	}

	return cnt.size() <= 1;
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n;
	p.resize(n);
	for (int i = 0; i < n; i++) {
		cin >> p[i].first >> p[i].second;
	}

	if (n <= 4) {
		cout << "YES\n"; return 0;
	}

	bool yes = false;
	for (int i = 0; i < 5 && i < n; i++) {
		yes = solve(p[i]);
		if (!yes) continue;
		cout << "YES" << endl;
		break;
	}
	if (!yes) cout << "NO" << endl;
	cin.ignore(), cin.get();
}
