#include<bits/stdc++.h>
#define xx first
#define yy second
#define mp make_pair
#define pb push_back
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
const int MAXN=5e5+5;
const int INF=0x3f3f3f3f;
struct node
{
	int b,i,r;
	bool operator < (const node &o)const
	{
		return b>o.b;
	}
}sv[MAXN];
int tot=0;
int HASH[MAXN];
int getid(int x)
{
	int pos=lower_bound(HASH+1,HASH+1+tot,x)-HASH;
	return pos;
}
template<typename Tp>
struct BIT
{
    Tp a[MAXN];
    int sz;
    void init(int n)
    {
        sz=n;
        memset(a,0,sizeof(a));
    }
    inline int lowbit(int x)
    {
        return x&(-x);
    }
    Tp query(int x)
    {
        Tp ans=0;
        for(;x;x-=lowbit(x))ans=max(ans,a[x]);
        return ans;
    }
    void update(int x,Tp v)
    {
        for(;x<=sz;x+=lowbit(x))
            a[x]=max(a[x],v);
    }
};
BIT<int> bt;
int main()
{
	//freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	int n;
	scanf("%d",&n);
	bt.init(n);
	for(int i=1;i<=n;i++)
		scanf("%d",&sv[i].b);
	for(int i=1;i<=n;i++)
		scanf("%d",&sv[i].i);
	for(int i=1;i<=n;i++)
		scanf("%d",&sv[i].r);
	for(int i=1;i<=n;i++)
	{
		HASH[++tot]=sv[i].i;
	}
	sort(HASH+1,HASH+1+tot);
	tot=unique(HASH+1,HASH+1+tot)-HASH-1;
	for(int i=1;i<=n;i++)
		sv[i].i=tot-getid(sv[i].i)+1;
	sort(sv+1,sv+1+n);
	int ans=0;
	sv[0].b=-1;
	int last=1;
	for(int i=1;i<=n;i++)
	{
		if(sv[i].b!=sv[i-1].b)
		{
			for(int j=last;j<i;j++)
				bt.update(sv[j].i,sv[j].r);
			last=i;
		}
		int mx=bt.query(sv[i].i-1);
		if(mx>sv[i].r) ans++;
	}
	printf("%d\n",ans);
	return 0;
}
