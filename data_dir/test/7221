

#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>

using namespace std;



#define pb push_back
#define pii pair<int, int>
#define mp make_pair
#define ull unsigned long long
#pragma comment(linker, "/STACK:64000000")
#define null NULL
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define fornr(i, n) for (int i = (n); i >= 0; --i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)
#define all(a) a.begin(), a.end()
#define vi vector<int>
#define v(a) vector<a>

//typedef long double ld;
typedef long double ld;
typedef pair<ld, ld> pldld;
typedef long long ll;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;


typedef unsigned int ui;
typedef unsigned char uc;
const int infi = 1e9 + 7;
const ll infl = 1e18 + 7;

string s = "What are you doing at the end of the world? Are you busy? Will you save us?";
string s1 = "What are you doing while sending \"";
string s2 = "\"? Are you busy? Will you send \"";
string s3 = "\"?";

ll sz[100500];

int main() {
	ios_base::sync_with_stdio(false);
	//cin.sync_with_stdio(false);
	cin.tie(0);
	//freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
	//freopen("suftree.in", "r", stdin); freopen("suftree.out", "w", stdout);
	sz[0] = s.size();
	for (int i = 1; i < 100500; ++i) {
		sz[i] = sz[i - 1] * 2 + s1.size() + s2.size() + s3.size();
		sz[i] = min(sz[i], infl * 2);
	}
	int q;
	cin >> q;
	forn(asda, q) {
		int n;
		cin >> n;
		ll k;
		cin >> k;
		--k;
		char ans = 0;
		while (n) {
			if (k < s1.size()) {
				ans = s1[k];
				break;
			}
			k -= s1.size();
			if (k < sz[n - 1]) {
				--n;
				continue;
			}
			k -= sz[n - 1];
			if (k < s2.size()) {
				ans = s2[k];
				break;
			}
			k -= s2.size();
			if (k < sz[n - 1]) {
				--n;
				continue;
			}
			k -= sz[n - 1];
			if (k < s3.size()) {
				ans = s3[k];
				break;
			}
			ans = '.';
			break;
		}
		if (ans == 0)
			if (k < s.size())
				ans = s[k];
			else
				ans = '.';
		cout << ans;
	}
	
	return 0;
}