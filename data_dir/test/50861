#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <memory.h>
#include <ctime>
#include <bitset>
#include <unordered_map>
#include <unordered_set>

using namespace std;

#define ABS(a) ((a>0)?a:-(a))
#define MIN(a,b) ((a<b)?(a):(b))
#define MAX(a,b) ((a<b)?(b):(a))
#define FOR(i,a,n) for (int i=(a);i<(n);++i)
#define FI(i,n) for (int i=0; i<(n); ++i)
#define pnt pair <int, int>
#define mp make_pair
#define PI 3.1415926535897
#define MEMS(a,b) memset(a,b,sizeof(a))
#define LL long long
#define U unsigned

int dp[4][1010][1010];
int a[1010][1010];
int n, m;
int dx[] = { 0, 0, 1, -1 };
int dy[] = { 1, -1, 0, 0 };

void upd(int x, int y, int v)
{
	while ((x >= 0) && (y >= 0) && (x < n) && (y < m))
	{
		if (a[x][y] == 1)
		{
			dp[v][x][y] = 1;
			int nx = x + dx[v ^ 1];
			int ny = y + dy[v ^ 1];
			if ((nx >= 0) && (nx < n) && (ny >= 0) && (ny < m))
				dp[v][x][y] += dp[v][nx][ny];
		}
		else
			dp[v][x][y] = 0;
		x += dx[v];
		y += dy[v];
	}
}

int calc(int x, int y, int v)
{
	int nv1 = (v+2) % 4;
	int nv2 = nv1 ^ 1;
	int cnt = 0;
	int val1 = 1000000000;
	int val2 = 1000000000;
	int res = 0;
	while ((x >= 0) && (y >= 0) && (x < n) && (y < m))
	{
		cnt++;
		val1 = MIN(val1, dp[nv1][x][y]);
		val2 = MIN(val2, dp[nv2][x][y]);
		res = MAX(res, (val1+val2-1)*cnt);
		x += dx[v];
		y += dy[v];
	}
	return res;
}

int main()
{
#ifdef Fcdkbear
	freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);
	double beg = clock();
#endif

	int q;
	scanf("%d%d%d", &n, &m, &q);
	FOR(i,0,n)
		FOR(j, 0, m)
		{
			scanf("%d", &a[i][j]);
		}
	FOR(i, 0, n)
	{
		upd(i, 0, 0);
		upd(i, m - 1, 1);
	}
	FOR(i, 0, m)
	{
		upd(0, i, 2);
		upd(n - 1, i, 3);
	}
	FOR(i, 0, q)
	{
		int op, x, y;
		scanf("%d%d%d", &op, &x, &y);
		x--;
		y--;
		if (op == 1)
		{
			a[x][y] ^= 1;
			upd(x, 0, 0);
			upd(x, m - 1, 1);
			upd(0, y, 2);
			upd(n - 1, y, 3);
		}
		else
		{
			int res = 0;
			res = max(res, calc(x, y, 0));
			res = max(res, calc(x, y, 1));
			res = max(res, calc(x, y, 2));
			res = max(res, calc(x, y, 3));
			printf("%d\n", res);
		}
	}

#ifdef Fcdkbear
	double end = clock();
	fprintf(stderr, "*** Total time = %.3lf ***\n", (end - beg) / CLOCKS_PER_SEC);
#endif
	return 0;
}