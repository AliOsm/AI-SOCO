#include <cstdio>

#include <cmath>

#include <cstring>

#include <iostream>

#include <algorithm>

#include <queue>

#include <vector>

#include <map>



using namespace std;



typedef long long LL;



const int INF=1e9;


struct Node
{
	LL x,bj,id;
	bool operator < (const Node &a) const
	{
		return x>a.x;
	}
}dq;
int n,k,x;
LL a[200005];
int s,id;

int main()

{
	scanf("%d%d%d",&n,&k,&x);
	for (int i=1;i<=n;++i) scanf("%I64d",&a[i]);
	s=0;
	for (int i=1;i<=n;++i) if (a[i]<0) s++;
	if (s%2==0)
	{
		id=1;
		for (int i=1;i<=n;++i) if (abs(a[i])<abs(a[id])) id=i;
		if (a[id]<0)
		{
			while (k>0&&a[id]<=0)
			{
				k--;
				a[id]+=x;
			}
		}
		else
		{
			while (k>0&&a[id]>=0)
			{
				k--;
				a[id]-=x;
			}
		}
	}
	for (int i=1;i<=n;++i)
	{
		if (a[i]==0&&k>0)
		{
			a[i]+=x;
			k--;
		}
	}
	priority_queue<Node> q;
	for (int i=1;i<=n;++i)
	{
		if (a[i]>=0)
		{
			dq.x=a[i];dq.bj=1;dq.id=i;
		}
		else
		{
			dq.x=-a[i];dq.bj=-1;dq.id=i;
		}
		q.push(dq);
	}
	for (int i=1;i<=k;++i)
	{
		dq=q.top();
		q.pop();
		if (dq.bj==1)
		{
			a[dq.id]+=x;
			dq.x+=x;
			q.push(dq);
		}
		else
		{
			a[dq.id]-=x;
			dq.x+=x;
			q.push(dq);
		}
	}
	for (int i=1;i<=n;++i) printf("%I64d ",a[i]);
	return 0;

}