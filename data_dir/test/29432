/**
SXR0aXAkI0JwbXptI3FhI3Z3I293bCNqY2IjUG0jMCNicG0jVHFkcXZvLyNCcG0jQW10bjBhY2phcWFicXZvLyNNYm16dml0MSNWdyNhdGN1am16I2tpdiNhbXF9bSNQcXUjVnd6I0F0bW14MSNQcWEjaXptI2l0dCNicHF2b2EjUXYjYnBtI3BtaWRtdmEjaXZsI3d2I21pemJwMSNFcHcjcWEjYnBtem0ja2l2I3F2Ym16a21sbSNRdiNQcWEjeHptYW12a20jbXtrbXhiI0lhI3BtI3htenVxYmJtYnBHI1BtI3N2d2VtYnAjRXBpYiMraXh4bWl6bWJwI2J3I1BxYSNrem1pYmN6bWEjSWEsI0ptbnd6bSN3eiNJbmJteiN3eiNKbXBxdmwjYnBtdTEjVnd6I2FwaXR0I2JwbXwja3d1eGlhYSNJY29wYiN3biNwcWEjc3Z3ZXRtbG9tI017a214YiNpYSNQbSNlcXR0bWJwMSNQcWEjYnB6d3ZtI2x3YnAjbXtibXZsI1dkbXojYnBtI3BtaWRtdmEjSXZsI3d2I21pemJwLyNpdmwjUG0jbm1tdG1icCNWdyNuaWJxb2NtI3F2I29jaXpscXZvI0l2bCN4em1hbXpkcXZvI2JwbXUvI053eiNQbSNxYSNicG0jVXdhYiNQcW9wMSNCcG0jQWN4em11bSMrcXYjb3R3enwsMQ==
*/
#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <queue>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>

#define F first
#define S second
#define endl '\n'
#define deb(x) cout<<#x<<' '<<x<<endl;
#define pb push_back


#ifdef IZI_KATKA
#define int __int64_t
#else
#define int __int64
#endif


const long long MOD = 1e9 + 7;
const long long MAXN = 1e6 + 1;
using namespace std;

typedef long long ll;

long long readInt() {
    bool minus1 = false;
    long long result = 0;
    char ch;
    ch = getchar();
    while (true) {
        if (ch == '-') break;
        if (ch >= '0' && ch <= '9') break;
        ch = getchar();
    }
    if (ch == '-') minus1 = true; else result = ch-'0';
    while (true) {
        ch = getchar();
        if (ch < '0' || ch > '9') break;
        result = result*10 + (ch - '0');
    }
    if (minus1)
        return -result;
    else
        return result;
}

int p;

#define matrix vector<vector<long long>>


void resize(matrix &a, long long n, long long m)
{
    a.resize(n);
    for(long long i = 0; i < n; ++i)
        a[i].resize(m);
}

matrix eye(long long n)
{
    matrix tmp;
    resize(tmp, n, n);
    for(long long i = 0; i < n; ++i)
        tmp[i][i] = 1LL;
    return tmp;
}

matrix operator * (const matrix &a, const matrix &b)
{
    matrix c;
    resize(c, (long long)a.size(), (long long)b[0].size());

    for(long long i = 0; i < a.size(); ++i)
    {
        for(long long j = 0; j < b[0].size(); ++j)
        {
            for(long long k = 0; k < a[0].size(); ++k)
            {
                c[i][j] = ((((c[i][j] + p)%p) + ((a[i][k] * b[k][j]) % p))) % p;
            }
        }
    }
    return c;
}

matrix binpow(matrix a, long long y)
{
    matrix res = eye(a.size());
    while(y)
    {
        if(y & 1) {
            res = res * a;
        }
        a = a * a;
        y >>= 1;
    }
    return res;
}

int a[MAXN];

main() {
	#ifdef IZI_KATKA
	assert(freopen("input", "r", stdin));
    assert(freopen("output", "w", stdout));
    #endif
    int n = readInt(), x = readInt(), y = readInt();
    p = readInt();
    int mx1 = 0;
    int mx2 = 0;
    int first = 0;
    int sum = 0;
    int last = 0;
	for (int i = 1; i <= n; i++) {
		a[i] = readInt();
		if (i == n) {
			last = a[i];
			mx1 = a[i];
		}
		if (i == 1) {
			first = a[1];
		}
		if (i == n - 1) {
			mx2 = a[i];
		}
		sum += a[i];
		sum %= p;
	}
	matrix ans;
	resize(ans, 5, 5);
	ans[0][0] = 3; 
	ans[0][3] = ans[0][4] = -1;
    ans[4][4] = 1;
    ans[3][3] = 1;
    ans[1][2] = ans[1][1] = 1;
    ans[2][1] = 1;
    ans = binpow(ans, x);
    vector <long long> g;
	g.push_back(sum);
	g.push_back(mx1);
	g.push_back(mx2);
	g.push_back(last);
	g.push_back(first);
	vector <long long> vec;
    for (long long i = 0; i < 5; i++) {
		long long res = 0;
		for (long long j = 0; j < 5; j++) {
			res += (ans[i][j] * g[j]) % p;
			res %= p;
		}
		vec.push_back(res);
	}
	ans[0][0] = 3; 
	ans[0][3] = ans[0][4] = -1;
    ans[4][4] = 1;
    ans[3][3] = 1;
    ans[1][2] = ans[1][1] = 1;
    ans[2][1] = 1;
    ans = binpow(ans, y);
	g.clear();
	g.push_back(vec[0]);
	g.push_back(vec[1]);
	g.push_back(vec[2]);
	g.push_back(vec[1]);
	g.push_back(vec[4]);
	for (long long i = 0; i < 5; i++) {
		long long res = 0;
		for (long long j = 0; j < 5; j++) {
			res += (ans[i][j] * g[j]) % p;
			res += p;
			res %= p;
		}                  
		cout << (res+p)%p;
		return 0;
	}                 
    return 0;
}