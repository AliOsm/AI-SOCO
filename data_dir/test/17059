#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <memory.h>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 1e18+7;
const long long mod = 1e9+7;
const double eps = 1e-12;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (ll (i)=0;(i)<(ll)(n);(i)++)
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n, m;

int a[10005], l[10005], r[10005], sz;
int id[1000005];
vector<int> g[1005];

int bound[10005], s;
int num[10005];

int dist[1005][3005];

int main(void) {
  #ifndef ONLINE_JUDGE
      freopen("input.txt","rt",stdin);
      freopen("output.txt","wt",stdout);
  #endif
  scanf("%d%d", &n, &m);
  forn(i, m){
    int A, B, L, R;
    scanf("%d%d%d%d", &A, &B, &L, &R);
    --A; --B;
    g[A].pb(sz); a[sz] = B; l[sz] = L; r[sz++] = R;
    g[B].pb(sz); a[sz] = A; l[sz] = L; r[sz++] = R;
    bound[s++] = L;
  }
  bound[s++] = 1;
  sort(bound, bound + s);
  int tmp = s;
  s = 0;
  num[s++] = bound[0];
  id[bound[0]] = 0;
  for(int i = 1; i < tmp; ++i){
    if(bound[i] != bound[i - 1]){
      num[s++] = bound[i];
      id[bound[i]] = s - 1;
    }
  }
  int res = 0;
  forn(i, 1005){
    forn(j, 3005){
      dist[i][j] = 0;
    }
  }
  dist[0][0] = mod;
  set< pair<int, pair<int, int> > > S;
  S.insert(mp(mod, mp(0, 0)));
  while(!S.empty()){
    int x = (*S.rbegin()).S.F;
    int y = (*S.rbegin()).S.S;
    int val = (*S.rbegin()).F;
    S.erase(--S.end());
    int L = num[y], R = L + val - 1;
    forn(i, g[x].size()){
      int to = a[g[x][i]];
      int cl = l[g[x][i]], cr = r[g[x][i]];
      int nl = id[max(cl, L)], size = min(R, cr) - max(L, cl) + 1;
      if(dist[to][nl] < size){
        S.erase(mp(dist[to][nl], mp(to, nl)));
        dist[to][nl] = size;
        S.insert(mp(dist[to][nl], mp(to, nl)));
      }
    }
  }
  forn(i, s){
    res = max(res, dist[n - 1][i]);
  }
  if(!res){
    puts("Nice work, Dima!");
  } else {
    printf("%d\n", res);
  }
  return 0;
}
