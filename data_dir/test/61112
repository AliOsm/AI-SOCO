#include <bits/stdc++.h>
#define LL long long
#define VI vector<int>
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define INF 0x3f3f3f3f
#define ULL unsigned long long
#define onbits __builtin_popcountll
using namespace std;
const int MAXN = 100000;
VI g[MAXN+10];
int A[MAXN+10];
int n;
LL d[2][MAXN+10];
void dfs(int cur, int prev, int bit, LL& ans){
	if(A[cur] & (1<<bit)) d[1][cur] += 1LL;
	else d[0][cur] += 1LL;
	LL ones = 0LL, zeros = 0LL;
	for(int i = 0; i < (int)g[cur].size(); i++){
		int next = g[cur][i];
		if(next == prev) continue;
		dfs(next, cur, bit, ans);
		ones += d[1][next]; zeros += d[0][next];
	}
	//printf("%d %lld %lld\n", cur, zeros, ones);
	LL comb = 0LL;
	for(int i = 0; i < (int)g[cur].size(); i++){
		int next = g[cur][i];
		if(next == prev) continue;
		int x = (bool)(A[cur] & (1<<bit)) ^ 0;
		d[x][cur] += d[0][next];
		x = (bool)(A[cur] & (1<<bit)) ^ 1;
		d[x][cur] += d[1][next];

		if(!(A[cur] & (1<<bit))){
			comb += (1<<bit) * (d[0][next] * (ones - d[1][next]));
			comb += (1<<bit) * (d[1][next] * (zeros - d[0][next]));
		}else{
			comb += (1<<bit) * (d[0][next] * (zeros - d[0][next]));
			comb += (1<<bit) * (d[1][next] * (ones - d[1][next]));
		}
	}
	comb >>= 1LL;
	ans += (1<<bit)* d[1][cur];
	ans += comb;
}
int main(){
	scanf("%d", &n);
	for(int i = 1; i <= n; i++) scanf("%d", &A[i]);
	for(int i = 0; i < n -1; i++){
		int x, y;
		scanf("%d %d", &x, &y);
		g[x].pb(y); g[y].pb(x);
	}
	LL ans = 0LL;
	for(int i = 0; i < 21; i++){
		memset(d, 0LL, sizeof(d));
		dfs(1,1,i,ans);
	}
	printf("%lld\n", ans);
	return 0;
}