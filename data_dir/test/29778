#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

struct state {int t,f;};
#define T (1<<17)
state tree[2*T];

int s[100010],f[100010],t[100010],l[100010],r[100010],b[100010];
map <int, int> t_id;
vector <pair <int, int> > tf;
map <pair <int, int>, int> tf_pos;
vector <pair <pair <pair <int, int>, pair <int, int> >, int> > query; // s,0,f,t,id or l,1,r,b,id
int ans[100010];

void update(int f, int t){
    int id = T + tf_pos[make_pair(t,f)];
    tree[id].t = t; tree[id].f = f;
    
    while(id > 1){
        id /= 2;
        tree[id].t = max(tree[id*2].t,tree[id*2+1].t);
        tree[id].f = max(tree[id*2].f,tree[id*2+1].f);
    }
}

int func(int r, int b, int id = 1, int L = 0, int R = T){
    if(tree[id].t < b || tree[id].f < r) return -1;
    if(id >= T) return t_id[tree[id].t];
    int tmp = func(r, b, 2*id, L, (L+R)/2);
    if(tmp != -1) return tmp;
    return func(r, b, 2*id+1, (L+R)/2, R);
}

int main(void){
    int N,Q,i;
    
    scanf("%d%d",&N,&Q);
    REP(i,N) scanf("%d%d%d",&s[i],&f[i],&t[i]);
    REP(i,Q) scanf("%d%d%d",&l[i],&r[i],&b[i]);
    
    REP(i,N) t_id[t[i]] = i + 1;
    REP(i,N) tf.push_back(make_pair(t[i],f[i]));
    sort(tf.begin(),tf.end());
    REP(i,N) tf_pos[tf[i]] = i;
    
    REP(i,N) query.push_back(make_pair(make_pair(make_pair(s[i],0),make_pair(f[i],t[i])),i));
    REP(i,Q) query.push_back(make_pair(make_pair(make_pair(l[i],1),make_pair(r[i],b[i])),i));
    sort(query.begin(),query.end());
    
    REP(i,2*T) tree[i].t = tree[i].f = 0;
    
    REP(i,N+Q){
        if(query[i].first.first.second == 0){
            update(query[i].first.second.first,query[i].first.second.second);
        } else {
            ans[query[i].second] = func(query[i].first.second.first,query[i].first.second.second);
        }
    }
    
    REP(i,Q) printf("%d\n",ans[i]);
    
    return 0;
}
