#include "bits/stdc++.h"
#include "ext/pb_ds/tree_policy.hpp"
#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){ 
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}

struct node{
	node*nxt[26];
};
int k;
char use[100];
struct trie{
	node no[1510*1510];
	node*root;
	int cnt;
	node*newnode(){
		return &no[cnt++];
	}
	trie(){
		cnt = 0;
		root = newnode();
	}
	void insert(string s){
		reverse(all(s));
		node*cur = root;
		int le = k;
		for(auto i:s){
			i-='a';
			if(use[i]){
				if(!cur->nxt[i])cur->nxt[i] = newnode();
			}else{
				if(le==0)return;
				le--;
				if(!cur->nxt[i])cur->nxt[i] = newnode();
			}
			cur = cur->nxt[i];
		}
	}

};

trie tree;
int main(){
	string s;cin>>s;
	scanf("%s",use);REP(i,0,26)use[i]-='0';
	cin>>k;
	while(sz(s)){
		tree.insert(s);s.pop_back();
	}
	cout<<tree.cnt-1<<endl;
	return 0;
}