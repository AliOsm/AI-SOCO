#include <bits/stdc++.h>
using namespace std;

int n, m;
vector<int> tr[100005];
int p[100005];
int L[100005];
int T;
int t[100005];
int want[100005];
int ow[100005];


void dfs(int i, int l)
{
	L[i] = l;
	for (int j = 0; j < tr[i].size(); j++)
	{
		dfs(tr[i][j], l+1);
	}
}


bool valid(int i, int mn)
{
	L[i] = 1;
	if (t[i] < t[mn])
		mn = i;
	if (ow[i] != mn)
		return false;
	for (int j = 0; j < tr[i].size(); j++)
	{
		if (!valid(tr[i][j], mn))
			return false;
	}
	return true;
}

bool cmp(int x, int y)
{
	return L[x] < L[y] || (L[x] == L[y] && x < y);
}
int sz;
bool init()
{
	T = 0;
	memset(L, -1, sizeof(L));
	for (int i = 0; i < n; i++)
		t[i] = 1000000000;
	for(int i = 0; i < n; i++)
	{
		int x = i;
		if (L[i] == -1)
		{
			while (p[x] != -1)
				x = p[x];
			dfs(x, 0);
		}
	}
	sort(want, want+n, cmp);
	sz = unique(want, want+n) - want;
	reverse(want, want+sz);
	for (int i = 0; i < sz; i++)
	{
		t[want[i]] = i;
	}
	memset(L, -1, sizeof(L));
	for(int i = 0; i < n; i++)
	{
		int x = i;
		if (L[i] == -1)
		{
			while (p[x] != -1)
				x = p[x];
			if (!valid(x, x))
				return false;
		}
	}
	return true;
}


int main()
{
	memset(p, -1, sizeof(p));
	scanf("%d %d", &n, &m);
	for (int i = 0; i < m; i++)
	{
		int x, y;
		scanf("%d %d", &x, &y);
		x--;
		y--;
		tr[x].push_back(y);
		p[y] = x;
	}
	for (int i = 0; i < n; i++)
	{
		scanf("%d", want+i);
		want[i]--;
		ow[i] = want[i];
	}
	bool val = init();
	if (val)
	{
		printf("%d\n", sz);
		for (int i = 0; i < sz; i++)
			printf("%d\n", want[i]+1);
	}
	else
		printf("-1\n");
}