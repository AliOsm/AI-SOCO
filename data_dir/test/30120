#include <bits/stdc++.h>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define forall(it, v) for(auto it = v.begin(); it != v.end(); ++it)
#define dforn(i, n) for(int i = ((int) n) - 1; i >= 0; i--)
#define db(v) cerr << #v << " = " << v << endl
#define pb push_back
typedef long long ll;
const int MAXN = 60050;

int n, start, x, A[MAXN], RESTAN = 2000;
int val[MAXN], nxt[MAXN];

void query(int v){
  if(val[v] != -1) return; // ya respondida;
  if(RESTAN <= 1){
    assert(false); // deberÃ­a guardarla para mostrar la respuesta
  }
  printf("? %d\n", v + 1);
  fflush(stdout);
  scanf("%d %d", &val[v], &nxt[v]);
  --nxt[v];
  RESTAN--;
}

void answer(int v){
  printf("! %d\n", val[v]);
  fflush(stdout);
  exit(0);
}

int main() {
  //~ freopen("output", "w", stdout);
  srand(time(0));
  memset(val, -1, sizeof val);
  memset(nxt, -1, sizeof nxt);
  
  scanf("%d %d %d", &n, &start, &x); --start;
  forn(i, n){
    A[i] = i;
  }
  
  query(start);
  
  if(val[start] >= x){
    answer(start);
  }
  
  random_shuffle(A, A + n);
  
  int best = -2000000000;
  int besti = start;
  forn(i, min(998, n)){
    query(A[i]);
    if(val[A[i]] < x && val[A[i]] > best){
      best = val[A[i]];
      besti = A[i];
    }
  }
  
  //~ printf("besti = %d, best = %d\n", besti, best);
  
  //~ assert(besti != -1);
  
  int t = besti; // < x y 0-indexado, siempre
  while(true){
    //~ printf("%d, val -> %d, nxt -> %d\n", t, val[t], nxt[t]);
    if(nxt[t] <= -1){
      printf("! -1\n");
      fflush(stdout);
      return 0;
    }
    t = nxt[t];
    query(t);
    if(val[t] >= x){
      answer(t);
    }
  }
  
  return 0;
}