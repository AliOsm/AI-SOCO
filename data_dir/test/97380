#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>
#include <tuple>
#include <chrono>

using namespace std;
using ll = long long;
using ull = unsigned long long;
const int oo = numeric_limits<int>::max() / 2;
mt19937 rnd(std::chrono::steady_clock::now().time_since_epoch().count());

int g[2010];

int main() {
	ios_base::sync_with_stdio(false);
  int n, m;
  cin >> n >> m;
  fill(g, g + 2010, -1);
  vector<int> p(2 * n);
  for(int i = 0; i < 2 * n; ++i) {
    cin >> p[i];
  }

  for(int i = 0; i < m; ++i) {
    int a, b;
    cin >> a >> b;
    --a;--b;
    g[a] = b;
    g[b] = a;
  }

  int t;
  cin >> t;
  --t;
  while(true) {
    if (t == 0) {
      int idx = -1;
      for(int i = 0; i < 2 * n; ++i) {
        if (g[i] == -1 || p[i] == -1) continue;
        if (idx == -1 || p[i] - p[g[i]] > p[idx] - p[g[idx]]) {
          idx = i;
        }
      }
      if (idx == -1) {
        for(int i = 0; i < 2 * n; ++i) {
          if (p[i] == -1) continue;
          if (idx == -1 || p[idx] < p[i]) {
            idx = i;
          }
        }
      }
      cout << idx + 1 << endl;
      cout.flush();
      p[idx] = -1;
      if (g[idx] != -1) {
        int j = g[idx];
        int y;
        cin >> y;
        if (y == -1) return 0;
        --y;
        if (y != j) throw new runtime_error("bad");
        g[idx] = -1;
        g[j] = -1;
        p[j] = -1;
      } else {
        t = 1;
      }
    } else {
      int idx;
      cin >> idx;
      if (idx == -1) return 0;
      --idx;
      p[idx] = -1;
      if (g[idx] != -1) {
        int j = g[idx];
        p[j] = -1;
        g[idx] = -1;
        g[j] = -1;
        cout << j + 1 << endl;
        cout.flush();
      } else {
        t = 0;
      }
    }

    int c = 0;
    for(int i = 0; i < 2 * n; ++i) {
      if (p[i] != -1) {
        c = 1;
        break;
      }
    }
    if (c == 0) break;
  }
  return 0;
}
