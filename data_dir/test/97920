#include <bits/stdc++.h>

using namespace std;
using namespace __gnu_cxx;

#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define REV(i,b,a) for(int i=(a);i>=(b);i--)
#define mp make_pair
#define pb push_back
#define oo (1<<30)
#define sz(v) (int)v.size()
#define all(c) (c).begin(),(c).end()
#define rall(c) (c).rbegin(),(c).rend()
#define mem(s,v) memset(s,v,sizeof(s))
#define ppc(x) __builtin_popcount((x))
#define iter(it,s) for(__typeof(s.begin())it = s.begin();it!=s.end();it++)

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<double> vd;
typedef vector<string> vs;
typedef pair<int, int> pi;
typedef vector<pi> vpi;

int dx[] = { 0, 0, 1, -1 };
int dy[] = { 1, -1, 0, 0 };

int main() {
#ifndef ONLINE_JUDGE
	freopen("test.in", "rt", stdin);
//	freopen("o.txt", "wt", stdout);
#endif
	ios::sync_with_stdio(0);
	int n, k, res = oo;
	string s;
	cin >> n >> k >> s;
  FOR (i , 0 , 10) {
    int x = i, y = i, c = 0, cnt = 0;
    while (x < 10 || y >= 0) {
      if (x < 10) {
        FOR (j , 0 , sz(s))
          if (s[j] - '0' == x && cnt < k)
            c += abs (i - x), cnt ++;
      }
      if (y >= 0 && x != y) {
        for (int j = sz(s) - 1; j >= 0; j --)
          if (s[j] - '0' == y && cnt < k)
            c += abs (i - y), cnt ++;
      }
      x ++, y --;
    }
    if (cnt == k)
      res = min (res, c);
  }
  cout << res << endl;
  string tmp = s;
  vs ans;
  FOR (i , 0 , 10) {
    int x = i, y = i, c = 0, cnt = 0;
    s = tmp;
    while (x < 10 || y >= 0) {
      if (x < 10) {
        FOR (j , 0 , sz(s))
          if (s[j] - '0' == x && cnt < k)
            c += abs (i - x), cnt ++, s[j] = i + '0';
      }
      if (y >= 0 && x != y) {
        for (int j = sz(s) - 1; j >= 0; j --)
          if (s[j] - '0' == y && cnt < k)
            c += abs (i - y), cnt ++, s[j] = i + '0';
      }
      x ++, y --;
    }
    if (cnt == k && c == res) {
      ans.pb(s);
    }
  }
  sort (all(ans));
  cout << ans[0] << endl;
	return 0;
}
