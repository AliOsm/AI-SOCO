#include <stdio.h>
#include <string.h>

#define N	1000000

int dsu[N];

int find(int i) {
	return dsu[i] < 0 ? i : (dsu[i] = find(dsu[i]));
}

void join(int i, int j) {
	i = find(i);
	j = find(j);
	if (i == j)
		return;
	if (dsu[i] > dsu[j])
		dsu[i] = j;
	else {
		if (dsu[i] == dsu[j])
			dsu[i]--;
		dsu[j] = i;
	}
}

int oo[1 + N * 2], oi[1 + N * 2], _;

int link(int o, int i) {
	oo[_] = o, oi[_] = i;
	return _++;
}

void print(int i_, int n) {
	static int qu[N];
	int r, i, cnt;

	r = find(i_), cnt = 0;
	for (i = 0; i < n; i++)
		if (find(i) == r)
			qu[cnt++] = i;
	printf("%d\n", cnt);
	while (cnt--)
		printf("%d ", qu[cnt] + 1);
	printf("\n");
}

int main() {
	int t;

	scanf("%d", &t);
	while (t--) {
		static int aa[N], ae[N + 1], af[N + 1];
		int n, i, j, a, b, k, l;

		scanf("%d", &n);
		for (i = 0; i < n; i++)
			scanf("%d", &aa[i]);
		for (i = 0; i < n; i++)
			if (aa[i] == 0) {
				printf("1\n");
				printf("%d\n", i + 1);
				goto end;
			}
		memset(dsu, -1, n * sizeof *dsu);
		memset(ae, 0, (n + 1) * sizeof *ae);
		memset(af, 0, (n + 1) * sizeof *af);
		_ = 1;
		k = l = 0;
		for (i = 0; i < n; i++) {
			a = aa[i];
			if (a > 0)
				ae[a] = link(ae[a], i), k++;
			else
				af[-a] = link(af[-a], i), l++;
		}
		a = b = n;
		while (1) {
			while (ae[a] == 0)
				a--;
			while (af[b] == 0)
				b--;
			if (a == b) {
				i = oi[ae[a]], j = oi[af[b]];
				join(i, j);
				print(i, n);
				break;
			}
			if (a < l)
				af[b] = oo[af[b]], l--;
			else if (b < k)
				ae[a] = oo[ae[a]], k--;
			else {
				int c;

				i = oi[ae[a]], j = oi[af[b]];
				join(i, j);
				ae[a] = oo[ae[a]], k--;
				af[b] = oo[af[b]], l--;
				c = a - b;
				if (c > 0)
					ae[c] = link(ae[c], i), k++;
				else
					af[-c] = link(af[-c], i), l++;
			}
		}
end:;
	}
	return 0;
}
