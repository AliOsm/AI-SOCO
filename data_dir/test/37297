#include<bits/stdc++.h>
#include<complex>
//#include <ext/pb_ds/assoc_container.hpp> 
//#include <ext/pb_ds/tree_policy.hpp>
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define INF 2000000000
#define MOD 1000000007
#define DESPACITO 1000000000000000000
#define PI acos(-1)
#define ll long long
#define pb push_back
#define mp make_pair
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define double long double
 
using namespace std;
using cd = complex<double>;
//using namespace __gnu_pbds;

//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;

int n,x;
int arr[200001];
int pre[200001];
vector<ll>poly1((1<<19),0);
vector<ll>poly2((1<<19),0);

void fft(vector<cd>&a,bool invert)
{
    int n = a.size();
    if(n == 1)
        return;
    for (int i = 1, j = 0; i < n; i++) 
    {
        int bit = n >> 1;
        for (; j & bit; bit >>= 1)
            j ^= bit;
        j ^= bit;
        if (i < j)
            swap(a[i], a[j]);
    }
    for(int len = 2;len<=n;len*=2)
    {
        double ang = (2*PI)/len * (invert?-1:1);
        cd wlen(cos(ang),sin(ang));
        for(int i = 0;i<n;i+=len)
        {
            cd w = 1;
            REP(j,0,len/2-1)
            {
                cd u = a[i+j];
                cd v = w*a[i+j+len/2];
                a[i+j] = u+v;
                a[i+j+len/2] = u-v;
                w*=wlen;
            }
        }
    }
    if(invert)
    {
        for(auto &it:a)
            it/=n;
    }
}

void multiply()
{
    int N = (1<<20);
    poly1.resize(N,0);
    poly2.resize(N,0);
    vector<cd>fa(poly1.begin(),poly1.end());
    vector<cd>fb(poly2.begin(),poly2.end());
    fft(fa,false);
    fft(fb,false);
    REP(i,0,N-1)
        fa[i] *= fb[i];
    fft(fa,true);
    REP(i,0,N-1)
        poly1[i] = floor(fa[i].real()+0.5);
}

int main()
{
    IOS;
    #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
    #endif
    cin >> n >> x;
    REP(i,1,n)
    {
        cin >> arr[i];
        pre[i] = pre[i-1];
        if(arr[i] < x)
        {
            pre[i]++;
            arr[i] = 1;
        }
        else
            arr[i] = 0;
    }
    int offset = 200000;
    REP(i,0,n)
    {
        poly1[pre[i]+offset]++;
        poly2[offset-pre[i]]++;
    }
    multiply();
    poly1[2*offset] = 0;
    ll len = 0;
    REP(i,1,n)
    {
        if(arr[i])
        {
            poly1[2*offset]+=(len*(len+1))/2;
            len = 0;
        }
        else
            len++;
    }
    poly1[2*offset]+=(len*(len+1))/2;
    REP(i,2*offset,2*offset+n)
        cout << poly1[i] << " ";
}
