#include <bits/stdc++.h>
using namespace std;

#define sz(x) (int)(x).size()
#define all(x) begin(x), end(x)

using ll = long long;
using ld = long double;

constexpr ll delim = 0x3FFFFFFF;

vector<ll> kmpPreprocessing(vector<ll>& sub) {
    vector<ll> b(sub.size() + 1);
    b[0] = -1;
    ll i = 0, j = -1;
    while (i < (ll)sub.size()) {
        while (j >= 0 && sub[i] != sub[j]) j = b[j];
        i++; j++;
        b[i] = j;
    }
    return b;
}
vector<ll> kmpSearch(vector<ll>& s, vector<ll>& sub) {
    vector<ll> pre = kmpPreprocessing(sub), result;
    ll i = 0, j = 0;
    while (i < (ll)s.size()) {
        while (j >= 0 && s[i] != sub[j]) j = pre[j];
        i++; j++;
        if (j == (ll)sub.size()) {
            result.push_back(i - j);
            j = pre[j];
    }}
    return result;
}

bool test(vector<ll>& a) {
    vector<ll> b(2 * a.size());
    for (ll i = 0; i < sz(a); i++) {
        b[i] = a[i];
        b[i + sz(a)] = a[i];
    }
    vector<ll> res = kmpSearch(b, a);
    for (ll x : res) {
        if (x % sz(a) != 0) return true;
    }
    return false;
}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    ll n, m;
    cin >> n >> m;
    vector<vector<ll>> offsets(n);
    for (ll i = 0; i < m; i++) {
        ll a, b;
        cin >> a >> b;
        a--;
        b--;
        if (a > b) swap(a, b);
        offsets[a].push_back(b - a);
        offsets[a].push_back(-(n - (b - a)));
        offsets[b].push_back(a - b);
        offsets[b].push_back(n - (b - a));
        //cout << a << "->" << b << " " << b-a << " " << -(n - (b - a)) << endl;
        //cout << b << "->" << a << " " << a-b << " " << (n - (b - a)) << endl;
    }
    vector<ll> a;
    for (ll i = 0; i < n; i++) {
        sort(all(offsets[i]));
        for (ll x : offsets[i]) {
            a.push_back(x);
        }
        a.push_back(delim);
    }
    /*for (ll x : a) {
        cout << x << " ";
    }
    cout << endl;*/
    cout << (test(a) ? "Yes" : "No") << endl;
}
