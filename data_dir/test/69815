//#pragma GCC optimize("O3")
#include <bits/stdc++.h>

using namespace std;

using ll = long long;

char s[200100];
int counts[200100][26];
char tmp[200100];
bool ana(int cur, int en){
    int cnt[26] = {};
    for (int i = cur; i <= en; ++i)
        ++cnt[s[i]-'a'],
        --cnt[tmp[i] - 'a'];
    for (int i = 0; i < 26; ++i)
        if (cnt[i]) return 0;
    return 1;
}
bool cant(int cur, int len, bool cut = 0){
    if (cur == len) return cut;
    bool can = 0;
    if (cut){
        for (int i = cur; i < len; ++i){
            if (ana(cur, i)) can |= cant(i + 1, len, 1);
        }
    }
    else {
        for (int i = cur; i < len - 1; ++i){
            if (ana(cur, i)) can |= cant(i + 1, len, 1);
        }
    }
    return can;
}
bool val(int len){
    if (!len) return 0;
    for (int i = 0; i < len; ++i)
        tmp[i] = s[i];
    tmp[len] = 0;
    sort(tmp, tmp + len);
    do
    {
        if (!cant(0, len)) return 1;
    }
    while (next_permutation(tmp, tmp + len));
    return 0;
}
void brute(int cur, int mx){
    if(cur == mx) return;
    if (val(cur) && cur){
        tmp[cur] = 0;
        int cnt[26] = {};
        for (int i = 0; i < cur; ++i)
            cnt[s[i]-'a']++;
        bool kk = 0;
        int let = 0;
        for (int j = 0; j < 26; ++j)
            let += bool(cnt[j]);
        bool one = 0;
        for (int j = 0; j < 26; ++j)
            one |= cnt[j] == 1;
        kk = let != 1 && (let > 2 || cnt[s[cur-1] - 'a'] == 1 || cnt[s[0] - 'a'] == 1 ) || cur == 1;
        if (let == 2){
            for (int j = 0; j < 26; ++j)
            if (s[0] - 'a' == j){
                bool bla = 1;
                for (int k = j; k < cnt[j]; ++k)
                    bla &= s[k]-'a' == j;
                kk |= bla;
            }
            kk |= s[0] != s[cur-1] ;
        }
        if (!kk)
            printf("%s %s\n", s, tmp);

        assert(kk);
    }else if (cur){
        tmp[cur] = 0;
        int cnt[26] = {};
        for (int i = 0; i < cur; ++i)
            cnt[s[i]-'a']++;
        bool kk = 0;
        int let = 0;
        for (int j = 0; j < 26; ++j)
            let += bool(cnt[j]);
        bool one = 0;
        for (int j = 0; j < 26; ++j)
            one |= cnt[j] == 1;
        kk = let != 1 && (let > 2 || cnt[s[cur-1] - 'a'] == 1 || cnt[s[0] - 'a'] == 1 ) || cur == 1;
        if (let == 2){
            for (int j = 0; j < 26; ++j)
            if (s[0] - 'a' == j){
                bool bla = 1;
                for (int k = j; k < cnt[j]; ++k)
                    bla &= s[k]-'a' == j;
                kk |= bla;
            }
            kk |= s[0] != s[cur-1] ;
        }
        if (kk)
            printf("%s %s\n", s, tmp);
        s[cur] = 0;
        assert(!kk);

    }
    for (int i = 0; i < 26; ++i)
        s[cur] = i + 'a',
        brute(cur + 1, mx);
}
int main()
{
//    brute(0, 8);
    scanf("%s", s);
    counts[0][s[0] - 'a'] = 1;
    for (int i = 1; s[i]; ++i){
        for (int j = 0; j < 26; ++j)
            counts[i][j] = counts[i-1][j];
        ++counts[i][s[i] - 'a'];
    }
    int q;
    scanf("%d", &q);
    int x, y;
    while (q--){
        scanf("%d%d", &x, &y);
        --x; --y;

        int let = 0;
        for (int i = 0; i < 26; ++i)
            let += bool(counts[y][i] - (x ? counts[x - 1][i]: 0));
        bool kk = let != 1 && (let > 2 || (counts[y][s[x] - 'a'] - (x? counts[x-1][s[x]-'a'] : 0)) == 1 || (counts[y][s[y] - 'a'] - (x? counts[x-1][s[y]- 'a']: 0)) == 1 ) || x == y;
        if (let == 2){
            for (int j = 0; j < 26; ++j)
                if (s[x] - 'a' == j){
                    kk |= counts[x + counts[y][j] - 1 - (x ? counts[x-1][j] : 0)][j] == counts[y][j];
                }
            kk |= s[x] != s[y] ;
        }

        if (kk) puts("YES");
        else puts("NO");
    }

    return 0;
}
