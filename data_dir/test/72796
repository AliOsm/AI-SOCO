#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
using namespace std;

typedef int64_t _64;

int a, b;


vector<int> l, r, t, d;
int dat[500001][2];

int L, R, T, D;

int main()
{
	ios::sync_with_stdio(false);
	
	int n;
	cin >> n;
	for (int i = 0; i < n; ++i)
	{
		cin >> dat[i][0] >> dat[i][1];
		if (!i)
		{
			L = R = dat[i][0];
			T = D = dat[i][1];
			l.push_back(0);
			r.push_back(0);
			t.push_back(0);
			d.push_back(0);
		}
		else
		{
			if (dat[i][0] <= L)
			{
				if (dat[i][0] < L) {
					L = dat[i][0];
					l.clear();
				}
				l.push_back(i);
			}
			if (dat[i][0] >= R)
			{
				if (dat[i][0] > R) {
					R = dat[i][0];
					r.clear();
				}
				r.push_back(i);
			}
			if (dat[i][1] <= T)
			{
				if (dat[i][1] < T) {
					T = dat[i][1];
					t.clear();
				}
				t.push_back(i);
			}
			if (dat[i][1] >= D)
			{
				if (dat[i][1] > D) {
					D = dat[i][1];
					d.clear();
				}
				d.push_back(i);
			}
		}
	}
	vector<int> p;
	for (int i = 0; i < l.size(); ++i)
		p.push_back(l[i]);
	for (int i = 0; i < r.size(); ++i)
		p.push_back(r[i]);
	for (int i = 0; i < d.size(); ++i)
		p.push_back(d[i]);
	for (int i = 0; i < t.size(); ++i)
		p.push_back(t[i]);

	int ans = 0;

	for (int i = 0; i < p.size(); ++i)
	{
		int ii = p[i];
		for (int j = i + 1; j < p.size(); ++j) {
			int jj = p[j];
			for (int k = 0; k <n; ++k)
			{
				int kk = k;
				int ll = min(dat[ii][0], min(dat[jj][0], dat[kk][0]));
				int rr = max(dat[ii][0], max(dat[jj][0], dat[kk][0]));
				int tt = min(dat[ii][1], min(dat[jj][1], dat[kk][1]));
				int dd = max(dat[ii][1], max(dat[jj][1], dat[kk][1]));

				ans = max(ans, 2 * (rr - ll + dd - tt));
			}
		}
	}
	cout << ans << ' ';
	for (int j = 0; j < n - 3; ++j)
		cout << 2 * (R - L + D - T) << ' ';
	return 0;
}