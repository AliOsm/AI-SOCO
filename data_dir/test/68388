#include <iostream>
#include <queue>

using namespace std;

int aa[1000001];

struct S {
	int l, r, a, d;
	bool lazy = false;
	S(int l, int r, int n) : l(l), r(r) {
		if (r - l > 1 && (l + 1 == 1 || r - 1 == n)) {
			a = l + 1 == 1 ? 1 : n;
			d = r - l - 1;
		} else {
			a = (l + r) / 2;
			d = (r - l) / 2;
		}
	}
};

bool compare(S *p, S *q) {
	return p->d != q->d ? q->d > p->d : p->a > q->a;
}

int main() {
	ios_base::sync_with_stdio(false);
	int n, m;
	cin >> n >> m;
	S **ll = new S*[n + 2];
	S **rr = new S*[n + 2];
	vector<S*> container;
	container.reserve(1 + m);
	priority_queue<S*, vector<S*>, bool (*)(S*, S*)> pq(compare, move(container));
	S *s = new S(0, n + 1, n);
	ll[n + 1] = rr[0] = s;
	pq.push(s);
	while (m-- > 0) {
		int t, id;
		cin >> t >> id;
		if (t == 1) {
			while ((s = pq.top())->lazy) {
				pq.pop(); delete s;
			}
			int a = s->a;
			aa[id] = a;
			cout << a << '\n';
			S *sl = new S(s->l, a, n);
			S *sr = new S(a, s->r, n);
			ll[a] = rr[s->l] = sl;
			rr[a] = ll[s->r] = sr;
			pq.pop(); delete s;
			pq.push(sl);
			pq.push(sr);
		} else {
			int a = aa[id];
			aa[id] = 0;
			S *sl = ll[a];
			S *sr = rr[a];
			ll[sr->r] = rr[sl->l] = s = new S(sl->l, sr->r, n);
			sl->lazy = sr->lazy = true;
			pq.push(s);
		}
	}
	return 0;
}
