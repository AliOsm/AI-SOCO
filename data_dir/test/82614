#include <algorithm>
#include <iostream>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdlib>
#include <cstdio>
#include <bitset>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

const int inf = 1e9 + 143;
const long long longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int K = 6;
const int N = 1010;

int k;
int p[K][N];
int loc[N][K];
int f[N];

bool good(int i,int j){
    for(int x = 0; x < k; x++)
        if(loc[i][x] >= loc[j][x])
            return false;
    return true;
}

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    int n = read();
    k = read();

    for(int i = 0; i < k; i++){
        for(int j = 1; j <= n; j++){
            p[i][j] = read();
            loc[p[i][j]][i] = j;
        }
    }

    for(int i = 1; i <= n; i++){
        for(int j = i + 1; j <= n; j++)
            if(loc[i][0] > loc[j][0]){
                for(int x = 0; x < k; x++)
                    swap(loc[i][x], loc[j][x]);
            }
    }

    int ans = 0;
    for(int i = 1; i <= n; i++){
        f[i] = 1;
        for(int j = 1; j < i; j++){
            if(good(j, i)){
                umax(f[i], f[j] + 1);
            }
        }
        umax(ans, f[i]);
    }
    cout << ans << endl;

    return 0;
}
