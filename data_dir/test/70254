#include <bits/stdc++.h>

#define LL long long
#define P 1000000007
#define pb push_back

using namespace std;

LL RES[2],NW[2],NN[2];
int k[100020];
int a[100020][2];
int ST,IS,NO;
vector < int > g[100020];
vector < int > vec[100020];
bool f[100020];

void solve1(int p,int u,int to,LL RES00,LL RES01,LL RES10,LL RES11)
 {
  f[u]=1;

  if (abs(a[u][0]) == to && a[u][0] < 0)
    { swap(RES00,RES10); swap(RES01,RES11); }
   if (k[u] == 2 && abs(a[u][1]) == to && a[u][1] < 0)
    { swap(RES00,RES10); swap(RES01,RES11); }

  LL NEW00,NEW01,NEW10,NEW11;

  if (k[u] == 1)
   {
    NEW00=(RES00)%P;
    NEW01=(RES01)%P;
    NEW10=(RES11)%P;
    NEW11=(RES10)%P;
    if (a[u][0] < 0)
     { swap(NEW00,NEW10); swap(NEW01,NEW11); }
   } else
   {
    NEW00=(RES00+RES11)%P;
    NEW01=(RES10+RES01)%P;
    NEW10=(RES01+RES11)%P;
    NEW11=(RES00+RES10)%P;

    if (abs(a[u][0]) != to && a[u][0] < 0)
      { swap(NEW00,NEW10); swap(NEW01,NEW11); }
    if (abs(a[u][1]) != to && a[u][1] < 0)
      { swap(NEW00,NEW10); swap(NEW01,NEW11); }
   }

  int nxtvec=vec[u][0];
  if (vec[u].size() == 2 && nxtvec == p) nxtvec=vec[u][1];

  if (nxtvec == p)
   {
    NW[0]=(RES[0]*(NEW10+NEW00)%P+RES[1]*(NEW11+NEW01)%P)%P;
    NW[1]=(RES[0]*(NEW11+NEW01)%P+RES[1]*(NEW10+NEW00)%P)%P;
    RES[0]=NW[0];
    RES[1]=NW[1];
    return;
   }

  int nxt=abs(a[u][0]);
  if (k[u] == 2 && to == nxt) nxt=abs(a[u][1]);

  solve1(u,nxtvec,nxt,NEW00,NEW01,NEW10,NEW11);
 }

void solve2(int p,int u,int to,LL RES00,LL RES01,LL RES10,LL RES11)
 {
  if (u == ST) { NO++; }
  f[u]=1;
  if (NO == 2)
   {
    if (IS)
    { NN[0]=(NN[0]+RES10)%P;
      NN[1]=(NN[1]+RES11)%P; } else
    { NN[0]=(NN[0]+RES00)%P;
      NN[1]=(NN[1]+RES01)%P; }
    return;
   }

  if (abs(a[u][0]) == to && a[u][0] < 0)
    { swap(RES00,RES10); swap(RES01,RES11); }
   if (k[u] == 2 && abs(a[u][1]) == to && a[u][1] < 0)
    { swap(RES00,RES10); swap(RES01,RES11); }

  LL NEW00,NEW01,NEW10,NEW11;

  NEW00=(RES00+RES11)%P;
  NEW01=(RES10+RES01)%P;
  NEW10=(RES01+RES11)%P;
  NEW11=(RES00+RES10)%P;

  if (abs(a[u][0]) != to && a[u][0] < 0)
    { swap(NEW00,NEW10); swap(NEW01,NEW11); }
  if (abs(a[u][1]) != to && a[u][1] < 0)
    { swap(NEW00,NEW10); swap(NEW01,NEW11); }

  int nxt=abs(a[u][0]);
  if (to == nxt) nxt=abs(a[u][1]);

  int nxtvec=vec[u][0];
  if (nxtvec == p || (abs(a[nxtvec][0])!=nxt && abs(a[nxtvec][1])!=nxt))
      nxtvec=vec[u][1];


  solve2(u,nxtvec,nxt,NEW00,NEW01,NEW10,NEW11);
 }

int n,m,i,j;

int main()
 {
  cin>>n>>m;
  for (i=1;i<=n;i++)
   {
    scanf("%d",&k[i]);
    for (j=0;j<k[i];j++)
     {
      scanf("%d",&a[i][j]);
      g[abs(a[i][j])].pb(i);
     }
   }

  RES[0]=1;
  RES[1]=0;
  LL ANS=1;

  for (i=1;i<=m;i++)
   {
    if (g[i].size() == 0) { ANS=(1LL*ANS*2LL)%P; continue; }
    if (g[i].size() == 2 && g[i][0] == g[i][1])
     {
      int u=g[i][0];
      if (a[u][0] != a[u][1])
       {
         swap(RES[0],RES[1]);
         RES[1]=(RES[1]*2LL)%P;
         RES[0]=(RES[0]*2LL)%P;
         continue;
       }
      LL SU=(RES[0]+RES[1])%P;
      RES[0]=RES[1]=SU;
      continue;
     }
    if (g[i].size() == 2)
     {
      vec[g[i][0]].pb(g[i][1]);
      vec[g[i][1]].pb(g[i][0]);
     }

   }

  for (i=1;i<=n;i++)
   if (vec[i].size() == 0)
    {
      if (k[i] == 1)
      {
       LL SU=(RES[0]+RES[1])%P;
       RES[0]=RES[1]=SU;
      } else
      if (k[i] == 2 && abs(a[i][0]) != abs(a[i][1]))
       {
        NW[0]=RES[0];
        NW[1]=RES[1];
        RES[0]=(NW[0]+NW[1]*3LL)%P;
        RES[1]=(NW[0]*3LL+NW[1])%P;
       }
     }
  for (i=1;i<=n;i++)
   if (!f[i] && vec[i].size() == 1)
    {
     int to=abs(a[i][0]);
     if (k[i] >= 2 && g[to].size() > 1) to=abs(a[i][1]);
     solve1(0,i,to,1,0,1,0);
    }

  for (i=1;i<=n;i++)
   if (vec[i].size() == 2 && !f[i])
    {
     int to=abs(a[i][1]);
     ST=i;
     NN[0]=0; NN[1]=0;
     IS=0; NO=0; solve2(0,i,to,1,0,0,0);
     IS=1; NO=0; solve2(0,i,to,0,0,1,0);
     NW[0]=((RES[0]*NN[0])%P+(RES[1]*NN[1])%P)%P;
     NW[1]=((RES[0]*NN[1])%P+(RES[1]*NN[0])%P)%P;
     RES[0]=NW[0];
     RES[1]=NW[1];
    }

  RES[1]=(RES[1]*ANS)%P;
  cout<<RES[1]<<endl;

 }
