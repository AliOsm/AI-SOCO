#include<bits/stdc++.h>
#define fr first
#define sc second
#define pb push_back
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int> >
#define ll long long
const int inf = 1e8;
const ll INF = 1e18;
const int MAXN = 3e5 + 200;
const  long double eps = 1e-9;
const long double pi = acos(-1.0);
using namespace std;

int dx[] = {0, 0, 1, -1, 1, 1, -1, -1};
int dy[] = {1, -1, 0, 0, 1, -1, 1 -1};

int n, k;
int a[MAXN], b[MAXN];
void solve(){
    cin >> n >> k;
    for (int i = 1; i <= n; i++) b[i] = 0;
    for (int i = 1; i <= n; i++) cin >> a[i];
    for (int i = 2; i <= n - 1; i++){
        b[i] = b[i - 1];
        if (a[i - 1] < a[i] && a[i] > a[i + 1])
            b[i]++;
    }
    b[n] = b[n - 1];
    //for (int i = 1; i <= n; i++) cout << b[i] << " ";
    //cout << endl;
    int mx = 0;
    int ind = 1;
    for (int i = 1; i <= n - k + 1; i++){
        int kol = b[i + k - 1] - b[i - 1];
        if (b[i + k - 1] != b[i + k - 2]) kol--;
        if (b[i] != b[i - 1]) kol--;
        //if (i == 2) cout << kol << " " << b[i + k - 1] - b[i - 1] << endl;
        if (kol  + 1> mx){
            mx = kol + 1;
            ind = i;
        }
    }
    swap(ind, mx);
    cout << ind << " " << mx << endl;
}


int main(){
    ios::sync_with_stdio(NULL), cin.tie(0), cout.tie(0);
    cout.setf(ios::fixed), cout.precision(40);
    //freopen("inevit.in", "r", stdin);
    //freopen("inevit.out", "w", stdout);
    int step;
    step = 1;
    cin >> step;
    for (int i = 1; i <= step; i++)
        solve();


}
