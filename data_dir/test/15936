#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
 
#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2
 
#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound
 
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;
 
template <class T1, class cmp = less <T1>> using Tree = tree <T1, null_type, cmp, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2> using um = unordered_map <T1, T2>;
template <class T> using us = unordered_set <T>;
template <class T> using vec = vector <T>;
 
const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max();
ll n, h;

void input() {
    cin >> n >> h;
}

ll bin(ll x) {
    return x * (x - 1) >> 1;
}

ll f(ll x) {
    return bin(x) + bin(x + 1) - bin(h);
}

ll bin_search_low(ll l, ll r) {
    if(l == r) {
        return l;
    }
    ll q = l + r + 1 >> 1;
    if(bin(q) < n) {
        return bin_search_low(q, r);
    } else {
        return bin_search_low(l, q - 1);
    }
}

ll bin_search_high(ll l, ll r) {
    if(l == r) {
        return l;
    }
    ll q = l + r + 1 >> 1;
    if(f(q) <= n) {
        return bin_search_high(q, r);
    } else {
        return bin_search_high(l, q - 1);
    }
}

void solve() {
    if(h > inf || n <= bin(h)) {
        cout << bin_search_low(1, inf) << "\n";
    } else {
        ll ans = bin_search_high(1, inf);
        cout << ans + ans - h + (ll) ceil((double) (n - f(ans)) / ans) << "\n";
    }
}

int main() {
    input();
    solve();
}
