#pragma GCC target("avx2")
#pragma GCC optimize("O3")

# include <x86intrin.h>
# include <bits/stdc++.h>

# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;
 
template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define lb lower_bound
#define ub upper_bound
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

inline void Input_Output () {
	//freopen(".in", "r", stdin);
   //freopen(".out", "w", stdout);
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 6e5 + 123;                                          
const int M = 30;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
vector < int > L, R;
ll dp[M][2][2][2][2];

ll go (int bit, int ax, int ay, int bx, int by) {
	if (bit == M) return 1;
	ll &res = dp[bit][ax][ay][bx][by];
	//cout << res
	if (res != -1) return res;
	//cout << bit << ' ' << ax << ' ' << ay << ' ' << bx << ' ' << by << '\n';	

	res = 0;
	//0 0
	if (L[bit] == 0 || (ax == 0 && bx == 0)) 
		res += go(bit + 1, (ax && L[bit] == 0), (ay && R[bit] == 0), (bx && L[bit] == 0), (by && R[bit] == 0));
	//0 1
	if ((ax == 0 || L[bit] == 0) && (by == 0 || R[bit] == 1)) 
		res += go(bit + 1, (ax && L[bit] == 0), (ay && R[bit] == 0), (bx && L[bit] == 1), (by && R[bit] == 1));
	//1 0
	if ((ay == 0 || R[bit] == 1) && (bx == 0 || L[bit] == 0))
		res += go(bit + 1, (ax && L[bit] == 1), (ay && R[bit] == 1), (bx && L[bit] == 0), (by && R[bit] == 0));  
	
//	if(res > 0)
//		cout << bit << ' ' << ax << ' ' << ay << ' ' << bx << ' ' << by << '\n';	

	return res;
}
 
inline ll get (int l, int r) {
	L.clear();
	R.clear();

	for (int i = M - 1; i >= 0; i --) {
		if (l & (1 << i)) L.pb(1);
		else L.pb(0);

		if (r & (1 << i)) R.pb(1);
		else R.pb(0);
	}
	//cout << sz(L) << ' ' << sz(R) << '\n';
	for (int i = 0; i < M; i ++)
		for (int a = 0; a < 2; a++)
			for (int b = 0; b < 2; b++)
				for (int c = 0; c < 2; c ++)
					for (int d = 0; d < 2; d++)
						dp[i][a][b][c][d] = -1;
	
	return go(0, 1, 1, 1, 1);
}

int main () {
   int t;
	scanf("%d", &t);
	while(t--) {
		int l, r;
		scanf("%d%d", &l, &r);
		printf("%lld\n", get(l, r));
	}
   return Accepted;
}

// B...a