/*
PROG : milk2
LANG : C++
*/
#include<bits/stdc++.h>
typedef long long ll;
typedef long double ld;
#define pii pair<int, int>
#define pll pair<ll, ll>
#define sync ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define FOR(i, a, b) for(int i = (a);i < (b);i++)
#define pb push_back
#define mp make_pair
#define mod 1000000007
#define fi first
#define se second
#define sqr(a) ((a) * (a))
#define pi 3.1415926535897932
#define read ifstream in("input.txt")
#define write ofstream out("output.txt")
#define vii vector<int>
#define mii map<int, int>

using namespace std;

int n, m, k;
int sz;
ll x[105];
map<ll, bool> p, t;
vector<ll> v, q;

void calc(int a, int b, int c){
    for(int i = a;i < b;i++){
        int mask = i, j = 0;
        vector<bool> bits;
        while(mask){
            bits.pb(mask % 2);
            mask /= 2;
        }

        ll sum = 0;
        for(int j = 0;j < bits.size();j++){
            if (bits[j])
                sum = (sum + x[j + (c?(n / 2):0)]) % m;
        }
        if (c == 0)
            v.pb(sum);
        else
            q.pb(sum);
    }
}

int main()
{
    //ifstream in("moocast.in");
    //ofstream out("moocast.out");
    cin >> n >> m;
    for(int i = 0;i < n;i++)
        cin >> x[i];

    int a = 0, b = (int) pow(2, n / 2);
    calc(a, b, 0);
    a = 0, b = (int) pow(2, n - n / 2);
    calc(a, b, 1);

    ll ans = 0;
    sort(v.begin(), v.end());
    sort(q.begin(), q.end());

    for(int i = 0;i < v.size();i++){
        int l = 0, r = (int)q.size() - 1, mid, pos = - 1;
        ans = max(ans, v[i]);
        while(l <= r){
            mid = (l + r) / 2;
            if (q[mid] <= m - v[i] - 1)
                pos = max(pos, mid), l = mid + 1;
            else
                r = mid - 1;
        }
        if (r >= 0 && q[r] <= m - v[i] - 1)
            pos = max(pos, r);
        if (l <= (int) q.size() - 1 && q[l] <= m - v[i] - 1)
            pos = max(pos, l);
        if (pos != - 1)
            ans = max(ans, q[pos] + v[i]);
    }

    cout  << ans;

    return 0;
    ///dont forget about initialization array please
}
