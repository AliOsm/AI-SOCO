#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;

template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
//#define int long long

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifndef _offline
    //freopen("switchlamps.in", "r", stdin);
    //freopen("switchlamps.out", "w", stdout);
    #endif
}

const int MAXK = 105;
const int MAXSAVE = 1e5 + 1;

int smallmapa[MAXK][MAXSAVE], arr[MAXK], k;

int geti(int n, int i) {
    if (i == k || n == 0) {
        return n;
    }
    if (smallmapa[i][n] != -1) {
        return smallmapa[i][n];
    }
    return smallmapa[i][n] = geti(n, i + 1) - geti(n / arr[i], i + 1);
}

ll getll(ll n, int i) {
    if (i == k || n == 0) {
        return n;
    }
    if (n < MAXSAVE) {
        return geti(n, i);
    }
    else {
        return getll(n, i + 1) - getll(n / arr[i], i + 1);
    }
}

signed main() {
    FAST_IO();
    memset(smallmapa, -1, sizeof(smallmapa));
    ll n;
    cin >> n >> k;
    for (int i = 0; i < k; ++i) {
        cin >> arr[i];
    }
    sort(arr, arr + k, greater<int>());
    cout << getll(n, 0) << '\n';
    return 0;       
}