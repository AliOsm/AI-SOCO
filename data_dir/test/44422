#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

typedef long long ll;
using namespace std;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000002;
const ll INFLL = 100000000000000000ll;
const ll MOD = 1000003;

// ----------------------------------------------------------------------------------------------------------

char Ans[1005][1005], B[1005][1005];
int H,W,Par[1010005],Size[1010005];

int find(int n)
{
    if(Par[n] == n) return n;
    return Par[n] = find(Par[n]);
}

void join(int a, int b)
{
    if(find(a) == find(b)) return;
    int r = rand() % 2;
    if(r)
    {
        Size[find(b)] += Size[find(a)];
        Par[find(a)] = find(b);
    }
    else
    {
        Size[find(a)] += Size[find(b)];
        Par[find(b)] = find(a);
    }
}

int main()
{
    cin >> H >> W;
    f(i,0,H-1) scanf("%s", B[i]);
    f(i,0,H-1) f(j,0,W-1) Par[i*W+j] = i*W+j, Size[i*W+j] = B[i][j] == '.' ? 1 : 0;
    f(i,0,H-1) f(j,0,W-2) if(B[i][j] == '.' && B[i][j+1] == '.') join(i*W+j, i*W+j+1);
    f(i,0,H-2) f(j,0,W-1) if(B[i][j] == '.' && B[i+1][j] == '.') join(i*W+j, i*W+j+W);
    f(i,0,H-1) f(j,0,W-1)
    {
        if(B[i][j] == '.') Ans[i][j] = '.';
        else
        {
            int cu = i>0 ? find(i*W+j-W) : -1;
            int cd = i<H-1 ? find(i*W+j+W) : -1;
            int cl = j>0 ? find(i*W+j-1) : -1;
            int cr = j<W-1 ? find(i*W+j+1) : -1;
            int sz = 1;
            if(cu >= 0) sz += Size[cu];
            if(cd >= 0 && cd != cu) sz += Size[cd];
            if(cl >= 0 && cl != cd && cl != cu) sz += Size[cl];
            if(cr >= 0 && cr != cl && cr != cd && cr != cu) sz += Size[cr];
            sz %= 10;
            Ans[i][j] = (char) (sz+'0');
        }
    }
    f(i,0,H-1) printf("%s\n", Ans[i]);
}
