#include <bits/stdc++.h>
using namespace std;
const int MAXN=1000005;
vector< pair<int, int> > r[MAXN], c[MAXN];
vector< int > g[MAXN];
int deg[MAXN], fa[MAXN];
int find(int x) {
	return fa[x]==x?x:fa[x]=find(fa[x]);
}
void merge(int x, int y) {
	int fx=find(x), fy=find(y);
	if(fx!=fy) {
		fa[fx]=fy;
	}
}
int a[MAXN], ans[MAXN];
int n, m;
int id(int x, int y) {
	return x*m+y;
}
int main() {
	cin>>n>>m;
	for(int i=0; i<n*m; i++) fa[i]=i;
	for(int i=0; i<n; i++) {
		for(int j=0, x; j<m; j++) {
			scanf("%d", &x);
			a[id(i,j)]=x;
			r[i].push_back(make_pair(x,j));
			c[j].push_back(make_pair(x,i));
		}
	}
	for(int i=0; i<n; i++) {
		sort(r[i].begin(),r[i].end());
		for(int j=1; j<m; j++) {
			int x=id(i, r[i][j].second);
			int y=id(i, r[i][j-1].second);
			if(r[i][j].first==r[i][j-1].first) merge(y,x);
			else g[y].push_back(x);
		}
	}
	for(int i=0; i<m; i++) {
		sort(c[i].begin(),c[i].end());
		for(int j=1; j<n; j++) {
			int x=id(c[i][j].second, i);
			int y=id(c[i][j-1].second, i);
			if(c[i][j].first==c[i][j-1].first) merge(y,x);
			else g[y].push_back(x);
		}
	}
	for(int i=0; i<n*m; i++) {
		if(find(i)!=i) {
			for(auto p: g[i]) {
				g[find(i)].push_back(p);
			}
		}
	}
	for(int i=0; i<n*m; i++) {
		if(find(i)==i) {
			for(int j=0; j<g[i].size(); j++) {
				g[i][j]=find(g[i][j]);
				deg[g[i][j]]++;
			}
		}
	}
	stack<int> q;
	for(int i=0; i<n*m; i++) {
		if(find(i)==i&&deg[i]==0) {
			q.push(i);
		}
	}
	while(!q.empty()) {
		int now=q.top(); q.pop();
		ans[now]++;
		for(auto p: g[now]) {
			ans[p]=max(ans[p],ans[now]);
			if(--deg[p]==0) q.push(p);
		}
	}
	for(int i=0; i<n*m; i++) {
		ans[i]=ans[find(i)];
	}
	for(int i=0; i<n; i++) {
		for(int j=0; j<m; j++) {
			printf("%d ",ans[id(i,j)]);
		} puts("");
	}
	return 0;
}