#define _CRT_SECURE_NO_DEPRECATE
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <cmath>
#ifndef __GNUC__
#include <intrin.h>
#endif // !__GNUC__
#include <bitset>
#include <random>
#include <vector>
#include <cstdio>
#include <string>
#include <cstdlib>
#include <numeric>
#include <cstring>
#include <complex>
#include <cassert>
#include <iterator>
#include <iostream>
#include <algorithm>
#include <functional>

int bsf(int x) {
#ifdef __GNUC__
    return __builtin_ctz(x);
#else
    unsigned long i;
    _BitScanForward(&i, x);
    return i;
#endif
}
int bsr(int x) {
#ifdef __GNUC__
    return 31 - __builtin_clz(x);
#else
    unsigned long i;
    _BitScanReverse(&i, x);
    return i;
#endif
}

using namespace std;
typedef long long int64;
const double pi = 3.14159265358979323846;
const int inf = (int)2e+9 + 2;
const int mod = (int)1e+9 + 7;
const double eps = 1e-8;
const int N = 200000;

int n, m, k;
int64 a[N];

bool find(int from, int64 val)
{
    auto it = lower_bound(a + from, a + n, val);
    return it != a + n && *it == val;
}

void solve()
{
    cin >> n;
    for (int i = 0; i < n; ++i)
        cin >> a[i];
    sort(a, a + n);
    vector<int64> ans = { a[0] };
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < 32; ++j) {
            if (find(i + 1, a[i] + (1ll << j))) {
                if (find(i + 1, a[i] + (1ll << (j + 1)))) {
                    ans = { a[i], a[i] + (1ll << j), a[i] + (1ll << (j + 1)) };
                    goto L1;
                }
                ans = { a[i], a[i] + (1ll << j) };
            }
        }
    }
L1:
    cout << ans.size() << '\n';
    for (auto val : ans) {
        cout << val << ' ';
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);
    int test = 1;
    //cin >> test;
    for (; test; --test)
        solve();
    return 0;
}