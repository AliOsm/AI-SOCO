
/*""" 
Author: Raj Singh
Date:   31.01.19
"""
from sys import stdin,stdout
#import math#import heapq#import operator
#from collections import OrderedDict,Counter,defaultdict
def getKey(item):
    return item[1]
#l=sorted(l, key=getKey,reverse=True) 
def inp():
    return stdin.readline()
def minp():
    return map(int,stdin.readline().rstrip().split())
def linp():
    return list(minp())
    
    
def main():
    n,m=minp()
    t=linp()
    c=linp()
    l=[0]*n
    d={}
    pd={}
    cost=0
    for i in range(n):
        l[i]=[t[i],c[i],i]
        pd[i]=l[i]
    l=sorted(l, key=getKey)   
    for i in range(m):
        cost=0
        k,d=minp()
        f=0
        if t[k-1]>=d:
            t[k-1]-=d
            cost+=d*c[k-1]
            pd[k-1][0]-=d
            f=1
        else:
            cost+=t[k-1]*c[k-1]
            d-=t[k-1]
            t[k-1]=0
            pd[k-1][0]=0
            for j in range(n):
                if l[j][0]>=d and l[j][0]!=0:
                    l[j][0]-=d
                    cost+=d*l[j][1]
                    t[l[j][2]]-=d
                    f=1
                    break
                else:
                    cost+=l[j][1]*l[j][0]
                    d-=l[j][0]
                    l[j][0]=0
                    t[l[j][2]]=0
                    
        if f==0:
            cost=0
          
        print(cost)

        
                        
if __name__=='__main__':
    main()
*/
// Python bahut time le liye **** ! -_- C++ thik tha!
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define fio ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
vector< pair <int,int> > vp;

int main() {
    fio;
	ll n,m,t[300005]={0},c[300005]={0},i,j=0,k,d,cost=0,f=0;
	cin>>n>>m;
	for(i=0;i<n;i++) cin>>t[i];
	for(i=0;i<n;i++){
	    cin>>c[i]; 
	    vp.push_back( make_pair(c[i],i) );
	}
	sort(vp.begin(),vp.end());
	for(i=0;i<m;i++){
	    cin>>k>>d;
	    cost=0;
	    if(t[k-1]>=d){
	        t[k-1]-=d;
	        cost+=d*c[k-1];
	        //f=1;
	    } else {
	        cost+=t[k-1]*c[k-1];
            d-=t[k-1];
            t[k-1]=0;
            while(d>0) {
                if(j>n-1){
                    f=1;
                    break;
                }
                if(t[vp[j].second]>=d){
                    cost+=d*c[vp[j].second];
                    t[vp[j].second]-=d;
                    //f=1;
                    d=0;
                } else {
                    cost+=c[vp[j].second]*t[vp[j].second];
                    d-=t[vp[j].second];
                    t[vp[j].second]=0;
                    j++;
                }
            }
	    }            
        if(f==1) 
            cost=0;
          
        cout<<cost<<"\n";
	        
	}
	return 0;
}