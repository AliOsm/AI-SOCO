// g++ -g -std=c++11 -DBUG -D_GLIBCXX_DEBUG -Wall -Wfatal-errors -o cforce{,.cpp}
// codeforces.com/blog/entry/15729
#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
    #define EXPECT(expr)
#endif

using namespace std;
typedef long long int int64; typedef unsigned long long int uint64;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
if(! a.size()){ size_t n; fin >> n; a.resize( n ); }
for( auto & u: a) fin >> u; return fin; }
/* @@@ ----------------------------------- */

inline bool issqr( const size_t r, const size_t c,
        vector< vector< bool > > & grid )
{
    // top left
    if( grid[ r ][ c ] && grid[ r + 1 ][ c ] && grid[ r ][ c + 1 ] &&  grid[ r + 1 ][ c + 1 ] )
        return true;

    // top right
    if( grid[ r ][ c ] && grid[ r + 1 ][ c ] && grid[ r ][ c - 1 ] && grid[ r + 1 ][ c - 1 ] )
        return true;

    // bottom left
    if( grid[ r ][ c ] && grid[ r- 1 ][ c ] && grid[ r ][ c + 1 ] && grid[ r- 1 ][ c + 1 ] )
        return true;

    // bottom right
    if( grid[ r ][ c ] && grid[ r - 1 ][ c ] && grid[ r ][ c - 1 ] && grid[ r - 1 ][ c - 1 ] )
        return true;

    return false;
}

size_t probA()
{
    size_t n, m, k;
    cin >> n >> m >> k;

    vector< vector < bool > > grid( n + 2, vector< bool >( m + 2, false ));

    size_t j = 0;
    for( size_t i = 0; i < k; ++ i )
    {
        size_t r, c;
        cin >> r >> c;
        grid[ r ][ c ] = true;

        if( j == 0 && issqr( r, c, grid ) )
            j = i + 1;
    }

    return j;
}

int main( const int argc, char * argv [])
{
    cout << probA();
    return EXIT_SUCCESS;
}
