/*
digu_J - Digvijay Janartha
NIT Hamirpur - INDIA
*/

#include <bits/stdc++.h>
using namespace std;

typedef double db;
typedef long long ll;
typedef pair < ll, ll > pll;
typedef vector < ll > vll;
typedef map < ll, ll > mll;
typedef set < ll > sll;
typedef vll lnum;

#define pb push_back
#define F first
#define S second
#define debug(x) cout << (#x) << " is " << (x) << endl
#define fast_io() ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0)

const ll INF = LLONG_MAX;
const ll base = 1e9;
const db PI = acos(-1);
const ll MOD = 1e9 + 7;
const ll N = 1e5 + 10;

ll n, a[N], cnt[N], cnt1[N];

void solve();
ll binary();
bool check(ll k);

int main() {
    fast_io();
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
        for (int i = 0; i < 1; ++i) {
            solve();
        }
    #endif
    #ifdef ONLINE_JUDGE
        solve();
    #endif
    #ifndef ONLINE_JUDGE
            cout << "Time: " << (int)(clock() * 1000. / CLOCKS_PER_SEC) << "ms";
    #endif
    return 0;
}

void solve() {
    cin >> n;
    for (ll i = 0; i < n; ++i) {
        cin >> a[i];
    }
    ll temp = 1;
    for (ll i = 0; i < n; ++i) {
        if (!i) {
            cnt[0] = 1;
        } else {
            if (a[i] > a[i - 1]) {
                ++temp;
                cnt[i] = temp;
            } else {
                temp = cnt[i] = 1;
            }
        }
    }
    temp = 1;
    for (ll i = n - 1; i >= 0; --i) {
        if (i == n - 1) {
            cnt1[n - 1] = 1;
        } else {
            if (a[i] < a[i + 1]) {
                ++temp;
                cnt1[i] = temp;
            } else {
                temp = cnt1[i] = 1;
            }
        }
    }
    cout << binary() << "\n";
    return;
}

ll binary() {
    ll lo = 1, hi = n, mid, ans = 1;
    while (lo < hi) {
        mid = lo + (hi - lo) / 2;
        if (check(mid)) {
            if (lo == mid) {
                if (check(mid + 1)) {
                    return mid + 1;
                } else {
                    return mid;
                }
            }
            lo = mid;
            ans = mid;
        } else {
            hi = mid - 1;
        }
    }
    return ans;
}

bool check(ll k) {
    for (ll i = 0; i < n; ++i) {
        if (!i) {
            if (cnt1[i + 1] + 1 >= k) {
                return true;
            }
        } else {
            if (a[i - 1] + 1 < a[i + 1]) {
                if (cnt[i - 1] + cnt1[i + 1] + 1 >= k) {
                    return true;
                }
            } else {
                if (cnt[i - 1] + 1 >= k or cnt1[i + 1] + 1 >= k) {
                    return true;
                }
            }
        }
    }
    return false;
}
