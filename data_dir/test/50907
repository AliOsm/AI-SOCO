// In the name of god
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iomanip>
#include <assert.h>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <bitset>
#include <unordered_map>
#define sqr(a) ((a)*(a))
#define all(a) (a).begin(), (a).end()
using namespace std;
 
template <typename T>
T next_int() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if(ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return p * x;
}
 
string next_token() {
    char ch;
    string ans = "";
    do { ch = getchar(); } while(ch <= ' ');
    while(ch > ' ') {
        ans += ch;
        ch = getchar();
    }
    return ans;
}
 
const long long INF = (long long)1e18;
const int INFINT = (int)1e9 + 227 + 1;
const int MAXN = (int)1e6 + 227 + 1;    
const int MOD = (int)1e9 + 7;
const long double EPS = 1e-9;
 
long long bin_pow(long long a, long long b) {
    if(!b) return 1;
    long long ans = bin_pow(a, b / 2);
    ans = ans * ans % MOD;
    if(b % 2) ans = ans * a % MOD;
    return ans;
}

int used[MAXN];
vector<int> a[MAXN];
vector<int> path, cycle;
int last[MAXN];

void go(int v, int pr = -1) {
    if(used[v] == 2) return;
    if(used[v] == 1) {
        if(cycle.size()) return;

        for(int i = last[v]; i < path.size(); i++) { 
            cycle.push_back(path[i]);
        }

        return;
    }

    used[v] = 1;
    last[v] = path.size();
    path.push_back(v);

    for(int i = 0; i < a[v].size(); i++)
        if(a[v][i] != pr) {
            go(a[v][i], v);
        }

    used[v] = 2;
    path.pop_back();
}

struct tree {
    vector<pair<int, int> > t;
    int len; 

    tree(int len) : len(len) {
        t.resize(len * 4 + 227 + 1, make_pair(0, 0));
    }

    void push(int v, int l, int r) {
        if(!t[v].second) return;

        int mid = (l + r) / 2;

        t[v * 2].second ^= 1;
        t[v * 2 + 1].second ^= 1;

        t[v * 2].first = (mid - l + 1) - t[v * 2].first;
        t[v * 2 + 1].first = (r - (mid + 1) + 1) - t[v * 2 + 1].first;

        t[v].second = 0;
    }

    void invert(int v, int l, int r, int _l, int _r) {
        if(_l > _r) return;
        if(l == _l && r == _r) {
            t[v].second ^= 1;
            t[v].first = (r - l + 1) - t[v].first;
            return;
        }

        push(v, l, r);

        int mid = (l + r) / 2;
        invert(v * 2, l, mid, _l, min(mid, _r));
        invert(v * 2 + 1, mid + 1, r, max(mid + 1, _l), _r);    
        
        t[v].first = t[v * 2].first + t[v * 2 + 1].first;    
    }

    void invert(int l, int r) {
        invert(1, 1, len, l, r);
    }
} ;

int color[MAXN];
int sz[MAXN];
int p[MAXN][20];
vector<vector<int> > q;
vector<tree> w;
int num[MAXN];

int ans = 0;

struct hld {
    int root;
    hld(int root) {
        build(root);
    } ;

    void build(int v, int pr = -1) {
        sz[v] = 1;

        int mx = 0;
        for(int i = 0; i < a[v].size(); i++) {
            if(a[v][i] == pr || used[a[v][i]]) continue;

            build(a[v][i], v);

            q[color[a[v][i]]].push_back(v);
            mx = max(mx, sz[a[v][i]]);
            sz[v] += sz[a[v][i]];
        }

        for(int i = 0; i < a[v].size(); i++) {
            if(a[v][i] == pr || used[a[v][i]]) continue;

            if(sz[a[v][i]] == mx) {
                color[v] = color[a[v][i]];
                break;
            }
        }

        if(color[v] == -1) {
            color[v] = q.size();
            q.push_back(vector<int>());
            q.back().push_back(v);
        }

        num[v] = q[color[v]].size();
    }

    void invert(int a, int b) {
        while(a != b) {
            if(color[a] == color[b]) {
                ans -= w[color[a]].t[1].first;
                w[color[a]].invert(num[a], num[b] - 1);
                ans += w[color[a]].t[1].first;

                a = b;
            } else {
                ans -= w[color[a]].t[1].first;
                w[color[a]].invert(num[a], q[color[a]].size() - 1);
                ans += w[color[a]].t[1].first;

                a = q[color[a]].back();
            }
        }
    }
} ;

int num_tree[MAXN];
int tin[MAXN], tout[MAXN];
int timer;

void build_tree(int v, int lol, int pr = -1) {
    num_tree[v] = lol;
    p[v][0] = pr;
    for(int i = 1; i < 20; i++) {
        if(p[v][i - 1] != -1) {
            p[v][i] = p[p[v][i - 1]][i - 1];
        } else 
            p[v][i] = -1;
    }
    timer++; tin[v] = timer;

    for(int i = 0; i < a[v].size(); i++) {
        if(a[v][i] == pr || used[a[v][i]]) continue;

        build_tree(a[v][i], lol, v);
    }

    tout[v] = timer;
}

bool check(int a, int b) {
    return (tin[a] <= tin[b] && tout[a] >= tout[b]);
}

int get_lca(int a, int b) {
    if(check(a, b))
        return a;

    for(int i = 19; i >= 0; i--) {
        if(p[a][i] != -1 && !check(p[a][i], b)) {
            a = p[a][i];
        }
    }

    return p[a][0];
}

int main() {
    // freopen(".in", "r", stdin);

    int n, m; cin >> n >> m;

    for(int i = 0; i < n; i++) {
        int x = next_int<int>() - 1;
        int y = next_int<int>() - 1;

        a[x].push_back(y);
        a[y].push_back(x);
    }

    go(0);

    for(int i = 0; i < n; i++) {
        used[i] = 0;
        color[i] = -1;
    }
    for(int i = 0; i < cycle.size(); i++) {
        used[cycle[i]] = 1;
    }

    vector<hld> e;
    for(int i = 0; i < cycle.size(); i++) {
        e.push_back(hld(cycle[i]));
        build_tree(cycle[i], i);
    }

    for(int i = 0; i < q.size(); i++) {
        w.push_back(tree(q[i].size() - 1));
    }

    tree cycle_tree(cycle.size());

    // for(int i = 0; i < cycle.size(); i++) {
    //     cout << cycle[i] << " ";
    // }
    // puts("");

    while(m--) {
        int x = next_int<int>() - 1;
        int y = next_int<int>() - 1;

        if(num_tree[x] != num_tree[y]) {
            e[num_tree[x]].invert(x, cycle[num_tree[x]]);
            e[num_tree[y]].invert(y, cycle[num_tree[y]]);

            int len[2] = {abs(num_tree[y] - num_tree[x]), cycle.size() - abs(num_tree[y] - num_tree[x])};


            if(num_tree[x] < num_tree[y]) {
                if(len[0] < len[1] || (len[0] == len[1] && cycle[(num_tree[x] + 1) % cycle.size()] < cycle[(num_tree[x] - 1 + (int)cycle.size()) % cycle.size()])) {
                    ans -= cycle_tree.t[1].first;

                    cycle_tree.invert(num_tree[x] + 1, num_tree[y]);

                    ans += cycle_tree.t[1].first;
                } else {
                    ans -= cycle_tree.t[1].first;

                    cycle_tree.invert(num_tree[y] + 1, cycle.size());
                    if(num_tree[x]) cycle_tree.invert(1, num_tree[x]);

                    ans += cycle_tree.t[1].first;
                }
            } else {
                if(len[0] < len[1] || (len[0] == len[1] && cycle[(num_tree[x] + 1) % cycle.size()] > cycle[(num_tree[x] - 1 + (int)cycle.size()) % cycle.size()])) {
                    ans -= cycle_tree.t[1].first;

                    cycle_tree.invert(num_tree[y] + 1, num_tree[x]);

                    ans += cycle_tree.t[1].first;
                } else {
                    ans -= cycle_tree.t[1].first;

                    cycle_tree.invert(num_tree[x] + 1, cycle.size());
                    if(num_tree[y]) cycle_tree.invert(1, num_tree[y]);

                    ans += cycle_tree.t[1].first;
                }
            }

        } else {
            int lca = get_lca(x, y);

            e[num_tree[x]].invert(x, lca);
            e[num_tree[x]].invert(y, lca);
        }

        // cout << cycle_tree.t[1].first << "\n";
        cout << 1 + (n - ans) - (cycle_tree.t[1].first != cycle.size()) << "\n";
    }
}
