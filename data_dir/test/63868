#include <bits/stdc++.h>
using namespace std;

string to_string(string s) {
  return '"' + s + '"';
}

string to_string(const char* s) {
  return to_string((string) s);
}

string to_string(bool b) {
  return (b ? "true" : "false");
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

const int N = 2e5 + 10;

int n;
string s;
int digs[N];
bool dp[N][11][11];
bool seen[N][11][11];
int trans[N][11][11];
int mn_two;

bool solve(int ind, int one, int two) {
  if (ind == n) {
    return one <= mn_two;
  }
  auto& ans = dp[ind][one][two];
  auto& vis = seen[ind][one][two];
  auto& nxt = trans[ind][one][two];
  if (!vis) {
    vis = true;
    if (digs[ind] >= one && solve(ind + 1, digs[ind], two)) {
      ans = true;
      nxt = 1;
    } else if (digs[ind] >= two && digs[ind] >= mn_two && solve(ind + 1, one, digs[ind])) {
      ans = true;
      nxt = 2;
    }
  }
  return ans;
}

void test_case() {
  cin >> n >> s;
  for (int i = 0; i < n; ++i) {
    digs[i] = s[i] - '0' + 1;
  }
  for (int p3 = 0; p3 <= 11; ++p3) {
    for (int i = 0; i < n; ++i) {
      for (int p1 = 0; p1 < 11; ++p1) {
        for (int p2 = 0; p2 < 11; ++p2) {
          dp[i][p1][p2] = seen[i][p1][p2] = trans[i][p1][p2] = 0;
        }
      }
    }
    mn_two = p3;
    if (solve(0, 0, 0)) {
      int ind = 0, one = 0, two = 0;
      while (ind < n) {
        int nxt = trans[ind][one][two];
        if (nxt == 1) {
          cout << "1";
          one = digs[ind];
        } else {
          cout << "2";
          two = digs[ind];
          mn_two = min(mn_two, digs[ind]);
        }
        ++ind;
      }
      cout << "\n";
      return;
    }
  }
  cout << "-\n";
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  int tc;
  cin >> tc;
  while (tc--) {
    test_case();
  }
  return 0;
}
