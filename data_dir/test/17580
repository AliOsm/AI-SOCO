#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl

const int maxn = 2e5 + 200;
const int inf = 1e9;
int n, q;
string s;

struct node {
  int mat[5][5];
  node() {
    for (int i=0; i<5; i++) {
      for (int j=0; j<5; j++) {
	mat[i][j] = inf; //i==j still inf
      }
    }
  }
  node(char c) {
    for (int i=0; i<5; i++) {
      for (int j=0; j<5; j++) {
	mat[i][j] = i!=j ? inf : 0; //transition from same letter costs nothing
      }
    }
    if (c == '2') {
      mat[0][0] = 1; //chose to delete 2
      mat[0][1] = 0;
    } else if (c == '0') {
      mat[1][1] = 1; //chose to delete 0
      mat[1][2] = 0;
    } else if (c == '1') {
      mat[2][2] = 1; //chose to delete 1
      mat[2][3] = 0;
    } else if (c == '7') {
      mat[3][3] = 1; //chose to delete 1
      mat[3][4] = 0; //2017
    } else if (c == '6') {
      mat[3][3] = 1; //201[6] we have to delete the 6
      mat[4][4] = 1; //2017[6] we have to delete the 6
    } else {
      //nothing
    }
  }

};

node t[4*maxn];

node merge(node a, node b) {
  node c; //all inf
  for (int i=0; i<5; i++) {
    for (int j=0; j<5; j++) {
      for (int k=0; k<5; k++) {
	c.mat[i][j] = min(c.mat[i][j], a.mat[i][k]+b.mat[k][j]);
      }
    }
  }
  return c;
}

void build(int v, int tl, int tr) {
  if (tl == tr) {
    t[v] = node(s[tl]);
  } else {
    int tm = (tl+tr)/2;
    build(2*v, tl, tm);
    build(2*v+1, tm+1, tr);
    t[v] = merge(t[2*v], t[2*v+1]);
  }
}

node get(int v, int tl, int tr, int l, int r) {
  if (l==tl && tr==r) {
    return t[v];
  } else {
    int tm=(tl+tr)/2;
    if (r<=tm) {
      return get(2*v,tl,tm,l,r);
    } else if (l>tm) {
      return get(2*v+1,tm+1,tr,l,r);
    } else {
      return merge(get(2*v,tl,tm,l,min(r,tm)),get(2*v+1,tm+1,tr,max(l,tm+1),r));
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);
  
  cin>>n>>q;
  cin>>s;
  s = "*" + s;
  build(1,1,n);

  while (q--) {
    int l,r;
    cin>>l>>r;
    auto res = get(1,1,n,l,r);
    int ans = res.mat[0][4] == inf ? -1 : res.mat[0][4];
    cout<<ans<<"\n";
  }  

  return 0;
}
