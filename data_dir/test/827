#include <bits/stdc++.h>
using namespace std;

const int MAX = 1e6; 
const int OO = 0x3f3f3f3f;
const double EPS = 1e-9; 

#define bug(x) cout << #x << " = " << x << '\n'
#define FOR(i, a, n) for(int i = a; i < (int)n; i++)
#define REP(i, n) FOR(i, 0, n)
#define fi first
#define se second
#define pb push_back
#define mt make_tuple
#define all(vetor) vetor.begin(), vetor.end()
#define X real()
#define Y imag()
//#define gc getchar_unlocked

typedef long long ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef complex<ll> Pll;
typedef complex<ld> Pld;

int n, k, arr[MAX];
priority_queue<ii, vector<ii>, greater<ii>> ver, usa;
vector<ii> ans;
int grau[MAX];

int main()
{
	cin >> n >> k;
	REP(i, n)
	{
		cin >> arr[i];
		if(arr[i] == 0)
			usa.push({arr[i], i});
		else
			ver.push({arr[i], i});
	}	
	if(usa.size() > 1) return puts("-1"), 0;
	while(!ver.empty())
	{
		ii a = ver.top();
		ver.pop();
		while(!usa.empty() and usa.top().fi != a.fi - 1)
			usa.pop();
		if(usa.empty() or usa.top().fi != a.fi - 1)
			return puts("-1"), 0;
		ans.pb({usa.top().se, a.se});
		grau[usa.top().se]++;
		grau[a.se]++;
		if(grau[usa.top().se] == k) usa.pop();
		if(grau[a.se] < k) usa.push(a);
	}
	cout << ans.size() << '\n';
	for(ii u : ans) cout << u.fi + 1 << ' ' << u.se + 1 << '\n';
	
	return 0;
}