/*input
8
E7
E7
E7
00
00
E7
E7
E7

*/
 
/*
                                                    ______________
                                                          |       )
                                                          |   )   /
                                                          |______/
                                                    |     |      \
                                                    |     |   )   \
                                                    |_____|_______)
 
*/
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <ctime>
#include <cassert>
#include <complex>
#include <string>
#include <cstring>
#include <chrono>
#include <random>
#include <queue>
#include <bitset>
#include <iomanip>
#include <fstream>
#include <stack>

using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> PII;
typedef pair<ll , ll> PLL;
typedef long double ld;
 
#define pb push_back
#define all(c) c.begin(),c.end()
#define allr(c) c.rbegin(),c.rend()
int mod = 1000000007;
const int inf = 1034567891;
const ll LL_INF = 1234567890123456789ll;
#define PI 3.14159265
#define endl '\n'
#define F first
#define S second
#define debug(x) cout << #x << " = " << x << endl;
#define TRACE
 
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cout << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif
 
#define out(container) for (auto it : container) cout << it << " "; cout << endl;
 
 
template < typename T > T GCD(T a, T b)            { ll t; while(a) { t = a; a = b % a; b = t; } return b; }
template < typename T > string toString(T a)       { return to_string(a); }
template < typename T > void toInt(string s, T &x) { stringstream str(s); str >> x;}
inline int add(int x, int y){ x += y; if(x >= mod) x -= mod; return x;}
inline int sub(int x, int y){ x -= y; if(x < 0) x += mod; return x;}
inline int mul(int x, int y){ return (x * 1ll * y) % mod;}
inline int powr(int a, ll b){
  int x = 1 % mod;
  while(b){
    if(b & 1) x = mul(x, a);
    a = mul(a, a);
    b >>= 1;
  }
  return x;
}
inline int inv(int a){ return powr(a, mod - 2);}

const int N = 5205;
int psum[N][N];

map<char, string> mp;

void pre() {
  for (int i = 0; i <= 9; i++) {
    bitset<4> num(i);
    string str = to_string(num[3]) + to_string(num[2]) + to_string(num[1]) + to_string(num[0]);
    mp[i + '0'] = str;
  }
  for (int i = 10, c = 'A'; i <= 15; i++, c++) {
    bitset<4> num(i);
    string str = to_string(num[3]) + to_string(num[2]) + to_string(num[1]) + to_string(num[0]);
    mp[c] = str; 
  }
}

string get(string str) {
  string ans;
  for (auto it : str) {
    ans += mp[it];
  }
  return ans;
}
vector<string> arr;
int n;

bool check(int v) {
  for (int i = 1; i <= n; i += v) {
    for (int j = 1; j <= n; j += v) {
      int x = min(n, i + v - 1), y = min(n, j + v - 1);
      int should = (x - i + 1) * (y - j + 1);
      int cur = psum[x][y] - psum[x][j - 1] - psum[i - 1][y] + psum[i - 1][j - 1];
      if (cur == 0 || cur == should) continue;
      return false;
    }
  }
  return true;
}

int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
    
  pre();
  cin >> n;
  string str;
  arr.pb("");
  for (int i = 0; i < n; i++) {
    cin >> str;
    str = get(str);
    str = "#" + str;
    arr.push_back(str);
    for (int j = 1; j <= n; j++) {
      psum[i + 1][j] = (str[j] == '1');
    }
  }
  for (int i = 1; i <= n; i++)
    for (int j = 1; j <= n; j++)
      psum[i][j] += psum[i][j - 1];
  for (int i = 1; i <= n; i++)
    for (int j = 1; j <= n; j++)
      psum[j][i] += psum[j - 1][i];


  for (int i = n; i >= 1; i--) {
    if (n % i == 0 && check(i)) {
      cout << i << endl;
      return 0;
    }
  }

  return 0;
}