#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <int, int> pii;

const int N = 300 + 5, inf = 1e9;

int n, dist[N][N], path[N][N], deg[N];
vector <int> adj[N], ans;

void get_path(int v, int u) {
	for (auto w : adj[v]) {
		if(dist[v][u] == dist[v][w] + dist[w][u]) {
			path[v][u] = w;
			break;
		}
	}
	return;
}

void print_path(int v, int u) {
	if(v == u)
		return;
	ans.push_back(v);
	v = path[v][u];
	print_path(v, u);
	return;
}

int main() {
	ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if(i == j)
				dist[i][j] = 0;
			else
				dist[i][j] = inf;
		}
	}
	for (int i = 0; i < n - 1; i++) {
		int v, u;
		cin >> v >> u;
		v--, u--;
		adj[v].push_back(u), adj[u].push_back(v);
		deg[v]++, deg[u]++;
		path[v][u] = u, path[u][v] = v;
		dist[v][u] = dist[u][v] = 1;
	}
	for (int k = 0; k < n; k++)
		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			if(dist[i][j] > 1)
				get_path(i, j);
	vector <int> a;
	int leaf = 0;
	for (int i = 1; i < n; i++)
			leaf += (deg[i] == 1);
	a.push_back(0);
	for (int i = 0; i < leaf; i++) {
		int x;
		cin >> x;
		x--;
		a.push_back(x);
	}
	a.push_back(0);
	for (int i = 0; i < a.size() - 1; i++) {
		int v = a[i], u = a[i + 1];
		print_path(v, u);
	}
//	cout << a[a.size() - 2] << " " << a[a.size() - 1] << "\n";
	ans.push_back(0);
	ans.resize(unique(ans.begin(), ans.end()) - ans.begin());
	if(ans.size() > n + n - 1)
		cout << -1 << "\n";
	else {
		for (auto u : ans)
			cout << u + 1 << " ";
		cout << "\n";
	}
}
