//Daniel Grzegorzewski
#include <bits/stdc++.h>

#define MP make_pair
#define PB push_back
#define ST first
#define ND second
#define int long long

using namespace std;

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
     ios_base::sync_with_stdio(0);
     cin.tie(0);
}

const int MOD = (int)1e9+7;
const int N = 2*(int)1e5 + 10;
const int X = 347;

int n, m, pot[N], h[N][26];
string s;
vector<int> ind[26];

int get(int p, int q, int lit) {
  return ((h[p][lit]-h[q+1][lit]*pot[q+1-p])%MOD+MOD)%MOD;
}

signed main() {
  init_ios();
  pot[0] = 1;
  for (int i = 1; i < N-5; ++i)
    pot[i] = (X*pot[i-1])%MOD;
  cin >> n >> m >> s;
  for (int i = 0; i < n; ++i)
    ind[s[i]-'a'].PB(i);
  for (int i = 0; i < 26; ++i)
    for (int j = n-1; j >= 0; --j) {
      h[j][i] = (X*h[j+1][i])%MOD;
      if (s[j]-'a' == i)
        h[j][i] = (h[j][i]+1)%MOD;
    }
  while (m--) {
    int x, y, len;
    cin >> x >> y >> len;
    --x;
    --y;
    bool res = true;
    for (int i = 0; i < 26; ++i) {
      int nr = lower_bound(ind[i].begin(), ind[i].end(), x) - ind[i].begin();
      if (nr < ind[i].size() && ind[i][nr] <= x+len-1) {
        int dru = s[y+ind[i][nr]-x]-'a';
        if (get(x, x+len-1, i) != get(y, y+len-1, dru))
          res = false;
      }
      if (!res)
        break;
    }
    if (res)
      cout<<"YES\n";
    else
      cout<<"NO\n";
  }
}