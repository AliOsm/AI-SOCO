#include<bits/stdc++.h>
#define ALL(c) begin(c), end(c)
using namespace std;
using ll = long long;
using ld = long double;

const int N = 1e6+6;

vector<pair<int,int>> edges;
vector<int> g[N];

int nb(int k, int i){
    return edges[k].first ^ edges[k].second ^ i;
}

int main(){
    //freopen("input.txt","r",stdin); //freopen("output.txt","w",stdout);
    ios::sync_with_stdio(0);cin.tie(0);//cout.precision(12);cout<<fixed;
    
    int n;
    
    cin>>n;
    vector<vector<int>> g(n);
    for(int i,j,k=0;k<n-1;++k){
        cin>>i>>j;
        --i; --j;
        edges.push_back({i,j});
        g[i].push_back(k);
        g[j].push_back(k);
    }
    
    int l = 0;
    set<int> u;
    for(int i=0;i<n;++i) if(size(g[i])==1){
        ++l;
        int k = g[i][0];
        u.insert(nb(k,i));
    }
    
    if(l==2 || size(u)==1){
        for(int i=0;i<n-1;++i) cout<<i<<'\n';
        return 0;
    }
    
    
    auto gg = [&](int v){
        vector<int> vx;
        for(int k : g[v]){
            int i = nb(k,v);
            if(size(g[i]) == 1) vx.push_back(k);
        }
        return vx;
    };
    
    
    vector<int> ans(n-1,-1);
    
    assert(l>2);
    
    auto it = begin(u);
    
    int x = *it;
    ++it;
    int y = *it;
    
    vector<int> vx = gg(x), vy = gg(y);
    
    if(size(u)>2){
        ++it;
        int z = *it;
        auto vz = gg(z);
        
        int k0 = vx[0], k1 = vy[0], k2 = vz[0];
        ans[k0] = 0;
        ans[k1] = 1;
        ans[k2] = 2;
        
    }else{
        if(size(vx) < size(vy)) swap(vx,vy);
        
        assert(size(vx) > 1);
        assert(size(vy) > 0);
        
        int k0 = vx[0], k1 = vy[0], k2 = vx[1];
        ans[k0] = 0;
        ans[k1] = 1;
        ans[k2] = 2;
    }
    for(int i=0,p=3; i<n-1; ++i) if(ans[i]==-1) ans[i] = p++;
    
    for(int x : ans) cout<<x<<'\n';
    
    
    
    
    return 0;
}
