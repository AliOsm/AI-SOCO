#include <bits/stdc++.h>
////#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
#define ook order_of_key
#define fbk find_by_order
#define pb push_back
#define mp make_pair
#define intl long long
#define maxn 100005
#define ff first
#define ss second
#define bug printf ("bug\n")
#define sz(a) ((int)a.size())
#define set0(a) memset ((a), 0 , sizeof(a))
#define set1(a) memset((a),-1,sizeof (a))
#define si(a) scanf("%d" , &a)
#define sl(a) scanf("%lld" , &a)
#define sii(a,b) scanf("%d %d" , &a , &b)
#define sll(a,b) scanf("%lld %lld" , &a , &b)
#define FOR(i,a,b) for(intl i = (a) ; i <= (b) ; i++)
#define IN freopen("in.txt" , "r" , stdin)
#define OUT freopen("output2.txt" , "w" , stdout)
#define whats(x) printf ("x : %d\n" , x)


using namespace std ;
//using namespace __gnu_pbds;

typedef pair <int,int> pii ;
typedef pair <intl,intl> pll ;
//typedef tree < pii, null_type ,less<pii>,rb_tree_tag,tree_order_statistics_node_update > ordered_set;

/***************************************************************************************************/

const int N = 1e5 + 5 ;
int a[N] , dp[N][2] ;

int main () {

    int n , m ;
    cin >> m >> n ;
    for (int i = 1 ; i <= m ; i++) {
        int l , r ;
        sii(l,r) ;
        a[l]++ ; a[r+1]-- ;
    }
    for (int i = 1; i <= n ; i++) {
        a[i] += a[i-1] ;
    }
    vector <int> v ;
    for (int i = 1 ; i <= n ; i++) {
        int x = a[i] ;
        vector<int>::iterator it = upper_bound(v.begin(), v.end(), x) ;
        if (it == v.end()) v.push_back(x);
        else *it = x;
        dp[i][0] = upper_bound(v.begin(), v.end(), x) - v.begin() ;
    }
    v.clear() ;

    for (int i = n ; i >= 1 ; i--) {
        int x = a[i] ;
        vector<int>::iterator it = upper_bound(v.begin(), v.end(), x) ;
        if (it == v.end()) v.push_back(x);
        else *it = x;
        dp[i][1] = upper_bound(v.begin(), v.end(), x) - v.begin() ;
    }
    v.clear() ;
    int ans = 0 ;
    for (int i = 1 ; i <= n ; i++) {
        ans = max(ans , dp[i][0] + dp[i][1] - 1) ;
    }
    cout << ans << endl ;
    return 0 ;
}
