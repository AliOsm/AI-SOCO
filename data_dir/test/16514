#include <bits/stdc++.h>
#define LL long long
using namespace std;

int n, m, power[30], pow2[30];

bool check(vector<int> &v) {
	for(int i = 0; i < v.size(); i++) {
		int xorr = 0;
		for(int j = i; j < v.size(); j++) {
			xorr ^= v[j];
			if(xorr == 0 || xorr == m) return false;
		}
	}
	return true;
}

int findForbid(int m) {
	int curr = 1;
	int forbidden = 0;
	while(m) {
		if(m % 2 == 1) forbidden = curr;
		m /= 2;
		curr *= 2;
	}
//	cout<<forbidden<<endl;
	return forbidden;
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie();
	cin>>n>>m;
	int forbidden = findForbid(m);
	power[0] = 1;
	if(forbidden == 1) power[0] = 2;
	pow2[0] = 1;
	for(int i = 1; i < 30; i++) {
		pow2[i] = pow2[i-1] * 2;
		power[i] = power[i-1] * 2;
		if(power[i] == forbidden) power[i] *= 2;
	}
	int curr = 1;
	vector<int> v;
	for(int i = 1; i < pow2[n]; i++) {
		if(i == pow2[curr]) curr++;
//		cout<<i<<" "<<curr<<" "<<pow2[curr]<<" "<<power[curr]<<endl;
		
		int temp = power[curr-1];
		if(temp >= pow2[n]) break;
		if(i == pow2[curr-1]) v.push_back(temp);
		else v.push_back(v[v.size() - pow2[curr-1]]);
	}
	cout<<v.size()<<endl;
	for(int x: v) cout<<x<<" ";cout<<endl;
	
//	if(!check(v)) {
//		cout<<"Invalid!"<<endl;
//		assert(0);
//	}
    return 0;
}


// 1 001 [1]
// 2 010 [1, 2, 3]
// 1 001 [1, 2, 3]
// 4 100 [1, 2, 3, 4, 5, 6, 7]
// 1 001 [1, 2, 3, 4, 5, 6, 7]
// 2 010 [1, 2, 3, 4, 5, 6, 7]
// 1 001 [1, 2, 3, 4, 5, 6, 7]
// 8 1000 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]



