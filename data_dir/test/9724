/*
author: madhav_1999 aka orthodoxparadox
24 March 2020 at 3:46 AM
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define dbl long double
#define int ll
#define ll long long
#define pii pair<int, int>
#define len(x) (int) x.size()
#define rev(a) reverse(all(a))
#define oiint ostream_iterator<int>(cout, " ") 
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define endl '\n'
#define all(a) a.begin(), a.end()
#define initialise(a, x) memset(a, x, sizeof(a))
#define onlyunique(v) v.erase(unique(all(v)), v.end()); //only for sorted vector
#define inf 2e18
#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#ifdef MADHAV
#define dbg(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){cerr << name << " : " << arg1 << endl;}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << "  ";
	__f(comma + 1, args...);}
#else
#define dbg(...) 42
#endif
template <typename X> ostream& operator << (ostream& x,const vector<X>& v){for(int i=0;i<v.size();++i) x<<v[i]<<" ";return x;} 
template <typename X> ostream& operator << (ostream& x,const set<X>& v){for(auto it:v) x<<it<<" ";return x;} 
template <typename X, typename Y> ostream& operator << (ostream& x, const pair<X,Y>& v) {x<<v.ff<<" "<<v.ss;return x;} 
template <typename T, typename S> ostream& operator << (ostream& os, const map<T, S>& v) { for (auto it : v) os << it.first << "=>" << it.second << endl; return os; }
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
struct pair_hash {inline std::size_t operator()(const std::pair<int, int> & v) const {return v.first*31+v.second;}};
const int MOD = 1e9 + 7;

int takemod(int a, int mod = MOD){a%=mod;if(a<0)a+=mod;return a;}

int fast_exp(int base, int expo, int mod = MOD) {
	int res=1;
	while(expo>0) {
		if(expo&1) res=(res*base)%mod;
		base=(base*base)%mod;
		expo>>=1;}
	return res;}

int modinv(int a, int mod = MOD){return takemod(fast_exp(takemod(a, mod), mod-2, mod), mod);}

// Initialise with the first few terms and modulo.
// There should be atleast 2*M terms, where M is degree of recurrence.
// To obtain k'th term, call work(k);

struct BerlekampMassey {
    vector<int> terms;
    int m; ll mod;
    vector<ll> a, h, t_, s, t;
    BerlekampMassey(vector<int> terms, ll mod = MOD) : terms(terms), mod(mod) {}

    vector<int> BM(vector<int> x) {
        vector<int> ls, cur;
        int lf, l;
        for (int i = 0; i < x.size(); ++i) {
            ll t = 0;
            for (int j = 0; j < cur.size(); ++j) {
                t = (t + x[i - j - 1] * (ll) cur[j]) % mod;
            }
            if ((t - x[i]) % mod == 0) continue;
            if(!cur.size()) {
                cur.resize(i+1);
                lf = i; 
                l = (t - x[i]) % mod;
                continue;
            }
            ll k = -(x[i] - t) * fast_exp(l, mod - 2, mod) % mod;
            vector<int> c(i - lf - 1);
            c.emplace_back(k);
            for (int j = 0; j < ls.size(); ++j) {
                c.emplace_back(-ls[j] * k % mod);
            }
            if (c.size() < cur.size()) c.resize(cur.size());
            for (int j = 0; j < cur.size(); ++j)
                c[j] = (c[j] + cur[j]) % mod;

            if (i - lf + ls.size() >= cur.size()) {
                ls = cur;
                lf = i;
                l = (t - x[i]) % mod;
            }
            cur = c;
        }
        for (int i = 0;i < cur.size(); ++i) {
            cur[i] = (cur[i] % mod + mod) % mod;
        }
        return cur;
    }
    
    void mull(vector<ll> &p, vector<ll> &q) {
        for (int i = 0; i < m + m; ++i) t_[i] = 0;
        for (int i = 0; i < m; ++i) {
            if (p[i]) {
                for (int j = 0; j < m; ++j) {
                    t_[i + j] = (t_[i + j] + p[i] * q[j]) % mod;
                }
            }
        }

        for (int i = m + m - 1; i >= m; --i) {
            if (t_[i]) {
                for (int j = m - 1; ~j; --j) {
                    t_[i - j - 1] = (t_[i - j - 1] + t_[i] * h[j]) % mod;
                }
            }
        }
        for (int i = 0; i < m; ++i) {
            p[i] = t_[i];
        }
    }

    ll calc(ll K) {
        for (int i = m; ~i; --i)
            s[i] = t[i] = 0;

        s[0] = 1; 
        if (m != 1) {
            t[1] = 1; 
        } else {
            t[0] = h[0];
        }
        while (K > 0) {
            if (K % 2) mull(s, t);
            mull(t, t); 
            K /= 2;
        }

        ll su = 0;
        for (int i = 0; i < m; ++i) su = (su + s[i] * a[i]) % mod;
        return (su % mod + mod) % mod;
    }
    
    int work(ll n) {
        if (n < terms.size()) return terms[n];
        vector<int> v = BM(terms); 
        m = v.size(); 
        a = h = t_ = s = t = vector<ll>(2 * m, 0);

        if (m == 0) return 0;
        for (int i = 0; i < m; ++i) {
            h[i] = v[i];
            a[i] = terms[i];
        }
        return calc(n);
    }
};

void solve()
{
	int n;
	cin >> n;
	BerlekampMassey p({10, 180, 2610, 34200,423000}, 998244353);
	for(int i = n - 1; i >= 0; i--) {
		cout << p.work(i) << " ";
	}
}

signed main(){
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	#ifdef MADHAV
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("error.txt", "w", stderr);
	#endif
	clock_t t1, t2;
	t1 = clock();

	int tt = 1;
	// cin >> tt;
	while(tt--)
	{
		solve();
	}
	#ifdef MADHAV
	t2 = clock(); cerr << "time taken: " << (t2-t1)/(dbl)CLOCKS_PER_SEC;
	#endif
	return 0;
}