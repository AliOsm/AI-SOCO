// tutorial is your best friend

#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define sep ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

struct cmp {
	bool operator() (const pair<int, int> &a, const pair<int, int> &b) const {
		int lena = a.second - a.first + 1;
		int lenb = b.second - b.first + 1;
		if (lena == lenb) return a.first < b.first;
		return lena > lenb;
	}
};


void solve() {
	int n; cin >> n;
	set<pair<int, int>, cmp> seg;
	seg.insert({1, n});
	// middle of range obtain from (first + second) / 2 then no need stor this
	// if two node to be equal then select left child.
	//node a is located on the left side of node b if a.first < b.first
	vector<int> res(n + 1);
	int mid, i = 1;
	while (!seg.empty()) {
		pair<int, int> cur = *seg.begin();
		seg.erase(cur);
		mid = (cur.first + cur.second) / 2;
		res[mid] = i;
		++i;
		if (mid - 1 >= cur.first) seg.insert({cur.first, mid - 1});
		if (cur.second >= mid + 1) seg.insert({mid + 1, cur.second});
		
	};
	
	for (int I = 1; I <= n; ++I)
		cout << res[I] << " ";
	cout << "\n";
}

int main()
{
	sep;
	int q; cin >> q;
	for (; q > 0; --q) solve();
	return 0;    
}
