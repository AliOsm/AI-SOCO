#include <bits/stdc++.h>
#define int long long
#define inf 1e15
using namespace std;
int read()
{
    int x;
    scanf("%I64d", &x);
    return x;
}
const int N = 212345;
int a[N];
main()
{
    int n, m, i, j, x;
    cin >> n >> m >> x;
    for(i = 1; i <= n; i ++)
        a[i] = read();
    int cnt = 0;
    for(i = 1; i <= n; i ++)
        if(a[i] < 0)
            cnt ++;
    if(cnt % 2 == 0)
    {
        int mn = inf;
        for(i = 1; i <= n; i ++)
        {
            mn = min(mn, abs(a[i]));
        }
        if(mn >= x * m)
        {
            for(i = 1; i <= n; i ++)
            {
                if(mn == abs(a[i]))
                {
                    if(a[i] > 0)
                        a[i] -= x * m;
                    else
                        a[i] += x * m;
                    break;
                }
            }
        }
        else
        {
            for(i = 1; i <= n; i ++)
            {
                if(mn == abs(a[i]))
                {
                    int t = (mn + 1) / x + (((mn + 1) % x) != 0);
                    if(a[i] >= 0)
                        a[i] -= t * x;
                    else
                        a[i] += t * x;
                    m -= t;
                    break;
                }
            }
            priority_queue < pair <int, int> > q;
            for(i = 1; i <= n; i ++)
            {
                q.push(make_pair(-abs(a[i]), i));
            }
            for(i = 1; i <= m; i ++)
            {
                int id = q.top().second;
                q.pop();
                if(a[id] >= 0)
                {
                    a[id] += x;
                }
                else
                {
                    a[id] -= x;
                }
                q.push(make_pair(-abs(a[id]), id));
            }
        }

    }
    else
    {
        priority_queue < pair <int, int> > q;
        for(i = 1; i <= n; i ++)
        {
            q.push(make_pair(-abs(a[i]), i));
        }
        for(i = 1; i <= m; i ++)
        {
            int id = q.top().second;
            q.pop();
            if(a[id] >= 0)
            {
                a[id] += x;
            }
            else
            {
                a[id] -= x;
            }
            q.push(make_pair(-abs(a[id]), id));
        }
    }
    for(i = 1; i <= n; i ++)
        printf("%I64d ", a[i]);
}
