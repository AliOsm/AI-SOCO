#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define se second
#define pi 2*acos(0)
#define PI 3.14159265358979323846264338

typedef long long ll;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;
const int N = 100010;

inline int in() {int x; scanf("%d",&x); return x;}
inline ll lin() {ll x; scanf("%I64d",&x); return x;}

int n;
int x, y;

ll ar[505][505];

ll P(){
    ll tot = 0;
    if(n == 1) return 1;

    int z;
    if(x - 1 > 0) z = x - 1;
    else z = x + 1;

    for(int i = 1;i <= n; i++) tot += ar[z][i];

    set < ll > s;

    ll tmp = 0;
    for(int i = 1;i <= n; i++) tmp += ar[x][i];

    s.insert(tmp);

    tmp = 0;
    for(int i = 1;i <= n; i++) tmp += ar[i][y];

    s.insert(tmp);

    tmp = 0;
    if(x == y){
        for(int i = 1;i <= n; i++) tmp += ar[i][i];
        s.insert(tmp);
    }

    tmp = 0;
    if(y == (n - x + 1)){
        for(int i = 1;i <= n; i++) tmp += ar[i][n - i + 1];
        s.insert(tmp);
    }

    if((int)s.size() > 1){
        //puts("-1");
        return -1;
    }

    ll v = *s.begin();
    if(v >= tot){
        //puts("-1");
        return -1;
    }

    ar[x][y] = tot - v;


    set < ll > ans;

    for(int i = 1;i <= n; i++){
        tmp = 0;
        for(int j = 1;j <= n; j++){
            tmp += ar[i][j];
        }
        ans.insert(tmp);
    }

    for(int i = 1;i <= n; i++){
        tmp = 0;
        for(int j = 1;j <= n; j++){
            tmp += ar[j][i];
        }
        ans.insert(tmp);
    }

    tmp = 0;
    for(int i = 1;i <= n; i++) tmp += ar[i][i];

    ans.insert(tmp);

    tmp = 0;
    for(int i = 1;i <= n; i++) tmp += ar[i][n - i + 1];

    ans.insert(tmp);

    if((int)ans.size() > 1) return -1;
    return ar[x][y];
}

int main(){
    n = in();
    for(int i = 1;i <= n; i++){
        for(int j = 1;j <= n; j++){
            ar[i][j] = lin();
            if(ar[i][j] == 0){
                x = i; y = j;
            }
        }
    }

    printf("%I64d\n",P());
}
