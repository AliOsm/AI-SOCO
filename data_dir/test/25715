# include <stdio.h>
# include <bits/stdc++.h>


#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace std;

inline bool isvowel (char c) {
	c = tolower(c);
    if (c == 'a' || c == 'e' || c == 'i' || c == 'y' || c == 'o' || c == 'u') return 1;
    return 0;
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 1e5 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, m, k;
int c[N];
struct node {
    int a[60];
    
    node () {
        for (int i = 0; i < 60; i ++) a[i] = 0;
    }
    
} t[N * 4];

node merge (node a, node b) {
    node res;
    for (int i = 0; i < 60; i ++) {
        res.a[i] = a.a[i] + b.a[(i + a.a[i]) % 60];
    }
    return res;
}

void build (int v = 1, int tl = 1, int tr = n) {
    if (tl == tr) {
        for (int i = 0; i < 60 ;i ++) {
            t[v].a[i] = 1;
            if (i % c[tl] == 0) {
                t[v].a[i] ++;
            }
        }
        return ;
    }
    
    int tm = (tl + tr) >> 1;
    build ((v << 1), tl, tm);
    build ((v << 1) | 1, tm + 1, tr);
    
    t[v] = merge(t[(v << 1)], t[(v << 1) | 1]);
}

int get (int l, int r, int start = 0, int v = 1, int tl = 1, int tr = n) {
    if (tl > r || tr < l) return 0;
    if (tl >= l && tr <= r) {
        return t[v].a[start];
    }
    
    int tm = (tl + tr) >> 1;
    int x = get(l, r, start, (v << 1), tl, tm);
    int y = get(l, r, (start + x) % 60, (v << 1) | 1, tm + 1, tr);
    
    return x + y;
}

void upd (int pos, int x, int v = 1, int tl = 1, int tr = n) {
    if (tl == tr) {
        for (int i = 0; i < 60 ;i ++) {
            t[v].a[i] = 1;
            if (i % x == 0) {
                t[v].a[i] ++;
            }
        }
        return ;
    }
    
    int tm = (tl + tr) >> 1;
    if (pos <= tm) upd (pos, x, (v << 1), tl, tm);
    else upd (pos, x, (v << 1) | 1, tm + 1, tr);
    
    t[v] = merge(t[(v << 1)], t[(v << 1) | 1]);
}

int main () {
    cin >> n;
    for (int i = 1; i <= n; i ++) {
        cin >> c[i];
    }
    build();
    int q;
    cin >> q;
    while (q --) {
        char tp;
        int x, y;
        cin >> tp >> x >> y;
        if (tp == 'A') {
            y --;
            cout << get(x, y) << '\n';
            continue;
        }
        upd (x, y);
    }
	return Accepted;
}

// Coded By OB