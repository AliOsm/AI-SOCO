#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define F first
#define S second
using namespace std;

const int MAXN  = 101 * 1001  , MOD = 95542721 ;   ;

ll seg[48][4*MAXN]  , lazy[4*MAXN] ; int  a[MAXN];

void build(int s , int e , int ind )
{
    if(e-s<2)
    {
        seg[0][ind] = a[s] ;
        for(int i = 1 ; i < 48 ; i ++ )
            seg[i][ind] = (seg[i-1][ind]*seg[i-1][ind]%MOD)*seg[i-1][ind]%MOD ;
        return  ;
    }
    int mid = (s+e) / 2  ;
    build(s,mid,2*ind);
    build(mid,e,2*ind+1);
    for(int i = 0 ; i < 48 ; i ++ )
        seg[i][ind] = (seg[i][2*ind] + seg[i][2*ind+1]) % MOD ;
}

ll aa[48] ;

void rotate(int ind , int val)
{

    for(int i = 0 ; i  < 48   ; i ++ )
        aa[i] = seg[(i+val)%48][ind] ;
   for(int i = 0 ; i < 48 ; i ++ )
        seg[i][ind] = aa [i];
}

inline void shift(int ind )
{
    rotate(2*ind,lazy[ind]);
    rotate(2*ind+1,lazy[ind]);
    lazy[2*ind] = (lazy[ind]+lazy[2*ind]) ;
    lazy[2*ind+1] = (lazy[ind]+lazy[2*ind+1]) ;
    lazy[ind] = 0 ;
}

void update(int l , int r , int s , int e , int ind)
{
    if(r <= s || e <= l)
        return ;
    if(l <= s && e <= r )
    {
        lazy[ind]++;
        rotate(ind,1);
        return ;
    }
    int mid = (s+e)/2;
    shift(ind);
    update(l,r,s,mid,2*ind);
    update(l,r,mid,e,2*ind+1);
    for(int i = 0 ; i < 48 ; i ++ )
        seg[i][ind] = (seg[i][2*ind] + seg[i][2*ind+1]) % MOD ;
}

int get(int l , int r , int s , int e , int ind )
{
    if(r <= s || e <= l)
        return 0 ;
    if(l <= s && e <= r )
        return seg[0][ind];
    int mid = (s+e)/2;
    shift(ind);
    return (get(l,r,s,mid,2*ind) + get(l,r,mid,e,2*ind+1))%MOD ;

}

int32_t main()
{
    int n ;
    cin >> n ;
    for(int i = 0 ; i < n ; i ++ )
        scanf("%d",&a[i]);
    build(0,n,1);
    int q , l , r , x ;
    cin >> q ;
    while(q--)
    {
        scanf("%d%d%d",&x,&l,&r);
        l--;
        if(x==2)
            update(l,r,0,n,1);
        else
            printf("%d\n",get(l,r,0,n,1));
    }



}
