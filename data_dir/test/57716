#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define mod(n, m) (((n%m) + m)%m)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'

ll n, m;

struct point
{
	ll x, y;
	bool operator <(point a) const
	{
		if (this->x == a.x)
			return this->y < a.y;
		return this->x < a.x;
	}
};

point el1, er1;

ll overlappingArea(point l1, point r1, point l2, point r2)
{
	el1.x = max(l1.x, l2.x), er1.x = min(r1.x, r2.x);
	el1.y = max(l1.y, l2.y), er1.y = min(r1.y, r2.y);

	if (el1.x > er1.x || el1.y > er1.y)
		return 0;

	return (min(r1.x, r2.x) - max(l1.x, l2.x) + 1)
			* (min(r1.y, r2.y) - max(l1.y, l2.y) + 1);
}

pair<ll, ll> area(point l1, point r1)
{
	ll cols = (r1.x - l1.x + 1);

	ll black = 0, white = 0;

	ll elements = (r1.y - l1.y + 1);
	if ((l1.x + l1.y) % 2 == 0)
	{
		black = elements / 2;
		white = elements - black;
	}
	else
	{
		white = elements / 2;
		black = elements - white;
	}

	ll minor = cols / 2;
	ll major = cols - minor;

	return {white * major + black * minor, black * major + white * minor};
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	int tc;
	cin >> tc;
	while (tc--)
	{
		cin >> n >> m;
		point lowerW, upperW, lowerB, upperB;
		cin >> lowerW.x >> lowerW.y >> upperW.x >> upperW.y;
		cin >> lowerB.x >> lowerB.y >> upperB.x >> upperB.y;

		ll black = 0, white = 0;
		point aa;
		aa.x = 1, aa.y = 1;
		point bb;
		bb.x = n, bb.y = m;
		pair<ll, ll> res = area(aa, bb);
		white += res.first, black += res.second;
//		cout << white << " " << black << endl;

		auto r1 = area(lowerW, upperW);
		white += r1.second;
		black -= r1.second;
//		cout << white << " " << black << endl;

		auto r2 = area(lowerB, upperB);
		white -= r2.first;
		black += r2.first;
//		cout << white << " " << black << endl;

		if (overlappingArea(lowerW, upperW, lowerB, upperB) > 0)
		{
			auto r3 = area(el1, er1);
//			cout << r3.first << endl;
			white -= r3.second;
			black += r3.second;
		}

		cout << white << " " << black << endl;
	}

	return 0;
}
