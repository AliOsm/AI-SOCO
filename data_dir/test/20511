#include <bits/stdc++.h>
using namespace std;

int A[3000][3000];


deque<int> dq[3000];

int main () {
  ios_base::sync_with_stdio(false); cin.tie(0);
  int n, m, a, b; cin >> n >> m >> a >> b;
  int g, x, y, z; cin >> g >> x >> y >> z;
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      A[i][j] = g;
      g = (1ll * g * x + y) % z;
    }
  }
  long long ans = 0;
  auto sweepRow = [&]() {
    vector<int> B(m);
    for (int j = 0; j < m; ++j) B[j] = A[dq[j].front()][j];
    deque<int> q;
    for (int j = 0; j < b; ++j) {
      while (q.size() and B[q.back()] >= B[j]) q.pop_back();
      q.push_back(j);
    }
    ans += B[q.front()];
    for (int j = b; j < m; ++j) {
      if (q.front() <= j - b) q.pop_front();
      while (q.size() and B[q.back()] >= B[j]) q.pop_back();
      q.push_back(j);
      ans += B[q.front()];
    }
  };
  for (int i = 0; i < a; ++i) for (int j = 0; j < m; ++j) {
    while (dq[j].size() and A[dq[j].back()][j] >= A[i][j]) dq[j].pop_back();
    dq[j].push_back(i);
  }
  sweepRow();
  for (int i = a; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      if (dq[j].front() <= i - a) dq[j].pop_front();
      while (dq[j].size() and A[dq[j].back()][j] >= A[i][j]) dq[j].pop_back();
      dq[j].push_back(i);
    }
    sweepRow();
  }
  cout << ans << '\n';
}

