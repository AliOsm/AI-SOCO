//#define _USE_MATH_DEFINES
//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0); }
inline int safe_mul(const int x, const int y) __attribute__ ((warn_unused_result));

int const maxn = 1005;
int dpright[maxn][maxn];
int dpdown[maxn][maxn];
int dp[maxn][maxn];
int dpu[maxn][maxn];

int main()
{
//    freopen("in.txt","r", stdin);
//    freopen("out.txt", "w", stdout);
//    cout << fixed << setprecision(20);
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int n,m;
    cin >> n >> m;


    vector<string> s(n);
    for (int i = 0; i < n; ++i) {
        cin >> s[i];
        dpright[i][m - 1] = 1;
        for (int j = m - 2; j >= 0; --j) {
            dpright[i][j] = s[i][j] == s[i][j + 1] ? 1 + dpright[i][j + 1] : 1;
        }
    }

    for (int j = 0; j < m; ++j) {
        dpdown[n - 1][j] = 1;
        dp[n - 1][j] = dpright[n - 1][j];
    }
    for (int i = n - 2; i >= 0; --i)
        for (int j = 0; j < m; ++j) {
            if (s[i][j] == s[i + 1][j]) {
                dpdown[i][j] = 1 + dpdown[i + 1][j];
                dp[i][j] = min(dpright[i][j], dp[i + 1][j]);
            } else {
                dpdown[i][j] = 1;
                dp[i][j] = dpright[i][j];
            }
        }

    for (int j = 0; j < m; ++j)
        dpu[0][j] = dpright[0][j];

    for (int i = 1; i < n; ++i)
    for (int j = 0; j < m; ++j)
        if (s[i][j] == s[i - 1][j])
            dpu[i][j] = min(dpright[i][j], dpu[i - 1][j]);
        else
            dpu[i][j] = dpright[i][j];

    int64_t ans = 0;
    for (int x = 0; x < n; ++x)
    for (int y = 0; y < m; ++y) {
        int i = x + dpdown[x][y];
        if (i == n)
            continue;
        int j = i + dpdown[i][y];
        if (j == n)
            continue;
        int k = j + j - i;
        if (i - x == j - i && k <= n && dpdown[j][y] >= j - i) {
            ans += min({dp[x][y], dp[i][y], dpu[k - 1][y]});
        }
    }
    cout << ans << endl;
}
