#include <bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef pair <ll, ll> pll;

const int Max = 2e6 + 10;
const int Mod = 1e9 + 7;
const ll Inf = 1LL << 62;

ll mark[Max];
ll ar[Max];

int main() {
#ifdef Mr_Emrul
	freopen("inputf.in", "r", stdin);
#endif /// Mr_Emrul

	ios_base::sync_with_stdio(false);
	cin.tie(0);

	int n, k;
	cin >> n >> k;
	set <int> alive;
	set <pair<int, int>> st;
	for(int i = 1; i <= n; i++) {
		cin >> ar[i];
		st.insert({-ar[i], i});
		alive.insert(i);
	}
	int f = 0;
	while(st.size()) {
		pair<int, int> cur = *st.begin();
		int idx = cur.second;
		//printf("%d = id\n", idx);
		auto it = alive.lower_bound(idx);
		auto rgt = it;
		rgt++;
		vector <int> vec;
		int rem = k;
		int prv = idx;
		while(rgt != alive.end() && rem) {
			if(mark[*rgt]) break;
			if(*rgt <= prv) break;
			prv = *rgt;
			vec.push_back(*rgt);
			rgt++;
			rem--;
		}
		auto lft = it;
		lft--;
		rem = k;
		prv = idx;
		while(rem) {
			if(*lft < prv && mark[*lft] == 0) {
				vec.push_back(*lft);
				prv = *lft;
				lft--;
				rem--;
			}
			else {
				break;
			}
		}
		vec.push_back(idx);
		for(int x : vec) {
			if(!f) {
				mark[x] = 1;
			}
			else {
				mark[x] = 2;
			}
			st.erase({-ar[x], x});
			alive.erase(x);
			//printf("kata %d\n", x);
		}
		f = !f;
		//for(int x : alive) {
		//	cout << x << " ";
		//}
		//cout << endl;
	}
	for(int i = 1; i <= n; i++) {
		cout << mark[i];
	}
	cout << endl;
	return 0;
}