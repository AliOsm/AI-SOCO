#include<bits/stdc++.h>
#define si(x) scanf("%d",&x)
#define sii(x,y) scanf("%d %d",&x,&y)
#define siii(x,y,z) scanf("%d %d %d",&x,&y,&z)
#define su(x) scanf("%u",&x)
#define sl(x) scanf("%ld",&x)
#define sli(x) scanf("%lld",&x)
#define slii(x,y) scanf("%lld %lld",&x,&y)
#define sliii(x,y,z) scanf("%lld %lld %lld",&x,&y,&z)
#define slu(x) scanf("%llu",&x)
#define sf(x) scanf("%f",&x)
#define slf(x) scanf("%lf",&x)
#define sc(x) scanf("%c",&x)
#define ss(x) scanf("%s",x)
#define pf printf
#define fpf fprintf
#define pb push_back
#define f(i,x,y,z) for(int i=x;i<y;i=i+z)
#define f1(i,x,y,z) for(int i=x;i>y;i=i-z)
#define MAX 10000000
#define pi 3.1415926535
#define mp make_pair
#define M 1000000009
#define xx first
#define yy second
#define N 300005
#define E 100005
#define vc vector
#define pq priority_queue
#define Q queue


using namespace std;

typedef long long int ll;
typedef unsigned long long int lu;

struct info{
    int p, mn, mx;
}par[N][19];

vc < int > v[N];

int l[N], vis[N], dp[N];
ll sum[N];

pair < int,int > findpar(int n, int k)
{
    pair < int,int > ans;
    ans.xx = MAX;
    ans.yy = 0;
    for(int i = 0;k>0;i++)
    {
        if((k&(1<<i))>0){
            k -= (1<<i);
            ans.xx = min(ans.xx,par[n][i].mn);
            ans.yy = max(ans.yy,par[n][i].mx);
            n = par[n][i].p;
        }
    }
    return ans;
}

void dfs(int n, int lv)
{
    l[n] = lv;
    vis[n] = 1;
    f(i,0,v[n].size(),1)
    {
        if(vis[v[n][i]]==0){
            par[v[n][i]][0].p = n;
            par[v[n][i]][0].mn = min(n,v[n][i]);
            par[v[n][i]][0].mx = max(n,v[n][i]);
            dfs(v[n][i],lv+1);
        }
    }
}

void dfs1(int n, int p)
{
    int a;
    pair < int,int > pp;
    vis[n] = 2;
    f(i,0,v[n].size(),1)
    {
        if(v[n][i]==p) continue;
        if(vis[v[n][i]]==2){
            ///if(l[n]<l[v[n][i]]) continue;
            if(l[n]>l[v[n][i]]) a = n;
            else a = v[n][i];
            pp = findpar(a,abs(l[n]-l[v[n][i]]));
            dp[pp.xx] = min(dp[pp.xx],pp.yy-1);
        }
        else dfs1(v[n][i],n);
    }
}

int bs(int n, int l, int r)
{
    int m;
    while(l<r)
    {
        m = (l+r)>>1;
        if(dp[m]>n) r = m;
        else l = m+1;
    }
    if(dp[r]>n) return r;
    return r+1;
}

int main()
{
    int n, m, a, b, c, q;
    sii(n,m);
    while(m>0){
        m--;
        sii(a,b);
        v[a].pb(b);
        v[b].pb(a);
    }
    f(i,1,n+1,1)
    {
        if(vis[i]==0) dfs(i,0);
    }
    f(i,1,n+2,1) dp[i] = n;
    for(int j = 1;(1<<j)<n;j++)
    {
        f(i,1,n+1,1)
        {
            if(par[i][j-1].p==0) continue;
            par[i][j].p = par[par[i][j-1].p][j-1].p;
            if(par[i][j].p==0) continue;
            par[i][j].mn = min(par[par[i][j-1].p][j-1].mn,par[i][j-1].mn);
            par[i][j].mx = max(par[par[i][j-1].p][j-1].mx,par[i][j-1].mx);
        }
    }
    f(i,1,n+1,1)
    {
        if(vis[i]!=2) dfs1(i,0);
    }
    sum[n+1] = 0;
    ///cout<<endl;
    f1(i,n,0,1)
    {
        dp[i] = min(dp[i],dp[i+1]);
        sum[i] = sum[i+1]+(ll)dp[i]-(ll)i+1ll;
        ///cout<<sum[i]<<" "<<dp[i]<<endl;
    }
    si(q);
    ll ans;
    while(q>0){
        q--;
        sii(a,b);
        c = bs(b,a,b);
        ///cout<<c<<endl;
        ans = sum[a]-sum[c]+(ll)(b+1)*(ll)(b-c+1)-((ll)(b-c+1)*(ll)(c+b))/2ll;
        pf("%lld\n",ans);
    }
    return 0;
}
