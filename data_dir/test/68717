#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef pair<LL, LL> PLL;

const PLL M = make_pair(1e9+7, 1e9+9);   ///Should be large primes
const LL base = 1e3+3;              ///Should be a prime larger than highest value

ostream& operator<<(ostream& os, PLL hash) {
    return os<<"("<<hash.first<<", "<<hash.second<<")";
}

PLL operator+ (PLL a, LL x)     {return make_pair(a.first + x, a.second + x);}
PLL operator- (PLL a, LL x)     {return make_pair(a.first - x, a.second - x);}
PLL operator* (PLL a, LL x)     {return make_pair(a.first * x, a.second * x);}
PLL operator+ (PLL a, PLL x)    {return make_pair(a.first + x.first, a.second + x.second);}
PLL operator- (PLL a, PLL x)    {return make_pair(a.first - x.first, a.second - x.second);}
PLL operator* (PLL a, PLL x)    {return make_pair(a.first * x.first, a.second * x.second);}
PLL operator% (PLL a, PLL m)    {return make_pair(a.first % m.first, a.second % m.second);}

const int N = 2e5 + 100;

PLL Hash[N];
PLL pw[N];
int next_zero[N], prev_zero[N];
int sz[N];
int n;
string s;

PLL find_hash(int l, int r) {
    if(next_zero[l] == -1 or next_zero[l] > r) {
        if((r-l+1)&1) return make_pair(2*base, 2*base);
        return make_pair(0,0);
    }
    int x = next_zero[l], y = prev_zero[r];
    PLL mid_hash = Hash[y]-Hash[x-1];
    mid_hash = mid_hash%M;
    mid_hash = mid_hash + M;
    mid_hash = mid_hash%M;
    int k = sz[y]-sz[x]+1;
    int st = sz[x];
    if((x-l+1)&1) {
        mid_hash = mid_hash + pw[sz[x]-1]*2;
        mid_hash = mid_hash%M;
        st--;
    }
    if((r-y+1)&1) {
        mid_hash = mid_hash + pw[sz[y]+1]*2;
        mid_hash = mid_hash%M;
    }
    mid_hash = mid_hash * pw[n-st];
    mid_hash = mid_hash%M;
    return mid_hash;
}

int main() {
    // freopen("in.txt", "r", stdin);
    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> n >> s;
    s = "?" + s;
    PLL h = make_pair(1,1);
    int c = 0;
    for(int i = 1; i <= n; i++) {
        if(i+1 <= n && s[i]=='1' && s[i+1] == '1') {
            i++;
            continue;
        }
        h = h*base;
        h = h%M;
        Hash[i] = h*(s[i]-'0'+1);
        Hash[i] = Hash[i]%M;
        sz[i] = ++c;
    }
    pw[0] = make_pair(1,1);
    for(int i = 1; i < N; i++) {
        pw[i] = pw[i-1]*base;
        pw[i] = pw[i]%M;
    }
    for(int i = 1; i <= n; i++) {
        Hash[i] = Hash[i-1] + Hash[i];
        Hash[i] = Hash[i]%M;
    }
    int last = -1;
    for(int i = 1; i <= n; i++) {
        if(s[i] == '0') last = i;
        prev_zero[i] = last;
    }
    last = -1;
    for(int i = n; i >= 1; i--) {
        if(s[i] == '0') last = i;
        next_zero[i] = last;
    }
    int q;
    cin >> q;
    while(q--) {
        int l1, l2, len;
        cin >> l1 >> l2 >> len;
        int r1 = l1+len-1, r2 = l2+len-1;
        if(find_hash(l1,r1) == find_hash(l2,r2)) cout << "Yes" << "\n";
        else cout << "No" << "\n";
    }
    return 0;
}
