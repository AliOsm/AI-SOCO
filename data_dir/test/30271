#include <stdio.h>
#include <stdlib.h>

#define N	200000

int oo[1 + N - 1], oj[1 + N - 1];

int link(int o, int j) {
	static int _ = 1;

	oo[_] = o, oj[_] = j;
	return _++;
}

int ae[N], ca[N], cb[N], dd[N], ta[N], tb[N], n, n_;

void dfs(int i, int d) {
	static int time;
	int o;

	ta[i] = time++;
	for (o = ae[i]; o; o = oo[o]) {
		int j = oj[o];

		dfs(j, d + 1);
	}
	tb[i] = time;
}

int compare1(const void *a, const void *b) {
	int i = *(int *) a;
	int j = *(int *) b;

	return dd[i] != dd[j] ? dd[i] - dd[j] : ta[i] - ta[j];
}

int compare2(const void *a, const void *b) {
	int i = *(int *) a;
	int j = *(int *) b;

	return ca[i] != ca[j] ? ca[i] - ca[j] : (cb[i] != cb[j] ? cb[i] - cb[j] : dd[i] - dd[j]);
}

int ii[N], jj[N];

int search1(long long d, int a) {
	int lower = -1, upper = n;
	
	while (upper - lower > 1) {
		int h = (lower + upper) / 2, i = ii[h];

		if (dd[i] < d || dd[i] == d && ta[i] <= a)
			lower = h;
		else
			upper = h;
	}
	return lower + 1;
}

int search2(int a, int b, long long d) {
	int lower = -1, upper = n_;

	while (upper - lower > 1) {
		int h = (lower + upper) / 2, j = jj[h];

		if (ca[j] < a || ca[j] == a && (cb[j] < b || cb[j] == b && dd[j] <= d))
			lower = h;
		else
			upper = h;
	}
	return lower + 1;
}

int main() {
	static int aa[N], ll[N + 1];
	static char cycle[N];
	int m, q, i, d;

	scanf("%d", &n);
	for (i = 0; i < n; i++)
		scanf("%d", &aa[i]), aa[i]--;
	scanf("%d", &q);
	m = 0;
	for (i = 0; i < n; i++) {
		int j, a, b, l;

		if (ca[i])
			continue;
		j = i, d = 0;
		while (!ca[j]) {
			ca[j] = -1;
			j = aa[j], d++;
		}
		if (ca[j] == -1) {
			a = ++m;
			l = 0;
			while (ca[j] == -1) {
				ca[j] = -2;
				l++;
				cycle[j] = 1;
				j = aa[j];
			}
			ll[a] = l, b = 0;
			d -= l;
		} else {
			a = ca[j], l = ll[a], b = (cb[j] - d) % l;
			if (b < 0)
				b += l;
			d += dd[j];
		}
		j = i;
		while (ca[j] < 0) {
			ca[j] = a, cb[j] = b++ % l, dd[j] = cycle[j] ? 0 : d--;
			j = aa[j];
		}
	}
	for (i = 0; i < n; i++)
		if (!cycle[i])
			ae[aa[i]] = link(ae[aa[i]], i);
	for (i = 0; i < n; i++)
		if (cycle[i])
			dfs(i, 0);
	for (i = 0; i < n; i++)
		ii[i] = i;
	qsort(ii, n, sizeof *ii, compare1);
	for (i = 0; i < n; i++)
		if (!cycle[i])
			jj[n_++] = i;
	qsort(jj, n_, sizeof *jj, compare2);
	while (q--) {
		long long k;

		scanf("%lld%d", &k, &i), i--;
		if (!cycle[i])
			printf("%d\n", search1(dd[i] + k, tb[i] - 1) - search1(dd[i] + k, ta[i] - 1));
		else {
			int a = ca[i], b = (cb[i] - k) % ll[a];

			if (b < 0)
				b += ll[a];
			printf("%d\n", 1 + search2(a, b, dd[i] + k) - search2(a, b, -1));
		}
	}
	return 0;
}
