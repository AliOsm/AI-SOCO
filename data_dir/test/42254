#include <bits/stdc++.h>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
typedef long long ll;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 5e3 + 5;
const double eps = 1e-9;
using namespace std;
int a[MAXN];
int ans[MAXN][MAXN];
int dp[MAXN][MAXN];
int id[MAXN], mem[MAXN][MAXN];

int f(int l, int r)
{
    if (mem[l][r] != -1)
        return mem[l][r];
    int ret = 0;
    int m = r - l + 1;
    if (m == 1)
        return mem[l][r] = a[l];
    else if (m <= 16)
    {
        mem[l][r] = 0;
        for (int i = l; i <= r; i++)
        {
            if (dp[m - 1][i - l] == 0)
                continue;
            mem[l][r] ^= a[i];
        }
        return mem[l][r];
    }
    return mem[l][r] = f(l, r - (1 << id[m - 1])) ^ f(l + (1 << id[m - 1]), r);
}

int main()
{
    int n, q;
    ni(n);
    nai(a, n);
    for (int i = n - 1; i >= 0; i--)
    {
        dp[i][0] = a[i];
        for (int j = 1; j + i < n; j++)
            dp[i][j] = dp[i][j - 1] ^ dp[i + 1][j - 1];
    }
    for (int i = n - 1; i >= 0; i--)
    {
        for (int j = i; j < n; j++)
        {
            if (i + 1 <= j)
                ans[i][j] = max(ans[i][j], ans[i + 1][j]);
            if (j - 1 >= i)
                ans[i][j] = max(ans[i][j], ans[i][j - 1]);
            if (i + 1 <= j - 1)
                ans[i][j] = max(ans[i][j], ans[i + 1][j - 1]);
            ans[i][j] = max(ans[i][j], dp[i][j - i]);
        }
    }
    ni(q);
    for (int i = 0; i < q; i++)
    {
        int l, r;
        ni(l), ni(r);
        l--, r--;
        pri(ans[l][r]);
    }
    return 0;
}
