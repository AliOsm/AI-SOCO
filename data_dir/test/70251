#include <bits/stdc++.h>

using namespace std;

#ifdef NeverBeRed
#include "debug.h"
#else
#define debug(...) 9715
#endif
typedef long long ll;
typedef long double ld;
typedef complex<ld> point;
#define F first
#define S second



int main()
{
	#ifdef TurnRed
		//freopen("a.in", "r", stdin);
		//freopen("a.out", "w", stdout);
	#endif

	ios_base::sync_with_stdio(0), cin.tie(0);

	int t;
	cin >> t;
	while (t--)
	{
		int n, m;
		cin >> n >> m;
		vector<vector<ll>> a(n, vector<ll>(m));
		for (auto &i : a)
			for (auto &j : i)
				cin >> j;

		const ll inf = numeric_limits<ll>::max() / 4;
		ll ans = inf;
		for (int x = 0; x < n; ++x)
			for (int y = 0; y < m; ++y)
			{
				vector<vector<ll>> dp(n, vector<ll>(m, inf));
				dp[x][y] = 0;
				ll val = a[x][y];
				auto dp2 = dp;

				for (int i = x; i < n; ++i)
					for (int j = y; j < m; ++j)
					{
						ll cur = val + i-x + j-y;
						if (i+1 < n && a[i+1][j] >= cur + 1)
							dp[i+1][j] = min(dp[i+1][j], dp[i][j] + a[i+1][j] - cur - 1);
						if (j+1 < m && a[i][j+1] >= cur + 1)
							dp[i][j+1] = min(dp[i][j+1], dp[i][j] + a[i][j+1] - cur - 1);
					}

				for (int i = x; i >= 0; --i)
					for (int j = y; j >= 0; --j)
					{
						ll cur = val + i-x + j-y;
						if (i-1 >= 0 && a[i-1][j] >= cur - 1)
							dp2[i-1][j] = min(dp2[i-1][j], dp2[i][j] + a[i-1][j] - cur + 1);
						if (j-1 >= 0 && a[i][j-1] >= cur - 1)
							dp2[i][j-1] = min(dp2[i][j-1], dp2[i][j] + a[i][j-1] - cur + 1);
					}

				ans = min(ans, dp2[0][0] + dp[n-1][m-1]);
			}
		cout << ans << "\n";
	}

	return 0;
}
