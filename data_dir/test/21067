#include<bits/stdc++.h>
using namespace std;

#define fi                      first
#define se                      second
#define pb                      push_back
#define endl                    '\n'
#define all(x)                  x.begin(),x.end()
#define pii                     pair<int,int>
#define pll                     pair< long long int, long long int> 
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define SZ(x)                   ((int)x.size())

#define FOR(i,a,b)              for(int i = a; i < b; ++i)
#define REV(i,a,b)              for(int i = a; i >= b; --i)
#define FORE(i,a,b)             for(int i = a; i <= b; ++i)

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

void solve();

int32_t main()
{
        fast;
        int t = 1;
        // cin >> t;
        for(int i = 1; i <= t; ++i)
                solve();
        cerr << "Time taken: " << ((clock() * 1000) / CLOCKS_PER_SEC) << "ms\n";
}


#define int ll
const int K = 62;
const int N = 2e5+5;
int lg[N];
int s[N][K], s2[N][K];
int a[N], b[N];
int n;

void build() {
        FOR(i,0,n) {
                s[i][0] = a[i];
                s2[i][0] = b[i];
        }
        lg[1] = 0;
        FOR(i,2,N) {
                lg[i] = lg[i/2] + 1;
        }
        FOR(j,1,K+1) {
                for(int i = 0; i + (1ll << j) <= n; ++i) {
                        s[i][j] = min(s[i][j-1], s[i + (1 << (j-1))][j-1]); 
                        s2[i][j] = max(s2[i][j-1], s2[i + (1 << (j-1))][j-1]);
                }
        }
}

int RMNQ(int l,int r) {
        int j = lg[r-l+1];
        return min(s[l][j],s[r - (1 << j) + 1][j]); 
}

int RMXQ(int l,int r) {
        int j = lg[r - l + 1];
        return max(s2[l][j], s2[r-(1 << j)+1][j]);
}

void solve() {
        cin >> n;
        FOR(i,0,n) cin >> b[i];
        FOR(i,0,n) cin >> a[i];
        build();
        int ans = 0;
        FOR(i,0,n) {
                int lo = i-1;
                int hi = n;
                int l = -1, r = -1;
                while(hi - lo > 1) {
                        int mid = (lo + hi) / 2;
                        int p = RMNQ(i,mid);
                        int q = RMXQ(i,mid);
                        if(p == q) {
                                l = mid;
                        }
                        if(p <= q) {
                                hi = mid;
                        }
                        else {
                                lo = mid;
                        }
                }
                lo = i-1, hi = n;
                while(hi - lo > 1) {
                        int mid = (lo + hi) / 2;
                        int p = RMNQ(i,mid);
                        int q = RMXQ(i,mid);
                        if(p == q) {
                                r = mid;
                        }
                        if(p < q) {
                                hi = mid;
                        }
                        else {
                                lo = mid;
                        }
                }
                if(l != -1 and r != -1 and RMNQ(i,l) == RMXQ(i,l) and RMNQ(i,r) == RMXQ(i,r)) {
                        ans += (r - l + 1);
                }
        }
        cout << ans << endl;
}