#include <bits/stdc++.h>

#define int long long

using namespace std;

int a[51];
long long d[251][101][101][3];  
long long f[251];
long long inv[251];
int mod = 1e9 + 7;

long long C (int n, int k) {
	return (((f[n] * inv[n - k]) % mod) * inv[k]) % mod;
} 

long long bp (int x, int n) {
	long long res = 1;
	while (n) {
		if (n & 1) res = (res * x) % mod;
		x = (x * x) % mod;
		n >>= 1;
	}
	return res;
}

 main () {
	int n, K;
	cin >> n >> K;
//	k /= 10;
	int sum = 0;
	int kol1 = 0, kol2 = 0;
	for (int i = 1;i <= n;i ++) {
		cin >> a[i];
	//	a[i] /= 50;
		if (a[i] == 50) kol1 ++;
		else kol2 ++;
		sum += a[i];
	}
	sort (a + 1, a + n + 1);
	if (a[n] > K) {
		cout << -1 << endl << 0;
		return 0;
	}
	if (n == 1) {
		cout << 1 << endl << 1;
		return 0;    	
	}
	if (a[1] + a[2] > K) {
		cout << -1 << endl << 0;
		return 0;
	}
	f[0] = 1;
	inv[0] = 1;
	for (int i = 1;i <= 100;i ++) {
		f[i] = (f[i - 1] * i) % mod;
		inv[i] = bp (f[i], mod - 2) % mod;
	}
	d[0][kol1][kol2][0] = 1; 
	for (int k = 0;;k ++) {
		if (d[k][0][0][0]) {
			cout << k << endl << d[k][0][0][0];
			return 0;
			break;
		}
		if (d[k][0][0][1]) {
			cout << k << endl << d[k][0][0][1];
			return 0;
			break;
		}
		int wh = 0;
		for (int i = 0;i <= kol1;i ++) {
			for (int j = 0;j <= kol2;j ++) {                                  
				for (int ii = 0;ii <= i;ii ++) {
					for (int jj = 0;jj <= j;jj ++) {
						if (ii * 50 + jj * 100 > K || d[k][i][j][wh] == 0 || (ii == 0 && jj == 0)) continue;
						d[k + 1][i - ii][j - jj][wh ^ 1] = (d[k + 1][i - ii][j - jj][wh ^ 1] + (((d[k][i][j][wh] * C (i, ii)) % mod) * C (j, jj)) % mod) % mod;	
					}
				}
			}
		}
		wh = 1;
		for (int i = 0;i <= kol1;i ++) {
			for (int j = 0;j <= kol2;j ++) {
				for (int ii = 0;ii <= (kol1 - i);ii ++) {
					for (int jj = 0;jj <= (kol2 - j);jj ++) {
						if (ii * 50 + jj * 100 > K || d[k][i][j][wh] == 0 || (ii == 0 && jj == 0)) continue;
						d[k + 1][i + ii][j + jj][wh ^ 1] = (d[k + 1][i + ii][j + jj][wh ^ 1] + (((d[k][i][j][wh] * C ((kol1 - i), ii)) % mod) * C ((kol2 - j), jj)) % mod) % mod;	
					}
				}
			}
		}
	}
	return 0;
}