//#include "stdc++.h"
#include<bits/stdc++.h>
#include<iostream>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
using namespace std;
//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//typedef tuple<int, int, int> t3;
typedef long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <ll, int> pli;
typedef pair <db, db> pdd;
typedef vector<int> vi;
#define m1 make_pair
#define pb push_back
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0) return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p; }
#define flush fflush(stdout)
const ll MOD =998244353;
const int INF = 0x3f3f3f3f;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;
int main()
{
    int n;
    cin>>n;
    int m;
    cin>>m;
    vector<pair<int,int> >edges;int u,v;
    for(int i=0;i<m;i++)
    {
        cin>>u>>v;
        edges.pb(m1(u,v));
    }
    int l=1,r=m;int k;
    int ans=-1;
    while(l<=r)
    {
        k=(l+r)/2;
        vector<int> adj[n+1];
        int indegree[n+1];
        memset(indegree,0,sizeof(indegree));
        for(int i=0;i<k;i++)
        {
            u=edges[i].first;v=edges[i].second;
            adj[u].pb(v);
            indegree[v]++;
        }
        set<pair<int,int> >s;
        for(int i=1;i<=n;i++)
            s.insert(m1(indegree[i],i));
        set<pair<int,int> >::iterator it;pair<int,int>p1;pair<int,int>p2;int possible=1;
        while(!s.empty())
        {
            it=s.begin();
            p1=(*it);
            if(p1.first!=0)
            {
                possible=0;
                break;
            }
            s.erase(s.begin());
            if(!s.empty())
            {
                it=s.begin();
                p2=(*it);
                if(p2.first==0)
                {
                    possible=0;
                    break;
                }
            }
            u=p1.second;
            for(int i=0;i<adj[u].size();i++)
            {
                v=adj[u][i];
                it=s.find(m1(indegree[v],v));
                if(it!=s.end())
                {
                    s.erase(it);
                    indegree[v]--;
                    s.insert(m1(indegree[v],v));
                }
            }
        }
        if(possible)
        {
            r=k-1;
            ans=k;
        }
        else
            l=k+1;
    }
    cout<<ans<<endl;
    return 0;
}
