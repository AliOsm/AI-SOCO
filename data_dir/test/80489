#include <bits/stdc++.h>
using namespace std;
#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);

const int N = 3e6 + 5;
int n, m, cnt, a[N], t[N];
int ans[N], tree[4 * N];

struct xyz
{
    int x, y;
    int k;
};

xyz q[N], p[N];

bool cmp(xyz u, xyz v)
{    return 
      (u.y < v.y);
}

void Update(int k, int l, int r, int idx)
{
    if (l > idx || r < idx) 
      return;
    if (l == r)
    {
        tree[k] += 1;
        return;
    }
    int mid = (l + r) / 2;
    Update(k * 2, l, mid, idx);
    Update(k * 2 + 1, mid + 1, r, idx);
    tree[k] = tree[k * 2] + tree[k * 2 + 1];
}
int Get(int k, int l, int r, int L, int R)
{
    if (l > R || r < L) 
      return 0;
    
    if (L <= l && r <= R)
        return tree[k];
    int mid = (l + r) / 2;
    return (Get(k * 2, l, mid, L, R) + Get(k * 2 + 1, mid + 1, r, L, R));
}
int main()
{
		fast;
    cin >> n >> m;
    for (int i = 1; i <= n; i++)
    {
        cin >> a[i];
        t[a[i]] = i;
    }
    for (int i = 1; i <= n; i++)
    {
        int curr = a[i];
        while (curr <= n)
        {
            int index = t[curr];
            cnt++, curr += a[i];
            p[cnt].x = min(i, index);
            p[cnt].y = max(i, index);
        }
    }
    for (int i = 1; i <= m; i++)
    {
        cin >> q[i].x >> q[i].y;
        q[i].k = i;
    }
    sort(q + 1, q + m + 1, cmp);
    sort(p + 1, p + cnt + 1, cmp);
    int index = 1;
    for (int i = 1; i <= m; i++)
    {
        while (index <= cnt && p[index].y <= q[i].y)
        {
            Update(1, 1, n, p[index].x);
            index++;
        }
        ans[q[i].k] = Get(1, 1, n, q[i].x, q[i].y);
    }
    for (int i = 1; i <= m; i++)
        printf("%d \n", ans[i]);
    return 0;
}