#include <bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int i = 0 ; i < n ; i++ )
#define FOR( it , A ) for( typeof A.begin() it = A.begin() ; it != A.end() ; it++ )
#define clr( t , val ) memset( t , val , sizeof(t) )

#define all(v)  v.begin() , v.end()
#define rall(v)  v.rbegin() , v.rend()
#define pb push_back

#define mp make_pair
#define fi first
#define se second

#define ones(x) __builtin_popcount(x)
#define test puts("************test************");
#define sync ios_base::sync_with_stdio(false);

#define N 21
#define MOD 1000000007

typedef long long ll;
typedef unsigned long long ull;
typedef pair< int , int > pii;
typedef pair< ll , ll > pll;
typedef vector< int > vi;
typedef vector< vi > vvi;
typedef vector< ll > vll;
typedef vector< ull > vull;

#define EPS (1e-8)
#define PI acos(-1.0)
#define INF 1e100
#define Vector Point

typedef long double ld;

struct Point
{
    ld x , y;
    Point(){ x = y = 0; }
    Point( ld x , ld y ) : x( x ) , y( y ) {}
    ld arg(){ return atan2( y , x ); }  
    ld get_angle(){ 
        ld t = arg();
        if( abs( t - PI ) < EPS )return 0;
        if( t < -EPS ) return t + PI ; 
        return t;
    }
    ld dist2(){ return x*x +y*y; }
    ld dist(){  return sqrt( dist2() ); }
    Point unit(){ ld k  = dist() ; return abs( k ) < EPS ? Point():Point( x/k , y/k ); }
    Point ort(){ return Point( -y , x ); }
    void print(){ printf( "punto : %.4f %.4f\n" , double(x) , double(y) );}
};
Point operator -( const Point &A , const Point &B ){ return Point( A.x - B.x , A.y - B.y ); }
Point operator +( const Point &A , const Point &B ){ return Point( A.x + B.x , A.y + B.y ); }
Point operator *( const Point &A , const ld &k ){ return Point( A.x*k , A.y*k ); }
bool operator <( const Point &A , const Point &B ){ return abs( A.x - B.x ) < EPS ? A.y < B.y : A.x < B.y ; }

ld dot( const Point &A , const Point &B ){ return A.x*B.x + A.y*B.y ; }
ld cross( const Point &A , const Point &B ){ return A.x*B.y - A.y*B.x; }
ld area( const Point &A , const Point &B , const Point &C ){ return cross( B - A , C - A ); }

Point lineIntersection( const Point &A , const Point &B , const Point &C , const Point &D ){
    return A + ( B - A )*( cross( C - A , D - C ) / cross( B - A , D - C ) );
}
Point Points[ N ];
bool done[ 1 << N ];
ld memo[ 1 << N ];
int n , angles[ N ];
int L , R;
Vector rot( Vector V , ld senA , ld cosA ){
    return Point( (V.x*cosA) - (V.y*senA) , (V.x*senA) + (V.y*cosA) );
}
ld f( ld len , int ind )
{
    Point P( L + len , 0 );
    Vector V = P - Points[ ind ];
    ld ang = (angles[ ind ]*PI)/180.0;
    ld cosa = cos( ang ) , sena = sin( ang );
    Vector W = rot( V , sena , cosa );
    Point I = lineIntersection( Point( 0 , 0 ) , Point( 1 , 0 ) , Points[ ind ] , Points[ ind ] + W );
    if( I.x < P.x ) return INF;
    return ( I - P ).dist();
}
ld dp( int mask ){
    if( mask == 0 ) return 0;
    if( done[ mask ] ) return memo[ mask ];
    ld &dev = memo[ mask ] = 0;
    done[ mask ] = 1;
    REP( i , n ) if( mask & ( 1 << i ) ){
        int mask2 = mask ^ ( 1<<i );
        ld len = dp( mask2 );
        //cout << len << " " << f( len , i ) << endl;
        dev = max( dev , f( len , i ) + len );
    }
    dev = min( dev , ld( R - L ) );
    return dev;
}
int main()
{
    while( cin >> n >> L >> R ){
        REP( i , n ) cin >> Points[ i ].x >> Points[ i ].y >> angles[ i ];
        clr( done , 0 );
        printf( "%.10lf\n" , (double)dp( ( 1 << n ) - 1 ) );
    }
}
