#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef long double real;

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif

using namespace std;

const int MaxN = 100005, NA = -1, MaxC = 0x3F3F3F3F;

int a [MaxN];
bool b [MaxN];
int c [MaxN];
set <int> s [MaxN];
int m, n;

int main (void)
{
 int i, j, k, l;
 char ch;
 int ok;

 while (scanf (" %d %d", &n, &m) != EOF)
 {
  memset (b, 0, sizeof (b));
  memset (c, 0, sizeof (c));
  for (i = 1; i <= n; i++)
   s[i].clear ();
  for (i = 0; i < m; i++)
  {
   scanf (" %c %d", &ch, &k);
   if (ch == '+')
   {
    if (b[k])
    {
     printf ("Already on\n");
     continue;
    }

    ok = 0;
    l = k;
    for (j = 2; j * j <= k; j++)
     if (k % j == 0)
     {
      if (c[j])
      {
       ok = j;
       break;
      }
      do
      {
       k /= j;
      }
      while (k % j == 0);
     }
    if (k > 1)
    {
     if (c[k])
      ok = k;
    }
    if (ok)
    {
     printf ("Conflict with %d\n", *s[ok].begin ());
     continue;
    }

    k = l;
    for (j = 2; j * j <= k; j++)
     if (k % j == 0)
     {
      s[j].insert (l);
      do
      {
       c[j]++;
       k /= j;
      }
      while (k % j == 0);
     }
    if (k > 1)
    {
     s[k].insert (l);
     c[k]++;
    }
    b[l] = true;
    printf ("Success\n");
   }
   else
   {
    if (!b[k])
    {
     printf ("Already off\n");
     continue;
    }
    b[k] = false;
    l = k;
    for (j = 2; j * j <= k; j++)
     if (k % j == 0)
     {
      s[j].erase (l);
      do
      {
       c[j]--;
       k /= j;
      }
      while (k % j == 0);
     }
    if (k > 1)
    {
     s[k].erase (l);
     c[k]--;
    }
    printf ("Success\n");
   }
  }
 }
 return 0;
}
