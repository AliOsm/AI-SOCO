#include <bits/stdc++.h>
using namespace std;
typedef long long Long;

const Long MX = 6e5 + 10;
const Long MOD = 1e9 + 7;

Long N;
vector< pair<pair<Long,Long>,Long> > query;
pair<pair<Long,Long>,Long> val[MX];
Long inv_pot[MX];
Long pot[MX];

Long fp(Long a, Long b){
	if(b == 0) return 1;
	Long t = fp(a,b/2);
	t = (t * t) % MOD;
	if(b % 2 == 1) return (a * t) % MOD;
	return t;
}
Long add(Long a, Long b){ return a + b >= MOD ? a + b - MOD : a + b; }
Long mul(Long a, Long b){ return (a * b) % MOD; }

struct Data{
	Long ans, L, R, cnt;
	Data(){}
	Data(Long ans, Long L, Long R, Long cnt) : ans(ans), L(L), R(R), cnt(cnt) {}
};

Data st[MX<<2];

Data combine(Data A, Data B){
	Data ans;
	ans.ans = add(add(A.ans, B.ans),mul(mul(A.L,B.R),pot[N - 1 - A.cnt]));
	ans.L = add(A.L, mul(B.L,pot[A.cnt]));
	ans.R = add(A.R, mul(B.R,inv_pot[A.cnt]));
	ans.cnt = add(A.cnt, B.cnt);
	return ans;
}

void build(Long l, Long r, Long nodo){
	if(l == r){
		if(query[l].second < N){
			st[nodo] = Data(0,query[l].first.first,query[l].first.first,1);
		}else{
			st[nodo] = Data(0,0,0,0);
		}
		return;
	}
	Long med = (r + l) / 2;
	build(l, med, nodo * 2);
	build(med + 1, r, nodo * 2 + 1);
	st[nodo] = combine(st[nodo * 2], st[nodo * 2 + 1]);
	return;
}

void update(Long p, Data v, Long l, Long r, Long nodo){
	if(p < l || r < p) return;
	if(l == r){
		st[nodo] = v;
		return;
	}
	Long med = (r + l) / 2;
	update(p, v, l, med, nodo * 2);
	update(p, v, med + 1, r, nodo * 2 + 1);
	st[nodo] = combine(st[nodo * 2], st[nodo * 2 + 1]);
	return;
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	cout.precision(10);
	cout << fixed;
	
	pot[0] = 1;
	for(Long i = 1; i < MX; i++) pot[i] = mul(pot[i - 1],2);
	inv_pot[MX - 1] = fp(pot[MX - 1],MOD-2);
	for(Long i = MX - 2; i >= 0; i--) inv_pot[i] = mul(inv_pot[i + 1], 2);
	
	Long n, p, q, x;
	cin >> n;
	N = n;
	for(Long i = 0; i < n; i++){
		cin >> x;
		val[i] = {{x,i},i};
		query.push_back(val[i]);
	}
	vector< pair<Long,Long> > onln;
	cin >> q;
	for(Long i = 0; i < q; i++){
		cin >> p >> x;
		query.push_back({{x,p - 1},i + n});
		onln.push_back({x,p - 1});
	}
	sort(query.begin(),query.end());
	
	build(0, n + q - 1, 1);
	Long to_upd;
	
	cout << mul(st[1].ans,inv_pot[n]) << "\n";
	for(Long i = 0; i < q; i++){
		x = onln[i].first;
		p = onln[i].second;
		Data v = Data(0,0,0,0);
		to_upd = lower_bound(query.begin(),query.end(),val[p]) - query.begin();
		update(to_upd,v,0,n + q - 1,1);
		
		to_upd = lower_bound(query.begin(),query.end(),make_pair(onln[i],n + i)) - query.begin();
		val[p] = query[to_upd];
		v = Data(0,val[p].first.first,val[p].first.first,1);
		update(to_upd,v,0,n+q-1,1);
		
		cout << mul(st[1].ans,inv_pot[n]) << "\n";
	}
	return 0;
}
