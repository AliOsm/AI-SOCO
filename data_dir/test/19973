#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <cstdio>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <numeric>
#include <stack>
#include <deque>
#include <memory.h>
#include <string>
#include <regex>
#include <unordered_map>

#define ull unsigned long long
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define vI vector<int>
#define vvI vector<vector<int>>
#define vLL vector<ll>
#define vS vector<string>
#define fori(i, n) for(int (i)=0; (i)<n; (i)++)
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
#define forI(tmp) for(auto(it)=(tmp).begin();(it)!=(tmp).end();(it)++)
#define PI 3.14159265356
#define LD long double
#define sc(a) scanf("%d", &(a))
#define scc(a) scanf("%I64d", &(a))
#pragma comment (linker, "/STACK:9999999999")
#define Inf 2e9
typedef long long ll;
typedef long long LL;
const ll mod = 998244353;

using namespace std;

bool check(vector<vector<int>> &g)
{
	bool flag = true;
	int cur = 1;
	for (int i = 0; i < g.size(); i++)
	{
		for (int j = 0; j < g[i].size(); j++)
		{
			if (g[i][j] != cur)
				flag = false;
			cur++;
		}
	}
	return flag;
}


int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int n, m;
	sc(n);
	sc(m);
	vector<int> can(n + 1, -1);
	vector<int> tmp(n + 1, -1);
	vector<int> ttt(n + 1, -1);
	vector<vector<int>> g(m);
	fori(i, m)
	{
		int k;
		sc(k);
		fori(j, k)
		{
			int x;
			sc(x);
			g[i].push_back(x);
			can[x] = i;
			tmp[x] = x;
		}
		
	}
	sort(all(g));
	if (check(g))
	{
		cout << 0;
		return 0;
	}
	set<int> pusto;
	fori(i, n)
	{
		if (can[i + 1] == -1)
			pusto.insert(i + 1);
	}

	vector<int> need(n + 1);
	vector<pair<int, int>> ans;

	int cur = 1;
	fori(i, m)
	{
		for (int x : g[i])
		{
			need[cur] = x;
			cur++;
		}
	}

	for (int i = 1; i < cur; i++)
	{
		if (need[i] == tmp[i])
			continue;
		if (pusto.count(i))
		{
			int x = need[i];
			int pos;
			fori(j, n + 1)
				if (tmp[j] == x)
					pos = j;
			ans.push_back({ pos, i });
			pusto.erase(i);
			pusto.insert(pos);
			swap(tmp[pos], tmp[i]);

		}
		else
		{
			int x = need[i];
			int pos;
			fori(j, n + 1)
				if (tmp[j] == x)
					pos = j;
			int y = *pusto.rbegin();
			pusto.erase(y);
			ans.push_back({ i, y });
			swap(tmp[y], tmp[i]);
			ans.push_back({ pos, i });
			swap(tmp[pos], tmp[i]);
			pusto.insert(pos);
		}
	}
	printf("%d\n", ans.size());
	for (pair<int, int> x : ans)
	{
		printf("%d %d\n", x.first, x.second);
	}



	return 0;
}