#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define FILE "series"
#define ld long double
#define endl '\n'
#define pii pair <int, int>
//#define int long long

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

using namespace std;
using namespace __gnu_pbds;

typedef tree <pii,null_type,less<pii>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const int N = 1e6 + 5;
const ll mod = 1e9 + 7;
const ll mod1 = 1e9 + 9;
const int rx[8] = {1, -1, 0, 0, 1, 1, -1, -1};
const int ry[8] = {0, 0, 1, -1, 1, -1, 1, -1};
const ld pi = acos(-1.0);
const ll kek = 227;
const int B = (int)sqrt(N);

mt19937 gen(chrono::system_clock::now().time_since_epoch().count());

int dp[N];
ll a[N];
int pr[N];

struct segtree{
    int n;
    vector<pii> t;

    void update(int p, pii value) {
        p += n;
        for (t[p] = max(t[p], value); p > 1; p >>= 1) t[p>>1] = max(t[p], t[p^1]);
    }

    pii query(int l, int r) {
        pii res = {-1, -1};
        for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
            if (l&1) res = max(res, t[l++]);
            if (r&1) res = max(t[--r], res);
        }
        return res;
    }

    segtree(int n, pii def = {-1, -1}):n(n),t(n << 1, def) {}

};

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    srand(time(0));
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
//       freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#endif // LOCAL
    int n, d;
    cin >> n >> d;
    segtree T(N);
    vector <ll> alla;
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        alla.pb(a[i]);
    }
    sort(alla.begin(), alla.end());
    alla.resize(unique(alla.begin(), alla.end()) - alla.begin());
    for (int i = 0; i < n; i++) {
        ll x = a[i] - d;
        pii cur = {0, i};
        int l = 0, r = alla.size() - 1, p = -1;
        while (l <= r) {
            int mid = (l + r) >> 1;
            if (alla[mid] <= x) {
                l = mid + 1;
                p = mid;
            } else r = mid - 1;
        }
        if (p != -1) cur = max(cur, T.query(0, p + 1));
        x = a[i] + d;
        l = 0, r = alla.size() - 1, p = -1;
        while (l <= r) {
            int mid = (l + r) >> 1;
            if (alla[mid] >= x) {
                p = mid;
                r = mid - 1;
            } else l = mid + 1;
        }
        if (p != -1) cur = max(cur, T.query(p, N));
        p = lower_bound(alla.begin(), alla.end(), a[i]) - alla.begin();
        T.update(p, {cur.F + 1, i});
        dp[i] = cur.F + 1;
        pr[i] = cur.S;
    }
    int res = 0, p = -1;
    for (int i = 0; i < n; i++) {
        if (dp[i] > res) {
            res = dp[i];
            p = i;
        }
    }
    cout << res << endl;
    vector <int> ans;
    while (true){
       ans.pb(p);
       if (p != pr[p]) p = pr[p];
       else break;
    }
    reverse(ans.begin(), ans.end());
    for (int x : ans) cout << x + 1 << " ";
    return 0;
}
