#include <bits/stdc++.h>

using namespace std;

const int N = 1e5 + 10;

vector<pair<int, int> > e[N];
int u[N], v[N], ans[N];
map<pair<int, int>, int> anss;

int stamp, vis[N], fa[N];

int find(int u) {
  return fa[u] == u ? u : (fa[u] = find(fa[u]));
}

void mrg(int u, int v) {
  u = find(u);
  v = find(v);
  if (u != v) fa[u] = v;
}

int n, m;

int main() {
  scanf("%d%d", &n, &m);
  for (int i = 0; i < m; ++i) {
    int a, b, c;
    scanf("%d%d%d", &a, &b, &c);
    e[c].push_back(make_pair(a, b));
  }
  int q;
  scanf("%d", &q);
  for (int i = 0; i < q; ++i) {
    scanf("%d%d", u + i, v + i);
    ans[i] = 0;
  }
  for (int i = 1; i <= m; ++i) {
    if (e[i].size() == 0) continue;
    vector<int> vs;
    for (int j = 0; j < e[i].size(); ++j) {
      vs.push_back(e[i][j].first);
      vs.push_back(e[i][j].second);
    }
    sort(vs.begin(), vs.end());
    vs.erase(unique(vs.begin(), vs.end()), vs.end());
    ++stamp;
    for (int j = 0; j < vs.size(); ++j) {
      int u = vs[j];
      fa[u] = u;
      vis[u] = stamp;
    }
    for (int j = 0; j < e[i].size(); ++j) {
      int u = e[i][j].first, v = e[i][j].second;
      mrg(u, v);
    }
    if ((long long)vs.size() * vs.size() > n) {
      for (int i = 0; i < q; ++i) {
        if (vis[u[i]] == stamp && vis[v[i]] == stamp) {
          ans[i] += find(u[i]) == find(v[i]);
        }
      }
    }
    else {
      for (int i = 0; i < vs.size(); ++i) {
        for (int j = i + 1; j < vs.size(); ++j) {
          if (find(vs[i]) == find(vs[j])) {
            ++anss[make_pair(vs[i], vs[j])];
            ++anss[make_pair(vs[j], vs[i])];
          }
        }
      }
    }
  }
  for (int i = 0; i < q; ++i) {
    printf("%d\n", ans[i] + anss[make_pair(u[i], v[i])]);
  }
  return 0;
}
