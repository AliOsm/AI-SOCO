/*
    STARK_BOY
*/
#include <bits/stdc++.h>
using namespace std;
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define repe(i,a,b) for(ll i=a;i<=b;i++)
#define bac(i,a,b) for(ll i=a;i>=b;i--)
#define pb push_back
#define mp make_pair
#define F first
#define S second
typedef long long ll;
typedef vector< ll > vi;
typedef vector<pair<ll,ll> > vpii;
#define all(c) c.begin(),c.end()
#define ios ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define setbitc(x) __builtin_popcount(x)
#define init(x,a) memset(x,a,sizeof(x))
#define INF 10000000000000
#define MOD 1000000007
#define M 998244353
#define N 300010

ll i,j,k,l,n,m,p,q,r,d,su,sx,sy,prod=1,maxi,a,b,w,x,y,o,e,f,mini=INF,t,cnt,val;
string s,s1,s2;
ll ar[N];
vi adj[N];
int vis[N];
ll ans1,ans2,ans;
//vi v1,v2;
//map<ll,ll> ma;1

ll modularExponentiation(ll x,ll n)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)        //n is even
        return modularExponentiation((x*x)%M,n/2);
    else                             //n is odd
        
        return (x*modularExponentiation((x*x)%M,(n-1)/2))%M;

}

void dfs(ll ver,int f)
{
    ll cnt=0;
    if(f)
    vis[ver]=1;
    else
    vis[ver]=-1;    
    for(auto i:adj[ver])
    {
        if(vis[i]==0)
        {
            dfs(i,1-f);
            cnt++;
        }
        else
        {
            if(vis[ver]==vis[i])
                a=1;

        }    

    }
    if(cnt!=0)
    {
    if(f)
    {
        ans1=(ans1*modularExponentiation(2,cnt))%M;
        //ans2=(ans2*(cnt%M))%M;
    }
    else
    {
        ans2=(ans2*modularExponentiation(2,cnt))%M;
        //ans1=(ans1*(cnt%M))%M;

    }
    }    

}


int main()
{
    
    ios
    int ti=1;
    cin>>ti;

    while(ti--)
    {
        ans=1;
        ans1=1;
        ans2=2;
        a=0;
        cin>>n>>m;
        rep(i,0,n+1)
        {
            vis[i]=0;
            adj[i].clear();
        }
        rep(i,0,m)
        {
            cin>>x>>y;
            adj[x].pb(y);
            adj[y].pb(x);

        }
        rep(i,1,n+1)
        {
            if(vis[i]==0)
            {
                dfs(i,1);
                //cout<<ans1<<" "<<ans2<<" ";
                ans=(ans*(ans1+ans2)%M)%M;
                ans1=1;
                ans2=2;
            }
        }
        if(a)cout<<"0"<<endl;
        else
        {
            //cout<<ans1<<" "<<ans2<<" ";
            cout<<ans<<endl;
        }

    }
    
    return 0;
        
}