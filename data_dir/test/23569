#include <algorithm>
#include <iostream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <numeric>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define endl '\n'
#define F first
#define S second
#define mp make_pair
#define ll long long
#define pb push_back
#define pii pair < int, int >
#define type(x) __typeof(x.begin())
#define foreach(i, x) for(type(x) i = x.begin(); i != x.end(); i++)
#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define sol (root << 1)
#define sag (sol | 1)
#define orta ((bas + son) >> 1)
#define bit __builtin_popcount

#ifndef D
	#define dbgs(x) 0
	#define dbg(x) 0
	#define TIME 0
#else
	#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
	#define dbg(x) cerr << (#x) << " --> " << (x) << endl
	#define TIME cerr << "Tooks " << (double) clock() / CLOCKS_PER_SEC << " seconds." << endl
#endif

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 2000 + 5;

int n;

bool h[N], h2[N];

vector < int > v[N], t[N];

void dfs(int x) {

	if(h[x])
		return;

	h[x] = 1;

	foreach(it, v[x])
		dfs(*it);

}

void dfs2(int x) {

	if(h2[x])
		return;

	h2[x] = 1;
	
	foreach(it, t[x])
		dfs2(*it);

}

int main () {
    
	cin >> n;

	getchar();

	char x;

	FOR(i, 1, n)
		FOR(j, 1, n)
		{
			x = getchar();

			if(x == '0')
			{
				getchar();

				continue;
			}

			x = getchar();

			if('0' <= x and x <= '9')
				getchar();

			v[i].pb(j);
			t[j].pb(i);
		}

	dfs(1);

	dfs2(1);

	FOR(i, 1, n)
		if(!h[i] or !h2[i])
			return cout << "NO" << endl, 0;

	cout << "YES" << endl;

	return 0;
    
}
