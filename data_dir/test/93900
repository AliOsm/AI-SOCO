#include<bits/stdc++.h>
using namespace std;

#define ff first
#define ss second
#define pb push_back
#define ld long double
#define pii pair< int,int >
#define fast ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0) ;
#define L(p) 2*p+1
#define R(p) 2*p+2

const int nax =1e2+1;
ld dp[nax][nax][nax];

struct node
{
    int x,y,z;
    bool operator<( const node &d ) const
    {
        return x+y+z < d.x+d.y+d.z;
    }
};
signed main()
{
    fast;
    int r,s,p;
    cin >> r >> s >> p;
    vector<node> states;
    for(int i=0 ; i<=r ; i++ )
    {
        for(int j=0 ; j<=s ; j++ )
        {
            for(int k=0 ; k<=p ; k++ )
                states.pb( {i,j,k} );
        }
    }
    sort( states.begin() , states.end() );
    reverse( states.begin() , states.end() );
    memset( dp,0.0,sizeof(dp) );
    dp[r][s][p] = 1.0;
    for( auto i : states )
    {
        ld tot = 0;
        ld tot_self = 0;
        if( i.x && i.y ) tot += (i.x*i.y);
        if( i.y && i.z ) tot += (i.y*i.z);
        if( i.z && i.x ) tot += (i.z*i.x);
        if( tot == 0 ) continue;
        if( i.x && i.y ) dp[i.x][i.y-1][i.z] += ( (i.x*i.y)/tot) * dp[i.x][i.y][i.z]  ;
        if( i.y && i.z ) dp[i.x][i.y][i.z-1] += ( (i.y*i.z)/tot) * dp[i.x][i.y][i.z]  ; 
        if( i.z && i.x ) dp[i.x-1][i.y][i.z] += ( (i.z*i.x)/tot) * dp[i.x][i.y][i.z]  ;
    }
    ld ans_r = 0;
    for(int i=1 ; i<=r ; i++ )  ans_r += dp[i][0][0];
    cout << fixed << setprecision(9) << ans_r << ' ';
    
    
    ld ans_s = 0;
    for(int i=1 ; i<=s ; i++ )  ans_s += dp[0][i][0];
    cout << fixed << setprecision(9) << ans_s << ' ';
    
    
    ld ans_p = 0;
    for(int i=1 ; i<=p ; i++ )  ans_p += dp[0][0][i];
    cout << fixed << setprecision(9) << ans_p << ' ';
}