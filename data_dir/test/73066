#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif

typedef long long int64;
typedef double real;

const int MaxN = 10004, MaxD = 4, MaxL = 128, MaxC = 0x3F3F3F3F, NA = -1;
const char Name [MaxD] [MaxL] =
 {"Gryffindor", "Hufflepuff", "Ravenclaw", "Slytherin"};

union state {int64 f; short u [4];};

inline bool operator < (state a, state b)
{
 return a.f < b.f;
}

char s [MaxN];
bool b [MaxD];
state t;
set <state> c;
int n;

void recur (int d)
{
 if (c.find (t) != c.end ())
  return;
 c.insert (t);
 int i, j;
 if (d == n)
 {
/*
  printf ("%d %d %d %d\n",
   (int) t.u[0], (int) t.u[1], (int) t.u[2], (int) t.u[3]);
*/
  for (i = 0; i < MaxD; i++)
  {
   for (j = 0; j < MaxD; j++)
    if (t.u[i] > t.u[j])
     break;
   if (j == MaxD)
    b[i] = true;
  }
 }
 else
 {
  for (i = 0; i < MaxD; i++)
   if (s[d] == Name[i][0])
   {
    t.u[i]++;
    recur (d + 1);
    t.u[i]--;
    break;
   }
  if (i == MaxD)
  {
   for (i = 0; i < MaxD; i++)
   {
    for (j = 0; j < MaxD; j++)
     if (t.u[i] > t.u[j])
      break;
    if (j == MaxD)
    {
     t.u[i]++;
     recur (d + 1);
     t.u[i]--;
    }
   }
  }
 }
}

int main (void)
{
 int i;
 while (scanf (" %d", &n) != EOF)
 {
  scanf (" %s", s);
  assert ((int) strlen (s) == n);
  c.clear ();
  memset (b, 0, sizeof (b));
  t.f = 0;
  recur (0);
  for (i = 0; i < MaxD; i++)
   if (b[i])
    printf ("%s\n", Name[i]);
 }
 return 0;
}
