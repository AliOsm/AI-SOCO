#include <bits/stdc++.h>
#define intt long long
#define mk make_pair
#define pb push_back
#define fr first
#define sc second
#define ii pair<intt,intt>
using namespace std;
vector<ii> bit[66];
vector <intt> op[100004];
vector <ii> all_edge;
map<ii,intt> is_take;
intt n;
intt a[100004];
intt vis[100002];
void mem()
{
    intt i,j;
    for(i=0;i<all_edge.size();i++)
    {
       int fir=all_edge[i].fr;
       int sic=all_edge[i].sc;
       vis[fir]=1e9,vis[sic]=1e9;
    }
}
map<ii,intt> didtk;
void mem1()
{
    int i,j;
    for(i=0; i<n; i++)
    {
        cin>>a[i];
        for(j=0; j<=60; j++)
        {

            if((a[i]&(1ll<<j)))
            {
                bit[j].pb(mk(a[i],i));
            }
        }
    }

}
intt cont=1;
void mem2()
{
    int i,j;
    for(i=0; i<=60; i++)
    {
        if(bit[i].size()==2)
        {
            ii fir=bit[i][0];
            ii sic=bit[i][1];
            if(!didtk[fir])
              didtk[fir]=cont++;
            if(!didtk[sic])
              didtk[sic]=cont++;
            op[didtk[fir]].pb(didtk[sic]);
            op[didtk[sic]].pb(didtk[fir]);
            all_edge.pb(mk(didtk[fir],didtk[sic]));
        }
    }
}
int main()
{

    cin>>n;
    mem1();
    mem2();

    intt i,j;
 for(i=0; i<=5; i++)
    {
        if(bit[i].size()>=3)
        {

            cout<<"3";
            return 0;
        }
    }
    intt minn=1e9;
for(i=0;i<all_edge.size();i++)
{
    mem();
    queue<intt> o;
    int st=all_edge[i].fr,en=all_edge[i].sc;
    o.push(st);
    vis[st]=0;
    while(!o.empty())
    {
        intt f=o.front();
        o.pop();
         intt node=f;
         if(node==en)
         {
             minn=min(minn,vis[node]+1);
             break;
         }
         for(j=0;j<op[node].size();j++)
         {
             int u=op[node][j];
             if(node==st&&u==en)
                continue;
             if(node==en&&u==st)
                continue;
            if(vis[node]+1<=vis[u])
            {
                vis[u]=vis[node]+1;
                o.push(u);
            }
         }
    }
}
if(minn==1e9)
{
    cout<<"-1";
    return 0;
}
cout<<minn;










    return 0;
}
