#include <bits/stdc++.h>

using namespace std;
int n,h,l,r;
vector<int>v;
long long dp[2001][2001];
long long  solve(int idx,int curh){
    if(idx==n){
        return (l<=curh&&curh<=r);
    }
    if(dp[idx][curh]!=-1)
        return dp[idx][curh];
    int ans=0;
    if(idx&&l<=curh&&curh<=r){
        ans+=1;
    }
    return dp[idx][curh]=max(solve(idx+1,(curh+v[idx])%h),solve(idx+1,(curh+v[idx]-1+h)%h))+ans;


}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie();
    cout.tie();
    memset(dp,-1,sizeof dp);
    cin>>n>>h>>l>>r;
    v.resize(n);
    for(int i=0;i<n;i++){
        cin>>v[i];
    }
    cout<<solve(0,0);

    return 0;
}
