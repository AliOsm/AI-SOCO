#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
using namespace std;

#define FOR(i,f,t) for(int i=f; i<(int)t; i++)
#define FORR(i,f,t) for(int i=f; i>(int)t; i--)
#define ms(obj, val) memset(obj, val, sizeof(obj))
#define ms2(obj, val, sz) memset(obj, val, sizeof(obj[0])*sz)
#define pb push_back
#define ri(x) scanf("%d",&x)
#define rii(x,y) ri(x), ri(y)

typedef vector<int> vi;
typedef long long ll;

const int MAXN = 3e5+5;

struct edge{
    int to, id;
};

int N, k, d;
bool p[MAXN];
bool erased[MAXN];
vector<edge> G[MAXN];

vector<int> ans;
int par[MAXN];


int main(){
    rii(N,k); ri(d);
    FOR(i,0,k){
        int v; ri(v); v--;
        p[v] = true;
    }
    FOR(i,0,N-1){
        int v, u; rii(v,u); v--; u--;
        G[v].pb({u,i+1});
        G[u].pb({v,i+1});
    }
    queue<int> q;
    ms(par,-1);
    FOR(v,0,N) if(p[v]){
        par[v] = v;
        q.push(v);
    }
    while(!q.empty()){
        int v=q.front(); q.pop();
        FOR(i,0,G[v].size()){
            int u=G[v][i].to, e=G[v][i].id;
            if(par[u]==-1){
                par[u]=par[v];
                q.push(u);
            }else if(par[u] != par[v]){
                if(!erased[e]){
                    erased[e] = true;
                    ans.pb(e);
                }
            }
        }
    }
    printf("%d\n",(int)ans.size());
    FOR(i,0,ans.size()){
        printf("%d ",ans[i]);
    }
    printf("\n");
}
