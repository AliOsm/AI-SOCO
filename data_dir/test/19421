#include <bits/stdc++.h>
#define ll long long
#define fr first
#define sc second
#define ii pair<int,int>
#define mp make_pair
using namespace std;
#define MAX_N 4
ll M = 1e9+6;
ll mod = 1e9+7;
struct Matrix
{
    ll mat[MAX_N][MAX_N] ;
    Matrix()
    {
        memset(mat,0,sizeof(mat));
    }
};
Matrix matMul(Matrix a , Matrix b)
{
    Matrix ans ;

    int i,j,k;
    ll temp = 0;
    for(i=0; i<MAX_N; i++)
        for(j=0; j<MAX_N; j++)
            for(ans.mat[i][j] = k = 0 ; k<MAX_N; k++)
            {
                ans.mat[i][j] +=a.mat[i][k] * b.mat[k][j];
                ans.mat[i][j] %= M;
            }
    return ans;
}
Matrix matPow( Matrix base , ll p)
{
    if(p == 0)
        return base;
    Matrix ans;
    int i,j;
    for(int i=0; i<MAX_N; i++)
        for(int j=0; j<MAX_N; j++)
            ans.mat[i][j] = (i==j);
    while(p)
    {
        if(p&1) ans = matMul(ans,base);
        base = matMul(base,base);
        p = p/2;
    }
    return ans;
}
ll bigmod(ll b,ll p ,ll m)
{
    if(p==0)
        return 1;
    if(p%2 == 0)
    {
        ll temp = bigmod(b,p/2,m);
        return (temp*temp)%m;
    }
    return (bigmod(b,p-1,m)*(b%m))%m;
}
ll n,f1,f2,f3,c;
int ok[100005];

ll InverseEuler(ll n, ll MOD)
{
    return bigmod(n,MOD-2,MOD);
}
int main()
{
    for(int i=2; i<100000; i++)
    {
        if(!ok[i])
            for(int j=i*2; j<100000; j+=i)
                ok[j] = 1;
    }
    cin>>n>>f1>>f2>>f3>>c;
    set < int > prime;
    ll temp = f1;
    for(int i=2; i*i<=f1; i++)
    {
        if(!ok[i])
        {
            if(temp % i == 0)
            {
                while(temp%i==0)
                {
                    temp = temp/i;
                }
                prime.insert(i);
            }
        }
    }
    if(temp > 1)
        prime.insert(temp);
    temp = f2;
    for(int i=2; i*i<=f2; i++)
    {
        if(!ok[i])
        {
            if(temp % i == 0)
            {
                while(temp%i==0)
                {
                    temp = temp/i;
                }
                prime.insert(i);
            }
        }
    }
    if(temp > 1)
        prime.insert(temp);
    temp = f3;
    for(int i=2; i*i<=f3; i++)
    {
        if(!ok[i])
        {
            if(temp % i == 0)
            {
                while(temp%i==0)
                {
                    temp = temp/i;
                }
                prime.insert(i);
            }
        }
    }
    if(temp > 1)
        prime.insert(temp);

    temp = c;
    for(int i=2; i*i<=c; i++)
    {
        if(!ok[i])
        {
            if(temp % i == 0)
            {
                while(temp%i==0)
                {
                    temp = temp/i;
                }
                prime.insert(i);
            }
        }
    }
    if(temp > 1)
        prime.insert(temp);

    vector < int > num;
    for(auto x : prime)
        num.push_back(x);
    ll res = 1;


    Matrix my;
    my.mat[1][0] = 1;
    my.mat[2][1] = 1;

    my.mat[0][2] = 1;
    my.mat[1][2] = 1;
    my.mat[2][2] = 1;

    Matrix F = matPow(my,n-3);
   for(int i=0; i<num.size(); i++)
    {
        int p = num[i];
        ll x=0,y=0,z=0,w=0;
        ll temp = f1;
        while(temp%p==0)
        {
            temp/=p;
            x++;
        }
        temp = f2;
        while(temp%p==0)
        {
            temp/=p;
            y++;
        }
        temp = f3;

        while(temp%p==0)
        {
            temp/=p;
            z++;
        }
        temp = c;
        while(temp%p==0)
        {
            temp/=p;
            w++;
        }
        x+=w;
        y+=w*2;
        z+=w*3;

        x%=M;
        y%=M;
        z%=M;

        ll ans = (F.mat[0][2]*x)%M+(F.mat[1][2]*y)%M+(F.mat[2][2]*z)%M;
        ans%=M;
        res = res * bigmod(p,ans,mod);
        res%=mod;

    }
   ll D= bigmod(c,n,mod);
   D = InverseEuler(D,mod);
   res = res*D;
   res%=mod;
    cout<<res;

}
