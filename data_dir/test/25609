#include<bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
using namespace __gnu_pbds;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>pbds;
#pragma comment(linker, "/stack:200000000")
#define mod 1000000007
#define ll long long int
#define inf ( ll  )( 1e9 + 10 )
#define mxs (int)( 1e6 + 10 )
//#define md  int mid = ( l + r )>>1;
//int dx[]={+1,-1,+0,+0};///Four Directions
//int dy[]={+0,+0,+1,-1};///Four directions
//int dx [] = {+1,-1,+0,+0,-1,-1,+1,+1};///Eight Directions
//int dy [] = {+0,+0,+1,-1,+1,-1,-1,+1};///Eight Directions
ll ans, t, n, m, i, j, k, a, b, c, d, e, f, g;
string s, s2, s3, s4;
vector < pair < string , ll > > v;
int ar [ mxs ] , counter [ mxs ];
void brainfuck();
int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    ios_base::sync_with_stdio(NULL);
    cin.tie(NULL);
    cout.tie(NULL);
    brainfuck();
    return 0;
}
void brainfuck()
{
    ll total = 0;
    cin>>s;
    n = s.size();
    for ( i = 0 ; i < n; i++ )
    {
        if ( s [ i ] == 'o' )
        {
            a = 1;
            while( i + 1 < n && s [ i + 1 ] == 'o' ){a++;i++;}
            v.push_back( { "o" , a } );
        }
        else
        {
            a = 1;
            while( i + 1 < n && s [ i + 1 ] == 'v' ){a++;i++;}
            if( a >= 2 )
            {
                v.push_back( { "w" , a - 1 } );
                total += a - 1;
            }
        }
    }
    c = 0;
    n = v.size();
    for ( i = 0 ; i < n; i++ )
    {
        if ( v [ i ].first == "o" )
        {
            ans += total * c * v [ i ].second ;
        }
        else
        {
            c += v [ i ].second;
            total -= v [ i ].second;
        }
    }
    cout<<ans;
}
