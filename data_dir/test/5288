#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template<class T> using OS = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define ll long long
#define ull unsigned long long

const int N = 1e5 + 5, mxBlk = 320, K = 15, mxZ = 7;
ll a[N], block[mxBlk][mxZ][K], n, l, r, x, q, blkSz;
vector<vector<ll>> z(mxZ);

void pre()
{
    for (int i = 2; i < mxZ; i++)
    {
        int lst = 2 * (i - 1);
        for (int j = 1; j <= lst; j++)
        {
            int cur = j % lst;
            if(!cur) cur = 2;
            if(cur > i) cur = 2 * i - cur;
            z[i].push_back(cur);
        }
    }

    blkSz = (int) sqrt(n + .0) + 1;
    for (int i = 0; i < n; i++)
        for (int j = 2; j < mxZ; j++)
            for (int k = 0; k < z[j].size(); k++)
                block[i / blkSz][j][k] += a[i] * z[j][(i - i / blkSz * blkSz + k) % z[j].size()];
}

void udt(int i, ll val)
{
    for (int j = 2; j < mxZ; j++)
        for (int k = 0; k < z[j].size(); k++)
            block[i / blkSz][j][k] += (val - a[i]) * z[j][(i - i / blkSz * blkSz + k) % z[j].size()];
    a[i] = val;
}

ll qry(int l, int r, int x)
{
    ll re = 0;
    for (int i = l; i <= r;)
    {
        if (i % blkSz == 0 && i + blkSz - 1 <= r)
        {
            re += block[i / blkSz][x][(i - l) % z[x].size()];
            i += blkSz;
        }
        else
        {
            re += a[i] * z[x][(i - l) % z[x].size()];
            i++;
        }
    }
    return re;
}

int main()
{
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);

    cin >> n;
    for (int i = 0; i < n; i++) cin >> a[i];

    pre();

    cin >> q;
    while (q--)
    {
        cin >> x >> l >> r;
        l--;
        r--;
        if (x == 1)
        {
            udt(l, r + 1);
        }
        else
        {
            cin >> x;
            cout << qry(l, r, x) << '\n';
        }
    }

    return 0;
}
