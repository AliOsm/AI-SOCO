#include <bits/stdc++.h>
using namespace std;

// Template Headers {{{
using pii = pair<int, int>; using vpii = vector<pii>;
using vi = vector<int>; using vvi = vector<vi>;
using ll = long long; using vll = vector<long long>;
template <class T> istream &operator>>(istream &, vector<T> &);
template <class T> ostream &operator<<(ostream &, const vector<T> &);
template <class T, class U> istream &operator>>(istream &, pair<T, U> &);
template <class T, class U> ostream &operator<<(ostream &, const pair<T, U> &);
constexpr int INF = 0x3f3f3f3f; constexpr ll BINF = 0x3f3f3f3f3f3f3f3fLL;
// }}}

int solve() {
	int n, m; cin >> n >> m;
	vi a(n); cin >> a;
	auto check = [&] (int z) {
		vi b(n); b[0] = a[0];
		for (int i=1;i<n;i++) {
			// make same as b4
			// OR keep
			int cost = (b[i - 1] - a[i] + m) % m;
			if (cost <= z) b[i] = b[i - 1]; else b[i] = a[i];
		}
		if (is_sorted(b.begin(), b.end())) return true;
		vi c(n); c[0] = 0;
		if ((0 - a[0] + m) % m > z) return false;
		for (int i=1;i<n;i++) {
			int cost = (c[i - 1] - a[i] + m) % m;
			if (cost <= z) c[i] = c[i - 1]; else c[i] = a[i];
		}
		if (is_sorted(c.begin(), c.end())) return true;
		return false;
	};
	int x = m;
	for (int j=20;j>=0;j--) if (x - (1 << j) >= 0 && check(x - (1 << j))) x -= 1 << j;
	cout << x << endl;


	return 0;
}

// Template Main {{{
int main() {
	ios::sync_with_stdio(0);
	// precompute();
	// int t; cin >> t; for (int i=1;i<=t;i++)
	solve();
	// cout << (solve() ? "YES" : "NO") << endl;
	return 0;
}

template <class T> istream &operator>>(istream &is, vector<T> &v) {
	for (auto it=v.begin();it!=v.end();++it) is >> *it;
	return is;
}

template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
	for (auto it=v.begin();it!=v.end();) os << *it, os << " \n"[++it==v.end()];
	return os;
}

template <class T, class U> istream &operator>>(istream &is, pair<T, U> &p) {
	return is >> p.first >> p.second;
}

template <class T, class U> ostream &operator<<(ostream &os, const pair<T, U> &p) {
	return os << p.first << ' ' << p.second;
}
// }}}

// vim: fdm=marker
