#include <bits/stdc++.h>
  
using namespace std;
  
template<class T> void ckmin(T &a, T b) { a = min(a, b); }
template<class T> void ckmax(T &a, T b) { a = max(a, b); }
  
#define pb push_back
#define mp make_pair
#define cotu cout
#define itn int
#define Red ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define F first
#define S second
#define sz(x) (int)x.size()
#define all(x) (x).begin(), (x).end()
#define rep(i, n) for(int i = 0; i < n; ++i)
#define repr(i,n) for(int i = n - 1; i >= 0; --i)
#define Rep(i, a, n) for(int i = (a); i <=(n); ++i)
#define repst(i, n) for(auto it = n.begin(); it != n.end(); ++it)
#define Repr(i, a, n) for(int i = (n); i >= (a); --i)
  
#define ordered_set tree<int , null_type,less<int >, rb_tree_tag,tree_order_statistics_node_update> 
  
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
  
typedef long long ll;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
  
const int inf = int(1e9);
const int mod = inf + 7;
const int N = 1e6 + 555; // TL MB
const double PI = acos(-1.0);
 
void mul(ll &x, ll y){
	x *= y;
	x %= mod;
}
 
void add(ll &x, ll y){
	x = x + y + mod;
	x %= mod;
}
ll binpow(ll a, ll n){
	ll r = 1;
	while(n){
		if(n & 1) mul(r, a);
		mul(a, a);
		n >>= 1;
	}
	return r;
} 
bool used[N];
void solve()
{	
	ll r, c;
	cin >> r >> c;
	if(r == 1 && c == 1) cout << "0";
	else if(r == 1 || c == 1){
		for(int i = 0; i < max(r, c); ++i){
			cout << 2 + i;
			if(r > c) cout << endl;
			else cout << " ";
		}
	}
	else {
		int a[r][c];
		if(r < c){
			int x = 2;
			for(int i = 0; i < r; ++i){
				a[i][0] = 2 * (i + 1);
				used[2 * (i + 1)] = 1; 
			}
			int cnt = 2;
			for(int i = 1; i < c; ++i){
				while(used[cnt]) cnt++;
				used[cnt] = 1;
				a[0][i] = cnt;
			}
		}
		else{
			int x = 2;
			for(int i = 0; i < c; ++i){
				a[0][i] = 2 * (i + 1);
				used[2 * (i + 1)] = 1; 
			}
			int cnt = 2;
			for(int i = 1; i < r; ++i){
				while(used[cnt]) cnt++;
				used[cnt] = 1; 
				a[i][0] = cnt;
			}
		}
		rep(i, r) {
			rep(j, c){
				if(i && j) a[i][j] = a[i][0] * a[0][j];
			}
		}
		rep(i, r){
			rep(j, c) cout << a[i][j] << " ";
			cout << endl; 
		}
	}

 	

}
 
 
int main()
{
    Red;
  	// int T; cin >> T; while(T--)
    solve();
    return 0;
}