//besmellah
#include <bits/stdc++.h>
using namespace std;

//typedef pair <int, int> pii;

const int maxn = 3e5 + 5;
int t[4 * maxn], tx[4 * maxn], tn[4 * maxn], lazydist[4 * maxn], seg[4 * maxn], mx[4 * maxn], mn[4 * maxn], a[maxn], gre[maxn], les[maxn], Y, lazymx[4 * maxn], lazymn[4 * maxn];
//pii lazymx[4 * maxn], lazymn[4 * maxn];

//void build(int id, int L, int R) {
//	t[id] = R - L;
//	tx[id] = R - L;
//	tn[id] = R - L;
//	lazymx[id] = lazymn[id] = pii(-1, -1);
//	if (R == L + 1)
//		return;
//	int mid = (L + R) / 2;
//	build(2 * id + 0, L, mid);
//	build(2 * id + 1, mid, R);
//}

void relax(int id, int L, int mid, int R) {
//	if (id == 11) {
//		cout << "SALAM " << lazydist[id] << ' ' << mn[2 * id] << ' ' << mn[2 * id + 1] << ' ' << Y << endl;
//	}
	int x = lazydist[id];
	lazydist[id] = 0;
	seg[2 * id + 0] -= x;
	seg[2 * id + 1] -= x;
	mx[2 * id + 0] -= x;
	mx[2 * id + 1] -= x;
	mn[2 * id + 0] += x;
	mn[2 * id + 1] += x;
	lazydist[2 * id + 0] += x;
	lazydist[2 * id + 1] += x;
	x = lazymx[id];
	if (~x) {
		lazymx[id] = -1;
		mx[2 * id + 0] = x - Y + L;
		mx[2 * id + 1] = x - Y + mid;
		tx[2 * id + 0] = 1;
		tx[2 * id + 1] = 1;
		seg[2 * id + 0] = x - mn[2 * id + 0];
		seg[2 * id + 1] = x - mn[2 * id + 1];
		t[2 * id + 0] = tn[2 * id + 0];
		t[2 * id + 1] = tn[2 * id + 1];
		lazymx[2 * id + 0] = x;
		lazymx[2 * id + 1] = x;
	}
	x = lazymn[id];
	if (~x) {
		lazymn[id] = -1;
		mn[2 * id + 0] = x + Y - L;
		mn[2 * id + 1] = x + Y - mid;
		tn[2 * id + 0] = 1;
		tn[2 * id + 1] = 1;
		seg[2 * id + 0] = mx[2 * id + 0] - x;
		seg[2 * id + 1] = mx[2 * id + 1] - x;
		t[2 * id + 0] = tx[2 * id + 0];
		t[2 * id + 1] = tx[2 * id + 1];
		lazymn[2 * id + 0] = x;
		lazymn[2 * id + 1] = x;
	}
}

void adddist(int id, int L, int R, int l, int r) {
	if (R <= l || r <= L || r <= l)
		return;
	if (L >= l && R <= r) {
		seg[id]--;
		mx[id]--;
		mn[id]++;
		lazydist[id]++;
//		lazymx[id].second++;
//		lazymn[id].second++;
		return;
	}
	int mid = (L + R) / 2;
	relax(id, L, mid, R);
	adddist(2 * id + 0, L, mid, l, r);
	adddist(2 * id + 1, mid, R, l, r);
	seg[id] = min(seg[2 * id + 0], seg[2 * id + 1]);
	t[id] = 0;
	if (seg[id] == seg[2 * id + 0])
		t[id] += t[2 * id + 0];
	if (seg[id] == seg[2 * id + 1])
		t[id] += t[2 * id + 1];
	mn[id] = max(mn[2 * id + 0], mn[2 * id + 1]);
	tn[id] = 0;
	if (mn[id] == mn[2 * id + 0])
		tn[id] += tn[2 * id + 0];
	if (mn[id] == mn[2 * id + 1])
		tn[id] += tn[2 * id + 1];
	mx[id] = min(mx[2 * id + 0], mx[2 * id + 1]);
	tx[id] = 0;
	if (mx[id] == mx[2 * id + 0])
		tx[id] += tx[2 * id + 0];
	if (mx[id] == mx[2 * id + 1])
		tx[id] += tx[2 * id + 1];
//	cout << id << ' ' << L << ' ' << R << ' ' << "SEG " << seg[id] << ' ' << t[id] << " MX " << mx[id] << ' ' << tx[id] << " MN " << mn[id] << ' ' << tn[id] << ' ' << endl;
}

void addmax(int id, int L, int R, int l, int r, int x) {
	if (R <= l || r <= L || r <= l)
		return;
	if (L >= l && R <= r) {
		mx[id] = x - Y + L;
		tx[id] = 1;
		seg[id] = x - mn[id];
		t[id] = tn[id];
		lazymx[id] = x;
		return;
	}
	int mid = (L + R) / 2;
	relax(id, L, mid, R);
	addmax(2 * id + 0, L, mid, l, r, x);
	addmax(2 * id + 1, mid, R, l, r, x);
	seg[id] = min(seg[2 * id + 0], seg[2 * id + 1]);
	t[id] = 0;
	if (seg[id] == seg[2 * id + 0])
		t[id] += t[2 * id + 0];
	if (seg[id] == seg[2 * id + 1])
		t[id] += t[2 * id + 1];
	mn[id] = max(mn[2 * id + 0], mn[2 * id + 1]);
	tn[id] = 0;
	if (mn[id] == mn[2 * id + 0])
		tn[id] += tn[2 * id + 0];
	if (mn[id] == mn[2 * id + 1])
		tn[id] += tn[2 * id + 1];
	mx[id] = min(mx[2 * id + 0], mx[2 * id + 1]);
	tx[id] = 0;
	if (mx[id] == mx[2 * id + 0])
		tx[id] += tx[2 * id + 0];
	if (mx[id] == mx[2 * id + 1])
		tx[id] += tx[2 * id + 1];
//	cout << id << ' ' << L << ' ' << R << ' ' << "SEG " << seg[id] << ' ' << t[id] << " MX " << mx[id] << ' ' << tx[id] << " MN " << mn[id] << ' ' << tn[id] << ' ' << mn[22] << ' ' << mn[23] << endl;
}

void addmin(int id, int L, int R, int l, int r, int x) {
	if (R <= l || r <= L || r <= l)
		return;
	if (L >= l && R <= r) {
		mn[id] = x + Y - L;
		tn[id] = 1;
		seg[id] = mx[id] - x;
		t[id] = tx[id];
		lazymn[id] = x;
		return;
	}
	int mid = (L + R) / 2;
	relax(id, L, mid, R);
	addmin(2 * id + 0, L, mid, l, r, x);
	addmin(2 * id + 1, mid, R, l, r, x);
	seg[id] = min(seg[2 * id + 0], seg[2 * id + 1]);
	t[id] = 0;
	if (seg[id] == seg[2 * id + 0])
		t[id] += t[2 * id + 0];
	if (seg[id] == seg[2 * id + 1])
		t[id] += t[2 * id + 1];
	mn[id] = max(mn[2 * id + 0], mn[2 * id + 1]);
	tn[id] = 0;
	if (mn[id] == mn[2 * id + 0])
		tn[id] += tn[2 * id + 0];
	if (mn[id] == mn[2 * id + 1])
		tn[id] += tn[2 * id + 1];
	mx[id] = min(mx[2 * id + 0], mx[2 * id + 1]);
	tx[id] = 0;
	if (mx[id] == mx[2 * id + 0])
		tx[id] += tx[2 * id + 0];
	if (mx[id] == mx[2 * id + 1])
		tx[id] += tx[2 * id + 1];
//	cout << id << ' ' << L << ' ' << R << ' ' << "SEG " << seg[id] << ' ' << t[id] << " MX " << mx[id] << ' ' << tx[id] << " MN " << mn[id] << ' ' << tn[id] << endl;
}

//pii get(int id, int L, int R, int l, int r) {
//	if (R <= l || r <= L || r <= l)
//		return pii(2e9, 0);
//	if (L >= l && R <= r)
//		return pii(seg[id], t[id]);
//	int mid = (L + R) / 2;
//	relax(id, L, mid, R);
//	pii P = get(2 * id + 0, L, mid, l, r), Q = get(2 * id + 1, mid, R, l, r);
//	pii ans = pii(0, 0);
//	ans.first = min(P.first, Q.first);
//	if (ans.first == P.first)
//		ans.second += P.second;
//	if (ans.first == Q.first)
//		ans.second += Q.second;
//	return ans;
//}


int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	int n;
	cin >> n;
	for (int i = 0; i < n; i++) {
		int v, u;
		cin >> v >> u;
		v--;
		u--;
		a[v] = u;
	}
	long long ans = 0;
//	build(1, 0, n);
	fill(lazymx, lazymx + 4 * maxn, -1);
	fill(lazymn, lazymn + 4 * maxn, -1);
	fill(mx, mx + 4 * maxn, 2e9);
	stack <int> Q, T;
	for (int i = 0; i < n; i++) {
		while (Q.size() && a[Q.top()] > a[i]) {
			Q.pop();
		}
		if (Q.size())
			les[i] = Q.top();
		else
			les[i] = -1;
		while (T.size() && a[T.top()] < a[i]) {
			T.pop();
		}
		if (T.size())
			gre[i] = T.top();
		else
			gre[i] = -1;
		Q.push(i);
		T.push(i);
	}
	for (int i = 0; i < n; i++) {
		Y = i;
		adddist(1, 0, n, 0, i);
		addmax(1, 0, n, gre[i] + 1, i + 1, a[i]);
		addmin(1, 0, n, les[i] + 1, i + 1, a[i]);
//		pii P = get(1, 0, n, 0, i + 1);
		ans += t[1];
//		cout << i << ' ' << t[1] << endl;
	}
	cout << ans;
}
