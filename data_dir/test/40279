#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <cassert>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>

using namespace std;

#define f first
#define s second
#define pb push_back
#define pp pop_back
#define mp make_pair
#define ll long long
#define ld long double
#define ull unsigned long long
#define PI pair < int, int > 

const int N = 5e5 + 123;
const int M = 123;
const ld Pi = acos(-1);
const ll Inf = 1e18;
const int inf = 1e9;
int mod = 1e9 + 7;
const int Sz = 350;

void add(int &a, int b) {
  a += b;
  if (a >= mod) a -= mod;
}
int mult(int a, int b) {
  return 1ll * a * b % mod;
}
int sum(int a, int b) {
  add(a, b);
  return a;
}

int n, m, p[N], phi, dp[N];
vector < int > a[N], ans;
bool bad[N];

int bp(int a, int n) {
  int ans = 1;
  while(n) {
    if (n & 1) ans = mult(ans, a);
    a = mult(a, a);
    n >>= 1;
  }
  return ans;
}

int divide(int a, int b) {
  int c = __gcd(a, b);
  a /= c;
  b /= c;
  return mult(a, bp(b, phi - 1));
}
int main() {
  #ifdef wws
    freopen("in", "r", stdin);
   // freopen("out", "w", stdout);
  #endif 
  ios_base::sync_with_stdio(0);
  cin >> n >> mod;
  for (int i = 1;i <= mod;i++) if (__gcd(i, mod) == 1) phi++;
  for (int i = 0, x;i < n;i++) {
    cin >> x;
    bad[x] = 1;
  }
  for (int i = 0;i < mod;i++) if (!bad[i]) a[__gcd(i, mod)].pb(i);
  int S = 0;
  for (int i = 1;i <= mod;i++) S += a[i].size();
  assert(S == mod - n);
  int mx, pos;
  mx = 0;
  for (int i = 1;i <= mod;i++) {
    if (a[i].size()) {
      int now = 0; 
      for (int j = 1;j < i;j++) {
        if (i % j == 0) {
          if (dp[j] > now) {
            now = dp[j];
            p[i] = j;
          }
        }
      }
      dp[i] = now + a[i].size();
      if (dp[i] > mx) {
        mx = dp[i];
        pos = i;
      }
    }
  }
  while(pos > 0) {
    for (auto i : a[pos]) ans.pb(i);
    pos = p[pos];
  }
  assert(mx == ans.size());
  reverse(ans.begin(), ans.end());
  cout << ans.size() << endl;
  int lst = 1;
  for (auto i : ans) {
    cout << divide(i, lst) << " ";
    lst = i;
  }
  return 0;
}