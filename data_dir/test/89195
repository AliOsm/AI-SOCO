#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// To use most bits rather than just the lowest ones:
struct chash { // large odd number for C
  const uint64_t C = uint64_t(4e18 * acos(0)) | 71;
  uint64_t operator()(uint64_t x) const { return __builtin_bswap64(x * C); }
};
 
template<typename K, typename V>
using hash_map = __gnu_pbds::gp_hash_table<K, V, chash>;

using namespace std;
#define SZ(v) int((v).size())
#define ALL(vec) begin(vec), end(vec)
typedef long long i64;
template<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}
template<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}
#ifdef Rahul
# define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); \
  stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
#else
# define error(...) 42;
#endif
string to_string(char c) { return "'" + string(1, c) + "'";}
string to_string(string s) { return '"' + s + '"';}
string to_string(const char* s) { return to_string((string) s);}
template<typename A> string to_string(A);
template<typename A, typename B> string to_string(pair<A, B> p){
  return "(" + to_string(p.first) + ": " + to_string(p.second) + ")";}
template<typename A> string to_string(A v) {bool f = false; string r = "{"; 
  for (auto x: v) {if (f) r += ", "; r += to_string(x); f = true;} return r += "}";}
template<typename A> string to_string(vector<vector<A>> v) {string r; 
  for (auto x: v) r += "\n" + to_string(x); return r;}
int Nerr;
template<typename A> string to_string(A *p) {return to_string(vector<A>(p, p + Nerr));}
void err(istream_iterator<string>) { cerr << endl; }
template<typename T,typename... Args> void err(istream_iterator<string> it, T a, Args... args) {
  cerr << *it << " =: " << to_string(a) << "; "; err(++it, args...); }
template<typename T> void kek(T ans) {cout << ans << endl; exit(0);}
#define Lu(...) [&] (auto &&u) { return __VA_ARGS__; }
#define Luv(...) [&] (auto &&u, auto &&v) { return __VA_ARGS__; }
int const MOD = 1e9 + 7;
i64 const INF = 1e18 + 42;
/***********************************************************************/
struct UF {
  vector<int> par, sizes;
  int cnt;
  UF(int n) {
    par.resize(n);
    iota(par.begin(), par.end(), 0);
    sizes.assign(n, 1);
    cnt = n;
  }
  int find(int u) {
    return (u == par[u] ? u : par[u] = find(par[u]));
  }
  bool join(int u, int v) {
    u = find(u);
    v = find(v);
    if (u == v) return false;
    if (sizes[u] < sizes[v]) swap(u, v);
    par[v] = u;
    sizes[u] += sizes[v];
    cnt--;
    return true;
  }
  int size(int u) {
    return sizes[find(u)];
  }
  int is_leader(int u) {
    return u == find(u);
  }
};

int32_t main() {
  cin.tie(nullptr) -> sync_with_stdio(false);
  
  int n; cin >> n;
  i64 ans = 0;
  vector<pair<i64,char>> a(n);
  i64 la = INF, ra = -INF;
  i64 lb = INF, rb = -INF;
  for (auto &[x, c] : a) {
    cin >> x >> c;
    if (c == 'P' or c == 'R') {
      uin(la, x);
      uax(ra, x);
    }
    if (c == 'P' or c == 'B') {
      uin(lb, x);
      uax(rb, x);
    }
  }
  if (rb >= lb) ans += rb - lb;
  if (ra >= la) ans += ra - la;
  vector<i64> ca, cb;
  for (int i = 0, j = -1; i < n; ++i) {
    if (a[i].second == 'P') {
      ca.push_back(a[i].first);
      cb.push_back(a[i].first);
      if (~j) {
        i64 len = a[i].first - a[j].first;
        i64 ma = -1, mb = -1;
        for (int k = 1; k < SZ(ca); ++k) {
          uax(ma, ca[k] - ca[k - 1]);
        }
        for (int k = 1; k < SZ(cb); ++k) {
          uax(mb, cb[k] - cb[k - 1]);
        }
        if (len < ma + mb) {
          ans -= ma + mb - len;
        }
      }
      ca = cb = {a[i].first};
      j = i;
    }
    if (a[i].second == 'R') ca.push_back(a[i].first);
    if (a[i].second == 'B') cb.push_back(a[i].first);
  }
  kek(ans);
}
