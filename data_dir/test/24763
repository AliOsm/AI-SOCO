#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define clr(a,b) memset(a,b,sizeof(a))
#define all(v) ((v).begin()),((v).end())
#define read(v) freopen(v, "r", stdin)
#define write(v) freopen(v, "wt", stdout)
#define fastIO cout << fixed << setprecision(15), ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)
double const EPS = 1e-9, PI = acos(-1);
const int N = 3e5 + 9, M = 2e3 + 9, OO = 1e9 + 7, MOD = 1e9 + 7;
const ll inf = 1e18;

vector<vector<int>> tree;
vector<int> isEnd;

int addTrie() {
  tree.push_back(vector<int>(2, -1));
  return tree.size() - 1;
}

void insert(int x) {
  int cur = 0;
  for (int i = 18; i >= 0; --i) {
    bool word = x & (1 << i);
    int nxt = tree[cur][word];
    if(nxt == -1)
      nxt = addTrie();
    tree[cur][word] = nxt;
    cur = nxt;
  }
}

int search(int x) {
  int cur = 0, res = 0;
  for (int len = 18; len >= 0; --len) {
    bool word = x & (1 << len);
    int nxt = tree[cur][word];
    if(nxt == -1) {
      nxt = tree[cur][!word];
      res |= (1 << len);
    }
    cur = nxt;
  }
  return res;
}

int allNum[(1<<19)*2];

int main() {
  fastIO;
//  read("input.in");
//  write("input.in");
  addTrie();
  int n, m, a;
  cin >> n >> m;
  for (int i = 0; i < n; ++i) {
    cin >> a;
    allNum[a] = 1;
  }
  for (int i = 0; i < (1 << 19); ++i) {
    if(!allNum[i])
      insert(i);
  }
  int cur = 0;
  for (int i = 0; i < m; ++i) {
    cin >> a;
    cur ^= a;
    cout << search(cur) << '\n';
  }
  return 0;
}
