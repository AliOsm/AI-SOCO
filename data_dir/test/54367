/* Author haleyk10198 */
/* �@��:  haleyk10198 */
/* CF handle: haleyk100198*/
#include <bits/stdc++.h>

#define MOD 1000000007
#define LINF (1LL<<60)
#define INF 2147483647
#define PI 3.1415926535897932384626433
#define ll long long
#define pii pair<int,int>
#define mp(x,y) make_pair((x),(y))

using namespace std;

string itos(int x){
	stringstream ss;
	ss << x;
	return ss.str();
}

int n;
vector<int> near[200010];

int root;

int dfs(int now, int prv){
	set<int> s;
	for(auto x: near[now])
		if(x - prv){
			int y = dfs(x, now);
			if(y == -1)
				return -1; //pass the error message
			s.insert(++y);
		}
	if(s.size() == 0)
		return 0; //Just a leaf
	if(s.size() == 1)
		return *s.begin(); //foldable subtree
	if(s.size() == 2 && now == root)
		return accumulate(s.begin(), s.end(), 0); //w/ 2 diff length @ root
	if(s.size() == 2){
		//w/ 2diff length not @ root
		root = now;
		/*If the tree is still foldable, it has to be @ somewhere between those leafs w/ diff depth, 
			and since we are dealing with a tree we just pick an arbitary node along the path*/
	}
	return -1;
}

int solve(void){
	int res = dfs(root, root);
	if(root) //repicked root
		res = dfs(root, root);
	while(res % 2 == 0) //even amount of edges => fold
		res /= 2;
	return res;
}

int main(){
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	ios_base::sync_with_stdio(false);
	cin >> n;
	for(int i = 1; i < n; i++){
		int u, v;
		cin >> u >> v;
		near[--u].push_back(--v);
		near[v].push_back(u);
	}
	cout << solve() << endl;
	return 0;
}

