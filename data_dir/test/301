/*input
2 3
1 5 7
2 3 1
1 2
*/
#include <bits/stdc++.h>
using namespace std;
const long long md=998244353;
long long a[1005][1005],n,m,r,c, prefixx[1000005], prefix2x[1000005], prefixy[1000005], prefix2y[1000005];
long long dp[1000005], prefixdp[1000005];
long long power(long long a,long long p,long long m=md){
	return p?power(a*a%m,p/2,m)*(p&1?a:1)%m:1;
}
int main(){
	#ifdef ONLINE_JUDGE
	ios_base::sync_with_stdio(0);
	cin.tie(0);cout.tie(0);
	#endif
	deque<pair<long long,long long>> v;
	cin>>n>>m;
	for(int i=1;i<=n;++i) for(int j=1;j<=m;++j){
		cin>>a[i][j];
		v.push_back({i,j});
	}
	cin>>r>>c;
	sort(v.begin(), v.end(),[](auto i, auto j){
		return a[i.first][i.second] < a[j.first][j.second];
	});
	v.push_front({0,0});
	for(int i=1, j=0;i<v.size();++i){
		while(a[v[j+1].first][v[j+1].second] < a[v[i].first][v[i].second]) ++j;
		
		dp[i] = prefixdp[j];

		(dp[i] += v[i].first*v[i].first%md * j%md) %=md;
		(dp[i] += prefix2x[j]) %=md;
		(dp[i] += md - (2*v[i].first*prefixx[j]%md))%=md;

		(dp[i] += v[i].second*v[i].second%md * j%md) %=md;
		(dp[i] += prefix2y[j]) %=md;
		(dp[i] += md - (2*v[i].second*prefixy[j]%md))%=md;

		dp[i] = dp[i]*power(j,md-2)%md;

		prefixdp[i] = (prefixdp[i-1] + dp[i])%md;
		prefixx[i] = (prefixx[i-1] + v[i].first)%md;
		prefix2x[i] = (prefix2x[i-1] + v[i].first*v[i].first)%md;
		prefixy[i] = (prefixy[i-1] + v[i].second)%md;
		prefix2y[i] = (prefix2y[i-1] + v[i].second*v[i].second)%md;

		//cout<<a[v[i].first][v[i].second]<<' '<<i<<' '<<j<<' '<<dp[i]<<'\n';
		if(v[i] == make_pair(r,c)) return cout<<dp[i],0;

	}
}