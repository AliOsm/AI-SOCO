#define MAXSTACKSIZE [1024 * 1024 * 128]
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <hash_map>
#include <hash_set>
#include <vector>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iterator>
#include <limits>
#include <time.h>
#include <math.h>
using namespace std;
#define mems(arr, val) memset(arr, val, sizeof(arr))
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define all(A) (A).begin(), A.end()
#define mp(a, b) make_pair(a, b)
#define forit(it, A) for(auto it = A.begin(); it != A.end(); it++)
#define M_PI       3.14159265358979323846
#define M_PI_2     1.57079632679489661923
#define M_PI_4     0.785398163397448309616
typedef long long LL;
typedef pair<int, int> pii;
//const LL INF = INT_MAX;
const int MAXN = 100100;
const LL MOD = 1000000007;
const double EPS = 1e-6;
map<LL, LL> M;

LL D[MAXN];


int main()
{
#ifdef MY_SOL
    freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
    //freopen("stars.in", "r", stdin); freopen("stars.out", "w", stdout);
#endif
    mems(D, -1);
    LL n;
    cin>>n;
    vector<LL> a(n);
    //a[0] = 0;
    forn(i, 0, n)
    {
        cin>>a[i];
        M[a[i]]++;
    }

    vector<pair<int, int>> incr;
    int startpos = 0;
    int ans = 0;
    for(int i = 0; i < n; ++i)
    {
        if (i == n - 1)
        {
            incr.push_back(mp(startpos, i));
        }
        else
        {
            if (a[i + 1] <= a[i])
            {
                incr.push_back(mp(startpos, i));
                startpos = i + 1;
            }
        }
    }

    for(int i = 0; i < incr.size(); ++i)
    {
        int s1 = incr[i].second - incr[i].first + 1;
        ans = max(ans, s1);
        if (i + 1 == incr.size()) continue;

        
        int s2 = incr[i + 1].second - incr[i + 1].first + 1;
        int last = incr[i].second;
        ans = max(ans, s1 + 1);
        ans = max(ans, s2 + 1);
        if (s1 != 1)
        {
            if (a[last - 1] + 2 <= a[last + 1])
            {
                ans = max(ans, s1 + s2);
            }
        }
        if (s2 != 1)
        {
            if (a[last] + 2 <= a[last + 2])
            {
                ans = max(ans, s1 + s2);
            }
        }
    }

    cout<<ans;

    return 0;
}