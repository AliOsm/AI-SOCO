#include <bits/stdc++.h>
using namespace std;

const int MAXN = 1001;

int n;
vector <int> m[MAXN], s[MAXN];

struct edge {
	int u, v, c;
};

int find(int v, int* par) {
	return (par[v] == -1 ? v : par[v] = find(par[v], par));
}

vector <int> ans;

bool merge(int u, int v, int* par) {
	u = find(u, par);
	v = find(v, par);
	if (u == v)
		return false;
	par[u] = v;
	return true;
}

int px[MAXN], py[MAXN];

void reset(int* par) {
	fill(par, par + n, -1);
}

void sayno() {
	cout << "-1\n";
	exit(0);
}

int main() {
	int k;
	cin >> n >> k;
	if (n % 2 == 0)
		sayno();
	vector < edge > e(k);
	for (int i = 0; i < k; ++i) {
		int u, v;
		char c;
		cin >> u >> v >> c;
		u --, v --;
		if (c == 'S') {
			s[u].push_back(v);
			s[v].push_back(u);
		} else {
			m[u].push_back(v);
			m[v].push_back(u);
		}
		e[i].u = u, e[i].v = v, e[i].c = c;
	}
	reset(px);
	int comp = n;
	for (int i = 0; i < k; ++i)
		if (e[i].c == 'M')
			comp -= merge(e[i].u, e[i].v, px);
	if (comp - 1 > (n - 1) / 2)
		sayno();
	for (int i = 0; i < k; ++i)
		if (e[i].c == 'S' && merge(e[i].u, e[i].v, px))
			ans.push_back(i);
	reset(px);
	for (int i = 0; i < k; ++i)
		if (e[i].c == 'M')
			merge(e[i].u, e[i].v, px);
	reset(py);
	for (int i = 0; i < k && ans.size() < (n - 1) / 2; ++i)
		if (e[i].c == 'S' && find(e[i].u, px) == find(e[i].v, px) && merge(e[i].u, e[i].v, py))
			ans.push_back(i);
	if (ans.size() < (n - 1) / 2)
		sayno();
	reset(px);
	for (int i = 0; i < ans.size(); ++i)
		merge(e[ans[i]].u, e[ans[i]].v, px);
	for (int i = 0; i < k; ++i)
		if (e[i].c == 'M' && merge(e[i].u, e[i].v, px))
			ans.push_back(i);
	cout << ans.size() << '\n';
	for (int id: ans)
		cout << ++ id << ' ';
	cout << '\n';
	return 0;
}
