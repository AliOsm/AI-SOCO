
 #include "bits/stdc++.h"
 using namespace std;
 vector<int> Path , Graph[200005] , Parity_Graph[400005];
 bool Visited[400005];
 set<int> S;
 set<int>::iterator it;

 bool dfs( int root ,int N ){
 	if( Visited[root] == true ) return false;
 	Path.emplace_back( root );
 	if( root <= N && Parity_Graph[root].size() == 0 ) return true;

 	bool Win = false;
 	Visited[root] = true;

 	for( int i = 0 ; i < Parity_Graph[root].size() ; ++i ){
 		Win = dfs( Parity_Graph[root][i] , N );
 		if( Win == true ) return true;
 	}

 	Path.pop_back();
 	return false;
 }

 bool Cycle_Exists( int root ){
 	if( Visited[root] == true ){
 		it = S.find( root );

 		if( it == S.end() ) return false;
 		else return true;
 	}

 	Visited[root] = true;
 	S.insert( root );
 	bool IsCycle;

 	for( int i = 0 ; i < Graph[root].size() ; ++i ){
 		IsCycle = Cycle_Exists( Graph[root][i] );

 		if( IsCycle == true ) return true;
 	}

 	S.erase( root );
 	return false;
 }

 int main(){
 	int N , m , u , s , i , j , Num;
 	scanf( "%d%d" , &N , &m );

 	for( i = 1 ; i <= N ; ++i ){
 		scanf( "%d" , &Num );

 		for( j = 1 ; j <= Num ; ++j ){
 			scanf( "%d" , &u );
 			Graph[i].emplace_back( u );
 			Parity_Graph[i].emplace_back( u + N );
 			Parity_Graph[i + N].emplace_back( u );
 		}
 	}

 	fill( Visited , Visited + 2 * N + 1 , false );
 	scanf( "%d" , &s );
 	
 	if( dfs( s + N , N ) ){
 		puts( "Win" );

 		for( i = 0 ; i < Path.size() ; ++i ){
 			if( Path[i] > N ) printf( "%d " , Path[i] - N );
 			else printf( "%d " , Path[i] );
 		}

 		puts( "" );
 		return 0;
 	}

 	fill( Visited , Visited + N + 1 , false );
 	if( Cycle_Exists( s ) ) puts( "Draw" );
 	else puts( "Lose" );

 	return 0;
 }