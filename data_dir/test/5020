#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
#define pb push_back
#define F first
#define S second
#define ll long long
#define ull unsigned long long
#define ld long double
#define endl '\n'
#define TIME 1.0*clock()/CLOCKS_PER_SEC
#define pii pair < int , int >
#define Endl '\n'
 
#pragma GCC optimize("Ofast")
 
using namespace std;
using namespace __gnu_pbds;
 
template <typename T> using ordered_set = tree <T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
 
mt19937 gen(chrono::system_clock::now().time_since_epoch().count());
 
const ll mod = 1e9 + 7;
const int FFTM = 998244353;
const int N = 300000;
 
const int SX[4] = {0 , 1 , -1 , 0};
const int SY[4] = {1 , 0 , 0 , -1};
const int rx[8] = {1, -1, 0, 0, 1, 1, -1, -1};
const int ry[8] = {0, 0, 1, -1, 1, -1, 1, -1};
const int kx[8] = {1, 1, -1, -1, 2, 2, -2, -2};
const int ky[8] = {2, -2, 2, -2, 1, -1, 1, -1};
 
 
void crash(){
    cout << "0" << endl << "1 1" << endl;
    exit(0);
}
 
void mem(const string &t, int &n){
    int kol_ot = 0;
    int kol__z = 0;
    for (int i = 0;i < n; ++i){
        if (t[i] == '(')kol_ot++;
        else kol__z++;
    }
    if (kol_ot != kol__z)crash();
}
 
 
int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#endif
    string s;
    int n;
    cin >> n >> s;
    if (n % 2)crash();
    mem(s, n);
    s = s + s;
    int pos_with_min_value;
    int min_value = 1e9;
    int tech_ = 0;
    for (int i = 0;i < n; ++i){
        if (s[i] == '(')tech_++;
        else tech_--;
        if (tech_ < min_value)min_value = tech_, pos_with_min_value = i + 1;
    }
    tech_ = 0;
    vector < int > pos_with_tech_value(2 * N + 10, 0);
    int tech_best_ans = 0;
    vector < int > sum(2 * N + 10, 0);
    vector < int > now(2 * N + 10, 0);
    vector < int > pos_nach(2 * N + 10, 0);
    vector < int > deep(2 * N + 10, 0);
    for (int i = pos_with_min_value;i <= pos_with_min_value + n - 1; ++i){
        if (s[i] == '(')tech_++, pos_with_tech_value[tech_] = i;
        else{
            sum[i] = now[tech_];
            now[tech_] = 0;
            pos_nach[i] = pos_with_tech_value[tech_];
            tech_--;
            deep[i] = tech_;
            now[tech_]++;
        }
        if (tech_ == 0)tech_best_ans++;
    }
    int tech_best_ans_with_zero = tech_best_ans;
    int pos_l = 0, pos_r = 0;
    for (int i = pos_with_min_value + 1;i <= pos_with_min_value + n - 1; ++i){
        if (s[i] == ')'){
            if (deep[i] == 0 && sum[i] + 1 > tech_best_ans)tech_best_ans = sum[i] + 1, pos_l = pos_nach[i], pos_r = i;
            if (deep[i] == 1 && sum[i] + 1 + tech_best_ans_with_zero > tech_best_ans)tech_best_ans = sum[i] + 1 + tech_best_ans_with_zero, pos_l = pos_nach[i], pos_r = i;
        }
    }
    cout << tech_best_ans << endl << (pos_l % n) + 1 << " " << (pos_r % n) + 1 << endl;
    return 0;
}