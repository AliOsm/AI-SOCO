#include <bits/stdc++.h>

#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define for1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(x) (x).begin(), (x).end()
#define clr(x) memset((x), 0, sizeof((x)));
#define pb push_back
#define mp make_pair
#define x first
#define y second

using namespace std;
typedef long double ld;
typedef long long ll;
typedef pair<int, int> PII;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef long long i64;
typedef unsigned long long ull;

template<class T>
bool remin(T &a, const T &b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}

template<class T>
bool remax(T &a, const T &b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

int nxt() {
    int x;
    scanf("%d", &x);
    return x;
}

ll gcd(ll a, ll b) {
    a = abs(a);
    b = abs(b);
    while (b) {
        a %= b;
        swap(a, b);
    }
    return a;
}

typedef ld ptdata;

struct pt {
    ptdata x, y;

    pt() { }

    pt(ptdata x, ptdata y) : x(x), y(y) { }

    inline pt operator-(const pt &r) const {
        return pt(x - r.x, y - r.y);
    }

    inline pt operator+(const pt &r) const {
        return pt(x + r.x, y + r.y);
    }

    inline pt operator*(const ld &r) const {
        return pt(x * r, y * r);
    }

    inline ptdata sqlen() const {
        return abs(x * x + y * y);
    }

    pt rot(ld co, ld si) const {
        return pt(x * co - si * y, si * x + co * y);
    }

    pt rot(ld ang) const {
        return rot(cosl(ang), sinl(ang));
    }

    ld len() const {
        return sqrtl(sqlen());
    }

    inline bool operator<(const pt &r) const {
        if (x != r.x) return x < r.x;
        return y < r.y;
    }

    inline bool operator==(const pt &r) const {
        return x == r.x && y == r.y;
    }
};

ostream &operator<<(ostream &os, const pt &p) {
    return os << "(" << p.x << "," << p.y << ")";
}

inline ptdata cross(const pt &l, const pt &r) {
    return l.x * r.y - l.y * r.x;
}

inline ptdata dot(const pt &l, const pt &r) {
    return l.x * r.x + l.y * r.y;
}


ll pwmod(ll a, ll n, ll mod) {
    ll ret = 1;
    while (n) {
        if (n & 1) ret = ret * a % mod;
        a = a * a % mod;
        n >>= 1;
    }
    return ret;
}

template<typename T>
inline T sqr(T x) {
    return x * x;
}


bool remin(ll &x, ll y) {
    if (x > y) {
        x = y;
        return 1;
    }
    return 0;
}

map<ll, ll> m;

ll getLca(ll u, ll v) {
    set<ll> used;
    ll a = u;
    while (a > 0) {
        used.insert(a);
        a >>= 1;
    }
    ll b = v;
    while (!used.count(b)) {
        b >>= 1;
    }
    return b;
}
void solve() {
    int q;
    cin >> q;
    forn(i, q) {
        int t;
        cin >> t;
        if (t == 1) {
            ll u, v, add;
            cin >> u >> v >> add;
            ll lca = getLca(u, v);
            ll a = u, b = v;
            while (a != lca) {
                m[a] += add;
                a >>= 1;
            }
            while (b != lca) {
                m[b] += add;
                b >>= 1;
            }
        } else {
            ll u, v;
            cin >> u >> v;
            ll lca = getLca(u, v);
            ll ans = 0;
            ll a = u, b = v;
            while (a != lca) {
                ans += m[a];
                a >>= 1;
            }
            while (b != lca) {
                ans += m[b];
                b >>= 1;
            }
            cout << ans << "\n";
        }
    }
}

int main() {
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    solve();

    //cerr << "Time " << clock() / (double) CLOCKS_PER_SEC << endl;
    return 0;
}
