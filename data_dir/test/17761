#include <iostream>
#include <stdio.h>
#include<bits/stdc++.h>
#define ll long long
#define fr first
#define sc second
#define ii pair < int , int >
#define mp make_pair
using namespace std;
int n;
/// Segment Tree
const int max_node = 2000000;
int tree[max_node];
int A[max_node];
void build(int node , int start , int _end)
{
    if(start == _end)
    {
        /// Leaf node will have a single element
        tree[node] = A[start];
    }
    else
    {
        int mid = (start+_end)/2;
        /// Recurse on the left child
        build(node*2   ,start ,mid );
        /// Recurse on the right child
        build(node*2+1 ,mid+1 ,_end);
        /// Internal node will have the sum of both of its children
        tree[node] = tree[node*2]+tree[node*2+1];
    }
}
int query(int node , int start , int _end, int l , int r)
{
    if(r < start || l > _end)
    {
        /// range represented by a node is completely outside the given range
        return 0;
    }
    if(l <= start && _end<= r)
    {
        /// range represented by a node is completely inside the given range
        return tree[node];
    }
    /// range represented by a node is partially inside and partially outside the given range
    int mid = (start+_end)/2;
    int x1 = query(2*node  ,start , mid , l , r);
    int x2 = query(2*node+1,mid+1 ,_end , l , r);
    return (x1+x2);
}
int main()
{
  int m;
  cin>>m;
  for(int i=0;i<m;i++)
  {
      int x;
      scanf("%d",&x);
      A[x]++;
  }
  n = 300000;
  build(1,1,n);
  ll maxx = 0;
  for(int i=1;i<=n;i++)
  {
      ll ans = 0;
      for(int j=i;j<=n;j+=i)
      {
          ans+=(1LL * j * query(1,1,n,j,j+i-1));
      }
      if(A[i] == 0)
        ans = 0;
      maxx = max(maxx , ans);
  }
  cout<<maxx;
}

