#include <stdio.h>
#include <iostream>
#include <cmath>
#include <vector>
#include <algorithm>
#include <string>
#include <functional>
#include <cassert>
#include <numeric>

int count(std::vector<int> arr) {
    int k = 0;
    std::function<void(int,int)> merge_sort = [&](int begin, int after) {
        ++k;
        if (std::is_sorted(arr.begin()+begin, arr.begin()+after)) {
            return;
        }
        if (begin +1 != after) {
            int mid = (begin+after)/2;
            merge_sort(begin, mid);
            merge_sort(mid, after);
            std::sort(arr.begin()+begin, arr.begin()+after);
        }
    };
    merge_sort(0, (int)arr.size());
    return k;
}

std::vector<int> solve(int n, int limit) {
    int k = limit;
    std::vector<int> arr(n);
    for (int i = 0; i < n; ++i) arr[i] = i+1;
    std::function<void(int,int)> merge_sort = [&](const int begin, const int after) {
        //std::cout << begin << " " << after << std::endl;
        if (k > 0) {
            // must be unsorted
            std::sort(arr.begin()+begin, arr.begin()+after, std::greater<int>());
            if (begin + 1 != after) {
                int mid = (begin + after)/2;
                k -= 2;
                merge_sort(begin, mid);
                merge_sort(mid, after);
            }
        } else {
            std::sort(arr.begin()+begin, arr.begin()+after, std::less<int>());
        }
    };
    --k;
    merge_sort(0, n);
    if (k != 0) {
        return {-1};
    } else {
        assert(count(arr) == limit);
        return arr;
    }
}

std::ostream& operator<<(std::ostream& os, const std::vector<int>& arr) {
    for (auto& it : arr) os << it << ' ';
    return os;
}

int main() {
    int n, k;
    while (std::cin >> n >> k) {
        auto answ = solve(n, k);
        std::cout << solve(n, k) << std::endl;
    }
    return 0;
}