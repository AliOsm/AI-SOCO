/*
ID: hepic
PROG: sabotage
LANG: C++11
*/
#include <bits/stdc++.h>

#define FOR(i, a, b) for(auto i=a; i<=b; ++i)
#define REP(i, a, b) for(auto i=a; i<b; ++i)
#define FORI(i, a, b) for(auto i=a; i!=b+1-2*(a>b); i+=1-2*(a>b))
#define REPI(i, a, b) for(auto i=a-(a>b); i!=b-(a>b); i+=1-2*(a>b))
#define ALL(v) v.begin(),v.end()
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define pf(a) push_front(a)
#define eb(a, b) emplace_back(a, b)
#define fir first
#define sec second
#define what_is(x) cout<<#x<<" is "<<x<<endl;
#define type(x) typeid(x).name()
#define ms(arr, val) memset(arr, val, sizeof(arr))
#define min3(a,b,c) min(min(a,b),c)
#define max3(a,b,c) max(max(a,b),c)
#define SIZE 100010
#define MAXN 99999
#define NUM 25
#define PI acos(-1)
#define open_read1 freopen("C:\\Users\\Hepic\\Desktop\\a.txt", "r", stdin)
#define open_write1 freopen("C:\\Users\\Hepic\\Desktop\\b.txt", "w", stdout)
#define open_read freopen("poker.in", "r", stdin)
#define open_write freopen("poker.out", "w", stdout)

using namespace std;

typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair<double, double> PDD;
typedef pair<int, int> PII;
typedef pair<int, PII> PIPII;
typedef pair<PII, PII> PPIIPII;
typedef pair<LL, LL> PLL;
typedef pair<ULL, ULL> PUU;
typedef pair<LL, PLL> PLPLL;
typedef pair<PLL, PLL> PPLLPLL;


template<typename T, typename T1>
ostream& operator << (ostream &out, pair<T, T1> obj)
{
    out<<"("<<obj.first<<","<<obj.second<<")";
    return out;
}


template<typename T, typename T1>
ostream& operator << (ostream &out, map<T, T1> cont)
{
    typename map<T, T1>::const_iterator itr = cont.begin();
    typename map<T, T1>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, set<T> cont)
{
    typename set<T>::const_iterator itr = cont.begin();
    typename set<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, multiset<T> cont)
{
    typename multiset<T>::const_iterator itr = cont.begin();
    typename multiset<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, template<typename ELEM, typename ALLOC=allocator<ELEM>> class CONT>
ostream& operator << (ostream &out, CONT<T> cont)
{
    typename CONT<T>::const_iterator itr = cont.begin();
    typename CONT<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, unsigned int N, typename CTy, typename CTr>
typename enable_if<!is_same<T, char>::value, basic_ostream<CTy, CTr> &>::type
operator << (basic_ostream<CTy, CTr> &out, const T (&arr)[N])
{
     REP(i, 0, N)
        out<<arr[i]<<" ";
    out<<endl;

    return out;
}


template<typename T>
T gcd(T a, T b)
{
    T min_v = min(a, b);
    T max_v = max(a, b);

    while(min_v)
    {
        T temp = max_v % min_v;
        max_v = min_v;
        min_v = temp;
    }

    return max_v;
}


template<typename T>
T lcm(T a, T b)
{
    return (a*b) / gcd(a, b);
}


template<typename T>
T fast_exp_pow(T base, T exp, T mod)
{
    LL res = 1;

    while(exp)
    {
        if(exp&1)
        {
            res *= base;
            res %= mod;
        }

        exp >>= 1;
        base *= base;
        base %= mod;

    }

    return res % mod;
}

/*#################################################################################################################
#################################################################################################################
#################################################################################################################
#################################################################################################################*/

int N, M, A, B, X, Y, lca, dist;
int parent[100010][NUM], depth[100010], subSize[100010];
vector<int> graph[100010];


void dfs(int node, int par)
{
    parent[node][0] = par;
    subSize[node] = 1;

    for(auto conn_node: graph[node])
    {
        if(conn_node != par)
        {
            depth[conn_node] = depth[node] + 1;
            dfs(conn_node, node);
            subSize[node] += subSize[conn_node];
        }
    }
}


void process()
{
    REP(i, 1, NUM)
        FOR(j, 1, N)
           parent[j][i] = parent[parent[j][i-1]][i-1];
}


int LCA(int nd1, int nd2)
{
    if(depth[nd1] > depth[nd2])
    {
        for(int i=NUM-1; i>=0; --i)
            if(depth[parent[nd1][i]] >= depth[nd2])
                nd1 = parent[nd1][i];
    }

    else if(depth[nd1] < depth[nd2])
    {
        for(int i=NUM-1; i>=0; --i)
            if(depth[parent[nd2][i]] >= depth[nd1])
                nd2 = parent[nd2][i];
    }

    if(nd1 == nd2)
        return nd1;

    for(int i=NUM-1; i>=0; --i)
        if(parent[nd1][i] != parent[nd2][i])
        {
            nd1 = parent[nd1][i];
            nd2 = parent[nd2][i];
        }

    return parent[nd1][0];
}


int Distance(int nd1, int nd2)
{
    return depth[nd1] + depth[nd2] - 2*depth[LCA(nd1, nd2)];
}


void solve_par_child(int child)
{
    int mid = child, dst = dist/2, sum;

    for(int i=NUM-1; i>=0; --i)
    {
        if(dst >= (1<<i))
        {
            mid = parent[mid][i];
            dst -= (1<<i);
        }
    }

    sum = subSize[mid];
    mid = child, dst = dist/2 - 1;

    for(int i=NUM-1; i>=0; --i)
    {
        if(dst >= (1<<i))
        {
            mid = parent[mid][i];
            dst -= (1<<i);
        }
    }

    sum -= subSize[mid];
    printf("%d\n", sum);
}


void solve_child_child()
{
    int dst = dist/2 - 1;
    int mid = X, sum = subSize[1];

    for(int i=NUM-1; i>=0; --i)
    {
        if(dst >= (1<<i))
        {
            mid = parent[mid][i];
            dst -= (1<<i);
        }
    }

    sum -= subSize[mid];
    dst = dist/2 - 1, mid = Y;

    for(int i=NUM-1; i>=0; --i)
    {
        if(dst >= (1<<i))
        {
            mid = parent[mid][i];
            dst -= (1<<i);
        }
    }

    sum -= subSize[mid];
    printf("%d\n", sum);
}



int main()
{
//    open_read1;
    scanf("%d", &N);

    FOR(i, 1, N-1)
    {
        scanf("%d%d", &A, &B);
        graph[A].pb(B);
        graph[B].pb(A);
    }

    depth[1] = 1;
    dfs(1, 0);
    process();

    scanf("%d", &M);

    FOR(i, 1, M)
    {
        scanf("%d%d", &X, &Y);

        lca = LCA(X, Y);
        dist = Distance(X, Y);

        if(X == Y)
        {
            printf("%d\n", N);
            continue;
        }

        if(dist&1)
        {
            printf("0\n");
            continue;
        }

        if(Distance(lca, X) < dist/2)
            solve_par_child(Y);
        else if(Distance(lca, Y) < dist/2)
            solve_par_child(X);
        else
            solve_child_child();
    }

    return 0;
}
