#include <algorithm>
#include <iostream>
#include <cstring>
#include <limits>
#include <complex>
#include <cassert>
#include <iomanip>
#include <cstdio>
#include <vector>
#include <string>
#include <stack>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define type(x) __typeof((x).begin())
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a,b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

const int inf = 1e9 + 143;
const long long longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 111;

int n;
int x[N];

bool can(int k){
    vector<int> vals[N];
    int ptr = 1;
    for(int i = 1; i <= n; i++){
        vals[ptr].push_back(x[i]);
        ++ptr;
        if(ptr > k) ptr = 1;
    }
    for(int i = 1; i <= k; i++){
        for(int j = 0; j < (int)vals[i].size(); j++){
            if(vals[i][j] < (int)vals[i].size() - j - 1)
                return false;
        }
    }
    return true;
}

int main(){

#ifdef KAZAR
	freopen("f.i","r",stdin);
	freopen("f.cik","w",stdout);
	freopen("error","w",stderr);
#endif

    n = read();

    for(int i = 1; i <= n; i++){
        x[i] = read();
    }

    sort(x + 1, x + 1 + n);
    reverse(x + 1, x + 1 + n);

    for(int i = 1; i <= n; i++){
        if(can(i)){
            printf("%d\n",i);
            return 0;
        }
    }

    return 0;

}
