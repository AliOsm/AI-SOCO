#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ll n;
    cin>>n;
    ll A[n];
    for(int i=0;i<n;i++)cin>>A[i];
    vector<char>V1,V3;
    vector<ll>V2,V4;
    ll l=0,r=n-1;
    map<ll,ll>M;
    while(l<=r){
        ll x=V1.size();
        x--;
        if(V1.size()==0){
            if(A[l]<A[r]){
                V1.push_back('L');
                V2.push_back(A[l]);
                M[A[l]]++;
                l++;
            }
            else{
                V1.push_back('R');
                V2.push_back(A[r]);
                M[A[r]]++;
                r--; 
            }
        }
        else if(M[A[l]]!=0 and M[A[r]]==0 and V2[x]<A[r]){
                V1.push_back('R');
                V2.push_back(A[r]);
                M[A[r]]++;
                r--;    
        }
        else if(M[A[l]]==0 and M[A[r]]!=0 and V2[x]<A[l]){
                V1.push_back('L');
                V2.push_back(A[l]);
                M[A[l]]++;
                l++;            
        }
        else if(A[l]>V2[x] and A[r]>V2[x]){
            if(A[l]-V2[x]<=A[r]-V2[x] and M[A[l]]==0){
                V1.push_back('L');
                V2.push_back(A[l]);
                M[A[l]]++;
                l++;
            }
            else if(M[A[r]]==0){
                V1.push_back('R');
                V2.push_back(A[r]);
                M[A[r]]++;
                r--;
            }
        }
        else if(A[l]>V2[x] and M[A[l]]==0){
                V1.push_back('L');
                V2.push_back(A[l]);
                M[A[l]]++;
                l++;
        }
        else if(A[r]>V2[x] and M[A[r]]==0){
                V1.push_back('R');
                V2.push_back(A[r]);
                M[A[r]]++;
                r--;
        }            
        else break;
    }
    l=0,r=n-1;
     map<ll,ll>M1;
    while(l<=r){
        ll x=V3.size();
        x--;
        if(V3.size()==0){
            if(A[l]<=A[r]){
                V3.push_back('L');
                V4.push_back(A[l]);
                M1[A[l]]++;
                l++;
            }
            else{
                V3.push_back('R');
                V4.push_back(A[r]);
                M1[A[r]]++;
                r--; 
            }
        }
        else if(M1[A[l]]!=0 and M1[A[r]]==0 and V4[x]<A[r]){
                V3.push_back('R');
                V4.push_back(A[r]);
                M1[A[r]]++;
                r--;    
        }
        else if(M1[A[l]]==0 and M1[A[r]]!=0 and V4[x]<A[l]){
                V3.push_back('L');
                V4.push_back(A[l]);
                M1[A[l]]++;
                l++;            
        }
        else if(A[l]>V4[x] and A[r]>V4[x]){
            if(A[l]-V4[x]<A[r]-V4[x] and M1[A[l]]==0){
                V3.push_back('L');
                V4.push_back(A[l]);
                M1[A[l]]++;
                l++;
            }
            else if(M1[A[r]]==0){
                V3.push_back('R');
                V4.push_back(A[r]);
                M1[A[r]]++;
                r--;
            }
        }
        else if(A[l]>V4[x] and M1[A[l]]==0){
                V3.push_back('L');
                V4.push_back(A[l]);
                M1[A[l]]++;
                l++;
        }
        else if(A[r]>V4[x] and M1[A[r]]==0){
                V3.push_back('R');
                V4.push_back(A[r]);
                M1[A[r]]++;
                r--;
        }            
        else break;
    }
    cout<<max(V1.size(),V3.size())<<endl;
    if(V1.size()>V3.size())for(auto i:V1)cout<<i;
    else for(auto i:V3)cout<<i;
    return 0;
}