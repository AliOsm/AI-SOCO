#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <memory.h>
#include <set>
#include <map>
#include <iomanip>
#include <cstring>
#include <cstdlib>
#include <ctime>

using namespace std;

typedef long long ll;
typedef long double ld;

int n, m, N = 0;
int **a;
pair < int, pair < int, int > > g[1000100];
int p[1000100];
int pred[1000100];
int col[1000100];
pair < int, int > px[1000100], py[1000100];

bool cmp1(int i, int j) {
    if (g[i].first == g[j].first) {
        if (g[i].second.first == g[j].second.first)
            return g[i].second.second < g[j].second.second;
        return g[i].second.first < g[j].second.first;
    }
    return g[i].first < g[j].first;
}

bool cmp2(int i, int j) {
    if (g[i].first == g[j].first) {
        if (g[i].second.second == g[j].second.second)
            return g[i].second.first < g[j].second.first;
        return g[i].second.second < g[j].second.second;
    }
    return g[i].first < g[j].first;
}

int get (int a) {
    return a != pred[a] ? pred[a] = get (pred[a]) : a;
}

void unit(int a, int b) {
    a = get(a);
    b = get(b);
    if (a != b) {
        if (rand()&1) swap(a, b);
        pred[a] = b;
    }
}

int main() {
    srand(time(NULL));
    scanf ("%d%d", &n, &m);
    a = new int*[n + 1];
    for (int i = 1; i <= n; i ++)
        a[i] = new int[m + 1];
    for (int i = 1; i <= n; i ++) {
        for (int j = 1; j <= m; j ++) {
            int x;
            scanf ("%d", &x);
            g[++N] = make_pair ( x, make_pair (i, j) );
            p[N] = N;
            pred[N] = N;
            col[N] = 1;
        }
    }

    sort (p + 1, p + 1 + N, cmp1);

    for (int i = 2; i <= N; i ++) {
        int pred = g[ p[i - 1] ].first;
        int now = g[ p[i] ].first;
        int predX = g[ p[i - 1] ].second.first;
        int nowX = g[ p[i] ].second.first;
        if (pred == now && predX == nowX)
            unit(p[i-1], p[i]);
    }

    sort (p + 1, p + 1 + N, cmp2);

    for (int i = 2; i <= N; i ++) {
        int pred = g[ p[i - 1] ].first;
        int now = g[ p[i] ].first;
        int predY = g[ p[i - 1] ].second.second;
        int nowY = g[ p[i] ].second.second;
        if (pred == now && predY == nowY)
            unit(p[i-1], p[i]);
    }

    for (int i = 1; i <= N; i ++) {

        int num = p[i];
        int v = g[ num ].first;
        int x = g[ num ].second.first;
        int y = g[ num ].second.second;

        int colX = col[ get(px[x].first) ];
        int colY = col[ get(py[y].first) ];
        int vx = px[x].second;
        int vy = py[y].second;

        if (colX < colY)
            swap (colX, colY),
            swap (vx, vy);
        if (colX == colY && vx == v)
            swap (vx, vy);

        int newCol = col[ get(num) ];

        if (vx != v) newCol = max (newCol, colX + 1);
        else newCol = max (newCol, colX);

        col[ get(num) ] = newCol;
        px[x] = make_pair (num, v);
        py[y] = make_pair (num, v);
    }

    for (int i = 1; i <= N; i ++) {

        int x = g[ i ].second.first;
        int y = g[ i ].second.second;
        a[x][y] = col[ get(i) ];

    }
    for (int i = 1; i <= n; i ++) {
        for (int j = 1; j <= m; j ++)
            printf ("%d ", a[i][j]);
        printf ("\n");
    }
    return 0;
}
