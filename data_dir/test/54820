/// In The Name Of God

#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

#define f first
#define s second

#define pb push_back
#define pp pop_back
#define mp make_pair

#define sz(x) (int)x.size()
#define sqr(x) ((x) * 1ll * (x))
#define all(x) x.begin(), x.end()

#define Kazakhstan ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);

#define nl '\n'
#define ioi exit(0);

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

const int N = (int)1e5 + 7;
const int inf = (int)1e9 + 7;
const int mod = (int)1e9 + 7;
const ll linf = (ll)1e18 + 7;

const int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1};
const int dy[] = {0, 1, 0, -1, 1, -1, 1, -1};

using namespace std;

struct line {
	ll k, b;
	int id;
	line() {}
	line (ll k, ll b, int id) : k(k), b(b), id(id) {}
	ll get(ll x) {
		return k * x + b;
	}
	bool operator < (const line &R) const {
		if (k != R.k) return k < R.k;
		return b > R.b;
	}
};

class CHT {
	private:
		vector <line> v;
	public: 
		ld inter(line a, line b) {
			return (b.b - a.b) / (double)(a.k - b.k);
		}
		void add(line x) {
			while (sz(v) > 1 && inter(v[sz(v) - 2], x) <= inter(v[sz(v) - 2], v.back())) v.pp();
			v.pb(x);
		}
		void push(line x) {
			v.pb(x);	
		}
		void build() {
			vector <line> b;
			sort(all(v));
			for (int i = 0; i < sz(v); i++) {
				if (sz(b) && b.back().k == v[i].k) continue;
				b.pb(v[i]);
			}
			v.clear();
			for (auto it : b) {
				add(it);
			}
		}
		line get(ll x) {
			int l = 0, r = sz(v) - 2, res = 0;
			while (l <= r) {
				int mid = l + r >> 1;
				if (v[mid].get(x) <= v[mid + 1].get(x)) res = mid + 1, l = mid + 1;
				else r = mid - 1;
			}
			return v[res];
		}
};

int n, q;
struct SegTree {
	CHT t[N << 2];
	void upd(int p, line x, int v = 1, int tl = 1, int tr = n) {
		t[v].push(x);
		if (tl == tr) return;
		int tm = tl + tr >> 1;
		if (p <= tm) upd(p, x, v << 1, tl, tm);
		else upd(p, x, v << 1 | 1, tm + 1, tr);
	}
	void build(int v = 1, int tl = 1, int tr = n) {
		if (tl == tr) return;
		int tm = tl + tr >> 1;
		build(v << 1, tl, tm);
		build(v << 1 | 1, tm + 1, tr);
		t[v].build();
	}
	line maxi(line a, line b, int x) {
		if (a.get(x) >= b.get(x)) return a;
		return b;
	}
	line get(int l, int r, int x, int v = 1, int tl = 1, int tr = n) {
		if (l <= tl && tr <= r) return t[v].get(x);
		int tm = tl + tr >> 1;
		if (r <= tm) return get(l, r, x, v << 1, tl, tm);
		if (tm < l) return get(l, r, x, v << 1 | 1, tm + 1, tr);
		return maxi(get(l, r, x, v << 1, tl, tm), get(l, r, x, v << 1 | 1, tm + 1, tr), x);
	}
} t;

int main() {
	#ifdef IOI2018
		freopen ("in.txt", "r", stdin);
	#endif
	Kazakhstan
	cin >> n >> q;
	for (int i = 1; i <= n; i++) {
		int b, k;
		cin >> b >> k;
		t.upd(i, line(k, b, i));
	}
	t.build();
	for (int i = 1; i <= q; i++) {
		int l, r, x;
		cin >> l >> r >> x;
		cout << t.get(l, r, x).id << nl;
	}
	ioi
}