
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j123 = n; (i) < j123; (i) ++)
#define rep1(i, n) for (int (i) = 1, j123 = n; (i) <= j123; (i) ++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout << #a << " :";for(int i123=(x);i123<=(y);i123++) cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int(x.size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
const int MOD = 1e9+9;

map<int, map<int,int> > inv;
int M;
int X[100100];
int Y[100100];
int indeg[100100];
vector<int> adj[100100];
int used[100100];
int dx[3] = {-1, 0, 1};
int numsupport(int index)
{
  int x = X[index];
  int y = Y[index];
  if (y == 0) return 3;
  int cnt = 0;
  rep(i,3)
  {
    int xx = x + dx[i];
    int yy = y - 1;
    if (inv[xx][yy]>=1 && !used[inv[xx][yy]]) cnt++;
  }
  return cnt;
}
int can_remove(int index)
{
  int x = X[index];
  int y = Y[index];
  rep(i,3)
  {
    int xx = x + dx[i];
    int yy = y + 1;
    if (inv[xx][yy]==0) continue;
    if (used[inv[xx][yy]]) continue;
    if (numsupport(inv[xx][yy])==1) return 0;
  }
  return 1;
}
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0);
  cin >> M;
  rep1(i,M) 
  {
    cin >> X[i] >> Y[i];
    inv[X[i]][Y[i]]=i;
  }
  multiset<int> ms;
  rep1(i,M)
  {
    if (can_remove(i))
    {
      ms.insert(i);
    }
  }
  ll ans = 0;
  int getmax = 1;
  while (!ms.empty())
  {
    int index;
    if (getmax)
    {
      index = *(--ms.end());
      ms.erase(--ms.end());
    }
    else
    {
      index = *(ms.begin());
      ms.erase(ms.begin());
    }
    assert(1 <= index && index <= M);
    if (!can_remove(index)) continue;
    if (used[index]) continue;
    getmax = (1 ^ getmax);
//    ans = ((ans*1ll*10) + (index-1))%MOD;
    ans = ((ans*1LL*M) + (index-1))%MOD;
//    db(index);
    used[index]=1;
    rep(i,3)
    {
      int x = X[index]+dx[i];
      int y = Y[index]-1;
      if (y < 0) continue;
      int j = inv[x][y];
      if (j == 0) continue;
      if (used[j]) continue;
      ms.insert(j);
    }
  }
  cout << ans << endl;
}

