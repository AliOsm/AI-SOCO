#include <bits/stdc++.h>
using namespace std;

const int N = 2e5 + 10;
const int mod = 1e9 + 7;

int pr[N], to[N], sz[N];
int pw2[N], depth[N];
bool vis[N], in_stack[N];
int ans = 1;

int root(int x) {
  return pr[x] = (pr[x] == x ? x : root(pr[x]));
}

void unite(int x, int y) {
  x = root(x), y = root(y);
  if (x == y)
    return;
  if (rand() & 1)
    pr[y] = x, sz[x] += sz[y];
  else
    pr[x] = y, sz[y] += sz[x];
}

void sub(int &x, int y) {
  x -= y;
  if (x < 0)
    x += mod;
}

void add(int &x, int y) {
  x += y;
  if (x >= mod)
    x -= mod;
}

int mult(int x, int y) {
  return (1LL * x * y) % mod;
}

void dfs(int u, int d) {
  vis[u] = in_stack[u] = true;
  depth[u] = d;

  if (!vis[to[u]]) {
    dfs(to[u], d + 1);
  } else {
    if (in_stack[to[u]]) {
      int cycn = depth[u] - depth[to[u]] + 1;
      int x = pw2[cycn];
      sub(x, 2);
      x = mult(x, pw2[sz[root(u)] - cycn]);
      ans = mult(ans, x);
    }
  }

  in_stack[u] = false;
}

int main() {
  srand(time(NULL));
  pw2[0] = 1;
  for (int i = 1; i < N; i++)
    pw2[i] = mult(2, pw2[i - 1]);

  int n;
  scanf("%d", &n);
  for (int i = 0; i < n; i++) {
    scanf("%d", to + i);
    to[i]--;
    pr[i] = i;
    sz[i] = 1;
  }

  for (int i = 0; i < n; i++)
    unite(i, to[i]);

  for (int i = 0; i < n; i++)
    if (!vis[i])
      dfs(i, 1);

  printf("%d\n", ans);
  return 0;
}