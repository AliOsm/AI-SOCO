#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int)1e9 + 1;
const ld EPS = 1e-9;

void precalc() {
}

const int maxn =  (int) 5e2 + 10;
int n, m;
char table[maxn][maxn];
int sx, sy;
int tx, ty;

bool read() {
  if (scanf("%d%d", &n, &m) < 2) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    scanf("%s", table[i]);
  }
  scanf("%d%d%d%d", &sx, &sy, &tx, &ty);
  --sx, --sy, --tx, --ty;
  return 1;
}

int used[maxn][maxn];

int ok(int x, int y) {
  return 0 <= x && 0 <= y && x < n && y < m;
}

const int maxg = 4;
const int go[maxg][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};

void dfs(int x, int y) {
  used[x][y] = 1;
  if (table[x][y] == 'X') {
    return;
  }
  for (int g = 0; g < maxg; ++g) {
    int nx = x + go[g][0], ny = y + go[g][1];
    if (!ok(nx, ny) || used[nx][ny]) {
      continue;
    }
    dfs(nx, ny);
  }
}

void solve() {
  table[sx][sy] = '.';
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      used[i][j] = 0;
    }
  }
  int deg = 0;
  for (int g = 0; g < maxg; ++g) {
    int x = tx + go[g][0], y = ty + go[g][1];
    if (ok(x, y) && table[x][y] == '.') {
      ++deg;
    }
  }

  dfs(sx, sy);
  if (used[tx][ty]) {
    if (table[tx][ty] == 'X') {
      printf("YES\n");
      return;
    }
    bool ok = 0;
    if (tx == sx && ty == sy) {
      ok = (deg >= 1);
    } else {
      ok = (deg >= 2);
    }
    if (ok) {
      printf("YES\n");
      return;
    }
  }
  printf("NO\n");
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
