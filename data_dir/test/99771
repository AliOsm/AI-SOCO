#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()
#define boost() ios_base :: sync_with_stdio(0); cin.tie(); cout.tie(); cout << fixed; cout << setprecision(15); srand(time(NULL))
#define endl '\n'
//#define int long long
const int _N = 1e5 + 11;
const long long INF = 1e18 + 11;
const long long MOD = 1e9 + 7;
const double EPS = 1e-7;

int n, m, lvl[_N], dp[_N][18], dist[_N];
vector <int> adj[_N], q;

void dfs(int v, int p, int d) {
  lvl[v] = d;
  dp[v][0] = p;
  dist[v] = d;
  for (auto x : adj[v]) {
    if (x == p) continue;
    dfs(x, v, d + 1);
  }
}

void clca() {
  for (int i = 1; i < 18; i++) {
    for (int j = 1; j <= n; j++) {
      dp[j][i] = dp[dp[j][i - 1]][i - 1];
    }
  }
}

int lca(int u, int v) {
  while (lvl[u] != lvl[v]) {
    int diff = (int)log2(abs(lvl[v] - lvl[u]));
    if (lvl[v] > lvl[u]) v = dp[v][diff];
    else u = dp[u][diff];
  }
  if (u == v) return u;
  int beg = 17;
  for (int i = beg; i >= 0; i--) {
    if (dp[u][i] != dp[v][i]) {
      u = dp[u][i];
      v = dp[v][i];
    }
  }
  return dp[v][0];
}

int dis(int u, int v) {
  return lvl[u] + lvl[v] - 2 * lvl[lca(u, v)];
}

void upd() {
  queue <int> qu;
  for (auto x : q) {
    qu.push(x);
    dist[x] = 0;
  }
  q.clear();
  while (!qu.empty()) {
    int from = qu.front();
    qu.pop();
    for (auto x : adj[from]) {
      if (dist[x] > dist[from] + 1) {
        dist[x] = dist[from] + 1;
        qu.push(x);
      }
    }
  }
}

signed main () {
  boost();
  cin >> n >> m;
  for (int i = 1; i < n; i++) {
    int u, v;
    cin >> u >> v;
    adj[u].pb(v);
    adj[v].pb(u);
  }
  dfs(1, 0, 0);
  clca();
  for (int i = 0; i < m; i++) {
    int t, v;   
    cin >> t >> v;
    if (q.size() == 316) upd();
    if (t == 1) { // paint
      q.pb(v);
    } else { // query
      int res = dist[v];
      for (auto x : q) {
        res = min(res, dis(x, v));
      }
      cout << res << endl;
    }
  }
  return 0;
}

