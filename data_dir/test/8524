#include <bits/stdc++.h>
using namespace std;


struct UnionFind {
    vector<int> par;
    vector<int> sz;

    UnionFind(int n=0){ if(n>0) initialize(n); }
    void initialize(int n){
        par.resize(n);
        sz.assign(n, 1);
        for(int i=0; i<n; i++){
            par[i] = i;
        }
    }

    int find(int x){
        if(par[x] == x){
            return x;
        }else{
            return par[x] = find(par[x]);
        }
    }

    bool unite(int x, int y){
        x = find(x), y = find(y);
        if(x == y) return false;
        if(sz[x] > sz[y]) swap(x, y);
        par[x] = y;
        sz[y] += sz[x];
        return true;
    }

    bool same(int x, int y){ return find(x) == find(y); }
    int size(int x){ return sz[find(x)]; }
};

int main(){
    int N;
    cin >> N;
    UnionFind uf(N);
    for(int i=0; i<N; i++){
        int p;
        cin >> p;
        uf.unite(i, p-1);
    }
    vector<int64_t> nums;
    for(int i=0; i<N; i++) if(uf.find(i) == i) nums.push_back(uf.size(i));
    sort(nums.begin(), nums.end());
    int sz = nums.size();
    if(sz > 1){
        int64_t v = nums[sz-2] + nums[sz-1];
        nums.pop_back();
        nums.pop_back();
        nums.push_back(v);
    }

    int64_t ans = 0;
    for(int64_t a : nums) ans += a*a;
    cout << ans << endl;
    return 0;
}
