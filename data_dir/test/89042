
#pragma comment(linker, "/STACK:64777216")

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cassert>
#include <climits>
#include <functional>
#include <numeric>
#include <algorithm>
#include <cmath>
#include <ctime>

#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <array>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); i++)
#define forn1(i, n) for(int i = 1; i <= int(n); i++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define mp make_pair
#define pb push_back
#define x first
#define y second

typedef long long li;
typedef long double ld;
typedef pair <int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld PI = acosl(ld(-1));
const ld EPS = 1e-9;

template <typename T> inline T sqr(const T& x) {
	return x * x;
}

template <typename T> inline T abs(const T& x) {
	return x > 0 ? x : -x;
}

inline bool inside(int x, int y, int n, int m) {
	return x >= 0 && x < n && y >= 0 && y < m;
}

inline int rnd() {
	return abs(rand() ^ (rand() << 15));
}

inline int rnd(int n) {
	assert(n > 0);
	return rnd() % n;
}

inline int rnd(int lf, int rg) {
	return lf + rnd(rg - lf + 1);
}

inline li rndLL() {
	return rnd() * 1LL * rnd() + rnd();
}

const int dx[4] = { -1, 0, +1, 0 };
const int dy[4] = { 0, +1, 0, -1 };

const int dx8[8] = { -1, -1, 0, +1, +1, +1, 0, -1 };
const int dy8[8] = { 0, +1, +1, +1, 0, -1, -1, -1 };

const int N = int(2e5) + 555;

int n, m, a[N], c[N], t[N], d[N];

void gen() {
}

void read(int * a, int n) {
	forn(i, n) assert(scanf("%d", &a[i]) == 1);
}

bool read() {
	if (scanf("%d %d", &n, &m) != 2) return false;
	read(a, n);
	read(c, n);
	//read(t, m);
	//read(d, m);
	forn(j, m) assert(scanf("%d %d", &t[j], &d[j]) == 2);
	return true;
}

void solve() {
	//forn(i, n) cerr << a[i] << ' '; cerr << endl;
	//forn(i, n) cerr << c[i] << ' '; cerr << endl;
	set<pt> s;
	forn(i, n) s.insert(pt(c[i], i));
	forn(j, m) {
		int id = t[j];
		int cnt = d[j];
		id--;
		//cerr << "id cnt == " << id << ' ' << cnt << endl;
		int init = min(a[id], cnt);
		auto it = s.find(pt(a[id], id));
		if (it != s.end()) s.erase(it);
		a[id] -= init;
		cnt -= init;
		li ans = init * 1LL * c[id];
		if (a[id]) s.insert(pt(c[id], id));
		//cerr << "left == " << cnt << endl;
		while (!s.empty() && cnt > 0) {
			int pos = s.begin()->y;
			int can = min(a[pos], cnt);
			cnt -= can;
			ans += can * 1LL * c[pos];
			s.erase(s.begin());
			a[pos] -= can;
			if (a[pos]) s.insert(pt(c[pos], pos));
		}

		if (cnt) ans = 0;
		printf("%I64d\n", ans);
	}
}

int main() {
#ifdef _DEBUG
	(freopen("input.txt", "rt", stdin));
	(freopen("output.txt", "wt", stdout));
#endif

	cout << setprecision(15) << fixed;
	cerr << setprecision(15) << fixed;

	int T = 1;
	//T = 10000;

	srand(int(time(NULL)));

	//(scanf("%d", &T) == 1);

	forn(i, T) {
#ifdef _DEBUG
		cerr << "TEST == " << i << endl;
#endif
#ifdef _DEBUG 
		assert(read());
#else
		(read());
#endif
		//cout << "Case #" << i + 1 << ": ";
		solve();
#ifdef _DEBUG
		cerr << "curTime == " << clock() << " ms" << endl;
#endif
		//break;
	}

#ifdef _DEBUG
	cerr << "TIME == " << clock() << " ms" << endl;
#endif
	return 0;
}