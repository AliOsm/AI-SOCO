#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define ull unsigned long long
#define ld long double
#define endl '\n'
#define TIME 1.0*clock()/CLOCKS_PER_SEC
#define pii pair < int32_t , int32_t >


#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("-O3")

using namespace std;


mt19937 gen(chrono::system_clock::now().time_since_epoch().count());

const ll mod = 998244353 ;
const int32_t FFTM = 998244353;
const int32_t N = 1e3 + 5;

int32_t SX[4] = {0 , 1 , -1 , 0};
int32_t SY[4] = {1 , 0 , 0 , -1};

int kol = 0;

void solve(){
    string s, t, p;
    cin >> s >> t >> p;
    int n = int(s.size());
    int m = int(t.size());
    if (n > m){
        cout << "NO" << endl;
        return;
    }
    int pos = 0;
    vector < bool > use(m, 0);
    int kol = 0;
    for (int i = 0;i < n; ++i){
        char c = s[i];
        if (c == t[pos]){
            use[pos] = 1;
            pos++;
            kol++;
            continue;
        }
        while(pos < m && t[pos] != c)pos++;
        if (pos == m)break;
        if (t[pos] == c){
            pos++;
            use[pos - 1]= 1;
            kol++;
        }
    }
    if (kol != n){
        cout << "NO" << endl;
        return;
    }
    multiset < char > need;
    for (int i = 0;i < m; ++i){
        if (!use[i])need.insert(t[i]);
    }
    for (int i = 0;i < int(p.size()); ++i){
        if (need.count(p[i]))need.erase(need.find(p[i]));
    }
    if (need.size() == 0)cout << "YES" << endl;
    else cout << "NO" << endl;
    return;
}

int32_t  main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#endif
    int q;
    cin >> q;
    for (int i = 0;i < q; ++i)solve();
    return 0;
}
