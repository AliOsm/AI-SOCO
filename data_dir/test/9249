
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
bool Marked[100005];
int Dist[100005] , Extra[100005] , Ans = 0;
vector<int> Graph[100005] , Prefix[100005] , Suffix[100005];
	
void dfs( int root , int parent ){
	if( int(Graph[root].size()) == 1 && parent == 0 ) Dist[root] = 0;

	for( int i = 0 ; i < int(Graph[root].size()) ; ++i ){
		if( Graph[root][i] != parent ){
			dfs( Graph[root][i] , root );

			if( Marked[Graph[root][i]] == true ) Prefix[root][i + 1] = Dist[Graph[root][i]] + 1;
			else{
				if( Dist[Graph[root][i]] == 0 ) Prefix[root][i + 1] = 0;
				else Prefix[root][i + 1] = Dist[Graph[root][i]] + 1;
			}
		}
		else Prefix[root][i + 1] = 0;
	}

	Suffix[root][Graph[root].size() + 1] = 0;
	Prefix[root][0] = 0;

	for( int i = int(Graph[root].size()) ; i >= 1 ; --i )
		Suffix[root][i] = max( Prefix[root][i] , Suffix[root][i + 1] );
	for( int i = 1 ; i <= int(Graph[root].size()) ; ++i )
		Prefix[root][i] = max( Prefix[root][i] , Prefix[root][i - 1] );

	Dist[root] = Prefix[root][Graph[root].size()];
}

void query( int root , int parent , int d , int index ){
	int i , x , y;

	if( Extra[parent] == 0 ){
		if( Marked[parent] == true ) x = 1;
		else x = 0;
	}
	else x = Extra[parent] + 1;

	y = max( Prefix[parent][index] , Suffix[parent][index + 2] );
	if( y != 0 ) ++y;
	Extra[root] = max( x , y );
	y = max( x , max( y , Dist[root] ) );
	if( y <= d ) ++Ans;

	for( i = 0 ; i < int(Graph[root].size()) ; ++i ){
		if( Graph[root][i] != parent )
			query( Graph[root][i] , root , d , i );
	}
}

int main(){
	int N , m , d , i , u , v;
	scanf( "%d%d%d" , &N , &m , &d );
	int Num;

	for( i = 1 ; i <= m ; ++i ){
		scanf( "%d" , &Num );
		Marked[Num] = true;
	}

	for( i = 2 ; i <= N ; ++i ){
		scanf( "%d%d" , &u , &v );
		Graph[u].emplace_back( v );
		Graph[v].emplace_back( u );
	}	

	if( d == 0 ){
		if( m == 1 ) puts( "1" );
		else puts( "0" );
		return 0;
	}

	for( i = 1 ; i <= N ; ++i ){
		Prefix[i].reserve(int(Graph[i].size()) + 2 );
		Suffix[i].reserve(int(Graph[i].size()) + 2 );
	}

	dfs( 1 , 0 );
	Extra[1] = 0;
	
	if( Prefix[1][Graph[1].size()] <= d ) ++Ans;
	
	for( i = 0 ; i < int(Graph[1].size()) ; ++i )
		query( Graph[1][i] , 1 , d , i );

	printf( "%d\n" , Ans );
	return 0;
}