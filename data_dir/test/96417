#include <iostream>
#include <string>
#include <cstdio>
#include <algorithm>
#include <cstdlib>
#include <vector>
#include <stack>
using namespace std;

void func(string s1,string s2,int data[26][26])
{
    int i=0;
    while(s1[i]==s2[i])
        i++;
    if(s1[i]==0)
        return ;
    if(s2[i]==0){
        cout<<"Impossible"<<endl;
        exit(0);
    }
    data[(int)(s1[i]-'a')][(int)(s2[i]-'a')]=1;
    return ;
}


void matrix_to_list(int v,int *matrix[], vector<vector<int> > &graph)
{
    int i;
    for(i=0;i<v;i++){
        vector<int> temp;
        for(int j=0;j<v;j++){
            if(matrix[i*v+j]){
                temp.push_back(j);
            }
        }
        graph.push_back(temp);
    }
    return ;
}

void topo_dfs(stack<int> &ans,vector< vector<int> > graph,bool visited[],bool is_stacked[],int pos)
{
    if(visited[pos] && !is_stacked[pos]){
        cout<<"Impossible"<<endl;
        exit(0);
    }
    if(visited[pos])
        return ;
    visited[pos]=true;
    int i,len=graph[pos].size();
    for(i=0;i<len;i++){
        topo_dfs(ans,graph,visited,is_stacked,graph[pos][i]);
    }
    is_stacked[pos]=true;
    ans.push(pos);
    return ;
}


void topological_sort(stack<int> &ans,vector< vector<int> > graph)
{
    bool is_stacked[graph.size()],visited[graph.size()];
    int i;
    for(i=0;i<graph.size();i++)
        is_stacked[i]=visited[i]=false;
    for(i=0;i<graph.size();i++)
        topo_dfs(ans,graph,visited,is_stacked,i);
}

int main()
{
    //freopen("input.txt","r",stdin);
    int i,j;
    int data[26][26];
    for(i=0;i<26;i++)
        for(j=0;j<26;j++)
            data[i][j]=0;
    int n;
    cin>>n;
    string total[n];
    for(i=0;i<n;i++)
        cin>>total[i];
    for(i=0;i<n-1;i++){
        func(total[i],total[i+1],data);
    }
    vector< vector<int> > graph;
    matrix_to_list(26,(int **)data,graph);
    stack<int> ans;
    topological_sort(ans,graph);
    while(!ans.empty()){
        cout<<(char)(ans.top()+'a');
        ans.pop();
    }
    cout<<endl;
    return 0;
}
