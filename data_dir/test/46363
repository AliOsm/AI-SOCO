//Author : Siriuslight
#include "bits/stdc++.h"
#include "ext/pb_ds/assoc_container.hpp"
#include "ext/pb_ds/tree_policy.hpp"
#define FIO ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0),cout<<setprecision(10)<<fixed;
#define F first
#define S second

using namespace std;
using namespace __gnu_pbds;

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ','); cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

typedef long long ll;
typedef long double ld;
typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const ll inf = 1e9+100, N = 50+5;
const ll INF = 1e18+100, MOD = 1e9+7;

ll powmod(ll a,ll b,ll m=MOD){ll r=1;while(b>0){if(b&1)r=r*a%m;a=a*a%m;b>>=1;}return r;}
ll power(ll a,ll b){ll r=1;while(b>0){if(b&1)r=r*a;a=a*a;b>>=1;}return r;}
ll gcd(ll a,ll b){if(!b)return a;return gcd(b,a%b);}
ll inv(ll a, ll m = MOD){return powmod(a,m-2,m);}
ll lcm(ll a,ll b){return(a*b)/gcd(a,b);}

//ordered_set X;
//X.insert(3);
//X.order_of_key(3) no of elements less than 3
//*X.find_by_order(n) nth greatest element(0-indexed) 

ll n, sx, sy, ddx, ddy, ans = INF;
char g[N][N];
bool vis[N][N];
vector <pair<ll,ll> > v[2];
int dx[4] = {0, 0, -1, 1};
int dy[4] = {1, -1, 0, 0};

bool valid(int x, int y){
	return (1 <= x && x <= n && 1 <= y && y <= n && !vis[x][y] && g[x][y] == '0');
}

void dfs(int x, int y, int f){
	vis[x][y] = true;
	v[f].push_back({x, y});
	for(int i = 0; i < 4; ++i){
		if(valid(x + dx[i], y + dy[i])){
			vis[x + dx[i]][y + dy[i]] = true;
			dfs(x + dx[i], y + dy[i], f);
		}
	}
}

int main(){
	FIO;
	cin >> n;
	cin >> sx >> sy >> ddx >> ddy;
	for(int i = 1; i <= n; ++i){
		for(int j = 1; j <= n; ++j){
			cin >> g[i][j];
		}
	}
	dfs(sx, sy, 0);
	memset(vis, 0, sizeof(vis));
	dfs(ddx, ddy, 1);
	for(auto x : v[0]){
		for(auto y : v[1]){
			ans = min(ans, (x.F - y.F) * (x.F - y.F) + (x.S - y.S) * (x.S - y.S)); 
		}
	}
	cout << ans;
}
