#include <iomanip>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <ctime>
#include <cstdio>
#include <cmath>
#include <queue>
#include <bitset>
#include <string>
 
#define ll long long
#define mp make_pair
#define pb push_back
 
using namespace std;
 
const int N = 300010;
const int MOD = 998244353; 
const ll INF = 2e18;
const int mx = 60;
 
int n;
pair<ll, int> a[N];
ll ans[N];
vector <ll> p[N];
int pt[N];
ll dp[N];
 
bool check(ll x, ll y) {
    return x < INF / y;
}
 
ll f(ll x) {
    ll l = 0, r = 1e9+1;
    while (l + 1 < r) {
        ll m = (l + r) / 2;
        if (m * m <= x) l = m;
        else r = m - 1;
    }
    if (r * r <= x) return r;
    return l;
}
 
ll solve(ll x, int k) {
    if (k == 1) return x - 1;
    if (k == 2) return f(x) - 1;
    while (pt[k] + 1 < p[k].size() && p[k][pt[k] + 1] <= x) pt[k]++;
    return pt[k];
}
 
int main() {
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) scanf("%I64d", &a[i].first);
    for (int i = 1; i <= n; i++) a[i].second = i;
    sort(a + 1, a + n + 1);
    for (int i = 3; i <= mx; i++) {
        ll x = 1;
        while (true) {
            ll t = 1;
            bool ok = true;
            for (int j = 1; j <= i; j++) {
                if (!check(t, x)) {
                    ok = false;
                    break;
                }
                t *= x;
            }
            if (ok) p[i].pb(t);
            else break;
            x++;
        }
    }
    for (int i = 1; i <= n; i++) {
        ll x = a[i].first;
        int j = a[i].second;
        for (int j = 1; j <= mx; j++) dp[j] = 0;
        for (int j = mx; j >= 1; j--) {
            dp[j] = solve(x, j);
            for (int k = 2 * j; k <= mx; k += j) dp[j] -= dp[k];
            //cout << x << " " << j << " " << dp[j] << endl;
        }
        ans[j] = dp[1];
    }
    for (int i = 1; i <= n; i++) printf("%I64d\n", ans[i]);
	return 0;
}
