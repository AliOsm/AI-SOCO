#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;*/
#define itn int
#define all(c) c.begin(),c.end()
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define ll long long
#define pll pair<ll, ll>
#define mp(x, y) make_pair(x, y)
using namespace std;

const ll N = 3e5 + 5, inf = 1e18, mod = 998244353 ;
const double PI = 3.1415926536;
int days[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

ll fact(ll n) {
    n = abs(n);
    ll t = 0;
    for (ll i = 1; i * i <= n; i++) {
        if (n % i == 0) {
            t++;
            if (n / (n / i) != n / i) t++;
        }
    }
    return t;
}

inline ll getPow(ll a,ll b) {
    ll res = 1ll, tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
       }
       tp *= tp;
       tp %= mod; res %= mod;
       b >>= 1ll;
    }
    return res;
}

ll vec_mult(const pll & t1, const pll & t2, const pll & t3) {
   const ll & x1 = t1.first, y1 = t1.second;
   const ll & x2 = t2.first, y2 = t2.second;
   const ll & x3 = t3.first, y3 = t3.second;
   return abs((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}

void ok() {
   cout << "YES" << endl;
   exit(0);
}

void no() {
   cout << "NO" << endl;
   exit(0);
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    ll n = nxt();
    vector<pll> q;
    for (int i = 0; i < n; i++) {
        ll x = nxt(), y = nxt();
        q.push_back({x, y});
    }
    ll f = 1, te = 1, te2 = 1;
    ll fact[n + 1];
    fact[0] = 1;
    for (ll i = 1; i <= n; i++) {
        fact[i] = fact[i - 1] * i % mod;
    }
    
    {
        map<ll, vector<ll>> mp;
        for (int i = 0; i < n; i++) {
            ll x = q[i].first, y = q[i].second;
            q.push_back({x, y});
            mp[x].push_back(y);
        }


        for (auto x : mp) {
            te *= fact[x.second.size()];
            te %= mod;
        }
        ll l = -1, r = -1;
        for (auto x : mp) {
            ll L = *min_element(all(x.second));
            ll R = *max_element(all(x.second));

            if (L >= r) {
                l = L;
                r = R;
            } else {
                f = 0;
            }
        }

        for (auto x : mp) {
            map<ll, ll> tmp;
            for (auto y : x.second) {
                tmp[y]++;
            }
            for (auto y : tmp) {
                f *= fact[y.second];
                f %= mod;
            }
        }
    }

    {
        map<ll, vector<ll>> mp;
        for (int i = 0; i < n; i++) {
            ll x = q[i].second, y = q[i].first;
            q.push_back({x, y});
            mp[x].push_back(y);
        }

        for (auto x : mp) {
            te2 *= fact[x.second.size()];
            te2 %= mod;
        }

    }
    ll cur_ans = fact[n];
    cur_ans -= (te + te2 - f) % mod;
    cur_ans += mod;
    cout << cur_ans % mod;

}
