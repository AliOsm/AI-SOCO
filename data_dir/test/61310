#include <bits/stdc++.h>
#define endl '\n'
using namespace std;
typedef long long ll;
#define N 200'000
int n, m;
struct edge { int u, v, w; };
vector<edge> adj[N+1];
void link(int u, int v, int w) {
    adj[u].push_back({u, v, w});
    adj[v].push_back({v, u, w});
}
bool vis[N+1];
int d[N+1];
int p[N+1];
void sssp(int s) {
    fill(vis, vis + n + 1, false);
    fill(d, d + n + 1, -1);
    fill(p, p + n + 1, -1);
    d[s] = 0;
    priority_queue<pair<int, int>> pq;
    pq.push({-d[s], s});
    while(not pq.empty()) {
        int u = pq.top().second; pq.pop();
        if(not vis[u]) {
            vis[u] = true;
            for(const edge& e : adj[u]) {
                if(not vis[e.v] and (d[e.v] > d[u] + e.w or d[e.v] == -1)) {
                    d[e.v] = d[u] + e.w;
                    p[e.v] = u;
                    pq.push({-d[e.v], e.v});
                }
            }
        }
    }
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> m;
    for(int i = 0; i < m; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        link(u, v, w);
    }
    sssp(1);
    if(d[n] == -1) {
        cout << -1 << endl;
    } else {
        vector<int> path;
        while(n != -1) {
            path.push_back(n);
            n = p[n];
        }
        reverse(path.begin(), path.end());
        for(int u : path) {
            cout << u << " ";
        }
    }
    return 0;
}
