#include <iostream>
#include <iomanip>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <complex>
#include <map>
#include<unordered_map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include<bitset>
#include<deque>
#include<string>
#include<list>
#include<iterator>
#include<sstream>
#include <algorithm>
#include <numeric>
#include <math.h>

#define lli long long int
#define ld long double
#define ff first
#define ss second
#define lower(a) transform(a.begin(),a.end(),a.begin(),::tolower);

using namespace std;

const int N = 3e5 + 500;
const long long mod = 1e9 + 7;
const long long cmod = 998244353 ;
const long long inf = 1LL << 61;
const int M = 1e6 + 500;
const lli ths = 1LL << 40;
const int NN = 5e3 + 6;

lli dp[1003][1003];
bool ok[1003][1003];

void solve()
{
    lli n, m;
    cin>>n>>m;
    lli a[n];
    for(int i = 0;i < n; i ++)  cin>>a[i];

    if(n > m) {
        cout<<"YES";
        return ;
    }
    for(int i = 0; i <= n; i ++ ) {
        dp[i][0] = 1;
    }
    for(int i = 0; i < n; i ++) {
        for(int j = 0; j <= m; j ++) {
            if(dp[i][j] >= 1) {
                dp[i + 1][(j + a[i]) % m] += 1;
                if(dp[i][j] > 1 || j != 0)
                    dp[i + 1][j] += 1;
            }
        }
    }
//    for(int i = 0; i <= n; i ++) {
//        for(int j = 0 ; j <= m; j ++) {
//            cout<<dp[i][j] <<' ';
//        }
//        cout<<endl;
//    }
    bool ok = 0;
    for(int i = 0; i <= n; i ++) {
        if(dp[i][0] > 1)
            ok = 1;
    }
    if(ok)
        cout<<"YES";
    else
        cout<<"NO";
    cout<<'\n';
    return ;
}



/*
*/

int main()
{
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);

    int t = 1;
//    cin>>t;
    while(t --)
    {
        solve();
    }
    return 0;
}
