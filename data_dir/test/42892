#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (ll) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
// using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <ll, ll> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

//template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
//template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
//template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const ll inf = numeric_limits <ll>::max() >> 1;
ll n, tc;

void input() {
    cin >> n;
}

inline ll log4(ll x) {
    return (63 - __builtin_clzll(x)) / 2;
}

inline ll f(ll ind, ll len) {
    ll res = 3;
    vec <ll> digits;
    for(ll i = 0; i < len; ++i) {
        digits.pb(ind & 3);
        ind /= 4;
    }
    reverse(all(digits));
    for(ll i = 0; i < len; ++i) {
        res *= 4;
        if(digits[i] % 4 == 0) {
            res += 0;
        } else if(digits[i] % 4 == 1) {
            res += 3;
        } else if(digits[i] % 4 == 2) {
            res += 1;
        } else {
            res += 2;
        }
    }
    return res;
}

void solve() {
    ll y = 1ll << 2 * log4(n);
    ll a = y + (n - y) / 3;
    if(n % 3 == 1) {
        cout << a << "\n";
    } else if(n % 3 == 2) {
        cout << (a ^ f((n - y) / 3, log4(n))) << "\n";
    } else {
        cout << f((n - y) / 3, log4(n)) << "\n";
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    cin >> tc;
    while(tc--) {
        input();
        solve();
    }
}
