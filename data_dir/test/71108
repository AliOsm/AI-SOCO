#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define LOG1(a)    cerr<< #a << " = " << (a) << "\n"
#define LOG2(a, b) cerr<< #a << " = " << (a) << ", " << #b << " = " << (b) << "\n"
#define endl "\n"
#define sz(a) (int)(a.size())
#define all(a) a.begin(), a.end()

typedef long long int ll;
typedef pair<int, int> pii;
typedef vector<pii> vii;
typedef vector<int> vi;
typedef vector<ll> vll;

const ll INF = 1e18;
const ll inf = 1e9;
const ll MOD = 1e9 + 7;
const ll nax = 200000 + 10;

int n, arr[nax], nex[nax][6];
int dp[nax][6];

int solve(int idx, int prevnum)
{
    if(idx == n + 1) return true;
    if(dp[idx][prevnum] != -1) return dp[idx][prevnum];
    dp[idx][prevnum] = 0;

    if(arr[idx] == arr[idx - 1])
    {
        for(int i = 1; i <= 5; i++)
        {
            if(i == prevnum) continue;
            if(solve(idx + 1, i))
            {
                nex[idx][prevnum] = i;
                return dp[idx][prevnum] = 1;
            }
        }
    }
    if(arr[idx] > arr[idx - 1])
    {
        for(int i = prevnum + 1; i <= 5; i++)
        {
            if(solve(idx + 1, i))
            {
                nex[idx][prevnum] = i;
                return dp[idx][prevnum] = 1;
            }
        }
    }
     if(arr[idx] < arr[idx - 1])
    {
        for(int i = prevnum - 1; i > 0; i--)
        {
            if(solve(idx + 1, i))
            {
                nex[idx][prevnum] = i;
                return dp[idx][prevnum] = 1;
            }
        }
    }
    return dp[idx][prevnum];
}
int main()
{
    ios::sync_with_stdio(0);
    cin >> n;
    for(int i = 1; i <= n; i++)
    {
        cin >> arr[i];
    }
    if(n == 1)
    {
        cout << 1 << endl;
        return 0;
    }
    memset(dp, -1, sizeof(dp));
    for(int i = 1; i <= 5; i++)
    {
        if(solve(2, i))
        {
            cout << i << " ";
            int curpos = i;
            for(int j = 2; j <= n; j++)
            {
                cout << nex[j][curpos] << " ";
                curpos = nex[j][curpos];
            }
            cout << endl;
            return 0;
        }
    }
    cout << -1;
    return 0;
    return 0;
}
