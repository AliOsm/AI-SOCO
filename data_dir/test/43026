#include <bits/stdc++.h>
using namespace std;

struct node {
	int v, w;
};

struct edge {
	int u, v, w;
};

int tc, n;
long long least, most;

vector<int> cnt, dalam;
vector<bool> visited;
vector<edge> e;
vector<vector<node>> adj;

void dfs(int u, int par, int depth, long long val) {
	visited[u] = 1;
	cnt[u] = 1;
	dalam[u] = depth;

	for (auto nxt : adj[u]) {
		if (nxt.v != par) {
			dfs(nxt.v, u, depth + 1, val + nxt.w);
			cnt[u] += cnt[nxt.v];
		}
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> tc;
	while (tc--) {
		cin >> n; n *= 2;
		adj.clear();
		e.clear();
		adj.resize(n + 1);
		cnt.assign(n + 1, 0);
		dalam.assign(n + 1, 0);
		visited.assign(n + 1, 0);

		for (int i = 0; i < n - 1; i++) {
			int u, v, w; cin >> u >> v >> w;
			e.push_back({u, v, w});
			adj[u].push_back({v, w});
			adj[v].push_back({u, w});
		}

		least = most = 0;
		dfs(1, 1, 0, 0);

		for (int i = 0; i < n - 1; i++) {
			int u = e[i].u, v = e[i].v, w = e[i].w;
			if (dalam[u] > dalam[v]) swap(u, v);

			most += (long long) min(n - cnt[v], cnt[v]) * w;
			least += (long long) (min(n - cnt[v], cnt[v]) % 2) * w;
		}

		cout << least << ' ' << most << '\n';
	}

	return 0;
}