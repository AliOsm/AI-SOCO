//#pragma GCC optimise("Ofast,unroll-loops,no-stack-protector,fast-math");
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,abm,mmx,popcnt,avx,avx2,tune=native")
          
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
          
using namespace std;
using namespace __gnu_pbds;
          
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
          
using matrix = vector<vector<ll>>;
template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
          
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
//#define int long long
 
void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifndef _offline
    //freopen("highways.in", "r", stdin);
    //freopen("highways.out", "w", stdout);
    #endif
}

const int MAXN = 1e5 + 100;
ll row[MAXN], col[MAXN];

signed main() {
    FAST_IO();
    int n, m;
    cin >> n >> m;
    vector<vector<int>> a(n, vector<int>(m));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            cin >> a[i][j];
            row[i] += a[i][j];
            col[j] += a[i][j];
        }
    }
    ll ans = 0, cur = 0;
    vector<ll> rows(n), cols(m);
    for (int i = 0; i < n; ++i) {
        rows[i] = row[i];
    }
    for (int i = 0; i < m; ++i) {
        cols[i] = col[i];
    }
    for (int j = 0; j < 4; ++j) {
        int pos = -1;
        for (int i = 0; i < n; ++i) {
            if (pos == -1 || rows[i] > rows[pos]) {
                pos = i;
            }
        }
        cur += rows[pos];
        rows[pos] = 0;
    }
    ans = cur;
    cur = 0;
    for (int j = 0; j < 4; ++j) {
        int pos = -1;
        for (int i = 0; i < m; ++i) {
            if (pos == -1 || cols[i] > cols[pos]) {
                pos = i;
            }
        }
        cur += cols[pos];
        cols[pos] = 0;
    }
    ans = max(ans, cur);
    cur = 0;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            cols[j] = col[j] - a[i][j];
        }
        cur = row[i];
        for (int k = 0; k < 3; ++k) {
            int pos = -1;
            for (int j = 0; j < m; ++j) {
                if (pos == -1 || cols[j] > cols[pos]) {
                    pos = j;
                }
            }
            cur += cols[pos];
            cols[pos] = 0;
        }
        ans = max(ans, cur);
    }
    for (int j = 0; j < m; ++j) {
        for (int i = 0; i < n; ++i) {
            rows[i] = row[i] - a[i][j];
        }
        cur = col[j];
        for (int k = 0; k < 3; ++k) {
            int pos = -1;
            for (int i = 0; i < n; ++i) {
                if (pos == -1 || rows[i] > rows[pos]) {
                    pos = i;
                }
            }
            cur += rows[pos];
            rows[pos] = 0;
        }
        ans = max(ans, cur);
    }
    if (n < m) {
        vector<pll> mx(n * n, (pll){0, 0});
        for (int j = 0; j < m; ++j) {
            for (int i1 = 0; i1 < n; ++i1) {
                for (int i2 = i1 + 1; i2 < n; ++i2) {
                    int id = i1 * n + i2;
                    ll val = col[j] - a[i1][j] - a[i2][j];
                    if (val > mx[id].first) {
                        mx[id].second = mx[id].first;
                        mx[id].first = val;
                    }
                    else if (val > mx[id].second) {
                        mx[id].second = val;
                    }
                }
            }
        }
        for (int i1 = 0; i1 < n; ++i1) {
            for (int i2 = i1 + 1; i2 < n; ++i2) {
                int id = i1 * n + i2;
                ans = max(ans, row[i1] + row[i2] + mx[id].first + mx[id].second);
            }
        }
    }
    else {
        vector<pll> mx(m * m, (pll){0, 0});
        for (int i = 0; i < n; ++i) {
            for (int j1 = 0; j1 < m; ++j1) {
                for (int j2 = j1 + 1; j2 < m; ++j2) {
                    int id = j1 * m + j2;
                    ll val = row[i] - a[i][j1] - a[i][j2];
                    if (val > mx[id].first) {
                        mx[id].second = mx[id].first;
                        mx[id].first = val;
                    }
                    else if (val > mx[id].second) {
                        mx[id].second = val;
                    }
                }
            }
        }
        for (int j1 = 0; j1 < m; ++j1) {
            for (int j2 = j1 + 1; j2 < m; ++j2) {
                int id = j1 * m + j2;
                ans = max(ans, col[j1] + col[j2] + mx[id].first + mx[id].second);
            }
        }
    }
    cout << ans << '\n';
}