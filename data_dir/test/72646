// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int N = 1010;

int n;
VI child[N];

bool isp(int x) {
  for (int i = 2; i*i <= x; ++i)
    if (x%i == 0)
      return false;
  return true;
}

int main() {
  init_ios();
  cin >> n;
  for (int i = 1; i < n; ++i)
    child[i].PB(i+1);
  child[n].PB(1);
  int hm = n;
  int cur = 1;
  while (!isp(hm)) {
    ++hm;
    child[cur].PB(cur+(n/2));
    ++cur;
  }
  cout<<hm<<"\n";
  for (int i = 1; i <= n; ++i)
    for (int x: child[i])
      cout<<i<<" "<<x<<"\n";
}