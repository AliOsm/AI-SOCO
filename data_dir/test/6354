#include <stdio.h>
#include <iostream>
#include <vector>
#include <algorithm>
#include <assert.h>
#include <queue>
#include <map>
#include <string.h>
#include <string>
#include <set>
#include <memory.h>
#include <functional> 
using namespace std;
#define ll long long
const ll inf = 2e18;
const int N = 2e5 + 15;
vector<int> adj[N];

ll sz[N][2], dp[N][2];

void dfs2(ll &ret, int node, int par, ll zero, ll one, ll sz0, ll sz1) {
	ret += zero + one + dp[node][0] + dp[node][1];
	sz0 += sz[node][0], sz1 += sz[node][1];
	zero += dp[node][0];
	one += dp[node][1];

	for (int i = 0; i < adj[node].size(); ++i) {
		int ch = adj[node][i];
		if (ch == par) {
			continue;
		}
		sz0 -= sz[ch][1];
		sz1 -= sz[ch][0];
		one -= dp[ch][0] + sz[ch][0];
		zero -= dp[ch][1];
		dfs2(ret, ch, node, one, zero + sz0, sz1, sz0);


		sz0 += sz[ch][1];
		sz1 += sz[ch][0];
		one += dp[ch][0] + sz[ch][0];
		zero += dp[ch][1];
	}
}

void dfs(int node, int par) {
	dp[node][0] = 0;
	dp[node][1] = 0;
	sz[node][0] = 1;
	for (int i = 0; i < adj[node].size(); ++i) {
		int ch = adj[node][i];
		if (ch == par) {
			continue;
		}
		dfs(ch, node);
		sz[node][0] += sz[ch][1];
		sz[node][1] += sz[ch][0];
		dp[node][1] += dp[ch][0] + sz[ch][0];
		dp[node][0] += dp[ch][1];
	}
}

void solve() {
	int n;
	scanf("%d ", &n);
	for (int i = 0; i < n - 1; ++i) {
		int a, b;
		scanf("%d %d", &a, &b);
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	dfs(1, 0);
	ll ret = 0;
	dfs2(ret, 1, 0, 0, 0, 0, 0);
	assert(ret % 2 == 0);
	cout << ret/2 << endl;
}

int main() {
	//freopen("input.txt", "r", stdin);
	solve();
}