#ifdef DEBUG
#define _GLIBCXX_DEBUG
#endif

#include <bits/stdc++.h>

using namespace std;

mt19937 mrand(random_device{} ()); 

int rnd(int x) {
  return mrand() % x;
}

typedef long double ld;
typedef long long ll;

#ifdef DEBUG
#define eprintf(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#else
#define eprintf(...) ;
#endif

#define pb push_back
#define mp make_pair
#define sz(x) ((int) (x).size())
#define TASK "text"

const int inf = (int) 1.01e9;
const ld eps = 1e-9;
const ld pi = acos((ld) -1.0);

const int mod = (int) 1e9 + 7;

void add(int &x, int y) {
  if ((x += y) >= mod) {
    x -= mod;
  }
}

int mult(int x, int y) {
  return (long long) x * y % mod;
}

int myPower(int x, int pw) {
  int res = 1;
  for (; pw; pw >>= 1) {
    if (pw & 1) {
      res = mult(res, x);
    }
    x = mult(x, x);
  }
  return res;
}

void precalc() {
}

const int maxn = (int) 5e3 + 10;

int n, m;

map<string, int> pids;

string vals[maxn];
int opers[maxn][3];

int read() {
  if (scanf("%d%d", &n, &m) < 2) {
    return 0;
  }
  pids.clear();
  for (int i = 0; i < n; ++i) {
    string s;
    cin >> s;
    pids[s] = i;
    scanf(" := ");
    cin >> s;
    if (isdigit(s[0])) {
      vals[i] = s;
    } else {
      vals[i] = "";
      for (int it = 0;; ++it) {
        int &cur = opers[i][it];
        if (s == "?") {
          cur = -1;
        } else {
          cur = pids.at(s);
        }
        if (it) {
          break;
        }
        cin >> s;
        if (s == "AND") {
          opers[i][2] = 0;
        } else {
          if (s == "OR") {
            opers[i][2] = 1;
          } else {
            assert(s == "XOR");
            opers[i][2] = 2;
          }
        }
        cin >> s;
      }
    }
  }
  return 1;
}

int a_[maxn];
int *a = a_ + 1;

void solve() {
  string ans[2];
  for (int i = 0; i < m; ++i) {
    int sums[2];
    for (int b = 0; b < 2; ++b) {
      int &sum = sums[b];

      sum = 0;
      a[-1] = b;

      for (int j = 0; j < n; ++j) {
        //eprintf("i = %d, j = %d\n", i, j);
        if (sz(vals[j])) {
          //eprintf("%s\n", vals[j].c_str());
          a[j] = vals[j][i] - '0';
        } else {
          int bs[2] = {a[opers[j][0]], a[opers[j][1]]};
          switch(opers[j][2]) {
            case 0:
              a[j] = (bs[0] & bs[1]);
              break;
            case 1:
              a[j] = (bs[0] | bs[1]);
              break;
            case 2:
              a[j] = (bs[0] ^ bs[1]);
              break;
            assert(0);
          }
        }
        sum += a[j];
      }
    }
    ans[0] += "0";
    ans[1] += "0";
    if (sums[0] < sums[1]) {
      ans[1].back() += 1;
    }
    if (sums[0] > sums[1]) {
      ans[0].back() += 1;
    }
  }

  printf("%s\n%s\n", ans[0].c_str(), ans[1].c_str());
}

int main() {
  precalc();
#ifdef LOCAL
  freopen(TASK ".out", "w", stdout);
  assert(freopen(TASK ".in", "r", stdin));
#endif

  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("Time %.2f\n", (double) clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
