#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define all(sdk) sdk.begin(),sdk.end()
#define mll map<ll,ll>
#define pb push_back
#define rep(i,a,b) for(ll i=a;i<b;++i)
#define repd(i,a,b) for(ll i=a;i>=b;--i)
#define mit(m) for(map<int, int > :: iterator it=m.begin();it!=m.end();++it)
#define mp make_pair
#define hell 1000000007
#define endl '\n'
#define vvll vector<vector<ll> >
#define vll vector<ll>
#define mint map<int,int> 
#define int long long
#define sll set<int>
#define pll pair<int,int>

const int sz=2e5+5;
int vis[sz],anc[sz],ss[sz],distdown[sz],distup[sz],n,level[sz],duodd[sz],dueven[sz],ddodd[sz],ddeven[sz];
vll adjlist[sz],clist[sz];
void dfs(int node,int par,int h){
    anc[node]=par;
    vis[node]=1;
    level[node]=h;
    for(auto child:adjlist[node]){
        if(!vis[child]){
            dfs(child,node,h+1);
            clist[node].pb(child);
            ddeven[node]+=ddodd[child];
            ddodd[node]+=ddeven[child];
        }
    }
    ddodd[node]+=clist[node].size();
    ss[node]=1;
    for(auto child:clist[node]){
        ss[node]+=ss[child];
        distdown[node]+=distdown[child]+ss[child];
        
    }
}
void dfs2(int node,int par){



    if(node!=1){
        distup[node]+=distup[par]+n-(ss[par]-1);
        distup[node]+=distdown[par]-ss[node]-distdown[node]+ss[par]-ss[node]-1;
        duodd[node]+=dueven[par]+ddeven[par]-ddodd[node];
        duodd[node]++;
        dueven[node]+=duodd[par]+ddodd[par]-ddeven[node]-1;
    }


    for(auto child:clist[node]){
        dfs2(child,node);
    }

}
void solve(){

    cin>>n;
    rep(i,0,n-1){
        int x,y;
        cin>>x>>y;
        adjlist[x].pb(y);
        adjlist[y].pb(x);
    }
    dfs(1,0,1);
    dfs2(1,0);
    
    int ans=0;
    rep(i,1,n+1){

        ans+=(distup[i]+distdown[i]+ddodd[i]+duodd[i])/2;
    }
    cout<<ans/2;
    
}

signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int t=1;
    // cin>>t;
    while(t--){
        solve();
    }
    return 0;
}