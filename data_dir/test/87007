/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class C540 {
private:
    int n, m;
    int dirx[4] = {1, -1, 0, 0};
    int diry[4] = {0, 0, 1, -1};
    bool valid(int r, int c) {
        return r >= 0 && r < n && c >= 0 && c < m;
    }
public:
    void solve(istream& in, ostream& out) {
        in >> n >> m;
        vector<string> g(n);
        for (int i = 0; i < n; ++i) {
            in >> g[i];
        }
        int r1, c1, r2, c2;
        in >> r1 >> c1 >> r2 >> c2;
        --r1; --c1; --r2; --c2;
        
        queue<pair<int, int>> q;
        q.emplace(r1, c1);
        g[r1][c1] = '-';
        while (!q.empty()) {
            int r = q.front().first, c = q.front().second;
            q.pop();
            g[r][c] = 'X';
            
            for (int i = 0; i < 4; ++i) {
                int rr = r + dirx[i], cc = c + diry[i];
                if (valid(rr, cc)) {
                    if (rr == r2 && cc == c2) {
                        if (g[r2][c2] == 'X') {
                            out << "YES\n";
                            return;
                        } else {
                            for (int j = 0; j < 4; ++j) {
                                int rrr = rr + dirx[j], ccc = cc + diry[j];
                                if (valid(rrr, ccc) && g[rrr][ccc] != 'X') {
                                    out << "YES\n";
                                    return;
                                }
                            }
                            out << "NO\n";
                            return;
                        }
                    }
                    if (g[rr][cc] == '.') {
                        q.emplace(rr, cc);
                        g[rr][cc] = '-';
                    }
                }
            }
        }
        out << "NO\n";
    }
};


int main() {
	std::ios::sync_with_stdio(false); cin.tie(nullptr);

	C540 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
