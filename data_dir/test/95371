#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <string>
#include <queue>
#include <stack>
#include <cstring>
#include <iterator>
#include <cmath>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <chrono>
#include <assert.h>

#pragma comment(linker, "/stack:200000000")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

using namespace std;
typedef long long mt;
typedef double fl;

template<typename T>
constexpr mt infValue = std::is_same<T, int>::value ? 2000100007 : 8600000000000000007ll;
template<typename T>
constexpr mt maxValue = std::is_same<T, int>::value ? 1000000007 : 1000000000000000001ll;

#define rep(a, b, i) for(register mt i = a; i < b; ++i)
#define repe(a, b, i) for(register mt i = a; i <= (b); ++i)
#define repd(a, b, i) for(register mt i = a; i > b; --i)
#define repde(a, b, i) for(register mt i = a; i >= b; --i)

const mt INF = infValue<mt>;
const long long MOD = 1000000007ll;//998244353ll;
const double EPS = 1e-6;
const mt MAX = maxValue<mt>;
using pr = pair<mt, mt>;

#define N 64
#define K 10010
#define P 3
#define M (N * N)
#define p2(x) ((((x) * (x)) % (MOD)))
#define mxy(x, y) ((((x) * (y)) % (MOD)))

mt n, k;
mt answ = 1ll;

mt binPow(mt a, mt p) {
	mt r = 1;
	while (p) {
		if (p & 1) r = r * a % MOD;
		a = a * a % MOD;
		p >>= 1;
	}
	return r;
}

mt dp[K][N];
mt compute(mt prime, mt pow) {
	if (pow == 0) return 1;

	dp[0][0] = 1;
	repe(1, pow, i) dp[0][i] = dp[0][i - 1] * prime % MOD;
	repe(1, k, i) {
		dp[i][0] = 1;
		repe(1, pow, j) {
			dp[i][j] = (dp[i - 1][j] + dp[i][j - 1] * j % MOD) * binPow(j + 1, MOD - 2) % MOD;
		}
	}

	return dp[k][pow];
}

int main(void)
{
#ifdef _DEBUG
	freopen("in.txt", "r", stdin);
#endif
	scanf("%lld %d", &n, &k);
	for (mt i = 2; i * i <= n; ++i) {
		mt d = 0;
		while (n % i == 0) n /= i, ++d;
		answ = answ * compute(i, d) % MOD;
	}
	if (n != 1) answ = answ * compute(n, 1) % MOD;
	printf("%lld\n", answ);	

	return 0;
}