/* In The Name Of God */
#include <bits/stdc++.h>

# define xx first
# define yy second
# define pb push_back
# define pp pop_back
# define mp make_pair 
# define eps 1e-9

using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef vector<int> vint;
const int maxn = 4e5+10;
const ll inf = 1e9;
vint v[maxn];
bool mark[maxn],flag[maxn];
int color[maxn],n,m,rang,S,T,DS,DT;
int Sconnect[maxn],Tconnect[maxn],par[maxn];
pair<ll,pii> yal[maxn];
int deg[maxn];
int find_par(int x){return (par[x]<0) ? x : (par[x]=find_par(par[x]));}
inline void dfs(int root,int rang){
	mark[root] = true;
	color[root] = rang;
	for(int i=0 ; i<(int)v[root].size() ; i++)
		if(!mark[v[root][i]] && v[root][i]!=S && v[root][i]!=T)
			dfs(v[root][i],rang);
}
void grow(int l,int tmp){
	for(int i=l ; i<=m ; i++){
		if(yal[i].yy.xx == tmp || yal[i].yy.yy == tmp)
			yal[i].xx = inf*3;
	}
	sort(yal+l,yal+m+1);
}
int main(){
	ios_base::sync_with_stdio (0);cin.tie(0);
	cin>>n>>m;
	for(int i=1 ; i<=m ; i++){
		int u1,u2;
		cin>>u1>>u2;
		v[u1].pb(u2);
		v[u2].pb(u1);
		yal[i] = mp(0,pii(u1,u2));
	}
	cin>>S>>T>>DS>>DT;
	for(int i=1 ; i<=n ; i++)if(!mark[i] && i!=S && i!=T){
		dfs(i,rang);
		rang++;
	}
	for(int i=1 ; i<=m ; i++){
		if(yal[i].yy.xx != S && yal[i].yy.xx != T && yal[i].yy.yy != S && yal[i].yy.yy != T)
			continue;
		if((yal[i].yy.xx == S && yal[i].yy.yy == T) || (yal[i].yy.yy == S && yal[i].yy.xx == T)){
			yal[i].xx = inf*3;
			continue;
		}
		if(yal[i].yy.xx == S)
			Sconnect[color[yal[i].yy.yy]] = true;
		if(yal[i].yy.yy == S)
			Sconnect[color[yal[i].yy.xx]] = true;
		if(yal[i].yy.xx == T)
			Tconnect[color[yal[i].yy.yy]] = true;
		if(yal[i].yy.yy == T)
			Tconnect[color[yal[i].yy.xx]] = true;
	}
	for(int i=1 ; i<=m ; i++){
		if(yal[i].yy.xx != S && yal[i].yy.xx != T && yal[i].yy.yy != S && yal[i].yy.yy != T)
			continue;
		if((yal[i].yy.xx == S && yal[i].yy.yy == T) || (yal[i].yy.yy == S && yal[i].yy.xx == T))
			continue;
		if(yal[i].yy.xx == S || yal[i].yy.xx == T){
			if(Sconnect[color[ yal[i].yy.yy ]] && Tconnect[color[ yal[i].yy.yy ]])
				yal[i].xx = inf*2;
			else
				yal[i].xx = inf;
		}
		if(yal[i].yy.yy == S || yal[i].yy.yy == T){
			if(Sconnect[color[ yal[i].yy.xx ]] && Tconnect[color[ yal[i].yy.xx ]])
				yal[i].xx = inf*2;
			else
				yal[i].xx = inf;
		}
	}
	ll sum=0;
	bool poopi = false;
	memset(par,-1,sizeof par);
	sort(yal+1,yal+m+1);
	for(int i=1 ; i<=m ; i++){
		int u1=yal[i].yy.xx;
		int u2=yal[i].yy.yy;
		int tu1 = u1;
		int tu2 = u2;
		u1=find_par(u1);
		u2=find_par(u2);
		if(u1==u2)continue;
		deg[tu1]++;
		deg[tu2]++;
		sum+=yal[i].xx;
		flag[i] = true;
		if(par[u1]>par[u2])swap(u1,u2);
		par[u1]+=par[u2];
		par[u2]=u1;
		if(deg[S] == DS && !poopi){
			poopi = true;
			grow(i+1,S);
		}
		if(deg[T] == DT && !poopi){
			poopi = true;
			grow(i+1,T);
		}
	}
	if(deg[S] > DS || deg[T] > DT)
		cout<<"No\n";
	else{
		cout<<"Yes\n";
		for(int i=1 ; i<=m ; i++)if(flag[i]){
			cout<<yal[i].yy.xx<<' '<<yal[i].yy.yy<<'\n';	
		}
	}
	return 0;
}
