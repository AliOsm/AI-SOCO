//#include "stdc++.h"
#include<bits/stdc++.h>
#include<iostream>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
using namespace std;
//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//typedef tuple<int, int, int> t3;
typedef long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <ll, int> pli;
typedef pair <db, db> pdd;
typedef vector<int> vi;
#define m1 make_pair
#define pb push_back
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0) return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p; }
#define flush fflush(stdout)
const ll MOD =998244353;
const int INF = 0x3f3f3f3f;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;
void dfs(vector<int> adj[],bool visited[],int u,vector<int>&v1,int d[])
{
    visited[u]=1;
    v1.pb(u);
    for(int i=0;i<adj[u].size();i++)
    {
        if(!visited[adj[u][i]])
        {
            d[adj[u][i]]=1+d[u];
            dfs(adj,visited,adj[u][i],v1,d);
        }
    }
}
void dfs1(vector<int> adj[],int u,int d[],int parent[])
{
    int v;
    for(int i=0;i<adj[u].size();i++)
    {
        v=adj[u][i];
        if(parent[u]!=v)
        {
            d[v]=1+d[u];
            parent[v]=u;
            dfs1(adj,v,d,parent);
        }
    }
}
int main()
{
    IOS;
    int n,m;
    cin>>n>>m;
    int u,v;
    vector<int> adj[n+1];
    for(int i=0;i<m;i++)
    {
        cin>>u>>v;
        adj[u].pb(v);
        adj[v].pb(u);
    }
    bool visited[n+1];
    memset(visited,0,sizeof(visited));
    int d[n+1];int mx=-1;int parent[n+1],mxi;int d1,d2;pair<int,int>p1;pair<int,int>p2;
    set<pair<int,int> >st;
    for(int i=1;i<=n;i++)
    {
        if(!visited[i])
        {
            vector<int>v1;
           // vector<pair<int,int> >d;
            d[i]=0;mxi=i;mx=-1;
            dfs(adj,visited,i,v1,d);
            for(int j=0;j<v1.size();j++)
            {
                if(d[v1[j]]>mx)
                {
                    mx=d[v1[j]];
                    mxi=v1[j];
                }
            }
            d[mxi]=0;
            parent[mxi]=mxi;
            dfs1(adj,mxi,d,parent);mx=-1;
            for(int j=0;j<v1.size();j++)
            {
                if(d[v1[j]]>mx)
                {
                    mx=d[v1[j]];
                    mxi=v1[j];
                }
            }
            int cnt=mx/2;
            int j=1;
            while(cnt>=j)
            {
                mxi=parent[mxi];
                j++;
            }
          st.insert(m1(mx,mxi));
           // cout<<mx<<" "<<mxi<<endl;
        }
    }
    //set<pair<int,int> >::iterator it;
    //it=st.begin();
    //while(it!=st.end())
   // {
   //     cout<<it->first<<" "<<it->second;
   //     it++;
   // }
    if(st.size()==1)
    {
        p1=(*st.begin());
        cout<<p1.first<<endl;
        return 0;
    }
    else
    {
        vector<pair<int,int> >ans;
        while(st.size()>1)
        {
            p1=(*(st.begin()));
            st.erase(st.begin());
            p2=(*(st.rbegin()));
            st.erase(st.find(p2));
            d1=p1.first;
            d2=p2.first;
            u=p1.second;
            v=p2.second;
            mx=max(d1,d2);
            mx=max(mx,(int)(d1+1)/2+(int)(d2+1)/2+1);
            ans.pb(m1(u,v));
            if(mx==d1)
            {
                st.insert(m1(d1,u));
            }
            else if(mx==d2)
            {
                st.insert(m1(d2,v));
            }
            else
            {
               int z1=(d1+1)/2;
                int z2=(d2+1)/2;
                if(z1>=z2)
                {
                    st.insert(m1(mx,u));
                }
                else
                    st.insert(m1(mx,v));
            }
        }
        p1=(*(st.begin()));
        cout<<p1.first<<endl;
        for(int i=0;i<ans.size();i++)
            cout<<ans[i].first<<" "<<ans[i].second<<endl;
    }
    return 0;
}
