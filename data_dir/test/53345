#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include <iostream>
#include <cmath>
#include <iomanip>
#include <string>
#include <cstring>
#include <cstdio>
#include <math.h>
#include <algorithm>
#include <stdio.h>
#include <climits>
#include <stack>
#include <queue>
#include <vector>
#include <set>
#include <sstream>
#include <map>
#include <ctime>
#include <cstdlib>
#include <list>
#include <bitset>
#include <functional>
#include <numeric>
#include <utility>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;

int dx[] = { 1, 1, 0, -1, -1, -1, 0, 1 };
int dy[] = { 0, 1, 1, 1, 0, -1, -1, -1 };

// start + (end - start) / 2;
/*
long long power(long long b, long long Pow){
if (b == 0) return 0;
else if (Pow == 1) return b;
else if (Pow % 2  == 0.0) return power(b*b, Pow / 2);
else return b*power(b*b, Pow / 2);
}*/
/*
int gcd(int a, int b){
if (b == 0)
return a;
return gcd(b, a % b);
}
*/
//int count(ll n){
//  if (!n)return 0;
//  return (((n & 1) == 1 ? 1 : 0) + count(n >> 1));
//}
//void print(ll n){
//  if (!n)return;
//  print(n >> 1);
//  cout << (n & 1);
//}
//int setBit(int num, int idx, int value = 1){
//  return (value) ? (num | (1 << idx)) : (num &~(1 << idx));
//}

int main() {
    int t, s, q;
    cin >> t >> s >> q;
    int a = s, z = 0;
    while (a < t){
        for (int i = 1; i <= a; i++){
            s += q - 1;
            if (s >= t)
                break;
        }
        z++;
        a = s;
    }
    cout << z << "\n";
}