#include <bits/stdc++.h>
#define Tree int h,int l,int r
#define Left (h<<1),l,(l+r)>>1
#define Right ((h<<1)|1),((l+r)>>1)+1,r
#define F first
#define S second
using namespace std;
const int M=1e5+5;
int n,N,idx,id,L,R,a[M],b[M],c[M],d[M],p[M];
int v[30*M];
multiset < pair < int , int > > st[4*M];

void Press() {
  vector < int > s;
  map < int , int > f;
  for (int i=1; i<=n; i++) {
    s.push_back(a[i]);
    s.push_back(b[i]);
    s.push_back(c[i]);
    s.push_back(d[i]);
  }
  s.push_back(0);
  sort(s.begin(),s.end());
  s.erase(unique(s.begin(),s.end()),s.end());
  N=s.size();
  for (int i=0; i<s.size(); i++) 
    f[s[i]]=i+1;
  for (int i=1; i<=n; i++) {
    a[i]=f[a[i]],b[i]=f[b[i]];
    c[i]=f[c[i]],d[i]=f[d[i]];
  }
  return ;
}

void Upd(Tree) {
  if (idx<l || r<idx) return ;
  if (l==idx && r==idx) { v[h]=id; return ; }
  Upd(Left),Upd(Right);
  if (b[v[(h<<1)]]<b[v[((h<<1)|1)]]) 
    v[h]=v[(h<<1)];
      else
    v[h]=v[((h<<1)|1)];
}

int Get(Tree) {
	if (r<L || R<l) return 0;
	if (L<=l && r<=R) return v[h];
	int x=Get(Left),y=Get(Right);
	if (b[x]<b[y]) return x;
	return y;
}

main () {
  scanf("%d",&n);
  for (int i=1; i<=n; i++) 
  	scanf("%d%d%d%d",&a[i],&b[i],&c[i],&d[i]);
  
  Press();
  
  b[0]=1e9,c[0]=d[0]=a[0]=1;
  for (int i=1; i<=n; i++) 
  	st[i].insert({1e9,0});

	for (int i=1; i<=n; i++) 
    st[a[i]].insert({b[i],i});

	for (int i=1; i<=N; i++) {
		if (!st[i].size()) continue;
    idx=i,id=(*st[i].begin()).S;
    Upd(1,1,N);
  }

  queue < int > q;
  q.push(0);
  while (!q.empty()) {
    int x=q.front();
    q.pop();
    
    if (x==n) {
    	vector < int > ans;
    	while (x) {
				ans.push_back(x);
				x=p[x];	
			}
			
    	reverse(ans.begin(),ans.end());
    	printf("%d\n",ans.size());
    	for (int i=0; i<ans.size(); i++) 
    		printf("%d ",ans[i]);
    		printf("\n");
    	return 0;
		}
		
		L=1,R=c[x];
		while (1) {
			id=Get(1,1,N); 
			if (!id) break;
	 		if (b[id]>d[x]) break;
	 		st[a[id]].erase(st[a[id]].find({b[id],id}));
	 		q.push(id),p[id]=x;
	 		idx=a[id],id=(*st[a[id]].begin()).S;
	 		Upd(1,1,N);
		}
  }
  
  printf("-1\n");
  return 0;
}