#include <bits/stdc++.h>
typedef long long ll;
typedef long double ld;
using namespace std;

const int N = 1e6 + 7 ;
deque < int > Q ;
bool big[N];
int sz[N] , res[N];
vector < int > G[N] ;

void dfs(int u , int p){
    sz[u] = 1 ;
    for(auto v : G[u]){
          if(v == p) continue ;
          dfs(v , u);
          sz[u] += sz[v];
    }
}

int maxi = -1 , idx = -1 ;

void add(int u , int p , int d,  int val){

     if(val == -1) Q[d]--;
     else Q[d]++ ;

     if(Q[d] > maxi){
           maxi = Q[d];
           idx = d ;
     }
     else if(Q[d] == maxi && d < idx){
           idx = d ;
     }

	 for(auto v : G[u]){
	 	  if(big[v] || v == p) continue ;
	 	  add(v , u , d + 1 , val);
	 }
}

void dfs(int u , int p , bool keep){

	int mx = -1 , bigChild = -1 ;
	for(auto v : G[u]){
         if(v == p) continue ;
         if(sz[v] > mx) {
         	   mx = sz[v];
         	   bigChild = v;
         }
	}

	for(auto v : G[u]){
         if(v == p || v == bigChild) continue ;
         dfs(v, u, 0);
	}

	if(bigChild != -1){
		 dfs(bigChild, u, 1) , big[bigChild] = 1;
		 Q.push_front(0);
	}

	if(bigChild != -1)  idx ++ ;
	else maxi = -1 , idx = -1;

	add(u , p , 0 , 1);

	res[u] = idx ;

	if(bigChild != -1)
		 big[bigChild] = 0;
	if(keep == 0)
		 add(u, p, 0 , -1);
}


int main() {

    int n ; scanf("%d",&n);

    Q.resize(5 * n , 0);


    for(int i = 0 ; i < n - 1 ; i++){
          int u , v;
          scanf("%d%d",&u,&v);
          G[u].push_back(v);
          G[v].push_back(u);
    }

    dfs(1 , -1);
    dfs(1 , -1 , 0);

    for(int i = 1 ; i <= n ; i++)
        printf("%d\n",res[i]);

    return 0 ;
}


