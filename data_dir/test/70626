#pragma comment(linker,"/STACK:1000000000,1000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <memory.h>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>

using namespace std;

/* Constants begin */
const long long inf = 1e18+7;
const long long mod = 1e9+7;
const double eps = 1e-12;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(), (a).end()
#define forn(i,n) for (ll (i)=0;(i)<(ll)(n);(i)++)
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
/* Defines end */

#define pp pair<ll,ll>

map<pp,pp> f;

pp dfs(ll v, ll d){
    pp ans = mp(0,0);
    if(!v) return ans;
    if(v <= 9){
     ans.F = 1;
     if(v < d) ans.S = d-v;
     return ans;
    }
    pp st = mp(v,d);
    if(f.count(st)) return f[st];
    ll next = 1;
    while(next <= v/10) next *= 10LL;
    while(true){
     ll now = v / next;
     ll nd = max(d,now);
     pp res = dfs(v % next,nd);
     v -= v % next;
     ans.F += res.F;
     if(res.S > 0) v -= res.S; else{
      v -= nd;
      if(nd) ans.F++;
     }
     if(!now) break;
    }
    ans.S = -v;
    return f[st] = ans;
}

int main(void) {
    #ifndef ONLINE_JUDGE
        freopen("input.txt","rt",stdin);
        freopen("output.txt","wt",stdout);
    #endif
    ll n; cin >> n;
    cout << dfs(n,0).F << endl;
    return 0;
}
