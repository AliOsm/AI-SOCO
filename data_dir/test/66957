#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define forq(i , a , b) for (int i = (a); i <= (b); ++i)
#define forr(i , b) forq( i , 0 , b - 1 )
#define F first
#define S second
#define IF -> F
#define IS -> S
#define qqmemset(array , val) memset (array , val , sizeof(array))
#define ALLV(vect) vect.begin() , vect.end()
#define mid (st + en) / 2
#define lef 2 * Node
#define rig lef + 1
#define Parent Node + (Node & (~Node + 1))
#define Neig Node - (Node & (~Node + 1))

ll R = 7 + 1e9 , NUMTESTCASE ;
const int NN = 10 + 1e6 ;
const double pi = acos(-1.0) ;
int di [4] = {1 , 0 , -1 , 0} , dj [4] = {0 , 1 , 0 , -1} , DI [8] = {1 , 1 , 0 , -1 , -1 , -1 , 0 , 1} , DJ [8] = {0 , 1 , 1 , 1 , 0 , -1 , -1 , -1} ;
using namespace std;
vector <int> Lefs , G[NN] ;
int n , Arr [NN] , Dp [2] [NN] ;
void DFS (int Ver , int Par) {
    Dp [1][Ver] = Arr [Ver] ;
    for (int Ch : G [Ver])
        if (Ch ^ Par)
            DFS (Ch , Ver) , Dp[1][Ver] += Dp [1][Ch] >= 0 ? Dp [1][Ch] : 0 ;
}
void DFS2 (int Ver , int Par , int Cnt) {
    Dp [0][Ver] = Cnt ;
    for (int Ch : G [Ver])
        if (Ch ^ Par)
            DFS2(Ch , Ver , max(Cnt + Dp [1][Ver] - max(Dp [1][Ch] , 0) , 0) ) ;
}
int main()
{
    cin >> n ;
    int u , v ;
    forq (i , 1 , n) scanf("%d" , Arr + i) , Arr [i] == 0 ? Arr [i] = -1 : true ;
    forq (i , 1 , n - 1) {
        scanf("%d%d" , &u , &v) ;
        G [u] .pb (v) ;
        G [v] .pb (u) ;
    }
    DFS(1 , 0) ;
    DFS2(1 , 0 , 0) ;
    forq (i , 1, n)
        printf("%d " , Dp [1][i] + Dp[0][i] ) ;
    return 0;
}
