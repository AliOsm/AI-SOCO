#include <algorithm>
#include <iostream>
#include <cstring>
#include <limits>
#include <complex>
#include <cassert>
#include <iomanip>
#include <cstdio>
#include <vector>
#include <string>
#include <stack>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

const int inf = 1e9 + 143;
const long long longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 2020;

const int mod = 1e9 + 7;

void add(int &x,int y){
    x += y;
    if(x >= mod)
        x -= mod;
}

int mul(int x,int y){
    return (long long)x * y % mod;
}

int a[N];
int f[N][N];

int main(){

#ifdef KAZAR
	freopen("f.input","r",stdin);
	freopen("f.output","w",stdout);
	freopen("error","w",stderr);
#else
#endif

    int n = read();
    int h = read();

    for(int i = 1; i <= n; i++){
        a[i] = read();
        if(a[i] > h){
            puts("0");
            return 0;
        }
        a[i] = h - a[i];
    }

    a[0] = a[n + 1] = 0;
    f[0][0] = 1;
    for(int i = 0; i <= n; i++){
        for(int d = 0; d < N; d++){
            if(f[i][d]){
                if(d + 1 == a[i + 1]) add(f[i + 1][d + 1], f[i][d]);
                if(d == a[i + 1]){
                    add(f[i + 1][d], f[i][d]);
                    if(d > 0)
                        add(f[i + 1][d], mul(d, f[i][d]));
                }
                if(d - 1 == a[i + 1]) add(f[i + 1][d - 1], mul(d, f[i][d]));
            }
        }
    }

    printf("%d\n",f[n + 1][0]);

    return 0;
}
