#include <iostream>
#include <memory.h>
#include <string>
#include <stack>

using namespace std;

int main() {
	int n, m, p;
	cin >> n >> m >> p;
	p--;
	string str, order;
	cin >> str >> order;
	int L[n];
	int R[n];
	for(int i=0; i<n; i++) {
		L[i] = i-1;
		R[i] = i+1;
	}
	stack <int> st;
	int address[n];
	for(int i=0; i<n; i++) {
		if(str[i] == '(') st.push(i);
		else {
			int tp = st.top();
			address[tp] = i;
			address[i] = tp;
			st.pop();
		}
	}
	bool del[n];
	memset(del, 0, sizeof del);
	bool f = 0;
	for(int i=0; i<m; i++) {
		if(order[i] == 'L') p = L[p];
		else if(order[i] == 'R') p = R[p];
		else if(order[i] == 'D') {
			del[p] = 1;
			del[address[p]] = 1;
			if(str[p] == '(') {
				int t = R[address[p]];
				if(t == n) t = L[p];
				R[L[p]] = R[address[p]];
				L[R[address[p]]] = L[p];
				p = t;
			}
			else {
				int t = R[p];
				if(t == n) t = L[address[p]];
				R[L[address[p]]] = R[p];
				L[R[p]] = L[address[p]];
				p = t;
			}
		}
	}
	int x = 0;
	while(x < n) {
		if(del[x] == 0) { cout << str[x]; x++; }
		else x = R[address[x]];
	}
	return 0;
}