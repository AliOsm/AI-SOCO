#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> void mini(T &l, T r) {l = min(l, r);}
template <class T> void maxi(T &l, T r) {l = max(l, r);}

template <class T> using Tree = tree <T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

string to_string(string s) {
    return '"' + s + '"';
}

string to_string(bool a) {
    return a ? "T" : "F";
}

string to_string(const char* s) {
    return to_string((string) s);
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
    return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A>
string to_string(A v) {
    bool first = true;
    string res = "{";
    for (const auto &x : v) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(x);
    }
    res += "}";
    return res;
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
    cerr << " " << to_string(H);
    debug_out(T...);
}

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

#define X first
#define Y second

using ll = long long;
using ld = long double;

const int N = 2010;

int n, m;
int a[N], b[N];
ll x;
int da[N], db[N];

void go(int a[], int da[], int n) {
    da[0] = 0;
    for (int i = 1; i <= n; ++i) da[i] = da[i - 1] + a[i];
}

vector < pair <ll, int> > get(int da[], int n) {
    vector < pair <ll, int> > ret;
    for (int l = 1; l <= n; ++l) {
        for (int r = l; r <= n; ++r) {
            ret.emplace_back(da[r] - da[l - 1], r - l + 1);
        }
    }
    return ret;
}

void run() {
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; ++i) {
        scanf("%d", a + i);
    }
    for (int i = 1; i <= m; ++i) {
        scanf("%d", b + i);
    }

    scanf("%lld", &x);
    go(a, da, n);
    go(b, db, m);

    auto va = get(da, n);
    auto vb = get(db, m);

    sort(va.begin(), va.end(), [](pair <ll, int> a, pair <ll, int> b) {return make_pair(a.X, -a.Y) < make_pair(b.X, -b.Y);});
    sort(vb.begin(), vb.end(), [](pair <ll, int> a, pair <ll, int> b) {return make_pair(-a.X, -a.Y) < make_pair(-b.X, -b.Y);});

    int mxl = 0;
    int ans = 0;
    int j = 0;
    for (int i = 0; i < vb.size(); ++i) {
        maxi(ans, mxl * vb[i].Y);
        for (; j < va.size() && va[j].X * vb[i].X <= x; ++j) {
            mxl = max(mxl, va[j].Y);
            maxi(ans, mxl * vb[i].Y);
        }
    }
    printf("%d\n", ans);

}

int main() {
    run();
    return 0;
}
