#include <bits/stdc++.h>

using namespace std;

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<pii, int> para;
const int inf = 1e9 + 7;
const int maxN = 1e3 + 5;
double eps = 1e-4;

int n, m, arr[maxN][maxN];
int leftB[maxN], rightB[maxN], dd = 0;

// 1 lewo, 2 prawo
int solve(int row, int dir) {
	if (row == dd) return 0;
	int ans = 0, pole;
	if (leftB[row] == inf) return solve(row - 1, dir) + 1;
	if (dir == 1) {
		ans = rightB[row] - 1;
		pole = rightB[row];
	}
	else {
		ans = (m + 2) - leftB[row];
		pole = leftB[row];
	}
	//cout<<row<<" "<<dir<<" "<<ans<<" "<<pole<<endl;
	//cout<<solve(row - 1, 1) + pole * (row - 1 != dd)<<" "<<solve(row - 1, 2) + ((m + 3) - pole) * (row - 1!= dd)<<endl;
	return ans + min(solve(row - 1, 1) + pole * (row - 1!= dd), solve(row - 1, 2) + ((m + 3) - pole) * (row - 1!= dd));
}

int main() {
	cin>>n>>m;
	RI(i, n) { // rzÄ…d
		leftB[i] = inf;
		RI(j, m + 2) { // kolumna
			char a;
			cin>>a;
			arr[i][j] = a - '0';
			//cout<<arr[i][j]<<" ";
			if (arr[i][j] == 1) {
				leftB[i] = min(leftB[i], j);
				rightB[i] = j;
			}
		}
		//cout<<leftB[i]<<" "<<rightB[i]<<endl;
	}
	RI(i, n) if (leftB[i] == inf) dd++; else break;
	cout<<solve(n, 1);
	return 0;
}
