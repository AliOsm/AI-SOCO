#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define SPEED ios_base::sync_with_stdio(false); cin.tie(NULL);
#define FOR(i, a, b) for (ll i = a; i < b; ++i)
#define RFOR(i, b, a) for (ll i = b; i >= a; --i)
#define ALL(x) x.begin(), x.end()
#define DEBUG(args...) { string _s = #args; replace(ALL(_s), ' ', '\0');\
replace(ALL(_s), ',', ' ');\
stringstream _ss(_s); istream_iterator<string> _it(_ss); _debug(_it, args);}
#define endl "\n"
#define F first
#define S second
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)

using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

void _debug(istream_iterator<string>) {}
template<typename T, typename... Args>
void _debug(istream_iterator<string> it, T first, Args... args) {
    cerr << ">> " << *it << " : " << first << endl; _debug(++it, args...);
}
template <typename T1, typename T2>
inline ostream& operator << (ostream& out, const pair<T1, T2>& p) {
    return out << "(" << p.F << ", " << p.S << ")";
}
template<typename T>
inline ostream& operator << (ostream& out, const vector<T>& v) {
    if (v.empty()) return out << "[]";
    else { out << '['; for (auto& e : v) { out << e << ", "; } return out << "\b\b]"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const set<T>& s) {
    if (s.empty()) return out << "{}";
    else { out << '{'; for (auto& e : s) { out << e << ", "; } return out << "\b\b}"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const unordered_set<T>& s) {
    return out << set<T>(ALL(s));
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const map<T1, T2>& m) {
    if (m.empty()) return out << "{}";
    out << '{'; for (auto& p : m) { out << p << ", "; } return out << "\b\b}";
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const unordered_map<T1, T2>& m) {
    return out << map<T1, T2>(ALL(m));
}
template<typename T>
inline ostream& operator << (ostream& out, const ordered_set<T>& s) {
    return out << set<T>(ALL(s));
}

typedef long long ll;
typedef long double ld;
typedef vector<long long> vll;
typedef pair<ll, ll> pll;
typedef vector<pair<ll, ll>> vpll;
typedef unordered_map<ll, ll> STll;
/************************************** MAIN PROGRAM ********************************************/
const int MAX = 1e5 + 1;
vector<int> adj[MAX];

vector<int> chain;

void dfs(int v, int u) {
    chain.push_back(v);
    for (int w : adj[v]) {
        if (w == u) continue;
        dfs(w, v);
    }
}

int c1[MAX], c2[MAX], c3[MAX];
const ll INF = 1e18;

int main()
{
  // freopen("input.txt", "r", stdin);
    SPEED
    int n;
    cin >> n;
    FOR(i, 0, n) cin >> c1[i];
    FOR(i, 0, n) cin >> c2[i];
    FOR(i, 0, n) cin >> c3[i];

    FOR(i, 0, n - 1) {
        int u, v;
        cin >> u >> v;
        u--, v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    bool works = true;
    int leaf = 0;
    FOR(v, 0, n) {
        works &= int(adj[v].size()) <= 2;
        if (int(adj[v].size()) == 1) leaf = v;
    }
    if (!works) {
        cout << -1;
        return 0;
    }

    dfs(leaf, leaf);
    assert((int)chain.size() == n);
    ll ans = INF;
    int bestInit = -1;

    vector<int> coloring = {0, 1, 2};
    vector<int> best;
    do {
        ll cur = 0;
        for (int i = 0; i < n; ++i) {
            int color = coloring[i % 3];
            auto v = chain[i];
            switch (color) {
            case 0:
                cur += c1[v];
                break;
            case 1:
                cur += c2[v];
                break;
            case 2:
                cur += c3[v];
                break;
            default:
                assert(false);
            }
        }
        if (ans > cur) {
            ans = cur;
            best = coloring;
        }
       // DEBUG(cur, bestInit)
    } while (next_permutation(ALL(coloring)));

    cout << ans << endl;;
    vector<int> colOf(n);
    for (int i = 0; i < n; ++i) {
        auto color = best[i % 3];
        colOf[chain[i]] = color + 1;
    }
    for (auto e : colOf) {
        cout << e << ' ';
    }
}
/************************************** END OF PROGRAM ******************************************/
/** Stuff you should look for:
 * int overflow, array bounds, over-counting, graph is not a tree/connected
 * special cases (n=1?), set/unordered_set TLE, multi-set/set error
 * do something instead of nothing and stay organized
 */
