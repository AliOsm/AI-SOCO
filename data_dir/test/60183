#include <functional>
#include <algorithm>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <assert.h>
#include <bitset>
#include <string>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <bitset>
#include <map>
using namespace std;

#define int64 long long
#define TASK ""
#define mp make_pair

#ifdef _DEBUG
const int N = 110;
#else
const int N = 310000;
#endif

int n, m, s, ans1[N], ans2[N], t[N];
int res1, res2;
vector <pair<int, pair<int, int> > > g[N];
bool used[N];

void dfs1(int v)
{
    used[v] = true;
    res1++;
    for (int i = 0; i < g[v].size(); i++)
    {
        int num = g[v][i].second.first;
        int u = g[v][i].first;
        if (used[u]) continue;
        if (t[num] == 1)
        {
            dfs1(u);
        }
        else
        {
            ans1[num] = g[v][i].second.second ^ 1;
        }
    }
}

void dfs2(int v)
{
    used[v] = true;
    res2++;
    for (int i = 0; i < g[v].size(); i++)
    {
        int num = g[v][i].second.first;
        int u = g[v][i].first;
        if (used[u]) continue;
        if (t[num] == 2)
        {
            ans2[num] = g[v][i].second.second;
        }
        dfs2(u);
    }
}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
    scanf("%d%d%d", &n, &m, &s);
    for (int i = 1; i <= m; i++)
    {
        int a, b, tp;
        scanf("%d%d%d", &tp, &a, &b);
        t[i] = tp;
        if (tp == 1)
        {
            g[a].push_back(make_pair(b, make_pair(i, 1)));
        }
        else
        {
            g[a].push_back(make_pair(b, make_pair(i, 1)));
            g[b].push_back(make_pair(a, make_pair(i, 0)));
        }
    }
    memset(used, false, sizeof(used));
    for (int i = 1; i <= m; i++) ans1[i] = ans2[i] = 1;
    res1 = 0;
    dfs1(s);
    memset(used, false, sizeof(used));
    res2 = 0;
    dfs2(s);
    printf("%d\n", res2);
    for (int i = 1; i <= m; i++)
    {
        if (t[i] == 2)
        {
            if (ans2[i] == 1) printf("%c", '+');
            else printf("%c", '-');
        }
    }
    printf("\n");
    printf("%d\n", res1);
    for (int i = 1; i <= m; i++)
    {
        if (t[i] == 2)
        {
            if (ans1[i] == 1) printf("%c", '+');
            else printf("%c", '-');
        }
    }
	return 0;
}