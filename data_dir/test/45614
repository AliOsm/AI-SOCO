
#pragma GCC optimize("O3")
#include<queue>
#include <cmath>
#include <complex>
#include<map>
#include <string>
#include<iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <string>
#include <iostream>
#include <stdio.h>
#include<bits/stdc++.h>


/*
#define x real()
#define y imag()
#define angle(a)                (atan2((a).imag(), (a).real()))
#define vec(a,b)                ((b)-(a))
#define same(p1,p2)             (dp(vec(p1,p2),vec(p1,p2)) < EPS)
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel
#define length(a)               (hypot((a).imag(), (a).real()))
#define normalize(a)            (a)/length(a)
//#define polar(r,ang)            ((r)*exp(point(0,ang)))  ==> Already added in c++11
#define rotateO(p,ang)          ((p)*exp(point(0,ang)))
#define rotateA(p,ang,about)  (rotateO(vec(about,p),ang)+about)
#define reflectO(v,m)  (conj((v)/(m))*(m))
*/

//#define pi 3.141592654
#define forr(i,a,b) for(int i=a;i<=b;i++)
#define F first
#define S second
#define input ios_base::sync_with_stdio(0);cin.tie(0);
#define NOT(x) (1^x)

const double PI  = acos(-1.0);
using namespace std;
typedef pair<double,double>pdd;
typedef long long  ll;
typedef pair<ll, ll>pii;
typedef complex<double> point;
//int x[8]={1,0,0,-1,-1,-1,1,1};
//int y[8]={0,1,-1,0,-1,1,-1,1};
const int N=200009,M=1000000;
int n,a[N];
struct node{
    int val;
    node *left,*right;
    node(int s,node *l,node *r)
    {
        val=s,left=l,right=r;
    }
};
node*roots[N];
node* up(int s,int e,int idx,node*root)
{
    node*nw=new node(0,NULL,NULL);
    if(s==e)
    {
        nw->val=a[s];
        return nw ;
    }
    int mid=(s+e)/2;
    if(root->left==NULL)root->left=new node(0,NULL,NULL);
    if(root->right==NULL)root->right=new node(0,NULL,NULL);
    if(idx<=mid)
    {
        nw->right=root->right;
        nw->left=up(s,mid,idx,root->left);
    }
    else
    {
        nw->left=root->left;
        nw->right=up(mid+1,e,idx,root->right);
    }
    nw->val=__gcd(nw->left->val,nw->right->val);
    return nw;
}

int get(int s,int e,node*root,int g)
{
    if(s==e)return s;
    int mid=(s+e)/2;
    if(__gcd(g,root->left->val)==g)return get(mid+1,e,root->right,g);
    else return get(s,mid,root->left,g);
}

 int main()
{
//freopen("travel.in","r",stdin);
//freopen("travel.out","w",stdout);
//__builtin_popcount()
input;
    scanf("%d",&n);
    forr(i,1,n)scanf("%d",&a[i]);

    roots[n+1]=new node(0,NULL,NULL);
    for(int i=n;i>0;i--)
    roots[i]=up(1,n,i,roots[i+1]);

    map<int,ll>ans;
    forr(i,1,n)
    {
        int j=i,g=a[i];
        while(j<=n)
        {
            if(g==1||j==n)
            {
                ans[g]+=n+1-j;
                break;
            }
            int nwpos=get(1,n,roots[j+1],g);
           // cout<<nwpos<<endl;
            ans[g]+=nwpos-j;
            g=__gcd(g,a[nwpos]);
            j=nwpos;
        }
    }
 //   return 0;
    int q,x;
    scanf("%d",&q);
    while(q--)
    {
        scanf("%d",&x);
        printf("%lld\n",ans[x]);
    }





return 0;
}
