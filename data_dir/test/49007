#include <bits/stdc++.h>
using namespace std;
#define MAX 1000010

int P[MAX+1];
int Q[MAX+1];
int R[MAX+1];
int N;
vector <int> C[MAX+1];
pair <int,int> D[MAX+1];
vector <int> K[MAX+1];
void imprime(){
	for(int i=1; i<=N; i++){
		printf("%d",Q[i]);
		if(i<N){
			printf(" ");
		}
		else{
			printf("\n");
		}
	}
}

int main(){
	scanf("%d",&N);
	for(int i=1; i<=N;i++){
		scanf("%d",&P[i]);
		D[i].first=-1;
	}
	for(int i=1,j=0; i<=N;i++){
		if(D[i].first == -1){
			D[i].first = j;
			D[i].second = 0;
			C[j].push_back(i);
			int l=1;
			for(int k = P[i]; k!=i; k=P[k],l++){
				C[j].push_back(k);
				D[k].first=j;
				D[k].second=l;
			}
			if(C[j].size()%2 == 0){
				K[C[j].size()].push_back(j);
				R[j]=K[C[j].size()].size()-1;
			}
			j++;
		}
	}
	for(int i=1; i<=N; i++){
		if(K[i].size()%2==1){
			printf("-1\n");
			return(0);
		}
		int j = C[D[i].first].size();
		if(j%2==1){
			Q[i]=C[D[i].first][(D[i].second+(j+1)/2)% j];
		}
		else{
			int k = R[D[i].first];
			if(k%2==0){
				Q[i]=C[ K[j][ ( R[D[i].first] +1 ) % K[j].size()] ] [( D[i].second +1 )%j];
			}
			else{
				Q[i]=C[ K[j][ ( R[D[i].first] + K[j].size() -1 ) % K[j].size()] ] [D[i].second];
			}
		}
	}
	imprime();
}
