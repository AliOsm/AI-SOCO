#include<bits/stdc++.h>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); ++i)
#define nfor(i, n) for(int i = int(n) - 1; i >= 0; --i)
#define for1(i, n) for(int i = 1; i < int(n); ++i)
#define fork(i, k, n) for(int i = int(k); i <= int(n); ++i)
#define forft(i, from, to) for(int i = int(from); i < int(to); ++i)
#define fore(i, from, to) for(int i = int(from); i < int(to); ++i)
#define forr(i, n) for(int i = int(n) - 1; i >= 0; --i)
#define pb push_back
#define mp make_pair
#define mnp(a, b) make_pair((a) < (b) ? (a) : (b), (a) < (b) ? (b) : (a))
#define sz(d) int(d.size())
#define all(a) a.begin(), a.end()
#define ms(a, v) memset(a, v, sizeof(a))
#define msn(a, v, n) memset(a, v, n * sizeof(a[0]))
#define mcn(dst, src, n) memcpy(dst, src, n * sizeof(src[0]))
#define x first
#define y second
#define correct(x, y, xmax, ymax) ((x) >= 0 && (x) < (xmax) && (y) >= 0 && (y) < (ymax))

template<typename T> T sqr(const T &x) {
    return x * x;
}

template<typename T> T my_abs(const T &x) {
    return x < 0 ? -x : x;
}

typedef long long li;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned long long uli;
typedef long double ld;
typedef pair<int,int> pt;
typedef pair<li,li> pli;
typedef pair<ld,ld> pd;

const int INF = (int)1e9;
const li LINF = (li)4e18;
const li INF64 = LINF;
const li INFLL = LINF;
const ld EPS = 1e-9;
const ld PI = 3.1415926535897932384626433832795;
const int N = 1000 * 1000 + 9;
const int MOD = int(1e9) + 7;

int n;
int a[N];
vector <int> sq;

void solve() {
	cin >> n;
	forn(i, n)
		cin >> a[i];
	
	forn(i, 35 * 1000)
		sq.pb(i * i);
		
	vector <int> vSq;
	vector <int> vnSq;
	forn(i, n){
		int pos = lower_bound(all(sq), a[i]) - sq.begin();
		if(pos < sz(sq) && a[i] == sq[pos])
			vSq.pb(a[i]);
		else
			vnSq.pb(a[i]);
	}
	
	if(sz(vSq) == n / 2){
		puts("0");
		return;
	}

	if(sz(vSq) < n / 2){
		vector <int> d;
		forn(i, sz(vnSq)){
			int cur = vnSq[i];
			int pos = lower_bound(all(sq), cur) - sq.begin();
			assert(pos > 0 && cur != sq[pos]);
			
			d.pb(min(sq[pos] - cur, cur - sq[pos - 1]));
		}
		
		sort(all(d));
		li res = 0;
		forn(i, n / 2 - sz(vSq))
			res += d[i];
			
		cout << res << endl;
	}
	else{
		vector <int> d;
		forn(i, sz(vSq)){
			int cur = vSq[i];
			if(cur == 0)
				d.pb(2);
			else
				d.pb(1);
			}
		
		sort(all(d));
		li res = 0;
		forn(i, n / 2 - sz(vnSq))
			res += d[i];
			
		cout << res << endl;
	}
}

int main() {

    srand((unsigned int)time(NULL));

    cout << setprecision(15) << fixed;

    //read();
    solve();

    return 0;
}