#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<ll, ll> pii;
typedef pair<ll,pair<ll,ll>> piii;
typedef pair<long long, long long> pll;
#define PQ(pq,t)priority_queue<t,vector<t>,greater<t>>pq;
#define PB push_back
#define LB lower_bound
#define UB upper_bound
#define ALL(s) s.begin(),s.end()
#define FOR(i, init, n) for(ll i = init; i < n; i++)
#define RFOR(i, init, end) for(ll i = end-1; i >= init; i--)
#define OUT(a) cout << a << endl
#define OUT2(a,b) cout << a << " " << b << endl
#define ENDL cout << endl;
#define ANS(a) OUT(res.size());for(auto i:a)cout<<i<<" ";ENDL
#define PRINT(a,init,end) FOR(i,init,end) cout<<a[i]<<" ";ENDL
#define PRINTV(a) for(auto i:a)cout<<i<<" ";ENDL
#define F first
#define S second

/* generates a vector with all primes<N*/
const ll N=1e5;
bool aux[N+1];
vector<ll> primes={2};

void SieveOfEratosthenes() {
  ll i, p;
  for(p=4; p<N; p+= 2)
    aux[p]=1;
  for(p=3; p<N; p+=2) {
    if (!aux[p]) {
      primes.push_back(p);
      for(i=p*p; i<N; i += (2*p))
        aux[i]=1;
    }
  }
}

vector<ll>divn;
void gen_div(ll n) {
	for(ll i=1; i <= N; i++)
		if (!(n%i)) {
			divn.PB(i);
			divn.PB(n/i);
		}
}
set<pair<ll,ll>>res;
int main() {
	ios::sync_with_stdio(false);
	SieveOfEratosthenes();
	ll l,r,x,y;
	cin>>l>>r>>x>>y;
	gen_div(y);
	sort(divn.begin(),divn.end());
	ll n = divn.size();
	FOR(i,0,n) {
		FOR(j,0,n) {
			ll a=divn[i],b=divn[j];
			if (a<l||b<l||a>r||b>r)continue;
			if ((x==__gcd(a,b)) && ((a*b)/x)==y) {
				res.insert({a,b});
			}
		}
	}
	OUT(res.size());
}