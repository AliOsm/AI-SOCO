#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>
#include <tuple>

using namespace std;
using ll = long long;
const int N = 300010;

struct P {
  P(): x(0), y(0), id(0) {}
  P(ll x_, ll y_, int id_): x(x_), y(y_), id(id_) {}
  ll x, y;
  int id;

  bool operator<(const P& other) const {
    return x - y < other.x - other.y;
  }
};

ll x[N], y[N];
ll ret[N];
P p[N];
ll sumx[N], sumy[N];
int n, m;

inline ll sumP(int l, int r) {
  if (l > r) return 0L;
  ll ret = sumx[r];
  if (l > 0) {
    ret -= sumx[l - 1];
  }
  return ret;
}

inline ll sumS(int l, int r) {
  if (l > r) {
    return 0L;
  }
  ll ret = sumy[l];
  if (r + 1 < n) {
    ret -= sumy[r + 1];
  }
  return ret;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie();
  cin >> n >> m;
  for(int i = 0; i < n; ++i) {
    cin >> x[i] >> y[i];
    p[i] = P(x[i], y[i], i);
  }
  sort(p, p + n);
  sumx[0] = p[0].x;
  for(int i = 1; i < n; ++i) {
    sumx[i] = sumx[i - 1] + p[i].x;
  }
  sumy[n - 1] = p[n - 1].y;
  for(int i = n - 2; i >= 0; --i) {
    sumy[i] = sumy[i + 1] + p[i].y;
  }

  for(int i = 0; i < n; ++i) {
    ret[p[i].id] = p[i].x * (n - i - 1) + sumS(i + 1, n - 1);
    ret[p[i].id] += p[i].y * i + sumP(0, i - 1);
  }

  for(int i = 0; i < m; ++i) {
    int a, b;
    cin >> a >> b;
    --a;--b;
    ret[a] -= min(x[a] + y[b], x[b] + y[a]);   
    ret[b] -= min(x[b] + y[a], x[a] + y[b]);
  }

  for(int i = 0; i < n; ++i) {
    cout << ret[i] << " ";
  }
  cout << endl;
  return 0;
}
