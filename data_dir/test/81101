/* Author haleyk10198 */
/* �@��:  haleyk10198 */
/* CF handle: haleyk100198*/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

#define MOD 1000000007
#define LINF (1LL<<60)
#define INF 2147483647
#define PI 3.1415926535897932384626433
#define ll long long
#define pii pair<int,int>
#define mp(x,y) make_pair((x),(y))

using namespace std;
using namespace __gnu_pbds;

string itos(int x){
	stringstream ss;
	ss << x;
	return ss.str();
}

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

int n, k, a[200010];
ordered_set t[200010];

void add(int val, int pos){
	for( ++pos; pos <= n; pos += (pos&-pos))
		t[pos].insert(val);
}

void rem(int val, int pos){
	for( ++pos; pos <= n; pos += (pos&-pos))
		t[pos].erase(val);
	return;
}

int ask(int val, int pos){
	int res = 0;
	for( ++pos; pos; pos -= (pos&-pos))
		res += t[pos].order_of_key(val);
	return res;	
}

ll now;

int main(){
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	ios_base::sync_with_stdio(false);
	cin >> n >> k;
	iota(a, a+n, 0);
	for(int i = 0; i < n; i++)
		add(i, i);
	for(int i = 0; i < k; i++){
		int l, r;
		cin >> l >> r;
		if(--l > --r) swap(l, r);
		int LT1 = ask(a[r], l-1), LT2 = ask(a[r], r); 
		now += (LT2 - LT1);
		int GT1 = l-LT1, GT2 = r-LT2;
		now -= (GT2 - GT1);
		LT1 = ask(a[l], l-1), LT2 = ask(a[l], r);
		now -= (LT2 - LT1);
		GT1 = l-LT1, GT2 = r-LT2;
		now += (GT2 - GT1);
		if(a[r] > a[l])	now--;
		if(a[l] > a[r]) now++;
		rem(a[r], r), rem(a[l], l);
		add(a[l], r), add(a[r], l);
		cout << now << endl;
		swap(a[l], a[r]);
	}
	return 0;
}

