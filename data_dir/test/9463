/*input
4
6 4 2
2 9 2 3 8 5
4 4 1
2 13 60 4
4 1 3
1 2 2 1
2 2 0
1 2
*/
#ifdef UncleGrandpa
#include <prettyprint.hpp>
#endif
#include <bits/stdc++.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define int long long
#define loop(i,l,r) for(int i=(l); i<=(r); i++)
#define rloop(i,l,r) for(int i=(l); i>=(r); i--)
#define debug(x...) {cout << "[" << #x << "] ="; _co(x);}
void _co() {cout << endl;}
template<typename T, typename... Ts> void _co(const T& value, const Ts&... values) {cout << ' ' << value; _co(values...);}
template<typename T, typename... Ts> void co(const T& value, const Ts&... values) {cout << "deb: " << value; _co(values...);}
// change cout to cerr for debug in crash
const int N = 3505;

int a[N];
vector<int> all;
int n, m, can;

bool check(int lim) {
	loop(take_front, 0, can) {
		auto take_back = can - take_front;
		bool ok = true;
		loop(take_front2, 0, m - 1 - can) {
			auto take_back2 = m - 1 - can - take_front2;
			// debug(take_front, take_front2, take_back, take_back2);
			// co(take_front, a[take_front + take_front2], a[n - 1 - take_back - take_back2]);
			if (a[take_front + take_front2] >= lim || a[n - 1 - take_back - take_back2] >= lim);
			else {
				ok = false; break;
			}
		}
		// co(take_front, ok);
		if (ok) return true;
	}
	return false;
}

signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	int T; cin >> T;
	while (T--) {
		all.clear();
		cin >> n >> m >> can; can = min(can, m - 1);
		loop(i, 0, n - 1) {
			cin >> a[i]; all.push_back(a[i]);
		}
		sort(all.begin(), all.end()); all.resize(distance(all.begin(), unique(all.begin(), all.end())));
		int l = 0, r = all.size() - 1;
		while (l != r) {
			int mid = (l + r + 1) / 2;
			if (check(all[mid])) l = mid;
			else r = mid - 1;
		}
		cout << all[l] << endl;
	}
}