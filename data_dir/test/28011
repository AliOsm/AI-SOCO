//let's do it
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 1000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 100001

ll arr[maxn],done[maxn],cnt0[maxn],cnte[maxn],cnto[maxn];
ll dp[105][105][2];
int main()
{
	boost1;boost2;
	ll i,j,n,k,l,x,y,evenLeft=0,oddLeft=0,z;
	cin>>n;
	for(i=1;i<=n;i++)
	{
		cin>>arr[i];
		if(arr[i]!=0)
		done[arr[i]]=1;
	}
	oddLeft=0;
	evenLeft=0;
	for(i=1;i<=n;i++)
	{
		if(done[i])
		continue;
		if(i&1)
		oddLeft++;
		else
		evenLeft++;
	}
	for(i=1;i<=n;i++)
	cnt0[i]=cnt0[i-1]+(arr[i]==0);
	for(i=1;i<=n;i++)
	{
		cnte[i]=cnte[i-1];
		if(arr[i]!=0 && arr[i]%2==0)
		cnte[i]++;
	}
	for(i=1;i<=n;i++)
	{
		cnto[i]=cnto[i-1];
		if(arr[i]!=0 && arr[i]&1)
		cnto[i]++;
	}
	for(i=0;i<=n;i++)
	{
		for(j=0;j<=n;j++)
		{
			for(k=0;k<=1;k++)
			dp[i][j][k]=inf;
		}
	}
	if(arr[1]!=0)
	{
		if(arr[1]&1)
		dp[1][evenLeft][1]=0;
		else
		dp[1][evenLeft][0]=0;
	}
	else
	{
		if(evenLeft>0)
		dp[1][evenLeft-1][0]=0;
		if(oddLeft>0)
		dp[1][evenLeft][1]=0;
	}
	for(i=1;i<n;i++)
	{
		for(j=0;j<=evenLeft;j++)
		{
			for(k=0;k<=1;k++)
			{
				if(dp[i][j][k]==inf)
				continue;
				x=cnt0[i];
				y=evenLeft-j;
				z=oddLeft-(x-y);
				// if(z<0)
				// {
				// 	dp[i][j][k]=inf;
				// 	continue;
				// }
				if(arr[i+1]!=0)
				{
					if(arr[i+1]%2==k)
					dp[i+1][j][arr[i+1]%2]=min(dp[i+1][j][arr[i+1]%2],dp[i][j][k]);
					else
					dp[i+1][j][arr[i+1]%2]=min(dp[i+1][j][arr[i+1]%2],dp[i][j][k]+1);
				}
				else
				{
					if(j>0)
					{
						if(k==0)
						dp[i+1][j-1][0]=min(dp[i+1][j-1][0],dp[i][j][k]);
						else
						dp[i+1][j-1][0]=min(dp[i+1][j-1][0],dp[i][j][k]+1);
					}
					if(z>0)
					{
						if(k==0)
						dp[i+1][j][1]=min(dp[i+1][j][1],dp[i][j][k]+1);
						else
						dp[i+1][j][1]=min(dp[i+1][j][1],dp[i][j][k]);
					}
				}
			}
		}
	}
	cout<<min(dp[n][0][0],dp[n][0][1]);
	return 0;
}
