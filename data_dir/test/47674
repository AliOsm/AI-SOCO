#include <bits/stdc++.h>
 
using namespace std;
const int MAXN = 5050, MAXX = 5050;
int n, x1[MAXN], y1[MAXN], x2[MAXN], y2[MAXN], id[MAXN], bit[2 * MAXX], aux[MAXN];
long long ans;
set<tuple<int, int, int>> s;
 
void add(int pos, int val = 1)
{
	pos += MAXX;
	for(; 0 < pos && pos < 2 * MAXX; pos -= (pos & -pos))
		bit[pos] += val;
}
 
int get(int pos)
{
	pos += MAXX;
	int r = 0;
	for(; 0 < pos && pos < 2 * MAXX; pos += (pos & -pos))
		r += bit[pos];
	return r;
}
 
int main()
{
	scanf("%d", &n);
	for(int i = 1; i <= n; ++i)
	{
		scanf("%d %d %d %d", &x1[i], &y1[i], &x2[i], &y2[i]), id[i] = i;
		if(x1[i] > x2[i])
			swap(x1[i], x2[i]);
		if(y1[i] > y2[i])
			swap(y1[i], y2[i]);
		if(x1[i] == x2[i])
			s.emplace(x1[i], 0, i);
		else
		{
			s.emplace(x1[i], -1, id[i]);
			s.emplace(x2[i], 1, id[i]);
		}
	}
	for(int i = 1; i <= n; ++i)
		if(x1[i] != x2[i])
		{
			for(const auto[ax, at, aid] : s)
			{
				if(at == 0 && y1[aid] <= y1[id[i]] && x1[id[i]] <= ax && ax <= x2[id[i]])
					add(y2[aid]);
				else if(at == -1)
				{
					if(y1[aid] > y1[id[i]])
						aux[aid] = get(y1[aid]);
				}
				else if(at == 1)
				{
					int k = 0;
					if(y1[aid] > y1[id[i]])
						k = get(y1[aid]) - aux[aid];
					ans += 1LL * k * (k - 1) / 2;
				}
			}
			memset(bit, 0, sizeof bit);
		}
	printf("%lld\n", ans);
}