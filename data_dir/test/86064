#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#define double long double
#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define FORE(i, a, n) for (i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << (x) << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-10
//#define endl "\n"
#define pdd pair<double, double>
//#define mp make_pair

const int MAXN = 1000*1000+100;
const int MOD = 1000000007;
ll dp[2][2][MAXN], par[2][2][MAXN], calc[MAXN], last[2][MAXN];
int n, k;
string s;

int main() {
	cin >> n >> k >> s;
	calc[0] = 1;
	FOR(i, 1, n+1) {
		char cur = s[i-1];
		if (cur == 'W') cur = 'B'; else if (cur == 'B') cur = 'W';
		calc[i] = calc[i-1];
		if (cur == 'X') calc[i] = calc[i]*2%MOD;
		last[0][i] = cur!='W'?last[0][i-1]:i;
		last[1][i] = cur!='B'?last[1][i-1]:i;
		if (cur != 'W') dp[0][1][i] = dp[0][0][i-1]+dp[0][1][i-1];
		if (cur != 'B') {
			if (last[1][i] > i-k)
				dp[0][0][i] = dp[0][0][i-1]+dp[0][1][i-1];
			else
				dp[0][0][i] = par[0][1][i-1]-par[0][1][i-k]+calc[i-k];
		}

		if (cur != 'B') dp[1][0][i] = dp[1][0][i-1]+dp[1][1][i-1];
		if (cur != 'W') {
			if (last[0][i] > i-k)
				dp[1][1][i] = dp[1][0][i-1]+dp[1][1][i-1];
			else
				dp[1][1][i] = par[1][0][i-1]-par[1][0][i-k]+dp[0][0][i-k]+dp[0][1][i-k];
		}
		FOR(x, 0, 2) FOR(y, 0, 2) {
			dp[x][y][i] = (dp[x][y][i]%MOD+MOD)%MOD;
			par[x][y][i] = (par[x][y][i-1]+dp[x][y][i])%MOD;
		}
	}
	//FOR(i, 0, n+1) cout << dp[0][0][i] << " "; cout << endl;
	//FOR(i, 0, n+1) cout << dp[0][1][i] << " "; cout << endl;
	//FOR(i, 0, n+1) cout << dp[1][0][i] << " "; cout << endl;
	//FOR(i, 0, n+1) cout << dp[1][1][i] << " "; cout << endl;
	ll res = dp[1][0][n]+dp[1][1][n];
	res = (res%MOD+MOD)%MOD;
	cout << res << endl;
	return 0;
}

