#include <bits/stdc++.h>
using namespace std;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl




typedef long long ll;
const ll mod = 1e9+7;
const int maxn = 1001;
const int inf = 1e9;


int id[maxn][maxn];
int dist[maxn][maxn];

int x = 0;
map<int,vector<pair<int,int>>> nodes;

int n, m, q;
vector<string> g;

const vector<pair<int,int>> moves = { {0,1}, {1,0}, {-1,0}, {0,-1} };


void print(const vector<string>& g) {
    for (auto s: g) cout<<s<<endl;
    cout<<endl;
}


void flip(char &c) {
    if (c=='0') {
	c = '1';
    } else {
	c = '0';
    }
    
}

vector<string> sim(vector<string> g) {
    vector<string> res = g;
    int n = g.size();
    int m = g[0].size();
    
    for (int i=0; i<n; i++) {
	for (int j=0; j<m; j++) {
	    bool change = false;
	    for (auto mo: moves) {
		int x=i+mo.first;
		int y=j+mo.second;
		if (x<0||y<0||x>=n||y>=m) continue;
		if (g[x][y]==g[i][j]) change=true;
	    }
	    if (change) flip(res[i][j]);
	}
    }

    return res;
}


bool hasnei(int i, int j) {
    for (auto mo: moves) {
	int x=i+mo.first;
	int y=j+mo.second;
	if (x<0||y<0||x>=n||y>=m) continue;
	if (g[x][y]==g[i][j]) return true;
    }
    return false;
}





void dfs(int i, int j) {
    id[i][j]=x;
    for (auto mo: moves) {
	int x=i+mo.first;
	int y=j+mo.second;
	if (x<0||y<0||x>=n||y>=m) continue;
	if (g[x][y]!=g[i][j]) continue;
	if (id[x][y]!=-1) continue;
	dfs(x,y);
    }
}



int solve(int i, int j, ll p) {
    int x = g[i][j]-'0';
    if (dist[i][j] == inf) return x;

    if (dist[i][j]>p) return x;

    p -= dist[i][j];

    if (p%2) return 1-x;
    return x;
}


int main() {
    ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);

    cin>>n>>m>>q;
    g.resize(n);
    for (int i=0; i<n; i++) {
	cin>>g[i];
    }

    memset(id,-1,sizeof(id));

    for (int i=0; i<n; i++) {
	for (int j=0; j<m; j++) {
	    dist[i][j]=inf;
	}
    }

    for (int i=0; i<n; i++) {
	for (int j=0; j<m; j++) {
	    if (id[i][j]==-1 && hasnei(i,j)) {
		//cout<<i<<" "<<j<<endl;
		dfs(i,j);
		x++;
	    }
	}
    }

    for (int i=0; i<n; i++) {
	for (int j=0; j<m; j++) {
	    if (id[i][j] != -1) {
		nodes[id[i][j]].push_back({i,j});
	    }
	}
    }

    queue<pair<int,int>> qq;
    for (auto& p: nodes) {
	for (auto x: p.second) {
	    qq.push(x);
	    dist[x.first][x.second] = 0;
	}
    }

    while (qq.size()) {
	auto at = qq.front();
	qq.pop();
	int i = at.first;
	int j = at.second;
	for (auto mo: moves) {
	    int x=i+mo.first;
	    int y=j+mo.second;
	    if (x<0||y<0||x>=n||y>=m) continue;
	    if (1+dist[i][j] < dist[x][y]) {
		dist[x][y] = 1+dist[i][j];
		qq.push({x,y});
	    }
	}
    }




    // for (int i=0; i<n; i++) {
    // 	for (int j=0; j<m; j++) {
    // 	    if (dist[i][j]==inf) {
    // 		cout<<"* ";
    // 	    } else {
    // 		cout<<dist[i][j]<<" ";
    // 	    }
    // 	}
    // 	cout<<endl;
    // }


    while (q--) {
	int x, y; cin>>x>>y;
	--x; --y;
	ll p; cin>>p;
	cout<<solve(x,y,p)<<"\n";
    }
    

    // cout<<endl;
    // print(g);


    // for (int i=0; i<10; i++) {
    // 	watch(i);
    // 	vector<string> res = sim(g);
    // 	print(res);
    // 	g = res;
    // }

    
  

    return 0;
}
