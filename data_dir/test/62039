// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int N = 2*(int)1e5 + 3;

int t, n, res, p[N], c[N];
VI ve, d[N];
bool git, vis[N], vis2[N];

void dfs(int v) {
  vis[v] = true;
  ve.PB(c[v]);
  if (!vis[p[v]])
    dfs(p[v]);
}

void spr(int dz, int i) {
  int l = ve.size();
  int pocz = i;
  while (!vis2[i]) {
    vis2[i] = true;
    int nxt = (i+dz)%l;
    if (ve[pocz] != ve[nxt])
      git = false;
    i = nxt;
  }
}

void check() {
  int l = ve.size();
  res = min(res, l);
  for (int dz: d[l]) {
    for (int i = 0; i < l; ++i)
      vis2[i] = false;
    git = false;
    for (int i = 0; !git && i < l; ++i)
      if (!vis2[i]) {
        git = true;
        spr(dz, i);
        if (git) {
          res = min(res, dz);
          break;
        }
      }
  }
}

int main() {
  init_ios();
  for (int i = 1; i < N; ++i) {
    for (int j = 1; j*j <= i; ++j)
      if (i%j == 0) {
        d[i].PB(j);
        if (j*j != i)
          d[i].PB(i/j);
      }
    sort(d[i].begin(), d[i].end());
  }
  cin >> t;
  while (t--) {
    res = 1e9;
    git = false;
    cin >> n;
    for (int i = 0; i <= n; ++i)
      vis[i] = vis2[i] = false;
    for (int i = 1; i <= n; ++i)
      cin >> p[i];
    for (int i = 1; i <= n; ++i)
      cin >> c[i];
    for (int i = 1; i <= n; ++i)
      if (!vis[i]) {
        ve.clear();
        dfs(i);
        check();
      }
    cout<<res<<"\n";
  }
}