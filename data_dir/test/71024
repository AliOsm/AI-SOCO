#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC target("avx,avx2,fma")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("sumsqr.in");ofstream out("sumsqr.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

int main() {
    fast;
    int z; cin>>z;
    for(; z--;){
        int a; cin>>a;
        vec<int> m(a);
        map<int, int> mr, ml;
        for(int q=0; q<a; q++){
            cin>>m[q];
            mr[m[q]]++;
        }
        vec<pii> o;
        for(int q=0; q+1<a; q++){
            ml[m[q]]++;
            mr[m[q]]--;
            if(!mr[m[q]]) mr.erase(m[q]);
            int mnl = (*ml.begin()).F;
            int mxl = (*prev(ml.end())).F;

            int mnr = (*mr.begin()).F;
            int mxr = (*prev(mr.end())).F;
            if(mxl-mnl+1==ml.size() && ml.size()==q+1 && mxr-mnr+1==mr.size() && mr.size()==a-q-1 && mnl==1 && mnr==1) o.pb({q+1, a-q-1});
        }
        cout<<o.size()<<"\n";
        for(pii p : o) cout<<p.F<<" "<<p.S<<"\n";
    }
}