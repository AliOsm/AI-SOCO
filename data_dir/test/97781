#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define INF 2000000000
#define DESPACITO2 1000000000000000
#define MOD 1000000007
#define ll long long
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define ii pair<int,int>
#define vii vector<ii>
#define si set<int>
#define msi map<string,int>
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define TRvi(c,it) for(vi::iterator it=(c).begin();it!=(c).end();it++)
#define TRvii(c,it) for(vii::iterator it=(c).begin();it!=(c).end();it++)
#define TRmsi(c,it) for(msi::iterator it=(c).begin();it!=(c).end();it++)
 
 
using namespace std;

int n;
int tot[200001];
int dist[200001];
set<int>adjdir[200001];
vector<int>adjundir[200001];
bool visited[200001];
int r=0,g=0;

void dfs1(int node,int ct,int ct2)
{
	visited[node]=true;
	tot[node]=ct2;
	dist[node]=ct;
	REP(i,0,adjundir[node].size()-1)
	{
		if(!visited[adjundir[node][i]])
		{
			if(adjdir[node].find(adjundir[node][i])!=adjdir[node].end())
			{
				dfs1(adjundir[node][i],ct+1,ct2+1);
				r++;
			}
			else
				dfs1(adjundir[node][i],ct+1,ct2);
		}
	}
}



int main()
{
    IOS;
    #ifndef ONLINE_JUDGE
        // for getting input from input.txt
        freopen("input.txt", "r", stdin);
        // for writing output to output.txt
        freopen("output.txt", "w", stdout);
    #endif
   	cin >> n;
   	REP(i,1,n-1)
   	{
   		int a,b;
   		cin >> a >> b;
   		adjdir[a].insert(b);
   		adjundir[a].pb(b);
   		adjundir[b].pb(a);
   	}
   	dfs1(1,0,0);
   	g=(n-1-r);
   	map<int,set<int>>m;
   	REP(i,1,n)
   	{
   		int x=g-(dist[i]-tot[i]);
   		int val=tot[i]+x;
   		m[val].insert(i);
   	}
   	cout << (*m.begin()).first << "\n";
   	for(auto it:(*m.begin()).second)
   		cout << it << " ";
}