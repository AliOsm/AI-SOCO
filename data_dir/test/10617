#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
const int N = 5050, inF = 1e9 + 100;

int n, m, k, a[N], b[N], c[N], best[N], dp[N][N];
vector<int> vec[N];

void input() {
	cin >> n >> m >> k;
	for (int i = 1; i <= n; i++)
		cin >> a[i] >> b[i] >> c[i];
	iota(best, best + N, 0);
	while (m--) {
		int u, v;
		cin >> u >> v;
		if (u > v)
			swap(u, v);
		best[u] = max(best[u], v);
	}
	for (int i = 0; i <= n; i++)
		vec[i].push_back(0);
	for (int i = 1; i <= n; i++)
		vec[best[i]].push_back(c[i]);
	for (int i = 1; i <= n; i++) {
		sort(vec[i].begin() + 1, vec[i].end(), greater<int>());
		for (int j = 1; j < vec[i].size(); j++)
			vec[i][j] += vec[i][j - 1];
	}
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			dp[i][j] = -inF;
	dp[0][k] = 0;
}

void solve() {
	for (int i = 0; i <= n; i++)
		for (int j = 0; j < N; j++)
			if (dp[i][j] >= 0) {
				for (int cnt = 0; cnt < vec[i].size() && j - cnt >= a[i + 1]; cnt++)
					dp[i + 1][j - cnt + b[i + 1]] = max(dp[i + 1][j - cnt + b[i + 1]], dp[i][j] + vec[i][cnt]);
			}
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	input();
	solve();
	int ans = *max_element(dp[n + 1], dp[n + 1] + N);
	cout << (ans < 0? -1: ans);
}
