#pragma GCC optimise("Ofast,unroll-loops,no-stack-protector,fast-math");
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,abm,mmx,popcnt,avx,avx2,tune=native")
          
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
          
using namespace std;
using namespace __gnu_pbds;
          
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
          
using matrix = vector<vector<ll>>;
template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
          
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).begin(), (x).rend()
//#define int long long
          
void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifndef _offline
    //freopen("highways.in", "r", stdin);
    //freopen("highways.out", "w", stdout);
    #endif
}

signed main() {
    FAST_IO();
    int n;
    cin >> n;
    vector<int> a(n);
    multiset<int> setik;
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    for (int i = 0; i < n; ++i) {
        int x;
        cin >> x;
        setik.insert(x);
    }
    for (int i = 0; i < n; ++i) {
        int st = (a[i] == 0 ? 0 : n - a[i]);
        auto it = setik.lower_bound(st);
        if (it != setik.end()) {
            a[i] += *it;
            setik.erase(it);
        }
        else {
            a[i] += *setik.begin();
            setik.erase(setik.begin());
        }
    }
    for (int i = 0; i < n; ++i) {
        cout << (a[i] % n) << ' ';
    }
    return 0;       
}