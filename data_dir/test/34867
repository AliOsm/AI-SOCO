#include <iostream>
#include <vector>
#include <unordered_map>
#include <map>
#include <iostream>
#include <algorithm>
#include "math.h"
#define ll long long
#define MODD 1000000000000037ll
using namespace std;

ll hash_vals[5555];

int dp[5555];
bool can[5555][5555];

int main() {
	int n, a, b;
	cin >> n >> a >> b;
	string S;
	cin >> S;

	//for (int i = 0; i < n; i++) {
//		S.push_back(rand() % 26 + 'a');
	//}

	for (int i = 0; i <= n; i++)
		for (int j = 0; j <= n; j++)
			can[i][j] = false;


	for (int pos = 0; pos < n; pos++)
		hash_vals[pos] = 0;

	for (int len = 1; len <= n; len++) {
		for (int pos = 0; pos + len-1 <= n-1; pos++) {
			hash_vals[pos] = (hash_vals[pos] * 30 + S[pos + len - 1] - 'a' + 1) % MODD;
		}
		std::unordered_map<ll, int> all_hashes;
		for (int pos = 0; pos + len-1 <= n-len; pos++) {
			all_hashes[hash_vals[pos]]++;
		}

		for (int pos = n - len; pos >= 0; pos--) {
			if (pos - len + 1 >= 0) {
				all_hashes[hash_vals[pos - len + 1]]--;
			}

			if (all_hashes[hash_vals[pos]] > 0) {
				can[pos][len] = true;
			}
			else {
				can[pos][len] = false;
			}

		}
	}



	for (int pos = n; pos >= 0; pos--) {
		if (pos == n) {
			dp[pos] = 0;
			continue;
		}
		dp[pos] = a + dp[pos + 1];
		ll hashval = 0;
		for (int en = pos; en <= n - 1; en++) {
			if (can[pos][en - pos + 1]) {
				dp[pos] = min(dp[pos], b + dp[en + 1]);
			}
		}
	}
	cout << dp[0] << endl;



}