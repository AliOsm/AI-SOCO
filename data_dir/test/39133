#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;

const int MAX_N = 150005;
const int K = 26;

int n;
string sL, sR;
vector<int> posL[K], posR[K];
vector<int> posUnkL, posUnkR;

int main()
{
	ios::sync_with_stdio(false);
	cin >> n >> sL >> sR;
	for (int i = 0; i < n; i++)
	{
		if (sL[i] == '?')
			posUnkL.push_back(i);
		else
			posL[sL[i] - 'a'].push_back(i);
		if (sR[i] == '?')
			posUnkR.push_back(i);
		else
			posR[sR[i] - 'a'].push_back(i);
	}

	vector<pair<int, int>> result;
	result.reserve(n);
	for (int i = 0; i < K; i++)
	{
		int cnt = min(posL[i].size(), posR[i].size());
		for (int j = 0; j < cnt; j++)
			result.emplace_back(posL[i][j], posR[i][j]);
		posL[i].erase(posL[i].begin(), posL[i].begin() + cnt);
		posR[i].erase(posR[i].begin(), posR[i].begin() + cnt);
	}

	for (int i = 0; i < K; i++)
	{
		int cnt = min(posUnkL.size(), posR[i].size());
		for (int j = 0; j < cnt; j++)
			result.emplace_back(posUnkL[j], posR[i][j]);
		posUnkL.erase(posUnkL.begin(), posUnkL.begin() + cnt);
		posR[i].erase(posR[i].begin(), posR[i].begin() + cnt);

		cnt = min(posUnkR.size(), posL[i].size());
		for (int j = 0; j < cnt; j++)
			result.emplace_back(posL[i][j], posUnkR[j]);
		posUnkR.erase(posUnkR.begin(), posUnkR.begin() + cnt);
		posL[i].erase(posL[i].begin(), posL[i].begin() + cnt);
	}

	int cnt = min(posUnkL.size(), posUnkR.size());
	for (int j = 0; j < cnt; j++)
		result.emplace_back(posUnkL[j], posUnkR[j]);

	cout << result.size() << endl;
	for (const auto& p : result)
		cout << (p.first + 1) << " " << (p.second + 1) << '\n';
}