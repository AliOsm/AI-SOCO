#include <iostream>
#include <set>
#include <vector>

using namespace std;

const int N = 100000;
const long long INF = (long long) 1e11;

struct E {
	int a, b, w;
	E(int a, int b, int w) : a(a), b(b), w(w) {}
};

struct V {
	vector<E> adj;
	long long d;
	int i, p;
	bool operator() (V *u, V *v) {
		return u->d != v->d ? u->d < v->d : u->i < v->i;
	}
} vv[N];

int main() {
	int n, m;
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		V *v = &vv[i];
		v->d = INF;
		v->i = i;
		v->p = -1;
	}
	while (m-- > 0) {
		int a, b, w;
		cin >> a >> b >> w;
		a--, b--;
		E e(a, b, w);
		vv[a].adj.push_back(e);
		vv[b].adj.push_back(e);
	}
	set<V *, V> pq;
	vv[0].d = 0;
	pq.insert(&vv[0]);
	bool found = false;
	while (pq.size() > 0) {
		auto it = pq.begin();
		V *u = *it;
		pq.erase(it);
		if (u == &vv[n - 1]) {
			found = true;
			break;
		}
		for (E &e : u->adj) {
			int j = u->i == e.a ? e.b : e.a;
			V *v = &vv[j];
			if (v->d > u->d + e.w) {
				if (v->d < INF)
					pq.erase(pq.find(v));
				v->d = u->d + e.w;
				v->p = u->i;
				pq.insert(v);
			}
		}
	}
	if (found) {
		V *v = &vv[n - 1];
		vector<int> path;
		while (true) {
			path.push_back(v->i + 1);
			if (v->p == -1)
				break;
			v = &vv[v->p];
		}
		for (int i = path.size() - 1; i >= 0; i--)
			cout << path[i] << ' ';
		cout << endl;
	} else
		cout << -1 << endl;
	return 0;
}
