#include <bits/stdc++.h>
#define pb push_back
#define f first
#define s second

typedef long long ll;
typedef long double ld;

using namespace std;

const int mod = 1e9 + 7;
const int N = 3e5 + 10;
int a[N], cnt[N], mu[N];
ll fac[N], finv[N], inv[N];
vector<int> divs[N];
int n;

int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);

	for(int i = 1; i < N; i++){
		for(int j = i; j < N; j += i){
			divs[j].pb(i);
		}
	}
	mu[1] = 1;
	for(int i = 1; i < N; i++){
		for(int j = 2 * i; j < N; j += i){
			mu[j] -= mu[i];
		}
	}

	fac[0] = fac[1] = 1;
	inv[1] = 1;
	finv[0] = finv[1] = 1;

	for(int i = 2; i < N; i++){
		fac[i] = fac[i - 1] * i % mod;
		inv[i] = (mod - (mod/i) * inv[mod % i] % mod) % mod; 
		finv[i] = inv[i] * finv[i - 1] % mod;
	}

	cin >> n;
	for(int i = 1; i <= n; i++){
		cin >> a[i];
		cnt[a[i]]++;
	}

	for(int i = 1; i < N; i++){
		for(int j : divs[i]){
			if(j < i) cnt[j] += cnt[i];
		}
	}
	

	for(int size = 1; size <= min(n, 7); size++){
		ll sum = 0;
		for(int i = 1; i < N; i++){
			if(cnt[i] < size) continue;
			sum += mu[i] * fac[cnt[i]] % mod * finv[size] % mod * finv[cnt[i] - size] % mod;
			sum %= mod;
		}
		sum %= mod;
		sum += mod;
		sum %= mod;
		if(sum != 0) {
			cout << size << endl;
			return 0;
		}
	}
	cout << -1 << endl;



    return 0;
}




