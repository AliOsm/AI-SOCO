#include <bits/stdc++.h>using namespace std;#define pf push_front#define pb push_back#define FOR(i,begin,end) for (int i=begin;i<=end;i++)#define rep(i,t) for (int i=0;i<t;i++)#define pii pair<int,int>#define pi pair<pii,LL>#define X first#define Y second  typedef long long LL;typedef unsigned long long int ulli;const LL maxN=1e5+7,MOD=1e9+7,INF=1e9+7,N=5000+7;int n,q,l,r,x,type,data[4*maxN][30],helper[4*maxN],cnt[30];string str;int left(int x){return 2*x+1;}int right(int x){return 2*x+2;}void build(int node, int st, int en){  if(en-st<2)  {    data[node][str[st]-'a'+1]=1;    return ;  }  int mid=(st+en)/2;  build(left(node),st,mid);  build(right(node),mid,en);  FOR(i,1,26)    data[node][i]=data[left(node)][i]+data[right(node)][i];}void shift(int node , int st, int en){  if(!helper[node] || en-st<2)    return ;  int mid=(st+en)/2;  helper[left(node)]=helper[node];  helper[right(node)]=helper[node];  FOR(i,1,26)    data[left(node)][i]=0,data[right(node)][i]=0;  data[left(node)][helper[node]]=mid-st;  data[right(node)][helper[node]]=en-mid;  helper[node]=0;}int get(int node, int st, int en, int l, int r, int ind){  if(en<=l || r<=st)    return 0;  shift(node,st,en);  if(st>=l && en<=r)    return data[node][ind];  int mid=(st+en)/2;  return get(left(node),st,mid,l,r,ind)+get(right(node),mid,en,l,r,ind);}void update(int node, int st, int en, int l, int r, int ind){  if(en<=l || r<=st)    return ;  shift(node,st,en);  if(st>=l && en<=r)  {    FOR(i,1,26)      data[node][i]=0;    data[node][ind]=en-st;    helper[node]=ind;    return ;  }  int mid=(st+en)/2;  update(left(node),st,mid,l,r,ind);  update(right(node),mid,en,l,r,ind);  FOR(i,1,26)    data[node][i]=data[left(node)][i]+data[right(node)][i];}main(){  cin.tie(0);  cout.tie(0);  ios::sync_with_stdio(false);  cin>>n>>q>>str;  build(0,0,n);  while(q--)  {    cin>>l>>r>>type;    l--;    if(type)    {      FOR(i,1,26)        cnt[i]=get(0,0,n,l,r,i);      FOR(i,1,26)        update(0,0,n,l,l+cnt[i],i),l+=cnt[i];    }    else    {      FOR(i,1,26)        cnt[i]=get(0,0,n,l,r,i);      for(int i=26;i>=1;i--)        update(0,0,n,l,l+cnt[i],i),l+=cnt[i];    }  }  rep(i,n)  {    FOR(j,1,26)    {      char help='a';      if(get(0,0,n,i,i+1,j))      {        help+=j;        help--;        cout<<help;        break;      }    }  }  return cout<<"\n",0;}