#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define endl '\n'

using namespace std;
using namespace __gnu_pbds;
const int MAXN = (1 << 20);

template<typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

int n, k;
pair<int, pair<int, int> >  li[MAXN];

void read()
{
	cin >> n >> k;
	for(int i = 0; i < n; i++)
		cin >> li[i].first >> li[i].second.first >> li[i].second.second;
}

set< pair<int, pair<int, pair<int, int> > > > st;
ordered_set<int> os[MAXN];

void solve()
{
	for(int i = 0; i < n; i++)
		st.insert(make_pair(li[i].first, make_pair(1, li[i].second)));

	int64_t ans = 0;
	while(!st.empty())
	{
        auto tp = *st.begin();
        int x = tp.first, type = tp.second.first, r = tp.second.second.first, f = tp.second.second.second;

        if(type == 1)
		{
            for(int pf = f - k; pf <= f + k; pf++)
            	if(pf > 0) ans += os[pf].size() - os[pf].order_of_key(x - r);
            os[f].insert(x);
            st.erase(tp);
            st.insert(make_pair(x + r + 1, make_pair(0, make_pair(r, f))));
		}
		else
		{
			os[f].erase(x - r - 1);
            st.erase(tp);
		}

	}

	cout << ans << endl;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	read();
	solve();
	return 0;
}
