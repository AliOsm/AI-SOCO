#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <iomanip>
#include <vector>
#include <cstring>
#include <string>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <utility>
#include <list>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <bitset>
#include <complex>
#include <climits>
#include <functional>
#include <unordered_set>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> l4;
typedef pair<double, double> dd;
#define mp make_pair
#define pb push_back
#define debug(x) cerr << #x << " = " << x << " "

inline ii read()
{
  int a, b; scanf("%d %d", &a, &b); return mp(a, b);
}
bool solve(const vector<ii> &fst, const vector<ii> &snd)
{
  assert(fst.size() == snd.size());
  int n = fst.size();
  vector<ii> v;
  for (int i = 0; i < n; ++i)
    v.pb(mp(fst[i].first, n+i)), v.pb(mp(fst[i].second+1, -n+i));
  sort(v.begin(), v.end());
  multiset<int> lower, upper;
  for (auto e : v)
    {
      int tar = (e.second+n)%n;
      if (e.second > 0)
	{
	  if (!lower.empty() && snd[tar].second < *lower.rbegin())
	    return false;
	  if (!upper.empty() && snd[tar].first > *upper.begin())
	    return false;
	  lower.insert(snd[tar].first);
	  upper.insert(snd[tar].second);
	}
      else
	{
	  lower.erase(lower.find(snd[tar].first));
	  upper.erase(upper.find(snd[tar].second));
	}
    }
  return true;
}
int main()
{
  int n;
  while (~scanf("%d", &n))
    {
      vector<vector<ii> > v(2, vector<ii>(n));
      for (int i = 0; i < n; ++i)
	for (int j = 0; j < 2; ++j)
	  v[j][i] = read();
      puts((solve(v[0], v[1]) && solve(v[1], v[0]))?"YES":"NO");
    }
}
