#include <bits/stdc++.h>
using namespace std;
const int N= 1e5 + 5;
int n,m,c[N],ans[N],dfso[N],dfsi[N],z,in= -1,seg[4 * N],op[N];
vector<vector<int > > g;
int ls[N];
long long ff[N];

struct qq{

	int l,r,iq,k;
	qq(int a,int b,int c,int d){
		l= a,r= b,iq= c,k= d;
	}
	bool operator <(const qq & s) const{
		if(l / z != s.l / z) return l / z < s.l / z;
		return r < s.r;
	}
};

vector<qq > q;

void dfs(int u,int p){

	in++;
	dfsi[u]= in;
	op[in]= u;
	for(int i= 0;i < g[u].size();i++){
		int v= g[u][i];
		if(v != p) dfs(v,u);
	}
	dfso[u]= in;
}

int main(){

//	freopen("readin.txt","r",stdin);

	scanf("%d%d", &n, &m);
	g.resize(n);
	z= sqrt(n) + 1;
	for(int i= 0;i < n;i++){
		scanf("%d", &c[i]);
	}
	for(int i= 0,a,b;i < n - 1;i++){
		scanf("%d%d", &a, &b);
		a--,b--;
		g[a].push_back(b);
		swap(a,b);
		g[a].push_back(b);
	}
	dfs(0, -1);
	for(int i= 0,v,k;i < m;i++){
		scanf("%d%d", &v, &k);
		v--;
		q.push_back(qq(dfsi[v],dfso[v],i,k));
	}
	sort(q.begin(),q.end());
	int L= -1,R= -1;
	for(int i= 0;i < q.size();i++){

		while(R < q[i].r){
			R++;
			int temp= ls[c[op[R]]];
			ls[c[op[R]]]++;
			temp++;
			ff[temp]++;
		}

		while(R > q[i].r){
			int temp= ls[c[op[R]]];
			ff[temp]--;
			ls[c[op[R]]]--;
			R--;
		}

		while(L < q[i].l){
			if(L >= 0){
				int temp= ls[c[op[L]]];
				ff[temp]--;
				ls[c[op[L]]]--;
				temp--;
			}
			L++;
		}

		while(L > q[i].l){
			L--;
			int temp= ls[c[op[L]]];
			ls[c[op[L]]]++;
			temp++;
			ff[temp]++;
		}
		ans[q[i].iq]= ff[q[i].k];
	}

	for(int i= 0;i < m;i++){
		printf("%d\n",ans[i]);
	}
	return 0;
}
