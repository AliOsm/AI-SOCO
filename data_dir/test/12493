//raja1999
#include <bits/stdc++.h>
#include <vector>
#include <set>
#include <map>
#include <string> 
#include <cstdio>
#include <cstdlib>
#include <climits>
#include <utility>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iomanip> 
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
//setbase - cout << setbase (16)a; cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 <<endl;prints xxx77
//setprecision - cout << setprecision (14) << f << endl; Prints x.xxxx
//cout.precision(x)  cout<<fixed<<val;  // prints x digits after decimal in val

using namespace std;
using namespace __gnu_pbds;
#define f(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) f(i,0,n)
#define fd(i,a,b) for(i=a;i>=b;i--)
#define pb push_back
#define mp make_pair
#define vi vector< int >
#define vl vector< ll >
#define ss second
#define ff first
#define ll long long
#define pii pair< int,int >
#define pll pair< ll,ll >
#define sz(a) a.size()
#define inf (1000*1000*1000+5)
#define all(a) a.begin(),a.end()
#define tri pair<int,pii>
#define vii vector<pii>
#define vll vector<pll>
#define viii vector<tri>
#define mod (1000*1000*1000+7)
#define pqueue priority_queue< int >
#define pdqueue priority_queue< int,vi ,greater< int > >
#define int ll

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

//std::ios::sync_with_stdio(false);

int par[100005],cnt[105005],x[105005],k,fl=0;
vector<pair<int,pii> > vec;
int root(int u){
	if(par[u]<0){
		return u;
	}
	return par[u]=root(par[u]);
}
int merge(int u,int v){
	u=root(u);
	v=root(v);
	if(u==v){
		return 0;
	}
	if(par[u]<par[v]){
		par[v]=u;
		cnt[u]+=cnt[v];
		if(cnt[u]==k){
			fl=1;
		}
	}
	else if(par[v]<par[u]){
		par[u]=v;
		cnt[v]+=cnt[u];
		if(cnt[v]==k){
			fl=1;
		}
	}
	else{
		par[v]=u;
		par[u]--;
		cnt[u]+=cnt[v];
		if(cnt[u]==k){
			fl=1;
		}
	}
}
signed main(){
	std::ios::sync_with_stdio(false);
	int t;
	//cin>>t;
	t=1;
	while(t--){
		int n,m,i,u,v,w,j;
		cin>>n>>m>>k;
		rep(i,n+1){
			par[i]=-1;
			cnt[i]=0;
		}
		rep(i,k){
			cin>>x[i];
			cnt[x[i]]=1;
		}	
		rep(i,m){
			cin>>u>>v>>w;
			vec.pb(mp(w,mp(u,v)));
		}
		sort(all(vec));
		rep(i,vec.size()){
			merge(vec[i].ss.ff,vec[i].ss.ss);
			if(fl){
				rep(j,k){
					cout<<vec[i].ff<<" ";
				}
				cout<<endl;
				return 0;
			}
		}
	}
} 
	