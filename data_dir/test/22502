#include<bits/stdc++.h>
using namespace std;

typedef vector < int > vi;
const int N = 1e5 + 5;

int n , m;

set < int > degrees;
vi adj[N];
int leaf = 0;
bool vis[N] , cyc = 0;

void dfs(int u , int p)
{
    degrees.insert( adj[u].size() );
    if(adj[u].size() == 1)leaf ++;
    vis[u] = 1;

    for(auto v : adj[u])
        if(!vis[v])
            dfs(v , u);
        else if(v != p)cyc = 1;
}

main()
{
    scanf("%d %d" , &n , &m);

    int u , v;

    for(int i = 0 ; i < m ; i ++)
    {
        scanf("%d %d" , &u , &v);
        adj[ u ].push_back( v );
        adj[ v ].push_back( u );
    }

    dfs(1 , 0);

    if( (degrees.size() == 1) && (*degrees.begin() == 2) )
    {
        printf("ring topology\n");
        return 0;
    }

    if( (leaf == 2) && (cyc == 0) )
    {
        printf("bus topology\n");
        return 0;
    }

    auto it = degrees.begin();
    auto it2 = degrees.begin();
    it2 ++;

    if((degrees.size() == 2) && (*it == 1) && (*it2 == n - 1 ) )
    {
        printf("star topology\n");
        return 0;
    }

    printf("unknown topology\n");
}
