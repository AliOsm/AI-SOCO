
#include<bits/stdc++.h>
using namespace std;

#define LL                  long long
#define ull                 unsigned long long LL
#define scl(n)              scanf("%lld", &n)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)

#define MOD                 1000000007
#define MODP                99999999999973LL
#define pb                  push_back
#define mp                  make_pair
#define pp                  pair<LL,LL>
#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e9
#define EPS                 1e-8
#define Pi                  acos(-1.0)
LL bigmod(LL b, LL p, LL md){if(p==0) return 1;if(p%2==1){ return ((b%md)*bigmod(b,p-1,md))%md;} else {LL y=bigmod(b,p/2,md);return (y*y)%md;}}
#define N 200009

vector<int>v[N];


int par[N];
int color[N];
bool vis[N];

 int sz=1;
int deg[N];

void bfs(int s)
{

    queue<int>q;
    q.push(s);
    color[s]=1;
    vis[s]=true;
    par[s]=s;
    while(q.size())
    {
        int fr=q.front();
        q.pop();
    //   cout<<"\npar "<<fr<<endl;
        int run_color=1;
        for(int i=0;i<v[fr].size();i++)
        {
            int now=v[fr][i];


            if(vis[now]==false)
            {
                vis[now]=true;
                par[now]=fr;
              //  cout<<now<<" ";

                while(run_color== color[ par[now] ]  || run_color==color[ par[  par[now] ] ]   )
                {
                    run_color++;
                }

                if(run_color>sz)
                {
                    sz=max(sz,run_color);
                    color[now]=run_color;
                    run_color++;
                }
                else
                {
                    color[now]=run_color;
                    run_color++;
                }



                q.push(now);


            }

        }


    }



}


int main()
{

    int n;
    cin>>n;


    for(int i=1;i<n;i++)
    {
        int a,b;
        cin>>a>>b;
        v[a].pb(b);
        v[b].pb(a);
        deg[a]++;
        deg[b]++;
    }


    int d=0,s;
    for(int i=1;i<=n;i++)
    {
        if(deg[i]>d)
        {
            s=i;
            d=deg[i];
        }
    }
    bfs(s);



    cout<<sz<<endl;
    for(int i=1;i<=n;i++)
      //  cout<<i<<" -> "<<color[i]<<" par :"<<par[i]<<" g par "<<par[ par[i] ]   <<endl;
        cout<<color[i]<<" ";









    return 0;
}



/* LL dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* LL dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* LL dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* LL dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction