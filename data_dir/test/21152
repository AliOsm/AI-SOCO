#include <bits/stdc++.h>
using namespace std;
#define eb emplace_back
#define emp emplace
#define fi first
#define se second
typedef long long ll;
typedef pair<int, int> ii;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

int main(void) {
	ios_base::sync_with_stdio(false); cin.tie(0);

	int t; cin >> t;

	while (t--) {
		string s; cin >> s;

		set<char> rem;
		for (char c = 'a'; c <= 'z'; c++) rem.emp(c);

		for (int i = 0; i < (int)s.size(); i++) {
			rem.erase(s[i]);
		}

		deque<char> dq;
		dq.push_back(s[0]);
		auto it = dq.begin();

		set<char> already;
		already.emp(s[0]);

		int has_ans = 1;

		for (int i = 1; i < (int)s.size(); i++) {
			char prv = 0, nxt = 0;

			if (it != dq.begin()) {
				auto itp = it; itp--;
				prv = *itp;
			}

			auto itn = it; itn++;
			if (itn != dq.end()) {
				nxt = *itn;
			}

			if (s[i] == *it) {
				assert(0);
			} else if (s[i] == prv) {
				it--;
			} else if (s[i] == nxt) {
				it++;
			} else if (!already.count(s[i]) and nxt == 0) {
				dq.push_back(s[i]);
				it = dq.end(); it--;
				already.emp(s[i]);
			} else if (!already.count(s[i]) and prv == 0) {
				dq.push_front(s[i]);
				it = dq.begin();
				already.emp(s[i]);
			} else {
				has_ans = 0;
				break;
			}
		}

		if (has_ans) {
			cout << "YES\n";
			it = dq.begin();
			while (it != dq.end()) {
				cout << *it;
				it++;
			}

			auto it_set = rem.begin();
			while (it_set != rem.end()) {
				cout << *it_set;
				it_set++;
			}
			cout << "\n";
		} else {
			cout << "NO\n";
		}
	}

	return 0;
}

