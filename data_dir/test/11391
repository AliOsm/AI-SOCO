#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
#define endl '\n'
#define ENGZ ios::sync_with_stdio(0);cin.tie(0);ios_base::sync_with_stdio(0);
#define sfi(x) scanf("%d" , &x)
#define sfi2(x, y) scanf("%d%d" , &x,&y)
#define sfi3(x, y, z) scanf("%d%d%d" , &x,&y,&z)
#define sfl(x) scanf("%I64d" , &x)
#define sfl2(x, y) scanf("%I64d%I64d", &x, &y)
#define sfl3(x, y, z) scanf("%I64d%I64d%I64d" , &x,&y,&z)
#define sff(x) scanf("%f",&x)
#define sff2(x, y) scanf("%f%f",&x, &y)
#define sff3(x, y, z) scanf("%f%f%f",&x, &y, &z)
#define vall v.begin(),v.end()
#define mod 1000000007
#define pi 3.1415926536
/*
ll gcd(ll a, ll b)
{
    if (b == 0)
        return a;
    return gcd(b, a % b);
}*/

ll fp(ll x , ll exp)
{
   if(exp == 0)
      return 1;
   if(exp % 2 == 0)
      return fp((x * x) % mod, exp / 2) % mod;
   return (((fp((x * x) % mod, exp / 2)) % mod) * x) % mod;
}
/*bool IspowerofTwo (int x)
{
    return (x & (x - 1)) == 0;
}
string num2str(ll n)
{
    string ans;
    stack <int> s;
    while(n > 0)
    {
        s.push(n % 10);
        n /= 10;
    }
    while (!s.empty())
    {
        ans += s.top();
        s.pop();
    }
    return ans;
}

float dis(float x, float y, float a, float b)
{
    return sqrt((x - a) * (x - a) + (y - b) * (y - b));
}

ll str2num(string s)
{
    bool x = false;
    if (s[0] == '-')
        x = true;
    ll ans = 0;
    for (int i = 0 + x; i < s.size(); i++)
    {
        ans *= 10;
        ans += s[i] - '0';
    }
    if (x)
        ans *= -1;
    return ans;
}

bool prime[1000006];
void seiv()
{
    prime[1] = prime[0] = true;
        for (ll i = 2; i < 1000001; i++)
            for (ll j = i * i; j < 1000001 && !prime[i]; j += i)
                prime[j] = true;
    for (int i = 0; i < 1000001; i++)
        prime[i] = !prime[i];
}

//bitmask
for(int i = 0; i < (1 << n); i++)
{
    vector<int> v;
    for (int j = 0; j < n ; j++)
        if ((i & (1 << j)) != 0)
            v.push_back(a[j]);
}
//printf("%",&)<<fixed<<setprecision()
//freopen("cubes.in", "r", stdin);
//freopen("cubes.in", "w", stdout);
//scanf("%size_s",&s);
*/
int n;
map<pair<int,int>, int> mp;
void fix(int i, char a[4][102][102], char x, int l)
{
    int c = 0;
    for (int j = 0; j < n; j++)
        for (int k = 0; k < n; k++)
        {
            if (a[i][j][k] != x)
            {
                c++;
                a[i][j][k] = x;
            }
            if (x == '1')
                x = '0';
            else
                x = '1';
        }
    mp[{i, l}] = c;
}

int fix2(char a[4][102][102], char b[4][102][102], char c[4][102][102], char d[4][102][102], int e, int r, int t, int y, int h[10])
{
    for (int i = 0; i < n; i++)
        if (a[e][i][n - 1] == b[r][i][0])
            return 10000000;
    for (int i = 0; i < n; i++)
        if (a[e][n - 1][i] == c[t][0][i])
            return 10000000;
    for (int i = 0; i < n; i++)
        if (b[r][n - 1][i] == d[y][0][i])
            return 10000000;
    for (int i = 0; i < n; i++)
        if (c[t][i][n - 1] == d[y][i][0])
            return 10000000;
    int x = mp[{e, h[0]}] + mp[{r, h[1]}] + mp[{t, h[2]}] + mp[{y, h[3]}];
    return x;
}

int solve(char a[4][102][102], char b[4][102][102], char c[4][102][102], char d[4][102][102], int e, int r, int t, int y)
{
    int q = 10000000, h[10];
    h[0] = 0; h[1] = 1; h[2] = 2; h[3] = 3;
    q = min(q, fix2(a, b, c, d, e, r, t, y, h));
    h[0] = 0; h[1] = 1; h[2] = 3; h[3] = 2;
    q = min(q, fix2(a, b, d, c, e, r, y, t, h));
    h[0] = 0; h[1] = 2; h[2] = 1; h[3] = 3;
    q = min(q, fix2(a, c, b, d, e, t, r, y, h));
    h[0] = 0; h[1] = 2; h[2] = 3; h[3] = 1;
    q = min(q, fix2(a, c, d, b, e, t, y, r, h));
    h[0] = 0; h[1] = 3; h[2] = 2; h[3] = 1;
    q = min(q, fix2(a, d, c, b, e, y, t, r, h));
    h[0] = 0; h[1] = 3; h[2] = 1; h[3] = 2;
    q = min(q, fix2(a, d, b, c, e, y, r, t, h));
    h[0] = 1; h[1] = 0; h[2] = 2; h[3] = 3;
    q = min(q, fix2(b, a, c, d, r, e, t, y, h));
    h[0] = 1; h[1] = 0; h[2] = 3; h[3] = 2;
    q = min(q, fix2(b, a, d, c, r, e, y, t, h));
    h[0] = 1; h[1] = 2; h[2] = 0; h[3] = 3;
    q = min(q, fix2(b, c, a, d, r, t, e, y, h));
    h[0] = 1; h[1] = 2; h[2] = 3; h[3] = 0;
    q = min(q, fix2(b, c, d, a, r, t, y, e, h));
    h[0] = 1; h[1] = 3; h[2] = 2; h[3] = 0;
    q = min(q, fix2(b, d, c, a, r, y, t, e, h));
    h[0] = 1; h[1] = 3; h[2] = 0; h[3] = 2;
    q = min(q, fix2(b, d, a, c, r, y, e, t, h));
    h[0] = 2; h[1] = 1; h[2] = 0; h[3] = 3;
    q = min(q, fix2(c, b, a, d, t, r, e, y, h));
    h[0] = 2; h[1] = 1; h[2] = 3; h[3] = 0;
    q = min(q, fix2(c, b, d, a, t, r, y, e, h));
    h[0] = 2; h[1] = 0; h[2] = 1; h[3] = 3;
    q = min(q, fix2(c, a, b, d, t, e, r, y, h));
    h[0] = 2; h[1] = 0; h[2] = 3; h[3] = 1;
    q = min(q, fix2(c, a, d, b, t, e, y, r, h));
    h[0] = 2; h[1] = 3; h[2] = 0; h[3] = 1;
    q = min(q, fix2(c, d, a, b, t, y, e, r, h));
    h[0] = 2; h[1] = 3; h[2] = 1; h[3] = 0;
    q = min(q, fix2(c, d, b, a, t, y, r, e, h));
    h[0] = 3; h[1] = 1; h[2] = 2; h[3] = 0;
    q = min(q, fix2(d, b, c, a, y, r, t, e, h));
    h[0] = 3; h[1] = 1; h[2] = 0; h[3] = 2;
    q = min(q, fix2(d, b, a, c, y, r, e, t, h));
    h[0] = 3; h[1] = 2; h[2] = 1; h[3] = 0;
    q = min(q, fix2(d, c, b, a, y, t, r, e, h));
    h[0] = 3; h[1] = 2; h[2] = 0; h[3] = 1;
    q = min(q, fix2(d, c, a, b, y, t, e, r, h));
    h[0] = 3; h[1] = 0; h[2] = 2; h[3] = 1;
    q = min(q, fix2(d, a, c, b, y, e, t, r, h));
    h[0] = 3; h[1] = 0; h[2] = 1; h[3] = 2;
    q = min(q, fix2(d, a, b, c, y, e, r, t, h));
    return q;
}

int main()
{
    ENGZ
    char a[4][102][102], b[4][102][102], c[4][102][102], d[4][102][102];
    int ans = 10000000;
    cin >> n;
    for (int j = 0; j < n; j++)
        for (int k = 0; k < n; k++)
            cin >> a[0][j][k], a[1][j][k] = a[0][j][k];
    fix(0, a, '1', 0);
    fix(1, a, '0', 0);
    for (int j = 0; j < n; j++)
        for (int k = 0; k < n; k++)
            cin >> b[0][j][k], b[1][j][k] = b[0][j][k];
    fix(0, b, '1', 1);
    fix(1, b, '0', 1);
    for (int j = 0; j < n; j++)
        for (int k = 0; k < n; k++)
            cin >> c[0][j][k], c[1][j][k] = c[0][j][k];
    fix(0, c, '1', 2);
    fix(1, c, '0', 2);
    for (int j = 0; j < n; j++)
        for (int k = 0; k < n; k++)
            cin >> d[0][j][k], d[1][j][k] = d[0][j][k];
    fix(0, d, '1', 3);
    fix(1, d, '0', 3);
    for (int  i = 0; i < 2; i++)
        for (int j = 0; j < 2; j++)
            for (int k = 0; k < 2; k++)
                for (int w = 0; w < 2; w++)
                    ans = min(ans, solve(a, b, c, d, i, j, k, w));
    cout << ans;
    return 0;
}
