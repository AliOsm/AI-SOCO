#include <cstdio>
#include <iostream>
#include <algorithm>
using namespace std;
typedef long long ll;

const ll MOD=1000000007;

int f,w,h;

const int MAXFACT=300000;

ll fact[MAXFACT];
ll rfact[MAXFACT];
ll rev[MAXFACT];

ll cnk(ll n, ll k)
{
	return fact[n]*rfact[k]%MOD*rfact[n-k]%MOD;
}

// spread n items into k stacks
ll spread(ll n, ll k)
{
	if(n==0) return 1;
	return cnk(n+k-1, k-1);
}

ll get_total(ll food_stacks, ll water_stacks, ll f, ll w)
{
	if(food_stacks<=0 || food_stacks>f) return 0;
	f-=food_stacks;
	w-=water_stacks;
	if(f<0) return 0;
	if(w<0) return 0;

	return spread(w,water_stacks)*spread(f, food_stacks)%MOD;
}

ll solve(ll food_stacks, ll water_stacks)
{
	if(food_stacks<=0 || food_stacks>f) return 0;
	return get_total(food_stacks, water_stacks, f, w-water_stacks*h);
}

ll qpowmod(ll a, ll b, ll mod)
{
	ll res=1;
	while(b)
	{
		if(b&1) res=res*a%mod;
		a=a*a%mod;
		b>>=1;
	}
	return res;
}

ll revmod(ll a, ll mod)
{
	return qpowmod(a, mod-2, mod);
}

int main()
{
	rev[1]=1;
	for(int i=2;i<MAXFACT;i++)
		rev[i]=(MOD-MOD/i*rev[MOD%i]%MOD)%MOD;
	fact[0]=1;
	rfact[0]=1;
	for(int i=1;i<MAXFACT;i++)
	{
		fact[i]=fact[i-1]*i%MOD;
		rfact[i]=rfact[i-1]*rev[i]%MOD;
	}
	scanf("%d%d%d",&f,&w,&h);
	if(w==0)
	{
		puts("1");
		return 0;
	}
	else if(f==0)
	{
		if(w>h)
			puts("1");
		else
			puts("0");
		return 0;
	}
	ll res=0;
	ll total=0;
	for(int wst=1;wst<=w;wst++)
	{
		res=(res+solve(wst-1, wst))%MOD;
		res=(res+2*solve(wst, wst))%MOD;
		res=(res+solve(wst+1, wst))%MOD;

		total=(total+get_total(wst-1, wst,f,w))%MOD;
		total=(total+2*get_total(wst, wst,f,w))%MOD;
		total=(total+get_total(wst+1, wst,f,w))%MOD;
	}
	cerr<<res<<endl;
	cerr<<total<<endl;
	printf("%lld\n",res*revmod(total, MOD)%MOD);
	return 0;
}
