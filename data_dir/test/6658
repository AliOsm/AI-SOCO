#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;*/
#define itn int
#define all(c) c.begin(),c.end()
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define ll long long
#define pll pair<ll, ll>
#define mp(x, y) make_pair(x, y)
using namespace std;

const ll N = 2e5 + 5, inf = 1e18, mod = 1e9 + 7;
const double PI = 3.1415926536;
int days[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

vector<pll> fact(ll n) {
    n = abs(n);
    ll t = 0;
    vector<pll> ans;
    for (ll i = 2; i * i <= n; i++) {
        if (n % i == 0) {
            pll cur = {i, 0};
            while (n % i == 0) {
                cur.second++;
                n /= i;
            }
            ans.push_back(cur);
        }
    }
    if (n > 1) {
        ans.push_back({n, 1});
    }
    return ans;
}

inline ll getPow(ll a,ll b) {
    ll res = 1ll, tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
       }
       tp *= tp;
       //tp %= mod; res %= mod;
       b >>= 1ll;
    }
    return res;
}

ll vec_mult(const pll &t1, const pll &t2, const pll &t3) {
   const ll &x1 = t1.first, y1 = t1.second;
   const ll &x2 = t2.first, y2 = t2.second;
   const ll &x3 = t3.first, y3 = t3.second;
   return ((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}

void ok() {
   cout << "YES" << endl;
   exit(0);
}

void no() {
   cout << "NO" << endl;
   exit(0);
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    ll n = nxt();
    vector<ll> a(n);
    ll sum = 0;
    for (int i = 0; i < n; i++) {
        a[i] = nxt();
        sum += a[i];
    }

    vector<ll> pr;
    vector<ll> used(1e5 + 1);
    for (int i = 2; i <= 1e5; i++) {
        if (!used[i]) {
            pr.push_back(i);
            for (int j = i * 2; j <= 1e5; j += i) {
                used[j] = true;
            }
        }
    }

    ll ans = inf;
    for (auto x : pr) {
        if (sum % x) continue;
        vector<ll> q;
        ll cur_ans = 0;
        for (int i = 0; i < n; i++) {
            if (a[i] == 1) {
                q.push_back(i);
            }
            if (q.size() == x){
                sort(all(q));
                vector<ll> tmp;
                ll t = x / 2;
                for (int j = -1; j <= 1; j++) {
                    if (t + j >= 0 && t + j < x) {
                        tmp.push_back(q[t + j]);
                    }
                }
                ll cur = inf;
                for (auto y : tmp) {
                    ll cur_sum = 0;
                    for (auto z : q) {
                        cur_sum += abs(z - y);
                    }
                    cur = min(cur_sum, cur);
                }
                cur_ans += cur;
                q.clear();
            }

        }
        ans = min(ans, cur_ans);
    }
    if (ans == inf) ans = -1;
    cout << ans << endl;
    return 0;
}
