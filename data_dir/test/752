/*
 * Bad Move
 */
#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;
#define S second
#define F first
#define pb push_back
using ii = pair<int, int>;
using ll = long long;
using db = long double;
using PT = pair<ll, ll>;
const int N = 44, K = 105, MOD = 1e9 + 7;
string pattern;
int n, m;
/*
 * state : index, matching index, cur Match
 */
ll dp[N][N][N];
int dfa[N][2];
void buildDFA(string T){
	int j = 0;
	for(int i = 0; i < T.size(); i++){
		for(int c = 0; c < 2; c++){
			dfa[i][c] = dfa[j][c];
		}
		j = dfa[i][T[i] - '0'];
		dfa[i][T[i] - '0'] = i + 1;
	}

}

ll solve(int idx, int matchedIndex, int matchedTrail){
	if(matchedTrail == m)
		return 0;
	ll &ret = dp[idx][matchedIndex][matchedTrail];
	if(~ret)
		return ret;
	ret = 0;
	if(idx > matchedIndex){
		ret += (1ll << (n - idx));
	}	else if(idx < matchedIndex){
		ret += solve(idx + 1, matchedIndex, dfa[matchedTrail][0]);
		ret += solve(idx + 1, matchedIndex, dfa[matchedTrail][1]);
	}	else if(matchedIndex == idx){
		//take
		string append = pattern.substr(0, matchedTrail) + pattern;
		append.pop_back();
		///make sure that i won't match
		for(int i = 0; i + m <= append.size(); i++){
			if(pattern == append.substr(i, m)){
				return ret;
			}
		}
		ret += solve(min(idx + m, n), matchedIndex, 0);
	}
	return ret;
}
int main() {
#ifdef ONLINE_JUDGE
	ios_base::sync_with_stdio(0);
	cin.tie(0);
#endif

	cin >> n >> pattern;

	m = pattern.size();

	if(n  == m){
		set<string> out;
		for(int j = 0; j < n; j++){
			pattern.insert(pattern.begin(), pattern.back());
			pattern.pop_back();
			out.insert(pattern);
		}
		cout << out.size() << '\n';
		return 0;
	}

	buildDFA(pattern);

	memset(dp, -1, sizeof dp);

	ll ans = 0;

	for(int i = 0; i < n; i++){
		if(i + m <= n){
			if(i == 0){
				ans += (1ll << (n - m));
			}	else {
				ans += solve(0, i, 0);
			}
		}	else {
			string upFront = pattern.substr(n - i);
//			cerr << i << ' ' << upFront << '\n';
			int cur = 0;
			for(char c : upFront)
				cur = dfa[cur][c-'0'];
			ans += solve(i+m-n,i,cur);
		}
	}

	cout << ans << '\n';

	return 0;
}
