#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const ll MOD = 998244353LL;
const int MAX_N = 300005;

int n, m;
vector<int> g[MAX_N];
int color[MAX_N];
int cnt[2][MAX_N];

bool dfs(int u, int c, int s)
{
	color[u] = c;
	cnt[c - 1][s]++;
	for (int v : g[u])
	{
		if (color[v] == 0)
		{
			if (dfs(v, c == 1 ? 2 : 1, s))
				return true;
		}
		else if (color[v] == c)
			return true;
	}
	return false;
}

ll binPow(ll a, ll x)
{
	if (x == 0)
		return 1;
	if (x % 2 != 0)
		return (a * binPow(a, x - 1)) % MOD;
	ll halfPow = binPow(a, x / 2);
	return (halfPow * halfPow) % MOD;
}

int main()
{
	ios::sync_with_stdio(false);
	int tests; cin >> tests;
	for (int test = 0; test < tests; test++)
	{
		cin >> n >> m;
		for (int i = 0; i < n; i++)
		{
			g[i].clear();
			color[i] = 0;
			cnt[0][i] = 0;
			cnt[1][i] = 0;
		}
		for (int i = 0; i < m; i++)
		{
			int u, v;
			cin >> u >> v;
			u--; v--;
			g[u].push_back(v);
			g[v].push_back(u);
		}

		bool bad = false;
		ll result = 1;
		for (int i = 0; i < n; i++)
			if (color[i] == 0)
			{
				if (dfs(i, 1, i))
				{
					bad = true;
					break;
				}
				result = (result * ((binPow(2, cnt[0][i]) + binPow(2, cnt[1][i])) % MOD)) % MOD;
			}
		cout << (bad ? 0LL : result) << endl;
	}
}