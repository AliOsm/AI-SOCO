#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int MX = 205;

struct Edge {
	int u, v, cap, cost, flow;
	int special;
} E[MX * 20];
int ee;

vector<int> neigh[MX * 3];
int S, T;

void addEdge(int u, int v, int cap, int cost, int special = -1)
{
	E[ee].u = u;
	E[ee].v = v;
	E[ee].cap = cap;
	E[ee].cost = cost;
	E[ee].special = special;
	neigh[u].push_back(ee);
	ee++;
	E[ee].u = v;
	E[ee].v = u;
	E[ee].cost = -cost;
	neigh[v].push_back(ee);
	ee++;
}
void addEdgeDemand(int u, int v, int cap, int cost, int dem)
{
	addEdge(u, v, cap - dem, cost);
	addEdge(S, v, dem, 0);
	addEdge(u, T, dem, 0);
}

int from[MX * 2];
bool shortestPath()
{
	static bool vis[MX * 2];
	static int d[MX * 2];
	memset(from, -1, sizeof from);
	memset(vis, 0, sizeof vis);
	fill(d, d + MX * 2, 10000000);
	deque<int> Q;
	Q.push_back(S);
	d[S] = 0;
	while (!Q.empty()) {
		int v = Q.front();
		Q.pop_front();
		vis[v] = true;
		for (int i : neigh[v]) {
			if (E[i].cap == E[i].flow) continue;
			if (d[ E[i].v ] > d[v] + E[i].cost) {
				d[ E[i].v ] = d[v] + E[i].cost;
				if (!vis[ E[i].v ]) {
					Q.push_back(E[i].v);
				}
				else {
					Q.push_front(E[i].v);
				}
				vis[ E[i].v ] = true;
				from[ E[i].v ] = i;
			}
		}
	}
	return from[T] != -1;
}

ll minCostMaxFlow()
{
	ll res = 0;
	while (shortestPath()) {
		int v = T;
		int f = 1000000000;
		while (v != S) {
			int i = from[v];
			f = min(f, E[i].cap - E[i].flow);
			v = E[i].u;
		}
		
		v = T;
		while (v != S) {
			int i = from[v];
			res += E[i].cost * 1LL * f;
			E[i].flow += f;
			E[i ^ 1].flow -= f;
			v = E[i].u;
		}
	}
	return res;
}

char s1[MX], s2[MX];
char ans[MX];

int main()
{
	int n1, n2, m, r, b;
	ignore = scanf("%d %d %d %d %d", &n1, &n2, &m, &r, &b);
	ignore = scanf(" %s %s", s1 + 1, s2 + 1);
	S = n1 + n2 + 2;
	T = n1 + n2 + 3;
	
	for (int i = 0; i < m; i++) {
		int u, v;
		ignore = scanf("%d %d", &u, &v);
		v += n1;
		addEdge(u, v, 1, r, 2 * i);
		addEdge(v, u, 1, b, 2 * i + 1);
	}
	
	for (int i = 1; i <= n1; i++) {
		if (s1[i] == 'R') {
			addEdgeDemand(n1 + n2 + 1, i, 100000, 0, 1);
		}
		else if (s1[i] == 'B') {
			addEdgeDemand(i, n1 + n2 + 1, 100000, 0, 1);
		}
		else {
			addEdge(n1 + n2 + 1, i, 100000, 0);
			addEdge(i, n1 + n2 + 1, 100000, 0);
		}
	}
	
	for (int i = 1; i <= n2; i++) {
		if (s2[i] == 'R') {
			addEdgeDemand(i + n1, n1 + n2 + 1, 100000, 0, 1);
		}
		else if (s2[i] == 'B') {
			addEdgeDemand(n1 + n2 + 1, i + n1, 100000, 0, 1);
		}
		else {
			addEdge(n1 + n2 + 1, i + n1, 100000, 0);
			addEdge(i + n1, n1 + n2 + 1, 100000, 0);
		}
	}
	
	ll res = minCostMaxFlow();
	
	for (int i : neigh[S]) {
		if (E[i].cap != E[i].flow) {
			printf("-1\n");
			return 0;
		}
	}
	
	printf("%lld\n", res);
	
	for (int i = 0; i < m; i++) ans[i] = 'U';
	for (int i = 0; i < ee; i++) {
		if (E[i].special >= 0 && E[i].flow > 0) {
			if (E[i].special % 2 == 0) {
				ans[ E[i].special / 2 ] = 'R';
			}
			else {
				ans[ E[i].special / 2 ] = 'B';
			}
		}
	}
	printf("%s\n", ans);
}
