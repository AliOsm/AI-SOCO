#include "bits/stdc++.h"
using namespace std;
int Costs[4][100005] , Degree[100005];
int Array[5] , Colors[100005] , Extra[100005];
vector<int> Graph[100005];
long long Temp;
bool Visited[100005];

bool IsNotPossible( int N ){
    for( int i = 1 ; i <= N ; ++i ){
        if( Degree[i] > 2 ) return true;
    }

    return false;
}

void dfs( int root , int parent , int index ){
    Visited[root] = true;
    Temp = Temp + Costs[Array[index]][root];
    Colors[root] = Array[index];

    for( int i = 0 ; i < int(Graph[root].size()) ; ++i ){
        if( Graph[root][i] != parent ) dfs( Graph[root][i] , root , ( index + 1 ) % 3 );
    }
}

void GeneratePermutation( int index ){
    switch( index ){
        case 1:
        Array[0] = 1;
        Array[1] = 2;
        Array[2] = 3;
        break;
        case 2:
        Array[0] = 1;
        Array[1] = 3;
        Array[2] = 2;
        break;
        case 3:
        Array[0] = 2;
        Array[1] = 1;
        Array[2] = 3;
        break;
        case 4:
        Array[0] = 2;
        Array[1] = 3;
        Array[2] = 1;
        break;
        case 5:
        Array[0] = 3;
        Array[1] = 1;
        Array[2] = 2;
        break;
        default:
        Array[0] = 3;
        Array[1] = 2;
        Array[2] = 1;
    }
}

void OptimalColoration( int N ){
    for( int i = 1 ; i <= N ; ++i ){
        if( Extra[i] != -1 ){
            Temp = 0LL;
            GeneratePermutation( Extra[i] );
            dfs( i , 0 , 0 );
        }
    }
}

long long AssignColors( int N ){
    int i , j;
    long long Value , Ans = 0LL , Max = 1000000000000000;
    fill( Visited , Visited + N + 1 , false );
    fill( Extra , Extra + N + 1 , -1 );

    for( i = 1 ; i <= N ; ++i ){
        if( Visited[i] == true || Degree[i] > 1 ) continue;
        Value = Max;

        for( j = 1 ; j <= 6 ; ++j ){
            GeneratePermutation( j );
            Temp = 0LL;
            dfs( i , 0 , 0 );

            if( Temp < Value ){
                Value = Temp;
                Extra[i] = j;
            }
        }

        Ans += Value;
    }

    OptimalColoration( N );
    return Ans;
}

int main(){
    int N , u , v , i , j;
    scanf( "%d" , &N );

    for( i = 1 ; i <= 3 ; ++i ){
        for( j = 1 ; j <= N ; ++j )
            scanf( "%d" , &Costs[i][j] );
    }

    for( i = 1 ; i < N ; ++i ){
        scanf( "%d%d" , &u , &v );
        ++Degree[u];
        ++Degree[v];
        Graph[u].emplace_back( v );
        Graph[v].emplace_back( u );
    }

    if( IsNotPossible( N ) ){
        puts( "-1" );
        return 0;
    }

    printf( "%lld\n" , AssignColors( N ) );

    for( i = 1 ; i <= N ; ++i )
        printf( "%d " , Colors[i] );
    
    puts( "" );
    return 0;
}