#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ff first
#define ss second
#define PI 2*acos(0.0)
#define all(a) a.begin(),a.end()
#define INF (1<<28)
#define mem(a,x) memset(a,x,sizeof(a))
#define SEGMENT_TREE left=2*node,right=left+1,mid=(b+e)/2
using namespace std;


/**------------------------------------BITMASK------------------------------------------**/
//int Change(int N, int pos){return N= N^(1<<pos);}
//bool Check(int N, int pos){return (bool)(N &(1<<pos));}
/**-----------------------------------------------------------------------------------------------**/

/**-----------------------------DIRECTION_ARRAY-------------------------**/
///------FOUR_DIRECTION---------///
//int fx[]={0,1,0,-1};
//int fy[]={1,0,-1,0};


///------EIGHT_DIRECTION---------///
//int fx[]={0,1,1,1,0,-1,-1,-1};
//int fy[]={1,1,0,-1,-1,-1,0,1};
/**--------------------------------------------------------------------------------------**/

//int gcd(int a, int b){return (a==0)? b: gcd(b%a,a);}
//int lcm(int a, int b){return (a/gcd(a,b))*b;}


/*****int exgcd(int A, int B, int *X, int *Y){


    int x2, y2, x1, y1, x, y, r, r1, r2, q;
    x2=1; y2=0;
    x1=0; y1=1;
    for(r2=A, r1=B; r1!=0 ; r2=r1, r1=r, x2=x1, y2=y1, x1=x, y1=y){

        q=r2/r1;
        r=r2%r1;
        x=x2-(x1*q);

        y=y2-(y1*q);
    }
    *X=x2;
    *Y=y2;
    return r2;

}******/




///-----------------------------START FROM HERE--------------------------------------///

int dp[1000005], sum[1000005];
string SS;
int n, k;

int solve(int id){
    if(id>=SS.size())return 0;
    if(dp[id]!=-1)return dp[id];

    if(SS[id]=='0'){
        int x=1+sum[min(n-1, id+k-1)]-sum[id];
        int p=x+solve(id+k);
        int q=sum[n-1]-sum[id];
        return dp[id]=min(p, q);

    }else{
        int x=sum[min(n-1, id+k-1)]-sum[id];
        int p=x+solve(id+k);
        int q=sum[n-1]-sum[id]+1;
        return dp[id]=min(p, q);

    }

}

int main(){

    int t;
    scanf("%d", &t);
    for(int cs=1; cs<=t; cs++){

        scanf("%d %d", &n, &k);
        cin>>SS;
        for(int i=0; i<=n; i++)dp[i]=-1;

        if(SS[0]=='0')sum[0]=0;
        else sum[0]=1;
        for(int i=1; i<SS.size(); i++){
            if(SS[i]=='0')sum[i]=sum[i-1];
            else sum[i]=sum[i-1]+1;

        }
        int ans=solve(0);
        for(int i=1; i<SS.size(); i++){
            int x=sum[i-1]+solve(i);
            ans=min(ans, x);
        }
        printf("%d\n", ans);
    }

}
