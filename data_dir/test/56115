#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
#endif

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class FwdIter> inline auto
dump(FwdIter first, FwdIter last, const char * dlm = " ") -> void {
typedef typename iterator_traits<FwdIter>::value_type value_type;
copy(first, last, ostream_iterator<value_type>(cout, dlm)); }
template<typename T> vector<T> & operator--(vector<T> & a)
{ for(auto & i: a) --i; return a; }
/* @@@ ----------------------------------- */

inline uint64_t /* greatest common divisor - Euclid's algo. */
gcd(const uint64_t a, const uint64_t b){ return !b ? a : gcd(b, a % b); }

int64_t a741()
{
    size_t n;
    cin >> n;
    vector<size_t> a(n);
    cin >> a;
    --a;

    vector<uint64_t> out;
    vector<bool> tag(n, false);

    for(size_t r = 0; r < n; ++ r)
        if(!tag[r])
            for(size_t k = 0, u = r; ; ++k, u = a[u])
            {
                if(!tag[u])
                    tag[u] = true;
                else
                {
                    if(u != r)
                        return -1;
                    else
                    {
                        out.push_back(k & 1 ? k : k / 2);
                        // out = max(out, k & 1 ? k : k / 2);
                        break;
                    }
                }
            }


    uint64_t val = out.front();
    for(const auto i: out)
        val = val / gcd(val, i) * i;

    return val;
}


int main(const int argc, char * argv [])
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    cout << a741();

    return EXIT_SUCCESS;
}
