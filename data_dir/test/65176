#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef pair<int, int> pi;

set<pi> path(pi x, pi y) {
  set<pi> sol;
  if (x.first > y.first)
    swap(x, y);
  for (int a = x.first; a <=y.first ; a++)
    sol.insert({a, x.second});
  x = {y.first, x.second};
  if (x.second > y.second)
    swap(x,y);
  for (int b = x.second; b <= y.second; b++)
    sol.insert({x.first, b});
  return sol;
}

int dist(pi x, pi y) {
  return abs(x.first-y.first)+abs(x.second-y.second);
}


int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
  vector<pi> a(3);
  for (int i = 0; i < 3; i++)
    cin >> a[i].first >> a[i].second;
  sort (a.begin(), a.end());
  if ((a[0].second <= a[1].second and a[1].second <= a[2].second) or (a[0].second >= a[1].second and a[1].second >= a[2].second) ) {
    
    set<pi> sol = path(a[0], a[1]);
    set<pi> p = path(a[2],a[1]);
    for (pi x:p)
      sol.insert(x);
    cout << sol.size() << endl;
    for (pi x: sol)
      cout <<  x.first << " " << x.second << "\n";
  }
  else {
    pi aux;
    
    if (abs(a[0].second-a[1].second) < abs(a[2].second-a[1].second)) {
      aux.first = a[1].first;
      aux.second = a[0].second;
    }
    else {
      aux.first = a[1].first;
      aux.second = a[2].second;
    }
    
    
    
    set<pi> sol = path(a[0], aux);
    set<pi> p = path(a[1], aux);
    for (auto x: p)
      sol.insert(x);
    p = path(aux, a[2]);
    for (auto x: p)
      sol.insert(x);
    cout << sol.size() << endl;
    for (auto x: sol)
      cout << x.first << " " << x.second << "\n";
  }
  return 0;
}

