#include <bits/stdc++.h>
using namespace std;

#ifdef SG
	#include <debug.h>
#else
	#define show(...)
	#define debug(...)
	#define deepen(...)
	#define timer(...)
#endif

#define forn(i,n) for (int i = 0; i < int(n); ++i)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; --i)
#define forv(i,v) for (auto i = v.begin(); i != v.end(); ++i)
#define forr(i,v) for (auto i = v.end(); i != v.begin() && (--i, 1); )
#define ve vector
#define pa pair
#define tu tuple
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) ((int)(a).size())

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef unsigned char uc;
typedef pa<int, int> pii;
typedef pa<int, ll> pil;
typedef pa<ll, int> pli;
typedef pa<ll, ll> pll;
typedef ve<int> vi;

const ld pi = 3.1415926535897932384626433832795l;

template<typename T> inline auto sqr (T x) -> decltype(x * x) {return x * x;}
template<typename T> inline T abs (T x) {return x > T() ? x : -x;}
template<typename T1, typename T2> inline bool umx (T1& a, T2 b) {if (a < b) {a = b; return 1;} return 0;}
template<typename T1, typename T2> inline bool umn (T1& a, T2 b) {if (b < a) {a = b; return 1;} return 0;}

const int N = 200100;

struct Input {
	vector <int> a[N];
	int n;	
	
	bool read () {
		if (scanf ("%d", &n) != 1)
			return 0;
		forn(i, n - 1) {
			int u, v;
			scanf ("%d %d", &u, &v);
			u--, v--;
			a[u].pb(v);
			a[v].pb(u);
		}
		return 1;
	}

	void init (const Input &input) {
		*this = input;
	}
};

struct Data: Input {
	int ansmax, ansmin;

	void write () {
		cout << ansmax << ' ' << ansmin << endl;
	}
	
	virtual void solve () {}
	
	virtual void clear () {
		*this = Data();
	}
};

struct Solution: Data {

	int d[2][N];
	int sz[N];	

	void calc (int v, bool maxx, int p) {
		int teksz = 0;
		int sum[2];
		sum[0] = sum[1] = 0;
		forn(i, a[v].size()) {
			int to = a[v][i];
			if (to != p) {
			 	calc(to, !maxx, v);
			    forn(j, 2) {
			    	sum[j] += d[j][to] - (j == 0);
			    }
				teksz += sz[to];
			}
		}   
		if (maxx)
			d[0][v] = d[1][v] = 1;
		else
			d[0][v] = d[1][v] = N + 1;
		forn(i, a[v].size()) {
			int to = a[v][i];
			if (to == p)
				continue;
			if (maxx) {
				umx(d[0][v], teksz - sz[to] + d[0][to]);	
			} else {
				umn(d[1][v], d[1][to]);
			}	
		}
		if (!maxx) {
			d[0][v] = sum[0] + 1;
		} else {
			d[1][v] = max(1, sum[1]);
		}
		if ((int)a[v].size() == 1 && v != 0) {
			teksz++;
			d[1][v] = d[0][v] = 1;
		}
		sz[v] = teksz;
	}

	void solve () {
		ansmax = -1, ansmin = N;
		calc(0, 1, -1);
		if (n == 1) {
			ansmax = ansmin = 1;
			return;
		}
		ansmax = d[0][0];
		ansmin = d[1][0];

	}
	
	void clear () {
		*this = Solution();
	}
};

Solution sol;

int main () {
	cout.setf(ios::showpoint | ios::fixed);
	cout.precision(20);
#ifdef SG
	freopen("e.in", "r", stdin);
//	freopen(".out", "w", stdout);
	while (sol.read()) {
		sol.solve();
		sol.write();
		sol.clear();
	}
#else
	sol.read();
	sol.solve();
	sol.write();
#endif

	return 0;
}
