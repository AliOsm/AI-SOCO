#include <string.h>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <algorithm>
#include <iostream>
#include <stack>
#include <queue>
#include <set>

#include <map>
#include <vector>
#include <string>
#include <stdlib.h>

//#define DEBUG 1
#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
//#define pf printf
#define mp make_pair

//#define pf(format, ...) printf(format, __VA_ARGS__);
#define pf(format, ...); 

using namespace std;

ll mod = 998244353;
int a[100010];

int n,m;

ll dp[2][201][3], sum[2][201][3];


int solve() {
	if(a[0]>=0 && a[1]>=0) {
		if(a[0]>a[1]) {
			return 0;
		}
	}
	if(a[n-1]>=0&&a[n-2]>=0) {
		if(a[n-1]>a[n-2]) {
			return 0;
		}
	}
	clr(dp);
	clr(sum);
	int max_num = 200;	
	for(int i = 0; i < n; ++i) {
		int index = i&1;
		clr(dp[index]);
		clr(sum[index]);
		if(i==0) {
			if(a[0]>=0) {
				dp[index][a[0]][0] = 1;
			}
			else {
				for(int j = 1; j<=max_num;++j) {
					dp[index][j][0] = 1;
				}
			}
		}
		else {
			if(a[i]!=-1) {
				int t = a[i];
				dp[index][t][0] = (sum[index^1][t-1][0])%mod; 
				dp[index][t][1] = (dp[index^1][t][0]+dp[index^1][t][1]+dp[index^1][t][2])%mod;
				dp[index][t][2] = (sum[index^1][t+1][2])%mod;
			}
			else {
				for(int j = 1; j <= max_num; ++j) {
					int t = j;
					dp[index][t][0] = (sum[index^1][t-1][0])%mod; 
					dp[index][t][1] = (dp[index^1][t][0]+dp[index^1][t][1]+dp[index^1][t][2])%mod;
					dp[index][t][2] = (sum[index^1][t+1][2])%mod;
				}
			}
		}
		for(int j = 1; j <=max_num; ++j) {
			sum[index][j][0] = (dp[index][j][0] + dp[index][j][1] + dp[index][j][2] + sum[index][j-1][0])%mod;
			sum[index][j][1] = (dp[index][j][1]+dp[index][j][0]+dp[index][j][1])%mod;
		}
		for(int j = max_num; j>=1; --j) {
			sum[index][j][2] = (dp[index][j][2] + dp[index][j][1] + sum[index][j+1][2])%mod;
		}
	}
	int index = (n-1)&1;
	if(a[n-1]==-1) {
		ll ans = 0;
		for(int i = 1; i <=200; ++i) {
			ans = (ans + dp[index][i][1]+dp[index][i][2] ) % mod;
		}
		return ans;
	}
	else {
		return (dp[index][a[n-1]][1] +dp[index][a[n-1]][2])%mod;
	}
}

int main()  {
	while(cin>>n) {
		fr(i,0,n) {
			cin>>a[i];
		}
		cout<<solve()<<endl;
	}
}