#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <assert.h>
#include <bitset>
#include <string>
#include <cstdio>
#include <math.h>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <bitset>
#include <map>
using namespace std;

#ifdef _DEBUG
	const int N = 1020;
#else
	const int N = 1020;
#endif

const int M = 210;
const int MOD = 1e9+7;

int n, k, a[N], dp[M][M][N];

void add(int &a, int b)
{
	a += b;
	if (a >= MOD) a -= MOD;
}

int product(int a, int b)
{
	return (1ll * a * b) % MOD;
}

int solve(int pos, int opened, int bal)
{
	if (bal > k) return 0;
	if (dp[pos][opened][bal] != -1) return dp[pos][opened][bal];
	if (pos == n + 1)
	{
		if (opened == 0) dp[pos][opened][bal] = 1;
		else dp[pos][opened][bal] = 0;
		return dp[pos][opened][bal];
	}
	dp[pos][opened][bal] = 0;
	int b = 0;
	if (pos > 1) b += (a[pos] - a[pos - 1]) * opened;
	add(dp[pos][opened][bal], solve(pos + 1, opened + 1, bal + b));
	add(dp[pos][opened][bal], solve(pos + 1, opened, bal + b));
	if (opened > 0) add(dp[pos][opened][bal], product(solve(pos + 1, opened - 1, bal + b), opened));
	add(dp[pos][opened][bal], product(solve(pos + 1, opened, bal + b), opened));
	return dp[pos][opened][bal];
}

int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
	scanf("%d%d", &n, &k);
	for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
	sort(a + 1, a + n + 1);
	memset(dp, -1, sizeof(dp));
	cout << solve(1, 0, 0);
    return 0;
}