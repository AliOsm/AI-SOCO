#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#define pii pair<int,int>
#define pb push_back
#define mp make_pair
#define mt make_tuple
#define DEBUG 1
#define cerr if (DEBUG) cerr
#define fprintf if (DEBUG) fprintf
#define local freopen("in.txt","r",stdin);
#define test cerr<<"hi\n";
#define tr(x) cerr<<#x" "<<x<<'\n';
#define fi first
#define se second
#define HH1 402653189
#define HH2 1610612741
#define INF 0x3f3f3f3f
#define tii tuple<int,int,int>
#define npos string::npos

using namespace std;

#define MOD 1000000007LL
#define MAXN 300005
#define MAXV 1000006

int n, m, a[MAXN], b[MAXN], q;
int T[MAXV << 2], D[MAXV << 2];

void push(int id) {
	T[id << 1] += D[id];
	T[id << 1 | 1] += D[id];
	D[id << 1] += D[id];
	D[id << 1 | 1] += D[id];
	
	D[id] = 0;
}

void upd(int x, int y, int val, int id = 1, int l = 0, int r = MAXV) {
	if (y <= l || r <= x) return;
	if (x <= l && r <= y) {
		T[id] += val;
		D[id] += val;
		return;
	}
	push(id);
	
	upd(x, y, val, id << 1, l, l + r >> 1);
	upd(x, y, val, id << 1 | 1, l + r >> 1, r);
	
	T[id] = min(T[id << 1], T[id << 1 | 1]);
}

int ask(int v, int id = 1, int l = 0, int r = MAXV) {
	if (T[id] >= v) {
//		cerr << "break " << id << '\n';
		return INF; // everything >=v
	}
	
	if (l + 1 == r) return l;
	
	push(id);
	
	if (T[id << 1 | 1] < v) {
		return ask(v, id << 1 | 1, l + r >> 1, r);
	}
	else {
		return ask(v, id << 1, l, l + r >> 1);
	}
}

int main(){
	ios_base::sync_with_stdio(0); cin.tie(0);

	cin >> n >> m;
	for (int i = 0; i < n; i++) cin >> a[i], upd(0, a[i] + 1, -1);
	for (int i = 0; i < m; i++) cin >> b[i], upd(0, b[i] + 1, 1);
	
//	for (int i = 1; i < 32; i++) {
//		cout << T[i];
//		if (__builtin_popcount(i + 1) == 1) cout << '\n';
//		else cout << ' ';
//	}
	
	cin >> q;
	
	while (q--) {
		int t, pos, val; cin >> t >> pos >> val; pos--;
		
		if (t == 1) {
			upd(0, a[pos] + 1, +1);
			a[pos] = val;
			upd(0, a[pos] + 1, -1);
		}
		else {
			upd(0, b[pos] + 1, -1);
			b[pos] = val;
			upd(0, b[pos] + 1, +1);
		}
		
		int res = ask(0);
		if (res == INF) cout << -1 << '\n';
		else cout << res << '\n';
	}
}



