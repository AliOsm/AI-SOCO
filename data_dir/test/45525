#include <bits/stdc++.h>
using namespace std;
const int N = 100 * 1000 + 10;
int dp[N], a[N], n, l, s, lst;
deque<int> mx, mn, q;
void addToM(int rn) {
	while (!mx.empty() && a[mx.back() - 1] <= a[rn - 1])
		mx.pop_back();
	while (!mn.empty() && a[mn.back() - 1] >= a[rn - 1])
		mn.pop_back();
	mx.push_back(rn);
	mn.push_back(rn);
//	cout << "mx.fr = " << mx.front() << " mn.fr() = " << mn.front() << endl;
	return;
}
void getAns(int rn) {
	while (!mx.empty() && !mn.empty() && a[mx.front() - 1] - a[mn.front() - 1] > s) {
		if (mx.front() < mn.front())
			lst = mx.front(), mx.pop_front();
		else
			lst = mn.front(), mn.pop_front();
	}
//	cout << "lst = " << lst << endl;
	while (!q.empty() && q.front() < lst) 
		q.pop_front();
	if (!q.empty() && q.front() <= rn - l) {
//		cout << "upd = " << q.front() << endl;
		dp[rn] = dp[q.front()] + 1; 
	}
	while (!q.empty() && dp[q.back()] > dp[rn])
		q.pop_back();
	q.push_back(rn);
	return;
}
int main() {
	cin >> n >> s >> l;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	memset(dp, 127, sizeof(dp));
	dp[0] = 0;
	q.push_back(0);
	for (int i = 1; i <= n; i++) {
//		cout << "i = " << i << " : \n";
		addToM(i);
		getAns(i);
//		cout << "dp = " << dp[i] << endl;
	}
	if (dp[n] > n) {
		cout << -1;
	}
	else {
		cout << dp[n];
	}
	return 0;
}
