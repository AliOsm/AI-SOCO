#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             2e16
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>


#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())


#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);
const LL MOD = 998244353;
inline LL BigMod(LL B,LL P,LL M){LL R=1;while(P>0){if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;}return R;}
const int N = 505;
LL com[N][N];
LL nCr(LL n,LL r)
{
    if(r == 0 or n == r)return 1;
    if(r == 1)return n;
    if(com[n][r]!=-1)return com[n][r];
    return com[n][r] = (nCr(n - 1,r) + nCr(n - 1,r - 1) ) % MOD;
}
LL n,k,dp[N][N],DP[N][N];

LL call(LL pos,LL len)
{
    if(pos == n){
        return 1;
    }
    if(dp[pos][len] != -1)return dp[pos][len];
    LL ret = 0,sz = 0;
    for(int i = pos;i < n;i++){
        sz += len;
        if(sz >= k)break;
        ret += call(i + 1,len);
    }
    return dp[pos][len] = ret % MOD;
}
LL rec(LL pos,LL got)
{
    if(pos == n){
        return call(0,got);
    }
    if(DP[pos][got]!=-1)return DP[pos][got];
    LL ret = 0;
    for(int i = pos;i < n;i++){
        LL newgot = max(got,i - pos + 1);
        ret = ret + rec(i + 1,newgot);
    }
    return DP[pos][got] = ret % MOD;
}
int main()
{
    MEM(com,-1);
    MEM(dp,-1);
    MEM(DP,-1);
    cin >> n >> k;
    cout << (2 * rec(0,0))%MOD << "\n";

}
