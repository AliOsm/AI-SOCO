//#include<iostream>
//#include<cstring>
#include<bits/stdc++.h>
using namespace std;

inline void print(char pt) {
	printf("%c\n", pt);
}
inline void print(int pt) {
	printf("%d\n", pt);
}
inline void print(long long pt) {
	printf("%I64d\n", pt);
}
inline void print(double pt) {
	printf("%f\n", pt);
}
inline void print(char pt[]) {
	printf("%s\n", pt);
}

inline void scan(int &pt) {
	scanf("%d", &pt);
}
inline void scan(char &pt) {
	scanf("%c", &pt);
}
inline void scan(long long &pt) {
	scanf("%I64d", &pt);
}
inline void scan(double &pt) {
	scanf("%lf", &pt);
}
inline void scan(char pt[]) {
	scanf("%s", pt);
}
struct pii {
	int a;
	int b;
	friend int operator<(pii a, pii b) {
		if (a.a != b.a)
			return a.a < b.a;
		return a.b > b.b;
	}
};

struct str {
	char val[200];
	str() {
		memset(val, 0, sizeof(val));
	}
	friend int operator<(str a, str b) {
		return strcmp(a.val, b.val) < 0;
	}
};

int gcd(int x, int y) {
	return y ? gcd(y, x % y) : x;
}
int lcm(int x, int y) {
	return x * (y / gcd(x, y));
}

int bits[50];
void getbits() {
	for (int i = 0; i < 30; i++) {
		bits[i] = 1 << i;
	}
}

struct piii {
	int li;
	int ri;

	int l1;
	int l2;
	int r1;
	int r2;

	friend int operator<(piii a, piii b) {
		return a.li < b.li;
	}
};

double Q_pow(double x, int y) {
	double res = 1;
	while (y) {
		if (y % 2 == 1)
			res *= x;
		x = x * x;
//		if(x<=1e-5){
//			return 0;
//		}
		y /= 2;
	}
	return res;
}

int tmp;
int n, m, k;
char stra[10050];

int a[100050];
int b[100050];
int runa[100050];
int lena, lenb;

int main() {
	scan(n);
	scan(stra);
	int lastl = -1;
	int lastr = -1;
	int ifl = 0;
	int ifr = 0;

	int ansa = 0;

	for (int i = 0; i < n; i++) {
		if (stra[i] != '.')
			break;
		if (i == n - 1) {
			print(n);
			return 0;
		}
	}

	for (int i = 0; i < n; i++) {
		if (stra[i] == '.')
			continue;
		if (stra[i] == 'L') {
			ifl = 1;
			lastl = i;
			continue;
		}
		if (stra[i] == 'R') {
			ifl = 0;
			lastr = i;
			ansa += max(0, lastr - lastl - 1);
			for (; i < n; i++) {
				if (stra[i] == 'L') {
					ifl = 1;
					lastl = i;
					if ((lastl - lastr) % 2 == 0)
						ansa++;
					break;
				}
			}
			continue;
		}
	}
	if (ifl) {
		ansa += n - 1 - lastl;
	}
	print(ansa);
	return 0;
}
