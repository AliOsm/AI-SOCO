#include<bits/stdc++.h>
using namespace std;
const int MAXN=5e5+5;
int a[MAXN];
struct seg
{
	#define lson l,mid,rt<<1
	#define rson mid+1,r,rt<<1|1
	int tr[MAXN<<2];
	void push_up(int rt)
	{
		tr[rt]=__gcd(tr[rt<<1],tr[rt<<1|1]);
	}
	void build(int l,int r,int rt)
	{
		if(l==r)
		{
			tr[rt]=a[l];
			return ;
		}
		int mid=(l+r)>>1;
		build(lson);
		build(rson);
		push_up(rt);
	}
	void update(int pos,int val,int l,int r,int rt)
	{
		if(l==r)
		{
			tr[rt]=val;
			return ;
		}
		int mid=(l+r)>>1;
		if(pos<=mid)
			update(pos,val,lson);
		if(mid<pos)
			update(pos,val,rson);
		push_up(rt);
	}
	int query(int L,int R,int val,int l,int r,int rt)
	{
		int mid=(l+r)>>1;
		if(L<=l&&r<=R)
		{
			if(l==r)
			{
				if(__gcd(val,tr[rt])!=val)
					return l;
				return -1;
			}
			if(__gcd(tr[rt<<1],val)!=val)
				return query(L,R,val,lson);
			if(__gcd(tr[rt<<1|1],val)!=val)
				return query(L,R,val,rson);
			return -1;
		}
		int ret=-1;
		if(L<=mid)
			ret=query(L,R,val,lson);
		if(ret==-1&&mid<R)
			ret=query(L,R,val,rson);
		return ret;
	}
}se;
int main()
{
	//freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	int n,q;
	scanf("%d",&n);
	for(int i=1;i<=n;i++)
	{
		scanf("%d",&a[i]);
	}
	se.build(1,n,1);
	scanf("%d",&q);
	while(q--)
	{
		int op;
		scanf("%d",&op);
		if(op==1)
		{
			int l,r,x,pos,old,nxt;
			scanf("%d%d%d",&l,&r,&x);
			pos=se.query(l,r,x,1,n,1);
			if(pos==-1)
			{
				puts("YES");
				continue;
			}
			se.update(pos,x,1,n,1);
			nxt=se.query(l,r,x,1,n,1);
			if(nxt==-1)
				puts("YES");
			else
				puts("NO");
			se.update(pos,a[pos],1,n,1);
		}
		if(op==2)
		{
			int i,y;
			scanf("%d%d",&i,&y);
			se.update(i,y,1,n,1);
			a[i]=y;
		}
	}
	return 0;
}