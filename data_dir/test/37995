/*
    U FAIL U IMPROVE
                    U SKIP U LOSE!!
                                    */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli M=1e9+7;   
#define INF 100000000
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcount(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctz(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clz(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffs(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,t,q,z,x,y,k,m;
const double pi=3.14159265358979323846;
//unordered_map<pair<ll,lli>,lli> mp;
lli me(lli a,lli b,lli M)
{
    if(b==0)
    return 1;
    else if(b%2==0)
    return me((a*a)%M,b/2,M);
    else
    return (a%M*me((a*a)%M,(b-1)/2,M)%M)%M;
}
lli mI(lli a,lli m)
{
    return me(a,m-2,m);
}
vector<int> pf(string s) {
    int n = (int)s.length();
    vector<int> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}
//lli vis[305][305];
//lli a[500005];
//lli good[5005][5005];
//string s;
//map<lli,lli> vis;
//map<lli,lli> ml;
//vector<ll> v[2000005];
//lli mx=0;
//lli ff=0;
struct edge
{
    lli first,second,third;
};
//set<lli> s;
lli hpy,atky,defy,hpm,atkm,defm,h,d,l,r;
//string s[100005];
lli ii=1;
int main()
{
   cin>>x;
   vector<lli> v;
   lli point=0;
   while(1)
   {
       if(point%2==0)
       {
       lli d=x;
       lli cnt=0;
       lli fl=-1;
       while(d>0)
       {
           lli k=d%2;
           d/=2;
           if(k==0)
           fl=cnt;
           cnt++;
       }
       if(fl<0)
       break;
       v.push_back(fl+1);
       lli jk=(1<<(fl+1))-1;
       x=x^jk;
       //cout<<x<<endl;
       }
       else
       {
           lli d=x;
       lli cnt=0;
       lli fl=-1;
       while(d>0)
       {
           lli k=d%2;
           d/=2;
           if(k==0)
           fl=cnt;
           cnt++;
       }
       if(fl<0)
       break;
           x+=1;
       }
       point++;
   }
   cout<<point<<"\n";
   for(auto &i : v)
   cout<<i<<" ";
}