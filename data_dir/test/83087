#include <bits/stdc++.h>

using namespace std;
bool prime[1000000];
void SieveOfEratosthenes(int n)
{
    for (int p=2; p*p<=n; p++)
    {
        if (prime[p] == false)
        {
            for (int i=p*2; i<=n; i += p)
                prime[i] = true;
        }
    }
}
int board[500][500];
int needed[500][500];
int main()
{
    SieveOfEratosthenes(1000000);
    vector<int> used;
    for(int i = 2;i < 1000000;i++)
        if(!prime[i])
            used.push_back(i);

    int n,m;
    cin >> n >> m;
    for(int i = 0;i < n;i++)
    {
        for(int j = 0;j < m;j++)
        {
            scanf("%d",&board[i][j]);
            vector<int>::iterator it = lower_bound(used.begin(),used.end(),board[i][j]);
            needed[i][j] = used[it - used.begin()] - board[i][j];
        }
    }
    int LowestRow = 10e9;
    int lowestColum = 10e9;
    for(int i = 0;i < n;i++)
    {
        int current = 0;
        for(int j = 0;j < m;j++)
            current += needed[i][j];

        LowestRow = min(LowestRow,current);
    }
    for(int i = 0;i < m;i++)
    {
        int cur = 0;
        for(int j = 0;j < n;j++)
            cur += needed[j][i];

        lowestColum = min(lowestColum,cur);
    }
    cout << min(LowestRow,lowestColum);
    return 0;
}
