#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<long long, long long> pll;
#define ff first
#define ss second
#define mp make_pair
#define pb push_back
#define ub upper_bound
#define lb lower_bound
#define all(x) (x).begin(), (x).end()
#define dbg(x) cout << " -- dbg: " << (x) << "\n"
#define FastIO ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
const long long INF = 2000000000LL;
const long double EPS = 1e-9;

const int N = 200000+7;
bool prime[N] , co = 0;
vector<ll>pr;
void seive(){
    for(int i = 2; i<=100000; i++){
        if(prime[i] == false){
            co++;
            pr.push_back(i);
            for(int j = i + i; j<=100000; j+=i)
                prime[j] = true;
        }
    }
}
vector<pair<ll , ll > >st;
set<int>g[N];
unordered_map<ll,int>mpp;
int main()
{
    int n;
    seive();
    scanf("%d",&n);
    for(int i = 0; i<n; i++){
        ll l ,r;
        scanf("%lld%lld",&l,&r);
        st.push_back(mp(l,r));
    }
    //dbg(n);
    for(int k = 0; k<1; k++){
        ll l = st[k].first , r = st[k].second;
        ll p = pr[0];
        for(int i = 0; i<pr.size(); i++){
            p = pr[i];
            if(p*p > l)break;
            if(l%p==0){
                g[k].insert(p);
                while(l%p==0)l/=p;
            }
        }
        if(l != 1){
            g[k].insert(l);
        }
        l = r;
        //dbg(l);
        for(int i = 0; i<pr.size(); i++){
            p = pr[i];
            if(p*p > l)break;
            if(l%p==0){
                g[k].insert(p);
                while(l%p==0)l/=p;
            }
        }
        if(l != 1){
            g[k].insert(l);
        }
    }
    ll ans = -1;
    int cnt = 0;
    for(auto v : g[0]){
        cnt = 0;
        for(int i =0 ; i<n; i++){
            if(st[i].ss % v == 0 || st[i].ff % v==0)cnt++;
        }
        if(cnt == n)ans = v;
    }
    printf("%lld\n",ans);
    return 0;

}
