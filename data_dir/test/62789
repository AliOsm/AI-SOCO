#include <bits/stdc++.h>
using namespace std;

void paint(int v, vector <vector <int> > &g, vector <int> &c, int color) {
	c[v] = color;
	for (auto to: g[v]) {
		if (c[to] == -1) {
			paint(to, g, c, color);
		}
	}
}

void dfs(int v, vector <vector <int> > &g, vector <bool> &u, vector <int> &topsort) {
	u[v] = 1;
	for (auto to: g[v]) {
		if (!u[to]) {
			dfs(to, g, u, topsort);
		}
	}
	topsort.push_back(v);
}

int main() {
	int n, m;
	cin >> n >> m;
	vector <vector <int> > g(n), rg(n), ug(n);
	for (int i = 0; i < m; ++i) {
		int x, y;
		cin >> x >> y;
		--x, --y;
		g[x].push_back(y);
		rg[y].push_back(x);
		ug[x].push_back(y);
		ug[y].push_back(x);
	}
	vector <int> wcc(n, -1);
	int components = 0;
	for (int i = 0; i < n; ++i) {
		if (wcc[i] == -1) {
			paint(i, ug, wcc, components++);
		}
	}
	vector <bool> used(n);
	vector <int> topsort;
	for (int i = 0; i < n; ++i) {
		if (!used[i]) {
			dfs(i, g, used, topsort);
		}
	}
	reverse(topsort.begin(), topsort.end());
	vector <int> position(n);
	for (int i = 0; i < n; ++i) {
		position[topsort[i]] = i;
	}
	vector <bool> has_cycle(components);
	for (int v = 0; v < n; ++v) {
		for (auto to: g[v]) {
			if (position[to] < position[v]) {
				has_cycle[wcc[v]] = 1;
			}
		}
	}
	int ans = n - components;
	for (int i = 0; i < components; ++i) {
		if (has_cycle[i]) {
			ans++;
		}
	}
	cout << ans;
	return 0;
}