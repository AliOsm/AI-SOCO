//const ll MOD = 998244353;
//const int N = 3005;
//ll dp[N][N];
//void _(){
//    int n,m;
//    cin >> n >> m;
//    ll tot_like = 0, tot_dis = 0, tot;
//    vi a(n);
//    vi w(n);
//    cin >> a >> w;
//    rep(i,0,n-1){
//        if(a[i] == 0)
//            tot_dis += w[i];
//        else
//            tot_like += w[i];
//    }
//    tot = sum(w);
//    dp[0][0] = 1;
//    ll checksum = 0;
//    ll like_spread = 0, dis_spread = 0;
//    rep(i,0,m)
//        rep(j,0,m)
//            if(i+j < m){
//                if(dp[i][j] == 0)
//                    continue;
//                assert(tot+i-j >= 0);
//                dp[i+1][j] += dp[i][j]*(tot_like+i)%MOD*mod_inverse(tot+i-j);
//                dp[i][j+1] += dp[i][j]*(tot_dis-j)%MOD*mod_inverse(tot+i-j);
//                dp[i+1][j] %= MOD;
//                dp[i][j+1] %= MOD;
//            }
//            else if(i+j == m){
//                checksum += dp[i][j];
//                like_spread += dp[i][j]*i;
//                dis_spread -= dp[i][j]*j;
//                like_spread %= MOD;
//                dis_spread %= MOD;
//            }
//    checksum %= MOD;
//    assert(checksum == 1);
//    if(dis_spread < 0)
//        dis_spread += MOD;
//    vl ans(n);
//    rep(i,0,n-1)
//        if(a[i] == 1){
//            ans[i] = w[i]+w[i]*like_spread%MOD*mod_inverse(tot_like)%MOD;
//            ans[i] %= MOD;
//        }
//        else{
//            ans[i] = w[i]+w[i]*dis_spread%MOD*mod_inverse(tot_dis)%MOD;
//            ans[i] %= MOD;
//        }
//    print(ans,"\n");
//
//}
//
#include <iomanip>
#include <cassert>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define REP_INT(i,l,r) for(int i = l; i <= r; ++i)
#define GET_REP_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define rep(...) GET_REP_MACRO(__VA_ARGS__,REP_ANY,REP_INT)(__VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<ll> vl;
typedef vector<int> vi;
const ll MOD = 998244353;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
T1 istream& operator>>(istream& stream, vector<T>& t){
    return read(all(t), stream);
}
T1 istream& read(T b, T e, istream& stream){
    for(T it = b; it != e; ++it)
        stream >> *it;
    return stream;
}
T1 T sum(vector<T>& arr){
    T ans = 0;
    for(auto x : arr)
        ans += x;
    return ans;
}
T1 T ext_euclid(T a, T b, T c, T d){
    if(c == T(0))
        return b;
    return ext_euclid(c, d, a % c, b - a / c * d);
}
T1 T mod_inverse(T x, T mod = T(MOD)){
    return (ext_euclid(mod, T(0), x, T(1)) + mod) % mod;
}
ll mod_inverse(int x, ll mod = MOD){
    return mod_inverse<ll>(x,mod);
}
T1 ostream& print(T b, T e, string sep = " ", ostream& stream = cout){
    for(T it = b; it != e; ++it){
        stream << *it;
        if(it + 1 != e)
            stream << sep;
    }
    return stream;
}
T1 void print(vector<T> arr, string sep = " "){
    if(arr.empty()){
        return;
    }
    print(arr.begin(), arr.end(), sep);
    cout << '\n';
}
const int N = 3005;
ll dp[N][N];
void _(){
    int n,m;
    cin >> n >> m;
    ll tot_like = 0, tot_dis = 0, tot;
    vi a(n);
    vi w(n);
    cin >> a >> w;
    rep(i,0,n-1){
        if(a[i] == 0)
            tot_dis += w[i];
        else
            tot_like += w[i];
    }
    tot = sum(w);
    dp[0][0] = 1;
    ll checksum = 0;
    ll like_spread = 0, dis_spread = 0;
    rep(i,0,m)
        rep(j,0,m)
            if(i+j < m){
                if(dp[i][j] == 0)
                    continue;
                assert(tot+i-j >= 0);
                dp[i+1][j] += dp[i][j]*(tot_like+i)%MOD*mod_inverse(tot+i-j);
                dp[i][j+1] += dp[i][j]*(tot_dis-j)%MOD*mod_inverse(tot+i-j);
                dp[i+1][j] %= MOD;
                dp[i][j+1] %= MOD;
            }
            else if(i+j == m){
                checksum += dp[i][j];
                like_spread += dp[i][j]*i;
                dis_spread -= dp[i][j]*j;
                like_spread %= MOD;
                dis_spread %= MOD;
            }
    checksum %= MOD;
    assert(checksum == 1);
    if(dis_spread < 0)
        dis_spread += MOD;
    vl ans(n);
    rep(i,0,n-1)
        if(a[i] == 1){
            ans[i] = w[i]+w[i]*like_spread%MOD*mod_inverse(tot_like)%MOD;
            ans[i] %= MOD;
        }
        else{
            ans[i] = w[i]+w[i]*dis_spread%MOD*mod_inverse(tot_dis)%MOD;
            ans[i] %= MOD;
        }
    print(ans,"\n");
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        _();
}
