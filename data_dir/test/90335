// Author : MohamedSameh
#include <bits/stdc++.h>
typedef long long ll ;
#define pb push_back
#define f first
#define s second
#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define SZ(a) (int)a.size()
#define debug(x) cout<<#x<<" = { "<<x<<" }\n"
void fo (){fflush(stdout);}
using namespace std;
string x ;
int n ;
int ans = 1 ;
int dp[20][(1<<20)];
bool MASK[(1<<20)];
int Count[(1<<20)]; 
int count (int x)
{
	return ( x ? x % 2 + count(x/2) : 0 ); 
}
int solve (int id , int mask )
{
	 
	if (MASK[mask])return Count[mask];
	if (id == 20 )return 0 ;
	int &ret = dp[id][mask];
	if (~ret)return ret ; 
	int newmask = mask; 
	newmask &= ~(1<<id); 
	ret =  max ( solve(id + 1 , mask ) , solve (id + 1 , newmask ) );
	return  ret ; 
}
int flip (int x )
{
	for (int i = 19 ; i >= 0 ; i--)
	{
		x ^= (1 << i); 
	}
	return x ; 
}
void p (int x)
{
	bool ok = 0 ;
	for (int i = 19 ; i >= 0 ;i--)
	{
		if ( (x & (1<<i)) )cout << 1 , ok = 1; 
		else if (ok)cout << 0 ; 
	}
}
int main ()
{
	for (int i =0 ; i < (1<<20) ;i++)Count[i] = count(i); 
	memset(dp , -1 ,sizeof dp );
	cin >> x ; 
	n = SZ(x); 
	for (int i = 0 ; i < n ;i++)
	{
		int mask =0; 
		for (int j = i ; j < n ; j++)
		{
			if ( mask & (1<<(x[j]-'a')) )break; 
			mask |= (1<<(x[j]-'a')) ;
			MASK[mask] = 1 ; 
		}
	}
	
	for (int i =0 ; i < (1<<20); i++)
	{
		if (!MASK[i])continue ; 
		int mask = flip(i);
		ans = max (ans , Count[i] + solve (0 , mask ));
	}
	printf ("%d\n" ,ans );
	
	
}	

