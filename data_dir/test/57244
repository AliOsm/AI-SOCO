#include <bits/stdc++.h>
using namespace std;
typedef long long ll;


template <typename T>
T inverse(T a, T m) {
  T u = 0, v = 1;
  while (a != 0) {
    T t = m / a;
    m -= t * a; swap(a, m);
    u -= t * v; swap(u, v);
  }
  assert(m == 1);
  return u;
}

template <typename T>
class Modular {
 public:
  using Type = typename decay<decltype(T::value)>::type;

  constexpr Modular() : value() {}
  template <typename U>
  Modular(const U& x) {
    value = normalize(x);
  }

  template <typename U>
  static Type normalize(const U& x) {
    Type v;
    if (-mod() <= x && x < mod()) v = static_cast<Type>(x);
    else v = static_cast<Type>(x % mod());
    if (v < 0) v += mod();
    return v;
  }

  const Type& operator()() const { return value; }
  template <typename U>
  explicit operator U() const { return static_cast<U>(value); }
  constexpr static Type mod() { return T::value; }

  Modular& operator+=(const Modular& other) { if ((value += other.value) >= mod()) value -= mod(); return *this; }
  Modular& operator-=(const Modular& other) { if ((value -= other.value) < 0) value += mod(); return *this; }
  template <typename U> Modular& operator+=(const U& other) { return *this += Modular(other); }
  template <typename U> Modular& operator-=(const U& other) { return *this -= Modular(other); }
  Modular& operator++() { return *this += 1; }
  Modular& operator--() { return *this -= 1; }
  Modular operator++(int) { Modular result(*this); *this += 1; return result; }
  Modular operator--(int) { Modular result(*this); *this -= 1; return result; }
  Modular operator-() const { return Modular(-value); }

  template <typename U = T>
  typename enable_if<is_same<typename Modular<U>::Type, int>::value, Modular>::type& operator*=(const Modular& rhs) {
#ifdef _WIN32
    uint64_t x = static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value);
    uint32_t xh = static_cast<uint32_t>(x >> 32), xl = static_cast<uint32_t>(x), d, m;
    asm(
      "divl %4; \n\t"
      : "=a" (d), "=d" (m)
      : "d" (xh), "a" (xl), "r" (mod())
    );
    value = m;
#else
    value = normalize(static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value));
#endif
    return *this;
  }
  template <typename U = T>
  typename enable_if<is_same<typename Modular<U>::Type, int64_t>::value, Modular>::type& operator*=(const Modular& rhs) {
    int64_t q = static_cast<int64_t>(static_cast<long double>(value) * rhs.value / mod());
    value = normalize(value * rhs.value - q * mod());
    return *this;
  }
  template <typename U = T>
  typename enable_if<!is_integral<typename Modular<U>::Type>::value, Modular>::type& operator*=(const Modular& rhs) {
    value = normalize(value * rhs.value);
    return *this;
  }

  Modular& operator/=(const Modular& other) { return *this *= Modular(inverse(other.value, mod())); }

  template <typename U>
  friend const Modular<U>& abs(const Modular<U>& v) { return v; }

  template <typename U>
  friend bool operator==(const Modular<U>& lhs, const Modular<U>& rhs);

  template <typename U>
  friend bool operator<(const Modular<U>& lhs, const Modular<U>& rhs);

  template <typename U>
  friend std::istream& operator>>(std::istream& stream, Modular<U>& number);

 private:
  Type value;
};

template <typename T> bool operator==(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value == rhs.value; }
template <typename T, typename U> bool operator==(const Modular<T>& lhs, U rhs) { return lhs == Modular<T>(rhs); }
template <typename T, typename U> bool operator==(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) == rhs; }

template <typename T> bool operator!=(const Modular<T>& lhs, const Modular<T>& rhs) { return !(lhs == rhs); }
template <typename T, typename U> bool operator!=(const Modular<T>& lhs, U rhs) { return !(lhs == rhs); }
template <typename T, typename U> bool operator!=(U lhs, const Modular<T>& rhs) { return !(lhs == rhs); }

template <typename T> bool operator<(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value < rhs.value; }

template <typename T> Modular<T> operator+(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }
template <typename T, typename U> Modular<T> operator+(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) += rhs; }
template <typename T, typename U> Modular<T> operator+(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }

template <typename T> Modular<T> operator-(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }
template <typename T, typename U> Modular<T> operator-(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) -= rhs; }
template <typename T, typename U> Modular<T> operator-(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }

template <typename T> Modular<T> operator*(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }
template <typename T, typename U> Modular<T> operator*(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) *= rhs; }
template <typename T, typename U> Modular<T> operator*(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }

template <typename T> Modular<T> operator/(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }
template <typename T, typename U> Modular<T> operator/(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) /= rhs; }
template <typename T, typename U> Modular<T> operator/(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }

template<typename T, typename U>
Modular<T> power(const Modular<T>& a, const U& b) {
  assert(b >= 0);
  Modular<T> x = a, res = 1;
  U p = b;
  while (p > 0) {
    if (p & 1) res *= x;
    x *= x;
    p >>= 1;
  }
  return res;
}

template <typename T>
bool IsZero(const Modular<T>& number) {
  return number() == 0;
}

template <typename T>
string to_string(const Modular<T>& number) {
  return to_string(number());
}

template <typename T>
std::ostream& operator<<(std::ostream& stream, const Modular<T>& number) {
  return stream << number();
}

template <typename T>
std::istream& operator>>(std::istream& stream, Modular<T>& number) {
  typename common_type<typename Modular<T>::Type, int64_t>::type x;
  stream >> x;
  number.value = Modular<T>::normalize(x);
  return stream;
}

/*
using ModType = int;

struct VarMod { static ModType value; };
ModType VarMod::value;
ModType& md = VarMod::value;
using Mint = Modular<VarMod>;
*/

constexpr int md = 998244353;
using Mint = Modular<std::integral_constant<decay<decltype(md)>::type, md>>;

const int fifty = 50;

Mint ans[100000];
int main() {
  ios::sync_with_stdio(0); cin.tie(0);
  //If occurs >= 50 times: add explicit
  //For each #occurences < 50:
  //  Moo's for count of different frequencies

  int n, m, q;
  cin >> n >> m >> q;
  vector<int> e(n);
  vector<vector<int>> pos(m);
  for (int i = 0; i < n; i++) {
    int x;
    cin >> x;
    x--;
    e[i] = x;
    pos[x].push_back(i);
  }

  map<int,int> comp;
  vector<int> ck;
  vector<tuple<int,int,int>> query(q);
  for (int i = 0; i < q; i++) {
    int l, r, k;
    cin >> l >> r >> k;
    l--;
    query[i] = {l, r, k};
    comp[k];
    ans[i] = 1;
  }

  int comps = 0;
  for (auto&p : comp) {
    p.second = comps++;
    ck.push_back(p.first);
  }

  vector<vector<int>> occ(fifty);

  {
    int M = ck.back()+n+1;
    vector<Mint> fac(M), ifac(M);
    fac[0] = ifac[0] = 1;
    for (int i = 1; i < M; i++) {
      fac[i] = fac[i-1]*i;
      ifac[i] = 1/fac[i];
    }
    for (int i = 0; i < m; i++) {
      int sz = pos[i].size();
      if (sz >= fifty) {
	vector<int> acc(n+1);
	for (int j : pos[i])
	  acc[j+1]++;
	for (int j = 1; j <= n; j++)
	  acc[j] += acc[j-1];
	for (int j = 0; j < q; j++) {
	  auto [l, r, k] = query[j];
	  int x = acc[r]-acc[l];
	  ans[j] *= fac[sz+k] * ifac[sz+k-x];
	}
      } else {
	for (int j : pos[i]) occ[sz].push_back(j);
      }
    }
  }

  for (int sz = 0; sz < fifty; sz++) {
    vector<int>&v = occ[sz];
    sort(v.begin(), v.end());

    vector<tuple<int,int,int>> small(q);
    for (int i = 0; i < q; i++) {
      auto [l, r, k] = query[i];
      l = lower_bound(v.begin(), v.end(), l)-v.begin();
      r = lower_bound(v.begin(), v.end(), r)-v.begin();
      small[i] = {l, r, i};
    }

    int B = sqrt(v.size()+1);
    sort(small.begin(), small.end(), [&](tuple<int,int,int> a, tuple<int,int,int> b) {
	auto [al,ar,ak] = a;
	auto [bl,br,bk] = b;
	return make_pair(ar/B, al) < make_pair(br/B, bl);
      });

    vector<int> cnt(m);
    vector<int> cnt_cnt(fifty);
    cnt_cnt[0] = v.size();

    auto add = [&](int i, int f) {
      int&x = cnt[e[v[i]]];
      cnt_cnt[x]--;
      x += f;
      cnt_cnt[x]++;
    };

    vector<vector<Mint>> fac(comps, vector<Mint>(fifty));
    for (int i = 0; i < comps; i++) {
      Mint base = sz+ck[i];
      fac[i][0] = 1;
      for (int j = 1; j < fifty; j++) {
	fac[i][j] = fac[i][j-1]*base--;
      }
    }

    int pl = 0, pr = 0;
    for (auto [ql, qr, qi] : small) {
      while (pl > ql) add(--pl, 1);
      while (pr < qr) add(pr++, 1);
      while (pl < ql) add(pl++,-1);
      while (pr > qr) add(--pr,-1);

      int k = comp[get<2>(query[qi])];
      for (int x = 0; x < fifty; x++) {
	//((sz+k)! / (sz+k - x)! )
	ans[qi] *= power(fac[k][x], cnt_cnt[x]);
      }
    }
  }

  vector<vector<Mint>> fac(comps, vector<Mint>(n));
  for (int i = 0; i < comps; i++) {
    Mint base = (Mint)m*ck[i];
    fac[i][0] = 1;
    for (int j = 1; j < n; j++)
      fac[i][j] = fac[i][j-1] * ++base;
  }

  for (int i = 0; i < q; i++) {
    auto [l,r,k] = query[i];
    ans[i] *= fac[comp[k]][n-(r-l)];
    cout << ans[i] << '\n';
  }
}
