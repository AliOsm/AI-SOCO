#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define eb emplace_back

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int N = 100010;
const ll oo = 1e13;

set<pair<ll, int > > to0[N], from0[N];

vector<tuple<int, int, int, int, int> > v;
ll cto0[N], cfrom0[N];

int main()
{
	int n, m, k;

	scanf("%d %d %d", &n, &m, &k);
	
	for (int i = 1; i <= n; i++)
	{
		cto0[i] = oo;
		cfrom0[i] = oo;
		to0[i].insert(mp(oo, -1));
		from0[i].insert(mp(oo, -1));
	}
	

	for (int i = 0; i < m; i++)
	{
		int d, f, t, c;
		scanf("%d %d %d %d", &d, &f, &t, &c);
		v.eb(d, f, t, c, i);
		if (d > k and f == 0)
		{
			from0[t].insert(mp((ll)c, i));
			cfrom0[t] = min(cfrom0[t], (ll)c);
		}
	}


	sort(v.begin(), v.end());
	int pl = 0, pr = 0;
	ll cost_to0 = 0, cost_from0 = 0;
	for (int i = 1; i <= n; i++)
	{
		cost_to0 += cto0[i];
		cost_from0 += cfrom0[i];
	}
	while (pr < m and get<0>(v[pr]) <= k)
		pr++;
	pr--;

	ll ans = 1e18;
	for (int l = 1; l + k - 1 <= 1000000; l++)
	{
		int r = l + k - 1;
		while (pr+1 < m and get<0>(v[pr+1]) <= r)
		{
			pr++;
			int d, f, t, c, id;
			tie(d, f, t, c, id) = v[pr];
			if (f == 0)
			{
				from0[t].erase(ii(c, id));
				ll new_cfrom0 = (*from0[t].begin()).fi;
				cost_from0 -= cfrom0[t];
				cfrom0[t] = new_cfrom0;
				cost_from0 += cfrom0[t];
			}
		}
		while (pl < m and get<0>(v[pl]) < l)
		{
			int d, f, t, c, id;
			tie(d, f, t, c, id) = v[pl];
			if (t == 0)
			{
				to0[f].insert(ii(c, id));
				ll new_cto0 = (*to0[f].begin()).fi;
				cost_to0 -= cto0[f];
				cto0[f] = new_cto0;
				cost_to0 += cto0[f];
			}
			pl++;
		}
		ans = min(ans, cost_from0 + cost_to0);
	}
	if (ans >= oo)
		ans = -1;
	printf("%lld\n", ans);
	return 0;
}


