#pragma GCC target("avx2")
#pragma GCC optimize("O3")
 
#include <x86intrin.h>
#include <bits/stdc++.h>   
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
using namespace __gnu_pbds;
using namespace std;
  
template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
     
#define F first
#define S second           
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair                                     
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long

typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)2e5 + 123;
const ll inf = (ll)1e18 + 1;
 
const double pi = acos (-1.0);
const double eps = 1e-7;                  
const int dx[] = {0, -1, 0, 1, 0};
const int dy[] = {0, 0, 1, 0, -1};

int n, k, sz[N], lvl[N], w[N];
vector <int> g[N];

void dfs (int v = 1, int pr = 0) {
   sz[v] = 1;
   lvl[v] = lvl[pr] + 1;
   for (auto to : g[v])
      if (to != pr)
         dfs (to, v), sz[v] += sz[to];
   w[v] = sz[v] - lvl[v];
}

inline void boost () {                   
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                     
 
inline void Solve () {
   cin >> n >> k;
   for (int i = 1; i < n; i ++) {
      int x, y;
      cin >> x >> y;
      g[x].pb (y);
      g[y].pb (x);
   }
   dfs ();
   sort (w + 1, w + n + 1);
   reverse (w + 1, w + n + 1);
   cout << accumulate (w + 1, w + n - k + 1, 0ll);
   
}
 
main () {                                       
 //freopen ("line2.in", "r", stdin);    
 //freopen ("line2.out", "w", stdout);              
   boost ();
   int tt = 1;
   //cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}