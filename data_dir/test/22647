#include<stdio.h>
#include<iostream>
#include<string.h>
#include<ctype.h>
#include<math.h>
#include<map>
#include<set>
#include<vector>
#include<queue>
#include<functional>
#include<string>
#include<algorithm>
#include<time.h>
void fre(){freopen("c://test//input.in","r",stdin);freopen("c://test//output.out","w",stdout);}
template <class T> inline void scand(T &x){char c;x=0;while((c=getchar())<'0');while(c>='0'&&c<='9')x=x*10+(c-48),c=getchar();}
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define ls o<<1
#define rs o<<1|1
typedef unsigned int UI;
template <class T> inline void gmax(T &a,T b){if(b>a)a=b;}
template <class T> inline void gmin(T &a,T b){if(b<a)a=b;}
using namespace std;
const int N=0,M=0,Z=1e9+7,maxint=2147483647,ms31=522133279,ms63=1061109567,ms127=2139062143;
const double eps=1e-8,PI=acos(-1.0);//.0
map<int,int>mop;
struct A{};
int a,b,c,d,e,f;
int ans;
int cnt(int top,int bot,int h)
{
	int tmp=(top+bot)*(h+1)-top-bot;
	return tmp;
}
void way1()
{
	ans=0;	
	int h1=min(b,f);
	ans+=cnt(a,a+h1,h1);	
	int h2=max(b,f)-h1;
	ans+=cnt(a+h1,a+h1,h2);
	int h3=b+c-h1-h2;
	ans+=cnt(a+h1,d,h3);		
	printf("%d\n",ans);
}
void way2()
{
	ans=(a+b+c)*(a+b+c)-a*a-c*c-e*e;
	printf("%d\n",ans);
}
int main()
{
	while(~scanf("%d%d%d%d%d%d",&a,&b,&c,&d,&e,&f))
	{
		way2();//way1();
	}
	return 0;
}
/*
【题意】
给你一个六边形，每条边都是整数长，每个角都是120°，问这个六边形可以分成多少个1*1*1的正三角形

【类型】
找规律法or补整法

【分析】
我比赛时的做法是找规律
这个六边形可以被分成2个梯形+0or1个平行四边形
对于每个分成的图形，三角形个数=（上底+下底）*（高+1）-上底-下底

【时间复杂度&&优化】
这道题当时我用了LL，
然而是不需要的，
因为一个边长为n的正三角可以分成的小三角个数为n*n（用比例关系算即可得）
所以最多三角形的个数是n*n*6=6e6，不会爆掉

这道题标程提供了更好的解法，就是补整法
我们可以把这个图形补成正三角形，然后计算

【trick】

【数据】
Sample test(s)
input
1 1 1 1 1 1
output
6

input
1 2 1 2 1 2
output
13

*/