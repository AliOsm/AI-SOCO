#include <bits/stdc++.h>

#define F first
#define S second
#define pb push_back
#define ll long long
#define ld long double
#define FILE "dunes"
#define pii pair <int,int>

using namespace std;

const int mod = 1e9 + 7;

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
  //  freopen("input.txt","r",stdin);
   // freopen("output.txt","w",stdout);
    int n,m;
    cin >> n >> m;
    vector <pair <ll, char> > qs, qt;
    char pr = '!';
    for (int i = 0; i < n; i++) {
        string s;
        cin >> s;
        vector <int> d;
        //cout << s << endl;
        for (int j = 0; s[j] != '-'; j++) {
            d.pb(s[j] - '0');
        }
        //reverse(d.begin(), d.end());
        ll x = 0;
        for (auto y : d) {
            x = x * 10 + y;
            //cout << y << endl;
        }
        char c = s.back();
        // cerr << c << endl;
        if (c == pr) {
            qs.back().F += x;
        } else {
            qs.pb({x, c});
        }
        pr = c;
    }
    pr = '!';
    for (int i = 0; i < m; i++) {
        string s;
        cin >> s;
        vector <int> d;
        for (int j = 0; s[j] != '-'; j++) {
            d.pb(s[j] - '0');
        }
        //reverse(d.begin(), d.end());
        ll x = 0;
        for (auto y : d) {
            x = x * 10 + y;
        }
        char c = s.back();
        if (c == pr) {
            qt.back().F += x;
        } else qt.pb({x, c});
        pr = c;
    }
    if (qt.size() == 1) {
        ll res = 0;
        for (int i = 0; i < qs.size(); i++) {
            if (qs[i].F >= qt[0].F && qs[i].S == qt[0].S) res += (qs[i].F - qt[0].F + 1);
        }
        cout << res << endl;
        return 0;
    }
    vector <pair <ll,char> > s;
    for (int i = 1; i < qt.size() - 1; i++) {
        s.pb(qt[i]);
    }
    s.pb({-1, '!'});
    for (int i = 0; i < qs.size(); i++) {
        s.pb(qs[i]);
    }
   // for (auto x : s) cout << x.F << " " << x.S << endl;
   // cout << endl;
    vector <int> p(s.size() + 1, 0);
    for (int i = 1; i < s.size(); i++) {
        int j = p[i - 1];
        while (j > 0 && s[i] != s[j])
            j = p[j - 1];
        if (s[i] == s[j]) j++;
        p[i] = j;
    }
   // for (int i = 0; i < s.size(); i++) cout << p[i] << " ";
    //cout << endl;
    ll res = 0;
    m = qt.size();
    for (int i = 0; i < s.size(); i++) {
        if (p[i] == m - 2) {
            int l =  i - 2 * (m - 2) - 1, r = l + m - 2 + 1;
            if (l < 0 || r >= n) continue;
            if (qs[l].S == qt[0].S && qs[r].S == qt[m - 1].S && qs[l].F >= qt[0].F && qs[r].F >= qt[m - 1].F) res++;
        }
    }
    cout << res << endl;
}
