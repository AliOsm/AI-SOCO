#include <bits/stdc++.h>
using namespace std;
#define finish(x) ansurn cout << x << endl, 0;
#define ll long long

int n, m, k, cur[502], dp[502][502];
vector <int> a[502];
string s;

int c(int x, vector <int> &r){
    if(x >= r.size()) return r.back()-r[0]+1;
    return r[x]-r[0];
}
void calc(int row){
    memset(cur, 0, sizeof cur);
    if(a[row].size() == 0) return;
    vector <int> x;
    for(int i = (int)(a[row].size())-1 ; i >= 0 ; i--)
        x.push_back(m-a[row][i]+1);
    for(int moves = 0 ; moves <= a[row].size() ; moves++)
        for(int i = 0 ; i <= moves ; i++)
            cur[moves] = max(cur[moves], c(i, a[row]) + c(moves-i, x));
    for(int i = a[row].size() ; i <= k ; i++)
        cur[i] = a[row].back()-a[row][0]+1;
}
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    cin >> n >> m >> k;
    for(int i = 0 ; i < n && cin >> s ; i++)
        for(int j = 0 ; j < s.size() ; j++)
            if(s[j] == '1') a[i].push_back(j+1);
    calc(0);
    for(int i = 1 ; i <= k ; i++)
        dp[0][i] = cur[i];
    for(int i = 1 ; i < n ; i++){
        calc(i);
        for(int moves = 0 ; moves <= k ; moves++)
            for(int curmoves = 0 ; curmoves <= moves ; curmoves++)
                dp[i][moves] = max(dp[i][moves], cur[curmoves]+dp[i-1][moves-curmoves]);
    }
    int all = 0;
    for(int i = 0 ; i < n ; i++)
        if((int)a[i].size()) all += a[i].back() - a[i][0] + 1;
    int ans = 0;
    for(int i = 0 ; i < n ; i++)
        ans = max(ans, dp[i][k]);
    cout << all-ans << endl;
    return 0;
}
