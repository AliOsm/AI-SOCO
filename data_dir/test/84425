#include <bits/stdc++.h>
using namespace std;

const int N = 500 + 7;


int dp[N][N][2][2];

int len[N];

vector <int> v[N];

int f(int idx, int sum, int r, int s, int lim, vector <int> &d) {
    if(idx < 0) return r == 0 && sum == 0 && s;
    int lb = r ? d[idx] : 0;
    int res = 0;

    if(~dp[idx][sum][r][s]) return dp[idx][sum][r][s];

    if(!s && idx > lim) res |= f(idx - 1, sum, 1, 0, lim, d);

    if(lb == 0 && s) {
        res |= f(idx - 1, sum, r, s, lim, d);
    }

    for(int i = max(1, lb); i <= 9; i++) {
        if(i <= sum)
            res |= f(idx - 1, sum - i, r && i == lb, 1, lim, d);
    }
    return dp[idx][sum][r][s] = res;
}

void print(int idx, int sum, int r, int s, int lim, vector <int> &d, vector <int> &ans) {
    if(idx < 0) return;
    int lb = r ? d[idx] : 0;

    if(!s && idx > lim && f(idx - 1, sum, 1, 0, lim, d)) {
        print(idx - 1, sum, 1, 0, lim, d, ans);
        return;
    }

    if(!lb && s && f(idx - 1, sum, r, s, lim, d)) {
        print(idx - 1, sum, r, s, lim, d, ans);
        ans.push_back(0);
        return;
    }

     for(int i = max(1, lb); i <= 9; i++) {
        if(i <= sum && f(idx - 1, sum - i, r && i == lb, 1, lim, d)) {
            print(idx - 1, sum - i, r && i == lb, 1, lim, d, ans);
            ans.push_back(i);
            return;
        }
    }
}

int main() {
    ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0);
    for(int i = 0; i < N; i++) v[0].push_back(0);
    int n; cin >> n;
    len[0] = 1;
    for(int i = 1; i <= n; i++) {
        int x; cin >> x;
        memset(dp, -1, sizeof dp);
        f(N - 1, x, 1, 0, len[i - 1] - 1, v[i - 1]);
        print(N - 1, x, 1, 0, len[i - 1] - 1, v[i - 1], v[i]);
        len[i] = v[i].size();
        while(v[i].size() < N) v[i].push_back(0);
    }

    for(int i = 1; i <= n; i++) {
        while(v[i].back() == 0) v[i].pop_back();
        reverse(v[i].begin(), v[i].end());
        for(int y: v[i]) cout << y; cout << endl;
    }
}
