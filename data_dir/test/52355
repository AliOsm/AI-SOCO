#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define x first
#define y second
#define ndl '\n'
#define mp make_pair
#define pb push_back
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define bit __builtin_popcount
#define all(x) x.begin(),x.end()

using namespace std;
using namespace __gnu_pbds;

template<typename T> using indexed_set=tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair<ll,ll> pll;
typedef pair<int,int> pii;
typedef pair<int,ll> pil;
typedef pair<ll,int> pli;
typedef pair<int,ull> piu;
typedef vector<vector<int>> matrix;

const ll INF=1e18+123;
const ld EPS=1e-9;
const int inf=1e9+123;
const int MOD=1e9+7;
const int N=1e3+23;
const int M=1e6+123;
const int dx[]={0,0,1,-1};
const int dy[]={1,-1,0,0};

char c;

int us[N][26],ls[26],u[N][N],l[N][N],t[N*4],n;

void upd(int pos,int val,int v=1,int tl=1,int tr=n){
    if(tl==tr){
        t[v]=val;
        return;
    }
    int tm=tl+tr>>1;
    if(pos<=tm){
        upd(pos,val,v+v,tl,tm);
    }
    else{
        upd(pos,val,v+v+1,tm+1,tr);
    }
    t[v]=max(t[v+v],t[v+v+1]);
}

int get(int l,int r,int v=1,int tl=1,int tr=n){
    if(l>tr || tl>r)return 0;
    if(l<=tl && tr<=r)return t[v];
    int tm=tl+tr>>1;
    return max(get(l,r,v+v,tl,tm),get(l,r,v+v+1,tm+1,tr));
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int m;
    cin>>n>>m;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            cin>>c;
            c-='a';
            for(int k=0;k<26;k++){
                if(k!=c){
                    l[i][j]=max(ls[k],l[i][j]);
                    u[i][j]=max(us[j][k],u[i][j]);
                }
            }
            us[j][c]=i;
            ls[c]=j;
       //     cout<<u[i][j]<<" ";
        }
     //   cout<<endl;
        memset(ls,0,sizeof(ls));
    }
    ll ans=0;
    for(int i=1;i<=m;i++){
        for(int j=1;j<=n;j++){
            upd(j,l[j][i]);
            int c=j,b=u[j][i],a=u[b][i];
            if(!b || !a)continue;
            if(b-a!=c-b)continue;
            int q=a-(c-b);
            if(q<u[a][i])continue;
          //  cout<<i<<" "<<j<<" " <<q+1<<endl;
            ans+=i-get(q+1,j);
        }
    }
    cout<<ans;
    return 0;
}
