#include<bits/stdc++.h>
#define pqi priority_queue <int>
using namespace std;

const int MAXN=1e5+5;

struct trie {
	int total, banyak;
	trie *child[26];
	
	pqi *pq;
}
root, TE;

char C[MAXN];

pqi PQE;

void masuk(trie *now,int X,int Y) {
	//cout<<now<<'\n';
	
	if (X==Y) {
		now->total=X;
		now->banyak=1;
		now->pq=new pqi;
		*now->pq=PQE;
		now->pq->push(Y);
		
		return;
	}
	
	trie *next;
	next=now->child[C[X]-'a'];
	
	//cout<<C[X]<<'\n';
	
	if (next==NULL) {
		trie *baru;
		baru=new trie;
		*baru=TE;
		
		next=baru;
		now->child[C[X]-'a']=next;
	}
	
	masuk(next,X+1,Y);
	
	return;
}

void pindah(pqi *X,pqi *Y) {
	if (X==NULL) {
		return;
	}
	
	if (X==Y) {
		return;
	}
	
	while (!X->empty()) {
		Y->push(X->top());
		X->pop();
	}
	
	return;
}

void hitung(trie *now,int depth) {
	bool jenis;
	jenis=now->banyak;
	
	priority_queue <int> *cpq;
	
	if (jenis) {
		cpq=now->pq;
	}
	else {
		cpq=&PQE;
	}
	
	int i;
	for (i=0;i<26;i++) {
		trie *next;
		next=now->child[i];
		
		if (next!=NULL) {
			hitung(next,depth+1);
			
			now->banyak+=next->banyak;
			now->total+=next->total;
			
			if (next->pq->size()>cpq->size()) {
				cpq=next->pq;
			}
		}
	}
	
	if (jenis) {
		pindah(now->pq,cpq);
	}
	
	for (i=0;i<26;i++) {
		trie *next;
		next=now->child[i];
		
		if (next!=NULL) {
			pindah(next->pq,cpq);
		}
	}
	
	if (!jenis) {
		int maks;
		maks=cpq->top();
		cpq->pop();
		
		now->total-=maks;
		now->total+=depth;
		
		cpq->push(depth);
	}
	
	now->pq=cpq;
	
	//cout<<depth<<' '<<now->total<<'\n';
	
	return;
}

int main () {
	//ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	
	while (!PQE.empty()) {
		PQE.pop();
	}
	
	TE.banyak=0;
	TE.total=0;
	TE.pq=NULL;
	
	int i;
	for (i=0;i<26;i++) {
		TE.child[i]=NULL;
	}
	
	root=TE;
	
	int N;
	cin>>N;
	
	for (i=0;i<N;i++) {
		cin>>C;
		
		int L;
		L=strlen(C);
		
		masuk(&root,0,L);
	}
	
	//return 0;
	
	masuk(&root,0,0);
	hitung(&root,0);
	
	int ans;
	ans=root.total;
	
	cout<<ans<<'\n';
	
	return 0;
}
