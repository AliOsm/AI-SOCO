#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> ii;

const int MAX = 4e3 + 5;
int n, k;
int mat[MAX][MAX];
int cost[MAX][MAX];
int dp[MAX][MAX];
int opt[MAX][MAX];

inline void solve(int segments, int pos, int opt_left, int opt_right) {
    dp[segments][pos] = 1 << 30;
    fori(i, opt_left, opt_right + 1) {
        if(dp[segments][pos] > dp[segments - 1][i] + cost[i + 1][pos]) {
            opt[segments][pos] = i;
            dp[segments][pos] = dp[segments - 1][i] + cost[i + 1][pos];
        }
    }
}

void roll(int segments, int left, int right, int opt_left, int opt_right) {
    if(left == right) {
        solve(segments, left, opt_left, opt_right);
    }
    else if(left < right) {
        int mid = (left + right) / 2;
        solve(segments, mid, opt_left, opt_right);
        roll(segments, left, mid - 1, opt_left, opt[segments][mid]);
        roll(segments, mid + 1, right, opt[segments][mid], opt_right);
    }
}

char line[(int) 1e6 + 5];

int main() {
    scanf("%d %d%*c", &n, &k);
    fori(i, 1, n + 1) {
		gets(line);
		int ptr = 0;
		fori(j, 1, n + 1) {
			mat[i][j] = line[ptr] - '0';
			mat[i][j] += mat[i][j - 1];
			ptr += 2;
		}
    }
    fori(i, 1, n + 1) {
        fori(j, i, n + 1) {
            cost[i][j] += cost[i][j - 1] + (mat[j][j - 1] - mat[j][i - 1]);
        }
    }

    fori(i, 1, n + 1) {
        dp[1][i] = cost[1][i];
    }

    fori(i, 2, k + 1) {
        fori(j, 1, i + 1) {
            opt[i][j] = j - 1;
        }
        roll(i, i + 1, n, i - 1, n);
    }

    printf("%d\n", dp[k][n]);

    return 0;
}
