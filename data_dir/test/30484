#include <bits/stdc++.h>
#define SZ(x) (int)x.size()
typedef long long ll;
const ll mod=1e9+7;
const int SZ=1e5+5;
using namespace std;

ll POW(ll bs,ll ex)
{
    ll res=1LL;
    while(ex>0)
    {
        if(ex%2)
            res=(res*bs) %mod;
        bs=(bs*bs) %mod;
        ex/=2LL;
    }
    
    return res;
}

int main()
{
	ll n; 
	cin>>n;
	
	if(!n) 
	    { cout<<1; return 0; }
	
    ll a=POW(2LL,2*n-1LL);
    ll b=POW(2LL,1*n-1LL);

    cout<<(a+b) %mod<<' ';
}
/*
- suppose :
    up   -> num of upward triangle and 
    down -> num of downward triangle

- Initially :
    up = 1   and down = 0   then
    up = 3   and down = 1   then
    up = 10  and down = 6   then
    up = 36  and down = 28  then
    up = 136 and down = 120 then
    and so on ...

- conculsion :
    each n we split each triangle to 4 triangles 
    it's mean at n we have 4^n triangle
    we want to want how many of 4^n are upward

- suppose :
    a -> num of upward triangle
    b -> num of downward triangle
    it's mean a + b = 4^n    ----------------------> (1)

- fact :
    at n=0 , up = 1   and down = 0   then
    at n=1 , up = 3   and down = 1   ratio is 3/1   then
    at n=2 , up = 10  and down = 6   ratio is 5/3   then
    at n=3 , up = 36  and down = 28  ratio is 9/7   then
    at n=4 , up = 136 and down = 120 ratio is 17/15 then
    and so on ...

- conculsion :
    we see that ration of upward / downward => (2^n)+1 / (2^n)-1
    so : a' = [ (2^n)+1 ] ,  b' = [ (2^n)-1 ]   -------> (2)
    so : a'c + b'c = 4^n    ----------------------> (3)
    such that c is constant
    we want to know a'c ?
    
    also we see that sum of a' + b' = [ (2^n)+1 ] + [ (2^n)-1 ]
                            a' + b' = [ (2^n)+1 + (2^n)-1 ]
                            a' + b' = [ 2*(2^n) ]
                            a' + b' = [ 2^(n+1) ]    ------------------> (4)

    from (2) : a' = [ (2^n)+1 ] ,  b' = [ (2^n)-1 ]
    from (3) : a'c + b'c = 4^n
    we want to know a'c ?
    
    [ a' + b' ] * c = 4^n
    from (4) : a' + b' = [ 2^(n+1) ]
    
    [ 2^(n+1) ] * c = 4^n
    so c = 4^n / 2^(n+1)
       c = 2^(2n) / 2^(n+1)
       a'c = [ (2^n)+1 ] * 2^(2n) / 2^(n+1)
       a'c = [ 2^(3n) + 2^(2n) ] / 2^(n+1)
       a'c = 2^(2n-1) + 2^(n-1)
       
*/