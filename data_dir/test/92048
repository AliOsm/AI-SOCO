#pragma GCC optimize("Ofast")
#include <bits/stdc++.h>
#define pb push_back
#define F first
#define S second
#define ins insert
#define mp make_pair
#define fo(i, n1, n, x) for(int i = n1; i <= n; i += x)
#define foo(i, n, n1, x) for(int i = n; i >= n1; i -= x)
#define bit __builtin_popcount
#define md (l + ((r - l) / 2))
#define all(x) x.begin(),x.end()
#define ll long long
#define ld long double
#define eb emplace_back
#define ub upper_bound
#define lb lower_bound
#define ios ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define file(s) if (fopen(s".in", "r")) freopen(s".in", "r", stdin), freopen(s".out", "w", stdout)

using namespace std;

const int N = 3e5 + 11, mod = 1e9 + 7, mod2 = 998244353;
const int MAX = 6e5 + 11;
const int INF1 = 2e9 + 11;
const ll INF2 = 2e18 + 11;
const int base = 500;
const int P = 31;
const int dx[] = {1, -1, 0, 0, 1, 1, -1, -1};
const int dy[] = {0, 0, 1, -1, 1, -1, 1, -1};
const double EPS = 1e-9;
const double PI = acos(-1.0);

int t, n, m, col[N], a, b, q;
ll pw[N];
vector <int> g[N];
inline void dfs(int v, int cur) {
    if (cur == 1) ++a;
    else ++b;
    col[v] = cur;
    for (int & to : g[v]) if (!col[to]) dfs(to, 3 - cur);
    for (int & to : g[v]) if (col[to] == col[v]) t = 1;
}
main() {
    file("lca");
    ios;
    pw[0] = 1;
    fo(i, 1, 3e5, 1) pw[i] = (pw[i - 1] * 2) % mod2;
    cin >> q;
    while (q--) {
        cin >> n >> m;
        fo(i, 1, n, 1) g[i].clear(), col[i] = 0;
        fo(i, 1, m, 1) {
            int u, v;
            cin >> u >> v;
            g[u].eb(v);
            g[v].eb(u);
        }
        ll ans = 1;
        fo(i, 1, n, 1) {
            if (!col[i]) {
                t = 0;
                a = b = 0;
                dfs(i, 1);
                ans = (ans * ((pw[a] + pw[b]) % mod2)) % mod2;
                if (t) break;
            }
        }
        if (t) cout << "0\n";
        else cout << ans << "\n";
    }
    return 0;
}
/**

*/
