#include <bits/stdc++.h>

using namespace std;

typedef long long LL;

const int maxn=200005;
const int maxm=2000005;

struct qlt
{
    int n,num1;
    int b[maxn],next[maxm],a[maxm];
    int dfn[maxn],low[maxn];
    int stack[maxn],belong[maxn];
    bool instack[maxn];
    int num[maxn],topo[maxn];
    int sum2;
    int scc,top,index;
    vector<int> v[maxn];
    void init(int nn)
    {
        n=nn;num1=0;
        memset(b,0,sizeof(b));
    }
    void addedge(int x,int y)
    {
        ++num1;a[num1]=y;next[num1]=b[x];b[x]=num1;
    }
    void tarjan(int x)
    {
        int y;
        low[x]=dfn[x]=++index;
        stack[top++]=x;
        instack[x]=true;
        for (int i=b[x];i>0;i=next[i])
        {
            y=a[i];
            if (!dfn[y])
            {
                tarjan(y);
                if (low[x]>low[y]) low[x]=low[y];
            }
            else if (instack[y]&&low[x]>dfn[y])
                low[x]=dfn[y];
        }
        if (low[x]==dfn[x])
        {
            scc++;
            do
            {
                y=stack[--top];
                instack[y]=false;
                belong[y]=scc;
                v[scc].push_back(y);
                sum2++;
                topo[y]=sum2;
                num[scc]++;
            }
            while (y!=x);
        }
    }
    void solve()
    {
        memset(dfn,0,sizeof(dfn));
        memset(instack,false,sizeof(instack));
        memset(num,0,sizeof(num));
        index=scc=top=sum2=0;
        for (int i=0;i<n;++i)
            if (!dfn[i]) tarjan(i);
    }
}mp;

int n,m,nn,x;
vector<int> v[maxn],vv;

int main()
{
	scanf("%d%d",&n,&m);
	mp.init(2*m);
	for (int i=1;i<=n;++i)
	{
		scanf("%d",&nn);
		while (nn--)
		{
			scanf("%d",&x);
			v[i].push_back(x);
		}
		if (i==1) continue;
		int len=min(v[i-1].size(),v[i].size());
		int pos=-1;
		for (int j=0;j<len;++j)
		{
			if (v[i][j]!=v[i-1][j])
			{
				pos=j;
				break;
			}
		}
		if (pos==-1)
		{
			if (v[i].size()<v[i-1].size())
			{
				printf("No\n");
				return 0;
			}
		}
		else
		{
			int a=v[i-1][pos],b=v[i][pos];
			if (a==b) continue;
			a--;b--;
			if (a>b)
			{
				mp.addedge(2*a+1,2*a);
				mp.addedge(2*b,2*b+1);
			}
			else
			{
				mp.addedge(2*a+1,2*b+1);
				mp.addedge(2*b,2*a);
			}
		}
	}
	mp.solve();
	for (int i=0;i<m;++i)
	{
		if (mp.belong[2*i]==mp.belong[2*i+1])
		{
			printf("No\n");
			return 0;
		}
	}
	vv.clear();
	for (int i=0;i<m;++i) if (mp.topo[2*i]<mp.topo[2*i+1]) vv.push_back(i+1);
	printf("Yes\n");
	printf("%d\n",(int)vv.size());
	for (int i=0;i<vv.size();++i) printf("%d ",vv[i]);
	return 0;
}