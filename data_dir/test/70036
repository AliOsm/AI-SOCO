#include <bits/stdc++.h>

using namespace std;

#define MOD 1000000007
#define ll long long int
#define ld long double
#define pb push_back
#define mkp make_pair
#define pii pair<int, int> 
#define pll pair<long long int, long long int>
#define sci(x) scanf("%d", &x)
#define scl(x) scanf("%lld", &x)
#define fi first
#define sc second
#define eps 1e-9

vector<ll> v[100001], lev[100001];
ll W[100001], L[100001], P[20][100001], S[100001];
ll Cost[100001], Len[100001];

void insert(ll x) {
	for (ll i = 1; i < 20; ++i) {
		P[i][x] = P[i-1][P[i-1][x]];
	}
}

ll query(ll x, ll k) {
	for (ll i = 19; i >= 0; --i) {
		if (k&(1<<i)) x = P[i][x];
	}

	return x;
}

void dfs(ll x, ll p, ll l) {
	L[x] = l;
	lev[l].pb(x);
	P[0][x] = p;
	insert(x);
	S[x] += W[x];
	for (ll y: v[x]) {
		if (y == p) continue;
		S[y] = S[x];
		dfs(y, x, l+1);
	}
}

ll find_node(ll x, ll y, ll s, ll l) {
	ll start = 1;
	ll end = L[x];
	ll idx = -1;
	while (start <= end) {
		ll mid = (start + end) >> 1;
		ll k = L[y] - mid;
		ll z = query(y, k);
		ll c_here = Cost[y] + S[x] - S[P[0][z]];
		ll l_here = Len[y] + k;
		if (c_here <= s && l_here <= l) {
			idx = z;
			end = mid - 1;
		} else {
			start = mid + 1;
		}
	}

	return idx;
}

int main()
{
	ios_base::sync_with_stdio(false);cout.tie(0);cin.tie(0);

	ll n, s, l, i, j, k, x, y, z;
	cin >> n >> l >> s;
	for (i = 1; i <= n; ++i) cin >> W[i];
	for (i = 1; i <= n; ++i) {
		if (W[i] > s) {
			cout << -1 << endl;
			return 0;
		}
	}
	for (i = 2; i <= n; ++i) {
		cin >> x;
		v[x].pb(i);
	}
	dfs(1, 0, 1);
	ll ans = 0;
	for (i = n; i >= 1; --i) {
		for (ll x: lev[i]) {
			Cost[x] = W[x];
			Len[x] = 1;
			ll child = 0, node = -1, cost = 1e18, len = 0;
			for (ll y: v[x]) {
				if (y == P[0][x]) continue;
				child += 1;
				
				ll idx = find_node(x, y, s, l);
				if (idx == -1) continue;

				ll c_here = Cost[y] + S[x] - S[P[0][idx]];
				ll l_here = L[y] - L[idx];
				if (l_here > len) {
					cost = c_here;
					len = l_here;
					node = y;
				} else if (l_here == len && c_here < cost) {
					cost = c_here;
					node = y;
				}
			}
			if (node == -1) {
				ans += child;
			} else {
				ans = ans + child - 1;
				Cost[x] += Cost[node];
				Len[x] += Len[node];
			}
		}
	}
	ans += 1;
	cout << ans << endl;

	return 0;
}
