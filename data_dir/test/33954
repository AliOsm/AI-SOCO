/* In the name of Allah */
#include<bits/stdc++.h>
using namespace std;

const int N = 1e6 + 5;
vector<int> vec, adj[3 * N];
int n, a[N], b[N];
bool mark[3 * N];

bool dfs(int u) {
	mark[u] = true;
	for (auto v: adj[u])
		if (!mark[v]) {
			int x = a[v] ^ b[v] ^ u;
			if (!(mark[v] = !mark[x]) || !dfs(x))
				return false;
		}
	return true;
}

int dfs_back(int u) {
	mark[u] = true;
	int ans = adj[u].size() - 2;
	for (auto v: adj[u])
		if (!mark[v])
			ans += dfs_back(v);
	return ans;
}

void build_graph() {
	for (int i = 0; i < n; i++) {
		vec.push_back(a[i]);
		vec.push_back(b[i]);
	}
	sort(vec.begin(), vec.end());
	vec.resize(unique(vec.begin(), vec.end()) - vec.begin());
	for (int i = 0; i < n; i++) {
		adj[i].push_back(a[i] = lower_bound(vec.begin(), vec.end(), a[i]) - vec.begin() + n);
		adj[i].push_back(b[i] = lower_bound(vec.begin(), vec.end(), b[i]) - vec.begin() + n);
		adj[a[i]].push_back(i), adj[b[i]].push_back(i);
	}
}

bool check(int k) {
	memset(mark, true, sizeof mark);
	fill(mark, mark + n + k, false);
	for (int i = k; i < vec.size(); i++)
		if (!dfs(n + i))
			return false;
	for (int i = 0; i < n; i++)
		if (!mark[i] && dfs_back(i) > 0)
			return false;
	return true;
}

void read_input() {
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i] >> b[i];
}

void write_output() {
	build_graph();
	int L = -1, R = vec.size();
	while (R - L > 1) {
		int mid = (L + R) / 2;
		(check(mid + 1)? R: L) = mid;
	}
	cout << (R < vec.size()? vec[R]: -1);
}

int main() {
	ios:: sync_with_stdio(0), cin.tie(0), cout.tie(0);
	read_input(), write_output();
	return 0;
}
