# include <stdio.h>
# include <bits/stdc++.h>


#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace std;

inline bool isvowel (char c) {
	c = tolower(c);
    if (c == 'a' || c == 'e' || c == 'i' || c == 'y' || c == 'o' || c == 'u') return 1;
    return 0;
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 6e6 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, m, k;

ll get (ll x) {                                                      
    ll y = x / (k - 1);  
   // cout << 
    return (y * x - (k - 1) * ((1ll * y * (y + 1) / 2) % mod))%mod;
}
ll get(int l, int r) {
    if (l > r)
        return 0;
    return get (r - l + 1);
}

int a[N];
int l[N], r[N];
stack < int > st;


int main () {
    cin >> n >> k;
    For (i, 1, n) cin >> a[i];
    
    For (i, 1, n) {
        while (st.size() && a[st.top()] < a[i]) st.pop();
        if (st.empty()) l[i] = 1;
        else l[i] = st.top() + 1;
        st.push(i);
    }
    
    while (st.size()) st.pop();
    
    FOr (i, n, 1) {
        while (st.size() && a[st.top()] <= a[i]) st.pop();
        if (st.empty()) r[i] = n;
        else r[i] = st.top() - 1;
        st.push(i);
    }
    int ans = 0;
    For (i, 1, n) {
        ll cnt = (get(l[i], r[i]) - get(l[i],i - 1) - get(i + 1, r[i]) + mod + mod) % mod;
    //    cout << get(l[i], r[i]) << '\n';
        ans = (cnt * a[i] + ans) % mod;
    }
    
    cout << ans << '\n';
    
    return Accepted;
}

// Coded By OB