// Sky's the limit :)
#include<bits/stdc++.h>
using namespace std;
#define int long long

const int N = 1e5 + 5;
int n, m;
vector<int> adj[N];
int cat[N];
bool vis[N];
int deg[N];
int cnt[N], ans;

void dfs(int v, int curr) {
    vis[v] = true;
    cnt[v] = curr; 
    //cout << v << " : " << curr << '\n';
    for (int u : adj[v]) {
        if (!vis[u]) {
            if(curr > m)
                return;
            //cout << u  << ' ' << ' ' << curr << '\n';
            dfs(u, (cat[u] == 0 ? 0 : cat[u] + curr));
        }
    }
}

signed main()
{
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    
    //int t = 1; cin >> t; while(t--)
    {
        cin >> n >> m;
        for(int i = 1; i <= n; i++)
            cin >> cat[i];
        for(int i = 1; i <= n - 1; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
            deg[u]++;
            deg[v]++;
        }

        for(int i = 1; i <= n; i++)
            cnt[i] = INT_MAX;

        dfs(1, cat[1]);
        for(int i = 2; i <= n; i++) {
            if(cnt[i] <= m && deg[i] == 1) {
                //cout << i << ' ';
                ans++;
            }
        }

        cout << ans << '\n';
    }
    
    cerr << "Time elapsed : " << 1.0 * clock() / CLOCKS_PER_SEC << " sec \n";
    return 0;
}

