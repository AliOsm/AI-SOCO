#pragma comment(linker, "/STACK:256000000")

#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <time.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <random>
#include <bitset>
#include <unordered_set>
#include <unordered_map>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
const int INF = (int)(1e9 + 1e5);
const int64 LINF = (int64)(4e18);
const double EPS = 1e-9;
#define sq(x) ((x)*(x))
#define FAIL() (*(int*)(0))++
const int MOD = 1000000007;
const int BASE = 1000003;

const int MAXN = 1000005;

struct evnt
{
	int num;
	int pos;

	evnt(int pos, int num) : pos(pos), num(num) {}

	bool operator < (const evnt &oth) const
	{
		return pos < oth.pos;
	}
};

int n;
unordered_map<string, int> mapa_num;
unordered_map<int, unordered_set<int> > mapa_pos;
char buf[MAXN];
string s[MAXN];
vector <evnt> ev;
int sc;

void init()
{
	scanf("%d", &n);
	for (int i = 1; i <= n; i++)
	{
		int k;
		scanf("%s%d", &buf, &k);
		string s = buf;
		int num = mapa_num[s];
		if (!num)
		{
		    num = mapa_num[s] = ++sc;
		    ::s[sc] = s;
		}
		for (int j = 0; j < k; j++)
		{
			int p; scanf("%d", &p);
			mapa_pos[num].insert(p);
		}
	}
}

void solve()
{
	init();
	for (auto it = mapa_pos.begin(); it != mapa_pos.end(); it++)
	{
		int num = it->first;
		//printf("%s\n", s[sc].c_str());
		for (auto it2 = it->second.begin(); it2 != it->second.end(); it2++)
		{
			ev.push_back(evnt(*it2, num));
			//printf("%d ", *it2);
		}
		//printf("\n");
	}
	sort(ev.begin(), ev.end());
	int ptr = 0, num = 0, pos = 0;
	for (int i = 1; ptr < (int)ev.size() || num; i++)
	{
		while (ptr < (int)ev.size() && ev[ptr].pos == i)
		{
			if (!num || s[num].size() - pos < s[ev[ptr].num].size())
			{
				num = ev[ptr].num;
				pos = 0;
			}
			++ptr;
		}
		if (num)
		{
			printf("%c", s[num][pos++]);
			if (pos == (int)s[num].size())
			{
				num = 0;
			}
		}
		else
		{
			printf("a");
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
	freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
#endif
	srand(333);
	int tests = 1; //scanf("%d", &tests);
	for (int test = 1; test <= tests; test++)
	{
		solve();
	}

	return 0;
}