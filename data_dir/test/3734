/**
 *    +--+--+--++--++--In the name of ALLAH--++--++--+--+--+
 *
 *    author:  skmonir
 *    created: 20-Jul-2019 14:41:12
**/

#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define mod                 1000000007LL
#define len(x)              (int) x.size()
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = 2e5 + 7;
const int inf = 1e9 + 7;

struct CHT_MIN {
    // slopes are non-increasing
    // for non-decreasing slopes, use -M in add() and -X in get()
    vector <long long> m, c;

    bool bad(int l1, int l2, int l3) {
        return 1.0 * (c[l2] - c[l1]) * (m[l1] - m[l3]) >=
               1.0 * (c[l3] - c[l1]) * (m[l1] - m[l2]);
    }

    void add(long long M, long long C) {
        m.emplace_back(M); c.emplace_back(C);
        int sz = m.size();
        while (sz >= 3 && bad(sz - 3, sz - 2, sz - 1)) {
            m.erase(m.end() - 2);
            c.erase(c.end() - 2);
            sz--;
        }
    }

    long long f(int idx, long long X) {
        return m[idx] * X + c[idx];
    }

    long long get(long long X) {
        int lo = 0, hi = (int) m.size() - 1;
        while (hi - lo >= 5) {
            int mid1 = (lo + lo + hi) / 3;
            int mid2 = (lo + hi + hi) / 3;
            if (f(mid1, X) > f(mid2, X)) {
                lo = mid1 + 1;
            } else {
                hi = mid2 - 1;
            }
        }
        long long ret = f(lo, X);
        for (int i = lo + 1; i <= hi; ++i) {
            ret = min(ret, f(i, X));
        }
        return ret;
    }
} cht;

long long a[N], sum1[N], sum2[N];

int solve() {
    int n; Int(n);
    FOR (i, 1, n) {
        Int(a[i]);
    }

    cht.add(0LL, 0LL);
    long long res = 0;
    FOR (i, 1, n) {
        sum1[i] = sum1[i - 1] + a[i] * i;
        sum2[i] = sum2[i - 1] + a[i];
        cht.add(-1LL * i, sum1[i] - sum2[i] * i);
        umax(res, sum1[i] - cht.get(-sum2[i]));
    }

    printf("%lld\n", res);

    return 0;
}

int main() {
    int tests = 1, CaseNo = 0; //Int(tests);
    while (tests--) {
        //printf("Case %d: ", ++CaseNo);
        solve();
    }
    return 0;
}