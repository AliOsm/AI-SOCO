#include <bits/stdc++.h>
using namespace std;

inline void boostIO() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
}

typedef pair<int, int> pii;

const int N = 10010;
const int M = N * 3;
const int oo = 1e9;

int n, m, k, r, c, i, j, ans, cost[M];
int dx[] = { 1, 0, -1, 0 };
int dy[] = { 0, -1, 0, 1 };
vector<pii> cell;
vector<int> row[N], col[N];
map<pii, int> cellsID;
vector<pii> edges[M];

inline void addEdge(int a, int b, int w) {
	edges[a].push_back({ b, w });
}

inline void bfs(int v) {
	for (i = 0; i < M; ++i) cost[i] = oo;

	deque<int> q;
	cost[v] = 0;
	q.push_back(v);

	while (!q.empty()) {
		v = q.front();
		q.pop_front();

		for (auto p : edges[v]) {
			int to = p.first;
			int w = p.second;

			if (cost[to] > cost[v] + w) {
				cost[to] = cost[v] + w;

				if (w == 0)
					q.push_front(to);
				else
					q.push_back(to);
			}
		}
	}
}

int main() {
	boostIO();
	cin >> n >> m >> k;

	for (i = 0; i < k; ++i) {
		cin >> r >> c;
		cell.push_back({ r, c });
		cellsID[{ r, c }] = i;
		row[r].push_back(i);
		col[c].push_back(i);
	}

	for (i = 0; i < k; ++i) {
		for (j = 0; j < 4; ++j) {
			r = cell[i].first  + dx[j];
			c = cell[i].second + dy[j];

			auto it = cellsID.find({ r, c });

			if (it != cellsID.end()) {
				addEdge(i, it->second, 0);
			}
		}
	}

	for (i = 1; i <= n; ++i)
		for (j = -1; j <= 1; ++j)
			for (int p : row[i + j])
				addEdge(k + i - 1, p, 0), addEdge(p, k + i - 1, 1);

	for (i = 1; i <= m; ++i)
		for (j = -1; j <= 1; ++j)
			for (int p : col[i + j])
				addEdge(k + n + i - 1, p, 0), addEdge(p, k + n + i - 1, 1);

	bfs(cellsID[{ 1, 1 }]);

	ans = min(cost[k + n + m - 1], cost[k + n - 1]);

	auto it = cellsID.find({ n, m });

	if (it != cellsID.end()) {
		ans = min(ans, cost[it->second]);
	}

	cout << (ans >= oo ? -1 : ans) << endl;
	return 0;
}