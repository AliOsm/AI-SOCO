#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327
#endif // M_PI
#define endl "\n"
#define S struct
#define X first
#define Y second
#define V vector
#ifndef __linux__
#define LLD "%I64d"
#else
#define LLD "%ll""d"
#endif
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
using namespace std;
typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
S Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;
S FAIL { FAIL () { cout << "CHANGE!!!" << endl;}};

vector <LL> x;
vector <LL> a;
vector <LL> b;
vector <LL> c;
vector <LL> d;

LL dist(int i, int j)
{
    if (j < i) {
        return abs(x[i] - x[j]) + c[i] + b[j];
    } else {
        return abs(x[i] - x[j]) + d[i] + a[j];
    }
}

int main()
{
    int n, s, e;
    cin >> n >> s >> e;
    --s, --e;
    x.resize(n);
    a.resize(n);
    b.resize(n);
    c.resize(n);
    d.resize(n);
    GET(x, n);
    GET(a, n);
    GET(b, n);
    GET(c, n);
    GET(d, n);
    vector <int> path = {s, e};
    LL res = dist(s, e);
    FOR (i, 0, n) {
        if (i == s || i == e) {
            continue;
        }
        LL tres = LLONG_MAX;
        int pos = -1;
        FOR (j, 0, int(path.size()) - 1) {
            LL t = dist(path[j], i) + dist(i, path[j + 1]) - dist(path[j], path[j + 1]);
            if (t < tres) {
                tres = t;
                pos = j;
            }
        }
        path.insert(path.begin() + pos + 1, i);
        res += tres;
    }
    cout << res;
}
