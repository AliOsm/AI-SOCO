#include<bits/stdc++.h>
using namespace std;
vector<int>vec, v[2];
int main()
{
    int n, m, x;
    scanf("%d %d", &n, &m);
    vec.push_back(0);
    for(int i=0; i<n; i++)
        scanf("%d", &x), vec.push_back(x);
    vec.push_back(m);
    for(int i=0; i<vec.size(); i++)
        v[0].push_back(0), v[1].push_back(0);
    bool f= 0;
    for(int i=vec.size()-2; i>=0; i--)
    {
        f^= 1;
        if(f)v[f][i]= vec[i+1]-vec[i]+v[f^1][i+1];
        else v[f][i]= v[f^1][i+1];
    }
    f= 1;
    for(int i=vec.size()-2; i>=0; i--)
    {
        f^= 1;
        if(f)v[f][i]= vec[i+1]-vec[i]+v[f^1][i+1];
        else v[f][i]= v[f^1][i+1];
    }
    f= 1;
    int res= 0, tot= 0;
    for(int i=1; i<vec.size()-1; i++, f)
    {
        f^= 1;
        if(vec[i-1]!=vec[i]-1)
        {
            if(!f)res= max(res, vec[i]-vec[i-1]-1+tot+v[f^1][i]);
            else res= max(res, 1+tot+v[f^1][i]);
        }
        if(vec[i+1]!=vec[i]+1)
        {
            if(f)res= max(res, 1+tot+v[f][i+1]);
            else res= max(res, tot+vec[i]-vec[i-1]+vec[i+1]-vec[i]-1+v[f][i+1]);
        }
        if(!f)tot+= (vec[i]-vec[i-1]);
    }
    if(f)tot+= (m-vec[n]);
    res= max(res, tot);
    printf("%d\n", res);
    return 0;
}
