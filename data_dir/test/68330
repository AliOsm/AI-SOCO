#include <bits/stdc++.h>
#define pb push_back

typedef long long ll;
typedef long double ld;

using namespace std;

const int N = 1e6 + 10;
int s[N], a[N], b[N], ne[N], unb[N];
int n, m, k;


bool check(int len){
    int prev = 0;
    for(int x = 0; x <= n; x++){
        if(prev < x){
            return false;
        }
        if(!b[x]){
            prev = x + len;
        }
    }
    return true;
}

void need(int len){
    int z = 0;
    ne[len] = 0;
    while(z < n){
        ne[len]++;
        if(z != 0 && unb[z] == z - len){
            ne[len] = -1;
            return;
        }
        z = unb[z];
        z += len;
    }
}

void solve(int l, int r){
    if(ne[l] == ne[r]){
        for(int i = l + 1; i < r; i++) ne[i] = ne[l];
        return;
    }
    int m = (l + r) / 2;
    if(m != l && m != r) need(m);
    if(l != m) solve(l, m);
    if(m != r){
        if(m + 1 != r) need(m + 1);
        solve(m + 1, r);
    }
}
int main(){

    scanf("%d%d%d", &n, &m, &k);
    for(int i = 1; i <= m; i++) scanf("%d", &s[i]), b[s[i]] = 1;
    for(int i = 1; i <= k; i++) scanf("%d", &a[i]);

    if(b[0] == 1){ 
        cout << -1 << endl;
        return 0;
    }

    unb[0] = 0;
    for(int i = 1; i <= n; i++){
        if(b[i] == 0) unb[i] = i;
        else unb[i] = unb[i - 1];
    }

    if(!check(k)){
        cout << -1 << endl;
        return 0;
    }
    memset(ne, -1, sizeof(ne));
    // definitely possible
    need(1);
    need(k);
    solve(1, k);

    ll minans = 1e18;
    for(int i = 1; i <= k; i++){
        if(ne[i] != -1){
            minans = min(minans, ne[i] * 1ll * a[i]);
        }
    }
    cout << minans << endl;

    return 0;
}