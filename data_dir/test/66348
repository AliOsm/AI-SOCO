#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> PI;
vector<int> g[200010],ans;
int stk[200010],low[200010],dfn[200010],scc[200010],top,idx,scc_idx;
bool inStack[200010];
void tarjan(int u){
	low[u]=dfn[u]=++idx;
	stk[++top]=u;
	inStack[u]=true;
	for(int& v:g[u]){
		if(!dfn[v]){
			tarjan(v);
			low[u]=min(low[u],low[v]);
		}else if(inStack[v])
			low[u]=min(low[u],dfn[v]);
	}
	if(low[u]==dfn[u]){
		int v;
		scc_idx++;
		do{
			v=stk[top--];
			inStack[v]=false;
			scc[v]=scc_idx;
		}while(u!=v);
	}
}
vector<int> pre,cur;
int main(){
	int n,m,l,x;
	scanf("%d%d",&n,&m);
	bool no_solution=false;
	for(int i=1;i<=n;i++){
		scanf("%d",&l);
		cur.clear();
		for(int j=0;j<l;j++){
			scanf("%d",&x);
			cur.push_back(x);
		}
		if(i>1){
			l=min(l,(int)pre.size());
			bool diff=false;
			for(int j=0;j<l;j++){
				if(pre[j]!=cur[j]){
					diff=true;
					if(pre[j]<cur[j]){
						g[pre[j]].push_back(cur[j]);
						g[cur[j]+m].push_back(pre[j]+m);
					}else{
						g[pre[j]+m].push_back(cur[j]);
						g[pre[j]].push_back(pre[j]+m);
						g[cur[j]+m].push_back(cur[j]);
					}
					break;
				}
			}
			if(!diff && pre.size()>cur.size()) no_solution=true;
		}
		pre.swap(cur);
	}
	for(int i=1;i<=2*m;i++)
		if(!dfn[i]) tarjan(i);
	for(int i=1;i<=m;i++){
		if(scc[i]==scc[i+m]) no_solution=true;
		if(scc[i]>scc[i+m]) ans.push_back(i);
	}
	if(no_solution) puts("No\n");
	else{
		puts("Yes");
		printf("%d\n",(int)ans.size());
		for(int& x:ans) printf("%d ",x);
		puts("");
	}
	return 0;
}