/*
Nahid Hossain
Jahangirnagar University
Roll:54

*/
#include<bits/stdc++.h>
#define ll          long long int
#define db          double
#define pf          printf
#define sf          scanf
#define ff          first
#define ss          second
#define clr         clear()
#define sz          size()
#define pb          push_back
#define mk          make_pair
#define pi          acos(-1)
#define rev(v)      reverse(v.begin(),v.end())
#define sor(v)      sort(v.begin(),v.end())
#define inf         999999999999999999
#define mod         1000000007
#define eq          =
#define ull         unsigned long long int
#define f(i,k,n)    for(ll i=k;i<n;i++)
#define fr(i,n,k)   for(i=n;i>=k;i--)
#define ent(a)      scanf("%lld",&a)
#define ent2(a,b)   scanf("%lld%lld",&a,&b)
#define ent3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define mem(a)      memset(a,0,sizeof(a))
#define vec(v,s)    vector<ll>v[s]
#define arr(a,s)    ll a[s];
//#define check(n,pos) (n&(1<<pos))
//#define set(n,pos)  (n|(1<<pos))
//knight and king//
int dr[]= {2,2,-2,-2,1,-1,1,-1};
int dc[]= {1,-1,1,-1,2,2,-2,-2};
int dr1[]= {0,0,1,1,1,-1,-1,-1};
int dc1[]= {1,-1,1,0,-1,0,1,-1};
int dr2[]= {0,0,1,-1};
int dc2[]= {1,-1,0,0};
////////////////////////////
using namespace std;
#define ma 100001
struct data
{
 ll one,zero,lazy;

 void upd()
 {
  ll p=one;one=zero;zero=p;
 }
};

data tree[21][3*ma+5];
void build(ll n,ll b,ll e,ll nod,ll val)
{
 if(b==e)
 {
  f(i,0,21)
  {
   ll p=val&(1<<i);
   if(p>0)tree[i][n].one=1;
   else tree[i][n].zero=1;
  }
  return ;
 }
 ll mid=(b+e)>>1,l=n*2,r=l+1;
 if(nod<=mid)build(l,b,mid,nod,val);
 else build(r,mid+1,e,nod,val);
f(i,0,21)
{
 tree[i][n].one=tree[i][l].one+tree[i][r].one;
 tree[i][n].zero=tree[i][l].zero+tree[i][r].zero;
}
}


void update(ll x,ll n,ll b,ll e,ll b1,ll e1)
{
 if(b>e1||e<b1)return;
 if(b>=b1&&e<=e1)
 {
  tree[x][n].lazy++;
  tree[x][n].upd();
  return ;
 }

 ll mid=(b+e)>>1,l=n*2,r=l+1;

 if(tree[x][n].lazy>0)
 {
  ll p=tree[x][n].lazy;
  if(p%2==1)
  {
   tree[x][l].upd();
   tree[x][r].upd();
  }
  tree[x][l].lazy+=p;
  tree[x][r].lazy+=p;
  tree[x][n].lazy=0;
 }

 update(x,l,b,mid,b1,e1);
 update(x,r,mid+1,e,b1,e1);



 tree[x][n].one=tree[x][l].one+tree[x][r].one;
 tree[x][n].zero=tree[x][l].zero+tree[x][r].zero;
}


ll  query(ll n,ll b,ll e,ll b1,ll e1)
{
 //cout<<"yes "<<x<<endl;
 if(b>e1||e<b1)return 0;
 if(b>=b1&&e<=e1)
 {
  ll s=0;
  f(i,0,21)
  {
   s=s+tree[i][n].one*(1<<i);
  }
  return s;
 }

 ll mid=(b+e)>>1,l=n*2,r=l+1;
f(i,0,21)
{
 if(tree[i][n].lazy>0)
 {
  ll p=tree[i][n].lazy;
  if(p%2==1)
  {
   tree[i][l].upd();
   tree[i][r].upd();
  }
  tree[i][l].lazy+=p;
  tree[i][r].lazy+=p;
  tree[i][n].lazy=0;
 }
}

 ll p=query(l,b,mid,b1,e1);
 ll p1=query(r,mid+1,e,b1,e1);

 return p+p1;
}





int main()
{

 ll n,i,j;
 ent(n);

  mem(tree);
  f(i,1,n+1)
  {
   ll x;
   ent(x);
   build(1,1,n,i,x);
  }


  ll m;
  ent(m);
  while(m--)
  {
   ll p;
   ent(p);
   if(p==1)
   {
    ll x,y;
    ent2(x,y);
    ll s=0;
    s=query(1,1,n,x,y);
    pf("%lld\n",s);

     //cout<<tree[0][1].one<<" "<<"yes"<<endl;
   }
   else
   {
    ll l,r,x;
    ent3(l,r,x);
    f(i,0,21)
    {
     ll q=x&(1<<i);
     if(q==0)continue;
     update(i,1,1,n,l,r);
    }
   }
  }



 return 0;
}
