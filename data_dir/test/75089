#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define ld long double
#define oo 666666666

int A[100001];
int ats[100001];
int seg[400001][2];
int on[333];
int le[333],ri[333];

void build(int c, int l, int r)
{
    if(l==r)
    {
        seg[c][0]=A[r];
        seg[c][1]=0;
        return;
    }
    int m = (l+r)/2;
    build(2*c,l,m);
    build(2*c+1,m+1,r);
    seg[c][1]=0;
    seg[c][0]=min(seg[2*c][0],seg[2*c+1][0]);
}

void lazy(int c, int l, int r)
{
    seg[c][0]+=seg[c][1];
    if(l!=r)seg[2*c][1]+=seg[c][1],seg[2*c+1][1]+=seg[c][1];
    seg[c][1]=0;
}

void inc(int c, int l, int r, int L, int R, int x)
{
    lazy(c,l,r);
    if(l>r || l > R || r < L)return;
    if(l>=L && r<=R)
    {
        seg[c][1]+=x;
        lazy(c,l,r);
        return;
    }

    int m = (l+r)/2;
    inc(2*c,l,m,L,R,x);
    inc(2*c+1,m+1,r,L,R,x);
    seg[c][0]=min(seg[2*c][0],seg[2*c+1][0]);
}

int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int n,m;
    cin>>n>>m;
    for(int i=1; i<=n; i++)
        cin>>A[i];

    build(1,1,n);

    for(int i=1; i<=m; i++)
        {
            cin>>le[i]>>ri[i];
            inc(1,1,n,le[i],ri[i],-1);
            on[i]=1;
        }

    int idx = 0;

    for(int i=1; i<=n; i++)
    {
        for(int j=1; j<=m; j++)
            if(i >= le[j] && i <= ri[j] && on[j])
            inc(1,1,n,le[j],ri[j],1),on[j]=0;
            else if((i < le[j] || i > ri[j]) && !on[j])
            inc(1,1,n,le[j],ri[j],-1),on[j]=1;

        ats[i]=A[i]-seg[1][0];
        //cout<<i<<" "<<ats[i]<<" "<<A[i]<<" "<<seg[1][0]<<"  <----\n";
        if(ats[i] > ats[idx])idx=i;
    }

    cout<<ats[idx]<<"\n";
    vector<int>Q;
    for(int j=1; j<=m; j++)
        if(idx < le[j] || idx > ri[j])Q.push_back(j);

    cout<<Q.size()<<"\n";
    for(int&x:Q)cout<<x<<" ";
}
