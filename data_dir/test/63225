
#include<bits/stdc++.h>
using namespace std;

#define fast ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)
#define ll long long
#define ld long double
#define pb push_back
#define fe first
#define se second
#define nl "\n"
#define pp pair < ll , ll > 
#define sz(x) (ll)x.size()
#define st(x) sort(x.begin(),x.end())
#define rst(x) sort(x.rbegin(), x.rend())
#define all(x) x.begin(),x.end()
long double pi = 3.14159265358979323;
 
const double EPS = 1e-12;
const int N = 1e6 + 5;
const int mod = 1e9 + 7;
 
 
 //Djikshtra
 
int main()
{
    fast;
    ll n , m;
    cin >> n >> m ;
    vector < pair < ll , ll >> v[n+1];
    vector < pair < ll , ll > > edges(m+1);
    for(int i = 1 ; i <= m ;i++ ){
        ll a ,b , c;
        cin >> a >> b >> c ;
        v[a].pb({b,c});
        edges[i] = {a,b};
        v[b].pb({a,c});
    }
    ll u;
    cin >> u ;
    vector < ll > dis(n+1 , 1e18);
   // for(int i = 1 ; i <= n ;i++ )cout << dis[i] << " ";
    set < pair < ll , ll > > s;
    s.insert({0,u});
    bool vis[n+1] = {};
    vis[u] = 1;
    dis[u] = 0 ;
    vector < ll > edge_weight(n+1);
    vector < ll > parent(n+1);
    while(!s.empty()){
        auto itr = s.begin();
        ll u = itr -> se;
       // cout << u << "\n";
        s.erase(itr);
        vis[u] = 1;
        for(auto it : v[u]){
            ll v = it.fe;
            ll w = it.se;
           // cout << v << " ";
            //cout << dis[v] << " " << dis[u] + w << "\n";
            if(!vis[v] && dis[v] > dis[u] + w){
                dis[v] = dis[u] + w;
               // cout << v << " ";
                s.insert({dis[v] , v});
                edge_weight[v] = w;
                parent[v] = u;
            }
            else if(!vis[v] && dis[v] == dis[u] + w){//Most important condition
                //cout << v << " " << w << " ";
                if(edge_weight[v] > w){
                 //   cout << v << " ";
                    edge_weight[v] = w;
                    parent[v] = u;
                }
            }
        }
     //   cout << "\n";
    }
    ll ans = 0 ;
    for(int i = 1 ; i <= n ; i++ ){
        ans += edge_weight[i];
    }
    cout << ans << "\n";
    for(int i = 1 ; i <= m ;i++ ){
        ll u = edges[i].fe , v = edges[i].se;
        if(u == parent[v] || v == parent[u]){
            cout  << i << " ";
        }
    }
    





















    
    return 0;
    
}