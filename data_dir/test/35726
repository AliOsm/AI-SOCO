#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
#define loop(i,n) for(int i = 0; i < n; i++)
#define pii pair<int, int>
#define vi vector<LL> 
#define pb push_back

const int N = 1e5 + 5;
const int mod = 1e9 + 7;
const LL INF = 1e18;

int a[20], b[20], n;
LL ans = 0;

bool solve(int pos, multiset<int>& digs, int flag, LL val) {
    if (pos == n) {
        ans = max(ans, val);
        return true;
    }
    if (flag) {
        auto idx = digs.end();
        std::advance(idx, -1);
        int to_erase = *idx;
        digs.erase(idx);
        solve(pos + 1, digs, flag, val * 10 + to_erase);
        digs.insert(to_erase);
    }
    else {
        auto idx = digs.upper_bound(b[pos]);
        if (idx == digs.begin()) return false;
        std::advance(idx, -1);
        int to_erase = *idx;
        digs.erase(idx);
        if (to_erase == b[pos]) {
            if (!solve(pos + 1, digs, 0, val * 10 + to_erase)) {
                digs.insert(to_erase);
                idx = digs.upper_bound(b[pos] - 1);
                if (idx == digs.begin()) return false;
                std::advance(idx, -1);
                to_erase = *idx;
                digs.erase(idx);
                solve(pos + 1, digs, 1, val * 10 + to_erase);
            }
        }
        else {
            solve(pos + 1, digs, 1, val * 10 + to_erase);
        }
        digs.insert(to_erase);
    }
    return true;
}

int main () {
#ifdef DEBUG
    freopen("in.txt", "r", stdin);
#endif
    ios_base::sync_with_stdio(false);
    string s1, s2;
    cin >> s1 >> s2;
    if (s2.length() > s1.length()) {
        sort(s1.rbegin(), s1.rend());
        cout << s1 << endl;
        return 0;
    }
    assert(s1.length() == s2.length());
    n = s1.length();
    multiset<int> S;
    loop(i, n) S.insert(s1[i] - '0');
    loop(i, n) b[i] = s2[i] - '0';
    LL val = 0;
    solve(0, S, 0, val);
    cout << ans << endl;
#ifdef DEBUG
    // cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
#endif
    return 0;
}