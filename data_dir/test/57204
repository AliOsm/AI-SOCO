#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
const int maxn = 200010;
bool dp[ 2 ][ maxn ][ 7 ][ 3 ];
char pipes[ 2 ][ maxn ];
struct Status {
	int x, y, s, p;
	Status( int _x, int _y, int _s, int _p ):x( _x ), y( _y ), s( _s ), p( _p ){}
};
bool check( int o, int from, int to ) {
	if( o == 0 ) { // up
		if( from == 1 || from == 5 || from == 6 ) return to == 1 || to == 3 || to == 4;
		return false;
	}else if( o == 1 ) { // down
		if( from == 1 || from == 3 || from == 4 ) return to == 1 || to == 5 || to == 6;
		return false;
	}else { // left
		if( from == 2 || from == 4 ||  from == 5 ) return to == 2 || to == 3 || to == 6;
		return false;
	}
}
int main(){
	int q, n;
	scanf( "%d", &q );
	while( q -- ) {
		scanf( "%d", &n );
		scanf( "%s%s", pipes[ 0 ] + 1, pipes[ 1 ] + 1 );
		for( int i = 0 ; i < 2 ; i ++ )
			for( int j = 0 ; j <= n ; j ++ )
				for( int k = 0 ; k < 7 ; k ++ )
					for( int l = 0 ; l < 3 ; l ++ )
						dp[ i ][ j ][ k ][ l ] = false;
		queue<Status> q;
		if( pipes[ 1 ][ n ] >= '3' ) q.push( Status( 1, n, 6, 2 ) ), dp[ 1 ][ n ][ 6 ][ 2 ] = true;
		else q.push( Status( 1, n, 2, 2 ) ), dp[ 1 ][ n ][ 2 ][ 2 ] = true;
		while( !q.empty() ) {
			int x = q.front().x;
			int y = q.front().y;
			int s = q.front().s;
			int p = q.front().p;
			q.pop();
			if( x > 0 && p != 1 ) {
				if( pipes[ x - 1 ][ y ] >= '3' ) {
					for( int i = 3 ; i <= 6 ; i ++ ) {
						if( check( 0, s, i ) && !dp[ x - 1 ][ y ][ i ][ 0 ] ) {
							dp[ x - 1 ][ y ][ i ][ 0 ] = true;
							q.push( Status( x - 1, y, i, 0 ) );
						}
					}
				} else {
					for( int i = 1 ; i <= 2 ; i ++ ) {
						if( check( 0, s, i ) && !dp[ x - 1 ][ y ][ i ][ 0 ] ) {
							dp[ x - 1 ][ y ][ i ][ 0 ] = true;
							q.push( Status( x - 1, y, i, 0 ) );
						}
					}
				}
			}
			if( x < 1 && p != 0 ) {
				if( pipes[ x + 1 ][ y ] >= '3' ) {
					for( int i = 3 ; i <= 6 ; i ++ ) {
						if( check( 1, s, i ) && !dp[ x + 1 ][ y ][ i ][ 1 ] ) {
							dp[ x + 1 ][ y ][ i ][ 1 ] = true;
							q.push( Status( x + 1, y, i, 1 ) );
						}
					}
				} else {
					for( int i = 1 ; i <= 2 ; i ++ ) {
						if( check( 1, s, i ) && !dp[ x + 1 ][ y ][ i ][ 1 ] ) {
							dp[ x + 1 ][ y ][ i ][ 1 ] = true;
							q.push( Status( x + 1, y, i, 1 ) );
						}
					}
				}
			}
			if( y > 1 ) {
				if( pipes[ x ][ y - 1 ] >= '3' ) {
					for( int i = 3 ; i <= 6 ; i ++ ) {
						if( check( 2, s, i ) && !dp[ x ][ y - 1 ][ i ][ 2 ] ) {
							dp[ x ][ y - 1 ][ i ][ 2 ] = true;
							q.push( Status( x, y - 1, i, 2 ) );
						}
					}
				} else {
					for( int i = 1 ; i <= 2 ; i ++ ) {
						if( check( 2, s, i ) && !dp[ x ][ y - 1 ][ i ][ 2 ] ) {
							dp[ x ][ y - 1 ][ i ][ 2 ] = true;
							q.push( Status( x, y - 1, i, 2 ) );
						}
					}
				}
			}
		}
		bool found = false;
		for( int i = 0 ; i < 3 ; i ++ )
			found |= dp[ 0 ][ 1 ][ 2 ][ i ] | dp[ 0 ][ 1 ][ 4 ][ i ];
		if( found ) puts( "YES" );
		else puts( "NO" );
	}
	return 0;
}