#include <bits/stdc++.h>
using namespace std;
#define forn(i, n) for(int i = 0; i < (int) (n); i++)
const int maxn = 200050;

int n, k, trie[maxn][30], m, ganar[2][maxn], perder[2][maxn];

void add(string &w){
	int i = 0, v = 0;
	while(i < (int) w.size()){
		int ch = w[i] - 'a';
		if(trie[v][ch] == -1){
			v = trie[v][ch] = ++m;
		}
		else {
			v = trie[v][ch];
		}
		i++;
	}
}

void recorrer(int v){
	/*forn(i, 30){
		if(trie[v][i] != -1){
			printf("%c ", i + 'a');
			recorrer( trie[v][i] );
		}
	}*/
}

bool dp_ganar(bool player, int v){
	int hijos = 0;
	int ans = 0;
	forn(i, 30){
		int to = trie[v][i];
		if(to != -1){
			hijos++;
			if(dp_ganar(!player, to) == player) ans = 1;
		}
	}
	if(hijos == 0) return (ganar[player][v] = (!player)); // no quedan movimientos, pierde el que juega
	return (ganar[player][v] = (ans ? player : !player));
}

bool dp_perder(bool player, int v){
	int hijos = 0;
	int ans = 0;
	forn(i, 30){
		int to = trie[v][i];
		if(to != -1){
			hijos++;
			if(dp_perder(!player, to) == !player) ans = 1;
		}
	}
	if(hijos == 0) return (perder[player][v] = (!player));
	return (perder[player][v] = (ans ? !player : player));
}

int main(){
	scanf("%d %d", &n, &k);
	memset(trie, -1, sizeof trie);
	forn(i, n){
		string s;
		cin >> s;
		add(s);
	}
	// recorrer(0); puts("");
	memset(ganar, -1, sizeof ganar);
	memset(perder, -1, sizeof perder);
	dp_ganar(true, 0);
	dp_perder(true, 0);
	bool ok1 = (ganar[1][0] == 1);
	bool ok2 = (perder[1][0] == 0);
	if( ok1 && ok2 ){
		// printf("Caso 1:\n");
		puts("First");
	}
	else if( ok1 ){
		// printf("Caso 2:\n");
		printf("%s\n", k % 2 ? "First" : "Second");
	}
	else if( ok2 ){
		// printf("Caso 3:\n");
		puts("Second");
	}
	else {
		puts("Second");
	}
	return 0;
}
