#include <bits/stdc++.h>
using namespace std;

using ll = long long;

#define REP(i, n) for (int i = 0; i < (n); ++i)
#define SIZE(a) ((int)(a).size())

const int N = 555;

int n;

string result[N][3];
int used[N][3];

int cmp(string a, string b) {
	return SIZE(a) > SIZE(b) || (SIZE(a) == SIZE(b) && a > b);
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);

	n = 1 << 8;
	int x, y, z;
	x = y = z = 0;
	REP(i, 8) {
		if (i & 1) z |= 1 << i;
		if (i & 2) y |= 1 << i;
		if (i & 4) x |= 1 << i;
	}

	REP(i, n) REP(j, 3) result[i][j] = string(105, '5');

	result[x][0] = "x";
	result[y][0] = "y";
	result[z][0] = "z";
	int full = n - 1;

	while (true) {
		int v = -1, t;
		REP(i, n) REP(j, 3) {
			if (used[i][j]) continue;
			if (v == -1 || cmp(result[v][t], result[i][j])) {
				v = i;
				t = j;
			}
		}
		if (v == -1) break;
		used[v][t] = 1;
		int sz = SIZE(result[v][t]);
		if (t + 1 < 3 && cmp(result[v][t+1], result[v][t])) {
			result[v][t+1] = result[v][t];
		}
		if (t == 2 && cmp(result[v][0], "(" + result[v][t] + ")")) {
			result[v][0] = "(" + result[v][t] + ")";
		}
		if (t == 0 && cmp(result[full^v][0], "!" + result[v][t])) {
			result[full^v][0] = "!" + result[v][t];
		}
		if (t == 0) {
			REP(i, n) REP(j, 2) {
				if (cmp(result[i&v][1], result[i][1] + "&" + result[v][t])) {
					result[i&v][1] = result[i][1] + "&" + result[v][t];
				}
				swap(result[v][t], result[i][1]);
			}
		}
		if (t == 1) {
			REP(i, n) REP(j, 2) {
				if (cmp(result[i&v][1], result[v][t] + "&" + result[i][0])) {
					result[i&v][1] = result[v][t] + "&" + result[i][0];
				}
				swap(result[v][t], result[i][0]);
			}
			REP(i, n) REP(j, 2) {
				if (cmp(result[i|v][2], result[i][2] + "|" + result[v][t])) {
					result[i|v][2] = result[i][2] + "|" + result[v][t];
				}
				swap(result[v][t], result[i][2]);
			}
		}
		if (t == 2) {
			REP(i, n) REP(j, 2) {
				if (cmp(result[i|v][2], result[v][t] + "|" + result[i][1])) {
					result[i|v][2] = result[v][t] + "|" + result[i][1];
				}
				swap(result[v][t], result[i][1]);
			}
		}
	}


	REP(i, n) REP(j, 3) if (SIZE(result[i][j]) >= 105) {
		cout << "DUPA" << endl;
	}

	cin >> n;
	REP(i, n) {
		string s;
		cin >> s;
		reverse(s.begin(), s.end());
		int cur = 0;
		for (auto& c : s) {
			cur = 2*cur + c-'0';
		}
		cout << result[cur][2] << '\n';
	}

	return 0;
}
