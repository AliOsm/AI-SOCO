#include <fstream>
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
using namespace std;

#define F cin
#define G cout

const int N = 610;

int n,b[N],e[N],dp[N][N];

int go(int l,int r)
{
    if ( r > n ) return -1;
    if ( l > r ) return 1;
    if ( dp[l][r] )
        return dp[l][r];

    if ( l == r )
    {
        if ( b[l] == 1 )
            dp[l][r] = 1;
        else
            dp[l][r] = -1;
        return dp[l][r];
    }

    dp[l][r] = -1;
    for (int i=b[l];i<=e[l];++i)
        if ( (i-1) % 2 == 0 )
        {
            int inside = (i-1)/2;
            if ( inside <= r-l )
            if ( go(l+1,l+inside) != -1 && go(l+inside+1,r) != -1 )
            {
                dp[l][r] = i;
                return dp[l][r];
            }
        }
    return dp[l][r];
}

int p[N];

void build(int l,int r)
{
    if ( l > r ) return;
    int inside = (dp[l][r]-1)/2;
    p[l] = dp[l][r];
    if ( l == r ) return;
    build(l+1,l+inside);
    build(l+inside+1,r);
}

char v[2*N];

int main()
{
    ios::sync_with_stdio(0);
    #ifndef ONLINE_JUDGE
        ifstream F("p.in");
    #endif

    F>>n;
    for (int i=1;i<=n;++i)
        F>>b[i]>>e[i];

    if ( go(1,n) == -1 )
    {
        G<<"IMPOSSIBLE\n";
        return 0;
    }
    build(1,n);

    int k = 1;
    for (int i=1;i<=2*n;++i)
        if ( v[i] == 0 )
        {
            v[i] = '(';
            v[max(i+p[k],i+1)] = ')';
            ++k;
        }
    G<<(v+1)<<'\n';
}