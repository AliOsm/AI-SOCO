/* @nazarbek.altybay */

#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <queue>

#define pii pair<int, int>

#define pb push_back
#define mp make_pair

#define f first
#define s second

using namespace std;

typedef long long ll;
typedef long double ld;

const double EPS = 1e-9;
const double PI = acos(-1);

const int INF = (int) 1e9 + 7;
const int MAXN = (int) 1e6 + 7;

const int MOD1 = (int) 1e9 + 7;
const int MOD2 = (int) 1e9 + 9;

int n, m;
ll c1, c2;

pair<ll, ll> h[MAXN];

vector<int> g[MAXN];

pair<ll, ll> calc(vector<int> a) {
  sort(a.begin(), a.end());
  ll h1 = 0, h2 = 0;
  ll p1 = 1, p2 = 1;
  for (auto it : a) {
    h1 = (h1 + p1 * it) % MOD1;
    h2 = (h2 + p2 * it) % MOD2;
    p1 = (p1 * c1) % MOD1;
    p2 = (p2 * c2) % MOD2;
  }
  return mp(h1, h2);
}

ll solve() {
  sort(h + 1, h + n + 1);
  int j = 1;
  ll res = 0;
  for (int i = 1; i <= n; i++) {
    j = max(j, i);
    while (j <= n && h[i] == h[j])
      j++;
    res += j - i - 1;
  }
  return res;
}

int main() {
  #ifdef LOCAL
  freopen ("in", "r", stdin);
  #endif


  srand(time(NULL));

  c1 = rand() % 100000;
  c2 = rand() % 100000;
  c1 += 100000;
  c2 += 100000;

  scanf("%d%d", &n, &m);
  for (int i = 1; i <= m; i++) {
    int u, v;
    scanf("%d%d", &u, &v);
    g[u].pb(v);
    g[v].pb(u);
  }
  ll ans = 0;
  for (int i = 1; i <= n; i++) {
    h[i] = calc(g[i]);
  }
  ans += solve();
  for (int i = 1; i <= n; i++) {
    g[i].pb(i);
    h[i] = calc(g[i]);
  }
  ans += solve();
  cout << ans;
  return 0;
}