#include <iostream>
#include <algorithm>
#include <cstring>

using namespace std;

bool eaten[2005];
int t[2005], h[2005], m[2005];

int n, x, xx, ans;

bool func(int& type_id, int& jump_height) {
	int id = -1;
	int mx_mass = 0;
	for (int i = 0; i < n; i++)
		if (type_id == t[i] && !eaten[i] && h[i] <= jump_height && m[i] > mx_mass) {
			id = i;
			mx_mass = m[i];
		}
	if (id == -1)
		return false;
	eaten[id] = true;
	jump_height += mx_mass;
	type_id ^= 1;
	ans++;
	return true;
}

int try_with_type(int type_id) {
	ans = 0;
	xx = x;
	memset(eaten, 0, sizeof eaten);
	while (func(type_id, xx));
	return ans;
}

int main() {
	ios::sync_with_stdio(0);

	cin >> n >> x;
	for (int i = 0; i < n; i++)
		cin >> t[i] >> h[i] >> m[i];
	
	int ans1 = try_with_type(0);
	int ans2 = try_with_type(1);

	cout << max(ans1, ans2) << endl;

	return 0;
}