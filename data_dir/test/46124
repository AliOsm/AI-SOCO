#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
    #define EXPECT(expr)
#endif

using namespace std;
typedef long long int int64; typedef unsigned long long int uint64;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
if(! a.size()){ size_t n; fin >> n; a.resize( n ); }
for( auto & u: a) fin >> u; return fin; }
/* @@@ ----------------------------------- */

void probA()
{
    size_t n, k;
    cin >> n >> k;

    vector< size_t > a( n );
    cin >> a;

    vector< size_t > idx( n );
    iota( begin(idx), end(idx), 0 );
    const auto comp = [&a]( const size_t i, const size_t j ) {
        return a[ i ] < a[ j ];
    };
    sort( begin(idx), end(idx), comp );

    vector< size_t > b( n );
    for( size_t i = 0; i < n; ++ i )
        b[ i ] = a[ idx[ i ] ];

    DEBUG( b );
    partial_sum( begin(b), end(b), begin(b) );

    const auto last = upper_bound( begin(b), end(b), k );
    const size_t m = last - begin(b);
    cout << m << '\n';
    for( size_t i = 0; i < m; ++ i )
        cout << idx[ i ] + 1 << ( i + 1 != m ? " " : "" );
}

size_t probB()
{
    long double r;
    vector< long double > x( 2 ), y( 2 );
    cin >> r >> x[ 0 ] >> y[ 0 ] >> x[ 1 ] >> y[ 1 ];

    const auto dist = sqrt( (x[ 1 ] - x[ 0 ]) * (x[ 1 ] - x[ 0 ])
            + (y[ 1 ] - y[ 0 ]) * (y[ 1 ] - y[ 0 ]));

    DEBUG( dist );
    int64 k = dist / ( 2.0L * r ) - 1.0L;
    DEBUG( k );
    while( static_cast< long double >( k ) * 2.0L * r < dist )
        ++ k;
    return k;
}

int64 probC()
{
    size_t h;
    uint64 n;
    cin >> h >> n;
    -- n;

    // how many steps it takes until this sub tree is done
    // next going left, next going right
    vector< int64 > L( h + 1 ), R( h + 1 );
    L[ 0 ] = R[ 0 ] = 0;

    for( size_t i = 1; i < h + 1 ; ++ i )
    {
        L[ i ] = 4 + R[ i - 1 ] + L[ i - 1 ];
        R[ i ] = 4 + L[ i - 1 ] + R[ i - 1 ];
    }
    DEBUG( L );

    vector< int > bit;
    uint64 b = 1ULL << ( h - 1 );
    for( size_t i = 0; i < h; ++ i, b >>= 1ULL )
        bit.push_back( b & n ? 1 : 0 );

    DEBUG( bit );

    uint64 count = 0;
    uint64 val = 0;

    for( size_t i = 0, k = h; i < bit.size(); ++ i, --k )
        if( (count & 1ULL) ) // going to right
        {
            if( bit[ i ] )  // should go right
            {
                ++ count;
                val += 1;
            }
            else
            {
                count += 2ULL + L[ k - 1 ];
                val += 1 + ( 1ULL << ( k  )) - 1ULL;
            }
            DEBUG( val );
        }
        else // going to left
        {
            if( bit[ i ] )
            {
                count += 2ULL + R[ k - 1 ];
                val += 1 + ( 1ULL << ( k  )) - 1ULL;
            }
            else
            {
                ++ count;
                val += 1;
            }
            DEBUG( val );
        }

    return val;
}

int main( const int argc, char * argv [])
{
    cout << probC();
    return EXIT_SUCCESS;
}
