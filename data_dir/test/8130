#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <string>
#include <queue>
#include <stack>
#include <cstring>
#include <iterator>
#include <cmath>
#include <unordered_set>
#include <unordered_map>
using namespace std;
typedef long long mt;
#define rep(a, b, i) for(register mt i = a; i < b; ++i)
#define repe(a, b, i) for(register mt i = a; i <= b; ++i)
#define repd(a, b, i) for(register mt i = a; i > b; --i)
#define repde(a, b, i) for(register mt i = a; i >= b; --i)

#define N 36
#define K 100100
#define M (1<<19)
#define INF 10000000000000007// 1e16 + 7
#define MOD 1000000009  //1000000007//1e9 + 7
#define EPS 1e-9
#define MAX 1000000000000000001

mt n, m, s, answ;
mt a[N], ts;
mt d[M], pc;

mt test(mt x) 
{
	mt fp = lower_bound(d, d + pc, m - 1 - x) - d;
	mt f = 0;
	for (mt i = -3; i < 2; ++i) {
		if (fp + i >= 0 && fp + i < pc && (m - 1 - x) - d[fp + i] >= 0 && ((m - 1 - x) - d[fp + i]) < (m - 1 - x - f)) f = d[fp + i];
	}
	return max(x, (x + f) % m);
}

int main(void)
{
#ifdef _DEBUG	
	freopen("in.txt", "r", stdin);
#endif
	scanf("%lld %lld", &n, &m);
	rep(0, n, i)
		scanf("%lld", a + i), s += a[i];
	mt p = (n + 1) >> 1;
	mt k = 1ll << ((n + 1) >> 1);
	rep(0, k, i) {
		ts = 0;
		rep(0, p, j)
			if (j * 2 < n && i & (1 << j)) ts += a[j*2];
		answ = max(answ, max((ts % m), ((s - ts) % m)));
		d[pc++] = ts % m;
	}
	sort(d, d + pc);
	rep(1, k, i) {
		ts = 0;
		rep(0, p, j)
			if (1 + j * 2 < n && i & (1 << j)) ts += a[1 + j * 2];
		//if(i) answ = max(answ, max(test(ts % m), test((s - ts) % m)));
		//else answ = max(answ, test((s - ts) % m));
		answ = max(answ, test(ts % m));
	}
	printf("%lld\n", answ);
	return 0;
}