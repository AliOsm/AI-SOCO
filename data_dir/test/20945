#include <bits/stdc++.h>
using namespace std;
const int N = 3e3 + 7;
int p[N], cnt, col[N], sz[N], n;
vector<pair<int, int> > ans;

void make_graph()
{
	memset(col, -1, sizeof col);
	memset(sz, 0, sizeof sz);
	cnt = 0;
	for (int i=0; i<n; i++)
		if (col[i] == -1)
		{
			int x = i;
			do
			{
				col[x] = cnt;
				sz[cnt]++;
				x = p[x];
			}while(x != i);
			cnt++;
		}
}

void merge()
{
	for (int i=1; i<n; i++)
		if (col[i] != col[0])
		{
			ans.push_back({1, i+1});
			swap(p[0], p[i]);
			return;
		}
}

void spilit()
{
	for (int i=0; i<n; i++)
		if (sz[col[i]] > 1)
		{
			for (int j=i+1; j<n; j++)
				if (col[j] == col[i])
				{
					ans.push_back({i+1, j+1});
					swap(p[i], p[j]);
					return;
				}
		}
}

int main()
{
	ios::sync_with_stdio(false);

	cin >> n;
	for (int i=0; i<n; i++)
	{
		cin >> p[i];
		p[i]--;
	}
	int m;
	cin >> m;
	m = n - m;
	make_graph();
	while (cnt != m)
	{
		if (cnt > m)
			merge();
		else
			spilit();
		make_graph();
	}
	cout << ans.size() << "\n";
	for (int i=0; i<ans.size(); i++)
		cout << ans[i].first << " " << ans[i].second << " ";
	cout << "\n";
	return 0;
}
