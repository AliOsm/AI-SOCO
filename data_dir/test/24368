///...................................*****.................................................///
///                  Mujahidul Islam ( mujahidulislam2923@gmail.com )                       ///
///                  Department of Ict                                                      ///
///                  Comilla University , Bangladesh.                                       ///
///...................................*****.................................................///
 
#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
//using namespace __gnu_pbds;
//template<typename T> using orderset = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
 
#define          CIN                    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define          ll                     long long int
#define          ld                     long double
#define          ull                    unsigned long long int
#define          pii                    pair < int, int>
#define          pll                    pair < ll, ll>
#define          MOD                    1000000007
#define          vi                     vector<int>
#define          vl                     vector<ll>
#define          pb                     push_back
#define          sc                     scanf
#define          pf                     printf
#define          scin(x)                scanf("%d",&(x))
#define          scin2(x,y)             scanf("%d %d",&(x),&(y))
#define          scin3(x,y,z)           scanf("%d %d %d",&(x),&(y),&(z))
#define          scln(x)                scanf("%lld",&(x))
#define          scln2(x,y)             scanf("%lld %lld",&(x),&(y))
#define          scln3(x,y,z)           scanf("%lld %lld %lld",&(x),&(y),&(z))
#define          min3(a,b,c)            min(a,min(b,c))
#define          min4(a,b,c,d)          min(d,min(a,min(b,c)))
#define          max3(a,b,c)            max(a,max(b,c))
#define          max4(a,b,c,d)          max(d,max(a,max(b,c)))
#define          ms(a,b)                memset(a,b,sizeof(a))
#define          mp                     make_pair
#define          gcd(a, b)              __gcd(a,b)
#define          lcm(a, b)              ((a)*(b)/gcd(a,b))
//#define          input                  freopen("input.txt","rt", stdin)
//#define          output                 freopen("output.txt","wt", stdout)
#define          ff                     first
#define          ss                     second
#define          PI                     acos(-1.0)
//#define          zero(a)                memset(a,0,sizeof a)
#define          all(v)                 v.begin(),v.end()
#define          Max(v)                 *max_element(all(v))
#define          Min(v)                 *min_element(all(v))
#define          Upper(c,x)             (upper_bound(c.begin(),c.end(),x)-c.begin())
#define          Lower(c,x)             (lower_bound(c.begin(),c.end(),x)-c.begin())
#define          Unique(X)              (X).erase(unique(all(X)),(X).end())
#define          no                     cout << "NO" << endl ;
#define          yes                    cout << "YES" << endl ;
#define          DBG                    cout << endl << "---------------" << endl ;
#define segment_tree int Lnode = node << 1 , Rnode = Lnode + 1 , mid = ( b + e ) >> 1 ;
 
 
///bool operator < ( const Node& p ) const{ return cost < p.cost ; }
///priority_queue<int,vector<int>,greater<int> >pq;
///string str = "abcdefghijklmnopqrstuvwxyz";
///string s2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ;
///string s = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" ;
///string s = std::bitset<64>(n).to_string();
///---------------Order set-------------------
///template<typename T> using orderset =tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
///#include <ext/pb_ds/assoc_container.hpp>
///using namespace __gnu_pbds;
///*os.find_by_order(index) os.order_of_key(value)
 
///--------------Graph Moves--------------------------------------
///const int fx[] = {+1,-1,+0,+0};
///const int fy[] = {+0,+0,+1,-1};
///const int fx[] = {+0,+0,+1,-1,-1,+1,-1,+1}; ///King's move
///const int fy[] = {-1,+1,+0,+0,+1,+1,-1,-1}; ///king's Move
///const int fx[] = {-2,-2,-1,-1,+1,+1,+2,+2}; ///knight's move
///const int fy[] = {-1,+1,-2,+2,-2,+2,-1,+1}; ///knight's move
///---------------------------------------------------------------
 
 
vector < ll > v, v1, v2, v3, v4, v5, v6 ;
vector < pair < pll, ll > > vec,vec1 ;
vector < ll > adj[ 1005 ], ADJ[ 1005 ] ;
map < ll, ll > Mp, Mp1 ;
set < ll > st, st1 ;
queue < ll > Q ;
stack < ll > Stk ;
multiset < pll > S ;
 
/*
ll n, t, T, sum, row, col ;
 
void ResetAll()
{
    v1.clear() ;
    v2.clear() ;
}
 
void Input()
{
    ll a ;
    cin >> n ;
    for( int i = 0 ; i < n ; i ++ )
    {
        cin >> a ;
        v1.pb( a ) ;
    }
 
    for( int i = 0 ; i < n ; i ++ )
    {
        cin >> a ;
        v2.pb( a ) ;
    }
}
 
void Calculation()
{
    ll zero = 0 , mone = 0 , one = 0  , ans = 1 ;
    for( int i = 0 ; i < n ; i ++ )
    {
        if( v1[ i ] == 0 )
        {
            zero = 1 ;
        }
        else if( v1[ i ] == 1 )
        {
            one = 1 ;
        }
        else if( v1[ i ] == -1 )
        {
            mone = 1 ;
        }
 
        if( zero )
        {
            if( one == 0 && mone == 0 )
            {
                if( v1[ i ] != v2[ i ] )
                {
                    ans = 0 ;
                    //break ;
                }
            }
            else if( one == 1 && mone == 0 )
            {
                if( v2[ i ] < v1[ i ] )
                {
                    ans = 0 ;
                    //break ;
                }
            }
            else if( one == 0 && mone == 1 )
            {
                if( v2[ i ] > v1[ i ] )
                {
                    ans = 0 ;
                    // break ;
                }
            }
        }
        else
        {
 
        }
 
        cout << ans << endl ;
    }
    if( ans )
    {
        yes ;
    }
    else
    {
        no ;
    }
}
 
 
void solve()
{
    ResetAll() ;
    Input() ;
    Calculation() ;
}
 
int main()
{
    cin >> t ;
    while( t-- )
    {
        T ++ ;
        solve() ;
    }
 
    return 0 ;
}
*/
int main()
{
    CIN ;
    ll t, row, col ;
    cin >> t ;
    while( t-- )
    {
        cin >> row >> col ;
        for( int i = 0 ; i < row ; i ++ )
        {
            for( int j = 0 ; j < col ; j ++ )
            {
                if( i == 0 || j == 0 )
                {
                    cout << 'B' ;
                }
                else
                {
                    cout << 'W' ;
                }
            }
            cout << endl ;
        }
    }
}