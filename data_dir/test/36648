#include <set>
#include <stack>
#include <vector>
#include <algorithm>

using namespace std;

struct SCCTarjan {
  int n;
  vector<vector<int> > e;

  vector<int> id;
  vector<vector<int> > scc;

  void init(int n) {
    this->n = n;
    vector<vector<int> >(n).swap(e);
    id.resize(n);
    dfn.resize(n);
    low.resize(n);
  }

  void add(int a, int b) {
    e[a].push_back(b);
  }

  vector<int> dfn, low;
  int timestamp;
  stack<int> s;

  void dfs(int v) {
    dfn[v] = timestamp++;
    low[v] = dfn[v];
    s.push(v);
    for (vector<int>::const_iterator w = e[v].begin(); w != e[v].end(); ++w) {
      if (dfn[*w] == -1) {
        dfs(*w);
        low[v] = min(low[v], low[*w]);
      } else if (dfn[*w] != -2) {
        low[v] = min(low[v], dfn[*w]);
      }
    }

    if (low[v] == dfn[v]) {
      vector<int> t;
      do {
        int w = s.top();
        s.pop();
        id[w] = (int)scc.size();
        t.push_back(w);
        dfn[w] = -2;
      } while (t.back() != v);
      scc.push_back(t);
    }
  }

  int gao() {
    scc.clear();
    stack<int>().swap(s);
    timestamp = 0;

    fill(dfn.begin(), dfn.end(), -1);
    for (int i = 0; i < n; ++i) {
      if (dfn[i] == -1) {
        dfs(i);
      }
    }
    return (int)scc.size();
  }
} scc;

typedef long long llint;

const int MAXN = 100100;
const llint MAX = 314000000;

struct Edge {
  int from;
  vector<int> to;
  llint cost;
} edge[MAXN];

int d[MAXN];
vector<int> e[MAXN];
llint ans1[MAXN], ans2[MAXN];

llint gao(int s) {
  llint& ret = ans2[s];
  if (ret != -1) {
    return ret;
  }

  ret = 0;
  for (int i: e[s]) {
    const Edge& ee = edge[i];
    llint tmp = ee.cost;
    // printf("=> %d, %d %d %d\n", s, i, ee.from, (int)ee.cost);
    for (int j: ee.to) {
      if (ans1[j] > MAX) {
        goto NEXT;
      } else if (gao(j) == -2) {
        return ret = -2;
      } else {
        tmp += gao(j);
      }
    }
    tmp = min(tmp, MAX);
    ret = max(ret, tmp);
NEXT:
    continue;
  }
  return ret;
}

int main() {
  int n, m, c, t;

  scanf("%d%d", &m, &n);
  for (int i = 0; i < m; ++i) {
    scanf("%d%d", &edge[i].from, &c);
    --edge[i].from;
    edge[i].cost = 0;
    for (int j = 0; j < c; ++j) {
      scanf("%d", &t);
      if (t == -1) {
        ++edge[i].cost;
      } else {
        edge[i].to.push_back(t - 1);
      }
    }
  }

  set<pair<int, int> > pq;

  fill(e, e + n, vector<int>());
  fill(ans1, ans1 + n, MAX + 1);
  for (int i = 0; i < m; ++i) {
    const Edge& ee = edge[i];
    d[i] = ee.to.size();
    for (int j: ee.to) {
      e[j].push_back(i);
    }
    if (d[i] == 0) {
      if (ans1[ee.from] > ee.cost) {
        ans1[ee.from] = ee.cost;
        pq.insert({ans1[ee.from], ee.from});
      }
    }
  }
  while (!pq.empty()) {
    int s = pq.begin()->second;
    int t = pq.begin()->first;
    pq.erase(pq.begin());
    if (ans1[s] != t) {
      continue;
    }
    for (int i: e[s]) {
      if (--d[i] == 0) {
        const Edge& ee = edge[i];
        llint tmp1 = ee.cost, tmp2 = ee.cost;
        for (int j: ee.to) {
          tmp1 += ans1[j];
        }
        tmp1 = min(MAX, tmp1);
        tmp2 = min(MAX, tmp2);
        if (ans1[ee.from] > tmp1) {
          ans1[ee.from] = tmp1;
          pq.insert({ans1[ee.from], ee.from});
        }
      }
    }
  }

  scc.init(n);
  fill(e, e + n, vector<int>());
  fill(ans2, ans2 + n, -1);
  for (int i = 0; i < m; ++i) {
    const Edge& ee = edge[i];
    bool flag = ans1[ee.from] <= MAX;
    for (int j: ee.to) {
      flag &= ans1[j] <= MAX;
    }
    if (!flag) {
      continue;
    }

    e[ee.from].push_back(i);
    for (int j: ee.to) {
      // printf("%d => %d\n", ee.from, j);
      if (ee.from == j) {
        ans2[ee.from] = -2;
      } else {
        scc.add(ee.from, j);
      }
    }
  }
  scc.gao();
  for (const auto& i: scc.scc) {
    if (i.size() > 1) {
      for (int j: i) {
        ans2[j] = -2;
      }
    }
  }

  for (int i = 0; i < n; ++i) {
    if (ans1[i] > MAX) {
      puts("-1 -1");
      continue;
    } else {
      printf("%d %d\n", (int)ans1[i], (int)gao(i));
    }
  }

  return 0;
}

