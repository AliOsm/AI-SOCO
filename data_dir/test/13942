#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
#define sc(a) scanf("%d", &a)
#define sc2(a, b) scanf("%d%d", &a, &b)
#define sc3(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define scs(s) scanf("%s", s)
#define pri(x) printf("%d\n", x)
#define mp make_pair
#define pb push_back
#define BUFF ios::sync_with_stdio(false);
#define imprime(v)                                        \
  for (int X = 0; X < v.size(); X++) cout << v[X] << " "; \
  cout << endl;
#define grid(v)                                                   \
  for (int X = 0; X < v.size(); X++) {                            \
    for (int Y = 0; Y < v[X].size(); Y++) cout << v[X][Y] << " "; \
    cout << endl;                                                 \
  }
#define endl "\n"
const int INF = 0x3f3f3f3f;
const long double pi = acos(-1);
typedef long long int ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vector<int> > vvi;
typedef vector<vector<ii> > vvii;
const int MOD = 1e9 + 7;
const int N = 101010;
int v[N], n, m;
int cost[N];
int mapa[N];
bool possivel(int x)
{
  memset(mapa, -1, sizeof(mapa));
  vi prov;
  for (int i = x; i >= 1; i--) {
    if (mapa[v[i]] == -1 and v[i] != 0) {
      mapa[v[i]] = i;
      prov.pb(i);
    }
  }
  reverse(prov.begin(), prov.end());
  if (prov.size() < m) return false;
  int rest = 0;
  int last = 1;
  for (int i : prov) {
    rest += (i - last);
    last = i+1;
    if (rest>=cost[v[i]]) {
      rest -= cost[v[i]];
    }
    else{
      return false;
    }
  }
  return true;
}
int bb(int b, int e)
{
  if (b == e) return b;
  int mid = (b + e) / 2;
  if (possivel(mid)) return bb(b, mid);
  return bb(mid + 1, e);
}
int main()
{
  sc2(n, m);
  for (int i = 1; i <= n; i++) sc(v[i]);
  for (int i = 1; i <= m; i++) sc(cost[i]);
  int x = bb(1, n);
  if (possivel(x)) {
    cout << x << endl;
  }
  else{
    cout << -1 << endl;
  }
  return 0;
}
