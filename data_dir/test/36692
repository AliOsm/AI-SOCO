/**/
#include <bits/stdc++.h>
using namespace std;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;

bool vis[310][310];
bool state[5][3][3][30][310][310];

struct place {
	int moves,dx,dy,dep,x,y;
	
	place() {
		moves = dx = dy = dep = x = y = 0;
	}
};

pair<int,int> get(int cur) {
	assert(cur != 1*3+1);
	int dx = cur%3,dy = cur/3;
	if(dx == 1) {
		return {dy*3+0,dy*3+2};
	}
	if(dy == 1) {
		return {0*3+dx,2*3+dx};
	}
	return {1*3+dx,dy*3+1};
}

bool visited(place p) {
	if(state[p.moves][p.dx][p.dy][p.dep][p.x][p.y])
		return true;
	state[p.moves][p.dx][p.dy][p.dep][p.x][p.y] = true;
	return false;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	int N;
	long long res = 0;
	cin>>N;
	vector<int> t(N);
	for(int i = 0;i < N;i++) {
		cin>>t[i];
	}
	
	place p = place();
	p.x = p.y = 150;
	p.moves = t[0] - 1;
	p.dy = 2;
	p.dx = 1;
	queue<place> bfs;
	bfs.push(p);
	while(!bfs.empty()) {
		p = bfs.front();
		bfs.pop();
//		cerr<<p.x<<' '<<p.y<<'\n';
		res += vis[p.x][p.y] == 0;
		vis[p.x][p.y] = 1;
		if(p.moves == 0) {
			if(p.dep+1 == N)
				continue;
			place first = p,second = p;
			first.dep++;
			second.dep++;
			first.moves = t[first.dep] - 1;
			second.moves = t[second.dep] - 1;
			pair<int,int> newD = get(p.dy*3+p.dx);
			first.dx = newD.first%3,first.dy = newD.first/3;
			second.dx = newD.second%3,second.dy = newD.second/3;
			first.x += first.dx - 1,first.y += first.dy - 1;
			second.x += second.dx - 1,second.y += second.dy - 1;
			if(!visited(first))
				bfs.push(first);
			if(!visited(second))
				bfs.push(second);
		}else {
			place other = p;
			other.x += p.dx - 1;
			other.y += p.dy - 1;
			other.moves--;
			if(!visited(other))
				bfs.push(other);
		}
	}
	cout<<res<<'\n';
	return 0;
}
/**/

