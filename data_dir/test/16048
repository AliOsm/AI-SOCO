#include <iostream>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <algorithm>
#include <iomanip>
using namespace std;
typedef pair<int, int> pii;
typedef long long int ll;

const int maxn = 2e5 + 5;
const ll mod = 1e9 + 9;


int n, m, cl, ce, u;
vector<int> ls;
vector<int> es;

int get_up(vector<int>& vec, int v) {
    if (vec.empty())
        return -1;
    if (vec.back() < v)
        return -1;
    int a = 0, b = vec.size() - 1;
    while (a != b) {
        int la = a, lb = b;
        int mid = (a + b) / 2;
        if (vec[mid] >= v)
            b = mid;
        else
            a = mid;
        if (la == a && lb == b) {
            if (vec[a] >= v)
                b = a;
            else
                a = b;
        }
    }
    return vec[a];
}

int get_down(vector<int>& vec, int v) {
    if (vec.empty())
        return -1;
    if (vec[0] > v)
        return -1;
    int a = 0, b = vec.size() - 1;
    while (a != b) {
        int la = a, lb = b;
        int mid = (a + b) / 2;
        if (vec[mid] <= v)
            a = mid;
        else
            b = mid;
        if (la == a && lb == b) {
            if (vec[b] <= v)
                a = b;
            else
                b = a;
        }
    }
    return vec[a];
}

int get_elev(int diff) {
    if (diff % u == 0)
        return diff / u;
    return diff / u + 1;
}

int main() {
    cin >> n >> m >> cl >> ce >> u;
    ls.resize(cl);
    for (int i = 0; i < cl; i++) {
        cin >> ls[i];
    }
    es.resize(ce);
    for (int i = 0; i < ce; i++) {
        cin >> es[i];
    }

    int q;
    cin >> q;
    for (int i = 0; i < q; i++) {
        int x1, y1, x2, y2;
        cin >> x1 >> y1 >> x2 >> y2;

        int ans = INT_MAX;
        int tmp;
        
        if (x1 == x2)
            ans = min(ans, abs(y1 - y2));

        // lest - right
        tmp = get_up(ls, y1);
        if (tmp != -1)
            ans = min(ans, abs(y1 - tmp) + abs(x1 - x2) + abs(tmp - y2));

        // lest - left
        tmp = get_down(ls, y1);
        if (tmp != -1)
            ans = min(ans, abs(y1 - tmp) + abs(x1 - x2) + abs(tmp - y2));

        // elevator - right
        tmp = get_up(es, y1);
        if (tmp != -1)
            ans = min(ans, abs(y1 - tmp) + get_elev(abs(x1 - x2)) + abs(tmp - y2));

        // elevator - left
        tmp = get_down(es, y1);
        if (tmp != -1)
            ans = min(ans, abs(y1 - tmp) + get_elev(abs(x1 - x2)) + abs(tmp - y2));

        cout << ans << endl;
    }
}