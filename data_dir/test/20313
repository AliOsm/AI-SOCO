#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const ll inf = 1000000000000000LL;

int n;

ll A, B;

int a[1000001];

ll f[3][1000001];

ll solve(int d)
{
    memset(f, 0, sizeof(ll) * 3 * 1000001);

    for (int i = 1; i <= n; i++) {
        if (a[i] % d == 0) {
            f[0][i] = min(f[0][i - 1], f[1][i - 1]);
            f[1][i] = min(f[1][i - 1], f[2][i - 1]) + A;
            f[2][i] = f[2][i - 1];
        }
        else if ((a[i] - 1) % d == 0 || (a[i] + 1) % d == 0) {
            f[0][i] = min(f[0][i - 1], f[1][i - 1]) + B;
            f[1][i] = min(f[1][i - 1], f[2][i - 1]) + A;
            f[2][i] = f[2][i - 1] + B;
        }
        else {
            f[0][i] = inf;
            f[1][i] = min(f[1][i - 1], f[2][i - 1]) + A;
            f[2][i] = inf;
        }

        if (f[0][i] > inf && f[1][i] > inf && f[2][i] > inf) return inf;
    }

    return min(min(f[0][n], f[1][n]), f[2][n]);
}

vector<int> pr;
void add(int t) {
    for (int p = 2; p < 100000; p++) {
        while (t % p == 0) {
            t /= p;
            pr.push_back(p);
        }
    }
    if (t > 1) pr.push_back(t);
}

int main()
{
    scanf("%d %I64d %I64d", &n, &A, &B);

    for (int i = 1; i <= n; i++) scanf("%d", &a[i]);

    add(a[1]);
    add(a[1] - 1);
    add(a[1] + 1);
    add(a[n]);
    add(a[n] - 1);
    add(a[n] + 1);

    sort(pr.begin(), pr.end());
    pr.resize(unique(pr.begin(), pr.end()) - pr.begin());

    ll ans = inf;

    for (int i = 0; i < pr.size(); i++) {
        ll tmp = solve(pr[i]);
        ans = min(ans, tmp);
    }

    printf("%I64d\n", ans);
}
