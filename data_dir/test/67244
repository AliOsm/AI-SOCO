//#inclue<D>
#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define endl '\n'
#define Endl '\n'
#define fi first
#define ii pair<int,int>
#define se second
#define ld long double
#define mod 1000000007
using namespace std;
// amiD
int n;
bool has[200010];
vector<int>dir[200010], rev[200010];
int vis[200010];
stack<int>s;
vector<int>tmp;
int mx=0;
bool f=0;
int to[200010];
void dfs1(int node){
    vis[node]=1;
    int sz=dir[node].size();
    for(int i=0;i<sz;i++){
        int nx=dir[node][i];
        if(to[nx]==nx){
            f=1;
            continue;
        }
        if(!vis[nx])dfs1(nx);
    }
    s.push(node);
}
vector<int>scc;
void dfs2(int node){
    vis[node]=1;
    scc.pb(node);
    int sz=rev[node].size();
    for(int i=0;i<sz;i++){
        int nx=rev[node][i];
        if(to[nx]==nx){
            f=1;
            continue;
        }
        if(!vis[nx])dfs2(nx);
    }
}
void dfs3(int node){
    vis[node]=3;
    tmp.pb(node);
    int sz=rev[node].size();
    for(int i=0;i<sz;i++){
        int nx=rev[node][i];
        if(to[nx]==nx){
            f=1;
            continue;
        }
        if(!vis[nx])dfs3(nx);
    }
    sz=dir[node].size();
    for(int i=0;i<sz;i++){
        int nx=dir[node][i];
        if(to[nx]==nx){
            f=1;
            continue;
        }
        if(!vis[nx])dfs3(nx);
    }
}
ll ans[200010];
int main(){
    //return 0;
    cin>>n;
    for(int i=0;i<n;i++){
        int x, y;
        scanf("%d %d",&x, &y);
        has[x]=1;
        has[y]=1;
        to[x]=y;
        if(x==y)continue;
        dir[x].pb(y);
        rev[y].pb(x);
    }
    ll anss=1;
    for(int i=1;i<=2*n;i++){
        tmp.clear();
        mx=0;
        f=0;
        if(to[i]==i)continue;
        if(has[i]==0 || vis[i])continue;
        dfs3(i);
        if(f)continue;
        int sz=tmp.size();
        for(int j=0;j<sz;j++)vis[tmp[j]]=0;
        for(int j=0;j<tmp.size();j++){
            int node=tmp[j];
            if(!vis[node])dfs1(node);
        }
        for(int j=0;j<sz;j++)vis[tmp[j]]=0;
        while(!s.empty()){
            int node=s.top(); s.pop();
            if(vis[node])continue;
            dfs2(node);
            mx=max(mx,(int) scc.size());
            scc.clear();
        }
        for(int j=0;j<sz;j++)vis[tmp[j]]=1;
        if(mx>=2){
            anss*=2; anss%=mod;
            continue;
        }
        mx=tmp.size();
        anss*=1ll*mx;
        anss%=mod;
    }
    cout<<anss<<endl;
}
