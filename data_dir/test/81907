#include <bits/stdc++.h>
#define mod 1000000007
using namespace std;


/*
typedef long long i64;
vector <pair <int, i64>> adia[200010];

i64 cost[200010];
*/
int put2[2000010];
int v[2000010];
int fact[2000010];
int invfact[2000010];

int put(int x, int p)
{
    int ans(1);
    while (p) {
        if (p & 1)
            ans = 1ll * x * ans % mod;
        x = 1ll * x * x % mod;
        p /= 2;
    }
    return ans;
}

int comb(int a, int b)
{
    if (a < b || b < 0)
        return 0;
    return 1ll * fact[a] * invfact[b] % mod * invfact[a - b] % mod;
}

int main()
{
    ios_base :: sync_with_stdio(0);
    cin.tie(0);

    int n;
    cin >> n;

    for (int i(0); i < n; i++)
        cin >> v[i];

    sort(v, v + n);

    int nrlast(0), nract(0), vact(-1e9);
    int ans(0);

    //put2[0] = 1;
    fact[0] = 1;
    for (int i(1); i <= 2000000; i++) {
        //put2[i] = 2ll * put2[i - 1] % mod;
        fact[i] = 1ll * i * fact[i - 1] % mod;
    }
    invfact[2000000] = put(fact[2000000], mod - 2);
    for (int i(1999999); i >= 0; i--)
        invfact[i] = 1ll * (i + 1) * invfact[i + 1] % mod;

    //cout << comb(3, 2) << '\n';

    for (int i(0); i < n; i++) {
        if (v[i] != vact) {
            if (nract != 0) {
              ans = (ans +
                1ll * vact * nract % mod * fact[nrlast] % mod * fact[n - nrlast - 1] % mod * comb(n, nrlast)) % mod;
            }

            vact = v[i], nrlast += nract, nract = 1;
        }
        else
            nract++;
    }

    cout << ans << '\n';
    /*
    int n, m, a, b;
    i64 c;
    cin >> n >> m;

    while (m--) {
        cin >> a >> b >> c;
        adia[a].push_back({ b, 2 * c });
        adia[b].push_back({ a, 2 * c });
    }

    priority_queue <pair <i64, int>> q;

    for (int i(1); i <= n; i++) {
        cin >> cost[i];
        q.push({ -cost[i], i });
    }

    while (!q.empty()) {
        int n = q.top().second;
        if (q.top().first != -cost[n]) {
            q.pop();
            continue;
        }
        q.pop();

        for (auto i : adia[n]) {
            if (cost[i.first] > cost[n] + i.second) {
                cost[i.first] = cost[n] + i.second;
                q.push({ -cost[i.first], i.first });
            }
        }
    }

    for (int i(1); i <= n; i++)
        cout << cost[i] << ' ';

    /*
    int t, q;

    cin >> t;

    while (t--) {
        cin >> q;
        if (q == 0) {
            cout << "1 1\n";
            continue;
        }

        bool told = 0;
        for (int i(1); i * i < q; i++) {
            if (q % i == 0) {
                int a = i, b = q / i;
                if ((a + b) % 2 == 1)
                    continue;
                int n = (a + b) / 2, m = (b - a) / 2;
                if (1ll * n * n - 1ll * m * m != q)
                    continue;
                int x = n / m;
                if (n / x != m)
                    continue;
                cout << n << ' ' << x << '\n';
                told = 1;
                break;
            }
        }
        if (!told)
            cout << -1 << '\n';
    }

 /*   vector <int> v;
    int n;
    cin >> n;
    v.resize(n + 2);

    for (int i(1); i <= n; i++)
        cin >> v[i];
    v[0] = 1, v[n + 1] = 1000000;
    int best(1e9);

    for (int i(0); i <= n; i++) {
        best = min(best, max(v[i] - 1, 1000000 - v[i + 1]));
    }

    cout << best << '\n';
/*
    int x;
    cin >> x;
    string s;
    cin >> s;
    char last = '1';
    for (auto i : s) {
        if (i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y') {
            if (last == 'a' || last == 'e' || last == 'i' || last == 'o' || last == 'u' || last == 'y')
                continue;
            last = i;
            cout << last;
        }
        else {
            last = i;
            cout << last;
        }
    }*/
    return 0;
}
