//====================================
//======================================
//
//                   Bismillahir-Rahmanir-Rahim
//
// ==========================================================================
#include <bits/stdc++.h>
#define        ll                              long long int
#define        FOR(x,y,z)                      for(int x=y;x<z;x++)
#define        pii                             pair<int,int>
#define        pll                             pair<ll,ll>
#define        CLR(a)                          memset(a,0,sizeof(a))
#define        SET(a)                          memset(a,-1,sizeof(a))
#define        N                               200010
#define        M                               1000000007
#define        pi                              acos(-1.0)
#define        ff                              first
#define        ss                              second
#define        pb                              push_back
#define        inf                              (1e9)+1000
#define        eps                             1e-9
#define        ALL(x)                          x.begin(),x.end()
using namespace std;
int dx[]={0,0,1,-1,-1,-1,1,1};
int dy[]={1,-1,0,0,-1,1,1,-1};
template < class T> inline T biton(T n,T pos){return n |((T)1<<pos);}
template < class T> inline T bitoff(T n,T pos){return n & ~((T)1<<pos);}
template < class T> inline T ison(T n,T pos){return (bool)(n & ((T)1<<pos));}
template < class T> inline T gcd(T a, T b){while(b){a%=b;swap(a,b);}return a;}
template <typename T> string NumberToString ( T Number ) { ostringstream ss; ss << Number; return ss.str(); }
inline int nxt(){int aaa;scanf("%d",&aaa);return aaa;}
inline ll lxt(){ll aaa;scanf("%lld",&aaa);return aaa;}
inline double dxt(){double aaa;scanf("%lf",&aaa);return aaa;}
template <class T> inline T bigmod(T p,T e,T m){T ret = 1;
for(; e > 0; e >>= 1){
    if(e & 1) ret = (ret * p) % m;p = (p * p) % m;
} return (T)ret;}
#ifdef sayed
     #define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template < typename Arg1 >
    void __f(const char* name, Arg1&& arg1){
        cerr << name << " is " << arg1 << std::endl;
    }
    template < typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names+1, ',');
        cerr.write(names, comma - names) << " is " << arg1 <<" | ";
        __f(comma+1, args...);
    }
#else
    #define debug(...)
#endif
///******************************************START******************************************
int ar[N];
vector<int> s;
ll dp[20][2521][51][2];
ll Lcm[2530][10];
int id[2530];
ll go(int pos,int mod,int lc,int isSmall) {
        if(pos<0){
            if(lc==0) return 0;
            return mod%lc==0;
        }
        ll &res = dp[pos][mod][id[lc]][isSmall];
        if(res!=-1&&isSmall) return res;
        res = 0;
        int limit = isSmall?9:s[pos];
        for(int i = 0;i<=limit;i++) {
            res+=go(pos-1,((mod*10)+i)%2520,Lcm[lc][i],isSmall|i<(s[pos]));
        }
        return res;
}
ll solve(ll x) {
    s.clear();
    while(x) {
        s.pb(x%10);
        x/=10;
    }
    return go(s.size()-1,0,0,0);

}
int lcm(int a,int b){
    return a*b/gcd(a,b);
}
int main(){
    #ifdef sayed
    //freopen("out.txt","w",stdout);
    // freopen("in.txt","r",stdin);
    #endif
    //ios_base::sync_with_stdio(false);
    //cin.tie(0);
    set<int> st;
    for(int i = 0;i<=(1<<10);i++){
            int lc= 0;
        for(int j = 1;j<=9;j++){
            if(ison(i,j)) {
                if(lc==0) lc = j;
                else lc = lcm(lc,j);
            }
        }
        for(int j = 0;j<=9;j++) {
            if(lc==0) Lcm[lc][j] = j;
            else if(j==0) Lcm[lc][j] = lc;
            else Lcm[lc][j] = lcm(lc,j);
            st.insert(Lcm[lc][j]);
        }
    }
    int x = 0;
    for(auto it : st) {
        id[it] = x++;
    }
    SET(dp);
    int test = nxt();
    while(test--) {
        ll down = lxt();
        ll up = lxt();
        printf("%lld\n",solve(up)-solve(down-1));
      //  debug(mx);
    }

    return 0;
}
