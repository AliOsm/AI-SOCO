#include <string>
#include <iostream>
#include <iomanip>
#include <vector>
#include <set>
#include <map>
#include <hash_set>
#include <hash_map>
#include <algorithm>
#include <functional>

typedef unsigned long long  uint64_t;
typedef   signed long long  int64_t;
typedef unsigned long       uint32_t;
typedef   signed long       int32_t;
typedef unsigned short      uint16_t;
typedef   signed short      int16_t;
typedef unsigned char       uint8_t;
typedef   signed char       int8_t;

typedef std::vector<int32_t>        IntVector;
typedef std::vector<uint64_t>       UIntVector;
typedef std::vector<IntVector>      IntVector2d;

typedef std::vector<size_t>         SizeTVector;
typedef std::vector<SizeTVector>    SizeTVector2d;

typedef std::set<size_t>            SizeTSet;
typedef stdext::hash_set<size_t>    SizeTHashSet;

template <typename T>
inline T ABS(const T v) {return v > 0 ? v : (-v);}

template <typename T>
inline T MIN(const T v1, const T v2) {return v1 < v2 ? v1 : v2;}

static const uint64_t Module = 1000000007;

UIntVector CalcPows(const uint64_t number)
{
    uint64_t currPow = number;
    const size_t bitCount = 64;
    UIntVector pows(bitCount);
    
    size_t bitIndex = 0;
    pows[0] = currPow;
    for (bitIndex = 1; bitIndex < bitCount; bitIndex++)
    {
        currPow *= currPow;
        currPow %= Module;
        pows[bitIndex] = currPow;
    }

    return pows;
}

uint64_t Pow(const UIntVector& pows, const uint64_t power)
{
    uint64_t result = 1;
    const size_t bitCount = pows.size();

    for (size_t bitIndex = 0; bitIndex < bitCount; bitIndex++)
    {
        const uint64_t currMask = 1ULL << bitIndex;
        if ((power & currMask) != 0)
        {
            result *= pows[bitIndex];
            result %= Module;
        }
    }

    return result;
}

bool Solve(std::istream& ist, std::ostream& ost, bool multipleTestMode)
{
    // first input operation
    //
    uint64_t n;
    ist >> n;

    // /////////////////////

    if (multipleTestMode && !ist)
    {
        return false;
    }

    // other input operation and calculations
    //
    uint64_t ans = 0;
    if (n == 0)
    {
        ans = 1;
    }
    else if (n == 1)
    {
        ans = 3;
    }
    else
    {
        const UIntVector pows = CalcPows(2);
        const uint64_t pow2nm1 = Pow(pows, n-1);
        const uint64_t pow2n = Pow(pows, n);
        ans = pow2nm1 * (pow2n + 1);
        ans %= Module;
    }
    ost << ans << std::endl;

    // /////////////////////

    return multipleTestMode;
}

int main()
{
    std::istream& ist = std::cin;
    std::ostream& ost = std::cout;
#if 1
    Solve(ist, ost, false);
#else
    while(Solve(ist, ost, true)) {};
#endif
}
