#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

#define MAXV 100010

int V;
vector <pair <int, int> > graph[MAXV]; // to, weight
bool removed[MAXV];
int sz[MAXV];
int ans[MAXV];

void dfs(int p, int x){
    int i;
    sz[x] = 1;
    REP(i,graph[x].size()){
        int y = graph[x][i].first;
        if(y != p && !removed[y]){
            dfs(x, y);
            sz[x] += sz[y];
        }
    }
}

int find_center(int x){
    int i,p=-1;
    
    dfs(-1, x);
    int cap = sz[x] / 2;
    
    while(1){
        bool found = false;
        REP(i,graph[x].size()){
            int y = graph[x][i].first;
            if(!removed[y] && y != p && sz[y] > cap){
                found = true;
                p = x;
                x = y;
                break;
            }
        }
        if(!found) return x;
    }
}

void func(int x, int alp){
    int i;
    int y = find_center(x);
    ans[y] = alp;
    
    removed[y] = true;
    REP(i,graph[y].size()){
        int z = graph[y][i].first;
        if(!removed[z]) func(z, alp+1);
    }
}

int main(void){
    int i;
    
    cin >> V;
    REP(i,V-1){
        int a,b;
        scanf("%d%d", &a, &b);
        graph[a-1].push_back(make_pair(b-1, 1));
        graph[b-1].push_back(make_pair(a-1, 1));
    }
    
    func(0, 0);
    
    string s;
    REP(i,V){
        s += (char)('A' + ans[i]);
        if(i != V-1) s += ' ';
    }
    
    printf("%s\n", s.c_str());
    
    return 0;
}
