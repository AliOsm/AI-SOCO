#include <set>
#include <map>
#include <algorithm>
#include <cmath>
#include <vector>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <sstream>
#include <cassert>
using namespace std;

const int INF=2000000000;

typedef long long ll;

int n,m;

ll gcd(ll a, ll b)
{
	return b? gcd(b,a%b):a;
}

ll gcdex(ll a, ll b, ll &x, ll &y)
{
	if(!b)
	{
		x=1;
		y=0;
		return a;
	}
	ll x1, y1;
	ll g=gcdex(b,a%b, x1,y1);
	x=y1;
	y=x1-a/b*y1;
	return g;
}

ll find_mul(ll from, ll to)
{
	ll x, y, g;
	g=gcdex(from, m, x, y);
	assert(to%g==0);
	x=(x%m+m)%m;
	assert(from*x%m==g);
	x=x*(to/g)%m;
	return x;
}

int main()
{
	scanf("%d%d",&n,&m);
	vector<int> good(m,1);
	for(int i=0;i<n;i++)
	{
		int k;
		scanf("%d",&k);
		good[k]=0;
	}
	vector<ll> primes;
	int t=m;
	for(int i=2;i<=t;i++)
		if(t%i==0)
		{
			primes.push_back(i);
			while(t%i==0)
				t/=i;
		}

	vector<vector<int> > groups(m+1);
	for(int i=0;i<m;i++)
		if(good[i])
			groups[gcd(i, m)].push_back(i);

	vector<int> dp(m+1);
	vector<int> to(m+1,-1);
	for(int i=m;i>0;i--)
	{
		if(m%i!=0) continue;
		dp[i]=0;
		for(int j=0;j<primes.size();j++)
		{
			ll nval=i*primes[j];
			if(m%nval==0)
			{
				dp[i]=max(dp[i], dp[nval]);
				if(dp[i]==dp[nval])
					to[i]=nval;
			}
		}
		dp[i]+=groups[i].size();
	}
	cout<<dp[1]<<endl;
	vector<ll> vals;
	int cur=1;
	while(true)
	{
		vals.insert(vals.end(), groups[cur].begin(), groups[cur].end());
		if(to[cur]==-1) break;
		cur=to[cur];
	}
	printf("%lld", vals[0]);
	for(int i=1;i<vals.size();i++)
		printf(" %lld",find_mul(vals[i-1], vals[i]));
	puts("");
	return 0;
}
