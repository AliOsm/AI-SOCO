/*
    In the name of
        "ALLAH"
    And say "AL-HAMD-U-LILLAH"
*/

#include<bits/stdc++.h>
#define   ll   long long
#define   llu  unsigned long long
#define   _    printf("\n")
int      take() {
    int n;
    scanf("%d",&n);
    return n;

}
double  ttake() {
    double n;
    scanf("%lf",&n);
    return n;
}
ll     takes() {
    ll n;
    scanf("%lld",&n);
    return n;

}

#define  Int             take()
#define  Dnt             ttake()
#define  LL              takes()
#define  done            {return 0;}
#define  fr(i,x,n,a)     for(int i=x;i<=n;i+=a)
#define  FR(a,b,x)       for(int i=(a);i<=(b);i+=(x))
#define  rfr(i,x,n,a)    for(int i=x;i>=n;i--)
int      cas;
#define  print           printf("Case %d:",++cas)
#define  vi              vector<int>
#define  vl              vector<ll>
#define  pb              push_back
#define  pii             pair<int,int>
#define  vii             vector<pii>
#define  pll             pair<ll,ll>
#define  pil             pair<int,ll>
#define  pli             pair<ll,int>
#define  pipii           pair<int,pii>
#define  piipi           pair<pii,int>
#define  mk              make_pair
#define  fill(x,v)       memset(x,v,sizeof x)

using    namespace       std;

bool     approximatelyEqual(float a, float b, float epsilon) {
    return fabs(a - b) <= ( (fabs(a) < fabs(b) ? fabs(b) : fabs(a)) * epsilon);
}

bool     essentiallyEqual(float a, float b, float epsilon) {
    return fabs(a - b) <= ( (fabs(a) > fabs(b) ? fabs(b) : fabs(a)) * epsilon);
}

bool     definitelyGreaterThan(float a, float b, float epsilon) {
    return (a - b) > ( (fabs(a) < fabs(b) ? fabs(b) : fabs(a)) * epsilon);
}

bool     definitelyLessThan(float a, float b, float epsilon) {
    return (b - a) > ( (fabs(a) < fabs(b) ? fabs(b) : fabs(a)) * epsilon);
}
#define  STR             {struct info}
#define  dbg(x)          {cout<<"ekhane"<<x<<endl;}
#define  SS              second
#define  FF              first
#define  PQ              priority_queue
#define  great           greatest
#define  less            lesser
#define  mii             map<int,int>
#define  mil             map<int,ll>
#define  mll             map<ll,ll>
#define  msb             map<string,bool>
#define  V               vector
#define  M               50005
#define  pf              printf
#define  inf             INT_MAX
//////////////////////////////////////////
vi v1[ M ] ;
int   dp[ M ][ 505 ] , par[ M ] ;
ll ans ;
void dfs( int x , int pa , int k ){
    par[ x ] = pa ;
    int cnt = 0 ;
    for( int u : v1[ x ] ){
        if( u != pa ) dfs( u , x , k ) , cnt++ ;
    }

        dp[ x ][ 0 ] = 1 ;
    for( int u : v1[ x ] ){
        if( u == pa ) continue ;
        fr( i , 1 , k , 1 ) dp[ x ][ i ] += dp[ u ][ i - 1 ] ;
    }
}
int main( ){
   int tc = 1 ;
   while( tc-- ){
        int n = Int , k = Int ;
        fr( i , 1 , n - 1 , 1 ){
            int u = Int , v = Int ;
            v1[ u ].pb( v ) ;
            v1[ v ].pb( u ) ;
        }
        dfs( 1 , 0 , k ) ;
        fr( i , 1 , n , 1 ){
            int cur = par[ i ] , pre = i , complete = 1 ;
            /*fr( j , 0 , k , 1 ){
                pf("i = %d    j = %d     dp[i][j] = %d\n",i,j,dp[i][j]) ;
            }*/
            while( cur ){
              //      cout<<" i = "<<i<<"  node = "<<pre<<"  par = "<<cur<<"  comnplete = "<<complete<<endl;
                    if( complete == k ) ans+=2 ;
                    if( k - complete < 1 ) break ;
                int d = dp[ cur ][ k - complete ] - dp[ pre ][ k - complete - 1 ] ;
                ans += d ;
                pre = cur ;
                cur = par[ cur ] ;
                complete++ ;
            //cout<<" answer = "<<ans<<endl;
            }

        }
      //  dbg( ans ) ;

      pf("%lld\n",ans / 2 ) ;
   }
    done ;
}
