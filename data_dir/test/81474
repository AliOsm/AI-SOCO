/*"Everything in the universe is balanced. Every disappointment
   you face in life will be balanced by something good for you!
                Keep going, never give up."            */

#include "bits/stdc++.h"
using namespace std;


#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
ordered_set<int>  os;
#define up_bound(i) os.order_of_key(i) << endl; // the number of elements in the os less than i
#define access_idx(i) *os.find_by_order(i) // print the i-th smallest number in os(0-based)

typedef double f80;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){uniform_int_distribution<int> uid(l, r); return uid(rng); }

#define ll long long int
#define ld double 
#define rep(i,a,b) for(int i=a; i<=b; ++i)
#define repd(i,a,b) for(int i=a; i>=b; --i)
#define deb cerr << "Line no." << __LINE__
#define nl '\n'
#define pb push_back
#define all(a) a.begin(),a.end()
#define P pair<ll,ll> 
#define F first
#define S second
const ll p_mod=9999999999999983;
const long double pi = 3.14159265358979323;
const ll N=1e6+9;
const ll mod=1e9+7;
ll powerk(ll x, ll y);
ll mul(ll x, ll y);
ll add(ll x, ll y);
ll sub(ll x, ll y);

ll a[N],vis[N],minm=1e18,level[N];
vector<ll> v[N];
set<P> st;
set<ll> stt;


void dfs(ll x, ll dist, ll papa, ll par)
{
	vis[x]=1; 
	//cout<<x<<" " <<dist<<" "<<par<<nl;
	for(auto it: v[x])
	{
		//cout<<it<<" "<<x<<" "<<vis[it]<<" "<<dist <<nl;
		if(!vis[it])
			dfs(it,dist+1,x,par);
		else if(vis[it] && it==par && papa!=it)
		{
			minm = min(minm,dist);
		}
	}
	vis[x]=0;
}

void bfs(ll x)
{
	queue<P> q;
	q.push({x,x});
	vis[x]=1;
	vector<ll> temp;

	while(!q.empty()){
		auto it = q.front();
		q.pop();
		temp.pb(it.F);
		for(auto itt: v[it.F])
		{
			if(!vis[itt])
			{
				vis[itt]=1;
				q.push({itt,it.F});
				level[itt] = level[it.F]+1;

			}
			else if(itt!=it.S){
				minm = min(minm,level[it.F]+level[itt]+1);
			}
		}
	}
	for(auto it: temp)
		vis[it]=level[it]=0;
}

void pre(){
	rep(i,2,N-2)
	{
		if(!a[i])
		{
			a[i]=i;
			for(int j=2*i; j<N; j+=i){
				if(!a[j])
					a[j]=i;
			}

		}
	}
	a[1]=1;
}

void solve()
{    
  ll n,m,flag=0,p=0;
  cin>>n;
  //cout<<a[6];
  rep(i,1,n)
  {
  	cin>>m;
  	vector<ll>temp;
  	while(m>1)
  	{
  		ll x  = a[m];
  		ll cnt=0;
  		while(m%x==0)
  		{
  			cnt++;
  			m/=x;
  		}
  		if(cnt&1)temp.pb(x);
  	}
  	if(temp.size()==1)temp.pb(1);
  	else if(temp.size()==0){flag=1;break;} 
  	//cout<<temp[0]<<" "<<temp[1]<<nl;
  	//v[temp[0]].pb(temp[1]),v[temp[1]].pb(temp[0]); 
  	p++;
  	sort(all(temp));
  	st.insert({temp[0],temp[1]});
  }
  if(flag)cout<<flag<<nl;
  else{
  	if(st.size()!=p)cout<<2<<nl;
  	else{
  		for(auto it: st)
  		{
  			v[it.F].pb(it.S);
  			v[it.S].pb(it.F);
  			stt.insert(it.F);
  			stt.insert(it.S);
  		}
  		for(auto it: stt)
		if(it<=1000)
		{
		  	bfs(it);
		  	//break;
		}
		if(minm==1e18)cout<<-1<<nl;
		else
		cout<<minm<<nl;
  	}
  }

  


}


int main() {
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    ll t=1;
    pre();
    //cin>>t;
    while(t--)
    {
      solve();
    }  
}
ll mul(ll x, ll y){return (x*y)%mod;}
ll add(ll x, ll y){return (x+y)%mod;}
ll sub(ll x, ll y){return (x-y+mod)%mod;}
ll powerk(ll x, ll y)
{
  if(y==0)return 1;
  if(y==1)return x%mod;
  if(y&1)
    return ((powerk((x*x)%mod, y/2)%mod)*x)%mod;
  else return powerk((x*x)%mod,y/2)%mod;
}

// Xorawar