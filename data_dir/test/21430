#pragma comment(linker, "/STACK:400000000")
#define _CRT_SECURE_NO_WARNINGS

#include <cstdio>
#include <cstdarg>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <string>
#include <numeric>
#include <complex>
#include <functional>
#include <cmath>
#include <time.h>
#include <memory.h>

using namespace std;

typedef long long LL;

const int N = 400000;

int n;

vector<int> G[N];

int sz[N];
pair<int, int> largest[N];
int best[N];
int res[N];

void init(int v, int p = -1)
{
	sz[v] = 1;
	for(int i = 0; i < G[v].size(); ++i)
	{
		int to = G[v][i];
		if (to == p)
			continue;
		init(to, v);
		sz[v] += sz[to];
		largest[v] = max(largest[v], make_pair(sz[to], to));
		best[v] = max(best[v], best[to]);
		if (sz[to] <= n / 2)
			best[v] = max(sz[to], best[v]);
	}
}

void go(int v, int up = 0, int p = -1)
{
	largest[v] = max(largest[v], make_pair(n - sz[v], p));
	vector<pair<int, int> > b, c;
	b.push_back(make_pair(up, p));
	if (n - sz[v] <= n / 2)
		c.push_back(make_pair(n - sz[v], p));
	for(int i = 0; i < G[v].size(); ++i)
	{
		int to = G[v][i];
		if (to == p)
			continue;
		b.push_back(make_pair(best[to], to));
		if (sz[to] <= n / 2)
			c.push_back(make_pair(sz[to], to));
	}
	sort(b.rbegin(), b.rend());
	sort(c.rbegin(), c.rend());

	if (largest[v].first > n / 2)
	{
		if (largest[v].second == p)
		{
			if (largest[v].first - up <= n / 2)
				res[v] = 1;
		}
		else
		{
			if (largest[v].first - best[largest[v].second] <= n / 2)
				res[v] = 1;
		}
	}
	else
		res[v] = 1;

	for(int i = 0; i < G[v].size(); ++i)
	{
		int to = G[v][i];
		if (to == p)
			continue;
		int next = up;
		for(int j = 0; j < min(2, (int)b.size()); ++j)
			if (to != b[j].second)
				next = max(next, b[j].first);
		for(int j = 0; j < min(2, (int)c.size()); ++j)
			if (to != c[j].second)
				next = max(next, c[j].first);
		if (n - sz[to] <= n / 2)
			next = max(next, n - sz[to]);
		go(to, next, v);
	}
}

int main()
{
	scanf("%d", &n);
	for(int i = 0; i < n - 1; ++i)
	{
		int u, v;
		scanf("%d%d", &u, &v);
		u--, v--;
		G[u].push_back(v);
		G[v].push_back(u);
	}
	init(0);
	go(0);
	for(int i = 0; i < n; ++i)
		printf("%d ", res[i]);
	printf("\n");
	return 0;
}