//satyaki3794
#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <algorithm>
#include <climits>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cctype>
#include <cassert>
#include <bitset>
#include <iomanip>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define PI (3.14159265)
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define INF (100000005)
#define SIZE (2)
#define TREESIZE (302144)
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)
#define epsilon 1e-8 //add to double before casting to integer
 
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef pair<ll, int> pli;


#define matrix vector< vector<ll> >

matrix matmul(matrix &a, matrix &b){
    int i, j, k, n = a.size();
    matrix ans (n, vector<ll>(n));
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
            ll temp = 0;
            for(k=0;k<n;k++)    temp = (temp + a[i][k] * b[k][j]) % MOD;
            ans[i][j] = temp;
        }

    return ans;
}

matrix matpwr(matrix &a, ll p){
    int n = a.size();
    matrix ans(n, vector<ll> (n));
    for(int i=0;i<n;i++)    ans[i][i] = 1;

    while(p){
        if(p&1) ans = matmul(ans, a);

        a = matmul(a, a);
        p >>= 1;
    }
    return ans;
}


ll pwr(ll base, ll p, ll mod = MOD){
    ll ans = 1;
    while(p){
        if(p & 1)   ans = (ans * base) % mod;
        base = (base * base) % mod;
        p /= 2;
    }
    return ans;
}


ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}


ll lcm(ll a, ll b){
    return (a*b) / gcd(a, b);
}


ll invMod(ll n, ll mod = MOD){
    return pwr(n, mod-2);
}


int n, k, a[100004], b[100005];
ll DP[10][10][10][10], powers[12];



ll dp(int len, int start, int mod, int rem){
    if(len == 1){
        if(start % mod != rem)  return 0;
        return 1;
    }
    if(DP[len][start][mod][rem] != -1)  return DP[len][start][mod][rem];

    ll ans = 0;
    for(int dig=0;dig<10;dig++){
        int newmod = rem - (powers[k-len] % mod) * dig;
        newmod %= mod;
        if(newmod < 0)  newmod += mod;
        ans = (ans + dp(len-1, start, mod, newmod)) % MOD;
    }

cout<<len<<" "<<start<<" "<<mod<<" "<<rem<<" returns "<<ans<<endl;
    return DP[len][start][mod][rem] = ans;
}


int main()
{
    ios_base::sync_with_stdio(0);
    // freopen("input.txt", "r", stdin);

    cin>>n>>k;
    for(int i=1;i<=n/k;i++) cin>>a[i];
    for(int i=1;i<=n/k;i++) cin>>b[i];

    powers[0] = 1;
    for(int i=1;i<=10;i++)
        powers[i] = powers[i-1] * 10;

    // memset(DP, -1, sizeof(DP));
    // for(int start=0;start<=9;start++)
    //     for(int mod=1;mod<10;mod++)
    //         for(int rem=0;rem<mod;rem++){
                // dp(k, start, mod, rem);
        // cout<<start<<" "<<mod<<" "<<rem<<" gives "<<dp(k, start, mod, rem)<<endl;
            // }

// cout<<dp(2, 0, 3, 0)<<endl;

// for(int start=0;start<10;start++)


    // ll ans = 1;
    // for(int i=1;i<=n/k;i++)
    //     for(int j=0;j<10;j++)
    //         if(j != b[i])
    //             ans = (ans * dp(k, j, a[i], 0)) % MOD;

    ll ans = 1;
    for(int i=1;i<=n/k;i++){
        ll tot = 1 + (powers[k]-1)/a[i];
        if(b[i] == 0){
            tot -= 1 + (1 * powers[k-1] - 1)/a[i];
        }
        else{
            tot -= ((b[i]+1) * powers[k-1] - 1)/a[i];
            tot += (b[i] * powers[k-1] - 1)/a[i];
        }

        tot %= MOD;
        ans = (ans * tot) % MOD;
    }

    cout<<ans;
    return 0;
}










