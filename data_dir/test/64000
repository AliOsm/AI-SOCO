#include "bits/stdc++.h"
using namespace std;
const int N = 3e5 + 5;
int n , q , l , r;
int a[N];
int ans[N];
int segtree[N << 2];
int segcnt[N << 2];

void upd(int node , int u , int v , int idx , int val) {
  if(u > v | u > idx | v < idx) return;
  if(u >= idx and v <= idx) {
    segtree[node] = !val ? idx : 0;
    return;
  }
  int m = (u + v) / 2;
  upd(node * 2 , u , m , idx , val);
  upd(1 + (node * 2) , m + 1 , v , idx , val);
  segtree[node] = max(segtree[node * 2] , segtree[1 + (node * 2)]);
}

int query(int node , int u , int v , int l , int r) {
  if(u > v | u > r | v < l) return 0;
  if(u >= l and v <= r) {
    return segtree[node];
  }
  int m = (u + v) / 2;
  return max(query(node * 2 , u , m , l , r) , query(1 + (node * 2) , m + 1 , v , l , r) );
}

void updcnt(int node , int u , int v , int idx , int val) {
  if(u > v | u > idx | v < idx) return;
  if(u >= idx and v <= idx) {
    segcnt[node] += val;
    return;
  }
  int m = (u + v) / 2;
  updcnt(node * 2 , u , m , idx , val);
  updcnt(1 + (node * 2) , m + 1 , v , idx , val);
  segcnt[node] = segcnt[node * 2] + segcnt[1 + (node * 2)];
}

int querycnt(int node , int u , int v , int l , int r) {
  if(u > v | u > r | v < l) return 0;
  if(u >= l and v <= r) return segcnt[node];
  int m = (u + v) / 2;
  return querycnt(node * 2 , u , m , l , r) + querycnt(1 + (node * 2) , m + 1 , v , l , r);
}


void solve() {
  scanf("%d" , &n);
  for(int i = 1; i <= n; ++i) {
    upd(1 , 1 , n , i , 0);
  }
  int idx = query(1 , 1 , n , 1 , n);
  if(idx == 0) {
    ans[0] = 1;
  } else {
    ans[0] = 1 + querycnt(1 , 1 , n , 1 , idx);
  }
  for(int i = 1; i <= n; ++i) {
    int x;
    scanf("%d" , &x);
    upd(1 , 1 , n , x , 1);
    updcnt(1 , 1 , n , x , 1);
    idx = query(1 , 1 , n , 1 , n);
    if(idx == 0) {
      ans[i] = 1;
    } else {
      ans[i] = 1 + querycnt(1 , 1 , n , 1 , idx);
    }
  }
  for(int i = 0; i <= n; ++i) {
    printf("%d " , ans[i]);
  }
}

int main() {
  solve();
  return 0;
}