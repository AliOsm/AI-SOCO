#include<bits/stdc++.h>

using namespace std;

int const N = 2e5+10;

int n;

int a[N], b[N], c[N];

int seg[3][4*N];
void build(int idx, int i, int j){
  if(i == j){
    seg[0][idx] = seg[1][idx] = seg[2][idx] = 1;
    return;
  }
  int mid = (i+j)>>1, left = idx<<1, right = left|1;
  build(left,i,mid), build(right,mid+1,j);
  seg[0][idx] = seg[0][left] + seg[0][right];
  seg[1][idx] = seg[1][left] + seg[1][right];
  seg[2][idx] = seg[2][left] + seg[2][right];
}

void update(int idx, int i, int j, int pos, int id){
  if(i == j){
    seg[id][idx] = 0;
    return;
  }
  int mid = (i+j)>>1, left = idx<<1, right = left|1;
  if(pos <= mid) update(left,i,mid,pos,id);
  else update(right,mid+1,j,pos,id);
  seg[id][idx] = seg[id][left] + seg[id][right];
}

int find(int idx, int i, int j, int k, int id){
  if(i == j) return i;
  int mid = (i+j)>>1, left = idx<<1, right = left|1;
  if(seg[id][left] > k) return find(left,i,mid,k,id);
  return find(right,mid+1,j,k-seg[id][left],id);
}

int query(int idx, int i, int j, int ini, int fim, int id){
  if(i>j || j<ini || fim<i) return 0;
  if(ini<=i && j<=fim) return seg[id][idx];
  int mid = (i+j)>>1, left = idx<<1, right = left|1;
  return query(left,i,mid,ini,fim,id) + query(right,mid+1,j,ini,fim,id);
}

int main(){
  
    scanf("%d",&n);
    for(int i = 1; i <= n; i++) scanf("%d", &a[i]), a[i]++;
    for(int i = 1; i <= n; i++) scanf("%d", &b[i]), b[i]++;
    
    build(1,1,n);
    
    for(int i = 1; i <= n; i++){
      int p1 = query(1,1,n,1,a[i],0)-1;
      update(1,1,n,a[i],0);
      int p2 = query(1,1,n,1,b[i],1)-1;
      update(1,1,n,b[i],1);
      c[i] = p1+p2;
    }
    
    for(int i = n, mod = 1; i >= 1; i--, mod++){
      int add = c[i]/mod;
      c[i] %= mod, c[i-1] += add;
    }
    
    for(int i = 1; i <= n; i++){
      int pos = c[i];
      pos = find(1,1,n,pos,2);
      update(1,1,n,pos,2);
      c[i] = pos;
    }
    
    for(int i = 1; i <= n; i++) printf("%d ", c[i]-1);
    return 0;
    
}
