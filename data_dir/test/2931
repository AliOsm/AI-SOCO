#include <bits/stdc++.h>
#define ll long long
#define mx 100001
#define pi acos(-1.0)

using namespace std;

ll tree[4*mx];

void update(ll node,ll b,ll e,ll i,ll val){
    if(e<i || b>i)
        return;
    else if(b>=i && e<=i){
        tree[node]=val;
        return;
    }
    else{
        int l = node<<1;
        int r = l+1;
        int mid=(b+e)>>1;

        update(l,b,mid,i,val);
        update(r,mid+1,e,i,val);

        tree[node]=max(tree[l],tree[r]);
    }
}


ll query(ll node,ll b,ll e,ll i,ll j){
    if(e<i || b>j)
        return 0;
    else if(b>=i && e<=j){
        return tree[node];
    }
    else{
        ll l=node<<1;
        ll r=l+1;
        ll mid=(b+e)>>1;

        ll p = query(l,b,mid,i,j);
        ll q = query(r,mid+1,e,i,j);

        return max(p,q);
    }
}

int main(){
    ll i,j,k,l,m,n,t,p,q;
    scanf("%lld",&n);
    ll ara[mx],ara1[mx];
    for(i=0;i<n;i++){
        scanf("%lld%lld",&p,&q);
        ara[i] = (p*p*q);
        ara1[i]= (p*p*q);
    }
    sort(ara1,ara1+n);
    unordered_map<ll,ll>mymap;
    for(i=0;i<n;i++){
        if(mymap[ara1[i]]==0){
            mymap[ara1[i]]=i+1;
        }
    }
    ll ans=0;
    for(i=0;i<n;i++){
        p=query(1,1,n,1,mymap[ara[i]]-1);
        ans = max(ans,p+ara[i]);
        update(1,1,n,mymap[ara[i]],p+ara[i]);
    }
    double a = (double)ans * pi;
    printf("%.10f\n",a);
}
