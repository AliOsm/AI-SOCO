#include <iostream>
#include <vector>
#include <stack>
#include <queue>
#include <algorithm>
#include <map>
#include <cmath>
#include <set>
#include <deque>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <unordered_map>

#define pb push_back
#define mp make_pair

using namespace std;

typedef long long ll;
typedef pair<int, int> pi;
typedef pair<long long, long long> pll;

const int MOD = 1e9 + 7;

map<int, vector<int> > cnt;

int ans[222222];
int changes[222222];

bool cantTake(int value){

	if( cnt.find(value) == cnt.end() ) return true;

	
	if( cnt[value].empty() ) return true;
	
	return false;
}

int main(){
	
	int n, m; scanf("%d %d", &n, &m);
	
	for(int i = 1; i <= n; i++){
		int v; scanf("%d", &v);
		
		cnt[v].push_back(i);
	}
	
	ll u  = 0;
	int best = 0;
	vector<pi> sockets;
	
	for(int i = 1; i <= m; i++){
		int v; scanf("%d", &v);
		
		sockets.push_back( make_pair(v, i) );
		
	}
	
	sort(sockets.begin(), sockets.end());
	
	for(int j = 0; j < sockets.size(); j++){
		int v = sockets[j].first;
		int i = sockets[j].second;
		
		int amount = 0;
		while( cantTake(v) ){
			
			int before = v;
			if( v & 1 ){
				v >>= 1;
				v++;
			}else{
				v >>= 1;
			}
			
			amount++;
			if( v == before ) break;
		}
		
		if( !cantTake(v) ){
			
			ans[cnt[v].back()] = i;
			
			
			cnt[v].pop_back();
			u += amount;
			changes[i] = amount;
			best++;
		}
	}
	
	printf("%d %I64d\n", best, u);
	
	bool first = true;
	for(int i = 1; i <= m; i++){
		if(first) first = false;
		else printf(" ");
		printf("%d", changes[i]);
	}
	printf("\n");
	
	first = true;
	for(int i = 1; i <= n; i++){
		if(first) first = false;
		else printf(" ");
		
		printf("%d", ans[i]);
	}
	printf("\n");
	
	return 0;
}
