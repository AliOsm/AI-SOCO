#include <iostream>
#include <cmath>
#include <string>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <fstream>
#include <cassert>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <stack>
#include <functional>
#include <numeric>
#include <ctime>
#include <cstdlib>
#include <sstream>

using namespace std;

#define f first
#define s second
#define mp make_pair
#define pb push_back
#define pii pair<int, int>
#define pll pair<long long, long long>
#define y1 stupid_y1
#define ll long long
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x)*(x))
#define sz(a) (int)a.size()
#define file "a"

const int inf = (int)1e9;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int mod = (int)1e9 + 7;

int N;

struct matrix{
    int a[22][22];
    matrix(int x){
        for (int i=0;i<N;i++){
            for (int j=0;j<N;j++){
                a[i][j] = 0;
                if (i == j) a[i][j] = x;
            }
        }
    }

    matrix operator+(const matrix& o){
        matrix C = matrix(0);
        for (int i=0;i<N;i++){
            for (int j=0;j<N;j++){
                C.a[i][j] = a[i][j] + o.a[i][j];
                if (C.a[i][j] >= mod) C.a[i][j] -= mod;
            }
        }
        return C;
    }


    matrix operator*(const matrix& o){
        matrix C = matrix(0);
        for (int i=0;i<N;i++){
            for (int j=0;j<N;j++){
                C.a[i][j] = 0;
                for (int k=0;k<N;k++){
                    C.a[i][j] += a[i][k]*1ll*o.a[k][j]%mod;
                    if (C.a[i][j]>=mod) C.a[i][j] -= mod;
                }
            }
        }
        return C;
    }

    void makeFull(){
        for (int i=0;i<N;i++)
            for (int j=0;j<N;j++) 
                a[i][j] = 1;
    }

    void show(){
        for (int i=0;i<N;i++){
            for (int j=0;j<N;j++){
                printf("%d ", a[i][j]);
            }
            printf("\n");
        }
        for (int i=0;i<2*N;i++) printf("-");
        printf("\n");
    }

};

int n, m, q;
int dx[] = {1, 0, -1, 0, 0};
int dy[] = {0, 1, 0, -1, 0};

matrix binpow(matrix A, int n){
    matrix res = matrix(1);
    while(n){
        if (n&1) res = res*A;
        A = A*A;
        n >>= 1;
    }
    return res;
}

bool check(int x, int y){
    return x >= 0 && x < n && y >= 0 && y < m;
}

int main () {
    #ifdef LOCAL
    freopen(file".in", "r", stdin);
    freopen(file".out", "w", stdout);
    #endif

    scanf("%d%d%d", &n, &m, &q);
    matrix A = matrix(0);
    N = n*m;
    for (int i=0;i<N;i++){
        for (int j=0;j<N;j++){
            int x1 = i/m, y1 = i%m;
            int x2 = j/m, y2 = j%m;
            bool ok = false;
            for (int k=0;k<5;k++){
                int tox = x1 + dx[k];
                int toy = y1 + dy[k];
                if (tox == x2 && toy == y2) ok = true;
            }
            A.a[i][j] = ok;
        }
    }
    int prev = 1;
    matrix T = matrix(0);
    matrix C = matrix(0);
    matrix C2 = matrix(0);

    C2.a[0][0] = 1;

    for (int iter=0;iter<q;iter++){
        int type, x, y, t;
        scanf("%d%d%d%d", &type, &x, &y, &t);
        int diff = t - prev;
        x--; y--;
        T = binpow(A, diff);
        C = C2*T;
        C2 = C;

        if (type == 1){
            printf("%d\n", C.a[0][x*m+y]);
        }
        else if ( type == 2){
            int I = x*m+y;
            for (int k=0;k<5;k++){
                int tox = x + dx[k];
                int toy = y + dy[k];
                if (!check(tox, toy)) continue;
                int J = tox*m + toy;
                A.a[I][J] = A.a[J][I] = 0;
            }
        }
        else if ( type == 3){
            int I = x*m+y;
            A.a[I][I] = 1;
            for (int k=0;k<5;k++){
                int tox = x + dx[k];
                int toy = y + dy[k];
                if (!check(tox, toy)) continue;
                int J = tox*m + toy;
                if (!A.a[J][J]) continue;
                A.a[I][J] = A.a[J][I] = 1;
            }            
        }
        prev = t;
    }



    #ifdef LOCAL
    cerr << (double)clock() * 1.0 / CLOCKS_PER_SEC << endl;
    #endif

    return 0;
    
}

