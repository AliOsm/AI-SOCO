#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <queue>
#include <string>
#include <map>
#include <set>
#include <algorithm>
#include <list>
#include <cstdint>
#include <vector>
#include <cmath>
using namespace std;

vector<string> g;
vector<vector<bool> > used;

int di[] = { -1, 1, 0, 0 };
int dj[] = { 0, 0, 1, -1 };

vector<string> v(2);

void dfs(int i, int j)
{
	if (used[i][j])
		return;
	used[i][j] = true;
	for (int u = 0; u < 4; ++u)
	{
		int ni = i + di[u];
		int nj = j + dj[u];
		if (ni < 0 || ni >= g.size() ||
			nj < 0 || nj >= g[i].size())
			continue;
		if (u == 0 && v[1][nj / 2] == '^')
		{
			dfs(ni, nj);
		}
		else if (u == 1 && v[1][nj / 2] == 'v')
		{
			dfs(ni, nj);

		}
		else if (u == 2 && v[0][ni] == '>')
		{
			dfs(ni, nj);

		}
		else if (u == 3 && v[0][ni] == '<')
		{
			dfs(ni, nj);

		}
	}
}

int main(void)
{
	int n, m;
	cin >> n >> m;
	
	for (int i = 0; i < 2; ++i)
	{
		cin >> v[i];
	}
	g.reserve(n);
	int cur = 0;
	for (int i = 0; i < n; ++i)
	{
		string tmp(2 * m, v[0][i]);
		for (int j = 0; j < m; ++j)
		{
			tmp[2 * j + 1] = v[1][j];
		}
		g.push_back(tmp);
	}
	for (int i = 1; i < n; ++i)
	{
		for (int j = 1; j < m; j += 2)
		{
			used.assign(n, vector<bool>(2 * m));
			dfs(i, j);		
			bool f = true;
			for (int i = 0; i < n; ++i)
			{
				for (int j = 0; j < 2 * m; ++j)
				{
					if (!used[i][j])
					{
						f = false;
					}
				}
			}

			if (!f)
			{
				cout << "NO";
				return 0;
			}		
			
		}		
	}
	cout << "YES";

}