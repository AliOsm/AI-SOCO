#define pragma

#ifdef pragma
#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")
#endif // pragma

#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<pii> vpii;
typedef vector<pll> vpll;

#define all(x) (x).begin(), (x).end()
#define INF 1000000001
#define pi 3.1415926535897932384626433832795
#define INPUT "input.txt"
#define OUTPUT "output.txt"
//#define int ll

ll a[1111];

int main(){

    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    //freopen(INPUT, "r", stdin);
    //freopen(OUTPUT, "w", stdout);

    int n;
    cin >> n;
    for (int i = 0; i < n; ++i)
        cin >> a[i];
    for (int i = 1; i < n; ++i) {
        ld dy = (a[i] - a[0]) / 1. /i;
        vi wrong;
        for (int j = 1; j < n; ++j) {
            if (j == i)
                continue;
            if (a[0] + dy * 1ll * j != a[j])
                wrong.push_back(j);
        }
        if (wrong.size() == 0)
            continue;
        if (wrong.size() == 1)
            return cout << "Yes", 0;
        ld ddy = (a[wrong[1]] - a[wrong[0]]) / 1. / (wrong[1] - wrong[0]);
        if (ddy != dy)
            continue;
        bool flag = false;
        for (int j = 2; j < wrong.size(); ++j)
            if (a[wrong[0]] + ddy * (wrong[j] - wrong[0]) != a[wrong[j]])
                flag = true;
        if (flag)
            continue;
        return cout << "Yes", 0;
    }
    for (int i = 2; i < n; ++i) {
        ld dy = (a[i] - a[1]) / 1. / (i - 1);
        vi wrong;
        for (int j = 0; j < n; ++j) {
            if (j == i || j == 1)
                continue;
            if (a[1] + dy * 1ll * (j - 1) != a[j])
                wrong.push_back(j);
        }
        if (wrong.size() == 0)
            continue;
        if (wrong.size() == 1)
            return cout << "Yes", 0;
        ld ddy = (a[wrong[1]] - a[wrong[0]]) / 1. / (wrong[1] - wrong[0]);
        if (ddy != dy)
            continue;
        bool flag = false;
        for (int j = 2; j < wrong.size(); ++j)
            if (a[wrong[0]] + ddy * (wrong[j] - wrong[0]) != a[wrong[j]])
                flag = true;
        if (flag)
            continue;
        return cout << "Yes", 0;
    }
    cout << "No";
}
