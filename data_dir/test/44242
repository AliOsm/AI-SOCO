//Be Name Khoda
//no comment...
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, greater_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using mordered_multiset =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
const ll MOD = (int)1e9 + 7;
const ll MAXN = (ll)3e5 + 7;
const int infint = (int)1e9;
const ll inf = (ll)1e18;
ll fact[MAXN], facrev[MAXN];
unordered_map<ll, ll> prime;
ll pwr(ll a, ll b)
{
	if(b == 0)
		return 1;
	if(b == 1)
		return a;
	ll c = pwr(a, b / 2);
	c = (c * c) % MOD;
	if(b % 2)
		c = (c * a) % MOD;
	return c;
}
ll inv(ll p)
{
	return pwr(p, MOD - 2);
}
ll C(ll n, ll k)
{
	ll mul = fact[n];
	mul = (mul * facrev[k]) % MOD;
	mul = (mul * facrev[n - k]) % MOD;
	return mul;
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n;
	cin >> n;
	fact[0] = 1;
	for (int i = 1; i < MAXN; i++)
		fact[i] = (fact[i - 1] * i) % MOD;
	facrev[MAXN - 1] = inv(fact[MAXN - 1]);
	for (int i = MAXN - 1; i > 0; i--)
		facrev[i - 1] = (facrev[i] * i) % MOD;
	
	for (int i = 0; i < n; i++)
	{
		ll a;
		cin >> a;
		for (int j = 2; j * j <= a; j++)
			while(a % j == 0)
			{
				a /= j;
				prime[j]++;
			}
		if(a > 1)
			prime[a]++;
	}
	ll cnt = 1;
	for (auto u : prime)
		cnt = cnt * C(u.second + n - 1, n - 1) % MOD;
	cout << cnt;
}
