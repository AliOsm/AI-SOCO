#include <bits/stdc++.h>
using namespace std;
const int N = 1 << 18;
int dp[N], can[N], ok[N], res, ans, n, m;
string s, t;
int main () {
	memset(can, true, sizeof can);
	cin >> s >> t;
	n = s.size();
	m = t.size();
	for (int i = m; i <= n; i ++) 
		for (int j = 1; j <= m; can[i] &= s[i - m + j - 1] == '?' || s[i - m + j - 1] == t[j - 1], j ++);
	for (int i = 1; i <= m; i ++)
		ok[i] = t.substr(0, i) == t.substr(m - i, i);
	for (int i = m; i <= n; i ++) {
		dp[i] = (res = max(res, dp[i - m])) + 1;
		for (int j = 1; j < m; dp[i] = max(dp[i], ok[j] * dp[i - m + j] + ok[j]), j ++);
		ans = max(ans, dp[i] *= can[i]);
	}
	cout << ans;
}