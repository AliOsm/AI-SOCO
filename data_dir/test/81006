#include<bits/stdc++.h>
//#include <boost/multiprecision/cpp_int.hpp>
//using namespace boost::multiprecision;
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace std;
using namespace __gnu_pbds;

template <typename A, typename B>
string to_string(pair<A, B> p);
 
string to_string(const string& s) {
  return '"' + s + '"';
}
 
string to_string(const char* s) {
  return to_string((string) s);
}
 
string to_string(bool b) {
  return (b ? "true" : "false");
}
 
string to_string(vector<bool> v) {
  bool first = true;
  string res = "{";
  for (int i = 0; i < static_cast<int>(v.size()); i++) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(v[i]);
  }
  res += "}";
  return res;
}
 
template <size_t N>
string to_string(bitset<N> v) {
  string res = "";
  for (size_t i = 0; i < N; i++) {
    res += static_cast<char>('0' + v[i]);
  }
  return res;
}
 
template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}
 
template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
 
void debug_out() { cerr << endl; }
 
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}
 
#ifdef IGM
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...)
#endif

#define PI                      3.1415926535897932384626
#define fi                      first
#define se                      second
#define pb                      push_back
#define endl                    '\n'
#define all(x)                  x.begin(),x.end()
#define pii                     pair<int,int>
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define SZ(x)                   ((int)x.size())
#define ordered_set             tree <long long int, null_type,less<long long int>, rb_tree_tag,tree_order_statistics_node_update>
// find_by_order(x) ==> xth element in the set counting from 0
// order_of_key(x) ==> number of element strictly less than x
typedef long long ll;
typedef double ld;
typedef unsigned long long ull;


ll pow(ll a,ll b, ll m) {ll ans=1; while(b>0){ if(b%2==1) ans=(ans*a)%m; b/=2; a=(a*a)%m; } return ans%m; }
ll InverseMod(ll a,ll m) {return pow(a,m-2,m);}
template<typename T>int SquareDist(T a,T b) {int x = abs(a.fi - b.fi),y = abs(a.se - b.se); return x*x + y*y;}
template<typename T,typename Y> T pow2(T a,Y b) {T ans=1; while(b>0){ if(b%2==1) ans=(ans*a); b/=2; a=(a*a); } return ans; }
 
ll add(ll a,ll b,ll mod) {
        ll c = (a + b);
        if(c >= mod) {
                c -= mod;
        }
        return c;
}
ll sub(ll a,ll b,ll mod) {
        ll c = (a - b);
        if(c < 0) {
                c += mod;
        }
        return c;
}
ll mul(ll a,ll b,ll mod) {
        ll c = (a*b)%mod;
        return c;
}
ll div(ll a,ll b,ll mod) {
        ll c = mul(a,InverseMod(b,mod),mod);
        return c;
}
void inc(ll &a,ll b,ll mod) {
        a = add(a,b,mod);
}
void dec(ll &a,ll b,ll mod) {
        a = sub(a,b,mod);
}
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }
 
    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
 
// Write only proved sloutions

map < string,int > mp;

int cnt = 0;
void change(string &s) {
	if(mp[s] < 2) {
		return;
	}
	string cpy = s;
	for(int i = 0; i < 10; ++i) {
		char ch = (char)('0' + i);
		for(int j = 0; j < 4; ++j) {
			cpy[j] = ch;
			if(mp[cpy] == 0) {
				mp[s]--;
				mp[cpy]++;
				s = cpy;
				cnt++;
				return;
			}
			cpy[j] = s[j];
		}
	}
}
void solve() {
	mp.clear(); 
	int n;
	cnt = 0;
	cin >> n;
	
	std::vector< string  > v;
	
	for(int i = 0; i < n; ++i) {
		string p;
		cin >>  p;
		mp[p]++;
		v.pb({p});
	}
	for(int i = 0; i < n; ++i) {
		change(v[i]);
	}
	cout << cnt << endl;
	for(auto i:v) {
		cout << i << endl;
	}
	return;
}  

int32_t main()
{
        fast;
        int t = 1;
        cin >> t;
        for(int i = 1; i <= t; ++i)
                solve();
        cerr << "Time taken: " << ((clock() * 1000) / CLOCKS_PER_SEC) << "ms\n";
}