#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<long long, int>, // change type
//        null_type,
//        less<pair<long long, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

//template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)((x).size())
#define pb push_back
#define T first
#define P second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
#define debug(x) cerr << #x << " : " << (x) << endl
const double PI = 3.14159265358979323846;
const double eps = (1e-10);
int isGreater(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}


const int MOD = 998244353;
int mult(int x, int y)
{
    return (1LL * x * y)%MOD;
}
int add(int x, int y)
{
    x += y;
    while(x >= MOD)
        x -= MOD;
    while(x < 0)
        x += MOD;
    return x;
}

int add(vector<int> v)
{
    int ret = 0;
    for (int i = 0; i < sz(v); ++i)
        ret = add(ret, v[i]);
    return ret;
}

const int MAX_N = 3e5 + 5;
vector<int> adj[MAX_N];
int dp[MAX_N][3][2];
int n;


void calc(int u, int p)
{
    for (int v : adj[u])
    {
        if (v != p)
            calc(v, u);
    }
    // not in edge induced
    dp[u][0][1] = 0;
    dp[u][0][0] = 1;
    for (int v : adj[u])
    {
        if (v != p)
            dp[u][0][0] = mult(dp[u][0][0], add({dp[v][0][0], dp[v][2][0], dp[v][2][1]}));
    }

    // in edge induced myself
    dp[u][2][0] = dp[u][2][1] = 1;
    for (int v : adj[u])
    {
        if (v != p)
        {
            dp[u][2][0] = mult(dp[u][2][0], add({dp[v][1][0], dp[v][1][1], dp[v][2][0], dp[v][2][1], dp[v][0][0]}));
            dp[u][2][1] = mult(dp[u][2][1], add({dp[v][1][0], dp[v][2][0], dp[v][2][1], dp[v][0][0]}));
        }
    }
    dp[u][2][0] = add(dp[u][2][0], -dp[u][0][0]);
    dp[u][2][1] = add(dp[u][2][1], -dp[u][0][0]);

    // in edge induced from parent
    if (u == 0)
        return;
    dp[u][1][0] = dp[u][1][1] = 1;
    for (int v : adj[u])
    {
        if (v != p)
        {
            dp[u][1][0] = mult(dp[u][1][0], add({dp[v][0][0], dp[v][2][0], dp[v][2][1], dp[v][1][0], dp[v][1][1]}));
            dp[u][1][1] = mult(dp[u][1][1], add({dp[v][0][0], dp[v][2][0], dp[v][2][1], dp[v][1][0]}));
        }
    }

}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("AC.txt", "w", stdout);
#endif
    cin >> n;
    rep(i,0, n- 1)
    {
        int u, v;
        cin >> u >> v;
        --u; --v;
        adj[u].pb(v);
        adj[v].pb(u);
    }

    calc(0, n);

    cout << add({dp[0][0][0], dp[0][2][0], dp[0][2][1], -1});
    return 0;
}