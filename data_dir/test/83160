/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int N;
        in >> N;
        //++N;
        
        int res = ((N+1) * (N+1) / 4), res2 = 0;
        
        vector<pair<int, int>> segs;
        for (int i = 0; i <= N; ++i)
            for  (int j = i + 1; j <= N; ++j)
                segs.emplace_back(i, j);
        sort(segs.begin(), segs.end(), [](const pair<int, int>& lhs, const pair<int, int>& rhs) {
            return lhs.first < rhs.first || (lhs.first == rhs.first && lhs.first > rhs.second);
        });
        vector<int> cur;
        
        for (int i = 0; i < (int)segs.size(); ++i) {
            int a = segs[i].first, b = segs[i].second;
            bool found = false;
            for (int j = 0; !found && j < (int)cur.size(); ++j) {
                if (a >= cur[j]) {
                    cur[j] = b;
                    found = true;
                }
            }
            if (!found) {
                cur.push_back(b);
            }
        }
        res2 = cur.size();
        assert(res == res2);
        out << res << "\n";
    }
};


int main() {
	std::ios::sync_with_stdio(false); cin.tie(nullptr);

	TaskB solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
