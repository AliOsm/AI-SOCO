//#pragma GCC optimize("Ofast")
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0);}


int const maxn = 100005;
vector<int> gr[maxn];

int const maxl = 18;
int pre[maxn][maxl];
int tin[maxn];
int tout[maxn];
int curtime = 0;
int deep[maxn];
vector<int> vert[2 * maxn];

vector<pair<int,int> > que[maxn];

void dfs(int v = 0, int p = 0)
{
    if (v)
        deep[v] = 1 + deep[p];
    pre[v][0] = p;
    for(int i = 1; i < maxl; ++i)
        pre[v][i] = pre[pre[v][i - 1]][i - 1];

    tin[v] = ++curtime;
    vert[deep[v]].push_back(tin[v]);

    for(int ne : gr[v])
    {
        dfs(ne, v);
    }

    tout[v] = curtime;
}

int ans[maxn];

int main()
{
//    freopen("in.txt", "r", stdin);
//    freopen("out.txt", "w", stdout);
    ios_base::sync_with_stdio(false);

    int n;
    cin >> n;

    for(int i = 1; i <= n; ++i)
    {
        int p;
        cin >> p;
        gr[p].push_back(i);
    }

    dfs();

    int m;
    cin >> m;

    for(int i = 0; i < m; ++i)
    {
        int v,p;
        cin >> v >> p;
        for(int j = 0; j < maxl; ++j)
            if (p & (1 << j))
                v = pre[v][j];
        if (v)
            que[v].emplace_back(i, p);
    }

    for(int v = 1; v <= n; ++v)
    {
        for(const auto& p : que[v])
        {
            int curdeep = p.second + deep[v];
            int ind = p.first;
            ans[ind] = upper_bound(begin(vert[curdeep]), end(vert[curdeep]), tout[v]) - lower_bound(begin(vert[curdeep]), end(vert[curdeep]), tin[v]) - 1;
        }
    }
    for(int i = 0; i < m; ++i)
        cout << ans[i] << " \n"[i == m - 1];
}
