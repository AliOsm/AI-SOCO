#include<bits/stdc++.h>
using namespace std;

const int N = 1e5 + 5;


int n, m, t[N];
string s, ans;
vector < int > q[30];

void upd(int pos){
    for(int i = pos; i < n; i |= i + 1){
        t[i]++;
    }
}

int get(int pos){
    int cur = 0;
    for(int i = pos; i >= 0; i &= i + 1, i--){
        cur += t[i];
    }
    return cur;
}

int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    cin >> m >> s;
    n = (int)s.size();
    for(int i = 0; i < n; i++){
        q[s[i] - 'a'].push_back(i);
    }
    for(char j = 'a'; j <= 'z'; j++){
        reverse(q[j - 'a'].begin(), q[j - 'a'].end());
        vector < int > qq = q[j - 'a'];
        int sq = (int)q[j - 'a'].size();
        int t = 0;
        int pos = 0;
        bool p = true;
        for(int i = 0; i + m - 1 < n; i++){
            if(get(i + m - 1) - get(i - 1) <= 0){
                while(!q[j - 'a'].empty() && q[j - 'a'].back() < i){
                    q[j - 'a'].pop_back();
                }
                while((int)q[j - 'a'].size() >= 2 && q[j - 'a'][(int)q[j - 'a'].size() - 2] <= i + m - 1){
                    q[j - 'a'].pop_back();
                }
                if(q[j - 'a'].empty()){
                     p = false;
                     break;
                }
                t++;
                upd(q[j - 'a'].back());
                q[j - 'a'].pop_back();
                if(get(i + m - 1) - get(i - 1) <= 0){
                    p = false;
                    break;
                }
            }
        }
        if(p){
            for(int i = 1; i <= t; i++){
                ans += j;
            }
            cout << ans;
            return 0;
        }
        for(auto it : qq){
            upd(it);
        }
        for(int i = 1; i <= sq; i++){
            ans += j;
        }
    }
}
