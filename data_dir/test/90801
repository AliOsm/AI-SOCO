#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>
#include <map>
#include <set>
#include <bitset>
#include <ctime>
#include <queue>
#include <deque>
#include <iomanip>

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ii, int> iii;
typedef pair<iii, int> iii_indexed;

typedef vector<int> vi;
typedef vector<size_t> vsz;

typedef vector<ll> vll;
typedef vector<vll> vvll;

typedef vector<ii> vii;
typedef vector<vii> vvii;

typedef vector<iii> viii;
typedef vector<iii_indexed> viii_indexed;

typedef vector<vi> vvi;

template <class T>
T read() {
	T value;
	cin >> value;
	return value;
}

int read_int() {
	return read<int>();
}

size_t read_size() {
	return read<size_t>();
}

ll read_ll() {
	return read<ll>();
}

string read_string() {
	return read<string>();
}

template <class T>
void read_vector(vector<T> & a, size_t size) {
	a.resize(size);
	for (T & value : a) cin >> value;
}

template <class T1, class T2>
void read_pairs(vector<pair<T1, T2>> & a, size_t size) {
	a.resize(size);
	for (auto & value : a) cin >> value.first >> value.second;
}

void read_iii(viii & a, size_t size) {
	a.resize(size);
	for (iii & value : a) cin >> value.first.first >> value.first.second >> value.second;
}

void add_to_each(vi & a, int delta) {
	for (int & value : a) value += delta;
}

void add_to_each(vii & a, int delta) {
	for (ii & value : a) {
		value.first += delta;
		value.second += delta;
	}
}

const char SPACE = ' ', ENDL = '\n';

template <class T>
void print(vector<T> & a, char sep = SPACE) {
	for (T & value : a) cout << value << sep;
	cout << '\n';
}

template <class T>
vector<int> compress(vector<T> & values) {
	vector<T> sorted = values; // copying
	sort(sorted.begin(), sorted.end());
	sorted.resize(unique(sorted.begin(), sorted.end()) - sorted.begin());

	vector<int> result(values.size());
	for (int i = 0; i < values.size(); ++i) {
		result[i] = lower_bound(sorted.begin(), sorted.end(), values[i]) - sorted.begin();
	}

	return result;
}

int get_bit(ll mask, int bit) {
	return (int)((mask >> bit) & 1);
}

ll set_bit(ll mask, int bit) {
	return mask | (1LL << bit);
}

ll clear_bit(ll mask, int bit) {
	return mask & (~(1LL << bit));
}

string reverse(string s) {
	reverse(s.begin(), s.end());
	return s;
}

vi reverse(vi & a) {
	reverse(a.begin(), a.end());
	return a;
}

vector<int> concat_separated(vi & a, vi & b, int sep = -1) {
	size_t n = a.size(), m = b.size();
	vi s(n + 1 + m);
	for (int i = 0; i < n; ++i) s[i] = a[i];
	s[n] = sep;
	for (int j = 0; j < m; ++j) s[n + 1 + j] = b[j];
	return s;
}

const int BASE = 1000 * 1000 * 1000 + 7;
const int MODULO = BASE; // 1000 * 1000 * 1000 + 31; //998244353

typedef ll mod_t;

template <mod_t modulo>
inline mod_t add(mod_t a, mod_t b) {
	return (a + b) % modulo;
}

template <mod_t modulo>
inline void add_to(mod_t & a, mod_t b) {
	a += b;
	if (a >= modulo) a -= modulo;
}

template <mod_t modulo>
inline mod_t subtract(mod_t a, mod_t b) {
	return add<modulo>(a, modulo - b);
}

template <mod_t modulo>
inline mod_t multiply(mod_t a, mod_t b) {
	return (int)((a * b) % modulo);
}

struct DSU {
	vi parents;
	vi sizes;
	vi ranks;

	DSU(size_t n = 1) {
		resize(n);
	}

	void resize(size_t n) {
		parents.resize(n);
		for (int v = 0; v < n; ++v) {
			parents[v] = v;
		}

		ranks.resize(n, 1);
		sizes.resize(n, 0);
	}

	int get(int v) {
		int parent = parents[v];
		if (parent == v) return v;

		return parents[v] = get(parent);
	}

	bool merge(int f, int t, int weight = 1, bool multiple_edges = false) {
		int a = get(f);
		int b = get(t);

		if (multiple_edges) {
			sizes[a] += weight;
		}

		if (a == b) return false;

		if (ranks[a] < ranks[b]) {
			swap(a, b);
		}

		parents[b] = a;
		if (ranks[a] == ranks[b]) ++ranks[a];
		sizes[a] += sizes[b];
		if (!multiple_edges) sizes[a] += weight;

		return true;
	}

	bool connected(int f, int t) {
		return get(f) == get(t);
	}

	int get_size(int v) {
		return sizes[get(v)];
	}
};

class SegmentTree {

public:
	int size;
	vll t;

	SegmentTree(int n)
		: size(n)
		, t(size << 2, 0) {

	}

	void update_vertex(int v, int vL, int vR) {
		t[v] = t[vL] + t[vR];
	}

	int index;
	ll value;

	void update_value(int _index, ll _value) {
		index = _index;
		value = _value;

		update_tree_index(1, 0, size);
	}

	void update_tree_index(int v, int left, int right) {
		if (left + 1 == right) {
			t[v] = value;
		}
		else {
			int mid = (left + right) >> 1;
			int vL = (v << 1), vR = (vL + 1);

			if (index < mid) update_tree_index(vL, left, mid);
			else update_tree_index(vR, mid, right);

			update_vertex(v, vL, vR);
		}
	}

	int get_prefix(ll _value) {
		value = _value;
		return get_tree_prefix(1, 0, size);
	}

	int get_tree_prefix(int v, int left, int right) {
		if (left + 1 == right) {
			return left;
		}
		else {
			int mid = (left + right) >> 1;
			int vL = (v << 1), vR = (vL + 1);

			ll left_value = t[vL];
			if (left_value < value) {
				value -= left_value;
				return get_tree_prefix(vR, mid, right);
			}
			else {
				return get_tree_prefix(vL, left, mid);
			}
		}
	}
};

class FenwickTree {

	int size;
	vll t;
	vll values;

public:
	FenwickTree(int n)
		: size(n + 1)
		, t(size, 0LL)
		, values(size, 0LL)
	{ }

	void update_tree_index(int index, ll delta) {
		for (; index < size; index += index & -index) {
			t[index] += delta;
		}
	}

	void update_value(int index, ll value) {
		++index;
		ll delta = value - values[index];
		values[index] = value;

		update_tree_index(index, delta);
	}

	ll _sum;
	int get_prefix(ll value) {
		int result = 0;
		_sum = 0;

		for (int bit = 20; bit >= 0; --bit) {
			int next = result | (1 << bit);
			if (next < size && _sum + t[next] < value) {
				result = next;
				_sum += t[next];
			}
		}

		return result;
	}
};

template <int block_size>
class SqrtDecomposition {
	int size;
	vll blocks;
	vll values;

public:
	SqrtDecomposition(int n)
		: size(n)
		, blocks(size, 0LL)
		, values(size, 0LL)
	{ }

	void update_index(int index, ll delta) {
		int block = index / block_size;
		blocks[block] += delta;
	}

	void update_value(int index, ll value) {
		ll delta = value - values[index];
		values[index] = value;

		update_index(index, delta);
	}

	ll sum;
	int get_prefix(ll value) {
		int result = 0;
		sum = 0;

		for (int block = 0; block * block_size < size; ++block) {
			ll next_sum = sum + blocks[block];
			if (next_sum < value) {
				sum = next_sum;
			}
			else {
				result = block * block_size;
				break;
			}
		}

		while (result < size && sum + values[result] < value) {
			sum += values[result];
			++result;
		}

		return result;
	}
};

void update_max(int & cur_value, int new_value) {
	cur_value = max(cur_value, new_value);
}

void update_min(int & cur_value, int new_value) {
	cur_value = min(cur_value, new_value);
}

// =============================================

typedef ll ans_t;

ans_t get_answer(vi &);

// =============================================

vi get_brute_answer(int n, int m, vii & friend_queries, int k, vii & edges, int q, vvi & queries) {
	DSU dsu(n);

	map<int, vi> friends;

	for (ii & friend_query : friend_queries) {
		int f = friend_query.first - 1, t = friend_query.second - 1;
		friends[f].push_back(t);
		friends[t].push_back(f);
	}

	for (ii & edge_query : edges) {
		int f = edge_query.first - 1, t = edge_query.second - 1;
		dsu.merge(f, t);
	}

	vi answer;

	return answer;
}

#include <random>

typedef std::uniform_int_distribution<> uid;

FILE * print_file;

int print_test(int n, int m, vii & friends, int k, vii & edges, int q, vvi & queries, vi & expected, vi & actual, int bad_index) {
	fprintf(print_file, "%d %d %d\n", n, m, k);
	for (ii & fq : friends) {
		fprintf(print_file, "%d %d\n", fq.first, fq.second);
	}
	for (ii & eq : edges) {
		fprintf(print_file, "%d %d\n", eq.first, eq.second);
	}
	fprintf(print_file, "%d\n", q);

	fprintf(print_file, "===\n");

	for (int value : expected) {
		fprintf(print_file, "%d ", value);
	}
	fprintf(print_file, "\n");

	for (int value : actual) {
		fprintf(print_file, "%d ", value);
	}
	fprintf(print_file, "\n");

	fprintf(print_file, "%d\n", bad_index);

	fprintf(print_file, "===\n\n");

	// n,m,k + friends+ edges + q + queries + sep + expected + actual + bad_index + sep + empty
	return 1 + m + k + 1 + q + 1 + 1 + 1 + 1 + 1 + 1;
}

void set_print_file(const char *file_name) {
	print_file = fopen(file_name, "a");
}

void stress(int first_new_line = 1) {
	std::mt19937 rnd(time(0));

	uid nGen(1, 10);

	int first_line = first_new_line;
	for (int it = 0; it < 100; ++it) {
		int n = nGen(rnd);

		
		ll expected = 0;
		ll actual = 0;

		/*int bad_index = -1;
		for (int i = 0; i < expected.size(); ++i) {
			if (expected[i] != actual[i]) {
				bad_index = i;
				break;
			}
		}*/

		//if (bad_index >= 0) {
		if (expected != actual) {
			cout << "Gotcha!" << SPACE << first_line << endl;
			cout << expected << SPACE << actual << endl;

			return;
			//first_line += print_test(n, m, friends, k, edges, q, queries, expected, actual, bad_index);
		}
	}
}

#define RUN

ans_t get_answer(vi & a) {
	int n = a.size();

	vvi single_result_dp(n + 1, vi(n + 1, -1));
	for (int i = 0; i < n; ++i) {
		single_result_dp[i + 1][i + 1] = a[i];
	}

	for (int length = 2; length <= n; ++length) {
		for (int left = 1, right = left + length - 1; right <= n; ++left, ++right) {
			for (int mid = left; mid < right; ++mid) {
				int left_res = single_result_dp[left][mid];
				int right_res = single_result_dp[mid + 1][right];

				if (left_res != -1 && left_res == right_res) {
					single_result_dp[left][right] = left_res + 1;
					break;
				}
			}
		}
	}

	vi dp(n + 1, n + 1);
	dp[0] = 0;

	for (int i = 1; i <= n; ++i) {
		for (int prev = 0; prev < i; ++prev) {
			if (single_result_dp[prev + 1][i] != -1) {
				update_min(dp[i], dp[prev] + 1);
			}
		}
	}

	return dp[n];
}

int main() {
#ifdef RUN
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);

#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	int n = read_size();

	vi a;
	read_vector(a, n);

	ans_t answer = get_answer(a);
	cout << answer << endl;
#elif _DEBUG
	set_print_file("tests.txt");
	stress();
	fclose(print_file);
#endif
	return 0;
}