#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

const int limit=1000000;

struct elem {
  int sign,a,b,ind;
  elem() {}
  elem(int sign,int a,int b,int ind):sign(sign),a(a),b(b),ind(ind) {}
};

int n;
vector<elem> pos,neg;
int sum;
int sol[limit];

void add(vector<elem> &v)
{
  for (int i=0;i<int(v.size());i++) {
    elem &e=v[i];
    sol[e.ind]=e.sign*e.a;
  }
}

int main()
{
  ios::sync_with_stdio(false);
  cin>>n;
  for (int i=0;i<n;i++) {
    int a,b;
    char c;
    cin>>c;
    if (c=='-') {
      cin>>a>>c>>b;
      neg.push_back(elem(-1,a,b,i));
      sum-=b;
    } else {
      a=c-'0';
      while (cin>>c and c!='.')
	a=10*a+c-'0';
      cin>>b;
      pos.push_back(elem(1,a,b,i));
      sum+=b;
    }
  }
  //cout<<"sum "<<sum<<endl;
  sum/=100000;
  add(pos);
  add(neg);
  //cout<<"sum "<<sum<<endl;
  if (sum>=0) {
    for (int i=0;i<int(pos.size()) and sum;i++) {
      elem &e=pos[i];
      if (e.b) {
	sum--;
	sol[e.ind]=e.a+1;
      }
    }
  } else {
    sum*=-1;
    for (int i=0;i<int(neg.size()) and sum;i++) {
      elem &e=neg[i];
      if (e.b) {
	sum--;
	sol[e.ind]=-e.a-1;
      }
    }
  }
  for (int i=0;i<n;i++)
    cout<<sol[i]<<endl;
}
