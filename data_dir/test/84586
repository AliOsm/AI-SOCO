#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define mx 100010
#define mod 1000000007
#define int long long
#define pi acos(-1.0)
#define inf 1000000000000000001

using namespace std;

int ara[mx],arr[mx],st[mx],en[mx],cnt[mx],ans[mx],rem[mx];
vector<int>vec[mx];
int tim,BLOCK;

struct node {
    int L, R, i,color;
}q[mx];

bool cmp(node x, node y) {
    if(x.L/BLOCK != y.L/BLOCK) {
        return x.L/BLOCK < y.L/BLOCK;
    }
    return x.R < y.R;
}

void add(int position) {
    int node=arr[position];
    int val=ara[node];
    cnt[val]++;
    rem[cnt[val]]++;
}

void remove(int position) {
    int node=arr[position];
    int val=ara[node];
    rem[cnt[val]]--;
    cnt[val]--;
}

void dfs(int node,int par){
    st[node]=tim;
    arr[tim]=node;
    tim++;
    int sz=vec[node].size();
    for(int i=0;i<sz;i++){
        int v=vec[node][i];
        if(v==par)continue;
        dfs(v,node);
    }
    en[node]=tim;
}


main()
{
//    freopen("input.txt","r",stdin);
//    freopen("output.txt","w",stdout);

    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int m,n;

    cin>>n>>m;
    BLOCK=sqrt(n);
    for(int i=1;i<=n;i++){
        cin>>ara[i];
    }
    for(int i=0;i<n-1;i++){
        int u,v;
        cin>>u>>v;
        vec[u].pb(v);
        vec[v].pb(u);
    }
    tim=1;
    dfs(1,-1);
    for(int i=0;i<m;i++){
        int u,v;
        cin>>u>>v;
        q[i].L=st[u];
        q[i].R=en[u]-1;
        q[i].color=v;
        q[i].i=i;
    }
    sort(q,q+m,cmp);
    int currentL=1,currentR=1;
    for(int i=0;i<m;i++){
        int L=q[i].L,R=q[i].R;
        while(currentL < L) {
            remove(currentL);
            currentL++;
        }
        while(currentL > L) {
            add(currentL-1);
            currentL--;
        }
        while(currentR <= R) {
            add(currentR);
            currentR++;
        }
        while(currentR > R+1) {
            remove(currentR-1);
            currentR--;
        }
        ans[q[i].i]=rem[q[i].color];
    }
    for(int i=0;i<m;i++){
        cout<<ans[i]<<endl;
    }
}
