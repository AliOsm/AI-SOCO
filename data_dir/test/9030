#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define fi first
#define se second
#define SZ(x) ((int)(x).size())
using namespace std;
using namespace __gnu_pbds;
using ll = int64_t;
using ld = long double;
using ull = uint64_t;
typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

ll n, m, k, s;
vector<vector<ll>> g;
vector<ll> col;
map<ll, vector<ll>> percol;
vector<vector<ll>> anss;

int used[111111];

void bfs(vector<ll>& beg) {
  for (int i = 0; i < 111111; i++) used[i] = 0;
  deque<pair<ll, ll>> q;
  for (auto x: beg) {
    q.push_back({x, 0});
  }
  while(!q.empty()) {
    auto vertex = q.front();
    q.pop_front();
    ll v = vertex.first;
    ll w = vertex.second;
    if (used[v]) continue;
    used[v] = true;
    anss[v].push_back(w);
    for (auto x: g[v]) {
      if (!used[x])
        q.push_back({x, w+1});
    }
  }
}

int main() {
  ios::sync_with_stdio(0);
  cout.precision(10);

  cin >> n >> m >> k >> s;
  
  g.resize(n+1);
  col.resize(n+1);
  anss.resize(n+1);

  for (int i = 1; i <= n; i++) {
    cin >> col[i];
    percol[col[i]].push_back(i);
  }

  for (int i = 0; i < m; i++) {
    ll a, b; cin >> a >> b;
    g[a].push_back(b);
    g[b].push_back(a);
  }

  cerr << "BEFORE BFS " << endl;

  for (int cur = 1; cur <= k; cur++) {
    bfs(percol[cur]);
  }

  /*cerr << "AFTER BFS  " << endl;

  for (int i = 1; i <= n; i++) {
    cerr << "For " << i << ": ";
    for (auto x: anss[i]) cerr << x << ' '; cerr << endl;
  }*/

  for (auto ans: anss) {
    if (ans.size() == 0) continue;
    sort(all(ans));
    ll anw = 0;
    for (int i = 0; i < s; i++) {
      anw += ans[i];
    }
    cout << anw << ' ';
  }
  cout << endl;
}