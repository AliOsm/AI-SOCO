#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>
#include <tuple>
#include <chrono>

using namespace std;
using ll = long long;
const int MOD = 998244353;

struct Range {
  int l, r;
  Range(): l{-1}, r{-1} {}
  Range(int _l, int _r): l{_l}, r{_r} {}

  bool operator<(const Range& rhs) const {
    if (l != rhs.l) {
      return l < rhs.l;
    }
    return r < rhs.l;
  }

  bool intersects(const Range& other) const {
    return l <= other.l && other.l <= r;
  }

  void extend(const Range& other) {
    r = max(r, other.r);
  }

  // ostream& operator<<(ostream& os, const Range& range) {
  //   return os << "[ " << range.l << ", " << range.r << "]"; 
  // }
};

map<int, Range> mp;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

  int n;
  cin >> n;
  for(int i = 0; i < n; ++i) {
    int x;
    cin >> x;
    auto it = mp.find(x);
    if (it != mp.end()) {
      mp[x].r = i;
    } else {
      mp[x].l = mp[x].r = i;
    }
  }
  
  vector<Range> a(mp.size());
  int ptr = 0;
  for(auto it : mp) {
    a[ptr++] = move(it.second);
  }
  sort(a.begin(), a.end());

  Range cur = a[0];
  int c = 1;
  for(int i = 1; i < a.size(); ++i) {
    if (cur.intersects(a[i])) {
      cur.extend(a[i]);
    } else {
      ++c;
      cur = a[i];
    }
  }

  int ret = 1;
  for(int i = 0; i + 1 < c; ++i) {
    ret *= 2;
    ret %= MOD;
  }
  cout << ret << endl;
	return 0;
}
