#include <bits/stdc++.h>

using namespace std;
int n, x;
int to[200005];
int from[200005];
int par[200005];
vector<int>vec[200005];
void dfs(int idx, int parent){
    if(parent > 0){
    to[idx] = to[parent] + 1;
}
    par[idx] = parent;
    for(int i = 0;i < vec[idx].size();i++){
        int var = vec[idx].at(i);
        if(var == parent)continue;
        dfs(var, idx);
        from[idx] = max(from[var] + 1, from[idx]);
    }
}
int main()
{
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
    cin >> n >> x;
    for(int i = 1;i < n;i++){
        int a, b;
        cin >> a >> b;
        vec[a].push_back(b);
        vec[b].push_back(a);
    }
    dfs(1, -1);
    int node = x;
    int ans = 0;
    while(to[node] > to[x] - to[node]){
        ans = max((from[node] + to[node])*2, ans);
        node = par[node];
    }
    cout << ans;
}
