#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>

using namespace std;

typedef pair<int, int> pt;

int a[100005];
vector<pt> v;

int main() {
	int n, s, e, len, ans = 1;

	ios::sync_with_stdio(0);
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> a[i];

	a[0] = 0x7fffffff;
	for (int i = 1; i <= n; i++)
		if (a[i] <= a[i-1]) {
			if (i != 1)
				v.push_back(make_pair(s, i - 1));
			s = i;
		}

	v.push_back(make_pair(s, n));
	for (int i = 0; i < v.size(); i++) {
		s = v[i].first;
		e = v[i].second;
		len = e - s + 1;
		if (s == e) {
			if (i != 0 && i != v.size() - 1) {
				int ps = v[i-1].first;
				int pe = v[i-1].second;
				int ns = v[i+1].first;
				int ne = v[i+1].second;
				int lenp = pe - ps + 1;
				int lenn = ne - ns + 1;
				if (a[pe] + 2 <= a[ns])
					len += lenp + lenn;
			}
			else if (i == 0 && i != v.size() - 1)
				len++;
			else if (i != 0 && i == v.size() - 1)
				len++;
		}
		else {
			if (i != 0) {
				int ps = v[i-1].first;
				int pe = v[i-1].second;
				int lenp = pe - ps + 1;
				if (a[pe] + 2 <= a[s+1])
					len += lenp;
				else
					len++;
			}
			ans = max(ans, len);
			len = e - s + 1;
			if (i != v.size() - 1) {
				int ns = v[i+1].first;
				int ne = v[i+1].second;
				int lenn = ne - ns + 1;
				if (a[e-1] + 2 <= a[ns])
					len += lenn;
				else
					len++;
			}
		}
		ans = max(ans, len);
	}

	cout << ans << endl;

	return 0;
}