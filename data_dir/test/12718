//============================================================================
// Name        : wuyiqi.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================
#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
#include <stack>
#include <queue>
#include <map>
#include <set>
typedef long long lld;
const int inf = ~0u>>2;
const int maxn = 100010;
using namespace std;
int Sum_Flow;
const int N = 5050;
const int M = 100000;
struct Edge{
    int u,v,cap,cost;
    int next;
}edge[M*2];
int E;
int head[N],dist[N],pre[N];
bool vis[N];
void init()
{
    E=0;
    memset(head,-1,sizeof(head));
}
void add_edge(int u,int v,int cap,int cost)
{
    edge[E].u=u;edge[E].v=v;edge[E].cap=cap;edge[E].cost=cost;
    edge[E].next=head[u];head[u]=E++;

    edge[E].u=v;edge[E].v=u;edge[E].cap=0;edge[E].cost=-cost;
    edge[E].next=head[v];head[v]=E++;
}
bool spfa(int s,int t,int n)
{
    queue<int> Q;
    fill(vis,vis+n+1,false);
    fill(pre,pre+n+1,-1);
    fill(dist,dist+n+1,inf);
    vis[s]=true;dist[s]=0;
    Q.push(s);
    while(!Q.empty())
    {
        int u=Q.front();Q.pop();vis[u]=false;
        for(int i=head[u];i!=-1;i=edge[i].next)
        {
            int v=edge[i].v;
            if(edge[i].cap && dist[v] > dist[u]+ edge[i].cost)
            {
                dist[v] = dist[u]+edge[i].cost;
                pre[v]=i;
                if(!vis[v])
                {
                    Q.push(v);
                    vis[v]=true;
                }
            }
        }
    }
    if(dist[t] == inf) return false;
    return true;
}
int MCMF(int s,int t,int n)
{
    int flow=0;
    int minflow,mincost=0;
    while(spfa(s,t,n))
    {
        minflow=inf;
        for(int i=pre[t];i!=-1;i=pre[edge[i].u])
               if(edge[i].cap < minflow)
                   minflow=edge[i].cap;
        flow+=minflow;
        for(int i=pre[t];i!=-1;i=pre[edge[i].u])
        {
            edge[i].cap-=minflow;
            edge[i^1].cap+=minflow;
        }
        mincost += dist[t] * minflow;
    }
    Sum_Flow = flow;
    return mincost;
}
int n;
char ss[maxn];
char str[maxn];
int main()
{
    scanf("%s",ss);
    init();
    scanf("%d",&n);
    int s=0,t=n+26+1;
    int v;
    int cnt[26];
    memset(cnt,0,sizeof(cnt));
    for(int i=0;ss[i];i++) {
        cnt[ss[i]-'a']++;
    }
    for(int i=0;i<26;i++) {
        add_edge(n+i+1,t,cnt[i],0);
    }
    for(int i=1;i<=n;i++) {
        scanf("%s%d",str,&v);
        add_edge(s,i,v,i);
        memset(cnt,0,sizeof(cnt));
        for(int j=0;str[j];j++) {
            cnt[str[j]-'a']++;
        }
        for(int j=0;j<26;j++){
            add_edge(i,n+j+1,cnt[j],0);
        }
    }
    int ans=MCMF(s,t,t+1);
    int len=strlen(ss);
    if(Sum_Flow == len) {
        printf("%d\n",ans);
    }
    else puts("-1");
    return 0;
}





