#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
#include <unordered_map>
#include <unordered_set>

using namespace std;
void Emsawy(){
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);   // don't use scanf & printf
	cin.tie(0);
	cout.tie(0);
}

#define p00          point(0,0)
#define O            const point & 
#define CD           const double &  
#define EQ(a, b)     (fabs((a) - (b)) <= eps) /* equal to */
#define LT(a, b)     ((a) < (b)-eps) /* less than */
#define sz(v)	     ((int)((v).size()))
#define all(v)	     ((v).begin()), ((v).end())
#define allr(v)	     ((v).rbegin()), ((v).rend())
#define clr(v,d)     memset(v, d, sizeof(v))
#define length(a)    (hypot((a).imag(), (a).real()))
#define dp(a,b)	     ((conj(a)*(b)).real()) // if zero prep
#define cp(a,b)	     ((conj(a)*(b)).imag()) // if zero parl
#define pii	         pair<int,int>
#define V	         vector
#define MP	         make_pair
#define bug(n)           cout<< #n <<" = "<< n << endl;

typedef long long ll;

const double PI = acos(-1.0);
const double eps = 1e-10;
const ll mod = 1e9 + 7, oo = 1e9;

int dx[]{1, -1, 0, 0, 1, -1, 1, -1};
int dy[]{0, 0, 1, -1, 1, -1, -1, 1};

V<V<pii> > adj;
int n, m, k, t, c,x;

struct Node{
	int n, msk;
	Node(){
		n = msk = 0;
	}
};

const int N = 100000 + 5;
V<int> cord = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67 };
set<int>st;
ll dp[2][(1 << 19)], pw[N];
Node g[71];

void Flip(Node &nd, int po){
	for (int i = 2; i <= po; i++){
		while (po%i == 0){
			nd.msk ^= (1 << (find(all(cord), i) - cord.begin()));
			po /= i;
		}
	}
}

int main()
{
	Emsawy();
	pw[0] = 1;
	for (int i = 1; i < N; i++){
		pw[i] = (pw[i - 1] * 2) % mod;
	}
	while (cin >> n){
		for (int i = 0; i < n; i++){
			cin >> t;
			g[t].n++;
		}
		for (int i = 2; i <= 70; i++)
			Flip(g[i], i);

		clr(dp, 0);

		dp[0][0] = 1;
		for (int id = 1; id < 71; id++){
			for (int mask = 0; mask < (1 << 19); mask++){
				if (g[id].n == 0){
					dp[id & 1][mask] = dp[(id - 1) & 1][mask];
					continue;
				}
				dp[id & 1][mask] = 0;
				dp[id & 1][mask] = (dp[id & 1][mask] + (dp[(id - 1) & 1][mask ^ g[id].msk] * pw[g[id].n - 1]) % mod) % mod;
				dp[id & 1][mask] = (dp[id & 1][mask] + (dp[(id - 1) & 1][mask] * pw[g[id].n - 1]) % mod) % mod;
			}
		}
		cout << (dp[70 & 1][0] - 1 + mod) % mod << endl;
	//	clr(g, 0);
	}
	return 0;
}