#include <bits/stdc++.h>

#if (_WIN32 || __WIN32__)
#  define LLD "%I64d"
#else
#  define LLD "%lld"
#endif

using std::istream; using std::ostream; using std::fixed; using std::greater;
using std::tuple; using std::tie; using std::make_pair; using std::multiset;
using std::nth_element; using std::min_element; using std::max_element;
using std::vector; using std::set; using std::map; using std::string;
using std::fill; using std::copy; using std::sort; using std::unique;
using std::unordered_set; using std::unordered_map; using std::pair;
using std::next_permutation; using std::reverse; using std::rotate;
using std::cin; using std::cout; using std::cerr; using std::endl;
using std::lower_bound; using std::upper_bound; using std::deque;
using std::min; using std::max; using std::swap; using std::abs;
using std::priority_queue; using std::queue; using std::bitset;
using std::make_tuple;

typedef long long ll;
typedef long double ld;

int const INF = (int) 1e9;
ll const INFL = (ll) 1e18;
ld const PI = 3.1415926535897932384626433832795028;

ll sumTo(ll x) {
	return x * (x + 1) / 2;
}

ll go(ll x, ll y, ll t) {
	--t;
	
	if (t <= 0) return 0;
	
	if (x > y) swap(x, y);
	
	if (t <= x) {
		return sumTo(t);
	}
	
	if (t <= y) {
		return sumTo(t) - sumTo(t - x);
	}
	
	if (t >= x + y - 1) {
		return x * y;
	}
	
	return x * y - sumTo(x + y - 1 - t);

}


void solve() {
	
	int n, x, y;
	ll c;
	
	cin >> n >> x >> y >> c;
	
	int l = -1;
	int r = n + n;
	
	while (r - l > 1) {
		int mid = l + (r - l) / 2;
		
		ll cnt = 1 + (ll)min(x - 1, mid) + (ll)min(n - x, mid) + (ll)min(y - 1, mid) + (ll)min(n - y, mid);
		
		cnt += go(x - 1, y - 1, mid) + go(x - 1, n - y, mid) + go(n - x, y - 1, mid) + go(n - x, n - y, mid);
		
		if (cnt >= c) {
			r = mid;
		} else {
			l = mid;
		}
	}
	
	cout << r << endl;
}



int main() {

	cout.precision(15);
	cout << fixed;
	cerr.precision(6);
	cerr << fixed;
	
	srand(1510);

	solve();

#ifdef LOCAL
	cerr << "time: " << clock() << " ms" << endl;
#endif
}