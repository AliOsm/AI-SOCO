#pragma GCC target("avx2")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>
#define rc(x) return cout<<x<<endl,0
#define pb push_back
#define mkp make_pair
#define in insert
#define er erase
#define fd find
#define fr first
#define sc second
typedef long long ll;
typedef long double ld;
const ll INF=0x3f3f3f3f3f3f3f3f;
const ll llinf=(1LL<<62);
const int inf=(1<<30);
const int sq=175;
const int nmax=1e5+5e4+5;
const ll mod=998244353;
using namespace std;
int n,i,in[nmax],out[nmax],tin,t,x,y,cl[nmax],bcl[nmax],sz[nmax],pr[nmax],l,q,nr,ar[nmax/sq+5][nmax],b[nmax/sq+5],id,j;
ll d,inv,rs,vl[nmax],fw[nmax],aux[nmax];
vector<int>a[nmax];
void ad(ll &x,ll y)
{
	x+=y;
	if(x<0)x+=mod;
	if(x>=mod)x-=mod;
}
ll p2(ll x,ll p)
{
	ll rs=1;
	while(p)
	{
		if(p&1LL)rs=(rs*x)%mod;
		x=(x*x)%mod;
		p>>=1LL;
	}
	return rs;
}
void dfs(int x,int p)
{
	in[x]=++tin;
	sz[x]=1;
	pr[x]=p;
	for(int i=0;i<(int)a[x].size();i++)
	{
		int y=a[x][i];
		if(y==p)continue;
		dfs(y,x);
		sz[x]+=sz[y];
	}
	out[x]=tin;
}
void app(int x,int p,int c)
{
	ar[id][x]=c;
	for(int i=0;i<(int)a[x].size();i++)
	{
		int y=a[x][i];
		if(y==p)continue;
		app(y,x,c);
	}
}
void upd(int i,ll v)
{
	for(;i<=tin;i+=i&(-i))ad(fw[i],v);
}
ll qry(int i)
{
	ll rs=0;
	for(;i>=1;i-=i&(-i))ad(rs,fw[i]);
	return rs;
}
int main()
{
	//freopen("sol.in","r",stdin);
	//freopen("sol.out","w",stdout);
	//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
	ios_base::sync_with_stdio(false);cin.tie(0);cerr.tie(0);cout.tie(0);
	cin>>n>>q;
	inv=p2(n,mod-2);
	for(i=1;i<n;i++)
	{
		cin>>x>>y;
		a[x].pb(y);
		a[y].pb(x);
	}
	dfs(1,0);
	for(i=1;i<=n;i++)
	{
		if((int)a[i].size()<=sq)continue;
		b[++id]=i;
		for(j=0;j<(int)a[i].size();j++)if(a[i][j]!=pr[i])app(a[i][j],i,a[i][j]);
	}
	while(q--)
	{
		cin>>t>>x;
		if(t==1)
		{
			cin>>d;
			ad(vl[x],d);
			upd(in[1],d*inv%mod*1LL*sz[x]%mod);
			upd(in[x],-d*inv%mod*1LL*sz[x]%mod);
			upd(out[x]+1,d*inv%mod*1LL*sz[x]%mod);
			if((int)a[x].size()<=sq)
			{
				for(i=0;i<(int)a[x].size();i++)
				{
					y=a[x][i];
					if(y==pr[x])continue;
					upd(in[y],d*inv%mod*1LL*(n-sz[y])%mod);
					upd(out[y]+1,-d*inv%mod*1LL*(n-sz[y])%mod);
				}
			}
			else
			{
				ad(aux[x],d);
			}
		}
		else
		{
			rs=(qry(in[x])+vl[x])%mod;
			for(i=1;i<=id;i++)
			{
				y=b[i];
				if(!(in[y]<=in[x] && out[x]<=out[y]) || in[y]==in[x])continue;
				ad(rs,aux[y]*inv%mod*1LL*(n-sz[ar[i][x]])%mod);
			}
			cout<<rs<<'\n';
		}
	}
	return 0;
}
