#include <bits/stdc++.h>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
#define PI 3.14159265358979323846
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;

const ll oo = 1E18;
const int MAXN = 1000010;

int n, a, b;
int in[MAXN];

ll ans = oo;

set<int> del;

void Factor(int w){
  for(int i = 2;i * i <= w;++i)
    if(w % i == 0){
      del.insert(i);
      while(w % i == 0) w /= i;
    }
  if(w > 1) del.insert(w);
}

int cost[MAXN];
ll psum[MAXN], ssum[MAXN];

void Update(){
  psum[0] = cost[0];
  for(int i = 1;i < n;++i)
    psum[i] = psum[i - 1] + cost[i];

  ssum[n - 1] = cost[n - 1];
  for(int i = n - 2;i >= 0;--i)
    ssum[i] = ssum[i + 1] + cost[i];

  if(psum[n - 1] <= n)
    relaxMin(ans, psum[n - 1] * b);

  ll minv = oo;
  int pos = -1;
  int up = n - 1;

  int le = 0;
  while(le < n && cost[le] < 2) ++le;
  if(le == n) --le;

  ll sum = 0;
  for(int i = 0;i < n;++i)
    if(cost[i] > 1) sum += cost[i];

  for(;le >= 0;--le){
    while(up >= le){
      ll nval = up * 1LL * a - (psum[up] - sum) * b;
      if(minv > nval)
        minv = nval, pos = up;
      if(cost[up] >= 2) break;
      --up;
    }

    ll total = (pos - le + 1) * 1LL * a;
    if(le) total += psum[le - 1] * b;
    if(pos + 1 < n) total += ssum[pos + 1] * b;
    relaxMin(ans, total);
  }
}

int main(){
  scanf("%d%d%d", &n, &a, &b);
  for(int i = 0;i < n;++i)
    scanf("%d", &in[i]);

  Factor(in[0]);
  Factor(in[0] - 1);
  Factor(in[0] + 1);

  Factor(in[n - 1]);
  Factor(in[n - 1] - 1);
  Factor(in[n - 1] + 1);

  for(const auto d : del){
    for(int i = 0;i < n;++i){
      if(in[i] % d == 0) cost[i] = 0;
      else if((in[i] - 1) % d == 0 ||
              (in[i] + 1) % d == 0) cost[i] = 1;
      else cost[i] = n + 3;
    }
    Update();
  }

  cout << ans << '\n';

  return 0;
}
