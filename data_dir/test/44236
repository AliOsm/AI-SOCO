/*  */
#include <iostream>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <deque>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
#include <bitset>
#include <functional>
using namespace std;
//#pragma comment(linker,"/STACK:102400000,1024000")

#define mpii			map<int,int>
#define vi				vector<int>
#define pii				pair<int,int>
#define vpii			vector<pair<int,int> >
#define rep(i, a, n) 	for (int i=a;i<n;++i)
#define per(i, a, n) 	for (int i=n-1;i>=a;--i)
#define clr				clear
#define pb 				push_back
#define mp 				make_pair
#define fir				first
#define sec				second
#define all(x) 			(x).begin(),(x).end()
#define SZ(x) 			((int)(x).size())
#define lson			l, mid, rt<<1
#define rson			mid+1, r, rt<<1|1

typedef long long LL;
const int maxn = 1e4+5;
LL P[maxn];
int n, l, r;

LL Pow(LL base, LL n) {
	LL ret = 1;
	while (n) {
		if (n & 1) {
			if (1.0*ret*base > r) return r+1;
			ret *= base;
		}
		n >>= 1;
		if (n) {
			if (1.0*base*base > r) return r+1;
		}
		base *= base;
	}
	return ret;
}

void solve() {
	if (n == 1) {
		printf("%d\n", r-l+1);
		return ;
	}
	
	if (n == 2) {
		n = r - l + 1;
		LL ans = 1LL * n * (n-1);
		printf("%I64d\n", ans);
		return ;
	}
	
	int bound = maxn;
	
	P[1] = 1;
	for (int x=2; x<maxn; ++x) {
		P[x] = Pow(x, n-1);
		if (P[x] > r) {
			bound = x;
			break;
		}
	}
	
	LL ans = 0;
	for (int d=1; d<bound; ++d) {
		for (int e=d+1; e<bound; ++e) {
			if (__gcd(d, e) > 1) continue;
			
			int tmp = r/P[e] - (l-1)/P[d];
			if (tmp > 0) ans += tmp;
		}
	}
	
	ans *= 2;
	printf("%I64d\n", ans);
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	#ifndef ONLINE_JUDGE
		freopen("data.in", "r", stdin);
		freopen("data.out", "w", stdout);
	#endif
	
	cin >> n >> l >> r;
	solve();
	
	#ifndef ONLINE_JUDGE
		printf("time = %d.\n", (int)clock());
	#endif
	
	return 0;
}

