#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

#define minimize(a, b) { a = min(a, b); }
#define maximize(a, b) { a = max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n';
#define next(type, i) type i; cin >> i;
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

int main() {
	srand (time(NULL));
    ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(int, n);
	
	double f[n][n];
	FOR (i, 0, n) FOR (j, 0, n) cin >> f[i][j];
	
	int maxMask = 1 << n;
	double dp[maxMask][n];
	FOR (mask, 1, maxMask) {
		int cnt = 0;
		FOR (b, 0, n) if (mask & (1 << b)) cnt++;
		if (cnt == 1) {
			FOR (b, 0, n) dp[mask][b] = mask & (1 << b) ? 1 : 0;
		} else {
			FOR (b, 0, n) dp[mask][b] = 0;
			double pairChance = 1.0 / (cnt * (cnt - 1) / 2);
			FOR (b1, 0, n) if (mask & (1 << b1)) FOR (b2, b1 + 1, n) if (mask & (1 << b2)) {
				int m1 = mask ^ (1 << b2);
				int m2 = mask ^ (1 << b1);
				FOR (b, 0, n) dp[mask][b] += dp[m1][b] * pairChance * f[b1][b2];
				FOR (b, 0, n) dp[mask][b] += dp[m2][b] * pairChance * f[b2][b1];
			}
		}
	}
	
	cout << setprecision(6);
	fixed(cout);
	FOR (i, 0, n) cout << dp[maxMask - 1][i] << ' ';
}