#include <iostream>

#include <cstring>

#include <string>
#include <vector>
#include <algorithm>

using namespace std;

#define SZ(a) int((a).size())
#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)

typedef long long llong;
typedef vector<int> VI;
typedef vector<VI> VVI;

enum State { ZERO, ONE, X, NOTX };

int state[12];

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(NULL);

   REP(j, 10)
      state[j] = X;

   int N;
   cin >> N;
   FOR(i, 1, N) {
      string op;
      int mask;
      cin >> op >> mask;
      switch (op[0]) {
         case '|':
            REP(j, 10) {
               if (0 == (mask & (1<<j))) continue;
               state[j] = ONE;
            }
            break;
         case '&':
            REP(j, 10) {
               if (0 != (mask & (1<<j))) continue;
               state[j] = ZERO;
            }
            break;
         case '^':
            REP(j, 10) {
               if (0 == (mask & (1<<j))) continue;
               switch (state[j]) {
                  case ZERO:
                     state[j] = ONE;
                     break;
                  case ONE:
                     state[j] = ZERO;
                     break;
                  case X:
                     state[j] = NOTX;
                     break;
                  case NOTX:
                     state[j] = X;
                     break;
               }
            }
            break;
      }
   }

   REP(j, 10) {
      char ch = 0;
      switch (state[j]) {
         case ZERO: ch = '0'; break;
         case ONE: ch = '1'; break;
         case X: ch = 'X'; break;
         case NOTX: ch = 'x'; break;
      }
      cerr << ch;
   }
   cerr << endl;

   int mask;

   cout << 3 << '\n';
   // AND
   mask = (1<<10)-1;
   REP(j, 10) {
      if (state[j] == ZERO)
         mask ^= 1<<j;
   }
   cout << "& " << mask << '\n';

   // OR
   mask = 0;
   REP(j, 10) {
      if (state[j] == ONE)
         mask ^= 1<<j;
   }
   cout << "| " << mask << '\n';

   // XOR
   mask = 0;
   REP(j, 10) {
      if (state[j] == NOTX)
         mask ^= 1<<j;
   }
   cout << "^ " << mask << '\n';

   return 0;
}
