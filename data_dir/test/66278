#include <bits/stdc++.h>

#define F first
#define S second

#define ll long long
#define ull unsigned long long
#define ld long double

#define pb push_back
#define ppb pop_back
#define mp make_pair

#define sz(x) (int) x.size()
#define all(x) x.begin(), x.end()
#define bit(x) __builtin_popcountll(x)
#define sqr(x) ((x) * 1LL * (x))

#define nl '\n'
#define ioi exit(0);

#define NeedForSpeed ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);

#define freopen(x) freopen(x".in", "r", stdin), freopen (x".out", "w", stdout);

using namespace std;

typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <double, double> pdd;

const int N = 1e5 + 7, MxN = 1e6 + 7, mod = 1e9 + 7, inf = 2e9 + 7;
const long long linf = (ll)1e18 + 7;
const double eps = 1e-9;
const int ii[] = {-1, 0, 1, 0, 1, -1, -1, 1}, jj[] = {0, 1, 0, -1, 1, -1, 1, -1};




    int n, k, q, ans;
    pii start;
    char a[4][101];
    int was[4][101];
    inline void Calc(int x, int y){
        if (was[x][y]) return;
        was[x][y] = 1;
        if (a[x][y + 1] == '.'){
            if (y + 3 > n) ans = 1;
            if (a[x][y + 2] == a[x][y + 3] && a[x][y + 2] == '.') Calc(x, y + 3);
            if (a[x + 1][y + 1] == '.' && a[x + 1][y + 2] == a[x + 1][y + 3] && a[x + 1][y + 2] == '.') Calc(x + 1, y + 3);
            if (a[x - 1][y + 1] == '.' && a[x - 1][y + 2] == a[x - 1][y + 3] && a[x - 1][y + 2] == '.') Calc(x - 1, y + 3);
        }
    }
    inline void Solve(){
        cin >> n >> k;
        for (int i = 1; i <= 3; i++){
            for (int j = 1; j <= n; j++){
                cin >> a[i][j];
                if (a[i][j] == 's') start = {i, j};
            }
        }
        memset(was, 0, sizeof(was));
        ans = 0;
        Calc(start.F, start.S);
        bool ok = 0;
        for (int i = 1; i <= 3; i++)
            ok |= was[i][n];

        if (ok | ans) cout << "YES\n";
        else cout << "NO\n";
    }
int main(){
    cin >> q;
    for (int i = 1; i <= q; i++)
        Solve();
    ioi
}
