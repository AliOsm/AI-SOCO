#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

#define d(i) cout<< i << " " << p[i].a << " " << p[i].b << " " << p[i].c << endl;
#define P_B push_back
#define all(x) x.begin(), x.end()
struct lady{
	int a, b, c;
	bool operator< (lady x) const{
		return a > x.a;
	}
};
const int MAXN = 500 * 1000 + 10;
lady p[MAXN];
int seg[MAXN * 4];
vector <int> X;
void add(int p, int val, int v, int s, int e)
{
	if(e - s <= 1)
	{
		seg[v] = max(seg[v], val);
		return;
	}
	int m = (s + e) / 2;
	if(p < m)
		add(p, val, v * 2, s, m);
	else
		add(p, val, v * 2 + 1, m, e);
	seg[v] = max(seg[v * 2], seg[v * 2 + 1]);
}

int get(int l, int r, int v, int s, int e)
{
	if(e <= l || e <= s)
		return -1;
	if(l <= s && e <= r)
		return seg[v];
	int m = (s + e) / 2;
	return max(get(l, r, v * 2, s, m), get(l, r, v * 2 + 1, m, e));
}

int main()
{
	ios::sync_with_stdio(false);
	int n;
	cin>> n;

	for(int i = 0; i < n; i++)
		cin>> p[i].a;
	for(int i = 0; i < n; i++)
	{
		cin>> p[i].b;
		X.P_B(p[i].b);
	}
	for(int i = 0; i < n; i++)
		cin>> p[i].c;

	sort(all(X));
	X.resize(unique(all(X)) - X.begin());
	int m = X.size();
	for(int i = 0; i < 4 * m; i++)
		seg[i] = -1;
	sort(p, p + n);

	int ans = 0;
	for(int i = 0; i < n; i++)
	{
		int j = i;
		vector <int> vec;
		while(j < n && p[j].a == p[i].a)
			j++;
		int o = i;
		while(i < j)
		{
			int k = p[i].b;
			p[i].b = lower_bound(all(X), k) - X.begin();
			k = upper_bound(all(X), k) - X.begin();
			int g = get(k, m, 1, 0, m);
			if(g > p[i].c)
				ans++;
			i++;
		}
		i = o;
		while(i < j)
			add(p[i].b, p[i].c, 1, 0, m), i++;
		i--;
	}

	cout<< ans << endl;
}
