#include <bits/stdc++.h>
#define inf 2e9
#define all(v) v.begin(), v.end()
using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;

const int N = 500000 + 3;
set <pii> fuck;
int n, l, r, cnt, can = 1, us[N];
vector <pii> v;
vector <int> g[N];

void dfs(int x, int p){
    us[x] = 1;
    for (auto u: g[x]){
        if (u == p) continue;
        if (us[u]){
            can = 0;
            return;
        }
        dfs(u, x);
        if (!can) return;
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    #ifdef LOCAL
        freopen("input.txt", "r", stdin);
    #endif // LOCAL
    cin >> n;
    v.resize(2 * n + 3);
    for (int i = 0; i < n; i++){
        cin >> l >> r;
        --l; --r;
        v[l] = {r, i};
        v[r] = {l, i};
    }

    for (int i = 0; i < 2 * n; i++){
        if (v[i].first > i){
            for (auto u: fuck){
                if (u.first > v[i].first) break;
                cnt++;
                int u1 = v[i].second, u2 = u.second;
                g[v[i].second].push_back(u.second);
                g[u.second].push_back(v[i].second);
                if (cnt >= n){
                    cout << "NO";
                    return 0;
                }
            }
            fuck.insert(v[i]);
        }else{
            fuck.erase(fuck.lower_bound({i, -1}));
        }
    }
    dfs(0, -1);
//    for (int i = 0; i < n; i++) cout << us[i] << " "; cout << "\n";
//    cout << accumulate(us, us + n, 0) << "!\n";
    if (accumulate(us, us + n, 0) != n){
        can = 0;
    }
    if (can) cout << "YES\n";
    else cout << "NO\n";
}
