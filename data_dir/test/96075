//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
typedef long long ll;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const ll INF = 1e18 + 7;
const int MAXN = 1e3 + 5;
const double eps = 1e-9;
using namespace std;
ll a[MAXN], dist[MAXN];
pll loc[MAXN];
int par[MAXN];

ll cost(int x, int y, ll d)
{
    return d * (abs(loc[x].fi - loc[y].fi) + abs(loc[x].se - loc[y].se));
}

int main()
{
    ll n, d;
    nl(n), nl(d);
    for (int i = 1; i + 1 < n; i++)
        nl(a[i]);
    for (int i = 0; i < n; i++)
        nl(loc[i].fi), nl(loc[i].se), dist[i] = INF;
    dist[0] = 0;
    priority_queue<pll,vector<pll>,greater<pll> > pq;
    pq.push({0, 0});
    while (!pq.empty())
    {
        pll cur = pq.top();
        pq.pop();
        for (int i = 0; i < n; i++)
        {
            if (i == cur.se)
                continue;
            ll c = cost(i, cur.se, d);
            if (dist[i] > dist[cur.se] + c - a[i])
            {
                dist[i] = dist[cur.se] + c - a[i];
                pq.push({dist[i], i});
                par[i] = cur.se;
            }
        }
    }
    prl(dist[n - 1]);
    return 0;
}
