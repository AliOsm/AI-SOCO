#include <bits/stdc++.h>
using namespace std;
#define ll long long int
const int N = 200005;

int n;
bool Safe[N];
int l[N], r[N];
int Min[N], Max[N];
int Next[N], Prev[N];

ll daneshesh(ll x,ll a,ll b){
    if(a <= x && x <= b) return x - a + b - a;
    else if(a <= x && b <= x) return x - a + b - a;
    else return b - x;
}

ll bameshesh(ll x,ll a,ll b){
    if(a <= x && x <= b) return b - x + b - a;
    else if(a <= x && b <= x) return x - a;
    else return b - x + b - a;
}


bool vis[N][2];
ll dp[N][2];

ll Solve(int pos,bool matha){
    if(pos > n) return 0;

    if(vis[pos][matha]) return dp[pos][matha];
    vis[pos][matha] = true;

    int Last = Prev[pos];
    int bam = Min[Last];
    int dan = Max[Last];

    ll col1,col2,d1,d2;
    if(!matha) col1 = l[bam], d1 = bam - col1, col2 = r[bam], d2 = col2 - bam;
    else       col1 = l[dan], d1 = dan - col1, col2 = r[dan], d2 = col2 - dan;

    ll ret1 = LLONG_MAX;
    if(col1) ret1 = min(ret1, d1 + daneshesh(col1,Min[pos],Max[pos]) + Solve(Next[pos],true));
    if(col1) ret1 = min(ret1, d1 + bameshesh(col1,Min[pos],Max[pos]) + Solve(Next[pos],false));

    ll ret2 = LLONG_MAX;
    if(col2) ret2 = min(ret2, d2 + daneshesh(col2,Min[pos],Max[pos]) + Solve(Next[pos],true));
    if(col2) ret2 = min(ret2, d2 + bameshesh(col2,Min[pos],Max[pos]) + Solve(Next[pos],false));

    return dp[pos][matha] = min(ret1,ret2);
}

int main(){
    int m,k,q;
    scanf("%d %d %d %d",&n,&m,&k,&q);
    for(int i=1;i<=n;i++) Min[i] = N, Max[i] = 0;

    Min[1] = Max[1] = 1;
    for(int i=1;i<=k;i++){
        int x,y;
        scanf("%d %d",&x,&y);
        Min[x] = min(Min[x], y);
        Max[x] = max(Max[x], y);
    }

    Next[n] = n+1; Prev[n+1] = n;
    for(int i=n-1;i>=1;i--){
        if(Min[i+1] <= Max[i+1]) Next[i] = i+1;
        else Next[i] = Next[i+1];
        Prev[Next[i]] = i;
    }

    for(int i=1;i<=q;i++){
        int x;
        scanf("%d",&x);
        Safe[x] = true;
    }

    for(int i=1;i<=m;i++){
        l[i] = l[i-1];
        if(Safe[i]) l[i]= i;
    }

    for(int i=m;i>=1;i--){
        r[i] = r[i+1];
        if(Safe[i]) r[i] = i;
    }

    ll Ans = Max[1] - Min[1] + Solve(Next[1], true) + Prev[n+1] - 1;
    printf("%lld",Ans);
}
