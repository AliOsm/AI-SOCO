#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cassert>
using namespace std;
const int N=900005;

vector<int> m[2];
int a,b,n,k;
int pos=0;
int mx;
bool f;
void t(int sz){
    int ww=b;
    if(pos){ww=a;}
    for(int i=0;i<sz;i++){
        if(!ww){f=0;return;}
        ww--;
        m[pos^1].push_back(1);
        
    }
    for(int i=0;i<sz;i++){
        int rem=(k-1)-m[pos^1][i];
        int mn=min(rem,ww);
        ww-=mn;
        m[pos^1][i]+=mn;
    }
    if(ww){f=0;}
 
}

int main()
{
    cin>>n>>k>>a>>b;
    mx=a;
    if(b>a){mx=b;pos=1;}
    k++;
    int d=mx/(k-1);
    for(int i=0;i<d;i++){
        m[pos].push_back(k-1);
    }
    if(mx%(k-1)!=0){
        m[pos].push_back(mx%(k-1));
    }
    f=1;
    t((int)m[pos].size()-1);
    if(!f){
        m[pos^1].clear();
        f=1;
        t((int)m[pos].size());
        if(!f){
            puts("NO");
            return 0;
        }
    }
    int l=0;
    int r=0;
    while(l<m[pos].size()||r<m[pos^1].size()){
    char c='G';
        if(pos){c='B';}
        if(l<m[pos].size()){
        for(int i=0;i<m[pos][l];i++){
            cout<<c;
        }
        l++;
        }
        if(r<m[pos^1].size()){
            c='B';
            if(pos){c='G';}
            for(int i=0;i<m[pos^1][r];i++){
                cout<<c;
            }
            r++;
        }
    }
    cout<<endl;
    return 0;
}
