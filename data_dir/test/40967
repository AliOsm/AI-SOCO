#include <bits/stdc++.h>
using namespace std;

#define REP(i, n) for(int i = 0; i < n; i++)
#define clr(t, val) memset(t, val, sizeof(t))

#define all(v)  v.begin() , v.end()
#define SZ(v) ((int)(v).size())

typedef long long Long;
typedef vector<int> vInt;
typedef vector<vInt> vvInt;
typedef vector<string> vStr;
typedef vector<vStr> vvStr;
typedef pair<int, int> Pair;
typedef pair<Long, Long> PairLong;
typedef vector<Pair> vPair;
typedef vector<vPair> vvPair;
typedef vector<PairLong> vPairLong;
typedef vector<Long> vLong;
typedef tuple<int, int, int> Tuple;
typedef long double LongDouble;

const int INF = INT_MAX / 2;
void bfs(vvInt &G, vInt &colors, int n, int s, int &d, int &u) {
	vInt dist(n, INF);
	deque<int> Q;
	Q.push_front(s);
	dist[s] = 0;
	while (!Q.empty()) {
		u = Q.front();
		Q.pop_front();
		for (auto v:G[u]) {
			int w = colors[u] ^ colors[v];
			if (dist[v] > dist[u] + w) {
				dist[v] = dist[u] + w;
				if (w == 0) {
					Q.push_front(v);
				} else {
					Q.push_back(v);
				}
			}
		}
	}
	d = dist[u];
}

int main() {
	ios_base :: sync_with_stdio(false);
	int n;
	while (cin >> n) {
		vInt colors(n);
		REP (i, n) {
			cin >> colors[i];
		}
		
		vvInt G(n);
		REP (i, n - 1) {
			int u, v;
			cin >> u >> v;
			u --, v --;
			G[u].push_back(v);
			G[v].push_back(u);
		}
		int d, s;
		bfs(G, colors, n, 0, d, s);
		bfs(G, colors, n, s, d, s);
		cout << (d + 1) / 2 << endl;
		//deque<>
	}
}

