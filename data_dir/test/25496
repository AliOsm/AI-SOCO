#include <bits/stdc++.h>
using namespace std;
 
#ifdef SG
	#include <debug.h>
#else
	#define show(...)
	#define debug(...)
	#define deepen(...)
	#define timer(...)
#endif
 
#define ARG4(_1,_2,_3,_4,...) _4
 
#define forn3(i,l,r) for (int i = int(l); i < int(r); ++i)
#define forn2(i,n) forn3 (i, 0, n)
#define forn(...) ARG4(__VA_ARGS__, forn3, forn2) (__VA_ARGS__)
 
#define ford3(i,l,r) for (int i = int(r) - 1; i >= int(l); --i)
#define ford2(i,n) ford3 (i, 0, n)
#define ford(...) ARG4(__VA_ARGS__, ford3, ford2) (__VA_ARGS__)
 
#define forv(i,v) for (auto i = v.begin(); i != v.end(); ++i)
#define forr(i,v) for (auto i = v.end(); i != v.begin() && (--i, 1); )
#define ve vector
#define pa pair
#define tu tuple
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) ((int)(a).size())
 
typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef unsigned char uc;
typedef pa<int, int> pii;
typedef pa<int, ll> pil;
typedef pa<ll, int> pli;
typedef pa<ll, ll> pll;
typedef ve<int> vi;
 
const ld pi = 3.1415926535897932384626433832795l;
 
template<typename T> inline auto sqr (T x) -> decltype(x * x) {return x * x;}
template<typename T> inline T abs (T x) {return x > T() ? x : -x;}
template<typename T1, typename T2> inline bool umx (T1& a, T2 b) {if (a < b) {a = b; return 1;} return 0;}
template<typename T1, typename T2> inline bool umn (T1& a, T2 b) {if (b < a) {a = b; return 1;} return 0;}
 
const int N = 100100;
const int inf = (1 << 30);
int a[N];
int n;
int pos[N];
int t[4 * N];
int sz;

int fnd(int i, int x, int y, int l, int r) {
	if (x > r || y < l) {
		return inf;
	}
	if (x >= l && y <= r) {
		return t[i];
	}
	return min(fnd(2 * i, x, (x + y) >> 1, l, r), fnd(2 * i + 1, ((x + y) >> 1) + 1, y, l, r));
}

int fnd(int l, int r) {
	return fnd(1, 0, sz - 1, l, r);
}

bool stopped(int idx, int len) {
	int r0 = min(n - 1, idx + len - 1);
	int res0 = fnd(idx, r0);
	int res1 = inf;
	if (idx + len > n) {
		res1 = fnd(0, min(idx - 1, idx + len - n - 1)) + n;
	}
	return min(res0, res1) <= idx + len - 1;
}

int main () {
	//std::ios::sync_with_stdio(false);
    //std::cin.tie(nullptr);
	cout.setf(ios::showpoint | ios::fixed);
	cout.precision(20);
#ifdef SG
	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
#endif
	cin >> n;
	forn(i, n) {
		cin >> a[i];	
	}
	vi p1(n), p2(n);
	forn(i, n) {
		p1[i] = p2[i] = i;
	}
	sort(all(p1), [&](int i, int j) {
		return a[i] < a[j];
	});
	sort(all(p2), [&](int i, int j) {
		return a[i] < a[j];
	});
	int t1 = 0, t2 = 0;
	set<int> s;
	memset(pos, 1, sizeof(pos));
	for (; t1 < n;) {
		debug(mt(t1, t2));
		int v1 = a[p1[t1]], v2 = a[p2[t2]];
		if (t2 == n || (t1 < n && v1 <= 2 * v2)) {
			++t1;
			auto it = s.lower_bound(p1[t1 - 1]);
			if (it == s.end()) {
				if (it == s.begin()) {
					continue;
				}
				it = s.begin();
			}
			if (*it < p1[t1 - 1]) {
				pos[p1[t1 - 1]] = *it + n;
			} else {
				pos[p1[t1 - 1]] = *it;
			}
		} else {
			s.insert(p2[t2]);
			++t2;
		}
	}
	debug(pos, pos + n);
	sz = 1;
	while (sz < n) {
		sz <<= 1;
	}
	memset(t, 1, sizeof(t));
	forn(i, n) {
		t[i + sz] = pos[i];
	}
	ford(i, 1, sz) {
		t[i] = min(t[2 * i], t[2 * i + 1]);
	}

	forn(i, n) {
		int l = 1, r = 2 * n;
		while (l < r) {
			int m = (l + r) / 2;
			if (stopped(i, m)) {
				r = m;
			} else {
				l = m + 1;
			}
		}
		if (!stopped(i, r)) {
			cout << -1 << ' ';
		} else {
			cout << r - 1 << ' ';
		}
	}
	cout << "\n";
	return 0;
}