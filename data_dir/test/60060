//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef cc_hash_table<int,int,hash<int>> ht;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e4 + 5;
const double eps = 1e-9;
int a[16][MAXN], dp[(1 << 16) + 1][16][16][2]; // end j, start l
int f[16][16], g[16][16];

int main()
{
    int n, m;
    ni(n), ni(m);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            ni(a[i][j]);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == j)
                continue;
            int x = INF, y = INF;
            for (int k = 0; k < m; k++) {
                x = min(abs(a[i][k] - a[j][k]), x);
                if (k < m - 1)
                    y = min(abs(a[i][k] - a[j][k + 1]), y);
            }
            f[i][j] = x;
            g[i][j] = y;
        }
    }
    for (int i = 1; i < (1 << n); i++) {
        vi tmp;
        for (int j = 0; j < n; j++)
            if (i & (1 << j))
                tmp.pb(j);
        if (tmp.size() == 1) {
            int k = tmp[0];
            dp[i][k][k][0] = INF;
            for (int j = 0; j + 1 < m; j++)
                dp[i][k][k][0] = min(dp[i][k][k][0], abs(a[k][j] - a[k][j + 1]));
            dp[i][k][k][1] = dp[i][k][k][0];
            continue;
        } else if (tmp.size() == 2) {
            int x = tmp[0], y = tmp[1];
            dp[i][x][y][0] = f[x][y];
            dp[i][x][y][1] = g[x][y];
            dp[i][y][x][0] = f[y][x];
            dp[i][y][x][1] = g[y][x];
            continue;
        }
        for (int j: tmp) {
            for (int k: tmp) {
                if (j == k)
                    continue;
                for (int l: tmp) {
                    if (l == j || l == k)
                        continue;
                    dp[i][j][l][0] = max(dp[i][j][l][0], min(dp[i ^ (1 << j)][k][l][0], f[j][k]));
                    dp[i][j][l][1] = max(dp[i][j][l][1], g[j][l]);
                }
            }
        }
    }
    int ans = 0;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            ans = max(ans, min(dp[(1<<n)-1][i][j][0], dp[(1<<n)-1][i][j][1]));
    pri(ans);
    return 0;
}
