#include <bits/stdc++.h>
//#include "RNG.h"
using namespace std;
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define inf 1000000005
#define linf (1ll << 60)
#define all(a) (a).begin(), (a).end()
#define ms(a,x) memset(a, x, sizeof(a))
//#define mod 1000000007
#define sz(a) ((int)(a).size())

template<class T> int getbit(T s, int i) { return (s >> i) & 1; }
template<class T> T onbit(T s, int i) { return s | (T(1) << i); }
template<class T> T offbit(T s, int i) { return s & (~(T(1) << i)); }
template<class T> int cntbit(T s) { return __builtin_popcount(s);}
#define Rep(i,n) for(int i = 0; i < (n); ++i)
#define Repd(i,n) for(int i = (n)-1; i >= 0; --i)
#define For(i,a,b) for(int i = (a); i <= (b); ++i)
#define Ford(i,a,b) for(int i = (a); i >= (b); --i)

typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
#define eps 1e-6
typedef pair<int, int> II;
template<class T> T gcd(T a, T b){ T r; while (b != 0) { r = a % b; a = b; b = r; } return a;}
template<class T> T lcm(T a, T b) { return a / gcd(a, b) * b; }
#define PI 2 * acos(0)

#define maxn 400005

int n;
ll a[maxn], f[maxn], res;
vector<II> V[maxn];

void go(int par, int u, ll add){
//	cout << par << " " << u << endl;
	res = max(res, a[u]);
	f[u] = add;
	vector<ll> VV;
	Rep(i, sz(V[u])){
		int v = V[u][i].fi, c = V[u][i].se;
		if(v == par) continue;
		go(u, v, add + a[v] - c);
		VV.pb(f[v]);
	}
	sort(all(VV));
	int m = sz(VV);
	if(m) res = max(res, a[u] + VV[m - 1] - add);
	if(m > 1) res = max(res, a[u] + VV[m - 1] + VV[m - 2] - add - add);

	Rep(i, sz(V[u])){
		int v = V[u][i].fi;
		if(v == par) continue;
		f[u] = max(f[u], f[v]);
	}
}

void solve(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
//    freopen("in.txt", "r", stdin);
//    freopen("out.txt", "w", stdout);
    cin >> n;
    For(i, 1, n) cin >> a[i];
    Rep(run, n - 1){
    	int u, v, c;
    	cin >> u >> v >> c;
    	V[u].pb(mp(v, c));
    	V[v].pb(mp(u, c));
    }
    ms(f, 0);
    go(0, 1, 0);
    cout << res << endl;
}

int main(){
  solve();

  return 0;
}
