#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>
#include <array>
#include <atomic>
#include <chrono>
#include <condition_variable>
#include <forward_list>
#include <future>
#include <initializer_list>
#include <mutex>
#include <random>
#include <ratio>
#include <regex>
#include <scoped_allocator>
#include <system_error>
#include <thread>
#include <tuple>
#include <typeindex>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>

using namespace std;

const int maxn = 100010;
int n, k;
int sex[maxn];
int a[maxn];
map<int, int> kek[100010];

int32_t main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    ios_base::sync_with_stdio(false);
    int cnt1 = 0;
    cin >> n >> k;
    for(int i = 0; i < n; ++i){
        int x;
        cin >> x;
        ++sex[x];
        a[i] = x;
    }
    sort(a, a + n);
    long long an = 0;
    for(int i = 2; i < maxn; ++i){
        int value = i;
        for(int j = 2; j * j <= value; ++j){
            if(value % j == 0){
                int cnt = 0;
                while(value % j == 0){
                    ++cnt;
                    value /= j;
                }
                kek[i][j] = cnt;
            }
        }
        if(value > 1) kek[i][value] = 1;
    }
    for(int i = 1; i < maxn; ++i){
        if(sex[i]){
            long long need = 1;
            bool ok = true;
            for(auto u : kek[i]){
                int c = (k - (u.second % k)) % k;
                for(int j = 0; j < c; ++j){
                    need *= u.first;
                    if(need >= maxn){
                        ok = false;
                        break;
                    }
                }
                if(!ok) break;
            }
            if(!ok) continue;
            long long vv = i / need * need;
            for(long long j = vv; j < maxn; j += need){
                bool ok = true;
                for(auto u : kek[j]){
                    int have_in_first = 0;
                    if(kek[i].count(u.first)) have_in_first = kek[i][u.first];
                    if((u.second + have_in_first) % k){
                        ok = false;
                        break;
                    }
                }
                if(ok){
                    if(i < j){
                        // if(sex[i] && sex[j])
                        //     cout << i << ' ' << j << endl;
                        an += 1ll * sex[i] * sex[j];
                    }
                    else if(i == j){
                        // if(sex[i] > 1){
                        //     cout << i << ' ' << i << endl;
                        // }
                        an += 1ll * sex[i] * (sex[i]-1) / 2;
                    }
                }
            }
        }
    }
    cout << an << '\n';
    return 0;
}