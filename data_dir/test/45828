#include<bits/stdc++.h>
#define lf double
#define ll long long
#define ull unsigned ll
#define ii pair<int,int>
#define li pair<ll,ll>
#define iii pair<ii,int>
#define iiii pair<ii,ii>
#define iiii2 pair<int,iii>
#define lli pair<ll,int>
#define pll pair<ll,ll>
#define heap priority_queue
#define mp make_pair
#define st first
#define nd second
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define all(x) x.begin(),x.end()
#define len(x) strlen(x)
#define sz(x) (int) x.size()
#define orta ((bas+son)/2)
#define min3(x,y,z) min(min(x,y),z)
#define max3(x,y,z) max(max(x,y),z)
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define MOD 1000000007
#define inf 2000000009
#define N 500005
#define LOG 22
#define magic 100
#define M 44444
#define KOK 350
#define EPS 0.0025
#define pw(x) (1<<(x))
#define PI 3.1415926535
#define log sfeefw
using namespace std;

int n,now,log;
ll ans;
int rnk[LOG+1][N],bal[N],tot[N];
iii sa[N];
vector<int> v[2*N];
char s[N];

int total(int ind,int sz) {

	auto it1=prev(upper_bound(all(v[bal[ind]-1+N]),ind+sz-1));
	auto it2=lower_bound(all(v[bal[ind]-1+N]),ind);

	return it1-it2+1;

}

int getnear(int now) { // returns distance between nearest bal that equals to bal[now]-2

	auto it=lower_bound(all(v[bal[now]-2+N]),now);

	if(it==v[bal[now]-2+N].end()) return inf;

	return *it-now;

}

int getlcp(int x,int y) {

	int res=0;

	for(int i=log;i>=0;i--) {

		if(pw(i)+max(x,y)-1>n) continue ;

		if(rnk[i][x]==rnk[i][y]) {

			res+=pw(i);
			x+=pw(i);
			y+=pw(i);

		}

	}

	return res;

}

void suffix_array() {

	now=1;
	log=0;

	for(int i=1;i<=n;i++) {

		sa[i]={{s[i],s[i]},i};

	}

	while(1) {

		sort(sa+1,sa+1+n);

		int cnt=0;

		for(int i=1;i<=n;i++) {

			++cnt;

			while(i+1<=n && sa[i].st==sa[i+1].st) {

				rnk[log][sa[i].nd]=cnt;
				i++;

			}

			rnk[log][sa[i].nd]=cnt;

		}

		if(now>=n) break ;

		for(int i=1;i<=n;i++) {

			sa[i]={{rnk[log][i],(i+now<=n?rnk[log][i+now]:0)},i};

		}

		now*=2;
		log++;

	}

}

int main() {

	scanf("%d",&n);

	scanf("%s",s+1);

	for(int i=1;i<=n;i++) {

		bal[i]=bal[i-1]+(s[i]=='(')-(s[i]==')');

		v[bal[i]+N].pb(i);

	}

	suffix_array();

	/*for(int i=1;i<=n;i++,puts("")) {

		for(int j=sa[i].nd;j<=n;j++) printf("%c",s[j]);

	}*/

	for(int i=1;i<n;i++) {

		int ind=sa[i].nd;

		int go=min(getlcp(sa[i].nd,sa[i+1].nd),getnear(ind));

		//go=min(go,abs(sa[i].nd-sa[i+1].nd));

		if(s[ind]==')') continue ;

		ans-=total(ind,go);

	}

	tot[0]=1;

	int add=0;

	for(int i=1;i<=n;i++) {

		if(bal[i]+add<0) {

			tot[0]=1;
			add++;

			continue ;

		}

		if(s[i]==')') {

			ans+=tot[bal[i]+add];
			tot[bal[i]+1+add]=0;

		}

		tot[bal[i]+add]++;

	}

	printf("%lld",ans);

}