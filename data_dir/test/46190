#include <bits/stdc++.h>
#define forn(i, n) for(int i = 0; i < (int) n; ++i)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; ++i)
#define For(i, st, en) for(int i = (int)st; i <= (int)en; ++i)
#define clr(x) memset(x, 0, sizeof(x))
#define all(x) (x).begin(),(x).end()
#define pb push_back
#define x first
#define y second
#define mp make_pair

using namespace std;

typedef unsigned int uint;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int, int> PII;

/**
 * The code starts here.
 */
char pos[10000000];
int t[10000000];

int n = 1000000;
int sum (int r)
{
    int result = 0;
    for (; r >= 0; r = (r & (r+1)) - 1)
        result += t[r];
    return result;
}

void inc (int i, int delta)
{
    for (; i < n; i = (i | (i+1)))
        t[i] += delta;
}

int sum (int l, int r)
{
    return sum (r) - sum (l-1);
}

int main()
{
    ios_base::sync_with_stdio(false);

    int m;
    cin >> n >> m;
    int a[m];

    for (int i = 0; i < m; ++i)
        cin >> a[i];
    int sz = 0;
    for (int i = 0; i < n; ++i)
    {
        int tm;
        cin >> tm;
        if (tm >= 0)
        {
            pos[sz] = tm;
            inc(sz, 1);
            sz++;
        }
        else
        {
            vector<int> poses;

            for (int j = 0; j < m; ++j)
            {
                if (a[j] > sum(n - 1))
                    break;

                int l = 0, r = n - 1;
                while (l < r)
                {
                    int m = (l + r) >> 1;

                    if (sum(m) < a[j])
                        l = m + 1;
                    else
                        r = m;
                }
                poses.push_back(l);
            }

            for (int j = 0; j < (int)poses.size(); ++j)
            {
                inc(poses[j], -1);
            }
        }
    }

    vector<int> ans;
    for (int i = 0; i < n; ++i)
    {
        if (sum(i, i))
            ans.push_back(pos[i]);
    }
    if (ans.empty())
    {
        cout << "Poor stack!" << endl;
        return 0;
    }
    for (int i = 0; i < (int)ans.size(); ++i)
    {
        cout << ans[i];
    }
    cout << endl;
    return 0;
}
