#include <bits/stdc++.h>

#define vc vector
#define all(v) v.begin(), v.end()
#define ll long long 
#define ld long double
#define len(v) (int) v.size()

using namespace std;

const int mod = 1e9 + 7;
const int N = 2000;

int F(int a, int b) {
    ll c = a + b;
    if (c >= mod) c -= mod;
    if (c < 0) c += mod;
    return c;
}

struct Fenwick {
    vc <int> t;
    int nn;
    void init(int n) {
        nn = n;
        t.resize(n);
    }
    void inc(int i, int delta) {
        for (; i < nn; i |= (i + 1)) {
            t[i] = F(t[i], delta);
        }
    }
    int sum(int r) {
        int ret = 0;
        for (; r >= 0; r = (r&(r + 1)) - 1) {
            ret = F(ret, t[r]);
        }
        return ret;
    }
    int sum(int l, int r) {
        return F(sum(r), -sum(l - 1));
    }
};

Fenwick r[N], up[N];
string f[N];
int cntd[N][N], cntr[N][N];

int main() {
    ios::sync_with_stdio(false);

    int n, m;
    cin >> n >> m;
    
    for (int i = 0; i < n; ++i) {
        cin >> f[i];
    }

    if (f[n - 1][m - 1] == 'R') {
        cout << 0;
        return 0;
    }

    if (n == 1 && m == 1) {
        cout << 1;
        return 0;
    }

    for (int i = 0; i < n; ++i) {
        up[i].init(m + 2);
    }
    up[n - 1].inc(m - 1, 1);

    for (int i = 0; i < m; ++i) {
        r[i].init(n + 2);
    }
    r[m - 1].inc(n - 1, 1);
   
    for (int i = 0; i < n; ++i) {
        int s = 0;
        for (int j = m - 1; j > -1; --j) {
            cntr[i][j] = s;
            if (f[i][j] == 'R') s++;
        }
    }
    
    for (int j = 0; j < m; ++j) {
        int s = 0;
        for (int i = n - 1; i > -1; --i) {
            cntd[i][j] = s;
            if (f[i][j] == 'R') s++;
        }
    }

    for (int i = n - 1; i > -1; --i) {
        for (int j = m - 1; j > -1; --j) {
            if (i == n - 1 && j == m - 1) continue;
            int rr = n - 1 - cntd[i][j];
            up[i].inc(j, r[j].sum(i + 1, rr));
            rr = m - 1 - cntr[i][j];
            r[j].inc(i, up[i].sum(j + 1, rr));
        }
    }

    cout << F(r[0].sum(0, 0), up[0].sum(0, 0));

    return 0;
}