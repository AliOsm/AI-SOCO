#include <algorithm>
#include <iostream>
#include <valarray>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <numeric>
#include <complex>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <ctime>
#include <cmath>
#include <queue>
#include <stack>
#include <deque>
#include <map>
#include <set>

using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i)
#define error(x) cout << #x << " = " << (x) << endl;
#define all(n) (n).begin(), (n).end()
#define Size(n) ((int)(n).size())
#define mk make_pair
#define pb push_back
#define F first
#define S second
#define X real()
#define Y imag()

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef complex<double> point;

template <class P, class Q> void smin(P &a, Q b) { if (b < a) a = b; }
template <class P, class Q> void smax(P &a, Q b) { if (b > a) a = b; }
template <class P, class Q> bool in(const P &a, const Q &b) { return a.find(b) != a.end(); }

const int LOG = 32, MAXN = 1024, MOD = 7340033;
int dp[MAXN][MAXN];

int main() {
	dp[0][0] = dp[1][0] = dp[1][1] = 1;
	FOR(i, 1, LOG-1) {
		dp[i+1][0] = 1;
		FOR(rep, 0, 4) for (int j = MAXN-1; j >= 0; j--) for (int k = 1; j+k < MAXN; k++) (dp[i+1][j+k] += 1LL*dp[i][k]*dp[i+1][j]%MOD) %= MOD;
		for (int j = MAXN-1; j >= 1; j--) dp[i+1][j] = dp[i+1][j-1];
	}
	int q;
	cin >> q;
	while (q--) {
		int n, k;
		cin >> n >> k;
		int l = 0;
		while (n > 1 && n%2) n /= 2, l++;
		cout << dp[l][k] << "\n";
	}
	return 0;
}

