//839C
//Notices: n cities in n-1 roads, it is a tree

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <queue>

using namespace std;

struct City{
     double possible;
     int length;
};

City cities[100010];

vector<int> connects[100010];
bool isPassed[100010];
bool isExtend[100010];

int main()
{
//     for (int i = 1 ; i <= 100000 ; i++)
//          printf("1 %d\n", i);
     
     int n;

     scanf("%d", &n);
     
     int from, to;
     for (int i = 0 ; i < n - 1 ; i++)
     {
          scanf("%d%d", &from, &to);
          connects[from].push_back(to);
          connects[to].push_back(from);
          //printf("from: %d, to: %d\n", from, to);
     }
     
     cities[1].possible = 1;
     cities[1].length = 0;
     
     memset(isPassed, false, sizeof(isPassed));
     memset(isExtend, false, sizeof(isExtend));
     
     std::queue<int> cityIndexQueue;
     int curCityIndex;
     cityIndexQueue.push(1);
     isPassed[1] = true;
          
     while (!cityIndexQueue.empty())
     {
          curCityIndex = cityIndexQueue.front();
          //printf("%d %d\n", curCityIndex, connects[curCityIndex].size());
          cityIndexQueue.pop();
          
          std::vector<int>::iterator iCity;
          
          int count = 0;
          for (iCity = connects[curCityIndex].begin() ; 
               iCity != connects[curCityIndex].end() ;
               iCity++)
          {
               if (!isPassed[*iCity])
               {
                    count++;
               }
          }
          
          if (count == 0)
               continue;
               
          isExtend[curCityIndex] = true;
          double newPossible = cities[curCityIndex].possible / count;
          for (iCity = connects[curCityIndex].begin() ; 
               iCity != connects[curCityIndex].end() ;
               iCity++)
          {
               cities[*iCity].possible = newPossible;
               cities[*iCity].length = cities[curCityIndex].length + 1;
               
               cityIndexQueue.push(*iCity);
               isPassed[*iCity] = true;
               //printf("push %d\n", *iCity);
          }
     }
     
     double expLength = 0;
     for (int i = 1 ; i <= n ; i++)
     {
          if (isExtend[i] == 0)
          {
               expLength = expLength + cities[i].possible * cities[i].length;
          }
     }
     
     printf("%.10lf\n", expLength);

     return 0;
}
