#include <cstdio>
#include <vector>

using namespace std;

struct Factor
{
	int num;
	int times;
};

int n;

std::vector<Factor> factors;

void getFactors(int num)
{
	factors.clear();
	
	Factor newFactor;
	int d = 2;
	while (d * d <= num)
	{
		if (num % d == 0)
		{
			newFactor.num = d;
			newFactor.times = 0;
			while (num % d == 0)
			{
				num = num / d;
				newFactor.times++;
			}
			
			factors.push_back(newFactor);
		}
		
		if (d == 2)
			d++;
		else
			d+=2;
	}
	
	if (num != 1)
	{
		newFactor.num = num;
		newFactor.times = 1;
		
		factors.push_back(newFactor);
	}
}

bool isAllEqual(int maxTime)
{
	for (int i = 0 ; i < factors.size() ; i++)
		if (maxTime != factors[i].times)
			return false;
	return true;
}

int main()
{
	
	scanf("%d", &n);
	
	getFactors(n);
	
	long long finalNum = 1;
	int maxTime = 0;
	for (int i = 0 ; i < factors.size() ; i++)
	{
		finalNum = finalNum * factors[i].num;
		if (maxTime < factors[i].times)
			maxTime = factors[i].times;
	}
	
	if (maxTime <= 1)
	{
		printf("%I64d 0\n", finalNum);
		return 0;
	}
	
	bool isOperEqual = isAllEqual(maxTime);
	
	int operTime = 0;
	int base = 1;
	while (base < maxTime)
	{
		base = base * 2;
		operTime++;
	}
	
	if ((base == maxTime) && (true == isOperEqual))
	{
		
	}
	else
		operTime++;
	
	printf("%I64d %d\n", finalNum, operTime);
	
	return 0;
}

