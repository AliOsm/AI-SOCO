#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcount(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

const int OO = (int) 2e9;
const double eps = 1e-9;

const int N = 1003;

int n, m, w;
int a[N], b[N];
vector<vector<int> > adj;
int vis[N];
int vid;
pair<int, pii> arr[N];
int totA[N], totB[N];
int mnIdx[N];
int dp[N][N];

void dfs(int cur) {
	vis[cur] = vid;
	arr[cur] = mp(vid, mp(a[cur], b[cur]));
	totA[vid] += a[cur];
	totB[vid] += b[cur];
	for (int i = 0; i < SZ(adj[cur]); i++) {
		int to = adj[cur][i];
		if (vis[to] == vid)
			continue;
		dfs(to);
	}
}

void init() {
	for (int i = 0; i < n; i++) {
		if (!vis[i]) {
			vid++;
			dfs(i);
		}
	}
	sort(arr, arr + n);
	MMS(mnIdx, 0x3f);
	for (int i = 0; i < n; i++) {
		mnIdx[arr[i].first] = min(mnIdx[arr[i].first], i);
	}
	vid++;
	mnIdx[vid] = n;
}

int calc(int idx, int curW) {
	if (curW > w)
		return -OO;
	if (idx == n)
		return 0;
	int &ret = dp[idx][curW];
	if (ret != -1)
		return ret;
	ret = calc(idx + 1, curW);
	ret = max(ret, totB[arr[idx].first] + calc(mnIdx[arr[idx].first + 1], curW + totA[arr[idx].first]));
	ret = max(ret, arr[idx].second.second + calc(mnIdx[arr[idx].first + 1], curW + arr[idx].second.first));
	return ret;
}

int main() {
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
#ifndef ONLINE_JUDGE
//	freopen("in.txt", "rt", stdin);
//	freopen("out.txt", "wt", stdout);
#endif
	cin >> n >> m >> w;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	for (int i = 0; i < n; i++)
		cin >> b[i];
	adj.resize(n);
	for (int i = 0; i < m; i++) {
		int f, t;
		cin >> f >> t;
		f--, t--;
		adj[f].pb(t);
		adj[t].pb(f);
	}
	init();
	MMS(dp, -1);
	cout << calc(0, 0) << endl;
	return 0;
}
