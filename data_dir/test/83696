#include <bits/stdc++.h>

using namespace std;

#define F first
#define S second

#define endl '\n'

#define mp make_pair
#define pb push_back

#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

#define sol (root + root)
#define sag (root + root + 1)
#define orta ((bas + son) >> 1)

#define bit __builtin_pop_bcount

#ifndef D
	#define dbg(x) 0
	#define dbgs(x) 0
#else
	#define dbg(x) cerr << (#x) << " --> " << (x) << endl
	#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#endif

typedef long long ll;
typedef pair < int, int > pii;

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

typedef vector < vector < int > > matrix;

const int N = (40 + 1 << 1) + 1 + 1;

const int mod = 1e9 + 7;

ll n, k, comb[N][N], c[N][N], power[N];

void mul(matrix &a, matrix &b) {

	memset(c, 0, sizeof(c));

	FOR(i, 1, N - 1)
		FOR(j, 1, N - 1)
			FOR(k, 1, N - 1)
				c[i][j] = (c[i][j] + (ll) a[i][k] * b[k][j]) % mod;

	FOR(i, 1, N - 1)
		FOR(j, 1, N - 1)
			a[i][j] = c[i][j];

}

int main() {
	
	ios :: sync_with_stdio(0);

	comb[0][0] = 1;

	FOR(i, 1, N - 1)
	{
		comb[i][0] = 1;

		FOR(j, 1, i)
			comb[i][j] = (comb[i - 1][j - 1] + comb[i - 1][j]) % mod;
	}

	cin >> n >> k;

	if(n == 1) return cout << 1 << endl, 0;

	matrix t;

	t.resize(N);

	FOR(i, 1, N - 1)
		t[i].resize(N);

	FOR(i, 1, k + 1)
	{
		FOR(j, i, k + 1)
			t[i][j] = comb[k - i + 1][j - i];

		FOR(j, k + 1 + i, 2 * k + 2)
			t[i][j] = comb[k - i + 1][j - (k + 1 + i)];
	}

	FOR(i, k + 2, 2 * k + 2)
		FOR(j, i - (k + 2) + 1, k + 1)
			t[i][j] = comb[k - (i - (k + 2))][j - (i - (k + 2) + 1)];

	FOR(i, 1, k + 1)
		t[2 * k + 3][i] = comb[k][i - 1];

	FOR(i, k + 2, 2 * k + 2)
		t[2 * k + 3][i] = comb[k][i - (k + 2)];

	t[2 * k + 3][2 * k + 3] = 1;
	
	matrix res;

	res.resize(N);

	FOR(i, 1, N - 1)
		res[i].resize(N);

	FOR(i, 1, N - 1)
		res[i][i] = 1;

	n -= 2;

	FOR(i, 0, 60)
	{
		if(n & 1LL << i)
			mul(res, t);

		mul(t, t);
	}

	power[0] = 1;

	FOR(i, 1, N - 1)
		power[i] = power[i - 1] * 2 % mod;

	ll ans = 0;

	FOR(i, 1, k + 1)
		ans = (ans + res[2 * k + 3][i] * power[k - i + 1] * 2) % mod;

	FOR(i, k + 2, 2 * k + 2)
		ans = (ans + res[2 * k + 3][i] * power[k - (i - (k + 2))]) % mod;

	ans = (ans + res[2 * k + 3][2 * k + 3] * (1 + 2 * power[k])) % mod;

	cout << ans << endl;

	return 0;

}
