#include <bits/stdc++.h>
using namespace std;
#define int long long
#define IOS ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0)
inline int in(){int32_t x ; scanf("%d",&x) ; return x ;}
inline long long lin(){long long x ; scanf("%lld",&x) ; return x;}
const int maxn = 1e6 + 200;
const int mod = 1e9 + 7;
const long long infll = 2e18 + 10;
const int inf = 1e9 + 10;
typedef pair<int,int> pii;
typedef long long ll;
typedef vector<int> vi;
int dis[1005][1005][4];
bool mark[1005][1005][4];
string s[maxn];
pii source , target;
pii moves[] = {{0,-1},{0,1},{1,0},{-1,0}};
pair<pii , int > q[1005 * 1005 * 4];
int t , h , n , m;
inline void bfs(pii &source)
{
    for (int i = 0 ; i < 4 ; i ++){
        dis[source.first][source.second][i] = 0;
        q[t ++] = {source,i};
    }
    while (h < t)
    {
        pair<pii , int > V = q[h ++];
        for (int i = 0 ; i < 4 ; i ++){
            pii nxt = {V.first.first + moves[i].first , V.first.second + moves[i].second};
            if (nxt.first >= 0 && nxt.second >= 0 && nxt.first < n && nxt.second < m && dis[nxt.first][nxt.second][i] > dis[V.first.first][V.first.second][V.second] + (i != V.second) && s[nxt.first][nxt.second] != '*'){
                dis[nxt.first][nxt.second][i] = dis[V.first.first][V.first.second][V.second] + (i != V.second);
                if (dis[nxt.first][nxt.second][i] > 2) continue;
                if (!mark[nxt.first][nxt.second][i])
                    q[t ++] = {{nxt.first,nxt.second},i};
                mark[nxt.first][nxt.second][i] = true;
            }
        }
    }
}
int32_t main()
{
    memset(dis,63,sizeof dis);
    IOS;
    cin >> n >> m;
    for (int i = 0 ; i < n ; i ++){
        cin >> s[i];
        for (int j = 0 ; j < m ; j ++){
            if (s[i][j] == 'S') source = {i,j};
            else if (s[i][j] == 'T') target = {i,j};
        }
    }
    bfs(source);
    for (int i = 0 ; i < 4 ; i++)
        if (dis[target.first][target.second][i] <= 2 ) return cout << "YES\n" , 0;
    cout << "NO\n";
}
