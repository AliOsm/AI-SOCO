#include <bits/stdc++.h>
using namespace std;
const int N = 1e6 +6;
int seg[4*N], mx = 1e6+1;
vector <vector <int> > v;
bool point[N];
int last[N], fans[N];

void update (int n, int l, int r, int s, int e, int val){
	
	if(r <s || l>e)return;
	if (l>=s && r <=e){
		seg[n] += val;
		return;
	}
	int mid = (l+r)/2;
	update (n *2 +1, l, mid, s, e, val);
	update (n *2 +2, mid+1,r, s, e, val);
	seg[n] = seg[n*2 +1] + seg[n*2 +2];
}

int get (int n, int l , int r, int s, int e){
	
	if(r <s || l>e)return 0;
	if (l>=s && r <=e){
		return seg[n];
	}
	int mid = (l+r)/2;
	return get (n*2 +1, l, mid, s, e) + get (n *2 +2, mid+1,r, s, e);
}

vector<int> E[N];

int main() {

	int n, q;
	scanf("%d%d", &n, &q);
	for (int i=0, l , r; i<n; i++){
		scanf("%d%d", &l,&r);
		update (0, 0, mx, r, r, 1);
		E[l - 1].push_back(r);		
	}
	
	v.resize (mx +5);
	for (int i=1; i<=q; i++){
		int m;
		scanf("%d", &m);
		for (int j=0, x; j<m; j++){
			scanf("%d", &x);
			point[x] = true;
			v[x].push_back (i);
		}
	}
	for (int i=1; i <=q; i++)last[i] = mx-1;
	int r =mx;
	while (r >=0){
		while(E[r].size()){
			update(0,0,mx,E[r].back(),E[r].back(),-1);
			E[r].pop_back();
		}
		if (!point[r]){
			r--;
			continue;
		}
		for (int i=0; i<v[r].size(); i++){
			int qq = v[r][i];
			int upto = last[qq];
			fans[qq] += get (0, 0, mx, r, upto);
			last[qq] = r-1;
		}
		r--;
	}
	for (int i=1; i<=q; i++){
		cout <<fans[i]<<endl;
	}
	return 0;
}