#include <bits/stdc++.h>
using namespace std;
#define x first
#define y second
#define pb push_back
#define mp make_pair
typedef pair<int, int> pii;
typedef long long ll;
const int MOD = 998244353;
const int BASE = 27;
const int N = 100002;

ll gcd(ll a, ll b){
	return !b?a:gcd(b,a%b);

}
ll ab(ll a){
	return a < 0 ? -a: a;
}
struct fraction{
	ll p , q;
	fraction(){}
	fraction(ll _p, ll _q){
		p = _p;
		q = _q;
		simple();
	}
	void simple(){
		if(p < 0 && q < 0){
			p *= -1;
			q *= -1;
		}
		if(q < 0){
			q *= -1;
			p *= -1;
		}
		ll g = gcd(ab(p),ab(q));
		p /= g;
		q /= g;
	}
	fraction operator+(const fraction &rhs)const{
		return fraction(p*rhs.q+rhs.p*q,rhs.q*q);
	}
	fraction operator*(const fraction &rhs)const{
		return fraction(p*rhs.p,q*rhs.q);
	}
	bool operator<(const fraction &fhs) const{
		return fhs.q * p < fhs.p * q;
	}
	bool operator==(const fraction &fhs) const{
		return fhs.q == q && fhs.p == p;
	}
};

struct line{
	fraction m,b;
	bool operator==(const line &rhs){
		return rhs.m == m && rhs.b == b;
	}
	bool operator<(const line &rhs) const{
		if(rhs.m == m)return b < rhs.b;
		return m < rhs.m;
	}
};
int n;
pair<ll,ll> p[1010];

vector<line> f;

ll c2(ll sz){
	return (sz*(sz-1))/2;
}
map<fraction,int> freq;

int main() {
	cin >> n;
	for (int i = 0; i < n; ++i)scanf("%lld%lld",&p[i].x,&p[i].y);
	vector<int> v;
	for (int i = 0; i < n; ++i){
		for(int j = i+1 ; j < n ; ++j){
			if(p[j].x-p[i].x == 0){
				v.push_back(p[j].x);
			}else{
				f.push_back(line());
				f.back().m = fraction(p[j].y-p[i].y,p[j].x-p[i].x);
				f.back().b = f.back().m*fraction(-p[i].x,1)+fraction(p[i].y,1);
			//	cout << f.back().m.p << " "<< f.back().m.q << " |  "<< f.back().b.p << " "<< f.back().b.q  << " "<< i << " " << j<< endl;
			}
		}
	}
	sort(f.begin(),f.end());
	f.resize(unique(f.begin(),f.end())-f.begin());
/*	cout << "HI" << endl;
	for(auto g : f){
		cout << g.m.p << " "<< g.m.q << " |  "<< g.b.p << " "<< g.b.q << endl;
	}
	return 0;*/
	sort(v.begin(),v.end());
	v.resize(unique(v.begin(),v.end())-v.begin());
	ll totalLines = (1ll*v.size()+f.size());
	ll ans = c2(totalLines);

	ans -= c2(v.size());
	for (int i = 0; i < f.size(); ++i){
		freq[f[i].m]++;
	}
	for(auto g : freq){
		ans -= c2(g.second);
	}
	cout << ans << endl;
	return 0;
}