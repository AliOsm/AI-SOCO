//#include <cstdio>
#include <iostream>

#include <cstring>

#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
//#include <queue>
//#include <stack>
#include <cassert>

using namespace std;

#define SZ(a) int((a).size())
#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)

typedef long long llong;
typedef vector<int> VI;
typedef vector<VI> VVI;

typedef pair<int,int> II;

int get_chain_end(VI& F, int start) {
   int cur = start;
   while (true) {
      int nxt = F[cur];
      if (nxt == 0)
         return cur;
      cur = nxt;
   }
   return -1;
}

void solve(int N, VI& F) {
   VI in_deg(N+1), out_deg(N+1);

   FOR(i, 1, N) {
      if (F[i] == 0)
         continue;
      int j = F[i];
      in_deg[j]++;
      out_deg[i]++;
   }

   vector<II> chains;
   FOR(i, 1, N) {
   // cerr << i << ": " << in_deg[i] << ' ' << out_deg[i] << endl;
      if (in_deg[i] == 1 && out_deg[i] == 1) continue;
      if (in_deg[i] == 0 && out_deg[i] == 0) {
         chains.emplace_back(i, i);
         continue;
      }
      if (in_deg[i] == 1) {
         assert(out_deg[i] == 0);
      }
      if (out_deg[i] == 1) {
         assert(in_deg[i] == 0);
         int j = get_chain_end(F, i);
         chains.emplace_back(i, j);
      }
   }

   if (chains.empty())
      return;

   if (SZ(chains) == 1) {
      II c = chains.front();
      assert(c.first != c.second);
      F[c.second] = c.first;
      return;
   }

   REP(k, SZ(chains)-1) {
      II cur = chains[k];
      II nxt = chains[k+1];
      F[cur.second] = nxt.first;
   }
   F[chains.back().second] = chains.front().first;
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(nullptr);

   int N;
   cin >> N;
   VI F(N+1);
   FOR(i, 1, N) {
      cin >> F[i];
      assert(F[i] != i);
   }

   solve(N, F);

   FOR(i, 1, N)
      cout << F[i] << ' ';
   cout << '\n';

   return 0;
}
