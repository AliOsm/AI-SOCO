/* ****revpro**** */

#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define endl	   '\n'
#define pii         pair<ll,ll>
#define vi          vector<ll>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll i=a;i<b;i++)
#define repr(i,a,b) for(ll i=b-1;i>=a;i--)    
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define mii	    map<ll,ll>
using namespace std;

#define N  100005	

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{
		ll n,x;
		cin>>n;
		vi a[n];
		set <ll> s[3];
		rep(i,1,n+1) {
			cin>>x;
			a[x].pb(i);
			s[x%3].insert(-x);
		}
		ll prev=0;
		vi ans;
		if(a[0].empty())
		{
			cout<<"Impossible";
			return 0;
		}
		ans.pb(a[0].back());
		a[0].pop_back();
		if(a[0].empty()) s[0].erase(0);
		ll cnt=1;
		set <ll> :: iterator it;
		while(cnt<n){
			prev++;
			if(prev<2){
				if(a[prev].empty())
				{
					cout<<"Impossible";
					return 0;
				}
				else 
				{
					ans.pb(a[prev].back());
					a[prev].pop_back();
					if(a[prev].empty()) s[prev%3].erase(-prev);
					cnt++;
				}
			}
			else
			{
				it=s[(prev)%3].lbnd(-prev);
				if(it==s[(prev)%3].end()){cout<<"Impossible"; return 0;}
				prev=-(*it);
				ans.pb(a[prev].back());
				a[prev].pop_back();
				if(a[prev].empty()) s[prev%3].erase(-prev);
				cnt++;
			}
		}
		cout<<"Possible\n";
		for(auto i:ans) cout<<i<<' ';
	}
	return 0;
}