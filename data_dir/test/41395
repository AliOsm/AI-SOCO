#include<iostream>
#include<vector>
#include<map>
#include<set>
#include<cassert>
#include<cassert>
#include<unordered_map>
#include<unordered_set>
#include<functional>
#include<queue>
#include<stack>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<sstream>
#include<iomanip>
#include<cstdio>
#include<cstdlib>
#include<numeric>
#include<random>
#include<chrono>
#include<bitset>
using namespace std;

#define all(x) (x).begin(), (x).end()
#define pb push_back
#define xx first
#define yy second
#define sz(x) (int)(x).size()
#define gc getchar
#define IO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define mp make_pair

#ifndef ONLINE_JUDGE
#  define LOG(x) (cerr << #x << " = " << (x) << endl)
#else
#  define LOG(x) ((void)0)
#endif

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const double PI=3.1415926535897932384626433832795;
const ll INF = 1LL<<62;
const ll MINF = -1LL<<62;

template<typename T> T getint() {
	T val=0;
	char c;
	
	bool neg=false;
	while((c=gc()) && !(c>='0' && c<='9')) {
		neg|=c=='-';
	}

	do {
		val=(val*10)+c-'0';
	} while((c=gc()) && (c>='0' && c<='9'));

	return val*(neg?-1:1);
}

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); uniform_int_distribution<int>(0, n-1)(rng)



int main() {
	IO;
	int T;
	cin>>T;
	while(T--) {
		ll x;
		cin>>x;
		ll hatv=9;
		ll big_len=0;
		ll small_len=1;
		x--;
		while(1) {
			ll y=0;
			for(ll z=30;z>=0;z--) {
				ll c=y+(1LL<<z);
				if(c<=hatv && (x-big_len*c-small_len*(c*(c+1))/2)>=0) y=c;
			}
			
			if(y!=hatv) {
				/*cerr<<y<<"\n";
				cerr<<x<<"\n";
				cerr<<big_len+small_len*1<<"\n";*/
				x-=big_len*y+small_len*(y*(y+1))/2;
				
				ll pre=0, num=0, ennyi=0;
				for(ll i=9, j=1, k=1;;i*=10, j++, k*=10) {
					pre+=i*j;
					if(pre>=x) {
						pre-=i*j;
						num=k+(x-pre)/j;
						ennyi=(x-pre)%j;
						break ;
					}
				}
				//cerr<<num<<" "<<ennyi<<"\n";
				vector<int> jegyek;
				while(num>0) {
					jegyek.pb(num%10);num/=10;
				}
				reverse(all(jegyek));
				cout<<jegyek[ennyi]<<"\n";
				
				//cerr<<x<<"/"<<(big_len+(y+1)*small_len)<<"\n";
				break ;
			}

			x-=big_len*hatv+small_len*(hatv*(hatv+1))/2;
			big_len+=small_len*hatv;
			hatv*=10;
			small_len++;
			
		}
		/*
		cerr<<hatv<<" "<<big_len<<" "<<small_len<<"\n";
		cerr<<x<<"\n"; 
		cerr<<"\n";*/
	}
	return 0;
}
