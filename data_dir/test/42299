#include <bits/stdc++.h>
#define base 1000000007LL
#define ll long long
#define X first
#define Y second
#define pb push_back
#define EPS 1e-9
#define CLR(a) memset(a,0,sizeof(a))
#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; i++)
#define FORE(i,a,b) for(int i=(a),_b=(b); i>=_b; i--)
using namespace std;
typedef pair<int, int> II;
typedef pair<II, ll> III;

struct Point {
    double x, y;
    Point() {}
	Point(double x, double y) : x(x), y(y) {}
	Point(const Point& p) : x(p.x), y(p.y) {}
	bool operator < (const Point& rhs) const {return make_pair(y, x) < make_pair(rhs.y, rhs.x);}
	bool operator == (const Point& rhs) const {return make_pair(y, x) == make_pair(rhs.y, rhs.x);}
	Point operator + (const Point& p) const {return Point(x + p.x, y + p.y);}
	Point operator - (const Point& p) const {return Point(x - p.x, y - p.y);}
	Point operator * (double c) const {return Point(x * c, y * c);}
	Point operator / (double c) const {return Point(x / c, y / c);}
};

// vi tri tuong doi cua q so voi duong thang tu origin den p
double cross(Point p, Point q) {return p.x * q.y - p.y * q.x;}
double dot(Point p, Point q) {return p.x * q.x + p.y * q.y;}
// khoang cach
double dist(Point p, Point q) {return sqrt(dot(p - q, p - q));}
// giao diem
Point Intersection(Point a, Point b, Point c, Point d) {
	b = b - a; d = c - d; c = c - a;
	return a + b * cross(c, d) / cross(b, d);
}

vector<Point> poly;
int n, m;

int main()
{
    ios::sync_with_stdio(0);
    //freopen("inp.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    cin >> n >> m;
    FOR(i,0,n-1) {
        Point p;
        cin >> p.x >> p.y;
        poly.pb(p);
    }
    while (m--) {
        Point a, b;
        cin >> a.x >> a.y >> b.x >> b.y;
        vector<pair<Point, int> > vp;
        FOR(i,0,n-1) {
            Point u = poly[i], v = poly[(i+1) % n], w = poly[(i+n-1) % n];
            if (cross(u-a, b-a) * cross(v-a,b-a) < 0) {
                Point p = Intersection(a,b,u,v);
                if (cross(u-a, b-a) > 0) vp.pb(make_pair(p, 2));
                else vp.pb(make_pair(p, -2));
            }
            if (fabs(cross(u-a, b-a)) < EPS) {
                int r = 0;
                if (cross(w-a, b-a) > EPS) r++;
                else if (cross(w-a, b-a) < -EPS) r--;
                if (cross(v-a, b-a) > EPS) r--;
                else if (cross(v-a, b-a) < -EPS) r++;
                vp.pb(make_pair(u, r));
            }
        }
        sort(vp.begin(), vp.end());
        double res = 0;
        int g = 0;
        for (int i = 0; i < vp.size(); i++) {
            g += vp[i].Y;
            if (g) res += dist(vp[i].X, vp[(i+1)%n].X);
        }
        cout << fixed << setprecision(9) << res << endl;
    }
    return 0;
}
