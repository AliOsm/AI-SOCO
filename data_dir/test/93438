#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <random>
#include <ctime>

using namespace std;

int mod;

struct mint {
  int n;
  mint(int n_ = 0) : n(n_) {}
};

mint operator+(mint a, mint b) { return (a.n += b.n) >= mod ? a.n - mod : a.n; }
mint operator-(mint a, mint b) { return (a.n -= b.n) < 0 ? a.n + mod : a.n; }
mint operator*(mint a, mint b) { return 1LL * a.n * b.n % mod; }
mint &operator+=(mint &a, mint b) { return a = a + b; }
mint &operator-=(mint &a, mint b) { return a = a - b; }
mint &operator*=(mint &a, mint b) { return a = a * b; }
ostream &operator<<(ostream &o, mint a) { return o << a.n; }

mint modpow(mint a, long long b) {
  mint res = 1;
  while (b > 0) {
    if (b & 1) res *= a;
    a *= a;
    b >>= 1;
  }
  return res;
}

bool is_prime(long long n) {
  for (long long i = 2; i * i <= n; i++) {
    if (n % i == 0) return false;
  }
  return n >= 2;
}

vector<mint> zeta(vector<mint> a) {
  const int n = a.size();
  for (int i = 1; i < n; i++) {
    for (int j = i * 2; j < n; j += i) {
      a[i] += a[j];
    }
  }
  return a;
}

vector<mint> mobius(vector<mint> a) {
  const int n = a.size();
  for (int i = n - 1; i >= 1; i--) {
    for (int j = i * 2; j < n; j += i) {
      a[i] -= a[j];
    }
  }
  return a;
}

int main() {
  mt19937 mt(time(NULL));
  vector<long long> prs;
  for (int i = 0; i < 3; i++) {
    for (;;) {
      const int inf = 1e8;
      int p = uniform_int_distribution<int>(inf, inf * 2)(mt);
      if (is_prime(p)) {
        prs.push_back(p);
        break;
      }
    }
  }

  int n;
  cin >> n;
  vector<mint> a(300001);
  for (int i = 0; i < n; i++) {
    int x;
    scanf("%d", &x);
    a[x].n++;
  }
  int r = min(20, n + 1);
  int l = 0;
  auto check = [&](int k) {
    auto b = zeta(a);
    for (int i = 0; i <= 300000; i++) {
      b[i] = modpow(b[i], k);
    }
    b = mobius(b);
    return b[1].n != 0;
  };
  while (r - l > 1) {
    int m = (l + r) / 2;
    bool all = true;
    for (int i = 0; i < 3; i++) {
      mod = prs[i];
      all &= check(m);
    }
    if (all) {
      r = m;
    } else {
      l = m;
    }
  }
  if (r == min(20, n + 1)) {
    cout << -1 << endl;
  } else {
    cout << r << endl;
  }
}

