#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
#define ll long long int
#define ld long double
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
const ll M=500005;
std::vector<ll> vtr[M];
std::vector<ll> eu;
ll st[M],en[M],t=0;
ll Max[4*M],Set[4*M];
void dfs(ll x,ll p=0)
{
	eu.pb(x);
	st[x]=t;
	t++;
	for(ll i=0;i<vtr[x].size();i++)
	{
		if(vtr[x][i]!=p)
		{
			dfs(vtr[x][i],x);
		}
	}
	en[x]=t-1;
}
void update(ll i,ll s,ll e,ll l,ll r,ll x)
{
	if(s>r || l>e)
		return;
	if(s>=l && e<=r)
	{
		Set[i]=x;
		return;
	}
	ll m=(s+e)/2;
	update(2*i,s,m,l,r,x);
	update(2*i+1,m+1,e,l,r,x);
}
void updateM(ll i,ll s,ll e,ll x,ll y)
{
	Max[i]=y;
	ll m=(s+e)/2;
	if(s==e)
		return;
	if(x<=m)
		updateM(2*i,s,m,x,y);
	else
		updateM(2*i+1,m+1,e,x,y);
}
ll getmx(ll i,ll s,ll e,ll x)
{
	ll m=(s+e)/2;
	if(s==e)
		return Set[i];
	if(x<=m)
		return max(getmx(2*i,s,m,x),Set[i]);
	else
		return max(getmx(2*i+1,m+1,e,x),Set[i]);
}
ll getMx(ll i,ll s,ll e,ll l,ll r)
{
	if(s>r || l>e)
		return 0;
	if(s>=l && e<=r)
	{
		return Max[i];
	}
	ll m=(s+e)/2;
	return max(getMx(2*i,s,m,l,r),getMx(2*i+1,m+1,e,l,r));
}
int main()
{
	ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
	ll n,q,i,u,v,type;
	cin>>n;
	for(i=1;i<n;i++)
	{
		cin>>u>>v;
		vtr[u].pb(v);
		vtr[v].pb(u);
	}
	dfs(1);
	cin>>q;
	for(i=1;i<=q;i++)
	{
		cin>>type>>v;
		if(type==1)
		{
			update(1,0,n-1,st[v],en[v],i);
		}
		if(type==2)
		{
			updateM(1,0,n-1,st[v],i);
		}
		if(type==3)
		{
			ll prt=getmx(1,0,n-1,st[v]);
			ll chd=getMx(1,0,n-1,st[v],en[v]);
			if(prt>chd)
				cout<<1<<"\n";
			else
				cout<<0<<"\n";
		}
	}
	return 0;
}