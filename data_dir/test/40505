#include <bits/stdc++.h>
#define int long long
using namespace std;
vector<vector<int> >v;
map<int,int> vis;

int tim=0;
int st[100005],en[100005];
int l=20;
int up[100005][25];
int parent[100005];
int ans[100005];
map<pair<int,int> ,int>road;
int res[100005];

void dfs(int i,int p)
{
    vis[i]=1;
    st[i]=++tim;
    up[i][0]=p;
    parent[i]=p;
    for (int j = 1; j <=l ; ++j) {
        up[i][j]=up[up[i][j-1]][j-1];
    }

    for(auto j:v[i])
    {
        if(vis[j]==0)
            dfs(j,i);
    }

    en[i]=++tim;

}

int dfs2(int i,int p)
{
    for(auto j:v[i])
    {
        if(j!=p)
        {
            ans[i]+=dfs2(j,i);
        }
    }
    if(i!=0)
        res[road[{i,p}]]=ans[i];
    return ans[i];
}

bool ance(int i,int j)
{
    if(st[i]<=st[j] && en[i]>=en[j])
        return true;

    return false;
}

int lca(int i,int j)
{
    int x=l;
    if(ance(i,j))
        return i;

    else if(ance(j,i))
        return j;

    while (x>=0)
    {
        if(ance(up[i][x],j))
        {
            x--;
        }
        else
        {
            i=up[i][x];
            x--;
        }
    }

    return up[i][0];

}

signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n;
    cin>>n;

    v.resize(n);

    int x,y;
    for (int i = 0; i < n-1; ++i) {
        cin>>x>>y;
        x--;
        y--;
        road[{x,y}]=i;
        road[{y,x}]=i;
        v[x].push_back(y);
        v[y].push_back(x);
    }

    dfs(0,0);

    int q;
    cin>>q;
    int z=q;
    while (q--)
    {
        cin>>x>>y;
        x--;
        y--;
        int pr=lca(x,y);
        ans[x]++;
        ans[y]++;
        ans[pr]-=2;
    }

    dfs2(0,0);

    for (int i = 0; i < n-1; ++i) {
        cout<<res[i]<<" ";
    }

}