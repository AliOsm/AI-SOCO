#include <sstream>
#include <fstream>
#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cstring>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <utility>
#include <cassert>
#include <bitset>
using namespace std;
#define REP(I,N) for (I=0;I<N;I++)
#define rREP(I,N) for (I=N-1;I>=0;I--)
#define rep(I,S,N) for (I=S;I<N;I++)
#define rrep(I,S,N) for (I=N-1;I>=S;I--)
#define FOR(I,S,N) for (I=S;I<=N;I++)
#define rFOR(I,S,N) for (I=N;I>=S;I--)

#define DEBUG
#ifdef DEBUG
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define deputs(str) fprintf(stderr, "%s\n",str)
#else
#define debug(...)
#define deputs(str)
#endif // DEBUG
typedef unsigned long long ULL;
typedef unsigned long long ull;
typedef long long LL;
typedef long long ll;
const int INF=0x3f3f3f3f;
const LL INFF=0x3f3f3f3f3f3f3f3fll;
const LL M=998244353;
const LL maxn=2e5+7;
const double pi=acos(-1.0);
const double eps=0.00000001;
LL gcd(LL a, LL b) {return b?gcd(b,a%b):a;}
template<typename T>inline T abs(T a) {return a>0?a:-a;}
template<typename T>inline T powMM(T a, T b) {
    T ret=1;
    for (; b; b>>=1ll,a=(LL)a*a%M)
        if (b&1) ret=(LL)ret*a%M;
    return ret;
}

char S[maxn];
const int N=5;
struct matrix{
    int A[N][N];
    matrix(){
        memset(A,0,sizeof(A));
    }
}A[maxn<<2],mat[10];
matrix trans(matrix A,matrix B){
    matrix C;int i,j,k;
    REP(i,N) REP(j,N){
        C.A[i][j]=INF;
        REP(k,N) C.A[i][j]=min(C.A[i][j],A.A[i][k]+B.A[k][j]);
    }
    return C;
}
void build(int x,int L,int R){
    if (L==R){
        A[x]=mat[S[L]-'0'];
        return;
    }int mid=(L+R)/2;
    build(x<<1,L,mid);
    build(x<<1|1,mid+1,R);
    A[x]=trans(A[x<<1],A[x<<1|1]);
}
matrix query(int x,int l,int r,int L,int R){
    if (l<=L&&R<=r) return A[x];
    int mid=(L+R)/2;
    if (r<=mid) return query(x<<1,l,r,L,mid);
    if (mid<l) return query(x<<1|1,l,r,mid+1,R);
    return trans(query(x<<1,l,r,L,mid),query(x<<1|1,l,r,mid+1,R));
}
int TaskA(){
    int n,q,i,j;
    scanf("%d%d",&n,&q);
    scanf("%s",S+1);
    build(1,1,n);
    while (q--){
        int l,r;
        scanf("%d%d",&l,&r);
        matrix ans=query(1,l,r,1,n);
        if (ans.A[0][4]>=INF) puts("-1");
        else printf("%d\n",ans.A[0][4]);
    }
    return 0;
}
void initialize(){
    int i,j,k;
    REP(i,10) REP(j,N) REP(k,N) mat[i].A[j][k]=INF;
    REP(i,10) REP(j,N) mat[i].A[j][j]=0;
    mat[2].A[0][0]=1;mat[2].A[0][1]=0;//0:nothing
    mat[0].A[1][1]=1;mat[0].A[1][2]=0;//1:2
    mat[1].A[2][2]=1;mat[1].A[2][3]=0;//2:0
    mat[7].A[3][3]=1;mat[7].A[3][4]=0;//3:1
    mat[6].A[3][3]=1;mat[6].A[4][4]=1;//4:6
}
int main() {
	int startTime=clock();
	//initialize
	initialize();
	debug("/--- initializeTime: %ld milliseconds ---/\n",clock()-startTime);
	int T=1;
//	scanf("%d",&T);
	startTime=clock();
	while (T--) TaskA();
	debug("/--- computeTime: %ld milliseconds ---/\n",clock()-startTime);
}
/*
*/
