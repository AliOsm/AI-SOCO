#pragma comment(linker,"/STACK:1000000000,1000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <memory.h>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>

using namespace std;

/* Constants begin */
const long long inf = 1e18+7;
const long long mod = 1000000009;
const double eps = 1e-12;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(), (a).end()
#define forn(i,n) for (int (i)=0;(i)<(ll)(n);(i)++)
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
/* Defines end */

int f[1<<24], g[1<<24];
int dd[24][24], ddd[24];
int n;

struct pt{
    int x, y;
} a[24], b;

int bad;

inline int d(pt a, pt b){
    return sqr(a.x-b.x)+sqr(a.y-b.y);
}

int go(ll mask){
    if(f[mask] != bad) return f[mask];
    int &res = f[mask], l = 0;
    int start = mask;
    while(~mask & (1 << l)) l++;
    mask ^= 1 << l;
    int buf = go(mask);
    res = buf+ddd[l]+ddd[l];
    g[start] = mask;
    for(ll i=l+1;i<n;i++) if(mask & (1 << i)){
     ll nmask = mask ^ (1 << i);
     buf = go(nmask);
     if(res > buf+ddd[l]+ddd[i]+dd[i][l]){
      res = buf+ddd[l]+ddd[i]+dd[i][l];
      g[start] = nmask;
     }
    }
    return res;
}

int main(void) {
    #ifndef ONLINE_JUDGE
        freopen("input.txt","rt",stdin);
        freopen("output.txt","wt",stdout);
    #endif
    scanf("%d%d",&b.x,&b.y);
    scanf("%d",&n);
    forn(i,n) scanf("%d%d",&a[i].x,&a[i].y);
    forn(i,n) forn(j,n) dd[i][j] = d(a[i],a[j]);
    forn(i,n) ddd[i] = d(b,a[i]);
    memset(f,30,sizeof f);
    bad = f[0];
    f[0] = 0; g[0] = -1;
    ll mask = (1<<n)-1;
    printf("%d\n",go(mask));
    printf("0 ");
    while(true){
     ll nmask = g[mask];
     if(nmask == -1) break;
     ll x = __builtin_popcount(mask);
     ll y = __builtin_popcount(nmask);
     if(x == y+1){
      forn(i,n) if(mask & (1 << i) && ~nmask & (1 << i)){
       printf("%d 0 ",i+1);
       break;
      }
     } else {
      forn(i,n) if(mask & (1 << i) && ~nmask & (1 << i)){
       for(ll j=i+1;j<n;j++) if(mask & (1 << j) && ~nmask & (1 << j)){
        printf("%d %d 0 ",i+1,j+1);
        break;
       }
       break;
      }
     }
     mask = nmask;
    }
    printf("\n");
    return 0;
}
