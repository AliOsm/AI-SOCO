#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <vector>
#include <chrono>
#include <typeinfo>
#include <string>
#include <map>
#include <unordered_map>
using namespace std;
typedef long long mt;

#define rep(a, b, i) for(mt i = a; i < b; ++i)
#define repe(a, b, i) for(mt i = a; i <= b; ++i)
#define repd(a, b, i) for(mt i = a; i > b; --i)
#define repde(a, b, i) for(mt i = a; i >= b; --i)

#define INF 2000100100ll
#define N 200150
#define M 1000500
#define K 17
#define P (K - 1)
#define MOD 998244353

mt sum(mt x) {
    mt m = 0;
    while(x) m += x % 10, x/=10;
    return m;
}

mt n;
int main() {
    scanf("%lld", &n);
    mt m = 0;
    while(m * 10 + 9 <= n) m = m * 10 + 9;
    printf("%lld\n", sum(m) + sum(n - m));
    
    return 0;
}

//class some {
//public:
//    void fun(int a ) {
//        puts("ahjcad");
//    }
//};

//typedef void (some::*f)(int);

// mt n, m, cnt1, answ = INF;
// vector<mt> g[N];
// mt dp[N][N][2][2];

//some *s = new some();
// f p = s->fun;

// scanf("%d %d", &n, &m);

// rep(0, n, i) {
//     g[i].resize(m);
//     rep(0, m, j) scanf("%d", &g[i][j]), cnt1 += g[i][j];
// }


// rep(0, m, k) {
//     rep(0, n, i) {
//         mt cnt_1 = 0;
//         rep(i, n, j) {
//             cnt_1 += g[j][k];

//             mt recomp = -cnt_1 + j - i + 1 - cnt_1;
//             dp[i][j][0][k & 1] = k ? min(dp[i][j][0][k - 1 & 1], dp[i][j][1][k - 1 & 1]): cnt1;
//             dp[i][j][1][k & 1] = (k ? min(dp[i][j][1][k - 1 & 1], cnt1): cnt1) + recomp;
//         }
//     }
// }
// rep(0, n, i) {
//     rep(i, n, j) {
//         rep(0, K, l)
//         answ = min(answ, dp[i][j][l][m - 1 & 1]);
//     }
// }
// printf("%d\n", answ);


// auto beg = std::chrono::steady_clock::now();

// rep(0, N, i)
//     val[i] = 1000000.0;
// rep(0, N, i) {
//     rep(0, N, j) {
//         sum += val[i] * val[j];
//     }
// }
// printf("%f\n", sum);

// auto end = std::chrono::steady_clock::now();
//sfloat dt = (std::chrono::duration_cast<std::chrono::milliseconds>(end - beg)).count();
// printf("dt = %f\n", dt);

// 0 - не беру, полосу еще не начинал
// 1 - не беру, полоса уже была окончена
// 2 - беру, полоса еще не была закончена

//#include <iostream>
//#include <cstdio>
//#include <algorithm>
//#include <cstring>
//#include <vector>
//#include <chrono>
//using namespace std;
//typedef int mt;
//
//#define rep(a, b, i) for(mt i = a; i < b; ++i)
//#define repe(a, b, i) for(mt i = a; i <= b; ++i)
//#define repd(a, b, i) for(mt i = a; i > b; --i)
//#define repde(a, b, i) for(mt i = a; i >= b; --i)
//
//#define INF 2000100100ll
//#define N 250
//#define M 1000500
//#define K 3
//#define P 5
//
//mt n, m, cnt1, answ = INF;
////mt g[M], dp[M][K];
//vector<mt> g[N], dp[N][N][3];
//
//
////0 - не беру, полосу еще не начинал
////1 - не беру, полоса уже была окончена
////2 - беру, полоса еще не была закончена
//int main() {
//    scanf("%d %d", &n, &m);
//
//    rep(0, n, i) {
//        g[i].resize(m);
//        rep(0, m, j) scanf("%d", &g[i][j]), cnt1 += g[i][j];
//    }
//
//    auto beg = std::chrono::steady_clock::now();
//    auto end = std::chrono::steady_clock::now();
//    auto d = (end - beg);
//    float dt = (std::chrono::duration_cast<std::chrono::milliseconds>(end - beg)).count();
//
//
//    rep(0, n, i) {
//        rep(i, n, j) {
//            rep(0, K, l)
//            dp[i][j][l].resize(m);
//        }
//    }
//
//    // dp[0][0][0][0] = cnt1;
//    // dp[0][0][1][0] = cnt1;
//    // dp[0][0][2][0] = cnt1 + (g[0][0] ? -1 : 1);
//
//    rep(0, m, k) {
//        rep(0, n, i) {
//            mt cnt_1 = 0;
//            rep(i, n, j) {
//                // if(i == 0 && j == 0 && k == 0) continue;
//                cnt_1 += g[j][k];
//
//                mt recomp = -cnt_1 + j - i + 1 - cnt_1;
//                dp[i][j][0][k] = cnt1;//dp[i - 1][j][0][k];
//                dp[i][j][1][k] = k ? min(dp[i][j][1][k - 1], dp[i][j][2][k - 1]): cnt1;
//                dp[i][j][2][k] = (k ? min(dp[i][j][2][k - 1], dp[i][j][0][k - 1]): cnt1) + recomp;
//            }
//        }
//    }
//    rep(0, n, i) {
//        rep(i, n, j) {
//            rep(0, K, l)
//            answ = min(answ, dp[i][j][l][m - 1]);
//        }
//    }
//    printf("%d\n", answ);
//
//    return 0;
//}
//
