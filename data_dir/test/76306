/*input
6 7 1 6
1 2 2
1 3 10
2 3 7
2 4 8
3 5 3
4 5 2
5 6 1

*/
#ifdef UncleGrandpa
#include <prettyprint.hpp>
#endif
#include <bits/stdc++.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define int long long
#define loop(i,l,r) for(int i=(l); i<=(r); i++)
#define rloop(i,l,r) for(int i=(l); i>=(r); i--)
#define debug(x...) {cout << "[" << #x << "] ="; _co(x);}
void _co() {cout << endl;}
template<typename T, typename... Ts> void _co(const T& value, const Ts&... values) {cout << ' ' << value; _co(values...);}
template<typename T, typename... Ts> void co(const T& value, const Ts&... values) {cout << "deb: " << value; _co(values...);}
// change cout to cerr for debug in crash
const int N = 1e5 + 5;
const int mod = 1535634563;
int n, m, S, T;

int ways[2][N]; int dis[2][N];

void dijkstra(int sta, int en, int wh, vector<vector<pair<int, int> > > &e) {
	fill(ways[wh], ways[wh] + N, 0); fill(dis[wh], dis[wh] + N, 1e18);
	priority_queue<pair<int, int> , vector<pair<int, int> >, greater<pair<int, int> > > pq;
	ways[wh][sta] = 1; dis[wh][sta] = 0;
	pq.push({dis[wh][sta], sta});
	while (!pq.empty()) {
		auto [d, u] = pq.top(); pq.pop();
		if (d != dis[wh][u]) continue;
		for (auto [v, c] : e[u]) {
			if (dis[wh][v] > dis[wh][u] + c) {
				dis[wh][v] = dis[wh][u] + c;
				ways[wh][v] = ways[wh][u];
				pq.push({dis[wh][v], v});
			}
			else if (dis[wh][v] == dis[wh][u] + c) {
				ways[wh][v] = (ways[wh][v] + ways[wh][u]) % mod;
			}
		}
	}
}

vector<vector<pair<int, int> > > a(N), ra(N);
vector<tuple<int, int, int> > e;
signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n >> m >> S >> T;
	loop(i, 1, m) {
		int u, v, c;
		cin >> u >> v >> c;
		a[u].push_back({v, c});
		ra[v].push_back({u, c});
		e.push_back({u, v, c});
	}
	dijkstra(S, T, 0, a);
	dijkstra(T, S, 1, ra);
	int nways = ways[0][T]; int ndis = dis[0][T];
	for (auto &[u, v, c] : e) {
		int curCost = dis[0][u] + c + dis[1][v];
		if (curCost == ndis && 1LL * ways[0][u]*ways[1][v] % mod == nways) {
			cout << "YES" << endl;
			continue;
		}
		else {
			int res = curCost - ndis + 1;
			if (res >= c) cout << "NO" << endl;
			else cout << "CAN " << res << endl;
		}
	}
}
