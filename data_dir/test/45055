#include <algorithm>
#include <iostream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <numeric>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define endl '\n'
#define F first
#define S second
#define mp make_pair
#define ll long long
#define pb push_back
#define pii pair < int, int >
#define type(x) __typeof(x.begin())
#define foreach(i, x) for(type(x) i = x.begin(); i != x.end(); i++)
#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define sol (root << 1)
#define sag (sol | 1)
#define orta ((bas + son) >> 1)
#define bit __builtin_popcount

#ifndef D
	#define dbgs(x) 0
	#define dbg(x) 0
	#define TIME 0
#else
	#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
	#define dbg(x) cerr << (#x) << " --> " << (x) << endl
	#define TIME cerr << fixed << setprecision(2) << "Tooks " << (double) clock() / CLOCKS_PER_SEC << " seconds." << endl
#endif

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 1e5 + 5;

const int SQRT = sqrt(N);

const int LOG = 18;

int n, m, x, y, c, lca[LOG][N], dep[N], mn[N];

bool h[N];

vector < int > v[N], red;

void dfs(int root, int x, int t) {

	lca[0][x] = root;

	dep[x] = t;

	foreach(it, v[x])
		if(*it != root)
			dfs(x, *it, t + 1);

}

int get(int x, int y) {

	if(dep[x] < dep[y])
		swap(x, y);

	ROF(i, LOG - 1, 0)
		if(dep[lca[i][x]] >= dep[y])
			x = lca[i][x];

	if(x == y)
		return x;

	ROF(i, LOG - 1, 0)
		if(lca[i][x] != lca[i][y])
		{
			x = lca[i][x];
			y = lca[i][y];
		}

	return lca[0][x];

}

int dist(int x, int y) {

	return dep[x] + dep[y] - dep[get(x, y)] * 2;

}

int main () {

	ios :: sync_with_stdio(0);
	
	cin >> n >> m;

	FOR(i, 1, n)
		mn[i] = inf;

	FOR(i, 1, n - 1)
	{
		cin >> x >> y;

		v[x].pb(y);
		v[y].pb(x);
	}

	dfs(0, 1, 1);

	FOR(i, 1, LOG - 1)
		FOR(j, 1, n)
			lca[i][j] = lca[i - 1][lca[i - 1][j]];

	red.pb(1);

	FOR(i, 1, m)
	{
		cin >> c >> x;

		if(i % SQRT == 0)
		{
			pii cur;

			queue < pii > Q;

			memset(h, 0, sizeof(h));

			foreach(it, red)
			{
				Q.push(mp(*it, 0));

				h[*it] = 1;
			}

			while(!Q.empty())
			{
				cur = Q.front();

				Q.pop();

				mn[cur.F] = min(mn[cur.F], cur.S);

				foreach(it, v[cur.F])
					if(!h[*it])
					{
						Q.push(mp(*it, cur.S + 1));

						h[*it] = 1;
					}
			}

			red.clear();
		}

		if(c == 1)
		{
			red.pb(x);

			continue;
		}

		if(c == 2)
		{
			foreach(it, red)
				mn[x] = min(mn[x], dist(x, *it));

			cout << mn[x] << endl;
		}
	}

	TIME;
	
	return 0;

}
