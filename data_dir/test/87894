#define _CRT_SECURE_NO_DEPRECATE
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <cmath>
#ifndef __GNUC__
#include <intrin.h>
#endif // !__GNUC__
#include <bitset>
#include <random>
#include <vector>
#include <cstdio>
#include <string>
#include <cstdlib>
#include <numeric>
#include <cstring>
#include <complex>
#include <cassert>
#include <iterator>
#include <iostream>
#include <algorithm>
#include <functional>

int bsf(int x) {
#ifdef __GNUC__
    return __builtin_ctz(x);
#else
    unsigned long i;
    _BitScanForward(&i, x);
    return i;
#endif
}
int bsr(int x) {
#ifdef __GNUC__
    return 31 - __builtin_clz(x);
#else
    unsigned long i;
    _BitScanReverse(&i, x);
    return i;
#endif
}

using namespace std;
typedef long long int64;
const double pi = 3.14159265358979323846;
const int inf = (int)2e+9 + 2;
const int mod = (int)1e+9 + 7;
const double eps = 1e-8;
const int N = 100000;

int n, m, k;
map<string, int> mp;
int mn[N];
int c[N];
int p[N];

int find(int x)
{
    if (x == p[x])
        return x;
    return x = find(p[x]);
}

void solve()
{
    cin >> n >> k >> m;
    for (int i = 0; i < n; ++i) {
        string s; cin >> s;
        mp.emplace(s, i);
        p[i] = i;
    }
    for (int i = 0; i < n; ++i)
        cin >> c[i];
    for (int i = 0; i < k; ++i) {
        int x; cin >> x;
        int v; cin >> v;
        --v;
        for (int j = 1; j < x; ++j) {
            int v1; cin >> v1;
            --v1;
            if (c[v1] > c[v])
                p[v1] = v;
            else {
                p[v] = v1;
                v = v1;
            }
        }
    }
    int64 ans = 0;
    for (int i = 0; i < m; ++i) {
        string s; cin >> s;
        ans += c[find(p[mp[s]])];
    }
    cout << ans;
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);
    int test = 1;
    //cin >> test;
    for (; test; --test)
        solve();
    return 0;
}