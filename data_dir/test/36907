#include<cstdio>
#include<iostream>
#include<cstring>
#define ll long long
#define p1 id<<1
#define p2 (id<<1)^1
using namespace std;
int n,m;
ll a[200005];
ll tree[850000],add[850000];
char s[25];
void update(int id,int l,int r,int x,int y,int z)
{
    if(x<=l&&r<=y)
    {
        add[id]=add[id]+(ll)(z);
        return;
    }
    add[p1]+=add[id];
    add[p2]+=add[id];
    add[id]=0;
    int mid=(l+r)/2;
    if(y<=mid) update(p1,l,mid,x,y,z);
    else
    if(x>mid) update(p2,mid+1,r,x,y,z);
    else
    {
        update(p1,l,mid,x,mid,z);
        update(p2,mid+1,r,mid+1,y,z);
    }
    tree[id]=min(tree[p1]+add[p1],tree[p2]+add[p2]);
}
ll lookup(int id,int l,int r,int x,int y)
{
    if(x<=l&&r<=y) return tree[id]+add[id];
    add[p1]+=add[id];
    add[p2]+=add[id];
    add[id]=0;
    int mid=(l+r)/2;
    ll res=0;
    if(y<=mid) res=lookup(p1,l,mid,x,y);
    else
    if(x>mid) res=lookup(p2,mid+1,r,x,y);
    else res=min(lookup(p1,l,mid,x,mid),lookup(p2,mid+1,r,mid+1,y));
    tree[id]=min(tree[p1]+add[p1],tree[p2]+add[p2]);
    return res;
}
void build(int id,int l,int r)
{
    if(l==r)
    {
        tree[id]=a[l];
        add[id]=0;
        return;
    }
    int mid=(l+r)/2;
    build(p1,l,mid);
    build(p2,mid+1,r);
    tree[id]=min(tree[p1],tree[p2]);
}
int main()
{
    cin>>n;
    for(int i=1;i<=n;i++) scanf("%I64d",&a[i]);
    build(1,1,n);
    cin>>m;
    for(int i=1;i<=m;i++)
    {
        int x,y,z,mark;
        char c;
        x=y=z=mark=0;
        z=0;
        scanf("%d%d",&x,&y);
        x++;y++;
        scanf("%c",&c);
        if(c==' ')
        {
            mark=1;
            scanf("%d",&z);
        }
        if(x<=y)
        {
            if(mark==0) printf("%I64d\n",lookup(1,1,n,x,y)); else update(1,1,n,x,y,z);
        }
        else
        {
            if(mark==0)
            {
                ll s1=lookup(1,1,n,x,n);
                ll s2=lookup(1,1,n,1,y);
                printf("%I64d\n",min(s1,s2));
            }
            else
            {
                update(1,1,n,x,n,z);
                update(1,1,n,1,y,z);
            }
        }
    }
    return 0;
}