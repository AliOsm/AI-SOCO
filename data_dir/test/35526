#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL_CHECK
#define trace(x) cerr << #x << ": " << x << " ";
#define trnl cerr << "\n";
#else
#define trace(x) {}
#define trnl {}
#endif
typedef long long lolo;
typedef unsigned long long ulolo;
typedef pair<int, int> pii;
#define R(i,n) for(int i=0;i<(n);++i)
#define F(i,a,b) for(int i=(a);i<(b);++i)
#define FS(i,a,b,s) for(int i=(a);i<(b);i+=(s))
#define FD(i,n) for(int i=(n-1);i>=0;--i)
#define FDS(i,n,s) for(int i=(n-1);i>=0;i-=(s))
#define SZ(x) ((int)(x).size())
#define ALL(x) (x).begin(),(x).end()
#define fi first
#define se second
#define M_PI           3.14159265358979323846

const int INF = 2e9 + 23;
const lolo MOD = 1e9 + 7;
const int N = 1e5 + 10;

vector<pair<double, int> > d[2];

double getMin() {
  R(i, 2) sort(ALL(d[i]));

  double best = min(d[0][0].fi, d[1][0].fi);
  if (SZ(d[0]) < 2) {
    return best;    
  }
  if (d[0][0].se != d[1][0].se) {
    best = min(best, d[0][0].fi + d[1][0].fi);
  } else {
    best = min(best, d[0][0].fi + d[1][1].fi);
    best = min(best, d[0][1].fi + d[1][0].fi);
  }
  return best;
}

double getDist(pii a, pii b) {
  int xd = a.fi - b.fi;
  int yd = a.se - b.se;
  return sqrt(xd*1LL*xd + yd*1LL*yd);
}

int main()
{
  ios_base::sync_with_stdio(0);
  pii a[3], cur;
  R(i, 3) cin >> a[i].fi >> a[i].se;

  int n; cin >> n;
  double sum = 0, temp[3];
  R(i, n) {
    cin >> cur.fi >> cur.se;
    R(j, 3) {
      temp[j] = getDist(a[j], cur);
      trace(i) trace(j) trace(temp[j]) trnl
    }
    sum += 2.0 * temp[2];
    R(j, 2) d[j].push_back({-temp[2] + temp[j], i});
  }
  sum += getMin();

  cout.precision(numeric_limits<double>::max_digits10);
  cout << fixed << sum << "\n";
  return 0;
}
// g++ -W -Wall -Wextra -pedantic -std=c++0x -o p main.cpp
