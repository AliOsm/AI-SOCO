#include<bits/stdc++.h>
using namespace std;
typedef pair<int, int> PII;

struct query {
    int type, x,y;
};

const int N = 2e5+7;
query qq[N];
int n;

set<PII> ft[N];
int invmpy[N];

void add(int x, int y) {
    for (int idx = y; idx <=n; idx += idx & -idx ) {
        ft[idx].insert({x, y});
    }
}

void rem(int x, int y) {
    for (int idx = y; idx <=n; idx += idx & -idx ) {
        ft[idx].erase({x, y});
    }
}

void find(int x, int y) {
    PII bad = {-1e9+7, -1e9+7};
    PII ans = bad;
    for (int idx = y; idx>0; idx -= idx & -idx ) {
        auto it = ft[idx].upper_bound({x, y});
        if (it == ft[idx].begin())  continue;
        it--;
        ans = max(ans, *it);
    }
    if (ans == bad) cout<<-1<<"\n";
    else            cout<<-ans.first<<" "<<invmpy[ans.second]<<"\n";
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int q;
    cin>>q;

    map<int, int> mpy;

    for (int i=1; i<=q; i++) {
        string s;
        cin>>s>>qq[i].x>>qq[i].y;
        if (s[0] == 'a')    qq[i].type = 1;
        else if (s[0] == 'r')    qq[i].type = 2;
        else if (s[0] == 'f')    qq[i].type = 3;
        if (s[0] != 'f')    mpy[qq[i].y] = 0;
    }

    n = mpy.size();
    int cnty = mpy.size();
    for (auto &pr: mpy) {
        pr.second = cnty;
        invmpy[cnty] = pr.first;
        cnty--;
    }
    assert(!cnty);

    for (int i=1; i<=q; i++) {
        if (qq[i].type == 1)        add(-qq[i].x, mpy[qq[i].y]);
        else if (qq[i].type == 2)   rem(-qq[i].x, mpy[qq[i].y]);
        else {
            auto it = mpy.upper_bound(qq[i].y);
            if (it == mpy.end())    cout<<-1<<"\n";
            else find(-qq[i].x-1, it->second);
        }
    }
}
