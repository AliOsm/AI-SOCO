#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define ll long long
#define mp make_pair
#define f first
#define s second
#define pii pair < int, int >
#define pll pair < ll, ll >
#define all(s) s.begin(), s.end()
#define sz(s) (int) s.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define vi vector < int >

const int inf = (int)1e9;
const int mod = (int) 1e9 + 7;

int n;
int a[200200];
vector < int > g[200200];
ll sum_child[200200];
bool was_sum_child[200200];
ll max_ans = -inf*1ll*inf;

bool was[200200];
ll dp[200200];

ll child_sum(int v, int pr = -1){
    ll &res = sum_child[v];
    if (was_sum_child[v]) return res;
    was_sum_child[v] = true;
    res = a[v];
    forit(it, g[v]){
        int to = *it;
        if (to == pr) continue;
        res += child_sum(to, v);
    }
    return res;
}

ll getmax(int v, int p){
    ll &res = dp[v];
    if (was[v]) return res;
    was[v] = true;
    res = child_sum(v, p);
    forit(it, g[v]){
        int to = *it;
        if (to == p) continue;
        res = max(res, getmax(to, v));
    }
    return res;
}

void calc(int v, int p, ll max_from_top){
    ll maxi1 = -inf*1ll*inf;
    ll maxi2 = -inf*1ll*inf;
    max_ans = max(max_ans, max_from_top + getmax(v, p));
    forit(it, g[v]){
        int to = *it;
        if (to == p) continue;
        ll cur = getmax(to, v);
        max_ans = max(max_ans, max_from_top + cur);
        if (cur > maxi1) {
            maxi2 = maxi1;
            maxi1 = cur;
        }
        else if (cur > maxi2) maxi2 = cur;
    }

    forit(it, g[v]){
        int to = *it;
        if (to == p) continue;
        ll cur = getmax(to, v);
        if (cur != maxi1) {
            max_ans = max(max_ans, maxi1 + cur);
            calc(to, v, max(max_from_top, maxi1));
        } else {
            max_ans = max(max_ans, maxi2 + cur);
            calc(to, v, max(max_from_top, maxi2));
        }
    }
}

int main () {
    scanf("%d", &n);
    for (int i=1;i<=n;i++) scanf("%d", &a[i]);
    for (int i=1;i<=n-1;i++){
        int x, y;
        scanf("%d%d", &x, &y);
        g[x].pb(y);
        g[y].pb(x);
    }

    calc(1, -1, -inf*1ll*inf);
    if (max_ans > -1ll*(ll)1e16){
        cout <<max_ans<<endl;
    } else{
        cout <<"Impossible"<<endl;
    }

    return 0;
}
