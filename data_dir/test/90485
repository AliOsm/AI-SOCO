#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

const int mod = 1e9 + 7;

class Matrix
{
public:
    vector<vector<int>> mat;
    unsigned int rows, cols;
    Matrix(vector<vector<int>> mat)
    {
        this->mat = mat;
        rows = mat.size();
        cols = mat[0].size();
    }
    Matrix(int n, int m)
    {
      this->rows = n;
      this->cols = m;
      this->mat = vector<vector<int>>(n);
      for(int i = 0; i < n; i++)
        this->mat[i] = vector<int>(m);
    }

    Matrix operator * (Matrix &other)
    {
        vector<vector<int>> ret(rows, vector<int>(other.cols));
        for(int i = 0; i < rows; i++)
        {
            for(int j = 0; j < other.cols; j++)
            {
                int sum = 0;
                for(int k = 0; k < cols; k++)
                {
                    sum = (sum + 1ll * mat[i][k] * other.mat[k][j]) % mod;
                }
                ret[i][j] = sum;
            }
        }
        return Matrix(ret);
    }

    static Matrix identity_matrix(int n)
    {
        vector<vector<int>> ret(n, vector<int>(n));
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(i == j)
                    ret[i][j] = 1;
                else
                    ret[i][j] = 0;
            }
        }
        return Matrix(ret);
    }

    static Matrix fast_exponentiation(Matrix m, ll power)
    {
        Matrix ret = Matrix::identity_matrix(m.rows);
        while(power)
        {
            if(power & 1)
                ret = ret * m;
            m = m * m;
            power >>= 1;
        }
        return ret;
    }
};

int freq[105];

int main()
{
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  // freopen("input.txt", "r", stdin);
  // freopen("output.txt", "w", stdout);
  int n, b, k, x;
  while (cin >> n >> b >> k >> x)
  {
    memset(freq, 0, sizeof freq);
    Matrix mat1(x, 1);
    Matrix mat2(x, x);
    for(int i = 1; i <= n; i++)
    {
      int a;
      cin >> a;
      freq[a % x]++;
    }
    for(int i = 0; i < x; i++)
      mat1.mat[i][0] = freq[i];
    for(int i = 0; i < x; i++)
    {
      for(int j = 0; j < x; j++)
      {
        int need = (j * 10 - i + x) % x;
        mat2.mat[i][j] = freq[(-need + x) % x];
      }
    }
    mat2 = Matrix::fast_exponentiation(mat2, b - 1);
    mat1 = mat2 * mat1;
    cout << mat1.mat[k][0] << '\n';
  }
  return 0;
}
