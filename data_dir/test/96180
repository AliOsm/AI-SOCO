/*
digu_J - Digvijay Janartha
NIT Hamirpur - INDIA
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

template < typename T > using ordered_set = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;
template < typename T > using MinPriorityQueue = priority_queue < T, vector < T >, greater < T > >;

#ifndef ONLINE_JUDGE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template < typename Arg1 >
void __f(const char* name, Arg1&& arg1) {
    cout << name << " : " << arg1 << std :: endl;
}
template < typename Arg1, typename... Args >
void __f(const char* names, Arg1&& arg1, Args&&... args) {
    const char* comma = strchr(names + 1, ',');
    int len = comma - names;
    for (int i = 0; i < len; ++i) {
        cout << names[i];
    }
    cout <<  " : " << arg1 << " | ";
    __f(comma + 1, args...);
}
#else
#define trace(...)
#endif

typedef double db;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair < ll, ll > pll;
typedef pair < int, int > pii;
typedef vector < ll > vll;
typedef vector < int > vi;

#define eb emplace_back
#define pb push_back
#define F first
#define S second
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define fast_io() ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0)

const ll LINF = LLONG_MAX, base = 1e9, MOD = 1e9 + 7, N = 1e5 + 10, M = 1e3 + 10;
const int INF = INT_MAX;
const db PI = acos(-1);

void test();
string bin(int x);
bool nok(string s);

int main() {
    fast_io();
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    test();
    #ifndef ONLINE_JUDGE
        cout << "Time: " << (int)(clock() * 1000. / CLOCKS_PER_SEC) << "ms";
    #endif
    return 0;
}

void test() {
    int n;
    cin >> n;
    string s = bin(n);
    int res = 0;
    vi ans;
    while (nok(s)) {
        int k = s.size(), mark;
        for (int i = 0; i < k; ++i) {
            if (s[i] == '0') {
                mark = k - i;
                ans.eb(mark);
                ++res;
                break;
            }
        }
        n ^= (1 << mark) - 1;
        s = bin(n);
        if (!nok(s)) {
            cout << res << "\n";
            for (auto &x: ans) {
                cout << x << " ";
            }
            cout << "\n";
            return;
        }
        ++n;
        ++res;
        s = bin(n);
    }
    cout << res << "\n";
    for (auto &x: ans) {
        cout << x << " ";
    }
    cout << "\n";
}

string bin(int x) {
    string ans;
    while (x) {
        if (x & 1) {
            ans += '1';
        } else {
            ans += '0';
        }
        x /= 2;
    }
    reverse(all(ans));
    return ans;
}

bool nok(string s) {
    int n = s.size();
    for (int i = 0; i < n; ++i) {
        if (s[i] != '1') {
            return true;
        }
    }
    return false;
}
