#include <bits/stdc++.h>
using namespace std;

const int MAXN = 200005;
int N, x, y, ans;
int color[MAXN];
vector<int> arr[MAXN];
bool visited[MAXN], udah[MAXN];

void dfs(int node,int l1, int l2){
  visited[node] = true;
  int curr;
  if (node == 1) {
    color[1] = 1;
    udah[1] = true;
    curr = 2;
    for (int i = 0 ; i < arr[node].size(); i++) {
      if (!visited[arr[node][i]]) {
        color[arr[node][i]] = curr;
        udah[curr] = true;
        curr++;
        dfs(arr[node][i], curr-1, 1);
      }
    }
  }
  else {
    curr = 1;
    for (int i = 0 ; i < arr[node].size(); i++) {
      if (!visited[arr[node][i]]) {
        while (curr == l1 || curr == l2) curr++;
        color[arr[node][i]] = curr;
        if (!udah[curr]) {
          udah[curr] = true;
        }
        curr++;
        dfs(arr[node][i], curr - 1, color[node]);
      }
    }
  }
}

int main(){
  ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
  cin >> N;
  for (int i = 0 ; i < N-1; i++) {
    cin >> x >> y;
    arr[x].push_back(y);
    arr[y].push_back(x);
  }
  dfs(1, 0, 0);
  for (int i = 1; i <= MAXN; i++) {
    if (udah[i]) ans++;
  }
  cout << ans << '\n';
  for (int i = 1; i <= N; i++) {
    cout << color[i];
    cout << (i == N ? '\n' : ' ');
  }
  return 0;
}
