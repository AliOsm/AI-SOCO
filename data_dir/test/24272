/////////////////////////////////////////
//                                     //
//  Action - Inspiration - Motivation  //
//                                     //
/////////////////////////////////////////

#include <bits/stdc++.h>
using namespace std;

struct segment {
	int kiri, kanan, cnt;
};

int q;
segment st[4000006];
string s;

void build(int node, int l, int r) {
	int kiri = (node << 1);
	int kanan = (node << 1) | 1;
	int mid = (l + r) >> 1;

	if (l == r) {
		if (s[l] == '(') st[node] = {0, 1, 0};
		else st[node] = {1, 0, 0};
	} else {
		build(kiri, l, mid);
		build(kanan, mid + 1, r);

		int gabung = min(st[kiri].kanan, st[kanan].kiri);
		st[node] = {st[kiri].kiri + st[kanan].kiri - gabung, st[kanan].kanan + st[kiri].kanan - gabung, st[kiri].cnt + st[kanan].cnt + gabung * 2};
	}
}

segment query(int node, int l, int r, int lo, int hi) {
	int kiri = (node << 1);
	int kanan = (node << 1) | 1;
	int mid = (l + r) >> 1;

	if (l > hi || r < lo) {
		return {0, 0, 0};
	}

	if (l >= lo && r <= hi) {
		return st[node];
	}

	segment one = query(kiri, l, mid, lo, hi);
	segment two = query(kanan, mid + 1, r, lo, hi);
	int gabung = min(one.kanan, two.kiri);
	return {one.kiri + two.kiri - gabung, two.kanan + one.kanan - gabung, one.cnt + two.cnt + gabung * 2};
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> s;
	build(1, 0, s.size() - 1);

	cin >> q;
	while (q--) {
		int l, r; cin >> l >> r;
		--l; --r;
		cout << query(1, 0, s.size() - 1, l, r).cnt << '\n';
	}

	return 0;
}