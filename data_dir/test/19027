#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <map>
#include <queue>
#include <cstring>
#include <cstdlib>
#include <set>
using namespace std;
#define INF 2001001001
#define MOD 1000000007
typedef long long ll;

int N,arr[300001];

int gcd(int a, int b){
  return (b==0)?a:gcd(b,a%b);
}
int cnt[15000001];
int countdiv[15000001],prime[15000001];

void Sieve() 
{ 
  for (int i = 2; i * i <= 15000000; ++i) 
    { 
      if (!prime[i]) 
	for (int j = i * 2; j <= 15000000; j += i) 
	  prime[j] = i; 
    } 
  
  // Prime number will have same divisor 
  for (int i = 1; i < 15000000; ++i) 
    if (!prime[i]) 
      prime[i] = i; 
} 
  
// Returns length of the largest subsequence 
// with GCD more than 1. 
int solve() 
{ 
  int ans = 0; 
  for (int i=0; i < N; ++i) 
    { 
      int element = arr[i]; 
  
      // Fetch total unique prime divisor of element 
      while (element > 1) 
        { 
	  int div = prime[element]; 
  
	  // Increment count[] of Every unique divisor 
	  // we get till now 
	  ++countdiv[div]; 
  
	  // Find maximum frequency of divisor 
	  ans = max(ans, countdiv[div]); 
  
	  while (element % div==0) 
	    element /= div; 
        } 
    } 
  
  return ans; 
} 
int main()
{
  //ios_base::sync_with_stdio(0);cin.tie(0);
  scanf("%d",&N);
  for (int i=0;i<N;i++){
    scanf("%d",&arr[i]);
  }
  int temp=arr[0];
  for (int i=1;i<N;i++)
    temp=gcd(temp,arr[i]);
  for (int i=0;i<N;i++)
    arr[i]/=temp;
  Sieve();
  int ans=solve();
  if (ans==0)
    cout<<-1<<endl;
  else
    cout<<N-ans<<endl;
  return 0;
}
