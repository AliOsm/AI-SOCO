#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int N = 1e5 + 100, M = 3;

int n, m, color[N];
ll cnt[M + 1];
vector<int> nei[N], vec[M + 1];
set<int> st;

void bad() {
	cout << -1;
	exit(0);
}

void dfs(int v) {
	cnt[color[v]]++;
	vec[color[v]].push_back(v);
	st.erase(v);

	for (auto it = st.begin(); it != st.end();) {
		int u = *it;
		if (binary_search(nei[v].begin(), nei[v].end(), u) == false) {
			if (color[u] == 0) {
				color[u] = color[v];
				dfs(u);
			}
		}
		it = st.upper_bound(u);
	}

}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		int u, v;
		cin >> u >> v;
		nei[--u].push_back(--v);
		nei[v].push_back(u);
	}
	for (int i = 0; i < n; i++) {
		st.insert(i);
		sort(nei[i].begin(), nei[i].end());
	}

	int CNT = 0;
	for (int v = 0; v < n; v++)
		if (color[v] == 0) {
			color[v] = ++CNT;
			dfs(v);
		}
	if (CNT != 3)
		bad();

	if (cnt[1] * (cnt[2] + cnt[3]) + cnt[2] * cnt[3] > m)
		bad();

	for (int i = 1; i < M; i++)
		for (int j = i + 1; j <= M; j++)
			for (int u: vec[i])
				for (int v: vec[j])
					if (binary_search(nei[u].begin(), nei[u].end(), v) == false)
						bad();
	for (int v = 0; v < n; v++)
		for (int u: nei[v])
			if (color[u] == color[v])
				bad();
	for (int i = 0; i < n; i++)
		cout << color[i] << ' ';
	return 0;
}
