#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define PI 3.14152
#define INF 2000000000
#define MOD 1000000007
#define MOD2 998244353
#define ll long long
#define vi vector<int>
#define pb push_back
#define ii pair<int,int>
#define vii vector<ii>
#define si set<int>
#define msi map<string,int>
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define TRvi(c,it) for(vi::iterator it=(c).begin();it!=(c).end();it++)
#define TRvii(c,it) for(vii::iterator it=(c).begin();it!=(c).end();it++)
#define TRmsi(c,it) for(msi::iterator it=(c).begin();it!=(c).end();it++)


using namespace std;

ll pre[42][42];
ll dp[42][42][42][42];


ll un(int i,int j,int k,int l)
{
	return (dp[i+1][j][k][l]+dp[i][j+1][k][l]+dp[i][j][k-1][l]+dp[i][j][k][l-1]-(dp[i+1][j+1][k][l]+dp[i+1][j][k-1][l]+dp[i+1][j][k][l-1]+dp[i][j+1][k-1][l]+dp[i][j+1][k][l-1]+dp[i][j][k-1][l-1])+(dp[i+1][j+1][k-1][l]+dp[i+1][j+1][k][l-1]+dp[i+1][j][k-1][l-1]+dp[i][j+1][k-1][l-1])-dp[i+1][j+1][k-1][l-1]);
}
int main()
{
    IOS;
    #ifndef ONLINE_JUDGE
        // for getting input from input.txt
        freopen("input.txt", "r", stdin);
        // for writing output to output.txt
        freopen("output.txt", "w", stdout);
    #endif
    int n,m,q;
    cin >> n >> m >> q;
    int arr[n+1][m+1];
    REP(i,1,n)
    {
    	REP(j,1,m)
    	{
    		char ch;
    		cin >> ch;
    		arr[i][j]=(ch-'0');
    	}
    }
    REP(i,1,n)
    {
    	REP(j,1,m)
    		pre[i][j]=pre[i][j-1]+pre[i-1][j]-pre[i-1][j-1]+arr[i][j];
    }
   	for(int i=n;i>=1;i--)
    {
    	for(int j=m;j>=1;j--)
    	{
    		REP(k,i,n)
    		{
    			REP(l,j,m)
    			{
    				if(pre[k][l]-pre[i-1][l]-pre[k][j-1]+pre[i-1][j-1]==0)
    					dp[i][j][k][l]=1;
    				dp[i][j][k][l]+=un(i,j,k,l);
    			}
    		}
    	}
    }
    while(q--)
    {
    	int a,b,c,d;
    	cin >> a >> b >> c >> d;
    	cout << dp[a][b][c][d] << "\n";
    }

}