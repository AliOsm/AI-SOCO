#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
 
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;
 
typedef long long ll;
typedef long double ld;    
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
 
template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
 
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
//#define int ll
 
void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cout.setf(ios::fixed);
    cout.precision(20);
    #ifndef _offline
    //freopen("volunteers.in", "r", stdin);
    //freopen("volunteers.out", "w", stdout);
    #endif
}

struct point {
    ld x, y;

    point() : x(0), y(0) {};
    point(ld _x, ld _y) : x(_x), y(_y) {};
};

struct vect {
    ld x, y;

    vect() : x(0), y(0) {};
    vect(ld _x, ld _y) : x(_x), y(_y) {};
    vect(point a, point b) : x(b.x - a.x), y(b.y - a.y) {};

    ld operator ^(const vect &other) const {
        return x * other.y - y * other.x;
    }

    ld operator *(const vect &other) const {
        return x * other.x + y * other.y;
    }
};

const ld pi = 4 * atan(1);

signed main() {
    FAST_IO();
    int n;
    ld r;
    cin >> n >> r;
    ld ang = 360. / n;
    ang = (ang * pi) / 180.;
    point p(0, 0);
    vect v1(r, 0);
    vect v2(v1.x * cos(ang) - v1.y * sin(ang), v1.x * sin(ang) + v1.y * cos(ang));
    point a(p.x + v1.x, p.y + v1.y);
    point b(p.x + v2.x, p.y + v2.y);
    ld d = sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
    ld x = (-r * d) / (d - 2 * r);
    cout << x;
    return 0;
}