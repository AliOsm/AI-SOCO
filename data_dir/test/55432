#include <bits/stdc++.h>
using namespace std;
#define oo 1000000010
#define mod 1000000007
const int N = 400010;
bool done[N];
int n , a[N] , b[N], deg[N] , same[N] , last[N], cnt = 0;
vector< int > v , ans;
vector< pair<int,int> > g[N];
int start = 0;
int cur[N];
int nxt[N];

void DFS(int pre, int node){
	int here = cnt;
	if(pre != -1){
		cur[cnt] = node;
		nxt[cnt] = nxt[pre];
		nxt[pre] = cnt;
		cnt++;
	}
	else
		here = 0;
	for(int i = last[node] ;i < (int)g[node].size();i++ , last[node]++){
		if(done[g[node][i].second]) continue;
		done[g[node][i].second] = true;
		DFS(here , g[node][i].first);
	}
}


int main(){
	scanf("%d",&n);
	for(int i = 0 ;i < n - 1;i++){
		scanf("%d",&a[i]);
		v.push_back(a[i]);
	}
	for(int i = 0 ;i < n - 1;i++){
		scanf("%d",&b[i]);
		v.push_back(b[i]);
	}
	sort(v.begin(),v.end());
	v.resize(unique(v.begin(),v.end()) - v.begin());
	if((int)v.size() > n){
		puts("-1");
		return 0;
	}
	for(int i = 0 ;i < n - 1;i++){
		if(b[i] < a[i]){
			puts("-1");
			return 0;
		}
		a[i] = lower_bound(v.begin(),v.end(),a[i]) - v.begin();
		b[i] = lower_bound(v.begin(),v.end(),b[i]) - v.begin();
		if(a[i] == b[i]){
			same[a[i]]++;
			continue;
		}
		g[a[i]].push_back(make_pair(b[i] , i));
		g[b[i]].push_back(make_pair(a[i] , i));
	}
	int num = 0;
	for(int i = 0 ;i < (int)v.size();i++){
		deg[i] = (int)g[i].size();
		if(deg[i] & 1){
			start = i , num++;
		}
	}
	if(num != 0 && num != 2){
		puts("-1");
		return 0;
	}
	cur[cnt] = start;
	nxt[cnt] = -1;
	cnt++;
	DFS(-1 , start);
	cnt = 0;
	while(cnt != -1){
		same[cur[cnt]]++;
		while(same[cur[cnt]] > 0){
			same[cur[cnt]]--;
			ans.push_back(v[cur[cnt]]);
		}
		cnt = nxt[cnt];
	}
	if((int)ans.size() != n){
		puts("-1");
		return 0;
	}
	for(int i = 0 ;i < (int)ans.size();i++){
		if(i) putchar(' ');
		printf("%d",ans[i]);
	}
	puts("");
	return 0;
}