#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>

using namespace std;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

#define all(x) (x).begin(), (x).end()
//#define int ll

const int MAXN = (1 << 22) + 100;
int n;
int a[MAXN];
bool used[2][MAXN], need[MAXN];

int inv(int mask) {
    return ((1 << n) - mask - 1);
}

void dfs(int mask, int type) {
    used[type][mask] = true;
    if (type == 0 && !used[1][inv(mask)]) {
        dfs(inv(mask), 1);
    }
    else if (type == 1) {
        if (!used[0][mask] && need[mask]) {
            dfs(mask, 0);
        }
        for (int i = 0; i < n; ++i) {
            if ((mask & (1 << i)) && !used[1][mask ^ (1 << i)]) {
                dfs(mask ^ (1 << i), 1);
            }
        }
    }
}

signed main() {

    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    int m;
    cin >> n >> m;
    for (int i = 0; i < m; ++i) {
        cin >> a[i];
        need[a[i]] = true;
    }
    int cnt = 0;
    for (int i = 0; i < m; ++i) {
        if (!used[0][a[i]]) {
            dfs(a[i], 0);
            cnt++;
        }
    }
    cout << cnt;
}
