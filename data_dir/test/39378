//  Copyright Â© 2018 Diego Garcia Rodriguez del Campo. All rights reserved.

#include<bits/stdc++.h>
#define MAX 200005
#define ABS .00001
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
using namespace std;
typedef long long i64;

struct nodo
{
    int x;
    double r;
    bool operator < ( const nodo & a ) const 
    {
        return a.r < r;
    }
};

int N, M, K;
vector < int > ady[MAX];
int out[MAX];
bool dead[MAX];
bool vis[MAX];
set < int > ans;

bool ok( double lim , int t )
{
    priority_queue < nodo > q;
    memset( vis , 0 , sizeof vis );
    for( int i = 1; i <= N; i ++ )
    {
        if( dead[i] )
            continue;
        out[i] = 0;
        for( auto v : ady[i] )
            if( ! dead[v] )
                out[i]++;
        q.push( { i , ( double ) out[i] / ( double ) ady[i].size() } );
    }
    int cnt = 0;
    while( ! q.empty() )
    {
        nodo act = q.top();
        q.pop();
        if( vis[act.x] )
            continue;
        if( act.r < lim )
        {
            vis[act.x] = 1;
            for( auto v : ady[act.x] )
            {
                if( dead[v] or vis[v] )
                    continue;
                out[v]--;
                q.push( { v , ( double ) out[v] / ( double ) ady[v].size() } );
            }
            continue;
        }
        else
        {
            if( ! t )
                return true;
            ans.insert( act.x );
            vis[act.x] = true;
            while( ! q.empty() )
            {
                nodo tmp = q.top();
                q.pop();
                if( vis[tmp.x] or dead[tmp.x] )
                    continue;
                ans.insert( tmp.x );
                vis[tmp.x] = true;
            }
        }
    }
    return false;
}

int main()
{
    optimiza_io
    cin >> N >> M >> K;
    for( int i = 1; i <= K; i ++ )
    {
        int aux;
        cin >> aux;
        dead[aux] = 1;
    }
    for( int i = 1; i <= M; i ++ )
    {
        int u, v;
        cin >> u >> v;
        ady[u].push_back( v );
        ady[v].push_back( u );
    }
    double ini = 0;
    double fin = 1;
    for( int cnt = 30; cnt > 0; cnt -- )
    {
        double mid = ( ini + fin ) / 2;
        if( ok( mid , 0 ) )
            ini = mid;
        else
            fin = mid;
    }
    ok( ini , 1 );
    cout << ans.size() << "\n";
    for( auto v : ans )
        cout << v << " ";
    return 0;
}
