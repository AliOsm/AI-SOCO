#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <int, int> pii;

#define NL cout<<endl;
#define ALL(a) a.begin(), a.end()
#define DBG(a) cout<< #a <<" --> "<<(a)<<endl;
#define FastIO ios::sync_with_stdio(false); cin.tie(0);cout.tie(0)
#define IN freopen("input.txt","r+",stdin)
#define OUT freopen("output.txt","w+",stdout)

template < class T1,class T2>
ostream &operator <<(ostream &os,const pair < T1,T2 > &p)
{
    os<<"{"<<p.first<<","<<p.second<<"}";
    return os;
}

const int N=1e5+5;
const int oo=1e9+7;

int value[4*N];
void UpdatePoint(int node , int ss, int se, int u, int diff)
{
    int mid = ss+(se-ss)/2;

    if (ss>se || ss>u || se<u)
        return ;

    if (ss==se&& ss==u)
    {
        value[node] += diff;
        return;
    }

    UpdatePoint(2*node, ss, mid, u, diff);
    UpdatePoint(2*node+1, mid+1, se, u, diff);

    value[node]=max(value[2*node],value[2*node+1]);

}

int GetMax(int node,int ss, int se, int qs, int qe)
{
//    if(qs>qe) return 0;
    int mid = ss+(se-ss)/2;

     if (ss>se || ss>qe || se<qs)
        return 0;

    if (ss>=qs && se<=qe)
        return value[node];

    return max(GetMax(2*node,ss,mid,qs,qe),GetMax(2*node+1,mid+1,se,qs,qe));
}
int a[N];

int32_t main()
{

    int n;
    cin>>n;
    stack<int> st;
    a[0]=oo;
    st.push(0);
    for(int i=1;i<=n;i++)
    {
//        DBG(i);
//        for(int j=0;j<i;j++)
//        {
//            cout<<GetMax(1,0,n,j,j)<<" ";
//        }
//        NL;
        cin>>a[i];
        while(a[st.top()]<=a[i]) st.pop();
        int t=st.top() == 0 ? 0 :((st.top()== i-1 )? 1 :  GetMax(1,0,n,st.top()+1,i-1) + 1 );
        UpdatePoint(1,0,n,i,t);
        st.push(i);
    }
    cout<<GetMax(1,0,n,0,n)<<"\n";
}
