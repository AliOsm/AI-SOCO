#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define DEBUG
#ifdef DEBUG
#define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
	template <typename Arg1>
	void __f(const char* name, Arg1&& arg1)
	{
		cerr << name << " = " << arg1 << endl;
	}
	template <typename Arg1, typename... Args>
	void __f(const char* names, Arg1&& arg1, Args&&... args)
	{
		const char* comma = strchr(names + 1, ','); cerr.write(names, comma - names) << " = " << arg1 << " || ";
		__f(comma+1, args...);
	}
#else
#define debug(...)
#endif

template <class Ch, class Tr, class Container>
basic_ostream <Ch, Tr> & operator << (basic_ostream <Ch, Tr> & os, Container const& x) {
    os << "{ ";
    for(auto& y : x) os << y << " ; ";
    return os << "}";
}

template <class X, class Y>
ostream & operator << (ostream & os, pair <X, Y> const& p) {
	return os << "[ " << p.first << ", " << p.second << "]" ;
}

#define FAST_IO std::ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);
#define ll long long int
#define pb push_back
#define mp make_pair
#define ld long double
#define sz(a) (ll)(a).size()
#define endl "\n"

// priority_queue<ll, vector<ll>, less<ll>>pq;     // Max Heap
// priority_queue<ll, vector<ll>, greater<ll>>pq;  // Min Heap

typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
//K-th smallest
//cout << k << "kth (1 based indexing) smallest: " << *A.find_by_order(k - 1) << endl;
//NO OF ELEMENTS < X
//cout << "No of elements less than " << X << " are " << A.order_of_key(X) << endl;

const int MAXN = 5005;

vector<ll> dist[MAXN], adj2[MAXN];
set<ll>adj[MAXN];
ll parent[MAXN], res;

void dfs(ll node, ll levv)
{
	res += levv;
	for(auto it : adj[node])
	{
		parent[it] = node;
		dfs(it, levv + 1);
	}
}

int main()
{
	FAST_IO;

 	ll t;
 	cin >> t;
 	while(t--)
 	{
 		res = 0;
 		ll n, d, lev = 0, curr_n = 0, tot = 0, ml = 0, cml = 0;
 		cin >> n >> d;
 		for(int i=0;i<n;++i) adj[i].clear(), adj2[i].clear(), dist[i].clear(), parent[i] = -1;
		while(curr_n != n)
		{
			ml = max(ml, lev);
			if(lev == 0)
			{
				dist[lev].pb(curr_n);
				curr_n += 1;
			}
			else
			{
				for(int i=0;i<sz(dist[lev - 1]);i++)
				{
					adj[dist[lev - 1][i]].insert(curr_n);
					dist[lev].pb(curr_n);
					curr_n += 1;
					tot += lev;
					if(curr_n == n) break;
					
					adj[dist[lev - 1][i]].insert(curr_n);
					dist[lev].pb(curr_n);
					curr_n += 1;
					tot += lev;
					if(curr_n == n) break;
				}
			}
			lev += 1;
		} 	
		if(d < tot || d > (n * (n - 1)) / 2)
		{
			cout << "NO" << endl;
			continue;
		}
		cml = ml;
		for(int i=ml;i>0;i--)
		{
			if(tot == d) break;
			ll z = sz(dist[i]);
			for(int j=z - 1;j>0;j--)
			{
				if(tot == d) break;
				adj[(dist[i][j] - 1) / 2].erase(dist[i][j]);
				if(cml + 1 - i + tot <= d)
				{
					adj[dist[cml][0]].insert(dist[i][j]);
					cml += 1;
					dist[cml].pb(dist[i][j]);
					tot += cml - i;
				}
				else
				{
					adj[dist[d - tot + i - 1][0]].insert(dist[i][j]);
					dist[d - tot + i].pb(dist[i][j]);
					tot = d;
				}
				dist[i].pop_back();
				if(tot == d) break;
			}
			if(tot == d) break;
		}
		dfs(0, 0);
		cout << "YES" << endl;
		for(int i=1;i<n;i++) cout << parent[i] + 1 << " ";
		cout << endl;
		// cout << res << endl;
 	}   
    return 0;
}