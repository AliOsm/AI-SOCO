#include <bits/stdc++.h>
#include <bits/stdtr1c++.h>
#include <ext/pb_ds/assoc_container.hpp>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int, int> pi;
typedef pair<ll, ll> pl;
typedef vector<pi> vpi;
typedef vector<pl> vpl;

#define read freopen("in.c", "r", stdin)
#define write freopen("out.c", "w", stdout)
#define all(a) (a).begin(), (a).end()
#define mp make_pair
#define ff first
#define ss second
#define left(x) ((x) << 1)
#define right(x) (((x) << 1) + 1)
#define pb push_back
#define pp pop_back
#define eps 1e-15
#define inf (1000000000)
#define infl (1000000000000000000ll)
#define cs(p) printf("Case %d:", (p)++)
#define nl puts("")
#define sp printf(" ")
#define out(a) printf("%lld", (ll)(a))
#define SET(a) memset((a), -1, sizeof(a))
#define CLR(a) memset((a), 0, sizeof(a))
#define dbg(x) printf("#xxx = %lld\n", (ll)(x))
#define dbs(x) printf("#str = %s\n", (x))

ll bgm(ll a, ll b, ll m) {
    a %= m;
    ll rem = 1;
    while(b) {
        if(b&1)
            rem = (rem * a) % m;
        a = (a * a)%m;
        b >>= 1;
    }
    return rem;
}

ll inv(ll a, ll mod) {
    return bgm(a, mod - 2, mod);
}

ll in() {
    ll a;
    assert(scanf("%lld", &a) != EOF);
    return a;
}

double dl() {
    double a;
    assert(scanf("%lf", &a) != EOF);
    return a;
}

const int MAX = 100005;
const ll MOD = 1000000007;

ll n, k;
vi G[MAX];

ll deg[MAX];

ll cnt, now, xtra;
vpi ans;

void end() {
    out(-1), nl;
    exit(0);
}

int main() {

    n = in(), k = in();

    for(int i = 1; i <= n; i++)
        G[in()].pb(i);

    if(G[0].size() != 1)
        end();
    cnt++;

    for(int i = 1; i < n && cnt < n; i++) {

        if(G[i].size() > G[i - 1].size() * k)
            end();

        now = G[i].size() / k;

        cnt += G[i].size();

        for(int j = 0, k = 0, c = 0, f = 0; k < G[i].size(); j = (j + 1)%G[i - 1].size(), k++, c++) {

            ans.pb(mp(G[i - 1][j], G[i][k]));
            deg[G[i - 1][j]]++, deg[G[i][k]]++;
        }
    }

    if(cnt != n)
        end();

    for(int i = 1; i <= n; i++)
        if(deg[i] > k)
            end();

    out(ans.size()), nl;
    for(auto i : ans)
        out(i.ff), sp, out(i.ss), nl;
    return 0;
}

