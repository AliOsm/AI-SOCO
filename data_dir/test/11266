#include <iostream>
typedef long long ll;
using namespace std;

const ll kMaxk = ll(1e5) + 10, mod = ll(1e9) + 9;

ll bin_pow_mod(ll num, ll e) {
  if (e == 0)
    return 1;
  else if (e % 2 == 0)
    return bin_pow_mod((num * num) % mod, e / 2);
  else
    return (num * bin_pow_mod((num * num) % mod, e / 2)) % mod;
}

inline ll mod_inv(ll num) {
  return bin_pow_mod(num, mod - 2);
}

ll S[kMaxk], A[kMaxk], B[kMaxk];

int main() {
  ll n, a, b, k;
  cin >> n >> a >> b >> k;
  char c;
  for (ll i = 0; i < k; ++i) {
    cin >> c;
    if (c == '+')
      S[i] = 1;
    else 
      S[i] = -1;
  }
  ll ans = 0;
  A[k - 1] = B[0] = 1;
  for (ll i = 1; i < k; ++i)
    B[i] = (B[i - 1] * b) % mod;
  for (ll i = k - 2; i >= 0; --i)
    A[i] = (A[i + 1] * a) % mod;
  for (ll i = 0; i < k; ++i) {
    ans += S[i] * A[i] * B[i];
    ans %= mod;
  }
  if (bin_pow_mod(a, k) == bin_pow_mod(b, k)) {
    ans *= (n + 1) / k;
    ans %= mod;
    ans *= bin_pow_mod(a, n - k + 1);
    ans %= mod;
    cout << (ans + mod) % mod << "\n";
    return 0;
  }
  ans *= (bin_pow_mod(a, n + 1) - bin_pow_mod(b, n + 1));
  ans %= mod;
  ans *= mod_inv(bin_pow_mod(a, k) - bin_pow_mod(b, k));
  ans %= mod;
  cout << (ans + mod) % mod << '\n';
  return 0;
}