#include<iostream>
#include <bits/stdc++.h>
#define ll long long
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
using namespace std;
int n, m, a[300009], d[1000009];
ll t[4 * 300009];
set<int> st;
void build(int v = 1, int l = 0, int r = n - 1)
{
	if(l == r)
	{
		t[v] = a[l];
		return;
	}
	build(2 * v, l, (l + r) / 2);
	build(2 * v + 1, (l + r) / 2 + 1, r);
	t[v] = t[2 * v] + t[2 * v + 1];
}
void update(int v, int s, int e, int pos)
{
	if(s == e)
	{
		t[v] = a[pos];
		return;
	}
	int mid = (s + e) / 2;
	if(mid >= pos)
		update(2 * v, s, mid, pos);
	else
		update(2 * v + 1, mid + 1, e, pos);
	t[v] = t[2 * v] + t[2 * v + 1];
}
ll solve(int v, int s, int e, int l, int r)
{
	if(s > r || e < l)
		return 0 ;
	if(s >= l && e <= r)
		return t[v];
	return solve(2 * v, s, (s + e) / 2, l, r) + solve(2 * v + 1, (s + e) / 2 + 1, e, l, r);
}
int main()
{
	cin >> n >> m;
	for(int i = 1; i <= 1000000; i++)
		for(int j = i; j <= 1000000; j += i)
			d[j]++;
	for(int i = 0; i < n; i++)
		scanf("%d", &a[i]), st.insert(i);
	build();
	while(m--)
	{
		int k, l, r;
		scanf("%d%d%d", &k, &l, &r);
		l--;
		r--;
		if(k == 2)
		{
			printf("%lld\n", solve(1, 0, n - 1, l, r));
			continue;
		}
		while(l <= r)
		{
			if(st.lower_bound(l) == st.end())
				break;
			int x = *st.lower_bound(l);
			if(x > r)
				break;
			a[x] = d[a[x]];
			if(a[x] == d[a[x]])
				st.erase(x);
			update(1, 0, n - 1, x);
			l=x+1;
		}
	}
}
