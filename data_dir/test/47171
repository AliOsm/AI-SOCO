#include <bits/stdc++.h>

#define clr(x) memset((x), 0, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define in(x) int (x); input((x));
#define x first
#define y second
#define fi first
#define se second
#define forn(i, n) for(int i = 0; i < (int)(n); ++i)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; --i)
#define fore(i, a, b) for(int i = (int)(a); i <= (int)(b); ++i)
#define for1(i, n) for(int i = 1; i <= (int)(n); ++i)


typedef int itn;

#define next next12345
#define prev prev12345
#define left lefdsf232
#define right rig43783
#define x1 x12345
#define y1 y12345

using namespace std;

template<typename T>
T gcd(T x, T y) {
    while (y > 0) {
        x %= y;
        swap(x, y);
    }
    return x;
}

template<class _T>
inline _T sqr(const _T &x) {
    return x * x;
}

template<class _T>
inline string tostr(const _T &a) {
    ostringstream os("");
    os << a;
    return os.str();
}

typedef long double ld;
typedef long long ll;
typedef long long i64;
typedef unsigned long long ull;
typedef unsigned long long u64;
typedef pair<int, int> PII;
typedef pair<int, int> pii;
const long double PI = 3.1415926535897932384626433832795L;

template<typename T>
inline void input(T &a) {
    static int ed;
    a = 0;
    while (!isdigit(ed = getchar()) && ed != '-') { }
    char neg = 0;
    if (ed == '-') {
        neg = 1;
        ed = getchar();
    }
    while (isdigit(ed)) {
        a = 10 * a + ed - '0';
        ed = getchar();
    }
    if (neg) a = -a;
}

template<typename T = int>
inline T nxt() {
    T res;
    input(res);
    return res;
}
long long mod = 1000 * 1000 * 1000 + 7;

long long pw(long long a, long long n) {
    long long res = 1;
    while (n) {
        if (n & 1ll) {
            res = res * a % mod;
        }
        a = a * a % mod;
        n >>= 1;
    }
    return res;
}

long long inv(long long a) {
    return pw(a, mod - 2);
}

struct pt  {
    ll x, y;
    pt() {}
    pt(ll x, ll y) : x(x), y(y) {}
    inline pt operator + (const pt &r) const {
        return pt(x + r.x, y + r.y);
    }
    inline pt operator - (const pt &r) const {
        return pt(x - r.x, y - r.y);
    }
    inline bool operator < (const pt &r) const {
        if (x != r.x) return x < r.x;
        return y < r.y;
    }
    inline bool operator == (const pt &r) const {
        return x == r.x && y == r.y;
    }
};

inline ll dot(const pt &l, const pt &r) {
    return l.x * r.x + l.y * r.y;
}

inline ll cross(const pt &l, const pt &r) {
    return l.x * r.y - l.y * r.x;
}

const int N = 100 * 1000;
const int LG = 18;
vector<int> g[N];
int up[N][LG];
int h[N];
int tin[N];
int tout[N];
int timer;
ll sz[N];
ll dp1[N];
ll dp[N];
int n;

void dfs1(int v, int p, int hh = 0) {
    up[v][0] = p;
    for (int i = 1; i < LG; ++i) {
        up[v][i] = up[up[v][i - 1]][i - 1];
    }
    tin[v] = timer++;
    h[v] = hh;
    sz[v] = 1;
    for (int to : g[v]) {
        if (to == p) continue;
        dfs1(to, v, hh + 1);
        dp1[v] += dp1[to] + sz[to];
        sz[v] += sz[to];
    }
    tout[v] = timer++;
}


void dfs2(int v, int p, ll add) {
    dp[v] = dp1[v] + add;
    for (int to : g[v]) {
        if (to == p) continue;
        dfs2(to, v, n - sz[to] + dp[v] - sz[to] - dp1[to]);
    }
}

inline bool isUpper(int a, int b) {
    return tin[a] <= tin[b] && tout[b] <= tout[a];
}

int lca(int a, int b) {
    if (isUpper(a, b)) return a;
    if (isUpper(b, a)) return b;
    for (int i = LG - 1; i >= 0; --i) {
        if (!isUpper(up[a][i], b)) {
            a = up[a][i];
        }
    }
    return up[a][0];
}


double query(int a, int b) {
    int l = lca(a, b);
    int dist = h[a] + h[b] - 2 * h[l];
    if (l != a && l != b) {
        return dist + 1 + (double)dp1[a] / sz[a] + (double)dp1[b] / sz[b];
    }
    if (l == b) swap(a, b);
    int c = b;
    for (int i = LG - 1; i >= 0; --i) {
        if (!isUpper(up[c][i], a)) {
            c = up[c][i];
        }
    }
    ll sza = n - sz[c];
    ll szb = sz[b];
    ll dpb = dp1[b];
    ll dpa = dp[a] - dp1[c] - sz[c];
    return dist + 1 + (double)dpa / sza + (double)dpb / szb;
}


void solve() {
    n = nxt();
    int m = nxt();
    for (int i = 0; i + 1 < n; ++i) {
        int a = nxt() - 1;
        int b = nxt() - 1;
        g[a].pb(b);
        g[b].pb(a);
    }
    dfs1(0, 0);
    dfs2(0, 0, 0);
    for (int i = 0; i < m; ++i) {
        int u = nxt() - 1;
        int v = nxt() - 1;
        cout << setprecision(10) << fixed;
        cout << query(u, v) << "\n";
    }
}

int main() {
    //#define int long
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
#define fname "race"
    //freopen(fname".in", "r", stdin);
    //freopen(fname".out", "w", stdout);
#endif

    solve();

#ifdef LOCAL
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
#endif
    return 0;
}
