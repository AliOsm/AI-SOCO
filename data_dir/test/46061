//let's do it
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 1000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 300005

int color[maxn],banned[maxn];
vector<int>v[maxn],store[maxn];
set<int>s;

void dfs(int cur,int par)
{
	vector<int>tocolor;
	for(auto it:store[cur])
	{
		if(color[it])
		banned[color[it]]=1;
		else
		tocolor.pb(it);
	}
	for(int i=1;;i++)
	{
		if(!tocolor.size())
		break;
		if(banned[i])
		continue;
		color[tocolor.back()]=i;
		tocolor.pop_back();
	}
	for(auto it:store[cur])
	banned[color[it]]=0;
	for(int i=0;i<v[cur].size();i++)
	{
		int x=v[cur][i];
		if(x==par)
		continue;
		dfs(x,cur);
	}
}
int main()
{
	boost1;boost2;
	int i,j,n,m,x,y;
	cin>>n>>m;
	for(i=1;i<=n;i++)
	{
		cin>>x;
		while(x--)
		{
			cin>>y;
			store[i].pb(y);
		}
	}
	for(i=1;i<=n-1;i++)
	{
		cin>>x>>y;
		v[x].pb(y);
		v[y].pb(x);
	}
	dfs(1,-1);
	for(i=1;i<=m;i++)
	{
		if(!color[i])
		color[i]=1;
	}
	for(i=1;i<=m;i++)
	s.insert(color[i]);
	cout<<s.size()<<endl;
	for(i=1;i<=m;i++)
	cout<<color[i]<<" ";
	return 0;
}
