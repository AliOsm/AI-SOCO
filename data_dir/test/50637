#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <set>
#include <algorithm>
#include <cassert>

int main(){
#ifndef ONLINE_JUDGE
    freopen( "input.txt", "r", stdin );
    freopen( "output.txt", "w", stdout );
#endif 
    typedef long long ll;
     
    typedef std::pair<ll, ll > pll;
    
    typedef std::vector< pll > vll;
    
    
    vll v, pa, pb;
    
    int n;
    scanf("%d",&n);
    pa.resize(n);
    pb.resize(n);
    for(int i = 0; i < n; ++i)scanf("%lld %lld %lld %lld", &(pa[i].first), &(pa[i].second), &(pb[i].first), &(pb[i].second));
    
    ll ans = 0;
    v.reserve(n);
    
    for(int i = 0; i < n; ++i){
        ll dx = pa[i].first  - pb[i].first  ;
        ll dy = pa[i].second - pb[i].second ;
        
        if ( dx < 0 ) dx = -dx ;
        if ( dy < 0 ) dy = -dy ;
        
        //calculate gcd(dx, dy)
        while( dy != 0 )
        {
            ll t = dx % dy ;
            dx = dy ;
            dy = t  ;
        }
        ans += 1 + dx ;
    }
    
    for(int i = 0; i < n; ++i)
    {
        v.clear();
    
        for(int j  = i + 1; j < n; ++j)
        {
        
            ll ax = pa[i].first, ay = pa[i].second;
            ll bx = pb[i].first, by = pb[i].second;
            
            ll cx = pa[j].first, cy = pa[j].second;
            ll dx = pb[j].first, dy = pb[j].second;
            
            
            // A * x + B* y = C    (ax,ay), (bx,by)
            // (ay - by)  * bx - (ax - bx)*by =  ( ax * by + bx * ay ) 
            ll A = ay - by ;
            ll B = - ( ax - bx );
            ll C =  ( A * ax + B * ay ) ;
            
            assert(A * bx + B * by == C );
            
            ll D = cy - dy ;
            ll E = - ( cx - dx ) ;
            ll F =   ( D * cx + E * cy ) ;
            
            assert(D * dx + E * dy == F ) ;
            
            // A * x + B * y = C 
            // D * x + E * y = F
            
            // Det = A * E - D * B 
            ll Det = A * E - D * B ;
            if (Det == 0 ) continue;
            
            ll Detx = C * E - F * B ;
            ll Dety = A * F - D * C ;
            
            if (Detx % Det) continue;
            if (Dety % Det) continue;
            
            ll x =  Detx / Det ;
            ll y =  Dety / Det ;
            
            assert( x * A + y * B == C ) ;
            assert( x * D + y * E == F ) ;
            
            //printf("a(%lld, %lld), b(%lld, %lld),   c(%lld %lld), d(%lld, %lld),    x : %lld , y : %lld \n",
            //        ax, ay, bx, by, cx, cy, dx, dy, x, y);
            
            ll ax_min = ax < bx ? ax : bx ;
            ll ax_max = ax < bx ? bx : ax ;
            
            ll ay_min = ay < by ? ay : by ;
            ll ay_max = ay < by ? by : ay ;
            
            if (!(x >= ax_min && x <= ax_max && y >= ay_min && y <= ay_max)) continue;
            
            ll cx_min = cx < dx ? cx : dx ;
            ll cx_max = cx < dx ? dx : cx ;
            
            ll cy_min = cy < dy ? cy : dy ;
            ll cy_max = cy < dy ? dy : cy ;
            
            if (!(x >= cx_min && x <= cx_max && y >= cy_min && y <= cy_max) ) continue;
            
            v.push_back(pll(x,y));
            
        }
//        printf("i = %d: ", i ) ;
//        for(pll p : v ) printf("{ %lld %lld } ", p.first, p.second);
//        printf("\n");
        std::sort(v.begin(), v.end());
        size_t unique_size = std::unique(v.begin(), v.end()) - v.begin();
        
        ans -= unique_size ;
    }
    
    
    printf("%lld\n", ans ) ;
}