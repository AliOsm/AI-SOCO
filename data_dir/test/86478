#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

bool ok;
const int mx = 100050;
vector<int> vec[mx];
ll a[mx];
ll s[mx];

void dfs(int u , int from , ll sum , int ev)
{
    int i , j , k , l , v;
    if(!ev)
    {
        l = vec[u].size();
        ll p ,q;
        p = (ll)1e10 , q = -1;
        for(i = 0 ; i < l ; i++)
        {
            v = vec[u][i];
            if(v == from)continue;
            q = 1;
            p = min(p,s[v]);
        }
        if(q == -1)
        {
            a[u] = 0;
            return;
        }
        a[u] = p-sum;
        if(a[u] < 0)
        {
            ok = 0;
            return;
        }
        sum += a[u];
        s[u] = sum;
        for(i = 0 ; i < l ; i++)
        {
            v = vec[u][i];
            if(v == from)continue;
            dfs(v,u,s[u],1);
        }
    }
    else
    {
        a[u] = s[u]-sum;
        //cout << u << "  " << a[u] << endl;
        if(a[u] < 0)
        {
            ok = 0;
            return;
        }
        l = vec[u].size();
        for(i = 0 ; i < l ; i++)
        {
            v = vec[u][i];
            if(v == from)continue;
            dfs(v,u,s[u],0);
        }
    }
}

int main()
{
    ok = 1;
    int i , j , k , n , m , p , q , u ,v;
    scanf("%d",&n);

    for(i = 2 ; i <= n ; i++)
    {
        scanf("%d",&p);
        vec[p].push_back(i);
    }
    for(i = 1 ; i <= n ; i++)scanf("%lld",s+i);

    dfs(1,-1,0,1);

    ll ans = 0;
    for(i = 1 ; i <= n ; i++)
    {
        ans += a[i];
    }
    if(!ok)ans= -1;

    printf("%lld\n",ans);


    return 0;
}

