#include<bits/stdc++.h>
using namespace std;
bool vis[200005];
int main ()
{
    string s;
    cin >> s;
    set < int > zeros , ones ;
    for(int i =0 ; i <s.size() ; i++){
        if (s[i]  == '0')
            zeros.insert(i+1);
        else ones.insert(i+1);
    }
    vector < vector < int > > ans;
    int cnt = 0;
    while (1){
        vector < int > temp;
        int it = *zeros.begin();
        if (zeros.empty())
            return puts("-1");
        else
        {
            temp.push_back(it);
            zeros.erase(zeros.begin());
            cnt++;
        }
        while (1){
            bool b = 1;
            if (ones.upper_bound(it) == ones.end())
                b=0;
            int r=*(ones.upper_bound(it));
            if (zeros.upper_bound(r) == zeros.end())
                b=0;
            it = *zeros.upper_bound(r);
            if (!b)
                break;
            else {
                temp.push_back(r);
                temp.push_back(it);
                ones.erase(r);
                zeros.erase(it);
                cnt+=2;
            }
        }
        if (cnt == s.size()){
            ans.push_back(temp);
            break;
        }
        if (temp.size() == 1){
            if (ones.size() == 0){
                ans.push_back(temp);
                for(auto it :zeros){
                    vector<int > zz;
                    zz.push_back(it);
                    cnt++;
                    ans.push_back(zz);
                }
                    break;
            }
            else
                return puts("-1");
        }
        if (temp.size() == 0){
            if (cnt == s.size())
                break;
            else
                return puts("-1");
        }
        ans.push_back(temp);
    }
    cout << ans.size() << endl;
    for(int i =0 ; i <ans.size() ; i++)
    {
        cout <<ans[i].size()<<' ' ;
        for(int j =0 ; j<ans[i].size() ; j++)
            cout << ans[i][j]<<' ' ;
        cout << endl;
    }


    return 0;
}
