#include <algorithm>
#include <iostream>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <queue>
#include <map>
#include <set>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

typedef long long ll;
typedef pair < int, int > ii;

const int inf = 1e9 + 333;
const ll linf = 1e18 + 333;

const int N = 1e6 + 5;

int n, m, lc[N], rc[N], mx[N];
vector < int > v[N][2];

void dfs(int x, int last) {
    
    mx[x] = x;
    
    if(v[x][0].empty() and v[x][1].empty()) {
        if(x + 1 <= last) {
            dfs(x + 1, last);
            lc[x] = x + 1;
            mx[x] = mx[lc[x]];
        }
        return;
    }
    
    sort(v[x][0].begin(), v[x][0].end());
    sort(v[x][1].begin(), v[x][1].end());
    
    if(v[x][1].empty()) {
        dfs(x + 1, max(last, v[x][0].back()));
        lc[x] = x + 1;
        mx[x] = mx[lc[x]];
        return;
    }
    
    if(v[x][0].size()) {
        dfs(x + 1, v[x][0].back());
        lc[x] = x + 1;
        rc[x] = mx[lc[x]] + 1;
        mx[x] = mx[lc[x]];
    }
    else
        rc[x] = x + 1;
    
    if(rc[x] > v[x][1].front()) {
        puts("IMPOSSIBLE");
        exit(0);
    }
    
    dfs(rc[x], max(last, v[x][1].back()));
    mx[x] = mx[rc[x]];
    
}

void print(int x) {
    if(!x)
        return;
    print(lc[x]);
    printf("%d ", x);
    print(rc[x]);
}

int main () {
    
    scanf("%d %d", &n, &m);
    
    char str[10];
    
    for(int i = 1; i <= m; i++) {
        int x, y;
        scanf("%d %d %s", &x, &y, str);
        if(y <= x) {
            puts("IMPOSSIBLE");
            return 0;
        }
        if(str[0] == 'L')
            v[x][0].push_back(y);
        else
            v[x][1].push_back(y);
    }
    
    dfs(1, n);
    
    //for(int i = 1; i <= n; i++)
    //    printf("lc[%d] = %d rc[%d] = %d\n", i, lc[i], i, rc[i]);
    
    print(1);
    
    puts("");
    
    return 0;
    
}
