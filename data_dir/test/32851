//let's do it
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 1000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 1000005

ll fact[maxn],ifact[maxn],dp[10005][1005];
ll bpow(ll x,ll n)
{
	ll ans=1;
	while(n>0)
	{
	    if(n&1) ans*=x;
	    x*=x;
	    ans%=mod;
	    x%=mod;
	    n/=2;
	}
	return ans;
}
void pre_calc(ll N)
{
    fact[0]=ifact[0]=1;
    for(ll i=1; i<=N; ++i)
    {
        fact[i]=(fact[i-1]*i)%mod;
        ifact[i]=bpow(fact[i],mod-2);
    }
}
ll ncr(int n,int r)
{
    if(r<0 or n<r)
        return 0;
    ll ans=fact[n];
    ans=(ans*ifact[r])%mod;
    ans=(ans*ifact[n-r])%mod;
    return ans;
}
ll add(ll x,ll y)
{
	x=(x+y)%mod;
	return x;
}
ll mul(ll x,ll y)
{
	return (1LL*x*y)%mod;
}
int main()
{
	boost1;boost2;
	ll i,j,x,y,n,m,k,ans=0,got=0;
	pre_calc(1000000);
	dp[1][1]=1;
	for(i=2;i<=1000;i++)
	{
		for(j=1;j<=i;j++)
		{
			dp[i][j]=add(dp[i][j],mul(j,dp[i-1][j]));
			dp[i][j]=add(dp[i][j],dp[i-1][j-1]);
		}
	}
	cin>>n>>m>>k;
	if(m==1)
	{
		cout<<bpow(k,n);
		return 0;
	}
	for(x=1;x<=n;x++)
	{
		for(y=x;y>=0 && 2*x-y<=k;y--)
		{
			got=ncr(k,2*x-y);
			got=mul(got,ncr(2*x-y,x-y));
			got=mul(got,ncr(x,x-y));
			got=mul(got,dp[n][x]);
			got=mul(got,dp[n][x]);
			got=mul(got,fact[x]);
			got=mul(got,fact[x]);
			got=mul(got,bpow(y,1LL*n*(m-2)));
			ans=add(ans,got);
		}
	}
	cout<<ans;
	return 0;
}
