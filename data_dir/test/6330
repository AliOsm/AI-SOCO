#include <bits/stdc++.h>
using namespace std;
#define cin I
#define cout O
struct In{
	inline In operator>>(int &p)const{int re=0;register int n=0,sign=1,a=getchar();while(a<'0'||a>'9'){ if(a=='-'){sign=-1;a=getchar();break;}a=getchar();}while(a>='0' && a<='9'){n=(n<<1)+(n<<3)+a-'0';a=getchar();}p = n*sign;return *this;}
    inline In operator>>(long long &x) const { scanf("%I64d", &x); return *this; }
    inline In operator>>(double &x) const { scanf("%lf", &x); return *this; }
    inline In operator>>(char &x) const { do { x = getchar(); } while (x == ' ' || x == '\n'); return *this; }
    inline In operator>>(char *x) const { scanf("%s", x); return *this; }
    inline In operator>>(string &s) const { return *this; }
}I;
struct Out{
    inline Out operator<<(const int x) const { printf("%d", x); return *this; }
    inline Out operator<<(const long long x) const { printf("%I64d", x); return *this; }
    inline Out operator<<(const double x) const { printf("%lf", x); return *this; }
    inline Out operator<<(const char x) const { putchar(x); return *this; }
    inline Out operator<<(const char *x) const { printf("%s", x); return *this; }
    inline Out operator<<(const string x) const { return operator<<(x.c_str()); }
}O;
const int N = 1e5+5;
const int L = 20;
vector <int> adj[N];
vector <pair<int,int>> E;
int n,q,u,v,P[N][L],D[N],C[N],A[N];
void dfs(int s,int p){
	A[s]=C[s]; 
	for (auto i :adj[s])
		if (i!=p)
			dfs(i,s),A[s]+=A[i];
}
int R(int v,int x){
	for (int i=L;i>=0;i--)
		if (x>=(1<<i))
			v = P[v][i],x-=(1<<i);
	return v;
}
void F(int s,int p){
	for (auto i:adj[s])if (i!=p) P[i][0]=s,D[i] = D[s]+1,F(i,s);
}
void pre(){
	P[1][0]=1;
	F(1,1);
	for (int i=1;i<L;i++)
	for (int v=1;v<=n;v++)
	P[v][i] = P[P[v][i-1]][i-1];
}
int LCA(int u,int v){
	if (D[u]<D[v])
		swap(u,v);
	u = R(u,D[u]-D[v]);
	for (int j=L-1;j>=0;j--)
		if(P[u][j] != P[v][j])
			v = P[v][j],u = P[u][j];
	return u==v?v:P[v][0];
}
int main(){
	cin >> n;
	for (int i=0;i<n-1;i++){
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);
		E.push_back({u,v});
	}
	pre();
	cin >> q;
	while(q--){
		cin >> u >> v;
		C[u]++;
		C[v]++;
		C[LCA(u,v)]-=2;
	}
	dfs(1,1);
	for (auto i : E)
		if (D[i.second]>D[i.first])
			cout << A[i.second] << ' ';
		else
			cout << A[i.first] << ' ';
}
