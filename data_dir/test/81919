#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<queue>
using namespace std;

const int MAX=200000+10;
const int INF=1000000000;

int a[MAX],b[MAX];
int n,m;

int begin[MAX],next[MAX],t[MAX],w[MAX],tot;

void add(int a,int b,int c)
{
    t[++tot]=b;
    next[tot]=begin[a];
    begin[a]=tot;
    w[tot]=c;
}


int hash[MAX],num[MAX];
int dist[MAX];

queue<int> q;

int check()
{
    int i,u,v;
    for(i=1;i<=n;++i)dist[i]=INF;
    dist[1]=0;q.push(1);++num[1];
    while(!q.empty())
    {
        u=q.front();q.pop();
        hash[u]=0;
        if(num[u]>n+1)return 0;
        for(i=begin[u];i;i=next[i])
        {
            v=t[i];
            if(dist[v]>dist[u]+w[i])
            {
                dist[v]=dist[u]+w[i];
                if(!hash[v])
                {
                    hash[v]=1;
                    q.push(v);
                    ++num[v];
                }
            }
        }
    }
    return 1;
}

int begin1[MAX],begin2[MAX],hash1[MAX],hash2[MAX];
void add1(int a,int b,int* begin)
{
    t[++tot]=b;
    next[tot]=begin[a];
    begin[a]=tot;
}

void BFS(int S,int* hash,int* begin)
{
    int i,u,v;
    q.push(S);hash[S]=1;
    while(!q.empty())
    {
        u=q.front();q.pop();
        for(i=begin[u];i;i=next[i])
        {
            v=t[i];
            if(!hash[v])
            {
                hash[v]=1;
                q.push(v);
            }
        }
    }
}


int main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#endif
    int i;
    scanf("%d %d",&n,&m);
    for(i=1;i<=m;++i)
    {
        scanf("%d %d",&a[i],&b[i]);
        //b-1>=a
        //a+2>=b
        add1(a[i],b[i],begin1);
        add1(b[i],a[i],begin2);
//      add(b[i],a[i],-1);
//      add(a[i],b[i],2);
    }
    BFS(1,hash1,begin1);
    BFS(n,hash2,begin2);
    for(i=1;i<=m;++i)
        if(hash1[a[i]] && hash2[b[i]])
        {
            add(b[i],a[i],-1);
            add(a[i],b[i],2);
        }
    if(!check())
        printf("No\n");
    else
    {
        printf("Yes\n");
        for(i=1;i<=m;++i)
        {
            if(hash1[a[i]] && hash2[b[i]])
                printf("%d\n",dist[b[i]]-dist[a[i]]);
            else printf("1\n");
        }
    }
    return 0;
}