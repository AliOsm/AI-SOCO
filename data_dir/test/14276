#pragma optimization_level 3
//#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC target("avx,avx2,fma")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("sumsqr.in");ofstream out("sumsqr.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

const int G = 100005, inf = 1000000;
int a;
int res[G], dp[G], pr[G];
vec<int> m, P;

int main() {
    fast;
    memset(res, 0, sizeof(res));
    memset(dp, 1, sizeof(res));
    memset(pr, -1, sizeof(res));
    for(int q=2; q<G; q++){
        if(res[q]) continue;
        P.pb(q);
        for(int w = q*2; w<G; w+=q) res[w] = q;
    }
    dp[0] = 0;
    dp[1] = 0;
    for(int q=2; q<G; q++){
        dp[q] = inf;
        for(int i : P){
            if(i>q) break;
            if(dp[q-i+1]<dp[q]) dp[q] = dp[q-i+1], pr[q] = q-i+1;
        }
        dp[q]++;
    }
    //for(int q=0; q<100; q++) cout<<q<<": "<<dp[q]<<" "<<pr[q]<<endl;
    cin>>a;
    m = vec<int>(a);
    vec<int> gde(a);
    for(int q=0; q<a; q++){
        cin>>m[q], m[q]--;
        gde[m[q]] = q;
    }
    vec<pii> o;
    for(int q=0; q<a; q++){
        int ps = gde[q], dst = ps-q+1;
        //cout<<q<<endl;
        for(; ps>q;){
            int step = dst-pr[dst], nn = ps-step;
            assert(step);
            gde[m[nn]] = ps;
            swap(m[nn], m[ps]);
            o.pb({nn, ps});

            dst -= step;
            ps = nn;
        }
    }
    cout<<o.size()<<"\n";
    for(pii p : o) cout<<p.F+1<<" "<<p.S+1<<"\n";
}
