#include <cstring>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
#include <climits>
#include <cctype>
#include <bitset>
#include <list>
#include <fstream>

using namespace std;

#define all(v)              ((v).begin()), ((v).end())
#define allr(v)             ((v).rbegin()), ((v).rend())
#define sz(v)               ((int)((v).size()))
#define clr(v, d)           memset(v, d, sizeof(v))
#define MP                  make_pair
#define lpv(i, v)           for(int i=0;i<sz(v);++i)
#define lpn(i, n)           for(int i=0;i<(int)(n);++i)
#define lps(i, j, n)        for(int i=(j);i<(int)(n);++i)
#define lpb(i, j, n)        for(int i=(j);i>=(int)(n);--i)
#define nul                 puts("")

typedef long long                   ll;
typedef long double                 LD;
typedef vector<int>                 vi;
typedef vector<ll>                  vl;


int dx[]{1, -1, 0, 0};
int dy[]{0, 0, 1, -1};
int dx8[]{1, -1, 0, 0, 1, -1, 1, -1};
int dy8[]{0, 0, 1, -1, 1, -1, -1, 1};

const ll  OO = 1e9 + 7;

int main()
{

	int n;
	cin >> n;

	map<ll, ll>mp;
	for (int i = 0; i < n; i++)
	{
		ll l;
		scanf("%I64d", &l);
		mp[l]++;
	}

	vector<pair<ll, ll> >v(allr(mp));
	v.push_back({ -2, -2 });

	ll now = -1, ans = 0;
	for (int i = 0; i < v.size(); i++)
	{
		if (now == -1 && v[i].second >= 4)
		{
			ll po = v[i].second / 4;
			for (int k = 0; k < po; k++)
				ans += (v[i].first*v[i].first);

			v[i].second %= 4;
			i--;
		}
		else if (now != -1 && v[i].second >= 4)
		{
			v[i].second -= 2;
			ans += (now * v[i].first);
			now = -1;
			if (v[i].second != 0)
				i--;
		}
		else if (v[i].second >= 2)
		{
			if (now == -1) now = v[i].first;
			else ans += (now * v[i].first), now = -1;
			v[i].second %= 2;
			i--;
		}
		else if (v[i].second == 1)
		{
			if (v[i].first - 1 == v[i + 1].first)
				v[i + 1].second++;
		}
	}
	cout << ans << endl;


//	system("pause");
	return 0;
}