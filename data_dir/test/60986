#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define all(v) (v).begin() , (v).end()
#define popcnt(x) __builtin_popcount(x)
#define inf 0x3f3f3f3f
#define watch(x) cout << (#x) << " is " << (x) << endl
#define F first
#define S second

using namespace std;
using namespace __gnu_pbds;
typedef long long  ll;

template <typename T>
using ordered_set = tree<T, null_type, less<T> , rb_tree_tag, tree_order_statistics_node_update>;

const double EPS = 1e-9;
const double pi = acos(-1.0);

int dx[] = {0 , 0 , 1 , -1 , 1 , 1 , -1 , -1};
int dy[] = {1 ,-1 , 0 , 0 , -1 , 1 ,  1 , -1};
const int mod = 998244353;

int mer(int f , int s , int i , int j){
    if(f == s){
        if(f != i && j != s)return 1;
        else return 0;
    }
    else{
        int ret = 0;
        if(f != i)++ret;
        if(s != j)++ret;
        return ret;
    }
}

int add(int a , int b){
    a %= mod;
    b %= mod;
    a += b;
    return a % mod;
}

ll mul(ll a , ll b){
    a %= mod;
    b %= mod;
    a *= b;
    return a % mod;
}

const int N = 2004;
int memo[1004][N][2][2] , n , k;

int solve(int indx , int remK , int f , int s){
    if(indx == n){
        if(f != s)remK -= 2;
        else remK--;
        return (remK == 0);
    }

    int &ret = memo[indx][remK][f][s];
    if(~ret)
        return ret;
    ret = 0;
    for(int i = 0 ; i <= 1 ; ++i){
        for(int j = 0 ; j <= 1 ; ++j){
            if(indx){
                if(remK >= mer(f , s , i , j))ret = add(ret , solve(indx + 1 , remK - mer(f , s , i , j) , i , j));
            }
            else{
                ret = add(ret , solve(indx + 1 , remK , i , j));
            }
        }
    }
    return ret;
}
int main() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
#endif
    scanf("%d %d" , &n , &k);
    memset(memo , -1 , sizeof memo);
    printf("%d\n" , solve(0 , k , 0 , 0));
}
