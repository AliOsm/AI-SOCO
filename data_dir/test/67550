#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,no-stack-protector,fast-math")
#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define IO ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
using namespace std;
const int N = 4e5 + 5, M = 2 * N + 5;

int sum[N];

void update(int l, int r, int val){
    if(l > r)return;
    // cout << "L = " << l << ", R = " << r << ", " << val << endl;
    sum[l] += val;
    sum[r + 1] -= val;
}

int n, k, a[N];

int get(){
    int mn = n;
    for(int i = 1 ; i <= 2 * k ; ++i)
        mn = min(mn, (sum[i] += sum[i - 1]));
    memset(sum, 0, (2 * k + 2) * sizeof sum[0]);
    return mn;
}


int main(){
    int t;
    scanf("%d", &t);
    while(t--){
        scanf("%d %d", &n, &k);
        for(int i = 0 ; i < n ; ++i)
            scanf("%d", a + i);
        for(int i = 0 ; i < n / 2 ; ++i){
            auto p = minmax(a[i], a[n - i - 1]);
            int mn = p.first + 1;
            int mx = p.second + k;
            int here = a[i] + a[n - i - 1];
            update(mn, here - 1, 1);
            update(here + 1, mx, 1);
            update(1, mn - 1, 2);
            update(mx + 1, 2 * k, 2);
        }
        printf("%d\n", get());
    }
}