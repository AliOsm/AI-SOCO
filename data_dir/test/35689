#include <bits/stdc++.h>
using namespace std;

const int N = 1e3 + 5;
long long dp[4][N][N], arr[N][N] , ans;
int n , m;

int main()
{
	ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0);

	memset(dp , 0 , sizeof dp);

    cin >> n >> m ;
    for(int i = 0 ; i < n ; i++)
        for(int j = 0 ; j < m ; j++)
            cin >> arr[i][j];

    for(int i = 0 ; i < n ; i++)
    {
        for(int j = 0 ; j < m ; j++)
        {
            if(i)
                dp[0][i][j] = max(dp[0][i][j] , dp[0][i-1][j]);
            if(j)
                dp[0][i][j] = max(dp[0][i][j] , dp[0][i][j-1]);
            dp[0][i][j] += arr[i][j];
        }
    }

    for(int i = 0 ; i < n ; i++)
    {
        for(int j = m-1 ; j >= 0 ; j--)
        {
            if(i)
                dp[3][i][j] = max(dp[3][i][j] , dp[3][i-1][j]);
            if(j + 1 < m)
                dp[3][i][j] = max(dp[3][i][j] , dp[3][i][j+1]);
            dp[3][i][j] += arr[i][j];
        }
    }

    for(int i = n-1 ; i >= 0 ; i--)
    {
        for(int j = 0 ; j < m ; j++)
        {
            if(i + 1 < n)
                dp[2][i][j] = max(dp[2][i][j] , dp[2][i+1][j]);
            if(j)
                dp[2][i][j] = max(dp[2][i][j] , dp[2][i][j-1]);
            dp[2][i][j] += arr[i][j];
        }
    }

    for(int i = n-1 ; i >= 0 ; i--)
    {
        for(int j = m-1 ; j >= 0 ; j--)
        {
            if(i + 1 < n)
                dp[1][i][j] = max(dp[1][i][j] , dp[1][i+1][j] );
            if(j + 1 < m)
                dp[1][i][j] = max(dp[1][i][j] , dp[1][i][j+1]);
            dp[1][i][j] += arr[i][j];
        }
    }

    for(int i = 1 ; i < n-1 ; i++)
    {
        for(int j = 1 ; j < m-1 ; j++)
        {
            ans = max(ans , dp[0][i-1][j] + dp[1][i+1][j] + dp[2][i][j-1] + dp[3][i][j+1]);
            ans = max(ans , dp[0][i][j-1] + dp[1][i][j+1] + dp[2][i+1][j] + dp[3][i-1][j]);
        }
    }

    cout << ans;

    return 0;
}
