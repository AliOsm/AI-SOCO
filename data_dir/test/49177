#include<bits/stdc++.h>
using namespace std;
#define int long long 
#define mp make_pair
#define pb push_back
#define pii pair<int,int>
#define F first
#define S second
int const M=1e5+10,inf=1e9+10;
pair<pii,int> cur[M];
int ans[M],minn[M*4];
int x[M];
int n;
int bin(int tmp)
{
	int lo=1,hi=n;
	while(hi>lo+1)
	{
		int mid=(lo+hi)/2;
		if(cur[mid].F.F<=tmp)
			hi=mid;
		else
			lo=mid+1;
	}
	if(cur[lo].F.F<=tmp)
		return lo;
	return hi;
}
int get(int l,int r,int st,int en,int node)
{
	int mid=(l+r)/2;
	if(st<=l && r<=en)
	{
		return minn[node];
	}
	if(st>=r || l>=en)
		return inf;
	return min(get(l,mid,st,en,node*2),get(mid,r,st,en,node*2+1));
}
void update(int l,int r,int ind,int x,int node)
{
	int mid=(l+r)/2;
	if(r-l==1){
		minn[node]=x;
		return;
	}
	if(ind<mid)
		update(l,mid,ind,x,node*2);
	else
		update(mid,r,ind,x,node*2+1);
	minn[node]=min(minn[node*2],minn[node*2+1]);
}
main()
{
	cin>>n;
	for(int i=1;i<=n;i++)
	{
		cin>>cur[i].F.F>>cur[i].F.S,cur[i].S=i;
	}
	sort(cur+1,cur+n+1);
	reverse(cur+1,cur+n+1);
	for(int i=1;i<=n;i++)
	{
		int tmp=cur[i].F.F+cur[i].F.S-1;
		int ind=bin(tmp);
		if(ind==i)
		{
			ans[cur[i].S]=i;
		}
		else
			ans[cur[i].S]=get(1,n+1,ind,i,1);
		update(1,n+1,i,ans[cur[i].S],1);
		ans[cur[i].S]=i-ans[cur[i].S]+1;
	}
	for(int i=1;i<=n;i++)
		cout<<ans[i]<<" ";
}
