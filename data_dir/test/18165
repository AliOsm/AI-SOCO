#include <bits/stdc++.h>
#define REP(i, n) for (long long i = 0; i < n; i++)
using namespace std;
typedef long long Long;

const Long N = 2001;

bool adj[N][N];
vector<Long> adj2[N];
Long grupo[N];
bool vis[N];
string cel[N];
Long ind[N];
Long ans[N];

void dfs(Long u, Long g){
	vis[u] = true;
	grupo[u] = g;
	for(Long v : adj2[u]){
		if(!vis[v]){
			dfs(v,g);
		}
	}
	return;
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.precision(10);
	cout << fixed;
    
    
    for(Long i = 0; i < N; i++){
    	grupo[i] = i;
	}
    
    Long n, m;
    cin >> n >> m;
    for(Long i = 0; i < n; i++){
    	cin >> cel[i];
    	for(Long j = 0; j < m; j++){
    		if(cel[i][j] == '='){
    			adj2[i].push_back(j+n);
    			adj2[j+n].push_back(i);
			}
		}
	}
	for(Long i = 0; i < n+m; i++){
		if(!vis[i]){
			dfs(i,i);
		}
	}
	for(Long i = 0; i < n; i++){
    	for(Long j = 0; j < m; j++){
    		if(cel[i][j] == '<'){
    			if(!adj[grupo[i]][grupo[j+n]]){
    				ind[grupo[j+n]]++;
				}
    			adj[grupo[i]][grupo[j+n]] = true;
			}else if(cel[i][j] == '>'){
				if(!adj[grupo[j+n]][grupo[i]]){
					ind[grupo[i]]++;
				}
				adj[grupo[j+n]][grupo[i]] = true;
			}
		}
	}
	deque<Long> q;
	for(Long i = 0; i < n+m; i++){
		if(ind[i] == 0 && i == grupo[i]){
			q.push_back(i);
			vis[i] = false;
			ans[i] = 1;
		}
	}
	while(!q.empty()){
		Long u = q.front();
		q.pop_front();
		for(Long v = 0; v < n+m; v++){
			if(v == grupo[v] && adj[u][v]){
				ind[v]--;
				ans[v] = max(ans[v],ans[u]+1);
				if(ind[v] == 0){
					q.push_back(v);
					vis[v] = false;
				}
			}
		}
	}
	bool ok = false;
	for(Long i = 0; i < n+m; i++){
		if(i == grupo[i]){
			ok = (ok|vis[i]);
		}
	}
	if(ok){
		cout << "No" << endl;
	}else{
		cout << "Yes" << endl;
		for(Long i = 0; i < n; i++){
			cout << ans[grupo[i]] << " ";
		}
		cout << endl;
		for(Long i = n; i < n+m; i++){
			cout << ans[grupo[i]] << " ";
		}
		cout << endl;
	}
	return 0;
}
