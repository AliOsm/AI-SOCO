//I_l_M_P
#include <bits/stdc++.h>

#ifdef FAST_ALLOCATOR_MEMORY
int allocator_pos = 0;
char allocator_memory[(int)FAST_ALLOCATOR_MEMORY];
inline void * operator new ( size_t n ) {
  char *res = allocator_memory + allocator_pos;
  allocator_pos += n;
  assert(allocator_pos <= (int)FAST_ALLOCATOR_MEMORY);
  return (void *)res;
}
inline void operator delete ( void * ) noexcept { }
//inline void * operator new [] ( size_t ) { assert(0); }
//inline void operator delete [] ( void * ) { assert(0); }
#endif

template <class T = int> inline T readInt();
inline double readDouble();
inline int readUInt();
inline int readChar();
inline void readWord(char *s);
inline bool readLine(char *s);
inline bool isEof();
inline int getChar();
inline int peekChar();
inline bool seekEof();
inline void skipBlanks();

template <class T> inline void writeInt(T x, char end = 0, int len = -1);
inline void writeChar(int x);
inline void writeWord(const char *s);
inline void writeDouble(double x, int len = 0);
inline void flush();

static struct buffer_flusher_t {
  ~buffer_flusher_t() {
    flush();
  }
} buffer_flusher;

static const int buf_size = 4096;

static unsigned char buf[buf_size];
static int buf_len = 0, buf_pos = 0;

inline bool isEof() {
  if (buf_pos == buf_len) {
    buf_pos = 0, buf_len = fread(buf, 1, buf_size, stdin);
    if (buf_pos == buf_len)
      return 1;
  }
  return 0;
}

inline int getChar() {
  return isEof() ? -1 : buf[buf_pos++];
}

inline int peekChar() {
  return isEof() ? -1 : buf[buf_pos];
}

inline bool seekEof() {
  int c;
  while ((c = peekChar()) != -1 && c <= 32)
    buf_pos++;
  return c == -1;
}

inline void skipBlanks() {
  while (!isEof() && buf[buf_pos] <= 32U)
    buf_pos++;
}

inline int readChar() {
  int c = getChar();
  while (c != -1 && c <= 32)
    c = getChar();
  return c;
}

inline int readUInt() {
  int c = readChar(), x = 0;
  while ('0' <= c && c <= '9')
    x = x * 10 + c - '0', c = getChar();
  return x;
}

template <class T>
inline T readInt() {
  int s = 1, c = readChar();
  T x = 0;
  if (c == '-')
    s = -1, c = getChar();
  else if (c == '+')
    c = getChar();
  while ('0' <= c && c <= '9')
    x = x * 10 + c - '0', c = getChar();
  return s == 1 ? x : -x;
}

inline double readDouble() {
  int s = 1, c = readChar();
  double x = 0;
  if (c == '-')
    s = -1, c = getChar();
  while ('0' <= c && c <= '9')
    x = x * 10 + c - '0', c = getChar();
  if (c == '.') {
    c = getChar();
    double coef = 1;
    while ('0' <= c && c <= '9')
      x += (c - '0') * (coef *= 1e-1), c = getChar();
  }
  return s == 1 ? x : -x;
}

inline void readWord(char *s) {
  int c = readChar();
  while (c > 32)
    *s++ = c, c = getChar();
  *s = 0;
}

inline bool readLine(char *s) {
  int c = getChar();
  while (c != '\n' && c != -1)
    *s++ = c, c = getChar();
  *s = 0;
  return c != -1;
}

static int write_buf_pos = 0;
static char write_buf[buf_size];

inline void writeChar( int x ) {
  if (write_buf_pos == buf_size)
    fwrite(write_buf, 1, buf_size, stdout), write_buf_pos = 0;
  write_buf[write_buf_pos++] = x;
}

inline void flush() {
  if (write_buf_pos) {
    fwrite(write_buf, 1, write_buf_pos, stdout), write_buf_pos = 0;
    fflush(stdout);
  }
}

template <class T>
inline void writeInt(T x, char end, int output_len) {
  if (x < 0)
    writeChar('-'), x = -x;
  char s[24];
  int n = 0;
  while (x || !n)
    s[n++] = '0' + x % 10, x /= 10;
  while (n < output_len)
    s[n++] = '0';
  while (n--)
    writeChar(s[n]);
  if (end)
    writeChar(end);
}

inline void writeWord(const char *s) {
  while (*s)
    writeChar(*s++);
}

inline void writeDouble(double x, int output_len) {
  if (x < 0)
    writeChar('-'), x = -x;
  int t = (int)x;
  writeInt(t), x -= t;
  writeChar('.');
  for (int i = output_len - 1; i > 0; i--) {
    x *= 10;
    t = std::min(9, (int)x);
    writeChar('0' + t), x -= t;
  }
  x *= 10;
  t = std::min(9, (int)(x + 0.5));
  writeChar('0' + t);
}

#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4")

using namespace std;

typedef long double ld;
typedef long long ll;

#define _ inline
#define f first
#define sec second
#define pb push_back
#define ins insert
#define ers erase
#define mk make_pair
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define rsz resize
//#define int ll

#define right rightt
#define left leftt
#define prev prevv
#define next nextt

mt19937 Random(time(0));

const int INF = 1e9 + 10;
const int MOD = 1e9 + 7;
const int P = 239017;
const long long BINF = 1e18 + 10;

struct Flow { //author: extraterrestrial_
  struct edge {
    int to, c, w, f;
  };
  vector<edge> arr;
  vector<vector<int> > g;
  vector<int> pnt;
  vector<ll> potential;
  vector<bool> used;
  int n, m, s, t, cnt = 0;
  Flow(int maxn, int maxm, int _s, int _t) {
    n = maxn;
    m = maxm;
    s = _s;
    t = _t;
    arr.rsz(m + 10);
    g.rsz(n + 10);
    pnt.rsz(n + 10);
    potential.rsz(n + 10);
    used.rsz(n + 10);
  }
  void add_edge(int from, int to, int c, int w = 0, int f = 0) {
    arr[cnt] = {to, c, w, f};
    g[from].pb(cnt);
    cnt++;
  }
  int Ford_Fulkerson_dfs(int v, int min_f, int need = 1) {
    if (v == t) {
      return min_f;
    }
    used[v] = true;
    for (auto u : g[v]) {
      if (!used[arr[u].to] && arr[u].c - arr[u].f >= need) {
        int val = Ford_Fulkerson_dfs(arr[u].to, min(min_f, arr[u].c - arr[u].f), need);
        if (val >= need) {
          arr[u].f += val;
          arr[u ^ 1].f -= val;
          return val;
        }
      }
    }
    return 0;
  }
  int Ford_Fulkerson() { //O(|F| * E)
    int res = 0;
    for (;;) {
      fill(all(used), false);
      int val = Ford_Fulkerson_dfs(s, INF);
      if (!val) {
        return res;
      }
      res += val;
    }
  }
  int Ford_Fulkerson_with_scaling(int mx = INF) { //O(E^2 * log(U)), where U is the maximum capacity
    int res = 0, up = (int)log2(mx);
    for (int k = up; k >= 0; k--) {
      for (;;) {
        fill(all(used), false);
        int val = Ford_Fulkerson_dfs(s, INF, 1 << k);
        if (!val) {
          break;
        }
        res += val;
      }
    }
    return res;
  }
  int Edmonds_Karp_bfs(int need = 1) {
    vector<pair<int, int> > from(n + 10);
    fill(all(used), false);
    queue<int> q;
    q.push(s);
    while (!q.empty()) {
      int v = q.front();
      q.pop();
      for (auto u : g[v]) {
        if (arr[u].c - arr[u].f >= need && !used[arr[u].to]) {
          used[arr[u].to] = true;
          q.push(arr[u].to);
          from[arr[u].to] = {v, u};
        }
      }
    }
    if (!used[t]) {
      return 0;
    }
    int now = t, min_f = INF;
    while (now != s) {
      min_f = min(min_f, arr[from[now].sec].c - arr[from[now].sec].f);
      now = from[now].f;
    }
    now = t;
    while (now != s) {
      int ind = from[now].sec;
      arr[ind].f += min_f;
      arr[ind ^ 1].f -= min_f;
      now = from[now].f;
    }
    return min_f;
  }
  int Edmonds_Karp() { //O(VE^2)
    int res = 0;
    for (;;) {
      int val = Edmonds_Karp_bfs();
      if (!val) {
        return res;
      }
      res += val;
    }
  }
  int Edmonds_Karp_with_scaling(int mx = INF) { // O(E^2 * log(U)), where U is the maximum capacity
    int res = 0, up = (int)log2(mx);
    for (int k = up; k >= 0; k--) {
      for (;;) {
        int val = Edmonds_Karp_bfs(1 << k);
        if (!val) {
          break;
        }
        res += val;
      }
    }
    return res;
  }
  int Dinic_dfs(int v, int min_f, int need = 1) {
    if (v == t) {
      return min_f;
    }
    used[v] = true;
    for (; pnt[v] <  (int)g[v].size(); pnt[v]++) {
      int u = g[v][pnt[v]];
      if (!used[arr[u].to] && arr[u].c - arr[u].f >= need) {
        int val = Dinic_dfs(arr[u].to, min(min_f, arr[u].c - arr[u].f), need);
        if (val >= need) {
          arr[u].f += val;
          arr[u ^ 1].f -= val;
          return val;
        }
      }
    }
    return 0;
  }
  int Dinic_bfs(int need = 1) {
    vector<int> dist(n + 10, INF);
    dist[s] = 0;
    queue<int> q;
    q.push(s);
    while (!q.empty()) {
      int v = q.front();
      q.pop();
      for (auto u : g[v]) {
        if (arr[u].c - arr[u].f >= need && dist[arr[u].to] == INF) {
          dist[arr[u].to] = dist[v] + 1;
          q.push(arr[u].to);
        }
      }
    }
    if (dist[t] == INF) {
      return 0;
    }
    fill(all(pnt), 0);
    int res = 0;
    for (;;) {
      fill(all(used), false);
      int val = Dinic_dfs(s, INF, need);
      if (!val) {
        return res;
      }
      res += val;
    }
  }
  int Dinic() { // O(V^2 * E), on single networks O(E * sqrt(E))
    int res = 0;
    for (;;) {
      int val = Dinic_bfs();
      if (!val) {
        return res;
      }
      res += val;
    }
  }
  int Dinic_with_scaling(int mx = INF) { // O(VE * log(U)), where U is the maximum capacity
    int res = 0, up = (int)log2(mx);
    for (int k = up; k >= 0; k--) {
      for (;;) {
        int val = Dinic_bfs(1 << k);
        if (!val) {
          break;
        }
        res += val;
      }
    }
    return res;
  }
  ll Ford_Bellman() {
    vector<ll> dist(n + 10, INF);
    vector<pair<int, int> > from(n + 10);
    vector<bool> already(n + 10, false);
    dist[s] = 0;
    queue<int> q;
    q.push(s);
    while (!q.empty()) {
      int v = q.front();
      q.pop();
      already[v] = false;
      for (auto it : g[v]) {
        if (dist[v] + arr[it].w < dist[arr[it].to] && arr[it].c > arr[it].f) {
          dist[arr[it].to] = dist[v] + arr[it].w;
          from[arr[it].to] = {v, it};
          if (!already[arr[it].to]) {
            q.push(arr[it].to);
            already[arr[it].to] = true;
          }
        }
      }
    }
    int now = t, mn = INF;
    while (from[now].f) {
      mn = min(mn, arr[from[now].sec].c - arr[from[now].sec].f);
      now = from[now].f;
    }
    now = t;
    while (from[now].f) {
      arr[from[now].sec].f += mn;
      arr[from[now].sec ^ 1].f -= mn;
      now = from[now].f;
    }
    return dist[t] * mn;
  }
  void init_potentials() {
    vector<ll> dist(n + 10, INF);
    vector<bool> already(n + 10, false);
    vector<pair<int, int> > from(n + 10);
    dist[s] = 0;
    queue<int> q;
    q.push(s);
    while (!q.empty()) {
      int v = q.front();
      q.pop();
      already[v] = false;
      for (auto it : g[v]) {
        if (dist[v] + arr[it].w < dist[arr[it].to] && arr[it].c > arr[it].f) {
          dist[arr[it].to] = dist[v] + arr[it].w;
          from[arr[it].to] = {v, it};
          if (!already[arr[it].to]) {
            q.push(arr[it].to);
            already[arr[it].to] = true;
          }
        }
      }
    }
    for (int i = 1; i <= n; i++) {
      if (dist[i] != INF) {
        potential[i] = dist[i];
      }
    }
  }
  ll Dijkstra_with_potentials1() {
    vector<ll> dist(n + 10, INF);
    vector<pair<int, int> > from(n + 10);
    dist[s] = 0;
    set<pair<ll, int> > st;
    for (int i = 1; i <= n; i++) {
      st.ins({dist[i], i});
    }
    while (!st.empty()) {
      int v = st.begin()->sec;
      st.ers(st.begin());
      for (auto it : g[v]) {
        int u = arr[it].to;
        ll cost = arr[it].w + potential[v] - potential[u];
        if (arr[it].f < arr[it].c && dist[v] + cost < dist[u]) {
          st.ers({dist[u], u});
          dist[u] = dist[v] + cost;
          st.ins({dist[u], u});
          from[u] = {v, it};
        }
      }
    }
    int now = t, mn = INF;
    while (from[now].f) {
      mn = min(mn, arr[from[now].sec].c - arr[from[now].sec].f);
      now = from[now].f;
    }
    now = t;
    while (from[now].f) {
      arr[from[now].sec].f += mn;
      arr[from[now].sec ^ 1].f -= mn;
      now = from[now].f;
    }
    ll res = (dist[t] - potential[s] + potential[t]) * mn;
    for (int i = 1; i <= n; i++) {
      if (dist[i] < INF) {
        potential[i] += dist[i];
      }
    }
    return res;
  }
  ll Dijkstra_with_potentials2() {
    vector<ll> dist(n + 10, INF);
    vector<pair<int, int> > from(n + 10);
    fill(all(used), false);
    dist[s] = 0;
    for (int i = 1; i <= n; i++) {
      pair<int, int> best = {INF, INF};
      for (int j = 1; j <= n; j++) {
        if (!used[j]) {
          best = min(best, {dist[j], j});
        }
      }
      int v = best.sec;
      used[v] = true;
      for (auto it : g[v]) {
        int u = arr[it].to;
        ll cost = arr[it].w + potential[v] - potential[u];
        if (arr[it].f < arr[it].c && dist[v] + cost < dist[u]) {
          dist[u] = dist[v] + cost;
          from[u] = {v, it};
        }
      }
    }
    int now = t, mn = INF;
    while (from[now].f) {
      mn = min(mn, arr[from[now].sec].c - arr[from[now].sec].f);
      now = from[now].f;
    }
    now = t;
    while (from[now].f) {
      arr[from[now].sec].f += mn;
      arr[from[now].sec ^ 1].f -= mn;
      now = from[now].f;
    }
    ll res = (dist[t] - potential[s] + potential[t]) * mn;
    for (int i = 1; i <= n; i++) {
      if (dist[i] < INF) {
        potential[i] += dist[i];
      }
    }
    return res;
  }
  ll mincost_with_FB(int flow_sz = INF) { // O(|F| * VE)
    ll res = 0;
    for (int i = 0; i < flow_sz; i++) {
      ll val = Ford_Bellman();
      if (val >= BINF) {
        return res;
      }
      res += val;
    }
    return res;
  }
  ll mincost_with_Dijkstra1(int flow_sz = INF) {// O(|F| * E log V)
    init_potentials();
    ll res = 0;
    for (int i = 0; i < flow_sz; i++) {
      ll val = Dijkstra_with_potentials1();
      if (val >= BINF) {
        return res;
      }
      res += val;
    }
    return res;
  }
  ll mincost_with_Dijkstra2(int flow_sz = INF) { // O(|F| * V^2)
    init_potentials();
    ll res = 0;
    for (int i = 0; i < flow_sz; i++) {
      ll val = Dijkstra_with_potentials2();
      if (val >= BINF) {
        return res;
      }
      res += val;
    }
    return res;
  }
};

const int N = 110;
const int M = 1e5 + 10;
int have[M];
vector<int> g[N];
bool used[N], c[N];
int arr[N];
pair<int, int> par[N];
map<int, int> f[N];

void dfs(int v, bool color) {
  used[v] = true;
  c[v] = color;
  for (auto u : g[v]) {
    if (!used[u]) {
      dfs(u, color ^ 1);
    }
  }
}

void source() {
  int n = readInt(), m = readInt();
  for (int i = 1; i <= n; i++) {
    arr[i] = readInt();
  }
  for (int i = 1; i <= m; i++) {
    par[i].f = readInt(), par[i].sec = readInt();
    g[par[i].f].pb(par[i].sec);
    g[par[i].sec].pb(par[i].f);
  }
  for (int i = 1; i <= n; i++) {
    if (!used[i]) {
      dfs(i, 0);
    }
  }
  int cnt = 0;
  for (int i = 1; i <= n; i++) {
    int cur = arr[i];
    for (int j = 2; j <= sqrt(cur); j++) {
      if (cur % j == 0) {
        int kek = 0;
        while (cur % j == 0) {
          cur /= j;
          kek++;
        }
        f[i][j] = ++cnt;
        have[cnt] = kek;
      }
    }
    if (cur > 1) {
      f[i][cur] = ++cnt;
      have[cnt] = 1;
    }
  }
  int cs = cnt + 1, ct = cnt + 2;
  Flow F(cnt + 2, 1e5, cs, ct);
  for (int i = 1; i <= n; i++) {
    if (c[i]) {
      for (auto it : f[i]) {
        F.add_edge(cs, it.sec, have[it.sec]);
        F.add_edge(it.sec, cs, 0);
      }
    }
    else {
      for (auto it : f[i]) {
        F.add_edge(it.sec, ct, have[it.sec]);
        F.add_edge(ct, it.sec, 0);
      }
    }
  }
  for (int i = 1; i <= m; i++) {
    if (!c[par[i].f]) {
      swap(par[i].f, par[i].sec);
    }
    int x = __gcd(arr[par[i].f], arr[par[i].sec]);
    for (int j = 2; j <= sqrt(x); j++) {
      if (x % j == 0) {
        while (x % j == 0) {
          x /= j;
        }
        F.add_edge(f[par[i].f][j], f[par[i].sec][j], INF);
        F.add_edge(f[par[i].sec][j], f[par[i].f][j], 0);
      }
    }
    if (x > 1) {
      F.add_edge(f[par[i].f][x], f[par[i].sec][x], INF);
      F.add_edge(f[par[i].sec][x], f[par[i].f][x], 0);
    }
  }
  writeInt(F.Edmonds_Karp_with_scaling());
}

signed main() {
#ifdef extraterrestrial_
  assert(freopen("input.txt", "r", stdin));
  //assert(freopen("output.txt", "w", stdout));
#else
  #define TASK ""
  //assert(freopen(TASK".in", "r", stdin));
  //assert(freopen(TASK".out", "w", stdout));
#endif
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  source();
#ifdef extraterrestrial_
  writeWord("\n\t");
  writeDouble((double)clock() / (double)CLOCKS_PER_SEC, 10);
  writeWord(" seconds\n\n");
#endif
  return 0;
}