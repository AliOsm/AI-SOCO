#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>
#include <math.h>

using namespace std;
using ll = long long;
const double oo = numeric_limits<double>::max() / 2;
const int STEPS = 150;
const double EPS = 1e-9;

inline bool lt(const double x, const double y) {
	return x + EPS < y;
}

inline bool gt(const double x, const double y) {
	return x - EPS > y;
}

inline bool check(double r, const vector<double>& x, const vector<double>& y) {
	double xl = -oo, xr = oo;
	for(size_t i = 0; i < x.size(); ++i) {
		if (lt(2 * r, y[i])) {
			return false;
		}
		double d = sqrt(y[i]) * sqrt(2 * r - y[i]);
		xl = max(xl, x[i] - d);
		xr = min(xr, x[i] + d);
		if (gt(xl, xr)) {
			return false;
		}
	}
	return true;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie();
	int n;
	cin >> n;
	vector<double> x(n), y(n);
	int pos = 0, neg = 0;
	for(int i = 0; i < n; ++i) {
		cin >> x[i] >> y[i];
		if (y[i] < 0) {
			++neg;
		}
		if (y[i] > 0) {
			++pos;
		}
	}

	if (neg > 0 && pos > 0) {
		cout << -1 << endl;
		return 0;
	}
	if (neg > 0) {
		for(int i = 0; i < n; ++i) {
			y[i] = -y[i];
		}
	}

	double lo = 0, hi = 1e16;
	function<double(double, double)> mid;
	if (check(1, x, y)) {
		hi = 1;
		mid = [](double l, double r) {
			return (l + r) / 2;
		};
	} else {
		lo = 1;
		mid = [](double l, double r) {
			return sqrt(l * r);
		};
	}

	for(size_t st = 0; st < STEPS; ++st) {
		double m = mid(lo, hi);	
		if (check(m, x, y)) {
			hi = m;
		} else {
			lo = m;
		}
	}

	cout.precision(16);
	cout << fixed << mid(lo, hi) << endl;
	return 0;
}
