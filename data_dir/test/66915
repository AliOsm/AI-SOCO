//
// c.cpp
//
// Siwakorn Srisakaokul - ping128
// Written on Monday, 20 January 2014.
//

#include <cstdio>
#include <iostream>
#include <sstream>
#include <cstdlib>
#include <string>
#include <vector>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <cmath>
#include <algorithm>
#include <map>
#include <ctype.h>
#include <string.h>

#include <assert.h>

using namespace std;

typedef long long LL;
typedef pair<int, int> PII;
typedef pair<PII, int> PII2;

#define MAXN (200005)

int N, Q;
int A[MAXN];

vector<int> adj[MAXN];

int cnt;
int depth[MAXN];
int in[MAXN], out[MAXN];
void dfs(int at, int par) {
    in[at] = ++cnt;
    depth[at] = depth[par] + 1;
    for (auto v : adj[at]) {
        if (v != par) {
            dfs(v, at);
        }
    }
    out[at] = cnt;
}

int fenwick[MAXN];

void add(int at, int val) {
    for (int i = at; i < MAXN; i += (i & (-i)))
        fenwick[i] += val;
}

int query(int at) {
    int sum = 0;
    for (int i = at; i; i -= (i & (-i)))
        sum += fenwick[i];
    return sum;
}

int main() {
    scanf("%d %d", &N, &Q);
    for (int i = 1; i <= N; i++) scanf("%d", &A[i]);
    int u, v;
    for (int i = 0; i < N - 1; i++) {
        scanf("%d %d", &u, &v);
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    depth[0] = 0;
    dfs(1, 0);

    int oper;
    int x;
    for (int i = 0; i < Q; i++) {
        scanf("%d", &oper);
        if (oper == 1) {
            scanf("%d %d", &x, &v);
            if (depth[x] % 2 == 0) v = -v;
            add(in[x], v);
            add(out[x] + 1, -v);
        } else {
            scanf("%d", &x);
            int s = query(in[x]);
            if (depth[x] % 2 == 0) s = -s;
            printf("%d\n", s + A[x]);
        }
    }

    return 0;
}
