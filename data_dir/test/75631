#include <iostream>
#include <algorithm>
using namespace std;

typedef pair<int, int> pii;

const int BLOCKSZ = 300;

int n;
int step[100000];
int jumpto[100000], jumpdist[100000];

int blockid(int a) {
	return a / BLOCKSZ;
}

void recalc(int a) {
	int nxt = step[a];
	if (nxt >= n) {
		jumpto[a] = n;
		jumpdist[a] = 1;
	} else if (blockid(nxt) != blockid(a)) {
		jumpto[a] = nxt;
		jumpdist[a] = 1;
	} else {
		jumpto[a] = jumpto[nxt];
		jumpdist[a] = jumpdist[nxt] + 1;
	}
}

pii toss(int a) {
	if (jumpto[a] >= n) {
		int cur = a;
		int t = 0;
		while (step[cur] < n) {
			cur = step[cur];
			t++;
		}
		return pii(cur, t);
	} else {
		pii ret = toss(jumpto[a]);
		ret.second += jumpdist[a];
		return ret;
	}
}

int main() {
	int m;
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		cin >> step[i];
		step[i] += i;
	}
	for (int i = n - 1; i >= 0; i--) {
		recalc(i);
	}
	for (int i = 0; i < m; i++) {
		int opt;
		cin >> opt;
		if (opt == 1) {
			int id;
			cin >> id;
			id--;
			pii ans = toss(id);
			cout << ans.first + 1 << ' ' << ans.second + 1 << '\n';
		} else {
			int id, nstep;
			cin >> id >> nstep;
			id--;
			step[id] = nstep + id;
			for (int i = id; ; i--) {
				recalc(i);
				if (i % BLOCKSZ == 0) break;
			}
		}
	}
}
