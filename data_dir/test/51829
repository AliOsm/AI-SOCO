#include <iostream>
#include <algorithm>
#include <cassert>

typedef long long ll;

ll gcd(ll a, ll b) {
    return b == 0 ? a : gcd(b, a % b);
}

int main() {
    ll L1, R1, T1, L2, R2, T2;
    while (std::cin >> L1 >> R1 >> T1 >> L2 >> R2 >> T2) {
        ll g = gcd(T1, T2), answ = 0;
        // L1 - L2 + g * z >= 0
        ll len1 = R1 - L1 + 1;
        ll len2 = R2 - L2 + 1;
        ll z = (L2 - L1 + g - 1) / g;
        assert(L1 - L2 + g * z >= 0);
        while (L1 - L2 + g * (z-1) >= 0) z--;
        ll diff = L1 - L2 + g * z;
        // L1(x) - L2(y) = diff
        // [L2 + diff, L2 + diff + len1 - 1] intersect with [L2, L2 + len2 - 1]
        ll min = std::max(diff, ll(0));
        ll max = std::min(diff + len1 - 1, len2 - 1);
        answ = std::max(answ, max - min + 1);
        // L2 - L1 + g * z >= 0
        z = (L1 - L2 + g - 1) / g;
        assert(L2 - L1 + g * z >= 0);
        while (L2 - L1 + g * (z-1) >= 0) --z;
        diff = L2 - L1 + g * z;
        // L2(x) - L1(y) = diff
        // [L1(y) + diff, L1(y) + diff + len2 - 1] intersect with [L1, L1 + len1 - 1]
        min = std::max(diff, ll(0));
        max = std::min(diff + len2 - 1, len1 - 1);
        answ = std::max(answ, max - min + 1);
        std::cout << answ << std::endl;
    }
    return 0;
}