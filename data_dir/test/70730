#include <bits/stdc++.h>
using namespace std;

typedef pair<int, int> pii; typedef vector<int> vi;
typedef long long ll; typedef vector<long long> vll;
const int MOD = 1'000'000'007, MOD2 = 1'000'000'009;
const int INF = 0x3f3f3f3f; const ll BINF = 0x3f3f3f3f3f3f3f3fLL;

int solve() {
	int n, k; cin >> n >> k;
	vector<vi> gr(4, vi(n));
	for (int j=0;j<4;j++) for (int i=0;i<n;i++) cin >> gr[j][i];
	vector<pii> haha;
	vector<pair<int, pii>> ans;
	for (int i=0;i<n;i++) if (gr[0][i] == gr[1][i] && gr[1][i]) ans.push_back({gr[0][i], {0, i}}), gr[1][i] = 0, k--;
	for (int i=0;i<n;i++) if (gr[2][i] == gr[3][i] && gr[2][i]) ans.push_back({gr[3][i], {3, i}}), gr[2][i] = 0, k--;
	if (k == 2 * n) return cout << -1 << endl, 0;
	for (int i=0;i<n;i++) haha.push_back({1, i});
	for (int i=0;i<n;i++) haha.push_back({2, n - i - 1});
	while (gr[haha[0].first][haha[0].second]) rotate(haha.begin(), haha.begin() + 1, haha.end());
	while (k > 0) {
		for (int i=0;i<n;i++) if (gr[0][i] == gr[1][i] && gr[1][i]) ans.push_back({gr[0][i], {0, i}}), gr[1][i] = 0, k--;
		for (int i=0;i<n;i++) if (gr[2][i] == gr[3][i] && gr[2][i]) ans.push_back({gr[3][i], {3, i}}), gr[2][i] = 0, k--;
		for (int i=1;i<2*n;i++) if (gr[haha[i].first][haha[i].second]) {
			assert(gr[haha[i - 1].first][haha[i - 1].second] == 0);
			ans.push_back({gr[haha[i].first][haha[i].second], {haha[i - 1].first, haha[i - 1].second}});;
			gr[haha[i - 1].first][haha[i - 1].second] = gr[haha[i].first][haha[i].second];
			gr[haha[i].first][haha[i].second] = 0;
		}
		rotate(haha.begin(), haha.begin() + 2 * n - 1, haha.end());
	}
	assert((int)ans.size() <= 20000);
	cout << ans.size() << endl;
	for (auto [x, p] : ans) cout << x << ' ' << p.first + 1 << ' ' << p.second + 1 << endl;
	return 0;
}

int main() {
	ios::sync_with_stdio(0);
	// precompute();
	// int t; cin >> t; for (int i=1;i<=t;i++)
	solve();
	// cout << (solve() ? "YES" : "NO") << endl;
	return 0;
}
