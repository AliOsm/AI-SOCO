#include<bits/stdc++.h>
using namespace std;

const int N = 1000 * 1000 + 20;
int n;
string s;

struct node {
    int l = 0, r = 0, sum = 0;
    node() {
        l = r = sum = 0;
    }
    friend node merge(node a, node b) {
        node res = node();
        res.l = a.l + b.l;
        res.r =a.r + b.r;
        res.sum = a.sum + b.sum + min(a.l - a.sum, b.r - b.sum);
        return res;
    }
} seg[N << 2];

void build(int id = 1, int st = 0, int en = n) {
    if (en - st == 1) {
        if (s[st] == '(')
            seg[id].l = 1;
        else
            seg[id].r = 1;
        return;
    }
    int mid = st + en >> 1;
    build(id << 1, st, mid);
    build(id << 1 | 1, mid, en);
    seg[id] = merge(seg[id << 1], seg[id << 1 | 1]);
}

node get(int l, int r, int id = 1, int st = 0, int en = n) {
    if (l <= st && en <= r)
        return seg[id];
    if (r <= st || en <= l)
        return node();
    int mid = st + en >> 1;
    return merge(get(l, r, id << 1, st, mid), get(l, r, id << 1 | 1, mid, en));
}

int main() {
    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
    cin >> s;
    n = s.size();
    build();
    int m, l, r;
    cin >> m;
    while (m--) {
        cin >> l >> r;
        cout << get(--l, r).sum * 2 << "\n";
    }
    return 0;
}