
#include<bits/stdc++.h>
using namespace std;
#define LL                  long long
#define ull                 unsigned long long
#define scl(n)              scanf("%lld", &n)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)
#define scs(n)              scanf("%s", n)
#define pfi(n)              printf("%d\n",n)
#define pfl(n)              printf("%I64d ",n)
#define pfs(s)              printf("%s\n",s)
#define bug1		        printf("bug1")
#define	bug2			    printf("bug2")
#define	bug3		        printf("bug3")

#define FASTREAD            ios_base::sync_with_stdio(0);cin.tie(nullptr);
#define MOD                 1000000007
#define MODP                99999999999973LL
#define pb                  push_back
#define mp                  make_pair
#define pp                  pair<LL,LL>
#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e9
#define EPS                 1e-8
#define Pi                  acos(-1.0)

LL bigmod(LL b, LL p, LL md){if(p==0) return 1;if(p%2==1){ return ((b%md)*bigmod(b,p-1,md))%md;} else {LL y=bigmod(b,p/2,md);return (y*y)%md;}}
#define N 200005

LL ans1[N],ans2[N];

int main()
{
    LL n,q;
    cin>>n>>q;


    LL arr[n];
    LL mx=0;

    for(int i=0;i<n;i++)
        cin>>arr[i],mx=max(mx,arr[i]);

    int t=0;
    deque<LL>dq;
    for(int i=0;i<n;i++)
    {
        dq.pb(arr[i]);
    }

    while(1)
    {
        LL a=dq.front();
        dq.pop_front();
        LL b=dq.front();
        dq.pop_front();

        if(a==mx)
        {
            ans1[++t]=a;
            ans2[t]=b;
            dq.push_back(b);
            dq.push_front(a);
            break;
        }
        else{

            ans1[++t]=a;
            ans2[t]=b;
            dq.push_back(min(a,b));
            dq.push_front(max(a,b));
        }

    }

    vector<LL>v;
    dq.pop_front();


    while(dq.size())
    {
        v.push_back(dq.front());
        dq.pop_front();
    }
   

    while(q--)
    {
        LL a;
        cin>>a;

        if(a<=t)
        {
            cout<<ans1[a]<<" "<<ans2[a]<<endl;
        }
        else{
            a-=t;
            LL rem=a%(n-1);

            if(rem==0) rem=n-1;
            rem--;
            cout<<mx<<" "<<v[rem]<<endl;
        }
    }

   return 0;
}



/* LL dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* LL dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* LL dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* LL dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction
