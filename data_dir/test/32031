#include <bits/stdc++.h>

/*#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native")   */


//#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
//using namespace __gnu_pbds;

#define ss second
#define ff first
#define int long long
//#define double long double
#define pb push_back

const int N = 2e6 + 51, MOD = 1e9 + 7, mod = 998244353, INF = 2e18;

mt19937 Flash_new_51(51515);

using vi = vector <int>;
using vp = vector <pair <int, int>>;


int sx[N], sy[N], fx[N], fy[N];

signed main() {
    #ifdef Flash
     freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
    #endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n, m, k;
    cin >> n >> m >> k;
    for (int i = 0; i < k; i++) cin >> sx[i] >> sy[i];
    for (int i = 0; i < k; i++) cin >> fx[i] >> fy[i];
    vector <char> ans;
    if (n == 1) {
        for (int j = 0; j < m; j++) ans.pb('L');
        for (int j = 0; j < m; j++) ans.pb('R');
        cout << ans.size() << "\n";
        for (auto to : ans) cout << to;
        return 0;
    }
    if (m == 1) {
            for (int j = 0; j < n; j++) ans.pb('U');
            for (int j = 0; j < n; j++) ans.pb('D');
            cout << ans.size() << "\n";
            for (auto to : ans) cout << to;
            return 0;
    }
    while (true) {
        bool ok = false;
        for (int i = 0; i < k; i++) {
            if (sy[i] != 1) sy[i]--, ok = true;
        }
        if (!ok) break;
        ans.pb('L');
    }
    while (true) {
        bool ok = false;
        for (int i = 0; i < k; i++) {
            if (sx[i] != 1) sx[i]--, ok = true;
        }
        if (!ok) break;
        ans.pb('U');
    }
    for (int i = 0; i < m; i++) {
        if (i % 2 == 0) {
            for (int j = 0; j < n - 1; j++) ans.pb('D');
        }
        else for (int j = 0; j < n - 1; j++) ans.pb('U');
        if (i + 1 != m) ans.pb('R');
    }
    cout << ans.size() << "\n";
    for (auto to : ans) cout << to;

}
