#include <iostream>
#include <math.h>
#include <queue>
#include <set>
#include <algorithm>
#include <cmath>
#include <climits>
#include <algorithm>
#include <bitset>
#include <stack>
#include <sstream>
#include <vector>
#include <string>
#include <list>
#include <map>
#define mp make_pair
#define value first
#define interest second
#define DEBUG
#define ull long long
#define pii pair<int, int>
#define loop(xxx,n) for(int xxx = 0; xxx < n; xxx++)
#define MLN 1000000
#define HTS 100000
using namespace std;

int a[HTS];
int c[MLN+1];
int foc[MLN+1];
int loc[MLN+1];
int main(){
	//init
	loop(i, MLN+1) {
		c[i] = 0;
		foc[i] = INT_MAX;
		loc[i] = INT_MIN;
	}
	//input
	int n, beauty = 0;
	cin >> n;
	loop(i, n) {
		cin >> a[i];
		c[a[i]]++;
		beauty = max(beauty, c[a[i]]);
	}

	// foc. loc
	loop(i, n) {
		foc[a[i]] = min(i, foc[a[i]]);
	}
	for (int i = n-1; i >= 0; i--) {
		loc[a[i]] = max(i, loc[a[i]]);
	}



	set<int> beautifier;
	loop(i, n)
		if (c[a[i]] == beauty)
			beautifier.insert(a[i]);


	//for (auto bt : beautifier) {
	//	printf("%d ", bt);
	//}
	//cout << endl;

	int l = 0, r = n-1;
	for (auto bt : beautifier) {
		//printf("First occurency of %d is %d\n", bt, foc[bt]);
		//printf("Second occurency of %d is %d\n", bt, loc[bt]);
		if (loc[bt] - foc[bt] < r - l)
			l = foc[bt], r = loc[bt];
	}


	printf("%d %d\n", l + 1, r + 1);

	return 0;
}

/*

12
2 3 2 1 1 1 4 3 3 2 4 5

*/