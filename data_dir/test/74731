
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <cstdio>
#include <random>
#include <chrono>
#define ll long long
#define ld long double
#define pb push_back
#define eb emplace_back
//#define int long long
using namespace std;

const int INF = 2e9;
const int MOD = 1e9 + 7;

vector<vector<pair<int, int>>> g;
vector<bool> used;
vector<int> s;

void sizes(int v, int p = -1) {
	s[v] = 1;
	for (auto & pr : g[v]) {
		int u = pr.first;
		if (!used[u] && u != p) {
			sizes(u, v);
			s[v] += s[u];
		}
	}
}

int find_centroid(int v, int S, int p = -1) {
	for (auto & pr : g[v]) {
		int u = pr.first;
		if (!used[u] && u != p && s[u] > S / 2) return find_centroid(u, S, v);
	}
	return v;
}

ll ans = 0;

void dfs(int v, int now, int p, vector<int> & t) {
	t[now]++;
	for (auto & pr : g[v]) {
		int u = pr.first;
		int val = pr.second;
		if (!used[u] && u != p) {
			if ((now == 1 && !val) || (now == 2 && val)) continue;
			int nw;
			if (now == 3 && val == 1) nw = 3;
			else if (now == 3 && val == 0) nw = 2;
			else if (now == 2) nw = 2;
			else if (now == 1) nw = 1;
			else if (now == 0 && val == 1) nw = 1;
			else nw = 0;
			dfs(u, nw, v, t);
		}
	}
}

void go(int v) {
	vector<ll> a(4);

	for (auto & pr : g[v]) {
		int u = pr.first;
		int val = pr.second;
		if (!used[u]) {
			vector<int> t(4);
			dfs(u, val == 1 ? 3 : 0, v, t);
			ans += t[0] * (a[0] * 2 + a[1] + a[3]);
			ans += t[1] * a[0];
			ans += t[2] * a[3];
			ans += t[3] * (a[3] * 2 + a[2] + a[0]);
			for (int i = 0; i < 4; i++) a[i] += t[i];
		}
	}


	ans += a[0] * 2 + a[3] * 2 + a[1] + a[2];
	used[v] = true;

	sizes(v);

	for (auto & pr : g[v]) {
		int u = pr.first;
		if (!used[u]) {
			go(find_centroid(u, s[v]));
		}
	}
}

void solve() {
	int n;
	cin >> n;
	g.resize(n);
	for (int i = 0; i < n - 1; i++) {
		int from, to, v;
		cin >> from >> to >> v;
		from--; to--;
		g[from].eb(to, v);
		g[to].eb(from, v);
	}

	s.resize(n);
	used.resize(n);
	sizes(0);

	go(find_centroid(0, s[0]));

	cout << ans;
}

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	//freopen("network.in", "r", stdin);
	//freopen("network.out", "w", stdout);
	solve();
}
