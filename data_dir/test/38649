#pragma GCC optimize ("O3")
#pragma GCC target ("avx")
#pragma GCC optimize ("fast-math")

#include <bits/stdc++.h>
using namespace std;

template< class TF, class TC >
struct CostFlow {
  static const int MAXV = 2100;
  static constexpr TC INF = 1e9;
  struct Edge {
    int v, r;
    TF f;
    TC c;
    Edge( int _v, int _r, TF _f, TC _c ): v( _v ), r( _r ), f( _f ), c( _c ) {}
  };
  int n, s, t, pre[ MAXV ], pre_E[ MAXV ], inq[ MAXV ];
  TF fl;
  TC dis[ MAXV ], cost;
  vector< Edge > E[ MAXV ];
  CostFlow( int _n, int _s, int _t ): n( _n ), s( _s ), t( _t ), fl( 0 ), cost( 0 ) {}
  void add_edge( int u, int v, TF f, TC c ) {
    E[ u ].emplace_back( v, E[ v ].size(), f, c );
    E[ v ].emplace_back( u, E[ u ].size() - 1, 0, -c );
  }
  pair< TF, TC > flow() {
    while( true ) {
      for( int i = 0; i < n; ++i ) {
        dis[ i ] = INF;
        inq[ i ] = 0;
      }
      dis[ s ] = 0;
      queue< int > que;
      que.emplace( s );
      while( not que.empty() ) {
        int u = que.front();
        que.pop();
        inq[ u ] = 0;
        for( int i = 0; i < E[ u ].size(); ++i ) {
          int v = E[ u ][ i ].v;
          TC w = E[ u ][ i ].c;
          if( E[ u ][ i ].f > 0 and dis[ v ] > dis[ u ] + w + 1e-9 ) { // !!!!!
            pre[ v ] = u;
            pre_E[ v ] = i;
            dis[ v ] = dis[ u ] + w;
            if( not inq[ v ] ) {
              inq[ v ] = 1;
              que.emplace( v );
            }
          }
        }
      }
      if( dis[ t ] == INF ) break;
      TF tf = INF;
      for( int v = t, u, l; v != s; v = u ) {
        u = pre[ v ];
        l = pre_E[ v ];
        tf = min( tf, E[ u ][ l ].f );
      }
      for( int v = t, u, l; v != s; v = u ) {
        u = pre[ v ];
        l = pre_E[ v ];
        E[ u ][ l ].f -= tf;
        E[ v ][ E[ u ][ l ].r ].f += tf;
      }
      cost += tf * dis[ t ];
      fl += tf;
    }
    return { fl, cost };
  }
};

const int MAXN = 2000;

int N, A, B;
double P[ MAXN ];
double U[ MAXN ];

signed main() {
  ios::sync_with_stdio( 0 );
  cin >> N >> A >> B;
  for( int i = 0; i < N; ++i ) {
    cin >> P[ i ];
  }
  for( int i = 0; i < N; ++i ) {
    cin >> U[ i ];
  }
  CostFlow< int, double > mcmf( N + 2 + 2, N + 2, N + 2 + 1 );
  mcmf.add_edge( N + 2, N, A, 0.0 );
  mcmf.add_edge( N + 2, N + 1, B, 0.0 );
  for( int i = 0; i < N; ++i ) {
    mcmf.add_edge( N, i, 1, -P[ i ] );
    mcmf.add_edge( N + 1, i, 1, -U[ i ] );
    mcmf.add_edge( i, N + 2 + 1, 1, 0.0 );
    mcmf.add_edge( i, N + 2 + 1, 1, P[ i ] * U[ i ] );
  }
  cout << fixed << setprecision( 7 ) << -mcmf.flow().second << endl;
  return 0;
}
