#include <stdio.h>
#include <vector>
#include <algorithm>
#include <set>
#define pb push_back
using namespace std;

const int MAXN = (int)2e5 + 5;

int a[MAXN];
int res[MAXN];
set <int> d[MAXN][2];
vector <int> g[MAXN];

int gcd(int a, int b) {
	if (!b) {
		return a;
	}
	return gcd(b, a % b);
}

void DFS(int node, int p = -1) {
	if (node == 1) {
		d[node][0].insert(a[node]);
		d[node][1].insert(0);
	} else {
		d[node][1] = d[p][0];
		for (int i = 0; i < 2; i++) {
			for (set<int>::iterator it = d[p][i].begin(); it != d[p][i].end(); it++) {
				d[node][i].insert(gcd(a[node], *it));
			}
		}
	}

	for (int i = 0; i < (int)g[node].size(); i++) {
		int viz = g[node][i];
		if (viz != p) {
			DFS(viz, node);
		}
	}
	return;
}
		
	

int main(void) {
	int n;
	int x, y;

	scanf(" %d", &n);
	for (int i = 1; i <= n; i++) {
		scanf(" %d", &a[i]);
	}
	for (int i = 1; i < n; i++) {
		scanf(" %d %d", &x, &y);
		g[x].pb(y);
		g[y].pb(x);
	}

	DFS(1);
	for (int i = 1; i <= n; i++) {
		set<int>::iterator it = d[i][0].end();
		int aux = 1;
		if (d[i][0].size() > 0) {
			it--;
			aux = max(aux, *it);
		}
		it = d[i][1].end();
		if (d[i][1].size() > 0) {
			it--;
			aux = max(aux, *it);
		}
		res[i] = aux;
	}
			
	for (int i = 1; i <= n; i++) {
		if (i != 1) {
			printf(" ");
		}
		printf("%d", res[i]);
	}
	printf("\n");
	return 0;
}