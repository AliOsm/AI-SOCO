//██████╗ ██╗   ██╗██╗      ██████╗ ███████╗
//██╔══██╗██║   ██║██║      ██╔══██╗██╔════╝
//██████╔╝██║   ██║██║█████╗██║  ██║█████╗
//██╔══██╗██║   ██║██║╚════╝██║  ██║██╔══╝
//██║  ██║╚██████╔╝██║      ██████╔╝███████╗
//╚═╝  ╚═╝ ╚═════╝ ╚═╝      ╚═════╝ ╚══════╝
#include <bits/stdc++.h>

using namespace std;

#define fst first
#define snd second
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define eb emplace_back

#define all(v) (v).begin(), (v).end()
#define sz(v) ((int)(v).size())
#define sqr(x) ((x) * (x))

#define ADD_OPERATORS_IN(T, COMP) \
    bool operator < (const T& ot) const { return COMP(ot) == -1; } \
    bool operator > (const T& ot) const { return COMP(ot) == 1; } \
    bool operator == (const T& ot) const { return COMP(ot) == 0; } \
    bool operator != (const T& ot) const { return COMP(ot) != 0; }

#define ADD_OPERATORS_OUT(T, COMP) \
    bool operator < (const T& a, const T& b) const { return COMP(a, b) == -1; } \
    bool operator > (const T& a, const T& b) const { return COMP(a, b) == 1; } \
    bool operator == (const T& a, const T&b) const { return COMP(a, b) == 0; } \
    bool operator != (const T& a, const T&b) const { return COMP(a, b) != 0; }


typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

mt19937 mt_rand(chrono::system_clock::now().time_since_epoch().count());

template<typename T1, typename T2> inline bool upmax(T1& a, T2 b) { if (a < b) { a = b; return 1; } return 0; }
template<typename T1, typename T2> inline bool upmin(T1& a, T2 b) { if (b < a) { a = b; return 1; } return 0; }

const int maxn = (int) 500500 + 10;
const int base = 998244353;
const ld eps = (ld) 1e-7;
const ld PI = acos(-1.);

#define next ajksdslk

int n, m;
int a[maxn];

vector<int> c[maxn];


int main() {
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; i ++) {
        scanf ("%d", a + i);
    }
    for (int i = 1; i <= n; i ++) {
        c[ a[i] % m ].push_back(i);
    }
    int k = n / m;

    queue<int> pred;
    ll ans = 0;
    for (int i = 0, j = 0; j < 2 *  m; i = (i + 1) % m, j ++) {
        while (c[i].size() > k) {
            pred.push(c[i].back());
            c[i].pop_back();
        }
        while (c[i].size() < k && !pred.empty()) {
            c[i].push_back(pred.front());
            int oldOst = a[pred.front()] % m;
            int newOst = i;
            int add = 0;
            if (newOst > oldOst) {
                add += newOst - oldOst;
            } else if (newOst < oldOst) {
                add += newOst + m - oldOst;
            }
            a[pred.front()] += add;
            ans += 1ll * add;
            pred.pop();
        }
    }
    assert(pred.empty());
    cout << ans << '\n';
    for (int i = 1; i <= n; i ++) {
        cout << a[i] << " " ;
    }
    return 0;
}