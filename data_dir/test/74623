#include<bits/stdc++.h>
using namespace std;
const int N = 100005;
int n, res[N], dp[N], R[N], P[N];
vector < int > A, Adj[N];
void Tof(int v, int p)
{
    for (int &u : Adj[v])
        if (u != p)
            P[u] = v, Tof(u, v);
    A.push_back(v);
}
inline int Solve(int k)
{
    for (int &v : A)
    {
        dp[v] = R[v] = 0;
        int Mx = 0, Mx2 = 0;
        for (int &u : Adj[v])
            if (u != P[v])
            {
                dp[v] += dp[u];
                if (Mx2 < R[u])
                    Mx2 = R[u];
                if (Mx < Mx2)
                    swap(Mx, Mx2);
            }
        if (Mx + Mx2 + 1 >= k)
            dp[v] ++;
        else
            R[v] = Mx + 1;
    }
    return (dp[1]);
}
int main()
{
    scanf("%d", &n);
    for (int i = 1; i < n; i++)
    {
        int v, u; scanf("%d%d", &v, &u);
        Adj[v].push_back(u);
        Adj[u].push_back(v);
    }
    Tof(1, 0);
    for (int i = 1; i <= n && i <= 1300; i++)
        res[i] = Solve(i);
    int i = 1300, k = res[i];
    while (i <= n)
    {
        int l = i, r = n + 1, md;
        while (r - l > 1)
        {
            md = (l + r) >> 1;
            if (Solve(md) == k)
                l = md;
            else
                r = md;
        }
        for (int j = i; j < r; j++)
            res[j] = k;
        k = Solve(r);
        i = r;
    }
    for (int i = 1; i <= n; i++)
        printf("%d\n", res[i]);
    return (0);
}