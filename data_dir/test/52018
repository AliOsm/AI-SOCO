#include<stdio.h>
#include<iostream>
#include<string.h>
#include<ctype.h>
#include<math.h>
#include<map>
#include<set>
#include<vector>
#include<queue>
#include<string>
#include<algorithm>
#include<time.h>
#include<bitset>
using namespace std;
void fre(){freopen("c://test//input.in","r",stdin);freopen("c://test//output.out","w",stdout);}
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T> inline void gmax(T &a,T b){if(b>a)a=b;}
template <class T> inline void gmin(T &a,T b){if(b<a)a=b;}
const int N=1e5+10,M=0,Z=1e9+7,maxint=2147483647,ms31=522133279,ms63=1061109567,ms127=2139062143;const double eps=1e-8,PI=acos(-1.0);//.0
int casenum,casei;
int n,m;
int a[N],b[N],c[N];
bool e[N];
int main()
{
	while(~scanf("%d%d",&n,&m))
	{
		MS(a,0);//a[i]表示如果i犯罪，说真话的人数
		MS(b,0);//b[i]表示如果i不犯罪，说真话的人数
		int sum=0;//sum表示说真话的人数
		for(int i=1;i<=n;i++)
		{
			int x;scanf("%d",&x);c[i]=x;
			if(x>0)a[x]++;//指认x犯罪
			else//指认x不犯罪
			{
				x=-x;
				b[x]++;
				sum++;
			}
		}
		//只有一个人犯罪，我们一开始可以认定每个人都没犯罪，那么得到sum句真话
		MS(e,0);
		int num=0;
		for(int i=1;i<=n;i++)//然而有一个人犯罪，于是我们枚举第i个人是罪犯
		{
			int tmp=sum-b[i]+a[i];//这样真话的数量发生了改变
			if(tmp==m)//如果这个逻辑下真话的数量恰好为m，那么i就可能是罪犯
			{
				num++;
				e[i]=1;
			}
		}
		if(num>1)//如果罪犯没有锁定
		{
			for(int i=1;i<=n;i++)
			{
				int x=c[i];
				if(x>0)//认为他犯罪了
				{
					puts(e[x]?"Not defined":"Lie");
				}
				else//认为他没犯罪
				{
					x=-x;
					puts(e[x]==0?"Truth":"Not defined");
				}
			}
		}
		else//如果罪犯已经锁定
		{
			for(int i=1;i<=n;i++)
			{
				int x=c[i];
				if(x>0)//认为他犯罪了
				{
					puts(e[x]?"Truth":"Lie");
				}
				else//认为他没犯罪
				{
					x=-x;
					puts(e[x]==0?"Truth":"Lie");
				}
			}
		}
	}
	return 0;
}
/*
【trick&&吐槽】
1，+ -都是可以被scanf直接读入的
2，在认罪犯已经锁定而且我认定一个人没有犯罪的条件下
我忘记了对x取反，本来是会导致RE的，然而数据弱并没有覆盖到这种情况
比如数据

4 3
1
1
1
-1

这个人本来是罪犯，我们却认为他没有犯罪。
不一定是RE，而是出错了。

3，罪犯没有锁定是要用if(num>1)的我却用了if(num)，然而数据弱也没有覆盖到这种情况

【题意】
有n个犯罪嫌疑人，每个人会指认一个人为罪犯或者不为罪犯
+x表示他认定x为罪犯
-x表示他认定x不是罪犯

我们现在知道恰好m个人说了真话，
让你判定每个人的话
是真话（Truth），假话（Lie），还是不确定（Not defined）

【类型】
逻辑推理，反面剔除法

【分析】
我们首先要明确，最多只有一个罪犯。
所以一般而言，说一个人不是罪犯的话大多是真话。
于是我们初始认定所有罪犯的话都是假话，统计这种情况下的真话和假话数量。
然后我们再枚举一个人为罪犯，更新再这个条件下的真话和假话数量。如果真话数恰好为m，
那么这个人就可能为犯罪嫌疑人。

然后根据可能犯罪嫌疑人的数量，对每个人的话进行还原即可。

【时间复杂度&&优化】
O(n)

【数据】
Sample Input
2
3 2
-1
-2
-3

4 1
+2
-3
+4
-1

Sample Output
Not defined
Not defined
Not defined

Lie
Not defined
Lie
Not defined


*/