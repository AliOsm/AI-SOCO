#include <bits/stdc++.h>
typedef std::vector<int> vi;
typedef std::vector<vi> vvi;
int main() {
    std::ios_base::sync_with_stdio(false); std::cin.tie(0);
    for (int n, m, d; std::cin >> n >> m >> d; std::cout << std::endl) {
        vvi adj(1+n);
        for (int i = 0, u, v; i < m; ++i) {
            std::cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        if ((int)adj[1].size() < d) {
            std::cout << "NO\n";
            continue;
        }
        std::queue<int> queue;
        vi part(1+n);
        int nParts = 0;
        for (int v : adj[1]) {
            if (!part[v]) {
                nParts++;
                part[v] = nParts;
                queue.push(v);
                while (!queue.empty()) {
                    int curr = queue.front(); queue.pop();
                    for (int next : adj[curr]) {
                        if (next == 1 || part[next]) { continue; }
                        part[next] = nParts;
                        queue.push(next);
                    }
                }
            }
        }
        if (nParts > d) {
            std::cout << "NO\n";
            continue;
        }
        typedef std::pair<int,int> pii;
        std::vector<pii> answ;
        std::set<int> was;
        vi from(1+n);
        for (int v : adj[1]) {
            if (!was.count(part[v])) {
                was.insert(part[v]);
                answ.push_back(pii(1,v));
                from[v] = 1;
                queue.push(v);
            }
        }
        for (int v : adj[1]) {
            if ((int)answ.size() == d) {
                break;
            }
            if (!from[v]) {
                from[v] = 1;
                answ.push_back(pii(1,v));
                queue.push(v);
            }
        }
        from[1] = 1;
        while (!queue.empty()) {
            auto curr = queue.front(); queue.pop();
            for (int next : adj[curr]) {
                if (from[next]) { continue; }
                from[next] = curr;
                answ.push_back(pii(curr,next));
                queue.push(next);
            }
        }
        std::cout << "YES\n";
        for (auto p : answ) {
            std::cout << p.first << ' ' << p.second << "\n";
        }
    }
}