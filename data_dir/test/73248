#include <bits/stdc++.h>
#define pb push_back
 
using namespace std;
using ll = long long int;
const int N = 1e5 + 5;
 
vector<int> fac[N];
bitset<N> B;
 
struct node
{
	node* child[2];
	int lowest;
};
 
node* trie[N];
 
void insert(node *cur, int x, int bit)
{
	cur -> lowest = min(cur -> lowest, x);
	if (bit < 0) return;
	int b = (x >> bit) & 1;
	if (cur -> child[b] == NULL)
	{
		cur -> child[b] = new node();
		cur -> child[b] -> lowest = INT_MAX;
	}
	insert(cur -> child[b], x, bit - 1);
}
 
bool maxxor(node *cur, int x, int bit, int lim, int &pref)
{
	if (pref > lim) return 0;
	if (bit < 0) return 1;
	if (cur == NULL) return 0;
	int b = (x >> bit) & 1;
	if (cur -> child[1^b] != NULL and cur -> child[1^b] -> lowest <= lim)
	{
		pref += (1^b)*(1 << bit);
		return maxxor(cur -> child[1^b], x, bit-1, lim, pref);
	}
	else
	{
		if (cur -> child[b] == NULL or cur -> child[b] -> lowest > lim) return 0;
		pref += b*(1 << bit);
		return maxxor(cur -> child[b], x, bit-1, lim, pref);
	}
}
 
void solve()
{
	for (int i = 1; i < N; ++i)
		for (int j = i; j < N; j += i)
			fac[j].pb(i);
	for (int i = 1; i < N; ++i)
	{
		trie[i] = new node();
		trie[i] -> lowest = INT_MAX;
	}
	int q; cin >> q;
	while (q--)
	{
		int type; cin >> type;
		if (type == 1)
		{
			int x; cin >> x;
			if (B[x]) continue;
			B[x] = 1;
			for (auto i : fac[x])
				insert(trie[i], x, 16);
		}
		else
		{
			int k, x, s; cin >> x >> k >> s;
			int lim = s - x;
			if (lim <= 0 or x % k)
			{
				cout << -1 << '\n';
				continue;
			}
			int ans = 0;
			auto poss = maxxor(trie[k], x, 16, lim, ans);
			if (poss) cout << ans << '\n';
			else cout << -1 << '\n';
		}
	}
}	
 
//  ---------------------Template---------------------------
void InputSetup()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
 
	#ifdef LOCAL
	freopen("in", "r", stdin);
	freopen("out", "w", stdout);
	#endif
}
 
int main(void)
{
	auto start = chrono::high_resolution_clock::now();
 
	InputSetup();
	solve();
 
	auto finish = chrono::high_resolution_clock::now();
	cerr << "Time elapsed: " << (chrono::duration<long double>(finish-start)).count() << "s\n";
}
//  ---------------------Template---------------------------