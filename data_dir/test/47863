#pragma GCC optimize("Ofast")                   
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>   
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define ya katala
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
//#define endl '\n'
#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;

const int mod = (int)1e9 + 7;
const int N = (int)3e5 + 123;
const ll inf = (ll)3e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

int n, k, timer;

inline bool ask (int l, int r) {
   cout << l << ' ' << r << endl;
   timer ++;
   if (timer > 4500) assert (0);
   fflush (stdout);
   string s;
   cin >> s;
   return (s == "Yes");
}

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                    

inline void Solve () {
   srand (time (NULL));
   cin >> n >> k;
   int l = 1, r = n;
   while (1) {
      int mid = l + r >> 1;
      int len = r - l + 1;
      if (len <= 50) {
         int pos = (1ll * rand () * rand ()) % len + l;
         if (ask (pos, pos)) exit (0);
         else l = max (l - k, 1ll), r = min (n, r + k);
         continue;
      }
      if (ask (l, mid)) {
         l = max (l - k, 1ll);
         r = min (mid + k, n);
      }
      else {
         l = max (mid + 1 - k, 1ll);
         r = min (r + k, n);
      }
   }
}                                     

main () {                                       
// freopen ("katala.in", "r", stdin);    
// freopen ("katala.out", "w", stdout);              
   //boost ();
   int tt = 1;
// cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
                                                                                                                                                            // Dalen - katala
