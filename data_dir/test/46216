#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>

using namespace std;



#define pb push_back
#define pii pair<int, int>
#define mp make_pair
#define ull unsigned long long
#pragma comment(linker, "/STACK:64000000")
#define null NULL
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define fornr(i, n) for (int i = (n); i >= 0; --i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)

typedef long double ld;
typedef pair<ld, ld> pldld;
typedef long long ll;
typedef pair<ll, ll> pll;


typedef unsigned int ui;
typedef unsigned char uc;
const int infi = 1e9 + 7;
const ll infl = 1e18 + 7;

ll ar[1010][1010];
ll get_sum1(int i, int n) {
	ll ans = 0;
	for (int j = 0; j < n; ++j)
		ans += ar[i][j];
	return ans;
}
ll get_sum2(int j, int n) {
	ll ans = 0;
	forn(i, n)
		ans += ar[i][j];
	return ans;
}
	
int main() {
	cin.sync_with_stdio(false);
	cin.tie(0);
//	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
	//freopen("ufo.in", "r", stdin);freopen("ufo.out", "w", stdout);
	int n;
	cin >> n;
	if (n == 1) {
		cout << 1;
		return 0;
	}
	forn(i, n)
		forn(j, n)
			cin >> ar[i][j];
	ll sum = 0;
	forn(i, n) {
		int flag = 1;
		sum = 0;
		forn(j, n) {
			if (ar[i][j] == 0)
				flag = 0;
			sum += ar[i][j];
		}
		if (flag) {
			break;
		}
	}
	int x, y;
	forn(i, n)
		forn(j, n)
			if (ar[i][j] == 0)
				x = i, y = j;
	ll a = get_sum1(x, n);
	ar[x][y] = sum - a;
	for (int i = 0; i < n; ++i) {
		if (get_sum1(i, n) != sum) {
			cout << -1;
			return 0;
		}
		if (get_sum2(i, n) != sum) {
			cout << -1;
			return 0;
		}
	}
	ll s = 0;
	for (int i = 0; i < n; ++i)
		s += ar[i][i];
	if (s != sum) {
		cout << -1;
		return 0;
	}
	s = 0;
	for (int i = 0; i < n; ++i)
		s += ar[i][n - i - 1];
	if (s != sum) {
		cout << -1;
		return 0;
	}
	if (ar[x][y] <= 0) {
		cout << -1;
		return 0;
	}
	cout << ar[x][y];

	return 0;
}