#include <bits/stdc++.h>
using namespace std;
using ll = long long;

int main() {
  cin.tie(0);
  cin.sync_with_stdio(0);

  int n, m;
  cin >> n >> m;
  vector<string> v(n + 1);
  vector<vector<int>> g(n + 1, vector<int>(m + 1));
  vector<vector<bool>> b(n + 1, vector<bool>(m + 1));

  for (int z = 1; z <= n; ++z) {
    string& s = v[z];
    cin >> s;
    auto& a = g[z];
    for (int j = 0; j < m; ++j) {
      a[j + 1] = int(s[j] == '#');
    }
  }

  // mid point
  auto f = [&](int x, int y) {
    int x1 = x - 1;
    int y1 = y - 1;
    int x2 = x + 1;
    int y2 = y + 1;
    return g[x2][y2] - g[x1 - 1][y2] - g[x2][y1 - 1] + g[x1 - 1][y1 - 1];
  };

  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= m; ++j) {
      g[i][j] += g[i - 1][j] + g[i][j - 1] - g[i - 1][j - 1];
    }
  }
  for (int i = 2; i < n; ++i) {
    for (int j = 2; j < m; ++j) {
      auto x = f(i, j);
      if (x == 9 || (x == 8 && v[i][j - 1] == '.')) {
        bool old = b[i][j];
        for (int l = -1; l <= 1; ++l)
          for (int r = -1; r <= 1; ++r) b[i + l][j + r] = true;
         b[i][j] = old;
      }
    }
  }

  bool can = true;
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= m; ++j) {
      if (v[i][j - 1] == '#' && not b[i][j]) {
        can = false;
        break;
      }
    }
  }

  cout << (can ? "YES" : "NO");
}