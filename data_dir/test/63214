#include <bits/stdc++.h>
using namespace std;
typedef long long Long;

const Long MX = 2e5 + 10;
const Long M = 201;

Long A[MX];
vector<Long> pos[M];
Long L[M];
Long R[M];

Long calcula(Long num, Long n){
	for(Long i = 1; i < M; i++){
		L[i] = 0;
		R[i] = pos[i].size() - 1;
	}
	
	Long sz = pos[num].size();
	Long tam = sz / 2;;
	Long ans = 0;
	Long l, r;
	for(Long i = 0; i <= tam; i++){
		if(i == 0){
			l = -1;
			r = n;
		}else{
			l = pos[num][i - 1];
			r = pos[num][sz - i];
		}
		for(Long j = 1; j < M; j++){
			if(pos[j].empty()){
				ans = max(ans,i*2);
			}else{
				while(L[j] < pos[j].size() && pos[j][L[j]] <= l){
					L[j]++;
				}
				while(R[j] >= 0 && pos[j][R[j]] >= r){
					R[j]--;
				}
				if(L[j] <= R[j]){
					ans = max(ans,i*2 + R[j] - L[j] + 1);
				}else{
					ans = max(ans,i*2);
				}
			}
		}
	}
	return ans;
}

void solve(){
	for(Long i = 0; i < M; i++) pos[i].clear();
	Long n;
	cin >> n;
	for(Long i = 0; i < n; i++){
		cin >> A[i];
		pos[A[i]].push_back(i);
	}
	
	Long ans = 0;
	for(Long j = 1; j < M; j++){
		ans = max(ans,calcula(j,n));
	}
	cout << ans << "\n";
	return;
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	cout.precision(10);
	cout << fixed;

	Long t;
	cin >> t;
	while(t--) solve();
	return 0;
}
