//let's do it
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 1000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 100005

ll dp[maxn][2],n,k;
vector<pair<ll,ll> >v[maxn];

void dfs(ll cur,ll par)
{
	vector<pair<ll,ll> >store;
	set<ll>ids;
	for(ll i=0;i<v[cur].size();i++)
	{
		ll x=v[cur][i].F;
		ll y=v[cur][i].S;
		if(x==par)
		continue;
		dfs(x,cur);
		store.pb({dp[x][0]+y,x});
	}
	sort(all(store));
	reverse(all(store));
	for(ll i=0;i<min(k-1,(ll)store.size());i++)
	{
		dp[cur][0]+=store[i].F;
		ids.insert(store[i].S);
	}
	ll can;
	if(k-1<store.size())
	can=store[k-1].F;
	else
	can=0;
	for(ll i=0;i<v[cur].size();i++)
	{
		ll x=v[cur][i].F;
		ll y=v[cur][i].S;
		if(x==par)
		continue;
		if(ids.find(x)==ids.end())
		dp[cur][1]=max(dp[cur][1],dp[cur][0]+dp[x][1]+y);
		else
		dp[cur][1]=max(dp[cur][1],dp[cur][0]-dp[x][0]+can+dp[x][1]);
	}
}
int main()
{
	boost1;boost2;
	ll i,j,x,y,z;
	cin>>n>>k;
	for(i=1;i<=n-1;i++)
	{
		cin>>x>>y>>z;
		x++;y++;
		v[x].pb({y,z});
		v[y].pb({x,z});
	}
	dfs(1,-1);
	cout<<max(dp[1][0],dp[1][1]);
	return 0;
}
