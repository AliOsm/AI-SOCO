#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int MX = 300005;

struct {
	int L, R;
	int pl, pr;
	int mn, s;
} T[2 * MX];
int tsz = 0;
int buildTree(int L, int R) {
	int cur = tsz++;
	T[cur].L = L;
	T[cur].R = R;
	if (L < R) {
		T[cur].pl = buildTree(L, (L+R)/2);
		T[cur].pr = buildTree((L+R)/2+1, R);
	}
	return cur;
}
void add(int i, int d, int cur) {
	if (T[cur].L == T[cur].R) {
		T[cur].s += d;
		T[cur].mn += d;
		return;
	}
	
	if (i <= T[ T[cur].pl ].R) {
		add(i, d, T[cur].pl);
	}
	else {
		add(i, d, T[cur].pr);
	}
	
	T[cur].s = T[ T[cur].pl ].s + T[ T[cur].pr ].s;
	T[cur].mn = min(T[ T[cur].pl ].mn, T[ T[cur].pr ].mn + T[ T[cur].pl ].s);
}
void get(int L, int R, int cur, int& s, int& res) {
	if (L <= T[cur].L && R >= T[cur].R) {
		res = min(res, s + T[cur].mn);
		s += T[cur].s;
		return;
	}
	
	if (L <= T[ T[cur].pl ].R) {
		get(L, R, T[cur].pl, s, res);
	}
	if (R >= T[ T[cur].pr ].L) {
		get(L, R, T[cur].pr, s, res);
	}
}

int p[MX];
int pos[MX];

int main()
{
	int n;
	ignore = scanf("%d", &n);
	
	for (int i = 1; i <= n; i++) {
		int x;
		ignore = scanf("%d", &x);
		p[i] = x;
		pos[x] = i;
	}
	
	int rt = buildTree(1, n);
	
	int cur = n;
	
	for (int rep = 1; rep <= n; rep++) {
		while (true) {
			int ts = 0, tres = 0;
			if (pos[cur] > 1) get(1, pos[cur] - 1, rt, ts, tres);
			int x = ts - tres;
			
			int s = 0, res = 0;
			get(pos[cur], n, rt, s, res);
			if (x + res >= 0) break;
			add(pos[cur], 1, rt);
			cur--;
		}
		
		printf("%d ", cur);
		
		int i;
		ignore = scanf("%d", &i);
		add(i, -1, rt);
	}
	printf("\n");
}
