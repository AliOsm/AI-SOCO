#pragma compile "03"
#include <bits/stdc++.h>
using namespace std;

#define int long long int 
#define pi pair<int,int>
#define pb push_back
#define fi first
#define se second
#define inf 1e18
#define endl '\n'
#define IOS ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define FILEIO(name) \
    freopen(name".in","r",stdin); \
    freopen(name".out","w",stdout);
#define vi vector<int>

const int g = 3, mod = 998244353, p = 998244353;

const int N = 2000005;

int pp[10];
vector<int> a;
vector<int> ans;
vector<int> b;

inline int add(int x, int y){ x += y; if(x >= mod) x -= mod; return x;}
inline int sub(int x, int y){ x -= y; if(x < 0) x += mod; return x;}
inline int mul(int x, int y){ return (x * 1ll * y) % mod;}
inline int powr(int a, int b){
    int x = 1 % mod;
    while(b){
        if(b & 1) x = mul(x, a);
        a = mul(a, a);
        b >>= 1;
    }
    return x;
}
inline int inv(int a){ return powr(a, mod - 2);}

const int MX = 21;
int W[1 << MX], invW[1 << MX]; // max polynomial input/output -> (1 << MX)
int maxn;

void precompute_powers(){
    int p2 = p - 1, MAXN = 0;
    while(p2 % 2 == 0){
        p2 >>= 1;
        MAXN ++;
    }
    MAXN = min(MAXN, MX);
    int g1 = powr(g, (p - 1) >> MAXN);
    maxn = 1 << MAXN;
    int st = 1;
    for(int i = 0; i < maxn; i++){
        W[i] = st;
        st = mul(st, g1);
    }
    for(int i = 0; i < maxn; i++){
        invW[i] = (i == 0) ? 1 : W[maxn - i];
    }
}

void fft (vector<int> & a, bool invert) {
    int n = (int) a.size();

    for (int i=1, j=0; i<n; ++i) {
        int bit = n >> 1;
        for (; j>=bit; bit>>=1)
            j -= bit;
        j += bit;
        if (i < j)
            swap (a[i], a[j]);
    }

    for (int len=2; len<=n; len<<=1) {
        for (int i=0; i<n; i+=len) {
            int ind = 0,ADD = maxn/len;
            for (int j=0; j<len/2; ++j) {
                int u = a[i+j],  v = mul(a[i+j+len/2], (invert?invW[ind]:W[ind]));
                a[i+j] = add(u, v);
                a[i+j+len/2] = sub(u, v);
                ind += ADD;
            }
        }
    }
    if (invert){
        int invn = inv(n);
        for (int i=0; i<n; ++i) a[i] = mul(a[i], invn);
    }
}

vi add(vi a, vi b){
    vi ret(max(a.size(), b.size()));
    for(int i = 0; i < ret.size(); i++){
        ret[i] = add(i < a.size() ? a[i] : 0, i < b.size() ? b[i] : 0);
    }
    return ret;
}

vi sub(vi a, vi b){ 
    vi ret(max(a.size(), b.size()));
    for(int i = 0; i < ret.size(); i++){
        ret[i] = sub(i < a.size() ? a[i] : 0, i < b.size() ? b[i] : 0);
    }
    return ret;
}

vi mul(vi a, vi b){
    int sz = a.size() + b.size() - 1;
    int k = 0;
    while((1 << k) < sz) k++;
    a.resize(1 << k); b.resize(1 << k);
    fft(a, 0); fft(b, 0);
    for(int i = 0; i < (1 << k); i++)
        a[i] = mul(a[i], b[i]);
    fft(a, 1);
    a.resize(sz);
    return a;
}

vi inverse(vi a, int sz){
    assert(a[0] != 0);
    vi x = {inv(a[0])};
    while(x.size() < sz){
        vi temp(a.begin(), a.begin() + min(a.size(), 2 * x.size()));
        vi nx = mul(mul(x, x), temp);
        x.resize(2 * x.size());
        for(int i = 0; i < x.size(); i++)
            x[i] = sub(add(x[i], x[i]), nx[i]);
    }
    x.resize(sz);
    return x;
}

vi truncate_end(vi v){
    while(!v.empty() && v.back() == 0) v.pop_back();
    if(v.empty()) v = {0};
    return v;
}

void print(vi v){
    cerr << "["; 
    for(int i = 0; i < v.size(); i++){
        cerr << v[i];
        if(i + 1 != v.size()) cerr <<" ";
        else cerr << "]";
    }
    cerr << endl;
}

// vi _inv;
vi divmod(vi f, vi g){
    if(f.size() < g.size()) return f;
    int sz = f.size() - g.size() + 1;
    reverse(f.begin(), f.end()); reverse(g.begin(), g.end());
    vi inv2 = inverse(g,g.size());
    inv2.resize(sz);
    vi _p = f; _p.resize(sz);
    vi q = mul(inv2, _p);
    q.resize(sz);
    reverse(q.begin(), q.end()); reverse(f.begin(), f.end()); reverse(g.begin(), g.end());
    return truncate_end(sub(f, mul(g, q)));
}

vector<int> go(int fuck)
{
    //cout<<lo<<" "<<hi<<endl;
    vector<int> ret;
    if(fuck==1)
    {
        ret.resize(10,0);
        for (int i=0;i<10;i++)
        {
            ret[i]=b[i];
        }
        return ret;
    }
    vector<int> v1=go(fuck/2);
    ret=mul(v1,v1);
    ret.resize((int)v1.size()+(int)v1.size()-1,0);
    if (fuck%2) 
    {
        ret=mul(ret,b);
        ret.resize((int)v1.size()+(int)v1.size()-1+10,0);
    }
    return ret;
}


signed main()
{
    precompute_powers();
    IOS;
    int n,k;
    cin>>n>>k;
    for (int i=0;i<k;i++)
    {
        int x;
        cin>>x;
        pp[x]++;
    }
    for (int i=0;i<10;i++)
    {
        if (pp[i])
        {
            a.pb(1);
            b.pb(1);
        }
        else
        {
            a.pb(0);
            b.pb(0);
        }
    }
    ans=go(n/2);
    int val=0;
    int bak=0;
    for (auto i:ans)
    {
        // cout<<i<<" "<<bak<<endl;
        bak++;
        val=val+((i*i)%mod);
        val%=mod;
    }
    cout<<val<<endl;
    return 0;
}