#include <iostream>
#include <string>
#include <map> 
#include <math.h>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <set>
#include <queue>
#include <sstream>
#include <deque>
#include <memory.h>
#include <cassert>
#include <ctime>


using namespace std;

#define ll long long
#pragma comment(linker, "/STACK:64000000")

const int maxn = 1 << 17;
const int inf = 1000000007;
const int mod = 1000000007;

int n, m, cnt;
vector<int> e[maxn];
int isRed[maxn], H[maxn], L[maxn], R[maxn], dist[maxn], a[2 * maxn];

void dfs(int v, int p = -1, int h = 0) {
	L[v] = R[v] = cnt;
	H[v] = h;
	a[cnt++] = h;
	for (int i = 0; i < e[v].size(); i++) if (e[v][i] != p) {
		dfs(e[v][i], v, h + 1);
		R[v] = cnt;
		a[cnt++] = h;
	}
}

int pw[2 * maxn];
int mn[18][1 << 18];

void build() {
	int curi = 1, curpw = 0;
	while (curi < 2 * maxn) {
		if (curi == (1 << (curpw + 1))) curpw++;
		pw[curi++] = curpw;
	}

	for (int i = 0; i < cnt; i++) mn[0][i] = a[i];
	for (int j = 1; j < 18; j++) {
		for (int i = 0; i + (1 << j) <= cnt; i++) {
			mn[j][i] = min(mn[j - 1][i], mn[j - 1][i + (1 << (j - 1))]);
		}
	}
}

void bfs() {
	queue<int> q;
	for (int i = 1; i <= n; i++) {
		if (isRed[i]) {
			dist[i] = 0;
			q.push(i);
		} else dist[i] = inf;
	}

	while (!q.empty()) {
		int v = q.front();
		q.pop();
		for (int i = 0; i < e[v].size(); i++) {
			if (dist[e[v][i]] > dist[v] + 1){
				dist[e[v][i]] = dist[v] + 1;
				q.push(e[v][i]);
			}
		}
	}
}

int get(int L, int R) {
	int p = pw[R - L + 1];
	return min(mn[p][L], mn[p][R - (1 << p) + 1]);
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	cin >> n >> m;
	for (int i = 1; i < n; i++) {
		int u, v;
		cin >> u >> v;
		e[u].push_back(v);
		e[v].push_back(u);
	}
	isRed[1] = 1;
	dfs(1);
	build();
	int K = 500;
	for (int l = 0; l < m; l += K) {
		int r = min(m - 1, l + K - 1);
		bfs();
		vector<int> v;
		for (int j = l; j <= r; j++) {
			int T, V;
			cin >> T >> V;
			if (T == 1) {
				v.push_back(V);
				isRed[V] = 1;
			}
			if (T == 2) {
				int ans = dist[V];
				for (int i = 0; i < v.size(); i++) ans = min(ans, -2 * get(min(L[V], L[v[i]]), max(R[V], R[v[i]])) + H[V] + H[v[i]]);
				cout << ans << endl;
			}
		}
	}

	return 0;
}