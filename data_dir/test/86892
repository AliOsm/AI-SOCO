#include <cstdio>
#include <cstring>
#include <queue>
#include <algorithm>
#include <iostream>
#include <vector>
#include <unordered_map>
//#include <bits/stdc++.h>
#include <cassert>
using namespace std;

#define pb push_back
#define mp make_pair
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> ii;

const int MAXN = 3e5+1;
int ch[MAXN+10][2], Fa[MAXN+10], rev[MAXN+10], que[MAXN+10];
bool isroot(int u){
    if(!Fa[u]) return 1;
    return ch[Fa[u]][0] != u && ch[Fa[u]][1] != u;
}
void Rotate(int u){
    bool d = ch[Fa[u]][1] == u;
    int x = Fa[u], y = Fa[x];
    Fa[u] = y;
    if(!isroot(x)) ch[y][ch[y][1] == x] = u;
    ch[x][d] = ch[u][!d]; Fa[ch[u][!d]] = x;
    ch[u][!d] = x; Fa[x] = u;
}
void push_down(int u){
    if(rev[u]){
        rev[ch[u][0]]^=1;
        swap(ch[ch[u][0]][0], ch[ch[u][0]][1]);
        rev[ch[u][1]]^=1;
        swap(ch[ch[u][1]][0], ch[ch[u][1]][1]);
        rev[u] ^= 1;
    }
}
void Splay(int u){
    int top = 0;
    que[++top] = u;
    for(int i=u;!isroot(i);i=Fa[i])
        que[++top] = Fa[i];
    top++;
    while(--top) push_down(que[top]);
    while(!isroot(u)){
        int x = Fa[u], y = Fa[x];
        if(!isroot(x)){
            if((ch[y][0] == x) ^ (ch[x][0] == u)) Rotate(x);
            else Rotate(u);
        }
        Rotate(u);
    }
}
void Access(int u){
    int t = 0;
    while(u){
        Splay(u);
        ch[u][1] = t;
        t = u;
        u = Fa[u];
    }
}
void reset_root(int u){
    Access(u);
    Splay(u);
    rev[u] ^= 1;
    swap(ch[u][0], ch[u][1]);
}
void Link(int x, int y){
    reset_root(x);
    Fa[x] = y;
    Splay(x);
}
void Cut(int x, int y){
    reset_root(x);
    Access(y);
    Splay(y);
    ch[y][0] = Fa[x] = 0;
}
int find_root(int x)
{
    while (Fa[x])
        x = Fa[x];
    return x;
}
int n, m, q;
vector<int> g[MAXN];
int reach[MAXN];
int up[MAXN];
ll sum[MAXN];
int main()
{
    scanf("%d %d", &n, &m);
    for (int i = 0; i < m; ++i)
    {
        int u, v;
        scanf("%d %d", &u, &v);
        g[u].pb(v);
        g[v].pb(u);
    }
    int nxt = 1;
    for (int i = 1; i <= n; ++i)
    {
        if (nxt < i)
            nxt = i;
        while (nxt <= n)
        {
            int j;
            bool work = true;
            for (j = 0; j < g[nxt].size(); ++j)
            {
                int e = g[nxt][j];
                if (e < i || e >= nxt)
                    continue;
                if (find_root(e) == find_root(nxt))
                {
                    work = false;
                    while (j)
                    {
                        --j;
                        int e = g[nxt][j];
                        if (e < i || e >= nxt)
                            continue;
                        Cut(e, nxt);
                    }
                    break;
                }
                else
                {
                    Link(e, nxt);
                }
            }
            if (work)
                ++nxt;
            else
                break;
        }
        reach[i] = nxt-1;
        for (auto e : g[i])
        {
            if (e < i || e >= nxt)
                continue;
            Cut(e, i);
        }
    }
    int last = 1;
    for (int i = 1; i <= n; ++i)
    {
        while (last <= n && reach[last] <= i)
            ++last;
        up[i] = last;
    }
    sum[0] = 0;
    for (int i = 1; i <= n; ++i)
        sum[i] = sum[i-1] + reach[i]-i+1;
    scanf("%d", &q);
    for (int i = 0; i < q; ++i)
    {
        int l, r;
        scanf("%d %d", &l, &r);
        int tmp = up[r]-1;
        tmp = min(r, tmp);
        tmp = max(tmp, l-1);
        ll left = r-tmp;
        printf("%lld\n", sum[tmp]-sum[l-1]+(1ll+left)*left/2);
    }
        
}
