#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>
#include <tuple>

using namespace std;
using ll = long long;
const int oo = numeric_limits<int>::max() / 2;
const int N = 100010;

vector<int> g[N];
int w[N];
bool used[N];

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie();
  int n;
  cin >> n;

  fill(w, w + N, 0);
  fill(used, used + N, false);
  for(int i = 2; i <= n; ++i) {
    for(int j = 2; j * j <= i; ++j) {
      if (i % j == 0) {
        g[i].emplace_back(j);
        g[j].emplace_back(i);
        w[i] += j;
        if (i / j != j) {
          g[i].emplace_back(i / j);
          g[i / j].emplace_back(i);
          w[i] += i / j;
        }
      }
    }
  }

  // for(int i = 1; i <= n; ++i) {
  //   cout << w[i] << "; " << i << " -> ";
  //   for(int j : g[i]) {
  //     cout << j << ", ";
  //   }
  //   cout << endl;
  // }

  function<ll(const int)> dfs = [&](const int v) {
    used[v] = true;
    ll s = w[v];
    for(int i : g[v]) {
      if (used[i]) continue;
      s += dfs(i);
    }
    return s;
  };

  ll ret = 0;
  for(int i = 1; i <= n; ++i) {
    if (!used[i]) {
      ret = max(ret, dfs(i));
    }
  }
  
  cout << 4 * ret << endl;
  return 0;
}
