#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

const int N = 1e5 + 10;
vector<int> a[N];

int main() {
  int n;
  scanf("%d", &n);
  for (int i = 1; i < n; ++i) {
    int x, y;
    scanf("%d%d", &x, &y);
    --x; --y;
    a[x].push_back(y);
    a[y].push_back(x);
  }
  int cnt = 0, k = -1;
  vector<int> leaves;
  for (int i = 0; i < n; ++i) {
    if (a[i].size() > 2) {
      k = i;
      ++cnt;
    } else if (a[i].size() == 1) {
      leaves.push_back(i);
    }
  }
  if (cnt > 1) {
    puts("No");
  } else {
    puts("Yes");
    if (k < 0) k = leaves[0];
    printf("%d\n", (int)a[k].size());
    for (auto& v : leaves) {
      if (v == k) continue;
      printf("%d %d\n", k + 1, v + 1);
    }
  }
  return 0;
}
