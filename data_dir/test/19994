#include<bits/stdc++.h>
#define int long long int
#define ld long double
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define rev(i,n,init) for(int i=n;i>=init;i--)
#define MAXN 200005
#define MOD2 998244353
#define MOD1 1e9+7
#define f first
#define s second
#define ylol1 y1
#define endl '\n'
#define pii pair<int,int>
#define piii pair<pii,int>
#define precise(i) cout<<fixed<<setprecision(i)
#define codejam cout<<"Case #"<<ii+1<<": ";
#define impossible cout<<"IMPOSSIBLE"<<endl;
#define error(s) throw runtime_error(s)
using namespace std;
const long double PI = atan(1.0)*4;
const int64_t INF=1e14;
const int32_t LOG=21;
const int MOD=MOD2;

bool dp[1005][2005];
char bef[1005][2005];

int32_t main()
{ 
      getFaster;
      int tests=1;
      //cin>>tests;
      rep(ii,0,tests)
      {
            int n,k;
            cin>>n>>k;
            string s;
            cin>>s;
            
            dp[0][0+1001]=true;
            rep(i,1,n+1)
            {
            	 int low=-k+1,high=k-1;
            	 if(i==n){low--;high++;}
                 rep(j,low,high+1)
                 {
                 	  if(s[i-1]=='?')
                 	  {
                 	  	  if(dp[i-1][j-1+1001])
                 	  	  {
                 	  	  	  bef[i][j+1001]='W';
                 	  	  	  dp[i][j+1001]=true;
                 	  	  }
                 	  	  else if(dp[i-1][j+1+1001])
                 	  	  {
                 	  	  	  bef[i][j+1001]='L';
                              dp[i][j+1001]=true;
                 	  	  }
                 	  	  else if(dp[i-1][j+1001])
                 	  	  {
                               bef[i][j+1001]='D';
                               dp[i][j+1001]=true;
                 	  	  }	
                 	  }
                 	  else if(s[i-1]=='W' && dp[i-1][j-1+1001])
                 	  {
                 	  	  bef[i][j+1001]='W';
                 	  	  dp[i][j+1001]=true;	  
                 	  }
                 	  else if(s[i-1]=='L' && dp[i-1][j+1+1001])
                 	  {
                 	  	  bef[i][j+1001]='L';
                 	  	  dp[i][j+1001]=true;
                 	  }
                 	  else if(s[i-1]=='D' && dp[i-1][j+1001])
                 	  {
                 	  	   bef[i][j+1001]='D';
                 	  	   dp[i][j+1001]=true;
                 	  }
                 }
            }
            int i=INF,j=INF;
            if(dp[n][-k+1001])
            i=n,j=-k+1001;
            else if(dp[n][k+1001])
            i=n,j=k+1001;

            if(i==INF)
            {
            	cout<<"NO"<<endl;
            	return 0; 
            }	

            string str="";
            while(i>0)
            {
            	 str.push_back(bef[i][j]);
            	 if(bef[i][j]=='W')j--;
            	 else if(bef[i][j]=='L')j++;
            	 i--;
            }
            reverse(str.begin(),str.end());
            cout<<str<<endl;  
      }
      return 0;                         
}

/*
 TIPS:
 1.) Check for corner cases (like 0 is exception case)
 2.) Check for global memory sizes,memory refreshments and its complexity 
 3.) Check for sorting criteria (if used 1-based indexing)
 4.) Check for numbers overflow (while multiplying and doing MOD)
 5.) Check for typecasting issues like int to float( while dividing numbers)
*/