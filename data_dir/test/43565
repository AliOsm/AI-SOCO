# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

# include <stdio.h>
# include <bits/stdc++.h>


#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace __gnu_pbds;
using namespace std;
 
typedef
tree<pair<int,int>,null_type,less<pair<int,int>>,rb_tree_tag, tree_order_statistics_node_update> ordered_set;

inline bool isvowel (char c) {
	c = tolower(c);
    if (c == 'a' || c == 'e' || c == 'i' || c == 'y' || c == 'o' || c == 'u') return 1;
    return 0;
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 1e5 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 801;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, m, k;
set < int > pos[N];
struct block {
	ll t[N];
	inline void upd (int i, int x) {
		for (; i < N; i |= (i + 1))
			t[i] += x;
	}
	inline ll get (int r) {
		ll res = 0;
		while (r > 0) {
			res += t[r];
			r = (r & (r + 1)) - 1;
		}
		return res;
	}
} f[202];

int nxt[N];
int a[N];
int id[N];
inline int get_pre (int i) {
	auto it = pos[a[i]].lower_bound(i);
	-- it;
	return *it;
}
inline int get_nxt (int i) {
	auto it = pos[a[i]].upper_bound(i);
	return *it;
}
inline ll get(int l, int r) {
	ll res = 0;
	if (id[l] == id[r]) {
		for (int j = l; j <= r; j ++)
			if (nxt[j] <= r)
				res += nxt[j] - j;
		return res;
	}
	for (int j = l; id[j] == id[l]; j ++)
		if (nxt[j] <= r)
			res += nxt[j] - j;
	for (int j = r; id[j] == id[r]; j --)
		if (nxt[j] <= r)
			res += nxt[j] - j;
	for (int j = id[l] + 1; j < id[r]; j ++)
		res += f[j].get(r);

	return res;	
		
}

inline void calc (int i) {
	if (i < 1 || i > n) return ;
	int nw = get_nxt(i);

	if (nxt[i]) {
		f[id[i]].upd(nxt[i], -nxt[i] + i);
	}
	f[id[i]].upd(nw, (nw - i));
	nxt[i] = nw;
}

inline void change (int p, int x) {
	if (a[p] == x) return ;

	int ps = get_pre(p);
	pos[a[p]].erase(p);
	a[p] = x;
	calc (ps);
	pos[x].insert(p);
	calc (p);
	ps = get_pre(p);
	calc (ps);
}


int main () {
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; i ++) {
		id[i] = i / Magic;
		scanf("%d", a + i);
		pos[a[i]].insert(i);
		pos[i].insert(0);
		pos[i].insert(n + 1);
	}

	for (int i = 1; i <= n; i ++) {
		calc (i);
	}

	for (int i = 1, l, r; i <= m; i ++) {
		int type;
		scanf("%d", &type);
		scanf("%d%d", &l, &r);
			
		if (type == 1) {
			change(l, r);
		} else {
			printf("%lld\n", get(l, r));
		}
	}

	return Accepted;
}

// B...a