# include <bits/stdc++.h>
//# pragma GCC optimize("Ofast")
# define FILE
using namespace std;

const int N = 2e5 + 100;

int n, a[N], b[N], c[N], d[N];
long long ans, fw[4*N];

void add( int x ){
    for( int i = x; i > 0; i -= (i&-i) ){
        fw[i] ++;
    }
}
long long get( int x ){
    long long ret = 0;
    for( int i = x; i < 4*N; i += (i&-i) ){
        ret += fw[i];
    }
    return ret;
}
int main(){
    # ifdef FILEs
        freopen( "input.txt", "r", stdin );
        freopen( "output.txt", "w", stdout );
    # endif
    ios_base::sync_with_stdio(false);
    cin >> n;
    for( int i = 1; i <= n; i ++ ){
        cin >> a[i];
    }
    for( int i = 1; i <= n;i ++ ){
        cin >> b[i];
    }
    for( int j = 1; j <= n; j ++ ){
        c[j] = a[j] - b[j];
        d[j] = -c[j];
    }
    vector < int > vc;
    for( int i = 1; i <= n; i ++ ){
        vc.push_back( c[i] );
        vc.push_back( d[i] );
    }
    sort( vc.begin(), vc.end() );
    map < int, int > mp; int cnt = 1;
    for( auto c: vc ){
        if( mp.find(c) == mp.end() )
            mp[c] = cnt++;
    }
    for( int i = 1; i <= n; i ++ ){
        c[i] = mp[c[i]];
        d[i] = mp[d[i]];
    }
    for( int i = 1; i <= n; i ++ ){
        ans += get( d[i]+1 );
        add( c[i] );
    }
    cout << ans;


    cerr << "\nTime elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
    return 0;
}