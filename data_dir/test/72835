#include<bits/stdc++.h>
#define lf double
#define ll long long
#define ull unsigned ll
#define ii pair<int,int>
#define li pair<ll,int>
#define iii pair<ii,int>
#define iiii pair<ii,ii>
#define iiii2 pair<int,iii>
#define lii pair<ll,ii>
#define lolo pair<ll,ll>
#define heap priority_queue
#define mp make_pair
#define st first
#define nd second
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define all(x) x.begin(),x.end()
#define len(x) strlen(x)
#define sz(x) (int) x.size()
#define orta ((bas+son)/2)
#define min3(x,y,z) min(min(x,y),z)
#define max3(x,y,z) max(max(x,y),z)
#define umin(x,y) x=min(x,y)
#define umax(x,y) x=max(x,y)
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define MOD 998244353
#define inf 1000000001
#define N 1000005
#define LOG 20
#define MAX 1000005
#define KOK 350
#define EPS 0.000000000001
#define pw(x) (1<<(x))
#define PI 3.1415926535
using namespace std;

int n,x,y;
int dom[N],der[N],sub[N],heavy[N],nodeof[N];
ii S[N*4];
vector<int> v[N];

void build(int node,int bas,int son) {

	if(bas==son) {

		S[node]={0,-bas};
		nodeof[bas]=node;

		return ;

	}

	build(node*2,bas,orta);
	build(node*2+1,orta+1,son);

	S[node]=max(S[node*2],S[node*2+1]);

}

void up(int x,int val) {

	S[nodeof[x]].st+=val;

	for(int cur=(nodeof[x]>>1);cur>=1;cur>>=1) {

		S[cur]=max(S[cur<<1],S[cur<<1|1]);

	} 

}

void dfs3(int node,int ata,int val) {

	up(der[node],val);

	for(int i:v[node]) {

		if(i==ata) continue ;

		dfs3(i,node,val);

	}

}

void dfs2(int node,int ata,bool renew) {

	for(int i:v[node]) {

		if(i==ata || i==heavy[node]) continue ;

		dfs2(i,node,true);

	}

	if(heavy[node]) dfs2(heavy[node],node,false);

	for(int i:v[node]) {

		if(i==ata || i==heavy[node]) continue ;

		dfs3(i,node,1);

	}

	up(der[node],1);

	int mx=-S[1].nd;

	dom[node]=mx-der[node];

	if(renew) {

		dfs3(node,ata,-1);

	}

}

void dfs1(int node,int ata) {

	sub[node]=1;

	der[node]=der[ata]+1;

	int mx=-1;

	for(int i:v[node]) {

		if(i==ata) continue ;

		dfs1(i,node);

		sub[node]+=sub[i];

		if(sub[i]>mx) {

			mx=sub[i];

			heavy[node]=i;

		}

	}

}

int main() {

	#if 0
	freopen("input.txt","r",stdin);

	#endif

	scanf("%d",&n);

	build(1,1,n);

	for(int i=1;i<n;i++) {

		scanf("%d %d",&x,&y);

		v[x].pb(y);
		v[y].pb(x);

	}

	dfs1(1,0);

	dfs2(1,0,false);

	for(int i=1;i<=n;i++) {

		printf("%d\n",dom[i]);

	}

}