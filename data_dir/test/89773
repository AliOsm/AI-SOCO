#include<bits/stdc++.h>
using namespace std;
#define M 100005
typedef pair<int, int> pii;

int pri[M], tree[4*M];
pii ara[M], bara[M];
int dp1[M], dp2[M];

void update(int node, int i, int j, int x, int val)
{
    int mid = (i+j)>>1;

    if(i == j && i == x)
    {
        tree[node] = val;
        return;
    }
    if(i > x || j < x) return;

    update(2*node, i, mid, x, val);
    update(2*node+1, mid+1, j, x, val);
    tree[node] = max(tree[2*node], tree[2*node+1]);

    return;
}

int query(int node, int i, int j, int u, int v)
{
    int mid = (i+j)>>1;

    if(i >= u && j <= v) return tree[node];
    if(i > v || j < u) return 0;

    return max(query(2*node, i, mid, u, v), query(2*node+1, mid+1, j, u, v));
}

int main()
{
    int n, m, i, j, k, p, q, x, y;

    cin>>n>>m;
    for(i = 1; i <= n; i++)
    {
        cin>>x>>y;
        pri[x]++, pri[y+1]--;
    }

    for(i = 1; i <= m; i++)
    {
        pri[i] += pri[i-1];
        ara[i].first = pri[i], ara[i].second = i;
        bara[m-i+1].first = pri[i], bara[m-i+1].second = m-i+1;
    }

    sort(ara+1, ara+m+1);
    sort(bara+1, bara+m+1);

    for(i = 1; i <= m; i++)
    {
        j = ara[i].second;
        dp1[j] = query(1, 1, m, 1, j-1)+1;
        update(1, 1, m, j, dp1[j]);
    }

    memset(tree, 0, sizeof(tree));
    for(i = 1; i <= m; i++)
    {
        j = bara[i].second;
        dp2[j] = query(1, 1, m, 1, j-1)+1;
        update(1, 1, m, j, dp2[j]);
    }

    x = 0;
    for(i = 1; i <= m; i++) x = max(x, dp1[i]+dp2[m-i+1]-1);

    printf("%d\n", x);

    return 0;
}
