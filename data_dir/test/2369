////#if !defined(YCM) && 1
////#define _FORTIFY_SOURCE 0
//#pragma GCC optimize("Ofast,no-stack-protector")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
////#pragma GCC target("avx")
//////#pragma GCC optimize ("O3")
//////#pragma GCC target ("sse4")
////#include <stdio.h>
////#endif
//#include <unistd.h>
////#pragma GCC diagnostic ignored "-Wunused-result"
////#pragma GCC diagnostic ignored "-Wunused-function"
#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double
#define ull unsigned long long int
#define clr(a) memset(a,0,sizeof(a))
#define clr_(a) memset(a,-1,sizeof(a))
#define pb(a) push_back(a)
#define pii pair<int,int>
#define eps 1e-9
#define inf INT_MAX
#define pi acos(-1.0)
#define ff first
#define ss second
#define INF (ll)1e18
#define m_p make_pair
#define all(v) v.begin(),v.end()
int fx[]={0,0,-1,1,-1,1,1,-1};
int fy[]={1,-1,0,0,1,1,-1,-1};
ll lcm(ll a,ll b){return (a/__gcd(a,b))*b;}
ll bigmod(ll a,ll p,ll mod){ll ans=1;while(p){if(p&1)ans=ans*a%mod;a=a*a%mod;p>>=1;}return ans;}
ll power(ll x,ll n){if(n==0)return 1;else if(n%2==0){ll y=power(x,n/2);return y*y;}else return x*power(x,n-1);}

#ifdef shaft
     #define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template < typename Arg1 >
    void __f(const char* name, Arg1&& arg1){
        cerr << name << " is " << arg1 << std::endl;
    }
    template < typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names+1, ',');
        cerr.write(names, comma - names) << " is " << arg1 <<endl;
        __f(comma+1, args...);
    }
#else
    #define debug(...)
#endif
const int N=(int)3e5+5;
const int mod=(int)1e9+7;
ll vis[N];
int done[N];
vector<pair<int,ll> > adj[N];
priority_queue<pair<ll,int> >pq;
void dijkstra()
{
     while(!pq.empty())
     {
         int s=pq.top().second;
         ll cost=pq.top().first*(-1);
         pq.pop();
         if(done[s]==1)continue;
         for(int i=0;i<adj[s].size();i++)
         {
             int t=adj[s][i].first;
             ll e=adj[s][i].second;
             if(cost+e+e<vis[t])
             {
                 vis[t]=cost+e+e;
                 pq.push(m_p(-vis[t],t));
             }
         }
         done[s]=1;
     }
}

int main()
{
    ios_base::sync_with_stdio(false); cout.setf(ios::fixed); cout.precision(10); cout.tie(nullptr); cin.tie(nullptr);
    #ifdef shaft
        freopen("in.txt","r",stdin);
        //freopen("out.txt","w",stdout);
    #endif ///shaft
    int n, m;
    while(cin >> n >> m){
        clr(done);
        for(int i = 1; i <= m; i++){
            int u, v;
            ll w;
            cin >> u >> v >> w;
            u -= 1; v -= 1;
            adj[u].pb(m_p(v,w));
            adj[v].pb(m_p(u,w));
        }
        for(int i=0;i<n;i++){
            cin >> vis[i];
            pq.push(m_p(-vis[i],i));
        }
        dijkstra();
        for(int i = 0; i < n; i++)
            cout << vis[i] <<" ";
        cout << endl;
    }
    return 0;
}



