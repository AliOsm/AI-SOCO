/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const ld PI = 3.14159265358979323846;

#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;


const int N = 1e4+5;
int dp[N], parent[N];

class CSpySyndrome2 {
public:
    int n, ma;
    string s;
    unordered_map<string, string> Map;
    unordered_set<string> Set;
    string lower(string s){
        for(char &c: s) if(c>='A' and c<='Z') c = 'a' + c - 'A';
        return s;
    }
    bool ok(int start, int end){
        string temp = "";
        for(int i = end; i>=start; --i) temp += s[i];
        return Set.find(temp)!=Set.end();
    }
    bool rec(int i){
        if(i==n) return 1;
        if(dp[i]!=-1) return dp[i];
        bool res = false;
        for(int j = i; j<i+ma and j<n; ++j){
            if(ok(i, j) and rec(j+1)){
                parent[i] = j+1;
                return dp[i] = 1;
            }
        }
        return dp[i] = 0;
    }
    void solve(std::istream& in, std::ostream& out) {
		in>>n; in>>s;
        int m; in>>m;
        ma = 0;
        while(m--){
            string x; in>>x;
            int sz = x.length();
            ma = max(ma, sz);
            string lo = lower(x);
            Map[lo] = x;
            Set.insert(lo);
        }

        memset(dp, -1, sizeof(dp));
        memset(parent, -1, sizeof(parent));
        rec(0);
        int cur = 0;
        while(cur!=-1){
            int next = parent[cur];
            string temp = "";
            for(int i = next-1; i>=cur; --i) temp += s[i];
            out<<Map[temp]<<' ';
            cur = next;
        }
	}
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	CSpySyndrome2 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
