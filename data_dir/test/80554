#include <bits/stdc++.h>
using namespace std;

const int N = 2020, M = 1 << 12, MOD = 1000 * 1000 * 1000 + 7;

int n, k, a[N], dp[N][M];

int sum(int a, int b) {
	a += b;
	if(a < 0)
		a += MOD;
	else if(a >= MOD)
		a -= MOD;
	return a;
}

void _sum(int &a, int b) {
	a = sum(a, b);
}

int mul(int a, int b) {
	return 1LL * a * b % MOD;
}

int f(int mask) {
	for (int i = 0;; i++)
		if(mask & (1 << i))
			return i;
}

int merge(int mask, int add) {
	if(mask == 0)
		return 1 << add;
	int dex = f(mask);
	if(dex < add)
		mask = 1 << add;
	else if(dex > add)
		mask ^= 1 << add;
	else {
		mask ^= 1 << dex;
		add++;
		return merge(mask, add);
	}
	return min(mask, 1 << k);
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n >> k;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	if(a[0])
		dp[0][a[0]] = 1;
	else
		dp[0][2] = dp[0][4] = 1;
	
	for (int i = 0; i < n - 1; i++)
		for (int mask = 0; mask <= (1 << k); mask++) {
			if(a[i + 1])
				_sum(dp[i + 1][merge(mask, (a[i + 1] == 2? 1: 2))], dp[i][mask]);
			else
				_sum(dp[i + 1][merge(mask, 1)], dp[i][mask]), _sum(dp[i + 1][merge(mask, 2)], dp[i][mask]);
		}
	cout << dp[n - 1][1 << k];
	return 0;
}
