
//be naame khodaa
#include <iostream>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <string>
#include <cstdio>
#include <algorithm>
#include <set>
#include <cassert>
#include <iomanip>
#include <cstring>
#include <sstream>
using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
#define F first
#define S second
#define pb push_back
#define mp make_pair
#define rank pap

const int N = 2005;

string s[N];
int dp[N][N];
int n, k;
int rank[N][N];
vector <pii> diag[2*N];

bool cmp(pii A, pii B){
	int x1 = A.F, y1 = A.S, x2 = B.F, y2 = B.S;
	if (s[x1][y1] != s[x2][y2])
		return s[x1][y1] < s[x2][y2];
	int mn1, mn2;
	if (x1+1 == n)
		mn1 = rank[x1][y1+1];
	else if (y1+1 == n)
		mn1 = rank[x1+1][y1];
	else
		mn1 = min(rank[x1+1][y1], rank[x1][y1+1]);
	if (x2+1 == n)
		mn2 = rank[x2][y2+1];
	else if (y2+1 == n)
		mn2 = rank[x2+1][y2];
	else
		mn2 = min(rank[x2+1][y2], rank[x2][y2+1]);
	return mn1 < mn2;
}

int main(){
	ios::sync_with_stdio(0);
	cin >> n >> k;
	for (int i = 0; i < n; i++)
		cin >> s[i];
	dp[0][0] = 0;
	for (int i = 1; i < n; i++){
		dp[i][0] = dp[i-1][0] + (s[i-1][0] != 'a' ? 1 : 0);
		dp[0][i] = dp[0][i-1] + (s[0][i-1] != 'a' ? 1 : 0);
	}
	for (int i = 1; i < n; i++)
		for (int j = 1; j < n; j++)
			dp[i][j] = min(dp[i][j-1] + (s[i][j-1] != 'a' ? 1 : 0), dp[i-1][j] + (s[i-1][j] != 'a' ? 1 : 0));
	if (dp[n-1][n-1] < k || (dp[n-1][n-1] == k && s[n-1][n-1] == 'a')){
		for (int i = 0; i < 2*n-1; i++)
			cout << 'a';
		cout << endl;
		return 0;
	}
	int rc = 0;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++){
			if (dp[i][j] > k) continue;
			rc = max(rc, i + j);
		}
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			diag[i+j].pb(mp(i, j));
	rank[n-1][n-1] = 0;
	for (int i = 2*n-3; i >= rc; i--){
		sort(diag[i].begin(), diag[i].end(), cmp);
		int rnk = 0;
		for (int j = 0; j < diag[i].size(); j++){
			if (j && cmp(diag[i][j-1], diag[i][j]))
				rnk++;
			rank[diag[i][j].F][diag[i][j].S] = rnk;
		}
	}
	pii cur;
	for (pii can : diag[rc])
		if (dp[can.F][can.S] <= k){
			cur = can;
			break;
		}
	int x = cur.F, y = cur.S;
	for (int i = 0; i < rc; i++)
		cout << 'a';
	while (1){
		cout << s[x][y];
		if (x == n-1 && y == n-1)
			break;
		if (x == n-1){
			y++;
			continue;
		}
		if (y == n-1){
			x++;
			continue;
		}
		if (rank[x][y+1] < rank[x+1][y])
			y++;
		else
			x++;
	}
	cout << endl;
	return 0;
}

