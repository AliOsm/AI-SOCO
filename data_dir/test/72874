#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

const int N = 2e5 + 10;
char s[N];
int a[N];
int dp[N][3];

int main() {
  int n;
  scanf("%d%s", &n, s);
  map<char, int> A;
  A['R'] = 0;
  A['G'] = 1;
  A['B'] = 2;
  string B = "RGB";
  for (int i = 0; i < n; ++i) {
    a[i] = A[s[i]];
  }
  for (int k = 0; k < 3; ++k) {
    dp[1][k] = k == a[0] ? 0 : 1;
  }
  for (int i = 2; i <= n; ++i) {
    for (int k = 0; k < 3; ++k) {
      dp[i][k] = INF;
      for (int j = 0; j < 3; ++j) {
        if (j == k) continue;
        dp[i][k] = min(dp[i][k], dp[i - 1][j] + (a[i - 1] == k ? 0 : 1));
      }
    }
  }
  int best = INF, best_k = -1;
  for (int k = 0; k < 3; ++k) {
    if (best > dp[n][k]) {
      best = dp[n][k];
      best_k = k;
    }
  }
  printf("%d\n", best);
  for (int i = n, j = best_k; i >= 1; --i) {
    s[i - 1] = B[j];
    for (int k = 0; k < 3; ++k) {
      if (j != k && dp[i - 1][k] + (a[i - 1] == j ? 0 : 1) == dp[i][j]) {
        j = k;
        break;
      }
    }
  }
  puts(s);
  return 0;
}
