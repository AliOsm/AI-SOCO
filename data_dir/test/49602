#include<bits/stdc++.h>
#include <regex>
#include<ext/numeric>
#include<ext/hash_map>
using namespace std;
using namespace __gnu_cxx;

#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)  (int)v.size()
#define WHITE -1
#define GREY   0
#define BLACK  1
#define CLR(a,v) memset(a,v,sizeof a)
#define PC(x) __builtin_popcount(x)
#define MP make_pair

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<ll> vll;
//typedef unsigned int ui;

typedef complex<double> point;
//#define X real()
//#define Y imag()
//#define vec(a,b) ((b)-(a))
//#define dot(a,b) ((conj(a)*(b)).real())
//#define cross(a,b) ((conj(a)*(b)).imag())
#define colliner pointOnLine

const double PI = acos(-1.0);

int dx[] = { 0, -1, 0, 1, -1, -1, 1, 1 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };

int DX[] = { 1, 1, -1, -1, 2, 2, -2, -2 };
int DY[] = { 2, -2, 2, -2, 1, -1, 1, -1 };

const int MAX = 1e5 + 5, MOD = 1e9 + 7, oo = (1 << 30);
const ll OO = 1ll << 60, MAXN = 1e15;
const double EPS = 1e-9;

int n, m, comp[MAX * 4], compID;
vi s[MAX], adjList[MAX * 4], adjListT[MAX * 4], SFT;
bool r[MAX], vis[MAX * 4], sat = 1;

void addEdge(int u, int v) {
	adjList[u].push_back(v);
	adjListT[v].push_back(u);
}

void dfs(int u, int t) {
	vis[u] = 1;
	vi neighbour = t == 0 ? adjList[u] : adjListT[u];
	int siz = sz(neighbour);
	for (int i = 0; i < siz; ++i) {
		int v = neighbour[i];
		if (!vis[v])
			dfs(v, t);
	}
	if (!t)
		SFT.push_back(u);
	else {
		comp[u] = compID;
		if (comp[u] == comp[u ^ 1])
			sat = 0;
	}
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
//	freopen("out.txt", "w",stdout);
#endif
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; ++i)
		scanf("%d", &r[i]);
	for (int i = 0; i < m; ++i) {
		int x;
		scanf("%d", &x);
		while (x--) {
			int u;
			scanf("%d", &u);
			--u;
			s[u].push_back(i);
		}
	}
	for (int i = 0; i < n; ++i) {
		int u = s[i][0] * 2, v = s[i][1] * 2;
		if (!r[i]) {
			addEdge(u ^ 1, v);
			addEdge(v ^ 1, u);
			addEdge(u, v ^ 1);
			addEdge(v, u ^ 1);
		} else {
			addEdge(u ^ 1, v ^ 1);
			addEdge(v, u);
			addEdge(u, v);
			addEdge(v ^ 1, u ^ 1);
		}
	}
	for (int i = 0; i < (m << 1); ++i)
		if (!vis[i])
			dfs(i, 0);
	CLR(vis, 0);
	int siz = sz(SFT);
	for (int i = siz - 1; i > -1; --i)
		if (!vis[SFT[i]]) {
			++compID;
			dfs(SFT[i], 1);
		}
	puts(!sat ? "NO" : "YES");
}
