// Enjoy your stay.

#include <bits/stdc++.h>

#define EPS 1e-9
#define INF 1070000000LL
#define MOD 10007LL
#define fir first
#define foreach(it,X) for(auto it=(X).begin();it!=(X).end();it++)
#define ite iterator
#define mp make_pair
#define mt make_tuple
#define rep(i,n) rep2(i,0,n)
#define rep2(i,m,n) for(int i=m;i<(n);i++)
#define pb push_back
#define sec second
#define sz(x) ((int)(x).size())

using namespace std;

typedef istringstream iss;
typedef long long ll;
typedef pair<ll,ll> pi;
typedef stringstream sst;
typedef vector<ll> vi;

const int P = 200;
int n;
string s;

int dp[P][P][P+1];

int f(int left, int right, int n24){
	int& res = dp[left][right][n24];
	if(res != -1) return res;
	res = 0;
	
	if(left == right){
		if(n24 == 0) res = 1;
	}
	else{
		if(s[left] == s[right]){
			if(left + 1 == right){
				if(n24 == 0) res = 1;
			}
			else{
				res = f(left + 1, right - 1, n24);
			}
		}else{
			if(n24 > 0){
				res = f(left + 1, right, n24 - 1) + f(left, right - 1, n24 - 1);
			}
		}
	}
	
	return res %= MOD;
}

const int MS = P * 2 - 1;
int S;
int A[MS][MS];
int B[MS][MS];
ll work[MS][MS];

// a := a*b
void matmul(int a[][MS], int b[][MS]){
	rep(i, S){
		rep(j, S){
			ll sum = 0;
			rep2(k, i, j+1){
				sum += a[i][k] * b[k][j];
			}
			work[i][j] = sum % MOD;
		}
	}
	rep(i, S) rep(j, S) a[i][j] = work[i][j];
}

// a := a^n
void matpow(int a[][MS], ll n){
	memset(B, 0, sizeof(B));
	rep(i,S) B[i][i] = 1;
	while(n){
		if(n & 1) matmul(B, A);
		matmul(A, A);
		n >>= 1;
	}
	rep(i, S) rep(j, S) A[i][j] = B[i][j];
}

int main(){
	cin.tie(0);
	ios_base::sync_with_stdio(0);
	
	cin >> s >> n;
	int l = sz(s);
	n += l;
	int m = (n + 1) / 2;
	
	int N24 = l - 1;
	int N25 = (l + 1) / 2;
	int N26 = N25;
	S = N24 + N25 + N26;
	
	rep(i,S) rep(j,S) A[i][j] = 0;
	rep(j,S){
		if(j < N24){
			A[j][j] = 24;
			A[j][j + 1] = 1;
		}else if(j < N24 + N25){
			A[j][j] = 25;
			if(j < N24 + N25 - 1) A[j][j + 1] = 1;
			A[j][j + N25] = 1;
		}else{
			A[j][j] = 26;
		}
	}
	int A_[MS][MS];
	rep(i,S) rep(j,S) A_[i][j] = A[i][j];
	matpow(A, m-1);
	int C[MS][MS];
	rep(i,S) rep(j,S) C[i][j] = A[i][j];
	matmul(A, A_);
	
	memset(dp, -1, sizeof(dp));
	ll ans = 0;
	rep(n24, l){
		int n25 = (l - n24 + 1) / 2;
		bool last25_double = (l - n24) % 2 == 0;
		int n26 = m - n24 - n25;
		if(n26 < 0) continue;
		int ways = f(0, l-1, n24);
		ans += ways * A[N24 - n24][N24 + N25 + n25 - 1];
		if(n % 2 == 1 && last25_double){
			ans += MOD * MOD - ways * C[N24 - n24][N24 + n25 - 1];
		}
	}
	cout << ans % MOD << endl;
}