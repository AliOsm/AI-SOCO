#include <bits/stdc++.h>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)
typedef long long ll;
typedef pair < int, int > ii;

const int inf = 1e9 + 333;
const ll linf = 1e18 + inf;

const int P = 305;
const int N = 2000 + 5;
const ll mask = (1 << 30) - 1;

int a, b, c;
int idp[N];
vector < int > p;
bool h[N];
map < pair < ii, int >, int > M[P];

int f(int x, int a, int b, int c) {
	if(x < 0)
		return 1;
	if(c < b)
		swap(c, b);
	if(b < a)
		swap(b, a);
	if(c < b)
		swap(c, b);
	//printf("x = %d a = %d b = %d c = %d\n", x, a, b, c);
	if(M[x].find(make_pair(ii(a, b), c)) != M[x].end())
		return M[x][make_pair(ii(a, b), c)];
	int r = 0;
	for(int i = 1, c1 = 0; i <= a; i *= p[x], c1++)
		for(int j = 1, c2 = 0; j <= b; j *= p[x], c2++)
			for(int k = 1, c3 = 0; k <= c; k *= p[x], c3++)
				r = (r + (ll) f(x - 1, a / i, b / j, c / k) * (c1 + c2 + c3 + 1)) & mask;
	return M[x][make_pair(ii(a, b), c)] = r;
}

int main() {

	scanf("%d %d %d", &a, &b, &c);

	for(int i = 2; i <= 2000; i++) {
		if(!h[i]) {
			p.push_back(i);
			for(int j = i + i; j <= 2000; j += i)
				h[j] = i;
		}
	}

	for(int it = 0; it < p.size(); it++)
		idp[p[it]] = it;

	printf("%d\n", f(p.size() - 1, a, b, c));

	return 0;

}
