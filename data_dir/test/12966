#include <bits/stdc++.h>

using namespace std;

const char* hex_char_to_bin(char c)
{
    switch(c)
    {
        case '0': return "0000";
        case '1': return "0001";
        case '2': return "0010";
        case '3': return "0011";
        case '4': return "0100";
        case '5': return "0101";
        case '6': return "0110";
        case '7': return "0111";
        case '8': return "1000";
        case '9': return "1001";
        case 'A': return "1010";
        case 'B': return "1011";
        case 'C': return "1100";
        case 'D': return "1101";
        case 'E': return "1110";
        case 'F': return "1111";
    }
}

const int MAX = 5200 ;
char mat [MAX+1][MAX+1] ;
int sum2D [MAX + 1 ] [MAX + 1] ;

void precompute(int n)
{
    for(int i = 0 ; i < n ;i++)
        for(int j = 0 ; j < n;j++)
        {
            sum2D[i][j] = mat[i][j] - '0';

            if (i > 0) sum2D[i][j] += sum2D[i - 1][j];
            if (j > 0) sum2D[i][j] += sum2D[i][j - 1];
            if (i > 0 && j > 0) sum2D[i][j] -= sum2D[i - 1][j - 1];
        }

}
int get(int i ,int  j , int x)
{
    int k = i + x - 1 , l = j + x - 1;

    int ans = sum2D[k][l];

    if (i > 0) ans -= sum2D[i - 1][l];
    if (j > 0) ans -= sum2D[k][j - 1];
    if (i > 0 && j > 0) ans += sum2D[i - 1][j - 1];

    return  ans ;
}

bool can(int x , int n)
{
    for(int i = 0 ; i < n ; i += x )
        for(int j = 0 ; j < n ; j +=x )
        {
            int curr = get(i , j , x) ;
            if(0 < curr && curr < x * x) return  false ;
        }

    return  true ;

}


int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int n  ;
    cin >> n ;

    for(int i = 0 ; i < n ;i++)
    {
        string hex;
        cin >> hex ;

        string s ;

        for(int j = 0 ; j < n / 4 ; j++)
            s += hex_char_to_bin(hex[j]) ;

        for(int j = 0 ; j < n ; j++)
            mat[i][j] = s[j] ;

    }

    precompute(n);

    for(int i = n  ;i >= 1 ; i --)
        if(n % i == 0)
        {
            if(can(i , n))
            {
                cout << i << '\n';
                return  0 ;
            }

        }

    return 0 ;

}