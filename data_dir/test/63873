#include <bits/stdc++.h>
#define REP(i, n) for (long long i = 0; i < n; i++)
using namespace std;
typedef long long Long;

const Long N = 1e5 + 10;

set< pair<Long,Long> > adj[N];
set<Long> grupo[N];
Long parent[N];

Long findSet(Long i){
	if(parent[i] == i) return i;
	parent[i] = findSet(parent[i]);
	return parent[i];
}

void unionSet(Long i, Long j){
	Long x=findSet(i);
	Long y=findSet(j);
	if(y != x){
		Long szx = grupo[x].size();
		Long szy = grupo[y].size();
		if(szx < szy) swap(x,y);
		parent[y] = x;
		for(Long nod : grupo[y]){
			grupo[x].insert(nod);
		}
		grupo[y].clear();
	}
	return;
}

void actualiza(Long x, Long col, Long y){
	adj[x].insert({col,y});
	auto it = adj[x].find({col,y});
	if(it != adj[x].begin()){
		it--;
		if((*it).first == col){
			unionSet(y,(*it).second);
		}
		it++;
	}
	it++;
	if(it != adj[x].end()){
		if((*it).first == col){
			unionSet(y,(*it).second);
		}
	}
	grupo[findSet(x)].insert(y);
	return;
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.precision(10);
	cout << fixed;
    
    for(Long i = 1; i < N; i++){
    	parent[i] = i;
    	grupo[i].insert(i);
	}
    
    Long n, m, c, q, x, y, col;
    cin >> n >> m >> c >> q;
    for(Long i = 0; i < m; i++){
    	cin >> x >> y >> col;
    	actualiza(x,col,y);
		actualiza(y,col,x);
	}
	
	char tipo;
	for(Long i = 0; i < q; i++){
		cin >> tipo;
		if(tipo == '?'){
			cin >> x >> y;
			Long xx = findSet(x);
			if(grupo[xx].find(y) != grupo[xx].end()){
				cout << "Yes" << endl;
			}else{
				cout << "No" << endl;
			}
		}else{
			cin >> x >> y >> col;
			actualiza(x,col,y);
			actualiza(y,col,x);
		}
	}
	return 0;
}
