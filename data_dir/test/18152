#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>

using namespace std;



#define pb push_back
#define pii pair<int, int>
#define mp make_pair
#define ull unsigned long long
#pragma comment(linker, "/STACK:64000000")
#define null NULL
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define fornr(i, n) for (int i = (n); i >= 0; --i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)

typedef double ld;
typedef pair<ld, ld> pldld;
typedef long long ll;
typedef pair<ll, ll> pll;


typedef unsigned int ui;
typedef unsigned char uc;
const int infi = 1e9 + 7;
const ll infl = 1e18 + 7;

/*
const int MAX_MEM = 5e6;
int mpos = 0;
char mem[MAX_MEM];
inline void * operator new ( size_t n ) {
  char *res = mem + mpos;
  mpos += n;
  assert(mpos <= MAX_MEM);
  return (void *)res;
}
inline void operator delete ( void * ) { }

inline void * operator new [] ( size_t ) { assert(0); }
inline void operator delete [] ( void * ) { assert(0); }*/

ll ar[100500];
vector <vector<int> > g;
int sz[100500];
int cnt[100500];
int tmp[100500];
ll ans = 0;
void norm(int v, int p = -1) {
	forn(i, (int)g[v].size()) {
		if (g[v][i] == p) {
			swap(g[v][i], g[v].back());
			g[v].pop_back();
			break;
		}
	}
	forn(i, (int)g[v].size())
		norm(g[v][i], v);
}
void calc_sz(int v) {
	sz[v] = 1;
	forn(i, (int)g[v].size()) {
		int to = g[v][i];
		calc_sz(to);
		sz[v] += sz[to];
	}
	return;
}
int get(int flag, int sum, int sz) {
	if (flag)
		return sz - sum;
	return sum;
}
void dfs2(int v) {
	forn(i, (int)g[v].size())
		dfs2(g[v][i]);
	cnt[v] = 0;
	forn(i, (int)g[v].size()) {
		cnt[v] += cnt[g[v][i]];
	}
	cnt[v] = get(tmp[v], cnt[v], sz[v]);
	return;
}
ll cur_ans = 0;
void dfs3(int v, int sum_up, int sz_up) {
	sz_up++;
	sum_up = get(tmp[v], sum_up, sz_up);
	cur_ans += sum_up + cnt[v];
	sum_up += cnt[v];
	if (tmp[v])
		--sum_up;
	sz_up += sz[v] - 1;
	forn(i, (int)g[v].size()) {
		int to = g[v][i];
		int a = get(tmp[v], cnt[to], sz[to]);
		dfs3(to, sum_up - a, sz_up - sz[to]);
	}
}

int main() {
	cin.sync_with_stdio(false);
	cin.tie(0);
//	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
	//freopen("ufo.in", "r", stdin);freopen("ufo.out", "w", stdout);
	int n;
	cin >> n;
	g.resize(n);
	forn(i, n)
		cin >> ar[i];
	forn(i, n - 1) {
		int u, v;
		cin >> u >> v;
		--u, --v;
		g[v].push_back(u);
		g[u].push_back(v);
	}
	norm(0);
	calc_sz(0);
	ll ans = 0;
	forn(i, 20) {
		cur_ans = 0;
		forn(j, n)
			cnt[j] = 0;
		forn(j, n)
			if (ar[j] & (1LL << i))
				tmp[j] = 1;
			else
				tmp[j] = 0;
		dfs2(0);
		dfs3(0, 0, 0);
		ans += cur_ans * (1LL << i);
	}
	cout << ans / 2;
		
	return 0;
}