#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int st[1000009];

int mod = 1000000007;

void assert(bool b)
{
    if (!b){exit(-1);}
    return;
}

int gcd(int a, int b, int& x, int& y) {
    if (!a) {
        x = 0, y = 1;
        return b;
    }
    int xx, yy, g = gcd(b % a, a, xx, yy);
    x = yy - b / a * xx;
    y = xx;
    return g;
}

inline int normal(int n) {
    n %= mod;
    (n < 0) && (n += mod);
    return n;
}

inline int inv(int a) {
    int x, y;
    assert(gcd(a, mod, x, y) == 1);
    return normal(x);
}

inline int add(int a, int b) { return a + b >= mod ? a + b - mod : a + b; }
inline int sub(int a, int b) { return a - b < 0 ? a - b + mod : a - b; }
inline int mul(int a, int b) { return int(a * 1ll * b % mod); }
inline int _div(int a, int b) { return mul(a, inv(b)); }

int main()
{
    int a,b;
    cin >> a >> b >> mod;
    st[0]=1;
    for (int i=1;i<mod;i++)
    {
        st[i]=mul(st[i-1],a);
    }
    long long int x;
    cin >> x;
    long long int res=0;
    for (int rem=0;rem<mod-1;rem++)
    {
        int q=sub(rem,_div(b,st[rem]));
        //cout << rem << ' ' << q  << ' ' << ((x-rem)/(mod-1)-q)/mod << endl;
        res+=((x-rem)/(mod-1)-q)/mod;
        if (rem+q*1ll*(mod-1)<=x)
        {
            ++res;
        }
    }
    cout << res;
    return 0;
}
