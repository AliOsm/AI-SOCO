#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <unordered_map>
#include <sstream>
#include <iostream>
#include <cmath>
#include<cstring>
#include <cstdio>
#include <stack>
#include<iomanip>
#include<queue>
#include <unordered_set>
#include<functional>
#include<iterator>
#include<new>
#include<cstdlib>
#include<math.h>
#include<fstream>
using namespace std;
#define pi 3.141592653589793
#define ii  pair<int,int>
#define ll long long
#define p10(ans) printf("%0.10f\n", ans)
#define pr(ans) printf("%d\n", ans)
#define scc(x)  scanf("%c\n", &c)
#define pll(ans) printf("%lld\n", ans)
#define scll(x) scanf("%lld",&x)
#define scd(a)  scanf("%lf", &a)
#define sci(x)  scanf("%d",&x)
#define pc(ans)  printf("%c", ans)
#define pd(a)    printf("%lf\n", a)
#define scanfchararray(arr) scanf("%s", arr)
#define printfstring(s)    printf("%s\n", s.c_str())
#define all(v)             v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)            ((int)((v).size()))
#define mod 1000000009
#define mem(arr,d) memset(arr,d,sizeof(arr))
#define inf 10000000000000000
#define ninf -10000000000000000;
#define eps 1e-10
#define nearestPowerOfTwo(S) ((int)pow(2.0, (int)((log((double)S) / log(2.0)) + 0.5)))
#define loop0(i,n) for(int i=0;i<n;++i)
#define loop1(i,n) for(int i=1;i<=n;++i)
/*ll power(ll base, ll exp) {
base %= mod;
ll result = 1;
while (exp > 0) {
if (exp & 1)
result = (result * base) % mod;
base = (base * base) % mod;
exp >>= 1;
}
return result;
}
*/
/*long long gcd(long long a, long long b)
{
if (b == 0)return a; return gcd(b, a%b);
}
long long lcm(long long a, long long b) {
return  a * b / gcd(a, b);
}
*/
const int MAX = 4010;
int arr[MAX];
int temp[MAX];
int memo[MAX][MAX];
vector<int>idx[MAX];
map<int, int>mp;
int n;
int solve(int i, int prev) {
	int &ret = memo[i][prev];
	if (~ret)return ret;
	ret = -1e9;
	int next = arr[prev];
	auto it = upper_bound(idx[next].begin(), idx[next].end(), i);
	if (it != idx[next].end()) {
		return ret = max(ret, solve(*it, i) + 1);
	}
	else return 0;
}
int main()
{
	sci(n);
	for (int i = 0; i < n; ++i)sci(arr[i]), temp[i] = arr[i];
	if (n <= 2) { pr(n); return 0; }
	sort(temp, temp + n);
	int cnt = 0;
	for (int i = 0; i < n; ++i) {
		if (mp.count(temp[i]) == 0)mp[temp[i]] = ++cnt;
	}
	for (int i = 0; i < n; ++i)arr[i] = mp[arr[i]];
	for (int i = 0; i < n; ++i)idx[arr[i]].push_back(i);
	mem(memo, -1);
	int ans = 0;
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < i; ++j) {
			ans = max(ans, solve(i, j));
		}
	}
	pr(ans + 2);
}