#include <bits/stdc++.h>
using namespace std;

#define fr(i,n)    for(int i=0;i<n;i++)
#define fru(i,a,b) for(int i=a;i<=b;i++)
#define frd(i,a,b) for(int i=a;i>=b;i--)

typedef long long   ll;
typedef long double ld;
	
const int INF = 1e9 + 10;
const int MOD = 1e9 + 7;
const int N   = 110;

int n, m, k, cntLakes, isBadLake;
string s[N];
int mark[N][N];

int dx[4] = {1, -1, 0, 0};
int dy[4] = {0, 0, -1, 1};

struct LAKE {
   int sz;
   int xstart;
   int ystart;
   bool operator < (const LAKE &e) const { return sz < e.sz; }
} lakes[N * N];

bool valid(int x, int y) {
   return x >= 0 && x < n && y >= 0 && y < m && s[x][y] == '.' && !mark[x][y]; 
}

void dfs(int x, int y) {
   
   if(x == 0 || x == n - 1 || y == 0 || y == m - 1)
      isBadLake = 1;
      
   lakes[cntLakes].sz++;
   mark[x][y] = 1;
   
   fr(k, 4)
   {
      int xn = x + dx[k];
      int yn = y + dy[k];
      
      if(valid(xn, yn))
         dfs(xn, yn);
   }
}

void fillLake(int x, int y) {
   
   s[x][y]     = '*';
   mark[x][y]  = 1;
   
   fr(k, 4)
   {
      int xn = x + dx[k];
      int yn = y + dy[k];
 
      if(valid(xn, yn))
         fillLake(xn, yn);
   }
}

int main() {
   ios_base::sync_with_stdio(0);
   cout.tie(0); cin.tie(0);
   
   cin >> n >> m >> k;
   fr(i, n) cin >> s[i];
   
   fr(i, n) fr(j, m) if(valid(i, j))
   {
      cntLakes++;
      lakes[cntLakes].xstart = i;
      lakes[cntLakes].ystart = j;
      lakes[cntLakes].sz     = 0;
      isBadLake              = 0;
      
      dfs(i, j);
      
      if(isBadLake)
         cntLakes--;
   }

   fr(i, n) fr(j, m) mark[i][j] = 0;
   sort(lakes + 1, lakes + 1 + cntLakes);
   
   int cntChanges = 0;
   fru(i, 1, cntLakes - k)
   {
      fillLake(lakes[i].xstart, lakes[i].ystart);
      cntChanges += lakes[i].sz;
   }
   
   cout << cntChanges << "\n";
   fr(i, n) cout << s[i] << "\n";
   
   return 0;
}