// Kono Giorno Giovanna wa yume ga aru

#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;

//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/rope>
//using namespace __gnu_pbds;
//using namespace __gnu_cxx;
//
//template<class T> using Tree = tree<T, null_type, less<T>, rb_t_tag,t_order_statistics_node_update>;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
	 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;
//const long long mod = 998244353;
mt19937 rng((int) chrono::steady_clock::now().time_since_epoch().count());

// watch this
using ll = long long;
//typedef long long LL;
//using uint = unsigned int;
#define ll long long
#undef ll
const int mxN = 200010;

long long N;
long long A[mxN];

long long K;

bool check(long long md) {
	long long NcI = 1;
	long long cur = 0;
	for (long long i = N - 1; i >= 0; i--) {
//		cerr << md << ' ' << cur << '\n';
		if (A[i])
			if (NcI >= (K - cur + A[i] - 1) / A[i])
				return true;
		cur += NcI * A[i];
		if (i) {
			long long a = md + N - i;
			long long b = N - i;
			long long g = __gcd(a, b);
			a /= g;
			b /= g;
			NcI /= b;
//			cerr << md << ' ' << NcI << ' ' << a << '\n';
			if (NcI >= (K + a - 1) / a)
				return true;
			NcI *= a;
		}
	}
	return false;
}

int main(int argc, char** argv) {
#ifdef ONLINE_JUDGE
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
#endif

	cin >> N >> K;
	int fs = -1;
	long long S = 0;
	for (int i = 0; i < N; i++) {
		cin >> A[i];
		S += A[i];
		if (A[i] && fs == -1)
			fs = i;
	}
	if (*max_element(A, A + N) >= K) {
		cout << "0\n";
		return 0;
	}
	for (int i = 0; i + fs < N; i++)
		A[i] = A[i + fs];
	N -= fs;
	long long lo = 0, hi = K + 10, res = hi;
	while (lo <= hi) {
		long long md = (lo + hi) >> 1;
		if (check(md))
			hi = md - 1, res = md;
		else
			lo = md + 1;
	}
	cout << res + 1 << '\n';
	return 0;
}
