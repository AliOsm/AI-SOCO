#include<stdio.h>
#include<iostream>
#include<string.h>
#include<ctype.h>
#include<math.h>
#include<map>
#include<set>
#include<vector>
#include<queue>
#include<functional>
#include<string>
#include<algorithm>
#include<time.h>
#include<bitset>
void fre(){freopen("c://test//input.in","r",stdin);freopen("c://test//output.out","w",stdout);}
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define MP(x,y) make_pair(x,y)
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T> inline void gmax(T &a,T b){if(b>a)a=b;}
template <class T> inline void gmin(T &a,T b){if(b<a)a=b;}
using namespace std;
const int N=2e5+10,M=0,Z=1e9+7,maxint=2147483647,ms31=522133279,ms63=1061109567,ms127=2139062143;const double eps=1e-8,PI=acos(-1.0);//.0
map<int,int>mop;
struct A{};
int n;
double a[N],b[N];
double cnt()
{
	double minv=0;
	double maxv=0;
	double sum=0;
	double ans=0;
	for(int i=1;i<=n;i++)
	{
		sum+=b[i];
		gmax(ans,sum-minv);
		gmax(ans,maxv-sum);
		gmax(maxv,sum);
		gmin(minv,sum);
	}
	return ans;
}
int main()
{
	while(~scanf("%d",&n))
	{
		for(int i=1;i<=n;i++)scanf("%lf",&a[i]);
		double l=-10000;
		double r=10000;
		double ans=1e18;
		for(int tim=1;tim<=100;tim++)
		{
			double lm=(l+l+r)/3;
			for(int i=1;i<=n;i++)b[i]=a[i]-lm;
			double tmpl=cnt();
			double rm=(l+r+r)/3;
			for(int i=1;i<=n;i++)b[i]=a[i]-rm;
			double tmpr=cnt();
			if(tmpl<=tmpr)r=rm;
			else l=lm;
			gmin(ans,tmpl);
			gmin(ans,tmpr);
		}
		printf("%.12f\n",ans);
	}
	return 0;
}
/*
【题意】
给你一个整数数列a1~an
找到一个实数x，使得
a1-x,a2-x,...,an-x的weakness尽可能小
一个数列的weakness，是所有区间poorness的最大值
一个区间的poorness，是所有元素和的绝对值

也就是我们想
找到一个实数x，使得
a1-x,a2-x,...,an-x的所有区间段中，
元素的和绝对值最大的那个的区间段的元素和的绝对值尽可能小。

【类型】


【分析】
使得最大值尽可能小，感觉就是二分。
二分一个x之后，每个点的权值就确定了。
然后我们就需要找最大区间段了。

x对答案的贡献并不一定单调，但是答案一定单调。
我们知道这题有二分性质。
但是不知道二分完之后怎么做。
因为觉得二分之后还会存在n*n个区间，不知道怎么得到和的绝对值最大的那个区间。

对于区间最值，
要不我们可以通过数据结构维护，要不就通过前缀和。
数据结构想不到也不会写，只有看前缀和
但是这道题有前缀和性质么？

我们发现是有加减法性质的
但并不是绝对值有加减法性质，而是裸的前缀和会有加减法性质。
于是我们可以维护一个前缀和。
如果当前前缀和为负，我们会在之前找个最大的前驱，
如果当前前缀和为正，我们会在之前找个最小的前驱，
这样可以以O(n)的时间复杂度更新出——
元素的和绝对值最大的那个的区间段的元素和的绝对值

但是这个需要我们知道x
x具有单调性么？试试看吧

【时间复杂度&&优化】


【trick】


【数据】


*/