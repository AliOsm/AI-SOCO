#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>
 
using namespace std;
 
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define forn1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)((a).size())
#define mp make_pair
#define pb push_back
#define X first
#define Y second
#define x first
#define y second
#define y1 __y1
#define sqr(x) ((x) * (x))
 
typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
 
const int INF = (int)(1e9);
const li INF64 = (li)(INF) * (li)(INF);
const ld eps = 1e-9;
const ld pi = ld(3.1415926535897932384626433832795);
 
bool in(int i, int j, int n, int m)
{
    return i >= 1 && i <= n && j >= 1 && j <= m;
}
 
inline int myrand()
{
    return (rand() ^ (rand() << 15));
}
 
const int dx[] = {-1, 1, 1, -1};
const int dy[] = {1, 1, -1, -1};
 
const int N = 1111;

int a[N][N];
int n;
vector<int> ans;

inline bool read()
{
    if(!(cin >> n))
        return false;

    forn(i, n)
    {
        forn(j, n)
        {
            assert(cin >> a[i][j]);
        }
    }

    return true;
}

inline void solve()
{
    forn(i, n)
    {
        bool ok = true;
        forn(j, n)
        {
            if(a[i][j] == 1 || a[i][j] == 3)
            {
                ok = false;
            }
        }

        if(ok)
        {
            ans.pb(i + 1);
        }
    }

    cout << sz(ans) << endl;
    forn(i, sz(ans))
        cout << ans[i] << ' ';
    cout << endl;
    return;
}
 
int main(){
#ifdef _DEBUG
    assert(freopen("input.txt", "rt", stdin));
    assert(freopen("output.txt", "wt", stdout));
#endif
 
    cout << setprecision(10) << fixed;
    cerr << setprecision(10) << fixed;
 
    srand(int(time(NULL)));

    assert(read());
    solve();
 
    cerr << "TIME == " << clock() << " ms" << endl;
    return 0;
}