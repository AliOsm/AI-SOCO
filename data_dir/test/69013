#include <bits/stdc++.h>

using namespace std;

const int N = (int)1e6 + 1;
const long long INF = 1e9 + 7;

typedef long long ll;
typedef long double ld;

typedef pair < int, int > pii;
typedef pair < ll, ll > pll;

ll n, m, a[N];
pii t[1 << 18];

void build (int v, int vl, int vr){
  if (vl == vr){
      t[v] = {a[vl], 0};
  }

  else {
      int vm = (vl + vr) / 2;

      build (v * 2, vl, vm);
      build (v * 2 + 1, vm + 1, vr);

      if (t[v * 2].second % 2 == 0){
          t[v] = {t[v * 2].first | t[v * 2 + 1].first, t[v * 2].second + 1};
      }

      else {
          t[v] = {t[v * 2].first ^ t[v * 2 + 1].first, t[v * 2].second + 1};
      }
  }
}

void update (int v, int vl, int vr, int pos, int val){
  if (vl == vr){
      t[v] = {val, 0};
  }

  else {
      int vm = (vl + vr) / 2;

      if (pos <= vm){
          update (v * 2, vl, vm, pos, val);
      }

      if (pos > vm){
          update (v * 2 + 1, vm + 1, vr, pos, val);
      }

      if (t[v * 2].second % 2 == 0){
          t[v] = {t[v * 2].first | t[v * 2 + 1].first, t[v * 2].second + 1};
      }

      else {
          t[v] = {t[v * 2].first ^ t[v * 2 + 1].first, t[v * 2].second + 1};
      }
  }
}

int main (){
  scanf ("%lld %lld", &n, &m);

  ll res = 1;
  for (int i = 0; i <= 20; ++i){
      a[i] = res;
      res *= 2;
  }

  n = a[n];

  for (int i = 1; i <= n; ++i){
      scanf ("%lld", &a[i]);
  }

  build (1, 1, n);

  for (int i = 1; i <= m; ++i){
      ll p, x;
      scanf ("%lld %lld", &p, &x);
      update (1, 1, n, p, x);
      printf ("%d\n", t[1].first);
  }
  return 0;
}
