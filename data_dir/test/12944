#define  _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<map>
#include<cmath>
#include<vector>
#include<algorithm>
#include<iomanip>
#include<cmath> 
#include<stack>
#include<math.h>
#include<set>
#include<string>
#include<cstring>
#include<queue>
#include<complex>	
#include<math.h>
#include<memory.h>
#include<sstream>	
#include<cstdio>
using namespace std;

#define PI acos(-1.0)
#define rep(i,n) for(int i=0;i<n;i++)
#define repi(i,a,n) for(int i=a;i<n;i++)
#define INF (0x7fffffff)
#define mp make_pair
#define fastIO ios::sync_with_stdio(false)
#define read freopen("in.in","r",stdin)
#define write freopen("out.out","w",stdout)
#define scf(xx) scanf("%d",&xx)
#define All(a) a.begin(), a.end()

typedef long long ll;
typedef vector<ll> vi;
typedef pair<int, int> ii;
typedef long double ld;

int dx[] = { 1, -1, 0, 0 };
int dy[] = { 0, 0, 1, -1 };


char g[1001][1001];
int vis[1001][1001];
vi is(1, 0);
int n, m;
int co, c;
bool in_range(int x, int y){
	return x >= 0 && x < n && y >= 0 && y < m;
}
void dfs(int x, int y){
	vis[x][y] = co;
	c++;
	rep(i, 4){
		int nx = x + dx[i], ny = y + dy[i];
		if (in_range(nx, ny) && !vis[nx][ny] && g[nx][ny] == '.')
			dfs(nx, ny);
	}
}

int main(){
	
	scf(n); scf(m);
	rep(i, n){
		scanf("%s", g[i]);
	}
	rep(i, n){
		rep(j, m)if (g[i][j] == '.' && !vis[i][j]){
			c = 0;
			co++; 
			dfs(i, j);
			is.push_back(c);
		}
	}
	rep(i, n){
		rep(j, m){
			if (g[i][j] == '.') continue;
			set<int> st;
			rep(k, 4){
				int nx = i + dx[k], ny = j + dy[k];
				if (in_range(nx, ny))st.insert(vis[nx][ny]);
			}
			int r = 1;
			for (set<int>::iterator it = st.begin(); it != st.end(); ++it)r += is[*it];
			g[i][j] = '0' + (r % 10);
		}
	}
	rep(i, n)printf("%s\n", g[i]);
	return 0;
}