#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<valarray>
//#include<bits/stdc++.h>
using namespace std;
int read_int() {
	char c = getchar();
	while (!isdigit(c)) c = getchar();
	int ret = 0;
	while (isdigit(c)) {
		ret = ret * 10 + c - '0';
		c = getchar();
	}
	return ret;
}
int n;
#define MAX 1000001
int t;
int unit;
struct st{
	int l;
	int r;
	int luni;
	int ind;
	st(int l_, int r_,int ind_){
		l = l_;
		r = r_;
		ind = ind_;
		luni = l / unit;
	}
};
bool cmp(pair<int,pair<int,int> > &a, pair<int,pair<int,int> > &b){
	if (a.first / unit == b.first / unit){
		return a.second.first < b.second.first;
	}
	return a.first / unit < b.first / unit;
}

int ord[MAX];
int aaa[MAX];
int bbb[MAX];
int a[MAX];
long long int ans[MAX];
int use[MAX];
long long int countt[MAX];
int u_s = 0;
long long int aa = 0;
bool CMP(int &a, int &b){
	if (aaa[a] / unit == aaa[b] / unit){
		return bbb[a] < bbb[b];
	}
	return aaa[a]/unit < aaa[b]/unit;
}
void add(long long int x){
	if (use[x] !=u_s){
		use[x] = u_s;
		countt[x] = 0;
	}
	aa -= x*countt[x] * countt[x];
	countt[x]++;
	aa += x*countt[x]*countt[x];
}
void minu(long long int x){
	aa -= x*countt[x] * countt[x];
	countt[x]--;
	aa += x*countt[x] * countt[x];
}
int main(){
	scanf("%d%d", &n, &t);
	for (int i = 0; i < n; i++){
		a[i] = read_int();
	}
	unit = sqrt(n);
	if (unit == 0){
		unit++;
	}
	int l, r;
	for (int i = 0; i < t; i++){
		l = read_int();
		r = read_int();
		l--;
		r--;
		aaa[i] = l;
		bbb[i] = r;
		ord[i] = i;
	}
	sort(ord, ord + t, CMP);
	if (true){
		u_s++;
		aa = 0;
		int be = aaa[ord[0]];
		int en = aaa[ord[0]];
		be--;
		int prei;
		long long int x;
		for (int i = 0; i <t;i++){
			prei = i;
			i = ord[i];
			for (int j = en; j <= bbb[i]; j++){
				x = a[j];
				aa -= x*countt[x] * countt[x];
				countt[x]++;
				aa += x*countt[x] * countt[x];
			}
			for (int j = en - 1; j > bbb[i]; j--){
				x = a[j];
				aa -= x*countt[x] * countt[x];
				countt[x]--;
				aa += x*countt[x] * countt[x];
			}
			en = bbb[i] + 1;
			for (int k = be; k >= aaa[i]; k--){
				x = a[k];
				aa -= x*countt[x] * countt[x];
				countt[x]++;
				aa += x*countt[x] * countt[x];
			}
			for (int k = be+1; k < aaa[i]; k++){
				x = a[k];
				aa -= x*countt[x] * countt[x];
				countt[x]--;
				aa += x*countt[x] * countt[x];
			}
			be = aaa[i] - 1;
			ans[i] = aa;
			i = prei;
		}
	}
	for (int i = 0; i < t; i++){
		printf("%I64d\n", ans[i]);
	}
	return 0;
}