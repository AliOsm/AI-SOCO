#include <string>
#include <sstream>
#include <cstring>
#include <sstream>
#include <vector>
#include <algorithm>
#include <iostream>
#include <stdio.h>
#include <fstream>
#include <ctime>
#include <cmath>
#include <math.h>
#include <set>
#include <map>
#include <list>
#include <iomanip>
#include <cstdio>
#include <algorithm>
#include <bits/stdc++.h>
using namespace std;

#define pp system("pause");
#define ct double ttme = clock()
#define p_ct cout << (clock() - ttme) / CLOCKS_PER_SEC << endl
#define all(c) (c).begin(),(c).end()
#define fft ifstream fin("input.txt"); ofstream fout("output.txt")
#define fft_c FILE *fin, *fout
#define fft_c_open fin = fopen("input.txt","r"); fout = fopen("output.txt","w")
#define fft_c_cl fclose(fin); fclose(fout)
#define pii pair<int,int>
#define mp(a,b) make_pair((a),(b))
#define pff pair<float,float>
#define piii pair<int,pair<int,int>>
#define M_PI 3.14159265358979323846
#define mem0(m) memset((m), 0, sizeof(m));
#define memb(m) memset((m), false, sizeof(m));
#define memi(m) memset((m), 0, sizeof(m));
#define rep(i,n) for(i = 0; i < (int)(n); i++)
#define repi(a, n) for(int i = a; i < (int)(n); i++)
#define repp(i, a, n) for(int (i) = a; (i) < (int)(n); (i)++)
typedef unsigned long long ull;
typedef signed long long ll;
const int INF = 1e8;
const int DEL = 687134561;
const long long MODULO = 1e9 + 7;
const int MAX = 1e7;
const int des = 10000;


int
gcd ( int a, int b )
{
  int c;
  while ( a != 0 ) {
     c = a; a = b%a;  b = c;
  }
  return b;
}


int main()
{
    unordered_map<int, int> cost;
    unordered_map<int, bool> used;
    int* vec = new int[10000000];

    int n;
    cin >> n;

    int maxi = 0, curr = 0;

    for(int i = 0; i < n; i++) {
        int tmp;
        cin >> tmp;
        vec[maxi] = tmp;
        if(i < n - 1) {
            maxi++;
        }
    }

    for(int i = 0; i < n; i++) {
        int tmp;
        cin >> tmp;

        if(cost[vec[i]] == 0 || cost[vec[i]] > tmp) {
            cost[vec[i]] = tmp;
        }
    }

    while(curr < maxi) {
        if(used[vec[curr]]) {
            curr++;
            continue;
        }

        used[vec[curr]] = true;
        int size = maxi;

        for(int i = curr + 1; i <= size; i++) {
            int tmp = gcd(vec[curr], vec[i]);
            if(cost[tmp] == 0 || cost[tmp] > cost[vec[curr]] + cost[vec[i]]) {
                cost[tmp] = cost[vec[curr]] + cost[vec[i]];
                if(tmp != 1) {
                    maxi++;
                    if(maxi >= 10000000) {
                        cout << "pizdos";
                        return 0;
                    }
                    vec[maxi] = tmp;
                }
            }
        }

        curr++;
    }

    if(cost[1] == 0) {
        cout << -1;
    } else {
        cout << cost[1];
    }

    delete vec;
    used.clear();
    cost.clear();
}
