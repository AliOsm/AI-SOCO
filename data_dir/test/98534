#include <bits/stdc++.h>
using namespace std;
int graph[501][501],dist[501][501],seen[501],n,m;
vector<int> vals;
bool f;

void dfs(int curr){
	seen[curr] = 1;
	for(int i = 1 ; i <= n ; i += 1){
		if(graph[curr][i]){
			if(seen[i] == 1){
				f = false;
				continue;
			}else if(seen[i] == 0){
				dfs(i);
			}
		}
	}
	seen[curr] = 2;
}

bool check(){
	for(int i = 1 ; i <= n ; i += 1){
		seen[i] = 0;
	}
	f = true;
	for(int i = 1 ; i <= n ; i += 1){
		if(!seen[i]){
			dfs(i);
		}
	}
	return f;
}

int main(){
	//freopen("route.out", "w", stdout);
	//freopen("route.in", "r", stdin);
	cin >> n >> m;
	for(int i = 1 ; i <= n ; i += 1){
		for(int j = 1 ; j <= n ; j += 1){
			dist[i][j] = 1000000000;
		}
	}
	for(int i = 1 ; i <= n ; i += 1){
		dist[i][i] = 0;
	}
	for(int i = 0 ; i < m ; i += 1){
		int a,b;
		cin >> a >> b;
		graph[a][b] = 1;
		dist[a][b] = 1;
	}
	if(check()){
		cout << "YES" << endl;
		return 0;
	}
	for(int i = 1 ; i <= n ; i += 1){
		for(int j = 1 ; j <= n ; j += 1){
			for(int k = 1 ; k <= n ; k += 1){
				dist[j][k] = min(dist[j][k],dist[j][i]+dist[i][k]);
			}
		}
	}
	for(int i = 1 ; i <= n ; i += 1){
		vector<int> vals;
		int pre = i;
		vals.push_back(i);
		bool seenn[501];
		for(int j = 1 ; j <= n ; j += 1){
			seenn[j] = false;
		}
		int cnt = 0;
		while(cnt < n){
			cnt += 1;
			for(int j = 1 ; j <= n ; j += 1){
				if(graph[pre][j] && dist[j][i] != 1000000000 && !seenn[j]){
					pre = j;
					vals.push_back(j);
					break;
				}
			}
			seenn[pre] = true;
			if(pre == i){
				break;
			}
		}
		if(vals.size() > 1 && vals.back() == vals[0]){
			for(int j = 0 ; j+1 < vals.size() ; j += 1){
				graph[vals[j]][vals[j+1]] = 0;
				if(check()){
					cout << "YES" << endl;
					return 0;
				}
				graph[vals[j]][vals[j+1]] = 1;
			}
			break;
		}
	}
	cout << "NO" << endl;
}