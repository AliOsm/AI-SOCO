#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>

// order_of_key(k) : returns number of elements strictly less than k
// find_by_order(k) : returns kth smallest element from the set indexing from 0

typedef int ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef pair<ll,ll> pll;

#define endl '\n'
#define ff first
#define ss second
#define sz(v) (int)v.size()
//#define int long long
#define pb push_back
#define f(i,l,r) for(ll i=l;i<=r;i++)
#define rf(i,r,l) for(ll i=r;i>=l;i--)
#define Max 5000001
#define inf 2147483647
#define llinf 9223372036854775807
#define all(v) v.begin(),v.end()
#define bp(n) __builtin_popcountll(n)
#define fast ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)

#define d0(a) cout<<a<<' ';
#define d1(a) cout<<a<<endl;
#define d2(a,b) cout<<a<<' '<<b<<endl;
#define d3(a,b,c) cout<<a<<' '<<b<<' '<<c<<endl;
#define d4(a,b,c,d) cout<<a<<' '<<b<<' '<<c<<' '<<d<<endl;
#define d5(a,b,c,d,e) cout<<a<<' '<<b<<' '<<c<<' '<<d<<' '<<e<<endl;
#define d6(a,b,c,d,e,f) cout<<a<<' '<<b<<' '<<c<<' '<<d<<' '<<e<<' '<<f<<endl;

const ll N=5e5+5,mod=1e9+7,bit=61;

vector<ll> adj[N];
vector<pll> d[N];
ll tin[N],tout[N],timer=0;
string s;
ll n,m;

void dfs(ll u,ll p,ll dep)
{
    tin[u]=++timer;
    ll x=s[u]-'a';
    d[dep].pb({tin[u],d[dep].back().ss^(1ll<<x)});
    for(auto v:adj[u])
    {
        dfs(v,u,dep+1);
    }
    tout[u]=++timer;
}

signed main()
{
    fast;

    ll t=1;
    //cin>>t;
    while(t--)
    {
        cin>>n>>m;
        d[1].pb({0,0});
        f(i,2,n)
        {
            d[i].pb({0,0});
            ll x;
            cin>>x;
            adj[x].pb(i);
        }
        cin>>s;
        s='#'+s;
        dfs(1,0,1);
        while(m--)
        {
            ll v,h;
            cin>>v>>h;
            int l=lower_bound(all(d[h]),make_pair(tin[v],-1))-d[h].begin()-1;
            int r=lower_bound(all(d[h]),make_pair(tout[v],-1))-d[h].begin()-1;
            int ans=d[h][r].ss^d[h][l].ss;
            if(bp(ans)>1)
            {
                cout<<"No\n";
            }
            else
            {
                cout<<"Yes\n";
            }
        }
    }
    return 0;
}
















