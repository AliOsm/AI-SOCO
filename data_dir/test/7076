#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;
const int maxn=1e5+7;
vector<int> flist[maxn],rlist[maxn];

int par[maxn][2],d[maxn][2],vis[maxn][2];

struct comp{
	bool operator()(pair<int,int> a,pair<int,int> b){
		return a.y>b.y;
	}
};

priority_queue< pair<int,int> , vector< pair<int,int> > , comp > pq;

int n,m,s,maxk=1e6;

bool win=false,draw=false;
//kosarajus-directed

int component[maxn],cptr=1,height[maxn],csize[maxn];
int visited[maxn];
stack<int> etime;

//dfs for forward graph
void fdfs(int cur,vector<int> adj[]){
	visited[cur]=1;
	height[cur]=1;
	for(auto u:adj[cur]){
		if(visited[u]!=1)
			fdfs(u,adj);
		height[cur]=max(height[cur],height[u]+1);
	}
	etime.push(cur);
}

//dfs for reverse graph
void rdfs(int cur,vector<int> adj[]){
	visited[cur]=1;
	component[cur]=cptr;
	csize[cptr]++;
	for(auto u:adj[cur]){
		if(visited[u]!=1 && height[u]!=0)
			rdfs(u,adj);
	}
}

void kosaraju(){
	fdfs(s,flist);
	memset(visited,0,sizeof(visited));
	while(!etime.empty()){
		int cur=etime.top();
		etime.pop();
		if(visited[cur]==1)
			continue;
		rdfs(cur,rlist);
		cptr++;		
	}
}

//end of kosarajus
int main()
{
	fastread;
	cin>>n>>m;
	int len,ip;
	for(int i=1;i<=n;i++){
		cin>>len;
		for(int j=1;j<=len;j++){
			cin>>ip;
			flist[i].pb(ip);
			rlist[ip].pb(i);
		}
	}
	cin>>s;
	kosaraju();
	for(int i=1;i<=n;i++){
		if(csize[i]>1 || height[i]>maxk){
			draw=true;
			// cout<<i<<"  "<<csize[i]<<"  "<<height[i]<<endl;
			break;
		}
		// cout<<i<<"  "<<height[i]<<endl;
	}
	pq.push({s,0});
	while(!pq.empty()){
		pair<int,int> cur=pq.top();
		pq.pop();
		if(vis[cur.x][cur.y%2]==1)
			continue;
		vis[cur.x][cur.y%2]=1;
		for(auto u:flist[cur.x]){
			int len=(cur.y+1)%2;
			if(vis[u][len])
				continue;
			if(par[u][len]==0){
				d[u][len]=cur.y+1;
				par[u][len]=cur.x;
				pq.push({u,cur.y+1});
			}else if(d[u][len]>(cur.y+1)){
				d[u][len]=cur.y+1;
				par[u][len]=cur.x;
				pq.push({u,cur.y+1});
			}
		}
	}
	int pos=-1;
	len=1;
	for(int i=1;i<=n;i++){
		if(flist[i].size()==0 && vis[i][len]==1 && d[i][len]<=maxk){
			pos=i;
			win=true;
			break;
		}
	}
	if(win){
		vector<int> seq;
		while(!(pos==s && len==0)){
			seq.pb(pos);
			pos=par[pos][len];
			len=1-len;
		}
		seq.pb(s);
		cout<<"Win\n";
		for(int i=seq.size()-1;i>=0;i--)
			cout<<seq[i]<<' ';
	}else if(draw){
		cout<<"Draw";
	}else
		cout<<"Lose";
	return 0;
}