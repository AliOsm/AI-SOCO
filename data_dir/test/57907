#include <bits/stdc++.h>
#define LL long long
using namespace std;

vector<LL> primes;
vector<LL> extraprimes;
LL M, X;

vector<bool> done;
void dfs(LL u)
{
    if (done[u])    return;
    done[u] = 1;
    dfs((u*X)%M);
}

LL brute()
{
    done.clear();
    done.resize(M);
    LL ans = 0;

    for (LL i=0; i<M; i++)
        if (!done[i]) {
            ans++;
            dfs(i);
        }
    return ans;
}

void pre()
{
    LL m = M;
    for (LL i=2; i*i<=m; i++)
        if (m%i==0) {
            while (m%i==0)  m/=i;
            primes.push_back(i);
        }
    if (m>1)    primes.push_back(m);

    for (auto p: primes)
    {
        extraprimes.push_back(p);
        LL m = p-1;

        for (LL i=2; i*i<=m; i++)
            if (m%i==0) {
                while (m%i==0)  m/=i;
                extraprimes.push_back(i);
            }
        if (m>1)    extraprimes.push_back(m);
    }
    sort(extraprimes.begin(), extraprimes.end());
    extraprimes.erase(unique(extraprimes.begin(), extraprimes.end()), extraprimes.end());
}

LL Phi(LL x)
{
    LL ans = x;
    for (auto p: primes) {
        if (x%p) continue;
        while (x%p==0)  x/=p;
        ans = (ans/p)*(p-1);
    }
    return ans;
}


LL modit(LL x, LL mod) {
	if(x>=mod) x-=mod;
	//if(x<0) x+=mod;
	return x;
}

/// Use __int128 if available
LL mult(LL x, LL y, LL mod) {
    if (1.0*x*y < 8e18) return (x*y)%mod;
	LL s=0, m=x%mod;
	while(y) {
		if(y&1) s = modit(s+m, mod);
		y>>=1;
		m = modit(m+m, mod);
	}
	return s;
}

LL power(LL x, LL p, LL mod){
	LL s=1, m=x;
	while(p) {
		if(p&1) s = mult(s, m, mod);
		p>>=1;
		m = mult(m, m, mod);
	}
	return s;
}


map<LL, LL> mem;

LL Order(LL m, LL phi)
{
    vector<LL> pf;
    LL x = phi;
    for (auto p: extraprimes) {
        if (x%p) continue;
        LL cnt = 0;
        while (x%p==0)  pf.push_back(p), x/=p;
    }

    LL cur = phi;
    while (true) {
        bool found = false;
        for (int i=0; i<pf.size(); i++)
            if (power(X, cur/pf[i], m) == 1) {
                found = true;
                cur/=pf[i];
                pf.erase(pf.begin() + i);
                break;
            }
        if (found)  continue;
        return cur;
    }
    return cur;
}

LL dp(LL x)
{
    if (x==1)           return mem[x] = 1;
    if (mem.count(x))   return mem[x];

    LL phi = Phi(x);
    LL order = Order(x, phi);
    LL ans = phi/order;

    //cout<<x<<" "<<phi<<" "<<order<<" "<<endl;

    vector<LL> pf;

    for (auto p: primes)
        if (x%p==0)
            pf.push_back(p);

    LL k = pf.size();
    for (LL mask = 1; mask<(1<<k); mask++)
    {
        LL num = x;
        for (LL i=0; i<k; i++)
            if (mask & (1<<i))
                num/=pf[i];

        if (__builtin_popcount(mask)%2)     ans += dp(num);
        else                                ans -= dp(num);
    }

    return mem[x] = ans;
}

int main()
{
    cin>>M>>X;
    assert(__gcd(M, X) == 1);
    pre();

    cout<<dp(M)<<endl;
    //cout<<" "<<brute()<<endl;
}
