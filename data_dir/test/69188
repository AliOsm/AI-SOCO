//g++ -std=c++11 -g -O2 -o ./a ./A.cpp
#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define ff first
#define ss second
#define rz resize
#define nl '\n'
typedef long long ll;

int n,m,k,lc;

char a[60][60],vis[60][60];
int lk[60][60];

typedef pair<int,int> pii;

inline bool in(int i,int j){
  return (i>=1 and i<=n and j>=1 and j<=m);
}

void dfs(int i,int j,int clr){
  
  vis[i][j]=1;
  lk[i][j]=clr;
  if(in(i+1,j) and !vis[i+1][j])
    dfs(i+1,j,clr);

  if(in(i-1,j) and !vis[i-1][j])
    dfs(i-1,j,clr);

  if(in(i,j+1) and !vis[i][j+1])
    dfs(i,j+1,clr);

  if(in(i,j-1) and !vis[i][j-1])
    dfs(i,j-1,clr);
  
}

map<int,int> M;

int main(){
  ios::sync_with_stdio(0);
  cin.tie(0),cout.tie(0);

  cin>>n>>m>>k;

  for(int i=1;i<=n;i++)
    cin>>(1+a[i]);

  memset(vis,0,sizeof vis);
  for(int i=1;i<=n;i++){
    for(int j=1;j<=m;j++){
      //cout<<a[i][j];
      if(a[i][j]=='*')vis[i][j]=1;
    }
    //cout<<endl;
  }

  memset(lk,0,sizeof lk);

  for(int i=1;i<=n;i++){
    if(!vis[i][1])dfs(i,1,-1);
    if(!vis[i][m])dfs(i,m,-1);
  }
  for(int j=1;j<=m;j++){
    if(!vis[1][j])dfs(1,j,-1);
    if(!vis[n][j])dfs(n,j,-1);
  }

  lc=0;
  for(int i=1;i<=n;i++){
    for(int j=1;j<=m;j++)
      if(!vis[i][j]){
	dfs(i,j,++lc);
      }
  }

  for(int i=1;i<=n;i++)
    for(int j=1;j<=m;j++)  
      M[lk[i][j]]++;

  vector<pii> V;
  for(auto&it:M){
    if(it.ff>=1)
      V.pb({it.ss,it.ff});
  }
  sort(V.begin(),V.end());

  V.rz(V.size()-k);
  int ans = 0;

  for(auto&it:V){
    int lake = it.ss;
    ans += it.ff;
    
    int i,j;
    for(i=1;i<=n;i++)
      for(j=1;j<=m;j++)
	if(lk[i][j]==lake){
	  a[i][j]='*';
	}
  }

  cout<<ans<<nl;
  for(int i=1;i<=n;i++)cout<<(1+a[i])<<nl;
  
  return 0;
};
