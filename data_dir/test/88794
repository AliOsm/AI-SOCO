#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define f(i, x, n) for(int i = x; i < (int)(n); ++i)

int const N = 1000;
int sz[N + 1], rv[N * N + 1];

int gcd(int a, int b) { return b ? gcd(b, a % b) : a; }

struct P{
	int x, y;
	P(){}
	void sc() { scanf("%d%d", &x, &y); }
	bool operator <(P const &o) { if (x == o.x)return y < o.y; return x < o.x; }
	bool operator ==(P const &o) { return x == o.x && y == o.y; }
};

struct L{
	int a, b;
	ll c;
	P mn, mx;
	L(){}
	L(P const &p, P const &q){
		mn.x = min(p.x, q.x);
		mx.x = max(p.x, q.x);
		mn.y = min(p.y, q.y);
		mx.y = max(p.y, q.y);
		b = p.x - q.x;
		a = q.y - p.y;
		c = (ll)a * p.x + (ll)b * p.y;
	}
	P X(L const &o){
		double x = o.b * c - b * o.c;
		double y = a * o.c - o.a * c;
		double d = (ll)a * o.b - (ll)o.a * b;
		if (abs(d) < 1e-7){
			P p;
			p.x = p.y = 0;
			return p;
		}
		x /= d;
		y /= d;
		if (x < 0)x -= 1.0;
		if (y < 0)y -= 1.0;
		P p;
		p.x = x + 0.5;
		p.y = y + 0.5;
		return p;
	}
	bool good(P const &o){
		if ((ll)a * o.x + (ll)b * o.y != c)return false;
		return o.x >= mn.x && o.x <= mx.x && o.y >= mn.y && o.y <= mx.y;
	}
	int an() { return gcd(abs(a), abs(b)) + 1; }
}l[N];

int main(){
	int n;
	scanf("%d", &n);
	f(i, 1, n + 1)sz[i] = i * (i - 1) >> 1;
	f(i, 1, n + 1)rv[sz[i]] = i;
	ll an = 0;
	f(i, 0, n){
		P a, b;
		a.sc();
		b.sc();
		l[i] = L(a, b);
		an += l[i].an();
	}
	vector<P> v;
	f(i, 0, n)f(j, i + 1, n){
		P p = l[i].X(l[j]);
		if (l[i].good(p) && l[j].good(p))v.push_back(p);
	}
	sort(v.begin(), v.end());
	f(i, 0, v.size()){
		int j = i;
		while (j + 1 < (int)v.size() && v[j + 1] == v[i])++j;
		an -= rv[j - i + 1] - 1;
		i = j;
	}
	printf("%lld\n", an);
}