#include <bits/stdc++.h>
#define F first
#define S second

using namespace std;

const int N=3e5+5;
//should I kill myself? :'(
long long arr[N];
pair<long long,int> btree[4*N];
long long lazy[4*N];

void build(int node,int l,int r)
{
	if(l==r)
	{
		btree[node]={arr[l],-l};
		return;
	}
	int mid=(l+r)/2;
	build(node*2,l,mid);
	build(node*2+1,mid+1,r);
	btree[node]=min(btree[node*2],btree[node*2+1]);
}

void update(int node,int l,int r,int ql,int qr,long long val)
{
	if(lazy[node])
	{
		btree[node].F+=lazy[node];
		if(l!=r)
		{
			lazy[node*2]+=lazy[node];
			lazy[node*2+1]+=lazy[node];
		}
		lazy[node]=0;
	}
	if(r<ql||qr<l) return;
	if(ql<=l&&r<=qr)
	{
		btree[node].F+=val;
		if(l!=r)
		{
			lazy[node*2]+=val;
			lazy[node*2+1]+=val;
		}
		return;
	}
	int mid=(l+r)/2;
	update(node*2,l,mid,ql,qr,val);
	update(node*2+1,mid+1,r,ql,qr,val);
	btree[node]=min(btree[node*2],btree[node*2+1]);
}

pair<long long,int> query(int node,int l,int r,int ql,int qr)
{
	if(lazy[node])
	{
		btree[node].F+=lazy[node];
		if(l!=r)
		{
			lazy[node*2]+=lazy[node];
			lazy[node*2+1]+=lazy[node];
		}
		lazy[node]=0;
	}
	if(ql<=l&&r<=qr) return btree[node];
	if(r<ql||qr<l) return {-1,-1};
	int mid=(l+r)/2;
	return min(query(node*2,l,mid,ql,qr),query(node*2+1,mid+1,r,ql,qr));
}

int ans[N];

int main()
{
	int n;
	cin >> n;
	for(int i=0;i<n;i++)
		cin >> arr[i];
	build(1,0,n-1);
	for(int i=1;i<=n;i++)
	{
		auto x=query(1,0,n-1,0,n-1);
		ans[-x.S]=i;
		update(1,0,n-1,-x.S,n-1,-i);
		update(1,0,n-1,-x.S,-x.S,(1LL<<60));
	}
	for(int i=0;i<n;i++)
		cout << ans[i] << " ";
	return 0;
}