#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")
#include <set>
#include <map>
#include <deque>
#include <cmath>
#include <queue>
#include <random>
#include <bitset>
#include <time.h>
#include <string>
#include <cstdio>
#include <vector>
#include <cstdlib>
#include <iomanip>
#include <cassert>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
//#define endl '\n'
#define mp make_pair
#define pbc push_back
#define pob pop_back()
#define empb emplace_back
#define sp system("pause")
#define queuel queue<long long>
#define all(x) (x).begin(),(x).end()
#define matrix vector<vector<ll>>
#define pin(p) cin >> p.first >> p.second;
#define rev(v) reverse(v.begin(),v.end());
#define mx(v) max_element(v.begin(), v.end());
#define mn(v) min_element(v.begin(), v.end());
#define sout(s, c) for(auto i : s) cout << i << c;
#define pout(p) cout << p.first << " " << p.second;
#define er(v, l, r) erase(v.begin() + l, v.begin() + r);
#define vin(v) for(ll i = 0; i < v.size(); ++i) cin >> v[i];
#define vout(v, c) for(int i = 0; i < v.size(); ++i) cout << v[i] << c;
#define pushi(v, a) for(int i = 0; i < a.size(); ++i) v.push_back(a[i]);
#define sin(s, n) for(int i = 0; i < n; ++i){int a; cin >> a; s.insert(a);}
#define fastio() ios_base::sync_with_stdio(0);cout.tie(0);cin.tie(0);srand(time(NULL));
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
using namespace std;
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
const ll INF = 1000LL * 1000 * 1000 * 1000 * 1000 * 1000;
const int inf = 1000 * 1000 * 1000;
const ld PI = acos(-1.0);
const ll mod1 = inf + 7;
const ll mod2 = inf + 9;
const int MAXN = 200001;
const ld EPS = 1e-9;
int hp = 179;
vector<vector<int>> g(MAXN);
vector<int> tin(MAXN);
vector<int> tout(MAXN);
vector<int> used(MAXN);
vector<vector<int>> up(MAXN);
vector<int> pddsz(MAXN);
int t = 0, mxl = 0;
vector<int> dpth(MAXN);
void dfs(int v, int p, int d)
{
	used[v] = 1;
	up[v][0] = p;
	for (int i = 1; i <= mxl; ++i)
	{
		up[v][i] = up[up[v][i - 1]][i - 1];
	}
	tin[v] = t++;
	dpth[v] = d;
	pddsz[v] = 1;
	for (int i : g[v])
	{
		if (!used[i])
		{
			dfs(i, v, d + 1);
			pddsz[v] += pddsz[i];
		}
	}
	tout[v] = t++;
}
bool pp(int a, int b)
{
	return tin[a] <= tin[b] && tout[a] >= tout[b];
}
int lca(int a, int b)
{
	if (pp(a, b))
	{
		return a;
	}
	if (pp(b, a))
	{
		return b;
	}
	for (int i = mxl; i >= 0; --i)
	{
		if (!pp(up[a][i], b))
		{
			a = up[a][i];
		}
	}
	return up[a][0];
}
int dist(int a, int b)
{
	return dpth[a] + dpth[b] - 2 * dpth[lca(a, b)];
}
int query(int a, int b, int n)
{
	if (a == b)
	{
		return n;
	}
	if (dist(a, b) % 2)
	{
		return  0;
	}
	if (dpth[a] < dpth[b])
	{
		swap(a, b);
	}
	int x = lca(a, b);
	if (dist(a, x) == dist(b, x))
	{
		int a1 = a;
		for (int i = mxl; i >= 0; --i)
		{
			if (!pp(up[a1][i], x))
			{
				a1 = up[a1][i];
			}
		}
		int b1 = b;
		for (int i = mxl; i >= 0; --i)
		{
			if (!pp(up[b1][i], x))
			{
				b1 = up[b1][i];
			}
		}
		return n - pddsz[a1] - pddsz[b1];
	}
	int xx = dist(a, b) / 2;
	int ax1 = a, ax2 = a;
	int xx1 = xx - 1;
	for (int i = mxl; i >= 0; --i)
	{
		if (xx - (1 << i) >= 0)
		{
			xx -= (1 << i);
			ax1 = up[ax1][i];
		}
		if (xx1 - (1 << i) >= 0)
		{
			xx1 -= (1 << i);
			ax2 = up[ax2][i];
		}
	}
	return pddsz[ax1] - pddsz[ax2];

}
signed main()
{
	fastio();
	int n;
	cin >> n;
	for (int i = 0; i < n - 1; ++i)
	{
		int a, b;
		cin >> a >> b;
		g[a].pbc(b);
		g[b].pbc(a);
	}
	while ((1 << mxl) <= n)
	{
		mxl++;
	}
	for (int i = 1; i <= n; ++i)
	{
		up[i].resize(mxl + 1);
	}
	dfs(1, 1, 0);
	int q;
	cin >> q;
	for (int i = 0; i < q; ++i)
	{
		int a, b;
		cin >> a >> b;
		cout << query(a, b, n) << endl;
	}
	//sp;
}