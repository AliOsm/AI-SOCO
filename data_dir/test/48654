#include <bits/stdc++.h>

typedef int tint;

#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define forn(i,n) forsn(i,0,n)
#define debug(x) cout << #x << " = "  << x << endl

using namespace std;

void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

const tint maxN = 302000;
const tint maxA = 27;
tint color[maxN];
tint maxPath[maxN];
bool hayCiclo;
string s;

void findCycle(tint actual, vector<vector<tint> > &ladj)
{
	
	color[actual] = 1;
	for (auto &vecino : ladj[actual])
	{
		if (color[vecino] == 1)
			hayCiclo = true;
		else if (color[vecino] == 0)
			findCycle(vecino,ladj);
	}
	color[actual] = 2;
}

tint caminoMaximo(tint actual, vector<vector<tint> > &ladj, tint x)
{
	
	if (maxPath[actual] == -1)
	{
		maxPath[actual] = tint(s[actual]-'a') == x;
		for (auto &vecino : ladj[actual])
			maxPath[actual] = max(maxPath[actual], (tint(s[actual]-'a') == x) + caminoMaximo(vecino,ladj,x));
	}
	return maxPath[actual];
}

int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n,m;
	
	while (cin >> n >> m >> s)
	{
		forn(i,n)
			color[i] = 0;
		vector<vector<tint> > ladj (n);
		hayCiclo = false;
		forn(i,m)
		{
			tint a,b;
			cin >> a >> b;
			ladj[a-1].push_back(b-1);
		}
		
		
		forn(i,n)
			if (color[i] == 0)
				findCycle(i,ladj);
			
		if (hayCiclo)
			cout << "-1\n";
		else
		{
			tint ans = 0;
			forn(x,maxA)
			{
				forn(i,n)
					maxPath[i] = -1;
				forn(i,n)
					if (maxPath[i] == -1)
						ans = max(ans,caminoMaximo(i,ladj,x));
			}
			cout << ans << "\n";
		}
	}
	
	return 0;
}




