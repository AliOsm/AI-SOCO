
#include <bits/stdc++.h>
using namespace std;
//static const int N = 1<<20 ;
typedef long long ll;

typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<pii> vii;
#define all(x)  (x).begin(), (x).end()
#define fi  first
#define se  second
#define next next_babababa
#define prev prev_babababa
#define forn(i,a,b)  for(int i = (a), __b = (b); i <= __b; ++i)

static ll gcd(ll x, ll y) { return 0 == y ? x : gcd(y,x%y); }
static ll powm(ll x, ll n, ll m){ ll r = 1; while(n>0){ if(n & 1) r = r * x % m ; x = x * x % m; n /= 2; } return r; }
/*******************************/
//static const ll ten_18 = 1000 * 1000 * 1000 * 1000 * 1000 * 1000 ;
static const ll mod = 998244353 ;
 
struct pt
{
    ll sum, cnt ;
 
};

pt dp[32][1024] ;
int digits[32];
int bits[1024];

pt dfs(int n, int K, bool lead, bool lim, int state)
{
    if (bits[state] > K) return pt{0,0};
    
    if (n == 0 ) return pt{ 0, 1 } ;
    
    if (!lim && !lead && dp[n][state].cnt != -1 ) {
        return dp[n][state];
    }
    
    ll pw_n = 1; // 10^(n-1) % mod 
    for(int i= 1; i<n; ++i)
        pw_n = pw_n * 10 % mod ;
    
    pt ret = {0, 0 };
    
    int upper_digit = lim ? digits[ n - 1 ] : 9 ;
    
    for(int d = 0; d <= upper_digit; ++d)
    {
        bool new_lead = lead && ( d == 0 ) ;
        bool new_lim  = lim  && ( d == upper_digit ) ;
        int new_state = new_lead ? 0 : (state | (1 << d ) ) ;
        
        pt r2 = dfs( n - 1 , K , new_lead, new_lim, new_state);
        
        ll pw_d = pw_n * d % mod ;
        
        ret.sum = (ret.sum + r2.sum +  r2.cnt * pw_d % mod ) % mod;
        ret.cnt = (ret.cnt + r2.cnt) % mod ;
    }
    
    dp[n][state] = ret;
    
    return ret;
}
 
pt solve(ll X, ll K )
{
    for(int i = 0; i < 32; ++i){
        for(int sh = 0; sh < 1024; ++sh){
            dp[i][sh] .sum = -1;
            dp[i][sh] .cnt = -1;
            
        }
    }
    for(int sh = 0; sh < 1024; ++sh){
        bits[sh] = 0;
        for(int j = 0; j <10; ++j){
            if (sh&(1<<j))++bits[sh];
        }
    }
    
    
    int n = 0;
    do{
        digits[n++] = X % 10;
        X /= 10;
    }while( X > 0 );
   
    bool lim = true;
    int state = 0;
    bool lead = true;
    return dfs(n , K, lead, lim,  state ) ;
}

int solve()
{    
  
    ll L, K, R ;
    cin >> L >> R >> K ;
    cout << (solve(R,K).sum - solve(L-1,K).sum + mod) % mod ;
    
    return 0;
}



int main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r",stdin);
    freopen("output.txt", "w", stdout);
#endif 
    ::std::ios::sync_with_stdio(false); ::std::cin.tie(0); ::std::cout.tie(0);
   int t = 1;
 //  scanf("%d",&t);
   while(t--)
        solve();
}