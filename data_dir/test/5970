#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
#define abdelrahman001 ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define F first
#define S second
#define inFile(t) freopen((t),"r",stdin)
#define outFile(t) freopen((t),"w",stdout)
#define pb push_back
#define pf push_front
#define Pb pop_back
#define all(v) (v).begin(),(v).end()
#define allr(v) (v).rbegin(),(v).rend()
#define Pf pop_front
#define sz size
#define MP make_pair
#define Pc __builtin_popcount
#define pi 2*acos(0)
#define BiEdge(v,a,b) (v)[(a)].pb(b),(v)[(b)].pb(a)
#define mod 1000000007
#define point complex<ld>
#define X real()
#define Y imag()
#define pll pair<ll,ll>
#define pii pair<int,int>
#define cross(a,b)(conj(a)*(b)).imag()
#define dot(a,b) (conj(a)*(b)).real()
#define rectangle pair<coordinate,coordinate>
#define line tuple<ll,ll,ll>
#define EPS 1e-7
#define polygon vector<point>
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
int const N = 2*1e5+5,M = 105;
using namespace std;
int n,m,arr[N],t,x,y,nxt[N],ans[N];
int find(int u)
{
    return (ans[u] < arr[u] || u > n)?u:nxt[u] = find(nxt[u]);
}
int main()
{
    //abdelrahman001
    scanf("%d",&n);
    iota(nxt,nxt+n+1,1);
    for(int i = 1;i<=n;i++)
        scanf("%d",&arr[i]);
    scanf("%d",&m);
    while(m--)
    {
        scanf("%d%d",&t,&x);
        if(t == 1)
        {
            scanf("%d",&y);
            int cur = (ans[x] == arr[x])?find(nxt[x]):x;
            while(y && cur <= n)
            {
                int tmp = min(arr[cur]-ans[cur],y);
                ans[cur]+=tmp,y -= tmp;
                cur = find(nxt[cur]);
            }
        } else
            printf("%d\n",ans[x]);
    }
    return 0;
}

