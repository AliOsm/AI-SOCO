
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <array>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
#include <bitset>
#include <complex>
using namespace std;
#define rep(i, n) for (int (i) = 0; (i) < (n); (i) ++)
#define rep1(i, n) for (int (i) = 1; (i) <= (n); (i) ++)
#define FOR(i, a, b) for (int (i) = (a); (i) <= (b); (i)++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout<<#a<<" :";FOR(i123,x,y)cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int((x).size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

int N;
int A[105];
int B[105];

//
// dp[n & 1][k][cap] = max content.
// Among the first n bottles,
// find a way to pick k bottles
// such that the total capacity equals to cap.
// If none, then -1.
// Otherwise, among all such ways,
// find ones with the maximum content.
// (That means we need to pour less)
int dp[2][105][100 * 100 + 10];
int main() {
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0); cin.tie(0);
  cin >> N;
  int tot = 0;
  for (int i = 1; i <= N; i++) {
    cin >> A[i];
    tot += A[i];
  }
  vector<int> v;
  for (int i = 1; i <= N; i++) {
    cin >> B[i];
    v.pb(B[i]);
  }
  sort(v.begin(), v.end());
  reverse(v.begin(), v.end());
  int K;
  int tmp = 0;
  for (int i = 0; i < sz(v); i++) {
    tmp += v[i];
    if (tmp >= tot) {
      K = i + 1;
      break;
    }
  }
  int max_cap = 100 * 100;
  for (int n = 0; n < 2; n++) {
    for (int k = 0; k < 105; k++) {
      for (int i = 0; i <= max_cap; i++) {
        dp[n][k][i] = -1;
      }
    }
  }
  dp[0][0][0] = 0;
  int ans = INF;
  for (int n = 1; n <= N; n++) {
    int cur = n & 1;
    int prev = cur ^ 1;
    for (int k = 0; k < 105; k++) {
      for (int i = 0; i <= max_cap; i++) {
        dp[cur][k][i] = -1;
      }
    }
    for (int k = 0; k <= min(n, K); k++) {
      for (int cap = 0; cap <= max_cap; cap++) {
        int& x = dp[cur][k][cap];
        x = max(x, dp[prev][k][cap]);
        if (B[n] <= cap) {
          int prevcap = cap - B[n];
          if (0 && n == 1 && k == 1 && cap == 100) {
            db(A[n]);
            db(x);
            db(prevcap);
          }
          if (k >= 1 && dp[prev][k - 1][prevcap] >= 0) {
            x = max(x, dp[prev][k - 1][prevcap] + A[n]);
          }
        }
        if (x >= 0 && cap >= tot && k == K) {
          ans = min(ans, tot - x);
        }
      }
    }
  }
  cout << K << " " << ans << endl;
}

