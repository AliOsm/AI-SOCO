#include<bits/stdc++.h>
#define MOD 1000000007
#define ll long long
#define mp make_pair
#define pb push_back 
#define N 100010
using namespace std;
ll ct[N][20][2], A[N];
vector<int> graph[N];
ll ans = 0;
void dfs(int s, int p){
	vector<ll> sumi0(20), sumi1(20);
	for(int i = 0; i < graph[s].size(); i++){
		int x = graph[s][i];
		if(x != p){
			dfs(x, s);
			for(int j = 0; j < 20; j++){
				sumi0[j] += ct[x][j][0];
				sumi1[j] += ct[x][j][1];
			}
		}
	}
	for(int i = 0; i < graph[s].size(); i++){
		int x = graph[s][i];
		if(x != p){
			for(int j = 0; j < 20; j++){
				if(!(A[s] & (1 << j))){
					ans += 2 * (1 << j) * ct[x][j][1];
					ans += (1 << j) * ct[x][j][0] * (sumi1[j] - ct[x][j][1]) + (1 << j) * ct[x][j][1] * (sumi0[j] - ct[x][j][0]);
				}
				else{
					ans += 2 * (1 << j) * ct[x][j][0];
					ans += (1 << j) * ct[x][j][0] * (sumi0[j] - ct[x][j][0]) + (1 << j) * ct[x][j][1] * (sumi1[j] - ct[x][j][1]);
				}
			}
		}
	}
	for(int j = 0; j < 20; j++){
		if(A[s] & (1 << j)){
			ct[s][j][1] = 1 + sumi0[j];
			ct[s][j][0] = sumi1[j];
		}
		else{
			ct[s][j][0] = 1 + sumi0[j];
			ct[s][j][1] = sumi1[j];
		}
	}
}
int main(){
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	int n;
	cin >> n;
	for(int i = 0; i < n; i++)cin >> A[i];
	for(int i = 0; i < n - 1; i++){
		int a, b;
		cin >> a >> b;
		graph[a - 1].pb(b - 1);
		graph[b - 1].pb(a - 1);
	}
	dfs(0, -1);
	ans /= 2;	
	for(int i = 0; i < n; i++)
		ans += A[i];
	cout << ans << '\n';
}