#pragma GCC optimize("O3")
#pragma GCC target("arch=corei7-avx")

#include <iostream>
#include <cstdio>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <queue>
#include <ctime>

using namespace std;

#define REP(i, n) for(int (i) = 0; (i) < (n); (i)++)
#define SZ(a) (int)(a).size()
#define ALL(a) (a).begin(), (a).end()

const int N = 200100;

int a[N], f[N], L[N], R[N];
vector<int> pos[N];

void inc(int i, int n) {
    for (; i < n; i |= (i + 1)) ++f[i];
}

int sum(int i) {
    int res = 0;
    for (; i >= 0; i = (i & (i + 1)) - 1) res += f[i];
    return res;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int n, q;
    cin >> n >> q;
    REP(i, n) cin >> a[i];
    a[n] = -1;
    for (int i = 1; i <= q; i++) L[i] = R[i] = -1;
    int cnt = 0;
    REP(i, n) {
        if (a[i] == 0) {
            ++cnt;
            continue;
        }
        if (L[a[i]] == -1) L[a[i]] = i;
        R[a[i]] = i;
        pos[a[i]].push_back(i);
    }
    if (cnt == n) {
        cout << "YES" << endl;
        REP(i, n) cout << q << " ";
        cout << endl;
        return 0;
    }
    if (L[q] == -1) {
        bool found = false;
        REP(i, n) {
            if (a[i] == 0) {
                a[i] = q;
                L[q] = R[q] = i;
                found = true;
                break;
            }
        }
        if (!found) {
            cout << "NO" << endl;
            return 0;
        }
    }
    for (int i = 1; i <= q; i++) {
        if (L[i] == -1) continue;
        if (sum(R[i]) - sum(L[i] - 1) > 0) {
            cout << "NO" << endl;
            return 0;
        }
        REP(j, SZ(pos[i])) {
            inc(pos[i][j], n);
        }
    }
    int beg = -1;
    REP(i, n + 1) {
        if (a[i] == 0) {
            if (beg == -1) {
                beg = i;
            }
        } else {
            if (beg != -1) {
                int color = -1;
                if (beg > 0) {
                    color = a[beg - 1];
                } else if (i < n) {
                    color = a[i];
                }
                for (int j = beg; j < i; j++) {
                    a[j] = color;
                }
            }
            beg = -1;
        }
    }
    cout << "YES" << endl;
    REP(i, n) cout << a[i] << " ";
    cout << endl;
    return 0;
}