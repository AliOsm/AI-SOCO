#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

const int N = 1e6 + 10;
int F[N], G[N], A[N];

int64 comb(int n, int m) {
  if (n < m) return 0;
  return (int64)F[n] * G[m] % MOD * G[n - m] % MOD;
}

void init(int n) {
  A[1] = 1;
  for (int i = 2; i < n; ++i) {
    A[i] = (MOD - MOD / i) * (int64)A[MOD % i] % MOD;
  }
  F[0] = G[0] = 1;
  for (int i = 1; i < n; ++i) {
    F[i] = (int64)F[i - 1] * i % MOD;
    G[i] = (int64)G[i - 1] * A[i] % MOD;
  }
}

int64 power_mod(int64 a, int64 n) {
  int64 ret = 1;
  for (; n; n >>= 1) {
    if (n & 1) ret = ret * a % MOD;
    a = a * a % MOD;
  }
  return ret;
}

int main() {
  init(N);
  int64 n, m, x, y;
  scanf("%lld%lld%lld%lld", &n, &m, &x, &y);
  int64 ret = 0;
  ret = (ret + F[n - 2] * comb(m - 1, n - 2) % MOD) % MOD;
  for (int64 k = 1; k <= n - 2 && k <= m; ++k) {
    int64 x = power_mod(n - k - 1, MOD - 2) * (k + 1) % MOD;
    int64 cur = comb(n - 2, k - 1) * F[k - 1] % MOD *
      comb(m - 1, k - 1) % MOD *
      power_mod(m * (n - k - 1) % MOD, n - 1 - k) % MOD *
      power_mod(1 + x, n - k - 2) % MOD * x % MOD;
    ret = (ret + cur) % MOD;
  }
  printf("%lld\n", ret);
  return 0;
}
