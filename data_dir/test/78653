//#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define se second
#define pi 2*acos(0)
#define PI 3.14159265358979323846264338

typedef long long ll;
typedef unsigned long long ull;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;

const int N = 1001000;
const int MX = 123456;
const int mod = (int)1e9 + 7;
const int base = 97;
const ull BS1 = 10000019ULL;
const int INF = (1 << 29);

template < class T > inline void fastScan(T &x){
    register char c = getchar();
    int neg = 0; x = 0;
    for(   ; (c < 48 || c > 57) && (c != '-'); c = getchar());
    if(c == '-') { neg = 1; c = getchar(); }
    for(   ; c > 47 && c < 58; c = getchar()){
        x = (x << 1) + (x << 3) + c - 48;
    }
    if(neg) x = -x;
}

// OrderedSet
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
// template < typename T > using ordered_set = tree < T, null_type, greater < T >, rb_tree_tag, tree_order_statistics_node_update >;

//typedef uint64_t hash_t;
//mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
//const int HASH_COUNT = 2;
//const hash_t HASH_P = (uint32_t)-13337;
//uniform_int_distribution<hash_t> MULT_DIST(0.25 * HASH_P, 0.75 * HASH_P);
//const hash_t HASH_MULT[HASH_COUNT] = {MULT_DIST(rng), MULT_DIST(rng)};

ll ans;
ll x, y;

bool f_prime[N];
int prime[N], cnt;

vector < ll > v;

void sieve(){
  for(int i = 4; i < N; i+=2) f_prime[i] = true;
  for(int i = 3; i * i <= N; i+=2){
    if(f_prime[i] == false){
      for(int j = i * 3; j < N; j += i){
        f_prime[j] = true;
      }
    }
  }
  prime[cnt++] = 2;
  for(int i = 3; i < N; i++){
    if(f_prime[i] == false){
      prime[cnt++] = i;
    }
  }
}

void fact(ll n){
  for(int i = 0; (1ll * prime[i] * prime[i] <= n) && i < cnt; i++){
    if(n % prime[i] == 0){
      ll c = 1;
      while(n % prime[i] == 0){
        n /= prime[i];
        c *= prime[i];
      }
      v.pb(c);
      //cout << c << '\n';
    }
  }
  if(n > 1){
    v.pb(n);
    //cout << n << '\n';
  }
}

void go(int pos, ll a, ll b){
  if(pos >= v.size()){
    if(ans > max(a, b)){
      ans = max(a, b);
      x = min(a, b);
      y = max(a, b);
    }
    return ;
  }
  go(pos + 1, a * v[pos], b);
  go(pos + 1, a, b * v[pos]);
}

int main(){
  sieve();
  ll n;
  fastScan(n);
  fact(n);
  ans = n + 1;
  go(0, 1, 1);
  printf("%lld %lld\n", x, y);
}
