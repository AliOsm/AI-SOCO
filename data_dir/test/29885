//satyaki3794
#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <algorithm>
#include <climits>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cctype>
#include <cassert>
#include <bitset>
#include <iomanip>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define PI (3.14159265)
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define INF (100000005)
#define SIZE (2)
#define TREESIZE (302144)
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)
#define epsilon 1e-8 //add to double before casting to integer
 
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> ii;
typedef pair<ii, int> iii;


#define matrix vector< vector<ll> >

matrix matmul(matrix &a, matrix &b){
    int i, j, k, n = a.size();
    matrix ans (n, vector<ll>(n));
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
            ll temp = 0;
            for(k=0;k<n;k++)    temp = (temp + a[i][k] * b[k][j]) % MOD;
            ans[i][j] = temp;
        }

    return ans;
}

matrix matpwr(matrix &a, ll p){
    int n = a.size();
    matrix ans(n, vector<ll> (n));
    for(int i=0;i<n;i++)    ans[i][i] = 1;

    while(p){
        if(p&1) ans = matmul(ans, a);

        a = matmul(a, a);
        p >>= 1;
    }
    return ans;
}


ll pwr(ll base, ll p, ll mod = MOD){
    ll ans = 1;
    while(p){
        if(p & 1)   ans = (ans * base) % mod;
        base = (base * base) % mod;
        p /= 2;
    }
    return ans;
}


ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}


ll lcm(ll a, ll b){
    return (a*b) / gcd(a, b);
}


ll invMod(ll n, ll mod = MOD){
    return pwr(n, mod-2);
}


int n, root, arr[200002];
ll DP[3][200005];
vector<int> adj[200005];


void dfs(int v, int par){

    //first consider cases in which v is not part of the work group
    bool doneOnce = false;
    for(int i=0;i<(int)adj[v].size();i++){

        int vv = adj[v][i];
        if(vv == par)   continue;

        dfs(vv, v);

        if(!doneOnce){
            DP[0][v] = DP[0][vv];
            DP[1][v] = DP[1][vv];
            doneOnce = true;
            continue;
        }

        ll even = DP[0][v], odd = DP[1][v];

        DP[0][v] = max(DP[0][v], even + DP[0][vv]);
        DP[0][v] = max(DP[0][v], odd + DP[1][vv]);

        DP[1][v] = max(DP[1][v], even + DP[1][vv]);
        DP[1][v] = max(DP[1][v], odd + DP[0][vv]);
    }

    //suppose v is chosen, then total nodes will always be odd in v's subtree
    DP[1][v] = max(DP[1][v], arr[v] + DP[0][v]);

// cout<<"after v = "<<v<<" : "<<DP[0][v]<<" "<<DP[1][v]<<endl;
}



int main()
{
    // ios_base::sync_with_stdio(0);
    // freopen("input.txt", "r", stdin);

    scanf("%d", &n);
    for(int i=1;i<=n;i++){
        int par;
        scanf("%d%d", &par, &arr[i]);
        if(par == -1)   root = i;
        else    adj[par].pb(i);
    }

    dfs(root, -1);

// for(int i=1;i<=n;i++)   cout<<DP[0][i]<<" ";cout<<endl;
// for(int i=1;i<=n;i++)   cout<<DP[1][i]<<" ";cout<<endl;

    ll ans = max(DP[0][root], DP[1][root]);
    printf("%I64d", ans);
    return 0;
}














