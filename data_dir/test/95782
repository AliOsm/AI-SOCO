#include <bits/stdc++.h>

#define endl '\n'
#define max_n 200002

using namespace std;

class BIT {

	public :

		int tree[max_n];
		BIT() {
			memset(tree, 0, sizeof tree);
		}
		int query(int idx) {
			int sum = 0;
			while (idx > 0){
				sum += tree[idx];
				idx -= (idx & -idx);
			}
			return sum;
		}
		int query(int i, int j) {
			return query(j) - query(i-1);
		}
		void update(int idx, int val) {
			while (idx <= max_n) {
				tree[idx] += val;
				idx += (idx & -idx);
			}
		}

} bit[64]; // it does not need if we do precalculation!

long long a[200002];

int main() {
	ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	long long n, k, x;
	cin >> n >> k >> x;
	for(int i=0; i<n; i++) {
		cin >> a[i];
		for(int j=0; j<64; j++) if((a[i]&(1LL<<j)) > 0) bit[j].update(i+1, 1);
	}
	long long power = 1;
	while(k--) power *= x;
	long long mx = 0;
	for(int i=0; i<n; i++) {
		long long res = 0;
		for(int j=0; j<64; j++) if((a[i]&(1LL<<j)) > 0) bit[j].update(i+1, -1);
		long long tt = a[i] * power;
		for(int j=0; j<64; j++) {
			int S = bit[j].query(1, n) + ((tt&(1LL<<j)) > 0);
			if(S > 0) res |= (1LL<<j);
		}
		for(int j=0; j<64; j++) if((a[i]&(1LL<<j)) > 0) bit[j].update(i+1, 1);
		mx = max(mx, res);
	}
	cout << mx << endl;
	return 0;
}