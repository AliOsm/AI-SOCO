// In the name of God
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iomanip>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <assert.h>
#include <bitset>
#define sqr(a) ((a)*1LL*(a))
#define all(a) (a).begin(), (a).end()
using namespace std;
 
template <typename T>
T next_int() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if(ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return p * x;
}
 
string next_token() {
    char ch;
    string ans = "";
    do { ch = getchar(); } while(ch <= ' ');
    while(ch > ' ') {
        ans += ch;
        ch = getchar();
    }
    return ans;
}
    
const long long INF = (long long)1e18;
const int INFINT = (int)1e9 + 227 + 1;
const int MAXN = (int)1e6 + 227 + 1; 
const int MOD = (int)1e9 + 7;
const long double EPS = 1e-9;
 
long long bin_pow(long long a, long long b) {
    if(!b) return 1;
    long long ans = bin_pow(a, b / 2);
    ans = ans * ans % MOD;
    if(b % 2) ans = ans * a % MOD;
    return ans;
}

vector<pair<int, int> > b[MAXN];

int d[MAXN];

map<pair<int, int>, int> kek;

int f(int v) {
    if(d[v] != v) d[v] = f(d[v]);
    return d[v];
}

int main() {
    // freopen(".in", "r", stdin);

    int n, m; cin >> n >> m;

    for(int i = 0; i < m; i++) {
        int x = next_int<int>() - 1;
        int y = next_int<int>() - 1;
        int c = next_int<int>();

        b[c].push_back(make_pair(x, y));
    }

    int q; cin >> q;
    vector<pair<int, int> > query(q);
    vector<int> ans(q, 0);

    for(int i = 0; i < q; i++) {
        query[i].first = next_int<int>() - 1;
        query[i].second = next_int<int>() - 1;

        if(query[i].first > query[i].second) 
            swap(query[i].first, query[i].second);
    }

    for(int i = 0; i < n; i++) d[i] = i;

    for(int i = 1; i <= m; i++) {
        set<int> w;
        for(int j = 0; j < b[i].size(); j++) {
            d[f(b[i][j].first)] = f(b[i][j].second);
            w.insert(b[i][j].first);
            w.insert(b[i][j].second);
        }

        vector<int> W;
        for(set<int> :: iterator i = w.begin(); i != w.end(); i++)
            W.push_back(*i);

        if(b[i].size() >= sqrt(m)) {
            for(int i = 0; i < q; i++) {
                if(f(query[i].first) == f(query[i].second))
                    ans[i]++;
            }
        } else {
            for(int i = 0; i < W.size(); i++)
                for(int j = i + 1; j < W.size(); j++) {
                    if(f(W[i]) == f(W[j]))
                        kek[make_pair(W[i], W[j])]++;
                }
        }

        for(int j = 0; j < W.size(); j++) {
            d[W[j]] = W[j];
        }
    }

    for(int i = 0; i < q; i++) cout << ans[i] + kek[make_pair(query[i].first, query[i].second)] << "\n";
}
