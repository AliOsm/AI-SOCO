#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>

using namespace std;



#define pb push_back
#define pii pair<int, int>
#define mp make_pair
#define ull unsigned long long
#pragma comment(linker, "/STACK:64000000")

typedef long double ld;
typedef pair<ld, ld> pldld;
typedef long long ll;
typedef pair<ll, ll> pll;


typedef unsigned int ui;
typedef unsigned char uc;
const int infi = 1e9 + 7;
const ll infl = 1e18;




/** Interface */

inline int readChar();
inline void writeChar( int x ); 
inline void writeWord( const char *s );
inline void flush();

/** Read */

static const int buf_size = 4096;

inline int getChar() {
  static char buf[buf_size];
  static int len = 0, pos = 0;
  if (pos == len)
    pos = 0, len = fread(buf, 1, buf_size, stdin);
  if (pos == len)
    return -1;
  return buf[pos++];
}

inline int readChar() {
  int c = getChar();
  while (c >= 0 && c <= 32)
    c = getChar();
  return c;
}
//char bf[10];
inline int readWord(char *bf) {
	char *cur = bf;
	*cur = getChar();
	
  while (*cur <= 32)
    *cur = getChar();
  while (*cur > 32) {
	++cur;
	*cur = getChar();
  }
  return cur - bf;
}

inline int readInt() {
  int s = 1, c = readChar();
  int x = 0;
  if (c == '-')
    s = -1, c = getChar();
  while ('0' <= c && c <= '9')
    x = x * 10 + c - '0', c = getChar();
  return s == 1 ? x : -x;
}

/** Write */

static int write_pos = 0;
static char write_buf[buf_size];

inline void writeChar( int x ) {
  if (write_pos == buf_size)
    fwrite(write_buf, 1, buf_size, stdout), write_pos = 0;
  write_buf[write_pos++] = x;
} 

inline void flush() {
  if (write_pos)
    fwrite(write_buf, 1, write_pos, stdout), write_pos = 0;
}

inline void writeInt(ll x ) {
  if (x < 0)
    writeChar('-'), x = -x;

  char s[24];
  int n = 0;
  while (x || !n)
    s[n++] = '0' + x % 10, x /= 10;
  while (n--)
    writeChar(s[n]);
}

inline void writeWord( const char *s ) {
  while (*s)
    writeChar(*s++);
}

struct node{
	node *l, *r;
	int size;
	bool flag;
	node() : l(0), r(0), flag(0), size(0) {}
	node(int a) : l(0), r(0), flag(1), size(1) {}
};
void add(node *t, int a) {
	for (int i = 30; i >= 0; --i) {
		++t->size;
		if (a & (1 << i)) {
			if (!t->r)
				t->r = new node();
			t = t->r;
		}
		else {
			if (!t->l)
				t->l = new node();
			t = t->l;
		}
	}
	++t->size;
	t->flag = 1;
	return;
}
void del(node *root, int a) {
	node *t = root;
	--t->size;
	for (int i = 30; i >= 0; --i) {
		node *next;
		if (a & (1 << i)) {
			next = t->r;
			--next->size;
			if (!next->size)
				t->r = 0;
		}
		else {
			next = t->l;
			--next->size;
			if (!next->size)
				t->l = 0;
		}
		t = next;
	}
	return;
}
int get_max_xor(node *t, int a) {
	int ans = 0;
	for (int i = 30; i >= 0; --i) {
		if ((!(a & (1 << i))) &&  t->r || !t->l) {
			ans ^= (1 << i);
			t = t->r;
		}
		else
			t = t->l;
	}
	return ans ^ a;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.sync_with_stdio(false);
	cin.tie(0);
	//freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
	//freopen("partition.in", "r", stdin);freopen("partition.out", "w", stdout);
	node *root = new node();
	add(root, 0);
	int q;
	cin >> q;
	for (int i = 0; i < q; ++i) {
		char a;
		int x;
		cin >> a >> x;
		if (a == '+')
			add(root, x);
		else if (a == '-')
			del(root, x);
		else 
			cout << get_max_xor(root, x) << '\n';
	}

	return 0;
}