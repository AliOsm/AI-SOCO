
// ~/BAU/ACM-ICPC/Teams/Rampage/Corvus
// ~/sudo apt-get verdict Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
const int N = 200001;
const ll MOD = 1e9 + 7;

int n, a[N], best[N], nxt[N];
map<ll, int> at;

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif
	
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
		scanf("%d", a + i);
	sort(a, a + n);

	for (int i = 0; i < n; i++)
		at[a[i]] = i;
	
	vector<int> res;

	for (int i = 0; i <= 30; i++) {
		int d = 1 << i;
		best[n - 1] = 1;
		nxt[n - 1] = -1;
		int mx1 = 1, at1 = n-1;
		for (int j = n - 2; j >= 0; j--) {
			best[j] = 1;
			nxt[j] = -1;
			ll x = a[j] + d;
			if (at.find(x) != at.end() && best[at[x]] + 1 > best[j]) {
				best[j] = best[at[x]] + 1;
				nxt[j] = at[x];
				if (best[j] > mx1) {
					mx1 = best[j];
					at1 = j;
				}
			}
		}
		if (mx1 > res.size()) {
			res.clear();
			while (at1 != -1) {
				res.push_back(a[at1]);
				at1 = nxt[at1];
			}
			while (res.size() > 3) res.pop_back();
		}
	}
	printf("%d\n", res.size());
	for (int i = 0; i < res.size(); i++)
		printf("%d ", res[i]);
	puts("");
	return 0;
}