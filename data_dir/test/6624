#pragma comment(linker,"/stack:256000000")

#include <cmath> 
#include <ctime> 
#include <iostream> 
#include <string> 
#include <vector> 
#include <algorithm> 
#include <set> 
#include <map> 
#include <cstring> 
#include <cstdlib> 
#include <queue> 
#include <cstdio> 
#include <cfloat>
#include <cassert>
#include <ctime>

using namespace std;

#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++) 
#define sz(v) (int)(v).size() 
#define all(v) (v).begin(), (v).end()

const int N = 100100;

vector <int> g[N];
priority_queue <pair <int, int> > Q;
vector <int> ids[N];

struct Fenwick {
	int f[N];
	int n;

	Fenwick(int _n) {
		n = _n;
		memset(f, 0, sizeof(f));
	}

	void add(int i, int v) {
		for( ; i < n; i|=(i+1)) {
			f[i] += v;
		}
	}

	int sum(int i){
		int res=0;
		for(;i>=0;i=(i&(i+1))-1){
			res+=f[i];
		}
		return res;
	}
};

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	long long start = clock();
#endif
	int n,a,b;
	cin>>n;
	int cnt=0;
	vector<int> nums;
	REP(i,n){
		scanf("%d%d",&a,&b);
		if(a){
			g[a].push_back(b);
			nums.push_back(b);
		}else{
			cnt++;
		}
	}
	sort(all(nums));
	REP(i,sz(nums)) ids[nums[i]].push_back(i);
	REP(i,N) {
		if(g[i].empty()) continue;
		sort(all(g[i]));
		reverse(all(g[i]));
		Q.push(make_pair(g[i].size(), i));
	}
	if(Q.size()==0){
		assert(cnt==n);
		cout<<0<<endl;
		return 0;
	}
	int mx=Q.top().first;
	if(cnt>mx){
		cout<<0<<endl;
		return 0;
	}
	Fenwick f1(sz(nums));
	Fenwick f2(sz(nums));
	REP(i,sz(nums)){
		f1.add(i,1);
		f2.add(i,nums[i]);
	}
	int res=2000000000;
	int sum=0;
	while(true){
		if(Q.top().first==0){
			res=min(res,sum);
			break;
		}

		int need=Q.top().first-cnt+1;
		if(need<=0){
			res=min(res,sum);
		}else if(need<=n-cnt){
			int L=-1,R=sz(nums)-1;
			while(L+1<R){
				int M=(L+R)/2;
				if(f1.sum(M)<need){
					L=M;
				}else{
					R=M;
				}
			}
			res=min(res,sum+f2.sum(R));
		}
		
		int weight=Q.top().first;
		int id=Q.top().second;
		Q.pop();
		Q.push(make_pair(weight-1,id));

		int val=g[id][weight-1];
		sum+=val;
		cnt++;

		int id2=ids[val].back();
		ids[val].pop_back();
		f1.add(id2,-1);
		f2.add(id2,-val);
	}
	cout<<res<<endl;
	return 0;
}