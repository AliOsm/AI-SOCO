#include <bits/stdc++.h>
using namespace std;

const int N = 1005 , mod = 1e9 + 7;
int dp[N][N][3] , k , step[N];
string s;

int countOne(int x)
{
    int y = x;
    int one = 0;
    while(y)
    {
        if(y & 1)
            one++;
        y /= 2;
    }
    return one;
}

int solve(int idx , int one , int smaller)
{
    if(idx == s.size())
    {
        if(smaller == 0) return 0;
        if(step[one] == k - 1)
            return 1;
        return 0;
    }

    int &ret = dp[idx][one][smaller];
    if(~ret) return ret;

    ret = 0;

    if(s[idx] == '1')
    {
        ret = (solve( idx + 1 , one + 1 , smaller ) + solve(idx + 1 , one , (smaller == 2) ? 1 : smaller ) ) % mod;
    }
    else
    {
        ret = (solve(idx + 1 , one + 1 , (smaller == 2) ? 0 : smaller ) + solve(idx + 1 , one , smaller ) ) % mod;
    }

    return ret;
}


int main()
{
	ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0);

	memset(dp , - 1 , sizeof dp);

	step[0] = -100;
	for(int i = 1 ; i < N ; i++)
    {
        int x = i , c = 0;
        while(x != 1)
        {
            x = countOne(x);
            c++;
        }
        step[i] = c;
    }

    cin >> s >> k;

    if(k == 0)
        return cout << 1 , 0;

    if(k == 1)
        cout << solve(0 , 0 , 2) - 1;
    else
        cout << solve(0 , 0 , 2);
	return 0;
}
