#pragma comment(linker, "/STACK:3000000")

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>

using namespace std;

typedef long long LL;
typedef vector<int> vint;
typedef vector<vint> vvint;

struct edge
{
	int from, to, cap, flow;
	edge() {}
	edge(int from, int to, int cap)
	{
		flow = 0;
		this->from = from;
		this->to = to;
		this->cap = cap;
	}
};

vvint G;
vector<edge> E;

int n;

char buf[1 << 8];
int a[26], b[26];
int used[1 << 7];

int t;

int dfs(int x)
{
	if (x == t)
		return 1;
	if (used[x])
		return 0;
	used[x] = 1;
	for(int i = 0; i < G[x].size(); ++i)
	{
		int id = G[x][i];
		if (E[id].cap - E[id].flow > 0 && dfs(E[id].to))
		{
			E[id].flow++;
			E[id ^ 1].flow--;
			return 1;
		}
	}
	return 0;
}

int main()
{
	scanf("%s", buf);
	int len = strlen(buf);
	scanf("%d", &n);
	G.resize(1 + 26 + n);
	memset(b, 0, sizeof(b));
	for(int i = 0; buf[i]; ++i)
		b[buf[i] - 'a']++;
	t = (int)G.size() - 1;
	for(int i = 0; i < 26; ++i)
	{
		if (b[i] > 0)
		{
			G[n + i].push_back(E.size());
			E.push_back(edge(n + i, t, b[i]));
			G[t].push_back(E.size());
			E.push_back(edge(t, n + i, 0));
		}
	}
	int res = 0;
	int F = 0;
	for(int i = 0; i < n; ++i)
	{
		memset(a, 0, sizeof(a));
		scanf("%s", buf);
		for(int j = 0; buf[j]; ++j)
			a[buf[j] - 'a']++;
		for(int j = 0; j < 26; ++j)
		{
			if (a[j] > 0 && b[j] > 0)
			{
				G[i].push_back(E.size());
				E.push_back(edge(i, n + j, a[j]));
				G[n + j].push_back(E.size());
				E.push_back(edge(n + j, i, 0));
			}
		}
		int flow;
		scanf("%d", &flow);
		while (flow > 0)
		{
			memset(used, 0, sizeof(used));
			if (!dfs(i))
				break;
			F++;
			flow--;
			res += (i + 1);
		}
	}
	if (F != len)
		printf("-1\n");
	else
		printf("%d\n", res);
	return 0;
}
