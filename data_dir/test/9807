#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
#define sc(a) scanf("%d", &a)
#define sc2(a, b) scanf("%d%d", &a, &b)
#define sc3(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define scs(a) scanf("%s", a)
#define pri(x) printf("%d\n", x)
#define prie(x) printf("%d ", x)
#define mp make_pair
#define pb push_back
#define BUFF ios::sync_with_stdio(false);
#define db(x) cerr << #x << " == " << x << endl
typedef long long int ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef vector<ii> vii;
typedef vector< vii> vvii;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3fll;
const ld pi = acos(-1);
const int MOD = 1e9 + 7;
int dp[5010][5010];
int pal[5010][5010];
int r[5010];
int n;
struct Hashing {
	const string &s;
	int n, idx;
	vector<ll> hashes,M,B,eleva;
	Hashing(const string &s) : s(s), hashes(s.size()), eleva(s.size()){
		M={1000000409, 2000003273, 2000003281, 2000003293};
		B={31, 53, 61, 41};
		srand(time(NULL));
		idx=rand()%4;
		getHash();
	}
	void otherprime(){
		idx=(idx+1)%4;
	}
	ll int_mod(ll a) { return (a % M[idx] + M[idx]) % M[idx]; }
	/*hash da string de 0 ate i*/
	void getHash()
	{
		int n = s.size();
		ll hp = 0;
		eleva[0]=1;
		for(int i=1;i<s.size();i++) eleva[i]=(eleva[i-1]*B[idx])%M[idx];
		for (int i = 0; i < s.size(); i++) {
			hp = int_mod(hp * B[idx] + s[i]);
			hashes[i] = hp;
		}
	}
	/*Hash da string compreendida entre i e j*/
	ll getHash(int i, int j)
	{
		if (i == 0) return hashes[j];
		ll h1 = hashes[j];
		ll h2 = (hashes[i - 1] * eleva[j - i+1]) % M[idx];
		ll ret = (h1 - h2) % M[idx] + M[idx];
		return ret % M[idx];
	}
};

bool igual(int i, int j, int x, int y, Hashing &Dilson){
	if(j-i+1==0) return false;
	if(y-x+1==0) return false;
	return Dilson.getHash(i,j) == Dilson.getHash(x,y);
}
int olha(int b, int e, Hashing &Dilson){
	if(b==e) return 1;
	if(dp[b][e]!=-1) return dp[b][e];
	int tam=e-b+1;
	tam/=2;
	int ret=INF;
	if(igual(b, b+tam-1 , e-tam+1, e,Dilson)){
		ret=min(olha(b, b+tam-1,Dilson), olha(e-tam+1, e,Dilson));
		//db(ret);
	}else{
		ret=0;
	}

	if( pal[b][e] )  ret++;
	else ret=0;
	return dp[b][e]=ret;
}
int main()
{
	memset(dp,-1,sizeof(dp));
	string s;
	cin>>s;
	for(char &c : s) c-='a';
	n=s.size();
	Hashing Dilson(s);
	for(int i=0;i<n;i++) pal[i][i]=1;

	for(int i=0;i<n-1;i++) 
		if(s[i]==s[i+1]) pal[i][i+1]=1;
	
	for(int i=n-1;i>=0;i--)
		for(int j=i+2;j<n;j++)
			if(pal[i+1][j-1] and s[i]==s[j]) pal[i][j]=1;
		
	
	//olha(1,2,Dilson);
	for(int i=0;i<n;i++)
		for(int j=i;j<n;j++){
			int cu=olha(i,j,Dilson);
			for(int i=1;i<=cu;i++){
				r[i-1]++;
			}
		}
	//db(igual(1,1,2,2,Dilson));
	for(int i=0;i<n;i++) prie(r[i]);
	cout<<endl;
	return 0;
}
