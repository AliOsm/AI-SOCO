#include <bits/stdc++.h>
#define ll long long
#define MOD 1000000007

using namespace std;

const double pi = acos(-1);
const int N = 1e6 + 5, OO = 1e9;

int g[41][41], n, m, q, s[41][41], dp[41][41][41][41], memo[41][41][41][41];

inline int getSum(int &x1, int &y1, int &x2, int &y2, int arr[41][41]){
    return arr[x2][y2] - arr[x2][y1 - 1] - arr[x1 - 1][y2] + arr[x1 - 1][y1 - 1];
}

int solve(int a, int b, int c, int d){
    if(a > c) return 0;
    int &ret = memo[a][b][c][d];
    if(~ret)
        return ret;
    int x = 0;
    for(int i=b; i<=d; i++)
        x += getSum(a, i, c, d, dp[a][i]);
    return ret = x + solve(a + 1, b, c, d);
}

int main()
{
    scanf("%d %d %d", &n, &m, &q);
    for(int i=1; i<=n; i++){
        scanf(" ");
        for(int j=1; j<=m; j++){
            char c;
            scanf("%c", &c);
            g[i][j] = c - '0';
            s[i][j] = s[i][j - 1] + c - '0';
        }
        for(int j=1; j<=m; j++)
            s[i][j] += s[i - 1][j];
    }
    for(int i=1; i<=n; i++){
        for(int j=1; j<=m; j++){
            for(int r=i; r<=n; r++){
                for(int c=j; c<=m; c++)
                    dp[i][j][r][c] = !getSum(i, j, r, c, s) + dp[i][j][r][c - 1];
                for(int c=j; c<=m; c++)
                    dp[i][j][r][c] += dp[i][j][r - 1][c];
            }
        }
    }
    memset(memo, -1, sizeof memo);
    while(q--){
        int a, b, c, d;
        scanf("%d %d %d %d", &a, &b, &c, &d);
        printf("%d\n", solve(a, b, c, d));
    }
    return 0;
}
