#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 100000 + 10;
const int M = 1000000007;
const double eps = 1e-9;
const double PI = acos(-1);
const int oo = 1000000000;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> ii;
#define pb push_back 
#define all(c) (c).begin(),(c).end()
string s;
int k,dp[5001][5001];
struct node
{
	int ed, ct;
	node *nxt[2];
	node(){ed=ct=0;for(int i=0; i<2; ++i)nxt[i]=NULL;}
}*root;
bool calc(int l, int r){
	if(l>r)
		return 1;
	int &ret=dp[l][r];
	if(ret!=-1)return ret;
	if(s[l]!=s[r])
		return ret=0;
	return ret=calc(l+2,r-2);
}
void add(int st){
	int i=st-1;
	node *cur=root;
	while(++i<s.size()){
		int d=s[i]-'a';
		if(!cur->nxt[d])
			cur->nxt[d]=new node();
		cur=cur->nxt[d];
		if(dp[st][i])
			++cur->ed;
	}
}
int go(node *cur){
	if(!cur)return 0;
	cur->ct=cur->ed;
	for(int i=0; i<2; ++i)
		cur->ct+=go(cur->nxt[i]);
	return cur->ct;
}
void print(node *cur){
	if(cur->ed>=k)
		return;
	k-=cur->ed;
	for(int i=0; i<2; ++i){
		if(!cur->nxt[i])continue;
		if(cur->nxt[i]->ct>=k){
			printf("%c", i+'a');
			print(cur->nxt[i]);
			return;
		}
		k-=cur->nxt[i]->ct;
	}
}
int main(){
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#endif
	memset(dp,-1,sizeof(dp));
	cin>>s>>k;
	root = new node();
	for(int i=0; i<s.size(); ++i)
		for(int j=i; j<s.size(); ++j)
			calc(i,j);
	for(int i=0; i<s.size(); ++i)
		add(i);
	assert(go(root)>=k);
	print(root);
	return 0;	
}