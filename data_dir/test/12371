#include <bits/stdc++.h>

using namespace std;
#define ll long long
int n;
const int N=2e5+5;
int seg[4*N][22][2],a[N];
int lazy[4*N];
void MERGE(int a,int b,int c)
{
    for(int i=0;i<=20;i++)
        for(int j=0;j<=1;j++)
            seg[a][i][j]=seg[b][i][j]+seg[c][i][j];
}
void build(int id=1,int s=1,int e=n)
{
    if(s==e)
    {
        for(int i=0;i<=20;i++)
            seg[id][i][(a[s]>>i)&1]++;
        return;
    }
    int mid=(s+e)/2;
    build(id*2,s,mid);
    build(id*2+1,mid+1,e);
    MERGE(id,id*2,id*2+1);
}
void push(int id)
{
    for(int i=0;i<=20;i++)
        if((lazy[id]>>i)&1)
            swap(seg[id][i][0],seg[id][i][1]);
    lazy[id*2]^=lazy[id];
    lazy[id*2+1]^=lazy[id];
    lazy[id]=0;
}
void update(int su,int eu,int val,int id=1,int s=1,int e=n)
{
    push(id);
    if(s>eu||e<su) return;
    if(s>=su&&e<=eu)
    {
        lazy[id]^=val;
        push(id);
        return;
    }
    int mid=(s+e)/2;
    update(su,eu,val,id*2,s,mid);
    update(su,eu,val,id*2+1,mid+1,e);
    MERGE(id,id*2,id*2+1);
}
ll sum(int id)
{
    ll ret=0;
    for(int i=0;i<=20;i++)
        ret+=1ll*(1<<i)*seg[id][i][1];
    return ret;
}
ll query(int sq,int eq,int id=1,int s=1,int e=n)
{
    push(id);
    if(s>eq||e<sq) return 0;
    if(s>=sq&&e<=eq) return sum(id);
    int mid=(s+e)/2;
    return query(sq,eq,id*2,s,mid)+query(sq,eq,id*2+1,mid+1,e);

}
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    cin>>n;
    for(int i=1;i<=n;i++)
        cin>>a[i];
    build();
    int q;cin>>q;
    while(q--)
    {
        int c;cin>>c;
        if(c==1)
        {
            int l,r;cin>>l>>r;
            cout<<query(l,r)<<'\n';
        }
        else
        {
            int l,r,v;cin>>l>>r>>v;
            update(l,r,v);
        }
    }
    return 0;
}
