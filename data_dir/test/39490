#include <bits/stdc++.h>

typedef long long tint;


#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define forn(i,n) forsn(i,0,n)
#define dforn(i,n) for(tint i = tint(n)-1; i >= 0; i--)
#define debug(x) cout << #x << " = "  << x << endl

using namespace std;

void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

const tint maxN = 262144;
tint fenwick[maxN];

void add (tint k, tint x) 
{
	tint n = maxN-1;
	while (k <= n)
	{
		fenwick[k] += x;
		k += (k & -k);
	}
}

tint sum (tint k) // sum[1..k]
{
	tint s = 0;
	while (k >= 1)
	{
		s += fenwick[k];
		k -= (k & -k);
	}
	return s;
}

tint query (tint l, tint r)
{
	return sum(r) - sum(l-1);
}
 

int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n;
	while (cin >> n) 
	{
		vector<tint> a (n+1);
		forn(i,maxN)
			fenwick[i] = 0;
		forsn(i,1,n+1)
		{
			cin >> a[i];
			a[i] = min(a[i],maxN-1);
		}
			
		tint ans = 0;
		set<pair<tint,tint> > pendientes;
		dforn(i,n+1)
		{
			while (!pendientes.empty())
			{
				pair<tint,tint> top = *pendientes.begin();
				if (-top.first >= i)
					add(top.second,1);
				else
					break;
				pendientes.erase(top);
					
			}
			if (a[i] >= i+1)
				ans += query(i+1,a[i]);
			pendientes.insert({-a[i],i});
		}
				
		cout << ans << "\n";
	}
	
	return 0;
}




