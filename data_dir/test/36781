#include <bits/stdc++.h>
#define endl '\n'

#define prev prev_used_word
#define int unsigned 

using namespace std;
const int MAXN = (1 << 20);
const int bound = (int)8e5 + 42;

void Read(int &x);

int n, m;
int a[MAXN], ans[MAXN];

struct node
{
	int ans, inc, dec;
	
	node() {inc = 0; ans = 0; dec = 0;}
	node(int val)
	{
		inc = val;
		dec = val;
		ans = val;
	}
};

node temp, broken;

node merge(node l, node r)
{
	temp.ans = max(l.ans, r.ans);
	temp.ans = max(temp.ans, l.inc + r.dec);
	temp.inc = max(l.inc, r.inc);
	temp.dec = max(l.dec, r.dec);
	return temp;
}

struct segment_tree
{
	node tr[4 * MAXN];

	void init(int l, int r, int idx)
	{
		if(l == r)
		{
			tr[idx] = node();
			return;
		}

		int mid = (l + r) >> 1;
		init(l, mid, 2 * idx + 1);
		init(mid + 1, r, 2 * idx + 2);

		tr[idx] = merge(tr[2 * idx + 1], tr[2 * idx + 2]);
	}	
	
	void update_dec(int pos, int val, int l, int r, int idx)
	{
		if(l > pos || r < pos)
			return;

		if(l == r && l == pos)
		{
			tr[idx].dec = val; 
			tr[idx].ans = 1;
			return;
		}

		int mid = (l + r) >> 1;
		update_dec(pos, val, l, mid, 2 * idx + 1);
		update_dec(pos, val, mid + 1, r, 2 * idx + 2);

		tr[idx] = merge(tr[2 * idx + 1], tr[2 * idx + 2]);
	}
	
	void update_inc(int pos, int val, int l, int r, int idx)
	{
		if(l > pos || r < pos)
			return;

		if(l == r && l == pos)
		{
			tr[idx].inc = val; 
			tr[idx].ans = 1;
			return;
		}

		int mid = (l + r) >> 1;
		update_inc(pos, val, l, mid, 2 * idx + 1);
		update_inc(pos, val, mid + 1, r, 2 * idx + 2);

		tr[idx] = merge(tr[2 * idx + 1], tr[2 * idx + 2]);
	}

	node query(int qL, int qR, int l, int r, int idx)
	{
		if(l > qR || r < qL)
			return broken;

		if(qL <= l && r <= qR)
			return tr[idx];

		int mid = (l + r) >> 1;
		return merge(query(qL, qR, l, mid, 2 * idx + 1), query(qL, qR, mid + 1, r, 2 * idx + 2));
	}                 
};

void read()
{
	//cin >> n >> m;
	Read(n);
	Read(m);
	for(int i = 1; i <= n; i++)
		//cin >> a[i];
		Read(a[i]);
}

segment_tree t;
vector<int> v[MAXN], f[MAXN];
map<int, int> id;

void compress()
{
	set<int> s;
	for(int i = 1; i <= n; i++)
		s.insert(a[i]);

	for(int i = 1; i <= n; i++)
		for(int j = 0; j < v[i].size(); j++)
			s.insert(v[i][j]);

	int last = -1, curr = 0;	
	for(auto it: s)
		if(it != last)
			id[it] = ++curr;
}

int prev[MAXN];

void solve()
{
	t.init(0, bound, 0);
	for(int i = 0; i < m; i++)
	{
		int idx, val;
		//cin >> idx >> val;
		Read(idx);
		Read(val);

		v[idx].push_back(val);
		f[idx].push_back(i);
	}
	
	compress();

	int cx, s, ret;
	for(int i = n; i >= 1; i--)
	{
		cx = id[a[i]];
		prev[i] = t.query(cx, cx, 0, bound, 0).dec;
		t.update_dec(cx, t.query(cx + 1, bound, 0, bound, 0).dec + 1, 0, bound, 0);
	}

	for(int i = 1; i <= n; i++)
	{
		cx = id[a[i]];
		t.update_dec(cx, prev[i], 0, bound, 0);
		ret = t.query(0, bound, 0, bound, 0).ans;
		
		for(int j = 0; j < v[i].size(); j++)
		{
			s = id[v[i][j]];
			ans[f[i][j]] = t.query(0, s - 1, 0, bound, 0).inc + t.query(s + 1, bound, 0, bound, 0).dec + 1;
			ans[f[i][j]] = max(ans[f[i][j]], ret);
		}
		
		t.update_inc(cx, t.query(0, cx - 1, 0, bound, 0).inc + 1, 0, bound, 0);
	}

	for(int i = 0; i < m; i++)
		printf("%d\n", ans[i]);
}

#undef int
int main()
{
	read();
	solve();
	return 0;
}

#define int unsigned
#define maxl 800000

char sir[maxl];
int pos_ind = 0;

void Next()
{
	if(++pos_ind == maxl) fread(sir, 1, maxl, stdin), pos_ind = 0;
}

void Read(int &x)
{
	for (;sir[pos_ind] < '0' || sir[pos_ind] > '9'; Next ());
	for (x = 0; sir[pos_ind] >= '0' && sir[pos_ind] <= '9'; Next ()) x = x * 10 + sir[pos_ind] - '0';
}
