/*
Nahid Hossain
Jahangirnagar University
Roll:54
*/
#include<bits/stdc++.h>
#define ll          long long int
#define db          double
#define pf          printf
#define sf          scanf
#define ff          first
#define ss          second
#define clr         clear()
#define sz          size()
#define pb          push_back
#define mk          make_pair
#define pi          acos(-1)
#define inf         999999999999999999
#define mod         1000000007
#define ull         unsigned long long int
#define f(i,k,n)    for(ll i=k;i<n;i++)
#define fr(i,n,k)   for(i=n;i>=k;i--)
#define ent(a)      scanf("%lld",&a)
#define ent2(a,b)   scanf("%lld%lld",&a,&b)
#define ent3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define mem(a)      memset(a,0,sizeof(a))
#define vec(v,s)    vector<ll>v[s]
#define arr(a,s)    ll a[s];
//#define check(n,pos) (n&(1<<pos))
//#define set(n,pos)  (n|(1<<pos))
//knight and king//
int dr[]={2, 2, -2, -2, 1, -1, 1, -1};
int dc[]={1,-1,  1, -1, 2,  2,-2, -2};
int dr1[]={0, 0, 0, 1, 1, 1, -1, -1, -1};
int dc1[]={-1,0, 1,-1, 0, 1, -1, 0,   1};
int dr2[]={0, 0, 1, -1};
int dc2[]={1,-1, 0,  0};
////////////////////////////
using namespace std;

#define ma 500002

ll tree[ma*3],a[ma];
void build(ll n,ll b,ll e)
{
 if(b==e)
 {
   tree[n]=a[b];
   return;
 }
 ll mid=(b+e)>>1,l=n*2,r=l+1;
 build(l,b,mid);
 build(r,mid+1,e);
 tree[n]=min(tree[l],tree[r]);
}


ll query(ll n,ll b,ll e,ll x,ll y)
{

 if(e<x||b>y)return inf;
 if(b>=x&&e<=y)return tree[n];
 ll mid=(b+e)>>1,l=n*2,r=l+1;
 ll p=query(l,b,mid,x,y);
 ll q=query(r,mid+1,e,x,y);
 return min(p,q);
}



int main()
{
 ll n,i;
 while(cin>>n)
 {
  ll sum[n+5];


  ll cn=0,s=0;
  ll min1=inf;

  for(i=1;i<=n;i++)
  {
   cin>>a[i];
   s+=abs(a[i]);
   if(a[i]<0)cn++;
   min1=min(min1,a[i]);
  }
  if(n==1)
  {
   cout<<a[n]<<endl;
   continue;
  }

  if(cn>0&&cn<n)cout<<s<<endl;
  else if(cn==n)
  {
   ll max1=-inf;

   for(i=1;i+1<=n;i++)
   {
    ll p=abs(a[i]-a[i+1]);
    max1=max(max1,s-abs(a[i]+a[i+1])+p);
   }

   cout<<max1<<endl;
  }

  else
  {
   cout<<s-2*min1<<endl;
  }



 }


 return 0;
}
