                /*"Success isn't permanent, failure isn't fatal,
                                      it's the courage to continue that counts"*/
#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
const ll mod=1e9+7;         
const int N=4e4+4;

// 1 indicates that the first player has initiative and zero indicates that he does not.

struct tri
{
    tri *a[26];
    
    bool win,lose,is_leaf;
    
    tri()
    {
        win=lose=1;
        
        is_leaf=1;
        
        rep(i,0,26)
        a[i]=NULL;
    }
};

void insert(tri *root,int ind,string s)
{
    int here=s[ind]-'a';
    
    if(root->a[here]==NULL)
    root->a[here]=new tri();
    
    root->is_leaf=0;
    
    //dhyan rahe ki leaf pe kabhi insert function call hoga hi nahi
    //leaf node bas trie me insert hota hai, usse insert call nahi hota
    //aur jis jis node pe insert function aaya hai wo sab leaf nahi hai!
    if(ind+1!=s.size())
    insert(root->a[here],ind+1,s);
    
}

void dfs(tri *root)
{
    if(root->is_leaf)
    {
        root->win=1;
        
        root->lose=0;
        
        return;
    }
    
    rep(i,0,26)
    if(root->a[i]!=nullptr)
    {
        tri *here=root->a[i];
        
        dfs(here);
        
        root->win&=(!here->win);
        
        root->lose&=(!here->lose);
    }
}

int main()
{
    int n,k;
    
    scn(n); scn(k);
    
    tri *root=new tri();
    
    rep(i,0,n)
    {
        string s;
        
        cin>>s;
        
        insert(root,0,s);
    }
    
    dfs(root);
    
    bool flag_win=0,flag_lose=0;
    
    //cout<<root->is_leaf<<endl;
    
    rep(i,0,26)
    if(root->a[i]!=nullptr)
    {
        tri *here=root->a[i];
        
        flag_win|=(here->win);
        
        flag_lose|=(here->lose);
    }
    
    if(flag_win and flag_lose)
    printf("First");
    else
    {
        if(flag_win)
        {
            if(k%2==1)
            printf("First");
            else
            printf("Second");
        }
        else
        printf("Second");
    }
    
    return 0;
}