#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef long double ld;
typedef double db;
typedef string str;

typedef pair<int, int> pi;
typedef pair<ll, ll> pl;
typedef pair<ld, ld> pd;

typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<ld> vd;
typedef vector<str> vs;
typedef vector<pi> vpi;
typedef vector<pl> vpl;
typedef vector<pd> vpd;

#define sz(x) (int)x.size()
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend() 
#define mp make_pair 
#define nxt_prm next_permutation

#define FOR(i, a, b) for (int i = (a); i <= (b); ++i)
#define F0R(i, a) FOR(i, 0, a)
#define ROF(i, a, b) for (int i = (b); i >= (a); --i)
#define R0F(i, a) ROF(i, 0, a)
#define trav(a, x) for (auto& a : x)

const int INT_INF = 2e9;
const ll LL_INF = 1e18;
const ld PI = acos(ld(-1));

template<class T> bool ckmin(T &a, const T &b) {
        return a > b ? a = b, 1 : 0;
}
template<class T> bool ckmax(T &a, const T &b) {
        return a < b ? a = b, 1 : 0;
}

namespace input {
        template<class T> void re(complex<T> &x);
        template<class T1, class T2> void re(pair<T1, T2> &p);
        template<class T> void re(vector<T> &a);
        template<class T, size_t SZ> void re(array<T, SZ> &a);

        template<class T> void re(T &x) { cin >> x; }
        void re(double &x) { string t; re(t); x = stod(t); }
        void re(ld &x) { string t; re(t); x = stold(t); }
        template<class T, class... Ts> void re(T &t, Ts &... ts) {
                re(t); re(ts...);
        }

        template<class T> void re(complex<T> &x) { T a, b; re(a, b); x = { a,b }; }
        template<class T1, class T2> void re(pair<T1, T2> &p) { re(p.f, p.s); }
        template<class T> void re(vector<T> &a) { F0R(i, sz(a) - 1) re(a[i]); }
        template<class T, size_t SZ> void re(array<T, SZ> &a) { F0R(i, SZ - 1) re(a[i]); }
}

using namespace input;

namespace output {
        void pr(int x) { cout << x; }
        void pr(long x) { cout << x; }
        void pr(ll x) { cout << x; }
        void pr(unsigned x) { cout << x; }
        void pr(unsigned long x) { cout << x; }
        void pr(unsigned long long x) { cout << x; }
        void pr(float x) { cout << x; }
        void pr(double x) { cout << x; }
        void pr(ld x) { cout << x; }
        void pr(char x) { cout << x; }
        void pr(const char *x) { cout << x; }
        void pr(const string &x) { cout << x; }
        void pr(bool x) { pr(x ? "true" : "false"); }
        template<class T> void pr(const complex<T> &x) { cout << x; }

        template<class T1, class T2> void pr(const pair<T1, T2> &x);
        template<class T> void pr(const T &x);

        template<class T, class... Ts> void pr(const T &t, const Ts &... ts) {
                pr(t); pr(ts...);
        }
        template<class T1, class T2> void pr(const pair<T1, T2> &x) {
                pr("{", x.first, ", ", x.second, "}");
        }
        template<class T> void pr(const T &x) {
                pr("{"); // const iterator needed for vector<bool>
                bool fst = 1; for (const auto &a : x) pr(!fst ? ", " : "", a), fst = 0;
                pr("}");
        }

        void ps() { pr("\n"); } // print w/ spaces
        template<class T, class... Ts> void ps(const T &t, const Ts &... ts) {
                pr(t); if (sizeof...(ts)) pr(" "); ps(ts...);
        }

        void pc() { pr("]\n"); } // debug w/ commas
        template<class T, class... Ts> void pc(const T &t, const Ts &... ts) {
                pr(t); if (sizeof...(ts)) pr(", "); pc(ts...);
        }
}

using namespace output;

namespace io {
        void setIn(string s) { freopen(s.c_str(), "r", stdin); }
        void setOut(string s) { freopen(s.c_str(), "w", stdout); }
        void setIO(string s = "", bool inter = false) {
#ifdef ac
                if (!inter) {
                        setIn("a.txt");
                }
#endif
                cout.setf(ios::fixed);
                cout.precision(20);
                ios_base::sync_with_stdio(0); cin.tie(0);
                if (sz(s)) { setIn(s + ".in"), setOut(s + ".out"); }
        }
}

using namespace io;

pi getNorm(pi a) {
        if (a.first > a.second) swap(a.first, a.second);
        return a;
}

ll safeMult(ll a, ll b) {
        if (a == 0 || b == 0)
                return 0;
        if (!((LL_INF / a) / b))
                return LL_INF;
        return a * b;
}

mt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());

int main() {
        setIO();

        int q;
        re(q);

        while (q--) {
                int n;
                re(n);
                vi a(n);
                re(a);
                sort(rall(a));
                trav(i, a) pr(i, " ");
                pr("\n");
        }
        
        return 0;
}