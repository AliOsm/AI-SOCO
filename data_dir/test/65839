#define _CRT_SECURE_NO_WARNINGS 1
#include <iostream>
#include <vector>
#include <queue>
#include <functional>
#include <stdio.h>
#include <map>
#include <algorithm>
#include <set>
#include <string>
#include <cstring>
#include <sstream>
#include <cmath>
#include <iomanip>
#include <cstdio>
#include <numeric>
#include <utility>

using namespace std;

typedef long long ll;
typedef unsigned int uint;
#define sc(x)           scanf("%d",&x)
#define all(v)				((v).begin()), ((v).end())
#define sz(v)				(v.size())
#define clr(v, d)			memset(v, d, sizeof(v))
#define rep(i, v)		for(int i=0;i<sz(v);++i)
#define lop(i, n)		for(int i=0;i<n;++i)
#define lpi(i, j, n)	for(int i=(j);i<(int)(n);++i)
#define lpd(i, j, n)	for(int i=(j);i>=(int)(n);--i)
#define repa(v)				lpi(i, 0, sz(v)) lpi(j, 0, sz(v[i]))
#define pb					push_back
#define MP					make_pair
#define mem(x,d)			memset(x,d,sizeof(x))
const int dx[] = { 0, -1, 0, 1, -1, -1, 1, 1 };
const int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };
const int N = 100005;
int n; map<int, int>mp; pair<int, int>Start, End; pair<int, pair<int, int> >Input[N]; map<pair<int, int>, bool>v;
vector< pair<int,int> >adj[N];
struct node
{
	int x, y, lvl;
};
int bfs()
{
	int x, y, lvl;
	queue<node>q;
	q.push({ Start.first,Start.second,0 });
	while (!q.empty())
	{
		x = q.front().x;  y = q.front().y; lvl = q.front().lvl; q.pop();
		if (x == End.first && y == End.second) return lvl;
		if (v.count({x, y})) continue;
		v[{x, y}] = 1;
		for (int i = 0; i < 8; ++i)
		{
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx >= 0 && ny >= 0)
			{
				for (int j = 0; j < sz(adj[nx]); ++j)
				{
					int l = adj[nx][j].first, r = adj[nx][j].second;
					if (ny >= l && ny <= r && !v.count({nx,ny}))
					{
						q.push({ nx,ny,lvl + 1 });
						break;
					}
					if (ny < l) break;
				}
			}
		}
	}
	return -1;
	
}
int main()
{
	//#ifndef ONLINE_JUDGE
		//freopen("input.txt", "r", stdin);
		//freopen("output.txt", "w", stdout);
	//#endif
	int id = 0;
	sc(Start.first); sc(Start.second); sc(End.first); sc(End.second); sc(n);
	Input[n].first = Start.first; Input[n+1].first = End.first;
	for (int i = 0; i < n; ++i) sc(Input[i].first),sc(Input[i].second.first),sc(Input[i].second.second);
	sort(Input, Input + n+2);
	for (int i = 0; i < n+2; ++i)
	{
		if (!mp.count(Input[i].first)) mp[Input[i].first] = id++;
		adj[mp[Input[i].first]].push_back({ Input[i].second.first ,Input[i].second.second });
	}
	Start.first = mp[Start.first];
	End.first = mp[End.first];
	printf("%d\n", bfs());
	
	return 0;
}