/*
    OUTLAW!!
           ---SIDHU MOOSEWALA
                                */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli M=1000000007;   
lli INF=1e17;
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcount(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctz(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clz(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffs(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,y,k,m;
const double pi1=3.14159265358979323846;
//unordered_map<pair<ll,lli>,lli> mp;
lli me(lli a,lli b,lli M)
{
    if(b==0)
    return 1;
    else if(b%2==0)
    return me((a*a)%M,b/2,M);
    else
    return (a%M*me((a*a)%M,(b-1)/2,M)%M)%M;
}
lli mI(lli a,lli m)
{
    return me(a,m-2,m);
}
//lli tot=0;
vector<lli> pf(string s) {
    int n = (int)s.length();
    vector<lli> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}
//map<ll,lli> dp;
//set<lli> s[100005];
//lli dp[3005][3005];
//ost s[500005];
//string sdp[3005][3005];
lli vis[3000004];
vector<lli> v[500000];
lli cx,cy;
void dfs(lli i)
{
    if(vis[i])
    return;
    if(i>=200000)
    cy++;
    else
    cx++;
    vis[i]=1;
    for(auto &j: v[i])
    dfs(j);
}
struct edge
{
    lli x,y,z;
};
bool cmp(edge a,edge b)
{
    if(a.y==b.y)
    return a.z<b.z;
    return a.y<b.y;
}
lli dp[1005][2][1005];
lli mk[1005];
void calc(lli k)
{
    for(lli i=1;i<=1000;i++)
    {
        lli oo=bip(i);
        mk[i]+=1;
        if(i==1)
        continue;
        mk[i]+=mk[oo];
    }
}
lli solve(string s)
{
    lli l=s.length();
    dp[0][0][0]=1;
    for(int j=0;j<l;j++)
    {
        for(int i=1;i<=l;i++)
        {
            dp[j+1][1][i]=dp[j][1][i-1]+dp[j][1][i];
            if(s[j]>'0')
            dp[j+1][1][i]+=dp[j][0][i],dp[j+1][0][i]+=dp[j][0][i-1];
            if(s[j]=='0')
            dp[j+1][0][i]+=dp[j][0][i];
            dp[j+1][0][i]%=M;
            dp[j+1][1][i]%=M;
        }
        if(s[j]>'0')
        dp[j+1][1][0]+=dp[j][1][0]+dp[j][0][0];
        else
        dp[j+1][0][0]+=dp[j][0][0],dp[j+1][1][0]+=dp[j][1][0];
        dp[j+1][0][0]%=M;
        dp[j+1][1][0]%=M;
    }
    lli ans=0;
    //cout<<dp[l][0][2]<<" "<<dp[l][1][2]<<endl;
    for(int j=1;j<=l;j++)
    {
        if(mk[j]==k)
        {
            ans+=dp[l][0][j]+dp[l][1][j];
            ans%=M;
        }
    }
    if(k==0)
    ans++;
    if(k==1)
    ans--;
    ans%=M;
    return ans;
}
int main()
{
    ios_base::sync_with_stdio(0);
    string r;
    cin>>r;
    mem3(dp,0);
    cin>>k;
    calc(k);
    lli ans1=solve(r);
    cout<<ans1;
    //for(int i=1;i<=n;i++)
}