#include<iostream>
#include <bits/stdc++.h>
#include <math.h>
#include <string>
#include <sstream>
#define ll long long
#define F first
#define S second
#define pb push_back
#define ld long double
#define pll pair<long long,long long>
using namespace std;
ll mod=998244353;
ll gcd (ll a,ll b)
{
    if(b==0)
        return a;
    else
        return gcd(b,a%b);
}
ll modularExp(ll x,ll n,ll mod)
{
    ll result=1;
    while(n>0)
    {
        if(n%2==1)
            result=(result*x)%mod;
        x=((x%mod)*(x%mod))%mod;
        n=n/2;
    }

    return (result)%mod;

}
bool isPrime(ll n)
{
    for(ll i=2;i*i<=n;i++)
        if(n%i==0)
        return false;
    return true;
}
ll dp[100005][205][2],csum[205][2];
int main()
{
 ll n;
 cin>>n;
 vector<ll> v(n+1);
 ll i,j;
 for(i=1;i<=n;i++)
    cin>>v[i];
 if(v[1]==-1)
 {
     for(i=1;i<=200;i++)
     dp[1][i][0]=1;
 }
 else
    dp[1][v[1]][0]=1;

 for(i=2;i<=n;i++)
 {
     for(j=1;j<=200;j++)
     {
         csum[j][0]=(csum[j-1][0]+dp[i-1][j][0])%mod;
         csum[j][1]=(csum[j-1][1]+dp[i-1][j][1])%mod;
     }
     for(j=1;j<=200;j++)
     {
         dp[i][j][0]=(dp[i][j][0]+csum[j-1][1]+csum[j-1][0])%mod;
         dp[i][j][1]=(dp[i][j][1]+csum[200][1]-csum[j-1][1]+dp[i-1][j][0]+ 6*mod)%mod;
     }
     if(v[i]!=-1)
        for(j=1;j<=200;j++)
            if(v[i]!=j)
     {
         dp[i][j][0]=0;
         dp[i][j][1]=0;
     }
 }
 ll ans=0;
 for(i=1;i<=200;i++)
    ans=(ans+dp[n][i][1])%mod;
 if(v[n]==-1)
    cout<<ans;
 else
    cout<<dp[n][v[n]][1];






 }
