#include <bits/stdc++.h>
using namespace std;
typedef long long Long;

const Long MX = 510;
const Long MOD = 998244353;

Long A[MX];
Long P[MX];
Long turno[MX][MX];
Long memo[MX][MX];

Long mul(Long a, Long b){
	return (a*b)%MOD;
}

Long sum(Long a, Long b){
	a += b;
	if(a >= MOD) a -= MOD;
	return a;
}

Long dp(Long l, Long r){
	if(l >= r){
		return 1;
	}
	if(memo[l][r] != -1){
		return memo[l][r];
	}
	Long col = turno[l][r];
	//optimizacion con al division de for debido a la independencia de L con R
	Long L = 0, R = 0;
	for(Long i = l; i <= P[col]; i++){
		L = sum(L,mul(dp(l,i-1),dp(i,P[col]-1)));
	}
	for(Long j = P[col]; j <= r; j++){
		R = sum(R,mul(dp(P[col]+1,j),dp(j+1,r)));
	}
	//TLE
	/*Long ans = 0;
	for(Long i = l; i <= P[col]; i++){
		for(Long j = P[col]; j <= r; j++){
			ans = sum(ans,mul(mul(dp(l,i-1),dp(i,P[col]-1)),mul(dp(P[col]+1,j),dp(j+1,r))));
		}
	}*/
	memo[l][r] = mul(L,R);
	return memo[l][r];
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	cout.precision(10);
	cout << fixed;
	
	Long n, m;
	cin >> n >> m;
	for(Long i = 1; i <= m; i++){
		cin >> A[i];
		P[A[i]] = i;
	}
	for(Long i = 1; i <= m; i++){
		for(Long j = 1; j <= m; j++){
			memo[i][j] = -1;
		}
	}
	for(Long i = 1; i <= m; i++){
		for(Long j = i; j <= m; j++){
			turno[i][j] = MOD;
			for(Long k = i; k <= j; k++){
				turno[i][j] = min(turno[i][j],A[k]);
			}
		}
	}
	cout << dp(1,m) << endl;
	return 0;
}
