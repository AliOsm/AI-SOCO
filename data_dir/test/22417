#include<bits/stdc++.h>
#include<ext/numeric>
#include<ext/hash_map>
using namespace std;
using namespace __gnu_cxx;

#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)  (int)v.size()
#define WHITE -1
#define GREY   0
#define BLACK  1
#define CLR(a,v) memset(a,v,sizeof a)
#define PC(x) __builtin_popcount(x)
#define MP make_pair

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef unsigned int ui;

typedef complex<double> point;
//#define X real()
//#define Y imag()
#define vec(a,b) ((b)-(a))
#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define colliner pointOnLine

const double PI = acos(-1.0);

int dx[] = { 0, -1, 0, 1, -1, -1, 1, 1 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };

const int MAX = 105, MOD = 1e9 + 9, oo = (1 << 30);
const ll OO = 1ll << 60;
const double EPS = 1e-9;

struct f {
	int x, k, m, fMsk;
	bool operator <(f fr) {
		return k > fr.k;
	}
} a[MAX];

int n, m, b;
ll dp[2][1 << 20];

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
#endif
	scanf("%d%d%d", &n, &m, &b);
	int all = 0;
	for (int i = 0; i < n; ++i) {
		scanf("%d%d%d", &a[i].x, &a[i].k, &a[i].m);
		for (int j = 0; j < a[i].m; ++j) {
			int x;
			scanf("%d", &x);
			--x;
			a[i].fMsk |= (1 << x);
			all |= (1 << x);
		}
	}
	if (PC(all) != m)
		return puts("-1");
	sort(a, a + n);
	for (int i = 0; i < (1 << m); ++i)
		dp[0][i] = 5e18;
	dp[0][0] = 0;
	dp[0][a[0].fMsk] = a[0].x + a[0].k * 1ll * b;
	int cur = 1;
	for (int i = 1; i < n; ++i, cur = 1 - cur) {
		for (int msk = 0; msk < (1 << m); ++msk)
			dp[cur][msk] = dp[1 - cur][msk];
		for (int msk = 0; msk < (1 << m); ++msk) {
			int fm = a[i].fMsk;
			if (msk == 0)
				dp[cur][fm | msk] = min(dp[cur][fm | msk],
						dp[1 - cur][msk] + a[i].x + a[i].k * 1ll * b);
			else
				dp[cur][fm | msk] = min(dp[cur][fm | msk],
						dp[1 - cur][msk] + a[i].x);
		}
	}
	printf("%lld\n", dp[!(n & 1)][(1 << m) - 1]);
}
