#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef long double real;

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif

using namespace std;

const int MaxN = 10004, MaxBuf = 256, NA = -1, MaxC = 0x3F3F3F3F;

int p [MaxN];
char buf [MaxBuf];
bool b [MaxN];
int n;

int main (void)
{
 int i, j, k;

 while (scanf (" %d", &n) != EOF)
 {
  vector <pair <int, string> > v;
  for (i = 0; i < n; i++)
  {
   scanf (" %s %d", buf, &j);
   v.push_back (make_pair (j, (string) buf));
  }

  sort (v.begin (), v.end ());
  for (i = 0; i < n; i++)
   if (v[i].first > i)
    break;
  if (i < n)
  {
   printf ("-1\n");
   continue;
  }

  memset (b, 0, sizeof (b));
  for (i = n - 1; i >= 0; i--)
  {
   k = -1;
   for (j = 0; j <= v[i].first; j++)
   {
    do
    {
     k++;
    }
    while (b[k]);
    assert (k < n);
   }
//   fprintf (stderr, "k = %d, i = %d\n", k, i);
   b[k] = true;
   p[k] = i;
  }

  for (i = 0; i < n; i++)
   printf ("%s %d\n", v[p[i]].second.c_str (), n - p[i]);
 }
 return 0;
}
