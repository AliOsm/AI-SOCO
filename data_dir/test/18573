#include<bits/stdc++.h>
using namespace std;

const int N = 4000*1000 + 100;
int tr[N][3] , num[N][3] , n , m;
bool mark[4*N];
string s , t;

void logic(int ind){
    
    bool a = mark[ind*2] , b = mark[ind*2 + 1];

    tr[ind][0] = max(tr[ind*2][a] + num[ind*2 + 1][1 - b] , num[ind*2][a] + tr[ind*2 + 1][b]);
    tr[ind][1] = max(tr[ind*2][1 - a] + num[ind*2 + 1][b] , num[ind*2][1 - a] + tr[ind*2 + 1][1 - b]);
        
    num[ind][0] = num[ind*2][a] + num[ind*2 +1][b];
    num[ind][1] = num[ind*2][1 - a] + num[ind*2 +1][1 - b];

    return;
}

void Make(int b = 0 , int e = n , int ind = 1){
    
    if(b+1 == e){
        tr[ind][0] = tr[ind][1] = num[ind][s[b] - '0'] = 1;
        return;
    }
    
   int mid = (b + e)/2;

   Make(b , mid , ind*2);
   Make(mid , e , ind*2 + 1);

   logic(ind);
//   cout << "%%" << ind << " " << tr[ind][0] << " " << tr[ind][1] << endl;
   return;
}

void rev(int ind){

    mark[ind] = 0;    

    swap(tr[ind][0] , tr[ind][1]);
    swap(num[ind][0] , num[ind][1]);

    if(ind*2 < N){ 
         mark[ind*2] = 1 -mark[ind*2];
         mark[ind*2 + 1] = 1 - mark[ind*2 + 1];
    }

    return;
}

void sett(int l , int r , int b = 0 , int e = n , int ind = 1){
   
   if(l <= b && e <= r){
        mark[ind] = (mark[ind] + 1)%2;
        if(mark[ind]%2 == 1)
             rev(ind);
        return;
   }
   
   if(mark[ind]%2 == 1)
        rev(ind);

   int mid = (b + e)/2;
   if(l < mid)
        sett(l , r , b , mid , ind*2);
   if(r > mid)
        sett(l , r , mid , e , ind*2 + 1);
   
   logic(ind);
   return;
}

int main(){

   ios_base::sync_with_stdio(0) , cin.tie(0) , cout.tie(0);
   int l , r;
   cin >> n >> m >> s;

   for(int i = 0 ; i < n ; i++){
        if(s[i] == '4')
             s[i] = '0';
        else
             s[i] = '1';
        //disrespectful =))
   }

   Make();
//   cout <<"%%"<< tr[1][0] << "  " << tr[1][1] << endl;
   for(int i = 0 ; i < m ; i++){
        cin >> t;
        if(t == "switch"){
            cin >> l >> r;
            l--;
            sett(l , r);
        }
        else
           cout << tr[1][mark[1]] << endl;
   }
   
   return 0;
}
