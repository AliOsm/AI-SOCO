/*
▄███████▀▀▀▀▀▀███████▄
░▐████▀▒ЗАПУСКАЕМ▒▀██████▄
░███▀▒▒▒▒▒ДЯДЮ▒▒▒▒▒▒▀█████
░▐██▒▒▒▒▒▒БОГДАНА▒▒▒▒▒████▌
░▐█▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒████▌
░░█▒▄▀▀▀▀▀▄▒▒▄▀▀▀▀▀▄▒▐███▌
░░░▐░░░▄▄░░▌▐░░░▄▄░░▌▐███▌
░▄▀▌░░░▀▀░░▌▐░░░▀▀░░▌▒▀▒█▌
░▌▒▀▄░░░░▄▀▒▒▀▄░░░▄▀▒▒▄▀▒▌
░▀▄▐▒▀▀▀▀▒▒▒▒▒▒▀▀▀▒▒▒▒▒▒█
░░░▀▌▒▄██▄▄▄▄████▄▒▒▒▒█▀
░░░░▄██████████████▒▒▐▌
░░░▀███▀▀████▀█████▀▒▌
░░░░░▌▒▒▒▄▒▒▒▄▒▒▒▒▒▒▐
░░░░░▌▒▒▒▒▀▀▀▒▒▒▒▒▒▒▐
TAYA 
*/
#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native")
#pragma GCC optimize("fast-math")
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
#include <random>
 
using namespace std;


#define ll long long
#define ld double
#define null NULL
#define prev prev228
#define index index228
#define left left228
#define right right228
#define hash hash228
#define y1 y1228
#define firn(i, n) for (int i = 0; i < (int)n; ++i)
#define forn(i, n) for (int i = 1; i <= (int)n; ++i)
#define endl '\n'

template<typename T> void uin(T &a, T b) {
	if (b < a) a = b;
}

template<typename T> void uax(T &a, T b) {
	if (b > a) a = b;
}

const int maxn = 200 * 1000 + 228;

int n, m, k;

set<int> g[maxn];

vector<int> res;

int deg[maxn];

bool in[maxn];


vector< pair<int, int> > edges;

set< pair<int, int> > s;

void process() {
	// cout << "S IN process : \n";
	// for (auto p : s) {
	// 	cout << "(" << p.first << "  " << p.second << ") \n";
	// }
	while (!s.empty()) {
		pair<int, int> p = *s.begin();
		if (p.first >= k) break;
		s.erase(p);
		// cout << "s.erase(" << p.first << ", " << p.second << ")\n";
		in[p.second] = 0;
		for (int to : g[p.second]) {
			if (in[to]) {
				s.erase({deg[to], to});
				// cout << "s.erase(" << deg[to] << ", " << to << ")\n";
			}
			--deg[to];
			if (in[to]) {
				s.insert({deg[to], to});
				// cout << "s.insert({" << deg[to] << ", " << to << "})\n";
			}
		}
	}
	res.push_back((int)s.size());
	// cout << "end\n";
}

void solve() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cin >> n >> m >> k;
	forn(i, m) {
		int u, v;
		cin >> u >> v;
		edges.push_back({u, v});
		++deg[u];
		++deg[v];
		g[u].insert(v);
		g[v].insert(u);
	}
	forn(i, n) {
		s.insert({deg[i], i});
		in[i] = 1;
	}
	process();
	// cout << "d : ";
	// forn(i, n) cout << deg[i] << " ";
	// cout << endl;
	// cout << "S : \n";
	// for (auto p : s) {
	// 	cout << "(" << p.first << "  " << p.second << ") \n";
	// }
	while (edges.size() > 1) {
		pair<int, int> e = edges.back();
		edges.pop_back();
		int u = e.first, v = e.second;
		if (in[u] && in[v]) {
			s.erase({deg[u], u});
			s.erase({deg[v], v});
			--deg[u];
			--deg[v];
			s.insert({deg[u], u});
			s.insert({deg[v], v});
		}
		g[u].erase(v);
		g[v].erase(u);
		process();
		// cout << " {" << u << ", " << v << "}\n";
		// forn(i, n) cout << deg[i] << " ";
		// cout << endl;
		// cout << "S : \n";
		// for (auto p : s) {
		// 	cout << "( " << p.first << " " << p.second << " )" << endl;
		// }
		// cout << endl;
	}
	reverse(res.begin(), res.end());
	for (int i : res) {
		cout << i << endl;
	}
}


signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	solve();
    return 0;
}