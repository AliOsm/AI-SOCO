#include <bits/stdc++.h>

using namespace std;

#define endl '\n'
#define DB(x) cout<<#x<<"="<<x<<endl;
#define SZ(x) (int)((x).size())
#define MP make_pair

typedef long long int64;
typedef pair<int,int> pii;
typedef vector<int> vi;

const int oo = 0x3f3f3f3f;
const double EPS = 1e-9;
const int MAXN = (int)1e6 + 10;
const int MOD = (int)1e9 + 21;
const int BASE = 37;

char s[MAXN];
int64 SHASH[MAXN];
int64 POW[MAXN];
int mk[MAXN];

int64 getHash(int b, int e)
{
	int64 ans = SHASH[e + 1] - SHASH[b] * POW[e - b + 1];
	return (ans % MOD + MOD) % MOD;
}

int64 modexp(int64 h, int p, int l)
{
	if (p == 1) return h;
	if (p & 1){
		int64 nh = modexp(h, p - 1, l);
		nh = nh * POW[l] % MOD + h;
		return nh % MOD;
	}
	else{
		int64 nh = modexp(h, p / 2, l);
		nh = nh * POW[l * p / 2] % MOD + nh;
		return nh % MOD;
	}
}

int lcp(int p1, int p2, int l)
{
	int lo = 0, hi = l;
	while (lo < hi){
		int mid = (lo + hi + 1) >> 1;
		if (getHash(p1, p1 + mid - 1) == getHash(p2, p2 + mid - 1))
			lo = mid;
		else
			hi = mid - 1;
	}
	return lo;
}

int main()
{
	int n, k;
	scanf("%d%d%s", &n, &k, s);

	POW[0] = 1;
	for (int i = 1; i <= n; ++i){
		SHASH[i] = (BASE * SHASH[i - 1] + s[i - 1] - 'a' + 1) % MOD;
		POW[i] = POW[i - 1] * BASE % MOD;
	}

	for (int i = 1; i * k <= n; ++i)
	{
		int64 cur = getHash(0, i-1);
		if (modexp(cur, k, i) != getHash(0, i * k - 1)) continue;
		int _lcp = lcp(0, i * k, min(i, n - i * k));
		mk[i * k - 1] = _lcp + 1;
//		cout << i * k << " " << _lcp + 1 << endl;
	}

	int cnt = 0;
	for (int i = 0; i < n; ++i)
	{
		cnt = max(cnt, mk[i]);
		if (cnt) putchar('1');
		else putchar('0');
		cnt--;
	}
	putchar('\n');

	return 0;
}
