#include<bits/stdc++.h>
#define lf double
#define ll long long
#define ull unsigned ll
#define ii pair<int,int>
#define li pair<ll,int>
#define iii pair<ii,int>
#define iiii pair<ii,ii>
#define iiii2 pair<int,iii>
#define lii pair<ll,ii>
#define lolo pair<ll,ll>
#define heap priority_queue
#define mp make_pair
#define st first
#define nd second
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define all(x) x.begin(),x.end()
#define len(x) strlen(x)
#define sz(x) (int) x.size()
#define orta ((bas+son)/2)
#define min3(x,y,z) min(min(x,y),z)
#define max3(x,y,z) max(max(x,y),z)
#define umin(x,y) x=min(x,y)
#define umax(x,y) x=max(x,y)
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define MOD 1000000007
#define inf 2000000000000000001
#define N 500005
#define LOG 18
#define magic 100
#define KOK 350
#define EPS 0.000000000001
#define pw(x) 1ll*((1ll)<<(x))
#define PI 3.1415926535
using namespace std;

int a[N],nxt[N],n,q,l,r,ans[N];
ii S[N*4];
vector<iii> que;
map<int,int> m;

ii get(int node,int bas,int son,int x,int y) {

	if(bas>y || son<x) return {0,0};

	if(bas>=x && son<=y) return S[node];

	return max(get(node*2,bas,orta,x,y),get(node*2+1,orta+1,son,x,y));

}

void up(int node,int bas,int son,int x,int val) {

	if(bas>x||son<x) return ;

	if(bas==x && son==x) {

		S[node]={val,bas};

		return ;

	}

	up(node*2,bas,orta,x,val);
	up(node*2+1,orta+1,son,x,val);

	S[node]=max(S[node*2],S[node*2+1]);

}

int main() {

 	#if 0
	freopen("input.txt","r",stdin);
 	#endif

	scanf("%d",&n);

	for(int i=1;i<=n;i++) {

		scanf("%d",&a[i]);

	}

	for(int i=n;i>=1;i--) {

		if(!m[a[i]]) {

			nxt[i]=n+1;

		}
		else {

			nxt[i]=m[a[i]];

		}

		m[a[i]]=i;

	}

	for(int i=1;i<=n;i++) {

		if(m[a[i]]==i) {

			up(1,1,n+1,i,nxt[i]);

		}

	}

	scanf("%d",&q);

	for(int i=1;i<=q;i++) {

		scanf("%d %d",&l,&r);

		que.pb({{l,r},i});

	}

	sort(all(que));

	int last=0;

	for(int i=0;i<sz(que);i++) {

		while(last+1<=n && que[i].st.st>=last+1) {

			if(last>0) {

				up(1,1,n+1,nxt[last],nxt[nxt[last]]);

			}

			last++;

		}

		ii res=get(1,1,n+1,que[i].st.st,que[i].st.nd);

		if(res.st>que[i].st.nd) {

			ans[que[i].nd]=a[res.nd];

		}
		else {

			ans[que[i].nd]=0;

		}

	}

	for(int i=1;i<=q;i++) printf("%d\n",ans[i]);

}