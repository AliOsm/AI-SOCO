#include <bits/stdc++.h>
using namespace std;

const int MaxN = 1e5 + 15;

int go[MaxN][26];
int link[MaxN];
int parent[MaxN];
char parentChar[MaxN];
int all;

int getLink(int);
int goTo(int, char);

int getLink(int x)
{
    if(!link[x])
    {
        if(x == 1 || parent[x] == 1)
            link[x] = 1;
        else
            link[x] = goTo(getLink(parent[x]), parentChar[x]);
    }
    return link[x];
}

int goTo(int x, char q)
{
    if(!go[x][q - 'a'])
    {
        if(x == 1)
            go[x][q - 'a'] = 1;
        else
            go[x][q - 'a'] = goTo(getLink(x), q);
    }
    return go[x][q - 'a'];
}

void add(string & s)
{
    int cur = 1;
    for(int i = 0; i < s.size(); ++i)
    {
        char q = s[i];
        if(!go[cur][s[i] - 'a'])
        {
            ++all;
            parent[all] = cur;
            parentChar[all] = s[i];
            go[cur][s[i] - 'a'] = all;
        }
        cur = go[cur][s[i] - 'a'];
    }
}

void up(int & a, int b)
{
    if(a < b)
        a = b;
}

int main()
{
//    freopen("input.txt", "r", stdin);
    ios_base :: sync_with_stdio(false);
    cin.tie(NULL);
    string s, ss;
    cin >> s >> ss;
    all = 1;
    add(ss);
    vector < vector <int> > dp;
    dp.resize(s.size() + 2);
    for(int i = 0; i < dp.size(); ++i)
        dp[i].resize(all + 2);
    dp[0][1] = 1;
    int ans = 0;
    for(int i = 1; i <= s.size(); ++i)
    {
        char q = s[i - 1];
        if(q == '?')
            for(q = 'a'; q <= 'z'; ++q)
            {
                for(int j = 1; j <= all; ++j)
                    if(dp[i - 1][j])
                    {
                        int to = goTo(j, q);
                        int cost = dp[i - 1][j];
                        if(to == all)
                            ++cost;
                        ans = max(ans, cost);
                        up(dp[i][to], cost);
                    }
            }else
            {
                for(int j = 1; j <= all; ++j)
                    if(dp[i - 1][j])
                    {
                        int to = goTo(j, q);
                        int cost = dp[i - 1][j];
                        if(to == all)
                            ++cost;
                        ans = max(ans, cost);
                        up(dp[i][to], cost);
                    }
            }
    }
    cout << ans - 1 << '\n';
    return 0;
}
