#include<bits/stdc++.h>
using namespace std;

typedef long long                   ll;
typedef pair<ll,ll>                 pll;
#define all(x)                      (x).begin(),(x).end()
#define F                           first
#define S                           second

const ll MXM = 500 + 10;
const ll INF = 8e18;

ll n, m;
ll dis[MXM][MXM][2];
pair<pll, ll> par[MXM][MXM][2];
vector<ll> G[MXM], Ans1, Ans2;
queue<pair<pll, ll> > q;

int main(){
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    cin >> n >> m;
    for(int i = 0; i < MXM; i ++)
        for(int j = 0; j < MXM; j ++)
            for(int sit = 0; sit <= 1; sit ++) dis[i][j][sit] = INF, par[i][j][sit] = {{-1, -1}, -1};

    for(int i = 0; i < m; i ++){
        ll u, v;
        cin >> u >> v;
        G[u].push_back(v);
        G[v].push_back(u);
    }

    dis[1][n][0] = 0;
    q.push({{1, n}, 0});

    while(!q.empty()){
        ll x = q.front().F.F, y = q.front().F.S;
        bool sit = q.front().S;
        q.pop();
        if(x == y && sit == 0){
            dis[x][y][sit] = INF;
            continue;
        }
        if(sit == 0){
            for(auto u : G[x]){
                if(dis[u][y][1] > dis[x][y][0] + 1){
                    dis[u][y][1] = dis[x][y][0] + 1;
                    q.push({{u, y}, 1});
                    par[u][y][1] = {{x, y}, 0};
                }
            }
        }
        else{
            for(auto v : G[y]){
                if(dis[x][v][0] > dis[x][y][1] + 1){
                    dis[x][v][0] = dis[x][y][1] + 1;
                    q.push({{x, v}, 0});
                    par[x][v][0] = {{x, y}, 1};
                }
            }
        }
    }

    if(dis[n][1][0] == INF) return cout << -1 << endl , 0;
    cout << dis[n][1][0] / 2 << '\n';

    pair<pll, ll> last = {{n, 1}, 0};

    while(last.S != -1){
        if(!last.S){
            Ans1.push_back(last.F.F);
        }
        else{
            Ans2.push_back(last.F.S);
        }
        last = par[last.F.F][last.F.S][last.S];
    }

    reverse(all(Ans1));
    for(auto ans : Ans1) cout << ans << ' ';
    reverse(all(Ans2));cout << '\n';
    for(auto ans : Ans2) cout << ans << ' ';cout << 1;
    return 0;
}
//! N.N with new them
