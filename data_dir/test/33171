#include <bits/stdc++.h>
using namespace std;
vector<bool>used;
vector<vector<int> >D;
vector<vector<int> >F;
vector<bool>t;
void dfs(int v){
	used[v]=1;
	for (int j=0; j<D[v].size(); j++){
		int to=D[v][j];
		if (!used[to]){
			dfs(to);
		}
	}
}
int main(){
	int n, m;
	cin>>n>>m;
	vector<int>c;
	for (int i=0; i<n; i++){
		D.push_back(c);
		F.push_back(c);
		used.push_back(0);
		t.push_back(0);
	}
	int d[n][n];
	for (int i=0; i<n; i++){
		for (int j=0; j<n; j++){
			d[i][j]=0;
		}
	}
	for (int i=0; i<m; i++){
		int a, b;
		cin>>a>>b;
		a--; b--;
		d[a][b]=1;
		d[b][a]=1;
	}
	int t1[n], t2[n];
	for (int i=0; i<n; i++){
		t1[i]=1e9;
		t2[i]=1e9;
	}
	queue<int>q;
	q.push(0);
	t1[0]=0;
	used[0]=1;
	while (!q.empty()){
		int x=q.front();
		q.pop();
		for (int i=0; i<n; i++){
			if (d[x][i]==0 && used[i]==0){
				used[i]=1;
				t1[i]=t1[x]+1;
				q.push(i);
			}
		}
	}
	q.push(0);
	t2[0]=0;
	t[0]=1;
	while (!q.empty()){
		int x=q.front();
		q.pop();
		for (int i=0; i<n; i++){
			if (d[x][i]==1 && t[i]==0){
				t[i]=1;
				t2[i]=t2[x]+1;
				q.push(i);
			}
		}
	}
	if (max(t1[n-1], t2[n-1])==1e9){
		cout<<"-1";
		return 0;
	}
	else{
		cout<<max(t1[n-1], t2[n-1]);
		return 0;
	}
}