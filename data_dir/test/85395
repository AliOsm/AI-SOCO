#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<functional>
#include<set>
#include<map>
#include<list>
#include<iomanip>
#include<cmath>
#include<queue>
#include<stack>
#include<complex>
#include<sstream>
#include<fstream>
#include<numeric>
#include<utility>
#include<stdio.h>
#include<assert.h>
#include<memory.h>
#include<bitset>
using namespace std;

#define Files

#define rdi(i)          scanf("%d", &i)
#define rdii(i, j)      scanf("%d%d", &i, &j)
#define rep(i, v)       for(int i=0;i<v.size();++i)
#define lp(i, n)        for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)    for(int i=(j);i<(int)(n);++i)
#define all(v)          ((v).begin()), ((v).end())
#define clr(v, d)       memset(v, d, sizeof(v))
#define lpd(i, j, n)    for(int i=(j);i>=(int)(n);--i)

typedef long long         ll;
typedef unsigned long long   ull;
const ll OO = 1e9;
const ll OOL = 1e17;
const ll MOD = 1e9 + 7;
const double EPS = 1e-9;

#define pb                  push_back
#define MP                  make_pair
typedef long double       ld;
typedef vector<int>       vi;
typedef vector<double>    vd;
typedef pair<int, int>    pii;
typedef pair<ll, ll>      pll;
typedef vector<pair<int, int> > vii;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;
typedef vector<ll>        vl;
typedef vector<vector<ll> >     vvl;
typedef vector<pair<ll, ll> >   vll;

ull gcd(ull a, ull b) { return (b == 0 ? a : gcd(b, a % b)); }
ull lcm(ull a, ull b) { return (a * (b / gcd(a, b))); }
ll power(ll a, ll b){ if (b == 0) return 1; ll ans = power(a, b / 2); ans = ans * ans; if (b & 1) ans = ans * a; return ans; }

int n;
int a[100100];
pair<int, int> seg[1001000];

pair<int, int> merge(pair<int, int>& x, pair<int, int>& y){
	pair<int, int> ans;
	if (x.first == -1) ans.first = y.first;
	else if (y.first == -1) ans.first = x.first;
	else ans.first = gcd(x.first, y.first);
	if (x.first == ans.first) ans.second += x.second;
	if (y.first == ans.first) ans.second += y.second;
	return ans;
}

void build(int p = 1, int l = 0, int r = n - 1){
	if (l == r){
		seg[p].first = a[l];
		seg[p].second = 1;
		return;
	}

	int midi = (l + r) / 2;
	build(p * 2, l, midi);
	build(p * 2 + 1, midi + 1, r);
	seg[p] = merge(seg[p * 2], seg[p * 2 + 1]);
}

pair<int, int> query(int i, int j, int p = 1, int l = 0, int r = n - 1){
	if (r < i || l > j) return make_pair(-1, -1);
	if (l >= i && r <= j) return seg[p];

	int midi = (l + r) / 2;
	pair<int, int> c1 = query(i, j, p * 2, l, midi);
	pair<int, int> c2 = query(i, j, p * 2 + 1, midi + 1, r);
	return merge(c1, c2);
}

int main() {
#ifdef Filesx
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
#endif
	ios::sync_with_stdio(0);

	cin >> n;
	for (int i = 0; i < n; i++) cin >> a[i];
	build();
	int q; cin >> q;
	while (q--){
		int l, r; cin >> l >> r;
		l--, r--;
		pair<int, int> res = query(l, r);
		cout << (r - l + 1) - res.second << endl;
	}

	return 0;
}