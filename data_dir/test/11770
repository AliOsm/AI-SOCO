#include <bits/stdc++.h> 
#include <bitset>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
#include <chrono>
#include <random>
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define MOD 1000000007
#define MOD2 1000000009
#define INF 2000000000
#define DESPACITO 1000000000000000
#define E 998244353
#define pb push_back
#define mp make_pair
#define double long double
#define pdd pair<double,double>
#define ll long long

using namespace std;
//using namespace __gnu_pbds;
 
//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;


int main()
{
    IOS;
    #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
    #endif
    int q;
    cin >> q;
    while(q--)
    {
        ll k;
        cin >> k;
        ll x = 0;
        ll dig = 0;
        ll start = 1;
        ll no = 9;
        ll tot = 0;
        REP(i,1,18)
        {
            dig = i;
            ll val = tot + x*no + (dig * (no*(no+1)/2));
            if(val >= k)
                break;
            tot+= x*no + (dig * (no*(no+1)/2));
            x+= dig*no;
            start*=10;
            no*=10;
        }
        ll L = 1, R = no;
        ll mid;
        while(L<=R)
        {
            mid = (L+R)/2;
            ll val1 = tot + x*mid + (dig * (mid*(mid+1)/2));
            ll val2 = tot + x*(mid-1) + (dig * (mid*(mid-1)/2));
            if(val1 >= k && val2 < k)
                break;
            else if(val1 < k)
                L = mid + 1;
            else
                R = mid - 1;
        }
        cerr << mid <<  "\n";
        k -= (tot + x*(mid-1) + (dig * (mid*(mid-1)/2)));
        start = 1;
        dig = 0;
        no = 9;
        x = 0;
        while(x<k)
        {
            dig++;
            if(x + dig*no < k)
            {
                x+= dig*no;
                start *= 10;
                no *= 10;
                continue;
            }
            ll i = (k-x)/dig;
            start += (i-1);
            if((k-x)%dig)
            {
                start++;
                string s = to_string(start);
                cout  << s[(k-x)%dig - 1] << "\n";
            }
            else
            {
                string s = to_string(start);
                cout  << s[dig-1] << "\n";
            }
            break;
        }
    }
}