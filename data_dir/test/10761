#include <bits/stdc++.h>

using namespace std;

typedef long long int LL;
typedef long double LD;

#define L first
#define R second

const int maxn = 101;
const LL inf = 1LL * 1e9 * 1e9;
LL dp[maxn][maxn][maxn], p[maxn][maxn];
vector <pair<LL,int> > v[maxn][maxn];
int c[maxn];

LL get(int i,int j,int k) {
    if (v[i][j].size() == 0)
        return inf;
    if (v[i][j][0].R != k)
        return v[i][j][0].L;
    if (v[i][j].size() == 1)
        return inf;
    return v[i][j][1].L;
}

int main() {
    ios_base::sync_with_stdio(false);
    int n, m, K;
    cin >> n >> m >> K;
    for (int i = 1; i <= n; i++)
        cin >> c[i];
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= m; j++)
            cin >> p[i][j];

    for (int i = 0; i < maxn; i++)
        for (int j = 0; j < maxn; j++)
            for (int k = 0; k < maxn; k++)
                dp[i][j][k] = inf;
    if (c[1] == 0) {
        for (int i = 1; i <= m; i++)
            dp[1][1][i] = p[1][i];
    }
    else
        dp[1][1][c[1]] = 0;

    for (int i = 1; i <= m; i++)
        v[1][1].push_back(make_pair(dp[1][1][i], i));
    sort (v[1][1].begin(), v[1][1].end());

    for (int i = 2; i <= n; i++)
        for (int j = 1; j <= i; j++) {
            for (int k = 1; k <= m; k++) {
                if (c[i] == k)
                    dp[i][j][k] = min(dp[i - 1][j][k], get(i - 1, j - 1, k));
                else if (c[i] == 0)
                    dp[i][j][k] = p[i][k] + min(dp[i - 1][j][k], get(i - 1, j - 1, k));
                else
                    dp[i][k][k] = inf;
                dp[i][j][k] = min(dp[i][j][k], inf);
                v[i][j].push_back(make_pair(dp[i][j][k], k));
            }
            v[i][j].push_back(make_pair(inf, m + 1));
            sort(v[i][j].begin(), v[i][j].end());
        }

    if (v[n][K][0].L == inf)
        cout << "-1\n";
    else
        cout << v[n][K][0].L << endl;

    return 0;
}

