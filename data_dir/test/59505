#include <bits/stdc++.h>
using namespace std;
const int MAX_N = 2002;
int n, m;
char str[MAX_N][MAX_N];
int mark[MAX_N][MAX_N];
int path[MAX_N][MAX_N];
pair<int,int> mp[300];
bool valid(int x, int y){
    return x >= 0 && y >= 0 && x < n && y < m;
}
bool cycle(int x, int y){
    mark[x][y] = 1;
    int px = mp[str[x][y]].first;
    int py = mp[str[x][y]].second;
    if (valid(x + px, y + py) && str[x + px][y + py] != '#' && (mark[x + px][y + py] == 1 || (!mark[x + px][y + py] && cycle(x + px, y + py))))
	return true;
    mark[x][y] = 2;
    return false;
}
void dfs(int x, int y){
    if (path[x][y] != 0)
	return;
    path[x][y] = 1;
    int px = mp[str[x][y]].first;
    int py = mp[str[x][y]].second;
    if (valid(x + px, y + py) && str[x + px][y + py] != '#'){
	dfs(x + px, y + py);
	path[x][y] += path[x + px][y + py];
    }
}
void dfs2(int x, int y, int len){
    mark[x][y] = len;
    int px = mp[str[x][y]].first;
    int py = mp[str[x][y]].second;
    if (valid(x + px, y + py) && str[x + px][y + py] != '#'){
	if (mark[x + px][y + py] != 0)
	    return;
	dfs2(x + px, y + py, len + 1);
    }
}
int main(){
    cin >> n >> m;
    for (int i = 0; i < n; ++i)
	for (int j = 0; j < m; ++j)
	    cin >> str[i][j];
    mp['>'] = {0, 1};
    mp['<'] = {0, -1};
    mp['v'] = {1, 0};
    mp['^'] = {-1, 0};
    for (int i = 0; i < n; ++i)
	for (int j = 0; j < m; ++j)
	    if (str[i][j] != '#' && cycle(i, j)){
		cout << "-1\n";
		return 0;
	    }
    int Max = 0;
    for (int i = 0; i < n; ++i)
	for (int j = 0; j < m; ++j)
	    if (str[i][j] != '#'){
		dfs(i, j);
		Max = max(Max, path[i][j]);
	    }
    if (Max == 0){
	cout << "0\n";
	return 0;
    }
    memset(mark, 0, sizeof mark);
    for (int i = 0; i < n; ++i)
	for (int j = 0; j < m; ++j)
	    if (str[i][j] != '#')
		if (Max == path[i][j])
		    dfs2(i, j, 1);
    int cnt = 0;
    for (int i = 0; i < n; ++i)
	for (int j = 0; j < m; ++j)
	    cnt += mark[i][j] == Max;
    if (cnt >= 2)
	cout << 2 * Max << '\n';
    else
	cout << 2 * Max - 1 << '\n';
    return 0;
}
