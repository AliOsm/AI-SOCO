#include<bits/stdc++.h>
using namespace std;
#define F first
#define S second
#define pb push_back
#define mp make_pair
#define ll long long
const int MX=200010;
int N, M, k1, t, k2;
int arr[MX], b[MX];
int vis[MX];
struct S
{
    int D, id;
    S(int d, int i)
    {
        D=d;
        id=i;
    }
    bool operator < (const S &cur) const
    {
        if(cur.D == D)
            return 1;
        return D > cur.D;
    }
};
multiset<S> ms;
int main()
{
    cin>>N>>k1>>k2;
    for(int i=1; i<=N; i++) cin>>arr[i];
    for(int i=1; i<=N; i++) cin>>b[i];
    for(int i=1; i<=N; i++)
    {
        ms.insert( S(abs(arr[i]-b[i]), i));
    }
    while(ms.size())
    {
        if(k1 <= 0 && k2 <= 0) break;
        S cur=*ms.begin();
        ms.erase(ms.begin());
      ///  cout<<cur.id<<' '<<arr[cur.id]<<" "<<b[cur.id]<<"\n";

        if(k1 > k2 && k1 > 0)
        {
            if(arr[cur.id] > b[cur.id]) arr[cur.id]--;
            else if(arr[cur.id] < b[cur.id]) arr[cur.id]++;
            else ++k1;
            k1--;


        ///    --k1;
        }
        else if(k2 > 0)
        {
            if(arr[cur.id] > b[cur.id]) b[cur.id]++;
            else if(arr[cur.id] < b[cur.id]) b[cur.id]--;
            else ++k2;
            k2--;
        }
        int dd=arr[cur.id]-b[cur.id];
        if(dd < 0) dd*=-1;
        if(dd) ms.insert(S(dd, cur.id));
       ///   cout<<"kk "<<k1<<" "<<k2<<"\n";
///        cout<<cur.id<<' '<<arr[cur.id]<<" "<<b[cur.id]<<"\n";

    }
    ll an=0;
    int i=0;

    for(int i=1; i<=N; i++)
    {
       /// cout<<arr[i]<<" "<<b[i]<<"\n";
        ll ad=abs(arr[i]-b[i]);
        an+=ad*ad;
    }
    ll all=k1+k2;
    if(all%2) an=1;
    cout<<an;
    return 0;
}
