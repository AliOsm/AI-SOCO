/*
ID: hepic
PROG: sabotage
LANG: C++11
*/
#include <bits/stdc++.h>

#define FOR(i, a, b) for(auto i=a; i<=b; ++i)
#define REP(i, a, b) for(auto i=a; i<b; ++i)
#define FORI(i, a, b) for(auto i=a; i!=b+1-2*(a>b); i+=1-2*(a>b))
#define REPI(i, a, b) for(auto i=a-(a>b); i!=b-(a>b); i+=1-2*(a>b))
#define ALL(v) v.begin(),v.end()
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define pf(a) push_front(a)
#define eb(a, b) emplace_back(a, b)
#define fir first
#define sec second
#define what_is(x) cout<<#x<<" is "<<x<<endl;
#define type(x) typeid(x).name()
#define ms(arr, val) memset(arr, val, sizeof(arr))
#define min3(a,b,c) min(min(a,b),c)
#define max3(a,b,c) max(max(a,b),c)
#define SIZE 100010
#define MAXN 1000000007LL
#define NUM 1048576
#define PI acos(-1)
#define open_read1 freopen("a", "r", stdin)
#define open_write1 freopen("b", "w", stdout)
#define open_read freopen("poker.in", "r", stdin)
#define open_write freopen("poker.out", "w", stdout)

using namespace std;

typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair<double, double> PDD;
typedef pair<int, int> PII;
typedef pair<int, PII> PIPII;
typedef pair<PII, PII> PPIIPII;
typedef pair<LL, LL> PLL;
typedef pair<ULL, ULL> PUU;
typedef pair<LL, PLL> PLPLL;
typedef pair<PLL, PLL> PPLLPLL;


template<typename T, typename T1>
ostream& operator << (ostream &out, pair<T, T1> obj)
{
    out<<"("<<obj.first<<","<<obj.second<<")";
    return out;
}


template<typename T, typename T1>
ostream& operator << (ostream &out, map<T, T1> cont)
{
    typename map<T, T1>::const_iterator itr = cont.begin();
    typename map<T, T1>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, set<T> cont)
{
    typename set<T>::const_iterator itr = cont.begin();
    typename set<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, multiset<T> cont)
{
    typename multiset<T>::const_iterator itr = cont.begin();
    typename multiset<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, template<typename ELEM, typename ALLOC=allocator<ELEM>> class CONT>
ostream& operator << (ostream &out, CONT<T> cont)
{
    typename CONT<T>::const_iterator itr = cont.begin();
    typename CONT<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, unsigned int N, typename CTy, typename CTr>
typename enable_if<!is_same<T, char>::value, basic_ostream<CTy, CTr> &>::type
operator << (basic_ostream<CTy, CTr> &out, const T (&arr)[N])
{
     REP(i, 0, N)
        out<<arr[i]<<" ";
    out<<endl;

    return out;
}


template<typename T>
T gcd(T a, T b)
{
    T min_v = min(a, b);
    T max_v = max(a, b);

    while(min_v)
    {
        T temp = max_v % min_v;
        max_v = min_v;
        min_v = temp;
    }

    return max_v;
}


template<typename T>
T lcm(T a, T b)
{
    return (a*b) / gcd(a, b);
}


template<typename T>
T fast_exp_pow(T base, T exp, T mod)
{
    LL res = 1;

    while(exp)
    {
        if(exp&1)
        {
            res *= base;
            res %= mod;
        }

        exp >>= 1;
        base *= base;
        base %= mod;
    }

    return res;
}

/*#################################################################################################################
#################################################################################################################
#################################################################################################################
#################################################################################################################*/

LL N, Q, A, B, val_1, val_2, other_max;
LL value[100010], color[100010], dp_solve[100010];
PLL max_1, max_2;
bool visited[100010];



int main()
{
//    open_read1;
//    open_write1;
    scanf("%lld%lld", &N, &Q);

    REP(i, 0, N)
        scanf("%lld", value+i);

    REP(i, 0, N)
        scanf("%lld", color+i);

    while(Q--)
    {
        scanf("%lld%lld", &A, &B);

        ms(visited, false);
        max_1 = mp(0, -1), max_2 = mp(0, -1);

        REP(i, 0, N)
        {
            val_1 = 0, val_2 = 0, other_max = 0;

            if(max_1.sec != -1  &&  max_1.sec != color[i])
                other_max = max_1.fir;

            else if(max_2.sec != -1)
                other_max = max_2.fir;

            if(visited[color[i]])
            {
                val_1 = dp_solve[color[i]] + value[i]*A;
                dp_solve[color[i]] = max(dp_solve[color[i]], val_1);
            }

            val_2 = other_max + value[i]*B;

            if(!visited[color[i]])
                dp_solve[color[i]] = val_2;
            else
                dp_solve[color[i]] = max(dp_solve[color[i]], val_2);

            visited[color[i]] = true;

            if(dp_solve[color[i]] > 0   &&  (max_1.sec == -1  ||  dp_solve[color[i]] > max_1.fir))
            {
                if(max_1.sec != color[i])
                    max_2 = max_1;

                max_1 = mp(dp_solve[color[i]], color[i]);
            }

            else if(dp_solve[color[i]] > 0  &&  max_1.sec != color[i]  &&
                   (max_2.sec == -1  ||  dp_solve[color[i]] > max_2.fir))
                        max_2 = mp(dp_solve[color[i]], color[i]);

        }

        printf("%lld\n", max_1.fir);
    }

    return 0;
}
