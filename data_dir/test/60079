#pragma comment(linker, "/STACK:134217728")
#define _CRT_SECURE_NO_WARNINGS

#include <cstdio>
#include <iostream>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <string>
#include <numeric>
#include <complex>
#include <functional>
#include <cmath>
#include <time.h>

using namespace std;

typedef long long LL;

const int MOD = (int)1e9 + 7;

LL fact[111111];
LL inv[111111];

LL p25[111111];

char s[111111];

int m;

LL powmod(LL a, int x)
{
	if (x == 0)
		return 1;
	if (x & 1)
		return a * powmod(a * a % MOD, x / 2) % MOD;
	return powmod(a * a % MOD, x / 2);
}

LL C(int n, int k)
{
	LL res = fact[n];
	res = res * inv[n - k] % MOD;
	res = res * inv[k] % MOD;
	return res;
}

int c[451][100001];

map<int, int> ID;


void go(int len)
{
	if (ID.count(len))
		return;
	int id = ID.size();
	ID[len] = id;
	c[id][len] = 1;
	for (int i = len + 1; i <= 100000; ++i)
	{
		LL val = (LL)26 * c[id][i - 1] + C(i - 1, len - 1) * p25[i - len];
		c[id][i] = val % MOD;
	}
}

int res(int n, int len)
{
	int id = ID[len];
	return c[id][n];
}

int main()
{
	fact[0] = 1;
	for (int i = 1; i < 111111; ++i)
		fact[i] = fact[i - 1] * i % MOD;
	for (int i = 0; i < 111111; ++i)
		inv[i] = powmod(fact[i], MOD - 2);

	p25[0] = 1;
	for (int i = 1; i < 111111; ++i)
		p25[i] = p25[i - 1] * 25 % MOD;

	scanf("%d", &m);
	scanf("%s", s);
	int len = strlen(s);
	go(len);

	while (m --> 0)
	{
		int t;
		scanf("%d", &t);
		if (t == 2)
		{
			int n;
			scanf("%d", &n);
			printf("%d\n", res(n, len));
		}
		else
		{
			scanf("%s", s);
			len = strlen(s);
			go(len);
		}

	}

	return 0;
}