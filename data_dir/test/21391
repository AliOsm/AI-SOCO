#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define IN freopen("hard1.txt","r",stdin)
#define OUT freopen("hard1.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG printf("Hi\n")
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 1000005
#define FastIO  ios_base::sync_with_stdio(false); cin.tie(NULL)


using namespace __gnu_pbds;
using namespace std ;

typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef pair<i64, i64> pii ;

#define maxn 3000005
#define mod 998244353LL
#define INF 1000000000000000000LL

class numberTheory{

public:
    numberTheory(){}

    pii extendedEuclid(i64 a, i64 b) { // returns x, y | ax + by = gcd(a,b)

        if(b == 0) return pii( a >= 0 ? 1 : -1 , 0LL);
        else {
            pii d = extendedEuclid(b, a % b);
            return pii(d.yy, d.xx - d.yy * (a / b));
        }

    }

    i64 modularInverse(i64 a, i64 n) {
        pair<i64,i64> ret = extendedEuclid(a, n);
        return ((ret.xx % n) + n) % n;
    }


    i64 bigMod(i64 a, i64 n , i64 m)
    {
        if(n==0) return 1 ;
        i64 ret = bigMod(a,n/2,m) ;
        ret = (ret*ret)%m ;
        if(n%2) ret = (ret*a)%m ;
        return ret ;
    }
};

const i64 N = 200000 ;

i64 fact[N+5] , invFact[N+5] ;

i64 C(i64 n, i64 r)
{
    if( n<0 || r<0 || r>n ) return 0 ;
    i64 ret = (fact[n]*invFact[r])%mod ;
    return (ret*invFact[n-r])%mod ;
}

void preprocess()
{
    numberTheory nt ;

    fact[0] = 1 ;
    for(i64 x=1 ; x<=N ; x++) fact[x] = (fact[x-1]*x)%mod ;

    invFact[N] = nt.modularInverse(fact[N],mod) ;

    for(i64 x=N-1 ; x>=0 ; x--) invFact[x] = (invFact[x+1]*(x+1) )%mod ;
}

vector <i64> getPwr( i64 n , vector<i64> &prm )
{
    vector <i64> ans;
    for(int i=0 ; i<prm.size() ; i++)
    {
        ans.pb(0) ;
        while( n%prm[i] == 0 )
        {
            ans[i]++ ;
            n /= prm[i] ;
        }
    }
    return ans ;
}

int main()
{
    preprocess() ;

    i64 n ;

    scanf("%lld",&n) ;

    vector <i64> prm ;

    i64 N = n ;

    for(int i=2 ; 1LL*i*i<=n ; i++)
    {
        if( n%i==0 )
        {
            while( n%i==0 ) n = n/i ;
            prm.pb(i) ;
        }
    }

    if( n!=1 ) prm.pb(n) ;

//    for(i64 p: prm) printf("-- %lld\n",p) ;

    int q ;
    scanf("%d",&q) ;

    for(int i=1 ; i<=q ; i++)
    {
        i64 u, v;
        scanf("%lld %lld",&u,&v) ;

        vector <i64> p1 = getPwr(u,prm) , p2 = getPwr(v,prm) ;

        i64 ans = 1 ;
        i64 dwn = 0 , up = 0 ;
        for(int j=0 ; j<p1.size() ; j++)
        {
       //     printf("--------------- %lld %lld\n",p1[j] , p2[j]) ;
            if(p2[j]<p1[j])
            {
                dwn+= (p1[j]-p2[j]) ;
                ans = (ans*invFact[ p1[j]-p2[j] ])%mod ;
            }
            else{
                up += (p2[j]-p1[j]) ;
                ans = (ans*invFact[ p2[j]-p1[j] ])%mod ;
            }
        }
     //   printf("-- %lld %lld\n",up,dwn) ;
        ans = (ans*((fact[up]*fact[dwn])%mod))%mod ;
        printf("%lld\n",ans) ;
    }

    return 0 ;
}
