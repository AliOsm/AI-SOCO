#include <bits/stdc++.h>
using namespace std;
const int base = 53, mod = 1e9 + 7, N = 1e6 + 10;
string s;
int pw[N], ps[N];
void Pre() {
	pw[0] = 1;
	for (int i = 1; i < N - 5; i++)
		pw[i] = 1ll * pw[i - 1] * base % mod;
	for (int i = 0; i < s.size(); i++)
		ps[i + 1] = (1ll * ps[i] * base % mod + s[i] - 'a' + 1) % mod;
	return;
}
int getHsh(int l, int r) {
	int len = r - l, rtr = (ps[r] - 1ll * ps[l] * pw[len] % mod + mod) % mod;
	return rtr;
}
int getMx(string t) {
	int mx = 0;
	for (int i = 0; i < (int) t.size() - 1; i++) {
		mx = max(mx, (i + 1) * (int) (getHsh(0, i + 1) == getHsh((int) t.size() - (i + 1), t.size())));
	}
	return mx;
}
bool isThere(int len) {
	for (int i = 1; i < (int) s.size() - len; i++) {
		if (getHsh(i, i + len) == getHsh(0, len))
			return true;
	}
	return false;
}
int main() {
	cin >> s;
	Pre();
	int mx = getMx(s);
	if (mx == 0) {
		cout << "Just a legend";
		return 0;
	}
	if (isThere(mx)) {
		cout << s.substr(0, mx);
		return 0;
	}
	else {
		int xx = getMx(s.substr(0, mx));
		if (xx == 0)
			cout << "Just a legend";
		else
			cout << s.substr(0, xx);
	}

	return 0;
}	
