#include <bits/stdc++.h>

using namespace std;

#define x first
#define y second
#define INF (0x3f3f3f3f)

#define SZ(x) ((int)((x).size()))
#define PB(x) push_back(x)
#define MEMSET(x,v) memset(x,v,sizeof(x))
#define REP(i,n) for(int (i)=0;(i)<(n);++(i))

typedef long long LL;
typedef pair<int, int> PII; typedef pair<PII, int> PII2;

bool good(int left, int ndigits) {
    return left >= 0 && left <= ndigits * 9;
}

string solve(string pre, int sum) {
    string ret = pre;
    int sum2 = 0;
    REP(i, SZ(pre)) sum2 += (pre[i] - '0');
    for (int i = SZ(pre) - 1; i >= 0; i--) {
        sum2 -= (pre[i] - '0');
        for (int j = (pre[i] - '0') + 1; j < 10; j++) {
            //            cout << i << " " << j << " " << sum2 <<  endl;
            int have = sum2 + j;
            if (good(sum - have, SZ(pre) - i - 1)) {
                ret[i] = j + '0';
                int left = sum - have;
                for (int k = SZ(pre) - 1; k > i; k--) {
                    if (left >= 9) {
                        left -= 9;
                        ret[k] = '9';
                    } else {
                        ret[k] = left + '0';
                        left = 0;
                    }
                }
                return ret;
            }
        }
    }
    ret = "";
    for (int nd = SZ(pre) + 1; ; nd++) {
        for (int f = 1; f < 10; f++) {
            //            if (nd == 2 && f == 1) cout << "#" << sum - f << " " << nd - 1 << endl;
            if (good(sum - f, nd - 1)) {
                int left = sum - f;
                for (int k = nd - 1; k > 0; k--) {
                    if (left >= 9) {
                        left -= 9;
                        ret += '9';
                    } else {
                        ret += left + '0';
                        left = 0;
                    }
                }
                ret += ('0' + f);
                reverse(ret.begin(), ret.end());
                return ret;
            }
        }
    }
}

int main() {
    int N;
    string pre = "0";
    int sum;
    cin >> N;
    REP(n, N) {
        cin >> sum;
        pre = solve(pre, sum);
        cout << pre << endl;
    }
        
    
    return 0;
}
