#include<bits/stdc++.h>
using namespace std;
#define fr first
#define sc second
typedef long long ll;
typedef double ld;
typedef pair<int,int> p2;
typedef pair<p2,int> p3;
typedef vector<ll> vi;
const ll Mod = 7 + 1e9;
const ll INF32 = 5 + 2e9;
const ll INF64 = 5 + 1e18;
const ll MAX = 5+ 1e6;
int n,q,L,R;
struct Node
{
    int L,R,S;
} T[4*MAX], a[MAX],Zero;
Node Merge(Node c1,Node c2)
{
    Node ret = {c1.L+c2.L,c1.R+c2.R,c1.S+c2.S};
    int mn = min(c1.L, c2.R);
    ret.L -= mn;
    ret.R -= mn;
    ret.S += 2*mn;
    return ret;
}
Node build(int x = 1,int l = 1,int r = n)
{
    if( l == r )
        return T[x] = a[l];
    int mid = l+r>>1, c1 = x<<1 ,c2 = x<<1 |1;
    return T[x] = Merge(build(c1, l, mid), build(c2 ,mid+1 ,r));
}
Node query(int x = 1,int l = 1,int r = n)
{
    if( l > R || r < L )
        return Zero;
    if( L <= l && r <= R )
        return T[x];
    int mid = l+r>>1, c1 = x<<1 ,c2 = x<<1 |1;
    return Merge(query(c1, l, mid), query(c2 ,mid+1 ,r));
}
int main()
{
    string str; cin >> str;
    n = str.size();
    for(int i=0;i<n;i++)
        a[i+1] = {(str[i] == '('),(str[i] == ')'),0};
    build();
    cin >> q;
    while(q--){
        scanf("%d%d" ,& L ,& R  );
        printf("%d\n" , query().S );
    }
    return 0;
}
