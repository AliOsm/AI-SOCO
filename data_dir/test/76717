#include <stdio.h>
#include <math.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <utility>
#include <stack>
#include <queue>
#include <set>
#include <list>
#include <bitset>
#include <array>

using namespace std;

#define fi first	
#define se second
#define long long long
#define Pi pair<Point,int>
typedef pair<int,int> ii;

// const double pi = acos(-1);
// const double EPS = 1e-;
// const double deg = 180.0/pi;
const long INF = 1e9;

struct Point
{
	long x, y;
	int idx;
	Point() {}
	Point(long _x, long _y) {x = _x, y = _y;}
};

long jarsq(Point a, Point b) { return (b.x-a.x)*(b.x-a.x) + (b.y-a.y)*(b.y-a.y); }
long cross(Point a, Point b, Point c)
{
	c.x -= a.x; c.y -= a.y;
	b.x -= a.x; b.y -= a.y;
	return b.x*c.y-b.y*c.x;
}
bool ccw(Point a, Point b, Point c)  {  return cross(a,b,c) > 0; }
bool quad(Point a, Point b)
{
	if(b.y > a.y) return 0;
	else if(b.y == a.y && b.x >= a.x) return 0;
	else return 1;
}


Point p0;
bool custom(Point a, Point b)
{
	
	if(quad(p0,a) != quad(p0,b)) return quad(p0,a) < quad(p0,b);
	else if(cross(p0,a,b) == 0) return jarsq(p0,a) < jarsq(p0,b);
	else return ccw(p0,a,b);
}

int k, n;
int id[1003][8], le[1003][8];
Point A[8], M[1003];
vector<Point> vec[8];

vector<int> misil;
vector<int> bunuh;
bool terbunuh[1003];

bool cek(int x)
{
	// printf("X 	 : %d\n", x); 
	// printf("MISIL : "); for(int i : misil) printf("%d ", i); printf("\n");
	if(!misil.size()) return 0;
	else
	{
		int piv = misil.back();
		misil.pop_back();
		int r = id[x][piv];
		int l = le[x][piv];
		
		for(int i = r-1; i >= l; i--)
		{

			if(terbunuh[vec[piv][i].idx]) continue;
			if(!cek(vec[piv][i].idx))
				return 0;
		}
		bunuh.push_back(x);
		terbunuh[x] = 1;
		return 1;
	}
}

int main()
{
	// ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	// freopen("input.in", "r", stdin);
	// freopen("output.out", "w", stdout);

	scanf("%d %d", &k, &n);
	for(int i = 0; i < k; i++) scanf("%lld %lld", &A[i].x, &A[i].y);
	for(int i = 0; i < n; i++) scanf("%lld %lld", &M[i].x, &M[i].y);

	for(int i = 0; i < k; i++)
	{
		for(int j = 0; j < n; j++)
		{
			M[j].idx = j;
			vec[i].push_back(M[j]);
		}
		p0 = A[i];
 		sort(vec[i].begin(), vec[i].end(), custom);

 		for(int j = 0; j < vec[i].size(); j++)
 		{
 			id[vec[i][j].idx][i] = j;
 			le[vec[i][j].idx][i] = j;
 		}

 		for(int j = 1; j < vec[i].size(); j++)
 		{
 			if(quad(p0,vec[i][j]) == quad(p0,vec[i][j-1]) && cross(p0,vec[i][j],vec[i][j-1]) == 0)
 				le[vec[i][j].idx][i] = le[vec[i][j-1].idx][i];
 		}
 		
 		// printf("I : %d\n", i);
 		// for(auto it : vec[i])
 		// 	printf("		%lf %lf %d\n", it.x, it.y, it.idx);
	}
	int res = 0;
	for(int i = 0; i < n; i++)
	{
		vector<int> perm;
		for(int j = 0; j < k; j++)
			perm.push_back(j);

		do
		{
			// printf("CEK : %d\n", i);
			misil = perm;
			while(bunuh.size()) terbunuh[bunuh.back()] = 0, bunuh.pop_back();
			if(cek(i))
			{
				// printf("YAY %d\n", i);
				res++;
				break;
			}

		}while(next_permutation(perm.begin(), perm.end()));
	}
	printf("%d\n", res);
}









