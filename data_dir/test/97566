#include<bits/stdc++.h>
//#include <boost/multiprecision/cpp_int.hpp>
//using namespace boost::multiprecision;
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace std;
using namespace __gnu_pbds;

template <typename A, typename B>
string to_string(pair<A, B> p);
 
string to_string(const string& s) {
  return '"' + s + '"';
}
 
string to_string(const char* s) {
  return to_string((string) s);
}
 
string to_string(bool b) {
  return (b ? "true" : "false");
}
 
string to_string(vector<bool> v) {
  bool first = true;
  string res = "{";
  for (int i = 0; i < static_cast<int>(v.size()); i++) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(v[i]);
  }
  res += "}";
  return res;
}
 
template <size_t N>
string to_string(bitset<N> v) {
  string res = "";
  for (size_t i = 0; i < N; i++) {
    res += static_cast<char>('0' + v[i]);
  }
  return res;
}
 
template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}
 
template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
 
void debug_out() { cerr << endl; }
 
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}
 
#ifdef IGM
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...)
#endif

#define PI                      3.1415926535897932384626
#define fi                      first
#define se                      second
#define pb                      push_back
#define endl                    '\n'
#define all(x)                  x.begin(),x.end()
#define pii                     pair<int,int>
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define SZ(x)                   ((int)x.size())
#define ordered_set             tree <int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
// find_by_order(x) ==> xth element in the set counting from 0
// order_of_key(x) ==> number of element strictly less than x
typedef long long ll;
typedef double ld;
typedef unsigned long long ull;


ll pow(ll a,ll b, ll m) {ll ans=1; while(b>0){ if(b%2==1) ans=(ans*a)%m; b/=2; a=(a*a)%m; } return ans%m; }
ll InverseMod(ll a,ll m) {return pow(a,m-2,m);}
template<typename T>int SquareDist(T a,T b) {int x = abs(a.fi - b.fi),y = abs(a.se - b.se); return x*x + y*y;}
template<typename T,typename Y> T pow2(T a,Y b) {T ans=1; while(b>0){ if(b%2==1) ans=(ans*a); b/=2; a=(a*a); } return ans; }
 
ll add(ll a,ll b,ll mod) {
        ll c = (a + b);
        if(c >= mod) {
                c -= mod;
        }
        return c;
}
ll sub(ll a,ll b,ll mod) {
        ll c = (a - b);
        if(c < 0) {
                c += mod;
        }
        return c;
}
ll mul(ll a,ll b,ll mod) {
        ll c = (a*b)%mod;
        return c;
}
ll div(ll a,ll b,ll mod) {
        ll c = mul(a,InverseMod(b,mod),mod);
        return c;
}
void inc(ll &a,ll b,ll mod) {
        a = add(a,b,mod);
}
void dec(ll &a,ll b,ll mod) {
        a = sub(a,b,mod);
}
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }
 
    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
 
// Write only proved sloutions
int n,m;
const int N = 2e5+5;
std::vector<ll> x(N),v,lvl(N);
std::vector<pii> R(N);
ll t[4*N][2];
ll lazy[4*N][2];
ll a[N][2];
int idx = 0;
void init() {
        memset(lazy,0,sizeof(lazy));
        memset(a,0,sizeof(a));
}

void upd(int node, int l, int r, ll X) {
        lazy[node][idx] += X;
        t[node][idx] += (r - l + 1) * X;
        return;
}

void passDown(int node, int l, int r) { 
        int mid = (l + r) / 2;
        upd(2 * node, l , mid, lazy[node][idx]);
        upd(2 * node + 1, mid + 1 , r, lazy[node][idx]);
        lazy[node][idx] = 0;
}

void build(int node = 1,int tl = 0,int tr = n - 1) {
        if(tl > tr) {
                return;
        }
        if(tl == tr) {
                t[node][idx] = a[tl][idx];
                return;
        }
        int mid = (tl + tr) / 2;
        build(2 * node, tl, mid);
        build(2 * node + 1, mid + 1, tr);
        t[node][idx] = t[2 * node][idx] + t[2 * node + 1][idx];
}

void updateRange(int l, int r,int val, int node = 1, int tl = 0, int tr = n-1) {
        if(r < l or l > tr or tl > r or tl > tr) {
                return;
        }
        if(l <= tl and tr <= r) {
                upd(node,tl,tr,val);
                return;
        }
        passDown(node, tl, tr);
        int mid = (tl + tr) / 2;
        updateRange(l, r, val, 2 * node, tl , mid);
        updateRange(l, r, val, 2 * node + 1, mid+1, tr);
        t[node][idx] = t[2 * node][idx] + t[2 * node + 1][idx];
}

ll queryRange(int l, int r,int node = 1, int tl = 0, int tr = n-1) {
        if (r < l or tr < tl or l > tr or tl > r) {
                return 0;
        }
        if(l <= tl and tr <= r) {
                return t[node][idx];
        }
        passDown(node,tl,tr); 
        int mid = (tl + tr) / 2;
        return  (queryRange(l, r, 2 * node, tl, mid) + queryRange(l, r, 2 * node + 1, mid+1 , tr));
}
int ti = -1;
std::vector<int> adj[N];
void dfs(int node,int pre) {
        ti++;
        v.pb(node);
        int l = ti;
        int r;
        for(auto i:adj[node]) {
                if(i != pre) {
                        lvl[i] = lvl[node] + 1;
                        dfs(i,node);
                }
        }
        r = ti;
        R[node] = {l,r};
}
void solve() { 
        cin >> n >> m;
        init();
        for(int i = 0; i < n; ++i) {
                cin >> x[i+1];
        }
        for(int i = 1; i < n; ++i) {
                int u,V;
                cin >> u >> V;
                adj[u].pb(V);
                adj[V].pb(u);
        }
        lvl[1] = 0;
        dfs(1,1);
        for(int i = 0; i < n; ++i) {
                a[i][0] = x[v[i]];
                a[i][1] = x[v[i]];
        }
        for(int i = 0; i < 2; ++i) {
                idx = i;
                build();
        }
        while(m--) {
                int ty,X;
                cin >> ty >> X;
                if(ty == 1) {
                        int val;
                        cin >> val;
                        if(lvl[X]%2 == 1) {
                                val = -val;
                        }
                        idx = 0;
                        updateRange(R[X].fi,R[X].se,val);
                        idx = 1;
                        updateRange(R[X].fi,R[X].se,-1*val);
                }
                else {
                        idx = (int)lvl[X]%2;
                        cout << queryRange(R[X].fi,R[X].fi) << endl;
                }
        }
}  

int32_t main()
{
        fast;
        int tt = 1;
        // cin >> t;
        for(int i = 1; i <= tt; ++i)
                solve();
        cerr << "Time taken: " << ((clock() * 1000) / CLOCKS_PER_SEC) << "ms\n";
}