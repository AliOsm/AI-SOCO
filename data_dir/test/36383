#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<int, int> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	
	
	ll t;
	cin >> t;
	
	while(t--){
		
		ll n, p, k;
		cin >> n >> p >> k;
		
		vector<ll> v(n);
		vector<ll> sum(k), cnt(k), acum(k);
		
		for(ll i = 0; i < n; i++)
			cin >> v[i];
		
		sort(v.begin(), v.end());
		
		acum[0] = v[0];
		for(ll i = 1; i < k; i++)
			acum[i] = acum[i - 1] + v[i];
		
		ll s1 = 0;
		ll ans = 0;
		for(ll i = 0; i < n; i++){
			s1 += v[i];
			if(p >= s1)
				ans = i + 1;
		}
		
		for(ll i = k - 1; i < n; i++){
			sum[i % k] += v[i];
			cnt[i % k]++;
			if(p >= sum[i % k]){
				
				ll money = p - sum[i % k];
				ll am = cnt[i % k] * k;
				
				//cout << i << " :" << endl;
				//cout << p << " " << sum[i % k] << endl;
				
				ll lo = 0, hi = i - am, opt = -1;
				while(lo <= hi){
					ll mid = (lo + hi) >> 1ll;
					if(acum[mid] <= money){
						opt = mid;
						lo = mid + 1;
					}
					else hi = mid - 1;
				}
				
				ans = max(ans, am + opt + 1);
				
			}
		}
		
		cout << ans << endl;
		
	}

	return 0;
}
