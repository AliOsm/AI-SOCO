#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 1000000007LL
#define sq(x) ((x)*(x))
#define IN freopen("C.in","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 1000000000000000000LL
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 2

using namespace __gnu_pbds;
using namespace std ;

typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef pair<i64, i64> pii;

#define maxn 300005

i64 tr[4*maxn+5] , lazy[4*maxn+5] ;

void build(int cn, int b, int e)
{
    lazy[cn] = 0LL; //add what you need

    if(b==e)
    {
        tr[cn] = 0; //add what you need
        return ;
    }
    int l = cn*2 , r = cn*2+1 , m = (b+e)/2 ;

    build(l,b,m) ; build(r,m+1,e) ;

    tr[cn] = min(tr[l],tr[r]) ; //add what you need
}

void relax(int cn, int b,int e)
{
    tr[cn] = tr[cn] + lazy[cn] ; // add what you need

    if(b!=e)
    {
        int l =cn*2 , r= cn*2 + 1 ;
        lazy[l] += lazy[cn] ; // add what you need
        lazy[r] += lazy[cn] ; // add what you need
    }
    lazy[cn] = 0LL ; // add what you need
}

void update(int cn, int b, int e, int left, int right, i64 val)
{
    if( lazy[cn]!=0 ) relax(cn,b,e) ;
    if( b>right || e<left  ) return ;
    if( b >=left && e<=right )
    {
        lazy[cn] += val ;
        relax(cn,b,e) ;
        return ;
    }

    int l = cn*2 , r = cn*2+1 , m = (b+e)/2 ;

    update(l,b,m,left,right,val) ; update(r,m+1,e,left,right,val) ;

    tr[cn] = min(tr[l] , tr[r]) ;
}

i64 query(int cn, int b, int e , int left, int right)
{
    if( lazy[cn]!=0 ) relax(cn,b,e) ;
    if( b>right || e<left  ) return INF ;  // add what you need
    if( b >=left && e<=right )
    {
        return tr[cn] ; // what you need
    }

    int l = cn*2 , r = cn*2+1 , m = (b+e)/2 ;

    i64 r1 = query(l,b,m,left,right) ;
    i64 r2 = query(r,m+1,e,left,right) ;

    return  min(r1,r2) ; // add what you need
}

i64 d[maxn] , c[maxn] ;

int main()
{
    i64 a ;
    int i , j , k , l , m , n ;

    scanf("%d %lld",&n,&a) ;

    for(i=1 ; i<=n ; i++) scanf("%lld %lld",&d[i],&c[i]) ;

    i64 ans = 0 ;

    for(i=1 ; i<=n ; i++) ans = max( ans , a-c[i] ) ;

    for(i=2 ; i<=n ; i++ ) c[i] += c[i-1] ;

    stack < pair<int,i64> > st ;

    st.push( mp(0,INF) ) ;

    build(1,1,n) ;

    for(i64 i=1 ; i<=n ; i++)
    {
        if( i!=1 )
        {
            i64 ret = i*a-c[i] - query( 1,1,n,1,i-1 ) ;
            ans = max( ans , ret ) ;
        //    printf("----%lld\n",ret) ;
        }
        i64 gap = sq(d[i+1]-d[i]) ;
        update( 1,1,n,i,i,(i-1)*a-c[i-1] +gap ) ;

        while( st.top().yy <= gap  )
        {
            pair<int,i64> cur =st.top() ;
            st.pop() ;
            update( 1,1,n,st.top().xx+1,cur.xx , gap-cur.yy ) ;
        }
        st.push( mp(i,gap) ) ;
    }

    printf("%lld\n",ans) ;

    return 0 ;
}
