#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
#endif

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class FwdIter> inline auto
dump(FwdIter first, FwdIter last, const char * dlm = " ") -> void {
typedef typename iterator_traits<FwdIter>::value_type value_type;
copy(first, last, ostream_iterator<value_type>(cout, dlm)); }
template<typename T> vector<T> & operator--(vector<T> & a)
{ for(auto & i: a) --i; return a; }
/* @@@ ----------------------------------- */

inline double
dist(const pair<double, double> & a,
     const pair<double, double> & b,
     const pair<double, double> & x)
{
  if(a.first == b.first) // vertical line
    return a.first - x.first;

  const auto s = (a.second - b.second) / (a.first - b.first);
  const auto i = a.second - s * a.first;
  return (s * x.first + i - x.second) / sqrt(s * s + 1.0);
}

double b800()
{
  size_t n;
  cin >> n;
  vector<pair<double, double>> xs(n);
  cin >> xs;

  double out = numeric_limits<double>::max();
  DEBUG(out);

  for(size_t i = 0; i < n; ++i)
  {
    const auto & a = xs[i];
    const auto & b = xs[(i + 1) % n];
    const auto & c = xs[(i + 2) % n];

    const auto d = dist(a, c, b);
    DEBUG(d);
    out = min(out, abs(d) / 2.0);
  }

  return out;
}

int main(const int argc, char * argv [])
{
  ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
  cout << setprecision(17) << b800();

  return EXIT_SUCCESS;
}

