#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)
using namespace std;
const int N = 100001;
int Sqrt;
deque<int> Q[330];
int cnt[330][N];

int main() {
	int n;
	scanf("%d", &n);
	Sqrt = sqrt(n);
	rep(i, n) {
		int x;
		scanf("%d", &x);
		Q[i / Sqrt].push_back(x);
		cnt[i / Sqrt][x] ++;
	}
	int m, ans = 0;
	scanf("%d", &m);
	rep(_, m) {
		int op, l, r, k;
		scanf("%d%d%d", &op, &l, &r);
		l = (l + ans - 1) % n;
		r = (r + ans - 1) % n;
		if(l > r)	swap(l, r);
		if(op == 1) {
			int rv = Q[r / Sqrt][r % Sqrt];
			Q[r / Sqrt].erase(Q[r / Sqrt].begin() + (r % Sqrt));
			cnt[r / Sqrt][rv] --;
			Q[l / Sqrt].insert(Q[l / Sqrt].begin() + (l % Sqrt), rv);
			cnt[l / Sqrt][rv] ++;
			for(int i = l / Sqrt; i < r / Sqrt; i ++) {
				rv = Q[i].back();
				Q[i].pop_back();
				cnt[i][rv] --;
				Q[i + 1].push_front(rv);
				cnt[i + 1][rv] ++;
			}
		} else {
			scanf("%d", &k);
			k = (k + ans - 1) % n + 1;
			ans = 0;
			r ++;
			while(l < r && l % Sqrt) {
				ans += (Q[l / Sqrt][l % Sqrt] == k);
				l ++;
			}
			while(r > l && r % Sqrt) {
				ans += (Q[r / Sqrt][(r-1) % Sqrt] == k);
				r --;
			}
			for(int i = l / Sqrt; i < r / Sqrt; i ++) 
				ans += cnt[i][k];
			printf("%d\n", ans);
		}
	}
	return 0;
}

