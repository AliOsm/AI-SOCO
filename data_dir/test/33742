#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <string>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <fstream>
#include <cassert>
#include <cstring>
#include <unordered_set>
#include <unordered_map>
#include <numeric>
#include <ctime>
#include <bitset>
#include <complex>

using namespace std;

#define int long long

const int INF = 1e9 + 239;

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	int n;
	cin >> n;
	vector<vector<int>> d(n, vector<int> (n, INF));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			char x;
			cin >> x;
			if (x == '0') {
				d[i][j] = INF;
			} else {
				d[i][j] = 1;
			}
		}
	}	
	for (int i = 0; i < n; i++) {
		d[i][i] = 0;
	}
	for (int k = 0; k < n; k++) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
			}
		}
	}
	int m;
	cin >> m;
	vector<int> p(m);
	for (auto &t : p) {
		cin >> t;
		t--;
	}
	int cur = p[0];
	int last = 0;
	vector<int> ans = {p[0]};
	for (int i = 1; i < m; i++) {
		// cerr << cur << ' ' << last << ' ' << d[cur][p[i]] << ' ' << i - last << ' ' << p[i] << endl;
		if (d[cur][p[i]] != i - last) {
			// cerr << "pb " << p[i - 1] << endl;
			ans.push_back(p[i - 1]);
			cur = ans.back();
			last = i - 1;
		}
	}
	if (ans.back() != p.back()) {
		ans.push_back(p.back());
	}
	cout << ans.size() << endl;
	for (auto t : ans) {
		cout << t + 1 << ' ';
	}
	cout << endl;
}
