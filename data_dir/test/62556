#include <bits/stdc++.h>
using namespace std;
string n;
int m;
int sz;
vector<int> digits;
long long dp[263144][101];
long long occur[11];
int mx;
long long solve(int mask,int num)
{
    if(mask == mx)
        return num == 0;

    if(dp[mask][num] != -1)
        return dp[mask][num];

    long long C1 = 0;
    for(int i = 0;i < sz;i++)
    {
        if(mask & (1 << i))
            continue;

        if(digits[i] == 0 && mask == 0)
            continue;
        C1 += solve(mask | (1 << i),((num * 10) + digits[i])%m);
    }
    return dp[mask][num] = C1;
}
int main()
{
    memset(dp,-1,sizeof dp);
    cin >> n >> m;
    for(int i = 0;i < n.length();i++)
        digits.push_back(n[i] - '0'),occur[n[i] - '0']++;
    sz = n.length();
    long long ans = 1;
    mx = (1 << sz) - 1;
    for(int i = 0;i <= 9;i++)
    {
        for(int j = occur[i];j >= 1;j--)
            ans *= j;
    }
    cout << solve(0,0) / ans;
    return 0;
}
