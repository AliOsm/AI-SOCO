#include <bits/stdc++.h>
#ifdef DEBUG
#include "_debug.cpp"
#include "callable.hpp/callable.hpp"
#endif
#define endl '\n'
using namespace std;
using ll = long long;
template <typename T, typename Function>
T bsearch(T L, T R, const Function& can, bool left_feasible = true) {
#ifdef DEBUG
    using actual_type = typename callable_traits<Function>::function_type;
    using expected_type = typename callable_traits<bool(T)>::function_type;
    static_assert(is_same<actual_type, expected_type>::value, "bsearch \"can\" must be bool(T)");
#endif
    T& feasible = left_feasible ? L : R;
    T& infeasible = left_feasible ? R : L;
    while(R - L > 1) {
        T M = (L + R) / 2;
        (can(M) ? feasible : infeasible) = M;
    }
    return feasible;
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n, a, b;
    cin >> n >> a >> b;
    #define N 100'000
    static int s[N];
    static int ps[N];
    for(int i = 0; i < n; i++) {
        cin >> s[i];
    }
    sort(s + 1, s + n);
    partial_sum(s, s + n, ps);
    cout << n - bsearch(1, n + 1, [&](int x) {
        return ps[0] * a / ps[x-1] >= b;
    }) << endl;
    return 0;
}
