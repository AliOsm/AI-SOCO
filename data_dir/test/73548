#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int MAXN=1e5+5;
int b[MAXN];
vector<int> odd,even;
vector<ll> v;
struct seg
{
	#define lson l,mid,rt<<1
	#define rson mid+1,r,rt<<1|1
	ll sum[MAXN<<2],lazy[MAXN<<2];
	inline void push_up(int rt)
	{
		sum[rt]=sum[rt<<1]+sum[rt<<1|1];
	}
	void build(int l,int r,int rt,bool o)
	{
		if(l>r)
			return ;
		lazy[rt]=0;
		if(l==r)
		{
			if(o)
			{
				sum[rt]=odd[l-1];
			}
			else
			{
				sum[rt]=even[l-1];
			}
			return;
		}
		int mid=(l+r)>>1;
		build(lson,o);
		build(rson,o);
		push_up(rt);
	}
	inline void push_down(int rt,int l,int r)
	{
		if(lazy[rt])
		{
			int mid=(l+r)>>1;
			lazy[rt<<1]+=lazy[rt];
			lazy[rt<<1|1]+=lazy[rt];
			sum[rt<<1]+=1LL*(mid-l+1)*lazy[rt];
			sum[rt<<1|1]+=1LL*(r-mid)*lazy[rt];
			lazy[rt]=0;
		}
	}
	void update(int L,int R,ll val,int l,int r,int rt)
	{
		if(L>R)
			return ;
		if(L<=l&&r<=R)
		{
			lazy[rt]+=val;
			sum[rt]+=1LL*val*(r-l+1);
			return ;
		}
		push_down(rt,l,r);
		int mid=(l+r)>>1;
		if(L<=mid)
			update(L,R,val,lson);
		if(mid<R)
			update(L,R,val,rson);
		push_up(rt);
	}
	ll query(int L,int R,int l,int r,int rt)
	{
		if(L>R)
			return 0;
		if(L<=l&&r<=R)
		{
			return sum[rt];
		}
		push_down(rt,l,r);
		int mid=(l+r)>>1;
		ll ret=0;
		if(L<=mid)
			ret+=query(L,R,lson);
		if(mid<R)
			ret+=query(L,R,rson);
		return ret;
	}
}O,E;
int n,m,q;
void init()
{
	int r=1;
	ll val=0;
	for(int i=1;i<n;i++)
	{
		if(i&1)
			val+=b[i];
		else
			val-=b[i];
	}
	for(int i=n;i<=m;i++)
	{
		if(n&1)
			val+=b[i];
		else
			val-=b[i];
		v.push_back(val);
		val-=b[i-n+1];
		val=-val;
	}
}
ll getans(ll tmp)
{
	ll ret=0x3f3f3f3f3f3f3f3f;
	vector<ll> :: iterator it=lower_bound(v.begin(),v.end(),tmp);
	if(it!=v.end())
		ret=min(ret,abs(tmp-*it));
	if(it!=v.begin())
	{
		it--;
		ret=min(ret,abs(tmp-*it));
	}
	return ret;
}
int main()
{
	scanf("%d%d%d",&n,&m,&q);
	for(int i=1;i<=n;i++)
	{
		int x;
		scanf("%d",&x);
		if(i&1)
		{
			odd.push_back(x);
		}
		else
		{
			even.push_back(x);
		}
	}
	int no,ne;
	no=odd.size();ne=even.size();
	O.build(1,no,1,true);E.build(1,ne,1,false);
	for(int i=1;i<=m;i++)
		scanf("%d",&b[i]);
	init();
	sort(v.begin(),v.end());
	ll Le,Ri;
	Le=O.query(1,no,1,no,1);
	Ri=E.query(1,ne,1,ne,1);
	printf("%lld\n",getans(Le-Ri));
	while(q--)
	{
		int l,r,x;
		int L,R;
		scanf("%d%d%d",&l,&r,&x);
		L=(l)/2+1;R=(r+1)/2;
		O.update(L,R,x,1,no,1);
		L=(l+1)/2;R=(r)/2;
		E.update(L,R,x,1,ne,1);
		Le=O.query(1,no,1,no,1);
		Ri=E.query(1,ne,1,ne,1);
		printf("%lld\n",getans(Le-Ri));
	}
}
