#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long 

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << endl;
        //use cerr if u want to display at the bottom
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define trace(...)
#endif

typedef trie<string,null_type,trie_string_access_traits<>,pat_trie_tag,trie_prefix_search_node_update> pref_trie;
typedef tree<long int,null_type,less<long int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
typedef cc_hash_table<long int,long int, hash<long int>, equal_to<long int>, direct_mask_range_hashing<long int>, 
hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;

#define N 20

long int fact[N+1];

void factorial(){
  
  fact[0]=1;  
  for(long int i = 1;i <= N; i++)
    fact[i] = (fact[i-1] * i);
 
}
 
vector<vector<vector<vector<vector<vector<vector<vector<vector<vector<long int>>>>>>>>>> dp;

long int calc(long int zero,long int one,long int two,long int three,long int four,long int five,long int six,long int seven,long int eight,long int nine){
  
  long int sum = zero + one + two + three + four + five + six + seven + eight + nine;
  long int nFact = fact[sum];
  nFact /= fact[zero];
  nFact /= fact[one];
  nFact /= fact[two];
  nFact /= fact[three];
  nFact /= fact[four];
  nFact /= fact[five];
  nFact /= fact[six];
  nFact /= fact[seven];
  nFact /= fact[eight];
  nFact /= fact[nine];

  if(zero){
    long int sum2 =  one + two + three + four + five + six + seven + eight + nine + zero - 1;
    long int nrFact = fact[sum2];
    nrFact /= fact[zero - 1];
    nrFact /= fact[one];
    nrFact /= fact[two];
    nrFact /= fact[three];
    nrFact /= fact[four];
    nrFact /= fact[five];
    nrFact /= fact[six];
    nrFact /= fact[seven];
    nrFact /= fact[eight];
    nrFact /= fact[nine];

    nFact -= nrFact;
  }
  
  return nFact;
}

vector<long int> v(10);

long int solve(long int zero,long int one,long int two,long int three,long int four,long int five,long int six,long int seven,long int eight,long int nine){
  if(zero > v[0] || one > v[1] || two > v[2] || three > v[3] || four > v[4] || five > v[5] || six > v[6] || seven > v[7] || eight > v[8] || nine > v[9])
    return 0;


  if(dp[zero][one][two][three][four][five][six][seven][eight][nine] != -1)
    return dp[zero][one][two][three][four][five][six][seven][eight][nine];

  long int ans = calc(zero,one,two,three,four,five,six,seven,eight,nine);

  for(long int i = 1; i <= (1LL << 10) - 1; i++){
    bool changeZero = false,changeOne = false, changeTwo = false, changeThree = false, changeFour = false, changeFive = false, changeSix = false, changeSeven = false, changeEight = false, changeNine = false;
    if(i & 1)
      changeZero = true;
    if(i & (1LL << 1))
      changeOne = true;
    if(i & (1LL << 2))
      changeTwo = true;
    if(i & (1LL << 3))
      changeThree = true;
    if(i & (1LL << 4))
      changeFour = true;
    if(i & (1LL << 5))
      changeFive = true;
    if(i & (1LL << 6))
      changeSix = true;
    if(i & (1LL << 7))
      changeSeven = true;
    if(i & (1LL << 8))
      changeEight = true;
    if(i & (1LL << 9))
      changeNine = true;


    long int sumCheck = changeZero + changeOne + changeTwo + changeThree + changeFour + changeFive + changeSix + changeSeven  + changeEight + changeNine;

    if(sumCheck & 1)
      ans += solve(zero + changeZero, one + changeOne, two + changeTwo, three + changeThree, four + changeFour, five + changeFive,six + changeSix, seven + changeSeven, eight + changeEight, nine + changeNine);
    else
      ans -= solve(zero + changeZero, one + changeOne, two + changeTwo, three + changeThree, four + changeFour, five + changeFive,six + changeSix, seven + changeSeven, eight + changeEight, nine + changeNine);

  }

  
  return dp[zero][one][two][three][four][five][six][seven][eight][nine] = ans;  
}

int main(){
   IOS;
 /*    #ifndef ONLINE_JUDGE
         freopen("in.txt",  "r",  stdin);
         freopen("out.txt", "w", stdout);
     #endif */

   factorial();
   
   string s;
   cin>>s;

   for(auto ele : s)
      v[ele - '0']++;

   dp.resize(v[0] + 1);

   for(auto &ele : dp)
    ele.resize(v[1] + 1);

  for(auto &e : dp)
    for(auto &ele : e)
      ele.resize(v[2] + 1);
    
  
  for(auto &a : dp)
    for(auto &b : a)
      for(auto &c : b)
        c.resize(v[3] + 1);

  for(auto &a : dp)
    for(auto &b : a)
      for(auto &c : b)
        for(auto &d : c)
          d.resize(v[4] + 1);
      
  

  for(auto &a : dp)
    for(auto &b : a)
      for(auto &c : b)
        for(auto &d : c)
          for(auto &e : d)
            e.resize(v[5] + 1);
  

  for(auto &a : dp)
    for(auto &b : a)
      for(auto &c : b)
        for(auto &d : c)
          for(auto &e : d)
            for(auto &f : e)
                f.resize(v[6] + 1);
  


  for(auto &a : dp)
    for(auto &b : a)
      for(auto &c : b)
        for(auto &d : c)
          for(auto &e : d)
            for(auto &f : e)
              for(auto &g : f)
                g.resize(v[7] + 1);
    

  

    for(auto &a : dp)
    for(auto &b : a)
      for(auto &c : b)
        for(auto &d : c)
          for(auto &e : d)
            for(auto &f : e)
              for(auto &g : f)
                for(auto &h : g)
                  h.resize(v[8] + 1);
    


  for(auto &a : dp)
    for(auto &b : a)
      for(auto &c : b)
        for(auto &d : c)
          for(auto &e : d)
            for(auto &f : e)
              for(auto &g : f)
                for(auto &h : g)
                  for(auto &i : h)
                     i.resize(v[9] + 1,-1);
    



   cout<<solve(v[0] > 0,v[1] > 0,v[2] > 0,v[3] > 0,v[4] > 0,v[5] > 0,v[6] > 0,v[7] > 0,v[8] > 0,v[9] > 0);
   return 0;
}