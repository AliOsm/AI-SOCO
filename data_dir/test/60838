#include <bits/stdc++.h>
using namespace std ;

typedef long long ll ;

ll n,a[100005] , b[100005] , h[100005] , id[100005] ;

bool cmp( const ll& X , const ll & Y )
{
    if( b[X] == b[Y] ) return a[X] < a[Y] ;
    return b[X] < b[Y] ;
}

ll ans[100005] ;
ll tree[500005] ;

long long query(long long node,long long b,long long e,long long i,long long j)
{
    if (i > e || j < b) return 0;
    if (b >= i && e <= j) return tree[node];
    long long Left=node*2;
    long long Right=node*2+1;
    long long mid=(b+e)/2;
    long long p1=query(Left,b,mid,i,j);
    long long p2=query(Right,mid+1,e,i,j);
    return max ( p1, p2 ) ;
}

void update(long long node,long long b,long long e,long long i,long long newvalue)
{
    if (i > e || i < b) return;
    if (b >= i && e <= i)
    {
//cout << "yo" <<endl ;
        tree[node]=newvalue;
        return;
    }
    long long Left=node*2;
    long long Right=node*2+1;
    long long mid=(b+e)/2;
    update(Left,b,mid,i,newvalue);
    update(Right,mid+1,e,i,newvalue);
    tree[node]=max( tree[Left],tree[Right]);
}
int main()
{
    scanf("%I64d",&n) ;

    for( int i = 1 ; i <= n ; i++ )
    {
        scanf("%I64d %I64d %I64d", &a[i] , &b[i] , &h[i] ) ;
        id[i] = i ;
        //printf("%I64d %I64d %I64d\n", a[id[i]] , b[id[i]] , h[id[i]] ) ;

    }
    sort( id + 1 , id+n+1 , cmp ) ;
//    for( int i = 1 ; i <= n ; i++ )
//    {
//        printf("%I64d %I64d %I64d\n", a[id[i]] , b[id[i]] , h[id[i]] ) ;
//
//    }

    for( ll i = 1 ; i <= n ; i++ )
    {
        ll lo = 0 , hi = i-1 ;
        if( b[id[i-1]] <= a[id[i]] ) ans[i] = h[id[i]] ;
        else
        {
            ll mid ;
            ll lolo = hi ;

            while( lo <= hi )
            {
                mid = ( lo + hi ) / 2 ;
                if( b[id[mid]] > a[id[i]] )
                {
                    lolo = mid ;
                    hi = mid -1 ;
                }
                else
                {
                    lo = mid+1 ;
                }
            }
          //  cout << "lolo " << lolo << "  hi " << hi <<  endl ;
            ll maxi = query(1,1,n,lolo, i-1 ) ;
         //   cout << "maxi " << maxi << endl ;
            ans[i] = h[id[i]] + maxi ;
        }
        update(1,1,n,i,ans[i] ) ;
        ans[i] = max( ans[i] , ans[i-1] ) ;
    }

    cout << ans[n] ;
}



/*


4
3 7 3
2 7 3
2 6 2
1 5 1

*/
