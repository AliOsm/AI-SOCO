#include <bits/stdc++.h>
//#define int long long
#define hash hashhash
#define X first
#define Y second
#define endl "\n"
#define Mp make_pair
#define debug(x) cerr << #x << " = " << x << endl
#define pb push_back
using namespace std;
inline int in(){int32_t x ; scanf("%d",&x) ; return x ; }
inline long long lin(){long long x ; scanf("%lld",&x) ; return x ;}
char ch[4000010];
inline string get(){ scanf("%s",ch) ; return string(ch) ; }
inline void read(int *a , int n ) { for (int i = 0 ; i < n ; i ++) a[i] = in() ; }
template <class blank> inline void out(blank x) {cout << x << endl ; exit(0) ;}
template <class blank , class blank2> inline void smin(blank &a , blank2 b) {a = a <= b ? a : b ;}
template <class blank , class blank2> inline void smax(blank &a , blank2 b) {a = a >= b ? a : b ;}
typedef pair<int , int > pii;
typedef long double ld;
typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<pii> vii;
const int maxn  = 3e5 + 10;
const int maxm = 4e6 + 10;
const int maxlg = 22;
const int base = 29;
const int mod = 1e9 + 7;
const ll inf = 1e9 + 10;
const double eps = 1e-4;
const int SQ = 317;
vi g[maxn];
set<pair<ll,ll>> ins[maxn];
vii q[maxn];
int h[maxn],heavy[maxn],sz[maxn];
ll reduce[maxn];
ll res;
inline void pre_calc(int node , int fa = -1)
{
    h[node] = fa == -1 ? 0 : h[fa] + 1;
    sz[node] = 1;
    for (auto u : g[node])
    {
        if (u - fa){
            pre_calc(u,node) , sz[node] += sz[u];
            heavy[node] = heavy[node] == -1 || sz[u] > sz[heavy[node]] ? u : heavy[node];
        }
    }
}
inline void do_it(int node)
{
    while (ins[node].size() && h[ins[node].begin()->second] >= h[node])
        ins[node].erase(ins[node].begin());
    if (!ins[node].size()) out(-1);
    res += ins[node].begin()->first - reduce[node];
    reduce[node] = ins[node].begin()->first;
}
inline void dfs(int node , int fa = -1)
{
    for (auto u : g[node])
        if (u - fa) dfs(u,node);
    if (heavy[node] == -1)
    {
        for (auto shit : q[node])
            ins[node].insert(shit);
        return ;
    }
    do_it(heavy[node]);
    swap(ins[node],ins[heavy[node]]);
    reduce[node] = reduce[heavy[node]];
    for (auto u : g[node])
    {
        if (u - fa && u - heavy[node])
        {
            do_it(u);
            for (auto shit : ins[u])
            {
                if (h[shit.second] <= h[node])
                    ins[node].insert({(ll)shit.first-reduce[u]+reduce[heavy[node]],shit.second});
            }
        }
    }
    for (auto shit : q[node])
        ins[node].insert({(ll)shit.first+reduce[heavy[node]],shit.second});
    
}
int32_t main()
{
    int n = in() , m = in();
    memset(heavy,-1,sizeof heavy);
    for (int i = 0 ; i < n - 1 ; i ++)
    {
        int v = in() , u = in();
        g[v].push_back(u) , g[u].push_back(v);
    }
    for (int i = 0 ; i < m ; i ++)
    {
        int u = in() , v = in() , c = in();
        q[u].pb({c,v});
    }
    pre_calc(1);
    dfs(1);
    cout << res << endl;
}
