#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

#define PB push_back
//#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)

const int mx = 2e5+5;
int n;
int t[mx];

vi adjlist[mx];
int post[mx];
int nxt = 1;
int st[mx], ed[mx];
int tree[mx * 4], prop[mx * 4];

void dfs( int u )
{
	post[nxt] = u;
	st[u] = nxt++;
	for( auto v : adjlist[u] ) {
		dfs(v);
	}
	ed[u] = nxt-1;
}

void init( int node, int l, int r )
{
	if( l == r ) {
		tree[node] = t[post[l]];
		return;
	}
	int mid = (l + r)/2;
	init( 2*node, l, mid );
	init( 2*node+1, mid+1, r );
	tree[node] = tree[2*node]+tree[2*node+1];
}

void shift( int node, int l, int r )
{
	int mid = (l + r)/2;
	if( prop[node] ) {
		prop[2*node] ^= prop[node];
		prop[2*node+1] ^= prop[node];
		tree[2*node] = (mid-l+1)-tree[2*node];
		tree[2*node+1] = (r-mid)-tree[2*node+1];
		prop[node] = 0;
	}
}

void update( int node, int l, int r, int b, int e )
{
	if( l > e || r < b ) return;
	if( l >= b && r <= e ) {
		tree[node] = (r-l+1)-tree[node];
		prop[node] ^= 1;
		return;
	}
	shift(node, l, r);
	int mid = (l + r)/2;
	update( 2*node, l, mid, b, e );
	update( 2*node+1, mid+1, r, b, e );
	tree[node] = tree[2*node]+tree[2*node+1];
}

int query( int node, int l, int r, int b, int e )
{
	if( l > e || r < b ) return 0;
	if( l >= b && r <= e ) return tree[node];
	int mid = (l + r)/2;
	shift(node, l, r);
	//if( l == 3 && r == 4 ) cout << "hmm: " << tree[2*node+1] << endl;
	return query( 2*node, l, mid, b, e )+query( 2*node+1, mid+1, r, b, e );
}

int main()
{
	optimize();
	cin >> n;
	for( int i = 0; i < n-1; ++i ) {
		int p;
		cin >> p;
		adjlist[p].PB(i+2);
	}
	for( int i = 1; i <= n; ++i ) cin >> t[i];
	dfs(1);
	//for( int i = 1; i <= n; ++i ) cout << post[i] << " "; cout << endl;
	//for( int i = 1; i <= n; ++i ) cout << st[i] << " " << ed[i] << endl;
	init(1, 1, n);
	int q;
	cin >> q;
	for( int i = 0; i < q; ++i ) {
		string s;
		int x;
		cin >> s >> x;
		if( s == "pow" ) update( 1, 1, n, st[x], ed[x] );
		else cout << query( 1, 1, n, st[x], ed[x] ) << endl;
	}
}





















