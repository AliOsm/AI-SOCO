//#define ONLINE_JUDGE

#if defined(ONLINE_JUDGE)
#define _SECURE_SCL 0
#endif

#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <functional>
#include <cmath>
#include <climits>
#include <numeric>
#include <tuple>
#include <memory.h>

#if !defined(__GNUC__)
typedef signed char int8_t;
typedef unsigned char uint8_t;
typedef signed short int16_t;
typedef unsigned short uint16_t;
typedef signed long int32_t;
typedef unsigned long uint32_t;
typedef signed long long int64_t;
typedef unsigned long long uint64_t;
#else // !defined(__GNUC__)
#define _CrtDbgBreak()
#endif // !defined(__GNUC__)

#if defined(ONLINE_JUDGE)
#define LOCAL_TEST 0
#else 
#define LOCAL_TEST 1
#endif

#if LOCAL_TEST
#define LOCAL_ASSERT(expr) { if (!(expr)) {std::cout << "ASSERT FAILED: '" << #expr << "'" << std::endl; _CrtDbgBreak(); } }
#else
#define LOCAL_ASSERT(expr)
#endif

typedef long double double_t;
typedef std::string string8_t;

typedef std::vector<size_t> vector_size_t;
typedef std::vector<int32_t> vector_int32_t;
typedef std::vector<uint32_t> vector_uint32_t;
typedef std::vector<int64_t> vector_int64_t;
typedef std::vector<uint64_t> vector_uint64_t;

typedef std::vector<vector_size_t> vector_2d_size_t;
typedef std::vector<string8_t> vector_string8_t;

typedef std::set<size_t> set_size_t;
typedef std::set<int32_t> set_int32_t;
typedef std::set<uint32_t> set_uint32_t;
typedef std::set<int64_t> set_int64_t;
typedef std::set<uint64_t> set_uint64_t;

typedef std::set<string8_t> set_string8_t;
typedef std::multiset<string8_t> multiset_string8_t;

// Auxiliary functions definition
// 
template<typename T> inline T Abs(const T a) { return a < 0 ? -a : a; }
template<typename T> inline T Min(const T a, const T b) {return a < b ? a : b;}
template<typename T> inline T Max(const T a, const T b) {return a > b ? a : b;}
template<typename T> inline void UpdateMin(T& a, const T b) {a = Min(a, b);}
template<typename T> inline void UpdateMax(T& a, const T b) {a = Max(a, b);}

static const double_t eps = 1.0e-09;
template<typename T> inline bool IsEqual(const T a, const T b) { return Abs(a - b) < eps; }
template<typename T> inline bool IsGreater(const T a, const T b) { return a > b + eps; }
template<typename T> inline bool IsLess(const T a, const T b) { return a + eps < b; }

template<typename T> inline string8_t ToStr(const T& val) { std::ostringstream ostr; ostr << val; return ostr.str(); }
template<typename T> inline bool FromStr(const string8_t& str, T& val) {std::istringstream istr(str); istr >> val; return !!istr; }

#if defined(ONLINE_JUDGE)
template<size_t id> class StopWatch { };
#else
#include <library/lib_stopwatch.h>
#include <library/lib_random.h>
library::random::Rand g_rnd;
#endif

template<typename T>
struct MinFunc
{
    typedef T value_type_t;
    value_type_t CombineValues(const value_type_t& l, const value_type_t& r) const { return Min(l, r); }
    value_type_t GetDefaultValue() const { return (value_type_t)std::numeric_limits<value_type_t>::max(); }
};

template<typename value_type_t, typename combine_function_t>
class SegmentTree
{
public:
    typedef std::vector<value_type_t> values_t;

    explicit SegmentTree(const values_t& inputData, const combine_function_t& func = combine_function_t())
        : m_func(func)
    {
        Preprocess(inputData);
    }

    // [idxBegin, idxEnd)
    value_type_t CalculateForRange(size_t idxBegin, size_t idxEnd) const
    {
        if (idxBegin == idxEnd)
            return m_func.GetDefaultValue();

        const size_t len = m_resultTree[0].size();
        const size_t curPow = m_resultTree.size()-1;
        return CalculateForRangeRecPart(0, len, curPow, idxBegin, idxEnd);
    }

private:
    typedef std::vector<values_t> combined_result_tree_t;

    value_type_t CalculateForRangeRecPart(size_t disp, size_t len, size_t curPow2, size_t idxBegin, size_t idxEnd) const
    {
        // "len" is current power of 2
        const size_t l = disp;
        const size_t r = disp + len;

        if (curPow2 == 0)
        {
            return m_resultTree[curPow2][disp];
        }

        if (l == idxBegin && r == idxEnd)
        {
            return m_resultTree[curPow2][disp / len];
        }

        const size_t mid = disp + len / 2;

        if (mid <= idxBegin)
        {
            return CalculateForRangeRecPart(mid, len / 2, curPow2 - 1, idxBegin, idxEnd);
        }
        else if (mid >= idxEnd)
        {
            return CalculateForRangeRecPart(disp, len / 2, curPow2 - 1, idxBegin, idxEnd);
        }
        else
        {
            const value_type_t v1 = CalculateForRangeRecPart(disp, len / 2, curPow2 - 1, idxBegin, mid);
            const value_type_t v2 = CalculateForRangeRecPart(mid, len / 2, curPow2 - 1, mid, idxEnd);
            return m_func.CombineValues(v1, v2);
        }
    }

    void Preprocess(const values_t& inputData)
    {
        const size_t n = inputData.size();

        size_t upperPow2 = 1;
        while (upperPow2 < n) {upperPow2 *= 2;}

        m_resultTree.push_back(inputData);
        m_resultTree[0].resize(upperPow2);
        std::fill(m_resultTree[0].begin() + inputData.size(), m_resultTree[0].end(), m_func.GetDefaultValue());

        size_t pow2 = 1;
        size_t multiplier = 2;

        while (multiplier <= upperPow2)
        {
            const size_t lineSize = upperPow2 / multiplier;
            const values_t& prevLine = m_resultTree[pow2-1];
            values_t nextLine(lineSize, m_func.GetDefaultValue());

            for (size_t i = 0; i < lineSize; i++)
                nextLine[i] = m_func.CombineValues(prevLine[2*i], prevLine[2*i + 1]);

            m_resultTree.push_back(nextLine);

            pow2 += 1;
            multiplier *= 2;
        }
    }

    const combine_function_t m_func;
    combined_result_tree_t m_resultTree;
};


bool Solve(std::istream& ist, std::ostream& ost, const bool multipleTestMode)
{
    StopWatch<1> sw; sw;

    // 
    string8_t str;
    ist >> str;
    
    if (multipleTestMode && !ist)
        return false;

    const size_t n = str.size();

    // 
    vector_int32_t sum(n + 1);
    sum[0] = 0;
    for (size_t i = 0; i < n; i++)
    {
        sum[i + 1] = sum[i] + (str[i] == '(' ? 1 : -1);
    }

    SegmentTree<int32_t, MinFunc<int32_t> > st(sum);

    size_t m;
    ist >> m;
    for (size_t i = 0; i < m; i++)
    {
        size_t l, r;
        ist >> l >> r;
        --l;

        const int32_t sumB = sum[l];
        const int32_t sumE = sum[r];
        const int32_t sumM = st.CalculateForRange(l, r + 1);

        const int32_t mn = std::min(sumB, sumE);
        const int32_t mx = std::max(sumB, sumE);
        LOCAL_ASSERT(mx >= mn);
        LOCAL_ASSERT(mn >= sumM);

        int32_t ans = r - l;
        ans -= (mn - sumM) * 2;
        ans -= mx - mn;
        ost << ans << std::endl;
    }

    return multipleTestMode;
}

int main()
{
    std::ios_base::sync_with_stdio(false);
    std::istream& ist = std::cin;
    std::ostream& ost = std::cout;
#if defined(ONLINE_JUDGE)
    Solve(ist, ost, false);
#else
    while(Solve(ist, ost, true)) {};
#endif
}
