#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

struct Store
{
    int k, p;

    Store(int k = 0, int p = 0) : k(k), p(p) {}
};

int n;
vector <vector <int>> Adj;
vector <vector <Store>> A;

int Solve(int x, int k, int p)
{
    queue <int> Q;
    vector <int> Dist(n, -1);

    Q.push(x);
    Dist[x] = 0;

    int Sum = 0;
    ll Cost = 0;
    map <int,int> Cnt;

    while(!Q.empty())
    {
        int x = Q.front();  Q.pop();

        for(const Store& S : A[x])
        {
            Sum += S.k;
            Cost += (ll) S.k * S.p;
            Cnt[S.p] += S.k;
        }

        while(Sum > k && !Cnt.empty())
        {
            auto it = --Cnt.end();
            pair <int,int> P = *it;
            Cnt.erase(it);

            int Need = min(Sum - k, P.second);

            Sum -= Need;
            P.second -= Need;
            Cost -= (ll) Need * P.first;

            if(P.second > 0)    Cnt[P.first] += P.second;
        }

        if(Sum >= k && Cost <= p)   return Dist[x];

        for(int y : Adj[x])
        {
            if(Dist[y] == -1)
            {
                Q.push(y);
                Dist[y] = Dist[x] + 1;
            }
        }
    }

    return -1;
}

int main()
{
    int m;  cin >> n >> m;

    Adj.assign(n, vector <int> ());
    A.assign(n, vector <Store> ());

    while(m--)
    {
        int x, y;   scanf("%d%d", &x, &y);  x--, y--;

        Adj[x].push_back(y);
        Adj[y].push_back(x);
    }

    int w;  scanf("%d", &w);

    while(w--)
    {
        int x, k, p;    scanf("%d%d%d", &x ,&k, &p);    x--;

        A[x].push_back(Store(k, p));
    }

    int q;  scanf("%d", &q);

    while(q--)
    {
        int x, k, p;    scanf("%d%d%d", &x, &k, &p);    x--;

        printf("%d\n", Solve(x, k, p));
    }
}
