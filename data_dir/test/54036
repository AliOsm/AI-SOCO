#include <bits/stdc++.h>

#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define for1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define prev asdfsdf
#define x first
#define y second

using namespace std;
typedef long double ld;
typedef long long ll;
typedef pair<int, int> PII;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef long long i64;
typedef unsigned long long ull;

template <class T>
bool remin(T &a, const T &b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}
template <class T>
bool remax(T &a, const T &b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

int nxt() {
    int x;
    scanf("%d", &x);
    return x;
}

ll gcd(ll a, ll b) {
    a = abs(a);
    b = abs(b);
    while (b) {
        a %= b;
        swap(a, b);
    }
    return a;
}


typedef ll ptdata;

struct pt {
    ptdata x, y;
    pt() {}
    pt(ptdata x, ptdata y) : x(x), y(y) {}

    pt operator - (const pt &r) const {
        return pt(x - r.x, y - r.y);
    }
    pt operator + (const pt &r) const {
        return pt(x + r.x, y + r.y);
    }
    pt operator * (const ld &r) const {
        return pt(x * r, y * r);
    }
    ptdata sqlen() const {
        return abs(x * x + y * y);
    }
    ld len() const {
        return sqrtl(sqlen());
    }

    bool operator < (const pt &r) const {
        if (x != r.x) return x < r.x;
        return y < r.y;
    }
    bool operator == (const pt &r) const {
        return x == r.x && y == r.y;
    }
};

ptdata cross(const pt &l, const pt &r) {
    return l.x * r.y - l.y * r.x;
}

ptdata dot(const pt &l, const pt &r) {
    return l.x * r.x + l.y * r.y;
}


ll pwmod(ll a, ll n, ll mod) {
    ll ret = 1;
    while (n) {
        if (n & 1) ret = ret * a % mod;
        a = a * a % mod;
        n >>= 1;
    }
    return ret;
}

template<typename T>
inline T sqr(T x) {
    return x * x;
}

string s;
const ll mod = 1000 * 1000 * 1000 + 7;

const int N = 1000 * 100 + 10;
ll f[N];
ll fi[N];

inline ll bin(int n, int k) {
    if (n < 0) return 0;
    if (k < 0 || k > n) return 0;
    return f[n] * fi[k] % mod * fi[n - k] % mod;
}


struct Q {
    int t, n;
    ll ans;
    Q() {}
    Q(int t, int n) : t(t), n(n) {}
};

vector<Q> e;
ll ans[N];

inline void solve() {
    f[0] = 1;
    fi[0] = 1;
    for (int i = 1; i < N; ++i) {
        f[i] = f[i - 1] * i % mod;
        fi[i] = pwmod(f[i], mod - 2, mod);
    }
    int m;
    cin >> m;
    cin >> s;
    e.pb(Q(1, (int)s.length()));

    forn(i, m) {
        Q q;
        cin >> q.t;
        if (q.t == 1) {
            cin >> s;
            q.n = (int)s.length();
        } else {
            cin >> q.n;
        }
        e.pb(q);
    }
    vector<int> lens;
    forn(i, e.size()) {
        if (e[i].t == 1) {
            lens.pb(e[i].n);
        }
    }
    sort(all(lens));
    lens.resize(unique(all(lens)) - lens.begin());
    for (int sl : lens) {
        forn(i, sl) ans[i] = 0;
        ans[sl] = 1;
        ll pw25 = 1;
        for (int i = sl; i + 1 < N; ++i) {
            ans[i + 1] = ans[i] * 26;
            pw25 *= 25;
            pw25 %= mod;
            ans[i + 1] += bin(i, sl - 1) * pw25;
            ans[i + 1] %= mod;
        }
        int pr_len = -1;
        forn(i, e.size()) {
            if (e[i].t == 2) {
                if (pr_len == sl) {
                    e[i].ans = ans[e[i].n];
                }
            } else {
                pr_len = e[i].n;
            }
        }
    }
    forn(i, e.size()) {
        if (e[i].t == 2) {
            cout << e[i].ans << "\n";
        }
    }
}



int main()
{
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    solve();

    cerr << "Time " << clock() / (double)CLOCKS_PER_SEC << endl;
    return 0;
}
