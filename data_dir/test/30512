#include <bits/stdc++.h>

using namespace std;

const int N = (int)3e5 + 7;

int n, id, mx;
vector < pair <int, int> > g[N];
vector <int> a[N];

inline void dfs0(int v = 1, int depth = 0) {
	a[depth].push_back(v);
	for (int i = 0; i < g[v].size(); i++) {
		int to = g[v][i].first;
		dfs0(to, depth + 1);
	}
}
inline int dfs1(vector <int> x) {
	vector <int> go[26];
	for (int i = 0; i < x.size(); i++) {
		for (int j = 0; j < g[x[i]].size(); j++) {
			pair <int, int> to = g[x[i]][j];
			go[to.second].push_back(to.first);
		}
	}
	int res = 0;
	for (int i = 0; i < 26; i++)
		if (go[i].size() > 1) res += dfs1(go[i]) + (int)go[i].size() - 1;
	return res;
}
inline int upd(int p) {
	int res = 0;
	for (int i = 0; i < a[p - 1].size(); i++) {
		int v = a[p - 1][i];
		vector <int> go;
		for (int j = 0; j < g[v].size(); j++) {
			int to = g[v][j].first;
			go.push_back(to);
		}
		if (go.size()) res += dfs1(go) + go.size();
	}
	return res;
}
int main() {
	scanf ("%d", &n);
	for (int i = 1; i < n; i++) {
		int v, u;
		char c;
		scanf ("\n%d%d %c", &v, &u, &c);
		g[v].push_back(make_pair(u, c - 'a'));
	}
	dfs0();
	for (int i = 1; i <= n; i++) {
    int cur = upd(i);
    if (cur > mx) mx = cur, id = i;
	}
	cout << n - mx << endl << id;
	return 0;
}
