#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const ld PI = acos(-1.0);
const ll LINF = (ll)1e18 + 5;
const int INF = (int)1e9 + 5;

template<class T>
T sqr(T x) { return x * x; }

template<class T>
T abs(T x) { return x < 0 ? -x : x; }

template<class T>
ll round(T x) { return x < 0 ? x - 0.5 : x + 0.5; }

template<class T>
bool chmin(T & x, const T & y) {
	if (y < x) {
		x = y;
		return true;
	}
	return false;
}

template<class T>
bool chmax(T & x, const T & y) {
	if (x < y) {
		x = y;
		return true;
	}
	return false;
}


template<class P, class Q>
ostream & operator <<(ostream & os, const pair<P, Q> & p) {
	return os << "(" << p.first << ", " << p.second << ")";
}


template<class T>
ostream & operator <<(ostream & os, const vector<T> & v) {
	os << "{";
	bool was = false;
	for (const T & x : v) {
		if (was) {
			os << ", ";
		}
		was = true;
		os << x;
	}
	os << "}";
	return os;
}

template<class T>
ostream & operator <<(ostream & os, const set<T> & v) {
	os << "{";
	bool was = false;
	for (const T & x : v) {
		if (was) {
			os << ", ";
		}
		was = true;
		os << x;
	}
	os << "}";
	return os;
}

template<class P, class Q>
ostream & operator <<(ostream & os, const map<P, Q> & m) {
	os << "{";
	bool was = false;
	for (const auto & x : m) {
		if (was) {
			os << ", ";
		}
		was = true;
		os << x;
	}
	os << "}";
	return os;
}


#define all(x) (x).begin(), (x).end()

#ifdef LOCAL
	#define DEBUG(x) { cerr << #x << " = " << x << endl; }
#else
	#define DEBUG(x) {}
#endif

const ll P = (ll)1e9 + 7;
const ll PP = P * P;

int n;

struct matrix {
	ll arr[100][100];
	matrix() {
		memset(arr, 0, sizeof(arr));
	}
	ll * operator [](int idx) {
		return arr[idx];
	}
	const ll * operator [](int idx) const {
		return arr[idx];
	}
	static matrix E(int n) {
		matrix a;
		for (int i = 0; i < n; i++) {
			a[i][i] = 1;
		}
		return a;
	}
	matrix operator *(const matrix & o) const {
		matrix res;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				for (int k = 0; k < n; k++) {
					res[i][j] += (*this)[i][k] * o[k][j];
					if (res[i][j] >= PP) res[i][j] -= PP;
				}
				res[i][j] %= P;
			}
		}
		return res;
	}
};

matrix powmod(matrix a, ll k) {
	matrix res = matrix::E(n);
	while (k) {
		if ((k & 1)) {
			res = res * a;
			k--;
		}
		else {
			a = a * a;
			k /= 2;
		}
	}
	return res;
}

int cntBits(ll x) {
	int r = 0;
	while (x) {
		r++;
		x &= x - 1;
	}
	return r;
}

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
#else 

#endif

	ll k;

	cin >> n >> k;

	vector<ll> a(n);

	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}

	matrix m;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (cntBits(a[i] ^ a[j]) % 3 == 0) m[i][j] = 1;
		}
	}

	m = powmod(m, k - 1);

	ll res = 0;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			res += m[i][j];
			res %= P;
		}
	}

	cout << res << endl;	
}