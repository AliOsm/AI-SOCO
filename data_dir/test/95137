//be naame khodaa

#include <iostream>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <string>
#include <cstdio>
#include <algorithm>
#include <set>
#include <cassert>
#include <iomanip>
typedef long long ll;
const int maxn = 100005;
const int INF = 2e9;

using namespace std;

pair <int, int> v[20][maxn];
int a[maxn], b[maxn], c[maxn], d[maxn], dis[maxn], par[maxn], id[4*maxn], ans[maxn];
bool mark[maxn];
pair <int, pair <int, int> > p[maxn];
queue <int> q;
int n;

void make(int s=0, int e=n, int x=1, int h=0)
{
	id[x] = s;
	if (e-s == 1)
	{
		v[h][s] = p[s].second;
		return;
	}
	int mid = (s + e)/2;
	make(s, mid, 2*x, h+1);
	make(mid, e, 2*x+1, h+1);
	merge(v[h+1] + s, v[h+1] + mid, v[h+1] + mid, v[h+1] + e, v[h] + s);
}

void go(int l, int r, int val, int p, int x=1, int s=0, int e=n, int h=0)
{
	if (l <= s && e <= r)
	{
		while (id[x] < e && v[h][id[x]].first <= val)
		{
			int y = v[h][id[x]++].second;
			if (mark[y]) continue;
			mark[y] = true, par[y] = p;
			q.push(y);
		}
		return;
	}
	int mid = (s + e)/2;
	if (l < mid) go(l, r, val, p, 2*x, s, mid, h+1);
	if (r > mid) go(l, r, val, p, 2*x+1, mid, e, h+1);
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin >> n;
	fill(dis, dis + n, -1);
	for (int i = 0; i < n; i++)
	{
		cin >> a[i] >> b[i] >> c[i] >> d[i];
		p[i] = {a[i], {b[i], i}};
		if (a[i] == 0 && b[i] == 0)
		{
			mark[i] = 1;
			par[i] = -1;
			q.push(i);
		}
	}
	sort(p, p + n);
	make(0, n);
	while (!q.empty())
	{
		int x = q.front();
		q.pop();
		if (x == n-1)
		{
			int ii = 0;
			for (int y = n-1; y != -1; y = par[y]) ans[ii++] = y;
			cout << ii << endl;
			for (ii--; ii >= 0; ii--) cout << ans[ii]+1 << ' ';
			cout << endl;
			return 0;
		}
		int it = upper_bound(p, p + n, make_pair(c[x], make_pair(INF, INF))) - p;
		go(0, it, d[x], x);
	}
	cout << -1 << endl;
	return 0;
}
