/* ****revpro**** */

#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define endl	   '\n'
#define pii         pair<ll,ll>
#define vi          vector<ll>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll i=a;i<b;i++)
#define repr(i,a,b) for(ll i=b-1;i>=a;i--)    
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define mii	    map<ll,ll>
using namespace std;

#define M  100005
ll a[M];
unordered_map <bitset<19>,ll> dp;
ll add(ll x,ll y,ll mod=hell) { x += y; if(x >= mod) x -= mod; return x;}
ll sub(ll x,ll y,ll mod=hell) { x -= y; if(x < 0) x += mod; return x;}
ll mul(ll x,ll y,ll mod=hell) { return (x * 1ll * y) % mod;}
bool isPrime(ll N) {
	if(N<2)return false;
	if(N<4)return true;
	if((N&1)==0)return false;
	if(N%3==0)return false;
	ll curr=5;
	while (curr<=sqrt(N)){
		if(N%curr==0)return false;
		curr+=2;
		if(N%curr==0)return false;
		curr+=4;
	}
	return true;
}
ll expo(ll base, ll exponent, ll mod=hell) {								//return base^exponent modulo modulus
    ll ans = 1;
    while(exponent !=0 ) {
        if((exponent&1) == 1) {
            ans = ans*base ;
            ans = ans%mod;
        }
        base = base*base;
        base %= mod;
        exponent>>= 1;
    }
    return ans%mod;
}
int main()
{
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{
		ll n;
		cin>>n;
		ll idx[71],cur=0,cnt[71]={0};
		rep(i,2,71)
		{
			if(isPrime(i))
				idx[i]=cur++;
		}
		bitset <19> b;
		rep(i,1,n+1){
			ll x;
			cin>>x;
			cnt[x]++;
		}
		dp[b]=add(expo(2,cnt[1]),sub(expo(2,cnt[1]),1));
		rep(i,2,71)
		{
			if(cnt[i]==0) continue;
			unordered_map <bitset<19>,ll> tmp=dp;
			ll j=2;	
			bitset<19> t=b;
			ll k=i;
			while(k>1)
			{
				ll c=0;
				while(k%j==0)
				{
					c++;
					k/=j;
				}
				if(c%2)
					t[idx[j]]=1;
				j++;
			}
			ll e=expo(2,cnt[i]-1);
			tmp[t]=add(tmp[t],e);
			tmp[b]=add(tmp[b],sub(e,1));
			for(auto j:dp)
			{
				tmp[t^j.F]=add(tmp[t^j.F],mul(j.S,e));
				tmp[j.F]=add(mul(j.S,sub(e,1)),tmp[j.F]);
			}
			dp=tmp;
		}
		cout<<mul(sub(dp[b],1),expo(2,hell-2));
	}
	return 0;
}