#include <iostream>
#include <fstream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <deque>
#include <bitset>
#include <algorithm>
#include <complex>
#include <array>
using namespace std;
 
#define REP(i,n) for(int i=0; i<n; ++i)
#define FOR(i,a,b) for(int i=a; i<=b; ++i)
#define FORR(i,a,b) for (int i=a; i>=b; --i)
#define ALL(c) (c).begin(), (c).end()
 
typedef long long ll;
typedef vector<int> VI;
typedef vector<ll> VL;
typedef vector<long double> VD;
typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef vector<VD> VVD;
typedef pair<int,int> P;
typedef pair<ll,ll> PL;

template<typename T> void chmin(T &a, T b) { if (a > b) a = b; }
template<typename T> void chmax(T &a, T b) { if (a < b) a = b; }

int in() { int x; scanf("%d", &x); return x; }
ll lin() { ll x; scanf("%lld", &x); return x; }

const ll INF = 1e18;

int main() {
    ll n;
    cin >> n;
    VL a(n);
    REP(i,n) a[i] = lin();
    ll m = 63;
    VVI e(n + m);
    REP(i,n){
        REP(j,m){
            if (((a[i] >> j) & 1) == 0) continue;
            e[i].push_back(n + j);
            e[n + j].push_back(i);
        }
    }
    set<int> st;
    REP(i,m){
        if (e[n + i].size() >= 3){
            cout << 3 << endl;
            return 0;
        }
        for (int x : e[n + i]) st.insert(x);
    }
    VI v;
    for (int x : st){
        v.push_back(x);
    }
    int p = v.size();
    VVI g(p);
    REP(i,p) REP(j,p){
        if (i == j) continue;
        if ((a[v[i]] & a[v[j]]) != 0){
            g[i].push_back(j);
        }
    }
    ll ans = INF;
    REP(i,p){
        VL dist(p, -1);
        dist[i] = 0;
        queue<int> que;
        que.push(i);
        while (!que.empty()){
            int now = que.front();
            que.pop();
            for (int next : g[now]){
                if (dist[next] == -1){
                    dist[next] = dist[now] + 1;
                    que.push(next);
                }else if (dist[next] == dist[now] || dist[next] == dist[now] + 1){
                    chmin(ans, dist[now] + dist[next] + 1);
                }
            }
        }
    }
    if (ans == INF) ans = -1;
    cout << ans << endl;

    return 0;
}
