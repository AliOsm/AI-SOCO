#include<iostream>
#include<stdio.h>
#include<assert.h>
#include<string.h>
#include<time.h>
#include<stdlib.h>
#include<math.h>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int maxn = 555;
char s[maxn][maxn];
int d[maxn][maxn],dx[4] = {1,-1,0,0},dy[4] = {0,0,1,-1};
vector<pii> stage[maxn * maxn];
int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    int n,m; cin >> n >> m;
    for (int i = 0; i < n; i++) {
        cin >> s[i];
    }
    vector< pair<int,pii> > res;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (s[i][j] == '#') continue;
            res.pb(mp(0,mp(i + 1,j + 1)));
        }
    }
    queue<pii> q;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (s[i][j] == '#' || d[i][j]) continue;
            d[i][j] = 1;
            q.push(mp(i,j));
            while(!q.empty()) {
                int x = q.front().first;
                int y = q.front().second;
                q.pop();
                stage[d[x][y]].pb(mp(x,y));
                for (int k = 0; k < 4; k++) {
                    int xx = x + dx[k];
                    int yy = y + dy[k];
                    if (xx < 0 || xx >= n || yy < 0 || yy >= m || s[xx][yy] == '#' || d[xx][yy]) continue;
                    d[xx][yy] = d[x][y] + 1;
                    q.push(mp(xx,yy));
                }
            }
        }
    }
    for (int i = n * m; i > 1; i--) {
        for (int j = 0; j < sz(stage[i]); j++) {
            int x = stage[i][j].first + 1;
            int y = stage[i][j].second + 1;
            res.pb(mp(1,mp(x,y)));
            res.pb(mp(2,mp(x,y)));
        }
    }
    cout << sz(res) << endl;
    for (int i = 0; i < sz(res); i++) {
        if (res[i].first == 0) {
            printf("B ");
        } else if (res[i].first == 1) {
            printf("D ");
        } else {
            printf("R ");
        }
        printf("%d %d\n",res[i].second.first,res[i].second.second);
    }
    return 0;
}
