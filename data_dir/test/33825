#include<bits/stdc++.h>
using namespace std;
typedef long long int uli;
const int mx=33;
int t[mx];
struct fire{
  int r,c;
  int dr,dc;
  bool operator <(fire f)const{
    if(r!=f.r)return r<f.r;
    if(c!=f.c)return c<f.c;
    if(dr!=f.dr)return dr<f.dr;
    return dc<f.dc;
  }
};
int main(){
  int n;
  n=30;
  scanf("%d",&n);
  for(int i=0;i<n;i++){
    t[i]=rand()%5+1;
    scanf("%d",t+i);
  }
  set<fire>s;
  set<pair<int,int> >ans;
  s.insert({0,0,0,1});
  for(int it=0;it<n;it++){
    set<fire>ns;
    for(auto f:s){
      ans.insert({f.r,f.c});
      for(int i=1;i<t[it];i++){
        f.r+=f.dr, f.c+=f.dc;
        ans.insert({f.r,f.c});
      }

      fire g={f.r,f.c,0,0};
      fire h=g;
      if(f.dr==0){
        g.dr=1,g.dc=f.dc;
        h.dr=-1,h.dc=f.dc;
      }
      else if(f.dc==0){
        g.dr=f.dr,g.dc=1;
        h.dr=f.dr,h.dc=-1;
      }
      else{
        g.dr=f.dr,g.dc=0;
        h.dr=0,h.dc=f.dc;
      }
      g.r+=g.dr, g.c+=g.dc;
      h.r+=h.dr, h.c+=h.dc;
      ns.insert(g);
      ns.insert(h);
    }
    s=ns;
  }
  printf("%d\n",int(ans.size()));
  return 0;
}
