#include<bits/stdc++.h>

///#include<ext/pb_ds/assoc_container.hpp>
///#include<ext/pb_ds/tree_policy.hpp>
#define MAX ((int)(1e7))
#define pi (2*acos(0))
#define mp make_pair
#define M (1000000007)
#define xx first
#define yy second
#define NN ((int)(1e6+2))
#define N ((int)(1e5+5))
#define eps 0
#define log 20
#define pb push_back
#define MOD 998244353


using namespace std;
///using namespace __gnu_pbds;

typedef long long ll;
typedef unsigned long long int lu;

///typedef tree < int,  null_type,  less < int >,  rb_tree_tag,  tree_order_statistics_node_update > o_set;
vector < int > v[N];

int l[N], glob, go[N], dis[N];

bool vis[N];


pair < int,int > dia(int n,int p)
{
    go[n] = n;
    dis[n] = dis[p] + 1;
    pair < int,int > ans, tmp;
    ans.xx = -1;
    ans.yy = n;
    for(int i = 0; i<v[n].size(); i++){
        if(v[n][i]!=p){
            tmp = dia(v[n][i],n);
            if(tmp.xx>ans.xx){
                ans = tmp;
                go[n] = v[n][i];
            }
        }
    }
    ans.xx++;
    return ans;
}

int root(int n, int p, int d)
{
    ///cout<<n<<endl;
    if(dis[n]==d){
        ///cout<<n<<endl;
        return n;
    }
    for(int i = 0; i<v[n].size(); i++){
        if(v[n][i]!=p && go[n]==v[n][i]){
            return root(v[n][i],n,d);
        }
    }
}

void dfs(int n, int p)
{
    if(v[n].size()==1){
        if(glob==-1) glob = l[n];
        else if(glob!=l[n]){
            printf("No\n");
            exit(0);
        }
    }
    else if(p>0 && v[n].size()<4){
        printf("No\n");
        exit(0);
    }
    for(int i = 0; i<v[n].size(); i++){
        if(v[n][i]!=p){
            l[v[n][i]] = l[n]+1;
            dfs(v[n][i],n);
        }
    }
}

int main()
{
    int n, k, i, a, b;
    scanf("%d %d",&n,&k);
    for(i = 1; i<n; i++){
        scanf("%d %d",&a,&b);
        v[a].pb(b);
        v[b].pb(a);
        ///deg[a]++;
        ///deg[b]++;
    }
    dis[0] = -1;
    pair < int,int >  p;
    p = dia(1,0);
    a = p.yy;
    ///cout<<a<<" "<<p.xx<<endl;
    p = dia(a,0);
    ///cout<<p.yy<<" "<<p.xx<<endl;
    b = p.xx;
    ///a = p.yy;
    if(b%2==1){
        printf("No\n");
        return 0;
    }
    ///for(i = 1; i<=n; i++) cout<<go[i]<<endl;
    ///cout<<a<<" "<<b<<endl;
    a = root(a,0,b/2);

    if(v[a].size()<3){
        printf("No\n");
        return 0;
    }
    ///cout<<a<<endl;
    l[a] = 0;
    glob = -1;
    dfs(a,0);
    if(glob==k) printf("Yes\n");
    else printf("No\n");
    return 0;
}
