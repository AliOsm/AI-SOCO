#include <bits/stdc++.h>
using namespace std;
#define sc(x)            scanf("%d",&x)
#define scc(x)           scanf("%c",&x)
#define scl(x)           scanf("%lld",&x)
#define sz(v)	     	(v.size())
#define mem(v, d)		memset(v, d, sizeof(v))
#define oo				2000000100
#define OO				4000000000000000100
#define PI 3.14159265

typedef unsigned int uint;
typedef long long ll;
//-----------------------------------------------------
const int N = 200100;
const ll MOD = 1000000007;
const double EBS = 1e-7;

int dX[] = {0,0,1,-1};
int dY[] = {1,-1,0,0};

//int GCD(ll num,ll ones) { return !ones ? num : GCD(ones,num%ones); }
//ll lcm(ll a, ll b) { return (a / GCD(a, b)) * b; }
//double Len(ll x,ll y,ll X,ll Y) { return sqrt((X-x)*(X-x)+(Y-y)*(Y-y)); }
/*ll fastP(ll b,ll p)
{
    if(p==0) return 1;
    else if(p==1) return b;
    ll a = fastP(b,p/2);
    if(p%2) return (((a*a))*b);
    else return (a*a);
}*/
//----------------- ------   -------
int lazy[N];
vector<int>v;
int k;
int main()
{
#ifndef ONLINE_JUDGE
    //freopen("i.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#endif
     sc(k);
     ll sum = 0; v.push_back(0);
    while(k--){
        int t,x,y; sc(t);
        if(t==3){
            int idx = sz(v) - 1;
            sum-=v[idx]; sum-=lazy[idx];
            lazy[idx-1]+=lazy[idx];
            lazy[idx] = 0;
            v.pop_back();
        }
        else{
            sc(x);
            if(t==2){
                v.push_back(x);
                sum+=x;
            }
            else{
                sc(y);
                x = min(x,(int)sz(v));
                sum+=(x)*1LL*y;
                lazy[x-1]+=y;
            }
        }
        printf("%.9f\n",sum*1.0/sz(v));

    }
    return 0;
}

