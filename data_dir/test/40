// sab 'MOH' maaya nhi 'MO' maaya hai :P
#include <bits/stdc++.h>

//____By:sirjan13____

#define ll long long int
#define mod 1000000007
#define show(a) for(int i=0;i<a.size();i++) cout<<a[i]<<" ";
#define fi first
#define se second
#define vi vector<int>
#define vs vector<string>
#define vll vector<long long int>
#define pb push_back
#define pi pair<int,int>
#define si set<int>
#define all(v) v.begin(),v.end()
#define sotlaga(v) sort(v.begin(), v.end())
#define sll set<ll>
#define maxheap priority_queue<int>
#define minheap priority_queue<int,vector<int>,greater<int>>
#define mp make_pair
#define fast_io() cin.sync_with_stdio(false);cout.sync_with_stdio(false);
#define long_zero 0ll
#define long_one 1ll
#define N 100009
#define B 317

inline int sbt(int x){return __builtin_popcount(x);}

using namespace std;

vector<pair<int, pi> > queries;
int a[N + 5];
int n, q, L, R, X;
vi ans;
unordered_map<int, int> freq;
int block_a, block_b, quer_ans;

bool cmp(pair<int, pi> a, pair<int, pi> b) {
    block_a = (a.fi)/B;
    block_b = (b.fi)/B;
    if(block_a != block_b){
        return block_a < block_b;
    }
    return a.se.fi < b.se.fi;
}

void rem(int x) {
    freq[x]--;
    if(freq[x] == x) {
        quer_ans++;
    }
    else if(freq[x] == (x - 1)) {
        quer_ans--;
    }
}

void add(int x) {
    freq[x]++;
    if(freq[x] == (x + 1))
        quer_ans--;
    else if(freq[x] == x)
        quer_ans++;
}

int main() {
    fast_io()
    
    cin >> n >> q;
    
    for(int i = 0; i < n; i++) cin >> a[i];
    
    for(int i = 0; i < q; i++) {
        cin >> L >> R;
        queries.pb(mp(L - 1, mp(R - 1, i)));
    }
    
    ans.resize(q);
    
    sort(all(queries), cmp);
    
    int MO_right = -1, MO_left = 0;
    
    for(auto query: queries) {
        L = query.fi;
        R = query.se.fi;
        
        while(MO_right < R) {
            MO_right++;
            add(a[MO_right]);
        }
        
        while(MO_right > R) {
            rem(a[MO_right]);
            MO_right--;
        }
        
        while(MO_left > L) {
            MO_left--;
            add(a[MO_left]);
        }
       
        while(MO_left < L) {
            rem(a[MO_left]);
            MO_left++;
        }
        //cout << quer_ans << " ";
        ans[query.se.se] = quer_ans;
    }
    for(auto res: ans) cout << res << "\n";
	return 0;
}
