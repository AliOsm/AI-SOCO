# include <stdio.h>
# include <bits/stdc++.h>
using namespace std;
# define fi cin
# define fo cout
# define x first
# define y second
# define ll long long
# define IOS ios_base :: sync_with_stdio(0);cin.tie(0)
# define p(v) cerr << #v << " = " << v << '\n'
# define p2(v) cerr << #v << " = " << (complex < int > (v.x,v.y)) << '\n'
# define vi vector < int >
# define vll vector < ll >
# define pii pair < int , int >
# define db double
pair < db , db > operator + (pair < db , db > a,pair < db , db > b)
{
    return {a.x + a.y * b.x,a.y * b.y};
}
int main(void)
{
    #ifdef CF
    freopen("input","r",stdin);
    #endif // CF
    srand(time(0));
    fo << fixed << setprecision(7);
    cerr << fixed << setprecision(7);
    int n,q;
    IOS;
    fi>>n>>q;
    static int a[1 << 20];
    static int b[1 << 20];
    static pair < db , db > t[1 << 20];
    function < void(int,int,int) > build = [&](int p,int u,int node)
    {
        if (p == u) t[node].x = t[node].y = (1 - (1.0 * a[p] / b[p])) / (1.0 * a[p] / b[p]);
        else
        {
            int m = (p + u) / 2;
            build(p,m,node << 1);
            build(m+1,u,node << 1 | 1);
            t[node] = t[node << 1] + t[node << 1 | 1];
        }
    };
    function < void(int,int,int,int) > U = [&](int p,int u,int pos,int node)
    {
        if (p == u) t[node].x = t[node].y = (1 - 1.0 * a[p] / b[p]) / (1.0 * a[p] / b[p]);
        else
        {
            int m = (p + u) / 2;
            if (pos <= m)
                U(p,m,pos,node << 1);
            else
                U(m+1,u,pos,node << 1 | 1);
            t[node] = t[node << 1] + t[node << 1 | 1];
        }
    };
    function < pair < db , db >(int,int,int,int,int) > Q = [&](int p,int u,int l,int r,int node)
    {
        if (l <= p && u <= r) return t[node];
        int m = (p + u) / 2;
        pair < db , db > ans = {0,1};
        if (l <= m) ans = ans + Q(p,m,l,r,node << 1);
        if (m+1<=r) ans = ans + Q(m+1,u,l,r,node << 1 | 1);
        return ans;
    };
    for (int i = 1;i <= n;++i)
        fi>>a[i]>>b[i];
    build(1,n,1);
    while (q --)
    {
        int op,l,r,pos;
        fi>>op;
        if (op == 2)
            fi>>l>>r,fo << 1.0 / (1 + Q(1,n,l,r,1).x) << '\n';
        else
            fi>>pos,fi>>a[pos]>>b[pos],U(1,n,pos,1);
    }
    cerr << "Time elapsed :" << clock() * 1000.0 / CLOCKS_PER_SEC << " ms" << '\n';
    return 0;
}


