#include <bits/stdc++.h>

using namespace std;

#define mem(a,b) memset(a,b,sizeof(a))
#define FOR(i,j,k) for(int i=j;i<=k;i++)
#define REV(i,j,k) for(int i=j;i>=k;i--)
#define FORR(i,j,k,l) for(int i=j;i<=k;i+=l)
#define inf         freopen("in.txt", "r", stdin)
#define outf        freopen("out.txt", "w", stdout)
#define pf          printf
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define sfff(a,b,c)    scanf("%d %d %d", &a, &b, &c)
#define clean(mat,n)   FOR(i,0,n) mat[i].clear()
#define minn          (long long)-1000000000000000000
#define maxx          (long long) 1000000000000000000
#define mod          998244353
#define M_PI           3.14159265358979323846  /* pi */
#define LL           long long
#define NL '\n'
#define cnd tree[idx]
#define lnd (idx<<1)
#define rnd ((idx<<1)+1)
#define PB push_back
#define F first
#define S second
#define MAX 200010
#define MP make_pair
#define valid(nx,ny)  ((nx >= 0) && (nx < row) && (ny >= 0) && (ny < col))
typedef pair<int,int> PR;

LL n, m, subTr[MAX], val[MAX];
vector<int> gigi[MAX];
vector<int> mat[MAX];

void dfs(int p,int pa) /// nij k zero te add korechi
{
    gigi[p].resize( 5 );
    subTr[p] = gigi[p][0] = 1;

    for(auto x : mat[p])
    {
        if(x == pa) continue;

        dfs(x, p);

        subTr[p] += subTr[x];
        val[p] += (val[x] + subTr[x]);

        FOR(i,0,m-1)
            gigi[p][(i + 1) % m] += gigi[x][i];
    }
}

LL prin;

LL rec(int p,int pa)
{
    vector<int> org = gigi[p], orgX; ///check assignment
    LL D = subTr[p], V = val[p], XD, XV;

    LL sum = val[p];
//    cout << p << ' ' << sum << " bitch ";
//    FOR(i,0,m-1) cout << gigi[p][i] << ' ';
//    cout << endl;
    FOR(i,1,m-1) sum += (gigi[p][i] * (m - i));
    sum /= m;

    for(auto x : mat[p])
    {
        if(x == pa) continue;
        orgX = gigi[x]; XD = subTr[x]; XV = val[x];

        FOR(i,0,m-1)
            gigi[p][(i + 1) % m] -= gigi[x][i];

        subTr[p] -= subTr[x];
        val[p] -= (val[x] + subTr[x]);

        subTr[x] += subTr[p];
        val[x] += (val[p] + subTr[p]);

        FOR(i,0,m-1)
            gigi[x][(i + 1) % m] += gigi[p][i];

        sum += rec(x, p);

        gigi[p] = org; gigi[x] = orgX;
        subTr[p] = D; val[p] = V;
        subTr[x] = XD; val[x] = XV;
    }

    return sum;
}

int main()
{
    ios::sync_with_stdio(false);
    ///inf;
    //outf;

    int u, v;

    cin >> n >> m;
    FOR(i,1,n-1)
    {
        cin >> u >> v;
        mat[u].PB( v );
        mat[v].PB( u );
    }

    dfs(1, 1);
//    FOR(i,1,n) cout << val[i] << ' ' << subTr[i] << endl;
//    cout << endl;
//    FOR(i,0,m-1) cout << gigi[1][i] << ' ';
//    cout << endl;

    cout << (rec(1, 1) >> 1) << endl;

    return 0;
}

