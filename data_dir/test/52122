/*
 * temp.cpp
 *
 *  Created on: 2012-7-18
 *      Author: BSBandme
 */
#include <iostream>
#include <fstream>
#include <string.h>
#include <cstdio>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <cassert>
#include <iomanip>
#include <math.h>
#include <deque>
#include <utility>
#include <map>
#include <set>
#include <bitset>
#include <numeric>
#include <climits>
#include <cctype>
#include <cmath>
#include <cstdlib>
#include <sstream>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <double, double> pdd;
typedef vector <int> vi;
typedef vector <ll> vl;
typedef vector <double> vd;
typedef vector <string> vs;
typedef map <string, int> mpsi;
typedef map <double, int> mpdi;
typedef map <int, int> mpii;

const double pi = acos(0.0) * 2.0;
const double eps = 1e-12;
const int step[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

template <class T> inline T abs1(T a) {return a < 0 ? -a : a;}
template <class T> inline T max1(T a, T b, T c = -1234567, T d = -1234567) {
	T ans =  a < b ? b : a;
	if(c != -1234567) ans = max(ans, c);
	if(d != -1234567) ans = max(ans, d);
	return ans;
}
template <class T> inline T min1(T a, T b, T c = -1234567, T d = -1234567) {
	T ans = a < b ? a : b;
	if(c != -1234567) ans = min(ans, c);
	if(d != -1234567) ans = min(ans, d);
	return ans;
}
template <class T> inline T gcd1(T a, T b) {
	if(a < b) swap(a, b);
	if(a % b == 0) return b;
	return gcd1(b, a % b);
}
template <class T> inline T lb(T num) {return num & (-num); }
inline int jud(double a, double b){
	if(abs1(a - b) < eps) return 0;
	if(a < b) return -1;
	return 1;
}
template <typename it, typename t1>
inline int find(t1 val, it a, int na, bool f_small = 1, bool f_lb = 1){
	if(na == 1) return 0;
	int be = 0, en = na - 1;
	if(*a <= *(a + na - 1)){
		if(f_lb == 0) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != 1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != -1) en = mid;
			else be = mid + 1;
		}
		if(f_small && jud(*(a + be), val) == 1 && be != 0) be--;
		if(!f_small && jud(*(a + be), val) == -1 && be != na - 1) be++;
	} else {
		if(f_lb) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != -1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != 1) en = mid;
			else be = mid + 1;
		}
		if(!f_small && jud(*(a + be), val) == -1 && be != 0) be--;
		if(f_small && jud(*(a + be), val) == 1 && be != na - 1) be++;
	}
	return be;
}
inline int bitnum(ull nValue){
    nValue = ((0xaaaaaaaaaaaaaaaaull & nValue)>>1) + (0x5555555555555555ull & nValue);
    nValue = ((0xccccccccccccccccull & nValue)>>2) + (0x3333333333333333ull & nValue);
    nValue = ((0xf0f0f0f0f0f0f0f0ull & nValue)>>4) + (0x0f0f0f0f0f0f0f0full & nValue);
    nValue = ((0xff00ff00ff00ff00ull & nValue)>>8) + (0x00ff00ff00ff00ffull & nValue);
    nValue = ((0xffff0000ffff0000ull & nValue)>>16) + (0x0000ffff0000ffffull & nValue);
    nValue = ((0xffffffff00000000ull & nValue)>>32) + (0x00000000ffffffffull & nValue);
	return nValue;
}
long long pow(long long n, long long m, long long mod = 0){
	long long ans = 1;
	long long k = n;
	while(m){
		if(m & 1) {
			ans *= k;
			if(mod) ans %= mod;
		}
		k *= k;
		if(mod) k %= mod;
		m >>= 1;
	}
	return ans;
}

const int maxn = 100100;
struct seg{
	int l, r, sum;
	seg(int l1 = -1, int r1 = -1, int sum1 = -1){ l = l1, r = r1, sum = sum1; }
	inline seg operator + (const seg &a){
		seg sg1;
		sg1.l = min(l, a.l); sg1.r = max(r, a.r); sg1.sum = sum + a.sum;
		return sg1;
	}
	inline bool operator < (const seg &a) const{
		return sum < a.sum;
	}
	inline bool operator == (const seg &a) const{
		return l == a.l && r == a.r && sum == a.sum;
	}
};
seg nul(-1, -1, -1);
inline seg max2(seg  a, seg b, seg c = nul, seg d = nul) {
	seg ans =  a < b ? b : a;
	if(!(c == nul)) ans = max2(ans, c);
	if(!(d == nul)) ans = max2(ans, d);
	return ans;
}
inline seg min2(seg a, seg b, seg c = nul, seg d = nul) {
	seg ans = a < b ? a : b;
	if(!(c == nul)) ans = min2(ans, c);
	if(!(d == nul)) ans = min2(ans, d);
	return ans;
}
struct segment_node{
	int be, en, add;
	seg maxv, sum, maxl, maxr, minv, minl, minr;
};
struct segment_tree{
	int l;
	segment_node tree[maxn * 4];

	inline int gleft(int no) {return no << 1;}
	inline int gright(int no) {return (no << 1) + 1;}
	inline int gfa(int no) {return no >> 1;}
	inline segment_tree(){ l = 0; }

	inline void update(segment_node  *no, segment_node  *l, segment_node  *r){
		no->sum = l->sum + r->sum;
		no->maxv = max2(l->maxv, r->maxv, l->maxr + r->maxl);
		no->maxl = max2(l->sum + r->maxl, l->maxl);
		no->maxr = max2(l->maxr + r->sum, r->maxr);
		no->minv = min2(l->minv, r->minv, l->minr + r->minl);
		no->minl = min2(l->sum + r->minl, l->minl);
		no->minr = min2(l->minr + r->sum, r->minr);
	}
	inline void reverse(segment_node  *no){
		no->sum.sum = -no->sum.sum;
		swap(no->maxv, no->minv);
		swap(no->minl, no->maxl);
		swap(no->minr, no->maxr);
		no->maxv.sum = -no->maxv.sum;
		no->minv.sum = -no->minv.sum;
		no->maxl.sum = -no->maxl.sum;
		no->minl.sum = -no->minl.sum;
		no->maxr.sum = -no->maxr.sum;
		no->minr.sum = -no->minr.sum;
	}
	void build(int no, int l, int r, int orig = 0, int *a = NULL){
		if(l == r){
			tree[no].be = tree[no].en = l;
			tree[no].add = 0;
			seg k1(l, l, a[l]);
			tree[no].minl = tree[no].minr = tree[no].minv =
			tree[no].maxl = tree[no].maxr = tree[no].maxv = k1;
			tree[no].sum = tree[no].maxv;
			return;
		}
		tree[no].be = l; tree[no].en = r;
		int mid = (l + r) / 2;
		build(gleft(no), l, mid, orig, a);
		build(gright(no), mid + 1, r, orig, a);
		update(tree + no, tree + gleft(no), tree + gright(no));
	}
	void relax(int no){
		tree[no].add = 0;
		if(tree[no].be != tree[no].en){
			tree[gleft(no)].add ^= 1; reverse(tree + gleft(no));
			tree[gright(no)].add ^= 1; reverse(tree + gright(no));
		}
	}
	void down(int l, int r, int no, int ranadd){
		if(tree[no].add) relax(no);
		if(l <= tree[no].be && r >= tree[no].en){
			tree[no].sum.sum = ranadd;
			tree[no].minl = tree[no].minr = tree[no].minv =
			tree[no].maxl = tree[no].maxr = tree[no].maxv = tree[no].sum;
			return;
		}
		int mid = (tree[no].be + tree[no].en) / 2;
		if(r >= tree[no].be && l <= mid) down(l, r, gleft(no), ranadd);
		if(r >= mid + 1 && l <= tree[no].en) down(l, r, gright(no), ranadd);
		update(tree + no, tree + gleft(no), tree + gright(no));
	}
	seg getmaxl(int l, int r, int no){
		if(tree[no].add) relax(no);
		if(l > r) return nul;
		if(l <= tree[no].be && r >= tree[no].en) return tree[no].maxl;
		int mid = (tree[no].be + tree[no].en) / 2;
		seg ans = getmaxl(l, r, gleft(no));
		if(r >= mid + 1 && l <= tree[no].en) ans = max2(ans, getmaxl(max1(l, mid + 1), min1(r, tree[no].en), gright(no)) + tree[gleft(no)].sum);
		return ans;
	}
	seg getmaxr(int l, int r, int no){
		if(tree[no].add) relax(no);
		if(l > r) return nul;
		if(l <= tree[no].be && r >= tree[no].en) return tree[no].maxr;
		int mid = (tree[no].be + tree[no].en) / 2;
		seg ans = getmaxr(l, r, gright(no));
		if(r >= tree[no].be && l <= mid) ans = max2(ans, getmaxr(max1(l, tree[no].be), min1(r, mid), gleft(no)) + tree[gright(no)].sum);
		return ans;
	}
	seg getmaxseg(int l, int r, int no){
		if(tree[no].add) relax(no);
		if(l > r) return nul;
		if(l <= tree[no].be && r >= tree[no].en) return tree[no].maxv;
		int mid = (tree[no].be + tree[no].en) / 2;
		seg ans = nul; int f = 0;
		if(r >= tree[no].be && l <= mid) ans = max2(ans, getmaxseg(max1(l, tree[no].be), min1(r, mid), gleft(no))), f++;
		if(r >= mid + 1 && l <= tree[no].en) ans = max2(ans, getmaxseg(max1(l, mid + 1), min1(r, tree[no].en), gright(no))), f++;
		if(f == 2)
			ans = max2(ans, getmaxr(max1(l, tree[no].be), min1(r, mid), gleft(no)) + getmaxl(max1(l, mid + 1), min1(r, tree[no].en), gright(no)));
		return ans;
	}
	void lineupd(int l, int r, int no){
		if(tree[no].add) relax(no);
		if(l <= tree[no].be && r >= tree[no].en){
			tree[no].add ^= 1;
			reverse(tree + no);
			return;
		}
		int mid = (tree[no].be + tree[no].en) / 2;
		if(r >= tree[no].be && l <= mid) lineupd(max1(l, tree[no].be), min1(r, mid), gleft(no));
		if(r >= mid + 1 && l <= tree[no].en) lineupd(max1(l, mid + 1), min1(r, tree[no].en), gright(no));
		update(tree + no, tree + gleft(no), tree + gright(no));
	}
};
segment_tree sgt;
int arr[maxn], n, nq;
seg res[21];

int main(){
//	freopen("input.txt","r", stdin);
	scanf("%d", &n);
	for(int i = 0; i < n; i++) scanf("%d", arr + i);
	sgt.build(1, 0, n - 1, 0, arr);
	scanf("%d", &nq);
	for(int i = 0; i < nq; i++) {
		int a, b, c, k;
		scanf("%d", &a);
		if(a){
			scanf("%d%d%d", &b, &c, &k); b--; c--;
			int ans = 0;
			for(int i = 0; i < k; i++){
				res[i] = sgt.getmaxseg(b, c, 1);
				if(res[i].sum <= 0) {
					k = i + 1;
					break;
				}
				ans += res[i].sum;
				sgt.lineupd(res[i].l, res[i].r, 1);
			}
			for(int i = 0; i < k; i++) sgt.lineupd(res[i].l, res[i].r, 1);
			printf("%d\n", ans);
		} else {
			scanf("%d%d", &b, &c); b--;
			sgt.down(b, b, 1, c);
		}
	}

	return 0;
}



