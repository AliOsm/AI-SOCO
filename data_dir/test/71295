#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#define N 202
#define M 32
using namespace std;
int n, k;
int p[M];
double dp[M][M][N];
bool vis[M][M][N];
double dfs (int a, int b, int t) {
	if (vis[a][b][t]) return dp[a][b][t];
	if (t == k) {
		return dp[a][b][t] = 1.0;
	} 
//	int tmp = 0;
	dp[a][b][t] = 0.0;
	vis[a][b][t] = true;
	double tot = (double)(n * (n + 1) / 2);
//	cout<<"tot="<<tot<<endl;
	for (int i = 0; i < b; ++i) {
		int choice;
		if (a < i) {
			choice = min(b - i, a + 1);
		} else {
			choice = min(b - a, i + 1);
		}
	//	tmp += choice;
		if (choice >= 0) {
			dp[a][b][t] += (double)choice / tot * dfs (i, b, t + 1);
		}
	}
//	if (a == 0 && b == 2 && t == 0) cout<<dp[a][b][t]<<endl;
	for (int i = a + 1; i < n; ++i) {
		int choice;
		if (b < i) {
			choice = min(n - i, b - a);
		} else {
			choice = min(n - b, i - a);
		}
	//	tmp += choice;
		if (choice >= 0) {
			dp[a][b][t] += (double)choice / tot * dfs (a, i, t + 1);
		}
	}
//	if (a == 0 && b == 2 && t == 0) cout<<tmp<<endl;
	for (int i = 0; i < n; ++i) {
		int choice;
		if (i <= a) {
			choice = min(i + 1, n - b);
		} else {
			choice = min(a + 1, n + a - b - i);
		}
	//	tmp += choice;
		if (choice >= 0) {
			dp[a][b][t] += (double)choice / tot * (1.0 - dfs (i, i + b - a, t + 1));
		}
	}
//	if (a == 0 && b == 2 && t == 0) cout<<tmp<<endl;
	double others = 0.0;
	others += (double)((a + 1) * a / 2);
	if (b - a - 1 >= 0) {
		others += (double)((b - a) * (b - a - 1) / 2);
	}
	if (n - b - 1 >= 0) {
		others += (double)((n - b) * (n - b - 1) / 2);
	}
//	if (a == 0 && b == 2 && t ==0) cout<<others<<endl;
	return dp[a][b][t] += others / tot * dfs(a, b, t + 1);
}
int main() {
	while (cin>>n>>k) {
		for (int i = 0; i < n; ++i) {
			scanf("%d", p + i);
		}
		memset(vis, false, sizeof(vis));
		double ans = 0.0;
		for (int i = 0; i < n; ++i) {
			for (int j = i + 1; j < n; ++j) {
				dfs (i, j, 0);
				if (p[i] > p[j]) {
					ans += dp[i][j][0];
				} else {
					ans += (1.0 - dp[i][j][0]);
				}
			}
		}
//		cout<<"x="<<dp[1][2][0]<<endl;
		printf("%.10lf\n", ans);
	}
	return 0;
}
