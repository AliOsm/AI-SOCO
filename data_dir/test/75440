#include "bits/stdc++.h"

using namespace std;
using LL = long long;

constexpr int N = 2e5 + 5;

vector< int> conn[N];
LL val[N], e[N];
int degree[N], parent[N];
int del[N];
bitset< N> seen;

void dfs(int x, int prt) {
    seen[x] = true;
    parent[x] = prt;

    for (int &b : conn[x]) {
        if (seen[b]) continue;
        dfs(b, x);
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n, m;
    cin >> n >> m;

    for (int i = 1; i <= n; i++) cin >> val[i];

    for (int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        conn[a].push_back(b);
        conn[b].push_back(a);
        degree[a]++; degree[b]++;
    }


    int s;
    cin >> s;

    dfs(s, 0);
    
    queue< int> q;
    for (int i = 1; i <= n; i++) if (i != s && degree[i] == 1) q.push(i);

    while (!q.empty()) {
        int a = q.front(); q.pop();
        del[a] = 1;
        int b = parent[a];
        e[b] = max(e[b], e[a] + val[a]);
        degree[b]--;
        if (b != s && degree[b] == 1) q.push(b);
    }

    LL mx = 0;
    LL ans = 0;
    for (int i = 1; i <= n; i++) {
        if (del[i]) continue;
        if (!seen[i]) continue;
        ans += val[i];
        mx = max(mx, e[i]);
    }

    cout << ans + mx << endl;
}