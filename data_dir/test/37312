#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma comment(linker, "/STACK:16777216")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifdef _offline
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // _offline
}

struct node {
    node *l, *r;
    int val;

    node() : l(nullptr), r(nullptr), val(0) {};
};

const int MAXN = 4e5 + 100;
int sz[MAXN], mx[MAXN], ans[MAXN];
vector<int> g[MAXN];
node *r[MAXN];
vector<int> *v[MAXN];
int n;

void update(node *&root, int tl, int tr, int pos, int value) {
    if (tl + 1 == tr) {
        root->val += value;
        return;
    }
    int tm = (tl + tr) >> 1;
    if (pos < tm) {
        if (!root->l) {
            root->l = new node();
        }
        update(root->l, tl, tm, pos, value);
    }
    else {
        if (!root->r) {
            root->r = new node();
        }
        update(root->r, tm, tr, pos, value);
    }
    root->val = (root->l ? root->l->val : 0) + (root->r ? root->r->val : 0);
}

int getsum(node *&root, int tl, int tr, int l, int r) {
    if (tl >= r || tr <= l) {
        return 0;
    }
    if (tl >= l && tr <= r) {
        return root->val;
    }
    int tm = (tl + tr) >> 1;
    int a = (root->l ? getsum(root->l, tl, tm, l, r) : 0);
    int b = (root->r ? getsum(root->r, tm, tr, l, r) : 0);
    return a + b;
}

void merge(int a, int b) {
    if (v[a]->size() < v[b]->size()) {
        swap(r[a], r[b]);
        swap(v[a], v[b]);
    }
    for (int i : *v[b]) {
        update(r[a], 0, n, i, 1);
        v[a]->push_back(i);
    }
}

void dfs1(int u, int p) {
    sz[u] = 1;
    for (int to : g[u]) {
        if (to == p) {
            continue;
        }
        dfs1(to, u);
        sz[u] += sz[to];
        if (mx[u] == 0 || sz[mx[u]] < sz[to]) {
            mx[u] = to;
        }
    }
}

void dfs2(int u, int p) {
    update(r[MAXN - 1], 0, n, sz[u] - 1, -1);
    for (int to : g[u]) {
        if (to == p) {
            continue;
        }
        update(r[MAXN - 2], 0, n, n - sz[to] - 1, 1);
        dfs2(to, u);
        update(r[MAXN - 2], 0, n, n - sz[to] - 1, -1);
    }
    if (sz[u] * 2 >= n) {
        if (mx[u] == 0 || sz[mx[u]] <= n / 2) {
            ans[u] = 1;
        }
        else {
            int L = sz[mx[u]] - n / 2;
            int R = n / 2;
            int sum = getsum(r[mx[u]], 0, n, L - 1, R);
            ans[u] = (sum > 0);
        }
    }
    for (int to : g[u]) {
        if (to == p) {
            continue;
        }
        merge(u, to);
    }
    if (sz[u] * 2 < n) {
        int L = (n + 1) / 2 - sz[u];
        int R = n / 2;
        ans[u] = 0;
        if (L <= R) {
            int a = getsum(r[MAXN - 1], 0, n, L - 1, R);
            int b = getsum(r[u], 0, n, L - 1, R);
            int c = getsum(r[MAXN - 2], 0, n, L - 1, R);
            int sum = a - b;
            ans[u] = (sum > 0 || c > 0);
        }
    }
    update(r[u], 0, n, sz[u] - 1, 1);
    v[u]->push_back(sz[u] - 1);
    update(r[MAXN - 1], 0, n, sz[u] - 1, 1);
}

signed main() {
    FAST_IO();
    cin >> n;
    for (int i = 0; i < n - 1; ++i) {
        int a, b;
        cin >> a >> b;
        g[a].push_back(b);
        g[b].push_back(a);
    }
    for (int i = 1; i <= n; ++i) {
        r[i] = new node();
        v[i] = new vector<int>();
    }
    dfs1(1, -1);
    r[MAXN - 1] = new node();
    r[MAXN - 2] = new node();
    for (int i = 1; i <= n; ++i) {
        update(r[MAXN - 1], 0, n, sz[i] - 1, 1);
    }
    dfs2(1, -1);
    for (int i = 1; i <= n; ++i) {
        cout << ans[i] << ' ';
    }
}
