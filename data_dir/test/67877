#include <bits/stdc++.h>
#include <bits/extc++.h>
#define pb push_back
#define all(x) begin(x), end(x)
#define sz(x) int(x.size())

using namespace std;
using namespace __gnu_pbds;
using ll = long long int;
const int MOD = 1e9 + 7;
template<class T>
using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

int main()
{
	ios::sync_with_stdio(0); cin.tie(0);
	int n, m; cin >> n >> m;
	ll in[n] = {0}, out[n] = {0}, dif[n];
	for (int i = 0; i < m; ++i)
	{
		int u, v, w; cin >> u >> v >> w;
		in[--v] += w;
		out[--u] += w;
	}
	set<array<ll, 2>> cur;
	for (int i = 0; i < n; ++i)
	{
		dif[i] = in[i] - out[i];
		if (dif[i] > 0) {cur.insert({dif[i], i});}
	}
	vector<array<ll, 3>> ans;
	for (int i = 0; i < n; ++i)
	{
		vector<array<ll, 2>> changes;
		while (dif[i] < 0)
		{
			auto [w, v] = *cur.rbegin();
			cur.erase({w, v});
			ll ch = min(-dif[i], w);
			w -= ch; dif[i] += ch;
			changes.pb({w, v});
			ans.pb({i, v, ch});
		}
		for (auto it : changes)
			cur.insert(it);
	}
	cout << ans.size() << '\n';
	for (auto [x, y, z] : ans)
		cout << x+1 << ' ' << y+1 << ' ' << z << '\n';
}

// (a, b, x) and (b, a, y) -> (a, b, 0); (b, a, y-x); (b, b, +x); (a, a, +x)
// (a, b, x) and (b, c, y) -> (a, b, 0); (b, c, y-x); (b, b, +x); (a, c, +x)
// (a, b, x) and (a, c, y) -> (a, b, 0); (a, c, y-x); (a, b, x); (a, c, y)