#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define MAX ((int)(1e9))
#define pi (1.0*acos(-1))
#define M ((int)(998244353))
#define NN ((ll)(305))
#define N ((int)(1e7+7))
#define eps 0
#define log 20


using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef unsigned long long ull;


typedef tree < ll,  null_type,  less < ll >,  rb_tree_tag,  tree_order_statistics_node_update > o_set;

vector < int > v;

int gre[N], mask[N], pos[N], a[N];

bool vis[N];

int main()
{
    int n;
    scanf("%d",&n);
    for(int i = 0; i<n; i++) scanf("%d",&a[i]);
    sort(a,a+n);
    vis[0] = 1;
    mask[0] = 0;
    pos[0] = 0;
    int cnt = 1, mx = 0, x = 0, id = 0;
    for(int i = 0; i<n; i++){
        if(vis[a[i]]) continue;
        int m = 1<<id;
        cnt++;
        mx = max(mx,a[i]);
        vis[a[i]] = 1;
        int l = (int)v.size();
        for(int j = 0; j<l; j++){
            int b = v[j]^a[i];
            if(vis[b]==0){
                cnt++;
                mx = max(mx,b);
                vis[b] = 1;
                v.push_back(b);
                mask[b] = mask[v[j]]|m;
                pos[mask[b]] = b;
            }
        }

        v.push_back(a[i]);
        mask[a[i]] = m;
        pos[m] = a[i];
        id++;
        if(mx+1==cnt && !(mx&(mx+1))) x = max(x,mx);
    }

    gre[0] = 0;
    gre[1] = 1;
    for(int i = 0; i<19; i++){
        int l = 1<<(i+1), b = l-1;
        for(int j = 0;b-j>=0;j++) gre[l+j] = gre[b-j]|l;
    }

    //for(int i = 0; i<5; i++) cout<<gre[i]<<endl;

    printf("%d\n",__builtin_popcount(x));
    for(int i = 0; i<=x; i++){
        printf("%d ",pos[gre[i]]);
    }
    printf("\n");
    return 0;
}
