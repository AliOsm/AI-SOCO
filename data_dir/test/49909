#include <bits/stdc++.h>
//#include <fcntl.h>

using std::max; using std::swap; using std::abs; using std::priority_queue; using std::queue; using std::bitset; using std::make_tuple; 
using std::istream; using std::ostream; using std::fixed; using std::greater; using std::tuple; using std::tie; using std::make_pair;
using std::cout; using std::cerr; using std::endl; using std::lower_bound; using std::upper_bound; using std::deque; using std::min; 
using std::map; using std::string; using std::fill; using std::copy; using std::sort; using std::unique; using std::unordered_set; 
using std::multiset; using std::nth_element; using std::min_element; using std::max_element; using std::vector; using std::set; 
using std::unordered_map; using std::pair; using std::next_permutation; using std::reverse; using std::rotate; using std::cin; 
using std::iota; using std::function; using std::shuffle;

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;

int const INF = 100 + (int) 1e9;
ll const INFL = 100 + (ll) 1e18;
ld const PI = 3.141592653589793238462643L;
std::mt19937 mt19937(960172);

ll rnd(ll x, ll y) { static auto gen = std::bind(std::uniform_int_distribution<ll>(), mt19937); return gen() % (y - x + 1) + x; }
bool is_prime(ll x) { if (x <= 1) return 0; for (ll y = 2; y * y <= x; ++y) if (x % y == 0) return 0; return 1; }
ll sqr(int a) { return (ll) a * a; } ld sqr(ld a) { return a * a; } ll sqr(ll a) { return a * a; }
ll gcd(ll a, ll b) { while (b > 0) { ll t = a % b; a = b; b = t; } return a; }

int const mod = 1000000007;

void add(int& a, int b) {
    a += b;
    if (a >= mod) a -= mod;
}

int prod(int a, int b) {
    return (ll) a * b % mod;
}

int dp[220][1010];
int newdp[220][1010];

void solve() {
    
    int n, k;
    scanf("%d%d", &n, &k);
    
    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        scanf("%d", &a[i]);
    }
    
    sort(a.begin(), a.end());
    
    dp[0][0] = 1;
    int last = a[0];
    
    for (int i = 0; i < n; ++i) {
        int x = a[i];
        for (int g = 0; g <= i; ++g) {
            fill(newdp[g], newdp[g] + k + 1, 0);
        }
        for (int g = 0; g <= i; ++g) {
            for (int dis = 0; dis <= k; ++dis) {
                int newdis = dis + g * (x - last);
                if (newdis <= k) {
                    add(newdp[g][newdis], prod(g + 1, dp[g][dis]));
                    if (g < n) {
                        add(newdp[g + 1][newdis], dp[g][dis]);
                    }
                    if (g > 0) {
                        add(newdp[g - 1][newdis], prod(g, dp[g][dis]));
                    }
                }
            }
        }
        for (int g = 0; g <= i + 1; ++g) {
            copy(newdp[g], newdp[g] + k + 1, dp[g]);
        }
        last = x;
    }
    
    int ans = 0;
    for (int dis = 0; dis <= k; ++dis) {
        add(ans, dp[0][dis]);
    }
    cout << ans << '\n';
}


int main() {
    
    //freopen("", "r", stdin);
    //freopen("", "w", stdout);
    
    cout.precision(15);
    cout << fixed;
    cerr.precision(6);
    cerr << fixed;
    
    solve();
    
#ifdef LOCAL
    cerr << "time: " << (ll) clock() * 1000 / CLOCKS_PER_SEC << " ms" << endl;
#endif
}