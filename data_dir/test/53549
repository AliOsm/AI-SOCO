#include <bits/stdc++.h>
#include <cctype>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, std::less<>, rb_tree_tag, tree_order_statistics_node_update>;
using namespace std;
typedef long long int64;
typedef unsigned long long uint64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//*/998244353;
const int base = 2187;
const double eps = 1e-9;
const int N = 300'000;
const int LOGN = 19;

int n, m, k;

void solve(int) {
  cin >> n;
  vector<int> a(n), b(n);
  for (int& x : a) {
    cin >> x;
    --x;
  }
  for (int& x : b) {
    cin >> x;
  }
  vector<vector<int>> divs(n + 1);
  for (int i = 1; i <= n; ++i) {
    for (int j = i; j <= n; j += i) {
      divs[j].push_back(i);
    }
  }
  int ans = n;
  for (int i = 0; i < n; ++i) {
    if (a[i] == -1) {
      continue;
    }
    vector<int> loop;
    for (int j = i; a[j] != -1; ) {
      loop.push_back(j);
      j = a[j];
      a[loop.back()] = -1;
    }
    for (int d : divs[loop.size()]) {
      for (int j = 0; j < d; ++j) {
        char ok = 1;
        for (int q = j + d; q < (int)loop.size(); ok &= b[loop[j]] == b[loop[q]], q += d);
        if (ok) {
          ans = min(ans, d);
          break;
        }
      }
    }
  }
  cout << ans << '\n';
}

void precalc() {
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  precalc();
  int test = 1;
  cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i) {
    solve(i);
  }
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}

