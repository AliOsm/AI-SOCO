#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <cmath>
#include <ctime>
#include <string>
#include <cstdlib>
#include <algorithm>
using namespace std;
#define read freopen("C:\\Users\\USER\\Desktop\\in.txt", "r", stdin)
#define write freopen("C:\\Users\\USER\\Desktop\\out.txt", "a", stdout)
#define inf 1<<30
#define pii pair<int, int>
#define ff first
#define ss second
#define in(a) scanf("%d", &a)
#define ins(a) scanf("%s", a)
#define in2(a, b) scanf("%d%d", &a, &b)
#define in3(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define pn printf("\n");
#define pcs(a) printf("Case %d: ", a)
#define pr(a) printf("%d\n", a)
#define pr(a) printf("%d\n", a)
#define prs(a) printf("%d ", a)
#define pr2(a, b) printf("%d %d\n", a, b)
#define pr3(a, b ,c) printf("%d %d %d\n", a, b, c)
#define vi vector<int>
#define msi map<string, int>
#define mii map<int, int>
#define si set<int>
#define cl clear()
#define sz size()
#define pb push_back
#define MAX(A,B) (((A)>(B))?(A):(B))
#define MIN(A,B) (((A)<(B))?(A):(B))
#define all(X) (X).begin(), (X).end ()
#define iter(it, X) for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(int n, int pos) {return (bool) (n & (1<<pos));}
//int on(int n, int pos) {return n | (1<<pos);}
//int off(int n, int pos) {return n & ~(1<<pos);}
//bool operator < (const data &d) const{return cost<d.cost;}
typedef long long LL;
struct data {
    int u, v;
    data(int x, int y) {u=x; v=y;}
};
typedef struct data sd;
int par[1000010];
vector<sd>prev, repl;
vi A[10010];
int visited[100010];
void set_par(int n)
{
    for (int i=0; i<=n; i++) {par[i]=i; visited[i]=false;}
}
int find_rep(int u)
{
    return par[u]=par[u]==u?u:find_rep(par[u]);
}
bool _union(int x, int y)
{
    int u=find_rep(x), v=find_rep(y);
    if (u==v) return false;

    par[u]=v;
    return true;
}
void dfs(int u)
{
    int i, m=A[u].sz, v;
    visited[u]=true;
    for (i=0; i<m; i++)
    {
        v=A[u][i];
        if (!visited[v])
            dfs(v);
    }
}
int main()
{
    //use %I64d
   // read;
    vi temp;
    int i, j, k, n, e;
    in(n);
    set_par(n);
    for (i=0; i<n-1; i++)
    {
        in2(j, k);
        A[j].pb(k);
        A[k].pb(j);

        if (!_union(j, k)) prev.pb(data(j, k));
    }

    for (i=1; i<=n; i++)
    {
        if (!visited[i])
        {
            temp.pb(i);
            dfs(i);
        }
    }

    pr(temp.sz-1);

    if (temp.sz==1) return 0;

    for (i=0; i<temp.sz-1; i++)
    {
        repl.pb(data(temp[i], temp[i+1]));
    }

    for (i=0; i<prev.sz; i++)
    {
        prs(prev[i].u);
        pr3(prev[i].v, repl[i].u, repl[i].v);
    }

//file?
return 0;
}
