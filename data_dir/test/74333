#include <bits/stdc++.h>
using ll = long long;
using namespace std;

int main() {
  cin.tie(0);
  cin.sync_with_stdio(0);

  int n, m, k;
  cin >> n >> m >> k;

  vector<int> a(n), b(m), c(k), d;
  d.reserve(n + m + k);

  for (auto& x : a) cin >> x;
  for (auto& x : b) cin >> x;
  for (auto& x : c) cin >> x;

  copy(a.begin(), a.end(), back_inserter(d));
  copy(b.begin(), b.end(), back_inserter(d));
  copy(c.begin(), c.end(), back_inserter(d));

  sort(a.begin(), a.end());
  sort(b.begin(), b.end());
  sort(c.begin(), c.end());
  sort(d.begin(), d.end());

  d.resize(unique(d.begin(), d.end()) - d.begin());
  for (auto& x : a) x = lower_bound(d.begin(), d.end(), x) - d.begin();
  for (auto& x : b) x = lower_bound(d.begin(), d.end(), x) - d.begin();
  for (auto& x : c) x = lower_bound(d.begin(), d.end(), x) - d.begin();

  int total = n + m + k;
  int ans = total - max(n, max(m, k));  // one gets all

  // [1] [2] []
  {
    int adx = 0;
    int bdx = 0;
    int cdx = 0;
    for (int i = 0; i < total; ++i) {
      while (adx < n && a[adx] <= i) ++adx;
      while (bdx < m && b[bdx] <= i) ++bdx;
      while (cdx < k && c[cdx] <= i) ++cdx;
      int steps = (n - adx) + (bdx) + (k);
      ans = min(ans, steps);
    }
  }

  // [1] [] [2]
  {
    int adx = 0;
    int bdx = 0;
    int cdx = 0;
    for (int i = 0; i < total; ++i) {
      while (adx < n && a[adx] <= i) ++adx;
      while (bdx < m && b[bdx] <= i) ++bdx;
      while (cdx < k && c[cdx] <= i) ++cdx;
      int steps = (n - adx) + (m) + (cdx);
      ans = min(ans, steps);
    }
  }

  // [] [1] [2]
  {
    int adx = 0;
    int bdx = 0;
    int cdx = 0;
    for (int i = 0; i < total; ++i) {
      while (adx < n && a[adx] <= i) ++adx;
      while (bdx < m && b[bdx] <= i) ++bdx;
      while (cdx < k && c[cdx] <= i) ++cdx;
      int steps = (n) + (m - bdx) + (cdx);
      ans = min(ans, steps);
    }
  }
  // [1] [2] [3]
  vector<int> z1(total);
  vector<int> z2(total);
  {
    int adx = 0;
    int bdx = 0;
    int cdx = 0;
    for (int i = 0; i < total; ++i) {
      while (adx < n && a[adx] <= i) ++adx;
      while (bdx < m && b[bdx] <= i) ++bdx;
      while (cdx < k && c[cdx] <= i) ++cdx;
      z1[i] = (n - adx) + bdx;
    }

    adx = 0;
    bdx = 0;
    cdx = 0;
    int mn = 10 * total;
    for (int i = 0; i < total; ++i) {
      while (adx < n && a[adx] <= i) ++adx;
      while (bdx < m && b[bdx] <= i) ++bdx;
      while (cdx < k && c[cdx] <= i) ++cdx;
      mn = min(mn, z1[i]);
      if (i < 1) continue;
      z2[i] = mn;
      z2[i] += cdx + (m - bdx);
      ans = min(ans, z2[i]);
    }
  }

  cout << ans;
}