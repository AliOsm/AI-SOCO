#include<bits/stdc++.h>
using namespace std;

#define ll             long long
#define LL             long long
#define pii            pair<int, int>
#define pll            pair<ll, ll>
#define pil            pair<int, ll>
#define pli            pair<ll, int>
#define vi             vector<int>
#define vl             vector<ll>
#define vii            vector<pii>
#define vll            vector<pll>
#define vil            vector<pil>
#define vli            vector<pli>
#define pb             push_back
#define ppb            pop_back
#define mp             make_pair
#define ff             first
#define ss             second
#define TN             typename
#define all(v)         v.begin(), v.end()
#define fill(a, b)     memset(a, b, sizeof a)
#define endl           '\n'

template <TN T> T gcd(T a, T b) {
    return !b ? a : gcd(b, a % b);
}

template <TN T> T lcm(T a, T b) {
    return a * (b / gcd(a, b));
}

template <TN T> T sqr(T a) {
    return a * a;
}

template <TN T> T cube(T a) {
    return a * a * a;
}

template <TN T> inline void smin(T &a, T b) {
    a = a < b ? a : b;
}

template <TN T> inline void smax(T &a, T b) {
    a = a > b ? a : b;
}

int in() {
    int n;
    scanf("%d", &n);
    return n;
}

ll Lin() {
    ll n;
    scanf("%lld", &n);
    return n;
}

double Din() {
    double n;
    scanf("%lf", &n);
    return n;
}

const ll inf = (ll)1e17;
const ll mod = (ll)1e9 + 7;
const int N = 3e5 + 5;

struct CHT_DEC_MIN {
    vl m, b, d;
    int ptr;
    CHT_DEC_MAX() {
        ptr = 0;
    }

    bool bad(int f1, int f2, int f3) {
        return 1.0 * (b[f2] - b[f1]) * (m[f1] - m[f3]) >= 1.0 * (b[f3] - b[f1]) * (m[f1] - m[f2]);
    }

    void add(ll M, ll B, ll D) {
        m.pb(M), b.pb(B), d.pb(D);
        int sz = (int)m.size();
        while(sz >= 3 && bad(sz - 3, sz - 2, sz - 1)) {
            m.erase(m.end() - 2);
            b.erase(b.end() - 2);
            d.erase(d.end() - 2);
            sz--;
        }
    }

    ll f(int idx, ll X) {
        return m[idx] * X + b[idx];
    }

    pll query(ll x) {
        if(ptr >= (int)m.size()) ptr = (int)m.size() - 1;
        while(ptr < m.size() - 1 && f(ptr, x) > f(ptr+1, x)) ptr++;
        return {f(ptr, x), d[ptr] + 1};
    }
};

ll a[N];

pll call(int n, ll C) {
    CHT_DEC_MIN dp;
    dp.add(-a[1], 0LL, 0LL);
    pll cur = {inf, inf};
    for(int i = 1; i <= n; i++) {
        cur = dp.query(1LL);
        cur.ff = cur.ff + a[i] + C;
        dp.add(-a[i + 1], cur.ff, cur.ss);
    }
    return cur;
}

ll bs(int n, int k) {
    ll low = 0LL, high = a[n];
    ll ans = a[n];
    while(low <= high) {
        ll mid = (low + high) / 2;
        if(call(n, mid).ss <= k) {
            ans = mid;
            high = mid - 1;
        } else low = mid + 1;
    }
    pll x = call(n, ans);
    return x.ff - (ll)k * ans;
}

int solve() {
    int n = in(), k = in();
    for(int i = 1; i <= n; i++) {
        a[i] = Lin();
    }
    printf("%lld\n", bs(n, k));
    return 0;
}

int main() {
    int test = 1, tc = 0;
    //scanf("%d", &test);
    while (test--) {
        //printf("Case %d: ", ++tc);
        solve();
    }
    return 0;
}











