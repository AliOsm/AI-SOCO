// https://codeforces.com/problemset/problem/855/E
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

long long dp[12][61][1024][2];

long long solve(long long X, int base) {
    if(X == 0) return 0;
    long long Y = X;
    vector<int> digits;
    while(Y) {
        digits.push_back(Y%base);
        Y /= base;
    }
    reverse(digits.begin(), digits.end());
    long long ans = 0;
    for(int len = 1; len < (int)digits.size(); len++) {
        ans += dp[base][len][0][0];
    }
    int mask = 0;
    int Len = (int)digits.size();
    for(int mis_match = 0; mis_match < (int)digits.size(); mis_match++) {
        int d = digits[mis_match];
        int l = (mis_match > 0 ? 0 : 1);
        for(int place = l; place < d; place++) {
            mask ^= (1<<place);
            ans += dp[base][Len-mis_match-1][mask][1];
            mask ^= (1<<place);
        }
        mask ^= (1<<d);
    }
    return ans;
}

string in_binary(long long x, int base) {
    string res;
    while(x > 0) {
        res.push_back('0' + x%base);
        x /= base;
    }
    reverse(res.begin(), res.end());
    return res;
}


int main() {

//    freopen("in.txt", "r", stdin);
    ios::sync_with_stdio(0);
    cin.tie(0);

    for(int base = 2; base <= 10; base++) {
        dp[base][0][0][0] = 1;
        dp[base][0][0][1] = 1;
        for(int len = 1; len <= 60; len++) {
            int l = 0, r = base-1;
            if(len == 1) l = 1;
            for(int mask = 0; mask < (1<<base); mask++) {
                for(int digit = 0; digit <= r; digit++) {
                    if(digit >= l) dp[base][len][mask][0] += dp[base][len-1][mask^(1<<digit)][0];
                    dp[base][len][mask][1] += dp[base][len-1][mask^(1<<digit)][1];
                }
            }
        }
    }

    int q;
    cin >> q;
    while(q--) {
        long long l, r;
        int base;
        cin >> base >> l >> r;
        cout << solve(r + 1, base) - solve(l, base) << "\n";
    }
    return 0;
}

