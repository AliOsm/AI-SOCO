
// In the name of God
#include <bits/stdc++.h>

using namespace std;
#define Size(x) ((int)(x).size())
#define pb push_back
typedef long long ll;
typedef long double ld;
typedef pair<int,int>pii;
const int INF = 1e9 + 10;
const int MN = 2e2+5;

string M[MN];
map<string ,int>match;
string s[MN];
int n;
bool mk[MN];
int ans;

ifstream fin("input.txt");
ofstream fout("output.txt");

void reval(int v , vector<string>&vec)
{
	string t;
	for(int i=0;i<Size(s[v]);++i){
		t += s[v][i];
		vec.pb(t);
		t.clear();
	}
	for(int i=0;i<Size(s[v]);++i)
		for(int j=i+1;j<Size(s[v]);++j){
			t += s[v][i]; t += s[v][j];
			vec.pb(t);
			t.clear();
		}
	for(int i=0;i<Size(s[v]);++i)
		for(int j=i+1;j<Size(s[v]);++j)
			for(int l=j+1;l<Size(s[v]);++l){
				t += s[v][i]; t += s[v][j]; t += s[v][l];
				vec.pb(t);
				t = "";
			}
	for(int i=0;i<Size(s[v]);++i)
		for(int j=i+1;j<Size(s[v]);++j)
			for(int l=j+1;l<Size(s[v]);++l)
				for(int k=l+1;k<Size(s[v]);++k){
					t += s[v][i]; t += s[v][j]; t += s[v][l]; t+=s[v][k];
					vec.pb(t);
					t.clear();
				}
}

bool dfs(int v)
{
	mk[v] = true;
	vector<string>vec;
	reval(v,vec);
	for(string x:vec){
		if(match[x]==0 || (!mk[match[x]] && dfs(match[x]))){
			match[x] = v;
			M[v] = x;
			return true;
		}
	}
	return false;
}

int main()
{
	ios_base :: sync_with_stdio(false) ,cin.tie(0) , cout.tie(0);
	fin >> n;
	for(int i=1;i<=n;++i) fin >> s[i];
	while(1){
		memset(mk , 0 , sizeof mk);
		int sv = ans;
		for(int i=1;i<=n;++i) if(!mk[i] && M[i].empty()) ans += dfs(i);
		if(sv == ans) break;
	}
	if(ans < n) return fout << -1 << '\n' , 0;
	for(int i=1;i<=n;++i) fout << M[i] << '\n';
	return 0;
}

