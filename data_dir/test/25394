#include <bits/stdc++.h>

using namespace std;

const int N = 1e3 + 5;
int n , mx;
int arr[N] , memo[N][1 << 8];
vector<int> adj[9];
int sh[N];

int solve (int i , int mask) {
    if (i == n)
         return mask == (1 << 8) - 1 || mx == 1 ? 0 : -1e9;
    
    int &ret = memo[i][mask];
    if (~ret)
        return ret;
        
    ret = solve(i + 1 , mask);
    
    if (!(mask & (1 << arr[i])) && adj[arr[i]].size() - sh[i] >= mx) 
        ret = max(ret , mx + solve(adj[arr[i]][sh[i] + mx - 1] + 1 , mask | (1 << arr[i])));
        
    if (mx != 1 && !(mask & (1 << arr[i])) && adj[arr[i]].size() - sh[i] >= mx - 1) 
        ret = max(ret , mx - 1 + solve(adj[arr[i]][sh[i] + mx - 2] + 1 , mask | (1 << arr[i])));
    
    return ret;
}

int main() {
    scanf("%d" , &n);
    for (int i = 0 ;i < n ;i++) {
        scanf("%d" , arr + i);
        arr[i]--;
        sh[i] = adj[arr[i]].size();
        adj[arr[i]].push_back(i);
    }
    
    for (mx = 130 ; mx >= 1 ;mx--) {
          memset(memo , -1 , sizeof memo);
          int ans = solve(0 , 0);
          if (ans >= 0) {
              printf("%d" , ans);
              return 0;
          }
    }
    
}
