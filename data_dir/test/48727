#include <bits/stdc++.h>
using namespace std;

struct node {
	int sz;
	int adj[2];
	node() {
		sz = 0;
		adj[0] = adj[1] = -1;
	}
};

vector<node> g;
inline string tobin(int n) {
	string ret = "";
	while (n) {
		ret += n % 2 + '0';
		n /= 2;
	}
	while (ret.size() < 30) {
		ret += '0';
	}
	reverse(ret.begin(), ret.end());
	return ret;
}
void add(int x) {
	int cur = 0;
	string s = tobin(x);
	for (int i = 0; s[i]; i++) {
		int d = s[i] - '0';
		if (g[cur].adj[d] == -1) {
			g[cur].adj[d] = g.size();
			g.push_back(node());
		}
		cur = g[cur].adj[d];
		g[cur].sz++;
	}
}
void rem(int x) {
	int cur = 0;
	string s = tobin(x);
	for (int i = 0; s[i]; i++) {
		int d = s[i] - '0';
		cur = g[cur].adj[d];
		g[cur].sz--;
	}
}

int get(string p, string l) {
	int cur = 0, ret = 0;
	for (int i = 0; p[i]; i++) {
		if (p[i] == '1' && l[i] == '1') {
			int temp = g[cur].adj[1];
			if (temp != -1) ret += g[temp].sz;
		} else if (p[i] == '0' && l[i] == '1') {
			int temp = g[cur].adj[0];
			if (temp != -1) ret += g[temp].sz;
		}
		int d = (p[i] - '0') ^ (l[i] - '0');
		cur = g[cur].adj[d];
		if (cur == -1) return ret;
	}
	return ret;
}

int main() {

//	freopen("readin.txt", "r", stdin);

	int q;
	scanf("%d", &q);
	g.push_back(node());
	while (q--) {

		int t, x;
		scanf("%d%d", &t, &x);
		if (t == 1) add(x);
		if (t == 2) rem(x);
		if (t == 3) {
			int l;
			scanf("%d", &l);
			printf("%d\n", get(tobin(x), tobin(l)));
		}
	}

	return 0;
}

