#include<bits/stdc++.h>
#include<ext/numeric>
using namespace std;
using namespace __gnu_cxx;

#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)  (int)v.size()
#define UNVISITED -1
#define CLR(a,v) memset(a,v,sizeof a)
#define PC(x) __builtin_popcount(x)

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> pll;
typedef unsigned long long ull;

int countDig(ll x) {
	int ret = 0;
	while (x) {
		++ret;
		x /= 10;
	}
	return ret;
}
int firDig(ll x) {
	while (x >= 10)
		x /= 10;
	return x;
}
int lastDig(ll x) {
	return x % 10;
}
ll numInMiddle(ll x) {
	x /= 10;
	ll ret = 0;
	ll mul = 1;
	while (x > 10) {
		ret += (mul * (x % 10));
		mul *= 10;
		x /= 10;
	}
	return ret;
}

int dx[] = { 0, 0, 1, -1, -1, -1, 1, 1 };
int dy[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "rt", stdin);
//	freopen("out.txt", "wt", stdout);
#endif
	ll l, r;
	scanf("%lld%lld", &l, &r);
	int lb = countDig(l), ub = countDig(r);
	if (lb == ub) {

	}
	ll ans = 0;
	ll x = 1;
	for (int i = 3; i <= lb + 1; ++i)
		x *= 10;
	for (int i = lb + 1; i <= ub - 1; ++i) {
		ans += (9ll * x);
		x *= 10;
	}
	int firDigL = firDig(l), lastDigL = lastDig(l), firDigR = firDig(r),
			lastDigR = lastDig(r);
	x = 1;
	for (int i = 3; i <= lb; ++i)
		x *= 10;
	if (lb == ub) {
		ll ans1 = ((9 - firDigL) * x);
		ll m = numInMiddle(l);
		if (lb > 2)
			ans1 += (x - m);
		if (firDigL >= lastDigL)
			++ans1;
		ll ans2 = ((9 - firDigR) * x);
		m = numInMiddle(r);
		if (ub > 2)
			ans2 += (x - m);
		if (firDigR >= lastDigR)
			ans2++;
		printf("%lld", ans1 - ans2 + (firDigR == lastDigR));
		return 0;
	}
	ans += ((9 - firDigL) * x);
	ll m = numInMiddle(l);
	if (lb > 2)
		ans += (x - m - 1);
	if (firDigL >= lastDigL)
		++ans;
	x = 1;
	for (int i = 3; i <= ub; ++i)
		x *= 10;
	ans += ((firDigR - 1) * x);
	m = numInMiddle(r);
	if (ub > 2)
		ans += m;
	if (firDigR <= lastDigR)
		++ans;
	printf("%lld", ans);
}

