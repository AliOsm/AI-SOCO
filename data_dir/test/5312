#include<bits/stdc++.h>

#define int long long
using namespace std;
const int maxn = (int) 2e5 + 1;
int a[maxn], n, m, t[4 * maxn], lz[4 * maxn];
void build(int v, int tl, int tr){
	if(tl == tr){
		t[v] = a[tl];
		return;
	}
	else{
		int tm = (tl + tr) / 2;
		build(v + v, tl, tm);
		build(v + v + 1, tm + 1, tr);
		t[v] = min(t[v + v], t[v + v + 1]);
	}
}
inline void push(int v, int tl, int tr){
	if(lz[v] != 0){
		t[v] += lz[v];
		if(tl != tr){
			lz[v * 2 + 1] += lz[v];
			lz[v * 2] += lz[v];
		}
		lz[v] = 0;
	}
}
void upd(int l, int r, int val, int v, int tl, int tr){
	push(v, tl, tr);
	if(l > tr || r < tl){
		return;
	}
	if(l <= tl && tr <= r){
		lz[v] = val;
		push(v, tl, tr);
		return;
	}
	int tm = (tl + tr) / 2;
	upd(l, r, val, v + v, tl, tm);
	upd(l, r, val, v + v + 1, tm + 1, tr);
	t[v] = min(t[v + v], t[v + v + 1]);
}
int get(int l, int r, int v, int tl, int tr){
	push(v, tl, tr);
	if(l > r || l > tr || r < tl)
		return INT_MAX;
	if(l <= tl && tr <= r)
		return t[v];
	int tm = (tl + tr) / 2;
		return min(get(l, r, v + v, tl, tm), get(l, r, v + v + 1, tm + 1, tr)); 
	
}
main () {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n;
	for(int i = 1; i <= n; i++){
		cin >> a[i];
	}
	build(1, 1, n);
	cin >> m;
	string s;
		getline(cin, s);
	
	while(m--){
		getline(cin, s);
		int d = 0;
		for(int i = 0; i < s.size(); i++){
			if(s[i] == ' ')
				d++;
		}
		if(d == 2){
			int l, r, v;
			stringstream ss;
			ss << s;
			ss >> l;
			ss >> r;
			ss >> v;
			if(l <= r)
				upd(l + 1, r + 1, v, 1, 1, n);
			else{
				upd(l + 1, n, v, 1, 1, n);
				upd(1, r + 1, v, 1, 1, n);
			}		
		}
		else{
			int l, r, v;
			stringstream ss;
			ss << s;
			ss >> l;
			ss >> r;
			if(l <= r)
			cout << get(l + 1, r + 1, 1, 1, n);	
			else{
				cout << min(get(l + 1, n, 1, 1, n), get(1, r + 1, 1, 1, n));
			}
			cout << endl;
		}
	}
	return 0;
}