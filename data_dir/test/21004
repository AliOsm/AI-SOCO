// --------------------<optimizations>--------------------
#pragma GCC optimize("O3")

//(UNCOMMENT WHEN HAVING LOTS OF RECURSIONS)\
#pragma comment(linker, "/stack:200000000")
//(UNCOMMENT WHEN TRYING TO BRUTEFORCE WITH A LOT OF LOOPS)\
#pragma GCC optimize("unroll-loops")

// -------------------</optimizations>--------------------
#include<bits/stdc++.h>
using namespace std;
#define int long long
#define d long double
#define pdi pair<d,int>
#define pb push_back
#define cases int tc;cin>>tc;while(tc--)
#define N 200003
#define M 103
#define inf 1e16
#define Arena ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
//int mod=1e9+7;
//int mod=998244353;
d eps=1e-12;

d distsq(int x1,int y1,int x2,int y2)
{
    return ((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1));
}   

signed main()
{
    Arena
    
    int n,x1,y1,x2,y2;
    cin>>n>>x1>>y1>>x2>>y2;
    int x[n+1],y[n+1],i,j;
    for(i=1;i<=n;++i)
        cin>>x[i]>>y[i];
    
    pdi d1[n+1],d2[n+1];
    d d1s[n+1],d2s[n+1];
    for(i=1;i<=n;++i)
    {
        d1[i]={distsq(x1,y1,x[i],y[i]),i}; d2[i]={distsq(x2,y2,x[i],y[i]),i};
        d1s[i]=d1[i].first, d2s[i]=d2[i].first;
    }
    d1[0]=d2[0]={0,0};
    sort(d1+1,d1+n+1);
    sort(d2+1,d2+n+1);
    
    d r1=0.0,r2=0.0,r2m=0.0,r1m=0.0;
    int ans=inf;
    bool vis[n+3]={0};
    for(i=0;i<=n;++i)
    {
        r1=0.0,r2=0.0;
        fill(vis,vis+n+3,0);
        for(j=0;j<=i;++j)
        {
            r1=max(r1,d1[j].first);
            vis[d1[j].second]=1;
        }   
        for(j=1;j<=n;++j)
        {
            if(!vis[j])
                r2=max(r2,d2s[j]);
        }   
        
        ans=min(ans,(int)(r1 + r2));
        
        r1=0.0,r2=0.0;
        fill(vis,vis+n+3,0);
        for(j=1;j<=i;++j)
        {
            r2=max(r2,d2[j].first);
            vis[d2[j].second]=1;
        }   
        for(j=1;j<=n;++j)
        {
            if(!vis[j])
                r1=max(r1,d1s[j]);
        }   
        
        ans=min(ans,(int)(r1 + r2));
    }   
    cout<<ans;
        
    return 0;
}
