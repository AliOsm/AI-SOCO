#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <map>
#define P_B push_back
#define M_P make_pair
#define F first
#define S second
#define size(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define FR(i, a, b) for(int i = a; i < b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define mod (1000 * 1000 * 1000 + 7)
#define fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

const int MAXN = 1000 * 100 * 3 + 10;
ll a[MAXN], b[MAXN], c[MAXN];
map <pii, int> mp;
vector <pii> vec[MAXN];
pii num[MAXN];
int cnt = 0;

void add(int a, int b, int c, int i)
{
	if(mp.find({a, b}) == mp.end())
	{
		mp[{a, b}] = cnt;
		num[cnt++] = {a, b};
	}

	vec[mp[{a, b}]].P_B(M_P(c, i));
}

int main()
{
	int n;
	cin>> n;
	FR(i, 0, n) 
	{
		int t[3];
		FR(j, 0, 3) cin>> t[j];
		sort(t, t + 3);
		a[i] = t[0], b[i] = t[1], c[i] = t[2];
	}
	FR(i, 0, n)
	{
		add(a[i], b[i], c[i], i);
		if(b[i] != c[i])
			add(a[i], c[i], b[i], i);
		if(b[i] != a[i])
			add(b[i], c[i], a[i], i);
	}
/*
	FR(i, 0, cnt)
	{
		sort(all(vec[i]), greater <pii> ());
		cout<< "I: " << num[i].F << " " << num[i].S << endl;;
		FR(j, 0, size(vec[i]))
			cout<< vec[i][j].F << " " << vec[i][j].S << endl;
	}
*/
	double d = 0;
	int ans[2] = {-1, -1};
	FR(i, 0, cnt)
	{
		sort(all(vec[i]), greater <pii> ());
		int new_ans[2] = {vec[i][0].S, -1};
		int zp = vec[i][0].F;
		if(size(vec[i]) > 1)
		{
			zp += vec[i][1].F;
			new_ans[1] = vec[i][1].S;
		}
		double new_d = (double)min({num[i].F, num[i].S, zp}) / 2;
		if(new_d > d)
		{
			ans[0] = new_ans[0], ans[1] = new_ans[1];
			d = new_d;
		}
	}
	if(ans[1] == -1)
		cout<< 1 << endl << ans[0] + 1 << endl;
	else
		cout<< 2 << endl << ans[0] + 1 << " " << ans[1] + 1 << endl;
	return 0;
}
