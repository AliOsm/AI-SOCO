///*** One Last Try ***///
#include<bits/stdc++.h>
using namespace std;
#pragma comment(linker, "/stack:200000000")
#define ll long long int
#define inf ( int )( 1e9 + 1e9 )
#define mxs (int)( 1e6 + 10 )
#define md  int mid = ( l + r )>>1;
#define mod (ll)(1e9)+7
//int dx[]={+1,0,+0,-1};///Four Directions
//int dy[]={+0,-1,+1,+0};///Four directions
//int dx [] = {+1,-1,+0,+0,-1,-1,+1,+1};///Eight Directions
//int dy [] = {+0,+0,+1,-1,+1,-1,-1,+1};///Eight Directions
ll t, n, m, j, ans, k,a, b, c, d, e,f ,sum , i,sz;
string s, s2, s3, s4;
vector < ll > graph [ mxs ];
queue < ll > qu;
vector < ll > v , vv;
bool visited [ mxs ];
ll ar [ mxs ] , ar2 [ mxs ] , ar3 [ mxs ];
void brainfuck();
int main()
{
    ios_base::sync_with_stdio(NULL);
    cin.tie(NULL);
    cout.tie(NULL);
    brainfuck();
    return 0;
}
void brainfuck()
{
    cin>>n>>k;
    for ( i = 1 ; i < n; i++ )
    {
        cin>>a>>b>>c;
        if ( !c )
        {
            graph [ a ].push_back( b );
            graph [ b ].push_back( a );
        }
    }
    for ( i = 1 ; i <= n; i++ )
    {
        if ( !visited [ i ] && graph [ i ].size() )
        {
            qu.push( i );
            visited [ i ] = 1;
            vv.clear();
            while( !qu.empty() )
            {
                a = qu.front();
                vv.push_back( a );
                qu.pop();
                sz = graph [ a ].size();
                for ( j = 0 ; j < sz; j++ )
                {
                    b = graph [ a ] [ j ];
                    if ( !visited [ b ] )
                    {
                        visited [ b ] = 1;
                        qu.push( b );
                    }
                }
            }
            v.push_back( vv.size() );
        }
    }
    m = 1;
    for ( i = 1 ; i <= k; i++ )
    {
        m *= n;
        m %= mod;
    }
    if ( m - n < 0 )
    {
        m += mod;
        m -= n;
        m %= mod;
    }
    else m -= n;
    ans = m;
    for ( i = 0 ; i < v.size(); i++ )
    {
        a = v [ i ];
        b = 1;
        for ( j = 1 ; j <= k; j++ )
        {
            b *= a;
            b %= mod;
        }
        if ( b - a < 0 )
        {
            b += mod;
            b -= a;
            b %= mod;
        }
        else b -= a;

        if ( ans - b < 0 )
        {
            ans += mod;
            ans -= b;
            ans %= mod;
        }
        else ans -= b;

    }
    cout<<ans;
}
