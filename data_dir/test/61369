#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
using namespace std;
#define MS0(I) memset(I, 0, sizeof(I));
#define MS1(I) memset(I, -1, sizeof(I));
#define rep(i, n) for(int i = 0; i < (n); ++i)
#define rep1(i, s, n) for(int i = (s); i < (n); ++i)
#define per1(i, a, b) for(int i = a; i >= b; --i)
#define DRI(A) int A; scanf("%d", &A);
#define DRII(A, B) int A, B; scanf("%d %d", &A, &B);
#define DRIII(A, B, C) int A, B, C; scanf("%d %d %d", &A, &B, &C);
#define SZ(X) ((int)X.size() )
#define MP make_pair 
#define pb push_back
#define F first
#define S second
#define ALL(I) (I).begin(), (I).end()
typedef const void CV;
typedef long long LL;
typedef unsigned long long ULL;
typedef double DB;
typedef long double LDB;
typedef pair<int, int> PII; 
const double eps = 1e-9;
const double PI = acos(-1);
const LL INFF = 1e18;
const int INF = 1e9;
const int mod = 1e9+7;
const int MAX = 1e5+7;
char s1[MAX], s2[MAX];
int ll[MAX], rr[MAX];
int main(void){
	scanf("%s %s", s1 + 1, s2 + 1);
	int l1 = strlen(s1 + 1);
	int l2 = strlen(s2 + 1);
	int cp = 1;
	rep1(i, 1, l2+1){
		while(cp <= l1 && s1[cp] != s2[i]) cp++;
		if(cp <= l1) ll[i] = cp++;
		else ll[i] = cp;
	}
	cp = l1;
	per1(i, l2, 1){
		while(cp >= 1 && s1[cp] != s2[i]) cp--;
		if(cp >= 1) rr[i] = cp--;
		else rr[i] = cp;
	}
	if(ll[l2] <= l1) printf("%s\n", s2 + 1);
	else if(ll[1] != l1+1){
		if(rr[l2] == 0){
			cp = 1;
			while(cp < l2 && ll[cp+1] != l1+1) cp++;
			rep1(i, 1, cp+1) printf("%c", s2[i]);
		}
		else{
			cp = 1;
			while(ll[cp+1] != l1+1) cp++;
			int v1 = l2 - cp;
			cp = l2;
			while(rr[cp-1] != 0) cp--;
			int v2 = cp - 1;
			int mn = min(v1, v2);
			bool fg = 0;
			int p = 0;
			cp = 0;
			rep1(i, 1, l2+1){
				if(ll[i] > l1) break;
				while(cp <= l2 && (cp <= i || rr[cp] <= ll[i]) )cp++;
				if(cp > l2) break;
				if(mn > l2 - (i + l2 - cp + 1)){
					mn = cp - i - 1;
					fg = 1;
					p = i+1;
				}
			}
			if(fg){
				rep1(i, 1, p) printf("%c", s2[i]);
				p += mn;
				printf("%s\n", s2 + p);
			}
			else if(mn == v1){
				cp = 1;
				while(cp < l2 && ll[cp+1] != l1+1) cp++;
				rep1(i, 1, cp+1) printf("%c", s2[i]);
			}
			else{
				cp = l2;
				while(cp && rr[cp-1] != 0) cp--;
				printf("%s\n", s2 + cp);
			}
		}
	}
	else if(rr[l2] != 0){
		cp = l2;
		while(cp && rr[cp-1] != 0) cp--;
		printf("%s\n", s2 + cp);
	}
	else puts("-");
	return 0;
}
