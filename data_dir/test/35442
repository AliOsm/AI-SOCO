#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
#define  int long long int
typedef complex<long double> cd;
const long double pi=acos(-1);
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <db, db> pdd;
typedef vector<int> vi;
typedef vector<vector<int> > matrix;
#define m1 make_pair
#define pb push_back
#define flush fflush(stdout)
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define reset(x,v) memset(x,v,sizeof(x))
#define sz(x) (int)(x.size())
#define ff first
#define ss second
#define endl "\n"
#define debug(x) (cerr << #x << ": " << x << "\n")
#define setbits(x) __builtin_popcount(x)
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0)return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p;}
const ll MOD =998244353;
const ll hell=1000000007;
const int INF = 1e17;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;

typedef tree<int, null_type, less<int>, rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;
const int N=200005;
bool visited[N];vector<int> adj[N];
void dfs(int u)
{
    visited[u]=1;
    //debug(u);
    for(int i=0;i<adj[u].size();i++)
    {
        int v=adj[u][i];
        if(!visited[v])
            dfs(v);
    }
}
int32_t main()
{
    IOS;
    int n;
    cin>>n;
    string s[n];
    for(int i=0;i<n;i++)
        cin>>s[i];
    vector<int> f[26];
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<s[i].length();j++)
        {
            f[s[i][j]-'a'].pb(i+1);
        }
    }
    //debug(f[1].size());
    
    for(int i=0;i<26;i++)
    {
        if(f[i].size()>1)
        for(int j=0;j<(f[i].size()-1);j++)
        {
            int u=f[i][j];
            int v=f[i][j+1];
           // debug(u);
            //debug(v);
            adj[u].pb(v);
            adj[v].pb(u);
        }
    }
   // debug(adj[1].size());
    int ans=0;
    for(int i=1;i<=n;i++)
        if(!visited[i])
        {
            ans++;
            //debug(i);
            dfs(i);
        }
    cout<<ans<<endl;
    return 0;
}
