#include<bits/stdc++.h>

//#include "rubo.h"
#define MP make_pair
#define PB push_back
#define in int
#define ll long long
#define ull unsigned long long
#define vc vector
#define SQ(j) (j)*(j)
#define MIN first
#define MAX second

//#define ld long double
#define dbl  double
#define pll pair<long long,long long>
#define pii pair<int,int>
#define all(j) j.begin(), j.end()
#define loop(xxx, yyy) for(int xxx = 0; xxx < yyy; xxx++)
//#define printf(fmt, ...) (0)
//#define HOME
//#define y0 ngacaleiebinvoaeu
//#define y1 gnarpipipaigare
#define j1 adsfndnasfafoasp

//#define printf(...) (0)
#define db(x) cout << #x << " = " << x << endl
#define dbCont(x) cout << #x << ": "; for(auto shun: x) cout << shun << ' '; cout<<endl;

using namespace std;

const int N = 1000 * 1000 + 123;

int n, m;


map<pair<int,char>,vc<string>> mp;

bool is_vow(char c){
    if(c == 'a') return true;
    if(c == 'i') return true;
    if(c == 'e') return true;
    if(c == 'o') return true;
    if(c == 'u') return true;
    return false;
}

int vowel_cnt(string &s){
    int res = 0;
    for(char c : s){
        if(is_vow(c)){
            res++;
        }
    }
    return res;
}

char last_vow(string &s){
    for(int i = (int)s.length()-1; i >= 0; i--){
        if(is_vow(s[i])){
            return s[i];
        }
    }
    assert(false);
    return '@';
}

char buf[N];
string s;

bool can(int k){
    map<pair<int,char>,int> Mp;

    for(auto &p : mp){
        Mp[p.first] = p.second.size();
    }

    int initK = k;

    //////////
//    for(auto &p : Mp){
//        cout << p.second << ' ' ;
//    }
//    cout << endl;
    //////////

    for(auto &p : Mp){
        int can_take = p.second/2;

        int take = min(k,can_take);

//        db(take);
        k -= take;
        p.second -= 2*take;
    }

    map<int,int> mp_cnt;
    for(auto &p : Mp){
        mp_cnt[p.first.first] += p.second;
    }


    if(k != 0) return false;

    int first_pair = 0;

    for(auto &p : mp_cnt){
        int can_take = p.second/2;


//        db(can_take);
        first_pair += can_take;
        p.second -= 2*can_take;
    }

    return first_pair >= initK;

}

int main() {
    scanf("%d",&n);
    loop(i,n){
        scanf("%s",buf);
        s = buf;

        mp[{vowel_cnt(s), last_vow(s)}].push_back(s);
    }



    int l = 0, r = n/2;



//    for(int i = 0; i <= r; i++){
//        db(i);
//        db(can(i));
//        cout << endl;
//    }

    while(l < r){
        int mid = (l+r+1)/2;
        if(can(mid)){
            l = mid;
        } else {
            r = mid-1;
        }
    }

    // dol
    printf("%d\n",l);
    vc<string> first_col;
    vc<string> second_col;

    int k = l;

    for(auto &p : mp){
        int can_take = p.second.size()/2;

        int take = min(k,can_take);

//        db(take);
        k -= take;
        loop(xxx,2*take) {
            second_col.push_back(p.second.back());
            p.second.pop_back();
        }
    }

    map<int,vc<string>> mp_cnt;
    for(auto &p : mp){
        for(auto &t  : p.second)
            mp_cnt[p.first.first].push_back(t);
    }

    k = l;
    for(auto &p : mp_cnt){
        int can_take = p.second.size()/2;
        int take = min(k,can_take);

//        db(can_take);
        k -= take;
        loop(xxx,2*take) {
            first_col.push_back(p.second.back());
            p.second.pop_back();
        }
    }


    loop(i,first_col.size()){
        printf("%s %s\n", first_col[i].c_str(), second_col[i].c_str());
    }

    return 0;
}