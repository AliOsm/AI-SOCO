#include<bits/stdc++.h>
using namespace std;
#define int long long
const int MAX=109,INF=1e9;
int n,m,s,t,cf[MAX][MAX],f[MAX][MAX],a[MAX],ans;
vector<int> v;
vector<pair<int,int> > e;
bool mark[MAX];
int dfs(int v,int flow)
{
     mark[v]=true;
     if (v==t) return flow;
     for (int i=0,x;i<n+2;i++)
         if (!mark[i] && cf[v][i]>0 && (x=dfs(i,min(flow,cf[v][i])))!=-1)
            return cf[v][i]-=x,cf[i][v]+=x,f[v][i]+=x,f[i][v]-=x,x;
     return -1;
}
int max_flow()
{
     int ret=0;
     while (dfs(s,INF)!=-1) memset(mark,0,sizeof mark);
     for (int i=0;i<n+2;i++) ret+=f[i][t];
     return ret;
}   
main()
{
	cin>>n>>m,s=n,t=n+1;
	for (int i=0;i<n;i++) 
	{
		cin>>a[i];
		int x=a[i];
		for (int j=2;j*j<=x;j++)
			while (x%j==0)
				v.push_back(j),x/=j;
		if (x!=1) v.push_back(x);
	}
	sort(v.begin(),v.end()),v.resize(unique(v.begin(),v.end())-v.begin());
	for (int i=0,v,u;i<m;i++) cin>>v>>u,v--,u--,e.push_back({v,u});
	for (auto r:v)
	{
		memset(cf,0,sizeof cf),memset(f,0,sizeof f),memset(mark,0,sizeof mark);
		for (int i=0;i<n;i++)
		{
			int x=a[i];
			while (x%r==0) 
			{
				if (i%2==1) cf[s][i]++;
				else cf[i][t]++;
				x/=r;
			}
		}
		for (auto i:e) if (i.first%2==1) cf[i.first][i.second]=INF; else cf[i.second][i.first]=INF;
		ans+=max_flow();
	}
	cout<<ans;
}
