#include <algorithm>
#include <iostream>
#include <iterator>
#include <iomanip>
#include <vector>
#include <cmath>
#include <queue>
#include <map>
#include <set>

using namespace std;

#define rfile freopen("input.txt", "r", stdin)
#define wfile freopen("output.txt", "w", stdout)
#define files rfile; wfile
#define firstout if (first == true) first = false; else printf(" ")

typedef long long ll;
typedef long double ld;
typedef map< int, int > mapT;
typedef pair< int, int > pairT;

vector< vector< int > > g;
vector< int > c;
vector< int > us;
vector< int > cost;
int n, m, i1, i2, t, col = 1;
ll ans = 0;

string rev(string s)
{
    int n = s.length();
    for (int l = 0, r = n - 1; l < r; l++, r--)
        swap(s[l], s[r]);
    return s;
}

int main()
{
    int n;
    scanf("%d", &n);
    vector< int > c(n);
    vector< string > s(n);
    for (int i = 0; i < n; i++)
        scanf("%d", &c[i]);
    for (int i = 0; i < n; i++)
        cin >> s[i];
    vector< vector< ll > > dp(n, vector< ll >(2, 1e15));
    dp[0][0] = 0; dp[0][1] = c[0];
    for (int i = 1; i < n; i++)
    {
        if (s[i] >= s[i - 1])
            dp[i][0] = dp[i - 1][0];
        if (s[i] >= rev(s[i - 1]))
            dp[i][0] = min(dp[i][0], dp[i - 1][1]);
        if (rev(s[i]) >= s[i - 1])
            dp[i][1] = dp[i - 1][0] + c[i];
        if (rev(s[i]) >= rev(s[i - 1]))
            dp[i][1] = min(dp[i][1], dp[i - 1][1] + c[i]);
    }
    if (dp[n - 1][0] < 1e15 || dp[n - 1][1] < 1e15)
        printf("%lld", min(dp[n - 1][0], dp[n - 1][1]));
    else
        printf("-1");
    return 0;
}
