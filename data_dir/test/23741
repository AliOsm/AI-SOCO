#include<bits/stdc++.h>

using namespace std;

#define ll long long
#define ff first
#define ss second
#define add push

const int maxn=1e5+5;
ll bit[maxn];
int n,len,sum=0,k;
pair<int,int> a[maxn];
ll pre[maxn],cnt[maxn],val1[maxn],val2[maxn];
int low[maxn],high[maxn];
queue<int> al[maxn];

static bool cmp(pair<int,int> a,pair<int,int> b)
{
	return (a.ss<b.ss);
}

static void update(int idx,long val)
{
	while(idx<=n)
	{
		bit[idx]+=val;idx+=idx&-idx;
	}
}
	
static ll query(int idx)
{
	ll ret=0;
	while(idx>0)
	{
		ret=ret+bit[idx];idx-=idx&-idx;
	}
	return ret;
}

int main()
{
	ios::sync_with_stdio(false);
	cin>>n>>len;ll curr=0;
	for(int i=0;i<n;i++)
	{
		int val;cin>>val;
		a[i]={i,val};pre[i]=curr+a[i].ss;curr=pre[i];
		sum+=(a[i].ss<0?1:0);cnt[i]=sum;
	}
	cin>>k;vector< pair<int,int> > list1,list2;
	
	for(int i=len-1;i<n;i++)
	{
		int curr1=cnt[i]-(i-len<0?0:cnt[i-len]);
		list1.push_back({i,min(k,curr1)});
		int curr2=len-(cnt[i]-(i-len<0?0:cnt[i-len]));
		list2.push_back({i,min(k,curr2)});
	}
	
	sort(a,a+n,cmp);int m=list1.size();
	
	for(int i=0;i<m;i++)
	{
		low[i]=0;high[i]=n-1;
	}
	
	bool check=true;
		
	while(check)
	{
		check=false;memset(bit,0,sizeof(bit));
		for(int i=0;i<m;i++)
		{
			if(low[i]!=high[i])
			{
				al[(low[i]+high[i])>>1].add(i);check=true;
			}
		}
			
		for(int i=0;i<n;i++)
		{
			update(a[i].ff+1,1);
			while(al[i].size()>0)
			{
				int y=al[i].front();al[i].pop();pair<int,int> x=list1[y];
				if(query(x.ff+1)-query(x.ff+1-len)>=x.ss)
				{
					high[y]=i;
				}
				else
				{
					low[y]=i+1;
				}
			}
		}
	}
	memset(bit,0,sizeof(bit));
	for(int i=0;i<m;i++)
	{
		al[low[i]].add(i);
	}
	for(int i=0;i<n;i++)
	{
		update(a[i].ff+1,a[i].ss);
		while(al[i].size()>0)
		{
			int y=al[i].front();al[i].pop();pair<int,int> x=list1[y];
			val1[x.ff]=query(x.ff+1)-query(x.ff+1-len);
		}
	}
	for(int i=0;i<m;i++)
	{
		low[i]=0;high[i]=n-1;
	}

	check=true;
		
	while(check)
	{
		check=false;memset(bit,0,sizeof(bit));
		for(int i=0;i<m;i++)
		{
			if(low[i]!=high[i])
			{
				al[(low[i]+high[i])>>1].add(i);check=true;
			}
		}
			
		for(int i=n-1,j=0;i>=0;i--,j++)
		{
			update(a[i].ff+1,1);
			while(al[j].size()>0)
			{
				int y=al[j].front();al[j].pop();pair<int,int> x=list2[y];
				if(query(x.ff+1)-query(x.ff+1-len)>=x.ss)
				{
					high[y]=j;
				}
				else
				{
					low[y]=j+1;
				}
			}
		}
	}
	memset(bit,0,sizeof(bit));
	for(int i=0;i<m;i++)
	{
		al[low[i]].add(i);
	}
	for(int i=n-1,j=0;i>=0;i--,j++)
	{
		update(a[i].ff+1,a[i].ss);
		while(al[j].size()>0)
		{
			int y=al[j].front();al[j].pop();pair<int,int> x=list2[y];
			val2[x.ff]=query(x.ff+1)-query(x.ff+1-len);
		}
	}
	ll res=-1e16;
	for(int i=0;i<n;i++)
	{
		val1[i]=(k==0?0:val1[i]);val2[i]=(k==0?0:val2[i]);
	}
	/*
	for(auto x:val1)
	{
		cout<<x<<" ";
	}
	cout<<endl;
	for(auto x:val2)
	{
		cout<<x<<" ";
	}
	cout<<endl;
	*/
	for(int i=len-1;i<n;i++)
	{	
		curr=(pre[i]-(i-len<0?0:pre[i-len]));
		res=max(res,curr);
		res=max(res,abs(curr-(2ll*val2[i])));
		res=max(res,abs(curr+(2ll*abs(val1[i]))));
	}
	cout<<res<<endl;
}





