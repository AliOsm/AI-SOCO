#include <cmath>
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <list>
#include <time.h>
#include <random>
#include <deque>
#include <queue>
#include <cassert>
#include <unordered_map>
#include <unordered_set>
#include <iomanip>
#include <bitset>
#include <sstream>
#include <chrono>

using namespace std;

typedef long long ll;

int const N = 2 * 100005;
int dx[N];
int dy[N];
int toX, toY;
int n;

pair <int, int> change(char t)
{
    if (t == 'R')
    {
        return make_pair(1, 0);
    }
    else if (t == 'U')
    {
        return make_pair(0, 1);
    }
    else if (t == 'L')
    {
        return make_pair(-1, 0);
    }
    else if (t == 'D')
    {
        return make_pair(0, -1);
    }
    return make_pair(0, 0);
}

bool is(int l, int r)
{
    int sumXL = dx[l - 1];
    int sumXR = dx[n] - dx[r];
    int sumYL = dy[l - 1];
    int sumYR = dy[n] - dy[r];
    int len = r - l + 1;
    pair <int, int> coordBef = make_pair(sumXL, sumYL);
    pair <int, int> coordAft = make_pair(toX - sumXR, toY - sumYR);
    int dx = abs(coordBef.first - coordAft.first);
    int dy = abs(coordBef.second - coordAft.second);
    return dx + dy <= len && (dx + dy) % 2 == len % 2;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);

    cin >> n;
    string s;
    cin >> s;

    s = '#' + s;
    for (int i = 1; i <= n; ++i)
    {
        auto now = change(s[i]);
        dx[i] = dx[i - 1] + now.first;
        dy[i] = dy[i - 1] + now.second;
    }

    cin >> toX >> toY;

    if (dx[n] == toX && dy[n] == toY)
    {
        cout << 0;
        exit(0);
    }

    int best = 2e9;
    int l = 1;

    for (int r = 1; r <= n; ++r)
    {
        while (l < r)
        {
            l++;
            if (!is(l, r))
            {
                l--;
                break;
            }
        }
        if (is(l, r))
        {
            best = min(best, r - l + 1);
        }
    }

    if (best != 2e9)
    {
        cout << best << endl;
    }
    else
    {
        cout << -1;
    }

    return 0;
}