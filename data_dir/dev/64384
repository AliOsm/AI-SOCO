#include<bits/stdc++.h>
using namespace std;

const int N = 2e5 + 25;
int n,u,v,par[20][N],h[N],a[N];
vector<int> G[N];

int lca(int u, int v) {
    if(h[u] > h[v]) swap(u,v);
    for(int i = 18; i >= 0; --i) if(h[par[i][v]] >= h[u]) v = par[i][v];
    for(int i = 18; i >= 0; --i) if(par[i][v] != par[i][u]) v = par[i][v], u = par[i][u];
    return (u == v) ? u : par[0][u];
}

void dfs(int u) {
    for(int i = 0; i < G[u].size(); ++i) {
        int v = G[u][i];
        h[v] = h[u] + 1;
        par[0][v] = u;
        dfs(v);
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin >> n;
    for(int i = 2; i <= n; ++i) {
        cin >> a[i];
        G[a[i]].push_back(i);
    }
    par[0][1] = h[1] = 1;
    dfs(1);
    for(int i = 1; i <= 18; ++i) for(int j = 1; j <= n; ++j) par[i][j] = par[i-1][par[i-1][j]];
    int posmx = 1, res = 0;
    for(int i = 2; i <= n; ++i) {
        if(h[posmx] < h[i]) {
            posmx = i;
            res++;
        }
        else {
            int p = lca(posmx, i);
            res = max(res, h[i] + h[posmx] - 2 * h[p]);
        }
        cout << res << ' ';
    }
}
