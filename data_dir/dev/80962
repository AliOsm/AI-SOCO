//Khodaya aghideye man ra az dast oghde am masoon dar!
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, greater<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, greater_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
#pragma optimize O3
const int MOD = (int)1e9 + 7;
const int MAXN = (int)1e5 + 2;
const int infint = (ll)1e9;
const ll inf = (ll)1e18;
int n, a[MAXN], t[MAXN], x[MAXN];
unordered_map<int, int> tme, pos, fen[MAXN];
void add(int t, int id, int val)
{
	for (; t <= n; t += t & -t)
		fen[t][id] += val;
}
int get(int t, int x)
{
	int ans = 0;
	for (; t; t -= t & -t)
		ans += fen[t][x];
	return ans;
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i] >> 	t[i] >> x[i];
	set<int> difft, diffx;
	for (int i = 0; i < n; i++)
		difft.insert(t[i]), diffx.insert(x[i]);
	int tp = 1;
	for (auto u : difft)
		tme[u] = tp++;
	tp = 1;
	for (auto u : diffx)
		pos[u] = tp++;
	for (int i = 0; i < n; i++)
		x[i] = pos[x[i]], t[i] = tme[t[i]];
	
	
	for (int i = 0; i < n; i++)
	{
		if(a[i] == 1)
			add(t[i], x[i], 1);
		else
		if(a[i] == 2)
			add(t[i], x[i], -1);
		else
			cout << get(t[i], x[i]) << "\n";
	}
}
