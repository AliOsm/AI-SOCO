/*
▄███████▀▀▀▀▀▀███████▄
░▐████▀▒ЗАПУСКАЕМ▒▀██████▄
░███▀▒▒▒▒▒ДЯДЮ▒▒▒▒▒▒▀█████
░▐██▒▒▒▒▒▒БОГДАНА▒▒▒▒▒████▌
░▐█▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒████▌
░░█▒▄▀▀▀▀▀▄▒▒▄▀▀▀▀▀▄▒▐███▌
░░░▐░░░▄▄░░▌▐░░░▄▄░░▌▐███▌
░▄▀▌░░░▀▀░░▌▐░░░▀▀░░▌▒▀▒█▌
░▌▒▀▄░░░░▄▀▒▒▀▄░░░▄▀▒▒▄▀▒▌
░▀▄▐▒▀▀▀▀▒▒▒▒▒▒▀▀▀▒▒▒▒▒▒█
░░░▀▌▒▄██▄▄▄▄████▄▒▒▒▒█▀
░░░░▄██████████████▒▒▐▌
░░░▀███▀▀████▀█████▀▒▌
░░░░░▌▒▒▒▄▒▒▒▄▒▒▒▒▒▒▐
░░░░░▌▒▒▒▒▀▀▀▒▒▒▒▒▒▒▐
 
*/
#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
#include <random>
 
using namespace std;


#define ll long long
#define ld double
#define null NULL
#define prev prev228
#define index index228
#define left left228
#define right right228
#define hash hash228
#define int long long



struct LOL
{
	string s;
	pair<int, int> pr;
	LOL() {}
	LOL(string _s, pair<int, int> _pr) {
		s = _s;
		pr = _pr;
	}
};



bool operator<(LOL A, LOL B) {
	int val1 = A.pr.first * B.pr.second;
	int val2 = A.pr.second * B.pr.first;
	return val1 > val2;
}




inline int calc(string s) {
	int n = (int)s.size();
	int S = 0;
	int res = 0;
	for (int i = 0; i < n; ++i) {
		if (s[i] == 'h') {
			res += S;
		} else {
			++S;
		}
	}
	return res;
}


signed main() {
	ios_base::sync_with_stdio(false);
	int n;
	cin >> n;
	vector< LOL > v;
	for (int it = 0; it < n; ++it) {
		string s;
		cin >> s;
		int sz = (int)s.size();
		pair<int, int> kek;
		for (int i = 0; i < sz; ++i) {
			if (s[i] == 's') {
				++kek.first;
			} else {
				++kek.second;
			}
		}
		v.push_back(LOL(s, kek));
	}
	sort(v.begin(), v.end());
	string s = "";
	for (auto lol : v) {
		s += lol.s;
	}
	cout << calc(s) << "\n";
    return 0;
}







