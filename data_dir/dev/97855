///****In the name of Allah, most Gracious, most Compassionate****//

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <int, int> pii;

#define NL cout<<"\n";
#define ALL(a) a.begin(), a.end()
#define DBG(a) cout<< #a <<" --> "<<(a)<<endl;
#define FastIO ios::sync_with_stdio(false); cin.tie(nullptr);cout.tie(nullptr)
#define IN freopen("input.txt","r+",stdin)
#define OUT freopen("output.txt","w+",stdout)

template < class T1,class T2>
ostream &operator <<(ostream &os,const pair < T1,T2 > &p)
{
    os<<"{"<<p.first<<","<<p.second<<"}";
    return os;
}

const int N=3e5+5;
const int oo=1e9+7;

struct seg
{
    int l,r,i;
    bool operator < (const seg &s)
    {
        if(r!=s.r) return r<s.r;
        return l<s.l;
    }
};

int value[4*N];
int lazy[4*N];

void UpdateRange(int node , int ss, int se, int us,int ue, int diff)
{
    int mid = ss+(se-ss)/2;

    if (lazy[node] != 0)
    {
        value[node] += lazy[node] ;
        if (ss != se)
        {
            lazy[2*node]+=  lazy[node] ;
            lazy[2*node+1]+=  lazy[node] ;
        }
        lazy[node] = 0;
    }

    if (ss>se || ss>ue || se<us)
        return ;

    if (ss>=us && se<=ue)
    {

        value[node] += diff ;
        if (ss != se)
        {
            lazy[2*node]+=  diff ;
            lazy[2*node+1]+=  diff ;
        }
        return;
    }


    UpdateRange(2*node, ss, mid, us, ue, diff);
    UpdateRange(2*node+1, mid+1, se, us, ue, diff);

    value[node]=max(value[2*node],value[2*node+1]);

}
int GetSum(int node,int ss, int se, int qs, int qe)
{

    int mid = ss+(se-ss)/2;

    if (lazy[node] != 0)
    {
        value[node] += lazy[node] ;
        if (ss != se)
        {
            lazy[2*node]+=  lazy[node] ;
            lazy[2*node+1]+=  lazy[node] ;
        }
        lazy[node] = 0;
    }

    if (ss>se || ss>qe || se<qs)
        return 0;

    if (ss>=qs && se<=qe)
        return value[node];

    return max(GetSum(2*node,ss,mid,qs,qe),GetSum(2*node+1,mid+1,se,qs,qe));
}



int32_t main()
{
    FastIO;
    int n,k;
    cin>>n>>k;
    vector<seg > a;
    for(int i=1;i<=n;i++)
    {
        int l,r;
        cin>>l>>r;
        a.push_back({l,r,i});
    }
    sort(ALL(a));
    vector<int > ans;
    for(int i=0;i<n;i++)
    {
        if(GetSum(1,1,2e5 , a[i].l , a[i].r ) < k)
        {
            UpdateRange(1,1,2e5 , a[i].l , a[i].r  , 1);
        }
        else ans.push_back(a[i].i);
    }
    cout<<ans.size()<<"\n";
    for(int i: ans) cout<<i<<" ";
    NL;
}
