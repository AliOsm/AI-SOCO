#include<bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
using namespace __gnu_pbds;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>pbds;
//#pragma comment(linker, "/stack:200000000")
#define mod 10000
#define ll long long int
#define inf ( ll  )( 1e9 + 10 )
#define mxs (int)( 1e6 + 10 )
//#define md  int mid = ( l + r )>>1;
int dx[]={+1,-1,+0,+0};///Four Directions
int dy[]={+0,+0,+1,-1};///Four directions
//int dx [] = {+1,-1,+0,+0,-1,-1,+1,+1};///Eight Directions
//int dy [] = {+0,+0,+1,-1,+1,-1,-1,+1};///Eight Directions
int ans, t, n, m, i, j, a, b, c, d , e , f ;
//int ar [ mxs ] , ar2 [ mxs ];
string s , s2 , s3;
queue < pair < int , int > > qu , qu2;
stack < pair < int , int > > stk;
int marker , xx , yy;
char grid [ 1010 ] [ 1010 ];
bool visited [ 1010 ] [ 1010 ] , vis [ 1010 ] [ 1010 ];
int dir [ 1010 ] [ 1010 ] , parent [ 1010 ] [ 1010 ];
void brainfuck();
bool checker( int x , int y )
{
    return !( x < 1 || x > n || y < 1 || y > n || dir [ x ] [ y ] != -1 || visited [ x ] [ y ] );
}
bool checker2( int x , int y )
{
    return !( x < 1 || x > n || y < 1 || y > n || visited [ x ] [ y ] /*|| dir [ x ] [ y ] != a * mod + b*/ );
}
void dfs( int row , int col );
int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    ios_base::sync_with_stdio(NULL);
    cin.tie(NULL);
    cout.tie(NULL);
    brainfuck();
    return 0;
}
void brainfuck()
{
    cin>>n;
    memset( grid , '!' , sizeof grid );
    for ( i = 1 ; i <= n; i++ )
    {
        for ( j = 1 ; j <= n; j++ )
        {
            cin>>a>>b;
            if ( a == i && b == j )
            {
                grid [ i ] [ j ] = 'X';
                visited [ i ] [ j ] = 1;
                qu2.push( { i , j } );
                visited [ i ] [ j ] = 2;
            }
            if ( a != -1 )a *= mod , a += b;
            dir [ i ] [ j ] = a;
        }
    }
    for ( i = 1 ; i <= n; i++ )
    {
        for ( j = 1 ; j <= n; j++ )
        {
            int aa;
            int bb;
            if ( !visited [ i ] [ j ] && dir [ i ] [ j ] == -1 )
            {
                a = 0;
                char ch;
                for ( int k = 0 ; k < 4; k++ )
                {
                    aa = dx [ k ] + i;
                    bb = dy [ k ] + j;
                    if ( k == 0 )ch = 'U';
                    else if ( k == 1 )ch = 'D';
                    else if ( k == 2 )ch = 'L';
                    else ch = 'R';
                    if ( checker( aa , bb ) )
                    {
                        a = 1;
                        break;
                    }
                }
                if ( !a )
                {
                    cout<<"INVALID";
                    return;
                }
                else
                {
                    a = i;
                    b = j;
                    c = aa;
                    d = bb;
                    //cerr<<a<<"  "<<b<<"  "<<c<<"  "<<d<<"   "<<ch<<endl;

                    qu.push( { c , d } );
                    visited [ c ] [ d ] = 1;
                    visited [ a ] [ b ] = 1;
                    qu.push( { a , b } );

                    grid [ c ] [ d ] = ch;
                    if ( ch == 'U' )ch = 'D';
                    else if ( ch == 'D' )ch = 'U';
                    else if ( ch == 'L' )ch = 'R';
                    else ch = 'L';
                    grid [ a ] [ b ] = ch;

                    while( !qu.empty() )
                    {
                        a = qu.front().first;
                        b = qu.front().second;
                        qu.pop();
                        for ( int k = 0 ; k < 4; k++ )
                        {
                            c = dx [ k ] + a;
                            d = dy [ k ] + b;
                            if ( checker( c , d ) && !visited [ c ] [ d ] )
                            {
                                qu.push( { c , d } );
                                visited [ c ] [ d ] = 1;
                                char ch;
                                if ( k == 0 )ch = 'U';
                                else if ( k == 1 )ch = 'D';
                                else if ( k == 2 )ch = 'L';
                                else ch = 'R';
                                grid [ c ] [ d ] = ch;
                            }
                        }
                    }
                }
            }
        }
    }
    while( !qu2.empty() )
    {
        a = qu2.front().first;
        b = qu2.front().second;
        //cout<<a<<"  "<<b<<"  source \n";
        qu2.pop();
        for ( int k = 0 ; k < 4; k++ )
        {
            int aa = dx [ k ] + a;
            int bb = dy [ k ] + b;
            if ( checker2( aa , bb ) && dir [ aa ] [ bb ] == dir [ a ] [ b ] )
            {
                //cout<<" child "<<aa<<"  "<<bb<<endl;
                qu2.push( { aa , bb } );
                visited [ aa ] [ bb ] = 1;
                char ch;
                if ( k == 0 )ch = 'U';
                else if ( k == 1 )ch = 'D';
                else if ( k == 2 )ch = 'L';
                else ch = 'R';
                grid [ aa ] [ bb ] = ch;
            }
        }
    }
    /*for ( i= 1 ; i <= n; i++ )
    {
        for ( j = 1 ; j <= n; j++ )cout<<grid [ i ] [ j ]<<" ";
        cout<<endl;
    }*/
    for ( i = 1 ; i <= n; i++ )
    {
        for ( j = 1 ; j <= n; j++ )
        {
            if ( grid [ i ] [ j ] == '!' )
            {
                cout<<"INVALID";
                return;
            }
        }
    }
    cout<<"VALID\n";
    for ( i = 1 ; i <= n; i++ )
    {
        for ( j = 1; j <= n; j++ )cout<<grid [ i ] [ j ];
        cout<<"\n";
    }
}
