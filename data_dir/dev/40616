 /// Bismillahir-Rahmanir-Rahim
#include <bits/stdc++.h>
#define        ll                              long long int
#define        FOR(x,y,z)                      for(int x=y;x<z;x++)
#define        pii                             pair<int,int>
#define        pll                             pair<ll,ll>
#define        CLR(a)                          memset(a,0,sizeof(a))
#define        SET(a)                          memset(a,-1,sizeof(a))
#define        N                               505
#define        M                               1000000007
#define        pi                              acos(-1.0)
#define        ff                              first
#define        ss                              second
#define        pb                              push_back
#define        inf                              (1e9)+1000
#define        eps                             1e-9
#define        ALL(x)                          x.begin(),x.end()
using namespace std;
int dx[]={0,0,1,-1,-1,-1,1,1};
int dy[]={1,-1,0,0,-1,1,1,-1};
template < class T> inline T biton(T n,T pos){return n |((T)1<<pos);}
template < class T> inline T bitoff(T n,T pos){return n & ~((T)1<<pos);}
template < class T> inline T ison(T n,T pos){return (bool)(n & ((T)1<<pos));}
template < class T> inline T gcd(T a, T b){while(b){a%=b;swap(a,b);}return a;}
template <typename T> string NumberToString ( T Number ) { ostringstream ss; ss << Number; return ss.str(); }
inline int nxt(){int aaa;scanf("%d",&aaa);return aaa;}
inline ll lxt(){ll aaa;scanf("%lld",&aaa);return aaa;}
inline double dxt(){double aaa;scanf("%lf",&aaa);return aaa;}
template <class T> inline T bigmod(T p,T e,T m){T ret = 1;
for(; e > 0; e >>= 1){
    if(e & 1) ret = (ret * p) % m;p = (p * p) % m;
} return (T)ret;}
#ifdef sayed
     #define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template < typename Arg1 >
    void __f(const char* name, Arg1&& arg1){
        cerr << name << " is " << arg1 << std::endl;
    }
    template < typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names+1, ',');
        cerr.write(names, comma - names) << " is " << arg1 <<" | ";
        __f(comma+1, args...);
    }
#else
    #define debug(...)
#endif
///******************************************START******************************************

vector<pii> adj[N];
int level[N][N];
vector<tuple < int,int,int >  > edge;
void dijsktra(int s) {
    for(int i =0;i<N;i++) level[s][i] = inf;
    level[s][s] = 0;
    priority_queue<pii> pq;
    pq.push(make_pair(0,s));
    while(!pq.empty()) {
        pii top = pq.top();pq.pop();
        for(auto it: adj[top.ss]) {
            if(level[s][top.ss]+it.ss<level[s][it.ff]) {
               level[s][it.ff] =level[s][top.ss]+it.ss;
               pq.push(make_pair(-level[s][it.ff],it.ff));
            }
        }
    }
}
int n;
int ans[N][N];
int Edge[N][N];
void calculate(int s) {

    for(auto it : edge) {
        int a = get<0> (it);
        int b = get<1> (it);
        int c = get<2> (it);
        if(level[s][a]+c==level[s][b]) {
            Edge[s][b]++;
        }
        if(level[s][b]+c==level[s][a]) {
            Edge[s][a]++;
        }
    }
}
int main(){
    #ifdef sayed
    //freopen("out.txt","w",stdout);
    // freopen("in.txt","r",stdin);
    #endif
    //ios_base::sync_with_stdio(false);
    //cin.tie(0);
    FOR(i,0,N) FOR(j,0,N) level[i][j]=inf,level[i][i]=0;
    n =nxt();
    int m =nxt();
    for(int i = 0;i<m;i++){
        int a= nxt();
        int b= nxt();
        a--,b--;
        int c= nxt();
        edge.pb(make_tuple(a,b,c));
        level[a][b]= c;
        level[b][a]= c;
    }
    FOR(k,0,n) FOR(i,0,n)FOR(j,0,n) level[i][j]=min(level[i][j],level[i][k]+level[k][j]);
    for(int i = 0;i<n;i++) {
        calculate(i);
    }
    for(int i = 0;i<n;i++) {
        for(int j = i+1;j<n;j++) {
            int res = 0;
            for(int k = 0;k<n;k++) {
                if(level[i][j]==level[i][k]+level[k][j]) res+=Edge[i][k];
            }
            printf("%d ",res);
        }
    }

    printf("\n");

    return 0;
}

