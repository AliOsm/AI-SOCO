#include <bits/stdc++.h>
using namespace std;

#define pii pair<int, int>
#define mp make_pair
#define loop(i,n) for (int i=0; i<n; i++)
#define pb push_back
#define vi vector<int>

typedef long long LL;
const int MX = 1e5 + 5;
int a[MX], n, m;
set<pair<int, int> > ms[20];

inline void add_new(int bt, int p, LL& res) {
    res += pow((LL)2, bt);
    ms[bt].insert(make_pair(p, p));
}

inline bool is_inside(int p, set<pair<int, int> >::iterator bnd) {
    return p >= bnd->first && p <= bnd->second;
}

inline void merge_left(int p, int bt, set<pair<int, int> >::iterator bnd1, LL& res) {
    int l = bnd1->first;
    int r = bnd1->second;
    assert(p == l - 1);
    ms[bt].erase(bnd1);
    ms[bt].insert(make_pair(p, r));
    int span = r - l + 1;
    res -= (LL) span * (span + 1) / 2 * pow((LL)2, bt);
    span = r - p + 1;
    res += (LL) span * (span + 1) / 2 * pow((LL)2, bt);
}

inline void merge_right(int p, int bt, set<pair<int, int> >::iterator bnd1, LL& res) {
    int l = bnd1->first;
    int r = bnd1->second;
    assert(p == r + 1);
    ms[bt].erase(bnd1);
    ms[bt].insert(make_pair(l, p));
    int span = r - l + 1;
    res -= (LL) span * (span + 1) / 2 * pow((LL)2, bt);
    span = p - l + 1;
    res += (LL) span * (span + 1) / 2 * pow((LL)2, bt);
}

inline void merge_ranges(set<pair<int, int> >::iterator left, set<pair<int, int> >::iterator right, int bt, LL& res) {
    int l1 = left->first;
    int r1 = left->second;
    int l2 = right->first;
    int r2 = right->second;
    ms[bt].erase(left);
    ms[bt].erase(right);
    ms[bt].insert(make_pair(l1, r2));
    int span = r1 - l1 + 1;
    res -= (LL) span * (span + 1) / 2 * pow((LL)2, bt);
    span = r2 - l2 + 1;
    res -= (LL) span * (span + 1) / 2 * pow((LL)2, bt);
    span = r2 - l1 + 1;
    res += (LL) span * (span + 1) / 2 * pow((LL)2, bt);
}

inline void erase_left(int bt, set<pair<int, int> >::iterator bnd1, LL& res) {
    int l = bnd1->first;
    int r = bnd1->second;
    ms[bt].erase(bnd1);
    int span = r - l + 1;
    res -= (LL) span * (span + 1) / 2 * pow((LL)2, bt);
    if (l != r) {
        ms[bt].insert(make_pair(l + 1, r));
        span = r - l;
        res += (LL) span * (span + 1) / 2 * pow((LL)2, bt);
    }
}

inline void erase_right(int bt, set<pair<int, int> >::iterator bnd1, LL& res) {
    int l = bnd1->first;
    int r = bnd1->second;
    ms[bt].erase(bnd1);
    int span = r - l + 1;
    res -= (LL) span * (span + 1) / 2 * pow((LL)2, bt);
    if (l != r) {
        ms[bt].insert(make_pair(l, r - 1));
        span = r - l;
        res += (LL) span * (span + 1) / 2 * pow((LL)2, bt);
    }
}

inline void split(int p, int bt, set<pair<int, int> >::iterator bnd1, LL& res) {
    int l = bnd1->first;
    int r = bnd1->second;
    int span = r - l + 1;
    res -= (LL) span * (span + 1) / 2 * pow((LL)2, bt);
    ms[bt].erase(bnd1);
    span = p - l;
    res += (LL) span * (span + 1) / 2 * pow((LL)2, bt);
    span = r - p;
    res += (LL) span * (span + 1) / 2 * pow((LL)2, bt);
    ms[bt].insert(make_pair(l, p - 1));
    ms[bt].insert(make_pair(p + 1, r));
}

inline void resolve(int bt, int p, int bvl, LL& res) {
    if (bvl == 1) {
        if (ms[bt].empty()) {
            if (bvl == 1) add_new(bt, p, res);
            return;
        }
        set<pair<int, int> >::iterator bnd1 = ms[bt].lower_bound(make_pair(p, MX));
        if (bnd1 == ms[bt].begin()) {
            if (bnd1->first == p + 1) merge_left(p, bt, bnd1, res);
            else add_new(bt, p, res);
        }
        else if (bnd1 == ms[bt].end()) {
            std::advance(bnd1, -1);
            if (is_inside(p, bnd1)); //Do nothing
            else if (bnd1 -> second == p - 1) merge_right(p, bt, bnd1, res);
            else add_new(bt, p, res);
        }
        else {
            set<pair<int, int> >::iterator bnd2 = bnd1;
            std::advance(bnd1, -1);
            if (is_inside(p, bnd1)); // Do nothing
            else {
                if (p == bnd1->second + 1 && p == bnd2->first - 1) merge_ranges(bnd1, bnd2, bt, res);
                else if (p == bnd1->second + 1) merge_right(p, bt, bnd1, res);
                else if (p == bnd2->first - 1) merge_left(p, bt, bnd2, res);
                else add_new(bt, p, res);
            }
        }
    }
    else {
        if (ms[bt].empty()) {
            /* Do nothing */
            return;
        }
        set<pair<int, int> >::iterator bnd1 = ms[bt].lower_bound(make_pair(p, MX));
        if (bnd1 == ms[bt].begin()) return;
        std::advance(bnd1, -1);
        if (is_inside(p, bnd1)) {
            if (p == bnd1->first) erase_left(bt, bnd1, res);
            else if (p == bnd1->second) erase_right(bt, bnd1, res);
            else split(p, bt, bnd1, res);
        }
    }
}

int main () {
    ios_base::sync_with_stdio(false);
    cin >> n >> m;
    for (int i = 0; i < n; i++) cin >> a[i];
    LL res = 0;
    for (int bt = 0; bt < 20; bt++) {
        int bg = 0;
        for (int i = 0; i < n; i++) {
            int bvl = (a[i] >> bt) & 1;
            if (bvl == 0) {
                if (bg != -1 && bg != i) {
                    ms[bt].insert(make_pair(bg, i - 1));
                }
                bg = -1;
            }
            else {
                if (bg == -1) bg = i;
            }
        }
        if (bg != -1) {
            ms[bt].insert(make_pair(bg, n - 1));
        }
        for (set<pair<int, int> >::iterator it = ms[bt].begin(); it != ms[bt].end(); it++) {
            int spn = it->second - it->first + 1;
            res += (LL) spn * (spn + 1) / 2 * pow((LL)2, bt);
        }
    }
#ifdef DEBUG
    /* Let's do a sanity check */
    cout << "Res from my algorithm = " << res << endl;
    LL brute_res = 0;
    for (int i = 0; i < n; i++) brute_res += a[i];
    for (int j = 0; j < n - 1; j++) {
        for (int i = 0; i < n - j - 1; i++) {
            a[i] &= a[i + 1];
            brute_res += a[i];
        }
    }
    cout << "Res from brute force  = " << brute_res  << endl;
    assert(res == brute_res);
    cout << "OK .." << endl;
#endif
    for (int j = 0; j < m; j++) { // Loop on queries
        int p, v;
        cin >> p >> v;
        p--;
        for (int bt = 0; bt < 20; bt++) {
            int bvl = (v >> bt) & 1;
            resolve(bt, p, bvl, res);
        }
        cout << res << endl;
    }
    return 0;
}