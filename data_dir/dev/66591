//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

#include <stdio.h>
#include <bits/stdc++.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)

using namespace std;

inline void setmin(int &x, int y) { if (y < x) x = y; }
inline void setmax(int &x, int y) { if (y > x) x = y; }
inline void setmin(ll &x, ll y) { if (y < x) x = y; }
inline void setmax(ll &x, ll y) { if (y > x) x = y; }

const int N = 300000;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const double eps = 1e-9;
const double pi = atan2(0, -1);
const int ABC = 26;

int n;
vector<int> g[N];
int depth[N];
int dp[N][19];
int dp1[N][19];
ll ans = 0;

void dfs(int u, int par)
{
    depth[u] = 1;
    for (int v : g[u])
        if (v != par)
        {
            dfs(v, u);
            setmax(depth[u], depth[v] + 1);
        }
    dp[u][0] = n;
    rep(b, 1, 19)
    {
        dp[u][b] = 1;
        vector<int> vals;
        for (int v : g[u])
            if (v != par)
                vals.push_back(dp[v][b - 1]);
        sort(vals.begin(), vals.end());
        reverse(vals.begin(), vals.end());
        rep(i, 0, sz(vals))
            setmax(dp[u][b], min(i + 1, vals[i]));
    }
    /*cout << u << " :  ";
    rep(b, 0, 19)
        cout << dp[u][b] << " ";
    cout << "\n";*/
    rep(b, 0, 19)
    {
        dp1[u][b] = dp[u][b];
        for (int v : g[u])
            if (v != par)
                setmax(dp1[u][b], dp1[v][b]);
    }
    rep(b, 0, 19)
        ans += (b + 1) * (dp1[u][b] - (b + 1 < 19 ? dp1[u][b + 1] : 1));
    ans += depth[u];
}

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    cout << fixed;
    //ll TL = 0.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    cin >> n;
    rep(i, 0, n - 1)
    {
        int u, v;
        cin >> u >> v;
        u--; v--;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs(0, -1);
    cout << ans << "\n";
    return 0;
}
