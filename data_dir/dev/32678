#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <sstream>
#include <cassert>
#include <queue>
#include <bitset>
#include <ctime>
using namespace std;
#define forr(i, a, b) for(ll i = (a); i < (ll) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define db(v) cerr << #v << " = " << v << endl
#define pb push_back
#define sz(x) ((ll)x.size())
#define fst first
#define snd second
typedef long long ll;
typedef pair<ll, ll> ii;
const ll MAXN = 100050;
const ll MOD = (ll)1e9 + 7;

struct Segm {
	ll l, r;
	void in(){
		scanf("%lld %lld", &l, &r);
	}
	bool operator < (Segm o){
		if(l != o.l) return l < o.l;
		return r < o.r;
	}
};

ll n, x, y;
Segm S[MAXN];
vector<Segm> V[MAXN];

int main(){	
	while(scanf("%lld %lld %lld", &n, &x, &y) >= 1){
		forn(i, MAXN) V[i].clear();
		
		forn(i, n){
			S[i].in();
		}
		sort(S, S + n);
		ll ans = 0;
		set<ii> SS;
		forn(i, n){
			//~ printf("SEGMENTO (%lld, %lld)\n", S[i].l, S[i].r);
			//~ printf("SS:\n");
			//~ for(auto v : SS){
				//~ printf("(%lld, %lld)\n", v.fst, v.snd);
			//~ }
			
			auto it = SS.lower_bound({S[i].l, -1});
			if(it == SS.begin()){
				//~ printf("Creando nuevo elemento\n");
				ans += ((S[i].r - S[i].l)*y + x) % MOD;
				ans %= MOD;
				SS.insert({S[i].r, sz(SS)});
			} else {
				it--;
				ii p = *it;
				ll end = p.fst;
				if(x <= (S[i].l - end)*y){
					//~ printf("Creando nuevo segmento disjunto\n");
					SS.erase(p);
					SS.insert({S[i].r, p.snd});
					ans += (S[i].r - S[i].l)*y + x;
					ans %= MOD;
				} else {
					//~ printf("Mergeando segmento\n");
					SS.erase(p);
					SS.insert({S[i].r, p.snd});
					ans += (S[i].r - end)*y;
					ans %= MOD;
				}
			}
		}
		printf("%lld\n", ans);
	}
	return 0;
}
