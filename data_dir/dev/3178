


#define _USE_MATH_DEFINES
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <random>
#include <cmath>

#define ll long long
#define ld long double
#define mp make_pair
#define pb push_back

using namespace std;

const int INF = 2e9;
int MB = 20;
int prime[] = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59 };

void solve() {
	int n;
	cin >> n;
	vector<int> a(n);
	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}

	vector<int> fact(61);
	for (int i = 1; i <= 60; i++) {
		for (int j = 0; j < 17; j++) {
			if (i % prime[j] == 0) fact[i] |= (1 << j);
		}
	}

	int N = 1 << 17;

	vector<vector<int>> dp(n, vector<int>(N, INF));
	vector<vector<int>> p(n, vector<int>(N, -1));

	for (int i = 1; i <= 60; i++) {
		if (dp[0][fact[i]] > abs(a[0] - i)) {
			dp[0][fact[i]] = abs(a[0] - i);
			p[0][fact[i]] = i;
		}
	}

	for (int i = 1; i < n; i++) {
		for (int mask = 0; mask < N; mask++) {
			for (int j = 1; j <= 60; j++) {
				if ((mask & fact[j]) == fact[j] && dp[i][mask] > dp[i - 1][mask ^ fact[j]] + abs(a[i] - j)) {
					dp[i][mask] = dp[i - 1][mask ^ fact[j]] + abs(a[i] - j);
					p[i][mask] = j;
				}
			}
		}
	}
	int startMask = 0;
	int mn = INF;
	for (int mask = 0; mask < N; mask++) {
		if( mn > dp[n - 1][mask]) {
			mn = dp[n - 1][mask];
			startMask = mask;
		}
	}

	vector<int> ans(n);
	for (int i = n - 1; i >= 0;i--) {
		ans[i] = p[i][startMask];
		if(i != 0) startMask ^= fact[ans[i]];
	}

	for (int i : ans) {
		cout << i << " ";
	}
}

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	/*
	freopen("distance4.in", "r", stdin);
	freopen("distance4.out", "w", stdout);
	*/
	solve();
}