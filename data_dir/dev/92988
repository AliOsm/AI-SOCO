
	/*If you are slow ,try hard and become fast 
		If you are making mistakes , learn from them and correct them
			If you are weak in something , do practice and become good at it
	*/
/* Don't do just for the sake ... learn from it , that is more important */

//Don't Think Just Do It!!
//only for brute force
//#pragma GCC optimize("Ofast")
//#pragma GCC optimize("unroll-loops")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,fma,abm,mmx,avx,avx2,tune=native")

#include <bits/stdc++.h>
using namespace std;

#define TRACE
 
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
	cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

clock_t time_p=clock();
void rtime(){ time_p=clock()-time_p; cerr<<"Time Taken : "<<(float)1000*(time_p)/CLOCKS_PER_SEC<<"\n";}

#define fast ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)
#define ll long long
#define ld long double
#define pb push_back
#define fe first
#define se second
#define nl "\n"
#define pp pair < ll , ll > 
#define sz(x) (ll)x.size()
#define st(x) sort(x.begin(),x.end())
#define rst(x) sort(x.rbegin(), x.rend())
#define all(x) x.begin(),x.end()
long double pi = 3.14159265358979323;
 
const double EPS = 1e-12;
const int N = 1e5 + 5;
const int mod = 1e9 + 7;
 
 
vector < ll > v[N];

int main()
{
    fast;
    ll n ;
    cin >> n;

    for(int i = 0 ; i < n - 1 ;  i++ ){
    	ll a , b;
    	cin >> a >> b ;
    	v[a].pb(b);
    	v[b].pb(b);
    }
    int cnt = 0, idx = 1 , maxm = 1;
    vector < ll > ans;
    for(int i = 1 ;  i <= n ; i++ ){
    	if(v[i].size() > 2)
    		cnt++;
    	if(cnt > 1)return cout << "No\n",0;
    	if(v[i].size() > maxm){
    		maxm = v[i].size();
    		idx = i;
    	}
    	if(v[i].size() == 1)ans.pb(i);
    }
    cout << "Yes\n"; //fuck ..
    cout << v[idx].size() << "\n";	
    for(auto it : ans){if(idx != it)cout << idx << " " << it << "\n";}





















    
    return 0;
    
}