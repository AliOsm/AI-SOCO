#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 5e3 + 7;

vector<int> adj[N];
int p[N];
int dp[N];
int mark[N];

bool relax(vector<int> &v, int x)
{
	bitset<N> ok;
	ok[0] = 1;
	for (auto val : v)
		ok = (ok | (ok << val));
	return ok[x];
}

int main()
{
	ios::sync_with_stdio(false);

	int n;
	cin >> n;
	int a[2], b[2];
	for (int i=0; i<2; i++)
	{
		cin >> a[i] >> b[i];
		a[i]--, b[i]--;
	}
	for (int i=1; i<n; i++)
	{
		cin >> p[i];
		p[i]--;
		adj[p[i]].push_back(i);
	}
	for (int i=n-1; i>=0; i--)
	{
		dp[i] = adj[i].empty();
		for (auto u : adj[i])
			dp[i] += dp[u];
	}
	if (dp[0] & 1)
	{
		cout << "NO\n";
		return 0;
	}
	bool good = true;
	for (int x=0; x<2; x++)
	{
		vector<int> tmp;
		{
			int v = a[x];
			while (v != 0)
			{
				mark[v]++;
				int u = p[v];
				for (auto w : adj[u])
					if (w != v && w != b[x])
						tmp.push_back(dp[w]);
				v = u;
			}
		}
		{
			int v = b[x];
			while (v != 0)
			{
				mark[v]++;
				int u = p[v];
				if (u != 0)
					for (auto w : adj[u])
						if (w != v && w != a[x])
							tmp.push_back(dp[w]);
				v = u;
			}
		}
		if (!relax(tmp, (dp[0] - 2) / 2))
			good = false;
	}
	for (int i=0; i<n; i++)
		if (mark[i] > 1)
			good = false;
	if (good)
		cout << "YES\n";
	else
		cout << "NO\n";

	return 0;
}
