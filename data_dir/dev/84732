#include<bits/stdc++.h>
using namespace std;

int const N = 5e2+10;

int n, k;
char s[N][N];

int c[N][N], sz[N*N], total, comp;
bool mrk[N][N];

int dx[] = {0,0,-1,1};
int dy[] = {-1,1,0,0};

void dfs(int i, int j){
	c[i][j] = comp;
	total++;
	mrk[i][j] = 1;
	for(int k = 0; k < 4; k++){
		int x = i+dx[k], y = j+dy[k];
		if(x < 0 || y < 0 || x >= n || y >= n || s[x][y] == 'X' || mrk[x][y]) continue;
		dfs(x,y);
	}
}

int in[N*N];
int point[N*N];

bool ok[N*N];

int main(){
	
	scanf("%d %d %d", &n, &k);
	for(int i = 0; i < n; i++) scanf(" %s", &s[i]);
	
	int ans = 0;
	for(int i = 0; i < n; i++)
	 for(int j = 0; j < n; j++)
	  if(!mrk[i][j] && s[i][j] == '.') 
	   comp++, total = 0,
	   dfs(i,j), sz[comp] = total, ans = max(ans,total);
    
	for(int i = 0; i+k-1 < n; i++){
		
		for(int I = i; I < i+k; I++)
			for(int J = 0; J < k; J++){
				int id = c[I][J];
				if(id){
					if(point[id] != i+1) point[id] = i+1, in[id] = 0;
					in[id]++;
				}
			}
			 
	    for(int j = k; j <= n; j++){
	    	int d[] = {i-1,i+k};
	        int D[] = {j-k-1,j};
	        vector<int> used;
	        int soma = 0;
	    	for(int a = 0; a < 2; a++){
	    		if(d[a] < 0 || d[a] >= n) continue;
	    		for(int J = j-k; J < j; J++){
	    		 int id = c[d[a]][J];
				 if(id && !ok[id]){
				 	if(point[id] != i+1) point[id] = i+1, in[id] = 0;
				 	ok[id] = 1;
				 	used.push_back(id);
				 	soma += (sz[id] - in[id]);
				 }
			    }
	    	}
	    	for(int b = 0; b < 2; b++){
	    		if(D[b] < 0 || D[b] >= n) continue;
	    		for(int I = i; I < i+k; I++){
	    			int id = c[I][D[b]];
	    			if(id && !ok[id]){
	    				if(point[id] != i+1) point[id] = i+1, in[id] = 0;
	    				ok[id] = 1;
	    				used.push_back(id);
	    				soma += (sz[id] - in[id]);
	    			}
	    		}
	    	}
	    	for(auto it: used) ok[it] = 0;
	    	ans = max(ans,soma+(k*k));
	    	if(j == n) break;
	    	for(int I = i; I < i+k; I++){
	    	 int id1 = c[I][j-k], id2 = c[I][j];
	    	 if(id1) in[id1]--;
		     if(id2){
		     	if(point[id2] != i+1) point[id2] = i+1, in[id2] = 0;
		     	in[id2]++;
		     }
	        }
	    }
	    
	}
	
	printf("%d\n",ans);
	return 0;
	
}
