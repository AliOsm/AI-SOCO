#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef pair< ll, ll > ii;
typedef vector< ll > vi;
typedef vector< ii > vii;

#define INF 0x3F3F3F3F
#define LINF 0x3F3F3F3F3F3F3F3FLL
#define pb push_back
#define mp make_pair
#define pq priority_queue
#define LSONE(s) ((s)&(-s))
#define DEG_to_RAD(X)   (X * PI / 180)
#define F first
#define S second

template <typename A, typename B>
string to_string(pair<A, B> p);
 
template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p);
 
template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p);
 
string to_string(const string& s) {
  return '"' + s + '"';
}
 
string to_string(const char* s) {
  return to_string((string) s);
}
 
string to_string(bool b) {
  return (b ? "true" : "false");
}
 
string to_string(vector<bool> v) {
  bool first = true;
  string res = "{";
  for (int i = 0; i < static_cast<int>(v.size()); i++) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(v[i]);
  }
  res += "}";
  return res;
}
 
template <size_t N>
string to_string(bitset<N> v) {
  string res = "";
  for (size_t i = 0; i < N; i++) {
    res += static_cast<char>('0' + v[i]);
  }
  return res;
}
 
template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}
 
template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
 
template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p) {
  return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")";
}
 
template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) {
  return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ", " + to_string(get<3>(p)) + ")";
}

#ifdef ONLINE_JUDGE
#define debug(args...)
#else
#define debug(args...) fprintf(stderr,args)
#endif

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

const int N = (int)2e5 + 10;

int n;
vector< int > g[N];
ll dp[N];
ll sz[N];

void dfs(int x, int ult) {
  sz[x] = 1;
  for (int y : g[x]) {
    if (y == ult) continue;
    dfs(y, x);
    sz[x] += sz[y];
    dp[x] += dp[y];
  }
  dp[x] += sz[x];
}

void solve(int x, int ult, ll &ans) {
  ans = max(ans, dp[x]);
  for (int y : g[x]) {
    if (y == ult) continue;
    ll dpX = dp[x], dpY = dp[y], szX = sz[x], szY = sz[y];
    sz[x] = n - sz[y];
    sz[y] = n;
    dp[x] -= dpY + szY;
    dp[y] += dp[x] + sz[x];
    solve(y, x, ans);
    dp[x] = dpX;
    dp[y] = dpY;
    sz[x] = szX;
    sz[y] = szY;
  }
}

int main() {
  scanf("%d", &n);
  for (int i = 0; i + 1 < n; ++i) {
    int x, y;
    scanf("%d %d", &x, &y);
    x--; y--;
    g[x].emplace_back(y);
    g[y].emplace_back(x);
  }
  dfs(0, 0);
  ll ans = 0;
  solve(0, 0, ans);
  printf("%lld\n", ans);
  return 0;
}
