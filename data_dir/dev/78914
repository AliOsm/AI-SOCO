#include <iostream>
#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define ll long long
#define F first
#define S second
#define PI acos(-1)
#define EPS 1e-9
#define BASE 53ll
#define ld long double
#define MAX 1000000000
#define NIL 0
#define INF 1e15
#define infi 1000000000ll;
#define rd(a) scanf("%d",&a)
#define rdll(a) scanf("%I64d",&a)
#define sz(a) (int) a.size()
#define lp(i,a,n) for(int i=(a); i<=(n) ; ++i)
#define lpd(i,n,a) for(int i=(n); i>=(a) ; --i)
#define pi acos(-1)

typedef complex<double>CX;
typedef pair<ll,ll>ii;
typedef pair<double,ii>node;
typedef pair<vector<int>,int>vii;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const int N=100001;

ll mod=1000000007;
ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
bool is_vowel(char c){if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||c=='y')return 1;return 0;}
double getDistance(double x1,double y1,double x2,double y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}
ll extended_euclidean(ll a,ll b,ll &x,ll &y){if(b==0){x=1;y=0;return a;}ll g = extended_euclidean(b,a%b,y,x);y -= (a/b)*x;return g;}
ll power(ll base,ll p){if(p==1)return base;if(!p)return 1ll;ll ret=power(base,p/2);ret*=ret;ret%=mod;if(p&1)ret*=base;return ret%mod;}


map<ll,int>cnt;
set<ll>k;
set<ii>st;
ll a[150005];
int main() {
  //freopen("test.in","r",stdin);
  int n;
  rd(n);
  lp(i,0,n-1){
     rdll(a[i]);
     cnt[a[i]]++;
     st.insert(ii(a[i],i));
     if(cnt[a[i]]==2)k.insert(a[i]);
  }
  while(k.size()){
      ll now=*k.begin();
      cnt[now]-=2;
      if(cnt[now]<2)k.erase(k.begin());
      ii a=*st.lower_bound(ii(now,0));
      st.erase(st.find(a));
      ii b=*st.lower_bound(ii(now,0));
      st.erase(st.find(b));
      now*=2;
      st.insert(ii(now,b.S));
      cnt[now]++;
      if(cnt[now]==2){
        k.insert(now);
      }
  }
  vector<ii>v(st.begin(),st.end());
  lp(i,0,(int)v.size()-1)swap(v[i].F,v[i].S);
  sort(v.begin(),v.end());
  cout<<v.size()<<endl;
  lp(i,0,(int)v.size()-1)cout<<v[i].S<<' ';
  return 0;
}
