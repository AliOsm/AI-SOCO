#include<cstdio>
#include<iostream>
#include<cstring>
#include<queue>
#include<algorithm>
#include<cassert>
using namespace std;
#define ll long long
#define MOD 1000000007
const ll inf =1000000000LL;
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define N 100010
int f[N];ll s[N];
int find(int a)
{
    if(a==f[a])return a;
    return f[a]=find(f[a]);
}
vector<int>v,g[N];
struct node
{
    int x;
    node(int _x=0):x(_x){}
    bool operator <(const node&a)const
    {
        return s[x]>s[a.x];
    }
};
int main()
{
    int T,i,j,k,n,m,p,q;
    while(~scanf("%d%d%d%d",&n,&m,&p,&q))
    {
        for(i=1;i<=n;i++)f[i]=i,s[i]=0,g[i].clear();
        for(i=0;i<m;i++)
        {
            int c;
            scanf("%d%d%d",&j,&k,&c);
            int a=find(j),b=find(k);
            if(a!=b)f[a]=b,s[b]+=s[a];
            s[b]+=(ll)c;g[b].pb(a);
        }
        v.clear();
        for(i=1;i<=n;i++)
        if(f[i]==i)v.pb(i);
        int t=v.size();
        if(q>t||t-q>p||(t==q&&t==n&&p))
        {
            puts("NO");continue;
        }
        if(q==t)
        {
            puts("YES");
            for(i=0;i<t;i++)
            if(g[v[i]].size()>=1)
            {
                for(j=0;j<p;j++)
                printf("%d %d\n",v[i],g[v[i]][0]);
                break;
            }
            continue;
        }
        priority_queue<node>qs;
        for(i=0;i<t;i++)qs.push(node(v[i]));
        //printf("%d\n",t);
        puts("YES");
        while(t>q)
        {
            int x=qs.top().x;qs.pop();int y=qs.top().x;qs.pop();
            ll z=min(inf,s[y]+s[x]+1);s[y]+=s[x]+z;t--;p--;g[y].pb(x);
            printf("%d %d\n",x,y);
            qs.push(node(y));
        }
        if(p)
        {
            while(!qs.empty())
            {
                int x=qs.top().x;qs.pop();
                if(g[x].size()>=1)
                {
                    for(i=0;i<p;i++)
                    printf("%d %d\n",x,g[x][0]);
                    break;
                }
            }
        }
    }
    return 0;
}