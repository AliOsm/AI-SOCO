#include "stdio.h"
#include "iostream"
#include "algorithm"
#include "vector"
#include "set"
#include "string"
#include "map"
#include "stack"
#include "bitset"
#include "deque"
#include "queue"
#include "cmath"
#include "fstream"
#include "list"
#include "iomanip"
#include "unordered_set"
#include "unordered_map"
#include "functional"
#define _CRT_SECURE_NO_WARNINGS
using namespace std;
#define all(a) a.begin(), a.end()
const int mod = 1e9+7;
const int N = 2e5 + 5;
int n, k;
#define int long long
int cnt[N];
vector<pair<int, int> > possible;

bool f(int x) {
	int cnt = 0;
	for (int i = 0; i < possible.size(); i++)
	{
		int a = possible[i].first;
		while (a >= x) {
			cnt++;
			a -= x;
		}
	}
	return cnt >= k;
}

void printit(int x) {
	int cnt = 0;
	for (int i = 0; i < possible.size() && cnt<k; i++)
	{
		int a = possible[i].first;
		int b = possible[i].second;
		while (a >= x && cnt<k) {
			cnt++;
			a -= x;
			cout << b << ' ';
		}
	}
}

signed main()
{
	ios::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
	 cin >> n >> k; 
	for (int i = 0; i < n; i++) {
		int x; cin >> x;
		cnt[x]++;
	}
	for (int i = 0; i <N; i++) {
		if (cnt[i] > 0)
			possible.push_back({ cnt[i], i });
	}
	sort(all(possible));
	reverse(all(possible));
	int l = 0, r = n;
	while (r-l>1) {
		int m = (l + r) >> 1;
		if (f(m))
			l = m;
		else
			r = m;
	}
	int ans;
	if (f(r))
		ans = r;
	else
		ans = l;
	printit(ans);
	return 0;
}


