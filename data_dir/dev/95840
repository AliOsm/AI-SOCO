#include <bits/stdc++.h>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t));
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n));
#define prl(n) printf("%I64d\n", (n));
#define rep(i, a, b, c) for (i = (a); i < (b); i += (c))
#define per(i, a, b, c) for (i = (a); i > (b); i -= (c))
#define pii pair<int, int>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
typedef double ld;
typedef long long ll;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e3 + 5;
const double eps = 1e-9;
using namespace std;
int n, m;
ll a[MAXN][MAXN], dp[4][MAXN][MAXN];

void read()
{
    int i, j;
    ni(n), ni(m);
    rep(i, 0, n, 1)
        rep(j, 0, m, 1)
            nl(a[i][j]);
}

void solve()
{
    int i, j;
    dp[0][0][0] = a[0][0];
    rep(i, 1, n, 1)
        dp[0][i][0] = dp[0][i - 1][0] + a[i][0];
    rep(i, 1, m, 1)
        dp[0][0][i] = dp[0][0][i - 1] + a[0][i];

    dp[1][0][m - 1] = a[0][m - 1];
    rep(i, 1, n, 1)
        dp[1][i][m - 1] = dp[1][i - 1][m - 1] + a[i][m - 1];
    per(i, m - 2, -1, 1)
        dp[1][0][i] = dp[1][0][i + 1] + a[0][i];

    dp[2][n - 1][m - 1] = a[n - 1][m - 1];
    per(i, n - 2, -1, 1)
        dp[2][i][m - 1] = dp[2][i + 1][m - 1] + a[i][m - 1];
    per(i, m - 2, -1, 1)
        dp[2][n - 1][i] = dp[2][n - 1][i + 1] + a[n - 1][i];

    dp[3][n - 1][0] = a[n - 1][0];
    per(i, n - 2, -1, 1)
        dp[3][i][0] = dp[3][i + 1][0] + a[i][0];
    rep(i, 1, m, 1)
        dp[3][n - 1][i] = dp[3][n - 1][i - 1] + a[n - 1][i];

    rep(i, 1, n, 1)
        rep(j, 1, m, 1)
            dp[0][i][j] = max(dp[0][i - 1][j], dp[0][i][j - 1]) + a[i][j];
    rep(i, 1, n, 1)
        per(j, m - 2, -1, 1)
            dp[1][i][j] = max(dp[1][i - 1][j], dp[1][i][j + 1]) + a[i][j];
    per(i, n - 2, -1, 1)
        per(j, m - 2, -1, 1)
            dp[2][i][j] = max(dp[2][i + 1][j], dp[2][i][j + 1]) + a[i][j];
    per(i, n - 2, -1, 1)
        rep(j, 1, m, 1)
            dp[3][i][j] = max(dp[3][i + 1][j], dp[3][i][j - 1]) + a[i][j];
    ll ans = 0;
    rep(i, 1, n - 1, 1)
        rep(j, 1, m - 1, 1)
        {
            ll v1 = dp[0][i][j - 1] + dp[2][i][j + 1] + dp[1][i - 1][j] + dp[3][i + 1][j];
            ll v2 = dp[3][i][j - 1] + dp[1][i][j + 1] + dp[0][i - 1][j] + dp[2][i + 1][j];
            ans = max(ans, max(v1, v2));
        }
    pri(ans);
}

int main()
{
    read();
    solve();
    return 0;
}
