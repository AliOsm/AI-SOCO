//bismillahir rahmanir rahim            //Author:Fayed Anik
 
#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
 
using namespace std;
//using namespace __gnu_pbds;
 
/*
template <typename T>  using ordered_set =
    tree<T, null_type, less<T>,   /// greater<T> for sorting decreasingly
    rb_tree_tag, tree_order_statistics_node_update>;
*/

#define         ll                          long  long
#define         lf                          double
#define         pb(x)                       push_back(x)
#define         ull                         unsigned long long
#define         sfl(a)                      scanf("%lld",&a)
#define         sf(a)                       scanf("%d",&a)
#define         pf(a)                       printf("%d\n",a)
#define         pfl(a)                      printf("%lld\n",a)
#define         FOR(x,n)                    for(ll x=1;x<=n;++x)
#define         pii                         pair< ll , ll >
#define         mp(a,b)                     make_pair(a,b)
#define         INF                         2e18
#define         f1                          first
#define         f2                          second
#define         all(v)                      v.begin(),v.end()
#define         PI                          acos(-1)
#define         printminusone               printf("-1\n")
#define         bug                         printf("bug")
#define         FILEIN                      freopen("in.txt","r",stdin)
#define         FILEOUT                     freopen("out.txt","w",stdout)
 
//ll SET(ll mask,ll pos){ return mask = (mask | (1ll<<pos)); }
//ll RESET(ll mask,ll pos){ return mask = mask & ~(1ll<<pos); }
//bool CHECK(ll mask,ll pos) { return (bool) (mask & (1ll<<pos)); }
//priority_queue <ll, vector<ll>, greater<ll> > pq;

const int mod = 1e9+9;
const int p = 31;

#define lim 1000005

ll hasha[lim],inv[lim];

ll fastexpo(ll b,ll p){
    ll res = 1;
    while(p){
        if(p&1) res = (res * b)%mod;
        b = (b*b)%mod;
        p = p >> 1ll;
    }
    return res;
}

void modinverse(){
    inv[1000000] = fastexpo(fastexpo(p,1000000),mod-2);
    for(ll i=999999;i>=0;i--){
        inv[i] = (inv[i+1]*p)%mod;
    }
}


bool ok(ll m,ll val,ll n){
    for(ll i=2;i+m-1<n;i++){
        if(((hasha[i+m-1]-hasha[i-1]+mod)*inv[i-1])%mod==val) return 1;
    }
    return 0;
}

int main(){
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    string s;
    cin>>s;
    ll n = s.size();
    modinverse();
    ll np = 1;
    for(ll i=0;i<n;i++){
        ll j = i+1;
        hasha[j] = (hasha[j-1]+(s[i]-'a'+1)*np)%mod;
        np = (np*p)%mod;
    }
    ll ans=-1;
    for(ll i=2;i<=n;i++){
        if(hasha[i-1]==((hasha[n]-hasha[n-i+1]+mod)*inv[n-i+1])%mod){
            if(ok(i-1,hasha[i-1],n)){
                ans = i;
            }
        }
    }
    if(ans==-1){
        printf("Just a legend\n");
    }
    else{
        for(ll i=0;i<ans-1;i++) printf("%c",s[i]);
        printf("\n");
    }
    return 0;
}