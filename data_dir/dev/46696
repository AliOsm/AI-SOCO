#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define forq(i , a , b) for (int i = (a); i <= (b); ++i)
#define forr(i , b) forq( i , 0 , b - 1 )
#define F first
#define S second
#define I ->
#define endl '\n'
#define qqmemset(array , val) memset (array , val , sizeof(array))
#define ALLV(vect) vect.begin() , vect.end()
#define mid (st + en) / 2
#define lef 2 * Node
#define rig lef + 1

ll R = 7 + 1e9 , NUMTESTCASE ;
const int NN = 10 + 1e6 ;
const double pi = acos(-1.0) ;
int di [4] = {1 , 0 , -1 , 0} , dj [4] = {0 , 1 , 0 , -1} , DI [8] = {1 , 1 , 0 , -1 , -1 , -1 , 0 , 1} , DJ [8] = {0 , 1 , 1 , 1 , 0 , -1 , -1 , -1} ;
using namespace std;
bool Draft_For_Sieve [NN] ;
vector <ll> Primes ;
void Sieve () {
    qqmemset(Draft_For_Sieve , true) ;
    for (int Prime = 2 ; Prime * Prime < NN ; Prime++)
        if (Draft_For_Sieve [Prime])
            for (int NotPrime = Prime * Prime ; NotPrime < NN ; NotPrime += Prime)
                Draft_For_Sieve [NotPrime] = false ;
}
int n , Arr [NN] ;
bool Find [NN] ;
int main()
{
    Sieve() ;
    //ios_base::sync_with_stdio(false); cin.tie(NULL);
    for (cin >> NUMTESTCASE ; NUMTESTCASE ; NUMTESTCASE --) {
        cin >> n ;
        qqmemset(Find , false) ;
        vector <ll> Brr ;
        forq (i , 1 , n) scanf("%d" , Arr + i) , Find [Arr [i]] = true  ;
        forq (i , 1 , n) if (Draft_For_Sieve [Arr [i]]) Brr.push_back(Arr [i]) ;
        ll Ans = 1 , Tot = 1 , P = 0 ;
        for (ll Prime : Brr) {
            ll Div , Cnt = 0 ;
            if (P) P = -1 ; else P = Prime ;
            for (Div = Prime ; Div < NN && Find [Div] ; Div *= Prime) Cnt ++ ;
            Ans *= Div / Prime ;
            Tot *= 1 + Cnt ;
            //cout << Prime << " : " << Cnt << endl ;
        }
        if (P > 0) {
            if (Tot + 1 - 2 == n)
                Ans *= P ;
            else Ans = -1 ;
        }
        else if (Tot - 2 != n) Ans = -1 ;
        for (ll a = 2 ; a * a <= Ans ; a ++) {
            if (Ans % a) continue ;
            if (!Find [a] || !Find [Ans / a]) Ans = -1 ;
        }
        printf("%lld\n" , Ans) ;
    }
    return 0;
}
