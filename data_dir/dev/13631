/*
 * temp.cpp
 *
 *  Created on: 2012-7-18
 *      Author: BSBandme
 */
#include <iostream>
#include <fstream>
#include <string.h>
#include <cstdio>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <cassert>
#include <iomanip>
#include <math.h>
#include <deque>
#include <utility>
#include <map>
#include <set>
#include <bitset>
#include <numeric>
#include <climits>
#include <cctype>
#include <cmath>
#include <cstdlib>
#include <sstream>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <double, double> pdd;
typedef vector <int> vi;
typedef vector <ll> vl;
typedef vector <double> vd;
typedef vector <string> vs;
typedef map <string, int> mpsi;
typedef map <double, int> mpdi;
typedef map <int, int> mpii;

const double pi = acos(0.0) * 2.0;
const double eps = 1e-12;

template <class T> inline T abs1(T a) {return a < 0 ? -a : a;}
template <class T> inline T max1(T a, T b) {return a > b ? a : b;}
template <class T> inline T min1(T a, T b) {return a < b ? a : b;}
template <class T> inline T gcd1(T a, T b) {
	if(a < b) swap(a, b);
	if(a % b == 0) return b;
	return gcd1(b, a % b);
}
template <class T> inline T lb(T num) {return num & (-num); }
inline int bitnum(ull nValue){
    nValue = ((0xaaaaaaaaaaaaaaaaull & nValue)>>1) + (0x5555555555555555ull & nValue);
    nValue = ((0xccccccccccccccccull & nValue)>>2) + (0x3333333333333333ull & nValue);
    nValue = ((0xf0f0f0f0f0f0f0f0ull & nValue)>>4) + (0x0f0f0f0f0f0f0f0full & nValue);
    nValue = ((0xff00ff00ff00ff00ull & nValue)>>8) + (0x00ff00ff00ff00ffull & nValue);
    nValue = ((0xffff0000ffff0000ull & nValue)>>16) + (0x0000ffff0000ffffull & nValue);
    nValue = ((0xffffffff00000000ull & nValue)>>32) + (0x00000000ffffffffull & nValue);
	return nValue;
}
inline int jud(double a, double b){
	if(abs1(a - b) < eps) return 0;
	if(a < b) return -1;
	return 1;
}
long long pow(long long n, long long m, long long mod = 0){
	long long ans = 1;
	long long k = n;
	while(m){
		if(m & 1) {
			ans *= k;
			if(mod) ans %= mod;
		}
		k *= k;
		if(mod) k %= mod;
		m >>= 1;
	}
	return ans;
}

const int step[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
const int maxn = 1100;
int n, m, d;
char mp[maxn][maxn];
int p;
int nsp, nr;
pii rat[maxn];
pii q[maxn * maxn];
int q1[maxn * maxn];
int f[maxn][maxn];
int dis[maxn];
int no[maxn][maxn];
pii can[2][maxn];
int l, r, lcan[2];

void bfs(pii st){
	l = r = 0;
	q[r++] = st;
	memset(f, 0, sizeof(f));
	f[st.first][st.second] = 1;
	memset(dis, -1, sizeof(dis));
	dis[no[st.first][st.second]] = 0;
	while(l != r){
		for(int i = 0; i < 4; i++) if(!f[step[i][0] + q[l].first][step[i][1] + q[l].second] && mp[step[i][0] + q[l].first][step[i][1] + q[l].second] != 'X'){
			q1[r] = q1[l] + 1;
			q[r].first = step[i][0] + q[l].first;
			q[r++].second = step[i][1] + q[l].second;
			f[step[i][0] + q[l].first][step[i][1] + q[l].second] = 1;
			if(mp[step[i][0] + q[l].first][step[i][1] + q[l].second] == 'R')
				dis[no[step[i][0] + q[l].first][step[i][1] + q[l].second]] = q1[r - 1];
		}
		l++;
	}
}
void bfs1(pii st, int kk = 1){
	l = r = 0;
	q[r++] = st;
	f[st.first][st.second] = kk;
	dis[no[st.first][st.second]] = 0;
	while(l != r){
		if(q1[l] == d){
			l++;
			continue;
		}
		for(int i = 0; i < 4; i++) if(f[step[i][0] + q[l].first][step[i][1] + q[l].second] != kk && mp[step[i][0] + q[l].first][step[i][1] + q[l].second] != 'X'){
			q1[r] = q1[l] + 1;
			q[r].first = step[i][0] + q[l].first;
			q[r++].second = step[i][1] + q[l].second;
			f[step[i][0] + q[l].first][step[i][1] + q[l].second] = kk;
			if(mp[step[i][0] + q[l].first][step[i][1] + q[l].second] == 'R')
				dis[no[step[i][0] + q[l].first][step[i][1] + q[l].second]] = q1[r - 1];
		}
		l++;
	}
}
int main(){
	freopen("input.txt","r", stdin);
	freopen("output.txt", "w", stdout);
//	ifstream cin("input.txt");
	memset(no, -1, sizeof(no));
	scanf("%d%d%d", &n, &m, &d);
	for(int i = 0; i < n; i++) scanf("%s", mp[i]);
	for(int i = 0; i < n; i++) for(int j = 0; j < m; j++) {
		if(mp[i][j] == '.') nsp++;
		else if(mp[i][j] == 'R'){
			nsp++;
			rat[nr].first = i;
			rat[nr].second = j;
			no[i][j] = nr++;
		}
	}
	if(nsp < 2 || nr > (d * 2 + 1) * (d * 2 + 1) + 5) {
		cout << "-1" << endl;
		return 0;
	}
	if(nr == 1){
		cout << rat[0].first + 1 << ' ' << rat[0].second + 1 << ' ';
		for(int i = 0; i < n; i++) for(int j = 0; j < m; j++) if(mp[i][j] == '.'){
			cout << i + 1 << ' ' << j + 1 << endl;
			return 0;
		}
	}

	bfs(rat[0]);
	int maxrou = 0;
	for(int i = 1; i < nr; i++) if(dis[i] == -1 || ((dis[maxrou] != -1) && (dis[i] > dis[maxrou]))) maxrou = i;
	bfs(rat[maxrou]);
	int maxrou1 = 0;
	for(int i = 1; i < nr; i++) if(dis[i] == -1 || ((dis[maxrou1] != -1) && (dis[i] > dis[maxrou1]))) maxrou1 = i;
	memset(f, 0, sizeof(f));
	bfs1(rat[maxrou], 1); lcan[0] = r;
	for(int i = 0; i < r; i++) can[0][i] = q[i];
	bfs1(rat[maxrou1], 2); lcan[1] = r;
	for(int i = 0; i < r; i++) can[1][i] = q[i];
	int kk = 3;
	for(int i = 0; i < lcan[0]; i++) for(int j = 0; j < lcan[1]; j++){
		memset(dis, -1, sizeof(dis));
		bfs1(can[0][i], kk++); bfs1(can[1][j], kk++);
		bool ans = 1;
		for(int k = 0; k < nr; k++) if(dis[k] == -1){
			ans = 0;
			break;
		}
		if(ans){
			cout << can[0][i].first + 1 << ' ' << can[0][i].second + 1 << ' ' << can[1][j].first + 1 << ' ' << can[1][j].second + 1 << endl;
			return 0;
		}
	}
	cout << -1 << endl;

	return 0;
}



