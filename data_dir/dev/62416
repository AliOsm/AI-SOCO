#include<bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef pair<ll,ll> pll;

#define endl '\n'
#define ff first
#define ss second
#define int long long
#define pb push_back
#define f(i,l,r) for(ll i=l;i<=r;i++)
#define rf(i,r,l) for(ll i=r;i>=l;i--)
#define Max 5000001
#define inf 2147483647
#define llinf 9223372036854775807
#define all(v) v.begin(),v.end()
#define bp(n) __builtin_popcount(n)
#define fast ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)

#define d1(a) cout<<a<<endl;
#define d2(a,b) cout<<a<<' '<<b<<endl;
#define d3(a,b,c) cout<<a<<' '<<b<<' '<<c<<endl;
#define d4(a,b,c,d) cout<<a<<' '<<b<<' '<<c<<' '<<d<<endl;
#define d5(a,b,c,d,e) cout<<a<<' '<<b<<' '<<c<<' '<<d<<' '<<e<<endl;

const ll N=5e2+5,mod=1e9+7,bit=61;

vector<ll> adj[N],curr,path;
ll vis[N]={0},n,m;

void get(ll u)
{
    if(path.size()>0 or vis[u]==2)
    {
        return;
    }
    if(vis[u]==1)
    {
        while(curr.size()>0 and curr.back()!=u)
        {
            path.pb(curr.back());
            curr.pop_back();
        }
        path.pb(u);
        reverse(all(path));
        return;
    }
    vis[u]=1;
    curr.pb(u);
    for(auto v:adj[u])
    {
        get(v);
    }
    curr.pop_back();
    vis[u]=2;
}

bool checkloop(ll u)
{
	if(vis[u]==1)
	{
		return 1;
	}
	if(vis[u]==2)
	{
		return 0;
	}
	vis[u]=1;
	for(auto v:adj[u])
	{
		if(checkloop(v))
		{
			return 1;
		}
	}
	vis[u]=2;
	return 0;
}
bool cycle()
{
    memset(vis,0,sizeof(vis));
	for(int i=1;i<=n;i++)
	{
		if(!vis[i] && checkloop(i))
		{
			return true;
		}
	}
	return false;
}


signed main()
{
    fast;

    ll t=1;
    //cin>>t;
    while(t--)
    {
        cin>>n>>m;
        f(i,1,m)
        {
            ll u,v;
            cin>>u>>v;
            adj[u].pb(v);
        }
        f(i,1,n)
        {
            if(!vis[i])
            {
                get(i);
                if(path.size()>0)
                {
                    break;
                }
            }
        }
        if(path.size()==0)
        {
            cout<<"YES\n";
            continue;
        }
        bool pos=0;
        f(i,0,(int)path.size()-1)
        {
            ll u=path[i],v;
            if(i+1==(int)path.size())
            {
                v=path[0];
            }
            else
            {
                v=path[i+1];
            }
            ll id;
            f(j,0,(int)adj[u].size()-1)
            {
                if(adj[u][j]==v)
                {
                    id=j;
                    break;
                }
            }
            adj[u].erase(adj[u].begin()+id);
            if(!cycle())
            {
                pos=1;
                break;
            }
            adj[u].pb(v);
        }
        if(pos)
        {
            cout<<"YES\n";
        }
        else
        {
            cout<<"NO\n";
        }
    }
    return 0;
}
















