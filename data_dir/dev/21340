#include<bits/stdc++.h>
using namespace std;

#define rep(i,n) for(int i=0;i<(int)n;i++)
#define each(i,c) for(__typeof(c.begin()) i=c.begin();i!=c.end();i++)
#define pb push_back
#define mp make_pair
#define all(c) c.begin(),c.end()
#define dbg(x) cerr<<__LINE__<<": "<<#x<<" = "<<(x)<<endl

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pi;
const int inf=(int)1e9;
const double EPS=1e-9, INF=1e12;

const int N = 131072;
int n, a[N];
int dat[2 * N];
/*
inline int sum(int a, int b, int k=0, int l=0, int r=N){
	if(b <= l || a >= r) return 0;
	if(a <= l && r <= b) return dat[k];
	return sum(a, b, k * 2 + 1, l, (l + r) / 2) + sum(a, b, k * 2 + 2, (l + r) / 2, r);
}
*/
inline int sum(int L , int R){
	L += N;
	R += N;
	int res = 0;
	for (;L<R; L>>=1, R>>=1) {
		if(R&1) res += dat[--R];
		if(L&1) res += dat[L++];
	}
	return res;
}

int main(){
	cin.tie(0); cin.sync_with_stdio(0);
	cin >> n;
	rep(i, n){
		cin >> a[i];
		if(a[i] == 1) dat[N + i]++;
	}
	for(int i = N - 1; i > 0; i--) dat[i] = dat[i * 2 + 1] + dat[i * 2 + 0];
	
	vector<pi> ans;
	for(int t = n; t > 0; t--){
		
		int pos = 0, x = 0, y = 0;
		while(pos < n){
			
			int lo = pos, hi = n + 1, mid;
			while(lo + 1 < hi){
				mid = (lo + hi) / 2;
				int k = sum(pos, mid);
				int l = max(k, mid - pos - k);
				if(l >= t) hi = mid;
				else lo = mid;
			}
			if(hi > n) break;
			
			int tmp = sum(pos, hi);
			assert(tmp != hi - pos - tmp);
			assert(max(tmp, hi - pos - tmp) == t);
			
			if(a[lo] == 1) x++;
			else y++;
			
			pos = hi;
			if(hi == n && (x > y && a[lo] == 1 || x < y && a[lo] == 2)){
				ans.pb(pi(max(x, y), t));
			}
		}
	}
	sort(all(ans));
	printf("%d\n", ans.size());
	rep(i, ans.size()) printf("%d %d\n", ans[i].first, ans[i].second);
	
	return 0;
}
