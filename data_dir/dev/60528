#include <bits/stdc++.h>
using namespace std;
#define F first
#define S second
const int N = 1e6 + 2;
string arr;
pair< int, pair<int,int> >seg[4*N];
void build(int id=1,int l=0,int r=arr.size()-1)
{
    if(l==r)
    {
        if(arr[l]=='(') seg[id].S.F=1;
        else seg[id].S.S=1;
        return;
    }
    int mid=(l+r)/2;
    build(id*2,l,mid);
    build(id*2+1,mid+1,r);
    int v=min(seg[id*2].S.F,seg[id*2+1].S.S);
    seg[id].F=seg[id*2].F+seg[id*2+1].F+v;
    seg[id].S.F=seg[id*2].S.F+seg[id*2+1].S.F-v;
    seg[id].S.S=seg[id*2].S.S+seg[id*2+1].S.S-v;
}

pair<int, pair<int,int> > query(int sq,int eq,int id=1,int l=0,int r=arr.size()-1)
{
    pair<int, pair<int,int> >p={0,{0,0}};
    if(l>=sq&&r<=eq) return seg[id];
    if(r<sq||l>eq) return p;
    int mid=(l+r)/2;
    pair<int, pair<int,int> > a=query(sq,eq,id*2,l,mid);
    pair<int, pair<int,int> > b=query(sq,eq,id*2+1,mid+1,r);
    pair<int, pair<int,int> > res;
    int v=min(a.S.F,b.S.S);
    res.F=a.F+b.F+v;
    res.S.F=a.S.F+b.S.F-v;
    res.S.S=a.S.S+b.S.S-v;
    return res;

}
int main()
{

    cin >> arr;
    build();
    int q , type , s , e , idx , val;
    cin >> q;
    while(q--){
            cin >> s >> e;
            s--;e--;
            cout << query(s,e).F*2 << endl;
    }
    return 0;
}
