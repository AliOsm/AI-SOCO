#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define mod 10000001
#define mkp make_pair
ll segtree[500005][2];
ll input[200011];
// ll lazy[500005];
void seg_form(ll low, ll high, ll pos)
{
    if(low>high)
        return ;
    if(low==high)
    {
        segtree[pos][0] = input[low];
        segtree[pos][1] = 1;
        return ;
    }
    ll mid = (low+high)>>1;
    seg_form(low,mid,2*pos+1);
    seg_form(mid+1,high,2*pos+2);
    if(segtree[2*pos+1][1]%2)
    {
        segtree[pos][0] = segtree[2*pos+1][0]|segtree[2*pos+2][0];
        segtree[pos][1] = segtree[2*pos+1][1] + 1;   
    }
    else
    {
        segtree[pos][0] = (segtree[2*pos+1][0])^(segtree[2*pos+2][0]);
        segtree[pos][1] = segtree[2*pos+1][1] + 1;
    }
}
void update(ll start,ll end, ll low, ll high, ll pos,ll value)
{
    if(low>high)
        return ;
    // if(lazy[pos]!=0)
    // {
    //     segtree[pos] += lazy[pos];
    //     if(low!=high)
    //     {
    //         lazy[2*pos+1] += lazy[pos];
    //         lazy[2*pos+2] += lazy[pos];
    //     }
    //     lazy[pos] = 0;
    // }
    if(start>high||end<low)
        return ;
    if(low==start&&high==end)
    {
        segtree[pos][0] = value;
        // if(low!=high)
        // {
        //     lazy[2*pos+1] += value;
        //     lazy[2*pos+2] += value;
        // }
        return ;
    }
    ll mid = (low+high)>>1;
    update(start,end,low,mid,2*pos+1,value);
    update(start,end,mid+1,high,2*pos+2,value);
    if(segtree[2*pos+1][1]%2)
    {
        segtree[pos][0] = segtree[2*pos+1][0]|segtree[2*pos+2][0];
        segtree[pos][1] = segtree[2*pos+1][1] + 1;   
    }
    else
    {
        segtree[pos][0] = (segtree[2*pos+1][0])^(segtree[2*pos+2][0]);
        segtree[pos][1] = segtree[2*pos+1][1] + 1;
    }
}
pair<ll,ll> get_value(ll start,ll end,ll low,ll high,ll pos)
{
    if(low>high)
    {
        ll first = -1;
        ll second = -1;
        pair<ll,ll>p;
        p = mkp(first,second);
        return p;
    }
    // if(lazy[pos]!=0)
    // {
    //     segtree[pos] += lazy[pos];
    //     if(low!=high)
    //     {
    //         lazy[2*pos+1] += lazy[pos];
    //         lazy[2*pos+2] += lazy[pos];
    //     }
    //     lazy[pos] = 0;
    // }
    if(start>high||end<low)
    {
        ll first = -1;
        ll second = -1;
        pair<ll,ll>p;
        p = mkp(first,second);
        return p;
    }
    if(start<=low&&high<=end)
    {
        pair<ll,ll>p;
        p = mkp(segtree[pos][0],segtree[pos][1]);
        return p;
    }
    ll mid = (low+high)>>1;
    pair<ll,ll>pp,pq,ans;
    pp = get_value(start,end,low,mid,2*pos+1);
    pq = get_value(start,end,mid+1,high,2*pos+2);
    ll value = max(pp.first,pq.first);
    ll indx;
    if(value == pp.first)
        indx = pp.second;
    else
        indx = pq.second;
    ans = mkp(value,indx);
    return ans;
    // cout<<pp.first<<" "<<pq.first<<" \n";
    // cout<<max(pp.first,pq.first)<<"\n";
    // segtree[pos][0] = max(pp.first , pq.first);
    // cout<<segtree[pos][0]<<" ";
    // if(segtree[pos][0]==pp.first)
    //     segtree[pos][1] = pp.second;
    // else
    //     segtree[pos][1] = pq.second;
    // cout<<segtree[pos][0]<<" "<<segtree[pos][1]<<"\n";
}
int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ll t,sum,i,j,k,l,r,n,q,p;
    cin>>n>>q;
    ll sz=1;
    while(n--)
        sz = sz*2;
    n = sz;
    for(i=0;i<n;i++)
    {
        cin>>input[i];
    }
    seg_form(0,n-1,0);
    while(q--)
    {
        cin>>l>>r;
        update(l-1,l-1,0,n-1,0,r);
        cout<<segtree[0][0]<<"\n";
    }
    return 0;
}
 