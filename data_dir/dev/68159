/* Author haleyk10198 */
/* �@��:  haleyk10198 */
/* CF handle: haleyk100198*/
/* FOR ACM-ICPC WF*/
#include <bits/stdc++.h>

using namespace std;
using ll = long long;
using vi = vector<int>;
using vvi = vector<vi>;
using pii = pair<int, int>;

#define pb push_back

constexpr auto MOD = 1000000007LL;
constexpr auto LINF = (1LL << 60);
constexpr auto INF = 2147483647LL;
constexpr auto PI = 3.1415926535897932384626433;
constexpr auto EPS = 1E-9;

template<typename T1, typename T2>
ostream &operator<<(ostream &out, const pair<T1, T2> p) {
    out << p.first << ' ' << p.second;
    return out;
}

template<typename T1, typename T2>
istream &operator>>(istream &in, pair<T1, T2> &p) {
    in >> p.first >> p.second;
    return in;
}

template<typename T>
istream &operator>>(istream &in, vector<T> &v) {
    for (auto &x: v)
        in >> x;
    return in;
}

template<typename T>
ostream &operator<<(ostream &out, vector<T> v) {
    for (int i = 0; i < v.size(); i++)
        out << v[i] << (i + 1 == v.size() ? '\n' : ' ');
    out.flush();
    return out;
}

#if __cplusplus < 201703L
#define mp make_pair
#endif

int n;
string str;

pii p;

int main() {
#ifdef LOCAL
    freopen("../input.txt", "r", stdin);
//		freopen("output.txt","w",stdout);
    freopen("../debug.txt", "w", stderr);
#endif
    ios_base::sync_with_stdio(false);

    cin >> n >> str >> p;
    if(n < abs(p.first)+abs(p.second) || (n+p.first+p.second)%2){
        cout << -1 << endl;
        return 0;
    }

    function<void(pii&, char)> work = [](pii &p, char ch){
        if(ch == 'D') p.second -= 1;
        else if(ch == 'U') p.second += 1;
        else if(ch == 'R') p.first += 1;
        else if(ch == 'L') p.first -= 1;
    };

    function<void(pii&, char)> unwork = [](pii &p, char ch){
        if(ch == 'U') p.second -= 1;
        else if(ch == 'D') p.second += 1;
        else if(ch == 'L') p.first += 1;
        else if(ch == 'R') p.first -= 1;
    };

    pii ori_end = accumulate(str.begin(), str.end(), pair(0, 0), [&work](pii x, char ch){
        work(x, ch);
        return x;
    });

    if(ori_end == p){
        cout << 0 << endl;
        return 0;
    }

    function<int(pii, pii)> dist = [](pii x, pii y){
        return abs(x.first-y.first)+abs(x.second-y.second);
    };

    int res = INF;
    for(int i = 0, j = 0; i < n; i++){
        if(j < i) j++;

        while(j < n && dist(ori_end, p) > j-i){
            unwork(ori_end, str[j++]);
        }

        if(dist(ori_end, p) > j-i)
            break;

        res = min(res, j-i);

        if(i < j) work(ori_end, str[i]);
    }

    cout << (res == INF? -1: res) << endl;

    return 0;
}
