/*
 * temp.cpp
 *
 *  Created on: 2012-7-18
 *      Author: BSBandme
 */
#include <iostream>
#include <fstream>
#include <string.h>
#include <cstdio>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <cassert>
#include <iomanip>
#include <math.h>
#include <deque>
#include <utility>
#include <map>
#include <set>
#include <bitset>
#include <numeric>
#include <climits>
#include <cctype>
#include <cmath>
#include <cstdlib>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef pair<int, int> pll;
const double pi = acos(0) * 2;
template <class T> inline T abs1(T a) {return a < 0 ? -a : a;}
template <class T> inline T max1(T a, T b) {return a > b ? a : b;}
template <class T> inline T min1(T a, T b) {return a < b ? a : b;}
template <class T> inline T gcd1(T a, T b) {
	if(a < b) swap(a, b);
	if(a % b == 0) return b;
	return gcd1(b, a % b);
}
template <class T> inline T lb(T num) {return num & (-num); }
template <class T> inline int bitnum(T num){
	int ans = 0;
	while(num){
		num -= lb(num);
		ans++;
	}
	return ans;
}
long long pow(long long n, long long m, long long mod = 0){
	long long ans = 1;
	long long k = n;
	while(m){
		if(m & 1) {
			ans *= k;
			if(mod) ans %= mod;
		}
		k *= k;
		if(mod) k %= mod;
		m >>= 1;
	}
	return ans;
}

const int maxn = 3000000;
int n, l;
int orig[maxn];
vector <int> stat1[30];
bool f[maxn];

int main(){
//	freopen("input.txt","r", stdin);
//	ifstream cin("input.txt");
	scanf("%d", &n);
	for(int i = 0; i < n; i++)scanf("%d", orig + i);
	for(int i = 0; i < 22; i++){
		stat1[i].push_back(bool(orig[0] & (1 << i)));
		for(int j = 1; j < n; j++){
			if(orig[j] & (1 << i)) stat1[i].push_back(stat1[i][j - 1] + 1);
			else stat1[i].push_back(stat1[i][j - 1]);
		}
	}
	for(int j = 0; j < n; j++){
		f[orig[j]] = 1;
		vector <int> :: iterator it;
		int dis[2][30];
		memset(dis, -1, sizeof(dis));
		for(int i = 0; i < 22; i++) if((orig[j] & (1 << i)) == 0){
			it = lower_bound(stat1[i].begin(), stat1[i].end(), stat1[i][j]);
			if(it != stat1[i].end()) dis[0][i] = it - stat1[i].begin();
			it = lower_bound(stat1[i].begin(), stat1[i].end(), stat1[i][j] + 1);
			if(it != stat1[i].end()) dis[1][i] = it - stat1[i].begin();
		}
		sort(dis[0], dis[0] + 22);
		sort(dis[1], dis[1] + 22);
		int num = orig[j];
		for(int i = 0; i < 22; i++) {
			if(dis[1][i] == -1) continue;
			num |= orig[dis[1][i]];
			f[num] = 1;
			int num1 = num;
			for(int t = 21; t >= 0 && dis[0][t] != -1; t--){
				num1 |= orig[dis[0][t]];
				f[num] = 1;
			}
		}
	}
	int ans = 0;
	for(int i = 0; i < (1 << 21); i++) if(f[i]) ans++;
	cout << ans << endl;

	return 0;
}



