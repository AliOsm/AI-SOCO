
 #include "bits/stdc++.h"
 using namespace std; 
 
 vector<int> Graph[62505];
 vector<int> V;
 int Visited[62505] , N , m , q , p;
 char Array[251][251];
 queue<int> Q;

 int bfs( int root ){
  long long sound = 0LL;
  int i , u , x , y , limit;
  Q.emplace( root );
  V.emplace_back( root );
  Visited[root] = 1;

     while( !Q.empty() ){
      u = Q.front();
      Q.pop();
      limit = 1 << (Visited[u]-1);
      x = u / m; 
      
         if( u % m != 0 )
          ++x;
      
      y = u - ( x - 1 ) * m; 

         if( Array[x][y] >= 'A' && Array[x][y] <= 'Z' ){  
          sound = sound + (( q * ( Array[x][y] - 'A' + 1 ) ) / limit);
          
             if( sound > p )
              return 1;
        }   

         for( i = 0 ; i < Graph[u].size() && Visited[u] <= 24 ; ++i ){
             if( Visited[Graph[u][i]] == 0 ){
              Q.emplace( Graph[u][i] );	
              V.emplace_back( Graph[u][i] );
              Visited[Graph[u][i]] = Visited[u] + 1;
            }  
        }
    }

     if( sound <= p )
      return 0;
     else
      return 1;  	
}

 int main(){
  int i , j , Count = 1 , Ans = 0;
  char ch;
  scanf( "%d%d%d%d" , &N , &m , &q , &p );

     for( i = 1 ; i <= N ; ++i ){
         for( j = 1 ; j <= m ; ++j ){
          scanf( "%c" , &ch );

             while( ch != '.' && ch != '*' && !( ch >= 'A' && ch <= 'Z' ) )
              scanf( "%c" , &ch );
          
          Array[i][j] = ch;    
        }
    }

     for( i = 1 ; i <= N ; ++i ){
         for( j = 1 ; j <= m ; ++j ){
             if( Array[i][j] == '*' ){
              ++Count;
              continue;
            }  

             if( i > 1 && Array[i - 1][j] != '*' )
              Graph[Count].emplace_back( Count - m );

             if( i < N && Array[i + 1][j] != '*' )
              Graph[Count].emplace_back( Count + m );

             if( j < m && Array[i][j + 1] != '*' )
              Graph[Count].emplace_back( Count + 1 );
             
             if( j > 1 && Array[i][j - 1] != '*' )
              Graph[Count].emplace_back( Count - 1 );

          ++Count;     	
        }
    }
  
  Count = 1;

     for( i = 1 ; i <= N ; ++i ){
         for( j = 1 ; j <= m ; ++j ){
             if( Array[i][j] == '*' ){
              ++Count;
              continue;
            }  
          
          Ans += bfs( Count );     
          ++Count;	
             
             for( int k = 0 ; k < V.size() ; ++k )
              Visited[V[k]] = 0;	

             while( !Q.empty() )
              Q.pop();	
          
          V.clear();
        } 
    }

  printf( "%d\n" , Ans );
  return 0;
}