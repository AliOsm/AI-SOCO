#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long 

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << endl;
        //use cerr if u want to display at the bottom
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define trace(...)
#endif

typedef trie<string,null_type,trie_string_access_traits<>,pat_trie_tag,trie_prefix_search_node_update> pref_trie;
typedef tree<long int,null_type,less<long int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
typedef cc_hash_table<long int,long int, hash<long int>, equal_to<long int>, direct_mask_range_hashing<long int>, 
hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;
typedef gp_hash_table<long int,long int> HashTable;

long int n,m;
vector<vector<long int>> v;

long int getCost(long int col){
	vector<long int> shift(n);

	for(long int i = 0; i < n; i++)
		shift[i] += n + i;


	for(long int i = 0; i < n; i++){
		long int val = v[i][col];
		long int minAllowed = col + 1;
		long int diff = val - minAllowed;
		long int maxAllowed = (n - 1) * m + minAllowed;
		
		if(diff % m)
			continue;

		if(val > maxAllowed)
			continue;

		long int row = diff / m;
		if(row < i)
			shift[i - row]--;
		else
			shift[(i + n - row) % n]--;
	}

	return *min_element(shift.begin(),shift.end());
}


int main(){
   IOS;
 /*    #ifndef ONLINE_JUDGE
         freopen("in.txt",  "r",  stdin);
         freopen("out.txt", "w", stdout);
     #endif */
   
   cin>>n>>m;
   v.resize(n,vector<long int>(m));
  

   for(long int i = 0; i < n; i++)
   	  for(long int j = 0; j < m; j++)
   	  	  cin>>v[i][j];

   long int ans = 0;

   for(long int i = 0; i < m; i++)
   	  ans += getCost(i);
   
   cout<<ans;
   return 0;
}