#include<cstdio>
#include<set>
#include<algorithm>
#include<vector>
#include <chrono>
#include <random>
using namespace std;

char buff[44];
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r)
{
	uniform_int_distribution<int> uid(l, r);
	return uid(rng);
}

int main(){
    
    int N, K; scanf("%d%d",&N,&K);
    srand(4444);

    int D = 0;
    int s = 1, cur = 1;
    while(s<N){
        cur *= K;
        s += cur;
        D++;
    }

    int U, V;
    vector<int> C;
    set<pair<int,int>> S;
    while(1){
        int u=rand(1, 1<<30)%N, v=rand(1, 1<<30)%N;
        u++, v++;
        if(u==v) continue;
        if(u>v) swap(u,v);
        if(S.count({u,v})) continue;

        S.insert({u,v});
        vector<int> c;

        for(int i=1;i<=N;i++) if(i!=u&&i!=v){
            printf("? %d %d %d\n", u, i, v);
            fflush(stdout);
            scanf("%s", buff);
            if(buff[0]=='Y') c.push_back(i);
        }

        if((int)c.size() == 2*D-1){
            U=u, V=v, C=c;
            break;
        }
    }

    random_shuffle(C.begin(), C.end());
    for(int c:C){
        int s = 0;
        for(int d:C) if(d!=c){
            printf("? %d %d %d\n", U, d, c);
            fflush(stdout);
            scanf("%s",buff);
            if(buff[0]=='Y') s++;
        }
        if(s==D-1){
            printf("! %d\n", c);
            fflush(stdout);
            return 0;
        }
    }
}