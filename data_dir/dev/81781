// High above the clouds there is a rainbow...

#include<bits/stdc++.h>

#define F first
#define S second
#define PB push_back
#define sz(s) int((s).size())
#define bit(n,k) (((n)>>(k))&1)

using namespace std;

typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef long double ld;

const int maxn=3e5+10,mod=1e9+7;
const ll inf=1e18;

struct Car{
    ll val;
    ld df;
    int cnt,id;    
};

struct Cmp1{
    bool operator() (Car a,Car b){
	return a.id < b.id;
    }
};
struct Cmp2{
    bool operator() (Car a,Car b){
	return a.df < b.df;
    }
};

ll B,S;
set<Car,Cmp1> st1;
set<Car,Cmp2> st2;

void Res(int n){
    B=0,S=0;
    st1.clear(); st2.clear();
    Car c; c.val=0, c.df=inf, c.cnt=n, c.id=0;
    st1.insert(c), st2.insert(c);
}

int main(){
    ios_base::sync_with_stdio(false);cin.tie(0);
    
    int n,q; cin>>n>>q;
    Res(n);
    while(q--){
	int task; cin>>task;
	if(task==1){
	    int k; cin>>k;
	    n+=k;
	    Res(n);
	}
	if(task==2){
	    int k; cin>>k;
	    ll val= -1ll*n*S -B;
	    Car c= *st1.rbegin();
	    st1.erase(c), st2.erase(c);

	    if(c.val + B + S*c.id == 0){
		c.cnt+=k;
		st1.insert(c), st2.insert(c);
	    }
	    else{
		c.df= ld(c.val - val) / c.cnt;
		Car d; d.val= val, d.cnt=k, d.df=inf, d.id=n;

		st1.insert(c), st2.insert(c);
		st1.insert(d), st2.insert(d);
	    }
	    n+=k;
	}
	if(task==3){
	    int b,s; cin>>b>>s;
	    S+=s, B+=b;
	    assert(S<inf);
	    while((st2.begin()->df)<=S){
		Car c=*st2.begin();
		Car d=*(++st1.find(c));
		st1.erase(c), st2.erase(c);
		st1.erase(d), st2.erase(d);
		c.df= (d.df==inf ? inf : ((c.df*c.cnt) + (d.df*d.cnt)) / (c.cnt + d.cnt) );
		c.cnt+= d.cnt;

		st1.insert(c), st2.insert(c);
	    }	    
	}
	Car c=*st1.rbegin();
	cout<< c.id + 1<<" "<< c.val + S*c.id + B <<"\n";
    }
}
// Deathly mistakes:
//  * Read the problem curfully.
//  * Check maxn.
//  * Overflows.


// #pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math")
// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
