// amiD
#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define endl '\n'
#define Endl '\n'
#define fi first
#define ii pair<ll,ll>
#define se second
#define ld long double
#define mod 1000000007
#define popcount __builtin_popcountll
#define PI acos(-1.0)
using namespace std;
ll n, T, easy, hard;
ii a[200010];
int main(){
    int t;
    cin>>t;
    while(t--){
        cin>>n>>T>>easy>>hard;
        ll all_easy = 0, all_hard = 0;
        for(int i=0;i<n;i++){
            int x; scanf("%d", &x);
            if(x==1)a[i].se = hard;
            else a[i].se = easy;
            all_hard+=x;
            all_easy+=(1-x);
        }
        for(int i=0;i<n;i++)scanf("%lld", &a[i].fi);
        if(easy*all_easy + hard*all_hard <=T){
            cout<<n<<endl;
            continue;
        }
        sort(a,a+n);
        ll cnt_easy = 0, cnt_hard = 0;
        ll amid = 0;
        for(int i=0;i<n;i++){
            ll cur = a[i].fi-1;
            ll need = cnt_easy * easy + cnt_hard * hard;
            // cout<<"hello  "<<cur<<" "<<need<<endl;
            if(need>cur){
                // cant add anything
                if(a[i].se==hard)cnt_hard++;
                else cnt_easy++;
                continue;
            }
            ll cur_score = cnt_easy + cnt_hard;
            ll rem_time = cur-need;
            amid = max(amid, cur_score);
            ll rem_easy = all_easy - cnt_easy;
            ll rem_hard = all_hard - cnt_hard;
            ll add = rem_time / easy;
            if(add>rem_easy){
                cur_score+=rem_easy;
                rem_time-=easy*rem_easy;
            }
            else{
                cur_score+=add;
                rem_time = 0;
            }
            add = rem_time / hard;
            if(add>rem_hard){
                cur_score+=rem_hard;
                rem_time-=hard*rem_hard;
            }
            else{
                cur_score+=add;
                rem_time = 0;
            }
            amid = max(amid, cur_score);
            // cout<<"END "<<i<<" "<<cur_score<<"  "<<cnt_easy<<"  "<<cnt_hard<<endl;
            if(a[i].se==hard)cnt_hard++;
            else cnt_easy++;
        }
        cout<<amid<<endl;
    }
}
/*
1
4 16 3 6
1 0 1 1
8 3 5 6
*/
