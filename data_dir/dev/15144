#include <cstdio>
#include <cstring>
#include <cassert>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <queue>
#include <set>
#include <map>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)


typedef long long ll;

struct fract
{
	ll n,m;
	fract(ll n=0, ll m=1):n(n),m(m){}
	fract operator+(const fract& b) const
	{
		return fract(n*b.m+m*b.n, m*b.m);
	}
	fract operator-(const fract& b) const
	{
		return fract(n*b.m-m*b.n, m*b.m);
	}
	bool operator<(const fract& b) const
	{
		return ((*this)-b).n<0;
	}
	bool operator>(const fract& b) const
	{
		return ((*this)-b).n>0;
	}
	bool operator>=(const fract& b) const
	{
		return ((*this)-b).n>=0;
	}
};

const int MAXN=100000;

vector<vector<int> > v;
vector<int> keep;
int cnt[MAXN];
bool inSet[MAXN];

int main()
{
	int n,m,k;
	scanf("%d%d%d",&n,&m,&k);
	REP(i,n) inSet[i]=true;
	REP(i,k)
	{
		int t;
		scanf("%d",&t);
		t--;
		inSet[t]=false;
		keep.push_back(t);
	}
	fract res=0;
	v.resize(n);
	REP(i,m)
	{
		int a,b;
		scanf("%d%d",&a,&b);
		a--;
		b--;
		v[a].push_back(b);
		v[b].push_back(a);
	}
	set<pair<fract,int> > st;
	REP(i,n)
	{
		REP(j,v[i].size())
			if(inSet[v[i][j]])
				cnt[i]++;
		if(inSet[i])
			st.insert(make_pair(fract(cnt[i],v[i].size()),i));
	}
	fract prev=0;
	while(!st.empty())
	{
		fract dist=st.begin()->first;
		int id=st.begin()->second;
		st.erase(st.begin());
		if(dist>=prev)
		{
			res=max(res,dist);
			prev=dist;
		}
		inSet[id]=false;
		for(int i=0;i<v[id].size();i++)
		{
			int to=v[id][i];
			if(inSet[to])
			{
				st.erase(make_pair(fract(cnt[to],v[to].size()),to));
				cnt[to]--;
				st.insert(make_pair(fract(cnt[to],v[to].size()),to));
			}
		}
	}

	REP(i,n) inSet[i]=true;
	REP(i,n) cnt[i]=0;
	REP(i,k) inSet[keep[i]]=false;
	REP(i,n)
	{
		REP(j,v[i].size())
			if(inSet[v[i][j]])
				cnt[i]++;
		if(inSet[i])
			st.insert(make_pair(fract(cnt[i],v[i].size()),i));
	}
	while(st.begin()->first<res)
	{
		fract dist=st.begin()->first;
		int id=st.begin()->second;
		st.erase(st.begin());
		if(dist>=prev)
		{
			res=max(res,prev);
			prev=dist;
		}
		inSet[id]=false;
		for(int i=0;i<v[id].size();i++)
		{
			int to=v[id][i];
			if(inSet[to])
			{
				st.erase(make_pair(fract(cnt[to],v[to].size()),to));
				cnt[to]--;
				st.insert(make_pair(fract(cnt[to],v[to].size()),to));
			}
		}
	}
	printf("%d\n",st.size());
	for(typeof st.begin() it=st.begin();it!=st.end();it++)
	{
		printf("%d ",it->second+1);
	}
	puts("");

	return 0;
}
