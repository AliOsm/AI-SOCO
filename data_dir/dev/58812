/*
author: orthodoxparadox
07-Oct-2018
23:32:57
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define dbl long double
#define int ll
#define ll long long
#define pii pair<int, int>
#define fup(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define fnu for(ll i = 0; i < n; i++)
#define rev(Y) reverse(all(Y))
#define oiint ostream_iterator<int>(cout, " ") 
#define pb emplace_back
#define mp make_pair
#define ff first
#define ss second
#define endl '\n'
#define all(a) a.begin(), a.end()
#define initialise(a, x) memset(a, x, sizeof(a))
#define onlyunique(v) v.erase(unique(all(v)), v.end()); //only for sorted vector
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize ("O3")
#pragma GCC optimize ("O2")
#pragma GCC optimize("Ofast")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#ifdef __APPLE__
#define dbg(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){cerr << name << " : " << arg1 << endl;}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << "  ";
	__f(comma + 1, args...);}
#else
#define dbg(...)
#endif
template <typename X> ostream& operator << (ostream& x,const vector<X>& v){for(int i=0;i<v.size();++i) x<<v[i]<<" ";return x;} 
template <typename X> ostream& operator << (ostream& x,const set<X>& v){for(auto it:v) x<<it<<" ";return x;} 
template <typename X, typename Y> ostream& operator << (ostream& x, const pair<X,Y>& v) {x<<v.ff<<" "<<v.ss;return x;} 
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
struct pair_hash {inline std::size_t operator()(const std::pair<int, int> & v) const {return v.first*31+v.second;}};
const int mod = 998244353;

int takemod(int a){return ((a%mod)+mod)%mod;}

int fast_exp(int base, int expo) {
	int res=1;
	while(expo>0) {
		if(expo&1) res=(res*base)%mod;
		base=(base*base)%mod;
		expo>>=1;}
	return res;}

int modinv(int a){return takemod(fast_exp(takemod(a), mod-2));}


bool is_cube(int a)
{
	int x = cbrtl(a);
	return a == x*x*x;
}
bool is_square(int a)
{
	int x = sqrtl(a);
	return a == x*x;
}

bool is_fourth(int a)
{
	int x = sqrtl(a);
	int y = sqrtl(x);
	dbg(y);
	return (a == y*y*y*y);
}

int fourth(int a)
{
	int x = sqrtl(a);
	x = sqrtl(x);
	return x;
}

signed main(){
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	#ifdef __APPLE__
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("error.txt", "w", stderr);
	#endif
	time_t t1, t2;
	t1 = clock();

	int n;
	cin >> n;
	int a[n];
	map<int, int> m;
	vector<int> left;
	for(int i = 0; i < n; i++)
	{
		cin >> a[i];
		if(is_square(a[i]))
		{
			if(is_fourth(a[i])){
				dbg(a[i], 1);
				int x = fourth(a[i]);
				m[x]+=4;
			}
			else
			{
				dbg(a[i], 2);
				int x = sqrtl(a[i]);
				// dbg(x);
				m[x] += 2;
			}
		}
		else if(is_cube(a[i]))
		{
			dbg(a[i], 3);
			int x = cbrtl(a[i]);
			m[x] += 3;
		}
		else
		{
			dbg(a[i], 4);
			left.pb(a[i]);
		}
	}
	int r = left.size();
	bool blocked[r];
	initialise(blocked, 0);
	for(int i = 0; i < r; i++)
	{
		for(int j = 0; j < r; j++)
		{
			if(i == j) continue;
			if(left[i] == left[j]) continue;
			if(blocked[i] && blocked[j]) continue;
			int x = __gcd(left[i], left[j]);
			if(x == 1)
			{
				continue;
			}
			if (!blocked[i])
			{
				m[x]++;
				m[left[i] / x]++;
			}
			if (!blocked[j])
			{
				m[x]++;
				m[left[j] / x]++;
			}
			blocked[i] = 1;
			blocked[j] = 1;
		}
	}
	int cnt = 0;
	map<int, int> M;
	for(int x = 0; x < r; x++)
	{
		if(blocked[x]) continue;
		int i = left[x];
		bool f = 0;
		for (auto p : m)
		{
			int j = p.ff;
			if (i % j == 0)
			{
				m[j]++;
				m[i / j]++;
				f = 1;
				break;
			}
		}
		if (!f)
		{
			M[left[x]]++;
		}
	}
	int res = 1;
	for(auto i : m)
	{
		res = takemod(res * (i.ss + 1));
	}
	for(auto i : M)
	{
		res = takemod(res * (i.ss + 1));
		res = takemod(res * (i.ss + 1));
	}
	cout << res << endl;
	t2 = clock(); cerr << "time taken: " << t2-t1;
	return 0;
}