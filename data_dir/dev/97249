#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>
#include <list>
#include <set>
#include <algorithm>
#include <cmath>
#include <queue>
#include <iterator>
#include <functional>
#include <numeric>
#include <cmath>
#include <stack>
#include <limits>

using namespace std;

#define ll long long
#define f0(i,n)for(i=0;i<n;i++)
#define f1(i,n)for(i=1;i<=n;i++)
#define fc(i,c,n)for(i=c;i<=n;i++)
#define f0r(i,n)for(i=n-1;i>=0;i--)
#define f1r(i,n)for(i=n;i>0;i--)
#define fcr(i,c,n)for(i=n;i>=c;i--)
#define IO ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);

typedef list<ll> LST;
typedef vector<ll> VEC;
typedef map<ll, ll> MAP;

ll i, j, q;

int main() {
	IO;
	ifstream fin("Text.txt");
	ll n, k, a, b;
	cin >> n >> k;
	ll total = 0;
	VEC jobs(n),persuade(n),totalsum(n+1);
	f0(i, n) 
		cin >> jobs[i];
	f0(i, n)
		cin >> persuade[i];

	vector<list<ll> >vc(k + 1, list<ll>());
	list<ll>prior;
	ll empty = 0;
	f0(i, n) {
		vc[jobs[i]].push_back(persuade[i]);
	}
	list<ll>::iterator it;
	f1(i, k) {
		if (vc[i].size() == 0)
			empty++;
		else if (vc[i].size() > 1) {
			vc[i].sort(greater<ll>());
			it = vc[i].begin();
			it++;
			while (it != vc[i].end()) {
				prior.push_back(*it);
				it++;
			}
		}
	}
	prior.sort();
	it = prior.begin();
	while (it != prior.end() && empty) {
		total += *it;
		it++;
		empty--;
	}
	cout << total << endl;
	return 0;
}