#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

struct node
{
	node *l, *r;
	int m;
	node() : l(0), r(0), m(1<<30) {};
};
 
void insert(node *u, int x)
{
	for (int i = 17; i >= 0; --i)
	{
		if (x&1<<i)
		{
			if (!u->r)
				u->r = new node();
			u = u->r;
			u->m = min(u->m, x);
		}
		else
		{
			if (!u->l)
				u->l = new node();
			u = u->l;
			u->m = min(u->m, x);
		}
	}
}

int find(node *u, int y, int x)
{
	int r = 0;
	for (int i = 17; i >= 0; --i)
	{
		if (x&1<<i)
		{
			if (u->l && u->l->m <= y)
				u = u->l;
			else
			{
				if (u->r && u->r->m <= y)
					u = u->r, r ^= 1<<i;
				else
					return -1;
			}
		}
		else
		{
			if (u->r && u->r->m <= y)
				u = u->r, r ^= 1<<i;
			else
			{
				if (u->l && u->l->m <= y)
					u = u->l;
				else
					return -1;
			}
		}
	}

	return r;
}

int main()
{
	//freopen("a.txt", "r", stdin);
	ios_base::sync_with_stdio(0), cin.tie(0);

	int q;
	cin >> q;
	int t, x, k, s;

	vector<node*> mp(100005);
	vector<vector<int>> divs(100005);

	for (int i = 1; i <= 100000; ++i)
	{
		mp[i] = new node();
		for (int j = i; j <= 100000; j += i)
			divs[j].push_back(i);
	}

	while (q--)
	{
		cin >> t >> x;
		if (t == 1)
		{
			for (auto i : divs[x])
				insert(mp[i], x);
		}
		else
		{
			cin >> k >> s;
			if (x % k != 0)
				cout << "-1\n";
			else
				cout << find(mp[k], s-x, x) << "\n";
		}
	}

	return 0;
}