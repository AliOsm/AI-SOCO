#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <unordered_map>
#include <sstream>
#include <iostream>
#include <cmath>
#include<cstring>
#include <cstdio>
#include <stack>
#include<iomanip>
#include<queue>
#include<functional>
#include<iterator>
#include<new>
#include<cstdlib>
using namespace std;
#define pi 3.141592653589793
#define ii  pair<int,int>
#define ll long long
#define p10(ans) printf("%0.10f\n", ans)
#define pr(ans) printf("%d\n", ans)
#define scc(x)  scanf("%c\n", &c)
#define pll(ans) printf("%lld\n", ans)
#define scll(x) scanf("%lld",&x)
#define scd(a)  scanf("%lf", &a)
#define sci(x)  scanf("%d",&x)
#define pc(ans)  printf("%c", ans)
#define pd(a)    printf("%lf\n", a)
#define scanfchararray(arr) scanf("%s", arr)
#define printfstring(s)    printf("%s ", s.c_str())
#define all(v)             v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)            ((int)((v).size()))
#define mod 1000000007
#define mem(arr,d) memset(arr,d,sizeof(arr))
#define inf 10000000000000000
#define ninf -10000000000000000;
#define eps 1e-7
#define nearestPowerOfTwo(S) ((int)pow(2.0, (int)((log((double)S) / log(2.0)) + 0.5)))
/*ll power(ll base, ll exp) {
base %= mod;
ll result = 1;
while (exp > 0) {
if (exp & 1)
result = (result * base) % mod;
base = (base * base) % mod;
exp >>= 1;
}
return result;
}
*/
/*long long gcd(long long a, long long b)
{
if (b == 0)return a; return gcd(b, a%b);
}

/*long long lcm(long long a, long long b) {
return  a * b / gcd(a, b);
}
*/
const int shift = 3500;
int arr[7000][7000];
int dx[] = { 1,0,0,-1 };
int dy[] = { 0,-1,1,0 };
bool valid(int x, int y) {
	if (x < 0 || y < 0 || x>=7000 || y>=7000)return 0;
	return 1;
}
void dfs(int x=shift, int y=shift){
	if (arr[x][y] < 4)return;
	int temp = arr[x][y];
	arr[x][y] %= 4;
	for (int i = 0; i < 4; ++i) {
		int toi = x + dx[i];
		int toj = y + dy[i];
		if (valid(toi, toj))
		{
			arr[toi][toj] += temp / 4;
			dfs(toi, toj);
		}
	}
}
int main() 
{
	int n, t, x, y;
	sci(n); sci(t);
	arr[shift][shift] = n;

	dfs(shift, shift);

	while (t--) {
		sci(x); sci(y);
		x += shift; y += shift;
		pr((valid(x, y) ? arr[x][y] : 0));
	}
	return 0;
}