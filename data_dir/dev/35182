#include <bits/stdc++.h>

using namespace std;

const int N = 300005;

int a[N];
vector<int> adj[N];
int tmp[N];

int dfs(int u, int p) {
  int mx = INT_MIN;
  for (int v : adj[u]) {
    if (v != u && v != p) {
      mx = max(mx, a[v] + 2);
      mx = max(mx, dfs(v, u));
    }
  }
  return mx;
}

int main() {
#ifndef ONLINE_JUDGE
  freopen("input.in", "r", stdin);
#endif
  int n;
  scanf("%d", &n);
  for (int i = 0; i < n; ++i) {
    scanf("%d", a + i);
  }
  for (int i = 1; i < n; ++i) {
    int u, v;
    scanf("%d %d", &u, &v);
    --u, --v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  int max_idx = max_element(a, a + n) - a;
  int cnt = count(a, a + n, a[max_idx]);
  if (cnt == 1) {
    int res = a[max_idx];
    for (int s : adj[max_idx]) {
      res = max(res , dfs(s, max_idx));
    }
    printf("%d\n", res);
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    adj[i].push_back(i);
    sort(adj[i].begin(), adj[i].end());
  }
  int sz = adj[max_idx].size();
  for (int i = 0; i < sz; ++i) {
    tmp[i] = adj[max_idx][i];
  }
  for (int i = 0; i < n; ++i) {
    if (i != max_idx && a[i] == a[max_idx]) {
      sz = set_intersection(adj[i].begin(), adj[i].end(), tmp, tmp + sz, tmp) - tmp;
    }
  }
  if (sz > 0) {
    printf("%d\n", a[max_idx] + 1);
  } else {
    printf("%d\n", a[max_idx] + 2);
  }
}
