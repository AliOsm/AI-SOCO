#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <cassert>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>

using namespace std;

#define f first
#define s second
#define pb push_back
#define pp pop_back
#define mp make_pair
#define ll long long

const int N = 3e5;
const int inf = 1e9;

int n, q;
char a[N];
string need = "2017";

struct node {
	int d[5][5];
	node() {
		for (int i = 0;i < 5;i++)
			for (int j = 0;j < 5;j++)
				if (i != j)
					d[i][j] = inf;
	} 
} e, t[N * 4];

node operator + (node a, node b) {
	node c;
	for (int i = 0;i < 5;i++) c.d[i][i] = inf;
	for (int i = 0;i < 5;i++) {
		for (int j = i;j < 5;j++) {
			for (int k = i;k <= j;k++) {
				c.d[i][j] = min(c.d[i][j], a.d[i][k] + b.d[k][j]);
			}
		}
	}
	return c;
}

void build(int v = 1, int tl = 1, int tr = n) {
	if (tl == tr) {
		if (a[tl] == '6') {
			t[v].d[3][3] = t[v].d[4][4] = 1;
		} else {
			for (int i = 0;i < 4;i++) {
				if (a[tl] == need[i]) {
					t[v].d[i][i] = 1;
					t[v].d[i][i + 1] = 0;
				} 
			}
		}
		return;
	}
	int tm = (tl + tr) / 2;
	build(v * 2, tl, tm);
	build(v * 2 + 1, tm + 1, tr);
	t[v] = t[v * 2] + t[v * 2 + 1];
} 
node get(int l, int r, int v = 1, int tl = 1, int tr = n) {
	if (tl > r || tr < l) return e;
	if (l <= tl && tr <= r) return t[v];
	int tm = (tl + tr) / 2;
	return get(l, r, v * 2, tl, tm) + get(l, r, v * 2 + 1, tm + 1, tr);
}

int main() {
	#ifdef wws
		freopen("in", "r", stdin);
	#endif
	ios_base::sync_with_stdio(0);
	cin >> n >> q;
	for (int i = 1;i <= n;i++) cin >> a[i];
	build();
	while(q--) {
		int l, r;
		cin >> l >> r;
		auto now = get(l, r);
		if (now.d[0][4] > r - l + 1) now.d[0][4] = -1;
		cout << now.d[0][4] << endl;
	}
	return 0;
}