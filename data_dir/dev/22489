#include <bits/stdc++.h>

using namespace std;

#define endl           '\n'
#define all(x)         x.begin(), x.end()
#define rall(x)        x.rbegin(), x.rend()
#define mem(x, y)      memset(x, y, sizeof x)

template <typename T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <typename T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <typename T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <typename T>
inline void Int(T &n) {
    n = 0; int f = 1;
    register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) {
        if (ch == '-') f = -1;
    }
    for (; isdigit(ch); ch = getchar()) {
        n = (n << 3) + (n << 1) + ch - '0';
    }
    n = n * f;
}

const int N = (int) 2e5 + 5;
const int INF = (int) 1e9 + 7;
const long long MOD = (long long) 1e9 + 7;

vector <int> g[N], dv;
int n, a[N], freq[N], res[N];

void dfs1(int u, int p) {
    for (int i = 0; i < g[u].size(); i++) {
        int v = g[u][i];
        if (v == p) continue;
        res[v] = gcd(a[v], res[u]);
        dfs1(v, u);
    }
}

void dfs2(int u, int p, int d) {
    for (int i = 0; i < dv.size(); i++) {
        if (a[u] % dv[i] == 0) ++freq[dv[i]];
        if (freq[dv[i]] >= d - 1) umax(res[u], dv[i]);
    }
    for (int i = 0; i < g[u].size(); i++) {
        int v = g[u][i];
        if (v != p) dfs2(v, u, d + 1);
    }
    for (int i = 0; i < dv.size(); i++) {
        if (a[u] % dv[i] == 0) --freq[dv[i]];
    }
}

int main() {
    Int(n);
    for (int i = 1; i <= n; i++) Int(a[i]);
    for (int i = 1; i < n; i++) {
        int u, v; Int(u), Int(v);
        g[u].push_back(v);
        g[v].push_back(u);
    }
    int prv = a[1];
    a[1] = 0;
    dfs1(1, 0);
    a[1] = prv;
    for (int i = 1; i * i <= a[1]; i++) {
        if (a[1] % i == 0) {
            dv.push_back(i);
            if (i * i != a[1]) dv.push_back(a[1] / i);
        }
    }
    dfs2(1, 0, 1);
    for (int i = 1; i <= n; i++) {
        printf("%d%c", res[i], i < n ? ' ' : '\n');
    }
    return 0;
}