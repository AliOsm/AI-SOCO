//██████╗ ██╗   ██╗██╗      ██████╗ ███████╗
//██╔══██╗██║   ██║██║      ██╔══██╗██╔════╝
//██████╔╝██║   ██║██║█████╗██║  ██║█████╗
//██╔══██╗██║   ██║██║╚════╝██║  ██║██╔══╝
//██║  ██║╚██████╔╝██║      ██████╔╝███████╗
//╚═╝  ╚═╝ ╚═════╝ ╚═╝      ╚═════╝ ╚══════╝
#include <bits/stdc++.h>

//#pragma GCC target("sse,sse2,sse3,ssse3,sse4")
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#include <algorithm>
using namespace std;

#define fst first
#define snd second
#define mp make_pair
//#define mt make_tuple
#define pb push_back
#define eb emplace_back

#define all(v) (v).begin(), (v).end()
#define sz(v) ((int)(v).size())
#define sqr(x) ((x) * (x))

#define ADD_OPERATORS_IN(T, COMP) \
    bool operator < (const T& ot) const { return COMP(ot) == -1; } \
    bool operator > (const T& ot) const { return COMP(ot) == 1; } \
    bool operator == (const T& ot) const { return COMP(ot) == 0; } \
    bool operator != (const T& ot) const { return COMP(ot) != 0; }

#define ADD_OPERATORS_OUT(T, COMP) \
    bool operator < (const T& a, const T& b) const { return COMP(a, b) == -1; } \
    bool operator > (const T& a, const T& b) const { return COMP(a, b) == 1; } \
    bool operator == (const T& a, const T&b) const { return COMP(a, b) == 0; } \
    bool operator != (const T& a, const T&b) const { return COMP(a, b) != 0; }




typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef vector<int> vi;

mt19937_64 mt_rand(chrono::system_clock::now().time_since_epoch().count());

template<typename T1, typename T2> inline bool upmax(T1& a, T2 b) { return (a < b ? (a = b, true) : false); }
template<typename T1, typename T2> inline bool upmin(T1& a, T2 b) { return (b < a ? (a = b, true) : false); }

const int maxn = (int) 6e6 + 20;
const int maxlog = 21;
const int base = (int) 1e9 + 7;
const ld eps = (ld) 1e-7;
const ld PI = acos(-1.);
const int pp = 41;

#define next ajksdslk

int a[maxn], b[maxn];
int n, m;
int x;

int pref[maxn];

int fw[maxn];

void add(int pos, int val) {
    for (; pos < maxn; pos |= pos + 1)
        upmax(fw[pos], val);
}

int get(int pos) {
    pos = min (pos, maxn - 1);
    int ans = 0;
    for (; pos >= 0; pos &= pos + 1, pos --) {
        upmax(ans, fw[pos]);
    }
    return ans;
}


int main() {
    scanf ("%d%d", &n, &m);
    for (int i = 1; i <= n; i ++) {
        scanf ("%d", a + i);
        pref[i] = pref[i - 1] + a[i];
    }
    for (int i = 1; i <= m; i ++) {
        scanf ("%d", b + i);
    }
    scanf ("%d", &x);
    for (int i = 1; i <= n; i ++) {
        for (int j = i; j <= n; j ++) {
            int sum = pref[j] - pref[i - 1];
            add(sum, j - i + 1);
        }
    }
    int ans = 0;
    for (int i = 1; i <= m; i ++) {
        int sum = 0;
        for (int j = i; j <= m; j ++) {
            sum += b[j];
            int cnt = get(x / sum);
            upmax(ans, cnt * (j - i + 1));
        }
    }
    cout << ans;
    return 0;
}