#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define F first
#define S second

const int N = 1111;

int n;
int a[N], b[N];
bool used[N], need[N];
char s[N][N];

inline void add() {
    for (int i = 1; i <= n; i++) if (a[i] == b[i]) need[i] = true; else need[i] = false;
}

inline int getCnt() {
    int res = 0;
    for (int i = 1; i <= n; i++) if (a[i] == b[i]) ++res;
    return res;
}

inline int get() {
    for (int i = 1; i <= n; i++) if (a[i] == b[i]) return i;
}

int main() {
    scanf("%d\n", &n);
    for (int i = 1; i <= n; i++) gets(s[i] + 1);
    memset(used, false, sizeof(used));
    memset(need, false, sizeof(need));
    for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
    memset(b, 0, sizeof(b));
    int pn = n;
    int best, bad, t;
    vector < int > ans;
    while (pn--) {
        if (getCnt() == 0) break;
        int who = get();
        if (who == -1) break;
        best = -1;
        bad = (int)2e9;
        for (int i = 1; i <= n; i++) {
            if (used[i] || s[i][who] == '0') continue;
            for (int j = 1; j <= n; j++) if (s[i][j] == '1') ++b[j];
            t = getCnt();
            if (t < bad) {
                bad = t;
                best = i;
            }
            for (int j = 1; j <= n; j++) if (s[i][j] == '1') --b[j];
        }
        if (best == -1) break;
        for (int j = 1; j <= n; j++) if (s[best][j] == '1') ++b[j];
        used[best] = true;
        ans.pb(best);
    }
    if (getCnt() != 0) {
        puts("-1");
        return 0;
    }
    printf("%d\n", (int)ans.size());
    for (size_t i = 0; i < ans.size(); i++) printf("%d ", ans[i]);
    return 0;
}
