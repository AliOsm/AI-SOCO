#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARINGS
#define _USE_MATH_DEFINES

#include <bits/stdc++.h>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;

const int INF = (int)(1e9 + 1337);
const int64 LINF = (int64)(4e18);
const double EPS = (double)(1e-11);
#define sq(x) ((x)*(x))
#define FAIL() ((*(int*)(0))++)

int n, m, k;
char f[1010][1010];
int d[1010][1010];
int p[1010][1010];
char dc[4] = {'D', 'L', 'R', 'U'};
int dx[4] = {1, 0, 0, -1};
int dy[4] = {0, -1, 1, 0};
char ans[1000010];

void bfs(int x, int y)
{
    memset(d, -1, sizeof d);
    d[x][y] = 0;
    vector<pii> q;
    q.push_back(pii(x, y));
    int ql = 0;
    while(ql != (int)q.size())
    {
        x = q[ql].first;
        y = q[ql].second;
        ql++;
        for(int i = 0; i < 4; i++)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if(nx < 0 || nx >= n || ny < 0 || ny >= m || f[nx][ny] == '*' || d[nx][ny] != -1)
                continue;
            d[nx][ny] = d[x][y] + 1;
            p[nx][ny] = i;
            q.push_back(pii(nx, ny));
        }
    }
}

void impossible()
{
    cout << "IMPOSSIBLE";
    exit(0);
}

void solve()
{
    cin >> n >> m >> k;
    if(k & 1)
        impossible();
    int sx, sy;
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            cin >> f[i][j];
            if(f[i][j] == 'X')
            {
                f[i][j] = '.';
                sx = i;
                sy = j;
            }
        }
    }
    bfs(sx, sy);
    int x = sx, y = sy;
    int cur = 0;
    while(cur + d[x][y] != k)
    {
        assert(cur < k);
        bool was = false;
        for(int i = 0; i < 4; i++)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if(nx < 0 || nx >= n || ny < 0 || ny >= m || f[nx][ny] == '*')
                continue;
            was = true;
            x = nx;
            y = ny;
            ans[cur] = dc[i];
            break;
        }
        if(!was)
        {
            impossible();
        }
        cur++;
    }
    bfs(x, y);
    x = sx;
    y = sy;
    for(int i = k - 1; i >= cur; i--)
    {
        int pp = p[x][y];
        ans[i] = dc[pp];
        x -= dx[pp];
        y -= dy[pp];
    }
    cout << ans;
}

int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0);
    solve();
}

