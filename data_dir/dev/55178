#include <bits/stdc++.h>

#define pb push_back

#define all(x) (x).begin (), (x).end ()

#define fi first
#define se second

using namespace std;

pair <int, int> e[100005];

vector <int> adj[100005];

vector <int> order;

int dp[100005];

bool u[100005];

int n, m;

void dfs (int v){
   u[v] = 1;

   for (int to : adj[v]){
      if (u[to]){
         continue;
      }

      dfs (to);
   }

   order.pb (v);
}

void solve (){
   scanf ("%d %d", &n, &m);

   for (int i = 1; i <= m; ++ i){
      scanf ("%d %d", &e[i].fi, &e[i].se);
   }

   int l = 1, r = m, ans = m + 1;

   while (l <= r){
      int mid = l + r >> 1;

      order.clear ();

      for (int i = 1; i <= n; ++ i){
         adj[i].clear ();
         dp[i] = 1;
         u[i] = 0;
      }

      for (int i = 1, v, to; i <= mid; ++ i){
         tie (v, to) = e[i];
         adj[v].pb (to);
      }

      for (int i = 1; i <= n; ++ i){
         if (!u[i]){
            dfs (i);
         }
      }

      reverse (all (order));

      for (int v : order){
         for (int to : adj[v]){
            dp[to] = max (dp[to], dp[v] + 1);
         }
      }

      bool ok = 1;

      for (int i = 1; i <= n; ++ i){
         if (dp[order[i - 1]] != i){
            ok = 0;
         }
      }

      if (ok){
         ans = mid;
         r = mid - 1;
      }
      else {
         l = mid + 1;
      }
   }

   if (ans == m + 1){
      printf ("-1\n");
   }
   else {
      printf ("%d\n", ans);
   }
}

int main (){
   int tt = 1;

   while (tt --){
      solve ();
   }

   return 0;
}