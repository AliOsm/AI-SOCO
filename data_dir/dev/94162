//marico el que lo lea
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <stdlib.h>
#include <assert.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int, int> ii;

void fastIO() {
	std::ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
}

#define FOR(i,f,t) for(int i=f; i<(int)t; i++)
#define FORR(i,f,t) for(int i=f; i>(int)t; i--)
#define FORE(i,c) for(auto i = (c).begin(); i != (c).end(); i++)
#define pb push_back
#define all(obj) obj.begin(), obj.end()
#define ms(obj, val) memset(obj, val, sizeof(obj))
#define ms2(obj, val, sz) memset(obj, val, sizeof(obj[0])*sz)

#define fst first
#define snd second

template<typename T, typename U> inline void mnze(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void mxze(T &x, U y) { if(x < y) x = y; }

void _scan( int &x ) { scanf("%d",&x); }
void _scan( long long &x ) { scanf("%lld",&x); }
void _scan( double &x ) { scanf("%lf",&x); }
void _scan( char &x ) { scanf(" %c",&x); }
void _scan( char *x ) { scanf("%s",x); }
void scan() {}
template<typename T, typename... U>
void scan( T& head, U&... tail ) { _scan(head); scan(tail...);}

template<typename T> void _dbg(const char* sdbg, T h) { cerr<<sdbg<<"="<<h<<"\n"; }
template<typename T, typename... U> void _dbg(const char* sdbg, T h, U... t) {
	while(*sdbg != ',')cerr<<*sdbg++; cerr<<"="<<h<<","; _dbg(sdbg+1, t...);
}

#ifdef LOCAL
#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)
#define debugv(x) {{cerr <<#x <<" = "; FORE(_i, (x)) cerr <<*_i <<", "; cerr <<"\n"; }}
#define debuga(x, sz) {{cerr <<#x <<" = "; FOR(_i, 0, sz) cerr << x[_i] <<", "; cerr <<"\n"; }}
#else
#define debug(...) (__VA_ARGS__)
#define debugv(x)
#define debuga(x, sz)
#define cerr if(0)cout
#endif

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
ll A, B;
ll INF = 0x3f3f3f3f3f3f3f3f;
vi a, b;
int sa, sb;
ll pot[19];
ll dp[(1<<19) +1 ][2];
ll f(int msk, bool lss){
    int usd = __builtin_popcount(msk);
    if(usd == sa){
        return 0;
    }
    ll &ret = dp[msk][lss];
    if(ret!=-1) return ret;
    ret = -INF;
    int d = sa-usd-1;
    FOR(i,0,sa){
        if(!((1<<i)&msk)){
            if(usd == 0 && a[i]==0) continue;
            if(lss){
                mxze(ret, a[i]*pot[d] + f(msk | (1<<i), lss));
            }else{
                if(a[i] < b[d]){
                    mxze(ret, a[i]*pot[d] + f(msk | (1<<i), 1));
                }else if(a[i] == b[d]){
                    mxze(ret, a[i]*pot[d] + f(msk | (1<<i), lss));
                }
            }
        }
    }
    return ret;
}

int main(){
    scan(A,B);
    ll AA=A, BB=B;
    while(AA){
        a.pb(AA%10);
        AA/=10;
    }
    while(BB){
        b.pb(BB%10);
        BB/=10;
    }
    sa = a.size();
    sb = b.size();
    pot[0]=1;
    FOR(i,1,19) pot[i] = pot[i-1]*10;
    ms(dp,-1);
    printf("%lld\n",f(0,sb>sa));
}
