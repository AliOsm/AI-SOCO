#include <bits/stdc++.h>
using namespace std;
#define oo 1000000010
#define mod 998244353
const int N = 210;

int n , k , a[N] , u , v , tmp;
vector< int > g[N];

int dp[N][N] , dp2[N][2];

void solve(int node,int prnt){
	dp[node][0] = a[node];
	for(int i = 0 ;i < (int)g[node].size();i++){
		if(g[node][i] == prnt){
			if(i == (int)g[node].size() - 1)
				continue;
			swap(g[node][i] , g[node].back());
			i--;
			continue;
		}
		solve(g[node][i] , node);
		tmp = 0;
		for(int j = k;j <= n;j++)
			tmp = max(tmp , dp[g[node][i]][j]);
		dp[node][0] += tmp;
	}
	for(int mn = 1;mn <= n;mn++){
		for(int i = 0;i <= n;i++) 
			dp2[(int)g[node].size() - 1][0] = dp2[(int)g[node].size() - 1][1] = 0;
		for(int i = (int)g[node].size() - 2 ;i >= 0;i--){
				dp2[i][0] = dp2[i + 1][0];
				dp2[i][1] = dp2[i + 1][1];
				dp2[i][0] = max(dp2[i][0] , dp2[i + 1][1] + dp[g[node][i]][mn - 1]);
				for(int mn2 = mn;mn2 <= n;mn2++){
					if(mn + mn2 <= k) continue;
					dp2[i][0] = max(dp2[i][0] , dp2[i + 1][0] + dp[g[node][i]][mn2 - 1]);
					dp2[i][1] = max(dp2[i][1] , dp2[i + 1][1] + dp[g[node][i]][mn2 - 1]);
				}
				
		}
		dp[node][mn] = dp2[0][0];
	}	
}

int main(){
	scanf("%d%d",&n,&k);
	for(int i = 1;i <= n;i++)
		scanf("%d",&a[i]);
	g[1].push_back(-1);
	for(int i = 0 ;i < n - 1;i++){
		scanf("%d%d",&u,&v);
		g[u].push_back(v);
		g[v].push_back(u);
	}
	solve(1 , -1);
	int ans = 0;
	for(int i = 0 ;i <= k + 1;i++){
		ans = max(ans , dp[1][i]);
	}
	cout << ans << endl;
	return 0;
}
