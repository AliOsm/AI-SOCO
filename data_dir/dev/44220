#include <bits/stdc++.h>
#define IO ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
using namespace std;
int n, tot, sv;
struct node
{
	node *child[26];
	bool isleaf;
	node()
	{
		for(int i = 0; i < 26; i++)
			child[i] = NULL;
		isleaf = 0;
	}
	void insert(string &s, int i = 0)
	{
		if(i == s.size())
			return void(isleaf = 1);
		int nxt = s[i] - 'a';
		if(child[nxt] == NULL)
			child[nxt] = new node();
		child[nxt] -> insert(s, i + 1);
	}
}*root;
multiset<int> dfs(node *u, int l)
{
    multiset<int> ret;
    for(int i = 0; i < 26; i++)
    {
        if(u -> child[i] == NULL)
            continue;
        for(auto j : dfs(u -> child[i], l + 1))
            ret.insert(j);
    }
    if(!l)
        return ret;
    if(!u -> isleaf && ret.size())
    {
        auto it = prev(ret.end());
        sv += (*it - l);
        ret.erase(it);
        ret.insert(l);
    }
    else if(u -> isleaf)
        ret.insert(l);
    return ret;
}
int main()
{
	IO;
	root = new node();
	cin >> n;
	for(int i = 0; i < n; i++)
	{
		string s;
		cin >> s;
		tot += s.size();
		root -> insert(s);
	}
	dfs(root, 0);
	cout << tot - sv;
}
