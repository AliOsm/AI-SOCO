#include <bits/stdc++.h>
using namespace std;

#define pii pair<int, int>
#define mp make_pair
#define loop(i,n) for (int i=0; i<n; i++)
#define pb push_back
#define vi vector<int>

typedef long long LL;

const int MX = 1e5 + 5;

class SegmentTree {
	vector<int> t;
	int n;
	int default_val;
	int (*combine)(int, int);
public:
	SegmentTree(vector<int> a, int (*f) (int, int), int init_val) {
		n = a.size();
		default_val = init_val;
		combine = f;
		t.resize(2*n);
		for (int i=1; i<2*n; i++) t[i] = default_val;
		for (int i=0; i<n; i++) t[i+n] = a[i];
		for (int i=n-1; i>=1; i--) t[i] = combine(t[i<<1], t[i<<1 | 1]);
	}
	void modify(int pos, int val) {
		for (t[pos+=n] = val; pos > 1; pos>>=1) 
			t[pos>>1] = combine(t[pos], t[pos^1]); // parent = combine(this cell, neighbor cell)
	}
	int query(int l, int r) { // Query the range [l, r)
		int res = default_val;
		for (l+=n, r+=n; l < r; l>>=1, r>>=1) {
			if (l & 1) res = combine(res, t[l++]);
			if (r & 1) res = combine(res, t[--r]);
		}
		return res;
	}
};

int MXM(int a, int b) {return max(a, b); }

vector<int> a, base;
int sol[MX];

int main(){
#ifdef DEBUG
    freopen("in.txt", "r", stdin);
#endif
    ios_base::sync_with_stdio(false);
    int n;
    cin >> n;
    a.resize(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
#ifdef DEBUG
    for (int i = 0; i < n; i++) cout << a[i] << " ";
    cout << endl;
#endif
    sol[0] = 0;
    vector<int> v(MX, 0);
    SegmentTree tree(v, MXM, 0);
    stack<int> S;
    S.push(0);
    int res = 0;
    for (int i = 1; i < n; i++) {
        if (a[i] < a[i - 1]) {
            sol[i] = 1;
        }
        else {
            int ind = -1;
            while (!S.empty()) {
                int front = S.top();
                if (a[front] > a[i]) {
                    ind = front;
                    break;
                } 
                else {
                    S.pop();
                }
            }
            if (ind == -1) sol[i] = 0;
            else sol[i] = tree.query(ind + 1, i) + 1;
        }
        S.push(i);
        tree.modify(i, sol[i]);
        res = max(res, sol[i]);
    }
    cout << res << endl;
    return 0;
}