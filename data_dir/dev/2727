#include <bits/stdc++.h>
#ifdef DEBUG
#include "_debug.cpp"
#include "callable.hpp/callable.hpp"
#endif
#define endl '\n'
using namespace std;
using ll = long long;
#define N 100
bool adj[N][N][N][N];
bool vis[N][N];
int dfs(int w, int h, int i, int j) {
    vis[i][j] = true;
    int ans = 1;
    for(int di = -1; di <= 1; di++) {
        for(int dj = -1; dj <= 1; dj++) {
            if(abs(di) + abs(dj) == 1) {
                int ni = i + di;
                int nj = j + dj;
                if(0 <= ni and ni < w and 0 <= nj and nj < h and adj[i][j][ni][nj] and not vis[ni][nj]) {
                    ans += dfs(w, h, ni, nj);
                }
            }
        }
    }
    return ans;
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int w, h, n;
    cin >> w >> h >> n;
    for(int i = 0; i < w; i++) {
        for(int j = 0; j < h; j++) {
            for(int ii = 0; ii < w; ii++) {
                for(int jj = 0; jj < h; jj++) {
                    adj[i][j][ii][jj] = true;
                }
            }
        }
    }
    for(int i = 0; i < n; i++) {
        int x1, y1, x2, y2;
        cin >> x1 >> y1 >> x2 >> y2;
        if(x1 == x2) {
            for(int j = y1; j < y2; j++) {
                adj[x1-1][j][x1][j] = false;
                adj[x1][j][x1-1][j] = false;
            }
        } else {
            for(int j = x1; j < x2; j++) {
                adj[j][y1-1][j][y1] = false;
                adj[j][y1][j][y1-1] = false;
            }
        }
    }
    memset(vis, false, sizeof vis);
    vector<int> ans;
    for(int i = 0; i < w; i++) {
        for(int j = 0; j < h; j++) {
            if(not vis[i][j]) {
                ans.push_back(dfs(w, h, i, j));
            }
        }
    }
    sort(ans.begin(), ans.end());
    for(int x : ans) {
        cout << x << " ";
    }
    cout << endl;
    return 0;
}
