#include <bits/stdc++.h>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
typedef long long ll;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1<<17;
const int MLOG = 16;
const double eps = 1e-9;
using namespace std;
int a[MAXN], vis[MAXN];
vi di[MAXN];

struct Node
{
    Node *l = nullptr, *r = nullptr;
    int mx = INF;
};

struct Trie
{
    Node *root = new Node;

    bool isset(int val, int i)
    {
        return ((val >> i) & 1) == 1;
    }

    void ins(int val)
    {
        Node *tmp = root;
        root->mx = min(root->mx, val);
        for (int i = 0; i <= MLOG; i++)
        {
            if (isset(val, MLOG - i))
            {
                if (!tmp->r)
                    tmp->r = new Node;
                tmp = tmp->r;
            }
            else
            {
                if (!tmp->l)
                    tmp->l = new Node;
                tmp = tmp->l;
            }
            tmp->mx = min(tmp->mx, val);
        }
    }

    int qry(int val, int mx)
    {
        Node *tmp = root;
        if (tmp->mx > mx)
            return -1;
        int ret = 0;
        for (int i = 0; i <= MLOG; i++)
        {
            int fl = 0;
            if (isset(val, MLOG - i))
            {
                if (tmp->l)
                {
                    if (tmp->l->mx > mx)
                        tmp = tmp->r, fl = 1;
                    else
                        tmp = tmp->l;
                }
                else
                    tmp = tmp->r, fl = 1;
            }
            else
            {
                if (tmp->r)
                {
                    if (tmp->r->mx > mx)
                        tmp = tmp->l;
                    else
                        tmp = tmp->r, fl = 1;
                }
                else
                    tmp = tmp->l;
            }
            if (tmp->mx > mx)
                return -1;
            ret += (1 << (MLOG - i)) * fl;
        }
        return ret;
    }
} tree[MAXN];

int main()
{
    for (int i = 1; i < MAXN; i++)
        for (int j = i; j < MAXN; j += i)
            di[j].pb(i);
    int q;
    ni(q);
    for (int i = 0; i < q; i++)
    {
        int t;
        ni(t);
        if (t == 1)
        {
            int u;
            ni(u);
            if (vis[u] == 1)
                continue;
            vis[u] = 1;
            for (int nx: di[u])
                tree[nx].ins(u);
        }
        else
        {
            int x, k, s;
            ni(x), ni(k), ni(s);
            if (x % k != 0)
            {
                pri(-1);
                continue;
            }
            pri(tree[k].qry(x, s - x));
        }
    }
    return 0;
}
