#include <bits/stdc++.h>
using namespace std;
// nichijou
#define REP(i,a,b) for (int i(a); i < (b); ++i)
#define RP(i,n) REP(i,0,n)
#define PER(i,a,b) for(int i((a)-1); i >= (b); --i)
#define PR(i,n) PER(i,n,0)
#define REP1(i,a,b) REP(i,a,(b)+1)
#define RP1(i,n) REP1(i,1,n)
#define PER1(i,a,b) PER(i,(a)+1,b)
#define PR1(i,n) PER1(i,n,1)
#define DO(n) RP(__i,n)
template<class T,class U>
bool cmax(T & a, const U & b) {return a < b ? a = b, 1 : 0;}
template<class T,class U>
bool cmin(T & a, const U & b) {return b < a ? a = b, 1 : 0;}

// data type
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
#define F first
#define S second

// STL container
typedef vector<int> vi;
typedef vector<ll> vll;
#define SZ(a) ((int)(a).size())
#define ALL(a) begin(a), end(a)
#define CLR(a) (a).clear()
#define BK(a) ((a).back())
#define FT(a) ((a).front())
#define DB(a) (a).pop_back()
#define DF(a) (a).pop_front()
#define PB push_back
#define EB emplace_back

/* I gave you my heart and then you turned around. */
void _BG(const char * s) {cerr<<s<<endl;}
template<class T, class ... TT>
void _BG(const char * s,T a, TT...b)
{
    for (size_t c = 0; *s && (c || *s != ','); cerr << *s++)
        c += count(ALL("([{"),*s) - count(ALL(")]}"),*s);
    cerr << " = " << a;
    if (*s) {
        cerr << ", ";
        ++s;
    }
    _BG(s,b...);
}
#ifdef PR3PONY
#define BG(...) do { \
    cerr << __PRETTY_FUNCTION__ << ':' << __LINE__ << ": "; \
    _BG(#__VA_ARGS__,__VA_ARGS__); \
} while(0)
#else
#define BG(...)
#endif

/* Reading input is now 20% cooler! */
bool RD() {return 1;}
bool RD(char & a) {return scanf(" %c", &a) == 1;}
bool RD(char * a) {return scanf("%s", a) == 1;}
bool RD(double & a) {return scanf("%lf", &a) == 1;}
bool RD(int & a) {return scanf("%d", &a) == 1;}
bool RD(ll & a) {return scanf("%lld", &a) == 1;}

template<class T, class ... TT>
bool RD(T & a, TT & ... b) {return RD(a) && RD(b...);}

/* Do princesses dream of magic sheep? */
#define DR(T,...) T __VA_ARGS__; RD(__VA_ARGS__)
#define RI(...) DR(int,__VA_ARGS__)

/* For it's time for you to fulfill your output. */
void PT(const char & a) {putchar(a);}
void PT(char const * const & a) {fputs(a, stdout);}
void PT(const double & a) {printf("%.16f", a);}
void PT(const int & a) {printf("%d", a);}
void PT(const ll & a) {printf("%lld", a);}

/* The line will last forever! */
template<char s = ' ', char e = '\n'>
void PL() {if (e) PT(e);}
template<char s = ' ', char e = '\n', class T, class ... TT>
void PL(const T & a, const TT & ... b)
{PT(a); if (sizeof...(b) && s) PT(s); PL<s,e>(b...);}

/* Good Luck && Have Fun ! */
const int N = 3e5+87;
const int M = N * 32;
const int B = 29;
struct trie
{
    int s[M],c[M][2],tp=1;
    int ch(int o,int i)
    {
        if (!c[o][i])
            c[o][i] = ++tp;
        return c[o][i];
    }
    void insert(int x)
    {
        ++s[1];
        for (int o = 1, p = B; p>=0; --p) {
            o = ch(o,x>>p&1);
            ++s[o];
        } 
    }
    int lc(int o) {return c[o][0];}
    int rc(int o) {return c[o][1];}
    void pull(int o)
    {
        s[o] = s[lc(o)] + s[rc(o)];
    }
} ta,tb;
vector<int> ans;
void dc(int p,int a=1,int b=1,int v=0)
{
    if (p==-1) {
        int w=min(ta.s[a],tb.s[b]);
        RP(i,w) ans.PB(v);
        ta.s[a]-=w,tb.s[b]-=w;
        return;
    }
    int al=ta.lc(a), ar=ta.rc(a);
    int bl=tb.lc(b), br=tb.rc(b);
    if (ta.s[al] && tb.s[bl]) {
        dc(p-1,al,bl,v);
        ta.pull(a);
        tb.pull(b);
    }
    if (ta.s[ar] && tb.s[br]) {
        dc(p-1,ar,br,v);
        ta.pull(a);
        tb.pull(b);
    }
    if (ta.s[ar] && tb.s[bl]) {
        dc(p-1,ar,bl,1<<p|v);
        ta.pull(a);
        tb.pull(b);
    }
    if (ta.s[al] && tb.s[br]) {
        dc(p-1,al,br,1<<p|v);
        ta.pull(a);
        tb.pull(b);
    }
}
int a[N];
int main()
{
    RI(n);
    RP(i,n) {
        RD(a[i]);
    }
    RP(i,n) {
        RI(x);
        tb.insert(x);
    }
    RP(i,n) {
        ta.insert(a[i]);
        dc(B);
    }
    RP(i,n) PL<0,0>(ans[i]," \n"[i==n-1]);
}
