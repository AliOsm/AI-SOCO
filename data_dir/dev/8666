/* @nazarbek.altybay */

#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <queue>
#include <unordered_set>

#define pii pair<int, int>

#define pb push_back
#define mp make_pair

#define f first
#define s second

using namespace std;

typedef long long ll;
typedef long double ld;

const double EPS = 1e-9;
const double PI = acos(-1);

const int INF = (int) 1e9 + 7;
const int MAXN = (int) 2e6 + 7;

int n, m, q;
int dsu[MAXN];
int val[MAXN];

int root;

vector<int> g[MAXN];
pii mdist;

void dfs(int v, int parent = 0, int h = 0) {
  dsu[v] = root;
  mdist = max(mdist, mp(h, v));
  for (auto to : g[v]) {
    if (to != parent)
      dfs(to, v, h + 1);
  }
}

int get(int x) {
  if (x == dsu[x]) return x;
  return dsu[x] = get(dsu[x]);
}

int main() {
  #ifdef LOCAL
  freopen("in", "r", stdin);
  #endif

  scanf("%d%d%d", &n, &m, &q);
  for (int i = 1; i <= m; i++) {
    int u, v;
    scanf("%d%d", &u, &v);
    g[u].pb(v);
    g[v].pb(u);
  }
  for (int i = 1; i <= n; i++) {
    if (!dsu[i]) {
      root = i;
      mdist = mp(0, 0);
      dfs(i);
      int x = mdist.s;
      mdist = mp(0, 0);
      dfs(x);
      val[root] = mdist.f;
    }
  }
  while (q--) {
    int type, x, y;
    scanf("%d%d", &type, &x);
    if (type == 1) {
      printf("%d\n", val[get(x)]);
    } else {
      scanf("%d", &y);
      x = get(x);
      y = get(y);
      if (x == y)
        continue;
      dsu[x] = y;
      val[y] = max(max(val[x], val[y]), (val[x] + 1) / 2 + (val[y] + 1) / 2 + 1);
    }
    /*for (int i = 1; i <= n; i++) {
      cout << i << "=>" << get(i) << ' ' << val[get(i)] << endl;
    }
    cout << "====\n";*/
  }
  return 0;
}