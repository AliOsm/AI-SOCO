#include <bits/stdc++.h>
using namespace std;

#define VIC ios::sync_with_stdio(0);cin.tie(0);ios_base::sync_with_stdio(0);
#define wtf(s) freopen((s), "w", stdout)
#define rff(s) freopen((s), "r", stdin)
#define pi (2 * acos(0))
typedef long double ld;
typedef long long ll;
typedef complex<ld> point;
#define endl '\n'
#define matrix vector<vector<ll>>
#define EPS 1e-9
#define X real()
#define Y imag()
#define vec(a, b) ((b) - (a))
#define dot(a, b) ((conj(a) * (b)).real())
#define cross(a, b) ((conj(a) *(b)).imag())
#define lengthsqr(v) (dot(v, v))
#define length(v) ((ld)hypot((v).Y, (v).X))
#define same(a, b) (lengthsqr(vec(a, b)) < EPS)

const int N = 8e3 + 5, inf = 2e9, mod = 1e9 + 7;

int main()
{
    VIC
    int tc, n, a[N] = {}, low, high, mid, highs[N], vis[N] = {};
    cin >> tc;
    while (tc--)
    {
        memset(vis, -1, sizeof vis);
        cin >> n;
        int ans = 0, maxi = 0;
        for (int i = 1; i <= n; i++)
            cin >> a[i],
            maxi = max(maxi, a[i]),
            a[i] += a[i - 1];
        for (int i = 1; i <= n; i++)
        {
            low = i + 1, high = n;
            while (high >= low)
            {
                mid = (high + low) / 2;
                if (a[mid] - a[i - 1] > maxi)
                    high = mid - 1;
                else
                    low = mid + 1;
            }
            highs[i] = high;
        }
        for (int i = 1; i <= n; i++)
        {
            int cur = a[i] - a[i - 1], c = 0;
            if (vis[cur] != -1)
            {
                ans += vis[cur];
                continue;
            }
            for (int j = 1; j <= n && c == 0; j++)
            {
                low = j + 1, high = highs[j];
                while (high >= low)
                {
                    mid = (high + low) / 2;
                    if (a[mid] - a[j - 1] > cur)
                        high = mid - 1;
                    else if (a[mid] - a[j - 1] < cur)
                        low = mid + 1;
                    else
                    {
                        c = 1;
                        break;
                    }
                }
            }
            vis[cur] = c;
            ans += c;
        }
        cout << ans << endl;
    }
    return 0;
}
