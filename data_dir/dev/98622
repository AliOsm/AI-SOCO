#include <iostream>
#include <cassert>
#include <cmath>
#include <algorithm>
#include <cstdio>
#include <string>
#include <vector>
#include <set>
#include <cstring>
#include <cstdlib>
#include <map>
#include <ctime>
#include <queue>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define forit(s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it ++)
#define forn(i, l, r) for(int i = l; i < r; i ++)
#define pii pair <int, int>
#define vi vector <int>
#define N 1005
#define y1 stupid_cmath
#define sz(a) (int)a.size()
#define ll long long
#define all(a) a.begin(), a.end()

const int inf = (int)1e9;
const int mod = (int)1e9 + 7;
const double pi = acos(-1.0);
const double eps = 1e-9;

int n, m, k, p;
ll a[N][N], str[N], stlb[N];
priority_queue <ll> q;
ll dp1[N * N];
ll dp2[N * N];

int main () {

    #ifdef LOCAL
    freopen("a.in", "r", stdin);
    freopen("a.out", "w", stdout);
    #endif
    
    scanf("%d%d%d%d", &n, &m, &k, &p);
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            scanf("%d", &a[i][j]);
            str[i] += a[i][j];
            stlb[j] += a[i][j];
        }
    }
    
    ll ans = -1ll * inf * inf;
    while(!q.empty()) q.pop();
    for(int i = 0; i < n; i++) q.push(str[i]);
    for(int i = 1; i <= k; i++) {
        dp1[i] = dp1[i - 1] + q.top();
        ll t = q.top(); q.pop();
        t -= 1ll * m * p;
        q.push(t);
    }
    while(!q.empty()) q.pop();
    for(int i = 0; i < m; i++) q.push(stlb[i]);
    for(int i = 1; i <= k; i++) {
        dp2[i] = dp2[i - 1] + q.top();
        ll t = q.top(); q.pop(); t -= 1ll * n * p;
        q.push(t);
    }

    ans = dp1[0] + dp2[k];
    for(int i = 0; i <= k; i++) {
        ans = max(ans, dp1[i] + dp2[k - i] - 1ll * (k - i) * i * p);
    }

    cout << ans << endl;

    return 0;
}