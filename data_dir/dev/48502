#pragma comment(linker, "/STACK:256000000")

#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <random>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <complex>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<int, int64> pil;
const int INF = (int)(1e9 + 1e5);
const int64 LINF = (int64)(2e18);
const int64 BASE = 1003;
const double EPS = 1e-9;
#define sq(x) ((x)*(x))
#define FAIL() (*(int*)(0))++
#define ASSERT(exp) {if (!(exp)) exit(0);}
#define y1 fjgjf
#ifdef _MY_DEBUG
#define I64d lld
#endif
//typedef complex<double> comp;
const int MOD = 1000000007;

int tnum;

const int MAXN = 1005;

pii operator + (const pii& l, const pii& r) {
    return pii(l.first + r.first, l.second + r.second);
}

pii operator - (const pii& l, const pii& r) {
    return pii(l.first - r.first, l.second - r.second);
}

int n;
pii o[MAXN], p[MAXN];
pii cand[MAXN];
pii ans;
bool was[MAXN];
int timer;
map<pii, int> pp;

void init() {
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> o[i].first >> o[i].second;
    }
    for (int i = 1; i <= n; ++i) {
        cin >> p[i].first >> p[i].second;
    }
}

bool check(pii cand) {
    memset(was + 1, 0, sizeof(was[0]) * (n));
    ++timer;
    for (int i = 1; i <= n; ++i) {
        auto cur = cand - o[i];
        auto it = pp.find(cur);
        if (it == pp.end()) {
            return false;
        }
        if (it->second == timer) {
            return false;
        }
        it->second = timer;
    }
    return true;
}

void solve() {
    for (int i = 1; i <= n; ++i){
        pp[p[i]] = 0;
    }
    for (int i = 1; i <= n; ++i) {
        cand[i] = o[1] + p[i];
        if (check(cand[i])) {
            ans = cand[i];
            break;
        }
    }
}

void print_answer() {
    cout << ans.first << " " << ans.second << endl;
}

void precalc() {

}

void run()
{
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(getenv("OUTPUT_PATH"), "wt", stdout);
#endif // _MY_DEBUG
    precalc();
    int t = 1; //cin >> t;
    for (tnum = 1; tnum <= t; ++tnum)
    {
        init();
        solve();
        print_answer();
    }
}

int main()
{
    srand(90);
    ios_base::sync_with_stdio(false); cin.tie(0);
    run();
    return 0;
}
