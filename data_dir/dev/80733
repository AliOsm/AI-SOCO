#include <bits/stdc++.h>
#define M_PI 3.141592653589793238462643383279502884197
#define ff(i,s,e) for(int i = (s);i<(e);++i)
#define FF(i,s,e) for(int i = (s);i<=(e);++i)
#define fr(i,s,e) for(int i = (e);--i>=(s);)
#define Fr(i,s,e) for(int i = (e);i>=(e);--i)


typedef int64_t ll;
using namespace std;
typedef vector<int> vi;
vi v;
vector<ll> ans;
vector<vi> e;

struct el{
    map<int,int> m;
    ll tot;
    int maxn;
};

el merge(el && a, el && b) {
    if (a.m.size() > b.m.size()) {
        for (auto p : b.m) {
            int k = a.m[p.first] += p.second;
            if (k > a.maxn)
                a.maxn = k, a.tot = p.first;
            else if (k == a.maxn)
                a.tot += p.first;
        }
        return move(a);
    } else {
        for (auto p : a.m) {
            int k = b.m[p.first] += p.second;
            if (k > b.maxn)
                b.maxn = k, b.tot = p.first;
            else if (k == b.maxn)
                b.tot += p.first;
        }
        return move(b);
    }
}

el dfs(int cur, int last) {
    int c = v[cur];
    el r;
    r.m[c]++;
    r.tot = c;
    r.maxn = 1;
    for (int o : e[cur]) {
        if (o == last)
            continue;
        el k = dfs(o, cur);
        r = merge(move(r), move(k));
    }
    ans[cur] = r.tot;
    return r;
}


int main(int argc, char** argv) {
    int n;
    scanf("%d", &n);
    e.resize(n);
    v.resize(n);
    ans.resize(n);
    for (int &i: v)
        scanf("%d", &i);
    ff(i,1,n) {
        int x, y;
        scanf("%d %d", &x, &y);
        e[x-1].push_back(y-1);
        e[y-1].push_back(x-1);
    }
    dfs(0,-1);
    for (ll t : ans) {
        printf("%" PRId64 " ", t);
    }
}

