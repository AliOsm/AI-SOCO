#include <bits/stdc++.h>

using namespace std;
#define ll long long

int main() {
    //freopen("262144.in", "r", stdin);
    //freopen("262144.out", "w", stdout);
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin>>n;
    string str[n];
    vector<pair<int,int>> a,e,i,o,u;
    for(int j=0;j<n;j++){
        string s;
        cin>>s;
        str[j]=s;
        int vowels=0;
        char lv;
        for(int k=0;k<s.size();k++){
            if(s[k]=='a'){
                lv='a';
                vowels++;
            }
            if(s[k]=='e'){
                lv='e';
                vowels++;
            }
            if(s[k]=='i'){
                lv='i';
                vowels++;
            }
            if(s[k]=='o'){
                lv='o';
                vowels++;
            }
            if(s[k]=='u'){
                lv='u';
                vowels++;
            }
        }
        if(lv=='a'){
            a.push_back({vowels,j});
        }
        if(lv=='e'){
            e.push_back({vowels,j});
        }
        if(lv=='i'){
            i.push_back({vowels,j});
        }
        if(lv=='o'){
            o.push_back({vowels,j});
        }
        if(lv=='u'){
            u.push_back({vowels,j});
        }
    }
    sort(a.begin(),a.end());
    sort(e.begin(),e.end());
    sort(o.begin(),o.end());
    sort(i.begin(),i.end());
    sort(u.begin(),u.end());
    int res=0;
    vector<pair<int,int>> useable;
    deque<pair<int,int>> samevowel;
    if(a.size()==1){
        useable.push_back(a[0]);
    }
    if(e.size()==1){
        useable.push_back(e[0]);
    }
    if(i.size()==1){
        useable.push_back(i[0]);
    }
    if(o.size()==1){
        useable.push_back(o[0]);
    }
    if(u.size()==1){
        useable.push_back(u[0]);
    }
    for(int j=1;j<a.size();j++){
        if(a[j].first==a[j-1].first){
            samevowel.push_back(a[j]);
            samevowel.push_back(a[j-1]);
            j++;
        }
        else{
            useable.push_back(a[j-1]);
        }
        if(j==a.size()-1){
            useable.push_back(a[j]);
        }
    }
    for(int j=1;j<e.size();j++){
        if(e[j].first==e[j-1].first){
            samevowel.push_back(e[j]);
            samevowel.push_back(e[j-1]);
            j++;
        }
        else{
            useable.push_back(e[j-1]);
        }
        if(j==e.size()-1){
            useable.push_back(e[j]);
        }
    }
    for(int j=1;j<o.size();j++){
        if(o[j].first==o[j-1].first){
            samevowel.push_back(o[j]);
            samevowel.push_back(o[j-1]);
            j++;
        }
        else{
            useable.push_back(o[j-1]);
        }
        if(j==o.size()-1){
            useable.push_back(o[j]);
        }
    }
    for(int j=1;j<i.size();j++){
        if(i[j].first==i[j-1].first){
            samevowel.push_back(i[j]);
            samevowel.push_back(i[j-1]);
            j++;
        }
        else{
            useable.push_back(i[j-1]);
        }
        if(j==i.size()-1){
            useable.push_back(i[j]);
        }
    }
    for(int j=1;j<u.size();j++){
        if(u[j].first==u[j-1].first){
            samevowel.push_back(u[j]);
            samevowel.push_back(u[j-1]);
            j++;
        }
        else{
            useable.push_back(u[j-1]);
        }
        if(j==u.size()-1){
            useable.push_back(u[j]);
        }
    }
    sort(useable.begin(),useable.end());
    vector<string> v;
    while(!samevowel.empty()){
        if(useable.size()<1){
            if(samevowel.size()==2){
                break;
            }
            else{
                res++;
                v.push_back(str[samevowel.front().second]);
                samevowel.pop_front();
                v.push_back(str[samevowel.back().second]);
                samevowel.pop_back();
                v.push_back(str[samevowel.front().second]);
                samevowel.pop_front();
                v.push_back(str[samevowel.back().second]);
                samevowel.pop_back();
            }
        }
        else{
            if(useable[useable.size()-1].first!=useable[useable.size()-2].first){
                useable.pop_back();
                continue;
            }
            res++;
            v.push_back(str[useable.back().second]);
            useable.pop_back();
            v.push_back(str[samevowel.front().second]);
            samevowel.pop_front();
            v.push_back(str[useable.back().second]);
            useable.pop_back();
            v.push_back(str[samevowel.front().second]);
            samevowel.pop_front();
        }
    }
    cout<<res<<endl;
    for(int j=0;j<v.size();j++){
        if(j%2==0&&j){
            cout<<endl;
        }
        cout<<v[j]<<" ";
    }
    cout<<endl;
    return 0;
}
