// Let Go Your Earthly Tether , Enter The Void , Empty And Become Wind

#include<bits/stdc++.h>
using namespace std ;

#define all(x) x.begin() , x.end()

#define PB push_back
#define F first
#define S second
#define _sz(x) (int)x.size()

#define debug(x) cerr << #x << " = " << x

using ll = long long ;
using ld = long double ;
using pll = pair<ll , ll> ;

const ll MAXN = 200 * 1000 + 19 ;
const ll MOD = 1e9 + 7 ;
const ll inf = 4e18 + 19 ;

ll n , dis[2][MAXN] , dist[MAXN] , root , root2 , root3 ;
vector<ll> g[MAXN] ;
map<pll , bool> mp ;

void dfs(ll v , ll par , bool b) {
        for (auto u : g[v])
                if (u ^ par)
                        dis[b][u] = dis[b][v] + 1 , dfs(u , v , b) ;
}

void dfs2(ll v , ll par) {
        for (auto u : g[v])
                if (u ^ par)
                        dist[u] = dist[v] + 1 , dfs2(u , v) ;
}

bool len(ll v , ll par = -1) {
	bool flag = 0 ;
	for (auto u : g[v]) {
		if (u ^ par)
		        if (len(u, v))
			        mp[{u, v}] = mp[{v, u}] = 1 , flag = 1 ;
	}
	if (!flag)
		if (v == root2 || v == root3)
			flag = 1 ;
	return flag ;
}

int main() {
        ios::sync_with_stdio(false) , cin.tie(0) , cout.tie(0) ;
        cin >> n ;
        for (ll i = 0 , v , u ; i < n - 1 ; i ++) {
                cin >> v >> u ;
                g[-- v].PB(-- u) , g[u].PB(v) ;
        }
        ll root = 0 ;
        dfs2(root , -1 ) ;
        for (int i = 0 ; i < n ; i ++)
                if (dist[i] > dist[root])
                        root = i ;
        memset(dist , 0 , sizeof(dist)) ;
        dfs2(root , -1) ;
        for (int i = 0 ; i < n ; i ++)
                if (dist[i] > dist[root2])
                        root2 = i ;
        memset(dis , 0 , sizeof(dis)) ;
        dfs(root , -1 , false) ;
        dfs(root2 , -1 , true) ;
        ll sum = -inf ;
        for (int i = 0 ; i < n ; i ++)
                if (i != root && i != root2 && sum < dis[0][i] + dis[1][i])
                        sum = dis[0][i] + dis[1][i] , root3 = i ;
        len(root) ;
        cout << _sz(mp) / 2 << endl << ++ root << ' ' << ++ root2 << ' ' << ++ root3 << endl ;
        return (0) ;
}
