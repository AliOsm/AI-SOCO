#include <bits/stdc++.h>
using namespace std;
#define REP(i, n) for (int i = 0; i < int(n); i++)
#define FOREACH(i, v) for (__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define SIZE(v) ((int)(v).size())
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define ll long long
int n, m;
ll nw[100100], nb[100100];
list<int> AdjList[100100];
bitset<100100> visited, white;

bool coloreable(int u)
{
	queue<int> q;
	q.push(u);
	visited[u] = true;
	white[u] = true;
	int root = u;
	nw[root]++;
	
	while(!q.empty())
	{
		u = q.front();
		q.pop();
		for(list<int>::iterator v = AdjList[u].begin(); v != AdjList[u].end(); v++)
			if(!visited[*v])
			{
				q.push(*v);
				visited[*v] = true;
				white[*v] = !white[u];
				if(white[*v]) nw[root]++;
				else nb[root]++;
			}
			else if(white[*v] == white[u]) return false;
	}
	return true;
}

int main()
{
	scanf("%d %d", &n, &m);
	int u, v;
	REP(i, m)
	{
		scanf("%d %d", &u, &v);
		AdjList[u].push_back(v);
		AdjList[v].push_back(u);
	}
	
	ll nn = (ll)n;
	if(m == 0) printf("3 %lld\n", (nn*(nn - 1ll)*(nn - 2ll))/6ll );
	else
	{
		int M = 0;
		REP(i, n)
			M = max(M, (int)AdjList[i + 1].size());
		if(M == 1) printf("2 %lld\n", ((ll)m)*(nn - 2) );
		else
		{
			ll solution = 0ll;
			bool col = true;
			for(int i = 1; i<=n && col; i++)
				if(!visited[i]) col = coloreable(i);
			if(!col) printf("0 1\n");
			else
			{
				for(int i = 1; i<=n; i++) 
				{
					solution += (nw[i]*(nw[i] - 1ll))/2ll;
					solution += (nb[i]*(nb[i] - 1ll))/2ll;
				}
				printf("1 %lld\n", solution);
			}
		}
	}
}
