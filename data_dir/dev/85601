#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const ld EPS = 1e-11;
const ld PI = acos(-1.0);
const int INF = (int)1e9 + 5;
const ll LINF = (ll)1e18 + 5;

template<class T> 
ll abs(const T & x) { return x < 0 ? -x : x; }

template<class T> 
ll round(const T & x) { return x < 0 ? x - 0.5 : x + 0.5; }

template<class T> 
bool chmin(T & x, const T & y) {
	if (y < x) {
		x = y;
		return true;
	}
	return false;
}

template<class T> 
bool chmax(T & x, const T & y) {
	if (x < y) {
		x = y;
		return true;
	}
	return false;
}

const ll P = (ll)1e9 + 7;
const ll PP = P * P;

struct mat {
	ll arr[3][3];
	mat() {
		memset(arr, 0, sizeof(arr));
	}
	inline const ll * operator [](int idx) const {
		return arr[idx];
	}
	inline ll * operator [](int idx) {
		return arr[idx];
	}
	static mat E() {
		mat a;
		a[0][0] = a[1][1] = a[2][2] = 1;
		return a;
	}
	mat operator *(const mat & o) const {
		mat res;
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				for (int k = 0; k < 3; k++) {
					res.arr[i][j] += this->arr[i][k] * o.arr[k][j];
					if (res.arr[i][j] >= PP) res.arr[i][j] -= PP;
				}
			}
		}
		for (int i = 0; i < 3; i++) {
		    for (int j = 0; j < 3; j++) {
		        res.arr[i][j] %= P;
		    }
		}
		return res;
	}
};

/*
double solve(int n) {
	double cur = -1;
	double res = 0;
	for (int i = 1; i < n; i++) {
		cur /= -2;
		res += cur;
	}
	int p = 0, q = 1;
	for (int i = 1; i < n; i++) {
		p *= 2;
		q *= 2;
		if (i % 2 == 1) {
			p++;
		}
		else {
			p--;
		}
	}
	return (double)p / q;
}*/

mat powmod(mat a, ll n) {
	mat res = mat::E();
	while (n) {
		if (n % 2 == 1) {
			res = res * a;
			n--;
		}
		else {
			a = a * a;
			n /= 2;
		}
	}
	return res;
}

pair<ll, ll> solve(vector<ll> vec) {
	mat a;

	a[0][0] = 2;
	a[1][0] = 0;
	a[2][0] = 1;

	a[0][1] = 0;
	a[1][1] = 2;
	a[2][1] = 0;

	a[0][2] = 0;
	a[1][2] = 0;
	a[2][2] = P - 1;

	mat b;

	b[0][0] = (P + 1) / 2;
	b[1][0] = 0;
	b[2][0] = (P + 1) / 2;

	b[0][1] = 0;
	b[1][1] = (P + 1) / 2;
	b[2][1] = 0;

	b[2][2] = P - 1;

	mat res = a;

	for (ll x : vec) {
		res = powmod(res, x % (P - 1));
	}

	res = res * b;
	
	ll z[3] = {0, 1, 1};

	ll w[3] = {0, 0, 0};

	for (int j = 0; j < 3; j++) {
		for (int k = 0; k < 3; k++) {
			w[k] += z[j] * res[j][k];
		}
	}

	return make_pair(w[0] % P, w[1] % P);
}

int main() {
#ifdef LOCAL 
	freopen("input.txt", "r", stdin);
#else
#endif
	
	int n = (ll)1e5;
	scanf("%d", &n);
	vector<ll> a(n);

    int cnt = 1;

	for (ll & x : a) {
	    ++cnt;
		x = (ll)cnt * 123;
		scanf("%lld", &x);
	}

	pair<ll, ll> res = solve(a);

	cout << res.first << "/" << res.second << endl;

}