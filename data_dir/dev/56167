//Itâ€™s never too late to become what you might have been....
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 1000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 100001

#define N 7000

#define NC N
#define EC N*8

int e[EC],c[EC],co[EC],nxt[EC],last[N]={0},ptr=1;
void AddEdge(int u,int v,int cap,int cost) {
    e[ptr] = v; c[ptr] = cap; co[ptr] = cost; nxt[ptr] = last[u]; last[u] = ptr++;
    e[ptr] = u; c[ptr] = 0; co[ptr] = -cost; nxt[ptr] = last[v]; last[v] = ptr++;
}
#define opp(u) ((u&1)?u+1:u-1)

int d[N],v[N],tlast[N];
int S,T,temp;
int ans = 0;

int aug(int cur, int flow) {
    if(cur==T) return flow;
    v[cur] = 1;
    for(int tem,i = last[cur]; i; i=nxt[i]) {
        if(c[i] && !v[e[i]] && d[e[i]]+co[i]==d[cur] && (tem=aug(e[i],min(flow,c[i])))) {
            c[i] -= tem;
            c[opp(i)] += tem;
            last[cur] = i;
            return tem;
        }
    }
    return 0;
}

bool label() {
    int dis = int(0x7fffffff);
    for(int i=S;i<=T;i++) if(v[i]) {
            for(int j=tlast[i]; j; j=nxt[j])
                if(c[j] && !v[e[j]] && d[e[j]]+co[j]-d[i] < dis) dis = d[e[j]]+co[j]-d[i];
        }
    if(dis==int(0x7fffffff)) return 0;
    for(int i=S;i<=T;i++) if(v[i]) {
            d[i] += dis;
            last[i] = tlast[i];
            v[i]=0;
        }
    return 1;
}

void GetMaxFlow() {
    memset(d,0,sizeof d);
    memcpy(tlast, last, sizeof last);
    memset(v,0,sizeof v);
    ans = 0; temp=0;
    do {
        while(temp = aug(S,(int)0x7fffffff)) ans += temp*d[S];
    } while(label());
}


int dx[] = {1,0,-1,0};
int dy[] = {0,1,0,-1};
ll a[101][101],id[101][101],n,m;
int valid(int x,int y)
{
	return (x>=1 && x<=n && y>=1 && y<=m);
}
int main()
{
	boost1;boost2;
	ll i,j,x,y,k,even=0,odd=0;
	cin>>n>>m;
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=m;j++)
		cin>>a[i][j];
	}	
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=m;j++)
		{
			if((i+j)%2)
			{
				odd++;
				id[i][j]=odd;
			}
			else
			{
				even++;
				id[i][j]=even;
			}
		}
	}
	S=0;T=n*m+1;
	for(i=1;i<=odd;i++)
	AddEdge(0,i,1,0);
	for(i=1;i<=even;i++)
	AddEdge(i+odd,n*m+1,1,0);
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=m;j++)
		{
			if((i+j)%2==0)
			continue;
			for(k=0;k<4;k++)
			{
				if(!valid(i+dx[k],j+dy[k]))
				continue;
				if(a[i][j]==a[i+dx[k]][j+dy[k]])
				AddEdge(id[i][j],odd+id[i+dx[k]][j+dy[k]],1,0);
				else
				AddEdge(id[i][j],odd+id[i+dx[k]][j+dy[k]],1,1);
			}
		}
	}
	GetMaxFlow();
	cout<<ans;
	return 0;
}
