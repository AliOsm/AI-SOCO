//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

#include <iostream>
#include <stdlib.h>
#include <cmath>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <unordered_map>
#include <random>
#include <assert.h>
#include <memory.h>
#include <time.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)
#define rank qwertyuio

using namespace std;

inline bool setmin(int &x, int y) { return (y < x) ? x = y, 1 : 0; }
inline bool setmax(int &x, int y) { return (y > x) ? x = y, 1 : 0; }
inline bool setmin(ll &x, ll y) { return (y < x) ? x = y, 1 : 0; }
inline bool setmax(ll &x, ll y) { return (y > x) ? x = y, 1 : 0; }

const int N = 100000;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int P1 = 31;
const int P2 = 57;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const int MOD2 = 998244353;
const double eps = 1e-9;
const double pi = atan2(0, -1);
const int ABC = 26;

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    cout << fixed;
    //ll TL = 0.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    int n;
    cin >> n;
    int a[n], pos[n + 1];
    rep(i, 0, n) {
        cin >> a[i];
        pos[a[i]] = i;
    }
    int pr[n], ne[n];
    vector<pair<int, int> > st;
    st.push_back({inf, -1});
    rep(i, 0, n) {
        while (a[i] >= st.back().fi) {
            st.pop_back();
        }
        pr[i] = st.back().se + 1;
        st.push_back({a[i], i});
    }
    st.clear();
    st.push_back({inf, n});
    repb(i, n - 1, -1) {
        while (a[i] >= st.back().fi) {
            st.pop_back();
        }
        ne[i] = st.back().se - 1;
        st.push_back({a[i], i});
    }
    int ans = 0;
    rep(i, 0, n) {
        if (i - pr[i] < ne[i] - i) {
            rep(j, pr[i], i + 1) {
                int need = a[i] - a[j];
                if (need >= 1 && need <= n && pos[need] >= i && pos[need] <= ne[i]) {
                    ans++;
                }
            }
        } else {
            rep(j, i, ne[i] + 1) {
                int need = a[i] - a[j];
                if (need >= 1 && need <= n && pos[need] >= pr[i] && pos[need] <= i) {
                    ans++;
                }
            }
        }
    }
    cout << ans << "\n";
    return 0;
}