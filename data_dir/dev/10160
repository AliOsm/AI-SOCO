//In the name of Allah

#include<bits/stdc++.h>

using namespace std;

const int Maxn = 1000 + 5;
int n, m, k, dp[Maxn][Maxn][12], dp2[Maxn][Maxn][12];
string s, t;

int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	cin >> n >> m >> k >> s >> t;
	for(int i = 0; i < m; i ++)
	{
		if(s[0] == t[i])
			dp[0][i][1] = 1;
		dp2[0][i][1] = dp[0][i][1];
		if(i > 0)
			dp2[0][i][1] = max(dp2[0][i - 1][1], dp[0][i][1]);
	}
	for(int i = 0; i < n; i ++)
	{
		if(t[0] == s[i])
			dp[i][0][1] = 1;
		dp2[i][0][1] = dp[i][0][1];
		if(i > 0)
			dp2[i][0][1] = max(dp[i][0][1], dp2[i - 1][0][1]);
	}
	for(int i = 1; i < n; i ++)
	{
		for(int j = 1; j < m; j ++)
		{
			if(s[i] == t[j])
				dp[i][j][1] = dp[i - 1][j - 1][1] + 1;
			dp2[i][j][1] = max(max(dp2[i][j - 1][1], dp2[i - 1][j][1]), dp[i][j][1]);
			for(int l = 2; l <= k; l ++)
			{
				if(s[i] == t[j])
				{
					if(dp[i - 1][j - 1][l] == 0 && dp2[i - 1][j - 1][l - 1] != 0)
					{
						dp[i][j][l] = dp2[i - 1][j - 1][l - 1] + 1;
					}
					else
					{
						if(dp[i - 1][j - 1][l] != 0)
							dp[i][j][l] = max(dp2[i - 1][j - 1][l - 1] + 1, dp[i - 1][j - 1][l] + 1);
					}
				}
				dp2[i][j][l] = max(max(dp2[i - 1][j][l], dp2[i][j - 1][l]), dp[i][j][l]);
			}
		}
	}
	cout << dp2[n - 1][m - 1][k] << endl;
	return 0;
}
