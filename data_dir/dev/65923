/* In the name of Allah */
#include <bits/stdc++.h>
using namespace std;

const int N = 2e5 + 5;
bool a[N], lazy[N << 2];
int n, m, q, seg[N << 2][5 + 2][2];

void reverse(int id) {
	lazy[id] = !lazy[id];
	for (int i = 0; i <= m; i++)
		swap(seg[id][i][0], seg[id][i][1]);
}

void shift(int id) {
	if (!lazy[id])
		return;
	lazy[id] = false;
	reverse(id << 1);
	reverse(id << 1 | 1);
}

void merge(int id) {
	for (int i = 0; i <= m; i++)
		for (int j = 0; j < 2; j++)
			seg[id][i][j] = seg[id << 1][seg[id << 1 | 1][i][j]][j];
}

void build(int id = 1, int st = 0, int en = n) {
	if (en - st == 1) {
		seg[id][m][a[st]] = m;
		for (int i = 0; i < m; i++)
			seg[id][i][0] = seg[id][i][1] = i + 1;
		return;
	}
	int mid = st + en >> 1;
	build(id << 1, st, mid);
	build(id << 1 | 1, mid, en);
	merge(id);
}

void update(int l, int r, int id = 1, int st = 0, int en = n) {
	if (r <= st || en <= l)
		return;
	if (l <= st && en <= r)
		return reverse(id);
	shift(id);
	int mid = st + en >> 1;
	update(l, r, id << 1, st, mid);
	update(l, r, id << 1 | 1, mid, en);
	merge(id);
}

int get(int l, int r, int x = m, int id = 1, int st = 0, int en = n) {
	if (r <= st || en <= l)
		return x;
	if (l <= st && en <= r)
		return seg[id][x][0];
	shift(id);
	int mid = st + en >> 1;
	return get(l, r, get(l, r, x, id << 1 | 1, mid, en), id << 1, st, mid);
}

void readInput() {
	cin >> n >> m >> q;
	for (int i = 0; i < n; i++) {
		long long x;
		cin >> x;
		a[i] = x & 1;
	}
}

void writeOutput() {
	for (int i = 0; i < q; i++) {
		int t, l, r;
		cin >> t >> l >> r;

		l--;
		if (t & 1) {
			long long d;
			cin >> d;
			if (d & 1)
				update(l, r);
		}
		else
			cout << !get(l, r) + 1 << endl;
	}
}

int main() {
	ios_base:: sync_with_stdio(0), cin.tie(0), cout.tie(0);
	readInput(), build(), writeOutput();
	return 0;
}
