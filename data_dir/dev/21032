#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define sz(s) ((int)(s.size()))
#define all(s) s.begin(),s.end()
#define rep(i,a,n) for(int i=a;i<=n;++i)
#define per(i,n,a) for(int i=n;i>=a;--i)

typedef long long ll;
typedef unsigned long long ull;

using namespace std;

const int MAXN = 5e5 + 256;
const char nxtl = '\n';
const double eps = (double)1e-9;
template<typename T> inline bool updmin(T &a, const T &b) {return a > b ? a = b, 1 : 0;}
template<typename T> inline bool updmax(T &a, const T &b) {return a < b ? a = b, 1 : 0;}

int n, a[MAXN];
pair < int, int > t[MAXN+MAXN];

void build(int x = 1, int tl = 1, int tr = n) {
	if(tl == tr) {
		t[x] = mp(a[tr], a[tr]);
		return;
	}
	int mid = tl + tr >> 1;
	build(x+x, tl, mid);
	build(x+x+1, mid+1, tr);
	t[x].first = max(t[x+x].first, t[x+x+1].first);
	t[x].second = min(t[x+x].second, t[x+x+1].second);
}
int getmax(int l, int r, int x = 1, int tl = 1, int tr = n) {
	if(tl > r || tr < l) return 0;
	if(tl >= l && tr <= r) return t[x].first;
	int mid = tl + tr >> 1;
	return max(getmax(l, r, x+x, tl, mid), getmax(l, r, x+x+1, mid+1, tr));
}

int getmin(int l, int r, int x = 1, int tl = 1, int tr = n) {
	if(tl > r || tr < l) return (int)2e9;
	if(tl >= l && tr <= r) return t[x].second;
	int mid = tl + tr >> 1;
	return min(getmin(l, r, x+x, tl, mid), getmin(l, r, x+x+1, mid+1, tr));
}
void upd(int pos, int x = 1, int tl = 1, int tr = n) {
	if(tl == tr) {
		t[x] = mp(-(int)2e9, (int)2e9);
		return;
	}
	int mid = tl + tr >> 1;
	if(pos <= mid) upd(pos, x+x, tl, mid);
	else upd(pos, x+x+1, mid+1, tr);
	t[x].first = max(t[x+x].first, t[x+x+1].first);
	t[x].second = min(t[x+x].second, t[x+x+1].second);
}
int pr[MAXN];
map < int, int > pos;
set < int > S;

int main() {
	#ifdef accepted
		freopen(".in", "r", stdin);
		freopen(".out", "w", stdout);
	#endif
	rep(i, 0, MAXN+MAXN-1) t[i] = mp(-(int)2e9, (int)2e9);
	scanf("%d", &n);
	rep(i, 1, n) {
		scanf("%d", a+i);
		if(i > 1) {
		  auto r = S.upper_bound(a[i]);
		  auto l = r;
		  if(l == S.begin()) pr[i] = *r;
		  else if(r == S.end()) pr[i] = *--l;
		  else {
		    --l;
		    if(pos[*l] > pos[*r]) pr[i] = *l;
		    else pr[i] = *r;
		  }
		}
		pos[a[i]] = i;
		S.insert(a[i]);
	}

	rep(i, 2, n) {
		printf("%d", pr[i]);
		if(i < n) printf(" ");
	}
	puts("");

	return 0;
}
