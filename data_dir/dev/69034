#pragma comment(linker, "/stack:256000000")

#include <cmath> 
#include <ctime> 
#include <iostream> 
#include <string> 
#include <vector> 
#include <algorithm> 
#include <set> 
#include <map> 
#include <cstring> 
#include <cstdlib> 
#include <queue> 
#include <cstdio> 
#include <cfloat>

using namespace std; 

#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++) 
#define sz(v) (int)(v).size() 
#define all(v) (v).begin(), (v).end()

const double PI = acos(-1.0), EPS = 1e-9;

double dp[1 << 20], x[20], y[20], a[20];

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	long long start_time = clock();
#endif
	int n, L, R;
	scanf("%d %d %d", &n, &L, &R);
	REP(i, n) scanf("%lf %lf %lf", &x[i], &y[i], &a[i]), a[i] *= PI / 180;
	REP(i, 1 << n) dp[i] = -(1e6);
	dp[0] = L;
	REP(i, (1 << n) - 1) {
		REP(j, n) {
			if (!(i & (1 << j))) {
				double X = dp[i] - x[j], Y = -y[j];
				double NX = X * cos(a[j]) - Y * sin(a[j]);
				double NY = X * sin(a[j]) + Y * cos(a[j]);
				double K = -y[j] / NY;
				double DX = x[j] + K * NX;
				if (abs(NY) < EPS || NY > EPS) {
					dp[i + (1 << j)] = R;
				}
				dp[i + (1 << j)] = max(dp[i + (1 << j)], DX);
			}
		}
	}
	printf("%.10lf\n", min((double)(R - L), dp[(1 << n) - 1] - L)); 
#ifdef LOCAL
	printf("\n\n\nTime taken: %.3lf\n\n\n", (clock() - start_time) / 1000.);
#endif
	return 0;
}