/* practice with Dukkha */
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>

#define N	300000

void init_rand() {
	struct timeval tv;

	gettimeofday(&tv, NULL);
	srand(tv.tv_sec ^ tv.tv_usec);
}

int ss[N], tt[N], ii[N], jj[N];

int compare_s(const void *a, const void *b) {
	int i = *(int *) a;
	int j = *(int *) b;

	return ss[i] - ss[j];
}

int compare_t(const void *a, const void *b) {
	int i = *(int *) a;
	int j = *(int *) b;

	return tt[i] - tt[j];
}

void shuffle(int *aa, int n) {
	int i, j, tmp;

	for (j = 1; j < n; j++) {
		i = rand() % (j + 1);
		tmp = aa[i], aa[i] = aa[j], aa[j] = tmp;
	}
}

int main() {
	static int ans[N * 3];
	int n, h, i, j, di, dj, d, cnt;
	long long s, t;

	init_rand();
	scanf("%d", &n);
	for (i = 0; i < n; i++) {
		scanf("%d", &ss[i]);
		ii[i] = i;
	}
	shuffle(ii, n);
	qsort(ii, n, sizeof *ii, compare_s);
	for (i = 0; i < n; i++) {
		scanf("%d", &tt[i]);
		jj[i] = i;
	}
	shuffle(jj, n);
	qsort(jj, n, sizeof *jj, compare_t);
	s = 0, t = 0;
	for (i = 0; i < n; i++) {
		s += ss[ii[i]], t += tt[jj[i]];
		if (s > t) {
			printf("NO\n");
			return 0;
		}
	}
	if (s != t) {
		printf("NO\n");
		return 0;
	}
	cnt = 0;
	for (i = 0, j = 0; ; ) {
		while (i < n && ss[ii[i]] >= tt[jj[i]])
			i++;
		while (j < n && ss[ii[j]] <= tt[jj[j]])
			j++;
		if (i == n || j == n)
			break;
		di = tt[jj[i]] - ss[ii[i]];
		dj = ss[ii[j]] - tt[jj[j]];
		d = di < dj ? di : dj;
		ss[ii[i]] += d;
		ss[ii[j]] -= d;
		ans[cnt * 3 + 0] = ii[i] + 1;
		ans[cnt * 3 + 1] = ii[j] + 1;
		ans[cnt * 3 + 2] = d;
		cnt++;
	}
	printf("YES\n");
	printf("%d\n", cnt);
	for (h = 0; h < cnt; h++)
		printf("%d %d %d\n", ans[h * 3 + 0], ans[h * 3 + 1], ans[h * 3 + 2]);
	return 0;
}
