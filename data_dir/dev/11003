#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             5e13
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>
#define all(a)          a.begin(),a.end()
#define Unique(a)       sort(all(a)),a.erase(unique(all(a)),a.end())

#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())

#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);
const int N = 200005;
int treeA[4 * N];
int treeB[4 * N];

inline void updateA(int at,int L,int R,int pos,int val)
{
    if(pos<L or R<pos)return;

    if(pos==L and pos==R)
    {
        treeA[at] = val;
        return;
    }

    int mid = (L+R)/2;
    updateA(2*at,L,mid,pos,val);
    updateA(2*at+1,mid+1,R,pos,val);
    treeA[at]=max(treeA[2*at],treeA[2*at+1]);
}

inline int queryA(int at,int L,int R,int l,int r)
{
    if(r<L or R<l)return -1e9;
    if(l<=L and R<=r)return treeA[at];

    int mid = (L+R)/2;
    int x = queryA(2*at,L,mid,l,r);
    int y = queryA(2*at+1,mid+1,R,l,r);

    return max(x,y);
}
inline void updateB(int at,int L,int R,int pos,int val)
{
    if(pos<L or R<pos)return;

    if(pos==L and pos==R)
    {
        treeB[at] = val;
        return;
    }

    int mid = (L+R)/2;
    updateB(2*at,L,mid,pos,val);
    updateB(2*at+1,mid+1,R,pos,val);
    treeB[at]=min(treeB[2*at],treeB[2*at+1]);
}

inline int queryB(int at,int L,int R,int l,int r)
{
    if(r<L or R<l)return 1e9;
    if(l<=L and R<=r)return treeB[at];

    int mid = (L+R)/2;
    int x = queryB(2*at,L,mid,l,r);
    int y = queryB(2*at+1,mid+1,R,l,r);

    return min(x,y);
}
int n,ara[N],bara[N];
int main()
{
    scanf("%d",&n);
    for(int i = 1;i <= n;i++){
        scanf("%d",&ara[i]);
        updateA(1,1,n,i,ara[i]);
    }
    for(int i = 1;i <= n;i++){
        scanf("%d",&bara[i]);
        updateB(1,1,n,i,bara[i]);
    }
    LL ans = 0;
    for(int i = 1;i <= n;i++){
        int lo = i, hi = n,mid,ans1 = -1,ans2 = -1;
        while(lo <= hi){
            mid = (lo + hi)/2;
            LL a = queryA(1,1,n,i,mid);
            LL b = queryB(1,1,n,i,mid);
            if(a >= b){
                ans1 = mid;
                hi = mid - 1;
            }else{
                lo = mid + 1;
            }
        }
        if(ans1 == -1)continue;
        lo = ans1 , hi = n;
        while(lo <= hi){
            mid = (lo + hi)/2;
            LL a = queryA(1,1,n,i,mid);
            LL b = queryB(1,1,n,i,mid);
            if(a <= b){
                ans2 = mid;
                lo = mid + 1;
            }else{
                hi = mid - 1;
            }
        }
        if(ans2 == -1)continue;
        if(ans1 <= ans2){
            ans += ans2 - ans1 + 1;
        }
    }
    printf("%lld\n",ans);
}
