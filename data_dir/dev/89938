#include <bits/stdc++.h>
#define f first
#define s second
#define pb push_back
#define endl '\n';
typedef long long ll;
typedef long double ld;
using namespace std;

struct rect {
  int x, y, xx, yy;
};

const int N = 1010;
int n;

rect a[N];

bool vertSolve(vector<rect> b);

bool horzSolve(vector<rect> b) {
  if (b.size() == 1) return true;
  sort(b.begin(), b.end(), [&](rect u, rect v) -> bool{
    return u.y < v.y;
  });
  int maxT = -1;
  for (int i = 0, p = 0; i < b.size(); i++) {
    maxT = max(maxT, b[i].yy);
    if (i + 1 == b.size() || b[i + 1].y >= maxT) {
      if (p == 0 && i + 1 == b.size()) return false;
      if (!vertSolve(vector<rect>(b.begin() + p, b.begin() + i + 1))) {
        return false;
      }
      p = i + 1;
    }
  }
  return 1;
}

bool vertSolve(vector<rect> b) {
  // make vertical cuts first
  if (b.size() == 1) return true;
  sort(b.begin(), b.end(), [&](rect u, rect v) -> bool{
    return u.x < v.x;
  });
  int maxR = -1;
  for (int i = 0, p = 0; i < b.size(); i++) {
    maxR = max(maxR, b[i].xx);
    if (i + 1 == b.size() || b[i + 1].x >= maxR) {
      if (p == 0 && i + 1 == b.size()) return false;
      if (!horzSolve(vector<rect>(b.begin() + p, b.begin() + i + 1))) {
        return false;
      }
      p = i + 1;
    }
  }
  return 1;
}

int main() {
  scanf("%d", &n);
  for (int i = 0; i < n; i++) {
    scanf("%d%d%d%d", &a[i].x, &a[i].y, &a[i].xx, &a[i].yy);
  }
  if (horzSolve(vector<rect>(a, a + n)) || vertSolve(vector<rect>(a, a + n))) {
    printf("YES\n");
  } else {
    printf("NO\n");
  }
  return 0;
}