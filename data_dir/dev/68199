//#pragma GCC optimise("Ofast,unroll-loops,no-stack-protector,fast-math");
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,abm,mmx,popcnt,avx,avx2,tune=native")
          
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
          
using namespace std;
using namespace __gnu_pbds;
          
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
          
using matrix = vector<vector<ll>>;
template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
          
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
//#define int long long
 
void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifndef _offline
    //freopen("chess.in", "r", stdin);
    //freopen("chess.out", "w", stdout);
    #endif
}   

const int MAXN = 2e5 + 100;
ll p[MAXN], sum[MAXN];

signed main() {
    FAST_IO();
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        for (int i = 0; i < n; ++i) {
            cin >> p[i];
        }
        sort(p, p + n, greater<ll>());
        sum[0] = p[0];
        for (int i = 1; i < n; ++i) {
            sum[i] = sum[i - 1] + p[i];
        }
        int x, a, y, b;
        ll k;
        cin >> x >> a >> y >> b >> k;
        if (x < y) {
            swap(x, y);
            swap(a, b);
        }
        int ca = 0, cb = 0, cc = 0, ans = -1;
        for (int i = 1; i <= n; ++i) {
            if (i % a == 0 && i % b == 0) {
                cc++;
            }
            else if (i % a == 0) {
                ca++;
            }
            else if (i % b == 0) {
                cb++;
            }
            ll cur = 0;
            if (cc > 0) {
                cur += (sum[cc - 1] / 100) * (x + y);
            }
            if (ca > 0) {
                cur += ((sum[cc + ca - 1] - (cc == 0 ? 0 : sum[cc - 1])) / 100LL) * x;
            }
            if (cb > 0) {
                cur += ((sum[cc + ca + cb - 1] - (cc + ca == 0 ? 0 : sum[cc + ca - 1])) / 100LL) * y;
            }
            if (cur >= k) {
                ans = i;
                break;
            }
        }
        cout << ans << '\n';
    }
}   