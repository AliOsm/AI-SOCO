#include <bits/stdc++.h>

using namespace std;

#define sz(a) int(a.size())

vector <int> PE [300010];

int g_seed;
void fast_srand(int seed) {
    g_seed = seed;
}

int fast_rand(void) {
    g_seed = (214033*g_seed+2531011);
    return (g_seed>>16)&0x7FFF;
}

const int INF = 1e7;
int vis [300010], arr[300010];
int main() {
	int n, q;
	scanf("%d%d",&n,&q);
	
	int SRS = (n+q)&63;
	while (SRS--) fast_rand();
	
	vector <int> rT (n);
	for (int i = 0; i < n; i++) {
		scanf("%d",&arr[i]);
		PE[arr[i]].push_back(i);
		rT[i] = arr[i];
	}
	sort(rT.begin(),rT.end());
	rT.resize(unique(rT.begin(),rT.end())-rT.begin());

	while (q--) {
		int l,r,k;
		scanf("%d%d%d",&l,&r,&k);
		l--,r--;
		int res = INF, mn = (r-l+1)/k;

		int tr = 70, sz = r-l+1;
		if (sz(rT) > 57) {
			while (tr--) {
				int x = arr[l+fast_rand()%sz];
				if (vis[x] == q+1) continue;
				vis[x] = q+1;
				int p = lower_bound(PE[x].begin(), PE[x].end(),l)-PE[x].begin();
				if (p+mn < sz(PE[x]) && PE[x][p+mn] <= r) res = min(res,x);
			}
			for (int i = 0; i < 20; i++) {
				int x = rT[fast_rand()%sz(rT)];
				if (!i) x = rT[0];
				if (vis[x] != q+1) {
					vis[x] = q+1;
					int p = lower_bound(PE[x].begin(), PE[x].end(),l)-PE[x].begin();
					if (p+mn < sz(PE[x]) && PE[x][p+mn] <= r) res = min(res,x);
				}
			}
		}
		else {
			for (int x : rT) {
				if (vis[x] != q+1) {
					vis[x] = q+1;
					int p = lower_bound(PE[x].begin(), PE[x].end(),l)-PE[x].begin();
					if (p+mn < sz(PE[x]) && PE[x][p+mn] <= r) res = min(res,x);
				}
			}
		}
		
		printf("%d\n",(res == INF ? -1 : res));
	}
	
}