#pragma GCC optimize ("O3")
#pragma GCC target ("sse4")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;

int main(int argc, char** argv) {
#ifdef ONLINE_JUDGE
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
#endif

	int N,K,A;
	map<int,int> cnt;
	map<int,bool> can;
	cin>>N>>K;
	if(K == 1) {
		cout<<"Yes\n";
		return 0;
	}
	for(int i = 2;i * i <= K;i++) while(K%i == 0) cnt[i]++, K /= i, can[i];
	if(K > 1) cnt[K] = 1;
	
	for(int i = 0;i < N;i++) {
		cin>>A;
		for(auto p : cnt) {
			int c = 0;
			while(A % p.first == 0) c++, A /= p.first;
			can[p.first] |= c >= p.second;
		}
	}
	bool out = true;
	for(auto p : cnt) out &= can[p.first];
	cout<<(out?"Yes":"No")<<'\n';
	return 0;
}
