#include <algorithm>
#include <iostream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define endl '\n'
#define F first
#define S second
#define mp make_pair
#define ll long long
#define pb push_back
#define pii pair < int, int >
#define type(x) __typeof(x.begin())
#define foreach(i, x) for(type(x) i = x.begin(); i != x.end(); i++)
#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define sol (root << 1)
#define sag (sol | 1)
#define orta ((bas + son) >> 1)
#define bit __builtin_popcount

#ifndef D
	#define dbgs(x) 0
	#define dbg(x) 0
	#define TIME 0
#else
	#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
	#define dbg(x) cerr << (#x) << " --> " << (x) << endl
	#define TIME cerr << "Tooks " << (double) clock() / CLOCKS_PER_SEC << " seconds." << endl
#endif

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 100000 + 5;

int n, m, d, x, y, st, a[N], mx, mxi, mxi2, dist[N][2], ans;

vector < int > v[N];

void dfs(int root, int x, int t) {

	if(a[x] and t >= mx)
	{
		mx = t;

		mxi = x;
	}

	foreach(it, v[x])
		if(*it != root)
			dfs(x, *it, t + 1);

}

void dfs2(int root, int x, int t, bool w) {

	dist[x][w] = t;

	foreach(it, v[x])
		if(*it != root)
			dfs2(x, *it, t + 1, w);

}

int main () {

	ios :: sync_with_stdio(0);
	
	cin >> n >> m >> d;

	FOR(i, 1, m)
	{
		cin >> x;

		if(!st)
			st = x;

		a[x] = 1;
	}

	FOR(i, 1, n - 1)
	{
		cin >> x >> y;

		v[x].pb(y);
		v[y].pb(x);
	}

	dfs(0, st, 0);

	mx = 0;

	mxi2 = mxi;

	dfs(0, mxi2, 0);

	dfs2(0, mxi, 0, 0);

	dfs2(0, mxi2, 0, 1);

	FOR(i, 1, n)
		if(dist[i][0] <= d and dist[i][1] <= d)
			ans++;

	cout << ans << endl;

	TIME;
	
	return 0;

}
