#include <bits/stdc++.h>

using namespace std;

#define mid ((l + r) >> 1)
#define lson (p << 1)
#define rson (p << 1 | 1)

const int N = 1e5 + 10;

int n, k;
int a[N];
long long tr[N * 4];
long long dp[N], odp[N];

void clear() {
  memset(tr, 0, sizeof(tr));
}

void add(int p, int l, int r, int x, long long v) {
  if (l == r) {
    tr[p] += v;
    return;
  }
  if (x <= mid)
    add(lson, l, mid, x, v);
  else
    add(rson, mid + 1, r, x, v);
  tr[p] = tr[lson] + tr[rson];
}

long long query(int p, int l, int r, int ll, int rr) {
  if (ll > r || rr < l) return 0;
  if (ll <= l && rr >= r) return tr[p];
  return query(lson, l, mid, ll, rr) + query(rson, mid + 1, r, ll, rr);
}

int main() {
  scanf("%d%d", &n, &k);
  for (int i = 1; i <= n; ++i) {
    scanf("%d", a + i);
  }
  for (int i = 1; i <= n; ++i) {
    odp[i] = 1;
  }
  for (int i = 2; i <= k + 1; ++i) {
    clear();
    for (int j = 1; j <= n; ++j) {
      dp[j] = query(1, 1, n, 1, a[j] - 1);
      add(1, 1, n, a[j], odp[j]);
    }
    swap(dp, odp);
  }
  long long ans = 0;
  for (int i = 1; i <= n; ++i) {
    ans += odp[i];
  }
  printf("%lld\n", ans);
  return 0;
}
