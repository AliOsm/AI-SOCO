#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <hash_map>
#include <hash_set>
#include <vector>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iterator>
using namespace std;
#define mems(arr, val) memset(arr, val, sizeof(arr))
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define all(A) (A).begin(), A.end()
#define mp(a, b) make_pair(a, b)
typedef long long LL;
int n;
int D[3005][2][2];
vector<int> a, b, c;
int rec(int pos, int left)
{
	int result = 0;
	if (pos >= n) return 0;
	if (pos == 0)
	{
		result = max(rec(pos + 1, 1) + a[0], result);
		result = max(rec(pos + 1, 0) + b[0], result);
		return result;
	}

	if (pos == n - 1)
	{
		if (left == 0) return a[n - 1]; else return b[n - 1];	
	}

	if (left == 0)
	{
		if (D[pos + 1][1][left] == -1) D[pos + 1][1][left] = rec(pos + 1, 1);
		result = max(result, D[pos + 1][1][left] + a[pos]);
		if (D[pos + 1][0][left] == -1) D[pos + 1][0][left] = rec(pos + 1, 0);
		result = max(result, D[pos + 1][0][left] + b[pos]);
		
	}
	else
	{
		if (D[pos + 1][1][left] == -1) D[pos + 1][1][left] = rec(pos + 1, 1);
		result = max(D[pos + 1][1][left] + b[pos], result);
		if (D[pos + 1][0][left] == -1) D[pos + 1][0][left] = rec(pos + 1, 0);
		result = max(D[pos + 1][0][left] + c[pos], result);
	}

	return result;
}

int main()
{
#ifdef MY_SOL
    freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#endif

	cin>>n;
	a.resize(n);
	b.resize(n);
	c.resize(n);
	forn(i, 0, n)
		cin>>a[i];
	forn(i, 0, n)
		cin>>b[i];
	forn(i, 0, n)
		cin>>c[i];
	mems(D, -1);
	int t1 = rec(0, 0);
	if (n == 1) t1 = a[0];
	cout<<t1;
    return 0;
}