#include <algorithm>
#include <iostream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <numeric>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

typedef long long ll;
typedef pair < int, int > ii;

const int inf = 1e9 + 333;
const ll linf = 1e18 + 333;

const int N = 5000 + 5;

class data{
    
public:
    
    ll x, y, z;
    
    data() {
    
    }
    
    data(ll x, ll y, ll z) {
        this -> x = x;
        this -> y = y;
        this -> z = z;
    }
    
};

int n;
data l[N], r[N];
char s[N];

data merge(data a, char c, data b) {
    
    if(a.z == 0)
        swap(a.x, a.z);
    
    if(c == '+') {
        if(!a.x and !b.z)
            return data(a.z, 0, b.x);
        if(a.x and !b.z)
            return data(a.x, a.y + a.z, b.x);
        if(!a.x and b.z)
            return data(a.z, b.x + b.y, b.z);
        return data(a.x, a.y + a.z + b.x + b.y, b.z);
    }
    
    if(!a.x and !b.z)
        return data(a.z * b.x, 0, 0);
    if(a.x and !b.z)
        return data(a.x, a.y, a.z * b.x);
    if(!a.x and b.z)
        return data(a.z * b.x, b.y, b.z);
    return data(a.x, a.y + a.z * b.x + b.y, b.z);
    
}

int main () {
    
    scanf("%s", s + 1);
    
    n = strlen(s + 1);
    
    for(int i = 1; i <= n; i += 2)
        s[i] -= '0';
    
    l[1] = data(s[1], 0, 0);
    
    for(int i = 3; i <= n; i += 2)
        l[i] = merge(l[i - 2], s[i - 1], data(s[i], 0, 0));
    
    r[n] = data(s[n], 0, 0);
    
    for(int i = n - 2; i >= 1; i -= 2)
        r[i] = merge(data(s[i], 0, 0), s[i + 1], r[i + 2]);
    
    ll ans = l[n].x + l[n].y + l[n].z;
    
    for(int i = 1; i <= n; i += 2) {
        data res = data(s[i], 0, 0);
        for(int j = i + 2; j <= n; j += 2) {
            res = merge(res, s[j - 1], data(s[j], 0, 0));
            data t = data(res.x + res.y + res.z, 0, 0);
            if(i - 2 >= 1)
                t = merge(l[i - 2], s[i - 1], t);
            if(j + 2 <= n)
                t = merge(t, s[j + 1], r[j + 2]);
            ans = max(ans, t.x + t.y + t.z);
        }
    }
    
    cout << ans << endl;
    
    return 0;
    
}
