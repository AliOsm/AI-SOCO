#include <iostream>
#include <vector>
#include <cstring>

using namespace std;

const int MAXN=1111;

int nxt[MAXN];
bool met[MAXN];
bool ukaz[MAXN];

vector<int> v;

bool f[MAXN],fn[MAXN];

int dfs(int v) {
    int r=0;
    while (v!=0) {
        met[v]=true;
        v=nxt[v];
        r++;
    }
    return r;
}

int main()
{
    ios_base::sync_with_stdio(0);
    int n,x;
    cin >> n >> x;
    for (int i=1;i<=n;i++) {
        cin >> nxt[i];
        ukaz[nxt[i]]=true;
    }
    for (int i=1;i<=n;i++)
        if (!ukaz[i]) {
            bool key=false;
            if (!met[x]) key=true;
            int cnt=dfs(i);
            key&=met[x];
            if (!key) v.push_back(cnt);
        }
    f[0]=true;
    for (int i=0;i<(int)v.size();i++) {
        int w=v[i];
        memset(fn,0,sizeof(fn));
        for (int i=0;i<=n;i++) {
            fn[i]|=f[i];
            if (i-w>=0) fn[i]|=f[i-w];
        }
        memcpy(f,fn,sizeof(f));
    }
    int cnt=dfs(x);
    for (int i=0;i<=n;i++)
        if (f[i]) cout << i+cnt << '\n';
    return 0;
}
