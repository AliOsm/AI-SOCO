/**
 * Dont raise your voice, improve your argument.
 * --Desmond Tutu
 */

#include <bits/stdc++.h>
using namespace std;

const double PI = acos(-1);
typedef long long ll;
#define int ll
#define fori(n) for(int i=0; i<int(n); i++)

#define cins(s) string s; cin>>s;
#define cini(i) int i; cin>>i;
#define cind(d) double d; cin>>d;
#define cinai(a, n) vi a(n); fori(n) { cin>>a[i]; }
#define cinas(s, n) vs s(n); fori(n) { cin>>s[i]; }
#define cinad(a, n) vd a(n); fori(n) { cin>>a[i]; }


typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<double> vd;
typedef vector<bool> vb;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<string> vs;

/* We need to find the optimal order to kill the monsters.
 * It is sum of health minus demage created by exploding 
 * monsters.
 * So, we want to maximize exploding demage.
 * Exploding demage of i is limited by a[i] and b[i-1].
 * So we should go clockwise order, but we have to 
 * start somewhere. That one should be the one where
 * we can earn the least exploding demage.
 */
void solve() {
    cini(n);
    vi ed(n);   /* ed[i]=max exploding demage gained to monster i */
    vi a(n);
    vi b(n);
    for(int i=0; i<n; i++)
        cin>>a[i]>>b[i];
    for(int i=0; i<n; i++)
        ed[(i+1)%n]=min(b[i], a[(i+1)%n]);

    int mi=ed[0];
    int idx=0;
    for(int i=0; i<n; i++) {
        if(ed[i]<mi) {
            idx=i;
            mi=ed[i];
        }
    }

    int ans=0;
    for(int i=0; i<n; i++) {
        ans+=max(0LL, a[(i+idx)%n]);
        a[(i+idx+1)%n]-=b[(i+idx)%n];
    }
    cout<<ans<<endl;
}

signed main() {
    cin.tie(nullptr);
    std::ios::sync_with_stdio(false);
    cini(t);
    while (t--)
        solve();
}

