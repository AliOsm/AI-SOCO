#include <bits/stdc++.h>

#define SZ(x) (((int)x.size()))

typedef long long ll;
typedef long double ld;

using namespace std;

const int maxn = 300*1000+10;
int dp[maxn][3], ans[maxn], q, mx[maxn][2], tc[maxn], n, u, v;
vector<int> vec[maxn];
bool mark[maxn];

void dfs(int x)
{
	mark[x] = 1;
	for (auto &w : vec[x])
	{
		if (mark[w])
			continue;
		tc[x]++;
		dfs(w);
		dp[x][0] = max(dp[x][0], max(ans[w], max(dp[w][1], dp[w][2]) + 1));
		dp[x][1] = max(dp[x][1], dp[w][1]);
		if (dp[w][1] > mx[x][1])
		{
			if (dp[w][1] > mx[x][0])
			{
				mx[x][1] = mx[x][0];
				mx[x][0] = dp[w][1];
			}
			else
				mx[x][1] = dp[w][1];
		}
	}
	dp[x][1] += tc[x];
	dp[x][2] = tc[x] + mx[x][0] + mx[x][1];
	ans[x] = max(dp[x][0], max(dp[x][1], dp[x][2]));
}

int main()
{
	ios::sync_with_stdio(0);
	scanf("%d", &q);
	for (int z = 0; z < q; z++)
	{
		scanf("%d", &n);
		for (int i = 0; i < n; i++)
		{
			mx[i][0] = mx[i][1] = 0;
			mark[i] = 0;
			for (int j = 0; j < 3; j++)
				dp[i][j] = 0;
			tc[i] = 0;
			vec[i].clear();
		}
		for (int i = 0; i < n - 1; i++)
		{
			scanf("%d %d", &u, &v);
			u--;
			v--;
			vec[u].push_back(v);
			vec[v].push_back(u);
		}
		dfs(0);
		printf("%d\n", ans[0] + 1);
	}
	return 0;
}
