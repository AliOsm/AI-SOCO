////!multi
//vi _(){
//    int n;
//    cin >> n;
//    vi arr(n);
//    cin >> arr;
//    if(!is_sorted(all(arr)))
//        return {-1};
//    rep(i,0,n-1)
//        if(arr[i] < i+1)
//            return {-1};
//    set<int> got;
//    rep(i,1,n)
//        got.insert(i);
//    vi ans;
//    for(int x : arr){
//        if(got.count(x)){
//            ans.pb(x);
//            got.erase(x);
//        }
//        else{
//            ans.pb(min(got));
//            got.erase(got.begin());
//        }
//    }
//    return ans;
//}
//
#include <set>
#include <iomanip>
#include <algorithm>
#include <cassert>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define pb push_back
#define REP_INT(i,l,r) for(int i = l; i <= r; ++i)
#define GET_REP_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define rep(...) GET_REP_MACRO(__VA_ARGS__,REP_ANY,REP_INT)(__VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<int> vi;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
T1 istream& operator>>(istream& stream, vector<T>& t){
    return read(all(t), stream);
}
T1 istream& read(T b, T e, istream& stream){
    for(T it = b; it != e; ++it)
        stream >> *it;
    return stream;
}
T1 T min(const set<T>& s){
    assert(!s.empty());
    return *s.begin();
}
T1 ostream& operator<<(ostream& stream, const vector<T>& t){
    for(int i = 0; i < sz(t); ++i){
        stream << t[i];
        if(i+1 < sz(t))
            stream << ' ';
    }
    return stream;
}
//!multi
vi _(){
    int n;
    cin >> n;
    vi arr(n);
    cin >> arr;
    if(!is_sorted(all(arr)))
        return {-1};
    rep(i,0,n-1)
        if(arr[i] < i+1)
            return {-1};
    set<int> got;
    rep(i,1,n)
        got.insert(i);
    vi ans;
    for(int x : arr){
        if(got.count(x)){
            ans.pb(x);
            got.erase(x);
        }
        else{
            ans.pb(min(got));
            got.erase(got.begin());
        }
    }
    return ans;
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
    int t;
    cin >> t;
    for(int i = 1; i <= t; ++i){
        cout << _() << '\n';
    }
}
