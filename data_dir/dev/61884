#include <bits/stdc++.h>
using namespace std;
#define pb  push_back
#define ll  long long
#define vi  vector<int>
#define vvi vector<vi >
#define all(x) x.begin(), x.end()

int mod = 998244353;
int n;
vi  a;
vvi dp[2];

void add(int& x, int y) {
    x += y;
    if (x >= mod) x -= mod;
}

void calc(int i) {
    for (int c = 0; c < 2; ++c)
        for (int j = 1; j < 200; ++j)
            add(dp[c][i][j], dp[c][i][j - 1]);
}

int f(int c, int i, int l, int r) {
    if (l > r) return 0;
    int res = dp[c][i][r];
    if (l) res += mod - dp[c][i][l - 1];
    if (res >= mod) res -= mod;
    return res;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin >> n;
    a.resize(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i]; --a[i];
    }

    dp[0] = dp[1] = vvi(n, vi(200, 0));
    if (a[0] < 0)
        dp[0][0].assign(200, 1);
    else
        dp[0][0][a[0]] = 1;
    calc(0);

    for (int i = 1; i < n; ++i) {
        if (a[i] < 0) {
            for (int k = 0; k < 200; ++k) {
                add(dp[0][i][k], f(0, i - 1, 0, k - 1));
                add(dp[0][i][k], f(1, i - 1, 0, k - 1));
                add(dp[1][i][k], f(0, i - 1, k, k));
                add(dp[1][i][k], f(1, i - 1, k, 199));
            }
        }
        else {
            add(dp[0][i][a[i]], f(0, i - 1, 0, a[i] - 1));
            add(dp[0][i][a[i]], f(1, i - 1, 0, a[i] - 1));
            add(dp[1][i][a[i]], f(0, i - 1, a[i], a[i]));
            add(dp[1][i][a[i]], f(1, i - 1, a[i], 199));
        }
        calc(i);
    }
    cout << dp[1][n - 1][199];

    return 0;
}