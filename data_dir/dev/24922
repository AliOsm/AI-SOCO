#include <bits/stdc++.h> 
using namespace std; //i don't know why

typedef long long ll;

int n;
vector<vector<ll> > d, new_d;
vector<vector<int> > g;

bool cmp(const pair<ll, pair<int, int> > &a, const pair<ll, pair<int, int> > &b) {
	return a.first < b.first;
}

void dfs(int vv, int v, int p, ll dist = 0) {
	new_d[vv][v] = new_d[v][vv] = dist;
	for(int i = 0; i < g[v].size(); ++i) {
		int to = g[v][i];
		if(to == p) {
			continue;
		}
		dfs(vv, to, v, dist + new_d[v][to]);
	}
}

void solve() {
	vector<pair<ll, pair<int, int> > > e;
	vector<int> q;
	q.resize(n);
	for(int i = 0; i < n; ++i) {
		q[i] = i;
	}
	for(int i = 0; i < n; ++i) {
		for(int j = i + 1; j < n; ++j) {
			e.push_back(make_pair(d[i][j], make_pair(i, j)));
		}
	}
	sort(e.begin(), e.end(), cmp);
	for(int i = 0; i < e.size(); ++i) {
		ll dist = e[i].first;
		int from = e[i].second.first,
			to = e[i].second.second;
		if(q[from] != q[to]) {
			int a = q[from],
				b = q[to];
			new_d[from][to] = new_d[to][from] = dist;
			for(int i = 0; i < n; ++i) {
				if(q[i] == a) {
					q[i] = b;
				}
			}
		}
	}
	for(int i = 0; i < n; ++i) {
		for(int j = i + 1; j < n; ++j) {
			if(new_d[i][j] != ll(1e18)) {
				g[i].push_back(j);
				g[j].push_back(i);
			}
		}
	}
	for(int i = 0; i < n; ++i) {
		dfs(i, i, i, 0);
	}
}

int main (int argc, char *argv[])
{
	scanf("%d", &n);
	g.resize(n);
	d.resize(n);
	new_d.resize(n);
	for(int i = 0; i < n; ++i) {
		d[i].resize(n);
		new_d[i].resize(n, ll(1e18));
		for(int j = 0; j < n; ++j) {
			scanf("%lld", &d[i][j]);	
		}
	}
	for(int i = 0; i < n; ++i) {
		if(d[i][i]) {
			printf("NO");
			return 0;
		}
		for(int j = i + 1; j < n; ++j) {
			if(d[i][j] != d[j][i] || !d[i][j]) {
				printf("NO");
				return 0;
			}
		}
	}
	solve();
	for(int i = 0; i < n; ++i) {
		for(int j = 0; j < n; ++j) {
			if(new_d[i][j] != d[i][j]) {
				printf("NO");
				return 0;
			}
		}
	}
	printf("YES");

	return 0;
}

