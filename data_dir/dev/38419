#include <bits/stdc++.h>

using namespace std;

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<pii, int> para;
const int inf = 1e9 + 7;
const int maxN = 1e5 + 5;

int n, m, d, fst, a, b;
bool marked[maxN], used[maxN];
int dist[maxN], maxim[maxN];
vi graph[maxN];
set<pii, greater<pii>> far[maxN];
int ans;

void DFS(int start) {
	used[start] = true;
	for (auto v : graph[start]) {
		if (!used[v]) {
			bool inserted = false;
			dist[v] = dist[start] + 1;
			DFS(v);
			if (!far[v].empty()) {
				pii p = *far[v].begin();
				far[start].insert(pii(p.st + 1, v));
				if (sz(far[start]) > 2) {
					auto v = far[start].end();
					v--;
					far[start].erase(v);
				}
				inserted = true;
			}
			if (marked[v] && !inserted) {
				if (sz(far[start]) < 2)
					far[start].insert(pii(1, v));
			}
		}
	}
}

void DFS2(int start, int par) {
	maxim[start] = maxim[par] + 1;
	for (auto v : far[par]) {
		//cout<<par<<" "<<v.nd<<" "<<start<<endl;
		if (v.nd != start) {
			maxim[start] = max(maxim[start], 1 + v.st);
		}
	}
	int x = 0;
	if (far[start].size() != 0)
		x = (*far[start].begin()).st;
	//cout<<start<<" "<<dist[start]<<" "<<x<<" "<<maxim[start]<<endl;
	if (dist[start] <= d && x <= d && maxim[start] <= d) ans++;
	for (auto v: graph[start])
		if (v != par)
			DFS2(v, start);
}

int main() {
	ios_base::sync_with_stdio(0);
	cin>>n>>m>>d;
	fst = inf;
	REP(i, m) {
		cin>>a;
		fst = min(fst, a);
		marked[a] = true;
	}
	REP(i, n - 1) {
		cin>>a>>b;
		graph[a].pb(b);
		graph[b].pb(a);
	}
	//RI(i, n) ans[i] = -1;
	maxim[0] = -1;
	DFS(fst);
	DFS2(fst, 0);
	cout<<ans;
	return 0;
}
