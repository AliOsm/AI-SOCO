#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")


#include <bits/stdc++.h>
#define int long long

using namespace std;
vector<vector<int> >adj;
int vis[3005];
int dis[3005][3005];
set<pair<int,int>,greater<>>s1[3005];
set<pair<int,int>,greater<>>s2[3005];
int mm[3005][3005];

void bfs(int ver)
{
    queue<int> q;
    q.push(ver);
    vis[ver]=1;

    while (!q.empty())
    {
        int z=q.front();
        q.pop();
        for(auto i:adj[z])
            if(vis[i]==0)
            {
                vis[i]=1;
                dis[ver][i]=dis[ver][z]+1;
                q.push(i);
            }
    }

}

signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n,m;
    cin>>n>>m;
    adj.resize(n+1);
    int x,y;
    for (int i = 0; i < m; ++i) {
        cin>>x>>y;
        if(mm[x][y])
            continue;
        mm[x][y]=1;
        adj[x].push_back(y);
    }

    for (int i = 1; i <= n; ++i) {
        bfs(i);
        fill_n(vis,3005,0);
    }


    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
            if(i!=j && dis[i][j]!=0) {
                s1[i].insert({dis[i][j], j});
                s2[j].insert({dis[i][j], i});
                while (s1[i].size()>4)
                {
                    auto k=s1[i].end();
                    k--;
                    s1[i].erase(k);
                }
                while (s2[j].size()>4)
                {
                    auto k=s2[j].end();
                    k--;
                    s2[j].erase(k);
                }

            }
        }
    }

    int mx=0;
    vector<int>ans;

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {

            if(i!=j && dis[i][j]!=0)
            {
                if(s2[i].size()==0)
                    continue;
                else if(s1[j].size()==0)
                    continue;
                auto k1=s2[i].begin();
                auto k2=s1[j].begin();

                if(k1->second==j)
                    k1++;
                if(k2->second==i)
                    k2++;

                if(k1==s2[i].end()||k2==s1[j].end())
                    continue;

                if(k1->second==k2->second)
                {
                    k1++;
                    bool flag=false;
                    if(k1==s2[i].end()||k2==s1[j].end())
                        continue;
                    if(k1->second==j)
                    {
                        flag=true;
                        k1++;
                    }
                    if(k1==s2[i].end()||k2==s1[j].end())
                        continue;

                    if(mx<k1->first+k2->first+dis[i][j])
                    {
                        mx=k1->first+k2->first+dis[i][j];
                        ans.clear();
                        ans.push_back(k1->second);
                        ans.push_back(i);
                        ans.push_back(j);
                        ans.push_back(k2->second);
                    }
                    if(flag)
                    {
                        k1--;
                    }
                    k1--;
                    k2++;
                    flag=false;
                    if(k1==s2[i].end()||k2==s1[j].end())
                        continue;

                    if(k2->second==i)
                    {
                        flag=true;
                        k2++;
                    }
                    if(k1==s2[i].end()||k2==s1[j].end())
                        continue;

                    if(mx<k1->first+k2->first+dis[i][j])
                    {
                        mx=k1->first+k2->first+dis[i][j];

                        ans.clear();
                        ans.push_back(k1->second);
                        ans.push_back(i);
                        ans.push_back(j);
                        ans.push_back(k2->second);
                    }
                    if(flag)
                        k2--;
                    k2--;
                }
                else
                {
                    if(mx<k1->first+k2->first+dis[i][j])
                    {
                        mx=k1->first+k2->first+dis[i][j];
                        ans.clear();
                        ans.push_back(k1->second);
                        ans.push_back(i);
                        ans.push_back(j);
                        ans.push_back(k2->second);
                    }
                }

            }
        }
    }

    for(auto i:ans)
        cout<<i<<" ";
}