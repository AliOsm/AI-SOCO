#include <iostream>
#include <algorithm>
using namespace std;
 
long long n, m, a, d;
long long t[100005];
 
long long getPrev(long long t) {
    return t / a * a;
}
 
long long getNext(long long t) {
    return (t + a - 1) / a * a;
}
 
int main() {
    ios_base::sync_with_stdio(0);
    cin >> n >> m >> a >> d;
    for (int i = 0; i < m; i++) {
        cin >> t[i];
    }
    t[m] = a;
    t[m + 1] = a * n;
    m += 2;
    sort(t, t + m);
    m = unique(t, t + m) - t;
   
    long long currT = 0;
    int pt = 0;
    long long ans = 0;
    long long perTick = d / a + 1;
    
    for ( ; ; ) {
        while (pt < m && t[pt] <= currT) {
            pt++;
        }
        if (pt == m) break;
        long long pt1 = min(getNext(currT + 1), a * n);
        
        if (t[pt] <= pt1 || currT >= a * n) {
            ans++;
            currT = t[pt] + d;
        } else {
            long long pt2 = getPrev(t[pt]);
            long long cnt = (pt2 - pt1) / a + 1;
            long long delta = (cnt + perTick - 1) / perTick;
            ans += delta;
            long long begin = pt1 + (delta - 1) * perTick * a;
            currT = begin + d;
        }
    }
   
    cout << ans;
}