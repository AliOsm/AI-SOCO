#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <iomanip>
using namespace std;

struct SegmentTree {
	int t[400000];
	void build(int v, int tl, int tr) {
		if (tl == tr) {
			t[v] = 0;
		} else {
			int tm = (tl + tr) >> 1;
			build(v << 1, tl, tm);
			build((v << 1) + 1, tm + 1, tr);
		}
	}
	
	int sum(int v, int tl, int tr, int ql, int qr) {
		if (qr < ql) return 0;
		if (tl == ql && tr == qr) {
			return t[v];
		} else {
			int tm = (tl + tr) >> 1;
			return sum(v << 1, tl, tm, ql, min(qr, tm)) + sum((v << 1) + 1, tm + 1, tr, max(ql, tm + 1), qr);
		}
	}
	
	void update(int v, int tl, int tr, int pos, int val) {
		if (tl == tr) {
			t[v] += val;
		} else {
			int tm = (tl + tr) >> 1;
			if (pos <= tm) update(v << 1, tl, tm, pos, val);
			else update((v << 1) + 1, tm + 1, tr, pos, val);
			t[v] = t[v << 1] + t[(v << 1) + 1];
		}
	}
};

int x1[100000];
int x2[100000];
int y1[100000];
int y2[100000];

int n, m;
int d;

int main() {
	ios_base::sync_with_stdio(0);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	cin >> d;
	cin >> n >> m;
	SegmentTree up, down, lf, rg;
	up.build(1, 0, m - 1);
	down.build(1, 0, m - 1);
	lf.build(1, 0, n - 1);
	rg.build(1, 0, n - 1);
	for (int i = 0; i < d; i++) {
		cin >> x1[i] >> y1[i] >> x2[i] >> y2[i];
		x1[i]--;
		y1[i]--;
		x2[i]--;
		y2[i]--;
		up.update(1, 0, m - 1, max(y1[i], y2[i]), 1);
		down.update(1, 0, m - 1, min(y1[i], y2[i]), 1);
		lf.update(1, 0, n - 1, min(x1[i], x2[i]), 1);
		rg.update(1, 0, n - 1, max(x1[i], x2[i]), 1);
	}
	
	int cL, cR, cU, cD;
	cin >> cL >> cR >> cD >> cU;
	for (int i = 0; i < d; i++) {
		up.update(1, 0, m - 1, max(y1[i], y2[i]), -1);
		down.update(1, 0, m - 1, min(y1[i], y2[i]), -1);
		lf.update(1, 0, n - 1, min(x1[i], x2[i]), -1);
		rg.update(1, 0, n - 1, max(x1[i], x2[i]), -1);
		if (i != 0) {
			up.update(1, 0, m - 1, max(y1[i - 1], y2[i - 1]), 1);
			down.update(1, 0, m - 1, min(y1[i - 1], y2[i - 1]), 1);
			lf.update(1, 0, n - 1, min(x1[i - 1], x2[i - 1]), 1);
			rg.update(1, 0, n - 1, max(x1[i - 1], x2[i - 1]), 1);
		}
		int sumUp = up.sum(1, 0, m - 1, min(y1[i], y2[i]) + 1, m - 1);
		if (sumUp != cU) continue;
		int sumDown = down.sum(1, 0, m - 1, 0, max(y1[i], y2[i]) - 1);
		if (sumDown != cD) continue;
		int sumLeft = lf.sum(1, 0, n - 1, 0, max(x1[i], x2[i]) - 1);
		if (sumLeft != cL) continue;
		int sumRight = rg.sum(1, 0, n - 1, min(x1[i], x2[i]) + 1, n - 1);
		if (sumRight != cR) continue;
		cout << i + 1;
		return 0;
	}
	
	cout << -1;
	
	return 0;
}