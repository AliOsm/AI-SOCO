/*
    NO 
        TIME 
            TO 
                DIE
                    --007
                            */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <complex>
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
// define x, y as real(), imag()


template<class T>
istream& operator>> (istream& is, complex<T>& p) {
  T value;
  is >> value;
  p.real(value);
  is >> value;
  p.imag(value);
  return is;
}
#define M_PI 3.14159265358979323846
typedef long long int lli;
lli mod=1e9+9ll;
#define OS //single input use oeis
lli INF=9223372036854775807;
lli eps=1e-8;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,z,k,x,m,d,y,q,b,c,s,t;
const double pi=3.14159265358979323846;
lli me(lli a,lli b)
{
    // cout<<mod<<"\n";
    lli res=1;
    while(b)
    {
        if(b&1)
        res=(res%mod*a%mod)%mod;
        a=a*a;
        a%=mod;
        b=b>>1;
    }
    return res;
}
lli mI(lli a)
{
    return (me(a,mod-2)%mod+mod)%mod;
}
vector<lli> v[1005];
lli mk[1005][1005];
lli vis[1005];
lli val=-1;
lli tt[1005];
lli ss[1005];
void bfs(lli s,lli flag)
{
    queue<ll> q;
    q.push({s,0});
    while(!q.empty())
    {
        ll no=q.front();
        q.pop();
        if(vis[no.first])
        continue;
        vis[no.first]=1;
        if(no.first==t)
        {
            val=no.second;
        }
        if(!flag)
        ss[no.first]=no.second;
        else
        tt[no.first]=no.second;
        for(auto &j: v[no.first])
        {
            q.push({j,no.second+1});
        }
    }
}
int main()
{
   cin>>n>>m>>s>>t;
   for(int i=1;i<=m;i++)
   {
       cin>>x>>y;
       v[x].push_back(y);
       v[y].push_back(x);
       mk[x][y]=1;
       mk[y][x]=1;
   }
   bfs(s,0);
   lli ans=-1;
   ans=val;
   lli cd=0;
   mem1(vis,0);
   bfs(t,1);
   
   for(int i=1;i<=n;i++)
   {
       for(int j=i+1;j<=n;j++)
       {
           if(mk[i][j]==0)
           {
            	lli re=tt[j];
            	lli rs=ss[i];
            	rs+=re+1;
            	lli uu=rs;
            	
            		re=ss[j];
            		rs=tt[i];
            		rs+=re+1;
            	uu=min(uu,rs);
            	if(uu>=ans)
            	cd++;
            	
           }
       }
   }
   cout<<cd;
}