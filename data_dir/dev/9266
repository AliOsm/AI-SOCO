#include <bits/stdc++.h>
#define SZ(x) (int)x.size()
const int SZ=3e3+5;
const int oo=2e9;
using namespace std;

int  n,m;
int dis[SZ][SZ];
int s[2],d[2],l[2];
vector<int> edge[SZ];

void BFS(int k)
{
    fill(dis[k],dis[k]+SZ,oo);
    queue<int> q;
    q.push(k);
    dis[k][k]=0;
    
    while(!q.empty())
    {
        int v=q.front();
        q.pop();
        for(int i=0;i<SZ(edge[v]);i++)
        {
            int u=edge[v][i];
            if(dis[k][u]>dis[k][v]+1)
                dis[k][u]=dis[k][v]+1, 
                q.push(u);
        }
    }   
}

int main()
{
    cin>>n>>m;
    for(int i=0;i<m;i++)
    {
        int x,y;
        cin>>x>>y;
        edge[x].push_back(y);
        edge[y].push_back(x);
    }
    
    for(int i=0;i<2;i++)
        cin>>s[i]>>d[i]>>l[i];
    
    for(int i=1;i<=n;i++)
        BFS(i);
    
    if(dis[s[0]][d[0]]>l[0] || dis[s[1]][d[1]]>l[1])
        { cout<<-1; return 0; }

    int res=m;
    if(dis[s[0]][d[0]]<=l[0] && dis[s[1]][d[1]]<=l[1])
        res=min(res,dis[s[0]][d[0]]+dis[s[1]][d[1]]);
    
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
            int x=dis[s[0]][i]+dis[i][j]+dis[j][d[0]];
            int y=dis[s[1]][i]+dis[i][j]+dis[j][d[1]];
            if(x<=l[0] && y<=l[1])
                res=min(res,x+y-dis[i][j]);

            int z=dis[d[1]][i]+dis[i][j]+dis[j][s[1]];
            if(x<=l[0] && z<=l[1])
                res=min(res,x+z-dis[i][j]);
        }
    }
    
    cout<<m-res;
}