#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

int n, k;
multiset<ii> by_x, by_y;
ll ans = 1LL << 62;

void roll(int turn) {
	if(turn == k) {
		long double min_x = by_x.begin()->first * (long double) 0.5;	
		long double max_x = prev(by_x.end())->first * (long double) 0.5;
		long double min_y = by_y.begin()->first * (long double) 0.5;
		long double max_y = prev(by_y.end())->first * (long double) 0.5;
		ll dx = ceil(max_x - min_x);
		ll dy = ceil(max_y - min_y);
		if(dx == 0) {
			dx = 1;
		}
		if(dy == 0) {
			dy = 1;
		}
		if(ans > dx * dy) {
			ans = dx * dy;
		}
		return;
	}
	ii first_x = *by_x.begin();
	by_x.erase(by_x.begin());
	by_y.erase(by_y.find(make_pair(first_x.second, first_x.first)));
	roll(turn + 1);
	by_x.insert(first_x);
	by_y.emplace(first_x.second, first_x.first);

	ii last_x = *prev(by_x.end());
	by_x.erase(prev(by_x.end()));
	by_y.erase(by_y.find(make_pair(last_x.second, last_x.first)));
	roll(turn + 1);
	by_x.insert(last_x);
	by_y.emplace(last_x.second, last_x.first);

	ii first_y = *by_y.begin();
	by_y.erase(by_y.begin());
	by_x.erase(by_x.find(make_pair(first_y.second, first_y.first)));
	roll(turn + 1);
	by_y.insert(first_y);
	by_x.emplace(first_y.second, first_y.first);

	ii last_y = *prev(by_y.end());
	by_y.erase(prev(by_y.end()));
	by_x.erase(by_x.find(make_pair(last_y.second, last_y.first)));
	roll(turn + 1);
	by_y.insert(last_y);
	by_x.emplace(last_y.second, last_y.first);
}

int main() {
	scanf("%d %d", &n, &k);
	fori(i, 1, n + 1) {
		int a, b, c, d;
		scanf("%d %d %d %d", &a, &b, &c, &d);
		ii p = make_pair(a + c, b + d);
		ii p2 = make_pair(b + d, a + c);
		by_x.insert(p);
		by_y.insert(p2);
	}
	
	roll(0);

	printf("%lld\n", ans);

	return 0;
}

