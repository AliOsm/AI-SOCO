#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int MAXN=1<<20;

int f[MAXN][22];
int tin[MAXN],tout[MAXN],timer;
int depth[MAXN];
vector<int> g[MAXN];

void add_edge(int x, int y) {
    g[x].push_back(y);
}

void dfsLCA(int v, int p, int d) {
    depth[v]=d;
    tin[v]=++timer;
    f[v][0]=p;
    for (int i=1;i<22;i++)
        f[v][i]=f[f[v][i-1]][i-1];
    for (int i=0;i<(int)g[v].size();i++) {
        int to=g[v][i];
        if (to!=p) dfsLCA(to,v,d+1);
    }
    tout[v]=++timer;
}

bool upper(int x, int y) {
    return tin[x]<=tin[y] && tout[x]>=tout[y];
}

int LCA(int x, int y) {
    if (upper(x,y)) return x;
    if (upper(y,x)) return y;
    for (int i=21;i>=0;i--)
        if (!upper(f[x][i],y)) x=f[x][i];
    return f[x][0];
}

int getLengthPath(int x, int y) {
    int z=LCA(x,y);
    return depth[x]+depth[y]-2*depth[z];
}

vector<int> q;
int n,qq;

int maxi,x,y; // longest path

void obr(int v) {
    int l=getLengthPath(v,x);
    int l2=getLengthPath(v,y);
    if (l>=maxi && l>=l2) maxi=l, y=v;
    else if (l2>=maxi && l2>=l) maxi=l2, x=v;
}

int main()
{
    ios_base::sync_with_stdio(0);
    n=4;
    add_edge(1,2); add_edge(1,3); add_edge(1,4);
    cin >> qq;
    q.resize(qq);

    for (int i=0;i<qq;i++) {
        cin >> q[i];
        add_edge(q[i],n+1); add_edge(q[i],n+2);
        n+=2;
    }

    dfsLCA(1,1,0);

    x=2, y=4; //first longest path
    maxi=getLengthPath(x,y);
    n=4;
    for (int i=0;i<qq;i++) {
        obr(n+1); obr(n+2);
        n+=2;
        cout << maxi << '\n';
    }

    return 0;
}
