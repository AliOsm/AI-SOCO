#pragma optimize("Ofast")

#include <bits/stdc++.h>

using namespace std;

using ll = long long int;
using ull = unsigned long long int;
using dd = double;
using ldd = long double;
using si = short int;
using pii = pair<int, int>;
using pll = pair<ll, ll>;

#define all(x) (x).begin(), (x).end()
#define ff first
#define ss second

// debug defines
#ifdef HOME
    int jjj;
    #define PO cout << "Pomelo" << endl;
    #define OL cout << "Oliva" << endl;
    #define debug(x) cout << #x << " " << x << endl;
    #define debug_p(x) cout << #x << " " << x.ff << " " << x.ss << endl;
    #define debug_v(x) cout << #x << " "; for (auto ii : x) cout << ii << " "; cout << endl;
    #define debug_vp(x) cout << #x << " "; for (auto ii : x) cout << '[' << ii.ff << " " << ii.ss << ']'; cout << endl;
    #define wait() cin >> jjj;
#else
    #define PO 0
    #define OL 0
    #define debug(x) 0
    #define debug_p(x) 0
    #define debug_vp(x) 0
    #define debug_v(x) 0
    #define debug_vp(x) 0
    #define wait() 0
#endif // HOME
// end of debug defines

void dfs_1(int v, vector<vector<int>>& gr, vector<bool>& was, vector<ll>& me, vector<ll>& ans)
{
    ans[v] = me[v];
    was[v] = 1;
    for (int i : gr[v])
    {
        if (was[i])
            continue;
        dfs_1(i, gr, was, me, ans);
        ans[v] += max(0LL, ans[i]);
    }
}

void dfs_2(int v, vector<vector<int>>& gr, vector<bool>& was, vector<ll>& me, vector<ll>& ans, ll ma)
{
    ans[v] = me[v];
    was[v] = 0;
    for (int i : gr[v])
    {
        if (!was[i])
            continue;
        dfs_2(i, gr, was, me, ans, ma);
        if (ans[i] != ma)
            ans[v] += max(0LL, ans[i]);
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cout.tie(0);
    cin.tie(0);

    int n;
    cin >> n;
    vector<ll> me(n);
    for(int i = 0; i < n; ++i)
        cin >> me[i];

    vector<vector<int>> gr(n);
    vector<bool> was(n);
    for (int i = 0; i < n - 1; ++i)
    {
        int a, b;
        cin >> a >> b;
        gr[a - 1].push_back(b - 1);
        gr[b - 1].push_back(a - 1);
    }
    vector<ll> ans(n);
    dfs_1(0, gr, was, me, ans);
    ll ma = -1e18;
    for (int i = 0; i < n; ++i)
        ma = max(ma, ans[i]);
    debug_v(ans);
    debug(ma);
    dfs_2(0, gr, was, me, ans, ma);
    int cnt = 0;
    for (int i = 0; i < n; ++i)
        cnt += (ans[i] == ma);
    cout << ma * cnt << " " << cnt;
}
