#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define MAX_Y ((ll)(1e13))
#define MAX_X ((int)(1e6 + 2))
#define pi (2.0*acos(0))
#define M ((ll)(1e9 + 7))
#define NN ((ll)(305))
#define N ((int)(1e5 + 5))
#define eps (0)
#define log 20


using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef unsigned long long ull;


typedef tree < ll,  null_type,  less < ll >,  rb_tree_tag,  tree_order_statistics_node_update > o_set;

int dp[255][255], n, ncr[255][255], pwrk[255], pwr_k[255];

int call(int row, int rem)
{
    if(row==0){
        if(rem==0) return 1;
        return 0;
    }

    if(dp[row][rem]!=-1) return dp[row][rem];
    int ans = 0;
    int now = n-rem;
    for(int i = 1; i<=rem; i++){
        ans += (ll)((ll)((ll)ncr[rem][i]*call(row-1,rem-i)%M)*pwrk[now]%M)*pwr_k[rem-i]%M;
        if(ans>=M) ans -= M;
    }
    if(row!=n){
        for(int i = 1; i<=now; i++){
            ans += (ll)((ll)ncr[now][i]*call(row-1,rem)%M)*pwr_k[n-i]%M;
            if(ans>=M) ans -= M;
        }
    }

    return dp[row][rem] = ans;
}

int main()
{
    int k;
    scanf("%d %d",&n,&k);
    pwr_k[0] = pwrk[0] = 1;
    for(int i = 1; i<=n; i++){
        pwrk[i] = (ll)k*pwrk[i-1]%M;
        pwr_k[i] = (ll)(k-1)*pwr_k[i-1]%M;
    }
    for(int i = 0; i<=n; i++){
        ncr[i][0] = 1;
        for(int j = 1; j<=i; j++){
            ncr[i][j] = ncr[i-1][j-1] + ncr[i-1][j];
            if(ncr[i][j]>=M) ncr[i][j] -= M;
        }
    }
    memset(dp,-1,sizeof dp);
    printf("%d\n",call(n,n));
    return 0;
}
