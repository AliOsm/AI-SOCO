#include <bits/stdc++.h>

using namespace std;

template <class T> void mini(T &l, T r) {l = min(l, r);}
template <class T> void maxi(T &l, T r) {l = max(l, r);}

string to_string(string s) {
  return '"' + s + '"';
}
 
string to_string(const char* s) {
  return to_string((string) s);
}
 
template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
 
template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}
 
void debug_out() { cerr << endl; }
 
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}
 
#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

using llint = long long;

const int N = 1e6 + 10, B = 1e9 + 7, L = 20;

vector <int> v[N];
int f[N][L];
llint fac[N], inv[N];
llint pw[N];

llint mypw(llint a, int b) {
  llint ret = 1;
  while (b) {
    if (b & 1) ret = ret * a % B;
    a = a * a % B;
    b >>= 1;
  }
  return ret;
}

void add(int &x, int y) {
  x += y;
  if (x < 0) x += B;
  if (x >= B) x -= B;
}

void add(llint &x, llint y) {
  x += y;
  x %= B;
  if (x < 0) x += B;
}

void init() {
  pw[0] = 1;
  for (int i = 1; i < N; ++i) pw[i] = pw[i - 1] * 2 % B;
  fac[0] = 1;
  for (int i = 1; i < N; ++i) fac[i] = fac[i - 1] * i % B;
  inv[N - 1] = mypw(fac[N - 1], B - 2);
  for (int i = N - 2; i >= 0; --i) inv[i] = inv[i + 1] * (i + 1) % B;
  for (int i = 2; i < N; ++i) {
    for (int j = i; j < N; j += i) {
      v[j].push_back(i);
    }
  }
  debug("fuck");

  f[1][0] = 1;
  for (int i = 2; i < N; ++i) {
    for (int k = 0; k < L; ++k) {
      for (int p : v[i]) {
        add(f[i][k], f[i / p][k - 1]);
      }
    }
  }

}

void run() {
  init();
  int q;
  scanf("%d", &q);
  while (q--) {
    int x, y;
    scanf("%d%d", &x, &y);
    //f[x][i] fac[i] / ....

    llint ans = 0;
    for (int i = 0; i <= min(L - 1, y); ++i) {
      add(ans, f[x][i] * inv[i] % B * fac[y] % B * inv[y - i] % B);
    }

    ans = ans * pw[y - 1] % B;
    printf("%lld\n", ans);
  }
}

int main() {
  run();
  return 0;
}
