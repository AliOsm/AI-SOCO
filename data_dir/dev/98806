/*
 _     _                             
| |__ | |__   __ _  __ _ _   _  __ _ 
| '_ \| '_ \ / _` |/ _` | | | |/ _` |
| |_) | | | | (_| | (_| | |_| | (_| |
|_.__/|_| |_|\__,_|\__, |\__, |\__,_|
                   |___/ |___/       
*/
#include<bits/stdc++.h>

#define ll          long long
#define pb          push_back
#define ppb         pop_back
#define BigInt 		__int128
#define	endl		'\n'
#define mii         map<ll int,ll int>
#define pii         pair<ll int,ll int>
#define vi          vector<ll int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define what_is(x)  cerr << #x << " is " << x << endl;
#define sim 		template < class c
#define ris 		return * this
#define dor 		> debug & operator <<
#define eni(x) 		sim > typename \
  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {

using namespace std;

sim > struct rge {c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug 
{
	~debug() 
	{ 
		cerr<<endl; 
	}
	eni(!=) cerr << boolalpha << i; ris; }
	eni(==) ris << range(begin(i), end(i)); }
	sim, class b dor(pair < b, c > d) 
	{
	  ris << "(" << d.first << ", " << d.second << ")";
	}
	sim dor(rge<c> d) 
	{
	  	*this << "[";
	  	for (auto it = d.b; it != d.e; ++it)
	    	*this << ", " + 2 * (it == d.b) << *it;
	  	ris << "]";
	}
};
#define fuck(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "

#define N  100005

ll int vis[N];

vi a[N];

ll int col[N];

ll int dp[N];

ll int ans=0;

ll int degree[N];

ll int bkj=0;

void dfs(ll int node,ll int c)
{
	col[node]=c;
	vis[node]=1;
	ll int ret=0;
	vi v;
	ll int cnt=0;
	for(auto i:a[node])
	{
		if(!vis[i])
		{
			dfs(i,3-c);
			v.pb(dp[i]+1);
			ret=max(ret,dp[i]+1);
		}
		if(degree[i]==1)
		{
			cnt++;
		}
	}
	if(cnt!=0) bkj+=cnt-1;
	sort(all(v));
	reverse(all(v));
	if(v.size()==1)
	{
		if(a[node].size()==1)
		{
			ans=max(ans,v[0]);
		}
	}
	if(v.size()>=2)
	{
		ans=max(ans,v[0]+v[1]);
	}
	dp[node]=ret;
}


int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
	// cin>>TESTS;
	while(TESTS--)
	{
		ll int n;
		cin>>n;
		for(ll int i=1;i<n;i++)
		{
			ll int u,v;
			cin>>u>>v;
			a[u].pb(v);
			a[v].pb(u);
			degree[u]++;
			degree[v]++;
		}
		dfs(1,1);
		mii ma;
		for(ll int i=1;i<=n;i++)
		{
			if(a[i].size()==1)
			{
				ma[col[i]]++;
			}
		}
		ll int mini,maxi;
		if(ma.size()==1)
		{
			mini=1;
		}
		else
		{
			mini=3;
		}
		maxi=n-1-bkj;
		cout<<mini<<" "<<maxi<<endl;
	}
	return 0;
}