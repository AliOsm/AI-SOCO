#include <iostream>
#include <algorithm>
#include <time.h>
#include <stack>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <cassert>

using namespace std;

const int N = 35005;
const int K = 55;
long long inf = 1000 * 1000 * 1000;

int n,k;
int a[N] , ind[N];
bool used[N];
int dp[N][K];

int t[4 * N] , d[4 * N];

void push(int v,int s,int e){
    if(d[v] == 0)return ;
    t[v] += d[v];
    if(s != e){
        d[2*v] += d[v];
        d[2*v+1] += d[v];
    }
    d[v] = 0;
}

void build(int v,int s,int e,int k){
    d[v] = 0;
    if(s == e){
        t[v] = dp[s][k];
        return ;
    }
    int m = (s + e) / 2;
    build(2*v , s , m , k);
    build(2*v+1 , m+1 , e , k);
    t[v] = max(t[2*v] , t[2*v+1]);
}

void update(int v,int s,int e,int l,int r){
    push(v , s , e);
    if(l > r)return ;
    if(s == l && e == r){
        d[v]++;
        push(v , s , e);
        return ;
    }
    int m = (s + e) / 2;
    update(2*v , s , m , l , min(r , m));
    update(2*v+1 , m+1 , e , max(m+1 , l) , r);
    t[v] = max(t[2*v] , t[2*v+1]);
}

int query(int v,int s,int e,int l,int r){
    push(v , s , e);
    if(l > r)return 0;
    if(s == l && e == r)return t[v];
    int m = (s + e) / 2;
    return max(query(2*v , s , m , l , min(r , m)) , query(2*v+1 , m+1 , e , max(m+1 , l) , r));
}

int main(){
    scanf("%d%d",&n,&k);
    for(int i=1;i<=n;i++)scanf("%d",&a[i]);
    for(int i=1;i<=n;i++){
        int x = a[i];
        dp[i][1] = dp[i-1][1];
        if(used[x] == false) dp[i][1]++;
        used[x] = true;
    }
    for(int i=2;i<=k;i++){
        build(1 , 1 , n , i - 1);
        for(int j=1;j<=n;j++) ind[a[j]] = 0;
        for(int j=1;j<=n;j++){
            int x = a[j];
            int l = max(ind[x] + 1 , i);
            int r = j;
            if(l <= r) update(1 , 1 , n , l - 1 , r - 1);
            if(j >= i) dp[j][i] = query(1 , 1 , n , i - 1 , j - 1);
            ind[x] = j;
        }
        /*cout<<i<<"----------->\n";
        for(int j=1;j<=n;j++){
            cout<<dp[j][i]<<" ";
        }
        cout<<endl<<endl;*/
    }
    cout<<dp[n][k]<<endl;
    return 0;
}
