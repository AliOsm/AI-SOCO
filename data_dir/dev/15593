#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace std;
using namespace __gnu_pbds;
#define PI                      3.1415926535897932384626
#define MOD                     998244353
#define int                     long long int
#define fi                      first
#define se                      second
#define pq                      priority_queue
#define pb                      push_back
#define endl                    '\n'
#define all(x)                  x.begin(),x.end()
#define pii                     pair<int,int>
#define fill(x,y)               memset(x,y,sizeof(x));
#define rep(x,y,z)              for(int x = y; x < z; ++x)
#define repr(x,y,z)             for(int x = y; x > z; --x)
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define hash                    _H
                                    

typedef tree<pii,null_type,less<pii>,rb_tree_tag,
tree_order_statistics_node_update> ordered_set;

template<typename T> T pow(T a,T b, int m){T ans=1; while(b>0){ if(b%2==1) ans=(ans*a)%m; b/=2; a=(a*a)%m; } return ans%m; }
template<typename T> void swap(T &a,T &b){T temp = a;a = b;b = temp;return ;}

const int N = 2e5+2;
std::vector<pii> v[N];
std::vector<bool> visit(N,0);
int n;
int dp[N];
int root(int node)
{
	visit[node] = true;
	int count = 0;
	for(auto i:v[node])
	{
		if(!visit[i.fi])
		{
			count += i.se;
			count += root(i.fi);
		}
	}
	return count;
}
void dfs(int node)
{
	visit[node] = true;
	for(auto i:v[node])
	{
		if(!visit[i.fi])
		{
			dp[i.fi] = dp[node];
			dp[i.fi] -= i.se;
			if(i.se == 0)
				dp[i.fi] += 1;
			dfs(i.fi);
		}
	}
}
signed main()
{
    cin >> n;
    rep(i,1,n)
    {
    	int a,b;
    	cin >> a >> b;
    	v[a].pb({b,0});
    	v[b].pb({a,1});
    }
    dp[1] = root(1);
    visit.assign(N,0);
    visit[1] = true;
    dfs(1);
    int ans = 1e18;
    set<int> out;
    rep(i,1,n+1)
    {
    	ans = min(ans,dp[i]);
    }
    rep(i,1,n+1)
    {
    	if(dp[i] == ans)
    	{
    		out.insert(i);
    	}
    }
    cout << ans << endl;
    for(auto i:out)
    {
    	cout << i << " " ;
    }
} 