
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
#include <bitset>
#include <complex>
using namespace std;
#define rep(i, n) for (int (i) = 0; (i) < (n); (i) ++)
#define rep1(i, n) for (int (i) = 1; (i) <= (n); (i) ++)
#define FOR(i, a, b) for (int (i) = (a); (i) <= (b); (i)++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout<<#a<<" :";FOR(i123,x,y)cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int((x).size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;



vector<int> make_z(string s)
{
  int N = sz(s);
  vector<int> z(N);
  for (int i = 1, l = 0, r = 0, k; i < N; i++) {
    if (i <= r) z[i] = min (r - i + 1, z[i - l]);
    while ((k = i + z[i]) < N && s[z[i]] == s[k]) z[i]++;
    k--;
    if (k > r) l = i, r = k;
  }
  return z;
}


char getop(char ch)
{
  if (ch == 'N') return 'S';
  if (ch == 'S') return 'N';
  if (ch == 'E') return 'W';
  if (ch == 'W') return 'E';
  assert(0);
}
void solve(string s, string t)
{
  rep(i,sz(s)) s[i] = getop(s[i]);
  reverse(t.begin(), t.end());
  t += s;
  vector<int> z = make_z(t);
  rep(i,sz(s))
  {
    int j = i + sz(s);
    if (z[j] + j >= sz(z))
    {
      cout << "NO" << endl;
      exit(0);
    }
  }
}
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0); cin.tie(0);
  int N;
  string s, t;
  cin >> N >> s >> t;
  solve(s, t);
  solve(t, s);
  cout << "YES" << endl;
  return 0;
}
