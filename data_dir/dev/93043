// Kono Giorno Giovanna wa yume ga aru
// In tribute to ba4mohandes Akram and Tsunami

#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("avx2,fma,sse2,sse3,ssse3,sse4,tune=native")

#include <bits/stdc++.h>
using namespace std;

/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;
//const long long mod = 998244353;
mt19937 rng((int) chrono::steady_clock::now().time_since_epoch().count());

// watch this
//using ll = long long;
//typedef long long LL;
//using uint = unsigned int;
#define ll long long
#undef ll

const int mxN = 200010;

vector<int> g[mxN];
vector<int> ord[mxN];
int par[mxN];

vector<int> com;

pair<int, int> dfs(int v = 0, int p = -1) {
	if (g[v].empty()) {
		return {0, v};
	}
	vector<pair<pair<int, int>, int> > d;
	for (auto u : g[v]) {
		auto cur = dfs(u, v);
		cur.first++;
		d.push_back( { cur, u });
	}
	sort(d.begin(), d.end());
	for (int i = 0; i < (int) d.size(); i++) {
		ord[v].push_back(d[i].second);
	}
	for (int i = 1; i < (int) d.size(); i++) {
		par[d[i].second] = d[i - 1].first.second;
		for (int _ = 0; _ < d[i - 1].first.first; _++)
			com.push_back(d[i].second);
	}
	return {d.back().first};
}

void dfs_ord(int v = 0, int p = -1) {
	cout << v << ' ';
	for (auto u : ord[v])
		dfs_ord(u, v);
}

int main(int argc, char *argv[]) {
#ifdef ONLINE_JUDGE
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	//	freopen("mr_x.txt", "r", stdin);
	//	freopen("out.txt", "w", stdout);
#endif

	int N;
	cin >> N;
	for (int i = 1; i < N; i++) {
		cin >> par[i];
		g[par[i]].push_back(i);
	}
	dfs();
	dfs_ord();
	cout << '\n';
	cout << com.size() << '\n';
	for (auto v : com)
		cout << v << ' ';
	cout << '\n';
	return 0;
}
