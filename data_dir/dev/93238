#include<bits/stdc++.h>

using namespace std;

#define fRead(x)  freopen(x,"r",stdin)
#define fWrite(x) freopen (x,"w",stdout)

#define LL long long
#define ULL unsigned long long
#define ff first
#define ss second
#define pb push_back
#define INF 2e16
#define PI acos(-1.0)
#define mk make_pair

#define min3(a,b,c) min(a,min(b,c))
#define max3(a,b,c) max(a,max(b,c))
#define min4(a,b,c,d) min(a,min(b,min(c,d)))
#define max4(a,b,c,d) max(a,max(b,max(c,d)))
#define SQR(a) ((a)*(a))
#define FOR(i,a,b) for(int i=a;i<=b;i++)
#define REP(i,b) for(int i=0;i<b;i++)
#define ROF(i,a,b) for(int i=a;i>=b;i--)
#define MEM(a,x) memset(a,x,sizeof(a))
#define ABS(x) ((x)<0?-(x):(x))

#define scanI(a) scanf("%d",&a)
#define scanI2(a,b) scanI(a) , scanI(b)
#define scanI3(a,b,c) scanI(a), scanI(b), scanI(c)
#define scanI4(a,b,c,d) scanI(a), scanI(b), scanI(c), scanI(d)

#define scanL(a) scanf("%I64d",&a)
#define scanL2(a,b) scanL(a) , scanL(b)
#define scanL3(a,b,c) scanL(a), scanL(b), scanL(c)
#define scanL4(a,b,c,d) scanL(a), scanL(b), scanL(c), scanL(d)

#define SORT(v) sort(v.begin(),v.end())
#define REV(v) reverse(v.begin(),v.end())

#define FastRead ios_base::sync_with_stdio(0);cin.tie(nullptr);

const int N = 200005;
int deg[N];
int n , k;
set<int>st[N];
vector<pair<int,int> >G[N];
int Ans[N];
int combine(int a,int b)
{
    cout << a << " " << b << " " << st[a].size() << " " << st[b].size() << "\n";
    if(st[a].size() > st[b].size())swap(a,b);
    for(int i : st[a]){
        if(st[b].find(i) != st[b].end()){
            int temp = i;
            st[b].erase(temp);
            st[a].erase(temp);
            return temp;
        }
    }
    return -1;
}
int D;
void dfs(int node,int pre,int pc)
{
    if(deg[node] > D){
        int in = 1;
        for(pair<int,int> i : G[node]){
            if(i.first == pre)continue;
            Ans[i.second] = 1;
        }
        for(pair<int,int> i : G[node]){
            if(i.first == pre)continue;
            dfs(i.first,node,Ans[i.second]);
        }

    }else{
        int col = 1;
        for(pair<int,int> i : G[node]){
            if(i.first == pre)continue;
            if(col == pc)col++;
            Ans[i.second] = col++;
        }
        for(pair<int,int> i : G[node]){
            if(i.first == pre)continue;
            dfs(i.first,node,Ans[i.second]);
        }
    }

}
int main()
{
    scanf("%d %d",&n,&k);
    FOR(i,1,n - 1)
    {
        int a,b;
        scanf("%d %d",&a,&b);
        G[a].pb(mk(b,i));
        G[b].pb(mk(a,i));
        deg[a]++;
        deg[b]++;
    }
    FOR(i,1,n)
    {
        for(int j = 1;j <= deg[i];j++)st[i].insert(j);
    }
    vector<int>v;
    FOR(i,1,n)v.push_back(deg[i]);
    SORT(v);
    int index = n - 1 - k;
    printf("%d\n",v[index]);
    D = v[index];
    dfs(1,0,0);
    FOR(i,1,n-1)printf("%d ",Ans[i]);
}
