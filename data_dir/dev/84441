#include<bits/stdc++.h>

#define hash_mod 2305843009213717ll
#define ttt 2305843009213717ll
#define mod7 1000000007
#define mod9 1000000009
#define mod2 30000000
#define pa(a,b) make_pair(a,b)
#define f first
#define s second
#define pb(a)  push_back(a)
#define all(a) a.begin() , a.end()
#define mem(a, b) memset(a, b, sizeof(a))
#define LL  long long int
#define oo 1e9
#define pi 3.141592653589793238
#define eps  1e-6



LL maxx(LL & a , LL & b){return a>b ?  a : b;}
LL minn(LL & a , LL & b){return a>b ?  b : a;}

using namespace std;
//int dx[] = {1 , -1 , 0 , 0} ;
//int dy[] = {0 , 0 , 1 , -1} ;
void boostIO(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
}
LL gcd(LL a, LL b) {
    return b == 0 ? a : gcd(b, a % b);
}
int int_gcd(int a, int b){
    return b == 0 ? a : int_gcd(b, a % b);
}
LL lcm(LL a , LL b ){
    return a / gcd(a , b) * b;
}
LL poww(LL base, LL exp , LL mod){
  base %= mod;
  LL result = 1;
  while (exp > 0) {
    if (exp & 1) result = (result * base) % mod;
    base = (base * base) % mod;
    exp >>= 1;
  }
  return result;
}
int a[300300] ;
int main()
{
    int n ; cin >> n ;

    for(int i = 1 ; i <= n ; i++){
        cin >> a[i] ;
    }

    vector<char>ans;
    vector<int> cur;
    int l = 1 , r = n ;

    while(l <= r){
        if(l == r){
            if(cur.empty() || cur.back() < a[l]){
                ans.pb('R') ;
                break ;
            }
        }
        if(cur.empty() || ((cur.back() < a[l]) && (cur.back() < a[r]))){
            if(a[l] > a[r]){
                r--;
                ans.pb('R') ;
                cur.pb(a[r + 1]) ;
            }
            else if(a[l] < a[r]){
                cur.pb(a[l]) ;
                ans.pb('L');
                l++;
            }
        }
        else {
            if((cur.back() < a[l])){
                cur.pb(a[l]) ;
                ans.pb('L');
                l++;
            }
            else if(cur.back() < a[r]){
                r--;
                ans.pb('R') ;
                cur.pb(a[r + 1]) ;
            }
            else {
                break ;
            }
        }
    }

    cout << ans.size() << endl ;

    for(int i = 0 ; i < ans.size() ; i++){
        cout << ans[i] ;
    }
}
