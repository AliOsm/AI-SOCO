#pragma comment(linker, "/STACK:64000000")
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define y0 styaskf
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int n, x0, y0;
vector<pair<int, char> > horizontal, vertical, diag, pob;
char c;
int x, y;

bool solve(vector<pair<int, char> > &v, char target, int limit) {
    sort(all(v));
    int l = 0, r = sz(v) - 1;
    if (v.empty()) return 0;
    if (v[0].f < limit) {
        int best = 0;
        while (l <= r) {
            int mid = (l + r) >> 1;
            if (v[mid].f < limit) {
                best = mid;
                l = mid + 1;
            } else r = mid - 1;
        }
        if (v[best].s == target || v[best].s == 'Q') return 1;
    }
    l = 0; r = sz(v) - 1;
    if (v.back().f > limit) {
        int best = sz(v) - 1;
        while (l <= r) {
            int mid = (l + r) >> 1;
            if (v[mid].f > limit) {
                best = mid;
                r = mid - 1;
            } else l = mid + 1;
        }
        if (v[best].s == target || v[best].s == 'Q') return 1;
    }
    return 0;
}

int main(){

    scanf("%d\n%d %d\n", &n, &x0, &y0);
    while (n--) {
        scanf("%c %d %d\n", &c, &x, &y);
        if (y == y0) horizontal.pb(mp(x, c));
        if (x == x0) vertical.pb(mp(y, c));
        if (x + y == x0 + y0) diag.pb(mp(x, c));
        if (x - y == x0 - y0) pob.pb(mp(x, c));
    }

    if (solve(horizontal, 'R', x0) || solve(vertical, 'R', y0) || solve(diag, 'B', x0) || solve(pob, 'B', x0)) {
        printf("YES\n");
    } else printf("NO\n");

    return 0;
}
