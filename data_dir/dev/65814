#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <cstdio>
#include <map>
#include <hash_map>
#include <string>
#include <iomanip>
#include <vector>
#include <memory.h>
#include <queue>
#include <set>
#include <stack> 
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include <bitset>
#pragma comment (linker, "/STACK:167177216")
using namespace std;
#define mems(A, val) memset(A, val, sizeof(A))
#define mp(a, b) make_pair(a, b)
#define all(B) (B).begin(), (B).end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define forit (it, coll) for(auto it = coll.begin(); it != coll.end(); ++it)
const int MAX = 2147483647;
const int MAXN = 2005;
typedef long long LL;
const LL MOD = 1000000000 + 7;

bool used[MAXN];

int main(int argc, char **argv)
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
    //freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    //freopen("john.in", "r", stdin); freopen("john.out", "w", stdout);
#endif
    int n;
    int sum = 0;
    cin >> n;
    vector<pair<int, int> > ans;

    vector<int> p(n);
    vector<int> s(n);
    forn(i, 0, n){
        cin >> p[i]; p[i]--;
    }
    forn(i, 0, n){
        cin >> s[i]; s[i]--;
    }
    mems(used, false);

    for (int i = 0; i < n; ++i){
        if (p[i] == s[i]) continue;
        mems(used, false);
        int cur = s[i];
        int pos = -1;
        for (int j = s.size() - 1; j > i; --j){
            used[s[j]] = 1;
            if (p[j] == cur)
            {
                pos = j;
                break;
            }
        }

        for (int j = pos - 1; j >= i; --j){
            if (used[p[j]]){
                sum += (pos - j);
                ans.push_back(mp(j, pos));
                swap(p[j], p[pos]);
                for (int k = pos; k >= j; --k){
                    used[s[k]] = 1;
                }
                pos = j;

            }
        }
    }

    cout << sum << endl << ans.size() << endl;
    forn(i, 0, ans.size()){
        printf("%d %d\n", ans[i].first + 1, ans[i].second + 1);
    }

    return 0;
}