#include <bits/stdc++.h>
using namespace std;

int gd [300];

char bf [100010];
#define sz(a) int(a.size())


vector <int> cn [100010];
bool vis [100010];
int D [100010], dp;
vector <vector <int> > P;
void dfs (int u, int p) {
	vis[u] = 1;
	D[u] = dp;
	P[u][0] = p;
	dp++;
	for (int v : cn[u]) {
		if (!vis[v]) dfs(v, u);
	}
	dp--;
}

int lca (int u, int v) {
	if (D[u] > D[v]) swap(u,v);
	for (int i = 16; i >= 0; i--) {
		if (D[v]-D[u] >= (1<<i)) v = P[v][i];
	}
	
	if (u == v) return u;
	
	for (int i = 16; i >= 0; i--) {
		if (P[u][i] != P[v][i]) u = P[u][i], v = P[v][i];
	}
	
	return P[u][0];
}

int getDis (int u, int v) {
	return D[u]+D[v]-2*D[lca(u,v)]+1;
}

int main () {
	int n,q;
	scanf("%d%d",&n,&q);
	P = vector <vector <int> > (n,vector <int> (17,-1)); 
	for (int i = 1; i < n; i++) {
		int t;
		scanf("%d",&t);
		t--;
		cn[i].push_back(t);
		cn[t].push_back(i);
	}
	
	dfs(0,-1);
	
	for (int j = 1; j < 17; j++) {
		for (int i = 0; i <n; i++) {
			int x = P[i][j-1];
			if (x != -1) P[i][j] = P[x][j-1];
		}
	}
	
	while (q--) {
		vector <int> sc (3);
		scanf("%d%d%d",&sc[0],&sc[1],&sc[2]);
		sc[0]--, sc[1]--,sc[2]--;
		sort(sc.begin(),sc.end());
		int res = 0;
		do {
			int u = sc[0], v = sc[1], ds = sc[2];
			res = max(res,(getDis(ds,u)+getDis(ds,v)-getDis(u,v)+1)/2);

		} while (next_permutation(sc.begin(),sc.end()));
		printf("%d\n",res);
	}
}

