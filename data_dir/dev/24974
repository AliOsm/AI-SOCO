# include <bits/stdc++.h>

using namespace std;

const int N = 1e5 + 3;

int n, m, l[N], r[N], q[N], ans[N], pref[31][N];
int t[N * 4];

void build(int v = 1, int tl = 1, int tr = n){
      if(tl == tr){
            t[v] = ans[tl];
      } else {
            int tm = (tl + tr) >> 1;
            build(v << 1, tl, tm);
            build((v << 1) | 1, tm + 1, tr);
            t[v] = t[v << 1] & t[(v << 1) | 1];
      }
}

int get(int l, int r, int v = 1, int tl = 1, int tr = n){
      if(l > tr || tl > r) return (1 << 30) - 1;
      if(l <= tl && tr <= r) return t[v];
      int tm = (tl + tr) >> 1;
      return get(l, r, v << 1, tl, tm) & get(l, r, (v << 1) | 1, tm + 1, tr);
}

int main(){
      scanf("%d %d", &n, &m);

      for(int i = 1; i <= m; i ++){
            scanf("%d %d %d", &l[i], &r[i], &q[i]);
            for(int j = 0; j <= 30; j ++){
                  int bit = q[i] & (1 << j);
                  if(bit){
                        pref[j][l[i]] ++;
                        pref[j][r[i] + 1] --;
                  }
            }
      }

      for(int i = 0; i <= 30; i ++)
            for(int j = 1; j <= n; j ++){
                  pref[i][j] += pref[i][j - 1];
                  if(pref[i][j] > 0) ans[j] += (1 << i);
            }

      build();

      for(int i = 1; i <= m; i ++){
            if(get(l[i], r[i]) != q[i]){
                  puts("NO");
                  return 0;
            }
      }

      puts("YES");

      for(int i = 1; i <= n; i ++){
            printf("%d ", ans[i]);
      }
}
