#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <set>
#include <algorithm>
#include <map>

using namespace std;

#define sz(a) (int)a.size()
#define pb push_back
#define f first
#define s second
#define mp make_pair
#define pii pair<int, int>
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)

const int mod = (int)1e9 + 7;

int n;
int a[555];
int fact[1001000];
int inv[1001000];
map<int, int> p;

int binpow(int a, int k) {
    if (k == 0) return 1;
    int ans = binpow(a, k / 2);
    ans = 1ll * ans * ans % mod;
    if (k % 2) ans = 1ll * ans * a % mod;
    return ans;
}

int C(int n, int k) {
    if (k > n) return 0;
    int ans = fact[n];
    ans = 1ll * ans * inv[k] % mod;
    ans = 1ll * ans * inv[n - k] % mod;
    return ans;
}

int main() {

    fact[0] = inv[0] = 1;
    for (int i = 1; i < 1001000; i++) {
        fact[i] = 1ll * fact[i - 1] * i % mod;
        inv[i] = binpow(fact[i], mod - 2);
    }

    cin >> n;
    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        for (int j = 2; j * 1ll * j <= x; j++) {
            if (x % j == 0) {
                int cnt = 0;
                while (x % j == 0) {
                    cnt++;
                    x /= j;
                }
                p[j] += cnt;
            }
        }
        if (x > 1) p[x]++;
    }

    int ans = 1;
    forit (it, p) {
        int alpha = (it->s);
        ans = 1ll * ans * C(alpha + n - 1, alpha) % mod;
    }

    printf("%d\n", ans);

    return 0;
}

