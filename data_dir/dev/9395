#include <bits/stdc++.h>

using namespace std;

class segtree {
public:
  struct node {
    node(int x = 0) : val(x) {}
    int val = 0, lz = 0;
    void apply(int l, int r, int x) {
      val += x;
      lz += x;
    }
  };

  node merge(const node& a, const node& b) const {
    return node(min(a.val, b.val));
  }

  int n;
  vector<node> t;

  void push(int v, int l, int r) {
    int m = l + r >> 1;
    t[v << 1].apply(l, m, t[v].lz);
    t[v << 1 | 1].apply(m + 1, r, t[v].lz);
    t[v].lz = 0;
  }

  template<typename... M> void modify(int v, int tl, int tr, int l, int r, const M&... m) {
    if (l <= tl and tr <= r) {
      t[v].apply(tl, tr, m...);
      return;
    }
    if (tl > r or l > tr) {
      return;
    }
    push(v, tl, tr);
    int tm = tl + tr >> 1;
    modify(v << 1, tl, tm, l, r, m...), modify(v << 1 | 1, tm + 1, tr, l, r, m...);
    t[v] = merge(t[v << 1], t[v << 1 | 1]);
  }

  node get(int v, int tl, int tr, int l, int r) {
    if (l <= tl and tr <= r) {
      return t[v];
    }
    if (tl > r or l > tr) {
      return node();
    }
    push(v, tl, tr);
    int tm = tl + tr >> 1;
    return merge(get(v << 1, tl, tm, l, r), get(v << 1 | 1, tm + 1, tr, l, r));
  }

  node getElem(int v, int tl, int tr, int k) {
    if (tl == tr) {
      return t[v];
    }
    push(v, tl, tr);
    int tm = tl + tr >> 1;
    if (k <= tm) {
      return getElem(v << 1, tl, tm, k);
    } else {
      return getElem(v << 1 | 1, tm + 1, tr, k);
    }
  }

  segtree(int _n = 0) {
    int p = 1;
    while ((1 << p) < _n) {
      ++p;
    }
    n = 1 << p;
    t.resize(n << 1);
    for (int i = n - 1; i >= 1; --i) {
      t[i] = merge(t[i << 1], t[i << 1 | 1]);
    }
  }

  template<class T> segtree(const vector<T>& a) {
    int p = 1;
    while ((1 << p) < a.size()) {
      ++p;
    }
    n = 1 << p;
    t.resize(n << 1);
    for (int i = 0; i < a.size(); ++i) {
      t[i + n] = a[i];
    }
    for (int i = n - 1; i >= 1; --i) {
      t[i] = merge(t[i << 1], t[i << 1 | 1]);
    }
  }

  template<typename... M> void modify(int l, int r, const M&... m) {
    modify(1, 0, n - 1, l, r, m...);
  }

  node get(int l, int r) {
    return get(1, 0, n - 1, l, r);
  }

  node getElem(int k) {
    return getElem(1, 0, n - 1, k);
  }

  node operator[](int i) {
    return t[i];
  }
};

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);

  int n;
  cin >> n;
  vector<int> p(n), pos(n);
  for (int i = 0; i < n; ++i) {
    cin >> p[i];
    pos[--p[i]] = i;
  }
  segtree tr(n + 1);
  cout << n << ' ';
  int ans = n - 1;
  for (int i = 0; i < n; ++i) {
    int x;
    cin >> x;
    --x;
    if (i + 1 == n) {
      break;
    }
    tr.modify(0, x + 1, 1);
    while (tr[1].val >= 0) {
      tr.modify(0, pos[ans] + 1, -1);
      --ans;
    }
    cout << ans + 2 << ' ';
  }

  return 0;
}
