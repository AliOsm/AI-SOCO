// rc.cpp : Defines the entry point for the console application.
//

#include <math.h>

#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <functional>
#include <iomanip>

using namespace std;

#define PI 3.14159265358979323846
#define EPS 1.E-8

#define FIN(a, n) { for (ul i = 0; i < n; ++i) cin >> a[i]; }
#define FOUT(a, n) { cout << a[0]; for (ul i = 1; i < n; ++i) cout << ' ' << a[i]; cout << '\n'; }

//typedef unsigned long long ull;
//typedef long long sll;

typedef unsigned char uc;
typedef unsigned int ui;
typedef unsigned long long ul;
typedef long long sl;

map<ui, vector<ui>> v;

ui t[500000];

ui sum(ui v, ui tl, ui tr, ui l, ui r)
{
    if (l > r)
        return 0;

    if (l == tl && r == tr)
        return t[v];

    ui tm = (tl + tr) / 2;
    return sum(v * 2, tl, tm, l, min(r, tm)) + sum(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r);
}

void upd(ui v, ui tl, ui tr, ui pos)
{
    if (tl == tr)
        t[v] = 1;
    else
    {
        ui tm = (tl + tr) / 2;
        if (pos <= tm)
            upd(v * 2, tl, tm, pos);
        else
            upd(v * 2 + 1, tm + 1, tr, pos);
        t[v] = t[v * 2] + t[v * 2 + 1];
    }
}

int main(int argc, char* argv[])
{
    ios_base::sync_with_stdio(false);

    ui n;
    cin >> n;

    for (ui i = 0; i < n; ++i) {
        ui a;
        cin >> a;
        v[a].push_back(i);
    }

    ul r = 0;
    ui ci = 0;
    for (map<ui, vector<ui>>::iterator it = v.begin(); it != v.end(); ++it) {

        vector<ui>::iterator jt = lower_bound(it->second.begin(), it->second.end(), ci);
        if (jt == it->second.end())
            jt = it->second.begin();

        vector<ui>::iterator xt = jt;
        do {

            if (*xt >= ci) {
                r += *xt - ci + 1;
                r -= sum(1, 0, n - 1, ci, *xt);
            }
            else {
                r += n - ci;
                r -= sum(1, 0, n - 1, ci, n - 1);

                r += *xt + 1;
                r -= sum(1, 0, n - 1, 0, *xt);
            }

            upd(1, 0, n - 1, *xt);
            ci = *xt;

            ++xt;
            if (xt == it->second.end())
                xt = it->second.begin();

        } while (xt != jt);
    }

    cout << r << endl;
    return 0;
}