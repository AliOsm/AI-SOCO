#include <bits/stdc++.h>

#define fore(i, l, r) for(int i = int(l); i < int(r); ++i)
#define forn(i, n) fore(i, 0, n)
#define nfor(i, n) for(int i = int(n) - 1; i >= 0; --i)
#define for1(i, n) for(int i = 1; i < int(n); ++i)

#define mp make_pair
#define pb push_back
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define x first
#define y second
#define correct(x, y, xmax, ymax) ((x) >= 0 && (x) < (xmax) && (y) >= 0 && (y) < (ymax))

using namespace std;
    
template<typename T> inline T abs(T a){ return ((a < 0) ? -a : a); }
template<typename T> inline T sqr(T a){ return a * a; }
template<class T> T gcd(T a, T b) { return a ? gcd (b % a, a) : b; }
template<class T> T lcm(T a, T b) { return a / gcd (a, b) * b; }
template<class T> T sign(T a) { return a > 0 ? 1 : (a < 0 ? -1 : 0); }

template<class A, class B> ostream& operator <<(ostream &out, const pair<A, B> &p) {
    return out << "(" << p.x << ", " << p.y << ")";
};

template<class A> ostream& operator <<(ostream &out, const vector<A> &v) {
    out << "[";
    forn(i, sz(v)) {
        if(i)
            out << ", ";
        out << v[i];
    }
    return out << "]";
}

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
typedef vector <int> vi;

const int dx[] = {-1, 0, 1,  0};
const int dy[] = { 0, 1, 0, -1};
const int dxK[] = {-1, -1, 0, 1, 1,  1,  0, -1};
const int dyK[] = { 0,  1, 1, 1, 0, -1, -1, -1};
const int dxKn[] = {-2, -1, 1, 2,  2,  1, -1, -2};
const int dyKn[] = { 1,  2, 2, 1, -1, -2, -2, -1};

const int INF = int(1e9) + 100;
const li INF64 = int(1e18) + 100;
const ld EPS = 1e-9;
const ld PI = acosl(-1.0);
const int N = 300 * 1000 + 9;

int n;
int pos[N];
char col[N];
vector <int> g;
vector <int> r;
vector <int> b;

inline bool read() {
    if(!(cin >> n))
        return false;
    forn(i, n){
        cin >> pos[i] >> col[i];
        if(col[i] == 'G')
            g.pb(i);
        else if(col[i] == 'R')
            r.pb(i);
        else
            b.pb(i);
    }
    return true;
}

int calc(int l, int r){
    int dist = pos[r - 1] - pos[l];
    int mxR = -1, mxB = -1;
    int lstR = -1, lstB = -1;
    fore(i, l, r){
        if(col[i] == 'R' || col[i] == 'G'){
            if(lstR != -1)
                mxR = max(mxR, pos[i] - pos[lstR]);
            lstR = i;
        }
        if(col[i] == 'B' || col[i] == 'G'){
            if(lstB != -1)
                mxB = max(mxB, pos[i] - pos[lstB]);
            lstB = i;
        }
    }
    //cout << mnR << ' ' << mnB << endl;
    int res = dist;
    if(mxR != -1)
        res += dist - mxR;
    if(mxB != -1)
        res += dist - mxB;
    
    if(mxR != -1 && mxB != -1)
        res = min(res, 2 * dist);
        
    return res;
}

int calcPref(vi r, vi g){
    if(sz(r) > 0 && r[0] < g[0])
        return pos[g[0]] - pos[r[0]];
    return 0;
}

int calcSuff(vi r, vi g){
   if(sz(r) > 0 && r.back() > g.back())
        return pos[r.back()] - pos[g.back()];
    return 0;
}

inline void solve() {
    int res = 0;
    for1(i, sz(g))
        res += calc(g[i - 1], g[i] + 1);
    //cout << res << endl;
    if(sz(g) == 0){
        if(sz(r) > 0)
            res += pos[r.back()] - pos[r[0]];
        if(sz(b) > 0)
            res += pos[b.back()] - pos[b[0]];
    }
    else{
        res += calcPref(r, g);;
        res += calcPref(b, g);
    
        res += calcSuff(r, g);;
        res += calcSuff(b, g);
    }
    
    cout << res << endl;
}

int main() {
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    int tt = clock();
#endif
    cout << fixed << setprecision(15);
    cerr << fixed << setprecision(15);

    if(read()) {
        solve();

#ifdef _DEBUG
        cerr << "TIME = " << clock() - tt << endl;
        tt = clock();
#endif
    }

    return 0;
}