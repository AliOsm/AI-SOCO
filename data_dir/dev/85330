#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

typedef long long            ll;
typedef unsigned long long   ull;
typedef vector<int>          vi;
typedef vector<ll>           vl;
typedef pair<int, int>       pi;
typedef pair<ll, ll>         pl;
typedef vector<pi>           vpi;
typedef vector<pl>           vpl;
typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define read        freopen("in.c", "r", stdin)
#define write       freopen("out.c", "w", stdout)
#define all(a)      a.begin(), a.end()
#define bye         exit(0)
#define mp          make_pair
#define ff          first
#define ss          second
#define L(x)        ((x) << 1)
#define R(x)        ((x) << 1 | 1)
#define SZ(a)       (ll)(a).size()
#define pb          push_back
#define eb          emplace_back
#define eps         1e-9
#define inf         (1000000000)
#define infl        (1000000000000000000LL)
#define cs(p)       printf("Case %d:", (p)++)
#define ptc(c)      putchar(c)
#define gtc()       getchar()
#define nl          puts("")
#define sp          printf(" ")
#define out(a)      printf("%lld", (ll)(a))
#define SET(a, x)   memset((a), x, sizeof(a))
#define dbg(x)      cout << "--- " << #x << " = " << (x) << '\n'

ll bgm(ll a, ll b, ll m) {
    b = (b == -1) ? (m - 2) : b;
    a %= m;
    ll rem = 1;
    while(b != 0) {
        if(b&1)
            rem = (rem * a) % m;
        a = (a * a) % m;
        b >>= 1;
    }
    return rem;
}

inline ll in() {
    ll a;
    assert(scanf("%lld", &a) != EOF);
    return a;
}

const int MAX = 1000000 + 5;
const int LEN = 50;
const ll MOD = 998244353;

double ttm;

vi ara;

ll solve(int n) {
    ara.clear();
    vi now;
    for(int i = 1; i <= n; i++)
        now.pb(i);
    do {
        for(int x : now)
            ara.pb(x);
    } while(next_permutation(all(now)) != 0);
    now.clear();
    for(int i = 1; i <= n; i++)
        now.pb(i);
    int cnt = 0;
    int x[10] = {0};
    ll ans = 0;
    do {
        cnt = 0;
        for(int i = n - 1; i < SZ(ara); i++) {
            int f = 1;
            for(int j = n - 1, k = i; j >= 0; j--, k--) {
                if(ara[k] != now[j]) {
                    f = 0;
                    break;
                }
            }
            cnt += f;
        }
        ++x[cnt];
        ans += cnt;
        dbg(cnt);
    } while(next_permutation(all(now)) != 0);
    for(int i = 1; i < n; i++)
        dbg(i), dbg(x[i]), nl;
    return ans;
}

ll n;

ll ans, now;

ll fact[MAX];

int main() {
    fact[0] = 1;
    for(int i = 1; i < MAX; i++)
        fact[i] = (i * fact[i - 1]) % MOD;
    n = in();
    ans = n;
    if(n > 2)
        now = (fact[n] * bgm(2, -1, MOD)) % MOD;
    for(int i = n - 1, j = 1, k = 3; i > 1; i--, j++, k++) {
        ans = (ans + (now * i) % MOD) % MOD;
        now = (now * bgm(j, -1, MOD)) % MOD;
        now = (now * bgm(k, -1, MOD)) % MOD;
        now = (now * (j + 1)) % MOD;
    }
    out(ans), nl;
    return 0;
}

