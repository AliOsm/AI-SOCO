/* 77A */
#include <iostream>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <deque>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
#include <functional>
#include <iterator>
#include <iomanip>
using namespace std;
//#pragma comment(linker,"/STACK:102400000,1024000")

#define sti				set<int>
#define stpii			set<pair<int, int> >
#define mpii			map<int,int>
#define vi				vector<int>
#define pii				pair<int,int>
#define vpii			vector<pair<int,int> >
#define rep(i, a, n) 	for (int i=a;i<n;++i)
#define per(i, a, n) 	for (int i=n-1;i>=a;--i)
#define clr				clear
#define pb 				push_back
#define mp 				make_pair
#define fir				first
#define sec				second
#define all(x) 			(x).begin(),(x).end()
#define SZ(x) 			((int)(x).size())
#define lson			l, mid, rt<<1
#define rson			mid+1, r, rt<<1|1

typedef struct {
	int a, b, c;
} node_t;

int M[7][7];
char sa[35], sb[35];
node_t nd[105];
int m = 0;
int p[5050][7], pn = 0;
int ids[3][7]; 
	
void init() {
	int a[7];
	
	rep(i, 0, 7)
		a[i] = i;
		
	do {
		memcpy(p[pn], a, sizeof(a));
		++pn;
	} while (next_permutation(a, a+7));
}

int getId(char *s) {
	switch (s[0]) {
	case 'A':	return 0;
	
	case 'C':	
		if (s[1] == 'h')
			return 1;
		else
			return 2;
		
	case 'T':	return 3;
	
	case 'D':	return 4;
	
	case 'S':	return 5;
	
	case 'H':	return 6;
	
	default:	return -1;
	}
}

int calc(int x) {
	int a = nd[x].a;
	int b = nd[x].b+a;
	int c = nd[x].c+b;
	int ret = INT_MIN, tmp;
	
	int d[7], id_, id;
	
	rep(i, 0, a)
		d[i] = 0;
	rep(i, a, b)
		d[i] = 1;
	rep(i, b, c)
		d[i] = 2;
	
	rep(i, 0, pn) {
		#ifndef ONLINE_JUDGE
		int xx[7] = {
			0,3,4,1,2,5,6
		};
		bool flag = true;
		rep(j, 0, 7) {
			if (p[i][j] != xx[j]) {
				flag = false;
				break;
			}
		}
		if (flag) {
			printf("%d\n", tmp);
		}
		#endif
		tmp = 0;
		rep(j, 0, 7) {
			id = d[j];
			rep(k, 0, 7) {
				id_ = d[k];
				if (id == id_) {
					tmp += M[p[i][j]][p[i][k]];
				}
			}
		}
		#ifndef ONLINE_JUDGE
		if (flag) {
			printf("%d\n", tmp);
		}
		#endif
		ret = max(ret, tmp);
	}
	
	return ret;
}

int main() {
	ios::sync_with_stdio(false);
	#ifndef ONLINE_JUDGE
		freopen("data.in", "r", stdin);
		freopen("data.out", "w", stdout);
	#endif
	
	int x, y, z;
	int n;
	
	init();
	scanf("%d", &n);
	while (n--) {
		scanf("%s %*s %s", sa, sb);
		x = getId(sa);
		y = getId(sb);
		M[x][y] = 1;
	}
	
	scanf("%d %d %d", &x, &y, &z);
	int mx, mn;
	int ans = INT_MAX;
	int a, b, c;
	
	rep(i, 1, 6) {
		rep(j, 1, 6) {
			if (i+j >= 7)
				break;
			int k = 7 - i - j;
			a = x / i;
			b = y / j;
			c = z / k;
			mn = min(a, min(b, c));
			mx = max(a, max(b, c));
			if (mx-mn < ans) {
				ans = mx - mn;
				nd[0].a = i;
				nd[0].b = j;
				nd[0].c = k;
				m = 1;
			} else if (mx-mn == ans) {
				nd[m].a = i;
				nd[m].b = j;
				nd[m].c = k;
				++m;
			}
		}
	}
	
	mx = INT_MIN;
	rep(i, 0, m) {
		mx = max(mx, calc(i));
	}
	printf("%d %d\n", ans, mx);
	
	#ifndef ONLINE_JUDGE
		printf("time = %d.\n", (int)clock());
	#endif
	
	return 0;
}