//Pham Huu Canh
//C. Devu and Partitioning of the Array

#include<iostream>
#include<fstream>
#include<string.h>
#include<stdlib.h>
#include<stdio.h>
#include<math.h>
#include<algorithm>
#include<vector>
#include<queue>
#include<stack>
#include<map>
#include<set>

#define max64 9223372036854775807LL
#define max32 2147483647
#define max16 32767
#define EPS 1e-8
#define ll long long
#define ull unsigned long long
#define PB push_back
#define MP make_pair
#define PQ priority_queue
#define timmax(x, y) ((x) > (y) ? (x) : (y))
#define timmin(x, y) ((x) < (y) ? (x) : (y))

#define fi "C.inp"
#define fo "C.out"

using namespace std;

long n, nk, np;
vector<long> v[2], ans[100005];

void input()
{
    long i, j, x;
    long oddsz, evensz, oddreq, oddleft;
    
    scanf("%ld %ld %ld", &n, &nk, &np);
    for (i = 1; i <= n; i++)
    {
        scanf("%ld", &x);
        v[x&1].PB(x);
    }
    
    oddsz = v[1].size();
    oddreq = nk - np;
    oddleft = oddsz - oddreq;
    evensz = v[0].size();
    if (oddsz < oddreq || (oddleft & 1) || evensz + (oddleft>>1) < np)
        printf("NO\n");
    else
    {
        j = nk;
        for (i = 0; i < evensz; i++)
        {
            ans[j].PB(v[0][i]);
            j = timmax(1, j - 1);
        }
        
        for (i = 0; i < oddreq; i++)
            ans[i+1].PB(v[1][i]);
        
        j = oddreq;
        for (i = oddreq; i < oddsz; i += 2)
        {
            j = timmin(j + 1, nk);
            ans[j].PB(v[1][i]);
            ans[j].PB(v[1][i+1]);
        }
        
        printf("YES\n");
        for (i = 1; i <= nk; i++)
        {
            oddsz = ans[i].size();
            printf("%ld", oddsz);
            for (j = 0; j < oddsz; j++)
                printf(" %ld", ans[i][j]);
            printf("\n");
        }
    }
}

int main()
{
    //freopen(fi,"r",stdin);
    //freopen(fo,"w",stdout);
    
    input();
    
    return 0;
}
