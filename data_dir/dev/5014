#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef vector<pii> vii;
typedef vector<bool> vb;
typedef vector<string> vs;
const int di[] = { -1, 0, 1, 0 };
const int dj[] = { 0, 1, 0, -1 };
const ll MOD = 1e9 + 7;
const ll INF = 1e9;
const double EPS = 1e-5;
#define mp make_pair
#define all(x) x.begin(),x.end()

struct Type {
	string name;
	int as = 0, am = 0;
};

int n;
map<string, Type> tp;

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++) {
		string cmd, a; cin >> cmd >> a;

		int as = 0, am = 0;
		int x = 0;
		while (x < a.length() && a[x] == '&')
			x++, am++;
		x = a.length() - 1;
		while (x >= 0 && a[x] == '*')
			x--, as++;
		a = a.substr(am, a.length() - as - am);

		int mn = min(as, am);
		as -= mn, am -= mn;

		if (cmd == "typedef") {
			string b; cin >> b;

			if (tp.find(a) == tp.end()) {
				if (a != "void" || am) a = "errtype";
				if (a == "errtype") am = as = 0;
				tp[b] = Type{ a,as,am };
			}
			else {
				Type tmp = tp[a];
				tmp.am += am;
				tmp.as += as;

				mn = min(tmp.am, tmp.as);
				tmp.am -= mn, tmp.as -= mn;

				if (tmp.am && tmp.name == "void") tmp.name = "errtype";
				if (tmp.name == "errtype") tmp.am = tmp.as = 0;
				tp[b] = tmp;
			}
		}
		else {
			if (tp.find(a) == tp.end()) {
				if (a != "void" || am) a = "errtype";
				if (a == "errtype") am = as = 0;
				cout << string(am, '&') << a << string(as, '*') << endl;
			}
			else {
				Type tmp = tp[a];
				tmp.am += am;
				tmp.as += as;

				mn = min(tmp.am, tmp.as);
				tmp.am -= mn, tmp.as -= mn;

				if (tmp.am && tmp.name == "void") tmp.name = "errtype";
				if (tmp.name == "errtype") tmp.am = tmp.as = 0;
				cout << string(tmp.am, '&') << tmp.name << string(tmp.as, '*') << endl;
			}
		}
	}
	cin.ignore(), cin.get();
}
