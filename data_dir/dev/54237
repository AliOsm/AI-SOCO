#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <fstream>
#include <list>
#include <set>
#include <climits>
#include <map>
#include <stack>
#include <queue>
#include <complex>
#include <cmath>
#include <sstream>
#include <deque>
#include <utility>
#include <bitset>
#include <numeric>
#include <ext/hash_set>
#include <ext/hash_map>

using namespace std;
using namespace __gnu_cxx;

#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define REV(i,b,a) for(int i=(a);i>=(b);i--)
#define mp make_pair
#define pb push_back
#define oo (1<<30)
#define M 1001
#define sz(v) (int)v.size()
#define all(c) (c).begin(),(c).end()
#define rall(c) (c).rbegin(),(c).rend()
#define show(x) cerr<<#x<<" = "<<x<<endl;
#define mem(s,v) memset(s,v,sizeof(s))
#define ppc(x) __builtin_popcount((x))
#define iter(it,s) for (__typeof(s.begin()) it = s.begin(); it != s.end(); it++)

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<double> vd;
typedef vector<string> vs;
typedef pair<int, int> pi;
typedef vector<pi> vpi;

int dx[] = { 0, 0, 1, -1 };
int dy[] = { 1, -1, 0, 0 };

vpi v;
int n, m, k;
int arr[2002][2002], vis[2002][2002];

inline bool bound(int x, int y) {
	return x >= 0 && x < n && y >= 0 && y < m && !vis[x][y];
}

pi bfs() {
	mem (vis, 0);
	pi res;
	queue<pi> q;
	FOR (i , 0 , k)
		q.push(mp(v[i].first, v[i].second)), vis[v[i].first][v[i].second] = 1;
	while (sz(q)) {
		int x = q.front().first, y = q.front().second;
		q.pop();
		res = mp(x, y);
		FOR (i , 0 , 4) {
			int xx = dx[i] + x, yy = dy[i] + y;
			if (bound(xx, yy))
				q.push(mp(xx, yy)), vis[xx][yy] = 1;
		}
	}
	return res;
}

int main() {
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
	ios::sync_with_stdio(false);
	cin >> n >> m >> k;
	v.resize(k);
	FOR (i , 0 , k)
		cin >> v[i].first >> v[i].second, v[i].first--, v[i].second--;
	pi res = bfs();
	cout << res.first + 1 << " " << res.second + 1 << endl;
	return 0;
}
