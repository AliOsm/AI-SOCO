#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>

using namespace std;

const int N = 100000;
const int M = 100000;
const int D = 1000000;

struct F {
	int d, i, c;
} ee[M], ff[M];

long long pp[D + 1], qq[D + 1];
int cc[N + 1];

int solve(F *aa, int m, long long *xx, int n) {
	sort(aa, aa + m, [] (auto &e, auto &f) { return e.d < f.d; });
	int cnt = 0, d = 0;
	long long sum = 0;
	memset(cc, 0, sizeof cc);
	for (int i = 0, j; i < m; i = j) {
		F &e = aa[i];
		for (j = i; j < m; j++) {
			F &f = aa[j];
			if (f.d != e.d)
				break;
			if (cc[f.i] == 0) {
				cnt++;
				sum += f.c;
				cc[f.i] = f.c;
			} else if (cc[f.i] > f.c) {
				sum -= cc[f.i];
				sum += f.c;
				cc[f.i] = f.c;
			}
		}
		xx[e.d] = sum;
		if (cnt >= n && d == 0)
			d = e.d;
	}
	for (int d = 1; d <= D; d++)
		if (xx[d] == 0)
			xx[d] = xx[d - 1];
	return d;
}

int main() {
	int n, m, k;
	scanf("%d%d%d", &n, &m, &k);
	int me = 0, mf = 0;
	for (int h = 0; h < m; h++) {
		int d, f, t, c;
		scanf("%d%d%d%d", &d, &f, &t, &c);
		if (t == 0) {
			F &e = ee[me++];
			e.d = d;
			e.i = f;
			e.c = c;
		} else {
			F &f = ff[mf++];
			f.d = D + 1 - d;
			f.i = t;
			f.c = c;
		}
	}
	int de_ = solve(ee, me, pp, n);
	int df_ = solve(ff, mf, qq, n);
	if (de_ == 0 || df_ == 0) {
		printf("-1\n");
		return 0;
	}
	df_ = D + 1 - df_;
	if (df_ <= de_ + k) {
		printf("-1\n");
		return 0;
	}
	reverse(qq + 1, qq + D + 1);
	long long ans = 1e12;
	for (int de = de_, df; (df = de + k + 1) <= df_; de++)
		ans = min(ans, pp[de] + qq[df]);
	printf("%lld\n", ans);
	return 0;
}
