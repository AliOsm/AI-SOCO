/**
 * Dont raise your voice, improve your argument.
 * --Desmond Tutu
 */

#include <bits/stdc++.h>
using namespace std;

const double PI = acos(-1);
typedef long long ll;
#define int ll
#define fori(n) for(int i=0; i<int(n); i++)

#define cins(s) string s; cin>>s;
#define cini(i) int i; cin>>i;
#define cind(d) double d; cin>>d;
#define cinai(a, n) vi a(n); fori(n) { cin>>a[i]; }
#define cinas(s, n) vs s(n); fori(n) { cin>>s[i]; }
#define cinad(a, n) vd a(n); fori(n) { cin>>a[i]; }


typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<double> vd;
typedef vector<bool> vb;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<string> vs;

/* it is optmal to fill the tank when ever we
 * come along the tank-stop and the tank is so
 * empty that we would not reach the tank stop
 * again. ie maximize the distance without stopping.
 * First go until tank-stop. Then alternate two half-tours,
 * of len 2*f and 2*(a-f)
 *
 * Since max k is fairly small we can simply simulate the
 * process.
 */
void solve() {
    cini(a);
    cini(b);
    cini(f);
    cini(k);

    int ans=0;
    int tank=b;

    if((f>b || a-f>b) && k>0) {
        cout<<-1<<endl;
        return;
    }

    tank-=f;    // first dist to f-station
    int dir=1;
    while(k>0) {
        if(dir==1) {     // to point a
            if(k==1) {
                if(tank<a-f) {
                    ans++;
                    tank=b;
                }
                break;
            }

            if(2*(a-f)>tank) {
                ans++;
                tank=b;
            }
            tank-=2*(a-f);
            dir=-1;
            k--;
            if(tank<0) {
                cout<<-1<<endl;
                return;
            }
        } else {    // back home
            if(k==1) {
                if(tank<f) {
                    ans++;
                    tank=b;
                }
                break;
            }

            if(2*f>tank) {
                ans++;
                tank=b;
            }
            tank-=2*f;
            if(tank<0) {
                cout<<-1<<endl;
                return;
            }
            k--;
            dir=1;
        }
    }
    cout<<ans<<endl;
}

signed main() {
    cin.tie(nullptr);
    std::ios::sync_with_stdio(false);
    solve();
}

