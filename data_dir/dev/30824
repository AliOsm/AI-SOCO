#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define ppl pair<ll,ll>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcountll
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>
#define fr first
#define se second

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=100000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//int cmax;

int query(vi v1,vi v2)
{
  cout<<(int)v1.size()<<" "<<(int)v2.size()<<" ";
  for(auto i:v1)cout<<i<<" ";
  for(auto i:v2)cout<<i<<" ";
  cout<<"\n";
  fflush(stdout);
  int ans;
  cin>>ans;
  return ans;
}

/*
int solve(int a,int b)
{
  vi v1;
  vi v2;
  int mid = (a + b)/2;
  afor(i,a,mid)v1.pb(i);
  afor(i,mid+1,b)v2.pb(i);
  int curr = query(v1,v2);
  cmax = max(cmax,curr)
  if(a+1 == b)return cmax;
}
*/


int main()
{
 // finp;
 // srand(time(NULL));

  int t;
  cin>>t;

  while(t--)
  {
    int n;
    cin>>n;
    int low = 2;
    int high = n;
    vi v1,v2;
    v1.pb(1);
    afor(i,2,n)v2.pb(i);
    int cmax = query(v1,v2);
    if(cmax == -1)return 0;

    if(n == 2)
    {
      cout<<"-1 "<<cmax<<"\n";
      fflush(stdout);
    }
    else
    {
        while(low < high)
        {  
          vi v1,v2;
          v1.clear();
          v2.clear();
          v1.pb(1);
          if(low+1 == high)
          {
            //v1.pb(low);
            v2.pb(high);
            int curr = query(v1,v2);
            if(curr == -1)return 0;
            if(curr == cmax)
            {
             // cmax = curr;
              low = high;
            }
            break;
          }

          int mid = (low + high)/2;
          afor(i,low,mid)v2.pb(i);
          int curr = query(v1,v2);
          if(curr == -1)return 0;
          if(curr == cmax)
          {
            high = mid;
          }
          else low = mid+1;
        }

        v1.clear();
        v2.clear();
        //vi v1,v2;
        v1.pb(low);
        afor(i,1,n)
        {
          if(i!=low)v2.pb(i);
        }
        int ans = query(v1,v2);
        if(ans == -1)return 0;
        cout<<"-1 "<<ans<<"\n";
        fflush(stdout);
    }
  }

return 0;
}