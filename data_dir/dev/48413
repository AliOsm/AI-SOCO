        #include <bits/stdc++.h>
        using namespace std;

        #define F first
        #define S second
        #define ll long long
        #define ld long double
        #define vi   vector<int>
        #define pii pair<int, int>
        #define ull unsigned long long
        #define sz(v)  ((int)((v).size()))
        #define all(v) ((v).begin()),((v).end())
        #define MEM(dp,i) memset(dp ,i, sizeof (dp))
        #define repit( cont , i  ) for( auto i : cont)
        #define forr(c,x,n)   for(ll c=x;c<=(ll)n; ++c )
        #define forrr(c,x,n)  for(ll c=x;c>=( ll )n ;--c )
        #define db(x) cout << " LOOK " <<(#x) <<" = " <<  x << '\n'
        #define ICPC ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
        #define printarr(a , l , r ) forr ( i , l , r )cout << a[i] << " ";cout<<endl;
        #define printarr2(a, n , m) forr ( i , 1 , n){forr ( j , 1, m )cout << a[i][j] << " ";cout<<endl;}

        //freopen("input.txt", "r", stdin);
        //freopen("output.txt", "w", stdout);

        int main()
        {
        ICPC;
        int  t;
        cin >> t;
        while ( t-- )
        {
        	int n  , f =1 , sa[2] = {0} , di[2] = {0} ;
        	cin >> n ;
        	map < string , int  > mp ;
        	vector<string> arr(n);
        	vector < int > v;
        	for ( int i = 0 ; i < n ; i++ )
        	{
        		cin >> arr[i];
        		if ( mp[arr[i]] )
        		{
        			reverse ( all(arr[i]));
        			v.push_back(i+1);
        			if ( mp[arr[i]] )
        				f = 0 ;
        		}
        		mp[arr[i]] = 1;
        		if ( arr[i][0] == arr[i].back() )
        		      sa[arr[i][0] - '0']++;
        		else
        			  di[arr[i][0] - '0']++;
        	}
        	int hal = ( di[0] + di[1] ) / 2;
        	for ( int i = 0 ; i < n ; i++ )
        	{
        		if ( arr[i][0] != arr[i].back() )
        		{
        			string ss = arr[i];
        			int ch = arr[i][0] - '0';
        			reverse ( all(ss));
        			if ( !mp[ss] && di[!ch] < di[ch] && di[!ch] < hal  )
        			{
        				mp[ss] = 1;
        				di[ ch]--;
        				di[!ch]++;
        				v.push_back(i+1);
        			}
        		}
        	}
        	if ( !f || ( sa[0] && sa[1] && !( di[0] + di[1]) ) || ( di[0] < hal || di[1] < hal))
        		cout << -1 << endl;
        	else
        	{
        		cout << v.size() << endl;
        		for ( auto i : v)
        			cout << i << " " ;
        		cout << endl;

        	}
        }
        }
