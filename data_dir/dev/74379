#include <bits/stdc++.h>

using namespace std;

#define F first
#define S second

#define endl '\n'

#define mp make_pair
#define pb push_back

#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

#define sol (root + root)
#define sag (root + root + 1)
#define orta ((bas + son) >> 1)

#define bit __builtin_popcount

#ifndef D
	#define dbg(x) 0
	#define dbgs(x) 0
#else
	#define dbg(x) cerr << (#x) << " --> " << (x) << endl
	#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#endif

typedef long long ll;
typedef pair < int, int > pii;

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 2e5 + 5;
const int P = 277919;
const int mod = 1e9 + 7;

class node{
	public:
	ll hash;
	int size;
};

int n, m, a[N], b[N], w[N];
ll hash, hash_one, power[N];
node kd[N << 2];

node merge(node x, node y) {
	
	return (node) {(x.hash * power[y.size] + y.hash) % mod, x.size + y.size};

}

node update(int root, int bas, int son, int x, int k) {

	if(son < x or x < bas)
		return kd[root];

	if(x <= bas and son <= x)
		return kd[root] = (node) {k, !!k};

	return kd[root] = merge(update(sol, bas, orta, x, k), update(sag, orta + 1, son, x, k));

}

int main() {
	
	ios :: sync_with_stdio(0);

	cin >> n >> m;

	power[0] = 1;

	FOR(i, 1, n) {
		cin >> a[i];

		hash = (hash * P + a[i]) % mod;
		hash_one = (hash_one * P + 1) % mod;
		power[i] = (power[i - 1] * P) % mod;
	}

	FOR(i, 1, m) {
		cin >> b[i];

		w[b[i]] = i;

		if(b[i] <= n)
			update(1, 1, m, i, b[i]);
	}

	int ans = kd[1].hash == hash;

	FOR(i, n + 1, m) {
		update(1, 1, m, w[i - n], 0);
		update(1, 1, m, w[i], i);

		hash = (hash + hash_one) % mod;

		ans += kd[1].hash == hash;
	}

	cout << ans << endl;

	return 0;

}
