#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

typedef long long ll;
using namespace std;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000002;
const ll INFLL = 100000000000000000ll;
const ll MOD = 1000003;

// ----------------------------------------------------------------------------------------------------------

const int RIGHT = 524288;
const int SIZE = 1050000;

int C[RIGHT], L[RIGHT], R[RIGHT], Ord, N, Q;
ll Lazy[SIZE], T[SIZE];
vector<int> E[RIGHT];

ll query(int l, int r, int n, int a, int b)
{
    if(a>r || b<l) return 0;
    if(a >= l && b <= r) return T[n];

    if(Lazy[n])
    {
        Lazy[2*n] = Lazy[2*n+1] = T[2*n] = T[2*n+1] = Lazy[n];
        Lazy[n] = 0;
    }

    int mid = (a+b) / 2;
    return query(l,r,2*n,a,mid) | query(l,r,2*n+1,mid+1,b);
}

void update(int l, int r, ll v, int n, int a, int b)
{
    if(a > r || b < l) return;
    if(a >= l && b <= r)
    {
        Lazy[n] = T[n] = v;
        return;
    }

    if(Lazy[n])
    {
        Lazy[2*n] = Lazy[2*n+1] = T[2*n] = T[2*n+1] = Lazy[n];
        Lazy[n] = 0;
    }

    int mid = (a+b) / 2;
    update(l,r,v,2*n,a,mid);
    update(l,r,v,2*n+1,mid+1,b);

    T[n] = T[2*n] | T[2*n+1];
}

void dfs(int n, int p)
{
    L[n] = ++Ord;
    for(int v : E[n]) if(v != p) dfs(v,n);
    R[n] = Ord;
}

int bits(ll n)
{
    int ret = 0;
    while(n)
    {
        ret += n&1;
        n >>= 1;
    }
    return ret;
}

int main()
{
    cin >> N >> Q;
    f(i,1,N) scanf("%d", &C[i]);
    f(i,1,N-1)
    {
        int a,b;
        scanf("%d %d", &a, &b);
        E[a].pb(b), E[b].pb(a);
    }
    dfs(1,0);
    f(i,1,N) update(L[i],L[i],1ll<<((ll)C[i]),1,1,RIGHT);
    f(q,1,Q)
    {
        int t;
        scanf("%d", &t);
        if(t == 1)
        {
            int v,c;
            scanf("%d %d", &v, &c);
            update(L[v],R[v],1ll<<((ll)c),1,1,RIGHT);
        }
        else
        {
            int v;
            scanf("%d", &v);
            printf("%d\n", bits(query(L[v],R[v],1,1,RIGHT)));
        }
    }
}
