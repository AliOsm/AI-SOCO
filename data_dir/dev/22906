#pragma comment(linker, "/stack:256000000")

#include <cstdio>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <cstring>
#include <string>
#include <cmath>
#include <ctime>
#include <cassert>
#include <queue>

using namespace std;

#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++)
#define sz(v) (int)(v).size()
#define all(v) (v).begin(), (v).end()

const int N = 110;

int a[N], x[N], y[N];
bool u[N];
long long D[N];

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	long long start = clock();
#endif
	int n, d;
	scanf("%d %d", &n, &d);
	for (int i = 1; i < n - 1; i++) scanf("%d", &a[i]);
	REP(i, n) scanf("%d %d", &x[i], &y[i]);
	priority_queue <pair <long long, int> > Q;
	Q.push(make_pair(0, 0));
	REP(i, n) D[i] = (long long)1e15;
	D[0] = 0;
	while (!Q.empty()) {
		int v = Q.top().second;
		Q.pop();
		if (u[v]) continue;
		u[v] = 1;
		if (v == n - 1) {
			printf("%I64d\n", D[v]);
			return 0;
		}
		REP(i, n) {
			long long can = D[v] + (abs(x[v] - x[i]) + abs(y[v] - y[i])) * d - a[i];
			if (!u[i] && D[i] > can) {
				D[i] = can;
				Q.push(make_pair(-D[i], i));
			}
		}
	}
#ifdef LOCAL
	fprintf(stderr, "\n\nTime: %.3lf\n\n", (clock() - start) / 1000.);
#endif
	return 0;
}