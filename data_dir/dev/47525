#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int N = 100;
int n, m, cost[N];
ll from[N], to[N];
vector<int> g[N], G[N], in[N];

void BFS() {
    queue<int> qu;
    qu.push(0);
    cost[0] = 0;
    while (!qu.empty()) {
        int v = qu.front();
        qu.pop();
        for (size_t i = 0; i < g[v].size(); ++i) {
            int u = g[v][i];
            if (cost[u] != -1) {
                if (cost[v] + 1 == cost[u]) {
                    G[v].push_back(u);
                    in[u].push_back(v);
                }
                continue;
            }
            qu.push(u);
            cost[u] = cost[v] + 1;
            G[v].push_back(u);
            in[u].push_back(v);
        }
    }
}

ll calcF(int v) {
    if (v == n - 1)
        return 1;
    ll &res = from[v];
    if (res != -1)
        return res;
    res = 0;
    for (size_t i = 0; i < G[v].size(); ++i)
        res += calcF(G[v][i]);
    return res;
}

ll calcT(int v) {
    if (v == 0)
        return 1;
    ll &res = to[v];
    if (res != -1)
        return res;
    res = 0;
    for (size_t i = 0; i < in[v].size(); ++i)
        res += calcT(in[v][i]);
    return res;
}

int main() {
//  freopen("a", "r", stdin);
    scanf("%d%d", &n, &m);
    while (m--) {
        int u, v;
        scanf("%d%d", &u, &v);
        --u;
        --v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    for (int i = 0; i < n; ++i)
        from[i] = to[i] = cost[i] = -1;
    BFS();
    calcF(0);
    calcT(n - 1);
    double best = 1;
    for (int i = 1; i < n - 1; ++i)
        best = max(best, from[i] * to[i] * 2.0 / to[n - 1]);
    printf("%.9lf\n", best);
    return 0;
}