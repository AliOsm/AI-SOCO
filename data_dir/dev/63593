#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<int, int> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

const int maxn = 3e5 + 5;
vector<int> g[maxn];

int n, ans;
int red[maxn], blue[maxn], tr, tb;
int subR[maxn], subB[maxn];

void dfs(int u, int p){
	subR[u] += red[u];
	subB[u] += blue[u];
	for(auto &v : g[u]){
		if(v != p){
			dfs(v, u);
			subR[u] += subR[v];
			subB[u] += subB[v];
		}
	}
}

void get_ans(int u, int p){
	for(auto &v : g[u]){
		if(v != p){
			int sb = subB[v];
			int sr = subR[v];
			int ub = tb - sb;
			int ur = tr - sr;
			if((ub == 0 || ur == 0) && (sb == 0 || sr == 0))
				ans++;
					
			get_ans(v, u);	
			
		}
	}
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	
	cin >> n;
	for(int i = 1, c; i <= n; i++){
		cin >> c;
		if(c == 1){
			tr++;
			red[i]++;
		}
		if(c == 2){
			tb++;
			blue[i]++;
		}	
	}

	for(int i = 1, a, b; i < n; i++){
		cin >> a >> b;
		g[a].push_back(b);
		g[b].push_back(a);
	}

	dfs(1, 0);
	get_ans(1, 0);
	
	cout << ans << endl;

	return 0;
}
