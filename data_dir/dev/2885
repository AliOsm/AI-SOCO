/*bismillah ->                                                                                                         << Suirkhanov Meyirlan >>
  GL HF


                                                                                                                      42

    bless my code =)
                                                                                                            NEVER FOLLOW YOUR RULES :D HAHAHAHA
*/


///scanf ("%d%d", &x, &y);
///printf("%d", &a)

#include <bits/stdc++.h>

#define fast ios_base::sync_with_stdio();   cin.tie(0);   cout.tie(0);
#define randoperation srand(time(0));
#define pii pair < int , int >
#define pll pair < ll, ll >
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define fast ios_base::sync_with_stdio();   cin.tie(0);   cout.tie(0);
#define randoperation srand(time(0));

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

const ll N = 1e3 + 7;
const ld pi = 3.14159265359;
const int INF = (1 << 20) + 7;
const double eps = 1e-9;

const int xi[4] = {-1, 0, +1, 0};
const int yj[4] = {0, +1, 0, -1};
const int xxi[4] = {+1, 0, -1, 0};
const int yyj[4] = {0, -1, 0, +1};

string s[N];

int n, ans;

string d[N][N];

set < string > st;

int main(){

  //freopen("bridge.in", "r", stdin);
  //freopen("bridge.out", "w", stdout);

  fast
  randoperation;

  ///           ||
  ///start here \/

  cin >> n;

  for(int i = 0; i < n; i++){
    cin >> s[i];
    st.insert(s[i]);
  }

  if(st.size() == 1){
    cout << 0;
    return 0;
  }

  for(int i = 0; i < n; i++){
    for(int j = 0; j < s[i].size(); j++){
      d[i][j] = s[i].substr(j, s[i].size() - j) + s[i].substr(0, j);
    }
  }

  ans = INF;

  for(int i = 0; i < s[0].size(); i++){

    int cur = i;

    for(int j = 1; j < n; j++){

      bool t = 0;

      for(int k = 0; k < s[j].size(); k++){
        if(d[j][k] == d[0][i]){
          cur += k;
          t = 1;
          break;
        }
      }

      if(!t){
        cur += INF;
      }
    }
    ans = min(ans, cur);
  }

  if(ans == INF){
    cout << -1;
  }
  else{
    cout << ans;
  }
}