#include<bits/stdc++.h>
using namespace std;
typedef long double ld;
typedef long long int ll;

const ll logx=30;
const ll N=1e4+5;
const ll M=3e5+5;
const ll mod=1e9+7;
const ll INF=1e9+5;
const double PI = 3.14159265358979323846;

#define ints(n) scanf("%d",&n)
#define intp(n) printf("%d\n",n)
#define longs(n) scanf("%intd",&n)
#define longp(n) printf("%intd\n",n)

inline ll mul(ll a, ll b){ return (a * 1ll * b) % mod; }
inline ll sub(ll a, ll b){ ll c = a - b; if(c < 0) c += mod; return c; }
inline ll add(ll a, ll b){ ll c = a + b; if(c > mod) c -= mod; return c; }

#define f first
#define s second
#define pb(x) push_back(x)
#define pf(x) push_front(x)
#define mp(x,y) make_pair(x,y)
#define GCD(a,b) __gcd((a),(b))
#define all(v) v.begin(),v.end()
#define bits(x) __builtin_popcount(x)
#define LCM(a,b) ((a)*(b))/GCD((a),(b))
#define ms(dp,val) memset(dp,val,sizeof(dp))
#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);
template<typename T> T power(T x,T y,ll m){T ans=1;while(y>0){if(y&1LL) ans=(ans*x)%m;y>>=1ll;x=(x*x)%m;}return ans%m;}

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

int main()
{
  fast;
  ll n,k,s;
  cin>>n>>k>>s;
  ll maxi=(n-1)*k;
  vector<ll> ans;
  if(s>maxi||s<k){cout<<"NO"<<endl;exit(0);}
  ll moves=s/(n-1);
  ll remdis=s-(moves*(n-1));
  ll remmoves=k-moves,las=1;
  while(remmoves>remdis){remmoves++;remdis+=(n-1);}
  moves=k-remmoves;
  for(ll i=1;i<=moves;i++)
  {
    if(i&1){ans.pb(n);las=n;}
    else{ans.pb(1);las=1;}
  }
  ll xp=ans.size();
  //trace(ans.size(),remdis);
  if(remmoves)
  {
    if(xp)
    {
      ll xremdis=remdis-(remmoves-1);
      ll want=las+xremdis;
      if(want>=1&&want<=n)
      {
        if(want!=las){ans.pb(want);las=want;}
        else
        {
          want=las-xremdis;
          if(want>=1&&want<=n&&want!=las){ans.pb(want);las=want;}
          else
          {
            cout<<"NO"<<endl;
            exit(0);
          }
        }
      }
      else
      {
        want=las-xremdis;
        if(want>=1&&want<=n&&want!=las){ans.pb(want);las=want;}
        else
        {
          cout<<"NO"<<endl;
          exit(0);
        }
      }
      //trace(las);
      remmoves--;
      moves++;
      //trace(moves,remmoves);
      while(remmoves>0)
      {
        ll cur=las-1;
        if(cur==0){cur=2;las=2;}
        else{las=cur;}
        ans.pb(cur);
        remmoves--;
      }
    }
    else
    {
      //trace(remmoves,remdis);
      while(remmoves>1)
      {
        ll cur=las-1;
        if(cur==0){cur=2;las=2;}
        else{las=cur;}
        ans.pb(cur);
        remmoves--;
        remdis--;
      }
      ll want=las+remdis;
      //trace(want,las,remdis,remmoves);
      if(want>=1&&want<=n)
      {
        if(want!=las){ans.pb(want);las=want;}
        else
        {
          want=las-remdis;
          if(want>=1&&want<=n&&want!=las){ans.pb(want);las=want;}
          else
          {
            cout<<"NO"<<endl;
            exit(0);
          }
        }
      }
      else
      {
        want=las-remdis;
        if(want>=1&&want<=n&&want!=las){ans.pb(want);las=want;}
        else
        {
          cout<<"NO"<<endl;
          exit(0);
        }
      }
    }
  }
  las=1;
  ll sum=0,mp=ans.size();
  for(auto i:ans){sum+=abs(las-i);las=i;}
  if(sum!=s||mp!=k){cout<<"NO"<<endl;exit(0);}
  cout<<"YES"<<endl;
  for(auto i:ans){cout<<i<<" ";}
}
