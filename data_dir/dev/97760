#include <bits/stdc++.h>
#define base 1000000007LL
#define N 200000
#define ll long long
#define X first
#define Y second
#define pb push_back
#define Scan(a) scanf("%I64d", &a)
#define CLR(a) memset(a,0,sizeof(a))
#define FOR(i,a,b) for(ll i=(a),_b=(b); i<=_b; i++)
#define FORE(i,a,b) for(ll i=(a),_b=(b); i>=_b; i--)

using namespace std;

typedef pair<int, int> II;
typedef vector<II> vi;

string s, t;
int b[100010], f[100010];
ll dp[100010], sum[100010], ssum[100010];

void preProcessing()
{
    b[0] = 0;
    FOR(i,1,t.length()-1) {
        int k = b[i-1];
        while (k > 0 && t[k] != t[i]) k = b[k-1];
        if (t[k] == t[i]) b[i] = k+1;
        else b[i] = 0;
    }
}

void kmpSearch()
{
    int j = 0;
    FOR(i,0,s.length()-1) {
        while (j > 0 && s[i] != t[j]) j = b[j-1];
        if (s[i] == t[j]) j++;
        else j = 0;
        if (j == t.length()) {
            f[i] = 1;
            j = b[j-1];
        }
    }
}

int main()
{
    ios::sync_with_stdio(0);
    //freopen("inp.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    cin >> s >> t;
    if (s.length() < t.length()) {
        cout << 0;
        return 0;
    }
    preProcessing();
    kmpSearch();
    int nearest = -1;
    FOR(i,0,s.length()-1) {
        if (f[i]) nearest = i;
        if (nearest == -1) continue;
        int from = nearest-t.length();
        dp[i] = (from+2) % base;
        if (from >= 0) dp[i] = (dp[i] + ssum[from]) % base;
        if (i == 0) sum[i] = dp[i];
        else sum[i] = (sum[i-1] + dp[i]) % base;
        if (i == 0) ssum[i] = sum[i];
        else ssum[i] = (ssum[i-1] + sum[i]) % base;
    }
    cout << sum[s.length()-1];
    return 0;
}
