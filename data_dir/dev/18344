#include <iostream>
#include <cmath>
#include <iomanip>
#include <deque>
#include <stack>
#include <vector>

using namespace std;


vector<string> simbols;

vector<int> posi;
vector<int> negi;
int n;

void add_posi(int total ){

    for(int i = 0; i < posi.size(); i++){
        int to_add = min(total, n - 1);
        posi[i] += to_add;
        total -= to_add;
    }
}

void add_negi(int total ){

    for(int i = 0; i < negi.size(); i++){
        int to_add = min(total, n - 1);
        negi[i] += to_add;
        total -= to_add;
    }

}

int main()
{

    string w;

    int pos = 1;
    int neg = 0;
    while(w != "=" ){
        cin >> w;

        if(w == "+") pos++;
        if(w == "-") neg++;

        if(w == "+" || w == "-")
            simbols.push_back(w);
    }

    cin >> n;

    //cout << n << endl;

    long long min_pos = max(0, pos - neg * n);
    long long max_value = n * pos - neg;

    long long needed = n;

    if(needed > max_value || min_pos > n){
        cout << "Impossible" << endl;
        return 0;
    }

    for(int i = 0; i < pos; i++)
        posi.push_back(1);

    for(int i = 0; i < neg; i++)
        negi.push_back(1);

    int cur = pos - neg;

    if( cur < n )
        add_posi(n-cur);

    if( cur > n)
        add_negi(cur-n);

    int posi_pointer = 1;
    int negi_pointer = 0;

    cout << "Possible" << endl;

    cout << posi[0] << " ";
    for(int i = 0; i < simbols.size(); i++){
        cout << simbols[i];

        if( simbols[i] == "+"){
            cout << " " << posi[posi_pointer++] << " ";
        }else{
            cout << " " << negi[negi_pointer++] << " ";
        }
    }

    cout << "= " << n << endl;

    return 0;
}
