#include <bits/stdc++.h>
typedef std::vector<int> vi;
typedef std::vector<vi> vvi;
int main() {
    std::ios_base::sync_with_stdio(false); std::cin.tie(0);
    for (int n, k; std::cin >> n >> k; std::cout << std::endl) {
        std::vector<int> arr(n);
        for (auto &it : arr) { std::cin >> it; }
        #define all(x) (x).begin(), (x).end()
        std::sort(all(arr));
        vi left(n, n), right(n,-1);
        for (int i = 0; i < n; ++i) {
            auto after = int(std::upper_bound(all(arr), arr[i]+5) - arr.begin());
            for (int j = i; j < after; ++j) {
                left[j] = std::min(left[j], i);
            }
        }
        for (int i = n-1; i >= 0; --i) {
            auto after = int(std::upper_bound(all(arr), arr[i]+5) - arr.begin());
            right[i] = std::max(right[i], after-1);
        }
        vvi pref(1+k, vi(1+n+1)), suff(1+k, vi(1+n+1));
        for (int cnt = 1; cnt <= k; ++cnt) {
            for (int p = 0; p < n; ++p) {
                int lt = left[p];
                pref[cnt][p+1] = std::max(pref[cnt][p], pref[cnt-1][lt] + (p - lt + 1));
            }
        }
        for (int cnt = 1; cnt <= k; ++cnt) {
            for (int p = n-1; p >= 0; --p) {
                int rt = right[p];
                suff[cnt][n-p] = std::max(suff[cnt][n-p-1], suff[cnt-1][n-1-rt] + (rt - p + 1));
            }
        }
        int answ = 0;
        for (int len = 1; len <= n; ++len) {
            for (int t = 0; t <= k; ++t) {
                answ = std::max(answ, pref[t][len] + suff[k-t][n-len]);
            }
        }
        std::cout << answ << std::endl;
    }
    return 0;
}