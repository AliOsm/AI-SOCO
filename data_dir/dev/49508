#include <bits/stdc++.h>
#define pb push_back

using namespace std;
using ll = long long int;

int main()
{
	ios::sync_with_stdio(0); cin.tie(0);
	int t; cin >> t;
	vector<set<int>> adj(26);
	// vector<bitset<26>> edge(26);
	bool mark[26] = {0};
	string s, ans;
	while (t--)
	{
		for (int i = 0; i < 26; ++i)
		{
			mark[i] = 0;
			adj[i].clear();
			// edge[i] = 0;
		}
		ans = "";
		cin >> s;
		int n = s.size(), onect = 0, u = -1, nodes = 0, edges = 0;
		for (int i = 0; i+1 < n; ++i)
		{
			int u = s[i] - 'a';
			int v = s[i+1] - 'a';
			// edge[u][v] = edge[v][u] = 1;
			adj[u].insert(v);
			adj[v].insert(u);
		}
		bool possible = 1;
		for (int i = 0; i < 26; ++i)
		{
			if (adj[i].size() == 1) {++onect; u = i;}
			// if (edge[i].count() == 1) {++onect; u = i;}
			// if (edge[i].count() > 2) possible = 0;
			if (adj[i].size() > 2) possible = 0;
			if (!adj[i].empty()) ++nodes;
			edges += adj[i].size();
		}
		if (n > 1 and edges/2 != nodes-1) possible = 0;
		if (u != -1 and possible)
		{
			int prev = u;
			while (1)
			{
				ans += char('a' + u);
				mark[u] = 1;
				if (adj[u].empty()) break;
				prev = u;
				u = *adj[u].begin();
				adj[u].erase(prev);
			}
		}
		for (int i = 0; i < 26; ++i)
		{
			if (!mark[i])
				ans += char('a' + i);
		}
		if (!possible) cout << "NO\n";
		else cout << "YES\n" << ans << '\n';
	}
}