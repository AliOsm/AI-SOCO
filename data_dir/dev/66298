#include <bits/stdc++.h>

using namespace std;

const int maxn = 2e5;
int par[maxn], d[maxn];
bool mark[maxn];
vector <int> adj[maxn], ver, ans;

void dfs2(int v) {
    mark[v] = true;
    ans.push_back(v);
    for (int i = 0; i < adj[v].size(); i++) {
        int u = adj[v][i];
        if (u - par[v] && !mark[u])
            dfs2(u);
    }
}

void dfs(int v) {
    for (int i = 0; i < adj[v].size(); i++) {
        int u = adj[v][i];
        if (u - par[v] && !mark[u])
            dfs(u);
    }
    if (!mark[v] && d[v] == 0) {
        mark[v] = true;
        ver.push_back(v);
        if (par[v] != -1)
            d[par[v]] ^= 1;
        dfs2(v);
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    int n;
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> par[i], par[i]--;
        if (par[i] != -1) {
            adj[i].push_back(par[i]), d[i] ^= 1;
            adj[par[i]].push_back(i), d[par[i]] ^= 1;
        }
    }
    for (int i = 0; i < n; i++)
        if (par[i] == -1)
            dfs(i);

    if (n & 1) {
        cout << "YES\n";
        for (int i = 0; i < ans.size(); i++)
            cout << ans[i] + 1 << '\n';
    }
    else
        cout << "NO\n";
    return 0;
}
