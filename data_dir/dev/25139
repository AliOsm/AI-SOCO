#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
typedef unsigned        un;
typedef long long       ll;
#define all(A)          A.begin(),A.end()
#define rall(A)         A.rbegin(),A.rend()
#define mp              make_pair
#define SP              setprecision
#define mem(A,B)        memset(A,B,sizeof A)
#define sorta(A)        sort(all(A))
#define sortd(A)        sort(rall(A))
#define sortf(A,F)      sort(all(A),F)
#define Abs(A)          (A>=0?A:(-A))
#define Max(A,B)        (A>=B?A:B)
#define Min(A,B)        (A<=B?A:B)
#define Get(mask,bit)   mask&(1LL<<bit)
#define Set(mask,bit)   mask|(1LL<<bit)
#define Reset(mask,bit) mask&(~(1LL<<bit))
#define Flib(mask,bit)  mask^(1LL<<bit)
#define LowOn(mask,bit) mask&-mask
#define PI              acos(0.0) * 2
#define exp             2.71828182845904523536028747135266249775724709369995
#define eps             -1000000000
#define oo              1000000000
#define Endl            '\n'
#define inn             goto in
#define ott             goto out
inline int inp(){ return 0; }
inline int inp(bool& A){ if (cin >> A)return 1; return -1; }
inline int inp(char& A){ return scanf(" %c", &A); }
inline int inp(int& A){ return scanf("%d", &A); }
inline int inp(float& A){ if (cin >> A)return 1; return -1; }
inline int inp(ll& A){ return scanf("%I64d", &A); }
inline int inp(double& A){ return scanf("%lf", &A); }
inline int inp(char* A){ return scanf("%s", A); }
inline int inp(string& A){ if (cin >> A)return 1; return -1; }
template <class Front, class... Queue> inline int inp(Front& A, Queue&... B){ return inp(A) + inp(B...); }
inline int oup(){ return 0; }
inline int oup(bool A){ if (cout << A)return 1; return -1; }
inline int oup(char A){ return printf("%c", A); }
inline int oup(int A){ return printf("%d", A); }
inline int oup(float A){ if (cout << A)return 1; return -1; }
inline int oup(ll A){ return printf("%I64d", A); }
inline int oup(double A){ return printf("%lf", A); }
inline int oup(char* A){ return printf(A); }
inline int oup(const char* A){ return printf("%s", A); }
inline int oup(string& A){ if (cout << A)return 1; return -1; }
template <class Front, class... Queue> inline int oup(Front A, Queue... B){ return oup(A) + oup(B...); }
template <class T> inline void remax(T& A, T B){ if (A < B)A = B; }
template <class T> inline void remin(T& A, T B){ if (A > B)A = B; }
string ToString(ll num){ string ret; do{ ret += ((num % 10) + '0'); num /= 10; } while (num); reverse(all(ret)); return ret; }
ll ToNumber(string s){ ll r = 0, p = 1; for (int i = s.size() - 1; i >= 0; --i)r += (s[i] - '0') * p, p *= 10; return r; }
ll Gcd(ll a, ll b){ while (a %= b ^= a ^= b ^= a);  return b; }
ll Power(ll base, ll power){ ll ret = 1; while (power){ if (power & 1)ret *= base; power >>= 1; base *= base; } return ret; }
ll PowerMod(ll base, ll power, ll mod){ if (!power)return 1; if (power & 1)return (base * PowerMod(base, power - 1, mod)) % mod; return PowerMod((base * base) % mod, power >> 1, mod); }
int Log(ll num, ll base){ int ret = 0; while (num){ ++ret; num /= base; } return ret; }
int Count(ll mask){ int ret = 0; while (mask){ if (mask & 1)++ret; mask >>= 1; } return ret; }


vector <int> adj[100001];
int ancestor[100001][17];
int level[100001];
int size[100001];
int in[100001];
int out[100001];
int n, timer, LOG;
void dfs(int u, int par = 1, int lvl = 0){
    level[u] = lvl;
    size[u] = 1;
    in[u] = timer++;
    ancestor[u][0] = par;
    for (int i = 1; i < LOG; ++i)ancestor[u][i] = ancestor[ancestor[u][i - 1]][i - 1];
    for (vector <int>::iterator it = adj[u].begin(); it != adj[u].end(); ++it){
        int v = *it;
        if (v != par){
            dfs(v, u, lvl + 1);
            size[u] += size[v];
        }
    }
    out[u] = timer++;
}
bool isancestor(int u, int v){ return in[u] <= in[v] && out[u] >= out[v]; }
int find_ancestor(int u, int v){
    for (int i = LOG - 1; i >= 0; --i)
    if (!isancestor(ancestor[u][i], v))u = ancestor[u][i];
    return u;
}
int LCA(int u, int v){
    if (isancestor(u, v))return u;
    if (isancestor(v, u))return v;
    return ancestor[find_ancestor(u, v)][0];
}
int query(int u, int v){
    if (u == v)return n;
    int lca = LCA(u, v);
    if (level[u] == level[v]){
        u = find_ancestor(u, lca);
        v = find_ancestor(v, lca);
        return n - size[u] - size[v];
    }
    int distance = level[u] + level[v] - level[lca] * 2;
    if (distance & 1)return 0;
    int tmp;
    if (level[u] < level[v])swap(u, v);
    tmp = u;
    distance >>= 1;
    for (int i = LOG - 1; i >= 0; --i)
    if (level[u] - level[ancestor[tmp][i]] < distance)tmp = ancestor[tmp][i];
    return size[ancestor[tmp][0]] - size[tmp];
}
void initial(){
    for (int i = 1; i <= n;)adj[i++].clear();
    mem(level, 0);
    mem(size, 0);
    mem(in, 0);
    mem(out, 0);
    timer = 0;
    LOG = Log(n, 2);
}
inline void run(){
in:;
    int m;
    if (inp(n) != 1)return;
    initial();
    for (int i = 1; i < n; ++i){
        int u, v;
        inp(u, v);
        adj[u].emplace_back(v);
        adj[v].emplace_back(u);
    }
    dfs(1);
    inp(m);
    while (m--){
        int u, v;
        inp(u, v);
        oup(query(u, v), Endl);
    }
    inn;
}
int main(){
    //freopen("","r", stdin);
    //freopen("","w", stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr), cout.tie(nullptr);
    run();
    return 0;
}