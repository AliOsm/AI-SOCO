#include <iostream>
#include <cmath>
#include <string>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <fstream>
#include <cassert>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <stack>
#include <functional>
#include <numeric>
#include <ctime>
#include <cstdlib>
#include <sstream>

using namespace std;

#define pb push_back
#define ll long long
#define mp make_pair
#define f first
#define s second
#define pii pair < int, int >
#define pll pair < ll, ll >
#define all(s) s.begin(), s.end()
#define sz(s) (int) s.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define vi vector < int >

const int inf = (int)1e9;
const int mod = (int) 1e9 + 7;

int n, a[200200], b[200200];
int pa[22][200200], pb[22][200200];
int two[200200];

int getmin(int l, int r){
    int power = two[r - l + 1];
    return min(pb[power][l], pb[power][r-(1<<power)+1]);
}

int getmax(int l, int r){
    int power = two[r - l + 1];
    return max(pa[power][l], pa[power][r-(1<<power)+1]);
}

int getLeft(int l, int r){
    int left = l;
    int ans = -1;
    while (l <= r){
        int mid = (l + r)/2;
        int mini = getmin(left, mid);
        int maxi = getmax(left, mid);
        if (maxi >= mini){
            r = mid - 1;
            ans = mid;
        } else {
            l = mid + 1;
        }
    }
    if (ans != -1 && getmin(left, ans) != getmax(left, ans)){
        ans = -1;
    }
    return ans;
}

int getRight(int left, int l, int r){
    int ans = l;
    while (l <= r){
        int mid = (l + r)/2;
        int mini = getmin(left, mid);
        int maxi = getmax(left, mid);
        if (maxi == mini){
            l = mid + 1;
            ans = mid;
        } else {
            r = mid - 1;
        }
    }
    return ans;
}

int main () {
    scanf("%d", &n);
    for (int i=0;i<n;i++){
        scanf("%d", &a[i]);
    }
    for (int i=0;i<n;i++){
        scanf("%d", &b[i]);
    }

    for (int i=0;i<n;i++){
        pa[0][i] = a[i];
        pb[0][i] = b[i];
    }
    two[0] = -1;
    for (int i=1;i<200200;i++) two[i] = two[i/2] + 1;

    for (int j=1;j<20;j++){
        for (int i=0;i<n;i++){
            pa[j][i] = max(pa[j-1][i], pa[j-1][i+(1<<(j-1))]);
            pb[j][i] = min(pb[j-1][i], pb[j-1][i+(1<<(j-1))]);
        }
    }

    ll ans = 0;
    for (int i=0;i<n;i++){
        int l = getLeft(i, n-1);
        if (l == -1) continue;
        int r = getRight(i, l, n-1);
        ans += (r - l + 1);
    }

    cout <<ans<<endl;

    return 0;
}



