#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 10;

int dp[1<<N][1<<N];
vector<int> adj[N];

int main()
{
	ios::sync_with_stdio(false);
	
	int n, m, k;
	cin >> n >> m >> k;
	for (int i=0; i<m; i++)
	{
		int u, v;
		cin >> u >> v;
		u--, v--;
		adj[v].push_back(u);
		adj[u].push_back(v);
		dp[(1 << v) | (1 << u)][(1 << v) | (1 << u)] = 1;
	}
	for (int mask = 0; mask < 1 << n; mask++)
	{
		if (__builtin_popcount(mask) <= 2)
			continue;
		for (int leaf = mask; leaf; leaf = (leaf - 1) & mask)
		{
			int v = 0;
			for (int i=0; i<n; i++)
				if ((leaf >> i) & 1)
				{
					v = i;
					break;
				}
			for (auto u : adj[v])
				if (((mask >> u) & 1) && !((leaf >> u) & 1))
				{
					dp[mask][leaf] += dp[mask ^ (1 << v)][leaf ^ (1 << v)];
					dp[mask][leaf] += dp[mask ^ (1 << v)][leaf ^ (1 << v) ^ (1 << u)];
				}
		}
	}
	int ans = 0;
	for (int i=0; i<1<<n; i++)
		if (__builtin_popcount(i) == k)
			ans += dp[(1<<n)-1][i];
	cout << ans << "\n";
	return 0;
}
