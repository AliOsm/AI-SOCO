#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 1000000007
#define maxn 100005
#define IN freopen("C.in","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 1000000000
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 2

using namespace __gnu_pbds;
using namespace std ;

typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

i64 hashS[maxn] , hashT[maxn] ;
i64 basePower[maxn] ;
char s[maxn] , t[maxn] ;
int dp[32][maxn] ;

int match(int i, int j)
{
    int lo = 1 , hi = min(i,j) , m ;

    while(lo<hi)
    {
        m = (lo+hi+1)/2 ;
        if( ((hashS[i]-hashS[i-m]*basePower[m])%mod+mod)%mod == ((hashT[j]-hashT[j-m]*basePower[m])%mod+mod)%mod ) lo = m ;
        else hi = m-1 ;
    }
    return lo ;
}

int main()
{
    int i , j , k , l , m , n ;
    int X , x ;

    scanf("%d %s %d %s %d",&n,s+1,&m,t+1,&X) ;

    basePower[0] = 1 ;
    for(i=1 ; i <= n ; i++) basePower[i] = (basePower[i-1]*31)%mod ;

    hashS[0] = 0 ;
    for(i=1 ; i<=n ; i++) hashS[i] = (hashS[i-1]*31 + s[i]-'a')%mod ;
    hashT[0] = 0 ;
    for(i=1 ; i<=m ; i++) hashT[i] = (hashT[i-1]*31 + t[i]-'a')%mod ;

    for(i=1 ; i<=m ; i++) dp[0][i] = n+1 ;
    dp[0][0] = 0 ;

    for(x=1 ; x<=X ; x++)
    {
        dp[x][0] = 0 ;
        for(i=1 ; i<=m ; i++)
        {
            for(j=dp[x][i-1]+1 ; j<=n ; j++ )
            {
                if(s[j]!=t[i]) continue ;
                l = match(j,i) ;
                if( dp[x-1][i-l] <= (j-l) ) break ;
            }
            dp[x][i] = min(n+1,j) ;
      //      printf("%d %d: %d\n",x,i,dp[x][i]) ;
        }
    }

    if(dp[X][m]<=n) printf("YES\n") ;
    else printf("NO\n") ;

    return 0 ;
}
