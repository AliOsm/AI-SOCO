//The best is yet to come...
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 1000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 100001

string S;
ll sa[maxn], pos[maxn], tmp[maxn], lcp[maxn], N, gap, freq[maxn],t[4*maxn];
ll belong[maxn],lft[maxn],rght[maxn];
stack<ll>st;
set<pair<ll,ll> >present;

bool Sufcmp(int i, int j){
	if(pos[i] != pos[j]){
		return pos[i] < pos[j];
	}
	i += gap; j += gap;
	return (i < N && j < N) ? pos[i] < pos[j] : i > j;
}
 
void buildSA(){
	N = S.size();
	for(int i = 0; i < N; i++){
		sa[i] = i;
		pos[i] = S[i];
	}
	tmp[0] = 0;
	for(gap = 1; ; gap = (gap << 1)){
		sort(sa, sa + N, Sufcmp);
		for(int i = 0; i < N-1; i++) tmp[i+1] = tmp[i] + Sufcmp(sa[i], sa[i+1]);
		for(int i = 0; i < N; i++) pos[sa[i]] = tmp[i];
		if(tmp[N-1] == N-1) break;
	}
}
 
void buildLCP(){
	N = S.size();
	lcp[0] = 0;
	for(int i = 0, k = 0; i < N; i++){
		if(pos[i] != N-1){
			for(int j = sa[pos[i]+1]; S[i+k] == S[j+k]; )
				k++;
			lcp[pos[i]+1] = k;
			if(k) k--;
		}
	}
}
ll f(ll x)
{
	return (x*(x+1)*1LL)/2;
}
int main()
{
	boost1;boost2;
	ll i,j,n,x,y,ans=0;
	cin>>S;
	N=S.size();	

	buildSA();
	buildLCP();

	lft[0]=0;
	st.push(0);
	for(i=1;i<N;i++)
	{
		while(st.size() && lcp[st.top()]>=lcp[i])
		st.pop();

		if(!st.size())
		lft[i]=0;
		else
		lft[i]=st.top()+1;

		st.push(i);
	}

	while(!st.empty())
	st.pop();
	
	rght[N-1]=N-1;
	st.push(N-1);
	for(i=N-2;i>=0;i--)
	{
		while(st.size() && lcp[st.top()]>=lcp[i])
		st.pop();

		if(!st.size())
		rght[i]=N-1;
		else
		rght[i]=st.top()-1;
		st.push(i);
	}
	//for(i=0;i<N;i++)
	//cout<<lft[i]<<" "<<rght[i]<<endl;
	for(i=0;i<N;i++)
	{
		pair<ll,ll> p=mp(lft[i]-1,rght[i]);
		if(present.find(p)!=present.end())
		continue;
		present.insert(p);
		if(lcp[i]==0)
		continue;
		x=max(lcp[lft[i]-1],lcp[rght[i]+1]);
		ans+=f(rght[i]-lft[i]+2)*(lcp[i]-x);
	}
	for(i=0;i<N;i++)
	{
		x=N-sa[i];
		y=max(lcp[i],lcp[i+1]);
		ans+=x-y;
	}
	cout<<ans;
	return 0;
}
