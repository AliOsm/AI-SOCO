// KALAM
#include<bits/stdc++.h>

using namespace std;
const int N = 5e5 + 77 , Mod = 1e9 + 7;
long long q , n = 1, ps[N] , a[N];
int main() {
	ios::sync_with_stdio(false);cin.tie(0);
	cin >> q;
	while(q--){
		int type;cin >> type;
		if(type == 1){
			int k;cin >> k;
			a[n] = k;
			ps[n] = k + ps[n - 1];n++;continue;
		}
		int l = 1 , r = n;
		while(r - l > 2){
			int L  = (l * 2 + r) / 3 , R = (l + r * 2) / 3;
			long double p1 = ps[L] + a[n - 1];p1 = p1 / (L + 1);
			long double p2 = ps[R] + a[n - 1];p2 = p2 / (R + 1);
			if(p2 > p1){
				r = R;
			}
			else{
				l = L;
			}
		}
		long double A1 = ps[l] + a[n - 1];A1 /= (l + 1);
		long double A2 = ps[l + 1] + a[n - 1];A2 /= (l + 2);
		long double A3 = ps[l + 2] + a[n - 1];A3 /= (l + 3);
		if(l + 1 >= n)A2 = a[n - 1];
		if(l + 2 >= n)A3 = a[n - 1];
		cout << fixed << setprecision(10) << max(a[n - 1] - A1 , max(a[n - 1] - A2 , a[n - 1] - A3))  << '\n';
	}
	return 0;
}