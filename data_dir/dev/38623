#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <cstring>
#include <cassert>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <queue>
using namespace std;
typedef long long ll;
#define x first
#define y second
#define pb push_back
#define mp make_pair
#define SORT(a) sort(a.begin(),a.end());
typedef long double db;
typedef pair <int, int> pii;
typedef unsigned int usi;
const int inf = 1e9;
const int N = 5e4 + 10;
int g[111][111];
int grung(int a1,int a2,int an1,int an2,int n)
{
    int mask=(a1<<3)+(a2<<2)+(an1<<1)+(an2<<0);
    if(g[mask][n]!=-1)return g[mask][n];
    int i,j,st,fin,a[101][2];
    bool q[101],was[260];
    for(i=0;i<260;i++)was[i]=0;
    for(i=0;i<=n;i++)
        for(j=0;j<2;j++)a[i][j]=0;
    a[1][0]=a1,a[1][1]=a2;
    a[n][0]=an1,a[n][1]=an2;
    for(i=1;i<=n;i++)
    for(j=0;j<2;j++)
    if(a[i][j]==0)
    {
        a[i][j]++;
        a[i-1][1-j]++;
        a[i][1-j]++;
        a[i+1][1-j]++;
        for(int k=1;k<=n;k++)q[k]=(a[k][0]*a[k][1]==0);
        st=1;int res=0;
        while(st<=n)
        {
            while(st<=n&&!q[st])st++;
            if(st>n)break;
            fin=st;
            while(fin+1<=n&&q[fin+1])fin++;
            res^=grung(a[st][0],a[st][1],a[fin][0],a[fin][1],fin-st+1);
            st=fin+1;
        }
        was[res]++;
        a[i][j]--;
        a[i-1][1-j]--;
        a[i][1-j]--;
        a[i+1][1-j]--;
    }
    int ans=0;
    while(was[ans])ans++;
    return g[mask][n]=ans;
}
int main()
{
  //  freopen("in.txt","r",stdin);
    int m,i,j,k,r,n;
    while(~scanf("%d%d",&r,&n))
    {
        int v[111][2];bool a[101];
        memset(v,0,sizeof(v));
        memset(g,-1,sizeof(g));
        for(i=0;i<n;i++)
        {
            scanf("%d%d",&j,&k);k--;
            v[j][k]++;
            v[j-1][1-k]++;
            v[j][1-k]++;
            v[j+1][1-k]++;
        }
        for(i=1;i<=r;i++)
        a[i]=(v[i][0]*v[i][1]==0);
        int st=1,fin,res=0;
        while(st<=r)
        {
            while(st<=r&&!a[st])st++;
            if(st>r)break;
            fin=st;
            while(fin+1<=r&&a[fin+1])fin++;
            res^=grung(v[st][0],v[st][1],v[fin][0],v[fin][1],fin-st+1);
            st=fin+1;
        }
        if(res)puts("WIN");
        else puts("LOSE");
    }
    return 0;
}
