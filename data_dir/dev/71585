#include "bits/stdc++.h"
#define MAXN 400009
#define INF 1000000007
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define pb(x) push_back(x)
#define wr cout<<"----------------"<<endl;
#define ppb() pop_back()
#define tr(ii,c) for(__typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)
#define ff first
#define ss second
#define my_little_dodge 46
#define debug(x)  cerr<< #x <<" = "<< x<<endl;
using namespace std;

typedef long long ll;
typedef pair<int,int> PII;
template<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
template<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
PII dp[MAXN],arr[MAXN];
map<int,int>pm;
PII s[MAXN<<2];
PII merge(PII x,PII y){
	PII z=mp(min(x.ff,y.ff),0);
	if(z.ff==x.ff)
		z.ss+=x.ss;
	if(z.ff==y.ff)
		z.ss+=y.ss;
	if(z.ss>=INF)
		z.ss-=INF;
	return z;		
}
PII tap(int l,int r,int nd,int x,int y){
	if(l>y or x>r)
		return mp(INF,0);
	if(l<=x and y<=r)		
		return s[nd];
	int mid=(x+y)>>1;
	return merge(tap(l,r,nd<<1,x,mid),tap(l,r,nd<<1|1,mid+1,y));	
}
void upd(int p,PII v,int nd,int x,int y){
	if(x==y){
		s[nd]=merge(s[nd],v);
		return;
	}
	int mid=(x+y)>>1;
	if(p<=mid)
		upd(p,v,nd<<1,x,mid);
	else
		upd(p,v,nd<<1|1,mid+1,y);		
	s[nd]=merge(s[nd<<1],s[nd<<1|1]);	
}
void build(int nd,int x,int y){
	s[nd]=mp(INF,0);
	if(x==y)
		return;
	int mid=(x+y)>>1;
	build(nd<<1,x,mid);
	build(nd<<1|1,mid+1,y);		
}
set<int>st;
int main(){
  //  freopen("file.in", "r", stdin);
    int n,c=0;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    	scanf("%d%d",&arr[i].ff,&arr[i].ss),pm[arr[i].ff]=pm[arr[i].ss]=1;
    tr(it,pm)
		it->ss=++c;	
	build(1,1,c);	
   	sort(arr+1,arr+n+1);
	for(int i=1;i<=n;i++){
		dp[i]=tap(1,pm[arr[i].ss],1,1,c);
		if(dp[i].ff==INF)
			dp[i]=mp(0,1);
		dp[i].ff+=arr[i].ss-arr[i].ff;	
		upd(pm[arr[i].ff],dp[i],1,1,c);
		dp[i].ff+=arr[i].ff;
	}
	PII ans=mp(INF,0);
	for(int i=n;i>=1;i--){
		if(!st.size() or (*st.rbegin()<arr[i].ff))
			ans=merge(ans,dp[i]);
		st.insert(arr[i].ss);
	}
	printf("%d\n",ans.ss);
	return 0;
}
