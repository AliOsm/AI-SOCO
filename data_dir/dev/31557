#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pf push_front
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("board.in");ofstream out("board.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

ll a, mod = 998244353, o=1;
vec<vec<int>> l;
vec<ll> sz, prm;

void dfs2(int v, int p){
    if(p==-1) {
        o *= prm[l[v].size() - (p == -1 ? 0LL : 1)];
        o %= mod;
        o *= sz[v];
        o %= mod;
    }
    else{
        o*=prm[l[v].size()];
        o%=mod;
    }
    for(int h : l[v]) if(h!=p) dfs2(h, v);
}

ll dfs1(int v, int p){
    sz[v] = 1;
    for(int h : l[v]) if(h!=p) sz[v]+=dfs1(h,v);
    return sz[v];
}

int main() {
    fast;
    prm = vec<ll>(3e5);
    prm[0] = prm[1] = 1;
    for(int q=2; q<3e5; q++) prm[q] = (q*prm[q-1])%mod;
    cin>>a;
    sz = vec<ll>(a);
    l = vec<vec<int>>(a, vec<int>());
    for(int q=1; q<a; q++){
        int x,y; cin>>x>>y; x--; y--;
        l[x].pb(y);
        l[y].pb(x);
    }
    dfs1(0, -1);
    dfs2(0, -1);
    cout<<o;
}