#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>
#include <random>
#include <iomanip>


typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(tint i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl



using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) )
		Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}



int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n,k,p;
	while (cin >> n >> k >> p)
	{
		vector<vector<tint> > v(2);
		forn(i,n)
		{
			tint a;
			cin >> a;
			v[a % 2].push_back(a);
		}
		tint r = k-p, iSize = v[1].size();
		vector<vector<tint> > ans (k);
		if ((r > iSize) or ((r-iSize) % 2))
			cout << "NO\n";
		else
		{
			
			forn(i,r)
			{
				ans[i].push_back(v[1].back());
				v[1].pop_back();
			}
			r %= k;
			while (!v[1].empty())
			{
				forn(aux,2)
				{
					ans[r].push_back(v[1].back());
					v[1].pop_back();
				}
				r = (r +1) % k;
			}
			
			while (!v[0].empty())
			{
				ans[r].push_back(v[0].back());
				v[0].pop_back();
				r = (r +1) % k;
			}
			
			bool sePuede = true;
			forn(i,k)
				sePuede &= !ans[i].empty();
			
			if (sePuede)
			{
				cout << "YES\n";
				forn(i,k)
				{
					tint s = ans[i].size();
					cout << s << " ";
					forn(j,s)
					{
						if (j)
							cout << " ";
						cout << ans[i][j];
					}
					cout << "\n";
					
				}
			}
			else
				cout << "NO\n";
		}
	}
	return 0;
}



