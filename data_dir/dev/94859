//Be Name Khoda
//no comment...
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using mordered_set =  tree<T, null_type, greater<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)1e5 + 7;
const int infint = (int)1e9;
const ll inf = (ll)1e18;
int x[MAXN], q[MAXN], h[MAXN], seg[4 * MAXN], lazy[4 * MAXN], ans[MAXN];
pair<int, int> P[MAXN];
void upd(int node, int st, int en, int x)
{
	lazy[node] += x;
	seg[node] += x;
}
void shift(int node, int st, int en)
{
	int mid = (st + en) >> 1;
	upd(node << 1, st, mid, lazy[node]);
	upd(node << 1 | 1, mid, en, lazy[node]);
	lazy[node] = 0;
}
void modify(int node, int st, int en, int l, int r, int x)
{
	if(st >= r || l >= en)
		return;
	if(l <= st && en <= r)
	{
		upd(node, st, en, x);
		return;
	}
	shift(node, st, en);
	int mid = (st + en) >> 1;
	modify(node << 1, st, mid, l, r, x);
	modify(node << 1 | 1, mid, en, l, r, x);
	seg[node] = max(seg[node << 1], seg[node << 1 | 1]);
}
int get_max(int node, int st, int en, int l, int r)
{
	if(st >= r || l >= en)
		return 0;
	if(l <= st && en <= r)
		return seg[node];
	shift(node, st, en);
	int mid = (en + st) >> 1;
	return max(get_max(node << 1, st, mid, l, r), get_max(node << 1 | 1, mid, en, l, r));
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    int n;
    cin >> n;
    for (int i = 0; i < n; i++)
    {
    	cin >> x[i] >> h[i];
    	P[i] = {x[i], i};
	}
	sort(P, P + n);
	for (int i = 0; i < n; i++)
		q[i] = P[i].second;
	for (int i = 0; i < n; i++)
		P[i] = {x[i], h[i]};
	sort(P, P + n);
	for (int i = 0; i < n; i++)
		x[i] = P[i].first, h[i] = P[i].second;
	modify(1, 0, n, n - 1, n, 1);
	ans[q[n - 1]] = get_max(1, 0, n, n - 1, n);
	for (int i = n - 2; i >= 0; i--)
	{
		int nw = h[i] + x[i] - 1, st = upper_bound(x, x + n, nw) - x - 1;
		if(i != n - 2)
			modify(1, 0, n, i + 2, n, 1);
		int p = 0;
		if(st != i)
			p = get_max(1, 0, n, i + 1, st + 1);
		modify(1, 0, n, i, i + 1, p + 1);
		ans[q[i]] = get_max(1, 0, n, i, i + 1);
	}
	for (int i = 0; i < n; i++)
		cout << ans[i] << " ";
}
