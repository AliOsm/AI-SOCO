#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <map>
#include <random>
#include <set>

using namespace std;

vector<char> a;

const int mod=1e9+7;
int randmod1;
int randmod2;

int add(int a,int b,int mod_=mod)
{
    if (a+b>=mod_)
        return a+b-mod_;
    return a+b;
}
int mul(int a,int b,int mod_=mod)
{
    return (a*b)%mod_;
}

int dp[3030][3030];
int hh[3030][3030];
int hh1[3030][3030];
//"0011", "0101", "1110", and "1111".
bool valid(int& i)
{
    if (a[i]==0&&a[i+1]==0&&a[i+2]==1&&a[i+3]==1) return 0;
    if (a[i]==0&&a[i+1]==1&&a[i+2]==0&&a[i+3]==1) return 0;
    if (a[i]==1&&a[i+1]==1&&a[i+2]==1&&a[i+3]==0) return 0;
    if (a[i]==1&&a[i+1]==1&&a[i+2]==1&&a[i+3]==1) return 0;
    return 1;
}

set<int> ha[3333];
pair<long long int,int> hs[3033][3033];

int ans[3400];
int L;

bool prime(int x)
{
    for (int i=2;i*i<=x;i++)
    {
        if (x%i==0)
        {
            return 0;
        }
    }
    return 1;
}


int main()
{
    random_device rd;
    uniform_int_distribution<int> dist(0, 1000000000);
    randmod1=dist(rd);
    while(!prime(randmod1))
        ++randmod1;
    randmod2=dist(rd);
    while(!prime(randmod2))
        ++randmod2;
    int n;
    cin >> n;
    for (int i=0;i<n;i++)
    {
        int x;
        cin >> x;
        a.push_back(x);
        dp[i][i]=1;
        if (i)
        dp[i][i-1]=1;
    }
    for (int l=2;l<=n;l++)
    {
        for (int i=0;i<n;i++)
        {
            int j=i+l-1;
            if (j>=n)
                break;
            for (int k=j-3;k<=j;k++)
            {
                if (k<i)
                    continue;
                if (k==j-3)
                {
                    int s=1;
                    if (k)
                        s=dp[i][k-1];
                    dp[i][j]=add(dp[i][j],mul(s,1-!valid(k)));
                }
                else
                {
                    int u=j-k;
                    int s=1;
                    if (k)
                        s=dp[i][k-1];
                    dp[i][j]=add(dp[i][j],mul(s,1));
                }
            }
            //cout << i << ' ' << j << ' ' << dp[i][j] << endl;
        }
    }
    int bs=dist(rd)%min(randmod1,randmod2);
    int e=dist(rd)%min(randmod1,randmod2);
    for (int i=0;i<n;i++)
    {
        hh[i][i]=a[i]+e;
        hh1[i][i]=a[i]+e;
        hs[0][i]={hh[i][i]*1ll*hh[i][i]+hh1[i][i],i};
        for (int j=i+1;j<n;j++)
        {
            hh[i][j]=add(mul(hh[i][j-1],bs,randmod1),a[j]+e,randmod1);
            hh1[i][j]=add(mul(hh1[i][j-1],bs,randmod2),a[j]+e,randmod2);
            hs[j-i][i]={hh[i][j]*1ll*hh[i][j]+hh1[i][j],i};
        }
    }
    for (int l=0;l<n;l++)
    {
        int sz=n-l;
        L=l;
        sort(hs[l],hs[l]+sz);
        for (int i=0;i<sz;i++)
        {
            if (!i||hs[l][i].first!=hs[l][i-1].first)
            {
                int r=hs[l][i].second+l;
                ans[r]=add(ans[r],dp[hs[l][i].second][hs[l][i].second+l]);
                //cout << r << ' ' << dp[hs[l][i].second][hs[l][i].second+l] << endl;
            }
        }
    }

    for (int i=0;i<n;i++)
    {
        if (i)
            ans[i]=add(ans[i],ans[i-1]);
        cout << ans[i] << endl;
    }


    return 0;
}