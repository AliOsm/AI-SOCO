#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int N = 1e5 + 7;
const int LG = 20;
const int MOD = 1e9 + 7;

int par[N][LG];
ll gg[N][LG];
ll x[N];
int len[N];
int d[N];
vector<int> adj[N];

void dfs(int v, int p)
{
	for (auto u : adj[v])
	{
		if (u == p)
			continue;
		d[u] = d[v] + 1;

		par[u][0] = v;
		gg[u][0] = x[u];
		for (int i=1; i<LG; i++)
		{
			par[u][i] = par[par[u][i-1]][i-1];
			gg[u][i] = __gcd(gg[u][i-1], gg[par[u][i-1]][i-1]);
		}
		dfs(u, v);
	}
}

int main()
{
	ios::sync_with_stdio(false);

	len[1] = 0;
	for (int i=2; i<N; i++)
		len[i] = len[i/2] + 1;
	int n;
	cin >> n;
	for (int i=0; i<n; i++)
		cin >> x[i];
	for (int i=1; i<n; i++)
	{
		int u, v;
		cin >> u >> v;
		u--, v--;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	dfs(0, -1);
	ll ans = 0;
	for (int i=1; i<n; i++)
	{
		ll now = i;
		ll val = x[i];
		while (now > 0)
		{
			int prv = now;
			for (int j=LG-1; j>=0; j--)
			{
			    bool ok = false;
				if (val == 0){
				    if (gg[now][j] == 0)
				        ok = true;
				}
			    else if (gg[now][j] % val == 0)
			        ok = true;
			    if (ok)
					now = par[now][j];
			}
			ans += 1LL * val * (d[prv] - d[now]);
			ans %= MOD;
			val = __gcd(val, x[now]);
		}
		ans += val;
		ans %= MOD;
	}
	ans += x[0];
	ans %= MOD;
	cout << ans << "\n";

	return 0;
}