#include"bits/stdc++.h"
#include<valarray>
using namespace std;

#define MAX 300002

int n;

vector<long long int> f;
vector<pair<long long int,int> > ff;
vector<long long int> t;

long long int par(vector<long long int> &a) {
	long long int sum = 0;
	for (int el : a) {
		sum += el;
	}
	return sum;
}

multiset<pair<int, int> > mt;

vector<tuple<int, int, int> > op;

vector<pair<int, int> > dif;

int main() {
	cin >> n;
	for (int i = 0; i < n; i++) {
		int s;
		scanf("%d", &s);
		f.push_back(s);
		ff.push_back(make_pair(s,i) );
		mt.insert(make_pair(s, i));
	}
	for (int i = 0; i < n; i++) {
		int a;
		scanf("%d", &a);
		t.push_back(a);
	}
	if (par(f) != par(t)) {
		puts("NO");
		return 0;
	}
	sort(t.begin(), t.end());
	sort(f.begin(), f.end());
	sort(ff.begin(), ff.end());
	for (int i = 0; i < t.size(); i++) {
		int nex = t[i] - f[i];
		if (nex >= 0) {
			dif.push_back(make_pair(nex, ff[i].second));
			continue;
		}
		int want = abs(nex);
		while (dif.size() && want) {
			int er = min(dif.back().first, want);
			op.push_back(make_tuple(dif.back().second, ff[i].second, er));
			dif.back().first -= er;
			if (dif.back().first == 0) {
				dif.pop_back();
			}
			want -= er;
		}
		if (want) {
			puts("NO");
			return 0;
		}
	}
	puts("YES");
	cout << op.size() << endl;
	for (int i = 0; i < op.size(); i++) {
		printf("%d %d %d\n", get<0>(op[i])+1, get<1>(op[i])+1, get<2>(op[i]));
	}
	return 0;
}