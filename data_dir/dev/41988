#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%ll"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
// Preffix function
string wrd;
vi preffix_function(){
  wrd += '$';
  vi pf(sz(wrd) , 0);
  for(int i=1;i<sz(wrd);++i){
   int L = pf[i-1];
   while(L && wrd[L] != wrd[i])
    L = pf[ L-1 ];
   pf[i] = L + (wrd[L] == wrd[i] ? 1 : 0);
                            }
  return pf;
}
vi aut[26];
void init(){
  vi pf = preffix_function();
  for(int i=0;i<26;++i)
   aut[i].resize(sz(pf));
  for(int len=0;len<sz(pf);++len)
   for(char ch='a';ch<='z';++ch)
    if(len && wrd[len] != ch)
     aut[ch-'a'][len] = aut[ch-'a'][ pf[len-1] ];
    else
     aut[ch-'a'][len] = len + (ch == wrd[len] ? 1 : 0);
}
// Solution
int TL;
int ans = 0;
char buf[300010];
vi fo[100010];
string S[100010];
int N;
void dfs(int vr , int len){
  for(int i=0;i<sz(fo[vr]);++i){
   int nlen = len;
   string& cur = S[ fo[vr][i] ];
   for(int j=0;j<sz(cur);++j){
    nlen = aut[cur[j] - 'a'][nlen];
    if(nlen == TL)++ans;
                             }
   dfs(fo[vr][i] , nlen);
                               }
}
int main(){
  scanf("%d" , &N);
  for(int i=1;i<N;++i){
   int par;
   scanf("%d %s" , &par , &buf);
   --par;
   fo[par].pb(i);
   S[i] = string(buf);
                      }
  scanf("%s" , &buf);
  wrd = string(buf);
  TL = sz(wrd);
  init();
  dfs(0 , 0);
  printf("%d\n" , ans);
  return 0;
}
