/////////////////////////   _LeMur_
#define _CRT_SECURE_NO_WARNINGS
#include <unordered_map>
#include <unordered_set>
#include <functional>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <chrono>
#include <random>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <ctime>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <list>
#include <map>
#include <set>

using namespace std;

const int N = 3005;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 + 3;

int n , h , m;

int S , T;

struct edge{
    int a , b , cap , flow;
};

vector <int> g[N];
vector <edge> G;

int gag[55][55];

void add_edge(int a,int b,int c){
    edge e1 = {a , b , c , 0};
    edge e2 = {b , a , 0 , 0};
    g[a].push_back((int)G.size());
    G.push_back(e1);
    g[b].push_back((int)G.size());
    G.push_back(e2);
}

int d[N];

bool bfs(){
    queue <int> q;
    for(int i=S;i<=T;i++){
        d[i] = -1;
    }
    q.push(S);
    d[S] = 0;
    while(!q.empty()){
        int v = q.front();
        q.pop();
        for(int i=0;i<(int)g[v].size();i++){
            int id = g[v][i];
            int to = G[id].b;
            if(G[id].cap == G[id].flow)continue;
            if(d[to] == -1){
                d[to] = d[v] + 1;
                q.push(to);
            }
        }
    }
    return (d[T] != -1);
}

int pos[N];

int dfs(int v,int flow){
    if(v == T || flow == 0)return flow;
    for(;pos[v]<(int)g[v].size();pos[v]++){
        int id = g[v][pos[v]];
        int to = G[id].b;
        if(d[to] != d[v] + 1)continue;
        int x = dfs(to , min(flow , G[id].cap - G[id].flow));
        if(x){
            G[id].flow += x;
            G[id ^ 1].flow -= x;
            return x;
        }
    }
    return 0;
}

int flow(){
    int answ = 0;
    while(bfs()){
        for(int i=S;i<=T;i++){
            pos[i] = 0;
        }
        while(true){
            int x = dfs(S , 2 * inf);
            if(x == 0)break;
            answ += x;
        }
    }
    return answ;
}

int main() {
	mt19937 myrand(chrono::steady_clock::now().time_since_epoch().count());
    scanf("%d%d%d",&n,&h,&m);
    ///
    S = 0;
    T = n * (h + 1) + m + 1;
    ///
    int it = 0;
    for(int i=1;i<=n;i++){
        ++it;
        add_edge(S , it , inf);
        for(int j=0;j<h;j++){
            gag[i][j] = it;
            add_edge(it , it + 1 , h * h - j * j);
            ++it;
        }
        gag[i][h] = it;
    }
    for(int i=1;i<=m;i++){
        int l , r , x , c;
        scanf("%d%d%d%d",&l,&r,&x,&c);
        ++it;
        add_edge(it , T , c);
        for(int j=l;j<=r;j++){
            for(int l=x+1;l<=h;l++){
                add_edge(gag[j][l] , it , inf);
            }
        }
    }
    cout << h * h * n - flow() << endl;
	return 0;
}
