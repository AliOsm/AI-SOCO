/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXM = 510;
const ll MAXN = 5000 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll d, s, dist[MAXM][MAXN];
pll prv[MAXM][MAXN];
queue<ll> q;

int main() {
    fast_io;
    for (ll i = 0; i < MAXM; i++) for (ll j = 0; j < MAXN; j++) dist[i][j] = INF;

    cin >> d >> s;

    dist[0][0] = 0;
    q.push(0);
    q.push(0);
    while (!q.empty()) {
        ll x = q.front();
        q.pop();
        ll y = q.front();
        q.pop();
        for (ll i = 0; i < 10; i++) {
            ll nx = (x * 10 + i) % d, ny = y + i;
            if (ny >= MAXN) continue;
            if (dist[nx][ny] == INF) {
                dist[nx][ny] = dist[x][y] + 1;
                prv[nx][ny] = {x, i};
                q.push(nx);
                q.push(ny);
            }
        }
    }

    if (dist[0][s] == INF) return cout << -1 << endl, 0;
    ll x = 0, y = s;
    vector<ll> ans;
    while (x != 0 || y != 0) {
        pll A = prv[x][y];
        ans.push_back(A.Y);
        x = A.X, y -= A.Y;
    }
    reverse(all(ans));
    for (ll i : ans) cout << i;

    return 0;
}
/*

*/
