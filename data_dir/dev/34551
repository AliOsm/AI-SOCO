#include <cstdio>
#include <algorithm>
#include <iostream>

using namespace std;

const int N = 200'009;

int a[N];
int b[N];
int o[N];

int main() {
  int tt;
  scanf("%d", &tt);
  while (tt--) {
    int n;
    scanf("%d", &n);
    int x, y;
    scanf("%d%d%d", a + n, &x, &y);
    ++a[n];
    for (int i = 0; i < n; ++i) {
      scanf("%d", b + i);
    }
    for (int i = 0; i < n; ++i) {
      scanf("%d", a + i);
    }
    for (int i = 0; i < n; ++i) {
      o[i] = i;
    }
    sort(o, o + n, [](int i, int j) {
      return a[i] < a[j];
    });
    o[n] = n;
    int totx = 0;
    for (int i = 0; i < n; ++i) {
      if (b[i] == 0) {
        ++totx;
      }
    }
    int ans = 0;
    {
      int rem = max(0, a[o[0]] - 1);
      {
        int q = min(totx, rem / x);
        rem -= q * x;
        ans += q;
      }
      {
        int q = min(n - totx, rem / y);
        ans += q;
      }
    }
    int cntx = 0;
    for (int i = 0; i < n; ++i) {
      if (b[o[i]] == 0) {
        ++cntx;
      }
      while (a[o[i + 1]] == a[o[i]]) {
        if (b[o[i + 1]] == 0) {
          ++cntx;
        }
        ++i;
      }
      long long sum = (long long)cntx * x + (long long)(i + 1 - cntx) * y;
      long long rem = (a[o[i + 1]] - 1) - sum;
      if (rem < 0) {
        continue;
      }
      int cur = i + 1;
      {
        int q = (int)min((long long)totx - cntx, rem / x);
        rem -= (long long)q * x;
        cur += q;
      }
      {
        int q = (int)min((long long)(n - totx) - (i + 1 - cntx), rem / y);
        cur += q;
      }
      ans = max(ans, cur);
    }
    printf("%d\n", ans);
  }
}
