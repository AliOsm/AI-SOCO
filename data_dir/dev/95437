#include <bits/stdc++.h>
#define pb push_back
#define all(v) (v).begin() , (v).end()
#define popcnt(x) __builtin_popcount(x)
#define inf 0x3f3f3f3f
#define watch(x) cout << (#x) << " is " << (x) << endl
#define rand() (rand() << 15 | rand())

using namespace std;
typedef long long  ll;
const int N = 2e5 + 4;
struct Edge{
    int u , v;
};

int deg[N] , n , m , d;
int sz[N] , p[N];
vector<int> adj[N];

void init(){
    iota(p , p + N , 0); // 0 1 2 3 .. N
    fill(sz , sz + N , 1);
}

int f(int u){
    return p[u] = (p[u] == u ? u : f(p[u]));
}

void unite(int u , int v){
    u = f(u);
    v = f(v);

    if(u == v)return;

    if(sz[v] < sz[u])swap(u , v);

    p[u] = v;
    sz[v] += sz[u];
}
vector<Edge> res;
void dfs(int u , int par){
    unite(u , par);
    res.pb({u , par});
    for(int child : adj[u]){
        if(child == par || child == 1 || f(u) == f(child))continue;
        dfs(child , u);
    }
}
int main(){
#ifndef ONLINE_JUDGE
    freopen("input.txt" , "r" , stdin);
#endif
    ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0);
    cin >> n >> m >> d;
    vector<Edge> Edge_list;
    for(int i = 0 ; i < m ; ++i){
        int u , v;
        cin >> u >> v;
        adj[u].pb(v);
        adj[v].pb(u);
        deg[u]++ , deg[v]++;
        Edge_list.pb({u , v});
    }
    init();

    vector<pair<int , int> > pool;

    for(Edge e : Edge_list){
        if(e.u == 1){
            pool.pb({deg[e.v] , e.v});
        }
        else if(e.v == 1){
            pool.pb({deg[e.u] , e.u});
        }
    }

    sort(all(pool));

    if(pool.size() < d){
        cout << "NO\n";
        return 0;
    }

    int cur = 0;
    vector<bool> taken(n + 1);
    for(pair<int , int> p : pool){
        int d = p.first;
        int v = p.second;
        if(f(v) == f(1))continue;
        dfs(v , 1);
        ++cur;
        taken[v] = true;
    }


    if(cur > d){
        cout << "NO\n";
        return 0;
    }

    vector<Edge> new_edgeList;
    if(cur < d){
        for(int i = 0 ; cur < d && i < pool.size() ; ++i){
            if(!taken[pool[i].second]){
                new_edgeList.pb({1 , pool[i].second});
                ++cur;
            }
        }
    }

    if(cur < d){
        cout << "NO\n";
        return 0;
    }

    for(Edge e : res)
        new_edgeList.pb(e);


    init();
    vector<Edge> R;
    for(Edge e : new_edgeList){
        if(f(e.u) == f(e.v))continue;
        R.pb(e);
        unite(e.u , e.v);
    }

    if((int)R.size() != n - 1){
        cout << "NO\n";
        return 0;
    }
    cout << "YES\n";
    for(Edge e : R){
        cout << e.u << ' ' << e.v << "\n";
    }


//    for(int i = 0 ; i < d ; ++i){
//        pair<int , int> p = pool[i];
//        unite(p.second , 1);
//        res.pb({1 , p.second});
//    }
//
//    if(d < pool.size() && pool[d].first == 1){
//        cout << "NO\n";
//        return 0;
//    }
//
//    for(Edge e : Edge_list){
//        if(e.u == 1 || e.v == 1)continue;
//        if(f(e.u) != f(e.v)){
//            unite(e.u , e.v);
//            res.pb({e.u , e.v});
//        }
//    }
//
//    int tst = 0;
//    for(Edge e : res)
//        tst += (e.u == 1 || e.v == 1);
//
//    if(res.size() != n - 1 || tst != d){
//        cout << "NO\n";
//        return 0;
//    }

}
