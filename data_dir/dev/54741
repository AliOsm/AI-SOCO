#include <bits/stdc++.h>

using namespace std;

const int N = 1e5 + 5;

struct BIT {
    vector<long long> tree;
    BIT() : tree(N){}

    void upd(int p , long long v) {
        for (int i = ++p ;i < tree.size() ; i += i & -i)
            tree[i] += v;
    }

    long long get(int p) {
        long long sum = 0;
        for (int i = ++p; i ; i -= i & -i)
            sum += tree[i];
        return sum;
    }

    long long query(int l , int r) {
        if (r < l) return 0;
        return get(r) - get(l - 1);
    }

    int get_kth(long long k) {
        int pos = 0 ;
        long long s = 0;
        for (int i = 1 + log2(tree.size()) ;i >= 0 ;i--)
            if (pos + (1 << i) < tree.size() && s + tree[pos + (1 << i)] < k)
                s += tree[pos + (1 << i)] , pos += (1 << i);
        return pos;
    }

    int lower_bound(int v) {
        return get_kth(get(v - 1) + 1);
    }

    int upper_bound(int v) {
        return lower_bound(v + 1);
    }
};

// char pos jump
BIT os[4][10][11];
vector<pair<int , int> > starts[N];

string DNA = "ATGC";

int get (char c) {
    return DNA.find(c);
}

int main() {
    ios::sync_with_stdio(0) , cin.tie(0) , cout.tie();
#ifndef ONLINE_JUDGE
    freopen("input.in" , "r" , stdin);
#endif
    string s;
    cin >> s;

    for (char &c : s)
        c = get(c);

    for (int pos = 0 ;pos < 10 ; pos++) {
        for (int jump = 1 ; jump <= 10 ; jump++) {
            for (int i = pos ;i < s.size() ;i += jump) {
                os[s[i]][pos][jump].upd(i , 1);
                starts[i].push_back({pos , jump});
            }
        }
    }

    int q;
    cin >> q;
    while (q--) {
        int t;
        cin >> t;

        if (t == 1) {
            int i;
            char c;
            cin >> i >> c;
            i--;
            c = get(c);

            for (auto &p : starts[i]) {
                os[s[i]][p.first][p.second].upd(i , -1);
                os[c][p.first][p.second].upd(i , 1);
            }

            s[i] = c;
        } else {
            int l , r;
            string e;
            cin >> l >> r >> e;
            l-- , r--;

            int len = e.size();
            int st = l % len;

            int ans = 0;
            for (int i = 0 ;i < e.size() ;i++)
                ans += os[get(e[i])][(st + i) % len][e.size()].query(l , r);

            cout << ans << '\n';
        }
    }
}           