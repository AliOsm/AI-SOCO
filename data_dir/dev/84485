#include <vector>
#include <cassert>
#include <iostream>
#include <algorithm>
#include <string>
#include <cstdio>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

typedef long long ll;

struct point
{
	ll x,y;
	point(ll x=0, ll y=0):x(x), y(y){}
	point operator-(const point& b) const
	{
		return point(x-b.x, y-b.y);
	}
	point operator+(const point& b) const
	{
		return point(x+b.x, y+b.y);
	}
	ll inner(const point& b) const
	{
		return x*b.x + y*b.y;
	}
	ll cross(const point& b) const
	{
		return x*b.y - y*b.x;
	}
	bool operator<(const point& b) const
	{
		if(x!=b.x) return x<b.x;
		return y<b.y;
	}
	ll norm() const
	{
		return x*x + y*y;
	}
};

vector<point> v;

bool cmp(int a, int b)
{
	if(v[a].cross(v[b])==0)
		return v[a].norm()<v[b].norm();
	else
		return v[a].cross(v[b])<0;
}

int main()
{
	int n;
	scanf("%d",&n);

	REP(i,n)
	{
		int x,y;
		scanf("%d%d",&x,&y);
		v.push_back(point(x,y));
	}
	point minpoint=*min_element(v.begin(), v.end());
	REP(i,n)
		v[i]=v[i]-minpoint;
	vector<int> pnt;
	int origin=-1;
	REP(i,n)
		if(v[i].norm()==0)
			origin=i;
		else
			pnt.push_back(i);
	assert(origin!=-1);
	sort(pnt.begin(), pnt.end(), cmp);
	int p1=-1, p2=-1;

	p1=pnt[0];
	for(int i=0;i<pnt.size();i++)
		if(v[pnt[i]].cross(v[p1])!=0)
		{
			p2=pnt[i];
			break;
		}
	assert(p2!=-1);
	printf("%d %d %d\n",origin+1, p1+1, p2+1);
	return 0;
}
