#include<bits/stdc++.h>
//#define DEBUG
#define FOR(i,n) for(int i=1;i<=n;i++)
#define FORZ(i,n) for(int i=0;i<n;i++)
#define ll long long
#define ull unsigned long long
#define pii pair<int,int>
#define piii pair<int,pair<int,int>>
#define ff first
#define ss second
#define mp make_pair
#define pb push_back
#define SIZE 10000002
#define MOD 1000000007
#define LD long long double
#define bpc __builtin_popcount
#define gentum getnum
using namespace std;

inline ll getnum()
{
    char c = getchar();
    ll num,sign=1;
    for(;c<'0'||c>'9';c=getchar())if(c=='-')sign=-1;
    for(num=0;c>='0'&&c<='9';)
    {
        c-='0';
        num = num*10+c;
        c=getchar();
    }
    return num*sign;
}

vector<int> V[100005];
multiset<int> Set[100005];

bool yes=true;

void dfs(int n,int p)
{
    Set[n].insert(0);
    for(int i=0;i<V[n].size();i++)
    {
        int x=V[n][i];
        if(x!=p)
        {
            dfs(x,n);
            Set[n].insert(*(Set[x].rbegin())+1);
        }
    }
}

void ddfs(int n,int p)
{
    if(p>0)
    {
        int x=*(Set[n].rbegin());
        Set[p].erase(Set[p].find(x+1));
        Set[n].insert(*(Set[p].rbegin())+1);
        Set[p].insert(x+1);
    }

    for(int i=0;i<V[n].size();i++)
    {
        int x=V[n][i];
        if(x!=p)ddfs(x,n);
    }
}

void dddfs(int n,int p,int k)
{
    if(k==0)
    {
        if(V[n].size()!=1)yes=false;
        return;
    }
    else
    {
        if(p==0)
        {
            if(V[n].size()<3)yes=false;
        }
        else
        {
            if(V[n].size()<4)yes=false;
        }
    }

    for(int i=0;i<V[n].size();i++)
    {
        int x=V[n][i];
        if(x!=p)dddfs(x,n,k-1);
    }
}

int main()
{
    int n=getnum(),k=getnum();

    for(int i=1;i<n;i++)
    {
        int x=getnum(),y=getnum();
        V[x].pb(y);
        V[y].pb(x);
    }

    dfs(1,0);
    ddfs(1,0);

    pii mn={n+2,0};

    for(int i=1;i<=n;i++)
    {
        mn=min(mn,mp(*(Set[i].rbegin()),i));
    }

    int p=mn.ss;

    dddfs(p,0,k);

    if(yes)cout<<"Yes";
    else cout<<"No";
}