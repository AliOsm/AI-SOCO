#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>
#include <deque>
#include <string>
#include <list>

using namespace std;

int n, m;
int r, c;
int x, y;
int ans;

char a[2222][2222];
bool used[2222][2222];

bool isIn(int i, int j)
{
    return i >= 1 && j >= 1 && i <= n && j <= m;
}

int dx[] = {0, 0, 1, -1};
int dy[] = {1, -1, 0, 0};
int cx[] = {0, 1, 0, 0};
int cy[] = {1, 0, 0, 0};

deque<pair<pair<int, int>, pair<int, int> > > q;

void bfs()
{
    while(!q.empty())
    {
        pair<pair<int, int>, pair<int, int> > cc = q.front();
        q.pop_front();
        int i = cc.first.first;
        int j = cc.first.second;
        int curX = cc.second.first;
        int curY = cc.second.second;

        if (!isIn(i,j) || used[i][j] || a[i][j] != '.' || curX > x || curY > y)
            continue;

        ++ans;
        used[i][j] = 1;

        for (int k = 0; k < 4; ++k)
        {
            if (k > 1)
                q.push_front({{i + dx[k], j + dy[k]}, {curX + cx[k], curY + cy[k]}});
            else
                q.push_back({{i + dx[k], j + dy[k]}, {curX + cx[k], curY + cy[k]}});
        }
    }
}

int main()
{
    cin >> n >> m >> r >> c >> x >> y;

    for (int i = 1; i <= n; ++i)
        for (int j = 1; j <= m; ++j)
            cin >> a[i][j];

    q.push_back({{r, c}, {0,0}});
    bfs();
    cout << ans;

    return 0;
}


/*


*/
