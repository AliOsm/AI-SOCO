#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
#define dbl(k, x) fixed << setprecision(k) << (x)

template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define _upgrade ios_base::sync_with_stdio(0);
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 1e3 + 7;

int cnt[2][2];

inline int p(int s)
{
    return (s % 2) != 0;
}

int main()
{
    _upgrade
    
    int n; cin >> n;
    vector < PLL > v(n);
    for(int i = 0; i < n; i++)
        cin >> v[i].first >> v[i].second;
    
    vector < int > ans;

    while(true)
    {
        cnt[0][0] = cnt[0][1] = cnt[1][0] = cnt[1][1] = 0;

        for(int i = 0; i < n; i++)
            cnt[p(v[i].first)][p(v[i].second)]++;
        
        if(cnt[0][0] + cnt[1][1] > 0 && cnt[0][1] + cnt[1][0] > 0)
        {
            for(int i = 0; i < n; i++)
            {
                if(p(v[i].first + v[i].second) == 0)
                    ans.push_back(i + 1);
            }
            break;
        }
        else if(cnt[0][0] > 0 && cnt[1][1] > 0)
        {
            for(int i = 0; i < n; i++)
            {
                if(p(v[i].first) == 0 && p(v[i].second) == 0)
                    ans.push_back(i + 1);
            }
            break;
        }
        else if(cnt[1][0] > 0 && cnt[0][1] > 0)
        {
            for(int i = 0; i < n; i++)
            {
                if(p(v[i].first) == 1 && p(v[i].second) == 0)
                    ans.push_back(i + 1);
            }
            break;
        }
        else if(cnt[0][0] > 0)
        {
            for(int i = 0; i < n; i++)
            {
                v[i].first /= 2;
                v[i].second /= 2;
            }
        }
        else if(cnt[0][1] > 0)
        {
            for(int i = 0; i < n; i++)
            {
                v[i].first /= 2;
                v[i].second = (v[i].second + 1) / 2;
            }
        }
        else if(cnt[1][0] > 0)
        {
            for(int i = 0; i < n; i++)
            {
                v[i].first = (v[i].first + 1) / 2;
                v[i].second /= 2;
            }
        }
        else if(cnt[1][1] > 0)
        {
            for(int i = 0; i < n; i++)
            {
                v[i].first = (v[i].first + 1) / 2;
                v[i].second = (v[i].second + 1) / 2;
            }
        }
    }

    cout << sz(ans) << "\n";
    for(auto id: ans)
        cout << id << " ";
    cout << "\n";

	return 0;
}