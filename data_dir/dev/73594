#include <bits/stdc++.h>
using namespace std;

// Template Headers {{{
using pii = pair<int, int>; using vpii = vector<pii>;
using vi = vector<int>; using vvi = vector<vi>;
using ll = long long; using vll = vector<long long>;
template <class T> using min_queue = priority_queue<T, vector<T>, greater<T>>;
template <class T> istream &operator>>(istream &, vector<T> &);
template <class T> ostream &operator<<(ostream &, const vector<T> &);
template <class T, class U> istream &operator>>(istream &, pair<T, U> &);
template <class T, class U> ostream &operator<<(ostream &, const pair<T, U> &);
constexpr int INF = 0x3f3f3f3f; constexpr ll BINF = 0x3f3f3f3f3f3f3f3fLL;
// mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
// }}}

int solve() {
	int n; cin >> n;
	vpii c(4 * n + 1); cin >> c;
	vi cx, cy;
	for (auto [x, y] : c) cx.push_back(x), cy.push_back(y);
	sort(cx.begin(), cx.end()); sort(cy.begin(), cy.end());
	cx.resize(distance(cx.begin(), unique(cx.begin(), cx.end())));
	cy.resize(distance(cy.begin(), unique(cy.begin(), cy.end())));
	for (int x1 : cx) for (int y1 : cy) for (int x2 : cx) for (int y2 : cy) {
		if (x2 - x1 != y2 - y1) continue;
		int mkx = -1, mky = -1;
		bool wtf = false;
		for (auto [xx, yy] : c) {
			if (((xx == x1 || xx == x2) && y1 <= yy && yy <= y2) || ((yy == y1 || yy == y2) && x1 <= xx && xx <= x2)) continue;
			if (mkx != -1 || mky != -1) wtf = true;
			mkx = xx, mky = yy;
		}
		if (mkx == -1 || mky == -1 || wtf) continue;
		cerr << x1 << ' ' << x2 << ' ' << y1 << ' ' << y2 << endl;
		cout << mkx << ' ' << mky << endl;
		return 0;
	}
	cerr << "WTF" << endl;
	return 0;
}

// Template Main {{{
int main() {
	ios::sync_with_stdio(0);
	// precompute();
	// int t; cin >> t; for (int i=1;i<=t;i++)
	solve();
	// cout << "Case #" << i << ": ", solve();
	return 0;
}

template <class T> istream &operator>>(istream &is, vector<T> &v) {
	for (auto it=v.begin();it!=v.end();++it) is >> *it;
	return is;
}

template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
	for (auto it=v.begin();it!=v.end();) os << *it, os << " \n"[++it==v.end()];
	return os;
}

template <class T, class U> istream &operator>>(istream &is, pair<T, U> &p) {
	return is >> p.first >> p.second;
}

template <class T, class U> ostream &operator<<(ostream &os, const pair<T, U> &p) {
	return os << p.first << ' ' << p.second;
}
// }}}

// vim: fdm=marker
