#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcount(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

const int OO = (int) 2e9;
const double eps = 1e-9;

vvi adj;
pii arr[102];
int n;
bool vis[102];

bool dfs(int st, int en) {
  MMS(vis, 0);
  stack<int> S;
  S.push(st);
  vis[st] = 1;
  while (SZ(S)) {
    int cur = S.top();
    S.pop();
    if (cur == en)
      return 1;
    for (int i = 0; i < SZ(adj[cur]); i++)
      if (!vis[adj[cur][i]]) {
        vis[adj[cur][i]] = 1;
        S.push(adj[cur][i]);
      }
  }
  return 0;
}

void print() {
  for (int i = 0; i < n; i++) {
    cout << i;
    for (int j = 0; j < SZ(adj[i]); j++)
      cout << " " << adj[i][j];
    cout << endl;
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
#ifndef ONLINE_JUDGE
// freopen("in.txt","rt",stdin);
// freopen("out.txt","wt",stdout);
#endif
  int q, t, x, y;
  cin >> q;
  adj.resize(100);
  for (int k = 0; k < q; k++) {
    cin >> t >> x >> y;
    if (t == 1) {
      arr[n++] = mp(x, y);
      for (int i = 0; i < n - 1; i++) {
        if ((arr[i].first < arr[n - 1].first && arr[n - 1].first < arr[i].second)
            || (arr[i].first < arr[n - 1].second
                && arr[n - 1].second < arr[i].second))
          adj[n - 1].pb(i);
        if ((arr[n - 1].first < arr[i].first && arr[i].first < arr[n - 1].second)
            || (arr[n - 1].first < arr[i].second
                && arr[i].second < arr[n - 1].second))
          adj[i].pb(n - 1);
      }
    } else {
      dfs(x - 1, y - 1) ? puts("YES") : puts("NO");
    }
  }
  return 0;
}
