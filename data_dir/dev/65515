#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define IN freopen("transposition-115.txt","r",stdin)
#define OUT freopen("dichromatic.out","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 2000000000
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define SZ(v) ((int)v.size())
#define sq(x)  ((x)*(x))

using namespace __gnu_pbds;
using namespace std ;

#define maxn 1000005
#define mod 1000000007LL

typedef pair<i64,i64> pii ;
typedef  long long int T ;

int n ;
vector <int> Next[maxn] ;
int cur = 0 ;
int id[maxn] , fact[maxn] ;
int dp[45][maxn] ;

int gcd(int a, int b)
{
    if(b==0) return a ;
    return gcd(b,a%b) ;
}

int f(int g, int placed)
{
  //  printf("%d %d\n",g,placed) ;
    if( placed > n/g ) return 0 ;
    if(g==1) return fact[n-placed] ;
    if( dp[ id[g] ][placed] != -1 ) return dp[ id[g] ][placed] ;

    int cand = n/g , ret = 0 ;

    if( cand > placed ) ret = (1LL*(cand-placed)*f( g , placed+1 ))%mod ;

    for(int i=0 ; i<Next[g].size() ; i++)
    {
        int nextG = Next[g][i] ;
        cand = n/nextG - n/g ;
        if( cand > 0 ) ret =  (ret + 1LL*cand*f(nextG,placed+1) )%mod ;
    }
    return dp[ id[g] ][placed] = ret ;
}

int main()
{
    scanf("%d",&n) ;

    int ln = 0 ;

    for(int i=1 ; i<=n ; i++)
    {
        if( (1<<i) <= n ) ln = i ;
        else break ;
    }

    memset(id,-1,sizeof(id)) ;

    id[(1<<ln)] = ++cur ;
    if( 3*(1<<(ln-1)) <= n ) id[ 3*(1<<(ln-1)) ] = ++cur ;

    for(int i=n ; i>=1 ; i--)
    {
        if( id[i]==-1 ) continue ;

        if( i%3==0  )
        {
            if( id[i/3]==-1 ) id[i/3] = ++cur ;
            Next[i].pb(i/3) ;
        }
        if( i%2==0 )
        {
            if(  id[i/2]==-1 ) id[i/2] = ++cur ;
            Next[i].pb(i/2) ;
        }
  //      printf("%d : %d\n",i,id[i]) ;
   //     for(int j=0 ; j<Next[i].size() ; j++) printf("%d ",Next[i][j]) ;
    //    printf("\n") ;
    }

 //   printf("---%d\n",cur) ;

    memset(dp,-1,sizeof(dp)) ;

    fact[0] = 1 ;
    for(int i=1 ; i<=n ; i++) fact[i]=(1LL*fact[i-1]*i)%mod ;

    int ans = f( 1<<ln , 1 ) ;
    if( 3*(1<<(ln-1)) <= n ) ans = ( ans + f( 3*(1<<(ln-1)) , 1 ) )%mod ;

    printf("%d\n",ans) ;

    return 0 ;
}
