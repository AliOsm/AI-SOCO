#include <bits/stdc++.h>
using namespace std;

const int N = 5e3 + 10;
int n, m, ar[N], p[N], g[N], pre[N], dp[N];

int gcd(int a, int b) {
	return !b? a: gcd(b, a % b);
}

int f(int x) {
	int res = 0;
	for (int i = 2; i * i <= x; i++) {
		if (x % i == 0) {
			bool b = binary_search(p, p + m, i);
			while (x % i == 0) {
				x /= i;
				if (!b)
					res++;
				else
					res--;
			}
		}
	}
	if (x > 1) {
		if (binary_search(p, p + m, x))
			res--;
		else
			res++;
	}
	return res;
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		cin >> ar[i];
	for (int i = 0; i < m; i++)
		cin >> p[i];
	sort(p, p + m);
	
	int sum = 0;
	for (int i = 0; i < n; i++)
		sum += f(ar[i]);
		
	g[0] = ar[0];
	for (int i = 1; i < n; i++)
		g[i] = gcd(ar[i], g[i - 1]);
	
	pre[0] = f(ar[0]);
	for (int i = 1; i < n; i++)
		pre[i] = pre[i - 1] - f(g[i - 1] / g[i]);
	
	dp[n - 1] = sum - n * pre[n - 1];
	for (int i = n - 2; ~i; i--) {
		dp[i] = sum - (i + 1) * f(g[i]);
		for (int j = i + 1; j < n; j++)
			dp[i] = max(dp[i], dp[j] - (i + 1) * (pre[i] - pre[j]));
	}
	
	int ans = sum;
	for (int i = 0; i < n; i++)
		ans = max(ans, dp[i]);
	cout << ans;
}

