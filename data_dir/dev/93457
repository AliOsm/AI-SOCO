#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <algorithm>
#include <functional>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <tuple>
#include <numeric>
#include <ctime>
#include <random>
#define ll long long
using namespace std;


int c[222222];

int FindInArray(int min_val, int len) {
    
    if (c[1] < min_val) return -1;
    int low=1;
    int high=len;
    while(low < high) {
        int mid = (low + high+1)/2;
        if (c[mid] >= min_val) {
            low=mid;
        } else {
            high=mid-1;
        }
    }
    return low;
    
    
    for(int j=len;j>=1;j--) {
        if (c[j]>=min_val) return j;
    }
    return -1;
}

int main() {
    int n,k;
    cin>>n>>k;

    map<int,int> counts;
    for(int i=1;i<=n;i++){
        int x;
        cin>>x;
        counts[-x]++;
    }
    
    for(int i=1;i<=k;i++)
        cin>>c[i];
    
    vector<vector<int>> ans;

    while(!counts.empty()) {
        int cumul = 0;
        vector<int> curr;
        
        // find x such that cumul <= c[x]-1
        // c[x] >= cumul+1
        
        while(1) {
            int x = FindInArray(cumul+1,k);
            if (x == -1) break;
            
            auto it = counts.lower_bound(-x);
            if (it == counts.end()) break;
            x = -it->first;
            int ct = it->second;
            
            // cumul + t <= c[x]
            int t = min(c[x]-cumul,ct);
            
            for(int j=1;j<=t;j++) {
                curr.push_back(x);
            }
            
//            counts_rem[-x]=t;
            counts[-x]-=t;
            if (counts[-x]==0) counts.erase(-x);
            cumul += t;
        }
        
//
//
//
//        for(auto x_ct : counts) {
//            int x = -x_ct.first;
//            int ct = x_ct.second;
//            if (cumul >= c[x]) continue;
//
//            // cumul + t <= c[x]
//            int t = min(c[x]-cumul,ct);
//
//            for(int j=1;j<=t;j++) {
//                curr.push_back(x);
//            }
//
//            counts_rem[-x]=t;
//            cumul += t;
//        }
        
//        for(auto x_ct : counts_rem) {
//            int x = x_ct.first;
//            counts[x]-=x_ct.second;
//            if (counts[x]==0) counts.erase(x);
//        }
//
        ans.push_back(curr);
    }
    
    cout << ans.size() << endl;
    for(const vector<int>& c : ans) {
        printf("%lu ",c.size());
        for(int x : c) {
            printf("%d ",x);
        }
        cout << endl;
    }
    
    
    
    
}
