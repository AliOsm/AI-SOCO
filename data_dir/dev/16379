#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
#define sc(a) scanf("%d", &a)
#define sc2(a, b) scanf("%d%d", &a, &b)
#define sc3(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define scs(a) scanf("%s", a)
#define pri(x) printf("%d\n", x)
#define prie(x) printf("%d ", x)
#define mp make_pair
#define pb push_back
#define BUFF ios::sync_with_stdio(false);
#define db(x) cerr << #x << " == " << x << endl
#define dbs(x) cerr << x << endl
#define imprime(x, Y)                              \
  for (int X = 0; X < Y; X++) cerr << x[X] << " "; \
  cerr << endl;
typedef long long int ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vector<ii> > vvii;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3fll;
const ld pi = acos(-1);
const int MOD = 1e9 + 7;
int dp[75][(1 << 20) + 10];
// posicao, corte, soma, quem ja foi
string s;
int solve(int maxi,int jafoi, int pos)
{
  if (pos == s.size()) return 0;
  ll ret = 0;
  if (dp[pos][jafoi] != -1) return dp[pos][jafoi];
  ll cara = 0;
  for (int i = pos; i < s.size(); i++) {
    if (cara <= 30) cara *= 2ll;
    cara += s[i] - '0';
    int mask = jafoi;
    if (cara <= maxi) {
      if (cara > 0) {
        int x = (1 << (cara - 1));
        if (mask & x) mask -= x;
        ret += solve(maxi,mask, i + 1)+(mask==0);
      }
    }
    else break;
  }
  ret %= MOD;
  return dp[pos][jafoi] = ret;
}
int main()
{
  int n;
  cin >> n >> s;
  ll r = 0;
  for (int i = 20; i >= 1; i--) {
    memset(dp, -1, sizeof(dp));
    int mask = (1 << i) - 1;
    for (int j = 0; j < s.size(); j++) {
      if (solve(i,mask, j) > 0) r += solve(i,mask, j);
      r = r % MOD;
    }
  }
  cout << r % MOD << endl;
  return 0;
}
