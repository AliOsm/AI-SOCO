#include<bits/stdc++.h>
using namespace std;

#define ll             long long
#define LL             long long
#define pii            pair<int, int>
#define pll            pair<ll, ll>
#define pil            pair<int, ll>
#define pli            pair<ll, int>
#define vi             vector<int>
#define vl             vector<ll>
#define vii            vector<pii>
#define vll            vector<pll>
#define vil            vector<pil>
#define vli            vector<pli>
#define pb             push_back
#define ppb            pop_back
#define mp             make_pair
#define ff             first
#define ss             second
#define TN             typename
#define all(v)         v.begin(), v.end()
#define endl           '\n'

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> T lcm(T a, T b) {return a * (b / gcd(a, b));}
template <TN T> T sqr(T a) {return a * a;}
template <TN T> T cube(T a) {return a * a * a;}
template <TN T> inline void smin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void smax(T &a, T b) {a = a > b ? a : b;}
template <TN T> void fill(T a[], T n, T b) {for (int i = 0; i <= n; i++) a[i] = b;}

int in() {
	int n;
	scanf("%d", &n);
	return n;
}

ll Lin() {
	ll n;
	scanf("%lld", &n);
	return n;
}

double Din() {
	double n;
	scanf("%lf", &n);
	return n;
}

const ll inf = (ll)1e17;
const ll mod = (ll)1e9 + 7;
const int N = 20 + 5;

int n, m, num[N][N];
vi g[N * N];
bool vis[N * N];

int dfs2(int u) {
	int ans = 1;
	vis[u] = true;
	for (auto v : g[u]) {
		if (!vis[v]) ans += dfs2(v);
	}
	return ans;
}

bool dfs(int u) {
	for (int i = 1; i <= n * m; i++) {
		vis[i] = false;
	}
	int nd = dfs2(u);
	return (bool)(nd == n * m);
}

int solve() {
	n = in(), m = in();
	int cur = 1;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			num[i][j] =  cur++;
		}
	}
	string s;
	cin >> s;
	for (int i = 0; i < n; i++) {
		for (int j = 1; j < m; j++) {
			if (s[i] == '>') g[num[i][j - 1]].pb(num[i][j]);
			else g[num[i][j]].pb(num[i][j - 1]);
		}
	}
	cin >> s;
	for (int i = 0; i < m; i++) {
		for (int j = 1; j < n; j++) {
			if (s[i] == '^') g[num[j][i]].pb(num[j - 1][i]);
			else g[num[j - 1][i]].pb(num[j][i]);
		}
	}
	for (int i = 1; i <= n * m; i++) {
		if (!dfs(i)) return printf("NO\n");
	}
	printf("YES\n");
	return 0;
}

int main() {
	int test = 1, tc = 0;
	//scanf("%d", &test);
	while (test--) {
		//printf("Case %d: ", ++tc);
		solve();
	}
	return 0;
}
