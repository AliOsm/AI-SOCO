#include<bits/stdc++.h>
using namespace std;
int n,m,W,i,j,w,x,y,k,val[1001],wt[1001],ans[1001],Arr[1001],wt_grp[1001],val_grp[1001];
vector<int>adj[1001];
int root(int f)
{
    while(Arr[f]!=f)
    {
        Arr[f]=Arr[Arr[f]] ;
        f=Arr[f];
    }
    return f;
}
int union1(int A,int B)
{
    int root_A=root(A);
    int root_B=root(B);
    Arr[root_A]=root_B;
}
void knapsack()
{
    for(i=1;i<=n;i++)
    {
        if(root(i)==i)
        {
            for(j=W;j>=0;j--)
            {
                for(k=0;k<adj[i].size();k++)
                    if(j>=wt[adj[i][k]])
                        ans[j]=max(ans[j],ans[j-wt[adj[i][k]]]+val[adj[i][k]]);
                if(j>=wt_grp[i])
                    ans[j]=max(ans[j],ans[j-wt_grp[i]]+val_grp[i]);
            }
        }
    }
}
int main()
{
    ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);
    cin>>n>>m>>W;
    for(i=1;i<=1000;i++)
        Arr[i]=i;
    for(i=1;i<=n;i++)
        cin>>wt[i];
    for(i=1;i<=n;i++)
        cin>>val[i];
    for(i=1;i<=m;i++)
    {
        cin>>x>>y;
        union1(min(x,y),max(x,y));
    }
    for(i=1;i<=n;i++)
    {
        x=root(i);
        adj[x].push_back(i);
        wt_grp[x]+=wt[i];
        val_grp[x]+=val[i];
    }
    knapsack();
    cout<<ans[W];
}
