#include <bits/stdc++.h>

using namespace std;
const int mod = 1e9 + 7;
typedef vector<vector<int>> matrix;

matrix mult(matrix &a, matrix &b) {
    int n = a.size();
    int m = b[0].size();
    int K = a[0].size();
    matrix res = matrix(n, vector<int>(m, 0));

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            int &v = res[i][j];
            for (int k = 0; k < K; ++k) {
                v = (v + (1ll * a[i][k] * b[k][j])) % mod;
            }
        }
    }
    return res;
}

int memo[105];

matrix identity(int sz) {
    matrix res(sz, vector<int>(sz, 0));
    for (int i = 0; i < sz; ++i) res[i][i] = 1;
    return res;
}

matrix fastpower(matrix b, int p) {
    matrix res = identity(b.size());
    matrix v = b;
    while (p) {
        if (p & 1) res = mult(res, v);
        p >>= 1;
        v = mult(v, v);
    }
    return res;
}

int main() {
    //freopen("in.txt", "rt", stdin);
    int n, x, v;
    scanf("%d %d", &n, &x);
    vector<int> vec;
    for (int i = 0; i < n; ++i) {
        scanf("%d", &v);
        vec.push_back(v);
    }
    memo[0] = 1;
    for (int i = 1; i <= 100; ++i) {
        memo[i] = 1;
        for (auto x:vec) {
            if (x > i) continue;
            memo[i] = (memo[i] + memo[i - x]) % mod;
        }
    }

    if (x <= 100) {
        printf("%d", memo[x]);
        return 0;
    }
    x -= 100;
    matrix a(1, vector<int>(memo, memo + 102));
    a[0][101] = 1;
  //  puts("before");
   // for(auto x:a[0]) printf("%d ",x);
    matrix trans(102, vector<int>(102, 0));
    for (int j = 0; j < 100; j++) {
        trans[j + 1][j] = 1;
    }
    for (auto x:vec) {
        trans[100 - x+1][100]++;
    }
    trans[101][100] = trans[101][101] = 1;
    trans = fastpower(trans, x);
    a = mult(a, trans);
  //  puts("after");
   // for(auto x:a[0]) printf("%d ",x);
    printf("%d\n", a[0][100]);
}