#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
//#define int                 long long
#define ll              	long long
#define ld                  long double
#define rep(i,n)            for(int i=0;i<n;i++)
#define hell                998244353
#define inf                 (ll)1e15
#define vi                  vector<int>
#define vii                 vector< vi >
#define pb                  push_back
#define mp                  make_pair
#define fi                  first
#define se                  second
#define pii                 pair<int,int>
#define all(c)              c.begin(),c.end()
#define sz(c)               (int)c.size()
#define hash1               105727LL
#define hash2               hell
#define eps                 1e-10
#define pi                  3.141592653589793238462643383279502884197
typedef tree<int,null_type,less<int>,
				rb_tree_tag,tree_order_statistics_node_update> statisticsTree;
ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
ll power(ll x, ll y,ll p)
{
	ll res=1;
	x=x%p;
	while(y>0)
	{
		if(y&1)
			res=((res%p)*(x%p))%p;
		y=y>>1;
		x=((x%p)*(x%p))%p;
	}
	return res;
}
ll raichu(ll x,ll y)
{
	ll res=1;
	while(y>0)
	{
		if(y&1)
			res=((res)*(x));
		y=y>>1;
		x=((x)*(x));
	}
	return res;
}
bool isprime(ll n)
{
	if(n<2) return false;
	else if(n==2) return true;
	else if(n%2==0) return false;
	else
	{
		ll z=sqrt(n);
		rep(i,z-1) if(n%(i+2)==0) return false;
		return true;
	}
}
int32_t main()
{
	//freopen("B-large.in","r",stdin);
	//freopen("out4.txt","w",stdout);
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int tests=1,Tests;
	//cin>>tests;
	Tests=tests;
	while(tests--)
	{
		int n,k;
		cin>>n>>k;
		vi a(n);
		rep(i,n) cin>>a[i];
		sort(all(a));
		ll dp[n][k+1];
		memset(dp,0,sizeof dp);
		int X=(100000)/(k-1);
		ll ans=0;
		for(int x=0;x<=X;x++)
		{
			memset(dp,0,sizeof dp);
			rep(i,n) dp[i][1]=i+1;
			for(int j=2;j<=k;j++)
			{
				ll sum=0;
				for(int i=j-1;i<n;i++)
				{
					int idx=min(i-1,(int)(upper_bound(a.begin(),a.end(),a[i]-x)-a.begin()-1));
					if(idx>=0) dp[i][j]=dp[idx][j-1];
					sum+=dp[i][j];
					sum%=hell;
					dp[i][j]=sum;
					//cout<<i<<" "<<idx<<" "<<sum<<endl;
				}
			}
			if(x>0) ans+=dp[n-1][k];
			//cout<<dp[n-1][k]<<endl;
			ans%=hell;
		}
		cout<<ans;
	}
	return 0;
}