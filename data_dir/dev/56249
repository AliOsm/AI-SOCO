#include<stdio.h>
#include<iostream>
#include<string.h>
#include<string>
#include<ctype.h>
#include<math.h>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<bitset>
#include<algorithm>
#include<time.h>
using namespace std;
void fre() { freopen("c://test//input.in", "r", stdin); freopen("c://test//output.out", "w", stdout); }
#define MS(x, y) memset(x, y, sizeof(x))
#define MC(x, y) memcpy(x, y, sizeof(x))
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T1, class T2>inline void gmax(T1 &a, T2 b) { if (b > a)a = b; }
template <class T1, class T2>inline void gmin(T1 &a, T2 b) { if (b < a)a = b; }
const int N = 0, M = 0, inf = 0x3f3f3f3f;
int n, D;
const int G = 101;		//矩阵大小
const int Z = 1e9 + 7;	//模数
struct MX
{
	int v[G][G];
	void O() { MS(v, 0); }
	void E() { MS(v, 0); for (int i = 0; i < G; ++i)v[i][i] = 1; }
	void P()
	{
		for (int i = 0; i < G; ++i)
		{
			for (int j = 0; j < G; ++j)printf("%d ", v[i][j]); puts("");
		}
	}
	MX operator * (const MX &b) const
	{
		MX c; c.O();
		for (int i = 0; i < G; ++i)
		{
			for (int j = 0; j < G; ++j)
			{
				for (int k = 0; k < G; ++k)
				{
					c.v[i][j] = (c.v[i][j] + (LL)v[i][k] * b.v[k][j]) % Z;
				}
			}
		}
		return c;
	}
	MX operator + (const MX &b) const
	{
		MX c; c.O();
		for (int i = 0; i < G; ++i)
		{
			for (int j = 0; j < G; ++j)
			{
				c.v[i][j] = (v[i][j] + b.v[i][j]) % Z;
			}
		}
		return c;
	}
	MX operator ^ (LL p) const
	{
		MX y; y.E();
		MX x; memcpy(x.v, v, sizeof(v));
		while (p)
		{
			if (p & 1)y = y * x;
			x = x * x;
			p >>= 1;
		}
		return y;
	}
}a, b;
int cnt[101];
int main()
{
	while (~scanf("%d%d", &n, &D))
	{
		MS(cnt, 0);
		for (int i = 0; i < n; ++i)
		{
			int d; scanf("%d", &d);
			++cnt[d];
		}
		a.O();
		a.v[0][0] = 1;
		b.O();
		for (int i = 1; i < 100; ++i)b.v[i - 1][i] = 1;
		for (int i = 1; i <= 100; ++i)b.v[i - 1][0] = cnt[i];
		b.v[0][100] = b.v[100][100] = 1;
		a = a * (b ^ (D + 1));
		int ans = a.v[0][100];
		printf("%d\n", ans);
	}
	return 0;
}