#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC target("avx,avx2,fma")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pld pair<ll, ld>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("sumsqr.in");ofstream out("sumsqr.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

int a, num1=-1, num2=-1;
vec<vec<int>> l;
vec<int> p, dep;
deque<int> path;

void dfs(int v, int pr, int d){
    p[v] = pr;
    dep[v] = d;
    for(int h : l[v]){
        if(h==pr) continue;
        dfs(h, v, d+1);
    }
}

int dfs2(int v, int pr){
    if(v==num2){
        path.pb(v);
        return 1;
    }
    int fl = 0;
    for(int h : l[v]){
        if(h==pr) continue;
        if(dfs2(h, v)){
            path.pb(v);
            fl = 1;
        }
    }
    return fl;
}

int main() {
    fast;
    cin>>a;
    p = vec<int>(a);
    dep = vec<int>(a);
    l = vec<vec<int>>(a, vec<int>());
    for(int q=0; q<a-1; q++){
        int x,y; cin>>x>>y; x--, y--;
        l[x].pb(y);
        l[y].pb(x);
    }
    dfs(0, -1, 0);
    int mxd = -1, o=0;
    for(int q=0; q<a; q++){
        if(dep[q] > mxd){
            mxd = dep[q], num1 = q;
        }
    }
    dfs(num1, -1, 0);
    mxd = -1;
    for(int q=0; q<a; q++){
        if(dep[q] > mxd){
            mxd = dep[q], num2 = q;
        }
    }
    o = mxd;
    dfs2(num1, -1);

    vec<int> DST(a), US(a);
    int D=0, SZ=path.size(), CNT=0;
    for(int v : path) US[v] = 1;
    for(; path.size(); CNT++){
        if(CNT==SZ){
            SZ = path.size();
            CNT=0;
            D++;
        }
        int v = path[0]; path.pop_front();
        DST[v] = D;
        for(int h : l[v]){
            if(!US[h]){
                US[h] = 1;
                path.pb(h);
            }
        }
    }
    int MX = -1, num3 = -1;
    for(int q=0; q<a; q++){
        if(q==num1 || q==num2) continue;
        if(DST[q] > MX){
            MX = DST[q];
            num3 = q;
        }
    }
    o+=MX;
    cout<<o<<"\n"<<num1+1<<" "<<num2+1<<" "<<num3+1;
}