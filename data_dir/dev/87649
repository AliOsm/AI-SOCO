
#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
//using NAMspace __gnu_pbds;
//typedef tree<LL, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
#define LL                  long long
#define ull                 unsigned long long
#define scl(n)              scanf("%lld", &n)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)
#define scs(n)              scanf("%s", n)
#define pfi(n)              printf("%d\n",n)
#define pfl(n)              printf("%I64\n",n)
#define pfs(s)              printf("%s\n",s)
#define dist2D(x1,y1,x2,y2)         ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))
#define dist3D(x1,y1,z1,x2,y2,z2)   ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2))
#define print(x)            for(int i=0;i<x.size();i++) cout<<x[i]<<" ";
#define deb(x)              cout<<#x<<" "<<x<<endl

#define FASTREAD            ios_base::sync_with_stdio(0);cin.tie(nullptr);
#define MOD                 1000000007
#define MODP                99999999999973LL
#define pb                  push_back
#define mp                  make_pair
#define pp                  pair<LL,LL>
#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e18
#define EPS                 1e-8
#define Pi                  acos(-1)
//int Set(int mask,int pos){return mask=mask | (1<<pos);}
//int reset(int mask,int pos){return mask= mask & ~(1<<pos);}
//bool check(int mask,int pos){return (bool)(mask & (1<<pos));}
//LL bigmod(LL b, LL p, LL md){if(p==0) return 1;if(p%2==1){ return ((b%md)*bigmod(b,p-1,md))%md;} else {LL y=bigmod(b,p/2,md);return (y*y)%md;}}

#define N 1000006

LL tree[4*N],lazy[4*N];
LL a[N],ca[N],b[N],cb[N];
LL arr[N];

void init(int node, int b, int e)
{
    if(b==e)
    {
        tree[node]=arr[b];
        return;
    }
    int mid=(b+e)/2;
    init(2*node,b,mid);
    init(2*node+1,mid+1,e);
    tree[node]= max(tree[2*node],tree[2*node+1]);
}

void pushdown(int node, int b, int e)
{
    tree[node]+=lazy[node];
    if(b!=e)
    {
        lazy[2*node]+=lazy[node];
        lazy[2*node+1]+=lazy[node];
    }
    lazy[node]=0;
}

void update(int node, int b, int e, int l, int r, LL val)
{
    if(lazy[node]) pushdown(node,b,e);
    if(b>r || e<l) return ;
    if(b>=l && e<=r)
    {
        tree[node]+=val;
        if(b!=e)
        {
            lazy[2*node]+=val;
            lazy[2*node+1]+=val;
        }
        return;
    }
    int mid=(b+e)/2;
    update(2*node,b,mid,l,r,val);
    update(2*node+1,mid+1,e,l,r,val);
    tree[node]=max(tree[2*node],tree[2*node+1]);

}


LL query(int node, int b, int e, int l, int r)
{
    if(lazy[node]) pushdown(node,b,e);
    if(b>r || e<l) return -INF;
    if(b>=l && e<=r)
    {
        return tree[node];
    }
    LL mid=(b+e)/2;
    LL p=query(2*node,b,mid,l,r);
    LL q=query(2*node+1,mid+1,e,l,r);
    return max(p,q);
}

int main()
{
    FASTREAD;
    LL n,m,p;
    cin>>n>>m>>p;

    for(int i=1;i<=n;i++)
        cin>>a[i]>>ca[i];

    vector<LL>Min(N,INF);
    for(int i=1;i<=m;i++)
    {
        cin>>b[i]>>cb[i];
        Min[b[i]]=min(Min[b[i]],cb[i]);
    }
    vector<pair<LL,LL> >dcost,nd;
    for(int i=1;i<N;i++)
    {
        if(Min[i]!=INF)
        {
            dcost.pb(mp(i,Min[i]));
        }
    }

    for(int i=0;i<dcost.size();i++)
    {
        LL cost=dcost[i].second;
        while(nd.size() && nd.back().second>=cost)
        {
            nd.pop_back();
        }
        nd.pb(dcost[i]);
    }

    int last=1;
    for(int i=0;i<nd.size();i++)
    {
        LL x=nd[i].first;
        LL c=nd[i].second;
        for(int j=last;j<=x;j++)
        {
            arr[j]=-c;
        }
        last=x+1;
    }
    for(int i=last;i<N;i++)
        arr[i]=-INF;
    init(1,1,N-1);

    vector<pair<LL,LL> >aa;
    for(int i=1;i<=n;i++)
    {
        aa.pb(mp(a[i],ca[i]));
    }
    sort(aa.begin(),aa.end());

    vector<tuple<LL,LL,LL> >mon;
    for(int i=0;i<p;i++)
    {
        LL a,b,c;
        cin>>a>>b>>c;
        mon.pb(make_tuple(a,b,c));
    }
    sort(mon.begin(),mon.end());

    int id=0;
    LL ans=-INF;
    for(int i=0;i<aa.size();i++)
    {
        LL atk=aa[i].first;
        LL cost=aa[i].second;
        while(id<mon.size() && get<0>(mon[id])<atk)
        {
            LL ma=get<1>(mon[id]);
            LL val=get<2>(mon[id]);
            update(1,1,N-1,ma+1,N-1,val);
            id++;
        }
        LL tem=query(1,1,N-1,1,N-1);
        ans=max(ans,tem-cost);

    }
    cout<<ans<<endl;

   return 0;
}

// LL dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* LL dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* LL dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* LL dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction
