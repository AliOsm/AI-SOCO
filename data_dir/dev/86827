#include<bits/stdc++.h>
#define int long long
using namespace std;
typedef pair<double,double> PD;
const double _PI=acos(-1.0);
inline double cross(PD o,PD a,PD b){
	return (a.first-o.first)*(b.second-o.second)-(a.second-o.second)*(b.first-o.first);
}
inline double dot(PD o,PD a,PD b){
	return (a.first-o.first)*(b.first-o.first)+(a.second-o.second)*(b.second-o.second);
}
inline double getArea(PD o,PD a,PD b){
	return fabs(cross(o,a,b));
}
inline double getLen(PD o){
	return sqrt(o.first*o.first+o.second*o.second);
}
inline double getDistance(PD o,PD a,PD b){
	return getArea(o,a,b)/getLen(PD(a.first-b.first,a.second-b.second));
}
double x[100010],y[100010];
main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	double furthest=-(1LL<<62),closest=1LL<<62;
	int n;
	double px,py;
	cin>>n>>px>>py;
	for(int i=0;i<n;i++){
		cin>>x[i]>>y[i];
		furthest=max(furthest,getLen(PD(x[i]-px,y[i]-py)));
		closest=min(closest,getLen(PD(x[i]-px,y[i]-py)));
	}
	PD o=PD(px,py),a,b;
	for(int i=0;i<n;i++){
		a=PD(x[i],y[i]),b=PD(x[(i+1)%n],y[(i+1)%n]);
		if(dot(a,o,b)>0 && dot(b,o,a)>0) closest=min(closest,getDistance(o,a,b));
	}
	cout<<fixed<<setprecision(15)<<(furthest*furthest-closest*closest)*_PI<<'\n';
	return 0;
}