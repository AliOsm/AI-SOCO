#include <iostream>
#include <fstream>
#include <cstring>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <iomanip>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <unordered_map>
#include <set>
#include <iterator>
#include <ext/pb_ds/assoc_container.hpp>

#define x first
#define y second
#define mp make_pair
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define bit __builtin_popcount
#define all(x) x.begin(),x.end()
#define show(x) cout<<(#x)<<" is "<<(x)<<endl

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef pair<ll,ll> pll;
typedef pair<int,int> pii;
typedef pair<int,ll> pil;
typedef pair<ll,int> pli;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> indexed_set;

const ll INF=1e18+123;
const ld EPS=1e-9;
const int inf=1e9+123;
const int MOD=1e9+7;
const int N=2e5+123;
const int dx[]={0,0,1,-1};
const int dy[]={1,-1,0,0};

ll p[N],q[N];

multiset<ll>s;

unordered_map<ll,int>id;

vector<ll>v;

int t[N*9],n;

void upd(int pos,int v=1,int tl=1,int tr=n+n+1){
    if(tl==tr){
        t[v]++;
        return;
    }
    int tm=(tl+tr)/2;
    if(pos<=tm){
        upd(pos,v+v,tl,tm);
    }
    else upd(pos,v+v+1,tm+1,tr);
    t[v]=t[v+v]+t[v+v+1];
}

int get(int l,int r,int v=1,int tl=1,int tr=n+n+1){
    if(l>tr || tl>r||l>r){
        return 0;
    }
    if(l<=tl && tr<=r){
        return t[v];
    }
    int tm=(tl+tr)/2;
    return get(l,r,v+v,tl,tm)+get(l,r,v+v+1,tm+1,tr);
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ll t;
    cin>>n>>t;
    id.reserve(n<<1+1);
    id.max_load_factor(0.25);
    int x;
    ll ans=0;
    v.push_back(0);
    for(int i=1;i<=n;i++){
        cin>>x;
        p[i]=p[i-1]+x;
        v.push_back(p[i]-t+1);
        v.push_back(p[i]);
    }
    sort(all(v));
    for(int i=0;i<=n+n;i++){
        id[v[i]]=i+1;
    }
    upd(id[0]);
    for(int i=1;i<=n;i++){
        //cout<<id[p[i]]<<endl;
        ans+=get(id[p[i]-t+1],n+n+1);
        upd(id[p[i]]);
       // cout<<ans<<endl;
    }
    cout<<ans;
    return 0;
}
