#include <bits/stdc++.h>
#define fore(x,a,b) for(int x=a, qwert=b; x<qwert; x++)
#define ALL(a) (a).begin(), (a).end()
#define SZ(a) ((int)(a).size())
#define FIN ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define pb push_back
#define fst first
#define snd second
using namespace std;
typedef long long ll;

const int MAXN=5001;
typedef ll tf;const tf INFFLUJO=1e14;
typedef ll tc;const tc INFCOSTO=1e14;
struct edge {
	int u,v;tf cap,flow;tc cost;
	tf rem(){return cap-flow;}
};
int nodes; // remember to init nodes
vector<int> g[MAXN];
vector<edge> e;
void add_edge(int u, int v, tf cap, tc cost) {
	g[u].pb(e.size());e.pb((edge){u,v,cap,0,cost});
	g[v].pb(e.size());e.pb((edge){v,u,0,0,-cost});
}
tc dist[MAXN],mncost;
int pre[MAXN];
tf cap[MAXN],mxflow;
bool in_queue[MAXN];
void flow(int s, int t){
	memset(in_queue,0,sizeof(in_queue));
	mxflow=mncost=0;
	while(1){
		fill(dist,dist+nodes,INFCOSTO);dist[s]=0;
		memset(pre,-1,sizeof(pre));pre[s]=0;
		memset(cap,0,sizeof(cap));cap[s]=INFFLUJO;
		queue<int> q;q.push(s);in_queue[s]=1;
		while(q.size()){
			int u=q.front();q.pop();in_queue[u]=0;
			fore(_,0,g[u].size()){
				int i=g[u][_];
				edge &E=e[i];
				if(E.rem()&&dist[E.v]>dist[u]+E.cost+1e-9){
					dist[E.v]=dist[u]+E.cost;
					pre[E.v]=i;
					cap[E.v]=min(cap[u],E.rem());
					if(!in_queue[E.v])q.push(E.v),in_queue[E.v]=1;
				}
			}
		}
		if(pre[t]<0)break;
		mxflow+=cap[t];mncost+=cap[t]*dist[t];
		for(int v=t;v!=s;v=e[pre[v]].u){
			e[pre[v]].flow+=cap[t];e[pre[v]^1].flow-=cap[t];
		}
	}
}

const int N=101;
string t;
int n, mxa[N];
string words[N];

int main(){FIN;
	cin >> t >> n;
	fore(x,0,n)cin>>words[x]>>mxa[x];
	nodes=1;
	fore(x,0,n)add_edge(0,nodes,mxa[x],nodes),nodes++;
	fore(x,0,n){
		int cnt[26]={};
		fore(y,0,SZ(words[x]))cnt[words[x][y]-'a']++;
		fore(y,0,26)add_edge(x+1,n+y+1+26*x,cnt[y],0),nodes++;
	}
	int st_tw=nodes;
	nodes += SZ(t)+1;
	fore(x,0,SZ(t))add_edge(st_tw+x,nodes-1,1,0);
	fore(x,0,n)fore(y,0,SZ(t))add_edge(n+t[y]-'a'+1+26*x,st_tw+y,1,0);
	flow(0,nodes-1);
	
	if(mxflow!=SZ(t)){
		cout << "-1\n";
	}else cout << mncost << "\n";
}