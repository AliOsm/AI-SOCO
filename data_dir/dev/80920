/*
digu_J - Digvijay Janartha
NIT Hamirpur - INDIA
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#pragma GCC optimize("O3")

using namespace std;
using namespace __gnu_pbds;

template < typename T > using ordered_set = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;
template < typename T > using MinPriorityQueue = priority_queue < T, vector < T >, greater < T > >;

#ifndef ONLINE_JUDGE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template < typename Arg1 >
void __f(const char* name, Arg1&& arg1) {
    cout << name << " : " << arg1 << std :: endl;
}
template < typename Arg1, typename... Args >
void __f(const char* names, Arg1&& arg1, Args&&... args) {
    const char* comma = strchr(names + 1, ',');
    int len = comma - names;
    for (int i = 0; i < len; ++i) {
        cout << names[i];
    }
    cout <<  " : " << arg1 << " | ";
    __f(comma + 1, args...);
}
#else
#define trace(...)
#endif

typedef double db;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair < ll, ll > pll;
typedef pair < int, int > pii;
typedef vector < ll > vll;
typedef vector < int > vi;
typedef gp_hash_table < int, int > fast;

#define eb emplace_back
#define pb push_back
#define F first
#define S second
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define unique_sort(x) (sort(x.begin(), x.end()), x.resize(distance(x.begin(), unique(x.begin(), x.end()))))
#define fast_io() ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0)

const ll LINF = LLONG_MAX, base = 1e9, MOD = 1e9 + 7, N = 1e5 + 5, M = 1e3 + 5;
const int INF = INT_MAX;
const db PI = acos(-1), EPS = 1 / db(1e6);

mt19937_64 rang(chrono::high_resolution_clock::now().time_since_epoch().count());

int n, m, a[N], b[N], x[N], y[N], t[4 * N];
bool ok[4 * N];

void test();
int query(int v, int tl, int tr, int pos);
void update(int v, int tl, int tr, int l, int r, int val);
void push(int v);

int main() {
    fast_io();
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    cout << fixed << setprecision(15);
    test();
    #ifndef ONLINE_JUDGE
        cout << "Time: " << (int)(clock() * 1000. / CLOCKS_PER_SEC) << "ms";
    #endif
    return 0;
}

void test() {
    cin >> n >> m;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
    }
    for (int i = 1; i <= n; ++i) {
        cin >> b[i];
    }
    int k = 1;
    while (m--) {
        int ty;
        cin >> ty;
        int z;
        if (ty == 1) {
            cin >> x[k] >> y[k] >> z;
            update(1, 1, n, y[k], y[k] + z - 1, k);
        } else {
            cin >> z;
            int ans = query(1, 1, n, z);
            if (ans) {
                int del = x[ans] - y[ans];
                cout << a[z + del] << "\n";
            } else {
                cout << b[z] << "\n";
            }
        }
        ++k;
    }
}

void push(int v) {
    if (ok[v]) {
        int u = 2 * v;
        t[u] = t[u + 1] = t[v];
        ok[u] = ok[u + 1] = true;
        ok[v] = false;
    }
}

int query(int v, int tl, int tr, int pos) {
    if (tl == tr) {
        return t[v];
    }
    push(v);
    int tm = (tl + tr) / 2, u = 2 * v;
    if (pos > tm) {
        return query(u + 1, tm + 1, tr, pos);
    }
    return query(u, tl, tm, pos);
}

void update(int v, int tl, int tr, int l, int r, int val) {
    if (l > r) {
        return;
    }
    if (l <= tl and r >= tr) {
        t[v] = val, ok[v] = true;
    } else {
        push(v);
        int tm = (tl + tr) / 2, u = 2 * v;
        if (l <= tm) {
            update(u, tl, tm, l, r, val);
        }
        if (r > tm) {
            update(u + 1, tm + 1, tr, l, r, val);
        }
    }
}
