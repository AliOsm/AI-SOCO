#include <bits/stdc++.h>

using namespace std;

int n, totRev, depth[3001], rev[3001];
vector<pair<int, bool> > edge[3001];
bool vis[3001];

void rec(int current, int numEdge, int numRev) {
    vis[current] = true;
    int size = edge[current].size();
    for (int i = 0; i < size; ++i) {
        int newNode = edge[current][i].first;
        if (!vis[newNode]) {
            bool state = edge[current][i].second;
            depth[newNode] = numEdge + 1, rev[newNode] = numRev + state;
            totRev += state, rec(newNode, numEdge + 1, numRev + state);
        }
    }
}

int calc(int parent, int current) {
    memset(vis, false, sizeof(vis)), vis[parent] = true;
    int res = 1e9;
    totRev = 0, rec(current, 0, 0);
    for (int i = 1; i <= n; ++i)
        if (vis[i] && i != parent)
            res = min(res, totRev + depth[i] - (2 * rev[i]));
    return res;
}

int main() {
//#ifndef ONLINE_JUDGE
    //freopen("input.txt", "rt", stdin);
    //freopen( "output.txt" , "wt" , stdout );
//#endif
    int x, y, res1, res2;
    scanf("%d", &n);
    for (int i = 0; i < n - 1; ++i) {
        scanf("%d%d", &x, &y);
        edge[x].push_back(make_pair(y, 0)), edge[y].push_back(make_pair(x, 1));
    }
    int res = 1e9;
    if (n <= 2)
        res = 0;
    else {
        for (int i = 1; i <= n; ++i) {
            int size = edge[i].size();
            for (int j = 0; j < size; ++j) {
                if (!edge[i][j].second) {
                    int son = edge[i][j].first;
                    memset(depth, 0, sizeof(depth)), memset(rev, 0, sizeof(rev));
                    res1 = calc(i, son), res2 = calc(son, i);
                    res = min(res, res1 + res2);
                }
            }
        }
    }
    printf("%d\n", res);
    return 0;
}
