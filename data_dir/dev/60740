//Be Name Khoda
//no comment...
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, greater_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using mordered_multiset =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
const ll MOD = (int)1e9 + 7;
const ll MAXN = (ll)57;
const int infint = (int)1e9;
const ll inf = (ll)1e18;
ll c[MAXN], pwr[MAXN], tmp[MAXN][MAXN][MAXN], dp[MAXN][MAXN][MAXN];
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n, parity;
	cin >> n >> parity;
	for (int i = 1; i <= n; i++)
		cin >> c[i];
	pwr[0] = 1;
	for (int i = 1; i <= n; i++)
		pwr[i] = (pwr[i - 1] * 2) % MOD;
	dp[0][0][0] = 1;
	for (int i = 1; i <= n; i++)
	{
		for (int j = 0; j <= n; j++)
			for (int k = 0; k <= n; k++)
				for (int q = 0; q <= n; q++)
					tmp[j][k][q] = 0;
		
		for (int j = 0; j <= n; j++)
			for (int k = 0; k <= n; k++)
				for (int q = 0; q <= n; q++)
				{
					ll t = i - (j + k + q);
					if(c[i] == 1)
					{
						//white
						if(j)
							tmp[j][k][q] += (((dp[j - 1][k][q] * pwr[j - 1 + k + t]) % MOD) * ((q > 0) ? pwr[q - 1] : 1)) % MOD, tmp[j][k][q] %= MOD;
						if(k)
							tmp[j][k][q] += (((dp[j][k - 1][q] * pwr[j + k - 1 + t]) % MOD) * ((q > 0) ? pwr[q - 1] : 0)) % MOD, tmp[j][k][q] %= MOD;
					}
					else
					if(c[i] == 0)
					{
						//black
						if(q)
							tmp[j][k][q] += (((dp[j][k][q - 1] * pwr[t + q - 1 + k]) % MOD) * ((j > 0) ? pwr[j - 1] : 1)) % MOD, tmp[j][k][q] %= MOD;
						if(t)
							tmp[j][k][q] += (((dp[j][k][q] * pwr[t - 1 + q + k]) % MOD) * ((j > 0) ? pwr[j - 1] : 0)) % MOD, tmp[j][k][q] %= MOD;
					}
					else
					{
						//unknown
						if(q)
							tmp[j][k][q] += (((dp[j][k][q - 1] * pwr[t + q - 1 + k]) % MOD) * ((j > 0) ? pwr[j - 1] : 1)) % MOD, tmp[j][k][q] %= MOD;
						if(t)
							tmp[j][k][q] += (((dp[j][k][q] * pwr[t - 1 + q + k]) % MOD) * ((j > 0) ? pwr[j - 1] : 0)) % MOD, tmp[j][k][q] %= MOD;
						if(j)
							tmp[j][k][q] += (((dp[j - 1][k][q] * pwr[j - 1 + k + t]) % MOD) * ((q > 0) ? pwr[q - 1] : 1)) % MOD, tmp[j][k][q] %= MOD;
						if(k)
							tmp[j][k][q] += (((dp[j][k - 1][q] * pwr[j + k - 1 + t]) % MOD) * ((q > 0) ? pwr[q - 1] : 0)) % MOD, tmp[j][k][q] %= MOD;
					}
				}
		for (int j = 0; j <= n; j++)
			for (int k = 0; k <= n; k++)
				for (int q = 0; q <= n; q++)
					dp[j][k][q] = tmp[j][k][q];
	}
	ll ans = 0;
	for (int j = 0; j <= n; j++)
		for (int k = 0; k <= n; k++)
			for (int q = 0; q <= n; q++)
			{
				ll oddw = j, evenw = k, oddb = q, evenb = n - (j + k + q);
				if((oddw + oddb) % 2 == parity)
					ans = (ans + dp[j][k][q]) % MOD;
			}
	cout << ans;
}
