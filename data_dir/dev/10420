#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

typedef long long ll;
typedef unsigned long long ull;

void fastInOut();

const int OO = 1e9;
int n, m, sx, sy;
set<pair<int, int> > rng[2000];

void init() {
    for (int i = 0; i < n; ++i)
        rng[i].insert(make_pair(0, m - 1));
}

void minVal(int &dis, int &fx, int &fy, int nx, int ny) {
    int nDis = abs(sx - nx) + abs(sy - ny);
    if (nDis < dis || (dis == nDis && (nx < fx || (nx == fx && ny < fy))))
        dis = nDis, fx = nx, fy = ny;
}

void query(int &dis, int &fx, int &fy, int nx) {
    if (nx < 0 || nx >= n || rng[nx].empty())
        return;
    auto it = rng[nx].lower_bound(make_pair(sy, OO));
    if (it != rng[nx].end()) {
        if (sy >= it->first && sy <= it->second) {
            minVal(dis, fx, fy, nx, sy);
            return;
        }
        minVal(dis, fx, fy, nx, it->first);
    }
    if (it == rng[nx].begin())
        return;
    --it;
    if (sy >= it->first && sy <= it->second) {
        minVal(dis, fx, fy, nx, sy);
        return;
    }
    minVal(dis, fx, fy, nx, it->second);
}

void update(int fx, int fy) {
    auto it = rng[fx].lower_bound(make_pair(fy, OO));
    if (it == rng[fx].end() || it->first != fy)
        --it;
    if (it->first == it->second) {
        rng[fx].erase(it);
        return;
    }
    if (it->first <= fy - 1)
        rng[fx].insert(make_pair(it->first, fy - 1));
    if (fy + 1 <= it->second)
        rng[fx].insert(make_pair(fy + 1, it->second));
    rng[fx].erase(it);
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
#endif
    fastInOut();
    int k;
    cin >> n >> m >> k, init();
    for (int i = 0; i < k; ++i) {
        cin >> sx >> sy, --sx, --sy;
        int dis = OO, fx = 0, fy = 0;
        for (int d = 0; d <= dis; ++d) {
            query(dis, fx, fy, sx - d);
            query(dis, fx, fy, sx + d);
        }
        update(fx, fy);
        cout << fx + 1 << " " << fy + 1 << endl;
    }
    return 0;
}

void fastInOut() {
    ios_base::sync_with_stdio(0);
    cin.tie(NULL), cout.tie(NULL);
}
