#include "assert.h"
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

const int mod = 1000 * 1000 * 1000 + 7;

int add(int a, int b) {
	a += b;
	if (a >= mod) a -= mod;
	return a;
}

int mult(LL a, int b) {
	return a * b % mod;
}

void add_up(int &a, int b) { a = add(a, b); }
void mult_up(int &a, LL b) { a = mult(b, a); }

int pw(int x, LL n) {
	if (n == 0) return 1;
	int res = pw(x, n / 2);
	mult_up(res, res);
	if (n % 2) mult_up(res, x);
	return res;
}

int rev(int x) {
	return pw(x, mod - 2);
}

int main() {
	srand (time(NULL));
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(int, n);
	next(LL, m);
	
	vector<int> fact(n + 1, 1);
	FOR (i, 2, fact.size()) fact[i] = mult(fact[i - 1] , i);
	vector<int> fact_rev(n + 1, 1);
	FOR (i, 2, fact_rev.size()) fact_rev[i] = mult(fact_rev[i - 1] , rev(i));
	
	vector<vector<int>> c(n + 1, vector<int>(n + 1));
	FOR (k, 0, n + 1) c[n][k] = mult(fact[n] , mult(fact_rev[k] , fact_rev[n - k]));
	
	next(int, k);
	
	vector<int> options(k + 1);
	options[0] = 1;
	
	FORD (col, n, 1) {
		vector<int> opts2(k + 1);
		
		auto matchingCols = 1 + (m - col) /  n;
		FOR (putHere, 0, min(k, n) + 1) {
			int x = pw(c[n][putHere] , matchingCols);
			FOR (total, putHere, k + 1) {
				add_up(opts2[total] , mult(options[total - putHere] , x));
			}

		}
		swap(options, opts2);
	}
	cout << options[k];
}