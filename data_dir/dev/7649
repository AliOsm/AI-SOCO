#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             2e16
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>


#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())


#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);
const int N = 200005;
const LL lim = 1e18;
LL arrayid[N],ara[N],id = 1;
LL sum[N];
set<LL>G[N];
vector<LL>vec;
LL n,k;

int main()
{
    cin >> n >> k;
    for(LL i = 1;i <= n;i++)cin >> ara[i] ,sum[i] = sum[i-1] + ara[i];

    for(LL i = 1;i <= n;i++)if(ara[i] > 1)vec.push_back(i);

    for(LL i = 1;i <= n;i++){
        if(ara[i] > 1)id++;
        arrayid[i] = id;
        G[arrayid[i]].insert(sum[i]);
    }
    LL ans = 0;
    for(int i = 1;i <= n;i++){
        LL ret = ara[i];
        LL pos = i;
        LL I = arrayid[pos];
        if(ret % k == 0){
            LL res = ret/k;

            LL F = res + sum[i - 1];
            if(G[I].find(F) != G[I].end()){
                ans++;
            }
        }
        auto it = upper_bound(vec.begin(),vec.end(),pos);
        while(it!=vec.end()){
            pos = *it;
            LL I = arrayid[pos];
            if(ret * k > lim/ara[pos])break;
            ret = ret * ara[pos];

            if(ret % k == 0){
                LL res = ret/k;
                LL F = res + sum[i - 1];
//                cout << ret << " " << res << endl;
                 if(G[I].find(F) != G[I].end()){
//                    cout << "yap\n";
                    ans++;
                }
            }

            it = upper_bound(vec.begin(),vec.end(),pos);
        }
    }
    cout << ans << endl;



}
