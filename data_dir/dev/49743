#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
#define abdelrahman010 ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
typedef long long ll;
using namespace std;
const int N = 5e2 + 5;
int n , k , a[N] , b[N];
vector<pair<int , int>> g[N];
int main() {
    abdelrahman010
    cin >> n;
    for(int i = 0;i < n;i++)
        cin >> a[i];
    cin >> k;
    for(int i = 0;i < k;i++)
        cin >> b[i];
    int sum = 0 , p = 0;
    for(int i = 0;i < n;i++) {
        if(p == k || sum + a[i] > b[p])
            return cout << "NO" , 0;
        sum += a[i];
        g[p].push_back({a[i] , i});
        if(sum == b[p])
            p++ , sum = 0;
    }
    if(p < k)
        return cout << "NO" , 0;
    for(int i = 0;i < k;i++) {
        if(g[i].size() == 1)
            continue;
        bool yes = true;
        for(int j = 1;j < g[i].size();j++)
            yes &= (g[i][j].first == g[i][j - 1].first);
        if(yes)
            return cout << "NO" , 0;
    }
    cout << "YES\n";
    int acc = 0;
    for(int i = 0;i < k;i++) {
        if(g[i].size() == 1) {
            acc++;
            continue;
        }
        int cur = 0 , mx = 0;
        for(int j = 0;j < g[i].size();j++)
            mx = max(mx , g[i][j].first);
        bool f = true;
        for(int j = 0;j < g[i].size();j++)
            if(g[i][j].first == mx) {
                if(j && g[i][j - 1].first < g[i][j].first) {
                    cur = g[i][j].second;
                    break;
                } else if(j + 1 < g[i].size() &&  g[i][j + 1].first < g[i][j].first) {
                    cur = g[i][j].second;
                    f = false;
                    break;
                }
            }
        int L = cur - acc;
        int R = g[i].size() - L - 1;
        cur = cur - acc + i + 1;
        if(f) {
            while(L > 0)
                cout << cur-- << " L\n" , L--;
            while(R > 0)
                cout << cur << " R\n" , R--;
        } else {
            while(R > 0)
                cout << cur << " R\n" , R--;
            while(L > 0)
                cout << cur-- << " L\n" , L--;
        }
        acc += g[i].size();
    }
    return 0;
}