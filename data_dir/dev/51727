#include <iostream>
#include <map>
#include <vector>
#include <algorithm>
using namespace std;
int n;
int a[500];
string s[500];
vector <int> d[500];
bool f[500];
vector <int> c;
int res[500];
vector <int> b[500];
int id = 0;
void dfs(int u)
{
    f[u] = true;
    d[id].push_back(u);
    for (int i = 0; i<b[u].size(); i++)
    {
        int v = b[u][i];
        if (f[v] == false) dfs(v);
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin>>n;
    for (int i = 1; i<=n; i++) cin>>a[i];
    for (int i = 0; i<n; i++) cin>>s[i];

    for (int i = 1; i<=n; i++)
    for (int j = 1; j<=n; j++)
    if (s[i-1][j-1] == '1')
    {
      b[i].push_back(j);
      b[j].push_back(i);
    }

    for (int i = 1; i<=n; i++)
        if (f[i] == false)
          {
              id++;
              dfs(i);
          }

    for (int i = 1; i<=id; i++)
    {
     // sort id
     c.clear();
     for (int j = 0; j<d[i].size(); j++) c.push_back(d[i][j]);
     sort(c.begin(),c.end());
     for (int j = 0; j<d[i].size(); j++) d[i][j] = c[j];
     c.clear();
     for (int j = 0; j<d[i].size(); j++) c.push_back(a[d[i][j]]);
     sort(c.begin(),c.end());
     for (int j = 0; j<d[i].size(); j++) res[d[i][j]] = c[j];
    }
    for (int i = 1; i<=n; i++)
         cout<<res[i]<<" ";
    return 0;
}
