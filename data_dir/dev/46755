#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define all(x) x.begin(), x.end()
#define endl '\n'
#define _ ios_base::sync_with_stdio(false); cin.tie (NULL);

const double eps = 1e-9;
const int MOD = int(1e9) + 7;

template <typename T> inline T gcd(T a, T b) { while (a && b) a > b ? a %= b : b %= a; return a + b; }
inline bool Palindrome(const string& s) { return equal(s.begin(), s.end(), s.rbegin()); }

const int MAXN = 2e5 + 256;

ll n, m, t;
ll p[MAXN];

ll f(ll d) {
	ll cnt = 0;
	ll time = 0;
	ll cur = 0;
	ll e = m;
	
	for (int i = 0; i < n; ++i) {
		if (p[i] <= d) {
			if ((time += p[i]) > t) {
				return cnt;
			}
			++cnt;
			cur += p[i];
			e--;
			if (e == 0) {
				if ((time += cur) > t) return cnt;
				cur = 0;
				e = m;
			}
		}
	}
	return cnt;
}

inline void solve() {
	scanf("%lld%lld%lld", &n, &m, &t);

	vector <ll> v;
	
	for (int i = 0; i < n; ++i) {
		scanf("%lld", p + i);
		if (p[i] <= t)
			v.push_back(p[i]);
	}

	v.push_back(t);

	sort(all(v));
	v.resize(unique(all(v)) - v.begin());

	ll l = 0, r = v.size() - 1;

	while (r - l > 500) {
		ll m1 = l + (r - l) / 3;
		ll m2 = r - (r - l) / 3;
		if (f(v[m1]) < f(v[m2]))
			l = m1 - 1;
		else
			r = m2 + 1;
	}
	
	ll d = v[l];
	ll val = f(d);
	for (ll i = l + 1; i <= r; ++i) {
		ll q = f(v[i]);
		if (val < q) {
			d = v[i];
			val = q;
		}
	}
	printf("%lld %lld\n", val, d);          
}

int main () { // _
	int t;
	scanf("%d", &t);
	
	while (t--) {
		solve();
	}
	
	return 0;
}
