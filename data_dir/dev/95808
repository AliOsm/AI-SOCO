#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <queue>
#include <set>
#include <vector>
#include <algorithm>

using namespace std;

template<class T> T nextInt() {
    T x = 0, p = 1;
    char c;
    do {
        c = getchar();
    } while (c <= 32);
    if (c == '-') {
        p = -1;
        c = getchar();
    }
    while (c >= '0' && c <= '9') {
        x = x * 10 + c - '0';
        c = getchar();
    }
    return x * p;
}

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const int maxn = 7;

int n, l[maxn], r[maxn];
ld sum, all;

int len(int l, int r) {
    if (l > r) return 0;
    return r - l + 1;
}

int cnt_bit(int x) {
    int r = 0;
    while (x) r++, x &= x - 1;
    return r;
}

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    cin >> n;

    for (int i = 1; i <= n; i++)
        cin >> l[i] >> r[i];

    for (int i = 1; i <= n; i++) {
        for (int sc = l[i]; sc <= r[i]; sc++) {
            for (int j = 1; j <= n; j++) {
                if (j == i) continue;
                ld prod = 1;
                for (int k = 1; k <= n; k++) {
                    if (k == i) continue;
                    if (k == j) prod *= len(max(sc + 1, l[k]), r[k]);
                    else {
                        if (k < i) {
                            prod *= len(l[k], min(sc - 1, r[k]));
                        }
                        else {
                            prod *= len(l[k], min(sc, r[k]));
                        }
                    }
                }
                sum += prod * sc;
                all += prod;
            }
        }
    }

    for (int mask = 1; mask < (1 << n); mask++) {
        if (cnt_bit(mask) <= 1) continue;
        for (int sc = 1; sc <= 10000; sc++) {
            ld prod = 1;
            for (int i = 1; i <= n; i++) {
                if ((mask & (1 << (i - 1)))) {
                    prod *= len(max(l[i], sc), min(sc, r[i]));
                }
                else {
                    prod *= len(l[i], min(r[i], sc - 1));
                }
            }
            sum += prod * sc;
            all += prod;
        }
    }

    ld res = sum / all;

    printf("%.10f\n", (double)res);

    return 0;
}
