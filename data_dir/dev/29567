/* cerberus97 - Hanit Banga */

#include <iostream>
#include <iomanip>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include <algorithm>

using namespace std;

#define pb push_back
#define fast_cin() ios_base::sync_with_stdio(false); cin.tie(NULL)

typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

const int N = 30, A = 5e4 + 10, S = 7e5 + 10;

int a[2 * N];
vector<pii> at1[N], at2[N];

vector<int> get_masks(int* a, int n);

int main() {
	fast_cin();
	int n; cin >> n;
	n *= 2;
	for (int i = 1; i <= n; ++i) {
		cin >> a[i];
	}
	sort(a + 1, a + 1 + n);
	swap(a[2], a[n]);
	sort(a + 2, a + n);
	int half = (n - 2) / 2, tot = (1 << half);
	int sum = 0;
	for (int i = 2; i < n; ++i) {
		sum += a[i];
	}
	int target = sum / 2;
	vector<int> s1 = get_masks(&a[2], half);
	vector<int> s2 = get_masks(&a[half + 2], half);
	for (int i = 0; i < tot; ++i) {
		int sz = __builtin_popcount(i);
		at1[sz].pb({s1[i], i});
		at2[sz].pb({s2[i], i});
	}
	for (int sz = 0; sz <= half; ++sz) {
		sort(at1[sz].begin(), at1[sz].end());
		sort(at2[sz].begin(), at2[sz].end());
	}
	int best = -1, best_mask1 = 0, best_mask2 = 0;
	for (int sz1 = 0; sz1 <= half; ++sz1) {
		int sz2 = half - sz1;
		int c1 = at1[sz1].size(), c2 = at2[sz2].size();
		int p2 = c2 - 1;
		for (int p1 = 0; p1 < c1; ++p1) {
			while (p2 > 0 and at1[sz1][p1].first + at2[sz2][p2].first > target) {
				--p2;
			}
			int cand = at1[sz1][p1].first + at2[sz2][p2].first;
			if (cand <= target and cand > best) {
				best = cand;
				best_mask1 = at1[sz1][p1].second;
				best_mask2 = at2[sz2][p2].second;
			}
		}
	}
	// vector<int> ans = {a[1]};
	vector<int> a1, a2;
	a1.pb(a[1]);
	for (int i = 2; i <= half + 1; ++i) {
		if ((best_mask1 >> (i - 2)) & 1) {
			a1.pb(a[i]);
		} else {
			a2.pb(a[i]);
		}
	}
	for (int i = half + 2; i <= n - 1; ++i) {
		if ((best_mask2 >> (i - (half + 2))) & 1) {
			a1.pb(a[i]);
		} else {
			a2.pb(a[i]);
		}
	}
	reverse(a2.begin(), a2.end());
	a2.pb(a[n]);
	for (auto &i : a1) {
		cout << i << ' ';
	}
	cout << '\n';
	for (auto &i : a2) {
		cout << i << ' ';
	}
	cout << '\n';
}

vector<int> get_masks(int* a, int n) {
	int tot = (1 << n);
	vector<int> ans(tot, 0);
	ans[0] = 0;
	for (int i = 1; i < tot; ++i) {
		int b = __builtin_ctz(i);
		ans[i] = a[b] + ans[i ^ (1 << b)];
	}
	return ans;
}