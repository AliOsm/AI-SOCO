/*
ye mera template hai
apna khud likho bc :P
*/

/*
Author : Sarvagya Agarwal
*/

#include<bits/stdc++.h>
using namespace std;

//defines
#define openin freopen("input.txt","r",stdin)
#define openout freopen("output.txt","w",stdout)
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ll long long
#define int long long
#define mod 1000000007
#define rep(i,a,n) for(__typeof(n) i=a;i<=n;++i)
#define all(c) (c).begin(),(c).end()
#define ff first
#define ss second
#define pb push_back
#define mp make_pair

//templates
template <typename T>T expo(T e, T n){T x=1,p=e;while(n){if(n&1)x=x*p;p=p*p;n>>=1;}return x;}
template <typename T>T power(T e, T n, T m){T x=1,p=e;while(n){if(n&1)x=(x*p)%m;p=(p*p)%m;n>>=1;}return x;}
template <typename T> T InverseEuler(T a, T m){return (a==1? 1 : power(a, m-2, m));}
template <typename T> T gcd(T a, T b){while(a%=b^=a^=b^=a); return b;}
template <typename T> T lcm(T a, T b){return (a*(b/gcd(a,b)));}


//debug
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
		cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
		const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

// DOBARA OVERFLOW KI GALTI HUI TO TU CHUTIYA HAI BC
// update : TU CHUTIYA HAI BC
int n,m;
#define inf 100000000
string arr[1500];
struct node
{
    int x,y,r;
};
map<char,char>M;
queue<node>Q;
int dis[1002][1002][6];
bool seen[1002][1002][5];
void pre()
{
    M['+'] = '+';
    M['-'] = '|' ;
    M['|'] = '-' ;
    M['^'] = '>' ;
    M['>'] = 'v' ;
    M['v'] = '<' ;
    M['<'] = '^' ;
    M['L'] = 'U' ;
    M['R'] = 'D' ;
    M['D'] = 'L' ;
    M['U'] = 'R' ;
    M['*'] = '*' ;
    return ;
}
bool is_up(char c)
{
    return c=='+'|| c=='|' || c=='^' || c=='L' ||c=='R' ||c=='D';
}
bool is_down(char c)
{
    return c=='+'|| c=='|' || c=='v' || c=='L' || c=='R' || c=='U';
}
bool is_left(char c)
{
    return c=='+'|| c=='-' || c=='<' || c=='U' || c=='R' || c=='D';
}
bool is_right(char c)
{
    return c=='+'|| c=='-' || c=='>' || c=='L' || c=='U' || c=='D';
}
int32_t main()
{
    fast;
    cin>>n>>m;
    rep(i,0,n-1)cin>>arr[i];
    int sx,sy,ex,ey;
    cin>>sx>>sy>>ex>>ey;
    sx--;ex--;ey--;sy--;
    rep(i,0,n-1)rep(j,0,m-1)rep(k,0,3)dis[i][j][k]=inf;
    pre();
    dis[sx][sy][0] = 0;
    node temp;
    temp.x=sx;temp.y=sy;
    temp.r = 0;
    Q.push(temp);
    while(!Q.empty())
    {
        node top = Q.front();
        Q.pop();
        //trace(top.x,top.y,top.r);
        if(seen[top.x][top.y][top.r])continue;
        char c = arr[top.x][top.y];
        rep(i,1,top.r)c=M[c];
        // up
        if(top.x>0)
        {
            char d = arr[top.x-1][top.y];
            rep(i,1,top.r)d=M[d];
            if(is_down(d) && is_up(c))
            {
                //edge
                dis[top.x-1][top.y][top.r] = min(dis[top.x-1][top.y][top.r],dis[top.x][top.y][top.r] + 1);
                Q.push({top.x-1,top.y,top.r});
            }
        }
        //down
        if(top.x<n-1)
        {
            char d = arr[top.x+1][top.y];
            rep(i,1,top.r)d=M[d];
            if(is_up(d) and is_down(c))
            {
                dis[top.x+1][top.y][top.r] = min(dis[top.x+1][top.y][top.r],dis[top.x][top.y][top.r] + 1);
                Q.push({top.x+1,top.y,top.r});
            }
        }
        //left
        if(top.y>0)
        {
            char d = arr[top.x][top.y-1];
            rep(i,1,top.r)d=M[d];
            if(is_left(c)and is_right(d))
            {
                dis[top.x][top.y-1][top.r] = min(dis[top.x][top.y-1][top.r],dis[top.x][top.y][top.r] + 1);
                Q.push({top.x,top.y-1,top.r});
            }
        }
        // right
        if(top.y<m-1)
        {
            char d = arr[top.x][top.y+1];
            rep(i,1,top.r)d=M[d];
            if(is_left(d)and is_right(c))
            {
                dis[top.x][top.y+1][top.r] = min(dis[top.x][top.y+1][top.r],dis[top.x][top.y][top.r] + 1);
                Q.push({top.x,top.y+1,top.r});
            }
        }
        dis[top.x][top.y][(top.r+1)%4] = min(dis[top.x][top.y][(top.r+1)%4],dis[top.x][top.y][top.r] + 1);
        Q.push({top.x,top.y,(top.r+1)%4});
        seen[top.x][top.y][top.r] = true;
    }
    int ans = inf;
    rep(i,0,3)ans=min(ans,dis[ex][ey][i]);
    if(ans>=inf)ans=-1;
    cout << ans ;
    return 0;
}
