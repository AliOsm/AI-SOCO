#include<bits/stdc++.h>
#define int         int64_t
#define pb          push_back
#define endl        '\n'
#define pll         pair<int,int>
#define vll          vector<int>
#define all(a)      (a).begin(),(a).end()
#define x           first
#define y           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mi        map<int,int>
#define gcd(a,b)    __gcd((a),(b))
#define lcm(a,b)    ((a)*(b)) / gcd((a),(b))
#define ios     ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
using namespace std;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); 
int n,i,j,k,l,sum=0,flag=0,t,a[200005],ans[200005];
vector<pair<int,int>> query;
vll v;
set<int> s;
void solve(){
    cin>>n;
    for(int i=1;i<=n;i++){
        cin>>a[i];
        s.insert(a[i]);
    }
    int prev = -1;
    for(auto i:s){
        if(prev!=-1){
            v.pb({i-prev});
        }
        prev = i;
    }
    sort(all(v));
    v.pb(2e18);
    int q;
    cin>>q;
    for(int i=0;i<q;i++){
        int j , k;
        cin>>j>>k;
        query.pb({k-j+1,i});
    }
    //for(auto i:v) cout<<i<<" -- ";cout<<endl;
    sort(all(query));
    int cur_len = 1, cur_ans=0,x=0;
    for(auto i:query){
        int len = i.first;
        int index = i.second;
        while(x<v.size() && v[x]<len){
            cur_ans+=v[x];
            x++;
        }
        ans[index] = cur_ans + (v.size()-x)*len;
    }
    for(int i=0;i<q;i++){
        cout<<ans[i]<<" ";
    }


}
signed main()
{
    ios
    int test=1;
    //cin>>test;
    while(test--){
        solve();
    }
    return 0;
}