//~In The Name Of Allah~//
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <iomanip>
#include <math.h>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <string.h>
#include <sstream>
#include <fstream>
#include <functional>
#include <stack>
#include <utility> 
#include <set>
#include <list>
#include <queue>
#include <bitset>
#include <time.h>

using namespace std;

#define read freopen("in.txt", "r", stdin)
#define write freopen("out.txt", "w", stdout)
#define all(_) _.begin(), _.end()
#define rall(_) _.rbegin(), _.rend()
#define rep(i, j) for (int i = 0; i < j; i++)
#define Rep(i, j, k) for (int i = j; i < k; i++)
#define siz(_) (int)_.size()
#define ll long long
#define endl '\n'

const double PI = 2.0 * acos(0.0);
const int MOD = 1e9 + 7;
const int oo = MOD;

typedef pair<int, int> pii;

ll gcd(ll x, ll y) { return !y ? x : gcd(y, x%y); }

const int mx = 2e5 + 6;
ll cst[mx], val[mx], dp[mx], ans;
vector<int> adj[mx];
bool vis[mx];

void bld(int nod) {
	vis[nod] = 1;
	val[nod] = cst[nod];
	rep(i, siz(adj[nod])) if (!vis[adj[nod][i]]) {
		bld(adj[nod][i]);
		val[nod] += val[adj[nod][i]];
		dp[nod] = max(dp[nod], dp[adj[nod][i]]);
	}
	dp[nod] = max(dp[nod], val[nod]);
}

void dfs(int nod, int p) {
	vis[nod] = 1;
	rep(i, siz(adj[nod])) if (!vis[adj[nod][i]])
		dfs(adj[nod][i], nod);
	ll x, y;
	x = y = -1e18;
	rep(i, siz(adj[nod])) if (adj[nod][i] != p) {
		if (x < dp[adj[nod][i]])
			y = x, x = dp[adj[nod][i]];
		else if (y < dp[adj[nod][i]])
			y = dp[adj[nod][i]];
	}
	if (x != -1e18 && y != -1e18)
		ans = max(ans, x + y);
}

int main() {
	int n;
	cin >> n;
	rep(i, n) {
		scanf("%lld", &cst[i + 1]);
		dp[i + 1] = -1e18;
	}
	int u, v;
	rep(i, n - 1) {
		scanf("%d%d", &u, &v);
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	bld(1);
	memset(vis, 0, sizeof vis), ans = -1e18;
	dfs(1, -1);
	if (ans == -1e18)
		puts("Impossible");
	else
		cout << ans << endl;
	return 0;
}