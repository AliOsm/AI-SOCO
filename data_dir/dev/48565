#include <stdio.h>
#include <bits/stdc++.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)

using namespace std;

const int N = 50000;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const double eps = 1e-9;
const double pi = atan2(0, -1);
const int ABC = 26;

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    int n, m, k;
    cin >> n >> m >> k;
    bool bad[n]; fill(bad, bad + n, false);
    rep(i, 0, k)
    {
        int x;
        cin >> x;
        bad[x - 1] = true;
    }
    if (k == n || m > n * (n - 1) / 2 - 1 - (k - 2))
    {
        cout << -1 << "\n";
        return 0;
    }
    set<pair<int, int> > ans;
    int good = -1;
    rep(i, 0, n)
        if (!bad[i])
        {
            good = i;
            break;
        }
    vector<int> order;
    rep(i, 0, n)
        if (bad[i])
        {
            order.push_back(i);
            bad[i] = false;
            break;
        }
    order.push_back(good);
    rep(i, 0, n)
        if (bad[i])
        {
            order.push_back(i);
            bad[i] = false;
            break;
        }
    rep(i, 0, n)
        if (i != order[0] && i != order[1] && i != order[2])
            order.push_back(i);
    rep(i, 0, sz(order) - 1)
        ans.insert({min(order[i], order[i + 1]), max(order[i], order[i + 1])});
    rep(i, 0, n)
        rep(j, i + 1, n)
        {
            if (i == order[0] && j == order[2] || i == order[2] && j == order[0])
                continue;
            if (bad[i] && j == order[0] || bad[j] && i == order[0])
                continue;
            if (ans.find({i, j}) != ans.end())
                continue;
            if (sz(ans) == m)
                continue;
            ans.insert({i, j});
        }
    bad[order[0]] = true; bad[order[2]] = true;
    int d[n][n];
    rep(i, 0, n)
        rep(j, 0, n)
            d[i][j] = (i == j ? 0 : inf);
    for (auto it : ans)
        d[it.fi][it.se] = d[it.se][it.fi] = 1;
    rep(i, 0, n)
        if (bad[i] && d[i][order[0]] == 1 && d[i][order[2]] == 1)
        {
            while (true) {}
        }
    rep(k, 0, n)
    {
        if (!bad[k])
            continue;
        rep(i, 0, n)
            rep(j, 0, n)
                d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
    }
    assert(d[order[0]][order[2]] != 2);
    for (auto it : ans)
        cout << it.fi + 1 << " " << it.se + 1 << "\n";
    return 0;
}
