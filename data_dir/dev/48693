#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define forq(i , a , b) for (int i = (a); i <= (b); ++i)
#define forr(i , b) forq( i , 0 , b - 1 )
#define F first
#define S second
#define IF -> F
#define IS -> S
#define qqmemset(array , val) memset (array , val , sizeof(array))
#define ALLV(vect) vect.begin() , vect.end()
#define mid (st + en) / 2
#define lef 2 * Node
#define rig lef + 1
#define Parent Node + (Node & (~Node + 1))
#define Neig Node - (Node & (~Node + 1))

ll R = 7 + 1e9 , NUMTESTCASE ;
const int NN = 10 + 400 ;
const double pi = acos(-1.0) ;
int di [4] = {1 , 0 , -1 , 0} , dj [4] = {0 , 1 , 0 , -1} , DI [8] = {1 , 1 , 0 , -1 , -1 , -1 , 0 , 1} , DJ [8] = {0 , 1 , 1 , 1 , 0 , -1 , -1 , -1} ;
using namespace std;
int n , m , Flag , Find [NN][NN] , Dis [NN] ;
vector <int> G [NN][2] ;
int main()
{
    cin >> n >> m ;
    int u , v ;
    forq (i , 1 , m)  {
        scanf("%d%d" , &u , &v) ;
        Flag |= (min(u , v) == 1 && max(u , v) == n) ;
        G [u][0].pb(v) ;
        G [v][0].pb(u) ;
        Find [u][v] = Find [v][u] = 1 ;
    }
    forq (u , 1 , n)
        forq (v , 1 , n)
            if (u ^ v)
                if (!Find [u][v])
                    G [u][1].pb(v) ;
    queue <int> Bfs ;
    qqmemset(Dis , -1) ;
    Dis [1] = 0 ;
    Bfs.push(1) ;
    while (Bfs.size()) {
        u = Bfs.front() ; Bfs.pop() ;
        for (int Ver : G [u][Flag])
            if (Dis [Ver] == -1) {
                Dis [Ver] = Dis [u] + 1 ;
                Bfs.push(Ver) ;
            }
    }
    cout << Dis [n] ;
    return 0;
}
