#include <bits/stdc++.h>
#define NDEBUG
using namespace std;
using LL = long long;
using ULL = unsigned long long;
using VI = vector<int>;
using VL = vector<LL>;
using PII = pair<int, int>;
using PLL = pair<LL, LL>;

#define SZ(a) (int)a.size()
#define ALL(a) a.begin(), a.end()
#define MP make_pair
#define PB push_back
#define EB emplace_back
#define f first
#define s second
#define FOR(i, a, b) for (int i = (a); i<(b); ++i)
#define RFOR(i, b, a) for (int i = (b)-1; i>=(a); --i)
#define FILL(a, b) memset(a, b, sizeof(a))

void dout() { cerr << endl; }

template <typename Head, typename... Tail>
void dout(Head H, Tail... T) {
    cerr << H << ' ';
    dout(T...);
}

int dp[2007][2007];

int to_int(const string &s)
{
	int n = 0;
	for (int i = 0; i < SZ(s); ++i)
	{
		if (s[i] == '1')
		{
			n |= 1 << i;
		}
	}
	return n;
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int n, k;
    cin >> n >> k;
    vector<string> a(n);
    VI b(n);
    for (int i = 0; i < n; ++i)
    {
    	cin >> a[i];
    	b[i] = to_int(a[i]);
    }
    vector<string> digits = {"1110111", "0010010", "1011101", "1011011", "0111010", "1101011", "1101111", "1010010", "1111111", "1111011"};
    VI nums(10);
    for (int i = 0; i < SZ(digits); ++i)
    {
    	nums[i] = to_int(digits[i]);
    }
    dp[n][0] = 1;
    for (int i = n - 1; i >= 0; --i)
    {
    	for (int j = 0; j <= k; ++j)
    	{
    		for (int dig = 0; dig < 10; ++dig)
    		{
    			if ((b[i] & nums[dig]) != b[i])
    			{
    				continue;
    			}
    			int kol = __builtin_popcount(nums[dig]) - __builtin_popcount(b[i]);
    			if (j >= kol)
    			{
    				dp[i][j] |= dp[i + 1][j - kol];
    			}
    		}
       	}
    }

    // for (int i = 0; i < n + 1; ++i)
    // {
    // 	for (int j = 0; j < k + 1; ++j)
    // 	{
    // 		cout << dp[i][j];
    // 	}
    // 	cout << "\n";
    // }

    if (dp[0][k] == 0)
    {
    	cout << "-1\n";
    	return 0;
    }

    int kol = k;
    string ans;
    for (int i = 0; i < n; ++i)
    {
    	for (int dig = 9; dig >= 0; --dig)
    	{
    		if ((nums[dig] & b[i]) != b[i])
    		{
    			continue;
    		}
    		int c = __builtin_popcount(nums[dig]) - __builtin_popcount(b[i]);
    		if (kol >= c && dp[i + 1][kol - c])
    		{
    			kol -= c;
    			ans += dig + '0';
    			break;
    		}
    	}
    }

    cout << ans << "\n";

	return 0;
}