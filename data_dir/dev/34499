#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

const long double eps = 1e-9;

#define MOD 1000000007
#define MAX 200005

typedef complex<double> point;
const double EPS = 1e-9;

int ar[] = { 1, -1, 0, 0, 1, 1, -1, -1 };
int ac[] = { 0, 0, 1, -1, 1, -1, 1, -1 };

string s;
int n;

int nxt(int x) {
    return (x + 1) % 26;
}
int prv(int x) {
    return (x - 1 + 26) % 26;
}

int dp[MAX][26];

int solve(int i, int last) {
    if(i >= n)
        return 0;

    int &ret = dp[i][last];
    if(ret + 1)
        return ret;

    int sol1 = 1e9, sol2 = 1e9;

    if(s[i] - 'a' == last) {
        sol1 = 1 + solve(i + 1, nxt(s[i] - 'a'));
        sol2 = 1 + solve(i + 1, prv(s[i] - 'a'));
    }
    else {
        sol1 = 1 + solve(i + 1, nxt(s[i] - 'a'));
        sol2 = solve(i + 1, s[i] - 'a');
    }

    return ret = min(sol1, sol2);
}

string res;

void road(int i, int last) {
    if(i >= n)
        return;

    int sol1 = 1e9, sol2 = 1e9;

    if(s[i] - 'a' == last) {
        sol1 = 1 + solve(i + 1, nxt(s[i] - 'a'));
        sol2 = 1 + solve(i + 1, prv(s[i] - 'a'));

        if(sol1 < sol2) {
            res.push_back(nxt(s[i] - 'a') + 'a');
            road(i + 1, nxt(s[i] - 'a'));
        }
        else {
            res.push_back(prv(s[i] - 'a') + 'a');
            road(i + 1, prv(s[i] - 'a'));
        }
    }
    else {
        sol1 = 1 + solve(i + 1, nxt(s[i] - 'a'));
        sol2 = solve(i + 1, s[i] - 'a');

        if(sol1 < sol2) {
            res.push_back(nxt(s[i] - 'a') + 'a');
            road(i + 1, nxt(s[i] - 'a'));
        }
        else {
            res.push_back(s[i]);
            road(i + 1, s[i] - 'a');
        }
    }

}

int main() {
#ifdef Adel_SaadEddin_PC
    freopen("input.txt", "r", stdin);
        // freopen("output.out", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);

    memset(dp, -1, sizeof(dp));

    cin >> s;
    n = s.size();

    res.push_back(s[0]);
    road(1, s[0] - 'a');

    cout << res << "\n";

    return 0;
}


