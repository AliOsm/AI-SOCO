/*
ID: hamed_51
PROG: ?
LANG: C++
*/

#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#if (_win32 || __win32__)
#define LLD "%i64d"
#else
#define LLD "%lld"
#endif

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cerr << #x << " = " << x << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-8
#define endl "\n"

vector<int> list_divs(int n) {
	vector<int> list(1, 1);
	for (int i = 2; i*i <= n; i++) if (n%i == 0) {
		int cnt = 0;
		while (n%i == 0) n /= i, cnt++;
		int pow = 1, sz = Size(list);
		FOR(k, 0, cnt) {
			pow *= i;
			FOR(j, 0, sz) list.pb(pow*list[j]);
		}
	}
	if (n != 1) {
		int sz = Size(list);
		FOR(i, 0, sz) list.pb(list[i]*n);
	}
	return list;
}

#define MAXN 100100

int n, a[MAXN], cnt[MAXN];

int main() {
	ios::sync_with_stdio(false);
	cin >> n;
	FOR(i, 0, n) cin >> a[i];
	vector<int> V = list_divs(n);
	FOR(i, 0, Size(V)) if (n/V[i] >= 3) {
		memset(cnt, 0, 4*V[i]);
		FOR(j, 0, n) cnt[j%V[i]] += a[j];
		int lim = n / V[i];
		FOR(j, 0, V[i]) if (cnt[j] == lim) {
			cout << "YES" << endl;
			return 0;
		}
	}
	cout << "NO" << endl;
	return 0;
}

