#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

typedef vector<ll> vl;
typedef vector<vector<ll>> vll;

const ll MOD = 1e9+7;
string s;

ll facts[500001];
vl obef, caf;
ll n;

inline ll mypow (ll a, ll n) {
    //cerr << "mypow got " << a << ' ' << n << endl;
    if (n == 0)
        return 1;
    if (n % 2 == 1)
        return ((mypow(a, n-1)%MOD) * a) % MOD;
    else {
        int b = (mypow(a, n/2)) % MOD;
        return ((b%MOD) * (b%MOD)) % MOD;
    }
}
ll rev(ll n) {
    ll rv =  mypow(n, MOD-2);
    //cerr << "REV RETURNS: " << rv << endl;
    return rv;
}

ll calc(ll n, ll k) {
    if (k > n || n < 0 || k < 0)
        return 0;
    //cerr << "rev of " << facts[k] << " is " << rev(facts[k]) << endl;
    return (((facts[n]*rev(facts[k])) % MOD)*rev(facts[n-k])) % MOD;
}

int main() {
    ios::sync_with_stdio(false); cin.tie(NULL);
    cin >> s;
    n = s.size();

    obef.resize(n);
    caf.resize(n);
    facts[0] = facts[1] = 1;

    for (int i = 2; i <= 500000; i++)
        facts[i] = (facts[i-1]*i)%MOD;

    for (int i = 1; i < n; i++) {
        obef[i] = obef[i-1]+ (s[i-1]=='(');
    }
    for (int i = n-2; i >= 0; i--) {
        caf[i] = caf[i+1]+ (s[i+1]==')');
    }
    ll result = 0;
    for (int i = 0; i < n; i++) {
        if (s[i] == '(') {
            ll n = obef[i];
            ll m = caf[i];
            ll k = m-1;
            ll calced = calc(n+m, k);
            //cerr << "POSITION : " << i << endl;
            //cerr << "n: " << n << ", m: " << m << ", k" << k << ", result: " << calced << endl;
            result = (result + calced) % MOD;
        }
    }
    cout << result << endl;
}