#include <bits/stdc++.h>

#define FI(i,a,b) for(int i=(a);i<=(b);i++)
#define FD(i,a,b) for(int i=(a);i>=(b);i--)

#define LL long long
#define Ldouble long double
#define PI 3.1415926535897932384626

#define PII pair<int,int>
#define PLL pair<LL,LL>
#define fi first
#define se second

using namespace std;

#define mod 1000000007

int n, m, k, has_edge[1000005], cnt;
int f2[1000005];

int ps[1000005];

int main(){
	f2[0] = 1;
	FI(i, 1, 1000000) f2[i] = f2[i - 1] * 2 % mod;
	
	scanf("%d %d %d", &n, &m, &k);
	FI(i, 1, m){
		int a, b;
		scanf("%d %d", &a, &b);
		if(b - a == 1) continue;
		if(b - a != k + 1){
			printf("0\n");
			return 0;
		}
		has_edge[a] = true;
		cnt++;
	}
	if(cnt == 0){
		int ans = 1;
		FI(i, 1, n){
			if(i + (k + 1) <= n){
				if(i + k + (k + 1) <= n) ans = (ans + f2[k]) % mod;
				else ans = (ans + f2[n - (i + (k + 1))]) % mod;
			}
		}
		printf("%d\n", ans);
	}
	else{
		int l = n + 1, r = 0;
		FI(i, 1, n) if(has_edge[i]){
			l = min(l, i);
			r = i;
		}
		if(r - l >= k + 1) printf("0\n");
		else{
			int poss = 0, ans;
			FI(i, l + 1, l + k) if(i + (k + 1) <= n && !has_edge[i]) poss++;
			ans = f2[poss];
			//now, what about other left points?
			FD(i, l - 1, 1) if(r - i <= k){
				int relax = i + (k + 1);
				if(relax + (k + 1) <= n && !has_edge[relax]) poss--;
				if(!has_edge[i + 1]) poss++;
				ans = (ans + f2[poss]) % mod;
			}
			printf("%d\n", ans);
		}
	}
	return 0;
}