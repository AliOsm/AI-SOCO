//              +-- -- --++-- +-In the name of ALLAH-+ --++-- -- --+              \\

#include <bits/stdc++.h>

using namespace std;

#define y1 qrkjsld

int const N = 1e5+10;
int n, x[N], y[N], a[10], per[10];
vector <int> xs, ys, vec[N<<2];

void add (int idx, int val, int v = 1, int s = 0, int e = n){
  	vec[v].push_back(val);
	if (s+1 == e) return ;
	int mid = (s+e)>>1, lc = v<<1, rc = lc|1;
	if (idx < mid) add(idx, val, lc, s, mid);
	else add(idx, val, rc, mid, e);
}

void sort_all (int v = 1, int s = 0, int e = n){
 	sort(vec[v].begin(), vec[v].end());
	if (s+1 == e) return ;
	int mid = (s+e)>>1, lc = v<<1, rc = lc|1;
	sort_all(lc, s, mid), sort_all(rc, mid, e);
}

int get (int l, int r, bool b, int val, int v = 1, int s = 0, int e = n){
	if (s >= r || e <= l) return 0;
	if (s >= l && e <= r){
		int id = upper_bound(vec[v].begin(), vec[v].end(), val) - vec[v].begin();
		if (!b) return id;
		return (int)vec[v].size() - id;
	}
	int mid = (s+e)>>1, lc = v<<1, rc = lc|1;
	return get(l, r, b, val, lc, s, mid) + get(l, r, b, val, rc, mid, e);
}

int main(){
	ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i ++) cin >> x[i] >> y[i], xs.push_back(x[i]), ys.push_back(y[i]);
	sort(xs.begin(), xs.end()), sort(ys.begin(), ys.end());
	for (int i = 0; i < n; i ++){
		x[i] = lower_bound(xs.begin(), xs.end(), x[i]) - xs.begin();
		y[i] = lower_bound(ys.begin(), ys.end(), y[i]) - ys.begin();
		add(x[i], ys[y[i]]);
	}
	sort_all();

	for (int i = 0; i < 9; i ++) cin >> a[i];
	for (int i = 0; i < 9; i ++) per[i] = i;

	do {
	  	int sm1 = a[per[0]] + a[per[1]] + a[per[2]], sm2 = sm1 + a[per[3]] + a[per[4]] + a[per[5]];
		int sm3 = a[per[0]] + a[per[3]] + a[per[6]], sm4 = sm3 + a[per[1]] + a[per[4]] + a[per[7]];
		int x1 = xs[sm1-1], x2 = xs[sm2-1];
		int y1 = ys[sm3-1], y2 = ys[sm4-1];

		if (x1 == xs[sm1]) continue;
		if (x2 == xs[sm2]) continue;
		if (y1 == ys[sm3]) continue;
		if (y2 == ys[sm4]) continue;
	
		if (get(0, sm1, 0, y1) != a[per[0]])   continue;
		if (get(0, sm1, 1, y2) != a[per[2]])   continue;
		if (get(sm1, sm2, 0, y1) != a[per[3]]) continue;
		if (get(sm1, sm2, 1, y2) != a[per[5]]) continue;
	
		cout << fixed << x1+0.5 << ' ' << x2+0.5 << ' ' << y1+0.5 << ' ' << y2+0.5 << '\n';
		return 0;
	} while(next_permutation(per, per+9));
	cout << "-1\n";
}
