#include <bits/stdc++.h>

using namespace std;

#define mem(a,b) memset(a,b,sizeof(a))
#define FOR(i,j,k) for(i=j;i<=k;i++)
#define REV(i,j,k) for(i=j;i>=k;i--)
#define inf         freopen("in.txt", "r", stdin)
#define outf        freopen("out.txt", "w", stdout)
#define pf          printf
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define sfff(a,b,c)    scanf("%d %d %d", &a, &b, &c)
#define minn          (long long)-1000000000000000000
#define maxx          (long long) 1000000000000000000
#define mod          1000000009
#define LL           long long
#define NL '\n'
#define MAX 100005
#define cnd tree[idx]
#define lnd (2*idx)
#define rnd ((2*idx)+1)
typedef pair<int,int> pr;

/*dir array
//8 moves
int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};
int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};
//4 moves
int fx[]={+1,-1,+0,+0};
int fy[]={+0,+0,+1,-1};
#define valid(nx,ny)  ((nx >= 0) && (nx < row) && (ny >= 0) && (ny < col))
*/


set<int>::iterator ii;

struct node
{
    LL v, pa, l;
}dfa[200010];

vector<int> mat[200010];
int col, cnt[200010], ar[200010];
set<int> ms;

void dfs( int p )
{
        dfa[p].v = 1;
        ms.insert( ar[p] );
        cnt[ar[p]]++;

        for( int i=0; i<mat[p].size(); i++ )
        {
            int x = mat[p][i];
            if( dfa[x].v == 0 )
                dfs(x);
        }

}




int main()
{
    ios::sync_with_stdio(false);

    //inf;
    //outf;

    int i, j, x, y, n, m, c = 0, k, a;

    cin >> n >> m >> k;

    for( i=1; i<=n; i++ )
        cin >> ar[i];

    for( i=0; i<m; i++ )
    {
        cin >> x >> y;

        mat[x].push_back( y );
        mat[y].push_back( x );
    }

    for( i=1; i<=n; i++ )
    {
        if( dfa[i].v == 0 ) dfs( i );
        y = x = 0;
        while( !ms.empty() )
        {
            ii = ms.begin();
            a = *ii;
            x += cnt[a];
            y = max( y, cnt[a] );
            cnt[a] = 0;
            ms.erase( ms.begin() );
        }
        x -= y;
        c += x;
    }
    cout << c << endl;




    return 0;

}
