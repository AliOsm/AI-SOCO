//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp> 
#include <bits/stdc++.h>
#include <unistd.h>
using namespace std ;
//using namespace __gnu_pbds;

void operator += ( vector < int > &in1 , const vector < int > &in2 ) 
{
  for ( int i = 0 ; i < in2 . size ( ) ; i ++ )
    in1 . push_back ( in2 [ i ] ) ;
}  

#define y2 sdfklgjsdkfd
#define y1 sdfklgjsdkafd
#define X first 
#define Y second
//#define int long long 
typedef long long ll ;
typedef long double ld ;
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define ALL(x) (x).begin(),(x).end()
typedef pair < int , int > pii ; 
typedef pair < int , pii > pi_ii ;
typedef pair < pii , int > pii_i ;
typedef pair < pii , pii > pii_ii ;
#define ordered_set(TYPE) tree<TYPE, null_type, less<TYPE>, rb_tree_tag, tree_order_statistics_node_update>
//#define "%I64d" "%I64d"
const int maxn =  1e5 +30 ;
const int maxL = 22 ;
const ll inf = 1e16 ;
const int mod = 1e9+9 ;
const int baze = 333 ;
int n , ar [ maxn ] , t [ 400 ] [ maxn ] ; 
vector < int > vc [ maxn ] ; 

pii find ( int pos )  
{ 
  int tmp = 0 ; 
  for ( int i = 0 ; i < 1000 ; i ++ )
    if ( tmp + vc [ i ] . size ( ) > pos )
      return  pii ( i , pos - tmp ) ; 
    else 
      tmp += vc [ i ] . size ( ) ;
///assert ( 0 );
  //return pii(-1,-1) ;
  exit ( 0 ) ;
}

int get ( int l , int r , int k ) 
{
  pii st = find ( l ) , en = find ( r ) ; 
  int ret = 0 ;

  if ( st . X == en . X )
    {
      for ( int i = st . Y ; i <= en . Y ; i ++ ) 
	if ( vc [ st . X ] [ i ] == k ) 
	  ret ++ ;
      return ret ;
    }
  for ( int i = st . Y ; i < vc [ st . X ] . size ( ) ; i ++ )
    if ( vc [ st . X ] [ i ] == k ) 
      ret ++ ; 
for ( int i = 0 ; i <= en . Y ; i ++ )
    if ( vc [ en . X ] [ i ] == k ) 
      ret ++ ;
  for ( int i = st . X + 1 ; i < en . X ; i ++ )
    ret += t [ i ] [ k ] ;
  return ret ;
}


void relax ( ) 
{ 
  int pos = -1 ; 
  vector < int > hlp ; 
  for ( int i = 0 ; ; i ++ ) 
    if ( vc [ i ] . size ( ) == 0 ) 
      break ; 
    else
      for ( int j = 0 ; j < vc [ i ] . size ( ) ; j ++ )
	t [ i ] [ vc [ i ] [ j ] ] = 0 ; 
  for ( int i = 0 ; ; i ++ ) 
    if ( vc [ i ] . size ( ) == 0 )
      break ; 
    else
      hlp += vc [ i ] , vc [ i ] . clear ( ) ;
  for ( int i = 0 ; i < n ; i ++ ) 
    { 
      if ( i % baze == 0 ) 
	pos ++ ;
      vc [ pos ] . push_back ( hlp [ i ] ) ; 
      t [ pos ] [ hlp [ i ] ] ++ ;
    }
}

void print ( ) 
{
  cout << endl << "***********************************" << endl ;
  for ( int i = 0 ; ; i ++ )
    if ( vc [ i ] . size ( ) == 0 ) 
      break ; 
    else 
      { 
	for ( int j = 0 ; j < vc [ i ] . size ( ) ; j ++) 
	  cout << vc [ i ] [ j ] << ' ' ; 
	cout << endl ;
      } 
  cout << endl ; 
  for ( int i = 0 ; i  <n  ; i ++  )
    cout << find ( i ) . X << ' ' << find ( i ) . Y << endl ; 
  cout << endl << "***********************************" << endl ;
} 


main ( ) 
{ 
  fast ;
  cin >> n ; 
  int a ;
  for ( int i = 0 ; i < n ; i ++ ) 
    cin >> a , vc[0].push_back ( a ) ;
  int q , lastans = 0 , l , r , k= 0 , type ; 
  cin >> q; 
  relax ( ) ;
  while ( q -- ) 
    {
      //      cout << endl ;
      cin >> type >> l >> r ;
      if ( type == 2 ) 
	cin >> k ;
      else if ( l == r ) 
	continue ;
      l = ((l+lastans-1)%n);
      r = ((r + lastans - 1 ) % n );
      k = ((k+lastans-1)%n)+1;
      if ( l > r ) 
	swap ( l , r ) ; 
      if ( q % baze == 0 ) 
	relax ( ) ; 
      if ( type - 1 ) 
	lastans = get ( l , r , k ) , cout << lastans<<endl ;
      else 
	{ 
	  pii hlp = find ( r ) ;
	  if (!( hlp . X < maxn && hlp . Y < vc [ hlp . X ] . size ( ) )) 
	    exit ( 0 ) ;
	  int tmp = vc [ hlp . X ] [ hlp . Y ] ; 
	  if ( tmp < 0 || tmp > n )
	    exit ( 0 ) ;
	    t [ hlp . X ] [ tmp ] -- ;
	  vc [ hlp . X ] . erase ( vc [ hlp . X ] . begin ( ) + hlp . Y ) ; 
	  hlp = find ( l ) ; 
	  if (!( hlp . X < maxn && hlp . Y < vc [ hlp . X ] . size ( ) )) 
	    exit ( 0 ) ;
	  vc [ hlp . X ] . insert ( vc [ hlp . X ] . begin ( ) + hlp . Y , tmp ) ; 
	  t [ hlp . X ][ tmp ] ++ ; 
	} 
    }  
} 
 
