#include <cstdio>
#include <cstring>
#include <cmath>
#include <ctime>
#include <algorithm>
using namespace std;
typedef long long LL;
#define INF 0x3f3f3f3f
#define eps 1e-8

int n, a, f[10][2010], g[10], h[10], l[10], d[10][1010];

int check(int x) {
	int mx = -1;
	for (int k = 0; k < (1<<8); k++) {
		for (int i = 0; i < 8; i++) {
			h[i] = i+1;
			if (k&(1<<i)) l[i+1] = x-1;
			else l[i+1] = x;
		}
		int cnt = 0;
		for (int i = 1; i <= 8; i++)
			cnt += l[i];
		if (cnt <= mx) continue;
		do {
			int now = 0;
			for (int i = 0; i < 8 && now != INF; i++) {
				int t = h[i];
				if (l[t] > 0)
					now = f[t][d[t][now]+l[t]-1];
			}
			if (now != INF) {
				mx = cnt;
				break;
			}
		} while (next_permutation(h, h+8));
	}
	return mx;
}

int Sol() {
	int l = 1, r = INF, mid, ans = 0;
	for (int i = 1; i <= 8; i++)
		r = min(r, g[i]+1);
	while (l <= r) {
		mid = (l+r) >> 1;
		int x = check(mid);
		ans = max(ans, x);
		if (x != -1) l = mid + 1;
		else r = mid - 1;
	}
	return ans;
}

int main() {
	memset(f, INF, sizeof(f));
	memset(g, 0, sizeof(g));
	scanf("%d", &n);
	for (int i = 1; i <= n; i++) {
		scanf("%d", &a);
		f[a][g[a]++] = i;
	}
	for (int i = 1; i <= 8; i++) {
		int cur = 0;
		for (int j = 0; j <= n; j++) {
			if (j >= f[i][cur]) cur++;
			d[i][j] = cur;
		}
	}
	printf("%d\n", Sol());
	return 0;
}
