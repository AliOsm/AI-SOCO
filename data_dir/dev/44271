#ifdef DEBUG
#define _GLIBCXX_DEBUG
#endif

#include <bits/stdc++.h>

using namespace std;

mt19937 mrand(random_device{} ()); 

int rnd(int x) {
  return mrand() % x;
}

typedef long double ld;
typedef long long ll;

#ifdef DEBUG
#define eprintf(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#else
#define eprintf(...) ;
#endif

#define pb push_back
#define mp make_pair
#define sz(x) ((int) (x).size())
#define TASK "text"

const int inf = (int) 1.01e9;
const ld eps = 1e-9;
const ld pi = acos((ld) -1.0);

void precalc() {
}

const int maxn = 16;
int n;

int cs[maxn][2];
int type[maxn];

int read() {
  if (scanf("%d", &n) < 1) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    char ch;
    scanf(" %c%d%d", &ch, cs[i], cs[i] + 1);
    type[i] = (ch == 'B');
  }
  return 1;
}

int dp[maxn * maxn / 2][1 << maxn];

void solve() {
  for (int i = 0; i <= n * (n - 1) / 2; ++i) {
    for (int mask = 0; mask < (1 << n); ++mask) {
      dp[i][mask] = inf;
    }
  }
  dp[0][0] = 0;
  for (int mask = 1; mask < (1 << n); ++mask) {
    int yet[2] = {0, 0};
    int cntb = 0;
    for (int i = 0; i < n; ++i) {
      if ((mask >> i) & 1) {
        yet[type[i]] += 1;
        ++cntb;
      }
    }
    for (int i = 0; i <= n * (n - 1) / 2; ++i) {
      int &cur = dp[i][mask];
      for (int j = 0; j < n; ++j) {
        if ((mask >> j) & 1) {
          yet[type[j]] -= 1;
          int u[2];
          for (int it = 0; it < 2; ++it) {
            u[it] = max(0, cs[j][it] - yet[it]) - (cs[j][it] - (cntb - 1));
          }
          if (i >= u[0]) {
            cur = min(cur, dp[i - u[0]][mask ^ (1 << j)] + u[1]);
          }
          yet[type[j]] += 1;
        }
      }
    }
  }
  int alr[2] = {0, 0};
  for (int i = 0; i < n; ++i) {
    alr[0] += cs[i][0];
    alr[1] += cs[i][1];
  }
  alr[0] -= n * (n - 1) / 2;
  alr[1] -= n * (n - 1) / 2;

  int res = inf;
  for (int i = 0; i <= n * (n - 1) / 2; ++i) {
    res = min(res, max(alr[0] + i, alr[1] + dp[i][(1 << n) - 1]));
  }
  res += n;
  printf("%d\n", res);
}

int main() {
  precalc();
#ifdef LOCAL
  freopen(TASK ".out", "w", stdout);
  assert(freopen(TASK ".in", "r", stdin));
#endif

  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("Time %.2f\n", (double) clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
