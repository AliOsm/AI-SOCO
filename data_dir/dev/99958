
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <ctime>
#include <random>
#include <iomanip>

#include <algorithm>
#include <vector>
#include <queue>
#include <string>
#include <stack>
#include <set>
#include <map>
#include <numeric>
#include <functional>
#include <deque>
#include <array>
#include <iterator>
#include <bitset>
#include <initializer_list>

using namespace std;

#include <ext/rope>

using namespace __gnu_cxx;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;

#define int long long

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VPI;

//tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> tr;

#define add push_back
#define rem pop_back
#define ALL(x) x.begin(), x.end()
#define SORT(x) sort(ALL(x))
#define SZ(x) int((x).size())
#define F first
#define S second
#define DEBUG(x) cout << #x << " " << x << endl;


const double EPS = 1e-9;
const double PI = acos(-1.);
const int MOD = 998244353;
const int MAXN = 500001;
int INF = __INT64_MAX__;
int MAX = -1e18;
int MIN = 1e18;
string YN[] = {"NO", "YES"};


#define REPI(it, x) for(__typeof((x).begin()) it = (x).begin(); it != (x).end(); it++)
#define REP(i, a, b)  for(int i = a; i <  b; i++)
#define REPN(i, a, b) for(int i = a; i <= b; i++)
#define REPV(i, b, a) for(int i = b; i >= a; i--)


#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))


int px[] = { 1, 1, -1, -1 };
int py[] = { -1, 1, -1, 1};
int dx[] = { 1, 0, -1, 0, 1, 1, -1, -1 };
int dy[] = { 0, 1, 0, -1, 1, -1, 1, -1 };
int fx[] = {-2, -2, -1, -1,  1,  1,  2,  2};
int fy[] = {-1,  1, -2,  2, -2,  2, -1,  1};


template<typename T1, typename T2> T2 max(T1 a, T2 b) { T2 max = a > b ? a : b; return max; }
template<typename T1, typename T2> T2 min(T1 a, T2 b) { T2 min = a < b ? a : b; return min; }


int POW (int a, int n, int m = MOD)
{
        int res = 1;
        while (n) {
                if (n & 1)
                        res = (res * a) % m;
                a = (a * a) % m;
                n >>= 1;
        }
        return res;
}


vector<int> vc, ans;

string s, t;

set<int> st;

map<int, int> mp;

static const int N = 1 << 20;
static const int M = 123456;

static int n, m, k, result, cnt;
static int A[N], B[N], C[N], id;

string a, b;

int func(int id)
{
        int q = 0, s = 0;
        for(int i = id; i <= n; i++){
                if(s + A[i] > k){
                        s = 0;
                        q++;
                }
                s += A[i];
        }
        if(s > 0) q++;
        return q <= m;
}
void solution()
{
        cin >> n >> m >> k;
        REPN(i, 1, n){
                cin >> A[i];
        }
        int l = 1, r = n;
        while(l < r){
                int m = (l + r) >> 1;
                if(func(m)){
                        r = m;
                }else{
                        l = m + 1;
                }
        }

        cout << n - r+ 1;
}


__INT16_C() main(__int32 argc, char * argv[])
{

        //freopen("input.txt", "r", stdin);
        //freopen("output.txt", "w", stdout);

        ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
        //cout.precision(15);

        int query = 1;
        //cin >> query;

        while(query--) solution();

}
