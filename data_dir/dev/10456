/* 
chirag11032000
Chirag Thakur
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

template < typename T > using ordered_set = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;
template < typename T > using min_priority_queue = priority_queue < T, vector < T >, greater < T > >;

typedef long long ll;
typedef double db;
typedef pair < ll, ll > pll;

#ifndef ONLINE_JUDGE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template < typename Arg1 >
void __f(const char* name, Arg1&& arg1) {
	cerr << name << " : " << arg1 << std :: endl;
}
template < typename Arg1, typename... Args >
void __f(const char* names, Arg1&& arg1, Args&&... args) {
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << " | ";
	__f(comma + 1, args...);
}
#else
#define trace(...)
#endif

#define pb push_back
#define mp make_pair
#define mt make_tuple
#define fast_io() ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0)

const db PI = acos(-1);
const ll MOD = 1e9 + 7, INF = LLONG_MAX;
const ll N = 1e2 + 10;

struct star {
	ll x, y, s;
};

ll ans[11][N][N], bit[11][N][N];

void test_case();
void build();
void add(ll t, ll r, ll c, ll val);
ll get_sum(ll t, ll r, ll c);

int main() {
	fast_io();
	test_case();
	cerr << "Time taken: " << int((clock() * 1000.) / CLOCKS_PER_SEC) << "ms\n";
	return 0;
}

void test_case() {
	ll n, q, c;
	cin >> n >> q >> c;
	vector < star > v(n);
	for (auto &i : v) {
		cin >> i.x >> i.y >> i.s;
	}
	for (ll t = 0; t <= c; ++t) {
		for (auto &i : v) {
			ans[t][i.x][i.y] += (i.s + t) % (c + 1);
		}
	}
	build();
	while (q--) {
		ll t, x1, y1, x2, y2;
		cin >> t >> x1 >> y1 >> x2 >> y2;
		t %= c + 1;
		cout << get_sum(t, x2, y2) - get_sum(t, x2, y1 - 1) - get_sum(t, x1 - 1, y2) + get_sum(t, x1 - 1, y1 - 1) << "\n";
	}
}

void build() {
	for (ll t = 0; t < 11; ++t) {
		for (ll i = 0; i < N; ++i) {
			for (ll j = 0; j < N; ++j) {
				add(t, i, j, ans[t][i][j]);
			}
		}
	}
}

void add(ll t, ll r, ll c, ll val) {
	for (ll i = r; i < N; i |= i + 1) {
		for (ll j = c; j < N; j |= j + 1) {
			bit[t][i][j] += ans[t][r][c];
		}
	}
}

ll get_sum(ll t, ll r, ll c) {
	ll res = 0;
	for (ll i = r; i >= 0; i = (i & (i + 1)) - 1) {
		for (ll j = c; j >= 0; j = (j & (j + 1)) - 1) {
			res += bit[t][i][j];
		}
	}
	return res;
}