#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<functional>
#include<set>
#include<map>
#include<list>
#include<iomanip>
#include<cmath>
#include<queue>
#include<stack>
#include<complex>
#include<sstream>
#include<fstream>
#include<numeric>
#include<utility>
#include<stdio.h>
#include<assert.h>
#include<memory.h>
#include<bitset>
using namespace std;

#define Files

#define rdi(i)          scanf("%d", &i)
#define rdii(i, j)      scanf("%d%d", &i, &j)
#define rep(i, v)       for(int i=0;i<v.size();++i)
#define lp(i, n)        for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)    for(int i=(j);i<(int)(n);++i)
#define all(v)          ((v).begin()), ((v).end())
#define clr(v, d)       memset(v, d, sizeof(v))
#define lpd(i, j, n)    for(int i=(j);i>=(int)(n);--i)

typedef long long         ll;
typedef unsigned long long   ull;
const ll OO = 1e8;
const ll OOL = 1e16;
const ll MOD = 1e9 + 7;
const double EPS = 1e-9;

#define pb                  push_back
#define MP                  make_pair
typedef long double       ld;
typedef vector<int>       vi;
typedef vector<double>    vd;
typedef pair<int, int>    pii;
typedef pair<ll, ll>      pll;
typedef vector<pair<int, int> > vii;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;
typedef vector<ll>        vl;
typedef vector<vector<ll> >     vvl;
typedef vector<pair<ll, ll> >   vll;

ull gcd(ull a, ull b) { return (b == 0 ? a : gcd(b, a % b)); }
ull lcm(ull a, ull b) { return (a * (b / gcd(a, b))); }
ull power(ull a, ull b){ if (b == 0) return 1; ull ans = power(a, b / 2); ans = (ans * ans) % MOD; if (b & 1) ans = (ans * a) % MOD; return ans; }

int n, least, k;
int vis[201][410][210];
double memo[201][410][210];
double prob[201];
int prize[201];
double dp(int i, int place, int won){
	if (i == n) return (place >= 0 && won >= least);

	double &ret = memo[i][place + 205][won];
	if (vis[i][place][won]) return ret;
	vis[i][place][won] = 1;

	ret = 0;
	ret += prob[i] * dp(i + 1, min(n, place + prize[i]), won + 1); //win
	ret += (1 - prob[i]) * dp(i + 1, place, won); // lose
	return ret;
}

int main() {
#ifdef Filesx
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
#endif
	ios::sync_with_stdio(0);

	cin >> n >> least >> k;
	lp(i, n){
		int a; cin >> a;
		prob[i] = a / 100.0;
	}
	lp(i, n) cin >> prize[i];
	cout << fixed << setprecision(12) << dp(0, k, 0) << endl;

	return 0;
}