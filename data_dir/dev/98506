#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
typedef unsigned        un;
typedef long long       ll;
#define all(A)          A.begin(),A.end()
#define rall(A)         A.rbegin(),A.rend()
#define SP              setprecision
#define mem(A,B)        memset(A,B,sizeof A)
#define sorta(A)        sort(all(A))
#define sortd(A)        sort(rall(A))
#define sortf(A,F)      sort(all(A),F)
#define Get(mask,bit)   mask&(1LL<<bit)
#define Set(mask,bit)   mask|(1LL<<bit)
#define Reset(mask,bit) mask&(~(1LL<<bit))
#define Flib(mask,bit)  mask^(1LL<<bit)
#define LowOn(mask,bit) mask&-mask
#define PI              acos(0.0) * 2
#define exp             2.71828182845904523536028747135266249775724709369995
#define eps             -1000000000
#define oo              1000000000
template <class T> inline void remax(T& A, T B){ if (A < B)A = B; }
template <class T> inline void remin(T& A, T B){ if (A > B)A = B; }
string ToString(ll num){ string ret; do{ ret += ((num % 10) + '0'); num /= 10; } while (num); reverse(all(ret)); return ret; }
ll ToNumber(string s){ ll r = 0, p = 1; for (int i = s.size() - 1; i >= 0; --i)r += (s[i] - '0') * p, p *= 10; return r; }
ll Gcd(ll a, ll b){ while (a %= b ^= a ^= b ^= a);  return b; }
ll Power(ll base, ll power){ ll ret = 1; while (power){ if (power & 1)ret *= base; power >>= 1; base *= base; } return ret; }
ll PowerMod(ll base, ll power, ll mod){ if (!power)return 1; if (power & 1)return (base * PowerMod(base, power - 1, mod)) % mod; return PowerMod((base * base) % mod, power >> 1, mod); }
int Log(ll num, ll base){ int ret = 0; while (num){ ++ret; num /= base; } return ret; }
int Count(ll mask){ int ret = 0; while (mask){ if (mask & 1)++ret; mask >>= 1; } return ret; }


pair <int, int> arr[100];
bool adj[100][100];
bool vis[100];
int n;
int target;
bool dfs(int x){
    if (x == target)return true;
    vis[x] = true;
    for (int i = 0; i < n; ++i)
    if (!vis[i] && adj[x][i])
    if (dfs(i))return true;
    return false;
}
inline void run(){
    int m;
    scanf("%d", &m);
    while (m--){
        int a, b, c;
        scanf("%d%d%d", &a, &b, &c);
        if (a == 1){
            arr[n] = { b, c };
            for (int i = 0; i < n; ++i){
                if (arr[i].first > b && arr[i].first < c)adj[i][n] = 1;
                else if (arr[i].second > b && arr[i].second < c)adj[i][n] = 1;
                if (b > arr[i].first && b < arr[i].second)adj[n][i] = 1;
                else if (c > arr[i].first && c < arr[i].second)adj[n][i] = 1;
            }
            ++n;
        }
        else{
            target = --c;
            mem(vis, false);
            if (dfs(--b))puts("YES");
            else puts("NO");
        }
    }
}
int main(){
    //freopen("","r", stdin);
    //freopen("","w", stdout);
    run();
    return 0;
}