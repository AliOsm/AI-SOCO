#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define rep(i, a, b) for(int i=(a); i<(b); i++)
#define repi(i, a, b) for(int i=(a); i>(b); i--)
#define db(x) (cerr << #x << ": " << (x) << '\n')
#define sync ios_base::sync_with_stdio(false), cin.tie(NULL)
#define tests(t) int t; cin >> t; while(t--)
#define iceil(n, x) (((n) + (x) - 1) / (x))
#define ll long long
#define gcd __gcd
#define pb push_back
#define pf push_front
#define pob pop_back
#define pof pop_front
#define sz size()
#define all(v) (v).begin(), (v).end()
#define uni(v) sort(all(v)); (v).erase(unique(all(v)), (v).end());
#define pii pair<int, int>
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vi>
#define fi first
#define se second
#define umap unordered_map
#define uset unordered_set
#define pqueue priority_queue
#define si(a) scanf("%d", &a)
#define sll(a) scanf("%lld", &a)
#define bitcount(x) __builtin_popcount(x)
#define cps CLOCKS_PER_SEC
#define PI acos(-1.0)
#define EPS 1e-9
#define mod 1000000007
#define MOD 1000000007
#define N 55
using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

template<typename T>
using minpq = priority_queue<T, vector<T>, greater<T>>;

template<typename T>
using maxpq = priority_queue<T>;

//All indexing is 0-based
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update> ordered_set;
//methods: find_by_order(k); & order_of_key(k);
//To make it an ordered_multiset, use pairs of (value, time_of_insertion)
//to distinguish values which are similar.

template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;
//ordered_map<int, int> my_map;

//Returns no. of values x for which ceil(n / x) == y (y must be > 1).
inline ll CC(ll n, ll y) { return iceil(n, y-1) - iceil(n, y); }

//Returns no. of values x for which floor(n / x) == y
inline ll FF(ll n, ll y) { return n / y - n / (y+1); }

//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c;}
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c;}
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p;}

char grid[N][N];
int dx[4] = {0, 0, 1, -1};
int dy[4] = {1, -1, 0, 0};
int n, m;
int num[N][N];

//A valid vertex that can be visited
bool isValid(int i, int j) {
    return i >= 0 && j >= 0 && i < n && j < m && grid[i][j] == '#';
}

/* Logic used: A vertex is a cut vertex / Articulation point if in the dfs traversal:
    (1) It is the root vertex having more than one child (in the dfs tree). OR
    (2) It is not a root vertex and for some child of this vertex there does not
        exist any cycle that also involves one of its ancestor vertices.
*/

#define N 2505
//Time complexity: O(V + E)
int nn;
vector<int> adj[N];
int tin[N], fup[N];
bool vis[N];
int timer = 0;

bool AP[N]; //AP[i]: is i an Articulation Point ?


void dfs(int i, int p = -1) {
    //trace(i);
    int children = 0;
    vis[i] = 1;
    tin[i] = fup[i] = timer++;
    for(int j : adj[i]) {
        if(j != p) {
            if(vis[j]) {
                fup[i] = min(fup[i], tin[j]);
            }
            else {
                children++;
                dfs(j, i);
                AP[i] |= (fup[j] >= tin[i]); //If there exists such a j, for which 
                                           //the condition evaluates to true; i is an AP.
                //trace(i, j, fup[j], tin[i]);
                fup[i] = min(fup[i], fup[j]);
            }
        }
    }
    //Special case for root vertex.
    if(p == -1) AP[i] = (children > 1);
}

void findAPs() {
    memset(AP, 0, sizeof AP);
    memset(vis, 0, sizeof vis);
    for(int i = 0; i < nn; i++) {
        if(!vis[i]) {
            dfs(i);
        }
    }
}

int solve() {
    int cnt = 0;
    rep(i, 0, n) rep(j, 0, m) cnt += grid[i][j] == '#';
    if(cnt <= 2) return -1;

    nn = 0;
    rep(i, 0, n) rep(j, 0, m) num[i][j] = nn++;
    rep(i, 0, n) {
        rep(j, 0, m) {
            if(grid[i][j] == '.') continue;
            rep(k, 0, 4) {
                int x = i + dx[k];
                int y = j + dy[k];
                if(isValid(x, y)) {
                    adj[num[i][j]].pb(num[x][y]);
                    //trace(i, j, x, y);
                    //trace(num[i][j], num[x][y]);
                }
            }
        }
    }
    findAPs();
    rep(i, 0, nn) if(AP[i]) return 1;
    return 2;
}

main()
{   
    #ifndef ONLINE_JUDGE
        freopen("/home/tarun/Desktop/input.txt", "r", stdin);
    //  freopen("/home/tarun/Desktop/output.txt", "w", stdout);
    #endif
    //sync;
    clock_t clk = clock();
    cerr << "I will return...\n";
    
    cin >> n >> m;
    rep(i, 0, n) rep(j, 0, m) cin >> grid[i][j];

    cout << solve() << '\n';

    cerr << "...don't you ever hang your head.\n";
    cerr << "Time (in ms): " << double(clock() - clk) * 1000.0 / cps << '\n';
}

//Compile using:
//g++ -o filename.exe --std=c++11 filename.cpp
//Use -D CP for defining a macro CP in the local environment



