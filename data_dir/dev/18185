#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

#define PB push_back
#define MP make_pair

#define rep(i,n) for(int64 i=0;i<(n);++i)
#define REP(i,n) for(int64 i=1;i<=(n);++i)
#define FOR(i,l,h) for(int64 i=(l);i<=(h);++i)
#define FORD(i,h,l) for(int64 i=(h);i>=(l);--i)
#define print(expr) cout<<(#expr)<<" : "<<(expr)<<endl

typedef long long int64;
typedef vector<int64> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef pair<int64,int64> pii;

struct Point{
	int64 x,y;
};

int64 det(int64 x1,int64 y1,int64 x2,int64 y2)
{
	return x1*y2-x2*y1;
}

int64 cross(Point a,Point b,Point c)
{
	return det(b.x-a.x,b.y-a.y,c.x-a.x,c.y-a.y);
}

const int maxn=100050;
Point poly[maxn]={},now;
int64 n,o,t;

inline int64 abs(int64 x) { return x>=0 ? x : -x; }

inline int64 f(int64 x)
{
	return (x+o)%n;
}

inline Point Poly(int64 x)
{
	return poly[f(x)];
}

int64 Cn2(int64 x)
{
	return x*(x-1)/2;
}

int64 USarea2(Point a,Point b,Point c)
{
	return abs(cross(a,b,c));
}

bool intri(Point x,Point a,Point b,Point c) //strickly inside of triangle 
{
	int64 s1,s2,s3,s;
	s1=USarea2(x,a,b);
	s2=USarea2(x,b,c);
	s3=USarea2(x,c,a);
	s=USarea2(a,b,c);
	return s1+s2+s3==s;
}

bool in(Point x)
{
	bool res=false;
	REP(i,n-2) res = res || intri(x,poly[0],poly[i],poly[i+1]);
	return res;
}

int main(void)
{
	cin>>n;
	rep(i,n) scanf("%I64d%I64d",&((poly+i)->x),&((poly+i)->y));
	cin>>t;
	rep(Case,t)
	{
		int64 ans=0;
		cin>>now.x>>now.y;
		if(!in(now))
		{
			cout<<0<<endl;
			continue;
		}
		for(o=0;o<n;o++)
		{
			int64 low=1,high=n-1,mid;
			while(low<high)
			{
				mid=(low+high+1)>>1;
				if(cross(Poly(0),now,Poly(mid))>0) low=mid;
				else high=mid-1;
			}
			ans += Cn2(low)+Cn2(n-1-low);
		}
		int64 n1=n;
		ans = n1*(n1-1)*(n1-2)/6 - ans/2;
		cout<<ans<<endl;
	}
}