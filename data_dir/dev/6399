    /*
Nahid Hossain
Jahangirnagar University
Roll:54
*/
#include<bits/stdc++.h>
#define ll long long int
#define pf printf
#define sf scanf
#define ff first
#define ss second
#define clr clear()
#define sz size()
#define pb push_back
#define mk make_pair
#define pi acos(-1)
#define inf 123456789
#define mod 1000000007
#define ull unsigned long long int
#define f(i,k,n) for(i=k;i<n;i++)
#define fr(i,n,k) for(i=n;i>=k;i--)
#define ent(a) scanf("%lld",&a)
#define ent2(a,b) scanf("%lld%lld",&a,&b)
#define ent3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define mem(a) memset(a,0,sizeof(a))
#define vec(v,s) vector<ll>v[s]
#define arr(a,s) ll a[s];
#define check(n,pos) (n&(1<<pos))
#define set(n,pos)  (n|(1<<pos))
//knight and king//
int dr[]={2,2,-2,-2,1,-1,1,-1};
int dc[]={1,-1,1,-1,2,2,-2,-2};
int dr1[]={0,0,1,1,1,-1,-1,-1};
int dc1[]={1,-1,1,0,-1,0,1,-1};
int dr2[]={0,0,1,-1};
int dc2[]={1,-1,0,0};
////////////////////////////
using namespace std;
ll mark [401][401],mark1[405],cost[405],cost1[405],n,m;
void bfs(ll s)
{
    ll i,u;
    mem(mark1);
    queue<ll>q;
    q.push(s);
    cost[s]=0;
    mark1[s]=1;
    while(q.sz>0)
    {
        u=q.front();
        q.pop();
        for(i=1;i<=n;i++)
        {
            if(mark[u][i]==1&&mark1[i]==0)
            {
                mark1[i]=1;
                q.push(i);
                cost[i]=1+cost[u];
            }

        }
    }

}
void bfs1(ll s)
{
    ll i,u;
    mem(mark1);
    mark1[s]=1;
    cost1[s]=0;
    queue<ll>q;
    q.push(s);
    while(q.sz>0)
    {
        u=q.front();
        q.pop();
        for(i=1;i<=n;i++)
        {
            if(mark[u][i]==0&&mark1[i]==0&&u!=i)
            {
                q.push(i);
                mark1[i]=1;
                cost1[i]=cost1[u]+1;
            }
        }
    }
}
int main()
{
    ll i,x,y;
    while(cin>>n>>m)
    {
        mem(mark);
        mem(cost);
        mem(cost1);
        for(i=1;i<=m;i++)
        {
            cin>>x>>y;
            mark[x][y]=1;
            mark[y][x]=1;
        }
        bfs(1);
        bfs1(1);
        if(cost[n]==0||cost1[n]==0)
            cout<<"-1"<<endl;
        else
            cout<<max(cost[n],cost1[n])<<endl;
    }
    return 0;
}
