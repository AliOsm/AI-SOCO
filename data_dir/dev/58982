#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>

using namespace std;

#define N 300010

int n,m,en,t,ans[N],f[N],low[N],dfn[N]; // 1:any; 2:at least one; 3:none

struct node{
	int x,y,v,id;
}e[N]={0};

struct edge{
	int e,id,k;
	edge *next;
}*v[N],ed[N<<1];

inline void add_edge(int s,int e,int id){
	ed[++en].next = v[s];
	v[s] = ed+en;
	v[s] ->e = e;
	v[s] ->id = id;
}

inline bool cmp(const node a,const node b){
	return (a.v<b.v);
}

inline int getf(int x){
	if (f[x]==x) return x;
		else	 return f[x] = getf(f[x]);
}

inline void dfs(int now,int id){
	dfn[now] = low[now] = ++t;
	for (edge *e=v[now];e;e=e->next){
		if (e->id ==id) continue;
		if (!dfn[e->e]){
			dfs(e->e,e->id);
			low[now] = min(low[now],low[e->e]);
			if (dfn[now]<low[e->e]) ans[e->id] = 1;
		}
		else low[now] = min(low[now],dfn[e->e]);
	}
}

int lab[1000100];

int getRoot(int u) {
    if (lab[u] < 0) return u;
    return lab[u] = getRoot(lab[u]);
}

void unionSet(int r1, int r2) {
    int x = lab[r1] + lab[r2];
    if (lab[r1] > lab[r2]) {
        lab[r1] = r2;
        lab[r2] = x;
    }
    else {
        lab[r1] = x;
        lab[r2] = r1;
    }
}


bool pos[1000000];

int main()
{
	scanf("%d%d",&n,&m);
	en = 0;
	for (int i=1;i<=m;i++){
		scanf("%d%d%d",&e[i].x,&e[i].y,&e[i].v);
		e[i].id = i;
	}
	sort(e+1,e+m+1,cmp);
	for (int i=1;i<=n;i++) f[i] = i;
	for(int i = 1; i<=n; i++)lab[i] = -1;
	for(int i = 1; i<=m; i++){
        int u , v;
        u = e[i].x , v = e[i].y;
        int x1 = getRoot(u) ; int x2 = getRoot(v);
        if(x1 != x2){
            pos[e[i].id] = true;
            unionSet(x1,x2);
        }
	}

	for (int i=1;i<=m;){
		int j = i;
		while (j+1<=m && e[i].v==e[j+1].v) j++;
		t = 0, en = 1;
		for (int k=i;k<=j;k++){
			e[k].x = getf(e[k].x);
			e[k].y = getf(e[k].y);
			int x = e[k].x,y = e[k].y;
			v[x] = v[y] = 0;
			dfn[x] = dfn[y] = 0;
		}
		for (int k=i;k<=j;k++){
			int x = e[k].x, y = e[k].y, id = e[k].id;
			if (x==y) ans[id] = 3;
			else {
				ans[id] = 2;
				add_edge(x,y,id);
				add_edge(y,x,id);
			}
		}
		for (int k=i;k<=j;k++)
			if (!dfn[e[k].x]) dfs(e[k].x,0);
		for (;i<=j;i++){
			int x = getf(e[i].x),y = getf(e[i].y);
			if (x==y) continue;
			f[x] = y;
		}
	}
	int cnt = 0;
	for (int i=1;i<=m;i++){
		//if (ans[i]==1) printf("any\n");
		if (ans[i]==2) cnt++;
		///printf("%d %d\n",ans[i],pos[i]);
		if(ans[i] == 2 and pos[i] == true)cnt--;
		//if (ans[i]==3) printf("none\n");
	}
	printf("%d\n",cnt);
	return 0;
}
