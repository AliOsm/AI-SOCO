#include <iostream>
#include <vector>
using namespace std;
int a[500];
int b[500];
int n, k;
vector<pair<int, char> > moves;
bool all_equal(int start, int end) {
  for(int i = start + 1; i < end; i++) {
    if(a[i] != a[start]) {
      return false;
    }
  }
  return true;
}
void printa() {
  for(int i = 0; i < n; i++) {
    cout << a[i] << " ";
  }
  cout << endl;
}
void eat_monsters(int start, int end, int offset) {
  int times = end - start - 1;
  while(times-- > 0) {
    // printa();
    for(int i = start, j = start; i < end; i++, j++) {
      a[i] = a[j];
      if(a[i] < 0) {
        i--;
      }
    }
    int max = 0;
    int maxi = 0;
    for(int i = start; i < end; i++) {
      if(a[i] > 0 && a[i] > max && (i-1 >= start && a[i-1] < a[i] || i+1 < end && a[i+1] < a[i])) {
        max = a[i];
        maxi = i;
      }
    }
    // cout << "maxi " << maxi << endl;
    if(maxi-1 >= start && a[maxi] > a[maxi-1]) {
      a[maxi-1] += a[maxi];
      a[maxi] = -1;
      moves.push_back(make_pair(1 + offset + (maxi - start), 'L'));
    } else if(maxi+1 < end && a[maxi] > a[maxi+1]) {
      a[maxi+1] += a[maxi];
      a[maxi] = -1;
      moves.push_back(make_pair(1 + offset + (maxi - start), 'R'));
    }
    end--;
  }
}
int main() {
  cin >> n;
  for(int i = 0; i < n; i++) {
    cin >> a[i];
  }
  cin >> k;
  for(int i = 0; i < k; i++) {
    cin >> b[i];
  }
  bool possible = true;
  int startj = 0, endj = 0;
  for(int i = 0; i < k && possible; i++) {
    int curr = 0;
    while(curr < b[i]) {
      if(endj >= n) {
        possible = false;
        break;
      }
      curr += a[endj];
      endj++;
    }
    // cout << i << " " << startj << " " << endj << endl;
    if(curr == b[i] && (endj - startj == 1 || !all_equal(startj, endj))) {
      eat_monsters(startj, endj, i);
      // cout << "eat monsters from " << startj << " to " << endj << endl;
      startj = endj;
    } else {
      possible = false;
    }
  }
  // cout << endj << endl;
  possible &= endj == n;
  if(possible) {
    cout << "YES" << endl;
    for(int i = 0; i < moves.size(); i++) {
      cout << moves[i].first << " " << moves[i].second << endl;
    }
  } else {
    cout << "NO" << endl;
  }
  return 0;
}
