#include <bits/stdc++.h>

using namespace std;

#define x first
#define y second
#define mp make_pair
#define pb push_back
#define sqr(a) ((a) * (a))
#define sz(a) int(a.size())
#define all(a) a.begin(), a.end()
#define forn(i, n) for(int i = 0; i < int(n); i++) 
#define fore(i, l, r) for(int i = int(l); i < int(r); i++)

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template <class A, class B> ostream& operator << (ostream& out, const pair<A, B> &a) {
	return out << "(" << a.x << ", " << a.y << ")";
}

template <class A> ostream& operator << (ostream& out, const vector<A> &v) {
	out << "[";
	forn(i, sz(v)) {
		if(i) out << ", ";
		out << v[i];
	}
	return out << "]";
}

mt19937 rnd(time(NULL));

const int INF = int(1e9);
const li INF64 = li(1e18);
const int MOD = INF + 7;
const ld EPS = 1e-9;
const ld PI = acos(-1.0);

const int N = 1000 * 1000 + 13;

int n;
int a[N];

bool read () {
	if (scanf("%d", &n) != 1)
		return false;
	forn(i, n){
		scanf("%d", &a[i]);
		--a[i];
	}
	return true;
}

int cnt[N];
int f[N];

void upd(int x, int val){
	for (int i = x; i < N; i |= i + 1)
		f[i] += val;
}

int get(int x){
	int res = 0;
	for (int i = x; i >= 0; i = (i & (i + 1)) - 1)
		res += f[i];
	return res;
}

int pr[N], su[N];
int fact[N];

void solve() {
	fact[0] = 1;
	fore(i, 1, N)
		fact[i] = fact[i - 1] * li(i) % MOD;
	
	forn(i, N)
		cnt[i] = fact[i] * li(i) % MOD * li(i - 1) % MOD * li((MOD + 1) / 2) % MOD * li((MOD + 1) / 2) % MOD;
	
	memset(f, 0, sizeof(f));
	pr[0] = 0;
	forn(i, n){
		pr[i + 1] = ((pr[i] + i - get(a[i])) % MOD + MOD) % MOD;
		upd(a[i], 1);
	}
	
	memset(f, 0, sizeof(f));
	su[0] = 0;
	forn(i, n){
		su[i + 1] = ((su[i] + li(a[i] - get(a[i])) - li(i - get(a[i]))) % MOD + MOD) % MOD;
		upd(a[i], 1);
	}
	
	//cerr << vector<int>(pr, pr + n + 1) << endl;
	//cerr << vector<int>(su, su + n + 1) << endl;
	
	int ans = pr[n];
	//int ans = 0;
	
	memset(f, 0, sizeof(f));
	forn(i, n){
		//cerr << ans << endl;
		int val = a[i] - get(a[i]);
		
		ans = (ans + pr[i] * li(fact[n - (i + 1)]) % MOD * li(val) % MOD) % MOD;
		
		ans = (ans + val * li(cnt[n - (i + 1)])) % MOD;
		ans = (ans + val * li(val - 1) % MOD * li((MOD + 1) / 2) % MOD * li(fact[n - (i + 1)]) % MOD) % MOD;
		
		ans = (ans + su[i] * li(fact[n - (i + 1)]) % MOD * li(val + 1)) % MOD;
		ans = (ans - su[i + 1] * li(fact[n - (i + 1)]) % MOD + MOD) % MOD;
		ans = (ans + val * li(fact[n - (i + 1)])) % MOD;
		ans = (ans - (i - get(a[i])) * li(fact[n - (i + 1)]) % MOD + MOD) % MOD;
		
		upd(a[i], 1);
	}
	
	printf("%d\n", ans);
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
	
	int tt = clock();
	
#endif
	
	cerr.precision(15);
	cout.precision(15);
	cerr << fixed;
	cout << fixed;

	while(read()) {	
		solve();
		
#ifdef _DEBUG
	cerr << "TIME = " << clock() - tt << endl;
	tt = clock();
#endif

	}
}