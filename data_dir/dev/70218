#include<bits/stdc++.h>
using namespace std;
typedef long long LL;

const int K = 20, N = 1<<20;
int dp[N];
int pop[K][N];
int cnt[K][K];

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int n, k;
    cin>>n>>k;

    string s;
    cin>>s;

    for (int i=1; i<n; i++) {
        int aa = s[i] - 'a';
        int bb = s[i-1] - 'a';
        cnt[aa][bb]++;
        cnt[bb][aa]++;
    }

    for (int i=0; i<k; i++) {
        for (int mask = 1; mask < (1<<k); mask++) {
            int first = __builtin_ctz(mask);
            assert(mask & (1<<first));
            pop[i][mask] = pop[i][mask ^ (1<<first)] + cnt[i][first];
        }
    }

    for (int mask = 1; mask < (1<<k); mask++) {
        dp[mask]= 1e9+7;
        for (int b=0; b<k; b++) {
            if ( (mask & (1<<b)) == 0)      continue;
            int left = pop[b][mask ^ (1<<b)];
            int right = pop[b][(1<<k) - 1 - mask];
            dp[mask] = min(dp[mask], dp[mask ^ (1<<b)] + (left-right)*__builtin_popcount(mask));
//            cout<<"---> "<<b<<" "<<left<<" "<<right<<endl;
        }
//        cout<<bitset<3>(mask)<<" "<<dp[mask]<<endl;
    }
    cout<<dp[(1<<k)-1]<<endl;
}
