//VFD
#include <bits/stdc++.h>
using namespace std;
#define pf push_front
#define pb push_back
#define FOR(i,begin,end) for (LL i=begin;i<=end;i++)
#define rep(i,t) for (LL i=0;i<t;i++)
#define pii pair<LL,LL>
#define pi pair<pii,LL>
#define X first
#define Y second 
#define fast cin.tie(0),cout.tie(0),ios::sync_with_stdio(false) 
typedef long long LL;
const LL maxN=3e5+7,MOD=1e9+7,INF=1e9+7,N=1e6+17,sqr=75;
LL n,m,q,par[maxN],now,cur,dis[maxN],x,y,ans[maxN],type,h[maxN];
vector<LL>a[maxN];
bool v[maxN];
void dfs(LL s, LL p)
{
    v[s]=true;
    par[s]=p;
    rep(i,a[s].size())
    {
        if(!v[a[s][i]])
        {
            dis[a[s][i]]=dis[s]+1;
            if(dis[a[s][i]]>dis[now])
                now=a[s][i];
            dfs(a[s][i],p);
        }
    }
}
void Dfs(LL s, LL p)
{
    rep(i,a[s].size())
    {
        if(a[s][i]!=p)
        {
            dis[a[s][i]]=dis[s]+1;
            if(dis[a[s][i]]>dis[now])
                now=a[s][i];
            Dfs(a[s][i],s);
        }
    }
}
LL find_par(LL x)
{
    if(par[x]!=x)
        par[x]=find_par(par[x]);
    return par[x];
}
void merge(LL x, LL y)
{
    if(h[x]>h[y])
        swap(x,y);
    par[x]=y;
    h[y]+=(h[x]==h[y]);
    ans[y]=max(ans[y],max(ans[x],((ans[x]+1)/2)+((ans[y]+1)/2)+1));
}
main()
{
    fast;
    cin>>n>>m>>q;
    FOR(i,1,n)
        par[i]=i;
    FOR(i,1,m)
        cin>>x>>y,a[x].pb(y),a[y].pb(x);
    FOR(i,1,n)
    {
        if(!v[i])
        {
            now=i;
            dfs(i,i);
            cur=now;
            dis[now]=0;
            Dfs(cur,0);
            ans[i]=dis[now];
        }
    }
    while(q--)
    {
        cin>>type;
        if(type==1)
        {
            cin>>x;
            cout<<ans[find_par(x)]<<"\n";
        }
        else
        {
            cin>>x>>y;
            x=find_par(x);
            y=find_par(y);
            if(x!=y)
                merge(x,y);
        }
    }
    return cout<<"\n",0;
}
