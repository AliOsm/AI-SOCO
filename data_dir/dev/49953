#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define x first
#define y second
#define ndl '\n'
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define bit __builtin_popcount
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()

using namespace std;
using namespace __gnu_pbds;

template<typename T> using indexed_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef pair<int, ll> pil;
typedef pair<ll, int> pli;
typedef pair<int, ull> piu;
typedef vector<vector<int>> matrix;

const ll INF = 1e18 + 123;
const ld EPS = 1e-9;
const int inf = 1e9 + 123;
const int MOD = 1e9 + 7;
const int N = 1e5 + 13;
const int M = 2e5 + 123;
const double pi = acos(-1.0);
const int dx[] = {0, 0, 1, -1};
const int dy[] = {1, -1, 0, 0};

int a[N], b[N], h[N];

vector<int> add[M], del[M];

ll dp[N];

void solve(){
    int n;
    cin >> n;
    vector<int> x;
    for (int i = 1; i <= n; i++){
        cin >> a[i] >> b[i] >> h[i];
        x.pb(a[i]);
        x.pb(b[i]);
    }
    sort(all(x));
    for (int i = 1; i <= n; i++){
        a[i] = low_b(all(x), a[i]) - x.begin();
        b[i] = low_b(all(x), b[i]) - x.begin();
        add[b[i]].pb(i);
        del[a[i]].pb(i);
    }
    set<pli> s;
    s.insert({0, 0});
    ll mx = 0;
    for (int i = n+n; i >= 0; i--){
        for (int j : del[i]){
            s.erase({dp[j], j});
        }
        sort(all(add[i]), [&](int i, int j){
                return a[i] > a[j];
             });
        for (int j : add[i]){
            dp[j] = s.rbegin()->x + h[j];
            mx = max(mx, dp[j]);
            s.insert({dp[j], j});
        }
    }
    cout << mx;
}

int main(){
    #ifdef KAZAKH
        freopen("input.txt", "r", stdin);
    #endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t = 1;
    while (t--){
        solve();
    }
    return 0;
}
