/* winners never quit and quitters never win.
      #swap                                 */
#include <bits/stdc++.h>
using namespace std;
typedef int ll;
typedef long double ld;
#define mod 1000000007
#define inf 1000000000000000000
#define rk 256
#define pb push_back
#define mp make_pair
#define vc vector
#define fs first
#define sec second
#define pq priority_queue
#define lb lower_bound
#define ub upper_bound
#define pll pair<ll,ll> 
#define pls pair<ll,string>
#define psl pair<string,ll>
#define plc pair<ll,char>
#define pcl pair<char,ll>
#define pss pair<string,string>
#define all(v) v.begin(),v.end()
#define tol(s) transform(s.begin(),s.end(),s.begin(),::tolower);
#define tou(s) transform(s.begin(),s.end(),s.begin(),::toupper);
#define T ll t=0;cin>>t;for(ll test=0;test<t;test++)
/*ll ncr[5001][5001];
void coeff()
{
    for(ll a=0;a<5001;a++)
    {
        for(ll b=0;b<5001;b++)
        {
            ncr[a][b]=0;
        }
        ncr[a][0]=1;
    }
    for(ll a=1;a<5001;a++)
    {
        for(ll b=1;b<=a;b++)
        {
            ncr[a][b]=(ncr[a-1][b]+ncr[a-1][b-1])%mod;
        }
    }
}*/
ll fast_exp(ll base, ll exp1) {
    ll res=1;
    while(exp1>0) {
       if(exp1&1) res=(res*base)%mod;
       base=(base*base)%mod;
       exp1/=2;
    }
    return res%mod;
} 
ll pr[1000001]={0};
void isprime()
{
    pr[0]=1;
    pr[1]=1;
    for(ll a=2;a*a<=1000001;a++)
    {
        if(!pr[a])
        {
            for(ll b=a*a;b<1000001;b+=a)
            {
                pr[b]=1;
            }
        }
    }
}
ll comp=1,tim=0;
struct vertex
{
    ll vis=0;
    ll component=0;
    ll low=0;
};
ll n;
struct vertex x[50][50];
ll x1[4]={-1,1,0,0},y1[4]={0,0,1,-1};
void dfs(ll u,ll v)
{
    x[u][v].vis=1;
    x[u][v].component=comp;
    for(ll a=0;a<4;a++)
    {
        for(ll b=0;b<4;b++)
        {
            ll p=u+x1[a],q=v+y1[a];
            if(p>=0 and p<n and q>=0 and q<n and !x[p][q].vis and x[p][q].low==0)
                dfs(p,q);
        }
    }
}
 
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
	//isprime();
	//coeff();
	/*freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);*/
    cin>>n;
    for(ll a=0;a<n;a++)
    {
        for(ll b=0;b<n;b++)
        {
            x[a][b].vis=0;
            x[a][b].component=0;
            x[a][b].low=0;
        }
    }
    ll r1,c1,r2,c2;
    cin>>r1>>c1>>r2>>c2;
    r1--;c1--;r2--;c2--;
    for(ll a=0;a<n;a++)
    {
        string s;
        cin>>s;
        for(ll b=0;b<n;b++)
        {
            x[a][b].low=s[b]-'0';
        }
    }
    comp=1;
    for(ll a=0;a<n;a++)
    {
        for(ll b=0;b<n;b++)
        {
            if(!x[a][b].vis and x[a][b].low==0)
            {
                dfs(a,b);
                comp++;
            }
        }
    }
    vc<pll> v,v1;
    for(ll a=0;a<n;a++)
    {
        for(ll b=0;b<n;b++)
        {
            if(x[a][b].component==x[r1][c1].component)
                v.pb(mp(a,b));
            if(x[a][b].component==x[r2][c2].component)
                v1.pb(mp(a,b));
        }
    }
    ll ans=mod;
    for(auto y:v)
    {
        for(auto y1:v1)
        {
            ans=min(ans,(y.fs-y1.fs)*(y.fs-y1.fs)+(y.sec-y1.sec)*(y.sec-y1.sec));
        }
    }
    cout<<ans<<endl;
	return 0;
}