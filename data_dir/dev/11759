#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <cstdio>
#include <string>
#include <stdlib.h>
#include <set>
#include <vector>
#include <list>
#include <algorithm>
#include <regex>
#include <math.h>
#include <map>
#include <iterator>
#include <limits>
#include <numeric>
#include <bitset>
#include <unordered_map>
#include <unordered_set>
#include <iomanip>
#include <queue>
#include <deque>
#include <stack>
#include <array>
#include <valarray>
#include <complex>


using namespace std;

typedef int integer;
typedef array<int, 2> hv;
#define int long long
#define double long double
#define make(type, x) type x; cin>>x
#define make2(type, x, y) type x, y; cin>>x>>y
#define make3(type, x, y, z) type x, y, z; cin>>x>>y>>z
#define make4(type, x, y, z, q) type x, y, z, q; cin>>x>>y>>z>>q
#define ALL(x) (x).begin(), (x).end()
#define FORIT(p) for(auto it = p.begin(); it != p.end(); it++)
#define FOR(b) for(int i = 0; i <(b); i++)
#define VI vector<int>
#define VVI vector<vector<int>>
#define PII pair<int, int>
#define PPII pair<PII, int>
#define MOD7 1000000007
#define MOD9 1000000009



void Solve() {
	make3(int, n, m, k);
	vector<PII> a(k);
	vector<int> ans(k, -1);
	multimap<int, int> ds, dm;
	FOR(k) {
		cin >> a[i].first >> a[i].second;
		ds.insert(make_pair( a[i].first + a[i].second, i ));
		dm.insert(make_pair( a[i].first - a[i].second, i ));
	}
	int stI = 0, stJ = 0;
	int time = 0;
	bool isS = false;
	while (true) {
		int nextI, nextJ;
		if (isS) {
			int sm = stI + stJ;
			nextI = 0; nextJ = sm;
			if (nextI < 0 || nextI > n || nextI == stI || nextJ < 0 || nextJ> m || nextJ == stJ) { nextI = sm; nextJ = 0; }
			if (nextI < 0 || nextI > n || nextI == stI || nextJ < 0 || nextJ> m || nextJ == stJ) { nextI = n; nextJ = sm - n; }
			if (nextI < 0 || nextI > n || nextI == stI || nextJ < 0 || nextJ> m || nextJ == stJ) { nextI = sm - m; nextJ = m; }
			while (ds.count(sm)) {
				auto it = ds.find(sm);
				int index = it->second;
				ds.erase(it);
				if (ans[index] != -1) continue;
				ans[index] = time + abs(stI - a[index].first);
			}
		}
		else {
			int d = stI - stJ;
			nextI = d + m; nextJ = m;
			if (nextI < 0 || nextI > n || nextI == stI || nextJ < 0 || nextJ> m || nextJ == stJ) { nextI = n; nextJ = n-d; }
			if (nextI < 0 || nextI > n || nextI == stI || nextJ < 0 || nextJ> m || nextJ == stJ) { nextI = 0; nextJ = -d; }
			if (nextI < 0 || nextI > n || nextI == stI || nextJ < 0 || nextJ> m || nextJ == stJ) { nextI = d; nextJ = 0; }
			while (dm.count(d)) {
				auto it = dm.find(d);
				int index = it->second;
				dm.erase(it);
				if (ans[index] != -1) continue;
				ans[index] = time + abs(stI - a[index].first);
			}
		}
		time += abs(nextI - stI);
		stI = nextI;
		stJ = nextJ;
		if (stI == 0 && (stJ == 0 || stJ == m)) break;
		if (stI == n && (stJ == 0 || stJ == m)) break;
		isS = !isS;
	}
	FOR(k) cout << ans[i] << endl;
}

signed main() {
	ios_base::sync_with_stdio(0);
	cin.tie();
#if  _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	Solve();
	while (!cin.eof()) {
		string s = "_";
		do getline(cin, s);
		while (!cin.eof() && !s.empty());
		if (cin.eof()) return 0;
		FOR(3) cout << endl;
		Solve();
	}
#else
	Solve();
#endif
	return 0;
}