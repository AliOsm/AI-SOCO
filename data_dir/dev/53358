//#include "stdc++.h"
#include <bits/stdc++.h>
#include<iostream>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <ll, int> pli;
typedef pair <db, db> pdd;
typedef vector<int> vi;
#define m1 make_pair
#define pb push_back
#define flush fflush(stdout)
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define reset(x,v) memset(x,v,sizeof(x))
//#define sz(x) (int)(x.size())
#define ff first
#define ss second
#define endl "\n"
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0)return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p;}
const ll hell =1000000007 ;
const int INF = 0x3f3f3f3f;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;
#define pi 3.141592653589793238462
#define int  long long
const int N=100005;
int st[4*N],a[N],dp[N];
void constructtree(int i,int l,int r)
{
    if(l>r)
        return;
    if(l==r)
    {
        st[i]=a[l];
        return;
    }
    int m=(l+r)/2;
    constructtree(2*i+1,l,m);
    constructtree(2*i+2,m+1,r);
    st[i]=min(st[2*i+1],st[2*i+2]);
}
int getmin(int i,int l,int r,int qs,int qe)
{
    if(qs>r||qe<l)
        return INF;
    if(qs<=l&&qe>=r)
        return st[i];
    int m=(l+r)/2;
    return min(getmin(2*i+1,l,m,qs,qe),getmin(2*i+2,m+1,r,qs,qe));
}
int32_t main()
{
    IOS;
    int n,c;
    cin>>n>>c;
    for(int i=0;i<n;i++)
        cin>>a[i];
    int sm[n];
    sm[n]=0;
    for(int i=n-1;i>=0;i--)
        sm[i]=a[i]+sm[i+1];
    constructtree(0,0,n-1);
    dp[n]=0;
    int mn;
    for(int i=n-1;i>=0;i--)
    {
        dp[i]=a[i]+dp[i+1];
        if((n-i)>=c)
        {
            mn=getmin(0,0,n-1,i,i+c-1);
            dp[i]=min(dp[i],dp[i+c]+sm[i]-sm[i+c]-mn);
        }
    }
    cout<<dp[0]<<endl;
    return 0;
}
