// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second
#define int long long

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int MOD = 998244853;
const int N = 2003;

int n, m, res, dp1[N][N], dp2[N][N];
bool vis[N][N];

int calc(int x, int y) {
  if (x < y)
    return 0;
  if (vis[x][y])
    return dp2[x][y];
  vis[x][y] = true;
  if (y == 0)
    return dp2[x][y] = 1;
  if (x == y)
    return dp2[x][y] = calc(x, y-1);
  return dp2[x][y] = (calc(x, y-1)+calc(x-1, y))%MOD;
}

int get1(int i, int h) {
  int x = (i+h)/2;
  int y = i-x;
  return calc(x-1, y);
}

signed main() {
  init_ios();
  cin >> n >> m;
  for (int h = 1; h <= n; ++h)
    for (int i = h; i <= n+m; ++i) {
      if ((i+h)&1)
        continue;
      if (i == h) {
        res = (res+h*calc(m, n-h))%MOD;
        continue;
      }
      int x = (i+h)/2;
      int y = i-x;
      if (x > n || y > m || y < 0)
        continue;
      res = (res+h*get1(i, h)%MOD*calc(m-y, n-x))%MOD;
    }
  cout<<res<<"\n";
}