#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>

using namespace std;

#define int long long
#define ll long long
//#define double long double
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()

const int INF = 2e12;
const int MB = 20;
const int MOD = 1e9 + 7;
const int maxN = 1e5 + 1;
int cnt[maxN], p[maxN];

void solve() {
    int l, n, m;
    cin >> l >> n >> m;
    vector<int> a(l + 1);
    for (int i = 0; i < n; i++) {
        int left, right;
        cin >> left >> right;
        for (int j = left; j <= right; j++) {
            a[j] = i + 1;
        }
    }

    vector<vector<int>> nums(l + 1);
    vector<int> p(m + 1);

    for (int i = 1; i <= m; i++) {
        int x, pp;
        cin >> x >> pp;
        nums[x].push_back(i);
        p[i] = pp;
    }

    vector<vector<int>> dp(l + 1, vector<int>(m + 1, INF));
    vector<int> now = nums[0];

    for (int i : now) dp[0][i] = 0;
    if(!a[0]) dp[0][0] = 0;

    for (int i = 1; i <= l; i++) {
        int mn = INF;
        for (int j : now) {
            mn = min(dp[i - 1][j] + (a[i] && a[i] == a[i - 1] ? p[j] : 0), mn);
        }
        for (int j : nums[i]) {
            dp[i][j] = min(dp[i - 1][0], mn);
        }
        if (!a[i]) dp[i][0] = min(mn, dp[i - 1][0]);
        for (int j : now) {
            dp[i][j] = dp[i - 1][j] + p[j];
        }
        for (int j : nums[i]) now.push_back(j);
    }
    int ans = *min_element(all(dp.back()));
    cout << (ans >= INF ? -1 : ans);
}


signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    //int t;
    //cin >> t;
    int t = 1;
    //srand(time(0));
    while (t--) solve();
}