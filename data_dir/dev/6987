#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>

typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(tint i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl



using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) )
		Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

// CRIBA

//const tint maxN = 1000500;
//int p[maxN + 1] = {1, 1};
//tint phi[maxN]; // DAR CHANGUI DE 500 O MAS

//
//map<tint,tint> factorizar (tint n)
//{
//	map<tint,tint> f;
//	while (n > 1) 
//	{ 
//		f[p[n]]++;
//		n /= p[n]; 
//	}
//	return f;
//}
// ESTO VA EN EL MAIN
//	for (int i = 1; i <= maxN; ++i)
//		if (p[i] == 1)
//			for (int j = i; j <= maxN; j += i)
//				p[j] = i;
//for (tint i = 0; i < maxN; i++) 
//		phi[i] = i;	
//	for (tint i = 1; i < maxN; i++)
//		for (tint j = 2 * i; j < maxN; j += i)
//			phi[j] -= phi[i];



int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	int n;
	while (cin >> n)
	{
		map<char,string> solution = {{'W', "Win"},{'L',"Lose"},{'P',"Loop"}};
		vector<vector<tint> > move (2);
		forn(r,2)
		{
			int k;
			cin >> k;
			forn(j,k)
			{
				int s;
				cin >> s;
				move[r].push_back(s);
			}
		}
		vector<vector<pair<char,int> > > ans (2, vector<pair<char,int> > (n, {'P',0}));
		deque<pair<int,int> > vecinos;
		forn(r,2)
		{
			ans[r][0] = {'L',0};
			vecinos.push_front({r,0});
		}
		deque<pair<int,int> > nuevosVecinos;
		while (!vecinos.empty())
		{
			pair<int,int> actual = vecinos.front();
			vecinos.pop_front();
			int player = actual.first, place = actual.second;
			if (ans[player][place].first == 'L')
			{
				for (auto x : move[1-player])
				{
					if (ans[1-player][(place-x+n)%n].first == 'P')
					{
						ans[1-player][(place-x+n)%n].first = 'W';
						nuevosVecinos.push_front({1-player,(place-x+n)%n});
					}
				}
			}
			else if (ans[player][place].first == 'W')
			{
				for (auto x : move[1-player])
				{
					ans[1-player][(place-x+n)%n].second++;
					if (ans[1-player][(place-x+n)%n].second == tint(move[1-player].size()) && ans[1-player][(place-x+n)%n].first == 'P')
					{
						ans[1-player][(place-x+n)%n].first = 'L';
						nuevosVecinos.push_front({1-player,(place-x+n)%n});
					}	
				}
			}
			if (vecinos.empty())
			{
				vecinos = nuevosVecinos;
				nuevosVecinos = {};
			}
		}
		forn(r,2)
		{
			forsn(i,1,n)
			{
				if (i-1)
					cout << " ";
				cout << solution[ans[r][i].first];
			}
			cout << "\n";
		}
		
	}
	return 0;
}



