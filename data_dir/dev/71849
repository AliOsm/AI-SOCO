// --------------------<optimizations>--------------------
#pragma GCC optimize("O3")

//(UNCOMMENT WHEN HAVING LOTS OF RECURSIONS)\
#pragma comment(linker, "/stack:200000000")
//(UNCOMMENT WHEN TRYING TO BRUTEFORCE WITH A LOT OF LOOPS)\
#pragma GCC optimize("unroll-loops")

// -------------------</optimizations>--------------------
#include<bits/stdc++.h>
using namespace std;
//#define int long long
#define pii pair<int,int>
#define pb push_back
#define N 1000003
#define Arena ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
map<char,int> cti;
vector<int> g[N][6];

signed main()
{
    Arena
    
    cti.clear();
    cti['a']=1,cti['e']=2,cti['i']=3,cti['o']=4,cti['u']=5;
    int n;
    cin>>n;
    string s[n+1];
    int i,j;
    for(i=1;i<=n;++i)
        cin>>s[i];
    
    for(i=1;i<=n;++i)
    {
        int cnt=0;
        char lastvow;
        for(j=0;j<s[i].size();++j)
        {
            if(s[i][j]=='a' or s[i][j]=='e' or s[i][j]=='i' or s[i][j]=='o' or s[i][j]=='u')
                ++cnt,lastvow=s[i][j];
        }   
        g[cnt][cti[lastvow]].pb(i);
    }   
    
    vector<string> v1,v2,temp,ans;  v1.clear(),v2.clear(),temp.clear(),ans.clear();
    
    for(i=1;i<=N-3;++i)
    {
        for(j=1;j<=5;++j)
        {
            while(g[i][j].size()>1)
            {
                v1.pb(s[g[i][j].back()]);
                g[i][j].pop_back();
                v1.pb(s[g[i][j].back()]);
                g[i][j].pop_back();
            }
            if(g[i][j].size())
                temp.pb(s[g[i][j].back()]), g[i][j].pop_back();
        }   
        while(temp.size()>1)
        {
            v2.pb(temp.back());
            temp.pop_back();
            v2.pb(temp.back());
            temp.pop_back();
        }
        if(temp.size())
            temp.pop_back();
    }   
    
    while(v1.size()>=2)
    {
        if(v2.size()>=2)
        {
            ans.pb(v2.back());
            v2.pop_back();
            ans.pb(v1.back());
            v1.pop_back();
            ans.pb(v2.back());
            v2.pop_back();
            ans.pb(v1.back());
            v1.pop_back();
        }   
        else if(v1.size()>=4)
        {
            int sz=v1.size();
            ans.pb(v1[sz-1]);
            ans.pb(v1[sz-3]);
            ans.pb(v1[sz-2]);
            ans.pb(v1[sz-4]);
            v1.pop_back();
            v1.pop_back();
            v1.pop_back();
            v1.pop_back();
        } 
        else
            break;
    }   
    
    cout<<ans.size()/4<<'\n';
    for(i=0;i<ans.size();i+=2)
        cout<<ans[i]<<' '<<ans[i+1]<<'\n';
    
    
    return 0;
}
