#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define fi first
#define se second

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int N = 65;

int n;
string k;

ll number[N][N];
ll pd[N][N];
ll pwr[N];
const ll oo = 1000000000000000001LL;

ll solve(int pos, int exp)
{
	if (pos < 0)
		return 0;
	
	if (pwr[exp] == -1)
		return oo;

	if (pd[pos][exp] != -1)
		return pd[pos][exp];
	
	pd[pos][exp] = oo;
	for (int i = pos; i >= 0; i--)
	{
		if (number[i][pos] == -1)
			break;
		
		if (k[i] == '0' and pos != i) continue;
		
		ll x = number[i][pos] * pwr[exp];
		if (x/pwr[exp] != number[i][pos])
			break;

		ll next = solve(i-1, exp+1);
		
		if (next < oo and x+next < oo and x+next >= x and x+next >= next)
			pd[pos][exp] = min(pd[pos][exp], x + next);

	}
	return pd[pos][exp];
}

int main()
{
	memset(pd, -1, sizeof(pd));
	memset(number, -1, sizeof(number));
	memset(pwr, -1, sizeof(pwr));
	cin >> n >> k;

	pwr[0] = 1;
	for (int i = 1; i < k.size(); i++)
	{
		pwr[i] = pwr[i-1] * (ll)n;
		if (pwr[i]/(ll)n != pwr[i-1])
		{
			pwr[i] = -1;
			break;
		}
	}
	for (int i = 0; i < k.size(); i++)
	{
		for (int j = 1; j <= 9 and i+j-1 < k.size(); j++)
		{
			string cur = k.substr(i, j);
			number[i][i+j-1] = atoll(cur.c_str());
			if (number[i][i+j-1] >= n)
			{
				number[i][i+j-1] = -1;
				break;
			}
		}
	}
	cout << solve(k.size()-1, 0) << '\n';
	return 0;
}