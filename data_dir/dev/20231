#include <cstdio>
#include <memory.h>
#include <cstring>
#include <vector>
#include <deque>
#include <cstdlib>
#include <queue>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <functional>
#include <iostream>
#include <set>
#include <list>
#include <map>
#include <time.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef long long ll;
typedef unsigned long long llu;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<string, int> psi;
const ll MOD = 1e9 + 7;
const long double PI = 3.141592653589793238462643383279502884197;

priority_queue<int, vector<int>, greater<int> > pq;
vector<int> v;

// 날짜가 p를 넘는.

// 현재 p개 남았을 때의 확률.
double dp[1001][10000]; // P개 남고 현재 X일 남았을 때. 되는 확률.
int ans[1001];
const double eps = 1e-7;
int n;

double go(int o, int d) {
	if (o == 0) return 1;
	if (d == 0) return 0;
	if (dp[o][d] > -1) return dp[o][d];

	double sum = 0;
	sum += go(o, d - 1) * (n - o) / n;
	sum += go(o - 1, d - 1) * o / n;

	return dp[o][d] = sum;
}

int main() {
	for (int i = 0; i <= 1000; i++)
		for (int j = 0; j < 10000; j++)
			dp[i][j] = -2;

	int	q;
	scanf("%d %d", &n, &q);

	int l = 1;
	for (int i = 1; i <= 1000; i++) {
		while (go(n, l) < i / 2000.0) l++;
		ans[i] = l;
	}

	while (q--) {
		int t;
		scanf("%d", &t);
		printf("%d\n", ans[t]);
	}
}