#include <bits/stdc++.h>
using namespace std;
#define ff first
#define ss second
#define MP make_pair
#define PB push_back
#define ll long long
#define int long long
#define f(i,x,n) for(int i=x;i<n;i++)
#define ld long double
const int mod=1000000007;
const int INF=1e18;

int a[2000005],b[2000005];
#define SIZE 2000010
int P[SIZE * 2];
string convertToNewString(const string &s) {
    string newString = "@";

    for (int i = 0; i < s.size(); i++) {
        newString += "#" + s.substr(i, 1);
    }

    newString += "#$";
    return newString;
}

string longestPalindromeSubstring(const string &s) {
    string Q = convertToNewString(s);
    f(i,0,Q.size()+5)
    	P[i]=0;
    int c = 0, r = 0;                // current center, right limit
    for (int i = 1; i < Q.size() - 1; i++) {
        // find the corresponding letter in the palidrome subString
        int iMirror = c - (i - c);
        if(r > i) {
            P[i] = min(r - i, P[iMirror]);
        }
        while (Q[i + 1 + P[i]] == Q[i - 1 - P[i]]){
            P[i]++;
        }
        if (i + P[i] > r) {
            c = i;              // next center = i
            r = i + P[i];
        }
    }
    // Find the longest palindrome length in p.
    // int maxPalindrome = 0;
    // int centerIndex = 0;
    // for (int i = 1; i < Q.size() - 1; i++) {
    //     if (P[i] > maxPalindrome) {
    //         maxPalindrome = P[i];
    //         centerIndex = i;
    //     }
    // }
    // cout << maxPalindrome << "\n";
    // return s.substr( (centerIndex - 1 - maxPalindrome) / 2, maxPalindrome);
}

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		string s;
		cin>>s;
		n=s.length();
		longestPalindromeSubstring(s);
		// f(i,0,2*s.length()+5)
		// 	cout<<P[i]<<" ";
		// cout<<'\n';
		f(i,0,2*n+5)
		{
			a[i]=0,b[i]=0;
		}
		f(i,2,2*n+1)
		{
			if(i<=1+n)
			{
				if(i%2==0)
				{
					a[i/2-P[i]/2]=max(a[i/2-P[i]/2],P[i]);
					// b[i/2+P[i]/2]=max(b[i/2+P[i]/2],P[i]);
				}
				else
				{
					a[i/2-P[i]/2+1]=max(a[i/2-P[i]/2+1],P[i]);
					// b[i/2+P[i]/2]=max(b[i/2+P[i]/2],P[i]);
				}
			}
			else
			{
				if(i%2==0)
				{
					// a[i/2-P[i]/2]=max(a[i/2-P[i]/2],P[i]);
					b[i/2+P[i]/2]=max(b[i/2+P[i]/2],P[i]);
				}
				else
				{
					// a[i/2-P[i]/2+1]=max(a[i/2-P[i]/2+1],P[i]);
					b[i/2+P[i]/2]=max(b[i/2+P[i]/2],P[i]);
				}
			}
		}
		f(i,1,n+1)
		{
			a[i]=max(a[i],a[i-1]-2);
		}
		for(int i=n;i>=0;i--)
		{
			b[i]=max(b[i],b[i+1]-2);
		}
		// f(i,0,n+1)
		// 	cout<<a[i]<<" ";
		// cout<<'\n';
		// f(i,0,n+1)
		// 	cout<<b[i]<<" ";
		// cout<<'\n';
		int ans=0;
		int an[3]={0,0,0};
		f(i,0,(n+1)/2)
		{
			int temp=0;
			if(i*2+a[i+1]>ans)
			{
				ans=max(ans,i*2+a[i+1]);
				an[0]=i;
				an[1]=a[i+1];
				an[2]=0;
			}
			if(i*2+b[n-i]>ans)
			{
				ans=max(ans,i*2+b[n-i]);
				an[0]=i;
				an[1]=b[n-i];
				an[2]=1;
			}
			// ans=max(i*2+max(a[i+1],b[n-i]),ans);
			// cout<<i*2+max(a[i+1],b[n-i])<<"  ";
			if(s[i]==s[n-i-1])
			{
				temp++;
			}
			else
			{
				break;
			}
		}
		f(i,0,an[0])
			cout<<s[i];
		if(an[2]==0)
		{
			// cout<<"  Yaha  ";
			f(i,an[0],an[0]+an[1])
				cout<<s[i];
		}
		else
		{
			for(int i=n-an[0]-1-an[1]+1;i<n-an[0]-1;i++)
				cout<<s[i];
		}
		if(an[2]==0)
		{
			for(int i=n-an[0];i<n;i++)
				cout<<s[i];
		}
		else
		{
			for(int i=n-an[0]-1;i<n;i++)
				cout<<s[i];

		}
		cout<<'\n';
	}
	return 0;
}