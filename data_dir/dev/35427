#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("input.txt");ofstream out("output.txt");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

ll a,k;
vec<ll> m;
vec<int> sz, p;

int find(int x){
    return p[x]==x ? x : p[x] = find(p[x]);
}

int unite(int x, int y){
    x = find(x);
    y = find(y);
    if(x==y) return 0;
    if(sz[x] > sz[y]) sz[x]+=sz[y], sz[y] = 0, p[y] = x;
    else sz[y]+=sz[x], sz[x] = 0, p[x] = y;
    return 1;
}

int main() {
    fast;
    cin>>a>>k;
    sz = vec<int>(a, 1);
    p = vec<int>(a);
    for(int q=0;q <a; q++) p[q] = q;
    vec<uset<int>> l(a, uset<int>());
    m = vec<ll>(a);
    for(int q=0; q<k; q++){
        ll x,y; cin>>x>>y; x--, y--;
        l[x].insert(y);
        l[y].insert(x);
        m[x]++;
        m[y]++;
    }
    vec<int> malo;
    for(int q=0; q<a; q++){
        if(m[q]>a/4){
            for(int w=0; w<a; w++){
                if(q==w || l[q].count(w)) continue;
                unite(q,w);
            }
        }
        else malo.pb(q);
    }
    for(int q=1; q<malo.size(); q++) unite(malo[q-1], malo[q]);
    set<int> s;
    for(int q=0; q<a; q++){
        s.insert(find(q));
    }
    cout<<s.size()-1;
}