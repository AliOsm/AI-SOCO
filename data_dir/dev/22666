#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int)1e9 + 1;
const ld EPS = 1e-9;


const int maxn = 1000 + 10;
int a[maxn];

int n;

bool read() {
  if (scanf("%d", &n) < 1) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    scanf("%d", &a[i]);
  }
  return 1;
}

const int MOD = (int) 1e9 + 7;

void add(int &x, int y) {
  if ((x += y) >= MOD) {
    x -= MOD;
  }
}

int mult(int x, int y) {
  return (long long) x * y % MOD;
}

int C[maxn][maxn];

void precalc() {
  memset(C, 0, sizeof(C));
  for (int n = 0; n < maxn; ++n) {
    C[n][0] = C[n][n] = 1;
    for (int k = 1; k < n; ++k) {
      C[n][k] = C[n - 1][k - 1];
      add(C[n][k], C[n - 1][k]);
    }
  }
}

void solve() {
  int k = a[0];
  int res = 1;
  for (int i = 1; i < n; ++i) {
    int cur = 0;
    for (int left = 0; left < a[i]; ++left) {
      add(cur, C[left + k - 1][k - 1]);
    }
    res = mult(res, cur);
    k += a[i];
  }
  printf("%d\n", res);
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
