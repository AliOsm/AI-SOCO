#include<bits/stdc++.h>
using namespace std;


// SIGMA[0] will not be considered
const string SIGMA = " abcdefghijklmnopqrstuvwxyz";
vector<int> INV_SIGMA(256);
const int SGSZ = 30;

struct PMA {
  int dp = 0;
  PMA *next[SGSZ];  // next[0] is for fail
  vector<int> ac;
  PMA *last; // state of longest accepted string that is pre of this
  PMA() : last(nullptr) { fill(next, next + SGSZ, nullptr); }
};

template<typename T>
PMA *buildPMA(const vector<T> &p) {
  PMA *root = new PMA;
  for (int i = 0; i < p.size(); ++i) {  // make trie
    PMA *t = root;
    for (int j = 0; j < p[i].size(); ++j) {
      int c = INV_SIGMA[p[i][j]];
      if (t->next[c] == nullptr) t->next[c] = new PMA;
      t = t->next[c];
    }
    t->ac.push_back(i);
    t->dp += 1;
  }
  queue<PMA *> que;  // make failure link using bfs
  for (int c = 1; c < SGSZ; ++c) {
    if (root->next[c]) {
      root->next[c]->next[0] = root;
      que.push(root->next[c]);
    } else root->next[c] = root;
  }
  while (!que.empty()) {
    PMA *t = que.front();
    que.pop();
    for (int c = 1; c < SGSZ; ++c) {
      if (t->next[c]) {
        que.push(t->next[c]);
        PMA *r = t->next[0];
        while (!r->next[c]) r = r->next[0];
        t->next[c]->next[0] = r->next[c];
        t->next[c]->last = r->next[c]->ac.size() ? r->next[c] : r->next[c]->last;
      }
    }
    if (t->last) t->dp += t->last->dp;
  }
  return root;
}

void destructPMA(PMA *root) {
  queue<PMA *> que;
  que.emplace(root);
  while (!que.empty()) {
    PMA *t = que.front();
    que.pop();
    for (int c = 1; c < SGSZ; ++c) {
      if (t->next[c] && t->next[c] != root) que.emplace(t->next[c]);
    }
    delete t;
  }
}


template<typename T>
vector<int> match(const T &t, PMA *v) {
  vector<int> num(t.size());
  for (int i = 0; i < t.size(); ++i) {
    int c = INV_SIGMA[t[i]];
    while (!v->next[c]) v = v->next[0];
    v = v->next[c];
    num[i] = v->dp;
  }
  return num;
}

       


int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);
  string t; cin >> t;
  for (int i = 0; i < SIGMA.size(); ++i) INV_SIGMA[SIGMA[i]] = i;
  int n; cin >> n;
  vector<string> s(n);
  for (int i = 0; i < n; ++i) cin >> s[i];
  auto pma = buildPMA(s);
  auto ft = match(t, pma);
  destructPMA(pma);
  reverse(t.begin(), t.end());
  for (int i = 0; i < n; ++i) {
    reverse(s[i].begin(), s[i].end());
  }
  pma = buildPMA(s);
  auto bk = match(t, pma);
  destructPMA(pma);
  long long ans = 0;
  //for (int i = 0; i < ft.size(); ++i) cout << ft[i] << " \n"[i == ft.size() - 1];
  //for (int i = 0; i < bk.size(); ++i) cout << bk[i] << " \n"[i == ft.size() - 1];
  for (int i = 0; i < t.size() - 1; ++i) {
    ans += 1ll * ft[i] * bk[t.size() - 1 - (i + 1)];
  }
  cout << ans << '\n';
}
