#include <bits/stdc++.h>
using namespace std;

string s;
map <char, vector<int> > v;
char grid[2][13];
int dx[8] = {-1, -1, 0, 1, 1, 1, 0, -1};
int dy[8] = {0, 1, 1, 1, 0, -1, -1, -1};
pair<int, int> dir[26];

bool within(int x, int y){
    return (x >= 0 && x < 2 && y >= 0 && y < 13);
}

bool check(int x, int y){
    int pos = 1;

    //cout << x << " " << y << endl;
    int i = 0;
    for (; i < 27; i++){
        bool f = false;
        for (int j = 0; j < 8; j++){
            int nx = x + dx[j];
            int ny = y + dy[j];

            if (within(nx, ny)){
                //cout << grid[x][y] << " " << x << " " << y << endl;
                if (grid[nx][ny] == s[pos]){
                    x = nx;
                    y = ny;
                    pos++;
                    f = true;
                    break;
                }
            }
        }
        if (!f) break;
        //cout << s[pos];
    }
    //cout << " " << i << endl;
    return i >= 26;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);

    cin >> s;
    char c;
    for (int i = 0; i < s.length(); i++){
        v[s[i]].push_back(i);
        if (v[s[i]].size() > 1){
            c = s[i];
            if (abs(v[s[i]][0] - v[s[i]][1]) == 1){
                cout << "Impossible" << endl;
                return 0;
            }
        }
    }

    for (int i = 0; i < 13; i++){
        dir[i] = {0, i};
    }

    for (int i = 13; i >= 0; i--){
        dir[26-i] = {1, i};
    }

    s.erase(s.begin() + v[c][1]);
    for (int i = 0; i < 13; i++){
        grid[0][i] = s[i];
    }

    for (int i = 0; i < 13; i++){
        grid[1][i] = s[s.length()-1-i];
    }

    string rep = "";
    rep += c;
    s.insert(v[c][1], rep);
    int xp = 0, yp = 0, pp = 1;
    while (pp < 26 && !check(xp, yp)){
        int tmp = grid[0][12];
        for (int i = 12; i > 0; i--){
            grid[0][i] = grid[0][i-1];
        }

        grid[0][0] = grid[1][0];

        for (int i = 0; i < 12; i++){
            grid[1][i] = grid[1][i+1];
        }

        grid[1][12] = tmp;

        xp = dir[pp].first;
        yp = dir[pp].second;
        pp++;

    }

    for (int i = 0; i < 2; i++){
        for (int j = 0; j < 13; j++){
            cout << grid[i][j];
        }
        cout << endl;
    }

    return 0;
}
