#include <bits/stdc++.h>
using namespace std;

void B();
void c();
int main() {
	ios::sync_with_stdio(0);
	cout.tie(0); cin.tie(0);
	B();
}


#define int long long 
const int N = 2e5 + 50;
int T[4 * N];
int min_digit[4 * N][10];
int inf = 1e15;
void update(int v, int tl, int tr, int pos, int val) {
	if (tl == tr) {
		T[v] = inf;
		int temp = val;
		int cnt = 0;
		while (cnt<10) {
			if (temp % 10 != 0) {
				min_digit[v][cnt] = val;
			}
			else {
				min_digit[v][cnt] = inf;
			}
			cnt++;
			temp /= 10;
		}
		return;
	}
	int mid = (tl + tr) >> 1;

	if (pos <= mid) {
		update(v << 1, tl, mid, pos, val);
	}
	else {
		update((v << 1) | 1, mid + 1, tr, pos, val);
	}

	T[v] = min(T[v << 1], T[v << 1 | 1]);
	for (int i = 0; i <= 9; i++) {
		T[v] = min(T[v], min_digit[v << 1][i] + min_digit[v << 1 | 1][i]);
		min_digit[v][i] = min(min_digit[v << 1][i], min_digit[v << 1 | 1][i]);
	}
}

int gett(int v, int tl, int tr, int l, int r, vector<int> &x) {
	if (tl == l && tr == r) {
		for (int i = 0; i < 10; i++)
			x[i] = min(x[i], min_digit[v][i]);
		return T[v];
	}

	int mid = (tl + tr) >> 1;
	int ret = inf;
	vector<int>left(10, inf), right(10, inf);

	if (l <= mid) {
		ret = min(ret, gett(v << 1, tl, mid, l, min(r, mid), left));
	}
	if (r > mid) {
		ret = min(ret, gett(v << 1 | 1,  mid + 1,tr, max(l, mid + 1), r, right));
	}
	for (int i = 0; i < 10; i++)
		ret = min(ret, left[i] + right[i]);

	for (int i = 0; i < 10; i++)
		x[i] = min(x[i], min(left[i], right[i]));

	return ret;
}

void B() {
	int n, m; cin >> n >> m; 
	for (int i = 1; i <= n; i++) {
		int a; cin >> a;
		update(1, 1, n, i, a);
	}

	while (m--) {
		int t, x, y; cin >> t >> x >> y; 

		if (t == 1) {
			update(1, 1, n, x, y);
		}
		else {
			vector<int> g(10);
			int ret = gett(1, 1, n, x, y, g);
			if (ret == inf)
				cout << -1 << '\n';
			else
				cout << ret << '\n';
		}
	}



}

