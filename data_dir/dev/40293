#include <bits/stdc++.h>

using namespace std;
typedef  long long ll;
typedef unsigned long long ull;
int inf_int=1e9;
ll inf_ll=1e17;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
#define pb push_back
const double pi=3.1415926535898;
#define dout if(debug) cout
#define fi first
#define se second
#define sp setprecision
#define siz(a) a.size()

const ll mod = 99990001;
const int MAXN =5e3+10;
bool debug = false;

typedef long double dbl;

int x[MAXN];
struct hole{
    int x,c;

    bool operator < (hole other){
        return x<other.x;
    }
};
hole holes[MAXN];
ll dp[5010][5010];
ll dis[5010];

void fun(int i,int posl,int posr,int optl,int optr){
    if(posl>posr){
        return;
    }
   // cout << i <<" "<<posl<<" "<<posr<<" "<<optl<<" " <<optr<<endl;
    int mid = (posl+posr)>>1;

    ll mn = min(dp[i-1][mid-1] + dis[mid] - dis[mid-1],dp[i][mid]); int ind = mid-1;
    for(int e=optl;e<=optr && e<=mid;++e){
       ll val = dp[i-1][e] + (dis[mid] - dis[e]);
       if(mid-e > holes[i].c)
            val = inf_ll;
       if(val<mn){
            mn = val;
            ind = e;
       }
    }
    dp[i][mid] = mn;
    fun(i,posl,mid-1,optl,ind);
    fun(i,mid+1,posr,ind,optr);
}
void solve()
{
    int n,m;
    cin >> n >> m;
    for(int i=1;i<=n;++i){
        cin >> x[i];
    }
    sort(x+1,x+n+1);
    int sum = 0;
    for(int i=1;i<=m;++i){
        cin >> holes[i].x >> holes[i].c;
        sum+=holes[i].c;
    }
    if(sum<n)
    {
        cout << -1;
        return;
    }
    for(int i=1;i<=m;++i){
        for(int e=1;e<=n;++e)
            dp[i][e]=inf_ll;
    }
    sort(holes+1,holes+m+1);
    for(int i=1;i<=n;++i){
        if(i>holes[1].c){
            dp[1][i] = inf_ll;
        } else {
            dp[1][i] = dp[1][i-1] + abs(holes[1].x - x[i]);
        }
    }

    for(int i=2;i<=m;++i){
        for(int e=1;e<=n;++e){
            dis[e] = dis[e-1] + abs(x[e]-holes[i].x);
        }
        fun(i,1,n,0,n);
    }
  /*  for(int i=1;i<=m;++i){
        cout <<holes[i].x<<" : ";
        for(int e=1;e<=n;++e){
            cout << min(dp[i][e],(ll)inf_ll)<<" ";
        }
        cout <<endl;
    }*/
    ll ans = dp[m][n];
    cout << ans;


}



#define FILE "close-vertices"
int main()
{
        #ifdef zxc
            freopen("input.txt","r",stdin);
            freopen("output1.txt","w",stdout);
        #else

        #endif // zxc


         ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);



        int t=1;
        while(t--)
           solve();
        return 0;
}
