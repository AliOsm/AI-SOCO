#include <bits/stdc++.h>
using namespace std;
#define finish(x) return cout << x << endl, 0
#define ll long long

const int N = 300001;

int n, x, w[N];
ll best[N], ans;
vector <pair <int, int> > v[N];

void dfs(int node, int pnode){
    best[node] = w[node];
    vector <ll> cur;
    for(auto &i : v[node]){
        if(i.first == pnode) continue;
        dfs(i.first, node);
        ll c = best[i.first] - i.second + w[node];
        cur.push_back(max(0LL, best[i.first] - i.second + w[node]));
        best[node] = max(best[node], c);
    }
    sort(cur.rbegin(), cur.rend());
    ans = max(ans, best[node]);
    if(cur.size() == 0) return;
    if(cur.size() == 1) ans = max(ans, cur[0]);
    else ans = max(ans, cur[0] + cur[1] - w[node]);
}
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n;
    for(int i = 1 ; i <= n ; i++)
        cin >> w[i];
    for(int i = 0 ; i < n - 1 ; i++){
        int x, y, z;
        cin >> x >> y >> z;
        v[x].push_back(make_pair(y, z));
        v[y].push_back(make_pair(x, z));
    }
    dfs(1, 0);
    cout << ans << endl;
}
