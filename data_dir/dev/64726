#include <functional>
#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstdlib>
#include <numeric>
#include <iomanip>
#include <stdio.h>
#include <cstring>
#include <cassert>
#include <vector>
#include <math.h>
#include <queue>
#include <stack>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;

template <typename T>
T nextInt() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if (ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return x * p;
}

const int maxN = (int)1e5 + 10;
const int INF = (int)1e9;
const int mod = (int)1e9 + 7;
const ll LLINF = (ll)1e18;

int a[maxN];

int leftest[maxN];
int rightest[maxN];
pair <int, int> v[maxN];

int main() {

   // freopen(".in", "r", stdin);
   // freopen(".out", "w", stdout);

    srand(time(NULL));

    int n, m;
    n = nextInt<int>();
    m = nextInt<int>();
    for (int i = 1; i <= n; ++i) {
        a[i] = nextInt<int>();
    }

    for (int i = 1; i < n; ++i) {
        v[i] = make_pair(abs(a[i] - a[i + 1]), i);
    }

    sort(v + 1, v + n);
    reverse(v + 1, v + n);

    set <int> avail;
    avail.insert(0);
    avail.insert(n);

    for (int i = 1; i < n; ++i) {
        auto iter = avail.lower_bound(v[i].second);
        leftest[i] = *--iter;
         iter = avail.lower_bound(v[i].second);
        rightest[i] = *iter;
        avail.insert(v[i].second);
     //   cout << v[i].first << ' ' << v[i].second << ' ' << leftest[i] << ' ' << rightest[i] << '\n';
    }

    while(m--) {
        int l = nextInt<int>();
        int r = nextInt<int>();
        long long answer = 0LL;

    set <int> avail;
    avail.insert(0);
    avail.insert(r -l + 1);
   // cout<<r-l+1<<'\n';
        for (int i = 1; i < n; ++i) {
            if(l <= v[i].second && v[i].second < r) {
            int L = max(l - 1, leftest[i]);
            int R = min(r, rightest[i]);
        // cout << L << ' ' << R << ' ' << v[i].second-l+1 << '\n';
                answer += v[i].first * 1LL * (v[i].second - L) * (R - v[i].second);
            }
        }
        printf("%I64d\n", answer);
    }
    return 0;
}
