#include <bits/stdc++.h>

#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define for1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(x) (x).begin(), (x).end()
#define clr(x) memset((x), 0, sizeof((x)));
#define pb push_back
#define mp make_pair
#define x first
#define y second

using namespace std;
typedef long double ld;
typedef long long ll;
typedef pair<int, int> PII;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef long long i64;
typedef unsigned long long ull;

template<class T>
bool remin(T &a, const T &b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}

template<class T>
bool remax(T &a, const T &b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

int nxt() {
    int x;
    scanf("%" PRId32, &x);
    return x;
}

ll nxtll() {
    ll x;
    scanf("%" PRId64, &x);
    return x;
}

ll gcd(ll a, ll b) {
    a = abs(a);
    b = abs(b);
    while (b) {
        a %= b;
        swap(a, b);
    }
    return a;
}

typedef ll ptdata;

struct pt {
    ptdata x, y;

    pt() {}

    pt(ptdata x, ptdata y) : x(x), y(y) {}

    inline pt operator-(const pt &r) const {
        return pt(x - r.x, y - r.y);
    }

    inline pt operator+(const pt &r) const {
        return pt(x + r.x, y + r.y);
    }

    inline pt operator*(const ld &r) const {
        return pt(x * r, y * r);
    }

    inline ptdata sqlen() const {
        return abs(x * x + y * y);
    }

    inline bool operator<(const pt &r) const {
        if (x != r.x) return x < r.x;
        return y < r.y;
    }

    inline bool operator==(const pt &r) const {
        return x == r.x && y == r.y;
    }
};

ostream &operator<<(ostream &os, const pt &p) {
    return os << "(" << p.x << "," << p.y << ")";
}

inline ptdata cross(const pt &l, const pt &r) {
    return l.x * r.y - l.y * r.x;
}

inline ptdata dot(const pt &l, const pt &r) {
    return l.x * r.x + l.y * r.y;
}


ll pwmod(ll a, ll n, ll mod) {
    ll ret = 1;
    while (n) {
        if (n & 1) ret = ret * a % mod;
        a = a * a % mod;
        n >>= 1;
    }
    return ret;
}

template<typename T>
inline T sqr(T x) {
    return x * x;
}


int n;

vector<vector<int> > A;

void gen() {
    A.resize(n);
    forn(i, n) {
        A[i].resize(n);
        forn(j, n) {
            A[i][j] = rand() % 10000;
        }
        A[i][i] = 0;
    }
}


vector<int> queryW(vector<int> a) {
    for (int &x : a) {
        --x;
        assert(x >= 0 && x < n);
    }
    vector<int> ret(n, INT_MAX);
    forn(i, n) {
        for (int j : a) {
            remin(ret[i], A[i][j]);
        }
    }
    return ret;
}

vector<int> queryR(const vector<int> &a) {
    if (a.empty()) {
        return vector<int>(n, INT_MAX);
    }
    cout << a.size() << endl;
    for (int x : a) {
        cout << x << " ";
    }
    cout << endl;
    vector<int> ret(n);
    forn(i, n) {
        cin >> ret[i];
    }
    return ret;
}

vector<int> query(const vector<pii> &s) {
    vector<int> nums;
    for (pii p : s) {
        for (int i = p.x; i < p.y && i < n; ++i) {
            nums.push_back(i + 1);
        }
    }
    return queryR(nums);
}

vector<int> getAns() {
    vector<int> ret(n, INT_MAX);
    forn(i, n) {
        forn(j, n) {
            if (i == j) continue;
            remin(ret[i], A[i][j]);
        }
    }
    return ret;
}

void solve() {
    srand(1235);
    cin >> n;
    //gen();
    vector<vector<pii> > seg;
    vector<vector<int> > ans;
    int m = 1024;
    while (m > 1) {
        int len = m >> 1;
        vector<pii> s1;
        for (int i = 0; i < n; i += 2 * len) {
            s1.push_back(pii(i, i + len));
        }
        seg.push_back(s1);
        ans.push_back(query(s1));

        vector<pii> s2;
        for (int i = len; i < n; i += 2 * len) {
            s2.push_back(pii(i, i + len));
        }
        seg.push_back(s2);
        ans.push_back(query(s2));

        m = len;
    }
    assert(seg.size() <= 20);

    vector<int> res(n);
    forn(i, n) {
        res[i] = INT_MAX;
        forn(j, ans.size()) {
            bool ok = true;
            for (const pii &p : seg[j]) {
                if (p.x <= i && i < p.y) {
                    ok = false;
                }
            }
            if (ok) {
                remin(res[i], ans[j][i]);
            }
        }
    }
    cout << "-1\n";
    forn(i, n) {
        cout << res[i] << " ";
    }
    cout << endl;
    //assert(res == getAns());
}


void prepare() {

}

int main() {
#ifdef LOCAL
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    prepare();

    int t = 1;//nxt();
    forn(i, t) {
        solve();
    }

    cerr << "Time " << clock() / (double) CLOCKS_PER_SEC << endl;
    return 0;
}
