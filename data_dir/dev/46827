#include <bits/stdc++.h>

using namespace std;

const int N = 1e5 + 55;

int n, S, s[N], a[N], b[N], loss[N];
vector<pair<int, int>> typeA, typeB;
int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif
	scanf("%d %d", &n, &S);
	for (int i = 0; i < n; ++i) {
		scanf("%d %d %d", s + i, a + i, b + i);
	}
	long long optimal = 0, sumSlices = 0, eatA = 0, eatB = 0;
	for (int i = 0; i < n; ++i) {
		sumSlices += s[i];
		if (a[i] > b[i]) {
			eatA += s[i];
			optimal += 1ll * s[i] * a[i];
			loss[i] = a[i] - b[i];
			typeA.push_back({loss[i], i});
		} else {
			eatB += s[i];
			optimal += 1ll * s[i] * b[i];
			loss[i] = b[i] - a[i];
			typeB.push_back({loss[i], i});
		}
	}
	sort(typeA.begin(), typeA.end());
	sort(typeB.begin(), typeB.end());
	long long pizzaTypeA = (eatA + S - 1) / S;
	long long pizzaTypeB = (eatB + S - 1) / S;
	if (pizzaTypeA + pizzaTypeB == (sumSlices + S - 1) / S) {
		printf("%lld\n", optimal);
		return 0;
	}
	eatA %= S;
	eatB %= S;
//	minus one from?
//	choose eatA go to typeB
//	choose eatB go to typeA
	long long lossA = 0;
	for (auto person: typeA) {
		int i = person.second;
		lossA += min(1ll * s[i], eatA) * person.first;
		eatA -= s[i];
		if (eatA <= 0)
			break;
	}
	long long lossB = 0;
	for (auto person: typeB) {
		int i = person.second;
		lossB += min(1ll * s[i], eatB) * person.first;
		eatB -= s[i];
		if (eatB <= 0)
			break;
	}
	printf("%lld\n", optimal - min(lossA, lossB));
	
	return 0;
}