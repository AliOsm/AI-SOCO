#pragma comment(linker, "/STACK:167177216")

#include <stdio.h>
#include <stack>
#include <math.h>
#include <iostream>
#include <algorithm>
#include <string.h>
#include <string>
#include <memory.h>
#include <vector>
#include <map>
#include <queue>
#include <set>
#include <time.h>
using namespace std;

#define mp make_pair
#define pb push_back
#define pii pair<int, int>
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define x first
#define y second

typedef long long li;
typedef long double ld;
typedef unsigned long long uli;

const int INF = 1e9;
const ld eps = 1e-9;
const li mod = INF + 7;
const li INF64 = (li)(INF) * (li)(INF);

const int ddx[] = {-1, 1, 1, -1};
const int ddy[] = {1, 1, -1, -1};
const int dx[] = {-1, -1, 0, 1, 1, 1, 0, -1};
const int dy[] = {0, 1, 1, 1, 0, -1, -1, -1};
const int dx4[] = {-1, 0, 1, 0};
const int dy4[] = {0, 1, 0, -1};
const int dxh[] = {-2, -2, -1, 1, 2, 2, 1, -1};
const int dyh[] = {1, -1, -2, -2, -1, 1, 2, 2};
const string dirs[] = {"RIGHT", "UP", "LEFT", "DOWN"};
const ld pi = acos(-1.0);

bool used[(int)(1e6) + 111];
set<int> bad;

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    //ios_base::sync_with_stdio(false);
    int n;
    li sum = 0;
    scanf("%d", &n);
    vector<int> X;
    forn(i, n)
    {
        int val;
        scanf("%d", &val);
        used[val] = true;
        X.pb(val);
        sum += val - 1;
    }

    int l = 1, r = 1;
    n = (int)(1e6) - n;
    vector<int> ans;
    int m = (int)(1e6);

    int cnt = X.size();
    forn(i, X.size())
    {
        if(bad.find(X[i]) != bad.end())
            continue;
        if(!used[m - X[i] + 1])
        {
            used[m - X[i] + 1] = true;
            ans.pb(m - X[i] + 1);
            //cnt--;
        }
        else
        {
            bad.insert(m - X[i] + 1);
            while(used[r] || used[m - r + 1])
                r++;
            used[r] = used[m - r + 1] = true;
            ans.pb(r);
            ans.pb(m - r + 1);
            r++;
            //cnt -= 2;
            //i++;
        }
    //  if(cnt == 0)
        //  break;
    }

    printf("%d\n", (int)(ans.size()));
    forn(i, ans.size())
        printf("%d ", ans[i]);
    printf("\n");
    return 0;
}