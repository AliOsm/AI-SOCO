#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#include <bits/stdc++.h>

#define all(c) c.begin(),c.end()
#define ll long long
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define mod 1000000007
#define PI 3.14159265
#define pll pair<ll, ll>
using namespace std;

typedef unsigned long long ull;

bool is_prime(int n) {

    for (int i = 2; i * i <= n; ++i) {
            if (n % i == 0) {
                  return false;
            }
    }
    return true;
}

inline ll getPow(ll a,ll b){
    ll res = 1ll,tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
           res %= mod;
       }
       tp *= tp;
       tp %= mod;
       b >>= 1ll;
    }
    return res;
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

void ok() {
    puts("Yes");
    exit(0);
}

void no() {
    puts("No");
    exit(0);
}

inline void out(auto mas) {
    for(int i = 0; i < mas.size(); i++) {
           cout << mas[i] << " ";
    }
}
ll xx[] = {-1, 1, 0, 0};
ll yy[] = {0, 0, -1, 1};

// please, accepted!

const int N = 1111111;

int main()
{

    ll n = nxt(), a = nxt(), b = nxt();
    vector<ll> mas(n);
    for(int i = 0; i < n; i++) {
           mas[i] = nxt();
    }
    ll ans = 0;
    for(int i = 0; i < n / 2; i++) {
           if(mas[i] != mas[n - i - 1]) {
                 if(mas[i] == 2) {
                       if(mas[n - i - 1] == 0) ans += a;
                       else ans += b;
                       mas[i] = mas[n - i - 1];
                 }
                 else if(mas[n - i - 1] == 2) {
                       if(mas[i] == 0) ans += a;
                       else ans += b;
                       mas[n - i - 1] = mas[i];
                 }
                 else return cout << -1, 0;
           }
    }
    for(int i = 0; i < n; i++) {
           if(mas[i] == 2) {
                 ans += min(a, b);
           }
    }
    cout << ans;
    return 0;
}
