#include <algorithm>
#include <iostream>
#include <iomanip>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdlib>
#include <cstdio>
#include <bitset>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <set>

#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

typedef long long ll;
typedef pair<int, int> ii;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 212121;

int n;
ll k;

ll smallest = longinf;

pair<ll, ll> a[N];
vector<ll> ls, rs;
double suml[N], sumr[N];

vector<ll> nums;

bool bad(ll l,ll r){
    if(r - l + 1 > smallest)
        return true;
    int id = lower_bound(all(rs), r) - rs.begin() - 1;
    double res = 0ll;
    if(id >= 0){
        res += (double)r * (id + 1) - sumr[id];
    }
    id = upper_bound(all(ls), l) - ls.begin();
    if(id < n){
        double cnt = n - 1 - id + 1;
        res += (suml[n - 1] - (id == 0? 0ll : suml[id - 1])) - cnt * l;
    }
    return res > k;
}

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    n = read();
    scanf(" %I64d", &k);

    for(int i = 1; i <= n; i++){
        scanf(" %I64d %I64d", &a[i].first, &a[i].second);
        ls.push_back(a[i].first);
        rs.push_back(a[i].second);
        umin(smallest, a[i].second - a[i].first + 1);
    }

    sort(all(ls));
    sort(all(rs));

    suml[0] = ls[0];
    for(int i = 1; i < n; i++)
        suml[i] = suml[i - 1] + ls[i];
    sumr[0] = rs[0];
    for(int i = 1; i < n; i++)
        sumr[i] = sumr[i - 1] + rs[i];

    for(int sz = 1; sz <= 18; sz++){
        for(int mask = 0; mask < (1 << sz); mask++){
            ll x = 0;
            for(int i = 0; i < sz; i++){
                x *= 10ll;
                if((mask >> i) & 1)
                    x += 4ll;
                else
                    x += 7ll;
            }
            nums.push_back(x);
        }
    }

    sort(all(nums));//we can get rid of this

    int sz = nums.size();
    int ptr = 0;
    int ans = 0;
    for(int i = 0; i < sz; i++){
        while(ptr <= i && bad(nums[ptr], nums[i]))
            ++ptr;
        umax(ans, i - ptr + 1);
    }

    printf("%d\n", ans);

    return 0;
}
