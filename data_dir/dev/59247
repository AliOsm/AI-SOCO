#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

#define PB push_back
//#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)

int a[(1 << 21) + 5];
int h, g;
int n;
vector<int> vec;
int chng;
ll sum;


bool dfs2( int u, int height )
{
	if( a[u] == 0 ) {
		chng = a[u];
		if( height == g+1 ) return 0;
		return 1;
	}
	int le = (u << 1), ri = le|1;
	bool ret = 0;
	if( a[le] > a[ri] ) ret = dfs2( le, height+1 );
	else ret = dfs2( ri, height+1 );
	if( ret ) {
		int temp = a[u];
		a[u] = chng;
		chng = temp;
	}
	return ret;
}

void dfs1( int u, int height )
{
	if( a[u] == 0 ) return;
	while( dfs2(u, height) ) {
		sum -= chng;
		vec.PB( u );
	}
	int le = (u << 1), ri = le|1;
	dfs1( le, height+1 );
	dfs1( ri, height+1 );
}

int main()
{
	optimize();
	int t;
	cin >> t;
	while(t--) {
		sum = 0;
		vec.clear();
		cin >> h >> g;
		n = (1 << h)-1;
		for( int i = 1; i <= n; ++i ) {
			cin >> a[i];
			sum += a[i];
		}
		dfs1( 1, 1 );
		cout << sum << endl;
		for( auto x : vec ) cout << x << " "; cout << endl;
		for( int i = 1; i <= n; ++i ) a[i] = 0;
	}
}





















