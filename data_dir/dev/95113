#include <bits/stdc++.h>

using namespace std;
typedef long long ll;


int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL); 
  ll n, ta = 0, tb = 0;
  cin >> n;
  vector<ll> a(n);
  for (ll i = 0; i < n; i++) {
    cin >> a[i];
    ta += a[i];
  }
  ll k;
  cin >> k;
  vector<ll> b(k);
  for (ll j = 0; j < k; j++){ 
    cin >> b[j];
    tb += b[j];
  }
  if (ta != tb) {cout << "NO\n"; return 0;}
  vector<vector<ll> >bb(k); 
  
  
  ll pos = 0;
  for (ll i = 0;  i < k; i++) {
    ll t = 0;
    while (pos < n and t < b[i]) { t += a[pos]; bb[i].push_back(a[pos]); pos++;}
    if (t != b[i]) {cout << "NO\n"; return 0;}
  }
  

  
  
  vector<pair<int, bool> > sol;
  for (int i = 0;  i < k; i++) {
    vector<pair<ll, int >> kk(bb[i].size());
    for (int j = 0; j < (int) bb[i].size(); j++) 
      kk[j] = {bb[i][j], j};
    sort(kk.begin(), kk.end());
    if (bb[i].size() > 1 and kk[0].first == kk[bb[i].size()-1].first)  {cout << "NO\n"; return 0;}
    if (bb[i].size() > 1) {
      ll midab =  kk[bb[i].size()-1].first;
      if (bb[i][0] == midab) {
        int big = 0;
        while (bb[i][big] == midab) big++;
        big --;
        for (int j = big; j < (int) bb[i].size()-1; j++) 
          sol.push_back({i+big, true});
        for (int j = 0 ; j < big;  j++) 
          sol.push_back({i+big-j, false});
      }
      else {
        int big = 0;
        while (bb[i][big] < midab) big++;
        for (int j = 0 ; j < big;  j++) 
          sol.push_back({i+big-j, false}); 
        for (int j = big; j < (int) bb[i].size()-1; j++) 
          sol.push_back({i, true});
      }
    }
  }
  cout << "YES" << "\n";
  for (auto x: sol) {
    if (x.second) cout << x.first+1 << " R\n";
    else cout << x.first+1 << " L\n";
  }
  return 0;
}

