#include<iostream>
#include<cstdio>
#include<vector>
#include<cmath>
#include<map>
#include<set>
#include<string>
#define mod 1000000007
#define inf 2000000000
using namespace std;
int n,m,k,w;
char s[1003][13][13];
struct rebro
{
    int x,y,cost;
};
rebro a[1000003];
rebro b[1000003];
int coun;
void mergesort(rebro *a,rebro *b,int n)
{
    int i,i0,i1,iRight,iEnd,width,j;
    for(width=1;width<n;width*=2)
        for(i=0;i<n;i+=width*2)
        {
            i0=i;
            i1=iRight=min(i+width,n);
            iEnd=min(i+width*2,n);
            for(j=i;j<iEnd;j++)
                if(i0<iRight && (i1==iEnd || a[i0].cost<a[i1].cost))
                    b[j]=a[i0++];
                else
                    b[j]=a[i1++];
            for(j=i;j<iEnd;j++)
                a[j]=b[j];
        }
}
int pred[1003];
int siz[1003];
int findset(int v)
{
    if(pred[v]==v)
        return v;
    return pred[v]=findset(pred[v]);
}
void uniset(int x,int y)
{
    if(siz[x]>siz[y])
    {
        siz[x]+=siz[y];
        pred[y]=x;
    }
    else
    {
        siz[y]+=siz[x];
        pred[x]=y;
    }
}
vector <int> g[1003];
bool flag[1003];
void dfs(int x)
{
    flag[x]=true;
    for(int i=0;i<g[x].size();i++)
        if(!flag[g[x][i]])
        {
            printf("%d %d\n",g[x][i],x);
            dfs(g[x][i]);
        }
}
int main()
{
    scanf("%d %d %d %d",&n,&m,&k,&w);
    int i,j,kk,kkk;
    for(kk=0;kk<k;kk++)
        for(i=0;i<n;i++)
            scanf("%s",s[kk][i]);
    for(i=0;i<k;i++)
        for(j=i+1;j<k;j++)
        {
            int res=0;
            for(kk=0;kk<n;kk++)
                for(kkk=0;kkk<m;kkk++)
                    if(s[i][kk][kkk]!=s[j][kk][kkk])
                        res+=w;
            a[coun].cost=res;
            a[coun].x=i+1;
            a[coun++].y=j+1;
        }
    for(i=0;i<k;i++)
    {
        a[coun].cost=n*m;
        a[coun].x=i+1;
        a[coun++].y=0;
    }
    mergesort(a,b,coun);
    for(i=0;i<=k;i++)
    {
        pred[i]=i;
        siz[i]=1;
    }
    int ans=0;
    for(i=0;i<coun;i++)
    {
        int tem1=findset(a[i].x);
        int tem2=findset(a[i].y);
        if(tem1!=tem2)
        {
            ans+=a[i].cost;
            g[a[i].x].push_back(a[i].y);
            g[a[i].y].push_back(a[i].x);
            uniset(tem1,tem2);
        }
    }
    printf("%d\n",ans);
    dfs(0);
    return 0;
}

