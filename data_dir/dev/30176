#include <bits/stdc++.h>
using namespace std;
#define x first
#define y second
#define dbg(x) cout << #x << '=' << x << '\n';
#define ll long long
#define pi pair<int,int>
#define pl pair<long long,long long>
#define lg length()
#define sz size()
#define pb push_back
#define MAXN 100005
#define INF 1000000005
#define LINF 1000000000000000005

int n,m;

long long l[1000005],d[1000005],x,t;

vector <long long> s[1000005],p,q,f[1000005];

void Find(int nod, long long dist){
    d[nod]=dist;
    if(2*nod<=n){
        Find(2*nod,dist+l[2*nod]);
    }
    if(2*nod+1<=n){
        Find(2*nod+1,dist+l[2*nod+1]);
    }
    p.clear(); q.clear();
    if(2*nod<=n){
        p=s[2*nod];
    }
    if(2*nod+1<=n){
        q=s[2*nod+1];
    }
    int i=0,j=0;
    s[nod].pb(dist);
    while(i<p.size() || j<q.size()){
        if(i>=p.size()){
            s[nod].pb(q[j]),j++;
        }
        else if(j>=q.size()){
            s[nod].pb(p[i]),i++;
        }
        else{
            if(p[i]<=q[j]) s[nod].pb(p[i]),i++;
            else s[nod].pb(q[j]),j++;
        }
    }
    long long temp=0;
    for(long long i : s[nod]){
        temp+=i;
        f[nod].pb(temp);
    }
}

long long BS(int nod, long long t){
    int l=0,r=s[nod].sz-1;
    while(l!=r){
        int mid=(l+r+1)/2;
        if(s[nod][mid]>t) r=mid-1;
        else l=mid;
    }
    if(s[nod][l]>t) return 0;
    else return t*(l+1)-f[nod][l];
}

long long Qry(int nod, long long h){
    long long ans=BS(nod,h);
    int last;
    while(nod!=1){
        h-=2*l[nod];
        last=nod;
        nod/=2;
        if(h<=0) break;
        if(h-d[nod]>=0) ans+=h-d[nod];
        if(2*nod==last && 2*nod+1<=n) ans+=BS(2*nod+1,h);
        else if(2*nod+1==last) ans+=BS(2*nod,h);
    }
    return ans;
}

int32_t main(){
    ios_base :: sync_with_stdio(0); cin.tie(); cout.tie();
    cin >> n >> m;
    for(int i=2;i<=n;i++) cin >> l[i];
    Find(1,0);
    for(int i=1;i<=m;i++){
        cin >> x >> t;
        cout << Qry(x,t+d[x]) << '\n';
    }
}

