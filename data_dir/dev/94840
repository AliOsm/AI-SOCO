#include <cstdio>
#include <cstring>
#include <set>
#include <string>
#include <iostream>
#include <cmath>
#include <vector>
#include <map>
#include <fstream>
#include <sstream>
#include <stack>
#include <time.h>
#include <queue>
#include <cstdlib>
#include <algorithm>
using namespace std;
#define sqr(x) ((x)*(x))
#define PB push_back
#define MP make_pair
map<string,int>::iterator it;
#define Tr(it, x) for(it = x.begin(); it!=x.end();it++)
typedef long long lld;
typedef pair<int,int> PII;
#define SZ(x) x.size()
#define SORT(x) sort(s.begin(),s.end())
#define REP(i,n) for(int i=0;i<n;i++)
#define REV(s) reverse(s.begin(),s.end())
#define fill(x, y) memset(x, y, sizeof(x))
inline int two(int x) {return 1<<x; }
inline lld TWO(int x) {return (lld)1<<x ;}
template <class T>  void _Min(T &x, T y){if(y < x || x==-1) x = y;}
template <class T>  void Min(T &x, T y){if(y < x) x = y;}
template <class T>  void Max(T &x,T y){if(y > x) x = y;}
template <class T>  T _abs(T x) {return x > 0 ? x : -x ;}
template <class T>  T gcd(T a,T b){return !b ? a : gcd(b,a%b);}
const int maxn = 100010;
const int mod = 1000000007;
int a[maxn];
vector<int> edge[maxn];
bool vis[maxn];
int cnt ;
void dfs(int u)
{
    cnt ++;
    vis[u] = true;
    for(int i = 0 ; i < edge[u].size();i ++)
    {
        int v = edge[u][i];
        if(!vis[v]) dfs(v);
    }
}
int main()
{
    int n , k ;
    cin >> n >> k;
    map<int,int> mp;
    REP(i,n)
    {
        scanf("%d",&a[i]);
        mp[a[i]] = 1;
    }
    sort(a,a+n);
    REP(i,n)
    {
      if((lld)k*a[i]>1000000000) continue;
      if(mp[a[i]*k])
      {
          int id = lower_bound(a,a+n,a[i]*k)-a;
          edge[i].PB(id);
        //  edge[id].PB(i);
      }
    }
    int ans = 0;
    REP(i,n) if(!vis[i]) {
        cnt = 0;
        dfs(i);
        ans += (cnt+1)/2;
    }
    cout<<ans<<endl;
    return 0;
}