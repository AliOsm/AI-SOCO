#include <bits/stdc++.h>
using namespace std;
const int limN = 1e5 + 5;
#define sz(x) (int) (x).size()

vector <int> divs[limN];

void precarga() {
    for(int i=1; i<limN; i++)
        for(int j=i; j<limN; j+=i)
            divs[j].push_back(i);
}

void calca(vector <int> &A, vector <int> &B, int *x, int *y) {
    int N = sz(A), M = sz(B);
    x[N] = 0;
    for(int i=N-1, j=M-1, sumo=0; i>=0; i--) {
        while(j>=0 && B[j] >= A[i]) {
            sumo += y[j];
            j--;
        }
        x[i] = sumo;
    }
}



int calca(int *cnts, int pos=0, int msk=0) {
    if(pos==3)
        return 1;
    if((1<<pos) & msk)
        return calca(cnts, pos+1, msk);
    int ans = 0;
    for(int i=7; i>=0; i--) {
        if(cnts[i] && ((1<<pos) & i)) {
            cnts[i] --;
            for(int j=i; j; j--) {
                if((msk & j)==0 && (j & (1<<pos)))
                    ans += (cnts[i]+1)*calca(cnts, pos+1, msk | j);
            }
            cnts[i] ++;
        }
    }
    return ans;
}

void testCase() {
    int A, B, C;
    scanf("%d%d%d", &A, &B, &C);
    vector <int> &d1 = divs[A], &d2 = divs[B], &d3 = divs[C];
    int P = sz(d1), Q = sz(d2), R = sz(d3);
    int cnts[4][8];
    memset(cnts, 0, sizeof(cnts));
    int ans = 0;
    int W = 0;
    cnts[0][0] = 1;
    for(int i=0, j=0, k=0; i<P || j<Q || k<R; ) {
        int mn = limN, bt=0, t=0;
        if(i<P)
            mn = min(mn, d1[i]);        
        if(j<Q)
            mn = min(mn, d2[j]);
        if(k<R)
            mn = min(mn, d3[k]);
        if(i<P && mn == d1[i])
            bt |= 1, i++, t++;
        if(j<Q && mn == d2[j])
            bt |= 2, j++, t++;
        if(k<R && mn == d3[k])
            bt |= 4, k++, t++;
        // printf("%d => %d, %d\n", mn, bt, t);
        // cnts[bt]++;
        W ++;
        // // msks.push_back(bt);
        // // dvs.push_back(mn);
        for(int x=1; x<=3; x++) {
            for(int y=0; y<8; y++) {
                cnts[x][y | bt] += cnts[x-1][y];
            }
        }
        // for(int x=1; x<=3; x++) {
        //     printf("%d => ", x);
        //     for(int y=0; y<8; y++)
        //         printf("%d ", cnts[x][y]);
        //     printf("\n");
        // }
    }
    // int W = sz(dvs);
    // for(int i=0; i<W; i++) {
    //     for(int j=i; j<W; j++) {
    //         for(int k=j; k<W; k++) {
    //             if(
    //             if( (msks[i] | (msks[j] | msks[k])) == 7)
    //                 ans ++;
    //         }
    //     }
    // }
    // for(int i=0; i<8; i++)
    //     printf("%d ", cnts[i]);
    // printf("\n");
    // printf("%d\n", calca(cnts));
    ans = cnts[3][7];
    for(int m=1; m<8; m<<=1)
        ans -= (cnts[1][7-m] + cnts[1][7])*cnts[2][m];
    printf("%d\n", ans);
}

int main() {
    precarga();
    int tc;
    scanf("%d", &tc);
    while(tc--)
        testCase();
}
