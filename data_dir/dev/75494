#include <algorithm>
#include <iostream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define endl '\n'
#define F first
#define S second
#define mp make_pair
#define ll long long
#define pb push_back
#define pii pair < int, int >
#define type(x) __typeof(x.begin())
#define foreach(i, x) for(type(x) i = x.begin(); i != x.end(); i++)
#define FOR(i, a, b) for(ll i = a; i <= b; i++)
#define ROF(i, a, b) for(ll i = a; i >= b; i--)
#define sol (root << 1)
#define sag (sol | 1)
#define orta ((bas + son) >> 1)
#define bit __builtin_popcount
#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#define dbg(x) cerr << (#x) << " --> " << (x) << endl
#define TIME cerr << "Tooks " << (double) clock() / CLOCKS_PER_SEC << " seconds." << endl

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 300;

ll n, m, x, y, a[N], b[N], dp[N][2][2], road[N][2][2];

char str[N];

ll f(ll x, bool w1, bool w2) {
    
    if(x == n + 1)
        return 0;
    
    ll &r = dp[x][w1][w2];
    
    if(r != -1) return r;
    
    FOR(i, 0, 1)
    {
        if((w1 == 1 or a[x] == 0 or i == 1) and (w2 == 1 or b[x] == 1 or i == 0))
        {
            if(f(x + 1, w1 or i > a[x], w2 or i < b[x]) + i > r)
            {
                r = f(x + 1, w1 or i > a[x], w2 or i < b[x]) + i;
                
                road[x][w1][w2] = road[x + 1][w1 or i > a[x]][w2 or i < b[x]] | i << n - x;
            }
        }
    }
    
    return r;
    
}

ll calc(ll x, ll y) {
    
    memset(road, 0, sizeof(road));
    
    memset(dp, -1, sizeof(dp));
    
    n = 0;
    
    while(x)
    {
        a[++n] = x & 1;
        
        x /= 2;
    }
    
    reverse(a + 1, a + n + 1);
    
    m = 0;
    
    while(y)
    {
        b[++m] = y & 1;
        
        y /= 2;
    }
    
    reverse(b + 1, b + m + 1);
    
    ROF(i, m, 1)
        a[i] = a[i - (m - n)];
    
    FOR(i, 1, m -n)
        a[i] = 0;
    
    n = m;
    
    f(1, 0, 0);
    
    return road[1][0][0];
    
}

int main () {
    
    int n;
    
    cin >> n;
    
    FOR(i, 1, n)
    {
        cin >> x >> y;
        
        cout << calc(x, y) << endl;
    }
    
    return 0;
    
}