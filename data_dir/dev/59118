#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327
#endif // M_PI
#define endl "\n"
#define S struct
#define X first
#define Y second
#define V vector
#ifndef __linux__
#define LLD "%I64d"
#else
#define LLD "%ll""d"
#endif
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
#define YESNO(cond) cout << ((cond) ? "Yes" : "No") << endl;
#define UMAX(left, right) left = max(left, right);
#define UMIN(left, right) left = min(left, right);
using namespace std;
typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
void yes() { cout << "Yes" << endl;}
void no() { cout << "No" << endl;}
S Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;
S FAIL { FAIL () { cout << "CHANGE!!!" << endl;}};

const int INF = 1e8;

template <class T> class SegmentTree
{
    struct Node
    {
        int l;
        int r;
        int lson;
        int rson;
        T val;
    };
    int maxn = 1000000;
    vector <Node> t;
    T sum(int v, int tl, int tr, int l, int r) const {
        if (l > r) {
            return 0;
        }
        if (l == tl && r == tr) {
            return t[v].val;
        }
        int tm = (tl + tr) / 2;
        T s = 0;
        if (t[v].lson != -1) {
            s = max(s, sum(t[v].lson, tl, tm, l, min(r, tm)));
        }
        if (t[v].rson != -1) {
            s = max(s, sum(t[v].rson, tm + 1, tr, max(l, tm + 1), r));
        }
        return s;
    }
    void update(int v, int tl, int tr, int pos, T new_val) {
        if (tl == tr) {
            t[v].val = max(t[v].val, new_val);
        } else {
            int tm = (tl + tr) / 2;
            if (pos <= tm) {
                if (t[v].lson == -1) {
                    t.push_back({tl, tm, -1, -1, 0});
                    t[v].lson = t.size() - 1;
                }
                update(t[v].lson, tl, tm, pos, new_val);
            } else {
                if (t[v].rson == -1) {
                    t.push_back({tm + 1, tr, -1, -1, 0});
                    t[v].rson = t.size() - 1;
                }
                update(t[v].rson, tm + 1, tr, pos, new_val);
            }
            t[v].val = 0;
            if (t[v].lson != -1) {
                t[v].val = max(t[v].val, t[t[v].lson].val);
            }
            if (t[v].rson != -1) {
                t[v].val = max(t[v].val, t[t[v].rson].val);
            }
        }
    }
public:
    SegmentTree () {}
    SegmentTree (int n)
    {
        maxn = n;
        t.push_back({0, maxn - 1, -1, -1, 0});
    }
    void update(int pos, T add)
    {
        update(0, 0, maxn - 1, pos, add);
    }
    T sum(int l, int r) const
    {
        return sum(0, 0, maxn - 1, l, r);
    }
};

S Z
{
    int w;
    int length;
};

int get_new(const vector<SegmentTree<int>> &d, int x, int y, int w)
{
    return d[x].sum(0, w - 1);
}

void add(vector<SegmentTree<int>> &d, int v, const Z& next) // {length, weight}
{
    //cout << "UPD: v = " << v << ", W = " << next.w << ", LEN = " << next.length << endl;
    d[v].update(next.w, next.length);
}

int main()
{
    int n, m;
    cin >> n >> m;
    vector<SegmentTree<int>> d(n, SegmentTree<int>(100'006));

    FOR (i, 0, m) {
        int x, y, w;
        cin >> x >> y >> w;
        ++w;
        --x, --y;
        int val1 = get_new(d, x, y, w);
        //DEB(val1);
        //DEB(val2);
        add(d, y, {w, val1 + 1});
    }
    int res = 0;
    FOR (i, 0, n) {
        res = max(res, d[i].sum(0, 100'006));
    }
    cout << res;
}

