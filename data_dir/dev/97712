//  Copyright Â© 2018 Diego Garcia Rodriguez del Campo. All rights reserved.

#include<bits/stdc++.h>
#define MAX 2005
#define INF 1e9
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
using namespace std;
typedef long long i64;

i64 N;
i64 arr[MAX];
i64 barr[MAX];
i64 memo[MAX][10][10][10][10];
bool vis[MAX][10][10][10][10];

i64 dp( i64 x , i64 p , i64 a , i64 b , i64 c )
{
    if( vis[x][p][a][b][c] )
        return memo[x][p][a][b][c];
    if( x > N )
    {
        if( ! a && ! b && ! c )
            return 0;
        i64 ans = INF;
        if( a )
            ans = min( ans , dp( x , a , 0 , b , c ) + abs( p - a ) );
        if( b )
            ans = min( ans , dp( x , b , a , 0 , c ) + abs( p - b ) );
        if( c )
            ans = min( ans , dp( x , c , a , b , 0 ) + abs( p - c ) );
        vis[x][p][a][b][c] = 1;
        return memo[x][p][a][b][c] = ans;
    }
    i64 ans = INF;
    vis[x][p][a][b][c] = true;
    // Deja a personas
    if( a )
        ans = min( ans , dp( x , a , 0 , b , c ) + abs( p - a ) );
    if( b )
        ans = min( ans , dp( x , b , a , 0 , c ) + abs( p - b ) );
    if( c )
        ans = min( ans , dp( x , c , a , b , 0 ) + abs( p - c ) );
    // Recoger Persona
    if( a && b && c )
    {
        // Dejalo a el
        ans = min( ans , dp( x + 1 , barr[x] , a , b , c ) + abs( p - arr[x] ) + abs( arr[x] - barr[x] ) );
        // Cambialo por A
        ans = min( ans , dp( x + 1 , a , barr[x] , b , c ) + abs( p - arr[x] ) + abs( arr[x] - a ) );
        // Cambialo por B
        ans = min( ans , dp( x + 1 , b , a , barr[x] , c ) + abs( p - arr[x] ) + abs( arr[x] - b ) );
        // Cambialo por C
        ans = min( ans , dp( x + 1 , c , a , b , barr[x] ) + abs( p - arr[x] ) + abs( arr[x] - c ) );
    }
    else
    {
        if( ! a )
            ans = min( ans , dp( x + 1 , arr[x] , barr[x] , b , c ) + abs( p - arr[x] ) );
        else if( ! b )
            ans = min( ans , dp( x + 1 , arr[x] , a , barr[x] , c ) + abs( p - arr[x] ) );
        else
            ans = min( ans , dp( x + 1 , arr[x] , a , b , barr[x] ) + abs( p - arr[x] ) );
    }
    return memo[x][p][a][b][c] = ans;
}


int main()
{
    optimiza_io
    cin >> N;
    for( i64 i = 1; i <= N; i ++ )
        cin >> arr[i] >> barr[i];
    cout << dp( 1 , 1 , 0 , 0 , 0 ) + N + N << "\n";
    return 0;
}
