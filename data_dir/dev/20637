#include <bits/stdc++.h>
#define long long long

using namespace std ;

vector<int > primes ;
vector<bool > isComposite ;

void sieve(int N)
{
    isComposite.assign(N + 1, 0) ;
    isComposite[0] = isComposite[1] = 1 ;
    primes.clear() ;

    for(int i = 2 ; i <= N ; i++)
        if(!isComposite[i])
        {
            primes.push_back(i) ;

            if(1ll * i * i <= N)
                for(int j = i * i ; j <= N ; j+= i)
                    isComposite[j] = 1 ;
        }

}
unordered_map<long , int> primeFactors(long N)
{
    unordered_map<long , int>  factors ;
    int idx = 0 ;
    long p = primes[idx] ;

    while(1ll * p * p <= N)
    {
        int cnt = 0 ;
        while(N % p == 0){N /= p ; cnt++ ;}

        if(cnt)factors[p] = cnt ;

        p = primes[++idx] ;
    }
    if(N > 1) factors[N] = 1 ;

    return factors;
}
long fact_pow(long n , long k)
{
    long res = 0 ;
    while(n)
        n/= k , res += n ;

    return res ;
}

int main ()
{
    ios_base :: sync_with_stdio(false) , cin.tie(0) , cout.tie(0) ;
    sieve(int(1e7)) ;

    long n , b ; cin >> n >> b ;

    unordered_map<long , int > factors = primeFactors(b);

    long ans = (1ll << 63) - 1 ;

    for(auto& x : factors)
        ans = min(ans , fact_pow(n , x.first) / x.second) ;

    cout << ans << '\n' ;

    return  0 ;
}