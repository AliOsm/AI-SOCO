#include <bits/stdc++.h>
#define int long long
#define hash hashhash
#define X first
#define Y second
#define endl "\n"
#define Mp make_pair
#define debug(x) cerr << #x << " = " << x << endl
#define pb push_back
using namespace std;
inline int in(){int32_t x ; scanf("%d",&x) ; return x ; }
inline long long lin(){long long x ; scanf("%lld",&x) ; return x ;}
char ch[4000010];
inline string get(){ scanf("%s",ch) ; return string(ch) ; }
inline void read(int *a , int n ) { for (int i = 0 ; i < n ; i ++) a[i] = in() ; }
template <class blank> inline void out(blank x) {cout << x << endl ; exit(0) ;}
template <class blank , class blank2> inline void smin(blank &a , blank2 b) {a = a <= b ? a : b ;}
template <class blank , class blank2> inline void smax(blank &a , blank2 b) {a = a >= b ? a : b ;}
typedef pair<int , int > pii;
typedef long double ld;
typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<pii> vii;
const int maxn  = 2e5 + 10;
const int maxm = 4e6 + 10;
const int maxlg = 22;
const int base = 29;
const int mod = 1e9 + 7;
const ll inf = 1e18 + 10;
const double eps = 1e-4;
const int SQ = 317;
int weight[maxn],b[maxn];
int totb[maxn],totw[maxn];
vi g[maxn];
int cmp = 1;
bool mark[maxn];
int best[1005][1005];
vector<pair<int,int> > vc[maxn];

inline void dfs(int node)
{
    mark[node] = true;
    totw[cmp] += weight[node] , totb[cmp] += b[node];
    vc[cmp].push_back({weight[node],b[node]});
    for (auto u : g[node])
        if (!mark[u]) dfs(u);
}
int32_t main()
{
    int n = in() , m = in()  , w = in();
    for (int i = 1 ; i <= n ; i ++) weight[i] = in();
    for (int i = 1 ; i <= n ; i ++) b[i] = in();
    for (int i = 0 ; i < m ; i ++)
    {
        int v = in() , u = in();
        g[v].push_back(u);
        g[u].push_back(v);
    }
    for (int i = 1 ; i <= n ;i ++)
        if (!mark[i]){
            dfs(i);
            cmp++;
        }
    memset(best,-1,sizeof best);
    best[0][0] = 0;
    for (int i = 1 ; i <= cmp ; i ++){
        for (int j = 0 ; j <= w - totw[i] ; j ++){
            if (best[i-1][j] + 1){
                best[i][j + totw[i]] = max(best[i][j + totw[i]] , best[i-1][j] + totb[i]);
            }
        }
        for (int pt = 0 ; pt < vc[i].size() ; pt ++){
            for (int j = 0 ; j <= w - vc[i][pt].first ; j ++){
                best[i][j + vc[i][pt].first] = max(best[i][j + vc[i][pt].first],best[i-1][j] + vc[i][pt].second);
            }
        }
        for (int j = 0 ; j <= w ; j ++)
            best[i][j] = max(best[i][j],best[i-1][j]);
    }
    int res = 0;
    for (int i = 0 ; i <= w ; i ++)
        res = max(res,best[cmp][i]);
    cout << res << endl;
}
