#include <bits/stdc++.h>
using namespace std;
string s;
long long p[19];
long long n,m,dp[(1 << 18) + 5][105];
long long solve(int mask, long long rem){
    bitset<18>b = mask;
    int idx = b.count();
    if(idx == n)
        return !(rem % m);
    long long &ans = dp[mask][rem % m];
    if(ans != -1)
        return ans;
    ans = 0;
    bool vis[10] = {};
    for(int i = 0; i < n; i++){
        if(!idx && s[i] == '0' || b[i] || vis[s[i] - 48])
            continue;
        vis[s[i] - 48] = 1;
        ans += solve(mask | (1 << i), rem + p[n - idx - 1] * (s[i] - '0'));
    }
    return ans;
}
int main()
{
    p[0] = 1;
    for(int i = 1; i < 19; i++)
        p[i] = 10 * p[i - 1];
    cin >> s >> m;
    n = s.size();
    memset(dp, -1, sizeof dp);
    cout << solve(0, 0);
    return 0;
}
