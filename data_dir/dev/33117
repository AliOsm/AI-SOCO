#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define foreach(it, v) for(auto it=(v).begin(); it != (v).end(); ++it)

#define _ ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define __ freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);

#define tr(...) cout<<__FUNCTION__<<' '<<__LINE__<<" = ";trace(#__VA_ARGS__, __VA_ARGS__)

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;

template<typename S, typename T> 
ostream& operator<<(ostream& out,pair<S,T> const& p){out<<'('<<p.fi<<", "<<p.se<<')';return out;}

template<typename T>
ostream& operator<<(ostream& out,vector<T> const& v){
int l=v.size();for(int i=0;i<l-1;i++)out<<v[i]<<' ';if(l>0)out<<v[l-1];return out;}

template<typename T>
void trace(const char* name, T&& arg1){cout<<name<<" : "<<arg1<<endl;}

template<typename T, typename... Args>
void trace(const char* names, T&& arg1, Args&&... args){
const char* comma = strchr(names + 1, ',');cout.write(names, comma-names)<<" : "<<arg1<<" | ";trace(comma+1,args...);}

const ld PI = 3.1415926535897932384626433832795;

const int N = 22;

vector<int> g[N];

int f[N];
int dp[1 << N];
int per[1 << N];
int prv[1 << N];

int main(){ _
  int n, m;
  cin >> n >> m;
  
  if(m == (n * (n-1)) / 2){
    cout << 0 << endl;
    return 0;
  }
  
  for(int i = 0; i < m; i++){
    int u, v;
    cin >> u >> v;
    u--, v--;
    g[u].pb(v);
    g[v].pb(u);
  }  
  
  for(int i = 0; i < (1 << n); i++){
    dp[i] = n;
    prv[i] = -1;
    per[i] = -1;
  }
  
  for(int i = 0; i < n; i++){
    int mask = 1 << i;
    
    for(int x : g[i]) mask |= (1 << x);  
    
    dp[mask] = 1;
    prv[mask] = 0;
    f[i] = mask;
    per[mask] = i;
  }
  
  for(int i = 1; i < (1 << n); i++){
    for(int j = 0; j < n; j++){
      if(i & (1 << j)){
        int next = i | f[j];
        if(dp[next] > dp[i] + 1){
          dp[next] = min(dp[next], dp[i] + 1);
          prv[next] = i;
          per[next] = j;
        }
      }
    }
  }
  
  cout << dp[(1 << n)-1] << endl;
  vector<int> res;
  int a = (1 << n) - 1;
  while(a){
    res.pb(per[a]+1);
    a = prv[a];
  }
  
  for(int x : res) cout << x << ' ';
  cout << endl;
  
  return 0;
}
