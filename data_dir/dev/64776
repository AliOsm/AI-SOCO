#pragma GCC optimize ("O3")
#pragma GCC optimize ("Ofast")
#pragma GCC optimize ("unroll-loops")
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define ll long long
#define ld long double
#define ull unsigned long long
#define ios ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define all(a) a.begin(),a.end()
#define iter vector<int>::iterator
#define iter1 vector<int>::iterator
#define int long long
using namespace std;
using namespace __gnu_pbds;

mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rnd1(chrono::steady_clock::now().time_since_epoch().count());

const int N=2e5+7;
const int inf=1e18+1e9;
const int mod=1e9+7;
const ld eps=1e-9;

int d[N];
vector<int>g[N];
int kol[N];
int pred[N];
deque<int>q;
int n,m;

void get(int v)
{
    for (int i=1;i<=n;++i){
        d[i]=inf;
        kol[i]=0;
    }
    d[v]=1;
    kol[v]=1;
    pred[v]=-1;
    q.pb(v);
    while(q.size()>0){
        int v=q.front();
        q.pop_front();
        for (int i=0;i<g[v].size();++i){
            int to=g[v][i];
            if (d[to]==inf){
                d[to]=d[v]+1;
                q.pb(to);
            }
        }
        for (int i=0;i<g[v].size();++i){
            int to=g[v][i];
            if (d[to]==d[v]+1){
                pred[to]=v;
                kol[to]++;
            }
        }
    }
    return;
}

main ()
{
    ios;
    cin>>n>>m;
    for (int i=1;i<=m;++i){
        int x,y;
        cin>>x>>y;
        g[y].pb(x);
    }
    vector<int>p;
    int k;
    cin>>k;
    for (int i=1;i<=k;++i){
        int x;
        cin>>x;
        p.pb(x);
    }
    get(p.back());
    int mn=(int)p.size()-1;
    int mx=0;
    for (int i=0;i<(int)p.size()-1;++i){
        if (d[p[i+1]]==d[p[i]]-1){
            --mn;
        }
    }
    for (int i=0;i<(int)p.size()-1;++i){
        if (kol[p[i]]==1 && pred[p[i]]==p[i+1]){
            continue;
        }
        else {
            ++mx;
        }
    }
    cout<<mn<<' '<<mx<<endl;
}
/**

SLAVA_UKRAINE
HEROYAM SLAVA

UKRAINA_PONAD_USE

**/
