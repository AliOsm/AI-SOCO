#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> order_set;


int n, m;
char S[1010][1010];
bool vis[1010][1010];
queue < pair < int, int > >Q;
int dx[] = {-1, 1, 0, 0};
int dy[] = {0, 0, -1, 1};
void can(queue < pair< int, int > > &q, pair <int, int > tmp, const int &i){
    tmp.first += dx[i];
    tmp.second += dy[i];
    if (tmp.first < 0 || tmp.first == n || tmp.second < 0 || tmp.second == m) return;
    if (vis[tmp.first][tmp.second]) return;
    vis[tmp.first][tmp.second] = 1;
    if (S[tmp.first][tmp.second] == '#')
        q.push(tmp);
}
int row[1010], col[1010];
void go(const int&i, const int &j){
    Q.push({i, j});
    pair <int, int> tmp;
    while (Q.size()){
        tmp = Q.front();
        row[tmp.first] = 1;
        col[tmp.second] = 1;
        Q.pop();
        for (int k = 0; k < 4; ++k){
            can(Q, tmp, k);
        }
    }
}
int main(){
    scanf("%d%d", &n, &m);
    for (int i = 0; i < n; ++i)
        scanf("%s", S[i]);
    bool ans = 1;
    for (int i = 0; i < n; ++i){
        int lst = -1;
        for (int j = 0; j < m; ++j){
            if (S[i][j] == '#' && ~lst && lst != j - 1) ans = 0;
            if (S[i][j] == '#') lst = j;
        }
    }
    for (int j = 0; j < m; ++j){
        int lst = -1;
        for (int i = 0; i < n; ++i){
            if (S[i][j] == '#' && ~lst && lst != i - 1) ans = 0;
            if (S[i][j] == '#') lst = i;
        }
    }
    if (!ans) return puts("-1");
    int sol = 0;
    for (int i = 0; i < n; ++i){
        for (int j = 0; j < m; ++j){
            if (!vis[i][j] && S[i][j] == '#'){
                ++sol;
                go(i, j);
            }
        }
    }
    /*
3 3
...
.#.
...
*/
    for (int i = 0; i < n; ++i){
        if (!row[i]) {
            bool ca = 0;
            for (int j = 0; j < m; ++j){
                if (!col[j]) ca = 1;
            }
            ans &= ca;
        }
    }
    for (int j = 0; j < m; ++j){
        if (!col[j]){
            bool ca = 0;
            for (int i = 0; i < n; ++i){
                if (!row[i]) ca = 1;
            }
            ans &= ca;
        }
    }
    if (ans) printf("%d\n", sol);
    else puts("-1");
	return 0;
}
