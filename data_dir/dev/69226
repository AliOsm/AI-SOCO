#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pii pair<int,int>
#define piii pair<int,pair<int,int> >
#define ff first
#define ss second
#define mp make_pair
#define pb push_back
#define SIZE 100006
#define MOD (long long)1000000007
using namespace std;

inline ll getnum()
{
    char c = getchar();
    int num,sign=1;
    for(;c<'0'||c>'9';c=getchar())if(c=='-')sign=-1;
    for(num=0;c>='0'&&c<='9';)
    {
        c-='0';
        num = num*10+c;
        c=getchar();
    }
    return num*sign;
}

int used[300004],fup[300004],edge[300004],brig[300004],tin[300004],timer;
vector<int> V[300004],C[300004];

int art[300004],color[300004],spec[300004],gedge[300004];

void dfs(int n,int p)
{
    used[n]=1;
    tin[n]=fup[n]=timer++;
    for (int i=0;i<V[n].size();i++)
    {
        int x=edge[V[n][i]]^n;
        if(x==p)continue;
        if(used[x])fup[n]=min(fup[n],tin[x]);
        else
        {
            dfs(x,n);
            fup[n]=min(fup[n],fup[x]);
            if(fup[x]>tin[n])brig[V[n][i]]=1;
        }
    }
}

void colorem(int n,int col)
{
    color[n]=col;

    for(int i=0;i<V[n].size();i++)
    {
        if(brig[V[n][i]])continue;
        int x=edge[V[n][i]]^n;
        if(art[V[n][i]])spec[col]=1;
        if(!color[x])colorem(x,col);
    }
}

void finaldfs(int n,int found)
{
    if(spec[n])found=1;
    used[n]=found+1;

    for(int i=0;i<C[n].size();i++)
    {
        int e=C[n][i],x=edge[e]^n;
        if(used[x])continue;
        int flag=found;
        if(art[e])flag=1;
        finaldfs(x,flag);
    }
}

int main()
{
    int n=getnum(),m=getnum();

    for(int i=1;i<=m;i++)
    {
        int x=getnum(),y=getnum();
        art[i]=getnum();

        V[x].pb(i);
        V[y].pb(i);

        edge[i]=x^y;
    }

    int s=getnum(),d=getnum();

    for(int i=1;i<=n;i++)if(!used[i])dfs(i,0);

    for(int i=1;i<=n;i++)if(!color[i])colorem(i,i);

    for(int i=1;i<=m;i++)used[i]=0;

    //for(int i=1;i<=n;i++)cout<<spec[i]<<' ';

    for(int i=1;i<=n;i++)
    {
        for(int j=0;j<V[i].size();j++)
        {
            int e=V[i][j],x=edge[e]^i;
            if(brig[e]&&!used[e])
            {
                used[e]=1;
                C[color[i]].pb(e);
                C[color[x]].pb(e);
                edge[e]=color[i]^color[x];
            }
        }
    }

    for(int i=1;i<=n;i++)used[i]=0;

    finaldfs(color[s],0);

    if(used[color[d]]==2)puts("YES");
    else puts("NO");
}
