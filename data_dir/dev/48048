#include "bits/stdc++.h"
#include "ext/pb_ds/tree_policy.hpp"
#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 450;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}

const int maxn = 400010;
int arr[maxn],lcs,n,q;
namespace preprocess{
	int ans[maxn],finalAns[maxn];
	int minimax[maxn][2];
	int posLen[maxn][2];
	void front(){
		vector<int>v;v.PB(-1);
		REP(i,1,n+1){
			auto p = LB(all(v),arr[i]);
			minimax[i][0] = *(p-1);
			posLen[i][0] = p-v.begin();
			if(p==v.end())v.PB(arr[i]);
			else *p=arr[i];
		}
		lcs = sz(v)+1;
	}
	void back(){
		vector<int>v;v.PB(-inf);
		RREP(i,n,1){
			int temp = -arr[i];
			auto p = LB(all(v),temp);
			posLen[i][1] = p-v.begin();
			minimax[i][1] = -*(p-1);
			if(p==v.end())v.PB(temp);
			else *p=temp;
		}
	}
	void work(){
		in(n);in(q);
		REP(i,1,n+1)in(arr[i]);
		front();back();
		REP(i,1,n+1){
			if(posLen[i][0]+posLen[i][1]+1<lcs){
				ans[i] = 1;
			}
			if(posLen[i][0]+posLen[i][1]+1==lcs){
				ans[i] = 2;
			}
		}

		int preMax = -inf;
		REP(i,1,n+1){
			if(ans[i]==2){
				if(arr[i]<=preMax){
					finalAns[i]=2;
				}
				preMax = max(preMax,arr[i]);
			}
		}
		int sufMin = inf;
		RREP(i,n,1){
			if(ans[i]==2){
				if(arr[i]>=sufMin){
					finalAns[i]=2;
				}
				sufMin = min(sufMin,arr[i]);
			}
		}
		REP(i,1,n+1){

			if(ans[i]==1){}
			else if(finalAns[i]==2){}
			else ans[i] = 3;
		}
	}
}
int ans[maxn];
vector<PII>query[maxn];

namespace SOLVE{
	int pre[maxn],suf[maxn];
	void front(){
		vector<int>v;v.PB(-1);
		REP(i,1,n+1){
			for(auto Pair:query[i]){
				auto p = LB(all(v),Pair.fi);
				pre[Pair.se] = p-v.begin();
			}
			auto p = LB(all(v),arr[i]);
			if(p==v.end())v.PB(arr[i]);
			else *p=arr[i];
		}
		lcs = sz(v)+1;
	}
	void back(){
		vector<int>v;v.PB(-inf);
		RREP(i,n,1){
			for(auto Pair:query[i]){
				auto p = LB(all(v),-Pair.fi);
				suf[Pair.se] = p-v.begin();
			}
			int temp = -arr[i];
			auto p = LB(all(v),temp);
			if(p==v.end())v.PB(temp);
			else *p=temp;
		}
	}
	void solve(){
		front();back();
		REP(i,0,q){
			ans[i] = max(ans[i],pre[i]+suf[i]+1);
			iout(ans[i]-2);
		}

	}
}
int main(){
	preprocess::work();
	REP(i,0,q){
		int from,val;
		cin>>from>>val;
		query[from].PB(MP(val,i));
		if(preprocess::ans[from]==3){
			ans[i] = lcs-1;
		}else{
			ans[i] = lcs;
		}
	}
	SOLVE::solve();

	return 0;
}