#include <bits/stdc++.h>

using namespace std;

#define ll long long

const int N = 2e5 + 100;
int a[N], lb[N], rb[N], t[N * 4];

void build(int v, int L, int R) {
    if (L == R) {
        t[v] = a[L] == 0 ? N : a[L];
    } else {
        int m = (L + R) / 2;
        build(v * 2, L, m);
        build(v * 2 + 1, m + 1, R);
        t[v] = min(t[v * 2], t[v * 2 + 1]);
    }
}

int que(int l, int r, int v, int L, int R) {
    if (l > r)
        return N;
    if (l == L && r == R)
        return t[v];
    int m = (L + R) >> 1;
    return min(que(l, min(m, r), v * 2, L, m),
               que(max(m + 1, l), r, v * 2 + 1, m + 1, R));
}

void upd(int l, int r, int x, int v, int L, int R) {
    if (l > r)
        return;
    if (l == L && r == R) {
        t[v] = x;
    } else {
        int m = (L + R) >> 1;
        upd(l, min(m, r), x, v * 2, L, m);
        upd(max(m + 1, l), r, x, v * 2 + 1, m + 1, R);
    }
}

void print(int x, int v, int L, int R) {
    x = max(t[v], x);
    if (L == R) {
        printf("%d ", x);
    }
    else {
        int m = (L + R) >> 1;
        print(x, v * 2, L, m);
        print(x, v * 2 + 1, m + 1, R);
    }
}

int main() {
#ifdef HOME
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    int n, q;
    scanf("%d%d", &n, &q);

    int empty = -1;
    for (int i = 0; i < n; i++) {
        scanf("%d", &a[i]);
        if (!a[i])
            empty = i;
    }

    build(1, 0, n - 1);

    fill(lb, lb + q + 1, -1);
    for (int i = 0; i < n; i++)
        rb[a[i]] = i;
    for (int i = n - 1; i >= 0; i--)
        lb[a[i]] = i;

    if (lb[q] == -1) {
        if (empty == -1) {
            printf("NO");
            return 0;
        }
        else {
            lb[q] = rb[q] = empty;
        }
    }

    for (int i = 1; i <= q; i++) {
        if (lb[i] != -1 && que(lb[i], rb[i], 1, 0, n - 1) < i) {
            printf("NO");
            return 0;
        }
    }

    fill(t, t + N * 4, 0);

    lb[1] = 0;
    rb[1] = n - 1;
    for (int i = 1; i <= q; i++) {
        if (lb[i] != -1)
            upd(lb[i], rb[i], i, 1, 0, n - 1);
    }

    printf("YES\n");
    print(0, 1, 0, n - 1);


    return 0;
}