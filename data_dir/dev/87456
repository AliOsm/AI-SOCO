#include <bits/stdc++.h>
#define LL long long
#define pb push_back
#define mp make_pair
#define fi first
#define sc second
using namespace std;
 
int n,m,x,y,ans[100100];
set<int> graph[100100];

int nn, par[100100], subtree[100100];
 
void dfs1(int u, int p){
	nn++;
	subtree[u] = 1;
	for(set<int>::iterator it = graph[u].begin();it!=graph[u].end();it++){
		int v = (*it);
		if(v!=p){
			dfs1(v, u);
			subtree[u] += subtree[v];
		}
	}
}
 
int findCentroid(int u, int p){
	for(set<int>::iterator it = graph[u].begin();it!=graph[u].end();it++){
		int v = (*it);
		if(v!=p && subtree[v]>nn/2) return findCentroid(v, u);
	}
	return u;
}
 
void decompose(int root, int p, int lvl){
	nn = 0;
	dfs1(root, root);
	int centroid = findCentroid(root, root);
	if(p==-1) p = centroid;
	par[centroid] = p;
	ans[centroid] = lvl;
	for(set<int>::iterator it = graph[centroid].begin();it!=graph[centroid].end();it++){
		graph[(*it)].erase(centroid);
		decompose((*it), centroid, lvl+1);
	}
	graph[centroid].clear();
}
 
int main() {
	scanf("%d",&n);
	for(int i=0;i<n-1;i++){
		scanf("%d %d",&x,&y);
		x--, y--;
		graph[x].insert(y);
		graph[y].insert(x);
	}
	decompose(0, -1, 0);
	for(int i=0;i<n;i++) cout<<char(ans[i]+'A')<<" ";cout<<endl;
	return 0;
}