#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define se second
#define fi first
#define pb push_back
const int N=1e5 + 5,MX=1e9,MX2=1e5;
int root[N],root2[N],cc,id,cc2;
char arr[16];
map<int, vector<pair<int, int>> > mp;
map<string, int> idx;

struct node {
	int l,r,am;
	node(){
		l=0, r=0, am=0;
	}
} seg[100 * N],seg2[100 * N];

int update(int u,int l,int r,int s,int e,int x,bool f){

	if(r < s || l > e) return u;
	int nu=++cc;
	if(l >= s && r <= e){
		if(!f) seg[nu].am=seg[u].am + x;
		else seg2[nu].am=x;
		return nu;
	}
	int mid=(l + r) / 2;
	if(!f){
		seg[nu].l=update(seg[u].l,l,mid,s,e,x,f);
		seg[nu].r=update(seg[u].r,mid + 1,r,s,e,x,f);
		seg[nu].am=seg[seg[nu].l].am + seg[seg[nu].r].am;
	}
	else{
		seg2[nu].l=update(seg2[u].l,l,mid,s,e,x,f);
		seg2[nu].r=update(seg2[u].r,mid + 1,r,s,e,x,f);
		seg2[nu].am=0;
	}
	return nu;
}
int get(int u,int l,int r,int s,int e,bool f){
	if(r < s || l > e || !u || r < l) return 0;
	if(l >= s && r <= e){
		return (!f) ? seg[u].am : seg2[u].am;
	}
	int mid=(l + r) / 2;
	return
		(!f) ?
			get(seg[u].l,l,mid,s,e, f) + get(seg[u].r,mid + 1,r,s,e, f) :
			get(seg2[u].l,l,mid,s,e, f) + get(seg2[u].r,mid + 1,r,s,e, f);
}

int read(){
	scanf(" %s",arr);
	string s=arr;
	if(idx.find(s) == idx.end()) return idx[s]=++id;
	return idx[s];
}
int main(){

//	freopen("in.txt","r",stdin);

	int q;
	scanf("%d",&q);
	string s;
	for(int i=1,x;i <= q;i++){
		scanf(" %s",arr);
		s=arr;
		if(s == "set"){
			int in=read(),prev=get(root2[i - 1],1,MX2,in,in,1);
			scanf("%d",&x);
			root[i]=update(root[i - 1],0,MX,prev,prev,-1,0);
			root[i]=update(root[i],0,MX,x,x,1,0);
			root2[i]=update(root2[i - 1],1,MX2,in,in,x,1);
		}
		else if(s == "remove"){
			int in=read(),prev=get(root2[i - 1],1,MX2,in,in,1);
			root[i]=update(root[i - 1],0,MX,prev,prev,-1,0);
			root2[i]=update(root2[i - 1],1,MX2,in,in,0,1);
		}
		else if(s == "query"){
			int in=read(),prev=get(root2[i - 1],1,MX2,in,in,1);
			root[i] = root[i-1], root2[i] = root2[i-1];
			if (!prev){puts("-1"); fflush(stdout); continue;}
			printf("%d\n", get (root[i], 0, MX, 1, prev-1, 0));
			fflush(stdout);
		}
		else{
			int x;
			scanf("%d",&x);
			root[i] = root[i-x-1];
			root2[i] = root2[i-x-1];
		}
	}

}
