#include "bits/stdc++.h"
//#include "ext/pb_ds/tree_policy.hpp"
//#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
#define EX0 exit(0);

typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}

ll twop(int x){return 1LL<<x;}

template<typename A,typename B > inline void in(A&x,B&y){in(x);in(y);}
template<typename A,typename B,typename C>inline void in(A&x,B&y,C&z){in(x);in(y);in(z);}
template<typename A,typename B,typename C,typename D> inline void in(A&x,B&y,C&z,D&xx){in(x);in(y);in(z);in(xx);}




template <class T>
void upd(T&a,T b) {
    a = max(a,b);
}


template<int maxn,typename NUM>
struct BIT{
    NUM s[maxn];
    
    void init(){
        mst(s, 0);
    }
    BIT(){
        init();
    }
    
    void update(int a,NUM value){
        assert(a!=0);
        while(a<=maxn){s[a]+=value;a+=lowbit(a);}
    }
    
    NUM query(int a){
        NUM ans = 0;
        while(a){ans+=s[a];a-=lowbit(a);}
        return ans;
    }
    NUM query(int a,int b){
        if(b<a)return 0;
        return query(b)-query(a-1);
    }
};

const int maxn = 100010;
BIT<maxn, ll>bit;
int a[maxn];
vector<int>pos[maxn];
int main(){
    int n;in(n);
    REP(i,1,n+1){
        in(a[i]);
        bit.update(i, 1);
        pos[a[i]].PB(i);
    }
    ll ans = 0;
    int cur = 1;
    REP(i,1,maxn){
        if(!sz(pos[i]))continue;
        int start = -1;
        for(int j = 0;j<sz(pos[i]);j++){
            if(pos[i][j]>=cur){
                start = j;
                break;
            }
        }
        if(start == -1){
            
            ans+=bit.query(cur,n);
            cur = 1;
            for(auto j:pos[i]){
                ans+=bit.query(cur,j);
                bit.update(j, -1);
                cur = j;
            }
        }else{
            REP(j,start,sz(pos[i])){
                ans+=bit.query(cur,pos[i][j]);
                bit.update(pos[i][j], -1);
                cur = pos[i][j];
            }
            while(sz(pos[i])>start)pos[i].pop_back();
            if(!sz(pos[i]))continue;
            ans+=bit.query(cur,n);
            cur = 1;
            for(auto j:pos[i]){
                ans+=bit.query(cur,j);
                bit.update(j, -1);
                cur = j;
            }
        }
    }
    cout<<ans;
    return 0;
}
