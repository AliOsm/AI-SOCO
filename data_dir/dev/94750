#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define int long long
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

vector<vector<int> >adj;
int st[200005],en[200005];
int timer=0;
int seg[800005],lz[800005];
int a[200005];
int tim[200005];
void dfs(int ver,int p)
{
   st[ver]=++timer;
   tim[timer]=ver;
   for(auto i:adj[ver])
   {
      if(i!=p)
      {
         dfs(i,ver);
      }
   }
   en[ver]=timer;
}

void build(int ver,int tl,int tr)
{
   if(tl>tr)
      return ;
   else if(tl==tr)
      seg[ver]=a[tim[tl]];
   else
   {
      int tm=(tl+tr)/2;
      build(2*ver,tl,tm);
      build(2*ver+1,tm+1,tr);
      seg[ver]=seg[2*ver]+seg[2*ver+1];
   }      
}

void upd(int ver,int tl,int tr,int l,int r)
{
   if(tl>tr||l>r||r<tl||tr<l)
      return ;
   else if(tl==l && tr==r)
   {
      lz[ver]++;
      seg[ver]=(tr-tl+1)-seg[ver];
   }
   else
   {
      int tm=(tl+tr)/2;
      if(lz[ver]%2)
      {
         lz[2*ver]++;
         lz[2*ver+1]++;         
         lz[ver]=0;
         seg[2*ver]=(tm-tl+1-seg[2*ver]);
         seg[2*ver+1]=(tr-tm-seg[2*ver+1]);
      }
      upd(2*ver,tl,tm,l,min(tm,r));
      upd(2*ver+1,tm+1,tr,max(tm+1,l),r);
      seg[ver]=seg[2*ver]+seg[2*ver+1];
   }   
}
int get(int ver,int tl,int tr,int l,int r)
{
   if(tl>tr||l>r||r<tl||tr<l)
      return 0;
   else if(tl==l && tr==r)
      return seg[ver];
   else
   {
      int tm=(tl+tr)/2;
      if(lz[ver]%2)
      {
         lz[2*ver]++;
         lz[2*ver+1]++;         
         lz[ver]=0;
         seg[2*ver]=(tm-tl+1-seg[2*ver]);
         seg[2*ver+1]=(tr-tm-seg[2*ver+1]);
      }
      return get(2*ver,tl,tm,l,min(tm,r))+get(2*ver+1,tm+1,tr,max(tm+1,l),r);
   }   
}

signed main()
{
     ios_base::sync_with_stdio(false);
     cin.tie(NULL);  
 #ifndef ONLINE_JUDGE
    freopen ("INPUT.txt" , "r" , stdin);
    freopen ("OUTPUT.txt" , "w" , stdout);
 #endif
 
// -------------------------------------Code starts here---------------------------------------------------------------------     

   int t;
   cin>>t;
   while (t--)
   {
      int n;
      cin>>n;
      int a[n];
      int cnt1=0,cnt2=0;
      for(int i=0;i<n;i++)
      {
         cin>>a[i];
         if(a[i]%2)
            cnt1++;
         else
            cnt2++;
      }
      if(cnt1%2||(cnt1>0&&cnt2>0))
      {
         cout<<"YES\n";
      }
      else
      {
         cout<<"NO\n";
      }
      
   }
   

// -------------------------------------Code ends here------------------------------------------------------------------
     clock_t clk;
 	clk = clock();
 
    clk = clock() - clk;
 	cerr << fixed << setprecision(6) << "Time: " << ((double)clk)/CLOCKS_PER_SEC << "\n";
 	return 0;
 }