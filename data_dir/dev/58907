#include <algorithm>
#include <iostream>
#include <valarray>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <numeric>
#include <complex>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <ctime>
#include <cmath>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <ext/algorithm>

using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i)
#define error(x) cout << #x << " = " << (x) << endl;
#define all(n) (n).begin(), (n).end()
#define Size(n) ((int)(n).size())
#define mk make_pair
#define pb push_back
#define F first
#define S second
#define X real()
#define Y imag()

typedef long long ll;
typedef pair<ll, ll> pii;
typedef pair<ll, ll> pll;
typedef complex<double> point;
template <class P, class Q> void smin(P &a, Q b) { if (b < a) a = b; } 
template <class P, class Q> void smax(P &a, Q b) { if (b > a) a = b; } 
template <class P, class Q> bool in(const P &a, const Q &b) { return a.find(b) != a.end(); }

int main() {
	ios::sync_with_stdio(false);
	
	int n;
	cin >> n;

	string s[n];
	FOR(i, 0, n) cin >> s[i];

	FOR(i, 0, n) FOR(j, 0, n) {
		int cnt = 0;
		FOR(k, 0, n) {
			cnt += s[i][k] == '.';
			cnt += s[k][j] == '.';
		}
		if (cnt == 0) {
			cout << -1 << endl;
			return 0;
		}
	}
	
	bool bad = false;
	FOR(i, 0, n) if (s[i].find('.') == s[i].npos) bad = true;

	if (!bad) {
		FOR(i, 0, n) cout << i+1 << " " << s[i].find('.')+1 << endl;
	} else {
		FOR(i, 0, n) {
			int x = 0;
			while (s[x][i] == 'E') x++;
			cout << x+1 << " " << i+1 << endl;
		}
	}

	return 0; 
}

