#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<map>
#include<iterator>
#include<stack>
#include<string>
#include<climits>
#include<bitset>
#include<queue>
#include<cmath>
#include<cstdlib>
#include<cstdio>
#include<sstream>

#define MOD 1000000007
#define ll long long int
#define vi vector<int>
#define vl vector<long long int>
#define vvi vector<vector<int> >
#define vvl vector<vector<long long int> >
#define vp vector<pair<int, int> >
#define sc(n) scanf("%d", &n)

using namespace std;

string toBin(long long int a)
{
	return bitset<64>(a).to_string();
}

void printArr(int* a, int n)
{
	for(int i = 0; i < n; i++)
		printf("%d ", a[i]);
	printf("\n");
}

string intToString (ll a)
{
	ostringstream temp;
	temp<<a;
	return temp.str();
}

ll pow(ll base, ll exponent)
{
	ll result = 1;
	while(exponent > 0)
	{
		if (exponent % 2 == 1)
			result *= base;
		exponent = exponent >> 1;
		base *= base;
	}
	return result;
}

ll powerWithMod(ll base, ll exponent, ll modulus)
{
	ll result = 1;
	base %= modulus;
	while(exponent > 0)
	{
		if (exponent % 2 == 1)
			result = (result * base) % modulus;
		exponent = exponent >> 1;
		base = (base * base) % modulus;
	}
	return result;
}

bool isPrime(int n)
{
	if(n == 2)
		return true;
	if(n%2 == 0)
		return false;
	int limit = ceil(sqrt(n)) + 1;
	for(int d=3; d <= limit; d += 2)
	{
		if(n%d == 0)
			return false;
	}
	return true;
}

int gc(string a, string b)
{
	int i = 0, j = 0;
	for(i = 0; i < a.size(); i++)
	{
		if(a[i] == b[j] && j == b.size() - 1)
			return i;
		if(a[i] == b[j])
			j++;
	}
	return -1;
}

int main()
{
	int n, m, t1, t2;
	bool ans = true;
	sc(n); sc(m);
	vi given(n, 0), first, second;
	vvi adjLis(n);
	for(int i=0; i<m; i++)
	{
		sc(t1); sc(t2);
		adjLis[t1-1].push_back(t2-1);
		adjLis[t2-1].push_back(t1-1);
	}
	bool *visited = new bool[n];
	fill(visited, visited+n, false);
	bool flag = true;
	int root = 0;
	while(flag)
	{
		queue<int> nodes;
		nodes.push(root);
		given[root] = 1;
		first.push_back(root);
		while(!nodes.empty() && ans && flag)
		{
			int curr = nodes.front();
			nodes.pop();
			for(int i = 0; ans && i < adjLis[curr].size(); i++)
			{
				if(given[adjLis[curr][i]] == given[curr])
				{
					printf("-1\n");
					return 0;
				}
				else if(given[adjLis[curr][i]] == 0)
				{
					given[adjLis[curr][i]] = 3 - given[curr];
					if(given[adjLis[curr][i]] == 1)
						first.push_back(adjLis[curr][i]);
					else
						second.push_back(adjLis[curr][i]);
					nodes.push(adjLis[curr][i]);
				}
				
			}
		}
		flag = false;
		for(int i=0; i<n; i++)
		{
			if(given[i] == 0 && adjLis[i].size() > 0)
			{
				root = i;
				flag = true;
				break;
			}
		}
	}
	printf("%d\n", (int)first.size());
	for(int i=0; i<first.size(); i++)
		printf("%d ", first[i]+1);
	printf("\n%d\n", (int)second.size());
	for(int i=0; i<second.size(); i++)
		printf("%d ", second[i]+1);
	return 0;
}