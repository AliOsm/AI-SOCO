#include <bits/stdc++.h>

#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define for1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(x) (x).begin(), (x).end()
#define clr(x) memset(x, 0, sizeof(x))
#define pb push_back
#define mp make_pair
#define prev asdfsdf
#define fi first
#define se second

using namespace std;
typedef long double ld;
typedef long long ll;
typedef pair<int, int> PII;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef long long i64;

#define x first
#define y second

int nxt() {
    int x;
    scanf("%d", &x);
    return x;
}

template <class T>
T sqr(T a) {
    return a * a;
}

struct pt {
    ll x, y;
    pt() {}
    pt(ll x, ll y) : x(x), y(y) {}
    pt operator - (const pt &r) const {
        return pt(x - r.x, y - r.y);
    }
    ll sqlen() const {
        return x * x + y * y;
    }
    ld len() const {
        return sqrtl(sqlen());
    }
};

const int N = 100 * 1000;
pt v[N];
int n;
pt a, b, t;

int getMinid(pt q, int id = -1) {
    int ida = -1;
    forn(i, n) {
        if (i != id && (ida == -1 || -(v[ida] - t).len() + (v[ida] - q).len() > -(v[i] - t).len() + (v[i] - q).len())) {
            ida = i;
        }
    }
    return ida;
}

void solve() {
    a.x = nxt();
    a.y = nxt();
    b.x = nxt();
    b.y = nxt();
    t.x = nxt();
    t.y = nxt();
    n = nxt();
    forn(i, n) {
        v[i].x = nxt();
        v[i].y = nxt();
    }
    ld sum = 0;
    forn(i, n) {
        sum += (v[i] - t).len() * 2;
    }
    int ida = getMinid(a);
    int idb = getMinid(b);
    ld ans = 1e30;
    ans = min(ans, sum - (v[ida] - t).len() + (v[ida] - a).len());
    ans = min(ans, sum - (v[idb] - t).len() + (v[idb] - b).len());

    cout << setprecision(10) << fixed;
    if (n == 1) {
        cout << ans << "\n";
        return;
    }
    int ida1 = getMinid(a, idb);
    int idb1 = getMinid(b, idb);

    assert(ida1 != -1);
    assert(idb1 != -1);
    ans = min(ans, sum - (v[idb] - t).len() - (v[ida1] - t).len() + (v[ida1] - a).len() + (v[idb] - b).len());
    ans = min(ans, sum - (v[idb1] - t).len() - (v[ida] - t).len() + (v[idb1] - b).len() + (v[ida] - a).len());
    cout << ans << "\n";
}



int main()
{
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#endif

    int t = 1;
    //t = nxt();
    while (t--) solve();

    cerr << clock() / (double)CLOCKS_PER_SEC << "\n";
    return 0;
}
