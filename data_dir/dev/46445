/*
    NO 
        TIME 
            TO 
                DIE
                    --007
                            */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli mod=998244353;
#define OS //single input use oeis
lli INF=1e17;
lli eps=1e-8;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,z,k,x,m,d,y,q,b,c;
const double pi=3.14159265358979323846;
// double dp[100005];
 
// bool cmp
struct LCA {
    vector<int> height, euler, first, segtree,parent;
    vector<bool> visited;
    int n;

    LCA(vector<vector<int>> &adj, int root = 1) {
        n = adj.size();
        height.resize(n+1);
        first.resize(n+1);
        parent.resize(n+1);
        euler.reserve(n * 2+2);
        visited.assign(n+1, false);
        dfs(adj, root,0,root);
        int m = euler.size();
        segtree.resize(m * 4+5);
        build(1, 0, m - 1);
    }

    void dfs(vector<vector<int>> &adj, int node, int h ,int parentt) {
        visited[node] = true;
        height[node] = h;
        first[node] = euler.size();
        parent[node]=parentt;
        euler.push_back(node);
        for (auto to : adj[node]) {
            if (!visited[to]) {
                dfs(adj, to, h + 1,node);
                euler.push_back(node);
            }
        }
    }

    void build(int node, int b, int e) {
        if (b == e) {
            segtree[node] = euler[b];
        } else {
            int mid = (b + e) / 2;
            build(node << 1, b, mid);
            build(node << 1 | 1, mid + 1, e);
            int l = segtree[node << 1], r = segtree[node << 1 | 1];
            segtree[node] = (height[l] < height[r]) ? l : r;
        }
    }

    int query(int node, int b, int e, int L, int R) {
        if (b > R || e < L)
            return -1;
        if (b >= L && e <= R)
            return segtree[node];
        int mid = (b + e) >> 1;

        int left = query(node << 1, b, mid, L, R);
        int right = query(node << 1 | 1, mid + 1, e, L, R);
        if (left == -1) return right;
        if (right == -1) return left;
        return height[left] < height[right] ? left : right;
    }

    int lca(int u, int v) {
        int left = first[u], right = first[v];
        if (left > right)
            swap(left, right);
        return query(1, 0, euler.size() - 1, left, right);
    }
};
vector<int> height;
bool cmp(lli a,lli b)
{
    return height[a]<height[b];
}
int main()
{
 #ifndef ONLINE_JUDGE
 freopen("input.txt", "r", stdin);
 freopen("output.txt", "w", stdout);
 #endif
 IO;
 OS;
 lli t;
 cin>>t;
 for(int i=1;i<=t;i++)
 {
    lli a,b;
    cin>>a>>b;
    if(a>b)
        swap(a,b);
    if(a==b)
    {
        cout<<0<<"\n";
    }
    else
    {
        lli ans=(b-a)/5ll;
        lli val=(b-a)/5ll;
        a+=val*5ll;
        val=b-a;
        if(val==0)
            cout<<ans<<"\n";
        else if(val==1)
            cout<<ans+1<<"\n";
        else if(val==2)
            cout<<ans+1<<"\n";
        else if(val==3)
            cout<<ans+2<<"\n";
        else
            cout<<ans+2<<"\n";
    }
 }
}