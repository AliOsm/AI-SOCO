#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <cstdio>
#include <string>
#include <stdlib.h>
#include <set>
#include <vector>
#include <list>
#include <algorithm>
#include <regex>
#include <math.h>
#include <map>
#include <iterator>
#include <climits>
#include <numeric>
#include <bitset>
#include <unordered_map>
#include <unordered_set>
#include <iomanip>
#include <queue>
#include <deque>
#include <stack>
#include <array>
#include <valarray>
#include <complex>
#include <random>

using namespace std;

#define int long long
#define ll long long
typedef int hv;
#define double long double
#define make(type, x) type x; cin>>x
#define make2(type, x, y) type x, y; cin>>x>>y
#define make3(type, x, y, z) type x, y, z; cin>>x>>y>>z
#define make4(type, x, y, z, q) type x, y, z, q; cin>>x>>y>>z>>q
#define ALL(x) (x).begin(), (x).end()
#define FORIT(p) for(auto it = p.begin(); it != p.end(); it++)
#define FOR(b) for(signed i = 0; i <(b); i++)
#define VI vector<int>
#define VVI vector<vector<int>>
#define PII pair<int, int>
#define PPII pair<PII, int>
#define M7 1000000007l
#define M9 1000000009l
#define make_v(a, n) VI a(n); FOR(n) cin >> a[i];

map<int, int> mp;
const int MAXN = 100001;
int a[MAXN], b[MAXN];

int getMaxMap() {
	int mx = 0;
	FORIT(mp) mx = max(mx, it->second);
	return mx;
}

void Solve() {
	make2(int, n, y1);
	FOR(n) cin >> a[i], mp[a[i]]++;
	make2(int, m, y2);
	FOR(m) cin >> b[i], mp[b[i]]++;

	int ans = getMaxMap();
	for (int k = 0; k < 30; ++k) {
		mp.clear();
		FOR(n) mp[a[i] % (2ll << k)]++;
		FOR(m) mp[(b[i] + (1ll << k)) % (2ll << k)]++;
		ans = max(ans, getMaxMap());
	}
	cout << ans;
}


signed main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	Solve();
	while (!cin.eof()) {
		string s = "_";
		do getline(cin, s);
		while (!cin.eof() && !s.empty());
		if (cin.eof()) return 0;
		FOR(2) cout << endl;
		Solve();
	}
#else
	Solve();
#endif
	return 0;
}