/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const ld PI = 3.14159265358979323846;

#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

class BFoodOnThePlane {
public:
	void solve(std::istream& in, std::ostream& out) {
		string s; in>>s;
		char c = s.back();
		s = s.substr(0, s.length()-1);
		ll row = stoll(s);
		ll res = ((row-1)/4)*12;
		if(row%4==1 or row%4==2) res += (row-1);
		else res += (row-3);
		if(row%4==2 or row%4==0) res += 6;
		if(c=='a') res += 4;
		if(c=='b') res += 5;
		if(c=='c') res += 6;
		if(c=='d') res += 3;
		if(c=='e') res += 2;
		if(c=='f') res += 1;
		out<<res;
	}
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	BFoodOnThePlane solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
