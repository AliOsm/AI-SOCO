#pragma GCC optimize ("O3")
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define mod(n, m) (((n%m) + m)%m)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'

const int N = 2e5 + 5;
pair<ll, int> tree[4 * N];
ll lazy[4 * N], arr[N], ans[N];

void propagate(int node, int st, int en)
{
	if (lazy[node] == 0)
		return;

	tree[node].first -= lazy[node];

	if (st != en)
	{
		lazy[2 * node] += lazy[node];
		lazy[2 * node + 1] += lazy[node];
	}

	lazy[node] = 0;
}

void updatePos(int node, int st, int en, int shemal, int yemeen, ll val)
{
	propagate(node, st, en);

	if (st > en || st > yemeen || en < shemal)
		return;

	if (shemal <= st && en <= yemeen)
	{
		tree[node] =
		{	val, -st};
		return;
	}

	int mid = (st + en) / 2;

	updatePos(2 * node, st, mid, shemal, yemeen, val);
	updatePos(2 * node + 1, mid + 1, en, shemal, yemeen, val);

	tree[node] = min(tree[2 * node], tree[2 * node + 1]);
}

void update(int node, int st, int en, int shemal, int yemeen, ll val)
{
	propagate(node, st, en);

	if (st > en || st > yemeen || en < shemal)
		return;

	if (shemal <= st && en <= yemeen)
	{
		lazy[node] += val;
		propagate(node, st, en);
		return;
	}

	int mid = (st + en) / 2;

	update(2 * node, st, mid, shemal, yemeen, val);
	update(2 * node + 1, mid + 1, en, shemal, yemeen, val);

	tree[node] = min(tree[2 * node], tree[2 * node + 1]);
}

pair<ll, int> query(int node, int st, int en, int shemal, int yemeen)
{
	propagate(node, st, en);

	if (st > en || st > yemeen || en < shemal)
		return
		{	1e16, 1e9};

	if (shemal <= st && en <= yemeen)
		return tree[node];

	int mid = (st + en) / 2;

	pair<ll, int> a = query(2 * node, st, mid, shemal, yemeen);
	pair<ll, int> b = query(2 * node + 1, mid + 1, en, shemal, yemeen);

	return min(a, b);
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	int n;
	cin >> n;

	rep(i, 0, 4*N)
		tree[i] =
		{	1e16, 1e9};

	rep(i, 0, n)
	{
		cin >> arr[i];
		updatePos(1, 0, n - 1, i, i, arr[i]);
	}

	erep(i, 1, n)
	{
		pair<ll, int> curr = query(1, 0, n - 1, 0, n - 1);
		int idx = -1 * curr.second;
		updatePos(1, 0, n - 1, idx, idx, 1e16);
		ans[idx] = i;
		update(1, 0, n - 1, idx, n - 1, i);
	}

	rep(i, 0, n)
		cout << ans[i] << " ";
	cout << endl;

	return 0;
}
