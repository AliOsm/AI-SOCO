#include <iostream>
#include <string>
#include <set>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <vector>
#include <map>
#include<queue>
#include <unordered_map>
#include <unordered_set>
#include <iomanip>
#include <stack>
#include <bitset>
#define Min(x, y, z, p) min(min(min(x, y), z), p)
#define sze(a) (int)a.size()
#define all(a) a.begin(),a.end()
using namespace std;
long double const EPS = 1e-7;
long long const INF = 1000000007ll;
typedef long long ll;
typedef long double ld;
#define int ll
#define double long double
int n, m; 
const int N = 1 << 18;
int a[N], t[4*N];

bool build(int v, int tl, int tr) {
	if (tl == tr) {
		t[v] = a[tl];
		return 1;
	}
	int m = (tl + tr) >> 1;
	bool take = build(v << 1, tl, m);
	build(v << 1 | 1, m + 1, tr);
	if (!take) {
		t[v] = t[v << 1] ^ t[v << 1 | 1];
		return 1;
	}
	t[v] = t[v << 1] | t[v << 1 | 1];
	return 0;
}

bool update(int v, int tl, int tr, int pos, int val) {
	if (tl == tr) {
		t[v] = val;
		return 1;
	}
	int m = (tl + tr) >> 1;
	bool take;
	if (pos <= m) {
		take = update(v << 1, tl, m, pos, val);
	}
	else {
		take = update(v << 1 | 1, m + 1, tr, pos, val);
	}
	if (take)
	{
		t[v] = t[v << 1] | t[v << 1 | 1];
		return 0;
	}

	t[v] = t[v << 1] ^ t[v << 1 | 1];
	return 1;
}


signed main()
{
	ios::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
	
	cin >> n >> m; 
	for (int i = 0; i < (1 << n); i++)
		cin >> a[i];

	build(1, 0, (1 << n) - 1);

	while (m--) {
		int p, b; cin >> p >> b;

		update(1, 0, (1 << n) - 1, --p, b);

		cout << t[1] << '\n';
	}
	return 0;
}





