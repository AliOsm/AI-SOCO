#include <bits/stdc++.h>
#ifdef DEBUG
#include "_debug.cpp"
#include "callable.hpp/callable.hpp"
#endif
#define endl '\n'
using namespace std;
using ll = long long;
#define N 100'000
int a[N];
int gt(auto L, auto R, auto v) { return upper_bound(L, R, v) - L; }
int ge(auto L, auto R, auto v) { return lower_bound(L, R, v) - L; }
int lt(auto L, auto R, auto v) { return lower_bound(L, R, v) - L - 1; }
int le(auto L, auto R, auto v) { return upper_bound(L, R, v) - L - 1; }
auto gt(const auto& bst, auto v) { return bst.upper_bound(v); }
auto ge(const auto& bst, auto v) { return bst.lower_bound(v); }
auto lt(const auto& bst, auto v) { return bst.lower_bound(v) == bst.begin() ? bst.end() : --bst.lower_bound(v); }
auto le(const auto& bst, auto v) { return bst.upper_bound(v) == bst.begin() ? bst.end() : --bst.upper_bound(v); }
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n, k;
    cin >> n >> k;
    map<int, int> m = {{0, 0}};
    for(int i = 0; i < n; i++) {
        cin >> a[i];
        auto p = le(m, a[i]);
        if(p->first + k > a[i]) {
            m[p->first] = max(m[p->first], a[i]);
        } else {
            m[max(p->second + 1, a[i] - k + 1)] = a[i];
        }
    }
    for(int i = 0; i < n; i++) {
        cout << le(m, a[i])->first << " ";
    }
    cout << endl;
    return 0;
}
