#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>
#include <iostream>
#include <algorithm>
#include <string>
#include <string.h>
#include <vector>
#include <map>
#include <set>
#include <list>
#include <deque>
#include <queue>
#include <sstream>

using namespace std;

#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define ppb pop_back
#define rept(i,c) for (typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)

#define task "a"

typedef long long ll;
typedef pair<int,int> pii;

const int maxN=1<<17;
const int maxK = 30;
const int INF=(int)1e9;
const int MOD = 7+(int)1e9;
const double eps = 1e-9;

struct segTree {
	int T[4*maxN];
	int A[4*maxN];
	segTree() {
		for (int i = 0; i < 4*maxN; i++) {
			T[i] = 0;
			A[i] = 0;
		}
	}
	void push (int v) {
		A[v * 2] ^= A[v];
		A[v * 2 + 1] ^= A[v]; 
		A[v] = 0;
	}
	int f (int v, int tl, int tr) {
		return ( (A[v] == 0) ?  (T[v])  : ((tr - tl) - T[v]) );
	}
	void norm (int v, int tl, int tr) {
		int tm = (tl + tr) / 2;
		T[v] = f(v * 2, tl, tm) + f(v * 2 + 1, tm, tr);
	}
	void upd(int v, int tl, int tr, int l, int r) {
		if (tr - tl < 1) {
			return;
		}
		if (tl >= r || l >= tr) {
			return;
		}
		if (l <= tl && tr <= r) {
			A[v] ^= 1;
			return;
		}
		int tm = (tl + tr) / 2;
		push(v);
		upd(v * 2, tl, tm, l, r);
		upd(v * 2 + 1, tm, tr, l, r);
		norm(v, tl, tr);
	}
	int calc(int v, int tl, int tr, int l, int r) {
		if (tr - tl < 1) {
			return 0;
		}
		if (tl >= r || l >= tr) {
			return 0;
		}
		if (l <= tl && tr <= r) {
			int res = f(v, tl, tr);
		//	cout << v << " " << res << endl;
			return res;
		}
		push(v);
		int tm = (tl + tr) / 2;
		int res = calc(v * 2, tl, tm, l, r) + calc(v * 2 + 1, tm, tr, l, r);
		norm(v, tl, tr);
		///cout << v<<" " << res << endl;
		return res;
	}
	int calc(int l, int r) {
		return calc(1, 1, maxN, l, r + 1);
	}
	void upd(int l, int r) {
		upd(1, 1, maxN, l, r + 1);
	}
	void printA () {
		for (int i = 0; i < 4*maxN; i++) {
			cout << A[i] << " ";
		}
		cout << endl;
	}
	void printT () {
		for (int i = 0; i < 4*maxN; i++) {
			cout << T[i] << " ";
		}
		cout << endl;
	}
};

segTree A[maxK + 1];

void upd_ (int l, int r, int x) {
	for (int j = 0; j < maxK; j++) {
		if(((x >> j) & 1)) {
			A[j].upd(l, r);
		}
	}	
}
ll get_ (int l, int r) {
	ll res = 0;
	for (int j = 0; j < maxK; j++) {
		res += (1LL << j) * (A[j].calc(l, r));
	///	cout << A[j].calc(l, r) << " ";
			
	}
	return res;
}

void print_ () {
	for (int i = 0; i < 4*maxN; i++) {
		cout << i << " ";
	}
	cout << endl;
	for (int i = 0; i < maxK; i++) {
		A[i].printA();
	}
	for (int i = 0; i < maxK; i++) {
		A[i].printT();
	}
	cout << endl;
}
void printBin(int n) {
	for (int i = maxK; i >= 0; i--) {
		cout << ((n>>i)&1);
	}
	cout << endl;
}
int main(void){
  //  freopen(task".in", "r",stdin); freopen(task".out","w",stdout);
	int n;
	cin >> n;
//	cout << get_(1,n) << endl;
	for (int i = 1; i <= n; i++) {
		int x;
		cin >> x;
		upd_(i, i, x);
	//	print_();
	//	cout << get_(i,i) << endl;
	}
	
	int q;
	cin >> q;
	while (q--) {
		int t;
		cin >> t;
		if (t == 1) {
			int l, r;
			cin >> l >> r;
			ll res = get_(l, r);
			cout << res << endl;
		}
		if (t == 2) {
			int l, r, x;
			cin >> l >> r >> x;
			upd_(l, r, x);
		}
	}
	return 0;
}




