#include "bits/stdc++.h"
#include "ext/pb_ds/tree_policy.hpp"
#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}

const int maxn = 3010;
int dp[maxn][maxn];
PII trans[maxn][maxn];
vector<int>adj[maxn];
vector<int>tri[maxn][maxn];

void showPath(PII last){
	stack<int>s;
	while(last!=MP(0,0)){
		s.push(last.se);
		last = trans[last.fi][last.se];
	}
	while(sz(s)){
		printf("%d ",s.top());
		s.pop();
	}
}
int main(){
	mst(dp,0x3f);
	int n,m,k;in(n);in(m);in(k);
	REP(i,0,m){
		int a,b;in(a);in(b);adj[a].PB(b);adj[b].PB(a);
	}
	REP(i,0,k){
		int a,b,c;in(a);in(b);in(c);
		tri[a][b].PB(c);
	}
	REP(i,1,n+1){
		REP(j,1,n+1)sort(all(tri[i][j]));
	}
	queue<PII>q;
	dp[0][1] = 0;
	q.push(MP(0,1));
	while(!q.empty()){
		auto f = q.front();q.pop();
		for(auto nxt:adj[f.se]){
			if(dp[f.se][nxt]<=dp[f.fi][f.se]+1)continue;
			if(binary_search(all(tri[f.fi][f.se]),nxt))continue;
			dp[f.se][nxt]=dp[f.fi][f.se]+1;
			trans[f.se][nxt] = f;
			q.push(MP(f.se,nxt));
		}
	}
	int ans = 0;
	REP(i,1,n+1){
		if(dp[i][n]<dp[ans][n])ans = i;
	}
	if(dp[ans][n]>inf){
		cout<<-1;return 0;
	}
	cout<<dp[ans][n]<<endl;
	showPath(MP(ans,n));
	return 0;
}