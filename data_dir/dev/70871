#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

ll read_long() {
    ll ans = 0;
    char c;
    bool started = false;
    bool is_negative = false;
    while (true) {
        c = getchar();
        if ((c < '0' || c > '9') && c != '-' && !started) continue;
        if ((c < '0' || c > '9') && c != '-' && started) break;
        if (started) {
            ans = ans * 10;
        }
        started = true;
        if (c == '-') is_negative = true;
        else ans += c - '0';
    }
    if (is_negative) ans *= -1;
    return ans;
}

int t;
int n;
vector<int> g[1010];
int k1, x[1010], k2, y[1010];
int col[1010];
int is_par[1010];
int is_sec[1010];
int last[1010];
int par[1010];
int root[1010];

void dfs(int v, int p, int r) {
    root[v] = r;
    par[v] = p;
    forit (it, g[v]) {
        int to = *it;
        if (to != p) dfs(to, v, r);
    }
}

int ask(bool own, int x) {
    if (own) cout << "A ";
    else cout << "B ";
    cout << x + 1 << endl;
    int ans;
    cin >> ans;
    ans--;
    return ans;
}

void solve() {
    cin >> n;
    for (int i = 0; i < n; i++) g[i].clear();
    for (int i = 1; i < n; i++) {
        int x, y;
        cin >> x >> y;
        x--; y--;
        g[x].pb(y);
        g[y].pb(x);
    }
    cin >> k1;
    for (int i = 0; i < k1; i++) {
        cin >> x[i];
        x[i]--;
    }
    cin >> k2;
    for (int i = 0; i < k2; i++) {
        cin >> y[i];
        y[i]--;
    }
    for (int i = 0; i < n; i++) col[i] = -1, is_par[i] = is_sec[i] = 0;
    for (int i = 0; i < k1; i++) {
        is_par[x[i]] = 1;
    }
    for (int i = 0; i < k2; i++) {
        is_sec[y[i]] = 1;
    }
    for (int i = 0; i < k1; i++) {
        forit (it, g[x[i]]) {
            int to = *it;
            if (is_par[to]) continue;
            dfs(to, x[i], x[i]);
        }
    }
    int in_my = ask(0, y[0]);
    if (is_par[in_my]) {
        cout << "C " << in_my + 1 << endl;
        return;
    }
    in_my = root[in_my];
    int in_his = ask(1, in_my);
    if (is_sec[in_his]) {
        cout << "C " << in_my + 1 << endl;
        return;
    }
    cout << "C " << -1 << endl;
}

int main(){

    cin >> t;

    while (t--) solve();

    return 0;
}
