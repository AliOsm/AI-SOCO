#include<bits/stdc++.h>

using namespace std;
const int maxn=1e6+4;
int a[maxn],val[maxn];
vector < int > al[maxn];
int root=-1;
bool ans1=false,ans=false;
int s1=-1,s2=-1,res=-1,fp=-1,val1=-1,val2=-1,fp1=-1,tot=0;

static void build(int u,int p)
{
		for(int i=0;i<al[u].size();i++)
		{
			int x=al[u][i];
			if(x!=p)
			{
				build(x,u);a[u]+=a[x];val[u]+=val[x];
			}
		}
		if(a[u]==(tot/3)*2 && val[u]>=1 && tot%3==0 && u!=root)
		{
			ans1=true;val1=u;fp1=p;
		}
		if(a[u]==tot/3 && tot%3==0)
		{
			val[u]++;
		}
}

static void dfs(int u,int p)
{
		int curr1=-1,curr2=-1;
		for(int i=0;i<al[u].size();i++)	
		{
			int x=al[u][i];
			if(x!=p)
			{
				if(val[x]>=1)
				{
					if(curr1==-1)
					{
						curr1=x;
					}
					else if(curr2==-1)
					{
						curr2=x;
					}
				}
			}
		}
		if(curr1!=-1 && curr2!=-1)
		{
			ans=true;s1=curr1;s2=curr2;fp=u;
		}
		else
		{
			for(int i=0;i<al[u].size();i++)
			{
				int x=al[u][i];
				if(x!=p)
				{
					dfs(x,u);
				}
			}
		}
}

static void dfs1(int u,int p)
{
		if(a[u]==tot/3 && tot%3==0)
		{
			res=u;
		}
		else
		{
			for(int i=0;i<al[u].size();i++)
			{
				int x=al[u][i];
				if(x!=p)
				{
					dfs1(x,u);
				}
			}
		}
}
	
static void dfs4(int u,int p)
{
		if(tot%3==0 && a[u]==tot/3 && u!=val1 && u!=root)
		{
			val2=u;
		}
		else
		{
			for(int i=0;i<al[u].size();i++)
			{
				int x=al[u][i];
				if(x!=p)
				{
					dfs4(x,u);
				}
			}
		}
}
	
int main()
{
	int n;scanf("%d",&n);
	for(int i=0;i<n;i++)
	{
		int u=i,v,val;scanf("%d%d",&v,&val);v--;a[i]=val;tot+=a[i];
		if(v<0)
		{
			root=u;continue;
		}
		al[v].push_back(u);
	}
	build(root,-1);dfs(root,-1);
	if(ans)
	{
		dfs1(s1,fp);res++;printf("%d ",res);res=-1;dfs1(s2,fp);res++;printf("%d",res);printf("\n");
	}
	else if(ans1)
	{
		printf("%d ",(val1+1));dfs4(val1,fp1);printf("%d ",(val2+1));printf("\n");
	}
	else
	{
		printf("-1\n");
	}
}