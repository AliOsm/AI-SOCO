#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <iterator>
#include <functional>

using namespace std;

vector<int>& operator++ (vector<int> &v) {
	vector<int>::reverse_iterator it;

	for (it = v.rbegin(); *it == 1; ++it)
		*it = 0;
	*it = 1;

	return v;
}

int main()
{
	int n, l, r, x, cnt = 0;
	cin >> n >> l >> r >> x;

	vector<int> c, bitnum(n, 0), res(n);
	copy_n (istream_iterator<int>(cin), n, back_inserter(c));

	sort (c.begin(), c.end());

	for (int i = 1; i < (1 << n); i++) {
		++bitnum;

		transform (c.begin(), c.end(),
				   bitnum.begin(), 
				   res.begin(),
				   multiplies<int>());
		

		auto res_end = remove (res.begin(), res.end(), 0);

		int complexity = accumulate (res.begin(), res_end, 0);

		if (res_end - res.begin() >= 2 && complexity >= l && complexity <= r && *(res_end - 1) - *res.begin() >= x)
			cnt++;
	}

	cout << cnt;
}
