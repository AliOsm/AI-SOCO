#include<bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define oset tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update> 

#define ll long long

#ifdef sarthak
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cout << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
int begtime = clock();
#else
#define trace(...)
#endif

#ifndef sarthak
    #pragma GCC optimize("Ofast")
    #pragma GCC optimize("unroll-loops")
    // #pragma GCC target ("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#endif

#define foreach(it,ar) for (auto it = ar.begin(); it != ar.end(); it++)
#define fort(i,v) for(auto i:v)
#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) rep(i,sizeof(ar)/sizeof(ll)) ar[i]=val
#define fill2(ar,val) rep(i,sizeof(ar)/sizeof(ar[0])) rep(j,sizeof(ar[0])/sizeof(ll)) ar[i][j]=val
#define fill0(ar) memset(ar,0,sizeof(ar))
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld long double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sd(x) scanf("%d",&x)
#define slld(x) scanf("%lld",&x)
#define sd2(x,y) scanf("%d %d",&x,&y)
#define slld2(x,y) scanf("%lld %lld",&x,&y)
#define pd(x) printf("%d\n",x)
#define plld(x) printf("%lld\n",x)
#define pd2(x,y) printf("%d %d\n",x,y)
#define plld2(x,y) printf("%lld %lld\n",x,y)
#define all(ar) ar.begin(), ar.end()
#define endl '\n'
#define sz(x) (int)x.size()
#define len(x) (int)x.length()

typedef pair<ll, ll> ii;
typedef pair<ii, ll> iii;
typedef vector<ii> vii;
typedef vector<ll> vi;

#define INF 1000000000000000000
#define PI 3.14159265358979323846L

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rngb(chrono::steady_clock::now().time_since_epoch().count()); // can give negative values too

ll mod = 998244353;
const ll N = 300000;
ll p[N+1];
ll pre[N+1];
ll num[N+1];

ll gcdExtended(ll a, ll b, ll *x, ll *y) 
{ 
    if (a == 0) 
    { 
        *x = 0, *y = 1; 
        return b; 
    } 
  
    ll x1, y1; 
    ll gcd = gcdExtended(b%a, a, &x1, &y1); 
  
    *x = y1 - (b/a) * x1; 
    *y = x1; 
  
    return gcd; 
} 

ll modInverse(ll a, ll m) 
{ 
    ll x, y; 
    ll g = gcdExtended(a, m, &x, &y); 
    ll res = (x%m + m) % m; 
    return res; 
} 

void init(ll n)
{
    pre[0] = 1;
    num[0] = 0;
    fr(i,1,n)
    {
        pre[i] = pre[i-1]*p[i];
        pre[i] %= mod;
        num[i] = (num[i-1]+1)*p[i];
        num[i] %= mod;
    }
}

map<pair<ll,ll>, ll> m;
bool val[N];

ll getAns(ll st, ll en)
{
    ll x2 = modInverse(pre[st-1],mod);
    ll y2 = pre[en]*x2;
    y2 %= mod;

    ll x3 = num[en] - (num[st-1]*y2);
    x3 %= mod;
    x3 += mod;
    x3 %= mod;

    return x3;
}

ll ans;
void remove(ll v)
{
    // foreach(it3,m)
    // {
    //     trace(it3->ff.ff,it3->ff.ss);
    // }
    auto it = m.upper_bound(mp(v,0));
    auto it2 = it;
    it2--;
    ll st = it2->ff.ff;
    ll en = it->ff.ss;

    ll x1 = getAns(st,en);
    ll x2 = getAns(st,v-1);
    ll x3 = getAns(v,en);
    m.erase(it);
    m.erase(it2);
    m[mp(st,en)]++;

    ans = ans + x1 - x2;
    ans = ans-x3;
    ans %= mod;
    ans += mod;
    ans %= mod;
}

void get(ll v)
{
    auto it = m.upper_bound(mp(v,0));
    it--;
    ll st = it->ff.ff;
    ll en = it->ff.ss;

    ll x1 = getAns(st,en);
    ll x2 = getAns(st,v-1);
    ll x3 = getAns(v,en);
    m.erase(it);
    m[mp(st,v-1)]++;
    m[mp(v,en)]++;

    ans = ans-x1+x2+x3;
    ans %= mod;
    ans += mod;
    ans %= mod;
}

void solve()
{
    ll n,q;
    cin >> n >> q;

    fr(i,1,n)
    {
        cin >> p[i];
        ll a = p[i];
        ll b = 100;
        ll gc = __gcd(a,b);
        a = a/gc;
        b = b/gc;
        ll xx = modInverse(a,mod);
        xx = xx*b;
        xx %= mod;
        p[i] = xx;
    }

    init(n);
    val[1] = 1;
    m[mp(1,n)]++;

    ans = num[n];

    while(q--)
    {
        ll xx;
        cin >> xx;
        if(val[xx])
        {
            remove(xx);
            val[xx] = 0;
        }
        else
        {
            get(xx);
            val[xx] = 1;
        }

        cout << ans << endl;
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout << fixed;
    cout << setprecision(10);
    #ifdef sarthak
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    ll t = 1;
    // cin >> t;
    while(t--)
    {
        solve();
    }

    #ifdef sarthak
    cerr << "Time elapsed: " << (clock() - begtime)*1000/CLOCKS_PER_SEC << " ms\n\n";
    #endif
}
