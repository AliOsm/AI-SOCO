#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef long double ld;
typedef pair<ll,ll> p2;
ll t[400005][20],lazy[400005][20];
void push(ll i,ll v,ll tl,ll tr){
  ll tm=(tl+tr)/2;
  t[2*v][i]=tm-tl-t[2*v][i]+1;
  t[2*v+1][i]=tr-tm-t[2*v+1][i];
  lazy[2*v][i]^=1;
  lazy[2*v+1][i]^=1;
  lazy[v][i]=0;
}
void update(ll i,ll v,ll tl,ll tr,ll l,ll r){
  if(l>r)
    return;
  if(l==tl&&r==tr){
    t[v][i]=tr-tl-t[v][i]+1;
    lazy[v][i]^=1;
    return;
  }
  if(lazy[v][i])
    push(i,v,tl,tr);
  ll tm=(tl+tr)/2;
  update(i,2*v,tl,tm,l,min(r,tm));
  update(i,2*v+1,tm+1,tr,max(l,tm+1),r);
  t[v][i]=t[2*v][i]+t[2*v+1][i];
}
ll query(ll i,ll v,ll tl,ll tr,ll l,ll r){
  if(l>r)
    return 0;
  if(l==tl&&r==tr)
    return t[v][i];
  if(lazy[v][i])
    push(i,v,tl,tr);
  ll tm=(tl+tr)/2;
  return query(i,2*v,tl,tm,l,min(r,tm))+query(i,2*v+1,tm+1,tr,max(l,tm+1),r);
}
vector<ll> func(ll n){
  vector<ll> v;
  ll cnt=0;
  while(n>0){
    if(n&1)
      v.push_back(cnt);
    n>>=1;
    cnt++;
  }
  return v;
}
void solve(){
  ll n,m;
  cin>>n;
  for(ll i=1;i<=n;i++){
    ll x;
    cin>>x;
    vector<ll> v=func(x);
    for(ll j=0;j<v.size();j++)
      update(v[j],1,1,n,i,i);
  }
  cin>>m;
  for(ll i=0;i<m;i++){
    ll op,l,r;
    cin>>op>>l>>r;
    if(op==1){
      ll res=0,val=1;
      for(ll j=0;j<20;j++){
        res+=query(j,1,1,n,l,r)*val;
        val*=2;
      }
      cout<<res<<endl;
    }
    else{
      ll x;
      cin>>x;
      vector<ll> v=func(x);
      for(ll j=0;j<v.size();j++)
        update(v[j],1,1,n,l,r);
    }
  }
}
int main(){
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  ll q=1;
  for(ll i=0;i<q;i++)
    solve();
}