#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

int main() {
  int n;
  scanf("%d", &n);
  vector<int> a(n), dp(n), nxt(n);
  for (int i = 0; i < n; ++i) {
    scanf("%d", &a[i]);
  }
  map<int, int> last;
  int ret = 0;
  for (int i = n - 1; i >= 0; --i) {
    int k = a[i] + 1;
    auto it = last.find(k);
    if (it == last.end()) {
      dp[i] = 1;
      nxt[i] = -1;
    } else {
      dp[i] = dp[it->second] + 1;
      nxt[i] = it->second;
    }
    last[a[i]] = i;
    ret = max(ret, dp[i]);
  }
  int best_i = -1;
  for (int i = 0; i < n; ++i) {
    if (ret == dp[i]) {
      best_i = i;
      break;
    }
  }
  printf("%d\n", ret);
  for (int i = best_i; i != -1; i = nxt[i]) {
    printf("%d ", i + 1);
  }
  puts("");
  return 0;
}
