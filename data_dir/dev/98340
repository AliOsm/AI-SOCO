#include <bits/stdc++.h>
#define l first
#define r second
using namespace std;
int n;
const int sz=3e5+9;
pair<int,int> a[sz],tmp;
pair<int,int> segtree[4*sz];

pair<int,int> in(pair<int,int> x,pair<int,int> y){
    if(x.l==y.l&&x.r==y.r) return x;
    if(x.l>y.r||y.l>x.r) return {-1,-1};
    return {max(x.l,y.l),min(x.r,y.r)};
}


void build(int node,int left,int right){
    if(left==right){
        segtree[node]=a[left];
        return;
    }
    int mid=(left+right)>>1;
    build(2*node,left,mid);
    build(2*node+1,mid+1,right);
    segtree[node]=in(segtree[2*node],segtree[2*node+1]);
}

pair<int,int> query(int node,int left,int right,int l,int r){
    if(right<l||left>r) return {0,1e9};
    if(l<=left&&r>=right) return segtree[node];
    int mid=(left+right)>>1;
    pair<int,int> lson=query(2*node,left,mid,l,r);
    pair<int,int> rson=query(2*node+1,mid+1,right,l,r);
    return in(lson,rson);
}

int main()
{
    //freopen("in.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    scanf("%d",&n);
    for(int i=1;i<=n;i++) scanf("%d %d",&a[i].l,&a[i].r);
    build(1,1,n);
    int ans=0;
    for(int i=1;i<=n;i++){
        if(i==1) tmp=query(1,1,n,2,n);
        else if(i==n) tmp=query(1,1,n,1,n-1);
        else tmp=in(query(1,1,n,1,i-1),query(1,1,n,i+1,n));
        ans=max(ans,tmp.r-tmp.l);
    }
    printf("%d",ans);
    return 0;
}
