#include<bits/stdc++.h>
using namespace std;

struct UF{
	vector<int> belong;
	vector<int> size;
	void resize(int n){
		belong.assign(n + 1, -1);
		size.assign(n + 1, 1);
	}
	inline int root(int b){
		if (belong[b] == -1){
			return b;
		}
		belong[b] = root(belong[b]);
		return belong[b];
	}
	void merge(int a, int b){
		a = root(a);
		b = root(b);
		if (a == b)return;
		belong[a] = b;
		size[b] += size[a];
	}
};
UF uf;
int n;
int m;
int q;
int main(){
	cin >> n >> m >> q;
	uf.resize(n + m);
	while (q--){
		int r, c;
		scanf("%d%d", &r, &c);
		--r;
		c--;
		uf.merge(r, n+c);
	}
	int ans = -1;
	for (int i = 0; i< n + m; i++){
		if (uf.root(i) == i){
			ans++;
		}
	}
	cout << ans << endl;
	return 0;
}