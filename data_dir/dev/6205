#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

const int N = 2e5 + 10;
int main() {
  int n;
  scanf("%d", &n);
  vector<int> cnt(N);
  for (int i = 0; i < n; ++i) {
    int x;
    scanf("%d", &x);
    cnt[x]++;
  }
  vector<int> ret;
  for (int i = 0; i < N; ++i) {
    if (cnt[i] > 0) {
      ret = {i};
      break;
    }
  }
  for (int i = 1; i < N; ++i) {
    if (cnt[i] > 0 && cnt[i - 1] > 0) {
      ret = {i - 1, i};
      break;
    }
  }
  int best = 0, best_x = -1, best_y = -1;
  for (int i = 0, j; i < N; i = j) {
    for (; i < N && cnt[i] < 2; ++i);
    if (i == N) break;
    int sum = 0;
    for (j = i; j < N && cnt[j] >= 2; ++j) {
      sum += cnt[j];
    }
    int x = i, y = j - 1;
    if (x - 1 >= 0 && cnt[x - 1] > 0) sum += cnt[--x];
    if (y + 1 < N && cnt[y + 1] > 0) sum += cnt[++y];
    if (best < sum) {
      best = sum;
      best_x = x;
      best_y = y;
    }
  }
  if (best > ret.size()) {
    ret.clear();
    for (int i = best_x; i <= best_y; ++i) {
      int len = cnt[i];
      if (i > best_x && i < best_y) --len;
      while (len--) ret.push_back(i);
    }
    for (int i = best_y - 1; i > best_x; --i) {
      ret.push_back(i);
    }
  }
  printf("%d\n", (int)ret.size());
  for (int i = 0; i < ret.size(); ++i) {
    printf("%d%c", ret[i], " \n"[i + 1 == ret.size()]);
  }
  return 0;
}
