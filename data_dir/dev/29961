#include <bits/stdc++.h>

#define ll long long
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ff first
#define ss second

using namespace std;

const double pi=acos(-1);
const int N=(int)2e5+7,mod=1000000007,M=2e9;

//scanf("%d",&);
int n,m,l,sz,ans[N];
pair<pii,int> part[N];
pair<pii,pii> cast[N];
map<int,int> mp;

struct st{
    int mn[1<<19];

    void build(int from=0,int to=sz+1,int i=0){
        if(from==to){
            mn[i]=M;
            return ;
        }
        int mid=(from+to)>>1,l=2*i+1,r=l+1;
        build(from,mid,l);
        build(mid+1,to,r);
        mn[i]=min(mn[l],mn[r]);
    }

    void update(int x,int v,int from=0,int to=sz+1,int i=0){
        if(x>to||x<from)return ;
        if(from==to){
            mn[i]=v;
            return ;
        }
        int mid=(from+to)>>1,l=2*i+1,r=l+1;
        update(x,v,from,mid,l);
        update(x,v,mid+1,to,r);
        mn[i]=min(mn[l],mn[r]);
    }

    int get(int x,int from=0,int to=sz+1,int i=0){
        if(x>to)return M;
        if(from>=x)return mn[i];
        int mid=(from+to)>>1,l=2*i+1,r=l+1;
        if(x>mid)return get(x,mid+1,to,r);
        return min(get(x,from,mid,l),get(x,mid+1,to,r));
    }
};

struct pq{
    stack<pii> v[N];
    st tree;

    void init(){
        tree.build();
    }

    void push(int x,int k,int id){
        x=mp[x];
        v[x].push({k,id});
        tree.update(x,x);
    }

    int pop(int x){
        x=mp[x];
        int a=tree.get(x);
        if(a>sz||v[a].empty())return -1;
        pii b=v[a].top();
        v[a].pop();
        b.ff--;
        if(b.ff)v[a].push({b.ff,b.ss});
        if(v[a].empty())tree.update(a,M);
        return b.ss;
    }

}q;

int main()
{
    scanf("%d",&n);
    for(int i=0;i<n;i++){
        scanf("%d%d",&part[i].ff.ff,&part[i].ff.ss);
        part[i].ss=i;
        mp[part[i].ff.ss];
    }
    sort(part,part+n);

    scanf("%d",&m);
    for(int i=0;i<m;i++){
        scanf("%d%d%d",&cast[i].ff.ff,&cast[i].ff.ss,&cast[i].ss.ff);
        cast[i].ss.ss=i+1;
        mp[cast[i].ff.ss];
    }
    sort(cast,cast+m);

    for(auto &i:mp)
        i.ss=++sz;

    q.init();

    for(int i=0;i<n;i++){
        while(l<m&&cast[l].ff.ff<=part[i].ff.ff)
            q.push(cast[l].ff.ss,cast[l].ss.ff,cast[l].ss.ss),l++;

        int t=q.pop(part[i].ff.ss);
        if(t==-1)
            return puts("NO");
        ans[part[i].ss]=t;
    }
    puts("YES");
    for(int i=0;i<n;i++)
        printf("%d ",ans[i]);
    return 0;
}
