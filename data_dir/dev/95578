#include <bits/stdc++.h>
using namespace std;
 
#define pb push_back
#define ff first
#define ss second
 
typedef long long ll;
const int MAXN = 2e5 + 17;
int n, a[MAXN], spf[MAXN];
vector<int> adj[MAXN];
set<int> taj[MAXN];
map<int, int> dp[MAXN][2];
bool mark[MAXN];
 
void dfs_dp(int v = 1) {
	//cerr << v << endl;
	if (mark[v])	return;
	mark[v] = true;
	if (adj[v].size() == 1 and v != 1) {
		for (auto i : taj[a[v]])	dp[v][0][i] = 1;
		return;
	}
	for (auto i : adj[v])	dfs_dp(i);
	for (auto i : taj[a[v]]) {
		int mx1 = -1, mx2 = -1;
		dp[v][0][i] = 1;
		for (auto u : adj[v])
			if (dp[u][0].count(i) > 0) {
				if (dp[u][0][i] >= mx1)	mx2 = mx1, mx1 = dp[u][0][i];
				else	mx2 = max(mx2, dp[u][0][i]);
			}
		if (mx1 != -1)	dp[v][0][i] = mx1 + 1;
		if (mx2 != -1)	dp[v][1][i] = mx1 + mx2 + 1;
 
	}
}
 
int main() {
	ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1; i <= n; i++)	cin >> a[i];
	if (n == 1) {
		if (a[1] != 1)	cout << 1 << endl;
		else	cout << 0 << endl;
		return 0;
	}
	for (int i = 1; i < n; i++) {
		int v, u;
		cin >> v >> u;
		adj[v].pb(u), adj[u].pb(v);
	}
	for (int i = 2; i < MAXN; i++)
		if (spf[i] == 0) {
			spf[i] = i;
			for (long long j = 1LL * i * i; j < MAXN; j += i)	spf[j] = i;
		}
	for (int i = 2; i < MAXN; i++) {
		int tmp = i;
		while (tmp > 1) {
			taj[i].insert(spf[tmp]);
			tmp /= spf[tmp];
		}
	}
	dfs_dp();
	int ans = 0;
	for (int i = 1; i <= n; i++) {
		for (auto j : dp[i][0])	ans = max(ans, j.ss);
		for (auto j : dp[i][1])	ans = max(ans, j.ss);
	}
	cout << ans << endl;
	return 0;
}