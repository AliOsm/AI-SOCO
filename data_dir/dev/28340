#include <bits/stdc++.h>
#define ff first
#define ss second
using namespace std;
#define MP make_pair
#define PB push_back
#define ll long long
#define int long long
#define f(i,x,n) for(int i=x;i<n;i++)
#define ld long double
#define mod 1000000007
int n,di1=1,di2=1;
pair <int,int> lr[10];
long double val[10];
int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin>>n;
	f(i,0,n)
		cin>>lr[i].ff>>lr[i].ss;
	f(i,0,2)
		di1*=(lr[i].ss-lr[i].ff+1);
	f(i,2,n)
		di2*=(lr[i].ss-lr[i].ff+1);
	// cout<<di1<<" "<<di2<<endl;
	long double ans=0;
	f(i,0,n)
	{
		f(rng,lr[i].ff,lr[i].ss+1)
		{
			f(j,0,n)
			{
				if(i!=j)
				{
					long double temp=1/(ld)(lr[i].ss-lr[i].ff+1.0);
					long double va=0,kit=2;
					// vector <long double> kitna;
					// if(j>i)
					// {
						// va=lr[j].ss-max(lr[j].ff,rng)+1;
					// }
					// else
					// {
						va=(lr[j].ss+1-max(lr[j].ff,rng+(j>i)))/(ld)(lr[j].ss-lr[j].ff+1);
					// }
					// if(max(lr[j].ff,rng)==rng&&rng<=lr[j].ss)
					// {
					// 	kitna.push_back(j);
					// 	// va+=1/(kit++);
					// }
					if(va>0)
					{
						temp*=va;
					}
					else
					{
						continue;
					}
					int flag=0;
					f(k,0,n)
					{
						if(k!=i&&k!=j)
						{
							va=(min(lr[k].ss,rng-(k<i))-lr[k].ff+1)/(ld)(lr[k].ss-lr[k].ff+1);
							// if(min(lr[k].ss,rng)==rng&&rng>=lr[k].ff)
							// {
							// 	kitna.push_back(va);
							// 	// va+=1/(kit++);
							// 	// kit++;
							// }
							if(va>0)
							{
								temp*=va;
							}
							else
							{
								flag=1;
							}
						}
					}
					if(flag==0)
					{
						// temp/=(ld)(di2);
						// val[rng]+=temp;
						ans+=temp*rng;
					}
				}
			}
		}
	}
	// f(i,1,7)
	// {
	// 	cout<<val[i]*di1*di2<<" ";
	// }
	cout<<setprecision(12)<<fixed<<ans<<endl;
	return 0;
}