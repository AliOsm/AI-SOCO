#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 1e5 + 1;
int n;

double p[N];
double ans;

struct Data {
    int len = 0;
    double sum = 0;
    double pro = 1;
    double ans = 0;
};

struct Node {
    int l, r;
    Data data;
} node[N << 2];

Data operator + (const Data &data1, const Data &data2) {
    Data res;
    res.len = data1.len + data2.len;
    res.sum = data1.sum * data2.pro + data2.sum;
    res.pro = data1.pro * data2.pro;
    res.ans = data1.ans * data2.pro + 2 * data2.len * data1.sum * data2.pro + data2.ans;
    return res;
}

void build(int id, int l, int r) {
    node[id].l = l;
    node[id].r = r;
    if(l == r) {
        node[id].data.len = r - l + 1;
        node[id].data.sum = p[l] * (1 - p[l - 1]);
        node[id].data.pro = p[l];
        node[id].data.ans = p[l] * (1 - p[l - 1]);
        return;
    }
    int q = l + r >> 1;
    build(l(id), l, q);
    build(r(id), q + 1, r);
    node[id].data = node[l(id)].data + node[r(id)].data;
}

Data query(int id, int l, int r) {
    if(node[id].l == l && node[id].r == r) {
        return node[id].data;
    }
    Data res;
    int q = node[id].l + node[id].r >> 1;
    if(l <= q) {
        res = res + query(l(id), l, min(q, r));
    }
    if(r > q) {
        res = res + query(r(id), max(q + 1, l), r);
    }
    return res;
}

void input() {
    cin >> n;
    for(int i = 1; i <= n; ++i) {
        cin >> p[i];
    }
}

void solve() {
    build(0, 1, n);
    for(int i = 1; i <= n; ++i) {
        ans += query(0, 1, i).ans;
        Data res = query(0, 1, i);
    }
    cout << fixed << setprecision(9) << ans << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
