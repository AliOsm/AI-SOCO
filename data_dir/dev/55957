#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
#define ordered_set                                                            \
  tree<int, null_type, less<int>, rb_tree_tag,                                 \
       tree_order_statistics_node_update>
#define ll int
#define ld long double
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define pdd pair<ld, ld>
const ll M = 3e5 + 5;
ordered_set seg[4 * M];
ll posa[M], n, a[M], b[M], posb[M];
void ins(ll x,ll y)
{
    for(;x<=n;x+=x&(-x))
        seg[x].insert(y);
}
void del(ll x,ll y)
{
    for(;x<=n;x+=(x&(-x)))
        seg[x].erase(y);
}
ll query(ll x,ll L,ll R)
{
    ll s=0;
    while(x)
    {
        s=s+seg[x].order_of_key(R+1)-seg[x].order_of_key(L);
        x-=(x&(-x));
    }
    return s;
}
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  ll  m, i;
  cin >> n >> m;
  for (i = 1; i <= n; i++) {
    cin >> a[i];
    posa[a[i]] = i;
  }
  for (i = 1; i <= n; i++) {
    cin >> b[i];
    posb[b[i]] = i;
  }
  for(i=1;i<=n;i++)
  {
      ins(posa[i],posb[i]);
  }
  ll type, la, lb, ra, rb, x, y;
  for (i = 1; i <= m; i++) {
    cin >> type;
    if (type == 1) {
      cin >> la >> ra >> lb >> rb;
      cout<<query(ra,lb,rb)-query(la-1,lb,rb)<<"\n";
    } else {
      cin >> x >> y;
      swap(b[x], b[y]);
      x = b[x];
      y = b[y];
      del(posa[x], posb[x]);
      del(posa[y], posb[y]);
      ins(posa[x], posb[y]);
      ins(posa[y], posb[x]);
      swap(posb[x], posb[y]);
    }
  }
}