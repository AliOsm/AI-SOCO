#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
#define ll long long int
#define ld long double
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
const int M=1e6+6;
int k;
std::vector<int> vtr[M];
std::vector<int> leaf[M];
int ans=0;
int solve(int x,int p=0,int l=0)
{
	int i;
	if(vtr[x].size()==1)
	{
		return l;
	}
	for(i=0;i<vtr[x].size();i++)
	{
		int u=vtr[x][i];
		if(u!=p)
		{
			leaf[x].pb(solve(u,x,l+1));	
		}
	}
	sort(leaf[x].begin(),leaf[x].end());
	for(i=1;i<leaf[x].size();i++)
	{
		if(leaf[x][i]+leaf[x][i-1]>k+2*l)
		{
			ans=ans+(int)leaf[x].size()-i;
			return leaf[x][i-1];
		}
	}
	return leaf[x][i-1];
}
int main()
{
	ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
	int n,i,u,v;
	cin>>n>>k;
	for(i=1;i<n;i++)
	{
		cin>>u>>v;
		vtr[u].pb(v);
		vtr[v].pb(u);
	}
	int root=-1;
	for(i=1;i<=n;i++)
	{
		if(vtr[i].size()>1)
		{
			root=i;
			break;
		}
	}
	solve(root);
	cout<<1+ans<<"\n";
	return 0;
}