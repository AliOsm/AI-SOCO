#include <iostream>
#include<memory.h>
#include <map>
#include <string>
#include <iomanip>
#include <fstream>
#include <vector>
#include <algorithm>
#include <stack>
#include <queue>
#include <cmath>
#include <set>
using namespace std;

/*
*/

vector<int> computeLPS(string &K)
{
	vector<int> T(K.size(), -1);
	for (int i = 1; i < K.size(); i++) {
		int t = T[i - 1];
		while (t != -1 && K[t + 1] != K[i]) t = T[t];
		if (K[t + 1] == K[i]) t++;
		T[i] = t;
	}
	return T;
}

string merge(string &a, string &b)
{
	string c = b+"@"+a;
	vector<int> lps = computeLPS(c);
	for (int i = b.size()+1; i < lps.size(); i++)
	{
		if (lps[i]+1 == b.size()) return a;
	}
	return a+b.substr(lps[lps.size()-1]+1, (int)b.size()-(lps[lps.size()-1]+1));
}

int main()
{
	string s[3];
	cin>>s[0]>>s[1]>>s[2];
	int p[3] = {0,1,2};
	int mn = 10000000;
	do{
		string a = merge(s[p[0]], s[p[1]]);
		mn = min(mn, (int)merge(a, s[p[2]]).size());
	} while (next_permutation(p, p+3));
	cout<<mn<<endl;
}