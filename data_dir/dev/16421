#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 2e5 + 10;

#define mid ((l + r) >> 1)
#define ls (rt << 1)
#define rs (rt << 1 | 1)
int cnt[N << 2], lazy[N << 2];
void build(int rt, int l, int r) {
	cnt[rt] = lazy[rt] = 0;
	if(l == r) return;
	build(ls, l, mid);
	build(rs, mid + 1, r);
}
void push_up(int rt) {
	cnt[rt] = cnt[ls] + cnt[rs];
}
void push_down(int rt, int len) {
	if(!lazy[rt]) return;
	lazy[ls] += lazy[rt], lazy[rs] += lazy[rt];
	cnt[ls] += lazy[rt] * (len - (len >> 1));
	cnt[rs] += lazy[rt] * (len >> 1);
	lazy[rt] = 0;
}
void update(int L, int R, int rt, int l, int r) {
	if(L > r || R < l) return;
	if(L <= l && r <= R) {
		lazy[rt]++, cnt[rt] += (r - l + 1);
		return;
	}
	push_down(rt, r - l + 1);
	update(L, R, ls, l, mid);
	update(L, R, rs, mid + 1, r);
	push_up(rt);
}
int query(int p, int rt, int l, int r) {
	if(l == r) return cnt[rt];
	push_down(rt, r - l + 1);
	if(p <= mid) query(p, ls, l, mid);
	else query(p, rs, mid + 1, r);
}

int a[N];
int main() {
	int n, q;
	scanf("%d %d", &n, &q);
	for(int i = 1; i <= n; i++)
		scanf("%d", a + i);
	build(1, 1, n);
	while(q--) {
		int l, r;
		scanf("%d %d", &l, &r);
		update(l, r, 1, 1, n);
	}
	vector<int> ve;
	for(int i = 1; i <= n; i++)
		ve.push_back(query(i, 1, 1, n));
	sort(ve.begin(), ve.end());
	sort(a + 1, a + n + 1);
	ll ans = 0;
	for(int i = 1; i <= n; i++)
		ans += 1LL * a[i] * ve[i - 1];
	printf("%I64d\n", ans);
	return 0;
}