/*
  Compete against Yourself.
  Author - Aryan Choudhary (@aryanc403)
*/

#pragma GCC optimize ("Ofast")
#pragma GCC target ("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize ("-ffloat-store")

#include<iostream>
#include<bits/stdc++.h>
using namespace std;
#define fo(i,n)   for(i=0;i<(n);++i)
#define repA(i,j,n)   for(i=(j);i<=(n);++i)
#define repD(i,j,n)   for(i=(j);i>=(n);--i)
#define all(x) begin(x), end(x)
#define sz(x) (int)(x).size()
#define pb push_back
#define mp make_pair
#define X first
#define Y second
#define endl "\n"

typedef long long int lli;
typedef long double mytype;
typedef pair<lli,lli> ii;
typedef vector<ii> vii;
typedef vector<lli> vi;

clock_t time_p=clock();
void aryanc403()
{
#ifdef ARYANC403
    time_p=clock()-time_p;
    cerr<<"Time Taken : "<<(float)(time_p)/CLOCKS_PER_SEC<<"\n";
#endif
}

#ifdef ARYANC403
#include "/home/aryan/codes/PastCodes/header.h"
#else
    #define dbg(args...)
#endif

const lli INF = 0xFFFFFFFFFFFFFFFL;

lli seed;
mt19937 rng(seed=chrono::steady_clock::now().time_since_epoch().count());
inline lli rnd(lli l=0,lli r=INF)
{return uniform_int_distribution<lli>(l,r)(rng);}

class CMP
{public:
bool operator()(ii a , ii b) //For min priority_queue .
{    return ! ( a.X < b.X || ( a.X==b.X && a.Y <= b.Y ));   }};

void add( map<lli,lli> &m, lli x,lli cnt=1)
{
    auto jt=m.find(x);
    if(jt==m.end())         m.insert({x,cnt});
    else                    jt->Y+=cnt;
}

void del( map<lli,lli> &m, lli x,lli cnt=1)
{
    auto jt=m.find(x);
    if(jt->Y<=cnt)            m.erase(jt);
    else                      jt->Y-=cnt;
}

bool cmp(const ii &a,const ii &b)
{
    return a.X<b.X||(a.X==b.X&&a.Y<b.Y);
}

const lli mod = 1000000007L;
// const lli maxN = 1000000007L;

    lli T,n,i,j,k,in,cnt,l,r,u,v,x,y;
    lli m;
    string s;
    vi a,b;
    //priority_queue < ii , vector < ii > , CMP > pq;// min priority_queue .

// ix*y
lli tc2(lli x,lli y,lli k)
{
    k-=y;
    y=(k+x-1)/x;
    return y;
}

lli f(lli x)
{
    if((x+1)/2>=k/x)
        return k+10;
    if((x+1)/2>=k/x/a[0])
        return k+10;
    if(a[1]>=k/x)
        return k+10;
    lli y=x*(x+1)/2*a[0]+x*a[1]+a[2];
    return y;
}

lli tc3()
{
    lli l=0,r=tc2(a[0],a[1],k)+10;
    while(r-l>1)
    {
        lli m=(l+r)/2;
        if(f(m)<k)
            l=m;
        else
        r=m;
    }
    return r;
}



int main(void) {
    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
    // freopen("txt.in", "r", stdin);
    // freopen("txt.out", "w", stdout);
// cout<<std::fixed<<std::setprecision(35);
// cin>>T;while(T--)
{

    cin>>n>>k;
    a.clear();a.reserve(n);

    fo(i,n)
    {
        cin>>in;

        if(a.empty()&&in==0)
            continue;
        a.pb(in);
        if(in>=k)
        {
            cout<<0<<endl;
            return 0;
        }
    }

    n=sz(a);
    lli cur=0,cnt=0;

    if(n==2)
    {
        cout<<tc2(a[0],a[1],k)<<endl;
        return 0;
    }
    else if(n==3)
    {
        cur++;
        cnt=0;
        for(auto &x:a)
        {
            cnt+=x;
            x=cnt;
            if(x>=k)
            {
                cout<<cur<<endl;
                return 0;
            }
        }

        lli ans=k+100;
        ans=min(ans,tc2(a[0],a[1],k));
        ans=min(ans,tc3());
        ans++;
        cout<<ans<<endl;
        return 0;
    }

    while(true)
    {
        cur++;
        cnt=0;
        for(auto &x:a)
        {
            cnt+=x;
            x=cnt;
            if(x>=k)
            {
                cout<<cur<<endl;
                return 0;
            }
        }
        dbg(cur,a);
    }

}   aryanc403();
    return 0;
}