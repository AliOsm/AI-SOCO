#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

#define PB push_back
#define MP make_pair

#define rep(i,n) for(int i=0;i<(n);++i)
#define REP(i,n) for(int i=1;i<=(n);++i)
#define FOR(i,l,h) for(int i=(l);i<=(h);++i)
#define FORD(i,h,l) for(int i=(h);i>=(l);--i)
#define print(expr) cout<<(#expr)<<" : "<<(expr)<<endl
#define tr(it,c) for(auto it=(c).begin(); it!=(c).end(); ++it)
#define all(c) (c).begin(), (c).end()

typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long int64;
typedef pair<int,int> pii;

int dis[10][10]={};
int n,k,t;

int main(void)
{
	memset(dis,-1,sizeof dis);
	ios::sync_with_stdio(false);
	cin>>n>>k>>t;
	rep(i,k)
	{
		int a,b,c; cin>>a>>b>>c; --a;--b;
		dis[a][b]=c;
	}
	VI ans;
	rep(mask1,1<<n) rep(mask2,1<<n)
	{
		bitset<5> b1(mask1), b2(mask2);
		if(b1.count()!=b2.count()) continue;
		int l=b1.count();
		VI a1,a2;
		rep(i,n) if(b1[i]) a1.PB(i);
		rep(i,n) if(b2[i]) a2.PB(i);
		VI p(l);
		rep(i,l) p[i]=i;
		do{
			int res=0;
			bool tag=false;
			rep(i,l)
			{
				if(dis[a1[i]][a2[p[i]]]==-1) { tag=true; break;}
				res+=dis[a1[i]][a2[p[i]]];
			}
			if(!tag) ans.PB(res);
		}while(next_permutation(all(p)));
	}
	sort(all(ans));
	cout<<ans[t-1]<<endl;
	return 0;
}
