 //g++ -std=c++14 -O2 -Wall -Wextra a.cpp
//In The Name Of God :
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
#include <bits/stdc++.h>
using namespace std ;
//using namespace __gnu_pbds;
#define X first
#define Y second
#define int long long
typedef long long ll ;
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define ALL(x) (x).begin(),(x).end()
#define size(x) ((int)((x).size()))
typedef pair < int , int > pii ;
typedef pair < pii , int > pii_i ;
typedef pair < int , pii > pi_ii ;
typedef pair < pii , pii > pii_ii ;
//#define ordered_set(TYPE) tree<TYPE, null_type, less<TYPE>, rb_tree_tag, tree_order_statistics_node_update>
//#define "%I64d" "%
//const int inf = 1e9+100 ;
typedef long long ll ;
int mod = 1e9+ 7 ;
ll mod1 = 1e9+7 ;
const int inf = 1.2e18 ;
typedef long double ld ;
const int maxL = 20 ;
const int maxn = 1e6+100 ;
const int baze = 330 ;
const int base = 3 ;
int data [ 4 * maxn ];
int n , k ;
int ar [ maxn ] ;
int dp [ maxn ] ;

int get ( int l , int r , int st = 0 , int en = n , int id = 1 )
{
  if ( l <= st && en <= r )
    return data [ id ] ;
  if ( r <= st || en <= l )
    return 1e9+19 ;
  int mid = (st+en)>>1 ;
  return min ( get ( l , r , st , mid , id<<1 ) ,
	       get ( l , r , mid , en , id<<1^1 ) ) ;
} 

void build ( int st = 0 , int en = n , int id = 1 )
{
  data [ id ] = ar [ st ] ;
  if ( en - st < 2 )
    return ;
  int mid = (st+en)>>1;
  build ( st , mid , id<<1 ) ;
  build ( mid , en , id<<1^1 );
  data [ id ] = min ( data [ id<<1 ] , data [ id<<1^1 ] ) ;
} 

int32_t main ( )
{
  fast ;
  cin >> n >> k ;
  if ( k==1 )
    return cout << 0 , 0 ; 
  int sum = 0 ;
  for ( int i = 0 ; i < n ; i ++)
    cin >> ar [ i ] , sum += ar [ i ] ;
  build ( ) ;
  for ( int i = 0 ; i < n ; i ++ )
    {
      if ( i+1 < k )
	dp [ i ] = 0 ;
      else if ( i == k-1 )
	dp [ i ] = get ( 0 , k ) ;
      else 
	dp [ i ] = max ( dp [ i-1 ] , dp [ i - k ] + get ( i-k+1 , i+1 ) ) ;
    }
  cout << sum - dp [ n-1 ] << endl ;
}
