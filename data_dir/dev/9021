#include <algorithm>
#include <iostream>
#include <cstring>
#include <limits>
#include <complex>
#include <cassert>
#include <iomanip>
#include <cstdio>
#include <vector>
#include <string>
#include <stack>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

const int inf = 1e9 + 143;
const long long longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 1 << 20;

int a[N];
long long ll[N], rr[N];

int main(){

#ifdef KAZAR
	freopen("f.input","r",stdin);
	freopen("f.output","w",stdout);
	freopen("error","w",stderr);
#else
#endif

    int n = read();
    long long all = 0ll;
    for(int i = 1; i <= n; i++){
        a[i] = read();
        ll[i] = ll[i - 1] + a[i];
        all += a[i];
    }

    if(all % 3 != 0){
        puts("0");
        return 0;
    }

    for(int i = n; i > 0; i--){
        rr[i] = rr[i + 1] + a[i];
    }

    int cnt = 0;
    long long res = 0ll;
    for(int i = 1; i < n; i++){
        eprintf("i : %d, cnt : %d, rr : %d\n",i,cnt,rr[i + 1]);
        if(rr[i + 1] == all / 3ll){
            res += cnt;
        }
        if(ll[i] == all / 3ll)
            cnt++;
    }
    cout << res << endl;

    return 0;
}
