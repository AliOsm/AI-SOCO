//#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,abm,mmx,popcnt,avx,avx2,tune=native")
           
#include <bits/stdc++.h>

using namespace std;
           
//#define int long long
  
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;

#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
  
void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifndef _offline
    //freopen("mincost.in", "r", stdin);
    //freopen("mincost.out", "w", stdout);
    #endif
}

const int MAXN = 1e5 + 100;
vector<int> g[MAXN];
bool used[MAXN];

signed main() {
    FAST_IO();
    int n, m;
    cin >> n >> m;
    int need = 1;
    while (need * need < n) {
        need++;
    }
    for (int i = 0; i < m; ++i) {
        int u, v;
        cin >> u >> v;
        u--;
        v--;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    vector<int> ans;
    while ((int)ans.size() < need) {
        int res = 1e9 + 7, pos = -1;
        for (int i = 0; i < n; ++i) {
            if (used[i]) {
                continue;
            }
            int pw = 0;
            for (int to : g[i]) {
                if (!used[to]) {
                    pw++;
                }
            }
            if (pw < res) {
                res = pw;
                pos = i;
            }
        }
        if (res < need - 1) {
            ans.push_back(pos);
            used[pos] = true;
            for (int to : g[pos]) {
                used[to] = true;
            }
        }
        else {
            deque<int> good;
            good.push_back(pos);
            used[pos] = true;
            while ((int)good.size() < need) {
                for (int to : g[good.back()]) {
                    if (!used[to]) {
                        good.push_back(to);
                        used[to] = true;
                        break;
                    }
                }
            }
            set<int> setik;
            setik.insert(good.back());
            int ptr = 2;
            while (true) {
                for (int to : g[good.front()]) {
                    if (setik.count(to)) {
                        ans.clear();
                        for (int u : good) {
                            ans.push_back(u);
                            if (u == to) {
                                break;
                            }
                        }
                        cout << 2 << '\n';
                        cout << ans.size() << '\n';
                        for (int u : ans) {
                            cout << u + 1 << ' ';
                        }
                        return 0;
                    }
                }
                for (int to : g[good.front()]) {
                    if (!used[to]) {
                        good.push_front(to);
                        used[to] = true;
                        break;
                    }
                }
                setik.insert(good[(int)good.size() - ptr]);
                ptr++;
            }
        }
    }
    cout << 1 << '\n';
    for (int u : ans) {
        cout << u + 1 << ' ';
    }
}  