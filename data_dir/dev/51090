#include<bits/stdc++.h>
using namespace std;
#define ll                  long long
#define ld                  long double
#define rep(i,n)            for(ll i=0;i<n;i++)
#define hell                1000000007LL
#define vi                  vector<ll>
#define vii                 vector< vi >
#define pb                  push_back
#define mp                  make_pair
#define fi                  first
#define se                  second
#define pii                 pair<ll,ll>
#define all(c)              c.begin(),c.end()
#define sz(c)               c.size()
ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
ll power(ll x, ll y,ll p)
{
    ll res=1;
    x=x%p;
    while(y>0)
    {
        if(y&1)
            res=((res%p)*(x%p))%p;
        y=y>>1;
        x=((x%p)*(x%p))%p;
    }
    return res;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    ll n,m;
    cin>>n>>m;
    set<ll> pos;
    map<ll,ll> carpos;
    set<pair<ll,pii > > intervals;
    pos.insert(0);
    pos.insert(n+1);
    intervals.insert(mp(-n,mp(0,n+1)));
    rep(i,m)
    {
        ll t,id;
        cin>>t>>id;
        if(t==1)
        {
            pair<ll,pii > largest=*intervals.begin();
            ll st=largest.se.fi,en=largest.se.se;
            ll p;
            if(st==0 && en==n+1)
            {
                p=1;
                carpos[id]=p;
                pos.insert(p);
                intervals.erase(largest);
                intervals.insert(mp(-n,mp(p,en)));
                intervals.insert(mp(0,mp(st,p)));
            }
            else
            {
                if(st==0) p=1;
                else if(en==n+1) p=n;
                else p=st-largest.fi;
                carpos[id]=p;
                pos.insert(p);
                intervals.erase(largest);
                intervals.insert(mp(-(p-st)/2,mp(st,p)));
                intervals.insert(mp(-(en-p)/2,mp(p,en)));
            }
            cout<<p<<endl;
        }
        else
        {
            ll p=carpos[id];
            auto it=pos.find(p);
            ll st=*(--it);
            ++it;
            ll en=*(++it);
            if(st==0 && en==n+1)
            {
                intervals.erase(mp(-(p-st-1),mp(st,p)));
                intervals.erase(mp(-(en-p-1),mp(p,en)));
                intervals.insert(mp(-(en-st-1),mp(st,en)));
            }
            else if(st==0)
            {
                intervals.erase(mp(-(p-st-1),mp(st,p)));
                intervals.erase(mp(-(en-p)/2,mp(p,en)));
                intervals.insert(mp(-(en-st-1),mp(st,en)));
            }
            else if(en==n+1)
            {
                intervals.erase(mp(-(p-st)/2,mp(st,p)));
                intervals.erase(mp(-(en-p-1),mp(p,en)));
                intervals.insert(mp(-(en-st-1),mp(st,en)));
            }
            else
            {
                intervals.erase(mp(-(p-st)/2,mp(st,p)));
                intervals.erase(mp(-(en-p)/2,mp(p,en)));
                intervals.insert(mp(-(en-st)/2,mp(st,en)));
            }
            carpos.erase(id);
            pos.erase(p);
        }
    }
    return 0;
}
