#include <bits/stdc++.h>
using namespace std;
typedef pair<int,int> ii;

vector<ii> pos, neg;
int dp[105][60005];

bool func(ii a, ii b){
    if(a.first == b.first) return a.second > b.second;
    else return a.first < b.first;
}
bool gamb(ii a, ii b){
    return a.first+a.second > b.first+b.second;
}

int solve(int pos, int k){
    if(k < 0) return -1e9;
    if(pos == neg.size()) return 0;
    if(dp[pos][k] != -1) return dp[pos][k];

    int r1 = solve(pos+1, k);
    int r2 = -1e9;
    if(k >= neg[pos].first)
        r2 = solve(pos+1, k + neg[pos].second) + 1;
    return dp[pos][k] = max(r1,r2);
}



int main(){
    memset(dp, -1, sizeof dp);
    int n, k; cin >> n >> k;
    for(int i = 0; i < n; i++){
        int a, b; cin >> a >> b;
        if(b < 0) neg.push_back({a,b});
        else pos.push_back({a,b});
    }

    sort(pos.begin(), pos.end(), func);
    sort(neg.begin(), neg.end(), gamb);

    int res = 0;
    for(int i = 0; i < pos.size(); i++)
        if(k >= pos[i].first)
            k += pos[i].second, res++;

    for(int i = 0; i < neg.size(); i++)
        neg[i].first = max(neg[i].first, -neg[i].second);

    res += solve(0, k);

    cout << res << endl;

	return 0;
}