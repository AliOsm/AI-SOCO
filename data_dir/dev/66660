#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;

const int MAX_N = 200005;
const ll RANDOM = ll(mt19937_64(chrono::high_resolution_clock::now().time_since_epoch().count())());

struct chash
{
    ll operator() (ll x) const
    {
    	return hash<ll>{}(x ^ RANDOM);
    }
};

int n;
ll k;
int aLen[MAX_N];
ll a[MAX_N];
ll aMultTenPow[MAX_N][11];
gp_hash_table<ll, int, chash> cntByMod[11];

int main()
{
	ios::sync_with_stdio(false);
	cin >> n >> k;
	for (int i = 0; i < n; i++)
	{
		string aStr; cin >> aStr;
		aLen[i] = (int)aStr.length();
		a[i] = stoll(aStr);
		aMultTenPow[i][0] = a[i] % k;
		for (int j = 1; j <= 10; j++)
		{
			aMultTenPow[i][j] = (aMultTenPow[i][j - 1] * 10LL) % k;
			cntByMod[j][aMultTenPow[i][j]]++;
		}
	}

	ll result = 0;
	for (int i = 0; i < n; i++)
	{
		ll minusMod = -(a[i] % k);
		while (minusMod < 0)
			minusMod += k;
		auto it = cntByMod[aLen[i]].find(minusMod);
		if (it != cntByMod[aLen[i]].end())
			result += cntByMod[aLen[i]][minusMod];
		if (aMultTenPow[i][aLen[i]] == minusMod)
			result--;
	}
	cout << result << endl;
}
