#include <stdio.h>
#include <vector>
#include <algorithm>
#define pb push_back
using namespace std;

const int MAXN = (int)3e5 + 5;
const int INF = (int)1e9;

vector<int> g[MAXN];

int s[MAXN];
int rnk[MAXN];
int size[MAXN];

int d[MAXN];
int d2[MAXN];
int maxi;
int farther;

int find(int i) {
    if (s[i] == i) {
        return i;
    }
    return s[i] = find(s[i]);
}

void unite(int a, int b) {
    int x = find(a);
    int y = find(b);

    if (x == y) {
        return;
    }

    if (rnk[x] < rnk[y]) {
        s[x] = y;
        size[y] = max(size[y], max(size[x], 1 + (size[y] + 1) / 2 + (size[x] + 1) / 2));
    } else {
        s[y] = x;
        size[x] = max(size[y], max(size[x], 1 + (size[y] + 1) / 2 + (size[x] + 1) / 2));
        if (rnk[x] == rnk[y]) {
            rnk[x]++;
        }
    }
    return;
}

void DFS(int node, int d[], int dist = 0) {
    d[node] = dist;
    if (dist > maxi) {
        maxi = dist;
        farther = node;
    }

    for (int i = 0; i < (int)g[node].size(); i++) {
        int viz = g[node][i];
        if (d[viz] > 1 + dist) {
            DFS(viz, d, 1 + dist);
        }
    }
    return;
}

int get_diameter(int node) {
    maxi = -1;
    farther = -1;
    DFS(node, d);

    maxi = -1;
    DFS(farther, d2);
    return maxi;
}

int main(void) {
    int n, m, q;
    int a, b;
    int x, y;
    int op;

    scanf(" %d %d %d", &n, &m, &q);
    for (int i = 1; i <= n; i++) {
        s[i] = i;
        d[i] = INF;
        d2[i] = INF;
    }
    for (int i = 0; i < m; i++) {
        scanf(" %d %d", &a, &b);
        g[a].pb(b);
        g[b].pb(a);
        unite(a, b);
        size[a] = size[b] = 0;
    }

    for (int i = 1; i <= n; i++) {
        if (d[find(i)] == INF) {
            size[find(i)] = get_diameter(find(i));
        }
    }

    while(q--) {
        scanf(" %d %d", &op, &x);
        if (op == 1) {
            printf("%d\n", size[find(x)]);
        } else {
            scanf(" %d", &y);
            unite(x, y);
        }
    }
    return 0;
}
