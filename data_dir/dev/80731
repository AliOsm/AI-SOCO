#include <bits/stdc++.h>

using namespace std;

#define mem(a,b) memset(a,b,sizeof(a))
#define FOR(i,j,k) for(int i=j;i<=k;i++)
#define read        freopen("in.txt", "r", stdin)
#define write       freopen("out.txt", "w", stdout)

const int MAX = (2e5) + 5;

int cen, sub[MAX], dis[MAX], blocked[MAX], tr_sz, pa[MAX];
vector<int> mat[MAX];

int col_info(int p,int baap)
{
    if(p == baap) dis[p] = 0, tr_sz = 0;

    sub[p] = 1; tr_sz++;
    if(p == baap) pa[p] = -1;
    else pa[p] = baap;

    int chi = 0, go = 0;
    for(int x : mat[p])
    {
        if(x == baap || blocked[x]) continue;

        dis[x] = dis[p] + 1;
        col_info(x, p);
        sub[p] += sub[x];

        chi++;
        go = x;

    }

    if(chi == 1) return go;
    else return -1;
}

int centroid(int p,int baap)
{
    if((sub[p]<<1) <= tr_sz) return baap;

    for(auto x : mat[p])
        if((sub[x]<<1) > tr_sz && x != baap && !blocked[x])
            return centroid(x, p);

    return p;
}

void eraseNode(int p,int vv)
{
    if(vv == p) return;

    blocked[p] = 1;
    for(int x : mat[p])
    {
        if(blocked[x]) continue;
        eraseNode(x, vv);
    }
}

map<int,int> mopa;
int queryD(int Root)
{
    int v;

    cout << 'd' << ' ' << Root << endl;
    cin >> v;

    return v;
}

string str;
int queryS(int u)
{
    int v;

    cout << 's' << ' ' << u << endl;
    cin >> v;

    return v;
}
//Wrong answer
int main()
{
    ios::sync_with_stdio(false);
    //read;
    int u, v, n;

    cin >> n;
    FOR(i,1,n-1)
    {
        cin >> u >> v;
        mat[u].push_back( v );
        mat[v].push_back( u );
    }

    int Root = 1, prin;

    v = queryD(Root);
    for(;v;)
    {
        col_info(Root, Root);
        FOR(i,1,n)
        if(dis[i] > v) blocked[i] = 1;


        int rei = col_info(Root, Root);
        int cen = centroid(Root, Root);

        int X = v;
        if(cen != Root) X = queryD(cen);

        if(!X) Root = cen, v = 0;
        else if(v != X + dis[cen]) eraseNode(cen, pa[cen]);
        else
        {
            int Y = rei;
            Y = queryS(cen);
            eraseNode(Root, Y);
            Root = Y; v = X - 1;
        }

    }

    cout << "! " << Root << endl;

    return 0;
}
