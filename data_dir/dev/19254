#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const ll N = 1e5, inf = 1e18;
vector<ll> adj[N + 10], wei[N + 10], e[N + 10];
ll n, m, d[N + 10];

ll wait(ll x, ll y) {
    ll ind = lower_bound(e[x].begin(), e[x].end(), y) - e[x].begin(), res = 0;
    if (ind < e[x].size() && e[x][ind] == y){
        ll st = ind, en = (ll)e[x].size() - 1, mid;
        res = 1;
        while(st <= en) {
            mid = (st + en) / 2;
            if(e[x][mid] == mid - ind + y) {
                res = mid - ind + 1;
                st = mid + 1;
            }
            else {
                en = mid - 1;
            }
        }
    }
    return res;
}

void dijkstra(ll root) {
    fill(d, d + n, inf);
    d[root] = 0;
    set<pair<ll, ll> > s;
    s.insert({d[root], root});
    while(s.size()) {
        pair<ll, ll> v = *s.begin();
        s.erase(*s.begin());
        ll x = v.second, y = v.first;
        for (int i = 0; i < adj[x].size(); i++) {
            if(d[adj[x][i]] > y + wei[x][i] + wait(x, y)) {
                s.erase({d[adj[x][i]], adj[x][i]});
                d[adj[x][i]] = y + wei[x][i] + wait(x, y);
                s.insert({d[adj[x][i]], adj[x][i]});
            }
        }
    }
}

void readInput() {
    cin >> n >> m;
    ll u, v, w;
    for (ll i = 0; i < m; i++) {
        cin >> u >> v >> w;
        u--;
        v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
        wei[u].push_back(w);
        wei[v].push_back(w);
    }
    ll k, x;
    for (int i = 0; i < n; i++) {
        cin >> k;
        for (int j = 0; j < k; j++) {
            cin >> x;
            e[i].push_back(x);
        }
        sort(e[i].begin(), e[i].end());
    }
}

void solve() {
    dijkstra(0LL);
}

void writeOutput() {
    cout << (d[n - 1] == inf? -1: d[n - 1]);
}

int main() {
    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
    readInput();
    solve();
    writeOutput();
    return 0;
}
