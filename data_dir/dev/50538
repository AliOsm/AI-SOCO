//      ——By DD_BOND 

#include<bits/stdc++.h>

#define fi first
#define se second
#define MP make_pair
#define pb push_back
#define INF 0x3f3f3f3f
#define pi 3.1415926535898
#define lowbit(a)  (a&(-a))
#define lson l,(l+r)/2,rt<<1
#define rson (l+r)/2+1,r,rt<<1|1
#define Min(a,b,c)  min(a,min(b,c))
#define Max(a,b,c)  max(a,max(b,c))
#define debug(x)  cerr<<#x<<"="<<x<<"\n";

//#pragma GCC optimize(3)
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

using namespace std;

typedef long long ll;
typedef pair<int,int> P;
typedef pair<ll,ll> Pll;
typedef unsigned long long ull;

const int seed=131;
const ll LLMAX=2e18;
const int MOD=1e9+7;
const double eps=1e-8;
const int MAXN=1e6+10;
const int hmod1=0x48E2DCE7;
const int hmod2=0x60000005;

inline ll sqr(ll x){ return x*x; }
inline int sqr(int x){ return x*x; }
inline double sqr(double x){ return x*x; }
ll gcd(ll a,ll b){ return b==0? a: gcd(b,a%b); }
ll exgcd(ll a,ll b,ll &x,ll &y){ ll d; (b==0? (x=1,y=0,d=a): (d=exgcd(b,a%b,y,x),y-=a/b*x)); return d; }
ll qpow(ll a,ll n){ll sum=1;while(n){if(n&1)sum=sum*a%MOD;a=a*a%MOD;n>>=1;}return sum;}
inline int dcmp(double x){  if(fabs(x)<eps) return 0;   return (x>0? 1: -1); }

char s[MAXN];

int main(void)
{
    //ios::sync_with_stdio(false);    cin.tie(0);   cout.tie(0);   
    //freopen("/Users/dd_bond/My_Mac/Resource/Project__C++/testdata.in","r",stdin);
    //freopen("/Users/dd_bond/My_Mac/Resource/Project__C++/testdata.out","w",stdout);
    int n,m;    scanf("%d%d",&n,&m);
    vector<vector<int> >ok (n+2,vector<int>(m+2));
    vector<vector<int> >sum(n+2,vector<int>(m+2));
    vector<vector<int> >tmp(n+2,vector<int>(m+2));
    for(int i=1;i<=n;i++){
        scanf("%s",s+1);
        for(int j=1;j<=m;j++)    if(s[j]=='X')   sum[i][j]=1;
    }
    for(int i=1;i<=n;i++)
        for(int j=1;j<=m;j++)
            sum[i][j]+=sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1];
    int l=0,r=(min(n,m)-1)/2,res=0;
    while(l<=r){
        int mid=(l+r)>>1;
        for(int i=1;i<=n;i++)
            for(int j=1;j<=m;j++)
                tmp[i][j]=0;
        for(int i=mid+1;i<=n-mid;i++)
            for(int j=mid+1;j<=m-mid;j++)
                if(sum[i+mid][j+mid]-sum[i-mid-1][j+mid]-sum[i+mid][j-mid-1]+sum[i-mid-1][j-mid-1]==sqr(2*mid+1)){
                    tmp[i-mid][j-mid]+=1;
                    tmp[i-mid][j+mid+1]+=-1;
                    tmp[i+mid+1][j-mid]+=-1;
                    tmp[i+mid+1][j+mid+1]+=1;
                }
        int f=0;
        for(int i=1;i<=n;i++)
            for(int j=1;j<=m;j++)
                if(tmp[i][j]+=tmp[i-1][j]+tmp[i][j-1]-tmp[i-1][j-1])
                    f++;
        if(f==sum[n][m])   l=mid+1,res=mid;
        else    r=mid-1;
    }
    printf("%d\n",res);
    for(int i=res+1;i<=n-res;i++)
        for(int j=res+1;j<=m-res;j++)
            if(sum[i+res][j+res]-sum[i-res-1][j+res]-sum[i+res][j-res-1]+sum[i-res-1][j-res-1]==sqr(2*res+1))
                ok[i][j]=1;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++)   putchar((ok[i][j]?'X':'.'));
        puts("");
    }
    return 0;
}