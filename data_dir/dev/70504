#include <bits/stdc++.h>

using namespace std;

typedef double db;
typedef long long ll;
typedef pair<db, db> pdd;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef unsigned long long ull;

#define F          first
#define S          second
#define pnl        printf("\n")
#define sz(x)      (int)x.size()
#define sf(x)      scanf("%d",&x)
#define pf(x)      printf("%d\n",x)
#define all(x)     x.begin(),x.end()
#define rall(x)    x.rbegin(),x.rend()
#define rep(i, n)  for(int i = 0; i < n; ++i)

const db eps = 1e-9;
const db pi = acos(-1);
const int INF = 0x3f3f3f3f;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;
const int mod = 1000 * 1000 * 1000 + 7;

int n, m;
char str[1505][1505];
pii vis[1505][1505];
bool hasCyc;
int dx[] = {0, 0, 1, -1};
int dy[] = {1, -1, 0, 0};
void dfs(int i, int j) {
	if (vis[(i + n * m) % n][(j + n * m) % m] != make_pair(-1, -1) || hasCyc) {
		hasCyc = true;
		return;
	}
	vis[(i + n * m) % n][(j + n * m) % m] = {i, j};
	for (int k = 0; k < 4; ++k) {
		int nwX = i + dx[k];
		int nwY = j + dy[k];
		if (vis[(nwX + n * m) % n][(nwY + n * m) % m] == make_pair(nwX, nwY)) continue;
		if (str[(nwX + n * m) % n][(nwY + n * m) % m] == '#') continue;
		dfs(nwX, nwY);
	}
}

int main() {
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; ++i)
		scanf("%s", str[i]);
	for (int i = 0; i <= n; ++i)
		for (int j = 0; j <= m; ++j)
			vis[i][j] = make_pair(-1, -1);
	for (int i = 0; i < n; ++i)
		for (int j = 0; j < m; ++j)
			if (str[i][j] == 'S') {
				dfs(i, j);
			}
	cout << (hasCyc ? "Yes\n" : "No\n");
	return 0;
}
