#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>

template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

const long long MAX = 5100000;
const long long INF = 1LL << 60;
const long long MOD = 1'000'000'007LL;
const long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;

vector<bool> isprime;
vector<ll> pri;
void eratos(ll n) {
	isprime.resize(n + 1);
	for (ll i = 0; i <= n; i++) {
		isprime[i] = true;
	}
	isprime[0] = false;
	isprime[1] = false;
	for (ll i = 2; i*i <= n; i++) {
		if (isprime[i]) {
			ll j = i + i;
			while (j <= n) {
				isprime[j] = false;
				j = j + i;
			}
		}
	}
}

int main()
{
	eratos(1000000);
	for (ll i = 2; i <= 500000; i++) {
		if (isprime[i]) pri.push_back(i);
	}
	ll n; scanf("%lld", &n);
	vector<ll> a(n);
	vector<ll> idx(n);
	vector<pair<ll, ll>> gb(n + 1);

	for (ll i = 4; i <= n; i += 2) {
		for (ll j = 0; j < pri.size(); j++) {
			if (binary_search(pri.begin(), pri.end(), i - pri[j])) {
				gb[i] = make_pair(pri[j], i - pri[j]);
				break;
			}
		}
	}
	for (ll i = 0; i < n; i++) {
		scanf("%lld", &a[i]);
		a[i]--;
		idx[a[i]] = i;
	}
	vector<pair<ll, ll>> res;
	for (ll i = 0; i < n; i++) {
		if (a[i] == i) continue;
		if (isprime[idx[i] - i + 1]) {
			ll id = idx[i];
			ll t = a[i];
			res.emplace_back(i + 1, id + 1);
			swap(idx[i], idx[t]);
			swap(a[i], a[id]);
			
		}
		else {
			ll sa = idx[i] - i + 1;
			if (sa & 1) {
				res.emplace_back(i + 1, i + gb[sa + 1].first - 1 + 1);
				res.emplace_back(i + gb[sa + 1].first, idx[i] + 1);
				res.emplace_back(i + 1, i + gb[sa + 1].first - 1 + 1);

			}
			else {
				res.emplace_back(i + 1, i + gb[sa].first - 1 + 1);
				res.emplace_back(i + gb[sa].first + 1, idx[i] + 1);
				res.emplace_back(i + gb[sa].first - 1 + 1, i + gb[sa].first + 1);
				res.emplace_back(i + 1, i + gb[sa].first - 1 + 1);
				res.emplace_back(i + gb[sa].first + 1, idx[i] + 1);

			}
			ll id = idx[i];
			ll t = a[i];
			swap(idx[i], idx[t]);
			swap(a[i], a[id]);
		}
	}

	printf("%lld\n", (ll)res.size());
	for (ll i = 0; i < res.size(); i++) {
		printf("%lld %lld\n", res[i].first, res[i].second);
	}
	return 0;
}