/*---> 13 November 2019 <--- > 16:05:17 <---*/
// #pragma GCC optimize("Ofast")
// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
// #pragma GCC optimize("unroll-loops")
// #pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("O3")
//#pragma GCC target ("sse4")
#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
using namespace std;
//template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;
#define int long long
#define F first
#define S second
#define mod 1000000007
#define inf (int)1e18+5
#define sz(x) (int)x.size()
#define PI 3.141592653589793238510
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define __ ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define vi vector<int>
#define vpii vector<pair<int,int> > 
#define vvi vector<vector<int> >
#define PRINT_TIME cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s." <<endl;
#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename   enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
  ris << "(" << d.first << ", " << d.second << ")";
}
sim dor(rge<c> d) {
  *this << "[";
  for (auto it = d.b; it != d.e; ++it)
    *this << ", " + 2 * (it == d.b) << *it;
  ris << "]";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "
typedef long double ld;
typedef pair<int,int> pii;
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
const int N=1e5+5;
void lower(string &s){
	int n=s.length();
	for(int i=0;i<n;i++){
		if(s[i]>=65 && s[i]<=90)
			s[i]+=32;
	}
}
int32_t main(){__
	int n;
	cin>>n;
	map<string,bool>mp;
	string s;
	for(int i=0;i<n;i++){
		cin>>s;
		lower(s);
		mp[s]=true;
	}
	cin>>s;
	char c,C;
	cin>>c;
	if(c>=65 && c<=90)
	{
		C=c;
		c+=32;
	}
	else{
		C=c-32;
	}
	char ch='a',CH='A';
	if(ch==c)
		ch='b';
	if(CH==C)
		CH='B';
	string ans;
	n=sz(s);
	ans.resize(n,'-');
	for(int i=0;i<n;i++){
		// debug()<< imie(mp);
		for(int j=i;j<n;j++){
			string t=s.substr(i,j-i+1);
			lower(t);
			if(mp.find(t)!=mp.end()){
				for(int k=i;k<=j;k++){
					if(s[k]>=65 && s[k]<=90){
						if(s[k]!=C)
						ans[k]=C;
						else
						ans[k]=CH;
					}
					else{
						if(s[k]!=c)
						ans[k]=c;
						else
						ans[k]=ch;

					}
				}
			}
			else{
				for(int k=i;k<=j;k++){
					if(ans[i]=='-')
						ans[i]=s[k];
				}
			}
		}
	}
	cout<<ans<<"\n";
return 0;
}