//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-9;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i, n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n, m;

char c[2005][2005];

int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};

bool was[2005][2005];

bool ucan(int x, int y) {
    int cnt = 0;
    for (int i = 0; i < 4; ++i) {
        int nx = x + dx[i];
        int ny = y + dy[i];
        if (nx >= 0 && nx < n)
            if (ny >= 0 && ny < m)
                if (c[nx][ny] == '.') {
                    ++cnt;
                }

    }
    return cnt == 1;
}

pair<int, int> found(int x, int y) {
    pair<int, int> res;
    for (int i = 0; i < 4; ++i) {
        int nx = x + dx[i];
        int ny = y + dy[i];
        if (nx >= 0 && nx < n)
            if (ny >= 0 && ny < m)
                if (c[nx][ny] == '.') {
                    res = make_pair(nx, ny);
                }

    }
    return res;
}

void rec(int x, int y) {
    if (was[x][y]) {
        return;
    }
    was[x][y] = true;
    pair<int, int> now = found(x, y);
    if (x > now.F) {
        c[x][y] = 'v';
        c[now.F][now.S] = '^';
    }
    if (x < now.F) {
        c[x][y] = '^';
        c[now.F][now.S] = 'v';
    }
    if (y < now.S) {
        c[x][y] = '<';
        c[now.F][now.S] = '>';
    }
    if (y > now.S) {
        c[x][y] = '>';
        c[now.F][now.S] = '<';
    }
    for (int i = 0; i < 4; ++i) {
        int nx = now.F + dx[i];
        int ny = now.S + dy[i];
        if (nx >= 0 && nx < n)
            if (ny >= 0 && ny < m)
                if (c[nx][ny] == '.' && ucan(nx, ny))
                    rec(nx, ny);
    }
}

int main(void) {
    #ifdef nobik
        freopen("input.txt", "rt", stdin);
        freopen("output.txt", "wt", stdout);
    #endif
    scanf("%d %d", &n, &m);
    for (int i = 0; i < n; ++i) {
        scanf(" %s", c[i]);
    }
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (c[i][j] == '.' && ucan(i, j)) {
                rec(i, j);
            }
        }
    }
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (c[i][j] == '.') {
                printf("Not unique\n");
                exit(0);
            }
        }
    }
    for (int i = 0; i < n; ++i) {
        puts(c[i]);
    }
    return 0;
}
