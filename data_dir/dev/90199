#include <bits/stdc++.h>
using namespace std;

#ifdef SG
    #include <debug.h>
#else
    #define show(...)
    #define debug(...)
    #define deepen(...)
    #define timer(...)
#endif

#define ARG4(_1,_2,_3,_4,...) _4

#define forn3(i,l,r) for (int i = int(l); i < int(r); ++i)
#define forn2(i,n) forn3 (i, 0, n)
#define forn(...) ARG4(__VA_ARGS__, forn3, forn2) (__VA_ARGS__)

#define ford3(i,l,r) for (int i = int(r) - 1; i >= int(l); --i)
#define ford2(i,n) ford3 (i, 0, n)
#define ford(...) ARG4(__VA_ARGS__, ford3, ford2) (__VA_ARGS__)

#define ve vector
#define pa pair
#define tu tuple
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) ((int)(a).size())

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef unsigned char uc;
typedef pa<int, int> pii;
typedef pa<int, ll> pil;
typedef pa<ll, int> pli;
typedef pa<ll, ll> pll;
typedef ve<int> vi;

const ld pi = 3.1415926535897932384626433832795l;

template<typename T> inline auto sqr (T x) -> decltype(x * x) {return x * x;}
template<typename T1, typename T2> inline bool umx (T1& a, T2 b) {if (a < b) {a = b; return 1;} return 0;}
template<typename T1, typename T2> inline bool umn (T1& a, T2 b) {if (b < a) {a = b; return 1;} return 0;}

const int N = 110;
const int T = 10000010;

struct Input {
    int n, t;
    int a[N];
    
    bool read () {
        if (scanf("%d%d", &n, &t) != 2)
            return 0;
        forn(i, n) {
            scanf("%d", &a[i]);
        }
        return 1;
    }

    void init (const Input &input) {
        *this = input;
    }
};

struct Data: Input {
    int ans;

    void write () {
        cout << ans << endl;
    }
    
    virtual void solve () {}
    
    virtual void clear () {
        *this = Data();
    }
};
        
struct Solution: Data {
    int col[310];
    int cnt[N];
    int d[N * N];
    int revd[N * N];
    int c[N * N];
    int b[N];

    void solve () {
        ans = 0;
        forn(i, n) {
            b[i] = a[i];
        }
        sort(b, b + n);
        int cnt1 = 0;
        for (int i = 0; i < n;) {
            int j = i;
            for(; j < n && b[i] == b[j]; ++j);
            col[b[i]] = cnt1++;
            i = j;  
        }
        forn(i, n) {
            a[i] = col[a[i]];
            cnt[a[i]]++;
        }
        forn(i, n) {
            forn(j, n) {
                c[i * n + j] = a[j];
            }
        }
        forn(i, n * n) {
            d[i] = 1;
            forn(j, i) {
                if (c[j] <= c[i]) {
                    umx(d[i], d[j] + 1);        
                }
            }
        }
        forn(i, n) {
            forn(j, n) {
                c[i * n + j] = a[n - 1 - j];
            }
        }
        forn(i, n * n) {
            revd[i] = 1;
            forn(j, i) {
                if (c[j] >= c[i]) {
                    umx(revd[i], revd[j] + 1);      
                }
            }
        }       
        ans = 0;
        forn(i, n) {
            forn(j, n) {
                if (a[i] > a[j]) {
                    continue;
                }   
                int mx = 0;
                for (int l = a[i]; l <= a[j]; ++l) {
                    umx(mx, cnt[l]);
                }
                for (int k = 1; k <= n; ++k) {
                    for (int p = 1; p + k <= min(n, t); ++p) {
                        umx(ans, d[i + (k - 1) * n] + revd[n - 1 - j + (p - 1) * n] + mx * (t - p - k));    
                    }   
                }
            }
        }
        forn(i, n) {
            int mx = 0;
            for (int l = a[i]; l < n; ++l) {
                umx(mx, cnt[l]);
            }
            for (int k = 1; k <= min(n, t); ++k) {
                umx(ans, d[i + (k - 1) * n] + mx * (t - k));        
            }
        }
        forn(i, n) {
            int mx = 0;
            for (int l = 0; l <= a[i]; ++l) {
                umx(mx, cnt[l]);
            }
            for (int k = 1; k <= min(n, t); ++k) {
                umx(ans, revd[n - 1 - i + (k - 1) * n] + mx * (t - k));     
            }
        }
        int mx = 0;
        forn(i, n) {
            umx(mx, cnt[i]);
        }
        umx(ans, mx * t);

        
    }
    
    void clear () {
        *this = Solution();
    }
};

Solution sol;

int main () {
    cout.setf(ios::showpoint | ios::fixed);
    cout.precision(20);
#ifdef SG
    freopen((problemname + ".in").c_str(), "r", stdin);
//  freopen((problemname + ".out").c_str(), "w", stdout);
    while (sol.read()) {
        sol.solve();
        sol.write();
        sol.clear();
    }
#else
    sol.read();
    sol.solve();
    sol.write();
#endif
    return 0;
}
