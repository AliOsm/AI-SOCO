#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     (_obj).begin(), (_obj).end()
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define ceilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define has(_obj, _val)               ((_obj).find(_val) != (_obj).end())
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifdef SHJ_LOCALE
    #define debug(_x)                 std::cerr << (#_x) << " = " << (_x) << '\n'; std::cerr.flush();
#else
    #define debug(_x)                 ;
#endif
#define endl                          "\n"
template<typename Tp>
inline void outarr(Tp _array, const std::size_t _N, const char* _delim = " ") {
    Tp end = std::next(_array, _N);
    for (Tp current = _array; current != end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = int64_t;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
int arr[200000];
vector<pii> h;
int height[200010];
int kount[200010];
int top = 0;

void Push(int v, int k) {
    height[top] = v;
    kount[top] = k;
    ++top;
}

bool Empty() {
    return top == 0;
}

int Pop() {
    assert(top > 0);
    return kount[--top];
}

int Top() {
    return height[top - 1];
}

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    int n;
    cin >> n;
    loop(n) {
        cin >> arr[i];
    }
    {
        int pre = arr[0];
        int cnt = 0;
        loop(n) {
            if (pre != arr[i]) {
                h.emplace_back(pre, cnt);
                cnt = 0;
                pre = arr[i];
            }
            ++cnt;
        }
        h.emplace_back(pre, cnt);
    }
    if (sz(h) == 1) {
        RET("YES");
    }
    loop(sz(h)) {
        auto [v, k] = h[i];
        int cnt = 0;
        debug(v);
        while (!Empty() && Top() < v) {
            debug(Top());
            cnt += Pop();
            debug(cnt);
            if (cnt & 1) {
                RET("NO");
            }
        }
        if (!Empty() && Top() == v) {
            cnt += Pop();
        }
        Push(v, k + cnt);
    }
    int cnt = 0;
    while (!Empty()) {
        cnt += Pop();
        if (cnt == n) {
            break;
        }
        if (cnt & 1) {
            RET("NO");
        }
    }
    cout << "YES" endl;

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}