#include <iostream>
#include <algorithm>
using namespace std;

typedef long long ll;
typedef pair<ll, ll> P;
ll cross(const P& a, const P& b) { return a.first*b.second-a.second*b.first; }
ll dot(const P& a, const P& b) { return a.first*b.first+a.first*b.first; }

int isInside(const vector<P>& p, int n, P q)
{
    int in=0;
    for(int i=0; i<n; ++i) {
        P a(p[i].first-q.first, p[i].second-q.second);
        P b(p[i+1].first-q.first, p[i+1].second-q.second);
        if (a.second>b.second) swap(a, b);
        if (a.second<=0 && 0<b.second)
            if (cross(a, b)<0) in=in^1;
    }
    return in;
}

P func(P a, P b)
{
    if (a.first==b.first)
        return make_pair(a.first, b.second+(b.second>a.second ? 1 : -1));
    return make_pair(b.first+(b.first>a.first ? 1 : -1), a.second);
}

int main()
{
    int n; cin>>n;
    vector<P> p(n+1);
    for(int i=0; i<n+1; ++i) {
        int x, y; cin>>x>>y;
        p[i]=make_pair(2*x, 2*y);
    }

    int res=0;
    for(int i=0; i<n; ++i) {
        //auto x=func(p[i], p[i+1]);
        //cout<<x.first<<", "<<x.second<<endl;
        res+=isInside(p, n, func(p[i], p[i+1]));
    }
    cout<<res<<endl;
}
