#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

//#include<bits/stdc++.h>
#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <cassert>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>

#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define all(x) x.begin(),x.end()
#define F first
#define S second
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace std;

bool isvowel (char c) {
	c = tolower(c);
    if (c == 'a' || c == 'e' || c == 'i' || c == 'y' || c == 'o' || c == 'u') return 1;
    return 0;
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 3e5 + 123;                                          
const int PRI = 555557;
const int pri = 997;
const int Magic = 2101;

//const int dx[] = {2, 2, 1, 1, -1, -1, -2, -2};
//const int dy[] = {1, -1, 2, -2, 2, -2, 1, -1};


int n, m, k;
int dp[2002];
vector < int > par[2002];
struct thing {
	int t, d, p, id;   
	void read(int _id) {
		cin >> t >> d >> p;
		id = _id;
	}
	bool operator < (const thing & b) const  {
		return d < b.d;
	}
} a[202], b[202];

inline void Solve () {
	cin >> n;

	for (int i = 1; i <= n; i ++) {
		a[i].read(i);
	}

	sort(a + 1, a + n + 1);

	for (int i = 1; i <= n; i ++) {
	//	cout << a[i].id << '\n';
		if (a[i].t >= a[i].d) continue;
		for (int j = a[i].d - 1; j >= a[i].t; j --) {
			if (dp[j - a[i].t] + a[i].p > dp[j]) {
				dp[j] = dp[j - a[i].t] + a[i].p;
				par[j] = par[j - a[i].t];
				par[j].pb(a[i].id);
			}
		}
	}

	int mx = 0;
	for (int i = 1; i <= 2000; i ++) {
		if (dp[mx] < dp[i])
			mx = i;
	}

	vector < int > ans;
	cout << dp[mx] << '\n';
	ans = par[mx];
	cout << ans.size() << '\n';
	for (auto it: ans)
		cout << it << ' ';
}

int main () {
	int tests = 1;
	SpeedForce;
//	freopen(".in", "r", stdin);
//	freopen(".out", "w", stdout);	
	//cin >> tests;
	while(tests --) {
		Solve ();
		// TooSimple ? True : False
	}
	// Accepted ? True : True
	return Accepted; 
}


// Coded by Al... Bat...