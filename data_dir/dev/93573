         /*"Success isn't permanent, failure isn't fatal,
                                      it's the courage to continue that counts"*/
#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
using namespace std;
//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
const int mod=1e9+7;         
const int N=2e5+4;

int main()
{
	int n,m;

	scn(n); scn(m);

	int a[m];

	rep(i,0,m)
	scn(a[i]);

	sort(a,a+m);

	int g,r;

	scn(g); scn(r);

	//dp[i][j] tells minimum no. of cycles of (r+g) required to reach checkpoint
	//i with current spend time of green signal being j.
	//with current spent time I mean the amount of time of the current green
	//signal that has been used to reach city i.

	//these states uniquely determine all possible scenarios as the unique 
	//things for any saftey island is it's index and amount
	//of time of cuurent green signal we have spent to come here, and the 
	//minimum no. of cycles to do so will be stored as it's dp value, as it is easy
	//to observe taking more no. of cycles is only a waste of time and we have to 
	//minimise the total time of the journey.

	int dp[m][g];

	rep(i,0,m)
	{
		rep(j,0,g)
		dp[i][j]=inf;
	}

	dp[0][0]=0;

	deque<pair<int,int>> q;

	q.push_front(mp(0,0));

	int ans=inf;

	//transitions are made using 0-1 bfs, the transitions which lead to 
	//an increased no. of cycles from the curent state are pushed at the end
	//of the queue and states which we can reach from here without an 
	//increment of cycles are pushed at the beggining of the queue to keep
	//it sorted.

	while(!q.empty())
	{
		pair<int,int> here=q.front();

		q.pop_front();

		int i=here.F,j=here.S;

		int req=a[m-1]-a[i];

		//cout<<i<<" "<<j<<" "<<dp[i][j]<<endl;

		if(req<=(g-j))
		{
			//cout<<i<<" "<<j<<" "<<dp[i][j]<<" "<<req<<endl;

			//time_here=no. of cycles*(r+g) + time_spend_of_green_till_now + extra_time_to_reach_destination
			int time_here=dp[i][j]*(r+g)+j+req;

			ans=min(time_here,ans);
		}

		if(i)
		{
			req=a[i]-a[i-1];

			if(j+req<=g)
			{
				if(j+req==g and dp[i-1][0]==inf)
				{
					dp[i-1][0]=dp[i][j]+1;

					q.push_back(mp(i-1,0));
				}
				
				if(j+req<g and dp[i-1][j+req]==inf)
				{
					dp[i-1][j+req]=dp[i][j];

					q.push_front(mp(i-1,j+req));
				}
			}
		}

		if(i!=m-1)
		{
			req=a[i+1]-a[i];

			if(j+req<=g)
			{
				if(j+req==g and dp[i+1][0]==inf)
				{
					dp[i+1][0]=dp[i][j]+1;

					q.push_back(mp(i+1,0));
				}
				
				if(j+req<g and dp[i+1][j+req]==inf)
				{
					dp[i+1][j+req]=dp[i][j];

					q.push_front(mp(i+1,j+req));
				}
			}
		}
	}

	if(ans==inf)
	ans=-1;

	pri(ans);

    return 0; 
}