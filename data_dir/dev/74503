//besmellah
#include <bits/stdc++.h>
using namespace std;

const int maxn = 3e5 + 2;
int seg[4 * maxn], a[maxn], p[maxn];

int build(int id, int L, int R){
	if (R == L + 1)
		return 0;
	int mid = (L + R) / 2;
	int x = build(2 * id, L, mid), y = build(2 * id + 1, mid, R);
	seg[id] = x + y;
	if (a[mid] < a[mid - 1])
		seg[id] ++;
	return seg[id];
}

int get(int id, int L, int R, int l, int r){
	if (R <= l || r <= L)
		return 0;
	if (L >= l && R <= r){
		return seg[id];
	}
	int mid = (L + R) / 2, ans;
	int x = get(2 * id, L, mid, l, r), y = get(2 * id + 1, mid, R, l, r);
	ans = x + y;
	if (mid - 1 >= l && mid < r && a[mid] < a[mid - 1])
		ans ++;
	return ans;
}

int add(int id, int L, int R, int idx, int val){
	if (idx < L || idx >= R)
		return seg[id];
	if (R == L + 1){
		a[idx] = val;
		return 0;
	}
	int mid = (L + R) / 2;
	int x = add(2 * id, L, mid, idx, val), y = add(2 * id + 1, mid, R, idx, val);
	seg[id] = x + y;
	if (a[mid] < a[mid - 1])
		seg[id] ++;
	return seg[id];
}

int main(){
	ios::sync_with_stdio(false);
	cin.tie(0);
	int n;
	cin >> n;
	for (int i = 0; i < n; i++){
		cin >> p[i];
		p[i] --;
		a[p[i]] = i;
	}
	build(1, 0, n);
	int q;
	cin >> q;
	while (q --){
		int type, x, y;
		cin >> type >> x >> y;
		x --;
		y --;
		if (type == 1){
			cout << get(1, 0, n, x, y + 1) + 1 << '\n';
		}
		else {
			swap(p[x], p[y]);
			int X = a[p[x]], Y = a[p[y]];
			add(1, 0, n, p[x], Y);
			add(1, 0, n, p[y], X);
		}
	}
}
