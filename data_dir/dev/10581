#include <bits/stdc++.h>
using namespace std;

const int64_t MOD = 998244353;
void add(int64_t& a, int64_t b){
    a = (a+b) % MOD;
}
void mul(int64_t& a, int64_t b){
    a = a*b % MOD;
}

vector<int64_t> fact, seq_inv, fact_inv;

void create_fact_mod(int num){
    fact[0] = fact[1] = 1;
    for(int i=2; i<=num; i++) fact[i] = fact[i-1] * i % MOD;
}

void create_seq_inv_mod(int num){
    seq_inv[0] = seq_inv[1] = 1;
    for(int i=2; i<=num; i++) seq_inv[i] = (MOD - MOD/i) * seq_inv[MOD%i] % MOD;
}

void create_fact_inv_mod(int num){
    fact_inv[0] = fact_inv[1] = 1;
    for(int i=2; i<=num; i++) fact_inv[i] = fact_inv[i-1] * seq_inv[i] % MOD;
}

void create_mod_tables(int num){
    fact.resize(num+1);
    seq_inv.resize(num+1);
    fact_inv.resize(num+1);
    create_fact_mod(num);
    create_seq_inv_mod(num);
    create_fact_inv_mod(num);
}

int64_t comb_mod(int n, int k){
    return fact[n] * fact_inv[n-k] % MOD * fact_inv[k] % MOD;
}

int64_t perm_mod(int n, int k){
    return fact[n] * fact_inv[n-k] % MOD;
}

int64_t power_mod(int64_t num, int64_t power){
    int64_t prod = 1;
    num %= MOD;
    while(power > 0){
        if(power&1) prod = prod * num % MOD;
        num = num * num % MOD;
        power >>= 1;
    }
    return prod;
}

int64_t extgcd(int64_t a, int64_t b, int64_t& x, int64_t& y){
    int64_t d = a;
    if(b != 0){
        d = extgcd(b, a%b, y, x);
        y -= (a/b) * x;
    }else{
        x = 1; y = 0;
    }
    return d;
}

int64_t inv_mod(int64_t a){
    int64_t x, y;
    extgcd(a, MOD, x, y);
    return (MOD + x%MOD) % MOD;
}

int nth_bit(int64_t num, int n){
    return (num >> n) & 1;
}

void fail(){
    cout << 0 << endl;
    exit(0);
}

int main(){
    int N, K, M;
    cin >> N >> K >> M;
    vector<vector<int>> RLX(M);
    for(int i=0; i<M; i++){
        int l, r, x;
        scanf("%d %d %d", &l, &r, &x);
        RLX[i] = {r, l, x};
    }
    sort(RLX.begin(), RLX.end());

    int64_t ans = 1;
    for(int bt=0; bt<K; bt++){
        vector<int> imos(N+2);
        vector<int> R2L(N+1, -1);
        int last = -1;
        for(int i=0; i<M; i++){
            int r = RLX[i][0], l = RLX[i][1], x = RLX[i][2];
            if(nth_bit(x, bt)){
                imos[l]++;
                imos[r+1]--;
            }else{
                if(last < l) R2L[r] = last = l;
            }
        }
        for(int i=1; i<=N; i++) imos[i] += imos[i-1];

        vector<int64_t> dp(N+1);
        dp[0] = 1;
        int l = 0;
        int64_t sum = 1;
        for(int i=1; i<=N; i++){
            if(imos[i] == 0){
                dp[i] = sum;
                add(sum, sum);
            }
            if(R2L[i] >= 0) while(l < R2L[i]){
                add(sum, MOD - dp[l]);
                l++;
            }
        }
        mul(ans, sum);
    }
    cout << ans << endl;
    return 0;
}
