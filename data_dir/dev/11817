
// ~/BAU/ACM-ICPC/Teams/Rampage/Corvus
// ~/sudo apt-get verdict Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
const int N = 100001;
const ll MOD = 1e9 + 7;
const double eps = 1e-9;

vector<vector<int> > v;
int g[8];
ll dp1[131], dp2[131];

ll calc(vector<int> &A, vector<int> &B, vector<int> &C) {
	int b = (int)B.size() - 1, c = (int)C.size() - 1;
	while (b >= 0) {
		while (c >= 0 && C[c] >= B[b])
			c--;
		dp2[b--] = ((int)C.size() - (c + 1));
	}
	int a = (int)A.size() - 1;
	b = (int)B.size() - 1;
	ll tot = 0, ans = 0;
	while (a >= 0) {
		while (b >= 0 && B[b] >= A[a]) {
			tot += dp2[b];
			b--;
		}
		ans += tot;
		a--;
	}
	return ans;
}

int gcd(int a, int b) {
	return b == 0 ? a : gcd(b, a%b);
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif

	v.resize(N);
	for (int i = 1; i <= 100000; i++) {
		int x = i;
		for (int j = 1; j*j <= x; j++)
			if (x%j == 0) {
				v[i].push_back(j);
				if (x / j != j)
					v[i].push_back(x / j);
			}
		sort(v[i].begin(), v[i].end());
	}

	vector<tuple<int, int, int> > p;
	int tmp[3] = { 0,1,2 };
	do {
		p.push_back(make_tuple(1<<tmp[0], 1<<tmp[1], 1<<tmp[2]));
	} while (next_permutation(tmp, tmp + 3));
	
	int tc, a[3];
	scanf("%d", &tc);
	while (tc--) {
		scanf("%d%d%d", a, a + 1, a + 2);

		ll ans1 = 0, ans2 = 0;
		for (int i = 0; i < 8; i++) {
			g[i] = 0;
			for (int j = 0; j < 3; j++)
				if (i & (1 << j))
					g[i] = gcd(g[i], a[j]);
		}
		for (int m = 1; m < (1 << 6); m++) {
			int x = 0, y = 0, z = 0, c = 0;
			for (int i = 0; i < 6; i++)
				if (m & (1 << i)) {
					x |= get<0>(p[i]);
					y |= get<1>(p[i]);
					z |= get<2>(p[i]);
					c++;
				}
			if (c & 1) {
				ans1 += 1ll * v[g[x]].size()*v[g[y]].size()*v[g[z]].size();
				ans2 += 1ll * v[g[x]].size()*v[g[y | z]].size();
			}
			else {
				ans1 -= 1ll * v[g[x]].size()*v[g[y]].size()*v[g[z]].size();
				ans2 -= 1ll * v[g[x]].size()*v[g[y | z]].size();
			}
		}
		printf("%lld\n", (ans1 + 3*ans2 + 2*v[g[7]].size())/6);
	}
	return 0;
}