#include<bits/stdc++.h>
#define x first
#define y second
#define pb push_back
#define mp make_pair
#define all(v) v.begin(), v.end()
#define up_b upper_bound
#define low_b lower_bound

using namespace std;

typedef long long ll;
typedef long double ld;

const int N = 3e+5 + 5;
const ll inf = 4e+18;
const ll mod = 1e+9 + 7;

inline void boost() {
  ios_base :: sync_with_stdio(NULL);
  cin.tie(NULL), cout.tie(NULL);
}

struct vert {
  long long sum, mx;
};

vert t[1201200];
long long kol[1001000], a[300300];

void build( int v, int tl, int tr) {
  if ( tl == tr )
    t[v].sum = t[v].mx = a[tl];
  else {
    int tm = ( tl + tr ) / 2;
    build( v * 2, tl, tm);
    build( v * 2 + 1, tm + 1, tr);
    t[v].sum = t[v * 2].sum + t[v * 2 + 1].sum;
    t[v].mx = max( t[v * 2].mx, t[v * 2 + 1].mx);
  }
}

void update( int v, int tl, int tr, int l, int r) {
  if ( l > r ) return;
  if ( tl == tr ) {
    int x = (int)t[v].sum;
    t[v].sum = t[v].mx = kol[x];
    return;
  }
  int tm = ( tl + tr ) / 2;
  if ( t[v * 2].mx > 2 )
    update( v * 2, tl, tm, l, min( tm, r));
  if ( t[v * 2 + 1].mx > 2 )
    update( v * 2 + 1, tm + 1, tr, max( tm + 1, l), r);
  t[v].sum = t[v * 2].sum + t[v * 2 + 1].sum;
  t[v].mx = max( t[v * 2].mx, t[v * 2 + 1].mx);
}

ll get( int v, int tl, int tr, int l, int r) {
  if ( l > r )
    return 0ll;
  if ( tl == l && tr == r )
    return t[v].sum;
  int tm = ( tl + tr ) / 2;
  return ( get( v * 2, tl, tm, l, min( tm, r)) +
           get( v * 2 + 1, tm + 1, tr, max( tm + 1, l), r));
}

int main() {
  boost();
  for (int i = 1; i <= 1000000; i++)
    for (int j = i; j <= 1000000; j += i)
      kol[j]++;
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < n; i++)
    cin >> a[i];
  build( 1, 0, n - 1);
  for (int i = 0; i < m; i++) {
    int t, l, r;
    cin >> t >> l >> r;
    l--, r--;
    if ( t == 1 )
      update( 1, 0, n - 1, l, r);
    else
      cout << get( 1, 0, n - 1, l, r) << "\n";
  }
  return 0;
}
