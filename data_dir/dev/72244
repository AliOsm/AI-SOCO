#include <iostream>
#include <fstream>
#include <cstring>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <iomanip>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <iterator>
#include <ext/pb_ds/assoc_container.hpp>

#define x first
#define y second
#define mp make_pair
#define up_b upper_bound
#define low_b lower_bound
#define bit __builtin_popcount
#define all(x) x.begin(),x.end()

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef pair<ll,ll> pll;
typedef pair<int,int> pii;
typedef pair<int,ll> pil;
typedef pair<ll,int> pli;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> indexed_set;

const ll INF=1e18+123;
const ld EPS=1e-9;
const int inf=1e9+123;
const int MOD=1e9+7;
const int N=2e5+123;
const int dx[]={0,0,1,-1};
const int dy[]={1,-1,0,0};

int q[N];

ll binpow(ll a,ll b){
    ll res=1;
    while(b){
        if(b%2){
            res=res*a%MOD;
        }
        b/=2;
        a=a*a%MOD;
    }
    return res;
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int m;
    ll cnt=1,n=1;
    cin>>m;
    for(int i=1;i<=m;i++){
        int p;
        cin>>p;
        q[p]++;
        n=n*p%MOD;
    }
    int  j=0;
    for(int i=1;i<=2e5;i++){
        if(q[i]%2){
            j=i;
        }
    }
    ll sq=1;
    if(!j){
        for(int i=1;i<=2e5;i++){
            sq=sq*binpow(i,q[i]/2)%MOD;
        }
        for(int i=1;i<=2e5;i++){
            sq=sq*binpow(sq,q[i])%MOD;
        }
        cout<<sq;
        return 0;
    }
    q[j]=(q[j]-1)/2;
    for(int i=1;i<=2e5;i++){
        n=n*binpow(n,q[i])%MOD;
    }
    cout<<n;
    return 0;
}
