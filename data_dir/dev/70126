#include <bits/stdc++.h>

using namespace std;

#define mx 200005
#define int long long
#define pii pair <int, int>
#define piii pair <int, pii>
#define fi first
#define se second
#define mod 1000000007
#define inf 1e18+19
#define pb push_back
#define mem(ara, x) memset(ara, x, sizeof ara)
#define read() freopen("in.txt", "r", stdin)
#define write() freopen("out.txt", "w", stdout)
#define fst ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

struct Matrix {
    const static int N = 103;
    int n;
    int v[N][N];

    void init(int _n) {
        n = _n;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                v[i][j] = 0;
            }
        }
    }
    void ident() {
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                v[i][j] = 0;
            }
        }
        for(int i=0;i<n;i++){
            v[i][i] = 1;
        }
    }

    Matrix operator+(const Matrix &o) const {
        assert(n == o.n);

        Matrix res; res.init(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                res.v[i][j] = v[i][j] + o.v[i][j];
                if (res.v[i][j] >= mod) res.v[i][j] -= mod;
            }
        }
        return res;
    }

    Matrix operator*(const Matrix &o) const {
        assert(n == o.n);
        Matrix res; res.init(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                for(int k=0;k<n;k++){
                    res.v[i][j] = (v[i][k] * o.v[k][j] + res.v[i][j])%mod;
                }
            }
        }
        return res;
    }

    Matrix operator^(long long k) {
        Matrix res; res.init(n); res.ident();
        Matrix a = *this;
        while (k) {
            if (k&1LL) res = res*a;
            a = a*a;
            k /= 2;
        }
        return res;
    }
};


int32_t main(){
    //read();
    fst;
    int n, b, k, x;
    int cnt[11];
    while(cin >> n >> b >> k >> x){
        mem(cnt, 0);
        for(int i=0;i<n;i++){
            int a;
            cin >> a;
            cnt[a]++;
        }
        Matrix A;
        A.init(x+1);
        for(int i=0;i<x;i++){
            for(int j=0;j<=9;j++){
                A.v[i][(i*10+j)%x] += cnt[j];
            }
        }
        Matrix B;
        B.init(x+1);
        B = A^(b);
        Matrix C;
        C.init(x+1);
        for(int i=0;i<x;i++) C.v[i][0] = 1;
        C = C*B;
        cout << C.v[0][k] << endl;
    }
    return 0;
}
