#include <bits/stdc++.h>
using namespace std;

int low[2000010], prime[2000010], p;

vector <int> adia[100010];
int frc[2000010];
int ans[100010];
int h[100010];
int val[100010];

void dfs(int nod, int tata);
void ciur();

int main()
{
	ciur();
	int n, q;
	ios_base :: sync_with_stdio(0);
	cin.tie(0);

	cin >> n >> q;

	for (int i(1); i <= n; i++)
		cin >> val[i];

	while (--n) {
		int a, b;
		cin >> a >> b;
		adia[a].push_back(b);
		adia[b].push_back(a);
	}

	dfs(1, 0);

	while (q--) {
		int x, y, z;
		cin >> x;
		if (x == 1) {
			cin >> y;
			cout << (ans[y] ? ans[y] : -1) << '\n';
		}
		else {
			cin >> y >> z;
			val[y] = z;
			dfs(1, 0);
		}
	}

	return 0;
}

void dfs(int nod, int tata)
{
	ans[nod] = 0;
	h[nod] = 1 + h[tata];

	vector <pair <int, int>> modif;
	for (int i(val[nod]); i > 1; i /= low[i]) {
		modif.push_back({ low[i], frc[low[i]] });
		if (h[frc[low[i]]] > h[ans[nod]] && frc[low[i]] != nod)
			ans[nod] = frc[low[i]];
		frc[low[i]] = nod;
	}

	for (auto i : adia[nod])
		if (i != tata)
			dfs(i, nod);

	for (int i(modif.size() - 1); i >= 0; i--)
		frc[modif[i].first] = modif[i].second;
}

void ciur()
{
	for (int i(2); i <= 2000000; i++) {
		if (!low[i])
			prime[p++] = i, low[i] = i;
		for (int j(0); j < p && i * prime[j] <= 2000000 && low[i] >= prime[j]; j++)
			low[i * prime[j]] = prime[j];
	}
}
