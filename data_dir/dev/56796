// my only regret is having regrets
#include <bits/stdc++.h>
#define int long long
#define hash hashhash
#define X first
#define Y second
#define endl "\n"
#define Mp make_pair
#define debug(x) cerr << #x << " = " << x << endl
using namespace std;
inline int in(){int32_t x ; scanf("%d",&x) ; return x ; }
inline long long lin(){long long x ; scanf("%lld",&x) ; return x ;}
char ch[4000010];
inline string get(){ scanf("%s",ch) ; return string(ch) ; }
inline void read(int *a , int n ) { for (int i = 0 ; i < n ; i ++) a[i] = in() ; }
template <class blank> inline void out(blank x) {cout << x << endl ; exit(0) ;}
template <class blank , class blank2> inline void smin(blank &a , blank2 b) {a = a <= b ? a : b ;}
template <class blank , class blank2> inline void smax(blank &a , blank2 b) {a = a >= b ? a : b ;}
typedef pair<int , int > pii;
typedef long double ld;
typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<pii> vii;
const int maxn  = 1e6 + 10;
const int maxm = 4e6 + 10;
const int maxlg = 20;
const int base = 29;
const int mod = 1e9 + 7;
const int inf = 2e18 + 10;
const double eps = 1e-9;
const int SQ = 320;
vi g[maxn];
int u[maxn],v[maxn];
bool mark[maxn],mrk[maxn];
vii res;
inline int dfs(int node)
{
    mark[node] = true;
    vector<int > E;
    for (auto e : g[node])
        if (!mrk[e]) E.push_back(e) , mrk[e] = true;
    vector<int> st;
    for (auto e : E)
    {
        int nxt = node ^ u[e] ^ v[e];
        if (!mark[nxt]){
            int rem = dfs(nxt);
            if (rem == -1) st.push_back(e);
            else res.push_back({rem,e});
        }else st.push_back(e);
        
    }
    while (st.size() >= 2){
        int f = st.back() ; st.pop_back();
        int s = st.back() ; st.pop_back();
        res.push_back({f,s});
    }
    if (st.size()) return st.back();
    return -1;
}
int32_t main()
{
    int n = in() , m = in();
    if (m % 2) out("No solution\n");
    for (int i = 0 ; i < m ; i ++)
    {
        v[i] = in() , u[i] = in();
        g[v[i]].push_back(i) , g[u[i]].push_back(i);
    }
    dfs(1);
    for (auto e : res)
    {
        if (v[e.second] != u[e.first])
            swap(v[e.second],u[e.second]);
        if (v[e.second] != u[e.first]){
            swap(v[e.first],u[e.first]);
            if (v[e.second] != u[e.first])
                swap(v[e.second],u[e.second]);
        }
        cout << v[e.first] << " " << u[e.first] << " " << u[e.second ]  << "\n";
    }
}
