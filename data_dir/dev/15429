#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define x first
#define y second
#define ndl '\n'
#define mp make_pair
#define pb push_back
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define bit __builtin_popcount
#define all(x) x.begin(),x.end()
#define show(x) cout<<(#x)<<" is "<<(x)<<endl

using namespace std;
using namespace __gnu_pbds;

template<typename T> using indexed_set=tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair<ll,ll> pll;
typedef pair<int,int> pii;
typedef pair<int,ll> pil;
typedef pair<ll,int> pli;
typedef vector<vector<int>> matrix;

const ll INF=1e18+123;
const ld EPS=1e-9;
const int inf=1e9+123;
const int MOD=1e9+7;
const int N=1e5+123;
const int M=1e6+123;
const int dx[]={0,0,1,-1};
const int dy[]={1,-1,0,0};

int a[N],b[N],n;

pii t[3*N],tadd[3*N];

void push(int v,int len){
    if(!tadd[v].x)return;
    t[v]=tadd[v];

    if(len){
        tadd[v+v]=tadd[v];
        tadd[v+1+v]=tadd[v];
    }
    tadd[v]={0,0};
}

void upd(int l,int r,int val,int v=1,int tl=1,int tr=n){
    push(v,tr-tl);
    if(tl>r || l>tr)return;
    if(l<=tl && tr<=r){
        tadd[v]={l,val};
        push(v,tr-tl);
        return;
    }
    int tm=tl+tr>>1;
    upd(l,r,val,v+v,tl,tm);
    upd(l,r,val,v+v+1,tm+1,tr);
}

pii get(int pos,int v=1,int tl=1,int tr=n){
    push(v,tr-tl);
   // cout<<pos<<" "<<tl<<" "<<tr<<ndl;
    if(tl==tr)return t[v];
    int tm=tl+tr>>1;
    if(pos<=tm){
        return get(pos,v+v,tl,tm);
    }
    return get(pos,v+v+1,tm+1,tr);
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int m;
    cin>>n>>m;
    for(int i=1;i<=n;i++)cin>>a[i];
    for(int i=1;i<=n;i++)cin>>b[i];
    int tp,x,y,k;
    while(m--){
        cin>>tp;
        if(tp==2){
            cin>>x;
            pii p=get(x);
           // cout<<p.x<<" "<<p.y<<" ";
            if(p.x==0){
                cout<<b[x]<<ndl;
            }
            else{
                cout<<a[p.y+x-p.x]<<ndl;
            }
        }
        else{
            cin>>x>>y>>k;
            upd(y,y+k-1,x);
            //cout<<y<<" "<<y+k-1<<" "<<x<<ndl;
        }
    }
    return 0;
}
