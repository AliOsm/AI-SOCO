#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back
#define mem(a,b) memset(a,b,sizeof(a))

const int N=130000;
int head[N];
bool vis[N]={false};
int dis[N];
int s,mx,cnt,sum;
bool belong[N]={false};
struct edge
{
    int to,next;
}edge[2*N];
void add_edge(int u,int v)
{
    edge[cnt].to=v;
    edge[cnt].next=head[u];
    head[u]=cnt++;
}
void dfs(int u)
{
    vis[u]=true;
    for(int i=head[u];~i;i=edge[i].next)
    {
        if(!vis[edge[i].to])
        {
            dis[edge[i].to]=dis[u]+1;
            dfs(edge[i].to);
            if(belong[edge[i].to])
            {
                sum+=2;
                belong[u]=true;
                if(dis[edge[i].to]>mx)
                {
                    mx=dis[edge[i].to];
                    s=edge[i].to;
                }
                else if(dis[edge[i].to]==mx)
                {
                    if(edge[i].to<s)
                    {
                        s=edge[i].to;
                    }
                }
            }
        }
    }
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    int n,m,u,v,t;
    mem(head,-1);
    cnt=0;
    cin>>n>>m;
    for(int i=0;i<n-1;i++)
    {
        cin>>u>>v;
        add_edge(u,v);
        add_edge(v,u);
    }
    for(int i=0;i<m;i++)cin>>t,belong[t]=true;
    mx=0;
    s=t;
    dfs(t);
    mem(vis,false);
    mem(dis,0);
    sum=0;
    int tt=s;
    dfs(s);
    cout<<min(tt,s)<<endl<<sum-mx<<endl;
    return 0;
}