#pragma GCC target("avx2")
#pragma GCC optimize("O3")
   
#include <x86intrin.h>
#include <bits/stdc++.h>   
 
using namespace std;
     
#define F first
#define S second           
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)3e5 + 123;
const ll inf = (ll)1e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;                  
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

int n, m, x[101], y[101], mx[10], cost[7][7], ans;
bool used[7];
vector <pii> g[N];

void rec (int i = 1) {
   if (i == n + 1) {
      for (int z1 = 1; z1 <= 6; z1 ++)
         for (int z2 = 1; z2 <= 6; z2 ++)
            cost[z1][z2] = 0;
      for (int i1 = 1; i1 <= n; i1 ++) {
         if (mx[i1]) {
            for (auto it : g[i1]) {
               int to = it.F, id = it.S;
               if (!mx[to] || cost[mx[i1]][mx[to]]) continue;
               cost[mx[i1]][mx[to]] = cost[mx[to]][mx[i1]] = 1;
            }
         }
      }
      int res = 0;
      for (int z1 = 1; z1 <= 6; z1 ++)
         for (int z2 = z1; z2 <= 6; z2 ++)
            res += cost[z1][z2];
      ans = max (ans, res);
      return;
   }
   for (int j = 0; j <= 6; j ++) {
      mx[i] = j;
      used[j] = 1;
      rec (i + 1);
      mx[i] = used[j] = 0;
   }
}

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                     

inline void Solve () {
   cin >> n >> m;
   for (int i = 1; i <= m; i ++) {
      cin >> x[i] >> y[i];
      g[x[i]].pb ({y[i], i});
      g[y[i]].pb ({x[i], i});
   }
   rec ();
   cout << ans;
   
}

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
   //cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
                          