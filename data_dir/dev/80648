#include <bits/stdc++.h>

using namespace std;

#define fi first
#define se second
#define pf push_front
#define pb push_back
#define mk make_pair
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)x.size()
#define SWS ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0)
#define rfile freopen("input.txt", "r", stdin)
#define wfile freopen("output.txt", "w", stdout)
#define files rfile; wfile

typedef long long ll;
typedef long double ld;

const int Z = (int) 2e5 + 111;
const int inf = (int) 1e9 + 111;
const ll llinf = (ll) 1e18 + 5;
const int MOD = (int) 1e9 + 7;

int binpow(int a, int n) {
  if (n == 0) return 1;
  ll t = binpow(a, n / 2);
  t = t * t;
  t %= MOD;
  if (n % 2) {
    t *= a;
    t %= MOD;
  }
  return t;
}

ll dp[Z][3];

int GetCnt(int r, int rem) {
  if (rem == 0) rem = 3;
  return (r + 3 - rem) / 3;
}

int main() {
  srand(time(0));
  //files;
  SWS;
  int n, l, r;
  cin >> n >> l >> r;
  // dp[pref][rem]
  dp[0][0] = 1;
  for (int i = 1; i <= n; ++i) {
    for (int rem = 0; rem < 3; ++rem) {
      for (int new_rem = 0; new_rem < 3; ++new_rem) {
        int exp_rem;
        for (int k = 0; k < 3; ++k) {
          if ((rem + k) % 3 == new_rem) exp_rem = k;
        }
        dp[i][new_rem] += dp[i - 1][rem] * ( GetCnt(r, exp_rem) - GetCnt(l - 1, exp_rem) );
        dp[i][new_rem] %= MOD;
      }
    }
  }
  cout << dp[n][0];
  return 0;
}