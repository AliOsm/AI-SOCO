
#include <bits/stdc++.h>
//#pragma GCC optimize("Ofast")

#define fi first
#define se second
#define LL long long

using namespace std;

const int N = 1e3 + 7;
const int mod = 1e9 + 7;
const int B = 317;

int n,m,k;
char a[N][N];
int d[N][N];
int x1,y1,x2,y2;
queue < pair < int , int > > q;

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    //freopen( "input.txt" , "r" , stdin );
    //freopen( "output.txt" , "w" , stdout );

    cin >> n >> m >> k;
    for( int i = 1; i <= n; i++ ){
        for( int j = 1; j <= m; j++ ){
            cin >> a[i][j];
            d[i][j] = 1e9;
        }
    }
    cin >> x1 >> y1 >> x2 >> y2;
    q.push({x1 , y1});
    d[x1][y1] = 0;
    while( !q.empty() ){
        int x = q.front().fi;
        int y = q.front().se;
        q.pop();
        int f = 1;
        int g = -1;
        while( f <= k && y + f <= m && a[x][y + f] == '.' && d[x][y + f] > d[x][y]  ){
            if( d[x][y + f] > d[x][y] + 1 ){
                d[x][y + f] = d[x][y] + 1;
                q.push({x , y + f });
            }
            f++;
        }
        f = 1;
        while( f <= k && x + f <= n && a[x + f][y] == '.' && d[x + f][y] > d[x][y] ){
            if( d[x + f][y] > d[x][y] + 1 ){
                d[x + f][y] = d[x][y] + 1;
                q.push({x + f , y });
            }
            f++;
        }
        f = 1;
        while( f <= k && x - f >= 1 && a[x - f][y] == '.' && d[x - f][y] > d[x][y] ){
            if( d[x - f][y] > d[x][y] + 1 ){
                d[x - f][y] = d[x][y] + 1;
                q.push({x - f , y });
            }
            f++;
        }
        f = 1;
        while( f <= k && y - f >= 1 && a[x][y - f] == '.' && d[x][y - f] > d[x][y] ){
            if( d[x][y - f] > d[x][y] + 1 ){
                d[x][y - f] = d[x][y] + 1;
                q.push({x , y - f });
            }
            f++;
        }
    }
    if( d[x2][y2] == 1e9 )d[x2][y2] = -1;
    cout << d[x2][y2];
}
