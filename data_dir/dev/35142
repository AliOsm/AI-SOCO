using namespace std;
#include<bits/stdc++.h>
#define ll long long
#define pll pair<ll,ll>
#define pii pair<int,int>
#define fir first
#define sec second
#define mp make_pair
#define pb push_back
#define sz(c) ((int)c.size())
#define all(c) (c).begin(),(c).end()
#define MASK(i) (1LL<<(i))
#define BIT(x,i) (((x)>>(i))&1)
#define fn "B"  /// ___FILE_NAME_HERE___
#define rep(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define __rep(c,it) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();it++)

template <class T,class U>
void maximize(T &x,U y)
{
    if(x < y)x=y;
}
template <class T,class U>
void minimize(T &x,U y)
{
    if(x > y)x=y;
}
template <class T>
T Abs(T x)
{
    return (x < 0 ? -x : x);
}
template <class T>
T safe_sqrt(T x)
{
    return sqrt(max(x,(T)0));
}
template <class T,class U,class V>
T addmod(T x,U k,V MOD)
{
    return ((x+k)%MOD + MOD)%MOD;
}
template <class T,class U,class V>
T submod(T x,U k,V MOD)
{
    return ((x-k)%MOD + MOD)%MOD;
}
template <class T,class U,class V>
T mul(T x,U y,V MOD)
{
    return (ll)x*y%MOD;
}
/*------------------------------------------END_OF_TEMPLATE------------------------------------------*/

const int N=2e5+5;
int n,k,q;
int sum[N];
bool mark[N];

struct fenwickTree
{
    vector <int> ft;
    fenwickTree()
    {
        ft.resize(N+5,0);
    }
    void update(int node,int val)
    {
        for(;node <= N;node+=node&(-node))ft[node]+=val;
    }
    void update(int l,int r,int val)
    {
        update(l,val);
        update(r+1,-val);
    }
    int rsq(int node)
    {
        int res=0;
        for(;node > 0 ;node-=node&(-node))res+=ft[node];
        return res;
    }
}fen;

int main(void)
{
    #ifndef ONLINE_JUDGE
    freopen(fn".inp","r",stdin);
    freopen(fn".out","w",stdout);
    #endif // ONLINE_JUDGE
    cin>>n>>k>>q;
    for(int l,r,i=1;i<=n;i++)
    {
        cin>>l>>r;
        fen.update(l,r,1);
    }
    for(int i=1;i<=2e5;i++)
    {
        int res=fen.rsq(i);
        if(res >= k)mark[i]=true;
    }
    for(int i=1;i<=2e5;i++)sum[i]=sum[i-1]+mark[i];
    while(q--)
    {
        int l,r;
        cin>>l>>r;
        printf("%d\n",sum[r]-sum[l-1]);
    }
}
