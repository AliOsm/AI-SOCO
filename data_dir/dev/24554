#include<bits/stdc++.h>

using namespace std;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef long long Long;
typedef pair<Long,int> PII;
typedef vector<Long> VL;
typedef vector<VL> VVL;

int FAC[1000010];
int IFA[1000010];
#define MOD 1000000007
int mul(int a, int b){
	return 1LL*a*b%MOD;
}
int mul(int a, int b, int c) {
	return 1LL*a*mul(b,c)%MOD;
}
int mul(int a, int b, int c, int d){
	return 1LL*mul(a,b)*mul(c,d)%MOD;
}
VI cntLess(VI V) {
	VI A(V.size());
	for (int i = 0; i < V.size(); ++i) {
		if(i == 0 || V[i] != V[i-1])
			A[i] = i;
		else
			A[i] = A[i-1];
	}
	return A;
}
static int egcd(int a,int b, int &x, int &y) {
	x = 1, y = 0;
	int nx = 0, ny = 1;
	int nr = b, r = a;
	while(nr != 0) {
		int q = r / nr;
		tie(r, nr) = make_tuple(nr, r - q*nr);
		tie(x, nx) = make_tuple(nx, x - q*nx);
		tie(y, ny) = make_tuple(ny, y - q*ny);
	}
	// bezout = x , y 
	// gcd    = o_r
	return r;
}
static Long modInv(Long a, Long b)
{
	int x,y; egcd(a,b,x,y);
	return x < 0 ? x + b : x;
}

int gSum(VI V) {
	int m = V[0];
	int s = 0;
	for (int i = 1; i < V.size(); ++i) {
		if(V[i] > m) {
			cout << string(m, '\t') << m << endl;
			s += m;
			m = V[i];
		}
	}
	return s;
}
int getAllSum(VI V) {
	VI P(V.size());
	for (int i = 0; i < V.size(); ++i) {
		P[i] = i;
	}
	int su = 0;
	do {
		VI NV(V.size());
		for (int i = 0; i < V.size(); ++i) {
			NV[i] = V[P[i]];
		}
		su += gSum(NV);
	}while(next_permutation(P.begin(), P.end()));
	return su;
}

int main(int argc, char** argv)
{
	int LAST = -1;
	FAC[0] = IFA[0] = 1;
	for (int i = 1; i < 1000010; ++i) {
		LAST = i;
		FAC[i] = mul(i, FAC[i-1]);
	}
	IFA[LAST] = modInv(FAC[LAST], MOD);
	for (int i = LAST-1; i >= 1; --i) {
		IFA[i] = mul(i+1, IFA[i+1]);
	}
	
	int N;
	cin >> N;
	VI V(N);
	for (int &n : V)
		cin >> n;
	sort(V.begin(), V.end());
	int m = V.back();
	VI F = cntLess(V);
	reverse(V.begin(), V.end());
	VI R = cntLess(V);
	reverse(V.begin(), V.end());
	reverse(R.begin(), R.end());
	
	VI NCK(N);
	for (int i = 0; i < N; ++i) {
		NCK[i] = mul(FAC[N-1], IFA[i], IFA[N-1-i]);
		if(i) NCK[i] = (NCK[i-1] + NCK[i]) % MOD;
	}
	Long ans = 0;
	for (int i = 0; i < N; ++i) {
		
		if (m == V[i]) break;
		
		int L = F[i];
		int G = R[i];
		int E = N - L - G - 1;
		int d = (N-1 - L);
		
		ans += mul(FAC[G+E], FAC[L], mul(FAC[N], IFA[d+1], IFA[N-d-1]), V[i]);
		ans %= MOD;
	}
	cout << ans << endl;
}

/*
|xxxyyyy
nCx + (n-1)C(x-1) + (n-2)C(x-2) + (n-x)C0

nCd + (n-1)Cd + (n-2)Cd + ... dCd


6
2 3 1 8 4 6




*/
