
#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>

using namespace std;

typedef long long int ll;

#define FORN(i, n) for (int (i) = 0; (i) < (n); ++(i))
#define FORNa(i, a, n) for (int (i) = (a); (i) < (n); ++(i))
#define PB(a, x) a.push_back(x)
#define MK(a, b) make_pair(a, b)


void solve() {
    string s = "";
    cin >> s;

    set<char> mnSim;
    mnSim.insert('A');
    mnSim.insert('H');
    mnSim.insert('I');
    mnSim.insert('M');
    mnSim.insert('O');
    mnSim.insert('T');
    mnSim.insert('U');
    mnSim.insert('V');
    mnSim.insert('W');
    mnSim.insert('X');
    mnSim.insert('Y');
    mnSim.insert('o');
    mnSim.insert('v');
    mnSim.insert('w');
    mnSim.insert('x');

    if (s.length() == 1) {
        if (mnSim.find(s[0]) == mnSim.end()) {
            cout << "NIE" << endl;
        } else {
            cout << "TAK" << endl;
        }
        return;
    }

    int n = s.length() / 2;
    FORN(i, n) {
        if (s[i] == 'b' && s[s.length() - i - 1] == 'd'
            || s[i] == 'd' && s[s.length() - i - 1] == 'b'
            || s[i] == 'p' && s[s.length() - i - 1] == 'q'
            || s[i] == 'q' && s[s.length() - i - 1] == 'p') {
            continue;
        }

        if (s[s.length() - i - 1] != s[i]) {
//            if (s[0] == 'q') {
//                cout << "1: " << s[i] << " " << s[s.length() - i - 1] << endl;
//            }
            cout << "NIE" << endl;
            return;
        }

        if (mnSim.find(s[i]) == mnSim.end()) {
//            if (s[0] == 'q') {
//                cout << "2: " << s[i] << " " << s[s.length() - i - 1] << endl;
//            }
            cout << "NIE" << endl;
            return;
        }
    }
    if (s.length() % 2 == 1) {
        if (mnSim.find(s[n]) == mnSim.end()) {
//            if (s[0] == 'q') {
//                cout << "3: " << s[n] << " " << s[s.length() - n - 1] << endl;
//            }
            cout << "NIE" << endl;
        } else {
            cout << "TAK" << endl;
        }
    } else {
        cout << "TAK" << endl;
    }
}

int main() {
    ios_base::sync_with_stdio(false);

#ifdef MYDEBUG
    int t = 0;
    cin >> t;
    while (t--) {
        solve();
    }
#else
    solve();
#endif

    return 0;
}