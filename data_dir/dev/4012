#include <bits/stdc++.h>
#define fst first
#define snd second
#define fore(i,a,b) for(int i=a,ThxDem=b;i<ThxDem;++i)
#define pb push_back
#define ALL(s) s.begin(),s.end()
#define FIN ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define SZ(n) ((int)(n).size())
using namespace std;
typedef long long ll;
typedef pair<int,int> ii;

const double EPS = 1e-10, DINF = 1e100;

// PUNTO

struct pt { // for 3D add z coordinate
  double x,y;
  pt(double x, double y):x(x),y(y){}
  pt(){}
  double norm2(){return *this**this;}
  double norm(){return sqrt(norm2());}
  bool operator==(pt p){return abs(x-p.x)<EPS&&abs(y-p.y)<EPS;}
  pt operator+(pt p){return pt(x+p.x,y+p.y);}
  pt operator-(pt p){return pt(x-p.x,y-p.y);}
  pt operator*(double t){return pt(x*t,y*t);}
  pt operator/(double t){return pt(x/t,y/t);}
  double operator*(pt p){return x*p.x+y*p.y;}
  // pt operator^(pt p){ // only for 3D
  //return pt(y*p.z-z*p.y,z*p.x-x*p.z,x*p.y-y*p.x);}
  double angle(pt p){ // redefine acos for values out of range
  return acos(*this*p/(norm()*p.norm()));}
  pt unit(){return *this/norm();}
  double operator%(pt p){return x*p.y-y*p.x;}
  // 2D from now on
  bool operator<(pt p)const{ // for convex hull
  return x<p.x-EPS||(abs(x-p.x)<EPS&&y<p.y-EPS);}
  bool left(pt p, pt q){ // is it to the left of directed line pq?
  return (q-p)%(*this-p)>EPS;}
  pt rot(pt r){return pt(*this%r,*this*r);}
  pt rot(double a){return rot(pt(sin(a),cos(a)));}
};
pt ccw90(1,0);
pt cw90(-1,0);

// LINEA

int sgn2(double x){return x<0?-1:1;}

struct ln {
  pt p,pq;
  ln(pt p, pt q):p(p),pq(q-p){}
  ln(){}
  bool has(pt r){return dist(r)<EPS;}
  bool seghas(pt r){return has(r)&&(r-p)*(r-(p+pq))-EPS<0;}
  // bool operator /(ln l){return (pq.unit()^l.pq.unit()).norm()<EPS;}  // 3D
  bool operator/(ln l){return abs(pq.unit()%l.pq.unit())<EPS;}          // 2D
  bool operator==(ln l){return *this/l&&has(l.p);}
  pt operator^(ln l){ // intersection
  if(*this/l)return pt(DINF,DINF);
  pt r=l.p+l.pq*((p-l.p)%pq/(l.pq%pq));
  //if(!has(r)){return pt(NAN,NAN,NAN);}           // check only for 3D
  return r;
  }
  double angle(ln l){return pq.angle(l.pq);}
  int side(pt r){return has(r)?0:sgn2(pq%(r-p));}  // 2D
  pt proj(pt r){return p+pq*((r-p)*pq/pq.norm2());}
  pt ref(pt r){return proj(r)*2-r;}
  double dist(pt r){return (r-proj(r)).norm();}
  // double dist(ln l){                            // only 3D
  //   if(*this/l)return dist(l.p);
  //   return abs((l.p-p)*(pq^l.pq))/(pq^l.pq).norm();
  // }
  ln rot(auto a){return ln(p,p+pq.rot(a));} // 2D
};

ln bisector(ln l, ln m){ // angle bisector
  pt p=l^m;
  return ln(p,p+l.pq.unit()+m.pq.unit());
}
ln bisector(pt p, pt q){ // segment bisector (2D)
  return ln((p+q)*.5,p).rot(ccw90);
}

// CIRCULO

struct circle {
  pt o;double r;
  circle(pt o, double r):o(o),r(r){}
  circle(pt x, pt y, pt z){o=bisector(x,y)^bisector(x,z);r=(o-x).norm();}
  bool has(pt p){return (o-p).norm()<r+EPS;}
  vector<pt> operator^(circle c){
    vector<pt> s;
    double d=(o-c.o).norm();
    if(d>r+c.r+EPS||d+min(r,c.r)+EPS<max(r,c.r))return s;
    double x=(d*d-c.r*c.r+r*r)/(2*d);
    double y=sqrt(r*r-x*x);
    pt v=(c.o-o)/d;
    s.push_back(o+v*x+v.rot(ccw90)*y);
    if(y>EPS)s.push_back(o+v*x-v.rot(ccw90)*y);
    return s;
  }
  vector<pt> operator^(ln l){
    vector<pt> s;
    pt p=l.proj(o);
    double d=(p-o).norm();
    if(d-EPS>r)return s;
    if(abs(d-r)<EPS){s.push_back(p);return s;}
    d=sqrt(r*r-d*d);
    s.push_back(p+l.pq.unit()*d);
    s.push_back(p-l.pq.unit()*d);
    return s;
  }
  vector<pt> tang(pt p){
    double d=sqrt((p-o).norm2()-r*r);
    return *this^circle(p,d);
  }
  double intertriangle(pt a, pt b){ // area of intersection with oab
    if(abs((o-a)%(o-b))<EPS)return 0.;
    vector<pt> q={a},w=*this^ln(a,b);
    if(w.size()==2)for(auto p:w)if((a-p)*(b-p)<-EPS)q.push_back(p);
    q.push_back(b);
    if(q.size()==4&&(q[0]-q[1])*(q[2]-q[1])>EPS)swap(q[1],q[2]);
    double s=0;
    for(int i = 0; i < q.size()-1; i++){
      if(!has(q[i])||!has(q[i+1]))s+=r*r*(q[i]-o).angle(q[i+1]-o)/2;
      else s+=abs((q[i]-o)%(q[i+1]-o)/2);
    }
    return s;
  }
};


// POLIGONO

int sgn(double x){return x<-EPS?-1:x>EPS;}

struct pol {
  int n;vector<pt> p;
  pol(){}
  pol(vector<pt> _p){p=_p;n=p.size();}
  double area(){
    double r=0.;
    for(int i = 0; i < n; i++)r+=p[i]%p[(i+1)%n];
    return abs(r)/2; // negative if CW, positive if CCW
  }
  pt centroid(){ // (barycenter)
    pt r(0,0);
    double t=0;
    for(int i = 0; i < n; i++){
      r=r+(p[i]+p[(i+1)%n])*(p[i]%p[(i+1)%n]);
      t+=p[i]%p[(i+1)%n];
    }
    return r/t/3;
  }
  bool has(pt q){ // O(n)
    for(int i = 0; i < n; i++)if(ln(p[i],p[(i+1)%n]).seghas(q))return true;
    int cnt=0;
    for(int i = 0; i < n; i++){
      int j=(i+1)%n;
      int k=sgn((q-p[j])%(p[i]-p[j]));
      int u=sgn(p[i].y-q.y),v=sgn(p[j].y-q.y);
      if(k>0&&u<0&&v>=0)cnt++;
      if(k<0&&v<0&&u>=0)cnt--;
    }
    return cnt!=0;
  }
  void normalize(){ // (call before haslog, remove collinear first)
    if(p[2].left(p[0],p[1]))reverse(p.begin(),p.end());
    int pi=min_element(p.begin(),p.end())-p.begin();
    vector<pt> s(n);
    for(int i = 0; i < n; i++)s[i]=p[(pi+i)%n];
    p.swap(s);
  }
  bool haslog(pt q){ // O(log(n)) only CONVEX. Call normalize first
    if(q.left(p[0],p[1])||q.left(p.back(),p[0]))return false;
    int a=1,b=p.size()-1; // returns true if point on boundary
    while(b-a>1){         // (change sign of EPS in left
      int c=(a+b)/2;      // to return false in such case)
      if(!q.left(p[0],p[c]))a=c;
      else b=c;
    }
    return !q.left(p[a],p[a+1]);
  }
  pol cut(ln l){ // cut CONVEX polygon by line l
    vector<pt> q; // returns part at left of l.pq
    for(int i = 0; i < n; i++){
      int d0=sgn(l.pq%(p[i]-l.p)),d1=sgn(l.pq%(p[(i+1)%n]-l.p));
      if(d0>=0)q.push_back(p[i]);
      ln m(p[i],p[(i+1)%n]);
      if(d0*d1<0&&!(l/m))q.push_back(l^m);
    }
    return pol(q);
  }
  double intercircle(circle c){ // area of intersection with circle
    double r=0.;
    for(int i = 0; i < n; i++){
      int j=(i+1)%n;double w=c.intertriangle(p[i],p[j]);
      if((p[j]-c.o)%(p[i]-c.o)>0)r+=w;
      else r-=w;
    }
    return abs(r);
  }
};

// CONVEX HULL

vector<pt> chull(vector<pt> p){
  vector<pt> r;
  sort(p.begin(),p.end());
  for(int i = 0; i < p.size(); i++){
    while(r.size()>=2&&r.back().left(r[r.size()-2],p[i])){
      r.pop_back();
    }
    r.push_back(p[i]);
  }
  r.pop_back();
  int k=r.size();
  for(int i=p.size()-1;i>=0;--i){
    while(r.size()>=k+2&&r.back().left(r[r.size()-2],p[i])){
      r.pop_back();
    }
    r.push_back(p[i]);
  }
  r.pop_back();
  return r;
}

vector<int> ans = {180, 90, 60, 45, 36, 30, 180, 45, 20, 18, 180, 15, 180, 90, 12, 45, 180, 10, 180, 9, 60, 90, 180, 15, 36, 90, 20, 45, 180, 6, 180, 45, 60, 90, 36, 5, 180, 90, 60, 9, 180, 30, 180, 45, 4, 90, 180, 15, 180, 18, 60, 45, 180, 10, 36, 45, 60, 90, 180, 3, 180, 90, 20, 45, 36, 30, 180, 45, 60, 18, 180, 5, 180, 90, 12, 45, 180, 30, 180, 9, 20, 90, 180, 15, 36, 90, 60, 45, 180, 4, 180, 45, 60, 90, 36, 15, 180, 90, 20, 9, 180, 30, 180, 45, 12, 90, 180, 5, 180, 18, 60, 45, 180, 30, 36, 45, 20, 90, 180, 6, 180, 90, 60, 45, 36, 10, 180, 45, 60, 18, 180, 15, 180, 90, 8, 45, 180, 30, 180, 9, 60, 90, 180, 10, 36, 90, 60, 45, 180, 12, 180, 45, 20, 90, 36, 15, 180, 90, 60, 18, 180, 20, 180, 45, 24, 90, 180, 30, 180, 36, 40, 45, 180, 60, 72, 90, 120, 180, 360, -1};

int main(){FIN;
  int t; cin >> t;
  while(t--){
    int x;
    cin >> x;
    cout << ans[x-1] << "\n";
  }
  /*
  cout << "{";
  fore(ang,1,180){
    double an = ang;
    an = an*acos(-1)/180.;
    fore(n,3,1000){
      vector<pt> p(n);
      fore(i,0,n){
        double g = (360./(n))*(i), pi = acos(-1);
        p[i] = pt(1,0).rot(g*pi/180.);
      }
      bool f = 0;
      fore(i,1,n){
        if(f) break;
        fore(j,i+1,n){
          ln l1(p[0],p[i]);
          ln l2(p[0],p[j]);
          if(abs(l1.angle(l2)-an) < 1e-5){
            cout << n << ", ";
            f = 1;
            break;
          }
        }
      }
      if(f) break;
    }
  }
  cout << "-1};";
  */
}