#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define eb emplace_back
#define ll long long
#define pii pair < int, int >
#define fr first
#define sc second
#define mk make_pair
#define sz(s) (int)s.size()
#define all(s) s.begin(), s.end()
#define ok puts("ok");
#define whatis(x) cerr << #x << " = " << x << endl;
#define pause system("pause");
#define random rand() ^ (rand() << 5)

const int N = (int)1e5 + 7;
const int inf = (int)1e9 + 7;

struct trie {
	int to[26], h, has;
	trie() {
		memset(to, 0, sizeof to);
		h = 0;
		has = 0;
	}
};

trie st[N];
int n, sz = 2;      
multiset < int > mt[N];
int pr[N];

void add(string s, int v = 1) {
	int h = 0;
	for (int i = 0; i < sz(s); i++) {
		if (!st[v].to[s[i] - 'a']) {
			st[v].to[s[i] - 'a'] = sz++;
		}
		v = st[v].to[s[i] - 'a'];
		st[v].h = ++h;
	}
	st[v].has = 1;
}

void go(int v) {
	pr[v] = v;
	if (st[v].has) {
		mt[v].insert(st[v].h);
	}
	for (int i = 0; i < 26; i++) {
		if (!st[v].to[i]) continue;
		go(st[v].to[i]);
		int id = st[v].to[i];
		if (sz(mt[pr[id]]) < sz(mt[pr[v]])) {
			for (auto to : mt[pr[id]]) {
				mt[pr[v]].insert(to);
			}
			continue;
		}
		for (auto to : mt[pr[v]]) {
			mt[pr[id]].insert(to);
		}
		pr[v] = pr[id];
	}
	if (!st[v].has && v != 1) {		
		mt[pr[v]].erase(--mt[pr[v]].end());
		mt[pr[v]].insert(st[v].h);
	}
}

main() {
	scanf("%d", &n);
	for (int i = 1; i <= n; i++) {
		string s;
		cin >> s;
		add(s);
	}
	go(1);
	int ans = 0;
	for (auto to : mt[pr[1]]) {
		ans += to;
	}
	cout << ans;
}

