#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
using namespace __gnu_pbds;
using namespace std;
 
typedef tree<int, null_type, less<int>, rb_tree_tag,
        tree_order_statistics_node_update>
        new_data_set;
 
#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define PSET(x,y) fixed<<setprecision(y)<<x
#define pb push_back
#define pf push_front
#define pii pair<int,int>
#define mp make_pair
#define vi vector<int>
#define vip vector<pair<int,int> >
#define ff first
#define ss second
#define int long long
#define SIZE 200010
#define mod 1000000007
#define BIG 998244353
#define s(t) scanf("%d",&t)
#define p(t) printf("%d\n",t)
#define mii map<int,int>
#define MSET(table,i) memset(table, i, sizeof(table))
#define endl '\n'
#define tc int t;cin>>t;while(t--)
#define pi  3.1415926358
#define print(x) for(auto el: x) cout<<el<<" ";cout<<endl
#define bits(x) __builtin_popcount(x)
#define minimum(a,n) min_element(a,a+n)-a
#define maximum(a,n) max_element(a,a+n)-a
#define pqbig priority_queue<int>
#define pqsmall priority_queue<int,vector<int>,greater<int> >
#define all(v) v.begin(),v.end()
#define sitr set<int>:: iterator
#define mitr map<int,int>:: iterator
 
#define trace1(x)                cerr<<#x<<": "<<x<<endl
#define trace2(x, y)             cerr<<#x<<": "<<x<<" | "<<#y<<": "<<y<<endl
#define trace3(x, y, z)          cerr<<#x<<":" <<x<<" | "<<#y<<": "<<y<<" | "<<#z<<": "<<z<<endl
#define trace4(a, b, c, d)       cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl
#define trace5(a, b, c, d, e)    cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<endl
#define trace6(a, b, c, d, e, f) cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<" | "<<#f<<": "<<f<<endl
 
const int N=1e3+5;
int dp[N][N][11][2];
int n,m,k;
string s,t;

int solve(int id1,int id2,int rem,int turn)
{

    if(id1==n or id2==m)
    {
        if(rem==0)
            return 0;
        return -1e18;
    }

    if(rem==0)
        return 0;

    if(dp[id1][id2][rem][turn]!=-1)
        return dp[id1][id2][rem][turn];

    int ans=-1e18;

    if(turn)
    {
        ans=max(ans,solve(id1+1,id2,rem-1,0));
        ans=max(ans,solve(id1,id2+1,rem-1,0));

        if(s[id1]==t[id2])
        {
            ans=max(ans,1+solve(id1+1,id2+1,rem,1));
            ans=max(ans,1+solve(id1+1,id2+1,rem-1,0));
        }

    }
    else
    {
        ans=max(ans,solve(id1+1,id2,rem,0));
        ans=max(ans,solve(id1,id2+1,rem,0));

        if(s[id1]==t[id2])
        {
            ans=max(ans,1+solve(id1+1,id2+1,rem,1));
            ans=max(ans,1+solve(id1+1,id2+1,rem-1,0));
        }
    }

    return dp[id1][id2][rem][turn]=ans;

}

int32_t main()
{
    fast;
    cin>>n>>m>>k;
    cin>>s>>t;
    MSET(dp,-1);
    cout<<solve(0,0,k,0);
}   