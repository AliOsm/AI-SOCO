#include <bits/stdc++.h>
using namespace std;
int const N = 3111;
int ww[N], bb[N], cc[N];
vector<int> girls[N], fr[N];
void dfs(int v, int c) {
  cc[v] = c;
  girls[c].push_back(v);
  for (int to : fr[v]) {
    if (cc[to] < 0) {
      dfs(to, c);
    }
  }
}
int dp[N], newdp[N];
int main() {
  int n, m, w;
  scanf("%d%d%d", &n, &m, &w);
  for (int i = 0; i < n; ++i) {
    scanf("%d", ww + i);
  }
  for (int i = 0; i < n; ++i) {
    scanf("%d", bb + i);
  }
  for (int i = 0; i < m; ++i) {
    int a, b;
    scanf("%d%d", &a, &b);
    --a, --b;
    fr[a].push_back(b);
    fr[b].push_back(a);
  }
  fill(cc, cc + n, -1);
  int c = 0;
  for (int i = 0; i < n; ++i) {
    if (cc[i] < 0) {
      dfs(i, c++);
    }
  }
  for (int i = 0; i < c; ++i) {
    int sumw = 0, sumb = 0;
    for (int g : girls[i]) {
      sumw += ww[g];
      sumb += bb[g];
    }
    ww[n] = sumw;
    bb[n] = sumb;
    girls[i].push_back(n++);
    copy(dp, dp + w + 1, newdp);
    for (int g : girls[i]) {
      for (int x = w; x >= ww[g]; --x) {
        newdp[x] = max(newdp[x], dp[x - ww[g]] + bb[g]);
      }
    }
    copy(newdp, newdp + w + 1, dp);
  }
  cout << *max_element(dp, dp + w + 1) << '\n';
}
