#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#define int 		long long
#define ll          long long
#define pb          push_back
#define mp          make_pair
#define pii         pair<int,int>
#define vi          vector<int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define endl        '\n'
#define rep(i,a,b)	for(int i=a;i<b;i++)
using namespace std;
int ans[500][500][10];
bool isDone[500][500][10][31];
int n;
vi x;
void answer(int dir,int lvl,int startx,int starty){
	if(lvl>=n)return;
	if(isDone[startx][starty][dir][lvl])return;
	isDone[startx][starty][dir][lvl]=1;
	ans[startx][starty][dir]=max(ans[startx][starty][dir],x[lvl]);
	if(dir==2){
		int i=startx;
		int j=starty+x[lvl];
		answer(1,lvl+1,i-1,j);
		answer(3,lvl+1,i+1,j);
	}
	else if(dir==1){
		int i=startx-x[lvl];
		int j=starty+x[lvl];
		answer(2,lvl+1,i+1,j);
		answer(4,lvl+1,i,j-1);	
	}
	else if(dir==3){
		int i=startx+x[lvl];
		int j=starty+x[lvl];
		answer(2,lvl+1,i-1,j);
		answer(6,lvl+1,i,j-1);	
	}
	else if(dir==4){
		int i=startx-x[lvl];
		int j=starty;
		answer(1,lvl+1,i,j+1);
		answer(7,lvl+1,i,j-1);	
	}
	else if(dir==6){
		int i=startx+x[lvl];
		int j=starty;
		answer(3,lvl+1,i,j+1);
		answer(9,lvl+1,i,j-1);	
	}
	else if(dir==8){
		int i=startx;
		int j=starty-x[lvl];
		answer(7,lvl+1,i-1,j);
		answer(9,lvl+1,i+1,j);
	}
	else if(dir==7){
		int i=startx-x[lvl];
		int j=starty-x[lvl];
		answer(8,lvl+1,i+1,j);
		answer(4,lvl+1,i,j+1);	
	}
	else if(dir==9){
		int i=startx+x[lvl];
		int j=starty-x[lvl];
		answer(8,lvl+1,i-1,j);
		answer(6,lvl+1,i,j+1);	
	}
}
pii alpha[10]={{0,0},{-1,1},{0,1},{1,1},{-1,0},{0,0},{1,0},{-1,-1},{0,-1},{1,-1}};
bool anss[500][500];
void solve(){
	cin>>n;
	x.resize(n);
	rep(i,0,n)cin>>x[i];
	answer(2,0,250,250);
	rep(i,0,10){
		if(alpha[i].F or alpha[i].S){
			rep(j,98,404){
				rep(k,98,404){
					int curx=j,cury=k;
					rep(l,0,ans[j][k][i]){
						anss[curx][cury]=1;
						curx+=alpha[i].F;
						cury+=alpha[i].S;
					}
				}
			}
		}
	}
	int finans=0;
	rep(i,0,500){
		rep(j,0,500){
			finans+=anss[i][j];
		}
	}
	cout<<finans;
}

signed main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int t=1;
//	cin>>t;
	while(t--){
		solve();
	}
	return 0;
}