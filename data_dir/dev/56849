#include <bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 1000000007
#define maxn 300005
#define IN freopen("in.txt","r",stdin)
#define OUT freopen("nocross.out","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define ROF(i,a,b) for(i=a ; i>=b ; i--)
#define DBG pf("Hi\n")
#define INF 2000000000000000000LL
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 40000
#define sq(x) ((x)*(x))

// using namespace __gnu_pbds;
using namespace std ;

template <class T>  inline void smax(T &x,T y){ x = max((x), (y)); }
template <class T>  inline void smin(T &x,T y){ x = min((x), (y)); }

// typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

i64 a[maxn] ;

bool can(i64 m , i64 n, i64 k)
{
    if(k==1) return 1 ;

    i64 dp[maxn] ;

    dp[1] = a[1] ;
    i64 ret = 0 , mx = -INF ;
    bool pos = 0 ;

    for(i64 i=2 ; i<=n ; i++)
    {
        if( i-k+1 >= 1 ) mx = max(mx,dp[i-k+1]) ;

     //   printf("%lld\n",mx) ;

        if( (a[i]-mx) <= m )
        {
            pos = 1 ;
            dp[i+1] = a[i+1] ;
        }
        else{
            pos = 0 ;
            dp[i+1] =-INF ;
        }
    }
    return pos ;
}

int main()
{
    i64 i , j , k , l , m , n ;

    scanf("%lld %lld",&n,&k) ;

    for(i=1 ; i<=n ; i++) scanf("%lld",&a[i]) ;

    sort(a+1,a+n+1) ;

    if(k==1){
        printf("0\n") ;
        return 0 ;
    }

  //  printf("%d\n",can(30,5,2)) ;

    i64 lo = 0 , hi = 1000000000LL ;

    while(lo<hi)
    {
        m = (lo+hi)/2 ;

        if( can(m,n,k) == 1 ) hi = m ;
        else lo = m+1 ;
    }

    printf("%lld\n",lo) ;

    return 0 ;
}

