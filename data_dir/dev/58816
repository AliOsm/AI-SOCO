#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds ;
#define ll long long
#define ld long double
#define pp pair<ll,pair<ll,ll> >
#define rep(i,a,b) for(ll i=a;i<b;i+=1)
#define all(c) (c).begin(),(c).end()
#define pb push_back
#define sz(a) int((a).size())
#define hell (ll)1000000007
#define f first
#define s second
#define sll(x) scanf("%lld",&x)
#define si(x) scanf("%d",&x)
typedef tree< ll , null_type , less<ll> , rb_tree_tag , tree_order_statistics_node_update > ordered_set ;
ll t = 1 ;
const ll N = 200005 ;
ll n , ans = hell , cur = 46564656465 ;
vector<ll> v(N+5) , adj[N] , vis(N,0) ;
vector<vector<ll> > anss ;
set<ll> a , b ;
bool check( ll x )
{
    if(x>=1&&x<=n&&a.find(x)!=a.end()&&v[x]==cur)return true; 
    return false;
}
void dfs(ll x )
{
    stack<ll> st ;
    st.push(x);
    while(!st.empty())
    {
        ll y = st.top();
        st.pop();
        if(vis[y]==1)
        {
            continue;
        }
        vis[y]=1;
        v[y]=cur;
        for(auto it : adj[y] )
        {
            if(vis[it]==0){
                if(v[it]!=cur){
                    if(v[y]<v[it])anss.pb({2,it,y});
                    else
                        anss.pb({1,it,y});
                }
                st.push(it);
            }
        }
    }
}
void solve()
{   
    cin >> n ;
    map<ll,ll> mapa ;
    rep( i , 1 , n + 1 )
    {
        cin >> v[i] ;
        mapa[v[i]]++;
        if( ans >= n - mapa[v[i]] )
        {
            ans = n - mapa[v[i]] ;
            cur = v[i] ;
        }
        if(i>1)
            adj[i].pb(i-1);
        if(i<n)
            adj[i].pb(i+1);
    }
    cout << ans << "\n" ;
    rep(i,1,n+1)
    {
        if(v[i]==cur and vis[i] == 0 )
        {
            dfs(i);
        }
    }
    for(auto it : anss)
    cout << it[0] << " " << it[1] << " " << it[2] << "\n" ;
}
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    //freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    //cin>>t;
    while(t--)
        solve() ;
    return 0 ;
}
