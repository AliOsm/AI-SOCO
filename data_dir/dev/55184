
//#include "stdc++.h"
#include<bits/stdc++.h>
#include<iostream>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
using namespace std;
//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//typedef tuple<int, int, int> t3;
typedef long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <ll, int> pli;
typedef pair <db, db> pdd;
typedef vector<int> vi;
#define m1 make_pair
#define pb push_back
#define ff first
#define ss second
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define reset(x,val) memset(x,val,sizeof(x))
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0) return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p; }
#define flush fflush(stdout)
const ll MOD = 1000000007;
const int INF =10000000;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;
int sz[300001];int ct[300001];
int parent[300001];
int gr[300001];
void  dfs(vector<int> adj[],int u,int p)
{
    sz[u]=1;int v;int g=0;
    parent[u]=p;
    for(int i=0;i<adj[u].size();i++)
    {
        v=adj[u][i];
        if(p!=v)
        {
            dfs(adj,v,u);
            g=max(g,sz[v]);
            sz[u]+=sz[v];
        }
    }
    gr[u]=g;
}
bool centroidofsubtree(int u,int v)
{
    int n=sz[u]/2;
    if(gr[v]>n||(sz[u]-sz[v])>n)
        return 0;
    return 1;
}
void centroid(vector<int> adj[],int u,int p)
{
    int n=sz[u]/2,v,mx=-10000,mxi;
    for(int i=0;i<adj[u].size();i++)
    {
        v=adj[u][i];
        if(p!=v)
        {
            centroid(adj,v,u);
            if(sz[v]>mx)
            {
                mx=sz[v];
                mxi=v;
            }
        }
    }
    if(mx<=(n))
        ct[u]=u;
    else
    {
        int c=ct[mxi];
        while(!centroidofsubtree(u,c))
        {
            c=parent[c];
        }
        ct[u]=c;
    }
}

int main()
{
    
    int n,q;
    cin>>n>>q;
    vector<int> adj[n+1];int u,v;
    for(int i=2;i<=n;i++)
    {
        cin>>u;
        adj[u].pb(i);
        adj[i].pb(u);
    }
    dfs(adj,1,0);
    centroid(adj,1,0);
    while(q--)
    {
        cin>>v;
        cout<<ct[v]<<endl;
    }
    return 0;
}
