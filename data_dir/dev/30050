#include <bits/stdc++.h>
using namespace std;

const int MAXN = 100005;
int a[MAXN], fa[MAXN * 2], bel[MAXN][2];
int n, m;

int DSU_GetFather(int k)
{
    return k == fa[k] ? k : (fa[k] = DSU_GetFather(fa[k]));
}

void DSU_MergeSame(int a, int b)
{
    fa[DSU_GetFather(b)] = DSU_GetFather(a);
    fa[DSU_GetFather(b + m)] = DSU_GetFather(a + m);
    return;
}

void DSU_MergeDiff(int a, int b)
{
    fa[DSU_GetFather(b)] = DSU_GetFather(a + m);
    fa[DSU_GetFather(b + m)] = DSU_GetFather(a);
    return;
}

bool InSameSet(int a, int b)
{
    return DSU_GetFather(a) == DSU_GetFather(b) || DSU_GetFather(a + m) == DSU_GetFather(b + m);
}

bool InDiffSet(int a, int b)
{
    return DSU_GetFather(a) == DSU_GetFather(b + m) || DSU_GetFather(a + m) == DSU_GetFather(b);
}

int main()
{
    bool ans = true;

    // freopen("D:\\1.in", "r", stdin);
    // freopen("D:\\1.out", "w", stdout);

    scanf("%d%d", &n, &m);
    for(int i = 1; i <= n; ++i) scanf("%d", &a[i]);
    for(int i = 1; i <= m * 2; ++i) fa[i] = i;
    for(int i = 1, t, j; i <= m; ++i)
    {
        scanf("%d", &t);
        while(t--)
        {
            scanf("%d", &j);
            if(bel[j][0] == 0) bel[j][0] = i;
            else bel[j][1] = i;
        }
    }
    for(int i = 1; i <= n; ++i)
    if(a[i] == 1)
    {
        if(!InDiffSet(bel[i][0], bel[i][1]))
            DSU_MergeSame(bel[i][0], bel[i][1]);
        else
        {
            ans = false;
            break;
        }
    }
    else
    {
        if(!InSameSet(bel[i][0], bel[i][1]))
            DSU_MergeDiff(bel[i][0], bel[i][1]);
        else
        {
            ans = false;
            break;
        }
    }

    printf("%s\n", ans ? "YES" : "NO");

    return 0;
}
