#include <iostream>
#include <set>

using namespace std;

int aa[1000001];

struct S {
	int l, r, a, d;
	S(int l, int r, int n) : l(l), r(r) {
		if (l + 1 == 1 || r - 1 == n) {
			a = l + 1 == 1 ? l + 1 : r - 1;
			d = r - l - 1;
		} else {
			a = (l + r) / 2;
			d = (r - l) / 2;
		}
	}
};

bool compare(S *p, S *q) {
	return p->d != q->d ? q->d < p->d : p->a < q->a;
}

int main() {
	int n, m;

	ios_base::sync_with_stdio(false);
	cin >> n >> m;
	S **ll = new S*[n + 2];
	S **rr = new S*[n + 2];
	set<S*, bool (*)(S*, S*)> pq(compare);
	S *s = new S(0, n + 1, n);
	pq.insert(s);
	while (m-- > 0) {
		int t, id;

		cin >> t >> id;
		if (t == 1) {
			s = *pq.begin();
			int a = s->a;
			aa[id] = a;
			cout << a << '\n';
			S *sl = new S(s->l, a, n);
			S *sr = new S(a, s->r, n);
			ll[a] = rr[s->l] = sl;
			rr[a] = ll[s->r] = sr;
			pq.erase(s); delete s;
			pq.insert(sl);
			pq.insert(sr);
		} else {
			int a = aa[id];
			aa[id] = 0;
			S *sl = ll[a];
			S *sr = rr[a];
			ll[sr->r] = rr[sl->l] = s = new S(sl->l, sr->r, n);
			pq.erase(sl); delete sl;
			pq.erase(sr); delete sr;
			pq.insert(s);
		}
	}
	return 0;
}
