//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

#include <iostream>
#include <stdlib.h>
#include <cmath>
#include <algorithm>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <unordered_map>
#include <random>
#include <assert.h>
#include <memory.h>
#include <time.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)

using namespace std;

inline void setmin(int &x, int y) { if (y < x) x = y; }
inline void setmax(int &x, int y) { if (y > x) x = y; }
inline void setmin(ll &x, ll y) { if (y < x) x = y; }
inline void setmax(ll &x, ll y) { if (y > x) x = y; }

const int N = 1000000;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int P1 = 31;
const int P2 = 57;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const int MOD2 = 998244353;
const double eps = 1e-9;
const double pi = atan2(0, -1);
const int ABC = 26;

ll bin_pow(ll a, ll p) {
    ll res = 1;
    while (p) {
        if (p & 1) {
            res = res * a % MOD;
        }
        a = a * a % MOD;
        p >>= 1;
    }
    return res;
}

ll rev(ll x) {
    return bin_pow(x, MOD - 2);
}

ll fact[N + 1], rfact[N + 1];

void init() {
    fact[0] = 1;
    rep(i, 1, N + 1) {
        fact[i] = fact[i - 1] * i % MOD;
    }
    rfact[N] = rev(fact[N]);
    repb(i, N - 1, -1) {
        rfact[i] = rfact[i + 1] * (i + 1) % MOD;
    }
}

ll A(int n, int k) {
    if (k < 0 || k > n) {
        return 0;
    }
    return fact[n] * rfact[n - k] % MOD;
}

ll C(int n, int k) {
    if (k < 0 || k > n) {
        return 0;
    }
    return fact[n] * rfact[k] % MOD * rfact[n - k] % MOD;
}

ll get(int n, int k) {
    if (k <= 0 || k > n) {
        return 0;
    }
    if (k == n) {
        return 1;
    }
    return k * bin_pow(n, n - k - 1) % MOD;
}

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    cout << fixed;
    //ll TL = 0.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    init();
    int n, m, a, b;
    cin >> n >> m >> a >> b;
    ll ans = 0;
    rep(len, 1, n) {
        if (len > m) {
            continue;
        }
        ll cur = C((m - len) + len - 1, len - 1);
        cur = cur * A(n - 2, len - 1) % MOD;
        if (len + 1 < n) {
            cur = cur * get(n, len + 1) % MOD;
        }
        cur = cur * bin_pow(m, (n - 1) - len) % MOD;
        ans = (ans + cur) % MOD;
    }
    cout << ans << "\n";
    return 0;
}