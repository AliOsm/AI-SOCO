#include<bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
using namespace std;

#define fr first
#define sc second
#define memset(X,Y) memset(X,Y,sizeof X)
#define all(X) X.begin(),X.end()
#define SZ size()
#define mp make_pair
#define pb push_back
#define Pb pop_back

#define error(args...){vector<string> _v = split(#args,','); err(_v.begin(),args); cerr<<endl;}
vector <string> split(const string &s,char c)
{
    vector<string> v;
    stringstream ss(s);
    string x;
    while(getline(ss,x,c))
        v.emplace_back(x);
    return move(v);
}
void err(vector<string>:: iterator it) {}
template<typename T,typename ... Args>
void err(vector<string>::iterator it, T a, Args ... args)
{
    cerr << it->substr((*it)[0] == ' ',it->length())
         << " = " << a <<" " ;
    err(++it,args...);
}
template <typename T>
using order_set = tree<T, null_type, less<T>, rb_tree_tag,
      tree_order_statistics_node_update>;

typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<ll,pii> pl;
typedef vector<int> vi;
typedef vector<ll> vll;
double pi = acos(-1),eps=1e-6;
const ll N = 2 * (20) + 10 , M = 111 , mod=1e9 + 7 , K = 4 * N;
ll OOL = 1e18;
ll OO = 1e9;
ll n,m,k;
ll a[N][M];
map<ll,ll> my[N];
bool valid(int i,int j){
    return i>=0 && i<n && j>=0 && j<m;
}
void go1(int i,int j,ll mask){
    if(!valid(i,j))return;
    mask^=a[i][j];
    if(i+j==m-1){
        my[i][mask]++;
        return;
    }
    go1(i+1,j,mask);
    go1(i,j+1,mask);
}
ll ans;
void go2(int i,int j,ll mask){
    if(!valid(i,j))return;
    if(i+j==m-1){
        auto it = my[i].find(mask^k);
        if(it != my[i].end()){
            ans += it->sc;
        }
        return;
    }
    go2(i-1,j,mask^a[i][j]);
    go2(i,j-1,mask^a[i][j]);
}
int main(){
    cin >> n >> m >> k;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            cin >> a[i][j];
        }
    }
    go1(0,0,0);
    go2(n-1,m-1,0);
    cout <<ans;
}
