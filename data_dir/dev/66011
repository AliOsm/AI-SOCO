#include <bits/stdc++.h>
#define pii pair<int,int>
#define pll pair<ll,ll>
#define fr first
#define sc second
#define ll  long long
#define mp make_pair
#define mod 1000000007

using namespace std;

int n,q;

int dp[3][200200];

void add(int in1,int in,int val){
    in++;
    while(in < 200200){
        dp[in1][in]+=val;
        in += in&(-in);
    }

}

int cal(int in1,int in){
    in++;
    int res = 0;
    while(in > 0){
        res += dp[in1][in];
        in -= in&(-in);
    }
    return res;
}

int cal(int in1,int st,int en){
    if(st > en)return 0;
    return cal(in1,en) - cal(in1,st-1);
}

char s[200100];
int in[10100];
set<int>ind[4];

void solve(){
    int res = n;
    for(int i=0 ;i <3 ;i ++){
        int los = (i+1)%3;
        int ser = (i+2)%3;
        if(ind[ser].size() == 2 && ind[i].size() >2){
            res -= cal(los,1,n);
            continue;
        }
        int st = *(++ind[i].begin());
        int en = (*(++ind[ser].begin())) -1;
        res -= cal(los,st,en);

        st = (*(----ind[ser].end()))+1;
        en = (*(----ind[i].end()));
        res -= cal(los,st,en);
    }
    printf("%d\n",res);
}

int main(){
    cin>>n>>q;
    in['P'] = 0;
    in['R'] = 1;
    in['S'] = 2;

    scanf("%s",s+1);

    for(int i=0 ;i <3; i++){
        ind[i].insert(0);
        ind[i].insert(n+1);
    }

    for(int i=1 ; i<=n ; i++){
        ind[in[s[i]]].insert(i);
        add(in[s[i]],i,1);
    }

    int x;
    solve();
    char c;
    while(q--){
        scanf("%d %c",&x,&c);
        add(in[s[x]],x,-1);
        ind[in[s[x]]].erase(x);
        s[x] = c;
        ind[in[s[x]]].insert(x);
        add(in[s[x]],x,1);
        solve();
    }

    return 0;
}
