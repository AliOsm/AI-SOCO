#pragma GCC optimize ("O3")
#include <bits/stdc++.h>

using namespace std;

#define ENGZ ios::sync_with_stdio(0);cin.tie(0);ios_base::sync_with_stdio(0);
#define sfl2(x, y) scanf("%I64d%I64d" , &x,&y)
#define sfi2(x, y) scanf("%d%d" , &x,&y)
#define sfl(x) scanf("%I64d" , &x)
#define sfi(x) scanf("%d" , &x)
#define sfd(x) scanf("%lf", &x)
#define sfd2(x, y) scanf("%lf%lf", &x, &y)
#define mod 1000000009
#define pi (2*acos(0))
typedef long long ll;
#define endl '\n'

//freopen("cubes.in", "r", stdin);
//freopen("esmElFile.in", "w", stdout);

ll fp(ll x, ll exp)
{
    if(exp == 0)
        return 1;
    if(exp % 2 == 0)
        return fp((x * x) % mod, exp / 2) % mod;
   return (((fp((x * x) % mod, exp / 2)) % mod) * x) % mod;
}

ll gcd(ll a , ll b)
{
    if(b == 0)
        return a;
    return gcd(b, a % b);
}

ll fact[1000006], inv[1000006];

void calcFacAndInv(ll n)
{
    fact[0] = inv[0] = 1;
    for (ll i = 1; i <= n; i++)
        fact[i] = (i * fact[i - 1]) % mod, inv[i] = fp(fact[i], mod - 2);
}

ll ncr(ll n, ll r)
{
    return ((fact[n] * inv[r]) % mod * inv[n - r]) % mod;
}

ll npr(ll n, ll r)
{
    return (fact[n] * inv[n - r]) % mod;
}

vector<bool> prime (10000001, true);
void sieve(int n)
{
    prime[0] = prime[1] = false;
    for (int i = 2; i <= n; i++)
    	for (int j = i * i; j <= n && prime[i] && i * 1ll * i <= n; j += i)
    	    prime[j] = false;
}

int par[200005], rnk[200005];
int findp(int x)
{
    if (par[x] == x)
        return x;
    return par[x] = findp(par[x]);
}

bool iscon(int x, int y)
{
    if (findp(x) == findp(y))
        return true;
    return false;
}

void con(int x, int y)
{
    int px = findp(x), py = findp(y);
    if (rnk[px] > rnk[py])
        par[py] = px;
    else if (rnk[px] < rnk[py])
        par[px] = py;
    else
        par[px] = py, rnk[px]++;
}

double dis(double x, double y)
{
    return sqrt(x * x + y * y);
}

double polygonArea(double x[], double y[], int n)
{
    double area = 0.0;
    int j = n - 1;
    for (int i = 0; i < n; i++)
        area += (x[j] + x[i]) * (y[j] - y[i]), j = i;
    return abs(area / 2.0);
}

void dij()
{
   /* ll x, dis;
    priority_queue<pair<ll, ll>> q;
    q.push({0, 1});
    while (!q.empty())
    {
        x = q.top().second;
        q.pop();
        if (vis[x])
            continue;
        vis[x] = true;
        for (int i = 0; i < v[x].size(); i++)
        {
            dis = v[x][i].second + path[x];
            if (path[v[x][i].first] > dis)
            {
                q.push({dis * -1, v[x][i].first});
                path[v[x][i].first] = dis;
                parent[v[x][i].first] = x;
            }
        }
    }      */
}

int main()
{
    ENGZ
    int n;
    string s, t;
    cin >> n >> s >> t;
    vector<pair<char, char>> v;
    for (int i = 'a'; i <= 'z'; i++)
        par[i] = i;
    for (int i = 0; i < n; i++)
        if (!iscon(s[i], t[i]))
            con(s[i], t[i]), v.push_back({s[i], t[i]});
    cout << v.size();
    for (int i = 0; i < v.size(); i++)
        cout << endl << v[i].first << " " << v[i].second;
    return 0;
}
