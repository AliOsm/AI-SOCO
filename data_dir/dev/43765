#include <bits/stdc++.h>

using namespace std;

const int N = 1e5 + 7, P = 30;

int s[N][P];

int a[N];

int t[4 * N];

void build(int v, int l, int r){
    if(l == r){
        t[v] = a[l];
    }
    else{
        int m = (r + l) / 2;
        build(v * 2 + 1, l, m);
        build(v * 2 + 2, m + 1, r);
        t[v] = t[v * 2 + 1] & t[v * 2 + 2];
    }
}

int get(int v, int l, int r, int tl, int tr){
    if(tl > tr){
        return (1 << P) - 1;
    }
    if(tl == l && tr == r){
        return t[v];
    }
    int m = (r + l) / 2;
    int t1 = get(v * 2 + 1, l, m, tl, min(m, tr));
    int t2 = get(v * 2 + 2, m + 1, r, max(m + 1, tl), tr);
    return t1 & t2;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n, m;
    cin >> n >> m;

    queue < pair < pair < int, int >, int > > q;

    for(int i = 0; i < m; ++i){
        int a, b, c; cin >> a >> b >> c;
        --a; --b;
        q.push({{a, b}, c});
        for(int j = 0; j < P; ++j){
            if(c & (1 << j)){
                s[a][j] += 1;
                s[b + 1][j] -= 1;
            }
        }
    }

    for(int i = 0; i < P; ++i){
        int sum = 0;
        for(int j = 0; j < N; ++j){
            sum += s[j][i];
            if(sum){
                a[j] |= (1 << i);
            }
        }
    }

    build(0, 0, n - 1);
    
    while(q.empty() == false){
        pair < pair < int, int >, int > x = q.front();
        q.pop();
        if(get(0, 0, n - 1, x.first.first, x.first.second) != x.second){
            return cout << "NO", 0;
        }
    }

    cout << "YES" << endl;
    for(int i = 0; i < n; ++i){
        cout << a[i] << ' ';
    }
}