#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
 
using namespace std;
using namespace __gnu_pbds;
 
#define debug(s) cerr << #s << " = " << s << '\n'
#define all(v) (v).begin(), (v).end()
#define mem(a,val) memset(a, val, sizeof a)
 
#define maxn 200010
#define INF 1e15
#define eps 1e-9
#define pi acos(-1.0)
#define ff first
#define ss second
#define endl '\n'
typedef long long ll;
 
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

ordered_set H, V;
int w, h, n;

int main() {
  scanf("%d %d %d", &w, &h, &n);
  H.insert(0);
  H.insert(h);
  V.insert(0);
  V.insert(w);
  set<pair<ll, pair<int, int>>> hh, vv;
  hh.insert({h, {0, h}});
  vv.insert({w, {0, w}});
  for (int i = 1; i <= n; ++i) {
    char c;
    int x;
    scanf(" %c %d", &c, &x);
    if (c == 'H') {
      int id = H.order_of_key(x);
      int l = *H.find_by_order(id - 1);
      int r = *H.find_by_order(id);
      H.insert(x);
      hh.erase({r - l, {l, r}});
      hh.insert({x - l, {l, x}});
      hh.insert({r - x, {x, r}});
      ll ans = (*vv.rbegin()).ff * (*hh.rbegin()).ff;
      printf("%lld\n", ans);
    }
    else {
      int id = V.order_of_key(x);
      int l = *V.find_by_order(id - 1);
      int r = *V.find_by_order(id);
      V.insert(x);
      vv.erase({r - l, {l, r}});
      vv.insert({x - l, {l, x}});
      vv.insert({r - x, {x, r}});
      ll ans = (*vv.rbegin()).ff * (*hh.rbegin()).ff;
      printf("%lld\n", ans);
    }
  }
}