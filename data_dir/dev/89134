#include <string>
#include <sstream>
#include <cstring>
#include <sstream>
#include <vector>
#include <algorithm>
#include <iostream>
#include <stdio.h>
#include <fstream>
#include <ctime>
#include <cmath>
#include <math.h>
#include <set>
#include <map>
#include <list>
#include <iomanip>
#include <cstdio>
#include <algorithm>
#include <unordered_map>
#include <queue>
using namespace std;

#define pp system("pause");
#define ct double ttme = clock()
#define p_ct cout << (clock() - ttme) / CLOCKS_PER_SEC << endl
#define all(c) (c).begin(),(c).end()
#define fft ifstream fin("input.txt"); ofstream fout("output.txt")
#define fft_c FILE *fin, *fout
#define fft_c_open fin = fopen("input.txt","r"); fout = fopen("output.txt","w")
#define fft_c_cl fclose(fin); fclose(fout)
#define pii pair<int,int>
#define mp(a,b) make_pair((a),(b))
#define pff pair<float,float>
#define piii pair<int,pair<int,int>>
#define pss pair<string, string>
#define M_PI 3.14159265358979323846
#define mem0(m) memset((m), 0, sizeof(m));
#define memb(m) memset((m), false, sizeof(m));
#define memi(m) memset((m), 0, sizeof(m));
#define rep(i,n) for(i = 0; i < (int)(n); i++)
#define repi(a, n) for(int i = a; i < (int)(n); i++)
#define repp(i, a, n) for(int (i) = a; (i) < (int)(n); (i)++)
typedef unsigned long long ull;
typedef signed long long ll;
const int INF = 1e8;
const int DEL = 687134561;
const long long MODULO = 1e9 + 7;
const int MAX = 1e7;
const int des = 10000;


queue<pii> q;
int used[1000][1000];
int mass[1000][1000];

void check(int x, int y) {
    if(mass[x][y] >= 4) {
        mass[x - 1][y] += mass[x][y] / 4;
        mass[x + 1][y] += mass[x][y] / 4;
        mass[x][y - 1] += mass[x][y] / 4;
        mass[x][y + 1] += mass[x][y] / 4;
        mass[x][y] = mass[x][y] % 4;

        if(mass[x - 1][y] >= 4 && used[x - 1][y] == 0) {
            used[x - 1][y]++;
            q.push(mp(x - 1, y));
        }

        if(mass[x + 1][y] >= 4 && used[x + 1][y] == 0) {
            used[x + 1][y]++;
            q.push(mp(x + 1, y));
        }

        if(mass[x][y - 1] >= 4 && used[x][y - 1] == 0) {
            used[x][y - 1]++;
            q.push(mp(x, y - 1));
        }

        if(mass[x][y + 1] >= 4 && used[x][y + 1] == 0) {
            used[x][y + 1]++;
            q.push(mp(x, y + 1));
        }
    }

    used[x][y]--;
}

int main()
{
    memset(mass, 0, sizeof(mass));
    memset(used, 0, sizeof(used));
    scanf("%d", &mass[500][500]);

    used[500][500]++;
    q.push(mp(500, 500));

    while(q.size() > 0) {
        check(q.front().first, q.front().second);
        q.pop();
    }

    int t;
    scanf("%d", &t);

    for(int i = 0; i < t; i++) {
        int a, b;
        scanf("%d%d", &a, &b);

        a += 500;
        b += 500;

        if(a < 0 || a >= 1000 || b < 0 || b >= 1000) {
            printf("0\n");
            continue;
        }

        printf("%d\n", mass[a][b]);
    }
}
