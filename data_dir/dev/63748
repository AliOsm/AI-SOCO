#include<bits/stdc++.h>

using namespace std;

const int N = 2e6 + 8, MOD = 1e9 + 7;
const long long INF = 2e16;

#define ss second
#define ff first
#define int long long
#define double long double

using vi = vector <int>;
using vp = vector <pair <long long, long long>>;

mt19937 Flash_new_51(515151);


int pref[2500][2500],pref1[2500][2500], sum[N], kolone[2500][2500], kolone1[2500][2500], sum1[N];
char c[2500][2500];

signed main() {
    cin.tie(0);
    ios_base::sync_with_stdio(0);
    string s, s1;
    int n, k;
    cin >> n >> k;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) cin >> c[i][j];
    }
    for (int j = 1; j <= n; j++) {
        for (int i = 1; i <= n; i++) {
            if (c[i][j] == 'B') pref[i][j]++, sum[j]++;
            pref[i][j]+= pref[i - 1][j];
        }
    }
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (c[i][j] == 'B') pref1[i][j]++, sum1[i]++;
            pref1[i][j]+= pref1[i][j - 1];
        }
    }

    int kol = 0;
    for (int i = 1; i <= n; i++) if (!sum[i]) kol++;
    for (int i = 1; i <= n; i++) if (!sum1[i]) kol++;


    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (i + k - 1 <= n) {
                int o = pref[i + k - 1][j] - pref[i - 1][j];
                if (o == sum[j] && o != 0) {
                    kolone[i][j]++;
                }
                kolone[i][j]+= kolone[i][j - 1];

            }
                if (j + k - 1 <= n) {
                    int o = pref1[i][j + k - 1] - pref1[i][j - 1];
                    if (o == sum1[i] && o != 0) kolone1[i][j]++;
                    kolone1[i][j]+= kolone1[i - 1][j];
                }
        }
    }
    int ans = kol;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
             if (j + k  - 1 <= n && i + k - 1 <= n) {
                int kek = kolone[i][j + k - 1] - kolone[i][j - 1];
                kek+= kolone1[i + k - 1][j] - kolone1[i - 1][j] + kol;
                ans = max(ans, kek);
             }
        }
    }
    cout << ans;

}
