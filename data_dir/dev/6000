#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

struct Point {
	ll x, y;
};
Point operator+ (Point a, Point b) {
	a.x += b.x;
	a.y += b.y;
	return a;
}
Point operator- (Point a, Point b) {
	a.x -= b.x;
	a.y -= b.y;
	return a;
}
bool operator< (Point a, Point b) {
	if (a.x == b.x) return a.y < b.y;
	return a.x < b.x;
}
long long cp(Point a, Point b) {
	return a.x * b.y - a.y * b.x;
}

vector<Point> Read() {
	vector<Point> A;
	int n;
	ignore = scanf("%d", &n);
	
	int j = -1;
	
	for (int i = 0; i < n; i++) {
		int x, y;
		ignore = scanf("%d %d", &x, &y);
		Point p = {x, y};

		if (i == 0 || p < A[j]) {
			j = i;
		}
		
		A.push_back(p);
	}
	
	vector<Point> res;
	
	for (int i = j; i >= 0; i--) res.push_back(A[i]);
	for (int i = n - 1; i > j; i--) res.push_back(A[i]);
	
	return res;
}

vector<Point> minkowski(const vector<Point>& A, const vector<Point>& B) {
	vector<Point> res;
	res.push_back(A[0] + B[0]);
	
	int i = 0, j = 0;
	
	while (i < (int)A.size() && j < (int)B.size()) {
		Point a = (i == (int)A.size() - 1 ? A[0] : A[i + 1]) - A[i];
		Point b = (j == (int)B.size() - 1 ? B[0] : B[j + 1]) - B[j];

		if (cp(a, b) <= 0) {
			res.push_back(res.back() + a);
			i++;
		}
		else {
			res.push_back(res.back() + b);
			j++;
		}
	}
	while (i + 1 < (int)A.size()) {
		Point a = A[i + 1] - A[i];
		res.push_back(res.back() + a);
		i++;
	}
	while (j + 1 < (int)B.size()) {
		Point b = B[j + 1] - B[j];
		res.push_back(res.back() + b);
		j++;
	}
	return res;
}

vector<Point> normalize(vector<Point> v) {
	while (v.size() >= 3 && cp(v.back() - v[0], v[v.size()-2] - v[0]) == 0) {
		v.pop_back();
	}
	
	vector<Point> res;
	for (Point p : v) {
		while (res.size() >= 2 && cp(res.back() - res[res.size()-2], p - res.back()) == 0) {
			res.pop_back();
		}
		res.push_back(p);
	}
	return res;
}

int main()
{
	vector<Point> S;
	
	{
		vector<Point> A, B, C;
		A = Read();
		B = Read();
		C = Read();

		S = minkowski(A, B);	
		S = minkowski(S, C);
		S = normalize(S);
	}

	int q;
	ignore = scanf("%d", &q);
	while (q--) {
		Point p;
		{
			int x, y;
			ignore = scanf("%d %d", &x, &y);
			p = {x, y};
		}
		p.x *= 3;
		p.y *= 3;
		
		if (cp(S[1] - S[0], p - S[0]) > 0 || cp(S.back() - S[0], p - S[0]) < 0) {
			printf("NO\n");
			continue;
		}
		
		int L = 1, R = (int)S.size() - 2;
		int B = -1;
		
		while (L <= R) {
			int M = (L + R) / 2;
			if (cp(S[M] - S[0], p - S[0]) <= 0) {
				B = M;
				L = M + 1;
			}
			else {
				R = M - 1;
			}
		}
		
		
		
		if (cp(p - S[B], S[(B+1) % S.size()] - S[B]) >= 0) {
			printf("YES\n");
		}
		else {
			printf("NO\n");
		}
	}
}
