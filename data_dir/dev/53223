#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include <bits/stdc++.h>
using namespace std;

const int N = 1e5+5;
vector<int> adj[N];
int degree[N];
bool visited[N];
bool color[N];

bool dfs(int node) {
    visited[node] = true;
    for(int to : adj[node]) {
        if(visited[to]) {
            if(color[to] == color[node]) {
                return true;
            }
            continue;
        }
        color[to] = !color[node];
        if(dfs(to)) return true;
    }
    return false;
}

vector<int> currNodes;

void dfs2(int node) {
    currNodes.push_back(node);
    visited[node] = true;
    for(int to : adj[node]) {
        if(visited[to]) {
            assert(color[to] != color[node]);
            continue;
        }
        color[to] = !color[node];
        dfs2(to);
    }
}

signed main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int n,m;
    cin >> n >> m;
    for(int i=0;i<m;++i){
        int u,v;
        cin >> u >> v;
        ++degree[u];
        ++degree[v];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    bool oddCycle = false;
    for(int i=1;i<=n;++i){
        if(visited[i]) continue;
        oddCycle |= dfs(i);
    }
    if(oddCycle) {
        cout << "0 1";
        return 0;
    }
    if(m == 0) {
        cout << 3 << " " << 1LL*n*(n-1)*(n-2)/6;
        return 0;
    }
    int mxDegree = 0;
    for(int i=1;i<=n;++i){
        mxDegree = max(mxDegree, degree[i]);
    }
    if(mxDegree == 1) {
        cout << 2 << " " << 1LL*m*(n-2);
        return 0;
    }





    for(int i=1;i<=n;++i){
        visited[i] = false;
    }
    long long res = 0;
    for(int i=1;i<=n;++i){
        if(visited[i]) continue;
        currNodes.clear();
        dfs2(i);
        int Left = 0;
        int Right = 0;
        for(int node : currNodes) {
            if(color[node]) ++Left;
            else ++Right;
        }
        res += Left * 1LL * (Left-1)/2LL + Right * 1LL * (Right-1)/2LL;
    }
    cout << "1 " << res;
}
