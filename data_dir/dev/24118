#include <cstdio>

#include <cmath>

#include <cstring>

#include <iostream>

#include <algorithm>

#include <queue>

#include <vector>

#include <map>



using namespace std;



typedef long long LL;



const int mod=1e9+7;


int n,m,aa[100005];
struct Node
{
	LL a[3];
	LL bj[3][3];
}tree[500005];	
LL ans[3][3],a[3][3],dq[3][3],now[3][3];
int t,l,r,w;
void work(int w,Node &ss)
{
	ans[1][1]=1;ans[2][2]=1;
	ans[1][2]=0;ans[2][1]=0;
	a[1][1]=0;a[1][2]=1;
	a[2][1]=1;a[2][2]=1;
	while (w)
	{
		if (w%2==1)
		{
			for (int i=1;i<=2;++i)
				for (int j=1;j<=2;++j) dq[i][j]=0;
			for (int i=1;i<=2;++i)
				for (int j=1;j<=2;++j)
					for (int k=1;k<=2;++k) dq[i][j]+=ans[i][k]*a[k][j]%mod,dq[i][j]%=mod;
			for (int i=1;i<=2;++i)
				for (int j=1;j<=2;++j) ans[i][j]=dq[i][j];
		}
		for (int i=1;i<=2;++i)
				for (int j=1;j<=2;++j) dq[i][j]=0;
		for (int i=1;i<=2;++i)
			for (int j=1;j<=2;++j)
				for (int k=1;k<=2;++k) dq[i][j]+=a[i][k]*a[k][j]%mod,dq[i][j]%=mod;
		for (int i=1;i<=2;++i)
			for (int j=1;j<=2;++j) a[i][j]=dq[i][j];
		w/=2;
	}
	ss.a[1]=ans[2][1];
	ss.a[2]=ans[2][2];
}
void build(int x,int l,int r)
{
	tree[x].a[1]=0;tree[x].a[2]=0;
	tree[x].bj[1][1]=tree[x].bj[2][2]=1;
	tree[x].bj[1][2]=tree[x].bj[2][1]=0;
	if (l==r)
	{
		work(aa[l],tree[x]);
		return;
	}
	int mid=(l+r)/2;
	build(x*2,l,mid);
	build(x*2+1,mid+1,r);
	tree[x].a[1]=(tree[x*2].a[1]+tree[x*2+1].a[1])%mod;
	tree[x].a[2]=(tree[x*2].a[2]+tree[x*2+1].a[2])%mod;
}
void down(int x)
{
	if (tree[x].bj[1][1]==1&&tree[x].bj[1][2]==0&&tree[x].bj[2][1]==0&&tree[x].bj[2][2]==1) return;
	memset(dq,0,sizeof(dq));
	LL dq1,dq2;
	dq1=tree[x*2].a[1]*tree[x].bj[1][1]%mod+tree[x*2].a[2]*tree[x].bj[2][1]%mod;
	dq1%=mod;
	dq2=tree[x*2].a[1]*tree[x].bj[1][2]%mod+tree[x*2].a[2]*tree[x].bj[2][2]%mod;
	dq2%=mod;
	tree[2*x].a[1]=dq1;tree[2*x].a[2]=dq2;
	memset(dq,0,sizeof(dq));
	for (int i=1;i<=2;++i)
			for (int j=1;j<=2;++j)
				for (int k=1;k<=2;++k)
				{
					dq[i][j]+=tree[x*2].bj[i][k]*tree[x].bj[k][j]%mod,dq[i][j]%=mod;
				}
		for (int i=1;i<=2;++i)
			for (int j=1;j<=2;++j) tree[2*x].bj[i][j]=dq[i][j];
	dq1=tree[x*2+1].a[1]*tree[x].bj[1][1]%mod+tree[x*2+1].a[2]*tree[x].bj[2][1]%mod;
	dq1%=mod;
	dq2=tree[x*2+1].a[1]*tree[x].bj[1][2]%mod+tree[x*2+1].a[2]*tree[x].bj[2][2]%mod;
	dq2%=mod;
	tree[2*x+1].a[1]=dq1;tree[2*x+1].a[2]=dq2;
	memset(dq,0,sizeof(dq));
	for (int i=1;i<=2;++i)
			for (int j=1;j<=2;++j)
				for (int k=1;k<=2;++k)
				{
					dq[i][j]+=tree[x*2+1].bj[i][k]*tree[x].bj[k][j]%mod,dq[i][j]%=mod;
				}
		for (int i=1;i<=2;++i)
			for (int j=1;j<=2;++j) tree[2*x+1].bj[i][j]=dq[i][j];
	tree[x].bj[1][1]=tree[x].bj[2][2]=1;
	tree[x].bj[1][2]=tree[x].bj[2][1]=0;
}
void change(int x,int l,int r,int ll,int rr)
{
	if (l==ll&&rr==r)
	{
		LL dq1,dq2;
		dq1=tree[x].a[1]*now[1][1]%mod+tree[x].a[2]*now[2][1]%mod;
		dq1%=mod;
		dq2=tree[x].a[1]*now[1][2]%mod+tree[x].a[2]*now[2][2]%mod;
		dq2%=mod;
		tree[x].a[1]=dq1;
		tree[x].a[2]=dq2;
		memset(dq,0,sizeof(dq));
		for (int i=1;i<=2;++i)
			for (int j=1;j<=2;++j)
				for (int k=1;k<=2;++k)
				{
					dq[i][j]+=tree[x].bj[i][k]*now[k][j]%mod,dq[i][j]%=mod;
				}
		for (int i=1;i<=2;++i)
			for (int j=1;j<=2;++j) tree[x].bj[i][j]=dq[i][j];
		return;
	}
	int mid=(l+r)/2;
	down(x);
	if (rr<=mid) change(x*2,l,mid,ll,rr);
	else if (ll>=mid+1) change(x*2+1,mid+1,r,ll,rr);
	else 
	{
		change(x*2,l,mid,ll,mid);
		change(x*2+1,mid+1,r,mid+1,rr);
	}
	tree[x].a[1]=(tree[x*2].a[1]+tree[x*2+1].a[1])%mod;
	tree[x].a[2]=(tree[x*2].a[2]+tree[x*2+1].a[2])%mod;
}
LL query(int x,int l,int r,int ll,int rr)
{
	if (l==ll&&r==rr) return tree[x].a[1];
	int mid=(l+r)/2;
	down(x);
	if (rr<=mid) return query(x*2,l,mid,ll,rr);
	else if (ll>=mid+1) return query(x*2+1,mid+1,r,ll,rr);
	else return (query(x*2,l,mid,ll,mid)+query(x*2+1,mid+1,r,mid+1,rr))%mod;
}
int main()
{
	scanf("%d%d",&n,&m);
	for (int i=1;i<=n;++i) scanf("%d",&aa[i]);
	build(1,1,n);
	while (m--)
	{
		scanf("%d",&t);
		if (t==2)
		{
			scanf("%d%d",&l,&r);
			LL ans1=query(1,1,n,l,r);
			printf("%I64d\n",ans1);
		}
		else
		{
			scanf("%d%d%d",&l,&r,&w);
			ans[1][1]=1;ans[2][2]=1;
			ans[1][2]=0;ans[2][1]=0;
			a[1][1]=0;a[1][2]=1;
			a[2][1]=1;a[2][2]=1;
			while (w)
			{
				if (w%2==1)
				{
					for (int i=1;i<=2;++i)
						for (int j=1;j<=2;++j) dq[i][j]=0;
					for (int i=1;i<=2;++i)
						for (int j=1;j<=2;++j)
							for (int k=1;k<=2;++k) dq[i][j]+=ans[i][k]*a[k][j]%mod,dq[i][j]%=mod;
					for (int i=1;i<=2;++i)
						for (int j=1;j<=2;++j) ans[i][j]=dq[i][j];
				}
				for (int i=1;i<=2;++i)
						for (int j=1;j<=2;++j) dq[i][j]=0;
				for (int i=1;i<=2;++i)
					for (int j=1;j<=2;++j)
						for (int k=1;k<=2;++k) dq[i][j]+=a[i][k]*a[k][j]%mod,dq[i][j]%=mod;
				for (int i=1;i<=2;++i)
					for (int j=1;j<=2;++j) a[i][j]=dq[i][j];
				w/=2;
			}
			for (int i=1;i<=2;++i)
				for (int j=1;j<=2;++j) now[i][j]=ans[i][j];
			change(1,1,n,l,r);
		}
	}
	return 0;

}