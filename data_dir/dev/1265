//**KEEP IT SHORT AND SIMPLE**
#include <bits/stdc++.h>
#define IO ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define FILES freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#define REP(i,a,b) for (int i = a; i < b; i++)
#define NL '\n'
#define F first
#define S second
#define dot(a, b) (conj(a) * (b)).real()
#define cross(a, b) (conj(a)* (b)).imag()
using namespace std;
typedef long long ll;
typedef long double ld;
typedef bool bl;
typedef vector < vector<long long> > vvl;
typedef vector <long long> vll;
typedef pair <long long, long long> pll;
typedef map <long long, long long> mll;
typedef map <long long, bool> mlb;
typedef priority_queue<long long, vector<long long>, greater<long long> > minPq;
typedef tuple<ll, ll, ll> line;
typedef complex<double> point;
const double pi = 2 * acos(0.0);
const int OO = 0x3f3f3f3f;
const int blcSz = 450, N = 200005, M = 1000005;
ll n, t;
struct Query
{
    ll l, r, idx, blc;
    Query(){}
    Query(int _l, int _r, int _idx)
    {
        l = _l - 1;
        r = _r - 1;
        idx = _idx;
        blc = _l / blcSz;
    }
    bool operator <(const Query &y) const
    {
        if(blc != y.blc)
            return blc < y.blc;
        return r < y.r;
    }
};
ll arr[N], frq[M], out[N], ans;
Query qur[N];
void Add(ll a)
{
    a = arr[a];
    ans -= frq[a] * frq[a] * a;
    frq[a]++;
    ans += frq[a] * frq[a] * a;
}
void Remove(ll a)
{
    a = arr[a];
    ans -= frq[a] * frq[a] * a;
    frq[a]--;
    ans += frq[a] * frq[a] * a;
}
void proccess()
{
    sort(qur, qur + t);
    ll curL = 1, curR = 0;
    REP(i, 0, t)
    {
        while(curL < qur[i].l)  Remove(curL++);
        while(curL > qur[i].l)  Add(--curL);
        while(curR < qur[i].r)  Add(++curR);
        while(curR > qur[i].r)  Remove(curR--);
        out[qur[i].idx] = ans;
    }
}
int main()
{
    IO
    ll l, r;
    cin >> n >> t;
    REP(i, 0, n)
        cin >> arr[i];
    REP(i, 0, t)
    {
        cin >> l >> r;
        qur[i] = Query(l, r, i);
    }
    proccess();
    REP(i, 0, t)
        cout << out[i] << NL;
    return 0;
}
