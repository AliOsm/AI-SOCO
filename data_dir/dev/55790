//const int N = 3e5+5;
//ll sum[N],cnt[N];
//ll fget(ll ftree[], int x){
//    ll ans = 0;
//    for(int i = x; i > 0; i -= i&(-i))
//        ans += ftree[i];
//    return ans;
//}
//void fadd(ll ftree[], int x, int v){
//    for(int i = x; i < N; i += i&(-i))
//        ftree[x] += v;
//}
//int n,m;
//bool solve(vi arr, int k){
//    int v = 0;
//    for(int x : arr){
//        if(x+k < v)
//            return false;
//        if(x+k >= v+m) continue;
//        if(x > v){
//            v = x;
//            continue;
//        }
//    }
//    return true;
//}
//void _(){
//    cin >> n >> m;
//    vi arr(n);
//    cin >> arr;
//    int lo = 0, hi = m , mid;
//    while(lo < hi){
//        mid = (lo+hi)/2;
//        if(solve(arr,mid))
//            hi = mid;
//        else
//            lo = mid+1;
//    }
//    print(lo);
//
//}
//
#include <iomanip>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define all(v) (v).begin(), (v).end()
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<int> vi;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
T1 istream& operator>>(istream& stream, vector<T>& t){
    return read(all(t), stream);
}
T1 istream& read(T b, T e, istream& stream){
    for(T it = b; it != e; ++it)
        stream >> *it;
    return stream;
}
T1 void print(T x, string end = "\n"){
    cout << x << end;
}
const int N = 3e5+5;
ll sum[N],cnt[N];
ll fget(ll ftree[], int x){
    ll ans = 0;
    for(int i = x; i > 0; i -= i&(-i))
        ans += ftree[i];
    return ans;
}
void fadd(ll ftree[], int x, int v){
    for(int i = x; i < N; i += i&(-i))
        ftree[x] += v;
}
int n,m;
bool solve(vi arr, int k){
    int v = 0;
    for(int x : arr){
        if(x+k < v)
            return false;
        if(x+k >= v+m) continue;
        if(x > v){
            v = x;
            continue;
        }
    }
    return true;
}
void _(){
    cin >> n >> m;
    vi arr(n);
    cin >> arr;
    int lo = 0, hi = m , mid;
    while(lo < hi){
        mid = (lo+hi)/2;
        if(solve(arr,mid))
            hi = mid;
        else
            lo = mid+1;
    }
    print(lo);
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        _();
}
