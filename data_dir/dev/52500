//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
typedef long long ll;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e3 + 5;
const double eps = 1e-9;
using namespace std;
int a[10];
ll fac[MAXN], dp[MAXN][10];

ll bin_pow(ll x, ll y)
{
    ll r = 1;
    while (y)
    {
        if (y & 1)
            r = (r * x) % MOD;
        x = (x * x) % MOD;
        y /= 2;
    }
    return r;
}

ll ncr(int n, int k)
{
    return (fac[n] * bin_pow(fac[k], MOD - 2) % MOD) * bin_pow(fac[n - k], MOD - 2) % MOD;
}

int main()
{
    int n;
    ni(n);
    nai(a, 10);
    fac[0] = 1;
    for (ll i = 1; i <= 100; i++)
        fac[i] = fac[i - 1] * i % MOD;
    ll s = 0;
    for (int i = 0; i < 10; i++)
        s += a[i];
    if (s > n)
        return !pri(0);
    for (int i = 9; i >= 0; i--)
    {
        for (int j = 0; j <= n; j++)
        {
            if (i == 9 && j < a[9])
                dp[j][i] = 0;
            else if (i == 9)
                dp[j][i] = 1;
            else if (i == 0)
            {
                for (int k = a[i]; k <= j; k++)
                    dp[j][i] = (dp[j][i] + dp[j - k][i + 1] * ncr(j - 1, k) % MOD) % MOD;
            }
            else
            {
                for (int k = a[i]; k <= j; k++)
                    dp[j][i] = (dp[j][i] + dp[j - k][i + 1] * ncr(j, k) % MOD) % MOD;
            }
        }
    }
    ll ans = 0;
    for (int i = 1; i <= n; i++)
        ans = (ans + dp[i][0]) % MOD;
    prl(ans);
    return 0;
}
