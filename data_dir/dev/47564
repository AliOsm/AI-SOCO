#include <bits/stdc++.h>

using namespace std;

#define MOD 1000000007
#define ll long long int
#define ld long double
#define pb push_back
#define mkp make_pair
#define pii pair<int, int> 
#define pll pair<long long int, long long int>
#define sci(x) scanf("%d", &x)
#define scl(x) scanf("%lld", &x)
#define fi first
#define sc second
#define deb 0

struct node {
	int sz;
	node *C[2];
};

int mask_;
int ms[20];

node *new_node()
{
	node *tmp = new node;
	tmp->C[0] = tmp->C[1] = NULL;
	tmp->sz = 0;

	return tmp;
}

void insert(node *root, int x)
{
	for (int i = 20; i >= 0; --i) {
		//cout << i << endl;
		if (x&(1<<i)) {
			if (root->C[1] == NULL) {
				root->C[1] = new_node();
			}
			root = root->C[1];
		} else {
			if (root->C[0] == NULL) {
				root->C[0] = new_node();
			}
			root = root->C[0];
		}
	}
}

void make(node *root)
{
	if (root == NULL) return;
	
	if (root->C[0] == NULL && root->C[1] == NULL) {
		root->sz = 1;
		return;
	}

	make(root->C[0]);
	make(root->C[1]);

	int sz = 0;
	if (root->C[0]) sz += root->C[0]->sz;
	if (root->C[1]) sz += root->C[1]->sz;
	root->sz = 1 + sz;
}

int query(node *root, int mask_)
{
	int ans = 0;
	for (int i = 20; i >= 0; --i) {
		int lsz = 0;
		int rsz = 0;
		if (!root->C[0]) root->C[0] = new_node();
		if (!root->C[1]) root->C[1] = new_node();

		if (root->C[1]) rsz = root->C[1]->sz;
		if (root->C[0]) lsz = root->C[0]->sz;
                
                if (mask_&(1<<i)) {
			if (rsz < ms[i]) {
				root = root->C[1];
			} else {
				ans |= (1<<i);
				root = root->C[0];
			}
		} else {
			if (lsz < ms[i]) {
				root = root->C[0];
			} else {
				ans |= (1<<i);
				root = root->C[1];
			}
		}
	}

	return ans;
}

int main()
{
	ios_base::sync_with_stdio(false);cout.tie(0);cin.tie(0);

	int n, q, i, j, k, x, y, z, a, b, c;
	node *root = new_node();

	cin >> n >> q;

	a = 1;
	for (i = 0; i <= 20; ++i) {
		ms[i] = 2 * a - 1;
		a = 2 * a;
	}

	for (i = 0; i < n; ++i) {
		cin >> x;
		insert(root, x);
	}
	make(root);

        int mask = 0;
	while (q--) {
		cin >> x;
		//cout << mask_ << " " << x << endl;
		mask ^= x;
		cout << query(root, mask) << endl;
	}

	return 0;
}