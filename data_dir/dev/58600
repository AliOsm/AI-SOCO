#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <map>
#include <iterator>
#include <queue>
#include <list>
#include <stack>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef list < int > :: iterator IteratorList;

const int NMax = 100004;
const ll INF = (ll) (1e18);
const int cntTree = 2 * 262145;
const double eps = 1e-9;
const double PI = 3.141592653589793238462;
const int MD = (int) 1e9 + 7;

#define MIN(x,y) ((x) > (y) ? (y) : (x))
#define MAX(x,y) ((x) > (y) ? (x) : (y))
#define SQR(x) ((x) * (x))
#define ABS(x) ((x) < (0) ? (-(x)) : (x))
#define SZ(x) (int) (x).size()

struct T
{
    ll key;
    int pos;
    bool operator < (const T &a) const
    {
        return (key < a.key);
    }
};

T a[NMax];
ll b[NMax], s[NMax], ans[NMax];
int k = 0, n;



int main()
{

    cin >> n;
    for (int i = 1;i <= n;i++)
    {
        scanf("%I64d", &a[i].key);
        b[i] = a[i].key;
        a[i].pos = i;
    }
    s[0] = 0;
    for (int i = 1;i <= n;i++)
        if (a[i].key >= 0) s[i] = s[i - 1] + a[i].key;
        else s[i] = s[i - 1];
    sort(a + 1,a + n + 1);
    //for (int i = 1;i <= n;i++) cout << a[i].pos << " " << a[i].key << endl;
    ll sumMax = -INF;
    int L = a[1].pos, R = a[1].pos, L1 = 0, R1 = 0;
    a[n + 1].key = INF;a[n + 1].pos = 0;
    for (int i = 2;i <= n + 1;i++)
    {
        if (a[i - 1].key == a[i].key)
        {
            L = MIN(L,a[i].pos);
            R = MAX(R,a[i].pos);
        }
        else
        {
            ll tmp = s[R] - s[L - 1];
            if (b[R] < 0) tmp += b[R];
            if (b[L] < 0) tmp += b[L];
            if (L != R && sumMax < tmp)
            {
                sumMax = tmp;
                L1 = L;
                R1 = R;
            }
            L = a[i].pos;
            R = a[i].pos;
        }
    }
    cout << sumMax << " ";
    for (int i = 1;i < L1;i++) ans[++k] = i;
    for (int i = L1 + 1;i < R1;i++)
        if (b[i] < 0) ans[++k] = i;
    for (int i = R1 + 1;i <= n;i++) ans[++k] = i;
    cout << k << endl;
    for (int i = 1;i <= k;i++) cout << ans[i] << " ";
    return 0;
}
