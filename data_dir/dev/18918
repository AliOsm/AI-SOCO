#include <algorithm>
#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <set>
#include <map>
using namespace std;

#define F first
#define S second
#define P_B push_back
#define size(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define FR(i, a, b) for(int i = a; i < b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define debug(x) cerr<< #x << ": " << x << endl;
#define fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);

typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

//const int mod = 1000 * 1000 * 1000 + 7;
const int MAXN = 1000 * 100 + 10;
int val[MAXN], r[MAXN], l[MAXN];
bool mark[MAXN];
map <int, pair< bool, int> > mp;

void dfs(int v, int a, int b)
{
	if(a <= val[v] && val[v] <= b)
		mp[val[v]].F = true;

	if(l[v] >= 0)
		dfs(l[v], a, min(val[v], b));
	if(r[v] >= 0)
		dfs(r[v], max(a, val[v]), b); 
}

int main()
{
	int n;
	cin>> n;
	FR(i, 0, n)
	{
		cin>> val[i] >> l[i] >> r[i];
		mp[val[i]].F = false;
		mp[val[i]].S++;
		l[i]--, r[i]--;
		if(r[i] >= 0)
			mark[r[i]] = true;
		if(l[i] >= 0)
			mark[l[i]] = true;
	}

	int root = 0;
	FR(i, 0, n)
		if(!mark[i])
			root = i;
	
	dfs(root, 0, 1000 * 1000 * 1000);

	int ans = 0;
	for(auto x: mp)
		ans += (1 - x.S.F) * x.S.S;
	
	cout<< ans << endl;
	return 0;
}

