#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
#include <bitset>
#include <complex>
using namespace std;
#define rep(i, n) for (int (i) = 0; (i) < (n); (i) ++)
#define rep1(i, n) for (int (i) = 1; (i) <= (n); (i) ++)
#define FOR(i, a, b) for (int (i) = (a); (i) <= (b); (i)++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout<<#a<<" :";FOR(i123,x,y)cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int((x).size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = 3e6;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;
//
const int VH = 0;
const int DIAGONAL = 1;
const int KNIGHT = 2;
int dx[8] = {1, -1, 1, -1, 2, -2, -2, 2};
int dy[8] = {2, 2, -2, -2, 1, -1, 1, -1};
int N, X[500], Y[500];

class ShortestPathWeightedGraph {
private:
  int N;
  vector<vector<pair<int,long long> > > adj;
  vector<long long> dist;
public:
  // Creates a graph with N nodes where each node is numbered
  // from 0 to N - 1.
  ShortestPathWeightedGraph(int N)
  {
    this->N = N;
    adj.resize(N);
  }
  // Add an edge from u to v with the specified weight.
  void add(int u, int v, long long weight)
  {
    adj[u].push_back(make_pair(v, weight));
  }
  // Find the distance from u to v.
  int shortest(int u, int v)
  {
    dist.resize(N);
    fill(dist.begin(), dist.end(), -1);
    priority_queue<pair<long long, int> > q;
    q.push(make_pair(0, u));
    dist[u] = 0;
    while (!q.empty())
    {
      int cur = q.top().second;
      if (cur == v) return dist[cur];
      ll distcur = q.top().first;
      q.pop();
      if (dist[cur] < distcur) continue;
      for (int i = 0; i < adj[cur].size(); i++)
      {
        int nxt = adj[cur][i].first;
        long long weight = adj[cur][i].second;
        if (dist[nxt] == -1 || dist[cur] + weight < dist[nxt])
        {
          dist[nxt] = dist[cur] + weight;
          q.push(make_pair(-dist[nxt], nxt));
        }
      }
    }
    return dist[v];
  }
};


int nodenumber(int type, int x, int y)
{
  return 3 * (N * x + y) + type;
}
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0); cin.tie(0);

//  ShortestPathWeightedGraph g1(4);
//  g1.add(0, 1, 10);
//  g1.add(1, 3, 1);
//  g1.add(0, 2, 1);
//  g1.add(2, 3, 100);
//  ll distance = g1.shortest(0, 3);
//  db(distance);
  cin >> N;
  rep(x,N) rep(y,N)
  {
    int a;
    cin >> a;
    X[a] = x;
    Y[a] = y;
  }
  ShortestPathWeightedGraph graph(3 * N * N);
  int baseweight = 1000;
  rep(x,N) rep(y,N)
  {
    rep(type1,3) rep(type2,3) if (type1 != type2)
    {
      graph.add(nodenumber(type1, x, y), nodenumber(type2, x, y), baseweight + 1);
    }
    // knight
    rep(i,8)
    {
      int xx = x + dx[i];
      int yy = y + dy[i];
      if (0 <= xx && xx < N && 0 <= yy && yy < N)
      {
        graph.add(nodenumber(KNIGHT, x, y), nodenumber(KNIGHT, xx, yy), baseweight);
      }
    }
    // vertical & horizontal
    rep(i,N)
    {
      if(x != i) graph.add(nodenumber(VH, x, y), nodenumber(VH, i, y), baseweight);
      if(y != i) graph.add(nodenumber(VH, x, y), nodenumber(VH, x, i), baseweight);
    }
    // diagonal
    rep(i,N)
    {
      for (int dirx = -1; dirx <= 1; dirx += 2)
      {
        for (int diry = -1; diry <= 1; diry += 2)
        {
          int xx = x + i * dirx;
          int yy = y + i * diry;
          if (x == xx && y == yy) continue;
          if (0 <= xx && xx < N && 0 <= yy && yy < N)
          {
            graph.add(nodenumber(DIAGONAL, x, y), nodenumber(DIAGONAL, xx, yy), baseweight);
          }
        }
      }
    }
  }
  vector<ll> best;

  rep(i,3) best.pb(0);
  for (int n = 2; n <= N * N; n++)
  {
    vector<ll> nextbest;
    rep(i,3) nextbest.pb(INF);
    rep(prev,3) rep(cur,3)
    {
      ll shortest_dist = graph.shortest(nodenumber(prev, X[n - 1], Y[n - 1]), nodenumber(cur, X[n], Y[n]));
      nextbest[cur] = min(nextbest[cur], best[prev] + shortest_dist);
    }
    best = nextbest;
  }
  ll mn = INFL;
  rep(i,sz(best)) mn = min(mn, best[i]);
  cout << mn / baseweight << " " << mn % baseweight << endl;
}

