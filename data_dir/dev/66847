#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <string.h>
#include <cstdlib>
#include <ctime>
#include <assert.h>
#include <unordered_map>
typedef long long ll ;
using namespace std;
pair<int,int>  tree[1<<18]={};
vector<int >v;
void build(int node,int l,int r)
{
    if(l>r)
    return ;
    if(l==r)
    {
        tree[node].first=v[l];
        tree[node].second=v[l];
        return ;
    }
    build(node*2,l,(r+l)/2);
    build(node*2+1,(r+l)/2+1,r);
    tree[node].first=max(tree[node*2].first,tree[node*2+1].first);
    tree[node].second=min(tree[node*2].second,tree[node*2+1].second);
}
int querymax(int node,int l,int r,int x,int y)
{
    if(l>r||l>y||r<x)
        return 0;
    if(x<=l&&r<=y)
    {
        return tree[node].first;
    }
    return max(querymax(node*2,l,(r+l)/2,x,y),querymax(node*2+1,(r+l)/2+1,r,x,y));
}
int querymin(int node,int l,int r,int x,int y)
{
    if(l>r||l>y||r<x)
        return 1e9;
    if(x<=l&&r<=y)
    {
        return tree[node].second;
    }
    return min(querymin(node*2,l,(r+l)/2,x,y),querymin(node*2+1,(r+l)/2+1,r,x,y));
}
int  main()
{
    std::cin.tie(0);
    std::ios::sync_with_stdio(false);
    //freopen("farm.in", "r", stdin);
    //freopen("farm.out", "w", stdout);
    int n,k,x,y,outa=0;
    cin >> n>>k;
    vector<pair<int,pair<int,int> > > out;
    for(int i =0;i<n;i++)
    {
        cin >> x;
        v.push_back(x);
    }
    build(1,0,n-1);
    for(int i =0;i<n;i++)
    {
        int st=0,en=n-1;
        while(st<=en)
        {
            int mid=(st+en)/2;
            x=querymax(1,0,n-1,i,mid),y=querymin(1,0,n-1,i,mid);
            if(x-y<=k)
            {
                st=mid+1;
            }
            else en=mid-1;
        }
        st--;
        out.push_back({st-i+1,{i,st}});
    }
    sort(out.begin(),out.end());
    ll counter=0;
    vector<pair<ll,ll> > newout;
    for(int i=out.size()-1;i>=0;i--)
    {
        if(out[i].first==out.back().first)
        {
            newout.push_back(out[i].second);
        }
    }
    sort(newout.begin(),newout.end());
    cout << out.back().first << " " << newout.size() << endl;
    for(int i =0;i<newout.size();i++)
        cout << newout[i].first+1<< " " << newout[i].second +1<< endl;
    return 0;
}
