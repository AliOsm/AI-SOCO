#include <iostream>
#include <math.h>
#include <cstdio>
#include <algorithm>
#include <utility>
#include <queue>
#include <vector>
#include <cstring>
#include <map>
#include <set>

using namespace std;

const int MAX_N = 10;
const int FIGURES_COUNT = 3;
const int MAX_VERTEX_COUNT = MAX_N * MAX_N * FIGURES_COUNT;
const int INF = 1e8;

int get_vertex_hash(int i, int j, int figure) {
    return figure * MAX_N * MAX_N + i * MAX_N + j;
}

pair<int, int> d[MAX_VERTEX_COUNT][MAX_VERTEX_COUNT];
pair<int, int> d1[MAX_N * MAX_N][FIGURES_COUNT];

int n;
int a[MAX_N][MAX_N];

void create_edge(int i, int j, int figure, int i1, int j1, int figure1, pair<int, int> cost) {
    int current_id, new_id;
    current_id = get_vertex_hash(i, j, figure);
    new_id = get_vertex_hash(i1, j1, figure1);
    d[current_id][new_id] = min(cost, d[current_id][new_id]);
}

pair<int, int> operator + (pair<int, int> a, pair<int, int> b) {
    return make_pair(a.first + b.first, a.second + b.second);
}

pair<int, int> min(pair<int, int> a, pair<int, int> b) {
    if (a.first + a.second != b.first + b.second) {
        return a.first + a.second < b.first + b.second ? a : b;
    }
    
    return a.second < b.second ? a : b;
}

// 4
//  5  4   1  13
//  8  3   6  16
// 15  9  14  12
// 11  2   7  10

int main() {
    scanf("%d", &n);
    vector<pair<int, int>> path;
    
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++) {
            scanf("%d", &a[i][j]);
            path.emplace_back(i, j);
        }
    
    for (int i = 0; i < MAX_VERTEX_COUNT; i++)
        for (int j = 0; j < MAX_VERTEX_COUNT; j++) {
            int cost = i == j ? 0 : INF;
            d[i][j] = make_pair(cost, cost);
        }
    
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            for (int current_figure = 0; current_figure < FIGURES_COUNT; current_figure++)
                for (int new_figure = 0; new_figure < FIGURES_COUNT; new_figure++) {
                    create_edge(i, j, current_figure, i, j, new_figure, make_pair(0, new_figure != current_figure));
                }
    
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            for (int i1 = 0; i1 < n; i1++)
                for (int j1 = 0; j1 < n; j1++) {
                    int dx = abs(i - i1), dy = abs(j - j1);
                    
                    if (dx == 0 && dy == 0) {
                        continue;
                    }
                    
                    if (dx == 0 || dy == 0) {
                        // lad'ya
                        create_edge(i, j, 0, i1, j1, 0, make_pair(1, 0));
                    }
                    
                    if (dx == dy) {
                        create_edge(i, j, 1, i1, j1, 1, make_pair(1, 0));
                    }
                    
                    if (min(dx, dy) == 1 && max(dx, dy) == 2) {
                        create_edge(i, j, 2, i1, j1, 2, make_pair(1, 0));
                    }
                }
    
    int m = MAX_VERTEX_COUNT;
    
    for (int k = 0; k < m; k++)
        for (int i = 0; i < m; i++)
            for (int j = 0; j < m; j++) {
                d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
            }
    
    for (int i = 0; i < path.size(); i++)
        for (int j = 0; j < path.size(); j++)
            if (a[path[i].first][path[i].second] < a[path[j].first][path[j].second]) {
                swap(path[i], path[j]);
            }
    
    for (int i = 0; i < n * n; i++)
        for (int figure = 0; figure < FIGURES_COUNT; figure++) {
            d1[i][figure] = make_pair(INF, INF);
        }
    
    for (int figure = 0; figure < FIGURES_COUNT; figure++) {
        d1[0][figure] = make_pair(0, 0);
    }
    
    for (int cp = 0; cp + 1 < n * n; cp++) {
        pair<int, int> current_cp, new_cp;
        current_cp = path[cp];
        new_cp = path[cp + 1];
        
        int i, j, i1, j1;
        i = current_cp.first;
        j = current_cp.second;
        i1 = new_cp.first;
        j1 = new_cp.second;
        
        for (int current_figure = 0; current_figure < FIGURES_COUNT; current_figure++)
            for (int new_figure = 0; new_figure < FIGURES_COUNT; new_figure++) {
                int current_id, new_id;
                current_id = get_vertex_hash(i, j, current_figure);
                new_id = get_vertex_hash(i1, j1, new_figure);
                
                pair<int, int> cost = d1[cp][current_figure] + d[current_id][new_id];
                d1[cp + 1][new_figure] = min(d1[cp + 1][new_figure], cost);
            }
    }
    
    pair<int, int> ans = make_pair(INF, INF);
    
    for (int figure = 0; figure < FIGURES_COUNT; figure++) {
        ans = min(ans, d1[n * n - 1][figure]);
    }
    
    printf("%d %d", ans.first + ans.second, ans.second);
}
