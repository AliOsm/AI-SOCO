#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
#define ll long long
#define ld long double
using namespace std;
const int N = 2e5 + 5;
bool vis[N];
vector<int>p;
int n, m, k, u, v, d[N], lvl[N];
vector<int>edges[N], e[N];
void bfs(int node){
    int cur_lvl = 0;
    queue<pair<int, int> >q;
    q.push({node, cur_lvl});
    while(!q.empty()){
        node = q.front().first;
        cur_lvl = q.front().second;
        q.pop();
        d[node] = cur_lvl;
        lvl[cur_lvl]++;
        for(auto i : edges[node]){
            if(!vis[i])
                q.push({i, cur_lvl + 1}), vis[i] = 1;
        }
    }
}
int main()
{
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    cin >> n >> m;
    while(m--){
        cin >> u >> v;
        edges[v].push_back(u);
        e[u].push_back(v);
    }
    cin >> k;
    for(int i = 0; i < k; i++)
        cin >> u, p.push_back(u);
    bfs(p.back());
    int mx = 0, mn = 0;
    for(int i = 0; i < k - 1; i++){
        if(!i)
            u = d[p[i]];
        else{
            u--;
            if(d[p[i]] != u)
                mn++, mx++, u = d[p[i]];
            else{
                int cnt = 0;
                for(auto j : e[p[i - 1]])
                    cnt += (d[j] == u);
                mx += (cnt > 1);
            }
        }
    }
    cout << mn << ' ' << mx;
    return 0;
}
