#include <bits/stdc++.h>
using namespace std;
#define REP(i, n) for (int i = 0; i < int(n); i++)
#define FOR(i, a, b) for (int i = a; i < int(b); i++)
#define FOREACH(i, v) for (__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define SIZE(v) ((int)(v).size())
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define ll long long
#define pii pair<int, int>

const int MAX = 100100;

ll mh[MAX], sh[MAX], reg[MAX];
ll t[MAX], en[MAX], ht[MAX];

int p[MAX];

bool compare(int i, int j) {
	return t[i] < t[j];
}

vector<pair<ll, ll> > adj[MAX];

ll te[MAX];

bool compare2(int i, int j) {
	return te[i] < te[j];
}

ll last[MAX];

int main() {
	int n, m; scanf("%d %d", &n, &m);
	ll bn, da, ic; scanf("%lld %lld %lld", &bn, &ic, &da);
	REP(i, n) scanf("%lld %lld %lld", mh + i, sh + i, reg + i);
	REP(i, n) last[i] = sh[i];
	REP(i, m) {
		scanf("%lld %lld %lld", t + i, en + i, ht + i);
		en[i]--;
		last[en[i]] = ht[i];
	}

	bool possible = false;
	REP(i, n) if(mh[i] <= da && ic != 0) possible = true;
	REP(i, n) if(last[i] <= da && reg[i] == 0 && ic != 0) possible = true;
	
	
	if(possible) {
		printf("-1\n");
		return 0;
	}
	
	REP(i, m) p[i] = i;
	sort(p, p + m, compare);
	
	ll INF = 10000000000000000ll;
	
	REP(i, n) te[i] = (da - sh[i] < 0 ? -1 : (reg[i] == 0 ? INF : (da - sh[i])/reg[i])) + 1;
	
	set<pair<ll, int> > St;
	
	REP(i, n) if(te[i] > 0) St.insert(mp(te[i], i));
	
	ll ans = 1ll*SIZE(St)*bn;;
	int i = 0;
	while(i < m || !St.empty()) {
		if(i == m) {
			ans = max(ans, 1ll*SIZE(St)*(bn + ((St.begin()->st) - 1ll)*ic));
			//printf("SIZE = %d, t = %lld\n", SIZE(St), (St.begin()->st) - 1ll);
			St.erase(St.begin());
		}
		else {
			while(!St.empty() && (St.begin()->st) <= t[p[i]]) {
				ans = max(ans, 1ll*SIZE(St)*(bn + ((St.begin()->st) - 1ll)*ic));
				//printf("SIZE = %d, t = %lld\n", SIZE(St), (St.begin()->st) - 1ll);
				St.erase(St.begin());
			}
			ans = max(ans, 1ll*SIZE(St)*(bn + (t[p[i]] - 1ll)*ic));
			if(St.count(mp(te[en[p[i]]], en[p[i]])) == 1) St.erase(mp(te[en[p[i]]], en[p[i]]));
			sh[en[p[i]]] = ht[p[i]];
			te[en[p[i]]] = t[p[i]] + (da - sh[en[p[i]]] < 0 ? -1 : (reg[en[p[i]]] == 0 ? INF : (da - sh[en[p[i]]])/reg[en[p[i]]])) + 1;
			//printf("<%lld, %lld, %lld>\n", da, sh[en[p[i]]], te[en[p[i]]]);
			if(da - sh[en[p[i]]] >= 0) St.insert(mp(te[en[p[i]]], en[p[i]]));//, printf("<>\n");
			i++;
		}
	}
	
	printf("%lld\n", ans);	
	
	
	/*
	
	ll t0 = 0ll;
	
	ll ans = 0ll;
	ll acc = 0ll;
	
	
	REP(i, n) if(te[i] <= 0) S.insert(i);
	
	ans = 1ll*SIZE(S)*bn;
	
	int i = 0;
	while(i < n && te[p[i]] <= 0) i++;
	while(i < n) {
		ans = max(ans, 1ll*SIZE(S)*(bn + (te[p[i]] - 1ll)*ic));
		S.erase(p[i]);
		i++;
	}
	
	printf("%lld\n", ans);*/
}