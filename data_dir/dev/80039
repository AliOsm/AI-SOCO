#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const ll MOD = 998244353;
const ll P = 31;
const ll IP = 128805723;

inline int ord(char c) {
    return c - 96;
}

void build_pre_hash(vector<ll>& a, const string& s) {
    int n = s.length();
    ll p = 1, hashed = 0;
    a.resize(n);
    for (int i = 0; i < n; i++) {
        hashed += p * ord(s[i]);
        hashed %= MOD;
        p *= P;
        p %= MOD;
        a[i] = hashed;
    }
}

void build_suf_hash(vector<ll>& a, const string& s) {
    int n = s.length();
    ll hashed = 0;
    a.resize(n);
    for (int i = n-1; i >= 0; i--) {
        hashed *= P;
        hashed += ord(s[i]);
        hashed %= MOD;
        a[i] = hashed;
    }
}

void build_candidates(vector<int>& a, const vector<ll>& pre, const vector<ll>& suf) {
    int n = pre.size();
    for (int i = 0, j = n-1; i <= n-3; i++, j--)
        if (pre[i] == suf[j])
            a.push_back(i+1);
}

bool valid(int l, const string& s, ll target) {
    int n = s.length();
    ll p = 1, hashed = 0;
    for (int i = 1; i <= l; i++) {
        hashed += p * ord(s[i]);
        hashed %= MOD;
        p *= P;
        p %= MOD;
    }
    if (hashed == target)
        return true;
    for (int i = 1, j = l+1; j <= n-2; i++, j++) {
        hashed += MOD - ord(s[i]);
        hashed += p * ord(s[j]);
        hashed *= IP;
        hashed %= MOD;
        if (hashed == target)
            return true;
    }
    return false;
}

void binary_search_ans(string& ans, const vector<int>& c, const string& s, const vector<ll>& h) {
    int low = 0, up = c.size()-1, mxl = -1;
    while (low <= up) {
        int mid = (low + up) / 2;
        int l = c[mid];
        if (valid(l, s, h[l-1])) {
            mxl = l;
            low = mid + 1;
        }
        else
            up = mid - 1;
    }

    ans = mxl == -1 ? "Just a legend" : s.substr(0, mxl);
}

int main() {
    string s, ans;
    vector<ll> pre_hash, suf_hash;
    vector<int> candidates;

    cin >> s;

    build_pre_hash(pre_hash, s);
    build_suf_hash(suf_hash, s);
    build_candidates(candidates, pre_hash, suf_hash);
    binary_search_ans(ans, candidates, s, pre_hash);

    cout << ans << endl;

    return 0;
}