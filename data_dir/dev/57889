#include<bits/stdc++.h>

#define ssync ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define F first
#define S second
#define mp make_pair
#define pb push_back

using namespace std;

using ll = long long int;
using ull = unsigned long long int;
using ld = long double;

const ll MOD = 1e9+7;
const ld PI = 3.14159265;

ll powerWithMod(ll base, ll exponent, ll modulus = LLONG_MAX)
{
    ll result = 1;
    base %= modulus;
    while(exponent > 0)
    {
        if(exponent % 2 == 1)
            result = (result * base) % modulus;
        exponent >>= 1;
        base = (base * base) % modulus;
    }
    return result;
}

ll modInverse(ll a, ll m = MOD)
{
    return powerWithMod(a, m-2, m);
}

template<typename T>
void term(T x)
{
    cout << x << "\n";
    exit(0);
}

multiset<int> sizes;
int n;
pair<int, int> a[123456], par[123456], ans;
bool added[123456];

int find(int x)
{
    if(par[x].first == x)
        return x;
    int f = find(par[x].first);
    par[x] = par[f];
    return f;
}

void unite(int x, int y)
{
    auto px = find(x);
    auto py = find(y);
    sizes.erase(sizes.find(par[px].second));
    sizes.erase(sizes.find(par[py].second));

    par[px].first = py;
    par[px].second += par[py].second;
    par[py].second = par[px].second;

    sizes.insert(par[py].second);
}

void add(int x)
{
    added[x] = 1;
    sizes.insert(1);
    for(auto d: {-1, 1})
        if(added[x+d])
            unite(x+d, x);
}

int main()
{
    cin >> n;
    for(int i = 1; i <= n; i++)
    {
        cin >> a[i].first;
        a[i].second = i;
        par[i] = make_pair(i, 1);
    }
    sort(a+1, a+n+1);
    for(int i = 1; i <= n; i++)
    {
        add(a[i].second);
        if(*sizes.begin() == *sizes.rbegin() and sizes.size() > ans.first)
            ans = {sizes.size(), a[i].first+1};
    }
    cout << ans.second << "\n";
    return 0;
}
