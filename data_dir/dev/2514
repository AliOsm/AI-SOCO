#include <bits/stdc++.h>

typedef long long ll;
typedef long double ld;
using namespace std;

const int MX = 100000;
const int N = 100001;

vector<int> dvrz[N];

int cnt[N],n,a[N],pr[N],mark[N],mob[N];

bool nsqf[N],exist[N];

void modify(int u,int val){
	for(auto v : dvrz[u]){
		cnt[v] += val;
	}
}

void add(int u){
	modify(u,1);
}

void rem(int u){
	modify(u,-1);
}

int count(int x){
	int result = 0;
	for(auto v : dvrz[x]){
		result += mob[v]*cnt[v];
	}
	return result;
}

int main(){
	for(int i = 1; i <= MX;++i){
		for(int j = i; j <= MX ; j += i){
			dvrz[j].push_back(i);
		}
	}
	for(int i = 2; i <= MX ; ++i){
		if(mark[i])continue;
		for(int j = i ; j <= MX; j += i){
			mark[j] = 1;
			int tmp = j,cnt = 0;
			while(tmp%i == 0){
				cnt++;
				tmp/= i;
			}
			if(cnt >= 2)nsqf[j] = 1;
			pr[j]++;
		}
	}

	for(int i = 1; i <= MX ; ++i){
		if(nsqf[i]){
			mob[i] = 0;
		}else if(pr[i]%2 == 0){
			mob[i] = 1;
		}else{
			mob[i] = -1;
		}
	}
	cin >> n;
	ll ans = 0;
	for (int i = 0; i < n; ++i){
		scanf("%d",a+i);
		ans = max(ans,(ll)a[i]);
		exist[a[i]] = 1;
	}
	for(int i = 1; i <= MX;++i){
		stack<int> st;

		for(int j = MX/i; j >= 1;--j){
			if(!exist[i*j])continue;
			int multiples = count(j);
			while(multiples > 0){
				int currentNumber = st.top();
				rem(currentNumber);
				st.pop();
				if(__gcd(currentNumber,j) == 1){
					ans = max(ans,1ll*j*currentNumber*i);
					multiples--;
				}
			}
			st.push(j);
			add(j);
		}
		while(st.size()){
			int currentNumber = st.top();
			st.pop();
			rem(currentNumber);
		}
	}
	cout << ans << endl;

	return 0;
}