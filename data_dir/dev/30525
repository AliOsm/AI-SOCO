
#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>
#include <iomanip>
#include <limits>
#include <chrono>
#include <random>
#include <array>
#include <unordered_map>
#include <functional>
#include <complex>

template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

constexpr long long MAX = 5100000;
constexpr long long INF = 1LL << 60;
constexpr int inf = 1 << 28;
//constexpr long long mod = 1000000007LL;
//constexpr long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;


int n; 
vector<int> a;
vector<vector<int>> g;
vector<int> dp;
vector<int> res;
void dfs1(int cur, int pre) {
	for (auto next : g[cur]) {
		if (next == pre) continue;
		dfs1(next, cur);
	}
	int res = 0;
	if (a[cur] == 1) res = 1;
	else res = -1;
	for (auto next : g[cur]) {
		if (next == pre) continue;
		if(dp[next] > 0) res += dp[next];
	}
	dp[cur] = res;
}

void dfs2(int cur, int pre) {
	res[cur] = dp[cur];
	int sz = g[cur].size();
	for (int i = 0; i < sz; i++) {
		int next = g[cur][i];
		if (next == pre) continue;
		if(dp[next] > 0) dp[cur] -= dp[next];
		if(dp[cur] > 0) dp[next] += dp[cur];
		dfs2(next, cur);
		if(dp[cur] > 0) dp[next] -= dp[cur];
		if(dp[next] > 0) dp[cur] += dp[next];
	}
}
int main()
{
	/*
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	*/
	scanf("%d", &n);
	g.resize(n);
	dp.resize(n, -1);
	res.resize(n);
	a.resize(n);
	for (int i = 0; i < n; i++) scanf("%d", &a[i]);
	for (int i = 0; i < n - 1; i++) {
		int u, v; scanf("%d %d", &u, &v);
		u--; v--;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	dfs1(0, -1);
	dfs2(0, -1);
	for (int i = 0; i < n; i++) {
		printf("%d", res[i]);
		if (i == n - 1) puts("");
		else printf(" ");
	}
	return 0;
	/*
		おまじないを使ったらscanfとprintf関連注意！！！！！！！！！！！！
	*/
}