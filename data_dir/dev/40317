#include <iostream>
#include <cmath>
#include <vector>

#define boost  cin.tie(NULL);ios_base::sync_with_stdio(false);
using namespace std;
vector<int> vc[300005];
int dp[300005][26];
bool visited[300005], universal[300005], flag;
int ans = INT32_MIN;
string s;

void dfs(int node) {
    if (universal[node])return;
    if (visited[node])return;
    visited[node] = true;
    universal[node] = true;
    vector<int>::iterator it = vc[node].begin();
    while (it != vc[node].end()) {
        int temp1 = *it;
        if (!visited[temp1]) {
            if (!universal[temp1])dfs(temp1);
            for (int i = 0; i < 26; i++)dp[node][i] = max(dp[temp1][i], dp[node][i]);
        } else {
            flag = true;
            return;
        }
        it++;
    }
    dp[node][(int) s[node - 1] - 97]++;
    for (int i = 0; i < 26; i++)ans = max(ans, dp[node][i]);
    visited[node] = false;
}

int main() {
    boost;
    int n, m, u, v;
    cin >> n >> m >> s;
    flag = false;
    for (int i = 0; i < m; i++) {
        cin >> u >> v;
        vc[u].push_back(v);
    }
    for (int i = 1; i <= n; i++)dfs(i);
    if (flag)cout << (-1);
    else cout << (ans);


    return 0;
}