#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <functional>
#include <numeric>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <complex>
#include <memory.h>
#include <time.h>

using namespace std;

typedef long long LL;

const double eps = 1e-9;

struct P
{
	double x, y;
	P() {}
	P(double x, double y) : x(x), y(y) {}

	void scan()
	{
		scanf("%lf%lf", &x, &y);
	}
};

bool operator<(const P & a, const P & b)
{
	return atan2(a.x, a.y) > atan2(b.x, b.y);
}

P operator-(const P & a, const P & b)
{
	return P(a.x - b.x, a.y - b.y);
}

P operator+(const P & a, const P & b)
{
	return P(a.x + b.x, a.y + b.y);
}

P operator*(double a, const P & b)
{
	return P(a * b.x, a * b.y);
}

double cross(const P & a, const P & b)
{
	return a.x * b.y - a.y * b.x;
}

int q;

set<P> S;
P pts[1 << 17];
int t[1 << 17];

int main()
{
	scanf("%d", &q);
	for(int i = 0; i < q; ++i)
	{
		scanf("%d", &t[i]);
		pts[i].scan();
	}
	P zero = 0.333333 * (pts[0] + pts[1] + pts[2]);
	for(int i = 0; i < q; ++i)
		pts[i] = pts[i] - zero;
	for(int i = 0; i < 3; ++i)
		S.insert(pts[i]);
	for(int i = 3; i < q; ++i)
	{
		if (t[i] == 2)
		{
			auto L = S.lower_bound(pts[i]);
			auto R = L;
			if (R == S.begin())
				R = S.end();
			R--;
			if (L == S.end())
				L = S.begin();
			if (cross(*R - *L, pts[i] - *L) < eps)
				printf("YES\n");
			else
				printf("NO\n");

		}
		else
		{
			auto L = S.lower_bound(pts[i]);
			auto R = L;
			if (R == S.begin())
				R = S.end();
			R--;
			if (L == S.end())
				L = S.begin();
			if (cross(*R - *L, pts[i] - *L) < -eps)	
				continue;
			auto next = R;
			if (next == S.begin())
				next = S.end();
			next--;
			while (cross(*R - pts[i], *next - *R) > -eps)
			{
				S.erase(R);
				R = next;
				if (next == S.begin())
					next = S.end();
				next--;
			}
			next = L;
			next++;
			if (next == S.end())
				next = S.begin();
			while (cross(*next - *L, *L - pts[i]) > -eps)
			{
				S.erase(L);
				L = next;
				next++;
				if (next == S.end())
					next = S.begin();
			}
			S.insert(pts[i]);
		}
	}
	return 0;
}