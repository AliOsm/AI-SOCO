#include <iostream>
#include <stack>
#include <algorithm>
#include <queue>
#include <math.h>
#include <set>
#include <vector>
#include <queue>
#include <map>
#include <string.h>
#include <stdio.h>
#define sf scanf
#define pf printf
#define ll long long

#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i )

using namespace std;

unsigned int dp[100010][400];
vector< int > nima[100010];
int a[100010], b[100010];
int n,m,s,e;


int main()
{
    while( cin>>n>>m>>s>>e )
    {
        _clr( dp );

        fr(i,0,n)
        {
            sf("%d",&a[i]);
        }
        fr(i,0,m)
        {
            sf("%d",&b[i]);
            nima[ b[i] ].push_back( i + 1 );
        }

        int ans = 0;
        int cnt = s/e;
        for(int i = 0; i < n; ++i )
        {
            dp[i][0] = 0;
            if( nima[a[i]].size() )
                dp[i][1] = nima[a[i]][0];
            else
                dp[i][1] = -1;
            //printf("i = %d dp = %d\n",i,dp[i][1]);
            if( i == 0 ) continue;

            for( int j = 1; j <= cnt; ++j )
            {

                unsigned int now = -1;
                int w = a[i];
                int last = dp[i-1][j-1];
                now = upper_bound( nima[ w ].begin(), nima[w].end(),last ) - nima[w].begin();
                if( now == nima[w].size() || dp[i-1][j-1] == -1 ) 
                {
                    now = -1;
                }
                else
                {
                    now = nima[w][now];
                }
                dp[i][j] = min( dp[i-1][j] , now );
                //pf( "i = %d j = %d dp = %u( %d, %d ) last = %d now = %d\n",i,j,dp[i][j], dp[i-1][j-1], dp[i-1][j], last, now);
                //pf( "i = %d j = %d dp = %u\n",i,j,dp[i][j]);
            }
        }
        fr(i,0,n)
            fr(j,0,cnt+1)
            {
                if( dp[i][j] != -1 )
                {
                    if( i + dp[i][j] + 1 + j  * e <= s )
                        ans = max( ans, j );
                }
            }


        cout<<ans<<endl;
        return 0;
    }

}