#include <bits/stdc++.h>
using namespace std;
#define pf pop_front
#define pb push_back
#define ulli unsigned long long int
#define LL __int64
#define FOR(i,begin,end) for (LL i=begin;i<=end;i++)
#define rep(i,t) for (LL i=0;i<t;i++)
typedef pair<ulli,ulli> pii;
const LL MAX=1e5+17,N=317,inf=1e11;
struct edge
{
  ulli e,w;
  edge()
  {
    e=0;w=0;
  }
};
vector<edge>a[MAX];
ulli n,d[MAX],v[MAX],m,x,y,z,par[MAX],op;
vector<LL>ans;
set<pii>q;
void dijkstra()
{
  int s=1,ans=0;
  FOR(j,1,n)
  {
    d[j]=inf;
    v[j]=false;
  }
  d[1]=0;
  edge help;
  FOR(i,1,n)
  {
    q.insert(pii(d[i],i));
  }
  while(q.size())
  {
    LL u=q.begin()->second;
    v[u]=true;
    q.erase(q.begin());
    rep(i,a[u].size())
    {
      LL t=a[u][i].e;
      if(!v[t])
      {
        q.erase(pii(d[t],t));
        if(d[u]+a[u][i].w<d[t])
        {
          par[t]=u;
        }
        d[t]=min(d[t],d[u]+a[u][i].w);
        q.insert(pii(d[t],t));
      }
    }
  }
}
int main()
{
  cin>>n>>m;
  edge help;
  FOR(i,1,m)
  {
    cin>>x>>y>>z;
    help.e=y;
    help.w=z;
    a[x].pb(help);
    help.e=x;
    a[y].pb(help);
  }
  dijkstra();
  if(d[n]==inf)
  {
    return cout<<"-1\n",0;
  }
  else
  {
    LL op=n;
    while(op)
    {
      ans.pb(op);
      op=par[op];
    }
    for(int i=ans.size()-1;i>=0;i--)
    {
      cout<<ans[i]<<" ";
    }
    return cout<<"\n",0;
  }
}
