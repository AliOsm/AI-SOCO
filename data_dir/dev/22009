//#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,abm,mmx,popcnt,avx,avx2,tune=native")
           
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;
           
//#define int long long
  
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;

template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
  
void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifndef _offline
    //freopen("mincost.in", "r", stdin);
    //freopen("mincost.out", "w", stdout);
    #endif
}

const int MAXN = 2e5 + 100;
vector<int> g[MAXN];
int h[MAXN], mx[MAXN];
int ans = -1, aa = -1, bb = -1, cc = -1;

void dfs0(int u, int p) {
    mx[u] = u;
    for (int to : g[u]) {
        if (to == p) {
            continue;
        }
        h[to] = h[u] + 1;
        dfs0(to, u);
        if (h[mx[to]] > h[mx[u]]) {
            mx[u] = mx[to];
        }
    }
    sort(all(g[u]), [&](int a, int b) {
        if (a == p) {
            return false;
        }
        if (b == p) {
            return true;
        }
        return h[mx[a]] > h[mx[b]]; 
    });
    if (p != -1) {
        g[u].pop_back();
    }
}

void dfs(int u, int d, int v) {
    if ((int)g[u].size() >= 2) {
        int res = h[mx[g[u][0]]] - h[u] + h[mx[g[u][1]]] - h[u];
        int ra = mx[g[u][0]];
        int rb = mx[g[u][1]];
        int rc = u;
        if (res > ans) {
            ans = res;
            aa = ra;
            bb = rb;
            cc = rc;
        }
    }
    if ((int)g[u].size() >= 3) {
        int res = h[mx[g[u][0]]] - h[u] + h[mx[g[u][1]]] - h[u] + h[mx[g[u][2]]] - h[u];
        int ra = mx[g[u][0]];
        int rb = mx[g[u][1]];
        int rc = mx[g[u][2]];
        if (res > ans) {
            ans = res;
            aa = ra;
            bb = rb;
            cc = rc;
        }
    }
    if ((int)g[u].size() >= 2 && v != -1) {
        int res = h[mx[g[u][0]]] - h[u] + h[mx[g[u][1]]] - h[u] + d;
        int ra = mx[g[u][0]];
        int rb = mx[g[u][1]];
        int rc = v;
        if (res > ans) {
            ans = res;
            aa = ra;
            bb = rb;
            cc = rc;
        }
    }
    if ((int)g[u].size() >= 1 && v != -1) {
        int res = h[mx[g[u][0]]] - h[u] + d;
        int ra = mx[g[u][0]];
        int rb = u;
        int rc = v;
        if (res > ans) {
            ans = res;
            aa = ra;
            bb = rb;
            cc = rc;
        }
    }
    if (v == -1) {
        d = 0;
        v = u;
    }
    set<pii> setik;
    for (int to : g[u]) {
        setik.insert({h[mx[to]], mx[to]});
    }
    for (int to : g[u]) {
        setik.erase({h[mx[to]], mx[to]});
        if (setik.size()) {
            int nd = prev(setik.end())->first - h[u];
            int nv = prev(setik.end())->second;
            if (nd > d) {
                dfs(to, nd + 1, nv);
            }
            else {
                dfs(to, d + 1, v);
            }
        }
        else {
            dfs(to, d + 1, v);
        }
        setik.insert({h[mx[to]], mx[to]});
    }
}

signed main() {
    FAST_IO();
    int n;
    cin >> n;
    for (int i = 0; i < n - 1; ++i) {
        int u, v;
        cin >> u >> v;
        u--;
        v--;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs0(0, -1);
    dfs(0, 0, -1);
    cout << ans << '\n' << aa + 1 << ' ' << bb + 1 << ' ' << cc + 1 << '\n';
}  