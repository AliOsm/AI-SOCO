#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cstring>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <utility>
using namespace std;
#define REP(I,N) for (I=0;I<N;I++)
#define rREP(I,N) for (I=N-1;I>=0;I--)
#define rep(I,S,N) for (I=S;I<N;I++)
#define rrep(I,S,N) for (I=N-1;I>=S;I--)
#define FOR(I,S,N) for (I=S;I<=N;I++)
#define rFOR(I,S,N) for (I=N;I>=S;I--)
typedef unsigned long long ULL;
typedef long long LL;
const int INF=0x3f3f3f3f;
const LL INFF=0x3f3f3f3f3f3f3f3fll;
const LL M=1e9+7;
const LL maxn=1e6+7;
const double eps=0.00000001;
LL gcd(LL a,LL b){return b?gcd(b,a%b):a;}
template<typename T>inline T abs(T a) {return a>0?a:-a;}
template<typename T>inline T powMM(T a,T b){T ret=1;for (;b;b>>=1ll,a=a*a%M) if (b&1) ret=1ll*ret*a%M;return ret;}

string S[maxn];
int K[maxn];
//map<string,int> origin;
set<string> A,B;//1在前 
set<string> AB,BA,TA,TB;
vector<pair<string,string> > ans; 
int cnt;
int main(){
	int n,i,j;
	cin>>n;
	FOR(i,1,n){
		cin>>S[i]>>K[i];
//		origin[S[i]]=K[i];
		cnt+=K[i];
	}
	FOR(i,1,cnt) A.insert(to_string(i));//1
	FOR(i,cnt+1,n) B.insert(to_string(i));//0
	FOR(i,1,n){
		if (A.count(S[i])){
			A.erase(S[i]);
			if (K[i]==0) AB.insert(S[i]); 
		}else if (B.count(S[i])){
			B.erase(S[i]);
			if (K[i]==1) BA.insert(S[i]);
		}else if (K[i]==0) TB.insert(S[i]);
		else if (K[i]==1) TA.insert(S[i]);
	}
	while (A.size()||B.size()||BA.size()||AB.size()){
		if (A.size()&&BA.size()){
			ans.push_back(make_pair(*BA.begin(),*A.begin()));
			B.insert(*BA.begin());
			BA.erase(BA.begin());
			A.erase(A.begin());
		}else if (B.size()&&AB.size()){
			ans.push_back(make_pair(*AB.begin(),*B.begin()));
			A.insert(*AB.begin());
			AB.erase(AB.begin());
			B.erase(B.begin());
		}else if (A.size()&&TA.size()){
			ans.push_back(make_pair(*TA.begin(),*A.begin()));
			TA.erase(TA.begin());
			A.erase(A.begin());
		}else if (B.size()&&TB.size()){
			ans.push_back(make_pair(*TB.begin(),*B.begin()));
			TB.erase(TB.begin());
			B.erase(B.begin());
		}else if (BA.size()){
			ans.push_back(make_pair(*BA.begin(),"1926ha"));
			B.insert(*BA.begin());
			BA.erase(BA.begin());
			TA.insert("1926ha");
		}else if (AB.size()){
			ans.push_back(make_pair(*AB.begin(),"ha0817"));
			A.insert(*AB.begin());
			AB.erase(AB.begin());
			TB.insert("ha0817");
		}
	}
	printf("%d\n",ans.size());
	for (pair<string,string> now:ans) cout<<"move "<<now.first<<" "<<now.second<<"\n"; 
}
/*
*/