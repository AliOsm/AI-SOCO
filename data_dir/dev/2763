#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cassert>
#include <complex>

//#include <bits/stdc++.h>

using namespace std;


int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int n;
    string s;
    cin >> n >> s;
    vector< pair < int , int > > all;
    int st = -1;
    for(int i = 0 ; i <= n ; i++){
        if(i == n){
            if(st != -1){
                all.push_back({st , n - 1});
            }
            break;
        }
        if(s[i] == 'G' && st == -1){
            st = i;
            continue;
        }
        if(s[i] == 'S' && st != -1){
            all.push_back(make_pair(st , i - 1));
            st = -1;
        }
    }
    auto getLen = [&](pair< int , int > p){
        return (p.second - p.first) + 1;
    };
    if((int)all.size() == 1){
        cout << getLen(all.back()) << endl;
        return 0;
    }
    if((int)all.empty()){
        cout << 0 << endl;
        return 0;
    }
    int ans = getLen(all[0]);
    int sz = (int)all.size();
    for(int i = 1; i < sz ; i++){
        ans = ans < getLen(all[i]) ? getLen(all[i]) : ans;
        if((all[i].first - 2) == all[i - 1].second){
            int ex = sz > 2;
            ans = max(ans , getLen(all[i]) + getLen(all[i - 1]) + ex) ;
        }else{
            ans = max(ans , max(getLen(all[i]) , getLen(all[i - 1])) + 1);
        }
    }
    cout << ans << endl;
    return 0;
}
