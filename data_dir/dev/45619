# include <bits/stdc++.h>
using namespace std;
# define fi cin
# define fo cout
# define prev rrrrrrr
# define x first.first
# define y first.second
# define z second.first
# define t second.second
# define ft first
# define sc second
int v[400105];
pair < pair < int , int > , pair < int , int > > s[101005];
int prev[101005];
int d[100105];
int n;
priority_queue < pair < int , int >  , vector < pair < int , int > > , greater < pair < int , int > > > arb[401005];
int binsearch(int cnt)
{
    int ans = 0;
    for (int i = 1 << 20;i;i >>= 1)
        if (ans + i <= 4*n && v[ans+i] < cnt) ans += i;
    return ++ans;
}
queue < int > q;
void update(int i,pair < int , int > val)
{
    for (;i <= 4*n+5;i += i&(-i)) arb[i].push(val);
}
void query(int i,int val,int from)
{
    for (;i;i -= i&(-i))
    {
        while (arb[i].size() && arb[i].top().ft <= val)
        {
            int r = arb[i].top().sc;
            if (!d[r]) d[r] = d[from] + 1,prev[r] = from,q.push(r);
            arb[i].pop();
        }
    }
}
int main(void)
{
    ios_base :: sync_with_stdio(0);
    fi>>n;
    for (int i = 1;i <= n;++i)
    {
        fi>>s[i].x>>s[i].y>>s[i].z>>s[i].t;
        v[4*i-3] = s[i].x;
        v[4*i-2] = s[i].y;
        v[4*i-1] = s[i].z;
        v[4*i] = s[i].t;
    }
    if (!max(s[n].x,s[n].y)) return fo << 1  << '\n' << n << '\n',0;
    sort(v+1,v+1+4*n);
    if (v[1]) return puts("-1") & 0;
    for (int i = 1;i <= n;++i)
    {
        s[i].x = binsearch(s[i].x);
        s[i].y = binsearch(s[i].y);
        s[i].z = binsearch(s[i].z);
        s[i].t = binsearch(s[i].t);
        update(s[i].x,{s[i].y,i});
    }
    for (int i = 1;i <= n;++i) if (!v[max(s[i].x,s[i].y)]) q.push(i),d[i] = 1;
    while (!q.empty())
    {
        int it = q.front();
        q.pop();
        query(s[it].z,s[it].t,it);
    }
    if (!d[n]) return fo << "-1\n",0;
    fo << d[n] << '\n';
    vector < int > ans;
    int cnt = n;
    while (cnt) ans.push_back(cnt),cnt = prev[cnt];
    reverse(ans.begin(),ans.end());
    for (auto it : ans) fo << it << ' ';fo << '\n';
    return 0;
}
