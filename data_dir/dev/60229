#include <bits/stdc++.h>

using namespace std;

const int N = 2e5 + 5; // number of nodes
int vis[N] , low[N] , dfsTime[N] , comp_id[N] , Time;
vector<int> adj[N];
stack<int> st;
vector<vector<int> > comps;

int dfs(int node) { // add par if undirected
    if(vis[node])
        return vis[node] == 1 ? low[node] : 1e9;

    dfsTime[node] = low[node] = Time++;
    vis[node] = 1;
    st.push(node);

    for (int child : adj[node]) // in case of undirected continue if par
        low[node] = min(low[node] , dfs(child));

    if(low[node] == dfsTime[node]) {
        comps.push_back(vector<int>());
        do {
            vis[st.top()] = 2;
            comp_id[st.top()] = comps.size() - 1;
            comps.back().push_back(st.top());
            st.pop();
        } while(comps.back().back() != node);
    }

    return low[node];
}

vector<int> tree[N]; // tree or dag
int tarjan(int n) {
    for (int i = 1 ;i <= n ;i++) // one based
        if(!vis[i])
            dfs(i);

    for (int i = 1 ;i <= n ;i++) // one based
        for (int child : adj[i])
            if (comp_id[i] != comp_id[child])
                tree[comp_id[i]].push_back(comp_id[child]);

    return comps.size();
}

int color[N];
char nxt = 26;
void go(int node) {
    for (int child : tree[node])
        if (!color[child])
            go(child);
    color[node] = nxt;
    nxt -= nxt > 1;
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("input.in" , "r" , stdin);
#endif
    int n , k , x , p;
    scanf("%d%d" , &n , &k);
    for (int i = 0 ;i < n ;i++) {
        scanf("%d" , &x);
        if (i != 0) adj[p].push_back(x);
        p = x;
    }

    for (int i = 0 ;i < n ;i++) {
        scanf("%d" , &x);
        if (i != 0) adj[p].push_back(x);
        p = x;
    }

    if (tarjan(n) < k) {
        puts("NO");
        return 0;
    }

    for (int i = 0 ;i < comps.size() ;i++)
        if (!color[i])
            go(i);

    puts("YES");
    for (int i = 1 ;i <= n ;i++)
        cout << char('a' + color[comp_id[i]] - 1);
}