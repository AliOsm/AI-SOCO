#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<queue>
#include<string>
#include<cstring>
#include<map>
#include<cmath>
#include<bitset>
#include<set>
#include<cstdlib>
#include<complex>
#include<list>
#include<sstream>
#include<cassert>
#include<iomanip>
#include<limits>

using namespace std;

#define double long double

typedef pair<int,int> ii;
typedef pair<int,long long> il;
typedef pair<long long,long long> ll;
typedef pair<ll,int> lli;
typedef pair<long long,int> li;
typedef pair<double,double> dd;
typedef pair<ii,int> iii;
typedef pair<double,int> di;
typedef pair<int,ii> iii2;
typedef pair<ii,ii> iiii;
typedef vector<int> vi;
long long mod = 1000000007LL;
long long large = 2000000000000000000LL;


vector<long long> sum;

int up;
long long uv;
void update(int o,int l,int r){
	if(l==r){
		sum[o]+=uv;
	}else{
		int m = (l+r)/2;
		if(up<=m) update(o*2,l,m);
		if(up>m) update(o*2+1,m+1,r);
		sum[o] = sum[o*2]+sum[o*2+1];
	}
}

int ql,qr;
long long re;
void query(int o,int l,int r){
	if(ql<=l&&qr>=r){
		re+=sum[o];
	}else{
		int m = (l+r)/2;
		if(ql<=m) query(o*2,l,m);
		if(qr>m) query(o*2+1,m+1,r);
	}
}


int main(){

	int n,r;
	long long k;
	cin>>n>>r>>k;

	vector<long long> a(n,0);
	for(int i=0;i<n;i++) scanf("%I64d",&a[i]);

	long long low = 0;
	long long high = large;
	long long ans = 0;
	while(low<=high){
		long long mid = (low+high)/2;
		/*sum.assign(4*n+10,0);
		for(int i=0;i<n;i++){
			up = i;
			uv = a[i];
			update(1,0,n-1);
		}
		long long tk = k;
		for(int i=0;i<n;i++){
			ql = i-r;
			qr = i+r;
			re = 0;
			query(1,0,n-1);
			if(re>=mid) continue;
			long long g = mid-re;
			tk-=g;
			if(tk<0) break;
			up = min(qr,n-1);
			uv = g;
			update(1,0,n-1);
		}
		if(tk<0){
			high = mid-1;
		}else{
			ans = mid;
			low = mid+1;
		}*/
		vector<long long> pre(n,0);
		pre = a;
		for(int i=1;i<n;i++){
			pre[i]+=pre[i-1];
		}
		long long off = 0;
		queue<il> q;
		long long tk = k;
		for(int i=0;i<n;i++){
			while(q.size()>0&&q.front().first<i-r){
				off-=q.front().second;
				q.pop();
			}
			long long c = pre[min(i+r,n-1)];
			int l = max(-1,i-r-1);
			if(l>=0) c-=pre[l];
			if(c+off<mid){
				long long g = mid-c-off;
				tk-=g;
				if(tk<0) break;
				off+=g;
				q.push(il(i+r,g));
			}
		}
		if(tk<0){
			high = mid-1;
		}else{
			ans = mid;
			low = mid+1;
		}
	}

	cout<<ans<<endl;



    return 0;
}
