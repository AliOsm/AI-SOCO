#define _CRT_SECURE_NO_WARNINGS

#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

#define un              unsigned
#define ll              long long
#define all(A)          A.begin(),A.end()
#define rall(A)         A.rbegin(),A.rend()
#define mp              make_pair
#define SP              setprecision
#define mem(A,B)        memset(A,B,sizeof A)
#define sorta(A)        sort(all(A))
#define sortd(A)        sort(rall(A))
#define sortf(A,F)      sort(all(A),F)
#define Abs(A)          (A>=0?(A):(-A))
#define Max(A,B)        A>=B?A:B
#define Min(A,B)        A<=B?A:B
#define Get(mask,bit)   mask&(1LL<<bit)
#define Set(mask,bit)   mask|(1LL<<bit)
#define Reset(mask,bit) mask&(~(1LL<<bit))
#define Flib(mask,bit)  mask^(1LL<<bit)
#define LowOn(mask,bit) mask&-mask
#define PI              acos(0.0) * 2
#define exp             2.71828182845904523536028747135266249775724709369995
#define eps             -1000000000
#define oo              1000000000
#define Endl            '\n'

inline void inp(){}
inline void inp(bool& A){ cin >> A; }
inline void inp(char& A){ scanf(" %c", &A); }
inline void inp(int& A){ scanf("%d", &A); }
inline void inp(float& A){ cin >> A; }
inline void inp(ll& A){ scanf("%I64d", &A); }
inline void inp(double& A){ scanf("%lf", &A); }
inline void inp(char* A){ scanf("%s", A); }
inline void inp(string& A){ cin >> A; }
template <class Front, class... Queue> inline void inp(Front& A, Queue&... B){ inp(A); inp(B...); }
inline void oup(){}
inline void oup(bool A){ cout << A; }
inline void oup(char A){ printf("%c", A); }
inline void oup(int A){ printf("%d", A); }
inline void oup(float A){ cout << A; }
inline void oup(ll A){ printf("%I64d", A); }
inline void oup(double A){ printf("%lf", A); }
inline void oup(const char* A){ printf(A); }
inline void oup(char* A){ printf("%s", A); }
inline void oup(string& A){ cout << A; }
template <class Front, class... Queue> inline void oup(Front A, Queue... B){ oup(A); oup(B...); }
template <class T> inline void remax(T& A, T B){ if (A < B)A = B; }
template <class T> inline void remin(T& A, T B){ if (A > B)A = B; }
string ToString(ll num){ string ret; do{ ret += ((num % 10) + '0'); num /= 10; } while (num); reverse(all(ret)); return ret; }
ll ToNumber(string s){ ll r = 0, p = 1; for (int i = s.size() - 1; i >= 0; --i)r += (s[i] - '0') * p, p *= 10; return r; }
ll Gcd(ll a, ll b){ while (a %= b ^= a ^= b ^= a);  return b; }
ll Power(ll base, ll power){ ll ret = 1; while (power){ if (power & 1)ret *= base; power >>= 1; base *= base; } return ret; }
int Log(ll num, ll base){ int ret = 0; while (num){ ++ret; num /= base; } return ret; }
int Count(ll mask){ int ret = 0; while (mask){ if (mask & 1)++ret; mask >>= 1; } return ret; }

bool clr[100][100][100], visited[100];
int n;
bool dfs(int u, int v, int c){
    if (visited[u])return false;
    if (clr[u][v][c])return true;
    visited[u] = true;
    for (int a = 0; a < n; ++a)
    if (clr[u][a][c] && dfs(a, v, c))return true;
    return false;
}
int main(){
    int m, q;
    inp(n, m);
    for (int i = 0; i < m; ++i){
        int a, b, c;
        inp(a, b, c);
        --a, --b, --c;
        clr[a][b][c] = clr[b][a][c] = true;
    }
    inp(q);
    while (q--){
        int u, v, ans = 0;
        inp(u, v);
        --u, --v;
        for (int c = 0; c < m; ++c){
            mem(visited, false);
            ans += dfs(u, v, c);
        }
        oup(ans, Endl);
    }
    return 0;
}