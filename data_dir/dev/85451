#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define ull unsigned long long
#define ld long double
#define endl '\n'
#define TIME 1.0*clock()/CLOCKS_PER_SEC
#define pii pair < int32_t , int32_t >


#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("-O3")

using namespace std;


mt19937 gen(chrono::system_clock::now().time_since_epoch().count());

const ll mod = 1333;
const int32_t FFTM = 998244353;
const int32_t N = 1e3 + 5;

int32_t SX[4] = {0 , 1 , -1 , 0};
int32_t SY[4] = {1 , 0 , 0 , -1};

vector < pair < int , pii > >g;
vector < vector < int > > G(N);
vector < bool > use(N);

int dfs(int v){
    use[v] = 1;
    for (auto to : G[v]){
        if (!use[to])return dfs(to);
    }
    return v;
}

void Clear(int x){
    for (int i = 0;i < N; ++i)use[i] = 0;
    use[x] = 1;
}

int32_t  main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#endif
    int n;
    cin >> n;
    for (int i = 0;i < n - 1; ++i){
        int x, y, val;
        cin >> x >> y >> val;
        x--;
        y--;
        G[x].pb(y);
        G[y].pb(x);
        g.pb({val , {x , y}});
    }
    if (n == 2){
        cout << "YES" << endl << 1 << endl;
        cout << 1 << " " << 2 << " " << g[0].F;
        return 0;
    }
    for (int i = 0;i < n; ++i){
        if (G[i].size() == 2){
            cout << "NO";
            return 0;
        }
    }
    vector < pair < int , pii > > ans;
    for (auto to : g){
        int x = to.S.F;
        int y = to.S.S;
        int val = to.F / 2;
        if (G[y].size() == 1)swap(x , y);
        if (G[x].size() == 1){
            int v1, v2;
            for (auto to : G[y])
                if(to != x){
                    v1 = to;
                    break;
                }
            for (auto to : G[y])
                if(to != x && to != v1){
                    v2 = to;
                    break;
                }
            Clear(y);
            v1 = dfs(v1);
            Clear(y);
            v2 = dfs(v2);
            ans.pb({val , {x , v1}});
            ans.pb({val , {x , v2}});
            ans.pb({-val , {v1 , v2}});
        }else{
            int v1, v2, v3, v4;
            for (auto to : G[y])
                if(to != x){
                    v1 = to;
                    break;
                }
            for (auto to : G[y])
                if(to != x && to != v1){
                    v2 = to;
                    break;
                }
            Clear(y);
            v1 = dfs(v1);
            Clear(y);
            v2 = dfs(v2);
            for (auto to : G[x])
                if(to != y){
                    v3 = to;
                    break;
                }
            for (auto to : G[x])
                if(to != y && to != v3){
                    v4 = to;
                    break;
                }
            Clear(x);
            v3 = dfs(v3);
            Clear(x);
            v4 = dfs(v4);
            ans.pb({val , {v1, v3}});
            ans.pb({val , {v2, v4}});
            ans.pb({-val , {v1, v2}});
            ans.pb({-val , {v3, v4}});
        }
    }
    cout << "YES" << endl << ans.size() << endl;
    for (auto to : ans)cout << to.S.F + 1 << " " << to.S.S + 1 << " " << to.F << endl;
    return 0;
}
