#include <bits/stdc++.h>
using namespace std;

const int N = 2e5 + 100, magic = 500;

int small[N], large[N];
int val[N];
int heavy_id[N];
bitset<N> ej[magic];
int ptr[N];
int q_u[N+N];
vector<int> g[N];

int main() {
    // freopen("in.txt", "r", stdin);
    ios::sync_with_stdio(0);
    cin.tie(0);
    int n, m;
    cin >> n >> m;
    for(int i = 1; i <= n; i++) val[i] = i, ptr[i] = i+1, q_u[i] = i;
    for(int i = 1; i <= m; i++) {
        int u, v;
        cin >> u >> v;
        g[u].push_back(v);
        if(v < u) small[u]++;
        else large[u]++;
        g[v].push_back(u);
        if(u < v) small[v]++;
        else large[v]++;
    }
    long long ans = 0;
    int id = 0;
    for(int i = 1; i <= n; i++) {
        ans += 1ll*small[i]*large[i];
        if(g[i].size() > magic) {
            heavy_id[i] = ++id;
            for(int v : g[i]) {
                ej[heavy_id[i]][v] = true;
            }
        }
    }
    cout << ans << "\n";
    int q;
    cin >> q;
    for(int qq = n+1; qq <= n+q; qq++) {
        int u;
        cin >> u;
        q_u[qq] = u;
        if(heavy_id[u] == 0) {
            for(int v : g[u]) {
                if(val[u] < val[v]) {
                    ans -= 1ll*small[v]*large[v];
                    small[v]--;
                    large[v]++;
                    ans += 1ll*small[v]*large[v];
                }
            }
            ans -= 1ll*small[u]*large[u];
            val[u] = qq;
            small[u] = small[u] + large[u];
            large[u] = 0;
        }
        else {
            for(int j = ptr[u]; j < qq; j++) {
                int v = q_u[j];
                if(val[v] != j) continue;
                if(ej[heavy_id[u]][v] == 1 && val[v] > val[u]) {
                    ans -= 1ll*small[v]*large[v];
                    small[v]--;
                    large[v]++;
                    ans += 1ll*small[v]*large[v];
                }
            }
            ptr[u] = qq+1;
            ans -= 1ll*small[u]*large[u];
            val[u] = qq;
            small[u] = small[u] + large[u];
            large[u] = 0;
        }
        cout << ans << "\n";
    }

    return 0;
}
