#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

#define MAXV 1000010
int parent[MAXV],rank[MAXV];

struct UnionFind{

    UnionFind(int n){
        int i;
        REP(i,n) {parent[i] = i; rank[i] = 1;}
    }

    int root(int x){
        if(parent[x] != x) parent[x] = root(parent[x]);
        return parent[x];
    }

    void connect(int x, int y){
        int rx=root(x),ry=root(y);
        if(rx == ry) return;
        if(rank[rx] > rank[ry]) {parent[ry] = rx; rank[rx] += rank[ry];}
        if(rank[rx] <= rank[ry]) {parent[rx] = ry; rank[ry] += rank[rx];}
    }
};

#define M 10000010
int a[10000010];

int gcd(int x, int y){
    return x ? gcd(y%x,x) : y;
}

int main(void){
    int N,x,y,z,b,c,i;
    
    REP(i,10000010) a[i] = -1;
    scanf("%d",&N);
    REP(i,N){
        scanf("%d",&x);
        a[x] = i;
    }
    
    UnionFind uf(N);
    for(b=1;b*b<=2*M;b++) for(c=1;c<b;c++) if(gcd(b,c) == 1 && b%2 != c%2){
        x = b*b - c*c;
        y = 2*b*c;
        z = b*b + c*c;
        if(x < M && y < M && a[x] != -1 && a[y] != -1) uf.connect(a[x],a[y]);
        if(x < M && z < M && a[x] != -1 && a[z] != -1) uf.connect(a[x],a[z]);
        if(y < M && z < M && a[y] != -1 && a[z] != -1) uf.connect(a[y],a[z]);
    }
    
    int ans = 0;
    REP(i,N) if(uf.root(i) == i) ans++;
    cout << ans << endl;
    
    return 0;
}
