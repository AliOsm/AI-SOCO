#include <bits/stdc++.h>

using namespace std;

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);

	string s;	cin >> s;

	string num;
	vector <string> prices = {""};
	for (int i = 0; i < (int) s.size(); i++) {
		if (i && s[i] != '.' && isalpha(s[i]) && isdigit(s[i - 1]))
			prices.push_back("");
		if (s[i] == '.' || isdigit(s[i]))
			prices.back().push_back(s[i]);
	}


	bool decimal = false;
	for (int i = 0; i < prices.size(); i++) {
		int n = prices[i].size();
		if (n <= 3) continue;
		if (prices[i][n - 3] == '.')
			decimal = true;
	}

	for (int i = 0; decimal && i < prices.size(); i++) {
		int n = prices[i].size();
		if (n > 3 && prices[i][n - 3] == '.')
			continue;
		prices[i] += ".00";
	}

	for (string& x : prices)
		reverse(x.begin(), x.end());

	string Ans;
	int pos = 0, carry = 0, len = 0;
	for (int i = 0; decimal && i < prices.size(); i++)
		carry += (prices[i][0] - '0') + 10 * (prices[i][1] - '0');

	if (decimal) {
		if (carry % 100 == 0) {
			decimal = 0;
		} 
		else {
			string cur = to_string(carry % 100);
			if (cur.size() < 2) cur = "0" + cur;
			Ans = "." + cur;
		}
		carry /= 100;
		pos = 3;
	}

	while (pos < 2000) {
		for (int i = 0; i < prices.size(); i++) 
			for (int j = pos, digit = 1; j < min((int) prices[i].size(), pos + 3); j++, digit *= 10) 
				carry += digit * (prices[i][j] - '0');

		string cur = to_string(carry % 1000);
		carry /= 1000;
		while (cur.size() < 3) cur = "0" + cur;
		Ans = "." + cur + Ans;
		pos += 4;
	}

	reverse(Ans.begin(), Ans.end());
	while (!Ans.empty()) {
		if ((Ans.back() != '.' && Ans.back() != '0') || (decimal && Ans.size() == 4))
			break;
		Ans.pop_back();
	}
	reverse(Ans.begin(), Ans.end());

	if (Ans.size() == 0)
		Ans = "0";

	cout << Ans << '\n';
	return 0;
}
