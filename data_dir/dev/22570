#include <bits/stdc++.h>
using namespace std;

const int md = (int)1e9 + 7;
inline void add(int &a, int b) {
	a += b;
	if (a >= md) a -= md;
}
inline void sub(int &a, int b) {
	a -= b;
	if (a < 0) a += md;
}
inline int mul(int a, int b) {
	return (int) ((long long) a * b % md);
}
inline int power(int a, long long b) {
	int res = 1;
	while (b > 0) {
		if (b & 1) {
			res = mul(res, a);
		}
		a = mul(a, a);
		b >>= 1;
	}
	return res;
}
inline int inver(int a) {
	a %= md;
	if (a < 0) a += md;
	int b = md, u = 0, v = 1;
	while (a) {
		int t = b / a;
		b -= t * a; swap(a, b);
		u -= t * v; swap(u, v);
	}
	assert(b == 1);
	if (u < 0) u += md;
	return u;
}
int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	int t;
	cin >> t;
	while (t--) {
		int x;
		string s;
		cin >> x >> s;
		int ans = s.size();
		for (int l = 1; l <= x && (int)s.size() < x; l++) {
			string c = s.substr(l);
			if ((int)s.size() > l) {
				s.resize(l);
			}
			for (int j = 0; j < s[l - 1] - '0' && (int)s.size() < x; j++) {
				s += c;
			}
			if ((int)s.size() > x) {
				s.resize(x);
			}
		}
		for (int l = 1; l <= x; l++) {
			int m = 0;
			m += l;
			m %= md;
			for (int j = 0; j < s[l - 1] - '0'; j++) {
				m += (ans - l + md) % md;
				m %= md;
			}
			ans = m;
			ans %= md;
		}
		cout << ans << '\n';
	}
	return 0;
}
