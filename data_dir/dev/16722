#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
using namespace __gnu_pbds;
template<typename key, typename val>
using ordered_tree = 
  tree<key, val, less<key>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long int64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//998244353;
const int base = 2187;
const double eps = 1e-8;
const int N = 100'000;

int n, m, k;
vector<int> g[N];
int s[N];

void dfs(int v, int p)
{
  int mn = inf;
  for (auto to : g[v]) {
    dfs(to, v);
    mn = min(mn, s[to]); 
  }
  if (s[v] == -1 && g[v].empty())
    s[v] = s[p];
  if (s[v] == -1)
    s[v] = mn;
}

int64 get_ans(int v)
{
  int64 ret = 0;
  for (auto to : g[v]) {
    if (s[v] > s[to]) {
      cout << "-1\n";
      exit(0);
    }
    ret += s[to] - s[v] + get_ans(to);
  }
  return ret;
}

void solve(int test)
{
  cin >> n;
  for (int i = 1; i < n; ++i) {
    int x; cin >> x;
    --x;
    g[x].push_back(i);
  }
  for (int i = 0; i < n; ++i) {
    cin >> s[i];
  }
  dfs(0, 0);
  cout << get_ans(0) + s[0] << '\n';
}

void precalc()
{
}

int main()
{
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i)
      solve(i);
  //cerr << endl << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count();
  return 0;
}
