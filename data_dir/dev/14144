#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long 

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << endl;
        //use cerr if u want to display at the bottom
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define trace(...)
#endif

typedef trie<string,null_type,trie_string_access_traits<>,pat_trie_tag,trie_prefix_search_node_update> pref_trie;
typedef tree<long int,null_type,less<long int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
typedef cc_hash_table<long int,long int, hash<long int>, equal_to<long int>, direct_mask_range_hashing<long int>, 
hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;

string s;
long int n,k;
long int dp[2000][2000][2];
const long int MOD = 1e9 + 7;

bool stepsMatch(long int num){
  long int ans = 0;

  while(num > 1){
    long int count = 0;
    while(num){
      count += (num % 2);
      num /= 2;
    }
    num = count;
    ans++;
  }
  return (ans == k - 1);
}

long int solve(long int idx,long int count,bool tight){
  if(idx == n){
    if(count == 0)
      return 0;
    return stepsMatch(count);
  }

  if(dp[idx][count][tight] != -1)
    return dp[idx][count][tight];

  long int ans = 0;

  if(tight){
    if(s[idx] == '0')
      ans = (ans + solve(idx + 1, count, tight)) % MOD;
    else
      ans = (ans + solve(idx + 1, count + 1, tight) + solve(idx + 1, count, false)) % MOD;
  }
  else
    ans = (ans + solve(idx + 1, count + 1, tight) + solve(idx + 1, count, tight)) % MOD;

  return dp[idx][count][tight] = ans;
}

int main(){
   IOS;
 //    #ifndef ONLINE_JUDGE
 //        freopen("in.txt",  "r",  stdin);
 //        freopen("out.txt", "w", stdout);
 //    #endif
    cin>>s>>k;
    n = s.size();

    memset(dp,-1,sizeof(dp));

    if(k == 0)
      cout<<1;
    else if(k == 1)
      cout<<(solve(0,0,1) - 1  + MOD) % MOD;
    else
      cout<<solve(0,0,1);

   return 0;
}