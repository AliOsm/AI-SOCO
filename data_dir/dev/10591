#include <bits/stdc++.h>
using namespace std;
const int N=10;
int n,i,j,global_i;
char a[N];
string b;
vector <string> ans(7e4+20,"999999999");
struct node
{
	struct node *nxt[N];
	int f,belongs;
}head;

void insert(int i,struct node &s)
{
	if(i==b.size())
	{
		s.f++;
		s.belongs=global_i;
		return ;
	}
	else
	{
		if(s.nxt[b[i]-'0']==NULL) s.nxt[b[i]-'0']=new node();
		insert(i+1,*s.nxt[b[i]-'0']);
	}
}

void dfs(struct node &s)
{
	if(s.f==1)
	{
		int i=s.belongs;
		
		if(ans[i].size()>=b.size()) ans[i]=b; // Forgot equality sign :)
	}
	
	for(int i=0;i<N;i++)
	{
		if(s.nxt[i]==NULL) continue;
		
		b+=(char)(i+'0');
		dfs(*s.nxt[i]);
		b.pop_back();
	}
}

int main()
{
	ios::sync_with_stdio(false);
	
	cin>>n;
	for(i=0;i<n;i++)
	{
		cin>>a;
		
		set <string> s;
		global_i=i;
		for(int i=0;i<N-1;i++)
		{
			b="";
			for(int j=i;j<N-1;j++)
			{
				b+=a[j];
				if(s.find(b)==s.end())
				{
					insert(0,head);
					s.insert(b);
				}
			}
		}
	}
	
	b="";
	dfs(head);
	
	for(i=0;i<n;i++) cout<<ans[i]<<"\n";
}