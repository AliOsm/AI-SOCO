#pragma comment(linker, "/STACK:64000000")
 
#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_WARNINGS
#define _CRT_NO_DEPRECATE
#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <memory.h>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <complex>
 
using namespace std;
 
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
#define sq(x) ((x)*(x))
#define INF ((int)(1e9))
#define EPS ((double)(1e-6))
//#ifdef _MY_DEBUG
#define HMOD 1000000007
//#else
//#define HMOD ((int64)(1e18) + 3)
//#endif
#define HBASE 3001
#define pb push_back

const int MAXN = 500005;

vector<pii> qu;
vector<pii> c[3];
int n, m;
char s[1005][1005];
int val[3][1005][1005];
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, -1, 0, 1};
int64 ans = INF;

inline bool isValid(int x, int y)
{
	return x >= 0 && x < n && y >= 0 && y < m && s[x][y] != '#';
}

void bfs(int num)
{
	qu.clear();
	memset(val[num], 127, sizeof(val[num]));
	for (int i = 0; i < c[num].size(); i++)
	{
		val[num][c[num][i].first][c[num][i].second] = 0;
		qu.pb(c[num][i]);
	}
	for (int i = 0; i < qu.size(); i++)
	{
		if ('0' < s[qu[i].first][qu[i].second] && s[qu[i].first][qu[i].second] < '4' && s[qu[i].first][qu[i].second] != ('1' + num))
		{
			continue;
		}
		for (int j = 0; j < 4; j++)
		{
			int x = qu[i].first + dx[j];
			int y = qu[i].second + dy[j];
			if (!isValid(x, y))
			{
				continue;
			}
			if (val[num][x][y] < INF)
			{
				continue;
			}
			val[num][x][y] = val[num][qu[i].first][qu[i].second] + 1;
			qu.pb(pii(x, y));
		}
	}
	int curans = 0;
	for (int i = 0; i < 3; i++)
	{
		if (i == num)
		{
			continue;
		}
		int res = INF;
		for (int j = 0; j < c[i].size(); j++)
		{
			res = min(res, val[num][c[i][j].first][c[i][j].second] - 1);
		}
		curans += res;
	}
	ans = min(ans, (int64)curans);
	//fprintf(stderr, "num %d res %d\n", num, curans);
}

void solve()
{
	scanf ("%d%d", &n, &m);
	//c[0].reserve(n * m);
	//c[1].reserve(n * m);
	//c[2].reserve(n * m);
	qu.reserve(n * m);
	for (int i = 0; i < n; i++)
	{
		scanf ("%s", &s[i]);
		for (int j = 0; j < m; j++)
		{
			if ('0' < s[i][j] && s[i][j] < '4')
			{
				c[s[i][j] - '1'].pb(pii(i, j));
			}
		}
	}
	for (int i = 0; i < 3; i++)
	{
		bfs(i);
	}
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (s[i][j] == '.')
			{
				ans = min((int64)val[0][i][j] + (int64)val[1][i][j] + (int64)val[2][i][j] - 2, ans);
				//fprintf(stderr, "i %d j %d res %I64d\n", i, j, (int64)val[0][i][j] + (int64)val[1][i][j] + (int64)val[2][i][j] - 2);
			}
		}
	}
	if (ans < INF)
	{
		cout << ans;
	}
	else
	{
		cout << "-1\n";
	}
}
 
int main()
{
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
#endif
    srand(1337);
	solve();
    return 0;
}