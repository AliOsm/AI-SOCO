#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#include <bits/stdc++.h>
#define all(c) c.begin(),c.end()
#define ll long long
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define mod 1000000007
#define PI 3.1415926536
#define pll pair<ll, ll>
using namespace std;

bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

inline ll getPow(ll a,ll b) {
    ll res = 1ll, tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
       }
       tp *= tp;
       b >>= 1ll;
    }
    return res;
}

ll vec_mult(ll x1, ll y1, ll x2, ll y2, ll x3, ll y3) {
   return abs((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}

void ok() {
   cout << "YES" << endl;
   exit(0);
}

void no() {
   cout << "NO" << endl;
   exit(0);
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

const ll N = 1e6 + 5, inf = 2e9;
int days[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
ll xx[] = {1, -1, 0, 0, 1, 1, -1, -1};
ll yy[] = {0, 0, 1, -1, 1, -1, 1, -1};

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    ll n = nxt();
    vector<vector<ll>> g(n);
    vector<ll> c;
    ll p = -1;
    vector<ll> prev(n);
    for (int i = 0; i < n; i++) {
        ll x = nxt() - 1, cc = nxt();
        c.push_back(cc);
        prev[i] = x;
        if (x != -2) g[x].push_back(i);
        else p = i;
    }
    set<ll> te;
    vector<ll> buf;
    for (int i = 0; i < n; i++) {
        ll f = 1;
        for (auto x : g[i]) {
            f &= c[x];
        }
        if (i == p || !c[i]) f = 0;
        if (f) te.insert(i);

        buf.push_back(f);
    }
    vector<ll> used(n, 0);
    ll tt = 0;
    while (te.size()) {
        ll cur = *te.begin();
        ll per = prev[cur];
        te.erase(cur);
        if (used[cur]) continue;
        cout << cur + 1 << " ";
        tt = 1;
        used[cur] = 1;

        ll cur_f = buf[per];
        for (auto x : g[cur]) {
            g[per].push_back(x);
            cur_f &= c[x];
        }
        g[per].clear();
        if (cur_f) {
            te.insert(per);
        } else {
            if (te.count(per)) {
                te.erase(per);
            }
        }
    }
    if (!tt) cout << -1;


    return 0;
}
