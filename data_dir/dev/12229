#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define se second
#define fi first
#define pb push_back
const int N=205,M=1e9 + 7;
vector<vector<pair<int, int> > > g;
vector<int> odd;
vector<pair<int, int> > path;
bool vis[N],us[N * N];
int n,m;

void dfs(int u,int p){

	vis[u]=1;
	if((int) g[u].size() & 1) odd.pb(u);
	for(int i=0;i < g[u].size();i++){
		int v=g[u][i].fi;
		if(!vis[v]) dfs(v,u);
	}
}

void dfs(int u,int p,int in){

	vis[u]=1;
	for(int i=0;i < g[u].size();i++){
		int e=g[u][i].se;
		if(!us[e]){
			us[e]=1;
			dfs(g[u][i].fi,u,e);
		}
	}
	if(in < m && in >= 0){
		path.pb({ p, u });
	}
}

int main(){

//	freopen("in.txt","r",stdin);

	int t;
	scanf("%d",&t);
	while(t--){
		scanf("%d%d",&n,&m);
		g.clear();
		g.resize(n + 1);
		for(int i=0,a,b;i < m;i++){
			scanf("%d%d",&a,&b);
			g[a].pb({ b, i }), g[b].pb({ a, i });
		}
		memset(vis,0,sizeof vis);
		int c=m,ans=n;
		for(int i=1;i <= n;i++){
			if(!vis[i]){
				odd.clear();
				dfs(i,-1);
				ans-=odd.size();
				while(odd.size()){
					int a=odd.back();
					odd.pop_back();
					int b=odd.back();
					odd.pop_back();
					g[a].pb({ b, c }), g[b].pb({ a, c });
					c++;
				}
			}
		}
		memset(vis,0,sizeof vis);
		memset(us,0,sizeof us);
		path.clear();
		for(int i=1;i <= n;i++){
			if(!vis[i]) dfs(i,-1,-1);
		}
		printf("%d\n",ans);
		for(int i=0;i < path.size();i++){
			printf("%d %d\n",path[i].fi,path[i].se);
		}
	}

#ifndef ONLINE_JUDGE
	cout << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
#endif

	return 0;

}
