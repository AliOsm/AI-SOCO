#include <bits/stdc++.h>
#pragma GCC optmize("O3")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

using namespace std;
typedef long long Long;
 
const Long MX = 1e6 + 1;
 
const Long K = MX;
 
Long fact[K];
vector<Long> primos;
 
void extSieve(){
	for( Long i=2; i*i < K; ++i ){
		if( fact[ i ] == 0 ){
			for( Long j = i*i ; j < K ; j+=i ) if( fact[j ] == 0) fact[ j ] = i;
		}
	}
	for( Long i=2; i<K; ++i ){
		if( fact[ i ] == 0 ){
			primos.emplace_back(i);
			fact[ i ] = i;
		}
	}
}
 
Long A[MX];
Long B[MX];
Long C[MX];

Long c_mediana(Long l, Long r){
	Long ant = 0;
	Long sgt = 0;
	Long ans = 0;
	Long ac = 0;
	for(Long i = l; i <= r; i++){
		ans += C[i] * (i - l);
		if(i != l) sgt += C[i];
	}
	ac = ans;
	for(Long i = l+1; i <= r; i++){
		ant += C[i-1];
		ac = ac + ant - sgt;
		sgt -= C[i];
		ans = min(ans,ac);
	}
	return ans;
}
 
Long calcula(Long x, Long n){
	Long ans = 0;
	for(Long i = 0; i < n; i++){
		A[i] %= x;
		if(A[i] == 0) continue;
		
		Long l = i;
		Long falta = x;
		while(i < n && falta > 0){
			if(A[i] >= falta){
				C[i] = falta;
				A[i] -= falta;
				falta = 0;
				i--;
				break;
			}else{
				C[i] = A[i];
				falta -= A[i];
				A[i] = 0;
			}
			i++;
		}
		ans += c_mediana(l,i+1);
	}
	return ans;
}
 
int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	cout.precision(10);
	cout << fixed;
	
	extSieve();
	
	Long n;
	cin >> n;
	Long sum = 0;
	for(Long i = 0; i < n; i++){
		cin >> A[i];
		B[i] = A[i];
		sum += A[i];
	}
	
	if(sum == 1){
		cout << -1 << "\n";
		return 0;
	}
	
	vector<Long> divi;
	for(Long x : primos){
		Long cnt = 0;
		while(sum % x == 0){
			sum /= x;
			cnt++;
		}
		if(cnt != 0) divi.emplace_back(x);
	}
	if(sum > 1) divi.emplace_back(sum);
	
	
	Long ans = 1e18;
	for(Long x : divi){
		ans = min(ans,calcula(x,n));
		for(Long i = 0; i < n; i++) A[i] = B[i];
	}
	
	cout << ans << "\n";
	return 0;
}
