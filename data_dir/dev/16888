#include <bits/stdc++.h>
using namespace std;

int n, s, l, ans = 0;
vector<vector<pair<int, int> > > g;
vector<int> dp;

void solve() {
	set<pair<int, int> > st;
	vector<char> used;
	used.resize(n, false);
	st.insert(make_pair(0, s));
	while(st.size()) {
		int v = st.begin() -> second;
		st.erase(st.begin());
		if(used[v]) {
			continue;
		}
		used[v] = true;
		for(int i = 0; i < g[v].size(); ++i) {
			int to = g[v][i].first,
				dist = g[v][i].second;
			if(dp[to] > dp[v] + dist) {
				dp[to] = dp[v] + dist;
				st.insert(make_pair(dp[to], to));
			}
		}
	}
	int cur = 0;
	for(int i = 0; i < n; ++i) {
		if(dp[i] == l) {
			++ans;
		} else if(dp[i] < l) {
			int dif = l - dp[i];
			for(int j = 0; j < g[i].size(); ++j) {
				int dist = g[i][j].second,
					to = g[i][j].first;
				if(dp[to] + dist - dif > dp[i] + dif) {
					++ans;
				} else if(dp[to] + dist - dif == dp[i] + dif && dist != dif) {
					++cur;
				}
			}
		}
	}
	ans += cur / 2;
}

int main() {
	int m;
	scanf("%d%d%d", &n, &m, &s);
	--s;
	dp.resize(n, int(1e9));
	dp[s] = 0;
	g.resize(n);
	while(m--) {
		int from, to, w;
		scanf("%d%d%d", &from, &to, &w);
		--from;
		--to;
		g[from].push_back(make_pair(to, w));
		g[to].push_back(make_pair(from, w));
	}
	scanf("%d", &l);
	solve();
	printf("%d", ans);

	return 0;
}