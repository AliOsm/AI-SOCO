/**
 *    +--+--+--++--++--In the name of ALLAH--++--++--+--+--+
 *
 *    author:  skmonir
 *    created: 06-Sep-2018 15:59:55
**/

#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define mod                 1000000007LL
#define len(x)              (int) x.size()
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> inline void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = 2e5 + 7;
const int inf = 1e9 + 7;

set <int> g[N];
set <pair <int, int> > st;
int U[N], V[N], D[N], RES[N];

void reform(int u) {
    st.erase({D[u], u});
    --D[u];
    st.insert({D[u], u});
}

int solve() {
    int n, m, k; Int(n, m, k);
    FOR (i, 1, m) {
        Int(U[i], V[i]);
        g[U[i]].insert(V[i]);
        g[V[i]].insert(U[i]);
        ++D[U[i]], ++D[V[i]];
    }

    FOR (i, 1, n) st.insert({D[i], i});

    int cur = n;
    ROF (i, m, 1) {
        while (!st.empty() and (*st.begin()).first < k) {
            int u = (*st.begin()).second;
            st.erase(st.begin());
            for (int v : g[u]) {
                reform(v);
                g[v].erase(u);
            }
            --cur;
            g[u].clear();
        }
        RES[i] = cur;

        if (g[U[i]].find(V[i]) != g[U[i]].end()) {
            g[U[i]].erase(V[i]);
            g[V[i]].erase(U[i]);
            reform(U[i]), reform(V[i]);
        }
    }

    FOR (i, 1, m) printf("%d\n", RES[i]);

    return 0;
}

int main() {
    int tests = 1, CaseNo = 0; //Int(tests);
    while (tests--) {
        //printf("Case %d: ", ++CaseNo);
        solve();
    }
    return 0;
}