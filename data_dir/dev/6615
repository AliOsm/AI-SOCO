#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
int dp[54][20001];
int pre[54][20001];
int suf[54][20001];
int g[54][20001];
int R,C,k;
int cs[54][20001];
int sum(int i,int l,int r){
	return cs[i][r]-cs[i][l-1];
}
int main() {
	cin>>R>>C>>k;
	for(int i=0;i<R;++i)
		for(int j=1;j<=C;++j){
			scanf("%d",&g[i][j]);
			cs[i][j]=g[i][j]+cs[i][j-1];
		}
	int res=0;
	for(int i=R-1;i>=0;--i){
		for(int l=1;l+k-1<=C;++l){
			dp[i][l]=-1e9-10;
			if(l-k>=1)
				dp[i][l]=max(dp[i][l],pre[i+1][l-k]);
			if(l+k<=C)
				dp[i][l]=max(dp[i][l],suf[i+1][l+k]);
		}
		priority_queue<pair<int,int> > q;
		for(int l=1;l+k-1<=C;++l){
			q.push({dp[i+1][l]-cs[i+1][l+k-1],l});
			while(!q.empty() && q.top().second+k-1<l)
				q.pop();
			if(!q.empty())
				dp[i][l]=max(dp[i][l],q.top().first+cs[i+1][l-1]);
		}
		while(!q.empty())
			q.pop();
		for(int l=C-k+1;l>0;--l){
			q.push({dp[i+1][l]+cs[i+1][l-1],l});
			while(!q.empty() && q.top().second>l+k-1)
				q.pop();
			if(!q.empty())
				dp[i][l]=max(dp[i][l],q.top().first-cs[i+1][l+k-1]);
		}
		for(int l=1;l+k-1<=C;++l){
			int me=sum(i,l,l+k-1)+sum(i+1,l,l+k-1);
			dp[i][l]+=me;
			if(i==0)
				res=max(res,dp[i][l]);
		}
		for(int l=1;l<=C;++l)
			pre[i][l]=max(pre[i][l-1],dp[i][l]);
		for(int l=C;l>0;--l)
			suf[i][l]=max(suf[i][l+1],dp[i][l]);
	}
	cout<<res<<endl;
	return 0;
}