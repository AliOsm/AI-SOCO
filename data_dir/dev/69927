#include <bits/stdc++.h>
#define F first
#define S second
#define all(a) a.begin(),a.end()
#define setDP(arr) memset(arr,-1,sizeof arr)
#define oo 2000000000
#define inf 100000000000000000
#define M  1000000007
#define M2 1000000009
#define M3 998244353
typedef long long ll;
using namespace std;
const int N = 305001;
const int SQRT = 350;
const long double PI = acos(-1);

struct Q{
    int s,e,sz;
    bool operator<(Q&x){
        if(s/SQRT!=x.s/SQRT)
            return s < x.s;
        if((s/SQRT)&1)
            return e < x.e;
        return x.e<e;
    }
    Q(int s,int e , int sz){
        this->s = s;
        this->e = e;
        this->sz=sz;
    }
};

ll ans;
int nxt[N];
int n,a[N];
int prv[N];
int l=0,r=-1;
int ctr=0;
int freq[N];
stack<int> st;
priority_queue<int> q;
vector<Q> v;

void addRight(){
    r++;
    freq[a[r]]++;
    if(freq[a[r]]==1){
        ctr++;
        q.push(a[r]);
    }
}

void addLeft(){
    l--;
    freq[a[l]]++;
    if(freq[a[l]]==1){
        ctr++;
        q.push(a[l]);
    }
}

void delRight(){
    freq[a[r]]--;
    if(freq[a[r]]==0){
        ctr--;
    }
    r--;
}

void delLeft(){
    freq[a[l]]--;
    if(freq[a[l]]==0){
        ctr--;
    }
    l++;
}

void start(int s , int e){
    while(r<e)
        addRight();
    while(l>s)
        addLeft();
    while(r>e)
        delRight();
    while(l<s)
        delLeft();
}

void calc(int s, int e , int sz){
    if(e-s+1<sz)
        return;
    start(s,s+sz-1);
    while(r<=e){
        if(ctr==sz){
            while(!q.empty()&&!freq[q.top()]){
                q.pop();
            }
            if(!q.empty()&&q.top()==sz)ans++;
        }
        delLeft();
        addRight();
    }
}

signed main(){
    #ifndef ONLINE_JUDGE
        freopen("in.txt","r",stdin);
    #endif
    cin >> n;
    for(int i=0;i<n;i++)scanf("%d",a+i);
    for(int i = n-1 ; i >=0; i--){
        while(!st.empty()){
            if(a[st.top()]>=a[i])
                break;
            st.pop();
        }
        if(st.empty())
            nxt[i]=n;
        else
            nxt[i]=st.top();
        st.push(i);
    }
    while(!st.empty())
        st.pop();
    for(int i = 0 ; i < n ; i++){
        while(!st.empty()){
            if(a[st.top()]>=a[i])
                break;
            st.pop();
        }
        if(st.empty())
            prv[i]=-1;
        else
            prv[i]=st.top();
        st.push(i);
    }
    while(!st.empty())st.pop();
    for(int i = 0,a,b,c ; i < n ; i++){
        a=prv[i]+1;
        b=nxt[i]-1;
        c=::a[i];
        if(b-a+1>=c){
            v.push_back(Q(a,b,c));
        }
    }
    sort(all(v));
    for(int i = 0 ; i < v.size() ; i++){
        calc(v[i].s,v[i].e,v[i].sz);
    }
    cout << ans << endl;
}
