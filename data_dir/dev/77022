#include <bits/stdc++.h>
using namespace std;

void chmax(int& a, int b){
    a = max(a, b);
}

int nth_bit(int64_t num, int n){
    return (num >> n) & 1;
}

int main(){
    int N, M;
    cin >> N >> M;
    static int L2R[500001];
    for(int i=0; i<N; i++){
        int l, r;
        scanf("%d %d", &l, &r);
        chmax(L2R[l], r);
    }

    int R = -1;
    vector<int> LS, RS;
    for(int i=0; i<=500000; i++){
        if(L2R[i] > 0){
            if(R < L2R[i]){
                R = L2R[i];
                LS.push_back(i);
                RS.push_back(R);
            }
        }
    }
    int sz = LS.size();
    static int dp[18][200000];
    for(int i=0; i<sz; i++){
        dp[0][i] = upper_bound(LS.begin(), LS.end(), RS[i]) - LS.begin() - 1;
    }
    for(int k=0; k<17; k++){
        for(int i=0; i<sz; i++){
            dp[k+1][i] = dp[k][dp[k][i]];
        }
    }

    
    for(int i=0; i<M; i++){
        int l, r;
        scanf("%d %d", &l, &r);
        int s = upper_bound(LS.begin(), LS.end(), l) - LS.begin() - 1;
        int t = lower_bound(RS.begin(), RS.end(), r) - RS.begin();
        if(s == -1 || t == sz){
            printf("-1\n");
            continue;
        }
        int ng = -1, ok = N+1;
        while(ok-ng>1){
            int mid = (ok+ng)/2;
            int s2 = s;
            for(int k=0; k<18; k++) if(nth_bit(mid, k)) s2 = dp[k][s2];
            ((s2 >= t) ? ok : ng) = mid;
        }
        int ans = ok==N+1 ? -1 : ok+1;
        printf("%d\n", ans);
    }
    return 0;
}
