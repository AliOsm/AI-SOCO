//#define ONLINE_JUDGE

#if defined(ONLINE_JUDGE)
#define _SECURE_SCL 0
#endif

#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <functional>
#include <memory>
#include <cmath>
#include <climits>
#include <numeric>
#include <tuple>
#include <memory.h>
#include <stdint.h>

#if !defined(__GNUC__)
#else // !defined(__GNUC__)
#define _CrtDbgBreak() __builtin_trap()
#endif // !defined(__GNUC__)

#if defined(ONLINE_JUDGE)
#define LOCAL_TEST 0
#else 
#define LOCAL_TEST 1
#endif

#if LOCAL_TEST
struct AssertsCounter
{
	AssertsCounter(): counter(0) {}
	~AssertsCounter() { std::cerr << std::endl << "DIAG: " << (counter == 0 ? "OK" : "FAIL!!!") << " Asserts count: " << counter << std::endl; }
	void Increment() { counter++; }
	uint32_t counter;
};
AssertsCounter g_assertsCounter;
#define LOCAL_ASSERT(expr) { if (!(expr)) {std::cerr << "ASSERT FAILED (" << __LINE__ << "): '" << #expr << "'" << std::endl; g_assertsCounter.Increment(); _CrtDbgBreak(); } }
#define LOCAL_ASSERT_EQ(expr1, expr2) { if ((expr1) != (expr2)) {std::cerr << "ASSERT FAILED (" << __LINE__ << "): '" << #expr1 << "' == '" << #expr2 << "' (" << (expr1) << " vs " << (expr2) << "')" << std::endl; g_assertsCounter.Increment(); _CrtDbgBreak(); } }
#else
volatile bool isLocalTestEnabled = 0;
#define LOCAL_ASSERT(expr)
#define LOCAL_ASSERT_EQ(expr1, expr2)
#endif

bool g_isLocalPrintEnabled = (bool)(LOCAL_TEST);
#define LOCAL_PRINT() if (!g_isLocalPrintEnabled) { } else std::cerr // << .. << ..

typedef std::string string8_t;
typedef long double ld_t;

typedef std::vector<size_t> vector_size_t;
typedef std::vector<uint8_t> vector_uint8_t;
typedef std::vector<int32_t> vector_int32_t;
typedef std::vector<uint32_t> vector_uint32_t;
typedef std::vector<int64_t> vector_int64_t;
typedef std::vector<uint64_t> vector_uint64_t;
typedef std::vector<string8_t> vector_string8_t;

typedef std::vector<vector_size_t> vector_2d_size_t;
typedef std::vector<vector_int32_t> vector_2d_int32_t;
typedef std::vector<vector_uint32_t> vector_2d_uint32_t;
typedef std::vector<vector_int64_t> vector_2d_int64_t;
typedef std::vector<vector_uint64_t> vector_2d_uint64_t;

typedef std::set<size_t> set_size_t;
typedef std::set<int32_t> set_int32_t;
typedef std::set<uint32_t> set_uint32_t;
typedef std::set<int64_t> set_int64_t;
typedef std::set<uint64_t> set_uint64_t;
typedef std::set<string8_t> set_string8_t;

typedef std::multiset<size_t> multiset_size_t;
typedef std::multiset<string8_t> multiset_string8_t;

// Auxiliary functions definition
// 
template<typename T> void UpdateMin(T& a, const T b) {a = std::min(a, b);}
template<typename T> void UpdateMax(T& a, const T b) {a = std::max(a, b);}

const ld_t Pi = std::atan(1.0L) * 4.0L;
static const ld_t Eps = 1.0e-09;
template<typename T> bool IsEqual(const T a, const T b) { return std::abs(a - b) < Eps; }
template<typename T> bool IsGreater(const T a, const T b) { return a > b + Eps; }
template<typename T> bool IsLess(const T a, const T b) { return a + Eps < b; }
template<typename T> bool IsGreaterEqual(const T a, const T b) { return !IsLess(a, b); }
template<typename T> bool IsLessEqual(const T a, const T b) { return !IsGreater(a, b); }

template<typename T> string8_t ToStr(const T& val) { std::ostringstream ostr; ostr << val; return ostr.str(); }
template<typename T> bool FromStr(const string8_t& str, T& val) {std::istringstream istr(str); istr >> val; return !!istr; }

template<typename T> std::istream& operator>>(std::istream& ist, std::vector<T>& data)
{
	LOCAL_ASSERT(!!ist);
	for (size_t i = 0; i < data.size(); i++) { ist >> data[i]; }
	return ist;
}

template<typename T> T Read(std::istream& ist)
{
	LOCAL_ASSERT(!!ist);
	T val; ist >> val; return val;
}

template<typename T> std::ostream& operator<<(std::ostream& ost, const std::vector<T>& data)
{
	for (size_t i = 0; i < data.size(); i++) { if (i != 0) { ost << ' '; } ost << data[i]; }
	return ost;
}

#if defined(ONLINE_JUDGE)
template<size_t id> class StopWatch { };
#else
#include <library/lib_stopwatch.h>
#include <library/lib_random.h>
library::random::Rand g_rnd;
#endif

#if LOCAL_TEST
typedef std::multiset<uint64_t> mset_uint64_t;

uint64_t GetAnsTest(const uint64_t n)
{
	if (n > 1000)
		return 0;

	uint64_t ans = 0;

	mset_uint64_t x;
	for (uint64_t i = 0; i < n; i++)
	{
		x.insert(0);
	}

	while (x.size() > 1)
	{		
		mset_uint64_t y;

		while (x.size() >= 2)
		{
			mset_uint64_t::iterator pMin = x.begin();
			mset_uint64_t::iterator pMax = x.end(); --pMax;

			LOCAL_ASSERT(*pMax <= *pMin + 1);
			
			const uint64_t c = *pMax + 1;
			y.insert(c);
			UpdateMax(ans, c);

			x.erase(pMin);
			x.erase(pMax);
		}

		if (!x.empty())
		{
			LOCAL_ASSERT(x.size() == 1);
			y.insert(*x.begin());
		}

		x.swap(y);
	}

	return ans;
}
#endif

uint64_t GetMinN(uint64_t z)
{
	if (z == 0)
		return 1;
	uint64_t n = (1ULL << (z - 1)) + 1;
	return n;
}

uint64_t GetAns(const uint64_t n)
{
	if (n == 2)
		return 1;

	uint64_t ans = 1;
	uint64_t f1 = 1;
	uint64_t f2 = 2;

	while (true)
	{
		if (n >= f1 + f2)
		{
			ans++;
		}
		else
		{
			break;
		}

		uint64_t t = f1 + f2;
		f1 = f2;
		f2 = t;
	}

	return ans;
}

uint64_t GetAns2(const uint64_t n)
{
	uint64_t ans = 1;
	for (uint64_t z = 0; z <= 61; z++)
	{
		const uint64_t p1 = GetMinN(z + 1);
		const uint64_t p2 = GetMinN(z);
		if (n >= p1 + p2)
		{
			UpdateMax(ans, z + 2);
		}
	}

	return ans;
}

bool Solve(std::istream& ist, std::ostream& ost, const bool multipleTestMode)
{
	StopWatch<1> sw; (void)sw;

	// 
	uint64_t n;
	ist >> n;

	if (multipleTestMode && !ist)
		return false;

	//
	LOCAL_PRINT() << std::endl << "Next test " << n << std::endl;

	uint64_t ans = GetAns(n);
	ost << ans << std::endl;
	
	return multipleTestMode;
}


#if LOCAL_TEST
void Test()
{
	std::map<uint64_t, uint64_t> s;
	std::map<uint64_t, uint64_t> sMinN;
	for (uint64_t t = 2; t < 200; t++)
	{
		const uint64_t test = GetAnsTest(t);
		s[t] = test;
		const uint64_t minN = GetMinN(test);
		const uint64_t nextN = GetMinN(test + 1);

		LOCAL_ASSERT(minN == (1ULL << (test - 1)) + 1);
		LOCAL_ASSERT(minN <= t);
		LOCAL_ASSERT(nextN > t);

		const uint64_t ans1 = GetAns(t);
		const uint64_t ans2 = GetAns2(t);
		LOCAL_ASSERT_EQ(ans1, ans2);
	}

	s.empty();
}
#endif

int main(int argc, const char *argv[])
{
#if LOCAL_TEST
	//Test();
#endif

    std::ios_base::sync_with_stdio(false);
    std::istream* ist = &std::cin;
    std::ostream* ost = &std::cout;
    
    std::unique_ptr<std::istream> fileInput;
    
    if (argc > 1)
    {
        fileInput.reset(new std::ifstream(argv[1]));
        if (!(*fileInput))
        {
            std::cout << "File not found: " << argv[1] << std::endl;
        }
        ist = fileInput.get();
    }    
    
#if defined(ONLINE_JUDGE)
    Solve(*ist, *ost, false);
#else
    while(Solve(*ist, *ost, true)) {};
#endif
}
