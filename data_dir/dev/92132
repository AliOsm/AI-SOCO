#include <bits/stdc++.h>
using namespace std;
#define pii             pair<LL , LL >
#define inf             1111111111
#define in(a)           scanf("%I64d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%I64d%I64d", &a, &b)
#define in3(a, b, c)    scanf("%I64d%I64d%I64d", &a, &b, &c)
#define pn              printf("\n")
#define pr(a)           printf("%I64d\n", a)
#define prs(a)          printf("%I64d ", a)
#define pr2(a, b)       printf("%I64d %I64d\n", a, b)
#define pr3(a, b, c)    printf("%I64d %I64d %I64d\n", a, b, c)
#define pcs(a)          printf("Case %I64d: ", a)
#define mp              make_pair
#define vi              vector<LL >
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define pb              push_back
#define mem(a, b)       memset((a), (b), sizeof(a))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)
#define x               first
#define y               second

typedef long long LL;
//LL  dx[]={1,0,-1,0};LL dy[]={0,1,0,-1}; //4 Direction
//LL  dx[]={1,1,0,-1,-1,-1,0,1,0};LL dy[]={0,1,1,1,0,-1,-1,-1,0};//8 direction
//LL  dx[]={2,1,-1,-2,-2,-1,1,2};LL dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(LL n, LL pos) {return (n & (1<<pos))>>pos;} //typecast 1 in case of int
//LL  on(LL n, LL pos) {return n | (1<<pos);} //typecast 1 in case of int
//LL  off(LL n, LL pos) {return n & ~(1<<pos);} //typecast 1 in case of int
//bool operator < (const data &d) const{return cost<d.cost;} //reverse in priority queue

const LL M=100010;

map<LL, LL>len, one;

pair<LL, LL> call(LL n)
{
    if (len[n] != 0) return mp(len[n], one[n]);

    if (n == 0) return mp(1, 0);
    if (n == 1) return mp(1, 1);

    pii r = call(n/2);
    len[n] = 2 * r.first + 1;
    one[n] = 2 * r.second + n % 2;

    return mp(len[n], one[n]);
}

LL solve(LL n, LL x)
{
    if (x == 0) return 0;
    else if (x == len[n]) return one[n];
    else if (x <= len[n/2]) return solve(n/2, x);
    else if (x == len[n/2] + 1) return one[n/2] + n % 2;
    else return one[n/2] + n % 2 + solve(n/2, x - len[n/2] - 1);
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("C:\\Users\\Dell\\Desktop\\in.txt", "r", stdin);
//    freopen("C:\\Users\\Dell\\Desktop\\in.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);

    //consider n == 0/1

    one[1] = len[1] = len[0] = 1;
    one[0] = 0;

    LL n, l, r;

    in3(n, l, r);

    call(n);
    pr(solve(n, r) - solve(n, l-1));


return 0;
}

