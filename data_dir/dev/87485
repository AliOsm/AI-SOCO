#include <vector>
#include <list>
#include <map>
#include <math.h>
#include <cmath>
#include <set>
#include <queue>
#include <deque>
#include <string>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string.h>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <unordered_map>

using namespace std;

#define ll  long long int
#define ld long double

int n, m, IndexI, IndexJ;
ll answer;
char Map[1005][1005];
int Distances[1005][1005];
int dx[] = { -1, +1, 0, 0 };
int dy[] = { 0, 0, -1, +1 };
inline bool valid(int x, int y)
{
	return x >= 1 && y >= 1 && x <= n && y <= m && !Distances[x][y] && (Map[x][y] != 'T');
}
inline bool Val(char x)
{
	return x >= '1' && x <= '9';

}
void BFS()
{

	queue<pair<pair<int, int>, int> >Q;
	Q.push({{ IndexI, IndexJ},0 });
	Distances[IndexI][IndexJ] = 0;
	while (!Q.empty())
	{
		pair<pair<int, int>, int>Node = Q.front();
		Q.pop();
		for (short i = 0; i < 4; i++)
		if (valid(Node.first.first + dx[i], Node.first.second + dy[i]))
		{
			Q.push({ { Node.first.first + dx[i], Node.first.second + dy[i]}, Node.second + 1 });
			Distances[Node.first.first + dx[i]][Node.first.second + dy[i]] = Node.second + 1;
		}

	}
}
int main()
{
	ios::sync_with_stdio(false);
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr), cout.tie(nullptr);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	cin >> n >> m;
	int IndexK=0, IndexL=0;
	for (int i = 1; i <= n; i++)
	for (int j = 1; j <= m; j++)
	{
		cin >> Map[i][j];
		if (Map[i][j] == 'E')IndexI = i, IndexJ = j;
		if (Map[i][j] == 'S')IndexK = i, IndexL = j;
	}
	BFS();
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			if (Distances[i][j] && Val(Map[i][j]) && Distances[IndexK][IndexL] >= Distances[i][j])
				answer += (Map[i][j] - '0');


	cout << answer << endl;
	return 0;
}