#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define F first
#define S second
#define ll long long
#define ull  unsigned long long
#define pb push_back

using namespace std;
using namespace __gnu_pbds;
typedef  tree< int , null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
const int N = 200000;
int p[N], c[N], l[N], nxt[N], n, ans[N];
pair < pair < int, int >, int >  a[N];
pair < int, int > go[N], t[4 * N];
const int C = 350;
void build(int v, int tl, int tr){
    if (tl == tr) t[v] = {a[tl].F.F + a[tl].F.S, tl}; else{
        int mid = (tl + tr) / 2;
        build(v + v, tl, mid);
        build(v + v + 1, mid + 1, tr);
        t[v] = max(t[v + v], t[v + v + 1]);
    }
}
pair < int, int > gt(int v, int tl, int tr, int l, int r){
    if (l > r) return {0, 0};
    if (l == tl && r == tr) return t[v];
    int mid = (tl + tr) / 2;
    return max(gt(v + v, tl, mid, l, min(mid, r)), gt(v + v + 1, mid + 1, tr, max(mid + 1, l), r));
}
main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    cin >> n;
    for (int i = 1; i <= n; i++){
        cin >> a[i].F.F >> a[i].F.S ;
        a[i].S = i;
        a[i].F.S--;
        a[i].F.F += 1e8 + 20;
    }
    sort(a + 1, a + n + 1);
    build(1, 1, n);
    for (int i = n; i >= 1; i--){
        int L = i;
        int R = n + 1;
        while(R - L > 1){
            int mid = (R + L) / 2;
            if (a[mid].F.F - a[i].F.F > a[i].F.S) R = mid; else L = mid;
        }
        if (L == n){
            nxt[i] = n;
            ans[i] = n - i + 1;
            continue;
        }
        auto x = gt(1, 1, n, i, L);
        if (x.S == i){
            ans[i] = L - i + 1;
        } else{
            ans[i] = ans[x.S] + x.S - i;
        }
    }
    for (int i = 1; i <= n; i++) p[a[i].S] = ans[i];
    for (int i = 1; i <= n; i++) cout << p[i] << " ";
}
