#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

typedef long long ll;
using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 2000000005;
const ll INFLL = 1000000000000000002ll;
const ll MOD = 1000000007;

inline ll min(ll a, ll b, ll c){return min(min(a,b),c);}
inline ll min(ll a, ll b, ll c, ll d){return min(min(min(a,b),c),d);}
inline ll max(ll a, ll b, ll c){return max(max(a,b),c);}
inline ll max(ll a, ll b, ll c, ll d){return max(max(max(a,b),c),d);}

// -------------------------------------------------------------------------------------------------------------

int A[10];
string M[10], S;

int main()
{
    cin >> S;
    M[0] = "1869";
    M[1] = "1968";
    M[2] = "1689";
    M[3] = "6198";
    M[4] = "1698";
    M[5] = "1986";
    M[6] = "1896";

    bool rem_1 = false, rem_6 = false, rem_8 = false, rem_9 = false;
    string str;

    f(i,0,SZ(S)-1)
    {
        if(S[i] == '1')
        {
            if(!rem_1) rem_1 = true;
            else str += S[i];
        }
        else if(S[i] == '6')
        {
            if(!rem_6) rem_6 = true;
            else str += S[i];
        }
        else if(S[i] == '8')
        {
            if(!rem_8) rem_8 = true;
            else str += S[i];
        }
        else if(S[i] == '9')
        {
            if(!rem_9) rem_9 = true;
            else str += S[i];
        }
        else str += S[i];
    }

    int m = 0;
    f(i,0,SZ(str)-1)
    {
        int n = str[i] - '0';
        m *= 10;
        m += n;
        m %= 7;
    }

    m *= 10000;
    m %= 7;

    int need = (7 - m) % 7;
    str += M[need];
    int start = 0;
    while(str[start] == '0') str += '0', start++;
    cout << str.substr(start);
}
