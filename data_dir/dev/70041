#include<bits/stdc++.h>
#define int long long
#define ll long long
#define F first
#define S second
#define ld long double
using namespace std;

const int MAXN = 201 * 1001 ,  MOD = 1e9 + 9 , BASE = 1e6 + 3  ;

int lhash [ MAXN ] = {} , h, tv [ MAXN ] = {} ;

queue < int > q [ 30 ] ;

int val [ 30 ] ;

int n , m ;
string s , t ;

inline int get_hash(int l , int r)
{
    int ans = ( lhash[r] - lhash[l] * tv[r-l] ) % MOD ;
    if(ans < 0 )
        ans += MOD ;
    return ans ;
}

int match [ 30 ] = {} ;

bool solve(int x , int hh )
{

    for(int i = 1 ; i < 27 ; i ++ )
        match[i] = -1 ;
    for(int i = 1 ; i <= 26 ; i ++ )
    {
        if(q[i].size() == 0 )
            continue;
        if(match[i] != -1 && match[i] != t[q[i].front() - x ])
            return 0 ;
        if(match [ t[q[i].front() - x ] ] != i && match [ t[q[i].front() - x ] ] != -1 )
            return 0 ;
        match [ i ]  = t[q[i].front()-x] ;
        match [ t[q[i].front() - x ] ] = i ;
    }
    for(int i = 1 ; i <= 26 ; i ++ )
    {

        if(match[i] != -1 )
        {
           // cout << i << ' ' << match[i] << endl ;
            hh += val[i] * (match[i] - i);
            hh %= MOD ;
            if ( hh < 0 )
                hh += MOD ;
        }
    }
    return (hh == h) ;

}

vector < int > ans ;

int32_t main()
{
   ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> n >> m >> s >> t ;
    for(int i =0 ; i < n ; i ++ )
        s[i] -= 'a' - 1 ;
    for(int i = 0 ; i < m ; i ++ )
        t[i] -= 'a' - 1 ;

    tv[0] = 1;
    lhash[1] = s[0];


    for(int i = 1 ; i < n ; i ++ )
    {
        tv[i] = ( BASE * tv[i-1]) % MOD ;
        lhash[i+1] = (lhash[i] * BASE + s[i]) % MOD ;
    }

    for(int i = 0 ; i < m ; i ++ )
        h = ( h * BASE + t[i]) % MOD;

    for(int i = 0 ; i < m ; i ++ )
    {
        q[s[i]].push(i);
        val[s[i]] +=  tv[m-i-1] ;
    }
    if(solve(0,get_hash(0,m)))
        ans.push_back(1);
  //  return 0 ;
    for(int i = 1 ; i + m - 1 < n ; i ++ )
    {
        q[s[i-1]].pop();
        val[s[i-1]] -= tv[m-1] ;
        if(val[s[i-1]] < 0 )
            val[s[i-1]] += MOD ;
        for(int i = 1 ; i <= 26 ; i ++ )
            val[i] = BASE * val[i] % MOD;
        val[s[i+m-1]] ++ ;
        q[s[i+m-1]].push(i+m-1);
        if(solve(i,get_hash(i,i+m)))
            ans.push_back(i+1);
    }
    cout << ans.size() << '\n';
    for(auto u : ans)
        cout << u << ' ' ;




}
