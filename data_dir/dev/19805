//#include <cstdio>
#include <iostream>

#include <cstring>

#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
//#include <stack>
#include <cassert>

using namespace std;

#define SZ(a) int((a).size())
#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)

typedef long long llong;
typedef vector<int> VI;
typedef vector<VI> VVI;

typedef pair<int,int> II;

int N, M;
VI X;
int dist_closest_tree(int x) {
   auto it = lower_bound(X.begin(), X.end(), x);
   if (it == X.end()) {
      return x - *prev(it);
   }
   if (it == X.begin())
      return *it - x;
   return min( x - *prev(it), *it - x );
}

typedef priority_queue<II, vector<II>, greater<II> > PQ;
void update(PQ& pq, map<int, char>& occ, int x) {
   if (occ.count(x-1) == 0) {
      int d = dist_closest_tree(x-1);
      pq.push(II(d, x-1));
      occ[x-1] = '.';
   }
   if (occ.count(x+1) == 0) {
      int d = dist_closest_tree(x+1);
      pq.push(II(d, x+1));
      occ[x+1] = '.';
   }
}

void solve() {
   sort(X.begin(), X.end());

   map<int, char> occ;
   for (int x : X)
      occ[x] = 't';

   PQ pq;
   for (int x : X)
      update(pq, occ, x);
   
   llong res = 0;
   VI Y;
   FOR(m, 1, M) {
      assert(!pq.empty());
      II cur = pq.top();
      pq.pop();

      int d, x;
      tie(d, x) = cur;

   // cerr << "x:" << x << "  d:" << d << endl;

      assert(occ[x] == '.');

      occ[x] = 'h';

      Y.push_back(x);
      res += d;
      update(pq, occ, x);
   }
   
   cout << res << '\n';
   for (int x : Y)
      cout << x << ' ';
   cout << '\n';
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(nullptr);

   cin >> N >> M;
   X = VI(N);
   REP(i, N)
      cin >> X[i];

   solve();

   return 0;
}
