#include <bits/stdc++.h>

using namespace std;

const int N = 1e6 + 6;

vector<int> g[N];
int sz[N];


void dfs(int v = 0, int par = -1) {
  sz[v] = 1;
  for (int i = 0; i < (int)g[v].size(); ++i) {
    if (g[v][i] == par) {
      swap(g[v][i], g[v].back());
      g[v].pop_back();
      break;
    }
  }
  for (int u : g[v]) {
    dfs(u, v);
    sz[v] += sz[u];
  }
  sort(g[v].begin(), g[v].end(), [](int x, int y) {
    return sz[x] > sz[y];
  });
}

void dfs2(deque<int> & res, int v = 0) {
  if ((int)g[v].size() > 0) {
    dfs2(res, g[v][0]);
  }
  for (int i = 1; i < (int)g[v].size(); ++i) {
    int u = g[v][i];
    deque<int> tmp;
    dfs2(tmp, u);
    while (!tmp.empty()) {
      res.push_back(tmp.front());
      tmp.pop_front();
    }
  }
  res.push_front(v);
  for (int u : g[v]) {
    res.push_front(u);
  }
}

int main() {
  int n;
  scanf("%d", &n);
  for (int i = 1; i < n; ++i) {
    int u, v;
    scanf("%d %d", &u, &v);
    --u, --v;
    g[u].push_back(v);
    g[v].push_back(u);
  }
  dfs(0);
  deque<int> result;
  dfs2(result);
  result.push_front(0);
  vector<pair<int, int>> ans(n, make_pair(-1, -1));
  for (int i = 1; !result.empty(); ++i) {
    int v = result.front();
    result.pop_front();
    if (ans[v].first == -1)
      ans[v].first = i;
    else
      ans[v].second = i;
  }
  for (int i = 0; i < n; ++i)
    printf("%d %d\n", ans[i].first, ans[i].second);
  return 0;
}
