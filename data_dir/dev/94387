#include<bits/stdc++.h>
#include <regex>
#include<ext/numeric>
#include<ext/hash_map>
using namespace std;
using namespace __gnu_cxx;

#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)  (int)v.size()
#define WHITE -1
#define GREY   0
#define BLACK  1
#define CLR(a,v) memset(a,v,sizeof a)
#define PC(x) __builtin_popcount(x)
#define PCLL(x) __builtin_popcountll(x)
#define MP make_pair

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<ll> vll;
//typedef unsigned int ui;

typedef complex<double> point;
#define X real()
#define Y imag()
#define vec(a,b) ((b)-(a))
#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define colliner pointOnLine
#define same(a,b) (lengthSqr(vec(a,b))<EPS)
#define lengthSqr(v) (dot(v,v))

const double PI = acos(-1.0);

int dx[] = { 0, -1, 0, 1, -1, -1, 1, 1 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };

int DX[] = { 1, 1, -1, -1, 2, 2, -2, -2 };
int DY[] = { 2, -2, 2, -2, 1, -1, 1, -1 };

const int MAX = 1e5 + 5, MOD = 1e9 + 7, oo = (1 << 30);
const ll OO = 1ll << 60;
const double EPS = 1e-9;

int n, m, u[MAX], v[MAX], indeg[MAX];
vi adjList[MAX];

bool toposort() {
	queue<int> q;
	for (int i = 1; i <= n; ++i)
		if (!indeg[i])
			q.push(i);
	while (!q.empty()) {
		if (sz(q) > 1)
			return 0;
		int U = q.front();
		q.pop();
		for (auto V : adjList[U]) {
			--indeg[V];
			if (!indeg[V])
				q.push(V);
		}
	}
	return 1;
}

bool check(int x) {
	for (int i = 1; i <= n; ++i)
		adjList[i].clear();
	CLR(indeg, 0);
	for (int i = 0; i < x; ++i) {
		adjList[u[i]].push_back(v[i]);
		++indeg[v[i]];
	}
	return toposort();
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
//	freopen("IN.in", "r", stdin);
//	freopen("out.txt", "w", stdout);
#endif
	cin >> n >> m;
	for (int i = 0; i < m; ++i)
		scanf("%d%d", &u[i], &v[i]);
	int l = 1, r = m;
	while (l < r) {
		int mid = (l + r) / 2;
		if (check(mid))
			r = mid;
		else
			l = mid + 1;
	}
	if (!check(r))
		cout << -1;
	else
		cout << r;
}
