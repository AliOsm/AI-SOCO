#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcount
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 ;
const int N=100000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

ll a[5005];
ll n,m;
ll up[5005];

ll type[5005];
ll l[5005];
ll r[5005];
ll q[5005];
int main()
{
  finp;
  cin>>n>>m;

  afor(i,1,n)
  {
    a[i] = 0 - infs;
    up[i] = 2*infs;
   // cout<<up[i]<<" ";
  }

  afor(i,1,m)
  {
    cin>>type[i]>>l[i]>>r[i]>>q[i];
  }

  afor(i,1,m)
  {
     

    if(type[i] == 1)
    {
      afor(j,l[i],r[i])a[j]+=q[i];
    }
    else
    {
      
      afor(j,l[i],r[i])
      {
        if(a[j]>q[i])
        {
          cout<<"NO";
          return 0;
        }
        else up[j] = min(up[j] , q[i] - a[j]);     
      }
    }
  }

  afor(i,1,n)
  {
    a[i]=0 - infs + up[i];
    
  }

  afor(i,1,m)
  {
    if(type[i]==1)
    {
      afor(j,l[i],r[i])a[j]+=q[i];
    }
    else
    {
      ll ma = 0 - inf;
      afor(j,l[i],r[i])ma=max(ma,a[j]);

      if(ma != q[i])
      {
        cout<<"NO";
        return 0;
      }
    }
  }


  cout<<"YES\n";
  afor(i,1,n)cout<<(0 - infs + up[i])<<" ";
  
return 0;
}