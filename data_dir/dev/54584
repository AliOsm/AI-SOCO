#include<bits/stdc++.h>
#define pb push_back
#define all(v) (v).begin() , (v).end()
#define popcnt(x) __builtin_popcount(x)
#define inf 0x3f3f3f3f
#define watch(x) cout << (#x) << " is " << (x) << endl
#define rand() (rand() << 15 | rand())
using namespace std;
typedef long long  ll;
int dx[] = {0 , 0 , 1 , -1 , 1 , 1 , -1 , -1};
int dy[] = {1 ,-1 , 0 , 0 , -1 , 1 ,  1 , -1};
/**
    run BFS and get the path
    then you have "URLLDUR" directions
    you want to know what directions are swapped
    so you can check each in the first move you did this direction
    first 'U' or 'D' & first 'L' or 'R'
**/
const int N = 104;
map<char , int> dir;
map<char , char> out;
int n , m;
char grid[N][N];
string directions = "RLDU";
string opp = "LRUD";

bool valid(int x , int y , vector<vector<int> > &par){
    if(x < 0 || x >= n || y < 0 || y >= m || ~par[x][y] || grid[x][y] == '*')
        return false;
    return true;
}

bool ask(int &i , int &j , char c){
    cout << out[c] << endl;
    int x , y , x0 = i + dx[dir[c]] , y0 = j + dy[dir[c]];
    if(x0 < 0)x0 = 0;
    if(y0 < 0)y0 = 0;
    if(x0 >= n)x0 = n - 1;
    if(y0 >= m)y0 = m - 1;
    cin >> x >> y;
    x-- , y--;
    if(x != x0 || y != y0){
        out[c] = opp[dir[c]];
        out[opp[dir[c]]] = c;
        return false;
    }
    i = x , j = y;
    if(grid[i][j] == '*' || grid[i][j] == 'F')exit(0);
    return true;
}
int main(){
//#ifndef ONLINE_JUDGE
//    freopen("input.txt" , "r" , stdin);
//#endif
    dir['U'] = 3;
    dir['D'] = 2;
    dir['L'] = 1;
    dir['R'] = 0;
    for(char c : directions)
        out[c] = c;
    pair<int , int> F;
    cin >> n >> m;
    for(int i = 0 ; i < n ; ++i){
        for(int j = 0 ; j < m ; ++j){
            cin >> grid[i][j];
            if(grid[i][j] == 'F'){
                F = {i , j};
            }
        }
    }

    queue<pair<int , int> > q;
    vector<vector<int> > par(n + 1 , vector<int>(m + 1 , -1));
    q.push({0 , 0});
    par[0][0] = 4;
    while(q.size()){
        pair<int , int> top = q.front();
        q.pop();
        for(int i = 0 ; i < 4 ; ++i){
            int x = dx[i] + top.first , y = dy[i] + top.second;
            if(valid(x , y , par)){
                par[x][y] = i;
                q.push({x , y});
            }
        }
    }
    string moves = "";
    int x = F.first , y = F.second;
    while(par[x][y] != 4){
        int j = par[x][y];
        moves.pb(directions[j]);
        if(j < 2)
            x += dx[0 ^ 1 ^ j] , y += dy[0 ^ 1 ^ j];
        else
            x += dx[2 ^ 3 ^ j] , y += dy[2 ^ 3 ^ j];
    }

    reverse(all(moves));
//    cout << 1 << endl;
    int i = 0 , j = 0;
    for(char c : moves){
        if(!ask(i , j , c)){
            ask(i , j , c);
        }
    }
}
