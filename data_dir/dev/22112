#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include <iostream>
#include <cmath>
#include <iomanip>
#include <string>
#include <cstring>
#include <cstdio>
#include <math.h>
#include <algorithm>
#include <stdio.h>
#include <climits>
#include <stack>
#include <queue>
#include <vector>
#include <set>
#include <sstream>
#include <map>
#include <ctime>
#include <cstdlib>
#include <list>
#include <bitset>
#include <functional>
#include <numeric>
#include <utility>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
#define OO 1e8
int dx8[] = { 0, 0, 1, -1, 1, -1, 1, -1 };
int dy8[] = { -1, 1, 0, 0, -1, -1, 1, 1 };
int dy[] = { 0, 1, 0 };
int dx[] = { 1, 0, -1 };
int X[6] = { 0, 0, 0, -1, 0, 1 };
int Y[6] = { 0, 0, -1, 0, 1, 0 };
int Z[6] = { 1, -1, 0, 0, 0, 0 };
// start + (end - start) / 2;

int n;
vector<int>v;

int gcd(int a, int b){
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

bool check(int a){
    while (a > 1){
        if (a % 2 == 0)a /= 2;
        else
            if (a % 3 == 0)a /= 3;
            else return false;
    }
    return true;
}

int main(){
    cin >> n;
    v.resize(n);
    for (int i = 0; i < n; i++)
        cin >> v[i];
    int high = gcd(v[0], v[1]);
    for (int i = 0; i < n; i++)
        high = gcd(high, v[i]);
    for (int i = 0; i < n; i++){
        bool ans = check(v[i] / high);
        if (!ans){
            cout << "NO\n";
            return 0;
        }
    }
    cout << "YES\n";
}