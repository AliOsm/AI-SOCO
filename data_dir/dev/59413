
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("Ofast")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
#define int long long int
typedef complex<long double> cd;
const long double pi=acos(-1);
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <db, db> pdd;
typedef vector<int> vi;
typedef vector<vector<int> > matrix;

#define m1 make_pair
#define pb push_back
#define flush fflush(stdout)
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define reset(x,v) memset(x,v,sizeof(x))

#define fi first
#define se second
#define endl "\n"
#define debug(x) (cerr << #x << ": " << x << "\n")
#define setbits(x) __builtin_popcount(x)
#define setbitsll(x) __builtin_popcountll(x)
#define all(x) x.begin(),x.end()
#define pii pair<int,int>
#define all(x) x.begin(),x.end()

inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0)return 1;ll p=power(a,n/2,m);p=(p%m*p%m)%m;if(n%2) return (p%m*a%m)%m;else return p;}

const ll MOD =998244353;
const ll hell=1000000007;
const int INF=1e16;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;
template<typename T>
using ordered_set=tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

auto seed = chrono::high_resolution_clock::now().time_since_epoch().count();
std::mt19937 rng(seed);

const int N=200005;
bool visited[N];int cp;vi ve[N];
vi adj[N];int compo[N];int c[N];int p[N+1];vi divisor[N];
void dfs(int u)
{
    visited[u]=1;
    ve[cp].pb(u);
    compo[u]=cp;
    for(int v:adj[u])
        if(!visited[v])
            dfs(v);
}
void solve()
{
    int n;
    cin>>n;
   // int p[n+1];
    for(int i=1;i<=n+1;i++)
    {visited[i]=0;
        ve[i].clear();
        //vl[i].clear();
        adj[i].clear();
    }
    for(int i=1;i<=n;i++)
    {
        cin>>p[i];
        adj[i].pb(p[i]);
        adj[p[i]].pb(i);
    }
    for(int i=1;i<=n;i++)
        cin>>c[i];
    cp=1;
    for(int i=1;i<=n;i++)
    {
        if(!visited[i])
        {
            dfs(i);
            cp++;
        }
    }
    int ans=n;
        memset(visited,0,sizeof(visited));
        for(int i=1;i<=n;i++)
            if(!visited[i])
            {
                for(auto d:divisor[ve[compo[i]].size()])
                {
                    
                    for(int i1=0;i1<d;i1++)
                    {
                       int pos=1;
                        for(int j=i1+d;j<ve[compo[i]].size();j+=d)
                            pos=pos&(c[ve[compo[i]][i1]]==c[ve[compo[i]][j]]);
                        if(pos)
                        {
                            ans=min(ans,d);
                            break;
                        }
                    }
                    //if(pos)
                      //  ans=min(ans,d);
                }
                for(int j=0;j<ve[compo[i]].size();j++)
                    visited[ve[compo[i]][j]]=1;
            }
  
            cout<<ans<<endl;
    
}
void preprocess()
{
    for(int i=1;i<N;i++)
        for(int j=i;j<N;j+=i)
            divisor[j].pb(i);
}
int32_t main()
{
    
    IOS;
    //FILE *fin = freopen("in","r",stdin);
    //FILE *fout = freopen("out","w",stdout);
    int t;
    t=1;
    preprocess();
    cin>>t;
    
    while(t--)
    {
        
        
        solve();
    }
    return 0;
}


