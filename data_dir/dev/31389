#include <bits/stdc++.h>
#define f first
#define s second
#define pb push_back
#define pii pair<int, int>
#define endl '\n'
#define vi vector<int>
#define vvi vector<vi>
#define pii pair<int, int>
#define vpii vector<pii>
#define vvpii vector<vpii>
typedef long long ll;
typedef long double ld;
using namespace std;
template<class T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> void setmax(T& a, T b) { a = max(a, b); };
template<typename T> void setmin(T& a, T b) { a = min(a, b); };

const int N = 5555;
int n, m;
vpii g[N];
int f[N];
int depth[N], par[N], pari[N];

void dfs(int x, int p = 0) {
  par[x] = p;
  for (auto [y, i] : g[x]) {
    if (y == p) {
      pari[x] = i;
      continue;
    }
    depth[y] = depth[x] + 1;
    dfs(y, x);
  }
}

void fill(int a, int b, int value) {
  if (depth[a] < depth[b]) {
    swap(a, b);
  }
  while (depth[a] > depth[b]) {
    int aa = par[a];
    int i = pari[a];
    f[i] = value;
    a = aa;
  }
  while (a != b) {
    int aa = par[a], bb = par[b];
    int i = pari[a], j = pari[b];
    f[i] = f[j] = value;
    a = aa; b = bb;
  }
}

bool check(int a, int b, int value) {
  int mn = 1e9;
  if (depth[a] < depth[b]) {
    swap(a, b);
  }
  while (depth[a] > depth[b]) {
    int aa = par[a];
    int i = pari[a];
    setmin(mn, f[i]);
    a = aa;
  }
  while (a != b) {
    int aa = par[a], bb = par[b];
    int i = pari[a], j = pari[b];
    setmin(mn, min(f[i], f[j]));
    a = aa; b = bb;
  }
  return mn == value;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0); cout.tie(0);

  cin >> n;
  for (int i = 0; i < n - 1; i++) {
    int u, v;
    cin >> u >> v;
    g[u].pb({v, i});
    g[v].pb({u, i});
  }

  depth[1] = 1;
  dfs(1);

  for (int i = 0; i <= n; i++) {
    f[i] = 1;
  }

  vvi paths;
  cin >> m;
  for (int i = 0; i < m; i++) {
    int a, b, g;
    cin >> a >> b >> g;
    paths.pb({g, a, b});
  }
  sort(paths.begin(), paths.end());
  for (auto &vec : paths) {
    int g = vec[0], a = vec[1], b = vec[2];
    fill(a, b, g);
  }
  for (auto &vec : paths) {
    int g = vec[0], a = vec[1], b = vec[2];
    if (!check(a, b, g)) {
      cout << "-1\n";
      return 0;
    }
  }

  for (int i = 0; i < n - 1; i++) {
    cout << f[i] << " ";
  }
  cout << endl;

  return 0;
}