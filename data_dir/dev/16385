#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <set>
#include <queue>
#include <cstdio>
#include <cstring>
using namespace std;
#define ll long long
#define pii pair<int, int>
#define mp make_pair
#define x first
#define y second
#define pb push_back
#define VI vector<int>
#define all(s) (s).begin(),(s).end()
#define L(s) (int)(s).size()
#define inf 1000000000
#define pdd pair<double, double>

int n, m;
queue<int> q;
VI e[3333];

int d[3333];
int D[3003][3003];

int dwho[3333][3];
int dmax[3333][3];

int drwho[3333][3];
int drmax[3333][3];

void sho_dst(int st) {
    for(int i = 0; i < n; ++i) d[i] = inf;
    d[st] = 0;
    q.push(st);
    while(!q.empty()) {
        int cur = q.front();
        q.pop();
        for(int i = 0; i < L(e[cur]); ++i) {
            if (d[e[cur][i]] > d[cur] + 1) {
                d[e[cur][i]] = d[cur] + 1;
                q.push(e[cur][i]);
            }
        }
    }
}

int main() {
    scanf("%d%d", &n, &m);
    for(int i = 0; i < m; ++i) {
        int x, y; scanf("%d%d", &x, &y); --x; --y;
        e[x].pb(y);
    }

    for(int i = 0; i < n; ++i) {
        sho_dst(i);
        for(int j = 0; j < n; ++j) {
            D[i][j] = d[j];
        }
    }

    for(int i = 0; i < n; ++i) {

        for(int j = 0; j < n; ++j) d[j] = D[i][j];
        for(int act = 0; act < 3; ++act) {
            dmax[i][act] = -inf;
            dwho[i][act] = -1;
            for(int j = 0; j < n; ++j) {
                if (i == j) continue;
                if (d[j] == inf) continue;
                if (d[j] > dmax[i][act]) {
                    dmax[i][act] = d[j];
                    dwho[i][act] = j;
                }
            }
            if (dwho[i][act] >= 0) {
                d[dwho[i][act]] = inf;
            }
        }

        for(int j = 0; j < n; ++j) d[j] = D[j][i];
        for(int act = 0; act < 3; ++act) {
            drmax[i][act] = -inf;
            drwho[i][act] = -1;
            for(int j = 0; j < n; ++j) {
                if (i == j) continue;
                if (d[j] == inf) continue;
                if (d[j] > drmax[i][act]) {
                    drmax[i][act] = d[j];
                    drwho[i][act] = j;
                }
            }
            if (drwho[i][act] >= 0) {
                d[drwho[i][act]] = inf;
            }
        }

    }

    int best_d = 0;
    int best_ans[4];
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < n; ++j) {
            if (i == j) continue;
            if (D[i][j] == inf) continue;
            for(int sj = 0; sj < 3; ++sj) {
                if (dwho[j][sj] == -1) continue;
                if (dwho[j][sj] == i) continue;
                for(int sri = 0; sri < 3; ++sri) {
                    if (drwho[i][sri] == -1) continue;
                    if (drwho[i][sri] == dwho[j][sj]) continue;
                    if (drwho[i][sri] == j) continue;
                    int cur_d = D[i][j] + dmax[j][sj] + drmax[i][sri];
                    if (cur_d > best_d) {
                        best_d = cur_d;
                        best_ans[0] = drwho[i][sri];
                        best_ans[1] = i;
                        best_ans[2] = j;
                        best_ans[3] = dwho[j][sj];
                    }
                }
            }
        }
    }

    cout << best_ans[0] + 1 << " " << best_ans[1] + 1 << " " << best_ans[2] + 1 << " " << best_ans[3] + 1 << endl;
}

