#pragma comment(linker, "/STACK:256000000")

#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <time.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <random>
#include <bitset>
#include <unordered_set>
#include <unordered_map>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<int, int64> pil;
const int INF = (int)(1e9 + 1e5);
const int64 LINF = (int64)(1e18);
const double EPS = 1e-9;
#define sq(x) ((x)*(x))
#define FAIL() (*(int*)(0))++
const int MOD = 1000000007;
const int BASE = 1000003;

const int MAXN = 100005;
const int MAXK = 102;

int n, k;
int s[MAXN][MAXK];
int p[MAXN], sz[MAXN];
set <pii> st[MAXK], g;
int sm[MAXN];

void init()
{
    scanf("%d%d", &n, &k);
    for (int i = 1; i <= n; ++i)
    {
        for (int j = 1; j <= k; ++j)
        {
            scanf("%d", &s[i][j]);
        }
    }
}

int get_parent(int v)
{
    if (p[v] == v)
    {
        return v;
    }
    else
    {
        return p[v] = get_parent(p[v]);
    }
}

int un(int a, int b)
{
    a = get_parent(a);
    b = get_parent(b);
    if (sz[a] < sz[b])
    {
        swap(a, b);
    }
    if (a != b)
    {
        p[b] = a;
        sm[a] = min(sm[a], sm[b]);
        sz[a] += sz[b];
        return a;
    }
    else
    {
        return a;
    }
}

void print_ans()
{
    auto it = g.end();
    --it;
    printf("%d\n", sz[get_parent(it->second)]);
}

void solve() {
    init();
    p[1] = 1;
    sz[1] = 1;
    sm[1] = s[1][1];
    g.insert(pii(sm[1], 1));
    for (int j = 1; j <= k; ++j) {
        st[j].insert(pii(s[1][j], 1));
    }
    print_ans();
    for (int i = 2; i <= n; ++i) {
        p[i] = i;
        sz[i] = 1;
        sm[i] = s[i][1];
        int mx = 0, mn = INF;
        for (int j = 1; j <= k; ++j) {
            auto it = st[j].upper_bound(pii(s[i][j], 0));
            if (it != st[j].end()) {
                if (it != st[j].begin()) {
                    auto it2 = it;
                    --it2;
                    int l = sm[get_parent(it2->second)];
                    int r = sm[get_parent(it->second)];
                    mx = max(mx, l);
                    mn = min(mn, r);
                } else {
                    mn = min(mn, sm[get_parent(it->second)]);
                }
            } else {
                --it;
                mx = max(mx, sm[get_parent(it->second)]);
            }
        }
        int num = i;
        while (true) {
            auto it = g.upper_bound(pii(mn, 0));
            if (it == g.end() || it->first > mx) {
                break;
            }
            num = un(num, it->second);
            g.erase(it);
        }
        g.insert(pii(sm[num], num));
        for (int j = 1; j <= k; ++j) {
            st[j].insert(pii(s[i][j], i));
        }
//        for (auto it : g) {
//            printf("%d-%d\n", it.first, it.second);
//        }
//        for (int j = 1; j <= i; ++j) {
//            printf("p %d s %d\n", p[j], sz[j]);
//        }
        print_ans();
    }
}
    
int main()
{
    ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
    //generate(5, 50, 50, 28);
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#endif // _MY_DEBUG
    
    int tests = 1; //scanf("%d", &tests);
    for (int test = 1; test <= tests; test++)
    {
        solve();
    }
    return 0;
}