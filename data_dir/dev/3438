#include<bits/stdc++.h>
using namespace std;

#define MAX 100005

vector<int>adj[MAX],ans;

int arr[MAX],brr[MAX],visit[MAX];

void dfs(int node,int level,int odd,int even)
{
    for(int i=0;i<adj[node].size();i++)
    {
        int v = adj[node][i];
        if(visit[v] == 1) continue;
        visit[v] = 1;
        if(level % 2 == 0)
        {
            arr[v] = (arr[v] + even) % 2;
            if(arr[v] == brr[v]) dfs(v,level+1,odd,even);
            else
            {
                ans.push_back(v);
                dfs(v,level+1,odd,even+1);
            }
        }
        else
        {
            arr[v] = (arr[v] + odd) % 2;
            if(arr[v] == brr[v]) dfs(v,level+1,odd,even);
            else
            {
                ans.push_back(v);
                dfs(v,level+1,odd+1,even);
            }
        }
    }

}

int main()
{
    int N,i;
    cin >> N;
    ans.clear();
    for(i=0;i<=N;i++) adj[i].clear();
    for(i=1;i<=N;i++)
    {
        adj[0].push_back(i);
        visit[i] = 0;
    }
    for(i=1;i<N;i++)
    {
        int u,v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    for(i=1;i<=N;i++) cin >> arr[i];
    for(i=1;i<=N;i++) cin >> brr[i];
    dfs(0,1,0,0);
    cout << ans.size() << '\n';
    for(i=0;i<ans.size();i++) cout << ans[i] << '\n';
    //main();
    return 0;
}
