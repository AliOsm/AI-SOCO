#include<bits/stdc++.h>
#define int long long int
#define ld long double
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define rev(i,n,init) for(int i=n;i>=init;i--)
#define MAXN 200005
#define MOD2 998244353
#define MOD1 1e9+7
#define f first
#define s second
#define endl '\n'
#define pii pair<int,int>
#define piii pair<pii,int>
#define precise(i) cout<<fixed<<setprecision(i)
#define codejam cout<<"Case #"<<ii+1<<": ";
#define impossible cout<<"IMPOSSIBLE"<<endl;
#define error(s) throw runtime_error(s)
using namespace std;
const long double PI = atan(1.0)*4;
const int64_t INF=8e18;
const int32_t LOG=21;
const int MOD=MOD1;

int cnt[200005];
int a[200005];

int32_t main()
{ 
      getFaster;
      int tests=1;
      cin>>tests;
      rep(ii,0,tests)
      {
         int n,k;
         cin>>n>>k;
         fill(cnt,cnt+n+2,0LL);
         rep(i,1,n+1)cin>>a[i];
         rep(i,1,n+1)
         {
             if(a[i]>a[i-1] && a[i]>a[i+1])
             cnt[i]++;
             cnt[i]+=cnt[i-1];   
         }
         int ans=0,ind=1;
         rep(i,1,n+1)
         {
             int j=i+k-1;
             if(j>n)break;
             if(ans<cnt[j-1]-cnt[i])
             {
                ans=cnt[j-1]-cnt[i];
                ind=i;
             }   
         }
         ans++;
         cout<<ans<<" "<<ind<<endl;
      }     
      return 0;                         
}

/*
 TIPS:
 1.) Check for corner cases (like 0 is exception case)
 2.) Check for global memory sizes,memory refreshments and its complexity 
 3.) Check for sorting criteria (if used 1-based indexing)
 4.) Check for numbers overflow (while multiplying and doing MOD)
 5.) Check for typecasting issues like int to float( while dividing numbers)
*/