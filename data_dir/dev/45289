#include <bits/stdc++.h>
using namespace std;

map<int, int> M;

int X[2][200005];
int F[200005], V[200005], H[200005];

int solve(int remTime, int remEasy, int remHard, long long a, long long b)
{
    if(remEasy * a > remTime)
        return remTime / a;

    if(remHard * b > remTime - remEasy * a)
        return remEasy + (remTime - remEasy * a) / b;
    
    return remEasy + remHard;
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(NULL), cout.tie(NULL);

    int Q;
    cin >> Q;

    while(Q--)
    {
        int N, T;
        long long a, b;
        cin >> N >> T >> a >> b;

        M.clear();
        M[0], M[T+1];
        int sumEasy = 0, sumHard = 0;

        for(int i=1; i<=N; i++)
        {
            cin >> F[i];
            sumEasy += F[i] == 0;
            sumHard += F[i] == 1;
        }

        for(int i=1; i<=N; i++)
        {
            cin >> V[i];
            M[ V[i] ];
        }

        int k = 0;

        for(auto &it : M)
        {
            X[0][k] = X[1][k] = 0;
            it.second = k++;
            H[it.second] = it.first;
        }

        for(int i=1; i<=N; i++)
            X[ F[i] ][ M[ V[i] ] ]++;
        
        int easy = X[0][0], hard = X[1][0], ans = 0;

        for(int i=1; i<k; i++)
        {
            if(a * easy + b * hard < H[i])
                ans = max(ans, easy + hard + solve(H[i] - 1 - a * easy - b * hard, sumEasy - easy, sumHard - hard, a, b));
            
            easy += X[0][i], hard += X[1][i];
        }

        cout << ans << "\n";
    }

    return 0;
}
