#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <fstream>
#include <algorithm>
#include <cmath>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <stack>
#include <iomanip>
#include <deque>
#include <list>
#include <cassert>
#include <complex>
#include <bitset>


using namespace std;
typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pdd;
#define mmin(a, b) a = min(a, (b))
#define ALL(a) a.begin(),a.end()
#define SZ(a) ((int)(a).size())
#define watch(x) cout << (#x) << " = " << (x) << endl;


const int N = 1e5 + 90, oo = 1e9;


int values[N], ans[N], there[N];


bool comp(int a, int b)
{
	return values[a] < values[b];
}


signed main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);

	fill(there, there + N, -1);
	fill(ans, ans + N, -1);

	int n;
	cin >> n;
	vi positions(n);

	for (int i = 0; i < n; ++i)
	{
		cin >> values[i];
		positions[i] = i;
	}

	sort(ALL(positions), comp);
	reverse(ALL(positions));

	for (int v : positions)
	{
		for (int i = v % values[v]; i < n; i += values[v])
		{
			if (there[i] != -1 && !ans[i])
			{
				ans[v] = 1;
				break;
			}
		}

		if (ans[v] != 1)
			ans[v] = 0;
		
		there[v] = 1;
	}

	for (int i = 0; i < n; ++i)
	{
		if (ans[i])
			cout << 'A';
		else
			cout << 'B';
		
		//assert(ans[i] != -1);
	}
}