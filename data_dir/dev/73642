#include <bits/stdc++.h>
using namespace std;
//(≧∇≦) 私の名前はうずまきナルトと私は次の北城になります .
//(≧∇≦) My name is Uzumaki Naruto and I will be the next Hokage .
const int OO = 0x3f3f3f3f ,N = 1e5+5 ,mod = 1e9+7 ;
const double pi = acos(-1) ,eps = 1e-9 ;
#define read(FILE)  freopen(FILE, "r", stdin);
#define write(FILE) freopen(FILE, "w", stdout);
#define Uzumaki_Naruto ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
typedef long long ll ;
//(≧∇≦) I won't go back on my word... that is my ninja way!
int n ,arr[N] ,spf[N] ,hashing[N] ,vhash ,mem[N][2] ;
vector<int> idx[N] ;
void sieve(){
    for(int i=1;i<N;++i) spf[i]=i;
    for(int i=2;i*i<N;++i)if(spf[i]==i){
        for(int j=i*i;j<N;j+=i)if(spf[j]==j)spf[j]=i;
    }
}
vector<int> factorize(int x){
    vector<int> ret;
    set<int> st ;
    while(x!=1){
        st.insert(spf[x]);
        x/=spf[x];
    }
    for(int go:st)ret.push_back(go);
    return ret;
}
int solve(int i,bool st){
    if(i==n)return 0;
    int&ret=mem[i][st];
    if(~ret)return ret;
    ret=0;
    if(arr[i]==1)ret=1;
    if(st==0)ret=max(ret,solve(i+1,0));
    vector<int> factors = factorize(arr[i]) ;
    for(int go:factors){
        int ii = hashing[go];
        int j = upper_bound(idx[ii].begin(),idx[ii].end(),i) - idx[ii].begin() ;
        while(arr[idx[ii][j]]<=arr[i]) ++j;
        ret=max(ret,solve(idx[ii][j],1)+1);
    }
    return ret;
}
int main(){
    sieve();
    memset(hashing,-1,sizeof hashing);
    memset(mem,-1,sizeof mem);
    scanf("%d",&n);
    for(int i=0;i<n;++i){
        scanf("%d",arr+i);
        vector<int> factor = factorize(arr[i]);
        for(int go:factor){
            if(hashing[go]==-1)hashing[go]=vhash++ ;
            idx[hashing[go]].push_back(i);
        }
    }
    for(int i=0;i<vhash;++i)idx[i].push_back(n);
    arr[n]=OO;
    printf("%d",solve(0,0));
    return 0;
}
