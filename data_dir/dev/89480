#include <bits/stdc++.h>

using std::ios_base;
using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::fixed;

using std::vector;
using std::string;
using std::stack;
using std::queue;
using std::deque;
using std::map;
using std::set;
using std::unordered_map;
using std::unordered_set;

using std::tuple;
using std::make_tuple;
using std::pair;
using std::make_pair;

using std::sort;
using std::reverse;
using std::nth_element;

#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()

#define x1 __x1
#define y1 __y1
#define x2 __x2
#define y2 __y2

const int MAXN = 150000;
const int INF = 1e9;
const int MOD = 1e9+7;
const int64_t L_INF = 4e18;

int n;
int x1[MAXN], x2[MAXN], y1[MAXN], y2[MAXN];
vector<pair<int, int> > row, col;
vector<int> pts_r, pts_c;

bool inside(int r, int c, int i) {
    return x1[i] <= r && r <= x2[i] && y1[i] <= c && c <= y2[i];
}

bool check(int r, int c) {
    int cnt = 0;
    for (int i = 0; i < n; i++) {
        cnt += inside(r, c, i);
    }
    return cnt >= n - 1;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;

    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> x1[i] >> y1[i] >> x2[i] >> y2[i];
        row.pb({x1[i], -1});
        row.pb({x2[i], 1});
        col.pb({y1[i], -1});
        col.pb({y2[i], 1});
    }

    sort(all(row));
    sort(all(col));
    
    int cnt_r = 0;
    for (auto r : row) {
        cnt_r -= r.second;
        if (cnt_r == n - 1) {
            pts_r.pb(r.first);
        }
    }

    int cnt_c = 0;
    for (auto c : col) {
        cnt_c -= c.second;
        if (cnt_c == n - 1) {
            pts_c.pb(c.first);
        }
    }
    
    for (int r : pts_r) {
        for (int c : pts_c) {
            if (check(r, c)) {
                cout << r << ' ' << c << '\n';
                exit(0);
            }
        }
    }

    #ifdef LOCAL
        cerr << "\n== " << 1.0 * clock() / CLOCKS_PER_SEC << " sec.\n";
    #endif
    return 0;
}
