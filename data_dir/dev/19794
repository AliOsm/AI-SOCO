#include <bits/stdc++.h>
using namespace std;

#define    ll     long long int

const ll inf = 1e16;
const int N = 10555;
vector<int> factors[N];
int a, b, c;

void factorize(int n)
{
    int i, j, k, rt = sqrt(n), m = n;
    for (i = 1; i <= rt; i++) {
        if (m % i == 0) {
            j = m / i;
            factors[n].push_back(i);
            if (j != i) {
                factors[n].push_back(j);
            }
        }
    }
    sort(factors[n].begin(), factors[n].end());
}

int main( )
{
    int i, j, k, l, m, mx = 0;
    int k1, k2, k3;
    int A, B, C;
    ll c1, c2, c3;
    int A_, B_, C_;
    for (i = 1; i <= 10505; i++) {
        factorize(i);
    }
    int q;
    cin >> q;
    while (q--) {
        cin >> a >> b >> c;
        ll mn = inf;
        ll res;
        for (i = 1; i <= 10500; i++) {
            A = abs(c - i);
            for (j = 0; j < (int) factors[i].size(); j++) {
                l = factors[i][j];
                B = abs(b - l);

                k = (int) (lower_bound(factors[l].begin(), factors[l].end(), a) - factors[l].begin());

                if (k >= 0 && k < (int) factors[l].size()) {
                    c1 = abs(a - factors[l][k]);
                }
                else c1 = inf;

                if (k - 1 >= 0 && k - 1 < (int) factors[l].size()) {
                    c2 = abs(a - factors[l][k - 1]);
                }
                else c2 = inf;

                if (k + 1 >= 0 && k + 1 < (int) factors[l].size()) {
                    c3 = abs(a - factors[l][k + 1]);
                }
                else c3 = inf;

                res = A + B + c1;
                if (res < mn) {
                    mn = res;
                    A_ = factors[l][k];
                    B_ = l;
                    C_ = i;
                }

                res = A + B + c2;
                if (res < mn) {
                    mn = res;
                    A_ = factors[l][k - 1];
                    B_ = l;
                    C_ = i;
                }

                res = A + B + c3;
                if (res < mn) {
                    mn = res;
                    A_ = factors[l][k + 1];
                    B_ = l;
                    C_ = i;
                }
            }
        }
        cout << mn << "\n";
        cout << A_ << ' ' << B_ << ' ' << C_ << '\n';
    }
    return 0;
}
