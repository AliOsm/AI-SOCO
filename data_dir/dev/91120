#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair <int , int> pii;

const int N = 4e5+10 , mod = 1e9+7;

int a[N] , ps[N];

int32_t main(){
   ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
   int n;
   cin >> n;
   for(int i = 0 ; i < n ; i++)
      cin >> a[i];
   sort(a , a + n);
   int nw = 0;
   vector <pii> ans;
   for(int i = 0 ; i < n ; i++){
      if(i == 0)
         nw++;
      else if(a[i] == a[i - 1])
         nw++;
      else{
         ans.push_back({nw , a[i - 1]});
         nw = 1;
      }
   }
   ans.push_back({nw , a[n - 1]});
   sort(ans.begin() , ans.end());
   int m = ans.size();
   for(int i = 0 ; i < m ; i++){
      if(i == 0)
         ps[i] = ans[i].first;
      else
         ps[i] = ps[i - 1] + ans[i].first;
   }
   int rt = 0 , ret = -1;
   for(int i = 1 ; i <= sqrt(n) ; i++){
      int sum = 0;
      int id = lower_bound(ans.begin() , ans.end() , make_pair(i + 1 , -1)) - ans.begin();
      if(id != 0){
         sum += ps[id - 1];
      }
      sum += (m - id) * i;
      int oth = sum / i;
      if(oth < i)
         break;
      if(i * oth > rt){
         rt = i * oth;
         ret = i;
      }
   }
   cout << rt << "\n";
   cout << ret << " " << rt / ret << "\n";
   int curx = 0 , cury = 0 , cnt = 0 , pos = 0;
   set <pii> done , ndone;
   for(int i = 0 ; i < rt / ret ; i++)
      ndone.insert({0 , i});
   vector < pair <pii , int> > pr;
   reverse(ans.begin() , ans.end());
   while(cnt < rt){
      if(curx == 0 && done.find(make_pair(curx , cury)) != done.end()){
         pii x = *ndone.begin();
         ndone.erase(ndone.begin());
         done.insert(x);
         curx = x.first;
         cury = x.second;
      }
      else if(curx == 0){
         ndone.erase(make_pair(curx , cury));
         done.insert(make_pair(curx , cury));
      }
      ans[pos].first = min(ans[pos].first , ret);
      if(ans[pos].first == 0){
         pos++;
         ans[pos].first = min(ans[pos].first , ret);
      }
      ans[pos].first--;
      pr.push_back({{curx , cury} , ans[pos].second});
      curx++;
      cury++;
      if(curx == ret)
         curx = 0;
      if(cury == rt / ret)
         cury = 0;
      cnt++;
   }
   sort(pr.begin() , pr.end());
   for(int i = 0 ; i < ret ; i++){
      for(int j = 0 ; j < rt / ret ; j++)
         cout << pr[i * (rt / ret) + j].second << " ";
      cout << "\n";
   }
   return 0;
}
