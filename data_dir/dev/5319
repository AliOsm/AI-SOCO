#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;*/
#define itn int
#define all(c) c.begin(),c.end()
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define ll long long
#define pll pair<ll, ll>
#define mp(x, y) make_pair(x, y)
using namespace std;

const ll N = 3e5 + 5, inf = 1e18, mod = 998244353 ;
const double PI = 3.1415926536;
int days[13] = {0, 31, 28, 31, 30, 31,30, 31, 31, 30, 31, 30, 31};

bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

ll fact(ll n) {
    n = abs(n);
    ll t = 0;
    for (ll i = 1; i * i <= n; i++) {
        if (n % i == 0) {
            t++;
            if (n / (n / i) != n / i) t++;
        }
    }
    return t;
}

inline ll getPow(ll a,ll b) {
    ll res = 1ll, tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
       }
       tp *= tp;
       tp %= mod; res %= mod;
       b >>= 1ll;
    }
    return res;
}

ll vec_mult(const pll & t1, const pll & t2, const pll & t3) {
   const ll & x1 = t1.first, y1 = t1.second;
   const ll & x2 = t2.first, y2 = t2.second;
   const ll & x3 = t3.first, y3 = t3.second;
   return abs((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}

void ok() {
   cout << "YES" << endl;
}

void no() {
   cout << "NO" << endl;
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

int main()
{

    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    int n = nxt();
    vector<int> mas(n);
    int cnt_one = (n + 1) / 2, cnt_zero = n / 2;
    int ans = 0;
    for (int i = 0; i < n; i++) {
        mas[i] = nxt();
        if (mas[i] == 0) continue;
        if (mas[i] % 2 == 0) {
            cnt_zero--;
        } else {
            cnt_one--;
        }
        if (i && mas[i] && mas[i - 1]) {
            if (mas[i] % 2 != mas[i - 1] % 2) {
                ans++;
            }
        }
    }

    if (n == 1) {
        return cout << 0, 0;
    }
    if (count(all(mas), 0) == n) {
        return cout << 1, 0;
    }

    vector<int> t1;
    vector<int> t2;
    int t3 = 0;
    vector<int> tmp1;
    vector<int> tmp2;
    for (int l = 0; l < n; l++) {
        if (mas[l] == 0) {
            int r = l;
            while (r < n && mas[r] == 0) {
                r++;
            }
            int type = 0;
            if (l == 0) {
                if (mas[r] % 2) tmp1.push_back(r - l);
                else tmp2.push_back(r - l);
            } else if (r == n) {
                if (mas[l - 1] % 2) tmp1.push_back(r - l);
                else tmp2.push_back(r - l);
            } else {
                if (mas[r] % 2 != mas[l - 1] % 2) {
                    type = 2;
                } else if (mas[r] % 2 == 0) {
                    type = 0;
                } else {
                    type = 1;
                }
                if (type == 0) {
                    t1.push_back(r - l);
                } else if (type == 1) {
                    t2.push_back(r - l);
                } else {
                    t3++;
                }
            }
            l = r;
            l--;
        }
    }
    sort(all(t1));
    sort(all(t2));
    sort(all(tmp1));
    sort(all(tmp2));
    for (auto x : t1) {
        if (x <= cnt_zero) {
            cnt_zero -= x;
        } else {
            ans += 2;
        }
    }
    for (auto x : t2) {
        if (x <= cnt_one) {
            cnt_one -= x;
        } else {
            ans += 2;
        }
    }
    for (auto x : tmp1) {
        if (x <= cnt_one) {
            cnt_one -= x;
        } else {
            ans++;
        }
    }
    for (auto x : tmp2) {
        if (x <= cnt_zero) {
            cnt_zero -= x;
        } else {
            ans++;
        }
    }
    cout << ans + t3;
    return 0;
}
