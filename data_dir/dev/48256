#include <bits/stdc++.h>

using namespace std;

#define F first
#define S second

#define endl '\n'

#define mp make_pair
#define pb push_back

#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

#define sol (root + root)
#define sag (root + root + 1)
#define orta ((bas + son) >> 1)

#define bit __builtin_popcount

#ifndef D
	#define dbg(x) 0
	#define dbgs(x) 0
#else
	#define dbg(x) cerr << (#x) << " --> " << (x) << endl
	#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#endif

typedef long long ll;
typedef pair < int, int > pii;

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

typedef pair < ll, int > pli;

const int N = 1e5 + 5;

int n, m, k, p, a[N];

ll cur[N], add[N];

bool f(ll x) {

	priority_queue < pli, vector < pli >, greater < pli > > Q;
	
	FOR(i, 1, n)
	{
		cur[i] = x;

		if(x - m * add[i] >= 0)
			continue;

		Q.push(mp(x / add[i], i));
	}

	ll cnt = 0;

	while(!Q.empty() and cnt < m * k)
	{
		ll day = Q.top().F;

		int i = Q.top().S;

		Q.pop();

		if(day <= cnt / k)
			return 0;

		cur[i] += p;

		cnt++;

		if(cur[i] - m * add[i] >= 0)
			continue;

		Q.push(mp(cur[i] / add[i], i));
	}

	FOR(i, 1, n)
		if(cur[i] - add[i] * m <= a[i])
			cnt += (a[i] - (cur[i] - add[i] * m) + p - 1) / p;

	return cnt <= m * k;

}

int main() {
	
	ios :: sync_with_stdio(0);

	cin >> n >> m >> k >> p;

	FOR(i, 1, n)
		cin >> a[i] >> add[i];

	ll l = 0, r = 1e15;

	while(l < r)
	{
		ll m = l + r >> 1;

		if(f(m))
			r = m;
		else
			l = m + 1;
	}

	cout << l << endl;

	return 0;

}
