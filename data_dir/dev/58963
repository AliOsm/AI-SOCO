#include <functional>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <fstream>
#include <cstdlib>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <cstdio>
#include <vector>
#include <math.h>
#include <queue>
#include <stack>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef long double ld;

template <typename T>
T nextInt() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if (ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return x * p;
}
const int maxN = (int)5e3 + 10;
const int INF = (int)1e9 + 5;
const int mod = (int)1e9 + 7;
const ll LLINF = (ll)4e18 + 5;

int dp[2][maxN][maxN];

int main() {


    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    int n, k;
    cin >> n >> k;

    dp[0][0][0] = 1;
    for (int i = 0; i < n; ++i) {
        int c;
        cin >> c;
        for (int j = 0; j <= k; ++j) {
            for(int p = 0; p <= k; ++p) {
                dp[1][j][p] |= dp[0][j][p];
                if (j >= c) dp[1][j][p] |= dp[0][j - c][p];
                if (p >= c) dp[1][j][p] |= dp[0][j][p - c];
            }
        }
        for(int j = 0; j <= k; ++j) {
            for (int p = 0; p <= k; ++p) {
                dp[0][j][p] = dp[1][j][p];
                dp[1][j][p] = 0;
            }
        }
    }

    int res = 0;
    for(int j = 0; j <= k; ++j){
        if (dp[0][j][k-  j]) {
            res++;
        }
    }
    cout << res << endl;
    for (int j = 0; j <= k; ++j) {
        if (dp[0][j][k - j]) {
            cout << j << ' ';
        }
    }

    return 0;
}