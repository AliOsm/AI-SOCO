#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define ull unsigned long long
#define ld long double
#define endl '\n'
#define TIME 1.0*clock()/CLOCKS_PER_SEC
#define pii pair < int , int >
#define Endl '\n'

#pragma GCC optimize("Ofast")

using namespace std;
using namespace __gnu_pbds;

template <typename T> using ordered_set = tree <T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 gen(chrono::system_clock::now().time_since_epoch().count());

const ll mod = 1e9 + 7;
const int FFTM = 998244353;
const int N = 1e5 +  10;

const int SX[4] = {0 , 1 , -1 , 0};
const int SY[4] = {1 , 0 , 0 , -1};
const int rx[8] = {1, -1, 0, 0, 1, 1, -1, -1};
const int ry[8] = {0, 0, 1, -1, 1, -1, 1, -1};
const int kx[8] = {1, 1, -1, -1, 2, 2, -2, -2};
const int ky[8] = {2, -2, 2, -2, 1, -1, 1, -1};

typedef cc_hash_table< int, int, hash<int>, equal_to<int>, direct_mask_range_hashing<int>, hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;

int k;

vector < int > all;

bool ok(int x){
    int sum = 0;
    int kol = 0;
    for (int i = 0;i < all.size(); ++i){
        sum += all[i];
        if (sum > x){
            kol++;
            sum = all[i];
        }
        if (sum > x)return 0;
    }
    kol++;
    return (kol <= k);
}

int32_t main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#endif
    cin >> k;
    string s;
    while(cin >> s){
        int val = 0;
        int m = s.size();
        for (int i = 0;i < m; ++i){
            val++;
            if (s[i] == '-')all.pb(val), val = 0;
        }
        val++;
        all.pb(val);
    }
    all.back()--;
//    for (auto to : all){
//        cout << to << " ";
//    }
    int l = 1, r = 1e6 + 10;
    int ans = -1;
    while (l <= r){
        int mid = (l + r) >> 1;
        if (ok(mid))r = mid - 1, ans  =mid;
        else l = mid + 1;
    }
//    cerr << ok(0) << endl;
    cout << ans << endl;
    return 0;
}
