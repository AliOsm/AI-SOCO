#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
using namespace std;
#define F first
#define S second
#define pb push_back
#define MP make_pair
#define MS0(I) memset(I, 0, sizeof(I));
#define ALL(x) begin(x),end(x)
#define SZ(x) ((int)(x).size())
#define rep(i, n) for(int i = 0; i < n; i ++)
#define rep1(i, a, b) for(int i = a; i < b; i ++)
#define per1(i, a, b) for(int i = a; i >= b; i --)
#define IOS ios_base::sync_with_stdio(0); cin.tie(0)
typedef long long LL;
typedef long double LDB;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
//////////////////////
const long double eps = 1e-13;
const long double PI = acos(-1);
const int INF = (int)1e9;
const LL  INFF = (LL)1e18;
const int mod = (int)1e9 + 7;
const int MXN = (int)7e4 + 7;
int n, m;
int dp[17][17][MXN];
char mp[17][17];
struct PT{
	 int mask, x, y;
	  PT(){};
		 PT(int _mask, int _x, int _y){ mask = _mask, x = _x, y = _y; }
};
int xx[] = {1, 0, 0, -1};
int yy[] = {0, 1, -1, 0};
int in[17][17];
int main(void){
  scanf("%d %d", &n, &m);
	rep1(i, 1, n+1) scanf("%s", mp[i] + 1);
  int ans = INF;
	rep1(i, 1, n+1) rep1(j, 1, m+1) rep(k, MXN) dp[i][j][k] = INF;
	queue<PT>Q;
	int len = 1;
	rep1(i, 1, n+1) rep1(j, 1, m+1) if(mp[i][j] == '1'){
		char nxt = '2';
		int x = i, y = j;
		int mask = 0;
		while(1){
			int dir = -1;
			rep(k, 4) if(mp[x + xx[k]][y + yy[k]] == nxt){
				x += xx[k];
				y += yy[k];
				dir = k;
				mask += dir<<(2*(nxt - '2')); 
				nxt += 1;
				len++;
				break;
			}
			if(nxt > '9') break;
			if(dir == -1) break;
		}
		dp[i][j][mask] = 0;
		Q.push( PT(mask, i, j) );
		break;
	}
	int cntp = 0;
	while(!Q.empty()){
		++cntp;
		int mask = Q.front().mask, x = Q.front().x, y = Q.front().y;
		Q.pop();
		int cx = x, cy = y;
		in[cx][cy] = cntp;
		for(int i = 0; i < len - 2; ++i){
			int v = (mask>>(2*i)) & 3;
			cx += xx[v], cy += yy[v];
			in[cx][cy] = cntp;
		}
		int nxtmask = (mask - ((mask>>(2*len-4))<<(2*len-4)))<<2;
		rep(i, 4){
			int nx = x + xx[i];
			int ny = y + yy[i];
			if(nx < 1 || nx > n || ny < 1 || ny > m) continue;
			if(in[nx][ny] == cntp || mp[nx][ny] == '#') continue;
			int v = nxtmask | (3 - i);
			if(mp[nx][ny] == '@') ans = min(ans, dp[x][y][mask] + 1);
			else if(dp[nx][ny][v] > dp[x][y][mask] + 1){
				dp[nx][ny][v] = dp[x][y][mask] + 1;
				Q.push( PT(v, nx, ny) );
			}
		}
	}
	printf("%d\n", ans == INF ? -1 : ans);
	return 0;
}
