/*
СТРОИМ СТЕНУ РАБОТЯГИ!
█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═█
█═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═█
█═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═█
█═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═█
█═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═█
█═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═█
█═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═█
█═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═█
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█
*/
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
 
 
 
using namespace std;
 
 
 
 
#define ll long long
#define ld long double

const int N = 300300;


struct tup {
	ll val;
	int i, j;
	tup() {}
	tup(ll v, int I, int J) {
		val = v;
		i = I;
		j = J;
	}
};


tup ans[N];

ll cost[N];

vector<ll> a[4];

int w[N];

int main() {
	int n, m;
	scanf("%d %d", &n, &m);
	for (int i = 1; i <= n; ++i) {
		cin >> w[i] >> cost[i];
		a[w[i]].push_back(cost[i]);
	}
	for (int i = 1; i <= 3; ++i) {
		if (!a[i].empty()) {
			sort(a[i].rbegin(), a[i].rend());
		}
	}
	for (int i = 0; i <= m + 2; ++i) {
		ans[i] = tup(0, -1, -1);
	}
	for (int x = 0; x <= m; ++x) {
		int i = ans[x].i, j = ans[x].j;
		if (ans[x].val > ans[x + 1].val) {
			ans[x + 1] = ans[x];
		}
		if (i + 1 < (int)a[1].size() && ans[x].val + a[1][i + 1] > ans[x + 1].val) {
			ans[x + 1] = tup(ans[x].val + a[1][i + 1], i + 1, j);
		}
		if (j + 1 < (int)a[2].size() && ans[x].val + a[2][j + 1] > ans[x + 2].val) {
			ans[x + 2] = tup(ans[x].val + a[2][j + 1], i, j + 1);
		}
	}
	ll answer = 0LL;
	ll sum = 0LL;
	for (int x = 0; x < (int)a[3].size(); ++x) {
		sum += a[3][x];
		if (3 * (x + 1) <= m) {
			if (sum + ans[m - 3 * (x + 1)].val > answer) {
				answer = sum + ans[m - 3 * (x + 1)].val;
			}
			answer = max(answer, sum);
		} else {
			break;
		}
	}
	answer = max(answer, ans[m].val);
	cout << answer << endl;
	return 0;
}






 