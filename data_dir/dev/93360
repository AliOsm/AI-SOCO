#include <bits/stdc++.h>
using namespace std;

using LL = long long;

const int N = 5002, INF = 1e8;
vector<int> vals[N];
int vis[N], lst[N];
int best[N][N];
int a[N], b[N], c[N];

int main() {
#ifdef LOCAL_EXEC
	freopen("sample.in", "r", stdin);
//	freopen("sample.out", "w", stdout);
#else
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#endif

  int n, m, k; cin >> n >> m >> k;
  for (int u = 1; u <= n; u++) {
    cin >> a[u] >> b[u] >> c[u];
    lst[u] = u;
  }
  for (int i = 0; i < m; i++) {
    int u, v; cin >> u >> v;
    lst[v] = max(lst[v], u);
  }

  for (int u = 1; u <= n; u++) {
    vals[lst[u]].push_back(c[u]);
  }

  for (int s = 0; s < N; s++) {
    best[0][s] = (s <= k ? 0 : -INF);
  }
  for (int u = 1; u <= n; u++) {
    for (int s = 0; s < N; s++) {
      best[u][s] = -INF;
    }

    for (int s = a[u]; s + b[u] < N; s++) {
      best[u][s + b[u]] = best[u - 1][s];
    }
    {
      int z = vals[u].size();
      sort(vals[u].rbegin(), vals[u].rend());
      for (int i = 1; i < z; i++) {
        vals[u][i] += vals[u][i - 1];
      }
      for (int s = 0; s < N; s++) {
        for (int i = 0; i < z && i < s; i++) {
          best[u][s - i - 1] = max(best[u][s - i - 1], best[u][s] + vals[u][i]);
        }
      }
    }

    for (int s = N - 1; s > 0; s--) {
      best[u][s - 1] = max(best[u][s], best[u][s - 1]);
    }
  }

  cout << max(-1, best[n][0]) << '\n';

  return 0;
}
