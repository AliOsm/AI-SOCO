#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

using namespace __gnu_pbds;
using namespace std;

const int maxn = 2e5 + 5;
vector<int> qr[maxn];
vector<int> pos[maxn];
int mult, mod, h[maxn], pw[maxn], z[maxn], sz[maxn], cc[maxn], v[maxn];

const int prs[60] = {
    73 , 79 , 83 , 89 , 97 , 101, 103, 107, 109, 113,
    127, 131, 137, 139, 149, 151, 157, 163, 167, 173,
    179, 181, 191, 193, 197, 199, 211, 223, 227, 229,
    233, 239, 241, 251, 257, 263, 269, 271, 277, 281,
    283, 293, 307, 311, 313, 317, 331, 337, 347, 349,
    353, 359, 367, 373, 379, 383, 389, 397, 401, 409
};
const int mods[100] = {
    998244521,998244523,998244529,998244601,998244617,998244619,998244631,998244649,998244673,998244677,
    998244679,998244707,998244713,998244749,998244761,998244787,998244799,998244803,998244839,998244853,
    998244889,998244893,998244899,998244911,998244943,998244967,998244991,998245037,998245063,998245091,
    998245097,998245099,998245109,998245111,998245141,998245147,998245153,998245159,998245169,998245177,
    998245189,998245207,998245211,998245223,998245247,998245331,998245349,998245373,998245403,998245463,
    998245481,998245483,998245487,998245489,998245531,998245543,998245553,998245571,998245613,998245631,
    998245639,998245687,998245697,998245709,998245711,998245733,998245739,998245757,998245777,998245799,
    998245837,998245867,998245877,998245909,998245943,998245949,998245981,998246021,998246047,998246071,
    998246077,998246101,998246129,998246143,998246177,998246189,998246191,998246237,998246251,998246257,
    998246261,998246267,998246279,998246317,998246363,998246369,998246371,998246387,998246399,998246401
};
 
int main() {
    srand(time(0) + clock());
    mult = prs[rand() % 60];
    mod = mods[rand() % 60];

    ios_base::sync_with_stdio(false), cin.tie(0);
    string t; cin >> t;
    int n; cin >> n;
    
    map<int, int> rep;

    for (int i = 0; i < n; ++i) {
        string s; cin >> s;
        int hv = 0;
        for (int j = 0; j < (int)s.size(); ++j)
            hv = (hv * 1ll * mult + s[j]) % mod;

        if (rep.find(hv) == rep.end()) {
            rep[hv] = i;
            cc[i] = 1;
            sz[i] = s.size();
            qr[s.size()].push_back(hv);
        } else {
            cc[rep[hv]]++;
        }
    }

    h[0] = t[0];
    for (int i = 1; i < (int)t.size(); ++i)
        h[i] = (h[i - 1] * 1ll * mult + t[i]) % mod;

    pw[0] = 1;
    for (int i = 1; i < maxn; ++i)
        pw[i] = pw[i - 1] * 1ll * mult % mod;

    auto query = [&](int l, int r) {
        if (l == 0) return h[r];
        return int(h[r] + mod - pw[r - l + 1] * 1ll * h[l - 1] % mod) % mod;
    };

    for (int i = 0; i < maxn; ++i) {
        if (qr[i].empty()) continue;
        cc_hash_table<int, int> rev;
        for (int j : qr[i]) rev[j] = rep[j];
        for (int j = i - 1; j < (int)t.size(); ++j) {
            int h = query(j - i + 1, j);
            if (rev.find(h) != rev.end()) {
                int x = rev[h];
                z[j - sz[x] + 1] += cc[x];
                v[j + 1] += cc[x];
            }
        }
    }
    long long ans = 0;
    for (int i = 0; i < maxn; ++i) ans += z[i] * 1ll * v[i];
    cout << ans << endl;
}
