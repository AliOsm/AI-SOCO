#include <bits/stdc++.h>
#define int long long 
using namespace std;


const int N = 2007, mod = 1e9 + 7;

int R[N][N], D[N][N], dp[N][N][2], Q1[N][N], Q2[N][N];

char str[N][N];


int q1(int l, int r, int idx) {
        if(l > r) return 0;
        return (Q1[idx][l] - Q1[idx][r + 1] + mod) % mod;
}

int q2(int l, int r, int idx) {
        if(l > r) return 0;
        return (Q2[l][idx] + mod - Q2[r + 1][idx]) % mod;
}

int32_t main() {
        int n, m; cin >> n >> m;

        if(n == 1 && m == 1) {
                cout << 1 << endl;
                return 0;
        }

        for(int i = 1; i <= n; i++) cin >> str[i] + 1;

        for(int i = n; i >= 1; i--) {
                for(int j = m; j >= 1; j--) {
                        R[i][j] = (str[i][j] == 'R') + R[i][j + 1];
                        D[i][j] = (str[i][j] == 'R') + D[i + 1][j];
                }
        }

        for(int i = n; i >= 1; i--) {
                for(int j = m; j >= 1; j--) {
                        if(i == n && j == m) {
                                dp[i][j][1] = dp[i][j][0] = (str[i][j] == '.');
                        } else {
                                if(D[i][j] != (n - i + 1)) {
                                        int r = m - R[i][j + 1];
                                        dp[i][j][1] = q1(j + 1, r, i);
                                }
                                if(R[i][j] != (m - j + 1)) {
                                        int d = n - D[i + 1][j];
                                        dp[i][j][0] = q2(i + 1, d, j);
                                }
                        }
                        Q1[i][j] = (dp[i][j][0] + Q1[i][j + 1]) % mod;
                        Q2[i][j] = (dp[i][j][1] + Q2[i + 1][j]) % mod;
                }
        }

        cout << (dp[1][1][1] + dp[1][1][0]) % mod << endl;
}
