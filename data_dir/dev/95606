#include <iostream>
#include <fstream>
#include <algorithm>
#include <iomanip>
#include <random>
#include <ctime>
#include <bitset>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <cmath>
#include <climits>
#include <cstring>
#include <queue>
#include <deque>
#include <list>
#include <stack>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma GCC optimize("O3")
#define ld long double
#define ull unsigned long long
#define ll long long
#define pb push_back
#define pii pair<int, int>
#define pll pair<ll, ll>
#define all(x) x.begin(), x.end()
#define fast_io cout.tie(0), cin.tie(0), ios_base::sync_with_stdio(0)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
using namespace std;
ld eps = (ld)1 / 1e9;
ll inf = 1e18;
ll sqr(ll a) { return a * a; }
ll gcd(ll a, ll b) { return !a ? b : gcd(b % a, a); }
ll binpow(ll a, ll b, ll mod) { return b ? (b % 2 ? (a * (sqr(binpow(a, b / 2, mod)) % mod)) % mod : sqr(binpow(a, b / 2, mod)) % mod) : 1; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int a[1001], b[1001];

int main()
{
    fast_io;
    ll i, a1, a2, k1, k2, n, mn = 1e9, t1, t2, tm, mx = -1;
    cin >> a1 >> a2 >> k1 >> k2 >> n;
    for (i = 0; i <= n; i++)
    {
        if (i > a1 * k1 || (n - i) > a2 * k2) continue;
        mx = max(mx, min(a1, i / k1) + min(a2, (n - i) / k2));
        tm = 0;
        t1 = i / a1;
        t2 = i % a1;
        if (t1 >= k1) tm += a1;
        else if (t1 + 1 == k1) tm += t2;
        t1 = (n - i) / a2;
        t2 = (n - i) % a2;
        if (t1 >= k2) tm += a2;
        else if (t1 + 1 == k2) tm += t2;
        //cout << i << ' ' << tm << '\n';
        mn = min(mn, tm);
    }
    cout << mn << ' ' << mx;
    return 0;
}