#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327
#endif // M_PI
#define endl "\n"
#define S struct
#define X first
#define Y second
#define V vector
#ifndef __linux__
#define LLD "%I64d"
#else
#define LLD "%ll""d"
#endif
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
using namespace std;
typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
void sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); }
S Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;
S FAIL { FAIL () { cout << "CHANGE!!!" << endl;}};

template <class T> class SegmentTree
{
    int maxn = 1000000;
    vector <T> t;
    vector <T> mn;
    T sum(int v, int tl, int tr, int add = 0) {
        if (tl == tr) {
            if (add + t[v] >= 0) {
                return maxn;
            }
            return tl;
        }
        int tm = (tl + tr) / 2;
        if (mn[v * 2 + 1] + add < 0) {
            return sum(v * 2 + 1, tl, tm, add);
        } else {
            return sum(v * 2 + 2, tm + 1, tr, add + t[v * 2 + 1]);
        }
    }
    void update(int v, int tl, int tr, int pos, T new_val) {
        if (tl == tr) {
            t[v] = new_val == -1 ? 1 : -1;
            mn[v] = new_val == -1 ? 1 : -1;
        } else {
            int tm = (tl + tr) / 2;
            if (pos <= tm) {
                update (v * 2 + 1, tl, tm, pos, new_val);
            } else {
                update (v * 2 + 2, tm + 1, tr, pos, new_val);
            }
            t[v] = t[v * 2 + 1] + t[v * 2 + 2];
            mn[v] = min(t[v * 2 + 1] + mn[v * 2 + 2], mn[v * 2 + 1]);
        }
    }
public:
    SegmentTree (int n)
    {
        maxn = n;
        t.resize(4 * maxn);
        mn.resize(4 * maxn);
    }
    SegmentTree (const vector <T> &a) {
        maxn = a.size();
        t.resize(4 * maxn);
        build(a, 0, 0, maxn - 1);
    }
    void update(int pos, T add)
    {
        update(0, 0, maxn - 1, pos, add);
        //DEBA(t);
        //DEBA(mn);
    }
    T sum()
    {
        return sum(0, 0, maxn - 1);
    }
};

int main()
{
    int m;
    cin >> m;
    SegmentTree <int> t(m);
    vector <int> a(m + 1, -1);
    FOR (i, 0, m) {
        int x, z;
        cin >> x >> z;
        --x;
        x = m - 1 - x;
        if (z == 1) {
            int y;
            cin >> y;
            //cout << "UPD " << x << " " << y << endl;
            t.update(x, y);
            a[x] = y;
        } else {
            //cout << "UPD " << x << " " << -1 << endl;
            t.update(x, -1);
            a[x] = -1;
        }
        //DEB(t.sum());
        cout << a[t.sum()] << endl;
        //cout.flush();
    }
    return 0;
}

