/* 
chirag11032000
Chirag Thakur
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

using ll = long long;
using db = double;
using pii = pair < int, int >;
using pll = pair < ll, ll >;

template < typename T > using OrderedSet = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;
template < typename T > using MinPriorityQueue = priority_queue < T, vector < T >, greater < T > >;

#ifndef ONLINE_JUDGE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template < typename Arg1 >
void __f(const char* name, Arg1&& arg1) {
	cerr << name << " : " << arg1 << std :: endl;
}
template < typename Arg1, typename... Args >
void __f(const char* names, Arg1&& arg1, Args&&... args) {
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << " | ";
	__f(comma + 1, args...);
}
#else
#define trace(...)
#endif

#define eb emplace_back
#define mp make_pair
#define mt make_tuple
#define fastIo() ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0)

const db PI = acos(-1);
const ll LINF = LLONG_MAX;
const int MOD = 1e9 + 7, INF = INT_MAX, N = 1e5 + 10;

void testCase();

int main() {
	fastIo();
	testCase();
	cerr << "Time taken: " << int((clock() * 1000.) / CLOCKS_PER_SEC) << "ms\n";
	return 0;
}

void testCase() {
	int n;
	cin >> n;
	int req = n / 3;
	string str;
	cin >> str;
	int zero = 0, one = 0, two = 0;
	for (auto &el : str) {
		zero += (el == '0');
		one += (el == '1');
		two += (el == '2');
	}
	int pos2 = req - two;
	if (pos2 > 0) {
		for (int i = n - 1; i >= 0; --i) {
			if (pos2 == 0) {
				break;
			} else if (str[i] == '1') {
				if (one > req) {
					str[i] = '2';
					--one, --pos2, ++two;
				}
			}
		}
		for (int i = n - 1; i >= 0; --i) {
			if (pos2 == 0) {
				break;
			} else if (str[i] == '0') {
				if (zero > req) {
					str[i] = '2';
					--zero, --pos2, ++two;
				}
			}
		}	
	}
	int pos0 = req - zero;
	if (pos0 > 0) {
		for (int i = 0; i < n; ++i) {
			if (pos0 == 0) {
				break;
			} else if (str[i] == '2') {
				if (two > req) {
					str[i] = '0';
					--two, --pos0, ++zero;
				}
			}
		}
		for (int i = 0; i < n; ++i) {
			if (pos0 == 0) {
				break;
			} else if (str[i] == '1') {
				if (one > req) {
					str[i] = '0';
					--one, --pos0, ++zero;
				}
			}
		}
	}
	int pos1 = req - one;
	if (pos1 > 0) {
		for (int i = 0; i < n; ++i) {
			if (pos1 == 0) {
				break;
			} else if (str[i] == '2') {
				if (two > req) {
					str[i] = '1';
					--two, --pos1, ++one;
				}
			}
		}
		for (int i = n - 1; i >= 0; --i) {
			if (pos1 == 0) {
				break;
			} else if (str[i] == '0') {
				if (zero > req) {
					str[i] = '1';
					--zero, --pos1, ++one;
				}
			}
		}
	}
	cout << str << "\n";
}