#include<bits/stdc++.h>
#define In_the_name_of_allah_the_merciful ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define Alhamdulillah return 0;
#define pb push_back
#define ins(x) insert(x)
#define fi first
#define se second
#define lb lower_bound
#define ub upper_bound
#define all(v) (v.begin(),v.end())
#define sz(v) ((ll)((v).size()))
#define reset(v,val) memset(v,val,sizeof(v))
#define erep(i, x, n) for ( i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for( i = x; i<(ll)(n); i++)
using namespace std;
typedef long long  int   ll;
const long long int mod=1e9+7;
ll dx[]={0,0,1,-1};
ll dy[]={1,-1,0,-1};
ll m,k,n,a[100005],dp[100005];
set<ll>st;
string s1="one",s2="zero",s,ch="";
vector<ll>v[1000005],vans;
vector< pair<ll,ll> >vv;
vector< pair<long double,ll> > vvA,vvB;
vector< pair< pair <ll,ll>,ll > > vvv;
priority_queue <ll> pq;
map<ll,ll> mp;
 struct node{
    ll mx,idx;
    node(){
       mx=-5e9;idx=0;
    }
    node(ll x,ll i){
      mx=x;idx=i;
    }
    void merge(node left,node right){
        if(left.mx>right.mx){
            mx=left.mx;
            idx=left.idx;
        }
        else{
            mx=right.mx;
            idx=right.idx;
        }
    }
} tree[2000005];
/***********************************/
void build(ll nod,ll start,ll end){
   if(start==end){
        tree[nod]=node(a[start],start);
   }
   else{
        ll mid=(start+end)/2;
		build(2*nod,start,mid);
		build(2*nod+1,mid+1,end);
		tree[nod].merge(tree[2*nod],tree[2*nod+1]);
   }
}
/*******************************/
node query(ll nod,ll start,ll end,ll l,ll r){
	if(r<start or l>end)return node();
	if(l<=start&&r>=end)return tree[nod];
    ll mid=(start+end)/2;
    node p1=query(2*nod,start,mid,l,r);
    node p2=query(2*nod+1,mid+1,end,l,r);
    node p=node();
    p.merge(p1,p2);
    return p;
}
/*******************************/


int main(){
In_the_name_of_allah_the_merciful
	ll i=0,x,y,j=0,z=0,q,nb0=0,nb=0,nbmax=0,nbinf=0,nb2=0,mm=5e8,idx=0,ok=0,l,r,negatif=0,positif=0,l1,r1;
	set<  ll > ::iterator it,it1,it2;
	char c;
   // freopen("a.txt","r",stdin);
    cin>>n;
    for(i=1;i<=n;i++){
        cin>>a[i];
    }
    build(1,1,n);
    dp[n]=0;
    for(i=n-1;i>=1;i--){
        ll idx=query(1,1,n,i+1,a[i]).idx;
        dp[i]=dp[idx]+(idx-i)+(n-a[i]);
    }
    ll res=0;
    for(i=1;i<=n;i++)res+=dp[i];
    cout<<res;
Alhamdulillah
 }
