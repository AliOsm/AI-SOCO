#include<bits/stdc++.h>
using namespace std;
#define all(v) ((v).begin()),((v).end())
#define ll long long
#define fastIO cout << fixed << setprecision(12), ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)
double const EPS = 1e-12, PI = acos(-1);
const int N = 1e6 + 9, M = 5e5 + 9, OO = 1e9 + 7, MOD = 1e9 + 7;
const ll inf = 1e18;

vector<int> adj[N];
int u, v, nodes, edges, vis[N], visEd[N];
int isCycle, start;
vector<int> path;

void dfs(int node) {
  vis[node] = 1;
  for(auto it: adj[node]) {
    if(vis[it]) continue;
    dfs(it);
  }
}

bool dfs2(int node, int par) {
  vis[node] = 2;
  if(adj[node].size() != 2)
    return 0;
  for(auto it: adj[node]) {
    if(par == it) continue;
    if(vis[it] == 2)
      return 1;
    return dfs2(it, node);
  }
}

int main() {
  fastIO;
#ifdef LOCAL
  freopen("input.in", "rt", stdin);
#endif
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; ++i) {
    cin >> u >> v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  int total = 0;
  for (int i = 1; i <= n; ++i) {
    if(vis[i]) continue;
    dfs(i);
    total += dfs2(i, -1);
  }
  cout << total;
  return 0;
}
