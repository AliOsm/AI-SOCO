#include<bits/stdc++.h>

//#include "rubo.h"
#define MP make_pair
#define PB push_back
#define in int
#define ll long long
#define vc vector
#define SQ(j) (j)*(j)
//#define x first
//#define y second

//#define ld long double
#define dbl  double
#define pll pair<long long,long long>
#define pii pair<int,int>
#define all(j) j.begin(), j.end()
#define loop(xxx, yyy) for(int xxx = 0; xxx < yyy; xxx++)
//#define printf(fmt, ...) (0)
//#define HOME
//#define y0 ngacaleiebinvoaeu
//#define y1 gnarpipipaigare
#define j1 adsfndnasfafoasp

int DEBUG = 1;
//#define printf(...) (0)
#define db(x) if(DEBUG) cout << #x << " = " << x << endl
#define dbCont(x)if(DEBUG) { cout << #x << ": "; for(auto shun: x) cout << shun << ' '; cout<<endl;};

typedef long double ld;

using namespace std;


bool is_lucky(int x){
    while(x){
        int d = x%10;
        if(d != 4 && d != 7) return false;

        x /= 10;
    }
    return true;
}

const ll N = 100 * 1000+5;
const ll MOD = 1000*1000*1000+7;
ll bin_pow(ll base, ll exp){
    if(exp == 0) return 1;

    ll h = bin_pow(base, exp/2);
    h=(h*1ll*h)%MOD;
    if(exp % 2 == 0) return h;
    return (h*base)%MOD;
}

ll inv(ll x){
    return bin_pow(x,MOD-2);
}

ll fct[N];

ll C(ll n, ll k){
    if(n == 0) return k == 0;
    if(n < k) return 0;
    
    ll res = fct[n];

    res = res*1ll*inv(fct[k]);
    res %= MOD;

    res = res*1ll*inv(fct[n-k]);
    res %= MOD;

    return res;
}


ll n,k;
vector<ll> a;

map<ll,ll> mp;

ll dp[2][N];


int main() {
/*
    int t = 0;
    for(int i = 1; i <= 1e9; i++){
        if(is_lucky(i)){
            cout << i << endl;
            t++;
        }
    }
    */

    fct[0] = 1;
    fct[1] = 1;
    for(ll i = 2; i < N; ++i){
        fct[i] = (fct[i-1]*1ll*i) % MOD;
    }




//    cout << C(3,2) << endl;
//    cout << inv(45) << endl;
//    cout << inv(inv(45)) << endl;




    cin >> n >> k;
    loop(i,n){
        ll e;
        cin >> e;
        a.push_back(e);
    }

    ll other = n;
    for(ll e : a){
        if(is_lucky(e)){
            mp[e]++;
            other--;
        }
    }


    ll res = C(other,k);

    vc<ll> cnt;

    for(auto p : mp){
        cnt.push_back(p.second);

//        for(int select = 1; select <= min(k, cnt); select++){
//            db(cnt);
//            db(select);
//            db((C(cnt, select)  * 1ll * C(other, k-select)) % MOD);
//
//            res += (C(cnt, select)  * 1ll * C(other, k-select)) % MOD;
//            res %= MOD;
//        }
    }

    if(!cnt.size()){
        cout << C(n,k) << endl;
        return 0;
    }


    loop(i, 2){
        dp[i][0] = 1;
    }
    for(int kk = 1; kk <= k; kk++){
        dp[0][kk] = cnt[0]*C(other, kk-1) + C(other, kk);
        dp[0][kk] %= MOD;
    }

    for(int i = 1; i < cnt.size(); i++){
        int row = i%2;
        int prev = row^1;
        dp[row][0]=1;

        for(int kk = 1; kk <= k; kk++){
            dp[row][kk] =
                    cnt[i]*dp[prev][kk-1]+
                    dp[prev][kk];
            dp[row][kk] %= MOD;
        }

        // empty prev
        loop(j,N) dp[prev][j] = 0;
        dp[prev][0] = 1;
    }

//    loop(i,cnt.size()){
//        loop(kk,k+1){
//            cout << dp[i][kk] << ' ';
//        }
//        cout << endl;
//    }

    int row = cnt.size()-1;
    cout << dp[row%2][k] << endl;


    return 0;
}