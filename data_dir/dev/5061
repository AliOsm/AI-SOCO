/* ****GT_18**** */

#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define    endl        '\n'
#define pii         pair<ll int,ll int>
#define vi          vector<ll int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define rep(i,a,b)    for(ll int i=a;i<b;i++)
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
using namespace std;

#define N  100005

vi a[N],st(N),en(N),dis(N),val(N),ans(N);
pii seg[20][N];
ll timer=0;

void dfs(ll node,ll par,ll lev)
{
    st[node]=++timer;
    dis[timer]=lev;
    for(auto i:a[node])
        if(i!=par)
            dfs(i,node,lev+1);
    en[node]=timer;
}

void build(ll cur,ll l,ll r)
{
    if(l==r) 
    {
        seg[cur][l]=mp(dis[l],ans[l]);
        return;
    }
    ll mid=(l+r)/2;
    ll i=l,j=mid+1,k=l;
    build(cur+1,l,mid);
    build(cur+1,mid+1,r);
    while(i<=mid&&j<=r)
    {
        if(seg[cur+1][i].F<seg[cur+1][j].F)
            seg[cur][k]=seg[cur+1][i],k++,i++;
        else seg[cur][k]=seg[cur+1][j],k++,j++;
    }
    while(i<=mid)
        seg[cur][k]=seg[cur+1][i],k++,i++;
    while(j<=r)
        seg[cur][k]=seg[cur+1][j],k++,j++;
    rep(i,l+1,r+1)
        seg[cur][i].S=min(seg[cur][i].S,seg[cur][i-1].S);
}
ll query(ll cur,ll l,ll r,ll l1,ll r1,ll k)
{
    if(l>=l1&&r<=r1)
    {
        pii ans=mp(k,hell);
        ll ub=ubnd(seg[cur]+l,seg[cur]+r+1,ans)-seg[cur];
        if(ub==l) return hell;
        return seg[cur][ub-1].S;
    }
    else if(r1<l||l1>r) 
        return hell;
    else
    {
        ll mid=(l+r)/2;
        return min(query(cur+1,l,mid,l1,r1,k),query(cur+1,mid+1,r,l1,r1,k));
    }
}
// void update(ll cur,ll st,ll en,ll pos,ll upd)
// {
//     if(st==en)
//     {
//         a[pos]+=upd;                    /*  4-change here  */
//         seg[cur]+=upd;                    /*  5-change here  */
//         return;
//     }
//     ll mid=(st+en)>>1;
//     if(st<=pos&&pos<=mid)
//         update(2*cur,st,mid,pos,upd);
//     else
//         update(2*cur+1,mid+1,en,pos,upd);
//     seg[cur]=seg[2*cur]+seg[2*cur+1];    /*  6-change here  */
// }

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int TESTS=1;
//    cin>>TESTS;
    while(TESTS--)
    {
        ll n,r;
        cin>>n>>r;
        rep(i,1,n+1) cin>>val[i];
        rep(i,0,n-1)
        {
            ll x,y;
            cin>>x>>y;
            a[x].pb(y);
            a[y].pb(x);
        }
        dfs(r,-1,0);
        rep(i,1,n+1) ans[st[i]]=val[i];
        build(1,1,timer);
        ll qury;
        cin>>qury;
        ll prev=0;
        while(qury--)
        {
            ll p,q;
            cin>>p>>q;
            ll l=(prev+p)%n+1;
            ll r=(prev+q)%n;
            prev=query(1,1,timer,st[l],en[l],r+dis[st[l]]);
            cout<<prev<<endl;
        }
    }
    return 0;
}