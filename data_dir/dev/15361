#include <bits/stdc++.h>
using namespace std;

#define mp make_pair
#define pb push_back

typedef long long ll;
typedef pair<int, int> pii;

struct Fenwick {
  vector<int> t;
  Fenwick() {}
  void resize(int sz) {
    t.resize(sz);
  }
  void update(int pos, int val) {
    while (pos < (int)t.size()) {
      t[pos] += val;
      pos |= pos + 1;
    }
  }
  int getSum(int pos) {
    int res = 0;
    while (pos > -1) {
      res += t[pos];
      pos = (pos & (pos + 1)) - 1;
    }
    return res;
  }
  void clear() {
    fill(t.begin(), t.end(), 0);
  }
};

const int MAXN = 100100;

int n;
ll k;
int a[MAXN];
vector<int> renum;

int main() {
#ifdef LOCAL
  freopen("input.txt", "r", stdin);
#endif
  scanf("%d%lld", &n, &k);
  for (int i = 1; i <= n; ++i) {
    scanf("%d", a + i);
    renum.pb(a[i]);
  }
  sort(renum.begin(), renum.end());
  renum.erase(unique(renum.begin(), renum.end()), renum.end());
  for (int i = 1; i <= n; ++i) {
    a[i] = lower_bound(renum.begin(), renum.end(), a[i]) - renum.begin();
  }
  int r = 2;
  ll cur = 0;
  Fenwick pref, suff;
  suff.resize(n);
  for (int i = n; i > 1; --i) {
    cur += suff.getSum(a[i] - 1);
    suff.update(a[i], 1);
  }
  pref.resize(n);
  ll res = 0;
  for (int i = 1; i < n; ++i) {
    pref.update(a[i], 1);
    cur += i - pref.getSum(a[i]);
    cur += suff.getSum(a[i] - 1);
    while (i == r || (r <= n && cur > k)) {
      int sf = suff.getSum(a[r] - 1);
      int pr = i - pref.getSum(a[r]);
      cur -= pr + sf;
      suff.update(a[r], -1);
      ++r;
    }
    //clog << i << ' ' << r << ' ' << cur << endl;
    res += n - r + 1;
  }
  printf("%lld\n", res);
  return 0;
}