/* ****GT_18**** */

#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define	endl		'\n'
#define pii         pair<ll int,ll int>
#define vi          vector<ll int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define rep(i,a,b)	for(ll int i=a;i<b;i++)
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
using namespace std;

#define N  1001

vi a[N];
set<pii> edges;

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{
		ll n,m,s,t;
		cin>>n>>m>>s>>t;
		rep(i,0,m)
		{
			ll u,v;
			cin>>u>>v;
			a[u].pb(v);
			a[v].pb(u);
			edges.insert({u,v});
			edges.insert({v,u});
		}
		queue<pii> q1,q2;
		q1.push({s,0});
		q2.push({t,0});
		vi dis1(n+1,-1);
		vi dis2(n+1,-1);
		while(!q1.empty())
		{
			pii cur=q1.front();
			q1.pop();
			if(dis1[cur.F]>=0)
				continue;
			dis1[cur.F]=cur.S;
			for(auto i:a[cur.F])
				q1.push({i,cur.S+1});
		}
		while(!q2.empty())
		{
			pii cur=q2.front();
			q2.pop();
			if(dis2[cur.F]>=0)
				continue;
			dis2[cur.F]=cur.S;
			for(auto i:a[cur.F])
				q2.push({i,cur.S+1});
		}
		ll dis=dis1[t];
		ll ans=0;
		rep(i,1,n+1)
		{
			rep(j,1,i)
			{
				if(edges.count({i,j}))
					continue;
				if(dis1[i]+1+dis2[j]>=dis&&dis1[j]+1+dis2[i]>=dis)
					ans++;
			}
		}
		cout<<ans<<endl;		
	}
	return 0;
}