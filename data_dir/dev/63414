#include<bits/stdc++.h>
using namespace std;
int n, m, x, y, z;
vector < int > edges[200000];

vector < int > for_a, for_b;
bool flag = false;

int vis[200000];

void dfs(int pos, int whose, int parent)
{

    //cout << pos << endl;

    if(vis[pos] != 0){
        if(vis[pos] == whose) return;

        flag = true;
        return;
    }

    vis[pos] = whose;

    int new_whose;

    if(whose == 1){
        for_a.push_back(pos);
        new_whose = 2;
    }
    else{
        for_b.push_back(pos);
        new_whose = 1;
    }

    for(int i = 0; i < edges[pos].size(); i++){
        if(parent != edges[pos][i]) dfs(edges[pos][i], new_whose, pos);
    }

    return;

}

int main()
{

    cin >> n >> m;

    for(int i = 1; i <= m; i++){

        scanf("%d %d", &x, &y);
        edges[x].push_back(y);
        edges[y].push_back(x);

    }

    for(int i = 1; i <= n; i++){
        if(vis[i] || edges[i].size() == 0) continue;
        dfs(i, 1, -1);
    }

    if(flag){
        cout << -1;
        return 0;
    }

    else{

        printf("%d\n", for_a.size());

        for(int i = 0; i < for_a.size(); i++) printf("%d ", for_a[i]);

        cout << endl;

        printf("%d\n", for_b.size());

        for(int i = 0; i < for_b.size(); i++) printf("%d ", for_b[i]);
    }


    return 0;
}
