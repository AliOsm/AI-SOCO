#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

struct pt{
	double x, y;
	pt operator+(pt p) const { return {x + p.x, y + p.y}; }
	pt operator-(pt p) const { return {x - p.x, y - p.y}; }
	pt operator*(double v) const { return {x * v, y * v}; }
	pt operator/(double v) const { return {x / v, y / v}; }
	bool operator==(pt p) { return x == p.x && y == p.y; }
	bool operator!=(pt p) { return !(*this == p); }
};

ostream& operator<<(ostream& os, pt p) {
	return os << "("<< p.x << "," << p.y << ")";
}

double dot(pt a, pt b) { return a.x*b.x + a.y*b.y; }
double cross(pt a, pt b) { return a.x*b.y - a.y*b.x; }
double dist2(pt a, pt b) { return dot(b - a, b - a); }

int orient(pt a, pt b, pt c) {
    double ret = cross(b - a, c - a);
    if(ret == 0) return 0;
   	return ret < 0 ? -1 : 1;
}

bool colinear(double a, double b, double c, pt p, pt q) {
	double aa = q.y - p.y;
	double bb = p.x - q.x;
	double cc = - aa * p.x - bb * p.y;
	return a * bb - aa * b == 0;
}

pt intersect(double a, double b, double c, pt p, pt q) {
	double aa = q.y - p.y;
	double bb = p.x - q.x;
	double cc = - aa * p.x - bb * p.y;
	double det = a * bb - aa * b;
	return pt{(b * cc - bb * c) / det , (aa * c - a * cc) / det};
}

pt source, sink;

double solve(pt p, pt q) {
	return sqrt(dist2(source,p)) + sqrt(dist2(p,q)) + sqrt(dist2(q,sink));
}

int main() {
	double a, b, c;
	scanf("%lf %lf %lf", &a, &b, &c);
	scanf("%lf %lf %lf %lf", &source.x, &source.y, &sink.x, &sink.y);

	double ans = abs(source.x - sink.x) + abs(source.y - sink.y);

	if(colinear(a,b,c,pt{0,0},pt{0,1})) {
		// cout << "hori\n";
		printf("%.10lf\n", ans);
		return 0;
	}
	if(colinear(a,b,c,pt{0,0},pt{1,0})) {
		// cout << "vert\n";
		printf("%.10lf\n", ans);
		return 0;
	}
	pt s1 = intersect(a,b,c, source,source + pt{0,1});
	pt s2 = intersect(a,b,c, source,source + pt{1,0});

	pt t1 = intersect(a,b,c, sink,sink + pt{0,1});
	pt t2 = intersect(a,b,c, sink,sink + pt{1,0});

	ans = min({ ans, solve(s1,t1), solve(s1,t2), solve(s2,t1), solve(s2,t2) });
	printf("%.10lf", ans);
	return 0;
}