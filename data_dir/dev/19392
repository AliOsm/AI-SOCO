#include<bits/stdc++.h>
using namespace std ;
#define LL long long
#define MOD 998244353LL
#define PI acos(-1.0)


/*
// Ordered set
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template<typename T> using orderset = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
//orderset<int> s ; //orderset<int>::iterator it ;
//orderset<int> X; //X.insert(1); //X.insert(2); //X.insert(4); //X.insert(8); //X.insert(16);
//cout<<*X.find_by_order(1)<<endl; // 2 //cout<<*X.find_by_order(2)<<endl; // 4 //cout<<*X.find_by_order(4)<<endl; // 16 //cout<<(end(X)==X.find_by_order(6))<<endl; // true
//cout<<X.order_of_key(-5)<<endl;  // 0 //cout<<X.order_of_key(1)<<endl;   // 0 //cout<<X.order_of_key(3)<<endl;   // 2 //cout<<X.order_of_key(4)<<endl;   // 2 //cout<<X.order_of_key(400)<<endl; // 5
*/

LL n , m , k , l , r , h ;
LL a[2003] ;
LL dp[2003][2003] ;
bool visit[2003][2003] ;


/*

void init( LL node , LL left , LL right ){
    if( left == right ){
        tree[node] = {tmp[node].first,1} ;
        return ;
    }
    LL mid = left + ( right - left ) / 2 ;
    LL Lnode = node * 2 ;
    LL Rnode = Lnode + 1 ;
    init( Lnode , left , mid ) ;
    init( Rnode , mid + 1 , right ) ;
    tree[node] = {tree[Lnode].first+tree[Rnode].first , tree[Lnode].second+tree[Rnode].second} ;
}

void update( LL node , LL left , LL right , LL i ){
    if( left > i || right < i ) return ;
    if( left == right && left == i ){
        tree[node] = {0,0} ;
        return ;
    }
    LL mid = left + ( right - left ) / 2 ;
    LL Lnode = node * 2 ;
    LL Rnode = Lnode + 1 ;
    update( Lnode , left , mid , i ) ;
    update( Rnode , mid + 1 , right , i ) ;
    tree[node] = {tree[Lnode].first+tree[Rnode].first , tree[Lnode].second+tree[Rnode].second} ;
}

pair<LL,LL> query( LL node , LL left , LL right , LL i , LL j ){
    if( left > j || right < i ) return {0,0} ;
    if( left >= i && right <= j ) return tree[node] ;
    LL mid = left + ( right - left ) / 2 ;
    LL Lnode = node * 2 ;
    LL Rnode = Lnode + 1 ;
    pair< LL , LL > ret1 = query( Lnode , left , mid , i , j ) ;
    pair< LL , LL > ret2 = query( Rnode , mid + 1 , right , i , j ) ;
    return {ret1.first+ret2.first,ret1.second+ret2.second} ;
}

*/

LL Fun( LL pos , LL hour ){
    if( pos == n + 1 ) return 0 ;
    if( visit[pos][hour] ) return dp[pos][hour] ;
    LL ret1 = 0 , ret2 = 0 ;
    LL time1 = ( hour + a[pos] ) % h ;
    LL time2 = ( hour + a[pos] - 1 ) % h ;
    ret1 = ( ( time1 >= l && time1 <= r ) ? 1 : 0 ) + Fun( pos + 1 , time1 ) ;
    ret2 = ( ( time2 >= l && time2 <= r ) ? 1 : 0 ) + Fun( pos + 1 , time2 ) ;
    visit[pos][hour] = 1 ;
    return dp[pos][hour] = max( ret1 , ret2 ) ;
}

void ResetAll(){
}

void Input(){
    scanf("%lld%lld%lld%lld",&n,&h,&l,&r) ;
    for( int i = 1 ; i <= n ; i ++ ) scanf("%lld",&a[i]) ;
}

void Calculation(){
    printf("%lld\n",Fun( 1 , 0 )) ;
}

void Solve(){
    Input() ;
    ResetAll() ;
    Calculation() ;
}

int main()
{
    int q ;
    q = 1 ;
    //scanf("%d",&q) ;
    while( q-- ){
        Solve() ;
    }
    return 0 ;
}
