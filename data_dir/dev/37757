#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <valarray>
#include <vector>

#define EPS 1e-9
#define INF 1070000000LL
#define MOD 1000000007LL
#define fir first
#define foreach(it,X) for(__typeof((X).begin()) it=(X).begin();it!=(X).end();it++)
#define ite iterator
#define mp make_pair
#define rep(i,n) rep2(i,0,n)
#define rep2(i,m,n) for(int i=m;i<(n);i++)
#define pb push_back
#define sec second
#define sz(x) ((int)x.size())

using namespace std;

struct timer{
	time_t start;
	timer(){start=clock();}
	~timer(){cerr<<1.*(clock()-start)/CLOCKS_PER_SEC<<" secs"<<endl;}
};

typedef istringstream iss;
typedef long long ll;
typedef pair<int,int> pi;
typedef stringstream sst;
typedef vector<int> vi;

int n,s[100010],K;
vector<pi> event[100010];

struct segtree{
	int l,r;
	segtree *cl,*cr;
	int val,neg;
	
	segtree(int l,int r): l(l),r(r){
		neg=0;
		if(l+1==r){
			val=0;
			return;
		}
		cl=new segtree(l,l+r>>1);
		cr=new segtree(l+r>>1,r);
		val = cl->val + cr->val;
	}
	
	void flip(int L,int R){
		if(L<=l && r<=R){
			val=r-l-val;
			neg^=1;
			return;
		}
		
		if(neg)down();
		
		if(L < l+r>>1)cl->flip(L,R);
		if(R > l+r>>1)cr->flip(L,R);
		val = cl->val + cr->val;
	}
	
	ll query(int L,int R){
		if(L<=l && r<=R){
			return val;
		}
		
		if(neg)down();
		
		ll res=0;
		if(L < l+r>>1)res += cl->query(L,R);
		if(R > l+r>>1)res += cr->query(L,R);
		return res;
	}
	
	inline void down(){
		cl->val = cl->r - cl->l - cl->val;
		cl->neg ^= 1;
		cr->val = cr->r - cr->l - cr->val;
		cr->neg ^= 1;
		neg=0;
	}
	
} *root;

int main(){
	cin.tie(0);
	ios_base::sync_with_stdio(0);
	
	cin>>n>>K;
	rep(i,n)cin>>s[i];
	sort(s,s+n);
	int a,b,A,B;
	rep(i,K){
		cin>>a>>b;
		A = lower_bound(s,s+n,a) - s;
		B = upper_bound(s,s+n,b) - s;
		if(A>=B)continue;
		event[A].pb(mp(A,B));
		event[B].pb(mp(A,B));
	}
	
	ll ans=(ll)n*(n-1)*(n-2)/6;
	root=new segtree(0,n);
	rep(i,n){
		if(i>0){
			root->flip(i-1,i);
		}
		rep(j,sz(event[i])){
			root->flip(event[i][j].fir,event[i][j].sec);
		}
		ll win=root->query(0,n) - root->query(i,i+1);
		ans-=win*(win-1)/2;
	}
	cout<<ans;
}
