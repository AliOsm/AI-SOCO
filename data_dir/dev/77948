#pragma GCC optimize("O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
 
#include <iostream>
#include <cstdio>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <queue>
#include <ctime>
#include <unordered_map>
#include <unordered_set>
 
using namespace std;
 
#define REP(i, n) for(int (i) = 0; (i) < (n); (i)++)
#define SZ(a) (int)(a).size()
#define ALL(a) (a).begin(), (a).end()

const int MOD = (int)1e9 + 7;

int fast_pow(int x, long long p) {
    if (p == 0) {
        return 1;
    }
    if (p % 2 == 0) {
        int res = fast_pow(x, p / 2);
        return 1LL * res * res % MOD;
    }
    return 1LL * x * fast_pow(x, p - 1) % MOD;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int x;
    long long lim;
    cin >> x >> lim;
    vector<int> divisors;
    for (int i = 2; i * i <= x; i++) {
        if (x % i == 0) {
            divisors.push_back(i);
            while (x % i == 0) {
                x /= i;
            }
        }
    }
    if (x > 1) {
        divisors.push_back(x);
    }
    long long res = 1;
    for (int divisor : divisors) {
        long long total = 0;
        long long cur_pow = lim;
        while (cur_pow > 0) {
            cur_pow /= divisor;
            total += cur_pow;
        }
        res *= fast_pow(divisor, total);
        res %= MOD;
    }
    cout << res << endl;
    return 0;
}