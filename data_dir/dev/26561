#include <iostream>
#include <vector>
#include <string.h>
#include <deque>
#include <queue>
#include <algorithm>
#include <set>
#include <map>
#include <sstream>
#include <stack>
#include <iomanip>
#include <fstream>
#include <assert.h>
#include <cmath>
#include <climits>
#include <functional>
#include <complex>
#include <cmath>
#define fi first
#define se second
#define th second
#define FI first
#define SE second.first
#define TH second.second

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ii> iii;
typedef long double ld;
typedef complex<double> cd;

const int maxN = 2e5 + 9, lg = 19, MOD = 998244353 , maxV = 1e6 + 9, lim = 900, INF = 1e9;

int n, q, maxQ[1 << 5][maxN << 1], minQ[1 << 5][maxN << 1], k, crnt[5];

void update(int w, int *T, int vl, function<int (int, int)> fnc){
    w += n;
    T[w] = vl;
    while(w > 1){
        w >>= 1;
        T[w] = fnc(T[w << 1], T[w << 1 | 1]);
    }
}

int query(int l, int r, int *T, function<int (int, int)> fnc, int def){
    for(l += n, r += n; l < r; l >>= 1, r >>= 1){
        if(l & 1) def = fnc(def, T[l++]);
        if(r & 1) def = fnc(def, T[--r]);
    }
    return def;
}

auto maxF = [](int a, int b){return max(a, b);};
auto minF = [](int a, int b){return min(a, b);};

void setup(int i){
    for(int j = 0; j < (1 << k); j++){
        int sm = 0;
        for(int u = 0; u < k; u++){
            if(1 << u & j)
                sm -= crnt[u];
            else
                sm += crnt[u];
        }
        update(i, maxQ[j], sm, maxF);
        update(i, minQ[j], sm, minF);
    }
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    cin >> n >> k;
    
    for(int i = 0; i < n; i++){
        for(int j = 0; j < k; j++)
            cin >> crnt[j];
        setup(i);
    }
    
    cin >> q;
    
    while(q--){
        int ty;
        cin >> ty;
        if(ty == 1){
            int w;
            cin >> w;
            w--;
            for(int i = 0; i < k; i++) cin >> crnt[i];
            setup(w);
        }
        else{
            int l, r;
            cin >> l >> r;
            l--;
            
            int ans = 0;
            for(int i = 0; i < (1 << k); i++)
                ans = max(ans, query(l, r, maxQ[i], maxF, -INF) - query(l, r, minQ[i], minF, INF));
            
            cout << ans << '\n';
            
        }
    }
    
}

/*
 y = ax + b
 y = cx + d
 
 ax + b = cx + d
 ax - cx = d - b
 x(a - c) = d - b
 x = (d - b) / (a - c)
 
 4
1 6 2
2 4 3
5 3 8
6 2 4
 

 3
1 9 0
2 6 0
3 3 2
 
 
        1
 
    2       3
 
 */

