#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int N = 1e5 + 1, oo = 1e9;
int dp[N][3][2], n;
char s[N];
string sol;

int calc(int at, int mod, bool isFirst) {
	if (at == n)
		return (mod != 0 || isFirst) * oo;
	int &res = dp[at][mod][isFirst];
	if (res != -1)
		return res;
	res = oo;
	res = min(res, calc(at + 1, mod, isFirst) + 1);
	if (!isFirst || s[at] != '0')
		res = min(res, calc(at + 1, (mod + s[at] - '0') % 3, false));
	return res;
}

void path(int at, int mod, bool isFirst) {
	if (at == n)
		return;
	int res = calc(at, mod, isFirst);
	if ((!isFirst || s[at] != '0') && calc(at + 1, (mod + s[at] - '0') % 3, false) == res) {
		sol += s[at];
		path(at + 1, (mod + s[at] - '0') % 3, false);
	} else
		path(at + 1, mod, isFirst);
}

int main(int argc, char **argv) {
	scanf("%s", s);
	n = strlen(s);
	memset(dp, -1, sizeof dp);
	int res = calc(0, 0, true);
	if (res == oo) {
		bool hasZero = false;
		for (int i = 0; i < n && !hasZero; ++i)
			hasZero |= s[i] == '0';
		if (hasZero)
			puts("0");
		else
			puts("-1");
	} else {
		path(0, 0, true);
		puts(sol.c_str());
	}
	return 0;
}
