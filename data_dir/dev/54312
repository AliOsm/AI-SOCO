#include <bits/stdc++.h>
using namespace std;

// why am I so weak

int c;
int n;
int to[200055];
int id[200055];
int have[200055];

int main() {
	scanf("%d", &c);
	scanf("%d", &n);

	vector<int> vec;

	for (int i = 0; i < n; i++) {
		int x;
		scanf("%d", &x);

		have[x]++;
		if (have[x] == 1) vec.push_back(x);
	}

	sort(vec.begin(), vec.end());

	memset(id, -1, sizeof(id));
	memset(to, -1, sizeof(to));

	for (int i = 0; i < (int)vec.size(); i++) id[vec[i]] = i;

	int pt = 0;

	for (int i = 1; i <= c; i++) {
		while (pt + 1 < (int)vec.size() && vec[pt + 1] <= i) pt++;

		if (vec[pt] <= i) {
			to[i] = vec[pt];
		}
	}

	for (int x = 1; x < c; x++) {
		int cur = c;
		int choose = to[c];
		int pt = id[choose];

		bool taken = have[x] > 0;

		if (x > choose) {
			cur -= x;
			choose = to[cur];
			pt = id[choose];
			taken = true;
		}

		have[x]++;

		while (cur > 0 && ~choose) {
			cur -= choose * min(have[choose], cur / choose);

			pt--;

			if (cur >= x && x > min(to[cur], vec[pt]) && !taken) {
				taken = true;
				choose = x;
				pt++;
				continue;
			}

			if (pt < 0 || to[cur] < 0) break;

			if (to[cur] <= vec[pt]) {
				choose = to[cur];
				pt = id[choose];
			} else {
				choose = vec[pt];
			}
		}

		if (cur != 0) {
			printf("%d\n", x);
			return 0;
		}

		have[x]--;
	}

	puts("Greed is good");

	return 0;
}
