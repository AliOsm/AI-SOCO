#pragma comment(linker, "/STACK:64000000")
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int n;
vector<int> g[200200];
int k = 0;
int col[200200];

void solve(int v, int par, int par_color) {
    int c = col[v];
    forit (it, g[v]) {
        int to = *it;
        if (to == par) continue;
        c = (c + 1) % k;
        while (c == par_color || c == col[v]) c = (c + 1) % k;
        col[to] = c;
    }
    forit (it, g[v]) {
        int to = *it;
        if (to == par) continue;
        solve(to, v, col[v]);
    }
}

int main(){

    scanf("%d", &n);
    for (int i = 1; i < n; i++) {
        int x, y;
        scanf("%d%d", &x, &y);
        x--; y--;
        g[x].pb(y);
        g[y].pb(x);
    }

    for (int i = 0; i < n; i++) k = max(k, 1 + sz(g[i]));

    int c = -1;
    for (int i = 0; i < n; i++) {
        if (1 + g[i].size() == k) c = i;
    }

    solve(c, -1, -1);

    printf("%d\n", k);
    for (int i = 0; i < n; i++) {
        if (i) printf(" ");
        printf("%d", col[i] + 1);
    }
    printf("\n");

    return 0;
}
