#include <iostream>
#include <algorithm>
#include <math.h>
#include <map>
#include <vector>
#include <iomanip>
#include <set>
#include <deque>
#define ss second
#define ff first
#define use_fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define ret(n) return cout << n, 0
#define se(n) cout << setprecision(n) << fixed
#define ll long long
#define pb push_back
using namespace std;

const int N = 1000, PI = 3.14159265359    , M = 1e9 + 7;
typedef pair <ll, ll> pii;
ll a[N][N], r[N], c[N];
set <ll> c1, r1;

int main() {
	ll n, m;
	cin >> n;
	ll a1 = 0, a2 = 0;
	for(int i = 0; i < n; i++) {
		for(int j = 0; j < n; j++) {
			cin >> a[i][j];
			if(a[i][j] == 0) {
				a1 = i;
				a2 = j;
			}
		}
	}
	if(n == 1) {
		ret(1);
	}
	for(int i = 0; i < n; i++) {
		for(int j = 0; j < n; j++) {
			r[i] += a[i][j];
		}
		r1.insert(r[i]);
	}
	for(int i = 0; i < n; i++) {
		for(int j = 0; j < n; j++) {
			c[i] += a[j][i];
		}
		c1.insert(c[i]);
	}
	if(r1.size() != 2 || c1.size() != 2) {
		ret(-1);
	}
	ll t = r[((a1 - 1)  + n) % n];
	ll p1 = 0, p2 = 0, k1 = 0, k2 = 0;
	while(p1 < n) {
		k1 += a[p1][p1];
		p1++;
	}
	p1 = 0, p2 = n - 1;
	while(p1 < n && p2 >= 0) {
		k2 += a[p1][p2];
		p1++, p2--;
	}
	if(t == *r1.begin()) {
		ret(-1);
	}
	else {
		if(t != *c1.rbegin()) {
			ret(-1);
		}
		else if(*r1.begin() != *c1.begin()) {
			ret(-1);
		}
		ll t1 = *r1.begin();
		if(a1 == a2 && a1 + a2 == n - 1) {
			if(k2 != k1 || k2 != t1) {
				ret(-1);
			}
			else {
				ret(t - t1);
			}
		}		
		else if(a1 == a2) {
			if(k2 != t || k1 != t1) {
				ret(-1);
			}
			else {
				ret(t - t1);
			}
		}
		else if(a1 + a2 == n - 1) {
			if(k1 != t || k2 != t1) {
				ret(-1);
			}
			else {
				ret(t - t1);
			}			
		}
		else if(k2 != t || k1 != t) {
			ret(-1);
		}
		ret(t - t1);
	}
}
