
// Problem : E2. Three Blocks Palindrome (hard version)
// Contest : Codeforces - Codeforces Round #634 (Div. 3)
// URL : https://codeforces.com/contest/1335/problem/E2
// Memory Limit : 256 MB
// Time Limit : 2000 ms
// Powered by CP Editor (https://github.com/cpeditor/cpeditor)

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
ordered_set;	

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<pii, int> para;
const ll inf = 1e18 + 7;
const ll maxN = 1e6 + 5;
const ll MOD = 1e9 + 7;

int arr[maxN];

int getSum(int ind, int i, int j, vector<vi>& frq) {
	if (i > j) return 0;
	return frq[j][ind] - frq[i - 1][ind];
}

int getMax(int i, int j, vector<vi>& frq, int mx, int chosen) {
	int ile = 0;
	RI(k, mx) {
		if (k == chosen) continue;
		ile = max(ile, getSum(k, i, j, frq));
	}
	return ile;
}

void solve() {
	int n;
	cin >> n;
	int mx = 0;
	REP(i, n) {
		cin >> arr[i];
		maxi(mx, arr[i]);
	}
	vector<vi> frq(n, vi(mx + 1, 0));
	vector<vi> pos(mx + 1);
	REP(i, n) {
		frq[i][arr[i]]++;
		pos[arr[i]].pb(i);
		if (i > 0) {
			RI(j, mx) {
				frq[i][j] += frq[i - 1][j];
			}
		}
	}
	int ans = 0;
	RI(k, mx) {
		ans = max(ans, sz(pos[k]));
		vi tmp(sz(pos[k]) + 1, 0);
		FORD(i, sz(pos[k]) - 1, 0) {
			tmp[sz(pos[k]) - i] = pos[k][i];
		}
		
		REP(i, sz(pos[k])) {
			int taken = i + 1;
			int x = pos[k][i];
			//cout << k << " " << x << " " << tmp[taken] << endl;
			if (tmp[taken] <= x) break;
			ans = max(ans, taken * 2 + getMax(x + 1, tmp[taken] - 1, frq, mx, k));
		}
	}
	cout << ans << "\n";
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
	int t;
	cin >> t;
	REP(_, t) solve();
	return 0;
}
 
