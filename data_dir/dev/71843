#include<bits/stdc++.h>
#define inf 1000000000
#define ii pair<int,int>
#define st first
#define nd second
#define mp make_pair
#define N 10005
using namespace std;

int n,m,k,nx,ny,xx,xy,x[N],y[N],vis[N],way[4][2]={1,0,0,1,-1,0,0,-1};
vector<int> r[N],c[N];
map<int,int> eti[N];
priority_queue<ii> q;
bool flag;

void dfs(int label) {

  if(flag) return ;
  if(x[label]==n && y[label]==m) {
    flag=true;
    return ;
  }
  if(vis[label]) return ;
  vis[label]=1;
  nx=min(nx,x[label]);
  ny=min(ny,y[label]);
  xx=max(xx,x[label]);
  xy=max(xy,y[label]);
  for(int i=0;i<4;i++) {
    int lab=eti[x[label]+way[i][0]][y[label]+way[i][1]];
    if(lab!=k+1 && lab) {
      dfs(lab);
    }
  }

}

int main() {

  scanf("%d %d %d",&n,&m,&k);
  for(int i=1;i<=k;i++) {
    scanf("%d %d",&x[i],&y[i]);
    r[x[i]].push_back(y[i]);
    c[y[i]].push_back(x[i]);
    eti[x[i]][y[i]]=i;
  }
  if(!eti[n][m]) {
    r[n].push_back(m);
    c[m].push_back(n);
    eti[n][m]=k+1;
    x[k+1]=n;
    y[k+1]=m;
  }
  q.push(mp(0,1));
  while(!q.empty()) {
    nx=inf,ny=inf,xx=-inf,xy=-inf;
    flag=false;
    ii t=q.top();
    q.pop();
    int cost=t.st;
    int lab=t.nd;
    if(x[lab]==n && y[lab]==m) {
      printf("%d",-cost);
      return 0;
    }
    if(vis[lab]) continue ;
    dfs(lab);
    if(flag) {
      printf("%d",-cost);
      return 0;
    }
    for(int i=nx-2;i<=xx+2;i++) {
      if(i>=0) {
        for(int j=0;j<r[i].size();j++) {
          if(eti[i][r[i][j]]!=k+1 || ((i>=nx-1 && i<=xx+1))) {
            q.push(mp(cost-1,eti[i][r[i][j]]));
          }
        }
      }
    }
    for(int i=ny-2;i<=xy+2;i++) {
      if(i>=0) {
        for(int j=0;j<c[i].size();j++) {
          if(eti[c[i][j]][i]!=k+1 || (i>=ny-1 && i<=xy+1)) {
            q.push(mp(cost-1,eti[c[i][j]][i]));
          }
        }
      }
    }
  }
  printf("-1");

}
