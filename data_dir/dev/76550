#include<bits/stdc++.h>

using namespace std;

typedef long long ll;

vector<int> prime;

void sieve()
{
    bool arr[1002]= {0};
    for(int i=2; i*i<=1000; i++)
        if(!arr[i])
            for(int j=i*i; j<=1000; j+=i)
                arr[j]=1;
    for(int i=2; i<=1000; i++)
        if(!arr[i])
            prime.push_back(i);
}

vector<int> tree[1001];
bool vis[1001],vis2[1001];
int dfs(int root)
{
    if(vis[root])
        return 0;
    vis[root]=1;
    int k=1;
    for(int i=0; i<tree[root].size(); i++)
        k+=dfs(tree[root][i]);
    return k;
}
string ans;
void dfsset(int root,char c)
{
    if(vis2[root])
        return;
    vis2[root]=1;
    ans[root-1]=c;
    for(int i=0; i<tree[root].size(); i++)
        dfsset(tree[root][i],c);
}

int main()
{
    string s;
    cin>>s;
    ans=s;
    map<char,int> mp;
    for(int i=0; i<s.size(); i++)
        mp[s[i]]++;
    set<pair<int,char> > se;
    for(char i='a'; i<='z'; i++)
        se.insert({mp[i],i});
    sieve();
    for(int i=0; i<prime.size(); i++)
    {
        if(prime[i]>s.size()-1)
            break;
        for(int j=1; j<=s.size()/\
                prime[i]; j++)
        {
            tree[prime[i]].push_back(j*prime[i]);
            tree[j*prime[i]].push_back(prime[i]);
        }
    }
    set<pair<int,char> >::iterator it;
    pair<int,char> tmp;
    for(int i=0; i<s.size(); i++)
    {
        if(vis[i+1])
            continue;
        int x=dfs(i+1);
        it=se.lower_bound({x,'a'});
        if(it==se.end())
        {
            cout<<"NO"<<endl;
            return 0;
        }
        tmp=*it;
        dfsset(i+1,tmp.second);
        se.erase(it);
        tmp.first-=x;
        se.insert(tmp);
    }
    cout<<"YES"<<endl<<ans<<endl;
    return 0;
}
