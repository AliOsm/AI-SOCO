#pragma GCC omptimize("unroll-loops")
#pragma optimize("SEX_ON_THE_BEACH")
#include<bits/stdc++.h>

using namespace std;

//#define need_tree

#ifdef need_tree
    #include<ext/pb_ds/assoc_container.hpp>
    using namespace __gnu_pbds;
    template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#endif // need_tree

using ll = long long int;
using ull = unsigned long long int;
using dd = double;
using ldd = long double;
using si = short int;
using pii = pair<int, int>;
using pll = pair<ll, ll>;

ll get_seed(string s)
{
    ll ans = 0;
    for (int i = 0; i < s.size(); ++i)
        ans += s[i];
    return ans;
}

#define all(x) (x).begin(), (x).end()
#define ff first
#define ss second

// debug defines
#ifdef HOME
    int jjj;
    #define PO cout << "Pomelo" << endl;
    #define OL cout << "Oliva" << endl;
    #define debug(x) cout << #x << " " << x << endl;
    #define debug_p(x) cout << #x << " " << x.ff << " " << x.ss << endl;
    #define debug_v(x) cout << #x << " "; for (auto iii : x) cout << iii << " "; cout << endl;
    #define debug_vp(x) cout << #x << " "; for (auto ii : x) cout << '[' << ii.ff << " " << ii.ss << ']'; cout << endl;
    #define wait() cin >> jjj;
#else
    #define PO 0;
    #define OL 0;
    #define debug(x) 0;
    #define debug_p(x) 0;
    #define debug_vp(x) 0;
    #define debug_v(x) 0;
    #define debug_vp(x) 0;
    #define wait() 0;
#endif // HOME
// end of debug defines

int main()
{
    ios_base::sync_with_stdio(0);
    cout.tie(0);
    cin.tie(0);

    int n, k, m;
    cin >> n >> m >> k;
    vector<int> arr(n);
    for (int i =0 ; i < n; ++i)
        cin >> arr[i];
    sort(all(arr));
    vector<int> can(k);
    for (int i = 0; i < k; ++i)
        can[i] = arr[i];
    vector<int> dp(k + 1);
    for (int i = 1; i <= k; ++i)
        dp[i] = can[i - 1] + dp[i - 1];
    vector<int> pref = dp;
    vector<int> can_buy(k + 1, -1);
    for (int i = 0; i < m; ++i)
    {
        int x, y;
        cin >> x >> y;
        if (x > k)
            continue;
        can_buy[x] = max(can_buy[x], y);
    }
    for (int i = 1; i <= k; ++i)
    {
        for (int j = 1; j <= i; ++j)
        {
            if (can_buy[j] == -1)
                continue;
            dp[i] = min(dp[i], dp[i - j] + pref[i] - pref[i - j + can_buy[j]]);
        }
    }

    cout << dp.back();
    return 0;
}

