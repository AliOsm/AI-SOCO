#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

bool uniq(string &s) {
	bool used[26] = { false };
	for (char c : s) {
		int a = c - 'a';
		if (used[a])
			return false;
		used[a] = true;
	}
	return true;
}

int main() {
	int n;
	cin >> n;
	vector<string> ss;
	for (int i = 0; i < n; i++) {
		string s;
		cin >> s;
		if (!uniq(s)) {
			cout << "NO" << endl;
			return 0;
		}
		ss.push_back(s);
	}
	sort(ss.begin(), ss.end(), [] (auto &s, auto &t) {
			return s.length() > t.length(); });
	vector<string> tt;
	for (int i = 0; i < n; i++) {
		string &s = ss[i];
		int sl = s.length();
		bool contained = false;
		for (string &t : tt)
			if (t.find(s) != string::npos) {
				contained = true;
				break;
			}
		if (contained)
			continue;
		for (auto it = tt.begin(); it != tt.end(); ++it) {
			string &t = *it;
			for (int l = 1; l < sl; l++) {
				string p = s.substr(0, l);
				string q = s.substr(l);
				string pt = p + t;
				if ((int) t.find(q) == 0 && uniq(pt)) {
					tt.erase(it);
					s = pt;
					goto suffix;
				}
			}
		}
suffix:
		for (auto it = tt.begin(); it != tt.end(); ++it) {
			string &t = *it;
			int tl = t.length();
			for (int l = 1; l < sl; l++) {
				string p = s.substr(0, l);
				string q = s.substr(l);
				string tq = t + q;
				if ((int) t.find(p) == tl - l && uniq(tq)) {
					tt.erase(it);
					s = tq;
					goto prefix;
				}
			}
		}
prefix:
		for (string &t : tt) {
			string st = s + t;
			if (!uniq(st)) {
				cout << "NO" << endl;
				return 0;
			}
		}
		tt.push_back(s);
	}
	sort(tt.begin(), tt.end());
	for (string &t : tt)
		cout << t;
	cout << endl;
	return 0;
}
