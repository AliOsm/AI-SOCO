#include <bits/stdc++.h>
using namespace std;
const int MAXN = 3e5 + 7;
const int MAXK = 1e6 + 7;
int n, k;
long long prefix_sum[MAXN];
int a[MAXN], mx[MAXN];
vector <int> pos[MAXK], tpos[MAXK];
inline int get(vector <int>& v, int l, int r)
{
	int up = upper_bound(v.begin(), v.end(), r) - v.begin();
	int down = upper_bound(v.begin(), v.end(), l) - v.begin();
	return up - down;
}
long long dq(int l, int r)
{
	if (r - l == 1)
		return 0;
	int mid = (l + r) >> 1;
	long long ans = dq(l, mid) + dq(mid, r);
	mx[mid - 1] = a[mid - 1];
	for (int i = mid - 2; i >= l; --i)
		mx[i] = max(mx[i + 1], a[i]);
	mx[mid] = a[mid];
	for (int i = mid + 1; i < r; ++i)
		mx[i] = max(mx[i - 1], a[i]);
	for (int i = mid + 1; i <= r; ++i)
		tpos[(prefix_sum[i] - mx[i - 1]) % k].push_back(i);
	for (int i = mid - 1; i >= l; --i)
	{
		int idx = upper_bound(mx + mid, mx + r, mx[i]) - mx;
		ans += get(pos[(prefix_sum[i] + mx[i]) % k], mid, idx);
		ans += get(tpos[prefix_sum[i] % k], idx, r);
	}
	for (int i = mid + 1; i <= r; ++i)
		tpos[(prefix_sum[i] - mx[i - 1]) % k].pop_back();
	return ans;
}
int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> k;
	for (int i = 0; i < n; ++i)
		cin >> a[i];
	for (int i = 1; i <= n; ++i)
	{
		prefix_sum[i] = prefix_sum[i - 1] + a[i - 1];
		pos[prefix_sum[i] % k].push_back(i);
	}
	cout << dq(0, n) << '\n';
	return 0;
}

