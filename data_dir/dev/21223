#include <bits/stdc++.h>

using namespace std;

#define ll long long

const int N = 2e5+15;

struct node{

    ll L,R,maxi;

    node(){

    }
    node(ll L,ll R,ll maxi):L(L),R(R),maxi(maxi){

    }
    
};

node merge(node a,node b){
    node ret;
    ret.R =max(a.R, b.R);
    ret.L = max(a.L,b.L);
    ret.maxi = max( max(a.maxi,b.maxi), a.L+ b.R);
    return ret;
}
node tree[N*4];
ll sum[N];

int d[N],h[N];

void init(int pos,int l,int r){

    if(l==r){
        tree[pos].L = 2*h[l] -sum[l-1];
        tree[pos].R = 2*h[r] +sum[r-1];
        tree[pos].maxi = 0;
        return;
    }

    int mid = (l+r)/2;
    init(pos*2,l,mid);
    init(pos*2+1,mid+1,r);
    tree[pos]= merge(tree[pos*2],tree[pos*2+1]);
}

void get(int pos,int l,int r,int ql,int qr,vector<node> &v){

    if(r<ql || qr<l)return;

    if(ql<=l&& r<=qr){
        v.push_back(tree[pos]);
        return;
    }
    int mid = (l+r)/2;

    get(pos*2,l,mid,ql,qr,v);
    get(pos*2+1,mid+1,r,ql,qr,v);
}

int main(){

    //freopen("input.txt","r",stdin);

    int n,m;
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;++i){
        scanf("%d",&d[i]);
        d[i+n]= d[i];
    }
    for(int i=1;i<=n;++i){
        scanf("%d",&h[i]);
        h[i+n]= h[i];
    }
    for(int i=1;i<=n*2;++i){
        sum[i]= sum[i-1] + d[i];
    }

    vector<node> v;
    int l,r,ql,qr;

    init(1,1,2*n);


    while(m--){
        scanf("%d%d",&l,&r);
        if(l<=r){
            ql = r+1;
            qr = n+l-1;
        }
        else{
            ql = r+1,qr = l-1;
        }
        v.clear();
        get(1,1,2*n,ql,qr,v);

        node temp = v[0];
        for(int i=1;i<v.size();++i)
            temp = merge(temp,v[i]);
        printf("%lld\n", temp.maxi);
    }
    return 0;
}