#include<bits/stdc++.h>
#include<ext/numeric>
using namespace std;
using namespace __gnu_cxx;

const int MAX = 1e5 + 5;
int arr[MAX], place[MAX];
bitset<MAX> bs;
vector<int> prime;
typedef long long ll;

void sieve() {
	bs.set();
	bs[0] = 0;
//	prime.push_back(1);
	prime.push_back(2);
	for (ll i = 4; i < MAX; i += 2)
		bs[i] = 0;
	for (ll i = 3; i < MAX; i += 2)
		if (bs[i]) {
			prime.push_back(i);
			for (ll j = i * i; j < MAX; j += i)
				bs[j] = 0;
		}
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "rt", stdin);
#endif
	sieve();
	int n;
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i) {
		scanf("%d", &arr[i]);
		place[arr[i]] = i;
	}
	vector<pair<int, int> > ans;
	for (int i = 1; i <= n; ++i)
		while (place[i] != i) {
			int idx = lower_bound(prime.begin(), prime.end(), place[i] - i + 1)
					- prime.begin();
			if (idx > (int) prime.size() || prime[idx] > place[i] - i + 1)
				--idx;
			int b = arr[place[i] - prime[idx] + 1];
			int op = place[i];
			int mn = min(place[i], place[i] - prime[idx] + 1);
			int mx = max(place[i], place[i] - prime[idx] + 1);
			ans.push_back(pair<int, int>(mn, mx));
			place[b] = place[i];
			place[i] = place[i] - prime[idx] + 1;
			swap(arr[op], arr[op - prime[idx] + 1]);
		}
	printf("%d\n", (int) ans.size());
	for (int i = 0; i < (int) ans.size(); ++i)
		printf("%d %d\n", ans[i].first, ans[i].second);
}
