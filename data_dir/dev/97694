#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define F first
#define S second
#define ll long long
#define ull  unsigned long long
#define pb push_back

using namespace std;
using namespace __gnu_pbds;
typedef  tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int N = 210000;
int a[N];
const int blocksize = 500;
pair < int, int > ans[N];
main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    int n, m;
    cin >> n >> m;
    for (int i = 1; i <= n; i++) cin >> a[i];
    for (int i = 1; i <= n; i++){
        int x = i / blocksize;
        int p = i;
        int y = 0;
        while((p + a[p]) / blocksize == x && p + a[p] <= n){
            p += a[p];
            y++;
        }
        ans[i].F = p;
        ans[i].S = y + 1;
    }
    for (int i = 1; i <= m; i++){
        int type;
        cin >> type;
        if (type == 1){
            int x;
            cin >> x;
            int y = 0;
            int p;
            while(x <= n){
                y += ans[x].S;
                x = ans[x].F;
                p = x;
                x += a[x];
            }
            cout << p << " " << y << endl;
        } else{
            int x, y;
            cin >> x >> y;
            int t = 0;
            int p = x;
            a[x] = y;
            while((p + a[p]) / blocksize == x / blocksize && p + a[p] <= n){
                p += a[p];
                t++;
            }
            ans[x].F = p;
            ans[x].S = t + 1;
            int l = x / blocksize * blocksize;
            if (l == 0) l = 1;
            for (int j = x - 1; j >= l; j--)
                if ((j + a[j]) / blocksize == x / blocksize && j + a[j] <= n){
                    ans[j].F = ans[j + a[j]].F;
                    ans[j].S = ans[j + a[j]].S + 1;
                }
        }
    }
}
