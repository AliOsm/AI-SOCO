#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define sz size
#define ll long long
#define ld long double
#define fs first
#define sc second
#define forn(i, f, t) for(int i = f; i < t; i++)
#define all(x) (x).begin(), (x).end()
#define ins insert

const int INF = 2147483647;
const int MOD = 1000000007;
const ll INF64 = 9223372036854775807;
const ld EPS = 1e-7;

using namespace std;

vector<vector<int> > d, g;
int ans1 = INF, ans2 = INF, n;
vector<char> used1, used2;

void bfs1(int v){
    int l = 0;
    queue<pair<int, int> > q;
    q.push(mp(v, 0));
    used1[v] = 1;
    while (!q.empty()){
        auto v = q.front();
        if (v.fs == n - 1){
            ans1 = v.sc;
            return;
        }
        q.pop();
        forn(u, 0, d[v.fs].sz())
            if (!used1[d[v.fs][u]]){
                q.push(mp(d[v.fs][u], v.sc + 1));
                used1[d[v.fs][u]] = 1;
            }
    }
}


void bfs2(int v){
    int l = 0;
    queue<pair<int, int> > q;
    q.push(mp(v, 0));
    used2[v] = 1;
    while (!q.empty()){
        auto v = q.front();
        if (v.fs == n - 1){
            ans2 = v.sc;
            return;
        }
        q.pop();
        forn(u, 0, g[v.fs].sz())
            if (!used2[g[v.fs][u]]){
                q.push(mp(g[v.fs][u], v.sc + 1));
                used2[g[v.fs][u]] = 1;
            }
    }
}


int main(){ 
    int m, t, f;
    scanf("%d%d", &n, &m);
    used1.assign(n, 0);
    used2.assign(n, 0);
    d.assign(n, vector<int>());
    g.assign(n, vector<int>());
    forn(i, 0, m){
        scanf("%d%d", &f, &t);
        d[f - 1].pb(t - 1);
        d[t - 1].pb(f - 1);
    }
    forn(i, 0, n) forn(j, 0, n){
        bool key = 1;
        forn(k, 0, d[i].sz()) if (d[i][k] == j) key = 0;
        if (key && i != j) g[i].pb(j);
    }
    bool key = 0;
    forn(i, 0, d[0].sz()) if (d[0][i] == n - 1) key = 1;
    bfs1(0);
    bfs2(0);
    if (ans1 == INF || ans2 == INF){
        printf("-1\n");
        return 0;
    }
    printf("%d", (key ? ans2 : ans1));
    return 0;
}