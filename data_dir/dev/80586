#include<bits/stdc++.h>
using namespace std;

#define fr first
#define sc second
#define memset(X,Y) memset(X,Y,sizeof X)
#define all(X) X.begin(),X.end()
#define SZ size()
#define mp make_pair
#define pb push_back
#define error(args...){vector<string> _v = split(#args,','); err(_v.begin(),args); }
vector <string> split(const string &s,char c){
    vector<string> v;
    stringstream ss(s);
    string x;
    while(getline(ss,x,c))
        v.emplace_back(x);
    return move(v);
}
void err(vector<string>:: iterator it){}
template<typename T,typename ... Args>
void err(vector<string>::iterator it, T a, Args ... args){
    cerr << it->substr((*it)[0] == ' ',it->length())
         << " = " << a <<"\n" ;
    err(++it,args...);
}
typedef long long ll;
typedef pair<int,int> pii;
typedef vector<int> vi;
double pi=acos(-1);

const ll N =(1e5)+10,mod=1e9+7,K=30;
ll OO = 1e18;
ll n,k,val[N],ans[N];
pair<ll,pair<ll,ll>> a[N];
multiset<ll>has;
int main(){
    cin>>n>>k;
    for(int i=0;i<n;i++){
        cin>>val[i];
        a[i].fr=val[i];
    }
    for(int i=0;i<n;i++){
        cin>>a[i].sc.fr;
        a[i].sc.sc=i;
    }
    sort(a,a+n);
    for(int i=0;i<n;i++){
        if(i==0){
            ans[a[i].sc.sc]=a[i].sc.fr;
            has.insert(a[i].sc.fr);
        }
        else{
            if(a[i].fr==a[i-1].fr){
                ans[a[i].sc.sc]=ans[a[i-1].sc.sc]-a[i-1].sc.fr+a[i].sc.fr;
                has.insert(a[i].sc.fr);
            }
            else{
                int t=k;
                ll sum=a[i].sc.fr;
                auto it=has.end();
                it--;
                for(;it!=has.begin()&&t>0;it--){
                    sum+=*it;
                    t--;
                }
                if(t){
                    sum+=*has.begin();
                }
                ans[a[i].sc.sc]=sum;
                has.insert(a[i].sc.fr);
            }
        }
    }
    for(int i=0;i<n;i++){
        cout<<ans[i]<<" ";
    }

}
