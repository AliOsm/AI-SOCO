//  Copyright Â© 2020 Diego Garcia Rodriguez del Campo. All rights reserved.
#include<bits/stdc++.h>
#define MAX 2500005
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
using namespace std;
typedef long long i64;
 
i64 n, g, N, a[MAX], sum, emp, T ;
 
bool vacio( i64 x ) {
    return ! a[2*x] && ! a[2*x+1];
}
 
bool f( i64 x , i64 nv ) {
    i64 ln = 2*x;
    i64 rn = 2*x+1;
    // HOJA
    if( vacio( x ) ) {
        if( nv == g ) 
            return 0;
        a[x] = 0;
        return 1;
    } else {
        if( a[ln] > a[rn] ) {
            int v = a[ln];
            bool flg = f( ln , nv + 1 );
            if( flg )
                a[x] = v;
            return flg;
        } else {
            int v = a[rn];
            bool flg = f( rn , nv + 1 );
            if( flg )
                a[x] = v;
            return flg;
        }
    }
} 

void check( i64 x , i64 nv , vector < i64 > & ans ) {
    if( nv > g or ! a[x] )
        return;
    
    while( 1 ) {
        i64 v = a[x];
        bool flg = f( x , nv );
        if( ! flg ) {
            check( 2*x , nv + 1 , ans );
            check( 2*x+1 , nv + 1 , ans );    
            return;
        }
        ans.push_back( x );
        sum -= v;
    }
}
 
void solve() {
    vector < i64 > ans;
    sum = 0;
    cin >> n >> g;
    N = ( 1 << n ) - 1;
    for( i64 i = 1; i <= N; i ++ ) {
        cin >> a[i];
        sum += a[i];
    }
    
    
    check( 1 , 1 , ans );
    
    cout << sum << "\n";
    for( auto v : ans )
        cout << v << " ";
    cout << "\n";
    
    for( i64 i = 1; i <= N; i ++ )
        a[i] = 0;
        
}
 
int main()
{
    optimiza_io
    cin >> T;
    while( T -- ) 
        solve();
    return 0;
}
 
// CHECAR LIMITES 

/*

1
4 3
3 3 3 3 3 3 3 3 2 2 2 2 1 1 1

*/