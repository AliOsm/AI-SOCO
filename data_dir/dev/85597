#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>

template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

const long long MAX = 5100000;
const long long INF = 1LL << 60;
const long long MOD = 1'000'000'007LL;
const long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;

struct SegmentTree {
private:
	ll n;
	vector<ll> node;
public:
	SegmentTree(vector<ll> v) {
		ll sz = v.size();
		n = 1; while (sz > n) n *= 2;
		node.resize(2 * n - 1, INF);

		for (ll i = 0; i < sz; i++) {
			node[i + n - 1] = v[i];
		}
		for (ll i = n - 2; i >= 0; i--) {
			node[i] = max(node[i * 2 + 1], node[i * 2 + 2]);
		}
	}

	void update(ll x, ll val) {
		x += n - 1;
		node[x] = val;

		while (x > 0) {
			x = (x - 1) / 2;
			node[x] = max(node[x * 2 + 1], node[x * 2 + 2]);
		}
	}

	ll getmax(ll a, ll b, ll k = 0, ll l = 0, ll r = -1) {
		if (r < 0) r = n;
		if (r <= a || b <= l) return -INF;
		if (a <= l && r <= b) return node[k];

		ll vl = getmax(a, b, 2 * k + 1, l, (l + r) / 2);
		ll vr = getmax(a, b, 2 * k + 2, (l + r) / 2, r);
		return max(vl, vr);
	}
};

int main()
{
	ll w, h, n; scanf("%lld %lld %lld", &w, &h, &n);
	SegmentTree seg_h(vector<ll>(h + 1)), seg_w(vector<ll>(w + 1));
	set<pair<ll, ll>> s_h, s_w;
	multiset<ll> m_h, m_w;
	m_h.insert(h);
	m_w.insert(w);
	s_h.emplace(0, h);
	s_w.emplace(0, w);
	for (ll i = 0; i < n; i++) {
		char c; ll x; cin >> c >> x;
		if (c == 'H') {
			auto itr = s_h.lower_bound(make_pair(x, INF));
			itr--;
			ll mx = seg_h.getmax(0, x);
			seg_h.update(x, x);
			ll cut = x - mx;
			s_h.emplace(itr->first, cut);
			s_h.emplace(x, itr->second - cut);
			m_h.erase(m_h.find(itr->second));
			m_h.insert(cut);
			m_h.insert(itr->second - cut);
			s_h.erase(itr);

		}
		else{
			auto itr = s_w.lower_bound(make_pair(x, INF));
			itr--;
			ll mx = seg_w.getmax(0, x);
			seg_w.update(x, x);
			ll cut = x - mx;
			s_w.emplace(itr->first, cut);
			s_w.emplace(x, itr->second - cut);
			m_w.erase(m_w.find(itr->second));
			m_w.insert(cut);
			m_w.insert(itr->second - cut);
			s_w.erase(itr);

		}

		printf("%lld\n", *m_h.rbegin() * *m_w.rbegin());
	}
	return 0;
}