#include <bits/stdc++.h>
using namespace std;
string ans;
int n,m,k,len,ni,nj,row[1005][1005],col[1005][1005];
char dir,a[1005][1005];
vector<pair<char,int> >v;
bool valid(int i , int j){
    return i > 0 && j > 0 && i <= n && j <= m && a[i][j] != '#';
}
bool go(int i, int j, char dir, int len){
    if(dir == 'N'){
        if(!valid(i - len, j) || col[i][j] != col[i - len][j])
            return 0;
        ni = i - len;
        nj = j;
        return 1;
    }
    else if(dir == 'E'){
        if(!valid(i, j + len) || row[i][j] != row[i][j + len])
            return 0;
        ni = i;
        nj = j + len;
        return 1;
    }
    else if(dir == 'W'){
        if(!valid(i, j - len) || row[i][j] != row[i][j - len])
            return 0;
        ni = i;
        nj = j - len;
        return 1;
    }
    else{
        if(!valid(i + len, j) || col[i][j] != col[i + len][j])
            return 0;
        ni = i + len;
        nj = j;
        return 1;
    }
}
bool dfs(int i, int j, int idx){
    if(idx >= k)
        return 1;
    if(go(i,j,v[idx].first,v[idx].second))
        dfs(ni,nj,idx + 1);
    else
        return 0;
}
int main()
{
    ios::sync_with_stdio(0);
    cin >> n >> m;
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= m; j++)
            cin >> a[i][j], row[i][j] = row[i][j - 1] + (a[i][j] == '#'), col[i][j] = col[i - 1][j] + (a[i][j] == '#');
    cin >> k;
    for(int i = 0; i < k; i++){
        cin >> dir >> len;
        v.push_back({dir,len});
    }
    for(int i=1; i <= n; i++){
        for(int j=1; j <= m; j++){
            if(isupper(a[i][j])){
                if(dfs(i,j,0))
                    ans += a[i][j];
            }
        }
    }
    sort(ans.begin(),ans.end());
    if(ans.empty())
        cout<<"no solution"<<endl;
    else
        cout<<ans<<endl;
    return 0;
}
