#include <bits/stdc++.h>
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
using namespace std;
typedef long long ll ; 
typedef long double ld ;
typedef pair<ll , ll> pll ;

const ll N = 2e5 + 30 , Mod = 1e9 + 7 ;
const ll SQ = 330 ;
const ll LOG = 27 ;

ll Par[LOG][N] , H[N] , Sub[N] , n , m ;
vector<ll> G[N] ;
bitset<N> M ;

void DFS (ll v , ll par = 0 , ll h  = 0 ) {
    M[v] = true ;
    H[v] = h ;                                                    
    Sub[v] = 1 ;
    for (auto u : G[v]) {
        if (!M[u] and u != par) {
            Par[0][u] = v ;
            DFS (u , v , h + 1) ;
            Sub[v] += Sub[u] ;
        }
    }
}
void Pre () {
    for (int i = 1 ; i < LOG ; i ++) 
        for (int j = 1 ; j <= n ; j ++)
            Par[i][j] = Par[i - 1][Par[i - 1][j]] ;
}
ll Shift (ll v ,ll h) {
    for (int i = LOG - 1 ; i >= 0 ; i --) {
        if (h >= (1 << i)) {
            h -= 1 << i ;
            v = Par[i][v] ;
        }
    }
    return v ;
}
ll Get_LCA (ll v , ll u) {
    if (!(v - u)) return v ;
    if (H[v] < H[u]) swap(v , u) ;
    v = Shift(v , H[v] - H[u]) ;
    if (v == u) return v ;
    for (int i = LOG - 1 ; i >= 0 ; i --) {
        if (Par[i][v] != Par[i][u]) {
            v = Par[i][v] ;
            u = Par[i][u] ;
        }
    }
    return Par[0][v] ;
}
void Query (ll v , ll u) {
    if (H[v] < H[u]) swap(u , v) ;
    ll x = Get_LCA (v , u) ;
    if (u == v) {
        cout << n << "\n" ;
        return ;
    }
    ll d = -2 * H[x] + H[v] + H[u] ;
    if (d & 1) {
        cout << "0\n" ;
        return ;
    }
    if ((H[v] == H[u])) {
        cout << n - Sub[Shift(v , d / 2 - 1)] - Sub[Shift(u , d / 2 - 1)] << "\n" ;
        return ;
    }
    cout << Sub[Shift(v , d / 2)] - Sub[Shift(v , d / 2 -1)]  << "\n" ;
    return ; 
}
int main () {
    ios::sync_with_stdio(0), cin.tie(0) ;
    cin >> n ;
    for (int i = 0 , v , u ; i < n - 1 ; i ++) {
        cin >> v >> u ;
        G[v].pb(u) ;
        G[u].pb(v) ;
    }
    Par[0][1] = 1 ;
    DFS(1) ;
    Pre () ;
    cin >> m ;
    while (m --) {
        ll v , u ;
        cin >> v >> u ;
        Query (v , u) ;
    }
    return (0) ;
}
