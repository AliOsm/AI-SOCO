#include<bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7;
const int N = 2000 + 5 ;
string a, b;
long long m, d, digits;
long long dp[N][N][2][2];
long long solve(int i, int res, bool e1, bool e2){
    if (i == digits)
        return res == 0 ? 1 : 0;
    if (~dp[i][res][e1][e2])
        return dp[i][res][e1][e2];
    bool nxt1 = 0, nxt2 = 0;
    long long ret = 0;
    for(int j = 0 ; j <= 9 ; j++){
        nxt1 = nxt2 = 0;
        if (((i % 2 == 0 && j != d) || (i% 2&& j == d)) && (e1 || a[i] - '0' <= j) && (e2 || b[i] - '0' >= j )){
            if ((e1 || a[i] - '0' < j))
                nxt1 = 1;
            if ((e2 || b[i] - '0' > j ))
                nxt2 = 1;
            ret += solve(i + 1, (res * 10 + j) % m, nxt1, nxt2);
            ret %= mod;
        }
    }
    return dp[i][res][e1][e2] = ret;
}
int main (){
    memset(dp, -1, sizeof dp);
    cin >> m >> d >> a >> b;
    digits = a.size();
    cout << solve(0, 0, 0, 0) % mod;
    return 0;
}
