#include <vector>
#include <cstring>
#include <cstdio>
#include <queue>
#include <cmath>
#include <string>
#include <iostream>
#include <algorithm>
#include <cassert>
#include <ctype.h>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

typedef long long ll;

#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <cassert>
#include <cstring>
#include <iostream>
#include <bitset>
#include <queue>
#include <string>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

typedef long long ll;
const int MAXN=500000;
const int MAXLOG=20;

struct FenwickTree
{
	int n;
	int* a;
	FenwickTree(int n):n(n)
	{
		a=new int[n];
		REP(i,n) a[i]=0;
	}
	int get(int l, int r)
	{
		return get(r)-get(l-1);
	}
	void inc(int x,int v)
	{
		for(;x<n;x|=x+1)
			a[x]+=v;
	}
	int get(int r)
	{
		int res=0;
		for(;r>=0;r=(r&(r+1))-1)
			res+=a[r];
		return res;
	}
} ;

struct Query
{
	int type;
	int t, x;
	Query(int type=0, int t=0, int x=0):type(type), t(t), x(x){}
};

map<int,FenwickTree*> trees;
map<int, vector<int> > times;

int main()
{
	int n;
	scanf("%d",&n);
	vector<Query> v;
	REP(i,n)
	{
		int a,t,x;
		scanf("%d%d%d",&a,&t,&x);
		v.push_back(Query(a,t,x));
		times[x].push_back(t);
	}
	for(map<int,vector<int> >::iterator it=times.begin();it!=times.end() ;it++)
	{
		sort(it->second.begin(), it->second.end());
		trees[it->first]=new FenwickTree(it->second.size());
	}
	REP(i,n)
	{
		vector<int>& timeVector=times[v[i].x];
		int pos=lower_bound(timeVector.begin(), timeVector.end(), v[i].t)-timeVector.begin();
		if(v[i].type==1)
		{
			trees[v[i].x]->inc(pos,1);
		}
		else if(v[i].type==2)
		{
			trees[v[i].x]->inc(pos,-1);
		}
		else
		{
			printf("%d\n",trees[v[i].x]->get(pos));
		}
	}
	return 0;
}
