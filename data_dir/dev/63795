// Template Headers {{{
#include <bits/stdc++.h>
using namespace std;

using pii = pair<int, int>; using vpii = vector<pii>;
using vi = vector<int>; using vvi = vector<vi>;
using ll = long long;
using pll = pair<ll, ll>; using vpll = vector<pll>;
using vll = vector<long long>; using vvll = vector<vll>;
template <class T> using min_queue = priority_queue<T, vector<T>, greater<T>>;
template <class T> istream &operator>>(istream &, vector<T> &);
template <class T> ostream &operator<<(ostream &, const vector<T> &);
template <class T, class U> istream &operator>>(istream &, pair<T, U> &);
template <class T, class U> ostream &operator<<(ostream &, const pair<T, U> &);
template <class T> struct Inf { static constexpr T inf() { return std::numeric_limits<T>::has_infinity ? std::numeric_limits<T>::infinity() : std::numeric_limits<T>::max(); } };
template <> struct Inf<int> { static constexpr int inf() { return 0x3f3f3f3f; } };
template <> struct Inf<long long> { static constexpr long long inf() { return 0x3f3f3f3f3f3f3f3fLL; } };
constexpr int INF = Inf<int>::inf(); constexpr ll BINF = Inf<ll>::inf();
// mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
// }}}
// Preprocessing & "Global" variables {{{
struct Solver {
	Solver() {}
	int solve();
};
// }}}

// Fenwick Tree {{{
template <class T>
class Fenwick {
	private:
		std::vector<T> arr;
		int sz;
		T myQuery(int idx) {
			T rt{};
			for(;idx>0;idx-=idx&-idx) rt += arr[idx];
			return rt;
		}
		void myUpdate(int idx, const T &val) {
			for(;idx<=sz;idx+=idx&-idx) arr[idx] += val;
		}
	public:
		Fenwick(int n) : arr(n + 1), sz(n) {}
		T query(int x) { return myQuery(x + 1); }
		T query(int l, int r) { return query(r) - query(l - 1); }
		void update(int x, const T &v) { myUpdate(x + 1, v); }
};
// }}}

int Solver::solve() {
	int n, q; cin >> n >> q;
	Fenwick<int> fenw(n);
	for (int i = 0; i < n; i++) {
		int u; cin >> u; u--;
		fenw.update(u, 1);
	}
	for (int i = 0; i < q; i++) {
		int k; cin >> k;
		if (k > 0) {
			k--;
			fenw.update(k, 1);
		} else {
			k = -k;
			int lo = 0, hi = n - 1;
			while (lo < hi) {
				int mi = lo + (hi - lo) / 2;
				if (fenw.query(mi) >= k)
					hi = mi;
				else
					lo = mi + 1;
			}
			fenw.update(lo, -1);
		}
	}
	if (fenw.query(n - 1) == 0) {
		cout << 0 << endl;
	} else {
		int lo = 0, hi = n - 1;
		while (lo < hi) {
			int mi = lo + (hi - lo) / 2;
			if (fenw.query(mi) > 0)
				hi = mi;
			else
				lo = mi + 1;
		}
		cout << lo + 1 << endl;
	}
	return 0;
}

// Template Main {{{
int main() {
	ios::sync_with_stdio(0); cin.tie(0);
	Solver solver;
	#ifdef JUDGE_MULTI_CASE
		int t; cin >> t; for (int i = 1; i <= t; i++)
	#endif
	solver.solve();
	// cout << "Case #" << i << ": ", solve();
	return 0;
}

template <class T> istream &operator>>(istream &is, vector<T> &v) {
	for (auto it=v.begin();it!=v.end();++it) is >> *it;
	return is;
}

template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
	for (auto it=v.begin();it!=v.end();) os << *it, os << " \n"[++it==v.end()];
	return os;
}

template <class T, class U> istream &operator>>(istream &is, pair<T, U> &p) {
	return is >> p.first >> p.second;
}

template <class T, class U> ostream &operator<<(ostream &os, const pair<T, U> &p) {
	return os << p.first << ' ' << p.second;
}
// }}}

// vim: fdm=marker
