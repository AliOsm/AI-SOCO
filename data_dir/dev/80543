#include <iostream>
#include <climits>
#include <algorithm>

using namespace std;
const int N = 2005;
const int oo = numeric_limits<int>::max();

int a, n, m;
int w[N], u[N];
bool r[N];
int dp[N][N];

int main() {
	cin >> a >> n >> m;

	fill(r, r + N, false);
	for(int i = 0; i < n; ++i) {
		int lo, hi;
		cin >> lo >> hi;
		for(int j = lo + 1; j <= hi; ++j) {
			r[j] = true;
		}
	}

	fill(u, u + N, -1);
	for (int i = 1; i <= m; ++i) {
		int x;
		cin >> x >> w[i];
		if (u[x] == -1 || w[u[x]] > w[i]) {
			u[x] = i;
		}
	}
	w[0] = 0;

	for (int i = 0; i < N; ++i) {
		fill(dp[i], dp[i] + N, oo);
	}
	dp[0][0] = 0;
	for(int i = 0; i < a; ++i) {
		for(int j = 0; j <= m; ++j) {
			if (dp[i][j] != oo) {
				if (!r[i + 1] || j > 0) {
					dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + w[j]);
				}
				if (u[i] != -1) {
					dp[i + 1][u[i]] = min(dp[i + 1][u[i]], dp[i][j] + w[u[i]]);
				}
				if (!r[i + 1]) {
					dp[i + 1][0] = min(dp[i + 1][0], dp[i][j]);
				}
			}
		}
	}

	int ret = oo;
	for(int i = 0; i <= m; ++i) {
		ret = min(ret, dp[a][i]);
	}

	cout << (ret == oo ? -1 : ret) << endl;
	return 0;
}
