#include <bits/stdc++.h>
#define Mid ((L + R) >> 1)
#define Left (2 * Node)
#define Right (2 * Node + 1)

using namespace std;

typedef long long ll;

const int K = 20;
const int N = 200200;

int n;
int a[N];
int Suff[N];
int Dp[N];

int MSB[N];
int Max[N][K];

void max_self(int& x, int y)
{
    x = max(x, y);
}

int Get(int L, int R)
{
    if(L > R)   return 0;
    int Jump = MSB[R - L + 1];
    return max(Max[L][Jump], Max[R - (1 << Jump) + 1][Jump]);
}

bool Can(int i, int j)
{
    int Len = j - i + 1;
    return Suff[Len] >= Get(i, j);
}

int main()
{
    for(int i = 1; i < N; i++)
        for(int j = 0; j < K; j++)
            if(i & (1 << j))
                MSB[i] = j;

    int T;  cin >> T;

    while(T--)
    {
        scanf("%d", &n);

        for(int i = 0; i < n; i++)  scanf("%d", a + i), Max[i][0] = a[i];

        for(int i = 0; i <= n; i++) Suff[i] = 0;

        for(int j = 1; j < K; j++)
            for(int i = 0; i + (1 << j) - 1 < n; i++)
                Max[i][j] = max(Max[i][j - 1], Max[i + (1 << (j - 1))][j - 1]);

        int m;  scanf("%d", &m);

        while(m--)
        {
            int p, s;   scanf("%d%d", &p, &s);

            max_self(Suff[s], p);
        }

        for(int i = n - 1; ~i; --i) max_self(Suff[i], Suff[i + 1]);

        for(int i = 0, j = 0; i < n; i++)
        {
            j = max(i, j);

            while(j < n && Can(i, j))   j++;

            Dp[i] = j;
        }

        int Ans = 0;
        int Cur = 0;

        while(Cur < n)
        {
            if(Dp[Cur] == Cur)
            {
                Ans = -1;
                break;
            }

            Cur = Dp[Cur];
            Ans++;
        }

        printf("%d\n", Ans);
    }
}
