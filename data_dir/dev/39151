#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%Ld"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
#include <utility>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
int N , M;
char in[1010][1010];
pii B , E;
int lev[1010][1010];
int sft[4][2] = {{-1,0},{1,0},{0,-1},{0,1}};
bool is_in(pii w){
  return w.fi>=0 && w.fi<N && w.se>=0 && w.se<M;
}
void BFS(pii F){
  memset(lev , -1 , sizeof lev);
  queue<pii> Q;
  lev[F.fi][F.se] = 0;
  Q.push(F);
  while(!Q.empty()){
   pii vr = Q.front();
   Q.pop();
   for(int p=0;p<4;++p){
    pii neo = mp(vr.fi + sft[p][0] , vr.se + sft[p][1]);
    if(is_in(neo) && in[neo.fi][neo.se]!='T' &&
       lev[neo.fi][neo.se] == -1){
     lev[neo.fi][neo.se] = lev[vr.fi][vr.se] + 1;
     Q.push(neo);
                                 }
                       }
                   }
}
int main(){
  scanf("%d%d" , &N , &M);
  for(int i=0;i<N;++i)
   scanf("%s" , &in[i]);
  for(int i=0;i<N;++i)
   for(int j=0;j<M;++j)
    if(in[i][j] == 'S')
     B = mp(i,j);
    else if(in[i][j] == 'E')
          E = mp(i,j);
  BFS(B);
  int sp = lev[E.fi][E.se];
  BFS(E);
  int ans = 0;
  for(int i=0;i<N;++i)
   for(int j=0;j<M;++j)
    if(lev[i][j] != -1 && lev[i][j] <= sp)
     if(in[i][j] >= '0' && in[i][j] <= '9')
      ans += in[i][j] - '0';
  printf("%d\n" , ans);
  return 0;
}
