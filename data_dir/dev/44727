#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 100, MOD = 1000 * 1000 * 1000 + 7;

int sum(int a, int b) {
	a += b;
	if(a < 0)
		a += MOD;
	else if(a >= MOD)
		a -= MOD;
	return a;
}

void _sum(int &a, int b) {
	a = sum(a, b);
}

int mul(int a, int b) {
	return 1LL * a * b % MOD;
}

void _mul(int &a, int b) {
	a = mul(a, b);
}

int n, p, dp[N][2];
vector<int> nei[N];

void upd_1(int &zero, int &one, int u) {
	int A = sum(zero, sum(mul(one, dp[u][1]), mul(zero, dp[u][0]))),
		B = sum(one, sum(mul(one, dp[u][0]), mul(zero, dp[u][1])));
	zero = A, one = B;
}

void dfs(int v, int par = -1) {
	int zero = 0, one = 1;
	for (int u: nei[v]) {
			dfs(u, v);
			upd_1(zero, one, u);
		}
	dp[v][0] = zero, dp[v][1] = one;
	reverse(nei[v].begin(), nei[v].end());
	zero = 0, one = 1;
	for (int u: nei[v])
		upd_1(zero, one, u);
	_sum(dp[v][0], zero);
	_sum(dp[v][1], one);
	zero = 1, one = 0;
	for (int u: nei[v]) {
			int A = sum(zero, mul(one, dp[u][1])),
				B = sum(one, mul(zero, dp[u][1]));
			zero = A, one = B;
		}
	_sum(dp[v][0], -one);
	int cnt = 1;
	for (int u: nei[v])
		_mul(cnt, dp[u][0] + 1);
	_sum(dp[v][1], -cnt);
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1; i < n; i++) {
		cin >> p;
		nei[--p].push_back(i);
	}
	dfs(0);
	cout << sum(dp[0][0], dp[0][1]);
	return 0;
}
