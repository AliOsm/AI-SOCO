#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;
#define ll long long
//increase stack size
#pragma comment(linker, "/STACK:16777216")

ll mxm() {return LLONG_MIN;}
template<typename... Args>
ll mxm(ll a, Args... args) { return max(a,mxm(args...)); }

ll mnm() {return LLONG_MAX;}
template<typename... Args>
ll mnm(ll a, Args... args) { return min(a,mnm(args...)); }

template<class T> ostream& operator<<(ostream& os,vector<T> V){
	os<<"[ ";for(auto v:V)os<<v<<" ";return os<<"]";
}
template<class L,class R> ostream& operator<<(ostream& os,pair<L,R> P){
	return os<<"("<<P.first<<","<<P.second<<")";
}

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__,__VA_ARGS__)
template<typename Arg1>
void __f(const char* name,Arg1&& arg1){
	cout<<name<<" : "<<arg1<<endl;
}
template <typename Arg1,typename... Args>
void __f(const char* names,Arg1&& arg1,Args&&... args){
	const char* comma=strchr(names+1,',');cout.write(names,comma-names)<<" : "<<arg1<<" | ";__f(comma+1,args...);
}
#else
#define trace(...) 1
#endif

#define ld long double
#define pll pair<ll,ll>
#define ii pair<int,int>
#define vll vector<ll>
#define vii vector<ii>
#define vi vector<int>
#define vpll vector<pll>
#define vld vector<ld>
#define vvld vector<vld>
#define vvi vector<vi>
#define vvll vector<vll>
#define vvpll vector<vpll>
#define vvii vector<vii>
#define I insert
#define F first
#define S second
#define pb push_back
#define endl "\n"
#define all(x)	x.begin(),x.end()

const int mod=1e9+7;
// 128 bit: __int128
inline int add(int a,int b){a+=b;if(a>=mod)a-=mod;return a;}
inline int sub(int a,int b){a-=b;if(a<0)a+=mod;return a;}
inline int mul(int a,int b){return (a*1ll*b)%mod;}
inline int power(int a,int b){int rt=1;while(b>0){if(b&1)rt=mul(rt,a);a=mul(a,a);b>>=1;}return rt;}
inline int inv(int a){return power(a,mod-2);}

struct compare{
	bool operator() (const int &a,const int &b) const{
		return a>b;
	}
};


class SegmentTree{
public:
	vector<ll> array;
	vector<ll> stmin, lazymin;
	ll n;
	SegmentTree(vector<ll> &v){
		n = v.size();
		array = v;
	}
	SegmentTree(ll n){
		this->n = n;
	}
	void build_min(){
		stmin.resize(4 * n, 1e18);
		lazymin.resize(4 * n);
		this->build_min(0, n - 1);
	}
	void upd_min(ll l, ll r, ll val){
		this->upd_min(0, n - 1, l, r, val);
	}
	ll get_min(ll l, ll r){
		return this->get_min(0, n - 1, l, r);
	}
	void build_min(ll start, ll end, ll pos = 1){
		if(start == end){
			stmin[pos] = array[start];
			return;
		}
		ll mid = start + end >> 1;
		build_min(start, mid, pos * 2);
		build_min(mid + 1, end, pos * 2 + 1);
		stmin[pos] = min(stmin[pos * 2],  stmin[pos * 2 + 1]);
	}
	void ppgt_min(ll l, ll r,ll pos)
	{
		if(l == r) return;
		ll m = l + r >> 1;
		lazymin[pos << 1] += lazymin[pos]; lazymin[pos << 1 | 1] += lazymin[pos];
		stmin[pos << 1] += lazymin[pos];
		stmin[pos << 1 | 1] += lazymin[pos];
		lazymin[pos] = 0;
	}
	void upd_min(ll start, ll end, ll l, ll r, ll val, ll pos = 1)
	{
		if (start > r || end < l ) return;
		ppgt_min(start, end, pos);
		if (start >= l && end <= r ) { lazymin[pos] += val; stmin[pos] += val; return;}
		ll mid = start + end >> 1;
		upd_min(start, mid, l, r, val, pos * 2);
		upd_min(mid + 1, end, l, r, val, pos * 2 + 1);
		stmin[pos] = min(stmin[pos * 2], stmin[pos * 2 + 1]);
	}
	ll get_min(ll start, ll end, ll l, ll r, ll pos = 1){
		ppgt_min(start, end, pos);
		if(start > r || end < l) return 1e18;
		if(start >= l && end <= r) return stmin[pos];
		ll mid = start + end >> 1;
		return min(get_min(start, mid, l, r, pos * 2), get_min(mid + 1, end, l, r, pos * 2 + 1));
	}
};


ll get_ans(vll &p, vll &a){
	ll n = p.size();
	vll arr(n);
	vll price(n), pref(n);
	for(ll i = 0; i < n; i++)
		price[p[i] - 1] = a[i];
	for(ll i = 0; i < n; i++)
		pref[i] = (i == 0 ? 0 : pref[i - 1]) + price[i];
	for(ll i = 0; i < n; i++){
		arr[i] = pref[i];
		if(p[0] - 1 <= i)
			arr[i] -= a[0];
		else
			arr[i] += a[0];
		// trace(i, arr[i]);
	}
	SegmentTree st(arr);
	st.build_min();
	ll ans = st.get_min(0, n - 1);
	for(ll i = 1; i < n - 1; i++){
		ll val = p[i] - 1;
		st.upd_min(val, n - 1, -price[val]);
		if(val - 1 >= 0)
			st.upd_min(0, val - 1, price[val]);
		ans = min(ans, st.get_min(0, n - 1));
	}
	ans = min(ans, a[0]);
	return ans;
}

int main()
{
	ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);cout<<setprecision(25);
	int n;
	cin >> n;
	vll p(n), a(n);
	for(ll i = 0; i < n; i++)
		cin >> p[i];
	for(ll i = 0; i < n; i++)
		cin >> a[i];
	ll ans = get_ans(p, a);
	// reverse(all(p));reverse(all(a));
	// ans = min(ans, get_ans(p, a));
	cout << ans << endl;		
}