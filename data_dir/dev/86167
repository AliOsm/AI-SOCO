#include <iomanip>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <ctime>
#include <cstdio>
#include <cmath>
#include <queue>
#include <bitset>
#include <string>
 
#define ll long long
#define mp make_pair
#define pb push_back
 
using namespace std;

const int N = 300010;
const int MOD = 998244353; 

const int b = 62;

int n;
ll a[N];
int cnt[b];
vector <ll> tmp;
queue <int> q;
int dist[N];

int main() {
    cin >> n;
    for (int i = 1; i <= n; i++) cin >> a[i];
    for (int i = 1; i <= n; i++) {
        for (int j = 0; j < b; j++) {
            if (a[i] & (1ll << j)) {
                cnt[j]++;
            }
        }
    }
    for (int i = 0; i < b; i++) {
        if (cnt[i] >= 3) {
            cout << 3;
            return 0;
        }
    }
    for (int i = 1; i <= n; i++) {
        if (a[i] > 0) tmp.pb(a[i]);
    }
    n = tmp.size();
    for (int i = 1; i <= n; i++) a[i] = tmp[i - 1];
    int ans = -1;
    for (int i = 1; i <= n; i++) {
        for (int j = i + 1; j <= n; j++) {
            if (a[i] & a[j]) {
                for (int k = 1; k <= n; k++) dist[k] = -1;
                dist[i] = 0;
                q.push(i);
                while (!q.empty()) {
                    int v = q.front();
                    q.pop();
                    for (int k = 1; k <= n; k++) {
                        if ((a[v] & a[k]) && dist[k] == -1 && (min(v, k) != i || max(v, k) != j)) {
                            dist[k] = dist[v] + 1;
                            q.push(k);
                        }
                    }
                }
                if (dist[j] != -1) {
                    if (ans == -1) ans = dist[j] + 1;
                    else ans = min(ans, dist[j] + 1);
                }
            }
        }
    }
    cout << ans;
	return 0;
}