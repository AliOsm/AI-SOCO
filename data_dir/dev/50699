//satyaki3794
#include <bits/stdc++.h>
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
 
using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;

ll pwr(ll base, ll p, ll mod = MOD){
ll ans = 1;while(p){if(p&1)ans=(ans*base)%mod;base=(base*base)%mod;p/=2;}return ans;
}
 

ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}

#define LEFT 0
#define DOWN 1
#define RIGHT 2
#define UP 3

typedef pair<ii, ii> i4;
int r, c;
int sx, sy, tx, ty;
char arr[1002][1002];
bool done[1002][1002][4][3];


bool valid(int i, int j, int dir, int turns){
    return (i>=1 && i<= r && j>=1 && j<=c && turns <= 2 && arr[i][j]!='*' && !done[i][j][dir][turns]);
}


int main(){

    // ios_base::sync_with_stdio(0);
    // cin.tie(0);

    scanf("%d%d", &r, &c);
    for(int i=1;i<=r;i++){
        scanf("%s", arr[i]+1);
        for(int j=1;j<=c;j++)
            if(arr[i][j] == 'S'){
                sx = i; sy = j;
            }
            else if(arr[i][j] == 'T'){
                tx = i; ty = j;
            }
    }

    queue<i4> qq;
    for(int i=0;i<4;i++){
        done[sx][sy][i][0] = true;
        qq.push({{sx, sy}, {i, 0}});
    }

    while(!qq.empty()){

        int x = qq.front().ff.ff, y = qq.front().ff.ss;
        int dir = qq.front().ss.ff, turns = qq.front().ss.ss;
        qq.pop();

        if(valid(x-1, y, UP, turns+(dir!=UP))){
            done[x-1][y][UP][turns+(dir!=UP)] = true;
            qq.push({{x-1, y}, {UP, turns+(dir!=UP)}});
        }

        if(valid(x+1, y, DOWN, turns+(dir!=DOWN))){
            done[x+1][y][DOWN][turns+(dir!=DOWN)] = true;
            qq.push({{x+1, y}, {DOWN, turns+(dir!=DOWN)}});
        }

        if(valid(x, y-1, LEFT, turns+(dir!=LEFT))){
            done[x][y-1][LEFT][turns+(dir!=LEFT)] = true;
            qq.push({{x, y-1}, {LEFT, turns+(dir!=LEFT)}});
        }

        if(valid(x, y+1, RIGHT, turns+(dir!=RIGHT))){
            done[x][y+1][RIGHT][turns+(dir!=RIGHT)] = true;
            qq.push({{x, y+1}, {RIGHT, turns+(dir!=RIGHT)}});
        }
    }

    for(int i=0;i<4;i++)
        for(int j=0;j<3;j++)
            if(done[tx][ty][i][j]){
                printf("YES\n");
                return 0;
            }

    printf("NO\n");
    return 0;
}










