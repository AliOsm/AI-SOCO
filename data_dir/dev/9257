#include <bits/stdc++.h>
 
using namespace std;

#define MOD 998244353

// 998244353 = (119 << 23) + 1, primitive root: 3
// array size = 2^k >= result_deg + 1 = deg_a + deg_b + 1

int n, si, hsi, lg;
int to[1 << 21];
long long x[1 << 21], y[1 << 21];
long long w[(1 << 21) + 1];
long long invn;
long long ta, tb;
int ma, kk;
long long ans;
int tc;

long long po(long long b, int p) {
	long long re = 1;
	while (p) {
		if (p & 1)
			re = re * b % MOD;
		b = b * b % MOD;
		p >>= 1;
	}
	return re;
}

void init(int deg) {
	si = 2;
	lg = 1;
	while (si <= deg) {
		si <<= 1;
		lg++;
	}
	hsi = si >> 1;
	for (int i = 0, half = 0; i < si; i += 2, half++) {
		to[i] = to[half] >> 1;
		to[i | 1] = to[i] | hsi;
	}
	// for (int i = 0; i < si; i++) printf("%d%c", to[i], i == si - 1 ? '\n' : ' ');
	w[0] = 1;
	w[1] = po(3, (MOD - 1) >> lg);
	for (int i = 2; i <= si; i++)
		w[i] = w[i - 1] * w[1] % MOD;
	// for (int i = 0; i <= si; i++) printf("%lld%c", w[i], i == si ? '\n' : ' ');
	invn = po(si, MOD - 2);
}

inline void ntt(long long *a) {
	for (int i = 0; i < si; i++)
		if (i < to[i])
			swap(a[i], a[to[i]]);
	for (int i = 0, half = 1, step = 2, wstep = 1 << (lg - 1); i < lg; i++, half <<= 1, step <<= 1, wstep >>= 1)
		for (int j = 0; j < si; j += step)
			for (int k = 0, wn = 0; k < half; k++, wn += wstep) {
				ta = a[j | k];
				tb = w[wn] * a[half | j | k] % MOD;
				a[j | k] = ta + tb;
				if (a[j | k] >= MOD)
					a[j | k] -= MOD;
				a[half | j | k] = ta + MOD - tb;
				if (a[half | j | k] >= MOD)
					a[half | j | k] -= MOD;
			}
}

inline void intt(long long *a) {
	for (int i = 0; i < si; i++)
		if (i < to[i])
			swap(a[i], a[to[i]]);
	for (int i = 0, half = 1, step = 2, wstep = 1 << (lg - 1); i < lg; i++, half <<= 1, step <<= 1, wstep >>= 1)
		for (int j = 0; j < si; j += step)
			for (int k = 0, wn = si; k < half; k++, wn -= wstep) {
				ta = a[j | k];
				tb = w[wn] * a[half | j | k] % MOD;
				a[j | k] = ta + tb;
				if (a[j | k] >= MOD)
					a[j | k] -= MOD;
				a[half | j | k] = ta + MOD - tb;
				if (a[half | j | k] >= MOD)
					a[half | j | k] -= MOD;
			}
}

int main() {
	scanf("%d%d", &n, &kk);
	while (kk--) {
		scanf("%d", &tc);
		ma = max(ma, tc);
		x[tc] = 1;
	}
	ma *= n / 2;
	// (sum of x^tc)^(n / 2)
	init(ma);
	ntt(x);
	for (int i = 0; i < si; i++) x[i] = po(x[i], n / 2) % MOD;
	intt(x);
	for (int i = 0; i < si; i++) x[i] = x[i] * invn % MOD;
	for (int i = 0; i <= ma; i++)
		ans = (ans + x[i] * x[i]) % MOD;
	printf("%lld\n", ans);
	return 0;
}
