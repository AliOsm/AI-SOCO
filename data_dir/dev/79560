/*
                _                _____             _                 
     /\        (_)              / ____|           (_)                
    /  \   _ __ _ _   _ _ __   | (___   __ _ _ __  _  ___  _____   __
   / /\ \ | '__| | | | | '_ \   \___ \ / _` | '_ \| |/ _ \/ _ \ \ / /
  / ____ \| |  | | |_| | | | |  ____) | (_| | | | | |  __/  __/\ V / 
 /_/    \_\_|  | |\__,_|_| |_| |_____/ \__,_|_| |_| |\___|\___| \_/  
              _/ |                               _/ |                
             |__/                               |__/                 
*/

#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define f first
#define s second
#define let(x,a) __typeof(a) x(a)
#define all(a) (a).begin(),(a).end() 
#define endl '\n'
#define present(c,x) ((c).find(x) != (c).end()) 
#define tr(v,it) for(let(it,v.begin()); it != v.end(); it++)
#define rtr(v,it) for(let(it,v.rbegin()); it != v.rend(); it++)

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define ll long long int
#define pii pair<int,int>
#define vi vector<int>

using namespace std;

int main() {
	ios::sync_with_stdio(false);
	int n;
	cin>>n;
	string s;
	cin>>s;
	s+="S";
	vector< pii > v;
	int start=0,cnt=0,ans=0;
	for(int i=0;i<n+1;i++) {
		//trace2(s[i],cnt);
		if(s[i]=='S') {
			if(cnt) {
				ans=max(ans,cnt);
				v.pb({start,i-1});
			}
			cnt=0;
		} else {
			if(cnt==0) start=i;
			cnt++;
		}
	}
	if(v.size()>1) ans++;
	//trace1(v.size());
	for(int i=1;i<v.size();i++) {
		if(v[i].f==2+v[i-1].s) {
			ans=max(ans,(v.size()>2)+v[i].s-v[i].f+1+v[i-1].s-v[i-1].f+1);
		}
	}
	cout<<ans<<endl;
	return 0;
}