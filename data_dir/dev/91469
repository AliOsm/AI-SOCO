#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             1e9
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>


#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())

#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);

#ifdef VAMP
     #define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template < typename Arg1 >
    void __f(const char* name, Arg1&& arg1){
        cout << name << " = " << arg1 << std::endl;
    }
    template < typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names+1, ',');
        cout.write(names, comma - names) << " = " << arg1 <<" | ";
        __f(comma+1, args...);
    }
#else
    #define debug(...)
#endif

const int maxnodes = 55;

LL nodes = maxnodes, src, dest;
LL dist[maxnodes], q[maxnodes], work[maxnodes];

struct Edge {
  LL to, rev;
  LL f, cap;
};

vector<Edge> g[maxnodes];

void addEdge(LL s, LL t, LL cap)
{
  Edge a = {t, g[t].size(), 0, cap};
  Edge b = {s, g[s].size(), 0, 0};
  g[s].push_back(a);
  g[t].push_back(b);
}

bool dinic_bfs()
{
  fill(dist, dist + nodes, -1);

  dist[src] = 0;
  LL index = 0;
  q[index++] = src;

    for (LL i = 0; i < index; i++)
    {
        LL u = q[i];
        for (LL j = 0; j < (LL) g[u].size(); j++)
        {
            Edge &e = g[u][j];
            if (dist[e.to] < 0 && e.f < e.cap)
            {
                dist[e.to] = dist[u] + 1;
                q[index++] = e.to;
            }
        }
    }
  return dist[dest] >= 0;
}

LL dinic_dfs(LL u, LL f) {
  if (u == dest)
    return f;

  for (LL &i = work[u]; i < (LL) g[u].size(); i++) {
    Edge &e = g[u][i];

    if (e.cap <= e.f) continue;

    if (dist[e.to] == dist[u] + 1)
    {
      LL flow = dinic_dfs(e.to, min(f, e.cap - e.f));
      if (flow > 0)
      {
        e.f += flow;
        g[e.to][e.rev].f -= flow;
        return flow;
      }
    }
  }
  return 0;
}

LL maxFlow(LL _src, LL _dest)
{
    src = _src;
    dest = _dest;
    LL result = 0;
    while (dinic_bfs())
    {
        fill(work, work + nodes, 0);
        while (LL delta = dinic_dfs(src, INT_MAX))
            result += delta;
    }
    return result;
}
const LL N = 505;
LL n , m , x;
LL A[N],B[N],C[N];
int main()
{
    #ifdef VAMP
        clock_t tStart = clock();
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    cin >> n >> m >> x;

    for(LL i = 1;i <= m;i++){
        cin >> A[i] >> B[i] >> C[i];
    }

    double lo = 1/(double)x , hi = 2000000;

    for(LL iter = 1;iter <= 300;iter++){
        double mid = (lo + hi)/2;
        for(LL i = 0;i < maxnodes;i++)g[i].clear();

        for(LL i = 1;i <= m;i++){
            LL cost = C[i]/mid;
            addEdge(A[i],B[i],cost);
        }
        LL f = maxFlow(1,n);
        if(f >= x){
            lo = mid;
        }else{
            hi = mid;
        }
    }
    cout << fixed << setprecision(9) << ((lo + hi)/2) * x << "\n";

    #ifdef VAMP
        fprintf(stderr, "\n>> Runtime: %.10fs\n", (double) (clock() - tStart) / CLOCKS_PER_SEC);
    #endif
}