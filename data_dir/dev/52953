#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
ordered_set;	

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<pii, int> para;
const ll inf = 1e18 + 7;
const ll maxN = 1e6 + 5;
const ll MOD = 1e9 + 7;

ll pow(ll a, ll b) {
	if (b == 0) return 1;
	ll d = pow(a, b / 2);
	ll z = 1;
	if (b % 2) z = a;
	return (((d * d) % MOD) * z) % MOD;
}

int n, q, maxim;
int arr[maxN], ile[maxN];
bool prime[maxN], used[maxN];
vi divs[maxN];

int main() {
	ios_base::sync_with_stdio(0);
	cin >> n >> q;
	RI(i, n) {
		cin >> arr[i];
		maxi(maxim, arr[i]);
	}
	FOR(i, 2, maxim) {
		prime[i] = true;
	}
	FOR(i, 2, maxim) {
		if (prime[i]) {
			for (int j = i; j <= maxim; j += i) {
				divs[j].pb(i);
				if (j != i)
					prime[j] = false;
			}
		}
	}
	ll ans = 0;
	ll inStruct = 0;
	REP(_, q) {
		int ind;
		cin >> ind;
		int m = sz(divs[arr[ind]]);
		if (used[ind]) {
			int cnt = 0;
			RI(i, (1 << m) - 1) {
				bitset<7> bs(i);
				int tmp = 1, bits = 0;
				REP(i, 7) {
					if (bs[i]) {
						tmp *= divs[arr[ind]][i];
						bits++;
					}
				}
				ile[tmp]--;
				if (bits % 2 == 0) cnt -= ile[tmp];
				else cnt += ile[tmp];
			}
			inStruct--;
			ans -= (inStruct - cnt);
			used[ind] = false;
		} else {
			int cnt = 0;
			RI(i, (1 << m) - 1) {
				bitset<7> bs(i);
				int tmp = 1, bits = 0;
				REP(i, 7) {
					if (bs[i]) {
						tmp *= divs[arr[ind]][i];
						bits++;
					}
				}
				if (bits % 2 == 0) cnt -= ile[tmp];
				else cnt += ile[tmp];
				ile[tmp]++;
			}
			ans += (inStruct - cnt);
			used[ind] = true;
			inStruct++;
		}
		cout << ans << endl;
	}
	return 0;
}
