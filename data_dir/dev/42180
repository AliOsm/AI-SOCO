#include <bits/stdc++.h>

using namespace std;

#define rd ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)


int n;
string s;

int dp[2*(int)1e5+5][5];
int arrF[100];

int call(int idx,char last){
    if(idx==n)return 0;
    if(dp[idx][arrF[last]]!=-1)return dp[idx][arrF[last]];

    int ret=INT_MAX;
    if(s[idx]!=last)ret=call(idx+1,s[idx]);
    if('B'!=last && 'B'!=s[idx])ret=min(ret,1+call(idx+1,'B'));
    if('G'!=last && 'G'!=s[idx])ret=min(ret,1+call(idx+1,'G'));
    if('R'!=last && 'R'!=s[idx])ret=min(ret,1+call(idx+1,'R'));

    return dp[idx][arrF[last]]=ret;

}
void getRes(int idx,char last,string &res){
    if(idx==n)return;

    char go;
    int mn=INT_MAX;

    if(s[idx]!=last){
        int ret=call(idx+1,s[idx]);
        if(ret<mn){
            mn=ret;
            go=s[idx];
        }
    }
    if('B'!=last && 'B'!=s[idx]){
        int ret=call(idx+1,'B');
        if(ret<mn){
            mn=ret;
            go='B';
        }
    }
    if('G'!=last && 'G'!=s[idx]){
        int ret=call(idx+1,'G');
        if(ret<mn){
            mn=ret;
            go='G';
        }
    }
    if('R'!=last && 'R'!=s[idx]){
        int ret=call(idx+1,'R');
        if(ret<mn){
            mn=ret;
            go='R';
        }
    }

    res+=go;
    getRes(idx+1,go,res);
}
int main(){
    rd;

    arrF['B']=1;
    arrF['G']=2;
    arrF['R']=3;

    cin>>n;
    cin>>s;

    memset(dp,-1,sizeof(dp));

    cout<<call(0,0)<<endl;

    string res;
    getRes(0,0,res);

    cout<<res<<endl;


    return 0;
}
