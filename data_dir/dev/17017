#include <string.h>
#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <stdlib.h>    
#include <time.h> 
#include <stack>
#include <queue>
#include <set>
 
#include <map>
#include <vector>
#include <string>
#include <stdlib.h>
 
#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf
 
#define pf printf
#define mp make_pair
 
using namespace std;
const int N = 301;
const int mod = 1e9+7;
//const int mod = 1000000007;

int n,m;
string s;
ll dp[N][N][N];
int nt[N];

void gnt(){
	nt[0] = 0;
	for(int i = 0; i+1 < m; ++i) {
		int len = 0;
		char c='(';
		if(s[i+1]=='(') c = ')';

		for(int j = 1; j <=i+2; ++j) {
			int start = i+1-j+1;
			string s1 = s.substr(start,j-1)+c;
			string s2 = s.substr(0,j);
			if(s1==s2) {
				len = j;
			}
		}
		nt[i+1]=len;
	}
}

int main() {
	cin>>n;
	cin>>s;
	m = s.size();
	
	gnt();
	
	clr(dp);
	dp[0][0][0] = 1;
	for(int i = 0; i <= 2*n; ++i) {
		for(int j = 0; j <= s.size();++j) {
			for(int k = 0; k <=n; ++k) {
				if(dp[i][j][k]==0)continue;
				if(j<s.size()){
					int pt = nt[j];
					if(s[j]=='(') {
						dp[i+1][j+1][k+1] = (dp[i+1][j+1][k+1]+dp[i][j][k])%mod;
						if(k-1>=0) {
							dp[i+1][pt][k-1] = (dp[i+1][pt][k-1]+dp[i][j][k])%mod;
						}
					}
					else {
						if(k-1>=0)
							dp[i+1][j+1][k-1] = (dp[i+1][j+1][k-1]+dp[i][j][k])%mod;
						dp[i+1][pt][k+1] = (dp[i+1][pt][k+1]+dp[i][j][k])%mod;
					}
				}
				else {
					dp[i+1][j][k+1] = (dp[i+1][j][k+1]+dp[i][j][k])%mod;
					if(k-1>=0) {
						dp[i+1][j][k-1] = (dp[i+1][j][k-1]+dp[i][j][k])%mod;
					}
				}
			}
		}
	}
	cout<<dp[2*n][m][0]<<endl;
}


