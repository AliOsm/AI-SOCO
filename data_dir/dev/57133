#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>

using namespace std;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	int n, m;
	cin >> n;
	set < long long > s;
	for (int i = 0; i < n; i++) {
		long long x = 0;
		cin >> x;
		s.insert(x);
	}
	vector < long long > a;
	for (auto x: s) {
		a.push_back(x);
	}
	sort(a.begin(), a.end());
	set < long long > ds;
	map < long long, long long> cd;
	for (int i = 1; i < a.size(); i++) {
		ds.insert(a[i] - a[i - 1]);
		cd[a[i] - a[i - 1]] += 1;
	}
	int nn = a.size();
	vector < pair < long long , long long > > points;
	points.push_back({0, nn});
	for (auto x : ds) {
		points.push_back({x, points.back().second - cd[x]});
	}
	/*cout << "---" << endl;
	for (auto x: points) {
		cout << x.first << " " << x.second << endl;
	}
	cout << "-----" << endl;
	*/
	vector < long long > sum(n, 0);
	for (int i = 1; i < points.size(); i++) {
		sum[i] = sum[i - 1] + (points[i].first - points[i - 1].first) * points[i - 1].second;
	}
	int q = 0;
	cin >> q;
	while (q--) {
		long long ll, rr;
		cin >> ll >> rr;
		rr = rr - ll;
		int li = 0;
		int ri = points.size();
		while (ri - li > 1) {
			int mid = (ri + li) >> 1;
			if (points[mid].first <= rr) {
				li = mid;
			} else {
				ri = mid;
			}
		}
		long long ans = sum[li] + (rr - points[li].first + 1) * points[li].second;
		cout << ans << ' ';
	}
	return 0;
}