#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327
#endif // M_PI
#define endl "\n"
#define S struct
#define X first
#define Y second
#define V vector
#ifndef __linux__
#define LLD "%I64d"
#else
#define LLD "%ll""d"
#endif
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
using namespace std;
typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
void sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); }
S Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;
S FAIL { FAIL () { cout << "CHANGE!!!" << endl;}};

int get_min(const vector <int> &cycles, int k)
{
    const int N = 100;
    const int MAXN = 1000001;
    int n = cycles.size();
    vector <int> cnt(N);
    FOR (i, 0, n) {
        if (cycles[i] >= N) {
            continue;
        }
        ++cnt[cycles[i]];
    }
    bitset <MAXN> res;
    res.set(0);
    FOR (i, 1, N) {
        bitset <MAXN> res2;
        FOR (j, 0, i) {
            int last = -1;
            for (int k = j, t = 0; k < MAXN; k += i, ++t) {
                if (res.test(k)) {
                    last = t;
                }
                if (last != -1 && t - last <= cnt[i]) {
                    res2.set(k);
                }
            }
        }
        res = res2;
    }
    FOR (i, 0, n) {
        if (cycles[i] >= N) {
            res = res | (res << cycles[i]);
        }
    }
    return res.test(k) ? k : k + 1;
}

int get_max(const vector <int> &cycles, int k)
{
    int n = cycles.size();
    int two = 0;
    int one = 0;
    FOR (i, 0, n) {
        two += cycles[i] / 2;
        one += cycles[i] % 2;
    }
    if (k <= two) {
        return 2 * k;
    }
    if (k > two + one) {
        return accumulate(IT(cycles), 0LL);
    }
    return 2 * two + (k - two);
}

int main()
{
    int n, k;
    cin >> n >> k;
    vector <int> p(n);
    GET(p, n);
    FOR (i, 0, n) {
        --p[i];
    }
    vector <int> cycles;
    vector <int> used(n);
    FOR (i, 0, n) {
        if (used[i]) {
            continue;
        }
        int t = i;
        int res = 0;
        do {
            t = p[t];
            used[t] = 1;
            ++res;
        } while (t != i);
        cycles.push_back(res);
    }
    cout << get_min(cycles, k) << " " << get_max(cycles, k) << endl;
    return 0;
}

