//Caution to the wind,complete freedom
#include<bits/stdc++.h>
#define ll long long
#define MOD 1000000007
#define sd(n) scanf("%d",&n);
#define pd(n) printf("%d\n",n);
#define sl(n) scanf("%llu",&n);
#define pl(n) printf("%llu\n",n);
ll mpow(ll a, ll n,ll mod)
{ll ret=1;ll b=a;while(n) {if(n&1)
    ret=(ret*b)%mod;b=(b*b)%mod;n>>=1;}
return (ll)ret;
}
using namespace std;
#define pi acos(-1.0)
#define MAX 1000001
#define  pii pair<int,int>
#define vi vector<int>
vector<string> v;
bool graph[27][27]={false},vis[26];
vector<int> edges[26];
void dfs(int a,stack<int>& s)
{
    vis[a]=true;
    for(int i=0;i<edges[a].size();i++)
    {
        if(vis[edges[a][i]]==false)
            dfs(edges[a][i],s);
    }

    s.push(a);
}
void topsort()
{
    memset(vis,false,sizeof(vis));
    stack<int> s;
    for(int i=0;i<26;i++)
    {
        if(!vis[i])
        {
            dfs(i,s);
        }
    }
    while(!s.empty())
    {
        char c=('a'+s.top());
        cout<<c;
        s.pop();
    }
}
int main()
{
    string s1;
    int i,j,m;
    int n;
    sd(n);
    for(j=0;j<n;j++)
        {cin>>s1;v.push_back(s1);}
    for(i=0;i<n;i++)
        for(j=i+1;j<n;j++)
        {
            int k=min(v[i].size(),v[j].size()),l,pos=-1;
            for( l=0;l<k;l++)
            {
                if(v[i][l]!=v[j][l])
                {
                    pos=l;
                    break;
                }

            }
            if(pos==-1)
            {
                if(v[i].size()>v[j].size())
                {cout<<"Impossible";return 0;}
                else
                 continue;

            }
            edges[v[i][l]-'a'].push_back(v[j][l]-'a');
            graph[v[i][l]-'a'][v[j][l]-'a']=true;
        }
       for(m=0;m<26;m++)
        for(i=0;i<26;i++)
         for(j=0;j<26;j++)
       {
           if(graph[i][m]&&graph[m][j])
            graph[i][j]=true;

       }
     for(i=0;i<26;i++)
     {
         if(graph[i][i])
         {
             cout<<"Impossible";
             return 0;
         }
     }

topsort();

    return 0;
}
