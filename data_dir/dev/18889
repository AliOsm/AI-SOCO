#include <bits/stdc++.h>
using namespace std;
typedef double db;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
#define dd(x) cout << #x << " = " << x << ", "
#define de(x) cout << #x << " = " << x << endl
#define rep(i,a,b) for(int i=(a);i<(b);++i)
#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define fi first
#define se second
//INF = 1 061 109 567 ; INF + INF = 2 122 219 134 ;
//LINF = 4 557 430 888 798 830 399 ; LINF + LINF = 9 114 861 777 597 660 798 ;
const int INF = 0x3f3f3f3f;     // -INF: 0xc0   abs(-INF) = INF + 1
const ll LINF = 0x3f3f3f3f3f3f3f3f;
const int MOD = (int)1e9+7;
const int N = (int)1e6+7;

// -------------------------------------------------- 变量 -------------------------------------------------- //

int n, m, a[N];
//map <int, int> cnt;
int cnt[N];
vi dis;
struct Node {
	int b, c, tb, tc, id;
	bool operator < (const Node &rhs) const {
		if (cnt[tb] != cnt[rhs.tb]) return cnt[tb] > cnt[rhs.tb];
		return cnt[tc] > cnt[rhs.tc];
	}
};
Node b[N];

// -------------------------------------------------- 函数 -------------------------------------------------- //

void Init() {
	dis.clear();
	rep(i, 0, n) scanf("%d", a+i), dis.pb(a[i]);
	scanf("%d", &m);
	rep(i, 0, m) scanf("%d", &b[i].b), dis.pb(b[i].b);
	rep(i, 0, m) scanf("%d", &b[i].c), dis.pb(b[i].c);
	rep(i, 0, m) b[i].id = i + 1;

	sort(all(dis));
	dis.erase(unique(all(dis)), dis.end());

	rep(i, 0, n) {
		cnt[lower_bound(all(dis), a[i]) - dis.begin() + 1]++;
	}

	rep(i, 0, m) {
		b[i].tb = lower_bound(all(dis), b[i].b) - dis.begin() + 1;
		b[i].tc = lower_bound(all(dis), b[i].c)	- dis.begin() + 1;
	}
}

int Solve() {
	sort(b, b + m);
	return printf("%d\n", b[0].id);
}

// -------------------------------------------------- main -------------------------------------------------- //

int main ()
{
    //freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);

    //Pre();
    //int t; scanf("%d", &t); while (t--) {
    while (~scanf("%d", &n)) {
    //while(fgets(s, N, stdin)) {   // 注意 fgets 会读入换行符
        //if (n == 0) break;
        //static int kase = 0; printf("Case %d: ", ++kase);
        Init();
        Solve();
        //if (t) puts("");
    }
    return 0;
}