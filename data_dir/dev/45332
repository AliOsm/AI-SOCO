#pragma GCC optimize ("O3")
#pragma GCC target ("sse4")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;
using namespace std;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;

const int mxN = 1000010;
long long sum[mxN];

int main(int argc,char** argv) {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	int N,K;
	long long res = 0;
	cin>>N>>K;

	for(int i = 1;i <= N;i++) {
		sum[i] = sum[i-1] + (i-1) / (K-1) + 1;
		if(sum[i] >= mod) sum[i] -= mod;
	}

	vector<long long> a(N);
	vector<int> l(N),r(N);
	for(int i = 0;i < N;i++) cin>>a[i],l[i] = i,r[i] = i;
	{
		deque<int> mx;
		for(int i = 0;i < N;i++) {
			while(!mx.empty() && a[mx.back()] < a[i]) {
				r[mx.back()] = i;
				mx.pop_back();
			}
			mx.push_back(i);
		}
		while(!mx.empty()) r[mx.back()] = N, mx.pop_back();
	}
	{
		deque<int> mx;
		for(int i = N-1;i >= 0;i--) {
			while(!mx.empty() && a[mx.back()] <= a[i]) {
				l[mx.back()] = i;
				mx.pop_back();
			}
			mx.push_back(i);
		}
		while(!mx.empty()) l[mx.back()] = -1, mx.pop_back();
	}
	for(int i = 0;i < N;i++) {
		if(r[i] - l[i] - 1 < K) continue;
//		cerr<<i<<' '<<r[i]<<' '<<l[i]<<'\n';
//		cerr<<sum[r[i] - l[i] - K]<<'\n';
		res = (res + sum[r[i] - l[i] - K] * a[i]) % mod;
		if(i - l[i] > K) res = (res + (mod - sum[i - l[i] - K]) * a[i]) % mod/*, cerr<<"L: "<<i - l[i] - K<<' '<<sum[i - l[i] - K]<<'\n'*/;
		if(r[i] - i > K) res = (res + (mod - sum[r[i] - i - K]) * a[i]) % mod/*, cerr<<"R: "<<r[i] - i - K<<' '<<sum[r[i] - i - K]<<'\n'*/;
	}
	cout<<res<<'\n';
	return 0;
}
