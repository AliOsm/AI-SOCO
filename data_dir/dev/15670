#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int Max = 2e5+3;
set<int> adj[Max];
int n, m, k, res[Max], cntGoing[Max] = {0};
bool visited[Max] = {0};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> m >> k;
    int u, v;
    vector<pair<int, int> > edges(m);
    for(int i = 0; i < m; ++i) {
        cin >> u >> v;
        adj[u].insert(v);
        adj[v].insert(u);
        edges[i] = {u,v};
    }
    queue<int> q;
    int cntNodes = n;
    for(int i = 1; i <= n; ++i) {
        if(adj[i].size() < k) {
            visited[i] = true;
            cntNodes--;
            q.push(i);
        }
    }
    while(!q.empty()) {
        int node = q.front();
        q.pop();
        for(int to : adj[node]) {
            adj[to].erase(node);
        }
        for(int to : adj[node]) {
            if(!visited[to] && adj[to].size() < k) {
                q.push(to);
                visited[to] = true;
                cntNodes--;
            }
        }
        adj[node].clear();
    }
    res[m-1] = cntNodes;
    for(int i = m-1; i >= 1; --i) {
        u = edges[i].first;
        v = edges[i].second;
        if(visited[u] || visited[v]) {
            res[i-1] = cntNodes;
            continue;
        }
        adj[u].erase(v);
        adj[v].erase(u);
        queue<int> q;
        if(adj[u].size() < k) {
            visited[u] = true;
            cntNodes--;
            q.push(u);
        }
        if(adj[v].size() < k) {
            visited[v] = true;
            cntNodes--;
            q.push(v);
        }
        while(!q.empty()) {
            int node = q.front();
            q.pop();
            for(int to : adj[node]) {
                adj[to].erase(node);
            }
            for(int to : adj[node]) {
                if(!visited[to] && adj[to].size() < k) {
                    q.push(to);
                    visited[to] = true;
                    cntNodes--;
                }
            }
            adj[node].clear();
        }
        res[i-1] = cntNodes;
    }
    for(int i = 0; i < m; ++i) {
        cout << res[i] << '\n';
    }
    return 0;
}










