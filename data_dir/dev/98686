#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <iomanip>
#include <sstream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <stack>
#include <set>
#include <map>
#include <bitset>
#include <cstring>
#include <cctype>
#include <queue>
#include <deque>

using namespace std;

#define fi first
#define se second
#define pb push_back
#define mk make_pair
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)x.size()
#define SWS ios_base::sync_with_stdio(false)
#define rfile freopen("input.txt", "r", stdin)
#define wfile freopen("output.txt", "w", stdout)
#define files rfile; wfile

typedef long long ll;
typedef long double ld;

const int Z = (int)1e5 + 111;
const int inf = (int)1e9 + 111;
const ll llinf = (ll)1e18 + 5;
const int MOD = (int)1e9 + 7;

ll c[Z], dp[Z][2];
string s[Z], revS[Z];

int main() {
	//files;
	SWS;
	int n;
	cin >> n;
	for (int i = 1; i <= n; ++i) {
        cin >> c[i];
	}
	for (int i = 1; i <= n; ++i) {
        cin >> s[i];
        revS[i] = s[i];
        reverse(all(revS[i]));
	}
	dp[1][0] = 0;
	dp[1][1] = c[1];
	for (int i = 2; i <= n; ++i) {
        dp[i][0] = dp[i][1] = llinf;
        if (s[i] >= s[i-1]) dp[i][0] = min(dp[i][0], dp[i-1][0]);
        if (s[i] >= revS[i-1]) dp[i][0] = min(dp[i][0], dp[i-1][1]);
        if (revS[i] >= s[i-1]) dp[i][1] = min(dp[i][1], dp[i-1][0] + c[i]);
        if (revS[i] >= revS[i-1]) dp[i][1] = min(dp[i][1], dp[i-1][1] + c[i]);
	}
	ll res = min(dp[n][0], dp[n][1]);
	cout << (res == llinf ? -1 : res);
	return 0;
}
