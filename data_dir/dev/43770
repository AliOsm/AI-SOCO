#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

ll read_long() {
    ll ans = 0;
    char c;
    bool started = false;
    bool is_negative = false;
    while (true) {
        c = getchar();
        if ((c < '0' || c > '9') && c != '-' && !started) continue;
        if ((c < '0' || c > '9') && c != '-' && started) break;
        if (started) {
            ans = ans * 10;
        }
        started = true;
        if (c == '-') is_negative = true;
        else ans += c - '0';
    }
    if (is_negative) ans *= -1;
    return ans;
}

int n, a[300300];

int read() {
    ll x;
    scanf("%lld", &x);
    int ans = 0;
    while (x) {
        ans += (x % 2);
        x /= 2;
    }
    return ans;
}

bool ok(int mx, int sum) {
    int rest = sum - mx;
    if (mx > rest) return false;
    return sum % 2 == 0;
}

int cnt[2][300300];
int pr[300300];

int main(){

    scanf("%d", &n);
    for (int i = 0; i < n; i++) a[i] = read();

    ll ans = 0;

    for (int i = 0; i < n; i++) {
        multiset<int> s;
        int sum = 0;
        int mx = -inf;
        int cnt = 0;
        for (int j = i; j < n; j++) {
            sum += a[j];
            cnt++;
            mx = max(mx, a[j]);
            if (cnt >= 70) break;
            if (ok(mx, sum)) ans++;
        }
    }

    pr[0] = a[0] % 2;
    for (int i = 1; i < n; i++) {
        pr[i] = pr[i - 1];
        pr[i] += a[i] % 2;
        pr[i] %= 2;
    }

    cnt[pr[0]][0] = 1;
    for (int i = 1; i < n; i++) {
        cnt[0][i] = cnt[0][i - 1];
        cnt[1][i] = cnt[1][i - 1];
        cnt[pr[i] % 2][i]++;
    }

    for (int r = 0; r < n; r++) {
        int l = r - 70;
        if (l < -1) continue;
        int cur = (pr[r] == 0);
        if (l >= 0) cur += cnt[pr[r]][l];
        ans += cur;
    }

    cout << ans << endl;

    return 0;
}
