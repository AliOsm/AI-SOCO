#include <bits/stdc++.h>

using namespace std;

#define int long long
            
signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	#ifdef LOCAL
	assert(freopen("input.txt", "r", stdin));
	#endif
	
	int n, lv, cf, cm, m;
	cin >> n >> lv >> cf >> cm >> m;
	vector<pair<int, int>>	a(n);
	for (int i = 0; i < n; i++) {
		cin >> a[i].first;
		a[i].second = i;
	}		
	sort(a.begin(), a.end());
	vector<int> p(n + 1);
	p[0] = 0;
	for (int i = 1; i <= n; i++) {
		p[i] = a[i - 1].first + p[i - 1];
	}

	auto ch = [&](int mid, int lim) {
		int l = 0;
		int r = lv + 1;
		while (r - l > 1) {
			int m = (r + l) >> 1;
			int to = lower_bound(a.begin(), a.end(), make_pair(m, (int)-1)) - a.begin();
			to = min(to, lim);
			if (to * m - p[to] <= mid) {
				l = m;
			} else {
				r = m;
			}	 
		}	
		return l; 
	};
	int wr = -1;
	int ans = -1;
	int all = ch(m, n);
	cerr << "all " << all << endl;
	if (all == lv) {
	 	ans = n * cf + lv * cm;
		wr = n;	
	} else {
		ans = all * cm;
		wr = n;
	}
	int cl = m;
	vector<int> can(n);
	for (int i = n - 1; i >= 0; i--) {
		cl -= (lv - a[i].first);
		int suff = (n - i);
		if (cl >= 0) {
			int sm = ch(cl, n - suff);
			can[i] = sm;
			int cur = suff * cf + (sm) * cm;
			if (cur > ans) {
				ans = cur;
				wr = i;
			}
		}
	}
	vector<int> tot(n);
	{
		int cl = -1;
		if (wr == n) {
			cl = all;	
		} else {
			cl = can[wr];
		}
		for (int i = wr; i < n; i++) {
			tot[a[i].second] = lv;
		}
		for (int i = 0; i < wr; i++) {
			tot[a[i].second] = max(a[i].first, cl);
		}
	}	
	cout << ans << endl;
	for (auto t : tot) {
		cout << t << ' ';
	}
}

