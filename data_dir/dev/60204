/*
      HET PAGHADAR
      DA-IICT
      @HET262
*/
 
#include<bits/stdc++.h>
using namespace std;
 
typedef long double ld;
typedef long long ll;
 
typedef vector<int> vec;
#define INF LLONG_MAX
 
#define int long long int
#define P pair<ll,ll>
 
#define ff first
#define ss second
 
#define FAST ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
 
#define N 100005
#define MOD 1000000007
 
 
signed main()
{
      FAST;
      
      ll n,k;
      cin>>n>>k;
      
      ll a[k+1][2];
      vector<vec> g(n+1,vec());
      
      for(int i=1;i<=k;i++)
      {
            cin>>a[i][0]>>a[i][1];
            g[a[i][0]].push_back(i);
            g[a[i][1]].push_back(i);
      }
      
      bool visit[n+1]={0};
      bool guest[k+1]={0};
      ll count=0;
      
      for(int i=1;i<=k;i++)
      {
            queue<ll> Q;
            if(guest[i]==0 && visit[a[i][0]]==0 && visit[a[i][1]]==0)
                  Q.push(a[i][0]),  Q.push(a[i][1]),  guest[i]=1, count++,    visit[a[i][0]]=1, visit[a[i][1]]=1;
            
            while(!Q.empty())
            {
                  ll p=Q.front();
                  Q.pop();
                  
                  for(int j=0;j<g[p].size();j++)
                  {
                        ll tt=g[p][j];
                        
                        if(!guest[tt])
                        {
                              for(int kk=0;kk<2;kk++)
                              {
                                    if(!visit[a[tt][kk]])
                                    {
                                          count++;
                                          visit[a[tt][kk]]=1;
                                          guest[tt]=1;
                                          Q.push(a[tt][kk]);
                                    }
                              }
                        }
                  }
            }
      }
      
      cout<<k-count;
      
}







