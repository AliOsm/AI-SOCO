#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cassert>
#include <queue>
#include <bitset>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define pb push_back
#define fst first
#define snd second
#define SZ(x) ((int)x.size())
typedef long long ll;
#define dforn(i, n) for(int i = n - 1; i >= 0; i--)
const int MAXN=100100;
const double EPS=1e-11;

struct pt {
  double x,y,z;
  pt(double x, double y, double z):x(x),y(y),z(z){}
  pt(){}
  double norm2(){return *this**this;}
  double norm(){return sqrt(norm2());}
  bool operator==(pt p){return abs(x-p.x)<EPS&&abs(y-p.y)<EPS&&abs(z-p.z)<EPS;}
  pt operator+(pt p){return pt(x+p.x,y+p.y,z+p.z);}
  pt operator-(pt p){return pt(x-p.x,y-p.y,z-p.z);}
  pt operator*(double t){return pt(x*t,y*t,z*t);}
  pt operator/(double t){return pt(x/t,y/t,z/t);}
  double operator*(pt p){return x*p.x+y*p.y+z*p.z;}
  void in(){scanf("%lf%lf%lf",&x,&y,&z);}
  void out(){printf("%.15f %.15f %.15f\n",x,y,z);}
};
struct ln {
  pt p,pq;
  ln(pt p, pt q):p(p),pq(q-p){}
  ln(){}
  bool has(pt r){return dist(r)<EPS;}
  bool seghas(pt r){return has(r)&&(r-p)*(r-(p+pq))-EPS<0;}
  pt proj(pt r){return p+pq*((r-p)*pq/pq.norm2());}
  double dist(pt r){return (r-proj(r)).norm();}
};

int n,vp,vs;
pt pol[MAXN], h;

double calcTime(pt p){
  return (p-h).norm()/vp;
}

int main() {
  //~ freopen("input.in","r",stdin);
  while(scanf("%d",&n)>=1){
    forn(i,n+1){
      pol[i].in();
    }
    scanf("%d%d",&vp,&vs);
    h.in();
    
    double t=0.0;
    bool ok=false;
    forn(i,n){
      // checkear si puede llegar al segmento entre i e i+1
      double a=0.0,b=1.0,bestT=-1.0;int cnt=300;bool tudoOK=false;
      ln r(pol[i],pol[i+1]);
      //~ printf("i=%d => %.5f, harry tarda entre [%.5f, %.5f]\n",i,t,calcTime(r.p),calcTime(r.p+r.pq));
      while(cnt--){
        double c=(a+b)/2.0;
        pt p=r.p+r.pq*c;
        double tott=t+r.pq.norm()*c/vs;
        //~ printf(">> Comparando %.5f vs %.5f: %d\n", calcTime(p), tott, calcTime(p)<=tott);
        if(calcTime(p)<=tott+EPS){
          //~ printf("--> 1\n");
          tudoOK=true;
          bestT=tott;
          b=c;
        }
        else {
          //~ printf("--> 0\n");
          a=c;
        }
      }
      if(tudoOK){
        ok=true;
        puts("YES");
        printf("%.15f\n", bestT);
        pt p=r.p+r.pq*a;        
        p.out();
        break;
      }
      t += r.pq.norm()/vs;
    }
    if(!ok) puts("NO");
  }
  return 0;
}
