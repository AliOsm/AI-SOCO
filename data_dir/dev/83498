#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     std::begin(_obj), std::end(_obj)
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define ceilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define has(_obj, _val)               ((_obj).find(_val) != (_obj).end())
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifdef SHJ_LOCAL
    #define debug(_x)                 std::cerr << (#_x) << " = " << (_x) << '\n' << std::flush;
#else
    #define debug(_x)                 ;
#endif
#define endl                          "\n"
template<typename Tp>
inline void outarr(Tp _begin, Tp _end, const char* _delim = " ") {
    for (Tp current = _begin; current != _end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = int64_t;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
struct TEdge {
    int A;
    int B;
    int W;

    TEdge() = default;

    TEdge(int a, int b, int w)
        : A(a)
        , B(b)
        , W(w)
    {
    }
};

bool operator<(const TEdge& a, const TEdge& b) {
    return a.W < b.W;
}

bool operator==(const TEdge& a, const TEdge& b) {
    return a.W == b.W;
}

class TDsu {
public:

    TDsu(int n) {
        loop(n) {
            Prnt[i] = i;
            Rank[i] = 0;
        }
    }

    void Union(int u, int v) {
        int pU = Class(u);
        int pV = Class(v);
        if (pU != pV) {
            if (Rank[pV] < Rank[pU]) {
                swap(pV, pU);
            }
            Prnt[pU] = pV;
            if (Rank[pU] == Rank[pV]) {
                ++Rank[pV];
            }
        }
    }

    bool IsEqual(int v, int u) {
        return Class(v) == Class(u);
    }

    int Class(int v) {
        if (Prnt[v] == v) {
            return v;
        }
        return Prnt[v] = Class(Prnt[v]);
    }

private:

    int Rank[200000];
    int Prnt[200000];
};

TEdge edges[200000];

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    int n, m;
    cin >> n >> m;
    loop(m) {
        int a, b, w;
        cin >> a >> b >> w;
        edges[i] = {a - 1, b - 1, w};
    }
    TDsu dsu(n);
    sort(edges, edges + m);
    int ans = 0;
    for (int i = 0; i < m;) {
        if (dsu.IsEqual(edges[i].A, edges[i].B)) {
            ++i;
            continue;
        }
        int r = i + 1;
        int cur = 0;
        while (r < m && edges[i] == edges[r]) {
            if (!dsu.IsEqual(edges[r].A, edges[r].B)) {
                ++cur;
            }
            ++r;
        }
        dsu.Union(edges[i].A, edges[i].B);
        for (int j = i + 1; j < r; ++j) {
            if (!dsu.IsEqual(edges[j].A, edges[j].B)) {
                --cur;
                dsu.Union(edges[j].A, edges[j].B);
            }
        }
        ans += cur;
        i = r;
    }
    cout << ans << endl;

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}