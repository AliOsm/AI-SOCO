#include <bits/stdc++.h>
using namespace std;
#define mod 1000000007
#define oo 2000000000
const int N = 1010;
char grid[N][N] , grid2[N][N];
int n , m  , cur[N][N] , mx[N][N][4];
vector< pair< pair<int,int> , int > > v;

int main() {
   	scanf("%d%d",&n,&m);
   	for(int i=0;i<n;i++) for(int j=0;j<m;j++) grid2[i][j] = '.';
   	for(int i=0;i<n;i++)
   		scanf("%s",grid[i]);
   	for(int i = 0;i<n;i++){
   		for(int j=0;j<m;j++){
   			if(grid[i][j] != '*') continue;
   			mx[i][j][0] = (i == 0 ? 0 : mx[i-1][j][0]) + 1;
   		}
   	}
   	for(int i = n-1;i>=0;i--){
   		for(int j=0;j<m;j++){
   			if(grid[i][j] != '*') continue;
   			mx[i][j][1] = 1 + (i == n - 1 ? 0 : mx[i + 1][j][1]);
   		}
   	}
   	for(int j = 0;j<m;j++){
   		for(int i = 0 ;i < n;i++){
   			if(grid[i][j] != '*') continue;
   			mx[i][j][2] = 1 + (j == 0 ? 0 : mx[i][j - 1][2]);
   		}
   	}
   	for(int j = m - 1;j>=0;j--){
   		for(int i = 0 ;i < n;i++){
   			if(grid[i][j] != '*') continue;
   			mx[i][j][3] = 1 + (j == m - 1 ? 0 : mx[i][j + 1][3]);
   		}
   	}
   	for(int i=0;i<n;i++){
   		for(int j=0;j<m;j++){
   			cur[i][j] = min(mx[i][j][0],min(mx[i][j][1],min(mx[i][j][2],mx[i][j][3])));
   			if(cur[i][j] == 1) cur[i][j] = 0;
   			if(cur[i][j] == 0) continue;
   			v.push_back(make_pair(make_pair(i,j) , cur[i][j]));
   		}
   	}
   	int cnt = 0;
   	for(int i = 0;i<n;i++){
   		cnt = 0;
   		for(int j=0;j<m;j++){
   			cnt = max(cnt,cur[i][j]);
   			if(cnt > 0) 
   				grid2[i][j] = '*';
   			cnt--;
   		}
   	}
   	for(int i = 0;i < n;i++){
   		cnt = 0;
   		for(int j=m-1;j>=0;j--){
   			cnt = max(cnt,cur[i][j]);
   			if(cnt > 0) 
   				grid2[i][j] = '*';
   			cnt--;
   		}
   	}
   	for(int j = 0;j<m;j++){
   		cnt = 0;
   		for(int i = 0 ;i < n;i++){
   			cnt = max(cnt,cur[i][j]);
   			if(cnt > 0) 
   				grid2[i][j] = '*';
   			cnt--;
   		}
   	}
   	for(int j = 0;j < m;j++){
   		cnt = 0;
   		for(int i = n - 1 ;i>=0;i--){
   			cnt = max(cnt,cur[i][j]);
   			if(cnt > 0) 
   				grid2[i][j] = '*';
   			cnt--;
   		}
   	}
   	for(int i=0;i<n;i++){
   		for(int j=0;j<m;j++){
   			if(grid[i][j] != grid2[i][j]){
   				puts("-1");
   				return 0;
   			}
   		}
   	}
   	printf("%d\n",(int)v.size());
   	for(int i=0;i<(int)v.size();i++){
   		printf("%d %d %d\n",v[i].first.first + 1,v[i].first.second + 1,v[i].second - 1);
   	}
   	return 0;
}