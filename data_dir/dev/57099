/****** BISMILLAH HIR RAHMANIR RAHIM ******/

#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef unsigned int ul;
typedef unsigned long long ull;
typedef vector <int> vi;
typedef map<string,string> mss;
typedef map<int, vector<int> > mvii;
typedef map<int, int> mii;
typedef queue <int> qi;
typedef map <int, vector<string> > mvis;
typedef map <string, vector<int> > mvsi;
typedef vector <string> vs;
typedef pair <int, int> pii;
typedef vector<pair<int,int> > vpii;

// Order Statistic Tree



#define MP make_pair
#define SORT(a) sort (a.begin(), a.end())
#define REVERSE(a) reverse (a.begin(), a.end())
#define ALL(a) a.begin(), a.end()
#define PI acos(-1)
#define ms(x,y) memset (x, y, sizeof (x))
#define INF 2000000000
#define pb push_back
#define MAX 200002
#define debug cout<<"A"<<"\n"
#define prnt(a) cout<<a<<"\n"
#define mod 1000000007LL
#define FOR(i,a,b) for (int i=(a); i<(b); i++)
#define FORr(i,a,b) for (int i=(a); i>=b; i--)
#define itrALL(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)
#define lc ((node)<<1)
#define rc ((node)<<1|1)
#define VecPrnt(v) FOR(J,0,v.size()) cout<<v[J]<<" "; cout<<endl
#define endl "\n"
#define PrintPair(x) cout<<x.first<<" "<<x.second<<endl
#define ClearQ(x); while(!x.empty()) x.pop()
#define EPS 1e-9
#define ArrPrint(a,st,en) for(int J=st; J<=n; J++) cout<<a[J]<<" "; cout<<endl;
#define DBG(a) cout<< #a <<" --> "<<(a)<<endl;


/* Direction Array */

// int fx[]={1,-1,0,0};
// int fy[]={0,0,1,-1};
// int fx[]={0,0,1,-1,-1,1,-1,1};
// int fy[]={-1,1,0,0,1,1,-1,-1};

template <class T> inline T bigmod(T p,T e,T M)
{
    ll ret = 1;
    for(; e > 0; e >>= 1)
    {
        if(e & 1) ret = (ret * p) % M;
        p = (p * p) % M;
    }
    return (T)ret;
}

template <class T> inline T gcd(T a,T b)
{
    if(b==0)return a;
    return gcd(b,a%b);
}
template <class T> inline T modinverse(T a,T M)
{
    return bigmod(a,M-2,M);
}
template <class T> inline T lcm(T a,T b)
{
    a=abs(a);
    b=abs(b);
    return (a/gcd(a,b))*b;
}
template <class T, class X> inline bool getbit(T a, X i)
{
    T t=1;
    return ((a&(t<<i))>0);
}
template <class T, class X> inline T setbit(T a, X i)
{
    T t=1;
    return (a|(t<<i));
}
template <class T, class X> inline T resetbit(T a, X i)
{
    T t=1;
    return (a&(~(t<<i)));
}

inline ll getnum()
{
    char c = getchar();
    ll num,sign=1;
    for(; c<'0'||c>'9'; c=getchar())if(c=='-')sign=-1;
    for(num=0; c>='0'&&c<='9';)
    {
        c-='0';
        num = num*10+c;
        c=getchar();
    }
    return num*sign;
}

inline ll power(ll a, ll b)
{
    ll multiply=1;
    FOR(i,0,b)
    {
        multiply*=a;
    }
    return multiply;
}

/****** END OF HEADER ******/

const ll N=200005;
const ll oo=1e9+7;
ll lazy[20][3*N];
ll tree[20][3*N];

void updateRange(ll *tree,ll *lazy,ll node, ll start, ll end, ll l, ll r) // CALL UPDATERANGE(1,1,N)
{
    if(lazy[node] %2)
    {
        // This node needs to be updated
        ll range= (end - start + 1);
        tree[node] =range-  tree[node];   // Update it

        if(start != end)
        {
            lazy[node*2] ++;                  // Mark child as lazy
            lazy[node*2+1] ++;                // Mark child as lazy
        }
        lazy[node] = 0;                                  // Reset it
    }
    if(start > end or start > r or end < l)              // Current segment is not within range [l, r]
        return;
    if(start >= l and end <= r)
    {
        // Segment is fully within range
        ll range= (end - start + 1);
        tree[node] =range-  tree[node];
        if(start != end)
        {
            // Not leaf node
            lazy[node*2] ++;
            lazy[node*2+1] ++;
        }
        return;
    }
    ll mid = (start + end) / 2;
    updateRange(tree,lazy,node*2, start, mid, l, r);        // Updating left child
    updateRange(tree,lazy,node*2 + 1, mid + 1, end, l, r);   // Updating right child
    tree[node] = tree[node*2] + tree[node*2+1];        // Updating root with max value
}

ll queryRange(ll *tree,ll *lazy,ll node, ll start, ll end, ll l, ll r)
{
    if(start > end or start > r or end < l)
        return 0;         // Out of range
    if(lazy[node] %2)
    {
        // This node needs to be updated
        ll range= (end - start + 1);
        tree[node] =range-  tree[node];   // Update it

        if(start != end)
        {
            lazy[node*2] ++;                  // Mark child as lazy
            lazy[node*2+1] ++;                // Mark child as lazy
        }
        lazy[node] = 0;                                  // Reset it
    }
    if(start >= l and end <= r)             // Current segment is totally within range [l, r]
        return tree[node];
    ll mid = (start + end) / 2;
    ll p1 = queryRange(tree,lazy,node*2, start, mid, l, r);         // Query left child
    ll p2 = queryRange(tree,lazy,node*2 + 1, mid + 1, end, l, r); // Query right child
    return (p1 + p2);
}

int main()
{
    ll n;
    cin>>n;
    for(ll i=1; i<=n; i++)
    {
        ll a;
        cin>>a;
        for(ll j=0; j<20; j++)
        {
            if(a&(1<<j))
            {
                updateRange(tree[j],lazy[j],1,1,n,i,i);
            }
        }
    }
    ll m;
    cin>>m;
    while(m--)
    {
        ll t;
        cin>>t;
        if(t-1)
        {
            ll l,r,x;
            cin>>l>>r>>x;
            for(ll j=0; j<20; j++)
            {
                if(x&(1<<j))
                {
                    updateRange(tree[j],lazy[j],1,1,n,l,r);
                }
            }
        }
        else
        {
            ll l,r;
            cin>>l>>r;
            ll ans=0,gun=1;
            for(ll j=0; j<20; j++)
            {
                ans+=queryRange(tree[j],lazy[j],1,1,n,l,r)*gun;
                gun*=2;
            }
            cout<<ans<<endl;
        }
    }

    // cout<<"Case "<<++cs<<": "<<(ans?"yes":"no")<<endl;

}
