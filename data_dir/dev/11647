/* Author haleyk10198 */
/* �@��:  haleyk10198 */
/* CF handle: haleyk100198*/
/* FOR ACM-ICPC WF*/
#include <bits/stdc++.h>

using namespace std;
using ll = long long;
using vi = vector<int>;
using vvi = vector<vi>;
using pii = pair<int, int>;

#define pb push_back

constexpr auto MOD = 998244353LL;
constexpr auto LINF = (1LL << 60);
constexpr auto INF = 2147483647LL;
constexpr auto PI = 3.1415926535897932384626433;
constexpr auto EPS = 1E-9;

template<typename T1, typename T2>
ostream &operator<<(ostream &out, const pair<T1, T2> p) {
    out << p.first << ' ' << p.second;
    return out;
}

template<typename T1, typename T2>
istream &operator>>(istream &in, pair<T1, T2> &p) {
    in >> p.first >> p.second;
    return in;
}

template<typename T>
istream &operator>>(istream &in, vector<T> &v) {
    for (auto &x: v)
        in >> x;
    return in;
}

template<typename T>
ostream &operator<<(ostream &out, vector<T> v) {
    for (int i = 0; i < v.size(); i++)
        out << v[i] << (i + 1 == v.size() ? '\n' : ' ');
    out.flush();
    return out;
}

#if __cplusplus < 201703L
#define mp make_pair
#endif

constexpr int MAXNCK = 1000010;

ll f[MAXNCK], c[MAXNCK];

ll nck(ll n, ll k){
    if(n < k) return 0;
    ll ret = (f[n]*c[k])%MOD;
    return (ret*c[n-k])%MOD;
}

ll npk(ll n, ll k){
    if(n < k) return 0;
    return f[n]*c[n-k]%MOD;
}

ll pwr(ll b, ll e){
    b %= MOD;
    if(e == 0) return 1;
    if(e == 1) return b;
    return (pwr(b*b, e/2)*pwr(b, e%2))%MOD;
}

void init(){
    f[0] = c[0] = 1;
    for(int i = 1; i < MAXNCK; i++) (f[i] = f[i-1]*i) %= MOD;
    c[MAXNCK-1] = pwr(f[MAXNCK-1], MOD-2);
    for(int i = MAXNCK-2; i; i--) (c[i] = c[i+1]*(i+1)) %= MOD;

    return;
}

int n;
ll res;

int main() {
#ifdef LOCAL
    freopen("../input.txt", "r", stdin);
//		freopen("output.txt","w",stdout);
    freopen("../debug.txt", "w", stderr);
#endif
    ios_base::sync_with_stdio(false);

    init();
    cin >> n;

    res = f[n];
    for(int i = 1; i < n; i++){
        res += f[i]*nck(n, i)%MOD*(f[n-i]-1);
        res %= MOD;
    }

    cout << res << endl;

    return 0;
}
