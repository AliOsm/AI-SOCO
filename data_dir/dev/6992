#include <bits/stdc++.h>
using namespace std;

const int N = 1e6 + 100;

int a[N];
int last[N], first[N];
vector<int> add[N], sub[N];
int ans[N];

int tree[4*N]; /// be careful with overflow

void upd (int cn , int b , int e , int i, int add) {
    if (b > i or e < i) {
        return;
    }
    int lc = 2*cn , rc = lc + 1 , mid = (b+e)/2;
    if (b >= i and e <= i) {
        tree[cn] = add;
        return;
    }
    upd(lc,b,mid,i,add);
    upd(rc,mid+1,e,i,add);
    tree[cn] = max(tree[lc],tree[rc]);
}

int query (int cn , int b , int e , int i ,int j) {
    if (b > j or e < i) return 0;
    if (b >= i and e <= j) {
        return tree[cn];
    }
    int lc = 2*cn, rc = lc + 1, mid = (b+e)/2;
    return max(query(lc,b,mid,i,j), query(rc,mid+1,e,i,j));
}

int main() {
    // freopen("in.txt", "r", stdin);
    ios::sync_with_stdio(0);
    cin.tie(0);

    int q;
    cin >> q;
    while(q--) {
        int n;
        cin >> n;
        set<int> s;
        for(int i = 1; i <= n; i++) {
            cin >> a[i];
            s.insert(a[i]);
        }
        for(int i = 1; i <= n; i++) {
            last[a[i]] = i;
        }
        for(int i = n; i >= 1; i--) {
            first[a[i]] = i;
        }
        for(int x : s) {
            add[first[x]].push_back(x);
            sub[last[x]].push_back(x);
        }
        for(int i = 1; i <= n; i++) {
            for(int x : add[i]) {
                auto it = s.lower_bound(x);
                if(it == s.begin()) ans[x] = 1;
                else {
                    it--;
                    int y = *it;
                    ans[x] = query(1,1,n,y,y) + 1;
                }
            }
            for(int x : sub[i]) {
                upd(1,1,n,x, ans[x]);
            }
        }
        int res = 0;
        for(int i = 1; i <= n; i++) {
            res = max(res, ans[i]);
        }
        cout << s.size()-res << "\n";
        for(int i = 1; i <= n; i++) {
            last[i] = first[i] = 0;
            add[i].clear();
            sub[i].clear();
            ans[i] = 0;
        }
        for(int i = 0; i <= 4*n; i++) tree[i] = 0;
    }

    return 0;
}
