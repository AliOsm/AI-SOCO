#pragma comment(linker, "/STACK:16777216")

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>

using namespace std;

typedef long long LL;
typedef vector<int> vint;
typedef vector<vint> vvint;

const int MAX = 20;

int s[1 << 17][MAX];
int a[1 << 17];
int have[1 << MAX];
int n;

int main()
{
	int p[MAX];
	memset(s, 0, sizeof(s));
	memset(have, 0, sizeof(have));
	scanf("%d", &n);
	for(int i = 0; i < n; ++i)
		scanf("%d", &a[i]);
	a[n] = (1 << MAX) - 1;
	for(int i = 0; i < n; ++i)
		for(int j = 0; j < MAX; ++j)
			if (a[i] & (1 << j))
				s[i + 1][j] = 1;
	for(int i = 1; i <= n; ++i)
		for(int j = 0; j < MAX; ++j)
			s[i][j] += s[i - 1][j];
	memset(p, 0, sizeof(p));
	for(int i = 0; i < n; ++i)
	{
		have[a[i]] = 1;
		for(int j = 0; j < MAX; ++j)
		{
			if (a[i] & (1 << j))
				continue;
			while (p[j] < i || !(a[p[j]] & (1 << j)))
				p[j]++;
		}
		for(int j = 0; j < MAX; ++j)
		{	 
			if (i <= p[j] && p[j] < n)
			{
				int t = 0;
				for(int k = 0; k < MAX; ++k)
				{
					int cur = s[p[j] + 1][k] - s[i][k];
					t |= ((cur > 0) << k);
				}
				have[t] = 1;
			}
		}
	}
	int res = 0;
	for(int i = 0; i < 1 << 20; ++i)
		res += have[i];
	printf("%d\n", res);
	return 0;
}