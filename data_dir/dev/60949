#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
#define sc(a) scanf("%d", &a)
#define sc2(a, b) scanf("%d%d", &a, &b)
#define sc3(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define scs(a) scanf("%s", a)
#define pri(x) printf("%d\n", x)
#define prie(x) printf("%d ", x)
#define mp make_pair
#define pb push_back
#define BUFF ios::sync_with_stdio(false);
#define db(x) cerr << #x << " == " << x << endl
typedef long long int ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef vector<ii> vii;
typedef vector< vii> vvii;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3fll;
const ld pi = acos(-1);
const int MOD = 1e9 + 7;
const int N=2e5+10;
vi g[N];
int dist1[N],dist2[N];
int n,x;
queue<int> q;
int main()
{
	sc2(n,x);
	for(int i=1;i<n;i++){
		int u,v;
		sc2(u,v);
		g[u].pb(v);
		g[v].pb(u);
	}
	q.push(1);
	memset(dist1,INF,sizeof(dist1));
	memset(dist2,INF,sizeof(dist2));
	dist1[1]=0;
	while(!q.empty()){
		int u =q.front();
		q.pop();
		for(int v: g[u]) if(dist1[v]==INF) dist1[v]=dist1[u]+1, q.push(v);
	}
	dist2[x]=0;
	q.push(x);
	while(!q.empty()){
		int u =q.front();
		q.pop();
		for(int v: g[u]) if(dist2[v]==INF) dist2[v]=dist2[u]+1, q.push(v);
	}
	int r=0;
	for(int i=1;i<=n;i++){
		if(dist2[i] < dist1[i]) {
			r=max(r,2*dist1[i]);
		}
	}
	pri(r);
	return 0;
}
