#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>
#include <tuple>
#include <chrono>

using namespace std;
using ll = long long;
using ull = unsigned long long;
const int oo = numeric_limits<int>::max() / 2;
mt19937 rnd(std::chrono::steady_clock::now().time_since_epoch().count());

const int N = 1010;
bool used[N];
int order[N];
int n, ptr = 0;

bool dfs(int v) {
  used[v] = true;
  order[ptr++] = v;
  if (ptr == n) {
    return true;
  }

  int lo = std::max(1, v - 4);
  int hi = std::min(n, v + 4);
  for(int i = lo; i <= hi; ++i) {
    if (std::abs(i - v) < 2) {
      continue;
    }
    if (used[i]) {
      continue;
    }
    if (dfs(i)) {
      return true;
    }
  }
  used[v] = false;
  --ptr;
  return false;
}

void solve() {
  cin >> n;
  if (n <= 3) {
    cout << -1 << endl;
    return;
  }
  if (n == 4) {
    cout << "3 1 4 2" << endl;
    return;
  }
  std::fill(used, used + N, false);
  ptr = 0;
  if (dfs(n)) {
    for(int i = 0; i < n; ++i) {
      std::cout << order[i] << " ";
    }
  } else {
    std::cout << -1;
  }
  std::cout << std::endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  int T;
  cin >> T;
  for(int i = 0; i < T; ++i) {
    solve();
  }

  return 0;
}
