#include<bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 

#define ll long long

#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) memset(ar, val, sizeof(ar))
#define fill0(ar) fill((ar), 0)
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld long double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef pair<int, int> ii;
typedef pair<ii, int> iii;
typedef vector<ii> vii;
typedef vector<int> vi;

#define INF 1000000000000000000
#define PI 3.14159265358979323846L

ll d[1000001];
ll s[1500000];

void preprocess()
{
	for(ll i=1; i<=1000000; i++)
	{
		for(ll j=i; j<=1000000; j=j+i)
			d[j]++;
	}
}

ll getSum(ll l, ll r, ll il, ll ir, ll i)
{
    if(l>=il && r<=ir)
        return s[i];
    else if(l>ir || r<il)
        return 0;
    else
    {
        ll mid = (l+r)/2;
        return getSum(l,mid,il,ir,2*i) + getSum(mid+1,r,il,ir,2*i+1);
    }
}

void updateSum(ll l, ll r, ll i, ll diff, ll index)
{
    if(i<l || i>r)
        return;

    if(l==r)
    {
    	s[index] = diff;
        return;
    }
    ll mid = (l+r)/2;

    updateSum(l,mid,i,diff,2*index);
    updateSum(mid+1,r,i,diff,2*index+1);
    s[index] = s[2*index] + s[2*index+1];
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    preprocess();
    ll n,m2;
    scanf("%lld",&n);
    scanf("%lld",&m2);

    ll a[n+1];
    fr(i,1,n)
    {
    	scanf("%lld",&a[i]);
    }

    map<ll, ll> m;
    fr(i,1,n)
    {
    	if(a[i]!=d[a[i]] && a[i]!=d[a[i]])
    		m[i]++;
    }

    fr(i,1,n)
    {
    	updateSum(1,n,i,a[i],1);
    }

    while(m2--)
    {
    	ll t,l,r;
    	scanf("%lld",&t);
    	scanf("%lld",&l);
    	scanf("%lld",&r);

    	if(t==1)
    	{
    		auto it = m.lower_bound(l);
    		if(it!=m.end())
    		{
    			vector<ll> er;
    			vector<ll> upd;
    			for(it=it; it!=m.end(); it++)
    			{
    				if(it->first>r)
    					break;
    				a[it->first] = d[a[it->first]];
    				upd.pb(it->first);

    				if(a[it->first]==d[a[it->first]])
    					er.pb(it->first); 
    			}

    			rep(i,upd.size())
    			{
    				updateSum(1,n,upd[i],a[upd[i]],1);
    			}
    			rep(i,er.size())
    			{
    				m.erase(er[i]);
    			}
    		}
    	}
    	else
    	{
    		printf("%lld\n", getSum(1,n,l,r,1));
    		// cout << getSum(1,n,l,r,1) << endl;
    	}
    }
}
