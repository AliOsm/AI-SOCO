#include <bits/stdc++.h>
#define Tree int h,int l,int r
#define Left (h<<1),l,(l+r)>>1
#define Right ((h<<1)|1),((l+r)>>1)+1,r
#define ll long long
#define pb push_back
#define F first
#define S second
using namespace std;
const int N=1e5+5;
ll ans,g[4*N],mod=1e9+7,x;
bool f[N];
ll timer,in[N],out[N],A,B,r,u,n,p[N];
vector < pair < ll , pair < ll , ll > > > v[N];

int P(int x) {
	if (p[x]==x) return x;
	return p[x]=P(p[x]);
}

void Uni(int a,int b,ll x) {
	A=P(a);
	B=P(b);
	v[B].pb({A,{a,x}});
	f[A]=1;
	p[A]=B;
}

void Upd(Tree,int L,int R,ll dl) {
	if (r<L || R<l) return;
	if (L<=l && r<=R) { g[h]=(g[h]+dl)%mod; return ; }
	Upd(Left,L,R,dl),Upd(Right,L,R,dl);
}

ll Get(Tree,int id) {
	if (r<id || id<l) return 0;
	if (l==id && r==id) return g[h];
	return (Get(Left,id)+Get(Right,id)+g[h])%mod;
} 

void Dfs(int x) {
	in[x]=++timer;
	for (int i=0; i<v[x].size(); i++) {
		ll to=v[x][i].F,cost=v[x][i].S.S,Qu=v[x][i].S.F;
		Dfs(to);
		ll edge=(Get(1,1,n,in[Qu])+cost)%mod;
		ans=(ans+edge)%mod;
		Upd(1,1,n,in[to],out[to],edge);
	}
	out[x]=timer;
}

main () {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cin>>n;
	
	for (int i=1; i<=n; i++)
		p[i]=i;
	
	for (int i=1; i<=n; i++) {
		cin>>r;
		for (int j=1; j<=r; j++) {
			cin>>u>>x;
			Uni(u,i,x);	
		}
	}

	for (int i=1; i<=n; i++) 
		if (!f[i]) Dfs(i);

	cout<<(ans+mod)%mod<<endl;
}