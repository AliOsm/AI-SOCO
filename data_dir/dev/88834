
 #include <iostream>
#include <bits/stdc++.h>
#include <string>
#include <bitset>
using namespace std;

#define pb push_back
#define ull unsigned long long
#define ll long long
#define F first
#define S second
#define PI acos(-1)
#define EPS 1e-9
#define BASE 31ll
#define BASE2 53ll
#define ld double
#define MAX 1000000000
#define NIL 0
#define INF 1e15
#define infi 1000000000
#define rd(a) scanf("%d",&a)
#define rd2(a,b) scanf("%d %d",&a,&b)
#define rd3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define rdll(a) scanf("%I64d",&a)
#define sz(a) (int) a.size()
#define lp(i,a,n) for(int i=(a); i<=(n) ; ++i)
#define lpd(i,n,a) for(int i=(n); i>=(a) ; --i)
#define pi acos(-1)
#define lc (x << 1)
#define rc (x << 1 | 1)
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep
#define angle(a)                (atan2((a).imag(), (a).real()))
#define X real()
#define Y imag()
#define vec(a,b)                ((b)-(a))
#define vvi vector<vector<int>>
#define f first
#define s second
#define clr(a,b) memset(a,b,sizeof a)


typedef complex<double>CX;
typedef pair<int,int>ii;
typedef pair<ii,ll>tri;
typedef pair<vector<int>,int>vii;
typedef pair<int, int> pii;
typedef pair<ii,ii> line;
typedef pair<double,double>point;
typedef pair<ll, ll> pll;
typedef vector<int> vi;

const int N=400005;
const int M=22;

ll mod=(1e9+7);
int gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
bool is_vowel(char c){if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u')return 1;return 0;}
ll extended_euclidean(ll a,ll b,ll &x,ll &y){if(b==0){x=1;y=0;return a;}ll g = extended_euclidean(b,a%b,y,x);y -= (a/b)*x;return g;}
ll power(ll base,ll p){if(p==1)return base;if(!p)return 1ll;ll ret=power(base,p/2);ret*=ret;ret%=mod;if(p&1)ret*=base;return ret%mod;}


int trie[1005000][27];
bool leaf[1005000][27];
int cur=1;
void add(string s){
   int node=0;
   lp(i,0,(int)s.length()-1){
       int to=s[i]-'a';
       if(trie[node][to]==-1){
        trie[node][to]=cur++;
       }
       if(i+1==(int)s.length())leaf[node][to]=1;
       node=trie[node][to];
   }
}
int dp[10005];
string s;
int solve(int idx){
  if(idx==s.length())return 1;
  if(dp[idx]!=-1)return dp[idx];
  int ret=0,node=0;
  lp(i,idx,(int)s.length()-1){
       int to=s[i]-'a';
       if(trie[node][to]==-1)break;
       if(leaf[node][to]){
         ret|=solve(i+1);
       }
       if(ret)break;
       node=trie[node][to];
  }
  return dp[idx]=ret;
}
map<string,string>mp;
void get(int idx){
   if(idx==s.length())return;
   string x="";
   int node=0;
   lp(i,idx,(int)s.length()-1){
       int to=s[i]-'a';
       x+=s[i];
       if(leaf[node][to]&&solve(i+1)){
           reverse(x.begin(),x.end());
           cout<<mp[x]<<' ';
              get(i+1);
              return;
       }
       node=trie[node][to];
  }
}
int main(){
    // freopen("test.in","r",stdin);
     memset(dp,-1,sizeof(dp));
     memset(trie,-1,sizeof(trie));
     int n;
     rd(n);
     cin>>s;
     int m;
     rd(m);
     lp(i,1,m){
        string a;
        cin>>a;
        string t=a;
        lp(j,0,(int)a.length()-1)a[j]=tolower(a[j]);
        mp[a]=t;
        reverse(a.begin(),a.end());
        add(a);
     }
     solve(0);
     get(0);
    return 0;
}
