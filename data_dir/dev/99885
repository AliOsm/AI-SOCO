#include<bits/stdc++.h>
using namespace std;

const int N = 1e5+7;
vector<int> adj[N];
int col[N];

void dfs(int u, int c) {
    col[u] = c;
    for (int v: adj[u]) {
        if (col[v]) continue;
        dfs(v, 3-c);
    }
}
int ans[N];
int nocon[N];
vector<int> in[N];
bool done[N];

int main( ) {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int n, m;
    cin>>n>>m;

    for (int i=1; i<=m; i++) {
        int u, v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    for (int i=1; i<=n; i++) {
        if (col[i]) continue;
        dfs(i, 1);
    }

    vector<int> c1, c2;
    for (int i=1; i<=n; i++) {
        if (col[i] == 1)        c1.push_back(i);
        else                    c2.push_back(i);
    }

    bool found = false;
    int cnt = 0;

    if (c1.size()%3 != 0) {
        if (c1.size()%3==2)     swap(c1, c2);
        assert(c1.size()%3==1);
        assert(c2.size()%3==2);

        for (int u: c1) {
            for (int x: c2)         done[x] = 0;
            for (int v: adj[u])     done[v] = 1;

            for (int x: c2) {
                if (done[x])        continue;
                if (nocon[u]) {
                    ans[u] = ans[nocon[u]] = ans[x] = 1;
                    found = true;
                    cnt = 1;
                    break;
                }
                nocon[u] = x;
            }
            if (found) break;
        }

        if (!found) {
            for (int x: c1) {
                if (nocon[x] == 0)      continue;
                in[nocon[x]].push_back(x);
            }

            int a = 0, b = 0;
            for (int x: c2) {
                if (in[x].size() < 2)      continue;
                if (a == 0)         a = x;
                else if (b == 0)    b = x;
            }

            if (b) {
                found = true;
                ans[a] = ans[in[a][0]] = ans[in[a][1]] = 1;
                ans[b] = ans[in[b][0]] = ans[in[b][1]] = 2;
                cnt = 2;
            }
        }
    }

    if (c1.size() %3 && !found) {
        cout<<"NO"<<endl;
        return 0;
    }

    int cur = 0;
    for (int x: c1) {
        if (ans[x])         continue;
        if (cur == 0)       ++cnt;
        ans[x] = cnt;
        cur = (cur+1)%3;
    }

    for (int x: c2) {
        if (ans[x])         continue;
        if (cur == 0)       ++cnt;
        ans[x] = cnt;
        cur = (cur+1)%3;
    }

    cout<<"YES"<<endl;
    for (int i=1; i<=n; i++)
        cout<<ans[i]<<" ";
}
