#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

#define PB push_back
//#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)

int dx[] = {0, 0, +1, -1};
int dy[] = {+1, -1, 0, 0};
char ch[] = {'R', 'L', 'D', 'U'};
char ulta[] = {'L', 'R', 'U', 'D'};

int n;
int x[1005][1005], y[1005][1005];
char ans[1005][1005];

void bfs()
{
	queue<pii> q;
	bool vis[1005][1005];
	memset( vis, 0, sizeof(vis) );
	for( int i = 1; i <= n; ++i ) {
		for( int j = 1; j <= n; ++j ) {
			if( x[i][j] == i && y[i][j] == j ) {
				q.push( MP(i, j) );
				vis[i][j] = 1;
				ans[i][j] = 'X';
			}
		}
	}
	while( !q.empty() ) {
		pii p = q.front();
		q.pop();
		for( int d = 0; d < 4; ++d ) {
			int nr = p.F+dx[d], nc = p.S+dy[d];
			if( nr < 1 || nr > n || nc < 1 || nc > n ) continue;
			if( vis[nr][nc] ) continue;
			if( x[p.F][p.S] != x[nr][nc] || y[p.F][p.S] != y[nr][nc] ) continue;
			vis[nr][nc] = 1;
			q.push( MP(nr, nc) );
			ans[nr][nc] = ulta[d];
		}
	}
	for( int i = 1; i <= n; ++i ) {
		for( int j = 1; j <= n; ++j ) {
			if( ans[i][j] == '-' ) {
				//dbg(i, j);
				cout << "INVALID" << endl;
				exit(0);
			}
		}
	}
	cout << "VALID" << endl;
	for( int i = 1; i <= n; ++i ) {
		for( int j = 1; j <= n; ++j ) cout << ans[i][j]; cout << endl;
	}
}

int main()
{
	optimize();
	cin >> n;
	for( int i = 1; i <= n; ++i )
		for( int j = 1; j <= n; ++j ) ans[i][j] = '-';
	for( int i = 1; i <= n; ++i ) {
		for( int j = 1; j <= n; ++j ) {
			cin >> x[i][j] >> y[i][j];
		}
	}
	for( int i = 1; i <= n; ++i ) {
		for( int j = 1; j <= n; ++j ) {
			if( x[i][j] == -1 && y[i][j] == -1 ) {
				bool ok = 0;
				for( int d = 0; d < 4; ++d ) {
					int nr = i+dx[d], nc = j+dy[d];
					if( nr < 1 || nr > n || nc < 1 || nc > n ) continue;
					if( x[nr][nc] == -1 && y[nr][nc] == -1 ) {
						ok = 1;
						ans[i][j] = ch[d];
						break;
					}
				}
				if(!ok) {
					cout << "INVALID" << endl;
					return 0;
				}
			}
		}
	}
	bfs();
}





















