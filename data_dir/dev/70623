
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <array>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
#include <bitset>
#include <complex>
using namespace std;
#define rep(i, n) for (int (i) = 0; (i) < (n); (i) ++)
#define rep1(i, n) for (int (i) = 1; (i) <= (n); (i) ++)
#define FOR(i, a, b) for (int (i) = (a); (i) <= (b); (i)++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout<<#a<<" :";FOR(i123,x,y)cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int((x).size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

int N;

pair<pair<int,int>,int> A[100100];
int getinner(pair<pair<int,int>,int> mypair) {
  return mypair.first.second;
}
int getouter(pair<pair<int,int>,int> mypair) {
  return mypair.first.first;
}
int getheight(pair<pair<int,int>,int> mypair) {
  return mypair.second;
}

// This acts as if this was an array A of length N
// (index = 1, 2, ..., N) that supports
// 1) sum(i) returns A[1] + A[1] + ... + A[i]
// 2) add(i, x) => A[i] += x;
// Each operation takes O(log N)
struct BinaryIndexedTree{
  int N;
  vector<long long> v;
  BinaryIndexedTree(int N) : N(N), v(N + 1) {}

  long long mx(int i) {
    long long s = 0;
    for (;i > 0; s = max(s, v[i]), i -= i & -i);
    return s;
  }
  void set(int i, long long x) {
    for (; i <= N; v[i] = max(v[i], x), i += i & -i);
  }
};

int main() {
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0); cin.tie(0);
  cin >> N;
  for (int i = 1; i <= N; i++) {
    cin >> A[i].first.second >> A[i].first.first >> A[i].second;
  }
  sort(A + 1, A + N + 1);
  BinaryIndexedTree bit(N);
  for (int i = 1; i <= N; i++) {
    // Find the smallest j < i such that getouter(A[j]) > getinner(A[i]).
    ll mx = 0;
    if (i >= 2 && getouter(A[i - 1]) > getinner(A[i])) {
      int good = i - 1;
      int bad = 0;
      while (bad + 1 < good) {
        int m = (good + bad) / 2;
        if (getouter(A[m]) > getinner(A[i])) {
          good = m;
        } else {
          bad = m;
        }
      }
      mx = bit.mx(N - good + 1);
    }
    bit.set(N - i + 1, mx + getheight(A[i]));
  }
  cout << bit.mx(N) << endl;
}

