// #pragma GCC optimize ("-O2")
// #pragma GCC optimize ("unroll-loops")
#include<bits/stdc++.h>
using namespace std;
#define F first
#define S second
#define pb push_back
#define MP make_pair
#define ALL(x) begin(x),end(x)
#define SZ(x) ((int)(x).size())
typedef long long LL;
typedef double DB;
typedef long double LDB;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
// #define IOS ios_base::sync_with_stdio(0); cin.tie(0)
const int MXN = (int)1e3 + 7;
const int mod = (int)1e9 + 7;
int dp[MXN][MXN*2][2];
int num[MXN][MXN*2][2];
int add(int v1, int v2) {
	v1 += v2;
	if (v1 >= mod) v1 -= mod;
	return v1;
}
int main() {
	int n; scanf("%d", &n);
	dp[0][0][0] = 1;
	num[0][0][0] = 0;
	for (int i = 0; i < 2*n; i++) {
		for (int j = 0; j <= n; j++) {
			if (j) {
				dp[j+1][i+1][0] = add(dp[j+1][i+1][0], dp[j][i][1]);
				dp[j-1][i+1][0] = add(dp[j-1][i+1][0], dp[j][i][1]);
				
				dp[j+1][i+1][0] = add(dp[j+1][i+1][0], dp[j][i][0]);
				dp[j-1][i+1][1] = add(dp[j-1][i+1][1], dp[j][i][0]);
				num[j-1][i+1][1] = add(num[j-1][i+1][1], dp[j][i][0]);
			} else {
				dp[j+1][i+1][0] = add(dp[j+1][i+1][0], dp[j][i][1]);
				
				dp[j+1][i+1][1] = add(dp[j+1][i+1][1], dp[j][i][0]);
				num[j+1][i+1][1] = add(num[j+1][i+1][1], dp[j][i][0]);
			}
		}
	}
	int ans = 0;
	for (int i = 0; i <= 2*n; i++) {
		for (int j = 0; j <= n; j++) {
			if (2*n - i >= j) {
				ans = add(ans, num[j][i][0]);
				ans = add(ans, num[j][i][1]);
			}
		}
	}
	printf("%d\n", ans);
	return 0;
}
