#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>
using namespace std;

typedef long long ll;
int main(){
  ll a,b,c,d;
  cin>>a>>b>>c>>d;
    set<ll> s;
    map<ll,ll> gr;
    int hi = 1000000005;
    ll n;
    for(n=1;;n++)
        {
        ll cur = n;
        cur = (cur * (n-1))/2;
        if(cur > hi)break;
        s.insert(cur);
        gr[cur] = n;
    }
    if(s.find(a)==s.end())return printf("Impossible\n")*0;
    if(s.find(d)==s.end())return printf("Impossible\n")*0;
    ll x,y;
    x = gr[a];
    y = gr[d];
     int i;
    if(a==0 && b==0 && c==0)
        {
        for(i=0;i<y;i++)printf("1");
        return 0;
    }
    if(b==0 && c==0 && d==0)
        {
        for(i=0;i<x;i++)printf("0");
        return 0;
    }
   // printf("x and y are %lld %lld\n",x,y);
    if(x*y!=b+c)return printf("Impossible\n")*0;
   // printf("we can do\n");
    // from x 0's and y 1's we have to make b inversions that is 01 pair b
    ll ti = b/y;
   
    for(i=0;i<ti;i++)
        printf("0"),x--;
    ll rem = b%y;
    ll put = y - rem;
    for(i=0;i<put;i++)printf("1");
    if(x)
    printf("0"),x--;
    for(i=0;i<rem;i++)printf("1");
    for(i=0;i<x;i++)printf("0");
    return 0;
}
