#include <bits/stdc++.h>
using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	int n, k, l;
	string s;
	while (cin >> n >> k >> l >> s) {
		auto solve = [&](vector<int> &a) {
			const long long inf = numeric_limits<int>::max() / 2;
			vector< pair<long long, int> > dp(n + 1);
			auto calc = [&](int mid) {
				fill(dp.begin(), dp.end(), make_pair(inf, int(1e9)));
				dp[0] = make_pair(0, 0);
				for (int i = 0; i < n; i++) {
					dp[i + 1] = min(dp[i + 1], make_pair(dp[i].first + a[i], dp[i].second));
					dp[min(n, i + l)] = min(dp[min(n, i + l)], make_pair(dp[i].first + mid, dp[i].second + 1));
				}
				return dp[n].second;
			};
			int low = 0, high = n;
			while (low < high) {
				int mid = (low + high + 1) >> 1;
				if (calc(mid) > k) {
					low = mid;
				} else {
					high = mid - 1;
				}
			}
			int res = high;
			if (calc(res) <= k) return 0ll;
			calc(res + 1);
			return dp[n].first - (long long)(res + 1) * k;
		};
		vector<int> a(n);
		for (int i = 0; i < n; i++) {
			a[i] = (isupper(s[i]) > 0);
		}
		long long ans = solve(a);
		for (int i = 0; i < n; i++) {
			a[i] = (islower(s[i]) > 0);
		}
		ans = min(ans, solve(a));
		cout << ans << '\n';
	}
	return 0;
}
