#include <bits/stdc++.h>
#include <ext/hash_map>
using namespace std;
using namespace __gnu_cxx;

#define EPS      1e-12
#define F        first
#define S        second
#define pi       acos(-1)
#define ll       long long
#define oo       0x3f3f3f3f
#define sz(x)    (int)x.size()
#define sc(x)    scanf("%d",&x)
#define all(x)   x.begin(),x.end()
#define rall(x)  x.rbegin(),x.rend()

int n,m,k;
vector<pair<pair<int,int>,int> >adj[100100];
pair<int,int> train[100100];
int par[100100];
map<pair<int,int>,int>mp;
int bad[100100];
long long dist[100100];

void Dijkstra(){
  memset(dist,0x3f,sizeof dist);
  memset(par,-1,sizeof par);
  dist[1]=0;
  priority_queue<pair<ll,int>,vector<pair<ll,int> >,greater<pair<ll,int> > > pq;
  pq.push({dist[1],1});
  while(!pq.empty()){
    pair<ll,int> cur=pq.top();
    pq.pop();
    if(cur.F>dist[cur.S])continue;
    for(int i=0;i<sz(adj[cur.S]);i++){
      int edge=adj[cur.S][i].F.F;
      int to=adj[cur.S][i].F.S;
      int id=adj[cur.S][i].S;
      if(dist[to]>dist[cur.S]+edge){
        dist[to]=dist[cur.S]+edge;
        pq.push({dist[to],to});
        par[to]=id;
      }else if(dist[to]==dist[cur.S]+edge&&id==-1){
        par[to]=-1;
      }
    }
  }
}

int main() {
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  //freopen("output.txt", "w", stdout);
#endif
  scanf("%d%d%d",&n,&m,&k);
  for(int i=0;i<m;i++){
    int u,v,w;
    scanf("%d%d%d",&u,&v,&w);
    adj[u].push_back({{w,v},-1});
    adj[v].push_back({{w,u},-1});
  }
  int ans=0;
  for(int i=0;i<k;i++){
    scanf("%d%d",&train[i].F,&train[i].S);
    if(mp.count({train[i].F,train[i].S})==0){
      adj[1].push_back({{train[i].S,train[i].F},i});
      adj[train[i].F].push_back({{train[i].S,1},i});
      mp[{train[i].F,train[i].S}]=1;
    }else ans++,bad[i]=1;
  }
  Dijkstra();
  for(int i=0;i<k;i++){
    if(bad[i])continue;
    if(par[train[i].F]!=i)ans++;
  }
  cout<<ans;
}
