#include <bits/stdc++.h>
#define ll  long long
#define pii pair<int,int>
#define pll pair<ll,ll>
#define sc second
#define fr first

using namespace std;

vector<int>p[500100];

int per[1001000];
int sz[1001000];
int mn[1001000];
int mx[1001000];

int pr(int x){
    if(x == per[x])
        return x;
    return per[x] = pr(per[x]);
}

void merg(int x,int y){
    x = pr(x);
    y = pr(y);
    if(x == y)
        return ;
    if(sz[x] > sz[y])swap(x,y);
    per[x] = y;
    sz[y] += sz[x];
    mn[y] = min(mn[x],mn[y]);
    mx[y] = max(mx[x],mx[y]);
}

void merg1(int x,int y){
    x = pr(x);
    y = pr(y);
    if(mn[y] <= mx[x])return ;

    if(x == y)return ;


    merg1(mx[x]+1,y);
  //  cout<<x<<" "<<y<<endl;
    merg(x,y);
}

int main(){
    int n,m;
    cin>>n>>m;
    int x,y;
    for(int i=0 ;i <=n ;i ++){
        per[i] = i;
        sz[i] = 1;
        mn[i] = i;
        mx[i] = i;
    }
    for(int i=0 ;i <m ;i ++){
        scanf("%d%d",&x,&y);
        p[x].push_back(y);
        p[y].push_back(x);
    }
   // cout<<endl;
    for(int i=1; i<=n ;i ++){
        set<int>st;
        set<int>::iterator it;
        for(int j=0 ;j <p[i].size() ; j++){
            st.insert(p[i][j]);
        }

        int pre = 0;
        for(it = st.begin() ; it != st.end() ; it++){
            merg1(pre+1,*it - 1);
            pre = *it;
        }
        if(pre < n){
            merg1(pre+1,n);
        }
    }
    for(int i=1; i<=n ;i ++){
        set<int>st;
        set<int>::iterator it;
        for(int j=0 ;j <p[i].size() ; j++){
            st.insert(p[i][j]);
        }

        int pre = 0;
        for(it = st.begin() ; it != st.end() ; it++){
            if(pre+1 <= (*it)-1){
                merg(pre+1,i);
            }
            pre = *it;
        }
        if(pre < n){
            merg(i,n);
        }
    }

    set<int>st;
    for(int i=1;i<=n ;i ++){
        st.insert(pr(i));
    }
    cout<<st.size()-1<<endl;
    return 0;
}
