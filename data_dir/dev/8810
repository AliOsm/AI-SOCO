#pragma comment(linker, "/STACK:2000000")
#include <algorithm>
#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cmath>
using namespace std;

/*
#define cin in
#define cout out
ifstream in("input.txt");
ofstream out("output.txt");
/**/

const int N = 1000010;
int lp[N+1];
int divisors[N+1];

vector<pair<int, int> > getDiv(int tmp)
{
	vector<pair<int, int> > v;
	while(tmp != 1)
	{
		int div = lp[tmp];
		v.push_back(make_pair(div, 0));
		while(tmp % div == 0)
		{
			tmp /= div;
			v.back().second++;
		}
	}
	return v;
}

int main()
{
	
	vector<int> pr;
 
	for (int i=2; i<=N; ++i) {
		if (lp[i] == 0) {
			lp[i] = i;
			pr.push_back (i);
		}
		for (int j=0; j<(int)pr.size() && pr[j]<=lp[i] && i*pr[j]<=N; ++j)
			lp[i * pr[j]] = pr[j];
	}

	int n,k;
	scanf("%d%d", &n, &k);
	for(int i = 1; i <= n; ++i)
	{
		int tmp;
		scanf("%d", &tmp);
		vector<pair<int, int> > v = getDiv(tmp);
		for(int j = 0; j < v.size(); ++j)
			divisors[v[j].first] = max(divisors[v[j].first], v[j].second);
	}

	vector<pair<int, int> > forN = getDiv(k);
	bool ok = 1;
	for(int i = 0; i < forN.size(); ++i)
		ok &= (divisors[forN[i].first] >= forN[i].second);
	cout << (ok ? "YES\n" : "NO\n");
}


/*

2 3 4 5 6 1
4 3 2 5 1
2 3 4 1
2 -> 1
3 -> 3
4 -> 16
5 -> 95
6 -> 6*95 + 6*4*16 + 3*6*9

1 3
2 4
3 5
4 6
5 1
6 2


0134
0314
0341
3014
3041
3401

*/
