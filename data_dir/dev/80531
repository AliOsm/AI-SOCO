#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, std::less<>, rb_tree_tag, tree_order_statistics_node_update>;
using namespace std;
typedef long long int64;
typedef unsigned long long uint64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//*/998244353;
const int base = 2187;
const double eps = 1e-9;
const int N = 1'000'000;
const int LOGN = 19;

int n, m, k;

void solve(int) {
  cin >> n >> m;
  vector<vector<int>> a(n, vector<int>(m));
  for (auto& vec : a) {
    for (int& x : vec) {
      cin >> x;
    }
  }
  int l = 0, r = inf;
  auto f = [&] (int mid) {
    set<pair<int, int>> st;
    for (int i = 0; i < n; ++i) {
      int mask = 0;
      for (int x : a[i]) {
        mask <<= 1;
        mask |= x >= mid;
      }
      st.emplace(mask, i);
    }
    for (int i = 0; i < (1 << m); ++i) {
      for (int j = 0; j < (1 << m); ++j) {
        if ((i | j) == (1 << m) - 1) {
          auto it1 = st.lower_bound(make_pair(i, 0));
          auto it2 = st.lower_bound(make_pair(j, 0));
          if (it1 != end(st) && it1->first == i && it2 != end(st) && it2->first == j) {
            return make_pair(it1->second, it2->second);
          }
        }
      }
    }
    return make_pair(-1, -1);
  };
  while (l < r) {
    int mid = (l + r + 1) / 2;
    auto pr = f(mid);
    if (pr.first == -1) {
      r = mid - 1;
    } else {
      l = mid;
    }
  }
  auto[x, y] = f(l);
  cout << x + 1 << ' ' << y + 1 << '\n';
}

void precalc() {
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i) {
    solve(i);
  }
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}
