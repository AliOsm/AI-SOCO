#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<LL, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
#define LL                  long long
#define ull                 unsigned long long
#define scl(n)              scanf("%lld", &n)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)
#define scs(n)              scanf("%s", n)
#define pfi(n)              printf("%d\n",n)
#define pfl(n)              printf("%I64d ",n)
#define pfs(s)              printf("%s\n",s)

#define	deb(x)		        cout<<#x<<" "<<x<<endl

#define FASTREAD            ios_base::sync_with_stdio(0);cin.tie(nullptr);
#define MOD                 1000000007
#define MODP                99999999999973LL
#define pb                  push_back
#define mp                  make_pair
#define pp                  pair<LL,LL>
#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e9+5
#define EPS                 1e-8
#define Pi                  acos(-1.0)

LL bigmod(LL b, LL p, LL md){if(p==0) return 1;if(p%2==1){ return ((b%md)*bigmod(b,p-1,md))%md;} else {LL y=bigmod(b,p/2,md);return (y*y)%md;}}

#define N 110

int n;
int dis[N][N];
vector<int>v[N];
bool taken[1000006];

void dik(int s)
{
    dis[s][s]=0;
    for(int i=1;i<=n;i++)
    {
        if(i==s) continue;
        dis[s][i]=INF;
    }
    queue<int>q;
    q.push(s);
    while(q.size())
    {
        int now=q.front();
        q.pop();

        for(int i=0;i<v[now].size();i++)
        {
            int to=v[now][i];
            if(dis[s][now]+1<dis[s][to])
            {
                dis[s][to]=dis[s][now]+1;
                q.push(to);
            }
        }
    }
}

int main()
{
    FASTREAD;
    cin>>n;

    for(int i=1;i<=n;i++)
    {
        string str;
        cin>>str;

        for(int j=0;j<n;j++)
        {
            if(str[j]=='1')
                v[i].pb(j+1);
        }
    }

    for(int i=1;i<=n;i++)
    {
        dik(i);
    }

    int m;
    cin>>m;

    int arr[m];
    for(int i=0;i<m;i++)
        cin>>arr[i];

    taken[0]=true;
    taken[m-1]=true;
    int rt=arr[0];
    int cnt=2;

    for(int i=1;i+1<m;i++)
    {
        int a=dis[rt][arr[i]];
        int b=dis[arr[i]][arr[i+1]];
        int c=dis[rt][arr[i+1]];

        if(a+b>c)
        {
            taken[i]=true;
            rt=arr[i];
            cnt++;
        }
    }
    cout<<cnt<<endl;
    for(int i=0;i<m;i++)
    {
        if(taken[i]) cout<<arr[i]<<" ";
    }
    cout<<endl;


    return 0;
}


/* LL dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* LL dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* LL dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* LL dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction
