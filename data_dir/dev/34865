#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define ld long double
#define rep(i,a,b) for(ll i=a;i<b;i+=1)
#define rrep(i,a,b) for(ll i=a;i>b;i-=1)
#define all(c) (c).begin(),(c).end()
#define pb push_back
#define sz(a) int((a).size())
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define mp make_pair
#define hell 1000000007
#define F first
#define S second
#define M_PI           3.14159265358979323846
const int  MOD  = (int) 1e9 + 7 ;
ll t=1 , tt ;
set< ll > r[ 1005 ] , c[ 1005 ] ;
bool check( ll row , ll col , vector< vector< char > >& grid )
{
    ll ans = 0 ;
    rep( i , -1 , 2 )
    {
        rep( j , -1 , 2 )
        {
            if( i + j == -1 || i + j == 1 )
            {
                if( grid[ row + i ][ col + j ] == '*' )
                    ans ++ ;
            }
        }
    }
    return ( ans == 4 && grid[ row ][ col ] == '*' ) ;
}
ll len( ll row , ll col, ll n , ll m , vector< vector< char > >& grid )
{
    ll le1 = 0 ,  le2 =  0 , le3 = 0 , le4 = 0 ;
    r[ row ].insert( col ) ;
    c[ col ].insert( row ) ;
    set< ll >::iterator it1 = r[ row ].find( col ) , it2 = r[ row ].find( col ) , it3 = c[ col ].find( row ) , it4 = c[ col ].find( row ) ;
    it1-- ; it2++ ; it3-- ; it4++ ;
    le1 = ( col - *it1 - 1 ) ;
    le2 = ( *it2 - 1 - col ) ;
    le3 = ( row - *it3 - 1 ) ;
    le4 = ( *it4 - row - 1 ) ;
    //cout << le1 << " " << le2 << " " << le3 << " " << le4 << "\n" ;
    r[ row ].erase( col ) ;
    c[ col ].erase( row ) ;
    return min( le1 , min( le2 , min( le3 , le4 ) ) ) ;
}
void solve()
{
    ll n , m ;
    cin >> n >> m ;
    vector< vector< char >  > grid( n + 5 , vector< char >( m + 5 , '#' ) ) ;
    vector< vector< ll > > vis( n + 5 , vector< ll >( m + 5 , 0 ) ) ;
    rep( i , 1 , n + 1 )
    {
        rep( j , 1 , m + 1 )
        {
            cin >> grid[ i ][ j ] ;
            if( grid[ i ][ j ] == '.' )
            {
                r[ i ].insert( j ) ;
                c[ j ].insert( i ) ;
            }
        }
        r[ i ].insert( 0 ) ;
        r[ i ].insert( m + 1 ) ;
    }
    rep( i , 1 , m + 1 )
    {
        c[ i ].insert( 0 ) ;
        c[ i ].insert( n + 1 ) ;
    }
    vector< pair< pair< ll , ll > , ll > > ans ;
    rep( i , 1 , n + 1 )
    {
        rep( j , 1 , m + 1 )
        {
            if( check( i , j , grid ) )
            {
                ll le = len( i , j , n , m , grid ) , row = i , col  = j ;
                rep( ii , row - le , row + le + 1 )
                    vis[ ii ][ col ] = 1 ;
                rep( ii , col - le , col + le + 1 )
                    vis[ row ][ ii ] = 1 ;
                ans.pb( mp( mp( i , j ) , le ) ) ;
            }
        }
    }
    rep( i , 1 , n + 1 )
    {
        rep( j , 1 , m + 1 )
        {
            if( grid[ i ][ j ] == '*' )
            {
                if( vis[ i ][ j ] == 0 )
                {
                    cout << -1 ;
                    return ;
                }
            }
        }
    }
    cout << sz( ans ) << "\n" ;
    for( auto const& it : ans )
        cout << it.F.F << " " << it.F.S << " " << it.S << '\n' ;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    //freopen( "input.txt" , "r" , stdin ) ;
    //freopen( "output.txt" , "w" , stdout) ;
    //cin >> t ;
    tt = t ;
    while(t--)
        solve();
    return 0;
}
