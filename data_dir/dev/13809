#include <iostream>
#include<memory.h>
#include <map>
#include <string>
#include <iomanip>
#include <fstream>
#include <vector>
#include <algorithm>
#include <stack>
#include <queue>
#include <cmath>
#include <set>
using namespace std;

/*
*/

typedef vector<int> VI;

void computeLPSArray(string pat, int M,  VI &lps)
{
    int len = 0;  // lenght of the previous longest prefix suffix
    int i;
 
    lps[0] = 0; // lps[0] is always 0
    i = 1;
 
    // the loop calculates lps[i] for i = 1 to M-1
    while(i < M)
    {
       if(pat[i] == pat[len])
       {
         len++;
         lps[i] = len;
         i++;
       }
       else // (pat[i] != pat[len])
       {
         if( len != 0 )
         {
           // This is tricky. Consider the example AAACAAAA and i = 7.
           len = lps[len-1];
 
           // Also, note that we do not increment i here
         }
         else // if (len == 0)
         {
           lps[i] = 0;
           i++;
         }
       }
    }
}

int main()
{
	string s, t;
	cin>>s>>t;
	string w = t + "@"+s;
	VI lps(w.size());
	computeLPSArray(w, w.size(),  lps);
	vector<bool> good(s.size(), false);
	
	for (int i = 0; i < w.size(); i++)
	{
		if (lps[i] == t.size())
		{
			good[i-2*t.size()] = true;
		}
	}
	vector<vector<long long> > dp(100005, vector<long long> (3, 0));
	for (int i = s.size() - 1; i >= 0; i--)
	{
		if (good[i])
		{
			dp[i][1] = dp[i+1][1]+dp[i+1][2];
			dp[i][2] = s.size() - (i+t.size()-1) + dp[i+t.size()][0];
			dp[i][0] = dp[i][1] + dp[i][2] + dp[i+1][0];
		}
		else
		{
			dp[i][1] = dp[i+1][1]+dp[i+1][2];
			dp[i][2] = dp[i+1][2];
			dp[i][0] = dp[i][1] + dp[i][2] + dp[i+1][0];
		}
		dp[i][0] %= 1000000007;
		dp[i][1] %= 1000000007;
		dp[i][2] %= 1000000007;
	}
	cout<<(dp[0][1] + dp[0][2])%1000000007<<endl;
}