#include <bits/stdc++.h>
using namespace std;

vector <int> tr1[2005], tr2[2005];
int p[2005], x[2005], q[2005], y[2005], l1[2005], r1[2005], l2[2005], r2[2005];
vector <int> G[4005];
int match[4005];
bool used[4005];
int V;

void dfs1(int u) {
	if (tr1[u].empty()) {
		l1[u] = r1[u] = x[u];
	} else {
		l1[u] = 10000;
		for (auto v : tr1[u]) {
			dfs1(v);
			l1[u] = min(l1[u], l1[v]);
			r1[u] = max(r1[u], r1[v]);
		}
	}
}

void dfs2(int u) {
	if (tr2[u].empty()) {
		l2[u] = r2[u] = y[u];
	} else {
		l2[u] = 10000;
		for (auto v : tr2[u]) {
			dfs2(v);
			l2[u] = min(l2[u], l2[v]);
			r2[u] = max(r2[u], r2[v]);
		}
	}
}

void add_edge(int u, int v) {
	G[u].push_back(v);
	G[v].push_back(u);
}

bool dfs(int v){
	used[v] = true;
	for (int i = 0; i < (int)G[v].size(); i++) {
		int u = G[v][i], w = match[u];
		if (w < 0 || !used[w] && dfs(w)) {
			match[v] = u;
			match[u] = v;
			return true;
		}
	}
	return false;
}

int bipartite_matching() {
	int res = 0;
	memset(match, -1, sizeof(match));
	for (int v = 1; v <= V; v++) {
		if (match[v] < 0) {
			memset(used, 0, sizeof(used));
			if (dfs(v)) {
				res++;
			}		
		}
	}
	return res;
}

int main() {
	int n, a, b;
	scanf("%d", &n);
	scanf("%d", &a);
	for (int i = 2; i <= a; i++) {
		scanf("%d", &p[i]);
		tr1[p[i]].push_back(i);
	}
	for (int i = 1, id; i <= n; i++) {
		scanf("%d", &id);
		x[id] = i;
	}
	scanf("%d", &b);
	for (int i = 2; i <= b; i++) {
		scanf("%d", &q[i]);
		tr2[q[i]].push_back(i);
	}
	for (int i = 1, id; i <= n; i++) {
		scanf("%d", &id);
		y[id] = i;
	}
	dfs1(1);
	dfs2(1);
	for (int i = 2; i <= a; i++) {
		for (int j = 2; j <= b; j++) {
			if (l1[i] <= r2[j] && l2[j] <= r1[i]) {
				add_edge(i - 1, j + a - 2);
			}
		}
	}
	V = a + b - 2;
	printf("%d\n", V - bipartite_matching());
	return 0;
}