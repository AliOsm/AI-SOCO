#include<bits/stdc++.h>
#define st first
#define nd second
#define pb push_back
#define ppb pop_back
#define umax(x,y) x=max(x,y)
#define umin(x,y) x=min(x,y)
#define ll long long
#define ii pair<int,int>
#define iii pair<ii,int>
#define iiii pair<ii,ii>
#define sz(x) ((int) x.size())
#define orta ((bas+son)>>1)
#define all(x) x.begin(),x.end()
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define pw(x) (1<<(x))
#define inf 10050000000000000
#define MOD 1000000007
#define N 255
#define M 1000005
#define LOG 18
#define KOK 32000
using namespace std;

int n,m,ans;
int l[N*2],r[N*2],str[N*2],po[27];
char s[N][N];

int solve(int bas,int son) {

	int tot=0;

	l[bas-1]=bas;
	r[bas-1]=bas-1;

	for(int i=bas;i<=son;i++) {

		if(r[i-1]<i) {

			l[i]=r[i]=i;

		}
		else {

			int sm=l[i-1]+r[i-1]-i;

			l[i]=i-min(sm-l[sm],sm-l[i-1]);
			r[i]=2*i-l[i];

		}

		while(r[i]+1<=son && l[i]-1>=bas && str[l[i]-1]==str[r[i]+1]) r[i]++,l[i]--;

		if(str[i]==0) tot+=(r[i]-l[i])/4;
		else tot+=(r[i]-l[i]+2)/4;
	
	}

	return tot;

}

int main() {

//	freopen("input.txt","r",stdin);

	scanf("%d %d",&n,&m);

	for(int i=1;i<=n;i++) scanf("%s",s[i]+1);

	po[0]=1;

	for(int i=1;i<26;i++) po[i]=1ll*po[i-1]*701%MOD;

	for(int i=1;i<=m;i++) {

		int hash[N]={0},tot[N]={0};
		bitset<26> odd[N];

		for(int j=i;j<=m;j++) {

			vector<ii> v;

			for(int k=1;k<=n;k++) {

				hash[k]=(hash[k]+po[s[k][j]-'a'])%MOD;

				tot[k]-=odd[k].test(s[k][j]-'a');

				odd[k][s[k][j]-'a']=!odd[k][s[k][j]-'a'];

				tot[k]+=odd[k].test(s[k][j]-'a');

				v.pb({hash[k],k});

			}

			sort(all(v));

			int cnt=0;

			for(int k=0;k<n;k++) {

				++cnt;

				str[v[k].nd*2-1]=cnt;

				while(k+1<n && v[k].st==v[k+1].st) {

					k++;

					str[v[k].nd*2-1]=cnt;

				}

			}

			for(int k=1;k<=n;k++) {

				if(tot[k]>1) continue ;

				int bas=k;

				while(k+1<=n && tot[k+1]<2) k++;

				ans+=solve((bas-1)*2,k*2);

			}

		}

	}

	printf("%d",ans);

}