// in the name of god
#include <bits/stdc++.h> 
using namespace std ; 
#define X first  
#define Y second 
#define y1 asdfg
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0) 
//#define int long long 
//#define cout cout << setprecision ( 12 )  
typedef long double ld; 
typedef pair < int , int > pii ;
typedef pair < ld , ld > point ; 
const int maxn = 1e6 + 100  ; 
//const int inf = 1e16 ;
const ld pi = 3.1415926535897932384626433832795 ;
int left(int x){return 2*x;} 
int right(int x){return 2*x+1;} 
int n , ar [ maxn ] , mp0 [ maxn ] , mp1 [ maxn ]  ;
int data [ 4 * maxn ] ;
map < int , int > mp ;

void add ( int p , int x , int st = 0 , int en = n + 2 , int id = 1 ) 
{ 
  if ( en - st < 2 ) 
    {
      data [ id ] += x ; 
      return ; 
    }
  int mid = ( st + en ) / 2 ; 
  if ( p < mid ) 
    add ( p , x , st , mid , left( id ) ) ; 
  else
    add ( p , x , mid , en , right ( id ) ) ;
  data [ id ] += x ;
}

int get ( int l , int r , int st = 0 , int en = n + 2 , int id = 1 ) 
{ 
  if ( l <= st && en <= r ) 
    return data [ id ] ; 
  if ( r <= st || en <= l ) 
    return 0 ; 
  int mid = ( st + en ) / 2 ; 
  return get ( l , r , st , mid , left ( id ) ) + 
    get ( l , r , mid , en , right ( id ) ) ;
}
long long  ans ; 
vector < int > vc ;

main ( ) 
{
  scanf ( "%d" , &n ) ;
  for ( int i = 0 ; i < n ; i ++ )
    scanf ( "%d" , &ar [ i ] ) ;
  for ( int i = 0 ; i < n ; i ++ ) 
    vc . push_back ( ar [ i ] ) ;
  sort ( vc . begin ( ) ,vc . end ( ) ) ;
  unique ( vc . begin ( ) , vc . end ( ) ) ; 
  for ( int i = 0 ; i < vc . size ( ) ; i ++ )
    mp [ vc [ i ] ] = i ; 
  for ( int i = 0 ; i < n ; i ++ ) 
    ar [ i ] = mp [ ar [ i ] ] ;
  for ( int i = 0 ; i < n ; i ++ )
    mp0 [ ar [ i ] ] ++ ; 
  for ( int i = n - 1 ; i >= 0  ; i -- ) 
    { 
      ans += get ( 1 , mp0 [ ar [ i ] ] ) ;
      mp0 [ ar [ i ] ] -- ; 
      mp1 [ ar [ i ] ] ++ ; 
      add ( mp1 [ ar [ i ] ] , 1 ) ; 
   }
  printf ( "%I64d" , ans ) ;
}
