#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int MD = 998244353;
const int MX = 55;

void add(int& a, int b) {
	a += b;
	if (a >= MD) a -= MD;
}
int mod_mult(ll a, ll b) {
	return (a * b) % MD;
}
int exp(int a, int b) {
	int res = 1;
	while (b) {
		if (b % 2 == 1) res = mod_mult(res, a);
		a = mod_mult(a, a);
		b /= 2;
	}
	return res;
}
int inv(int a) {
	return exp(a, MD - 2);
}

int L[MX], R[MX];

vector<int> borders;

int dp[MX][2 * MX];

int Comb(int n, int k) {
	if (k > n) return 0;
	int res = 1;
	for (int kk = 1; kk <= k; kk++) {
		res = mod_mult(res, n - kk + 1);
		res = mod_mult(res, inv(kk));
	}
	return res;
}

int main()
{
	int n;
	ignore = scanf("%d", &n);

	for (int i = 0; i < n; i++) {
		ignore = scanf("%d %d", L + i, R + i);
		R[i]++;
		borders.push_back(L[i]);
		borders.push_back(R[i]);
	}
	borders.push_back(0);
	borders.push_back(998244352);
	sort(borders.begin(), borders.end());
	borders.resize(unique(borders.begin(), borders.end()) - borders.begin());

	int m = (int)borders.size() - 1;

	for (int i = 0; i < m; i++) {
		//printf("[%d %d)\n", borders[i], borders[i + 1]);
	}

	// k == -1
	for (int i = 0; i < m; i++) {
		for (int t = 0; t < n && L[t] <= borders[i] && R[t] >= borders[i + 1]; t++) {
			dp[t][i] = Comb(t + 1 + (borders[i + 1] - borders[i] - 1), t + 1);
		}
	}
	
	/*
	for (int k = 0; k < n; k++) {
		for (int i = 0; i < m; i++) {
			printf("dp[%d][%d] = %d\n", k, i, dp[k][i]);
		}
	}
	*/
	
	for (int k = 0; k < n; k++) {
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < i; j++) {
				for (int t = 1; t + k < n && L[t + k] <= borders[j] && R[t + k] >= borders[j + 1]; t++) {
					add(dp[k + t][j], mod_mult(dp[k][i], Comb(t + (borders[j + 1] - borders[j] - 1), t)));
				}
			}
		}
	}
	
	int res = 0;
	for (int i = 0; i < m; i++) {
		add(res, dp[n - 1][i]);
	}
	
	//printf("res=%d\n", res);
	
	int div = 1;
	for (int i = 0; i < n; i++) {
		div = mod_mult(div, R[i] - L[i]);
	}
	printf("%d\n", mod_mult(res, inv(div)));
}
