#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

template <class T>
using ordered_set = tree <T,null_type,less <T>,rb_tree_tag,tree_order_statistics_node_update> ;
///find_by_order()
///order_of_key()

template <class T,class U>
void maximize(T &x,U y){
    if(x < y)x = y;
}
template <class T,class U>
void minimize(T &x,U y){
    if(x > y)x = y;
}
template <class T>
T Abs(T x){
    return (x < (T)0 ? -x : x);
}
template <class T>
T safe_sqrt(T x){
    return sqrt(max(x,(T)0));
}
template <class T,class U,class V>
T addmod(T x,U k,V MOD){
    return ((x + k) % MOD + MOD) % MOD;
}
template <class T,class U,class V>
T submod(T x,U k,V MOD){
    return ((x - k) % MOD + MOD) % MOD;
}
template <class T,class U,class V>
T mul(T x,U y,V MOD){
    return ( (x % MOD) * (y % MOD) ) % MOD;
}

#define ll long long
#define pll pair <ll,ll>
#define pii pair <int,int>
#define MASK(i) ((1LL)<<(i))
#define BIT(x,i) (((x)>>(i))&1)
#define all(c) (c).begin(),(c).end()
#define fn "test"    ///FILE_NAME_HERE

/*------------------------------------------END_OF_TEMPLATE------------------------------------------*/

namespace task{

    const int N = 1e5 + 5;
    const int lg = 31;
    ll a[N];
    int n;

    class Trie{
    public:
        Trie *child[2];
        int has;
        Trie(){
            child[0] = child[1] = nullptr;
        }
    public:
        void add(int val,Trie *root){
            for(int j = lg;~j;--j){
                if(root -> child[BIT(val,j)] == nullptr){
                    root -> child[BIT(val,j)] = new Trie;
                }
                root = root -> child[BIT(val,j)];
            }
        }
        ll calc(Trie *root,int cur = lg){
            if(cur < 0){
                return 0;
            }
            if(root -> child[0] and root -> child[1]){
                return MASK(cur) + min(calc(root -> child[0],cur - 1),calc(root -> child[1],cur - 1));
            } else if(root -> child[0]){
                return calc(root -> child[0],cur - 1);
            } else if(root -> child[1]){
                return calc(root -> child[1],cur - 1);
            } else {
                return 0;
            }
        }
    };
    Trie *trie = new Trie;

    void solve(){
        cin>>n;
        for(int i = 1;i <= n;++i){
            cin>>a[i];
            trie->add(a[i],trie);
        }
        cout<<trie -> calc(trie);
    }
}

int main(void){
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    #ifndef ONLINE_JUDGE
    freopen(fn".inp","r",stdin);
    freopen(fn".out","w",stdout);
    #endif // ONLINE_JUDGE
    task::solve();
}