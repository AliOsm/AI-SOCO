#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

vector<int> adj[100005];
bool vis [100005];
bool vis_clockk[100005];

map<int,int> occurences;

map< pair<int,int> , vector<int> > edges;

set<int> to_remove;

vector<int> clockk[100005];

void dfs_clockk(int node){
    cout <<node<<" ";
    vis_clockk[node]=1;
    for(int i:clockk[node]){
        if(vis_clockk[i])continue;
        vis_clockk[i]=1;
        dfs_clockk(i);
    }
}


int main()
{
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    int t;
    cin >> t;
    while(t--){
        int n;
        cin >> n ;
        for(int i=1;i<=n-2;i++){
            int a[3];
            cin>>a[0]>>a[1]>>a[2];
            sort(a,a+3);
            edges[{a[0],a[1]}].push_back(i);
            edges[{a[0],a[2]}].push_back(i);
            edges[{a[1],a[2]}].push_back(i);
        }
        for(auto i:edges){
            if(i.second.size()==1){
                clockk[i.first.first].push_back(i.first.second);
                clockk[i.first.second].push_back(i.first.first);
            }
            else{
                adj[i.second[0]].push_back(i.second[1]);
                adj[i.second[1]].push_back(i.second[0]);
            }
        }
        dfs_clockk(1);
        cout<<"\n";
        for(int i=1;i<=n;i++){
            //cout << "i = " << i << " size of adj = " ;
            //cout << adj[i].size()<<endl;
            if(adj[i].size()==1){
                to_remove.insert(i);
            }
        }
        while(to_remove.size()){
            int piece = *to_remove.begin();
            to_remove.erase(piece);
            cout << piece <<" ";
            for(int i:adj[piece]){
                // remove adj for it's neigh
                for(int j=0;j<adj[i].size();j++){
                    if(adj[i][j]==piece){
                        adj[i].erase(adj[i].begin()+j);
                        break;
                    }
                }
                if(adj[i].size()==1){
                    to_remove.insert(i);
                }
            }
        }
        if(n==3)cout<<1;
        cout<<"\n";
        // clean up
        edges.clear();
        for(int i=1;i<=n;i++){
            adj[i].clear();
            clockk[i].clear();
            vis[i]=0;
            vis_clockk[i]=0;
            occurences.clear();
        }
    }


    return 0;
}
