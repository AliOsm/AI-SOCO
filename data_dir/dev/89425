#include<bits/stdc++.h>
using namespace std;
#define M 200005

int sp[M][20], lev[M];
vector<int> vec[M];
int n, m;

void dfs(int s, int par, int level)
{
    int i, j;

    lev[s] = level;
    for(i = 0; i < vec[s].size(); i++)
    {
        j = vec[s][i];

        if(j == par) continue;

        sp[j][0] = s;
        dfs(j, s, level+1);
    }
}

void setup(int s)
{
    int i, j;

    dfs(s, 0, 0);

    for(j = 1; j < 20; j++)
    {
        for(i = 1; i <= n; i++) sp[i][j] = sp[sp[i][j-1]][j-1];
    }

    return;
}

int lca(int p, int q)
{
    int j;

    if(lev[p] > lev[q]) swap(p, q);

    for(j = 19; j >= 0; j--)
    {
        if(lev[p]+(1<<j) <= lev[q]) q = sp[q][j];
    }

    if(p == q) return p;

    for(j = 19; j >= 0; j--)
    {
        if(sp[p][j] != sp[q][j]) p = sp[p][j], q = sp[q][j];
    }

    return sp[p][0];
}

int main()
{
    scanf("%d %d", &n, &m);

    for(int i = 1; i < n; i++)
    {
        int u, v;
        scanf("%d %d", &u, &v);

        vec[u].push_back(v);
        vec[v].push_back(u);
    }

    setup(1);

    for(int i = 1; i <= m; i++)
    {
        int k;
        scanf("%d", &k);

        int u = -1;

        vector<int> tmp(k);

        for(int j = 1; j <= k; j++)
        {
            int p;
            scanf("%d", &p);

            tmp[j-1] = p;
            if(u == -1 || lev[u] < lev[p]) u = p;
        }

        bool flag = true;
        for(int p: tmp)
        {
            int l = lca(p, u);

            if(lev[p]-lev[l] > 1) flag = false;
        }

        printf("%s\n", flag? "YES": "NO");
    }

    return 0;
}

