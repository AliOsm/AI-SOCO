/*
ID: hepic
PROG: lamps
LANG: C++11
*/
#include<bits/stdc++.h>

#define FOR(i, a, b) for(auto i=a; i!=b+1-2*(a>b); i+=1-2*(a>b))
#define REP(i, a, b) for(auto i=a-(a>b); i!=b-(a>b); i+=1-2*(a>b))
#define ALL(v) v.begin(),v.end()
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define pf(a) push_front(a)
#define eb(a, b) emplace_back(a, b)
#define fir first
#define sec second
#define what_is(x) cout<<#x<<" is "<<x<<endl;
#define min3(a,b,c) min(min(a,b),c)
#define max3(a,b,c) max(max(a,b),c)
#define SIZE 100010
#define MAXN 1000000007
#define NUM 200010
#define PI acos(-1)
#define open_read1 freopen("C:\\Users\\Hepic\\Desktop\\a.txt","r",stdin)
#define open_write1 freopen("C:\\Users\\Hepic\\Desktop\\b.txt","w",stdout)
#define open_read freopen("cruise.in","r",stdin)
#define open_write freopen("cruise.out","w",stdout)

using namespace std;


typedef long long LL;
typedef pair<int,int> PII;
typedef pair<int, PII> PIPII;
typedef pair<PII, PII> PPIIPII;
typedef pair<LL, LL> PLL;
typedef pair<LL, PLL> PLPLL;


template<typename T, typename T1>
ostream& operator << (ostream &out, pair<T, T1> obj)
{
    return out<<"("<<obj.first<<","<<obj.second<<")";
}


template<typename T, typename T1>
ostream& operator << (ostream &out, map<T, T1> cont)
{
    typename map<T, T1>::const_iterator itr = cont.begin();
    typename map<T, T1>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;
}


template<typename T>
ostream& operator << (ostream &out, set<T> cont)
{
    typename set<T>::const_iterator itr = cont.begin();
    typename set<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;
}


template<typename T, template<typename ELEM, typename ALLOC=allocator<ELEM>> class CONT>
ostream& operator << (ostream &out, CONT<T> cont)
{
    typename CONT<T>::const_iterator itr = cont.begin();
    typename CONT<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;
}


template<typename T>
T gcd(T a, T b)
{
    T min_v = min(a, b);
    T max_v = max(a, b);

    while(min_v)
    {
        T temp = max_v % min_v;
        max_v = min_v;
        min_v = temp;
    }

    return max_v;
}


template<typename T>
T lcm(T a, T b)
{
    return (a*b) / gcd(a, b);
}

/*#################################################################################################################
#################################################################################################################
#################################################################################################################
#################################################################################################################*/

//10 mod 7 = 3. That is why I multiply with 3 down.
//7 mod 10000 = 4. I have for sure 4 previous lucky digits.
string num;
int ten_mod = 4, res_mod;
int numbersOfMod[] = {0, 0, 0, 0, 0, 0, 0};
int digit[] = {1, 6, 8, 9};
int cntDig[10];



int main()
{
    cin>>num;


    REP(i, 0, num.size())
        ++cntDig[num[i]-'0'];

    REP(i, 0, 4)
        --cntDig[digit[i]];

    do
    {
        int perm = 0;
        REP(i, 0, 4)
            perm = (perm*10 + digit[i]);

        numbersOfMod[perm%7] = perm;

    }while(next_permutation(digit, digit+4));


    REP(dig, 1, 10)
        REP(j, 0, cntDig[dig])
        {
            res_mod = (res_mod + dig%7 * ten_mod) % 7;
            ten_mod = (ten_mod * 3) % 7;
        }



    FOR(dig, 9, 1)
        REP(j, 0, cntDig[dig])
            printf("%d", dig);

    printf("%d", numbersOfMod[(7-res_mod)%7]);

    REP(i, 0, cntDig[0])
        printf("0");

    printf("\n");


    return 0;
}
