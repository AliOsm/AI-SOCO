#include<bits/stdc++.h>

using namespace std;

const int N=131075;
int a[N],tree[4*N],lev[4*N];
int n,m;

void build(int p,int l,int r) {
    if(l==r) {
        lev[p] = 1;
        tree[p]=a[l];
     //   cout << l << ' ' << r << ' ' << p << '\n' ;
        return;
    }

    int mid=(l+r)>>1;

    build(p<<1,l,mid);
    build(p<<1 |1,mid+1,r);
    lev[p] = lev[p<<1] ^ 1;
  //  cout << p << ' ' << lev[p] << '\n' ;
    if(lev[p]==0) tree[p]=tree[p<<1] | tree[p<<1 | 1];
    else {
        tree[p]=tree[p<<1] ^ tree[p<<1 |1];
    }
}

void update(int p,int l,int r,int x,int v) {
    if(l>x || r<x)return;

    if(l==r) {
        lev[p]=1;
        tree[p]=v;
        return;
    }
    int mid=(l+r)>>1;

    update(p*2,l,mid,x,v);
    update(p*2 + 1,mid+1,r,x,v);

    lev[p] = lev[p*2] ^ 1;

    if(lev[p]==0){
        tree[p]=tree[p*2] | tree[p*2 + 1];
    }
    else {
        tree[p]=tree[p*2] ^ tree[p*2 +1];
    }
   // cout<<tree[p]<<endl;
}


int main() {

    scanf("%d %d",&n,&m);
    int k=1<<n;

    for(int i=1; i<=k; i++) {
        scanf("%d",&a[i]);
    }
   // cout << "k = " << k << '\n' ;
    build(1,1,k);

    while(m--) {
        int p,b;
        scanf("%d %d",&p,&b);
        update(1,1,k,p,b);
        printf("%d\n",tree[1]);
    }
    return 0;
}
