#include <bits/stdc++.h>
using namespace std;
#define eb emplace_back
#define emp emplace
#define fi first
#define se second
#define INF 0x3f3f3f3f
typedef long long ll;
typedef pair<int, int> ii;

vector<ll> st;

ll get_sqr(ll x) {
	ll lo = 0, hi = 1000000001;

	while (lo < hi) {
		ll mid = (lo+hi)/2;

		if (mid*mid >= x) hi = mid;
		else lo = mid+1;
	}

	if (lo*lo != x) return 1000000001;
	return lo;
}

ll my_lower_bound(ll x) {
	ll lo = 2000001, hi = 1000000001;

	while (lo < hi) {
		ll mid = (lo+hi)/2;

		if (mid*mid >= x) hi = mid;
		else lo = mid+1;
	}

	return lo;
}

int main(void) {
	ios_base::sync_with_stdio(false);

	st.eb(1);
	for (ll i = 2; i <= 2000000; i++) {
		ll cur = i*i;

		while (cur <= 1000000000000000000LL) {
			ll sqr = get_sqr(cur);
		
			if (sqr < 2000001 or sqr == 1000000001) st.eb(cur);
			if ((cur*i)/i != cur) break;
			cur *= i;
		}
	}

	sort(st.begin(), st.end());

	st.resize(unique(st.begin(), st.end())-st.begin());

	int q; cin >> q;

	while (q--) {
		ll l, r; cin >> l >> r;

		auto L = lower_bound(st.begin(), st.end(), l);
		auto R = lower_bound(st.begin(), st.end(), r);

		ll a1;

		if (L == st.end()) a1 = 0;
		else {
			if (*L > r) a1 = 0;
			else {
				if (R == st.end() or *R > r) R--;
				a1 = R-L+1;
			}
		}

		ll nL = my_lower_bound(l);
		ll nR = my_lower_bound(r);

		ll a2;

		if (nL*nL > r) {
			a2 = 0;
		} else {
			if (nR*nR > r) nR--;
			a2 = nR-nL+1;
		}

		cout << a1+a2 << endl;
	}

	return 0;
}
