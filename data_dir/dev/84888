#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define ll long long
#define M 200007
#define MOD 1000000007

// Order Statistic Tree

/* Special functions:

        find_by_order(k) --> returns iterator to the kth largest element counting from 0
        order_of_key(val) --> returns the number of items in a set that are strictly smaller than our item
*/

typedef tree<
ll,					// type long long
null_type,
less<ll>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;



/////// THIS VIOLENT DELIGHTS HAVE VIOLENT ENDS //////////

struct data {
    ll cst, fuel;


    bool operator < (const data& p) const {
        return fuel < p.fuel;
    }
};

ll g[M];
ll c[M], f[M];
vector< data >v;

int main(void)
{
    std::ios::sync_with_stdio(false);
    ll n, k, s, t, i, l, r, x, mx, tm, d;
    cin >> n >> k >> s >> t;
    data z;
    for (i = 1; i <= n; i++) {
        cin >> c[i] >> f[i];
    }
    g[0] = 0;
    g[k+1] = s;
    for (i = 1; i <= k; i++) cin >> g[i];
    sort(g+1, g+1+k);
    mx = 0;
    k++;
    for (i = 1; i <= k; i++) mx = max(mx, g[i]-g[i-1]);
    for (i = 1; i <= n; i++) {
        if (f[i] >= mx) v.push_back({c[i], f[i]});
    }
    if (v.size()==0) {
        cout << -1 << endl;
        return 0;
    }
    sort(v.begin(), v.end());
    l = 0;
    r = v.size()-1;
    while (l <= r) {
        x = (l+r)/2;
        tm = 0;
        for (i = 1; i <= k; i++) {
            d = g[i] - g[i-1];
            tm += d+max(0LL, 2*d-v[x].fuel);
        }
        if (tm > t) l = x+1;
        else r = x-1;
    }

    if (l>=v.size()) {
        cout << -1 << endl;
        return 0;
    }
    mx = 1e15;
    for (i = l; i < v.size(); i++) mx = min(mx, v[i].cst);

    cout << mx << endl;

    return 0;
}

