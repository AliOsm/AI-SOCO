#include <bits/stdc++.h>
using namespace std;

typedef pair<char, char> card;

int n;
const int MX=109;
card a[MX];

const int D=5;
typedef unsigned int ui;

char colors[D+1]="RGBYW";
char values[D+1]="12345";

int main()
{
    set<card> all_cards;

    cin >> n;
    for(int i=0; i<n; i++)
    {
        string s;
        cin >> s;
        a[i].first=s[0],a[i].second=s[1];
        all_cards.insert(a[i]);
    }

    int types=all_cards.size();

    int result=2*D;

    int bits[2*D];

    const ui bound=1<<(2*D);
    for(ui mask=0; mask<bound; mask++)
    {
        int popc=__builtin_popcount(mask);

        for(int i=0; i<2*D; i++) bits[i]=(mask>>i)&1;

        set<int> masks_guesses;
        for(int i=0; i<n; i++)
        {
            ui curr_guess=0;
            for(int j=0; j<D; j++)
            {
                if(bits[j]==0) continue;
                curr_guess+=(a[i].first==colors[j]?1:0)<<j;
            }

            for(int j=0; j<D; j++)
            {
                if(bits[j+D]==0) continue;
                curr_guess+=(a[i].second==values[j]?1:0)<<(j+D);
            }

            masks_guesses.insert(curr_guess);
        }

        if(masks_guesses.size()==types) result=min(result, popc);
    }

    cout << result;

    return 0;
}
