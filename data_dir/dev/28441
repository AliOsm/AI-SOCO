#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define pii pair<int, int> 
#define vi vector<int>
#define mp make_pair
#define pb push_back

const int N = 1005;
int n, m, w, wei[N], b[N], vis[N], grp[N];
vector<int> groups[N];
int g_num = 0;
vector<int> g[N];

/* Return the total weight and beauty of this group */
pair<int, int> dfs(int u) {
	vis[u] = 1;
	grp[u] = g_num;
	groups[g_num].push_back(u);
	pair<int, int> res = make_pair(wei[u], b[u]);
	for (int j=0; j<g[u].size(); j++) {
		int v = g[u][j];
		if (!vis[v]) {
			pair<int, int> pr = dfs(v);
			res.first += pr.first;
			res.second += pr.second;
		}
	}
	return res;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin>>n>>m>>w;
	for (int i=0; i<n; i++) cin>>wei[i];
	for (int i=0; i<n; i++) cin>>b[i];
	for (int i=0; i<m; i++) {
		int u, v;
		cin>>u>>v;
		u--;
		v--;
		g[u].pb(v);
		g[v].pb(u);
	}
	vector<int> nw, nb;
	for (int i=0; i<n; i++) {
		if (!vis[i]) {
			pair<int, int> pr = dfs(i);
			nw.push_back(pr.first);
			nb.push_back(pr.second);
			g_num++;
		}
	}
	int dp[1005], dp2[1005];
	memset(dp, -1, sizeof(dp));
	dp[0] = 0;
	for (int i=0; i<nw.size(); i++) {
		copy(begin(dp), end(dp), begin(dp2));
		for (int j=w; j>=0; j--) {
			if (dp[j] != -1 && j + nw[i] <= w) {
				if (dp2[j + nw[i]] == -1) dp2[j + nw[i]] = dp[j] + nb[i];
				else {
					dp2[j + nw[i]] = max(dp[j + nw[i]], dp[j] + nb[i]);
				}
			}
		}
		for (int k=0; k<groups[i].size(); k++) {
			for (int j=w; j>=0; j--) {
				int cur_w = wei[groups[i][k]];
				int cur_b = b[groups[i][k]];
				if (dp[j] != -1 && j + cur_w <= w) {
					if (dp2[j + cur_w] == -1) dp2[j + cur_w] = dp[j] + cur_b;
					else {
						dp2[j + cur_w] = max(dp2[j + cur_w], dp[j] + cur_b);
					}
				}
			}
		}
		copy(begin(dp2), end(dp2), begin(dp));
	}
	int res = -1;
	for (int i=0; i<=w; i++) res = max(res, dp[i]);
	cout<<res<<endl;
	return 0;
}