
#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <functional>
using namespace std;
#define ll long long
#define mp make_pair
#define pb push_back
//#define ld long double
const double sn = 1e-6;
struct lim {
	int l, r;
};
struct node {
	int min, max;
};
const int siz = 1000006;
node tree[siz * 4];
int arr[siz];
void build(int node, int s, int e) {
	if (s == e) {
		tree[node].max = arr[s];
		tree[node].min = arr[s];
		return;
	}
	int mid = (s + e) / 2;
	build(node*2, s, mid);
	build(node * 2 + 1, mid+1, e);
	tree[node].max = max(tree[node*2].max, tree[node*2+1].max);
	tree[node].min = min(tree[node * 2].min, tree[node * 2 + 1].min);
}
lim query(int node, int s, int e, int i, bool max) {
	lim err = {-1,-1};
	if (s == e) {
		bool cond = (max?(tree[node].max <= arr[i]): (tree[node].min >= arr[i]));
		if (cond)
			return{ s,e };
		return err;
	}
	if ((max && tree[node].max <= arr[i]) || (!max && tree[node].min >= arr[i])) {
		return{s,e};
	}
	int mid = (s + e) / 2;
	if (i < s) {
		lim l1 = query(node * 2, s, mid, i, max);
		if (l1.l != s)
			return err;
		if (l1.r == mid) {
			lim l2 = query(node * 2 + 1, mid + 1, e, i, max);
			if (l2.l == mid + 1)
				return{s, l2.r};
		}
		return l1;
	}
	if (i > e) {
		lim l1 = query(node*2+1, mid+1, e, i , max);
		if (l1.r != e)
			return err;
		if (l1.l == mid + 1) {
			lim l2 = query(node*2,s,mid,i, max);
			if (l2.r == mid)
				return{l2.l, e};
		}
		return l1;
	}
	if (i <= mid) {
		lim l1 = query(node * 2, s, mid, i, max);
		if (l1.r == mid) {
			lim l2 = query(node * 2 + 1, mid + 1, e, i, max);
			if (l2.l == mid + 1)
				return{l1.l, l2.r};
		}
		return l1;
	}
	lim l1 = query(node * 2 + 1, mid + 1, e, i, max);
	if (l1.l == mid + 1) {
		lim l2 = query(node * 2, s, mid, i, max);
		if (l2.r == mid)
			return{l2.l, l1.r};
	}
	return l1;
}
int n;
vector <int> pos[siz];
ll ans;
int main() {
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%d", &arr[i]);
		pos[arr[i]].push_back(i);
	}
	build(1, 0, n - 1);
	for (int i = 0; i < n; i++) {
		lim l1 = query(1,0,n-1,i,true);
		lim l2 = query(1, 0, n - 1, i, false);
		vector<int> &v = pos[arr[i]];
		int sz = v.size();
		int l = -1, r = sz - 1;
		while (l != r) {
			int mid = (l + r + 1) / 2;
			if (v[mid] < i)
				l = mid;
			else
				r = mid - 1;
		}
		if (l != -1) {
			if(v[l] >= l1.l)
				l1.l = v[l] + 1;
			if(v[l]>=l2.l)
				l2.l = v[l] + 1;
		}
		ans += (ll)arr[i] * (ll)(i - l1.l + 1) * (ll)(l1.r-i+1);
		ans -= (ll)arr[i] * (ll)(i - l2.l + 1)*(ll)(l2.r - i + 1);
	}
	printf("%I64d\n", ans);
	return 0;
}