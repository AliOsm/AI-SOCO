#include "bits/stdc++.h"
#include "ext/pb_ds/tree_policy.hpp"
#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}

const int maxn = 200010;
std::vector<PII> ed;
template<int maxn>
struct DSU{
    int f[maxn];
    PII sedge[maxn],tedge[maxn];
    DSU(){
        init();
    }
    void init(){
        REP(i,0,maxn)f[i] = i;
    }
    int fa(int c){
        if(c==f[c])return c;
        return f[c]=fa(f[c]);
    }
    void merge(int a,int b){
        f[fa(a)] = fa(b);
    }
    bool same(int a,int b){
        return fa(a) == fa(b);
    }
};

DSU<maxn>dsu;
int s,t,ds,dt;
int n,m;
bool check(int node){
	return node!=s && node!=t;
}
bool vis[maxn];
std::vector<PII>ans;
void ff(){
	cout<<"No";exit(0);
}
int main(){
	in(n);in(m);
	REP(i,0,m){
		int a,b;in(a);in(b);
		ed.PB(MP(a,b));
	}
	in(s);in(t);in(ds);in(dt);
	REP(i,0,m){
		if(check(ed[i].fi)&&check(ed[i].se)&&!dsu.same(ed[i].fi,ed[i].se)){
			dsu.merge(ed[i].fi,ed[i].se);
			ans.PB(ed[i]);
		}
	}
	REP(i,0,m){
		if(ed[i].fi == s){
			dsu.sedge[dsu.fa(ed[i].se)] = ed[i];
		}else if(ed[i].se == s){
			dsu.sedge[dsu.fa(ed[i].fi)] = ed[i];
		}
		if(ed[i].fi == t){
			dsu.tedge[dsu.fa(ed[i].se)] = ed[i];
		}else if(ed[i].se == t){
			dsu.tedge[dsu.fa(ed[i].fi)] = ed[i];
		}
	}
	REP(i,1,n+1){

		if(i == s || i == t)continue;
		if(dsu.fa(i)!=i)continue;
		if(dsu.sedge[i] == MP(0,0) && dsu.tedge[i]==MP(0,0))ff();

		if(dsu.sedge[i] == MP(0,0) && dsu.tedge[i]!=MP(0,0)){
			dt--;
			dsu.merge(dsu.tedge[i].fi,dsu.tedge[i].se);
			if(dt<0){
				ff();
			}
			ans.PB(dsu.tedge[i]);
		}else if(dsu.sedge[i] != MP(0,0) && dsu.tedge[i]==MP(0,0)){
			ds--;
			dsu.merge(dsu.sedge[i].fi,dsu.sedge[i].se);
			if(ds<0){
				ff();
			}
			ans.PB(dsu.sedge[i]);
		}
	}
	REP(i,1,n+1){
		if(i == s || i == t)continue;	
		if(dsu.fa(i)!=i)continue;
		if(dsu.sedge[i] != MP(0,0) && dsu.tedge[i]!=MP(0,0)){
			dt--;
			dsu.merge(dsu.tedge[i].fi,dsu.tedge[i].se);
			if(dt<0){
				ff();
			}
			ans.PB(dsu.tedge[i]);
			ds--;
			dsu.merge(dsu.sedge[i].fi,dsu.sedge[i].se);
			if(ds<0){
				ff();
			}
			ans.PB(dsu.sedge[i]);
			break;
		}
	}
	REP(i,1,n+1){
		if(i == s || i == t)continue;	
		if(dsu.fa(i)!=i)continue;
		if(!dsu.same(s,i) && !dsu.same(t,i)){
			if(ds){
				ds--;
				dsu.merge(dsu.sedge[i].fi,dsu.sedge[i].se);
				if(ds<0){
					ff();
				}
				ans.PB(dsu.sedge[i]);
			}else if(dt){
				dt--;
				dsu.merge(dsu.tedge[i].fi,dsu.tedge[i].se);
				if(dt<0){
					ff();
				}
				ans.PB(dsu.tedge[i]);
			}else{
				ff();
			}
		}
	}
	if(sz(ans)==n-1){
		cout<<"Yes"<<endl;
		REP(i,0,sz(ans)){
			printf("%d %d\n",ans[i].fi,ans[i].se);
		}
		return 0;
	}
	if(!dsu.same(s,t)){
		if(ds<1 || dt<1)ff();
		if(dsu.tedge[s] == MP(0,0))ff();
		ans.PB(dsu.tedge[s]);
		assert(sz(ans)==n-1);
		cout<<"Yes"<<endl;
		REP(i,0,sz(ans)){
			printf("%d %d\n",ans[i].fi,ans[i].se);
		}
		return 0;

	}
	return 0;
}