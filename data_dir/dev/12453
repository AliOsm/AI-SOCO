#include <iostream>
#include <iomanip>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <string>
#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <bitset>
#include <deque>
#include <map>
#include <queue>
#include <set>
#include <sstream>
using namespace std;

typedef long long ll;

int n, t, sz;
vector<int> pos[12];
vector<int> g[1000];
double res[1000];

void DFS(int v, double w, int lev) {
	if (w == 0 || lev== n + 1)
		return;
	res[v] += w;
	double ex = max(0.0, res[v] - 1);
	res[v] = min(res[v], 1.0);
	for (int i = 0; i < g[v].size(); ++i)
		DFS(g[v][i], ex / 2, lev + 1);
}

int main(int argc, char **argv) {
//	freopen("in.txt", "r", stdin);
	scanf("%d%d", &n, &t);
	pos[1].push_back(1);
	for (int i = 1; i < n; ++i) {
		vector<int> &v = pos[i];
		for (int j = 0; j < v.size(); ++j) {
			g[v[j]].push_back(v[j] + i);
			g[v[j]].push_back(v[j] + i + 1);
			pos[i + 1].push_back(v[j] + i);
			pos[i + 1].push_back(v[j] + i + 1);
		}
		sort(pos[i + 1].begin(), pos[i + 1].end());
		pos[i + 1].resize(unique(pos[i + 1].begin(), pos[i + 1].end()) - pos[i + 1].begin());
	}
	int sz = 1;
	for (int i = 1; i <= t; ++i)
		DFS(1, 1, 1);
	int full = 0, mx = n * (n + 1 ) / 2;
	for (int i = 1; i <= mx; ++i)
		if (res[i] == 1)
			++full;
	printf("%d\n", full);
	return 0;
}
