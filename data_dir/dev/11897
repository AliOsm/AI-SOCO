#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace __gnu_pbds;
using namespace std;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
typedef tree<pair<int,int> ,null_type,less<pair<int,int> >,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
long long MOD = 1e9+7;
pair<int,int> dx[4] = {{1,0},{-1,0},{0,1},{0,-1}};
long long fastpow(long long x,long long k)
{
    if(!k)
        return 1;
    if(k & 1)
        return ((x * fastpow(x,k-1) % MOD) % MOD) % MOD;
    long long ans = fastpow(x,k/2);
    ans %= MOD;
    ans *= ans;
    ans %= MOD;
    return ans;
}
long long sumF(long long x)
{
    int s = 0;
    while(x)
        s += x%10,x /= 10;
    return s;
}
int arr[405];
pair<pair<int,int>,pair<int,int> > Trucks[250005];
bool isGood(int idx,long long V)
{
    int st = Trucks[idx].first.first;
    int refillTimes = Trucks[idx].second.second;
    long long curFuel = V;
    for(int i = st;i < Trucks[idx].first.second;i++)
    {
        long long fuelNeeded = arr[i+1] - arr[i];
        fuelNeeded *= Trucks[idx].second.first;
        if(curFuel - fuelNeeded < 0)
        {
            refillTimes--;
            curFuel = V;
            if(refillTimes < 0 || curFuel - fuelNeeded < 0)
                return false;
        }
        curFuel -= fuelNeeded;
    }
    return true;
}
int main()
{
    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
    int n,m;
    cin >> n >> m;
    for(int i = 1;i <= n;i++)
        cin >> arr[i];
    for(int i = 1;i <= m;i++)
        scanf("%d %d %d %d",&Trucks[i].first.first,&Trucks[i].first.second,&Trucks[i].second.first,&Trucks[i].second.second);
    shuffle(Trucks + 1, Trucks + m + 1, rng);
    long long BestFuel = 0;
    for(int i = 1;i <= m;i++)
    {
        long long Lo = BestFuel;
        long long Hi = 1e18;
        if(isGood(i,BestFuel))
            continue;
        while(Lo < Hi)
        {
            long long mid = Lo + (Hi - Lo)/2;
            if(isGood(i,mid))
                Hi = mid;
            else
                Lo = mid+1;
        }
        BestFuel = max(BestFuel,Lo);
    }
    cout << BestFuel;
    return 0;
}
