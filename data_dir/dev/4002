#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <cstdio>
#include <string>
#include <stdlib.h>
#include <set>
#include <vector>
#include <list>
#include <algorithm>
#include <regex>
#include <math.h>
#include <map>
#include <iterator>
#include <climits>
#include <numeric>
#include <bitset>
#include <unordered_map>
#include <unordered_set>
#include <iomanip>
#include <queue>
#include <deque>
#include <stack>
#include <array>
#include <valarray>
#include <complex>

using namespace std;

typedef array<int, 2> hv;
typedef int integer;
#define int long long
#define double long double
#define make(type, x) type x; cin>>x
#define make2(type, x, y) type x, y; cin>>x>>y
#define make3(type, x, y, z) type x, y, z; cin>>x>>y>>z
#define make4(type, x, y, z, q) type x, y, z, q; cin>>x>>y>>z>>q
#define ALL(x) (x).begin(), (x).end()
#define FORIT(p) for(auto it = p.begin(); it != p.end(); it++)
#define FOR(b) for(int i = 0; i <(b); i++)
#define VI vector<int>
#define VVI vector<vector<int>>
#define PII pair<int, int>
#define PPII pair<PII, int>
#define M7 1000000007l;
#define M9 1000000009l;



void Solve() {
	make2(int, n, T);
	vector<PII> a(n);
	FOR(n) cin >> a[i].second;
	FOR(n) cin >> a[i].first;
	sort(ALL(a));
	int curT = 0, curS = 0;
	int i = -1;
	FOR(n) curT+= a[i].first * a[i].second, curS += a[i].second;
	if (curT > T * curS) {
		i = n - 1;
		for(; i >= 0 && curT > T * curS; i--)
			curT -= a[i].first * a[i].second, curS -= a[i].second;
		i++;
		if (curT > T * curS) return void(cout << 0);
	}
	else if (curT < T * curS) {
		i = 0;
		for (; i < n && curT < T * curS; i++)
			curT -= a[i].first * a[i].second, curS -= a[i].second;
		i--;
		if (curT < T * curS) return void(cout << 0);
	}
	cout << setprecision(15) << fixed << curS + (i == -1?0:((double)(curS*T - curT)) / (a[i].first - T));
}

integer main() {
	ios_base::sync_with_stdio(0);
	cin.tie();
#if  _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	Solve();
	while (!cin.eof()) {
		string s = "_";
		do getline(cin, s);
		while (!cin.eof() && !s.empty());
		if (cin.eof()) return 0;
		FOR(3) cout << endl;
		Solve();
	}
#else
	Solve();
#endif
	return 0;
}