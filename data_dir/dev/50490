#include <bits/stdc++.h>
using namespace std;

#define N 1000005

typedef long long ll;
const int mod = 998244353;
int n, ans, tmp;

int powmod(int a, ll b) {
    int rtn = 1;
    for (; b; b >>= 1, a = 1ll * a * a % mod) {
        if (b & 1) rtn = 1ll * rtn * a % mod;
    }
    return rtn;
}

int fc[N], rfc[N], ri[N];
void factorial() {
    fc[0] = fc[1] = rfc[0] = rfc[1] = ri[1] = 1;
    for (int i = 2; i < N; i ++) {
        ri[i] = 1ll * (mod - mod / i) * ri[mod%i] % mod;
        fc[i] = 1ll * fc[i-1] * i % mod;
        rfc[i] = 1ll * rfc[i-1] * ri[i] % mod;
    }
}

int C(int n, int k) {
    if (k < 0 || k > n) return 0;
    if (k == 0 || k == n) return 1;
    return 1ll * fc[n] * rfc[k] % mod * rfc[n-k] % mod;
}

int main() {
    factorial();
    scanf("%d", &n);
    for (int a = 1; a <= n; a ++) {
        tmp = (powmod(3, n - a) + mod - 1) % mod;
        tmp = powmod(tmp, n) % mod;
        (tmp += (mod - powmod(3, 1ll * n * (n - a))) % mod) %= mod;
        tmp = 1ll * tmp * C(n, a) % mod;
        if (!(a & 1)) tmp = (mod - tmp) % mod;
        (ans += tmp) %= mod;
    }
    ans = 3ll * ans % mod;
    tmp = 2ll * ((powmod((powmod(3, n) + mod - 3) % mod, n) + mod - powmod(3, 1ll * n * n)) % mod) % mod;
    tmp = (mod - tmp) % mod;
    (ans += tmp) %= mod;
    printf("%d\n", ans);
    return 0;
}
