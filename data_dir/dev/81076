#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
#define CLR(a,v) memset(a,v,sizeof(a))
#define sz(v) (int)v.size()
typedef vector<int> vi;
#define all(v) v.begin(),v.end()

const int MAX = 5e5 + 5;
int n, k, d, a[MAX], lim[MAX];
bool dp[MAX], seg[MAX * 4];

void update(int idx, int i = 0, int s = 0, int e = n) {
	if (s == e) {
		seg[i] = 1;
		return;
	}
	int mid = (s + e) >> 1, l = (i << 1) + 1, r = l + 1;
	if (idx <= mid)
		update(idx, l, s, mid);
	else
		update(idx, r, mid + 1, e);
	seg[i] = seg[l] || seg[r];
}

bool query(int ql, int qr, int i = 0, int s = 0, int e = n) {
	if (s >= ql && e <= qr)
		return seg[i];
	if (s > qr || e < ql)
		return 0;
	int mid = (s + e) >> 1, l = (i << 1) + 1, r = l + 1;
	return query(ql, qr, l, s, mid) || query(ql, qr, r, mid + 1, e);
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
//	freopen("out.txt", "w", stdout);
#endif
	cin >> n >> k >> d;
	for (int i = 1; i <= n; ++i)
		scanf("%d", &a[i]);
	sort(a + 1, a + n + 1);

	lim[1] = 1;
	for (int i = 2; i <= n; ++i) {
		lim[i] = lim[i - 1];
		while (a[i] - a[lim[i]] > d)
			++lim[i];
	}

	dp[0] = 1;
	update(0);
	for (int i = 1; i <= n; ++i) {
		int l = lim[i] - 1, r = i - k;
		if (l > r)
			continue;
		dp[i] = query(l, r);
		if (dp[i])
			update(i);
	}
	puts(dp[n] ? "YES" : "NO");
}
