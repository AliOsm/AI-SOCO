#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define SPEED ios_base::sync_with_stdio(false); cin.tie(NULL);
#define FOR(i, a, b) for (ll i = a; i < b; ++i)
#define RFOR(i, b, a) for (ll i = b; i >= a; --i)
#define ALL(x) x.begin(), x.end()
#define DEBUG(args...) { string _s = #args; replace(ALL(_s), ' ', '\0');\
replace(ALL(_s), ',', ' ');\
stringstream _ss(_s); istream_iterator<string> _it(_ss); _debug(_it, args);}
#define endl "\n"
#define F first
#define S second
#define pb(x) push_back(x)a
#define mp(x, y) make_pair(x, y)

using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

void _debug(istream_iterator<string>) {}
template<typename T, typename... Args>
void _debug(istream_iterator<string> it, T first, Args... args) {
    cerr << ">> " << *it << " : " << first << endl; _debug(++it, args...);
}
template <typename T1, typename T2>
inline ostream& operator << (ostream& out, const pair<T1, T2>& p) {
    return out << "(" << p.F << ", " << p.S << ")";
}
template<typename T>
inline ostream& operator << (ostream& out, const vector<T>& v) {
    if (v.empty()) return out << "[]";
    else { out << '['; for (auto& e : v) { out << e << ", "; } return out << "\b\b]"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const set<T>& s) {
    if (s.empty()) return out << "{}";
    else { out << '{'; for (auto& e : s) { out << e << ", "; } return out << "\b\b}"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const unordered_set<T>& s) {
    return out << set<T>(ALL(s));
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const map<T1, T2>& m) {
    if (m.empty()) return out << "{}";
    out << '{'; for (auto& p : m) { out << p << ", "; } return out << "\b\b}";
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const unordered_map<T1, T2>& m) {
    return out << map<T1, T2>(ALL(m));
}
template<typename T>
inline ostream& operator << (ostream& out, const ordered_set<T>& s) {
    return out << set<T>(ALL(s));
}

typedef long long ll;
typedef long double ld;
typedef vector<long long> vll;
typedef pair<ll, ll> pll;
typedef vector<pair<ll, ll>> vpll;
typedef unordered_map<ll, ll> STll;
/************************************** MAIN PROGRAM ********************************************/
const bool TRAIN = true;
const bool ROAD = false;

struct edge {
    int u, v;
    ll weight;
    bool type;

    bool operator < (const edge& that) {
        return type > that.type;
    }
};
const int MAX = 1e5 + 1;
const ll INF = 1e18;
vector<edge> adj[MAX];
ll dist[MAX];
bool camefrom[MAX];
set<tuple<ll, int>> pq;

void relax(int v) {
    for (auto edge : adj[v]) {
        auto [v, w, weight, type] = edge;
        if (dist[w] >= dist[v] + weight) {
            pq.erase({dist[w], w});
            dist[w] = dist[v] + weight;
            camefrom[w] = type;
            pq.insert({dist[w], w});
        }
    }
}
void dijkstra(int s) {
    memset(camefrom, true, sizeof camefrom);
    FOR(i, 0, MAX) {
        dist[i] = INF;
    }
    dist[s] = 0;
    pq.insert({0, s});
    camefrom[s] = 0;

    while (!pq.empty()) {
        auto [_,  v] = *pq.begin();
        pq.erase(pq.begin());
        relax(v);
    }
}

int main()
{
    //freopen("input.txt", "r", stdin);
    SPEED
    //cout << edge(2, 3, 3, 0).u;
    int n, m, k;
    cin >> n >> m >> k;
    for (int i = 0; i < m; ++i) {
        int u, v;
        cin >> u >> v;
        ll w;
        cin >> w;
        u--, v--;
        edge e1 = {u, v, w, ROAD};
        edge e2 = {v, u, w, ROAD};
        adj[u].push_back(e1);
        adj[v].push_back(e2);
    }
    for (int i = 0; i < k; ++i) {
        int s;
        cin >> s;
        s--;
        ll w;
        cin >> w;
        edge e1 = {0, s, w, TRAIN};
        edge e2 = {s, 0, w, TRAIN};
        adj[s].push_back(e2);
        adj[0].push_back(e1);
    }
    for (int v = 0; v < n; ++v) {
        sort(ALL(adj[v]));
    }
    dijkstra(0);
    int ans = 0;
    for (int v = 0; v < n; ++v) {
        ans += camefrom[v];
       // cout << "v " << v << " : " << camefrom[v] << endl;
    }
    //DEBUG(dist[1])
    ans = k - ans;
    cout << ans;
}
/************************************** END OF PROGRAM ******************************************/
/** Stuff you should look for:
 * int overflow, array bounds, over-counting
 * special cases (n=1?), set/unordered_set TLE, multi-set/set error
 * do something instead of nothing and stay organized
 */
