#include <bits/stdc++.h>
#include <ctime>
using namespace std;

#define space ' '
#define enter "\n"
#define fi first
#define se second
#define INF 2000000007
#define mp make_pair

typedef long long ll;
typedef unsigned long long ull;
typedef pair <int, int> pii;
typedef set <int> si;
typedef map <int, int> mii;
typedef pair <ll, ll> pll;
typedef vector <int> vi;
typedef vector <pii> vii;

struct KArs
{
    int x, y, dir;

    KArs () {}
    KArs (int x, int y, int dir) : x(x), y(y), dir(dir % 4) {}
};

const int MAXN = (int)1e3 + 10;
const int dx[4] = {-1, 0, 1, 0};
const int dy[4] = {0, 1, 0, -1};

int n, m;
int dist[MAXN][MAXN][4], a[MAXN][MAXN];
int sx, sy, fx, fy;
queue <KArs> q;

string nxt[270], open[270];

int main ()
{
    ios_base::sync_with_stdio(false);
    memset(dist, 127, sizeof(dist));
    nxt['+'] = "++++";
    nxt['-'] = "-|-|";
    nxt['|'] = "|-|-";
    nxt['^'] = "^>v<";
    nxt['>'] = ">v<^";
    nxt['v'] = "v<^>";
    nxt['<'] = "<^>v";
    nxt['L'] = "LURD";
    nxt['U'] = "URDL";
    nxt['R'] = "RDLU";
    nxt['D'] = "DLUR";
    nxt['*'] = "****";

    open['+'] = "1111";
    open['-'] = "0101";
    open['|'] = "1010";
    open['^'] = "1000";
    open['>'] = "0100";
    open['v'] = "0010";
    open['<'] = "0001";
    open['L'] = "1110";
    open['U'] = "0111";
    open['R'] = "1011";
    open['D'] = "1101";
    open['*'] = "0000";
    cin >> n >> m;
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= m; j++)
        {
            char s;
            cin >> s;
            a[i][j] = s;
        }
    cin >> sx >> sy >> fx >> fy;
    q.push(KArs(sx, sy, 0));
    dist[sx][sy][0] = 0;
    while (!q.empty())
    {
        int x = q.front().x, y = q.front().y, dir = q.front().dir;
        q.pop();
        if (dist[x][y][dir] + 1 < dist[x][y][(dir + 1) % 4])
            dist[x][y][(dir + 1) % 4] = dist[x][y][dir] + 1, q.push(KArs(x, y, dir + 1));
        char cur = nxt[a[x][y]][dir], to;
        for (int i = 0; i < 4; i++)
        {
            int X = x + dx[i], Y = y + dy[i];
            if (!X || !Y || X == n + 1 || Y == m + 1)
                continue;
            to = nxt[a[X][Y]][dir];
            if (open[cur][i] == '1' && open[to][(i + 2) % 4] == '1')
                if (dist[x][y][dir] + 1 < dist[X][Y][dir])
                    dist[X][Y][dir] = dist[x][y][dir] + 1, q.push(KArs(X, Y, dir));
        }
    }
    int ans = dist[0][0][0];
    for (int i = 0; i < 4; i++)
        ans = min(ans, dist[fx][fy][i]);
    if (ans == dist[0][0][0])
        cout << -1;
    else
        cout << ans;
}
