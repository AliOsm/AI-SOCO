#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
#define ll long long
#define rep(i,a,n) for (int i=a;i<n;i++)
#define per(i,a,n) for (int i=n-1;i>=a;i--)
#define setDP(arr) memset(arr,-1,sizeof arr)
#define Clear(arr) memset(arr,0,sizeof arr)
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define fi first
#define se second
#define sz(x) ((int)(x).size())
#define In_the_name_of_allah_the_merciful ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define Alhamdulillah return 0;
typedef tree<int, null_type, less<int>,rb_tree_tag,tree_order_statistics_node_update> ost;
const int N = 1e6+6;
int a[N],n;
ll l[N],r[N];
int main()
{
    ///In_the_name_of_allah_the_merciful
    scanf("%d",&n);
    rep(i,0,n)
        scanf("%d",&a[i]);
    ost tree;
    rep(i,0,n){
        if (i > 0){
            int order = tree.order_of_key(a[i]);
            order = sz(tree) - order;
            if (tree.find(a[i]) != tree.end())
                order--;
            l[i] = order;
        }
        tree.insert(a[i]);
    }
    tree.clear();
    per(i,0,n){
        if (i < n-1){
            int order = tree.order_of_key(a[i]);
            r[i] = order;
        }
        tree.insert(a[i]);
    }
    ll ans = 0;
    rep(i,1,n-1)
        ans += (l[i]*r[i]);
    cout << ans << endl;
    Alhamdulillah
}
