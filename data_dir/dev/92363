//#include<iostream>
//#include<cstring>
#include<bits/stdc++.h>
#include<tr1/unordered_map>
using namespace std;
long long MOD = 1000000007ll;
const int MAXN = 200050;

inline void print(char pt) {
	printf("%c\n", pt);
}
inline void print(int pt) {
	printf("%d\n", pt);
}
inline void print(long long pt) {
	printf("%I64d\n", pt);
}
inline void print(double pt) {
	printf("%f\n", pt);
}
inline void print(char pt[]) {
	printf("%s\n", pt);
}

inline void scan(int &pt) {
	scanf("%d", &pt);
}
inline void scan(char &pt) {
	scanf("%c", &pt);
}
inline void scan(long long &pt) {
	scanf("%I64d", &pt);
}
inline void scan(double &pt) {
	scanf("%lf", &pt);
}
inline void scan(char pt[]) {
	scanf("%s", pt);
}
struct pii {
	int a;
	int b;
	friend int operator<(pii a, pii b) {
		return a.a < b.a;
	}
};

struct str {
	char val[1005];
	str() {
		memset(val, 0, sizeof(val));
	}
	friend int operator<(str a, str b) {
		return strcmp(a.val, b.val) < 0;
	}
};

//int gcd(int x, int y) {
//	return y ? gcd(y, x % y) : x;
//}
//int lcm(int x, int y) {
//	return x * (y / gcd(x, y));
//}
long long gcd(long long x, long long y) {
	return y ? gcd(y, x % y) : x;
}
long long lcm(long long x, long long y) {
	return x * (y / gcd(x, y));
}

int bits[50];
void getbits() {
	for (int i = 0; i < 30; i++) {
		bits[i] = 1 << i;
	}
}

long long Q_pow(long long x, long long y) {
	long long res = 1;
	while (y) {
		if (y % 2 == 1) {
			res *= x;
			res %= MOD;
		}
		x = x * x;
		x %= MOD;
//		if(x<=1e-5){
//			return 0;
//		}
		y /= 2;
	}
	return res;
}

//返回d=gcd(a,b);和对应于等式ax+by=d中的x,y
long long extend_gcd(long long a, long long b, long long &x, long long &y) {
	if (a == 0 && b == 0)
		return -1; //无最大公约数
	if (b == 0) {
		x = 1;
		y = 0;
		return a;
	}
	long long d = extend_gcd(b, a % b, y, x);
	y -= a / b * x;
	return d;
}
//*********求逆元素*******************
//ax = 1(mod n)
long long mod_reverse(long long a, long long MOD) {
	long long x, y;
	long long d = extend_gcd(a, MOD, x, y);
	if (d == 1)
		return (x % MOD + MOD) % MOD;
	else
		return -1;
}

struct edge {
	int to, w, next;
} e[2 * MAXN];
int head[MAXN];
int nowpos_e = 0;

void addedge(int from, int to, int w) {
	e[nowpos_e].to = to;
	e[nowpos_e].w = w;
	e[nowpos_e].next = head[from];
	head[from] = nowpos_e;
	nowpos_e++;

	swap(from, to);

	e[nowpos_e].to = to;
	e[nowpos_e].w = w;
	e[nowpos_e].next = head[from];
	head[from] = nowpos_e;
	nowpos_e++;
}

int tot, ver[2 * MAXN], R[2 * MAXN], first[MAXN], dir[MAXN], vis[MAXN];
//ver:节点编号 R：深度 first：点编号位置 dir：距离

void dfs(int from, int dep) {
	vis[from] = 1;
	tot++;
	ver[tot] = from;
	first[from] = tot;
	R[tot] = dep;
	for (int k = head[from]; k != -1; k = e[k].next) {
		if (!vis[e[k].to]) {
			int to = e[k].to, w = e[k].w;
			dir[to] = dir[from] + w;
			dfs(to, dep + 1);
			ver[++tot] = from;
			R[tot] = dep;
		}
	}
}

int dp[2 * MAXN][32];

void ST(int n) {
	for (int i = 1; i <= n; i++)
		dp[i][0] = i;
	for (int j = 1; (1 << j) <= n; j++) {
		for (int i = 1; i + (1 << j) - 1 <= n; i++) {
			int a = dp[i][j - 1], b = dp[i + (1 << (j - 1))][j - 1];
			dp[i][j] = R[a] < R[b] ? a : b;
		}
	}
}
//中间部分是交叉的。
int RMQ(int l, int r) {
	int k = 0;
	while ((1 << (k + 1)) <= r - l + 1)
		k++;
	int a = dp[l][k], b = dp[r - (1 << k) + 1][k]; //保存的是编号
	return R[a] < R[b] ? a : b;
}

int LCA(int u, int v) {
	int x = first[u], y = first[v];
	if (x > y)
		swap(x, y);
	int res = RMQ(x, y);
	return ver[res];
}

int getlength(int u, int v) {
	int lca = LCA(u, v);
	return dir[u] + dir[v] - dir[lca] * 2;
}

int n, m, k;
char stra[200];
int inputa[200050];

int main() {

	memset(head, -1, sizeof(head));

	scan(n);
	for (int i = 0; i < n - 1; i++) {
		scan(inputa[i]);
		int from = inputa[i];
		int to = i + 2;
		addedge(from, to, 1);
	}

	dfs(1, 1);
	ST(2 * n - 1);

	int A = 1;
	int B = 1;
	int nowmaxlength = 0;
	for (int nowinput = 0; nowinput < n - 1; nowinput++) {
		int from = inputa[nowinput];
		int to = nowinput + 2;
		int nowlenth;

		//cout << ":::" << "to:" << to << endl;
		//cout << "A:" << A << "B:" << B << endl;
		//cout << "nowmaxlength:" << nowmaxlength << endl;

		nowlenth = getlength(to, A);
		//cout << "toA:" << nowlenth << endl;

		if (nowmaxlength < nowlenth) {
			nowmaxlength = nowlenth;
			B = to;
			print(nowmaxlength);
			continue;
		}

		nowlenth = getlength(to, B);
		//cout << "toB:" << nowlenth << endl;

		if (nowmaxlength < nowlenth) {
			nowmaxlength = nowlenth;
			A = to;
			print(nowmaxlength);
			continue;
		}
		print(nowmaxlength);
	}

	return 0;
}
