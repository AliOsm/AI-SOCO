                     /*"Success isn't permanent, failure isn't fatal,
                                      it's the courage to continue that counts"*/
#include<bits/stdc++.h>
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
using namespace std;
const ll mod=1e9+7;         
const int N=2e5+4;
int main()
{   
    int t;
    
    scn(t);
    
    while(t--)
    {
        int n,m;
        
        scn(n);  scn(m);
        
        string s[n];
        
        int a[n][m];
        
        memset(a,0,sizeof(a));
        
        rep(i,0,n)
        cin>>s[i];
        
        int cnt=0;
        
        bool ok[5]={0};
        
        rep(i,0,n)
        {
            bool here=1;
            
            rep(j,0,m)
            {
                if(s[i].at(j)=='A')
                cnt++,a[i][j]=1;
                else
                here=0;
            }
            
            if(here)
            {
                if(i==0||i==n-1)
                ok[1]=1;
                else
                ok[2]=1;
            }
        }
        
        rep(i,0,m)
        {
            bool here=1;
            
            rep(j,0,n)
            {
                if(s[j].at(i)!='A')
                here=0;
            }
            
            if(here)
            {
                if(i==0||i==m-1)
                ok[1]=1;
                else
                ok[2]=1;
            }
        }
        
        if(cnt==0)
        {
            printf("MORTAL\n");
            
            continue;
        }
        
        if(cnt==n*m)
        ok[0]=1;
        
        if(a[0][0]||a[0][m-1]||a[n-1][0]||a[n-1][m-1])
        ok[2]=1;
        
        rep(i,0,m-1)
        if(a[0][i]||a[n-1][i])
        ok[3]=1;
        
        rep(i,0,n-1)
        if(a[i][0]||a[i][m-1])
        ok[3]=1;
        
        ok[4]=1;
        
        rep(i,0,5)
        if(ok[i])
        {
            priln(i);
            
            break;
        }
    }
    return 0;
}