/**
 * @author khokharnikunj8
 */

#include <bits/stdc++.h>

using namespace std;

class BJustEatIt {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        vector<int> ar(n);
        for (int i = 0; i < n; i++) in >> ar[i];
        long long sum = 0;
        for (int i = 0; i < n; i++) sum += ar[i];
        vector<long long> dp(n, LONG_LONG_MIN / 10);
        vector<int> where(n);
        dp[0] = ar[0];
        if (dp[0] >= sum) {
            out << "NO\n";
            return;
        }
        where[0] = 0;
        for (int i = 1; i < n; i++) {
            if (ar[i] >= dp[i - 1] + ar[i]) {
                dp[i] = ar[i];
                where[i] = i;
            } else {
                dp[i] = dp[i - 1] + ar[i];
                where[i] = where[i - 1];
            }
            if (dp[i] >= sum) {
                if (!(i == n - 1 && where[i] == 0)) {
                    out << "NO\n";
                    return;
                }
            }
        }
        out << "YES\n";
    }
};


int main() {
	BJustEatIt solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}
