#include <bits/stdc++.h>
#define LL long long
using namespace std;

vector<int> convert(LL x) {
	vector<int> v;
	while(x) {
		v.push_back(x%2);
		x /= 2;
	}
	while(v.size() < 33) v.push_back(0);
	reverse(v.begin(), v.end());
	return v;
}

struct Node {
	Node *zero, *one;
	int cnt = 0;
};

Node* build(vector<LL> &arr) {
	Node *node = new Node();
	for(LL x : arr) {
		Node *curr = node;
		vector<int> v = convert(x);
		for(int bit : v) {
			if(bit == 0) {
				if(curr->zero == NULL) curr->zero = new Node();
				curr = curr->zero;
				curr->cnt++;
			}
			else {
				if(curr->one == NULL) curr->one = new Node();
				curr = curr->one;
				curr->cnt++;
			}
		}
	}
	return node;
}

int main() {
	LL n;
	scanf("%lld", &n);
	vector<LL> a(n), p(n);
	for(int i = 0; i < n; i++) scanf("%lld", &a[i]);
	for(int i = 0; i < n; i++) scanf("%lld", &p[i]);
	Node *node = build(p);
	for(LL x : a) {
		vector<int> v = convert(x);
		Node *curr = node;
		LL ans = 0;
		for(int bit : v) {
			ans *= 2;
			if(bit == 0) {
				if(curr->zero && curr->zero->cnt) {
					curr = curr->zero;
					curr->cnt--;
				}
				else {
					curr = curr->one;
					curr->cnt--;
					ans++;
				}
			}
			else {
				if(curr->one && curr->one->cnt) {
					curr = curr->one;
					curr->cnt--;
				}
				else {
					curr = curr->zero;
					curr->cnt--;
					ans++;
				}
			}
		}
		cout<<ans<<" ";
	}
	return 0;
}
