#include<bits/stdc++.h>
using namespace std;
typedef long long ll;



const int N = 1e5 + 5, S = sqrt(N) + 3;





int n, w, c[N], p[N], pp[N], cc[N], num[N];

int numb[N], szz;
ll slazy[N];
bool used[N];


inline bool cmp1(int x, int y){
    return c[x] < c[y];
}

inline bool cmp2(int x, int y){
    return p[x] < p[y];
}

inline ll SS(ll x1, ll y1, ll x2, ll y2, ll x3, ll y3){
    return x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2);
}

struct SQRT_CHT{
    int l, r, q[S + 10], sz, iter;
    SQRT_CHT(){
        sz = 0;
        iter = 1;
    }
    ll blazy;
    inline void upd(int pos){
        for(int i = l; i <= pos; i++){
            slazy[i]++;
        }
        sz = 0;
        iter = 1;
        for(int i = l; i <= r; i++){
            if(used[i]){
                while(sz >= 2 && SS(p[pp[q[sz - 1]]], slazy[q[sz - 1]] * p[pp[q[sz - 1]]], p[pp[q[sz]]], slazy[q[sz]] * p[pp[q[sz]]], p[pp[i]], slazy[i] * p[pp[i]]) >= 0){
                    sz--;
                }
                q[++sz] = i;
            }
        }
    }
    inline ll get(int x){
        return blazy * p[pp[x]] + slazy[x] * p[pp[x]];
    }
    inline pair < ll, int > get_ans(){
        if(sz == 0){
            return make_pair(0, 0);
        }
        while(iter + 1 <= sz && get(q[iter]) < get(q[iter + 1])){
            iter++;
        }
        return make_pair(get(q[iter]), p[pp[q[iter]]]);
    }
};
SQRT_CHT B[N / S + 1000];

inline void update(int x){
    int pos = num[x];
    used[pos] = true;
    B[numb[pos]].upd(pos);
    for(int i = 1; i < numb[pos]; i++){
        B[i].blazy++;
    }
}


int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    cin >> n >> w;
    for(int i = 1; i <= n; i++){
        cin >> p[i] >> c[i];
        pp[i] = cc[i] = i;
    }
    for(int i = 1, j = 1; i <= n; i += S, j++){
        B[j].l = i;
        B[j].r = min(n, i + S - 1);
        szz = j;
        for(int k = B[j].l; k <= B[j].r; k++){
            numb[k] = j;
        }
    }
    sort(cc + 1, cc + n + 1, cmp1);
    sort(pp + 1, pp + n + 1, cmp2);
    for(int i = 1; i <= n; i++){
        num[pp[i]] = i;
    }
    for(int i = 0, j = 0; i <= c[cc[n]] + 1; i++){
        while(j <= n && c[cc[j]] < i){
            update(cc[j++]);
        }
        pair < ll, int > it = make_pair(0, 0);
        for(int k = 1; k <= szz; k++){
            it = max(it, B[k].get_ans());
        }
        cout << it.first + 1ll * i * w * (n - j + 1) << " " << it.second << "\n";
    }
}
