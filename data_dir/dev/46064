#include <iostream>
#include <vector>
#include <stack>

using namespace std;

void solve()
{
    int no_of_elements, k;
    cin >> no_of_elements >> k;
    
    vector <int> A(no_of_elements + 5, 0);
    for(int i = 1; i <= no_of_elements; i++)
    {
        cin >> A[i];
    }
    
    vector <int> left_greater(no_of_elements + 1, 0);
    stack <int> S;
    S.push(0);
    for(int i = 1; i <= no_of_elements; i++)
    {
        while(S.size() > 1 && A[S.top()] < A[i])
        {
            S.pop();
        }
        
        left_greater[i] = S.top();
        S.push(i);
    }
    
    while(!S.empty())
    {
        S.pop();
    }
    
    vector <int> right_greater(no_of_elements + 1, 0);
    S.push(no_of_elements + 1);
    for(int i = no_of_elements; i >= 1; i--)
    {
        while(S.size() > 1 && A[S.top()] < A[i])
        {
            S.pop();
        }
        
        right_greater[i] = S.top(); //cout << "Right " << i << " = " << right_greater[i] << "\n";
        S.push(i);
    }
    
    int k_exists = false, possible = (A[1] == k && no_of_elements == 1 ? true : false);
    for(int i = 1; i <= no_of_elements; i++)
    {
        if(A[i] == k)
        {
            k_exists = true;
        }
    }
    
    for(int i = 1; i <= no_of_elements; i++)
    {
        if(A[i] < k)
        {
            continue;
        }
        
        if(left_greater[i] != 0 && i - left_greater[i] <= 2)
        {   //cout << "i = " << i << " Left = " << left_greater[i] << "\n";
            possible = true;
        }
        
        if(right_greater[i] != no_of_elements + 1 && right_greater[i] - i <= 2)
        {   //cout << "i = " << i << " Right = " << right_greater[i] << "\n";
            possible = true;
        }
    }
    
    cout << (possible && k_exists ? "Yes\n" : "No\n");
}

int main()
{
    int no_of_test_cases;
    cin >> no_of_test_cases;
    
    while(no_of_test_cases--)
        solve();
    
    return 0;
}
