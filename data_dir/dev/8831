/*	
	Fenwick Tree 
*/
#include <bits/stdc++.h> 
using namespace std;
 
#define fl(i,a,b) for(int i=a;i<b;i++)
#define endl '\n'
#define pb push_back
#define ff first
#define ff first
#define ss second
#define inf 2e18
#define mod 1000000007
#define fast ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
#define mx 1000005
#define ll long long
#define pi 3.1415926535897932384626433
int bit[1 << 22];
int n = (1 << 21);
void update(int idx, int val) 
{ 
	idx += mx;
    for (; idx <= n; idx += idx&-idx) 
        bit[idx] += val; 
} 
int query(int idx) 
{ 
    int sum = 0; 
    for (; idx>0; idx-=idx&-idx) 
        sum += bit[idx]; 
    return sum; 
} 
int kth(int k) {
	int ans = 0, s = 0;
	for (int i = 21; i >= 0; --i)
		if (s + bit[ans + (1<<i)] < k) {
			ans += 1<<i;
			s += bit[ans];
		}
	return ans+1;
}
int pos[1 << 22];
int val[1 << 22];
void solve()
{
	int n,q;
	cin >> n >> q;
	
	bool vis[n + 1] = {0};
	int cnt = 0;
	fl(i,1,n + 1)
	{
		update(i,1);
		val[i + mx] = i;
	}
	while(q--)
	{
		int x,y;
		cin >> x >> y;
	
		int z = kth(y);
		int p = val[z];
	//	cout << z - mx << "  " << p << " " << endl;
		if(pos[p] == 0)
		{
		    pos[p] = x;
		    if(vis[x] == 1)
		    {
		        cout << -1;
		        return ;
		    }
		    vis[x] = 1;
		}
		else if(pos[p] != x)
		{
		    cout << -1;
		    return ;
		}
		update(--cnt,1);
		val[cnt + mx] = p;
		update(z - mx,-1);
	}
	int j = 1;
	fl(i,1,n + 1)
	{
	    if(pos[i] != 0)
	    cout << pos[i] << " ";
	    else
	    {
	        while(vis[j])j++;
	        vis[j] = 1;
	        cout << j << " ";
	    }
	}
}
main()
{
	fast;
	int t =  1;
	while(t--)
	{
		solve();
	}
}