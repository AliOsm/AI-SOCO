#include<bits/stdc++.h>
#include<ext/numeric>
using namespace std;
using namespace __gnu_cxx;

#define all(v) v.begin(),v.end()
#define sz(v)  (int)v.size()

typedef long long ll;
typedef pair<int, int> ii;

int n, m;
vector<int> weight;
struct node {
	int i, diff, last;
	node(int i = 0, int diff = 0, int last = 0) :
			i(i), diff(diff), last(last) {
	}
	bool operator <(const node& n) const {
		if (i == n.i) {
			if (diff == n.diff)
				return last < n.last;
			return diff < n.diff;
		}
		return i < n.i;
	}
	bool operator !=(const node& n) const {
		return i != n.i && diff != n.diff && last != n.last;
	}
};

map<node, bool> vis;
map<node, node> path;

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "rt", stdin);
#endif
	string s;
	cin >> s >> m;
	for (int i = 0; i < 10; ++i)
		if (s[i] == '1')
			weight.push_back(i + 1);
	n = sz(weight);
	queue<node> q;
	q.push(node());
	vis[node(0, 0, 0)] = 1;
	node curNode;
	bool b = 0;

	while (!q.empty()) {
		node cur = q.front();
		q.pop();
		if (cur.i == m) {
			b = 1;
			curNode = cur;
			break;
		}
		for (int i = 0; i < n; ++i) {
			node nnode = node(cur.i + 1, weight[i] - cur.diff, weight[i]);
			if (weight[i] == cur.last || weight[i] <= cur.diff || vis[nnode])
				continue;
			q.push(nnode);
			vis[nnode] = 1;
			path[nnode] = cur;
		}
	}
	if (!b)
		return puts("NO");
	puts("YES");
	node root;
	vector<int> ans;
	while (curNode != root) {
		ans.push_back(curNode.last);
		curNode = path[curNode];
	}
	for (int i = sz(ans) - 1; i > -1; --i)
		printf("%d ", ans[i]);
}

