#include <cstdio>
#include <memory.h>
#include <cstring>
#include <vector>
#include <deque>
#include <cstdlib>
#include <queue>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <functional>
#include <iostream>
#include <set>
#include <list>
#include <map>
#include <time.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef long long ll;
typedef unsigned long long llu;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<string, int> psi;
const ll MOD = (ll)1e9 + 7;
const long double PI = 3.141592653589793238462643383279502884197;

priority_queue<int, vector<int>, greater<int> > pq;
vector<int> ans, v;

char s[101];
int al[26];

int main() {
	int t;
	scanf("%d", &t);

	while (t--) {
		memset(al, 0, sizeof(al));
		ans.clear();
		v.clear();

		scanf("%s", s);
		int n = strlen(s);

		for (int i = 0; i < n; i++) {
			al[s[i] - 'a']++;
			v.push_back(s[i] - 'a');
		}

		sort(all(v));
		v.erase(unique(all(v)), v.end());
		if (sz(v) == 3) {
			if (v[0] + 1 == v[1] && v[1] + 1 == v[2]) printf("No answer\n");
			else if (v[0] + 1 == v[1]) {
				while (al[v[0]]--) printf("%c", v[0] + 'a');
				while (al[v[2]]--) printf("%c", v[2] + 'a');
				while (al[v[1]]--) printf("%c", v[1] + 'a');
				printf("\n");
			}
			else {
				while (al[v[1]]--) printf("%c", v[1] + 'a');
				while (al[v[0]]--) printf("%c", v[0] + 'a');
				while (al[v[2]]--) printf("%c", v[2] + 'a');
				printf("\n");
			}
		}
		else {
			for (int i = 0; i < sz(v); i++) {
				int t = 0;
				if (i % 2 == 0) t += sz(v) / 2;
				t += i / 2;

				ans.push_back(v[t]);
			}

			int flag = 0;
			for (int i = 0; i < sz(ans); i++)
				if (i && abs(ans[i] - ans[i - 1]) == 1) {
					printf("No answer\n");
					flag = 1;
					break;
				}

			if (flag == 0) {
				for (int i = 0; i < sz(ans); i++)
					while (al[ans[i]]--) printf("%c", ans[i] + 'a');
				printf("\n");
			}
		}
	}
}