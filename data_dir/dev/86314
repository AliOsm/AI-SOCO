// Bismillahirrahmanir Rahim
#include<bits/stdc++.h>
#define nl printf("\n")
#define sp printf(" ")
#define rep(i,a,b) for(i=a;i<=b;i++)
#define rev(i,a,b) for(i=a;i>=b;i--)
#define filr freopen("input.txt","r",stdin)
#define filw freopen("output.txt","w",stdout)
#define pf printf
#define sf scanf
using namespace std;

typedef long long l;
typedef unsigned long long ul;

//// Ordered set> Finding nth position element in a set in logn complexity
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
//template<typename T> using orderset = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
////*X.find_by_order(1)
////X.order_of_key(-5)

#define pi acos(-1.0)
#define mp make_pair
#define pb push_back
#define p_q priority_queue

int inline in(){int x;sf("%d",&x);return x;}
l inline lin(){l x;sf("%lld",&x);return x;}
void P(l x){pf("%lld",x);}
void Pi(int x){pf("%d",x);}

#define C(i) pf("Case %lld: ",i)
#define Ci(i) pf("Case %d: ",i)

#define Inf 0x7f7f7f
#define mod 1000000007

#define ms(a,b) memset(a,b,sizeof(a))
#define DBG pf("I am here\n")

#define dis( a ,b ) abs( a - b )
#define dis2d( x1 ,y1 ,x2 ,y2 )    sqrt( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) )
#define dis3d( x1 ,y1 ,z1 ,x2 ,y2 ,z2 )    sqrt( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) + ( z1 - z2 ) * ( z1 - z2 ) )

#define valid(nx,ny,r,c) nx>=1&&nx<=r && ny>=1&&ny<=c

#define ck_bt( v , p ) ( ( v >> p ) & 1 )

char tochar( int x ){return x + '0' ;}
int toint( char x ){return x - '0' ;}

l fx[]= {0,0,-1,1,-1,-1,1,1};
l fy[]= {-1,1,0,0,-1,1,-1,1};

l dx[]= {0,0,-1,1};
l dy[]= {-1,1,0,0};

l n , m ;


l ncr[1010][10] ;

l NCR( l n, l r )
{
    if( n == r || r == 0 )
        return ncr[n][r] = 1 ;
    if( r == 1 )
        return ncr[n][r] = n ;
    if( ncr[n][r] != -1 ) return ncr[n][r] ;
    return ncr[n][r] = NCR( n - 1, r ) + NCR( n - 1, r - 1 ) ;
}

l dar[1010] ;

l DAR( l n )
{
    if( n == 0 )
        return 1 ;
    if( dar[n] != -1 ) return dar[n] ;
    return n * DAR( n - 1 ) + ( n % 2 ? -1 : 1 )  ;
}

l a[110][110] ;


//l tree[3*100010] ;
//
//void init( l node , l b , l e )
//{
//    if( b == e )
//    {
//        tree[node] = a[b] ;
//        return ;
//    }
//    l mid = b + ( e - b ) / 2 ;
//    l Left = node * 2 ;
//    l Right = node * 2 + 1 ;
//    init( Left , b , mid ) ;
//    init( Right , mid + 1 , e ) ;
//    tree[node] = min( tree[Left] , tree[Right] ) ;
//}
//
//l query( l node , l b , l e , l i , l j )
//{
//    if( b > j || e < i )
//        return LLONG_MAX ;
//    if( b >= i && e <= j )
//    {
//        return tree[node] ;
//    }
//    l mid = b + ( e - b ) / 2 ;
//    l Left = node * 2 ;
//    l Right = node * 2 + 1 ;
//
//    return min( query( Left , b , mid , i , j ) , query( Right , mid + 1 , e , i , j ) ) ; ;
//}


char s[100010] ;

int main()
{

    l i , j , k ;

    n = lin() ;
    m = lin() ;
    sf("%s",s) ;

    rep( k , 1 , m )
    {
        l L = lin() ;
        l R = lin() ;
        char s1[10] ;
        char s2[10] ;
        sf("%s",s1) ;
        sf("%s",s2) ;
        L-- , R-- ;
        rep( i , L , R )
        {
            if( s[i] == s1[0] )
            {
                s[i] = s2[0] ;
            }
        }
    }
    puts(s) ;




    return 0;
}

/*
3 2 1
1 2 3
*/
