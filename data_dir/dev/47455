/*input
5 2
00100

*/
 
/*
                                                    ______________
                                                          |       )
                                                          |   )   /
                                                          |______/
                                                    |     |      \
                                                    |     |   )   \
                                                    |_____|_______)
 
*/
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <ctime>
#include <cassert>
#include <complex>
#include <string>
#include <cstring>
#include <chrono>
#include <random>
#include <queue>
#include <bitset>
#include <iomanip>
#include <fstream>
#include <stack>

using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> PII;
typedef pair<ll , ll> PLL;
typedef long double ld;
 
#define pb push_back
#define all(c) c.begin(),c.end()
#define allr(c) c.rbegin(),c.rend()
int mod = 1000000007;
const int inf = 1034567891;
const ll LL_INF = 1234567890123456789ll;
#define PI 3.14159265
#define endl '\n'
#define F first
#define S second
#define debug(x) cout << #x << " = " << x << endl;
#define TRACE
 
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cout << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif
 
#define out(container) for (auto it : container) cout << it << " "; cout << endl;
 
 
template < typename T > T GCD(T a, T b)            { ll t; while(a) { t = a; a = b % a; b = t; } return b; }
template < typename T > string toString(T a)       { return to_string(a); }
template < typename T > void toInt(string s, T &x) { stringstream str(s); str >> x;}
inline int add(int x, int y){ x += y; if(x >= mod) x -= mod; return x;}
inline int sub(int x, int y){ x -= y; if(x < 0) x += mod; return x;}
inline int mul(int x, int y){ return (x * 1ll * y) % mod;}
inline int powr(int a, ll b){
  int x = 1 % mod;
  while(b){
    if(b & 1) x = mul(x, a);
    a = mul(a, a);
    b >>= 1;
  }
  return x;
}
inline int inv(int a){ return powr(a, mod - 2);}

const int N = 2e5 + 5;
int n, k;
int lft[N], rght[N];

ll arr[N], seg[4 * N];

void update(int low, int high, int idx, ll v, int pos) {
  if (low == high) {
    arr[low] = v;
    seg[pos] = v;
    return;
  }
  int mid = (low + high) >> 1;
  if (idx <= mid)
    update(low, mid, idx, v, 2 * pos + 1);
  else
    update(mid + 1, high, idx, v, 2 * pos + 2);
  seg[pos] = min(seg[2 * pos + 1], seg[2 * pos + 2]);
}

ll query(int low, int high, int l, int r, int pos) {
  if (low >= l && high <= r) return seg[pos];
  if (high < l || low > r) return LL_INF;
  int mid = (low + high) >> 1;
  ll ans = min(query(low, mid, l, r, 2 * pos + 1), query(mid + 1, high, l, r, 2 * pos + 2));
  return ans;
}

int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  cin >> n >> k;
  string str;
  cin >> str;
  for (int i = 1; i <= n; i++) {
    if (str[i - 1] == '1') {
      int l = max(1, i - k);
      int r = min(n, i + k);
      lft[i] = l;
      rght[i] = r;
    } else {
      lft[i] = i;
      rght[i] = i;
    }
  }
  ll dp[n + 1] = {0ll};
  for (int i = 1; i <= n; i++) {
    arr[i] = LL_INF;
    update(0, n, i, arr[i], 0);
  }
  update(0, n, 0, 0, 0);
  for (int i = 1; i <= n; i++) {
    dp[i] = LL_INF;
    int l = lft[i], r = rght[i];
    dp[i] = arr[n];
    ll v = query(0, n, l - 1, n, 0);
    dp[i] = min(dp[i], v + i);
    if (arr[r] > dp[i]) {
      update(0, n, r, dp[i], 0);
    }
  }
  ll ans = dp[n];
  cout << ans << endl;

  return 0;
}