#include <bits/stdc++.h>
using namespace std;

#define fi first
#define se second

const int maxN = 3 << 10;

vector<int> g[maxN];
int d[maxN][maxN];

int n, m;
const int INF = 1e8;

void doBFS() {
    for (int i = 1; i <= n; i++) {
        queue<int> q;
        for (int j = 1; j <= n; j++) {
            d[i][j] = INF;
        }
        d[i][i] = 0;
        q.push(i);
        while (!q.empty()) {
            int v = q.front();
            q.pop();
            for (auto u : g[v]) {
                if (d[i][u] > d[i][v] + 1) {
                    d[i][u] = d[i][v] + 1;
                    q.push(u);
                }
            }
        }
    }
}

int s1, t1, l1;
int s2, t2, l2;

int calc() {
    int ans = m + 1;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            int d1 = d[s1][i] + d[i][j] + d[j][t1];
            int d2 = d[s2][i] + d[i][j] + d[j][t2];
            if (d1 <= l1 && d2 <= l2) {
                ans = min(ans, d1 + d2 - d[i][j]);
            }
        }
    }
    return m - ans;
}

int main() {
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int v, u;
        cin >> v >> u;
        g[v].push_back(u);
        g[u].push_back(v);
    }
    doBFS();
    cin >> s1 >> t1 >> l1;
    cin >> s2 >> t2 >> l2;
    int ans = -1;
    if (d[s1][t1] <= l1 && d[s2][t2] <= l2) {
        ans = m - d[s1][t1] - d[s2][t2];
    }
    ans = max(calc(), ans);
    swap(s1, t1);
    ans = max(calc(), ans);
    cout << ans << endl;
    return 0;
}
