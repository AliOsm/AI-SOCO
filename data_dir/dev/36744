#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

char txt[100010], pat[100010];
int A[100010], B[100010], add[100010], pos[100010];

const int Mod = 1000000007;

int main() {
    scanf("%s%s", txt, pat);
    int n = strlen(txt), m = strlen(pat);
    txt[n] = '$';
    pat[m] = '*';
    int j = 0;
    B[0] = 0;
    while (pat[j] == pat[j + 1]) {
        j ++;
    }
    B[1] = j;
    int k = 1;
    for (int i = 2; i < m; i ++) {
        int now = k + B[k] - 1;
        int p = B[i - k];
        if (now - i + 1 > p) {
            B[i] = p;
        } else {
            j = max(0, now - i + 1);
            while (pat[i + j] == pat[j]) {
                j ++;
            }
            B[i] = j;
            k = i;
        }
    }
    j = 0;
    while (txt[j] == pat[j]) {
        j ++;
    }
    A[0] = j;
    k = 0;
    for (int i = 1; i < n; i ++) {
        int now = k + A[k] - 1;
        int p = B[i - k];
        if (now - i + 1 > p) {
            A[i] = p;
        } else {
            j = max(0, now - i + 1);
            while (txt[i + j] == pat[j]) {
                j ++;
            }
            A[i] = j;
            k = i;
        }
    }
    for (int i = n - 1; i >= 0; i --) {
        if (A[i] == m) {
            pos[i] = i;
        } else if (i + 1 == n) {
            pos[i] = n + 1;
        } else {
            pos[i] = pos[i + 1];
        }
    }
    int pre = 0, sum = 0;
    for (int i = 0; i < n; i ++) {
        if (pos[i] < n) {
            int ne = pos[i] + m - 1;
            add[ne] += pre + 1;
            while (add[ne] >= Mod) {
                add[ne] -= Mod;
            }
        }
        sum += add[i];
        if (sum >= Mod) {
            sum -= Mod;
        }
        pre += sum;
        if (pre >= Mod) {
            pre -= Mod;
        }
    }
    printf("%d\n", pre);
    return 0;
}