#include<iostream>
#include <ext/pb_ds/assoc_container.hpp>
#include <bits/stdc++.h>
#define ll long long
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less_equal<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;
int n, t, a[200009], k, freq[400009], ans,maxp[200009],maxn[200009];
vector<pair<int,int> > v;
int main()
{
    IO
    cin>>t;
    while(t--)
    {
        cin>>n>>k;
        for(int i=0; i<=2*k; i++)
            freq[i]=0;
        ans=1e9;
        for(int i=0; i<n; i++)
            cin>>a[i];
        v.clear();
        for(int i=0; i<n/2; i++)
        {
            v.push_back({a[i]+a[n-i-1],i});
            freq[a[i]+a[n-i-1]]++;
            maxp[i]=max(k-a[i],k-a[n-i-1]);
            maxn[i]=max(a[i]-1,a[n-i-1]-1);
        }
        sort(v.begin(),v.end());
        indexed_set l, r;
        for(auto i : v)
            l.insert(i.first+maxp[i.second]);
        int one=n/2-l.order_of_key(v.back().first), two;
        two=n/2-one;
        one-=freq[v.back().first];
        ans=one+2*two;
        int p=n/2-1;
        int sum=v.back().first;
        while(sum>0)
        {
            while(!v.empty() &&v.back().first>sum)
            {
                int cur=v.back().first+maxp[v.back().second];
                l.erase(l.find_by_order(l.order_of_key (cur)));
                r.insert(v.back().first-maxn[v.back().second]);
                v.pop_back();
            }
            int one=l.size()-l.order_of_key(sum);
            one+=r.order_of_key(sum+1);
            two=n/2-one;
            one-=freq[sum];
            ans=min(ans,one+2*two);
            sum--;
        }
        cout<<ans<<"\n";
    }
}
