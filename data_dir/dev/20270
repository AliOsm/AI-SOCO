#include <bits/stdc++.h>
using namespace std ;

typedef pair<int, int> pii;
typedef long long ll;
const int N = 1010, M = 4;

int n, m, dp[N][N],
	delta_x[] = {0, 0, 1, -1},
	delta_y[] = {1, -1, 0, 0};
bool mark[N][N];
char nxt[N];
string s[N];
vector<pii> vec, nei[N][N];//  nei behtar bood

void pre_pro() {
	nxt['D'] = 'I';
	nxt['I'] = 'M';
	nxt['M'] = 'A';
	nxt['A'] = 'D';
}

bool isval(int x, int y, char c) {// nxt(x), nxt(y), now char
	return 0 <= x && x < n && 0 <= y && y < m && s[x][y] == nxt[c];
}

void input() {
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		cin >> s[i];
	for (int x = 0; x < n; x++)
		for (int y = 0; y < m; y++) {
			for(int i = 0; i < M; i++) {
				int X = x + delta_x[i],
					Y = y + delta_y[i];
				if(isval(X, Y, s[x][y]))
					nei[x][y].push_back(pii(X, Y));
			}
		}
}

void dfs(int x, int y) {
	mark[x][y] = true;
	for (pii p: nei[x][y])
		if(mark[p.first][p.second] == false)
			dfs(p.first, p.second);
	vec.push_back(pii(x, y));
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	pre_pro();
	input();
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if(mark[i][j] == false)
				dfs(i, j);
	reverse(vec.begin(), vec.end());
	memset(mark, false, sizeof mark);
	for (int i = 0; i < vec.size(); i++) {
		int x = vec[i].first, y = vec[i].second;
		mark[x][y] = true;
		for (pii p: nei[x][y])
			if(mark[p.first][p.second]) {
				cout << "Poor Inna!";
				return 0;
			}
	}
	for (int i = vec.size() - 1; ~i; i--) {
		int x = vec[i].first, y = vec[i].second;
		for (pii p: nei[x][y])
			dp[x][y] = max(dp[x][y], 1 + dp[p.first][p.second]);
	}
	int maxi = 0;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if(s[i][j] == 'D')
				maxi = max(maxi, dp[i][j]);
	if(maxi + 1 >= 4)
		cout << ((maxi + 1) >> 2);
	else
		cout << "Poor Dima!";
	return 0 ;
}
