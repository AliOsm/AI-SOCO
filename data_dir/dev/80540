#include <math.h>
#include <limits.h>
#include <complex>
#include <string>
#include <functional>
#include <iterator>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <list>
#include <bitset>
#include <sstream>
#include <iomanip>
#include <fstream>
#include <iostream>
#include <ctime>
#include <cmath>
#include <cstring>
#include <cstdio>
#include <complex.h>
#include <time.h>
#include <ctype.h>
#include <string.h>
#include <assert.h>
#include <stdio.h>

using namespace std;

const int N = 1e6;

int n;
vector<int> a, op, cl;
vector<int> s;
bool was[N][2];

void print() {
    puts("YES");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < op[i]; j++) putchar('(');
        printf("%d", a[i]);
        for (int j = 0; j < cl[i]; j++) putchar(')');
        if (i + 1 != n) { putchar('-'); putchar('>'); }
    }
    puts("");
    exit(0);    
}

void go(int n, int need) {
    // cout << n << " " << need << endl;
    if (n < 0) return;
    if (was[n][need]) return;
    was[n][need] = 1;
    if (n == 0) return;
    // cerr << n << " " << need << endl;
    if (n == 1) {
        if (a[n - 1] != need) return;
        print();
    }
    if (need == 0) {
        if (a[n - 1] == 1) return;
        if (a[n - 2] == 1) print();
        if ((n > 2) && (a[n - 3] == 0)) {
            op[n - 3]++;
            cl[n - 2]++;
            print();
        }
        go(n - 1, 1);
    } else {
        if (a[n - 1] == 1) print();
        if (a[n - 2] == 0) {
            op[n - 2]++;
            cl[n - 1]++;
            print();
        }
        while (!s.empty()) {
            int x = s.back();
            if (x >= n - 1) break;
            op[x]++;
            cl[n - 1]++;
            go(x, 0);
            op[x]--;
            cl[n - 1]--;
            s.pop_back();
        }
    }
}

int main() {
    // freopen("input.txt", "r", stdin);
    scanf("%d", &n);
    a.resize(n);
    op.resize(n);
    cl.resize(n);
    for (int i = n - 1; i >= 0; i--) s.push_back(i);
    for (int i = 0; i < n; i++) scanf("%d", &a[i]);
    go(n, 0);
    puts("NO");
}