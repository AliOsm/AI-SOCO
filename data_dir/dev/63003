#include<bits/stdc++.h>
#define ll long long
using namespace std;

int const N = 1e5+10, K = 5e2+10;

int n, m, k, c[N], id[N], ini[N];

struct edge{
	int x, y, c;
	edge(int x, int y, int c) : x(x), y(y), c(c) {}
};
bool operator<(edge a, edge b){
	return a.c < b.c;
}
vector<edge> e;

int par[N], sz[N];
int root(int v){
	if(v == par[v]) return v;
	return root(par[v]);
}
void merge(int x, int y){
	x = root(x), y = root(y);
	if(x == y) return;
	if(sz[y] > sz[x]) swap(x,y);
	par[y] = x;
	sz[x] += sz[y];
}

ll dis[K][K];

int main(){
	
	scanf("%d %d %d", &n, &m, &k);
	
	for(int i = 1; i <= k; i++) scanf("%d", &c[i]);
	
	int pointer = 1, idx = 1;
	while(idx <= k){
		for(int i = pointer; i < pointer+c[idx]; i++) 
		 id[i] = idx;
	 ini[idx] = pointer;
	 pointer += c[idx];
	 idx++;
	}
	
	for(int i = 1; i <= n; i++) sz[i] = 1, par[i] = i;
	
	for(int i = 0; i < m; i++){
		int u, v, c;
		scanf("%d %d %d", &u, &v, &c);
		if(c == 0) merge(u,v);
		e.push_back(edge(u,v,c));
 }
 
 pointer = 1, idx = 1;
 
 while(idx <= k){
 	int r = root(pointer);
 	for(int i = pointer+1; i < pointer+c[idx]; i++)
 	 if(root(i) != r){
 	 	printf("No\n");
 	 	return 0;
 	 }
	  pointer += c[idx];
	  idx++;
 }
 
 for(int i = 1; i <= n; i++) par[i] = i, sz[i] = 1;
 
 for(int i = 1; i <= k; i++) 
  for(int j = 1; j <= k; j++) 
   if(i != j) 
    dis[i][j] = 1e18;
 
 sort(e.begin(),e.end());
 for(int i = 0; i < e.size(); i++){
 	int u = e[i].x, v = e[i].y;
		ll cost = e[i].c;
  u = root(u), v = root(v);
  u = id[u], v = id[v];
  dis[u][v] = min(dis[u][v],cost);
  dis[v][u] = min(dis[v][u],cost);
 }
 
 for(int u = 1; u <= k; u++)
  for(int i = 1; i <= k; i++)
   for(int j = 1; j <= k; j++)
    dis[i][j] = min(dis[i][j], dis[i][u] + dis[u][j]);
 
 printf("Yes\n");
 for(int i = 1; i <= k; i++){
 	for(int j = 1; j <= k; j++) 
 	 if(dis[i][j] == 1e18) printf("-1 ");
 	 else printf("%I64d ", dis[i][j]);
 	printf("\n");
 }
 
 return 0;
 
}
