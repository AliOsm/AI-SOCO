#include<bits/stdc++.h>
using namespace std;

#define ll           long long
#define pii          pair<ll,ll>
#define bug(a)       cerr << #a << " : " << a << endl;
#define FastRead     ios_base::sync_with_stdio(false);cin.tie(NULL);

const int MAX = 1e5+10;

vector<int>adj[MAX];
char ans[MAX];

struct CentroidDecomposition
{
    int path[MAX] , sub[MAX];
    bool vis[MAX];

    CentroidDecomposition()
    {
        memset(vis,0,sizeof vis);
        memset(path,0,sizeof path);
    }

    void subDFS(int src,int par)
    {
        sub[src] = 1;

        for(auto i : adj[src])
        {
            if(i == par || vis[i])
                continue;

            subDFS(i,src);
            sub[src] += sub[i];
        }
    }
    int centroid(int src,int par,int sz)
    {
        for(auto i : adj[src])
        {
            if(i == par || vis[i])
                continue;
            else if(sub[i] > sz)
                return centroid(i,src,sz);
        }
        return src;
    }
    void decompose(int src,int par,char ch)
    {
        subDFS(src,-1);
        int c = centroid(src,-1,sub[src]/2);
        vis[c] = 1;
        ans[c] = ch;

        for(auto i : adj[c])
        {
            if(!vis[i])
                decompose(i,c,ch+1);
        }
    }
} tree;


int main()
{
#ifdef Aaman007
    freopen("input.txt","r",stdin);
    // freopen("output.txt","w",stdout);
#endif // Aaman007

    FastRead

    int n,u,v;

    cin >> n;

    for(int i=0;i<n-1;i++)
    {
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    tree.decompose(1,-1,'A');

    for(int i=1;i<=n;i++)
        cout << ans[i] << " ";
    cout << endl;
}
