#include<bits/stdc++.h>
#include<string.h>
using namespace std;
typedef long long int ll;
typedef long double ld;
typedef pair<ll,ll> pll;
#define int long long 
#define Max 1000001
#define int long long 
#define inf INT_MAX
#define llinf LONG_LONG_MAX
#define fast ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define pb push_back
#define ff first
#define ss second
#define all(v) v.begin(),v.end()
#define bp(n) __builtin_popcount(n)
#define endl '\n'
const int N=3e5+5,mod=1000000007,bit=60;
ll dp[N],a[N],nx[N];
template<typename T> 
class segmentmax
{
	public:
		vector<T> st;
		ll n;
		segmentmax(){}
		segmentmax(ll _n)
		{
			n=_n;
			st.resize(2*n);
		}
		void create()
		{
			for(ll i=n-1;i>0;i--)
			{
				st[i]=max(st[i<<1],st[(i<<1) | 1]);
			}
		}
		void update(ll idx,T val)
		{
			for(st[idx+=n-1]=val;idx>1;idx>>=1)
			{
				st[idx>>1]=max(st[idx],st[idx ^ 1]);
			}
		}
		ll query(ll l,ll r)
		{
			ll ans=0;
			for(l+=n-1,r+=n-1;l<r;l>>=1,r>>=1)
			{
				if(l & 1)
				{
					ans=max(ans,st[l++]);
				}
				if(r & 1)
				{
					ans=max(ans,st[--r]);
				}
			}
			return ans;
		}
};
template<typename T> 
class segmentmin
{
	public:
		vector<T> st;
		ll n;
		segmentmin(){}
		segmentmin(ll _n)
		{
			n=_n;
			st.resize(2*n);
		}
		void create()
		{
			for(ll i=n-1;i>0;i--)
			{
				st[i]=min(st[i<<1],st[(i<<1) | 1]);
			}
		}
		void update(ll idx,T val)
		{
			for(st[idx+=n-1]=val;idx>1;idx>>=1)
			{
				st[idx>>1]=min(st[idx],st[idx ^ 1]);
			}
		}
		ll query(ll l,ll r)
		{
			ll ans=+llinf;
			for(l+=n-1,r+=n-1;l<r;l>>=1,r>>=1)
			{
				if(l & 1)
				{
					ans=min(ans,st[l++]);
				}
				if(r & 1)
				{
					ans=min(ans,st[--r]);
				}
			}
			return ans;
		}
};
signed main()
{
    fast;
    ll pro=1,temp,t,i,j,l,r,n,m,mid,k,x,y,z,rem,carry=0,ind,ans=0,mx=-llinf,mn=llinf,cnt=0,curr=0,prev,nxt,sum=0,flag=1,i1=-1,i2=-1;
    cin>>n;
    for(i=1;i<=n;i++)
    {
    	cin>>a[i];
    	a[i+n]=a[i+2*n]=a[i];
    	mx=max(mx,a[i]);
    	mn=min(mn,a[i]);
    }
    if(2*mn>=mx)
    {
    	for(i=1;i<=n;i++)
    	{
    		cout<<"-1 ";
    	}
    	cout<<endl;
    	return 0;
    }
    segmentmax<ll> obj1(3*n);
    segmentmin<ll> obj2(3*n);
    for(i=3*n;i>=1;i--)
    {
    	nx[i]=llinf;
    	obj1.st[i+3*n-1]=a[i];
    	obj2.st[i+3*n-1]=a[i];
    	dp[i]=inf;
    }
    obj1.create();
    obj2.create();
    for(i=2*n;i>=1;i--)
    {
    	l=i+1;
    	r=i+n;
    	while(l<=r)
    	{
    		mid=(l+r)>>1;
    		x=obj1.query(l,mid+1);
    		y=obj1.query(mid+1,r+1);
    		if(x>=a[i])
    		{
    			nx[i]=min(mid,nx[i]);
    			r=mid-1;
    		}
    		else
    		{
    			if(y>=a[i])
    			{
    				nx[i]=min(nx[i],r);
    			}
    			l=mid+1;
    		}
    	}
    }
    for(i=2*n;i>=1;i--)
    {
    	l=i+1;
    	r=nx[i]-1;
    	dp[i]=dp[nx[i]]+nx[i]-i;
    	temp=(a[i]+1)>>1;
    	while(l<=r)
    	{
    		mid=(l+r)>>1;
    		x=obj2.query(l,mid+1);
    		y=obj2.query(mid+1,r+1);
    		if(x<temp)
    		{
    			dp[i]=min(dp[i],mid-i);
    			r=mid-1;
    		}
    		else
    		{
    			if(y<temp)
    			{
    				dp[i]=min(dp[i],r-i);
    			}
    			l=mid+1;
    		}
    	}
    }
    for(i=1;i<=n;i++)
    {
    	cout<<dp[i]<<' ';
    }
    cout<<endl;
    return 0;
}