#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>	
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound          	    
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcount                                                                                        
#define sqr(x) ((x) * (x))
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;                                  
const int N = (int)2e5 + 123;
const ll inf = (ll)3e18 + 1;
                                       
const double pi = acos(-1.0);
const double eps = 1e-7;
const int dx[] = {0, 0, 1, 0, -1};										
const int dy[] = {0, 1, 0, -1, 0};  		
 
pii a[N];
vector <pii> ans;
pii type;

inline void bfs (pii c, pii d) {
	bool ok = 0;
	while (c.F != d.F || c.S != d.S) {
		ans.pb (c);
		if (c.F < d.F)  c.F ++;
		else if (c.F > d.F) c.F --;
		else {
	      if (!ok) type = c, ok = 1;
			if (c.S < d.S) c.S ++;
			if (c.S > d.S) c.S --;		
		}
	} 
	ans.pb (d);
}

inline void bfs1 (pii c, pii d) {
	bool ok = 0;
	while (c.F != d.F || c.S != d.S) {
		ans.pb (c);
		if (c.S < d.S)  c.S ++;
		else if (c.S > d.S) c.S --;
		else {
			if (c.F < d.F) c.F ++;
			if (c.F > d.F) c.F --;		
		}
	} 
	ans.pb (d);

}

inline void boost () {
	ios_base :: sync_with_stdio (NULL);
	cin.tie (NULL), cout.tie (NULL);          
}

inline void Solve () {
	for (int i = 1; i <= 3; i ++) cin >> a[i].F >> a[i].S;
	sort (a + 1, a + 4);
	bfs (a[1], a[2]);
	if (a[1].S <= a[2].S && a[2].S <= a[3].S) bfs (a[2], a[3]);
	else if (a[1].S >= a[2].S && a[2].S >= a[3].S) bfs (a[2], a[3]);
	else if (a[1].S >= a[2].S && a[2].S <= a[3].S) bfs1 (type, a[3]);	
	else if (a[1].S <= a[2].S && a[2].S >= a[3].S) bfs1 (type, a[3]);	
	sort (all (ans));
	ans.resize (unique (all (ans)) - ans.begin ());
	cout << sz (ans) << endl;
	for (auto it : ans) cout << it.F << ' ' << it.S << endl;

}                                          
                  
int main () {                                       
//	freopen (".in", "r", stdin);    
//	freopen (".out", "w", stdout); 	          
	boost ();
	int tt = 1;
//	cin >> tt;   
	while (tt --) {
		Solve ();
	}                                               
	return 0;      
}         	                                                    