#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     (_obj).begin(), (_obj).end()
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define CeilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifdef SHJ_LOCAL
#define debug(_x)                     std::cerr << (#_x) << " = " << (_x) << '\n' << std::flush;
#else
#define debug(_x)                     {}
#endif
#define endl "\n"
template<typename Tp>
inline void outarr(Tp _begin, Tp _end, const char* _delim = " ") {
    for (Tp current = _begin; current != _end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = long long;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
constexpr int MAXN = 100000;

vector<int> gr[MAXN];
int deg[MAXN];

int g_max_ans = 0;
pii Dfs(int from, int p = -1) {
    if (deg[from] == 1) {
        return {1, 0};
    }
    pii cur{0, 0};
    int res = -1;
    for (int to : gr[from]) {
        if (to != p) {
            if (deg[to] == 1) {
                ++res;
            }
            auto d = Dfs(to, from);
            cur.first |= d.second;
            cur.second |= d.first;
        }
    }
    g_max_ans += max(0, res);
    return cur;
}

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    int n;
    cin >> n;
    loop(n - 1) {
        int a, b;
        cin >> a >> b;
        --a; --b;
        gr[a].push_back(b);
        gr[b].push_back(a);
        ++deg[a];
        ++deg[b];
    }
    pii res;
    loop(n) {
        if (deg[i] > 1) {
            res = Dfs(i);
            break;
        }
    }
    int min_ans = 1;
    if (res.first == 1 && res.second == 1) {
        min_ans = 3;
    }
    int max_ans = n - 1 - g_max_ans;
    cout << min_ans << ' ' << max_ans << endl;

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}
