// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")
 
#define MP make_pair
#define PB push_back
#define ST first
#define ND second
 
using namespace __gnu_pbds;
using namespace std;
 
template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
 
//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k
 
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;
 
void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}
 
const int N = 2*(int)1e5 + 4;
 
int t, n;
string s;
 
int main() {
  init_ios();
  cin >> t;
  while (t--) {
    cin >> s;
    n = s.size();
    int res = 0, lst = -1;
    for (int i = 0; i < n; ++i)
      if (s[i] == 'R') {
        res = max(res, i-lst);
        lst = i;
      }
    res = max(res, n-lst);
    cout<<res<<"\n";
  }
}