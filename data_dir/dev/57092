#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define IN freopen("transposition-115.txt","r",stdin)
#define OUT freopen("dichromatic.out","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 2000000000
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define sq(x)  ((x)*(x))

using namespace __gnu_pbds;
using namespace std ;

#define maxn 200005
#define mod 1000000007LL

typedef pair<i64,i64> pii ;
typedef  long long int T ;

int a[maxn] ;
int w[maxn] ;
int wSum[maxn] ;
i64 sum[maxn] ;

void updatewSum( int y, int val ) // update the value of 1 <= y <= bitMax
{
    val = (val%mod + mod)%mod ;

    while( y < maxn )
    {
        wSum[y] += val;
        if(wSum[y]>=mod) wSum[y] -= mod ;
        y += (y&(-y));
    }
}

int querywSum( int y ) //sum of all numbers from 1 to y (inclusive)
{
    int s = 0;
    while( y > 0 )
    {
        s += wSum[y];
        if(s>=mod) s -= mod ;
        y -= (y&(-y));
    }
    return s;
}


void updatesum( int y, i64 val ) // update the value of 1 <= y <= bitMax
{
    while( y < maxn )
    {
        sum[y] += val ;
        y += (y&(-y));
    }
}

i64 querysum( int y ) //sum of all numbers from 1 to y (inclusive)
{
    i64 s = 0 ;
    while( y > 0 )
    {
        s += sum[y];
        y -= (y&(-y));
    }
    return s ;
}


int main()
{
    int n , q ;

    scanf("%d %d",&n,&q) ;
    for(int i=1; i<=n; i++)
    {
        scanf("%d",&a[i]) ;
        a[i] -= i ;
    }

    for(int i=1 ; i<=n ; i++)
    {
        scanf("%d",&w[i]) ;
        updatesum( i , w[i] ) ;
        updatewSum( i , (1LL*w[i]*a[i])%mod ) ;
    }



   // for(int j=1; j<=n ; j++) printf("%d: %lld %d\n" ,j,querysum(j) ,querywSum(j) ) ;


    for(int i=1 ; i<=q ; i++)
    {
        int x, y ;
        scanf("%d %d",&x,&y) ;
        if(x<0)
        {
            x *= -1 ;
            updatesum( x , y-w[x] ) ;
            updatewSum( x , (1LL*(y-w[x])*a[x])%mod ) ;
            w[x] = y ;

  //          printf("updated\n") ;

//            for(int j=1; j<=n ; j++) printf("%d: %lld %d\n" ,j,querysum(j) ,querywSum(j) ) ;

        }
        else{
            int l = x , r = y ;

            i64 s1 = querysum(l-1) , s2 = querysum(r) ;

            int lo = l, hi = r ;
            while( lo < hi )
            {
                int m = (lo+hi)/2 ;
                i64 s =  querysum(m) ;
                if( 2LL*s >= s1+s2 ) hi = m ;
                else lo = m+1 ;
            }

            int p = lo ;

            int leftSum = 0 , rightSum = 0 ;

            leftSum = (1LL*((querysum(p)-querysum(l-1))%mod)*a[p] - (querywSum(p) - querywSum(l-1) ) )%mod ;
            rightSum = ( (querywSum(r) - querywSum(p))%mod - 1LL*(((querysum(r)-querysum(p))%mod)*a[p])%mod )%mod ;

            int ans = (leftSum+rightSum)%mod ;
            ans = (ans + mod)%mod ;

     //       printf("-----%d %d\n",leftSum,rightSum) ;
            printf("%d\n",ans) ;
        }
    }

    return 0 ;
}
