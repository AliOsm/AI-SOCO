#include <bits/stdc++.h>
using namespace std;
#define eb emplace_back
#define emp emplace
#define fi first
#define se second
#define INF 0x3f3f3f3f
typedef long long ll;
typedef pair<long long, long long> ii;

const int N = 112345;
const int LOGN = 17;

int n;
vector<int> g[N], vd[N], roots;
int t, tin[N], tout[N], anc[N][LOGN], depth[N];

void prep(int u) {
	for (int i = 1; (1 << i) < n; i++) {
		if (anc[u][i-1] != -1) {
			anc[u][i] = anc[anc[u][i-1]][i-1];
		}
	}

	tin[u] = t++;
	vd[depth[u]].eb(tin[u]);

	for (int i = 0; i < g[u].size(); i++) {
		int v = g[u][i];
		anc[v][0] = u;
		depth[v] = depth[u]+1;
		prep(v);
	}

	tout[u] = t++;
}

int get_anc(int x, int p) {
	int log_max;
	for (log_max = 0; (1 << log_max) <= depth[x]; log_max++); log_max--;

	int curr = 0;
	for (int i = log_max; i >= 0; i--) {
		if (curr + (1 << i) <= p) {
			curr += 1 << i;
			x = anc[x][i];
		}
	}

	return x;
}

int main(void) {
	ios_base::sync_with_stdio(false);

	memset(anc, -1, sizeof anc);
    
	cin >> n;

	for (int i = 1; i <= n; i++) {
		int p; cin >> p;
		if (p) g[p].eb(i);
		else roots.eb(i);
	}

	for (int r : roots) {
		anc[r][0] = r;
		prep(r);
	}

	int q; cin >> q;

	for (int i = 0; i < q; i++) {
		int x, p; cin >> x >> p;

		if (depth[x] < p) {
			cout << 0 << " ";
			continue;
		}

		int panc = get_anc(x, p);
		int l = tin[panc], r = tout[panc];

		int st = lower_bound(vd[depth[panc]+p].begin(), vd[depth[panc]+p].end(), l) - vd[depth[panc]+p].begin();
		int en = lower_bound(vd[depth[panc]+p].begin(), vd[depth[panc]+p].end(), r) - vd[depth[panc]+p].begin() - 1;

		cout << en-st << " ";
	}
	cout << endl;

	return 0;
}

