#include <bits/stdc++.h>

using namespace std;

#define int long long

int n, k, a, b;
vector<int> pos;
int an = 1e18;

int dfs(int l, int r){
    if(l == r){
        auto it = lower_bound(pos.begin(), pos.end(), l);
        if(it != pos.end() && *it == l){
            auto rit = (int)(upper_bound(pos.begin(), pos.end(), r) - pos.begin());
            int sz = rit - (int)(it - pos.begin());
            return b * sz;
        }
        return a;
    }
    else{
        auto it = lower_bound(pos.begin(), pos.end(), l);
        if(it != pos.end() && *it <= r){
            auto rit = (int)(upper_bound(pos.begin(), pos.end(), r) - pos.begin());
            int sz = rit - (int)(it - pos.begin());
            int an = b * sz * (r - l + 1);
            int m = (l + r) >> 1;
            return min(an, dfs(l, m) + dfs(m + 1, r));
        }
        else{
            return a;
        }
    }
}

int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin >> n >> k >> a >> b;
    pos.resize(k);
    for(int i = 0; i < k; i++){
        cin >> pos[i];
        --pos[i];
    }
    sort(pos.begin(), pos.end());
    cout << dfs(0, (1 << n) - 1);
    return 0;
}
