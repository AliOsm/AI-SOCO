#pragma comment (linker, "/STACK:256000000")
 
#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <memory.h>
#include <sstream>
#include <queue>
#include <cassert>
#include <ctime>
#include <complex>
#include <unordered_map>
#include <random>
 
using namespace std;
 
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<pii, pii> piiii;
typedef pair<int64, int> pli;
typedef pair<int, char> pic; 

#define pb push_back
#define sq(x) ((x)*(x))
#define cube(x) (((x)*(x))*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
#define rand32() (((unsigned int)(rand()) << 16) | (unsigned int)(rand()))
#define rand64() (((unsigned int64)(rand32()) << 16) | (unsigned int64)(rand32()))
#define bit(mask, b) ((mask >> b) & 1)
#define biton(mask, bit) (mask | (((uint64)(1)) << bit))
#define bitoff(mask, bit) (mask & (~(((uint64)(1)) << bit)))
#define bitputon(mask, bit) (mask |= (((uint64)(1)) << bit))
#define bitputoff(mask, bit) (mask &= (~(((uint64)(1)) << bit)))
#define FAIL() (*((int*)(0)))++
#define INF ((int)(1e9) + 1337)
#define EPS (1e-8)
#define y1 yy1
#define y0 yy0
#define j0 jj0

const long double PI = acosl((long double)-1.0);
const int64 LINF = (int64)4e18;//((1ull << 63) - 1ull);
const int MOD = 1000000009;
int test;

const int MAXN = 3005;

int n;
int64 a[MAXN];
int64 b[MAXN];
int64 ans;
int64 d[MAXN];
priority_queue<int64, vector<int64>, greater<int64> > qu;

void init()
{
	scanf ("%d", &n);
	for (int i = 1; i <= n; i++)
	{
		scanf ("%I64d", &a[i]);
	}
}

void modify(int pos, int64 val)
{
	ans -= abs(a[pos] - b[pos]);
	a[pos] = val;
	ans += abs(a[pos] - b[pos]);
}

void solve()
{
	init();
	a[0] = -LINF;
	for (int i = 1; i <= n; i++)
	{
		b[i] = a[i];
	}
	for (int i = 2; i <= n; i++)
	{
		memset(d, 0, sizeof(d));
		while (!qu.empty())
		{
			qu.pop();
		}
		int64 g = max(0LL, a[i - 1] + 1 - a[i]);
		int64 t = 0LL;
		for (int j = i - 1; j >= 1 && g; j--)
		{
			if (b[j] < a[j])
			{
				qu.push(a[j] - b[j] + t);
			}
			if ((int)qu.size() * 2 >= i - j)
			{
				int64 cur = min(min(a[j] - a[j - 1] - 1, g), qu.top() - t);
				d[j] = cur;
				t += cur;
				g -= cur;
				while (!qu.empty() && qu.top() <= t)
				{
					qu.pop();
				}
			}
		}
		for (int j = 1; j < i; j++)
		{
			d[j] += d[j - 1];
			modify(j, a[j] - d[j]);
		}
		if (a[i] <= a[i - 1])
		{
			modify(i, a[i - 1] + 1);
		}
	}
	/*for (int i = 1; i <= n; i++)
	{
		fprintf(stderr, "%I64d ",a[i]);
	}*/
	printf("%I64d\n", ans);
}

void precalc()
{
	
}

void test_output()
{
	
}

int main()
{
	//srand(time(0)); test_output(100, 100, 100); 
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(TASK ".in", "rt", stdin); freopen(TASK ".out", "wt", stdout);
#endif
	srand(333);
	double start = clock();
	precalc();
	int tests = 1;
	//scanf ("%d", &tests);
	for (test = 1; test <= tests; test++)
	{
		solve();
	}
	//fprintf(stderr, "%.5lf\n", (clock() - start) / CLOCKS_PER_SEC);
    return 0;
}