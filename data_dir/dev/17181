#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("input.txt");ofstream out("output.txt");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);
 
ll a,b,k,bez;
vec<pll> s;
vec<ll> nb, prb;
 
ll cntL(ll l, ll r, ll x){
    return abs(r-x)+(r-l);
}
 
ll cntR(ll l, ll r, ll x){
    return abs(l-x)+(r-l);
}
 
ll optL(ll pos, ll l, ll r, ll n){
    if(prb[pos]==-1) return 1e17;
    ll ds = pos-prb[pos];
    return ds+(n==0 ? cntL(l,r,prb[pos]) : cntR(l,r,prb[pos]));
}
 
ll optR(ll pos, ll l, ll r, ll n){
    if(nb[pos]==-1) return 1e17;
    ll ds = nb[pos]-pos;
    return ds+(n==0 ? cntL(l,r,nb[pos]) : cntR(l,r,nb[pos]));
}
 
int main() {
    fast;
    cin>>b>>a>>k>>bez;
    s = vec<pll>(b, {-1,-1});
    nb = vec<ll>(a, -1);
    prb = vec<ll>(a, -1);
    for(int q=0; q<k; q++){
        ll x,y; cin>>y>>x; x--; y--;
        s[y].F = s[y].F==-1 ? x : min(s[y].F, x);
        s[y].S = s[y].S==-1 ? x : max(s[y].S, x);
    }
    for(int q=0; q<bez; q++){
        ll x; cin>>x; x--;
        nb[x] = prb[x] = x;
    }
    for(int q=0, c=-1; q<a; q++){
        if(nb[q]!=-1) c = q;
        else prb[q] = c;
    }
    for(int q=a-1, c=-1; q>=0; q--){
        if(nb[q]!=-1) c = q;
        else nb[q] = c;
    }
    vec<vec<ll>> dp(b, vec<ll>(2));
    ll lst = -1;
    for(int q=0; q<b; q++){
        if(s[q].F==-1) continue;
        ll l = s[q].F, r = s[q].S;
        if(lst==-1){
            if(q==0) dp[0][0] = r+(r-l), dp[0][1] = r;
            else{
                ll ps = nb[0], up = q;
                dp[q][0] = ps+up+cntL(l,r,ps);
                dp[q][1] = ps+up+cntR(l,r,ps);
            }
            lst = q;
            continue;
        }
        ll pl = s[lst].F, pr = s[lst].S;
        ll verx = q-lst;
        dp[q][0] = verx+min(dp[lst][0]+min(optL(pl, l, r, 0), optR(pl, l, r, 0)), dp[lst][1]+min(optL(pr, l, r, 0), optR(pr, l, r, 0)));
        dp[q][1] = verx+min(dp[lst][0]+min(optL(pl, l, r, 1), optR(pl, l, r, 1)), dp[lst][1]+min(optL(pr, l, r, 1), optR(pr, l, r, 1)));
        lst = q;
    }
    //for(int q=0; q<b; q++) cout<<dp[q][0]<<" "<<dp[q][1]<<endl;
    cout<<min(dp[lst][0], dp[lst][1]);
}