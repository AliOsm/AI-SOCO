#include <bits/stdc++.h>
using namespace std;
#define all(x) (x).begin(), (x).end()
#define clr(x) memset((x), 0, sizeof(x))
#define clr1(x) memset((x), -1, sizeof(x))
#define pb push_back
#define mp make_pair
#define x first
#define y second
typedef long long ll;
typedef long double ld;
typedef pair<ll, int> PII;
typedef pair<ll, ll> PLL;
typedef pair<ld, ld> PDD;
template<class T = int>
inline T nxt() { T x = 0;int c = getchar();int minus = 0;while (c != '-' && !isdigit(c)) { c = getchar(); }if (c == '-') { minus = 1;c = getchar(); }while (isdigit(c)) { x = x * 10 + c - '0';c = getchar(); }return (minus ? -x : x); }
template<class T>
inline T sqr(T x) { return x * x; }
inline ll isSqr(ll v) { ll t = (ll) sqrt(v);for (ll i = t - 1; i <= t + 1; ++i) { if (i * i == v) return i; }return -1; }
inline ll gcd(ll a, ll b) { a = abs(a);b = abs(b);while (b) { a %= b;swap(a, b); } return a; }

const ll mod = 1000 * 1000 * 1000 + 7;
ll pw(ll a, ll n) {
    ll ret = 1;
    while (n) {
        if (n & 1) ret = ret * a % mod;
        a = a * a % mod;
        n >>= 1;
    }
    return ret;
}

const int N = 200 * 1000 + 10;
int n;
int t[N];
int a[3];


void addSim(vector<int> &cnt, int &ret) {
    ret += cnt[5];
    cnt[0] -= min(cnt[0], cnt[5]);
    cnt[5] = 0;
    ret += cnt[4];
    int ww = min(cnt[1], cnt[4]);
    cnt[1] -= ww;
    cnt[4] -= ww;
    ww = min(cnt[0], cnt[4]);
    cnt[0] -= ww;
    cnt[4] = 0;
}

int solve1(vector<int> cnt) {
//    for (int x : cnt) {
//        cout << x << " ";
//    }
//    cout << endl;
    int ret = 0;
    addSim(cnt, ret);
    int ww;
    ret += cnt[3];
    for (int i = 2; i >= 0; --i) {
        ww = min(cnt[i], cnt[3]);
        cnt[3] -= ww;
        cnt[i] -= ww;
    }
    cnt[3] = 0;
//    for (int i = 0; i <= 2; ++i) {
//        cout << cnt[i] << " ";
//    }
//    cout << endl;

    int l = 0, r = 3e8 + 10;

    while (l < r) {
        int m = (l + r) >> 1;
        int o = m;
        vector<int> c = cnt;
        for (int i = 2; i >= 0; --i) {
            ww = min(o, c[i]);
            c[i] -= ww;
            o -= ww;
        }
        int mm = m - c[2];
        if (c[2] > m) {
            l = m + 1;
            continue;
        }
        o = mm;
        for (int i = 1; i >= 0; --i) {
            ww = min(o, c[i]);
            c[i] -= ww;
            o -= ww;
        }
        if (c[1] > 0) {
            l = m + 1;
            continue;
        }
        if (c[0] > mm) {
            l = m + 1;
            continue;
        }
        r = m;
    }
    ret += l;
    return ret;
}


int solve2(vector<int> cnt) {
//    for (int x : cnt) {
//        cout << x << " ";
//    }
//    cout << endl;

    int ret = 0;
    addSim(cnt, ret);
    int l = 0, r = 3e8 + 10;
    while (l < r) {
        int m = (l + r) >> 1;
        vector<int> c = cnt;
        int o = m;
        for (int i = 3; i >= 0; --i) {
            int w = min(o, c[i]);
            c[i] -= w;
            o -= w;
        }
        if (c[3] > 0) {
            l = m + 1;
            continue;
        }
        o = m;
        int w = min(c[2], o);
        o -= w;
        c[2] -= w;
        if (c[2] > 0) {
            l = m + 1;
            continue;
        }
        int oo = o;
        w = min(c[1], o);
        c[1] -= w;
        o -= w;
        if (c[1] > 0) {
            l = m + 1;
            continue;
        }
        w = min(c[0], o);
        c[0] -= w;
        o -= w;
        if (c[0] > oo) {
            l = m + 1;
            continue;
        }
        r = m;
    }
    ret += l;
    return ret;
}

void read() {
    n = nxt();
    for (int i = 0; i < 3; ++i) {
        a[i] = nxt();
    }
    for (int i = 0; i < n; ++i) {
        t[i] = nxt();
    }
}

void gen() {
    n = 3;
    for (int i = 0; i < 3; ++i) {
        a[i] = rand() % 10 + 1;
    }
    for (int i = 0; i < n; ++i) {
        t[i] = rand() % 20 + 1;
    }
}

int solve() {
    sort(a, a + 3);
    sort(t, t + n);
    if (t[n - 1] > a[0] + a[1] + a[2]) {
        return -1;
    }
    int ans = 0;
    int nn = n;
    while (n > 0 && (t[n - 1] > a[1] + a[2])) {
        --n;
        ++ans;
    }
    if (a[0] + a[1] > a[2]) {
        vector<int> cnt(6);
        vector<int> b(7);
        b[0] = 0;
        b[1] = a[0];
        b[2] = a[1];
        b[3] = a[2];
        b[4] = a[0] + a[1];
        b[5] = a[0] + a[2];
        b[6] = a[1] + a[2];
        for (int i = 0; i < 6; ++i) {
            cnt[i] = upper_bound(t, t + n, b[i + 1]) - upper_bound(t, t + n, b[i]);
        }
        ans += solve1(cnt);
    } else {
        vector<int> cnt(6);
        vector<int> b(7);
        b[0] = 0;
        b[1] = a[0];
        b[2] = a[1];
        b[3] = a[0] + a[1];
        b[4] = a[2];
        b[5] = a[0] + a[2];
        b[6] = a[1] + a[2];
        for (int i = 0; i < 6; ++i) {
            cnt[i] = upper_bound(t, t + n, b[i + 1]) - upper_bound(t, t + n, b[i]);
        }
        ans += solve2(cnt);
    }
    n = nn;
    return ans;
}

int ANS = 1000;
void rec(vector<int> tt, int d) {
    if (tt.empty()) {
        ANS = min(ANS, d);
        return;
    }
    vector<int> tc = tt;
    if (tc.back() <= a[0] + a[1] + a[2]) {
        tc.pop_back();
        rec(tc, d + 1);
    }
    tc = tt;
    if (tt.back() <= a[1] + a[2]) {
        for (int i = 0; i + 1 < tt.size(); ++i) {
            if (tt[i] <= a[0]) {
                tc = tt;
                tc.pop_back();
                tc.erase(tc.begin() + i);
                rec(tc, d + 1);
            }
        }
    }
    if (tt.back() <= a[0] + a[2]) {
        for (int i = 0; i + 1 < tt.size(); ++i) {
            if (tt[i] <= a[1]) {
                tc = tt;
                tc.pop_back();
                tc.erase(tc.begin() + i);
                rec(tc, d + 1);
            }
        }
    }
    if (tt.back() <= a[0] + a[1]) {
        for (int i = 0; i + 1 < tt.size(); ++i) {
            if (tt[i] <= a[2]) {
                tc = tt;
                tc.pop_back();
                tc.erase(tc.begin() + i);
                rec(tc, d + 1);
            }
        }
    }
    if (tt.back() <= a[2]) {
        for (int i = 0; i + 1 < tt.size(); ++i) {
            if (tt[i] <= a[0] + a[1]) {
                tc = tt;
                tc.pop_back();
                tc.erase(tc.begin() + i);
                rec(tc, d + 1);
            }
        }
        for (int i = 0; i < tt.size(); ++i) {
            for (int j = i + 1; j + 1 < tt.size(); ++j) {
                if (tt[i] <= a[0] && tt[i] <= a[1]) {
                    tc = tt;
                    tc.pop_back();
                    tc.erase(tc.begin() + j);
                    tc.erase(tc.begin() + i);
                    rec(tc, d + 1);
                }
            }
        }
    }
}
int sl() {
    ANS = 1000;
    sort(a, a + 3);
    vector<int> tt(t, t + n);
    sort(all(tt));
    rec(tt, 0);
    if (ANS == 1000) return -1;
    return ANS;
}


int main() {
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    read();
    cout << solve() << endl;
    return 0;

    while (true) {
        gen();
        int a1 = solve();
        int a2 = sl();
        if (a1 != a2) {
            cout << a1 << " " << a2 << endl;
            cout << n << endl;
            for (int i = 0; i < 3; ++i) {
                cout << a[i] << " ";
            }
            cout << endl;
            for (int i = 0; i < n; ++i) {
                cout << t[i] << " ";
            }
            cout << endl;
            return 0;
        }
    }
    //solve();

#ifdef LOCAL
    cerr << "time: " << clock() / (double) CLOCKS_PER_SEC << "s." << endl;
#endif
    return 0;
}