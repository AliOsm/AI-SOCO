#define _USE_MATH_DEFINES 
#define _CRT_SECURE_NO_DEPRECATE 
#include <iostream> 
#include <cstdio> 
#include <cstdlib> 
#include <vector> 
#include <sstream> 
#include <string> 
#include <map> 
#include <set> 
#include <algorithm> 
#include <cmath> 
#include <cstring> 
#include <queue>
using namespace std; 
#pragma comment(linker, "/STACK:256000000") 
#define mp make_pair 
#define pb push_back 
#define all(C) (C).begin(), (C).end() 
#define sz(C) (int)(C).size() 
#define PRIME 1103 
#define PRIME1 31415 
typedef long long int64; 
typedef unsigned long long uint64; 
typedef pair<int, int> pii; 
typedef vector<int> vi; 
typedef vector<vector<int> > vvi; 
//------------------------------------------------------------ 
const int N = 200000;
int n, k;
int ww, hh;
set <int> h, v;
set <int> :: iterator it;
priority_queue < pair <int, pii> > qh, qv;
int main()
{
#ifdef WIN32
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    scanf("%d %d %d\n", &ww, &hh, &n);
    h.insert(hh);
    h.insert(0);
    v.insert(0);
    v.insert(ww);
    qh.push(mp(hh, pii(hh, 0)));
    qv.push(mp(ww, pii(ww, 0)));
    for(int i = 0; i < n; ++i)
    {
        char t;
        int op;
        scanf("%c %d\n", &t, &op);
        if (t == 'V')
        {
            it = v.upper_bound(op);
            int kk = *it;
            qv.push(mp(kk - op, pii(kk, op)));
            it--;
            kk = *it;
            qv.push(mp(op - kk, pii(op, kk)));          
            v.insert(op);
        }
        else
        {
            
            it = h.upper_bound(op);
            int kk = *it;
            qh.push(mp(kk - op, pii(kk, op)));
            it--;
            kk = *it;
            qh.push(mp(op - kk, pii(op, kk)));          
            h.insert(op);
        }
        int64 t1 = 0, t2 = 0;
        while(true)
        {
            pair <int, pii> op = qh.top();
            if ((*h.upper_bound(op.second.second)) != op.second.first)
            {
                qh.pop();
                continue;
            }
            t1 = op.first;
            break;
        }
        while(true)
        {
            pair <int, pii> op = qv.top();
            if ((*v.upper_bound(op.second.second)) != op.second.first)
            {
                qv.pop();
                continue;
            }
            t2 = op.first;
            break;
        }
        printf("%lld\n", t1 * t2);
    }
    
} 