#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             2e16
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>


#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())


#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);

int n,k;
const LL MOD = 998244353;

LL dp[1005][2005][2][2];

LL call(int pos,int comp,int up,int down)
{
    if(comp > k)return 0;
    if(pos == n){
        return comp == k;
    }
    if(dp[pos][comp][up][down] != -1)return dp[pos][comp][up][down];
    LL ret = 0;
    if(pos == 0){
        ret += call(pos + 1,comp + 1,0,0);
        ret += call(pos + 1,comp + 1,1,1);
        ret += call(pos + 1,comp + 2,1,0);
        ret += call(pos + 1,comp + 2,0,1);
    }else{
        for(int i = 0;i < 2;i++){
            for(int j = 0;j < 2;j++){
                if(i == j){
                    if(i == up or j == down)ret += call(pos + 1,comp,i,j);
                    else ret += call(pos + 1,comp + 1,i,j);
                }else{
                    if(i == up and j == down)ret += call(pos + 1,comp,i,j);
                    else if(i == up and j != down)ret += call(pos + 1,comp + 1,i,j);
                    else if(i != up and j == down)ret += call(pos + 1,comp + 1,i,j);
                    else ret += call(pos + 1,comp + 2,i,j);
                }
            }
        }
    }
    return dp[pos][comp][up][down] = ret % MOD;
}
int main()
{
    cin >> n >> k;
    MEM(dp,-1);
    cout << call(0,0,0,0) << "\n";
}
