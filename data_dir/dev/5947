#include <bits/stdc++.h>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef unsigned int uint;
typedef long double ld;
//#define ll __int128
#define int ll
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
typedef vector<int> vi;
typedef vector< vi > vvi;
typedef vector< vvi > vvvi;
typedef vector<pii> vpi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vvl> vvvl;
typedef vector<ld> vld;
typedef vector<vld> vvld;

#define inmin(a, b) a = min(a, (b))
#define inmax(a, b) a = max(a, (b))
#define mp(a,b) make_pair(a,b)
#define modsum(a, b) ((a) + (b) >= M ? (a) + (b) - M : (a) + (b))
#define modsubtract(a, b) ((a) - (b) < 0 ? (a) - (b) + M : (a) - (b))
#define modmultiply(a, b) (((a) * (b)) % M)
#define ALL(a) a.begin(),a.end()
#define RALL(a) a.rbegin(),a.rend()
#define sqr(x) ((x) * (x))
#define fori(i, n) for(int i = 0; i < int(n); ++i)
#define cint const int &
#define SZ(a) ((int)(a.size()))
#define watch(x) cout << (#x) << " = " << x << endl;

const double PI = atan2(1, 0) * 2;

const string DIGITS = "0123456789";
const string ALPH = "abcdefghijklmnopqrstuvwxyz";


template<class T>
ostream & operator << (ostream &out, vector<T> &a) {
    out << "{";
    for (auto x : a) out << x << " ";
    return out << "}";
}

void smain();

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);


#ifdef ART_HOME
    freopen("input.txt", "r", stdin);
    clock_t start = clock();
#endif
    cout << setprecision(12) << fixed;
    smain();
#ifdef ART_HOME
    cout << "\n\n\n";
    cout << "TOTAL EXECUTION TIME: " << float(clock() - start) / CLOCKS_PER_SEC << endl;
#endif
}


int k;
string cur, low, up;


bool check_l(map<char, char> tr, char c, char c1, string cur, string low) {
    set<char> fre;
    for (int i = 0; i < k; ++i)
        fre.insert('a' + i);

    tr[c] = c1;

    for (auto p : tr)
        fre.erase(p.second);

    for (int i = 0; i < SZ(cur); ++i)
    {
        if (!tr.count(cur[i]))
        {
            tr[cur[i]] = *fre.rbegin();
            fre.erase(*fre.rbegin());
        }

        cur[i] = tr[cur[i]];
    }


    for (int i = 0; i < k; ++i)
        if (!tr.count('a' + i))
        {
            tr['a' + i] = *fre.begin();
            fre.erase(fre.begin());
        }


    if (cur >= low && cur <= up && fre.empty())
    {
        cout << "YES\n";
        for (int i = 0; i < k; ++i)
            cout << tr['a' + i];

        cout << '\n';
        return true;
    } else
    {
        return false;
    }
}



bool check_u(map<char, char> tr, char c, char c1, string cur, string up) {
    set<char> fre;
    for (int i = 0; i < k; ++i)
        fre.insert('a' + i);

    tr[c] = c1;

    for (auto p : tr)
        fre.erase(p.second);

    for (int i = 0; i < SZ(cur); ++i)
    {
        if (!tr.count(cur[i]))
        {
            tr[cur[i]] = *fre.begin();
            fre.erase(fre.begin());
        }

        cur[i] = tr[cur[i]];
    }


    for (int i = 0; i < k; ++i)
        if (!tr.count('a' + i))
        {
            tr['a' + i] = *fre.begin();
            fre.erase(fre.begin());
        }


    if (cur >= low && cur <= up && fre.empty())
    {
        cout << "YES\n";
        for (int i = 0; i < k; ++i)
            cout << tr['a' + i];

        cout << '\n';
        return true;

    } else
    {
        return false;
    }
}


void check(map<char, char> tr, string cur)
{
    set<char> fre;
    for (int i = 0; i < k; ++i)
        fre.insert('a' + i);

    for (auto p : tr)
        fre.erase(p.second);

    for (int i = 0; i < SZ(cur); ++i)
    {
        if (!tr.count(cur[i]))
            {
            tr[cur[i]] = *fre.begin();
            fre.erase(fre.begin());
        }

        cur[i] = tr[cur[i]];
    }


    for (int i = 0; i < k; ++i)
        if (!tr.count('a' + i))
        {
            tr['a' + i] = *fre.begin();
            fre.erase(fre.begin());
        }


    if (cur >= low && cur <= up && fre.empty())
    {
        cout << "YES\n";
        for (int i = 0; i < k; ++i)
            cout << tr['a' + i];

        cout << '\n';
    } else
    {
        cout << "NO\n";
    }
}


void solution(int k, string s, string a, string b)
{
    map<char, char> trans;
    string cur;
    int n = SZ(a);

    for (int i = 0; i < n; ++i) {
        if (a[i] == b[i]) {
            trans[s[i]] = a[i];
            continue;
        }

        if (trans.count(s[i]))
        {
            if (trans[s[i]] == a[i]) {
                if (check_l(trans, s[i], a[i], s, a))
                    return;
                else
                {
                    cout << "NO\n";
                    return;
                }
            }
            else if (trans[s[i]] == b[i]) {
                if (check_u(trans, s[i], b[i], s, b))
                    return;
                else
                {
                    cout << "NO\n";
                    return;
                }
            }
            else if (trans[s[i]] < a[i] || trans[s[i]] > b[i])
            {
                cout << "NO\n";
                return;
            } else
            {
                check(trans, s);
                return;
            }
        }

        if (a[i] + 1 == b[i])
        {
            if (check_l(trans, s[i], a[i], s, a))
                return;

            if (check_u(trans, s[i], b[i], s, b))
                return;

            cout << "NO\n";
            return;
        } else
        {
            set<char> fre;
            for (int c = a[i] + 1; c < b[i]; ++c)
                fre.insert(c);

            for (auto p : trans)
                fre.erase(p.second);

            if (SZ(fre)) {
                trans[s[i]] = *fre.begin();
                check(trans, s);
                return;
            }
            else
            {

                if (check_l(trans, s[i], a[i], s, a))
                    return;

                if (check_u(trans, s[i], b[i], s, b))
                    return;

                cout << "NO\n";
                return;
            }
        }
    }

    check(trans, s);
}


void smain() {

  int t;
  cin >> t;

  while(t--)
  {
      cin >> k >> cur >> low >> up;
      solution(k, cur, low, up);
  }
}