/*input
5
#...#
.#.#.
.....
.#...
#....


4
#...
....
....
#...


3
...
...
...


3
###
#.#
###

*/
#include <bits/stdc++.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define __builtin_popcount __builtin_popcountll
#define bit(x,y) ((x>>y)&1LL)
#define loop(i,l,r) for(int i=(int)l; i<=(int)r; i++)
#define rloop(i,l,r) for(int i=(int)l; i>=(int)r; i--)
const int N = 51;
template <class T1, class T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &a) {
	return os << '(' << a.first << ", " << a.second << ')';
}
template <class T>
ostream &operator<<(ostream &os, const vector<T> &a) {
	os << '[';
	for (unsigned int i = 0; i < a.size(); i++)
		os << a[i] << (i < a.size() - 1 ? ", " : "");
	os << ']';
	return os;
}

int dp[N][N][N][N];
int a[N][N]; // 1 for black . turn them to 0
int s[N][N];
int n;

int get(pair<int, int> lo, pair<int, int> hi) {
	return s[hi.fi][hi.se] - s[lo.fi - 1][hi.se] - s[hi.fi][lo.se - 1] + s[lo.fi - 1][lo.se - 1];
}

void prepSum() {
	loop(i, 1, n) {
		loop(j, 1, n) {
			s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + a[i][j];
		}
	}
}

signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	cin >> n;
	loop(i, 1, n) {
		loop(j, 1, n) {
			char c; cin >> c; if (c == '#') a[i][j] = 1; else a[i][j] = 0;
		}
	}
	prepSum();
	loop(subfi, 0, n - 1) {
		loop(subse, 0, n - 1) {
			pair<int, int> lo, hi;
			for (lo.fi = 1, hi.fi = lo.fi + subfi; hi.fi <= n; lo.fi++, hi.fi++) {
				for (lo.se = 1, hi.se = lo.se + subse; hi.se <= n; lo.se++, hi.se++) {
					int &ret = dp[lo.fi][lo.se][hi.fi][hi.se];
					if (get(lo, hi) == 0) {
						ret = 0;
						continue;
					}
					ret = max(hi.fi - lo.fi + 1, hi.se - lo.se + 1);
					if (lo.fi != hi.fi) {
						loop(i, lo.fi, hi.fi - 1) {
							ret = min(ret, dp[lo.fi][lo.se][i][hi.se] + dp[i + 1][lo.se][hi.fi][hi.se]);
						}
					}
					if (lo.se != hi.se) {
						loop(i, lo.se, hi.se - 1) {
							ret = min(ret, dp[lo.fi][lo.se][hi.fi][i] + dp[lo.fi][i + 1][hi.fi][hi.se]);
						}
					}
				}
			}
		}
	}
	cout << dp[1][1][n][n] << endl;
}