/// You just can't beat the person who never gives up
/// ICPC next year

#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include<bits/stdc++.h>
using namespace std ;
const int N = 2e5+5 ;

int n ,k ,u ,v ,parent[N] ,deg[N] ;
vector<int> adj[N] ;
long long add[N] ;
int dfs(int p,int gp,int d){
    int cnt = 0 ;
    parent[p] = gp ;
    for(int ch:adj[p]) if(ch!=gp) cnt += dfs(ch,p,d+1) ,++deg[p] ;
    add[p] = d - cnt ;
    return cnt+1 ;
}
long long solve(){
    priority_queue<pair<long long,int>> pq ;
    for(int i=1;i<=n;++i) if(!deg[i]) pq.push({add[i],i});
    long long ans = 0 ;
    while(k--){
        int p = pq.top().second ;
        ans += pq.top().first ;
        pq.pop() ;
        if(!--deg[parent[p]]) pq.push({add[parent[p]] ,parent[p]});
    }
    return ans ;
}
int main(){
    scanf("%d%d",&n,&k);
    for(int i=1;i<n;++i){
        scanf("%d%d",&u,&v);
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(1,1,0) ;
    cout << solve() ;
    return 0;
}
