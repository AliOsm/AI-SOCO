#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 100000007LL
#define IN freopen("C.in","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 1000000000
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 2
#define sq(x)  ((x)*(x))

using namespace __gnu_pbds;
using namespace std ;

typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef pair<i64, i64> pii;


i64 f( i64 n )
{
    i64 m = n ;
    string s ;
    while(m!=0)
    {
        char ch = m%10 + '0' ;
        s += ch ;
        m /= 10 ;
    }

    reverse( s.begin()  , s.end() ) ;

  //  cout<<s<<endl ;

    i64 sum[35] , cnt[35] ;

    cnt[0] = 1 ;
    for(int i=1 ; i<=18 ; i++) cnt[i] = cnt[i-1]*10LL ;

    sum[0] = 0 ;

    i64 ans = 0LL ;

    for(int i=1 ; i<(int)s.size() ; i++)
    {
        sum[i] = 0 ;
        for(int j=1 ; j<=9 ; j++)
        {
            sum[i] = sum[i] +  j*cnt[i-1] + sum[i-1] ;
        }
        sum[i] += sum[i-1] ;
      //  printf("%lld\n",sum[i]) ;
    }

    ans = sum[ (int)s.size() - 1 ] ;

 //   cout<<ans<<endl ;

    int sz = (int)s.size() ;
    i64 num = 0LL ;

    for(int i=0 ; i<sz ; i++)
    {
        int j = 0 ;
        if(i==0) j = 1 ;

        for( ; j < s[i]-'0' ; j++ )
        {
            ans += ( j*cnt[ sz-i-1 ] + sum[sz-i-1] ) ;
            ans +=  num*cnt[sz-i-1] ;
        }
        num  = num + (s[i]-'0') ;
    }
    return ans+num ;
}

i64 dSum( i64 n )
{
    i64 s = 0 ;
    while( n!=0 )
    {
        s += n%10 ;
        n /= 10 ;
    }
    return s ;
}

int main()
{
   // i64 ans1 =  0LL ;

   // for(int i=1 ; i<=523 ; i++) ans1 += dSum(i) ;

   // cout<<ans1<<endl ;

   // i64 res = f(523) ;

  //  printf("%lld\n",res) ;


    i64 m ;
    scanf("%lld",&m) ;

//    cout<<f(10)<<endl ;

    i64 lo = 0 , hi = 1e17 ;

    while( lo < hi )
    {
        i64 mid = (lo+hi+1)/2 ;

        i64 res = f(mid) ;
        if( res <= m ) lo= mid ;
        else hi = mid-1 ;
    }

  //  printf("%lld\n",lo) ;

    i64 l = 1 , r = lo ;

    i64 sum = f(r) ;

    while( 1  )
    {
        while( sum < m )
        {
            r++ ;
            sum += dSum(r) ;
        }
        while( sum > m )
        {
            sum -= dSum(l) ;
            l++ ;
        }
        if( sum%m==0 )
        {
            printf("%lld %lld\n",l,r) ;
            return 0 ;
        }
    }

    return 0 ;
}
