#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <assert.h>
#include <bitset>
#include <string>
#include <cstdio>
#include <math.h>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>
using namespace std;

#define mp make_pair
#define int64 long long

#ifdef _DEBUG
    const int N = 210;
#else
    const int N = 200010;
#endif

const int M = 10;

struct Node
{
    int cnt[M][M];
    int cupd, cleft, cright;
    Node()
    {
        memset(cnt, 0, sizeof(cnt));
    }
};
    
int n, m, k, a[N], pos[M];
string s;
Node tree[4 * N];

Node merge(Node &v1, Node &v2)
{
    Node res;
    for (int i = 0; i < k; i++)
        for (int j = 0; j < k; j++) 
            res.cnt[i][j] = v1.cnt[i][j] + v2.cnt[i][j];
    res.cnt[v1.cright][v2.cleft]++;
    res.cupd = -1;
    res.cleft = v1.cleft;
    res.cright = v2.cright;
    return res;
}

void build(int v, int tl, int tr)
{
    if (tl == tr)
    {
        tree[v] = Node();
        tree[v].cupd = -1;
        tree[v].cleft = a[tl];
        tree[v].cright = a[tr];
        return;
    }
    int tm = (tl + tr) / 2;
    build(v * 2, tl, tm);
    build(v * 2 + 1, tm + 1, tr);
    tree[v] = merge(tree[v * 2], tree[v * 2 + 1]);
}

void assign(Node &v, int tl, int tr, int val)
{
    v.cupd = val;
    v.cleft = val;
    v.cright = val;
    for (int i = 0; i < k; i++)
        for (int j = 0; j < k; j++)
            if (i != val || j != val) v.cnt[i][j] = 0;
            else v.cnt[i][j] = tr - tl;
}

void push(int v, int tl, int tr)
{
    int tm = (tl + tr) / 2;
    if (tree[v].cupd != -1)
    {
        assign(tree[v * 2], tl, tm, tree[v].cupd);
        assign(tree[v * 2 + 1], tm + 1, tr, tree[v].cupd);
        tree[v].cupd = -1;
    }
}

void update(int v, int tl, int tr, int l, int r, int val)
{
    if (l > r) return;
    if (l == tl && r == tr) 
    {
        assign(tree[v], tl, tr, val);
        return;
    }
    push(v, tl, tr);
    int tm = (tl + tr) / 2;
    update(v * 2, tl, tm, l, min(r, tm), val);
    update(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r, val);
    tree[v] = merge(tree[v * 2], tree[v * 2 + 1]);
}

int get(int c1, int c2)
{
    return tree[1].cnt[c1][c2];
}

int main()
{ 
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    scanf("%d%d%d", &n, &m, &k);
    cin >> s;
    for (int i = 1; i <= n; i++) a[i] = s[i - 1] - 'a';
    build(1, 1, n);
    for (int i = 1; i <= m; i++)
    {
        int type;
        scanf("%d", &type);
        if (type == 1)
        {
            int l, r;
            char c;
            scanf("%d%d %c", &l, &r, &c);
            int tmp = c - 'a';
            update(1, 1, n, l, r, tmp);
        }
        else
        {
            string s;
            cin >> s;
            for (int j = 0; j < s.length(); j++) pos[s[j] - 'a'] = j;
            int res = 0;
            for (int c1 = 0; c1 < k; c1++)
                for (int c2 = 0; c2 < k; c2++)
                    if (pos[c1] >= pos[c2]) res += get(c1, c2);
            res++;
            printf("%d\n", res);
        }
    }
    return 0;
}