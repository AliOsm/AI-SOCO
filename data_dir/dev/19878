#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <cmath>
#include <bitset>
#include <string>
#include <map>
#include <queue>
#include <cstring>
#include <climits>
using namespace std;

#define uint64 unsigned int64
#define int64 long long
#define rep(i, n) f(i, 0, (n) - 1)
#define f(i, a, b) fd(i, (a), (b), 1)
#define fd(i, a, b, d) for(int i = (a); i <= (int)(b); i += (d))

#ifndef ONLINE_JUDGE
#include <time.h>
clock_t _time;
void startProfile()
{
  _time = clock();
  cout << "Begin profiling..\n...\n";
}
void stopProfile()
{
  cout << "\n...\nEnd profiling. Time: " << (double)(clock() - _time) / CLOCKS_PER_SEC << " sec.\n";
}
#endif

template<typename T>
class vector2d
{
  public:
    T x;
    T y;

    vector2d() { }
    vector2d(const T x, const T y)
    {
      this->x = x;
      this->y = y;
    }
    vector2d<T> operator -(const vector2d<T> &v)
    {
      return vector2d<T>(x - v.x, y - v.y);
    }
    double length()
    {
      return hypot((double)x, (double)y);
    }
};

template<typename T>
class circle
{
  public:
    vector2d<T> center;
    T radius;
    circle() { }
    circle(const vector2d<T> &center, const T &radius)
    {
      this->center = center;
      this->radius = radius;
    }
    bool contains(vector2d<T> &point)
    {
      vector2d<T> temp = point - center;
      return temp.x * temp.x + temp.y * temp.y <= radius * radius;
    }
};

int main()
{
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  //freopen("output.txt", "w", stdout);
  startProfile();
#endif

  int n, m, x;
  cin >> n >> m >> x;

  vector<circle<int> > shift_area;
  vector<string> keys(n);
  rep(i, n)
  {
    cin >> keys[i];
    rep(j, m)
    {
      if(keys[i][j] == 'S')
        shift_area.push_back(circle<int>(vector2d<int>(j, i), x));
    }
  }

  map<char, bool> one_hand;
  rep(i, n)
  {
    rep(j, m)
    {
      if(keys[i][j] != 'S' && !one_hand[keys[i][j]])
      {
        vector2d<int> p(j, i);
        rep(k, shift_area.size())
        {
          if(shift_area[k].contains(p))
          {
            one_hand[keys[i][j]] = true;
            break;
          }
        }
      }
    }
  }

  int q;
  cin >> q;

  string text;
  cin >> text;

  int second_hand_press = 0;
  rep(i, q)
  {
    if(one_hand.find(tolower(text[i])) == one_hand.end())
    {
      second_hand_press = -1;
      break;
    }
    if(isupper(text[i]))
    {
      if(shift_area.size() > 0)
      {
        if(!one_hand[tolower(text[i])])
        {
          ++second_hand_press;
        }
      }
      else
      {
        second_hand_press = -1;
        break;
      }
    }
  }

  cout << second_hand_press;


#ifndef ONLINE_JUDGE
  stopProfile();
#endif
  return 0;
}
