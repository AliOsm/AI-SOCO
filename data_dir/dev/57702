#include <iostream>

#include <vector>

using namespace std;

int N;
char B[104][104];

void solve() {
   vector<int> rows_cov(N, -1), cols_cov(N, -1);
   for (int r = 0; r < N; ++r)
      for (int c = 0; c < N; ++c)
         if (B[r][c] != 'E') {
            rows_cov[r] = c;
            cols_cov[c] = r;
         }

   vector<int> res;
   for (int r = 0; r < N; ++r) {
      if (rows_cov[r] < 0)
         break;
      res.push_back( rows_cov[r] );
   }

   if (res.size() == N) {
      for (int i = 0; i < N; ++i)
         cout << i+1 << ' ' << res[i]+1 << endl;
      return;
   }

   res.clear();
   for (int c = 0; c < N; ++c) {
      if (cols_cov[c] < 0)
         break;
      res.push_back( cols_cov[c] );
   }

   if (res.size() == N) {
      for (int i = 0; i < N; ++i)
         cout << res[i]+1 << ' ' << i+1 << endl;
      return;
   }

   cout << "-1" << endl;
   
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(NULL);

   cin >> N;
   for (int i = 0; i < N; ++i)
      cin >> B[i];

   solve();

   return 0;
}
