#include<bits/stdc++.h>
using namespace std;
#define LL                  long long
#define ull                 unsigned long long
#define scl(n)              scanf("%lld", &n)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)
#define scs(n)              scanf("%s", n)
#define pfi(n)              printf("%d\n",n)
#define pfl(n)              printf("%I64d ",n)
#define pfs(s)              printf("%s\n",s)
#define bug1		        printf("bug1")
#define	bug2			    printf("bug2")
#define	bug3		        printf("bug3")

#define FASTREAD            ios_base::sync_with_stdio(0);cin.tie(nullptr);
#define MOD                 1000000007
#define MODP                99999999999973LL
#define pb                  push_back
#define mp                  make_pair
#define pp                  pair<LL,LL>
#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e9
#define EPS                 1e-8
#define Pi                  acos(-1.0)

LL bigmod(LL b, LL p, LL md){if(p==0) return 1;if(p%2==1){ return ((b%md)*bigmod(b,p-1,md))%md;} else {LL y=bigmod(b,p/2,md);return (y*y)%md;}}
#define N 1000006

int d[N];
int c[N];
int cnt[N];


int main()
{
    string str;
    cin>>str;
    int n=str.size();
    str="#"+str;

    stack<int>stk;
    int ans=0;
    cnt[0]=1;
    for(int i=1;i<=n;i++)
    {
        if(str[i]=='(')
        {
            stk.push(i);
        }
        else
        {
            if(stk.size()==0)
            {
                c[i]=-1;
                d[i]=-1;
            }
            else
            {
                int last=stk.top();
                stk.pop();
                c[i]=last;
                if( str[last-1]==')' && d[last-1 ]!=-1 )
                    d[i]=d[ last-1 ];
                else
                    d[i]=c[i];
                int tem=i-d[i]+1;
                ans=max(ans,tem);
                cnt[tem]++;
            }
        }
    }

    cout<<ans<<" "<<cnt[ans]<<endl;

   return 0;
}

/* LL dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* LL dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* LL dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* LL dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction
