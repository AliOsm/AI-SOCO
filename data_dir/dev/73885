#include<bits/stdc++.h>
using namespace std;

vector< int >stairs;
vector< int >lifts;
int v;

int solve(int x1, int y1, int x2, int y2)
{
    if (x1==x2) return abs(y1-y2);
    int mn = 1e9;
    int id = lower_bound(stairs.begin(), stairs.end(), y1)-stairs.begin();
    if (id < stairs.size()) {
        mn = min(mn, abs(y1-stairs[id])+abs(x1-x2)+abs(y2-stairs[id]));
    }
    if (id-1 >= 0) {
        mn = min(mn, abs(y1-stairs[id-1])+abs(x1-x2)+abs(y2-stairs[id-1]));
    }
    id = lower_bound(lifts.begin(), lifts.end(), y1)-lifts.begin();
    if (id < lifts.size()) {
        mn = min(mn, abs(y1-lifts[id])+(abs(x1-x2)+v-1)/v+abs(y2-lifts[id]));
    }
    if (id-1 >= 0) {
        mn = min(mn, abs(y1-lifts[id-1])+(abs(x1-x2)+v-1)/v+abs(y2-lifts[id-1]));
    }
    return mn;
}

int main()
{
    std::ios::sync_with_stdio(false);
    cin.tie(0);

    int n, m, cl, ce;
    cin >> n >> m >> cl >> ce >> v;

    stairs.resize(cl);
    for (int i = 0; i < cl; i++) cin >> stairs[i];

    lifts.resize(ce);
    for (int i = 0; i < ce; i++) cin >> lifts[i];

    int q;
    cin >> q;

    while (q--) {
        int x1, y1, x2, y2;
        cin >> x1 >> y1 >> x2 >> y2;
        cout << solve(x1, y1, x2, y2) << "\n";
    }

    return 0;
}
