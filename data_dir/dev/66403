#include<cstdio>
#include<cctype>
#include<algorithm>
#include<vector>
#include<cmath>
#define  register
#define  inline
using namespace std;
const int S=100003,M=17,inf=0x7fffffff;
char buf[1000000],*p1,*p2;
 char gc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,S,stdin),p1==p2)?EOF:*p1++;}
 int rd(){
     int f=0;  char c=gc();
    while(c<48||c>57) c=gc();
    while(c>47&&c<58) f=f*10+(c^48),c=gc();
    return f;
}
struct query{int k,p,o;}q[S];
struct splay{int p,d[2],s;}e[S];
int a[S],b[S],l[S],f[S][M],g[S][M],h[S],m;
vector<int> v[S];
 int operator<(query x,query y){return x.k<y.k;}
 int min(int x,int y){return x<y?x:y;}
 int max(int x,int y){return x>y?x:y;}
 int qmn(int x,int y){
     int i=l[y-x+1];
    return min(f[x][i],f[y-(1<<i)+1][i]);
}
 int qmx(int x,int y){
     int i=l[y-x+1];
    return max(g[x][i],g[y-(1<<i)+1][i]);
}
 int nrt(int x){return e[e[x].p].d[0]==x||e[e[x].p].d[1]==x;}
 void psu(int x){e[x].s=e[e[x].d[0]].s+e[e[x].d[1]].s+1;}
 void rtt(int x){
     int f=e[x].p,g=e[f].p,b=e[f].d[1]==x,c=e[x].d[!b];
    if(nrt(f)) e[g].d[e[g].d[1]==f]=x;
    if(c) e[c].p=f;
    e[f].p=x,e[x].p=g,e[x].d[!b]=f,e[f].d[b]=c,psu(f);
}
 void spl(int x){
    for( int f,g;nrt(x);rtt(x)){
        f=e[x].p,g=e[f].p;
        if(nrt(f))
            rtt((e[g].d[1]==f)^(e[f].d[1]==x)?x:f);
    }
    psu(x);
}
 void acc(int x){
    for( int y=0;x;x=e[y=x].p)
        spl(x),e[x].d[1]=y,psu(x);
}
 int frt(int x){
    while(e[x].d[0])
        x=e[x].d[0];
    return x;
}
 void cut(int x){acc(x),spl(x),e[e[x].d[0]].p=0,e[x].d[0]=0,psu(x);}
 int fnd(int x,int k){
     int l=x+1,r=m,m;
    for(m=l+r>>1;l<r;m=l+r>>1)
        qmx(x,m)-qmn(x,m)>k?r=m:l=m+1;
    return m;
}
int main()
{
     int n=rd(),W=rd(),Q=rd(),p=sqrt(n),i,j,k,t,s,o;
    for(m=n+1,i=1;i<=n;++i)
        a[i]=f[i][0]=g[i][0]=rd();
    a[m]=f[m][0]=g[m][0]=inf,l[1]=0;
    for(i=2;i<=m;++i)
        l[i]=l[i>>1]+1;
    for(i=1,k=2;k<=m;++i,k<<=1)
        for(j=1;j+k-1<=m;++j)
            f[j][i]=min(f[j][i-1],f[j+(k>>1)][i-1]),g[j][i]=max(g[j][i-1],g[j+(k>>1)][i-1]);
    for(i=1;i<=Q;++i)
        q[i].p=i,q[i].k=W-rd();
    sort(q+1,q+Q+1);
    for(i=1;i<=n;++i)
        h[i]=i,e[i].p=i+1,v[1].push_back(i);
    for(i=1;i<=Q;++i){
        for(o=0,t=0,s=v[i].size();t<s;++t){
            j=v[i][t],cut(j);
            for(k=h[j]+1;qmx(j,k)-qmn(j,k)<=q[i].k&&k-j<=p&&k<=n;++k);
            if(k-j>p)
                b[j]=1;
            else
                h[j]=k,e[j].p=h[j],v[lower_bound(q+1,q+1+Q,(query){qmx(j,h[j])-qmn(j,h[j]),0})-q].push_back(j);
        }
        for(j=1;;j=fnd(j,q[i].k),++o){
            if(!b[j])
                acc(j),spl(j),o+=e[j].s-1,j=frt(j);
            if(j>n)
                break;
        }
        q[q[i].p].o=o-1;
    }
    for(i=1;i<=Q;++i)
        printf("%d\n",q[i].o);
    return 0;
}