#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

typedef long long ll;
using namespace std;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000005;
const ll INFLL = 100000000000000002ll;
const ll MOD = 1000000007;

inline ll min(ll a, ll b, ll c){return min(min(a,b),c);}
inline ll min(ll a, ll b, ll c, ll d){return min(min(min(a,b),c),d);}
inline ll max(ll a, ll b, ll c){return max(max(a,b),c);}
inline ll max(ll a, ll b, ll c, ll d){return max(max(max(a,b),c),d);}

// ----------------------------------------------------------------------------------------------------------

ll M;

ll ways(ll n)
{
    ll ret = 0;
    for(ll i = 2; i*i*i <= n; i++)
    {
        ll cub = i*i*i;
        ret += n/cub;
    }
    return ret;
}

int main()
{
    cin >> M;
    ll a = 0, b = INFLL;
    while(b-a > 1)
    {
        ll p = (a+b) / 2;
        ll w = ways(p);
        if(w >= M) b = p;
        else a = p;
    }
    if(ways(a) == M) cout << a;
    else if(ways(b) == M) cout << b;
    else cout << -1;
}
