#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair

typedef long long int ll;
typedef vector< pair<int,int> > vii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<long long int> vll;
typedef pair<int,int> pii;

const ll INF= ll (1e18);
const int MOD= 1e9+7;
const int N=100000+10;

int main()
{
    int n,k;
    cin>>n>>k;

    vector< pair<pii, int> > v;
    set< pii > set1;

    for(int i=0;i<n;i++)
    {
        int l,r;
        cin>>l>>r;

        v.pb(mp(mp(l,r),i));
    }

    sort(v.begin(),v.end());

    int maxi=0;
    if(k==1)
    {
        for(int i=0;i<n;i++)
        maxi=max(maxi,v[i].first.second-v[i].first.first+1);


           for(int i=0;i<n;i++)
           {
               if(maxi==v[i].first.second-v[i].first.first+1)
               {cout<<maxi<<endl;
               cout<<v[i].second+1<<endl;

               exit(0);
               }

           }
    }

    // we need to find min r[i];
    int ans=0;

    for(int i=0;i<n;i++)
    {
        if(set1.size()==k-1)
        {
            ans=max(ans,min(v[i].first.second,set1.begin()->first)-v[i].first.first+1);

            if(set1.begin()->first<v[i].first.second)
            {
                set1.erase(set1.begin());
                set1.insert(mp(v[i].first.second,v[i].second));
            }

        }
        else
        {
            set1.insert(mp(v[i].first.second,i));
        }
    }

    cout<<ans<<endl;

     set1.clear();

     if(ans==0)
     {
         for(int i=1;i<=k;i++)
            cout<<i<<" ";
         exit(0);
     }

    for(int i=0;i<n;i++)
    {
        if(set1.size()==k-1)
        {
            if(ans==(min(set1.begin()->first,v[i].first.second)-v[i].first.first+1))
            {
                cout<<v[i].second+1 <<" ";

                while(!set1.empty())
                {
                    cout<<set1.begin()->second + 1 <<" ";
                    set1.erase(set1.begin());
                }
                break;
            }
             if(set1.begin()->first<v[i].first.second)
            {
                set1.erase(set1.begin());
                set1.insert(mp(v[i].first.second,v[i].second));
            }
        }

        else
        {
            set1.insert(mp(v[i].first.second,v[i].second));
        }
    }

    return 0;
}
