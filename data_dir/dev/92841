#include <bits/stdc++.h>
using namespace std;

typedef complex<int> point;
typedef long long int lli;
typedef long double ld;
#define pii pair<int,int>
#define lasB(b) (b&(-b))
#define mod 1000000007
#define PI acos(-1.0)
#define PB push_back
#define N      2003
#define EPS (1e-8)
#define ss substr
#define S second
#define IM image
#define F first
#define RE real
#define B begin
#define E end

int n,k,t1,t2,G;
lli c[N],vis[N],aux[N];
vector<int> adj[N];
lli sol = 0;

void dfs(int x)
{
    vis[x]=aux[x]=1;
    for(auto u : adj[x])
    {
        if(vis[u]||(c[u]<c[G])||(c[u]>k+c[G])||(c[u]==c[G]&&u<G))
            continue;
        dfs(u);
        aux[x] = ((aux[x]%mod) *  (aux[u]+1)%mod)%mod;
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    scanf("%d %d",&k,&n);
    for(int i=1;i<=n;i++)
        scanf("%d",&c[i]);
    for(int i=0;i<n-1;i++)
    {
        scanf("%d %d",&t1,&t2);
        adj[t1].PB(t2);
        adj[t2].PB(t1);
    }
    for(int i=1;i<=n;i++)
    {
        memset(vis,0,sizeof vis);
        memset(vis,0,sizeof aux);
        G=i;
        dfs(i);
        sol=(sol%mod + aux[i]%mod)%mod;
    }
    cout<<sol;
    return 0;
}
