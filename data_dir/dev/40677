#pragma GCC optimize("O3")

#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <random>
#include <cmath>
#include <chrono>
#include <bitset>

#define ld long double
#define pb push_back
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()

#define int long long
using namespace std;

const int INF = 2e15;
const int MOD = 1e9 + 7;
const int MB = 22;

vector<vector<pair<int, int>>> g;
vector<bool> used, used1;
int res = 0;

void dfs(int v) {
	used[v] = true;
	for (auto& p : g[v]) {
		int u = p.first;
		int id = p.second;
		if(!used1[id]) res += 4 * (max(u, v) / min(u, v));
		used1[id] = true;
		if (!used[u]) dfs(u);
	}
}

void solve() {
	int n;
	cin >> n;
	g.resize(n + 1);
	int id = 0;
	for (int i = 2; i <= n; i++) {
		int d = 2;
		while (d * d < i) {
			if (i % d == 0) {
				g[i].pb({ d, id });
				g[d].pb({ i, id++ });
				g[i].pb({ i / d, id });
				g[i / d].pb({ i, id++ });
			}
			d++;
		}
		if (d * d == i) {
			g[i].pb({ d, id });
			g[d].pb({ i, id++ });
		}
	}
	int ans = 0;
	used.resize(n + 1);
	used1.resize(id);
	for (int i = 2; i <= n; i++) {
		if (!used[i]) {
			res = 0;
			dfs(i);
			ans = max(ans, res);
		}
	}
	cout << ans;
}
signed main() {
	/*
	freopen("search.in", "r", stdin);
	freopen("search.out", "w", stdout);
	*/
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	solve();
}