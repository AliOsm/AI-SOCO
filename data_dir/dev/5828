#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>

using namespace std;
typedef long long LL;

const int N = 2345;

int n;
int d[N][N];
int par[N];

int dp[N][N];

vector < pair<int,int> > adj[N];
vector < pair<int, pair<int,int> > > dis;

inline int find(int v) {
	return (par[v] == v ? v : par[v] = find(par[v]));
}

inline bool merge(int u, int v) {
	u = find(u), v = find(v);
	return (u == v ? false : (par[u] = v, true));
}

inline void dfs(int r, int v, int p) {
	for (int i = 0; i < adj[v].size(); ++i) {
		int u = adj[v][i].first;
		int w = adj[v][i].second;
		if (u == p)
			continue;
		dp[r][u] = dp[r][v] + w;
		dfs(r, u, v);
	}
}

int main() {
	scanf("%d", &n);
	for (int i = 0; i < n; ++i)
		par[i] = i;
	for (int i = 0; i < n; ++i)
		for (int j = 0; j < n; ++j)
			scanf("%d", &d[i][j]);
	for (int i = 0; i < n; ++i)
		for (int j = i + 1; j < n; ++j)
			dis.push_back( {d[i][j], {i, j}} );
	sort( dis.begin(), dis.end() );
	for (int i = 0; i < dis.size(); ++i) {
		int u = dis[i].second.first;
		int v = dis[i].second.second;
		if (merge(u, v)) {
			adj[u].push_back( {v, dis[i].first} );
			adj[v].push_back( {u, dis[i].first} );
		}
	}
	for (int i = 0; i < n; ++i) {
		dfs(i, i, -1);
		for (int j = 0; j < n; ++j)
			if (d[i][j] != dp[i][j] || (i != j && !d[i][j])) {
				puts("NO");
				return 0;
			}
	}
	puts("YES");
	return 0;
}
