#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <iomanip>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cassert>
#include <limits.h>


#define rep(i,n) for(int i=0;i<n;i++)
#define ll long long int
#define f first
#define s second
#define pi pair<ll,ll>
#define pii pair<pi,ll>
#define f first
#define s second
#define pb push_back
#define mp make_pair
#define pb push_back
#define rep(i,n) for(int i=0;i<n;i++)
#define fr freopen("source.txt","r",stdin),freopen("output.txt","w",stdout)
using namespace std;

vector<int>g[200011];
int col[200011];
int pa[200011];
int sz[200011];

int f(int x){
	if(pa[x]==x) return x;
	return pa[x]=f(pa[x]);
}

void join(int a,int b){
	a=f(a);
	b=f(b);
	if(a!=b){
		if(sz[a] < sz[b]) swap(a,b);
		sz[a] += sz[b];
		pa[b] = a;
	}
}

int dp[200011];
	int ans=0;

void dfs(int v,int p){
	rep(i,g[v].size()){
		if(g[v][i]!=p){
			dfs(g[v][i],v);
		}
	}
	int ma1=0;
	int ma2=0;
	int x;
	rep(i,g[v].size()){
		x=g[v][i];
		if(x!=p){
			if(ma1<dp[x]+1){
				ma2=ma1;
				ma1=dp[x]+1;
			}
			else{
				ma2=max(ma2,dp[x]+1);
			}
		}
	}
	ans=max(ans,ma1+ma2+1);
	dp[v]=ma1;
}
int main(){
	int n;
	cin >> n;
	int f0=0;
	int f1=0;
	vector<pi>e;
	for(int i=1;i<=n;i++) cin >> col[i],pa[i]=i,sz[i]=1;

	rep(i,n-1){
		int u,v;
		cin >> u >> v;
		e.pb(mp(u,v));
		if(col[u]==col[v]){
			join(u,v);
		}
	}
	rep(i,e.size()){
		e[i].f=f(e[i].f);
		e[i].s=f(e[i].s);
		if(e[i].f != e[i].s) {
			g[e[i].f].pb(e[i].s);
			g[e[i].s].pb(e[i].f);
		}
	}
	int r=f(1);
	dfs(r,0);
	ans/=2;
	cout<<ans;
}