#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)

const int N = 400020;

struct SegmentTree {
#define lc o<<1
#define rc o<<1|1
#define lson l,m,lc
#define rson m+1,r,rc
	int set[N << 2];
	void build(int l, int r, int o) {
		set[o] = -1;
		if(l == r) {
			set[o] = 0;
		} else {
			int m = l + r >> 1;
			build(lson);
			build(rson);
		}
	}

	void down(int o) {
		if(~set[o]) {
			set[lc] = std::max(set[o], set[lc]);
			set[rc] = std::max(set[o], set[rc]);
			set[o] = -1;
		}
	}

	int query(int l, int r, int o, int L) {
		if(l == r) {
			return set[o];
		} else {
			int m = l + r >> 1;
			down(o);
			if(L <= m)
				return query(lson, L);
			return query(rson, L);
		}
	}

	void update(int l, int r, int o, int L, int R, int v) {
		if(L <= l && r <= R) {
			set[o] = std::max(v, set[o]);
		} else {
			int m = l + r >> 1;
			down(o);
			if(L <= m)	update(lson, L, R, v);
			if(R  > m)	update(rson, L, R, v);
		}
	}

}U, L;

struct Wiyr:std::vector<int> {
	void Sort() {
		std::sort(begin(), end());
		erase(std::unique(begin(), end()), end());
	}

	int get(int x) {
		return std::lower_bound(begin(), end(), x) - begin() + 1;
	}
} ly;

struct Node {
	int x, y;
	char op;
	void read() {
		scanf("%d%d", &x, &y);
		scanf(" %c", &op);
	}
} qq[N];

int main() {
	int n, q;
	scanf("%d%d", &n, &q);
	rep(i, q) {
		qq[i].read();
		ly.push_back(qq[i].x);
		ly.push_back(qq[i].y);
	}
	ly.Sort();
	int m = ly.size();
	U.build(1, m, 1);
	L.build(1, m, 1);
	int res;
	rep(i, q) {
		if(qq[i].op == 'U') {
			res = U.query(1, m, 1, ly.get(qq[i].y));
			res ++;
			L.update(1, m, 1, ly.get(qq[i].x), ly.get(n+1-res), qq[i].x);
			U.update(1, m, 1, ly.get(qq[i].y), ly.get(qq[i].y), qq[i].y);
			res = qq[i].y - res + 1;
		} else {
			res = L.query(1, m, 1, ly.get(qq[i].x));
			res ++;
			U.update(1, m, 1, ly.get(qq[i].y), ly.get(n+1-res), qq[i].y);
			L.update(1, m, 1, ly.get(qq[i].x), ly.get(qq[i].x), qq[i].x);
			res = qq[i].x - res + 1;
		}
		printf("%d\n", res);
	}
	return 0;
}

