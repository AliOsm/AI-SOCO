#include <bits/stdc++.h>
#define SZ(x) (int)x.size()
typedef long long ll;
const int SZ=4e2+5;
const int oo=2e9;
using namespace std;

int dis[2][SZ];
bool vis[2][SZ];
bool conn[SZ][SZ];
vector<int> edge[2][SZ];

void Dijkstra(int k)
{
    fill(dis[k],dis[k]+SZ,oo);
    set< pair<ll,int> > q;
    q.insert({0LL,1});
    dis[k][1]=0;

    while(!q.empty())
    {
        pair<ll,int> f=*q.begin();
        q.erase(q.begin());
        vis[k][f.second]=1;

        for(int i=0;i<SZ(edge[k][f.second]);i++)
        {
            int u=edge[k][f.second][i];
            if(!vis[k][u] && dis[k][u]>f.first+1)
            {
            	dis[k][u]=f.first+1;
                q.insert({dis[k][u],u});
            }
        }
    }
}

int main()
{
    int n,m;
    scanf("%d%d",&n,&m);
    
    for(int i=0;i<m;i++)
    {
        int x,y;
        scanf("%d%d",&x,&y);
        conn[x][y]=conn[y][x]=1;
    }
    
    for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
            if(i!=j)
                edge[conn[i][j]][i].push_back(j);

    Dijkstra(0);
    Dijkstra(1);
    
    if(dis[0][n]==oo || dis[1][n]==oo)
        cout<<-1;
    else
        cout<<max(dis[0][n],dis[1][n]);
}