#include <iostream>
#include <iomanip>
#include <vector>
#include <cassert>
#include <algorithm>

struct Point { int row, col; };

bool operator<(const Point &lhs, const Point &rhs) {
    return lhs.row < rhs.row || (lhs.row == rhs.row && lhs.col < rhs.col);
}

bool operator==(const Point &lhs, const Point &rhs) {
    return !(lhs < rhs || rhs < lhs);
}

bool operator!=(const Point &lhs, const Point &rhs) {
    return !(lhs == rhs);
}

int sign(int x) {
    return x > 0 ? +1 : x < 0 ? -1 : 0;
}

struct Solution {
    
    Point king;
    
    std::vector<Point> rooks;
    
    void input() {
        rooks.resize(666);
        std::cin >> king.row >> king.col;
        for (auto &r : rooks) { std::cin >> r.row >> r.col; }
    }
    
    void move(int drow, int dcol) {
        // check for step to bit row / col
        bool found = false;
        for (int dr = -1; !found && dr <= 1; ++dr) {
            for (int dc = -1; !found && dc <= 1; ++dc) {
                if (dr * dr + dc * dc != 1) continue;
                int nr = king.row + dr;
                int nc = king.col + dc;
                for (auto &r : rooks) {
                    if (r.row == nr || r.col == nc) {
                        found = true;
                        king = Point{nr,nc};
                        break;
                    }
                }
            }
        }
        if (!found) {
            king.row += drow;
            king.col += dcol;
        }
        std::cout << king.row << " " << king.col << std::endl;
    }
    
    void solve() {
        while (king != Point{500,500}) {
            int dr = sign(500 - king.row);
            int dc = sign(500 - king.col);
            move(dr,dc);
            int i, r, c; std::cin >> i >> r >> c;
            if (i == -1) { return; }
            assert(i != 0);
            rooks[i-1] = Point{r,c};
        }
        int nUL = 0, nUR = 0, nDL = 0, nDR = 0;
        for (auto &r : rooks) {
            nUL += r.row < 500 && r.col < 500;
            nUR += r.row < 500 && r.col > 500;
            nDL += r.row > 500 && r.col < 500;
            nDR += r.row > 500 && r.col > 500;
        }
        int min = std::min({nUL, nUR, nDL, nDR}), dr = 0, dc = 0;
        if (min == nUL) { dr = +1, dc = +1; }
        if (min == nUR) { dr = +1, dc = -1; }
        if (min == nDL) { dr = -1, dc = +1; }
        if (min == nDR) { dr = -1, dc = -1; }
        while (true) {
            move(dr,dc);
            int i, r, c; std::cin >> i >> r >> c;
            if (i == -1) { return; }
            assert(i != 0);
            rooks[i-1] = Point{r,c};
        }
    }
    
};

int main() {
    Solution solver;
    solver.input();
    solver.solve();
    return 0;
}