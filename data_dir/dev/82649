#include<bits/stdc++.h>
#define GO ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)
using namespace std;
typedef long long ll;
typedef vector<ll> vec;
const int Max = 1e3 + 5;
const int Mod = 998244353;

ll fp(ll x, ll y, ll m = Mod) {
	ll res = 1;
	for (int i = 0; (1LL << i) <= y; i++, x = x * x % m)
		if (y & 1LL << i)
			res = res * x % m;
	return res;
}

ll n, m, l[Max], r[Max];
ll a[Max], dp[300][100];
vec G[Max];
ll inv[Max];

ll Try(int i, int j)
{
	if (i == -1)
		return j == n;
	ll& ret = dp[i][j];
	if (ret + 1)
		return ret;
	ret = Try(i - 1, j);
	int k;
	for (k = 0; k < G[i].size(); k++)
		if (G[i][k] == j)
			break;
	int cnt = 0;
	while (k < G[i].size() && G[i][k] == j + cnt)
		cnt++, k++;
	ll C = 1;
	for (int k = 1; k <= cnt; k++)
	{
		ll temp = (a[i] - 1 + k) * inv[k] % Mod;
		C = C * temp % Mod;
		ret = (ret + C * Try(i - 1, j + k) % Mod) % Mod;
	}
	return ret;
}

int main()
{
	GO;
	for (int i = 1; i < Max; i++)
		inv[i] = fp(i, Mod - 2);
	cin >> n;
	map<ll, vec> mp;
	ll sum = 1;
	for (int i = 0; i < n; i++)
	{
		ll x, y;
		cin >> x >> y;
		sum = sum * (y - x + 1) % Mod;
		mp[x];
		mp[y];
		mp[x - 1];
		mp[y + 1];
		l[i] = x;
		r[i] = y;
	}
	for (int i = 0; i < n; i++)
	{
		ll x = l[i];
		ll y = r[i];
		auto it = mp.find(x);
		while (it != mp.end() && it->first <= y)
			it->second.push_back(i), it++;
	}
	ll start = mp.begin()->first;
	ll end = start;
	vec  pre = mp[start];
	for (auto i : mp)
		if (i.second == pre)
			end = i.first;
		else
		{
			sort(pre.begin(), pre.end());
			G[m] = pre;
			a[m] = end - start + 1;
			m++;
			start = end = i.first;
			pre = i.second;
		}
	memset(dp, -1, sizeof(dp));
	ll ans = Try(m - 1, 0);
	ans = ans * fp(sum, Mod - 2) % Mod;
	cout << ans << endl;
	return 0;
}