#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> pi;
constexpr int inf = 0x3f3f3f3f;
constexpr double EPS = 1e-15;
constexpr double PI = atan(1) * 4;

template <typename T> inline bool chmax(T& x, T y) {return x < y ? x = y, 1 : 0;}
template <typename T> inline bool chmin(T& x, T y) {return x > y ? x = y, 1 : 0;}
inline int LSB(int i) {return (i & -i);}

constexpr int maxn = 2e5+5;

int t, n, cnt[maxn];
ll res;
string s;
map <int, int> mp;

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin >> t;
    while (t--){
        cin >> s;
        n = s.length();
        res = 0;

        memset(cnt, 0, sizeof(cnt));
        for (int i = 0; i < n; i++){
            if (s[i] == '1') cnt[i]++;
            if (i) cnt[i] += cnt[i - 1];
        }

        for (int i = 0; i < n; i++){
            ll sum = 0, step = 0, cur = 0;
            mp.clear();
            for (int j = i; j >= max(0, i - 19); j--){
                if (s[j] == '1') sum += (1LL << step), cur++;
                if (sum && !mp[sum]){
                    if (i - sum + 1 >= 0){
                        mp[sum] = 1;
//                        printf("%I64d to %d is good with %d ones\n", i - sum + 1, i, cnt[i] - (i - sum >= 0 ? cnt[i - sum] : 0));
                        if (cnt[i] - (i - sum >= 0 ? cnt[i - sum] : 0) == cur) res++;
                    }
                }

                step++;
            }
        }

        cout << res << endl;
    }
    return 0;
}
