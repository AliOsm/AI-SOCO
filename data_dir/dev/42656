#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <string>
#include <cstring>
#include <cstdio>
// DON'T DIVIDE
// Greedy, Prefix, Sets/Bsearch, Dfs/bfs, DP
// Stack, Bitmask, Dsu 
using namespace std;

int n;
const int MAXN = 140000, INFTY = 1e9 + 1;
multiset<int> x1, x2, y1, y2;
pair<int, int> x[MAXN], y[MAXN];
long long poss[MAXN];

int main()
{
	ios::sync_with_stdio(0);
	cin >> n;

	for(int i = 0; i < n; i++)
	{	
		int a, b, c, d;
		cin >> a >> b >> c >> d;
		x[i].first = a;
		x[i].second = c;
		y[i].first = b;
		y[i].second = d;
		x1.insert(a);
		x2.insert(c);
		y1.insert(b);
		y2.insert(d);
	}

	for(int i = 0; i < MAXN; i++)
		poss[i] = INFTY;
	for(int i = 0; i < n; i++)
	{
		x1.erase(x1.find(x[i].first));
		x2.erase(x2.find(x[i].second));

		if(*x1.rbegin() <= *x2.begin())
			poss[i] = *x1.rbegin();
		x1.insert(x[i].first);
		x2.insert(x[i].second);
	}

	for(int i = 0; i < n; i++)
	{
		y1.erase(y1.find(y[i].first));
		y2.erase(y2.find(y[i].second));

		if(*y1.rbegin() <= *y2.begin() && poss[i] != INFTY)
		{
			cout << poss[i] << " " << *y1.rbegin() << "\n";
			return 0;
		}
		y1.insert(y[i].first);
		y2.insert(y[i].second);
	}

	return 0;
}
