#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <assert.h>
#include <fstream>
#include <iomanip>
#include <bitset>
#include <string>
#include <cstdio>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>
#include <map>

using namespace std;

struct Node
{
	int add;
	int next[2];
	int cnt;
	Node()
	{
		add = 0;
		next[0] = next[1] = -1;
		cnt = 0;
	}
};

int getBit(int x, int j)
{
	if ((x & (1 << j)))
		return 1;
	else
		return 0;
}

vector < Node > t;
int n, k;
int a;

void push(int v, int bit)
{
	if (t[v].add != 0)
	{
		for (int i = 0; i < 2; ++i)
		{
			int to = t[v].next[i];
			if (to != -1)
				t[to].add ^= t[v].add;
		}
		if (getBit(t[v].add, bit) == 1)
			swap(t[v].next[0], t[v].next[1]);
		t[v].add = 0;
	}
}

int getCnt(int v)
{
	if (v == -1)
		return 0;
	else
		return t[v].cnt;
}

void add(int v, int x, int bit)
{
	if (bit == -1)
	{
		t[v].cnt++;
		return;
	}
	int c = getBit(x, bit);
	push(v, bit);
	if (t[v].next[c] == -1)
	{
		t.push_back(Node());
		t[v].next[c] = t.size() - 1;
	}
	add(t[v].next[c], x, bit - 1);
	t[v].cnt = getCnt(t[v].next[0]) + getCnt(t[v].next[1]);
}

long long get(int v, int bit, int k)
{
	if (bit == -1)
		return t[v].cnt;
	push(v, bit);
	int c = getBit(k, bit);
	if (c == 1)
	{
		if (t[v].next[c] == -1)
			return 0;
		else
			return get(t[v].next[c], bit - 1, k);
	}
	else
	{
		int value = getCnt(t[v].next[1]);
		if (t[v].next[c] == -1)
			return value;
		else
			return get(t[v].next[c], bit - 1, k) + value;
	}
}

int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
	srand(time(0));
	scanf("%d%d", &n, &k);
	t.push_back(Node());
	long long ans = 0;
	for (int i = 0; i < n; ++i)
	{
		scanf("%d", &a);
		t[0].add ^= a;
		add(0, a, 30);
		ans += get(0, 30, k);
	}
	printf("%I64d\n", ans);
    return 0;
}