#include<bits/stdc++.h>
#define In_the_name_of_allah_the_merciful ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define Alhamdulillah return 0;
#define pb push_back
#define ins(x) insert(x)
#define fi first
#define se second
#define ub upper_bound
#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v) ((ll)((v).size()))
#define reset(v,val) memset(v,val,sizeof(v))
#define erep(i, x, n) for ( i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for( i = x; i<(ll)(n); i++)
using namespace std;
typedef    long long int   ll;
long long int mod=1e9+7;
ll dx[]={0,0,1,-1};
ll dy[]={1,-1,0,0};
ll m=0,n,res=0,k,ans;
string s2,ch="",s,t,s1="";
vector< pair<string,ll> >vm;
vector< pair< pair<ll,ll>,ll > > vvv;
vector<pair< ll, ll > >vv;
vector < pair<string,ll> > vv2;
vector<ll>v[500005],v1,depth[500005];

const long long int NMAX=100006,LGNMAX=30;
ll level[NMAX]={0};
ll parent[LGNMAX][NMAX];
ll dp[NMAX],vis[NMAX]={0};
/******************************/
void dfs(int u) {
  vis[u] = 1;
  for (int i = 0; i <v[u].size(); ++i) {
    int z =v[u][i];
    if (vis[z]) continue;
    level[z]=1+level[u];
    parent[0][z] = u;
    dfs(z);
  }
}
/**********************************/
void preprocess(){
	for (int i = 1; i < LGNMAX; ++i) {
      for (int j = 0; j <=n; ++j) {
          if (parent[i - 1][j] != -1) {
                 parent[i][j] = parent[i - 1][parent[i - 1][j]];
               }
          }
      }
   }

/*************************************/
int getparent(int u, int k) {
  for (int i = 0; i < LGNMAX; ++i) {
    if (k & 1) u = parent[i][u];
    k >>= 1;
  }
  return u;
}
/****************************************/
vector< pair<ll,ll> >vnode;
ll pos[NMAX],from[NMAX],to[NMAX],sz=0;
/******************************/
void dfs_order(ll node) {
    vis[node]=true;
    pos[node]=++sz;
    from[node]=sz;
    to[node]=sz;
    ll i;
    for(i=0;i<v[node].size();i++) {
        if(!vis[v[node][i]]) {
        	dfs_order(v[node][i]);
			to[node]=max(to[node],to[v[node][i]]);
		}
    }
}
/**********************************/

int main(){
/******************************************/In_the_name_of_allah_the_merciful/****************************************************/
ll i=0,x=0,z=0,y=0,j=0,q,mx=0,idx=0,ok=0,l=0,r=0,negatif=0,positif=0,r1,d,p;
set< ll  > ::iterator it;
multiset< ll > ::iterator its;
//freopen("a.txt","r",stdin);
cin>>n;
memset(vis,0,sizeof(vis));
memset(parent,-1,sizeof(parent));
level[0]=0;
for(i=1;i<=n;i++){
    cin>>x;
    y=i;
    v[x].pb(y);
    v[y].pb(x);
}
dfs(0);
preprocess();
memset(vis,0,sizeof(vis));
dfs_order(0);
for(i=0;i<=n;i++){
    ll lev=level[i];
    idx=pos[i];
    depth[lev].pb(idx);
}
for(i=0;i<=n+1;i++){
    if(depth[i].size())sort(depth[i].begin(),depth[i].end());
}
cin>>m;
while(m--){
    cin>>x>>p;
    y=getparent(x,p);
    res=0;
    if(y>0){
        l=from[y];r=to[y];
        ll lev=level[x];
        i=lower_bound(depth[lev].begin(),depth[lev].end(),l)-depth[lev].begin();
        j=upper_bound(depth[lev].begin(),depth[lev].end(),r)-depth[lev].begin();
        res=(j-i)-1;
    }
    cout<<res<<'\n';
}

/*****************************************************/Alhamdulillah/**************************************************************/
 }

