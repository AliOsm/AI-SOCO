#include <bits/stdc++.h>
using namespace std;

const int MAXN = 200005;
int n, m;
vector<int> g[MAXN];
int outdeg[MAXN];
int par[MAXN];
int col[MAXN];
bool dfs(int i) {
	if (col[i] == 1) return true;
	if (col[i] == 2) return false;
	col[i] = 1;
	for (int j = 0; j < g[i].size(); j++) {
		if (dfs(g[i][j])) return true;
	}
	col[i] = 2;
	return false;
}
int main() {
	memset(par, -1, sizeof(par));
	scanf("%d %d", &n, &m);
	for (int i = 0; i < n; i++) {
		scanf("%d", outdeg + i);
		for (int j = 0; j < outdeg[i]; j++) {
			int b;
			scanf("%d", &b);
			b--;
			g[i].push_back(b);
		}
	}
	int x;
	scanf("%d", &x);
	x--;
	queue<int> q;
	q.push(x);
	par[x] = x;
	while (!q.empty()) {
		int cur = q.front();
		q.pop();
		int u = cur % n;
		int turn = cur / n;
		for (int i = 0; i < g[u].size(); i++) {
			int v = (1 - turn) * n + g[u][i];
			if (par[v] != -1) continue;
			q.push(v);
			par[v] = cur;
		}
	}
	for (int i = 0; i < n; i++) {
		if (outdeg[i] > 0 || par[n + i] == -1) continue;
		vector<int> res;
		res.push_back(i + 1);
		int cur = n + i;
		while (cur != x) {
			cur = par[cur];
			res.push_back(cur%n + 1);
		}
		printf("Win\n");
		for (int i = res.size() - 1; i >= 0; i--) {
			printf("%d ", res[i]);
		}
		printf("\n");
		return 0;
	}
	if (dfs(x)) {
		printf("Draw\n");
	} else {
		printf("Lose\n");
	}

}
