#include<bits/stdc++.h>
using namespace std;
#define all(v) ((v).begin()),((v).end())
#define ll long long
#define fastIO cout << fixed << setprecision(12), ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)
double const EPS = 1e-12, PI = acos(-1);
const int N = 1e6 + 9, M = 1e5 + 9, OO = 1e9 + 7, MOD = 1e9 + 7, mod = 998244353;
const ll inf = 1e18;

vector<int> adj[N];
int vis[N], color[N], freq[N];

ll add(ll x, ll y) {
  return (((x + y) % mod) + mod) % mod;
}

ll mul(ll x, ll y) {
  return (x * y) % mod;
}

bool dfs(int node, int col) {
  color[node] = col;
  vis[node] = 1;
  int ret = 0;
  for(int it: adj[node]) {
    if(vis[it] == 1) {
      if(color[it] == color[node])
        return 1;
    } else if(vis[it] == 0) {
      color[it] = !col;
      ret |= dfs(it, !col);
      if(ret)
        return ret;
    }
  }
  vis[node] = 2;
  return ret;
}

ll dfsCal(int node, int rem) {
  ll ret = 1;
  vis[node] = 1;
  for(auto it: adj[node]) {
    if(vis[it]) continue;
    int nxt = rem + 1;
    if(nxt > 2)
      nxt -= 2;
    if(rem == 2) {
      ret = mul(ret, mul(dfsCal(it, nxt), 2));
    } else {
      ret = mul(ret, dfsCal(it, nxt));
    }
  }
  return ret;
}

int main() {
  fastIO;
#ifdef LOCAL
  freopen("input.in", "rt", stdin);
#endif
  int t;
  cin >> t;
  while(t--) {
    int n, m, u, v;
    cin >> n >> m;
    for (int i = 0; i < m; ++i) {
      cin >> u >> v;
      adj[u].push_back(v);
      adj[v].push_back(u);
    }
    bool oddCycle = 0;
    for (int i = 1; i <= n; ++i) {
      if(!vis[i])
        oddCycle |= dfs(i, 1);
    }
    if(oddCycle) {
      cout << 0 << '\n';
    } else {
      for (int i = 1; i <= n; ++i)
        vis[i] = 0;
      ll ans = 1;
      for (int i = 1; i <= n; ++i) {
        if(!vis[i]) {
          freq[i] = mul(dfsCal(i, 1), 2);
        }
      }
      for (int i = 1; i <= n; ++i)
        vis[i] = 0;
      for (int i = 1; i <= n; ++i) {
        if(!vis[i])
          ans = mul(ans, add(freq[i], dfsCal(i, 2)));
      }
      cout << ans << '\n';
    }
    for (int i = 0; i <= n; ++i) {
      vis[i] = 0;
      color[i] = 0;
      adj[i].clear();
    }
  }
  return 0;
}
