#include <bits/stdc++.h>
using namespace std;

int dp(int row, int col, vector<vector<bool>> & tab, vector<vector<int>> & mem) {
	if (mem[row][col] != -1) return mem[row][col];
	int go = 0;
	for (int i = 0; i < tab[row].size(); i++) if (tab[row][i]) go = max(go, abs(col - i));
	int idx = col - go;
	if (col == 0) idx = col + go;
	if (row == tab.size() - 1) { // we are in the last row, we only want to visit cell;
		return go;
	}
	int res = 1 + (go + idx) + dp(row + 1, 0, tab, mem);
	res = min(res, 1 + go + ((int) tab[row].size() - 1 - idx) + dp(row + 1, (int) tab[row].size() - 1, tab, mem));
	return mem[row][col] = res;
}

int main() {
	int n, m; cin >> n >> m;
	vector<vector<bool>> tab(n, vector<bool>(m + 2));
	vector<vector<int>> mem(n, vector<int>(m + 2, -1));
	for (int row = 0; row < n; row++) {
		string s; cin >> s;
		for (int i = 0; i < s.size(); i++) {
			if (s[i] == '1') tab[row][i] = true;
		}
	}
	reverse(tab.begin(), tab.end());
	while (tab.size() > 0) {
		auto & back = tab.back();
		int rooms = count(back.begin(), back.end(), true);
		if (rooms == 0) {
			tab.pop_back();
		} else break;
	}
	if (tab.size() == 0) {
		cout << 0 << endl;
		return 0;
	}
	cout << dp(0, 0, tab, mem) << endl;
} 