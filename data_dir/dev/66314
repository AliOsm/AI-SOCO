#include <bits/stdc++.h>
using namespace std;

const int N = 500005;

int a[N], dp[N];

struct RMQ {
        vector <int> t;
        int n;
        RMQ(int n) : n(n) {
                t.resize(n << 1, 0);
        }
        void modify(int p, int v) {
                for(t[p += n] = v; p > 1; p >>= 1) t[p >> 1] = t[p] | t[p ^ 1];
        }
        int query(int l, int r) { int res = 0;
                for(l += n, r += n; l < r; l >>= 1, r >>= 1) {
                        if(l & 1) res |= t[l++];
                        if(r & 1) res |= t[--r];
                }
                return res;
        }
};

int main() {
        int n, k, d; cin >> n >> k >> d;
        for(int i = 1; i <= n; i++) cin >> a[i];
        sort(a + 1, a + n + 1);

        RMQ SegTree(n + 2);
        SegTree.modify(n + 1, 1);
        dp[n + 1] = 1;
        for(int i = n; i >= 1; i--) {
                int l = i + k, r = upper_bound(a + 1, a + n + 1, a[i] + d) - a;
                dp[i] |= SegTree.query(l, r + 1);
                SegTree.modify(i, dp[i]);
        }

        cout << (dp[1] ? "YES" : "NO") << endl;
}
