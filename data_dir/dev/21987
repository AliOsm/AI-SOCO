//

#include <iostream>
#include <string>
#include <cmath>
#include <vector>
#include <algorithm>
#include <iterator>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <iomanip>
#include <fstream>

using namespace std;

typedef pair <int, int> pii;
typedef pair <long long, long long> pll;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

#define endl "\n"
#define mp make_pair

const int mod = 1000000007;
const int INF = 1000000000;

ll n, w, b, x, c[1005], cost[1005];
ll dp[1005][10005];
int result = 0;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n >> w >> b >> x;

    for (int i = 1; i <= n; i++)
        cin >> c[i];

    for (int i = 1; i <= n; i++)
        cin >> cost[i];
    
    for (int i = 0; i <= n + 1; i++) {
        for (int j = 0; j <= 10000; j++)
            dp[i][j] = -1;
    }

    dp[0][0] = w;

    for (int i = 0; i <= n; i++) {
        for (ll j = 0; (j <= 10000) && (dp[i][j] != -1); j++) {
            for (ll k = 0; (k <= c[i]) && ((dp[i][j] - cost[i] * k) >= 0); k++)
                dp[i + 1][j + k] = max(dp[i + 1][j + k], min(dp[i][j] - cost[i] * k + x, w + b * (j + k)));
        }
    }

    for (int j = 1; j <= 10000; j++) {
        if (dp[n + 1][j] != -1)
            result = max(result, j);
    }

    cout << result << endl;

    return 0;
}