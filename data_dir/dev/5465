#include <bits/stdc++.h>
using namespace std;

#define OO (long long)1e18
#define mod (int)(1e9)+7
vector<pair<int, int>> x;

struct node {
	int cnt = 0;
	long long sum = 0;
} nodes[8 * 200005], tmp;

node merge(node a, node b) {
	a.cnt += b.cnt;
	a.sum += b.sum;
	return a;
}

void update(int s, int e, int q, int cur, int val) {
	if (s > q || e < q)
		return;
	if (s == q && e == q) {
		nodes[cur].sum += val;
		nodes[cur].cnt++;
		return;
	}
	int mid = s + (e - s) / 2;
	update(s, mid, q, 2 * cur, val);
	update(mid + 1, e, q, 2 * cur + 1, val);
	nodes[cur] = merge(nodes[2 * cur], nodes[2 * cur + 1]);
}

node get(int s, int e, int qs, int qe, int cur) {
	if (s > qe || e < qs)
		return tmp;
	if (s >= qs && e <= qe)
		return nodes[cur];
	int mid = s + (e - s) / 2;
	return merge(get(s, mid, qs, qe, 2 * cur),
			get(mid + 1, e, qs, qe, 2 * cur + 1));
}

int main() {
	int n;
	scanf("%d", &n);
	x.resize(n);
	map<int, int> mp;
	for (int i = 0; i < n; i++)
		scanf("%d", &x[i].first);
	int idx = 0;
	for (int i = 0; i < n; i++) {
		scanf("%d", &x[i].second);
		mp[x[i].second] = 0;
	}
	for (auto &val : mp)
		val.second = idx++;
	sort(x.begin(), x.end());
	long long ans = 0;
	for (int i = 0; i < n; i++) {
		node bef = get(0, n - 1, 0, mp[x[i].second], 1);
		ans += 1LL * bef.cnt * x[i].first - bef.sum;
		update(0, n - 1, mp[x[i].second], 1, x[i].first);
	}
	printf("%lld\n", ans);
}
