////////////////////////////////////////////    _LeMur_
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#include <unordered_map>
#include <unordered_set>
#include <functional>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <chrono>
#include <random>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <ctime>
#include <stack>
#include <queue>
#include <cmath>
#include <list>
#include <map>
#include <set>

using namespace std;

const int N = 100005;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;

string s;

int mas[25];
long long answ[14][14];

int main(){
	mt19937 myrand(chrono::steady_clock::now().time_since_epoch().count());
    cin >> s;
    for(int i=1;i<(int)s.size();i++){
        int x = s[i] - s[i - 1];
        if(x < 0) x += 10;
        mas[x]++;
    }
    if((int)s.size() == 1){
        for(int i=0;i<10;i++){
            for(int j=0;j<10;j++){
                printf("0 ");
            }
            printf("\n");
        }
        return 0;
    }
    for(int i=0;i<10;i++){
        for(int j=i;j<10;j++){
            if(i == 0 && j == 0){
                bool flag = true;
                for(int h=1;h<10;h++){
                    if(mas[h]){
                        flag = false;
                        break;
                    }
                }
                if(flag)
                    answ[i][j] = 0;
                else
                    answ[i][j] = -1;
            }
            else{
                bool flag = true;
                long long pat = 0;
                long long k = 0;
                for(int h=0;h<10;h++){
                    if(mas[h] == 0)continue;
                    int mn = inf;
                    bool T = false;
                    for(int t=0;t<300;t+=10){
                        int id = t + h;
                        if(id == 0){
                            if(i == 0){
                                T = true;
                                break;
                            }
                        }
                        for(int l=0;l<=id;l++){
                            if(l * i > id)break;
                            if((id - l * i) % j)continue;
                            if(l + (id - l * i) / j == 0)continue;
                            mn = min(mn , l + (id - l * i) / j);
                        }
                    }
                    if(T)continue;
                    if(mn == inf){
                        flag = false;
                        break;
                    }
                    pat += mas[h] * 1ll * mn;
                    k += mas[h];
                }
                if(flag){
                    answ[i][j] = pat - k;
                    answ[i][j] = max(answ[i][j] , 0ll);
                }
                else
                    answ[i][j] = -1;
            }
        }
    }
    for(int i=0;i<10;i++){
        for(int j=0;j<10;j++){
            if(i <= j)
                printf("%lld ",answ[i][j]);
            else
                printf("%lld ",answ[j][i]);
        }
        cout << endl;
    }
    return 0;
}
