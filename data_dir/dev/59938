//#define ONLINE_JUDGE

#if defined(ONLINE_JUDGE)
#define _SECURE_SCL 0
#endif

#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <functional>
#include <memory>
#include <cmath>
#include <climits>
#include <numeric>
#include <tuple>
#include <memory.h>
#include <stdint.h>

#if !defined(__GNUC__)
#else // !defined(__GNUC__)
#define _CrtDbgBreak() __builtin_trap()
#endif // !defined(__GNUC__)

#if defined(ONLINE_JUDGE)
#define LOCAL_TEST 0
#else 
#define LOCAL_TEST 1
#endif

#if LOCAL_TEST
struct AssertsCounter
{
	AssertsCounter(): counter(0) {}
	~AssertsCounter() { std::cerr << std::endl << "DIAG: " << (counter == 0 ? "OK" : "FAIL!!!") << " Asserts count: " << counter << std::endl; }
	void Increment() { counter++; }
	uint32_t counter;
};
AssertsCounter g_assertsCounter;
#define LOCAL_ASSERT(expr) { if (!(expr)) {std::cerr << "ASSERT FAILED (" << __LINE__ << "): '" << #expr << "'" << std::endl; g_assertsCounter.Increment(); _CrtDbgBreak(); } }
#define LOCAL_ASSERT_EQ(expr1, expr2) { if ((expr1) != (expr2)) {std::cerr << "ASSERT FAILED (" << __LINE__ << "): '" << #expr1 << "' == '" << #expr2 << "' (" << (expr1) << " vs " << (expr2) << "')" << std::endl; g_assertsCounter.Increment(); _CrtDbgBreak(); } }
#else
volatile bool isLocalTestEnabled = 0;
#define LOCAL_ASSERT(expr)
#define LOCAL_ASSERT_EQ(expr1, expr2)
#endif

bool g_isLocalPrintEnabled = (bool)(LOCAL_TEST);
#define LOCAL_PRINT() if (!g_isLocalPrintEnabled) { } else std::cerr // << .. << ..

typedef std::string string8_t;
typedef long double ld_t;

typedef std::vector<size_t> vector_size_t;
typedef std::vector<uint8_t> vector_uint8_t;
typedef std::vector<int32_t> vector_int32_t;
typedef std::vector<uint32_t> vector_uint32_t;
typedef std::vector<int64_t> vector_int64_t;
typedef std::vector<uint64_t> vector_uint64_t;
typedef std::vector<string8_t> vector_string8_t;

typedef std::vector<vector_size_t> vector_2d_size_t;
typedef std::vector<vector_int32_t> vector_2d_int32_t;
typedef std::vector<vector_uint32_t> vector_2d_uint32_t;
typedef std::vector<vector_int64_t> vector_2d_int64_t;
typedef std::vector<vector_uint64_t> vector_2d_uint64_t;

typedef std::set<size_t> set_size_t;
typedef std::set<int32_t> set_int32_t;
typedef std::set<uint32_t> set_uint32_t;
typedef std::set<int64_t> set_int64_t;
typedef std::set<uint64_t> set_uint64_t;
typedef std::set<string8_t> set_string8_t;

typedef std::multiset<size_t> multiset_size_t;
typedef std::multiset<string8_t> multiset_string8_t;

// Auxiliary functions definition
// 
template<typename T> void UpdateMin(T& a, const T b) {a = std::min(a, b);}
template<typename T> void UpdateMax(T& a, const T b) {a = std::max(a, b);}

const ld_t Pi = std::atan(1.0L) * 4.0L;
static const ld_t Eps = 1.0e-09;
template<typename T> bool IsEqual(const T a, const T b) { return std::abs(a - b) < Eps; }
template<typename T> bool IsGreater(const T a, const T b) { return a > b + Eps; }
template<typename T> bool IsLess(const T a, const T b) { return a + Eps < b; }
template<typename T> bool IsGreaterEqual(const T a, const T b) { return !IsLess(a, b); }
template<typename T> bool IsLessEqual(const T a, const T b) { return !IsGreater(a, b); }

template<typename T> string8_t ToStr(const T& val) { std::ostringstream ostr; ostr << val; return ostr.str(); }
template<typename T> bool FromStr(const string8_t& str, T& val) {std::istringstream istr(str); istr >> val; return !!istr; }

template<typename T> std::istream& operator>>(std::istream& ist, std::vector<T>& data)
{
	LOCAL_ASSERT(!!ist);
	for (size_t i = 0; i < data.size(); i++) { ist >> data[i]; }
	return ist;
}

template<typename T> T Read(std::istream& ist)
{
	LOCAL_ASSERT(!!ist);
	T val; ist >> val; return val;
}

template<typename T> std::ostream& operator<<(std::ostream& ost, const std::vector<T>& data)
{
	for (size_t i = 0; i < data.size(); i++) { if (i != 0) { ost << ' '; } ost << data[i]; }
	return ost;
}

#if defined(ONLINE_JUDGE)
template<size_t id> class StopWatch { };
#else
#include <library/lib_stopwatch.h>
#include <library/lib_random.h>
library::random::Rand g_rnd;
#endif

typedef std::pair<size_t, size_t> pair_size_t;
typedef std::set<pair_size_t> set_pair_t;

bool Solve(std::istream& ist, std::ostream& ost, const bool multipleTestMode)
{
	StopWatch<1> sw; (void)sw;

	// 
	size_t n;
	size_t k;
	ist >> n >> k;

	if (multipleTestMode && !ist)
		return false;

	size_t a, b, c, d;
	ist >> a >> b >> c >> d;

	//
	LOCAL_PRINT() << std::endl << "Next test: " << n << " " << k << ", " << a << " " << b << " " << c << " " << d << std::endl;

	if (k < n + 1)
	{
		ost << "-1" << std::endl;
		return multipleTestMode;
	}

	if (n == 4)
	{
		ost << "-1" << std::endl;
		return multipleTestMode;
	}

	set_size_t unused;
	for (size_t i = 1; i <= n; i++)
	{
		unused.insert(i);
	}
	unused.erase(a);
	unused.erase(b);
	unused.erase(c);
	unused.erase(d);

	vector_size_t seq(n);
	seq[0] = a;
	seq[1] = c;
	seq[n - 2] = d;
	seq[n - 1] = b;

	for (size_t i = 2; i < n - 2; i++)
	{
		const size_t v = *unused.begin();
		unused.erase(unused.begin());
		seq[i] = v;
	}
	LOCAL_ASSERT(unused.empty());

	const vector_size_t path1 = seq;


	vector_size_t path2 = seq;
	std::swap(path2[0], path2[1]);
	std::swap(path2[n - 2], path2[n - 1]);

	LOCAL_ASSERT(path1[0] == a);
	LOCAL_ASSERT(path1[n - 1] == b);
	LOCAL_ASSERT(path2[0] == c);
	LOCAL_ASSERT(path2[n - 1] == d);
	ost << path1 << std::endl;
	ost << path2 << std::endl;

#if LOCAL_TEST
	{
		set_pair_t pairs;
		for (size_t i = 1; i < n; i++)
		{
			pair_size_t p1(path1[i - 1], path1[i]);
			pair_size_t p2(path2[i - 1], path2[i]);

			if (p1.first > p1.second)
				std::swap(p1.first, p1.second);
			if (p2.first > p2.second)
				std::swap(p2.first, p2.second);

			pairs.insert(p1);
			pairs.insert(p2);
		}

		LOCAL_ASSERT(pairs.size() <= k);
		
		pair_size_t ab(a, b);
		pair_size_t cd(c, d);
		if (ab.first > ab.second)
			std::swap(ab.first, ab.second);
		if (cd.first > cd.second)
			std::swap(cd.first, cd.second);

		LOCAL_ASSERT(pairs.count(ab) == 0);
		LOCAL_ASSERT(pairs.count(cd) == 0);

		std::swap(ab.first, ab.second);
		std::swap(cd.first, cd.second);
		LOCAL_ASSERT(pairs.count(ab) == 0);
		LOCAL_ASSERT(pairs.count(cd) == 0);
	}
#endif

	return multipleTestMode;
}


#if LOCAL_TEST
void Test()
{
	using namespace library::random;
	const auto genVector = GenFactory::CreateGenVector(GenRange<size_t>(2, 10), GenRange<int32_t>(-100, +200));

	for (size_t t = 0; t < 10; t++)
	{
		const vector_int32_t data = genVector();
		// size_t ans = GetAns(data);
	}
}
#endif

int main(int argc, const char *argv[])
{
#if LOCAL_TEST
	Test();
#endif

    std::ios_base::sync_with_stdio(false);
    std::istream* ist = &std::cin;
    std::ostream* ost = &std::cout;
    
    std::unique_ptr<std::istream> fileInput;
    
    if (argc > 1)
    {
        fileInput.reset(new std::ifstream(argv[1]));
        if (!(*fileInput))
        {
            std::cout << "File not found: " << argv[1] << std::endl;
        }
        ist = fileInput.get();
    }    
    
#if defined(ONLINE_JUDGE)
    Solve(*ist, *ost, false);
#else
    while(Solve(*ist, *ost, true)) {};
#endif
}
