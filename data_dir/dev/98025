//In The Name of Allah
#include <bits/stdc++.h>

using namespace std;

const int N = 1e5 + 10;
const int SQ = 300;
const int L = 20;

int H[N], par[N][L], dis[N];
vector < int > adj[N], vec, now;
queue < int > q;

void dfs(int v, int p){
    for (int u : adj[v]){
        if (u == p)
            continue;
        H[u] = H[v] + 1;
        par[u][0] = v;
        dfs(u, v);
    }
}

int getPar(int v, int h){
    for (int i = 0; i < L; i ++)
        if (h >> i & 1)
            v = par[v][i];
    return v;
}

int getLca(int u, int v){
    if (H[v] < H[u])
        swap(u, v);
    v = getPar(v, H[v] - H[u]);
    if (u == v)
        return v;
    for (int i = L - 1; i > -1; i --)
        if (par[u][i] != par[v][i])
            u = par[u][i], v = par[v][i];
    return par[v][0];
}

int getDis(int u, int v){
    return H[u] + H[v] - 2 * H[getLca(u, v)];
}

void bfs(){
    memset(dis, 63, sizeof dis);
    for (int v : vec){
        dis[v] = 0;
        q.push(v);
    }
    for (int v : now){
        dis[v] = 0;
        q.push(v);
        vec.push_back(v);
    }
    now.clear();
    while (!q.empty()){
        int v = q.front();
        q.pop();
        for (int u : adj[v]){
            if (dis[v] + 1 < dis[u]){
                dis[u] = dis[v] + 1;
                q.push(u);
            }
        }
    }
}

int main(){
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    int n, q;
    cin >> n >> q;
    for (int i = 1; i < n; i ++){
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(1, 0);
    for (int i = 1; i < L; i ++)
        for (int j = 1; j <= n; j ++)
            par[j][i] = par[par[j][i - 1]][i - 1];
    memset(dis, 63, sizeof dis);
    dis[1] = 0;
    now.push_back(1);
    while (q --){
        int t, v;
        cin >> t >> v;
        if (t == 1){
            dis[v] = 0;
            now.push_back(v);
            if (SQ < now.size())
                bfs();
        }
        else{
            for (int u : now)
                dis[v] = min(dis[v], getDis(v, u));
            cout << dis[v] << '\n';
        }
    }
    return 0;
}