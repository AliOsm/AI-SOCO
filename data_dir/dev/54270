//Author:- S_Aditya

#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
using namespace std;
//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
const ll mod=1e9+7;         
const int N=1e2+4;

int n,m;

string s[N];

void check_row(char a,char b,char c)
{
    if(n%3!=0)
    return;
    
    string ca="",cb="",cc="";
    
    rep(i,0,m)
    ca.pb(a),cb.pb(b),cc.pb(c);
    
    int x=n/3,y=2*x;
    
    rep(i,0,x)
    if(s[i]!=ca)
    return;
    
    rep(i,x,y)
    if(s[i]!=cb)
    return;
    
    rep(i,y,n)
    if(s[i]!=cc)
    return;
    
    cout<<"YES";
    
    exit(0);
}

void check_col(char a,char b,char c)
{
    if(m%3!=0)
    return;
    
    string ca="",cb="",cc="";
    
    rep(i,0,n)
    ca.pb(a),cb.pb(b),cc.pb(c);
    
    int x=m/3,y=2*x;
    
    //cout<<ca<<endl<<cb<<endl<<cc<<endl;
    
    rep(i,0,x)
    {
        string hs="";
        
        rep(j,0,n)
        hs.pb(s[j].at(i));
        
        if(hs!=ca)
        return;
    }
    
    rep(i,x,y)
    {
        string hs="";
        
        rep(j,0,n)
        hs.pb(s[j].at(i));
        
        if(hs!=cb)
        return;
    }
    
    rep(i,y,m)
    {
        string hs="";
        
        rep(j,0,n)
        hs.pb(s[j].at(i));
        
        if(hs!=cc)
        return;
    }
    
    cout<<"YES";
    
    exit(0);
}

int main()                  
{
    scn(n); scn(m);
    
    rep(i,0,n)
    cin>>s[i];
    
    char ch[6][3]={{'R','B','G'},{'R','G','B'},{'B','R','G'},{'B','G','R'},{'G','B','R'},{'G','R','B'}};
    
    //check horizontal flags
    
    rep(i,0,6)
    {
        check_row(ch[i][0],ch[i][1],ch[i][2]);
    }
    
    //check vertical flags(if needed)
    
    rep(i,0,6)
    {
        check_col(ch[i][0],ch[i][1],ch[i][2]);
    }
    
    cout<<"NO";
    
    return 0;
} 