#include <bits/stdc++.h>
using namespace std;

const int N = 2e5 + 10;
const long long mod = 998244353;

int a[N];
vector <int> rec;
long long dp[N][2];

int main(){
	int n, k, sz, d, pos;
	long long ans;
	scanf("%d %d",&n,&k);
	for (int i = 1; i <= n; i++) scanf("%d",&a[i]);
	for (int i = 1; i <= (n + 1) / 2; i++){
		if (~a[i * 2 - 1]) rec.push_back(i * 2 - 1);
	}
	memset(dp, 0, sizeof(dp));
	if (~a[1]){
		if ((int)rec.size() == 1) dp[1][0] = 1;
		else{
			if (a[1] == a[rec[1]]) dp[1][1] = 1;
			else dp[1][0] = 1;
		}
	}
	else if (rec.empty()) dp[1][0] = k;
	else{
		dp[1][0] = k - 1;
		dp[1][1] = 1;
	}
	sz = (int)rec.size();
	for (int i = 2; i <= (n + 1) / 2; i++){
		pos = i * 2 - 1;
		d = lower_bound(rec.begin(), rec.end(), pos) - rec.begin();
		if (~a[pos]){
			if (d == sz - 1) dp[i][0] = dp[i - 1][0];
			else{
				if (a[pos] == a[rec[d + 1]]) dp[i][1] = dp[i - 1][0];
				else dp[i][0] = dp[i - 1][0];
			}
		}
		else if (d == sz)
			dp[i][0] = dp[i - 1][0] * (k - 1) % mod;
		else{
			dp[i][0] = dp[i - 1][0] * (k - 2) % mod + dp[i - 1][1] * (k - 1) % mod;
			dp[i][0] %= mod;
			dp[i][1] = dp[i - 1][0];
		}
	}
	ans = (dp[(n + 1) / 2][0] + dp[(n + 1) / 2][1]) % mod;
	rec.clear();
	for (int i = 1; i <= n / 2; i++){
		if (~a[i * 2]) rec.push_back(i * 2);
	}
	memset(dp, 0, sizeof(dp));
	if (~a[2]){
		if ((int)rec.size() == 1) dp[1][0] = 1;
		else{
			if (a[2] == a[rec[1]]) dp[1][1] = 1;
			else dp[1][0] = 1;
		}
	}
	else if (rec.empty()) dp[1][0] = k;
	else{
		dp[1][0] = k - 1;
		dp[1][1] = 1;
	}
	sz = (int)rec.size();
	for (int i = 2; i <= n / 2; i++){
		pos = i * 2;
		d = lower_bound(rec.begin(), rec.end(), pos) - rec.begin();
		if (~a[pos]){
			if (d == sz - 1) dp[i][0] = dp[i - 1][0];
			else{
				if (a[pos] == a[rec[d + 1]]) dp[i][1] = dp[i - 1][0];
				else dp[i][0] = dp[i - 1][0];
			}
		}
		else if (d == sz)
			dp[i][0] = dp[i - 1][0] * (k - 1) % mod;
		else{
			dp[i][0] = dp[i - 1][0] * (k - 2) % mod + dp[i - 1][1] * (k - 1) % mod;
			dp[i][0] %= mod;
			dp[i][1] = dp[i - 1][0];
		}
	}
	ans = (dp[n / 2][0] + dp[n / 2][1]) % mod * ans % mod;
	printf("%I64d\n", ans);
	return 0;
}