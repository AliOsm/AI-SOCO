#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
int n, m;
int a[101];
int b[101];
struct st{
    int cap;
    int go;
    int rev;
};
vector<st> v[202];
const int s = 0;
void add(int from_, int go_, int cost){
    st kari;
    kari.go = go_;
    kari.cap = cost;
    kari.rev = v[go_].size();
    v[from_].push_back(kari);
    kari.go = from_;
    kari.cap = 0;
    kari.rev = v[from_].size() - 1;
    v[go_].push_back(kari);
}
bool use[202];
int dfs(int b,int go,int f=-1){
    use[b] = 1;
    if (b == go){
        return f;
    }
    int d = 0;
    int ff = 0;
    for (int i = 0; i < v[b].size(); i++){
        if (use[v[b][i].go] == 0&&v[b][i].cap>0){
            if (f == -1){
                ff = v[b][i].cap;
            }
            else{
                ff = min(f,v[b][i].cap);
            }
            d = dfs(v[b][i].go, go, ff);
            if (d != -1){
                v[b][i].cap -= d;
                v[v[b][i].go][v[b][i].rev].cap += d;
                return d;
            }
        }
    }
    return -1;
}
int max_frow(int from,int to){
    int r = 0;
    int rr = 0;
    while (1){
        memset(use, 0, sizeof(use));
        rr=dfs(from, to);
        if (rr == -1){
            break;
        }
        r += rr;
    }
    return r;
}
int main(){
    scanf("%d", &n);
    for (int i = 1; i <= n; i++){
        scanf("%d", &a[i]);
    }
    scanf("%d", &m);
    for (int j = 1; j <= m; j++){
        scanf("%d", &b[j]);
    }
    const int gole = n + m + 1;
    for (int i = 1; i <= n; i++){
        add(0, i,1);
    }
    for (int j = 1; j <= m; j++){
        add(n + j, gole,1);
    }
    for (int i = 1; i <= n; i++){
        for (int j = 1; j <= m; j++){
            if (abs(a[i] - b[j])<=1){
                add(i, n + j, 1);
            }
        }
    }
    cout << max_frow(s,gole) << endl;
    return 0;
}