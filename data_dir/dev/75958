#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>
#include <tuple>

using namespace std;
using ll = long long;
const int oo = numeric_limits<int>::max() / 2;
constexpr int N = 1001;

int n;
vector<int> g[N];
int s1[N], s2[N];
int used[N];

inline void solve(int cs) {
  cin >> n;
  for(int i = 0; i < n; ++i) {
    g[i].clear();
  }
  for(int i = 0; i + 1 < n; ++i) {
    int v, u;
    cin >> v >> u;
    --v; --u;
    g[v].emplace_back(u);
    g[u].emplace_back(v);
  }
  int k1;
  cin >> k1;
  for(int i = 0; i < k1; ++i) {
    int x;
    cin >> x;
    s1[--x] = cs;
  }
  int k2;
  cin >> k2;
  int anynode = -1;
  for(int i = 0; i < k2; ++i) {
    int x;
    cin >> x;
    s2[--x] = cs;
    anynode = x + 1;
  }

  cout << "B " << anynode << endl;
  cout.flush();
  
  int node;
  cin >> node;
  --node;

  queue<int> q;
  q.emplace(node);
  while(q.size()) {
    int cur = q.front();
    q.pop();
    
    if (s1[cur] == cs) {
      cout << "A " << cur + 1 << endl;
      cout.flush();
      cin >> node;
      if (s2[--node] == cs) {
        cout << "C " << cur + 1 << endl;
        cout.flush();
        return;
      }
      break;
    }
    for(int to : g[cur]) {
      if (used[to] != cs) {
        used[to] = cs;
        q.emplace(to);
      }
    }
  }
  cout << "C " << -1 << endl;
  cout.flush();
} 


int main() {
	ios_base::sync_with_stdio(0);
	cin.tie();
  int t;
  cin >> t;
  fill(s1, s1 + N, -1);
  fill(s2, s2 + N, -1);
  fill(used, used + N, -1);
  for(int cs = 0; cs < t; ++cs) {
    solve(cs);
  }
	return 0;
}
