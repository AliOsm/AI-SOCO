#define _CRT_SECURE_NO_WARNINGS

/***from dust i have come, dust i will be***/

#include<algorithm>
#include<cctype>
#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<functional>
#include<iomanip>
#include<iostream>
#include<list>
#include<map>
#include<numeric>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<utility>
#include<vector>

typedef long long int ll;
typedef unsigned long long int ull;

#define dbg printf("in\n")
#define nl printf("\n");
#define N 350
#define inf 100000000

#define sf(n) scanf("%d", &n)
#define sff(n,m) scanf("%d%d",&n,&m)
#define sfl(n) scanf("%I64d", &n)
#define sffl(n,m) scanf("%I64d%I64d",&n,&m)

#define pf(n) printf("%d ",n)
#define pff(n,m) printf("%d %d\n",n,m)
#define pffl(n,m) printf("%I64d %I64d\n",n,m)
#define pfl(n) printf("%I64d\n",n)
#define pfs(s) printf("%s",s)

#define pb push_back
#define pp pair<int,int>

using namespace std;

int parent[N];

vector<int> adj[N];

void parentFinder(int s, int p)
{
	parent[s] = p;
	for (int e : adj[s])
	{
		if (e != p)
			parentFinder(e, s);
	}
}

bool vis[N];
int banglaLCA(int u, int v)
{
	memset(vis, 0, sizeof(vis));

	while (1)
	{
		vis[u] = 1;
		u = parent[u];

		if (u == -1) break;
	}

	while (1)
	{
		if (vis[v]) return v;
		v = parent[v];

		if (v == -1) break;
	}
}

int main()
{
	//freopen("in2.txt", "r", stdin);

	int i, j, k;
	int n, m;
	int u, v;

	sf(n);
	for (i = 1; i < n; i++)
	{
		sff(u, v);

		adj[u].pb(v);
		adj[v].pb(u);
	}

	vector<int> leaf;
	while (sf(k) != EOF) {
		leaf.pb(k);
	}

	parentFinder(1, -1);

	//1st leaf
	vector<int> ans;
	vector<int> temp;

	u = leaf[0];
	while (u != -1)
	{
		temp.pb(u);
		u = parent[u];
	}

	m = temp.size();
	for (i = m - 1; i >= 0; i--)
		ans.pb(temp[i]);

	m = leaf.size();

	for (i = 1; i < m; i++)
	{
		u = banglaLCA(leaf[i], leaf[i - 1]);
		
		//traverse from leaf[i-1] to u, then from u to leaf[i]
		
		v = leaf[i - 1]; v = parent[v];

		while (v != u && v != -1)
		{
			ans.pb(v);
			v = parent[v];

			if (v == u || v == -1)break;
		}

		ans.pb(u);

		temp.clear();
		v = leaf[i];
		while (1)
		{
			temp.pb(v);
			v = parent[v];

			if (v == u || v == -1)break;
		}

		k = temp.size();
		for (j = k - 1; j >= 0; j--)
			ans.pb(temp[j]);
	}

	//from last leaf to root
	u = leaf.back(); u = parent[u];
	while (u != -1)
	{
		ans.pb(u);
		u = parent[u];
	}

	if (ans.size() != 2 * n - 1) { pfs("-1\n"); return 0; }

	for (int e : ans)
		pf(e);

	nl

	return 0;
}