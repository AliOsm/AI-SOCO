#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <cmath>
#include <ctime>
#include <string>
#include <cstdlib>
#include <algorithm>
using namespace std;
#define read            freopen("C:\\Users\\USER\\Desktop\\in.txt", "r", stdin)
#define write           freopen("C:\\Users\\USER\\Desktop\\in.txt", "a", stdout)
#define repi(n)         for (i=0; i<(n); i++)
#define repj(n)         for (j=0; j<(n); j++)
#define rep1(a, n)      for (i=(a); i<(n); i++)
#define pii             pair<int, int>
#define pll             pair<LL, LL>
#define inf             1<<30
#define in(a)           scanf("%d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%d%d", &a, &b)
#define in3(a, b, c)    scanf("%d%d%d", &a, &b, &c)
#define pn              printf("\n");
#define pcs(a)          printf("Case %d: ", a)
#define pr(a)           printf("%d\n", a)
#define pr(a)           printf("%d\n", a)
#define prs(a)          printf("%d ", a)
#define pr2(a, b)       printf("%d %d\n", a, b)
#define pr3(a, b ,c)    printf("%d %d %d\n", a, b, c)
#define MP              make_pair
#define vi              vector<int>
#define vll             vector<LL>
#define msi             map<string, int>
#define mll             map<LL, LL>
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define pb              push_back
#define MEM(a, b)       memset((a), (b), sizeof(a))
#define MAX(A,B)        (((A)>(B))?(A):(B))
#define MIN(A,B)        (((A)<(B))?(A):(B))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)
typedef long long LL;
//int  dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int  dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int  dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(int n, int pos) {return (bool) (n & (1<<pos));}
//int  on(int n, int pos) {return n | (1<<pos);}
//int  off(int n, int pos) {return n & ~(1<<pos);}
//bool operator < (const data &d) const{return cost<d.cost;}

/* ***************************************************************************************
   *************************************************************************************** */
const int M=3100;
typedef pair<pii, int> ppii;
map<ppii, int>forbidden;
map<pii, int>parent;
vi A[M];
int visited[M];
struct data {
    int u, cost, par;
};
queue<data>q;
ppii make(int a, int b, int c)
{
    return MP(MP(a, b), c);
}
int bfs(int n)
{
    int i, j, k;
    data c, t;

    MEM(visited, 0);

    c.u=1;
    c.cost=0;
    c.par=-1;

    q.push(c);
    while (!q.empty())
    {
        c=q.front();
        q.pop();


        if (c.u==n) return c.cost;

        for (i=0; i<A[c.u].sz; i++)
        {
            t.u=A[c.u][i];
            if (visited[t.u]<3)
            {
                t.cost=c.cost+1;
                t.par=c.u;
                visited[t.u]++;

                if (forbidden[make(c.par, c.u, t.u)]==0&&t.u!=1)
                {
     //               printf("%d %d %d %d\n", c.u, c.cost, t.u, t.cost);
                    parent[MP(t.u, t.cost)]=c.u;
                    q.push(t);
                }
            }
        }
    }
return -1;
}
void _print(int n, int d)
{
    if (n==1) printf("%d", n);
    else
    {
        _print(parent[MP(n, d)], d-1);
        printf(" %d", n);
    }
}
int main()
{
#ifndef ONLINE_JUDGE
read;
#endif
    int i, j, k, n, e, f, d=0;
    in3(n, e, f);
    while (e--)
    {
        in2(i, j);
        A[i].pb(j);
        A[j].pb(i);
    }
    while (f--)
    {
        in3(i, j, k);
        forbidden[make(i, j, k)]=++d;
    }

    k=bfs(n);

    if (k==-1) pr(-1);
    else
    {
        pr(k);
        _print(n, k);
        pn;
    }

return 0;
}