#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <map>
#include <cstring>
#include <queue>
#include <deque>
#include <set>
#include <cmath>
#include <complex>

using namespace std;

typedef long long Long;

string S,P;
int arr[2010];
int memo[2010][2010];
int dp(int s,int x){
	if(s >= S.size()){
		return x == 0 ? 0 : -1000000000;
	}
	if(memo[s][x] != -1)return memo[s][x];
	int w = -1000000000;
	//start here
	if(arr[s] != -1 && arr[s] <= x){
		w = max(w , dp(s+arr[s]+P.size(), x-arr[s])+1);
	}
	
	//remove
	if(x > 0)
		w = max(w , dp(s+1,x-1));
	
	//ignore
	w = max(w , dp(s+1,x));
	
	return memo[s][x] = w;
}

int main() 
{
	cin >> S >> P;
//	S = string(2000,'a');
//	P = string(500,'a');
	for(int i = 0; i < S.size(); ++i){
		int id = i;
		arr[i] = 0;
		for(int j = 0; j < P.size(); ++j){
			while(id < S.size() && S[id] != P[j]){
				id++;
				arr[i]++;
			}
			if(id == S.size()){
				arr[i] = -1;
				break;
			}
			id++;
		}
	}
	memset(memo,-1,sizeof(memo));
	for(int i = 0; i <= S.size(); ++i){
		cout << dp(0,i) << " ";
	}
	cout << endl;
	
}
