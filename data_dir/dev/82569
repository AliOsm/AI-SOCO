#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

typedef long long ll;
using namespace std;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000005;
const ll INFLL = 1000000000000000002ll;
const ll MOD = 1000000007;

// ----------------------------------------------------------------------------------------------------------

enum {LEFT,RIGHT,UP,DOWN,UL,UR,DL,DR};
int A[1005][1005], Z[1005][1005][8], N, H, W;
ll R[1005][1005][4], C[1005][1005][4], D1[2005][2005][4], D2[2005][2005][4];

ll exp(ll n, int e)
{
    if(e == 0) return 1;
    if(e%2) return (exp(n,e-1) * n) % MOD;
    ll k = exp(n,e/2);
    return (k*k) % MOD;
}

ll row(int i, int l, int r, int num)
{
    return R[i][r][num] - R[i][l-1][num];
}

ll col(int j, int l, int r, int num)
{
    return C[j][r][num] - C[j][l-1][num];
}

ll get_diag1(int i, int l, int r, int num)
{
    return D1[i][r][num] - D1[i][l-1][num];
}

ll get_diag2(int i, int l, int r, int num)
{
    return D2[i][r][num] - D2[i][l-1][num];
}

bool comp(vector<int> v1, vector<int> v2)
{
    double e1 = (double) v1[2] / 300.0;
    double e2 = (double) v1[3] / 300.0;
    double e3 = (double) v2[2] / 300.0;
    double e4 = (double) v2[3] / 300.0;
    return pow(2,e1) * pow(3,e2) > pow(2,e3) * pow(3,e4);
}

int main()
{
    cin >> N;
    H = W = N;
    f(i,1,N)
    {
        string s;
        cin >> s;
        f(j,1,N) A[i][j] = s[j-1] - '0';
    }
    f(i,1,H) Z[i][W+1][RIGHT] = W+1;
    f(j,1,W) Z[H+1][j][DOWN] = H+1;
    f(i,1,H) f(j,1,W)
    {
        if(A[i][j] == 0) Z[i][j][LEFT] = j;
        else Z[i][j][LEFT] = Z[i][j-1][LEFT];
    }
    f(i,1,H) fd(j,W,1)
    {
        if(A[i][j] == 0) Z[i][j][RIGHT] = j;
        else Z[i][j][RIGHT] = Z[i][j+1][RIGHT];
    }
    f(j,1,W) f(i,1,H)
    {
        if(A[i][j] == 0) Z[i][j][UP] = i;
        else Z[i][j][UP] = Z[i-1][j][UP];
    }
    f(j,1,W) fd(i,H,1)
    {
        if(A[i][j] == 0) Z[i][j][DOWN] = i;
        else Z[i][j][DOWN] = Z[i+1][j][DOWN];
    }

    f(i,1,H) f(j,1,W)
    {
        if(A[i][j] == 0) Z[i][j][UL] = 0;
        else Z[i][j][UL] = Z[i-1][j-1][UL] + 1;
    }

    f(i,1,H) fd(j,W,1)
    {
        if(A[i][j] == 0) Z[i][j][UR] = 0;
        else Z[i][j][UR] = Z[i-1][j+1][UR] + 1;
    }

    fd(i,H,1) f(j,1,W)
    {
        if(A[i][j] == 0) Z[i][j][DL] = 0;
        else Z[i][j][DL] = Z[i+1][j-1][DL] + 1;
    }

    fd(i,H,1) fd(j,W,1)
    {
        if(A[i][j] == 0) Z[i][j][DR] = 0;
        else Z[i][j][DR] = Z[i+1][j+1][DR] + 1;
    }

    f(i,1,H) f(j,1,W) f(num,0,3)
    {
        int diag1 = i-j + N;
        int diag2 = i+j - 1;
        D1[diag1][j][num] = D1[diag1][j-1][num] + (A[i][j] == num);
        //D2[diag2][j][num] = D2[diag2][j-1][num] + (A[i][j] == num);
    }

    fd(i,H,1) f(j,1,W) f(num,0,3)
    {
        int diag1 = i-j + N;
        int diag2 = i+j - 1;
        //D1[diag1][j][num] = D1[diag1][j-1][num] + (A[i][j] == num);
        D2[diag2][j][num] = D2[diag2][j-1][num] + (A[i][j] == num);
    }

    //f(num,1,3) f(diag,1,7) f(i,1,N) cout << "D[" << diag << "][" << i << "][" << num << "] = " << D2[diag][i][num] << "\n";
    //return 0;

    f(i,1,H) f(j,1,W) f(num,0,3) R[i][j][num] = R[i][j-1][num] + (A[i][j] == num);
    f(j,1,W) f(i,1,H) f(num,0,3) C[j][i][num] = C[j][i-1][num] + (A[i][j] == num);

    vector<int> ans(4,0);

    f(i,1,H) f(j,1,W)
    {
        if(A[i][j] == 0) continue;
        int up = i - Z[i][j][UP];
        int down = Z[i][j][DOWN] - i;
        int left = j - Z[i][j][LEFT];
        int right = Z[i][j][RIGHT] - j;
        int sz = min(min(min(up,down), left), right);
        if(sz == 1) continue;
        vector<int> e(4,0);
        f(num,1,3)
        {
            int v1 = row(i,j-sz+1,j-1,num);
            int v2 = row(i,j+1,j+sz-1,num);
            int v3 = col(j,i-sz+1,i-1,num);
            int v4 = col(j,i+1,i+sz-1,num);
            e[num] += v1+v2+v3+v4;
        }
        e[A[i][j]]++;
        if(comp(e,ans)) ans = e;
    }

    f(i,1,H) f(j,1,W)
    {
        if(A[i][j] == 0) continue;
        int ul = Z[i][j][UL];
        int ur = Z[i][j][UR];
        int dl = Z[i][j][DL];
        int dr = Z[i][j][DR];
        int sz = min(min(min(ul,ur),dl),dr);
        if(sz == 1) continue;
        int diag1 = i-j + N;
        int diag2 = i+j - 1;
        vector<int> e(4,0);
        f(num,1,3)
        {
            int v1 = get_diag1(diag1,j-sz+1,j-1,num);
            int v2 = get_diag1(diag1,j+1,j+sz-1,num);
            int v3 = get_diag2(diag2,j-sz+1,j-1,num);
            int v4 = get_diag2(diag2,j+1,j+sz-1,num);
            e[num] += v1+v2+v3+v4;
        }
        e[A[i][j]]++;
        if(comp(e,ans)) ans = e;
    }

    ll ans2 = 1;
    f(num,1,3)
    {
        ans2 *= exp(num,ans[num]);
        ans2 %= MOD;
    }
    bool yes = false;
    f(i,1,H) f(j,1,W) if(A[i][j] > 0) yes = true;
    if(!yes)
    {
        cout << 0;
        return 0;
    }
    f(i,1,H) f(j,1,W) ans2 = max(ans2, (ll) A[i][j]);
    cout << ans2%MOD;
}
