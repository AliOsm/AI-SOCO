#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <cmath>
#include <ctime>
#include <string>
#include <cstdlib>
#include <algorithm>
using namespace std;
#define read freopen("C:\\Users\\USER\\Desktop\\in.txt", "r", stdin)
#define write freopen("C:\\Users\\USER\\Desktop\\out.txt", "a", stdout)
#define pii pair<int, int>
#define ff first
#define ss second
#define in(a) scanf("%d", &a)
#define ins(a) scanf("%s", a)
#define in2(a, b) scanf("%d%d", &a, &b)
#define in3(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define pn printf("\n");
#define pcs(a) printf("Case %d: ", a)
#define pr(a) printf("%d\n", a)
#define pr(a) printf("%d\n", a)
#define prs(a) printf("%d ", a)
#define pr2(a, b) printf("%d %d\n", a, b)
#define pr3(a, b ,c) printf("%d %d %d\n", a, b, c)
#define vi vector<int>
#define msi map<string, int>
#define mii map<int, int>
#define si set<int>
#define cl clear()
#define sz size()
#define pb push_back
#define MAX(A,B) (((A)>(B))?(A):(B))
#define MIN(A,B) (((A)<(B))?(A):(B))
#define all(X) (X).begin(), (X).end ()
#define iter(it, X) for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(int n, int pos) {return (bool) (n & (1<<pos));}
//int on(int n, int pos) {return n | (1<<pos);}
//int off(int n, int pos) {return n & ~(1<<pos);}
//bool operator < (const data &d) const{return cost<d.cost;}
#define ext(a) {printf("%s\n", a); return 0;}
typedef long long LL;
typedef struct data sd;
#define pic pair<int, char>
pic tree[300100];
char A[100100];
string s;
void build(int n, int l, int r)
{
    if (l==r) tree[n]=make_pair(l, A[l]);
    else
    {
        build(2*n, l, (l+r)/2);
        build(2*n+1, (l+r)/2+1, r);

        if (tree[2*n].second>=tree[2*n+1].second) tree[n]=tree[2*n];
        else tree[n]=tree[2*n+1];
    }
}
pic find_max(int n, int i, int j, int l, int r)
{
    if (l>=i&&r<=j) return tree[n];
    else if (l>j||r<i) return make_pair(0, 0);
    else
    {
        pic a=find_max(2*n, i, j, l, (l+r)/2), b=find_max(2*n+1, i, j, (l+r)/2+1, r);

        return a.second>=b.second?a:b;
    }
}
int main()
{
    //use %I64d
    //read;

    int i, j, k, len;
    scanf("%s", A);

    len=strlen(A);

    build(1, 0, len-1);

    i=0;
    pic temp;
    while (i<len)
    {
        temp=find_max(1, i, len-1, 0, len-1);
        s+=temp.second;
        i=temp.first+1;
    }
cout<<s<<endl;
//file?
return 0;
}
