#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <sstream>
#include <iostream>
#include <cmath>
#include<cstring>
#include <cstdio>
#include <stack>
#include<iomanip>
#include<queue>
#include<functional>
#include<iterator>
#include<new>
#include<cstdlib>
using namespace std;
#define inf 100000000000000000
#define ninf -1000000000000000
#define ll long long
#define scll(x) scanf("%lld",&x);
#define sci(x)  scanf("%d",&x);
#define scc(x)  scanf("%c", &c);
#define ll long long
#define ii pair<int,int>
#define p10(ans) printf("%0.10f\n", ans);
#define pri(ans) printf("%d\n", ans);
#define prll(ans) printf("%lld\n", ans);
#define prc(ans)  printf("%c", ans);
#define pi 3.141592653589793
#define mem(arr,d)  memset(arr,d,sizeof(arr))
#define white 0
#define gray 1
#define black 2
/*long long gcd(long long a, long long b)
{
if (b == 0)return a; return gcd(b, a%b);
}
long long lcm(long long a, long long b) {
return  a * b / gcd(a, b);
}
*/
/*long long pw(long long  b, long long  p) { if (!p) return 1; long long  sq = pw(b, p / 2); sq *= sq; if (p % 2) sq *= b; return sq; }*/
struct nodaya
{
	int open, close, sa7;
	nodaya(int op=0,int cl=0,int k=0):open(op),close(cl),sa7(k){}
};
nodaya seg[4 * 1000010];
int arr[1000010];
int n;
string s;
nodaya merge(nodaya a, nodaya b)
{
	nodaya c;
	c.sa7 = a.sa7 + b.sa7 + min(a.open, b.close);
	c.open = b.open + max(0, a.open - b.close);
	c.close = a.close + max(0, b.close - a.open);
	return c;

}
void build(int l = 0, int r = n, int id=1)
{
	if (r - l < 2) { seg[id] = nodaya((s[l] == '('), (s[l] == ')'), 0); return; }
	int mid = (r + l) / 2;
	build(l, mid, id * 2);
	build(mid, r, id * 2 + 1);
	seg[id] = merge(seg[id * 2] , seg[id * 2 + 1]);
}
nodaya ans(int x, int y, int l= 0, int r = n, int id = 1)
{
	if (x >= r || l >= y)return nodaya(0, 0, 0);
	if (x<=l&&r<=y)return seg[id];
	int mid = (r + l) / 2;
	return merge(ans(x,y,l,mid,id*2),ans(x,y,mid,r,id*2+1));
}

int main() 
{
	cin >> s;
	n = s.size();
	build();
	int m,l,r;
	cin >> m;
	while (m--)
	{
		sci(l); sci(r);
		cout << ans(l - 1, r).sa7*2 << endl;
	}
	return 0;
}

