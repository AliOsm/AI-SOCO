
#include<bits/stdc++.h>
using namespace std;

#define LL                  long long
#define ull                 unsigned long long LL
#define scl(n)              scanf("%lld", &n)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)

#define MOD                 1000000007
#define MODP                99999999999973LL
#define pb                  push_back
#define mp                  make_pair
#define pp                  pair<LL,LL>
#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e9
#define EPS                 1e-8
#define Pi                  acos(-1.0)
LL bigmod(LL b, LL p, LL md){if(p==0) return 1;if(p%2==1){ return ((b%md)*bigmod(b,p-1,md))%md;} else {LL y=bigmod(b,p/2,md);return (y*y)%md;}}
#define N 100005


int par[N];
int val[N];

vector<int>v[N];
vector<int>res;

void dfs(int s,int p)
{
    int flag=1;
    if(val[s]==0)
        flag=0;

    for(int now:v[s])
    {
        if(val[now]==0)
            flag=0;
    }
    if(flag)
        res.pb(s);

    for(int now:v[s])
    {
        if(now==p)
            continue;
        dfs(now,s);
    }
}


int main()
{
    int n;
    cin>>n;

    int root;
    for(int i=1;i<=n;i++)
    {
        int a,c;
        cin>>a>>c;
        if(a==-1)
        {
            root=i;
            par[root]=0;
            val[i]=c;
            continue;
        }

        par[i]=a;
        val[i]=c;
        v[a].pb(i);


    }
    dfs(root,root);

    sort(res.begin(),res.end());

    if(res.size())
        for(int i=0;i<res.size();i++)
            cout<<res[i]<<" ";
    else
        cout<<"-1"<<endl;


    return 0;
}

/* LL dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* LL dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* LL dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* LL dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction
