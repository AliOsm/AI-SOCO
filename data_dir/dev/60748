#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
using namespace std;

#define ll long long int
#define pb push_back
#define mp make_pair
#define ld long double
#define sz(a) (ll)(a).size()
#define endl "\n"

const int MAXN = 2001;

vector<pair<ll,ll>>v, res;
ll n, c[MAXN], k[MAXN], arr[MAXN], siz[MAXN], ans, val[MAXN];
vector<pair<ll,pair<ll,ll>>>edges;
set<ll>s;
map<ll,ll>m, nd;

ll parent(ll i)                              // return root parent of an element
{
    while(arr[i] != i)
    {
        arr[i] = arr[arr[i]]; 
        i = arr[i]; 
    }
    return i;
}

void connect(ll a,ll b)                     // connects node a and b in same subset
{
    ll pa = parent(a);
    ll pb = parent(b);
    if(siz[pa] < siz[pb])
    {
        arr[pa] = arr[pb];
        siz[pb] += siz[pa];
    }
    else
    {
        arr[pb] = arr[pa];
        siz[pa] += siz[pb];
    }
}

int main()
{
	std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

 	cin >> n;
 	for(int i=0;i<n;i++)
 	{
 		ll x, y;
 		cin >> x >> y;
 		v.pb(mp(x, y));
 	}
 	for(int i=0;i<n;i++) cin >> c[i]; 
 	for(int i=0;i<n;i++) cin >> k[i];
 	for(int i=0;i<n;i++) arr[i] = i, siz[i] = 1, val[i] = c[i];
 	for(int i=0;i<n;i++)
 		for(int j=i+1;j<n;j++)
 		{
 			ll ed = (k[i] + k[j]) * (abs(v[i].first - v[j].first) + abs(v[i].second - v[j].second));
 			edges.pb(mp(ed, mp(i, j)));
 		}
 	sort(edges.begin(), edges.end());
 	for(int i=0;i<sz(edges);i++)
 	{
 		ll cost = edges[i].first;
 		ll x1 = edges[i].second.first;
 		ll x2 = edges[i].second.second;
 		ll p1 = parent(x1);
 		ll p2 = parent(x2);
 		if(p1 == p2) continue;
 		else
 		{
 			ll z = max(val[p1], val[p2]);
 			ll z2 = min(val[p1], val[p2]);
 			if(cost < z)
 			{
 				connect(x1, x2);
 				val[parent(x1)] = z2;
 				ans += cost;
 				res.pb(mp(x1 + 1, x2 + 1));
 			}
 		}
 	}
 	for(int i=0;i<n;i++)
 	{
 		ll q = parent(i);
 		if(s.find(q) == s.end())
 		{
 			s.insert(q);
 			m[q] = c[i];
 			nd[q] = i;
 		}
 		else
 		{
 			m[q] = min(m[q], c[i]);
 			if(m[q] == c[i]) nd[q] = i;
 		}
 	}
 	for(auto it : s) ans += m[it];
 	cout << ans << endl;
 	cout << sz(s) << endl;
 	for(auto it : s) cout << nd[it] + 1 << " ";
 	cout << endl;
 	cout << sz(res) << endl;
 	for(auto it : res) cout << it.first << " " << it.second << endl;
    return 0;
}