#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define mod(n, m) (((n%m) + m)%m)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'

const int N = 2e5 + 5;

int tree[4 * N];
int arr[N], pos[N];

void update(int node, int st, int en, int shemal, int yemeen, int val)
{
	if (st > en || st > yemeen || en < shemal)
		return;

	if (shemal <= st && en <= yemeen)
	{
		tree[node] = val;
		return;
	}

	int mid = (st + en) / 2;

	update(2 * node, st, mid, shemal, yemeen, val);
	update(2 * node + 1, mid + 1, en, shemal, yemeen, val);

	tree[node] = min(tree[2 * node], tree[2 * node + 1]);
}

int query(int node, int st, int en, int shemal, int yemeen)
{
	if (st > en || st > yemeen || en < shemal)
		return 1e9;

	if (shemal <= st && en <= yemeen)
		return tree[node];

	int mid = (st + en) / 2;

	int a = query(2 * node, st, mid, shemal, yemeen);
	int b = query(2 * node + 1, mid + 1, en, shemal, yemeen);

	return min(a, b);
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	rep(i, 0, 4*N)
		tree[i] = 1e9;

	int n;
	cin >> n;

	rep(i, 0, n)
		cin >> arr[i], update(1, 0, n - 1, i, i, arr[i]), pos[arr[i]] = i;

	bool flag = true;

	for (int i = n - 1; i >= 1; i--)
	{
		int a = pos[i], b = pos[n];
		if (a > b)
			swap(a, b);
		int curr = query(1, 0, n - 1, a, b);

		if (curr < i)
		{
			flag = false;
			break;
		}
		update(1, 0, n - 1, pos[i], pos[i], 1e9);
	}

	if (flag)
		cout << "YES\n";
	else
		cout << "NO\n";

	return 0;
}
