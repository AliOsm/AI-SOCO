#include <cstdio>
#include <iostream>
#include <algorithm>
#include <map>
#include <set>
#include <vector>
#include <deque>
#include <string>
#include <cmath>
#include <cctype>
#include <locale>
#include <queue>
#include <utility>
#include <iomanip>
#include <stdio.h>
#include <string.h>

#define forn(n) for(int i = 0; i < n; i++)
#define fornm(n, m) for(int i = 0; i < n; i++) for(int j = 0; j < m; j++)
#define pb push_back
#define pf push_front
#define ll long long
#define ld long double
#define pi 3.141592653589793238462643383
#define mp make_pair
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pdd pair<ld, ld>
#define endl '\n'
#define fastScan ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

using namespace std;
vector<int> adj[19];
ll memo[19][600000];
int used[19][600000];
int count(int mask)
{
	int ret = 0;
	for(int i = 31; i >= 0; i--)
	{
		if(((1<<i)&mask) != 0) ret++;
	}
	return ret;
}

ll solve(int cur, int mask, int start)
{
	//if(memo[cur][mask] != -1) return memo[cur][mask];
	if(used[cur][mask] == start) return memo[cur][mask];
	if(cur == start && ((1<<cur)&mask) != 0)
	{
		if(count(mask) >= 3) return 1;
		return 0;
	}
	ll ret = 0;
	for(int to : adj[cur])
	{
		if(to > start) continue;
		if(((1<<to)&mask) != 0) continue;
		ret += solve(to, mask|(1<<to), start);
	}
	used[cur][mask] = start;
	return memo[cur][mask] = ret;
}

int main() 
{
	//fastScan;
	int n, m; cin >> n >> m;  
   forn(m)
   {
		int v1, v2; cin >> v1 >> v2; v1--; v2--;
		adj[v1].pb(v2);
		adj[v2].pb(v1);
	}
	fornm(19, 600000)
	{
		memo[i][j] = -1;
		used[i][j] = -1;
	}
	ll ret = 0;
	for(int cap = n-1; cap >= 0; cap--)
	{
		ret += solve(cap, 0, cap)/2;
	}
	cout << ret << endl;
   return 0;
}
