#include <bits/stdc++.h>
using namespace std;

const int MAXN = 100005;
int fa[MAXN * 2];
map<string, int> mp;
int n;

int DSU_FindFather(int k)
{
    return fa[k] == k ? k : (fa[k] = DSU_FindFather(fa[k]));
}

bool DSU_InSame(int a, int b)
{
    return DSU_FindFather(a) == DSU_FindFather(b) || DSU_FindFather(a + n) == DSU_FindFather(b + n);
}

bool DSU_InDiff(int a, int b)
{
    return DSU_FindFather(a) == DSU_FindFather(b + n) || DSU_FindFather(a + n) == DSU_FindFather(b);
}

void DSU_MergeSame(int a, int b)
{
    fa[DSU_FindFather(a)] = DSU_FindFather(b);
    fa[DSU_FindFather(n + a)] = DSU_FindFather(n + b);
    return;
}

void DSU_MergeDiff(int a, int b)
{
    fa[DSU_FindFather(n + a)] = DSU_FindFather(b);
    fa[DSU_FindFather(n + b)] = DSU_FindFather(a);
    return;
}

int main()
{
    int m, q, t;
    char st[25], st0[25];

    // freopen("D:\\1.in", "r", stdin);
    // freopen("D:\\1.out", "w", stdout);

    scanf("%d%d%d", &n, &m, &q);
    for(int i = 1; i <= n; i++) scanf("%s", st), mp[st] = i, fa[i] = i, fa[n + i] = n + i;
    while(m--)
    {
        int a, b;
        scanf("%d%s%s", &t, st, st0);
        a = mp[st]; b = mp[st0];

        if(t == 1 && DSU_InDiff(a, b) || t == 2 && DSU_InSame(a, b))
            printf("NO\n");
        else
        {
            printf("YES\n");
            if(t == 1) DSU_MergeSame(a, b);
            else DSU_MergeDiff(a, b);
        }
    }
    while(q--)
    {
        int a, b;
        scanf("%s%s", st, st0);
        a = mp[st]; b = mp[st0];

        if(DSU_InSame(a, b))
            printf("1\n");
        else if(DSU_InDiff(a, b))
            printf("2\n");
        else
            printf("3\n");
    }

    return 0;
}
