#include <bits/stdc++.h>
using namespace std;

using ll = long long;

bool is_prime(int p) {
  for (int i = 2; i * i <= p; ++i) {
    if (p % i == 0) {
      return 0;
    }
  }
  return 1;
}

vector <int> primes(int n) {
  vector <int> p(n + 1);
  for (ll i = 2; i <= n; ++i) {
    if (p[i] == 0) {
      p[i] = i;
      for (ll j = i * i; j <= n; j += i) {
        if (p[j] == 0) {
          p[j] = i;
        }
      }
    }
  }
  return p;
}

int f_linear(ll n, ll k) {
  vector <int> p(primes(n / k));
  int ans = 1;
  for (int i = n / k; i >= 2; --i) {
    if (p[i] >= k) {
      ans++;
      //cerr << i / k << ' ' << p[i / k] << endl;
    }
  }
  return ans;
}

ll go(int pos, const vector <int> &p, int coeff, ll mult, int n) {
  if (mult > n) {
    return 0;
  }
  if (pos == p.size()) {
    return n / mult * coeff;
  }
  return go(pos + 1, p, coeff, mult, n) + go(pos + 1, p, -coeff, mult * p[pos], n);
}

int f_exponential(int n, int k) {
  vector <int> p_all(primes(k));
  vector <int> p;
  for (int i = 2; i < k; ++i) {
    if (p_all[i] == i) {
      p.push_back(i);
    }
  }
  return go(0, p, 1, 1, n / k);
}

int f(int n, int k) {
  if (!is_prime(k)) {
    return 0;
  }
  if (n < k) {
    return 0;
  }
  if (k <= 100) {
    return f_exponential(n, k);
  } else {
    return f_linear(n, k);
  }
  return 0;
}

int main() {
#ifdef LOCAL
  freopen("input.txt", "r", stdin);
#endif
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  
  int a, b, k;
  cin >> a >> b >> k;
  cout << f(b, k) - f(a - 1, k) << endl;
  return 0;
}