#pragma comment(linker, "/STACK:64000000")
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int n, dp[3030][3030], m;
vector <int> g[3030];
vector <pii> row[3030], col[3030];
int used[3030];

void fill(int st) {
    queue <int> q;
    q.push(st);
    dp[st][st] = 0;
    while (!q.empty()) {
        int v = q.front();
        q.pop();
        forit (it, g[v]) {
            int to = *it;
            if (dp[st][to] == -1) {
                dp[st][to] = dp[st][v] + 1;
                q.push(to);
            }
        }
    }
}

void add(vector <pii> &v, int val, int ind) {
    pii p = mp(val, ind);
    v.pb(p);
    sort(all(v));
    reverse(all(v));
    while (v.size() > 5) v.pop_back();
}

bool different(int a, int b, int c, int d) {
    return a != b && a != c && a != d && b != c && b != d && c != d;
}

int main(){
    
    scanf("%d%d", &n, &m);
    for (int i = 0; i < m; i++) {
        int x, y;
        scanf("%d%d", &x, &y);
        x--; y--;
        g[x].pb(y);
    }
    
    memset(dp, -1, sizeof dp);
    
    for (int i = 0; i < n; i++)
        fill(i);
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == j || dp[i][j] == -1) continue;
            add(row[i], dp[i][j], j);
        }
        for (int j = 0; j < n; j++) {
            if (i == j || dp[j][i] == -1) continue;
            add(col[i], dp[j][i], j);
        }
    }
    
    int ans = -inf;
    int A = -1, B = -1, C = -1, D = -1;
    
    for (int b = 0; b < n; b++){
        for (int c = 0; c < n; c++) {
            if (c != b && dp[b][c] != -1) {
                for (int i = 0; i < col[b].size(); i++) {
                    for (int j = 0; j < row[c].size(); j++) {
                        int a = col[b][i].s;
                        int d = row[c][j].s;
                        if (!different(a, b, c, d)) continue;
                        if (different(a, b, c, d) && dp[a][b] != -1 && dp[b][c] != -1 && dp[c][d] != -1) {
                            int cur = dp[b][c] + dp[a][b] + dp[c][d];
                            if (cur > ans) {
                                ans = cur;
                                A = a;
                                B = b;
                                C = c;
                                D = d;
                            }
                        }
                    }
                }
            }
        }
    }
    
    cout << A + 1 << " " << B + 1 << " " << C + 1 << " " << D + 1 << endl;
    
    return 0;
}
