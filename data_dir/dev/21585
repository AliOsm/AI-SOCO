#include <bits/stdc++.h>
using namespace std;

const int MAXN = 100001;
const int MAXM = MAXN * 2;

int to[MAXM], head[MAXN], nxt[MAXM], E;
int n, m;
int p[MAXN][17];
int tin[MAXN], tout[MAXN], timer;
int sz[MAXN];
int d[MAXN];

void addEdge(int a, int b) {
  to[E] = b; nxt[E] = head[a]; head[a] = E++;
  to[E] = a; nxt[E] = head[b]; head[b] = E++;
}

void dfs(int v, int par = 0, int depth = 0) {
  sz[v] = 1;
  tin[v] = ++timer;
  p[v][0] = par;
  d[v] = depth;
  for (int i = 1; i < 17; ++i)
    p[v][i] = p[p[v][i - 1]][i - 1];
  for (int id = head[v]; ~id; id = nxt[id]) {
    if (to[id] != par) {
      dfs(to[id], v, depth + 1);
      sz[v] += sz[to[id]];
    }
  }
  tout[v] = ++timer;
}

inline bool ancestor(int a, int b) {
  return tin[a] <= tin[b] && tout[a] >= tout[b];
}

int lca(int a, int b) {
  if (ancestor(a, b)) return a;
  if (ancestor(b, a)) return b;
  for (int i = 16; i > -1; --i)
    if (!ancestor(p[a][i], b))
      a = p[a][i];
  return p[a][0];
}

int solve(int a, int b) {
  if (a == b)
    return n;
  int c = lca(a, b);
  int len = d[a] + d[b] - 2 * d[c];
  if (len & 1) return 0;
  if (d[a] == d[b]) {
    for (int i = 16; i > -1; --i) {
      if (!ancestor(p[a][i], c))
	a = p[a][i];
      if (!ancestor(p[b][i], c))
	b = p[b][i];
    }
    return n - sz[a] - sz[b];
  }
  else {
    if (d[a] < d[b])
      swap(a, b);
    int k = len / 2 - 1;
    for (int i = 16; i > -1; --i) {
      if ((1 << i) <= k) {
	k -= 1 << i;
	a = p[a][i];
      }
    }
    return sz[p[a][0]] - sz[a];
  }
}

int main() {
  memset(head, 0xff, sizeof head);
  int a, b;
  scanf("%d", &n);
  for (int i = 1; i < n; ++i) {
    scanf("%d%d", &a, &b);
    addEdge(--a, --b);
  }
  dfs(0);
  scanf("%d", &m);
  while (m --> 0) {
    scanf("%d%d", &a, &b);
    printf("%d\n", solve(--a, --b));
  }
  return 0;
}
