
//#include "stdc++.h"
#include<bits/stdc++.h>
#include<iostream>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
using namespace std;
//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//typedef tuple<int, int, int> t3;
typedef long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <ll, int> pli;
typedef pair <db, db> pdd;
typedef vector<int> vi;
#define m1 make_pair
#define pb push_back
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0) return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p; }
#define flush fflush(stdout)

const int INF = 0x3f3f3f3f;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;
 const ll MOD = 1000000007;
  ll ans[200000+1][2];int visited[200000+1][2];int a[200001];
  int dr(int f)
  {
    if(f)
    return -1;
    else
    return 1;
  }
void dfs(int i,int f,int n)
{
  
  visited[i][f]=1;
  int p=i+dr(f)*a[i];
  if(p==1)
  return;
  if(p<=0||p>n)
  {
    visited[i][f]=-1;
    ans[i][f]=a[i];
    return;
  }
  if(visited[p][1^f]==0)
  dfs(p,1^f,n);
  if(visited[p][1^f]==1)
  return;
  visited[i][f]=-1;
  ans[i][f]=a[i]+ans[p][1^f];
    
}

 int main()
 {
  int n;
  cin>>n;
  for(int i=2;i<=n;i++)
  cin>>a[i];
//bool visited[n+1];
 // int z[n+1][2];
 // memset(visited,0,sizeof(visited));
  //memset(z,0,sizeof(z));
  for(int i=0;i<=n;i++)
  { ans[i][0]=0;
  ans[i][1]=0;
  }
   for(int i=2;i<=n;i++)
   for(int f=0;f<=1;f++)
   if(!visited[i][f])
   {
   dfs(i,f,n);
   }
   for(int i=1;i<n;i++)
   {
     if(visited[i+1][1]!=1)
     cout<<ans[i+1][1]+i<<endl;
     else
     cout<<"-1"<<endl;
   }
 }

