/*input
abacaba
5
2 1 4
1 4 b
1 5 b
2 4 6
2 1 7
*/
#include "bits/stdc++.h"
using namespace std;
const long long md=1e9+7;
long long a[1000005],n;
template <typename T>
class SegmentTree{
	vector<T> segtree;
	function<T(T,T)> combine;
	T inf;
	public:
	SegmentTree(int size, T _inf, function<T(T,T)> f){
		inf = _inf;
		combine = f;
		segtree.resize(4*size,inf);
	}
	void update(int u, int a, int b, int i, T x){
		if(i<a || i>b) return;
		if(i>=b && i<=a){
			segtree[u]=x;
			return;
		}
		update(u*2,a,(a+b)/2,i,x); update(u*2+1,(a+b)/2+1,b,i,x);
		segtree[u]=combine(segtree[u*2],segtree[u*2+1]);
	}
	void update(int i, T x){
		update(1, 0, segtree.size()/4-1, i, x);
	}
	T query(int u, int a, int b, int i, int j){
		if(j<a || i>b || a>b) return inf;
		if(j>=b && i<=a) return segtree[u];
		return combine(query(u*2,a,(a+b)/2,i,j),query(u*2+1,1+(a+b)/2,b,i,j));
	}
	T query(int i, int j){
		return query(1,0,segtree.size()/4-1,i,j);
	}
};
int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);cout.tie(0);
	string s; cin >> s;
	s = '#' + s;
	int q; cin >> q;
	SegmentTree<int> ST(s.size()+2,0,[](int i, int j){
		return i|j;
	});
	for(int i=1;i<s.size();++i){
		ST.update(i,1<<(s[i]-'a'));
	}
	for(int l, r, type; q--;){
		cin >> type;
		if(type == 1){
			char c;
			cin >> l >> c;
			ST.update(l, 1<<(c-'a'));
		} else {
			cin >> l >> r;
			cout << __builtin_popcount(ST.query(l,r)) << '\n';
		}
	}
}