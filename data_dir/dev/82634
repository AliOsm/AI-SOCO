#define _CRT_SECURE_NO_WARNINGS

#pragma comment(linker, "/STACK:67108864")

#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
#include <functional>
#include <numeric>
#include <memory.h>

using namespace std;

typedef long long LL;

const int N = 400000;

int n, m;

int from[2 * N], to[2 * N];

int erase[2 * N];

vector<int> G[N];

int tin[N];
int tmin[N];

int used[N];

int Time = 0;

int bridge[2 * N];

int cnt[N];
int comp[N];

void go1(int v, int p = -1)
{
	used[v] = 1;
	tin[v] = tmin[v] = Time++;
	for (int i = 0; i < G[v].size(); ++i)
	{
		int id = G[v][i];
		if (to[id] == p)
			continue;
		if (used[to[id]])
			tmin[v] = min(tin[to[id]], tmin[v]);
		else
		{
			go1(to[id], v);
			tmin[v] = min(tmin[to[id]], tmin[v]);
		}
		if (tin[v] < tmin[to[id]])
		{
			bridge[id] = 1;
			bridge[id ^ 1] = 1;
		}
	}
}

int color[N];

void go2(int v, int c, int p = -1)
{
	comp[v] = c;
	color[v] = 1;
	for (int i = 0; i < G[v].size(); ++i)
	{
		int id = G[v][i];
		if (bridge[id])
			continue;
		if (to[id] == p)
			continue;
		if (color[to[id]] != 2)
			erase[id ^ 1] = 1;
		if (!color[to[id]])
			go2(to[id], c, v);
	}
	color[v] = 2;
}

void go3(int v)
{
	used[v] = 1;
	for (int i = 0; i < G[v].size(); ++i)
	{
		int id = G[v][i];
		if (used[to[id]])
			continue;
		if (bridge[id])
			erase[id] = 1;
		go3(to[id]);
	}
}

int main()
{
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; ++i)
	{
		int u, v;
		scanf("%d%d", &u, &v);
		u--, v--;
		from[2 * i] = to[2 * i + 1] = u;
		from[2 * i + 1] = to[2 * i] = v;
		G[u].push_back(2 * i);
		G[v].push_back(2 * i + 1);
	}

	go1(0);
	int c = 0;
	memset(used, 0, sizeof(used));
	for (int i = 0; i < n; ++i)
		if (!color[i])
			go2(i, c++);

	for (int i = 0; i < n; ++i)
		cnt[comp[i]]++;

	int res = *max_element(cnt, cnt + c);
	int cc = 0;
	int v = 0;
	for (int i = 0; i < c; ++i)
		if (cnt[i] == res)
			cc = i;
	for (int i = 0; i < n; ++i)
		if (comp[i] == cc)
			v = i;
	memset(used, 0, sizeof(used));

	go3(v);

	printf("%d\n", res);

	for (int i = 0; i < m; ++i)
	{
		if (erase[2 * i])
			printf("%d %d\n", from[2 * i + 1] + 1, to[2 * i + 1] + 1);
		else
			printf("%d %d\n", from[2 * i] + 1, to[2 * i] + 1);
	}

	return 0;
}