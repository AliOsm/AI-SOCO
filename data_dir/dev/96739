#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <int, int> pii;

const int N = 60 + 5, M = 4000 + 5;

struct grid {
	string s[N];
}a[M];

int n, m, k, wei, par[M], sz[M], ans;
vector <pair <int, pii>> edge;
vector <int> adj[M];

int root(int v) {
	if(v == par[v])
		return v;
	return par[v] = root(par[v]);
}

void merge(int v, int u) {
	int x = v, y = u;
	v = root(v), u = root(u);
	if(sz[v] > sz[u])
		swap(v, u);
	sz[u] += sz[v];
	par[v] = u;
	return;
}

void dfs(int v, int p = -1) {
	if(v)
		cout << v << " " << p << "\n";
	for (auto u : adj[v])
		if(u ^ p)	dfs(u, v);
}

void find_mst() {
	sort(edge.begin(), edge.end());
	n = k + 1;
	for (int i = 0; i < n; i++)
		par[i] = i, sz[i] = 1;
	for (auto e : edge) {
		int v = e.second.first, u = e.second.second, w = e.first;
		if(root(v) != root(u)) {
			merge(v, u), ans += w;
			adj[v].push_back(u);
			adj[u].push_back(v);
		}
	}
	cout << ans << "\n";
	dfs(0);
}

int main() {
	ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);	
	cin >> n >> m >> k >> wei;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			a[0].s[i].push_back('$');
	for (int t = 1; t <= k; t++) {
		for (int i = 0; i < n; i++)
			cin >> a[t].s[i];
		for (int l = 0; l < t; l++) {
			int w = 0;
			for (int i = 0; i < n; i++)
				for (int j = 0; j < m; j++)
					if(a[t].s[i][j] != a[l].s[i][j])
						w++;
			int x = wei * w, y = w;
			edge.push_back({((l)? x : y), {l, t}});
		}
	}
	find_mst();
}
