#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
#define pb push_back
#define endl "\n"
template <typename T> inline T sqr(T t){return t*t;}

const int N = 4e5+100;

ll t[N*4], a[N], ob[N*4];
int sz = 1, tin[N], tout[N], tim, n;

void push(int v){
    if (ob[v] == 0)
        return;

    t[v+v] = t[v];
    t[v+v+1] = t[v];

    ob[v+v] = 1;
    ob[v+v+1] = 1;
    ob[v] = 0;
}

void update(int v, int l, int r, int tl, int tr, ll x){
    if (l > r || tl > r || l > tr)
        return;
    if (tl <= l && r <= tr){
        t[v] = (1ll<<x);
        ob[v] = 1;
        return;
    }
    push(v);
    int mid = (l+r)>>1;
    update(v+v, l, mid, tl, tr, x);
    update(v+v+1, mid+1, r, tl, tr, x);
    t[v] = (t[v+v] | t[v+v+1]);
}

ll get(int v, int l, int r, int tl, int tr){
    if (l > r || tl > r || l > tr)
        return 0;
    if (tl <= l && r <= tr)
        return t[v];
    push(v);
    int mid = (l+r)>>1;
    return (get(v+v, l, mid, tl, tr) | get(v+v+1, mid+1, r, tl, tr));
}

vector <int> g[N];

void dfs(int v, int p){
    tin[v] = ++tim;
    for (int i = 0; i < g[v].size(); i++)
        if (g[v][i] != p)
            dfs(g[v][i], v);
    tout[v] = tim;
}

void dfs1(int v, int p){
    update(1, 1, sz, tin[v], tout[v], a[v]);
    for (int i = 0; i < g[v].size(); i++)
        if (g[v][i] != p)
            dfs1(g[v][i], v);
}

int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int m;
    cin >> n >> m;
    while(sz < n)
        sz += sz;
    for (int i = 1; i <= n; i++)
        cin >> a[i];
    for (int i = 1; i < n; i++){
        int u, v;
        cin >> u >> v;
        g[u].pb(v);
        g[v].pb(u);
    }
    dfs(1, 0);
    dfs1(1, 0);
    while(m--){
        int type, a;
        ll b;
        cin >> type >> a;
        if (type == 1){
            cin >> b;
            update(1, 1, sz, tin[a], tout[a], b);
        } else {
            //cout << get(1, 1, sz, tin[a], tout[a]) << endl;
            cout << __builtin_popcountll(get(1, 1, sz, tin[a], tout[a])) << endl;
        }
    }
}
