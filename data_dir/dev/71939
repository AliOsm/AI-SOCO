#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>
#include <iomanip>
#include <limits>
#include <chrono>
#include <random>
#include <array>
#include <unordered_map>
#include <functional>
#include <complex>
#include <numeric>

template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

constexpr long long MAX = 5100000;
constexpr long long INF = 1LL << 60;
constexpr int inf = 1 << 28;
//constexpr long long mod = 1000000007LL;
constexpr long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;

int n, m;
vector<vector<int>> g;
vector<int> col;
vector<bool> used;
struct mint {
	long long x;
	mint(long long x = 0) :x((x% mod + mod) % mod) {}
	mint& operator+=(const mint a) {
		if ((x += a.x) >= mod) x -= mod;
		return *this;
	}
	mint& operator-=(const mint a) {
		if ((x += mod - a.x) >= mod) x -= mod;
		return *this;
	}
	mint& operator*=(const mint a) {
		(x *= a.x) %= mod;
		return *this;
	}
	mint operator+(const mint a) const {
		mint res(*this);
		return res += a;
	}
	mint operator-(const mint a) const {
		mint res(*this);
		return res -= a;
	}
	mint operator*(const mint a) const {
		mint res(*this);
		return res *= a;
	}
	mint pow(ll t) const {
		if (!t) return 1;
		mint a = pow(t >> 1);
		a *= a;
		if (t & 1) a *= *this;
		return a;
	}

	// for prime mod
	mint inv() const {
		return pow(mod - 2);
	}
	mint& operator/=(const mint a) {
		return (*this) *= a.inv();
	}
	mint operator/(const mint a) const {
		mint res(*this);
		return res /= a;
	}
};

bool dfs(int cur, int &b, int &w) {
	bool ok = true;
	used[cur] = true;
	if (col[cur] == 0) b++;
	else w++;
	for (auto next : g[cur]) {
		if (col[next] == -1) {
			col[next] = col[cur] ^ 1;
			ok &= dfs(next, b, w);
		}
		else if (col[next] == col[cur]) {
			return false;
		}
	}
	return ok;
}
void init() {
	g.clear();
	col.clear();
	used.clear();
}
void solve() {
	init();
	scanf("%d %d", &n, &m);
	g.resize(n); col.resize(n, -1);
	used.resize(n);
	for (int i = 0; i < m; i++) {
		int u, v; scanf("%d %d", &u, &v);
		u--; v--;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	mint res = 1;
	for (int i = 0; i < n; i++) {
		if (used[i]) continue;
		col[i] = 0;
		int cnt_b = 0, cnt_w = 0;

		bool ok = dfs(i, cnt_b, cnt_w);
		if (!ok) {
			puts("0");
			return;
		}


		res *= mint(2).pow(cnt_b) + mint(2).pow(cnt_w);
	}
	cout << res.x << "\n";
}

int main()
{
	/*
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	*/
	int kkt; scanf("%d", &kkt);
	while (kkt--) {
		solve();
	}
	return 0;
}
