#include <bits/stdc++.h>
using namespace std;
#define REP(i, n) for (int i = 0; i < int(n); i++)
#define FOR(i, a, b) for (int i = a; i < int(b); i++)
#define FOREACH(i, v) for (__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define SIZE(v) ((int)(v).size())
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define ll long long
#define pii pair<int, int>

const int MAX = 1010;
ll y[MAX];
int n;

ll gcd(ll a, ll b) {
	if(a < 0) a *= -1ll;
	if(b < 0) b *= -1ll;
	if(b == 0) return a;
	else return gcd(b, a%b);
}

struct str {
	ll a, b, c;
	str(ll _a, ll _b, ll _c) {
		a = _a;
		b = _b;
		c = _c;
	}
	void up() {
		ll g = gcd(a, b);
		g = gcd(g, c);
		a /= g;
		b /= g;
		c /= g;
		if(a < 0) a = -a, b = -b, c = -c;
	}
	str() {
		
	}
	bool operator==(const str &st) {
		return a == st.a && b == st.b && c == st.c;
	}
	bool operator!=(const str &st) {
		return !(a == st.a && b == st.b && c == st.c);
	}
};


str f(int i, int j) {
	if(i == j) return str(0, 0, 0);
	str ans;
	ans.a = j - i;
	ans.b = -(y[j] - y[i]);
	ans.c = -y[i]*(j - i) + 1ll*i*(y[j] - y[i]);
	ans.up();
	return ans;
} 

bool solve(str st, int i, int j) {
	vector<int> v;
	for(int k = 1; k <= n; k++)
		if(i == k || j == k || st == f(i, k));
		else v.pb(k);
	int len = (int)v.size();
	if(len == 1) return true;
	else if(len == 0) return false;
	else {
		str st0 = f(v[0], v[1]);
		for(int k = 2; k < len; k++)
			if(st0 != f(v[0], v[k])) return false;
		return (st.a*st0.b == st0.a*st.b);
	}
}

int main() {
	scanf("%d", &n);
	REP(i, n) scanf("%lld", y + i + 1);
	
	bool possible = false;
	
	if(solve(f(1, 2), 1, 2)) possible = true;
	//printf("%d\n", possible ? 1 : 0);
	if(solve(f(1, 3), 1, 3)) possible = true;
	//printf("%d\n", possible ? 1 : 0);
	if(solve(f(2, 3), 2, 3)) possible = true;
	//printf("%d\n", possible ? 1 : 0);
	
	if(possible) printf("Yes\n");
	else printf("No\n");
	
}