#include <iostream>
#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define ll long long
#define F first
#define S second
#define PI acos(-1)
#define EPS 1e-8
#define BASE 53ll
#define mod 1000000007ll
#define ld long double
#define MAX 900001
#define NIL 0
#define INF (1<<28)

typedef pair<int,int>ii;
typedef pair<ii,int>state;
typedef pair<int,ii>edge;
typedef pair<vector<int>,int>vii;
const int N=500005;
const int M=2000005;

ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
ll fact(ll n){ll ret=1;for(int i=1;i<=n;i++)ret*=i;return ret;}
bool is_vowel(char c){if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||c=='y')return 1;return 0;}
ld getDistance(ld x1,ld y1,ld x2,ld y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}

int n,m,h,c[N];
vector<int>adj[N];
int dfsNumberCounter=1;
vector<int>comp[N];
int dfs_num[N], dfs_low[N],  visited[N]; // global variables
vector<int>S;
void tarjanSCC(int u) {
        dfs_low[u] = dfs_num[u] = dfsNumberCounter++; // dfs_low[u] <= dfs_num[u]
        S.push_back(u); // stores u in a vector based on order of visitation
        visited[u] = 1;
    for (int j = 0; j < (int)adj[u].size(); j++) {
        int v = adj[u][j];
        if (dfs_num[v] == 0)
        tarjanSCC(v);
        if (visited[v]) // condition for update
            dfs_low[u] = min(dfs_low[u], dfs_low[v]);
    }
    if (dfs_low[u] == dfs_num[u]) { // if this is a root (start) of an SCC
    while (1) {
        int v = S.back(); S.pop_back(); visited[v] = 0;dfs_low[v]=dfs_low[u];
        if (u == v) break;
    }
    }
}
int id[N],cost[N];
vector<int>g[N];
void compress(){
   for(int i=1;i<=n;i++){
       comp[dfs_low[i]].pb(i);
   }
   memset(id,-1,sizeof(id));
   for(int i=1;i<dfsNumberCounter;i++){
      for(int j=0;j<comp[i].size();j++){
         if(!j)cost[i]=0;
         int node=comp[i][j];
         id[node]=i;
         cost[i]++;
      }
   }
   for(int i=1;i<=n;i++){
    if(id[i]==-1){
        id[i]=dfsNumberCounter++;
    }
   }
   for(int i=1;i<=n;i++){
    for(int j=0;j<adj[i].size();j++){
        int cur=id[i],to=id[adj[i][j]];
        if(to==cur)continue;
        g[cur].pb(to);
    }
   }
}
int dp[N];
int dfs(int idx){
    if(dp[idx]!=-1)return dp[idx];
    int ret=cost[idx];
    for(int i=0;i<g[idx].size();i++)ret+=dfs(g[idx][i]);
    return dp[idx]=ret;
}
bool done[N];
vector<int>sol;
void solve(int node){
   if(done[node])return;
   sol.pb(node);
   done[node]=1;
   for(int i=0;i<adj[node].size();i++)solve(adj[node][i]);
}
void go(int node){
  for(int i=0;i<comp[node].size();i++){
     solve(comp[node][i]);
  }
}
int main()
{
   //freopen("test.in","r",stdin);
   //freopen("test.out","w",stdout);
   scanf("%d%d%d",&n,&m,&h);
   for(int i=1;i<=n;i++){
      scanf("%d",&c[i]);
      cost[i]=n+10;
   }
   for(int i=0;i<m;i++){
     int a=i+1,b=i+2;
     scanf("%d%d",&a,&b);
     int nxtA=(c[a]+1)%h;
     int nxtB=(c[b]+1)%h;
     if(nxtA==c[b]){//cout<<a<<' '<<b<<endl;
        adj[a].pb(b);
     }
     if(nxtB==c[a]){//cout<<b<<' '<<a<<endl;
        adj[b].pb(a);
     }
   }
   for(int i=1;i<=n;i++){
    if(adj[i].size()==0){
        cout<<1<<endl<<i;
        return 0;
    }
   }
   for(int i=1;i<=n;i++){
     if(dfs_num[i])continue;
     tarjanSCC(i);
   }
   compress();
   memset(dp,-1,sizeof(dp));
   int mn=n+10,par=-1;
   for(int i=1;i<=n;i++){
      if(dfs(i)<mn){
        mn=dfs(i);
        par=i;
      }
   }
   cout<<mn<<endl;
   go(par);
   for(int i=0;i<sol.size();i++)printf("%d ",sol[i]);
   return 0;
}
