#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <algorithm>
#include <map>
#include <queue>
#include <clocale>
#include <bitset>
#include <cstring>
#include <memory.h>
#include <numeric>
#include <iomanip>
#include <stack>
#include <sstream>
#include <list>
#include <complex>

#pragma comment (linker, "/STACK:667177216")
#define ll long long
#define LL long long
#define ull unsigned long long
#define ld long double
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pb push_back
const ll mod = 1000000007;
#define INF (int)(2e9)
#define LINF (ll)(4e18)
#define forit(mas) for(auto(it)=(mas).begin();(it)!=(mas).end();(it)++)
#define pii pair<int,int>
#define M_PI 3.14159265358979323846

using namespace std;

map < pair<int, int>, set<pair<int, int>>>g;
map < int, vector<pair<int, int>> > X, Y;
map<pair<int, int>, int> used;

vector < vector<pair<int, int>>>cmp;

void dfs(pair<int, int>v,int clr) {
	used[v] = 1;
	for (auto v : g[v]) {
		if (!used.count(v)) dfs(v, clr);
	}
}

int main() {

#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0);
	int n;
	cin >> n;
	vector<pair<int, int>>mas(n);
	for (int i = 0; i < n; i++) {
		cin >> mas[i].first >> mas[i].second;
		X[mas[i].first].push_back(mas[i]);
		Y[mas[i].second].push_back(mas[i]);
	}
	for (int i = 0; i < n; i++) {
		for (auto it = X[mas[i].first].begin(); it != X[mas[i].first].end(); it++) {
			if (*it == mas[i]) continue;
			g[mas[i]].insert(*it);
		}
		for (auto it = Y[mas[i].second].begin(); it != Y[mas[i].second].end(); it++) {
			if (*it == mas[i]) continue;
			g[mas[i]].insert(*it);
		}
	}
	int clr = -1;
	for (int i = 0; i < n; i++) {
		if (used.count(mas[i])) continue;
		cmp.push_back(vector<pair<int, int>>());
		dfs(mas[i], ++clr);
	}
	cout << cmp.size() - 1;
	return 0;
}