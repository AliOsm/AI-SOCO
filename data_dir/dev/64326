/*---> 22 April 2020 <--- > 20:43:00 <---*/
// #pragma GCC optimize("Ofast")
// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
// #pragma GCC optimize("unroll-loops")
// #pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("O3")
//#pragma GCC target ("sse4")
#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
using namespace std;
//template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;
#define int long long
#define F first
#define S second
#define mod 1000000007
#define inf (int)1e18+5
#define sz(x) (int)x.size()
#define PI 3.141592653589793238510
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define __ ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define vi vector<int>
#define vpii vector<pair<int,int> > 
#define vvi vector<vector<int> >
#define PRINT_TIME cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s." <<endl;
#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename   enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
  ris << "(" << d.first << ", " << d.second << ")";
}
sim dor(rge<c> d) {
  *this << "[";
  for (auto it = d.b; it != d.e; ++it)
    *this << ", " + 2 * (it == d.b) << *it;
  ris << "]";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "
typedef long double ld;
typedef pair<int,int> pii;
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
const int N=3e5+5;
int n,q;
vector<pair<int,pii> > que;
int seg[4*N],laz[4*N];
int mp[3*N];
void up(int pos,int val){
	if(laz[pos]==val && val!=3)
		return;
	if(laz[pos]==val && val==3)
		{
			laz[pos]=0;
			return;
		}
	if(!laz[pos])
		laz[pos]=val;
	else if(val==1 || val==2)
		laz[pos]=val;
	else if(laz[pos]==1 && val==3)
		laz[pos]=2;
	else if(laz[pos]==2 && val==3)
		laz[pos]=1;
}
void check(int st,int en,int pos){
	if(!laz[pos])
		return;
	if(laz[pos]!=3)
		seg[pos]=(laz[pos]-1)*(en-st+1);
	else
		seg[pos]=(en-st+1-seg[pos]);
	if(st!=en){
		up(2*pos,laz[pos]);
		up(2*pos+1,laz[pos]);
	}
	laz[pos]=0;
}
void update(int st,int en,int qst,int qen,int val,int pos){
	// debug()<< imie(seg[pos]) imie(st) imie(en) imie(qst) imie(qen) imie(val) imie(pos);
	check(st,en,pos);
	if(st!=en){
		int mid=(st+en)/2;
		check(st,mid,2*pos);
		check(mid+1,en,2*pos+1);
	}
	if(en<qst || qen<st)
		return;
	if(qst<=st && en<=qen){
		if(val!=3)
		seg[pos]=(val-1)*(en-st+1);
		else
		seg[pos]=en-st+1-seg[pos];

		if(st!=en){
			up(2*pos,val);
			up(2*pos+1,val);
		}
		return;
	}
	int mid=(st+en)/2;
	update(st,mid,qst,qen,val,2*pos);
	update(mid+1,en,qst,qen,val,2*pos+1);
	seg[pos]=seg[2*pos]+seg[2*pos+1];
	// if(val==3)

}
int query(int st,int en,int pos){
	check(st,en,pos);
	if(st==en){
		return st;
	}
	int mid=(st+en)/2;
	check(st,mid,2*pos);
	check(mid+1,en,2*pos+1);
	if(seg[2*pos]<(mid-st+1))
		return query(st,mid,2*pos);
	else
		return query(mid+1,en,2*pos+1);
}
int32_t main(){__
	cin>>q;
	vi a={1};
	que.resize(q);
	for(int i=0;i<q;i++)
	{
		cin>>que[i].F>>que[i].S.F>>que[i].S.S;
		a.push_back(que[i].S.F);
		a.push_back(que[i].S.S);
		a.push_back(que[i].S.S+1);
	}
	sort(all(a));
	a.resize(unique(all(a))-a.begin());
	n=sz(a);
	// debug()<< imie(a);
	mp[1]=1;
	for(int i=0;i<q;i++){
		int v1=lower_bound(all(a),que[i].S.F)-a.begin()+1;
		int v2=lower_bound(all(a),que[i].S.S)-a.begin()+1;
		int v3=lower_bound(all(a),que[i].S.S+1)-a.begin()+1;
		mp[v1]=que[i].S.F;
		mp[v2]=que[i].S.S;
		mp[v3]=que[i].S.S+1;
		que[i].S.S=v2;
		que[i].S.F=v1;
	}
	for(int i=0;i<q;i++){
		
		// debug()<< imie(v1) imie(v2);
		if(que[i].F==1){
			update(1,n,que[i].S.F,que[i].S.S,2,1);
		}
		else if(que[i].F==2){
			update(1,n,que[i].S.F,que[i].S.S,1,1);	
		}
		else{
			update(1,n,que[i].S.F,que[i].S.S,3,1);
		}
		// debug()<< range(mp+1,mp+15);
		// debug()<< imie(query(1,n,1));
		// debug()<< range(seg+1,seg+15);
		cout<<mp[query(1,n,1)]<<"\n";
	}

return 0;
}