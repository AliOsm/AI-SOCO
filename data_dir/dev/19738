#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds;   
#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update> 
#define ld long double
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define all(a) a.begin(),a.end()
#define sz(a) (ll)(a.size())
const ll M=1e6+6;
ll dst[M],pt[M],f[M];
std::vector<ll> divs[M],vtr[M];
void sieve()
{
	for(ll i=2;i<=M-6;i++)
	{
		if(f[i])
			continue;
		for(ll j=i;j<=M-6;j+=i)
		{
			f[j] = 1;
			ll t=j;
			ll c=0;
			while(t%i==0)
			{
				c++;
				t/=i;
			}
			if(c%2)
				divs[j].pb(i);
		}
	}
}
int main()
{
	ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
	sieve();
	ll n;
	cin>>n;
	set<ll> st;
	for(ll i=1;i<=n;i++)
	{
		ll x;
		cin>>x;		
		ll res=1;
		for(auto u:divs[x])
			res=res*u;
		st.insert(res);
		if(sz(divs[x])==0)
		{
			cout<<"1\n";
			return 0;
		}
		if(sz(divs[x])==1)
		{
			vtr[1].pb(divs[x][0]);
			vtr[divs[x][0]].pb(1);
		}
		if(sz(divs[x])==2)
		{
			vtr[divs[x][0]].pb(divs[x][1]);
			vtr[divs[x][1]].pb(divs[x][0]);
		}
	}
	if(sz(st)<n)
	{
		cout<<"2\n";
		return 0;
	}
	memset(dst,-1,sizeof(dst));
	ll ans=M;
	for(ll i=1;i<=1000;i++)
	{
		queue<ll> q;
		q.push(i);
		std::vector<ll> v;
		dst[i] = 0;
		v.pb(i);
		while(!q.empty())
		{
			ll x=q.front();
			q.pop();
			for(auto u:vtr[x])
			{
				if(dst[u]==-1)
				{
					dst[u]=dst[x]+1;
					pt[u]=x;
					q.push(u);
					v.pb(u);
				}
				else if(u!=pt[x])
				{
					ans=min(ans,dst[u]+dst[x]+1);
				}
			}
		}
		for(auto u:v)
			dst[u] = -1;
	}
	if(ans==M)
		ans=-1;
	cout<<ans<<"\n";
	return 0;
}