#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

int main() {
  int a, b;
  scanf("%d%d", &a, &b);
  int d = abs(a - b);
  int64 ret = (int64)a * b;
  int best_k = 0;
  for (int i = 1; i * i <= d; ++i) {
    if (d % i) continue;
    int k = a % i;
    k = (k == 0 ? 0 : i - k);
    int64 cur = (int64)(a + k) / i * (b + k);
    if (ret > cur){
      ret = cur;
      best_k = k;
    }
    int j = d / i;
    k = a % j;
    k = (k == 0 ? 0 : j - k);
    cur = (int64)(a + k) / j * (b + k);
    if (ret > cur){
      ret = cur;
      best_k = k;
    }
  }
  printf("%d\n", best_k);
  return 0;
}
