# include <stdio.h>
# include <bits/stdc++.h>


#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace std;

inline bool isvowel (char c) {
	c = tolower(c);
    if (c == 'a' || c == 'e' || c == 'i' || c == 'y' || c == 'o' || c == 'u') return 1;
    return 0;
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 6e5 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n;
int mn[5][5];
int cnt[5][5];
int sum[5][5];
vector < pair < int, int > > e;
int ans;
bool u[5];

void dfs (int v, int &s, int &ch) {
	u[v] = 1;
	s += accumulate(sum[v] + 1, sum[v] + 5, 0);
	int t = accumulate(cnt[v] + 1, cnt[v] + 5, 0);
	if (t & 1) ch ++;
	for (int to = 1; to <= 4; to ++)
		if (!u[to] && cnt[v][to])
			dfs(to, s, ch); 
}

void upd_ans() {
	memset(u, 0, sizeof u);

	for (int i = 1; i <= 4; i ++) {
		if (!u[i]) {
			int ch = 0, res = 0;
			dfs(i, res, ch);
			if (ch <= 2) ans = max(ans, res);
		}
	}
}

int main () {
	SpeedForce;
	cin >> n;
	for (int i = 1; i <= n; i ++) {
		int x, y, w;
		cin >> x >> w >> y;
		
		cnt[x][y] ++;
		cnt[y][x] ++;
		if (mn[x][y]) {
			mn[x][y] = min(mn[x][y], w);
			mn[y][x] = mn[x][y];
		} else {
			mn[x][y] = w;
			mn[y][x] = mn[x][y];
		}
		sum[x][y] += w;
		sum[y][x] += w;
	}

	for (int i = 1; i <= 4; i ++)
		for (int j = i + 1; j <= 4; j ++)
			e.pb(mp(i, j));
	for (int mask = 0; mask < (1 << e.size()); mask ++) {
		bool can = 1;
		for (int i = 0; i < e.size(); i ++) if (mask & (1 << i) && !cnt[e[i].F][e[i].S]) {
			can = 0;
			break;
		}

		if (can) {
			for (int i = 0; i < e.size(); i ++) if (mask & (1 << i)) {
				sum[e[i].F][e[i].S] -= mn[e[i].F][e[i].S];
				sum[e[i].S][e[i].F] -= mn[e[i].F][e[i].S];
				cnt[e[i].F][e[i].S] --;
				cnt[e[i].S][e[i].F] --;
			}
		
			upd_ans();

			for (int i = 0; i < e.size(); i ++) if (mask & (1 << i)) {
				sum[e[i].F][e[i].S] += mn[e[i].F][e[i].S];
				sum[e[i].S][e[i].F] += mn[e[i].F][e[i].S];
				cnt[e[i].F][e[i].S] ++;
				cnt[e[i].S][e[i].F] ++;
			}
		}
	}
	
	assert(ans % 2 == 0);
	cout << ans / 2 << '\n';
	
	return Accepted;
}

// B...a