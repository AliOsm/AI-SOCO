#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long 

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << endl;
        //use cerr if u want to display at the bottom
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define trace(...)
#endif

typedef trie<string,null_type,trie_string_access_traits<>,pat_trie_tag,trie_prefix_search_node_update> pref_trie;
typedef tree<long int,null_type,less<long int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
typedef cc_hash_table<long int,long int, hash<long int>, equal_to<long int>, direct_mask_range_hashing<long int>, 
hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;


typedef unsigned long  ull;

int gen_base(const int before, const int after) {
    auto seed = std::chrono::high_resolution_clock::now().time_since_epoch().count();
    std::mt19937 mt_rand(seed);
    int base = std::uniform_int_distribution<int>(before+1, after)(mt_rand);
    return base % 2 == 0 ? base-1 : base;
}
 
struct PolyHash {
    static const long int mod = (int)1e9+123; 
    static std::vector<long int> pow1;        
    static std::vector<ull> pow2;        
    static long int base;                     
 
    static inline long int diff(long int a,long int b) { 
        return (a -= b) < 0 ? a + mod : a;
    }
 
    std::vector<long int> pref1; 
    std::vector<ull> pref2; 
 
    PolyHash(const std::string& s): pref1(s.size()+1u, 0), pref2(s.size()+1u, 0){
        assert(base < mod);
        const long int n = s.size();
        while ((long int)pow1.size() <= n) {
            pow1.push_back(1LL * pow1.back() * base % mod);
            pow2.push_back(pow2.back() * base);
        }
        for (long int i = 0; i < n; ++i) { 
            assert(base > s[i]);
            pref1[i+1] = (pref1[i] + 1LL * s[i] * pow1[i]) % mod;
            pref2[i+1] = pref2[i] + s[i] * pow2[i];
        }
    }
 
    inline std::pair<long int, ull> operator()(const long int pos, const long int len, const long int mxPow = 0) const {
        long int hash1 = pref1[pos+len] - pref1[pos];
        ull hash2 = pref2[pos+len] - pref2[pos];
        if (hash1 < 0) hash1 += mod;
        if (mxPow != 0) {
            hash1 = 1LL * hash1 * pow1[mxPow-(pos+len-1)] % mod;
            hash2 *= pow2[mxPow-(pos+len-1)];
        }
        return std::make_pair(hash1, hash2);
    }
};

long int PolyHash::base((long int)1e9+7);    
std::vector<long int> PolyHash::pow1{1};
std::vector<ull> PolyHash::pow2{1};



int main(){
   IOS;
 //    #ifndef ONLINE_JUDGE
 //        freopen("in.txt",  "r",  stdin);
 //        freopen("out.txt", "w", stdout);
 //    #endif
   
   string s;
   cin>>s;

   const long int mxPow = s.size();
   PolyHash::base = gen_base(256, PolyHash::mod);

   PolyHash sHash(s);

   long int n;
   cin>>n;

   vector<PolyHash> hashes;
   vector<string> v;

   for(long int i = 0; i < n; i++){
      string a;
      cin>>a;
      v.push_back(a);
      PolyHash temp(a);
      hashes.push_back(temp);
   }

   long int l = 0, r = 0;
   long int start = 0, len = 0;


   while(r < s.size() && l <= r){
      bool done = true;

      for(long int i = 0; i < n; i++){
         if(v[i].size() > r - l + 1)
            continue;
         auto need = hashes[i](0,v[i].size(),mxPow);
         auto req = sHash(r - v[i].size() + 1, v[i].size(), mxPow);
         if(req == need){
            done = false;
            break;
         }
      }
      if(done){
         if(len < r - l + 1){
            len = r - l + 1;
            start = l;
         }
         r++;
      }
      else
         l++;

      if(l > r)
         r = l;

   }

   cout<<len<<" "<<start;
   return 0;
}