#define _USE_MATH_DEFINES
#include <array>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int64, int64> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;
const ii N {3e5 + 10, 3e5 + 11};

int64 power_mod(int64 a, int n) {
  int64 ret = 1;
  for (; n; n >>= 1) {
    if (n & 1) ret = ret * a % MOD;
    a = a * a % MOD;
  }
  return ret;
}
ii invN = {power_mod(N.first, MOD - 2), power_mod(N.second, MOD - 2)};

int64 solve(const vector<int>& a, int L, int R) {
  if (R - L <= 1) return 0;
  int64 ret = 0;
  int mid = (L + R) / 2;
  ret += solve(a, L, mid);
  ret += solve(a, mid, R);
  vector<int> A;
  map<ii, int> cnt;
  ii H = {0, 0};
  for (int i = mid; i < R; ++i) {
    if (A.size() && A.back() == a[i]) {
      H.first = (H.first + MOD - A.back()) % MOD;
      H.second = (H.second + MOD - A.back()) % MOD;
      H.first = H.first * invN.first % MOD;
      H.second = H.second * invN.second % MOD;
      A.pop_back();
    } else {
      A.push_back(a[i]);
      H.first = (H.first * N.first + a[i]) % MOD;
      H.second = (H.second * N.second + a[i]) % MOD;
    }
    cnt[H]++;
    // trace(i, H);
  }
  A.clear();
  H = {0, 0};
  for (int i = mid - 1; i >= L; --i) {
    if (A.size() && A.back() == a[i]) {
      H.first = (H.first + MOD - A.back()) % MOD;
      H.second = (H.second + MOD - A.back()) % MOD;
      H.first = H.first * invN.first % MOD;
      H.second = H.second * invN.second % MOD;
      A.pop_back();
    } else {
      A.push_back(a[i]);
      H.first = (H.first * N.first + a[i]) % MOD;
      H.second = (H.second * N.second + a[i]) % MOD;
    }
    // trace(i, H);
    ret += cnt[H];
  }
  // trace(L, R, ret);
  return ret;
}

int main() {
  int cas;
  scanf("%d", &cas);
  while (cas--) {
    int n;
    scanf("%d", &n);
    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
      scanf("%d", &a[i]);
    }
    int64 ret = solve(a, 0, n);
    printf("%lld\n", ret);
  }
  return 0;
}
