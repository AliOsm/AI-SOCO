#include <bits/stdc++.h>

using namespace std;

#ifdef SG
	#include <debug.h>
#else
	#define show(...)
	#define debug(...)
	#define deepen(...)
	#define timer(...)
#endif

#define ARG4(_1,_2,_3,_4,...) _4

#define forn3(i,l,r) for (int i = int(l); i < int(r); ++i)
#define forn2(i,n) forn3 (i, 0, n)
#define forn(...) ARG4(__VA_ARGS__, forn3, forn2) (__VA_ARGS__)

#define ford3(i,l,r) for (int i = int(r) - 1; i >= int(l); --i)
#define ford2(i,n) ford3 (i, 0, n)
#define ford(...) ARG4(__VA_ARGS__, ford3, ford2) (__VA_ARGS__)

#define ve vector
#define pa pair
#define tu tuple
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) ((int)(a).size())

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef unsigned char uc;
typedef pa<int, int> pii;
typedef pa<int, ll> pil;
typedef pa<ll, int> pli;
typedef pa<ll, ll> pll;
typedef ve<int> vi;

const ld pi = 3.1415926535897932384626433832795l;

template<typename T> inline auto sqr (T x) -> decltype(x * x) {return x * x;}
template<typename T1, typename T2> inline bool umx (T1& a, T2 b) {if (a < b) {a = b; return 1;} return 0;}
template<typename T1, typename T2> inline bool umn (T1& a, T2 b) {if (b < a) {a = b; return 1;} return 0;}

const int N = 1000100;
int n, k;
int t[(1 << 21)];

int fnd(int i, int x, int y, int l, int r) {
	if (x > r || y < l)
		return 0;
	if (x >= l && y <= r)
		return t[i];
	return fnd(2 * i, x, (x + y) >> 1, l, r) + fnd(2 * i + 1, ((x + y) >> 1) + 1, y, l, r);
}

int sz;

void upd(int v) {
	v += sz;
	while (v > 0) {
		t[v]++;
		v /= 2;
	}
}

int main () {
	cout.setf(ios::showpoint | ios::fixed);
	cout.precision(20);
#ifdef SG
	freopen((problemname + ".in").c_str(), "r", stdin);
//	freopen((problemname + ".out").c_str(), "w", stdout);
#endif
	cin >> n >> k;
	umn(k, n - k);
	memset(t, 0, sizeof(t));
	int st = 0;
	ll ans = 1;
	sz = 1;
	while(sz < n) sz <<= 1;
	forn(i, n) {
		int to = (st + k) % n;
		int tek = 0;
		if (to < st) {
			ans--;
			if (i == n - 1)
				ans--;
			tek += fnd(1, 0, sz - 1, st, n - 1);
			tek += fnd(1, 0, sz - 1, 0, to); 
		} else {
			tek += fnd(1, 0, sz - 1, st, to);
		}
		ans += 2 * tek + 1;
		upd(st);	
		st = to;
		printf("%" PRId64 " ", ans); 
	}
	cout << endl;
	return 0;
}
