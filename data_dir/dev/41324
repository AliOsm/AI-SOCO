#include <bits/stdc++.h>
using namespace std;
#define REP(i, n) for (int i = 0; i < int(n); i++)
#define FOREACH(i, v) for (__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define SIZE(v) ((int)(v).size())
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define ll long long
#define pii pair<int, int>
#define pff pair<double, double>

ll x[2], y[2];
bool allx[100100], ally[100100], all[100100], possible = true;
ll rx[100100], ry[100100], vx[100100], vy[100100];

ll gcd(ll a, ll b) {
	if(b == 0) return a;
	else return gcd(b, a%b);
}

struct rational {
	ll n, d;
	rational() {
		n = 0;
		d = 1;
	}
	void reducir() {
		ll g = gcd(n, d);
		n /= g;
		d /= g;
	}
	rational(ll n, ll d) {
		if(d < 0) {
			n *= -1ll;
			d *= -1ll;	
		}
		
		this->n = n;
		this->d = d;
		
		//reducir();
	}
};


bool operator<(rational a, rational b) {
	return a.n*b.d < b.n*a.d;
}
bool operator<=(rational a, rational b) {
	return a.n*b.d <= b.n*a.d;
}

bool operator==(rational a, rational b) {
	return a.n*b.d == b.n*a.d;
}


rational Min(rational a, rational b) {
	return a.n*b.d < b.n*a.d ? a : b;
}


rational Max(rational a, rational b) {
	return a.n*b.d > b.n*a.d ? a : b;
}


pair<rational, rational> tx(int i) {
	if(vx[i] == 0) {
		if(x[0] < rx[i] && rx[i] < x[1]) allx[i] = true;
		else allx[i] = false;
		return mp(rational(), rational());
	}
	else {
		rational t1 = rational((x[0] - rx[i]), vx[i]);
		rational t2 = rational((x[1] - rx[i]), vx[i]);
		return mp(Min(t1, t2), Max(t1, t2));
	}
}

pair<rational, rational> ty(int i) {
	if(vy[i] == 0) {
		if(y[0] < ry[i] && ry[i] < y[1]) ally[i] = true;
		else ally[i] = false;
		return mp(rational(), rational());
	}
	else {
		rational t1 = rational((y[0] - ry[i]), vy[i]);
		rational t2 = rational((y[1] - ry[i]), vy[i]);
		return mp(Min(t1, t2), Max(t1, t2));
	}
}


pair<rational, rational> t_aux(int i) {
	pair<rational, rational> t1 = tx(i), t2 = ty(i);
	if(vx[i] == 0 && vy[i] == 0) {
		if(allx[i] && ally[i]) all[i] = true;
		else {
			all[i] = false;
			possible = false;
		}
	}
	else {
		if(vx[i] == 0) {
			if(allx[i]) return t2;
			else possible = false;
		}
		else if(vy[i] == 0){
			if(ally[i]) return t1;
			else possible = false;
		}
		else {
			if(t1.nd < t2.st || t2.nd < t1.st) {
				possible = false;
				//printf("%lld %lld %lld %lld\n", t1.st.n, t1.st.d, t2.nd.n, t2.nd.d);
			}
			else {
				return mp(Max(t1.st, t2.st), Min(t1.nd, t2.nd));
			}
		}
	}
	return mp(rational(), rational());
}

int main() {
	int n;
	scanf("%d", &n);
	REP(i, 2)
		scanf("%lld %lld", &x[i], &y[i]);
	
	if(x[0] > x[1]) swap(x[0], x[1]);
	if(y[0] > y[1]) swap(y[0], y[1]);
	
	REP(i, n) {
		scanf("%lld %lld %lld %lld", &rx[i], &ry[i], &vx[i], &vy[i]);
	}
	
	pair<rational, rational> ans;
	bool q = false;
	REP(i, n) {
		pair<rational, rational> aux = t_aux(i);
		if(!possible) {
			printf("-1\n");
			return 0;
		}
		else {
			if(vx[i] == 0 && vy[i] == 0) continue;
			else {
				if(!q) {
					ans = aux;
					q = true;
				}
				else {
					if(ans.nd < aux.st || aux.nd < aux.st) {
						printf("-1\n");
						return 0;
					}
					else {
						ans.st = Max(ans.st, aux.st);
						ans.nd = Min(ans.nd, aux.nd);
					}
				}
			}
		}
	}
	
	//printf("%f %f\n", (double)ans.st.n/(double)ans.st.d, (double)ans.nd.n/(double)ans.nd.d);
	
	if(!q) printf("%.8f\n", 0.0);
	else if(ans.nd <= rational() || ans.st == ans.nd) printf("-1\n");
	else {
		rational ANS = Max(rational(), ans.st);
		printf("%.8f\n", (double)ANS.n/(double)ANS.d);
	}
}