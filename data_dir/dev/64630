#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <queue>
#include <cmath>
#include <iomanip>
#include <cstdio>
#include <cstring>

using namespace std;

int n, m, W, w[1111], b[1111];
int Next[211111];
int Pr[1111];
int x[211111];
int y[211111];
int u[1111];
int ndp[1111];
int dp[1111];
vector<int> Li;
int Sm, Sm2;
void dfs(int v) {
    u[v] = 1;
    Li.push_back(v);
    Sm += w[v];
    Sm2 += b[v];
    for (int i = Pr[v]; i; i = Next[i]) {
        if (u[y[i]] == 0) {
            dfs(y[i]);
        }
    }
}

int main() {   
    //freopen("input.txt", "r", stdin);
   // freopen("output.txt", "w", stdout);
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    
    cin >> n >> m >> W;
    for (int i = 1; i <= n; i++) {
        cin >> w[i];
    }
    for (int i = 1; i <= n; i++) {
        cin >> b[i];
    }

    for (int i = 1; i <= m; i++) {
        cin >> x[i] >> y[i];
        x[i + m] = y[i];
        y[i + m] = x[i];
    }
    for (int i = 1; i <= m + m; i++) {
        Next[i] = Pr[x[i]];
        Pr[x[i]] = i;
    }
    for (int j = 0; j <= W; j++) {
        dp[j] = 0;
    }
    for (int i = 1; i <= n; i++) {
        if (u[i] == 0) {
            Li.clear();
            Sm = 0;
            Sm2 = 0;
            dfs(i);
            for (int j = 0; j <= W; j++) {
                ndp[j] = dp[j];
            }
            for (int j = 0; j <= W - Sm; j++) {
                ndp[j + Sm] = max(ndp[j + Sm], dp[j] + Sm2);
            }
            for (int p = 0; p < Li.size(); p++) {
                for (int j = 0; j <= W - w[Li[p]]; j++) {
                    ndp[j + w[Li[p]]] = max(ndp[j + w[Li[p]]], dp[j] + b[Li[p]]);
                }
            }
            for (int j = 0; j <= W; j++) {
                dp[j] = ndp[j];
            }
        }
    }
    cout << dp[W] << endl;
    return 0;
}
