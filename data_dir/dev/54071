#include "bits/stdc++.h"
//#include "ext/pb_ds/tree_policy.hpp"
//#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}

template<int maxn>
struct dsu{
    int f[maxn],cost[maxn],sum[maxn],cnt[maxn];
    dsu(){
        init();
    }
    void init(){
        REP(i,0,maxn)f[i] = i,sum[i] = 1,cnt[i]=1;
    }
    int fa(int c){
        if(c==f[c])return c;
        return f[c]=fa(f[c]);
    }
    void merge(int a,int b){
        if(fa(a)==fa(b))return;
        a = fa(a);b = fa(b);
        sum[b]+=sum[a];
        if(cost[a]<cost[b]){
            cost[b] = cost[a];
            cnt[b] = cnt[a];
        }else if(cost[a]==cost[b]){
            cnt[b]+=cnt[a];
        }
        f[a]=b;
    }
    bool same(int a,int b){
        return fa(a) == fa(b);
    }
};
dsu<100010>d;
vector<int>edge[100010];
int n,m;



const int maxn = 100010;
bool ins[maxn];
stack<int>s;
int dfn[maxn],low[maxn];
int cnt = 1;
void dfs(int cur){
    dfn[cur] = low[cur] = cnt++;
    s.push(cur);
    ins[cur] = 1;
    for(auto to:edge[cur]){
        if(!dfn[to]){
            dfs(to);
            low[cur] = min(low[cur],low[to]);
        }else if(ins[to]){
            low[cur] = min(low[cur],low[to]);
        }
    }
    if(low[cur]==dfn[cur]){
        while(s.top()!=cur){
            int c = s.top();
            s.pop();
            ins[c] = 0;
            d.merge(c, cur);
        }
        ins[cur] = 0;s.pop();
    }
}



ll fast(ll a,ll b,ll mod){
    ll ans = 1;
    while(b){
        if(b&1){
            b--;
            ans = ans * a % mod;
        }else{
            a = a * a % mod;
            b/=2;
        }
    }
    return ans;
}


int main(){
    cin>>n;
    REP(i,1,n+1)in(d.cost[i]);
    cin>>m;
    REP(i,0,m){
        int u,v;in(u);in(v);edge[u].PB(v);
    }
    REP(i,1,n+1){
        if(!dfn[i])dfs(i);
    }
    ll cost = 0;
    REP(i,1,n+1){
        if(d.fa(i)==i)cost+=d.cost[i];
    }
    cout<<cost<<' ';
    ll way = 1;
    REP(i,1,n+1){
        if(d.fa(i)==i){
            way*=d.cnt[i];
            way%=mod;
        }
    }
    cout<<way;
    return 0;
}
