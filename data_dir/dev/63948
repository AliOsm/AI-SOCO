#include <bits/stdc++.h>
using namespace std;

int n, m;
int in[100055], d[100055];
int a[100055], pos[100055];
vector<int> g[100055];

void dfs(int id, int depth) {
	d[id] = depth;

	for (auto u : g[id]) {
		dfs(u, depth + 1);
	}
}
void rdfs(int id, int an, int low) {
	if (pos[id] != -1 && low > pos[id]) low = pos[id], an = id;


	if (a[id] != an) {
		puts("-1");
		exit(0);
	}

	for (auto u : g[id]) rdfs(u, an, low);
}
bool compare(int a, int b) {
	return d[a] > d[b];
}
int main() {
	scanf("%d %d", &n, &m);

	int x, y;

	while (m--) {
		scanf("%d %d", &x, &y);
		x--, y--;

		in[y]++;
		g[x].push_back(y);
	}

	for (int i = 0; i < n; i++) {
		if (in[i] > 0) continue;
		dfs(i, 0);
	}

	vector<int> l;

	for (int i = 0; i < n; i++) {
		scanf("%d", &a[i]);
		a[i]--;
		l.push_back(a[i]);
	}

	sort(l.begin(), l.end());
	l.erase(unique(l.begin(), l.end()), l.end());
	sort(l.begin(), l.end(), compare);

	memset(pos, -1, sizeof(pos));

	for (int i = 0; i < (int)l.size(); i++) pos[l[i]] = i;

	for (int i = 0; i < n; i++) {
		if (in[i] > 0) continue;
		rdfs(i, -1, INT_MAX);
	}

	printf("%d\n", (int)l.size());

	for (auto u : l) printf("%d\n", u + 1);

	return 0;
}
