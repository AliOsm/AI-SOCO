#include <bits/stdc++.h>
using namespace std;

#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define FORd(i, a, b) for (int i = (a) - 1; i >= (b); i--)
#define FORall(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define sz(a) int((a).size())
#define present(t, x) (t.find(x) != t.end())
#define all(a) (a).begin(), (a).end()
#define uni(a) (a).erase(unique(all(a)), (a).end())
#define pb push_back
#define pf push_front
#define mp make_pair
#define fi first
#define se second
#define prec(n) fixed<<setprecision(n)
#define bit(n, i) (((n) >> (i)) & 1)
#define bitcount(n) __builtin_popcountll(n)
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef vector<pi> vii;
const int MOD = (int) 1e9 + 7;
const int FFTMOD = 1007681537;
const int INF = (int) 1e9;
const ll LINF = (ll) 1e18;
const ld PI = acos((ld) -1);
const ld EPS = 1e-6;
inline ll gcd(ll a, ll b) {ll r; while (b) {r = a % b; a = b; b = r;} return a;}
inline ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}
inline ll fpow(ll n, ll k, int p = MOD) {ll r = 1; for (; k; k >>= 1) {if (k & 1) r = r * n % p; n = n * n % p;} return r;}
template<class T> inline int chkmin(T& a, const T& val) {return val < a ? a = val, 1 : 0;}
template<class T> inline int chkmax(T& a, const T& val) {return a < val ? a = val, 1 : 0;}
inline ll isqrt(ll k) {ll r = sqrt(k) + 1; while (r * r > k) r--; return r;}
inline ll icbrt(ll k) {ll r = cbrt(k) + 1; while (r * r * r > k) r--; return r;}
inline void addmod(int& a, int val, int p = MOD) {if ((a = (a + val)) >= p) a -= p;}
inline void submod(int& a, int val, int p = MOD) {if ((a = (a - val)) < 0) a += p;}
inline int mult(int a, int b, int p = MOD) {return (ll) a * b % p;}
inline int inv(int a, int p = MOD) {return fpow(a, p - 2, p);}
inline int sign(ld x) {return x < -EPS ? -1 : x > +EPS;}
inline int sign(ld x, ld y) {return sign(x - y);}
#define db(x) cerr << #x << " = " << (x) << " ";
#define endln cerr << "\n";

const int maxn = 5e5 + 5;
int n, m, q;
int u[maxn];
int v[maxn];
int w[maxn];

int dj[maxn];
int tms;
vector<pair<int, pair<int*, int> > > cache;

void init() {
    FOR(i, 0, n) dj[i] = i;
}
void add(int* u) {
    cache.pb(mp(tms++, mp(u, *u)));
}
void rollback(int pts) {
    while (sz(cache) && cache.back().fi >= pts) {
        *cache.back().se.fi = cache.back().se.se;
        cache.pop_back();
    }
}
int find(int u) {
    if (dj[u] == u) return dj[u];
    add(dj + u);
    return dj[u] = find(dj[u]);
}
void join(int u, int v) {
    int p = find(u);
    int q = find(v);
    if (rand() & 1) swap(p, q);
    if (p != q) {
        add(dj + p);
        dj[p] = q;
    }
}

void solve() {
    srand(time(NULL));
    cin >> n >> m;
    static vi gr[maxn];
    FOR(i, 0, m) {
        cin >> u[i] >> v[i] >> w[i], u[i]--, v[i]--;
        gr[w[i]].pb(i);
    }
    init();
    static vii que[maxn];
    cin >> q;
    FOR(i, 0, q) {
        int k; cin >> k;
        FOR(j, 0, k) {
            int x; cin >> x; x--;
            que[w[x]].pb(mp(i, x));
        }
    }
    static int f[maxn];
    FOR(i, 0, maxn) {
        int pts = tms, pv = -1;
        for (auto it : que[i]) {
            int iq = it.fi;
            int iw = it.se;
            if (iq != pv) {
                rollback(pts);
                pts = tms;
            }
            pv = iq;
            if (find(u[iw]) == find(v[iw])) {
                f[iq] = 1;
            }
            else {
                join(u[iw], v[iw]);
            }
        }
        for (int iw : gr[i]) {
            join(u[iw], v[iw]);
        }
    }
    FOR(i, 0, q) {
        if (!f[i]) {
            cout << "YES\n";
        }
        else {
            cout << "NO\n";
        }
    }
}

int main(int argc, char* argv[]) {
    ios_base::sync_with_stdio(0), cin.tie(0);
    if (argc > 1) {
        assert(freopen(argv[1], "r", stdin));
    }
    if (argc > 2) {
        assert(freopen(argv[2], "wb", stdout));
    }
    solve();
    cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";
    return 0;
}
