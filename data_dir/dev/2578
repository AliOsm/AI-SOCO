//let's do it
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 1000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 100001

struct st
{
	int l,r,id;
	double p;
}a[maxn];

int n,q,arr[maxn],table[maxn][25];
vector<int>v[maxn];
double dp[5005][5005];

bool way(st x,st y)
{
	if(x.l!=y.l)
	return x.l<y.l;
	if(x.r!=y.r)
	return x.r>y.r;
	return x.id<y.id;
}
void build()
{
	for(int i=1;i<=n;i++)
	table[i][0]=arr[i];
	for(int j=1;j<=20;j++)
	{
		for(int i=1;i<=n-(1<<j)+1;i++)
		table[i][j]=max(table[i][j-1],table[i+(1<<(j-1))][j-1]);
	}
}
inline int query(int l,int r)
{
	int len=r-l+1;
	int k=log2(len);
	return max(table[l][k],table[r+1-(1<<k)][k]);
}
void dfs(int cur,int par)
{
	int child=0;
	for(int i=0;i<v[cur].size();i++)
	{
		int x=v[cur][i];
		if(x==par)
		continue;
		child++;
		dfs(x,cur);
	}
	if(!child)
	{
		dp[cur][0]=1.0-a[cur].p;
	//	dp[cur][1]=a[cur].p;
		for(int i=1;i<=q;i++)
		dp[cur][i]=1.0;
		return ;
	}
	int maxi=query(a[cur].l,a[cur].r);
	for(int j=0;j<=q;j++)
	{
		double temp1=1.0;
		double temp2=1.0;
		for(int i=0;i<v[cur].size();i++)
		{
			int x=v[cur][i];
			if(x==par)
			continue;
			int maxx=query(a[x].l,a[x].r);
			int temp=maxi-maxx+j;
			if(temp-1>=0 && temp-1<=q)
			temp1=temp1*dp[x][temp-1];
			else if(temp1-1<0)
			temp1=0;
			if(temp>=0 && temp<=q)
			temp2=temp2*dp[x][temp];
		}
		if(j==0)
		temp1=0;
		dp[cur][j]=a[cur].p*temp1+(1.0-a[cur].p)*temp2;
	}
}
int main()
{
	boost1;boost2;
	cout<<fixed<<setprecision(10);
	int i,j;
	double ans=0.0;
	cin>>n>>q;
	for(i=1;i<=n;i++)
	cin>>arr[i];
	build();
	a[1].l=1;a[1].r=n;a[1].p=0.0;a[1].id=1;
	for(i=1;i<=q;i++)
	{
		cin>>a[i+1].l>>a[i+1].r>>a[i+1].p;
		a[i+1].id=i+1;
	}
	q++;
	sort(a+1,a+q+1,way);
	//for(i=1;i<=q;i++)
	//cout<<a[i].l<<" "<<a[i].r<<endl;
	for(i=1;i<=q;i++)
	{
		for(j=i-1;j>=1;j--)
		{
			if(a[j].r>=a[i].r)
			{
				v[i].pb(j);
				v[j].pb(i);
			//	cout<<i<<" "<<j<<endl;
				break;
			}
		}
	}
	dfs(1,-1);
	/*for(i=1;i<=q;i++)
	{
		for(j=0;j<=q;j++)
		cout<<dp[i][j]<<" ";
		cout<<endl;
	}*/
	ans=dp[1][0]*query(a[1].l,a[1].r);
	for(i=1;i<=q;i++)
	ans+=(dp[1][i]-dp[1][i-1])*(query(a[1].l,a[1].r)+i);
	cout<<ans;
	return 0;
}
