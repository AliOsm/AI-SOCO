//besmellah
#include <bits/stdc++.h>
using namespace std;

#define int long long
typedef pair <int, int> pii;

const int maxn = 1002, inf = 2e18, dx[4] = {0, 0, 1, -1}, dy[4] = {1, -1, 0, 0};
int dist[maxn][maxn];
bitset <maxn> mark[maxn];
string S[maxn];

int32_t main() {
	int n, m, q;
	cin >> n >> m >> q;
	for (int i = 0; i < n; i++)
		cin >> S[i];
	queue <pii> Q;
	for (int i = 0; i < n; i++) {
		fill(dist[i], dist[i] + m, inf);
		for (int j = 0; j < m; j++) {
			for (int t = 0; t < 4; t++) {
				int x = i + dx[t];
				int y = j + dy[t];
				if (~x && ~y && x != n && y != m && S[i][j] == S[x][y]) {
					Q.push(pii(i, j));
					dist[i][j] = 0;
					mark[i][j] = 1;
					break;
				}
			}
		}
	}
	while (Q.size()) {
		pii P = Q.front();
		Q.pop();
		int x = P.first, y = P.second;
		for (int t = 0; t < 4; t++) {
			int nx = x + dx[t];
			int ny = y + dy[t];
			if (~nx && ~ny && nx != n && ny != m && !mark[nx][ny]) {
				mark[nx][ny] = 1;
				Q.push(pii(nx, ny));
				dist[nx][ny] = dist[x][y] + 1;
			}
		}
	}
	for (int i = 0; i < q; i++) {
		int x, y, t;
		cin >> x >> y >> t;
		x--;
		y--;
		if (t <= dist[x][y])
			cout << S[x][y] << '\n';
		else
			cout << ((t - dist[x][y] + S[x][y] - '0') % 2 + 2) % 2 << '\n';
	}
}
