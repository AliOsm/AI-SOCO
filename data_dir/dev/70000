#pragma comment(linker, "/STACK:444444444")

#include <cstdio>
#include <cmath>
#include <string>
#include <algorithm>
#include <iostream>
#include <numeric>
#include <vector>
#include <map>
#include <set>
#include <functional>
#include <queue>
#include <memory.h>
#include <time.h>

using namespace std;

typedef long long LL;

const int N = 1 << 22;

LL X[2 * N];
LL XP[2 * N];
LL Y[2 * N];
LL YP[2 * N];

void push(LL * Q, LL * P, int v, int L, int R)
{
	Q[v] += (R - L) * P[v];
	P[2 * v] += P[v];
	P[2 * v + 1] += P[v];
	P[v] = 0;
}

LL get(LL * Q, LL * P, int v, int tL, int tR, int L, int R)
{
	if (L >= R)
		return 0;
	if (tL == L && tR == R)
		return (R - L) * P[v] + Q[v];
	push(Q, P, v, tL, tR);
	int M = (tL + tR) / 2;
	LL res =	get(Q, P, 2 * v, tL, M, L, min(R, M)) + 
				get(Q, P, 2 * v + 1, M, tR, max(L, M), R);
	return res;
}

void add(LL * Q, LL * P, int v, int tL, int tR, int L, int R, LL val)
{
	if (L >= R)
		return;
	if (tL == L && tR == R)
	{
		P[v] += val;
		return;
	}
	push(Q, P, v, tL, tR);
	Q[v] += (R - L) * val;
	int M = (tL + tR) / 2;
	add(Q, P, 2 * v, tL, M, L, min(R, M), val);
	add(Q, P, 2 * v + 1, M, tR, max(L, M), R, val);
}

int n, m, w;

int main()
{
	scanf("%d%d%d", &n, &m, &w);

	while (w --> 0)
	{
		int t;
		scanf("%d", &t);

		if (t == 0)
		{
			int x1, y1, x2, y2, v;
			scanf("%d%d%d%d%d", &x1, &y1, &x2, &y2, &v);
			x1--, y1--;
			add(X, XP, 1, 0, N, x1, x2, (LL)v * (y2 - y1));
			add(Y, YP, 1, 0, N, y1, y2, (LL)v * (x2 - x1));
		}
		else
		{
			int x1, y1, x2, y2;
			scanf("%d%d%d%d", &x1, &y1, &x2, &y2);
			x1--, y1--;
			LL res = get(X, XP, 1, 0, N, x1, x2) - get(Y, YP, 1, 0, N, 0, y1) - get(Y, YP, 1, 0, N, y2, N);
			printf("%I64d\n", res);
		}
	}
	return 0;
}