#pragma comment(linker, "/STACK:256000000")
 
#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <time.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <random>
#include <unordered_map>
#include <unordered_set>
#include <complex>
using namespace std;
 
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef complex < double > base;
const int INF = (int)(1e9);
const int64 LINF = (int64)(1e18);
const double EPS = 1e-13;
#define sq(x) ((x)*(x))
#define FAIL() ((*(int*)(0))++)
const int MAXN = 400100;

int n, m;
string a, b;

unordered_map <char, int> gr[MAXN]; 

vector < vector < int > > lev;

void dfs(int u, int l = 0)
{
//	cerr << u << ' ' << l << endl;
	lev[l].push_back(u);
	for(auto it = gr[u].begin(); it != gr[u].end(); ++it)
	{
		int to = (*it).second;
		dfs(to, l + 1);
	}
}

pair <int, char> qq[MAXN];
int en = 0;

int unit(int u, int v)
{
	int ans = 1;
	for(char i = 'a'; i <= 'z'; ++i)
	{
		if (gr[u].find(i) != gr[u].end() && gr[v].find(i) != gr[v].end())
		{
			ans += unit(gr[u][i], gr[v][i]);
		}
		if (gr[u].find(i) == gr[u].end() && gr[v].find(i) != gr[v].end())
		{
			gr[u][i] = gr[v][i];
			qq[en++] = pii(u, i);
		}

	}
	return ans;
}

void ret()
{
	for(int i = 0; i < en; ++i)
	{
		gr[qq[i].first].erase(qq[i].second);
	}
	en = 0;
}

void solve()
{
	cin >> n;
	for(int i = 0; i < n - 1; ++i)
	{
		int u, v;
		char c;
		cin >> u >> v >> c;
		u--, v--;
		gr[u][c] = v;
	}
	lev.resize(n);
	
	dfs(0);
	int ans = n, p = 0;
	for(int i = 0; i < n; ++i)
	{
		int tans = n;
		for(int j = 0; j < lev[i].size(); ++j)
		{
			int u = lev[i][j];
			
			if (gr[u].size() >= 1)
			{
				tans -= 1;	
				int b = (*gr[u].begin()).second;
				for(auto it = ++gr[u].begin(); it != gr[u].end(); ++it)
				{
					tans -= unit(b, (*it).second);	 
				}
			}
		}
		if (ans > tans)
		{
			ans = tans;
			p = i;
		}
		//cerr << tans << endl;
		ret();
	}
	cout << ans << endl;
	cout << p + 1 << endl;
}

int main()
{
	cin.tie(0); ios_base::sync_with_stdio(false);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
#endif
    srand(88);
	//cerr << g(30);

	   solve();
		//cout << endl;
	
    return 0;
}