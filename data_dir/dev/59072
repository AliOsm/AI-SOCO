///Bismillahir Rahmanir Rahim
#include<bits/stdc++.h>
#define int long long
using namespace std;
int a[1009][1009],n;
int dp[1009][1009][7];
int possible=0;
int zx=-1,zy=-1;
const int inf=1e18;
string s[8];
void solve_for_zero()
{
    int x=0,y=0;
    while(x<zx)
    {
        x++;
        cout<<"D";
    }
    while(y<n-1)
    {
        y++;
        cout<<"R";
    }
    while(x<n-1)
    {
        x++;
        cout<<"D";
    }
}
int go(int i,int j,int d)
{
    if(dp[i][j][d]!=(-1))return dp[i][j][d];
    int val=a[i][j],cnt=0;
    while(val!=0 && val%d==0)
    {
        val=val/d;
        cnt++;
    }
   if(i==(n-1) && j==(n-1))
   {
       return dp[i][j][d]=cnt;
   }
   int op1=inf,op2=inf;
   if(i+1<n)op1=go(i+1,j,d);
   if(j+1<n)op2=go(i,j+1,d);
   return dp[i][j][d]=cnt+min(op1,op2);
}
void path(int i,int j,int d)
{
    if(i==n-1 && j==n-1)
    {
        possible=1;
        return;
    }
     int val=a[i][j],cnt=0;
    while(val!=0 && val%d==0)
    {
        val=val/d;
        cnt++;
    }
    if(i+1<n && dp[i][j][d]==cnt+dp[i+1][j][d])
    {
        path(i+1,j,d);
    }
    if(possible==1)
    {
        s[d]+='D';
        return ;
    }
    if(j+1<n && dp[i][j][d]==cnt+dp[i][j+1][d])
    {
        path(i,j+1,d);
    }
    if(possible)
    {
         s[d]+='R';
    }
    return;
}
main()
{
   memset(dp,-1,sizeof(dp));
    cin>>n;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            scanf("%lld",&a[i][j]);
            if(a[i][j]==0)
            {
                zx=i;
                zy=j;
            }
        }
    }
    int a=go(0,0,2);
    int b=go(0,0,5);
    if(zx!=(-1) && min(a,b)!=0)
    {   cout<<"1"<<endl;
        solve_for_zero();
        return 0;
    }
     if(a<=b)
     {
        cout<<a<<endl;
        path(0,0,2);
        reverse(s[2].begin(),s[2].end());
        cout<<s[2]<<endl;
     }
     else
     {
         cout<<b<<endl;
         path(0,0,5);
         reverse(s[5].begin(),s[5].end());
         cout<<s[5]<<endl;

     }
     return 0;
}
