#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     std::begin(_obj), std::end(_obj)
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define ceilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define has(_obj, _val)               ((_obj).find(_val) != (_obj).end())
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifdef SHJ_LOCAL
    #define debug(_x)                 std::cerr << (#_x) << " = " << (_x) << '\n' << std::flush;
#else
    #define debug(_x)                 ;
#endif
#define endl "\n"
template<typename Tp>
inline void outarr(Tp _begin, Tp _end, const char* _delim = " ") {
    for (Tp current = _begin; current != _end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = long long;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
pii cnt[200000];
priority_queue<int> pq;

inline void Clear(int n) {
    pq = priority_queue<int>();
    loop(n) {
        cnt[i] = {0, 0};
    }
}

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    int q;
    cin >> q;
    while (q--) {
        int n;
        cin >> n;
        Clear(n);
        loop(n) {
            int x;
            cin >> x;
            ++cnt[x - 1].first;
            int can = 1;
#ifdef TASK_G
            cin >> can;
#endif
            cnt[x - 1].second += can;
        }
        sort(cnt, cnt + n, greater<>());
        n = distance(cnt, find(cnt, cnt + n, make_pair(0, 0)));
        ll ans1 = 0;
        ll ans2 = 0;
        for (int i = 0, cur = cnt[0].first; cur > 0; --cur) {
            while (i < n && cnt[i].first == cur) {
                pq.push(cnt[i].second);
                ++i;
            }
            if (!empty(pq)) {
                ans1 += cur;
                ans2 += min(cur, pq.top());
                pq.pop();
            }
        }
        cout << ans1;
#ifdef TASK_G
        cout << ' ' << ans2;
#endif
        cout << endl;
    }

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}