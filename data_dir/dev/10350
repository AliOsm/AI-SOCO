#include <bits/stdc++.h>

using namespace std;

int main() {
    std::ios::sync_with_stdio(false); 
    cin.tie(nullptr);
    
    int n, m, k;
    cin >> n >> m >> k;
    vector<vector<int>> a(n, vector<int>(m));
    int cnt1 = 0;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            cin >> a[i][j];
            cnt1 += a[i][j];
        }
    }
    int res = min(n * m - cnt1, cnt1);
    for (int r = 0; r < n; ++r) {
        vector<pair<int, int>> dp(n + 1);
        for (int i = 0; i < n; ++i) {
            int cost1 = 0, cost2 = 0;
            for (int j = 0; j < m; ++j) {
                cost1 += (a[i][j] != a[r][j]);
                cost2 += (a[i][j] == a[r][j]);
            }
            dp[i + 1].first = min(dp[i].first, dp[i].second) + cost1;
            dp[i + 1].second = min(dp[i].first, dp[i].second) + cost2;
        }
        res = min(res, min(dp[n].first, dp[n].second));
    }
    for (int c = 0; c < m; ++c) {
        vector<pair<int, int>> dp(m + 1);
        for (int j = 0; j < m; ++j) {
            int cost1 = 0, cost2 = 0;
            for (int i = 0; i < n; ++i) {
                cost1 += (a[i][j] != a[i][c]);
                cost2 += (a[i][j] == a[i][c]);
            }
            dp[j + 1].first = min(dp[j].first, dp[j].second) + cost1;
            dp[j + 1].second = min(dp[j].first, dp[j].second) + cost2;
        }
        res = min(res, min(dp[m].first, dp[m].second));
    }
    cout << (res <= k ? res : -1) << "\n";


    return 0;
}