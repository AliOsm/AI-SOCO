#include <bits/stdc++.h>

using namespace std;

const int N = 1234567;

int n;
vector<int> graph[N];
int init[N], goal[N];
int flip[N];

int dfs(int v = 0, int pv = 0, int depth = 0, bool fo = false, bool fe = false) {
  int ret = 0;
  if (depth % 2 == 0) init[v] ^= fe;
  else init[v] ^= fo;
  if (init[v] != goal[v]) {
    ret++;
    flip[v] = true;
    init[v] ^= 1;
    if (depth % 2 == 0) fe = !fe;
    else fo = !fo;
  }
  for (int to : graph[v]) {
    if (to == pv) continue;
    ret += dfs(to, v, depth + 1, fo, fe);
  }
  return ret;
}

int main() {
  scanf("%d", &n);
  for (int i = 0; i + 1 < n; i++) {
    int a, b; scanf("%d %d", &a, &b); a--, b--;
    graph[a].push_back(b);
    graph[b].push_back(a);
  }
  for (int i = 0; i < n; i++) scanf("%d", init + i);
  for (int i = 0; i < n; i++) scanf("%d", goal + i);
  int ans = dfs();
  printf("%d\n", ans);
  for (int i = 0; i < n; i++) {
    if (flip[i]) printf("%d\n", i + 1);
  }
  return 0;
}