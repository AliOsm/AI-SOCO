#include <iostream>
#include <unordered_map>
#include <vector>
#include <stdio.h>

using namespace std;

long long n , k ;
long long X  ;

long long ctr[200001][36]  ;
long long sum[200001][36] ;
long long sum2[200001][36] ;
unordered_map < long long , vector < long long  > > M ;
unordered_map < long long , vector < long long > > ::iterator it ;

int main()
{
    scanf("%I64d %I64d",&n,&k);
    if ( k == 1 )
    {
        long long x , ans = 0 ;
        unordered_map < long long , long long > m ;
        unordered_map < long long , long long > :: iterator it ;
        for ( long long i = 0 ; i < n ; i++ )
        {
            scanf("%I64d",&x);
            m[x]++;
        }
        for ( it = m.begin() ; it != m.end() ; it++ )
        {
            if ( it->second < 3 ) continue ;
            ans += (it->second * ( it->second-1) * ( it->second -2 )) / 6 ;
        }
        printf("%I64d",ans);
        return 0;
    }
    long long Ctr ;
    long long cnt0 = 0 ;
    for ( long long i = 0 ; i < n ; i++ )
    {
        scanf("%I64d",&X);
        Ctr = 0 ;
        if ( !X )
        {
            cnt0++;
            continue;
        }
        while ( X % k == 0 )
        {
            X /= k ;
            Ctr++ ;
        }
        M[X].push_back(Ctr) ;
    }
    long long ans = 0 , tmp ;
    long long i , j ;
    for ( it = M.begin() ; it != M.end() ; it++ )
    {
        for ( i = 0 ; i <= it->second.size() ; i++ )
            for ( j = 0 ; j < 36 ; j++ )
                ctr[i][j] = 0 ;
        for ( i =  it->second.size() - 1 ; i >= 0 ; i-- )
        {
            for ( j = 0 ; j < 36 ; j++ )
                ctr[i][j] = ctr[i+1][j] ;
            ctr[i][it->second[i]]++ ;
        }
        for ( i = 0 ; i <= it->second.size() ; i++ )
            for ( j = 0 ; j < 36 ; j++ )
                sum[i][j] = 0 ;

        for ( i = 0 ; i < it->second.size() ; i++ )
        {
            sum[i][it->second[i]] += ctr[i][it->second[i]+1] ;
        }
        for ( i = 0 ; i <= it->second.size() ; i++ )
            for ( j = 0 ; j < 36 ; j++ )
                sum2[i][j] = 0 ;

        for ( i = it->second.size()-1 ; i >= 0 ; i-- )
        {
            for (  j = 0 ; j < 36 ; j++ )
            {
                sum2[i][j] = sum2[i+1][j] ;
            }
            sum2[i][it->second[i]] += sum[i][it->second[i]] ;
        }
        for ( i = 0 ; i < it->second.size() ; i++ )
        {
            ans += sum2[i][it->second[i]+1] ;
        }
    }
    if ( cnt0 > 2 )
        ans += ( cnt0*(cnt0-1)*(cnt0-2)/6) ;
    printf("%I64d",ans);
    return 0;
}
