#include <bits/stdc++.h>
#define prev someone_else_0
#define last someone_else_1
#define next someone_else_2

using namespace std;

const int MaxN = 1e5 + 15;

vector <long long> cur;

int n, m;
vector <pair<int, long long> > v[MaxN];

long long h[MaxN];
bool used[MaxN];
int a[MaxN];
int b[MaxN];

long long c[MaxN];

void dfs(int x, long long y = 0)
{
    used[x] = true;
    h[x] = y;
    for(int i = 0; i < v[x].size(); ++i)
    {
        int to = v[x][i].first;
        if(!used[to])
            dfs(to, y ^ v[x][i].second);
    }
}

int main()
{
//    freopen("input.txt", "r", stdin);
    ios_base :: sync_with_stdio(false);
    cin.tie(NULL);

    srand(time(NULL));

    cin >> n;
    cin >> m;
    for(int i = 0; i < m; ++i)
    {
        cin >> a[i] >> b[i] >> c[i];
        v[a[i]].push_back(make_pair(b[i], c[i]));
        v[b[i]].push_back(make_pair(a[i], c[i]));
    }

    dfs(1);

    for(int i = 0; i < m; ++i)
        cur.push_back(c[i] ^ h[a[i]] ^ h[b[i]]);

    long long ans = h[n];


    sort(cur.begin(), cur.end());
    cur.resize(unique(cur.begin(), cur.end()) - cur.begin());

    for(int bit = 61; bit >= 0 && !cur.empty(); --bit)
    {
        if(cur.back() & (1ll << bit))
        {
            for(int i = cur.size() - 2; i >= 0; --i)
                if(cur[i] & (1ll << bit))
                    cur[i] ^= cur.back();

            if(ans & (1ll << bit))
                ans ^= cur.back();

            cur.pop_back();
            sort(cur.begin(), cur.end());
            cur.resize(unique(cur.begin(), cur.end()) - cur.begin());
        }
    }

    cout << ans << '\n';

    return 0;
}
/**
4 4
2 5
3 3
1 4
2 2
0 3
1 1
*/
