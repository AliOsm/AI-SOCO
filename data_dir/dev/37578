#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair <int , int> pii;

const int N = 51 , mod = 1e9+7 , M = 2e4+10;

int dp[N][M] , seg[N][4 * M] , flag[N][4 * M] , ps[N][M] , a[N][M];

inline void relax(int id , int ind){
   int x = flag[id][ind];
   flag[id][ind] = 0;
   seg[id][2 * ind] += x;
   seg[id][2 * ind + 1] += x;
   flag[id][2 * ind] += x;
   flag[id][2 * ind + 1] += x;
}

void add(int s , int e , int ind , int id , int l , int r , int val){
   if(s >= r || e <= l)
      return;
   if(s >= l && e <= r){
      seg[id][ind] += val;
      flag[id][ind] += val;
      return;
   }
   relax(id , ind);
   int mid = (s + e) / 2;
   add(s , mid , 2 * ind , id , l , r , val);
   add(mid , e , 2 * ind + 1 , id , l , r , val);
   seg[id][ind] = max(seg[id][2 * ind] , seg[id][2 * ind + 1]);
}

int32_t main(){
   ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
   int n , m , k;
   cin >> n >> m >> k;
   for(int i = 0 ; i < n ; i++)
      for(int j = 0 ; j < m ; j++){
         cin >> a[i][j];
         ps[i][j] += a[i][j];
         ps[i][j + 1] += ps[i][j];
      }
   int ans = 0;
   for(int i = 0 ; i + k <= m ; i++){
      int rem1 = 0 , rem2 = 0;
      if(i)
         rem1 = ps[0][i - 1] , rem2 = ps[1][i - 1];
      dp[0][i] = ps[0][i + k - 1] - rem1 + ps[1][i + k - 1] - rem2;
      ans = max(ans , dp[0][i]);
      add(0 , m , 1 , 0 , i , i + 1 , dp[0][i]);
      //cout << 0 << " " << i << " " << dp[0][i] << endl;
   }
   for(int i = 1 ; i < n ; i++){
      for(int j = 0 ; j < k - 1 ; j++)
         add(0 , m , 1 , i - 1 , 0 , j + 1 , -a[i][j]);
      for(int j = 0 ; j + k <= m ; j++){
         add(0 , m , 1 , i - 1 , j , j + k , -a[i][j + k - 1]);
         int rem1 = 0 , rem2 = 0;
         if(j)
            rem1 = ps[i][j - 1] , rem2 = ps[i + 1][j - 1];
         dp[i][j] = seg[i - 1][1] + ps[i][j + k - 1] - rem1 + ps[i + 1][j + k - 1] - rem2;
         add(0 , m , 1 , i , j , j + 1 , dp[i][j]);
         add(0 , m , 1 , i - 1 , max(j - k + 1 , 0) , j + 1 , a[i][j]);
         ans = max(ans , dp[i][j]);
         //cout << i << " " << j << " " << seg[i - 1][1] << " " << dp[i][j] << endl;
      }
   }
   cout << ans;
   return 0;
}
