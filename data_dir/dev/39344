#include <bits/stdc++.h>
#define pb push_back
#define f first
#define s second
using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;

const int N = 1010;
int n;
int row[N], col[N];

int ask(int x, int y, int xx, int yy) {
	printf("? %d %d %d %d\n", x, y, xx, yy);
	fflush(stdout);
	int result;
	scanf("%d", &result);
	return result;
}

void finish(int x, int y, int xx, int yy) {
	printf("! %d %d %d %d\n", x, y, xx, yy);
	fflush(stdout);
	exit(0);
}

int main(){
    // ios::sync_with_stdio(0);
    // cin.tie(0); cout.tie(0);

    cin >> n;
    for (int i = 1; i <= n; i++) row[i] = ask(1, i, n, i);
    for (int i = 1; i <= n; i++) col[i] = ask(i, 1, i, n);

    int odd = 0;
	for (int i = 1; i <= n; i++) if (row[i] & 1) odd++;
	if (odd == 0) {
		// head and tail share a row
		int col1 = -1, col2 = -1;
		for (int i = 1; i <= n; i++) {
			if (col[i] & 1) {
				if (col1 == -1) col1 = i;
				else col2 = i;
			}
		}
		// head and tail lie in (col1, r), (col2, r) for some r
		// binary search for r
		int lo = 1, hi = n, r = n;
		while (lo <= hi) {
			int mid = (lo + hi) / 2;
			int x = ask(col1, 1, col1, mid);
			if (x & 1) {
				r = mid; hi = mid - 1;
			} else {
				lo = mid + 1;
			}
		}
		finish(col1, r, col2, r);
	} else {
		// head and tail are in different rows
		// case 1: they are in the same column (do the binary search above)
		// case 2: they are in different rows
		//		ask (c1, r1), (c2, r2), (c1, r2), (c2, r1) as points
		//		and then do casework
		odd = 0;
		for (int i = 1; i <= n; i++) if (col[i] & 1) odd++;
		if (odd == 0) {
			// head and tail are in different rows, same column
			int row1 = -1, row2 = -1;
			for (int i = 1; i <= n; i++) {
				if (row[i] & 1) {
					if (row1 == -1) row1 = i;
					else row2 = i;
				}
			}
			// head and tail lie in (c, row1), (c, row2) for some c
			// binary search for c
			int lo = 1, hi = n, c = n;
			while (lo <= hi) {
				int mid = (lo + hi) / 2;
				int x = ask(1, row1, mid, row1);
				if (x & 1) {
					c = mid; hi = mid - 1;
				} else {
					lo = mid + 1;
				}
			}
			finish(c, row1, c, row2);
		}
		int row1 = -1, row2 = -1;
		for (int i = 1; i <= n; i++) {
			if (row[i] & 1) {
				if (row1 == -1) row1 = i;
				else row2 = i;
			}
		}
		int col1 = -1, col2 = -1;
		for (int i = 1; i <= n; i++) {
			if (col[i] & 1) {
				if (col1 == -1) col1 = i;
				else col2 = i;
			}
		}

		int u = ask(col1, row1, col1, row1) & 1;
		int v = ask(col1, row2, col1, row2) & 1;
		int y = ask(col2, row1, col2, row1) & 1;
		int z = ask(col2, row2, col2, row2) & 1;

		if (u && z) finish(col1, row1, col2, row2);
		else finish(col1, row2, col2, row1);
	}
	
	return 0;	
}