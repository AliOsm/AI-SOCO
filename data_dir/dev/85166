#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
int n;
vector<int> a;
vector<vector<int>> t;
void build(int i, int l, int r)
{
	if (l == r)
		t[i].push_back(a[l]);
	else
	{
		int mid = (l + r) / 2;
		build(2 * i + 1, l, mid);
		build(2 * i + 2, mid + 1, r);
		t[i].resize(t[2 * i + 1].size() + t[2 * i + 2].size());
		merge(t[2 * i + 1].begin(), t[2 * i + 1].end(), t[2 * i + 2].begin(), t[2 * i + 2].end(), t[i].begin());
	}
}
int cntNotLess(int i, int l, int r, int lx, int rx, int val)
{
	if (l == lx && r == rx)
	{
		auto it = lower_bound(t[i].begin(), t[i].end(), val);
		return (int)(t[i].end() - it);
	}
	else
	{
		int mid = (l + r) / 2;
		int result = 0;
		if (lx <= mid)
			result += cntNotLess(2 * i + 1, l, mid, lx, min(rx, mid), val);
		if (rx > mid)
			result += cntNotLess(2 * i + 2, mid + 1, r, max(lx, mid + 1), rx, val);
		return result;
	}
}
int main()
{
	ios::sync_with_stdio(false);
	int n; cin >> n;
	a.resize(n);
	t.resize(4 * n + 5);
	for (int i = 0; i < n; i++)
		cin >> a[i];
	build(0, 0, n - 1);
	ll result = 0;
	for (int i = 0; i < n; i++)
	{
		int l = i + 1, r = min(n, a[i]) - 1;
		if (r < l)
			continue;
		result += cntNotLess(0, 0, n - 1, l, r, i + 1);
	}
	cout << result << endl;
}