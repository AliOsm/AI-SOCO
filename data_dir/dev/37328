#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair < ll , ll > pll;
int n, m, x, y, z, k;

vector < pair < int , int > > perdiagonal[5000];

pair < ll  , int > dp[2002][2002];

string str[2005];

vector < pair < pll , pll >  > forsort;
int koithekeaschi[2002][2002];

int main()
{

    cin >> n >> k;
    for(int i = 0; i < n; i++) cin >> str[i];

    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++) perdiagonal[i + j].push_back({i, j});
    }

    if(str[0][0] != 'a' && k != 0){
        k--;
        str[0][0] = 'a';
    }

    dp[0][0] = {1, k};


    for(ll i = 1; i < 2 * n - 1; i++){

        forsort.clear();

        for(auto poss : perdiagonal[i]){

            ll posr = poss.first;
            ll posc = poss.second;


            bool up = false, lft = false;
            ll uppr = -1, lftpr = -1;
            ll upk = -1, lftk = -1;

            if(posr - 1 >= 0){
                up = true;
                uppr = dp[posr - 1][posc].first;
                upk = dp[posr - 1][posc].second;
            }

            if(posc - 1 >= 0){
                lft = true;
                lftpr = dp[posr][posc - 1].first;
                lftk = dp[posr][posc - 1].second;
            }

            if(up == false){

                if(str[posr][posc] != 'a' && lftk) lftk--, str[posr][posc] = 'a';
                forsort.push_back({{lftpr, str[posr][posc]}, {posr, posc}});
                dp[posr][posc].second = lftk;
                koithekeaschi[posr][posc] = 0;

            }
            else if(lft == false){

                if(str[posr][posc] != 'a' && upk) upk--, str[posr][posc] = 'a';
                forsort.push_back({{uppr, str[posr][posc]}, {posr, posc}});
                dp[posr][posc].second = upk;
                koithekeaschi[posr][posc] = 1;
            }

            else{

                if(lftpr < uppr){
                    if(str[posr][posc] != 'a' && lftk) lftk--, str[posr][posc] = 'a';
                    forsort.push_back({{lftpr, str[posr][posc]}, {posr, posc}});
                    dp[posr][posc].second = lftk;
                    koithekeaschi[posr][posc] = 0;
                }
                else if(lftpr > uppr){
                    if(str[posr][posc] != 'a' && upk) upk--, str[posr][posc] = 'a';
                    forsort.push_back({{uppr, str[posr][posc]}, {posr, posc}});
                    dp[posr][posc].second = upk;
                    koithekeaschi[posr][posc] = 1;
                }

                else{

                    if(lftk > upk){
                        if(str[posr][posc] != 'a' && lftk) lftk--, str[posr][posc] = 'a';
                        forsort.push_back({{lftpr, str[posr][posc]}, {posr, posc}});
                        dp[posr][posc].second = lftk;
                        koithekeaschi[posr][posc] = 0;
                    }
                    else{
                        if(str[posr][posc] != 'a' && upk) upk--, str[posr][posc] = 'a';
                        forsort.push_back({{uppr, str[posr][posc]}, {posr, posc}});
                        dp[posr][posc].second = upk;
                        koithekeaschi[posr][posc] = 1;
                    }

                }

            }

        }

        sort(forsort.begin(), forsort.end());

        dp[forsort[0].second.first][forsort[0].second.second].first = 1;
        ll cur = 1;

        for(ll i = 1; i < forsort.size(); i++){

            ll curr = forsort[i].second.first;
            ll curc = forsort[i].second.second;
            ll curpr = forsort[i].first.first;
            ll curcc = forsort[i].first.second;

            ll prvr = forsort[i - 1].second.first;
            ll prvc = forsort[i - 1].second.second;
            ll prvpr = forsort[i - 1].first.first;
            ll prvcc = forsort[i - 1].first.second;

            if(curpr == prvpr && curcc == prvcc){
                dp[curr][curc].first = dp[prvr][prvc].first;
            }
            else{
                dp[curr][curc].first = dp[prvr][prvc].first + 1;
            }

        }
    }

    string ans;
    ans.resize(2 * n - 1);

    ll posr = n - 1, posc = n - 1;

    ll curpos = 2 * n - 2;

    while(curpos >= 0){

        ans[curpos] = str[posr][posc];

        if(koithekeaschi[posr][posc] == 0) posc--;
        else posr--;

        curpos--;

    }

    cout << ans << endl;



    return 0;
}
