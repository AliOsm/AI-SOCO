#include <iostream>
#include <vector>
using namespace std;


class Edge {
public:
    int to, rev;
    bool used;

    Edge(int a, bool b, int c) {
        to = a;
        used = b;
        rev = c;
    }
};

vector<vector<Edge> > ar;
bool used[200000];
int len[200000];

void find_verteces(int v, vector<int>& steck) {
    used[v] = true;
    steck.push_back(v);


    for (int i = 0; i < ar[v].size(); ++i) {
        if (used[ar[v][i].to] || !ar[v][i].used)
            continue;

        find_verteces(ar[v][i].to, steck);
    }
}

void init_used() {
    for (int i = 0; i < ar.size(); ++i) {
        used[i] = false;
        len[i] = 0;
    }
}

void dfs(int v, int k) {
    used[v] = true;
    len[v] = k;

    for (int i = 0; i < ar[v].size(); ++i) {
        if (used[ar[v][i].to] || !ar[v][i].used)
            continue;

        dfs(ar[v][i].to, k + 1);
    }
}

int find_res(int v) {
    init_used();

    vector<int> steck;
    find_verteces(v, steck);


    int m = 0;
    for (int i = 0; i < steck.size(); ++i) {
        init_used();
        dfs(steck[i], 0);
        for (int j = 0; j < steck.size(); ++j) {
            if (len[steck[j]] > m)
                m = len[steck[j]];
        }
    }

    return m;
}


int main() {
    int n;
    cin >> n;

    ar.resize(n);
    for (int i = 0; i < n - 1; ++i) {
        int a, b;
        cin >> a >> b;
        --a;
        --b;
        ar[a].emplace_back(b, true, ar[b].size());
        ar[b].emplace_back(a, true, ar[a].size() - 1);
    }

    int m = 0;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < ar[i].size(); ++j) {
            ar[i][j].used = false;
            ar[ar[i][j].to][ar[i][j].rev].used = false;

            int f_r = find_res(i);
            int s_r = find_res(ar[i][j].to);

            if (f_r * s_r > m)
                m = f_r * s_r;

            ar[i][j].used = true;
            ar[ar[i][j].to][ar[i][j].rev].used = true;
        }
    }

    cout << m << "\n";
}