#include<bits/stdc++.h>
//#include<iostream>
//#include<vector>
//#include <bits/stdc++.h>
//#define ii pair<int, int>
//#define X first
//#define Y second
//#define mid (l + r >> 1)
//#define left k + k
//#define right left + 1
//const int N = 500005;
//const int oo = 1000000000;

using namespace std;


/*struct segment_tree {
    ii it[4 * N]; int n;
    segment_tree(int nn) {n = nn;}
    void Upd(int k, int l, int r, int i, int v) {
        if (l > r || i < l || r < i) return;
        if (l == r) {it[k].X = it[k].Y = v; return;}
        Upd(left, l, mid, i, v); Upd(right, mid + 1, r, i, v);
        it[k].X = max(it[left].X, it[right].X);
        it[k].Y = min(it[left].Y, it[right].Y);
    }
    ii Get(int k, int l, int r, int i, int j) {
        if (l > r || r < i || j < l) return ii(0, oo);
        if (i <= l && r <= j) return it[k];
        ii ll = Get(left, l, mid, i, j), rr = Get(right, mid + 1, r, i, j);
        return ii(max(ll.X, rr.X), min(ll.Y, rr.Y));
    }
    void Upd(int i, int v) {Upd(1, 1, n, i, v);}
    ii Get(int i, int j) {return Get(1, 1, n, i, j);}
};*/

int main() {
    ios::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);
    /*int n;
    std::cin >> n;
    //segment_tree IT (n);
    //int x;
    std::vector<int> a(n);
    for(int i = 0; i < n; i++) {
        std::cin >> a[i];
        //IT.Upd(i, x);
    }

    std::vector< std::vector< std::pair<int, int> > > rmq(n, std::vector< std::pair<int, int> >(n));
    //vector< vector<int> > rmqMAX(n, vector<int>(n, 0));

    for(int i = 0; i < n; i++) {
        rmq[i][i].first = i;
        rmq[i][i].second = i;
    }
    for (int i=0; i<n; i++) {
        for (int j = i+1; j<n; j++)
           if (a[rmq[i][j-1].first] < a[j])
              rmq[i][j].first = rmq[i][j - 1].first;
           else
              rmq[i][j].first = j;
    }

     for (int i=0; i<n; i++) {
        for (int j = i+1; j<n; j++)
           if (a[rmq[i][j-1].second] > a[j])
              rmq[i][j].second = rmq[i][j - 1].second;
           else
              rmq[i][j].second = j;
    }
    int maxn = 0;
    for(int i = 0; i < n; i++) {
        for(int j = n-1; j >= i; j--) {
            if(a[rmq[i][j].second] - a[rmq[i][j].first] <= 1) {
                maxn = std::max(j-i+1, maxn);
            }
        }
    }
    /*int maxn = 0;
    for(int i = 1; i <= n; i++) {
        for(int j = n; j >= i; j--) {
            ii f = IT.Get(i,j);
            if(f.first - f.second <= 1) {
                maxn = max(j-i+1, maxn);
            }
        }
    }
    std::cout << maxn;*/
    int n,temp,ans=0;
	cin >> n;
	map<int,int> m;
	while(n--)
	{
		cin >> temp;
		m[temp]++;
		m[temp+1]++;
		m[temp-1] = 0;
		m[temp+2] = 0;
		ans = max ({ans,m[temp],m[temp+1]});
	}
	cout << ans;
    return 0;
}
