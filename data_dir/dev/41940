#include <bits/stdc++.h>
using namespace std;

using ll = long long;
const int sz = 5005;
const ll inf = 1e18;

int n, m;
int l[sz], r[sz];
int cnt[sz][sz];
int ekta[sz];
vector < int > ar[sz];
vector < int > add[sz];
vector < int > rem[sz];
int tot;

int main() {
#ifdef CLown1331
        freopen( "in.txt", "r", stdin );
#endif // CLown1331

        while (scanf("%d %d", &n, &m) == 2) {

                for (int i = 0; i <= n; i++) {
                        ar[i].clear();
                        add[i].clear();
                        rem[i].clear();
                }

                for (int i = 0; i < m; i++) {
                        scanf("%d %d", &l[i], &r[i]);
                        add[l[i]].push_back(i);
                        rem[r[i] + 1].push_back(i);
                }

                set < int > st;

                memset(cnt, 0, sizeof cnt);

                memset(ekta, 0, sizeof ekta);

                for (int i = 1; i <= n; i++) {
                        for (const int& elem: add[i]) {
                                st.insert(elem);
                        }
                        for (const int& elem: rem[i]) {
                                st.erase(elem);
                        }
                        for (const int& elem: st) {
                                ar[i].push_back(elem);
                        }
                }

                tot = 0;

                for (int i = 1; i <= n; i++) {
                        if (ar[i].size()) {
                                tot++;
                                if (ar[i].size() == 1) {
                                        ekta[ar[i].front()]++;
                                } else if (ar[i].size() == 2) {
                                        cnt[ar[i].front()][ar[i].back()]++;
                                        cnt[ar[i].back()][ar[i].front()]++;
                                }
                        }
                }

                int ans = 0;

                // for (int i = 1; i <= n; i++) {
                //         cerr << i << ": ";
                //         for (const int& elem: ar[i]) {
                //                 cerr << elem << " ";
                //         }
                //         cerr << "\n";
                // }

                for (int i = 0; i < m; i++) {
                        for (int j = i + 1; j < m; j++) {
                                // cerr << i << " " << j << ":\n";
                                // cerr << tot << " " << ekta[i] << " " << ekta[j] << " " << cnt[i][j] << "\n";
                                ans = max(tot - ekta[i] - ekta[j] - cnt[i][j], ans);
                        }
                }

                printf("%d\n", ans);

                cerr << "-----\n";
        }

        return 0;
}