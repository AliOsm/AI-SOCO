#include <bits/stdc++.h>
using namespace std;
//0-time when burn,1-time to save,2-cost
vector<vector<long long> > v(110,vector<long long>(4,0));
bool comp(vector<long long> &l,vector<long long> &r)
{
    if(l[0]!=r[0]) return l[0]<r[0];
    if(l[1]!=r[1]) return l[1]<r[1];
    return l[2]>r[2];
}
long long dp[3000][200];
long long rec(long long time,long long n)
{
    if(time<0) return -1;
    if(n<0) return -1;
    if(n==0)
    {
        if(time <= v[n][1])
            return dp[time][n]=0;
        else
            return dp[time][n]=v[n][2];
    }
    if(dp[time][n]!=-1) return dp[time][n];
    if(time==0) return 0;
    dp[time][n] = rec(min(time,v[n-1][0]),n-1);
    if(time <= v[n][1]) return dp[time][n];
    dp[time][n]=max(dp[time][n],rec(min(time-v[n][1],v[n-1][0]),n-1)+v[n][2]);
    return dp[time][n]; 
}
int main() {
    ios::sync_with_stdio(false);cin.tie(0);
    int n;
    cin>>n;
    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=2001;j++) dp[j][i]=-1;
    }
    for(int i=0;i<n;i++)
    {
        v[i][3]=i+1;
        cin>>v[i][1]>>v[i][0]>>v[i][2];
    }
    sort(v.begin(),v.begin()+n,comp);
    queue<pair<long long,long long> > q;
    q.push({n-1,v[n-1][0]});
    stack<int> st;
    long long ans = 0;
    while(q.size())
    {
        auto p = q.front();
        q.pop();
        if(p.first>0)
        {
            long long val1 = rec(min(p.second,v[p.first-1][0]),p.first-1);
            long long val2 = -100000;
            if(p.second > v[p.first][1])
                val2 = rec(min(p.second-v[p.first][1],v[p.first-1][0]),p.first-1) + v[p.first][2];
            if(val2>val1)
            {
                ans += v[p.first][2];
                st.push(v[p.first][3]);
                q.push({p.first-1,min(p.second-v[p.first][1],v[p.first-1][0])});
            }
            else
            {
                q.push({p.first-1,min(p.second,v[p.first-1][0])});
            }
        }
        else
        {
            if(p.second > v[p.first][1])
            {
                ans += v[p.first][2];
                st.push(v[p.first][3]);
            }
        }
    }
    assert(v[0][3] != 88);
    cout<<ans<<endl;
    cout<<st.size()<<endl;
    while(st.size())
    {
        cout<<st.top()<<" ";
        st.pop();
    }
    return 0;
}