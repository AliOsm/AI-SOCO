
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
#include <bitset>
#include <complex>
using namespace std;
#define rep(i, n) for (int (i) = 0; (i) < (n); (i) ++)
#define rep1(i, n) for (int (i) = 1; (i) <= (n); (i) ++)
#define FOR(i, a, b) for (int (i) = (a); (i) <= (b); (i)++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout<<#a<<" :";FOR(i123,x,y)cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int((x).size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;
//


struct pt
{
  long long x, y;
  pt() {}
  pt(long long x, long long y) : x(x), y(y) {}

  inline bool operator==(pt a)
  {
    return a.x == x && a.y == y;
  }
};

struct segment
{
  pt p, q;
  segment() {}
  segment(pt p, pt q) : p(p), q(q) {}
};

// Finds a, b, c such that
// the line represented by a * x + b * y = c
// goes through both p and q.
void line_equation(pt p, pt q, long long& a, long long& b, long long& c)
{
  a = p.y - q.y;
  b = -p.x + q.x;
  c = a * p.x + b * p.y;
}

// Checks if two segments intersect on a lattice point.
// Returns an empty vector if they are parallel or they do not intersect.
// Endpoints are considered to be part of segments.
vector<pt> lattice_intersection(segment l1, segment l2)
{
  vector<pt> ans;
  if (l1.p == l2.p || l1.p == l2.q)
  {
    ans.push_back(l1.p);
    return ans;
  }
  if (l1.q == l2.p || l1.q == l2.q)
  {
    ans.push_back(l1.q);
    return ans;
  }
  long long a, b, c, d, e, f, X, Y, D;
  line_equation(l1.p, l1.q, a, b, c);
  line_equation(l2.p, l2.q, d, e, f);
  X = c * e - b * f;
  Y = c * (-d) + a * f;

  D = a * e - b * d;
  if (D == 0 || X % D != 0 || Y % D != 0)
  {
    // l1 and l2 are parallel or
    // the possible intersection is not a lattice point.
    return ans;
  }
  X /= D;
  Y /= D;
  if (min(l1.p.x, l1.q.x) <= X && X <= max(l1.p.x, l1.q.x) &&
      min(l1.p.y, l1.q.y) <= Y && Y <= max(l1.p.y, l1.q.y) &&
      min(l2.p.x, l2.q.x) <= X && X <= max(l2.p.x, l2.q.x) &&
      min(l2.p.y, l2.q.y) <= Y && Y <= max(l2.p.y, l2.q.y))
  {
    ans.push_back(pt(X, Y));
  }
  return ans;
}

ll gcd(ll a, ll b)
{
  a = abs(a);
  b = abs(b);
  while (b > 0)
  {
    ll c = a % b;
    a = b;
    b = c;
  }
  return a;
}

int N;
pt A[1010];
pt B[1010];
segment S[1010];
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0); cin.tie(0);
  cin >> N;
  rep1(i,N) cin >> S[i].p.x >> S[i].p.y >> S[i].q.x >> S[i].q.y;
  ll ans = 0;
  rep1(i,N)
  {
    ll dx = S[i].p.x - S[i].q.x;
    ll dy = S[i].p.y - S[i].q.y;
    ans += gcd(dx, dy) + 1;
  }
  map<ll, map<ll, set<int> > > intersections;
  vector< pair<ll,ll> > v;
  rep1(i,N) rep1(j,N) if (i < j)
  {
    vector<pt> tmp = lattice_intersection(S[i], S[j]);
    rep(i,sz(tmp))
    {
      ll X = tmp[i].x;
      ll Y = tmp[i].y;
      intersections[X][Y].insert(i);
      intersections[X][Y].insert(j);
      v.pb(mp(X, Y));
    }
  }

  sort(v.begin(), v.end());
  v.erase(unique(v.begin(), v.end()), v.end());
  rep(i,sz(v))
  {
    ans -= sz(intersections[v[i].first][v[i].second]) - 1;
  }
  cout << ans << endl;
}

