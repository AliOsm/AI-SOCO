// Enjoy your stay.

#include <bits/stdc++.h>

#define EPS 1e-9
#define INF 1070000000LL
#define MOD 1000000007LL
#define fir first
#define foreach(it,X) for(auto it=(X).begin();it!=(X).end();it++)
#define ite iterator
#define mp make_pair
#define mt make_tuple
#define rep(i,n) rep2(i,0,n)
#define rep2(i,m,n) for(int i=m;i<(n);i++)
#define pb push_back
#define sec second
#define sz(x) ((int)(x).size())

using namespace std;

typedef istringstream iss;
typedef long long ll;
typedef pair<ll,ll> pi;
typedef stringstream sst;
typedef vector<ll> vi;

int n,m,q;
char c[100010][12];
vector<int> id;

struct segtree{
	int l,r,mid;
	segtree *cl,*cr;
	vector<int> val;

	void update(){
		fill(val.begin(),val.end(),-1);
		rep2(j,1,m+1){
			int x = j;
			bool L = 0, R = 0;
			while(1 <= x && x <= m && (!L || !R)){
				if(c[l][x] == '^'){
					val[j] = x;
					break;
				}
				else if(c[l][x] == '<'){
					L = 1;
					x--;
				}
				else{
					R = 1;
					x++;
				}
			}
			if(x == 0 || x == m+1){
				val[j] = x + l * 100;
			}
		}
	}

	vector<int> merge(vector<int> f, vector<int> g){
		rep2(i,1,m+1){
			if(1 <= g[i] && g[i] <= m){
				g[i] = f[g[i]];
			}
		}
		return g;
	}
	
	segtree(int l,int r): l(l),r(r),mid(l+r>>1){
		if(l+1 == r){
			val.resize(m+1, -1);
			update();
			return;
		}
		cl = new segtree(l, mid);
		cr = new segtree(mid, r);
		val = merge(cl->val, cr->val);
	}

	void change(int pos){
		if(pos<l || r<=pos)return;
		if(l+1==r){
			update();
			return;
		}
		cl->change(pos);
		cr->change(pos);
		val = merge(cl->val, cr->val);
	}

	vector<int> query(int L, int R){
		if(L <= l && r <= R) return val;
		if(R <= l || r <= L) return id;
		return merge(cl->query(L, R), cr->query(L, R));
	}
} *root;

int main(){
	cin.tie(0);
	ios_base::sync_with_stdio(0);
	
	cin>>n>>m>>q;
	rep2(i,1,n+1){
		cin>>c[i]+1;
	}
	root = new segtree(1, n+1);
	rep(i,m+1) id.pb(i);
	rep(i,q){
		char C;
		cin>>C;
		if(C == 'A'){
			int y,x;
			cin>>y>>x;
			int res = root->query(1, y+1)[x];
			if(res == -1) cout<<"-1 -1"<<endl;
			else cout<<res/100<<" "<<res%100<<endl;
		}
		else{
			int y,x;
			cin>>y>>x>>C;
			c[y][x] = C;
			root->change(y);
		}
	}
}
