#include <bits/stdc++.h>
#pragma GCC optimize ("O2")
#pragma GCC optimize ("unroll-loops")
//#pragma GCC optimize("no-stack-protector,fast-math")

using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<pii, int> piii;
typedef pair<ll, ll> pll;
#define debug(x) cerr<<#x<<'='<<(x)<<endl;
#define debugp(x) cerr<<#x<<"= {"<<(x.first)<<", "<<(x.second)<<"}"<<endl;
#define debug2(x, y) cerr<<"{"<<#x<<", "<<#y<<"} = {"<<(x)<<", "<<(y)<<"}"<<endl;
#define debugv(v) cerr<<#v<<" : ";for (auto x:v) cerr<<x<<' ';cerr<<endl;
#define all(x) x.begin(), x.end()
#define pb push_back
#define kill(x) return cout<<x<<'\n', 0;

const ld eps=1e-7;
const int inf=1000000010;
const ll INF=10000000000000010LL;
const int mod = 1000000007;
const int MAXN = 100010, LOG=20;

ll n, m, k, u, v, x, y, t, l, root;
ll D[MAXN], dist[MAXN];
int stt[MAXN], fnt[MAXN], timer=1, pos[MAXN];
int seg[MAXN<<2];
int cnt[MAXN];
vector<pii> G[MAXN];
vector<int> tof;

inline int combine(int x, int y){
	if (D[x]>D[y]) return x;
	return y;
}

void dfs1(int node, int par){
	for (pii p:G[node]) if (p.first!=par){
		dist[p.first]=dist[node]+p.second;
		dfs1(p.first, node);
	}
}

void dfs2(int node, int par){
	pos[timer]=node;
	stt[node]=timer++;
	for (pii p:G[node]) if (p.first!=par) dfs2(p.first, node);
	fnt[node]=timer;
	tof.pb(node);
}

void Set(int id, int tl, int tr, int pos, int val){
	if (tr-tl==1){
		seg[id]=val;
		return ;
	}
	int mid=(tl+tr)>>1;
	if (pos<mid) Set(id<<1, tl, mid, pos, val);
	else Set(id<<1 | 1, mid, tr, pos, val);
	seg[id]=combine(seg[id<<1], seg[id<<1 | 1]);
}

int Get(int id, int tl, int tr, int l, int r){
	if (r<=tl || tr<=l) return seg[0];
	if (l<=tl && tr<=r) return seg[id];
	int mid=(tl+tr)>>1;
	return combine(Get(id<<1, tl, mid, l, r), Get(id<<1 | 1, mid, tr, l, r));
}

void solve(){
	cin>>l;
	int ans=0;
	memset(seg, 0, sizeof(seg));
	for (int node:tof){
		cnt[node]=1;
		for (pii p:G[node]) if (stt[node]<stt[p.first]) cnt[node]+=cnt[p.first];
		Set(1, 1, n+1, stt[node], node);
		while (1){
			int v=Get(1, 1, n+1, stt[node], fnt[node]);
			if (D[v]-D[node]<=l) break ;
			Set(1, 1, n+1, stt[v], 0);
			cnt[node]--;
		}
		ans=max(ans, cnt[node]);
	}
	cout<<ans<<'\n';
}

int main(){
	ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	cin>>n;
	for (int i=1; i<n; i++){
		cin>>u>>v>>x;
		G[u].pb({v, x});
		G[v].pb({u, x});
	}
	dfs1(1, 0);
	root=max_element(dist+1, dist+n+1)-dist;
	dist[root]=0;
	dfs1(root, 0);
	memcpy(D, dist, sizeof(D));
	root=max_element(dist+1, dist+n+1)-dist;
	dist[root]=0;
	dfs1(root, 0);
	for (int i=1; i<=n; i++) D[i]=max(D[i], dist[i]);
	root=min_element(D+1, D+n+1)-D;
	dfs2(root, 0);
	
	cin>>m;
	while (m--) solve();
	
	return 0;
}
/*
5
1 2 3
2 3 4
4 5 3
3 4 2
1
1


*/
