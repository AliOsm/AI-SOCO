#include <queue>
#include <limits>
#include <vector>
#include <cstdio>
#include <algorithm>

using namespace std;

template<int MAXN, typename T = int, typename S = T>
struct MinCostMaxFlow {
  struct NegativeCostCircuitExistsException {
  };

  struct Edge {
    int v;
    T c;
    S w;
    int b;
    Edge(int v_, T c_, S w_, int b_) : v(v_), c(c_), w(w_), b(b_) { }
  };

  int n, source, sink;
  vector<Edge> e[MAXN];

  void init(int m, int s, int t) {
    this->n = m;
    this->source = s;
    this->sink = t;
    for (int i = 0; i < n; ++i) {
      e[i].clear();
    }
  }

  void addEdge(int a, int b, T c, S w) {
    e[a].push_back(Edge(b, c, w, e[b].size()));
    e[b].push_back(Edge(a, 0, -w, e[a].size() - 1));  // TODO
  }

  bool mark[MAXN];
  T maxc[MAXN];
  S minw[MAXN];
  int dist[MAXN];
  Edge* prev[MAXN];

  bool _spfa() {
    queue<int> q;
    fill(mark, mark + n, false);
    fill(maxc, maxc + n, 0);
    fill(minw, minw + n, numeric_limits<S>::max());
    fill(dist, dist + n, 0);
    fill(prev, prev + n, (Edge*)NULL);
    mark[source] = true;
    maxc[source] = numeric_limits<S>::max();
    minw[source] = 0;

    q.push(source);
    while (!q.empty()) {
      int cur = q.front();
      mark[cur] = false;
      q.pop();
      for (typename vector<Edge>::iterator it = e[cur].begin(); it != e[cur].end(); ++it) {
        T c = min(maxc[cur], it->c);
        if (c == 0) {
          continue;
        }

        int v = it->v;
        S w = minw[cur] + it->w;
        if (minw[v] > w || (minw[v] == w && maxc[v] < c)) { // TODO
          maxc[v] = c;
          minw[v] = w;
          dist[v] = dist[cur] + 1;
          if (dist[v] >= n) {
            return false;
          }
          prev[v] = &*it;
          if (!mark[v]) {
            mark[v] = true;
            q.push(v);
          }
        }
      }
    }
    return true;
  }

  pair<T, S> gao() {
    T sumc = 0;
    S sumw = 0;
    while (true) {
      if (!_spfa()) {
        throw NegativeCostCircuitExistsException();
      } else if (maxc[sink] == 0) {
        break;
      } else {
        T c = maxc[sink];
        sumc += c;
        sumw += c * minw[sink];

        int cur = sink;
        while (cur != source) {
          Edge* e1 = prev[cur];
          e1->c -= c;
          Edge* e2 = &e[e1->v][e1->b];
          e2->c += c;
          cur = e2->v;
        }
      }
    }
    return make_pair(sumc, sumw);
  }
};

const int MAXN = 100;

MinCostMaxFlow<MAXN * MAXN> mcmf;

const int dx[4] = {0, 1, 0, -1};
const int dy[4] = {1, 0, -1, 0};

int main() {
  int r, c, s, t;
  static int a[MAXN][MAXN];

  scanf("%d%d", &r, &c);
  for (int i = 0; i < r; ++i) {
    for (int j = 0; j < c; ++j) {
      scanf("%d", &a[i][j]);
      --a[i][j];
    }
  }
  s = r * c;
  t = r * c + 1;
  mcmf.init(t + 1, s, t);
  for (int i = 0; i < r; ++i) {
    for (int j = 0; j < c; ++j) {
      if ((i + j) % 2 == 0) {
        mcmf.addEdge(i * c + j, t, 1, 0);
      } else {
        mcmf.addEdge(s, i * c + j, 1, 0);
        for (int k = 0; k < 4; ++k) {
          int x = i + dx[k];
          int y = j + dy[k];
          if (0 <= x && x < r && 0 <= y && y < c) {
            mcmf.addEdge(i * c + j, x * c + y, 1, a[i][j] == a[x][y] ? 0 : 1);
          }
        }
      }
    }
  }
  printf("%d\n", mcmf.gao().second);

  return 0;
}

