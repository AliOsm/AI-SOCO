//  Copyright Â© 2019 Diego Garcia Rodriguez del Campo. All rights reserved.
#include<bits/stdc++.h>
#define MAX 200005
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
using namespace std;
typedef long long i64;

struct node {
    int x, y, z, id;
};

bool cmp( node a , node b ) {
    if( a.x != b.x )
        return a.x < b.x;
    if( a.y != b.y )
        return a.y < b.y;
    return a.z < b.z;
}

int N, pend;
node a[MAX];

int solve( int s , int e ) {
    int extra = 0;
    int l = s;
    while( l <= e ) {
        int r = l;
        while( r + 1 <= e && a[r + 1].y == a[l].y )
            r++;
        int tam = r - l + 1;
        if( tam & 1 ) {
            for( int i = l; i < r; i += 2 ) 
                cout << a[i].id << " " << a[i + 1].id << "\n";
            if( ! extra )
                extra = a[r].id;
            else {
                cout << a[r].id << " " << extra << "\n";
                extra = 0;
            }
        }
        else {
            for( int i = l; i <= r; i += 2 )
                cout << a[i].id << " " << a[i + 1].id << "\n";
        }
        l = r + 1;
    }
    return extra;
}

int main()
{
    optimiza_io
    cin >> N;
    for( int i = 1; i <= N; i ++ ) {
        cin >> a[i].x >> a[i].y >> a[i].z;
        a[i].id = i;
    }
    
    sort( a + 1 , a + N + 1 , cmp );
    int l = 1;
    while( l <= N ) {
        int r = l;
        while( r + 1 <= N && a[r + 1].x == a[l].x )
            r++;
        int tam = r - l + 1;
        if( tam & 1 ) {
            int aux = solve( l , r );
            if( ! pend )
                pend = aux; 
            else {
                cout << aux << " " << pend << "\n";
                pend = 0;
            }
        }
        else 
            solve( l , r );
        l = r + 1;
    }
    
    return 0;
}