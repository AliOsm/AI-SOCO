#include <bits/stdc++.h>

#define fto(i, x, y) for(auto i = (x); i <= (y); ++i)
#define fdto(i, x, y) for(auto i = (x); i >= (y); --i)
#define ftoa(i, x, y, a) for(auto i = (x); i <= (y); i += a)
#define ftoit(it, var) for (auto it = var.begin(); it != var.end(); ++it)

#define ii pair<int, int>
#define mp make_pair
#define ff first
#define ss second

#define vi vector<int>
#define vii vector<ii>
#define ll long long
#define vll vector<ll>

#define eb emplace_back
#define ef emplace_front
#define lb lower_bound
#define ub upper_bound

#define oo 1000000007
#define OO 1000000000000000007LL

using namespace std;

#define Pro "tmp"
#define maxN 300007

int a[maxN];

int main() {
    #ifndef ONLINE_JUDGE
        freopen(Pro".inp", "r", stdin);
        freopen(Pro".out", "w", stdout);
    #endif // ONLINE_JUDGE

    int n;
    scanf("%d", &n);

    int cur = 0;
    fto(i, 1, n) scanf("%d", &a[i]);

    int i = 1;
    int j = n;
    
    string s = "";
    while (1) {
        if (max(a[i], a[j]) <= cur) break;
        if (a[i] == a[j]) {
            int k = i;
            while (a[k+1] > a[k]) ++k;

            int k_ = j;
            while (a[k_-1] > a[k_]) --k_;

            if (k-i+1 >= j-k_+1) {
                fto(x, i, k) s += 'L';
            }
            else {
                fto(x, k_, j) s += 'R';
            }

            break;
        }
        if (a[i] < a[j]) {
            if (a[i] > cur) {
                cur = a[i];
                s += 'L';
                ++i;
            }
            else {
                cur = a[j];
                s += 'R';
                --j;
            }
        }
        else if (a[i] > a[j]) {
            if (a[j] > cur) {
                cur = a[j];
                s += 'R';
                --j;
            }
            else {
                cur = a[i];
                s += 'L';
                ++i;
            }
        }
    }

    cout << s.size() << endl;
    cout << s << endl;
    return 0;
}