#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const ld PI = acos(-1.0);
const ll LINF = (ll)1e18 + 5;
const int INF = (int)1e9 + 5;

template<class T>
T sqr(T x) { return x * x; }

template<class T>
T abs(T x) { return x < 0 ? -x : x; }

template<class T>
ll round(T x) { return x < 0 ? x - 0.5 : x + 0.5; }

template<class T>
bool chmin(T & x, const T & y) {
	if (y < x) {
		x = y;
		return true;
	}
	return false;
}

template<class T>
bool chmax(T & x, const T & y) {
	if (x < y) {
		x = y;
		return true;
	}
	return false;
}


template<class P, class Q>
ostream & operator <<(ostream & os, const pair<P, Q> & p) {
	return os << "(" << p.first << ", " << p.second << ")";
}

template<class T>
ostream & operator <<(ostream & os, const vector<T> & v) {
	bool was = false;
	os << "{";
	for (typename vector<T>::const_iterator it = v.begin(); it != v.end(); it++) {
		if (was) {
			os << ", ";
		}
		else {
			was = true;
		}
		os << *it;
	}
	os << "}";
	return os;
}

template<class T>
ostream & operator <<(ostream & os, const set<T> & v) {
	bool was = false;
	os << "{";
	for (typename set<T>::const_iterator it = v.begin(); it != v.end(); it++) {
		if (was) {
			os << ", ";
		}
		else {
			was = true;
		}
		os << *it;
	}
	os << "}";
	return os;
}

template<class T>
ostream & operator <<(ostream & os, const multiset<T> & v) {
	bool was = false;
	os << "{";
	for (typename multiset<T>::const_iterator it = v.begin(); it != v.end(); it++) {
		if (was) {
			os << ", ";
		}
		else {
			was = true;
		}
		os << *it;
	}
	os << "}";
	return os;
}

template<class P, class Q>
ostream & operator <<(ostream & os, const map<P, Q> & v) {
	bool was = false;
	os << "{";
	for (typename map<P, Q>::const_iterator it = v.begin(); it != v.end(); it++) {
		if (was) {
			os << ", ";
		}
		else {
			was = true;
		}
		os << *it;
	}
	os << "}";
	return os;
}

#define all(x) (x).begin(), (x).end()

string nextToken() {
	static char str[(int)1e6 + 5];
	scanf("%s", str);
	return str;
}

template<class T>
T nextInt() {
	ll x = 0;
	bool p = false;
	char c;
	do {
		c = getchar();
	} while (c <= 32);
	if (c == '-') {
		p = true;
		c = getchar();
	}
	while (c >= '0' && c <= '9') {
		x = x * 10 + c - '0';
		c = getchar();
	}
	return (p ? -x : x);
}

bool isPrime(int x) {
	if (x == 2) return true;
	if (x == 1) return false;
	for (int i = 2; i * i <= x; i++) {
		if (x % i == 0) return false;
	}
	return true;
}

const int N = 100100;

struct node {
	int add, maxi;
	node() {}
};

int n;

node tree[N * 4];

void combine(node& v, const node& l, const node& r) {
	if (l.add + l.maxi > r.add + r.maxi) {
		v.maxi = l.add + l.maxi;
	} else {
		v.maxi = r.add + r.maxi;
	}
}

void add(int v, int tl, int tr, int l, int r, int val) {
	if (tl == l && tr == r) {
		tree[v].add += val;
		return;
	}
	int tm = (tl + tr) >> 1;
	if (r <= tm) {
		add((v << 1) + 1, tl, tm, l, r, val);
	} else if (l > tm) {
		add((v << 1) + 2, tm + 1, tr, l, r, val);
	} else {
		add((v << 1) + 1, tl, tm, l, tm, val);
		add((v << 1) + 2, tm + 1, tr, tm + 1, r, val);
	}
	combine(tree[v], tree[(v << 1) + 1], tree[(v << 1) + 2]);
}

int get(int v, int tl, int tr, int l, int r) {
	if (tl == l && tr == r) {
		return tree[v].add + tree[v].maxi;
	}
	int tm = (tl + tr) >> 1;
	if (r <= tm) {
		return get((v << 1) + 1, tl, tm, l, r) + tree[v].add;
	} else if (l > tm) {
		return get((v << 1) + 2, tm + 1, tr, l, r) + tree[v].add;
	} else {
		return max(get((v << 1) + 1, tl, tm, l, tm), get((v << 1) + 2, tm + 1, tr, tm + 1, r)) + tree[v].add;
	}
}

int get(int l, int r) {
	return get(0, 1, n, l, r);
}

void add(int pos, int val) {
	add(0, 1, n, 1, pos, val);
}

int res[N];

void solve() {
	scanf("%d", &n);
	for (int i = 1; i <= n; i++) {
		int pos, tp;
		scanf("%d%d", &pos, &tp);
		if (tp == 0) {
			add(pos, -1);
		} else if (tp == 1) {
			add(pos, 1);
			int x;
			scanf("%d", &x);
			res[pos] = x;
		}
		int l = 0, r = n + 1;
		while (r - l > 1) {
			int mid = (l + r) >> 1;
			if (get(mid, n) >= 1) l = mid;
			else r = mid;
		}
		if (l == 0) puts("-1");
		else printf("%d\n", res[l]);
	}
	
}

int main(int argc, char * argv[]) {
	srand(time(0));

#ifdef LOCAL
	//gen();
	freopen("input.txt", "r", stdin);
#else
	
#endif

	int t = 1;
	//cin >> t;
	for (int tc = 1; tc <= t; tc++) {
		solve();
	}

}