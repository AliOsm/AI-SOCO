#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<int, int> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

const int maxk = 40 + 5;
const int maxn = 1000 + 5;

int d[maxk][maxn][maxn];
int a[maxn][maxn], n, m, k;
int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, 1, -1};
vector<pii> g[maxk];

bool valid(int x, int y){
	return x >= 0 && x < n && y >= 0 && y < m;
}

void bfs(int c){
	queue<pii> Q;
	for(auto &p : g[c]){
		Q.push({p.first, p.second});
		d[c][p.first][p.second] = 0;
	}
	
	vector<bool> seen(k + 1);
	
	while(!Q.empty()){
		int x = Q.front().first;
		int y = Q.front().second;
		int col = a[x][y];
		Q.pop();
		
		if(!seen[col]){
			seen[col] = true;
			for(auto &p : g[col]){
				int nx = p.first;
				int ny = p.second;
				if(d[c][nx][ny] == -1){
					d[c][nx][ny] = d[c][x][y] + 1;
					Q.push({nx, ny});
				}
			}
		}
		
		for(int i = 0; i < 4; i++){
			int nx = x + dx[i];
			int ny = y + dy[i];
			if(valid(nx, ny) && d[c][nx][ny] == -1){
				d[c][nx][ny] = d[c][x][y] + 1;
				Q.push({nx, ny});
			}
		}
	}
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	
	cin >> n >> m >> k;
	
	for(int i = 0; i < n; i++)
		for(int j = 0; j < m; j++){
			cin >> a[i][j];
			g[a[i][j]].push_back({i, j});
		}
	
	memset(d, -1, sizeof(d));
	for(int i = 1; i <= k; i++)
		bfs(i);
	
	int q;
	cin >> q;
	
	while(q--){
		int xo, yo, xi, yi;
		cin >> xo >> yo >> xi >> yi;
		xo--, xi--, yo--, yi--;
		
		int ans = abs(xo - xi) + abs(yo - yi);
		for(int i = 1; i <= k; i++)
			ans = min(ans, d[i][xo][yo] + d[i][xi][yi] + 1);
		
		cout << ans << endl;
	}

	return 0;
}
