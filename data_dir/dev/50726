#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long 

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << endl;
        //use cerr if u want to display at the bottom
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define trace(...)
#endif

typedef trie<string,null_type,trie_string_access_traits<>,pat_trie_tag,trie_prefix_search_node_update> pref_trie;
typedef tree<long int,null_type,less<long int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
typedef cc_hash_table<long int,long int, hash<long int>, equal_to<long int>, direct_mask_range_hashing<long int>, 
hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;

long int n,m;
vector<vector<pair<long int,pair<long int,long int>>>> g;
vector<long int> visited;

void DFS(long int x, long int node,long int &num, long int &base){
	visited[node] = num;
	for(auto ele : g[node]){
		long int child = ele.first;
		long int minVal = ele.second.first;
		long int maxVal = ele.second.second;
		if(visited[child] != num && x >= minVal && x <= maxVal && minVal <= base)
			DFS(x,child,num,base);
	}
}


int main(){
   IOS;
 /*    #ifndef ONLINE_JUDGE
         freopen("in.txt",  "r",  stdin);
         freopen("out.txt", "w", stdout);
     #endif */
   cin>>n>>m;

   g.resize(n);
   visited.resize(n);

   vector<long int> bottom,up;
   for(long int i = 0; i < m; i++){
   		long int a,b,l,r;
   		cin>>a>>b>>l>>r;
   		g[a-1].push_back(make_pair(b-1,make_pair(l,r)));
   		g[b-1].push_back(make_pair(a-1,make_pair(l,r)));

   		bottom.push_back(l);
   		up.push_back(r);
   }

   long int ans = 0;

   for(long int i = 0; i < bottom.size(); i++){
   		long int be = bottom[i], en = up[i], range = bottom[i] - 1;
   		while(be <= en){
   			long int mid = (be + en) / 2;
   			DFS(mid,0,mid,bottom[i]);
   			if(visited.back() == mid){
   				be = mid + 1;
   				range = mid;
   			}
   			else
   				en = mid - 1;
   		}
   		ans = max(ans,range - bottom[i] + 1);
   }

   if(ans)
   	cout<<ans;
   else
   	cout<<"Nice work, Dima!";
   
   return 0;
}