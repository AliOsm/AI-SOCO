#include <bits/stdc++.h>
using namespace std;

using ll = long long;

vector<ll> f{1};

ll perms(vector<ll>& v) {
    ll ans = 1;
    int c = 1;
    vector<ll> fs;
    for (ll i =0 ; i < v.size(); i++) {
        ll x = v.size() - v[i] + 1;
        if (v[i] == 0) x -= 1;
        ans *= x - min(i, x);
        if (i > 0) {
            if (v[i] != v[i-1]) {
                fs.push_back(f[c]);
                c = 1;
            } else {
                c++;
            }
        }
    }
    fs.push_back(f[c]);
    for (ll x: fs) ans /= x;
    return ans;
}

ll solve(ll n) {
    ll k = 2;
    vector<ll> v;
    while (n) {
        v.push_back(n % k);
        n /= k;
        k++;
    }
    sort(rbegin(v), rend(v));
    ll ans = perms(v);
    if (v.back() == 0) {
        v.pop_back();
        ans -= perms(v);
    }
    return ans;
}

vector<ll> get_key(ll n) {
    vector<ll> res;
    ll k = 2;
    while (n) {
        res.push_back(n % k);
        n /= k;
        k++;
    }
    sort(rbegin(res), rend(res));
    return res;
}

ll solve_naive(ll n) {
    ll ans = 0;
    for (ll i = 1; i <= 100000; i++) {
        if (get_key(i) == get_key(n)) ans++;
    }
    return ans;
}

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    for (ll i = 1; i <= 22; i++) {
        f.push_back(f.back() * i);
    }

    int t;
    cin >> t;
    while (t--) {
        ll n;
        cin >> n;
        cout << solve(n) - 1 << '\n';
    }
}
