//In the name of Allah

#include<bits/stdc++.h>

using namespace std;

const int Maxn = 200 * 1000 + 5;
int m, h, ans, t[Maxn];
set<pair<int, pair<int, int> > > mys;
pair<int, int> num[Maxn];
set<int> Set[Maxn];
bool mark[Maxn];

void dfs(int v, int cnt, int ind)
{
    mark[v] = true;
    num[v] = make_pair(cnt, ind); Set[cnt].insert(ind); t[cnt] = ind;
    if(! mark[(v + m) % h])
        dfs((v + m) % h, cnt, ind + 1);
    return;
}

void dfsAll()
{
    int cnt = 0;
    for(int i = 0; i < h; i ++)
        if(! mark[i])
        {
            dfs(i, cnt, 0);
            cnt ++;
        }
    return;
}

int main()
{
    ios_base::sync_with_stdio(false);
    int n;
    cin >> h >> m >> n;
    dfsAll();
    char c; int a, b;
    for(int i = 0; i < n; i ++)
    {
        cin >> c;
        if(c == '+')
        {
            cin >> a >> b;
            set<int> :: iterator it = Set[num[b].first].lower_bound(num[b].second);
            if(it != Set[num[b].first].end())
            {
                int ind = *it;
                ans += ind - num[b].second;
                Set[num[b].first].erase(it);
                mys.insert(make_pair(a, make_pair(num[b].first, ind)));
            }
            else
            {
                int ind = *Set[num[b].first].begin();
                ans += t[num[b].first] - num[b].second + ind + 1;
                Set[num[b].first].erase(Set[num[b].first].begin());
                mys.insert(make_pair(a, make_pair(num[b].first, ind)));
            }
        }
        else
        {
            cin >> a;
            set<pair<int, pair<int, int> > > :: iterator it = mys.lower_bound(make_pair(a, make_pair(-1, -1)));
            pair<int, pair<int, int> > p = *it;
            mys.erase(it);
            Set[p.second.first].insert(p.second.second);
        }
    }
    cout << ans << endl;
    return 0;
}
