#include<stdio.h>
#include<iostream>
#include<string.h>
#include<ctype.h>
#include<math.h>
#include<map>
#include<set>
#include<vector>
#include<queue>
#include<functional>
#include<string>
#include<algorithm>
#include<time.h>
void fre(){freopen("c://test//input.in","r",stdin);freopen("c://test//output.out","w",stdout);}
template <class T> inline void scand(T &x){char c;x=0;while((c=getchar())<'0');while(c>='0'&&c<='9')x=x*10+(c-48),c=getchar();}
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned int UI;
template <class T> inline void gmax(T &a,T b){if(b>a)a=b;}
template <class T> inline void gmin(T &a,T b){if(b<a)a=b;}
using namespace std;
const int N=1e5+10,Z=1e9+7,maxint=2147483647,ms31=522133279,ms63=1061109567,ms127=2139062143;
const double eps=1e-8,PI=acos(-1.0);//.0
multiset<int>ms[5];
int casenum,casei;
int n,m,shot,i,j;
int l,r,sum,ans;
int b[N][5];
int v[5],ansv[5];
void test()//测试结果,set.empty()反而时间>set.size()
{
	for(i=1;i<=10000;i++)ms[0].insert(i);
	double t1=clock();
	for(i=1;i<=10000000;i++)ans=(ms[0].size()==0);
	double t2=clock();
	printf("size()time=%f\n",t2-t1);
	double t3=clock();
	for(i=1;i<=10000000;i++)ms[0].empty();
	double t4=clock();
	printf("empty()time=%f\n",t4-t3);
}
int main()
{
	//test();
	while(~scanf("%d%d%d",&n,&m,&shot))
	{
		for(i=0;i<m;i++)ms[i].clear();
		for(i=1;i<=n;i++)
		{
			for(j=0;j<m;j++)
			{
				scanf("%d",&b[i][j]);
			}
		}
		for(ans=0,l=1,r=1;l<=n;)
		{
			while(r<=n)//在右界可以扩展的情况下
			{
				sum=0;
				for(i=0;i<m;i++)//循环所有列，强行把右界插入
				{
					ms[i].insert(b[r][i]);
					v[i]=*(--ms[i].end());
					sum+=v[i];
				}
				r++;//r一定要向下滚动才行，因为位置必须要前进了
				if(sum>shot)break;//非法了，无法更新，需要退左界
				else
				{
					if(r-l>ans)//可以更新答案
					{
						ans=r-l;
						MC(ansv,v);
					}
				}
			}
			if(r>n)break;//滚动到头
			while(sum>shot)//非法状态，滚动左界
			{
				sum=0;
				for(i=0;i<m;i++)
				{
					ms[i].erase(ms[i].find(b[l][i]));
					if(!ms[i].size())//这句话是必须要有点，没有这句话虽然AC了，但是我本地报错了
						sum+=*(ms[i].begin());
				}
				l++;
			}
		}
		for(i=0;i<m;i++)printf("%d ",ansv[i]);
		puts("");
	}
	return 0;
}
/*
【题意】
http://codeforces.com/contest/514/problem/D
n个机器人排成排
每个机器人有m部分a1~am，表示这个部分需要几枪才能够破坏
然后我们最多可以发射k枪
每枪可以针对一个部分，使得所有机器人的这一部分破坏程度+1
如果一个机器人所有部分都被破坏了，这个机器人就被破坏了
问在最多开k枪的情况下，最多可以破坏多长一段连续的机器人

【类型】
二分答案+线段树
or
双指针+贪心

【分析】
双指针+贪心是如何做呢
首先我们在左界不变的情况下， 如果打右界的总枪数还是在k的范围内，我们自然可以扩展右界
然而，如果坚持不下去了，我们就可以减少左界
然而左界移除后的最大值怎么办？自然可以用优先队列维护
然而还是放弃优先队列，用功能更强大的set或multiset吧

【时间复杂度&&优化】
O(log(n)nlog(n))
大约4e7

然而这道题还有更加高效的双指针+贪心的做法
虽然少了一个log，不过竟然还没有线段树快！

【trick】

【数据】
Sample test(s)

input
5 2 4
4 0
1 2
2 1
0 2
1 3
output
2 2

input
3 2 4
1 2
1 3
2 2
output
1 3

INPUT
3 1 10
10
20
20
OUTPUT
*/