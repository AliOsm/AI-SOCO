#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

using namespace std;

typedef long long int ll;

vector<ll> lista;

ll distsq(ll x)
{
  int inf=0;
  int sup=int(lista.size());
  while (inf+1<sup) {
    int med=(inf+sup)/2;
    if (lista[med]<=x) inf=med;
    else sup=med;
  }
  return min(x-lista[inf],lista[sup]-x);
}

ll distnsq(ll x)
{
  if (x==0) return 2;
  return 1;
}

int n;
vector<ll> lensq,lennsq;
ll sol=0;

void calcula(vector<ll> &v)
{
  sort(v.begin(),v.end());
  for (int i=0;n<2*(int(v.size())-i);i++)
    sol+=v[i];
}

int main()
{
  ios::sync_with_stdio(false);
  lista.push_back(0);
  for (ll x=1;lista.back()<=1000000000;x++)
    lista.push_back(x*x);
  cin>>n;
  for (int i=0;i<n;i++) {
    ll x;
    cin>>x;
    ll lsq=distsq(x);
    ll lnsq=distnsq(x);
    if (lsq==0) lennsq.push_back(lnsq);
    else lensq.push_back(lsq);
  }
  if (int(lensq.size())<int(lennsq.size())) calcula(lennsq);
  else calcula(lensq);
  cout<<sol<<endl;
}
