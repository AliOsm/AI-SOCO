#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;
#define ll long long
//increase stack size
#pragma comment(linker, "/STACK:16777216")
 
ll mxm() {return LLONG_MIN;}
template<typename... Args>
ll mxm(ll a, Args... args) { return max(a,mxm(args...)); }
 
ll mnm() {return LLONG_MAX;}
template<typename... Args>
ll mnm(ll a, Args... args) { return min(a,mnm(args...)); }
 
template<class T> ostream& operator<<(ostream& os,vector<T> V){
	os<<"[ ";for(auto v:V)os<<v<<" ";return os<<"]";
}
template<class L,class R> ostream& operator<<(ostream& os,pair<L,R> P){
	return os<<"("<<P.first<<","<<P.second<<")";
}
 
#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__,__VA_ARGS__)
template<typename Arg1>
void __f(const char* name,Arg1&& arg1){
	cout<<name<<" : "<<arg1<<endl;
}
template <typename Arg1,typename... Args>
void __f(const char* names,Arg1&& arg1,Args&&... args){
	const char* comma=strchr(names+1,',');cout.write(names,comma-names)<<" : "<<arg1<<" | ";__f(comma+1,args...);
}
#else
#define trace(...) 1
#endif
 
#define ld long double
#define pll pair<ll,ll>
#define ii pair<int,int>
#define vll vector<ll>
#define vii vector<ii>
#define vi vector<int>
#define vpll vector<pll>
#define vld vector<ld>
#define vvld vector<vld>
#define vvi vector<vi>
#define vvll vector<vll>
#define vvpll vector<vpll>
#define vvii vector<vii>
#define I insert
#define F first
#define S second
#define pb emplace_back
#define endl "\n"
#define all(x)	x.begin(),x.end()
 
const int mod=1e9+7;
// 128 bit: __int128
inline int add(int a,int b){a+=b;if(a>=mod)a-=mod;return a;}
inline int sub(int a,int b){a-=b;if(a<0)a+=mod;return a;}
inline int mul(int a,int b){return (a*1ll*b)%mod;}
inline int power(int a,int b){int rt=1;while(b>0){if(b&1)rt=mul(rt,a);a=mul(a,a);b>>=1;}return rt;}
inline int inv(int a){return power(a,mod-2);}
 
struct compare{
	bool operator() (const int &a,const int &b) const{
		return a>b;
	}
};

typedef tree<pair<ll,ll> ,null_type,less<pair<ll, ll> >,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const int N = 1e3, K = 40;

vvi arr(N, vi(N)), dst(N * N, vi(K)), points(K), adj(N * N), id(N, vi(N));
vi col(N * N);

int main()
{
	ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);cout<<setprecision(25);
	int n, m, k;
	cin >> n >> m >> k;
	for(int i = 0; i < n; i++){
		for(int j = 0; j < m; j++){
			cin >> arr[i][j], --arr[i][j], id[i][j] = i * m + j, points[arr[i][j]].pb(id[i][j]);
			if(j - 1 >= 0){
				adj[id[i][j - 1]].pb(id[i][j]);
				adj[id[i][j]].pb(id[i][j - 1]);
			}
			if(i - 1 >= 0){
				adj[id[i - 1][j]].pb(id[i][j]);
				adj[id[i][j]].pb(id[i - 1][j]);
			}
			col[id[i][j]] = arr[i][j];
		}
	}
	vi qu;
	for(int i = 0; i < k; i++){
		qu.clear();
		for(auto j : points[i])
			qu.pb(j);
		vi seen(k);
		seen[i] = 1;
		int num_seen = points[i].size(), idx = 0, tot = n * m;
		while(num_seen < tot){
			int a = qu[idx++];
			if(!seen[col[a]]){
				seen[col[a]] = 1;
				for(auto j : points[col[a]])
					if(dst[j][i] == 0)
						qu.pb(j), dst[j][i] = 1 + dst[a][i], ++num_seen;
			}
			for(auto j : adj[a])
				if(!(col[j] == i || dst[j][i] > 0))
					qu.pb(j), dst[j][i] = 1 + dst[a][i], ++num_seen;
		}
	}
	int q;
	cin >> q;
	while(q--){
		int r1, c1, r2, c2;
		cin >> r1 >> c1 >> r2 >> c2;
		--r1, --c1, --r2, --c2;
		int p1 = r1 * m + c1, p2 = r2 * m + c2;
		int ans = abs(r2 - r1) + abs(c2 - c1);
		for(int i = 0; i < k; i++)
			ans = min(ans, dst[p1][i] + dst[p2][i] + 1);
		cout << ans << endl;
	}
}