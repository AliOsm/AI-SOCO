#include<bits/stdc++.h>
using namespace std;
const int Mn = 1e6 + 10;
const int Mv = 6;
bool ok(char c){
    return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');
}
char Ch[100];
string s[Mn];
vector < char > vowel;
vector < int > v[Mn] , rd[Mn] , Rd[Mn];
vector < pair < int , int > > ly1 , ly2;
vector < int > vec[Mv][Mn];
int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int CNT = 0;
    for(char i = 'a'; i <= 'z'; i ++){
        if(ok(i)){
            vowel.push_back(i);
            Ch[i] = ++ CNT;
        }
    }
    int n , cnt = 0;  
    cin >> n;
    char vo[2 * n + 1];
    int sz[2 * n + 1] , fix[2 * n + 1];
    memset(sz , 0 , sizeof(sz));
    memset(fix , 0 , sizeof(fix));
    for(int i = 1; i <= n; i ++){
        cin >> s[i];
        char ch = 'w';
        cnt = 0;
        for(int j = 0; j < s[i].size(); j ++){
            if(ok(s[i][j])){
                cnt ++;
                ch = s[i][j];
            }
        }
        rd[cnt].push_back(i);
        sz[i] = cnt;
        vo[i] = ch;
    }
    for(int i = 1; i <= n; i ++){
        for(int j = 0; j < rd[i].size(); j ++){
            char c = vo[rd[i][j]];      
            int x = Ch[c];
            vec[x][i].push_back(rd[i][j]);
            fix[rd[i][j]] = 1;
        }
    }
    int res = 0, ans = 0;
    for(int i = 1; i <= n; i ++){
        for(int j = 0; j < vowel.size(); j ++){
            int x = Ch[vowel[j]];
            if(vec[x][i].size() % 2){
                fix[vec[x][i][vec[x][i].size() - 1]] = 0;
                vec[x][i].pop_back();
            }
            for(int k = 0; k + 1 < vec[x][i].size(); k += 2){
                ly2.push_back({vec[x][i][k] , vec[x][i][k + 1]});
                ans ++;
            }
            //if(vec[x][i].size())cout << vowel[j] << " " << i << "\n";
            //for(int k = 0; k < vec[x][i].size(); k ++) cout << s[vec[x][i][k]] << "\n";
        }
    }
    for(int i = 1; i <= n; i ++){
        if(!fix[i]){
            Rd[sz[i]].push_back(i);
            //cout << s[i] << "\n";
        }
    }
    for(int i = 1; i <= n; i ++){
        if(Rd[i].size() > 1){
            for(int j = 0; j + 1 < Rd[i].size(); j += 2){
                ly1.push_back({Rd[i][j], Rd[i][j + 1]});
                res ++;
            }
        }
    }
    if(res + 1 >= ans){
        cout << min(ans , res) << "\n";
        for(int i = 0; i < min(ans, res); i ++){
            cout << s[ly1[i].first] << " " << s[ly2[i].first] << "\n" << s[ly1[i].second] << " " << s[ly2[i].second] << "\n";
        }
    }
    else
    if(ans > res + 1){
        int p = ans - res;
        int RES = res + p / 2;
        cout << RES << "\n";
        for(int i = 0; i < ly1.size(); i ++){
            cout << s[ly1[i].first] << " " << s[ly2[i].first] << "\n" << s[ly1[i].second] << " " << s[ly2[i].second] << "\n";
        }
        for(int i = res; i + 1 < ans; i += 2){
            cout << s[ly2[i].first] << " " << s[ly2[i + 1].first] << "\n" << s[ly2[i].second] << " " << s[ly2[i + 1].second] << "\n";
        }
    }
}