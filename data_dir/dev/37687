#include <bits/stdc++.h>

using namespace std;
using namespace __gnu_cxx;


#define f first
#define s second
#define sz size()
#define em empty()
#define pb push_back
#define pf push_front
#define mem(a,b,s) for(int i=0 ; i<=s ; ++i) a[i]=b;
#define mem2(a,r,c,b) for(int i=0 ; i<=r ; ++i)    for(int j=0 ; j<=c ; ++j)    a[i][j]=b;
#define all(a) a.begin(),a.end()
#define rall(a)	a.rbegin(),a.rend()
#define mp make_pair
#define in insert
#define sc(x) scanf("%d",&x)
#define scl(a)	scanf("%lld",&a)
#define sc2(a,b)	scanf("%d%d",&a,&b)
#define rep(x,a,b)	for(int x=a ; x<=b ; ++x)
#define irep(x,a,b)	for(int x=a ; x>=b ; --x)

typedef unsigned long long ull;
typedef long long ll;
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<pair<int,int> > vii;
typedef set<int> si;
typedef set<pair<int,int> > sii;
typedef map<int,int>	mii;
typedef pair<int,char>	ic;
typedef pair<int,string> is;
typedef long double ld;
typedef priority_queue<ii> pqii;
typedef priority_queue<int>pqi;

const double pi=3.14159265358979323846264338327950288419716939937510582097494459;
const double EPS = 1e-12;
const int MAXN=1e5+10;
const ll MOD=1e9+7;
const int oo=2e9+10;
const ll OO=1e18;

int dx[]={0,1,0,-1,-1,-1,1,1};
int dy[]={1,0,-1,0,-1,1,-1,1};

int n,a[2*MAXN],u,v;
vi ver[2*MAXN];
ll tot,ans,ch[2*MAXN];

ll dfs1(int no=1, int par=-1)
{
	for(auto& e:ver[no])	if(e!=par)	ch[no]+=dfs1(e,no);
	tot+=ch[no];
	return ch[no]+=1ll*a[no];
}

void dfs2(int no=1, int par=-1, ll t=tot)
{
	ans=max(ans,t);
	for(auto& e:ver[no])	if(e!=par)	dfs2(e,no,t+ch[1]-2ll*ch[e]);
}

int main()
{
//	ios_base::sync_with_stdio(false);
//	cin.tie();
//	cout.tie();
#ifndef ONLINE_JUDGE
	freopen("In.txt","r",stdin);
//	freopen("Out.txt","w",stdout);
#else
//	freopen("battery.in","r",stdin);
//	freopen("output.txt","w",stdout);
#endif

	scanf("%d",&n);
	rep(i,1,n)	scanf("%d",a+i);
	rep(i,2,n)	scanf("%d%d",&u,&v),ver[u].pb(v),ver[v].pb(u);
	dfs1();
	dfs2();
	printf("%lld\n",ans);
}
