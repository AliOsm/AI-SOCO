#include <stdio.h>
#include <math.h>
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <bitset>
#include <time.h>
#define MODD 1000000007
#define ll long long
using namespace std;

vector<int> edges[111111];

vector<ll> dp[111111][3];

// type is either 0 (< k), 1 (=k) or 2 (>k)
vector<ll> dfs(int par, int u, int par_type, int m, int k) {
    
    
    if (!dp[u][par_type].empty())
        return dp[u][par_type];
    
    
    vector<ll> counts_types[3];
    for(int c=0;c<3;c++) {
        counts_types[c] = vector<ll>(11, 0);
        counts_types[c][0]=1;
    }
    
    for(int j=0;j<edges[u].size();j++) {
        int v=edges[u][j];
        if (v == par)
            continue;
        for(int t=0;t<3;t++) {
            vector<ll> curr = dfs(u, v, t, m, k);
            for(int c=10;c>=0;c--) {
                ll nxt = 0;
                for(int d=0;d<=c;d++) {
                    nxt += ((ll)counts_types[t][d]*(ll)curr[c-d])%MODD;
                }
                nxt %= MODD;
                counts_types[t][c]=nxt;
            }
        }
    }
    
    vector<ll> ret(11, 0);
    for(int ct=0;ct<3;ct++) {
        if (par_type >= 1 && ct == 1)
            continue;
        if (par_type == 1 && ct == 2)
            continue;
        
        ll fact;
        if (ct == 0) {
            fact = k-1;
        } else if (ct == 1) {
            fact = 1;
        } else {
            fact = m-k;
        }
        
        for(int j=0;j<=10;j++) {
            if (ct != 1)
                ret[j] += (fact*counts_types[ct][j])%MODD;
            else if (j > 0)
                ret[j] += (fact*counts_types[ct][j-1])%MODD;
            
            if (ret[j] >= MODD)
                ret[j]-=MODD;
        }
    }
    
    for(int j=0;j<=10;j++)
        ret[j]%=MODD;
    
    
    return dp[u][par_type]=ret;
    
    
}

int main() {
    int n,m;
    cin>>n>>m;
    for(int i=1;i<=n-1;i++) {
        int u,v;
        cin>>u>>v;
        edges[u].push_back(v);
        edges[v].push_back(u);
    }
    
    int k,x;
    cin>>k>>x;
    
    
    vector<ll> ans = dfs(-1, 1, 0, m, k);

    ll summ=0;
    for(int i=0;i<=x;i++)
    {
        summ = (summ + ans[i])%MODD;
    }
    
    summ%=MODD;
    summ = (summ + MODD)%MODD;
    
    cout << summ << endl;
    
    
}
