#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("O3")
#pragma optimize("SEX_ON_THE_BEACH")
#pragma GCC optimize("fast-math")
#include<bits/stdc++.h>

using ll = long long int;
using ull = long long int;
using dd = double;
using ldd = double;//long double;

namespace Hashes {
    const int mod197 = 1e9 + 7;
    const int mod199 = 1e9 + 9;
    const int modfft = 998244353;
    int MOD = mod197;

    template<typename T = int>
    struct Hash {
        T me, mod;

        Hash() {}
        Hash(T _me, T _mod = MOD) { me = _me, mod = _mod; if (me >= mod) me %= mod; }

        Hash operator+ (Hash to) {
            to.me += me;
            if (to.me >= to.mod)
                to.me -= to.mod;
            return to;
        }
        Hash operator- (Hash to) {
            to.me -= me;
            to.me *= -1;
            if (to.me < 0)
                to.me += to.mod;
            return to;
        }
        Hash operator* (Hash to) {
            to.me *= me;
            to.me %= to.mod;
            return to;
        }
        Hash& operator+= (Hash to) {
            me += to.me;
            if (me >= mod)
                me -= mod;
            return *this;
        }
        Hash& operator-= (Hash to) {
            me -= to.me;
            if (me < 0)
                me += mod;
            return *this;
        }
        Hash& operator*= (Hash to) {
            me *= to.me;
            me %= mod;
            return *this;
        }
        bool operator==(Hash to) {
            return me == to.me;
        }
        T operator*() {
            return me;
        }
    };
}

namespace someUsefull {
    template<typename T1, typename T2>
    inline void checkMin(T1& a, T2 b) {
        if (a > b)
            a = b;
    }

    template<typename T1, typename T2>
    inline void checkMax(T1& a, T2 b) {
        if (a < b)
            a = b;
    }

    const int _popcount_size_ = 16;
    char _bits_count_[1 << _popcount_size_];

    inline void _build_bits_count_() {
        for (int i = 1, j = 0; i < (1 << _popcount_size_); ++i) {
            if (i & (1 << j + 1)) ++j;
            _bits_count_[i] = _bits_count_[i ^ (1 << j)] + 1;
        }
    }

    template<typename T1 = int, typename T2 = int>
    inline T1 popcnt(T2 x) {
        T1 ans = 0;
        while (x) {
            ans += _bits_count_[x & (1 << _popcount_size_) - 1];
            x >>= _popcount_size_;
        }
        return ans;
    }
}

//name spaces
using namespace std;
using namespace Hashes;
using namespace someUsefull;
//end of name spaces

//defines
#define ff first
#define ss second
#define all(x) (x).begin(), (x).end()

#define NO cout << "NO" << '\n';
#define No cout << "No" << '\n';
#define YES cout << "YES" << '\n';
#define Yes cout << "Yes" << '\n';
//end of defines
//#undef HOME
//debug defines
#ifdef HOME
    #define debug(x) cout << #x << " " << x << endl;
    #define debug_p(x) cout << #x << " " << x.ff << " " << x.ss << endl;
    #define debug_v(x) {cout << #x << " "; for (auto ioi : x) cout << ioi << " "; cout << endl;}
    #define debug_vp(x) {cout << #x << " "; for (auto ioi : x) cout << '[' << ioi.ff << " " << ioi.ss << ']'; cout << endl;}
    #define debug_v_v(x) {cout << #x << "/*\n"; for (auto ioi : x) { for (auto ioi2 : ioi) cout << ioi2 << " "; cout << '\n';} cout << "*/" << #x << endl;}
    int jjj;
    #define wait() cin >> jjj;
    #define PO cout << "POMELO" << endl;
    #define OL cout << "OLIVA" << endl;
    #define gen_clock(x) ll x = clock(); cout << "Clock " << #x << " created" << endl;
    #define check_clock(x) cout << "Time spent in " << #x << ": " << clock() - x << endl; x = clock();
    #define reset_clock(x) x = clock();
    #define say(x) cout << x << endl;
#else
    #define debug(x) 0;
    #define debug_p(x) 0;
    #define debug_v(x) 0;
    #define debug_vp(x) 0;
    #define debug_v_v(x) 0;
    #define wait() 0;
    #define PO 0;
    #define OL 0;
    #define gen_clock(x) 0;
    #define check_clock(x) 0;
    #define reset_clock(x) 0;
    #define say(x) 0;
#endif // HOME
//end of debug defines

void solve(int test) {
    int n;
    cin >> n;
    vector<int> arr(n);
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }
    vector<int> pr;
    vector<int> div(500000);
    vector<bool> was(500000);
    for (int i = 2; i < was.size(); ++i) {
        if (was[i]) continue;
        pr.push_back(i);
        for (ll j = (ll)i * i; j < was.size(); j += i) {
            div[j] = i;
            was[j] = 1;
        }
    }
    map<int, vector<int>> opa;
    for (int i : arr) {
        debug(i);
        map<int, int> d;
        int j = i;
        while (div[j]) {
            d[div[j]]++;
            j /= div[j];
        }
        d[j]++;
        debug_vp(d);
        for (auto i : d) {
            opa[i.ff].push_back(i.ss);
        }
    }
    ll ans = 1;
    for (auto i : opa) {
        if (i.ss.size() < n) i.ss.push_back(0);
        if (i.ss.size() < n) i.ss.push_back(0);
        sort(all(i.ss));
        int p = i.ss[1];
        for (int j = 0; j < p; ++j) ans *= i.ff;
    }
    cout << ans;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cout.tie(0);
    cin.tie(0);
    int t = 1;
    //cin >> t;
    for (int i = 0; i < t; ++i) {
        solve(i+1);
    }
    return 0;
}
/*

*/
