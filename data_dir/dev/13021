#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>


using namespace std;

#define ll long long
#define str string

const int INF = 1e9 + 228;

int dp[1001][1001], w1[1001], b1[1001], w[1001], b[1001];

int weight = 0, beauty = 0;

vector<int> g[1001], gr[1001];


vector<int> order;

bool used[1001];

void dfs(int v) {
	used[v] = true;
	weight += w1[v];
	beauty += b1[v];
	for (auto u : g[v]) {
		if (!used[u]) {
			dfs(u);
		}
	}
	order.push_back(v);
}


int main() {
	int n, m, W;
	scanf("%d %d %d", &n, &m, &W);
	for (int i = 1; i <= n; ++i) {
		for (int j = 1; j <= W; ++j) {
			dp[i][j] = -INF;
		}
	}
	for (int i = 1; i <= n; ++i) {
		scanf("%d", &w1[i]);
	}
	for (int i = 1; i <= n; ++i) {
		scanf("%d", &b1[i]);
	}
	for (int i = 0; i < m; ++i) {
		int u, v;
		scanf("%d %d", &u, &v);
		g[u].push_back(v);
		g[v].push_back(u);
	}
	int num_comp = 1;
	for (int i = 1; i <= n; ++i) {
		if (!used[i]) {
			dfs(i);
			w[num_comp] = weight;
			b[num_comp] = beauty;
			gr[num_comp] = order;
			num_comp++;
			weight = 0;
			beauty = 0;
			order.clear();
		}
	}
	int c = --num_comp;
	for (int i = 0; i <= c; ++i) {
		dp[i][0] = 0;
	}
	for (int i = 1; i <= c; ++i) {
		for (int j = 1; j <= W; ++j) {
			dp[i][j] = dp[i - 1][j];
			if (w[i] <= j) {
				dp[i][j] = max(dp[i][j], dp[i - 1][j - w[i]] + b[i]);
			}
			for (auto elem : gr[i]) {
				if (w1[elem] <= j) {
					dp[i][j] = max(dp[i][j], dp[i - 1][j - w1[elem]] + b1[elem]);
				}
			}
		}
	}
	int maxim = 0;
	for (int j = 1; j <= W; ++j) {
		maxim = max(maxim, dp[c][j]);
	}
	printf("%d\n", maxim);
    return 0;
}


 
 
 
 
 
 
 
 
 
 
 
 
