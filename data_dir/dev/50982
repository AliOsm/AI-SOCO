#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define ff(i,s,e) for(int i=(s);i<(int)(e);i++)
#define fr(i,s,e) for(int i=(e);i-->(int)(s);)
#define FF(i,s,e) for(int i=(s);i<=(int)(e);i++)
#define Fr(i,s,e) for(int i=(e);i>=(int)(s);i--)

#define gcd(a,b) __gcd(a,b)
#define all(a) a.begin(),a.end()
#define ln putchar('\n')
#define sp putchar(' ')
using namespace __gnu_pbds;
using namespace std;

void init(int i){
#ifndef ONLINE_JUDGE
  char str[100];sprintf(str,"xx/%d.txt",i);freopen(str,"r",stdin);
#endif
}

typedef tree<int,int,less<int>,rb_tree_tag,tree_order_statistics_node_update>imap;

typedef long long ll;

typedef pair<int,int> pii;
typedef map<int,int> mii;
typedef map<ll,ll> mll;
typedef pair<ll,ll> pll;
typedef vector<int> vi;
typedef vector<bool> vb;
typedef vector<pii> vpii;
typedef vector<ll> vll;
typedef vector<vll> vvll;
typedef vector<vi> vvi;
typedef vector<double> vd;

template<class T>inline int pr(const T&v);
template<class T, class...Args> inline int pr(const T&a,const Args (&... args));

inline int scan(int&i){return scanf("%d",&i);}
inline int scan(ll&i){return scanf("%" PRId64,&i);}
inline int scan(double&i){return scanf("%lf",&i);}
inline int scan(char&i){int c;while((c=getchar())!=EOF&&c<=' ');i=c;return c!=EOF;}
inline int scan(string&i){i.clear();int c;while((c=getchar())!=EOF&&c<=' ');while(c>' ')i+=c,c=getchar();return i.size();}
inline int scanln(string&i){i.clear();int c;while((c=getchar())!=EOF&&c<' ');while(c>=' ')i+=c,c=getchar();return i.size();}
template<class T> inline int scan(T&a){a.sc();}
template<class T, class U> inline int scan(pair<T,U>&a){scan(a.first),scan(a.second);}

inline int pr(const int& i){printf("%d",i);}
inline int pr(const long& i){printf("%ld",i);}
inline int pr(const unsigned int& i){printf("%x",i);}
inline int pr(const bool i){printf("%d",i);}
inline int pr(const ll&i){printf("%" PRId64,i);}
inline int pr(const double&i){printf("%.12f",i);}
inline int pr(const float&i){printf("%.4f",i);}
inline int pr(const char&i){putchar(i);}
inline int pr(const char*i){printf("%s",i);}
inline int pr(const string&i){for(char c:i)pr(c);}

template<class T>inline int scan(vector<T>&v){for(T&i:v)scan(i);}
template<class T>inline int pr(const vector<T>&v){if(v.empty())return 0;pr(v[0]);ff(i,1,v.size())pr(' '),pr(v[i]);}
template<class T,class U>inline int pr(const pair<T,U>&p){pr(p.first,p.second);}
template<class T>inline int prlns(const vector<T>&v){ff(i,0,v.size())pr(v[i]),pr('\n');}
template<class T, class...Args> inline int scan(T&a,Args (&... args)){return scan(a),scan(args...);}
template<class T, class...Args> inline int pr(const T&a,const Args (&... args)){pr(a),pr(' '),pr(args...);}
template<class T> inline int prln(const T&a){pr(a),ln;}
template<class T, class...Args> inline int prln(const T&a,const Args (&... args)){pr(a),sp,prln(args...);}
template<class...Args> inline int rpr(const Args (&... args)){
#ifndef ONLINE_JUDGE
  pr(args...),ln;fflush(stdout);
#endif
}
inline int gi(){int x;scan(x);return x;}
inline int gis(){int x;scan(x);return x-1;}

template<class T>inline int pr(const T&v){v.print();}

template<class T, class U> inline void smax(T&a,const U&b){if(a<b)a=b;}
template<class T, class U> inline void smin(T&a,const U&b){if(b<a)a=b;}

template<class T> T& operator +=(vector<T>&v,const T&a){v.push_back(a);return v.back();}

const int inf = ~((1<<31));
const ll LargeMod = 4611686018427388039;
const ll MOD = 1E9+7;
const ll linf = 1E17;
typedef unsigned int uint;
const ll lprime = 37ll;

class ftree {
  vector<pair<pii,pii> > v;
  int base;
  
  inline pair<pii,pii> comb(pair<pii,pii> a, pair<pii,pii> b) {
    if (a < b)
      return {b.first, max(b.second, a.first)};
    else 
      return {a.first, max(b.first, a.second)};
  }
public:
  void resize(int n) {
    int k = 2;
    while (k>>1 <= n)k <<= 1;
    base = k >> 1;
    v.resize(k, {{-1,-1},{-1,-1}});
  }
  void erase(int i){
    insert({-1,-1},i);
  }
  void insert(pii p, int i) {
    i += base;
    v[i] = {p, {-1,-1}};
    while(i>>=1)
      v[i] = comb(v[i*2], v[i*2+1]);
  }
  pair<pii,pii> get(int l, int r) {
    if (l >= r)return {{-1,-1},{-1,-1}};
    l += base;
    r += base;
    auto res = v[l];
    for (;l >> 1 != r >> 1; l>>=1, r>>=1) {
      if ((l & 1) == 0)
        res = comb(res, v[l+1]);
      if (r & 1)
        res = comb(res, v[r-1]);
    }
    return res;
  }
};


struct problem{
  int n;
  ftree t;
  ll k = inf;
  ll rec(int l, int r, int k) {
    if (l > r)
      return rpr(l,r,k,0), 0;
    ll res = 0;
    auto p = t.get(l,r+1);
    pii lo = p.second, hi = p.first;
    if(hi.first == -1)
      return rpr(l,r,k,res), res;
    t.erase(hi.second);
    res += k;
    if (lo.first == -1)
      return rpr(l,r,k,res), res;
    t.erase(lo.second);
    res += hi.first;
    if (hi.second < lo.second) {
      res += rec(hi.second+1,  lo.second-1, lo.first);
      res += rec(l,  hi.second-1, hi.first);
      res += rec(lo.second+1, r, lo.first);
    } else {
      res += rec(lo.second+1,  hi.second-1, lo.first);
      res += rec(l,  lo.second-1, lo.first);
      res += rec(hi.second+1, r, hi.first);
    }
    return rpr(l,r,k,res), res;
  }
  
  int solve() {
    auto p = t.get(0, n);
    ll ans = 0;
    while (p.second.first != -1) {
      pii hi = p.first, lo = p.second;
      int l = min(hi.second, lo.second);
      int r = max(hi.second, lo.second);
      rpr("step in:",l, r, ans);
      ans += rec(l+1, r-1, lo.first);
      auto u = max(t.get(0,l), t.get(r+1, n));
      if(~u.first.second) {
        ans += u.first.first;
      }
      t.erase(p.second.second);
      p = t.get(0,n);
    }
    pr(ans);
  }
  
  int init() {
    
  }
  
  int get_input() {
    scan(n);
    t.resize(n);
    ff(i,0,n){
      int x = gi();
      if (i == 0 || i == n - 1)
        smin(k, x);
      t.insert({x, i}, i);
    }
  }
};


main(){
  init(4);
  problem *a = new problem();
  a->get_input();
  a->init();
  a->solve();
}