#include <bits/stdc++.h>
using namespace std;
#define oo 1000000000
#define mod 1000000007
const int N = 200010;
int n , m , ans[N];
vector< pair<int,int> > arr;
vector< int > g[N] , cur[N];
bool vis[N];
bool root[N];
vector< pair< pair<int,int> , int > > q;

set < pair<int,int> > st;
set < pair<int,int> > :: iterator it;

void DFS(int node , int d){
    st.insert(make_pair(arr[node].second , d));
    for(int i = 0; i < (int)cur[node].size();i++){
        it = st.lower_bound(make_pair(q[cur[node][i]].first.second , 0));
        if(it != st.end()){
            ans[q[cur[node][i]].second] = d - it->second + 1;
        }
    }
    for(int i = 0 ;i < (int)g[node].size();i++){
        if(vis[g[node][i]]) continue;
        DFS(g[node][i] , d + 1);
    }
    st.erase(st.find(make_pair(arr[node].second , d)));
}

int main(){
    scanf("%d%d",&n,&m);
    memset(ans,-1,sizeof(ans));
    arr.resize(n);
    q.resize(m);
    for(int i = 0; i < n;i++){
        scanf("%d%d",&arr[i].first,&arr[i].second);
    }
    sort(arr.begin(),arr.end());

    for(int i = n - 1;i >= 0;i--){
        root[i] = true;
        it = st.upper_bound(make_pair(arr[i].second , oo));
        if(it != st.begin()){
            it--;
            if(arr[it->second].second > arr[i].second){
                g[it->second].push_back(i);
                root[i] = false;
            }
        }
        while((int)st.size() > 0){
            it = st.begin();
            if(arr[it->second].second <= arr[i].second) st.erase(it); else break;
        }
        st.insert(make_pair(arr[i].first , i));
    }
    st.clear();
    for(int i = 0 ;i < m;i++){
        scanf("%d%d",&q[i].first.first,&q[i].first.second);
        q[i].second = i;
    }
    sort(q.begin(),q.end());
    int idx = -1, mx = -1 , j = 0 ;
    for(int i = 0 ;i < (int)q.size();i++){
        while(j < n && arr[j].first <= q[i].first.first){
            if(arr[j].second > mx){
                mx = arr[j].second;
                idx = j;
            }
            j++;
        }
        if(mx > q[i].first.first){
            cur[idx].push_back(i);
        }
    }
    for(int i = 0; i < n;i++){
        if(root[i]) DFS(i , 0);
    }
    for(int i = 0 ;i < m;i++){
        printf("%d\n",ans[i]);
    }
    return 0;
}