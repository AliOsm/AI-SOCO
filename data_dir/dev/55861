// start of CP 2.0
#include <bits/stdc++.h>

//____By:sirjan13____

#define ll long long int
#define ld long double
#define mod 1000000007
#define mod1 mod
#define mod2 100000009
#define show(a) for(int i=0;i<a.size();i++) cout<<a[i]<<" ";
#define fi first
#define se second
#define vi vector<int>
#define vs vector<string>
#define vll vector<ll>
#define pb push_back
#define pi pair<int,int>
#define si set<int>
#define sll set<ll>
#define pll pair<ll, ll>
#define sci(x) scanf("%d",&x)
#define scs(x)  scanf("%s", x)
#define scll(x) scanf("%I64d",&x)
#define all(v) v.begin(),v.end()
#define sot(v) sort(v.begin(), v.end())
#define maxheap priority_queue<int>
#define minheap priority_queue<int,vector<int>,greater<int>>
#define mp make_pair
#define fast_io() cin.sync_with_stdio(false);cout.sync_with_stdio(false);
#define PI 3.1415926535
#define long_zero 0ll
#define long_one 1ll

inline int sbt(int x){return __builtin_popcount(x);}

using namespace std;

#define TRACE
#ifdef TRACE
#define deb(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << std::endl;
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define deb(...)
#endif
#define N 113
ld dp[N][N][N];
int main() {
    fast_io()
    ld R, P, S;
    cin >> R >> S >> P;
    dp[(int)R][(int)P][(int)S] = 1.0;
    for(int r = (int)R; r >= 0; r--) {
        for(int p = (int)P; p >= 0; p--) {
            for(int s = (int)S; s >= 0; s--) {
                ld deno = r * p + r * s + p * s;
                if(r > 0 && p > 0) {
                    dp[r - 1][p][s] += (((r * p * dp[r][p][s])) / deno);
                }
                if(r > 0 && s > 0) {
                    dp[r][p][s - 1] += (((r * s * dp[r][p][s]) / deno));
                }
                if(p > 0 && s > 0) {
                    dp[r][p - 1][s] += (((p * s * dp[r][p][s]) / deno));
                }
            }
        }
    }
    ld sum1 = 0.0, sum2 = 0.0, sum3 = 0.0;
    for(int i = 0; i < N; i++) {
        sum1 += dp[i][0][0];
        sum2 += dp[0][i][0];
        sum3 += dp[0][0][i];
    }
    cout << fixed << setprecision(13) << sum1 << ' ' << sum3 << ' ' << sum2;
    return 0;
}