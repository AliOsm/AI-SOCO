#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>
#include <random>
#include <bitset>
#include <iomanip>


typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(tint i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl



using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) )
		Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

const tint maxN = 1024;

tint y[maxN];

bool alineados (tint i, tint j, tint k)
{
	return ( (y[j]-y[i])*(k-j) == (y[k]-y[j])*(j-i) );
}

int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n;
	while (cin >> n)
	{
		forn(i,n)
			cin >> y[i];
		bool sePuede = false;
		forsn(i,1,n) // elegimos el que se une con y_0
		{
			vector<tint> noAlineado;
			forn(j,n)
				if (!alineados(0,i,j))
					noAlineado.push_back(j);
			tint r = noAlineado.size();
			bool intento = (r > 0);
			if (r >= 2)
			{
				bool mismaLinea = true;
				forsn(j,2,r)
					mismaLinea &= alineados(noAlineado[0],noAlineado[1],noAlineado[j]);
				mismaLinea &= ( (y[i]-y[0])*(noAlineado[0]-noAlineado[1]) == i*(y[noAlineado[0]]-y[noAlineado[1]]) );
				intento &= mismaLinea;
			}
			sePuede |= intento;
		}
		bool todoElRestoAlineado = true;
		forsn(i,3,n)
			todoElRestoAlineado &= alineados(i-2,i-1,i);
		todoElRestoAlineado &= !alineados(0,1,2);
		if (sePuede or todoElRestoAlineado)
			cout << "Yes\n";
		else
			cout << "No\n";
	}
	return 0;
}



