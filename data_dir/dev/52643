
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j123 = n; (i) < j123; (i) ++)
#define rep1(i, n) for (int (i) = 1, j123 = n; (i) <= j123; (i) ++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout << #a << " :";for(int i123=(x);i123<=(y);i123++) cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int(x.size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

ll C, H1, H2, W1, W2;
ll gcd(ll a, ll b)
{
  while (b != 0)
  {
    ll tmp = a % b;
    a = b;
    b = tmp;
  }
  return a;
}
ll lcm(ll a, ll b)
{
  return a * b / gcd(a, b);
}
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0);
  cin >> C >> H1 >> H2 >> W1 >> W2;
  if (W1 > W2)
  {
    swap(H1, H2);
    swap(W1, W2);
  }
  // the first item is lighter
  ll max2 = C / W2;
  if (max2 <= 1e7)
  {
    ll best = -1;
    for (ll num2 = 0; num2 <= max2; num2++)
    {
      ll curW2 = W2 * num2;
      ll left = C - curW2;
      ll num1 = left / W1;
      ll cur = num1 * H1 + num2 * H2;
      best = max(best, cur);
    }
    assert(best>=0);
    cout << best << endl;
    return 0;
  }
  else
  {
    ll L = lcm(W1, W2);
    assert(L <= C);
    ll interchangableNum1 = L / W1;
    ll interchangableNum2 = L / W2;
    ll interchangableH1 = H1 * interchangableNum1;
    ll interchangableH2 = H2 * interchangableNum2;
    if (interchangableH1 <= interchangableH2)
    {
      swap(W1,W2);
      swap(H1,H2);
    }
    // item 1 is better deal
    // thus we shouldn't buy more than or equal to (L/W2) item 2's
    ll best = -1;
    for (ll num2 = 0; num2 <= (L/W2); num2++)
    {
      ll curW2 = W2 * num2;
      ll left = C - curW2;
      if (left < 0) continue;
      ll num1 = left / W1;
      ll cur = num1 * H1 + num2 * H2;
      best = max(best, cur);
    }
    assert(best>=0);
    cout << best << endl;
    return 0;
  }
}
