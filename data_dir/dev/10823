#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;

int mptr = 0;
map<string, int> mapp;
int getval(string& s) {
	if (mapp[s] == 0) {
		mptr++;
		mapp[s] = mptr;
	}
	return mapp[s];
}

set<int> adjlist[45];

void add_edges(set<int>& s) {
	for (auto u : s) {
		for (auto v : s) {
			if (u == v)
				continue;
			adjlist[u].insert(v);
		}
	}
	s.clear();
}

int n, m, m2, dp[1 << 20], dp2[1 << 20], ans;
int main()
{
	fastread;
	cin >> n >> m;
	m2 = m / 2;
	if (m == 1) {
		cout << 1;
		return 0;
	}
	set<int> s;
	for (int i = 0; i < n; i++) {
		int t;
		cin >> t;
		if (t == 1) {
			add_edges(s);
		} else {
			string tmp;
			cin >> tmp;
			s.insert(getval(tmp) - 1);
		}
	}
	add_edges(s);
	for (int i = 1; i < (1 << m2); i++) {
		bitset<20> b(i);
		for (int j = 0; j < m2; j++) {
			if (b.test(j)) {
				b.reset(j);
				dp[i] = dp[b.to_ulong()];
				for (auto u : adjlist[j]) {
					if (u < m2)
						b.reset(u);
				}
				dp[i] = max(dp[i], dp[b.to_ulong()] + 1);
				break;
			}
		}
	}
	ans = dp[(1 << m2) - 1];
	for (int i = 1; i < (1 << (m - m2)); i++) {
		bitset<20> b(i);
		for (int j = 0; j < (m - m2); j++) {
			if (b.test(j)) {
				b.reset(j);
				dp2[i] = dp2[b.to_ulong()];
				for (auto u : adjlist[j + m2]) {
					if (u >= m2)
						b.reset(u - m2);
				}
				dp2[i] = max(dp2[i], dp2[b.to_ulong()] + 1);
				break;
			}
		}
		b.reset();
		bitset<20> c(i);
		for (int j = 0; j < (m - m2); j++) {
			if (c.test(j)) {
				for (auto u : adjlist[j + m2]) {
					if (u < m2){
						b.set(u);
					}
				}
			}
		}
		for (int j = 0; j < m2; j++) {
			b.flip(j);
		}
		ans = max(ans, dp2[i] + dp[b.to_ulong()]);
	}
	cout << ans;
	return 0;
}