#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

const int N = 2e5 + 5;
int arr[N], parity[N], ans[N], n;
vector<int> g[N];

bool valid(int pos)
{
	return pos >= 0 && pos < n;
}

int main()
{
	ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
	cin >> n;
	for(int i = 0; i < n; i++)
		cin >> arr[i], parity[i] = (arr[i] & 1) > 0 ? 1 : 0;
	memset(ans, -1, sizeof ans);
	queue<int> que;
	for(int i = 0; i < n; i++)
	{
		if(valid(i + arr[i]))
		{
			if(parity[i] == parity[i + arr[i]])
				g[i + arr[i]].push_back(i);
			else
				ans[i] = 1;
		}
		if(valid(i - arr[i]))
		{
			if(parity[i] == parity[i - arr[i]])
				g[i - arr[i]].push_back(i);
			else
				ans[i] = 1;
		}
		if(ans[i] == 1)
			que.push(i);
	}
	while(que.size())
	{
		int node = que.front();
		que.pop();
		for(auto &x: g[node])
			if(ans[x] == -1)
				ans[x] = ans[node] + 1, que.push(x);
	}
	for(int i = 0; i < n; i++)
		cout << ans[i] << ' ';
	return 0;
}
