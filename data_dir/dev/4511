#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

int n, p, d[100005], up[100005][19], q, t, tin[100005], tout[100005];
bool used[100005], a[3];
vector<int> g[100005];

void dfs(int v, int p) {
    tin[v] = ++t;
    used[v] = 1;
    d[v] = d[p] + 1;
    if (v == 1) {
        up[v][0] = v;
    } else {
        up[v][0] = p;
    }
    for (int i = 1; i <= 17; i++) {
        if (v == 1) {
            up[v][i] = v;
        } else {
            up[v][i] = up[up[v][i - 1]][i - 1];
        }
    }
    for (int i : g[v]) {
        if (!used[i]) {
            dfs(i, v);
        }
    }
    tout[v] = ++t;
}

int lca(int a, int b) {
    if (d[a] > d[b])
        swap(a, b);
    for (int i = 17; i >= 0; i--) {
        if (d[up[b][i]] >= d[a]) {
            b = up[b][i];
        }
    }
    if (a == b)
        return a;
    for (int i = 17; i >= 0; i--) {
        if (up[a][i] != up[b][i]) {
            a = up[a][i], b = up[b][i];
        }
    }
    return up[a][0];
}

int dist(int a, int b) {
    return d[a] + d[b] - 2 * d[lca(a, b)];
}

bool par(int a, int b) {
    return tin[a] <= tin[b] && tout[a] >= tout[b];
}

int res(int s, int f, int t) {
    int x = lca(s, t), y = lca(f, t);
    if (x == y) {
        return dist(t, lca(s, f));
    }
    if (par(x, y))
        return dist(y, t);
    else
        return dist(x, t);
}

int main() {
//    ios_base::sync_with_stdio(0);
//    cin.tie(0);
    cin >> n >> q;
    for (int i = 2; i <= n; i++) {
        cin >> p;
        g[i].push_back(p);
        g[p].push_back(i);
    }
    dfs(1, 0);
    for (int i = 0; i < q; i++) {
        int x, y, z;
        cin >> x >> y >> z;
        int ans = 0;
        ans = max(ans, res(x, y, z)),
        ans = max(ans, res(z, x, y)),
        ans = max(ans, res(y, z, x));
        cout << ans + 1 << "\n";
    }
}
