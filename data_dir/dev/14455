#include <iostream>
#include <vector>
#include <cstdio>
#include <set>
using namespace std;

const int kBase = 5;
const int kModulus[2] = {1e9 + 3, 1e9 + 9};
const int kMaxL = 6e5;

int n, m;
set<pair<int, int> > st;
int pw[2][kMaxL + 1];

int main()
{
 //   freopen("input.txt", "r", stdin);

    ios_base::sync_with_stdio(false);

    for (int i = 0; i < 2; ++i) {
        pw[i][0] = 1;
        for (int j = 1; j <= kMaxL; ++j) {
            pw[i][j] = (1LL * kBase * pw[i][j - 1]) % kModulus[i];
        }
    }

    cin >> n >> m;
    for (int i = 0; i < n; ++i) {
        string s;
        cin >> s;

        int hash[2];
        hash[0] = hash[1] = 0;

        for (int j = 0; j < (int) s.length(); ++j) {
            for (int k = 0; k < 2; ++k) {
                hash[k] += (1LL * (s[j] - 'a' + 1) * pw[k][j]) % kModulus[k];
                if (hash[k] >= kModulus[k]) {
                    hash[k] -= kModulus[k];
                }
            }
        }

        st.insert(make_pair(hash[0], hash[1]));
    }

    for (int i = 0; i < m; ++i) {
        string s;
        cin >> s;

        int hash[2];
        hash[0] = hash[1] = 0;

        for (int j = 0; j < (int) s.length(); ++j) {
            for (int k = 0; k < 2; ++k) {
                hash[k] += (1LL * (s[j] - 'a' + 1) * pw[k][j]) % kModulus[k];
                if (hash[k] >= kModulus[k]) {
                    hash[k] -= kModulus[k];
                }
            }
        }

        bool found = false;

        for (int j = 0; j < (int) s.length(); ++j) {
            for (int c = 1; c <= 3; ++c) {
                if (c != s[j] - 'a' + 1) {
                    for (int k = 0; k < 2; ++k) {
                        hash[k] -= (1LL * (s[j] - 'a' + 1) * pw[k][j]) % kModulus[k];
                        if (hash[k] < 0) {
                            hash[k] += kModulus[k];
                        }
                        hash[k] += (1LL * c * pw[k][j]) % kModulus[k];
                        if (hash[k] >= kModulus[k]) {
                            hash[k] -= kModulus[k];
                        }
                    }

                    pair<int, int> temp(hash[0], hash[1]);
                    if (st.find(temp) != st.end()) {
                        found = true;
                    }

                    for (int k = 0; k < 2; ++k) {
                        hash[k] += (1LL * (s[j] - 'a' + 1) * pw[k][j]) % kModulus[k];
                        if (hash[k] >= kModulus[k]) {
                            hash[k] -= kModulus[k];
                        }
                        hash[k] -= (1LL * c * pw[k][j]) % kModulus[k];
                        if (hash[k] < 0) {
                            hash[k] += kModulus[k];
                        }
                    }
                }
            }
        }

        if (found) {
            cout << "YES" << endl;
        } else {
            cout << "NO" << endl;
        }
    }

    return 0;
}
