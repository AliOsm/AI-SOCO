#include<bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
using namespace __gnu_pbds;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>pbds;
//#pragma comment(linker, "/stack:200000000")
#define mod ( ll  ) ( 998244353 )  //( 1e9 + 7 )
#define ll long long int
#define inf ( ll  )( 1e9 + 10 )
#define mxs (int)( 1e6 + 10 )
//#define md  int mid = ( l + r )>>1;
//int dx[]={+1,-1,+0,+0};///Four Directions
//int dy[]={+0,+0,+1,-1};///Four directions
//int dx [] = {+1,-1,+0,+0,-1,-1,+1,+1};///Eight Directions
//int dy [] = {+0,+0,+1,-1,+1,-1,-1,+1};///Eight Directions
ll n , m , cases , t;
string  ss , s , s2 , s3 , s4 , ans , s5;
ll ar [ mxs ] , ar2 [ mxs ];
vector < ll > v;
void brainfuck();
void checker();
bool pal();
int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    ios_base::sync_with_stdio(NULL);
    cin.tie(NULL);
    cout.tie(NULL);
    brainfuck();
    return 0;
}
void brainfuck()
{
    cin>>t;
    while( t-- )
    {
        cin>>s;
        n = s.size();
        checker();
        ss = ans;
        reverse( s.begin() , s.end() );
        checker();
        if ( ss.size() > ans.size() )cout<<ss<<"\n";
        else cout<<ans<<"\n";
    }
}
void checker()
{
    s2 = s;
    ans = "";
    reverse( s2.begin() , s2.end() );
    for ( int i = 0 ; i < n; i++ )
    {
        s3 = "";
        for ( int j = 0 ; j <= i; j++ )s3 += s [ j ];

        int a = n - i - 1;
        s4 = s3;
        //cerr<<i<<"   "<<s3<<" ";
        if ( pal() && ans.size() < s3.size())ans = s3;

        s5 = "";
        for ( int j = 0; j < a; j++ )
        {
            if ( s2 [ j ] == s [ j ] )s5 += s2 [ j ];
            else break;
        }
        reverse( s5.begin() , s5.end() );
        s3 += s5;
        s4 = s3;
        //cerr<<s3<<"  "<<pal()<<endl;
        if ( pal() && ans.size() < s3.size() )ans = s3;
    }
}
bool pal()
{
    s5 = s4;
    reverse( s5.begin() , s5.end() );
    if ( s4 != s5 )return 0;
    return 1;
}
