#include <bits/stdc++.h>
#define MAX (ll)(1e6 + 7)
#define INF (ll)(1e5 + 7)
#define MOD (ll)(998244353)
#define PI (double)(3.14159265)
#define IO ios_base :: sync_with_stdio (false);
#define LOG 22

using namespace std;
using ll = long long;

vector<int> gr[MAX];
map <string, int> ma = {{"AND", 1}, {"OR", 2}, {"XOR", 3}, {"NOT", 0}, {"IN", 4}};

bool ans[MAX], out[MAX];
int val[MAX];

void dfs2 (int node) {
	if (!val[node]) {
		dfs2 (gr[node][0]);
	}
	else if (val[node] == 1) {
		int u = gr[node][0], v = gr[node][1];
		if (out[u]) {
			dfs2 (v);
		}
		if (out[v]) {
			dfs2 (u);
		}
	}
	else if (val[node] == 2) {
		int u = gr[node][0], v = gr[node][1];
		if (out[u] == 0) {
			dfs2 (v);
		}
		if (out[v] == 0) {
			dfs2 (u);
		}
	}
	else if (val[node] == 3) {
		int u = gr[node][0], v = gr[node][1];
		dfs2 (u), dfs2 (v);
	}
	else if (val[node] == 4) {
		ans[node] = 1;
	}
}

int dfs1 (int node) {
	if (gr[node].size () == 0) {
		return out[node];
	}
	bool f1 = out[gr[node][0]] = dfs1 (gr[node][0]);
	if (val[node] == 0) {
		return !f1;
	}
	bool f2 = out[gr[node][1]] = dfs1 (gr[node][1]);
	if (val[node] == 1) {
		return f1 & f2;
	}
	if (val[node] == 2)  {
		return f1 | f2;
	}
	return f1 ^ f2;
}

int main () {
	IO;
	int n;
	cin >> n;
	for (int i = 1; i <= n; i++) {
		string st;
		cin >> st;
		val[i] = ma[st];
		if (!val[i]) {
			int u;
			cin >> u;
			gr[i].push_back (u);
		}
		else if (val[i] && val[i] < 4) {
			int u, v;
			cin >> u >> v;
			gr[i].push_back (u);
			gr[i].push_back (v);
		}
		else {
			cin >> out[i];
		}
	}
	out[1] = dfs1 (1);
	dfs2 (1);
	for (int i = 1; i <= n; i++) {
		if (val[i] == 4) {
			cout << (out[1] ^ ans[i]);
		}
	}
	cout << "\n";
}
