#pragma GCC optimize ("Ofast")
#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define ll long long
#define ld long double
#define all(a) a.begin(),a.end()
#define ull unsigned long long
#define endl '\n'
#define ios ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define iter multiset< int >::iterator
#define iter1 vector<int>::iterator
#define int long long
using namespace std;
using namespace __gnu_pbds;

template<class T>
using ordered_set=tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

template<class T>
using ordered_multiset=tree<T,null_type,less_equal<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rnd1(chrono::steady_clock::now().time_since_epoch().count());

//find_by_order
//order_of_key

const int N=3e5+7;
const int inf=1e18+1e9;
const int mod=998244353;
const ld eps=1e-9;

//const int MAX_MEM=1e8;
//int mpos=0;
//char mem[MAX_MEM];
//
//inline void * operator new(size_t n){
//    char *res=mem+mpos;
//    mpos+=n;
//    assert(mpos<=MAX_MEM);
//    return (void*)res;
//}
//
//inline void operator delete(void *) {}

vector<int>g[N];
int dp[N][2][2];
int n;

void dfs(int v,int p=-1)
{
    dp[v][1][0]=1;
    dp[v][1][1]=1;
    dp[v][0][0]=1;
    dp[v][0][1]=1;
    for (int i=0;i<g[v].size();++i){
        int to=g[v][i];
        if (to==p)continue;
        dfs(to,v);
    }
    for (int i=0;i<g[v].size();++i){
        int to=g[v][i];
        if (to==p)continue;
        int f=dp[to][1][1]+dp[to][1][0]+dp[to][0][0]+dp[to][0][1];
        f%=mod;
        dp[v][1][0]*=f;;
        dp[v][1][0]%=mod;
        int f1=dp[to][1][0]+dp[to][0][0]+dp[to][0][1];
        f1%=mod;
        dp[v][1][1]*=f1;
        dp[v][1][1]%=mod;
    }
    int c=0;
    for (int i=0;i<g[v].size();++i){
        int to=g[v][i];
        if (to==p)continue;
        ++c;
        int f=dp[to][1][1]+dp[to][1][0]+dp[to][0][0]+dp[to][0][1];
        f%=mod;
        dp[v][0][0]*=f;
        dp[v][0][0]%=mod;
        int f1=dp[to][1][0]+dp[to][0][0]+dp[to][0][1];
        f1%=mod;
        dp[v][0][1]*=f1;
        dp[v][0][1]%=mod;
    }
    int prod=1;
    for (int i=0;i<g[v].size();++i){
        int to=g[v][i];
        if (to==p)continue;
        prod=(prod*(dp[to][0][0]+dp[to][0][1]))%mod;
    }
    dp[v][0][1]=(dp[v][0][1]-prod+mod)%mod;
    if (c==0){
        dp[v][0][1]=0;
    }
}

main ()
{
    ios;
    cin>>n;
    for (int i=1;i<=n-1;++i){
        int x,y;
        cin>>x>>y;
        g[x].pb(y);
        g[y].pb(x);
    }
    dfs(1);
//    for (int i=1;i<=n;++i){
//        cout<<dp[i][0][0]<<' '<<dp[i][0][1]<<' '<<dp[i][1][0]<<' '<<dp[i][1][1]<<endl;
//    }
    int ans=(dp[1][0][0]+dp[1][0][1]-1+mod)%mod;
    cout<<ans<<endl;
}

//1 10
//2 1 4 3 4 3 6 10 2 1
