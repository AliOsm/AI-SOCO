#include <bits/stdc++.h>

typedef long long ll;
using namespace std;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000002;
const ll INFLL = 100000000000000000ll;
const ll MOD = 1000000007;

// ----------------------------------------------------------------------------------------------------------

struct Point
{
    double x,y,z;
    Point(double p1 = 0, double p2 = 0, double p3 = 0) : x(p1), y(p2), z(p3) {};
};

double S[10005], VS, VP;
int N;
Point H, P[10005];

double dist(Point p1, Point p2)
{
    double dx = p1.x - p2.x;
    double dy = p1.y - p2.y;
    double dz = p1.z - p2.z;
    return sqrt(dx*dx + dy*dy + dz*dz);
}

Point getpos(double t)
{
    int idx = upper_bound(S+1,S+N+1,t) - S;
    idx--;
    if(idx == N) return P[N];
    //cout << "At " << t << " it's segment " << idx << "\n";
    double diff = t - S[idx];
    double dx = P[idx+1].x - P[idx].x;
    double dy = P[idx+1].y - P[idx].y;
    double dz = P[idx+1].z - P[idx].z;
    double p = diff / (S[idx+1] - S[idx]);
    double x = P[idx].x + p*dx;
    double y = P[idx].y + p*dy;
    double z = P[idx].z + p*dz;
    return Point(x,y,z);
}

int main()
{
    cin >> N;
    N++;
    f(i,1,N) cin >> P[i].x >> P[i].y >> P[i].z;
    cin >> VP >> VS;
    cin >> H.x >> H.y >> H.z;
    f(i,2,N) S[i] = S[i-1] + dist(P[i-1],P[i]) / VS;

    //f(i,1,N) cout << "Start[" << i << "] = " << S[i] << "\n";

    const double eps = .00001;
    double a = 0, b = S[N] + eps;

    f(i,1,200)
    {
        double p = (a+b) / 2;
        Point pos = getpos(p);
        //cout << "I'm at " << pos.x << "," << pos.y << "," << pos.z << " at " << p << " and need " << dist(pos,H) << "\n";
        if(dist(pos,H) / VP <= p) b = p;
        else a = p;
    }

    Point pos = getpos(a);
    if(a <= S[N]) cout << setprecision(12) << fixed << "YES\n" << a << "\n" << pos.x << " " << pos.y << " " << pos.z << "\n";
    else cout << "NO";
}
