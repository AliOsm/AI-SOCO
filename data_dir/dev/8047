#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int t;
int n, k;
int dp[3][220][4][110];
vector<pii> v[3];

bool has(int s, int x, int y) {
    for (int i = 0; i < v[x].size(); i++) {
        int l = v[x][i].f, r = v[x][i].s;
        l -= s; r -= s;
        if (l <= y && y <= r) return true;
    }
    return false;
}

int calc(int hod, int s, int x, int y) {
    if (x < 0 || x >= 3) return false;
    bool ok = true;
    for (int i = 0; i < v[x].size(); i++) {
        int l = v[x][i].f, r = v[x][i].s;
        l -= s; r -= s;
        if (y <= r) ok = false;
        if (l <= y && y <= r) return false;
    }
    if (ok) return true;
    int &res = dp[hod][s][x][y];
    if (res != -1) return res;
    res = 0;
    if (hod == 0) {
        res = calc(1, s, x, y + 1);
        if (!has(s, x, y + 1)) {
            res |= calc(1, s, x + 1, y + 1);
            res |= calc(1, s, x - 1, y + 1);
        }
        return res;
    } else {
        return res = calc((hod + 1) % 3, s + 1, x, y);
    }
}

void solve() {
    for (int i = 0; i < 3; i++) v[i].clear();
    string s;
    cin >> n >> k;
    int x = -1, y = -1;
    for (int i = 0; i < 3; i++) {
        cin >> s;
        for (int j = 0; j < sz(s); j++) {
            if (s[j] == 's') {
                x = i;
                y = j;
            }
        }
        for (int j = 0, p = 0; j < sz(s); j = p) {
            if (s[j] >= 'A' && s[j] <= 'Z') {
                p = j;
                while (p < sz(s) && s[p] >= 'A' && s[p] <= 'Z') {
                    p++;
                }
                v[i].pb(mp(j, p - 1));
            } else {
                p = j + 1;
            }
        }
    }
    memset(dp, -1, sizeof dp);
    if (calc(0, 0, x, y)) printf("YES\n");
    else printf("NO\n");
}

int main(){
    
    cin >> t;
    
    while (t--) solve();
        
    return 0;
}
