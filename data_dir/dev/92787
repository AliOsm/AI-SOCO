#include <bits/stdc++.h>
using namespace std;

struct Hash {
    int len, base; long long mod; vector <int> p, h;
    Hash(int len, int base, int mod) : len(len), base(base), mod(mod) {
        p.resize(len + 1, 0); h.resize(len + 1, 0); p[0] = 1;
        for(int i = 1; i <= len; i++) {
            p[i] = (1LL * p[i - 1] * base) % mod;
        }
    }
    void init(string &str){
        for(int i = 1; i <= len; i++) {
            h[i] = (1LL * h[i - 1] * base + (int)str[i - 1]) % mod;
        }
    }
    int substr(int l, int r) {
        return (h[r] - (1LL * h[l - 1] * p[r - l + 1]) % mod + mod) % mod;
    }
};

const int N = 5000 + 7;

bool dp[2][N][N], x[N][N];

int main() {
        ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0);
        string str; cin >> str; int l = str.size();
        for(int i = 1; i <= l; i++) {
            for(int j = 1; j <= i; j++) {
                x[i][j] = 1;
            }
        }
        for(int i = 2; i <= l; i++) {
            for(int j = 1; j + i - 1 <= l; j++) {
                x[j][j + i - 1] = (str[j - 1] == str[j + i - 2]) && x[j + 1][j + i - 2];
            }
        }
        int sum = 0, t = l - 1;
        for(int i = 1; i <= l; i++) {
            for(int j = i; j <= l; j++) {
                dp[0][i][j] = x[i][j]; sum += x[i][j];
            }
        }
        cout << sum << " ";
        for(int i = 1; (1 << i) <= l; i++) {
            int sum = 0;
            for(int j = 1; j <= l; j++) {
                for(int k = j; k <= l; k++) {
                    int lx = (k - j + 1) / 2; if(j == k) {dp[i & 1][j][k] =0 ; continue;}
                    dp[i & 1][j][k] = dp[(i - 1) & 1][j][j + lx - 1] & dp[(i - 1) & 1][k - lx + 1][k] & (x[j][k]);
                    sum += dp[i & 1][j][k];
                }
            }
            cout << sum << " "; t--;
        }

        while(t--) cout << 0 << ' ';

}
