#include <bits/stdc++.h>
#include <sys/time.h>

using namespace std;

#define rep(i, a, b) for(int i = a; i < (b); ++i)
#define trav(a, x) for(auto& a : x)
#define sz(x) (int)(x).size()
#define all(x) begin(x), end(x)

using ll = int64_t;
using ull = uint64_t;
using ld = long double;
using pii = pair<int32_t, int32_t>;
using vi = vector<int32_t>;

struct modint {
    // static constexpr int MOD = 1000000007;
    static constexpr int MOD = 998244353;

    int v;
    modint(const int _v = 0): v(_v % MOD) {
        if (v < 0) v += MOD;
    }

    modint(const modint& other) {
        v = other.v;
    }

    bool operator==(const modint& other) const {
        return v == other.v;
    }

    modint& operator+=(const modint& other) {
        v += other.v;
        if (v >= MOD)
            v -= MOD;
        return *this;
    }

    modint& operator-=(const modint& other) {
        v -= other.v;
        if (v < 0)
            v += MOD;
        return *this;
    }

    modint& operator*=(const modint& other) {
        v = 1LL * v * other.v % MOD;
        return *this;
    }

    modint& operator/=(const modint& other) {
        *this *= other.inv();
        return *this;
    }

    modint operator+(const modint& other) const {
        return modint(v) += other;
    }

    modint operator-(const modint& other) const {
        return modint(v) -= other;
    }

    modint operator*(const modint& other) const {
        return modint(v) *= other;
    }

    modint operator/(const modint& other) const {
        return modint(v) /= other;
    }

    static modint pow(const modint& b, ll e) {
        if (e == 0) return 1;
        modint x = pow(b * b, e / 2);
        return (e % 2) ? b * x : x;
    }

    modint pow(ll e) const {
        return pow(*this, e);
    }

    modint inv() const {
        return pow(MOD - 2);
    }

    friend ostream& operator<<(ostream& os, modint m) {
        return os << m.v;
    }
};

constexpr int MAXN = 3333;
string s, t;
int n, m;
modint dp[MAXN][MAXN];
bool done[MAXN][MAXN];

modint solve(int i, int j) {
    if (i == n) return 1;

    modint& res = dp[i][j];
    if (done[i][j])
        return res;

    int len = n - 1 - i;
    int nj = j + len;
    if (j >= m or s[i] == t[j]) {
        res += solve(i + 1, j + 1);
    }

    if (nj >= m or s[i] == t[nj]) {
        res += solve(i + 1, j);
    }

    done[i][j] = true;
    return res;
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);

    cin >> s >> t;
    n = s.size();
    m = t.size();

    reverse(all(s));

    modint ans = 0;
    for (int i = 0; i <= n - m; ++i) {
        ans += solve(i, 0);
    }

    cout << ans << '\n';

    return 0;
}
