#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>
#include <tuple>
#include <chrono>

using namespace std;
using ll = long long;
const int N = 100010;

int dp[N][6];
int from[N][6];

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie();
  int n;
  cin >> n;
  vector<int> a(n);
  for(int i = 0; i < n; ++i) {
    cin >> a[i];
  }

  for(int i = 0; i < N; ++i) {
    for(int j = 0; j < 6; ++j) {
      dp[i][j] = 0;
    }
  }

  for(int i = 0; i < 6; ++i) {
    dp[0][i] = 1;
    from[0][i] = -1;
  }

  for(int i = 1; i < n; ++i) {
    if (a[i - 1] < a[i]) {
      for(int j = 1; j <= 5; ++j) {
        for(int k = 1; k < j; ++k) {
          if (dp[i - 1][k]) {
            dp[i][j] |= dp[i - 1][k];
            from[i][j] = k;
          }
        }
      }    
    } else if (a[i - 1] > a[i]) {
      for(int j = 1; j <= 5; ++j) {
        for(int k = j + 1; k <= 5; ++k) {
          if (dp[i - 1][k]) {
            dp[i][j] |= dp[i - 1][k];
            from[i][j] = k;
          }
        }
      }
    } else {
      for(int j = 1; j <= 5; ++j) {
        for(int k = 1; k <= 5; ++k) {
          if (j != k) {
            if (dp[i - 1][k]) {
              dp[i][j] |= dp[i - 1][k];
              from[i][j] = k;
            }
          }
        }
      }
    }
  }

  vector<int> ans;
  for(int i = 1; i <= 5; ++i) {
    if (dp[n - 1][i]) {
      int c = i, at = n - 1;
      while(c != -1) {
        ans.emplace_back(c);
        c = from[at--][c];
      }
      reverse(ans.begin(), ans.end());
      for(int j : ans) {
        cout << j << " ";
      }
      cout << endl;
      return 0;
    }
  }
  
  cout << -1 << endl;
	return 0;
}
