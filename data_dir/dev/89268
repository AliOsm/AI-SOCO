#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("board.in");ofstream out("board.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

struct Q{
    int l,r,k;
    Q(){}
    Q(int a, int b, int c){l = a; r = b; k = c;}
};

int a;
vec<vec<pii>> l;
vec<int> leaf;
vec<Q> o;

void dfl(int v, int p){
    if(l[v].size()==1) leaf.pb(v);
    for(pii h : l[v]){
        if(h.F==p) continue;
        dfl(h.F, v);
    }
}

void dfs(int v, int p){
    for(pii h : l[v]){
        if(h.F==p) continue;
        leaf.clear();
        int l1, l2;
        if(l[v].size()==1){
            dfl(h.F, v);
            l1 = leaf[0], l2 = leaf.back();
            o.pb(Q(v, l1, h.S/2));
            o.pb(Q(v, l2, h.S/2));
            o.pb(Q(l1, l2, -h.S/2));
        }
        else if(l[h.F].size()==1){
            dfl(v, h.F);
            l1 = leaf[0], l2 = leaf.back();
            o.pb(Q(h.F, l1, h.S/2));
            o.pb(Q(h.F, l2, h.S/2));
            o.pb(Q(l1, l2, -h.S/2));
        }
        else{
            dfl(h.F, v);
            l1 = leaf[0], l2 = leaf.back();
            leaf.clear();
            dfl(v, h.F);
            int l3 = leaf[0], l4 = leaf.back();
            o.pb(Q(l1, l3, h.S/2));
            o.pb(Q(l2, l4, h.S/2));
            o.pb(Q(l1, l2, -h.S/2));
            o.pb(Q(l3, l4, -h.S/2));
        }
        dfs(h.F, v);
    }
}

int main() {
    fast;
    cin>>a;
    l = vec<vec<pii>>(a, vec<pii>());
    for(int q=0; q<a-1; q++){
        int x,y,c; cin>>x>>y>>c; x--; y--;
        l[x].pb({y,c});
        l[y].pb({x,c});
    }
    for(int q=0; q<a; q++) if(l[q].size()==2) {cout<<"NO"; return 0;}
    if(a==2){cout<<"YES\n1\n1 2 "<<l[0][0].S; return 0;}
    dfs(0, -1);
    cout<<"YES\n"<<o.size()<<"\n";
    for(Q i : o) cout<<i.l+1<<" "<<i.r+1<<" "<<i.k<<"\n";
}