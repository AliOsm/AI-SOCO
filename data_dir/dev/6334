#include <algorithm>
#include <iostream>
#include <valarray>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <numeric>
#include <complex>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <ctime>
#include <cmath>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <ext/algorithm>

using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i)
#define error(x) cout << #x << " = " << (x) << endl;
#define all(n) (n).begin(), (n).end()
#define Size(n) ((int)(n).size())
#define mk make_pair
#define pb push_back
#define F first
#define S second
#define X real()
#define Y imag()

typedef long long ll;
typedef pair<ll, ll> pii;
typedef pair<ll, ll> pll;
typedef complex<double> point;
template <class P, class Q> void smin(P &a, Q b) { if (b < a) a = b; } 
template <class P, class Q> void smax(P &a, Q b) { if (b > a) a = b; } 
template <class P, class Q> bool in(const P &a, const Q &b) { return a.find(b) != a.end(); }

const int MAXN = 5050;
int a[MAXN][MAXN];

int main() {
	ios::sync_with_stdio(false);
	int n, m;
	cin >> n >> m;
	FOR(i, 0, n) {
		string s;
		cin >> s;
		for (int j = 0; j < m; j++) if (s[j] == '1') {
			int jj = j;
			while (jj+1 < Size(s) && s[jj+1] == '1') jj++;
			a[j+1][jj+1]++;
			j = jj;
		}
	}
	int best = 0;
	FOR(i, 1, MAXN) for (int j = MAXN-2; j >= i; j--) {
		a[i][j] += a[i-1][j] + a[i][j+1] - a[i-1][j+1];
		smax(best, (j-i+1)*a[i][j]);
	}
	cout << best << endl;
	return 0; 
}

