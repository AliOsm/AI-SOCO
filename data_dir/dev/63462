/**
 *    author:  skmonir
 *    created: 23-Oct-2017 18:59:10
**/
#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}
template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> inline void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = (int) 1e5 + 5;
const int INF = (int) 1e9 + 7;
const long long MOD = (long long) 1e9 + 7;

int n, k, a[N], f[N << 2];

void MergeSort(int nd, int l, int r) {
    if (k < 1 or l + 1 == r) return;
    if (k - 2 < 0) return;
    int m = l + r >> 1;
    k -= 2;
    MergeSort(nd << 1, l, m);
    MergeSort(nd << 1 | 1, m, r);
    if (!f[nd << 1] and !f[nd << 1 | 1]) swap(a[m], a[m - 1]);
    f[nd] = 1;
}

int main() {
    Int(n, k), k--;

    FOR (i, 0, n - 1) a[i] = i + 1;

    MergeSort(1, 0, n);

    if (k > 0) return !printf("-1\n");

    FOR (i, 0, n - 1) printf("%d ", a[i]);
    printf("\n");
    return 0;
}