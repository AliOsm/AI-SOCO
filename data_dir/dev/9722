#include <bits/stdc++.h>

using namespace std;

const int N = 2e6 + 6;
vector<int> adj[N];
int val[N], t[N], par[N], vis[N];
priority_queue<pair<int, int> > pq;
int n, k;

void dfs(int u, int lvl) {
    if (adj[u].size() == 0) {
        pq.push({lvl, u});
        t[u] = 0;
        val[u] = 1;
    }

    for (int nxt : adj[u]) {
        dfs(nxt, lvl + 1);
    }
}

void pre() {
    while (!pq.empty()) {
        int u = pq.top().second;
        int lvl = pq.top().first;
        pq.pop();
        if (t[u] == k || u == 0)continue;
        val[par[u]] += val[u];
        t[par[u]] = min(t[par[u]], t[u] + 1);
        if (!vis[par[u]]) {
            vis[par[u]] = true;
            pq.push({lvl - 1, par[u]});
        }
    }
}

int solve(int u) {
    int ret = val[u];
    for (int nxt : adj[u]) {
        if (t[nxt] < k)
            ret = max(ret, val[u] - val[nxt] + solve(nxt));
        else
            ret = max(ret, val[u] + solve(nxt));
    }
    return ret;
}

int main() {

    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> k;
    for (int i = 1; i < n; i++) {
        cin >> par[i];
        par[i]--;
        adj[par[i]].push_back(i);
    }

    memset(t, '?', sizeof t);

    dfs(0, 0);
    pre();
    cout << solve(0) << "\n";

    return 0;
}

