#include <bits/stdc++.h>
using namespace std;

const int N = 50005;

int n, y[N], was[N], timer, result[N];
vector<int> cmp, g[32 * N];

bool check(int m) {
    ++timer;
    int cnt = 0;
    for (int i = (int)cmp.size() - 1; i >= 0; --i) {
        if (cmp[i] <= m) {
            for (auto& to : g[i]) {
                if (was[to] != timer) {
                    was[to] = timer;
                    result[to] = cmp[i];
                    ++cnt;
                    break;
                }
            }
        }
        if (cnt == n) return true;
    }
    return false;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    cmp.reserve(32);
    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> y[i];
        int x = y[i];
        while (x > 0) {
            cmp.push_back(x);
            x >>= 1;
        }
    }
    sort(cmp.begin(), cmp.end());
    cmp.erase(unique(cmp.begin(), cmp.end()), cmp.end());

    for (int i = 0; i < n; ++i) {
        int x = y[i];
        while (x > 0) {
            int val = lower_bound(cmp.begin(), cmp.end(), x) - cmp.begin();
            g[val].push_back(i);
            x >>= 1;
        }
    }

    int l = 0, r = 1e9+7;
    while (r - l > 1) {
        int m = (l + r) / 2;
        if (check(m)) r = m; else l = m;
    }
    check(r);
    for (int i = 0; i < n; ++i)
        cout << result[i] << ' ';
    cout << '\n';
    return 0;
}
