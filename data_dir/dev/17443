#include <bits/stdc++.h>  
using namespace std;
typedef long long LL;  
const int M = 200005;
const int inf = 100000007;
struct Trie  {    
    Trie *next[26];    
};    
Trie *que[M],s[M],*root;    
int tot; 
int n , k;
Trie *NewNode()  {    
    Trie *tmp=&s[tot ++];   
    memset (tmp -> next , NULL , sizeof (tmp -> next)); 
    return tmp;    
}    
void Insert(Trie *root,char *s,int len)  {    
    Trie *p=root;    
    for(int i=0; i<len; i++){    
        if(p->next[s[i]-'a']==NULL) p->next[s[i]-'a']=NewNode();    
        p=p->next[s[i]-'a'];    
    }    
}   
char str[M];
int win[M] , lose[M]; 
void dfs (Trie *root) {
    int u = root - s , cnt = 0;;
    win[u] = lose[u] = 0;
    for (int i = 0 ; i < 26 ; i ++) {
        if (root -> next[i] != NULL) {
            dfs (root -> next[i]);
            cnt ++;
            int v = root -> next[i] - s;
            if (!win[v]) win[u] = 1;
            if (!lose[v]) lose[u] = 1;
        }
    }
    if (!cnt) lose[u] = 1;
}
int main () {
#ifndef ONLINE_JUDGE
    freopen ("input.txt" , "r" , stdin);
    // freopen ("output.txt" , "w" , stdout);
#endif
    tot = 0;root = NewNode ();
    int len = 0;;
    scanf ("%d %d" , &n , &k);
    for (int i = 0 ; i < n ; i ++) {
        scanf ("%s" , str);
        len = max (len , (int)strlen (str));
        Insert (root , str , strlen (str));
    }
    dfs (root);
    if (win[0] && lose[0]) puts ("First");
    else if (win[0] && k & 1) puts ("First");
    else puts ("Second");
    return 0;
}