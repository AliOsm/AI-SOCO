#include <bits/stdc++.h>

using namespace std;

typedef unsigned uint;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ldbl;
typedef pair<int, int> pii;
typedef pair<uint, uint> puu;
typedef pair<ll, ll> pll;
typedef pair<ull, ull> pull;
typedef vector<int> vi;
typedef vector<uint> vu;
typedef vector<ll> vll;
typedef vector<ull> vull;
typedef vector<pii> vpii;
typedef vector<puu> vpuu;
typedef vector<pll> vpll;
typedef vector<pull> vpull;
typedef vector<string> vstr;
typedef vector<double> vdbl;
typedef vector<ldbl> vldbl;
#define pb push_back
#define ppb pop_back
#define pfr push_front
#define ppfr pop_front
#define emp emplace
#define empb emplace_back
#define be begin
#define rbe rbegin
#define all(x) (x).be(), (x).end()
#define rall(x) (x).rbe(), (x).rend()
#define fir first
#define sec second
#define mkp make_pair
#define brif(cond) if (cond) break
#define ctif(cond) if (cond) continue
#define retif(cond) if (cond) return
static inline void canhazfast() {ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}
template<typename T> T gcd(T a, T b) {return b ? gcd(b, a%b) : a;}
template<typename T> T extgcd(T a, T b, T &x, T &y)
{
    T x0 = 1, y0 = 0, x1 = 0, y1 = 1;
    while (b) {
        T q = a/b; a %= b; swap(a, b);
        x0 -= q*x1; swap(x0, x1);
        y0 -= q*y1; swap(y0, y1);
    }
    x = x0; y = y0; return a;
}
int ctz(uint x) {return __builtin_ctz(x);}
int ctzll(ull x) {return __builtin_ctzll(x);}
int clz(uint x) {return __builtin_clz(x);}
int clzll(ull x) {return __builtin_clzll(x);}
int popcnt(uint x) {return __builtin_popcount(x);}
int popcntll(ull x) {return __builtin_popcountll(x);}
int bsr(uint x) {return 31^clz(x);}
int bsrll(ull x) {return 63^clzll(x);}

#define MX 100016

vpii factorize(int n)
{
    vpii res;
    if (int e2 = ctz(n)) {
        res.empb(2, e2);
        n >>= e2;
    }
    for (int p = 3; ; p += 2) {
        int q = n/p, r = n%p, e = 0;
        brif(q < p);
        while (!r) {
            n = q;
            q = n/p;
            r = n%p;
            ++e;
        }
        if (e) res.empb(p, e);
    }
    if (n > 1) res.empb(n, 1);
    return res;
}

int get(int n, int p)
{
    retif(p == 2) ctz(n);
    int res = 0;
    for (;;) {
        int q = n/p, r = n%p;
        brif(r);
        ++res;
        n = q;
    }
    return res;
}

int main()
{
    canhazfast();

    static int a[MX], cnt[MX], r[MX];
    int n, k;
    vpii fk;
    ll ans = 0;

    cin >> n >> k;
    for (int i = 0; i < n; ++i) cin >> a[i];
    retif(k == 1) cout << ll(n+1)*n/2, 0;
    fk = factorize(k);
    for (const pii &f : fk) {
        int p = f.fir, e = f.sec;
        for (int i = 0; i < n; ++i) cnt[i] = get(a[i], p);
        for (int i = 0, j = 0, s = 0; i < n; ++i) {
            while (j < n && s < e) s += cnt[j++];
            r[i] = s < e ? n : max(r[i], j-1);
            s -= cnt[i];
        }
    }
    for (int i = 0; i < n; ++i) ans += n-r[i];
    cout << ans;

    return 0;
}
