#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const long long INF = (long long) 1.01e18;
const ld EPS = 1e-9;

void precalc() {
}

int n, m, k;

vector<vector<int> > es, num;

int s[2], t;

const int maxm = (int) 1e4 + 100 + 10;
int lens[maxm][2];
int clen[maxm];

bool read() {
  if (scanf("%d%d%d", &n, &m, &k) < 3) {
    return 0;
  }
  scanf("%d%d%d", &s[0], &s[1], &t);
  --s[0], --s[1], --t;

  es = num = vector<vector<int> >(n);
  for (int i = 0; i < m; ++i) {
    int s, t, len;
    scanf("%d%d%d", &s, &t, &len);
    --s, --t;
    es[s].pb(t);
    num[s].pb(i);
    lens[i][0] = lens[i][1] = len;
  }
  for (int i = 0; i < k; ++i) {
    int s, t, left, right;
    scanf("%d%d%d%d", &s, &t, &left, &right);
    --s, --t;
    es[s].pb(t);
    int id = m + i;
    num[s].pb(id);
    lens[id][0] = left, lens[id][1] = right;
  }
  return 1;
}

void updateDist(int v, long long *dist) {
  priority_queue<pair<long long, int>, vector<pair<long long, int> >, greater<pair<long long, int> > > tree;
  tree.push(mp(dist[v], v));
  while (sz(tree)) {
    pair<long long, int> cur = tree.top();
    tree.pop();
    int v = cur.second;
    if (dist[v] != cur.first) {
      continue;
    }
    for (int it = 0; it < sz(es[v]); ++it) {
      int u = es[v][it];
      int eid = num[v][it];
      long long value = dist[v] + clen[eid];
      if (dist[u] > value) {
        dist[u] = value;
        tree.push(mp(dist[u], u));
      }
    }
  }
}

const int maxn = (int) 1e4 + 10;

long long dist[2][maxn];

int used[maxn];

void solve() {
  for (int i = 0; i < m + k; ++i) {
    clen[i] = lens[i][1];
  }
  for (int it = 0; it < 2; ++it) {
    for (int i = 0; i < n; ++i) {
      dist[it][i] = INF;
    }
    dist[it][s[it]] = 0;
    updateDist(s[it], dist[it]);
  }
  for (int i = 0; i < n; ++i) {
    used[i] = 0;
  }
  for (int iter = 0; iter < 2; ++iter) {
    vector<int> st;
    for (int l = 0;;) {
      for (int i = 0; i < n; ++i) {
        if (!used[i] && dist[0][i] < dist[1][i] + iter) {
          used[i] = 1;
          st.pb(i);
        }
      }
      if (l == sz(st)) {
        break;
      }
      while (l < sz(st)) {
        int v = st[l];
        for (int it = 0; it < sz(es[v]); ++it) {
          int eid = num[v][it];
          clen[eid] = lens[eid][0];
        }
        updateDist(v, dist[0]);
        updateDist(v, dist[1]);
        ++l;
      }
    }
    if (used[t]) {
      printf(!iter ? "WIN\n" : "DRAW\n");
      for (int i = m; i < m + k; ++i) {
        printf("%d%c", clen[i], " \n"[i == m + k - 1]);
      }
      return;
    }
  }
  printf("LOSE\n");
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
