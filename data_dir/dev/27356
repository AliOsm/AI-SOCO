#include "bits/stdc++.h"
using namespace std;
#define pb push_back
// #define int long long
typedef long long ll;
#define fi first
#define se second
#define pii pair<int,int>
#define endl '\n'
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define sz(s) (int)s.size()
#define y1 fdfbvfds
typedef long double f80;
#define all(x) x.begin(), x.end()
typedef long double f80;
 
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
ll rand(ll l,ll r){
    uniform_int_distribution<ll> uid(l, r);
    return uid(rng);
}

const int mod = 1e9 + 7;

int pwr(int a,ll b) {
    int ans = 1;
    while(b) {
        if(b & 1) {
            ans = ((ll)ans * a) % mod;
        }
        a = ((ll)a * a) % mod;
        b >>= 1;
    }
    return ans;
}

const int N = 2e5 + 5;

pii p[N];
int pre[N];
vector<int> v[N];

signed main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t;
    cin >> t;
    while(t--) {
        int n;
        cin >> n;
        fr(i, 1, n) {
            v[i].clear();
            pre[i] = 0;
        }
        pre[0] = 0;
        fr(i, 1, n) {
            cin >> p[i].fi >> p[i].se;
            v[p[i].fi].pb(p[i].se);
            pre[p[i].fi]++;
        }
        fr(i, 1, n) {
            pre[i] += pre[i - 1];
        }
        ll ans = 0;
        int cnt = 0;
        multiset<int> s;
        for(int i = n; i >= 1; i--) {
            int val = i - pre[i - 1];
            for(int x : v[i]) {
                s.insert(x);
            }
            if(val <= cnt) continue;
            while(val > cnt) {
                int x = *s.begin();
                ans += x;
                cnt++;
                s.erase(s.begin());
            }
        }
        cout << ans << endl;
    }
    return 0;
}