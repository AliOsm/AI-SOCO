#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <climits>
#include <cctype>
#include <cmath>
#include <sstream>
#include <cstdlib>
#include <climits>
#include <ctime>
#include <set>
#include <map>
#include <numeric>
#include <utility>
#include <deque>
#include <queue>
#include <stack>
#include <iomanip>
#include <complex>
#include <list>
#include <bitset>
#include <fstream>
#include <limits>
#include <memory.h>
#include <tgmath.h>
#include <complex>
using namespace std;

typedef complex<int> point;
#define dp(a, b) ((conj(a) * b).real())
#define cp(a, b) ((conj(a) * b).imag())
#define angle(a) (atan2(a.imag(), a.real()))
#define rotate0(a, angle) (a * exp(point(0, angle)))
#define length(a) (hypot(a.imag(), a.real()))
#define rotateAr(a, angle, around) (rotate0(((a) - (around)),(angle)) + around)
#define reflect(a, m) (conj((a)/(m)) * (m))
#define normalize(a) ((a) / length(a));
typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define per(i, start, end) for(int i = (int)start-1; i >= end; --i)
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const double PI = 3.14159265358979323846;
const double eps = (1e-6);
int dcmp(double x, double y)
{
	// -1 means left is bigger
	return fabs(x - y) <= eps ? 0 : x > y ? -1 : 1;
}

const int MOD = 998244353;
int n, m;
string a, b;
int freq[200005];

ll power(ll base, ll exp)
{
	if (exp == 0)
		return 1LL;
	ll sq = power(base, exp/2)%MOD;
	sq = sq * sq;
	sq %= MOD;
	if (exp&1)
		sq *= base;
	sq %= MOD;
	return sq;
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
#ifndef ONLINE_JUDGE
	freopen("inputE.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
	cin >> n >> m >> a >>b;
	freq[0] = (b[0] == '1');
	for(int i = 1; i < sz(b); ++i)
	{
		freq[i] = freq[i - 1] + (b[i] == '1');
	}
	reverse(freq, freq+sz(b));
	reverse(all(a));
//	for (int i = 0; i < sz(b); ++i)
//		cout << freq[i] << ' ';
//	cout << endl;
	ll ans = 0;
	for (int i = 0; i < sz(a); ++i)
	{
		if (a[i] == '1')
		{
			ans = ans + (power(2LL, i) * freq[i])%MOD;
			ans %= MOD;
		}
	}
	cout << ans << '\n';
	return 0;
}
