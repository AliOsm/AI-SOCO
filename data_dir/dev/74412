/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;

class ProblemCValhallaSiege {
public:
	void solve(std::istream& in, std::ostream& out) {
		ll n, q; in>>n>>q;
		vector<ll> arr(n+1);
		arr[0] = 0;
		for(int i = 1; i<=n; ++i) in>>arr[i], arr[i]+=arr[i-1];
		ll cur = 1, cur_remain = arr[1];
		while(q--){
			ll k; in>>k;
            if(k<=cur_remain){
                cur_remain-=k;
                if(cur_remain==0){
                    ++cur;
                    if(cur==n+1) cur = 1;
                    cur_remain = arr[cur]-arr[cur-1];
                }
                out<<n-cur+1<<'\n';
                continue;
            }

			ll remain = arr[n]-arr[cur]+cur_remain;

            if(k<=remain){
                k -= cur_remain;
                ++cur;
                if(cur == n+1) cur = 1;
                cur_remain = arr[cur]-arr[cur-1];
                ll target = arr[cur-1]+k;

                int low = cur, high = n, pos = -1;
                while(low<=high){
                    int mid = (low+high)>>1;
                    if(arr[mid]>=target) pos = mid, high = mid-1;
                    else low = mid + 1;
                }
                cur = pos;
                if(arr[pos]==target){
                    ++cur;
                    if(cur==n+1) cur = 1;
                    cur_remain = arr[cur]-arr[cur-1];
                }
                else{
                    cur_remain = arr[cur]-target;
                }
            }
            else{
                cur = 1;
                cur_remain = arr[1];
            }
            out<<n-cur+1<<'\n';
		}
	}
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	ProblemCValhallaSiege solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
