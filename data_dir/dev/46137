#include<bits/stdc++.h>
using namespace std;

typedef  int ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef pair<ll,ll> pll;

#define endl '\n'
#define ff first
#define ss second
#define sz(v) (int)v.size()
#define pb push_back
#define f(i,l,r) for(ll i=l;i<=r;i++)
#define rf(i,r,l) for(ll i=r;i>=l;i--)
#define Max 5000001
#define inf 2147483647
#define llinf 9223372036854775807
#define all(v) v.begin(),v.end()
#define bp(n) __builtin_popcountll(n)
#define fast ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)

#define d0(a) cout<<a<<' ';
#define d1(a) cout<<a<<endl;
#define d2(a,b) cout<<a<<' '<<b<<endl;
#define d3(a,b,c) cout<<a<<' '<<b<<' '<<c<<endl;
#define d4(a,b,c,d) cout<<a<<' '<<b<<' '<<c<<' '<<d<<endl;
#define d5(a,b,c,d,e) cout<<a<<' '<<b<<' '<<c<<' '<<d<<' '<<e<<endl;
#define d6(a,b,c,d,e,f) cout<<a<<' '<<b<<' '<<c<<' '<<d<<' '<<e<<' '<<f<<endl;

const ll N=250005,mod=998244353,bit=61;

struct truck
{
    ll s,f,c,r;
};

ll n,m,a[401],dp[401][401][401];
truck b[N];

signed main()
{
    fast;

    ll t=1;
    //cin>>t;
    while(t--)
    {
       cin>>n>>m;
       f(i,1,n)
       {
           cin>>a[i];
       }
       f(i,1,m)
       {
           cin>>b[i].s>>b[i].f>>b[i].c>>b[i].r;
           b[i].r=min(b[i].r,b[i].f-b[i].s);
       }
       f(l,1,n)
       {
           f(r,l,n)
           {
               dp[l][r][0]=a[r]-a[l];
           }
           f(k,1,n)
           {
               int opt=l;
               f(r,l,n)
               {
                   while(opt<r and max(dp[l][opt][k-1],a[r]-a[opt])>=max(dp[l][opt+1][k-1],a[r]-a[opt+1]))
                   {
                       opt++;
                   }
                   dp[l][r][k]=max(dp[l][opt][k-1],a[r]-a[opt]);
               }
           }
       }
       long long ans=0;
       f(i,1,m)
       {
           ans=max(ans,(long long)b[i].c*(long long)dp[b[i].s][b[i].f][b[i].r]);
       }
       cout<<ans<<endl;
    }
    return 0;
}
















