#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

const int N = 1e3 + 10;
int a[N][N];
int row[N][N], col[N][N];
int rowLen[N], colLen[N];
int A[N];

int main() {
  int n, m;
  scanf("%d%d", &n, &m);
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      scanf("%d", &a[i][j]);
    }
  }
  for (int i = 0; i < n; ++i) {
    copy(a[i], a[i] + m, A);
    sort(A, A + m);
    rowLen[i] = unique(A, A + m) - A;
    for (int j = 0; j < m; ++j) {
      row[i][j] = lower_bound(A, A + rowLen[i], a[i][j]) - A + 1;
    }
  }
  for (int j = 0; j < m; ++j) {
    for (int i = 0; i < n; ++i) {
      A[i] = a[i][j];
    }
    sort(A, A + n);
    colLen[j] = unique(A, A + n) - A;
    for (int i = 0; i < n; ++i) {
      col[i][j] = lower_bound(A, A + colLen[j], a[i][j]) - A + 1;
    }
  }

  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      int base = max(row[i][j], col[i][j]);
      int ret = max(rowLen[i] - row[i][j], colLen[j] - col[i][j]) + base;
      printf("%d%c", ret, " \n"[j + 1 == m]);
    }
  }

  return 0;
}
