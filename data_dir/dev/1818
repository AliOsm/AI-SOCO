#include <set>
#include <map>
#include <list>
#include <cmath>
#include <queue>
#include <stack>
#include <cstdio>
#include <string>
#include <vector>
#include <cstdlib>
#include <cstring>
#include <sstream>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <fstream>
#include <ctime>
#include <deque>
#include <bitset>
#include <cctype>
#include <utility>
#include <cassert>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned int ui;
typedef unsigned long long ull;

#define Rep(i,n) for(int i = 0; i < (n); ++i)
#define Repd(i,n) for(int i = (n)-1; i >= 0; --i)
#define For(i,a,b) for(int i = (a); i <= (b); ++i)
#define Ford(i,a,b) for(int i = (a); i >= (b); --i)
#define Fit(i,v) For(__typeof((v).begin()) i = (v).begin(); i != (v).end(); ++i)
#define Fitd(i,v) For(__typeof((v).rbegin()) i = (v).rbegin(); i != (v).rend(); ++i)
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define sz(a) ((int)(a).size())
#define all(a) (a).begin(), (a).end()
#define ms(a,x) memset(a, x, sizeof(a))

template<class F, class T> T convert(F a, int p = -1) { stringstream ss; if (p >= 0) ss << fixed << setprecision(p); ss << a; T r; ss >> r; return r; }
template<class T> T gcd(T a, T b) { T r; while (b != 0) { r = a % b; a = b; b = r; } return a; }
template<class T> T lcm(T a, T b) { return a / gcd(a, b) * b; }
template<class T> T sqr(T x) { return x * x; }
template<class T> T cube(T x) { return x * x * x; }
template<class T> int getbit(T s, int i) { return (s >> i) & 1; }
template<class T> T onbit(T s, int i) { return s | (T(1) << i); }
template<class T> T offbit(T s, int i) { return s & (~(T(1) << i)); }
template<class T> int cntbit(T s) { return __builtin_popcount(s); }
const int bfsz = 1 << 16; char bf[bfsz + 5]; int rsz = 0;int ptr = 0;
char gc() { if (rsz <= 0) { ptr = 0; rsz = (int) fread(bf, 1, bfsz, stdin); if (rsz <= 0) return EOF; } --rsz; return bf[ptr++]; }
void ga(char &c) { c = EOF; while (!isalpha(c)) c = gc(); }
int gs(char s[]) { int l = 0; char c = gc(); while (isspace(c)) c = gc(); while (c != EOF && !isspace(c)) { s[l++] = c; c = gc(); } s[l] = '\0'; return l; }
template<class T> bool gi(T &v) {
    v = 0; char c = gc(); while (c != EOF && c != '-' && !isdigit(c)) c = gc(); if (c == EOF) return false; bool neg = c == '-'; if (neg) c = gc();
    while (isdigit(c)) { v = v * 10 + c - '0'; c = gc(); } if (neg) v = -v; return true;
}

typedef pair<int, int> II;

const ld PI = acos(ld(-1.0));
const ld eps = 1e-9;

const int inf = (int)1e9 + 5;
const ll linf = (ll)1e17 + 5;
int dr[4] = {-1, 0, +1, 0};
int dc[4] = {0, -1, 0, +1};
const ll mod = 1000000009;

#define maxn 200005

int test;
int n;
ll N;
int a[20], res[10][20];
bool f[20][7][7];
pair<int, int> back[20][7][7];

ll tinh(int x[]){
	ll ret = 0;
	Ford(i, n, 1){
		ret = ret * 10 + x[i];
	}
	return ret;
}

void solve(){
	cin >> N;
	n = 0;
	a[0] = 0;
	while(N > 0){
		a[++n] = N % 10;
		N /= 10;
	}
	ms(res, 0);
	ms(f, 0); f[0][0][0] = 1;
	For(run, 0, n - 1) Rep(i, 7) Rep(j, 7) if(f[run][i][j]){
		int A = i * 7 + j * 4, B;
		int du = A / 10; if(A % 10 > a[run]) du++;
		Rep(u, 7) Rep(v, 7) if(u + v < 7){
			B = u * 7 + v * 4 + du;
			if(run == n - 1 && B >= 10) continue;
			if(B % 10 == a[run + 1]){
//				cout << run + 1 << " " << u <<" " << v << endl;
				f[run + 1][u][v] = 1;
				back[run + 1][u][v] = mp(i, j);
			}
		}
	}
//	cout << f[2][0][0] << endl;
	int n7 = -1, n4 = -1;
	Rep(i, 7) Rep(j, 7) if(f[n][i][j]){
		n7 = i;
		n4 = j;
	}

	if(n7 < 0){
		cout << -1 << endl;
		return;
	}
	Ford(run, n, 1){
		int RR = 0;
		Rep(i, n7) res[++RR][run] = 7;
		Rep(i, n4) res[++RR][run] = 4;
		Rep(i, 6 - n7 - n4) res[++RR][run] = 0;
		pair<int, int> P = back[run][n7][n4];
		n7 = P.fi; n4 = P.se;
	}

	For(i, 1, 6) {
		cout << tinh(res[i]);
		if(i < 6) cout << " ";
		else cout << endl;
	}
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
//	freopen("in.txt","r",stdin);
//    freopen("segments.in","r",stdin);
//    freopen("segments.out","w",stdout);

    cin >> test;
    Rep(itest, test){
    	solve();
    }

    return 0;

}

