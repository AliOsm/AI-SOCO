#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>
#include <cassert>
#include <complex>

#include <cstddef>
#include <cstdint>
#include <algorithm>
#include <array>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <utility>
#include <functional>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#include <memory>
#include <climits>
#include <limits>
#include <list>
#include <forward_list>

#include <iostream>
#include <iomanip>

 

typedef long long ll;
typedef std::vector<int> vi;
typedef std::pair<int,int> pii;
typedef std::vector<pii> vii ;
typedef std::pair<ll,ll> pll;
typedef std::vector<pll> vll;

#define sz(c)   ( ( int ) ( c.size() ) )
#define all(x)  (x).begin(), (x).end()
#define fi  first
#define se  second
#define forn(i,n) for(int i= 0; i < int(n); ++i)
#define fore(i,a,b) for(int i =(a); i < int(b); ++i)

static ll gcd(ll x, ll y){ return (!y) ? x : gcd(y, x % y ) ; } 

static const int MOD = 1000000007;
static int powm(ll x , ll n , ll m )
{
    ll r = 1;
    while(n>0){
        if (n&1) r = (r*x) % m ;
        x = (x*x)%m;
        n/=2;
    }
    return r;
}
 /*************************************************/
static const int maxn = 1<<20;


int solve()
{  
    // a  :  2 * a  -2 * a  3 * a -3 * a  .... * (n/a) * a  -(n/a)*a ,  |n/a| > 1 
    // 2 + 2  + 3 + 3 + 4 + 4 ... (n/a)  * 2  = 2 * ( 2 + 3 + 4 + ... + n/a) = 2*(1 + 2 + ... + n/a) - 2 = (n/a)*(n/a+1) - 2 
    
    int N; 
    
    scanf("%d",&N);
    
    ll ans = 0;
    
    for(int a = 2; a <= N; ++a ) {
        int b = N / a ;
        if (b < 2 ) continue;
        ans += b * 1ll * (b + 1 )  - 2 ;
    }
    
    printf("%lld\n", ans * 2  ) ;
    
    return 0;
}





int main(int argc, char * argv[] ) 
{
    
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif 
    
    ::std::ios::sync_with_stdio(false); ::std::cin.tie(0);  ::std::cout.tie(0);
    
    int test_count = 1;
    
    //scanf("%d",&test_count);
    
    while( test_count -- )
    {
        solve();
    }
    
    return 0;
}