/*
to solve this problem we need to know the number of paths that begin from each node
i so that the nodes in these paths have different colors and to answer that question
we can do DFS from node i and the answer will be the number of nodes that we can visit
maintaining the information of the path.
so we need to iterate over all the vertices and calculate that number.
but that only won't be enough to fit in the time limit so we need to maintain
a dp arrar with state node and mask that holds the number of nodes that are
reachable from that the mask express the colors in the path from the original.
*/
#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update


#define f first
#define s second
#define pb push_back
#define mp make_pair
#define clr(dp,i) memset(dp,i,sizeof(dp))
#define opt     ios_base::sync_with_stdio(NULL);cin.tie(NULL);cout.tie(NULL);

using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag,
tree_order_statistics_node_update> oset;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef pair<int, int> pii;
const long long mod = 1e9+7;
const ld pi = 3.14159265358979323846264338327950288;
//========================================

int main()
{
	int n, m;
	cin >> n >> m;
	for(int i=0; i<m; i++)
	{
		int x, y;
		cin >> x >> y;
	}
	for(int i=0; i<n; i++)
	{
		if(i%2)
		cout << 1;
		else
		cout << 0;
	}
	cout << endl;
}