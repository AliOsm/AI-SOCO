#include<bits/stdc++.h>
using namespace std;

#define MOD           998244353
#define int           long long 
#define D             double
#define S             second
#define F             first
#define pb            push_back
#define ff            fflush(stdout)
#define ppb           pop_back()
#define B(c)          (c).begin()
#define E(c)          (c).end()
#define all(c)        (c).begin(),(c).end()
#define rall(c)       (c).rbegin(),(c).rend() 
#define lb            lower_bound
#define ub            upper_bound
#define si(c)         (int)((c).size())
#define L(c)           c[si(c)-1]
#define gcd(a,b)      __gcd(a,b)
#define lcm(a,b)      (a*(b/gcd(a,b)))  
#define accuracy      cout << fixed << setprecision(18);
#define inf           (int)1e18
#define pow(i,n)      (int)pow((int)i,n)
#define err           cerr<<"move"<<'\n';
#define print         cout<<"move"<<'\n';
#define en            '\n'

typedef vector<int>                           vi;
typedef pair<int,int>                         pii;
typedef vector<pii>                           vpi;
typedef pair<int,pii>                         pipii;
typedef vector<vector<int> >                  vvi;
typedef map<int,int>                          mp;
typedef map<string,int>                       msi;
typedef priority_queue<pii, vector<pii>, greater<pii> > pq;

inline  void normal(int &a) { a = (a+MOD)%MOD; }
inline  int modMul(int a, int b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a*b)%MOD; }
inline  int modAdd(int a, int b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a+b)%MOD; }
inline  int modSub(int a, int b) { a %= MOD, b %= MOD; normal(a), normal(b); a -= b; normal(a); return a; }
inline  int modPow(int b, int p) { int r = 1; while(p) { if(p&1) r = modMul(r, b); b = modMul(b, b); p >>= 1; } return r; }
inline  int modInv(int a) { return modPow(a, MOD-2); }
inline  int modDiv(int a,int b) { return modMul(a, modInv(b)); }

const int N = 4e5+1;
vi V;
int n, x, R, C, cntt[N];
map <int, int> M;


void solve(){
   cin >> n;
   for (int i = 0; i < n; i++) {
        cin >> x;  M[x]++;
   }
   for(auto u = B(M); u != E(M); u++){
       cntt[u->S]++;
   }
   x = n;
   for(int i = n; i > 0; i--){
       if(R*C < (x/i*i) && i <= x/i){
           R = i, C = x/i;
       }
       x -= cntt[i];
       cntt[i-1] += cntt[i];
   }
   cout << R*C << endl;
   cout << R << " " << C << endl;
   if(!(R*C))return;
   int ans[R][C];
   x = min(R, C);
   vpi p;
   for(auto u = B(M); u != E(M); u++){
       p.pb({min(u->S, x), u->F});
   }
   sort(rall(p));
   while(si(p)){while(p.back().F){V.pb(p.back().S), p.back().F--;}p.ppb;}
   int i = 0, j = 0, cnt = 0;
   for(int i = 0; i < C; i++){
        for(int j = 0; j < R; j++){
            ans[j][(i+j)%C] = V.back(), V.ppb;
        }
   }
   for(int i = 0; i < R; i++){
       for(int j = 0; j < C; j++){
           cout << ans[i][j] << " ";
       }
       cout << endl;
   }
}

signed main(){

    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);    
    int t = 1;
    clock_t start, end; 
    start = clock(); 

    accuracy;
    

    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
    freopen("error.txt","w", stderr);
    #endif

    //cin >> t;

    while(t--){
        solve();
    }

    end = clock();
    double time_taken = double(end - start) / double(CLOCKS_PER_SEC); 
    //cerr<<time_taken;
}