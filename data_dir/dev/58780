#include <bits/stdc++.h>
         
using namespace std;
typedef long long ll;
typedef vector<ll> vl ;
typedef pair<ll,ll> pl;
         
#define mp make_pair
#define pb push_back
#define f first
#define s second
#define all(v) (v).begin(),(v).end()
#define max(a,b) (a>b ? a : b)
#define min(a,b) (a<b ? a : b)
#define FAST ios::sync_with_stdio(0), cin.tie(0),cout.tie(0)
         
const int MOD = 998244353 ;
const int N = 500005;
const double PI =4*atan(1);
const double eps = 1e-7;
const long long oo = 1e10;
const int K = 205;

pair<int,int> getedge(int a, int b){
    return {min(a,b),max(a,b)};
}


vector<int> adj[N];
int n,m;
int t;
int x,y;
vector<pair<int,int> > edges;
vector<int> indices;
bool vis[N];

int main(){
    FAST;
    //freopen("easy.txt","r",stdin);
    cin >> t;
    while(t--){
        cin >> n >> m;
        for(int i=0;i<3*n;i++){
            adj[i].clear();      
              }
        edges.clear();
        indices.clear();
        for(int i=0;i<3*n;i++){
            vis[i]=0;
        }
        for(int i=0;i<m;i++){
            cin >> x >> y;
            x--;y--;
            adj[x].pb(y);
            adj[y].pb(x);
            edges.pb(getedge(x,y));
        }
        int cnt=0;
        for(int i=0;i<m;i++){
            if(vis[edges[i].f])continue;
            if(vis[edges[i].s])continue;
            vis[edges[i].f]=1;
            vis[edges[i].s]=1;
            indices.pb(i);
            cnt++;
        }
        if(cnt>=n){
            cout << "Matching\n";
            for(int i=0;i<n;i++){
                cout << indices[i]+1 <<  " ";
            }
            cout << "\n";
            continue;
        }
        indices.clear();
        for(int i=0;i<3*n;i++){
            if(vis[i]==0)indices.pb(i);
        }
        if(indices.size()>=n){
            cout <<  "IndSet\n";
            for(int i=0;i<n;i++){
                cout << indices[i] +1 << " ";
            }
            cout << "\n";
            continue;
        }
        cout << "Impossible\n";

        
    }
    return 0;
}