#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC target("avx,avx2,fma")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("sumsqr.in");ofstream out("sumsqr.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

int a,mn=0,mx=0;
vec<vec<int>> l;

int dmx(int v, int p){
    if(l[v].size()==1) return 1; //leaf
    int o = 0;
    for(int h : l[v]){
        if(h==p) continue;
        o += dmx(h, v);
    }
    mx -= max(0, o-1);
    return 0;
}

vec<int> dep;
void check(int v, int p, int d){
    if(l[v].size()==1){
        dep.pb(d);
        return;
    }
    for(int h : l[v]){
        if(h==p) continue;
        check(h, v, d+1);
    }
}

int main() {
    fast;
    cin>>a;
    mx = a-1;
    l = vec<vec<int>>(a, vec<int>());
    for(int q=0; q<a-1; q++){
        int x,y; cin>>x>>y; x--, y--;
        l[x].pb(y);
        l[y].pb(x);
    }
    int st = -1;
    for(int q=0; q<a; q++){
        if(l[q].size()>1) st = q;
    }
    dmx(st, -1);
    check(st, -1, 0);
    int fl = 1;
    for(int q=0; q<dep.size(); q++) fl &= dep[q]%2==dep[0]%2;
    mn = fl ? 1 : 3;
    cout<<mn<<" "<<mx;
}