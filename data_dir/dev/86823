// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")
 
#define MP make_pair
#define PB push_back
#define ST first
#define ND second
 
using namespace __gnu_pbds;
using namespace std;
 
template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
 
//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k
 
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;
 
void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}
 
const int N = 2*(int)1e5 + 3;
 
int n, c, a[N], b[N], dp[2][N];
 
int main() {
  init_ios();
  cin >> n >> c;
  for (int i = 1; i < n; ++i)
    cin >> a[i];
  for (int i = 1; i < n; ++i)
    cin >> b[i];
  for (int i = 2; i <= n; ++i) {
    dp[0][i] = min(c+b[i-1]+min(dp[0][i-1], dp[1][i-1]), a[i-1]+dp[0][i-1]);
    dp[1][i] = min(b[i-1]+min(dp[0][i-1], dp[1][i-1]), a[i-1]+dp[0][i-1]);
  }
  for (int i = 1; i <= n; ++i)
    cout<<dp[0][i]<<" ";
  cout<<"\n";
}