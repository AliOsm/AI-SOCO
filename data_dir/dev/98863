#include<stdio.h>
#include<vector>
#include<algorithm>
#include <iostream>
#include <cmath>
#include <complex>
#include<queue>
#include <string>
#include<bits/stdc++.h>
#define pi 3.14159265
#define pdd pair<double, double>
using namespace std;
typedef long long  ll;
typedef pair<ll, ll>pii;
//template<typename T>T gcd(T x, T y) { if(y == 0)return x; else return gcd(y, x%y); }
//typedef bitset<8> mask;
//int x[8]={1,0,0,-1,-1,-1,1,1};
//int y[8]={0,1,-1,0,-1,1,-1,1};
//const double PI = acos(-1.0);
//const double EPS = 1e-9;
//typedef complex<double> point;
ll  n,k,c,g,ans[100003],t,b[100010];
vector<pair<pii,ll>>v;
multiset<ll>q;
int main()
{
    //cout<<Pow((ll)1000000,(ll)110);
//freopen("hotel.in","r",stdin);
//freopen("math.in","w",stdout);
//    char input[15];
//    scanf("%s", &input);
cin>>n>>k;
v.resize(n);
for(int i=0;i<n;i++)
    cin>>v[i].first.first;
for(int i=0;i<n;i++)
{
    cin>>v[i].first.second;
    v[i].second=i;b[i]=v[i].first.second;
}
sort(v.rbegin(),v.rend());
c=n-1;
for(int i=n-1;i>-1;i--)
{
    while(v[c].first.first<v[i].first.first)
       q.insert(v[c].first.second),c--;
    g=0,t=0;
    auto it=q.end();
    if(q.size())
     it--;
    while(q.size())
    {
        if(g>=k)
            break;
        t+=*it;
        if(it==q.begin())
            break;
        g++;it--;
    }
    ans[v[i].second]=b[v[i].second]+t;
}
for(int i=0;i<n;i++)
    cout<<ans[i]<<" ";
return 0;
}
