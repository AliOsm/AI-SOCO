// inplace_merge(T + beg, T + mid + 1, T + end + 1);
// unsigned Long hash[maxn],p = 999999999989; hash[0] = 1; fo(i,1,maxn)hash[i] = hash[i-1] * p;
// __builtin_popcount(n);
/*
ID: Tariqul
PROG:
LANG: C++
*/

#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
#include <unistd.h> // sleep(1)

using namespace std;

#define fo(i,j,n) for(i=j;i<n;++i)
#define Fo(i,j,n) for(i=n-1;i>=j;--i)
#define foo(i,j,v) fo(i,j,sz(v))
#define Foo(i,j,v) Fo(i,j,sz(v))
#define li(v) v.begin(),v.end()
#define sz(v) ((int)v.size())
#define CLR(a,v) memset((a),(v),sizeof(a))
#define inf 1e9 + 10
#ifdef localhost
#define Long long long
#else
typedef __int64 Long;
#endif // localhost
#define pi (2*acos(0))
#define eps 1e-9

#define two(X) (1<<(X))
#define twoL(X) (((Long)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)

char BUFFER[100000 + 5];
bool readn(int &n)	{ return scanf("%d",&n) == 1; }
#ifdef localhost
bool readl(Long &n)	{ return scanf("%lld",&n) == 1; }
#else
bool readl(Long &n)	{ return scanf("%I64d",&n) == 1; }
#endif // localhost
bool readd(double &n){ return scanf("%lf",&n) == 1; }
bool reads(string &s){ s = ""; int n = scanf("%s",BUFFER); if(n == 1)s = BUFFER; return n == 1; }
bool readln(string &s){ char *valid = gets(BUFFER); if(valid)s = BUFFER; return ((bool)valid); }
#ifdef localhost
void Print(Long &n, bool printNewLine = true)	{ printNewLine ? printf("%lld\n",n) : printf("%lld",n);  }
#else
void Print(Long &n, bool printNewLine = true)	{ printNewLine ? printf("%I64d\n",n) :  printf("%I64d",n); }
#endif // localhost


const int maxn = 4e5 + 10;
int T[maxn],d;

void Set(int left, int right, int val, int beg = 0, int end = -1, int v = 1)
{
    int mid = (beg + end) / 2, v1 = 2 * v, v2 = v1 + 1;

    if(beg == left && end == right)
    {
        T[v] = val;
        d = 0;
        return;
    }

    if(right <= mid)Set(left, right, val, beg, mid, v1);
    else if(left > mid)Set(left, right, val, mid+1, end, v2);
    else
    {
        Set(left,mid,val,beg,mid,v1);
        Set(mid+1,right,val,mid+1,end,v2);
    }
    if(d == 0)T[v] = T[v1] | T[v2];
    else T[v] = T[v1] ^ T[v2];
    d = 1 - d;
}


int main()
{
	#ifdef localhost
    freopen("/home/tariqul/APC/Contest/input.txt","r",stdin);
    //freopen("/home/tariqul/APC/Contest/output.txt","w",stdout);
	#else
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	#endif

    int i,n,m,d,val;  cin >> n >> m; n = two(n); fo(i,0,n){ cin >> val; Set(i,i,val,0,n-1); }

    while(m--)
    {
        readn(i); i--; readn(val);
        Set(i,i,val,0,n-1);
        cout << T[1] << endl;
    }

    return 0;
}
