#include <algorithm>
#include <iostream>
#include <cstring>
#include <climits>
#include <cassert>
#include <iomanip>
#include <cstdio>
#include <vector>
#include <string>
#include <stack>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define type(x) __typeof((x).begin())
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

const int inf = 1e9 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 555;

int d[N][N];
int add[N];
bool has[N];
long long ans[N];

int main(){

#ifdef KAZAR
	freopen("f.input","r",stdin);
	freopen("f.output","w",stdout);
	freopen("error","w",stderr);
#endif

    int n = read();

    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= n; j++){
            d[i][j] = read();
        }
    }

    for(int i = 1; i <= n; i++){
        add[n - i + 1] = read();
    }

    for(int i = 1; i <= n; i++){
        int u = add[i];
        has[u] = true;
        for(int j = 1; j <= n; j++) if(j != u){
            for(int k = 1; k <= n; k++) if(k != u && k != j){
                umin(d[j][k], d[j][u] + d[u][k]);
            }
        }
        long long res = 0ll;
        for(int i = 1; i <= n; i++) if(has[i]){
            for(int j = 1; j <= n; j++) if(has[j] && i != j){
                res += d[i][j];
            }
        }
        ans[n - i + 1] = res;
    }

    for(int i = 1; i <= n; i++){
        printf("%I64d ",ans[i]);
    }

    return 0;

}
