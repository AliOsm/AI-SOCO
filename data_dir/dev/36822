#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <queue>
#include <map>
#include <string.h>
#include <sstream>
#include <vector>
#include <math.h>
#include <stack>
#include <set>
#include <stdlib.h>
#include <time.h>

const int N=200010;
const int inf=0x3f3f3f3f;
const double eps=1e-6;
const double e=2.718281828459046;

using namespace std;

#define sz(x) (int((x).size()))
#define pb push_back
#define mp make_pair

typedef long long ll;
const ll mod=1e9+7;
const int S=20;

struct data
{
	int l,r,id;
	data() {}
	data(int l,int r,int id):l(l),r(r),id(id) {}
	bool operator < (const data &a) const
	{
		if(r==a.r) return l>a.l;
		return r<a.r;
	}
};

int h[N],de[N];
string str[N];
vector<int> dep[N],vt[N];
int l[N],r[N],tot;
vector<data> ret[N];
int ans[N];

int c[N];

void insert(int id,int x)
{
	for(int i=id;i<N;i+=i&(-i))
		c[i]+=x;
}

int query(int id)
{
	int ret=0;
	for(int i=id;i>0;i-=i&(-i))
		ret+=c[i];
	return ret;
}

void dfs(int u,int p,int d)
{
	de[u]=d;h[++tot]=u;
	dep[d].pb(tot);l[u]=tot;
	for(int i=0;i<sz(vt[u]);i++)
	{
		int v=vt[u][i];
		if(v==p) continue;
		dfs(v,u,d+1);
	}
	r[u]=tot;
}



int main()
{
	int n,m,root=0;
	cin>>n;
	for(int i=1;i<=n;i++)
	{
		int p;
		cin>>str[i]>>p;
		vt[i].pb(p);
		vt[p].pb(i);
	}
	dfs(0,0,0);
	// for(int i=1;i<=tot;i++)
		// cout<<h[i]<<" ";cout<<endl;
	// for(int i=1;i<=n;i++)
		// cout<<l[i]<<" "<<r[i]<<" "<<de[i]<<endl;
	// for(int i=0;i<3;i++)
	// {
		// for(int j=0;j<sz(dep[i]);j++)
			// cout<<dep[i][j]<<" ";cout<<endl;
	// }
	scanf("%d",&m);
	for(int i=0;i<m;i++)
	{
		int a,b;
		scanf("%d%d",&a,&b);
		int d=de[a]+b;
		if(sz(dep[d])==0) continue;
		int rr=upper_bound(dep[d].begin(),dep[d].end(),r[a])-dep[d].begin()-1;
		int ll=lower_bound(dep[d].begin(),dep[d].end(),l[a])-dep[d].begin();
		if(rr<ll) continue;
		// cout<<ll<<" "<<rr<<" "<<i<<endl;
		ret[d].pb(data(ll,rr,i));
	}
	for(int k=0;k<N;k++)
	{
		for(int i=0;i<sz(dep[k]);i++)
			c[i+1]=0;
		map<string,int> f;
		sort(ret[k].begin(),ret[k].end());
		for(int i=0,j=0;i<sz(ret[k]);i++)
		{
			int l=ret[k][i].l;
			int r=ret[k][i].r;
			while(j<=r)
			{
				string s=str[h[dep[k][j]]];
				if(f[s]) insert(f[s],-1),insert(j+1,1),f[s]=j+1;
				else f[s]=j+1,insert(j+1,1);
				j++;
				// cout<<s<<" "<<f[s]<<" "<<k<<endl;
			}
			// cout<<l<<" "<<r<<" "<<query(l)<<" "<<query(r+1)<<endl;
			ans[ret[k][i].id]=query(r+1)-query(l);
		}
	}
	for(int i=0;i<m;i++)
		printf("%d\n",ans[i]);
    return 0;
}