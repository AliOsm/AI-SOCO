#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef long double real;

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif

using namespace std;

const int MaxN = 102, MaxD = 4, NA = -1, MaxC = 0x3F3F3F3F;
const int dx [MaxD] = {-1,  0,  1,  0},
          dy [MaxD] = { 0, -1,  0,  1};

char a [MaxN] [MaxN];
int nextx [MaxN] [MaxN] [MaxD] [MaxD];
int nexty [MaxN] [MaxN] [MaxD] [MaxD];
int nextd [MaxN] [MaxN] [MaxD] [MaxD];
int nextc [MaxN] [MaxN] [MaxD] [MaxD];
int bpx, bpy, cp, dp, m, n;

int main (void)
{
 int i, j, d, e;
 while (scanf (" %d %d", &m, &n) != EOF)
 {
  memset (a, 0, sizeof (a));
  for (i = 1; i <= m; i++)
   scanf (" %s", a[i] + 1);
  for (i = 0; i < MaxN; i++)
   for (j = 0; j < MaxN; j++)
    if (!('1' <= a[i][j] && a[i][j] <= '9'))
     a[i][j] = '\0';
/*
  for (i = 0; i < MaxN; i++)
   for (j = 0; j < MaxN; j++)
    printf ("%d %d %d\n", i, j, a[i][j]);
*/
  for (i = 0; i < MaxN; i++)
   for (j = 0; j < MaxN; j++) if (a[i][j])
    for (d = 0; d < MaxD; d++)
     for (e = 0; e < MaxD; e++)
      if ((e ^ d) & 1)
      {
       int cc, x0, y0, x, y;
       x0 = i;
       y0 = j;

       cc = a[x0][y0];
       while (1)
       {
        x = x0 + dx[d];
        y = y0 + dy[d];
        if (a[x][y] != cc)
         break;
        x0 = x;
        y0 = y;
       }

//       cc = a[x0][y0];
       while (1)
       {
        x = x0 + dx[e];
        y = y0 + dy[e];
        if (a[x][y] != cc)
         break;
        x0 = x;
        y0 = y;
       }

       x = x0 + dx[d];
       y = y0 + dy[d];
       if (a[x][y])
       {
        nextx[i][j][d][e] = x;
        nexty[i][j][d][e] = y;
        nextd[i][j][d][e] = d;
        nextc[i][j][d][e] = e;
       }
       else
       {
        nextx[i][j][d][e] = i;
        nexty[i][j][d][e] = j;
        if (e == ((d + 1) & 3))
        {
         nextd[i][j][d][e] = d;
         nextc[i][j][d][e] = e ^ 2;
        }
        else
        {
         nextd[i][j][d][e] = (d + 3) & 3;
         nextc[i][j][d][e] = (nextd[i][j][d][e] + 1) & 3;
        }
       }
      }

  bpx = 1;
  bpy = 1;
  dp = 3;
  cp = (dp + 1) & 3;
  for (i = 0; i < n; i++)
  {
   int u, v, w, x;
   u = nextx[bpx][bpy][dp][cp];
   v = nexty[bpx][bpy][dp][cp];
   w = nextd[bpx][bpy][dp][cp];
   x = nextc[bpx][bpy][dp][cp];
   bpx = u;
   bpy = v;
   dp = w;
   cp = x;
  }

  printf ("%c\n", a[bpx][bpy]);
 }
 return 0;
}
