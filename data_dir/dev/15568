#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>
 
using namespace std;
using namespace __gnu_pbds;
 
#define endl '\n'
 
typedef long long ll;
typedef pair<ll, ll> pii;
typedef tree<int, null_type,less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
 
template<typename T>
static T randint(T lo, T hi){
	return uniform_int_distribution<T>(lo, hi)(rng);
}
 
const ll maxn = 1000 + 5;

ll d[maxn][maxn], n, m, t, dx[] = {1, -1, 0, 0}, dy[] = {0, 0, 1, -1};
char a[maxn][maxn];

bool valid(ll x, ll y){
	return x >= 1 && x <= n && y >= 1 && y <= m;
}
 
int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
 
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
 	
	cin >> n >> m >> t;

	for(ll i = 1; i <= n; i++)
		for(ll j = 1; j <= m; j++)
			cin >> a[i][j];
	
	memset(d, -1, sizeof(d));
	
	queue<pii> Q;
	for(ll i = 1; i <= n; i++){
		for(ll j = 1; j <= m; j++){
			ll cnt = 0;
			for(ll k = 0; k < 4; k++){
				ll ii = i + dx[k];
				ll jj = j + dy[k];
				if(valid(ii, jj) && a[ii][jj] == a[i][j])
					++cnt;
			}
			if(cnt){
				d[i][j] = 0;
				Q.push({i, j});
			}
		}
	}

	while(!Q.empty()){
		ll x = Q.front().first;
		ll y = Q.front().second;
		Q.pop();

		for(ll i = 0; i < 4; i++){
			ll nx = x + dx[i];
			ll ny = y + dy[i];

			if(valid(nx, ny) && d[nx][ny] == -1){
				d[nx][ny] = d[x][y] + 1;
				Q.push({nx, ny});
			}
		}
	}

	while(t--){
		ll x, y, p;
		cin >> x >> y >> p;

		if(p <= d[x][y] || d[x][y] == -1)
			cout << a[x][y] << endl;
		else{
			ll dif = p - d[x][y];
			ll val = a[x][y] - '0';
			if(dif % 2)
				cout << 1 - val << endl;
			else
				cout << val << endl;
		}
	}
 
	return 0;
}