#pragma warning(disable:4786)
#pragma warning(disable:4996)
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/trie_policy.hpp>
#include<ext/pb_ds/detail/standard_policies.hpp>
#define pii pair<int,int>
#define pll pair<long long ,long long>
#define pli pair<long long , int>
#define pil pair<int ,long long>
#define pi acos(-1)
#define pb push_back
#define mkp make_pair
#define all(a) a.begin(), a.end()
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define ll long long
#define MAX 300005
#define INF 0x3f3f3f3f
template <class T> inline T bigmod(T p,T e,T M){ll ret = 1LL;for(; e > 0LL; e >>= 1LL){if(e & 1LL) ret = (ret * p) % M;p = (p * p) % M;}return (T)ret;}
template <class T> inline T modinverse(T a,T M){return bigmod(a,M-2,M);}   // M is prime}

using namespace std;
using namespace __gnu_pbds;

typedef trie<string,null_type,trie_string_access_traits<>,pat_trie_tag,trie_prefix_search_node_update>pref_trie;
typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
typedef tree<pair<int, int>,null_type,less<pair<int, int>>,rb_tree_tag,tree_order_statistics_node_update> ordered_multiset;


int lp[100001];

vector<int>prime;

void FindLowestPrimeFactor(){
    for(int i=2;i<=100001;i++){
        if(lp[i]==0){
            lp[i]=i;
            prime.pb(i);
        }
        for(int j=0;j<prime.size();j++){
            if(lp[i]<prime[j])break;
            if(i*prime[j]>100000)break;

            lp[i*prime[j]]=prime[j];
        }
    }
}


int main(){
    IOS
    //freopen("output.txt","w",stdout);
    FindLowestPrimeFactor();

    int n;
    cin>>n;
    vector<int>vec[100005];
    bool vis[n+1];
    memset(vis,false,sizeof vis);
    for(int i=1;i<prime.size();i++){
        int cur = prime[i];
        for(int j=cur;j<=n;j+=cur){
            if(vis[j]==false){
                vec[cur].pb(j);
                vis[j]=true;
            }
        }
    }
    memset(vis,false,sizeof vis);
    vector<pair<int,int> >ans;
    for(int i=3;i<=n;i++){
        if(vec[i].size()==1)continue;
        if(vec[i].size()&1){
            ans.pb({vec[i][0],vec[i][2]});
            vis[vec[i][0]]=true;
            vis[vec[i][2]]=true;
            //vec[2].pb(vec[i][1]);
            for(int j=3;j+1<vec[i].size();j+=2){
                vis[vec[i][j]]=true;
                vis[vec[i][j+1]]=true;
                ans.pb({vec[i][j],vec[i][j+1]});
            }
        }
        else{
            for(int j=0;j+1<vec[i].size();j+=2){
                vis[vec[i][j]]=true;
                vis[vec[i][j+1]]=true;
                ans.pb({vec[i][j],vec[i][j+1]});
            }
        }
    }

    for(int i=2;i<=n;i+=2){
        if(vis[i]==false)vec[2].pb(i);
    }
    for(int i=0;i+1<vec[2].size();i+=2){
        ans.pb({vec[2][i],vec[2][i+1]});
    }
    cout<<ans.size()<<"\n";

    for(int i=0;i<ans.size();i++)cout<<ans[i].first<<" "<<ans[i].second<<"\n";
}
