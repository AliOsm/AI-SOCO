#pragma comment(linker, "/stack:64000000")

#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>
#include <cassert>
#include <ctime>
#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <algorithm>
#include <queue>

using namespace std;

#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++)
#define all(v) (v).begin(), (v).end()
#define sz(v) (int)(v).size()

typedef long long llong;

const int MAX = 1000 + 10;
const int INF = 1 << 29;
char s[MAX][MAX];
bool u[MAX][MAX][4];
int d[MAX][MAX][4];
int dx[] = {0, 1, 0, -1};
int dy[] = {-1, 0, 1, 0};

struct State {
    int x, y, d, s;

    State() {}

    State(int x, int y, int d, int s): x(x), y(y), d(d), s(s) {}

    bool operator<(const State& state) const {
        return s < state.s;
    }
};

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
    REP(i, MAX) REP(j, MAX) REP(k, 4) d[i][j][k] = INF;
    memset(u, 0, sizeof(u));
    int n, m;
    scanf("%d %d\n", &n, &m);
    //n=m=1000;
    //REP(i,n)REP(j,m)s[i][j]='#';
    REP(i, n) gets(s[i]);
    //priority_queue <State> q;
    deque <State> q;
    q.push_back(State(n - 1, m - 1, 0, 0));
    d[n - 1][m - 1][0] = 0;
    while (!q.empty()) {
        State cur = q.front();
        q.pop_front();
        if (u[cur.x][cur.y][cur.d]) {
            continue;
        }
        u[cur.x][cur.y][cur.d] = true;
        if (cur.x == 0 && cur.y == 0 && cur.d == 0) {
            printf("%d\n", d[cur.x][cur.y][cur.d]);
            return 0;
        }
        int nx = cur.x + dx[cur.d];
        int ny = cur.y + dy[cur.d];
        if (0 <= nx && nx < n && 0 <= ny && ny < m && !u[nx][ny][cur.d] && d[cur.x][cur.y][cur.d] < d[nx][ny][cur.d]) {
            d[nx][ny][cur.d] = d[cur.x][cur.y][cur.d];
            q.push_front(State(nx, ny, cur.d, -d[nx][ny][cur.d]));
        }
        if (s[cur.x][cur.y] == '#') {
            REP(i, 4) {
                int nx = cur.x;
                int ny = cur.y;
                if (!u[nx][ny][i] && d[cur.x][cur.y][cur.d] + 1 < d[nx][ny][i]) {
                    d[nx][ny][i] = d[cur.x][cur.y][cur.d] + 1;
                    q.push_back(State(nx, ny, i, -d[nx][ny][i] + 1));
                }
            }
        }
    }
    puts("-1");
	return 0;
}
