#include <bits/stdc++.h>
using namespace std;

int main() {
#ifdef LOCAL
  // freopen("data.in", "rt", stdin);
  auto _start = chrono::high_resolution_clock::now();
#endif

  ios::sync_with_stdio(false);
  cin.tie(0), cout.tie(0);
  cout << fixed << setprecision(15);
  int n;
  cin >> n;
  vector<int> a(n);
  int g = 0;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    g = __gcd(g, a[i]);
  }
  int max_a = *max_element(a.begin(), a.end());
  vector<int> min_factor(max_a + 1);
  vector<int> prime;
  for(int i = 2; i <= max_a; i++) {
    if(!min_factor[i]) {
      min_factor[i] = i;
      prime.push_back(i);
    }
    for (int p : prime) {
      if (i * p > max_a) break;
      min_factor[i * p] = p;
      if (i % p == 0) break;
    }
  }
  unordered_map<int, int> mp;
  for (int i = 0; i < n; i++) {
    for (int j = a[i] / g, x; j > 1; ) {
      for(mp[x = min_factor[j]]++; min_factor[j] == x; j /= min_factor[j]);
    }
  }
  int ans = 0;
  for (auto &p : mp) {
    ans = max(ans, p.second);
  }
  cout << (ans ? n - ans : -1) << '\n';

#ifdef LOCAL
  auto _end = chrono::high_resolution_clock::now();
  cerr << "elapsed time: " << chrono::duration<double, milli>(_end - _start).count() << " ms\n";
#endif
  return 0;
}