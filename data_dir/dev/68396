#include <bits/stdc++.h>
using namespace std;
struct P
{
    int x,y;
    bool operator<(const P &a)const{
        if(y!=a.y) return y>a.y;
        return x>a.x;
    }

};
vector<int> v;
//bitset<4001000> b;
int i,n,d,m,k,a,b,c;
int o[311111];
int l[1];
int j[1];
int e;
int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=1000000007,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[1];
//stack<int> s;
//set<int> se;
//priority_queue<int> q;
//queue<int> q;
string r;
char r1[5511];
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
map<int,int> p[2];
/*
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
*/
bool as(P a,P b)
{
    return a.x<b.x;
}

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//rng();


int f()
{
    int n=0,m=d-1;
    for(;n<m;n++,m--)
    if(r1[n]!=r1[m]) return 0;
    for(int t=0;t<d;t++)
        if(r[t]!=r1[t]) goto zxc;
    return 0;
    zxc:;
    return 1;
}

int main()
{
    cin>>r;
    if(r.size()%2==0)
    {
        k=r[0];
        for(int t=1;t<r.size();t++)
            if(k!=r[t]) goto qwe;
        puts("Impossible");
        return 0;
        qwe:;

    }
    else
    {


    k=r[0];
    for(int t=1;t<r.size();t++)
        if(t!=r.size()/2&&k!=r[t]) goto qwer;
    puts("Impossible");
        return 0;
    qwer:;
    }
    d=r.size();
    for(int t=0;t<d-1;t++)
    {

        i=0;
        for(int h=t+1;h<r.size();h++)
            r1[i]=r[h],i++;
        for(int h=0;h<=t;h++)
            r1[i]=r[h],i++;
        if(f())
        {
            puts("1");
            return 0;
        }


    }
    puts("2");
}

