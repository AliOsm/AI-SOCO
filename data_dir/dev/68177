#pragma GCC optimize("omit-frame-pointer")
#pragma GCC optimize("unroll-loops")

#include <bits/stdc++.h>

using namespace std;

#define fr first
#define sc second
#define pb push_back
#define ins insert
#define input freopen("input.txt","r",stdin)
#define output freopen("output.txt","w",stdout)
#define mp make_pair
#define fast_io ios_base::sync_with_stdio(0);
#define form(i,a,n) for (int i=(a);i<(n);i++)
#define forn(i,a,n) for (int i=(a);i<(n);i++)
#define y1 yy1
//iterator , unsigned, begin, end, count, continue
// fixed setprecision

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef vector<int> vi;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

string itosm(ll x){
    if(x == 0)
        return "0";
    string ans = "";
    while(x > 0){
        ans +=((x%10) + '0');
        x/=10;
    }
    reverse(ans.begin(), ans.end());
    return ans;
}

ll stoim(string str){
    ll ans = 0;
    ll k = 1;
    for(int i = str.length()-1; i >= 0; i--){
        ans+=(str[i]-'0')*k;
        k*=10;
    }
    return ans;
}

const ll infll = 1e18 + 3;
const int inf = 1009000999;
const double eps = 1e-7;
const int maxn = 1e6 + 42;
const int baseint = 1000200013;
const ll basell = 1e18 + 3;
const ld PI = acos(-1.0);
const ll mod = 1e9 + 7;

struct _bor{
    int l, r, cnt;
    _bor(int L, int R, int CNT): l(L), r(R), cnt(CNT){}
};

int a[maxn];
int p[maxn];
vector<_bor> bor;

void add(int v, int x, int j){
    bor[v].cnt++;
    if(j == -1)
        return;
    if(x & (1 << j)){
        if(bor[v].r == 0){
            bor[v].r = bor.size();
            bor.pb(_bor(0, 0, 0));
        }
        add(bor[v].r, x, j - 1);
    }
    else{
        if(bor[v].l == 0){
            bor[v].l = bor.size();
            bor.pb(_bor(0,0,0));
        }
        add(bor[v].l, x, j - 1);
    }
}

int go(int v, int x, int j){
    bor[v].cnt--;
    if(j == -1)
        return x;
    if(x & (1 << j)){
        if(bor[v].r > 0 && bor[bor[v].r].cnt > 0)
            return go(bor[v].r, x ^ (1 << j), j - 1);
        return go(bor[v].l, x, j - 1);
    }
    else{
        if(bor[v].l > 0 && bor[bor[v].l].cnt > 0)
            return go(bor[v].l, x, j - 1);
        return go(bor[v].r, x ^ (1 << j), j - 1);
    }
}

void solve(){
    int n = 300000;
    cin >> n;
    bor.pb(_bor(0, 0, 0));
    for(int i = 0; i < n; i++){
        a[i] = 0;
        cin >> a[i];
    }
    for(int i = 0; i < n; i++){
        int x = i;
        cin >> x;
        add(0, x, 29);
    }
    for(int i = 0; i < n; i++){
        cout << go(0, a[i], 29) << " ";
    }
}

int main(){
//    srand(228);
    srand(time(0));
    fast_io;
    cin.tie(0);
    cout.tie(0);
//    input;
//    freopen("1", "w", stdout);
//    for(int i = 0; i < 100000; i++)
//        brut();
//    output;
//    freopen("friends.in", "r", stdin);
//    freopen("friends.out", "w", stdout);
//     int t;
//     cin >> t;
//    scanf("%d", &t);
//    int cnt = 1;
//     while(t--){
//        printf("Case %d: ", cnt);
//    while(1)
        solve();
//        gen();
//        brut();
//         cout << "\n";
//        puts("");
//        cnt++;
//     }
    return 0;
}
