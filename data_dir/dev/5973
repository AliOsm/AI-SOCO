#include <bits/stdc++.h>
using namespace std;

#define loop(i,n) for(int i = 0; i < n; i++)
#define pii pair<int, int>
typedef long long LL;
typedef long long llu;

const int INF = 1e9;
const int MOD = 1e9 + 7;
const int MX = 1e6 + 200;

LL fact[MX], pow2[MX];

llu modPow(llu a, llu x, llu p)
{
    //calculates a^x mod p
    llu res = 1;
    while(x > 0)
    {
        if( x % 2 != 0)
        {
            res = (res * a) % p;
        }
        a = (a * a) % p;
        x /= 2;
    }
    return (res%MOD);
}

llu modInverse(llu a, llu p)
{
    //calculates the modular multiplicative of a mod m assuming p is prime
    return modPow(a, p-2, p);
}

llu ncrmodp (llu n, llu r, llu p) {
//    printf("fact[%d] = %d\n", n, fact[n]);
    return (fact[n] * modInverse((fact[n - r] * fact[r]) % MOD, MOD)) % MOD;
}

void pre() {
    fact[0] = 1;
    pow2[0] = 1;
    for (int i = 1; i < MX; i++) {
        fact[i] = (LL) i * fact[i - 1];
        fact[i] %= MOD;
        pow2[i] = 2ll * pow2[i - 1];
        pow2[i] %= MOD;
    }
}

int primes[MX], back[MX];

void sieve() {
    loop(i, MX) primes[i] = 1;
    back[1] = 1;
    for (int i = 2; i < MX; i++) {
        if (!primes[i]) continue;
        back[i] = i;
        for (int j = 2 * i; j < MX; j += i) {
            primes[j] = 0;
            back[j] = i;
        }
    }
}

map<int, int> get_factors(int u) {
    map<int, int> res;
    do {
        res[back[u]]++;
        u /= back[u];
    } while (u > 1);
    return res;
}

int main()
{
#ifdef DEBUG
    freopen("in.txt", "r", stdin);
#endif
    ios_base::sync_with_stdio(false);
    pre();
    sieve();
    int q;
    scanf("%d", &q);
    loop(k, q) {
        int x, y;
        scanf("%d%d", &x, &y);
        LL ans = 1;
        map<int, int> factors = get_factors(x);
        for (auto it = factors.begin(); it != factors.end(); it++) {
            int u = it->first; // divisor
            int cnt = it->second;
            if (u == 1) continue;
            ans = (ans * ncrmodp(cnt + y - 1, y - 1, MOD)) % MOD;
        }
        ans = (ans * pow2[y - 1]) % MOD;
        printf("%lld\n", ans);
    }
    return 0;
}