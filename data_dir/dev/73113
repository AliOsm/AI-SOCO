#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#define P_B push_back
#define M_P make_pair
#define F first
#define S second
#define size(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define FR(i, a, b) for(int i = a; i < b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define MOD 1000000007
using namespace std;

typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

const int MAXN = 200 * 1000 + 10;
pll c[MAXN];
ll g[MAXN];
ll n, k, s, t;

bool ok(ll x)
{
	ll need = 0;
	ll pos = 0;
	FR(i, 0, k)
	{
		ll dist = g[i] - pos;
		if(dist > x)
			return false;
		ll a = min(x - dist, dist);
		need += a + (dist - a) * 2;
		pos = g[i];
	}
	ll dist = s - pos;
	if(dist > x)
		return false;
	ll a = min(x - dist, dist);
	need += a + (dist - a) * 2;
	if(need <= t)
		return true;
	return false;
}

ll bs(ll s, ll e)
{
	if(e - s <= 1)
	{
		if(ok(s))
			return s;
		else
			return e;
	}
	ll m = (s + e) / 2;
	if(ok(m))
		return bs(s, m);
	else
		return bs(m + 1, e);
}


int main()
{	
	ios::sync_with_stdio(false);
	cin>> n >> k >> s >> t;
	ll mx = 0;
	FR(i, 0, n)
	{
		cin>> c[i].S >> c[i].F;
		mx = max(c[i].F, mx);
	}
	FR(i, 0, k)
		cin>> g[i];
	sort(c, c + n);
	sort(g, g + k);

	ll x = bs(-1, mx + 100);
	ll k = lower_bound(c, c + n, M_P(x, -1LL)) - c;
	if(!ok(x) || k >= n)
	{
		cout<< -1 << endl;
		return 0;
	}
	
	ll mn = LONG_MAX;
	FR(i, k, n)
		mn = min(c[i].S, mn);
	cout<< mn << endl;
	return 0;
}
