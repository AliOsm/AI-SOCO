#include<bits/stdc++.h>
using namespace std;
int const N = 1e5+10;
typedef pair<int,int> pii;
int n, id = 0, sz[N];
unordered_map<int,int> Map, m[N];
vector<pii> q[N];
vector<int> bit[N];
struct qry{
	int type, t, x;
	qry(int type, int t, int x) : type(type), t(t), x(x) {}
};
vector<qry> Q;
void update(int idx, int val, int i){
	while(idx < sz[i]) bit[i][idx] += val, idx += (idx&-idx);
}
int query(int idx, int i){
	int ret = 0;
	while(idx > 0) ret += bit[i][idx], idx -= (idx&-idx);
	return ret;
}
int main(){
	scanf("%d",&n);
	for(int i = 1; i <= n; i++){
		int type, t, x;
		scanf("%d%d%d",&type,&t,&x);
		if(!Map[x]) Map[x] = ++id;
		q[Map[x]].push_back(pii(t,type));
		Q.push_back(qry(type,t,Map[x]));
	}
	for(int i = 1; i <= id; i++){
		int cont = 0;
		sort(q[i].begin(),q[i].end());
		for(auto it: q[i])
		 if(!m[i][it.first]) m[i][it.first] = ++cont;
	 sz[i] = cont+1;
	 bit[i].resize(sz[i]+1,0);
	}
	for(int i = 0; i < n; i++){
		int type = Q[i].type, t = Q[i].t, x = Q[i].x, pos;
		pos = m[x][t];
		if(type == 1) update(pos,1,x);
		if(type == 2) update(pos,-1,x);
		if(type == 3) printf("%d\n",query(pos,x));
	}
	return 0;
}
