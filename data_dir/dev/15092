#include <bits/stdc++.h>
using namespace std;

string TT = "BRP";

int main(){
    int N;
    static int64_t X[200001];
    int T[200001];
    cin >> N;
    for(int i=0; i<N; i++){
        char t;
        cin >> X[i] >> t;
        T[i] = TT.find(t);
    }
    X[N] = X[N-1];
    T[N] = 2;
    
    bool first = true;
    int64_t prv = X[0];
    int64_t ans = 0;
    vector<int64_t> P[2];
    for(int i=0; i<=N; i++){
        if(T[i] < 2){
            P[T[i]].push_back(X[i]);
        }else{
            if(first && i == N){
                for(int k=0; k<2; k++) if(P[k].size()) ans += P[k].back() - P[k][0];
            }else if(first){
                for(int k=0; k<2; k++) if(P[k].size()) ans += X[i] - P[k][0];
            }else if(i == N){
                for(int k=0; k<2; k++) if(P[k].size()) ans += P[k].back() - prv;
            }else{
                int64_t d = X[i] - prv;
                if(P[0].size() > 1 || P[1].size() > 1){
                    for(int k=0; k<2; k++) P[k].push_back(X[i]);
                    int64_t res1 = 2*d;
                    int64_t res2 = d;
                    for(int k=0; k<2; k++){
                        int64_t mx = 0;
                        for(int j=0; j<P[k].size()-1; j++) mx = max(mx, P[k][j+1] - P[k][j]);
                        res2 += d - mx;
                    }
                    ans += min(res1, res2);
                }else{
                    ans += d;
                }
            }
            first = false;
            for(int k=0; k<2; k++) P[k] = {X[i]};
            prv = X[i];
        }
    }
    cout << ans << endl;
    return 0;
}
