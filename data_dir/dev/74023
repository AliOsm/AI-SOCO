#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>
#include <cstring>
#include <unordered_map>
#include <unordered_set>

using namespace std;

#define ll long long
#define ull unsigned long long
#define all(aaa) aaa.begin(), aaa.end()
#pragma warning(disable : 4996)

const int L = 20, N = 1 << L;
int a[N];
ll b[L + 1], c[L + 1];

vector<int> build(int L, int R, int H) {
	if (L == R)
		return { a[L] };
	int m = (L + R) >> 1;
	vector<int> v,
		vl = build(L, m, H - 1),
		vr = build(m + 1, R, H - 1);
	int x = 0, y = 0, z = 0;
	while (x < vl.size() && y < vr.size()) {
		if (vl[x] <= vr[y]) {
			if (!v.empty() && v.back() != vl[x])
				z = 0;
			z++;
			v.push_back(vl[x]);
			x++;
		}
		else {
			b[H] += vl.size() - x;
			if (!v.empty() && v.back() == vr[y])
				c[H] -= z;
			else
				z = 0;
			v.push_back(vr[y]);
			y++;
		}
	}
	while (y < vr.size() && vr[y] == v.back()) {
		c[H] -= z;
		v.push_back(vr[y]);
		y++;
	}
	v.insert(v.end(), vl.begin() + x, vl.end());
	v.insert(v.end(), vr.begin() + y, vr.end());
	return v;
}

signed main() {
#ifdef HOME
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	int n;
	cin >> n;

	for (int i = 0; i < (1 << n); i++)
		cin >> a[i];

	build(0, (1 << n) - 1, n);

	for (int i = 1; i <= n; i++)
		c[i] += (1ll << (i - 2 + n));

	int m;
	cin >> m;

	for (int i = 0; i < m; i++) {
		int q;
		cin >> q;
		for (int j = 1; j <= q; j++)
			b[j] = c[j] - b[j];
		ll ans = 0;
		for (int j = 0; j <= n; j++)
			ans += b[j];
		cout << ans << "\n";
	}

	return 0;
}