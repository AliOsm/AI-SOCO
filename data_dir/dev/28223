#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include <cassert>
#include <algorithm>

typedef long long ll;
const ll INF = (ll)1e18L;

ll solve(const int n, std::string s, std::vector<ll> cost) {
    std::vector<std::vector<ll>> dp(4, std::vector<ll>(n, INF));
    std::string t = "hard";
    for (int len = 0; len < 4; ++len) {
        for (int cnt = 0; cnt < n; ++cnt) {
            if (t[len] == s[cnt]) {
                // symbols are equal; can remove or not:
                dp[len][cnt] = std::min(
                    (cnt == 0 ? 0 : dp[len][cnt-1])+cost[cnt], 
                    len == 0 ? INF : cnt == 0 ? 0 : dp[len-1][cnt-1]);
            } else {
                // symbols aren't equal
                dp[len][cnt] = (cnt == 0 ? 0 : dp[len][cnt-1]);
            }
        }
    }
    return dp[3][n-1];
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0); std::cout.tie(0); std::cerr.tie(0);
    int n; std::string s;
    while (std::cin >> n >> s) {
        std::vector<ll> cost(n);
        for (auto &it : cost) {
            std::cin >> it;
        }
        std::cout << solve(n, s, cost) << std::endl;
    }
    return 0;
}