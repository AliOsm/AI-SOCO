/*
ID: hamed_51
PROG: ?
LANG: C++
*/

#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#if (_win32 || __win32__)
#define LLD "%i64d"
#else
#define LLD "%lld"
#endif

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << x << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-8
//#define endl "\n"

inline void read(register int *n) {
	register char c; *n = 0;
	do { c = getchar(); } while (c < '0' || c > '9');
	do { *n = c-'0'+*n*10; c = getchar(); } while (c >= '0' && c <= '9');
}

vector<int> V, res;
multiset<int> st;
int k;

void build(int d) {
	st.clear();
	res.clear();
	FOR(i, 0, Size(V)) {
		st.insert(V[i]);
		if (i >= d-1) {
			if (*st.rbegin()-*st.begin() <= k)
				res.pb(i-d+1);
			st.erase(st.find(V[i-d+1]));
		}
	}
}

int main(int argv, char **argc) {
	ios::sync_with_stdio(false);
	int n;
	cin >> n >> k;
	V.resize(n);
	FOR(i, 0, n) cin >> V[i];
	int mn = 1, mx = n;
	while (mn < mx) {
		int mid = (mn+mx+1)/2;
		build(mid);
		if (res.empty())
			mx = mid-1;
		else
			mn = mid;
	}
	build(mn);
	cout << mn << " " << Size(res) << endl;
	FOR(i, 0, Size(res)) cout << res[i]+1 << " " << res[i]+mn << endl;
	return 0;
}

