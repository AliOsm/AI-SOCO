/*input
10 10
..........
..........
..........
..........
..........
..........
..........
..........
..........
..........
*/
#include <bits/stdc++.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define mp make_pair
#define loop(i,l,r) for(signed i=(l); i<=(r); i++)
#define rloop(i,l,r) for(signed i=(l); i>=(r); i--)
#define fi first
#define se second
#define __builtin_popcount __builtin_popcountll
#define int long long
#define bit(x,y) ((x>>y)&1LL)
#define sz(x) ((signed)x.size())
void Max(int &x, int y) {x = max(x, y);}
void Min(int &x, int y) {x = min(x, y);}
//const int N=;
template <class T1, class T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &a) {
	return os << '(' << a.first << ", " << a.second << ')';
}
template <class T>
ostream &operator<<(ostream &os, const vector<T> &a) {
	os << '[';
	for (unsigned int i = 0; i < a.size(); i++)
		os << a[i] << (i < a.size() - 1 ? ", " : "");
	os << ']';
	return os;
}
const int mod = 1e9 + 7;
int n, m;
char a[2005][2005];
int sumCol[2005][2005];
int numOb[2005][2005];

#define add add__
void add(int &x, int y) {
	x = ((x + y) % mod + mod) % mod;
}

void calAbove(int p, int pre[2005]) {
	loop(i, 1, m) {
		int del = 0; if (a[p][i] == 'R') del = 1;
		if (n - numOb[p][i] + 1 + del >= p + 1) {
			add(sumCol[i][p + 1], pre[i] - sumCol[i][p]);
			add(sumCol[i][n - numOb[p][i] + 1 + del], -(pre[i] - sumCol[i][p]));
		}
	}
}

void calHori(int p, int now[2005]) {
	loop(i, 1, m) add(sumCol[i][p], sumCol[i][p - 1]);
	loop(i, 1, m) add(now[i], sumCol[i][p]);
	int cnt = 0;
	int upd[2005]; memset(upd, 0, sizeof(upd));
	rloop(i, m, 1) {
		if (a[p][i] == 'R')
			cnt++;
	}
	loop(i, 1, m) {
		add(upd[i], upd[i - 1]);
		if (a[p][i] == 'R') {
			cnt--;
		}
		add(upd[i + 1], now[i]);
		add(upd[m - cnt + 1], -now[i]);
		add(now[i], upd[i]);

	}
}

int dp[2005][2005];

signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n >> m;
	loop(i, 1, n) {
		loop(j, 1, m) {
			cin >> a[i][j];
		}
	}
	rloop(i, n, 1) {
		loop(j, 1, m) numOb[i][j] = numOb[i + 1][j] + (a[i][j] == 'R');
	}
	dp[1][1] = 1;
	loop(i, 1, n) {
		calHori(i, dp[i]);
		calAbove(i, dp[i]);
	}
	cout << dp[n][m] << endl;
}