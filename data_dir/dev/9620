#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define SPEED ios_base::sync_with_stdio(false); cin.tie(NULL);
#define FOR(i, a, b) for (ll i = a; i < b; ++i)
#define RFOR(i, b, a) for (ll i = b; i >= a; --i)
#define ALL(x) x.begin(), x.end()
#define DEBUG(args...) { string _s = #args; replace(ALL(_s), ' ', '\0');\
replace(ALL(_s), ',', ' ');\
stringstream _ss(_s); istream_iterator<string> _it(_ss); _debug(_it, args);}
#define endl "\n"
#define F first
#define S second
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)

using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

void _debug(istream_iterator<string>) {}
template<typename T, typename... Args>
void _debug(istream_iterator<string> it, T first, Args... args) {
    cerr << ">> " << *it << " : " << first << endl; _debug(++it, args...);
}
template <typename T1, typename T2>
inline ostream& operator << (ostream& out, const pair<T1, T2>& p) {
    return out << "(" << p.F << ", " << p.S << ")";
}
template<typename T>
inline ostream& operator << (ostream& out, const vector<T>& v) {
    if (v.empty()) return out << "[]";
    else { out << '['; for (auto& e : v) { out << e << ", "; } return out << "\b\b]"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const set<T>& s) {
    if (s.empty()) return out << "{}";
    else { out << '{'; for (auto& e : s) { out << e << ", "; } return out << "\b\b}"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const unordered_set<T>& s) {
    return out << set<T>(ALL(s));
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const map<T1, T2>& m) {
    if (m.empty()) return out << "{}";
    out << '{'; for (auto& p : m) { out << p << ", "; } return out << "\b\b}";
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const unordered_map<T1, T2>& m) {
    return out << map<T1, T2>(ALL(m));
}
template<typename T>
inline ostream& operator << (ostream& out, const ordered_set<T>& s) {
    return out << set<T>(ALL(s));
}

typedef long long ll;
typedef long double ld;
typedef vector<long long> vll;
typedef pair<ll, ll> pll;
typedef vector<pair<ll, ll>> vpll;
typedef unordered_map<ll, ll> STll;
/************************************** MAIN PROGRAM ********************************************/
const int MAX = 2e5 + 5;
bool marked[MAX][2];
const ll INF = 1e18;
ll ans[MAX][2];    /// answer for every x if y is zero
vector<ll> a;
ll n;

ll dfs(ll x, int add) {
  //  DEBUG(mp(x, add))
    if (!(x < n && x >= 0)) return 0;

    if (ans[x][add]) {
         //   DEBUG("using cache", ans[x][add])
            return ans[x][add];
    }
    if (marked[x][add]) {
        return ans[x][add] = -1;
    } else {
        marked[x][add] = true;
        if (add) {
            if (dfs(x + a[x], !add) == -1) return ans[x][add] = -1;
            return ans[x][add] = a[x] + dfs(x + a[x], !add);
        } else {
            if (dfs(x - a[x], !add) == -1) return ans[x][add] = -1;
            return ans[x][add] = a[x] + dfs(x - a[x], !add);
        }
    }
}

int main()
{
   // freopen("input.txt", "r", stdin);
    SPEED

    cin >> n;
    a = vll(n);

    for (int i = 1; i < n; ++i) {
        cin >> a[i];
    }
    a[0] = 1;

 //   cout << dfs(0, 0, 1);
    marked[0][1] = true;
    for (int i = 1; i < n; ++i) {
        if (dfs(i, 0) == -1) {
            cout << -1 << endl;
        } else cout << i + dfs(i, 0) << endl;
    }

}
/************************************** END OF PROGRAM ******************************************/
/** Stuff you should look for:
 * int overflow, array bounds, over-counting, graph is not a tree/connected
 * special cases (n=1?), set/unordered_set TLE, multi-set/set error
 * do something instead of nothing and stay organized
 */
