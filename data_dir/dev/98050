

#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<LL, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
#define LL                  long long
#define ull                 unsigned long long
#define scl(n)              scanf("%lld", &n)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)
#define scs(n)              scanf("%s", n)
#define pfi(n)              printf("%d\n",n)
#define pfl(n)              printf("%I64\n",n)
#define pfs(s)              printf("%s\n",s)
#define dist2D(x1,y1,x2,y2)         ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))
#define dist3D(x1,y1,z1,x2,y2,z2)   ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2))
#define print(x)            for(int i=0;i<x.size();i++) cout<<x[i]<<" ";
#define deb(x)              cout<<#x<<" "<<x<<endl

#define FASTREAD            ios_base::sync_with_stdio(0);cin.tie(nullptr);
#define MOD                 1000000007
#define MODP                99999999999973LL
#define pb                  push_back

#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e18
#define EPS                 1e-8
#define Pi                  acos(-1.0)
//int Set(int mask,int pos){return mask=mask | (1<<pos);}
//int reset(int mask,int pos){return mask= mask & ~(1<<pos);}
//bool check(int mask,int pos){return (bool)(mask & (1<<pos));}
//LL bigmod(LL b, LL p, LL md){if(p==0) return 1;if(p%2==1){ return ((b%md)*bigmod(b,p-1,md))%md;} else {LL y=bigmod(b,p/2,md);return (y*y)%md;}}
#define N 2000005



int main()
{
    LL nn;
    cin>>nn;

    LL aa,bb;
    cin>>aa>>bb;

    LL x=0,xx=0,y=0,yy=0,pp=0,pm=0,mm=0,mp=0;
    LL a,b;
    for(int i=0;i<nn;i++)
    {

        cin>>a>>b;
        a-=aa;
        b-=bb;

        if(a>0 && b>0) pp++;
        else if(a<0 && b<0) mm++;
        else if(a>0 && b<0) pm++;
        else if(a<0 && b>0) mp++;
        else if(b==0 && a>0) x++;
        else if(b==0 && a<0) xx++;
        else if(a==0 && b>0) y++;
        else yy++;
    }

    LL m,n;

    LL ans=0;
    LL rx,ry;
    a=0;
    b=0;


    m=a-1;
    n=b;

    LL tem=xx+mm+mp;
    if(tem>ans)
    {
        ans=tem;
        rx=m;
        ry=n;
    }

    m=a+1;
    n=b;
    tem=x+pp+pm;

    if(tem>ans)
    {
        ans=tem;
        rx=m;
        ry=n;
    }

    m=a;
    n=b-1;
    tem=yy+mm+pm;
    if(tem>ans)
    {
        ans=tem;
        rx=m;
        ry=n;
    }

    m=a;
    n=b+1;
    tem=y+mp+pp;
    if(tem>ans)
    {
        ans=tem;
        rx=m;
        ry=n;
    }

    cout<<ans<<endl;
    rx+=aa;
    ry+=bb;
    cout<<rx<<" "<<ry<<endl;


    return 0;
}

/* LL dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* LL dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* LL dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* LL dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction
