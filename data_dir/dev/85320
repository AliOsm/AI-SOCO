#include<bits/stdc++.h>
using namespace std;

int n, m, x, y, z, p, q, r;
int percards[10][2000];
vector < int > vec[10];
int ara[2000];
pair < int , int > dp[1002][260];
int cur;

pair < int , int > nxt[1002][260];
int vis[1002][260];

pair < int , int > possible(int pos, int mask)
{
    if(pos > n){
        if(mask == 255) return {1, 0};
        else return {0, 0};
    }

    if(vis[pos][mask]) return dp[pos][mask];
    vis[pos][mask] = 1;

    pair < int , int > re = {0, -1};
    int frnxt1 = -1, frnxt2 = -1;


    for(int j = 0; j >= -1; j--){


        for(int i = 0; i < 8; i++){
//            if(pos == 2 && mask == 16) cout << "wtf : " << i << endl;
            if(mask & (1 << i)) continue;

            int tillnow = percards[i][pos - 1];
            int xxx = -1;

            int to = tillnow + cur + j;

            if(to >= vec[i].size()) continue;
            int topos = vec[i][to];
            topos = max(topos, pos);

            if(to == 0) topos = pos - 1;

            auto xx = possible(topos + 1, mask | (1 << i));
            xx.second += cur + j;

//            if(pos == 2 && mask == 16 && i == 1) cout << i << ' ' << j << ' ' << to << ' ' << xx.first << ' ' << xx.second << endl;

            if(xx.first && xx.second > re.second){

                nxt[pos][mask] = {i, cur + j};

                re.first = 1;
                re.second = xx.second;

            }

        }
    }

    auto tmp = possible(pos + 1, mask);
    if(tmp.first && tmp.second > re.second){
        re.first = 1;
        re.second = tmp.second;
        nxt[pos][mask] = {-1, -1};
    }

    return dp[pos][mask] = re;

}

int main()
{

    for(int i = 0; i < 8; i++) vec[i].push_back(0);
    cin >> n;
    for(int i = 1; i <= n; i++) {
        scanf("%d", &ara[i]);
        percards[ara[i] - 1][i]++;
        vec[ara[i] - 1].push_back(i);
        for(int j = 0; j < 8; j++) percards[j][i] += percards[j][i - 1];
    }

    int low = 1, high = n;
    cur = 2;
//    cout << possible(1, 0) << endl;

    int an = -1, ans = -1;

    while(low <= high){

        int mid = (low + high) / 2;
        cur = mid;
        memset(vis, 0, sizeof(vis));

        auto val = possible(1, 0);
        if(val.first){
            an = mid;
            low = mid + 1;
            ans = val.second;
        }
        else high = mid - 1;

    }

//    cur = an;
//    cout << an << endl;
//    memset(dp, -1, sizeof(dp));
//    possible(1, 0);
//
//    int curpos = 2, mask = 16;
//    ans = 0;
//
//    while(curpos <= n){
//
//        int xx = nxt[curpos][mask].first;
//        int yy = nxt[curpos][mask].second;
//
//        cout << curpos << ' ' << mask << endl;
//        cout << "xx : " << xx << ' ' << yy << endl;
//
//        if(xx == -1 && yy == -1) curpos++;
//
//        else{
//
//            int tillnow = percards[xx][curpos - 1];
//            int to = tillnow + yy;
//            int topos = vec[xx][to];
//            topos = max(topos, curpos);
//
//            if(to == 0) topos = curpos - 1;
//
//            mask = mask | (1 << xx);
//            curpos = topos + 1;
//            ans += yy;
//
//        }
//
//    }
    cout << ans << endl;

    return 0;
}
