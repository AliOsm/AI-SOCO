/*
doge
░░░▄░░░░░░░░░░░░░░▄
░░░░░░░░▌▒█░░░░░░░░░░░▄▀▒▌
░░░░░░░░▌▒▒█░░░░░░░░▄▀▒▒▒▐
░░░░░░░▐▄▀▒▒▀▀▀▀▄▄▄▀▒▒▒▒▒▐
░░░░░▄▄▀▒░▒▒▒▒▒▒▒▒▒█▒▒▄█▒▐
░░░▄▀▒▒▒░░░▒▒▒░░░▒▒▒▀██▀▒▌
░░▐▒▒▒▄▄▒▒▒▒░░░▒▒▒▒▒▒▒▀▄▒▒▌
░░▌░░▌█▀▒▒▒▒▒▄▀█▄▒▒▒▒▒▒▒█▒▐
░▐░░░▒▒▒▒▒▒▒▒▌██▀▒▒░░░▒▒▒▀▄▌
░▌░▒▄██▄▒▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒▌
▀▒▀▐▄█▄█▌▄░▀▒▒░░░░░░░░░░▒▒▒
*/
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
   
using namespace std;
   
#define ll unsigned long long
#define ld long double
#define null NULL


struct Fenwick {
	vector<int> t;
	int n;

	Fenwick() {
		n = 0;
	}

	inline void init(int _n) {
		n = _n;
		t.resize(n);
	}

	inline void upd(int i, int x) {
		for (; i < n; i = (i | (i + 1))) {
			t[i] += x;
		}
	}

	inline int get(int r) {
		int res = 0;
		while (r >= 0) {
			res += t[r];
			r = (r & (r + 1)) - 1;
		}
		return res;
	}

	inline int get(int l, int r) {
		return get(r) - get(l - 1);
	}
};


inline int code(char c) {
	if (c == 'A') {
		return 0;
	}
	if (c == 'T') {
		return 1;
	}
	if (c == 'G') {
		return 2;
	}
	return 3;
}


Fenwick fen[11][10][4];



signed main() {
	string s;
	cin >> s;

	int n = (int)s.size();

	int q;
	scanf("%d", &q);

	for (int i = 1; i <= 10; ++i) {
		for (int j = 0; j < i; ++j) {
			for (int k = 0; k < 4; ++k) {
				fen[i][j][k].init(n);
			}
		}
	}

	for (int i = 0; i < n; ++i) {
		for (int len = 1; len <= 10; ++len) {
			fen[len][i % len][code(s[i])].upd(i, 1);
		}
	}

	for (int ev = 0; ev < q; ++ev) {
		int t;
		scanf("%d", &t);
		if (t == 1) {
			int i;
			char c;
			cin >> i >> c;
			--i;
			int C = code(c);
			int CS = code(s[i]);
			for (int len = 1; len <= 10; ++len) {
				fen[len][i % len][CS].upd(i, -1);
				fen[len][i % len][C].upd(i, 1);
			}
			s[i] = c;
		} else {
			int l, r;
			scanf("%d %d", &l, &r);
			--l;
			--r;
			string e;
			cin >> e;
			int m = (int)e.size();
			int ans = 0;
			for (int i = 0; i < min(m, r - l + 1); ++i) {
				ans += fen[m][(l + i) % m][code(e[i])].get(l, r);
			}
			printf("%d\n", ans);
		}
	}
    return 0;
}










