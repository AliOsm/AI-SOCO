#include<bits/stdc++.h>
#define xx first
#define yy second
#define mp make_pair
#define pb push_back
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
const int MAXN=50*50*5;
const int MAXM=200000;
const int INF=0x3f3f3f3f;
namespace MCMF
{
	struct Edge
	{
		int to,next,cap,flow,cost;
	}edge[MAXM];
	int head[MAXN],tol;
	int pre[MAXN],dis[MAXN];
	bool vis[MAXN];
	int N;//节点总个数，节点编号从0~N-1
	void init(int n)
	{
		N=n;
		tol=0;
		memset(head,-1,sizeof(head));
	}
	void addedge(int u,int v,int cap,int cost)
	{
		edge[tol].to=v;edge[tol].cap=cap;edge[tol].cost=cost;edge[tol].flow=0;edge[tol].next=head[u];
		head[u]=tol++;
		edge[tol].to=u;edge[tol].cap=0;edge[tol].cost=-cost;edge[tol].flow=0;edge[tol].next=head[v];
		head[v]=tol++;
	}
	bool spfa(int s,int t) 
	{ 
		queue<int>q;
		for(int i=1;i<=N;i++)
		{
			dis[i]=INF;
			vis[i]=false;
			pre[i]=-1;
		}
		dis[s]=0;
		vis[s]=true;
		q.push(s);
		while(!q.empty())
		{
			int u=q.front();
			q.pop();
			vis[u]=false;
			for(int i=head[u];i!=-1;i=edge[i].next)
			{
				int v=edge[i].to;
				if(edge[i].cap>edge[i].flow&&dis[v]>dis[u]+edge[i].cost)
				{
					dis[v]=dis[u]+edge[i].cost;
					pre[v]=i;
					if(!vis[v])
					{
						vis[v]=true;
						q.push(v);
					}
				}
			}
		}
		if(pre[t]==-1)
			return false;
		else
			return true;
	}
	//返回的是最大流，cost存的是最小费用 
	int mcmf(int s,int t,int &cost)
	{
		int flow=0;
		cost=0;
		while(spfa(s,t))
		{
			int Min=INF;
			for(int i=pre[t];i!=-1;i=pre[edge[i^1].to])
			{
				if(Min>edge[i].cap-edge[i].flow)
					Min=edge[i].cap-edge[i].flow;
			}
			for(int i=pre[t];i!=-1;i=pre[edge[i^1].to])
			{
				edge[i].flow+=Min;
				edge[i^1].flow-=Min;
				cost+=edge[i].cost*Min;
			}
			flow+=Min;
		}
		return flow;
	}
}
int G[55][55],res[55][55],in[55];
int main()
{
	//freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	int n,m,tot;
	scanf("%d%d",&n,&m);
	tot=n+n;
	for(int i=1;i<=m;i++)
	{
		int u,v;
		scanf("%d%d",&u,&v);
		res[u][v]=1;
		in[u]++;
		G[v][u]=G[u][v]=-1;
	}
	int s=++tot,t=++tot;
	for(int i=1;i<=n;i++)
		for(int j=i+1;j<=n;j++)
		{
			if(G[i][j]==-1) continue;
			G[i][j]=G[j][i]=++tot;
		}
	MCMF::init(tot);
	for(int i=1;i<=n;i++)
		for(int j=i+1;j<=n;j++)
		{
			if(G[i][j]==-1) continue;
			MCMF::addedge(s,G[i][j],1,0);
			MCMF::addedge(G[i][j],i,1,0);
			MCMF::addedge(G[i][j],j,1,0);
		}
	for(int i=1;i<=n;i++)
		for(int j=1;j<=n;j++)
			MCMF::addedge(i,i+n,1,in[i]+j-1);
	for(int i=1;i<=n;i++)
		MCMF::addedge(i+n,t,n,0);
	int cost=0;
	MCMF::mcmf(s,t,cost);
	using namespace MCMF;
	for(int i=1;i<=n;i++)
		for(int j=i+1;j<=n;j++)
		{
			if(G[i][j]==-1) continue;
			for(int k=head[G[i][j]];~k;k=edge[k].next)
			{
				int v=edge[k].to;
				if(v==s||edge[k].flow!=1) continue;
				res[v][i+j-v]=1;
			}
		}
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=n;j++)
			printf("%d",res[i][j]);
		puts("");
	}
	return 0;
}
