///https://www.youtube.com/watch?v=9eAkWlZQBH4&list=RD9eAkWlZQBH4&start_radio=1
#include<bits/stdc++.h>

using namespace std;
#define ll long long
#define dbug printf("I am here\n");
#define fast ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
const int maxn = 2e3+100;

const ll inf = 1e18;

int row[maxn][maxn];
int col[maxn][maxn];
char grid[maxn][maxn];
string s;
int rr[maxn][maxn] , cll[maxn][maxn];

int query(int rw , int l , int r){
    return (row[rw][r] - row[rw][l-1]);
}

int query2(int cl , int l , int r){
    return (col[cl][r] - col[cl][l-1]);
}

int main()
{
    fast;
    int n , k;
    cin >> n >> k;
    for(int i = 1; i<=n; i++){
        cin >> (grid[i]+1);
    }
    for(int i = 1; i<=n; i++){
        for(int j = 1; j<=n; j++){
            if(grid[i][j] == 'W'){
                row[i][j] = 1;
                col[j][i] = 1;
            }
        }
    }

    for(int i = 1; i<=n; i++){
        for(int j = 1; j<=n; j++){
            row[i][j] = row[i][j] + row[i][j-1];
            col[i][j] = col[i][j] + col[i][j-1];
        }
    }

//    for(int i = 1; i<=n; i++){
//        for(int j = 1; j<=n; j++){
//            cout << row[i][j] << " ";
//        }
//        cout << endl;
//    }


    ll coun = 0;
    for(int i = 1; i<=n; i++){
        if(col[i][n] == n)coun++;
        if(row[i][n] == n)coun++;
    }

    ll mx = coun;

    for(int i = 1; i<=n; i++){
        for(int j = 1; j<=n; j++){
            if(row[i][n] == n){
                rr[i][j] = 0;
            }
            else if((j+k-1)<=n){
                ll sum = query(i,1,j-1) + query(i,j+k,n);
                if((sum+k) == n)rr[i][j] = 1;
                else rr[i][j] = 0;
            }

            if(col[j][n] == n){
                cll[i][j] = 0;
            }
            else if((i+k-1)<=n){
                ll sum = query2(j , 1 , i - 1) + query2(j , i+k , n);
                if((sum + k) == n)
                    cll[i][j] = 1;
                else cll[i][j] = 0;
            }
        }
    }

//    for(int i = 1; i<=n; i++){
//        for(int j = 1; j<=n; j++){
//            cout << cll[i][j] << " ";
//        }
//        cout << endl;
//    }

    for(int i = 1; i<=n; i++){
        for(int j = 1; j<=n; j++){
            row[i][j] = cll[i][j];
            col[j][i] = rr[i][j];
        }
    }

    for(int i = 1; i<=n; i++){
        for(int j = 1; j<=n; j++){
            row[i][j] = row[i][j] + row[i][j-1];
            col[i][j] = col[i][j] + col[i][j-1];
        }
    }

    for(int i = 1; i<=n-k+1; i++){
        for(int j = 1; j<=n-k+1; j++){
            mx = max(mx , coun + query(i , j , j+k-1) + query2(j , i , i + k - 1));
        }
    }
    cout << mx << endl;
    return 0;
}
/*



*/

