#include <set>          
#include <map>           
#include <list>
#include <ctime>
#include <deque>         
#include <bitset>        
#include <vector>
#include <list>
#include <stack>
#include <random>		 
#include <string>       
#include <numeric>      //  needed for  accumulate
#include <utility>      // needed for std:: move
#include <iterator> 
#include <iostream> 
#include <iomanip>  
#include <algorithm> 
#include <functional>    
#include <cmath>         
#pragma warning(disable:4996) // ignore this
#define ve vector
#define pb push_back
#define mp make_pair                     
#define srt(x) sort(x.begin(),x.end())         
#define mod static_cast<long long> (1e9+7)     
#define sumx(x) accumulate(x.begin(),x.end(),0LL)
#define pi 3.14159265358979323846
#define testing 0
#define code_chef 0
#define code_jam 0
using namespace std;
template<typename T>
istream& operator >> (istream& in, ve<T> &v)
{
	for (auto &x : v)
		scanf("%d",&x);
	return in;
}
template<typename T>
ostream& operator<<(ostream& in, ve<T> &v)
{
	for (auto &x : v)
		in << x << " ";
	return in;
}
long long fast(long long a, long long b, long long mid)
{
	if (b == 0)
		return 1;
	a %= mid;
	long long ans = 1;
	while (b)
	{
		if (b & 1)
		{
			ans = (ans*a) % mid;
		}
		a *= a;
		a %= mid;
		b >>= 1;
	}
	return ans;
}
class solve
{
	int n;
	string S;
	bool possible(long long tim)
	{
		int prev=0;
		for(int i = 0 ; i < n ; i ++)
		{
			if(S[i]!='P')
				continue;
			if(prev<i)
			{
				while(prev<i && S[prev]!='*')
					++prev;
			}
			int rem=tim;
			if(prev<i)
			{
				if(rem<i-prev)
				{
					return false;
				}
				long long y1=rem-(i-prev)*2;
				long long y2=(rem-(i-prev))/2;
				prev=i+max(y1,y2)+1;
			}
			else
			{
				prev=max(prev,i+rem+1);
			}
		}
		for(int i=prev;i<n;i++)
			if(S[i]=='*')
				return false;
			return true;
	}
	long long b_search(long long a,long long b)
	{
		while(a<b)
		{
			long long mid=(a+b)/2;
			if(possible(mid))
				b=mid;
			else
				a=mid+1;
		}
		return b;
	}
public:
	solve()
	{
		cin >> n ;
		cin >> S;
	while(S.size() && S.back()=='.')
		S.pop_back();
	reverse(S.begin(),S.end());
	while(S.size() && S.back()=='.')
		S.pop_back();
	n=S.size();
	cout << b_search(0,1e7);
	}
};
int32_t main()
{
	int t = 1, i = 1;
	if (code_chef)
		scanf("%d", &t);
	while (t--)
	{
		if (code_jam)
			printf("Case #%d: ", i++);
		new solve;
	}
	return 0;
}