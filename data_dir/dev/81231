#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 1000000007
#define maxn 100005
#define IN freopen("C.in","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 1000000000000000000LL
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 2
#define sq(x) ((x)*(x))
#define pi pair<long long,long long>
#define ds(a) ( sq(a.x)+sq(a.y) )

using namespace __gnu_pbds;
using namespace std ;

typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

struct Query{
    i64 l , r ;
    int t ;
}q[maxn] ;
vector <i64> v ;
int tr[16*maxn] , lazy[16*maxn] ;

void build(int cn , int b, int e)
{
    lazy[cn] = 0 ;
    tr[cn] = 0 ;
    if(b==e) return ;
    int m = (b+e)/2 , l = cn*2 , r = cn*2+1 ;
    build(l,b,m) ;
    build(r,m+1,e) ;
}
void relax(int cn ,int b, int e)
{
    if(lazy[cn]==0) return ;
    if(lazy[cn]==1) tr[cn] = e-b+1 ;
    else if(lazy[cn]==2) tr[cn] = 0 ;
    else tr[cn] = (e-b+1) - tr[cn] ;

    if(b!=e)
    {
        if(lazy[cn]!=3){
            lazy[cn*2] = lazy[cn] ;
            lazy[cn*2+1] = lazy[cn] ;
        }
        else if(lazy[cn]==3){
            int l = cn*2 , r = cn*2+1 ;
            if(lazy[l]==1) lazy[l] = 2 ;
            else if(lazy[l]==2) lazy[l] = 1 ;
            else if(lazy[l]==3) lazy[l] = 0 ;
            else lazy[l] = 3 ;

            if(lazy[r]==1) lazy[r] = 2 ;
            else if(lazy[r]==2) lazy[r] = 1 ;
            else if(lazy[r]==3) lazy[r] = 0 ;
            else lazy[r] = 3 ;
        }
    }
    lazy[cn] = 0 ;
    return ;
}

void update(int cn, int b, int e, int left ,int right,int val)
{
    relax(cn,b,e) ;
    if( e<left || b>right ) return ;
    if( left<=b && e<=right )
    {
        lazy[cn] = val ;
        relax(cn,b,e) ;
        return ;
    }
    int m= (b+e)/2 , l = cn*2 , r = cn*2+1 ;

    update(l,b,m,left,right,val) ;
    update(r,m+1,e,left,right,val) ;
    tr[cn] = tr[l] + tr[r] ;
    return ;
}
int query(int cn, int b,int e)
{
    relax(cn,b,e) ;
    if(b==e)
    {
        if(tr[cn]==0) return b ;
        else return b+1 ;
    }
    int m = (b+e)/2 , l = cn*2 , r = cn*2+1 ;
    relax(l,b,m) ;
    if(tr[l]!=(m-b+1)) return query(l,b,m) ;
    else return query(r,m+1,e) ;
}
int main()
{
    int i , j , k , l , m , n ;

    scanf("%d",&n) ;

    map<i64,int> M ;
    M[0] = 1 ;

    for(i=1 ; i<=n ; i++)
    {
        sf("%d %lld %lld",&q[i].t,&q[i].l,&q[i].r) ;
        if( M.find(q[i].l-1)==M.end() ){
            M[q[i].l-1] = 1 ;
            v.pb(q[i].l-1) ;
        }
        if( M.find(q[i].l)==M.end() ){
            M[q[i].l] = 1 ;
            v.pb(q[i].l) ;
        }
        if( M.find(q[i].r+1)== M.end() ){
            M[q[i].r+1] = 1 ;
            v.pb(q[i].r+1) ;
        }
        if( M.find(q[i].r)==M.end() ){
            M[q[i].r] = 1 ;
            v.pb(q[i].r) ;
        }
    }
    if(M.find(1)==M.end()) v.pb(1LL) ;
    sort(v.begin(),v.end()) ;
    M.clear() ;
    for(i=0 ; i<v.size() ; i++) M[v[i]] = i+1 ;
 //   for(i=0 ; i<v.size() ; i++) printf("%lld ",v[i]) ;
  //  printf("\n") ;
    for(i=1 ; i<=n ; i++)
    {
        q[i].l = (i64)M[q[i].l] ;
        q[i].r = (i64)M[q[i].r] ;
    }
  //  printf("hi--------\n") ;
    m =  (int)v.size()-1 ;
  //  printf("m:%lld\n",m) ;
    build(1,1,m) ;
 //   printf("build completed m: %d\n",m) ;
    for(i=1 ; i<=n ; i++)
    {
   //     printf("%d %d\n",(int)q[i].l,(int)q[i].r) ;
        update(1,1,m,(int)q[i].l,(int)q[i].r,q[i].t) ;
        int idx = query(1,1,m) ;
        printf("%lld\n",v[idx-1]) ;
    }

    return 0 ;
}
