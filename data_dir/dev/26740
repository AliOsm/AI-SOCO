#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;

class BITree{
public:
    static const int SIZE = 1000050, OFFSET = 10;
    long long u[SIZE];
    void modify(int p, long long v){
        for(p+=OFFSET;p<SIZE;p+=p&-p) u[p]+=v;
    }
    long long getsum(int p){
        long long s=0;
        for(p+=OFFSET;p;p-=p&-p) s+=u[p];
        return s;
    }
};

int locate(int x, vector<int>& u){
    return lower_bound(u.begin(),u.end(),x)-u.begin();
}

int n,a[1000000];
BITree cnt,sum;

int main(){
    scanf("%d",&n);
    vector<int> u;
    for(int i=0;i<n;i++){
        scanf("%d",&a[i]);
        u.push_back(a[i]);
    }
    sort(u.begin(),u.end());
    long long ans=0;
    for(int i=n-1;~i;i--){
        int x=locate(a[i],u);
        ans+=sum.getsum(x);
        sum.modify(x,cnt.getsum(x));
        cnt.modify(x,1);
    }
    printf("%I64d\n",ans);
}
