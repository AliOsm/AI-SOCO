#include <bits/stdc++.h>
using namespace std;

const int N = 2e3 + 100;

int mod = 998244353;

int depth[N];
int dp[N][2];

int depth_sum(int x) {
    int k = 1, l = 1;
    int ret = 0;
    while(x >= k) {
        x -= k;
        ret += k*l;
        k <<= 1;
        l++;
    }
    ret += x*l;
    return ret;
}

int main() {
    // freopen("in.txt", "r", stdin);
    ios::sync_with_stdio(0);
    cin.tie(0);
//
//    for(int i = 1; i < N; i++) {
//        depth[i] = depth[i/2] + 1;
//    }
//    dp[0][0] = dp[0][1] = 1;
//    for(int i = 1; i < N; i++) {
//        for(int root = 1; root <= i; root++) {
//            int l = root-1, r = i-root;
//            int s0 = depth_sum(i);
//            int s1 = depth_sum(l)+l, s2 = depth_sum(r)+r;
//            if(s0 == s1+s2+1) {
//                dp[i][root&1] += 1ll*dp[l][!(root&1)]*dp[r][0];
////                dp[i][root&1] %= mod;
//            }
//        }
//    }
//
//    for(int i = 1; i <= 2000; i++) {
//        if(dp[i][1] >= 1) {
//            cout << i << " : " << dp[i][1] << endl;
//        }
//    }

    vector<int> vec;
    vec.push_back(2);
    while(true) {
        int x = vec.back();
        if(vec.size()&1) {
            x = x + x;
        }
        else {
            x = x + x + 2;
        }
        if(x > 1e6) break;
        vec.push_back(x);
    }
    vector<int> odd;
    odd.push_back(5);
    while(true) {
        int x = odd.back();
        if(odd.size()&1) {
            x = 2*x-1;
        }
        else {
            x = 2*x+3;
        }
        if(x > 1e6) break;
        odd.push_back(x);
    }
    set <int> s1(vec.begin(),vec.end()), s2(odd.begin(),odd.end());

    int n;
    cin >> n;
    if(n == 1) {
        cout << 1;
        return 0;
    }
    int ans = 0;
    if(s1.find(n) != s1.end()) ans++;
    if(s2.find(n) != s2.end()) ans++;
    cout << ans << endl;
    return 0;
}

