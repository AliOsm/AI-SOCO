#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define ll long long int
#define pb push_back
#define mp make_pair
#define ld long double
#define sz(a) (ll)(a).size()
// #define endl "\n"

typedef tree<pair<ll,ll> ,null_type,less<pair<ll,ll> >,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
//K-th smallest
//cout << k << "kth smallest: " << *A.find_by_order(k-1) << endl;
//NO OF ELEMENTS < X
//cout << "No of elements less than " << X << " are " << A.order_of_key(X) << endl;

int main()
{
	std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

 	ll t;
 	cin >> t;
 	while(t--)
 	{
 		vector<ll>v;
 		ll n, a, b, ans = 0, c = 0;
 		cin >> n >> a >> b;
 		string s;
 		ll st = n, en = -1;
 		cin >> s;
 		for(int i=0;i<n;i++)
 		{
 			if(s[i] == '1') 
 			{
 				st = i;
 				break;
 			}
 		}
 		for(int i=n-1;i>=0;i--)
 		{
 			if(s[i] == '1')
 			{
 				en = i;
 				break;
 			}
 		}
 		if(en == -1)
 		{
 			cout << (a + b) * n + b << endl;
 			continue;
 		}
 		ans += (a + b) * (st + n - 1 - en);
 		for(int i=st;i<=en;i++)
 		{
 			if(i == st) c += 1;
 			else
 			{
 				if(s[i] != s[i - 1])
 				{
 					v.pb(c);
 					c = 1;
 				}
 				else c += 1;
 			}
 		}
 		v.pb(c);
 		for(int i=0;i<sz(v);i++)
 		{
 			if(i % 2 == 0)
 			{
 				ans += v[i] * (2 * b + a) + 2 * b;
 				if(i == 0 || i == sz(v) - 1) 
 				{	
 					ans += a;
 					if(sz(v) == 1) ans += a;
 				}	
 			}
 			else
 			{
 				ll f1 = v[i] * (2 * b + a) - 2 * b;
 				ll f2 = v[i] * (b + a) + 2 * a - b;
 				ans += min(f1, f2);
 			}
 		}
 		cout << ans << endl;
 	}   
    return 0;
}