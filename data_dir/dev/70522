#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define pi pair<ll,ll>
#define f first
#define mp make_pair
#define s second
#define pb push_back
#define  INF 10000000000
#define mod 1000000007
#define get(t) scanf("%d",&t)
pi tree[4*100011];
ll a[100011];
ll g[100011];
void build(ll node,ll l,ll r){
	if(l==r){
		tree[node]=mp(a[l],a[l]);
		return;
	}
	ll mid=(l+r)/2;
	build(2*node,l,mid);
	build(2*node+1,mid+1,r);
	tree[node].f=max(tree[2*node+1].f,tree[2*node].f);
	tree[node].s=min(tree[2*node+1].s,tree[2*node].s);
}
pi query(ll node,ll l,ll r,ll s,ll e){
	if(l>e||l>r||r<s) return mp(-INF,INF);
	if(l>=s&&r<=e) return tree[node];
	ll mid=(l+r)/2;
	pi p1,p2;
	p1=query(2*node,l,mid,s,e);
	p2=query(2*node+1,mid+1,r,s,e);
	return mp( max(p1.f,p2.f) , min(p1.s,p2.s) );
}
void update(ll node,ll l,ll r,ll ind,ll val){
	if(l==r){
		tree[node].s=val;
		return;
	}
	ll mid=(l+r)/2;
	if(ind<=mid){
		update(2*node,l,mid,ind,val);
	}
	else update(2*node+1,mid+1,r,ind,val);
	tree[node].s=min(tree[2*node].s,tree[2*node+1].s);
}
int main(){
	ll n,s,l;
	cin>>n>>s>>l;
	for(int i=1;i<=n;i++) cin>>a[i];
	for(int i=0;i<=4*100000;i++) tree[i]=mp(-INF,INF);
	ll st=1;
	ll e=1;
	pi t;
	
	build(1,1,n);
	
	while(e<=n){
		t=query(1,1,n,st,e);
		while(t.f-t.s>s){
			st++;
			t=query(1,1,n,st,e);
		}
		g[e]=st;
		e++;
	}
	for(int i=0;i<=4*100000;i++) tree[i].s=INF;
	ll y=0;
	for(int i=1;i<=n;i++){
		if(g[i]-1>i-l) continue;
		if(g[i]==1) y=0;
		else{
			t=query(1,1,n,g[i]-1,i-l);
			y=t.s;
		}
		update(1,1,n,i,y+1);
	}
	
	t=query(1,1,n,n,n);
	if(t.s!=INF) cout<<t.s;
	else cout<<-1;
	
} 