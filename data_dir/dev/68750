#include<bits/stdc++.h>
using namespace std;
const int MAX = 1001*100;
#define x first
#define y second
#define ii pair<int,int>
vector<ii> e[MAX];
vector<int> laye[MAX];
queue<int> qq;
int d0[MAX] ,d1[MAX], d2[MAX], trace[MAX];
bool check[MAX];
int n , m;
void bfs1(){
    for(int i = 0 ; i < n ; i++)d0[i] = -1;
    d0[n-1] = 0;
    qq.push(n - 1);
    while(!qq.empty()){
        int u = qq.front();
        qq.pop();
        for(auto i:e[u]){
            int v =i.x;
            int c = i.y;
            if(d0[v] == -1 && c == 0){
                d0[v] = d0[u] + 1;
                trace[v] = u;
                qq.push(v);
            }
        }
    }
}
void bfs2(){
    for(int i = 0 ; i < n ; i++)    d1[i] = -1;
    for(int i = 0 ; i < n ; i++){
        if(d0[i] != -1){
            d1[i] = 0;
            qq.push(i);
        }
    }
    while(!qq.empty()){
        int u = qq.front();
        qq.pop();
        laye[d1[u]].push_back(u);
        for(auto i:e[u]){
            int v = i.x;
            if(d1[v] == -1){
                d1[v] = d1[u] + 1;
                qq.push(v);
            }
        }
    }
}
void bfs3(){
    for(int i = 0 ; i < n ; i++)    d2[i] = -1;
    d2[0] = 0;
    qq.push(0);
    while(!qq.empty()){
        int u = qq.front();
        qq.pop();
        for(auto i:e[u]){
            int v = i.x;
            if(d2[v] == -1){
                d2[v] = d2[u] + 1;
                qq.push(v);
            }
        }
    }
}
int main(){
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    cin>>n>>m;
    for(int i=0;i<m;i++){
        int x,y,z; cin>>x>>y>>z;
        e[x].push_back({y,z});
        e[y].push_back({x,z});
    }
    //Filling d0 as distance from n-1 ;
    bfs1();
    //Filling d1 as distance from moallefe bfs az n-1
    bfs2();
    //Filling d2 as distance form 0
    bfs3();
    //Solving Problem
    int path[MAX];
    /*for(int i=0;i<n-1;i++)cout<<d0[i]<<" ";
    cout<<endl;
    for(int i=0;i<n-1;i++)cout<<d1[i]<<" ";
    cout<<endl;
    for(int i=0;i<n-1;i++)cout<<d2[i]<<" ";
    cout<<endl;
    */
    for(int i = 0 ; i < n ; i++)    path[i] = -1;
    int len = d1[0];
    //cout<<d1[0]<<"GGGO"<<endl;
    //YAl HAYII Ke BA SEFR MIRESIm.
    for(auto i:laye[0])
        if(d2[i] == len) check[i] = true;
    if(len == 0)    cout<<0;
    for(int i = 0 ; i < len ; i++){
        int min_val = 79;
        for(auto j:laye[i]){
            int u = j;
            if(!check[u]) continue;
            for(auto k:e[u]){
                int v = k.x;
                int c = k.y;
                if(d2[v] == len - i - 1 && d1[v] == i + 1) if(min_val > c)min_val = c;
            }
        }
        cout<<min_val;
        for(auto j:laye[i]){
            int u=j;
            if(!check[u]) continue;
            for(auto k:e[u]){
                int v = k.x;
                int c = k.y;
                if(d2[v] == len - i - 1 && d1[v] == i + 1 && c == min_val){
                    check[v] = true;
                    if( i != 0 ) path[v] = u;
                    if(i == 0 && (path[v] == -1 || d0[path[v]] > d0[u])) path[v] = u;
                }
            }
        }
    }
    cout<<endl;
    vector<int> ans;
    ans.push_back(0);
    int cur = 0;
    for(int i = 1 ; i <= len ; i++){
        cur = path[cur];
        ans.push_back(cur);
    }
    int x = d0[cur];
    for(int i = 1 ; i <= x ; i++){
        cur = trace[cur];
        ans.push_back(cur);
    }
    cout<<ans.size()<<'\n';
    for(int i = 0 ; i < ans.size() ; i++)cout<<ans[i]<<" ";
}
