#include <bits/stdc++.h>

using namespace std;

#define SZ(x) ((int)(x).size())
#define PB(x) push_back(x)
#define MEMSET(x,v) memset(x,v,sizeof(x))
#define REP(i,n) for(int (i)=0;(i)<(n);++(i))
#define x(t) get<0>(t)
#define y(t) get<1>(t)
#define z(t) get<2>(t)

template<class A, class B> inline bool mina(A &x, B y) {return (x > y)?(x=y,1):0;}
template<class A, class B> inline bool maxa(A &x, B y) {return (x < y)?(x=y,1):0;}

typedef long long LL;
typedef tuple<LL, LL> T2;
typedef tuple<LL, LL, LL> T3;

#define INF (0x3f3f3f3f)

#define MAXN (200005)

T2 islands[MAXN];
T2 bridges[MAXN];

int ans[MAXN];

bool cmp2(T3 a, T3 b) {
    if (y(a) != y(b)) return y(a) < y(b);
    return x(a) < x(b);
}

int main() {
    int N, M;
    scanf("%d %d", &N, &M);
    LL l, r;
    REP(i, N) {
        scanf("%I64d %I64d", &l, &r);
        islands[i] = T2(l, r);
    }
    vector<T3> in;
    REP(i, N - 1) {
        in.PB(T3(x(islands[i + 1]) - y(islands[i]), y(islands[i + 1]) - x(islands[i]), i));
    }
    sort(in.begin(), in.end(), cmp2);
    // REP(i, N - 1) {
    //     cout << x(in[i]) << ", " << y(in[i]) << endl;
    // }
    REP(i, M) {
        scanf("%I64d", &l);
        bridges[i] = T2(l, i + 1);
    }
    sort(bridges, bridges + M);
    // REP(i, M) {
    //     cout << x(bridges[i]) << endl;
    // }
    int now = 0;
    bool bad = false;
    multiset<T2> bb;
    REP(i, N - 1) {
        while (now < M && x(bridges[now]) <= y(in[i])) {
            bb.insert(bridges[now]);
            now++;
        }
        auto it = bb.lower_bound(T2(x(in[i]), -INF));
        if (it == bb.end()) {
            bad = true;
            break;
        } else {
            ans[z(in[i])] = y(*it);
            bb.erase(it);
        }
    }

    if (!bad) {
        printf("Yes\n");
        REP(i, N - 1) {
            printf("%d ", ans[i]);
        }
        printf("\n");
    } else {
        printf("No\n");
    }
    return 0;
}
