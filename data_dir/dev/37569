using namespace std;
#include<bits/stdc++.h>

#define BG begin()
#define ED end()
#define st first
#define nd second
#define PB push_back
#define PF push_front
#define FOR(i,a,b) for (long long i=a;i<b;i++)
#define FORE(i,a,b) for (int i=a;i<=b;i++)
#define FORD(i,a,b) for (long long i=a;i>=b; i--)
#define TR(c, it) for(typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
#define PI 2 * acos(0)
#define ri(n)({\
    int neg=0;\
    n=0;\
    char ch;\
    for(ch=getchar(); ch<'0' || ch>'9'; ch=getchar()) if (ch=='-') neg=1-neg;\
    n=ch-48;\
    for(ch=getchar(); ch>='0' && ch<='9'; ch=getchar()) n=(n<<3)+(n<<1)+ch-48;\
    if (neg) n=-n;\
})

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef pair<int,int> II;
typedef pair<int,II> III;
typedef pair<ll,ll> LL;
const ll INF=1000000000+7;
const double esp=1e-13;

bool f2[400+10],f[400+10][400+10];
int u,v,n,m,d1[400+10],d2[400+10];
vector<int> a[400+10],a2[400+10];
vector<int>::iterator it;
queue<int> Q;

void BFS(){
    Q.push(1);
    memset(f2,true,sizeof(f2));
    f2[1]=false;
    FORE(i,1,n) d1[i]=INF;
    d1[1]=0;
    while (!Q.empty()){
        u=Q.front();
        Q.pop();
        for(it=a[u].BG; it!=a[u].ED; it++)
        if (f2[*it]){
            Q.push(*it);
            d1[*it]=d1[u]+1;
            f2[*it]=false;
        }
    }
}

void BFS2(){
    Q.push(1);
    memset(f2,true,sizeof(f2));
    f2[1]=false;
    FORE(i,1,n) d2[i]=INF;
    d2[1]=0;
    while (!Q.empty()){
        u=Q.front();
        Q.pop();
        for(it=a2[u].BG; it!=a2[u].ED; it++)
        if (f2[*it]){
            Q.push(*it);
            d2[*it]=d2[u]+1;
            f2[*it]=false;
        }
    }
}

int main(){
 //   freopen("codeforces.inp", "r", stdin);
 //   freopen("codeforces.out", "w", stdout);
    cin >> n >> m;
    memset(f,false,sizeof(f));
    FORE(i,1,m){
        cin >> u >> v;
        f[u][v]=true;
        f[v][u]=true;
        a[u].PB(v);
        a[v].PB(u);
    }
    FORE(i,1,n)
    FORE(j,1,n)
    if (i!=j && !f[i][j]) a2[i].PB(j);

    BFS();
    BFS2();
    if (d1[n]==INF || d2[n]==INF) cout << -1;
    else cout << max(d1[n],d2[n]);
}
