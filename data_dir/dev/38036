
#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
#define LL                  long long
#define ull                 unsigned long long
#define scl(n)              scanf("%lld", &n)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)
#define scs(n)              scanf("%s", n)
#define pfi(n)              printf("%d\n",n)
#define pfl(n)              printf("%I64d ",n)
#define pfs(s)              printf("%s\n",s)
#define bug1		        printf("bug1")
#define	bug2			    printf("bug2")
#define	bug3		        printf("bug3")

#define FASTREAD            ios_base::sync_with_stdio(0);cin.tie(nullptr);
#define MOD                 1000000007
#define MODP                99999999999973LL
#define pb                  push_back
#define mp                  make_pair
#define pp                  pair<LL,LL>
#define memo(a,b) 2          memset(a,b,sizeof(a))
#define INF                 1e9+5
#define EPS                 1e-8
#define Pi                  acos(-1.0)

LL bigmod(LL b, LL p, LL md){if(p==0) return 1;if(p%2==1){ return ((b%md)*bigmod(b,p-1,md))%md;} else {LL y=bigmod(b,p/2,md);return (y*y)%md;}}

#define N 5005

LL dp[N][N];
LL cum[N];

int main()
{
    LL n,a,b,k;
    cin>>n>>a>>b>>k;

    for(int i=1;i<=n;i++)
        dp[i][0]=1;
    dp[b][0]=1;

    for(int i=1;i<=n;i++)
    {
        cum[i]=cum[i-1]+dp[i][0];
    }

    for(LL i=1;i<=k;i++)
    {
        for(LL j=1;j<=n;j++)
        {
            int dist=abs(j-b);
            dist--;

            LL l=j-dist;
            LL r=j+dist;

            l=max(l,1LL);
            r=min(r,n);

            dp[j][i]=(cum[r]-cum[l-1]-dp[j][i-1])%MOD;
            if(dp[j][i]<0)
                dp[j][i]+=MOD;

        }

        for(int j=1;j<=n;j++)
        {
            cum[j]=(cum[j-1]+dp[j][i])%MOD;
            cum[j]=(cum[j]+MOD)%MOD;
        }
    }
    cout<<dp[a][k]<<endl;


 return 0;

}

/* LL dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* LL dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* LL dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* LL dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction
