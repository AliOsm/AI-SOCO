#include<bits/stdc++.h>
using namespace std;
#define M 100005

int mh[M];
int scc[M], avl[M], cnt[M];
int col[M];
vector<int>vec[M], rvec[M];
stack<int>tst;

void dfs1(int s)
{
    int i, j;

    col[s] = 1;

    for(i = 0; i < vec[s].size(); i++)
    {
        j = vec[s][i];
        if(col[j]) continue;
        dfs1(j);
    }
    tst.push(s);
    return;
}

void dfs2(int s, int num)
{
    int i, j;

    col[s] = 1, scc[s] = num;

    for(i = 0; i < rvec[s].size(); i++)
    {
        j = rvec[s][i];
        if(col[j]) continue;
        dfs2(j, num);
    }
}

int main()
{
    int n, m, h, i, j, k, p, q, x, y;

    cin>>n>>m>>h;
    for(i = 1; i <= n; i++) cin>>mh[i];
    for(i = 1; i <= m; i++)
    {
        cin>>x>>y;
        if((mh[x]+1)%h == mh[y])
        {
            vec[x].push_back(y);
            rvec[y].push_back(x);
        }
        if((mh[y]+1)%h == mh[x])
        {
            vec[y].push_back(x);
            rvec[x].push_back(y);
        }
    }

    for(i = 1; i <= n; i++)
    {
        if(col[i] == 0) dfs1(i);
    }

    y = 1;
    memset(col, 0, sizeof(col));
    while(!tst.empty())
    {
        x = tst.top();
        tst.pop();

        if(col[x]) continue;
        dfs2(x, y);
        y++;
    }

    for(i = 1; i <= n; i++) cnt[scc[i]]++;
    for(i = 1; i <= n; i++)
    {
        for(j = 0; j < vec[i].size(); j++)
        {
            if(scc[i] != scc[vec[i][j]]) avl[scc[i]] = 1;
        }
    }

    cnt[0] = 10000000;
    p = 0;
    for(i = 1; i <= n; i++)
    {
        if(cnt[i] == 0) break;
        if(avl[i]) continue;
        p = (cnt[i] < cnt[p])? i: p;
    }

    printf("%d\n", cnt[p]);
    for(i = 1; i <= n; i++)
    {
        if(scc[i] == p) printf("%d ", i);
    }

    return 0;
}
