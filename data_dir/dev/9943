#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> PI;
PI q[10010];
int ans[10010],m,tmps[10010];
char str[1000010],t[30];
queue<int> pos[26];
PI dic[26];
inline void add(int s){
	int pos=lower_bound(q+1,q+1+m,PI(s,-1))-q;
	if(pos<=m && q[pos].first==s) ans[q[pos].second]++;
}
inline int solve(int s){
	return lower_bound(q+1,q+1+m,PI(s,-1))->second;
}
int main(){
	scanf("%s",str+1);
	int n=strlen(str+1);
	scanf("%d",&m);
	for(int i=1;i<=m;i++){
		scanf("%s",t);
		int len=strlen(t),s=0;
		for(int j=0;j<len;j++)
			s|=(1<<(t[j]-'a'));
		q[i]=PI(s,i);
		tmps[i]=s;
	}
	sort(q+1,q+1+m);
	for(int i=1;i<=n;i++)
		pos[str[i]-'a'].push(i);
	for(int i=1;i<=n;i++){
		int sz=0;
		for(int j=0;j<26;j++){
			while(!pos[j].empty() && pos[j].front()<i) pos[j].pop();
			if(!pos[j].empty()){
				dic[sz++]=(PI(pos[j].front(),j));
			}
		}
		sort(dic,dic+sz);
		int cur=i,idx=0,s=0;
		while(cur<=n){
			s|=(1<<(str[cur]-'a'));
			while(idx<sz && (s&(1<<dic[idx].second))) idx++;
			int far_reach=n;
			if(idx<sz) far_reach=dic[idx++].first-1;
			cur=far_reach+1;
			if(i==1 || !(s&(1<<(str[i-1]-'a'))))
				add(s);
		}
	}
	for(int i=1;i<=m;i++)
		printf("%d\n",ans[solve(tmps[i])]);
	return 0;
}