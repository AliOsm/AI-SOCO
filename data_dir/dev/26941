#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using PII = pair<int, int>;
using VI = vector<int>;

vector<int> d1, d2;
void manacher(const string& s) {
  const int n = s.size();
  d1.assign(n, 0);
  d2.assign(n, 0);
  for (int i = 0, l = 0, r = -1; i < n; i++) {
    int k = (i > r) ? 1 : min(d1[l + r - i], r - i + 1);
    while (0 <= i - k && i + k < n && s[i - k] == s[i + k]) {
      k++;
    }
    d1[i] = k--;
    if (i + k > r) {
      l = i - k;
      r = i + k;
    }
  }
  for (int i = 0, l = 0, r = -1; i < n; i++) {
    int k = (i > r) ? 0 : min(d2[l + r - i + 1], r - i + 1);
    while (0 <= i - k - 1 && i + k < n && s[i - k - 1] == s[i + k]) {
      k++;
    }
    d2[i] = k--;
    if (i + k > r) {
      l = i - k - 1;
      r = i + k ;
    }
  }
}

int main() {
#ifdef LOCAL_EXEC
	freopen("sample.in", "r", stdin);
//	freopen("sample.out", "w", stdout);
#else
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#endif

  int t; cin >> t;
  while (t--) {
    string s; cin >> s;
    {
      string r(s.rbegin(), s.rend());
      if (s == r) {
        cout << s << '\n';
        continue;
      }
    }

    manacher(s);
    const int n = s.size();
    int match = 0;
    for (int i = 0, j = s.size() - 1; i < j; i++, j--) {
      if (s[i] != s[j]) break;
      match++;
    }

    int len = 2 * match, pre = match, mid = 0;
    for (int i = 0; i < n; i++) {
      int l = i - d1[i] + 1, r = i + d1[i] - 1;
      if (l <= match || n - r - 1 <= match) {
        int cur = r - l + 1 + 2 * min({match, l, n - r - 1});
        if (cur > len) {
          len = cur;
          pre = min({match, l, n - r - 1});
          mid = l;
        }
      }
    }
    for (int i = 0; i < n; i++) {
      int l = i - d2[i], r = i + d2[i] - 1;
      if (l <= match || n - r - 1 <= match) {
        int cur = r - l + 1 + 2 * min({match, l, n - r - 1});
        if (cur > len) {
          len = cur;
          pre = min({match, l, n - r - 1});
          mid = l;
        }
      }
    }

    cout << s.substr(0, pre)
         << s.substr(mid, len - 2 * pre)
         << s.substr(s.size() - pre, pre)
         << '\n';
  }

  return 0;
}
