#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define se second
#define pi 2*acos(0)
#define PI 3.14159265358979323846264338

typedef long long ll;
typedef unsigned long long ull;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;

const int N = 100010;
const int MX = 123456;
const int mod = (int)1e9 + 7;
const int base = 1023456789;
const ull BS1 = 10000019ULL;
const int INF = (1 << 29);

template < class T > inline void fastScan(T &x){
    register char c = getchar();
    int neg = 0; x = 0;
    for(   ; (c < 48 || c > 57) && (c != '-'); c = getchar());
    if(c == '-') { neg = 1; c = getchar(); }
    for(   ; c > 47 && c < 58; c = getchar()){
        x = (x << 1) + (x << 3) + c - 48;
    }
    if(neg) x = -x;
}

int f_prime[N];
int prime[N], sz;

vector < pii > v;

void Sieve(){
  for(int i = 4; i < N; i+=2){
    f_prime[i] = true;
  }
  for(int i = 3; i * i <= N; i+=2){
    if(f_prime[i] == false){
      for(int j = i * 3; j < N; j+=i){
        f_prime[j] = false;
      }
    }
  }
  prime[++sz] = 2;
  for(int i = 3; i < N; i+=2){
    if(f_prime[i] == false){
      prime[++sz] = i;
    }
  }
}

void factoRise(int n){
  for(int i = 1; i <= sz && (prime[i] * prime[i]) <= n; i++){
    if(n % prime[i] == 0){
      pii x;
      x.fs = prime[i]; x.se = 0;
      while(n % prime[i] == 0){
        x.se++; n /= prime[i];
      }
      v.pb(x);
    }
  }
  if(n > 1){
    v.pb(mp(n , 1));
  }
  //for(int i = 0; i < v.size(); i++){
    //cout << v[i].fs << " " << v[i].se << '\n';
  //}
}

bool allOne(){
  for(int i = 0; i < (int)v.size(); i++){
    if(v[i].se != 1){
      return false;
    }
  }
  return true;
}

int main(){
  #ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
  #endif
  Sieve();
  int n;
  fastScan(n);
  factoRise(n);
  int cnt = 0;
  if(allOne() == false){
    int mx = 0;
    for(int i = 0; i < v.size(); i++){
      mx = max(mx, v[i].se);
    }
    for(int i = 0; i < 30; i++){
      if((1 << i) >= mx){
        mx = (1 << i);
        cnt += i;
        break;
      }
    }
    for(int i = 0; i < v.size(); i++){
      if(v[i].se != mx){
        cnt++;
        break;
      }
    }
  }
  int mn = 1;
  for(int i = 0; i < v.size(); i++){
    mn *= v[i].fs;
  }
  printf("%d %d\n", mn, cnt);
}
