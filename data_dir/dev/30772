#include<bits/stdc++.h>
#define ll long long 
#define hell 1000000007
#define F first
#define re 15000000
#define S second
#define pb push_back
char a[2000][2000];
using namespace std;
ll gcd(ll a,ll b)
{
    if (a%b==0)
        return b;
    else
        return gcd(b,a%b);
}
void palindrome(string s)
{
    int i =0;
    int j =s.size()-1;
    while(i<j)
    {
        if(s[i]!=s[j])
            return ;
        i++;
        j--;
    }
    cout<<s;
    exit(0);
}
int recursive(int n,int a[])
{
    int x =1;
    if(a[n]!=0)
        return a[n];
    if(n<10)
        return n;
    while(n!=0)
    {
        if(n%10 !=0)
            x =x * (n%10);
        n=n/10;
    }
    return recursive(x,a);
}
int checkSum(int n)
{
   // vector<int> v;
    int sum =0;
    while(n>0)
    {
        sum = sum +(n%10);
        n=n/10;
    }
    return sum;
}
int isSubstring(string s1, string s2) 
{ 
    int M = s1.length(); 
    int N = s2.length(); 
  
    /* A loop to slide pat[] one by one */
    for (int i = 0; i <= N - M; i++) { 
        int j; 
  
        /* For current index i, check for pattern match */
        for (j = 0; j < M; j++) 
            if (s2[i + j] != s1[j]) 
                break; 
  
        if (j == M) 
            return i; 
    } 
  
    return -1; 
} 
int main()
{
    int n;
  string z ="31 28 31 30 31 30 31 31 30 31 30 31 31 29 31 30 31 30 31 31 30 31 30 31 31 28 31 30 31 30 31 31 30 31 30 31 31 28 31 30 31 30 31 31 30 31 30 31 31 28 31 30 31 30 31 31 30 31 30 31 31 29 31 30 31 30 31 31 30 31 30 31 31 28 31 30 31 30 31 31 30 31 30 31";
  string x,y;
  cin>>n;
 //  cout<<s;
  getline(cin,y);
  getline(cin,x);
  if((isSubstring(x,z)!= -1))
  {
    cout<<"YES";
  }
  else
    cout<<"NO";
}