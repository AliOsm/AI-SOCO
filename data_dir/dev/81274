#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define SPEED ios_base::sync_with_stdio(false); cin.tie(NULL);
#define FOR(i, a, b) for (ll i = a; i < b; ++i)
#define RFOR(i, b, a) for (ll i = b; i >= a; --i)
#define ALL(x) x.begin(), x.end()
#define DEBUG(args...) { string _s = #args; replace(ALL(_s), ' ', '\0');\
replace(ALL(_s), ',', ' ');\
stringstream _ss(_s); istream_iterator<string> _it(_ss); _debug(_it, args);}
#define endl "\n"
#define F first
#define S second
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)

using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

void _debug(istream_iterator<string>) {}
template<typename T, typename... Args>
void _debug(istream_iterator<string> it, T first, Args... args) {
    cerr << ">> " << *it << " : " << first << endl; _debug(++it, args...);
}
template <typename T1, typename T2>
inline ostream& operator << (ostream& out, const pair<T1, T2>& p) {
    return out << "(" << p.F << ", " << p.S << ")";
}
template<typename T>
inline ostream& operator << (ostream& out, const vector<T>& v) {
    if (v.empty()) return out << "[]";
    else { out << '['; for (auto& e : v) { out << e << ", "; } return out << "\b\b]"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const set<T>& s) {
    if (s.empty()) return out << "{}";
    else { out << '{'; for (auto& e : s) { out << e << ", "; } return out << "\b\b}"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const unordered_set<T>& s) {
    return out << set<T>(ALL(s));
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const map<T1, T2>& m) {
    if (m.empty()) return out << "{}";
    out << '{'; for (auto& p : m) { out << p << ", "; } return out << "\b\b}";
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const unordered_map<T1, T2>& m) {
    return out << map<T1, T2>(ALL(m));
}
template<typename T>
inline ostream& operator << (ostream& out, const ordered_set<T>& s) {
    return out << set<T>(ALL(s));
}

typedef long long ll;
typedef long double ld;
typedef vector<long long> vll;
typedef pair<ll, ll> pll;
typedef vector<pair<ll, ll>> vpll;
typedef unordered_map<ll, ll> STll;
/**********************************************************************************
* SEGMENT TREE WITH DEBUGGER (WITH SAMPLE OPERATION)   @author: manishjoshi394
**********************************************************************************/
class SegmentTree {
    vector<pair<int, pair<int, int>>> _tree;
    int n;

    int left(int v) const {
        return 2 * v;
    }
    int right(int v) const {
        return 2 * v + 1;
    }
    template<typename T>
    void build(int v, int l, int r, const vector<T>& arr) {
        if (l == r) {
            _tree[v].first = 0;
            _tree[v].second.first = arr[l] == '(';
            _tree[v].second.second = arr[l] == ')';
          //  DEBUG(l, _tree[v])
        } else {
            int mid = l + (r - l) / 2;
            build(left(v), l, mid, arr);
            build(right(v), mid + 1, r, arr);

            _tree[v].first = _tree[left(v)].first +  _tree[right(v)].first
							+ 2 * min(_tree[left(v)].second.first, _tree[right(v)].second.second);
			ll del = min(_tree[left(v)].second.first, _tree[right(v)].second.second);
            _tree[v].second.first = _tree[left(v)].second.first +  _tree[right(v)].second.first - del;
            _tree[v].second.second = _tree[left(v)].second.second +  _tree[right(v)].second.second - del;
            //_tree[v].first = max(_tree[v].first, );
            
            
         //   DEBUG("\n", v, l, r, _tree[v])
        }
    }
//    void update(int v, int l, int r, int pos, ll new_val) {
//        if (l == r) {
//            _tree[v] = new_val;
//        } else {
//            int mid = l + (r - l) / 2;
//
//            if (pos <= mid)
//                update(left(v), l, mid, pos, new_val);
//            else
//                update(right(v), mid + 1, r, pos, new_val);
//
//            _tree[v] = max(_tree[left(v)], _tree[right(v)]);
//        }
//    }
    pair<int, pair<int, int>> query(int v, int l, int r, int ql, int qr) const {
        if (ql > qr)
            return {0, {0, 0}};
        if (l == ql && r == qr) return _tree[v];
        int mid = l + (r - l) / 2;
        

        
        auto lef = query(left(v), l, mid, ql, min(mid, qr));
        auto righ = query(right(v), mid + 1, r, max(mid + 1, ql), qr);
        
        auto res = lef;
        
        res.first = lef.first +  righ.first
							+ 2 * min(lef.second.first, righ.second.second);
		ll del = min(lef.second.first, righ.second.second);
        res.second.first = lef.second.first +  righ.second.first - del;
        res.second.second = lef.second.second +  righ.second.second - del;        
		return res;
    }
public:
    template<typename T>
    SegmentTree(const vector<T>& arr) {
        n = arr.size();
        _tree.resize(4 * n);
        build(1, 0, n - 1, arr);
    }
    SegmentTree(int _n, ll _init = 0) : SegmentTree(vector<ll>(_n, _init)) {}

    ll rmaxq(int l, int r) const {
        return query(1, 0, n - 1, l, r).first;
    }

    void update(int pos, ll new_val) {
        //update(1, 0, n - 1, pos, new_val);
    }

    int size() const {
        return n;
    }
};
inline ostream& operator << (ostream& out, SegmentTree& SegTree) {
    vector<ll> vals;
    for (int i = 0; i < SegTree.size(); ++i) {
        vals.push_back(SegTree.rmaxq(i, i));
    }
    return out << vals;
}

/************************************** MAIN PROGRAM ********************************************/

int main()
{
  // freopen("input.txt", "r", stdin);
    SPEED	
	string s;
	cin >> s;
	vector<char> vec(ALL(s));
	int q;
	cin >> q;
//	DEBUG(vec)
	SegmentTree st(vec);
	FOR(_, 0, q) {
		int l, r;
		cin >> l >> r;
		l--, r--;
		
		cout << st.rmaxq(l, r) << endl;
	}
}
/************************************** END OF PROGRAM ******************************************/
/** Stuff you should look for:
 * int overflow, array bounds, over-counting
 * special cases (n=1?), set/unordered_set TLE, multi-set/set error
 * do something instead of nothing and stay organized
 */
