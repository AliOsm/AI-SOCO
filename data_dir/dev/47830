#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (ll) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <ll, ll> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const ll inf = numeric_limits <ll>::max() >> 1;
const ll N = 2e5 + 1;
ll n, m, a, b, t, tc;
ll lst;
ll cnt;
ll ans;
ll res;

struct Graph {
    ll low[N];
    ll num[N];
    ll par[N];
    ll ans[N];
    bool vis[N];
    vec <ll> adj[N];
} graph;

void clear() {
    lst = 0;
    cnt = 0;
    ans = 1;
    for(ll i = 1; i <= n; ++i) {
        graph.adj[i].clear();
        graph.vis[i] = 0;
    }
}

void input() {
    cin >> n >> m >> a >> b;
    for(ll i = 0; i < m; ++i) {
        ll u; cin >> u;
        ll v; cin >> v;
        graph.adj[u].pb(v);
        graph.adj[v].pb(u);
    }
}

ll dfs(ll u) {
    graph.vis[u] = 1;
    graph.low[u] =
    graph.num[u] = ++t;
    if(u == a || u == b) {
        cnt++;
        lst = graph.num[u];
    }
    for(ll v: graph.adj[u]) {
        if(!graph.vis[v]) {
            graph.par[v] = u;
            graph.low[u] = min(graph.low[u], dfs(v));
        } else if(graph.par[u] != v) {
            graph.low[u] = min(graph.low[u], graph.num[v]);
        }
    }
    if(cnt == 2 && u != a && u != b && graph.par[u] != a && graph.par[u] != b) {
        ll p = graph.par[u];
        graph.low[u] = min(graph.low[u], graph.low[p]);
    }
    if(u == a || u == b) {
        cnt--;
    }
    return graph.low[u];
}

void tra(ll u) {
    graph.vis[u] = 1;
    if(u == a || u == b) {
        cnt++;
        lst = graph.num[u];
    }
    if(cnt == 2 && u != a && u != b && graph.par[u] != a && graph.par[u] != b) {
        ll p = graph.par[u];
        graph.low[u] = min(graph.low[u], graph.low[p]);
    }
    for(ll v: graph.adj[u]) {
        if(!graph.vis[v]) {
            graph.par[v] = u;
            tra(v);
        }
    }
    if(u == a || u == b) {
        cnt--;
    } else if(cnt == 2 && graph.low[u] >= lst) {
        res++;
    }
}

ll calc(ll u) {
    t = res = 0;
    for(ll i = 1; i <= n; ++i) {
        graph.vis[i] = 0;
        graph.par[i] = 0;
    }
    dfs(u);
    for(ll i = 1; i <= n; ++i) {
        graph.vis[i] = 0;
        graph.par[i] = 0;
    }
    tra(u);
    return res;
}

void solve() {
    ans *= calc(a);
    ans *= calc(b);
    cout << ans << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    cin >> tc;
    while(tc--) {
        clear();
        input();
        solve();
    }
}