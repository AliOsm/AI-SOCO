#include <bits/stdc++.h>
using namespace std;
#define all(v) ((v).begin()),((v).end())
#define ll long long
#define fastIO cout << fixed << setprecision(12), ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)
double const EPS = 1e-12, PI = acos(-1);
const int N = 5e5 + 9, M = 1e6 + 9, OO = 1e9 + 7, MOD = 1e9 + 7, MOD2 = 998244353;
const ll INF = 2e18;
using namespace std;

ll arr[N], lazy[4*N], pre[N], suf[N];
pair<ll, int> tree[4*N];

void build(int node, int start, int end) {
	if(start == end) {
		tree[node].first = arr[start];
		tree[node].second = start;
		return;
	}
	int mid = (start + end) / 2;
	build(node * 2, start, mid);
	build(node * 2 + 1, mid + 1, end);
	tree[node].first = tree[node * 2].first + tree[node * 2 + 1].first;
	tree[node].second = start;
}

void propagate(int node, int start, int end) {
	if(!lazy[node]) return;
	tree[node].first += lazy[node];
	if(start != end) {
		lazy[node * 2] += lazy[node];
		lazy[node * 2 + 1] += lazy[node];
	}
	lazy[node] = 0;
}

void update(int node, int start, int end, int l, int r, ll val) {
	propagate(node, start, end);
	if(start > r || end < l)
		return;
	if(start >= l && end <= r) {
		lazy[node] += val;
		propagate(node, start, end);
		return;
	}
	int mid = (start + end) / 2;
	update(node * 2, start, mid, l, r, val);
	update(node * 2 + 1, mid + 1, end, l, r, val);
	tree[node].first = tree[node * 2].first + tree[node * 2 + 1].first;
}

pair<ll, int> query(int node, int start, int end, int l, int r) {
	if(start > r || end < l)
		return {-INF, -OO};
	if(start >= l && end <= r) {
		return tree[node];
	}
	int mid = (start + end) / 2;
	pair<ll, int> p1 = query(node * 2, start, mid, l, r);
	pair<ll, int> p2 = query(node * 2 + 1, mid + 1, end, l, r);
	if(p1.second == -OO)
		return p2;
	if(p2.second == -OO)
		return p1;
	pair<ll, int> p3 = {p1.first + p2.first, min(p1.second, p2.second)};
	return max({p1, p2, p3});
}

int main() {
	fastIO;
#ifdef LOCAL
	freopen("input.in", "rt", stdin);
#endif
	int n, k;
	cin >> n >> k;
	for (int i = 0; i < n; ++i)
		cin >> arr[i];
	for (int i = n - 1; i >= 0; --i) {
		suf[i] = arr[i];
		suf[i] += suf[i + 1];
	}
	ll sum = suf[0];
	sort(suf + 1, suf + n, greater<ll>());
	for (int i = 1; i < k; ++i)
		sum += suf[i];
	cout << sum;
	return 0;
}
