#include<bits/stdc++.h>
using namespace std;

#define REP( i , n ) for( int i = 0 ; i < n ; ++i )
#define sc( x ) scanf( "%d" , &x )

#define pb push_back

typedef vector< int > vi;

struct Node
{
    int cost , f , id;
    Node(){}
    Node( int cost , int f , int id ) : cost( cost ) , f( f ) , id( id ) {}
};
bool cmp( Node a , Node b ){
    if( a.f*b.cost != b.f*a.cost )
        return a.f*b.cost > b.f*a.cost;
    return a.cost > b.cost;
}
int main()
{
    int n , V;
    while( sc( n ) == 1 )
    {
        sc( V );
        Node A[ n ];
        REP( i , n )
        {
            int cost , f;
            sc( cost ) , sc( f );
            A[ i ] = Node( cost , f , i );
        }
        sort( A , A + n , cmp );
        //REP( i , n ) cout << A[ i ].cost << " " << A[ i ].f << " " << A[ i ].id << endl;
        vector< Node > B;
        vi ind;
        int ans = 0;
        REP( i , n )
            if( A[ i ].cost <= V )
            {
                V -= A[ i ].cost;
                ans += A[ i ].f;
                ind.pb( A[ i ].id );
            } else B.pb( A[ i ] );
        //cout << "V:" << V << endl;
        //cout << "B sz : " << B.size() << endl;
        if( V == 1 && !B.empty() )
        {
            int nv = ind.size();
            int found = 0 , id1 , id2;
            for( int i = nv - 1 ; i >= 0 ; --i )
                if( A[ i ].cost == 1 )
                {
                    found++;
                    id1 = i;
                    break;
                }
            int nB = B.size();
            REP( i , nB )
                if( B[ i ].cost == 2 )
                {
                    found++;
                    id2 = i;
                    break;
                }
            //cout << "found " << found << endl;
            if( found != 2 )
            {
                printf( "%d\n" , ans );
                REP( i , nv ) printf( "%d%s" , ind[ i ] + 1 , i + 1 == nv ? "\n":" " );
            }
            else
            {
                //cout << B[ id2 ].f << " " << A[ id1 ].f << endl;
                if( B[ id2 ].f > A[ id1 ].f )
                {
                    ans -= A[ id1 ].f;
                    ans += B[ id2 ].f;
                    ind[ id1 ] = B[ id2 ].id;
                }
                printf( "%d\n" , ans );
                REP( i , nv ) printf( "%d%s" , ind[ i ] + 1 , i + 1 == nv ? "\n":" " );
            }
        }
        else
        {
            printf( "%d\n" , ans );
            int nv = ind.size();
            REP( i , nv ) printf( "%d%s" , ind[ i ] + 1 , i + 1 == nv ? "\n":" " );
        }
    }
}