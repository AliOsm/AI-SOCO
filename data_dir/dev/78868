#pragma GCC target("avx2")
#pragma GCC optimize("O3")

# include <x86intrin.h>
# include <bits/stdc++.h>

# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;
 
template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define lb lower_bound
#define ub upper_bound
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

inline void Input_Output () {
	//freopen(".in", "r", stdin);
   //freopen(".out", "w", stdout);
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const ll mod = 998244353;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 223;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n;
int l[N], r[N];
vector < int > vv;
ll dp[N][N];
ll inv[N];

ll bpow (ll a, ll b) {
	ll res = 1;
	while (b > 0) {
		if (b & 1) (res *= a) %= mod;
		(a *= a) %= mod;
		b /= 2;
	}
	return res;
}      

ll C (ll n, ll k) {
	ll res = inv[k];
	for (int i = 1; i <= k; ++i) {
		(res *= n + i) %= mod;
	}

	return res;
}

inline void solve () {
	cin >> n;

	inv[0] = 1;
	for (int i = 1; i < N;i ++)
		inv[i] = inv[i-1] * bpow(i, mod - 2) % mod;

	ll q = 1;
	for (int i = 1; i <= n; ++i) {
		cin >> l[i] >> r[i];
		(q *= (ll)(r[i] - l[i] + 1)) %= mod;
		vv.pb(l[i]);
		r[i]++;
		vv.pb(r[i]);
	}
	reverse(l + 1, l + n + 1);
	reverse(r + 1, r + n + 1);
	sort(every(vv));
	vv.resize(unique(every(vv)) - vv.begin());

	for (int j = 0; j <= sz(vv); j++)
		dp[n+1][j] = 1;

	for (int i = n; i >= 1; i--) {
		for (int j = sz(vv) - 1; j >= 0; --j) {
			dp[i][j] = dp[i][j+1];
			for (int k = i; k <= n; k++) {
				if (vv[j] < l[k] || vv[j] >= r[k]) break;
				(dp[i][j] += (dp[k+1][j+1] * C(vv[j+1] - vv[j] - 1, k - i + 1)) % mod) %= mod;
			}
		}
	}
	ll res = dp[1][0];
//	cout << res << '\n';
	cout << (res * bpow(q, mod - 2)) % mod << '\n';
}

int main () {
   	SpeedForce;
	int tt = 1;
	//cin >> tt;
	while(tt--) solve();
   	return Accepted;
}

// B...a