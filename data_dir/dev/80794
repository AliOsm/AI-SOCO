/// I won't go back on my words ,that is my ninja way !!!
#include<bits/stdc++.h>
using namespace std;
const int N = 2e5+5 ;
int n ,m ,u ,v ;
int parent[N] ,Rank[N] ,mx[N] ;
int find_set(int i){
    if(parent[i]==i)return i;
    return parent[i]=find_set(parent[i]);
}
bool join(int i,int j){
    int a = mx[find_set(i)] ;
    int b = mx[find_set(j)] ;
    i=find_set(i);
    j=find_set(j);
    if(i==j)return 0;
    if(Rank[i]>Rank[j])swap(i,j);
    parent[i]=j;
    if(Rank[i]==Rank[j])++Rank[j];
    int p = find_set(i) ;
    mx[p] = max(mx[p],a);
    mx[p] = max(mx[p],b);
    return 1;
}
int main(){
    scanf("%d%d",&n,&m);
    iota(parent,parent+n,0);
    iota(mx,mx+n,0);
    while(m--){
        scanf("%d%d",&u,&v);
        --u ,--v ;
        join(u,v);
    }
    int ans = 0 ;
    for(int i=0;i<n;++i){
        int mxx = mx[find_set(i)] ;
        for(int j=i;j<=mxx;++j){
            mxx = mx[find_set(j)] ;
            ans += join(i,j);
            mxx = mx[find_set(j)] ;
        }
        i = mxx ;
    }
    cout << ans ;
    return 0;
}
