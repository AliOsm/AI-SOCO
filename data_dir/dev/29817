#include <bits/stdc++.h>

using namespace std;

#ifdef SG
	#include <debug.h>
#else
	#define show(...)
	#define debug(...)
	#define deepen(...)
	#define timer(...)
#endif

#define ARG4(_1,_2,_3,_4,...) _4

#define forn3(i,l,r) for (int i = int(l); i < int(r); ++i)
#define forn2(i,n) forn3 (i, 0, n)
#define forn(...) ARG4(__VA_ARGS__, forn3, forn2) (__VA_ARGS__)

#define ford3(i,l,r) for (int i = int(r) - 1; i >= int(l); --i)
#define ford2(i,n) ford3 (i, 0, n)
#define ford(...) ARG4(__VA_ARGS__, ford3, ford2) (__VA_ARGS__)

#define ve vector
#define pa pair
#define tu tuple
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) ((int)(a).size())

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef unsigned char uc;
typedef pa<int, int> pii;
typedef pa<int, ll> pil;
typedef pa<ll, int> pli;
typedef pa<ll, ll> pll;
typedef ve<int> vi;

const ld pi = 3.1415926535897932384626433832795l;

template<typename T> inline auto sqr (T x) -> decltype(x * x) {return x * x;}
template<typename T1, typename T2> inline bool umx (T1& a, T2 b) {if (a < b) {a = b; return 1;} return 0;}
template<typename T1, typename T2> inline bool umn (T1& a, T2 b) {if (b < a) {a = b; return 1;} return 0;}

const int N = 100100;
int a[N];
string b;

const int inf = 1e9;

int maxx(int l, int r) {
	int ans = -inf;
	for (int i = l; i < r; ++i) {
		umx(ans, a[i]);
	}
	return ans;
}

int minn(int l, int r) {
	int ans = inf;
	for (int i = l; i < r; ++i) {
		umn(ans, a[i]);
	}
	return ans;
}

int main () {
	//std::ios::sync_with_stdio(false);
	cout.setf(ios::showpoint | ios::fixed);
	cout.precision(20);
#ifdef SG
	freopen((problemname + ".in").c_str(), "r", stdin);
//	freopen((problemname + ".out").c_str(), "w", stdout);
#endif
	int n;
	cin >> n;
	forn(i, n) {
		cin >> a[i];
	}
	getline(cin, b);
	getline(cin, b);
	int minl = -inf, maxl = inf, minr = -inf, maxr = inf;
	forn(i, 4, n) {
		if (b[i] == b[i - 1]) {
			if (b[i] == '0') {
				umn(maxl, maxx(i - 4, i + 1));
			} else {
				umx(minr, minn(i - 4, i + 1));
			}
		} else {
			if (b[i] == '0') {
				umn(maxr, minn(i - 4, i + 1) - 1);
				//debug(minn(i - 4, i + 1));
			} else {
				umx(minl, maxx(i - 4, i + 1) + 1);
				//debug(maxx(i - 4, i + 1));
			}	
			i += 4;
		}
	}
	if (minl <= maxr) {
		cout << minl << ' ' << maxr << endl;
    } else {
    	assert(0);
    }                                

	return 0;
}