#include <bits/stdc++.h>
#define pb push_back
typedef long double ld;
typedef long long ll;
using namespace std;


int n;
bool vis[222];

int longestincc(vector<vector<int> > g, int source){
	queue<int> bfs;
	bfs.push(source);
	vis[source] = true;
	int x;
	while(bfs.size()){
		x = bfs.front(); bfs.pop();
		for(int ne : g[x]){
			if(!vis[ne]){
				vis[ne] = true;
				bfs.push(ne);
			}
		}	
	}


	vector<bool> v(n + 1);
	queue<pair<int, int>> d;
	
	d.push({x, 0});
	v[x] = true;
	pair<int, int> y;
	while(d.size()){
		y = d.front(); d.pop();
		for(int ne : g[y.first]){
			if(!v[ne]){
				v[ne] = true;
				d.push({ne, y.second + 1});
			}
		}
	}
	return y.second;
}

int solve(vector<pair<int, int>> ed){
	vector<vector<int>> g(n + 1);
	for(auto e : ed){
		g[e.first].pb(e.second);
		g[e.second].pb(e.first);
	}

	memset(vis, 0, sizeof(vis));
	int u = 0, v = 0;
	for(int i = 1; i <= n; i++){
		if(!vis[i]){
			int z = longestincc(g, i);
			if(u == 0) u = z;
			else v = z;
		}
	}
	return u * v;
}

int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);

	cin >> n;
	vector<pair<int, int>> ed;
	for(int i = 0; i < n - 1; i ++){
		int a, b;
		cin >> a >> b;
		ed.pb({a, b});
	}
	int mx = 0;
	for(int i = 0; i < n - 1; i++){
		vector<pair<int, int>> e;
		for(int j = 0; j < n - 1; j++){
			if(i != j) e.pb(ed[j]);
		}
		mx = max(mx, solve(e));
	}
	cout << mx << endl;

	return 0;		
}