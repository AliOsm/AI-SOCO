#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
#endif

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class FwdIter> inline auto
dump(FwdIter first, FwdIter last, const char * dlm) -> void {
typedef typename iterator_traits<FwdIter>::value_type value_type;
copy(first, last, ostream_iterator<value_type>(cout, dlm)); }
/* @@@ ----------------------------------- */

void probA()
{
    size_t n;
    cin >> n;

    vector<size_t> a(n);
    cin >> a;
    transform(begin(a), end(a), begin(a),
              bind(minus<size_t>(), placeholders::_1, (size_t) 1));

    vector<size_t> out(n, 0);

    for(size_t s = 0; s < n; ++s)
    {
        vector<size_t> cnt(n + 1);
        size_t r = n;

        for(size_t i = s; i < n; ++ i)
        {
            const auto ai = a[i];
            const auto icnt = ++ cnt[ai];

            if(cnt[r] < icnt || (cnt[r] == icnt && ai < r))
                r = ai;

            ++ out[r];
        }
    }

    copy(begin(out), end(out), ostream_iterator<size_t>(cout, " "));
}

int main(const int argc, char * argv [])
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    probA();

    return EXIT_SUCCESS;
}
