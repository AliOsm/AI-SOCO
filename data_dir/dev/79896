#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef vector<pii> vii;
typedef vector<bool> vb;
typedef vector<string> vs;
const int di[] = { 0, 0, 1, -1 };
const int dj[] = { 1, -1, 0, 0 };
const ll MOD = 1e9 + 7;
const ll INF = 1e9;
const long double EPS = 1e-6;
#define all(x) x.begin(),x.end()

int n, m;
vvi party;
vi price, ppl;

ll solve(int target) {
	vb vis(n);
	vi c(m);
	int left = target - party[0].size();
	ll ret = 0;
	for (int i = 1; i < m; i++) {
		while (party[i].size() - c[i] >= target) {
			ret += price[party[i][c[i]]];
			vis[party[i][c[i]++]] = true;
			left--;
		}
	}

	for (int i = 0; i < n && left > 0; i++) {
		if (!vis[ppl[i]])
			ret += price[ppl[i]], left--;
	}
	return ret;
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n >> m;
	party.assign(m, vi());
	price.resize(n);
	for (int i = 0; i < n; i++) {
		int pt; cin >> pt >> price[i]; pt--;
		party[pt].push_back(i);
		if (pt)
			ppl.push_back(i);
	}

	sort(all(ppl), [](int a, int b) {
		return price[a] < price[b];
	});
	for (int i = 1; i < m; i++) {
		sort(all(party[i]), [](int a, int b) {
			return price[a] < price[b];
		});
	}

	ll r = LLONG_MAX;
	for (int i = max(1, (int)party[0].size()); i <= n; i++) {
		r = min(r, solve(i));
	}
	cout << r << endl;
	cin.ignore(), cin.get();
}
