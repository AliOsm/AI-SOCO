//its not how good you are...its how good you want to be
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll  int
#define inf 100000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)

vector<ll>v[5001];
ll n,leaves[5001],size[5001],is_leaf[5001],dp[5001][5001][2],leaf_sum[5001],pre1[5001][5001],pre2[5001][5001];
void prepare(ll cur,ll par)
{
	is_leaf[cur]=1;
	for(ll i=0;i<v[cur].size();i++)
	{
		ll x=v[cur][i];
		if(x==par)
		continue;
		is_leaf[cur]=0;
		prepare(x,cur);
		leaves[cur]+=leaves[x];
	}
	if(is_leaf[cur])
	leaves[cur]++;
}

void dfs(ll cur,ll par)
{
	vector<ll>child;
	size[cur]=1;
	for(ll i=0;i<v[cur].size();i++)
	{
		ll x=v[cur][i];
		if(x==par)
		continue;
		dfs(x,cur);
		size[cur]+=size[x];
		child.pb(x);
	}
	if(is_leaf[cur])
	{
		dp[cur][1][0]=0;
		dp[cur][0][1]=0;
		return ;
	}
	ll x,tot;
	leaf_sum[0]=leaves[child[0]];
	for(ll i=1;i<child.size();i++)
	leaf_sum[i]=leaf_sum[i-1]+leaves[child[i]];
	//painting cur with 0
	x=child[0];
	for(ll i=0;i<=leaves[x];i++)
	{
		pre1[x][i]=dp[x][i][0];
		pre1[x][i]=min(pre1[x][i],dp[x][i][1]+1);
	}
	for(ll i=1;i<child.size();i++)
	{
		for(ll j=0;j<=leaf_sum[i];j++)
		{
			for(ll k=0;k<=min(leaves[child[i]],j);k++)
			pre1[child[i]][j]=min(pre1[child[i]][j],pre1[child[i-1]][j-k]+min(dp[child[i]][k][0],dp[child[i]][k][1]+1));
			
		}
	}
	tot=leaf_sum[child.size()-1];
	for(ll i=0;i<=tot;i++)
	dp[cur][i][0]=pre1[child[child.size()-1]][i];
	
	//painting cur with 1
	x=child[0];
	for(ll i=0;i<=leaves[x];i++)
	{
		pre2[child[0]][i]=dp[x][i][1];
		pre2[child[0]][i]=min(pre2[child[0]][i],dp[x][i][0]+1);
	}
	for(ll i=1;i<child.size();i++)
	{
		for(ll j=0;j<=leaf_sum[i];j++)
		{
			for(ll k=0;k<=min(leaves[child[i]],j);k++)
			pre2[child[i]][j]=min(pre2[child[i]][j],pre2[child[i-1]][j-k]+min(dp[child[i]][k][0]+1,dp[child[i]][k][1]));
			
		}
	}
	tot=leaf_sum[child.size()-1];
	for(ll i=0;i<=tot;i++)
	dp[cur][i][1]=pre2[child[child.size()-1]][i];
}
int main()
{
//	boost1;boost2;
	ll i,j,x,y,root,k;
	scanf("%d",&n);
	for(i=1;i<=n-1;i++)
	{
		scanf("%d%d",&x,&y);
		v[x].pb(y);
		v[y].pb(x);
	}
	for(i=0;i<=n;i++)
	{
		for(j=0;j<=n;j++)
		{
			for(k=0;k<=1;k++)
			{
				dp[i][j][k]=inf;
				pre1[i][j]=inf;
				pre2[i][j]=inf;
			}
		}
	}
	for(i=1;i<=n;i++)
	{
		if(v[i].size()>1)
		{
			root=i;
			break;
		}
	}
	prepare(root,-1);
	dfs(root,-1);
	printf("%d",min(dp[root][leaves[root]/2][0],dp[root][leaves[root]/2][1]));
	return 0;
}
