#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef long double real;

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif

using namespace std;

const int MaxN = 300009, MedN = 550, NA = -1, MaxC = 0x3F3F3F3F;

int a [MaxN];
int p [MaxN], q [MaxN];
pair <int, int> v [MaxN];
int64 ans [MaxN];
int64 s [MaxN];
int m, n;

int main (void)
{
 int i, j, k, prev, u, w;
 while (scanf (" %d", &n) != EOF)
 {
  for (i = 0; i < n; i++)
   scanf (" %d", &a[i]);
  scanf (" %d", &m);
  for (i = 0; i < m; i++)
  {
   scanf (" %d %d", &p[i], &q[i]);
   p[i]--;
   v[i] = make_pair (q[i], i);
  }
  sort (v, v + m);
  prev = NA;
  for (i = 0; i < m; i++)
  {
   k = v[i].first;
   u = v[i].second;
   assert (k == q[u]);
   w = p[u];
   if (k > MedN)
   {
    ans[u] = 0;
    for (j = w; j < n; j += k)
     ans[u] += a[j];
   }
   else
   {
    if (prev != k)
    {
     prev = k;
     for (j = n - 1; j >= n - k; j--)
      s[j] = a[j];
     for ( ; j >= 0; j--)
      s[j] = s[j + k] + a[j];
    }
    ans[u] = s[w];
   }
  }
  for (i = 0; i < m; i++)
   printf (INT64 "\n", ans[i]);
 }
 return 0;
}
