#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <vector>
#include <queue>
#include <memory.h>
#include <deque>
#include <iomanip>
#include <utility>
#include <string>
#include <ext/rope>
#include <iterator>
 
using namespace std;
using namespace __gnu_cxx;
 
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define sz size
#define scf scanf
#define prf printf       
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define gcd(a,b) __gcd(a,b)
#define print(x) prf("%d\n", x.sz()); for (int i = 0; i < x.sz(); i++) prf("%d ", x[i]);
#define getBit(x,i) ((x&(1<<i))!=0 ? 1 : 0)
#define For(i,n) for (int i = 0; i < n; ++i)
#define FOR(i,begin,end,move) for (int i = begin; i != end; i += move)
 
typedef long long ll;
 
const ll base = 1000000007LL;
const ll INF = 10000000000000LL;

int n, m;
int from, to;
bool used[100500];
vector < int > g[100500];

void dfs(int ver)
{
	used[ver] = true;
	For(i, g[ver].sz())
		if (!used[g[ver][i]])
			dfs(g[ver][i]);
}

int main()
{
	scf("%d%d", &n, &m);
	For(i, m)
	{
		scf("%d%d", &from, &to);
		g[from].pb(to);
		g[to].pb(from);
	}
	dfs(1);
	int cnt = 0;
	for (int i = 1; i <= n; i++)
		if (used[i])
			cnt++;
	if (cnt == n && n == m)
		prf("FHTAGN!\n");
	else prf("NO\n");
	return 0;
}		