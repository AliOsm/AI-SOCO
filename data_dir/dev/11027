/**/
#include<bits/stdc++.h>
using namespace std;

#define pb push_back
#define For(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define all(v) v.begin(),v.end()
#define V vector
typedef long long ll;
/***********************************************/
/* Dear GCC compiler:
 * I've wasted time reading the problem and trying to figure out the solution
 * If there's any syntax error and you've any suggestion, please fix it yourself.
 * I hope my code compile and get accepted. KEE O.o
 *      ____________
 *     /         __ \
 *    /   __    |  | \
 *   /   |__|   |  |  \
 *  (           |__|   )
 *   \                /
 *    \      ___     /
 *     \____________/
 */
const ll mod = 1000000007;
int main(){
    //ios_base::sync_with_stdio(false);
    //cin.tie(nullptr);
    int n,m,k;
    scanf("%d%d%d",&n,&m,&k);
    V<V<bool> > used(n,V<bool>(m,false));
    V<V<int> > graph(n,V<int>(m,0));
    int x,y;
    V<pair<int,int>  > q;
    For(i,0,k){
        scanf("%d%d",&x,&y);
        x--;
        y--;
        q.pb({x,y});
    }
    For(i,0,q.size()){
        if(!used[q[i].first][q[i].second]){
            used[q[i].first][q[i].second] = true;
            graph[q[i].first][q[i].second] = 1;
            printf("%d %d\n",q[i].first+1,q[i].second+1);
            continue;
        }
        For(j,-1,2){
            For(k,-1,2){
                if(q[i].first + j >= 0 && q[i].first + j < n ){
                    if(q[i].second + k >= 0 && q[i].second + k < m ){
                        graph[q[i].first][q[i].second] = max(graph[q[i].first][q[i].second],graph[q[i].first+j][q[i].second+k] - abs(j) - abs(k));
                    }
                }
            }
        }
        int d = graph[q[i].first][q[i].second];
        int x,y;
        bool found = false;
        while(!found){
            x = q[i].first - d,y = q[i].second;
            int low = max(0,-x),high = min(2*d,n - x - 1);
            int cur = low;
            For(j,low,high+1){
                if(y - cur >= 0 && !used[x+j][y-cur]){
                    x+=j;
                    y-=cur;
                    found = true;
                    break;
                }
                if(y + cur < m && !used[x+j][y+cur]){
                    x+=j;
                    y+=cur;
                    found = true;
                    break;
                }
                if(j < d)
                    cur++;
                else
                    cur--;
            }
            if(!found)
                d++;
        }
        printf("%d %d\n",x+1,y+1);
        used[x][y] = true;
        graph[q[i].first][q[i].second] = d;
        if((x == n && y >= q[i].second) || x == d + q[i].first)
            graph[q[i].first][q[i].second]++;
        graph[x][y] = max(graph[x][y],1);
    }
    return 0;
}
/**/
