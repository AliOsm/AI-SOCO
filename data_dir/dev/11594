#include <bits/stdc++.h>
#include <ext/hash_map>

using namespace std;
using namespace __gnu_cxx;

#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define REV(i,b,a) for(int i=(a);i>=(b);i--)
#define mp make_pair
#define pb push_back
#define oo (1<<30)
#define sz(v) (int)v.size()
#define all(c) (c).begin(),(c).end()
#define rall(c) (c).rbegin(),(c).rend()
#define mem(s,v) memset(s,v,sizeof(s))
#define ppc(x) __builtin_popcount((x))
#define iter(it,s) for(__typeof(s.begin())it = s.begin();it!=s.end();it++)
#define sci(i) scanf("%d",&(i))
#define scl(l) scanf("%I64d",&(l))
#define scd(d) scanf("%lf",&(d))
#define scs(s) scanf("%s",(s))

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<double> vd;
typedef vector<string> vs;
typedef pair<int, int> pi;
typedef vector<pi> vpi;

int dx[] = { 0, 0, 1, -1 };
int dy[] = { 1, -1, 0, 0 };

string a, b;
char ss[200002];
int cc = 0;
int cnt1[30], cnt2[30];
int rec(int s1, int e1, int s2, int e2) {
  int si = e1 - s1 + 1;
  mem (cnt1, 0), mem(cnt2, 0);
  bool ok = 1;
  FOR (i , 0, si)
    cnt1[a[s1 + i] - 'a']++, cnt2[b[s2 + i] - 'a']++, ok &= (a[s1 + i]
        == b[s2 + i]);
  FOR (i , 0 , 30)
    if (cnt1[i] != cnt2[i])
      return 0;
  if (ok)
    return 1;
  if (si & 1)
    return 0;
  cc++;
  si /= 2;
  bool res = rec(s1, s1 + si - 1, s2, s2 + si - 1)
      && rec(s1 + si, e1, s2 + si, e2);
  if (!res)
    res |= rec(s1, s1 + si - 1, s2 + si, e2)
        && rec(s1 + si, e1, s2, s2 + si - 1);
  return res;
}

string canonize(string s) {
  if (sz(s) & 1)
    return s;
  string s1 = canonize(s.substr(0, sz(s) / 2));
  string s2 = canonize(s.substr(sz(s) / 2, sz(s) / 2));
  return s1 < s2 ? s1 + s2 : s2 + s1;
}

int main() {
#ifndef ONLINE_JUDGE
  freopen("test.in", "rt", stdin);
//  freopen("o.txt", "wt", stdout);
#endif
  scs(ss), a = ss, scs(ss), b = ss;
  string r1 = canonize(a), r2 = canonize(b);
  cout << (r1 == r2 ? "YES" : "NO");
//  cout << (rec(0, sz(a) - 1, 0, sz(b) - 1) ? "YES" : "NO") << endl;
  return 0;
}
