/*
    NO 
        TIME 
            TO 
                DIE
                    --007
                            */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli mod=998244353;
lli INF=1e17;
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,y,k,m;
const double pi1=3.14159265358979323846;
//matrix exponentiation is associative and distributive
lli me(lli a,lli b)
{
    lli res=1;
    while(b)
    {
        if(b&1)
        res=(res%mod*a%mod)%mod;
        a=a*a;
        a%=mod;
        b=b>>1;
    }
    return res;
}
lli mI(lli a)
{
    return (me(a,mod-2)%mod+mod)%mod;
}
vector<lli> adj[1000005],adjt[1000005];
set<lli> condadj[1000005];
lli vis[1000005];
vector<ll> ans;
lli a[1000005];
lli s[1000005];
vector<lli> order;
void dfs(lli v,lli p)
{
    vis[v]=1;
    // cout<<(char)v<<" "<<p<<" "<<fflag<<"\n";
    // lli ff=0;
    for(auto &i: adj[v])
    {
        if(!vis[i])
        dfs(i,v);
    }
    order.push_back(v);
}
 lli cnt;
 lli comp[1000005],dp[1000005];
void dfs1(lli v,lli p,lli cnt)
{
    vis[v]=1;
    comp[v]=cnt;
    for(auto &i: adjt[v])
    {
        if(!vis[i])
        dfs1(i,v,cnt);
    }
}

lli dfs2(lli v,lli p,lli end)
{
    vis[v]=1;
    dp[v]=-1e9;
    if(v==end)
    return dp[v]=s[v];
    // cout<<v<<" "<<p<<"\n";
    for(auto &i: condadj[v])
    {
        if(!vis[i])
        {
            lli gg=dfs2(i,v,end);
            dp[v]=max(dp[v],s[v]+gg);
        }
    }
    return dp[v];
}
int main()
{
 cin>>n;
 map<lli,lli> check;
 vector<lli> valmx;
 map<lli,ll> mp;
 lli tot=0;
 for(int i=1;i<=n;i++)
 {
     lli l,x;
     cin>>l;
     lli mi=1e15;
     lli mx=0;
     for(int j=1;j<=l;j++)
     {
         cin>>x;
        //  a[i].push_back(x);
         if(x>mi)
         {
             check[i]=1;
         }
         mi=min(mi,x);
         mx=max(mx,x);
     }
     if(!check[i])
     mp[i]={mi,mx},valmx.push_back(mx);
     else
     tot++;
 }
 sort(valmx.begin(),valmx.end());
 lli ans=0;
 lli yy=valmx.size();
//  cout<<yy<<"\n";
 for(int i=1;i<=n;i++)
 {
     if(check[i])
     {
        //  cout<<i<<"\n";
         ans+=n;
     }
     else
     {
         ans+=tot;
         lli mm=mp[i].first;
         lli mu=mp[i].second;
         auto it=upper_bound(valmx.begin(),valmx.end(),mm);
         if(it==valmx.end())
         continue;
        //  cout<<i<<" "<<mm<<" "<<*it<<" ";
         lli gg=yy-(it-valmx.begin());
        //  cout<<gg<<" "<<yy<<"\n";
         ans+=gg;
     }
 }
 cout<<ans;
}