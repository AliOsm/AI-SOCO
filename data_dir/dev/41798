#include <iostream>
#include <cmath>
#include <string>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <fstream>
#include <cassert>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <stack>
#include <functional>
#include <numeric>
#include <ctime>
#include <cstdlib>
#include <sstream>

using namespace std;

#define f first
#define s second
#define mp make_pair
#define pb push_back
#define pii pair<int, int>
#define pll pair<long long, long long>
#define y1 stupid_y1
#define ll long long
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x)*(x))
#define sz(a) (int)a.size()
#define file "a"

const int inf = (int)1e9;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int mod = 1000000007;

vector < int > g[500500];
vector < int > H[500500];
vector < int > A[500500];
vector < int > sum[500500];
int C[500500];
int timer;
int tin[500500], tout[500500];
int level[500500];
int n, m;

void dfs(int v, int dep){
    level[v] = dep;
    H[dep].pb(timer);
    A[dep].pb(C[v]);
    tin[v] = timer++;
    forit(it, g[v]){
        int to = *it;
        dfs(to, dep+1);
    }
    tout[v] = timer++;
}

int main () {
    #ifdef LOCAL
    freopen(file".in", "r", stdin);
    freopen(file".out", "w", stdout);
    #endif

    scanf("%d%d", &n, &m);

    for (int i=2;i<=n;i++){
        int x; scanf("%d", &x);
        g[x].pb(i);
    }

    scanf("\n");

    for (int i=1;i<=n;i++){
        char ch; scanf("%c", &ch);
        int q = ch - 'a';
        C[i] = (1<<q);
    }
    scanf("\n");

    dfs(1, 1);


    for (int i=1;i<=n;i++){
        for (int j=0;j<sz(A[i]);j++){
            if (j==0){
                sum[i].pb(A[i][j]);
            }
            else
                sum[i].pb(sum[i].back()^A[i][j]);
        }
    }


    for (int i=1;i<=m;i++){
        int v, h;
        scanf("%d%d", &v, &h);
        if (h<level[v]){
            printf("Yes\n");
            continue;
        }

        int l = lower_bound(all(H[h]), tin[v]) - H[h].begin();
        int r = upper_bound(all(H[h]), tout[v]) - H[h].begin();

        int t = ((l-1<0)?0:sum[h][l-1])^((r-1<0)?0:sum[h][r-1]);

        if (__builtin_popcount(t) <= 1){
            printf("Yes\n");
        }
        else
            printf("No\n");
        // for (int j=0;j<31;j++){
        //     if (t&(1<<j)){
        //         cout <<j<<" ";
        //     }
        // }
        // cout <<endl;
        // cout <<l<<" "<<r<<endl;
        // forit(it, H[h]){
        //     cout <<*it<<" ";
        // }
        // cout <<endl;
        // cout <<tin[v]<<" "<<tout[v]<<endl;

    }


    #ifdef LOCAL
    cerr << (double)clock() * 1.0 / CLOCKS_PER_SEC << endl;
    #endif

    return 0;
}