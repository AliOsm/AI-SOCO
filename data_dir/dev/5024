#include <bits/stdc++.h>
using namespace std;

const int N = 1e3 + 10;
string s, dp[2][N];
int par[2][N], is[2][N];
vector <int> v;

string solve(string k) {
	reverse(k.begin(), k.end());
	return k;
}

string mn(string a, string b) {
	for (int i = 0; i < min(a.size(), b.size()); i++)
		if (a[i] != b[i]) {
			if (a[i] < b[i])
				return a;
			else
				return b;
		}
	if (a.size() < b.size())
		return a;
	return b;
}

string mx(string a, string b) {
	for (int i = 0; i < min(a.size(), b.size()); i++)
		if (a[i] != b[i]) {
			if (a[i] < b[i])
				return b;
			else
				return a;
		}
	if (a.size() < b.size())
		return b;
	return a;
}

bool small(string a, string b) {
	for (int i = 0; i < min(a.size(), b.size()); i++)
		if (a[i] != b[i])
			return a[i] < b[i];
	if (a.size() < b.size())
		return 1;
	return 0;
}

bool big(string a, string b) {
	for (int i = 0; i < min(a.size(), b.size()); i++)
		if (a[i] != b[i])
			return a[i] > b[i];
	if (a.size() < b.size())
		return 0;
	return 1;
}

int main() {
	cin >> s;
	
	dp[0][0] = dp[1][0] = s[0];
	for (int i = 1; i < s.size(); i++) {
		char c = s[i];
		string tmp1 = solve(dp[1][i - 1] + c), tmp2 = solve(dp[0][i - 1] + c);
		dp[0][i] = mx(tmp1, dp[0][i - 1] + c);
		dp[1][i] = mn(tmp2, dp[1][i - 1] + c);
		if (big(tmp1, dp[0][i - 1] + c))
			par[0][i] = 1, is[0][i] = 1;
		if (small(dp[1][i - 1] + c, tmp2))
			par[1][i] = 1;
		else
			is[1][i] = 1;
//		cout << dp[0][i] << " " << dp[1][i] << endl;
	}
	
	int cur = (int)s.size() - 1, up = 0;
	if (small(dp[1][cur], dp[0][cur]))
		up = 1;
	while (cur) {
		if (is[up][cur])
			v.push_back(1);
		else
			v.push_back(0);
		up = par[up][cur];
		cur--;
	}
	v.push_back(0);
	
	reverse(v.begin(), v.end());
	for (int i : v)
		cout << i << " ";
}

