		//			- -- --- ---- -----be name khoda----- ---- --- -- -			\\

#include <bits/stdc++.h>

using namespace std;

const int N = 1221;

int par[N], mask[N][N], init[2 * N], last[2 * N], n, m, k;
vector <int> g[N];
vector <pair<int, int>> es;
map <pair<int, int>, int> edge;
map <string, int> mp;

int root(int v)
{
	return par[v] == v ? v : par[v] = root(par[v]);
}

void merge(int u, int v)
{
	assert(par[u] == u);
	assert(par[v] == v);
	par[u] = v;
	for(int i = 0; i < m; i++)
		mask[v][i] |= mask[u][i];
}

bool solve()
{
	for(int i = 0; i < n; i++)
		par[i] = i;
	for(int i = 0; i < n; i++)
		for(int j = 0; j < m; j++)
			mask[i][j] = 0;
	for(int i = 0; i < m; i++)
		mask[init[i + N]][i] = 1;
	for(int i = 0; i < n; i++)
		for(auto e : es)
		{
			int u = root(e.first);
			int v = root(e.second);
			if(u == v)
				continue;
			int x = edge[e];
			if(mask[u][x] || mask[v][x])
			{
				merge(v, u);
//				cerr << u << ", " << v << " : " << mask[u][x] << " | " << mask[v][x] << endl;
			}
		}
	for(int i = 0; i < k; i++)
		if(root(init[i]) != root(last[i]))
			return 1;
	for(int i = 0; i < m; i++)
		if(root(init[i + N]) != root(last[i + N]))
			return 1;
	return 0;
}

int main()
{
	cin >> n >> m >> k;
	for(int i = 0; i < m; i++)
	{
		int u, v;
		cin >> u >> v;
		u--;
		v--;
		g[u].push_back(v);
		g[v].push_back(u);
		es.push_back(make_pair(u, v));
		edge[es.back()] = es.size() - 1;
	}
	for(int i = 0; i < k; i++)
	{
		string name;
		int d;
		cin >> name;
		mp[name] = i;
		cin >> init[i];
		init[i]--;
		cin >> d;
		while(d--)
		{
			int x;
			cin >> x;
			x--;
			init[x + N] = init[i];
//			mask[init[i]][x] = 1;
		}
	}

// .....................................

	//	 -> Solve!
//	......................................

	for(int i = 0; i < k; i++)
	{
		string name;
		int d;
		cin >> name;
		int ki = mp[name];
		int koja;
		cin >> koja;
		koja--;
		last[ki] = koja;
/*		if(root(koja) != root(init[ki]))
		{
			cout << "NO\n";
			return 0;
		}*/
		cin >> d;
		while(d--)
		{
			int x;
			cin >> x;
			x--;
			last[N + x] = koja;
			/*
			if(root(koja) != root(init[x + N]))
			{
				cout << "NO\n";
				return 0;
			}*/
		}
	}
	if(solve())
		cout << "NO\n";
	else
	{
		for(int i = 0; i < n; i++)
			swap(init[i], last[i]);
		for(int i = 0; i < m; i++)
			swap(init[N + i], last[N + i]);
		if(solve())
			cout << "NO\n";
		else
			cout << "YES\n";
	}
}
