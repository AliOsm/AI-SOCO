//~In The Name Of Allah~//
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <iomanip>
#include <math.h>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <string.h>
#include <sstream>
#include <fstream>
#include <functional>
#include <stack>
#include <utility> 
#include <set>
#include <list>
#include <queue>
#include <bitset>
#include <time.h>
#include <unordered_set>
#include <unordered_map>

using namespace std;

#define read freopen("in.txt", "r", stdin)
#define write freopen("out.txt", "w", stdout)
#define all(_) _.begin(), _.end()
#define rall(_) _.rbegin(), _.rend()
#define rep(i, j) for (int i = 0; i < j; i++)
#define Rep(i, j, k) for (int i = j; i < k; i++)
#define siz(_) (int)_.size()
#define ll long long
#define endl '\n'

const double PI = 2.0 * acos(0.0);
const int MOD = 1e9 + 7;
const int oo = MOD;

typedef pair<int, int> pii;

ll gcd(ll x, ll y) { return !y ? x : gcd(y, x%y); }

int n, m, q;
char grid[44][44];
ll dp[44][44][44][44], cnt[44][44];

ll calc(int a, int b, int x, int y) {
	return cnt[x][y] - cnt[a - 1][y] - cnt[x][b - 1] + cnt[a - 1][b - 1];
}

int main() {
	cin >> n >> m >> q;
	memset(grid, '.', sizeof grid);
	Rep(i, 1, n + 1)
		scanf("%s", grid[i] + 1);
	Rep(i, 1, n + 1) Rep(j, 1, m + 1)
		cnt[i][j] = cnt[i - 1][j] + cnt[i][j - 1] - cnt[i - 1][j - 1] + !(grid[i][j] - '0');
	Rep(i, 1, n + 1) Rep(j, 1, m + 1) {
		Rep(x, i, n + 1) Rep(y, j, m + 1) {
			dp[i][j][x][y] = dp[i][j][x - 1][y] + dp[i][j][x][y - 1] - dp[i][j][x - 1][y - 1];
			for (int a = x; a >= i; a--) for (int b = y; b >= j; b--)
				dp[i][j][x][y] += calc(a, b, x, y) == (x - a + 1)*(y - b + 1);
		}
	}
	int a, b, c, d;
	while (q-- && scanf("%d%d%d%d", &a, &b, &c, &d))
		printf("%lld\n", dp[a][b][c][d]);
	return 0;
}