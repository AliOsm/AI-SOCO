//Khodaya aghideye man ra az dast oghde am masoon dar!
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, greater<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, greater_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
#pragma optimize O3
const int MOD = (int)1e9 + 7;
const int MAXN = (int)1e6 + 7;
const int infint = (ll)1e9;
const ll inf = (ll)1e18;
pair<ll, ll> a[MAXN];
ll nxt[MAXN], cur[MAXN];
int main()
{	
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	ll n, l, k;
	cin >> n >> l >> k;
	ll dp[k + 3][n + 3], tmp[k + 3][n + 3];
	for (ll i = 0; i <= k; i++)
		for (ll j = 0; j <= n; j++)
			dp[i][j] = 0, tmp[i][j] = 0;
	for (int i = 0; i <= n; i++)
		dp[0][i] = 1;
		
				
	for (ll i = 0; i < n; i++)
	{
		cin >> a[i].first; a[i].second = i;
	}
	sort(a, a + n);
	for (ll i = 0; i < n; i++)
		cur[a[i].second] = i;
		
	for (ll i = 0; i < n; i++)
		dp[1][i] = i + 1;
	nxt[n - 1] = n - 1;
	for (ll i = n - 2; i >= 0; i--)
		if(a[i].first == a[i + 1].first)
			nxt[i] = nxt[i + 1];
		else
			nxt[i] = i;
			
	for (ll i = 2; i <= k; i++)
		for (ll j = 0; j < n; j++)
		{
			dp[i][j] = dp[i - 1][nxt[j]];
			if(j != 0)
				dp[i][j] = (dp[i][j] + dp[i][j - 1]) % MOD;
		}
	for (ll i = 1; i <= k; i++)
		for (ll j = 0; j < n; j++)
			if(j == 0)
				tmp[i][j] = dp[i][j];
			else
				tmp[i][j] = (dp[i][j] - dp[i][j - 1] + MOD) % MOD;
					
	ll ans = 0, daste = l / n + ((l % n) > 0);
	for (ll i = 1; i <= k; i++)
		for (ll j = 0; j < n; j++)
		{
			ans += tmp[i][j] * (max(0LL, daste - i + 1) % MOD) % MOD, ans %= MOD;
		}
	ll tmpo = l % n;
	if(tmpo == 0)
		return cout << ans, 0;
	for (ll i = 1; i <= k; i++)
		for (ll j = 0; j < n - tmpo; j++)
		{
			ll st = cur[n - j - 1];
			ans = (ans - dp[i - 1][nxt[st]] * (daste >= i) + MOD) % MOD;
		}
	cout << ans;
}
