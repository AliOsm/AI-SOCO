
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <cstdio>
#include <random>
#include <chrono>
#define ll long long
#define ld long double
#define pb push_back
#define eb emplace_back
#define mp make_pair
#define int long long
using namespace std;

const int INF = 2e18;
const int MOD = 1e9 + 7;


void solve() {
	int n, m;
	cin >> n >> m;
	vector<int> a(5e5 + 1);
	for (int i = 0; i < n; i++) {
		int l, r;
		cin >> l >> r;
		a[l] = max(r, a[l]);
	}

	int right = 0;
	for (int i = 0; i < a.size(); i++) {
		right = max(right, i);
		right = max(right, a[i]);
		a[i] = right;
	}

	int K = 1000;
	vector<pair<int, int>> b(a.size());
	for (int i = 0; i < a.size(); i++) {
		int now = i;
		int count = 0;
		while (a[now] != now && now / K == i / K) {
			now = a[now];
			count++;
		}

		if (now / K == i / K) b[i] = { i, 0 };
		else b[i] = { now, count };
	}

	for (int i = 0; i < m; i++) {
		int l, r;
		cin >> l >> r;
		int ans = 0;
		bool good = true;
		while (l / K < r / K) {
			if (l == b[l].first) {
				good = false;
				break;
			}
			ans += b[l].second;
			l = b[l].first;
		}

		while (l < r) {
			if (l == a[l]) {
				good = false;
				break;
			}
			ans++;
			l = a[l];
		}

		cout << (good ? ans : -1) << '\n';
	}
}

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	//freopen("trains.in", "r", stdin);
	//freopen("trains.out", "w", stdout);
	solve();
}