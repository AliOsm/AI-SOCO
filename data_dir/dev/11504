#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define fr first
#define sc second
#define pb push_back
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int> >
#define ll long long
const int INF = 1e9 + 7;
const int MAXN = 3e5 + 200;
const  long double eps = 1e-8;
const long double pi = acos(-1.0);
using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

int n, m, color[MAXN];
vector <int> g[MAXN];
deque <int> q;
bool bad(int v){
    int cnt = 0;
    for (int i = 0; i < g[v].size(); i++){
        int to = g[v][i];
        if (color[v] == color[to])
            cnt++;
    }
    return cnt > 1;
}
void solve(){
cin >> n >> m;
        for(int i = 1; i <= m; i++)
        {
                int x, y;
                cin >> x >> y;
                g[x].pb(y);
                g[y].pb(x);
        }
    for (int i = 1; i <= n; i++)
        if (bad(i)) q.push_back(i);
   while (q.size() > 0){
        int x = q.front();
        q.pop_front();
        if (!bad(x)) continue;
        color[x] = 1 - color[x];
        for (int i = 0; i < g[x].size(); i++){
            int to = g[x][i];
            if (bad(to)) q.pb(to);
        }
   }

   for (int i = 1; i <= n; i++){
     cout << color[i];
   }

}

int main() {
ios::sync_with_stdio(NULL), cin.tie(0), cout.tie(0);
cout.setf(ios::fixed), cout.precision(6);
 //freopen("input.in", "r", stdin);
// freopen("output.out", "w", stdout);
 int step;
 step = 1;
  for (int i = 1; i <= step; i++){
         solve();
    }
}
