/**/
#include <bits/stdc++.h>
using namespace std;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compile and get accepted.
 *      ____________
 *     /            \
 *    /  /\      /\  \
 *   /  /  \    /  \  \
 *   \                /
 *    \     \___/    /
 *     \____________/
 */
const long long mod = 1000000007;
vector<vector<int> > graph;
bool vis[200000];
int d[200000],l[200000];
pair<int,int> out;
void bri(int ind,int dep = 0,int par = -1){
	vis[ind] = true;
	d[ind] = l[ind] = dep;
	bool f = false;
	for(auto v : graph[ind]){
		if(!vis[v]){
			bri(v,dep+1,ind);
			if(l[v] <= d[ind]){
				out = {v,ind};
			}
			l[ind] = min(l[ind],l[v]);
		}else if(v != par || f){
			l[ind] = min(l[ind],d[v]);
		}else
			f = true;
	}
}
void dfs(int ind){
	if(vis[ind])
		return;
	vis[ind] = true;
	for(auto x : graph[ind])
		dfs(x);
}
bool dfs2(int ind,int par = -1){
	if(vis[ind])
		return false;
	vis[ind] = true;
	for(auto x : graph[ind])
		if(x == par)
			continue;
		else if(!dfs2(x,ind))
			return false;
	return true;
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	int N;
	cin>>N;
	graph.resize(N);
	vector<int> a(N);
	vector<int> s;
	for(int i = 0;i < N;i++){
		cin>>a[i];
		a[i]--;
		if(a[i] == i){
			s.push_back(i);
		}else{
			graph[a[i]].push_back(i);
			graph[i].push_back(a[i]);
		}
	}
	vector<pair<int,int> > ed;
	for(int i = 0;i < (int)s.size();i++){
		dfs(s[i]);
		ed.push_back({s[i],s[i]});
	}
	for(int i = 0;i < N;i++){
		if(vis[i])
			continue;
		out = {-1,-1};
		bri(i);
		assert(out.first != -1 && out.second != -1);
		ed.push_back(out);
	}
	int ad = 0;
	if(s.empty()){
		ad++;
		int x = ed.back().first,y = ed.back().second;
		ed.pop_back();
		if(a[x] == y){
			a[x] = x;
			s.push_back(x);
			ed.push_back({x,x});
		}else if(a[y] == x){
			a[y] = y;
			s.push_back(y);
			ed.push_back({y,y});
		}else{
			assert(false);
		}
	}
	for(int i = 0;i < ed.size();i++){
		int x = ed[i].first,y = ed[i].second;
		if(x == y && s[0] == x)
			continue;
		ad++;
		if(a[x] == y){
			a[x] = s[0];
		}else if(a[y] == x){
			a[y] = s[0];
		}else{
			assert(false);
		}
	}

	/*
	memset(vis,0,sizeof vis);
	graph.clear();
	graph.resize(N);
	int c = 0;
	for(int i = 0;i < N;i++){
		if(i == a[i])
			c++;
		else
			graph[i].push_back(a[i]),
			graph[a[i]].push_back(i);
	}
	assert(c == 1 && dfs2(0));
	for(int i = 0; i < N;i++)
		assert(vis[i]);
	*/

	cout<<ad<<'\n';
	for(int i = 0;i < N;i++)
		cout<<a[i]+1<<" \n"[i+1 == N];
	return 0;
}
/**/
