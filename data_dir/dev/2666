#include <bits/stdc++.h>
using namespace std;
//#define int long long
int in(){int32_t x ; scanf("%d",&x) ;  return x ;}
const int maxn = 300 + 10;
const int mod = 1e9 + 7;
long long cover[maxn][maxn] , dp[maxn][maxn];
int32_t main()
{
    memset(cover,63,sizeof cover);
    int n = in() , m = in() , k = in();
    for (int i = 0 ; i < m ; i ++)
    {
        int a = in() , b = in() , cost = in();
        cover[a][b] = min(cover[a][b],(long long)cost);
    }
    for (int i = 1 ; i <= n ; i ++)
    {
        for (int j = i ; j <= n ; j ++) cover[i][j] = min(cover[i][j],cover[i-1][j]);
    }
    memset(dp,63,sizeof dp);
    for (int i = 0 ; i <= n ; i ++) dp[i][0] = 0;
    for (int i = 0 ; i < n ; i ++)
    {
        for (int j = 0 ; j <= i ; j ++)
        {
            dp[i + 1][j] = min(dp[i + 1][j],dp[i][j]);
            for (int extra = 1 ; extra <= n - i ; extra ++)
            {
                dp[extra+i][j+extra] = min(dp[extra+i][j+extra],dp[i][j]+cover[i+1][extra+i]);
            }
        }
    }
    long long res = *min_element(dp[n]+k,dp[n+1]);
    cout << (res >= 1e15 ? -1 : res) << endl;
}
