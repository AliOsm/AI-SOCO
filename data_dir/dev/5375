#include<bits/stdc++.h>
using namespace std;
const int mod=1000000007;
inline int add(int a,int b)
{
	if((a+=b)>=mod)a-=mod;
	return a;
}
inline int mult(int a,int b)
{
	long long t=1ll*a*b;
	if(t>=mod)t%=mod;
	return t;
}
inline int dec(int a,int b)
{
	if((a-=b)<0)a+=mod;
	return a;
}
inline int power(int a,int b)
{
	int out=1;
	while(b)
	{
		if(b&1)out=mult(out,a);
		a=mult(a,a);
		b>>=1;
	}
	return out;
}
int n,m;
char s[2010][2010];
int rockd[2010][2010],rockr[2010][2010];
int f[2010][2010][2];
class que
{
	public:
		int dat[2010],s,e,sum,vl[2010];
		que()
		{
			s=e=0;
		}
		void push(int x,int v)
		{
			sum=add(sum,v);
			vl[e]=v;
			dat[e++]=x;
		}
		int head()
		{
			return dat[s];
		}
		void pop()
		{
			sum=dec(sum,vl[s]);
			s++;
		}
		bool empty()
		{
			return s==e;
		}
}row[2010],col[2010];
int main()
{
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++)
	{
		scanf("%s",s[i]+1);
	}
	for(int i=n;i>=1;i--)
	{
		for(int j=m;j>=1;j--)
		{
			rockr[i][j]=rockr[i][j+1]+(s[i][j]=='R');
			rockd[i][j]=rockd[i+1][j]+(s[i][j]=='R');
		}
	}
	if(n==1)
	{
		printf("%d\n",rockr[1][1]==0);
		return 0;
	}
	if(m==1)
	{
		printf("%d\n",rockd[1][1]==0);
		return 0;
	}
	f[1][1][0]=f[1][1][1]=1;
	row[1].push(1,1);
	col[1].push(1,1);
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=m;j++)
		{
			if(i+j==2)continue;
			while(!row[i].empty()&&m-rockr[i][row[i].head()+1]<j)row[i].pop();
			f[i][j][1]=row[i].sum;
			while(!col[j].empty()&&n-rockd[col[j].head()+1][j]<i)col[j].pop();
			f[i][j][0]=col[j].sum;
			row[i].push(j,f[i][j][0]);
			col[j].push(i,f[i][j][1]);
		}
	}
	printf("%d\n",add(f[n][m][0],f[n][m][1]));
	return 0;
}