#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#define pii pair<int, int>
#define pb push_back
#define mp make_pair
#define mt make_tuple
#define DEBUG 0
#define cerr if (DEBUG) cerr
#define fprintf if (DEBUG) fprintf
#define local freopen("in.txt", r, stdin);
#define test cerr << "hi\n";
#define tr(x) cerr << #x << ' ' << x << '\n';
#define fi first
#define se second
#define HH1 402653289
#define HH2 1610612741
#define INF 0x3f3f3f3f
#define tii tuple<int, int, int>
#define npos string::npos
#define ll long long
 
using namespace std;
 
#define MOD 1000000007LL
#define MAXN 200005
 
long long cost[MAXN], a[MAXN], p[MAXN], pos[MAXN];
int n;
 
long long T[MAXN << 2], D[MAXN << 2];
 
void maintain(int id) {
	T[id] = min(T[id << 1], T[id << 1 | 1]);
}
 
void apply(int id, long long val) {
	T[id] += val;
	D[id] += val;
}
 
void push(int id) {
	apply(id << 1, D[id]);
	apply(id << 1 | 1, D[id]);
	D[id] = 0;
}
 
void upd(int x, int y, long long v, int id = 1, int l = 0, int r = n) {
	if (y <= l || r <= x) return;
	if (x <= l && r <= y) {
	    apply(id, v);
		return;
	}
	push(id);
	
	upd(x, y, v, id << 1, l, l + r >> 1);
	upd(x, y, v, id << 1 | 1, l + r >> 1, r);
	
	maintain(id);
}
 
int main(){
	ios_base::sync_with_stdio(0); cin.tie(0);
 
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> p[i];
		pos[p[i]] = i;
	}
	for (int i = 0; i < n; i++) cin >> a[i];
	
	upd(n-1, n, 1e18);
	
	for (int i = 1; i <= n; i++) {
		if (i == 1) {
			cerr << "upd " << 0 << ' ' << pos[i] << ' ' << a[pos[i]] << '\n';
			upd(0, pos[i], a[pos[i]]);
		}
		else {
			cerr << "upd " << pos[i] << ' ' << n << ' ' << a[pos[i]] << '\n';
			upd(pos[i], n, a[pos[i]]);
		}
	}
	
	cerr << "root " << T[1] << '\n';
	
	long long ans = min({T[1], a[0], a[n-1]});
	for (int i = 2; i <= n-1; i++) {
		cerr << "upd " << pos[i] << ' ' << n << ' ' << -a[pos[i]] << '\n';
		upd(pos[i], n, -a[pos[i]]);
		cerr << "upd " << 0 << ' ' << pos[i] << ' ' << a[pos[i]] << '\n';
		upd(0, pos[i], a[pos[i]]);
		ans = min(ans, T[1]);
	}
	
	cout << ans << '\n';
}