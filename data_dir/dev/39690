
//#include "stdc++.h"
#include<bits/stdc++.h>
#include<iostream>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
using namespace std;
//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//typedef tuple<int, int, int> t3;
typedef long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <ll, int> pli;
typedef pair <db, db> pdd;
typedef vector<int> vi;
#define m1 make_pair
#define pb push_back
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0) return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p; }
#define flush fflush(stdout)
const ll MOD = 1000000007;
const int INF = 0x3f3f3f3f;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;
int tin[501];
int Time=0;
map<int,int>mp;
map<int,int>::iterator it;int u1,v1;
map<int,int>::iterator it1;multiset<pair<int,int> >st;
bool already=0,cycle=0;int color[501];
void dfs(vector<int> adj[],int u,bool visited[])
{
    if(already)
        return;
    visited[u]=1;
    tin[u]=(++Time);
    mp.insert(m1(tin[u],u));int v;
    for(int i=0;i<adj[u].size();i++)
    {
        if(already)
            return;
        v=adj[u][i];
        if(!visited[v])
        {
            dfs(adj,v,visited);
        }
        else
        {
            it=mp.find(tin[v]);
            if(it!=mp.end())
            {
               // cout<<u<<" "<<v<<endl;
                it1=it;already=1;
                //cout<<it->second<<endl;
                while(it1!=mp.end())
                {
                    u1=it1->second;
                    //cout<<u1<<endl;
                    it1++;
                    if(it1!=mp.end())
                    {
                        v1=it1->second;
                       // cout<<u1<<" "<<v1<<endl;
                        st.insert(m1(u1,v1));
                    }
                }
               // cout<<"OK"<<endl;
                st.insert(m1(u,v));
                //cout<<u<<" "<<v<<endl;
                return;
            }
        }
    }
    mp.erase(mp.find(tin[u]));
}
void dfs1(vector<int> adj[],int u,bool visited[],int u1,int v1)
{
   // if(cycle)
    //    return;
    visited[u]=1;
    color[u]=1;int v;
    for(int i=0;i<adj[u].size();i++)
    {
        v=adj[u][i];
        if(u!=u1||v!=v1)
        {
            if(!visited[v])
            {
                dfs1(adj,v,visited,u1,v1);
            }
            else
            {
                if(color[v]==1)
                    cycle=1;
            }
        }
    }
    color[u]=2;
}
int main()
{
    IOS;//ifstream fin("input.txt");ofstream fout("output.txt");/*
    int n,m;
    cin>>n>>m;
    vector<int> adj[n+1];int u,v;
    for(int i=0;i<m;i++)
    {
        cin>>u>>v;
        adj[u].pb(v);
    }
    bool visited[n+1];
    memset(visited,0,sizeof(visited));
    for(int i=1;i<=n;i++)
    {
        if(!already&&(!visited[i]))
        {
            dfs(adj,i,visited);
            //cout<<"OK"<<endl;
        }
    }
    if(already==0)
    {
        cout<<"YES"<<endl;
        return 0;
    }
    multiset<pair<int,int> >::iterator it2;
    it2=st.begin();pair<int,int>pr;
    
    while(!mp.empty())
        mp.erase(mp.begin());
    while(!st.empty())
    {
        pr=(*st.begin());
        u=pr.first;
        v=pr.second;//Time=0;
        //cout<<u<<" "<<v<<endl;
        st.erase(st.begin());memset(visited,0,sizeof(visited));cycle=0;
        memset(color,0,sizeof(color));
      //  memset(tin,0,sizeof(tin));
        for(int i=1;i<=n;i++)
        {
          if(!visited[i]&&(!cycle))
          {
              dfs1(adj,i,visited,u,v);
          }
        }
        if(!cycle)
        {
            cout<<"YES"<<endl;
            return 0;
        }
    }
    cout<<"NO"<<endl;
    
    return 0;
}

