#ifndef _GLIBCXX_NO_ASSERT
#include <cassert>
#endif
#include <cctype>
#include <cerrno>
#include <cfloat>
#include <ciso646>
#include <climits>
#include <clocale>
#include <cmath>
#include <csetjmp>
#include <csignal>
#include <cstdarg>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

#if __cplusplus >= 201103L
#include <ccomplex>
#include <cfenv>
#include <cinttypes>
#include <cstdbool>
#include <cstdint>
#include <ctgmath>
#include <cwchar>
#include <cwctype>
#endif

// C++
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>

#if __cplusplus >= 201103L
#include <array>
#include <atomic>
#include <chrono>
#include <condition_variable>
#include <forward_list>
#include <future>
#include <initializer_list>
#include <mutex>
#include <random>
#include <ratio>
#include <regex>
#include <scoped_allocator>
#include <system_error>
#include <thread>
#include <tuple>
#include <typeindex>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
#endif

#define ll          long long
#define pb          push_back
#define mp          make_pair
#define pii         pair<int,int>
#define vi          vector<int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define endl        '\n'
#define rep(i,a,b)  for(int i=a;i<b;i++)
using namespace std;

string to_string(string s) {
	return '"' + s + '"';
}

string to_string(const char* s) {
	return to_string((string) s);
}

string to_string(bool b) {
	return (b ? "true" : "false");
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
	return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A>
string to_string(A v) {
	bool first = true;
	string res = "{";
	for (const auto &x : v) {
		if (!first) {
			res += ", ";
		}
		first = false;
		res += to_string(x);
	}
	res += "}";
	return res;
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
	cerr << " " << to_string(H);
	debug_out(T...);
}

template <typename A, typename B>
istream& operator>>(istream& input,pair<A,B>& x){
	input>>x.F>>x.S;
	return input;
}

template <typename A>
istream& operator>>(istream& input,vector<A>& x){
	for(auto& i:x)
		input>>i;
	return input;
}


#ifdef PRINTERS
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif
pair<int,ll> bit[200005];
int n;
void update(int i,int v){
	// debug("u",i,v);
	for(;i<=n;i+=i&-i)
		bit[i].F++,bit[i].S+=v;
}
pair<int,ll> query(int i){
	pair<int,ll> s={0,0};
	// debug("q",i);
	for(;i;i-=i&-i)
		s.F+=bit[i].F,s.S+=bit[i].S;
	// debug(s);
	return s;
}
int upper_bound(int p){           // returns max index i such that query(i)<=p
    int idx=0;
    for(int i=1<<18;i;i>>=1){     // set initial i as highest power of 2 less than 100000
        if(i+idx>n)continue;
        if(bit[i+idx].F<=p){
            p-=bit[i+idx].F;
            idx+=i;
        }
    }
    return idx;
}
pii A[200005];
void solve(){
	int m,i,j,low,mid,high,maxi=0,maxd=1;
	ll t;
	cin>>n>>m>>t;
	for(i=1;i<=n;i++)
		bit[i]={0,0};
	for(i=0;i<n;i++){
		cin>>A[i].F;
		A[i].S=i+1;
	}
	sort(A,A+n);
	for(i=0;i<n;){
		for(j=i;j<n and A[j].F==A[i].F;j++);
		for(;i<j;i++)
			update(A[i].S,A[i].F);
		low=1,high=n;
		while(low<=high){
			mid=(low+high)>>1;
			pair<int,ll> ret=query(mid);
			// if(A[i].F==6)
				// cerr<<mid<<" "<<ret.S<<endl;
			int parts;
			if(ret.F%m==0)
				parts=ret.F/m-1;
			else
				parts=ret.F/m;
			if(parts)
				ret.S+=query(upper_bound(parts*m)).S;
			// if(A[i].F==6)
				// cerr<<mid<<" "<<ret.S<<endl;
			if(ret.S<=t){
				if(ret.F>maxi){
					maxi=ret.F;
					maxd=A[i-1].F;
				}
				low=mid+1;
			}
			else
				high=mid-1;
		}
	}
	cout<<maxi<<" "<<maxd<<endl;
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int t=1;
	cin>>t;
	while(t--){
		solve();
	}
	return 0;
}