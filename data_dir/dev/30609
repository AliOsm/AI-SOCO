/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const ld PI = 3.14159265358979323846;

#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
vector<vi> adj;
const int N = 1e5+5;
int dp[N];
class CCutEmAll {
public:
	int res, n;
	void dfs(int u, int parent){
		dp[u] = 1;
		for(int v: adj[u]){
			if(v == parent) continue;
			dfs(v, u);
			dp[u] += dp[v];
		}
	}
	void dfs1(int u, int parent){
		for(int v: adj[u]){
			if(v == parent) continue;
			dfs1(v, u);
			if(dp[v]%2==0 and (n-dp[v])%2==0){
				++res;
				n -= dp[v];
			}
		}
	}
	void solve(std::istream& in, std::ostream& out) {
		in>>n;
		adj = vector<vi>(n+1);
		f(i, n-1){
			int u, v; in>>u>>v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		memset(dp, 0, sizeof(dp));
		res = 0;
		dfs(1, -1);
		dfs1(1, -1);
		if(res == 0 and dp[1]&1) res = -1;
		out<<res;
	}
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	CCutEmAll solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
