/*
ID: hepic
PROG: sabotage
LANG: C++11
*/
#include <bits/stdc++.h>

#define FOR(i, a, b) for(auto i=a; i<=b; ++i)
#define REP(i, a, b) for(auto i=a; i<b; ++i)
#define FORI(i, a, b) for(auto i=a; i!=b+1-2*(a>b); i+=1-2*(a>b))
#define REPI(i, a, b) for(auto i=a-(a>b); i!=b-(a>b); i+=1-2*(a>b))
#define ALL(v) v.begin(),v.end()
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define pf(a) push_front(a)
#define eb(a, b) emplace_back(a, b)
#define fir first
#define sec second
#define what_is(x) cout<<#x<<" is "<<x<<endl;
#define type(x) typeid(x).name()
#define ms(arr, val) memset(arr, val, sizeof(arr))
#define min3(a,b,c) min(min(a,b),c)
#define max3(a,b,c) max(max(a,b),c)
#define SIZE 1000010
#define MAXN 99999999
#define NUM 20
#define PI acos(-1)
#define open_read1 freopen("C:\\Users\\Hepic\\Desktop\\a.txt", "r", stdin)
#define open_write1 freopen("C:\\Users\\Hepic\\Desktop\\b.txt", "w", stdout)
#define open_read freopen("painting.in", "r", stdin)
#define open_write freopen("painting.out", "w", stdout)

using namespace std;

typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair<double, double> PDD;
typedef pair<int, int> PII;
typedef pair<int, PII> PIPII;
typedef pair<PII, PII> PPIIPII;
typedef pair<LL, LL> PLL;
typedef pair<ULL, ULL> PUU;
typedef pair<LL, PLL> PLPLL;
typedef pair<PLL, PLL> PPLLPLL;


template<typename T, typename T1>
ostream& operator << (ostream &out, pair<T, T1> obj)
{
    out<<"("<<obj.first<<","<<obj.second<<")";
    return out;
}


template<typename T, typename T1>
ostream& operator << (ostream &out, map<T, T1> cont)
{
    typename map<T, T1>::const_iterator itr = cont.begin();
    typename map<T, T1>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, set<T> cont)
{
    typename set<T>::const_iterator itr = cont.begin();
    typename set<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, multiset<T> cont)
{
    typename multiset<T>::const_iterator itr = cont.begin();
    typename multiset<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, template<typename ELEM, typename ALLOC=allocator<ELEM>> class CONT>
ostream& operator << (ostream &out, CONT<T> cont)
{
    typename CONT<T>::const_iterator itr = cont.begin();
    typename CONT<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, unsigned int N, typename CTy, typename CTr>
typename enable_if<!is_same<T, char>::value, basic_ostream<CTy, CTr> &>::type
operator << (basic_ostream<CTy, CTr> &out, const T (&arr)[N])
{
     REP(i, 0, N)
        out<<arr[i]<<" ";
    out<<endl;

    return out;
}


template<typename T>
T gcd(T a, T b)
{
    T min_v = min(a, b);
    T max_v = max(a, b);

    while(min_v)
    {
        T temp = max_v % min_v;
        max_v = min_v;
        min_v = temp;
    }

    return max_v;
}


template<typename T>
T lcm(T a, T b)
{
    return (a*b) / gcd(a, b);
}


template<typename T>
T fast_exp_pow(T base, T exp, T mod)
{
    LL res = 1;

    while(exp)
    {
        if(exp&1)
        {
            res *= base;
            res %= mod;
        }

        exp >>= 1;
        base *= base;
        base %= mod;
    }

    return res;
}

/*#################################################################################################################
#################################################################################################################
#################################################################################################################
#################################################################################################################*/

int N, inp;
int counts[1000010];
set<int> numbers;
vector<int> result, keep_1, keep_2;


bool is_prime(int value)
{
    if(value == 2)
        return true;

    if(value%2 == 0)
        return false;

    for(int i=3; i*i<=value; i+=2)
        if(value%i == 0)
            return false;

    return true;
}



int main()
{
    scanf("%d", &N);

    REP(i, 0, N)
    {
        scanf("%d", &inp);
        ++counts[inp];
        numbers.insert(inp);
    }


    if(numbers.size() == 1)
    {
        int num = *numbers.begin();
        result.pb(num);

        if(is_prime(num + num))
            FOR(i, 1, counts[num]-1)
                result.pb(num);

        printf("%d\n", result.size());
        cout<<result<<endl;

        return 0;
    }


    for(auto itr=numbers.begin(); itr!=numbers.end(); ++itr)
    {
        auto itr_1=itr;
        ++itr_1;

        for(; itr_1!=numbers.end(); ++itr_1)
        {
            keep_1.clear();
            keep_2.clear();

            if(is_prime(*itr + *itr))
            {
                FOR(i, 1, counts[*itr])
                    keep_1.pb(*itr);
            }
            else
                keep_1.pb(*itr);

            if(is_prime(*itr_1 + *itr_1))
            {
                FOR(i, 1, counts[*itr_1])
                    keep_2.pb(*itr_1);
            }
            else
                keep_2.pb(*itr_1);


            if(is_prime(*itr + *itr_1)  &&  keep_1.size() + keep_2.size() > result.size())
            {
                result.clear();
                result.insert(result.end(), ALL(keep_1));
                result.insert(result.end(), ALL(keep_2));
            }

            else if(max(keep_1.size(), keep_2.size()) > result.size())
            {
                result.clear();

                if(keep_1.size() > keep_2.size())
                    result.insert(result.end(), ALL(keep_1));
                else
                    result.insert(result.end(), ALL(keep_2));
            }
        }
    }


    printf("%d\n", result.size());
    cout<<result<<endl;

    return 0;
}
