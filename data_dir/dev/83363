#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define eb emplace_back
#define ll long long
#define pii pair < int, int >
#define fr first
#define sc second
#define mk make_pair
#define sz(s) (int)s.size()
#define all(s) s.begin(), s.end()
#define ok puts("ok");
#define whatis(x) cerr << #x << " = " << x << endl;
#define pause system("pause");

const int N = (int)3e5 + 7;
const int inf = (int)1e9 + 7;

vector < ll > vec[3];

ll get(int id, int l, int r) {
  int idl = lower_bound(all(vec[id]), l) - vec[id].begin();
  int idr = lower_bound(all(vec[id]), r) - vec[id].begin();
  ll mx = 0;
  for (int i = idl; i < idr; i++) {
    mx = max(mx, vec[id][i + 1] - vec[id][i]);
  }
  return mx;
}

main() {
  int n;
  scanf("%d", &n);
  for (int i = 1; i <= n; i++) {
    int x, tp;
    char c;
    scanf("%d %c", &x, &c);
    tp = ((c == 'R') ? 0 : (c == 'P') ? 1 : 2);
    vec[tp].pb(x);
    if (tp == 1) {
      vec[0].pb(x);
      vec[2].pb(x);
    }
  }
  ll ans = 0;
  if (!vec[0].empty()) {
    ans += (vec[0].back() - vec[0][0]);
  }
  if (!vec[2].empty()) {
    ans += (vec[2].back() - vec[2][0]);
  }
  for (int i = 1; i < sz(vec[1]); i++) {
    int l = vec[1][i - 1], r = vec[1][i];
    ll sub = get(0, l, r) + get(2, l, r);
    ans -= max(0LL, sub - r + l);
  }
  cout << ans;
}

