#include <bits/stdc++.h>
using namespace std;
using ll = long long;

constexpr int N = 5001;
vector<int> g[N];

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(nullptr);
  cout.tie(nullptr);
  int n, m;
  cin >> n >> m;
  vector<int> from(n), to(n);
  for(int i = 0; i < n; ++i) {
    cin >> from[i];
  }
  for(int i = 0; i < n; ++i) {
    cin >> to[i];
    --to[i];
  }

  int q;
  cin >> q;
  vector<int> queries(q);
  for(int i = 0; i < q; ++i) {
    cin >> queries[i];
    --queries[i];
  }

  vector<int> mt(m, -1), rmt(N, -1);
  vector<bool> used(N, false);
  for(int i = 0; i < q; ++i) {
    used[queries[i]] = true;
  }

  for(int i = 0; i < n; ++i) {
    if (used[i]) {
      continue;
    }
    g[from[i]].emplace_back(to[i]);
  }

  function<bool(const int)> dfs = [&](const int v) {
    if (used[v]) {
      return false;
    } 
    used[v] = true;
    for(int i : g[v]) {
      if (mt[i] == -1 || dfs(mt[i])) {
        mt[i] = v;
        rmt[v] = i;
        return true;
      }
    }
    return false;
  };

  int blocker = -1;
  for(int i = 0; i < N; ++i) {
    fill(used.begin(), used.end(), false);
    dfs(i);
    if (rmt[i] == -1) {
      blocker = i;
      break;
    }
  }

  vector<int> ret(q);
  ret[0] = blocker;
  for(int i = q - 1; i > 0; --i) {
    int id = queries[i];
    g[from[id]].emplace_back(to[id]);
    for(int j = blocker; j < N; ++j) {
      fill(used.begin(), used.end(), false);
      dfs(j);
      if (rmt[j] == -1) {
        blocker = j;
        break;
      }
    }
    ret[q - i] = blocker;
  }

  reverse(ret.begin(), ret.end());
  for(auto i : ret) {
    cout << i << endl;
  }

  return 0;
}
