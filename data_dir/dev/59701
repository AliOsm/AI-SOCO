#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair

#define all(x) (x).begin(), (x).end()

#define fi first
#define se second

typedef long long ll;

using namespace std;

int force[1000005];

ll fenw[1000005];

int arr[1000005];

ll ans;

int n;

void compress() {
    vector <int> vv(n);

    for (int i = 1; i <= n; ++i) {
        vv[i - 1] = arr[i];
    }

    sort(all(vv));
    vv.resize(unique(all(vv)) - vv.begin());

    for (int i = 1; i <= n; ++i) {
        arr[i] = upper_bound(all(vv), arr[i]) - vv.begin();
    }
}

int f(int x) {
    return x & -x;
}

void upd(int ps, int x) {
    for (; ps <= n; ps += f(ps)) {
        fenw[ps] += x;
    }
}

ll prefSum(int ps) {
    ll ret = 0;

    for (; ps > 0; ps -= f(ps)) {
        ret += fenw[ps];
    }

    return ret;
}

void solve() {
    scanf("%d", &n);

    for (int i = 1; i <= n; ++i) {
        scanf("%d", &arr[i]);
    }

    reverse(arr + 1, arr + n + 1);
    compress();

    for (int i = 1; i <= n; ++i) {
        fenw[i] = 0;
    }

    for (int i = 1; i <= n; ++i) {
        force[i] = prefSum(arr[i] - 1);
        upd(arr[i], 1);
    }

    for (int i = 1; i <= n; ++i) {
        fenw[i] = 0;
    }

    for (int i = 1; i <= n; ++i) {
        ans += prefSum(arr[i] - 1);
        upd(arr[i], force[i]);
    }

    printf("%lld\n", ans);
}

int main() {
    #ifdef BThero
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif

    int tt = 1;

    while (tt--) {
        solve();
    }

    return 0;
}