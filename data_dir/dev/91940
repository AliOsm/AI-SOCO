#include<iostream>
#include<cstring>
#include<algorithm>
#include<vector>
#include<queue>
#include<cstring>
#include<cmath>
#include<map>
using namespace std ;
using namespace std ;
#define ll long long 
#define all(x) x.begin() , x.end()
#define pb push_back
const int oo = 1e9 ;
const int N = 55;
int n , m  , dx[] = {1, 0,-1,0} , dy[] = {0,1,0,-1}; 
char arr[N][N];
bool vis[N][N];
bool can ; 
bool valid(int nx , int ny)
{
  if(nx < 0 || nx >= n || ny < 0 || ny >= m)
    return false ; 
  return true ; 
}
void dfs(int x , int y , int prv1 , int prv2 , char u)
{
    vis[x][y] = true ;
    for(int i = 0; i < 4 ; ++i)
    {
      int nx = x+dx[i] , ny = y + dy[i];
      if(arr[nx][ny] != arr[x][y] || (nx == prv1 && ny == prv2) || !valid(nx , ny)) continue ; 
      else if(vis[nx][ny])
      {  
        cout << "Yes\n";
        exit(0);
      }
            dfs(nx , ny , x , y , u);
    }
}
int main(){
// freopen("input.txt"  , "r" , stdin);
  scanf("%d%d",&n,&m);
  for(int i = 0 ; i < n ; ++i)
    for(int j = 0 ; j < m ; ++j)
      cin >> arr[i][j] ; 
  for(int i = 0 ; i < n ; ++i)
    for(int j = 0 ; j<m ; ++j)
    {
      if(!vis[i][j])
        dfs(i,j,-1,-1,arr[i][j]);
    }
    puts("No");  
}