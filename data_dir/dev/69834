#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ld = long double;
#define ff first
#define ss second
const char nl = '\n';
/* -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- */
#include <bits/extc++.h>
namespace pbds =  __gnu_pbds;
template <typename key, typename val=pbds::null_type, typename comp=less<key> >
using ostree = pbds::tree<key, val, comp, pbds::rb_tree_tag,
      pbds::tree_order_statistics_node_update>;
using vi = vector< int >; using vll = vector< ll >;
#define allOf(x) std::begin(x), std::end(x)
    template <typename...Args>
ostream&operator<<(ostream&os, pair<Args...> const &p)
{return os<<'('<<p.first<<", "<<p.second<<')';}
    template <typename...Args>
ostream&operator<<(ostream&os, vector<Args...> const &v)
{os<<'[';for(const auto&el:v)os<<' '<<el;return(os<<" ]");}
template <typename...Args> ostream&operator<<(ostream&os, map<Args...>const&v)
{os<<'[';for(auto const&el:v)os<<' '<<el;return(os<<" ]");}
template <typename...Args> ostream&operator<<(ostream&os, set<Args...>const&v)
{os<<'[';for(auto const&el:v)os<<' '<<el;return(os<<" ]");}
    template <typename...Args>
ostream&operator<<(ostream&os, unordered_map<Args...>const&v)
{os<<'[';for(auto const&el:v)os<<' '<<el;return(os<<" ]");}
template<typename T> void trace_rec(stringstream&sst, const T&t)
{ string arg; getline(sst, arg, ','); cerr << arg << " : " << t << " }"; }
    template<typename T, typename... Args>
void trace_rec(stringstream&sst, const T&t, const Args... args)
{ string arg; getline(sst, arg, ','); cerr << arg << " : " << t << ", ";
    trace_rec(sst, args...); }
template<typename... Args> void trace(const string&s, Args... args)
{stringstream sst(s); cerr << "{ "; trace_rec(sst, args...); cerr << endl;}
#define dbg(...) trace(#__VA_ARGS__, __VA_ARGS__)
template <typename T> void dbr(const T lb, const T ub)
{cerr<<'{';for(auto it=lb; it!=ub; it++)cerr<<' '<<(*it);cerr<<" }"<<endl;}
    template<typename T, typename Comp=less<T> >
bool setMin(T &mem, const T&v, Comp comp = Comp())
{ return comp(v, mem) ? mem = v, true : false; }
    template<typename T, typename Comp=less<T> >
bool setMax(T &mem, const T&v, Comp comp = Comp())
{ return comp(mem, v) ? mem = v, true : false; }
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
/* -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- */

const int N = 5010;
int n, x, k, a[N];

const ll INF = (ll)1e18;
ll dp[N][N];

int main() {
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

    cin >> n >> k >> x;
    setMin(k, n);
    for(int i=1; i<=n; i++) cin >> a[i];
    a[n+1] = 0;

    for(int i=0; i<=n; i++) dp[0][i] = (i<k ? 0 : -INF);
    for(int j=1; j<=x; j++) {
        deque< pair<ll,int> > dq;
        // set<pair<ll,int>> dq;
        dp[j][0] = 0;
        auto __push=[&](const ll&xx, const int &yy) {
            while(not dq.empty() and dq.back().ff < xx) dq.pop_back();
            dq.emplace_back(xx, yy);
            // dq.emplace(dp[j-1][yy] + a[yy+1], yy);
        };
        auto __pop =[&](const int&pos) {
            while(not dq.empty() and dq.front().ss <= pos) dq.pop_front();
            // dq.erase({dp[j-1][pos]+a[pos+1], pos});
        };
        auto __get =[&]() {
            return dq.front().ff;
            // return dq.rbegin()->ff;
        };
        __push(dp[j-1][0]+a[1], 0);
        for(int i=1; i<=n; i++) {
            dp[j][i] = __get();
            auto value = dp[j-1][i] + a[i+1]; __push(value, i);
            __pop(i-k);
        }
    }
    auto ans = dp[x][n];
    if(ans<0)ans=-1;
    cout << ans << endl;
}

/* -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- */
