#include<bits/stdc++.h>
#define x first
#define y second
typedef long long ll;
using namespace std;

const int N = 1e5 + 10 , INF = 1e9;
int n , seg[4 * N] , g[4 * N], t[N] , dp[N] , ans[N];
pair<pair<int,int> , int > A[N];
map<int,int> mpx; set<int> s;

void build(int id,int s,int e){
    if(e - s < 2){
        seg[id] = s;
        return ;
    }
    int mid = (s + e)/2;
    build(2*id , s, mid);
    build(2*id + 1 , mid ,e);
    if(t[seg[2*id]] <= t[seg[2 * id + 1]])seg[id] = seg[2 * id + 1];
    else seg[id] = seg[2 * id];
    return ;
}

int get(int id , int L,int R,int s,int e){
    if(L<=s && e<=R)return seg[id];
    if(L>=e || s>=R)return n;
    int mid = (s + e)/2;
    int f1 = get(2 * id , L , R, s , mid);
    int f2 = get(2 * id + 1 ,L , R , mid ,e);
    if(t[f1] >= t[f2])return f1;
    return f2;
}



int main(){
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>A[i].x.x>>A[i].x.y;
        A[i].y = i;
    }
    t[n] = - 2 * INF;
    sort(A , A + n);
    for(int i=0;i<n;i++){
        t[i] = A[i].x.x + A[i].x.y  - 1;
        mpx[A[i].x.x] = i;
    }
    build(1 , 0 , n);

    dp[n-1] = 1;
    ans[A[n-1].y] = 1;

    s.insert(A[n-1].x.x);
    s.insert(2 * INF);

    for(int i = n-2 ; i>=0 ;i--){
        int maxi = *(s.upper_bound(t[i]));
        s.insert(A[i].x.x);
        if(maxi == 2*INF){
            dp[i]+=n - i;
            ans[A[i].y] = dp[i];
            continue;
        }
        int ind = mpx[maxi];

        dp[i] += ind - i;

        ans[A[i].y] = dp[i];

        int h = get(1 , i , ind , 0 , n);
        if(t[h] <= t[i])continue;

        dp[i] = dp[i] - (ind - h) + dp[h];

        ans[A[i].y] = dp[i];

    }
   for(int i=0;i<n;i++)cout<<ans[i]<<" "; cout<<'\n';
}
