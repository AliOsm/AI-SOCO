#include<bits/stdc++.h>
#define P(x,y) make_pair(x,y)
using namespace std;
const int MXL = 19 , MX = (1<<19);
class T1{
    public:
    int par[MXL][MX];
    int dp[MXL][MX] , depth[MX];
    int W[MX];
    int n;
    T1(){
        n = 1;
        memset(par , 0 , sizeof(par));
        memset(dp , 0 , sizeof(dp));
        W[1] = 0;
        depth[1] = 1;
    }
    int add(int p , int weight){
        ++n;
        W[n] = weight;
        par[0][n] = p;
        dp[0][n] = W[n];
        depth[n] = depth[p] + 1;
        for(int j = 1 ; j < MXL ; j++){
            par[j][n] = par[j-1][par[j-1][n]];
            dp[j][n] = max(dp[j-1][n] , dp[j-1][par[j-1][n]]);
        }

        int ret = p;
        if(W[p] >= W[n]) return ret;
        for(int j = MXL - 1 ; j >= 0 ; j--){
            if( (1<<j) > depth[ret] ) continue;

            if(dp[j][ret] < W[n])
                ret = par[j][ret];

        }
        return ret;
    }
}tree1;
long long inf = 100000000000000000ll;
class T2{
    public:
    int par[MXL][MX] , depth[MX];
    long long dp[MXL][MX];
    int W[MX];
    int n;
    T2(){
        n = 1;
        memset(par , 0 , sizeof(par));
        memset(dp , 0 , sizeof(dp));
        W[1] = 0;
        depth[1] = 1;
    }
    int add(int p , int weight){
        ++n;
        //cout<<"$"<<n<<endl;
        W[n] = weight;
        par[0][n] = p;
        dp[0][n] = W[n];
        depth[n] = depth[p] + 1;
        for(int j = 1 ; j < MXL ; j++){
            par[j][n] = par[j-1][par[j-1][n]];
            dp[j][n] = dp[j-1][n] + dp[j-1][par[j-1][n]];
            dp[j][n] = min(dp[j][n] , inf);
            //if(par[j][n] != 0) cout<<j<<' '<<n<<' '<<par[j][n]<<endl;
        }
    }
    int get(int node , long long X){
        int ret = 0;
        if(W[node] > X) return 0;

        for(int j = MXL - 1 ; j >= 0 ; j--){
            if( (1<<j) > depth[node] ) continue;
          //  cout<<j<<' '<<depth[node]<<' '<<dp[j][node]<<endl;
            //cout<<"!"<<j<<' '<<node<<' '<<dp[j][node]<<endl;
            if(dp[j][node] <= X){
                X -= dp[j][node];
                ret += (1<<j);
                node = par[j][node];
            }
        }
        return ret;
    }

}tree2;
long long last , p ,q  , cmd , QN;
int main(){
    scanf("%lld",&QN);
    while(QN--){
        scanf("%lld %lld %lld",&cmd,&p,&q);
        long long ans = 0;
        p ^= last;
        q ^= last;
        //cout<<"#"<<cmd<<' '<<p<<' '<<q<<endl;
        if(cmd == 1){
            int zxcv = tree1.add(p , q);
            //cout<<"@@"<<zxcv<<endl;
            tree2.add(zxcv , q);
        }
        else{
            ans = tree2.get(p , q);
            last = ans;
            printf("%lld\n",ans);
        }
    }
}
