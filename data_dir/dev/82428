#include <bits/stdc++.h>
using namespace std;

const int INF = 0x3f3f3f3f;
using vi = vector<int>;
using vvi = vector<vi>;
using pii = pair<int, int>;
using vpii = vector<pii>;

int solve() {
    int n; cin >> n;
    vi a(n); for (int &x : a) cin >> x;
    int m; cin >> m;
    vpii ps(m);
    for (auto &[p, s] : ps) cin >> p >> s;
    vi canDef(n + 1);
    for (auto [p, s] : ps) canDef[s] = max(canDef[s], p);
    for (int i = n - 1; i >= 0; i--) canDef[i] = max(canDef[i + 1], canDef[i]);
    vi dp(n, INF);
    int j = -1;
    multiset<int> ms;
    for (int i = 0; i < n; i++) {
        ms.insert(a[i]);
        auto ok = [&] {
            int mx = *ms.rbegin();
            return canDef[ms.size()] >= mx;
        };
        while (j < i && !ok()) ms.erase(ms.find(a[j + 1])), j++;
        if (j < i) {
            dp[i] = 1;
            if (j >= 0) dp[i] += dp[j];
        }
    }
    cout << (dp[n - 1] >= INF ? -1 : dp[n - 1]) << endl;
    return 0;
}

int main() {
    ios::sync_with_stdio(false);
    int t; cin >> t; while (t--) 
    solve();
    return 0;
}