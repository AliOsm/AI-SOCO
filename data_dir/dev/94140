#include <bits/stdc++.h>
#include<string.h>
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define Max(x,y,z) max(x,max(y,z))
#define Min(x,y,z) min(x,min(y,z))
#define fr(i,s,e) for(i=s;i<e;i++)
#define rf(i,s,e) for(i=s-1;i>=e;i--)
#define pb push_back
#define eb emblace_back
#define mp make_pair
#define ff first
#define ss second
#define int   long long
#define ll   long long
#define trace1(x)                cerr<<#x<<": "<<x<<endl
#define trace2(x, y)             cerr<<#x<<": "<<x<<" | "<<#y<<": "<<y<<endl
#define trace3(x, y, z)          cerr<<#x<<":" <<x<<" | "<<#y<<": "<<y<<" | "<<#z<<": "<<z<<endl
#define trace4(a, b, c, d)       cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl
#define trace5(a, b, c, d, e)    cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<endl
#define trace6(a, b, c, d, e, f) cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<" | "<<#f<<": "<<f<<endl
#define vl vector<long long>
#define inf (1LL<<61)
#define vi vector<int> 
#define vii vector< vector<int> >
#define vll vector< vector<long long> >
#define vpi vector< pair<int,int> >   
#define vpl vector< pair<ll,ll> >   
#define viii vector< vector<vector<int> > >
typedef pair<pair<int, int>,int> P;
#define cd complex<double>
#define PI 4*atan(1)
#define mod %1000000007
#define pi 3.14159265358979323846//20 decimals
#define ld long double

struct Rect{
    int x1,x2,y1,y2;
};
int32_t main()
{
    IOS;
    #ifndef ONLINE_JUDGE
    freopen("int.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    #endif
    int n;
    cin>>n;
    struct Rect v[n];
    multiset<int> left,bottom,top,right;
    for(int i=0;i<n;i++)
    {
        cin>>v[i].x1>>v[i].y1>>v[i].x2>>v[i].y2;
        left.insert(v[i].x1);
        bottom.insert(v[i].y1);
        right.insert(v[i].x2);
        top.insert(v[i].y2);
    }
    for(int i=0;i<n;i++)
    {
        left.erase(left.find(v[i].x1));
        bottom.erase(bottom.find(v[i].y1));
        right.erase(right.find(v[i].x2));
        top.erase(top.find(v[i].y2));

        int x1=*left.rbegin();
        int y1=*bottom.rbegin();
        int x2=*right.begin();
        int y2=*top.begin();
        if(x1<=x2 && y1<=y2)
        {
            cout<<x1<<" "<<y1;
            return 0;
        }

        left.insert(v[i].x1);
        bottom.insert(v[i].y1);
        right.insert(v[i].x2);
        top.insert(v[i].y2);

    }
    
    return 0;
}