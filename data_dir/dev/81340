#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

typedef long long ll;
using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000005;
const ll INFLL = 1000000000000000002ll;
const ll MOD = 1000000007;

inline ll min(ll a, ll b, ll c){return min(min(a,b),c);}
inline ll min(ll a, ll b, ll c, ll d){return min(min(min(a,b),c),d);}
inline ll max(ll a, ll b, ll c){return max(max(a,b),c);}
inline ll max(ll a, ll b, ll c, ll d){return max(max(max(a,b),c),d);}

// -------------------------------------------------------------------------------------------------------------

int DP[256], F[256], K;
string S;

int main()
{
    cin >> S >> K;
    f(i,1,K)
    {
        string s;
        cin >> s;
        F[s[0]] = s[1];
        F[s[1]] = s[0];
    }
    f(i,0,SZ(S)-1)
    {
        int best = 0;
        f(c,'a','z') if(c != F[S[i]]) best = max(best, DP[c]);
        DP[S[i]] = max(DP[S[i]], best+1);
    }
    int ans = 0;
    f(i,'a','z') ans = max(ans, DP[i]);
    cout << SZ(S) - ans;
}
