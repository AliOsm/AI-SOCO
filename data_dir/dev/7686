#include <bits/stdc++.h>
using namespace std;

int mob[69];
vector<long long> P[69];

bool isOverflow(long double a, long double b)
{
    return a > 1e18 * 1.1 / b;
}

long long power(long long N, long long expo)
{
    long long ans = 1;
    long long inf = (long long) 1e18 * 2;
    
    while(expo)
    {
        if(expo % 2)
        {
            if(isOverflow(ans, N))
                return inf;
            
            ans = ans * N;
        }
        if(isOverflow(N, N))
            N = inf;
        N = N * N;
        expo /= 2;
    }
    
    return ans;
}

long long solve(long long N)
{
    if(N == 0)
        return 0;
    
    long long ans = 1;
    
    for(int i=2; i<=5; i++)
    {
        if(mob[i] == 0)
            continue;
        
        long tmpAns = 1;
        long long left = 1, right = (long long)1e9;
        
        while(left <= right)
        {
            long long mid = (left + right)/2;
            
            if(power(mid, i) <= N)
                tmpAns = mid, left = mid + 1;
            else
                right = mid - 1;
        }
        
        ans += (tmpAns - 1) * mob[i];
    }
    
    for(int i=6; i<=60; i++)
        ans += (upper_bound(P[i].begin(), P[i].end(), N) - P[i].begin() - 1) * mob[i];
    
    return ans;
}

int main() {
    
    cin.tie(NULL), cout.tie(NULL);
    
    int Q;
    cin >> Q;
    
    long double x = 1e9;
    
    for(int i=2; i<=60; i++)
    {
        int num = i, counter = 0;
        int bad = 0;
        
        for(int j=2; j*j<=num; j++)
        {
            int f = 0;
            while(num % j == 0)
                num /= j, f++;
            if(f > 1)
                bad = 1;
            if(f == 1)
                counter++;
        }
        
        if(num > 1)
            counter++;
        if(!bad)
            mob[i] = (counter % 2 ? 1 : -1);
    }
    
    for(int i=6; i<=60; i++)
    {
        for(int j=1; ; j++)
        {
            long long x = power(j, i);
            if(x > (long double) 1e18)
                break;
            P[i].push_back(x);
        }
    }
    
    while(Q--)
    {
        long long L, R;
        cin >> L >> R;
        
        cout << solve(R) - solve(L-1) << "\n";
    }
    
    return 0;
}
