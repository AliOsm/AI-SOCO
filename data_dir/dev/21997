#include <bits/stdc++.h>

using namespace std;

string s, t;
int n, m;

int pref[100010];

int getsum(int l, int r){
    return pref[r] - ((l) ? pref[l-1] : 0);
}

int prefa[2][100010];
int prefb[2][100010];

int getsum_a(int t, int l, int r){
    return prefa[t][r] - ((l) ? prefa[t][l-1] : 0);
}

int getsum_b(int t, int l, int r){
    return prefb[t][r] - ((l) ? prefb[t][l-1] : 0);
}

int p[100010];
pair<int, int> d[100010];

main()
{
    ios_base::sync_with_stdio(0);
    memset(p, -1, sizeof(p));
    cin >> n >> s >> m;
    for(int i = 0; i < n; i++){
        pref[i] = (s[i] == '?');
        if(i) pref[i] += pref[i - 1];
    }
    for(int i = 0; i < n; i++){
        if(s[i] == 'a') prefa[i&1][i]++;
        if(s[i] == 'b') prefb[i&1][i]++;
        if(i){
            prefa[0][i] += prefa[0][i-1];
            prefa[1][i] += prefa[1][i-1];
            prefb[0][i] += prefb[0][i-1];
            prefb[1][i] += prefb[1][i-1];
        }
    }
    for(int i = 0; i < n - m + 1; i++){
        int suma = getsum_a(!(i&1), i, i + m - 1);
        int sumb = getsum_b(i&1, i, i + m - 1);
        if(suma || sumb) continue;
        int sum = getsum(i, i + m - 1);
        p[i] = sum;
    }
    for(int i = 0; i < n; i++){
        pair<int, int> prev;
        if(i) prev = d[i - 1];
        else prev = {0, 0};
        if(d[i].first < prev.first){
            d[i] = prev;
        }
        else if(d[i].first == prev.first && d[i].second > prev.second){
            d[i] = prev;
        }
        if(p[i] != -1){
            pair<int, int> v;
            v.first = prev.first + 1;
            v.second = prev.second + p[i];
            int to = i + m - 1;
            if(d[to].first < v.first){
                d[to] = v;
            }
            else if(d[to].first == v.first && d[to].second > v.second){
                d[to] = v;
            }
        }
    }
    cout << d[n-1].second << endl;
}
