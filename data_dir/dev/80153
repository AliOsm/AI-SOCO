#undef NDEBUG
#ifdef _DEBUG
#define _GLIBCXX_DEBUG
#endif

#include <iostream>
#include <iomanip>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define forn1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)((a).size())
#define mp make_pair
#define pb push_back
#define X first
#define Y second
#define y1 __y1
#define endl '\n'
#define sqr(x) (x) * (x)

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = (int)(1e9);
const li INF64 = (li)(INF) * (li)(INF);
const ld eps = 1e-15;
const ld pi = ld(3.1415926535897932384626433832795);

bool in(int i, int j, int n, int m)
{
    return i >= 1 && i <= n && j >= 1 && j <= m;
}

inline int myrand()
{
    return rand() ^ (rand() << 15);
}

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};

const int dxh[] = {-2, -1, 1, 2, 2, 1, -1, -2};
const int dyh[] = {1, 2, 2, 1, -1, -2, -2, -1};

const int N = 1111;

int a[N];
int n, m;
int b[N];

int main(){
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

    cout << setprecision(15) << fixed;
    cerr << setprecision(10) << fixed;

    srand(int(time(NULL)));

    cin >> n >> m;
    forn1(i, n)
        cin >> a[i];
    forn1(i, m)
        cin >> b[i];

    stack<int> S;

    li ans = 0;

    forn1(kk, m)
    {
        int idx = b[kk];
        int sum = 0;
        bool was = false;
        stack<int> S2;

        while(!S.empty())
        {
            int i = S.top();
            S.pop();
            S2.push(i);
            if(i == idx)
            {
                was = true;
                break;
            }
            sum += a[i];
        }

        if(was)
        {
            while(!S2.empty())
            {
                int i = S2.top();
                S2.pop();
                if(i == idx)
                    continue;
                S.push(i);
            }

            S.push(idx);
        }
        else
        {
            while(!S2.empty())
            {
                int i = S2.top();
                S2.pop();
                if(i == idx)
                    continue;
                S.push(i);
            }

            S.push(idx);
        }

        ans += sum;
    }

    cout << ans << endl;
    cerr << "TIME == " << clock() << " ms" << endl;
    return 0;
}