#include <bits/stdc++.h>

using namespace std;

int n,m;
int arr[100005];
vector<int> st[100005],en[100005];
int btree[4*100005],lazy[4*100005];
int l[305],r[305];

void build(int node,int l,int r)
{
	if(l==r)
	{
		btree[node]=arr[l];
		return;
	}
	int mid=(l+r)/2;
	build(node*2,l,mid);
	build(node*2+1,mid+1,r);
	btree[node]=min(btree[node*2],btree[node*2+1]);
}

void update(int node,int l,int r,int ql,int qr,int val)
{
	if(lazy[node])
	{
		btree[node]+=lazy[node];
		if(l!=r)
		{
			lazy[node*2]+=lazy[node];
			lazy[node*2+1]+=lazy[node];
		}
		lazy[node]=0;
	}
	if(r<ql||qr<l) return;
	if(ql<=l&&r<=qr)
	{
		btree[node]+=val;
		if(l!=r)
		{
			lazy[node*2]+=val;
			lazy[node*2+1]+=val;
		}
		return;
	}
	int mid=(l+r)/2;
	update(node*2,l,mid,ql,qr,val);
	update(node*2+1,mid+1,r,ql,qr,val);
	btree[node]=min(btree[node*2],btree[node*2+1]);
}

int main()
{
	cin >> n >> m;
	for(int i=0;i<n;i++)
		cin >> arr[i];
	build(1,0,n-1);
	for(int i=0;i<m;i++)
	{
		cin >> l[i] >> r[i];
		l[i]--; r[i]--;
		st[l[i]].push_back(r[i]);
		en[r[i]].push_back(l[i]);
		update(1,0,n-1,l[i],r[i],-1);
	}
	int ans=0,mind=0;
	for(int i=0;i<n;i++)
	{
		for(int j:st[i])
		{
			//cout << "Deleted: " << i << " " << j << endl;
			update(1,0,n-1,i,j,1);
		}
		//cout << btree[1] << endl;
		if(arr[i]-btree[1]>ans)
		{
			ans=arr[i]-btree[1];
			mind=i;
		}
		for(int j:en[i])
		{
			//cout << "Updated: "<< j << " " << i << endl;
			update(1,0,n-1,j,i,-1);
		}
	}
	cout << ans << endl;
	int co=0;
	for(int i=0;i<m;i++)
	{
		if(l[i]<=mind&&mind<=r[i]) continue;
		co++;
	}
	cout << co << endl;
	for(int i=0;i<m;i++)
	{
		if(l[i]<=mind&&mind<=r[i]) continue;
		cout << i+1 << " ";
	}
	cout << endl;
}