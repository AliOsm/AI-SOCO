#include <bits/stdc++.h>
#define forn(i, n) for(int i = 0; i < (int) n; ++i)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; ++i)
#define For(i, st, en) for(int i = (int)st; i <= (int)en; ++i)
#define clr(x) memset(x, 0, sizeof(x))
#define all(x) (x).begin(),(x).end()
#define pb push_back
#define x first
#define y second
#define mp make_pair

using namespace std;

typedef unsigned int uint;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int, int> PII;

/**
 * The code starts here.
 */

int check(int x, int y)
{
    return x >= 0 && x < 8 && y >= 0 && y < 8;
}

int main()
{
    ios_base::sync_with_stdio(false);

    int x[2];
    int y[2];
    for (int i = 0; i < 2; ++i)
    {
        cin >> x[i] >> y[i];
        --x[i], --y[i];
    }

    char used[8][8];
    int d[8][8];
    clr(used);
    memset(d, 0x3f, sizeof(d));
    int inf = d[0][0];

    queue<PII> q;
    q.push(mp(x[0], y[0]));
    used[x[0]][y[0]] = 1;
    d[x[0]][y[0]] = 0;

    while (!q.empty())
    {
        PII v = q.front();
        q.pop();

        for (int i = -8; i <= 8; ++i)
        {
            int tox = v.x;
            int toy = v.y + i;

            if (check(tox, toy))
            {
                if (!used[tox][toy])
                {
                    used[tox][toy] = 1;
                    q.push(mp(tox, toy));
                    d[tox][toy] = d[v.x][v.y] + 1;
                }
            }
        }
        for (int i = -8; i <= 8; ++i)
        {
            int tox = v.x + i;
            int toy = v.y;

            if (check(tox, toy))
            {
                if (!used[tox][toy])
                {
                    used[tox][toy] = 1;
                    q.push(mp(tox, toy));
                    d[tox][toy] = d[v.x][v.y] + 1;
                }
            }
        }
    }

    if (d[x[1]][y[1]] == inf)
        cout << "0 ";
    else
        cout << d[x[1]][y[1]] << " ";

    clr(used);
    memset(d, 0x3f, sizeof(d));
    q.push(mp(x[0], y[0]));
    used[x[0]][y[0]] = 1;
    d[x[0]][y[0]] = 0;

    while (!q.empty())
    {
        PII v = q.front();
        q.pop();

        for (int i = -8; i <= 8; ++i)
        {
            int tox = v.x + i;
            int toy = v.y + i;

            if (check(tox, toy))
            {
                if (!used[tox][toy])
                {
                    used[tox][toy] = 1;
                    q.push(mp(tox, toy));
                    d[tox][toy] = d[v.x][v.y] + 1;
                }
            }
        }
        for (int i = -8; i <= 8; ++i)
        {
            int tox = v.x + i;
            int toy = v.y - i;

            if (check(tox, toy))
            {
                if (!used[tox][toy])
                {
                    used[tox][toy] = 1;
                    q.push(mp(tox, toy));
                    d[tox][toy] = d[v.x][v.y] + 1;
                }
            }
        }
    }

    if (d[x[1]][y[1]] == inf)
        cout << "0 ";
    else
        cout << d[x[1]][y[1]] << " ";

    clr(used);
    memset(d, 0x3f, sizeof(d));
    q.push(mp(x[0], y[0]));
    used[x[0]][y[0]] = 1;
    d[x[0]][y[0]] = 0;

    int dx[] = {1, 1, 1, 0, 0, -1, -1, -1};
    int dy[] = {1, 0, -1, 1, -1, 1, 0, -1};

    while (!q.empty())
    {
        PII v = q.front();
        q.pop();

        for (int i = 0; i < 8; ++i)
        {
            int tox = v.x + dx[i];
            int toy = v.y + dy[i];

            if (check(tox, toy))
            {
                if (!used[tox][toy])
                {
                    used[tox][toy] = 1;
                    q.push(mp(tox, toy));
                    d[tox][toy] = d[v.x][v.y] + 1;
                }
            }
        }
    }

    if (d[x[1]][y[1]] == inf)
        cout << "0\n";
    else
        cout << d[x[1]][y[1]] << endl;
    return 0;
}
