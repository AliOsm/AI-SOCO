#include <bits/stdc++.h>
#pragma GCC optimize("O3")
using namespace std;

class Dsu {
  vector<int> p;
  int n;
public:
  Dsu(int n) : n(n) {
    p.resize(n);
    iota(p.begin(), p.end(), 0);
  }
  int f(int x) { return p[x] == x ? x : p[x] = f(p[x]); }
  void kill(int x) { p[x] = f(x + 1); }
};

class Solution {
  int n;
  vector<long long> cap, flow;
public:
  void run() {
    cin >> n;
    ++n;
    cap.resize(n), flow.resize(n);
    for (int i = 0; i < n - 1; ++i) cin >> cap[i];
    cap[n - 1] = 1e18;
    Dsu U(n);
    int q; cin >> q;
    while (q--) {
      int type; cin >> type;
      if (type == 1) {
        int x, p; cin >> p >> x;
        --p;
        while (x) {
          p = U.f(p);
          int sub = min(cap[p] - flow[p], (long long)x);
          flow[p] += sub;
          x -= sub;
          if (flow[p] == cap[p]) U.kill(p);
        }
      }
      else {
        int k; cin >> k; --k;
        cout << flow[k] << '\n';
      }
    }
  }  
};

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);
  Solution().run();
}
