/*
 * temp.cpp
 *
 *  Created on: 2012-7-18
 *      Author: BSBandme
 */
//#pragma comment(linker, "/STACK:1024000000,1024000000")
#include <iostream>
#include <fstream>
#include <string.h>
#include <cstdio>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <cassert>
#include <list>
#include <iomanip>
#include <math.h>
#include <deque>
#include <utility>
#include <map>
#include <set>
#include <bitset>
#include <numeric>
#include <climits>
#include <cctype>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <functional>
#include <sstream>

using namespace std;

#define mpr make_pair
typedef unsigned int ui;
typedef unsigned long long ull;
typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <double, double> pdd;
typedef vector <int> vi;
typedef vector <ll> vll;
typedef vector <double> vd;
typedef vector <string> vs;
typedef map <string, int> mpsi;
typedef map <double, int> mpdi;
typedef map <int, int> mpii;

const double pi = acos(0.0) * 2.0;
const double eps = 1e-12;
const int step[8][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};

template <class T> inline T abs1(T a) {return a < 0 ? -a : a;}

template <class T> inline T max1(T a, T b) { return a > b ? a : b; }
template <class T> inline T max1(T a, T b, T c) { return max1(max1(a, b), c); }
template <class T> inline T max1(T a, T b, T c, T d) { return max1(max1(a, b, c), d); }
template <class T> inline T max1(T a, T b, T c, T d, T e) { return max1(max1(a, b, c, d), e); }
template <class T> inline T min1(T a, T b) { return a > b ? a : b; }
template <class T> inline T min1(T a, T b, T c) { return min1(min1(a, b), c); }
template <class T> inline T min1(T a, T b, T c, T d) { return min1(min1(a, b, c), d); }
template <class T> inline T min1(T a, T b, T c, T d, T e) { return min1(min1(a, b, c, d), e); }

template <class T> inline T lowb(T num) {return num & (-num); }

inline int jud(double a, double b){
	if(abs(a) < eps && abs(b) < eps) return 0;
	else if(abs1(a - b) / abs1(a) < eps) return 0;
	if(a < b) return -1;
	return 1;
}
template <typename t> inline int jud(t a, t b){
	if(a < b) return -1;
	if(a == b) return 0;
	return 1;
}

// f_lb == 1��?����ͬ��һ������߽磬f_small == 1��?�����û��Ѱ�ҵ�ֵ����С����
template <typename it, typename t1>
inline int find(t1 val, it a, int na, bool f_small = 1, bool f_lb = 1){
	int be = 0, en = na - 1;
	if(*a <= *(a + na - 1)){
		if(f_lb == 0) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != 1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != -1) en = mid;
			else be = mid + 1;
		}
		if(f_small && jud(*(a + be), val) == 1) be--;
		if(!f_small && jud(*(a + be), val) == -1) be++;
	} else {
		if(f_lb) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != -1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != 1) en = mid;
			else be = mid + 1;
		}
		if(!f_small && jud(*(a + be), val) == -1) be--;
		if(f_small && jud(*(a + be), val) == 1) be++;
	}
	return be;
}

inline int bitnum(ui nValue) { return __builtin_popcount(nValue); }
inline int bitnum(int nValue) { return __builtin_popcount(nValue); }
inline int bitnum(ull nValue) { return __builtin_popcount(nValue) + __builtin_popcount(nValue >> 32); }
inline int bitnum(ll nValue) { return __builtin_popcount(nValue) + __builtin_popcount(nValue >> 32); }
inline int bitmaxl(ui a) { if(a) return 0; return 32 - __builtin_clz(a); }
inline int bitmaxl(int a) { if(a) return 0; return 32 - __builtin_clz(a); }
inline int bitmaxl(ull a) { int temp = a >> 32; if(temp) return 32 - __builtin_clz(temp) + 32; return bitmaxl(int(a)); }
inline int bitmaxl(ll a) { int temp = a >> 32; if(temp) return 32 - __builtin_clz(temp) + 32; return bitmaxl(int(a)); }

long long pow(long long n, long long m, long long mod = 0){
	if(m < 0) return 0;
	long long ans = 1;
	long long k = n;
	while(m){
		if(m & 1) {
			ans *= k;
			if(mod) ans %= mod;
		}
		k *= k;
		if(mod) k %= mod;
		m >>= 1;
	}
	return ans;
}

//#define debug
//.........................mi.......feng.......xian.......wai.......jin.......zhi.......challenge...............................................

const int maxn = 75;
int dp[maxn][maxn][maxn][4];
int mp[maxn][maxn];
int a, b, c;
int q[maxn * maxn * maxn][3], lq, rq;
int n;
int ans[maxn * maxn * maxn][3];

inline void relax(int &a, int &b, int &c) {
	if(a > b) swap(a, b);
	if(a > c) swap(a, c);
	if(b > c) swap(b, c);
}
inline bool canfind(int x, int a, int b, int c) {
	return x == a || x == b || x == c;
}
inline void justdoit(int a, int b, int c) {
	int ta = a, tb = b, tc = c;
	relax(ta, tb, tc);
	for(int i = 0; i < n; i++)
		if(i != b && i != c && mp[a][i] == mp[b][c]) {
			int ra = i, rb = b, rc = c;
			relax(ra, rb, rc);
			if(dp[ra][rb][rc][0] == -1) {
				dp[ra][rb][rc][0] = dp[ta][tb][tc][0] + 1;
				dp[ra][rb][rc][1] = a;
				dp[ra][rb][rc][2] = b;
				dp[ra][rb][rc][3] = c;
				q[rq][0] = ra;
				q[rq][1] = rb;
				q[rq][2] = rc;
				rq++;
			}
		}
}

int main(){
    ios_base::sync_with_stdio(0);
	#ifdef debug //......................................................................................................
	freopen("input.txt", "r", stdin);
	#endif //...........................................................................................................
	scanf("%d", &n);
	scanf("%d%d%d", &a, &b, &c);
	a--; b--; c--;
	memset(mp, -1, sizeof(mp));
	for(int i = 0; i < n; i++) {
		char str[maxn];
		scanf("%s", str);
		for(int j = 0; j < n; j++) if(j != i)
			mp[i][j] = str[j] - 'a';
	}
	memset(dp, -1, sizeof(dp));
	relax(a, b, c);
	dp[a][b][c][0] = 0;
	for(int i = 0; i < 3; i++) dp[a][b][c][i + 1] = -1;
	q[rq][0] = a; q[rq][1] = b; q[rq][2] = c;
	rq++;
	for(; lq != rq; lq++) {
		int ra = q[lq][0], rb = q[lq][1], rc = q[lq][2];
		justdoit(ra, rb, rc);
		justdoit(rb, ra, rc);
		justdoit(rc, rb, ra);
	}
	if(dp[0][1][2][0] > 100000000) printf("-1\n");
	else {
		printf("%d\n", dp[0][1][2][0]);
		int a = 0, b = 1, c = 2;
		int nxt, bef;
		for (int i = dp[0][1][2][0] - 1; i >= 0; --i) {
			int ra = dp[a][b][c][1], rb = dp[a][b][c][2], rc = dp[a][b][c][3];
			if(canfind(a, ra, rb, rc)) {
				if(canfind(b, ra, rb, rc)) nxt = c;
				else nxt = b;
			} else nxt = a;
			if(canfind(ra, a, b, c)) {
				if(canfind(rb, a, b, c)) bef = rc;
				else bef = rb;
			} else bef = ra;
			ans[i][0] = bef + 1; ans[i][1] = nxt + 1;
			a = ra; b = rb; c = rc;
			relax(a, b, c);
		}
		for(int i = 0; i < dp[0][1][2][0]; i++)
			printf("%d %d\n", ans[i][0], ans[i][1]);
	}

    return 0;
}



