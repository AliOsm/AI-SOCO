#include <bits/stdc++.h>
using namespace std;

const double INF = 1e15;
int tc, n;
double C, T, pw[105], dp[105][105][1005];
pair <int, int> a[105];

double f(int k, double v, double t) {
	return t + 10.0 * k + v / (1.0 + C * t);
}

int main() {
	scanf("%d", &tc);

	while(tc--) {
		scanf("%d%lf%lf", &n, &C, &T);

		pw[0] = 1.0;
		for(int i = 1; i <= n; i++) {
			scanf("%d%d", &a[i].first, &a[i].second);
			pw[i] = 10.0 * pw[i - 1] / 9.0;
		}

		sort(a + 1, a + n + 1);
		reverse(a + 1, a + n + 1);

		for(int i = 0; i <= n; i++) {
			for(int k = 0; k <= n; k++) {
				for(int s = 0; s <= 1000; s++) {
					if(i == 0 && k == 0 && s == 0) {
						dp[i][k][s] = 0.0;
						continue;
					}

					dp[i][k][s] = INF;

					if(i > 0)
						dp[i][k][s] = min(dp[i][k][s], dp[i - 1][k][s]);

					if(i > 0 && k > 0 && s >= a[i].second && dp[i - 1][k - 1][s - a[i].second] < INF)
						dp[i][k][s] = min(dp[i][k][s], dp[i - 1][k - 1][s - a[i].second] + pw[k] * a[i].first);
				}
			}
		}

		int ans = 0;
		for(int k = 0; k <= n; k++) {
			for(int i = 0; i <= 1000; i++) {
				if(dp[n][k][i] < INF) {
					double v = dp[n][k][i];

					double st = 0, nd = 1e18;

					for(int i = 1; i <= 150; i++) {
						double m1 = st + (nd - st) / 3.0;
						double m2 = nd - (nd - st) / 3.0;

						if(f(k, v, m1) < f(k, v, m2))
							nd = m2;

						else st = m1;
					}

					if(f(k, v, (st + nd) / 2.0) <= T)
						ans = max(ans, i);
				}
			}
		}

		printf("%d\n", ans);
	}

	return 0;
}