#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define sz(s) ((int)(s.size()))
#define all(s) s.begin(),s.end()
#define rep(i,a,n) for(int i=a;i<=n;++i)
#define per(i,n,a) for(int i=n;i>=a;--i)

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

using namespace std;

const int MAXN = 1e6 + 256;
const char nxtl = '\n';
const double eps = (double)1e-9;
template<typename T> inline bool updmin(T &a, const T &b) {return a > b ? a = b, 1 : 0;}
template<typename T> inline bool updmax(T &a, const T &b) {return a < b ? a = b, 1 : 0;}

int n, a[MAXN];
vector < int > t[MAXN * 5];
inline vector < int > Merge(const vector < int > &x, const vector < int > &y) {
	vector < int > res;
	for(int l = 0, r = 0; l < sz(x) || r < sz(y);) {
		if(l == sz(x)) res.pb(y[r++]);
		else if(r == sz(y)) res.pb(x[l++]);
		else if(x[l] < y[r]) res.pb(x[l++]);
		else res.pb(y[r++]);
	}
	return res;
}
void build(int x = 1, int tl = 1, int tr = n) {
	if(tl == tr) {
		t[x].pb(a[tr]); return;
	}
	int mid = tl + tr >> 1;
	build(x+x, tl, mid);
	build(x+x+1, mid+1, tr);
	t[x] = Merge(t[x+x], t[x+x+1]);
}
int get1(const int &l, const int &r, const int &val, int x = 1, int tl = 1, int tr = n) {
	if(tl > r || tr < l) return 0;
	if(tl >= l && tr <= r) {
		return sz(t[x]) - (upper_bound(all(t[x]), val) - t[x].begin() + 1) + 1;
	}
	int mid = tl + tr >> 1;
	return get1(l, r, val, x+x, tl, mid) + get1(l, r, val, x+x+1, mid+1, tr);
}

int get2(const int &l, const int &r, const int &val, int x = 1, int tl = 1, int tr = n) {
	if(tl > r || tr < l) return 0;
	if(tl >= l && tr <= r) {
		return (lower_bound(all(t[x]), val) - t[x].begin());
	}
	int mid = tl + tr >> 1;
	return get2(l, r, val, x+x, tl, mid) + get2(l, r, val, x+x+1, mid+1, tr);
}

int main() {
	#ifdef accepted
		freopen(".in", "r", stdin);
		freopen(".out", "w", stdout);
	#endif
	scanf("%d", &n);
	rep(i, 1, n) scanf("%d", a+i);
	ll res = 0ll;
	build();
	rep(j, 1, n) res += get1(1, j-1, a[j]) * 1ll * get2(j+1, n, a[j]);

	printf("%lld\n", res);

	return 0;
}