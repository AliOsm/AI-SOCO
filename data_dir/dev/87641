#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <cmath>
#include <ctime>
#include <string>
#include <cstdlib>
#include <algorithm>
using namespace std;
#define read            freopen("C:\\Users\\USER\\Desktop\\in.txt", "r", stdin)
#define write           freopen("C:\\Users\\USER\\Desktop\\in.txt", "a", stdout)
#define repi(n)         for (i=0; i<(n); i++)
#define repj(n)         for (j=0; j<(n); j++)
#define rep1(a, n)      for (i=(a); i<(n); i++)
#define pii             pair<int, int>
#define pll             pair<LL, LL>
#define inf             10000000000000000
#define in(a)           scanf("%I64d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%I64d%I64d", &a, &b)
#define in3(a, b, c)    scanf("%I64d%I64d%I64d", &a, &b, &c)
#define pn              printf("\n");
#define pcs(a)          printf("Case %I64d: ", a)
#define pr(a)           printf("%I64d\n", a)
#define pr(a)           printf("%I64d\n", a)
#define prs(a)          printf("%I64d ", a)
#define pr2(a, b)       printf("%I64d %I64d\n", a, b)
#define pr3(a, b ,c)    printf("%I64d %I64d %I64d\n", a, b, c)
#define MP              make_pair
#define vi              vector<int>
#define vll             vector<LL>
#define msi             map<string, int>
#define mll             map<LL, LL>
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define pb              push_back
#define MEM(a, b)       memset((a), (b), sizeof(a))
#define MAX(A,B)        (((A)>(B))?(A):(B))
#define MIN(A,B)        (((A)<(B))?(A):(B))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)
typedef long long LL;
//LL  dx[]={1,0,-1,0};LL dy[]={0,1,0,-1}; //4 Direction
//LL  dx[]={1,1,0,-1,-1,-1,0,1};LL dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//LL  dx[]={2,1,-1,-2,-2,-1,1,2};LL dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(LL n, LL pos) {return (bool) (n & (1<<pos));}
//LL  on(LL n, LL pos) {return n | (1<<pos);}
//LL  off(LL n, LL pos) {return n & ~(1<<pos);}
//bool operator < (const data &d) const{return cost<d.cost;}

/* ***************************************************************************************
   *************************************************************************************** */
const LL M=100100;
vll A[M], W[M];
LL dist[M], visited[M], train[M];
LL ind[M];
struct data {
    LL u, cost, p;
    bool operator < (const data &d) const{return cost>d.cost;}
};
typedef struct data sd;
void dijkstra(LL st)
{
    priority_queue <sd> q;
    sd t, c;
    LL i, m;

    for (i=0; i<M; i++) {dist[i]=inf; visited[i]=false;}

    dist[st]=0;
    c.u=st; c.cost=0;
    q.push(c);
    while (!q.empty())
    {
        c=q.top();
        q.pop();

        if (c.cost==dist[c.u]&&c.u!=1) ind[c.u]++;

        if (visited[c.u]) continue;
        visited[c.u]=true;

        m=A[c.u].sz;
        for (i=0; i<m; i++)
        {
            t.u=A[c.u][i];
            if (dist[t.u]>=dist[c.u]+W[c.u][i])
            {
                dist[t.u]=dist[c.u]+W[c.u][i];
                t.cost=dist[t.u];
                t.p=c.u;
                q.push(t);
            }
        }
    }
}
int main()
{
#ifndef ONLINE_JUDGE
    read;
#endif
    LL n, i, j, k, e, t;

    in3(n, e, t);
    while (e--)
    {
        in3(i, j, k);
        A[i].pb(j);
        A[j].pb(i);

        W[i].pb(k);
        W[j].pb(k);
    }
    MEM(ind, 0);
    repi(n+1) train[i]=inf;
    LL sum=0;
    for (k=0; k<t; k++)
    {
        in2(i, j);
        train[i]=MIN(train[i], j);
    }

    for (i=1; i<=n; i++)
    {
        if (train[i]!=inf)
        {
            A[1].pb(i);
            W[1].pb(train[i]);
            sum++;
        }
    }

    sum=t-sum;

    dijkstra(1);

    for (i=1; i<=n; i++)
    {
        if ((dist[i]==train[i]&&ind[i]>1)||(train[i]!=inf&&dist[i]<train[i])) sum++;
    }


pr(sum);
return 0;
}
