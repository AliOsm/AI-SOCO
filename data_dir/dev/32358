#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>   
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = 998244353;
const int N = (int)3e5 + 123;
const ll inf = (ll)3e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;                  
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

int n, ans, fact[N];
pii a[N], b[N];

inline int mult (int a, int b) {
   return 1ll * a * b % mod;
}

inline int add (int a, int b) {
   a += b;
   if (a >= mod) a -= mod;
   if (a < 0) a += mod;
   return a;
}

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                     

inline void Solve () {
   cin >> n;
   for (int i = 1; i <= n; i ++) cin >> a[i].F >> a[i].S, b[i].F = a[i].S, b[i].S = a[i].F;
   fact[0] = 1;
   for (int i = 1; i <= n; i ++) fact[i] = mult (fact[i - 1], i);
   ans = fact[n];
   sort (a + 1, a + n + 1);
   int res1 = 1;
   for (int i = 1; i <= n; i ++) {
      int j = i;
      while (j + 1 <= n && a[j + 1].F == a[i].F) j ++;
      res1 = mult (res1, fact[j - i + 1]); 
      i = j;
   }
   ans = add (ans, -res1);
   res1 = 1;
   sort (b + 1, b + n + 1);
   for (int i = 1; i <= n; i ++) {
      int j = i;
      while (j + 1 <= n && b[j + 1].F == b[i].F) j ++;
      res1 = mult (res1, fact[j - i + 1]);
      i = j;
   }
   ans = add (ans, -res1); 
   bool ok = 0;
   for (int i = 1; i < n; i ++) {
      if (a[i].S > a[i + 1].S) {
         ok = 1;
         break;
      }  
   }
   if (ok) cout << ans, exit (0);
   res1 = 1;
   for (int i = 1; i <= n; i ++) {
      int j = i;
      while (j < n && a[j + 1].S == a[i].S && a[j + 1].F == a[i].F) j ++;
      res1 = mult (res1, fact[j - i + 1]);
      i = j;
   }
   cout << add (ans, res1);

}                                     

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
// cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
