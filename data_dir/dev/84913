#include <bits/stdc++.h>

using namespace std;

int main()
{
    int n;
    cin >> n;
    int matrix[n + 1][7];
    unordered_set<int>seta;
    for(int i = 1;i <= n;i++){
        for(int j = 1;j <= 6;j++){
            cin >> matrix[i][j];
            seta.insert(matrix[i][j]);
        }
    }
    if(n >= 2){
    for(int i = 1;i <= 6;i++){
        for(int j = 1;j <= 6;j++){
            seta.insert(matrix[1][i]*10 + matrix[2][j]);
            seta.insert(matrix[2][i]*10 + matrix[1][j]);
        }
    }
}
    if(n >= 3){
        for(int i = 1;i <= 6;i++){
            for(int j = 1;j <= 6;j++){
                for(int k = 1;k <= 6;k++){
                    seta.insert(matrix[1][i]*100 + matrix[2][j]*10 + matrix[3][k]);
                    seta.insert(matrix[1][i]*100 + matrix[3][j]*10 + matrix[2][k]);
                    seta.insert(matrix[2][i]*100 + matrix[3][j]*10 + matrix[1][k]);
                    seta.insert(matrix[2][i]*100 + matrix[1][j]*10 + matrix[3][k]);
                    seta.insert(matrix[3][i]*100 + matrix[1][j]*10 + matrix[2][k]);
                    seta.insert(matrix[3][i]*100 + matrix[2][j]*10 + matrix[1][k]);
                }
            }
        }
    for(int i = 1;i <= 6;i++){
        for(int j = 1;j <= 6;j++){
            seta.insert(matrix[1][i]*10 + matrix[2][j]);
            seta.insert(matrix[2][i]*10 + matrix[1][j]);
            seta.insert(matrix[1][i]*10 + matrix[3][j]);
            seta.insert(matrix[3][i]*10 + matrix[1][j]);
            seta.insert(matrix[3][i]*10 + matrix[2][j]);
            seta.insert(matrix[2][i]*10 + matrix[3][j]);
        }
    }
}
    for(int i = 1;i < 1000;i++){
        if(seta.find(i) != seta.end())continue;
        cout << (i - 1);
        break;
    }
}
