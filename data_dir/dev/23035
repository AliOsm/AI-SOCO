#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <iomanip>

#include <vector>
#include <cstring>
#include <string>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>

#include <utility>
#include <list>

#include <cmath>
#include <algorithm>
#include <cassert>
#include <bitset>
#include <complex>
#include <climits>
#include <functional>
#include <unordered_set>
#include <unordered_map>
using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> l4;
typedef pair<double, double> dd;
typedef vector<int> vi;
#define mp make_pair
#define pb push_back

#define debug(x) cerr << #x << " = " << x << " "

const int A = 26;
int len = 0;
void print(const vi &v)
{
    for (int i = int(v.size())-1; i >= 0; --i)
        putchar(v[i]+'a');
}
vi read()
{
    string s; cin >> s;
    vi ret = vi();
    while (!s.empty())
    {
        ret.pb(s.back()-'a');
        s.pop_back();
    }
    if (len == 0) len = ret.size();
    assert(ret.size() == len);
    return ret;
}
vi operator+(const vi &l, const vi &r)
{
    if (l.size() < r.size()) return r + l;
    vi ret;
    int carry = 0;
    for (int i = 0; i < r.size(); ++i)
    {
        int cur = l[i] + r[i] + carry;
        ret.pb(cur%A);
        carry = cur / A;
    }
    for (int i = r.size(); i < l.size(); ++i)
    {
        int cur = l[i] + carry;
        ret.pb(cur%A);
        carry = cur / A;
    }
    if (carry) ret.pb(carry);

    return ret;
}
vi right_shift(const vi & v)
{
    assert(v.front() % 2 == 0);
    vi ret;
    int carry = 0;
    for (int i = int(v.size()) - 1; i >= 0; --i)
    {
        int cur = v[i] + carry;
        ret.pb(cur/2);
        carry = (cur%2)*A;
    }
    assert(carry == 0);
    reverse(ret.begin(), ret.end());
    while (ret.size() > len)
    {
        assert(ret.back() == 0);
        ret.pop_back();
    }
    return ret;
}

int main()
{
    scanf("%*d");
    print(right_shift(read() + read()));
}
