#include <iostream>
#include <stdio.h>
#include <string>
#include <memory.h>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <time.h>
#include <assert.h>
#include <cmath>
#include <stack>
#include <string.h>
#include <sstream>
#include <functional>
#include <algorithm>
using namespace std;
typedef long long ll;
const int N = 1002;
char g[N][N];
queue<pair<int, int> > q[9];
int dr[4] = { -1,1,0,0 };
int dc[4] = { 0,0,-1,1 };
bool vis[N][N];
int main() {
	int R, C, n, f[10];
	scanf("%d%d%d", &R, &C, &n);
	for (int i = 0; i < n; ++i)
		scanf("%d", f + i);
	memset(g, '#', sizeof(g));
	for (int i = 1; i <= R; ++i) {
		scanf("%s", g[i] + 1);
		for (int j = 1; j <= C; ++j)
			if (g[i][j] != '.' && g[i][j] != '#')
				q[g[i][j] - '1'].push({ i,j });
	}
	int upd = 0;
	int cur = 0;
	for (int I = 0; I - upd <= n; ++I) {
		auto &q = ::q[cur];
		for (int it = 0; !q.empty() && it < f[cur]; ++it) {
			for (int it = q.size(); it > 0; --it) {
				auto u = q.front();
				q.pop();
				for (int d = 0; d < 4; ++d) {
					int nr = u.first + dr[d];
					int nc = u.second + dc[d];
					if (g[nr][nc] == '.') {
						g[nr][nc] = cur + '1';
						q.push({ nr,nc });
						upd = I;
					}
				}
			}
		}
		cur = (cur + 1) % n;
	}
	int res[10] = {};
	for (int i = 1; i <= R; ++i)
		for (int j = 1; j <= C; ++j)
			++res[g[i][j] - '0'];
	for (int i = 1; i <= n; ++i)
		printf("%d ", res[i]);
	return 0;
}