#include <ext/rope>
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define ll long long
#define ull unsigned long long
typedef vector<vector<ll>> mat;

map<char , bool> v;
int n , x;
vector<string> in;
map<int , map<char , vector<int> > > mp;
vector<pair<int , int>> sPair;
vector<pair<pair<int , int> , pair<int , int> > > out;
string s;

int main()
{
    ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0);


    v['a'] = v['e'] = v['o'] = v['u'] = v['i'] = 1;
    cin >> n;
    for(int i = 0 ; i < n ; i++)
    {
        cin >> s;
        in.push_back(s);
        int cnt = 0;
        char lst = 'h';
        for(auto j : s)
            if(v[j]) cnt++ , lst = j;
        mp[cnt][lst].push_back(i);
        if(mp[cnt][lst].size() % 2 == 0)
        {
            x = mp[cnt][lst].back();
            mp[cnt][lst].pop_back();
            sPair.push_back({x , mp[cnt][lst].back()});
            mp[cnt][lst].pop_back();
        }
    }

    for(auto i : mp)
    {
        vector<int> all;
        for(auto j : i.second)
            for(auto k : j.second)
                all.push_back(k);

        while(all.size() > 1 && sPair.size())
        {
            x = all.back();
            all.pop_back();
            out.push_back({sPair.back() , {all.back() , x} });
            sPair.pop_back();
            all.pop_back();
        }
    }

    while(sPair.size() > 1)
    {
        pair<int , int> lst = sPair.back();
        sPair.pop_back();
        out.push_back({lst , sPair.back()});
        sPair.pop_back();
    }

    cout << out.size() << '\n';
    for(auto i : out)
        cout << in[i.second.first] << " " << in[i.first.first] << '\n' << in[i.second.second] << " " << in[i.first.second] << '\n';

    return 0;
}
