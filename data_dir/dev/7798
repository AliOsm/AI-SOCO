/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int m;
        in >> m;
        vector<int> A(m), res(m);
        vector<pair<int, int>> B(m);
        for (int i = 0; i < m; ++i) {
            in >> A[i];
        }
        for (int i = 0; i < m; ++i) {
            in >> B[i].first;
            B[i].second = i;
        }
        multiset<int> sa(A.begin(), A.end());
        sort(B.begin(), B.end());
        reverse(B.begin(), B.end());
        for (int i = 0; i < m; ++i) {
            int x = B[i].first, ind = B[i].second;
            auto it = sa.lower_bound(x);
            assert(it != sa.end());
            res[ind] = *it;
            sa.erase(it);
        }
        for (int x : res) {
            out << x << " ";
        }
        out << "\n";
    }
};


int main() {
	std::ios::sync_with_stdio(false); cin.tie(nullptr);
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
