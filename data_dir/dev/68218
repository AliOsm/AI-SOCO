
#include <bits/stdc++.h>
#define int long long

using namespace std;

int const N = 3 * 10e5 + 40;
int const MAXN = 1e6 + 4;

int d[N];
int a[N];
int t_sum[4 * N];
int t_max[4 * N];

void build_sum(int i, int l, int r) {
    if (l + 1 == r) {
        t_sum[i] = a[l];
    }
    else {
        build_sum(i * 2, l, (l + r) / 2);
        build_sum(i * 2 + 1, (l + r) / 2, r);
        t_sum[i] = t_sum[i * 2] + t_sum[i * 2 + 1];
    }
}

void build_max(int i, int l, int r) {
    if (l + 1 == r) {
        t_max[i] = a[l];
    }
    else {
        build_max(i * 2, l, (l + r) / 2);
        build_max(i * 2 + 1, (l + r) / 2, r);
        t_max[i] = max(t_max[i * 2], t_max[i * 2 + 1]);
    }
}

int get_max(int i, int tl, int tr, int l, int r) {
    if (l <= tl && tr <= r) {
        return t_max[i];
    }
    else if (r <= tl || tr <= l) {
        return -(1e6 + 25);
    }
    else {
       return max(get_max(i * 2, tl, (tl + tr) / 2, l, r), get_max(i * 2 + 1, (tl + tr) / 2, tr, l, r));
    }
}

int get_sum(int i, int tl, int tr, int l, int r) {
    if (l <= tl && tr <= r) {
        return t_sum[i];
    }
    else if (r <= tl || tr <= l) {
        return 0;
    }
    else {
        return get_sum(i * 2, tl, (tl + tr) / 2, l, r) + get_sum(i * 2 + 1, (tl + tr) / 2, tr, l, r);
    }
}

void update(int i, int tl, int tr, int l, int r){
    if (l <= tl && tr <= r) {
        if (t_max[i] < 3) {
            return;
        }
        else if (tl + 1 == tr) {
            t_max[i] = t_sum[i] = d[t_sum[i]];
            return;
        }
        else {
            update(i * 2, tl, (tl + tr) / 2, l, r);
            update(i * 2 + 1, (tl + tr) / 2, tr, l, r);
            t_max[i] = max(t_max[i * 2], t_max[i * 2 + 1]);
            t_sum[i] = t_sum[i * 2] + t_sum[i * 2 + 1];
            return;
        }
    }
    else if (r <= tl || tr <= l) {
        return;
    }
    else {
        update(i * 2, tl, (tl + tr) / 2, l, r);
        update(i * 2 + 1, (tl + tr) / 2, tr, l, r);
        t_max[i] = max(t_max[i * 2], t_max[i * 2 + 1]);
        t_sum[i] = t_sum[i * 2] + t_sum[i * 2 + 1];
    }
}


signed main() {

    ios_base::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);

    for (int i = MAXN; i >= 1; --i) {
        d[i] = 1;
        for (int j = i * 2; j <= MAXN; j += i) ++d[j];
    }

    int n, q;
    cin >> n >> q;

    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }

    build_sum(1, 0, n);
    build_max(1, 0, n);

    while (q--) {
        int t, l, r;
        cin >> t >> l >> r;
        if (t == 1) {
            update(1, 0, n, l - 1, r);
        }
        else {
            cout << get_sum(1, 0, n, l - 1, r) << '\n';
        }
        
    }
    

    return 0;
}