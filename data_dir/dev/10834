#include <bits/stdc++.h>

typedef long long ll;
using namespace std;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 2000000005;
const ll INFLL = 1000000000000000002ll;
const ll MOD = 1000000009;

inline ll min(ll a, ll b, ll c){return min(min(a,b),c);}
inline ll min(ll a, ll b, ll c, ll d){return min(min(min(a,b),c),d);}
inline ll max(ll a, ll b, ll c){return max(max(a,b),c);}
inline ll max(ll a, ll b, ll c, ll d){return max(max(max(a,b),c),d);}

// -------------------------------------------------------------------------------------------------------------

int St[200005], T;
string S;

void doit(int l, int st)
{
    int bits = __builtin_popcount(st);
    int r = SZ(S) - bits;
    f(i,l,r-1) S[i] = '9';
    f(i,r,SZ(S)-1)
    {
        int d = 31 - __builtin_clz(st);
        S[i] = (char) (d + '0');
        st ^= (1<<d);
    }
}

void solve()
{
    f(i,0,SZ(S)-1)
    {
        int d = S[i] - '0';
        St[i+1] = St[i] ^ (1<<d);
    }

    fd(i,SZ(S)-1,0)
    {
        int d = S[i] - '0';
        fd(x,d-1,0)
        {
            int st = St[i] ^ (1<<x);
            int bits = __builtin_popcount(st);
            int rem = SZ(S) - i - 1;
            //cout << i << " with " << x << " would be state " << st << "\n";
            if(rem >= bits)
            {
                S[i] = (char) (x + '0');
                doit(i+1,st);
                int l = 0, r = SZ(S) - 1;
                while(l <= r && S[l] == '0' && S[r] == '0') l++, r--;
                cout << S.substr(l,r-l+1) << "\n";
                return;
            }
        }
    }
}

int main()
{
    faster_io();

    cin >> T;
    f(tt,1,T)
    {
        cin >> S;
        solve();
    }
}
