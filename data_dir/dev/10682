#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<unordered_set>
#include<unordered_map>
using namespace std;
int n;
char buf[102];
string s[102];
vector<int> v[102];

vector<pair<int, int> > vv;
bool use[102];
int siz;
inline void dfs(int b){
    use[b] = true;
    for (int i = 0; i < v[b].size(); i++){
        if (use[v[b][i]]){

        }
        else{
            dfs(v[b][i]);
        }
    }
    vv.push_back(make_pair(siz, b));
    siz++;
}
#define MAX 102
vector<int> r[MAX];
int deg[MAX];

inline void dfs2(int b){
    use[b] = false;
    for (int i = 0; i < r[b].size(); i++){
        if (use[r[b][i]]){
            puts("Impossible");
            exit(0);
        }
    }
}
queue<int> q;
vector<char> vvv;
int main(){
    cin >> n;
    for (int i = 0; i < n; i++){
        scanf("%s", buf);
        s[i] = buf;
    }
    for (int i = 0; i + 1 < n; i++){
        int siz = min(s[i].size(), s[i + 1].size());
        string a = s[i].substr(0,siz);
        string b = s[i+1].substr(0, siz);
        if (a == b){
            if (s[i].size() > s[i + 1].size()){
                puts("Impossible");
                return 0;
            }
        }
        for (int i = 0; i < a.size(); i++){
            if (a[i] == b[i]){
                continue;
            }
            v[a[i] - 'a'].push_back(b[i] - 'a');
            break;
        }
    }
    for (int i = 0; i < 26; i++){
        sort(v[i].begin(), v[i].end());
        v[i].erase(unique(v[i].begin(), v[i].end()), v[i].end());
        for (int j = 0; j < v[i].size(); j++){
            r[v[i][j]].push_back(i);
            deg[v[i][j]]++;
        }
        
    }
    for (int i = 0; i < 26; i++){
        if (use[i] == false){
            dfs(i);
        }
    }
    sort(vv.begin(), vv.end());
    reverse(vv.begin(), vv.end());
    for (int i = 0; i < vv.size(); i++){
        dfs2(vv[i].second);
    }
    for (int i = 0; i < 26; i++){
        if (deg[i] == 0){
            q.push(i);
        }
    }
    while (!q.empty()){
        int b = q.front();
        q.pop();
        vvv.push_back(b + 'a');
        for (int i = 0; i < v[b].size(); i++){
            deg[v[b][i]]--;
            if (deg[v[b][i]] == 0){
                q.push(v[b][i]);
            }
        }
    }
    //reverse(vvv.begin(), vvv.end());
    for (int i = 0; i < vvv.size(); i++){
        cout << vvv[i];
    }
    puts("");
    return 0;
}