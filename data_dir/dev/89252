#include<bits/stdc++.h>
using namespace std;

#define F first
#define S second
#define PB push_back
#define all(x) x.begin(), x.end()

#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> os;

typedef long long ll; 
typedef long double ld;

const int N = 200 * 1000 + 10, mod = 998244353; 

int id[N], a[N];

os fen[N];

void insert(int x, int y)
{
    x++;
    for(; x < N; x += x & -x)
        fen[x].insert(y);
}

void erase(int x, int y)
{
    x++;
    for(; x < N; x += x & -x)
        fen[x].erase(y);
}

int get(int x, int y)
{
    int ans = 0;
    for(; x; x -= x & -x)
        ans += fen[x].order_of_key(y);
    return ans;
}

int32_t main()
{
	ios::sync_with_stdio(0); cin.tie(0);
	
    int n, q;
    cin>> n >> q;
    for(int i = 1; i <= n; i++) 
    {
        int x;
        cin>> x;
        id[x] = i;
    }
    for(int i = 1; i <= n; i++)
    {
        int x;
        cin>> x;
        a[i] = id[x];
        insert(i, a[i]);
    }
    while(q--)
    {
        int t;
        cin>> t;
        if(t==2)
        {
            int x, y;
            cin>> x >> y;
            erase(x, a[x]);
            erase(y, a[y]);
            swap(a[x], a[y]);
            insert(x, a[x]);
            insert(y, a[y]);
        }
        else
        {
            int x, y, l, r;
            cin>> x >> y >> l >> r;
            int ans = 0;
            for(int i = l; i <= r; i++) 
                ans += (a[i]>= x && a[i] <= y);
            r++;y++;
            cout<< get(r,y) - get(l,y) - get(r,x) + get(l,x) << '\n';
            
        }
    }
}