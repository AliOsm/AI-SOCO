#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%Ld"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
#include <utility>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
#define EPS 1E-9
typedef complex<double> point;
#define y1 y111
#define y2 y222
double y1 , y2 , yw , xb , yb , r;
double ASIN(double w){
  if(w<-1.0)w=-1.0;
  if(w>1.0)w=1.0;
  return asin(w);
}
int main(){
  cin>>y1>>y2>>yw>>xb>>yb>>r;
  y1 += EPS;
  y2 -= EPS;
  double st = yw - r;
  double plo = 2*st - y1 , phi = 2*st - y2;
  if(plo > phi)swap(plo , phi);
  double D = sqrt(SQR(xb) + SQR(plo - yb));
  double ang = ASIN(r/D);
  point dir = point(0 , plo) - point(xb , yb);
  dir *= polar(1.0 , -ang);
  //cout<<dir<<endl;
  double ty = yb + (fabs(xb / dir.real()))*dir.imag();
  //cout<<ty<<endl;
  if(ty < phi-r+EPS){
   double X = xb + ((st-yb)/dir.imag()) * dir.real();
   printf("%.18lf\n" , X);
                    }
  else puts("-1");
  return 0;
}
