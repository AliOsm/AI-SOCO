#include <bits/stdc++.h>
#define Tree int h,int l,int r,int L,int R
#define left 2*h,l,(l+r)/2,L,R
#define right 2*h+1,(l+r)/2+1,r,L,R
#define F first
#define S second
#define Pb push_back
#define Infr 1000000000 
using namespace std;
int n,A,B,q,T,type,x;
int in[500006],out[500006],ANS[500006];
vector < int > v[500006];
int v1[3000006],v2[3000006];
pair < int , int > Ans;
void Dfs(int x,int parent)
{
	in[x]=++T;
	
	for (int i=0; i<v[x].size(); i++)
		if (v[x][i]!=parent) Dfs(v[x][i],x);
	
	out[x]=T;	
}
void Update1(Tree,int Time)
{
	if (L>r || l>R) return ;
	if (L<=l && r<=R)
	{
		v1[h]=Time;
		return ;
	}
	
	Update1(left,Time);
	Update1(right,Time);	
}
void Update2(Tree,int Time)
{
	if (L>r || l>R) return ;
	if (L<=l && r<=R)
	{
		v2[h]=Time;
		return ;
	}
	
	Update2(left,Time);
	Update2(right,Time);
	
	v2[h]=max(v2[2*h],v2[2*h+1]);
}
int Get1(Tree)
{
	if (L>r || l>R) return 0;
	if (L<=l && r<=R) return v1[h];
	return max(v1[h],max(Get1(left),Get1(right)));
}
int Get2(Tree)
{
	if (L>r || l>R) return 0;
	if (L<=l && r<=R) return v2[h];
	return max(Get2(left),Get2(right));
}
main ()
{
	scanf("%d",&n);
	
	for (int i=1; i<n; i++)
	{
		scanf("%d",&A);
		scanf("%d",&B);
		
		v[A].Pb(B);
		v[B].Pb(A);
	}
	
	Dfs(1,1);
	
	scanf("%d",&q);
	
	for (int i=1; i<=q; i++)
	{
		scanf("%d",&type);
		scanf("%d",&x);

		if (type==1) ANS[i]=1;
		if (type==2) ANS[i]=0;

		if (type==1) Update1(1,1,n,in[x],out[x],i);
			else
		if (type==2) Update2(1,1,n,in[x],in[x],i);
			else
		if (type==3)
		{
			A=Get1(1,1,n,in[x],in[x]);
			B=Get2(1,1,n,in[x],out[x]);

			printf("%d\n",ANS[max(A,B)]);
		}
	}
} 