#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree = 
//  tree<key, val, less<key>, rb_tree_tag, tree_order_statistics_node_update>;
using namespace std;
typedef long long int64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//998244353;
const int base = 2187;
const double eps = 1e-8;
const int N = 5200;

int n, m, k;
int a[N][N];

int get_sum(int x1, int y1, int x2, int y2) 
{
  int r = a[x1][y1];
  if (x2 >= 0) r -= a[x2][y1];
  if (y2 >= 0) r -= a[x1][y2];
  if (x2 >= 0 && y2 >= 0)
    r += a[x2][y2];
  return r;
}

bool can(int x)
{
  for (int i = x - 1; i < n; i += x) {
    for (int j = x - 1; j < n; j += x) {
      int s = get_sum(i, j, i - x, j - x); 
      if (s && s != x * x)
        return false;
    }
  }
  return true;
}

void solve(int test)
{
  cin >> n;
  for (int i = 0; i < n; ++i) {
    string s; cin >> s;
    for (int j = 0; j < n / 4; ++j) {
      int val;
      if (s[j] > '9')
        val = s[j] - 'A' + 10;
      else
        val = s[j] - '0';
      a[i][j * 4    ] = val >> 3 & 1;
      a[i][j * 4 + 1] = val >> 2 & 1;
      a[i][j * 4 + 2] = val >> 1 & 1;
      a[i][j * 4 + 3] = val & 1;
    }
  }
  for (int i = 1; i < n; ++i) {
    a[i][0] += a[i - 1][0];
    a[0][i] += a[0][i - 1];
  }
  for (int i = 1; i < n; ++i) {
    for (int j = 1; j < n; ++j) {
      a[i][j] += a[i][j - 1] + a[i - 1][j] - a[i - 1][j - 1];
    }
  }
  int ans = 1;
  for (int i = 1; i * i <= n; ++i) {
    if (n % i == 0) {
      if (can(n / i)) {
        ans = n / i;
        break;
      }
      if (can(i)) {
        ans = i;
      } 
    }
  }
  cout << ans << '\n';
}

void precalc()
{
}

int main()
{
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i)
      solve(i);
  //cerr << endl << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count();
  return 0;
}
