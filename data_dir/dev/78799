/***********************************************\
 |Author: WiYR
 |Created Time: 2013/8/17 22:09:17
 |File Name: Divisor Tree.cpp
 |Description: 
\***********************************************/
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>

using namespace std;
__int64 a[10],b[10];
bool vis[10];
__int64 ans,cnt;
int main() {
//  freopen("input.txt","r",stdin); 
    __int64 n,i,j;
    scanf("%I64d",&n);
    for(int i=0;i<n;i++)
        scanf("%I64d",a+i);
    sort(a,a+n);
    for(i=0;i<n;i++){
        __int64 t=a[i];
        cnt=0;
        
        for(j=2;j*j<=t;j++){
            while(t%j==0)
                cnt++,t/=j;
        }
        if(t!=1)
            cnt++; 
        if(cnt!=1)
            ans+=cnt;
        b[i]=cnt;       
    }
    for(i=n-1;i>=0;i--){
        while(true){
            __int64 maxm=0,k;
            for(j=i-1;j>=0;j--){
                if(a[i]%a[j]==0&&b[j]>maxm&&!vis[j]){
                    maxm=b[j];
                    k=j;
                }
            }
            if(maxm){
                a[i]/=a[k];
                vis[k]=true;
                ans-=maxm;
            }
            else break;
        }
    }
    ans=ans+n;
    for(i=0;i<n-1;i++)
        if(!vis[i]) {ans++;break;} 
    printf("%I64d\n",ans);
    return 0;
}
