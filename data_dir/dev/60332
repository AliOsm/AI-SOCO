#pragma GCC optimize("Ofast")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include<bits/stdc++.h>
using namespace std;

#define FOR(i,ii,iii) for(int i=ii;i<iii;i++)
#define PB push_back

const int N=2e5+1,INF=1e9;
int n,k,dmtr,l,r,x,q,v[5];

struct STree { // [cerrado-abierto)
	vector<int> st;int n;
	STree(): st(4*N+5,0), n(N) {}
	void upd(int k, int s, int e, int p, int v){
		if(s+1==e){st[k]=v;return;}
		int m=(s+e)/2;
		if(p<m)upd(2*k,s,m,p,v);
		else upd(2*k+1,m,e,p,v);
		st[k]=max(st[2*k],st[2*k+1]);
	}
	int query(int k, int s, int e, int a, int b){
		if(s>=b||e<=a)return -INF;
		if(s>=a&&e<=b)return st[k];
		int m=(s+e)/2;
		return max(query(2*k,s,m,a,b),query(2*k+1,m,e,a,b));
	}
	void upd(int p, int v){upd(1,0,n,p,v);}
	int query(int a, int b){return query(1,0,n,a,b);}
}; // usage: STree st(n);st.upd(i,v);st.query(s,e);

STree s[64];
void upd(int p) {
	FOR(i,0,k)scanf("%d",&v[i]);
	FOR(i,0,1<<k) {
		int add=0;
		FOR(j,0,k) {
			if(i&(1<<j))add+=v[j];
			else add-=v[j];
		}
		s[2*i].upd(p,add);
		s[2*i+1].upd(p,-add);
	}
}

int main() {
	scanf("%d%d",&n,&k);
	FOR(i,0,n)upd(i);
	scanf("%d",&q);
	while(q--) {
		scanf("%d",&dmtr);
		if(dmtr==1) {
			scanf("%d",&x);x--;
			upd(x);
		} else {
			scanf("%d%d",&l,&r);l--,r--;
			int mx=0;
			FOR(i,0,1<<k){
				mx=max(mx,s[2*i].query(l,r+1)+s[2*i+1].query(l,r+1));
			}
			printf("%d\n",mx);
		}
	}
}