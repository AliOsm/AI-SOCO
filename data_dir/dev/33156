// KALAM
# include<bits/stdc++.h>
# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

const int N = 100000 + 77, NN = 1000 + 77 , Sq = 333;
int n , m , q , Hv[N] , R[NN][NN];
cc_hash_table < int , int > P[N];
vector < int > C[N] , V;
int Find(int v , int tp){
   return P[tp][v] == 0 ? v : (P[tp][v] = Find(P[tp][v] , tp));
}
inline void Merge(int v , int u , int c){
   u = Find(u , c);
   v = Find(v , c);
   if(v != u){
      P[c][v] = u;
   }
}
int main(){
   memset(Hv , - 1 , sizeof(Hv));
   ios::sync_with_stdio(0);cin.tie(0);
   cin >> n >> m;
   for(int i = 1;i <= m;++ i){
      int v , u , c;
      cin >> v >> u >> c;
      C[v].push_back(c);
      C[u].push_back(c);
      Merge(v , u , c);
   }
   for(int i = 1;i <= n;++ i){
      sort(C[i].begin() , C[i].end());
      C[i].resize(unique(C[i].begin() , C[i].end()) - C[i].begin());
      if((int)C[i].size() > Sq){
         Hv[i] = V.size();
         V.push_back(i);
      }
   }
   int sz = V.size();
   for(int i = 0;i < sz;++ i){
      int id = V[i];
      for(int x : C[id]){
         for(int j = 0;j < sz;++ j){
            int v = id , u = V[j];
            if((P[x].find(u) == P[x].end())){
               continue ;
            }
            R[i][j] += Find(v , x) == Find(u , x);
         }
      }
   }
   cin >> q;
   while(q --){
      int v , u;
      cin >> v >> u;
      if((int) C[v].size() > (int) C[u].size()){
         swap(v , u);
      }
      if(Hv[v] > - 1){
         cout << R[Hv[v]][Hv[u]] << '\n';
      }
      else {
         int res = 0;
         for(int x : C[v]){
            if((P[x].find(u) == P[x].end())){
               continue ;
            }
            res += Find(v , x) == Find(u , x);
         }
         cout << res << '\n';
      }
   }

   return 0;
}
