#include <bits/stdc++.h>
using namespace std;

#define ll long long

ll mod = (ll) 1e9 + 7;

vector<pair<int,int>> a;

const int mx=(int)2e5;

ll fac [mx];
ll inv [mx];

ll calc(int x1, int y1, int x2, int y2) {
    if (x2 == x1 || y2 == y1)
        return 1;
    if (y2 < y1)
        return 0;
    ll ret = fac[x2 - x1 + y2 - y1];
    ret = ret * inv[x2 - x1] % mod;
    ret = ret * inv[y2 - y1] % mod;

    return ret;
}


ll calc(int i, int j) {
    return calc(a[i].first, a[i].second, a[j].first, a[j].second);
}

ll modPow(ll x, ll y) {
    if (y == 0)
        return 1;
    if (y % 2 == 0) {
        ll z = modPow(x, y / 2);
        return z * z % mod;
    }
    ll z = modPow(x, y - 1);
    return x * z % mod;
}

ll inverse(ll x) {
    return modPow(x, mod - 2);
}

void pre() {
    fac[0] = 1;
    for (int i = 1; i < 2e5; i++)
        fac[i] = fac[i - 1] * i % mod;

    for (int i = 0; i < 2e5; i++)
        inv[i] = inverse(fac[i]);
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    
    pre();
    
    int h,w,n,s;
    cin >> h >> w >> n >> s;
    
    for (int i = 0; i < n; i++){
        int x,y;
        cin >> x >> y;
        a.push_back(make_pair(x, y));
    }
    a.push_back(make_pair(h, w));
    sort(a.begin(),a.end());

    ll dp[n + 1][20]={{0}};
    for (int i = 0; i <= n; i++) {
        dp[i][0] = calc(1, 1, a[i].first, a[i].second);
        for (int k = 0; k < 20; k++) {
            for (int j = 0; j < i; j++) {
                if (k > 0)
                    dp[i][k] += (dp[j][k - 1]-dp[j][k]) * calc(j, i) % mod;
                else
                    dp[i][k] -= dp[j][k] * calc(j, i) % mod;
            }
            dp[i][k] %= mod;
        }
    }

    ll tot = calc(1, 1, h, w);
    ll rem = tot;
    ll ans = 0;

    ll val [20];
    val[0] = s;
    for (int i = 1; i < 20; i++)
        val[i] = (val[i - 1] + 1) / 2;

    for (int i = 0; i < 20; i++) {
        rem -= dp[n][i];
        ans = (ans + val[i] * dp[n][i] % mod) % mod;
    }
    ans = (ans + rem % mod) % mod;

    ans = (ans * inverse(tot)) % mod;

    ans = (ans % mod + mod) % mod;
    
    cout << ans << endl;
    
    
}