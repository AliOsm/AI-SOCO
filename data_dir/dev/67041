#include <bits/stdc++.h>
#define endl '\n'

//#pragma GCC optimize ("O3")
//#pragma GCC target ("sse4")

using namespace std;
template<class T, class T2> inline int chkmax(T &x, const T2 &y) { return x < y ? x = y, 1 : 0; }
template<class T, class T2> inline int chkmin(T &x, const T2 &y) { return x > y ? x = y, 1 : 0; }
const int MAXN = 2042;

int n, k;
string t[MAXN];

void read()
{
	cin >> n >> k;
	for(int i = 0; i < n; i++)
		cin >> t[i];
}

int mx_a[MAXN][MAXN];
vector<pair<int, int> > li[4 * MAXN];
int cand[MAXN][MAXN];

void solve()
{

	for(int i = 0; i < n; i++)
		for(int j = 0; j < n; j++)
		{
			mx_a[i][j] = 0;
			if(i) chkmax(mx_a[i][j], mx_a[i - 1][j]);
			if(j) chkmax(mx_a[i][j], mx_a[i][j - 1]);
			mx_a[i][j] += t[i][j] == 'a';
		}

	int pref_k = 0;
	for(int i = 0; i < n; i++)
		for(int j = 0; j < n; j++)
		{
			int len = i + j + 1;
			int cnt_free = len - mx_a[i][j];
			
			if(cnt_free <= k)
				chkmax(pref_k, len);
		}

	string ret;
	for(int i = 0; i < pref_k; i++)
		ret.push_back('a');

	for(int i = 0; i < n; i++)
		for(int j = 0; j < n; j++)
		{
			int len = i + j + 1;
			int cnt_free = len - mx_a[i][j];
			li[len - 1].push_back({i, j});

			if(cnt_free <= k)
				if(pref_k == len)
					cand[i][j] = 1; 
		}

	if(pref_k == 0)
	{
		cand[0][0] = 1;
		ret.push_back(t[0][0]);
		pref_k = 1;
	}

	for(int l = pref_k; l < 2 * n - 1; l++)
	{
		char mn = 'z';
		for(auto it: li[l])
		{
			int i = it.first, j = it.second;
			if(i && cand[i - 1][j]) chkmin(mn, t[i][j]);
			if(j && cand[i][j - 1]) chkmin(mn, t[i][j]);
		}

		ret.push_back(mn);
		
		for(auto it: li[l])
		{
			int i = it.first, j = it.second;
			if(i && cand[i - 1][j] && mn == t[i][j]) cand[i][j] = 1;
			if(j && cand[i][j - 1] && mn == t[i][j]) cand[i][j] = 1;
		}	
	}

	cout << ret << endl;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	read();
	solve();
	return 0;
}

