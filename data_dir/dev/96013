#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef pair<int, int > pii;
typedef pair<ll, ll > pll;
typedef complex<double> point;

#define X real()
#define Y imag()
#define F first
#define S second
#define mk(x, y) make_pair((x), (y))
#define mt(x, y, z ,w) make_tuple((x), (y), (z),(w))
#define pb(x) push_back(x)
#define sz(x)((int)((x).size()))
#define all(x)	((x).begin()), ((x).end())
#define debug(x) dout << "[" #x "] = " << x << '\n'
#define IN "input.in"
#define OUT "output.out"

#define MAX 205
#define MOD 1000000007
#define eps 1e-7

const ll OO = 0x0101010101010101;

class debug_t {
public:
    template<typename T>
    debug_t& operator << (const T& o) {
#ifdef Adel_SaadEddin_PC
        cout << o << flush;
        cerr << o << flush;
#endif
        return *this;
    }
    void end() {
        *this << "\nExecution Time = " << clock() * 1.0 / CLOCKS_PER_SEC << '\n';
        exit(0);
    }
} dout;


int dr[] = { 0,0,-1,1 };
int dc[] = { -1,1,0,0 };

int n, m;
int letter[MAX], digit[MAX], sign[MAX];
char grid[MAX][MAX];
int dp[MAX][2][2][2];

bool let(char c) {
    return c >= 'a' && c <= 'z';
}
bool dig(char c) {
    return c >= '0' && c <= '9';
}
bool sig(char c) {
    return !dig(c) && !let(c);
}

int solve(int i, bool b1, bool b2, bool b3) {
    if(i >= n) {
        if(b1 && b2 && b3)
            return 0;
        return 1e9;
    }

    int &ret = dp[i][b1][b2][b3];
    if(ret + 1) return ret;
    ret = 0;

    int solve1 = letter[i] + solve(i + 1, true, b2, b3);
    int solve2 = digit[i] + solve(i + 1, b1, true, b3);
    int solve3 = sign[i] + solve(i + 1, b1, b2, true);

    return ret = min(solve1, min(solve2, solve3));
}

int main() {
#ifdef Adel_SaadEddin_PC
    freopen(IN, "r", stdin);
//    freopen(OUT, "w", stdout);
#endif // Adel_SaadEddin_PC

ios_base::sync_with_stdio(false);

    memset(dp, -1, sizeof(dp));
    cin >> n >> m;

    for(int i = 0; i < MAX; i++)
        letter[i] = digit[i] = sign[i] = 1e9;

    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cin >> grid[i][j];
            if(let(grid[i][j]))
                letter[i] = min(letter[i], min(j, m - j));
            if(dig(grid[i][j]))
                digit[i] = min(digit[i], min(j, m - j));
            if(sig(grid[i][j]))
                sign[i] = min(sign[i], min(j, m - j));
        }
    }

//    for(int i = 0; i < n; i++)
//        cout << letter[i] << " " << digit[i] << " " << sign[i] << "\n";

    cout << solve(0, false, false, false) << "\n";

    return 0;
}



