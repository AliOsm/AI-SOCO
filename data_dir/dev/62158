#include<bits/stdc++.h> 

#define ssync ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define F first
#define S second
#define mp make_pair
#define pb push_back

using namespace std;

typedef long long int ll;
typedef unsigned long long int ull;
typedef long double ld;

const ll MOD = 1e9+7;
const ld PI = 3.14159265;

ll powerWithMod(ll base, ll exponent, ll modulus = LLONG_MAX)
{
	ll result = 1;
	base %= modulus;
	while(exponent > 0)
	{
		if(exponent % 2 == 1)
			result = (result * base) % modulus;
		exponent >>= 1;
		base = (base * base) % modulus;
	}
	return result;
}

ll modInverse(ll a, ll m = MOD)
{
	return powerWithMod(a, m-2, m);
}

int n,m,dp[312345][26],x,y,ans;
string a;
vector<int> adj[312345];

bool cycle(int v, vector<int>& vis)
{
	if(vis[v] == 1)
		return true;
	vis[v]=1;
	bool ans=false;
	for(auto& x:adj[v])
		if(vis[x]<2)
			ans or_eq cycle(x,vis);
	vis[v]=2;
	return ans;
}

void dfs(int v, vector<int>& vis)
{
	vis[v] = 1;
	for(auto&x:adj[v])
	{
		if(vis[x]==0)
			dfs(x,vis);
		for(int i=0;i<26;i++)
		{
			dp[v][i]=max(dp[v][i],dp[x][i]);
			ans=max(ans,dp[v][i]);
		}
	}
	dp[v][a[v-1]-'a']++;
	ans=max(ans,dp[v][a[v-1]-'a']);
}

int main()
{
	ssync;
	cin>>n>>m>>a;
	for(int i=0;i<m;i++)
	{
		cin>>x>>y;
		adj[x].pb(y);
	}
	vector<int> vis(n+1,0);
	for(int i=1;i<=n;i++)
		if(vis[i]==0 and cycle(i, vis))
		{
			cout<<"-1\n";
			return 0;
		}
	fill(vis.begin(),vis.end(),0);
	for(int i=1;i<=n;i++)
		if(vis[i]==0)
			dfs(i,vis);
	cout<<ans<<"\n";
	return 0;
}
