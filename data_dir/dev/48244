#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <queue>
#include <map>
#include <string.h>
#include <set>

const int N=100010;
const int inf=0x3f3f3f3f;

using namespace std;

#define sz(x) ((x).size())

struct data
{
	int xl,yl,xr,yr;
	data() {}
	data(int xl,int yl,int xr,int yr) :xl(xl),yl(yl),xr(xr),yr(yr) {}
	bool operator < (const data &r) const
	{
		if(xl!=r.xl) return xl<r.xl;
		if(xr!=r.xr) return xr<r.xr;
		if(yl!=r.yl) return yl<r.yl;
		if(yr!=r.yr) return yr<r.yr;
	}
};

set<data> st;

int xl[101],yl[101],xr[101],yr[101];

bool solve(int xl,int yl,int xr,int yr)
{
	bool f=0;
	if(xl>xr) swap(xl,xr);
	if(yl>yr) swap(yl,yr);
	data in1,in2;
	set<data>::iterator del;
	for(set<data>::iterator it=st.begin();it!=st.end();it++)
	{
		if(yl==yr)
		{
			if(xl!=it->xl) continue;
			if(yl>=it->yr) continue;
			if(yl<=it->yl) continue;
			if(xr!=it->xr) continue;
			in1=(data(it->xl,it->yl,it->xr,yl));
			in2=(data(it->xl,yl,it->xr,it->yr));
			del=it;
			f=1;
			break;
		}
		else
		{
			if(yl!=it->yl) continue;
			if(xl>=it->xr) continue;
			if(xl<=it->xl) continue;
			if(yr!=it->yr) continue;
			in1=(data(it->xl,it->yl,xl,it->yr));
			in2=(data(xl,it->yl,it->xr,it->yr));
			del=it;
			f=1;
			break;
		}
	}
	if(!f) return 0;
	st.erase(del);
	st.insert(in1);
	st.insert(in2);
	return 1;
}

bool vis[101];

int main()
{
	int x,y,n;
	scanf("%d%d%d",&x,&y,&n);
	st.insert(data(0,0,x,y));
	for(int i=0;i<n;i++)
	{
		scanf("%d%d%d%d",&xl[i],&yl[i],&xr[i],&yr[i]);
	}
	for(int t=0;t<n;t++)
	{
		for(int i=0;i<n;i++)
		{
			if(vis[i]) continue;
			if(!solve(xl[i],yl[i],xr[i],yr[i])) continue;
			vis[i]=1;
		}
	}
	vector<int> vt;
	for(set<data>::iterator it=st.begin();it!=st.end();it++)
		vt.push_back((it->xr-it->xl)*(it->yr-it->yl));
	sort(vt.begin(),vt.end());
	for(int i=0;i<sz(vt);i++)
		cout<<vt[i]<<" ";
	cout<<endl;
	return 0;
}
