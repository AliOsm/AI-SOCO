#define _CRT_SECURE_NO_WARNINGS
#include <unordered_set>
#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <bitset>
#include <string>
#include <cstdio>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>

using namespace std;

const int N = 301;

int n, T;
int a[N];
int dp[N];
int d[N][N];
int tmp[N][N], res[N][N], res1[N][N];

int mult(int m)
{
    for (int i = 1; i < N; ++i)
    {
        for (int j = 1; j < N; ++j)
            tmp[i][j] = d[i][j], res[i][j] = 0;
    }
    while (m > 0)
    {
        if (m % 2 == 1)
        {
            for (int i = 1; i < N; ++i)
            {
                for (int j = i; j < N; ++j)
                {
                    res1[i][j] = 0;
                    for (int k = i; k <= j; ++k)
                        res1[i][j] = max(res1[i][j], res[i][k] + tmp[k][j]);
                }
            }
            for (int i = 1; i < N; ++i)
                for (int j = i; j < N; ++j)
                    res[i][j] = res1[i][j];
        }
        m /= 2;
        for (int i = 1; i < N; ++i)
        {
            for (int j = i; j < N; ++j)
            {
                res1[i][j] = 0;
                for (int k = i; k <= j; ++k)
                    res1[i][j] = max(res1[i][j], tmp[i][k] + tmp[k][j]);
            }
        }
        for (int i = 1; i < N; ++i)
        {
            for (int j = i; j < N; ++j)
                tmp[i][j] = res1[i][j];
        }

    }
    int mx = 0;
    for (int i = 1; i < N; ++i)
    {
        for (int j = i; j < N; ++j)
            mx = max(mx, res[i][j]);
    }
    return mx;
}



int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    scanf("%d%d", &n, &T);
    for (int i = 0; i < n; ++i)
        scanf("%d", &a[i]);
    for (int l = 1; l < N; ++l)
    {
        if (a[0] < l)
            dp[0] = 0;
        else
            dp[0] = 1;
        for (int i = 1; i < n; ++i)
        {
            if (a[i] < l)
            {
                dp[i] = 0;
                continue;
            }
            dp[i] = 1;
            for (int j = 0; j < i; ++j)
            {
                if (a[j] >= l && a[j] <= a[i])
                    dp[i] = max(dp[i], dp[j] + 1);
            }
        }
        for (int i = 0; i < n; ++i)
            d[l][a[i]] = max(d[l][a[i]], dp[i]);
    }
    for (int l = 1; l < N; ++l)
    {
        int mx = d[l][l];
        for (int r = l + 1; r < N; ++r)
        {
            mx = max(mx, d[l][r]);
            d[l][r] = max(d[l][r], mx);
        }
    }
    for (int r = N - 1; r >= 1; --r)
    {
        int mx = d[r][r];
        for (int l = r - 1; l >= 1; --l)
        {
            mx = max(mx, d[l][r]);
            d[l][r] = max(mx, d[l][r]);
        }
    }
    cout << mult(T);
    return 0;
}