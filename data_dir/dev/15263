#include<bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int i = 0 ; i < n ; ++i )
#define clr( t , val ) memset( t , val , sizeof( t ) )

#define pb push_back
#define all( v ) v.begin() , v.end()
#define SZ( v ) ((int)(v).size())

#define N 100005
#define EPS (1e-8)

typedef vector< int > vi;
typedef long long ll;
typedef long double ld;

struct Point{
    ll m , b;
    Point(){}
    Point( ll m , ll b ): m( m ) , b( b ) {}
    ld slope(){ return -1.0*b/m; }
};
Point operator - ( const Point &A , const Point &B ){ return Point( A.m - B.m , A.b - B.b ); }
int sz = 0;
Point H[ N + 5 ];
ll mm[ N + 5 ];
void add( ld m , ld b ){
    Point P( m , b );
    while( sz >= 2 && ( P - H[ sz - 1 ] ).slope() - ( H[ sz - 1 ] - H[ sz - 2 ] ).slope() < EPS ) sz--;
    H[ sz ] = P;
    if( sz ) mm[ sz - 1 ] = ( P - H[ sz - 1 ] ).slope();
    sz ++;
}
ll eval( ll x ){
    int ind = lower_bound( mm , mm + sz - 1 , (ld)x ) - mm;
    return x * H[ ind ].m + H[ ind ].b;
}
int main(){
    int n , x;
    while( sc( n ) == 1 ){
        sz = 0;
        vi a , b;
        REP( i , n ) sc( x ) , a.pb( x );
        REP( i , n ) sc( x ) , b.pb( x );
        vector< ll > DP( n );
        add( b[ 0 ] , DP[ 0 ] );
        for( int j = 1 ; j < n ; ++j ){
            DP[ j ] = eval( a[ j ] );
            add( b[ j ] , DP[ j ] );
        }
        cout << DP[ n - 1 ] << '\n';
    }
}
