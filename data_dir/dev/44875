#include <bits/stdc++.h>

typedef long long tint;
typedef long double ldouble;


#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define forn(i,n) forsn(i,0,n)
#define dforn(i,n) for(tint i = tint(n)-1; i >= 0; i--)
#define debug(x) cout << #x << " = "  << x << endl

using namespace std;

void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint k,d,t;
	while (cin >> k >> d >> t)
	{
		tint u = (k/d)*d + (k%d);
		tint v = ((d - (k%d))%d);
		ldouble uD = ldouble(u);
		ldouble vD = ldouble(v);
		
		ldouble kD = ldouble(k);
		ldouble dD = ldouble(d);
		ldouble tD = ldouble(t);
		
		vD /= 2.0;
		
		ldouble s = uD + vD;
		ldouble p = ldouble(floor(tD/s));
		ldouble r = ldouble(ceil(kD/dD));
		ldouble tM = tD - p*s; // Como viene de una cuentita con enteros no deberia haber cancelacion catastrofica, porque "el unico caso donde son parecidos es porque son iguales"
		
		
		if (tM <= uD)
			cout << fixed << showpoint << setprecision(20) << r*dD*p + tM << "\n";
		else
			cout << fixed << showpoint << setprecision(20) << r*dD*p + 2.0*tM - uD << "\n";
		
	}
	
	return 0;
}




