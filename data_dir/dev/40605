#include <bits/stdc++.h>
using namespace std;

const int N = 1e6 + 10;

vector <int> fac[N];
int valid[N];
int p;

void _init(){
	for (int i = 2; i <= 1000000; i++) valid[i] = 1;
	for (int i = 2; i <= 1000000; i++){
		if (valid[i]){
			fac[i].push_back(i);
			for (int j = i * 2; j <= 1000000; j += i){
				fac[j].push_back(i);
				valid[j] = 0;
			}
		}
	}
}

long long calc(long long x){
	int n, cnt, flag;
	long long prod, sum;
	n = (int)fac[p].size(); sum = 0;
	for (int i = 1; i < (1 << n); i++){
		prod = 1; cnt = 0;
		for (int j = 0; j < n; j++){
			if (i & (1 << j)){
				prod *= fac[p][j];
				cnt++;
			}
		}
		if (cnt & 1) flag = 1;
		else flag = -1;
		sum += x / prod * flag;
	}
	return x - sum;
}

int main(){
	_init();
	int T;
	long long rec, l, r, mid, x, k;
	scanf("%d",&T);
	while (T--){
		scanf("%I64d %d %I64d",&x,&p,&k);
		rec = calc(x);
		l = x; r = 1e18;
		while (r - l > 1){
			mid = (l + r) >> 1;
			if (calc(mid) - rec < k) l = mid;
			else r = mid;
		}
		printf("%I64d\n",r);
	}
	return 0;
}