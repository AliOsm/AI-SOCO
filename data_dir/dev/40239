#define _USE_MATH_DEFINES
#include <array>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;
mt19937 mrand(random_device{}());
int rnd(int x) { return mrand() % x; }

int main() {
  int cas;
  scanf("%d", &cas);
  while (cas--) {
    int n;
    scanf("%d", &n);
    vector<int> p(n + 1);
    for (int i = 1; i <= n; ++i) {
      scanf("%d", &p[i]);
      p[i] /= 100;
    }
    sort(p.begin() + 1, p.begin() + n + 1, greater<int>());
    int x, a, y, b;
    scanf("%d%d%d%d", &x, &a, &y, &b);
    int64 k;
    scanf("%lld", &k);
    int low = 1, high = n + 1;
    vector<int> A(n + 1);
    while (low != high) {
      int mid = (low + high) / 2;
      fill(A.begin() + 1, A.begin() + mid + 1, 0);
      for (int i = 1; i <= mid; ++i) {
        if (i % a == 0) A[i] += x;
        if (i % b == 0) A[i] += y;
      }
      sort(A.begin() + 1, A.begin() + mid + 1, greater<int>());
      int64 sum = 0;
      for (int i = 1; i <= mid; ++i) {
        sum += p[i] * A[i];
      }
      if (sum < k) {
        low = mid + 1;
      } else {
        high = mid;
      }
    }
    if (high == n + 1) high = -1;
    printf("%d\n", high);
  }
  return 0;
}
