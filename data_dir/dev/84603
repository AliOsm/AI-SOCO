#include<bits/stdc++.h>
using namespace std;

#define fi                      first
#define se                      second
#define pb                      push_back
#define endl                    '\n'
#define all(x)                  x.begin(),x.end()
#define pii                     pair<int,int>
#define pll                     pair< long long int, long long int> 
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define SZ(x)                   ((int)x.size())

#define FOR(i,a,b)              for(int i = a; i < b; ++i)
#define REV(i,a,b)              for(int i = a; i >= b; --i)
#define FORE(i,a,b)             for(int i = a; i <= b; ++i)

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

void solve();

int main()
{
        fast;
        int t;
        cin >> t;
        while(t--) {
                solve();
        }
}

#define int ll

template <typename A, typename B>
string to_string(pair<A, B> p);
 
string to_string(const string& s) {
        return '"' + s + '"';
}
 
string to_string(const char* s) {
        return to_string((string) s);
}
 
string to_string(bool b) {
        return (b ? "true" : "false");
}
 
string to_string(vector<bool> v) {
        bool first = true;
        string res = "{";
        for (int i = 0; i < static_cast<int>(v.size()); i++) {
                if (!first) {
                        res += ", ";
                }
                first = false;
                res += to_string(v[i]); 
        }
        res += "}";
        return res;
}
 
template <size_t N>
string to_string(bitset<N> v) {
        string res = "";
        for (size_t i = 0; i < N; i++) {
                res += static_cast<char>('0' + v[i]);
        }
        return res;
}
 
template <typename A>
string to_string(A v) {
        bool first = true;
        string res = "{";
        for (const auto &x : v) {
                if (!first) {
                        res += ", ";
                }
                first = false;
                res += to_string(x);
        }
        res += "}";
        return res;
}
 
template <typename A, typename B>
string to_string(pair<A, B> p) {
        return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
 
void debug_out() { 
        cerr << endl; 
}
 
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
        cerr << " " << to_string(H);
        debug_out(T...);
}
 
#ifdef IGM
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...)
#endif

const int N = 1e5+5;
int L[3][3*N];
int R[3][3*N];
std::vector<int> r(N), g(N), b(N);

inline int val(int x, int y, int z) {
        // debug(x,y,z);
        return (x - y)*(x-y) + (y - z) * (y - z) + (z - x) * (z - x);
}

void solve() {
        memset(L,0,sizeof(L));
        memset(R,0,sizeof(R));
        int nr, ng, nb;
        cin >> nr >> ng >> nb;
        int len = nr + ng + nb;
        std::vector<pair<int,char> > v;

        FOR(i,0,nr) cin >> r[i], v.pb(make_pair(r[i], 'r'));
        FOR(i,0,ng) cin >> g[i], v.pb(make_pair(g[i], 'g'));
        FOR(i,0,nb) cin >> b[i], v.pb(make_pair(b[i], 'b'));

        FOR(i,0,3) L[i][0] = -1, R[i][len+1] = -1;

        sort(all(v));
        FOR(i,1,len+1) {
                char ch = v[i-1].se;
                L[0][i] = L[0][i-1];
                L[1][i] = L[1][i-1];
                L[2][i] = L[2][i-1];
                if(ch == 'r') {
                        L[0][i] = v[i-1].fi;
                }
                else if(ch == 'g') {
                        L[1][i] = v[i-1].fi;
                }
                else {
                        L[2][i] = v[i-1].fi;
                }
        }

        REV(i,len,1) {
                char ch = v[i-1].se;
                R[0][i] = R[0][i+1];
                R[1][i] = R[1][i+1];
                R[2][i] = R[2][i+1];
                if(ch == 'r') {
                        R[0][i] = v[i-1].fi;
                }
                else if(ch == 'g') {
                        R[1][i] = v[i-1].fi;
                }
                else {
                        R[2][i] = v[i-1].fi;
                }
        }
        int ans = 2e18;
        FOR(i,1,len+1) {
                char ch = v[i-1].se;
                if(ch == 'r') {
                        if(L[1][i] != -1 and R[2][i] != -1) {
                                ans = min(ans, val(L[1][i], R[2][i], v[i-1].fi));
                        }
                        if(R[1][i] != -1 and L[2][i] != -1) {
                                ans = min(ans, val(R[1][i], L[2][i], v[i-1].fi));
                        }
                }
                else if(ch == 'g') {
                        if(L[0][i] != -1 and R[2][i] != -1) {
                                ans = min(ans, val(L[0][i], R[2][i], v[i-1].fi));
                        }
                        if(R[0][i] != -1 and L[2][i] != -1) {
                                ans = min(ans, val(R[0][i], L[2][i], v[i-1].fi));
                        }
                }
                else if(ch == 'b') {
                        if(L[0][i] != -1 and R[1][i] != -1) {
                                ans = min(ans, val(L[0][i], R[1][i], v[i-1].fi));
                        }
                        if(R[0][i] != -1 and L[1][i] != -1) {
                                ans = min(ans, val(R[0][i], L[1][i], v[i-1].fi));
                        }
                }
        }
        cout << ans << endl;
}