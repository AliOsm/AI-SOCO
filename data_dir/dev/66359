/* 472D */
#include <iostream>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <deque>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
#include <functional>
using namespace std;
//#pragma comment(linker,"/STACK:102400000,1024000")

#define mpii			map<int,int>
#define vi				vector<int>
#define pii				pair<int,int>
#define vpii			vector<pair<int,int> >
#define rep(i, a, n) 	for (int i=a;i<n;++i)
#define per(i, a, n) 	for (int i=n-1;i>=a;--i)
#define pb 				push_back
#define mp 				make_pair
#define fir				first
#define sec				second
#define all(x) 			(x).begin(),(x).end()
#define SZ(x) 			((int)(x).size())
#define lson			l, mid, rt<<1
#define rson			mid+1, r, rt<<1|1

const int maxn = 2005;
const int INF = 0x3f3f3f3f;
int M[maxn][maxn];
int T[maxn][maxn];
int dist[maxn];
int fa[maxn];
bool visit[maxn];
int n;
	
void kruskal() {
	memset(visit, false, sizeof(visit));
	memset(dist, 0x3f, sizeof(dist));
	int v, mn;
	int i, j, k;
	
	dist[0] = 0;
	for (i=0; i<n; ++i) {
		mn = INF;
		for (j=0; j<n; ++j) {
			if (!visit[j] && dist[j]<mn) {
				mn = dist[j];
				v = j;
			}
		}
		
		assert(mn < INF);
		
		for (j=0; j<n; ++j) {
			if (visit[j]) {
				T[j][v] = T[v][j] = T[j][fa[v]] + mn;
			}
		}
		visit[v] = true;
		
		for (j=0; j<n; ++j) {
			if (M[v][j] < dist[j]) {
				dist[j] = M[v][j];
				fa[j] = v;
			}
		}
	}
}

int main() {
	ios::sync_with_stdio(false);
	#ifndef ONLINE_JUDGE
		freopen("data.in", "r", stdin);
		freopen("data.out", "w", stdout);
	#endif
	
	bool flag = true;
	
	scanf("%d", &n);
	
	rep(i, 0, n)
		rep(j, 0, n)
			scanf("%d", &M[i][j]);
			
	rep(i, 0, n) {
		if (M[i][i] != 0) {
			flag = false;
			goto _output;
		}
		rep(j, i+1, n) {
			if (M[i][j]!=M[j][i] || M[i][j]==0) {
				flag = false;
				goto _output;
			}
		}
	}
	
	kruskal();
	
	rep(i, 0, n) {
		rep(j, i+1, n) {
			if (M[i][j] != T[i][j]) {
				flag = false;
				goto _output;
			}
		}
	}
	
	_output:
	puts(flag ? "YES":"NO");
	
	#ifndef ONLINE_JUDGE
		printf("time = %d.\n", (int)clock());
	#endif
	
	return 0;
}
