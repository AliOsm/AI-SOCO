#pragma comment(linker, "/stack:256000000")

#include <cstdio>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <cstring>
#include <string>
#include <cmath>
#include <ctime>
#include <cassert>
#include <queue>

using namespace std;

#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++)
#define sz(v) (int)(v).size()
#define all(v) (v).begin(), (v).end()

const int SHIFT = 1000000;
const int INF = 1000000000;
const double EPS = 1e-9;

int X[100000], Y[100000];
double low[2000001], high[2000001];

int getLow(double x) {
	int t = (int)x;
	if (abs(t - x) < EPS) {
		return t;
	} else {
		if (x < -EPS) {
			return t;
		} else {
			return t + 1;
		}
	}
}

int getHigh(double x) {
	int t = (int)x;
	if (abs(t - x) < EPS) {
		return t;
	} else {
		if (x < -EPS) {
			return t - 1;
		} else {
			return t;
		}
	}
}

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	long long start = clock();
#endif
	REP(i, 2000001) low[i] = INF, high[i] = -INF;
	int n;
	scanf("%d", &n);
	REP(i, n) scanf("%d %d", &X[i], &Y[i]);
	REP(i, n) {
		int x1 = X[i], y1 = Y[i], x2 = X[(i + 1) % n], y2 = Y[(i + 1) % n];
		if (x1 == x2) {
			low[SHIFT + x1] = min(low[SHIFT + x1], (double)min(y1, y2));
			high[SHIFT + x1] = max(high[SHIFT + x1], (double)max(y1, y2));
		} else {
			long long A = y2 - y1;
			long long B = x1 - x2;
			long long C = -x1 * (long long)y2 + x2 * (long long)y1;
			if (x1 > x2) swap(x1, x2);
			for (int x = x1; x <= x2; x++) {
				double y = (double)(-C - A * x) / B;				
				low[SHIFT + x] = min(low[SHIFT + x], (double)y);
				high[SHIFT + x] = max(high[SHIFT + x], (double)y);
			}
		}
	}
	long long N = 0;
	double sumx = 0, sumx2 = 0, sumy = 0, sumy2 = 0;
	REP(i, 2000001) {
		int L = getLow(low[i]);
		int R = getHigh(high[i]);
		if (L <= R) {
			int m = R - L + 1;
			N += m;
			int x = i - SHIFT;
			sumx += (double)x * m;
			sumx2 += (double)x * x * m;
			sumy += (2.0 * L + (m - 1)) * m / 2;
			sumy2 += m * (double)L * L + (double)(m - 1) * m * L + (double)(m - 1) * m * (2 * m - 1) / 6;
		}
	}
	double total = (double)N * (N - 1) / 2;
	double sum = (double)N * (sumx2 + sumy2) - (sumx * sumx + sumy * sumy);
	sum /= total;
	sum /= 2;
	printf("%.10lf\n", sum);
#ifdef LOCAL
	fprintf(stderr, "\n\nTime: %.3lf\n\n", (clock() - start) / 1000.);
#endif
	return 0;
}