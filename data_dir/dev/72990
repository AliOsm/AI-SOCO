#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
#include <unordered_map>
#include <unordered_set>

using namespace std;

#define V vector
#define MP make_pair
#define MAX INT_MAX
#define MIN INT_MIN
#define all(v)  ((v).begin()), ((v).end())
#define allr(v) ((v).rbegin()), ((v).rend())
#define clr(v, d) memset(v, d, sizeof(v))
#define sf(x) scanf("%d", &x)
#define sf2(x, y) scanf("%d %d", &x, &y)
#define sf3(x, y, z) scanf("%d %d %d", &x, &y, &z)
#define sfll(x) scanf("%I64d", &x)
#define sfll2(x, y) scanf("%I64d %I64d", &x, &y)
#define sfll3(x, y, z) scanf("%I64d %I64d %I64d", &x, &y, &z)
//ios_base::sync_with_stdio(0);cin.tie(0); cout.tie(0);
int dx[]{1, -1, 0, 0, 1, -1, 1, -1};
int dy[]{0, 0, 1, -1, 1, -1, -1, 1};
typedef unsigned long long          ull;
typedef long long                   ll;
typedef long double                 LD;
ll suf(ll x) { return (x * (x + 1)) / 2; }
const ll mod = 1e9 + 7, size = 1000006;
ll n, m, k;
V<int> ar = { 0, 1, 2, 3, 4, 5, 6 }, mrk(7);
ll cur = 0;
ll base7(V<int> & x){
	ll ret = 0, sev = 1;
	for (int i = 0; i < x.size(); i++){
		ret += ll(x[i]) * sev;
		sev *= 7;
	}
	return ret;
}
int main()
{

	while (cin >> n >> m){
		int ln = ceil(log(n + (n == 1)) / log(7));
		int lm = ceil(log(m + (m == 1)) / log(7));
		ll ans = 0;
		V<int>lastn(ln  , -1);
		do{
			cur++;
			V<int>tn;
			if (ln >= 7) continue;
			for (int i = 0; i < ln; i++){
				mrk[ar[i]] = cur;
				tn.push_back(ar[i]);
			}
			if (base7(tn) >= n) continue;
			if (lastn == tn) continue;
			else lastn = tn;

			V<int>tm;
			for (int i = 0; i < 7; i++)
				if (mrk[i] != cur)
					tm.push_back(i);

			sort(all(tm));
			if (tm.size() < lm) continue;
			V<int>last(lm , -1);
			do{
				V<int>cal;
				for (int i = 0; i < lm; i++)
					cal.push_back(tm[i]);
				if (last == cal) continue;
				else last = cal;
				if (base7(cal) >= m) continue;
				ans++;

			} while (next_permutation(all(tm)));

		} while (next_permutation(all(ar)));
		cout << ans << endl;
	}

	return 0;
}