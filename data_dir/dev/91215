#include <bits/stdc++.h>
using namespace std;
#define F first 
#define S second
#define sqr(x) ((x) * (x))
#define all(c) c.begin(), c.end()
#define tr(c, it) for(decltype (c.begin()) it = c.begin(); it != c.end(); it++)
#define eps 1e-12
#define pb push_back
#define ppb pop_back
#define lb lower_bound
#define ub upper_bound
#define inf 1e9
#define sz 4444
#define N 1000100
#define M 1000000007

   
#define name "a"
#define isFile 0

typedef long long ll;	typedef unsigned long long ull;	typedef long double ld; 
int bPow(int v, int u, int mod){	if(!u)	return 1;	int res = bPow(v, u / 2, mod);	res = (res * 1ll * res) % mod;	if(u & 1) res = (res * 1ll * v) % mod;	return res;} 
void faster(){		ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);	if(isFile){	freopen(name".in", "r", stdin); 
//	freopen(name".out", "w", stdout); 
}}
vector<int> prime; bool notprime[N];
void resh(){ int n = N - 10;	for(int i = 2; i < n; i++)	if(!notprime[i]){	prime.pb(i); for(int j = i; j < n; j += i) notprime[j] = 1;}}
int is_comp(ll p){	for(int i = 0; prime[i] * 1ll * prime[i] <= p; i++){	if(p % prime[i] == 0)	return prime[i]; }	return 0;	}
bool is_prime(ll p){	for(int i = 0; prime[i] * 1ll * prime[i] <= p; i++){	if(p % prime[i] == 0)	return 0; }	return 1;	}
ll gcd(ll a, ll b){	if(a > b)	swap(a, b);	ll temp;	while(a){	temp  = a;	a = b % a;	b = temp;	}	return b;	}
bool fb(int x){		return 0;	}
int bSearch(int l, int r){	while(r - l > 1){	int m = (l + r) / 2;	if(fb(m))	l = m;	else		r = m;}	if(fb(l + 1))	l++;	if(!fb(l))		l = 0;	return l;}

int n, m, k, a[sz], x, cur, temp;
vector<int> v;
int main(){
	faster();
	int T = 1;
	cin >> T;
	while(T--){
		cin >> n >> m >> k;
		k = min(m - 1, k);
		for(int i = 0; i < n; i++)
			cin >> a[i];
		m -= k + 1;
		x = 0;
		for(int i = 0; i <= k; i++){
			v.clear();
			cur = inf;
			for(int j = i; j < n - (k - i); j++)
				v.pb(a[j]);	
			for(int j = 0; j <= m; j++){
				temp = max(v[j], v[v.size() - 1 - (m - j)]);
				cur = min(cur, temp);
			}
			x = max(x, cur);			
		}
		cout << x << endl;
	}
 	return 0;
}