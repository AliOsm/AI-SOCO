/*#include <bits/stdc++.h>

#define ll long long

using namespace std;

const int maxn = (int)1e5 + 7;
const int INF = (int)1e9 + 1;

ll a,b[maxn],c;

pair <int,int> t[maxn * 4];

void build(int v, int tl, int tr){
    if(tl == tr){
        t[v] = {b[tl],tl};
    }
    else{
        int tm = (tl + tr) / 2;
        build(v * 2,tl,tm);
        build(v * 2 + 1,tm + 1,tr);
        t[v] = min(t[2 * v], t[2 * v + 1]);
    }
}

pair <int, int> get(int v, int tl, int tr, int l, int r){
    if(tl > r || tr < l){
        return {(int)1e9 + 1,0};
    }
    if(l <= tl && r >= tr){
        return t[v];
    }
    int tm = (tl + tr) / 2;
    return min(get(2 * v, tl, tm, l, r),get(2 * v + 1, tm + 1, tr, l, r));
}

void change(int v, int tl, int tr, int pos, int val){
    if(tl == tr){
        t[v] = {val, tl};
        return;
    }
    if(pos > tr || pos < tl){
        return;
    }
    int tm = (tl + tr) / 2;
    change(v + v, tl, tm, pos, val);
    change(v + v + 1, tm + 1, tr, pos, val);
    t[v] = min(t[v + v], t[v + v + 1]);
}*/
    #include <bits/stdc++.h>

#define ll long long

using namespace std;

const int maxn = (int)1e5 + 7;
const int INF = (int)1e9 + 1;

ll a,b[maxn],c;

pair <int,int> t[maxn * 4];

/*void build(int v, int tl, int tr){
    if(tl == tr){
        t[v] = {b[tl],tl};
    }
    else{
        int tm = (tl + tr) / 2;
        build(v * 2,tl,tm);
        build(v * 2 + 1,tm + 1,tr);
        t[v] = min(t[2 * v], t[2 * v + 1]);
    }
}

pair <int, int> get(int v, int tl, int tr, int l, int r){
    if(tl > r || tr < l){
        return {(int)1e9 + 1,0};
    }
    if(l <= tl && r >= tr){
        return t[v];
    }
    int tm = (tl + tr) / 2;
    return min(get(2 * v, tl, tm, l, r),get(2 * v + 1, tm + 1, tr, l, r));
}

void change(int v, int tl, int tr, int pos, int val){
    if(tl == tr){
        t[v] = {val, tl};
        return;
    }
    if(pos > tr || pos < tl){
        return;
    }
    int tm = (tl + tr) / 2;
    change(v + v, tl, tm, pos, val);
    change(v + v + 1, tm + 1, tr, pos, val);
    t[v] = min(t[v + v], t[v + v + 1]);
}*/

#define forn(i, n) for (int i = 0; i < n; ++i)


bool check(int a, int b, int c, int d){
    return (d == 3 * a && b + c == a + d);
}

void solve(){
    int n, a[4];
    cin >> n;
    memset(a, 0, sizeof(a));
    forn(i, n) cin >> a[i];

    if (n == 0){
        cout << "YES" << endl;
        cout << 1 << endl << 1 << endl << 3 << endl << 3 << endl;
        return;
    }

    if (n == 1){
        cout << "YES" << endl;
        cout << a[0] << endl << 3 * a[0] << endl << 3 * a[0] << endl;
        return;
    }

    sort(a, a + n);
    int u = a[0];
    int v = a[n - 1];

    if (v > 3 * u){
        cout << "NO" << endl;
        return;
    }

    if (n == 2){
        if (v == 3 * u){
            cout << "YES" << endl;
            cout << a[0] << endl << 3 * a[0] << endl;
            return;
        }

        cout << "YES" << endl;
        cout << 4 * a[0] - a[1] << endl << 3 * a[0] << endl;
        return;
    }

    if (n == 3){
        int res;

        if (a[2] % 3 == 0){
            res = a[2] / 3;
            if (check(res, a[0], a[1], a[2])){
                cout << "YES" << endl << res << endl;
                return;
            }
        }

        if (a[2] == 3 * a[0]){
            if (check(a[0], a[1], a[2] + a[0] - a[1], a[2])){
                cout << "YES" << endl << a[2] + a[0] - a[1] << endl;
                return;
            }
        }

        res = 3 * a[0];
        if (check(a[0], a[1], a[2], res)){
            cout << "YES" << endl << res << endl;
            return;
        }

        cout << "NO" << endl;
        return;
    }

    if (n == 4){
        if (check(a[0], a[1], a[2], a[3])) cout << "YES" << endl;
        else cout << "NO" << endl;
        return;
    }
    cout << "NO" << endl;
}

int main(){
    solve();
    return 0;
}
