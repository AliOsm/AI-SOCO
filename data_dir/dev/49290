#include <iostream>
#include<bits/stdc++.h>
using namespace std;
int dp[5005][5005];
int arr[5005] , fi[5005] , la[5005] , ff[5005] , ll[5005], x[5005];
int n;
vector<int>vec[5100];
int cal(int a , int b)
{
    set<int>st;
    int sum = 0;
    for(int i = a ; i<=b ; ++i)
    {
        if(st.find(arr[i]) != st.end()) continue;
        sum^= arr[i];
        st.insert(arr[i]);
    }
    return sum;
}
int solve(int l ,int r)
{
    if(l==n+1 || r<l) return 0;
    if(dp[l][r] != -1) return dp[l][r];
    int a = fi[arr[l]];
    int b = la[arr[l]];
    int & ret = dp[l][r];
    ret = 0;
    if(a>=l && b<=r)
    {
        int sum = cal(a,b);
        ret = max(ret , solve(b+1 , r)+ cal(a,b));
    }
    int sum = 0;
    int flag = 1;
    for(int i = 0 ; i<vec[arr[l]].size() ; i++)
    {
        if(flag == 1&& vec[arr[l]][i] >=l )
        {
            flag = 2;
            sum+=solve(l , vec[arr[l]][i]-1);
        }
        else if(flag == 2)
        {
            if(vec[arr[l]][i-1] > r) break;
            if(vec[arr[l]][i] <=r) sum+=solve(vec[arr[l]][i-1]+1 , vec[arr[l]][i]-1 );
            else  sum+=solve(vec[arr[l]][i-1]+1 ,r);
        }
    }
    sum+= solve(vec[arr[l]].back()+1 , r);
    ret = max(ret ,sum);
    return ret;
}

int main()
{
    cin>>n;
    for(int i = 1 ; i<=n ; i++)
    {
        scanf("%d" , &arr[i]);
    }
    memset(ff , -1 ,sizeof fi);
    for(int i = 1 ; i<=n ; i++)
    {
        ll[arr[i]] = i;
        if(ff[arr[i]] == -1) ff[arr[i]] = i;
        vec[arr[i]].push_back(i);
    }
    for(int i = 1 ; i<=n ; ++i)
    {
        int maxi = ll[arr[i]];
        int mini = ff[arr[i]];
        for(int j = ff[arr[i]] ; j<=ll[arr[i]] ; ++j)
        {
            mini = min(mini , ff[arr[j]]);
            maxi = max(maxi , ll[arr[j]]);
        }
        la[arr[i]] = maxi;
        fi[arr[i]] = mini;
    }

    memset(dp ,-1 ,sizeof dp);
    cout<<solve(1,n)<<endl;
    return 0;
}
