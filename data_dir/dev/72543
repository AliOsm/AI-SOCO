#include <bits/stdc++.h>

using namespace std;

const int mod = (int) 1e9 + 7;
const int N = 1234567;

int n;
char a[N], b[N];
int have[26], tmp[26];
int fact[N];

int add(int a, int b) {
  int ret = a + b;
  if (ret >= mod) ret -= mod;
  return ret;
}

int sub(int a, int b) {
  int ret = a - b;
  if (ret < 0) ret += mod;
  return ret;
}

int mul(int a, int b) {
  return (long long) a * b % mod;
}

int ifact[N];

int power(int x, int e) {
  int ret = 1, res = x;
  while (e) {
    if (e & 1) ret = mul(ret, res);
    res = mul(res, res);
    e >>= 1;
  }
  return ret;
}

int inv(int x) {
  return power(x, mod - 2);
}

int f(char *s) {
  int ret = 0;
  for (int i = 0; i < 26; i++) tmp[i] = have[i];
  for (int i = 0; i < n; i++) {
    int f = fact[n - i - 1];
    for (int j = 0; j < 26; j++) {
      f = mul(f, ifact[have[j]]);
    }
    for (int k = 0; k < s[i] - 'a'; k++) {
      if (have[k]) {
        int g = mul(mul(f, fact[have[k]]), ifact[have[k] - 1]);
        ret = add(ret, g);
      }
    }
    if (have[s[i] - 'a'] == 0) break;
    have[s[i] - 'a']--;
  }
  for (int i = 0; i < 26; i++) have[i] = tmp[i];
  return ret;
}

int main() {
  scanf("%s %s", a, b);
  n = strlen(a);
  fact[0] = 1;
  ifact[0] = 1;
  for (int i = 1; i < N; i++) fact[i] = mul(i, fact[i - 1]);
  for (int i = 1; i < N; i++) ifact[i] = mul(inv(i), ifact[i - 1]);
  assert(n == strlen(b));
  for (int i = 0; i < n; i++) {
    have[a[i] - 'a']++;
  }
  int ans = sub(sub(f(b), f(a)), 1);
  printf("%d\n", ans);
  return 0;
}