#pragma GCC omptimize("unroll-loops")
#pragma optimize("SEX_ON_THE_BEACH")
#pragma GCC optimize("no-stack-protector")
#pragma comment(linker, "/STACK:1000000000")
#include<bits/stdc++.h>

using namespace std;

//#define need_tree

#ifdef need_tree
    #include<ext/pb_ds/assoc_container.hpp>
    using namespace __gnu_pbds;
    template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#endif // need_tree

using ll = long long int;
using ull = unsigned long long int;
using dd = long double;
using ldd = long double;
using si = short int;
using pii = pair<int, int>;
using pll = pair<ll, ll>;

ll get_seed(string s)
{
    ll ans = 0;
    for (int i = 0; i < s.size(); ++i)
        ans += s[i];
    return ans;
}

int popcount(int x)
{
    return __builtin_popcount(x);
}

int popcount(ll x)
{
    return __builtin_popcountll(x);
}

#define all(x) (x).begin(), (x).end()
#define ff first
#define ss second


// debug defines
#ifdef HOME
    int jjj;
    #define PO cout << "Pomelo" << endl;
    #define OL cout << "Oliva" << endl;
    #define debug(x) cout << #x << " " << x << endl;
    #define debug_p(x) cout << #x << " " << x.ff << " " << x.ss << endl;
    #define debug_v(x) cout << #x << " "; for (auto iii : x) cout << iii << " "; cout << endl;
    #define debug_vp(x) cout << #x << " "; for (auto ii : x) cout << '[' << ii.ff << " " << ii.ss << ']'; cout << endl;
    #define wait() cin >> jjj;
    #define say(x) cout << x << endl;
#else
    #define PO 0;
    #define OL 0;
    #define debug(x) 0;
    #define debug_p(x) 0;
    #define debug_vp(x) 0;
    #define debug_v(x) 0;
    #define debug_vp(x) 0;
    #define wait() 0;
    #define say(x) 0;
#endif // HOME
// end of debug defines


void solve(int i)
{
    int n, q;
    cin >> n >> q;
    vector<int> arr(n);
    for (int i =0 ; i < n; ++i)
        cin >> arr[i];
    deque<int> hv;
    int mx = -1e9;
    for (int i : arr){
        hv.push_back(i);
        mx = max(mx, i);
    }
    vector<pair<int, int>> turns;
    while (hv.front() != mx)
    {
        int a = hv.front();
        hv.pop_front();
        int b = hv.front();
        hv.pop_front();
        turns.push_back({a, b});
        if (a < b)
            swap(a, b);
        hv.push_back(b);
        hv.push_front(a);
    }
    vector<int> t;
    hv.pop_front();
    while (hv.size())
    {
        t.push_back(hv.front());
        hv.pop_front();
    }
    for (int i = 0; i < q; ++i)
    {
        ll x;
        cin >> x;
        --x;
        if (x < (ll)turns.size())
        {
            cout << turns[x].ff << " " << turns[x].ss << '\n';
        }
        else
        {
            cout << mx << " " << t[(x - (ll)turns.size()) % t.size()] << '\n';
        }
    }

}

int main()
{
    ios_base::sync_with_stdio(0);
    cout.tie(0);
    cin.tie(0);

    int t;
    t = 1;
    //cin >> t;
    for (int i = 0; i < t; ++i)
        solve(i);

    return 0;
}
/*
4 2
-a-b
a 2 3
b -5 5
*/
