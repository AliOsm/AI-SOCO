#include <bits/stdc++.h>

using namespace std;
string s,res="";
string alp="abcdefghijklmnopqrstuvwxyz";
pair<int,char> ta[30];
vector<int> primes;
int vis[100005];
vector<int> npri;

void primeFactors(int n)
{
    vector<int> tnpri;
    while (n%2 == 0)
    {
        if(vis[2]==0){
            tnpri.push_back(2);
            vis[2]=1;
        }
        n = n/2;
    }
    for (int i = 3; i <= sqrt(n); i = i+2)
    {
        while (n%i == 0)
        {
            if(vis[i]==0){
                tnpri.push_back(i);
                vis[i]=1;
            }
            n = n/i;
        }
    }
    if (n > 2&&vis[n]==0) {
        tnpri.push_back(n);
        vis[n]=1;
    }
    npri.swap(tnpri);
}

void Sieve(int n) {
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));
    for (int p = 2; p * p <= n; p++) {
        if (prime[p] == true) {
            for (int i = p * 2; i <= n; i += p)
                prime[i] = false;
        }
    }
    for(int p=2;p<=n;p++){
        if(prime[p]){
            primes.push_back(p);
        }
    }
}

int main() {
    /*
    freopen("In.txt", "r", stdin);
    freopen("Out.txt", "w", stdout);
    */
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin>>s;
    res=s;
    Sieve(s.size());
    for(int i=0;i<s.size();i++){
        res[i]='0';
        for(int j=0;j<26;j++){
            ta[j].second=alp[j];
            if(s[i]==alp[j]){
                ta[j].first++;
                break;
            }
        }
    }
    sort(ta,ta+30);
    reverse(ta,ta+30);
    queue<pair<int,char>> q;
    priority_queue<pair<int,char>> pq;
    for(int i=0;i<30;i++){
        pq.push(make_pair(ta[i].first,ta[i].second));
    }

    for(int i=0;i<primes.size();i++){
        pair<int,char> top=pq.top();
        pq.pop();
        if(vis[primes[i]]){
            pq.push(top);
            continue;
        }
        else{
            q.push(make_pair(primes[i],top.second));
            vis[primes[i]]=1;
        }
        while(!q.empty()) {
            pair<int,char> pr=q.front();
            q.pop();
            for (int j = pr.first; j <= s.size(); j += pr.first) {
                if(res[j-1]!=pr.second) {
                    res[j - 1] = pr.second;
                    top.first--;
                }
                primeFactors(j);
                for (int k = 0; k < npri.size(); k++) {
                    q.push(make_pair(npri[k], pr.second));
                }
            }
        }
        if(top.first<0){
            cout<<"NO"<<endl;
            return 0;
        }
        pq.push(top);
    }
    while(!pq.empty()){
        if(pq.top().first>0){
            res[0]=pq.top().second;
        }
        pq.pop();
    }
    cout<<"YES"<<endl<<res<<endl;
    return 0;
}