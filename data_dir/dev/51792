#include <iostream>
#include<bits/stdc++.h>
using namespace std;
const int N = 35000 + 5;
int dp[55][N] , seg[4*N],lazy[4*N];
int n,k;
void pass(int id)
{
    seg[id*2]+=lazy[id];
    seg[id*2+1]+=lazy[id];
    lazy[id*2]+=lazy[id];
    lazy[id*2+1]+=lazy[id];
    lazy[id] = 0;
}
void update(int x , int y ,int val , int id = 1 , int l = 0 , int r = n+1)
{
    if(l>=y || r<=x) return;
    if(l>=x && r<=y)
    {
        seg[id] += val ;
        lazy[id] += val;
        return ;
    }
    if(lazy[id]) pass(id);
    int mid = (l+r)/2;
    update(x,y,val,id*2,l,mid);
    update(x,y,val,id*2+1,mid,r);
    seg[id] = max(seg[id*2],seg[id*2+1]);
}
int getAns(int x , int y , int id = 1 , int l = 0 , int r = n+1)
{
    if(l>=y || r<=x) return 0;
    if(l>=x && r<=y)
    {
        return seg[id];
    }
    if(lazy[id]) pass(id);
    int mid = (l+r)/2;
    return max(getAns(x,y,id*2,l,mid) , getAns(x,y,id*2+1,mid,r));
}
int arr[N] , nxt[N] , pos[N];
int main()
{
    cin>>n>>k;
    for(int i = 0 ; i<n ; ++i)
        scanf("%d" , &arr[i]);
    for(int i = n-1 ; i>=0 ; --i)
    {
        if(!pos[arr[i]]) nxt[i] = n;
        else nxt[i] = pos[arr[i]];
        pos[arr[i]] = i;
    }
    for(int i = 0 ; i<n ; ++i)
        dp[k][i] = -1e5;
    for(int i = 0 ; i<k ; ++i)
        dp[i][n] = -1e5;
    dp[k][n] = 0;
    for(int i = k-1 ; i>=0 ; --i)
    {
        memset(seg , 0 , sizeof seg);
        memset(lazy , 0 , sizeof lazy);
        for (int j = 0 ; j<=n ; ++j) update(j , j+1 , dp[i+1][j]);
        for(int j = n-1 ; j>=0; --j)
        {
            update(j+1 , nxt[j]+1 , 1);
            dp[i][j] = getAns(j+1 , n+1);
        }
    }
    cout<<dp[0][0]<<endl;
    return 0;
}
