#include <bits/stdc++.h>

using namespace std;

#define SZ(x) ((int)(x).size())
#define PB(x) push_back(x)
#define MEMSET(x,v) memset(x,v,sizeof(x))
#define REP(i,n) for(int i=0;(i)<(n);++(i))
#define x first
#define y second
#define INF (0x3f3f3f3f)

typedef long long LL;
typedef pair<int, int> P2;
template<class A, class B> inline bool mina(A &x, B y) {return (x > y)?(x=y,1):0;}
template<class A, class B> inline bool maxa(A &x, B y) {return (x < y)?(x=y,1):0;}

const int MAXN = 1e5+5;

int N, K;

int ans[MAXN];

LL minimum(LL prev, LL num) {
    LL start = prev + 1;
    LL end = start + num - 1;
    return (start + end) * num / 2;
}

int main() {
    cin >> N >> K;
    int ll = 1, rr = N;
    while (ll <= rr) {
        int mid = (ll + rr) / 2;
        if (mid + minimum(mid, K - 1) > N) {
            rr = mid - 1;
        } else {
            ll = mid + 1;
        }
    }
    if (rr == 0) {
        cout << "NO" << endl;
        return 0;
    }
    ans[0] = rr;
    int left = N - rr;
    int now = 1;
    while (left) {
        if (now >= K) {
            cout << "NO" << endl;
            return 0;
        } else if (now + 1 == K) {
            ans[now] = left;
            if (left > ans[now - 1] && left <= 2 * ans[now - 1]) {
                break;
            } else {
                cout << "NO" << endl;
                return 0;
            }
        } else {
            if (2LL * ans[now - 1] + minimum(ans[now - 1] * 2, K - now - 1) > left) {
                int ll = ans[now - 1] + 1;
                int rr = 2LL * ans[now - 1];
                while (ll <= rr) {
                    int mid = (ll + rr) / 2;
                    if (mid + minimum(mid, K - now - 1) > left) {
                        rr = mid - 1;
                    } else {
                        ll = mid + 1;
                    }
                }
                if (rr < ans[now - 1] + 1) {
                    cout << "NO" << endl;
                    return 0;
                }
                ans[now] = rr;
                left -= ans[now];
                now++;
            } else {
                ans[now] = ans[now - 1] * 2;
                left -= ans[now];
                now++;
            }
        }
    }

    cout << "YES" << endl;
    REP(i, K) {
        cout << ans[i] << " ";
    }
    cout << endl;


    return 0;
}
