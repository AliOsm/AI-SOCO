#include <cstdio>
#include <vector>
#include <string>
#include <cstring>
#include <utility>
#include <queue>
#include <cmath>
#include <algorithm>
using namespace std;

typedef pair<int,int> PII;

PII operator -(const PII& lhs, const PII& rhs){
    return PII(lhs.first-rhs.first,lhs.second-rhs.second);
}

int operator *(const PII& lhs, const PII& rhs){
    return lhs.first*rhs.second-rhs.first*lhs.second;
}

int operator %(const PII& lhs, const PII& rhs){
    return lhs.first*rhs.first+lhs.second*rhs.second;
}

bool parallel(PII au, PII av, PII bu, PII bv){
    return (au-av)*(bu-bv)==0;
}

bool vertical(PII au, PII av, PII bu, PII bv){
    return (au-av)%(bu-bv)==0;
}

int gao(vector<PII> u){
    sort(u.begin(),u.end());
    do{
        if(!parallel(u[0],u[1],u[2],u[3])
        || !parallel(u[1],u[2],u[3],u[0])
        || !vertical(u[0],u[1],u[1],u[2])
        || !vertical(u[1],u[2],u[2],u[3])
        || !vertical(u[2],u[3],u[3],u[0])
        || !vertical(u[3],u[0],u[0],u[1])
        || (u[1]-u[0])*(u[2]-u[0])==0) continue;
        PII x=u[1]-u[0];
        PII y=u[2]-u[1];
        if(x.first*x.first+x.second*x.second==y.first*y.first+y.second*y.second)
            return 2; else return 1;
    }while(next_permutation(u.begin(),u.end()));
    return 0;
}


int main(){
    int x[8],y[8];
    for(int i=0;i<8;i++) scanf("%d%d",x+i,y+i);
    for(int s=0;s<256;s++){
        if(__builtin_popcount(s)!=4) continue;
        vector<PII> u,v;
        for(int i=0;i<8;i++) (s&1<<i?u:v).push_back({x[i],y[i]});
        if(gao(u)==2 && gao(v)>=1){
            puts("YES");
            for(int i=0;i<8;i++) if( s&1<<i) printf("%d ",i+1);
            puts("");
            for(int i=0;i<8;i++) if(~s&1<<i) printf("%d ",i+1);
            return 0;
        }
    }
    puts("NO");
}
