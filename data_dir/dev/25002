#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <unordered_map>
#include <sstream>
#include <iostream>
#include <cmath>
#include<cstring>
#include <cstdio>
#include <stack>
#include<iomanip>
#include<queue>
#include<functional>
#include<iterator>
#include<new>
#include<cstdlib>
#include<math.h>
#include<fstream>
using namespace std;
#define pi 3.141592653589793
#define ii  pair<int,int>
#define ll long long
#define p10(ans) printf("%0.10f\n", ans)
#define pr(ans) printf("%d\n", ans)
#define scc(x)  scanf("%c\n", &c)
#define pll(ans) printf("%lld\n", ans)
#define scll(x) scanf("%lld",&x)
#define scd(a)  scanf("%lf", &a)
#define sci(x)  scanf("%d",&x)
#define pc(ans)  printf("%c", ans)
#define pd(a)    printf("%lf\n", a)
#define scanfchararray(arr) scanf("%s", arr)
#define printfstring(s)    printf("%s", s.c_str())
#define all(v)             v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)            ((int)((v).size()))
#define mod 1000000007
#define mem(arr,d) memset(arr,d,sizeof(arr))
#define inf 10000000000000000
#define ninf -10000000000000000;
#define eps 1e-7
#define nearestPowerOfTwo(S) ((int)pow(2.0, (int)((log((double)S) / log(2.0)) + 0.5)))
#define loop0(i,n) for(int i=0;i<n;++i)
#define loop1(i,n) for(int i=1;i<=n;++i)
ll power(ll base, ll exp) {
	base %= mod;
	ll result = 1;
	while (exp > 0) {
		if (exp & 1)
			result = (result * base) % mod;
		base = (base * base) % mod;
		exp >>= 1;
	}
	return result;
}

/*long long gcd(long long a, long long b)
{
if (b == 0)return a; return gcd(b, a%b);
}
long long lcm(long long a, long long b) {
return  a * b / gcd(a, b);
}
*/
const int MAX = 100010;
vector<int>arr[MAX];
bool goal[MAX];
bool val[MAX];
vector<int>ans;
int cnt;
void dfs(int s, int parent, int odd, int even,int level) {
	for (auto v : arr[s]) {
		if (v != parent) {
			bool inc = false;
			if ((level &1) == 0) {
				if ((odd& 1))val[v] = 1 - val[v];
			}
			else {
				if ((even & 1))val[v] = 1 - val[v];
			}
			if (val[v] != goal[v]) {
				++cnt;
				ans.push_back(v);
				inc = true;
			}
			int tempo = odd, tempe = even;
			if (inc) {
				if (level & 1)++tempe;
				else ++tempo;
			}
			dfs(v, s, tempo, tempe, level + 1);
		}
	}
}
int main() {
	int n,u,v;
	sci(n);
	for (int i = 1; i < n; ++i) {
		sci(u); sci(v);
		arr[u].push_back(v); arr[v].push_back(u);
	}
	arr[1].push_back(0); arr[0].push_back(1);
	for (int i = 1; i <= n; ++i)sci(val[i]);
	for (int i = 1; i <= n; ++i)sci(goal[i]);

	dfs(0, -1, 0, 0, 0);
	pr(cnt);
	for (int i = 0; i < ans.size(); ++i)printf("%d\n", ans[i]);
}