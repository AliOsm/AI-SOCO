#include<bits/stdc++.h>
using namespace std;
const int N = 2e5 + 10, M = 3e2 + 10;
int n, m, d, r, t, l, w, c = 1, A[M], B[M], T[M], P[N];
long long Mx = -1e18, dp[2][N];
vector < int > V[M];
int main()
{
    scanf("%d%d%d", &n, &m, &d);
    for (int i = 1; i <= m; i++)
    {
        scanf("%d%d%d", &A[i], &B[i], &T[i]);
        if (i == 1 || T[V[c][0]] == T[i])
            V[c].push_back(i);
        else
            V[++ c].push_back(i);
    }
    V[0].push_back(0);
    for (int i = 1; i <= c; i++)
    {
        t = min(1ll * n - 1, 1ll * (T[V[i][0]] - T[V[i - 1][0]]) * d);
        l = r = 0; w = (i & 1);
        for (int j = 1; j <= t + 1; j++)
        {
            while (l < r && dp[!w][j] > dp[!w][P[r - 1]])
                r --;
            P[r ++] = j;
        }
        for (int j = 1; j <= n; j++)
        {
            dp[w][j] = dp[!w][P[l]];
            for (auto X : V[i])
                dp[w][j] += B[X] - abs(A[X] - j);
            if (P[l] <= j - t)
                l ++;
            if (j + t >= n)
                continue;
            while (l < r && dp[!w][j + t + 1] > dp[!w][P[r - 1]])
                r --;
            P[r ++] = j + t + 1;
        }
    }
    for (int i = 1; i <= n; i++)
        Mx = max(Mx, dp[c & 1][i]);
    return !printf("%I64d", Mx);
}
