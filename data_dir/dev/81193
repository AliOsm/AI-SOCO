//  Author : RUTVIK KOTHARI
//  DA-IICT

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
#include <ext/pb_ds/detail/standard_policies.hpp>

using namespace __gnu_pbds;
using namespace std;

#define ll long long
#define pll pair<ll,ll>
#define MS(x, y) memset(x, y, sizeof(x))    
#define all(x) x.begin(),x.end()
#define ff first
#define ss second
#define INFL LONG_MAX
#define pb push_back
#define FIO ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

const int N = 1e6 + 5;
const int M = 1e5 + 5;
const int mod = 1e9 + 7;

typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

ll powermodm(ll x,ll n,ll M){ll result=1;while(n>0){if(n % 2 ==1)result=(result * x)%M;x=(x*x)%M;n=n/2;}return result;}
ll power(ll _a,ll _b){ll _r=1;while(_b){if(_b%2==1)_r=(_r*_a);_b/=2;_a=(_a*_a);}return _r;}
ll gcd(ll a,ll b){if(a==0)return b;return gcd(b%a,a);}          
ll lcm(ll a,ll b){return (max(a,b)/gcd(a,b))*min(a,b);}

ll dx[4]={-1,  1,  0,  0};
ll dy[4]={ 0,  0,  1, -1};

ll pw[30],fact[N],invfact[N];
void pre()
{
    fact[0]=1;
    for(int i=0;i<30;i++)pw[i]=power(2,i);
    for(int i=1;i<N;i++)fact[i]=(i*fact[i-1])%mod;
    for(int i=0;i<N;i++)invfact[i]=powermodm(fact[i],mod-2,mod);
}

int main()
{
    FIO;
    pre();
    
    ll n;
    cin>>n;
    string s[n];
    ll c[n],i,j;
    for(i=0;i<n;i++)
        cin>>s[i]>>c[i];
    vector <pll> t[2];
    ll visited[n]={0};
    for(i=0;i<n;i++)
    {
        if(s[i]=="11")
        {
            t[0].pb({c[i],i});
            t[1].pb({c[i],i});
        }
        if(s[i]=="01")
        {
            t[1].pb({c[i],i});
        }
        if(s[i]=="10")
        {
            t[0].pb({c[i],i});
        }
    }
    ll mi=min((ll)t[0].size(),(ll)t[1].size());
    ll ans=0,num1=0,num2=0,req=2*mi,tot=0;
    req=min(req,n);
    //cout<<mi<<"  "<<req<<endl;
    if(t[0].size()==mi)
    {
        for(i=0;i<t[0].size();i++)
        {
            ll idx=t[0][i].ss;
            num1++;
            tot++;
            ans+=t[0][i].ff;
            visited[idx]=1;
            if(s[idx][1]=='1')
            {
                num2++;
            }
        }
    }
    else
    {
        for(i=0;i<t[1].size();i++)
        {
            ll idx=t[1][i].ss;
            num2++;
            tot++;
            ans+=t[1][i].ff;
            visited[idx]=1;
            if(s[idx][0]=='1')
            {
                num1++;
            }
        }
    }
    //cout<<num1<<"  "<<num2<<"  "<<ans<<endl;
    if(t[0].size()!=0)
    {
        sort(all(t[0]));
        reverse(all(t[0]));
    }
    if(t[1].size()!=0)
    {
        sort(all(t[1]));
        reverse(all(t[1]));
    }
    for(i=0;i<t[0].size();i++)
    {
        if(num1==mi)break;
        ll idx=t[0][i].ss;
        if(!visited[idx])
        {
            num1++;
            tot++;
            ans+=t[0][i].ff;
            visited[idx]=1;
        }
    }//cout<<ans<<endl;
    for(i=0;i<t[1].size();i++)
    {
        if(num2==mi)break;
        ll idx=t[1][i].ss;
        if(!visited[idx])
        {
            num2++;
            tot++;
            ans+=t[1][i].ff;
            visited[idx]=1;
        }
    }
    vector <ll> tmp;
    for(i=0;i<n;i++)
    {
        if(!visited[i])tmp.pb(c[i]);
    }
    if(tmp.size()!=0)
    {
        sort(all(tmp));
        reverse(all(tmp));
    }
    for(i=0;i<min(req-tot,(ll)tmp.size());i++)
        ans+=tmp[i];
    
    cout<<ans;
    
    return 0;
}