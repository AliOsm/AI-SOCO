#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define ppl pair<ll,ll>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcountll
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=100000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

ll n,m;
vi adj[N+5];
bool vis[N+5];
vi circle;
ll par[N+5];

bool found = false;

void dfs1(int pos,int pr)
{
	if(found)return;
	par[pos] = pr;
	vis[pos] = true;
	for(auto i:adj[pos])
	{
		if(i == pr)continue;
		if(vis[i])
		{
			int curr = pos;
			//cout<<curr<<" "<<i<<" "<<par[5]<<endl;
			//found = true;
			//return;
			while(curr != par[i])
			{
				circle.pb(curr);
				curr = par[curr];
			}
			found = true;
			return;
		}
		dfs1(i,pos);
		if(found)return;
	}
}

bool dfs2(int pos,int par)
{
	if(vis[pos])return false;
	vis[pos] = true;
	bool ret = true;
	for(auto i:adj[pos])
	{
		if(i == par)continue;
		ret = ret & dfs2(i,pos);
	}
	return ret;
}

int main()
{
  finp;
  cin>>n>>m;

  afor(i,1,m)
  {
  	int u,v;
  	cin>>u>>v;
  	adj[u].pb(v);
  	adj[v].pb(u);
  }

  dfs1(1,-1);
  

  int x = circle.size();
  if(!found || x<=2)
  {
  	//cout<<circle[0]<<" "<<circle[1]<<endl;
  	cout<<"NO";
  	return 0;
  }

  //cout<<"here";

  bool yes = true;
  afor(i,1,n)vis[i] = false;
  //return 0;

  afor(z,0,x-1)
  {
  	int j = circle[z];
  	if(vis[j])yes = false;
  	vis[j] = true;
  	for(auto i:adj[j])
  	{
  		if(i==circle[(z+1)%x])continue;
  		if(i==circle[(z-1+x)%x])continue;
  		yes = yes & dfs2(i,j);
  	}
  }

  int cnt = 0;
  afor(i,1,n)
  {
  	if(vis[i])++cnt;
  }
  if(cnt!=n)yes = false;

  if(yes)cout<<"FHTAGN!";
  else cout<<"NO";

  
return 0;
}