#include<map>
#include<vector>
#include<iostream>
#include<cstring>
#include<cmath>
#include<cstdio>
#include<bits/stdc++.h>

using namespace std;

struct f{
	long long int a, b, c;
} ar[200000];

struct f1{
	long long int a, b;
	bool operator <(const f1 &C)const{
		return (this->a < C.a) || ((this->a == C.a) && (this->b < C.b));
	}
};

int min(long long int a, long long int b){
	if (a < b) return a;
	else return b;
}

map <f1, long long int> arr;
map <f1, long long int> arr1;


int main(){
	long long int n, max = -1, max_k, max_i, max_j;
	scanf("%I64d", &n);
	for (int i = 0; i < n; ++i){
		scanf("%I64d%I64d%I64d", &ar[i].a, &ar[i].b, &ar[i].c);
		if (ar[i].a > ar[i].b) swap(ar[i].a, ar[i].b);
		if (ar[i].a > ar[i].c) swap(ar[i].a, ar[i].c);
		if (ar[i].b > ar[i].c) swap(ar[i].b, ar[i].c);
		if (ar[i].a > max){
			max = ar[i].a;
			max_k = 1;
			max_i = i;
		}
	}
	for (int i = 0; i < n; ++i){
		f1 k;
		k.a = ar[i].a;
		k.b = ar[i].b;
		if (arr[k] > 0){
			if (min(arr[k] + ar[i].c, min(ar[i].a, ar[i].b)) > max){
				max = min(arr[k] + ar[i].c, min(ar[i].a, ar[i].b));
				max_k = 2;
				max_i = i;
				max_j = arr1[k];
			}
		}
		k.a = ar[i].a;
		k.b = ar[i].c;
		if (arr[k] > 0){
			if (min(arr[k] + ar[i].b, min(ar[i].a, ar[i].c)) > max){
				max = min(arr[k] + ar[i].b, min(ar[i].a, ar[i].c));
				max_k = 2;
				max_i = i;
				max_j = arr1[k];
			}
		}
		k.a = ar[i].b;
		k.b = ar[i].c;
		if (arr[k] > 0){
			if (min(arr[k] + ar[i].a, min(ar[i].b, ar[i].c)) > max){
				max = min(arr[k] + ar[i].a, min(ar[i].b, ar[i].c));
				max_k = 2;
				max_i = i;
				max_j = arr1[k];
			}
		}
		k.a = ar[i].a;
		k.b = ar[i].b;
		if (ar[i].c > arr[k]){
			arr[k] = ar[i].c;
			arr1[k] = i;
		}
		k.a = ar[i].a;
		k.b = ar[i].c;
		if (ar[i].b > arr[k]){
			arr[k] = ar[i].b;
			arr1[k] = i;
		}
		k.a = ar[i].b;
		k.b = ar[i].c;
		if (ar[i].a > arr[k]){
			arr[k] = ar[i].a;
			arr1[k] = i;
		}
	}
	printf("%I64d\n", max_k);
	if (max_k == 2) printf("%I64d %I64d", max_i + 1, max_j + 1);
	else printf("%I64d", max_i + 1);
}
