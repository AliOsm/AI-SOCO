//marico el que lo lea
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <stdlib.h>
#include <assert.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int, int> ii;

void fastIO() {
	std::ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
}

#define FOR(i,f,t) for(int i=f; i<(int)t; i++)
#define FORR(i,f,t) for(int i=f; i>(int)t; i--)
#define FORE(i,c) for(auto i = (c).begin(); i != (c).end(); i++)
#define pb push_back
#define all(obj) obj.begin(), obj.end()
#define ms(obj, val) memset(obj, val, sizeof(obj))
#define ms2(obj, val, sz) memset(obj, val, sizeof(obj[0])*sz)

#define fst first
#define snd second

template<typename T, typename U> inline void mnze(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void mxze(T &x, U y) { if(x < y) x = y; }

void _scan( int &x ) { scanf("%d",&x); }
void _scan( long long &x ) { scanf("%lld",&x); }
void _scan( double &x ) { scanf("%lf",&x); }
void _scan( char &x ) { scanf(" %c",&x); }
void _scan( char *x ) { scanf("%s",x); }
void scan() {}
template<typename T, typename... U>
void scan( T& head, U&... tail ) { _scan(head); scan(tail...);}

template<typename T> void _dbg(const char* sdbg, T h) { cerr<<sdbg<<"="<<h<<"\n"; }
template<typename T, typename... U> void _dbg(const char* sdbg, T h, U... t) {
	while(*sdbg != ',')cerr<<*sdbg++;
	cerr<<"="<<h<<","; _dbg(sdbg+1, t...);
}

#ifdef LOCAL
#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)
#define debugv(x) {{cerr <<#x <<" = "; FORE(_i, (x)) cerr <<*_i <<", "; cerr <<"\n"; }}
#define debuga(x, sz) {{cerr <<#x <<" = "; FOR(_i, 0, sz) cerr << x[_i] <<", "; cerr <<"\n"; }}
#else
#define debug(...) (__VA_ARGS__)
#define debugv(x)
#define debuga(x, sz)
#define cerr if(0)cout
#endif

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

int x[3], y[3];
bool grid[1001][1001];

int d(int i, int j){
	return abs(x[i]-x[j]) + abs(y[i]-y[j]);
}

void bp(int xx, int yy, int j){
	grid[xx][yy] = true;
	while(xx < x[j]){
		xx++;
		grid[xx][yy] = true;
	}
	while(xx > x[j]){
		xx--;
		grid[xx][yy] = true;
	}
	while(yy < y[j]){
		yy++;
		grid[xx][yy] = true;
	}
	while(yy > y[j]){
		yy--;
		grid[xx][yy] = true;
	}
}

void bp(int i, int j){
	bp(x[i], y[i], j);
}

int main(){
	FOR(i,0,3) scan(x[i],y[i]);
	int ans = d(0,1) + d(0,2) + 1;
	int X = -1, Y;
	if(ans > d(1,0) + d(1,2) + 1){
		ans = d(1,0) + d(1,2) + 1;
		X = -2;
	}
	if(ans > d(2,0) + d(2,1) + 1){
		ans = d(2,0) + d(2,1) + 1;
		X = -3;
	}
	FOR(xx,0,1001) FOR(yy,0,1001){
		ll nans = 0;
		FOR(i,0,3) nans += abs(xx - x[i]) + abs(yy - y[i]);
		if(ans > nans+1){
			ans = nans+1;
			X = xx;
			Y = yy;
		}
	}
	if(X == -1){
		bp(0,1);
		bp(0,2);
	}else if(X == -2){
		bp(1,0);
		bp(1,2);
	}else if(X == -3){
		bp(2,0);
		bp(2,1);
	}else{
		bp(X, Y, 0);
		bp(X, Y, 1);
		bp(X, Y, 2);
	}
	printf("%d\n",ans);
	FOR(i,0,1001) FOR(j,0,1001) if(grid[i][j]) printf("%d %d\n",i,j);
}
