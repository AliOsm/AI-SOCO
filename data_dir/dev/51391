#include<bits/stdc++.h>
#define fr first
#define sc second
#define pb push_back
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int> >
#define ll long long
const int INF = 1e8;
const int MAXN = 3e5 + 200;
const  long double eps = 1e-16;
const long double pi = acos(-1.0);
using namespace std;

int dx[] = {0, 0, 1, 1, 1, -1, -1, -1};
int dy[] = {1, -1, 0, 1, -1, 0, 1, -1};

ll n, from, to;
void solve() {
    cin >> n >> from >> to;
    ll l = 0;
    ll r = n + 1;
    ll sum = (n * (n - 1)) >> 1;
    ll tt = 0;
    while (r - l > 1){
        ll m = (l + r) >> 1;
        ll s = (n - m) * (n - m - 1);
        s /= 2;
        ll t = (sum - s ) * 2;
        if (m == n) t++;
        //cout << t << " " << m << endl;
        if (t < from){ l = m; tt = t;}
        else
            r = m;
    }
    ll who = l + 1;
    ll fuck = 0;

    fuck = who + (from - tt ) / 2;
    bool bol = false;
    if (from % 2 == 1) bol = true;
    //cout << who << " " << fuck << endl;

    if (bol) fuck++;
    to -= from;
    to++;
    while (to > 0){
        if (bol){
            if (who == n) who = 1;

            cout << who << " ";
            bol = false;
        }
        else{
            cout << fuck << " ";
            fuck++;
            bol = true;
            if (fuck == n + 1){
                who++;
                fuck = who + 1;
            }
        }
        to--;
    }
    cout << endl;
}
int main(){
    ios::sync_with_stdio(NULL), cin.tie(0), cout.tie(0);
    cout.setf(ios::fixed), cout.precision(7);
    //freopen("input.in", "r", stdin);
    //freopen("output.out", "w", stdout)
    int step;
    //step = 1;
    cin >> step;
    for (int i = 1; i <= step; i++)
        solve();

}