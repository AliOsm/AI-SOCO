#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> pi;
constexpr int inf = 0x3f3f3f3f;
constexpr double EPS = 1e-15;
constexpr double PI = atan(1) * 4;

template <typename T> inline bool chmax(T& x, T y) {return x < y ? x = y, 1 : 0;}
template <typename T> inline bool chmin(T& x, T y) {return x > y ? x = y, 1 : 0;}
inline int LSB(int i) {return (i & -i);}

/*
    - Look for patterns/observations
    - Read carefully
    - Think backwards
*/

constexpr int maxn = 1e5+5;

int n, val[maxn], l[maxn], r[maxn], par[maxn];
multiset <int> Left, Right;
map <int, int> mp;

void dfs(int node){
    bool good = true;
    if (Left.size()){
        if (*Left.begin() < val[node]) good = false;
    }

    if (Right.size()){
        if (*--Right.end() > val[node]) good = false;
    }

    if (good) mp[val[node]] = 1;

    if (~l[node]){
        Left.insert(val[node]);
        dfs(l[node]);
        Left.erase(Left.find(val[node]));
    }

    if (~r[node]){
        Right.insert(val[node]);
        dfs(r[node]);
        Right.erase(Right.find(val[node]));
    }
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin >> n;
    for (int i = 1; i <= n; i++){
        cin >> val[i] >> l[i] >> r[i];
        par[l[i]] = par[r[i]] = i;
    }

    for (int i = 1; i <= n; i++){
        if (!par[i]) dfs(i);
    }

    int res = 0;
    for (int i = 1; i <= n; i++){
        res += mp[val[i]];
    }

    cout << n - res << endl;
    return 0;
}
