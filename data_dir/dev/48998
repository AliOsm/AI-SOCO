#include <bits/stdc++.h>
#include <ctime>

#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")

using namespace std;

#define space ' '
#define enter "\n"
#define fi first
#define se second
#define mp make_pair
#define ALL(x) x.begin(), x.end()
#define bits(x) __builtin_popcount(x)
#define bitsll(x) __builtin_popcountll(x)
#define crr(a) cerr << #a << " = " << a << "\n"
#define precision(a) fixed << setprecision(a)

typedef long long ll;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair <int, int> pii;
typedef set <int> si;
typedef map <int, int> mii;
typedef pair <ll, ll> pll;
typedef vector <int> vi;
typedef vector <pii> vii;

inline bool isDigit (char c) {
	return '0' <= c && c <= '9';
}

template <class T>
inline T sqr (T x) {
	return x * x;
}

template <class T>
inline bool isSquare (T x) {
	T y = sqrt(x + 0.5);
	return (y * y) == x;
}

template <class T1, class T2>
inline T1 gcd (T1 a, T2 b) {
	return b ? gcd(b, a % b) : a;
}

template <class T1, class T2>
inline T1 eqMin (T1 & x, const T2 & y) {
	if (T1(y) < x)
		return x = y;
	return x;
}

template <class T1, class T2>
inline T1 eqMax (T1 & x, const T2 & y) {
	if (T1(y) > x)
		return x = y;
	return x;
}

template <class T1, class T2>
inline T1 min (const T1 & x, const T2 & y) {
	return x < (T1) y ? x : (T1) y;
}

template <class T1, class T2>
inline T1 max (T1 & x, const T2 & y) {
	return x > (T1) y ? x : (T1) y;
}

template <typename T>
inline T getint () {
	T x = 0, p = 1;
	char ch;
	do {
		ch = getchar();
	} while (ch <= ' ');
	if (ch == '-')
		p = -1, ch = getchar();
	while (ch >= '0' && ch <= '9')
		x = x * 10 + ch - '0', ch = getchar();
	return x * p;
}

template <class T1, class T2>
ostream & operator << (ostream & os, const pair <T1, T2> & p) {
	return os << '(' << p.fi << ", " << p.se << ')';
}

template <class T>
ostream & operator << (ostream & os, const vector <T> & v) {
	os << '{';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << '}';
	return os;
}

template <class T>
ostream & operator << (ostream & os, const set <T> & v) {
	os << '[';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << ']';
	return os;
}

template <class T>
ostream & operator << (ostream & os, const multiset <T> & v) {
	os << '[';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << ']';
	return os;
}

template <class T1, class T2>
ostream & operator << (ostream & os, const map <T1, T2> & m) {
	os << '<';
	bool was = false;
	for (const auto & x : m) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << '>';
	return os;
}

template <size_t sz>
ostream & operator << (ostream & os, const bitset <sz> & bit) {
	os << '/';
	for (int i = 0; i < sz; i++)
		os << bit[i];
	os << '\\';
	return os;
}

const double PI = acos(-1);
const double EPS = 1e-8;
const int INF = (int) 2e9;
const ll LINF = (ll) 2e18;
const int MOD = (int) 1e9 + 9;
const int MAXN = (int) 1e5 + 10;

namespace NumS {
	int modNum;

	void init (int x) {
		modNum = x;
	}

	struct Num {
		int value;

		inline Num () : value(0) {}

		inline Num (int x) : value(((long long) x + modNum) % modNum) {}

		inline Num (long long x) : value((x + modNum) % modNum) {}

		inline Num operator + (Num other) const {
			return (ll) value + other.value;
		}

		inline Num operator - (Num other) const {
			return (ll) value - other.value;
		}

		inline Num operator * (Num other) const {
			return (long long) value * other.value;
		}

		inline Num power (int step) const {
			Num res(1);
			Num x = (* this);
			while (step) {
				if (step & 1) {
					res = res * x;
				}
				step >>= 1;
				x = x * x;
			}

			return res;
		}

		inline Num operator / (Num other) const {
			return (* this) * other.power(modNum - 2);
		}

		inline int conv () const {
			return value;
		}

		inline bool operator == (Num other) const {
			return value == other.value;
		}

		inline bool operator != (Num other) const {
			return value != other.value;
		}
	};
}
using namespace NumS;

int block = 0;
Num arrA[MAXN], arrB[MAXN], sum, ans;
string s;
int n, k, a, b;

int main () {
	ios_base::sync_with_stdio(false);
	modNum = MOD;
	cin >> n >> a >> b >> k >> s;
	arrA[1] = Num(a).power(n);
	arrB[1] = Num(1);

	for (int i = 2; i <= k; i++) {
		arrA[i] = arrA[i - 1] / Num(a);
		arrB[i] = arrB[i - 1] * Num(b);
	}

	for (int i = 1; i <= k; i++) {
		sum = sum + arrA[i] * arrB[i] * Num(s[i - 1] == '+' ? 1 : -1);
	}

	n++;
	Num d = Num(b).power(k) / Num(a).power(k);
	int steps = n / k;
	Num one = Num(1);
	if (d.value == 1) {
		ans = sum * steps;
	} else
		ans = sum * (one - d.power(steps)) / (one - d);

	cout << ans.value;
}