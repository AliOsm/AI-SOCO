/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const ld PI = 3.14159265358979323846;

#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;


int dp[2005][2005];

class TaskF {
public:
    int a, n, m;
    bool rain[2005];
    int umbrella[2005];

    int rec(int i, int u){
        if(i==a) return 0;
        if(dp[i][u]!=-1) return dp[i][u];
        int res = 1e9;
        if(rain[i]){
            if(umbrella[i]) res = min(res, umbrella[i] + rec(i+1, i));//picks up the umbrella
            if(u!=a+1) res = min(res, umbrella[u] + rec(i+1, u));//caries same umbrella
            return dp[i][u] = res;
        }
        res = min(res, rec(i+1, a+1));//drops umbrella if it's not raining
        res = min(res, rec(i+1, u)+(u==a+1?0:umbrella[u]));//carries the same umbrella
        if(umbrella[i]) res = min(res, rec(i+1, i) + umbrella[i]);//picks up the new umbrella
        return dp[i][u] = res;
    }
    void solve(std::istream& in, std::ostream& out) {
        in>>a>>n>>m;
        memset(rain, false, sizeof(rain));
        f(i, n){
            int l, r; in>>l>>r;
            rep(j, l, r-1) rain[j] = true;
        }
        memset(umbrella, 0, sizeof(umbrella));
        memset(dp, -1, sizeof(dp));
        f(i, m){
            int x, p; in>>x>>p;
            //can be multiple umbrellas at same location
            if(umbrella[x]) umbrella[x] = min(umbrella[x], p);
            else umbrella[x] = p;
        }
        int res = rec(0, a+1);
        if(res>=1e9) res = -1;
        out<<res;
    }
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	TaskF solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
