#include <bits/stdc++.h>
#define ld long double
#define ll long long int
#define mod 1000000007
#define ll_inf 1000000000000000
#define int_inf 1000000000
#define pb push_back
#define Endl '\n'
#define endl '\n'
#define EPS 1e-9
#define fi first
#define se second
#define PI acos(-1.0)
#define ii pair<ll,int>
using namespace std;
int st[200010], en[200010], a[200010];
int tree[1000100];
void build(int pos, int l, int r){
    if(l==r){
        tree[pos]=a[l];
        return ;
    }
    int md=(l+r)/2;
    build(2*pos, l, md);
    build(2*pos+1, md+1, r);
    tree[pos]=min(tree[2*pos], tree[2*pos+1]);
}
int qst, qen;
int query(int pos, int l ,int r){
    if(qst>r || l>qen)return 1e8;
    if(l>=qst && r<=qen)return tree[pos];

    int md=(l+r)/2;
    int x=query(2*pos, l, md);
    int y=query(2*pos+1, md+1, r);
    return min(x, y);
}
int main(){
    int n, q;
    ll c=0;
    cin>>n>>q;
    for(int i=1;i<=n;i++){
        scanf("%d",&a[i]);
        c+=a[i];
        if(st[a[i]]==0)st[a[i]]=i;
    }
    if(c==0){
        cout<<"YES"<<endl;
        for(int i=1;i<=n;i++)cout<<q<<" ";
        cout<<endl;
        return 0;
    }
    for(int i=1;i<=q;i++)en[i]=n+1;
    for(int i=n;i>=1;i--){
        if(en[a[i]]==n+1)en[a[i]]=i;
    }
    st[0]=0;
    en[0]=0;
    stack<int>s;
    int mn=q+10;
    if(st[q]==0){
        for(int i=1;i<=n;i++){
            if(a[i]==0){
                a[i]=q;
                st[q]=i;
                en[q]=i;
                break;
            }
        }
    }
    if(st[q]==0){
        cout<<"NO"<<endl;
        return 0;
    }
    a[0]=1;
    for(int i=1;i<=n;i++){
        if(a[i]==0)a[i]=a[i-1];
    }
    build(1,1,n);
    for(int i=1;i<=q;i++){
        if(st[i]==0 || st[i]==en[i])continue;
        qst=st[i], qen=en[i];
        if(query(1,1,n)<i){
            cout<<"NO"<<endl;
            return 0;
        }
    }
    cout<<"YES"<<endl;
    for(int i=1;i<=n;i++){
        cout<<a[i]<<" ";
    }
    cout<<endl;
}
