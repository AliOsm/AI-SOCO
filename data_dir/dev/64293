#include <bits/stdc++.h>
using namespace std;
using ll = long long;

constexpr int N = 200010;

struct Edge {
  int from, to, id;
  bool dir;
  explicit Edge(int u_, int v_, int id_, bool dir_): from{u_}, to{v_}, id{id_}, dir{dir_}{}
  explicit Edge(): from{-1}, to{-1}, id{-1}, dir{false} {}
};

int n, m;
int clr[N];
vector<Edge> g[N];

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(nullptr);
  cout.tie(nullptr);
  cout.precision(20);
  cout << fixed;

  cin >> n >> m;
  for(int i = 0; i < m; ++i) {
    int u, v;
    cin >> u >> v;
    --u; --v;
    g[u].emplace_back(u, v, i, true);
    g[v].emplace_back(v, u, i, false);
  }

  fill(clr, clr + N, -1);
  queue<int> q;
  q.emplace(0);
  clr[0] = 0;
  while(q.size() > 0) {
    int v = q.front(); q.pop();
    for(Edge e : g[v]) {
      if (clr[e.to] != -1) {
        if (clr[e.to] != 1 - clr[v]) {
          cout << "NO" << endl;
          return 0;
        }
      } else {
        clr[e.to] = 1 - clr[v];
        q.emplace(e.to);
      }
    }
  }

  vector<int> dir(m, -1);
  cout << "YES" << endl;
  for(int i = 0; i < n; ++i) {
    for(const auto& e : g[i]) {
      if (dir[e.id] == -1) {
        if (e.dir) {
          dir[e.id] = 1 - clr[e.from];
        } else {
          dir[e.id] = clr[e.from];
        }
      }
    }
  }
  for(int i : dir) {
    cout << i;
  }
  cout << endl;
  return 0;
}
