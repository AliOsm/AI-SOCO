#include<bits/stdc++.h>
using namespace std;

struct store{
	int c;
	int p;
	int city;


};

	bool operator < (const store& x, const store& y) {
		return x.p < y.p;
	}

int main()
{
	int n,m,w,q;
	scanf("%d %d",&n,&m);
	vector<int> adj [n];
	vector< store > stores [n];
	for (int xx = 0; xx < m; xx++)
	{
		int u,v;
		scanf("%d %d",&u,&v);
		u--;
		v--;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	scanf("%d",&w);
	while(w--){
		int u,c,p;
		scanf("%d %d %d",&u,&c,&p);
		u--;
		store s;
		s.c=c;
		s.p=p;
		s.city=u;
		stores[u].push_back(s);
	}
	bool v [n];
	vector< store > arr;
	int level [n];
	scanf("%d",&q);
	while(q--){
		int u,cnt,maxCost;
		scanf("%d %d %d",&u,&cnt,&maxCost);
		u--;
		int start = 0, end = m, ans = -1;

		for (int i = 0; i < n; i++)
		{
			level[i] = 6000 ;
			v[i] = false;
		}

		arr.clear();

		queue<int> qu;
		qu.push(u);
		v[u] = true;
		level[u] = 0;
		while (!qu.empty())
		{
			int p =qu.front();
			qu.pop();
			for(int i=0;i<stores[p].size();i++){
				store s=stores[p][i];
				arr.push_back(s);
			}
			for(int j=0;j<adj[p].size();j++){
				int i=adj[p][j];
				if (!v[i])
				{
					v[i] = true;
					level[i] = level[p] + 1;
					qu.push(i);
				}
			}
		}
		sort(arr.begin(),arr.end());

		while (start <= end)
		{
			int mid = ((start + end) >> 1);
			int cc = 0;
			long long cost = 0;
			for (int i = 0; i < arr.size() && cc < cnt; i++)
				if(level[arr[i].city] <= mid)
				{
					cost += (long long) min(arr[i].c, cnt - cc)
							* arr[i].p;
					cc += min(arr[i].c, cnt - cc);
				}
			if (cc >= cnt && cost <= maxCost)
			{
				ans = mid;
				end = mid - 1;
			} else
				start = mid + 1;
		}
		printf("%d\n",ans);

	}
    return 0;
}
