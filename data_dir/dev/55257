#include<bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef long double ld;

const int N = 505;
int a[N], b[N];
vector<pair<int, int>> ranges;
vector<string> output;

void bad()
{
  cout << "NO";
  exit(0);
}

void solve(int l, int r)
{
  vector<pair<int, int>> v;
  for(int i = l; i <= r; i++)
    v.push_back({i, a[i]});
  while (v.size() != 1)
  {
    int max1 = -1, max2 = -1;
    for(int i = 0; i < v.size() - 1; i++)
    {
      if(v[i].second > v[i + 1].second)
      {
        max1 = max(max1, v[i].second + v[i + 1].second);
      }
    }
    for(int i = 1; i < v.size(); i++)
    {
      if(v[i].second > v[i - 1].second)
      {
        max2 = max(max2, v[i].second + v[i - 1].second);
      }
    }
    assert(max1 != -1 || max2 != -1);
    if(max1 >= max2)
    {
      for(int i = 0; i < v.size() - 1; i++)
      {
        if(v[i].second > v[i + 1].second && v[i].second + v[i + 1].second == max1)
        {
          output.push_back(to_string(v[i].first) + " R");
          v[i].second += v[i + 1].second;
          for(int j = i + 1; j < v.size(); j++)
            v[j].first--;
          v.erase(v.begin() + i + 1);
          break;
        }
      }
    }
    else
    {
      for(int i = 1; i < v.size(); i++)
      {
        if(v[i].second > v[i - 1].second && v[i].second + v[i - 1].second == max2)
        {
          v[i].second += v[i - 1].second;
          output.push_back(to_string(v[i].first) + " L");
          for(int j = i; j < v.size(); j++)
            v[j].first--;
          v.erase(v.begin() + i - 1);
          break;
        }
      }
    }
  }
}

int main()
{
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    #ifdef ONLINE_JUDGE
    // freopen("", "r", stdin);
    // freopen("", "w", stdout);
    #endif
    int n, k;
    cin >> n;
    for(int i = 1; i <= n; i++)
      cin >> a[i];
    cin >> k;
    for(int i = 1; i <= k; i++)
      cin >> b[i];
    int st = 1;
    for(int i = 1; i <= k; i++)
    {
      int sum = 0, ptr = st;
      while (ptr <= n && sum != b[i])
      {
        sum += a[ptr++];
      }
      if(sum != b[i])
        bad();
      set<int> sett;
      for(int j = st; j <= ptr - 1; j++)
        sett.insert(a[j]);
      if(sett.size() == 1 && st != ptr - 1)
        bad();
      ranges.push_back({st, ptr - 1});
      st = ptr;
    }
    if(st != n + 1)
        bad();
    cout << "YES\n";
    for(int i = ranges.size() - 1; i >= 0; i--)
    {
      solve(ranges[i].first, ranges[i].second);
    }
    for(auto &s: output)
      cout << s << '\n';
    return 0;
}
