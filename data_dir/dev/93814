//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
#define sz(x) (int)(x).size()
#define mem(a,v) memset((a), (v), sizeof (a))
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int _i = 0; _i < (n); _i++) ni(a[_i])
#define nal(a, n) for (int _i = 0; _i < (n); _i++) nl(a[_i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pil pair<int, long long>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vil vector<pil>
#define vll vector<pll>
#define vi vector<int>
#define vl vector<long long>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef cc_hash_table<int,int,hash<int>> ht;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> oset;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int N = 4e2 + 5;
const double eps = 1e-9;
char s[N], t[N];
int dp[N][N][N];
int n, m, pre[N];

void res() {
  for (int i = 0; i < n; i++)
    s[i] = '\000';
  for (int i = 0; i < m; i++)
    t[i] = '\000';
}

void solve() {
  scanf("%s", s+1); n = strlen(s+1);
  scanf("%s", t+1); m = strlen(t+1);
  int cur = 0;
  for (int i = 1; i <= n; i++) {
    if (cur < m && s[i] == t[cur+1])
      cur++;
    pre[i] = cur;
  }
  for (int i = 0; i <= n; i++)
    for (int j = 0; j <= m; j++)
      for (int k = 0; k <= m; k++)
        dp[i][j][k] = m+2;
  for (int i = 1; i <= n; i++)
    for (int j = 1; j <= m; j++)
      if (s[i] == t[j]) {
        for (int k = 0; k <= min(j-1,pre[i-1]); k++)
          dp[i][k][j] = j;
      }
  for (int i = 1; i <= n; i++) {
    for (int j = 0; j <= m; j++) {
      for (int k = 0; k <= m; k++) {
        if (s[i] == t[j])
          dp[i][j][k] = min(dp[i][j][k],dp[i-1][j-1][k]);
        if (s[i] == t[k])
          dp[i][j][k] = min(dp[i][j][k],dp[i-1][j][k-1]);
        dp[i][j][k] = min(dp[i][j][k],dp[i-1][j][k]);
        // cout << i << " " << j << " " << k << " " << dp[i][j][k] << "\n";
      }
    }
  }
  for (int i = 1; i <= n; i++)
    for (int j = 0; j <= m; j++)
      if (dp[i][j][m] <= j+1) {
        printf("YES\n"); fflush(stdout);
        return;
      }
  printf("NO\n"); fflush(stdout);
}

int main() {
  int t; ni(t); while (t--) solve();
  return 0;
}