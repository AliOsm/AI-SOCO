/****** BISMILLAH HIR RAHMANIR RAHIM ******/

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

typedef long long ll;
typedef pair <int, int> pii;
/* Special functions:

        find_by_order(k) --> returns iterator to the kth largest element counting from 0
        order_of_key(val) --> returns the number of items in a set that are strictly smaller than our item
*/

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;


#define EPS 1e-9
#define NL cout<<endl;
#define MP make_pair
#define ALL(a) a.begin(), a.end()
#define DBG(a) cout<< #a <<" --> "<<(a)<<endl;
#define FastIO ios::sync_with_stdio(false); cin.tie(0);cout.tie(0)
#define IN freopen("input.txt","r+",stdin)
#define OUT freopen("output.txt","w+",stdout)

template < class T1,class T2>
ostream &operator <<(ostream &os,const pair < T1,T2 > &p)
{
    os<<"{"<<p.first<<","<<p.second<<"}";
    return os;
}
template < class T1,class T2>
pair <T1,T2> operator + ( const  pair < T1,T2 > &p1,const pair < T1,T2 > &p2)
{
    return make_pair(p1.first+p2.first,p1.second+p2.second);
}
/****** END OF HEADER ******/
const int MAX= 1e5+5;

int n,m;

unordered_map < int,int > mot[MAX];

int ispos(int k)
{
//    DBG(k);
    for(int i=1; i<=n; i++)
    {
        int to= i+k;
        if(to>n) to-=n;
//        DBG(i);
//        DBG(to);
//        NL;
        for(pii x: mot[i])
        {
            if(mot[to][x.first]!=x.second) return 0;
        }
    }
    return 1;
}
int main()
{
//    IN;
//    OUT;
    FastIO;
    cin>>n>>m;
    while(m--)
    {
        int x,y;
        cin>>x>>y;
        int len= y-x;
        if(y<x) len=n - (x-y);
        mot[x][len]++;
        mot[y][n-len]++;

    }
    int ans=0;
    for(int i=2; i*i<=n; i++)
    {
        if(n%i==0)
        {
            if(ispos(i))
            {
                ans=1;
                break;
            }
            else if(ispos(n/i))
            {
                ans=1;
                break;
            }
        }
    }
    if(ispos(1))
        ans=1;
    cout<<(ans?"yes\n":"no\n");

}
