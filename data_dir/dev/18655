#include<bits/stdc++.h>
#define LL long long
#define fi first
#define se second
#define mk make_pair
#define pii pair<int,int>
#define ull unsigned long long
using namespace std;

const int N=1e6+7;
const int M=100+7;
const int inf=0x3f3f3f3f;
const LL INF=0x3f3f3f3f3f3f3f3f;
const int mod=1e9 + 9;

char s[30], deg[30], c, ans[2][30];
map<char, bool> mp;
int main() {
    scanf("%s", s);
    int n = strlen(s);
    for(int i = 0; i < n - 1; i++) {
        if(s[i] == s[i + 1]) {
            puts("Impossible");
            return 0;
        }
    }
    for(int i = 0; i < n; i++) {
        if(mp[s[i]]) {
            c = s[i];
        }
        mp[s[i]] = true;
    }
    int p1 = -1, p2 = -1;
    for(int i = 0; i < n; i++) {
        if(s[i] == c) {
            p2 = i;
            if(p1 == -1)
                p1 = i;
        }
    }
    if((27 - p2) < (p1 - 0)) {
        reverse(s, s + n);
    }
    int pos1, pos2;
    for(int i = 0; i < n; i++) {
        if(s[i] == c) {
            pos1 = i;
            break;
        }
    }
    for(int i = n - 1; i >= 0; i--) {
        if(s[i] == c) {
            pos2 = i;
            break;
        }
    }
    int cnt = pos2 - pos1 - 1;
    ans[0][13] = ans[1][13] = '\0';
    if(cnt % 2 == 0) {
        int pos = 12 - cnt / 2, now = 0, start = pos - pos1 + 1;
        for(int i = start; i <= pos; i++)
            ans[1][i] = s[now++];
        for(int i = pos; i < 13; i++)
            ans[0][i] = s[now++];
        for(int i = 12; i > pos; i--)
            ans[1][i] = s[now++];
        for(int i = pos; i >= 0; i--)
            ans[0][i] = s[now++];
        for(int i = 0; i < start; i++)
            ans[1][i] = s[now++];
    } else {
        int pos = 12 - (cnt - 1) / 2, now = 0, start = pos - pos1;
        for(int i = start; i < 13; i++)
            ans[1][i] = s[now++];
        for(int i = 12; i >= pos; i--)
            ans[0][i] = s[now++];
        now++;
        for(int i = pos - 1; i >= 0; i--)
            ans[0][i] = s[now++];
        for(int i = 0; i < start; i++)
            ans[1][i] = s[now++];
    }
    puts(ans[0]);
    puts(ans[1]);
    return 0;
}
/*
GYCUAXSBNAWFIJPDQVETKZOMLHR
*/
