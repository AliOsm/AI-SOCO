#include <bits/stdc++.h>
using namespace std;

const int N = 88;

int n, k, tar;
int cst[N][N];
vector<int> opt[N][N];
int cnt[N];

void solve2() {
    int ans = 2e9;
    for(int i = 2; i <= n; i++) {
        ans = min(ans, cst[1][i] + cst[i][1]);
    }
    cout << ans << endl;
    exit(0);
}

void solve8() {
    int a = 1;
    int ans = 2e9;
    cnt[1] = 1;
    for(int b = 1; b <= n; b++) {
        cnt[b]++;
        for(int c = 1; c <= n; c++) {
            cnt[c]++;
            for(int d = 1; d <= n; d++) {
                cnt[d]++;
                int cur_ans = 0;
                int f = 0;
                for(int x : opt[a][b]) {
                    if(!cnt[x]) {
                        cur_ans += cst[a][x] + cst[x][b];
                        f++;
                        break;
                    }
                }
                for(int x : opt[b][c]) {
                    if(!cnt[x]) {
                        cur_ans += cst[b][x] + cst[x][c];
                        f++;
                        break;
                    }
                }
                for(int x : opt[c][d]) {
                    if(!cnt[x]) {
                        cur_ans += cst[c][x] + cst[x][d];
                        f++;
                        break;
                    }
                }
                for(int x : opt[d][a]) {
                    if(!cnt[x]) {
                        cur_ans += cst[d][x] + cst[x][a];
                        f++;
                        break;
                    }
                }
                if(f == tar) ans = min(ans, cur_ans);
                cnt[d]--;
            }
            cnt[c]--;
        }
        cnt[b]--;
    }

    cout << ans << endl;
    exit(0);
}



void solve6() {
    cnt[1] = 1;
    int ans = 2e9;
    int a = 1;
    for(int b = 1; b <= n; b++) {
        cnt[b]++;
        for(int c = 1; c <= n; c++) {
            cnt[c]++;
            int cur_ans = 0, f = 0;
            for(int x : opt[a][b]) {
                if(!cnt[x]) {
                    cur_ans += cst[a][x] + cst[x][b];
                    f++;
                    break;
                }
            }
            for(int x : opt[b][c]) {
                if(!cnt[x]) {
                    cur_ans += cst[b][x] + cst[x][c];
                    f++;
                    break;
                }
            }
            for(int x : opt[c][a]) {
                if(!cnt[x]) {
                    cur_ans += cst[c][x] + cst[x][a];
                    f++;
                    break;
                }
            }
            if(f == tar) ans = min(ans, cur_ans);
            cnt[c]--;
        }
        cnt[b]--;
    }

    cout << ans << endl;
    exit(0);
}


void solve4() {
    int ans = 2e9;
    cnt[1] = 1;
    int a = 1;
    for(int b = 1; b <= n; b++) {
        cnt[b]++;
        int cur_ans = 0, f = 0;
        for(int x : opt[a][b]) {
            if(!cnt[x]) {
                cur_ans += cst[a][x] + cst[x][b];
                f++;
                break;
            }
        }
        for(int x : opt[b][a]) {
            if(!cnt[x]) {
                cur_ans += cst[b][x] + cst[x][a];
                f++;
                break;
            }
        }
        if(f == tar) ans = min(ans, cur_ans);

        cnt[b]--;
    }

    cout << ans << endl;
    exit(0);
}


void solve10() {
    int a = 1;
    cnt[1] = 1;
    int ans = 2e9;
    for(int b = 1; b <= n; b++) {
        cnt[b]++;
        for(int c = 1; c <= n; c++) {
            cnt[c]++;
            for(int d = 1; d <= n; d++) {
                cnt[d]++;
                for(int e = 1; e <= n; e++) {
                    cnt[e]++;
                    int cur_ans = 0, f = 0;
                    for(int x : opt[a][b]) {
                        if(!cnt[x]) {
                            cur_ans += cst[a][x] + cst[x][b]; f++;
                            break;
                        }
                    }
                    for(int x : opt[b][c]) {
                        if(!cnt[x]) {
                            cur_ans += cst[b][x] + cst[x][c]; f++;
                            break;
                        }
                    }
                    for(int x : opt[c][d]) {
                        if(!cnt[x]) {
                            cur_ans += cst[c][x] + cst[x][d]; f++ ;break;
                        }
                    }
                    for(int x : opt[d][e]) {
                        if(!cnt[x]) {
                            cur_ans += cst[d][x] + cst[x][e]; f++;
                            break;
                        }
                    }
                    for(int x : opt[e][a]) {
                        if(!cnt[x]) {
                            cur_ans += cst[e][x] + cst[x][a]; f++;
                            break;
                        }
                    }
                    if(f == tar) ans = min(ans, cur_ans);
                    cnt[e]--;
                }
                cnt[d]--;
            }
            cnt[c]--;
        }
        cnt[b]--;
    }
    cout << ans << endl;
    exit(0);
}

int main() {
    // freopen("in.txt", "r", stdin);
    ios::sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> k;
    tar = k/2;
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= n; j++) {
            cin >> cst[i][j];
        }
    }
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= n; j++) {
            vector<pair<int,int>> v;
            for(int k = 1; k <= n; k++) {
                if(k == i or k == j) continue;
                v.push_back({cst[i][k] + cst[k][j], k});
            }
            sort(v.begin(), v.end());
            for(auto t : v) {
                opt[i][j].push_back(t.second);
            }
//            while(opt[i][j].size() > 4) opt[i][j].pop_back();
        }
    }
    if(k == 2) solve2();
    if(k == 4) solve4();
    if(k == 6) solve6();
    if(k == 8) solve8();
    if(k == 10) solve10();
    return 0;
}

