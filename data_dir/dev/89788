#include <bits/stdc++.h>

using namespace std;

const int MAXH=20;

typedef struct node{
    int sz;
    vector<node*> ch;
    node(){sz=0;ch=vector<node*>(2,0);}
} * nodep;

int get_sz(nodep t){
    return t ? t->sz : 0;
}

void add(nodep &t, int x, int h=MAXH){
    if(!t)t=new node();
    t->sz++;
    if(h<0)return;
    add(t->ch[(x>>h)&1],x,h-1);
}

int mex(nodep t, int x, int h=MAXH){
    if(!t)return 0;
    if(h<0)return 1;
    int bit=(x>>h)&1;
    if(get_sz(t->ch[bit])==(1<<h))return (1<<h)+mex(t->ch[bit^1],x,h-1);
    else return mex(t->ch[bit],x,h-1);
}

signed main()
{
#ifdef files
	ifstream cin("input.txt");
	ofstream cout("output.txt");
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n,m;
    cin >> n >> m;
    nodep t=0;
    vector<int> v(n);
    for(int i=0; i<n; i++){
        cin >> v[i];
    }
    sort(v.begin(),v.end());
    v.resize(unique(v.begin(),v.end())-v.begin());
    n=v.size();
    for(int i=0; i<n; i++)add(t,v[i]);
    int xr=0;
    while(m--){
        int x;
        cin >> x;
        xr^=x;
        cout << mex(t,xr) << "\n";
    }
}
