//  Copyright Â© 2020 Diego Garcia Rodriguez del Campo. All rights reserved.
#include<bits/stdc++.h>
#define MAX 200005
#define pii pair < ll , ll >
#define fi first
#define se second
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
#define what_is(x) cerr << #x << " is " << x << endl;
using namespace std;
typedef long long ll;
typedef long double ld;
 
 
 
ll N, K;
ll a[MAX];
ll b[MAX];
const ll limup = 1e9;
const ll limdn = -3e18;
 
ll f( ll a , ll x ) {
	return a - 3 * x * x + 3 * x - 1;
}
 
ll check( ll lim ) {
	ll sum = 0;
	for( ll i = 1; i <= N; i ++ ) {
		ll l = 0, r = a[i];
		while( l < r ) {
			ll m = ( l + r + 1 ) / 2;
			if( f( a[i] , m ) >= lim )
				l = m;
			else
				r = m - 1;
		}
		b[i] = l;
		sum += l;
	}
	return sum;
}
 
void binaria() {
	ll l = limdn, r = limup;
	ll lst = 0;
	while( l <= r ) {
		ll m = ( l + r ) / 2;
		
		if( check( m ) <= K ) {
			lst = m;
			r = m - 1;
		}
		else 
			l = m + 1;
	}
	
	K -= check( lst );
}
 
void bruteForce() {
	priority_queue < pii > q;
	for( ll i = 1; i <= N; i ++ )
		if( b[i] < a[i] )
			q.push( { f( a[i] , b[i] + 1 ) , i } );
		
	while( K-- ) {
		pii x = q.top();
		q.pop();
		b[x.se]++;
		if( b[x.se] < a[x.se] )
			q.push( { f( a[x.se] , b[x.se] + 1 ) , x.se } );
	} 
	
}
 
 
int main()
{
    optimiza_io
    cin >> N >> K;
    for( ll i = 1; i <= N; i ++ )
    	cin >> a[i];
    	
	binaria(); 	
	// cerr << K << "\n";
	bruteForce();
 
    
    for( ll i = 1; i <= N; i ++ )
    	cout << b[i] << " \n"[i == N];
    return 0;
}
 
// CHECAR LIMITES 
