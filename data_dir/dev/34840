#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int MAX = 1e5 + 5;
char a[MAX], b[MAX];
int nxt[MAX][26], prv[MAX][26];
int pref[MAX], suf[MAX];
int n, m;

ii roll(int size) {
	ii ans = make_pair(-2, -2);
	fori(i, -1, m) {
		int k = i + size + 1;
		if(k > m || (i >= 0 && pref[i] == -1) || (k < m && suf[k] == -1)) {
			continue;
		}
		if(i == -1 || k == m || pref[i] < suf[k]) {
			ans = make_pair(i, k);
			break;
		}
	}
	return ans;
}

int main() {
	scanf("%s", a);
	scanf("%s", b);
	
	n = strlen(a);
	m = strlen(b);
	
	int last[26];
	memset(last, -1, sizeof last);
	fori(i, 0, n) {
		fori(j, 0, 26) {
			prv[i][j] = last[j];
		}
		last[a[i] - 'a'] = i;
	}

	memset(last, -1, sizeof last);
	ford(i, n - 1, 0) {
		fori(j, 0, 26) {
			nxt[i][j] = last[j];
		}
		last[a[i] - 'a'] = i;
	}
	
	int start = -1;
	fori(i, 0, n) {
		if(a[i] == b[0]) {
			start = i;
			break;
		}
	}
	memset(pref, -1, sizeof pref);
	if(start != -1) {
		pref[0] = start;
		int cur = start;
		fori(i, 1, m) {
			int now = nxt[cur][b[i] - 'a'];
			if(now == -1) {
				break;
			}
			pref[i] = now;
			cur = now;
		}
	}
	
	start = -1;
	ford(i, n - 1, 0) {
		if(a[i] == b[m - 1]) {
			start = i;
			break;
		}
	}
	memset(suf, -1, sizeof suf);
	if(start != -1) {
		suf[m - 1] = start;
		int cur = start;
		ford(i, m - 2, 0) {
			int now = prv[cur][b[i] - 'a'];
			if(now == -1) {
				break;
			}
			suf[i] = now;
			cur = now;
		}
	}

	int left = 0, right = m;
	ii ans = make_pair(-2, -2);
	int best_size = 0;
	while(left <= right) {
		int mid = (left + right) / 2;
		ii cur = roll(mid);
		if(cur.first != -2) {
			ans = cur;
			best_size = mid;
			right = mid - 1;
		}
		else {
			left = mid + 1;
		}
	}

	if(best_size == m) {
		puts("-");
	}
	else {
		fori(i, 0, ans.first + 1) {
			printf("%c", b[i]);
		}
		fori(i, ans.second, m) {
			printf("%c", b[i]);
		}
		printf("\n");
	}

	return 0;
}

