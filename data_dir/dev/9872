#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define MOD 1000000007
#define test int t; cin>>t; while(t--)
#define init(arr,val) memset(arr,val,sizeof(arr))
#define loop(i,a,b) for(int i=a;i<b;i++)
#define loopr(i,a,b) for(int i=a;i>=b;i--)
#define loops(i,a,b,step) for(int i=a;i<b;i+=step)
#define looprs(i,a,b,step) for(int i=a;i>=b;i-=step)
#define ull unsigned long long int
#define ll long long int
#define P pair
#define PLL pair<long long, long long>
#define PII pair<int, int>
#define PUU pair<unsigned long long int, unsigned long long int>
#define L list
#define V vector
#define D deque
#define ST set
#define MS multiset
#define M map
#define UM unordered_map
#define mp make_pair
#define pb emplace_back
#define pf push_front
#define MM multimap
#define F first
#define S second
#define IT iterator
#define RIT reverse_iterator
#define FAST ios_base::sync_with_stdio(false);cin.tie();cout.tie();
#define FILE_READ_IN freopen("input.txt","r",stdin);
#define FILE_READ_OUT freopen("output.txt","w",stdout);
#define all(a) a.begin(),a.end()
#define ld long double
#define random_init mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
#define shuffle_random(a) random_shuffle(all(a),rng);
using namespace std;
// pair operation
template<class T, class U>istream& operator>>(istream& in, pair<T,U> &rhs){in >> rhs.first;in >> rhs.second;return in;}
template<class T, class U>ostream& operator>>(ostream& out,const pair<T,U> &rhs){out << rhs.first;out << " ";out << rhs.second;return out;}
template<class T, class U>pair<T,U> operator+(pair<T,U> &a, pair<T,U> &b){return pair<T,U>(a.first+b.first,a.second+b.second);}
template<class T, class U>pair<T,U> operator-(pair<T,U> &a, pair<T,U> &b){return pair<T,U>(a.first-b.first,a.second-b.second);}
// Linear STL
// VECTOR
template<class T>istream& operator>>(istream& in, vector<T> &a){for(auto &i: a)cin >> i;return in;}
template<class T>ostream& operator<<(ostream& out, const vector<T> &a){for(auto &i: a)cout << i << " ";return out;}
// SET
template<class T>ostream& operator<<(ostream& out, const set<T> &a){for(auto &i: a)cout << i << " ";return out;}
template<class T>ostream& operator<<(ostream& out, const unordered_set<T> &a){for(auto &i: a)cout << i << " ";return out;}
template<class T>ostream& operator<<(ostream& out, const multiset<T> &a){for(auto &i: a)cout << i << " ";return out;}
// MAP
template<class T,class U>ostream& operator<<(ostream& out, const map<T,U> &a){for(auto &i: a)cout << "(" << i.first << ", " << i.second << "(\n";return out;}
template<class T,class U>ostream& operator<<(ostream& out, const unordered_map<T,U> &a){for(auto &i: a)cout << "(" << i.first << ", " << i.second << "(\n";return out;}

// For ordered_set
using namespace __gnu_pbds;
template <typename T>
using ord_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

// Constants
const ll N = 1e5 + 100;
const ll inf = 1e9;
const double pi = acos(-1);
string a,b,c;
V<int> lps;
int ans;
int dp[110][110][110][2];
void lcp_init(string &s){
	int n = s.size();
	lps.resize(n,0);
	int i = 1,j=0;
	while(i < n){
		if(s[i]==s[j]){
			lps[i++] = ++j;
		}else{
			if(j==0)i++;
			else j=lps[j-1];
		}
	}
}

int cal(int i, int j, int k, int ongoing){
	if(k == c.size())return -1e5;
	if(i == a.size() || j == b.size())return 0;
	int &res = dp[i][j][k][ongoing];
	if(res!=-1)return res;
	if(!ongoing)res=max(cal(i+1,j,k,0),cal(i,j+1,k,0));
	if(a[i] == b[j]){
		if(a[i] == c[k]){
			int val = 1 + cal(i+1,j+1,k+1,0);
			res = max(res,val);
		}else{
			if(k == 0)res = max(res,1+cal(i+1,j+1,k,0));
			else res = max(res,cal(i,j,lps[k-1],1));
		}
	}
	return res;
}

void path(int i, int j, int k, int ongoing){
	if(i == a.size() || j == b.size())return;
	int res = cal(i,j,k,ongoing);
	if(res == 0)return;
	if(!ongoing){
		if(res == cal(i+1,j,k,0))return path(i+1,j,k,0);
		else if(res == cal(i,j+1,k,0))return path(i,j+1,k,0);
	}
	if(a[i] == b[j]){
		int val;
		if(a[i] == c[k]){
			cout << a[i];
			return path(i+1,j+1,k+1,0);
		}else{
			if(k == 0){
				cout << a[i];
				return path(i+1,j+1,k,0);
			}else{
				return path(i,j,lps[k-1],1);
			}
		}
	}
}

void solve(int test_case){
	cin >> a >> b >> c;
	lcp_init(c);
	memset(dp,-1,sizeof(dp));
	ans = cal(0,0,0,0);
	if(ans == 0)cout << ans;
	else path(0,0,0,0);
}

int main(){
	int t = 1;
	//cin >> t;
	loop(i,1,t+1)solve(i);
}
