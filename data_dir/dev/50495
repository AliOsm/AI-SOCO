
// Author : pratikgk45
// Problem : D. New Year and Conference
// Contest : Hello 2020
// URL : https://codeforces.com/contest/1284/problem/D

#include<bits/stdc++.h>
using namespace std;

#define PI acos(-1)
#define hell 1000000007
#define HELL 998244353
#define io ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define fix(n) cout << fixed << setprecision(n)
#define mset(a,n) memset(a,n,sizeof a)
#define rep(i,a,b) for (__typeof((b)) i=(a);i<(b);i++)
#define repp(i,a,b,p) for(__typeof((b)) i=(a);i<(b);i+=p)
#define ren(i,a,b) for(__typeof((a)) i=(a);i>=(b);i--)
#define renn(i,a,b,p) for(__typeof((a) i=(a);i>=(b);i-=p)
#define lbd lower_bound
#define ubd upper_bound
#define ll long long
#define ld long double
#define pb push_back
#define fi first
#define se second
#define vll vector<ll>
#define pll pair<ll,ll>
#define vpll vector<pll>
#define all(v) (v).begin(), (v).end()
#define sz(x) (ll)x.size()
#define endl "\n"
#define out(n) cout<<n<<" "
#define outl(n) cout<<n<<endl
#define line cout<<endl
#define bug(n) {outl(n);return;}
#define N 100005
ll n,a[N][2],b[N][2],L,R,flag;
vpll v;
multiset<ll> l,r;
void solve(){
	cin>>n;
	rep(i,1,n+1)cin>>a[i][0]>>a[i][1]>>b[i][0]>>b[i][1];
	flag=1;
	rep(i,1,n+1){
		v.pb({a[i][0],i});
		v.pb({a[i][1]+1,-i});
	}
	sort(all(v));
	l.insert(-1e18);
	r.insert(1e18);
	for(auto i:v){
		if(i.se>0){
			L=max(*l.rbegin(),b[i.se][0]);
			R=min(*r.begin(),b[i.se][1]);
			if(L>R){
				flag=0;
				break;
			}
			l.insert(b[i.se][0]);
			r.insert(b[i.se][1]);
		}else{
			l.erase(l.find(b[-i.se][0]));
			r.erase(r.find(b[-i.se][1]));
		}
		if(!flag)break;
	}
	if(!flag)bug("NO");
	v.clear();
	l.clear();
	r.clear();
	rep(i,1,n+1){
		swap(a[i][0],b[i][0]);
		swap(a[i][1],b[i][1]);
	}
	rep(i,1,n+1){
		v.pb({a[i][0],i});
		v.pb({a[i][1]+1,-i});
	}
	sort(all(v));
	l.insert(-1e18);
	r.insert(1e18);
	for(auto i:v){
		if(i.se>0){
			L=max(*l.rbegin(),b[i.se][0]);
			R=min(*r.begin(),b[i.se][1]);
			if(L>R){
				flag=0;
				break;
			}
			l.insert(b[i.se][0]);
			r.insert(b[i.se][1]);
		}else{
			l.erase(l.find(b[-i.se][0]));
			r.erase(r.find(b[-i.se][1]));
		}
		if(!flag)break;
	}
	if(!flag)bug("NO");
	bug("YES");
}
void prep(){

}
int main(){
    io;
    ll t=1;
    // cin>>t;
    prep();
    fix(12);
    while(t--)
        solve();
    return 0;
}