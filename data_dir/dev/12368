#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int Max = 2e5+2;
vector<int> adj[Max];
int sizes[Max], parent[Max], Dist[Max];
char Rank[Max];
bool removed[Max], leaf[Max], color[Max];

int p[Max];
int find(int x) {return p[x] < 0 ? x : p[x] = find(p[x]);}
void merge(int x, int y) {
    if((x=find(x)) == (y=find(y))) return;
    if(p[y] < p[x]) swap(x,y);
    p[x] += p[y];
    p[y] = x;
}

int res = 0;

void dfs(int node, int par, int times = 0) {
    Dist[node] = times;
    res = max(res, times);
    for(int to : adj[node]) {
        if(to == par) continue;
        dfs(to, node, times + 1);
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin >> n;
    fill(p, p+n+2, -1);
    for(int i = 1; i <= n; ++i) {
        cin >> color[i];
    }
    int a,b;
    vector<pair<int, int> > edges(n-1);
    for(int i = 0; i < n-1; ++i) {
        cin >> a >> b;
        edges[i] = {a,b};
        if(color[a] == color[b]) merge(a,b);
    }
    for(int i = 0; i < n-1; ++i) {
        a = edges[i].first;
        b = edges[i].second;
        if(find(a) == find(b)) continue;
        adj[find(a)].push_back(find(b));
        adj[find(b)].push_back(find(a));
    }
    fill(Dist, Dist+n+2, 1e8);
    dfs(find(1), find(1));
    int largest = -1, node = -1;
    for(int i = 1; i <= n; ++i) {
        if(Dist[find(i)] > largest) {
            largest = Dist[find(i)];
            node = find(i);
        }
    }
    dfs(node, node);
    largest = -1;
    for(int i = 1; i <= n; ++i) {
        largest = max(largest, Dist[find(i)]);
    }
    cout << (largest+1)/2 << '\n';
    return 0;
}





























