#include<bits/stdc++.h>

using namespace std;
const int MAXN = 400100;

vector<int> grafo[MAXN];
map<int,int> m[MAXN]; 
int v[MAXN];
int resp;
bool comp[MAXN];
bool process[MAXN];

void crivo(){
	for(int i = 2;i < MAXN;i++){
		if(comp[i] == true) continue;
		if(i * i > MAXN) break;
		for(int j = 2*i;j < MAXN;j += i)
			comp[j] = true;
	}
}

int dfs(int x){
	process[x] = true;
	
	int r = 0;
	
	for(int i = 1;i <= sqrt(v[x]);i++){
		if(v[x] % i == 0){
			if(comp[i] == false) m[x][i] += 1 , r = 1 ;//, cout << "//p " << v[x] << " " << i << endl;
			if(comp[v[x]/i] == false && v[x]/i != i) m[x][v[x]/i] += 1 , r = 1 ;//, cout << "//p " << v[x] << " " << v[x]/i << endl;
		} 
	}
	
	for(int i = 0;i < grafo[x].size();i++){
		int at = grafo[x][i];
		if(process[at] == true) continue;
	
		r = max(dfs(at),r);

		for(auto j : m[x]){
			if(m[at].find(j.first) == m[at].end()) continue;
			r = max(r,m[x][j.first] + m[at][j.first]);
			m[x][j.first] = max(m[x][j.first],m[at][j.first] + 1);
		}
	}
	
	//cout << "// " << x << " " << r << endl;
	return r;
}

int main(){
	memset(process,false,sizeof process);
	memset(comp,false,sizeof comp);
	
	int n;
	cin >> n;
	
	resp = 0;
	
	for(int i = 1;i <= n;i++) cin >> v[i];
	
	for(int i = 1;i < n;i++){
		int x,y;
		cin >> x >> y;
		grafo[x].push_back(y) , grafo[y].push_back(x);
	}
	
	
	comp[1] = true;
	crivo();
	cout << dfs(1) << endl;
	
}