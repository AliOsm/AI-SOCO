#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <memory.h>
#include <ctime>
#include <bitset>
#include <unordered_map>

using namespace std;
 
#define ABS(a) ((a>0)?a:-(a))
#define MIN(a,b) ((a<b)?(a):(b))
#define MAX(a,b) ((a<b)?(b):(a))
#define FOR(i,a,n) for (int i=(a);i<(n);++i)
#define FI(i,n) for (int i=0; i<(n); ++i)
#define pnt pair <int, int>
#define mp make_pair
#define PI 3.14159265358979
#define MEMS(a,b) memset(a,b,sizeof(a))
#define LL long long
#define U unsigned


struct Triple
{
	int a,b,c;
	Triple()
	{
		a=b=c=0;
	}
	Triple (int a, int b, int c)
	{
		this->a=a;
		this->b=b;
		this->c=c;
	}
};

vector<vector<int> > g;
vector<Triple> ans;
int was[100100];
bool dfs(int v, int p)
{
	was[v]=1;
	int last=-1;
	FOR(i,0,g[v].size())
	{
		int to=g[v][i];
		if (to==p)
			continue;
		if (was[to]==2)
		{
			if (last==-1)
				last=to;
			else
			{
				ans.push_back(*new Triple(last,v,to));
				last=-1;
			}
		}
		if (was[to]==1)
			continue;
		if (was[to]==0)
		{
			bool f=dfs(to,v);
			if (f)
			{
				if (last==-1)
					last=to;
				else
				{
					ans.push_back(*new Triple(last,v,to));
					last=-1;
				}
			}
		}
	}
	was[v]=2;
	if (last==-1)
		return true;
	ans.push_back(*new Triple(p,v,last));
	return false;
}

int main()
{
#ifdef Fcdkbear
	freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	double beg=clock();
#endif

	int n,m;
	scanf("%d%d",&n,&m);
	g.resize(n);
	FOR(i,0,m)
	{
		int v1,v2;
		scanf("%d%d",&v1,&v2);
		v1--; v2--;
		g[v1].push_back(v2);
		g[v2].push_back(v1);
	}
	bool f=dfs(0,-1);
	if (!f)
		printf("No solution\n");
	else
		FOR(i,0,ans.size())
			printf("%d %d %d\n",ans[i].a+1,ans[i].b+1,ans[i].c+1);
#ifdef Fcdkbear
	double end=clock();
	fprintf(stderr,"*** Total time = %.3lf ***\n",(end-beg)/CLOCKS_PER_SEC);
#endif
}