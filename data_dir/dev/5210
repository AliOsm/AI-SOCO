#include <cstdio>
#include <vector>
#include <algorithm>
#include <map>
#include <iostream>
#include <cmath>
#include <set>
#include <cstring>
#include <string>
#include <bitset>

#define deb puts("ok")

using namespace std;

typedef long long LL;

int n, m;
vector < pair<int, int> > G[100007];

void read()
{
    scanf("%d%d", &n, &m);
    for(int i = 0; i < m; i++)
    {
        int a, b; char z;
        scanf("\n%d %d %c", &a, &b, &z);
        G[a].push_back({b, (z == 'R') + 1});
        G[b].push_back({a, (z == 'R') + 1});
    }
}

bool ok[3];
int vis[100007][3];
bitset <100007> bt[3];
vector <int> s[3];

bool dfs(int v, int c, int p)
{
    if(vis[v][p]) return vis[v][p] == c;
    vis[v][p] = c;
    s[c].push_back(v);
    bool o = 1;
    for(auto u: G[v])
    {
        o &= (u.second == p ? dfs(u.first, c, p) : dfs(u.first, c ^ 3, p));
    }
    return o;
}

void check(int p)
{
    for(int i = 1; i <= n; i++)
    {
        if(!vis[i][p])
        {
            s[1].clear(), s[2].clear();
            if(!dfs(i, 1, p)) ok[p] = 1;
            else{
                if(s[2].size() < s[1].size()) s[1] = s[2];
                for(auto x: s[1]) bt[p][x] = 1;
            }
        }
    }
}

void solve()
{
    check(1);
    check(2);
    if(ok[1] && ok[2])
    {
        puts("-1");
        return;
    }
    if(make_pair(ok[1], bt[1].count()) < make_pair(ok[2], bt[2].count()))
    {
        printf("%d\n", (int)bt[1].count());
        for(int i = 1; i <= n; i++) if(bt[1][i]) printf("%d ", i);
    }
    else
    {
        printf("%d\n", (int)bt[2].count());
        for(int i = 1; i <= n; i++) if(bt[2][i]) printf("%d ", i);
    }
}

int main()
{
    read();
    solve();
    return 0;
}
