#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcountll(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

const int OO = (int) 2e9;
const double eps = 1e-9;

const int N = 1001;

// 			  ^  <  >  v
int di[] = { -1, 0, 0, 1 };
int dj[] = { 0, -1, 1, 0 };

int n, m;
char a[N][N];
int sx, sy;
int tx, ty;
int dist[N][N];

bool valid(int x, int y) {
	return x >= 0 && x < n && y >= 0 && y < m && a[x][y] != '*';
}

bool dij() {
	priority_queue<pair<pii, pii>, vector<pair<pii, pii> >, greater<pair<pii, pii> > > Q;
	Q.push(mp(mp(0, 0), mp(sx, sy)));
	Q.push(mp(mp(0, 1), mp(sx, sy)));
	Q.push(mp(mp(0, 2), mp(sx, sy)));
	Q.push(mp(mp(0, 3), mp(sx, sy)));
	MMS(dist, 0x3f);
	dist[sx][sy] = 0;
	while (SZ(Q)) {
		int cur_dist = Q.top().first.first;
		int cur_dir = Q.top().first.second;
		int x = Q.top().second.first;
		int y = Q.top().second.second;
		Q.pop();
		if (dist[x][y] != cur_dist)
			continue;
		if (x == tx && y == ty) {
			return (cur_dist <= 2);
		}
		for (int d = 0; d < 4; d++) {
			int nx = x + di[d];
			int ny = y + dj[d];
			if (!valid(nx, ny))
				continue;
			int new_dist = cur_dist + bool(cur_dir != d);
			if (new_dist <= 2 && dist[nx][ny] >= new_dist) {
				dist[nx][ny] = new_dist;
				Q.push(mp(mp(new_dist, d), mp(nx, ny)));
			}
		}
	}
	return 0;
}

int main() {
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
#ifndef ONLINE_JUDGE
//	freopen("in.txt", "rt", stdin);
//	freopen("out.txt", "wt", stdout);
#endif
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (a[i][j] == 'S') {
				sx = i, sy = j;
			} else if (a[i][j] == 'T') {
				tx = i, ty = j;
			}
		}
	}
	dij() ? puts("YES") : puts("NO");
	return 0;
}
