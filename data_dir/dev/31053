#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define F first
#define S second
const int N=1e5+5;
int n;
ll inf=1e16;
struct node{
    ll pre=-inf,suf=-inf,best=-inf,sum=0;
};
node seg[4*N];
int a[N];
node Merge(node a,node b)
{
    node ret;
    ret.sum=max(a.sum+b.sum,-inf);
    ret.pre=max(a.pre,a.sum+b.pre);
    ret.suf=max(b.suf,b.sum+a.suf);
    ret.best=max(a.best,b.best);
    ret.best=max(ret.best,max(ret.suf,ret.pre));
    ret.best=max(ret.best,a.suf+b.pre);
    return ret;
}
void build(int id=1,int l=0,int r=n-1)
{
    if(l==r)
    {
        seg[id].best=seg[id].pre=seg[id].suf=seg[id].sum=a[l];
        return;
    }
    int mid=(l+r)/2;
    build(id*2,l,mid);
    build(id*2+1,mid+1,r);
    seg[id]=Merge(seg[id*2],seg[id*2+1]);
}
void update(int idx,int id=1,int l=0,int r=n-1)
{
    if(l==r)
    {
        seg[id].best=seg[id].pre=seg[id].suf=seg[id].sum=-inf;
        return;
    }
    int mid=(l+r)/2;
    if(idx<=mid) update(idx,id*2,l,mid);
    else update(idx,id*2+1,mid+1,r);
    seg[id]=Merge(seg[id*2],seg[id*2+1]);
}
int main()
{
    int x;
    scanf("%d",&n);
    for(int i=0;i<n;i++) scanf("%d",&a[i]);
    build();
    for(int i=1;i<n;i++)
    {
        scanf("%d",&x);
        x--;
        update(x);
        printf("%lld\n",seg[1].best);
    }
    cout<<0<<endl;
    return 0;
}
