// In the name of Allah.
// We're nothing and you're everything.
// Ya Ali!

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int pre = 50, maxn = 1e3 + 14, maxn2 = 3e5 + 14;
int n, attack[3], dp[maxn][3];

int get(int x, int last){
    if(x <= 0)
        return 0;
    int &ans = dp[x][last];
    if(ans != -1)
        return ans;
    vector<int> v;
    for(int i = 0; i < 3; i++)
        if(i == 0 || i != last)
            v.push_back(get(x - attack[i], i));
    sort(v.begin(), v.end());
    v.erase(unique(v.begin(), v.end()), v.end());
    ans = 0;
    for(auto x : v)
        if(x == ans)
            ans++;
        else
            break;
    return ans;
}
int pattern_recognition(){
    memset(dp, -1, sizeof dp);
    for(int len = 1; len < 15; len++){
        bool ok = 1;
        for(int i = pre + len; ok && i < maxn; i++)
            ok &= get(i, 0) == get(i - len, 0) && get(i, 1) == get(i - len, 1) && get(i, 2) == get(i - len, 2);
        if(ok){
            // cerr << "pat " << len << '\n';
            return len;
        }
    }
    assert(0);
}
ll a[maxn2];
int pref[maxn2];
int main(){
    ios::sync_with_stdio(0), cin.tie(0);
    int t;
    cin >> t;
    while(t--){
        cin >> n;
        for(int i = 0; i < 3; i++)
            cin >> attack[i];
        int len = pattern_recognition();
        // cerr << "pat " << len << '\n';
        auto get_with_pat = [&len](ll x, int last){
            return x < maxn ? get(x, last) : get((x - pre) % len + pre, last);
        };
        for(int i = 0; i < n; i++){
            cin >> a[i];
            pref[i + 1] = pref[i] ^ get_with_pat(a[i], 0);
        }
        // for(int i = 0; i < 3; i++)
        //     for(int j = 0; j < 10; j++)
        //         cerr << dp[j][i] << " \n"[j == 9];
        int suf = 0, ans = 0;
        for(int i = n - 1; i >= 0; i--){
            for(int at = 0; at < 3; at++)
                ans += (pref[i] ^ get_with_pat(a[i] - attack[at], at) ^ suf) == 0;
            suf ^= get_with_pat(a[i], 0);
        }
        cout << ans << '\n';
    }
}