//#define ONLINE_JUDGE

#if defined(ONLINE_JUDGE)
#define _SECURE_SCL 0
#endif

#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <functional>
#include <memory>
#include <cmath>
#include <climits>
#include <numeric>
#include <tuple>
#include <memory.h>
#include <stdint.h>

#if !defined(__GNUC__)
#else // !defined(__GNUC__)
#define _CrtDbgBreak() __builtin_trap()
#endif // !defined(__GNUC__)

#if defined(ONLINE_JUDGE)
#define LOCAL_TEST 0
#else 
#define LOCAL_TEST 1
#endif

#if LOCAL_TEST
struct AssertsCounter
{
	AssertsCounter(): counter(0) {}
	~AssertsCounter() { std::cout << std::endl << "DIAG: " << (counter == 0 ? "OK" : "!!!") << " Asserts count: " << counter << std::endl; }
	void Increment() { counter++; }
	uint32_t counter;
};
AssertsCounter g_assertsCounter;
#define LOCAL_ASSERT(expr) { if (!(expr)) {std::cout << "ASSERT FAILED (" << __LINE__ << "): '" << #expr << "'" << std::endl; g_assertsCounter.Increment(); _CrtDbgBreak(); } }
#define LOCAL_ASSERT_EQ(expr1, expr2) { if ((expr1) != (expr2)) {std::cout << "ASSERT FAILED (" << __LINE__ << "): '" << #expr1 << "' == '" << #expr2 << "' (" << (expr1) << " vs " << (expr2) << "')" << std::endl; g_assertsCounter.Increment(); _CrtDbgBreak(); } }
#else
#define LOCAL_ASSERT(expr)
#define LOCAL_ASSERT_EQ(expr1, expr2)
#endif

typedef std::string string8_t;
typedef long double ld_t;

typedef std::vector<size_t> vector_size_t;
typedef std::vector<int32_t> vector_int32_t;
typedef std::vector<uint32_t> vector_uint32_t;
typedef std::vector<int64_t> vector_int64_t;
typedef std::vector<uint64_t> vector_uint64_t;
typedef std::vector<string8_t> vector_string8_t;

typedef std::vector<vector_size_t> vector_2d_size_t;
typedef std::vector<vector_int32_t> vector_2d_int32_t;
typedef std::vector<vector_uint32_t> vector_2d_uint32_t;
typedef std::vector<vector_int64_t> vector_2d_int64_t;
typedef std::vector<vector_uint64_t> vector_2d_uint64_t;

typedef std::set<size_t> set_size_t;
typedef std::set<int32_t> set_int32_t;
typedef std::set<uint32_t> set_uint32_t;
typedef std::set<int64_t> set_int64_t;
typedef std::set<uint64_t> set_uint64_t;
typedef std::set<string8_t> set_string8_t;

typedef std::multiset<size_t> multiset_size_t;
typedef std::multiset<string8_t> multiset_string8_t;

// Auxiliary functions definition
// 
template<typename T> void UpdateMin(T& a, const T b) {a = std::min(a, b);}
template<typename T> void UpdateMax(T& a, const T b) {a = std::max(a, b);}

static const ld_t Eps = 1.0e-09;
template<typename T> bool IsEqual(const T a, const T b) { return std::abs(a - b) < Eps; }
template<typename T> bool IsGreater(const T a, const T b) { return a > b + Eps; }
template<typename T> bool IsLess(const T a, const T b) { return a + Eps < b; }

template<typename T> string8_t ToStr(const T& val) { std::ostringstream ostr; ostr << val; return ostr.str(); }
template<typename T> bool FromStr(const string8_t& str, T& val) {std::istringstream istr(str); istr >> val; return !!istr; }

template<typename T> std::istream& operator>>(std::istream& ist, std::vector<T>& data)
{
	LOCAL_ASSERT(!!ist);
	for (size_t i = 0; i < data.size(); i++) { ist >> data[i]; }
	return ist;
}

template<typename T> T Read(std::istream& ist)
{
	LOCAL_ASSERT(!!ist);
	T val; ist >> val; return val;
}

template<typename T> std::ostream& operator<<(std::ostream& ost, const std::vector<T>& data)
{
	for (size_t i = 0; i < data.size(); i++) { if (i != 0) { ost << ' '; } ost << data[i]; }
	return ost;
}

#if defined(ONLINE_JUDGE)
template<size_t id> class StopWatch { };
#else
#include <library/lib_stopwatch.h>
#include <library/lib_random.h>
library::random::Rand g_rnd;
#endif

int64_t GetMinValueAfterPrefixIncrease(const vector_int64_t& a, const size_t leftCount, const int64_t k)
{
	LOCAL_ASSERT(leftCount < a.size());
	int64_t used = 0;
	const int64_t aRef = a[leftCount - 1];
	for (size_t i = 0; i < leftCount; i++)
	{
		if (a[i] < aRef)
		{
			used += aRef - a[i];
		}
	}

	LOCAL_ASSERT(used <= k);
	const int64_t rem = k - used;
	const int64_t minValue = rem / leftCount + aRef;
	return minValue;
}

int64_t GetMaxValueAfterSuffixDecrease(vector_int64_t& a, const size_t rightCount, const int64_t k)
{
	const size_t n = a.size();
	LOCAL_ASSERT(rightCount < a.size());
	int64_t used = 0;
	const int64_t aRef = a[n - rightCount];
	for (size_t i = 0; i < rightCount; i++)
	{
		if (a[n - i - 1] > aRef)
		{
			used += a[n - i - 1] - aRef;
		}
	}
	LOCAL_ASSERT(used <= k);
	const int64_t rem = k - used;
	const int64_t maxValue = aRef - rem / rightCount;
	return maxValue;
}


int64_t GetAns(vector_int64_t a, const int64_t k)
{
	const size_t n = a.size();

	std::sort(a.begin(), a.end());

	vector_int64_t sum(n + 1);
	for (size_t i = 0; i < n; i++)
	{
		sum[i + 1] = sum[i] + a[i];
	}
	
	const int64_t total = sum[n];

	const int64_t answerForInfinite = (total % a.size() == 0) ? 0 : 1;

	if (n == 1)
		return answerForInfinite;

	if (2 * k >= total)
		return answerForInfinite;

	size_t leftCount = 0;
	for (size_t i = 0; i + 1 < n; i++)
	{
		const size_t next = i + 1;
		const int64_t nextValue = a[next];
		const int64_t delta = nextValue * (i + 1) - sum[i + 1];
		leftCount = i + 1;
		if (delta > k)
			break;
	}

	size_t rightCount = 0;
	for (size_t i = 0; i + 1 < n; i++)
	{
		const size_t prev = n - 1 - i - 1;
		const int64_t prevValue = a[prev];
		const int64_t delta = sum[n] - sum[prev + 1] - prevValue * (i + 1);
		rightCount = i + 1;
		if (delta > k)
			break;
	}

	if (leftCount + rightCount > n)
		return answerForInfinite;

	const int64_t minValue = GetMinValueAfterPrefixIncrease(a, leftCount, k);
	const int64_t maxValue = GetMaxValueAfterSuffixDecrease(a, rightCount, k);

	int64_t ans = maxValue - minValue;
	if (ans <= answerForInfinite)
		ans = answerForInfinite;
	return ans;
}

#if LOCAL_TEST
typedef std::multiset<int64_t> mset_int64_t;
int64_t GetAnsRef(const vector_int64_t& a, const int64_t k)
{
	std::multiset<int64_t> bank(a.begin(), a.end());

	for (int64_t i = 0; i < k; i++)
	{
		mset_int64_t::iterator pBig = bank.end();
		--pBig;
		const int64_t cBig = *pBig;
		bank.erase(pBig);
		bank.insert(cBig - 1);

		mset_int64_t::iterator pSmall = bank.begin();
		const int64_t cSmall = *pSmall;
		bank.erase(pSmall);
		bank.insert(cSmall + 1);
	}

	mset_int64_t::iterator pBig = bank.end();
	--pBig;

	mset_int64_t::iterator pSmall = bank.begin();

	const int64_t ans = *pBig - *pSmall;
	return ans;
}	
#endif

bool Solve(std::istream& ist, std::ostream& ost, const bool multipleTestMode)
{
	StopWatch<1> sw; (void)sw;

	// 
	size_t n;
	ist >> n;

	int64_t k;
	ist >> k;

	if (multipleTestMode && !ist)
		return false;

#if LOCAL_TEST
	ost << std::endl << "Next test" << std::endl;
#endif

	vector_int64_t a(n);
	ist >> a;

	const int64_t ans = GetAns(a, k);
	ost << ans << std::endl;
	LOCAL_ASSERT_EQ(GetAnsRef(a, k), ans);

#if LOCAL_TEST
	const int64_t sum = std::accumulate(a.begin(), a.end(), 0LL);
	for (int64_t z = 0; z <= sum * 2; z++)
	{
		const int64_t ref = GetAnsRef(a, z);
		const int64_t act = GetAns(a, z);
		LOCAL_ASSERT_EQ(ref, act);
	}
#endif
	
	return multipleTestMode;
}


#if LOCAL_TEST
void Test()
{
	using namespace library::random;
	const auto genVector = GenFactory::CreateGenVector(GenRange<size_t>(2, 10), GenRange<int32_t>(-100, +200));

	for (size_t t = 0; t < 10; t++)
	{
		const vector_int32_t data = genVector();
		// size_t ans = GetAns(data);
	}
}
#endif

int main(int argc, const char *argv[])
{
#if LOCAL_TEST
	Test();
#endif

    std::ios_base::sync_with_stdio(false);
    std::istream* ist = &std::cin;
    std::ostream* ost = &std::cout;
    
    std::unique_ptr<std::istream> fileInput;
    
    if (argc > 1)
    {
        fileInput.reset(new std::ifstream(argv[1]));
        if (!(*fileInput))
        {
            std::cout << "File not found: " << argv[1] << std::endl;
        }
        ist = fileInput.get();
    }    
    
#if defined(ONLINE_JUDGE)
    Solve(*ist, *ost, false);
#else
    while(Solve(*ist, *ost, true)) {};
#endif
}
