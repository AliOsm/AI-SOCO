#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
#include <algorithm>
#include <cassert>
#include <set>

typedef std::vector<int> vi;

vi solve(const vi& countNotEqual) {
    const int n = (int)countNotEqual.size();
    int nColors = 0;
    std::vector<std::set<int>> peoplesWithCount(1+n);
    for (int i = 0; i < n; ++i) {
        peoplesWithCount[countNotEqual[i]].insert(i);
    }
    vi color(n,0);
    for (int i = 0; i < n; ++i) {
        if (!color[i]) {
            nColors++;
            color[i] = nColors;
            int cne = countNotEqual[i];
            peoplesWithCount[cne].erase(i);
            // how many?
            int rem = n - countNotEqual[i] - 1;
            if ((int)peoplesWithCount[cne].size() < rem) {
                return vi{};
            }
            std::set<int>& set = peoplesWithCount[cne];
            while (rem--) {
                auto it = *set.begin();
                assert(color[it] == 0);
                color[it] = nColors;
                set.erase(set.begin());
            }
        }
    }
    return color;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0); std::cout.tie(0); std::cerr.tie(0);
    int n; 
    while (std::cin >> n) {
        vi countNotEqual(n);
        for (auto& it : countNotEqual) {
            std::cin >> it;
        }
        vi answ = solve(countNotEqual);
        if (answ.empty()) {
            std::cout << "Impossible" << std::endl;
        } else {
            std::cout << "Possible" << std::endl;
            for (auto it : answ) {
                std::cout << it << ' ';
            }
            std::cout << std::endl;
        }
    }
    return 0;
}