#include <bits/stdc++.h>
#define LL long long
#define pb push_back
#define mp make_pair
#define fi first
#define sc second
using namespace std;

typedef pair<LL,LL> ii;
LL n,m,e,t,x,y,c,c2,cc,p[100100],cost[100100];
vector<ii> ans,graph[100100];
priority_queue<ii,vector<ii>,greater<ii> > pq;
bool vis[100100];
set<ii> st;

int findSet(int x){
	return x==p[x] ? x : p[x] = findSet(p[x]);
}

bool isSameSet(int x,int y){
	return findSet(x) == findSet(y) ? true : false;
}

void dfs(int u, int par){
	if(vis[u]) return;
	p[u] = par;
	vis[u] = 1;
	for(int i=0;i<graph[u].size();i++){
		int v = graph[u][i].fi;
		if(st.find(mp(u,v))!=st.end()) continue;
		st.insert(mp(u,v));
		st.insert(mp(v,u));
		c += graph[u][i].sc;
		dfs(v, par);
	}
}

int main() {
	scanf("%lld %lld %lld %lld",&n,&m,&e,&t);
	for(int i=1;i<=n;i++) p[i] = i;
	cc = n;
	for(int i=0;i<m;i++){
		scanf("%lld %lld %lld",&x,&y,&c);
		x = findSet(x);
		y = findSet(y);
		cost[x]+=c;
		if(x==y) continue;
		p[y] = x;
		cc--;
		cost[x]+=cost[y];
	}
	for(int i=1;i<=n;i++){
		if(p[i]==i) pq.push(mp(cost[i],i));
	}
	while(e){
		if(cc>t){
			cc--;
			x = pq.top().sc;
			pq.pop();
			y = pq.top().sc;
			pq.pop();
			x = findSet(x);
			y = findSet(y);
			cost[x]+=min(cost[x]+cost[y]+1,(LL)1e9);
			p[y] = x;
			cost[x]+=cost[y];
			pq.push(mp(cost[x],x));
			ans.pb(mp(x,y));
			e--;
		}
		else{
			while(e && ans.size()){
				if(ans.size()){
					ans.pb(ans[0]);
					e--;
				}
			}
			if(ans.size()==0 && m==0){
				cout<<"NO"<<endl;
				return 0;
			}
			for(int i=1;i<=n;i++){
				for(int j=i+1;j<=n;j++){
					if(i==j) continue;
					if(isSameSet(i,j)){
						while(e){
							ans.pb(mp(i,j));
							e--;
						}
					}
					if(e==0) break;
				}
				if(e==0) break;
			}
			break;
		}
	}
	if(cc!=t || e!=0){
		printf("NO\n");
		return 0;
	}
	printf("YES\n");
	for(int i=0;i<ans.size();i++){
		cout<<ans[i].fi<<" "<<ans[i].sc<<endl;
	}
	return 0;
}