#include <bits/stdc++.h>
using namespace std;
typedef long long LL;

struct Point {
  LL x, y;
  Point(LL x = 0, LL y = 0) : x(x), y(y) {}
  Point operator-(const Point& oth) const {
    return Point(x - oth.x, y - oth.y);
  }
  Point& operator&(const Point& oth) {
    x = oth.x, y = oth.y;
    return *this;
  }
  LL distSquare() {
    return x * x + y * y;
  }
};



class Solution {
  Point p1, p2;
  vector<Point> V;
public:
  void run(istream &in, ostream &out) {
    int n;
    in >> n;
    int x, y;
    in >> x >> y;
    p1 = Point(x, y);
    in >> x >> y;
    p2 = Point(x, y);
    V.push_back(p1);
    for (int i = 0; i < n; ++i) in >> x >> y, V.emplace_back(x, y);
    ++n;
    LL ans = 1.2e18;
    for (int i = 0; i < n; ++i) {
      vector<bool> sieved(n, false);
      LL r1sq = (p1 - V[i]).distSquare(), r2sq = 0;
      for (int j = 0; j < n; ++j) {
        sieved[j] = (p1 - V[j]).distSquare() <= r1sq;
      }
      for (int j = 0; j < n; ++j) {
        if (not sieved[j]) r2sq = max(r2sq, (p2 - V[j]).distSquare());
      }
      ans = min(r1sq + r2sq, ans);
    }
    out << ans << '\n';
  }
};

int main() {
  ios::sync_with_stdio(0); cin.tie(0);
  Solution().run(cin, cout);
};
