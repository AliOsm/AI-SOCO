#include <bits/stdc++.h>
#define pb push_back
#define sc second
#define fr first
#define mk make_pair
#define ll long long
#define ii pair<intt,intt>
#define mp make_pair
#define scn(x) scanf("%d",&x)
#define Kart ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)
typedef long long intt;
using namespace std;
intt dp[100004][21][2];
intt cost[100004];
vector<int> op[100004];
intt ans=0;
void dfs(int node,int pa)
{
    int i;
    for(i=0; i<=20; i++)
        dp[node][i][((cost[node]&(1<<i))>0)]=1;
    for(i=0; i<op[node].size(); i++)
    {
        int u=op[node][i];
        if(u==pa)
            continue;
        dfs(u,node);
        int j;
        for(j=0; j<=20; j++)
        {
            intt x=((cost[node]&(1<<j))>0);
            dp[node][j][1]+=dp[u][j][!x];
            dp[node][j][0]+=dp[u][j][x];
        }
    }
}
void dfs2(int node,int pa)
{
    int i;
    for(i=0; i<=20; i++)
    {
        intt x=((cost[node]&(1ll<<i))>0);
        ans+=(dp[node][i][1]-x)*((1ll<<i));
        //cout<<ans<<endl;
        if(node!=1)
        {
            intt u0=dp[pa][i][0];
            intt u1=dp[pa][i][1];
            intt x1=((cost[pa]&(1ll<<i))>0);
            u1-=dp[node][i][!x1];
            u0-=dp[node][i][x1];
            //cout<<u1<<" "<<u0<<endl;
            ans+=(u1*dp[node][i][0]*(1ll<<i));
            ans+=(u0*dp[node][i][1]*(1ll<<i));
        }
    }


    for(i=0; i<op[node].size(); i++)
    {
        int u=op[node][i];
        if(u==pa)
            continue;
        dfs2(u,node);
    }
}
int main()
{
    int n;
    cin>>n;
    int i;
    for(i=1; i<=n; i++)
        cin>>cost[i];
    for(i=0; i<n-1; i++)
    {
        int x,y;
        cin>>x>>y;
        op[x].pb(y);
        op[y].pb(x);
    }

    dfs(1,0);
    dfs2(1,0);
    ans/=2;
    for(i=1;i<=n;i++)
    ans+=cost[i];
    cout<<ans;
    return 0;
}
