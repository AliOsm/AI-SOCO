/*
 * Author    : raj1307 - Raj Singh
 * Institute : Jalpaiguri Government Engineering College
 * Date      : 1.07.19
 */
#include <bits/stdc++.h>
using namespace std;
 
#define fio ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define endl "\n"
#define int long long
#define pb push_back
//#define max(int a,int b){if(a>b)?return a:return b;}
//#define min(int a,int b){if(a>b)?return b:return a;}

const int N = 1e5 + 5;
int f[N];

vector<int> parent, rank1;

void make_set(int v) {
    parent[v] = v;
    rank1[v] = 0;
}

int find_set(int v) {
    if (v == parent[v])
        return v;
    return parent[v] = find_set(parent[v]);
}

void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if (a != b) {
        if (rank1[a] < rank1[b])
            swap(a, b);
        parent[b] = a;
        if (rank1[a] == rank1[b])
            rank1[a]++;
    }
}

struct Edge {
    int u, v, weight;
    bool operator<(Edge const& other) {
        return weight < other.weight;
    }
};

void KruskalMST(int n,int m)
{
    vector<Edge> edges;
    
    for(int i=0;i<m;++i){
        int x,y,z;
        cin>>x>>y>>z;
        edges.pb({x,y,z});
      
    }
    
    int cost = 0;
    vector<Edge> result;
    parent.resize(n+1);
    rank1.resize(n+1);
    for (int i = 1; i <=n; ++i)
        make_set(i);
    
    sort(edges.begin(), edges.end());
    
    for (Edge e : edges) {
        if (find_set(e.u) != find_set(e.v) && f[e.v]!=1) {
            cost += e.weight;
            result.push_back(e);
            union_sets(e.u, e.v);
            //f[e.u]=1;
            //cout<<e.v<<" "<<"i";
            f[e.v]=1;
        }
    }
    //cout<<cost;
    int cnt=0;
    for (int i = 1; i <=n; ++i)
        if(f[i]==0) ++cnt;
        
    if(cnt==1) cout<<cost;
    else cout<<-1;
    
    //cout<<cost;
    

}








signed main() {
    fio;
	
	int n,m,w;
	cin>>n;
	int a[n];
	for(int i=0;i<n;++i) cin>>a[i];
	
	cin>>m;
	
	KruskalMST(n,m);
	
	
	
    	
	
	
	
	
	
	
	return 0;
}