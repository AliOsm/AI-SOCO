#include <bits/stdc++.h>

using namespace std;

typedef long double ld;
typedef long long ll;

const int maxN = 221 * 111;

int a[maxN], dp[maxN], cnt[maxN], dp2[maxN];

int main() {
   // freopen("input.txt", "r", stdin);
    ios_base::sync_with_stdio(false);
    int n, T;
    cin >> n >> T;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
    }
    if (T <= n + n) {
        for (int i = n + 1; i <= n * T; ++i) {
            a[i] = a[i - n];
        }
        for (int i = 1; i <= n * T; ++i) {
            dp[i] = 1;
            for (int j = 1; j < i; ++j) {
                if (a[j] <= a[i]) dp[i] = max(dp[i], dp[j] + 1);
            }
        }
        int answer = 0;
        for (int i = 1; i <= n * T; ++i) {
            answer = max(answer, dp[i]);
        }
        cout << answer << endl;
        return 0;
    } else {
        for (int i = 1; i <= n; ++i) {
            ++cnt[a[i]];
        }
        for (int i = n + 1; i <= n * n; ++i) {
            a[i] = a[i - n];
        }
        for (int i = 1; i <= n * n; ++i) {
            dp[i] = 1;
            for (int j = 1; j < i; ++j) {
                if (a[j] <= a[i]) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
        }
        for (int i = n * n; i >= 1; --i) {
            dp2[i] = 1;
            for (int j = i + 1; j <= n * n; ++j) {
                if (a[i] <= a[j]) {
                    dp2[i] = max(dp2[i], dp2[j] + 1);
                }
            }
        }
        int answer = 0;
        for (int i = 1; i <= n * n; ++i) {
            for (int j = 1; j <= n * n; ++j) {
                if (a[i] != a[j]) continue;
                answer = max(answer, dp[i] + dp2[j] + (T - 2 * n) * cnt[a[i]]);
            }
        }
        cout << answer << endl;
    }
    return 0;
}
