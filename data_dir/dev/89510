#include<bits/stdc++.h>
#define pb push_back
using namespace std;
const int N = 909;
int n, m, cp, D[N], H[N], M[N], Mn[N], L[N];
vector < int > V, T, Adj[N];
void DFS(int v, int p)
{
    Mn[v] = H[v]; M[v] = 1;
    for (int &u : Adj[v])
    {
        if (u == p)
            continue;
        if (M[u])
            Mn[v] = min(Mn[v], H[u]);
        if (!M[u])
            H[u] = H[v] + 1, DFS(u, v),
            Mn[v] = min(Mn[v], Mn[u]);
    }
}
void DFS2(int v, int c)
{
    M[v] = c;
    for (int &u : Adj[v])
    {
        if (!M[u] && Mn[u] < H[u])
            DFS2(u, c);
        else if (!M[u])
            V.pb(++ cp), DFS2(u, cp);
    }
}
int main()
{
    scanf("%d%d", &n, &m);
    if (n == 2)
        return !printf("-1");
    for (int i = 1, v, u; i <= m; i++)
        scanf("%d%d", &v, &u),
        Adj[v].pb(u), Adj[u].pb(v);
    DFS(1, 0); memset(M, 0, sizeof(M));
    V.pb(++ cp); DFS2(1, cp);
    if (cp == 1) return !printf("0");
    for (int i = 1; i <= n; i++)
    {
        if (!L[M[i]])
            L[M[i]] = i;
        else if (H[i] > H[L[M[i]]])
            L[M[i]] = i;
        for (int &u : Adj[i])
            if (M[i] != M[u])
                D[M[i]] ++;
    }
    for (int &v : V)
        if (D[v] == 1)
            T.pb(v);
    printf("%d\n", (int)T.size() + 1 >> 1);
    for (int i = 0; i < ((int)T.size() + 1 >> 1); i++)
        printf("%d %d\n", L[T[i]], L[T[i + (int)T.size() / 2]]);
    return (0);
}