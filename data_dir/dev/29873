#include "bits/stdc++.h"
using namespace std;

const static int MAX = 200000;
vector<int> divisors[MAX + 1];
vector<vector<int>> adj;
vector<int> res;
vector<int> a;
int counts[MAX + 1];

void dfs(int cur, int parent, int depth) {
    for (int val : divisors[a[cur]]) {
        counts[val]++;
    }
    int ans = 0;
    for (int div : divisors[a[0]]) {
        if (counts[div] >= depth - 1) {
            ans = max(ans, div);
        }
    }
    for (int div : divisors[a[cur]]) {
        if (counts[div] >= depth - 1) {
            ans = max(ans, div);
        }
    }
    res[cur] = ans;
    for (int nxt : adj[cur]) if (nxt != parent) {
        dfs(nxt, cur, depth + 1);
    }
    for (int val : divisors[a[cur]]) {
        counts[val]--;
    }
}

int main() {
    // initialize divisors 
    for (int i = 1; i * i <= MAX; i++) {
        for (int j = i * i; j <= MAX; j += i) {
            divisors[j].push_back(i); // adds 1 as divisor currently
            if (j / i != i) divisors[j].push_back(j / i);
        }
    }   

    ios_base::sync_with_stdio(false); cin.tie(0);
    int n; cin >> n;
    a.resize(n);
    for (int i = 0; i < n; i++) cin >> a[i];
    adj.resize(n);
    for (int i = 0; i < n - 1; i++) {
        int x; cin >> x; x--;
        int y; cin >> y; y--;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
    res.resize(n);
    dfs(0, -1, 1);
    for (int val : res) cout << val << " ";
    cout << endl;
}