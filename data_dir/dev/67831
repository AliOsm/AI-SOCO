#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int mod = 1e9 + 7;
const int N = 503;
int n, m;

int dp[2][N][N];

string t[N];

void input() {
    cin >> n >> m;
    for(int i = 0; i < n; ++i) {
        cin >> t[i];
    }
}

bool outn(int i) {
    return i < 0 || i >= n;
}

bool outm(int i) {
    return i < 0 || i >= m;
}

void calc() {
    for(int p = n + m; p >= 0; --p) {
        for(int a = 0; a < n; ++a) {
            for(int b = 0; b < n; ++b) {
                int ix = a;
                int jx = p - a;
                int iy = b;
                int jy = n + m - 2 - b - p;
                if(outn(ix) || outn(iy) || outm(jx) || outm(jy) || ix > iy || jx > jy || t[ix][jx] != t[iy][jy]) {
                    dp[1][a][b] = 0;
                    continue;
                }
                if(abs(ix - iy) + abs(jx - jy) <= 1) {
                    dp[1][a][b] = 1;
                    continue;
                }
                int res = 0;
                res += dp[0][a][b];
                res += dp[0][a + 1][b];
                res %= mod;
                res += (b? dp[0][a][b - 1]: 0);
                res %= mod;
                res += (b? dp[0][a + 1][b - 1]: 0);
                res %= mod;
                dp[1][a][b] = res;
            }
        }
        swap(dp[0], dp[1]);
    }
    cout << dp[0][0][n - 1] << "\n";
}

void solve() {
    calc();
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
