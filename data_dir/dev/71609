//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0); }
inline int safe_mul(const int x, const int y) __attribute__ ((warn_unused_result));



int main()
{
//    freopen("in.txt","r", stdin);
//    freopen("out.txt", "w", stdout);
//    cout << fixed << setprecision(15);
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);

    int n;
    cin >> n;

    vector<pair<int,int>> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i].first;
        a[i].second = i;
    }
    sort(begin(a), end(a));
    long long const inf = 1000000000000000009LL;
    vector<array<long long, 4>> dp(n + 1, {-inf,-inf,-inf,-inf});
    dp[0][0] = 0;
    for (int i = 0; i < n; ++i) {
        dp[i + 1][3] = max(dp[i][3], dp[i][2]);
        dp[i + 1][2] = max(dp[i + 1][3], dp[i][1]);
        dp[i + 1][1] = max(dp[i + 1][2], dp[i][0]);
        if (i >= 1)
            dp[i + 1][1] = max(dp[i + 1][1], dp[i][3] + a[i].first - a[i - 1].first);
    }

    cout << a.back().first - a[0].first - dp.back()[3] << ' ';
    int c = 3;
    vector<int> ans(n);
    int idx = 1;
    for (int i = n; i > 0; --i) {
        ans[a[i - 1].second] = idx;
        if (c == 1 && i >= 2 && dp[i - 1][3] + a[i - 1].first - a[i - 2].first > dp[i][2]) {
            ++idx;
            c = 3;
        } else {
            int tmp = max(0, c - 1);
            c = max_element(begin(dp[i - 1]) + tmp, end(dp[i - 1])) - begin(dp[i - 1]);
        }
    }
    cout << idx << endl;
    for (int i = 0; i < n; ++i)
        cout << ans[i] << " \n"[i == n];
}

