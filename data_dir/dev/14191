#include<bits/stdc++.h>
#define ll long long
using namespace std;
const int N=1e6+7;
const int M=3e5+7;
int f[N],n,q;
struct seg_tree
{
    struct node
    {
        int l,r,cnt;
        ll sum;
    }a[M<<2];
    void up(int rt)
    {
        a[rt].sum=a[rt<<1].sum+a[rt<<1|1].sum;
        a[rt].cnt=a[rt<<1].cnt+a[rt<<1|1].cnt;
    }
    void build(int l,int r,int rt)
    {
        a[rt].l=l; a[rt].r=r;
        a[rt].sum=a[rt].cnt=0;
        if(l==r)
        {
            scanf("%lld",&a[rt].sum);
            if(a[rt].sum==2 || a[rt].sum==1)
                a[rt].cnt=1;
            return;
        }
        int m=(l+r)>>1;
        build(l,m,rt<<1);
        build(m+1,r,rt<<1|1);
        up(rt);
    }
    void updata(int L,int R,int rt)
    {
        int l=a[rt].l,r=a[rt].r;
        //printf("%d %d %d %d@@@\n",l,r,L,R);
        if(a[rt].cnt==r-l+1) return;
        if(l==r)
        {
            a[rt].sum=f[a[rt].sum];
            if(a[rt].sum==2 || a[rt].sum==1)
                a[rt].cnt=1;
            return;
        }
        int m=(l+r)>>1;
        //printf("!!!!!!%d\n",m);
        if(L<=m) updata(L,R,rt<<1);
        if(R>m)  updata(L,R,rt<<1|1);
        up(rt);
    }
    ll query(int L,int R,int rt)
    {
        int l=a[rt].l,r=a[rt].r;
        if(l>=L && r<=R) return a[rt].sum;
        int m=(l+r)>>1;
        ll ans=0;
        if(L<=m) ans+=query(L,R,rt<<1);
        if(R>m)  ans+=query(L,R,rt<<1|1);
        return ans;
    }
}seg;
void init()
{
    for(int i=1;i<N;i++)
        for(int j=i;j<N;j+=i)
            f[j]++;
}
int main()
{
    init();
    scanf("%d%d",&n,&q);
    seg.build(1,n,1);
    while(q--)
    {
        int op,l,r;
        scanf("%d%d%d",&op,&l,&r);
        if(op==1) seg.updata(l,r,1);
        else printf("%lld\n",seg.query(l,r,1));
        //cout<<seg.query(l,r,1)<<endl;
    }
    return 0;
}
/*
7 6
6 4 1 10 3 2 4
1 3 5

*/
