#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag,
tree_order_statistics_node_update> oset;

const int N = 1e5+1, K = 21;
int n, k;
pair<int, pair<int, int>> robot[N], rob[N];
vector<int> Q;
oset IQ[N];
set<int> s;
int main()
{
    cin >> n >> k;
    for(int i=0; i<n; i++)
    scanf("%d %d %d", &robot[i].second.first, &robot[i].first, &robot[i].second.second),
    rob[i].first = robot[i].second.first, rob[i].second = {robot[i].first, robot[i].second.second},
    s.insert(robot[i].second.second);
    for(auto i : s) Q.push_back(i);
    sort(robot, robot+n);
    sort(rob, rob+n);
    ll ans1 = 0, ans2 = 0;
    for(int i=0; i<n; i++)
    {
        int x = robot[i].second.first, iq = robot[i].second.second;
        int rad = robot[i].first, l = x-rad, r = x+rad;
        int idx = lower_bound(Q.begin(), Q.end(), iq)-Q.begin();
        for(int j=idx; j<n; j++)
        {
            if(abs(iq-Q[j]) > k) break;
            ans1 += IQ[j].order_of_key(r+1)-IQ[j].order_of_key(l);
        }
        for(int j=idx-1; j>=0; j--)
        {
            if(abs(iq-Q[j]) > k) break;
            ans1 += IQ[j].order_of_key(r+1)-IQ[j].order_of_key(l);
        }
        IQ[idx].insert(x);
    }
    for(int i=0; i<n; i++)
    {
        int x = rob[i].first, rad = rob[i].second.first, iq = rob[i].second.second;
        int idx = lower_bound(Q.begin(), Q.end(), iq)-Q.begin(), l = x-rad, r = x+rad;
        for(int j=idx; j<n; j++)
        {
            if(abs(iq-Q[j]) > k) break;
            ans2 += IQ[j].order_of_key(r+1)-IQ[j].order_of_key(l);
        }
        for(int j=idx-1; j>=0; j--)
        {
            if(abs(iq-Q[j]) > k) break;
            ans2 += IQ[j].order_of_key(r+1)-IQ[j].order_of_key(l);
        }
    }
    cout << ans2-ans1-n << endl;
}
