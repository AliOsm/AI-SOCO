#include <bits/stdc++.h>
#define int long long
using namespace std;
const int N = 1123456;
const int mod = 1e9 + 7;
const int inf = 1e9 + 7;
int read()
{
    int x;
    scanf("%I64d", &x);
    return x;
}
int dp[N][2];
void upd(int l, int r, int id, int ll, int rr, int x, int idx) {
    if(ll <= l && r <= rr) {
        dp[id][idx] += x;
        return ;
    }
    int m = (l + r) >> 1;
    if(ll <= m) upd(l, m, id + id, ll, rr, x, idx);
    if(rr > m) upd(m + 1, r, id + id + 1, ll, rr, x, idx);
}
int sum(int l, int r, int id, int ind, int idx) {
    if(l == r)
        return dp[id][idx];
    int m = (l + r) >> 1;
    if(ind <= m) return dp[id][idx] + sum(l, m, id + id, ind, idx);
    else return dp[id][idx] + sum(m + 1, r, id + id + 1, ind, idx);
}
int a[N];
vector <int> v[N];
int id[N];
int tim = 0;
int tin[N];
int tout[N];
void dfs(int x, int f, int s) {
    id[x] = s;
    tin[x] = ++tim;
    for(int i = 0; i < v[x].size(); i ++) {
        int to = v[x][i];
        if(to != f) {
            dfs(to, x, 1 - s);
        }
    }
    tout[x] = tim;
}
main()
{
    int n, m, i, j, x;
    cin >> n >> m;
    for(i = 1; i <= n; i ++) {
        a[i] = read();
    }
    for(i = 1; i < n; i ++) {
        int x, y;
        x = read();
        y = read();
        v[x].push_back(y);
        v[y].push_back(x);
    }
    dfs(1, 1, 1);
    for(i = 1; i <= m; i ++) {
        int t = read();
        x = read();
        if(t == 1) {
            int val = read();
            upd(1, n, 1, tin[x], tout[x], val, id[x]);
            upd(1, n, 1, tin[x], tout[x], -val, 1 - id[x]);
        }
        else {
            printf("%I64d\n", a[x] + sum(1, n, 1, tin[x], id[x]));
        }
    }
}

