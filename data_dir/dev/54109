#include <bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef pair <ll, ll> pll;

const int Max = 50 + 10;
const int Mod = 1e9 + 7;
const ll Inf = 1LL << 62;

vector <pair<int, int>> cur;
vector <vector <pair<int, int>>> vec;

int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, 1, -1};

char ch[Max][Max];
int vist[Max][Max];

int n, m, k;

bool ok(int x, int y) {
	if(x < 1 || y < 1 || x > n || y > m || vist[x][y] || ch[x][y] == '*') {
		return 0;
	}
	return 1;
}

void dfs(int x, int y) {
	vist[x][y] = 1;
	cur.push_back({x, y});
	for(int i = 0; i < 4; i++) {
		int curx = x + dx[i];
		int cury = y + dy[i];
		if(ok(curx, cury)) {
			dfs(curx, cury);
		}
	}
}

bool cmp(vector <pair<int, int>> a, vector <pair<int, int>> b) {
	return a.size() < b.size();
}

int main() {
#ifdef Mr_Emrul
	freopen("inputf.in", "r", stdin);
#endif /// Mr_Emrul

	cin >> n >> m >> k;
	for(int i = 1; i <= n; i++) {
		for(int j = 1; j <= m; j++) {
			cin >> ch[i][j];
		}
	}
	for(int i = 1; i <= n; i++) {
		for(int j = 1; j <= m; j++) {
			if(!vist[i][j] && ch[i][j] == '.') {
				cur.clear();
				dfs(i, j);
				bool f = 1;
				for(pair<int, int> x : cur) {
					if(x.first == 1 || x.second == 1 || x.first == n || x.second == m) {
						f = 0;
					}
				}
				if(f) {
					vec.push_back(cur);
				}
			}
		}
	}
	sort(vec.begin(), vec.end(), cmp);
	int lagbe = vec.size() - k;
	int ans = 0;
	for(auto it : vec) {
		if(!lagbe) {
			break;
		}
		lagbe--;
		ans += it.size();
		for(pair <int, int> x : it) {
			ch[x.first][x.second] = '*';
		}
	}
	cout << ans << endl;
	for(int i = 1; i <= n; i++) {
		for(int j = 1; j <= m; j++) {
			cout << ch[i][j];
		}
		cout << endl;
	}
	return 0;
}