#include <bits/stdc++.h>

using namespace std;

#define int long long
#define MP make_pair
#define F first
#define S second
#define pi pair<int,int> 
#define sz(s) ((int)s.size())

const unsigned mod = 1e9 + 7;
const unsigned N = 5e5 + 4;

int n, m, u, v, c;
vector<pair<pi,pi>> edges;
vector<vector<int>> g;
vector<int> vis, topo, ans;

bool dfs(int x, int p) {
  vis[x] = -1;
  bool f = true;
  // cout << x << '\n';
  for (auto it: g[x]) {
    if (!vis[it]) {
      f &= dfs(it, x);
    }
    else if (vis[it] == -1) {
      f = false;
    }
  }
  topo.push_back(x);
  vis[x] = 1;
  return f;
}

bool check(int k) {
  g.assign(n, vector<int>(0));
  vis.assign(n, 0);
  topo.clear();
  ans.clear();
  for (const auto &i: edges) {
    if (i.F.F > k) {
      u = i.S.F, v = i.S.S;
      g[u].push_back(v);
      // cout << u << ' ' << v << '\n';
    }
  }
  bool possible = true;
  for (int i = 0; i < n; ++i) {
    if (!vis[i]) {
      possible &= dfs(i, i);
    }
  }
  if (!possible) return 0;
  reverse(topo.begin(), topo.end());
  vector<int> pos(n);
  for (int i = 0; i < n; ++i) {
    pos[topo[i]] = i;
  }
  // cout << "in" << '\n';
  // for (int x: topo) {
  //   cout << x+1 << ' ';
  // }
  // cout << '\n';
  for (const auto &i: edges) {
    if (i.F.F > k) {
      break;
    }
    u = i.S.F, v = i.S.S;
    if (pos[u] > pos[v]) {
      ans.push_back(i.F.S + 1);
    }
  }
  // cout << k << ' ' << (possible ? "YES" : "NO") << '\n';
  return 1;
}

signed main() {
  ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);

  cin >> n >> m;
  edges.resize(m);
  for (int i = 0; i < m; ++i) {
    cin >> u >> v >> c; 
    --u, --v;
    edges[i] = MP(MP(c, i), MP(u, v));
  }

  sort(edges.begin(), edges.end());

  int lo = 0;
  int hi = edges[m-1].F.F;
  vector<int> fin;
  while (lo <= hi) {
    int mid = lo + hi >> 1;
    if (check(mid)) {
      hi = mid - 1;
      fin = ans;
    }
    else {
      lo = mid + 1;
    }
  }

  cout << hi + 1 << ' ' << sz(fin) << '\n';
  sort(fin.begin(), fin.end());
  for (int x: fin) cout << x << ' ';

  
  assert(numeric_limits<int>::max() >= 1e18);
  return 0;
}