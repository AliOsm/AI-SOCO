#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

const int N=100100;
const ll mod = 1e9+7;

vector<int>adj[N],SCC[N];

int timer, SCC_cnt;
int num[N],low[N];

bool inStack[N];
stack<int> s;

ll cost[N];
ll ans=1 , sum=0;

void dfs(int u){

    num[u] = low[u] = ++timer;
    s.push(u);
    inStack[u] = 1;

    for(auto v:adj[u]){

        if ( num[v] == -1){// not visited
            dfs(v);
            low[u] = min(low[u], low[v]);
        }
        else if (inStack[v])
            low[u] = min(low[u], num[v]);
    }

    if ( num[u] == low[u]){
        int v;
        do{
            v = s.top();  s.pop();
            inStack[v] = 0;
            SCC[SCC_cnt].push_back(v) ;
        }
        while (u != v);
        SCC_cnt++;
    }
}

int main()
{
    int n,m;
    scanf("%d",&n);
    for(int i = 1; i <= n ; i++)
        scanf("%d",&cost[i]);

    scanf("%d",&m);
    while(m--){
        int u,v;
        scanf("%d%d",&u,&v);
        adj[u].push_back(v);
    }

    memset(num,-1,sizeof num);
    memset(low,-1,sizeof low);

    for(int i = 1 ; i <= n ; i++)
        if( num[i] == -1 )
                dfs(i);

    for(int i = 0 ; i<SCC_cnt ; i++){

        ll mn = 1e18, cnt = 0 ;

        for(auto node : SCC[i]){
            if(cost[node] == mn)cnt++;
            else if(cost[node] < mn){
                cnt = 1;
                mn = cost[node];
            }
        }
        sum+=mn;
        ans*=cnt;
        ans%=mod;
    }
    printf("%lld %lld\n",sum,ans);
    return 0;
}
