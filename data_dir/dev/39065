#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

const int N = 3e5 + 10;
int c[N];
vector<int> a[N];
int stamp = 0;
int L[N], R[N], idx[N];
int sum1[N], sum2[N];
int total1, total2;
int ret;

void DFS(int u, int parent) {
  L[u] = stamp;
  idx[stamp++] = u;
  sum1[stamp] = sum1[stamp - 1] + (c[u] == 1);
  sum2[stamp] = sum2[stamp - 1] + (c[u] == 2);
  for (auto& v : a[u]) {
    if (v == parent) continue;
    DFS(v, u);
  }
  R[u] = stamp;
}

void solve(int u, int parent) {
  for (auto& v : a[u]) {
    if (v == parent) continue;
    int cur1 = sum1[R[v]] - sum1[L[v]];
    int cur2 = sum2[R[v]] - sum2[L[v]];
    // trace(u, v, cur1, cur2);
    if ((cur1 == total1 && cur2 == 0) ||
        (cur1 == 0 && cur2 == total2)) {
      ++ret;
    }
    solve(v, u);
  }
}

int main() {
  int n;
  scanf("%d", &n);
  total1 = total2 = 0;
  for (int i = 0; i < n; ++i) {
    scanf("%d", &c[i]);
    total1 += (c[i] == 1);
    total2 += (c[i] == 2);
  }
  // trace(total1, total2);
  for (int k = 1; k < n; ++k) {
    int x, y;
    scanf("%d%d", &x, &y);
    --x; --y;
    a[x].push_back(y);
    a[y].push_back(x);
  }
  DFS(0, -1);
  ret = 0;
  solve(0, -1);
  printf("%d\n", ret);
  return 0;
}
