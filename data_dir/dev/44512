#include <bits/stdc++.h>
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
using namespace __gnu_pbds;
using namespace std;
 
#define pb push_back
#define mp make_pair
#define fir first
#define sec second
#define ll long long
#define ull unsigned long long
 
typedef tree<
        int,
        null_type,
        less<int>,
        rb_tree_tag,
        tree_order_statistics_node_update>
        ordered_set;
 
ll MOD=1e9+7;
ll mod=998244353;
int INF=1e9+7;
 
ll binpow (ll a, ll n) {
	if (n == 0)
		return 1;
	if (n % 2 == 1)
		return (binpow (a, n-1) * a) % MOD;
	else {
		int b = binpow (a, n/2)% MOD;
		return (b * b) % MOD;
	}
}
 
pair<int,ll> rev(pair<ll,int> x)
{
    return mp(x.sec,x.fir);
}
 
int lis(vector<int> &a)
{
    int n=a.size();
    vector<int> d(n+1,1e9+7);
    d[0]=0;
    for (int i=0;i<n;i++)
    {
        int j=(int)(upper_bound(d.begin(),d.end(),a[i])-d.begin());
        //if (d[j-1]<a[i]&&a[i]<d[j])
        {
            d[j]=a[i];
            //cout<<i;
        }
    }
    for (int i=n;i>=0;i--)
        if (d[i]<1e9+7) return i;
}
 
bool is_prime(int x)
{
    if (x==2) return 1;
    for (int i=2;i*i<=x;i++)
        if (x%i==0) return 0;
    return 1;
}
 
ll divider(ll a, ll b)
{
	ll x=mod-2;
	while(x)
	{
		if (x&1)
			a=(a*b)%mod;
		b=(b*b)%mod;
		x>>=1;
	}
	return a;
}
 
ll dist(ll x1,ll y1,ll x2,ll y2)
{
    return abs(x1-x2)+abs(y1-y2);
}

bool check(ll a1,ll b1,ll a2,ll b2)
{
    if (b1<a2||b2<a1) return 0;
    return 1;
}

char opposite(char x)
{
    if (x=='0') return '1';
    else return '0';
}

int main()
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int t;
    cin>>t;
    while (t--)
    {
        int n,k;
        string s;
        cin>>n>>k>>s;
        sort(s.begin(),s.end());
        if (s[0]<s[k-1]||k==n)
        {
            cout<<s[k-1]<<endl;
        }
        else
        {
            if (s[k]==s[n-1])
            {
                string ans="";
                ans+=s[k-1];
                int cur=k;
                while (cur<n)
                {
                    ans+=s[cur];
                    cur+=k;
                }
                cout<<ans<<endl;
            }
            else
            {
                cout<<s[k-1];
                for (int i=k;i<n;i++)
                    cout<<s[i];
                cout<<endl;
            }
        }
    }
    return 0;
}
/*
0 0 0
0 0 1
0 1 0
1 0 0
*/
//6 19 3 4 4 2 6 7 8
//2 3 4 4 6 6 7 8 19
 
 