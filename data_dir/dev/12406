/*jai mata di
 let's rock*/
#include<bits/stdc++.h>
using namespace std;
const int N=200004;
char s[N];
int prv[N],nxt[N];
vector<pair<int,int> >vec;
int h[N];
int findprv(int x)
{
    if(prv[x]==x) return x;
    else return (prv[x]=findprv(prv[x]));
}
int findnxt(int x)
{
    if(nxt[x]==x) return x;
    else return (nxt[x]=findnxt(nxt[x]));
}
int a[N];
int main()
{
    int n;
    scanf("%d",&n);
    scanf("%s",s+1);
    set<pair<int,pair<int,int> > >st;
    int i;
    for(i=1;i<=n;i++)
        scanf("%d",&a[i]);
    for(i=0;i<=n+1;i++){
        prv[i]=i;
        nxt[i]=i;
    }
    for(i=1;i<=n;i++){
        if(s[i]=='B' && s[i+1]=='G')
            st.insert(make_pair(abs(a[i]-a[i+1]),make_pair(i,i+1)));
        if(s[i]=='G' && s[i+1]=='B')
            st.insert(make_pair(abs(a[i]-a[i+1]),make_pair(i,i+1)));
    }
    while(!st.empty())
    {
        pair<int,pair<int,int> >p=*(st.begin());
        if((h[p.second.first]==0) && (h[p.second.second]==0))
        {
            h[p.second.first]=1;
            h[p.second.second]=1;
            vec.push_back(make_pair(p.second.first,p.second.second));
            int i1=findprv(p.second.first-1);
            int i2=findnxt(p.second.second+1);
            if(s[i1]=='B' && s[i2]=='G')
                st.insert(make_pair(abs(a[i1]-a[i2]),make_pair(i1,i2)));
            if(s[i1]=='G' && s[i2]=='B')
                st.insert(make_pair(abs(a[i1]-a[i2]),make_pair(i1,i2)));
            prv[p.second.first]=i1;
            prv[p.second.second]=i1;
            nxt[p.second.second]=i2;
            nxt[p.second.first]=i2;
        }
        st.erase(p);
    }
    printf("%d\n",vec.size());
    for(i=0;i<vec.size();i++)
        printf("%d %d\n",vec[i].first,vec[i].second);
    return 0;
}
