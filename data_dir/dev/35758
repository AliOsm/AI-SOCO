#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("board.in");ofstream out("board.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid u1(5, 10); u1(rnd);

bool sos(char a, char b){return abs(a-b)==1;}

int main() {
    fast;
    int g; cin>>g;
    for(; g; g--){
        str t,o; cin>>t;
        bool fl = 1;
        map<char, int> mp;
        vec<char> v;
        for(char i : t){
            mp[i]++;
            if(mp[i]==1) v.pb(i);
        }
        sort(v.begin(), v.end());
        int dif = mp.size();
        if(dif==1) o=t;
        else if(dif==2){
            if(sos(v[0], v[1])) fl=0;
            else o = t;
        }
        else if(dif==3){
            if(sos(v[0], v[1]) && sos(v[1], v[2])) fl=0;
        }
        if(fl && o.size()==0){
            for(;;){
                bool p=1;
                for(int q=1; q<v.size() && p; q++) p&=!sos(v[q-1], v[q]);
                if(p){
                    for(char u : v) for(int q=0; q<mp[u]; q++) o.pb(u);
                    break;
                }
                shuffle(v.begin(), v.end(), rnd);
            }
        }
        if(fl) cout<<o<<endl;
        else cout<<"No answer"<<endl;
    }
}