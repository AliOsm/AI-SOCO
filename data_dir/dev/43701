/*
digu_J - Digvijay Janartha
NIT Hamirpur - INDIA
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

template < typename T > using ordered_set = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;

typedef double db;
typedef long long ll;
typedef long double ld;
typedef pair < ll, ll > pll;
typedef vector < ll > vll;
typedef map < ll, ll > mll;
typedef set < ll > sll;
typedef vll lnum;

#define pb push_back
#define F first
#define S second
#define D(x) cout << (#x) << " is " << (x) << endl
#define fast_io() ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0)

const ll INF = LLONG_MAX;
const int inf = INT_MAX;
const ll base = 1e9;
const db PI = acos(-1);
const ll MOD = 1e9 + 7;
const ll N = 1e5 + 10;

ll c[31], cnt[31];

void solve();

int main() {
    fast_io();
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
        for (int i = 0; i < 1; ++i) {
            solve();
        }
        cout << "Time: " << (int)(clock() * 1000. / CLOCKS_PER_SEC) << "ms";
    #endif
    #ifdef ONLINE_JUDGE
        solve();
    #endif
    return 0;
}

void solve() {
    ll n, q;
    cin >> n >> q;
    ll a[n];
    mll cnt;
    for (ll i = 0; i < n; ++i) {
        cin >> a[i];
        ++cnt[log2(a[i])];
    }
    for (ll i = 0, x; i < q; ++i) {
        for (ll j = 0; j < 31; ++j) {
            c[j] = cnt[j];
        }
        cin >> x;
        ll ans = 0, temp = x;
        vll v;
        while (x) {
            v.pb(x % 2);
            x /= 2;
        }
        bool f = true;
        reverse(v.begin(), v.end());
        ll sz = v.size() - 1;
        for (auto &j : v) {
            if (j) {
                ll k = sz;
                while (k >= 0) {
                    ll cur = (1 << k);
                    if (c[k]) {
                        ll x = min(temp / cur, c[k]);
                        ans += x;
                        c[k] -= x;
                        temp -= (1 << k) * x;
                    }
                    --k;
                }
                if (temp) {
                    f = false;
                }
            }
            --sz;
        }
        cout << (f ? ans : -1) << "\n";
    }
}
