#include <stdio.h>
#include <iostream>
#include <vector>
#include <assert.h>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <stack>
#include <string>
#include <sstream>
#include <memory.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
using namespace std;
typedef long long ll;

inline ll f(ll x)
{
	return x * x;
}
ll calc(vector<int>& a, vector<int>& b, vector<int>& c)
{
	ll res = 5e18;
	for (auto& x : a)
	{
		auto it1 = lower_bound(b.begin(), b.end(), x);
		if (it1 != b.begin())
			--it1;
		auto it2 = lower_bound(c.begin(), c.end(), x);
		if (it2 != c.begin())
			--it2;
		for (int A = 0; it1 != b.end() && A < 3; ++A)
		{
			auto it = it2;
			for (int B = 0; B < 3; ++B)
			{
				if (it != c.end())
				{
					res = min(res, f(x - *it) + f(x - *it1) + f(*it - *it1));
					++it;
				}
				else
					break;
			}
			if (it1 != b.end())
				++it1;
			else
				break;
		}
	}
	return res;
}
int main()
{
	int t;
	scanf("%d", &t);
	vector<int> v[3];
	while (t--)
	{
		int n[3];
		for (int i = 0; i < 3; ++i)
			scanf("%d", &n[i]);
		for (int i = 0; i < 3; ++i)
		{
			v[i].resize(n[i]);
			for (auto& x : v[i])
				scanf("%d", &x);
			sort(v[i].begin(), v[i].end());
		}
		ll res = calc(v[0],v[1],v[2]);
		res = min(res, calc(v[1], v[0], v[2]));
		res = min(res, calc(v[2], v[0], v[1]));
		printf("%lld\n", res);
	}
	return 0;
}