#include <cstdlib>
#include <iostream>
#include <map>
#include <stdio.h>
#include <vector>
#include<bits/stdc++.h>
#include <ctype.h>
#include <list>
#include <stack>
#include <queue>
#include <string.h>
#include <iomanip>
#include <string>
#include <algorithm>
#include <cmath>
#define _CRT_SECURE_NO_DEPRECATE
#define INF 1000000000
#define Set(a, s) memset(a, s, sizeof (a))
#define forpos(i,j,k) for (int i=0 ; i<j ; i+=k)
#define forneg(i,j,k) for (int i=j ;i>=0 ;i-=k)
#define upcase(x) transform(x.begin(), x.end(), x.begin(), ::toupper)
#define locase(x) transform(x.begin(), x.end(), x.begin(), ::tolower)
#define PI 3.14159265358979323846
#define pf printf
#define SSTR( x ) dynamic_cast< std::ostringstream & >( \
       ( std::ostringstream() << std::dec << x ) ).str()


using namespace std;

typedef long long ll;
typedef std::pair<int,int> ii;
typedef std::pair<std::string,int> si;
typedef vector<int> vi;
typedef vector<ii> vii;

unsigned power( unsigned val, unsigned _pow=0 ) {
	if ( _pow <= 0 )
		return 1;
	return val * power( val, _pow-1 );
}


//int dx[]={-1,1,0,0,1,1,-1,-1};
//int dy[]={0,0,1,-1,1,-1,1,-1};
vector<vi> adjList;
vector <int>color;
queue<int>q;


bool comp(pair<int,int>x,pair<int,int>y)
{
    return x.first<y.first;
}
int n;
int arr[1000000];
int binarys(int x,int start,int last)
{
    int middle=start+(last-start)/2;
    if(arr[middle]>=x &&middle-1!=-1 &&arr[middle-1]<x)return middle+1;
    else if(arr[middle]>=x &&middle-1==-1)return middle+1;
    else if(arr[middle]<x)return binarys(x,middle+1,last);
    else return binarys(x,start,middle-1);
}
int main()
{

   ;cin>>n;
  int sum=0;
  forpos(i,n,1)
  {
      int temp;
      cin>>temp;
      arr[i]=temp+sum;
      sum+=temp;
  }
  arr[n]=INF;
  int m;cin>>m;
  forpos(i,m,1)
  {
      int temp;cin>>temp;
      cout<<binarys(temp,0,n-1)<<endl;
  }
	return 0;
}
