#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <deque>
#include <unordered_set>
#include <unordered_map>
#include <set>
#include <map>
#include <string>
using namespace std;
 
struct FT {
    static const int n = 200010;
    int f[n];
    FT() {
        fill(f, f + n, 0);
    }
    int sum(int r) {
        int res = 0;
        for (; r >= 0; r = (r & (r + 1)) - 1)
            res += f[r];
        return res;
    }
    void add(int i) {
        for (; i < n; i |= i + 1)
            f[i]++;
    }
} fa, fb, fr;
 
 
int main() {
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
 
    int n;
    scanf("%d", &n);
 
    static int a[200010], b[200010];
    for (int i = 0; i < n; i++)
        scanf("%d", &a[i]);
    for (int i = 0; i < n; i++)
        scanf("%d", &b[i]);
 
    static int limit[200010];
    for (int i = 0; i < n; i++)
        limit[i] = n - i;
 
    static int res[200010];
    for (int i = 0; i < n; i++) {
        int da = a[i] - fa.sum(a[i]);
        int db = b[i] - fb.sum(b[i]);
 
        fa.add(a[i]);
        fb.add(b[i]);
 
        res[i] = da + db;
    }
 
    int add = 0;
    for (int i = n - 1; i >= 0; i--) {
        int sum = (res[i] + add);
        if (i)
            res[i - 1] += sum / limit[i];
        res[i] %= limit[i];
    }
 
    for (int i = 0; i < n; i++) {
        int l = 0, r = n - 1;
        while (l + 1 < r) {
            int m = l + (r - l) / 2;
            if (fr.sum(m) + res[i] > m)
                l = m;
            else
                r = m;
        }
        int d = (fr.sum(l) + res[i] == l) ? l : r;
        printf("%d ", d);
        fr.add(d);
    }
}