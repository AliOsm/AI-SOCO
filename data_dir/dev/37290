#include <bits/stdc++.h>



using namespace std;



typedef long long LL;


int n,m;
LL c,x[200005],a[200005],p;
struct Node
{
	LL x,rx,lx,sum;
}tree[800005];
Node up(Node a,Node b)
{
	Node ans;
	ans.sum=a.sum+b.sum;
	ans.x=max(a.x,b.x);
	ans.x=max(ans.x,a.rx+b.lx);
	ans.lx=max(a.lx,a.sum+b.lx);
	ans.rx=max(b.rx,b.sum+a.rx);
	return ans;
}
void build(int x,int l,int r)
{
	if (l==r)
	{
		tree[x].x=tree[x].rx=tree[x].lx=max(0LL,a[l]);
		tree[x].sum=a[l];
		return;
	}
	int mid=(l+r)/2;
	build(x*2,l,mid);
	build(x*2+1,mid+1,r);
	tree[x]=up(tree[2*x],tree[2*x+1]);
}
Node query(int x,int l,int r,int ll,int rr)
{
	if (l==ll&&rr==r) return tree[x];
	int mid=(l+r)/2;
	if (rr<=mid) return query(x*2,l,mid,ll,rr);
	else if (ll>=mid+1) return query(x*2+1,mid+1,r,ll,rr);
	else return up(query(x*2,l,mid,ll,mid),query(x*2+1,mid+1,r,mid+1,rr));
}
LL sum=0;

int main()

{
	scanf("%d%d%I64d",&n,&m,&c);
	for (int i=1;i<=n;++i) scanf("%I64d",&x[i]);
	for (int i=1;i<n;++i)
	{
		scanf("%I64d",&p);
		a[i]=(x[i+1]-x[i])*50-p*c;
	}
	build(1,1,n-1);

	while (m--)
	{
		int l,r;
		scanf("%d%d",&l,&r);
		r--;
		sum+=query(1,1,n-1,l,r).x;
	}
	double ans=sum*0.01;
	printf("%.10f\n",ans);
	return 0;

}