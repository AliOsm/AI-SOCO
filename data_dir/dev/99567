#include <bits/stdc++.h>

using namespace std;

typedef pair <int,int> pii;

const int K = 4;

string Move = "ULRD";
int X[K] = {-1, 0, 0, +1};
int Y[K] = {0, -1, +1, 0};

bool InRange(int i, int j, int n)
{
    return 0 <= i && i < n && 0 <= j && j < n;
}

int main()
{
    int n;  cin >> n;

    vector <vector <pii>> A(n, vector <pii> (n));

    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            scanf("%d%d", &A[i][j].first, &A[i][j].second);

    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            if(A[i][j].first > 0)
                A[i][j].first--, A[i][j].second--;

    vector <string> Ans(n, string(n, 'X'));

    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < n; j++)
        {
            if(A[i][j].first == -1)
            {
                for(int k = 0; k < K; k++)
                    if(InRange(i + X[k], j + Y[k], n))
                        if(A[i + X[k]][j + Y[k]].first == -1)
                            Ans[i][j] = Move[k];

                if(Ans[i][j] == 'X')    return 0 * puts("INVALID");
            }
        }
    }

    queue <pii> q;
    vector <vector <bool>> Visited(n, vector <bool> (n));

    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            if(A[i][j] == pii(i, j))
                q.push(A[i][j]), Visited[i][j] = true;

    while(!q.empty())
    {
        pii p = q.front();  q.pop();

        int i = p.first;
        int j = p.second;

        for(int k = 0; k < K; k++)
        {
            if(InRange(i + X[k], j + Y[k], n))
            {
                if(!Visited[i + X[k]][j + Y[k]])
                {
                    if(A[i][j] == A[i + X[k]][j + Y[k]])
                    {
                        if(Ans[i + X[k]][j + Y[k]] != 'X')  return 0 * puts("INVALID");

                        q.push(pii(i + X[k], j + Y[k]));
                        Visited[i + X[k]][j + Y[k]] = true;
                        Ans[i + X[k]][j + Y[k]] = Move[K - 1 - k];
                    }
                }
            }
        }
    }

    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            if(A[i][j].first != -1 && !Visited[i][j])
                return 0 * puts("INVALID");

    puts("VALID");
    for(int i = 0; i < n; i++)  puts(Ans[i].c_str());
}
