#include<bits/stdc++.h>
using namespace std;
typedef long double ld;
typedef long long int ll;

const ll logx=30;
const ll N=2e5+5;
const ll M=10;
const ll mod=998244353;
const ll INF=1e9+5;
const double PI = 3.14159265358979323846;

#define ints(n) scanf("%d",&n)
#define intp(n) printf("%d\n",n)
#define longs(n) scanf("%intd",&n)
#define longp(n) printf("%intd\n",n)

inline ll mul(ll a, ll b){ return (a * 1ll * b) % mod; }
inline ll sub(ll a, ll b){ ll c = a - b; if(c < 0) c += mod; return c; }
inline ll add(ll a, ll b){ ll c = a + b; if(c > mod) c -= mod; return c; }

#define f first
#define s second
#define pb(x) push_back(x)
#define pf(x) push_front(x)
#define mp(x,y) make_pair(x,y)
#define GCD(a,b) __gcd((a),(b))
#define all(v) v.begin(),v.end()
#define bits(x) __builtin_popcountll(x)
#define LCM(a,b) ((a)*(b))/GCD((a),(b))
#define ms(dp,val) memset(dp,val,sizeof(dp))
#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);
template<typename T> T power(T x,T y){T ans=1;while(y>0){if(y&1LL) ans=(ans*x)%mod;y>>=1ll;x=(x*x)%mod;}return ans%mod;}

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);}

int n;
string s;
int a[N];

int main()
{
  fast;
  int t;
  cin>>t;
  while(t--)
  {
    cin>>n>>s;
    ll cnt=0,las=0,maxi=0,sum=0,lef=-1,rig=-1;
    for(int i=1;i<=n;i++){a[i]=(s[i-1]-'0');cnt+=a[i];}
    for(ll i=1;i<=n;i++)
    {
      if(a[i]){lef=i;break;}
    }
    for(ll i=n;i>=1;i--)
    {
      if(a[i]){rig=i;break;}
    }
    if(lef==-1){cout<<n<<endl;continue;}
    ll tot=(rig-lef+1);
    maxi=n;
    maxi=max(maxi,tot*2);
    maxi=max(maxi,(n-lef+1)*2);
    maxi=max(maxi,rig*2);
    cout<<maxi<<endl;
  }
}
