#include <bits/stdc++.h>
#define mp make_pair
#define pb push_back
#define INF 0x3f3f3f3f
#define VI vector<int>
#define pii pair<int,int>
#define LL long long
#define ULL unsigned long long
using namespace std;
int n;
int A[200010];
int BIT[200010];
LL D[200010];
class edge{
public:
	int to, w;
	edge(){}
	edge(int a, int b){
		to = a; w = b;
	}
};
void upd(int x, int s){
	while(x <= n){
		BIT[x] += s;
		x += x & -x;
	}
}
int query(int x){
	int sum = 0;
	while(x > 0){
		sum += BIT[x];
		x -= x & -x;
	}
	return sum;
}
vector<edge> g[200010];
int ANS[200010];
int parents(int idx, int node){
	int lo = 1, hi = idx - 1, mid;
	//printf("VAL %d\n", A[node]);
	//for(int i = 0; i < idx; i++) printf("%d ", D[i]); printf("\n");
	while(lo <= hi){
		mid = (lo + hi)/2;
		LL s = D[idx - 1] - D[mid - 1];
		//printf("%d %d\n", s, A[node]);
		if(s <= A[node]) hi = mid - 1;
		else lo = mid + 1;
	}
	//printf("%d\n", lo);
	if(lo >= idx) return 0;
	return idx - lo;
}
void dfs(int node, int prev = 0, int idx = 1, LL w = 0LL){
	//printf("%d %d\n", node, w);
	if(node){
		int sz = parents(idx, node);
		if(sz){
			//printf("%d %d\n", idx, sz);
			upd(idx - sz, 1);
			upd(idx, -1);
		}
	}
	for(int i = 0; i < (int)g[node].size(); i++){
		int next = g[node][i].to;
		if(next == prev) continue;
		D[idx] = w + g[node][i].w;
		dfs(next, node, idx+1, D[idx]);
	}
	ANS[node] = query(idx);
	upd(idx, -ANS[node]);
	upd(idx+1, ANS[node]);
}
int main(){
	scanf("%d", &n);
	for(int i = 0; i < n; i++) scanf("%d", &A[i]);
	for(int i = 1; i < n; i++){
		int x, y;
		scanf("%d %d", &x, &y);
		g[x-1].pb(edge(i,y));
	}
	dfs(0);
	for(int i = 0; i < n; i++) printf("%d ", ANS[i]); printf("\n");
	return 0;
}