#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <utility>
#include <set>
#include <map>

using namespace std;

#define pb push_back
#define mp make_pair
#define F first
#define S second
#define For(i, n) for (int i = 0; i < n; i++)

int main()
{
    int n, m;
    long long a[1111][1111];
    long long dp1[1111][1111];
    long long dp2[1111][1111];
    long long dp3[1111][1111];
    long long dp4[1111][1111];
    scanf("%d%d", &n, &m);
    For(i, n)
           For(j, m)
                  {
                      scanf("%I64d", &a[i][j]);
                      dp1[i][j] = dp2[i][j] = dp3[i][j] = dp4[i][j] = 0;
                  }
    For(i, n)
           For(j, m)
           {
                  dp1[i][j] = a[i][j];
                  long long x = 0, y = 0;
                  if (i)
                     x = dp1[i - 1][j];
                  if (j)
                     y = dp1[i][j - 1];
                  dp1[i][j] += max(x, y);
           }
    for (int i = n - 1; i >= 0; --i)
        For(j, m)
        {
               dp2[i][j] = a[i][j];
               long long x = 0, y = 0;
               if (j)
                  y = dp2[i][j - 1];
               if (i != n - 1)
                  x = dp2[i + 1][j];
               dp2[i][j] += max(x, y);
        }
    for (int i = n - 1; i >= 0; --i)
           for (int j = m - 1; j >= 0; --j)
           {
                  dp3[i][j] = a[i][j];
                  long long x = 0, y = 0;
                  if (i != n - 1)
                     x = dp3[i + 1][j];
                  if (j != m -1)
                     y = dp3[i][j + 1];
                  dp3[i][j] += max(x, y);
           }
    For(i, n)
        for (int j = m - 1; j >= 0; --j)
        {
               dp4[i][j] = a[i][j];
               long long x = 0, y = 0;
               if (j != m -1)
                  y = dp4[i][j + 1];
               if (i)
                  x = dp4[i -1][j];
               dp4[i][j] += max(x, y);
        }
    long long ans = 0;
    For(i, n)
           For(j, m)
                  {
                      long long x, y, z, h;
                      if (i && j && i != n - 1 && j != m - 1)
                         {
                               ans = max(ans, dp1[i - 1][j] + dp2[i][j - 1] + dp3[i + 1][j] + dp4[i][j + 1]);
                               ans = max(ans, dp2[i + 1][j] + dp1[i][j - 1] + dp4[i - 1][j] + dp3[i][j + 1]);
                         }
                  }   
    cout << ans << "\n";
    return 0;
}
