//ITNOG
#include<bits/stdc++.h>
 
using namespace std;
 
#define scan(x) do{while((x=getchar_unlocked())<'0'); for(x-='0'; '0'<=(_=getchar_unlocked()); x=(x<<3)+(x<<1)+_-'0');}while(0)
char _;

#define rep(i, s, e) for(int i = s; i < e; i ++)
typedef double ld;

const int maxN = 500 + 5;
const int mod = 1000*1000*1000+7;
const int base = 701;
const int maxL = 14;
typedef long long ll;
#define X first
#define Y second

int dp[maxN][maxN], odp[maxN][maxN];
char a[maxN][maxN];

vector<pair<int,int> > t[2*maxN];

int where(int x, int y)
{
    int ps = x+y;
    return lower_bound(t[ps].begin(), t[ps].end(), make_pair(x,y)) - t[ps].begin();
}

vector<int> xx[maxN], yy[maxN];

main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    int n,m; cin >> n >> m;
    rep(i,0,n) rep(j,0,m)
    {
	  cin >> a[i][j];
	  t[i+j].push_back({i,j});
    }
    
    if(a[0][0] != a[n-1][m-1]) { cout << 0 << endl; return 0; }
    dp[0][0] = 1;

    int cnt = n+m-1;
    int ted = (cnt-1) / 2;

    rep(i,0,ted)
    {
	  memcpy(odp,dp,sizeof dp);
	  memset(dp,0,sizeof dp);

	  rep(j,0,t[i].size())
	  {
		xx[j].clear();
		int x = t[i][j].X, y = t[i][j].Y;
		if(x+1 < n) xx[j].push_back(where(x+1,y));
		if(y+1 < m) xx[j].push_back(where(x,y+1));
	  }
	  
	  rep(j,0,t[cnt-i-1].size())
	  {
		yy[j].clear();
		int x = t[cnt-i-1][j].X, y = t[cnt-i-1][j].Y;
		if(x) yy[j].push_back(where(x-1,y));
		if(y) yy[j].push_back(where(x,y-1));
	  }

	  int x = cnt-i-1;
	  rep(j,0,t[i].size()) rep(k,0,t[x].size())
	  {
		int xf = t[i][j].X, yf = t[i][j].Y;
		int xs = t[x][k].X, ys = t[x][k].Y;
		if(a[xf][yf] != a[xs][ys]) continue;

		for(auto ff : xx[j]) 
		    for(auto ss : yy[k])
			  dp[ff][ss] = (dp[ff][ss] + odp[j][k]) % mod;
	  }
    }

    int ans = 0;
    if((n+m-1) % 2)
    {
	  rep(i,0,503) 
		ans += dp[i][i] % mod, ans %= mod;
    }
    else
    {
	  rep(i,0,t[ted].size())
	  {
		int x = t[ted][i].X, y = t[ted][i].Y;
		if(x+1 < n && a[x][y] == a[x+1][y]) 
		    ans += dp[i][where(x+1,y)] % mod, ans %= mod;
		if(y+1 < m && a[x][y] == a[x][y+1])
		    ans += dp[i][where(x,y+1)] % mod, ans %= mod;
	  }
    }

    cout << ans << endl;
    return 0;
}
