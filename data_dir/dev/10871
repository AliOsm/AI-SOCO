#include <bits/stdc++.h>
using namespace std;
#define SZ(v) int((v).size())
#define ALL(vec) (vec).begin(),(vec).end()
typedef unsigned long long i64;
template<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}
template<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}
#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); \
  stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
string to_string(char c) { return "'" + string(1, c) + "'";}
string to_string(string s) { return '"' + s + '"';}
string to_string(const char* s) { return to_string((string) s);}
template<typename A> string to_string(A);
template<typename A, typename B> string to_string(pair<A, B> p){
  return "(" + to_string(p.first) + ": " + to_string(p.second) + ")";}
template<typename A> string to_string(A v) {bool f = false; string r = "{"; 
  for (auto x: v) {if (f) r += ", "; r += to_string(x); f = true;} return r += "}";}
void err(istream_iterator<string>) {}
template<typename T,typename... Args> void err(istream_iterator<string> it, T a, Args... args) {
  cerr << *it << " =: " << to_string(a) << endl; err(++it, args...); }
template<typename T> void kek(T ans) {cout << ans << endl; exit(0);}
int const MOD = 1e9 + 7;
long long const INF = 1e18;
/***********************************************************************/
string wstr = "sjfnb";
string lstr = "cslnb";
void win() {
  kek(wstr);
}
void lose() {
  kek(lstr);
}
int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int n;
  cin >> n;
  vector<int> a(n);
  bool zero = false;
  for (int &z: a) cin >> z, zero |= z == 0;
  if (n == 1) {
    if (a[0] & 1) win();
    else lose();
  }
  sort(ALL(a));
  if (a.back() == 0) lose();
  for (int i = 1; i < n; ++i) {
    if (a[i] == a[i - 1]) {
      a[i]--;
      if (a[i] < 0) {
        lose();
      }
      sort(ALL(a));
      for (int j = 1; j < n; ++j) {
        if (a[j] == a[j - 1]) {
          lose();
        }
      }
      swap(wstr, lstr);
      break;
    }
  }
  i64 sum = accumulate(ALL(a), 0LL);
  i64 k = (i64) n * (n - 1) / 2;
  assert (sum >= k);
  if ((sum - k) & 1) win();
  else lose();
  
  return 0;
}
