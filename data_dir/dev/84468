#include <bits/stdc++.h>
#include <stdio.h>
#include <string.h>
using namespace std;
const int N=200000;
int n,m;
vector<int>graph[N];
bool used[N];
int c[N];
int pred[N];
bool bol1;
int min(long long a, long long b)
{
	if (a<b) return a;
	else
	return b;
}
int max(long long a, long long b)
{
	if (a<b) return b;
	else
	return a;
}


int main()
{
	ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	
	cin>>n;
	
	for (int i=1; i<=n; i++)
	{
		int from, to=i;
		cin>>from;
		graph[from].push_back(to);
		graph[to].push_back(from); 
		cin>>c[i];
		pred[i]=from;
		used[i]=false;
	}	
//	for (int i=1; i<=n; i++)
//	{
	//	cout<<i<<" ";
//		for (int j=0; j<graph[i].size(); j++) cout<<graph[i][j]<<" ";
	//	cout<<endl;
//	}
	for (int i=1; i<=n; i++)
	{
		
		if (c[i]==1)
		{
			bool bol=false;
			for (int j=0; j<graph[i].size(); j++)
			{
				if ((graph[i][j]!=pred[i]) && (c[graph[i][j]]==0)&&(used[graph[i][j]]==false))bol=true;
			}
			if (bol==false)
			{
				used[i]=true;
				cout<<i<<" ";
				bol1=true;
				for (int j=0; j<graph[i].size(); j++) if ((used[graph[i][j]]==false)&&(graph[i][j]!=pred[i]) )pred[graph[i][j]]=pred[pred[i]];
			}
		}
	}
	if (bol1==false) cout<<-1;
}
