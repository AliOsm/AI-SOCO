#include <iostream>
#include <algorithm>
#include <vector>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <stack>
#include <cstring>
#include <queue>
#include <set>
#include <cstdlib>
#include <fstream>
#include <map>

using namespace std;

#define mp make_pair
#define F first
#define S second

typedef long long ll;
typedef long double ld;

string s;
int n, N;
int f[5050][5050];
int zz[5050][5050];
int base = (int) 1e9 + 7;

void preCalc () {

    for (int ll = 1; ll < n; ll ++) {
        string t = s.substr(ll) + '#' + s.substr(0, ll);
//        cout << t << "\n";
        int N = (int) t.length();
        vector < int > z(N+1,0);
        for (int i=1, l=0, r=0; i<N; ++i) {
            if (i <= r)
                    z[i] = min (r-i+1, z[i-l]);
            while (i+z[i] < N && t[z[i]] == t[i+z[i]])
                ++z[i];
            if (i+z[i]-1 > r)
                l = i,  r = i+z[i]-1;
        }
        for (int i = 0; i < ll; i ++)
            zz[ll][i] = z[n - ll + 1 + i];

    }
}

int main() {
//    freopen ("input.txt", "r", stdin);
    cin >> n;
    cin >> s;
    preCalc();
//    for (int i = 1; i < n; i ++) {
//        for (int j = 0; j < n; j ++)
//            printf ("%d ", zz[i][j]);
//        printf ("\n");
//    }

    for (int r = 1; r <= n; r ++) {
        f[r][1] = 1;
        for (int l = 2; l <= r; l ++) {
            if (s[l-1] == '0') continue;

            int len = r - l + 1;

            int r1 = l - 1;
            int l1 = max (l - len, 1);

            int len1 = r1 - l1 + 1;

            if (len1 == len) {
                int pL = l1 + zz[l - 1][l1 - 1];
                int pR = l  + zz[l - 1][l1 - 1];
                if (pR > r || pL > r1) l1 ++;
                else if (s[pL - 1] >= s[pR - 1]) l1 ++;
            }
            f[r][l] = (1ll * f[r][l] + 1ll * f[r1][r1] - 1ll * f[r1][l1-1]) % base;
            if (f[r][l] < 0) f[r][l] += base;
        }
//
//        for (int i = 1; i <= r; i ++)
//            printf ("%d ", f[r][i]);
//        printf ("\n");
        for (int i = 1; i <= r; i ++)
            f[r][i] = (1ll * f[r][i] + 1ll * f[r][i-1]) % base;
    }


    printf ("%d", f[n][n]);
    return 0;
}
