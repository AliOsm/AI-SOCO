#include <bits/stdc++.h>
using namespace std;

#define F first
#define S second
#define PB push_back
#define size(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define FR(i, a, b) for(int i = a; i < b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define debug(x) cerr<< #x << ": " << x << endl;
#define fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);

typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

//const int mod = 1000 * 1000 * 1000 + 7;
const int N = 400 * 1000 + 10;
int x[N], y[N];
vector <pii> dq;
//pll p[N];
ll ans[N];

int main()
{
	int n, m;
	scanf("%d %d", &n, &m);
	FR(i, 0, n)
	{
		scanf("%d %d", x + i, y + i);
		dq.PB({y[i] - x[i], i});
	}

	FR(i, 0, m)
	{
		int a, b;
		scanf("%d %d", &a, &b);
		a--, b--;
		ans[a] -= min(y[a] + x[b], y[b] + x[a]);
		ans[b] -= min(y[a] + x[b], y[b] + x[a]);
	}

	sort(all(dq));
	ll sum = 0;
	FR(i, 0, n)
	{
		int ind = dq[i].S;
		ans[ind] += 1LL * x[ind] * (i) + sum;
		sum += y[ind];
	}
	sum = 0;
	ROF(i, n - 1, 0)
	{
		int ind = dq[i].S;
		ans[ind] += 1LL * y[ind] * (n - 1 - i) + sum;
		sum += x[ind];	
	}

	FR(i, 0, n)
		printf("%lld ", ans[i]);
	printf("\n");
	return 0;
}

