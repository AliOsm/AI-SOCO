#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template<class T> using OS = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define ll long long
#define ld double
#define ull unsigned long long

const int N = 2e5 + 5, MX = N;
string s;
int mx = -1, n, T[N << 2], L[N << 2];
map<char, int> chV;
set<int> se;

void push(int i, int s, int e) {
    if (L[i] != MX) {
        T[i] = min(T[i], L[i]);
        if (s != e) {
            L[i << 1] = min(L[i << 1], L[i]);
            L[i << 1 | 1] = min(L[i << 1 | 1], L[i]);
        }
        L[i] = MX;
    }
}

void udt(int l, int r, int val, int s = 0, int e = n, int i = 1) {
    push(i, s, e);
    if (l > e || r < s) return;
    if (l <= s && r >= e) {
        L[i] = min(L[i], val);
        push(i, s, e);
        return;
    }

    int mid = (s + e) >> 1;
    udt(l, r, val, s, mid, i << 1);
    udt(l, r, val, mid + 1, e, i << 1 | 1);

    T[i] = min(T[i << 1], T[i << 1 | 1]);
}

int qry(int l, int r, int s = 0, int e = n, int i = 1) {
    push(i, s, e);
    if (l > e || r < s) return MX;
    if (l <= s && r >= e) return T[i];

    int mid = (s + e) >> 1;
    return min(qry(l, r, s, mid, i << 1), qry(l, r, mid + 1, e, i << 1 | 1));
}

void init() {
    for (int i = 0; i < (N << 2); i++) T[i] = MX, L[i] = MX;
    n = s.size();
    chV['a'] = chV['A'] = -1;
    chV['e'] = chV['E'] = -1;
    chV['o'] = chV['O'] = -1;
    chV['i'] = chV['I'] = -1;
    chV['u'] = chV['U'] = -1;
}

int main() {
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);

    cin >> s;
    init();

    auto get = [&](int mid) {
        int curCnt = 0, curV = 0;
        for (int j = 0; j < mid; j++) {
            (chV[s[j]] == -1) ? curV-- : curV += 2;
        }

        if (curV >= 0) curCnt++;

        for (int i = 0; i + mid < n; i++) {
            (chV[s[i]] == -1) ? curV++ : curV -= 2;
            (chV[s[i + mid]] == -1) ? curV-- : curV += 2;
            if (curV >= 0) curCnt++;
        }

        return curCnt;
    };

    int sum = 0;
    for (int i = 0; i < n; i++) {
        (chV[s[i]] == -1) ? sum-- : sum += 2;

        if (sum >= 0) mx = i + 1;
        else {
            int gt = qry(-sum, n);
            mx = max(mx, i - gt);
            udt(0, -sum, i);
        }
    }

    (mx == -1) ? cout << "No solution" : cout << mx << " " << get(mx);

    return 0;
}