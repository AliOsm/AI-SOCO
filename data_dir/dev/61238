#include <cstdio>
const int mod = 1000000007;
int a[200010], w[200010];
long long wi[200010];
long long b[200010], bi[200010];
void add(int x, int s) {
	while (x < 200010) {
		b[x] += s;
		x += x & -x;
	}
}
void addi(int x, int s) {
	while (x < 200010) {
		bi[x] += s;
		if (bi[x] >= mod) bi[x] -= mod;
		if (bi[x] < 0) bi[x] += mod;
		x += x & -x;
	}
}
long long sum(int x) {
	long long res = 0;
	while (x) {
		res += b[x];
		x -= x & -x;
	}
	return res;
}
long long sumi(int x) {
	long long res = 0;
	while (x) {
		res += bi[x];
		if (res >= mod) res -= mod;
		x -= x & -x;
	}
	return res;
}
int f(int l, int m, int r) {
	long long wl = sum(m) - sum(l), wr = sum(r) - sum(m + 1);
	if (wl + w[m+1] < wr) return -1;
	if (wl > w[m+1] + wr) return 1;
	return 0;
}
int main() {
	int n, q;
	scanf("%d%d", &n, &q);
	for (int i = 0; i < n; i++) {
		scanf("%d", &a[i]);
	}
	for (int i = 1; i <= n; i++) {
		scanf("%d", &w[i]);
		add(i, w[i]);
		wi[i] = (long long)w[i] * (a[i-1] - i) % mod;
		addi(i, wi[i]);
	}
	while (q--) {
		int l, r;
		scanf("%d%d", &l, &r);
		if (l < 0) {
			l = -l;
			add(l, r - w[l]);
			w[l] = r;
			addi(l, -wi[l]);
			wi[l] = (long long)w[l] * (a[l-1] - l) % mod;
			addi(l, wi[l]);
		} else {
			--l;
			int lo = l, hi = r;
			while (lo + 1 < hi) {
				int mid = (lo + hi) / 2;
				int x = f(l, mid, r);
				if (x <= 0) {
					lo = mid;
					if (x == 0) break;
				} else {
					hi = mid;
				}
			}
			long long kl = sumi(lo) - sumi(l);
			if (kl < 0) kl += mod;
			long long kr = sumi(r) - sumi(lo + 1);
			if (kr < 0) kr += mod;
			long long al = (sum(lo) - sum(l)) % mod * (a[lo] - lo - 1) % mod, ar = (sum(r) - sum(lo + 1)) % mod * (a[lo] - lo - 1) % mod;
			long long ans = ((al - kl - ar + kr) % mod + mod) % mod;
			printf("%I64d\n", ans);
		}
	}
	return 0;
}
