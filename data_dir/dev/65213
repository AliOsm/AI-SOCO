#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define ld long double
#define oo 666666666


int try_kuhn (int c, vector<vector<int>>&G, vector<int>&A, vector<int>&B, vector<int>&used)
{
	if (used[c])  return 0;
	used[c] = 1;

	for (auto&u : G[c])
		if (B[u] == -1 || try_kuhn(B[u],G,A,B,used))
		{
            B[u] = c;
            A[c]=u;
			return 1;
		}
	return 0;
}

int n,m;
int P[5005];
int Club[5005];
set<int>C[5005];
set<int>Pot[5005];

int main()
{
    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    int d,k;
    cin>>n>>m;
    for(int i=1; i<=n; i++)
        cin>>P[i],Pot[P[i]].insert(i);

    for(int i=1; i<=n; i++)
        cin>>Club[i],C[Club[i]].insert(i);

    cin>>d;
    vector<int>Q(d);
    for(int&x:Q)
    {
        cin>>x;
        Pot[P[x]].erase(x);
        C[Club[x]].erase(x);
    }

    vector<int>ats(d);

    vector<int>A(5005,-1);
    vector<int>B(5005,-1);
    vector<int>used(5005);
    vector<vector<int>>G(5005);
    for(int i=1; i<=m; i++)
        for(auto u : C[i])
        G[P[u]].push_back(i);

    int mex = 0;
	for (int i=0; i<=n; ++i)
    if(A[i]==-1)
    {
		fill(used.begin(), used.end(), 0);
		mex += try_kuhn (i, G, A, B, used);
		if(mex==i)break;
	}

    for(int i=d-1; i>=0; i--)
    {
        while(1)
        {
            int oldMex = mex;
            fill(used.begin(), used.end(), 0);
            mex += try_kuhn (mex, G, A, B, used);
            if(mex==oldMex)break;
        }
        ats[i]=mex;
        int x = Q[i];
        G[P[x]].push_back(Club[x]); //new edge
    }

    for(int&x:ats)cout<<x<<"\n";
}
