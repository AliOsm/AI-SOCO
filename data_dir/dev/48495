#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cstring>
#include <string>
#include <algorithm>
#include <vector>
#include <set>
#include <queue>
#include <map>
#include <stack>
#include <complex>
#include <random>
#include <bitset>
using namespace std;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

string good, S, T;
bool isGood[26];
int N, Q;

bool check()
{
    int M = T.size(), lidx = 0, ridx = M - 1;
    bool hasStar = false;
    for (int i = 0; i < N; i++)
    {
        if (S[i] == '?')
        {
            if (lidx == M || !isGood[T[lidx] - 'a'])
                return false;
            lidx++;
        }
        else if (S[i] == '*')
        {
            hasStar = true;
            break;
        }
        else
        {
            if (lidx == M || S[i] != T[lidx])
                return false;
            lidx++;
        }
    }
    if (!hasStar)
        return lidx == M;

    for (int i = N - 1; i >= 0; i--)
    {
        if (S[i] == '?')
        {
            if (ridx == -1 || !isGood[T[ridx] - 'a'])
                return false;
            ridx--;
        }
        else if (S[i] == '*')
        {
            break;
        }
        else
        {
            if (ridx == -1 || S[i] != T[ridx])
                return false;
            ridx--;
        }
    }

    if (ridx < lidx - 1)
        return false;
    for (int i = lidx; i <= ridx; i++)
        if (isGood[T[i] - 'a'])
            return false;
    return true;
}

int main()
{
	ios::sync_with_stdio(0);

    cin >> good >> S;
    N = S.size();
    for (int i = 0; i < good.size(); i++)
        isGood[good[i] - 'a'] = true;

    cin >> Q;
    for (int i = 0; i < Q; i++)
    {
        cin >> T;
        if (check())
            cout << "YES\n";
        else
            cout << "NO\n";
    }

	return 0;
}
