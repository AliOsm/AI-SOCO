#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>

using namespace std;
const int N = 1005;

struct node {
	node* right = nullptr;
	node* down = nullptr;
	int val;

	node(int x): val(x) {}
};

node* t[N][N];

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(nullptr);
	int n, m, q;
	cin >> n >> m >> q;
	for(int i = 0; i < n + 2; ++i) {
		for(int j = 0; j < m + 2; ++j) {
			t[i][j] = new node(-1);
		}
	}
	for(int i = 0; i < n + 1; ++i) {
		for(int j = 0; j < m + 1; ++j) {
			t[i][j]->right = t[i][j + 1];
			t[i][j]->down = t[i + 1][j];
		}
	}
	for(int i = 1; i <= n; ++i) {
		for(int j = 1; j <= m; ++j) {
			cin >> t[i][j]->val;
		}
	}

	int a, b, c, d, h, w;
	for(int query = 0; query < q; ++query) {
		cin >> a >> b >> c >> d >> h >> w;
		node *x = t[0][0], *y = t[0][0];
		while(--a) x = x->down;
		while(--b) x = x->right;
		while(--c) y = y->down;
		while(--d) y = y->right;

		node *v = x, *u = y;
		for(int i = 0; i < h; ++i) {
			u = u->down;
			v = v->down;
			swap(u->right, v->right);
		}
		for(int i = 0; i < w; ++i) {
			u = u->right;
			v = v->right;
			swap(u->down, v->down);
		}
		for(int i = 0; i < w; ++i) {
			x = x->right;
			y = y->right;
			swap(x->down, y->down);
		}
		for(int i = 0; i < h; ++i) {
			x = x->down;
			y = y->down;
			swap(x->right, y->right);
		}
	}
	
	node *cur = t[0][0];
	cur = cur->right->down;
	for(int i = 0; i < n; ++i) {
		node *head = cur;
		for(int j = 0; j < m; ++j) {
			cout << cur->val << " ";
			cur = cur->right;
		}
		cout << endl;
		cur = head->down;
	}
	return 0;
}
