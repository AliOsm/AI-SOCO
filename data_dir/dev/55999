#include <bits/stdc++.h>

using namespace std;

const int maxN = 2222;

int a[maxN], b[maxN], dp[maxN];

int solve(int n) {
    for (int i = 1; i <= n; ++i) {
        dp[i] = 1;
        for (int j = 1; j < i; ++j) {
            if (a[j] < a[i]) dp[i] = max(dp[i], dp[j] + 1);
        }
    }
    int answer = dp[1];
    for (int i = 2; i <= n; ++i) answer = max(answer, dp[i]);
    return answer;
}

int get(int n) {
    int ans = solve(n);
    reverse(a + 1, a + n + 1);
    ans += solve(n);
    reverse(a + 1, a + n + 1);
    return ans;
}

int main() {
    //freopen("input.txt", "r", stdin);
    ios_base::sync_with_stdio(false);
    /*int n;
    cin >> n;
    for (int i = 1; i <= n; ++i) a[i] = i;
    int fact = 1;
    for (int i = 1; i <= n; ++i) {
        fact *= i;
    }
    int ans = 1e9;
    for (int i = 1; i <= fact; ++i) {
        int cnt = get(n);
        if (cnt < ans) {
            ans = cnt;
            for (int j = 1; j <= n; ++j) b[j] = a[j];
        }
        next_permutation(a + 1, a + n + 1);
    }
    for (int i = 1; i <= n; ++i) cout << b[i] << " "; cout << endl;
    cout << ans << endl;*/

    int n;
    cin >> n;
    int val = 1;
    while ((val + 1) * (val + 1) <= n) {
        ++val;
    }
    vector<int> ans;
    int tmp = n;
    while (tmp >= 1) {
        int r = tmp;
        int l = r - val + 1;
        if (l < 1) l = 1;
        tmp = l - 1;
        for (int k = l; k <= r; ++k) ans.push_back(k);
    }
    reverse(ans.begin(), ans.end());
    for (int i = 0; i < ans.size(); ++i) cout << ans[i] << " "; cout << endl;
    return 0;
}
