/*input
5
1 2 3 4 5
*/
#include <bits/stdc++.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define N 1000005
#define hash  hash__
int n;
int a[N];
map<int, int> hash;
int in[N];
int f[N];
struct nBIT {
	int tree[N];
	void update(int i, int val) {
		tree[i] += val;
		return;
	}
	int get(int i) {
		return tree[i];
	}
} up, down;

void update(int i, int val) {
	for (; i <= N - 5; i += i & -i) f[i] += val;
	return;
}

int get(int i) {
	int ret = 0;
	for (; i; i -= i & -i) ret += f[i];
	return ret;
}
long long ans = 0;
int main() {
	// freopen("459D.inp", "r", stdin);
	// freopen("459D.out", "w", stdout);
	scanf("%d", &n);
	for (int i = 1; i <= n; i++) {
		scanf("%d", &in[i]);
		a[i] = in[i];
	}
	sort(in + 1, in + n + 1);
	int cnt = 0;
	for (int i = 1; i <= n; i++) {
		if (hash[a[i]] == 0) {
			hash[a[i]] = ++cnt;
		}
	}
	for (int i = 1; i <= n; i++) {
		a[i] = hash[a[i]];
	}
	for (int i = 1; i <= n; i++) up.update(a[i], 1);
	for (int i = n; i >= 1; i--) {
		ans += get(up.get(a[i]) - 1);
		up.update(a[i], -1);
		down.update(a[i], 1);
		update(down.get(a[i]), 1);
	}
	cout << ans << endl;
}