///In the name of ALLAH

#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vi> vvi;
typedef vector<vl> vvl;
typedef pair<int,int> pii;
typedef pair<double, double> pdd;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;
typedef double dl;

#define PB push_back
//#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'
#define all(a) (a).begin(),(a).end()
#define sz(x) (int)x.size()
#define mx_int_prime 999999937

const double PI = acos(-1);
const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007
//#define harmonic(n) 0.57721566490153286l+log(n)

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define sqr(a) ((a) * (a))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);
#define file() freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);

typedef vector<int>::iterator vit;
typedef set<int>::iterator sit;

inline bool checkBit(ll n, int i) { return n&(1LL<<i); }
inline ll setBit(ll n, int i) { return n|(1LL<<i); }
inline ll resetBit(ll n, int i) { return n&(~(1LL<<i)); }

struct edge {
    int u, v, w;
};

bool cmp ( const edge &a, const edge &b )
{
    return a.w < b.w;
}

string to_s(int t)
{
  stringstream ss;
  ss << t;
  return ss.str();
}


int dx[] = {0, 0, +1, -1};
int dy[] = {+1, -1, 0, 0};
//int dx[] = {+1, 0, -1, 0, +1, +1, -1, -1};
//int dy[] = {0, +1, 0, -1, +1, -1, +1, -1};
inline ll max ( ll a, ll b ) { return ( a >= b ) ? a : b; }
inline ll min ( ll a, ll b ) { return ( a <= b ) ? a : b; }
inline bool EQ(double a, double b) { return fabs(a-b) < 1e-9; }
inline bool isLeapYear(ll year) { return (year%400==0) || (year%4==0 && year%100!=0); }
inline ll lcm ( ll a, ll b ) { return ( a * ( b / gcd (a, b) ) ); }
inline void normal(ll &a) { a %= MOD; (a < 0) && (a += MOD); }
inline ll modMul(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a*b)%MOD; }
inline ll modAdd(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a+b)%MOD; }
inline ll modSub(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); a -= b; normal(a); return a; }
inline ll modPow(ll b, ll p) { ll r = 1; while(p) { if(p&1) r = modMul(r, b); b = modMul(b, b); p >>= 1; } return r; }
inline ll modInverse(ll a) { return modPow(a, MOD-2); }
inline ll modDiv(ll a, ll b) { return modMul(a, modInverse(b)); }

/*
bool seive[1010000];
vi prime;

void seiveGen(int limit) {
    limit += 100;
    int sqrtn = sqrt(limit);
    for(int i = 3; i <= sqrtn; i += 2) {
            if(!seive[i>>1]) {
                    for(int j = i * i; j < limit; j += i + i) {
                            seive[j>>1] = 1;
                    }
            }
    }
    prime.PB(2);
    for(int i = 3; i < limit; i += 2) {
            if(!seive[i>>1]) prime.PB(i);
    }
}
*/

//
//debug
//#ifdef
template < typename F, typename S >
ostream& operator << ( ostream& os, const pair< F, S > & p ) {
            return os << "(" << p.first << ", " << p.second << ")";
}

template < typename T >
ostream &operator << ( ostream & os, const vector< T > &v ) {
            os << "{";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << *it;
                                            }
                    return os << "}";
}

template < typename T >
ostream &operator << ( ostream & os, const set< T > &v ) {
            os << "[";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << *it;
                                            }
                    return os << "]";
}

template < typename T >
ostream &operator << ( ostream & os, const multiset< T > &v ) {
            os << "[";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << *it;
                                            }
                    return os << "]";
}

template < typename F, typename S >
ostream &operator << ( ostream & os, const map< F, S > &v ) {
            os << "[";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << it -> first << " = " << it -> second ;
                                            }
                    return os << "]";
}

#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)

void faltu () {
            cerr << endl;
}

template <typename T>
void faltu( T a[], int n ) {
            for(int i = 0; i < n; ++i) cerr << a[i] << ' ';
                cerr << endl;
}

template <typename T, typename ... hello>
void faltu( T arg, const hello &... rest) {
            cerr << arg << ' ';
                faltu(rest...);
}
//#else
//#define dbg(args...)

const int mx = 2e5+123;
int t[mx*3], a[mx], prop[mx*3];
bool vis[mx*3];

void shift ( int id )
{
    t[id*2] += prop[id];
    t[id*2+1] += prop[id];

    prop[id*2] += prop[id];
    prop[id*2+1] += prop[id];

    vis[id*2] = vis[id*2+1] = 1;
    prop[id] = vis[id] = 0;
}

void upd ( int id, int b, int e, int i, int j, int val )
{
    if ( b > j || e < i ) return;
    if ( b >= i && e <= j ) {
        t[id] += val;
        prop[id] += val;
        vis[id] = 1;
        return;
    }

    if ( vis[id] ) shift ( id );
    int mid = ( b + e ) >> 1;

    upd ( id*2, b, mid, i, j, val );
    upd ( id*2+1, mid+1, e, i, j, val );

    t[id] = t[id*2] + t[id*2+1];
}

int ask ( int id, int b, int e, int i, int j )
{
    if ( b > j || e < i ) return 0;
    if ( b >= i && e <= j ) return t[id];

    if ( vis[id] ) shift ( id );
    int mid = ( b + e ) >> 1;

    int ret1 = ask ( id*2, b, mid, i, j );
    int ret2 = ask ( id*2+1, mid+1, e, i, j );

    return ret1 + ret2;
}

pii p[mx];

int main()
{
    optimize();

    vi v_id[mx];
    int n, q, z = 0;
    bool done = 0;

    cin >> n >> q;
    for ( int i = 1; i <= n; i++ ) {
        cin >> a[i];
        v_id[a[i]].PB ( i );
        z += ( a[i] == 0 );
        if ( a[i] == q ) done = 1;

        if ( p[a[i]].F == 0 && p[a[i]].S == 0 ) p[a[i]] = { i, i };
        else p[a[i]] = { min ( i, p[a[i]].F ), max ( i, p[a[i]].S ) };
       // dbg ( a[i], p[a[i]] );
    }

    if ( z == n ) {
        cout << "YES\n";
        for ( int i = 0; i < n; i++ ) cout << q << " ";
        return 0;
    }

    for ( int i = q; i >= 1; i-- ) {
        if ( p[i].F == 0 && p[i].S == 0 ) continue;

        for ( auto u : v_id[i] ) {
            int ret = ask ( 1, 1, n, u, u );
           // dbg ( u, ret, a[u], p[i].F, p[i].S );
            if ( ret != 0 ) return cout << "NO", 0;
        }

        upd ( 1, 1, n, p[i].F, p[i].S, 1 );
    }

    if ( !done ) {
      //  dbg ( done );
        for ( int i = 1; i <= n; i++ ) {
        //    dbg ( a[i] );
            if ( a[i] == 0 ) {
                a[i] = q;
                done = 1;
                break;
            }
        }
        //dbg ( done );
        if ( !done ) return cout << "NO", 0;
    }

    for ( int i = 1; i <= n; i++ ) {
        if ( a[i] == 0 ) a[i] = a[i-1];
    }

    for ( int i = n; i >= 1; i-- ) {
        if ( a[i] == 0 ) a[i] = a[i+1];
    }

    cout << "YES\n";
    for ( int i = 1; i <= n; i++ ) cout << a[i] << " ";

    return 0;
}

