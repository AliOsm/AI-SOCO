/* practice with Dukkha */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>

#define MD	0x7fffffff
#define L	600000
#define M	(L * 2)

int rand_(int n) {
	return (rand() * 76543LL + rand()) % n;
}

int xx[L], yy[L];
int X, Y;

void srand_() {
	struct timeval tv;
	long long x, y;
	int i;

	gettimeofday(&tv, NULL);
	srand(tv.tv_sec ^ tv.tv_usec);
	X = rand_(MD - 26) + 26;
	Y = rand_(MD - 26) + 26;
	x = y = 1;
	for (i = 0; i < L; i++) {
		xx[i] = x;
		yy[i] = y;
		x = x * X % MD;
		y = y * Y % MD;
	}
}

int next[1 + M], ht[M];
long long aa[1 + M];

int link(int q, long long a) {
	static int _ = 1;

	next[_] = q;
	aa[_] = a;
	return _++;
}

void add(long long a) {
	int l, key = a % M;

	for (l = ht[key]; l; l = next[l])
		if (aa[l] == a)
			return;
	ht[key] = link(ht[key], a);
}

int contains(long long a) {
	int l, key = a % M;

	for (l = ht[key]; l; l = next[l])
		if (aa[l] == a)
			return 1;
	return 0;
}

long long x_, y_;

void hash(char *cc, int n) {
	int i;

	x_ = y_ = 0;
	for (i = 0; i < n; i++) {
		x_ = (x_ * X + cc[i]) % MD;
		y_ = (y_ * Y + cc[i]) % MD;
	}
}

void update(char *cc, int n) {
	int i;
	char c;

	hash(cc, n);
	for (i = 0; i < n; i++)
		for (c = 'a'; c <= 'c'; c++) {
			long long a = c - cc[i];

			if (a != 0) {
				long long x = (x_ + xx[n - 1 - i] * a + MD * 2LL) % MD;
				long long y = (y_ + yy[n - 1 - i] * a + MD * 2LL) % MD;

				add(x * MD + y);
			}
		}
}

int query(char *cc, int n) {
	hash(cc, n);
	return contains(x_ * MD + y_);
}

int main() {
	static char cc[L + 1];
	int n, m;

	srand_();
	scanf("%d%d", &n, &m);
	while (n--) {
		scanf("%s", cc);
		update(cc, strlen(cc));
	}
	while (m--) {
		scanf("%s", cc);
		printf(query(cc, strlen(cc)) ? "YES\n" : "NO\n");
	}
	return 0;
}
