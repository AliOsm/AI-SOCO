/*
 * SAD
 */
#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma comment(linker, "/STACK:1024000000,1024000000")
#include <bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/rope>

using namespace __gnu_pbds;
using namespace __gnu_cxx;

template<class T> using orderd_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define S second
#define F first
#define pb push_back
const int inf = 1e9;
using ii = pair<int, int>;
using ll = long long;
using db = long double;

const int N = 2e5 + 5, M = 1000 * 1000 * 10 + 5, K = 55, Base = 27, MOD = 1e9
		+ 7, MOD2 = 998244353;
const ll MX = 1e15;
const int blkSz = 200;
const db EPS = 1e-7;
const int PI = 3;
int p[N], a[N], q, n, m;
int nxt[N], go[N];
vector<int> adj[N];
bitset<N>vis;
vector<int> cur;
int tb[N][18], S[N];
void dfs(int u){
	cur.push_back(u);
	if(cur.size() >= n){
		tb[u][0] = cur[cur.size()-n];
	}	else
		tb[u][0] = m;
	for(auto v : adj[u])
		dfs(v);
	cur.pop_back();
}
int qr(int l, int r){
	int k = S[r-l+1];
	return min(tb[l][k],tb[r-(1<<k)+1][k]);
}
int main() {
#ifdef ONLINE_JUDGE
	ios_base::sync_with_stdio(0);
	cin.tie(0);
#endif
	cin >> n >> m >> q;
	for(int i = 2; i <N;i++)S[i] = S[i>>1]+1;
	for(int i = 0; i < n; i++){
		cin >> p[i];	--p[i];
	}

	for(int i = n - 2; i >= 0; --i){
		nxt[p[i]] = p[i+1];
	}
	nxt[p[n-1]] = p[0];

	for(int i = 0; i < m; i++){
		cin >> a[i];	--a[i];
	}
	fill(go,go+n,m);
	for(int i = m - 1; i >= 0; --i){
		adj[go[nxt[a[i]]]].pb(i);
		go[a[i]] = i;
	}

	dfs(m);

	for(int i = 1; i < 18; i++)
		for(int j =0; j + (1 << (i-1)) < m; j++)
			tb[j][i] = min(tb[j][i-1], tb[j+(1<<(i-1))][i-1]);

	while(q--){
		int l, r;
		cin >>l >> r;
		--l,--r;
		cout << (qr(l,r) <= r);
	}

	return 0;
}
