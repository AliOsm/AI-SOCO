#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

ll read_long() {
    ll ans = 0;
    char c;
    bool started = false;
    bool is_negative = false;
    while (true) {
        c = getchar();
        if ((c < '0' || c > '9') && c != '-' && !started) continue;
        if ((c < '0' || c > '9') && c != '-' && started) break;
        if (started) {
            ans = ans * 10;
        }
        started = true;
        if (c == '-') is_negative = true;
        else ans += c - '0';
    }
    if (is_negative) ans *= -1;
    return ans;
}

int n, k, A, B;
int a[100100];

int calc(int x) {
    if (x < 1) return 0;
    if (a[0] > x) return 0;
    int l = 0, r = k - 1;
    int best = 0;
    while (l <= r) {
        int mid = (l + r) >> 1;
        if (a[mid] <= x) {
            best = mid;
            l = mid + 1;
        } else r = mid - 1;
    }
    return best + 1;
}

int calc(int l, int r) {
    if (l > r) return 0;
    return calc(r) - calc(l - 1);
}

ll destroy(int l, int r) {
    int cnt = calc(l, r);
    if (cnt == 0) return A;
    ll ans = B * 1ll * cnt * (r - l + 1);
    if (l == r) return ans;
    int mid = (l + r) >> 1;
    return min(ans, destroy(l, mid) + destroy(mid + 1, r));
}

int main(){

    scanf("%d%d%d%d", &n, &k, &A, &B);
    for (int i = 0; i < k; i++) scanf("%d", a + i);

    sort(a, a + k);

    printf("%lld\n", destroy(1, (1 << n)));

    return 0;
}
