#include <bits/stdc++.h>

using namespace std;
typedef long long ll;

const int N = 40006;

bool f(int x){
	if(x == 1) return 1;
	
	for(int a = 2; a < x; a++){
		int t = 1;
		while(t < x) t *= a;
		if(t == x) return 1;
	}
	return 0;

}

inline int lg(ll x){ return 63 - __builtin_clzll(x); }

inline bool over(ll a, ll b){ return lg(a) + lg(b) > 60; }

inline ll pot(ll b, ll e){
	ll ans = 1;
	bool ob = false;
	while(e){
		if(e & 1){
			if(ob || over(ans, b)) return -1;
			ans *= b;
		}
		ob |= over(b, b);
		b *= b;
		e >>= 1;
	}
	return ans;
}

ll p[N][62];

ll sq(ll n){
	ll x = sqrt(n) + 3;
	while(1){
		x--;
		if(!over(x, x) && x * x <= n) return x;
	}
}
ll sq3(ll n){
	ll x = cbrt(n) + 3;
	while(1){
		x--;
		if(3*lg(x) < 60 && x * x * x <= n) return x;
	}
}

ll square(ll n, int k){
	if(k == 1) return n;
	if(k == 2) return sq(n);
	if(k == 3) return sq3(n);

	ll ans = pow(n, 1.0/k) + 3;

	while(1){
		ans--;
		if(p[ans][k] <= n) return ans;
	}
}

int mu[N];

ll solve(ll n){
	int l = lg(n);
	
	ll ans = n;
	for(int k = 1; k <= l; k++)
		ans -= mu[k] * (square(n, k) - 1);

	return ans;
}


int main(){

	mu[1] = 1;
	for(int i = 1; i < N; i++) if(mu[i]){
		for(int j = i+i; j < N; j += i) mu[j] -= mu[i];
	}

	for(int i = 1; i < N; i++){
		p[i][0] = 1;
		bool ov = 0;
		for(int j = 1; j < 62; j++){
			ov |= over(p[i][j-1], i);
			if(ov) p[i][j] = 2e18;
			else{
				p[i][j] = p[i][j-1] * i;
			}
		}
	}

	int q;

	scanf("%d", &q);

	ll l, r;

	while(q--){
		scanf("%lld %lld", &l, &r);
		printf("%lld\n", solve(r) - solve(l-1));
	}



}
