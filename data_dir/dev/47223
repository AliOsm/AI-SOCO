
#include<bits/stdc++.h>
using namespace std;
long long MOD=1000000007;
const int MAXN = 120;
typedef long long ll;
struct matrix{
    int n , m;
    int arr[MAXN][MAXN];
    matrix(int x , int y , int V=0){
        n = x; m = y;
        for(int j=0;j<n;j++) for(int i=0;i<m;i++) arr[j][i] = V;
    }
    matrix(int x , int y , int A[MAXN][MAXN]){
        n = x; m = y;
        for(int j=0;j<n;j++) for(int i=0;i<m;i++) arr[j][i] = A[j][i];
    }
    matrix operator * (matrix &mat){
        matrix res(n , mat.m , 0);
        long long theta;
        for(int j=0;j<n;j++){
            for(int i=0;i<mat.m;i++){
                theta = 0;
                for(int k=0;k<m;k++){
                    theta += 1ll * arr[j][k] * mat.arr[k][i];
                    theta%=MOD;
                }
                res.arr[j][i] = theta;
            }
        }
        return res;
    }
    matrix power(long long K){
        matrix res(n , m , 0) , b(n , m , 0);
        for(int j=0;j<n;j++) res.arr[j][j] = 1;
        b = (*this);
        while(K>0){
            if( (K&1) )
                res = res * b;
            K/=2;
            b = b * b;
        }
        return res;
    }
};

//const int MOD=1e9+7;
long long fact[1<<20];
long long POW(long long x , long long y){
    if(y==0) return 1;
    long long ret=POW(x , y/2); ret*=ret; ret%=MOD;
    if(y%2) ret*=x;
    return ret%MOD;
}
long long inv(long long x){
    return POW(x , MOD-2);
}
long long arr[1<<20];
int main(){
    matrix ans = matrix(2 , 2 , 0) , M = matrix(2 , 2 , 0);
    ans.arr[0][1] = 1;

    M.arr[1][0] = 1;
    M.arr[0][1] = 2;
    M.arr[1][1] = 1;
    int n;
    scanf("%d",&n);
    long long K;
    for(int j=1;j<=n;j++){
        scanf("%lld",&K);
        arr[j] = K;
    }
    if(count(arr , arr+1+n , 1) == n){
        cout<<"0/1"<<endl;
        return 0;
    }
    long long bakr=1 , qqq=1;
    for(int j=1;j<=n;j++){
        ll theta = arr[j];
        theta %=(MOD-1);
        bakr *= theta;
        bakr %=(1ll * (MOD-1));
    }
    ll oo = POW(2 , bakr);
    oo *= inv(2);
    oo%=MOD;
    //M = Matrix_Exponentiation(M , bakr);
    //cout<<bakr<<endl;
    M = M.power(bakr);
    ans = ans * M;
    /*for(int j=0;j<ans.n;j++){
        for(int i=0;i<ans.m;i++)
            cout<<ans.arr[j][i]<<' ';
        cout<<endl;
    }*/
    ll jd = -ans.arr[0][0]+ans.arr[0][1];
    //cout<<jd<<endl;
    jd += MOD;
    jd%=MOD;
    jd *= inv(2);
    jd %=MOD;;
    bakr *= inv(2);
    bakr%=MOD;
    cout<<jd<<"/"<<oo<<endl;
}
