#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <cmath>
#include <algorithm>

using namespace std;

int n, k;
int p[1234567];
int c[1234567];

struct Knight
{
    int p, c, ind;
    Knight(int _p, int _c, int i) : p(_p), c(_c), ind(i)
    {
    }

    bool operator < (Knight const & k)
    {
        return p < k.p;
    }
};

vector<Knight> v;
long long res[1234567];


int main()
{
    cin >> n >> k;
    for (int i = 0; i < n; ++i)
        cin >> p[i];
    for (int i = 0; i < n; ++i)
        cin >> c[i];

    for (int i = 0; i < n; ++i)
        v.push_back(Knight(p[i], c[i], i));

    sort(v.begin(), v.end());
    multiset<int> st;
    long long curans = 0;
    for (int i = 0; i < n; ++i)
    {
        if (k > 0)
        {
            if (st.size() < k && i > 0)
            {
                st.insert(v[i-1].c);
                curans += v[i-1].c;
            }
            else if (st.size() == k)
            {
                if ((*(st.begin())) < v[i-1].c)
                {
                    curans += v[i-1].c - (*(st.begin()));
                    st.erase(st.begin());
                    st.insert(v[i-1].c);
                }
            }
        }
        res[v[i].ind] = v[i].c + curans;
    }
    for (int i = 0; i < n; ++i)
        cout << res[i] << " ";

}
