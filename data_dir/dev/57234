#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

typedef long long ll;
using namespace std;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000002;
const ll INFLL = 100000000000000000ll;
const ll MOD = 1000000007;

// ----------------------------------------------------------------------------------------------------------

int N;
int Best[45];
ll R[45];
string S;

int main()
{
    cin >> N;
    cin >> S;
    f(i,0,20) R[i] = -1;
    f(m,0,(1<<N)-1)
    {
        ll n1 = 0, n2 = 0;
        f(i,0,N-1)
        {
            if(m&(1<<i)) n1 = n1*10 + S[i+N] - '0';
            else n2 = n2*10 + S[i+N] - '0';
        }

        ll val = n1+n2;
        if(val > R[__builtin_popcount(m)])
        {
            R[__builtin_popcount(m)] = val;
            Best[__builtin_popcount(m)] = m;
        }
    }

    ll ans = -1;
    string s;

    f(m,0,(1<<N)-1)
    {
        int b1 = 0, b2 = 0;
        ll n1 = 0, n2 = 0;
        f(i,0,N-1)
        {
            if(m&(1<<i)) n1 = n1*10 + S[i] - '0', b1++;
            else n2 = n2*10 + S[i] - '0', b2++;
        }

        f(x,b1+1,N) n1 *= 10;
        f(x,b2+1,N) n2 *= 10;
        ll val = n1 + n2 + R[N-b1];
        if(val > ans)
        {
            ans = val;
            s = "";
            f(i,0,N-1)
            {
                if(m&(1<<i)) s += 'H';
                else s += 'M';
            }
            f(i,0,N-1)
            {
                if(Best[N-b1]&(1<<i)) s += 'H';
                else s += 'M';
            }
        }

    }

    cout << s;
}
