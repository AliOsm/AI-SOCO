#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <iostream>
#include <functional>
using namespace std;
 
int n, p, eff[200010];
 
vector<int> g[200010];
__int64 d[200010][2];
 
void dfs(int v) {
    if (g[v].empty()) {
        d[v][1] = eff[v];
        d[v][0] = 0;
        return;
    }
    for (int i = 0; i < g[v].size(); i++)
        dfs(g[v][i]);
 
 
    //не сохраняем предка
    __int64 maxSum = 0;
    int maxSumParity = 0;
    vector<int> parityInMaxSum;
    for (int i = 0; i < g[v].size(); i++) {
        int to = g[v][i];
        if (d[to][0] > d[to][1]) {
            parityInMaxSum.push_back(0);
            maxSum += d[to][0];
        } else {
            parityInMaxSum.push_back(1);
            maxSum += d[to][1];
            maxSumParity ^= 1;
        }
    }
    d[v][maxSumParity] = maxSum;
 
    __int64 secondMaxSum = 0;
    for (int i = 0; i < g[v].size(); i++) {
        int to = g[v][i];
        if (parityInMaxSum[i] == 0)
            secondMaxSum = max(secondMaxSum, maxSum - d[to][0] + d[to][1]);
        else
            secondMaxSum = max(secondMaxSum, maxSum - d[to][1] + d[to][0]);
    }
    d[v][maxSumParity ^ 1] = secondMaxSum;
 
    //сохраняем предка
    d[v][1] = max(d[v][1], eff[v] + d[v][0]);
}
 
int main() {
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        scanf("%d%d", &p, &eff[i]);
        if (i)
            g[p - 1].push_back(i);
    }
    dfs(0);
    __int64 ans = 0;
    for (int i = 0; i < n; i++) {
        ans = max(ans, d[i][0]);
        ans = max(ans, d[i][1]);
    }
    printf("%I64d", ans);
}