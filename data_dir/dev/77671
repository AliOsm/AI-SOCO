//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef cc_hash_table<int,int,hash<int>> ht;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e3 + 5;
const double eps = 1e-9;
char tmp[MAXN];
int a[MAXN][MAXN], dp[MAXN][MAXN];
int dx[4] = {1, 0, 0, -1};
int dy[4] = {0, -1, 1, 0};
char c[4] = {'D', 'L', 'R', 'U'};
char ans[MAXN * MAXN];

int main()
{
    int n, m, k;
    ni(n), ni(m), ni(k);
    if (k & 1)
        return !printf("IMPOSSIBLE\n");
    pii st;
    for (int i = 0; i < n; i++) {
        scanf("%s", tmp);
        for (int j = 0; j < m; j++) {
            if (tmp[j] == 'X')
                st = {i, j}, dp[i][j] = 0;
            else
                dp[i][j] = INF;
            if (tmp[j] == '*')
                a[i][j] = 0;
            else
                a[i][j] = 1;
        }
    }
    bool fl = 0;
    for (int i = 0; i < 4; i++) {
        int nx = st.fi + dx[i], ny = st.se + dy[i];
        if (n > nx && nx >= 0 && m > ny && ny >= 0 && a[nx][ny] != 0)
            fl = 1;
    }
    if (!fl)
        return !printf("IMPOSSIBLE\n");
    list<pii> pq;
    pq.pb(st);
    while (!pq.empty()) {
        pii cur = pq.front(); pq.pop_front();
        for (int i = 0; i < 4; i++) {
            int nx = cur.fi + dx[i], ny = cur.se + dy[i];
            if (nx < 0 || ny < 0 || nx >= n || ny >= m)
                continue;
            if (dp[nx][ny] != INF)
                continue;
            if (a[nx][ny] == 0)
                continue;
            dp[nx][ny] = dp[cur.fi][cur.se] + 1;
            pq.pb({nx, ny});
        }
    }
    pii cur = {st.fi, st.se};
    for (int i = k - 1; i >= 0; i--) {
        int nj = -1;
        for (int j = 0; j < 4; j++) {
            int nx = cur.fi + dx[j], ny = cur.se + dy[j];
            if (nx < 0 || ny < 0 || nx >= n || ny >= m)
                continue;
            if (a[nx][ny] == 0)
                continue;
            if (dp[nx][ny] > i)
                continue;
            nj = j;
            break;
        }
        if (nj == -1)
            continue;
        int nx = cur.fi + dx[nj], ny = cur.se + dy[nj];
        ans[k - 1 - i] = c[nj];
        cur = {nx, ny};
    }
    printf("%s\n", ans);
    return 0;
}
