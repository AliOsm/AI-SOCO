#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <bitset>

#pragma comment(linker, "/STACK:64000000")

using namespace std;

#define pb emplace_back
#define mp make_pair
#define f first
#define s second
#define all(a) (a).first(), (a).second()
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const int infi = 1e9 + 7;
const ll infl = 1e18 + 7;

int ar[101];
bitset<101> dp0[10500];
bitset<101> dp[10500];
bitset<101> ndp[10500];

int main() {
    cin.sync_with_stdio(false);
    cin.tie(0);
    //   freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    //freopen("customs.in", "r", stdin); freopen("customs.out", "w", stdout);
    int n;
    cin >> n;
    forn(i, n)
        cin >> ar[i];
    vector<pii> tmp;
    sort(ar, ar + n);
    int lst = ar[0];
    int sum = ar[0];
    int cnt = 1;
    for (int i = 1; i < n; ++i) {
        sum += ar[i];
        if (lst == ar[i])
            ++cnt;
        else {
            tmp.pb(lst, cnt);
            lst = ar[i];
            cnt = 1;
        }
    }
    tmp.pb(lst, cnt);
    if (tmp.size() <= 2) {
        cout << n;
        return 0;
    }
    for (auto cur : tmp) {

        for (int cnt = 1; cnt <= cur.second; ++cnt) {
            int s = cnt * cur.first;
            forn(w, 10500) {
                ndp[w + s] |= dp0[w] << cnt;
                ndp[w + s] |= dp[w] << cnt;
            }
        }
        for (int cnt = 1; cnt <= cur.second; ++cnt) {
            dp0[cnt * cur.first][cnt] = 1;
        }
        forn(i, 10500)
            dp[i] |= ndp[i];
    }
    int ans = 0;
    for (auto cur : tmp) {
        for (int cnt = 1; cnt <= cur.second; ++cnt) {
            int s = cnt * cur.first;
            if (dp[s][cnt])
                continue;
            ans = max(ans, cnt);
            if (tmp.size() == 2 && cnt == cur.second)
                ans = n;
        }

    }
    cout << ans;

    return 0;
}