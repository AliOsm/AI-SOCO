#include <bits/stdc++.h>
 
using namespace std;
 
#define SPEED ios::sync_with_stdio(false); cin.tie(0); cout.tie(0)
#define fileio freopen("in.in", "r", stdin),freopen("out.out", "w", stdout);
#define ll long long int
#define FF first
#define SS second
#define mp make_pair
#define pb push_back
#define pii pair<int,int>
#define pll pair<long long int,long long int>
#define sd(x) scanf("%d",&x)
#define slld(x) scanf("%lld",&x)
#define pd(x) printf("%d\n",x)
#define plld(x) printf("%lld\n",x)
#define pss printf
#define MOD 1000000007
#define INF 1e18
#define eps 0.00001
#define endl '\n'
#define debug(n1) cout<<n1<<endl
ll n,k;
ll a[2];
ll node[2][55][55];
ll cur=1;
ll dist[10000];
ll ways[10000];
vector<pll>adj[10000],adj2[10000];
queue<ll>q;
vector<ll>atd[10000];
ll f[55],fi[55];
ll powmod(ll a,ll b)
{
	ll an=1;
	while(b)
	{
		if(b&1)
		{
			an=(an*a)%MOD;
		}
		a=(a*a)%MOD;
		b>>=1;
	}
	return an;
}
ll nck(ll n,ll k)
{
	ll an=(f[n]*fi[k])%MOD;
	an=(an*fi[n-k])%MOD;
	return an;
}
void dij()
{
	for(int i=1;i<=cur;i++)
		dist[i]=INF;
	ll src=node[0][a[0]][a[1]];
	ll dst=node[1][0][0];
	q.push(src);
	dist[src]=0;
	while(!q.empty())
	{
		ll i=q.front();
		q.pop();
		for(auto j:adj[i])
		{
			if(dist[j.FF]==INF)
			{
				dist[j.FF]=dist[i]+1;
				q.push(j.FF);
			}
		}
	}
	for(int i=1;i<=cur;i++)
	{
		for(auto j:adj[i])
		{
			if(dist[j.FF]==dist[i]+1)
				adj2[i].pb(j);
		}
	}
}	
int main() {
f[0]=1;
for(ll i=1;i<=54;i++)
f[i]=(f[i-1]*i)%MOD;
for(ll i=0;i<=54;i++)
fi[i]=powmod(f[i],MOD-2);

slld(n);slld(k);
for(int i=1;i<=n;i++)
{
	ll x;
	slld(x);
	if(x==50)x=0;
	else x=1;
	a[x]++;
}
for(int i=0;i<=n;i++)
{
	for(int j=0;j<=n;j++)
	{
		node[0][i][j]=cur++;
		node[1][i][j]=cur++;
	}
}
cur--;
for(int i=0;i<=n;i++)
{
	for(int j=0;j<=n;j++)
	{
		ll x=node[0][i][j];
		for(int i1=0;i1<=i;i1++)
		{
			for(int j1=0;j1<=j;j1++)
			{
				if(i1+j1==0)continue;
				ll y=node[1][i-i1][j-j1];
				if(i1*50+j1*100<=k)
					adj[x].pb(mp(y,(nck(i,i1)*nck(j,j1))%MOD));
			}
		}
		x=node[1][i][j];
		for(int i1=0;i1<=a[0]-i;i1++)
		{
			for(int j1=0;j1<=a[1]-j;j1++)
			{
				if(i1+j1==0)continue;
				ll y=node[0][i+i1][j+j1];
				if(i1*50+j1*100<=k)
					adj[x].pb(mp(y,(nck(a[0]-i,i1)*nck(a[1]-j,j1))%MOD));
			}
		}
	}
}
dij();
if(dist[node[1][0][0]]==INF)
{
	plld(-1ll);
	plld(0ll);
	return 0;
}
for(int i=1;i<=cur;i++)
	if(dist[i]!=INF)
		atd[dist[i]].pb(i);
ways[node[1][0][0]]=1;
for(int i=dist[node[1][0][0]]-1;i>=0;i--)
{
	for(auto h:atd[i])
	{
		for(auto j:adj2[h])
		{
			ways[h]=(ways[j.FF]*j.SS+ways[h])%MOD;
		}
	}
}
plld(dist[node[1][0][0]]);
plld(ways[node[0][a[0]][a[1]]]);
	return 0;
           }
