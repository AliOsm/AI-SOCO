#include "bits/stdc++.h"
using namespace std;

#define FOR(i,a,b) for(int i = a; i < b; i++)
#define pb push_back

typedef pair<int, int> ii;
typedef long long ll;

const int N = 1e5+5;

struct node{
  int u, v, w, i, lvl;
  bool operator < (const node & o) const {
    if(w != o.w)return w < o.w;
    return lvl > o.lvl;
  }

}edge[N];

vector<int>adj[N];
int n, p[N], lvl[N], r[N];
ll tmp[N];
int get(int u){
  return u == p[u] ? u : p[u]=get(p[u]);
}
void mrg(int u, int v){
  u=get(u); v=get(v);
  if(u==v)return;
  p[u] = v;
  r[v] += r[u];
}
void dfs(int u, int p){

  for(auto v : adj[u])if(v != p){
    lvl[v] = lvl[u] + 1;
    dfs(v,u);
  }

}
ll ans[N];
int main(){

  scanf("%d", &n);

  FOR(i,1,n+1)p[i]=i,r[i]=1;

  FOR(i,1,n){
    scanf("%d%d%d", &edge[i].u, &edge[i].v, &edge[i].w);
    adj[edge[i].u].pb(edge[i].v);
    adj[edge[i].v].pb(edge[i].u);
    edge[i].i = i;
  }

  dfs(1,1);

  FOR(i,1,n){
    if(lvl[edge[i].u] < lvl[edge[i].v])swap(edge[i].u,edge[i].v);
    edge[i].lvl = lvl[edge[i].u];
  }

  sort(edge+1,edge+n);

  for(int i = 1; i < n; ){

    int j = i;

    while(j < n && edge[i].w == edge[j].w){
      tmp[j] = r[get(edge[j].u)];
      mrg(edge[j].u,edge[j].v);
      j++;
    }

    while(i < j){
      ans[edge[i].i] = 2ll * tmp[i] * (r[get(edge[i].u)] - tmp[i]);
      i++;
    }

  }

  ll res = 0;
  vector<int>out;

  FOR(i,1,n){
    if(ans[i] > res)res = ans[i], out.clear();
    if(ans[i] == res)
      out.pb(i);
  }

  cout << res << ' ' << out.size() << '\n';

  for(auto v : out)printf("%d ", v);

  return 0;
}
