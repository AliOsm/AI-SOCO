#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;*/
#define itn int
#define all(c) c.begin(),c.end()
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define ll long long
#define pll pair<ll, ll>
#define mp(x, y) make_pair(x, y)
using namespace std;

const ll N = 3e5 + 5, inf = 1e18, mod = 998244353 ;
const double PI = 3.1415926536;
int days[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

ll fact(ll n) {
    n = abs(n);
    ll t = 0;
    for (ll i = 1; i * i <= n; i++) {
        if (n % i == 0) {
            t++;
            if (n / (n / i) != n / i) t++;
        }
    }
    return t;
}

inline ll getPow(ll a,ll b) {
    ll res = 1ll, tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
       }
       tp *= tp;
       tp %= mod; res %= mod;
       b >>= 1ll;
    }
    return res;
}

ll vec_mult(const pll & t1, const pll & t2, const pll & t3) {
   const ll & x1 = t1.first, y1 = t1.second;
   const ll & x2 = t2.first, y2 = t2.second;
   const ll & x3 = t3.first, y3 = t3.second;
   return abs((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}

void ok() {
   cout << "YES" << endl;
   exit(0);
}

void no() {
   cout << "NO" << endl;
   exit(0);
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

struct Matrix{
    vector<vector<ll>> matr;
    Matrix() {
        for (int i = 0; i < 4; i++) {
            matr.push_back(vector<ll>(4));
        }
    }
};
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    ll n = nxt();
    ll matr[n][n];
    set<ll> mas;
    for (int i = 0; i < n * n; i++) {
        mas.insert(i);
    }
    vector<Matrix> ans;
    for (int i = 0; i < n * n; i += 16) {
        Matrix cur;
        for (int j = 0; j < 4; j++) {
            for (int e = 0; e < 4; e++) {
                cur.matr[j][e] = *mas.begin();
                mas.erase(mas.begin());
            }
        }
        ans.push_back(cur);
    }
    vector<vector<ll>> te;
    for (int i = 0; i < ans.size(); i += n / 4) {
        vector<vector<ll>> t(4);
        for (int j = i; j < i + n / 4; j++) {
            for (int ia = 0; ia < 4; ia++) {
                for (int ja = 0; ja < 4; ja++) {
                    t[ia].push_back(ans[j].matr[ia][ja]);
                }
            }
        }
        for (auto x : t) {
            te.push_back(x);
        }
    } 
    for (int i = 0; i < n; i++) {
        ll cur = 0;
        for (int j = 0; j < n; j++) {
            cout << te[i][j] << ' ';
        }
        cout << endl;
    }
}
