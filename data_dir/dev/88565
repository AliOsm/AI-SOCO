#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

#define f first
#define s second

#define pb push_back
#define pp pop_back
#define mp make_pair

#define sz(x) (int)x.size()
#define sqr(x) ((x) * 1ll * (x))
#define all(x) x.begin(), x.end()

#define rep(i, l, r) for (int i = l; i <= r; i++)
#define per(i, l, r) for (int i = l; i >= r; i--)

#define dbg(x) cerr << (#x) << " --> " << (x) << nl;
#define Kazakhstan ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);

#define nl '\n'
#define ioi exit(0);

#define Toktama ""

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef tree < pair <int, int>, null_type, less < pair <int, int> >, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int N = 1e5 + 7, inf = 1e9 + 7, mod = 1e9 + 7;
const ll linf = (ll)1e18 + 7;
const int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1}, dy[] = {0, 1, 0, -1, 1, -1, 1, -1};
const int block = 500;

void add(int &x, int y) {
  x += y;
  if (x >= mod) x -= mod;
  if (x < 0) x += mod;
}
int mult(int x, int y) {
  return x * 1ll * y % mod;
}
int sum(int x, int y) {
  add(x, y);
  return x;
}

int n;
int a[N], b[N], ans[N], ok[N], pref[N], suff[N];
int main() {
  #ifndef Toktama
    freopen (Toktama".in", "r", stdin);
    freopen (Toktama".out", "w", stdout);
  #endif
  Kazakhstan
  cin >> n;
  rep(i, 1, n)
    cin >> a[i], ans[i] = a[i], ok[a[i]]++;
  rep(i, 1, n)
    cin >> b[i];
  rep(i, 1, n)
    pref[i] = pref[i - 1] + (a[i] != b[i]);
  per(i, n, 1)
    suff[i] = suff[i + 1] + (a[i] != b[i]);
  rep(i, 1, n) {
    if (ok[ans[i]] == 1) continue;
    rep(j, 1, n)
      if (!ok[j] && pref[i - 1] + suff[i + 1] + (j != b[i]) == 1) {
        ans[i] = j;
        rep(k, 1, n)
          cout << ans[k] << ' ';
        ioi
      }
  }
  ioi
}
