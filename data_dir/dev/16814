#include <bits/stdc++.h>
using namespace std;

using ll = long long;
const int N = 1010;
const int M = 11;
const int MOD = 1e9+7;

int n, m;
ll dp1[N][M], dp2[N][M];

ll DP1(int val, int pos) {
	if(pos <= 1) return 1;
	if(val < 1) return 0;
	if(dp1[val][pos] != -1) return dp1[val][pos];
	
	dp1[val][pos] = 0;
	for(int i = 1; i <= val; i++) {
		dp1[val][pos] += DP1(i, pos - 1);
		if(dp1[val][pos] >= MOD) dp1[val][pos] -= MOD;
	} return dp1[val][pos];
}

ll DP2(int val, int pos) {
	if(pos <= 1) return 1;
	if(val > n) return 0;
	if(dp2[val][pos] != -1) return dp2[val][pos];
	
	dp2[val][pos] = 0;
	for(int i = val; i <= n; i++) {
		dp2[val][pos] += DP2(i, pos - 1);
		if(dp2[val][pos] >= MOD) dp2[val][pos] -= MOD;
	} return dp2[val][pos];
}

int main() {
	scanf("%d %d", &n, &m);
	memset(dp1, -1, sizeof dp1);
	memset(dp2, -1, sizeof dp2);
	ll ans = 0;
	for(int amax = 1; amax <= n; amax++) {
		for(int bmin = amax; bmin <= n; bmin++) {
			ans += DP1(amax, m) * DP2(bmin, m) % MOD;
			if(ans >= MOD) ans -= MOD;
		}
	}
	printf("%I64d", ans);
	return 0;
}