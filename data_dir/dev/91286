#include <bits/stdc++.h>
#include <time.h>
using namespace std;

#define space " "
#define enter endl
#define fi first
#define se second
#define mp make_pair
#define input(s)\
    freopen(s,"r",stdin)
#define output(s)\
    freopen(s,"w",stdout)
#define INF 2000000007
#define LINF 40000000000000000007
#define PI 3.14159265359

typedef long long ll;
typedef unsigned long long ull;
typedef pair <ll, ll> pll;
typedef long double ld;
typedef pair <int, int> pii;
typedef vector <int> vi;
typedef vector <pii> vii;
typedef set <int> si;
typedef set <pii> sii;
typedef map <int, int> mii;

const int MAXN = 1e5 + 10;

int n, m, k;
int a[MAXN][6];
int ans = 0;
int ma[MAXN * 4][6];
int res[6], resM[6];

void build (int x, int l, int r)
{
    if (l == r)
    {
        for (int i = 1; i <= m; i++)
            ma[x][i] = a[l][i];
        return;
    }
    int md = (l + r) >> 1;
    build(x + x, l, md);
    build(x + x + 1, md + 1, r);
    for (int i = 1; i <= m; i++)
        ma[x][i] = max(ma[x + x][i], ma[x + x + 1][i]);
    return;
}

void getMax (int x, int l, int r, int tl, int tr)
{
    if (l >= tl && r <= tr)
    {
        for (int i = 1; i <= m; i++)
            res[i] = max(res[i], ma[x][i]);
        return;
    }
    int md = (l + r) >> 1;
    if (tl <= md)
        getMax(x + x, l, md, tl, tr);
    if (tr > md)
        getMax(x + x + 1, md + 1, r, tl, tr);
}

inline int getSum ()
{
    int sum = 0;
    for (int i = 1; i <= m; i++)
        sum += res[i];
    return sum;
}

int main()
{
    //input("input.txt"); output("output.txt");
    ios_base :: sync_with_stdio(false);
    cin >> n >> m >> k;
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= m; j++)
            cin >> a[i][j];
    build(1, 1, n);
    int j = 1;
    for (int i = 1; i <= n; i++)
    {
        int sum;
        memset(res, false, sizeof(res));
        j = max(j, i);
        getMax(1, 1, n, i, j);
        sum = getSum();
        while (j < n && sum <= k)
        {
            j++;
            for (int l = 1; l <= m; l++)
                res[l] = max(res[l], a[j][l]);
            sum = getSum();
            if (sum > k)
                j--;
            memset(res, false, sizeof(res));
            getMax(1, 1, n, i, j);
        }
        if (j - i + 1 > ans && getSum() <= k)
        {
            ans = j - i + 1;
            for (int l = 1; l <= m; l++)
                resM[l] = res[l];
        }
    }
    for (int i = 1; i <= m; i++)
        cout << resM[i] << space;
}
