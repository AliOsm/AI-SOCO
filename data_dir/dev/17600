//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 9;
const double eps = 1e-12;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

ll n, m;

ll res[200005], sz;
map<ll, vector<ll> > divs;
vector<ll> now;

void rec(ll n, ll m){
  if(sz >= 100000) return;
  if(!m){
    res[sz++] = n;
    return;
  }
  if(!divs.count(n)){
    now.clear();
    for(ll i = 1; i * i <= n; ++i){
      if(n % i == 0){
        now.pb(i);
        if(i * i != n) now.pb(n / i);
      }
    }
    sort(all(now));
    divs[n] = now;
  }
  if(divs[n].size() == 1){
    res[sz++] = n;
    return;
  }
  if(divs[n].size() == 2){
    for(int i = 0; i < m && sz < 100000; ++i){
      res[sz++] = 1;
    }
    res[sz++] = n;
    return;
  }
  forn(i, divs[n].size()){
    rec(divs[n][i], m - 1);
  }
}

int main(void){
  #ifdef nobik
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
  #endif
  cin >> n >> m;
  rec(n, m);
  sz = min(sz, 100000LL);
  forn(i, sz){
    printf("%I64d ", res[i]);
  }
  printf("\n");
  return 0;
}
