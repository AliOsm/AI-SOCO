#include <bits/stdc++.h>

#define ff first
#define ss second
#define pb push_back
#define mp make_pair
using namespace std;

const int N = 505;
using ll = long long;
using ii = pair<int, int>;

int d[N][N];
int mat[N][N];
int n, m;

void bfs(int st){
    int u;

    queue<int> q;
    q.push(st);
    d[st][st] = 0;

    while(!q.empty()){
        u = q.front(); q.pop();
        for(int i = 1; i <= n; i++) if(mat[u][i]){
            if(d[st][i] == -1){
                d[st][i] = d[st][u] + 1;
                q.push(i);
            }
        }
    }
}

int ask(int w){
    printf("%d\n", w);
    fflush(stdout);
    static char s[10];
    scanf(" %s", s);
    if(s[0] == 'F') return -1;
    int x;
    scanf("%d", &x);
    return x;
}

void solve(){

    vector<int> cand, t;

    for(int i = 1; i <= n; i++) cand.push_back(i);

    while(1){
        int mn = 1e9, u = -1;
        for(int a : cand){
            int tmp = 0;
            for(int b : cand){
                tmp += d[a][b];
            }
            if(tmp < mn) mn = tmp, u = a;
        }
        int w = ask(u);
        if(w == -1) return;
        t.clear();
        for(int a : cand) if(d[a][w] < d[a][u])
            t.push_back(a);
        swap(cand, t);
    }

}

int main(){

    int k, a, b;

    scanf("%d %d", &n, &m);

    while(m--){
        scanf("%d", &k);
        a = -1;
        while(k--){
            scanf("%d", &b);
            if(a != -1) mat[a][b] = mat[b][a] = 1;
            a = b;
        }
    }
    
    memset(d, -1, sizeof d);
    for(int i = 1; i <= n; i++) bfs(i);

    for(int i = 0; i < n; i++)
        solve();

    return 0;
}
