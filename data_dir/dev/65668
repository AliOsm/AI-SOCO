#include <iostream>
#include <algorithm>

using namespace std;

const int limit=1000000;

int identifier[limit];

int computeidentifier(int u)
{
  int &idu=identifier[u];
  if (idu==0) return u;
  idu=computeidentifier(idu);
  return idu;
}

struct edge {
  int u,v,c;
  edge() {}
  edge(int u,int v,int c):u(u),v(v),c(c) {}
};

bool operator<(edge e1,edge e2)
{
  return e1.c<e2.c;
}

int n,m;
edge ve[limit];
int useless[limit];
int sol;

int main()
{
  ios::sync_with_stdio(false);
  cin>>n>>m;
  for (int i=0;i<m;i++)
    cin>>ve[i].u>>ve[i].v>>ve[i].c;
  sort(ve,ve+m);
  for (int i=0;i<m;i++) {
    if (i==0 or ve[i].c!=ve[i-1].c) {
      for (int j=i;j<m and ve[j].c==ve[i].c;j++) {
	edge &e=ve[j];
	int u=e.u;
	int v=e.v;
	int idu=computeidentifier(u);
	int idv=computeidentifier(v);
	if (idu==idv) useless[j]=1;
      }
      for (int j=i;j<m and ve[j].c==ve[i].c;j++) {
	edge &e=ve[j];
	int u=e.u;
	int v=e.v;
	int idu=computeidentifier(u);
	int idv=computeidentifier(v);
	if (idu!=idv) identifier[idu]=idv;
	else sol+=not useless[j];
      }
    }
  }
  cout<<sol<<endl;
}
