#include <bits/stdc++.h>
#define endl '\n'

//#pragma GCC optimize ("O3")
//#pragma GCC target ("sse4")

using namespace std;
template<class T, class T2> inline int chkmax(T &x, const T2 &y) { return x < y ? x = y, 1 : 0; }
template<class T, class T2> inline int chkmin(T &x, const T2 &y) { return x > y ? x = y, 1 : 0; }
const int MAXN = (1 << 21);
const int inf = (1 << 30);

int len[MAXN], link[MAXN], psz = MAXN, last;
map<char, int> to[MAXN];

void init()
{
	for(int i = 0; i < psz; i++)
		len[i] = link[i] = 0, to[i].clear();
	psz = 1;
	last = 0;
}

void add_letter(char c)
{
	int p = last, q, cl;
	if(to[p].count(c))
	{
		q = to[p][c];
		if(len[q] == len[p] + 1)
		{
			last = q;
			return;
		}

		cl = psz++;
		len[cl] = len[p] + 1;
		to[cl] = to[q];
		link[cl] = link[q];
		link[q] = last = cl;

		for(; to[p][c] == q; p = link[p])
			to[p][c] = cl;

		return;
	}

	last = psz++;
	len[last] = len[p] + 1;

	for(; to[p][c] == 0; p = link[p])
		to[p][c] = last;

	if(to[p][c] == last)
	{
		link[last] = 0;
		return;
	}

	q = to[p][c];
	if(len[q] == len[p] + 1)
	{
		link[last] = q;
		return;
	}

	cl = psz++;
	len[cl] = len[p] + 1;
	to[cl] = to[q];
	link[cl] = link[q];
	link[q] = link[last] = cl;

	for(; to[p][c] == q; p = link[p])
		to[p][c] = cl;
}

string s;
int q, SZ2;
int Ql[MAXN], Qr[MAXN];
string Qs[MAXN];

void read()
{
	cin >> s;
	cin >> q;
	for(int i = 0; i < q; i++)
	{
		cin >> Ql[i] >> Qr[i] >> Qs[i];
		Ql[i]--;
		Qr[i]--;
	}
}

vector<int> adj[MAXN];
int st[MAXN], en[MAXN], dfs_time, SZ;

void pre_dfs(int u)
{
	st[u] = ++dfs_time;
	for(int v: adj[u])
		pre_dfs(v);
	en[u] = dfs_time;
}

vector<int> lis[MAXN];

struct node
{
	int sum;
	node *l, *r;
	node() { l = r = nullptr; sum = 0; }
};

using pnode = node*;

pnode t[MAXN];

/*
vector<int> tr[MAXN << 2];

void init(int l, int r, int idx)
{
	for(int i = l; i <= r; i++)
		for(auto it: lis[i])
			tr[idx].push_back(it);
	sort(tr[idx].begin(), tr[idx].end());

	if(l == r)
		return;

	int mid = (l + r) >> 1;
	init(l, mid, 2 * idx + 1);
	init(mid + 1, r, 2 * idx + 2);
}

int before(int ql, int qr, int x, int l, int r, int idx)
{
	if(ql > qr || ql > r || l > qr)
		return -inf;

	if(ql <= l && r <= qr)
	{
		int i = upper_bound(tr[idx].begin(), tr[idx].end(), x) - tr[idx].begin() - 1;
		if(i == -1) return -inf;
		return tr[idx][i];
	}

	int mid = (l + r) >> 1;
	return max(before(ql, qr, x, l, mid, 2 * idx + 1), before(ql, qr, x, mid + 1, r, 2 * idx + 2));
}
*/

pnode merge(pnode l, pnode r)
{
	pnode ret = new node();
	ret->sum = l->sum + r->sum;
	ret->l = l;
	ret->r = r;
	return ret;
}

pnode init(int l, int r)
{
	if(l == r)
		return new node();

	int mid = (l + r) >> 1;
	return merge(init(l, mid), init(mid + 1, r));
}

pnode add(pnode t, int l, int r, int v)
{
	if(r < v || v < l)
		return t;

	if(l == r)
	{
		pnode nw = new node();
		nw->sum = t->sum + 1;
		return nw;
	}

	int mid = (l + r) >> 1;
	return merge(add(t->l, l, mid, v), add(t->r, mid + 1, r, v));
}

int before(pnode Lp, pnode Rp, int v, int l, int r)
{
	if(Rp->sum - Lp->sum <= 0)
		return -inf;

	if(v < l)
		return -inf;

	if(r > v)
	{
		int mid = (l + r) >> 1;
		int rt = before(Lp->r, Rp->r, v, mid + 1, r);
		if(rt != -inf)
			return rt;
		return before(Lp->l, Rp->l, v, l, mid); 
	}

	if(l == r)
		return l;

	int mid = (l + r) >> 1;
	int sum_r = Rp->r->sum - Lp->r->sum;
	
	if(sum_r > 0)
		return before(Lp->r, Rp->r, v, mid + 1, r);
	
	return before(Lp->l, Rp->l, v, l, mid);
}

bool exists(int l, int r, int nd, int L) { return before(t[st[nd] - 1], t[en[nd]], r, 0, SZ2) - L + 1 >= l; }

char En[MAXN];

void solve()
{	
	init();
	for(int i = 0; i < (int)s.size(); i++)
		add_letter(s[i]);

	for(int i = 0; i < q; i++)
	{
		last = 0;
		for(char c: Qs[i])
			add_letter(c);
	
		/*int en = last;
		for(char c = 'a'; c <= 'z'; c++)
		{
			last = en;
			add_letter(c);
		}*/
	}

	for(int i = 1; i < psz; i++)
		adj[link[i]].push_back(i);
	pre_dfs(0);
	SZ = dfs_time;

	last = 0;
	for(int i = 0; i < (int)s.size(); i++)
	{
		add_letter(s[i]);
		lis[st[last]].push_back(i);
	}

	SZ2 = s.size();
	t[0] = init(0, SZ2);
	pnode Lst = t[0];
	for(int i = 1; i <= SZ; i++)
	{
		for(auto ii: lis[i])
			Lst = add(Lst, 0, SZ2, ii);
		t[i] = Lst;
	}

	for(int i = 0; i < q; i++)
	{
		string ret;

		int u = 0;
		for(int p = 0; p < (int)Qs[i].size(); p++)
		{
			En[p] = -1;
			if(exists(Ql[i], Qr[i], u, p))
				for(auto ad: to[u])
					if(ad.first > Qs[i][p] && exists(Ql[i], Qr[i], ad.second, p + 1))
					{
						En[p] = ad.first;
						break;
					}

			u = to[u][Qs[i][p]];
		}

		En[Qs[i].size()] = -1;
		if(exists(Ql[i], Qr[i], u, Qs[i].size()))
			for(auto ad: to[u])
				if(exists(Ql[i], Qr[i], ad.second, Qs[i].size() + 1))
				{
					En[Qs[i].size()] = ad.first;
					break;
				}

		for(int p = (int)Qs[i].size(); p >= 0; p--)
			if(En[p] != -1)
			{
				for(int o = 0; o < p; o++)
					ret += Qs[i][o];
				ret += En[p];
				cout << ret << endl;
				break;
			}

		if(ret.empty())
			cout << -1 << endl;
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	read();
	solve();
	return 0;
}

