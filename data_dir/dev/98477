#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>*/
 
#define pb push_back
#define mp make_pair
#define sz(s) ((int)(s.size()))
#define all(s) s.begin(), s.end()
#define rep(i, a, n) for (int i = a; i <= n; ++i)
#define per(i, n, a) for (int i = n; i >= a; --i)
#define onlycin ios_base::sync_with_stdio(false); cin.tie(0) 
#define F first
#define S second
using namespace std;
// using namespace __gnu_pbds;
typedef long long ll;
typedef unsigned long long ull;
/*typedef tree<
pair < int, int >,
null_type,
less< pair < int, int > >,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;*/
// find_by_order() order_of_key()
const int MAXN = (int)5e5+228;
const char nxtl = '\n';
const int mod = (int)1e9+7;
const double eps = (double)1e-7;
template<typename T> inline bool updmin(T &a, const T &b) {return a > b ? a = b, 1 : 0;}
template<typename T> inline bool updmax(T &a, const T &b) {return a < b ? a = b, 1 : 0;}

int n, m, u[MAXN], h, been[MAXN], timer;
vector < int > g[MAXN], gr[MAXN], ts;

void dfs(int v) {
	been[v] = timer;
	for(auto &to : g[v]) {
		if(been[to] != timer) dfs(to);
	}
	ts.pb(v);
}
int all[MAXN], comp[MAXN], sz;
void dfs2(int v) {
	been[v] = timer;
	comp[v] = sz;
	all[sz]++;
	for(auto &to : gr[v]) {
		if(been[to] != timer) dfs2(to);
	}
}
set < int > ng[MAXN];
int dp[MAXN];

int calc(int v) {
	if(~dp[v]) return dp[v];
	dp[v] = all[v];
	for(auto &to : ng[v]) {
		dp[v] += calc(to);
	}
	return dp[v];
}
bool take[MAXN];
void go(int v) {
	take[v] = 1;
	for(auto &to : ng[v]) go(to);
}
bool lst[MAXN];

int main() {
	#ifdef accepted
		freopen(".in", "r", stdin);
		freopen(".out", "w", stdout);
	#endif
	onlycin;
	cin >> n >> m >> h;
	rep(i, 1, n) cin >> u[i];
	rep(i, 1, m) {
		int x, y; cin >> x >> y;
		if((u[x] + 1) % h == u[y]) {
			g[x].pb(y);
			gr[y].pb(x);
		}
		if((u[y] + 1) % h == u[x]) {
			g[y].pb(x);
			gr[x].pb(y);
		}
	}
	timer = 1;
	rep(i, 1, n) if(been[i] != timer) dfs(i);
	reverse(all(ts));
	timer++;
	rep(i, 1, n) if(been[ts[i-1]] != timer) {
		sz++;
		dfs2(ts[i-1]);
	}
	rep(i, 1, n) {
		for(auto &to : g[i]) {
			if(comp[i] != comp[to]) {
			  ng[comp[i]].insert(comp[to]);
			  lst[comp[i]] = 1;
			}
		}
	}
	memset(dp, 255, sizeof dp);
	int mn = INT_MAX, id = 1;
	rep(i, 1, sz) {
		if(!lst[i] && updmin(mn, all[i])) id = i;
	}
	go(id);
	assert(mn < INT_MAX && mn > 0);
	cout << mn << nxtl;
	rep(i, 1, n) if(take[comp[i]]) cout << i << ' ';
	
	return 0;
}