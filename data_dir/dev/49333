#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

const int N = 2750132;
bool prime[N];
vector<int> pr;
int primeIndex[N];
int freq[N];
int mark[N];

void seive()
{
  memset(prime, 1, sizeof prime);
  memset(primeIndex, -1, sizeof primeIndex);
  int idx = 1;
  prime[0] = prime[1] = 0;
  for(int i = 2; i < N; i++)
  {
    if(prime[i])
    {
      pr.push_back(i);
      primeIndex[i] = idx++;
      for(ll j = (ll)i * i; j < N; j += i)
        prime[j] = 0;
    }
  }
}

int getLargestDivisor(int n)
{
  int ret = -1;
  for(int i = 2; i * i <= n; i++)
  {
    if(n % i == 0)
    {
      ret = max(ret, i);
      ret = max(ret, n / i);
    }
  }
  return ret;
}

int main()
{
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  seive();
  int n;
  cin >> n;
  vector<int> vec(2 * n);
  for(auto &x: vec)
    cin >> x;
  sort(vec.begin(), vec.end());
  vector<int> ans;
  for(int i = 2 * n - 1; i >= 0; i--)
  {
    int cur = vec[i];
    if(mark[cur])
    {
      mark[cur]--;
      continue;
    }
    if(prime[cur])
    {
      int idx = primeIndex[cur];
      ans.push_back(idx);
      mark[idx]++;
    }
    else
    {
      ans.push_back(cur);
      mark[getLargestDivisor(cur)]++;
    }
  }
  for(auto &x: ans)
    cout << x << ' ';
  return 0;
}
