#include <bits/stdc++.h>

using namespace std;


const int LIM = 31;

const int MAX_CNT = LIM * (int)(1e6 + 239);

namespace Trie {
	const int NONE = -1;

	int cnt[MAX_CNT];
	int go[MAX_CNT][2];
	int pnt = 0;

	inline int new_vertex() {
		cnt[pnt] = 0;
		go[pnt][0] = NONE;
		go[pnt][1] = NONE;
		pnt++;
		return pnt - 1;
	}

	inline void add(int x) {
		int cv = 0;
		cnt[cv]++;
		for (int i = LIM - 1; i >= 0; i--) {
			int bt = (x >> i) & 1;
			if (go[cv][bt] == NONE) {
				go[cv][bt] = new_vertex();
			}
			cv = go[cv][bt];
			cnt[cv]++;
		}
	}


	inline int go_down(int x, int k) {
		int ans = 0;
		int cv = 0;
		for (int i = LIM - 1; i >= 0; i--) {
			int bt = (x >> i) & 1;
			int kbt = (k >> i) & 1;
			if (kbt) {
				int need = kbt ^ bt;
				if (go[cv][!need] != NONE) ans += cnt[go[cv][!need]];
				if (go[cv][need] == NONE) go[cv][need] = new_vertex();
				cv = go[cv][need];
			} else {
				int need = kbt ^ bt;
				if (go[cv][need] == NONE) go[cv][need] = new_vertex();
				cv = go[cv][need];
			}
		}
		return ans;
	}

	inline void init() {
		new_vertex();
	}
}

typedef long long ll;
              
signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	#ifdef LOCAL
	assert(freopen("input.txt", "r", stdin));
	#endif

	Trie::init();
	int n, k;
	cin >> n >> k;
	vector<int> a(n);
	for (auto &t : a) {
		cin >> t;
	}
	ll ans = 0;
	int p = 0;
	Trie::add(p);
	for (int i = 0; i < n; i++) {
		p ^= a[i];
		int cur = Trie::go_down(p, k);
		ans += cur;
		Trie::add(p);
	}
	cout << (ll)n * (n + 1) / 2 - ans << endl;
}

