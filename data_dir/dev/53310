#pragma GCC optimize("Ofast,inline,unroll-loops,fast-math")
#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <vector>
#include <utility>
#include <functional>
#define N 500020
using namespace std;

int n, m;
vector<pair<int, int> > e[N];
long long f[2][N], g[N];
vector<long long> t;

void DFS(int x, int p)
{
    int i;

    f[0][x] = 0;
    for(i = 0; i < (signed)e[x].size(); i ++)
        if(e[x].at(i).first != p)
        {
            DFS(e[x].at(i).first, x);
            f[0][x] += max(f[0][e[x].at(i).first], f[1][e[x].at(i).first]);
        }

    t.clear();
    for(i = 0; i < (signed)e[x].size(); i ++)
        if(e[x].at(i).first != p)
            if(f[0][e[x].at(i).first] + e[x].at(i).second > max(f[0][e[x].at(i).first], f[1][e[x].at(i).first]))
                t.push_back(f[0][e[x].at(i).first] + e[x].at(i).second - max(f[0][e[x].at(i).first], f[1][e[x].at(i).first]));

    // printf("at vertex %d : %lld\n", x+1, f[0][x]);
    // for(long long xx:t)cout<<xx<<' ';cout<<endl;

    if((signed)t.size() <= m - 1)
        for(i = 0; i < (signed)t.size(); i ++)
            f[0][x] += t.at(i);
    else
    {
        nth_element(t.begin(), t.begin() + m - 1, t.end(), greater<int>());
        for(i = 0; i < m - 1; i ++)
            f[0][x] += t.at(i);
    }

    f[1][x] = f[0][x];
    if((signed)t.size() > m - 1)
        f[1][x] += *max_element(t.begin() + m - 1, t.end());

    // printf("finall %lld %lld\n", f[0][x], f[1][x]);

    return;
}

int main(void)
{
    int t, u, v, w;
    int i;

    scanf("%d", &t);
    while(t --)
    {
        scanf("%d %d", &n, &m);
        for(i = 1; i < n; i ++)
        {
            scanf("%d %d %d", &u, &v, &w);
            e[-- u].push_back(make_pair(-- v, w));
            e[   v].push_back(make_pair(   u, w));
        }
        DFS(0, 0);
        printf("%lld\n", f[1][0]);

        for(i = 0; i < n; i ++)
            e[i].clear();
    }

    return 0;
}
