#include<bits/stdc++.h>
using namespace std;

#define fi                      first
#define se                      second
#define pb                      push_back
#define endl                    '\n'
#define all(x)                  x.begin(),x.end()
#define pii                     pair<int,int>
#define pll                     pair< long long int, long long int> 
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define SZ(x)                   ((int)x.size())

#define FOR(i,a,b)              for(int i = a; i < b; ++i)
#define REV(i,a,b)              for(int i = a; i >= b; --i)
#define FORE(i,a,b)             for(int i = a; i <= b; ++i)

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

void solve();

int32_t main()
{
        fast;
        int t = 1;
        // cin >> t;
        for(int i = 1; i <= t; ++i)
                solve();
        cerr << "Time taken: " << ((clock() * 1000) / CLOCKS_PER_SEC) << "ms\n";
}

struct node {
        int nxt[2];
        node () {
                nxt[0] = -1;
                nxt[1] = -1;
        }
};

std::vector<node> trie(1);

void add(ll x) {
        ll p = 0;
        REV(i,31,0) {
                ll cur = (((1 << i)&x) == 0);
                cur = 1 - cur;
                // cout << i << " " << cur << " " << p << endl;
                if(trie[p].nxt[cur] == -1) {
                        trie[p].nxt[cur] = SZ(trie);
                        trie.emplace_back();
                }
                p = trie[p].nxt[cur];
        }
}

ll query(int i, int pos) {
        if(i < 0  or pos == -1)
                return 0;
        if(trie[pos].nxt[0] == -1) {
                return query(i-1,trie[pos].nxt[1]);
        }
        else if(trie[pos].nxt[1] == -1) {
                return query(i-1,trie[pos].nxt[0]);
        }
        return (1 << i) + min(query(i-1,trie[pos].nxt[1]) , query(i-1,trie[pos].nxt[0]) );
}

void solve() {
        int n;
        cin >> n;
        std::vector<ll> v(n);
        FOR(i,0,n) {
                cin >> v[i];
                add(v[i]);
        }
        cout << query(31, 0) << endl;
}