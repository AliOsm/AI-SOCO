#include <bits/stdc++.h>
using namespace std;

#define double long double
#define int long long

const int MAX = 1e5 + 10; 
const int OO = 0x3f3f3f3f;
const double EPS = 1e-12;

#define bug(x) cout << #x << " = " << x << '\n'
#define FOR(i, a, n) for(int i = a; i < n; i++)
#define REP(i, n) FOR(i, 0, n)
#define fi first
#define se second
#define pb push_back
#define mt make_tuple
//#define gc getchar_unlocked

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;

double dist(int x1, int y1, int x2, int y2)
{
    return sqrt((double)(x1-x2)*(x1-x2) + (double)(y1-y2)*(y1-y2));
}

ull fat(ull n)
{
    if(n == 0) return 1;
    return n * fat(n-1);
}

double seno(double x)
{
    double ans = 0;
    for(int i = 0; i < 12; i++)
        ans += (pow((-1), i) * pow(x, (2*i+1)))/fat(2*i+1);
    return ans;
}

int32_t main()
{
	ll x1, y1, r1;
	ll x2, y2, r2;

    cin >> x1 >> y1 >> r1;
    cin >> x2 >> y2 >> r2;

    double d = dist(x1, y1, x2, y2);
    cout << fixed << setprecision(20);

    if(fabs(d - (r1 + r2)) >= EPS and (d - (r1 + r2)) > 0)
        cout << 0.0 << '\n';
    else
    {
        if(r1 >= r2 and fabs((d + r2) - r1) < EPS or r1 >= r2 and fabs((d + r2) - r1) >= EPS and (d + r2) - r1 < 0)
            cout << acos(-1)*r2*r2 << '\n';
        else if(r1 <= r2 and fabs((d + r1) - r2) < EPS or r1 <= r2 and fabs((d + r1) - r2) >= EPS and (d + r1) - r2 < 0)
            cout << acos(-1)*r1*r1 << '\n';
        else
        {
            double teta = acos((r1/(2.0*d)) + (d/(2.0*r1)) - (r2*r2/(2.0*r1*d)));
            double s1 = r1*r1*teta;
            double t1;
            t1 = r1*r1*sin(2.0*teta)/2.0;
            double alfa = acos((r2/(2.0*d)) + (d/(2.0*r2)) - (r1*r1/(2.0*r2*d)));
            double s2 = r2*r2*alfa;
            double t2;
            t2 = t2 = (double)r2*r2*sin(2.0*alfa)/2.0;
            double ans = s1 - t1 + s2 - t2;
            cout <<  ans << '\n';
        }
    }
    
	return 0;
}