#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <bitset>
#include <string>
#include <vector>
#include <algorithm>
#include <ctime>
#include <queue>
#include <cstring>
#include <set>
#include <map>
#include <sstream>
#include <cmath>
#include <fstream>
#include <list>
using namespace std;
#define rp(i,n) for(int (i)=0;(i)<(n);++(i))
#define pb push_back
#define L(s) (int)s.size()
#define mp make_pair
#define pii pair<int,int>
#define x first 
#define y second
#define inf 1000000000
#define VI vector<int>
#define ll long long
#define all(s) (s).begin(),(s).end()
#define C(u) memset((u),0,sizeof((u)))
#define ull unsigned ll
int a[333][333];
set<int> s[333];
int n;
VI w;
void dfs(int v,int p)
{
	int list=1;
	rp(i,n)
		if (a[v][i]&&i!=p)
		{
			dfs(i,v);
			list=0;
		}
	if (list)
		s[v].insert(v);
	else
		rp(i,n)
		if (a[v][i]&&i!=p)
			for(set<int>::iterator it=s[i].begin();it!=s[i].end();++it)
				s[v].insert(*it);
}
int pos;
VI ans;
void solve(int v,int p)
{
	ans.pb(v);
	int cnt=0;
	if (pos<L(w)&&v==w[pos])
		++pos;
	while(1)
	{
		bool upd=0;
		rp(i,n)
			if (a[v][i]&&i!=p&&pos<L(w)&&s[i].find(w[pos])!=s[i].end())
			{
				upd=1;
				solve(i,v);
				ans.pb(v);
				s[i].clear();
				break;
			}
		if (!upd)
			break;
	}
}
int main()
{
	cin>>n;
	rp(i,n-1)
	{
		int p,q;
		cin>>p>>q;
		--p;--q;
		a[p][q]=a[q][p]=1;
	}
	int tot=0;
	rp(i,n)
	{
		int cnt=0;
		rp(j,n)
			if (a[i][j])
				++cnt;
		if (cnt==1&&i)
			++tot;
	}
	rp(i,tot)
	{
		int p;
		cin>>p;
		w.pb(--p);
	}
	dfs(0,-1);
	solve(0,-1);
	if (pos==L(w))
		rp(i,L(ans))
		{
			if (i)
				cout<<" ";
			cout<<ans[i]+1;
			if (i==L(ans)-1)
				cout<<endl;
		}
	else
		cout<<"-1\n";
}