#include<bits/stdc++.h>
using namespace std;
typedef long long int uli;
const int mxv=1e3+10;
const int mxe=1e4+10;
const uli oo=1e14;
int n,m;
int us[mxe],vs[mxe];
uli cs[mxe];
vector<int>g[mxv],e[mxv];
vector<uli>w[mxv];
int p[mxv];
uli ds[mxv];
bool erased[mxe];
int idx[mxe],ivx[mxe];
struct node{
  int u;
  uli w;
  node(int u,uli w):u(u),w(w){}
  bool operator <(node n)const{
    return w>n.w;
  }
};
void dij(int u){
  fill(ds,ds+mxv,-1ll);
  priority_queue<node>q;
  q.push(node(u,0ll));
  ds[u]=0;
  while(!q.empty()){
    u=q.top().u;
    uli wu=q.top().w;
    q.pop();
    if(ds[u]!=wu)continue;
    for(int i=0;i<int(g[u].size());i++){
      int v=g[u][i];
      uli bet=wu+w[u][i];
      if(ds[v]==-1 || bet<ds[v]){
        p[v]=e[u][i];
        ds[v]=bet;
        q.push(node(v,bet));
      }
    }
  }
}
int main(){
  int s,t;
  uli l;
  scanf("%d %d %lld %d %d",&n,&m,&l,&s,&t);
  for(int i=0;i<m;i++){
    scanf("%d %d %lld",us+i,vs+i,cs+i);
    int u=us[i],v=vs[i];
    uli c=cs[i];
    if(cs[i]==0){
      erased[i]=true;
      idx[i]=g[u].size();
      ivx[i]=g[v].size();
      c=oo;
    }
    g[u].push_back(v);
    g[v].push_back(u);
    w[u].push_back(c);
    w[v].push_back(c);
    e[u].push_back(i);
    e[v].push_back(i);
  }
  dij(s);
  if(ds[t]<l){
    puts("NO");
    return 0;
  }
  for(int i=0;i<m;i++)if(erased[i]){
    w[us[i]][idx[i]]=1;
    w[vs[i]][ivx[i]]=1;
    cs[i]=1;
  }
  dij(s);
  if(ds[t]>l){
    puts("NO");
    return 0;
  }
  while(true){
    dij(s);
    if(ds[t]==l)break;
    int u=t;
    while(u!=s){
      int edge=p[u];
      int v=vs[edge];
      if(v==u)v=us[edge];
      u=v;
      if(erased[edge]){
        uli inc=l-ds[t];
        cs[edge]+=l-ds[t];
        w[us[edge]][idx[edge]]+=inc;
        w[vs[edge]][ivx[edge]]+=inc;
        break;
      }
    }
  }
  puts("YES");
  for(int i=0;i<m;i++){
    printf("%d %d %lld\n",us[i],vs[i],cs[i]);
  }
  return 0;
}
