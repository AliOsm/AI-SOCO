#define _CRT_SECURE_NO_WARNINGS
#include<bits\stdc++.h>

using namespace std;

#define Files


#define rdi(i)          scanf("%d", &i)
#define rdii(i, j)      scanf("%d%d", &i, &j)
#define rep(i, v)       for(int i=0;i<v.size();++i)
#define lp(i, n)        for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)    for(int i=(j);i<(int)(n);++i)
#define all(v)          ((v).begin()), ((v).end())
#define clr(v, d)       memset(v, d, sizeof(v))
#define lpd(i, j, n)    for(int i=(j);i>=(int)(n);--i)

typedef long long         ll;
typedef unsigned long long   ull;
const ll OO = 1e8;
const ll OOL = 1e16;
const ll MOD = 1e9 + 7;

#define pb                  push_back
#define MP                  make_pair
typedef long double       ld;
typedef vector<int>       vi;
typedef vector<double>    vd;
typedef pair<int, int>    pii;
typedef pair<ll, ll>      pll;
typedef vector<pair<int, int> > vii;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;
typedef vector<ll>        vl;
typedef vector<vector<ll> >     vvl;
typedef vector<pair<ll, ll> >   vll;

ull gcd(ull a, ull b) { return (b == 0 ? a : gcd(b, a % b)); }
ull lcm(ull a, ull b) { return (a * (b / gcd(a, b))); }
ull power(ull a, ull b){ if (b == 0) return 1; ull ans = power(a, b / 2); ans = (ans * ans) % MOD; if (b & 1) ans = (ans * a) % MOD; return ans; }
typedef pair<ll, ll > pp;

int n;
int a[100100];
int cnt[1001000];

int idx[1001000];
int M[1001000];
int nxt[4010][4010];

int memo[4010][4010];
int dp(int prev, int c){
	if (c == n) return 1;

	int &ret = memo[prev][c];
	if (ret != -1) return ret;

	return ret = 1 + dp(c, nxt[c][idx[a[prev]]]);
}

int main() {
#ifdef Filesx
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
#endif
	ios::sync_with_stdio(0);

	cin >> n;
	int ans = 0;
	int ID = 1;
	lp(i, n){
		cin >> a[i];
		cnt[a[i]]++;
		ans = max(ans, cnt[a[i]]);
		M[a[i]] = n;
		if (idx[a[i]] == 0) idx[a[i]] = ID++;
	}

	lp(i, n + 10) lp(j, n + 10) nxt[i][j] = n;

	lpd(i, n - 1, 0){
		lpd(j, n - 1, i + 1){
			nxt[i][idx[a[j]]] = j;
		}
	}

	clr(memo, -1);
	lp(i, n) lpi(j, i + 1, n) ans = max(ans, dp(i, j));

	cout << ans << endl;

	return 0;

}