#include <bits/stdc++.h>
using namespace std;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl




typedef long long ll;
const ll mod = 1e9+7;
const int maxn = 1e6 + 5;
const ll inf = 1e14;

int n, m, s, t;
ll L;


int u[maxn], v[maxn]; ll w[maxn];
vector<int> edges;


vector<pair<ll,int>> g[maxn];
ll dist[maxn];
void dijkstra() {
    for (int i=0; i<n; i++) {
	dist[i]=1e18;
    }
    dist[s]=0;
    set<pair<ll,int>> s;
    for (int i=0; i<n; i++) {
	s.insert({dist[i],i});
    }
    while (s.size()) {
	auto cur = *s.begin();
	int at = cur.second;
	ll d = cur.first;

	s.erase(s.begin());
	for (auto ed: g[at]) {
	    ll wei = ed.first;
	    int to = ed.second;
	    if (d+wei < dist[to]) {
		s.erase({dist[to],to});
		s.insert({d+wei,to});
		dist[to] = d+wei;
	    }
	}
    }
}

ll get(ll boost) {
    for (int i=0; i<n; i++) {
	g[i].clear();
    }
    for (int i: edges) {
	w[i] = 1 + min(boost, inf);//edges need to be positive weight
	boost -= (w[i]-1);
    }
    for (int i=0; i<m; i++) {
	g[u[i]].push_back({w[i],v[i]});
	g[v[i]].push_back({w[i],u[i]});
    }

    dijkstra();
    return dist[t];
}

int main() {
    ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);
    cin>>n>>m>>L>>s>>t;
    for (int i=0; i<m; i++) {
	cin>>u[i]>>v[i]>>w[i];
	if (w[i]==0) {
	    edges.push_back(i);
	}
    }
    
    //each edge>0 and can't fit in L
    //giving each edge inf weight and still can't achieve L
    if (get(0)>L || get(edges.size()*inf)<L) out("NO");

    ll l = -1;
    ll r = edges.size()*inf;

    while (r - l > 1) {
	ll mid = (r+l)/2;
	if (get(mid) >= L) {
	    r = mid;
	} else {
	    l = mid;
	}
    }

    get(r);
    cout<<"YES\n";
    for (int i=0; i<m; i++) {
	cout<<u[i]<<" "<<v[i]<<" "<<w[i]<<"\n";
    }
  

    return 0;
}
