/**
 * Dont raise your voice, improve your argument.
 * --Desmond Tutu
 */

#include <bits/stdc++.h>
using namespace std;

vector<string> vec_splitter(string s) {
    for(char& c: s) c = c == ','?  ' ': c;
    stringstream ss; ss << s;
    vector<string> res;
    for(string z; ss >> z; res.push_back(z));
    return res;
}

void debug_out(vector<string> __attribute__ ((unused)) args, __attribute__ ((unused)) int idx) { cerr << endl; }
template <typename Head, typename... Tail>
void debug_out(vector<string> args, int idx, Head H, Tail... T) {
    if(idx > 0) cerr << ", ";
    stringstream ss; ss << H;
    cerr << args[idx] << " = " << ss.str();
    debug_out(args, idx + 1, T...);
}

#ifdef XOX
#define debug(...) debug_out(vec_splitter(#__VA_ARGS__), 0, __VA_ARGS__)
#else
#define debug(...) 42
#endif

const double PI = acos(-1);
typedef long long ll;
#define int ll
#define fori(n) for(int i=0; i<int(n); i++)

#define cins(s) string s; cin>>s;
#define cini(i) int i; cin>>i;
#define cind(d) double d; cin>>d;
#define cinai(a, n) vi a(n); fori(n) { cin>>a[i]; }
#define cinas(s, n) vs s(n); fori(n) { cin>>s[i]; }
#define cinad(a, n) vd a(n); fori(n) { cin>>a[i]; }

typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<double> vd;
typedef vector<bool> vb;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<string> vs;

int dsum(int i) {
    int ans=0;
    while(i) {
        ans+=i%10;
        i/=10;
    }
    return ans;
}
/* x is really big if
 * abs(x-dsum(x))>=s
 * Note that the digit-sum is fairly limited.
 * let maxdsum=18*9
 * So, all numbers x>n+maxdsum are really big
 * And all numbers x<n-maxdsum are not really big
 * And those in between need to be checked.
 */
const int MAXDSUM=18*9;
void solve() {
    cini(n);
    cini(s);
    int ans=0;
    for(int x=max(1LL, s-MAXDSUM); x<=n && x<=s+MAXDSUM; x++) {
        int diff=x-dsum(x);
        if(diff>=s) {
//cerr<<"n="<<n<<" s="<<s<<" x="<<x<<" diff="<<diff<<" dsum(x)="<<dsum(x)<<endl;
            ans++;
        }
    }
    if(n>s+MAXDSUM) {
        ans+=n-(s+MAXDSUM);
    }
    cout<<ans<<endl;
}

signed main() {
    cin.tie(nullptr);
    std::ios::sync_with_stdio(false);
    solve();
}

