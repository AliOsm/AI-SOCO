#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long LL;
const int N = 1005;
struct Point {
    LL x , y;
    inline void input () {
        cin >> x >> y;
    }
}point[N];
struct Circle {
    Point cer;LL r;
    inline void input () {
        cin >> r;cer.input ();
    }
    bool operator < (const Circle &c) const {
        return r < c.r;
    }
}circle[N];
int n , m , k , out[N] , dist[N][N];
vector <int> edge[N]; 
LL sqr (LL d) {
    return d * d;
}
void dfs (int root , int u , int pre , int d) {
    dist[root][u] = d;
    for (int i = 0 ; i < edge[u].size() ; i ++)
        if (pre != edge[u][i])
            dfs (root , edge[u][i] , u , d + 1);
}
int main () {
    #ifndef ONLINE_JUDGE
        freopen ("input.txt" , "r" , stdin);
    #endif
    cin >> n >> m >> k;
    for (int i = 0 ; i < n ; i ++)
        point[i].input ();
    for (int i = 0 ; i < m ; i ++)
        circle[i].input ();
    sort (circle , circle + m);
    for (int i = 0 ; i < m ; i ++) {
        int ok = 0;
        for (int j = i + 1 ; j < m ; j ++) {
            if (sqr (circle[i].cer.x - circle[j].cer.x) 
                + sqr (circle[i].cer.y - circle[j].cer.y)
                < sqr (circle[j].r)) {
                edge[j].push_back (i);
                edge[i].push_back (j);
                ok = 1;
                break;
            }
        }
        if (!ok) {
            edge[m].push_back (i);
            edge[i].push_back (m);
        }
    }
    for (int i = 0 ; i <= m ; i ++) {
        dfs (i , i , -1 , 0);
    }
    for (int i = 0 ; i < n ; i ++) {
        out[i] = m;
        for (int j = 0 ; j < m ; j ++) {
            if (sqr (point[i].x - circle[j].cer.x) 
                + sqr (point[i].y - circle[j].cer.y)
                < sqr (circle[j].r)) {
                out[i] = j;
                break;
            }
        }
    }
    while (k --) {
        int a , b;cin >> a >> b;
        a --; b --;
        cout << dist[out[a]][out[b]] << endl;   
    }
    return 0;  
}