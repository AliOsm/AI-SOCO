#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

void fastInOut();

const int N = 200009;
int n, m, a[N], bit[N], ret[N];
pair<pair<int, int>, int> qry[N];
pair<int, int> arrIdx[N];

int getSum(int idx) {
	int sum = 0;
	++idx;
	while (idx > 0) {
		sum += bit[idx];
		idx -= idx & (-idx);
	}
	return sum;
}

void updateBIT(int idx, int val) {
	++idx;
	while (idx <= n) {
		bit[idx] += val;
		idx += idx & (-idx);
	}
}

int getRet(int pos) {
	int st = 0, ed = n - 1;
	while (st < ed) {
		int md = (st + ed) / 2, sm = getSum(md);
		if (sm < pos)
			st = md + 1;
		else if (sm > pos)
			ed = md - 1;
		else
			ed = md;
	}
	return a[st];
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#endif
	fastInOut();
	cin >> n;
	for (int i = 0; i < n; ++i)
		cin >> a[i], arrIdx[i] = {a[i], -i};
	sort(arrIdx, arrIdx + n);
	cin >> m;
	for (int i = 0; i < m; ++i)
		cin >> qry[i].first.first >> qry[i].first.second, qry[i].second = i;
	sort(qry, qry + m);

	int lstIdx = n - 1, lstK = 0;
	for (int i = 0; i < m; ++i) {
		while (lstK < qry[i].first.first) {
			updateBIT(-arrIdx[lstIdx].second, 1);
			++lstK, --lstIdx;
		}
		ret[qry[i].second] = getRet(qry[i].first.second);
	}
	for (int i = 0; i < m; ++i)
		cout << ret[i] << "\n";
	return 0;
}

void fastInOut() {
	ios_base::sync_with_stdio(0);
	cin.tie(NULL), cout.tie(NULL);
}
