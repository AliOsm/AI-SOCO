#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define pi 3.141592653589793238
#define int long long
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;


vector<int> qq[100004];
int seg[400005];
int lz[400005];
int lz2[400005];
int ans[100005];

void push2(int ver)
{
	seg[2*ver]=0;
	seg[2*ver+1]=0;
	lz[2*ver]=0;
	lz[2*ver+1]=0;
	lz2[2*ver]=1;
	lz2[2*ver+1]=1;
	lz2[ver]=0;
}

void push(int  ver,int tl,int tm,int tr)
{
    seg[2*ver]+=lz[ver]*(tm-tl+1);
    seg[2*ver+1]+=lz[ver]*(tr-tm);
    lz[2*ver]+=lz[ver];
    lz[2*ver+1]+=lz[ver];
    lz[ver]=0;
}

void upd(int ver,int tl,int tr,int l,int r,int val)
{
    if(tl>tr||l>r||tr<l||r<tl)
            return;
    else if(tl==l&&tr==r)
    {
        seg[ver]+=val*(tr-tl+1);
        lz[ver]+=val;
    }
    else
    {
        int tm=(tl+tr)/2;
		if(lz2[ver])
			push2(ver);
        if(lz[ver])
                push(ver,tl,tm,tr);
        upd(2*ver,tl,tm,l,min(tm,r),val);
        upd(2*ver+1,tm+1,tr,max(tm+1,l),r,val);
        seg[ver]=seg[2*ver]+seg[2*ver+1];
    }
}

int get(int ver,int tl,int tr,int pos)
{
    if(tl>tr)
        return 0;
    else if(tl==tr)
        return seg[ver];
    else
    {
        int tm=(tl+tr)/2;
		if(lz2[ver])
			push2(ver);
        if(lz[ver])
                push(ver,tl,tm,tr);
        seg[ver]=seg[2*ver]+seg[2*ver+1];
 
        if(tm>=pos)
                return get(2*ver,tl,tm,pos);
        else
                return get(2*ver+1,tm+1,tr,pos);
    }
}

signed main()
{
ios_base::sync_with_stdio(false);
cin.tie(NULL);  
cout.tie(0);   

#ifndef ONLINE_JUDGE
    if(fopen("INPUT.txt","r"))
    {
    freopen ("INPUT.txt" , "r" , stdin);
    freopen ("OUTPUT.txt" , "w" , stdout);
    }
#endif  

    int n;
    cin>>n;
    vector<pair<int,pair<int,int> > >p;
    int x,y,z;
	fill_n(ans,n+1,-1);
    set<int>s1,s2;
    map<int,int>mm1,mm2;
    for(int i=0;i<n;i++)
    {
        cin>>x>>y>>z;
        p.push_back({x,{y,z}});
        s1.insert(y);
        s2.insert(z);
    }    
    int cnt1=0,cnt2=0;
    for(auto i:s1)
    {
        mm1[i]=++cnt1;
    }

    for(auto i:s2)
    {
        mm2[i]=++cnt2;
    }
    for(int i=0;i<n;i++)
    {
        p[i].second.first=mm1[p[i].second.first];
        p[i].second.second=mm2[p[i].second.second];
        qq[p[i].second.second].push_back(i);
    }

    for(int i=1;i<=cnt2;i++)
    {
		seg[1]=0;
		lz2[1]=1;
		lz[1]=0;
        for(auto j:qq[i])
        {
            x=p[j].first;
            y=p[j].second.first;
            if(x==1)
            {
                upd(1,1,cnt1,y,cnt1,1);
            }
            else if(x==2)
            {
                upd(1,1,cnt1,y,cnt1,-1);                
            }
            else
            {
                ans[j]=get(1,1,cnt1,y);
            }
        }
    }	

    for(int i=0;i<n;i++)
		if(ans[i]>=0)
            cout<<ans[i]<<'\n';

}
