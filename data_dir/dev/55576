#include<bits/stdc++.h>
using namespace std;

//defines
#define openin freopen("input.txt","r",stdin)
#define openout freopen("output.txt","w",stdout)
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ll long long
#define int long long
#define mod 1000000007
#define repr(i,x,y) for (__typeof(x) i=x;i>=y;i--)
#define rep(i,x,y) for (__typeof(x) i=x;i<=y;i++)
#define all(c) (c).begin(),(c).end()
#define ff first
#define ss second
#define pb push_back
#define mp make_pair

/* Print pair */
template <typename T,typename S>
ostream & operator << (ostream &os , const pair<T,S> &v) {
    os << "(" ;
    os << v.first << "," << v.second << ")" ;
    return os ;
}
/* Print vector */
template <typename T>
ostream & operator << (ostream &os , const vector<T> &v) {
    os << "[" ;
    int sz = v.size() ;
    for(int i = 0 ; i < sz ; ++i) {
        os << v[i] ;
        if(i!=sz-1)os << "," ;
    }
    os << "]\n" ;
    return os ;
}
/* Print set */
template <typename T>
ostream & operator << (ostream &os , const set<T> &v) {
    T last = *v.rbegin() ;
    os << "[" ;
    for(auto it : v) {
        os << it  ;
        if(it != last) os << "," ;
    }
    os << "]\n" ;
    return os ;
}
/* Print Map */
template <typename T,typename S>
ostream & operator << (ostream &os , const map<T,S> &v) {
    for(auto it : v) {
        os << it.first << " : " << it.second << "\n" ;
    }
    return os ;
}
int power(int a , int b)
{
    int res = 1 ;
    while(b)
    {
        if(b%2) {
            res = (res * a) % mod ;
        }
        b/=2 ;
        a = (a*a) % mod ;
    }
    return res ;
}

//debug
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
        cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

string s ; 

int solve(char First , char Second) {
    int posF = -1 , posS = -1 ; 
    int n = s.size() ; 
    for(int i = n - 1 ; i >= 0 ; --i) {
        if(s[i] == Second) {
            posS = i ; break ;  
        }
    }
    if(posS == -1) return mod ; 
    for(int i = n - 1 ; i >= 0 ; --i) {
        if(s[i] == First && i != posS) {
            posF = i ; break ;  
        }
    }
    if(posF == -1) return mod ;
    int cnt = 0 ; 
    // take care of zeros 
    if(posF == 0 || posS == 0) {
        if(n <= 2) {} 
        else {
            int idx = 0 ; 
            while(idx < n) {
                if(idx == posF or idx == posS) ++idx ; 
                else if(s[idx] == '0') {
                    ++cnt , ++idx ;  
                }
                else break ;
            }
            if(idx == n) return mod ;
        }
    }
    cnt += 2 * n - 3 - posF - posS ; 
    if(posF > posS) ++cnt ; 
    return cnt ; 
}
int32_t main()
{
    fast;
    cin >> s ; 
    int ans = min({solve('0','0') , solve('2','5') , solve('5','0') , solve('7','5')}) ; 
    if(ans == mod) ans = -1 ; 
    cout << ans << endl ; 
    return 0;
}
