/*****Enigma27*****/
#include<bits/stdc++.h>
#define start_routine clock_t begin = clock();
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse2")
#define end_routine clock_t end = clock(); double elapsed_secs = double(end - begin) /CLOCKS_PER_SEC;return cerr<<"\nTime elapsed : "<<elapsed_secs<<" seconds\n",0;
#define ll          long long
#define pb          push_back
#define endl        '\n'
#define pll         pair<ll int,ll int>
#define vll          vector<ll int>
#define all(a)      (a).begin(),(a).end()
#define x           first
#define y           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll int i=a;i<b;i++)
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define gcd(a,b)    __gcd((a),(b))
#define lcm(a,b)    ((a)*(b)) / gcd((a),(b))
#define ios     ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
using namespace std;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); 
ll n,i,j,k,l,sum=0,flag=0,t,a[500005],ans=0,visited[500005];
set<int> s;
int main()
{
   // ios
    cin>>n>>k>>l;
 	for(int i=0;i<n;i++) cin>>a[i],s.insert(i);
 	sort(a,a+n);
	queue<int> q;
	q.push(0);
	visited[0]=1;
	while(!q.empty()){
		int leader = q.front();
		//cout<<leader<<endl;
		q.pop();
		if(leader+k-1>=n || a[leader+k-1]-a[leader]>l) continue;
		if(a[n-1]-a[leader]<=l) return cout<<"YES\n",0;
		vll v;
		for(auto j=s.lbnd(leader+k);j!=s.end();j++){
			v.pb(*j);
			q.push(*j);
			if(a[*j]-a[leader]>l) break;
		}
		for(auto i:v) s.erase(i);
	}
	cout<<"NO\n";   
    return 0;
}