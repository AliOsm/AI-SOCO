// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second
#define int long long

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int N = (int)1e5 + 3;

int n, k, a[N], pref[N], suf[N];
VI val;

int licz(int len, int pos) {
  int l = pos;
  int r = pos+len;
  int res = 0;
  int id = lower_bound(val.begin(), val.end(), l) - val.begin();
  if (id > 0) {
    --id;
    res += (id+1)*l-pref[id+1];
  }
  id = upper_bound(val.begin(), val.end(), r) - val.begin();
  if (id < (int)val.size())
    res += suf[id+1]-(n-id)*r;
  return res;
}

bool git(int len) {
  if (a[n]-a[1] <= len)
    return true;
  int x1 = a[1], x2 = a[n]-len, x3, x4;
  while (x2-x1 > 9) {
    x3 = (2*x1+x2)/3;
    x4 = (x1+2*x2)/3;
    int li1 = licz(len, x3);
    int li2 = licz(len, x4);
    if (li1 < li2)
      x2 = x4;
    else
      x1 = x3;
  }
  int mini = 1e18;
  for (int i = x1; i <= x2; ++i)
    mini = min(mini, licz(len, i));
  return mini <= k;
}

signed main() {
  init_ios();
  cin >> n >> k;
  for (int i = 1; i <= n; ++i)
    cin >> a[i];
  sort(a+1, a+n+1);
  for (int i = 1; i <= n; ++i)
    val.PB(a[i]);
  for (int i = 1; i <= n; ++i)
    pref[i] = pref[i-1]+a[i];
  for (int i = n; i >= 1; --i)
    suf[i] = suf[i+1]+a[i];
  int x1 = 0, x2 = (int)1e9;
  while (x2-x1 > 1) {
    int x3 = (x1+x2)/2;
    if (git(x3))
      x2 = x3;
    else
      x1 = x3;
  }
  if (git(x1))
    cout<<x1<<"\n";
  else
    cout<<x2<<"\n";
}