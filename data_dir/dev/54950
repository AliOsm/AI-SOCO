#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>
#include <memory.h>
#include <list>
#include <numeric>
#include <functional>
#include <complex>
#include <cassert>
#include <regex>
#include <random>
#include <numeric>
#include <functional>

using namespace std;

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()

const int nax = (int)1e5 + 5;

ll cost[nax][3];
vector<int>g[nax];

bool answer_exists() {
	for (int i = 0; i < nax; i++) {
		if ((int)g[i].size() > 2) {
			return false;
		}
	}

	return true;
}

vector<int>path;

void dfs(int v, int p) {
	path.emplace_back(v);
	for (auto to : g[v]) {
		if (to == p) continue;
		dfs(to, v);
	}
}

int clr[nax];
int ans[nax];

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("sum.in", "r", stdin);
	//freopen("sum.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	cout.precision(7);
	cout.setf(ios::fixed);
	int n;
	cin >> n;

	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < n; j++) {
			cin >> cost[j][i];
		}
	}

	for (int i = 1; i < n; i++) {
		int u, v;
		cin >> u >> v;
		u--, v--;
		g[u].emplace_back(v);
		g[v].emplace_back(u);
	}

	if (!answer_exists()) {
		cout << -1;
		return 0;
	}

	int root = -1;
	for (int i = 0; i < n; i++) {
		if (g[i].size() == 1) {
			root = i;
			break;
		}
	}

	dfs(root, -1);

	ll mn = 4e18;
	for (int c1 = 0; c1 < 3; c1++) {
		for (int c2 = 0; c2 < 3; c2++) {
			if (c1 == c2) continue;
			memset(clr, -1, sizeof(clr));
			clr[path[0]] = c1;
			clr[path[1]] = c2;

			ll cur = cost[path[0]][c1] + cost[path[1]][c2];
			for (int i = 2; i < n; i++) {
				int p1 = path[i - 1];
				int p2 = path[i - 2];
				for (int k = 0; k < 3; k++) {
					if (k == clr[p1] || k == clr[p2]) continue;
					clr[path[i]] = k;
					cur += cost[path[i]][k];
					break;
				}
			}

			if (cur < mn) {
				mn = cur;
				memcpy(ans, clr, sizeof(clr));
			}
		}
	}

	cout << mn << '\n';
	for (int i = 0; i < n; i++) {
		cout << ans[i] + 1 << ' ';
	}
	return 0; 
}