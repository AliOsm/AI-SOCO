#include <bits/stdc++.h>

using namespace std;

const int N = 5005;

int n;
int a[N];
int last[N], first[N];
int used[N];
int best[N];

enum event_t {
  EVENT_START,
  EVENT_END
};

struct event {
  int x, id;
  event_t type;
  int val;

  event(int x, int id, event_t type, int val) : x(x), id(id), type(type), val(val) {}

  bool operator < (const event &other) const {
    if (x == other.x) return type < other.type;
    return x < other.x;
  }
};

int main() {
  scanf("%d", &n);
  for (int i = 0; i < n; i++) scanf("%d", a + i);
  memset(first, -1, sizeof first);
  for (int i = 0; i < n; i++) {
    last[a[i]] = i;
  }
  for (int i = n - 1; i >= 0; i--) {
    first[a[i]] = i;
  }
  vector<event> events;
  for (int i = 0; i < n; i++) {
    if (i != first[a[i]]) continue;
    int mn = first[a[i]];
    int val = 0;
    int mx = last[a[i]];
    bool ok = true;
    for (int j = i; j <= mx; j++) {
      mx = max(mx, last[a[j]]);
      if (used[a[j]] != i + 1) {
        if (j != first[a[j]]) {
          ok = false;
          break;
        }
        val ^= a[j];
        used[a[j]] = i + 1;
      }
    }
    if (!ok) continue;
    events.push_back({mn, i, EVENT_START, val});
    events.push_back({mx, i, EVENT_END, val});
  }
  sort(events.begin(), events.end());
  int ans = 0;
  for (auto e : events) {
    int x = e.x, id = e.id, val = e.val; event_t type = e.type;
    if (type == EVENT_START) {
      best[id] = ans;
    } else if (type == EVENT_END) {
      ans = max(ans, best[id] + val);
    }
  }
  printf("%d\n", ans);
  return 0;
}