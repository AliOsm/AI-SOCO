#include "bits/stdc++.h"
using namespace std;
vector<int> Friends[2005] , Enemies[2005];
int Components[2005] , Freq[2005];
bool IsPossible[2005] , Visited[2005];

void dfs( int root , int num ){
    Components[root] = num;
    ++Freq[num];
    Visited[root] = true;

    for( int i = 0 ; i < int(Friends[root].size()) ; ++i ){
        if( Visited[Friends[root][i]] == false )
            dfs( Friends[root][i] , num );
    }
}

int FindComponents( int N ){
    int i , j = 1;
    fill( Visited , Visited + N + 1 , false );

    for( i = 1 ; i <= N ; ++i ){
        if( Visited[i] == false ){
            dfs( i , j );
            ++j;
        }
    }

    return j - 1;
}

int FindAns( int N , int c ){
    int i , j , u;
    fill( IsPossible , IsPossible + c + 1 , true );

    for( i = 1 ; i <= N ; ++i ){
        for( j = 0 ; j < int(Enemies[i].size()) ; ++j ){
            u = Enemies[i][j];
            if( Components[u] == Components[i] ){
                IsPossible[Components[i]] = false;
                break;
            }
        }
    }

    int Ans = 0;

    for( i = 1 ; i <= c ; ++i ){
        if( IsPossible[i] == true ) Ans = max( Ans , Freq[i] );
    }

    return Ans;
}

int main(){
    int i , N , k , m , u , v;
    scanf( "%d%d" , &N , &k );

    for( i = 1 ; i <= k ; ++i ){
        scanf( "%d%d" , &u , &v );
        Friends[u].emplace_back( v );
        Friends[v].emplace_back( u );
    }

    scanf( "%d" , &m );

    for( i = 1 ; i <= m ; ++i ){
        scanf( "%d%d" , &u , &v );
        Enemies[u].emplace_back( v );
        Enemies[v].emplace_back( u );
    }

    int ComponentCount = FindComponents( N );
    printf( "%d\n" , FindAns( N , ComponentCount ) );
    return 0;
}