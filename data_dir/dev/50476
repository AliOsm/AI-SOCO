#include <bits/stdc++.h>
using namespace std;

const int MAX = 2e5 + 5;
int n, m, imp, par, sol, a[MAX];
map <int, int> mk;
map <int, vector <int> > mp;

int nxt(int x) {
	while(mk.count(x))
		x += 2;

	return x;
}

int main() {
	scanf("%d%d", &n, &m);

	for(int i = 1; i <= n; i++) {
		scanf("%d", &a[i]);
		mp[a[i]].push_back(i);

		if(a[i] % 2 == 1)
			imp++;

		else par++;
	}

	if(imp >= par) {
		for(int i = 1; i <= n; i++)
			if(a[i] % 2 == 0)
				mk[a[i]] = 1;

		int st = nxt(2);

		for(auto &o : mp) {
			if(o.first % 2 == 0) {
				while((int) o.second.size() > 1) {
					int p = o.second.back();
					o.second.pop_back();

					if(st > m) {
						printf("-1\n");
						return 0;
					}

					sol++;
					a[p] = st;
					mk[st] = 1;
					st = nxt(st);
				}
			}
		}

		int need = imp - n / 2;

		for(auto &o : mp) {
			if(o.first % 2 == 1) {
				while(need > 0 && (int) o.second.size() > 1) {
					int p = o.second.back();
					o.second.pop_back();

					if(st > m) {
						printf("-1\n");
						return 0;
					}

					sol++;
					a[p] = st;
					mk[st] = 1;
					st = nxt(st);
					need--;
				}
			}
		}

		for(auto &o : mp) {
			if(o.first % 2 == 1) {
				while(need > 0 && !o.second.empty()) {
					int p = o.second.back();
					o.second.pop_back();

					if(st > m) {
						printf("-1\n");
						return 0;
					}

					sol++;
					a[p] = st;
					mk[st] = 1;
					st = nxt(st);
					need--;
				}
			}
		}

		assert(need == 0);

		mk.clear();

		for(int i = 1; i <= n; i++)
			if(a[i] % 2 == 1)
				mk[a[i]] = 1;

		st = nxt(1);

		for(auto &o : mp) {
			if(o.first % 2 == 1) {
				while((int) o.second.size() > 1) {
					int p = o.second.back();
					o.second.pop_back();

					if(st > m) {
						printf("-1\n");
						return 0;
					}

					sol++;
					a[p] = st;
					mk[st] = 1;
					st = nxt(st);
				}
			}
		}
	}

	else {
		for(int i = 1; i <= n; i++)
			if(a[i] % 2 == 1)
				mk[a[i]] = 1;

		int st = nxt(1);

		for(auto &o : mp) {
			if(o.first % 2 == 1) {
				while((int) o.second.size() > 1) {
					int p = o.second.back();
					o.second.pop_back();

					if(st > m) {
						printf("-1\n");
						return 0;
					}

					sol++;
					a[p] = st;
					mk[st] = 1;
					st = nxt(st);
				}
			}
		}

		int need = par - n / 2;

		for(auto &o : mp) {
			if(o.first % 2 == 0) {
				while(need > 0 && (int) o.second.size() > 1) {
					int p = o.second.back();
					o.second.pop_back();

					if(st > m) {
						printf("-1\n");
						return 0;
					}

					sol++;
					a[p] = st;
					mk[st] = 1;
					st = nxt(st);
					need--;
				}
			}
		}

		for(auto &o : mp) {
			if(o.first % 2 == 0) {
				while(need > 0 && !o.second.empty()) {
					int p = o.second.back();
					o.second.pop_back();

					if(st > m) {
						printf("-1\n");
						return 0;
					}

					sol++;
					a[p] = st;
					mk[st] = 1;
					st = nxt(st);
					need--;
				}
			}
		}

		assert(need == 0);

		mk.clear();

		for(int i = 1; i <= n; i++)
			if(a[i] % 2 == 0)
				mk[a[i]] = 1;

		st = nxt(2);

		for(auto &o : mp) {
			if(o.first % 2 == 0) {
				while((int) o.second.size() > 1) {
					int p = o.second.back();
					o.second.pop_back();

					if(st > m) {
						printf("-1\n");
						return 0;
					}

					sol++;
					a[p] = st;
					mk[st] = 1;
					st = nxt(st);
				}
			}
		}
	}

	printf("%d\n", sol);

	for(int i = 1; i <= n; i++)
		printf("%d ", a[i]);
	printf("\n");

	return 0;
}