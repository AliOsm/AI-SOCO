//gskhirtladze

#include <algorithm>
#include <iostream>
#include <stdio.h>
#include <vector>
#include <map>
#include <queue>

#define tree int t,int l,int r
#define left 2*t,l,(l+r)/2
#define right 2*t+1,(l+r)/2+1,r
#define fi first
#define se second
using namespace std;

int n,m,k,Q;
int ans[200001];
priority_queue < int > q[220000];
int tr[400000];
pair < pair < pair < int , int > , pair < int , int > > ,int > P[200020];
pair < int , int > p[200000];

void build(tree)
 {
  if (l == r)
  {
    if (q[l].size() == 0) tr[t]=100000000; else
    tr[t]=-q[l].top();
    return;
   }
build(left);
build(right);
tr[t]=max(tr[2*t],tr[2*t+1]);
 }

void upd(tree,int L)
 {
     if (r < L || L < l) return;
  if (l == r)
  {
    if (q[l].size() == 0) tr[t]=100000000; else
    tr[t]=-q[l].top();
    return;
  }
  upd(left,L);
  upd(right,L);
  tr[t]=max(tr[2*t],tr[2*t+1]);
 }

int get_max(tree,int L,int R)
 {
  if (R < l || L > r) return 0;
  if (L <= l && r <= R) return tr[t];
  return max(get_max(left,L,R),get_max(right,L,R));
 }

void rem(int l)
 {
  if (q[p[l].se].size() ) {q[p[l].se].pop();}
  upd(1,1,n,p[l].se);
 }
int l;
void solve()
 {
  l=1;
  for (int i=1;i<=Q;i++)
   {
    while (l <= k && p[l].fi < P[i].fi.fi.fi)
     {
      rem(l);
      l++;
     }
    if (get_max(1,1,n,P[i].fi.fi.se,P[i].fi.se.se) <= P[i].fi.se.fi)
        ans[P[i].se]=max(ans[P[i].se],1);
   }
 }

main()
 {
  scanf("%d%d%d%d",&n,&m,&k,&Q);
  n=max(n,m);
  for (int i=1;i<=k;i++)
   scanf("%d%d",&p[i].fi,&p[i].se),q[p[i].se].push(-p[i].fi);
  sort(p+1,p+k+1);
  for (int i=1;i<=Q;i++)
   {
    scanf("%d%d%d%d",&P[i].fi.fi.fi,&P[i].fi.fi.se,&P[i].fi.se.fi,&P[i].fi.se.se);
    P[i].se=i;
   } int i;
  sort(P+1,P+Q+1);
  build(1,1,n);
  solve();
  for (i=1;i<=n;i++)
     while (q[i].size()) q[i].pop();
  for (i=1;i<=k;i++)
    swap(p[i].fi,p[i].se),q[p[i].se].push(-p[i].fi);
    sort(p+1,p+k+1);
  build(1,1,n);
  for (i=1;i<=Q;i++)
    swap(P[i].fi.fi.fi,P[i].fi.fi.se),
    swap(P[i].fi.se.fi,P[i].fi.se.se);
    sort(P+1,P+Q+1);
  solve();

  for (i=1;i<=Q;i++)
  if (ans[i]) printf("YES\n"); else
              printf("NO\n");
 }