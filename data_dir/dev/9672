#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>
#include <iomanip>
#include <limits>
#include <chrono>
#include <random>
#include <array>
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

const long long MAX = 5100000;
const long long INF = 1LL << 60;
const long long MOD = 1'000'000'007LL;
const long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;

int main()
{
	/*
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	*/

	ll n; scanf("%lld", &n);
	map<int, vector<pair<int, int>>> tmp;
	for (ll i = 0; i < n; i++) {
		ll x, y; scanf("%lld %lld", &x, &y);
		tmp[max(x, y)].emplace_back(x, y);
	}

	map<int, vector<pair<int, int>>> mp;

	for (auto p : tmp) {
		vector<pair<int, int>> v = p.second;
		vector<pair<int, int>> v3(v.size());
		for (ll i = 0; i < v.size(); i++) v3[i] = make_pair(v[i].second, v[i].first);
		sort(v3.begin(), v3.end());
		if (v.size() == 1) {
			mp[p.first].push_back(v[0]);
			mp[p.first].push_back(v[0]);
		}
		else {
			sort(v.begin(), v.end());
			if (v[0].first == v.back().first) {
				mp[p.first].push_back(v[0]);
				mp[p.first].push_back(v.back());
			}
			else if(v3[0].first == v3.back().first){
				mp[p.first].emplace_back(v3[0].second, v3[0].first);
				mp[p.first].emplace_back(v3.back().second, v3.back().first);
			}
			else {
				mp[p.first].push_back(v[0]);
				vector<pair<int, int>> v2(v.size() - 1);
				for (ll i = 1; i < v.size(); i++) {
					v2[i - 1] = make_pair(v[i].second, v[i].first);
				}
				sort(v2.begin(), v2.end());
				mp[p.first].emplace_back(v2[0].second, v2[0].first);
			}
		}
	}
	vector<vector<ll>> dp(mp.size() + 1, vector<ll>(2, INF));
	dp[0][0] = 0;
	dp[0][1] = 0;
	mp[0].emplace_back(0, 0);
	mp[0].emplace_back(0, 0);
	ll id = 0;
	for (auto itr = (++mp.begin()); itr != mp.end(); itr++) {
		vector<pair<int, int>> now = itr->second;
		vector<pair<int, int>> pre = prev(itr)->second;
		ll dist = llabs(now[0].first - now[1].first) + llabs(now[0].second - now[1].second);
		for (ll i = 0; i < 2; i++) {
			for (ll j = 0; j < 2; j++) {
				chmin(dp[id + 1][i], dp[id][j] + dist + llabs(now[(i + 1) % 2].first - pre[j].first) + llabs(now[(i + 1) % 2].second - pre[j].second));
			}
		}
		id++;
	}

	cout << min(dp[id][0], dp[id][1]) << endl;
	return 0;


}