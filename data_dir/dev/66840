//ITNOG
#include<bits/stdc++.h>

using namespace std;

//#define int long long

const int maxN = 4000 * 1000 + 5;
const int mod = 1000*1000*1000;

long long seg[2][4 * maxN];
long long ad[2][4 * maxN];


inline void shift(int ps, int ind)
{
    ad[ps][2 * ind + 0] += ad[ps][ind];
    ad[ps][2 * ind + 1] += ad[ps][ind];
    ad[ps][ind] = 0;
}

inline void update(int ps, int ind, int s, int e)
{
    int mid = (s + e) >> 1;

    seg[ps][ind] = 0;
    seg[ps][ind] += seg[ps][2 * ind + 0] + ad[ps][2 * ind + 0] * (mid - s);
    seg[ps][ind] += seg[ps][2 * ind + 1] + ad[ps][2 * ind + 1] * (e - mid);
}

void add(int ps, int l, int r, int v, int s, int e, int ind)
{
    if(l >= e || r <= s) return;
    if(l <= s && e <= r) { ad[ps][ind] += v; return; }
    
    shift(ps, ind);
    
    int mid = (s + e) >> 1;

    add(ps, l, r, v, s, mid, 2 * ind + 0);
    add(ps, l, r, v, mid, e, 2 * ind + 1);

    update(ps, ind, s, e);
}

long long get(int ps, int l, int r, int s, int e, int ind)
{
    if(l >= e || r <= s) return 0;
    if(l <= s && e <= r) return seg[ps][ind] + ad[ps][ind] * (e - s);
    
    shift(ps, ind);
    
    int mid = (s + e) >> 1;

    long long x = get(ps, l, r, s, mid, 2 * ind + 0);
    long long y = get(ps, l, r, mid, e, 2 * ind + 1);

    update(ps, ind, s, e);

    return (x + y);
}


main()
{
    //ios::sync_with_stdio(0); cin.tie(0);
    int n, m, w; scanf("%d%d%d", &n, &m, &w);

    for(int i = 0; i < w; i ++)
    {
	  int t, x1, y1, x2, y2; scanf("%d%d%d%d%d", &t, &x1, &y1, &x2, &y2);
	  x1 --; y1 --;
//	  cout << t << ' ' << x1 << ' ' << y1 << ' ' << x2 << ' ' << y2 << endl;

	  if(t == 0)
	  {
		int v; scanf("%d", &v);
		long long tmpx = (1LL) * v * (y2 - y1);
		long long tmpy = (1LL) * v * (x2 - x1);
		
//		cout << tmpx << ' ' << tmpy << endl;
		
		add(0, x1, x2, tmpx, 0, n, 1);
		add(1, y1, y2, tmpy, 0, m, 1);
	  }
	  else
	  {
		long long ansx = 2 * get(0, x1, x2, 0, n, 1) - (seg[0][1] + ad[0][1] * n);
		long long ansy = 2 * get(1, y1, y2, 0, m, 1) - (seg[1][1] + ad[1][1] * m);

		printf("%I64d\n", (ansx + ansy) / 2);
	  }
    }

    return 0;
}
