#include <bits/stdc++.h>

using namespace std;

long long ans;
int n;
long long v[100002], cnt[62], p1[62], p2[62], viz[100002], lvl[100002];
vector<int>G[100002];

void dfs (int x, int l, int t) {
  lvl[x] = l;
  viz[x] = 1;
  for (auto it : G[x]) {
    if (it == t)
      continue;
    if (lvl[it])
      ans = min(ans, lvl[x] - lvl[it] + 1);
    else
      dfs (it, l + 1, x);
  }
  lvl[x] = 0;
}

int main()
{
  cin >> n;
  for (int i = 1; i <= n; i++) {
    cin >> v[i];
    for (int j = 0; j < 60; j++) {
      if (v[i] & (1ll << j)) {
        cnt[j]++;
        if (!p1[j])
          p1[j] = p2[j] = i;
        else
          p2[j] = i;
        if (cnt[j] == 3) {
          cout << 3;
          return 0;
        }
      }
    }
  }
  for (int i = 0; i < 60; i++) {
    if (cnt[i] == 2) {
      G[p1[i]].push_back(p2[i]);
      G[p2[i]].push_back(p1[i]);
    }
  }
  ans = 1e9;
  for (int i = 1; i <= n; i++) {
    if (!viz[i])
      dfs (i, 1, 0);
  }
  if (ans == 1e9)
    cout << -1;
  else
    cout << ans;
  return 0;
}
