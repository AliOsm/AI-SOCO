#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

template<class A>using sett=tree<A,null_type,greater<A>,rb_tree_tag,tree_order_statistics_node_update>;

#define DIM 200009
#define INF ((long long)1e18+9ll)
#define pairll pair<long long,long long>
#define fi first
#define se second
#define ld long double
#define endl '\n'
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define amen exit(0)
//#define mp make_pair
#define pb push_back

long long i,j,k,l,n,m,sz;

long long dp[DIM],a[DIM],b[DIM];

sett<pairll> ls;

bool check(pairll a,pairll b,pairll c){
    return (ld)(a.se-c.se)/(ld)(a.fi-c.fi)>=(ld)(a.se-b.se)/(ld)(a.fi-b.fi);
}

void add(long long k,long long b){
    pairll nw={k,b};

    if(ls.size()==0){
        ls.insert(nw);
        return;
    }

    while(1){
        long long por=ls.order_of_key(nw);
       // por=ls.size();
        if(por>1){
            auto it2=ls.find_by_order(por-1);
            auto it1=ls.find_by_order(por-2);
            if(check((*it1),(*it2),nw)){
                ls.erase(it2);
            }
            else break;
        }
        else break;
        //cout<<k<<' '<<b<<' '<<por<<endl;
    }
/*
    while(1){
        long long por=ls.order_of_key(nw);
        por=ls.size()-1;
        if(por!=ls.size()-1){
            auto it2=ls.find_by_order(por+1);
            auto it1=ls.find_by_order(por);
            if(check(nw,(*it1),(*it2))){
                ls.erase(it1);
            }
            else break;
        }
        else break;
       // cout<<k<<' '<<b<<' '<<por<<' '<<ls.size()<<endl;
    }
*/
    ls.insert(nw);
}

long long can(long long num,long long x){
    if(num==0)return 0;
    auto it=ls.find_by_order(num-1);
 //   cout<<"AAAA"<<' '<<x<<' '<<num<<' '<<(*it).fi<<' '<<(*it).se<<endl;
    return (*it).fi*x+(*it).se;
}

long long get(long long x){
    long long l=0,r=ls.size(),mid;
    while(r-l>1){
        mid=(l+r)/2;
       // if(x==4)cout<<mid<<' '<<mid+1<<' '<<can(mid,x)<<' '<<can(mid+1,x)<<endl;
        if(can(mid,x)<can(mid+1,x))r=mid;
        else l=mid;
    }
    return can(r,x);
}

int main()
{
    fast;

    cin>>n;
    for(i=1;i<=n;i++)cin>>a[i];
    for(i=1;i<=n;i++)cin>>b[i];

    add(b[1],0);
    dp[1]=0;

    for(i=2;i<=n;i++){
        dp[i]=get(a[i]);
        add(b[i],dp[i]);
    }

    cout<<dp[n]<<endl;

    amen;
}//0 10 15 26 30
//b[j]*a[i]+dp[j]
