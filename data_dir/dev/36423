#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int)1e9 + 1;
const ld EPS = 1e-9;

void precalc() {
}

int n;
const int maxn = (int) 2e5 + 10;
int a[maxn];

bool read() {
  if (scanf("%d", &n) < 1) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    scanf("%d", &a[i]);
  }
  return 1;
}

vector<int> ars[maxn];

void solve() {
  for (int i = 0; i < n; ++i) {
    ars[i].clear();
  }
  for (int i = 0; i < n; ++i) {
    ars[a[i]].pb(i);
  }

  int D = *max_element(a, a + n);
  vector<int> ans;
  bool fail = 0;
  for (int i = 0; !fail && i <= D; ++i) {
    if (!sz(ars[i])) {
      fail = 1;
      break;
    }
    ans.pb(ars[i].back());
    ars[i].pop_back();
    for (; i >= 2 && sz(ars[i - 2]) > 0 && sz(ars[i - 1]) > 0 && sz(ars[i]) > 0;) {
      for (int j = i - 2; j <= i; ++j) {
        ans.pb(ars[j].back());
        ars[j].pop_back();
      }
    }
  }
  if (!fail) {
    for (int x = D + 1; x >= 0;) {
      if (x >= n || !sz(ars[x])) {
        x -= 3;
        continue;
      }
      ans.pb(ars[x].back());
      ars[x].pop_back();
      ++x;
    }
  }
  if (fail || sz(ans) != n) {
    printf("Impossible\n");
    return;
  }
  printf("Possible\n");
  for (int i = 0; i < n; ++i) {
    printf("%d%c", ans[i] + 1, " \n"[i == n - 1]);
  }
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
