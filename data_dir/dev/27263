//~In The Name Of Allah~//
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <iomanip>
#include <math.h>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <string.h>
#include <sstream>
#include <fstream>
#include <functional>
#include <stack>
#include <utility> 
#include <set>
#include <list>
#include <queue>
#include <bitset>
#include <time.h>

using namespace std;

#define read freopen("in.txt", "r", stdin)
#define write freopen("out.txt", "w", stdout)
#define all(_) _.begin(), _.end()
#define rall(_) _.rbegin(), _.rend()
#define rep(i, j) for (int i = 0; i < j; i++)
#define Rep(i, j, k) for (int i = j; i < k; i++)
#define siz(_) (int)_.size()
#define ll long long
#define endl '\n'

const double PI = 2.0 * acos(0.0);
const int MOD = 1e9 + 7;
const int oo = MOD;

typedef pair<int, int> pii;

ll gcd(ll x, ll y) { return !y ? x : gcd(y, x%y); }

int n, m, w, cb, cw;
vector<int> adj[1234], pth, ccb, ccw;
int b[1234], cst[1234];
bool vis[1234];
vector<vector<int>> cc;
ll dp[1234][1234];

void dfs(int nod) {
	vis[nod] = 1;
	rep(i, siz(adj[nod])) if (!vis[adj[nod][i]])
		dfs(adj[nod][i]);
	pth.push_back(nod);
	cb += b[nod];
	cw += cst[nod];
}

int main() {
	cin >> n >> m >> w;
	rep(i, n)
		scanf("%d", &cst[i + 1]);
	rep(i, n)
		scanf("%d", &b[i + 1]);
	int u, v;
	rep(i, m) {
		scanf("%d%d", &u, &v);
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	Rep(i, 1, n + 1) if (!vis[i]) {
		dfs(i);
		cc.push_back(pth);
		ccb.push_back(cb);
		ccw.push_back(cw);
		cb = cw = 0, pth.clear();
	}
	rep(i, siz(ccb) + 1) {
		rep(j, w + 1) {
			if (!i || !j)
				dp[i][j] = 0;
			else {
				if (ccw[i - 1] <= j)
					dp[i][j] = max(ccb[i - 1] + dp[i - 1][j - ccw[i - 1]], dp[i - 1][j]);
				else
					dp[i][j] = dp[i - 1][j];
				rep(k, siz(cc[i - 1])) if (cst[cc[i - 1][k]] <= j)
					dp[i][j] = max(dp[i][j], max(b[cc[i - 1][k]] + dp[i - 1][j - cst[cc[i - 1][k]]], dp[i - 1][j]));
			}
		}
	}
	cout << dp[siz(ccb)][w] << endl;
	return 0;
}