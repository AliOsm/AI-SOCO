#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define clr(a,b) memset(a,b,sizeof(a))
#define all(v) ((v).begin()),((v).end())
#define read(v) freopen(v, "r", stdin)
#define write(v) freopen(v, "wt", stdout)
#define fastIO cout << fixed << setprecision(0), ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)
double const EPS = 1e-9, PI = acos(-1);
const int N = 2e5 + 9, M = 2e3 + 9, OO = 1e9 + 7, MOD = 1e9 + 7;
const ll inf = 1e18;

int main() {
  fastIO;
//  read("input.in");
//  write("input.in");
  ll n, p;
  cin >> n >> p;
  for (int i = 1; i < 32; ++i) {
    // if u will use i numbers so will be (i*p) remove them then the number will be in powers of 2 only
    ll rem = n - (i * p);
    if(rem <= 0)
      continue;
    ll l = __builtin_popcount(rem);
    ll r = 0;
    for (int i = 0; i < 32; ++i) {
      if(rem & (1 << i))
        r += (i + 1);
    }
    // Note 4 + 4 (0100 + 0100) = 8(1000)
    // Note 2 + 2 (0010 + 0010) = 4(0100)
    // so if you want to obtain 8(1000) you can atleast obtain it by 1(number of ones) step or 2(4+4), 3(4+2+2), 4 steps
    // max number of steps will be(8steps) by using number 1 + 1 + 1 + 1 + 1 + 1 + 1
    if(i >= l && i <= r) { // i in range [l, r]
      cout << i;
      return 0;
    }
  }
  cout << -1;
  return 0;
}
