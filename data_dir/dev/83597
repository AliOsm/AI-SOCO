#include <bits/stdc++.h>

using namespace std;

#define fi first
#define se second
#define pf push_front
#define pb push_back
#define mk make_pair
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)
#define sz(x) (int)x.size()

typedef int64_t ll;
typedef long double ld;

const int Z = (int) 5e3 + 1;
const int inf = (int) 1e9 + 111;
const ll llinf = (ll) 1e18 + 5;
const int MOD = (int) 1e9 + 7;

template<class Head, class...Tail>
Head Min(const Head& head, const Tail& ...tail) {
  if constexpr(sizeof...(tail) > 0) {
    int res = Min(tail...);
    if (res > head) {
      res = head;
    }
    return res;
  } else {
    return head;
  }
}

template<class Head, class...Tail>
Head Max(const Head& head, const Tail& ...tail) {
  if constexpr(sizeof...(tail) > 0) {
    int res = Max(tail...);
    if (res < head) {
      res = head;
    }
    return res;
  } else {
    return head;
  }
}

template<class T1, class... Args>
bool UpdateMin(T1& a, Args&& ... args) {
  auto value = Min(forward<Args>(args)...);
  if (a > value) {
    a = value;
    return true;
  }
  return false;
}

template<class T1, class... Args>
bool UpdateMax(T1& a, Args&& ... args) {
  auto value = Max(forward<Args>(args)...);
  if (a < value) {
    a = value;
    return true;
  }
  return false;
}

template<class T>
ostream& operator<<(ostream& out, const vector<T>& a) {
  for (const auto& it : a) {
    out << it << " ";
  }
  out << "\n";
  return out;
}

template<class T>
istream& operator>>(istream& in, vector<T>& a) {
  for (auto& it : a) {
    in >> it;
  }
  return in;
}

template<class T1, class T2>
ostream& operator<<(ostream& out, const pair<T1, T2>& p) {
  out << '(' << p.first << ", " << p.second << ')';
  return out;
}

class Debug {
 public:
  template<class Container>
  static void Print(const Container& s, const string& message = {}) {
    Print(s, '{', '}', message);
  }

  template<class T>
  static void Print(const vector<T>& a, const string& message = {}) {
    Print(a, '[', ']', message);
  }

 private:
  template<class Container>
  static void Print(const Container& s, char begin_c,
                    char end_c, const string& message) {
    cerr << begin_c;
    bool first = true;
    for (const auto& it : s) {
      if (!first) {
        cerr << ", ";
      }
      first = false;
      cerr << it;
    }
    cerr << end_c;
    if (!message.empty()) {
      cerr << " <--- " << message;
    }
    cerr << "\n";
  }
};

class Dsu {
 public:
  explicit Dsu(int n)
      : n_(n)
      , par_(n + 1)
      , val_(n + 1) {
    for (int i = 1; i <= n; ++i) {
      par_[i] = i;
      val_[i] = {i};
    }
  }

  int Find(int x) {
    if (x == par_[x]) return x;
    return par_[x] = Find(par_[x]);
  }

  void Union(int a, int b) {
    a = Find(a);
    b = Find(b);
    if (a != b)
      if (val_[a].size() > val_[b].size()) {
        par_[b] = a;
        for (const auto& it : val_[b]) {
          val_[a].pb(it);
        }
      } else {
        par_[a] = b;
        for (const auto& it : val_[a]) {
          val_[b].pb(it);
        }
      }
  }

  vector<int> GetVal() {
    return val_[Find(1)];
  }

 private:
  int n_;
  vector<int> par_;
  vector<vector<int>> val_;
};

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  mt19937_64 random_generator(228);
  int n;
  cin >> n;
  Dsu dsu(n);
  for (int i = 1; i < n; ++i) {
    int x, y;
    cin >> x >> y;
    dsu.Union(x, y);
  }
  auto x = dsu.GetVal();
  cout << x;

  return 0;
}