#include <bits/stdc++.h>

using namespace std;

typedef long double ld;
typedef long long ll;

#define _ inline
#define f first
#define sec second
#define pb push_back
#define ins insert
#define ers erase
#define mk make_pair
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define rsz resize
//#define int ll
#define forn(i, n) for (register int i(1); i <= n; i++)
#define fore(i, n) for (register int i(0); i < n; i++)

#define right rightt
#define left leftt
#define prev prevv
#define next nextt

const int INF = 1e9 + 10;
const int MOD = 1e9 + 7;
const int P = 239017;
const long long BINF = 1e18 + 10;

const int N = 2e6;
const int h = 2e5 + 10;
ll t[N], f[N];

_ void relax(int v) {
    t[v] = t[2 * v] + t[2 * v + 1];
}

_ void push(int v, int l, int r) {
    int mid = (l + r) / 2, len1 = mid - l + 1, len2 = r - mid;
    t[2 * v] += f[v] * len1;
    t[2 * v + 1] += f[v] * len2;
    f[2 * v] += f[v];
    f[2 * v + 1] += f[v];
    f[v] = 0;
}

_ void upd(int v, int l, int r, int a, int b, int add) {
    if (l > b || r < a) {
        return;
    }
    if (l >= a && r <= b) {
        t[v] += (r - l + 1) * add;
        f[v] += add;
        return;
    }
    push(v, l, r);
    int mid = (l + r) / 2;
    upd(2 * v, l, mid, a, b, add);
    upd(2 * v + 1, mid + 1, r, a, b, add);
    relax(v);
}

ll get(int v, int l, int r, int a, int b) {
    if (l > b || r < a) {
        return 0;
    }
    if (l >= a && r <= b) {
        return t[v];
    }
    push(v, l, r);
    int mid = (l + r) / 2;
    return get(2 * v, l, mid, a, b) + get(2 * v + 1, mid + 1, r, a, b);
}

_ void source() {
    int m, r = 1;
    cin >> m;
    for (int i = 1; i <= m; i++) {
        int type;
        cin >> type;
        if (type == 1) {
            int len, delta;
            cin >> len >> delta;
            upd(1, 1, h, 1, len, delta);
        }
        else if (type == 2) {
            r++;
            int delta;
            cin >> delta;
            upd(1, 1, h, r, r, delta);
        }
        else {
            int delta = get(1, 1, h, r, r);
            upd(1, 1, h, r, r, -delta);
            r--;
        }
        cout << fixed << setprecision(10) << ld(get(1, 1, h, 1, r)) / ld(r) << endl;
    }
}

signed main() {
#ifdef EXTRATERRESTRIAL_
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
    //freopen(TASK".in", "r", stdin);
    //freopen(TASK".out", "w", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    srand(time(0));
    source();
    return 0;
}
