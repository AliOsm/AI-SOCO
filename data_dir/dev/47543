#include <bits/stdc++.h>

using namespace std;

#define fo(i,j,n) for(i=j;i<n;++i)
#define Fo(i,j,n) for(i=n-1;i>=j;--i)
#define foo(i,j,v) fo(i,j,sz(v))
#define Foo(i,j,v) Fo(i,j,sz(v))
#define li(v) v.begin(),v.end()
#define sz(v) ((int)v.size())
#define CLR(a,v) memset((a),(v),sizeof(a))

#define pi (2*acos(0.0))
#define eps (1e-6)

typedef long long Long;

const int imax = 1e9+7;
const Long lmax = 1e18;

vector<int> v1,v2;
vector<pair<int,int> > ans;

struct UnionFind{
    vector<int> parent,size;
    UnionFind(int n){
        int i;
        parent.resize(n);
        size.resize(n);
        for(i = 0; i < n; i++) { parent[i] = i; size[i] = 1; }
    }

    int root(int x){
        if(parent[x] != x) parent[x] = root(parent[x]);
        return parent[x];
    }

    void connect(int x, int y){
        int rx = root(x), ry = root(y);
        if(rx == ry) return;
        if(size[rx] > size[ry])  { parent[ry] = rx; size[rx] += size[ry]; }
        if(size[rx] <= size[ry]) { parent[rx] = ry; size[ry] += size[rx]; }
    }

    int getsize(int x){
        int rx = root(x);
        return size[rx];
    }
};


int calc()
{
    int i,a,b,n,m,k = 0,d; cin >> n >> m >> d;
    v1.resize(m); v2.resize(m); ans.clear();
    fo(i,0,m){ cin >> v1[i] >> v2[i]; v1[i]--; v2[i]--; }

    UnionFind uf(n);
    fo(i,0,m)
    {
        a = v1[i]; b = v2[i];
        if(a == 0 || b == 0)continue;
        if(uf.root(a) == uf.root(b))continue;
        ans.push_back({a,b});
        uf.connect(a,b);
    }
    fo(i,1,n)if(uf.root(i) == i)k++;
    if(k > d)return 0;
    fo(i,0,m)
    {
        a = v1[i]; b = v2[i];
        if(a != 0 && b != 0)continue;
        if(uf.root(a) == uf.root(b))continue;
        ans.push_back({a,b});
        uf.connect(a,b);
        v1[i] = v2[i] = 1;
    }
    k = d - k;
    fo(i,0,m)
    {
        if(k == 0)break;
        a = v1[i]; b = v2[i];
        if(a != 0 && b != 0)continue;
        k--;
        //if(uf.root(a) == uf.root(b))continue;
        ans.push_back({a,b});
        uf.connect(a,b);
        //v1[i] = v2[i] = 1;
    }
    m = ans.size(); v1.resize(m); v2.resize(m);
    foo(i,0,ans)v1[i] = ans[i].first, v2[i] = ans[i].second;
    uf = UnionFind(n); ans.clear();
    fo(i,0,m)
    {
        a = v1[i]; b = v2[i];
        if(a != 0 && b != 0)continue;
        if(uf.root(a) == uf.root(b))continue;
        ans.push_back({a,b});
        uf.connect(a,b);
        d--;
    }
    if(d != 0)return 0;
    fo(i,0,m)
    {
        a = v1[i]; b = v2[i];
        if(uf.root(a) == uf.root(b))continue;
        ans.push_back({a,b});
        uf.connect(a,b);
    }
    if(uf.getsize(0) != n)return 0;
    cout << "YES" << endl;
    foo(i,0,ans)
    {
        cout << ans[i].first + 1 << " " << ans[i].second + 1 << endl;
    }
	return 1;
}

int main()
{
	//ios::sync_with_stdio(false);
    //cin.tie(0);
	#ifdef localhost
	freopen("E://input.txt","r",stdin);
	//freopen("E://output.txt","w",stdout);
	#endif

	if(calc() == 0)cout << "NO" << endl;

	//cout << endl;
	return 0;
}
