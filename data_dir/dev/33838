#include <bits/stdc++.h>
using namespace std;

const int N = 1000 + 7;

char s[N][N];

int lvl[N][N][4], n, m, k;

int dx[] = {+1, -1, 0, 0};
int dy[] = {0, 0, +1, -1};

void dfs(int x, int y, int idx, queue <pair <int, int> > &Q, int t, int l) {
        if(x < 1 || y < 1 || x > n || y > m || s[x][y] == '#' || t > k || lvl[x][y][idx]) return;
        lvl[x][y][idx] = l;
        Q.push({x, y});
        dfs(x + dx[idx], y + dy[idx], idx, Q, t + 1, l);
}

int main() {
        cin >> n >> m >> k;
        for(int i = 1; i <= n; i++) cin >> s[i] + 1;
        int x1, y1, x2, y2; cin >> x1 >> y1 >> x2 >> y2;
        queue <pair <int, int> > Q; Q.push({x1, y1});
        lvl[x1][y1][0] = 1;
        lvl[x1][y1][1] = 1;
        lvl[x1][y1][2] = 1;
        lvl[x1][y1][3] = 1;
        while(!Q.empty()) {
            int x = Q.front().first, y = Q.front().second; Q.pop();
            int mx = 1000000000;
            for(int i = 0; i < 4; i++) if(lvl[x][y][i]) mx = min(mx, lvl[x][y][i]);
            for(int i = 0; i < 4; i++) dfs(x + dx[i], y + dy[i], i, Q, 1, mx + 1);
        }

        for(int i = 1; i <= n; i++) {

        }

        int ans = 1000000000;
        for(int i = 0; i < 4; i++) if(lvl[x2][y2][i]) ans = min(ans, lvl[x2][y2][i]);
        if(ans > n * m) ans = 0;
        cout << ans - 1 << endl;
}
