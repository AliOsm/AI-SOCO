#include <bits/stdc++.h>

using namespace std;

vector <int> m[300000];
int n, a;
long long dp[300000][2], zz[300000];

void dfs(int v)
{
    for (int i = 0; i < m[v].size(); ++i)
        dfs(m[v][i]);
    int kol = 0;
    long long rez = 0;
    vector <long long> PP;
    PP.clear();
    for (int i = 0; i < m[v].size(); ++i)
        if (dp[m[v][i]][0] > dp[m[v][i]][1])
        {
            rez += dp[m[v][i]][0];
            PP.push_back(dp[m[v][i]][1] - dp[m[v][i]][0]);
        }
        else
        {
            ++kol;
            rez += dp[m[v][i]][1];
            PP.push_back(dp[m[v][i]][0] - dp[m[v][i]][1]);
        }
    kol %= 2;
    sort(PP.begin(), PP.end());
    if (kol == 0)
    {
        dp[v][1] = rez + zz[v];
        dp[v][0] = rez;
    }
    else
    {
        dp[v][1] = rez;
        int n = PP.size();
        if (n >= 1)
        {
            dp[v][1] = max(dp[v][1], zz[v] + rez + PP[n - 1]);
            dp[v][0] = max(dp[v][0], rez + PP[n - 1]);
        }
    }

}


int main()
{
    std::ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n;
    for (int i = 1; i <= n; ++i)
    {
        cin >> a >> zz[i];
        if (a == -1)
            continue;
        m[a].push_back(i);
    }
    dfs(1);
    cout << max(dp[1][0], dp[1][1]);
    return 0;
}
