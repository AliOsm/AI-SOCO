#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ordered_set tree<int , null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
using namespace __gnu_pbds;
unordered_map<int , ordered_set> a,b;
void Add(int time , int val){
    a[val].insert(time);
}
void Remove(int time , int val){
    b[val].insert(time);
}
int Count(int time ,int val){
    int l =a[val].order_of_key(*(a[val].upper_bound(time)));
    int r =b[val].order_of_key(*(b[val].upper_bound(time)));
    if (*(a[val].upper_bound(time))<=time)l=a[val].size();
    if (*(b[val].upper_bound(time))<=time)r=b[val].size();
    return (l-r);
}
int main (){
    int n;
    scanf("%d",&n);
    while(n--){
        int op,time,val;
        scanf("%d%d%d",&op,&time,&val);
        if (op == 1){
            Add(time,val);
        }
        else if (op == 2){
            Remove(time , val);
        }
        else {
            printf("%d\n",Count(time,val));
        }



    }


    return 0;
}
