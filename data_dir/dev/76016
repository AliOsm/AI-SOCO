#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define pii pair<int, int>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second

template<typename T>
void read(T& val)
{
    std::string tmp = typeid(val).name();
    if (strcmp(tmp.c_str(), "i") == 0)
        scanf("%d", &val);
    else if (strcmp(tmp.c_str(), "x") == 0)
        scanf("%I64d", &val);
    else if (strcmp(tmp.c_str(), "d") == 0)
        scanf("%lf", &val);
    else if (tmp.length() > 2 && tmp.back() == 'c')
        scanf("%s", val);
    else if (strcmp(tmp.c_str(), "c") == 0)
        scanf("%c", &val);
}

template<typename T, typename... Targs>
void read(T& val, Targs&... Fargs)
{
    read(val);
    read(Fargs...);
}

template<typename T>
void print(T val)
{
    std::string tmp = typeid(val).name();
    if (strcmp(tmp.c_str(), "i") == 0)
        printf("%d", val);
    else if (strcmp(tmp.c_str(), "x") == 0)
        printf("%I64d", val);
    else if (strcmp(tmp.c_str(), "d") == 0)
        printf("%.15f", val);
    else if (strcmp(tmp.c_str(), "c") == 0)
        printf("%c", val);
    else if (tmp.length() > 2 && tmp.back() == 'c')
        printf("%s", val);
}

template<typename T, typename... Targs>
void print(T val, Targs... Fargs)
{
    print(val);
    print(Fargs...);
}

typedef long long ll;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e2 + 5;
const double eps = 1e-9;
using namespace std;
char str[MAXN];
int a[MAXN][MAXN];
bitset<MAXN * 10> dp[MAXN][MAXN];
vector<char> arr;
int n, m, k;

void dfs(int y, int x)
{
    if (x < 0 || x >= m)
        return;
    if (dp[y][x] != 0)
        return;
    if (y == n - 1)
        return;
    dfs(y + 1, x - 1);
    dfs(y + 1, x + 1);
    if (0 <= x - 1)
        dp[y][x] |= dp[y + 1][x - 1] << a[y][x];
    if (x + 1 <= m - 1)
        dp[y][x] |= dp[y + 1][x + 1] << a[y][x];
}

int main()
{
    read(n, m, k);
    for (int i = 0; i < n; i++)
    {
        read(str);
        for (int j = 0; j < m; j++)
            a[i][j] = str[j] - '0';
    }
    for (int i = 0; i < m; i++)
        dp[n - 1][i][a[n - 1][i]] = 1;
    int ans = -1, ind = -1;
    for (int i = 0; i < m; i++)
    {
        dfs(0, i);
        for (int j = 0; j * (k + 1) < MAXN * 10; j++)
            if (dp[0][i][j * (k + 1)] == 1 && ans < j * (k + 1))
                ans = max(ans, j * (k + 1)), ind = i;
    }
    print(ans, "\n");
    if (ans != -1)
    {
        int cur = ans;
        for (int i = 1; i < n; i++)
        {
            cur -= a[i - 1][ind];
            if (ind + 1 <= m - 1 && dp[i][ind + 1][cur] == 1)
                ind = ind + 1, arr.pb('L');
            else
                ind = ind - 1, arr.pb('R');
        }
        print(ind + 1, "\n");
        for (int i = 1; i < n; i++)
        {
            print(arr.back());
            arr.pop_back();
        }
        enl;
    }
    return 0;
}
