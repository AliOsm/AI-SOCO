#include<bits/stdc++.h>
using namespace std;
#define in ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define FI freopen("fegla.in","r",stdin);
#define FO freopen("o.txt","w",stdout);
#define N 262144
#define pii pair<int,int>
#define vi vector<int>
#define ll long long
#define INF 1<<29
//int dx[] = { 1, 0, -1, 0 };
//int dy[] = { 0, 1, 0, -1 }; // 4 Direction
// int dx[] = {1, 1, 0, -1, -1, -1, 0, 1};
// int dy[] = {0, 1, 1, 1, 0, -1, -1, -1};// 8 direction
//int dx[] = { 2,1,-1,-2,-2,-1,1,2 };
//int dy[] = { 1,2,2,1,-1,-2,-2,-1};// Knight Direction
int n;
set<pii>st;
set<pii>::iterator it;
vector<vector<int> >v;
int main()
{
   // FO;
    in;
    cin>>n;
    v.resize(n+1);
    for(int i=0; i<n; i++)
    {
        int a,b;
        cin>>a>>b;
        v[a].push_back(b);
    }
    for(int i=1; i<=n; i++)
    {
        if(v[i].size()!=0)
        {
            st.insert({v[i].back(),i});
        }
    }
    int q;
    cin>>q;
    while(q--)
    {
        int k;
        cin>>k;
        vector<int>v2;
        v2.resize(k);
        vector<pair<int,int> >erased;
        for(int i=0; i<k; i++)
        {
            cin>>v2[i];

            if(v[v2[i]].size())
            {
                it=st.find({v[v2[i]].back(),v2[i]});

                if(it!=st.end())
                {
                    erased.push_back({*it});
                    st.erase(it);
                }
            }
        }
        if(st.size()==0)
        {
            cout<<"0 0"<<endl;
        }
        if(st.size()==1)
        {
            cout<<st.begin()->second<<" "<<v[st.begin()->second].front()<<endl;
        }
        if(st.size()>=2)
        {
            it=st.end();
            it--;
            int a=it->second;
            it--;
            int b=it->first;
            int x=lower_bound(v[a].begin(),v[a].end(),b)-v[a].begin();
            cout<<a<<" "<<v[a][x]<<endl;
        }
        for(int i=0; i<erased.size(); i++)
        {
            st.insert(erased[i]);
        }



    }

}
