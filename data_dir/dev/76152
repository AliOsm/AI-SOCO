//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC opatimize("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0); }

int const maxn = 400*200*200*3;
char c[maxn];
int prv[maxn];
int16_t len[maxn];
int sz = 1;

inline int add(const char addc, const int to) {
    ++sz;
    prv[sz] = to;
    c[sz] = addc;
    len[sz] = 1 + len[to];
    return sz;
}

inline void upd(int& to, const int from, const char ac) {
    if (len[to] >= len[from])
        to = add(ac, from);
}

int main() {
//    freopen("in.txt","r", stdin);
//    cout << fixed << setprecision(15);
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);

    string a,b;
    cin >> a >> b;

    size_t n = a.size();
    size_t m = b.size();
    a.push_back(' ');
    b.push_back(' ');

    int16_t const inf = 1005;
    len[0] = inf;
    vector<vector<int>> dp(n+1, vector<int>(n+m+1, 0));
    dp[0][0] = 1;
    vector<pair<char, int>> step = {{'(', 1},{')', -1}};
    for (int j = 0; j <= m; ++j) {
        vector<vector<int>> ndp(n+1, vector<int>(n+m+1, 0));
        for (int i = 0; i <= n; ++i) {
            for (int t = 0; t <= n + m; ++t) {
                const int from = dp[i][t];
                if (!from)
                    continue;
                for (auto s : step ) {
                    int ni = a[i] == s.first ? i + 1 : i;
                    int nt = t + s.second;
                    if (nt >= 0 && nt <= n+m) {
                        if (nt > t || ni > i)
                            upd(dp[ni][nt], from, s.first);
                        if (b[j] == s.first)
                            upd(ndp[ni][nt], from, s.first);
                    }
                }
            }
        }
        if (j < m)
            dp.swap(ndp);
    }
    int nres = inf;
    string res;
    for (size_t i = 0; i < dp[n].size(); ++i) {
        if (len[dp[n][i]] + i < nres) {
            nres = len[dp[n][i]] + i;
            int cur = dp[n][i];
            res.clear();
            while (cur > 1) {
                res.push_back(c[cur]);
                cur = prv[cur];
            }
            reverse(begin(res), end(res));
            res += string(i, ')');
        }
    }
    cout << res << endl;
}
