#include <cstdio>
#include <memory.h>
#include <cstring>
#include <vector>
#include <deque>
#include <cstdlib>
#include <queue>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <functional>
#include <set>
#include <list>
#include <map>
#include <time.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
#define pp 2
#define BASE 10007LL
using namespace std;

typedef unsigned long long llu;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
const ll MOD = 1e9 + 7;

priority_queue<int, vector<int>, greater<int> > pq;
vector<int> v;

struct node {
	int ha[pp];
	bool operator< (const node &v2) const {
		for (int i = 0; i < pp; i++)
			if (v2.ha[i] != ha[i]) return v2.ha[i] > ha[i];
		return v2.ha[pp - 1] > ha[pp - 1];
	}
};

node vv[1000002];
const int h[pp] = { 1000000009, 1000000021 };
int two[pp][1000002];
int s[1000002];
char bb[100001];
int an = 0, bn = 0, tn;
int as, bs;
int n = 1;

void init() {
	for (int i = 0; i < pp; i++) {
		two[i][0] = 1;
		for (int j = 1; j < n; j++)
			two[i][j] = two[i][j - 1] * BASE % h[i];
	}

	for (int i = 1; i <= n; i++) {
		for (int j = 0; j < pp; j++)
			vv[i].ha[j] = (vv[i - 1].ha[j] + (ll)s[i] * two[j][n - i]) % h[j];
	}
}

// l문자열의 시작점, i문자열의 끝점.
ll get_hash(int l, int i) {
	int mid = i - l + 1;
	node tt;

	for (int j = 0; j < pp; j++)
		tt.ha[j] = ((ll)vv[i].ha[j] - vv[i - mid].ha[j] + h[j]) % h[j] * two[j][i - mid] % h[j];
	return (ll)tt.ha[0] * h[1] + tt.ha[1];
}

int sear(int al, int bl) {
	ll k;
	ll ah;
	ll bh;
	as = bs = 0;

	int now = 1;
	for (int i = 0; i < tn; i++) {
		if (bb[i] == '0') {
			if (as == 0) {
				as = 1;
				ah = get_hash(now, now + al - 1);
			}
			k = get_hash(now, now + al - 1);
			if (k != ah) return 0;
			now += al;
		}
		else {
			if (bs == 0) {
				bs = 1;
				bh = get_hash(now, now + bl - 1);
			}
			k = get_hash(now, now + bl - 1);
			if (k != bh) return 0;
			now += bl;
		}
	}

	if (ah == bh) return 0;
	return 1;
}

// 1-indexed
int main() {
	scanf("%s", bb);
	tn = strlen(bb);

	for (int i = 0; i < tn; i++) {
		if (bb[i] == '0') an++;
		else bn++;
	}

	scanf("\n");
	while (scanf("%c", &s[n]) != EOF) {
		if (s[n] == '\n') {
			s[n] = 0;
			break;
		}
		n++;
	}
	n--;

	init();

	int ans = 0;
	for (int i = 1; i <= n; i++) {
		int j = (n - (ll)i * an) / bn;

		if (i <= 0 || j <= 0 || (i * (ll)an + j * (ll)bn != n)) continue;

		ans += sear(i, j);
	}

	printf("%d", ans);
}