#include <bits/stdc++.h>
#define LL long long
#define VI vector<int>
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define INF 0x3f3f3f3f
#define ULL unsigned long long
#define onbits __builtin_popcountll
using namespace std;
const int MAXN = 100000;
char A[MAXN + 10], B[MAXN + 10];
int P[2][MAXN + 10];
int L[2][MAXN + 10];
int n, m;
int bs(int x, int pos){
	int lo = pos, hi = m - 1, mid;
	while(lo <= hi){
		mid = (lo + hi)/2;
		if(P[1][mid] <= x) lo = mid + 1;
		else hi = mid - 1;
	}
	return lo;
}
int main(){
	scanf("%s %s", A, B);
	n = strlen(A); m = strlen(B);
	int ii = 0, jj = 0;
	memset(P[0], -1, sizeof(P[0]));
	memset(L, 0, sizeof(L));
	for(int i = 0; i < m; i++) P[1][i] = n;
	while(ii < n && jj < m){
		while(ii < n && A[ii] != B[jj]){
			ii++;
		}
		if(ii == n) break;
		P[0][jj] = ii;
		if(jj == 0){
			L[0][jj] = 1;
		}else{
			L[0][jj] = L[0][jj-1] + 1;
		}
		ii++; jj++;
	}
	while(jj < m){
		if(jj == 0){
			L[0][jj] = 0;
			P[0][jj] = -1;
		}else{
			L[0][jj] = L[0][jj-1];
			P[0][jj] = P[0][jj-1];
		}
		jj++;
	}
	ii = n-1; jj = m-1;
	while(ii >= 0 && jj >= 0){
		while(ii >= 0 && A[ii] != B[jj]){
			ii--;
		}
		if(ii < 0) break;
		P[1][jj] = ii;
		if(jj == m - 1){
			L[1][jj] = 1;
		}else{
			L[1][jj] = L[1][jj+1] + 1;
		}
		ii--; jj--;
	}
	while(jj >= 0){
		if(jj == m-1){
			L[1][jj] = 0;
			P[1][jj] = n;
		}else{
			L[1][jj] = L[1][jj+1];
			P[1][jj] = P[1][jj+1];
		}
		jj--;
	}
	int best = -2, sz = 0;
	for(int i = -1; i < m; i++){
		int left = i, right = i + 1;
		int total = 0;
		if(left >= 0) total += L[0][left];
		if(right < m){
			right = bs((i == -1) ? (-1) : (P[0][i]), right);
			if(right < m) total += L[1][right];
		}
		if(total > sz){
			sz = total;
			best = i;
		}
	}
	if(best == -2) printf("-\n");
	else{
		int left = best, right = best + 1;
		if(best >= 0) 
			for(int i = 0; i < L[0][left]; i++) printf("%c", B[i]);
		if(right < m){
			right = bs((left == -1) ? (-1) : (P[0][left]), right);
			right = m - L[1][right];
			for(int i = right; i < m; i++) printf("%c", B[i]);
		}
		printf("\n");
	}	

	return 0;
}