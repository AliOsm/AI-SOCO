#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

typedef long long ll;
using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000005;
const ll INFLL = 2000000005000000002ll;
const ll MOD = 1000000007;

inline ll min(ll a, ll b, ll c){return min(min(a,b),c);}
inline ll min(ll a, ll b, ll c, ll d){return min(min(min(a,b),c),d);}
inline ll max(ll a, ll b, ll c){return max(max(a,b),c);}
inline ll max(ll a, ll b, ll c, ll d){return max(max(max(a,b),c),d);}

// -------------------------------------------------------------------------------------------------------------

ll A[3], B[3];

ll work(int a, int b)
{
    f(i,0,2) B[i] = 0;
    f(i,a,2) B[i]++;
    f(i,0,b) B[i]++;
    ll d = 0;
    f(i,0,2) d = max(d, A[i] - B[i]);
    f(i,0,2) B[i] += d;
    ll ret = 0;
    f(i,0,2) ret += max(B[i] - A[i], 0ll);
    return ret;
}

int main()
{
    cin >> A[0] >> A[1] >> A[2];
    if(A[0] == 0 && A[1] == 0 && A[2] == 1)
    {
        cout << 0;
        return 0;
    }
    if(A[0] == 0 && A[1] == 1 && A[2] == 1)
    {
        cout << 0;
        return 0;
    }
    if(A[0] == 1 && A[1] == 1 && A[2] == 1)
    {
        cout << 0;
        return 0;
    }
    if(A[0] == 1 && A[1] == 0 && A[2] == 0)
    {
        cout << 0;
        return 0;
    }
    if(A[0] == 1 && A[1] == 1 && A[2] == 0)
    {
        cout << 0;
        return 0;
    }
    if(A[0] == 0 && A[1] == 1 && A[2] == 0)
    {
        cout << 0;
        return 0;
    }
    ll ans = INFLL;
    f(i,0,2) f(j,0,2) ans = min(ans, work(i,j));
    cout << ans;
}
