

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <cstdio>

#define ll long long
#define ld long double
#define pb push_back
#define eb emplace_back
#define mp make_pair
#define int long long
using namespace std;

const int INF = 1LL * 1000 * 1000 * 1000 * 1000 * 1000;
const int MOD = 1e9 + 7;

int getH(int n) {
	int l = 0;
	int r = n;
	while (r - l > 1) {
		ll mid = (r + l) >> 1;
		if (mid * (mid + 1) / 2 <= n) l = mid;
		else r = mid;
	}
	return l;
}

int goX[] = { 1, 0, -1, 0 };
int goY[] = { 0, -1, 0, 1 };

bool check(int a, int b, int n) {
	return a >= 0 && a < n && b >= 0 && b < n;
}

void dfs(int x, int y, vector<vector<bool>> & used, vector<vector<int>> & colors, vector<vector<bool>> & q, int c) {
	used[x][y] = true;
	colors[x][y] = c;
	for (int i = 0; i < 4; i++) {
		int a = x + goX[i];
		int b = y + goY[i];
		if (check(a, b, used.size()) && !used[a][b] && q[a][b]) {
			dfs(a, b, used, colors, q, c);
		}
	}
}

void solve() {
	int n;
	cin >> n;
	int startX, startY, endX, endY;
	cin >> startX >> startY >> endX >> endY;
	startX--; startY--;
	endX--; endY--;
	vector<vector<bool>> a(n, vector<bool>(n));
	for (int i = 0; i < n; i++) {
		string s;
		cin >> s;
		for (int j = 0; j < n; j++) {
			a[i][j] = s[j] == '0';
		}
	}

	vector<vector<int>> colors(n, vector<int>(n));
	vector<vector<bool>> used(n, vector<bool>(n));

	dfs(startX, startY, used, colors, a, 1);
	if (colors[startX][startY] == colors[endX][endY]) {
		cout << 0;
		return;
	}
	dfs(endX, endY, used, colors, a, 2);

	

	int ans = INF;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (colors[i][j] != 1) continue;
			for (int x = 0; x < n; x++) {
				for (int y = 0; y < n; y++) {
					if (colors[x][y] == 2) {
						ans = min((x - i) * (x - i) + (y - j) * (y - j), ans);
					}
				}
			}
		}
	}
	cout << ans;
}
signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	solve();
}