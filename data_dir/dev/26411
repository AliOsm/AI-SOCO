#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl

const int maxn = 1e6 + 5;

ll s,x;

map<pair<ll,ll>,ll> dp;

ll f(int i, ll carry) {
  //cout<<i<<" "<<carry<<endl;
  if (i>50) {
    //watch(carry);
    return carry==0LL;
  }
  if (dp.count({i,carry})) return dp[{i,carry}];
  ll sb = (s>>i)&1LL;
  ll xb = (x>>i)&1LL;

  if (sb==0 && xb==0 && carry==0) return dp[{i,carry}]=f(i+1,0)+f(i+1,1); //(0,0) or (1,1)
  if (sb==0 && xb==0 && carry==1) return dp[{i,carry}]=0; //impossible
  
  if (sb==0 && xb==1 && carry==0) return dp[{i,carry}]=0; //impossible

  if (sb==0 && xb==1 && carry==1) return dp[{i,carry}]=2LL*f(i+1,1); //(0,1) or (1,0)
  if (sb==1 && xb==0 && carry==0) return dp[{i,carry}]=0; //impossible

  if (sb==1 && xb==0 && carry==1) return dp[{i,carry}]=f(i+1,0)+f(i+1,1); //(0,0) or (1,1)

  if (sb==1 && xb==1 && carry==0) return dp[{i,carry}]=2LL*f(i+1,0); //(0,1) or (1,0)
  if (sb==1 && xb==1 && carry==1) return dp[{i,carry}]=0; //impossible
}

ll stupid(ll s, ll x) {
  ll res = 0;
  for (ll i=0; i<=1000; i++) {
    for (ll j=0; j<=1000; j++) {
      if (i+j==s && (i^j)==x) res++;
    }
  }
  return res;
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);

  cin>>s>>x;
  ll ans = f(0,0);
  if (s==x) ans -= 2;

  //assert(stupid(s,x) == f(0,0));
  cout<<ans<<endl;
  return 0;
}
// don't forget to read in the input :^)
