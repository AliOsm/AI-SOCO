#include<bits/stdc++.h> 
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define MOD 1000000007
#define INF 2000000000
#define DESPACITO 1000000000000000000
#define MOD1 13311464115101051
#define PI acos(-1);
#define E 998244353
#define pb push_back
#define mp make_pair
#define ll long long

using namespace std;
using namespace __gnu_pbds;

//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;

struct Hashs 
{
	vector<ll> hashs;
	vector<ll> pows;
	ll P;
	ll MD;

	Hashs() {}

	Hashs(string &s, ll P, ll MD) : P(P), MD(MD) 
	{
		int n = s.size();
		pows.resize(n+1, 0);
		hashs.resize(n+1, 0);
		pows[0] = 1;
		for(int i=n-1;i>=0;i--) 
		{
			hashs[i]=(1LL * hashs[i+1] * P + s[i] - 'a' + 1) % MD;
			pows[n-i]=(1LL * pows[n-i-1] * P) % MD;
		}
		pows[n] = (1LL * pows[n-1] * P)%MD;
	}
	ll get_hash(int l, int r) 
	{
		int ans=hashs[l] + MD - (1LL*hashs[r+1]*pows[r-l+1])%MD;
		ans%=MD;
		return ans;
	}
};

int n;
string s;
int dp[10000];
int ans[10000];
unordered_set<ll>vals;
map<ll,string>recover;
Hashs h1;

int solve(int ind)
{
	if(ind>=n)
		return 1;
	if(dp[ind]!=-1)
		return dp[ind];
	dp[ind]=0;
	REP(i,ind,n-1)
	{
		ll val=h1.get_hash(ind,i);
		if(vals.find(val)!=vals.end())
		{
			dp[ind]=solve(i+1);
			if(dp[ind])
			{
				ans[ind]=(i-ind+1);
				return dp[ind];
			}
		}
	}
	return dp[ind];
}

int main()
{
	IOS;
	#ifndef ONLINE_JUDGE
		freopen("input.txt","r",stdin);
		freopen("output.txt","w",stdout);
	#endif
	cin >> n;
	memset(dp,-1,sizeof(dp));
	cin >> s;
	int m;
	cin >> m;
	REP(i,1,m)
	{
		string s1;
		cin >> s1;
		string temp=s1;
		reverse(temp.begin(),temp.end());
		REP(j,0,temp.length()-1)
			temp[j]=tolower(temp[j]);
		ll val =  Hashs(temp,31,MOD).get_hash(0,temp.length()-1);
		vals.insert(val);
		recover[val]=s1;
	}
	h1 = Hashs(s,31,MOD);
	if(solve(0))
	{
		int ind=0;
		while(ind<n)
		{
			ll u=h1.get_hash(ind,ind+ans[ind]-1);
			cout << recover[u] << " ";
			ind+=ans[ind];
		}
	}
}	
