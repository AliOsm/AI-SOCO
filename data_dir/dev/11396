/////////////////////////   _LeMur_
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <ctime>
#include <stack>
#include <string>
#include <cstring>
#include <cassert>
#include <complex>
#include <cstdio>
#include <cmath>
#include <vector>
#include <queue>
#include <map>
#include <set>

using namespace std;

const int N = 2000005;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;
const long long Mx = inf * 1ll * inf;

int n , sz;
long long mas[N];
unordered_map <long long,bool> mp;

long long get_root(long long x){
	long long ina = 1 , inb = 1ll * inf , answ = 0;
	while(ina <= inb){
		long long mid = (ina + inb) / 2;
		if(mid * mid <= x){
			answ = mid;
			ina = mid + 1;
		}
		else
			inb = mid - 1;
	}
	return answ;
}

void add(long long x){
    long long t = get_root(x);
    if(t * t == x)return ;
    long long k = x;
    int l = 1;
    while(k <= Mx / x){
        k *= x;
        l ^= 1;
        if(l && mp[k] == false){
            mas[++sz] = k;
            mp[k] = true;
        }
    }
}

int main(){
    for(long long i=2;i<=1000*1000;i++){
        add(i);
    }
    sort(mas + 1 , mas + sz + 1);
    scanf("%d",&n);
    while(n--){
        long long l , r;
        scanf("%lld%lld",&l,&r);
        long long answ = 0;
        int ina = 1 , inb = sz , id1 = -1;
        while(ina <= inb){
            int mid = (ina + inb) / 2;
            if(mas[mid] >= l){
                id1 = mid;
                inb = mid - 1;
            }
            else
                ina = mid + 1;
        }
        ina = 1;
        inb = sz;
        int id2 = -1;
        while(ina <= inb){
            int mid = (ina + inb) / 2;
            if(mas[mid] <= r){
                id2 = mid;
                ina = mid + 1;
            }
            else
                inb = mid - 1;
        }
        if(id1 != -1 && id2 != -1)
            answ += max(0 , id2 - id1 + 1);
        long long x = get_root(l);
        while(x * x < l) x++;
        long long y = get_root(r);
        answ += max(0ll , y - x + 1);
        printf("%lld\n",answ);
    }
	return 0;
}