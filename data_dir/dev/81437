#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int n, m, Q;
vector<pii> edges[500500];
pair<pii, int> e[500500];
map<pii, vector<int> > q;
set<int> s[500500];
int ans[500500];
int p[500500];
int sz[500500];

int get_parent(int x) {
    if (x == p[x]) return x;
    return p[x] = get_parent(p[x]);
}

int merge(int a, int b) {
    a = get_parent(a);
    b = get_parent(b);
    if (a == b) return -1;
    if (sz[a] > sz[b]) swap(a, b);
    p[a] = b;
    sz[b] += sz[a];
    return b;
}

int P[500500], SZ[500500];

int get_parent1(int x) {
    if (P[x] == x) return x;
    return P[x] = get_parent1(P[x]);
}

bool merge1(int a, int b) {
    a = get_parent1(a);
    b = get_parent1(b);
    if (a == b) return false;
    if (SZ[a] > SZ[b]) swap(a, b);
    P[a] = b;
    SZ[b] += SZ[a];
    return true;
}

bool good(vector<pii> &e) {
    forit (it, e) {
        int x = it->f;
        int y = it->s;
        P[x] = x;
        P[y] = y;
        SZ[x] = 1;
        SZ[y] = 1;
    }
    forit (it, e) {
        int x = it->f;
        int y = it->s;
        if (merge1(x, y)) continue;
        else return false;
    }
    return true;
}

int main(){

    map<int, int> exist;
    scanf("%d%d", &n, &m);
    for (int i = 0; i < m; i++) {
        int x, y, w;
        scanf("%d%d%d", &x, &y, &w);
        x--; y--;
        exist[w] = 1;
        e[i] = mp(mp(x, y), w);
        edges[w].pb(mp(x, y));
    }

    scanf("%d", &Q);
    for (int i = 0; i < Q; i++) {
        int k;
        scanf("%d", &k);
        for (int j = 0; j < k; j++) {
            int ind;
            scanf("%d", &ind);
            ind--;
            s[e[ind].s].insert(i);
            q[mp(e[ind].s, i)].pb(ind);
        }
    }

    for (int i = 0; i < n; i++) {
        p[i] = i;
        sz[i] = 1;
    }
    for (int i = 0; i < Q; i++) ans[i] = 1;

    for (int len = 1; len < 500500; len++) {
        if (!exist[len]) continue;
        forit (it, s[len]) {
            int qind = *it;
            vector<int> &qedges = q[mp(len, qind)];
            vector<pii> can_add;
            forit (it1, qedges) {
                int ind = *it1;
                int x = e[ind].f.f;
                int y = e[ind].f.s;
                x = get_parent(x);
                y = get_parent(y);
                if (x > y) swap(x, y);
                can_add.pb(mp(x, y));
            }
            //forit (it3, can_add) printf("(%d, %d) ", it3->f, it3->s);
            int res = good(can_add);
            //cout << "= " << res << endl;
            if (!res){
                ans[qind] = 0;
            }
        }
        forit (it, edges[len]) {
            merge(it->f, it->s);
        }
    }

    for (int i = 0; i < Q; i++) {
        if (ans[i]) printf("YES\n");
        else printf("NO\n");
    }

    return 0;
}
