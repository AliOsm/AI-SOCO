#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <set>
#include <cmath>
#include <queue>
#include <map>

using namespace std;
const int N = 1000;
const long long md = 1e9 + 7;

struct mat {
    static const int N = 2;
    long long a[N][N];

    mat() {
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                a[i][j] = 0;
            }
        }
    }

    mat operator +(const mat &other) {
        mat ans = mat();
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                ans.a[i][j] = (this -> a[i][j] + other.a[i][j]) % md;
            }
        }
        return ans;
    }

    mat operator *(const mat &other) {
        mat ans = mat();
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                for(int k = 0; k < N; k++) {
                    ans.a[i][j] = (ans.a[i][j] + this -> a[i][k] * other.a[k][j]) % md;
                }
            }
        }
        return ans;
    }
};

mat bin_pow(mat a, long long b) {
    if(!b) {
        mat ans = mat();
        ans.a[0][0] = ans.a[1][1] = 1;
        return ans;
    }

    if(b & 1LL) {
        return a * bin_pow(a, b - 1LL);
    } else {
        mat temp = bin_pow(a, b / 2LL);
        return temp * temp;
    }
}

long long bin_pow(long long a, long long b) {
    if(!b)
        return 1;
    if(b & 1LL) {
        return a * bin_pow(a, b - 1LL) % md;
    } else {
        long long temp = bin_pow(a, b / 2LL);
        return temp * temp % md;
    }
}

int main() {

    mat d = mat();
    d.a[0][1] = 2;
    d.a[1][0] = d.a[1][1] = 1;

    int n;
    scanf("%d", &n);

    long long y = 1;
    long long x = 1;
    long long k = 1;

    for(int i = 0; i < n; i++) {
        long long x;
        scanf("%I64d", &x);

        k *= x % (md - 1LL);
        k %= md - 1LL;
    }

    k -= 1;
    k += md - 1LL;
    k %= md - 1LL;

    y = bin_pow(2LL, k);

    d = bin_pow(d, k);

    cout << d.a[1][0] << "/" << y << "\n";
}
