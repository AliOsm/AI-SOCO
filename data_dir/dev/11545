#include <bits/stdc++.h>
//#define int long long
using namespace std;
#define IOS ios::sync_with_stdio(false) , cin.tie(0) , cout.tie(0)
inline int in(){int32_t x ; scanf("%d",&x) ; return x ; }
inline long long lin(){long long x ; scanf("%lld",&x) ; return x ;}
const int maxn  = 1e6 + 10;
const int mod = 1e9 + 7;
int a[maxn],b[maxn],maxi[maxn];
vector<int> vc[maxn];
struct cmp
{
    inline bool operator ()(const int &a , const int &b) const
    {
        return make_pair(maxi[a],a) > make_pair(maxi[b],b);
    }
};
int l[maxn];
set<int,cmp> st;
bool mark[maxn];
int32_t main()
{
    int n = in() ;
    for (int i = 0 ; i < n ; i ++) a[i] = in() , b[i] = in() , maxi[a[i]] = max(maxi[a[i]],b[i]) , vc[a[i]].push_back(b[i]) , mark[a[i]] = true;
    for (int i = 1 ; i <= n ; i ++)
        if (mark[i])
            st.insert(i);
    int q = in();

    while(q --)
    {
        int k = in();
        for (int _ = 0 ; _ < k ; _ ++)
            l[_] = in() , st.erase(l[_]);
        if (st.empty()) {cout << 0 << " " << 0 << "\n" ; }
        else if (st.size() == 1) {cout << *st.begin() << " " << vc[*st.begin()][0] << "\n" ; }
        else{
        set<int>::iterator it = st.begin();
        int A = *it;
        it ++;
        int B = *it;
        int sz = (int)vc[B].size();
        int upp = upper_bound(vc[A].begin(),vc[A].end(),vc[B][sz-1])-vc[A].begin();
        cout << A << " " << vc[A][upp] << "\n";
        }
        for (int _ = 0 ; _ < k ; _ ++)
            if (maxi[l[_]])
                st.insert(l[_]);

    }
}
