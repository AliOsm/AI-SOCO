/*
    The bigger the rocks
                       the greater the chance 
                                            to find high value tokens!! */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli M=1e8;   
#define INF 100000000
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcount(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctz(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clz(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffs(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,x,y,k,m;
const double pi=3.14159265358979323846;
//unordered_map<pair<ll,lli>,lli> mp;
lli me(lli a,lli b,lli M)
{
    if(b==0)
    return 1;
    else if(b%2==0)
    return me((a*a)%M,b/2,M);
    else
    return (a%M*me((a*a)%M,(b-1)/2,M)%M)%M;
}
lli mI(lli a,lli m)
{
    return me(a,m-2,m);
}
lli tot=0;
vector<int> pf(string s) {
    int n = (int)s.length();
    vector<int> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}
lli dp[3005][3005];
vector<lli> v[3005];
map<lli,lli> vis;
void dfs(lli i,lli cnt,lli pp)
{
    if(cnt==3)
    {
        dp[pp][i]++;
        return;
    }
    vis[i]=1;
    for(int j=0;j<v[i].size();j++)
    {
        if(vis[v[i][j]]==0)
        {
            
            dfs(v[i][j],cnt+1,pp);
            vis[v[i][j]]=0;
        }
    }
}
int main()
{
cin>>n;
lli a[n+1];
lli dp[100005];
lli mk[100005];
lli ml[100005];
mem1(dp,1);
mem1(mk,1);
mem1(ml,1);
set<lli> s[100005];
for(int i=1;i<=n;i++)
cin>>a[i],mk[a[i]]=1,ml[a[i]]=a[i];
lli mx=-1;
vector<lli> v[100005];
for(int i=2;i<=1e5;i++)
{
    for(int j=i;j<=1e5;j+=i)
    {
        v[j].push_back(i);
    }
}
for(int i=1;i<=n;i++)
{
    for(int j=0;j<v[a[i]].size();j++)
    {
            s[v[a[i]][j]].insert(a[i]);
    }
}
for(int i=1;i<=n;i++)
{
    for(int j=0;j<v[a[i]].size();j++)
    {
        lli dd=v[a[i]][j];
            auto it=s[dd].lower_bound(a[i]);
            if(it!=s[dd].begin())
            {
                it--;
                dp[a[i]]=max(dp[a[i]],dp[*it]+1);
            }
    }
    //cout<<a[i]<<" "<<dp[a[i]]<<endl;
    mx=max(mx,dp[a[i]]);
}
cout<<mx;
}