#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<ll> vll;
typedef pair<int, int> pii;
typedef vector<string> vs;
typedef vector<bool> vb;
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vector<int> > vvi;
typedef vector<pii> vii;
typedef vector<vector<pii> > vvii;
typedef long double ld;
typedef map<int, int> mapii;
typedef map<string, int> mapsi;

#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pi  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-8)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}

const int N = 1e5 + 5;
int n, m, col[N], cnt, red, black, id, sz[N];
vvi node;
bool visited[N];

vii alwan;

void dfs(int v, int c)
{
	sz[id]++;
	visited[v] = true;
	col[v] = c;
	if (!c)
		red++;
	else
		black++;
	for (auto i : node[v])
	{
		if (!visited[i])
			dfs(i, !c);
		else if (visited[i] && (col[i] == col[v]))
			cnt++;
	}
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> n >> m;
	node = vvi(n + 1);
	while (m--)
	{
		int u, v;
		cin >> u >> v;
		node[u].push_back(v);
		node[v].push_back(u);
	}

	bool flag = true;
	erep(i, 1, n)
		if (sz(node[i]))
			flag = false;
	if (flag)
	{
		ll res = n * 1ll * (n - 1) * (n - 2) / 6;
		return cout << 3 << " " << res, 0;
	}

	erep(i, 1, n)
		if (!visited[i])
		{
			red = black = 0;
			dfs(i, 0);
			alwan.push_back(
			{ red, black });
			id++;
		}

	if (cnt)
		return cout << 0 << " " << cnt / 2, 0;

	int mx = 0;
	rep(i, 0, id)
		mx = max(mx, sz[i]);

	if (mx == 2)
	{
		cout << 2 << " ";
		ll res = 0, a = 0, b = 0;

		rep(i, 0, id)
		{
			a += (sz[i] == 2);
			b += (sz[i] == 1);
		}
		res = a * b + (a - 1) * a * 2;
		cout << res << endl;
		return 0;
	}

	cout << 1 << " ";

	ll sum = 0;
	rep(i, 0, id)
	{
		if (sz[i] >= 3)
		{
			ll x = alwan[i].first, y = alwan[i].second;
			x--, y--;
			x = (x * (x + 1)) / 2;
			y = (y * (y + 1)) / 2;
			sum = sum + x + y;
		}
	}
	cout << sum << endl;

	return 0;
}
