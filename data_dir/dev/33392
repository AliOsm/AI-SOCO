#include <iostream>
#include <cstdio>
#include <string>
#include <queue>
#include <cassert>
#include <cmath>
#include <tuple>
#include <set>

using namespace std;
const int N = 1000000;

long long a[N], n, k, d;
set<tuple<long long, long long, int> > q;

void read() {
    cin >> n >> k >> d;
    for(int i = 0; i < n; i++) {
        cin >> a[i];
        q.insert(make_tuple(abs(a[i]), a[i], i));
    }
}

int kol_() {
    long long ans = 0;
    for(int i = 0; i < n; i++) {
        ans += a[i] < 0;
    }
    return ans;
}

void step() {
    tuple<long long, long long, int> temp = *(q.begin());
    q.erase(q.begin());

    q.insert(make_tuple(get<0>(temp) + d, get<1>(temp) + (get<1>(temp) >= 0 ? +d : -d), get<2>(temp)));
}

int main() {
    ios::sync_with_stdio(false);
    read();

    int _ = kol_() % 2;

    if(!_) {
        tuple<long long, long long, int> temp = *(q.begin());
        q.erase(q.begin());
        long long last = get<1>(temp);
        while(k) {
            get<1>(temp) += ((get<1>(temp) >= 0) ? -d : +d);
            k--;
//            cout << get<1>(temp) << "\n";
            if((get<1>(temp) < 0 && last >= 0) || (get<1>(temp) >= 0 && last < 0))
                break;
        }
        q.insert(make_tuple(abs(get<1>(temp)), get<1>(temp), get<2>(temp)));
    }
    while(k) {
        step();
        k--;
    }

    while(!q.empty()) {
        a[get<2>(*(q.begin()))] = get<1>(*(q.begin()));
        q.erase(q.begin());
    }
    for(int i = 0; i < n; i++) {
        cout << a[i] << " ";
    }

    return 0;
}
