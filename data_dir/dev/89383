#include <iostream>
#include <fstream>
#include <cstdio>
#include <climits>
#include <vector>
#include <map>
#include <list>
#include <deque>
#include <stack>
#include <set>
#include <string>
#include <cstring>
#include <algorithm>
#include <bitset>
#include <cmath>

using namespace std;

#define LL long long

typedef struct parti
{
	int items[3];
};

int main()
{
	int n,t;
	cin >> n;
	map<int, int> vals;
	for(int i = 0 ; i < n ; i++)
	{
		cin >> t;
		vals[t]++;
	}
	bool ans = true;
	vector<parti> partitions;
	for(int i = 0; i < n/3 && ans; i++)
	{
		bool possi = false;
		int j = 1;
		while(j++ <= 7)
		{
			if(vals[j-1]>0)
			{
				int k = 2;
				while((j-1)*k ++<= 7)
				{
					if(vals[(j-1)*(k-1)] > 0)
					{
						int l = 2;
						while(((j-1)*(k-1))*l++ <= 7)
						{
							if(vals[(j-1)*(k-1)*(l-1)] > 0)
							{
								parti p;
								p.items[0] = j-1;
								p.items[1] = (j-1)*(k-1);
								p.items[2] = (j-1)*(k-1)*(l-1);

								vals[j-1]--;
								vals[(j-1)*(k-1)]--;
								vals[(j-1)*(k-1)*(l-1)]--;

								possi = true;
								partitions.push_back(p);
								goto runhere;
							}
						}
					}
				}
			}
		}
		runhere:
		if(!possi)
			ans = false;
	}
	if (ans)
		for(int i = 0; i < partitions.size(); i++)
			cout << partitions[i].items[0] << " " << partitions[i].items[1] << " " << partitions[i].items[2] << endl;
	else
		cout << -1 << endl;
	return 0;
}