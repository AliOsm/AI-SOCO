
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef double dbl;

typedef complex<dbl> point;
#define EPS 1e-9
#define X real()
#define Y imag()
#define vec(a,b) ((b)-(a))

#define length(v) ((dbl)hypot((v).Y,(v).X))
#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())




dbl pointLineDist(const point& a, const point& b, const point& p) {
        // handle degenrate case: (a,b) is point

        return fabs(cross(vec(a,b),vec(a,p)) / length(vec(a,b)));
}

dbl pointSegmentDist(const point& a, const point& b, const point& p) {
        if (dot(vec(a,b),vec(a,p)) < EPS)
                return length(vec(a,p));
        if (dot(vec(b,a),vec(b,p)) < EPS)
                return length(vec(b,p));
        return pointLineDist(a, b, p);
}


int n;
point c;
vector<point> p;
dbl x,y;


int main(){

    scanf("%d",&n);
    scanf("%lf%lf",&x,&y);
    c = point(x,y);
    for(int i = 0; i < n ; i ++){
        scanf("%lf%lf",&x,&y);
        p.push_back(point(x,y));
    }
    dbl R = 0,r = INFINITY;
    for(int i = 0 ; i < n ; i ++){
        R = max(R,length(vec(c,p[i])));
        int j = (i+1)%n;
        r = min(r,pointSegmentDist(p[i],p[j],c));
    }
    dbl pi = acos(-1);
    dbl a = r*r*pi;
    dbl A = R*R*pi;
    dbl ans = A - a;
    printf("%.15f\n",ans);



    return 0;
}
