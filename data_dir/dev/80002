#pragma comment (linker, "/STACK:256000000")
 
#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <memory.h>
#include <sstream>
#include <cassert>
#include <ctime>
#include <complex>
//#include <random>
 
using namespace std;
 
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<pii, pii> piiii;
typedef pair<int64, int> pli;
typedef pair<int, char> pic; 

#define pb push_back
#define sq(x) ((x)*(x))
#define cube(x) (((x)*(x))*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
#define rand32() (((unsigned int)(rand()) << 16) | (unsigned int)(rand()))
#define rand64() (((unsigned int64)(rand32()) << 16) | (unsigned int64)(rand32()))
#define bit(mask, b) ((mask >> b) & 1)
#define biton(mask, bit) (mask | (((uint64)(1)) << bit))
#define bitoff(mask, bit) (mask & (~(((uint64)(1)) << bit)))
#define bitputon(mask, bit) (mask |= (((uint64)(1)) << bit))
#define bitputoff(mask, bit) (mask &= (~(((uint64)(1)) << bit)))
#define FAIL() (*((int*)(0)))++
#define INF ((int)(1e9) + 1337)
#define EPS (1e-9)
#define y1 yy1
#define y0 yy0
#define j0 jj0

const long double PI = acosl((long double)-1.0);
const int64 LINF = ((1ull << 63) - 1ull);
const int MOD = 1000000007;

const int MAXN = 100005;

int64 mul(int64 a, int64 b, int64 MOD)
{
	return a * b % MOD;
}

int64 add(int64 a, int64 b, int64 MOD)
{
	int res = a + b;
	if (res >= MOD)
	{
		res -= MOD;
	}
	return res;
}

int64 sub(int64 a, int64 b, int64 MOD)
{
	int res = a - b;
	if (res < 0)
	{
		res += MOD;
	}
	return res;
}

struct matrix
{
	int64 a[2][2];

	matrix operator * (const matrix &m) const
	{
		matrix res;
		memset(res.a, 0, sizeof(res.a));
		for (int i = 0; i < 2; i++)
		{
			for (int j = 0; j < 2; j++)
			{
				for (int h = 0; h < 2; h++)
				{
					res.a[i][j] = add(res.a[i][j], mul(a[i][h], m.a[h][j], MOD), MOD);
				}
			}
		}
		return res;
	}

	matrix get_power(int64 pw)
	{
		matrix res;
		memset(res.a, 0, sizeof(res.a));
		res.a[0][0] = res.a[1][1] = 1LL;
		matrix a = *this;
		while (pw)
		{
			if (pw & 1)
			{
				res = res * a;
			}
			pw >>= 1;
			a = a * a;
		}
		return res;
	}
};

int64 a, b, x, n;
matrix m;

void solve()
{
	scanf ("%I64d%I64d%I64d%I64d", &a, &b, &n, &x);
	m.a[0][0] = a;
	m.a[0][1] = b;
	m.a[1][0] = 0;
	m.a[1][1] = 1;
	m = m.get_power(n);
	int64 res = add(mul(m.a[0][0], x, MOD), m.a[0][1], MOD);
	printf("%I64d\n", res);
}

void precalc()
{
	
}

int main()
{
    //ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(TASK ".in", "rt", stdin); freopen(TASK ".out", "wt", stdout);
#endif
    srand(25);

	precalc();
	int tests = 1;
	
	//scanf ("%d", &tests);
	for (int i = 1; i <= tests; i++)
	{
		solve();
	}
	
    return 0;
}