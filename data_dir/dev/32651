#include <bits/stdc++.h>

using namespace std;

#define MAX 200005
#define ll long long
#define INF 2000000000

vector<pair<int, int> > v;
vector<int> st;
vector<int> ed;
int n;
ll money;

pair<ll, ll> cost(int x)
{
    ll ret = 0;
    priority_queue<int, vector<int>, greater<int> > pq;
    int cntLess = 0, cntGreater = 0;
    int contain = 0;
    for(int i=0; i<v.size(); i++){
        int l = v[i].first, r = v[i].second;
        if(r < x){
            ret += 1LL* l;
            cntLess++;
        }
        else if(l > x){
            ret += 1LL* l;
            cntGreater++;
        }
        else {
            pq.push(l);
            contain++;
        }
    }
    //cout << cntLess << " " << cntGreater << " " << contain << endl;
    ll needLeft = max(0, n/2-cntLess);
    ll needRight = max(0, n/2-cntGreater);
    if(needLeft > contain) return make_pair(-1, 0);
    contain -= needLeft;
    if(needRight > contain) return make_pair(-1, 1);
    contain -= needRight;
    if(contain != 1){
        if(cntLess > cntGreater) return make_pair(-1, 1);
        else return make_pair(-1, 0);
    }
    for(int i=1; i<=needLeft; i++){
        ret += 1LL*pq.top();
        pq.pop();
    }
    ret += needRight*1LL*x;
    ret += 1LL*x;
    return make_pair(ret, 2);
}

int main()
{
    //freopen("in.txt", "r", stdin);
    int cases;
    scanf("%d", &cases);
    while(cases--){
        scanf("%d %lld", &n, &money);
        int mins = INF, maxs = 0;
        for(int i=0; i<n; i++){
            int l, r;
            scanf("%d %d", &l,&r);
            v.push_back(make_pair(l, r));
            st.push_back(l);
            ed.push_back(r);
            mins = min(mins, l);
            maxs = max(maxs, r);
        }
        sort(st.begin(), st.end());
        sort(ed.begin(), ed.end());
        ll low = mins, high = maxs, best = -1;
        while(low <= high){
            int mid = (low+high)/2;
            pair<ll, ll> P = cost(mid);
            //cout << mid << " " << P.first << " " << P.second << " " << money << endl;
            if(P.first == -1){
                if(P.second == 0) low = mid+1;
                else high = mid-1;
                continue;
            }
            ll nows = P.first;
            if(nows <= money){
                best = mid;
                low = mid+1;
            }
            else {
                high = mid-1;
            }
        }
        cout << best << endl;
        v.clear();
        st.clear();
        ed.clear();
    }
}