
/**
* @author khokharnikunj8
**/

#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#pragma GCC target("avx,tune=native")

#include <bits/stdc++.h>


using namespace std;
#define ll long long
#define endl "\n"
#define si(x) scanf("%d",&x);
#define pi(x) printf("%d",x);
#define sl(x) scanf("%lld",&x);
#define pl(x) printf("%lld",x);
#define len(x) (sizeof(x)/sizeof(x[0]))
#define init(ar, x) for(int iii=0;iii<x;iii++)ar[iii]=0;
#define pb push_back


class CodeHash {
public:
    string precise(double number, int prec) {
        stringstream ss;
        ss << fixed << setprecision(prec) << number;
        return ss.str();
    }
};


class ScanReader {

private:
    FILE *stream;
    char buffer[1 << 11];
    bool is_digit[1 << 8];
    int index, total;


    int scan() {
        if (index >= total) {
            index = 0;
            total = fread(buffer, 1, 1 << 11, stream);
            if (total <= 0)return -1;
        }
        return buffer[index++];
    }

    bool iswhitespace(int n) {
        if (n == ' ' || n == '\n' || n == '\t' || n == '\r' || n == -1)return true;
        return false;
    }

public:
    ScanReader(FILE *stream) {
        this->stream = stream;
        index = total = 0;
        for (int i = 0; i < 1 << 8; i++)is_digit[i] = isdigit(i);
    }

    int scanInt() {
        int integer = 0, temp = scan();
        while (iswhitespace(temp))temp = scan();
        int neg = 1;
        if (temp == '-')neg *= -1, temp = scan();
        while (!iswhitespace(temp))if (is_digit[temp])integer *= 10, integer += (temp - '0'), temp = scan();
        return neg * integer;
    }

    long long scanLong() {
        long long integer = 0;
        int temp = scan();
        while (iswhitespace(temp))temp = scan();
        int neg = 1;
        if (temp == '-')neg *= -1, temp = scan();
        while (!iswhitespace(temp))if (is_digit[temp])integer *= 10, integer += (temp - '0'), temp = scan();
        return neg * integer;
    }

    string scanString() {
        string ss = "";
        int temp = scan();
        while (iswhitespace(temp))temp = scan();
        while (!iswhitespace(temp))ss += temp, temp = scan();
        return ss;
    }

    double scanDouble() {
        int c = scan();
        while (iswhitespace(c)) c = scan();
        int sgn = 1;
        if (c == '-')sgn = -1, c = scan();
        double res = 0;
        while (!iswhitespace(c) && c != '.') {
            if (c == 'e' || c == 'E')return res * pow(10, scanInt());
            res *= 10;
            res += c - '0';
            c = scan();
        }
        if (c == '.') {
            c = scan();
            double m = 1;
            while (!iswhitespace(c)) {
                if (c == 'e' || c == 'E') {
                    return res * pow(10, scanInt());
                }
                m /= 10;
                res += (c - '0') * m;
                c = scan();
            }
        }
        return res * sgn;
    }
};

class PrintWriter {
private:
    FILE *stream;
    static const int BUFFER_SIZE = (1 << 11) - 1;
    static const int MAX_OUT_SIZE = 23;
    int size;
    char buffer[BUFFER_SIZE];

    void write(long long v) {
        if (v < 0)buffer[size++] = '-', v *= -1;
        if (v < 10)
            buffer[size++] = v + 48;
        else {
            write(v / 10);
            buffer[size++] = v % 10 + 48;
        }
    }

public:
    PrintWriter(FILE *stream) {
        this->size = 0;
        this->stream = stream;
    }

    void close() {
        if (size)
            fwrite(buffer, 1, size, stream);
    }

    void println(long long s) {
        if ((size ^ BUFFER_SIZE) < MAX_OUT_SIZE) {
            fwrite(buffer, 1, size, stream);
            size = 0;
        }
        write(s);
        buffer[size++] = '\n';
    }

    void print(long long s) {
        if ((size ^ BUFFER_SIZE) < MAX_OUT_SIZE) {
            fwrite(buffer, 1, size, stream);
            size = 0;
        }
        write(s);
        buffer[size++] = ' ';
    }

    void println(string s) {
        if ((size ^ BUFFER_SIZE) < MAX_OUT_SIZE) {
            fwrite(buffer, 1, size, stream);
            size = 0;
        }
        for (int i = 0; i < s.length(); i++) {
            buffer[size++] = s[i];
            if ((size ^ BUFFER_SIZE) < MAX_OUT_SIZE) {
                fwrite(buffer, 1, size, stream);
                size = 0;
            }
        }
        buffer[size++] = '\n';
    }

    void print(string s) {
        if ((size ^ BUFFER_SIZE) < MAX_OUT_SIZE) {
            fwrite(buffer, 1, size, stream);
            size = 0;
        }
        for (int i = 0; i < s.length(); i++) {
            buffer[size++] = s[i];
            if ((size ^ BUFFER_SIZE) < MAX_OUT_SIZE) {
                fwrite(buffer, 1, size, stream);
                size = 0;
            }
        }
        buffer[size++] = ' ';
    }
};


//FILE *fi = fopen("C:\\Users\\khokharnikunj8\\CLionProjects\\CM\\in.txt", "r+");
//FILE *fo = fopen("C:\\Users\\khokharnikunj8\\CLionProjects\\CM\\out.txt", "w+");
FILE *fi = stdin;
FILE *fo = stdout;
ScanReader *in = new ScanReader(fi);
PrintWriter *out = new PrintWriter(fo);
CodeHash *ch = new CodeHash();

class SegmentTreeMAX {
public:
    int *tree;
    int n;

    SegmentTreeMAX(int n) {
        this->n = n;
        tree = new int[4 * n];
        for (int i = 0; i < 4 * n; i++)tree[i] = 0;
    }

    int query(int l, int r) {
        return queryI(1, 0, n - 1, l, r);
    }

    void update(int index, int value) {
        updateI(1, 0, n - 1, index, value);
    }

    void build(int *a) {
        buildI(1, 0, n - 1, a);
    }

private:
    void buildI(int nd, int st, int ed, int *a) {
        if (st == ed) {
            tree[nd] = a[st];
        } else {
            int md = (st + ed) / 2;
            buildI(nd << 1, st, md, a);
            buildI((nd << 1) | 1, md + 1, ed, a);
            tree[nd] = max(tree[nd << 1], tree[(nd << 1) | 1]);
        }
    }

    int queryI(int nd, int st, int ed, int l, int r) {
        if (r < st || l > ed)return INT_MIN;
        if (l <= st && ed <= r)return tree[nd];
        int md = (st + ed) / 2;
        int q1 = queryI(nd << 1, st, md, l, r);
        int q2 = queryI((nd << 1) | 1, md + 1, ed, l, r);
        return max(q1, q2);
    }

    void updateI(int nd, int st, int ed, int index, int value) {
        if (index < st || index > ed)return;
        if (st == index && index == ed) {
            tree[nd] = value;
            return;
        }
        int md = (st + ed) / 2;
        if (index <= md)updateI(nd << 1, st, md, index, value);
        else updateI((nd << 1) | 1, md + 1, ed, index, value);
        tree[nd] = max(tree[nd << 1], tree[(nd << 1) | 1]);

    }
};

class SegmentTreeMIN {
public:
    int *tree;
    int n;

    SegmentTreeMIN(int n) {
        this->n = n;
        tree = new int[4 * n];
        for (int i = 0; i < 4 * n; i++)tree[i] = 0;
    }

    int query(int l, int r) {
        return queryI(1, 0, n - 1, l, r);
    }

    void update(int index, int value) {
        updateI(1, 0, n - 1, index, value);
    }

    void build(int *a) {
        buildI(1, 0, n - 1, a);
    }

private:
    void buildI(int nd, int st, int ed, int *a) {
        if (st == ed) {
            tree[nd] = a[st];
        } else {
            int md = (st + ed) / 2;
            buildI(nd << 1, st, md, a);
            buildI((nd << 1) | 1, md + 1, ed, a);
            tree[nd] = min(tree[nd << 1], tree[(nd << 1) | 1]);
        }
    }

    int queryI(int nd, int st, int ed, int l, int r) {
        if (r < st || l > ed)return INT_MAX;
        if (l <= st && ed <= r)return tree[nd];
        int md = (st + ed) / 2;
        int q1 = queryI(nd << 1, st, md, l, r);
        int q2 = queryI((nd << 1) | 1, md + 1, ed, l, r);
        return min(q1, q2);
    }

    void updateI(int nd, int st, int ed, int index, int value) {
        if (index < st || index > ed)return;
        if (st == index && index == ed) {
            tree[nd] = value;
            return;
        }
        int md = (st + ed) / 2;
        if (index <= md)updateI(nd << 1, st, md, index, value);
        else updateI((nd << 1) | 1, md + 1, ed, index, value);
        tree[nd] = min(tree[nd << 1], tree[(nd << 1) | 1]);

    }
};


int main() {
    int n = in->scanInt();
    int ar1[n];
    int ar2[n];
    SegmentTreeMAX *sgmax = new SegmentTreeMAX(n);
    SegmentTreeMIN *sgmin = new SegmentTreeMIN(n);
    for (int i = 0; i < n; i++) {
        ar1[i] = in->scanInt();
        ar2[i] = in->scanInt();
    }
    sgmax->build(ar1);
    sgmin->build(ar2);
    int ans = 0;
    for (int i = 0; i < n; i++) {
        sgmax->update(i, INT_MIN);
        sgmin->update(i, INT_MAX);
        ans = max(ans, max(0, sgmin->query(0, n - 1) - sgmax->query(0, n - 1)));
        sgmax->update(i, ar1[i]);
        sgmin->update(i, ar2[i]);
    }
    out->println(ans);
    out->close();
    return 0;
}

