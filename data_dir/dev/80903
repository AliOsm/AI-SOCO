#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define pb push_back

const int N = (int)507;

int n;
ll a[N];
int mod = 998244353;

ll sqr(ll x) {
	ll l = 0;
	ll r = 15 * ((ll)1e8);
	while (r - l > 1) {
		ll mid = (l + r) >> 1;
		if (mid * mid <= x) {
			l = mid;
		} else {
			r = mid;
		}
	}
	return l;
}

ll cbr(ll x) {
	ll l = 0;
	ll r = 13 * ((ll)1e5);
	while (r - l > 1) {
		ll mid = (l + r) >> 1;
		if (mid * mid * mid <= x) {
			l = mid;
		} else {
			r = mid;
		}
	}	
	return l;
}

map < ll, int > mp, mp1;

ll gcd(ll a, ll b) {
	if (b == 0) return a;
	return gcd(b, a % b);
}

ll f(ll x) {
	return x * x;
}

ll del[N];
int asd[N];

main() {
	scanf("%d", &n);
	vector < ll > vec;
	for (int i = 1; i <= n; i++) {
		scanf("%I64d", &a[i]);
		ll sq = sqr(a[i]);
		if (sq * sq == a[i]) {
			ll sq1 = sqr(sq);
			if (sq1 * sq1 == sq) {
				mp[sq1] += 4;
			} else {
				mp[sq] += 2;
			}
		} else {
			ll sq1 = cbr(a[i]);
			if (sq1 * sq1 * sq1 != a[i]) {
				asd[i] = 1;
			} else {
				mp[sq1] += 3;
			}
		}
	}
	for (int i = 1; i <= n; i++) {
		if (!asd[i]) continue;
		for (int j = 1; j <= n; j++) {
			ll gc = gcd(a[i], a[j]);
			if (gc != 1 && gc != a[i]) {
				del[i] = gc;
				break;
			}
		}
		if (del[i] == 0) {
			mp1[a[i]]++;
		}
	}
	ll ans = 1;
	int cnt = -1; 
	for (int i = 1; i <= n; i++) {
		if (!asd[i]) continue;
		if (del[i]) {
			mp[del[i]]++;
			mp[a[i] / del[i]]++;
		} else {
			if (mp1[a[i]] != -1) {
				ans = (ans * (f(mp1[a[i]] + 1) % mod)) % mod;
				mp1[a[i]] = -1;
			}
		}
	}
	for (auto to : mp) {
		ans = ((ans * (to.second + 1)) % mod);
	}
	cout << ans;
}            
