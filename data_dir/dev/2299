/**
 *    +--+--+--++--++--In the name of ALLAH--++--++--+--+--+
 *
 *    author:  skmonir
 *    created: 28-Jul-2018 01:24:50
**/

#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define mod                 1000000007LL
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> inline void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = 2e5 + 7;
const int inf = 1e9 + 7;

int best, en[N];
int n, k, a[N], b[N];

void build() {
    for (int i = n - 1; i > 0; i--) {
        a[i] = max(a[i << 1], a[i << 1 | 1]);
        b[i] = min(b[i << 1], b[i << 1 | 1]);
    }
}

int Max(int l, int r) {
    int res = -inf; r++;
    for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
        if (l & 1) res = max(res, a[l++]);
        if (r & 1) res = max(res, a[--r]);
    }
    return res;
}

int Min(int l, int r) {
    int res = inf; r++;
    for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
        if (l & 1) res = min(res, b[l++]);
        if (r & 1) res = min(res, b[--r]);
    }
    return res;
}

int solve() {
    scanf("%d %d", &n, &k);
    for (int i = 0; i < n; ++i) {
        scanf("%d", a + n + i);
        b[n + i] = a[n + i];
    }

    build();

    for (int i = 0; i < n; ++i) {
        int l = i, r = n - 1, f = i;
        while (l <= r) {
            int mid = l + r >> 1;
            int diff = Max(i, mid) - Min(i, mid);
            if (diff > k) r = mid - 1;
            else f = mid, l = mid + 1;
        }
        en[i] = f;
        umax(best, f - i + 1);
    }

    int seg = 0;
    for (int i = 0; i < n; ++i) {
        if (en[i] - i + 1 == best) ++seg;
    }

    printf("%d %d\n", best, seg);
    for (int i = 0; i < n; ++i) {
        if (en[i] - i + 1 == best) {
            printf("%d %d\n", i + 1, en[i] + 1);
        }
    }

    return 0;
}

int main() {
    int tests = 1, CaseNo = 0; //Int(tests);
    while (tests--) {
        //printf("Case %d: ", ++CaseNo);
        solve();
    }
    return 0;
}