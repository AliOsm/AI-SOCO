// Why am I so dumb? :c
// chrono::system_clock::now().time_since_epoch().count()

//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define mp make_pair

#define all(x) (x).begin(), (x).end()
#define debug(x) cerr << #x << " = " << x << '\n';

#define fi first
#define se second

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;   
template<typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

const int MAXN = 55;
const int INF = (int)1e9;

int dp[MAXN][MAXN][MAXN][MAXN];

int pref[MAXN][MAXN];

char s[MAXN][MAXN];

int n;

int calc(int ax, int ay, int bx, int by) {
    if (bx < ax || by < ay) {
        return 0;
    }
    
    if (pref[bx][by] - pref[ax - 1][by] - pref[bx][ay - 1] + pref[ax - 1][ay - 1] == 0) {
        return 0;
    }
    
    int &ret = dp[ax][ay][bx][by];
    
    if (ret != -1) {
        return ret;
    }
    
    ret = max(by - ay + 1, bx - ax + 1);
    
    for (int i = ax + 1; i <= bx; ++i) {
        ret = min(ret, calc(ax, ay, i - 1, by) + calc(i, ay, bx, by));
        //ret = min(ret, calc(ax, ay, i - 1, by) + max(by - ay + 1, bx - i + 1));
    }
    
    for (int i = ay + 1; i <= by; ++i) {
        ret = min(ret, calc(ax, ay, bx, i - 1) + calc(ax, i, bx, by));
        //ret = min(ret, calc(ax, ay, bx, i - 1) + max(bx - ax + 1, by - i + 1));
    }
    
    return ret;
}

void solve() {
    scanf("%d", &n);
    
    for (int i = 1; i <= n; ++i) {
        scanf("%s", s[i] + 1);
    }
    
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
            pref[i][j] = (s[i][j] == '#');
            pref[i][j] += pref[i - 1][j];
            pref[i][j] += pref[i][j - 1];
            pref[i][j] -= pref[i - 1][j - 1];
        }
    }
    
    for (int ax = 1; ax <= n; ++ax) {
        for (int ay = 1; ay <= n; ++ay) {
            for (int bx = ax; bx <= n; ++bx) {
                for (int by = ay; by <= n; ++by) {
                    dp[ax][ay][bx][by] = -1;
                }
            }
        }
    }
    
    printf("%d\n", calc(1, 1, n, n));
}

int main() {
    int tt = 1;

    while (tt--) {
        solve();
    }

    return 0;
}
