// Aggressive Play

#include<bits/stdc++.h>
#define ll long long
#define F first
#define S second
using namespace std;

void __print(int x) {cerr << x;}
void __print(long x) {cerr << x;}
void __print(long long x) {cerr << x;}
void __print(unsigned x) {cerr << x;}
void __print(unsigned long x) {cerr << x;}
void __print(unsigned long long x) {cerr << x;}
void __print(float x) {cerr << x;}
void __print(double x) {cerr << x;}
void __print(long double x) {cerr << x;}
void __print(char x) {cerr << '\'' << x << '\'';}
void __print(const char *x) {cerr << '\"' << x << '\"';}
void __print(const string &x) {cerr << '\"' << x << '\"';}
void __print(bool x) {cerr << (x ? "true" : "false");}

template<typename T, typename V>
void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}
template<typename T>
void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? "," : ""), __print(i); cerr << "}";}
void _print() {cerr << "]\n";}
template <typename T, typename... V>
void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << ", "; _print(v...);}
#ifndef ONLINE_JUDGE
#define debug(x...) cerr << "[" << #x << "] = ["; _print(x)
#else
#define debug(x...)
#endif

const int N = 3e5 + 5;
int main()
{
    ios_base ::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    ll usb, ps, both;
    cin >> usb >> ps >> both;
    int n;
    cin >> n;
    vector<ll> u, p;
    for(int i = 0; i < n; i++){
        ll x;
        cin >> x;
        string yo;
        cin >> yo;
        if(yo[0] == 'U')
            u.push_back(x);
        else p.push_back(x);
    }
    sort(u.begin(), u.end());
    sort(p.begin(), p.end());
    int uIdx = 0, pIdx = 0;
    ll cost = 0;
    int cnt = 0;
    while(uIdx < (int)u.size() && usb){
        cnt++;
        cost += u[uIdx];
        uIdx++;
        usb--;
    }
    while(pIdx < (int)p.size() && ps){
        cnt++;
        cost += p[pIdx];
        pIdx++;
        ps--;
    }
    while((uIdx < (int)u.size() || pIdx < (int)p.size()) && both){
        ll uVal = (uIdx < (int)u.size() ? u[uIdx] : LLONG_MAX);
        ll pVal = (pIdx < (int)p.size() ? p[pIdx] : LLONG_MAX);
        if(uVal < pVal){
            cost += uVal;
            uIdx++;
        }
        else{
            cost += pVal;
            pIdx++;
        }
        cnt++;
        both--;
    }
    cout << cnt << " " << cost;
return 0;
}
