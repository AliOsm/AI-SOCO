// start of CP 3.0
#include <bits/stdc++.h>

//____By:sirjan13____

#define int long long
#define ld long double
#define mod 1000000007
#define mod1 mod
#define mod2 100000009
#define show(a) for(int i=0;i<a.size();i++) cout<<a[i]<<" ";
#define fi first
#define se second
#define vi vector<int>
#define vs vector<string>
#define vll vector<ll>
#define pb push_back
#define pi pair<int,int>
#define si set<int>
#define sll set<ll>
#define pll pair<ll, ll>
#define sci(x) scanf("%d",&x)
#define scs(x)  scanf("%s", x)
#define scll(x) scanf("%I64d",&x)
#define all(v) v.begin(),v.end()
#define sot(v) sort(v.begin(), v.end())
#define maxheap priority_queue<int>
#define minheap priority_queue<int,vector<int>,greater<int>>
#define mp make_pair
#define fast_io() cin.sync_with_stdio(false);cout.sync_with_stdio(false);
#define PI 3.1415926535
#define long_zero 0ll
#define long_one 1ll
#define ONLINE_JUDGEd 0

inline int sbt(int x){return __builtin_popcountll(x);}

using namespace std;

#define TRACE
#ifdef TRACE
#define deb(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << std::endl;
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define deb(...)
#endif
#define N 300013
int n, k;
int m[N], p[N];
pi dp[N][3];
vector<pi> a;
minheap pq;
int l, r;
int res;

int32_t main() {
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    fast_io()
    int t;
    cin >> t;

    while(t--) {
        while(!pq.empty()) pq.pop();
        a.clear();
        res = 0;
        cin >> n;
        for(int i = 1; i <= n; i++) {
            cin >> m[i] >> p[i];
            a.pb(mp(m[i], p[i]));
        }
        sot(a);
       //  for(int i = 0; i <= n; i++) dp[i][0] = dp[i][1] = dp[i][2] = mp(mod, 0);
       //  dp[1][0] = mp(p[1], 1);
       // // dp[1][1] = mp([1], 1);
       //  dp[1][2] = mp(0, 0); 
       //  for(int i = 2; i <= n; i++) {
       //      int curr_votes = dp[i - 1][0].se;
       //      if(m[i] <= curr_votes) {
       //          dp[i][2] = mp(dp[i - 1][0].fi + p[i], curr_votes + 1);
       //          //dp[i][1] = mp([i], curr_votes + 1);
       //          dp[i][0] = mp(dp[i - 1][0].fi + p[i], curr_votes + 1);
       //      }
       //      else {
       //          //if(!dp[i][0].fi || dp[i-1][0].fi + p[i] < dp[i][0].fi)
       //              dp[i][0] = mp(dp[i - 1][0].fi + p[i], curr_votes + 1);
       //          //dp[i][1] = mp(b[i], curr_votes + 1);
             
       //          dp[i][2] = mp(dp[i - 1][0].fi, curr_votes);
       //      }
       //      curr_votes = dp[i - 1][2].se;
       //      if(m[i] <= curr_votes) {
       //          dp[i][2] = mp(min(dp[i - 1][0].fi, dp[i - 1][2].fi), curr_votes + 1);
       //          //dp[i][1] = mp([i], curr_votes + 1);
       //          dp[i][0] = mp(min(dp[i - 1][0].fi, mod*1ll) + p[i], curr_votes + 1);
       //      }
       //      else {
       //          dp[i][0] = mp(min(dp[i - 1][0].fi, dp[i - 1][2].fi) + p[i], curr_votes + 1);
       //          //dp[i][1] = mp(b[i], curr_votes + 1);
             
       //          dp[i][2] = mp(min(dp[i - 1][2].fi, dp[i - 1][2].fi) + p[i], curr_votes);
       //      }
       //  }
       //  cout << dp[n][0].fi << ' ' << dp[n][2].fi << endl;
       //  //res = 0;
        int aage_se_khareede = 0;
        for(int i = n - 1; i >= 0; i--) {
            int current_vote_cost = a[i].se;
            pq.push(current_vote_cost);
            int sab_khareede = i;
            if(sab_khareede + aage_se_khareede >= a[i].fi) continue;
            res += pq.top();
            pq.pop();
            aage_se_khareede++;
        }
        cout << res << endl;
    }
    return 0;
}