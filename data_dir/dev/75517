#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
#include <map>
#include <iterator>
#include <functional>
#include <set>
#include <stack>
#include <queue>
#include <deque>
#include <fstream>
#include <iomanip>
#include <unordered_map>
#include <unordered_set>
#include <numeric>
#include <cmath>
#include <list>
#include <sstream>
#include <tuple>

#define FOR(i,a,b) for(int i = (a); i < (b); ++i)
#define RFOR(i,b,a) for(int i = (b) - 1; i >= (a); --i)
#define REPEAT(i) FOR(counter1234,0,i)
#define iter(el, arr) for(auto& el : arr)
#define ALL(a) a.begin(), a.end()

#define ld long double
#define ll long long
#define pii pair<int, int>
#define pll pair<ll,ll>
#define MP make_pair
#define MT make_tuple
#define SZ(a) ll((a).size())
#define X first
#define Y second

#define endl '\n'
#define PB push_back
#define has(i, m) (m.find(i) != m.end())

#define vi vector<int>
#define vll vector<ll>
#define vld vector<ld>
#define vch vector<char>
#define vvi vector<vi>
#define vvll vector<vll>
#define vpii vector<pii>
#define vpll vector<pll>
#define vb vector<bool>
#define vvb vector<vb>
#define vs vector<string>
#define pdd pair<ld, ld>
#define vpll vector<pll>
#define vpdd vector<pdd>
#define pq priority_queue
#define mod 1000000007
using namespace std;

const ll INF = 1e18;
const ll MAXN = 100001;

vi g[MAXN];
vch used;
vi added;

void dfs(int v)
{
	added.push_back(v);
	used[v] = 1;
	for (auto i : g[v])
		if (used[i] == 0)
			dfs(i);
}

int main()
{
	ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	//freopen("In.txt", "r", stdin);
	//freopen("In.txt", "w", stdout);
		
	int n;
	cin >> n;
	vll a(n);
	FOR(i, 0, n)
		cin >> a[i];

	vpll b(n);
	FOR(i, 0, n)
		b[i] = MP(a[i], i);
	
	sort(ALL(b));

	vvi ans;

	FOR(i, 0, n)
		if (b[i].Y != i)
			g[b[i].Y].push_back(i), g[i].push_back(b[i].Y);

	used.assign(n + 1, 0);

	FOR(i,0,n)
		if (used[i] == 0)
		{
			added.clear();
			dfs(i);
			ans.push_back(added);
		}

	cout << ans.size() << endl;
	FOR(i, 0, ans.size())
	{
		cout << ans[i].size() << " ";
		FOR(j, 0, ans[i].size())
			cout << ans[i][j] + 1 << " ";
		cout << endl;
	}
	//cin >> n;
	return 0;
}