#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <iomanip>
#include <climits>
#include <limits>
#include <cstdio>
#include <vector>
#include <string>
#include <stack>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define gcd __gcd
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
    #define eprintf(...)
#endif

using namespace std;

const int inf = (int)1e9 + 5757;
const long long Linf = (long long)1e18 + 5757;

template<class T> inline void umax(T &a,T b){if(a<b) a = b;}
template<class T> inline void umin(T &a,T b){if(a>b) a = b;}
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 41;

int sum[N][N];
int e[N][N][N][N];

int main(){

#ifdef KAZAR
    freopen("f.i","r",stdin);
    freopen("f.cik","w",stdout);
    freopen("error","w",stderr);
#endif

    int n = read(), m = read(), q = read();

    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= m; j++){
            char foo;scanf(" %c",&foo);
            sum[i][j] = (foo == '1');
            sum[i][j] += sum[i - 1][j];
            sum[i][j] += sum[i][j - 1];
            sum[i][j] -= sum[i - 1][j - 1];
        }

    for(int x1 = 1; x1 <= n; x1++){
        for(int y1 = 1; y1 <= m; y1++){
            for(int x2 = x1; x2 <= n; x2++){
                for(int y2 = y1; y2 <= m; y2++){
                    if(sum[x2][y2] - sum[x1 - 1][y2] - sum[x2][y1 - 1] + sum[x1 - 1][y1 - 1] == 0){
                        e[x1][y1][x2][y2] = 1;
                        eprintf("%d %d %d %d\n",x1,y1,x2,y2);
                    }
                }
            }
        }
    }
    for(int x1 = 1; x1 <= n; x1++){
        for(int y1 = 1; y1 <= m; y1++){
            for(int x2 = 1; x2 <= n; x2++){
                for(int y2 = 1; y2 <= m; y2++){
                    e[x1][y1][x2][y2] += e[x1 - 1][y1][x2][y2];
                    e[x1][y1][x2][y2] += e[x1][y1 - 1][x2][y2];
                    e[x1][y1][x2][y2] += e[x1][y1][x2 - 1][y2];
                    e[x1][y1][x2][y2] += e[x1][y1][x2][y2 - 1];
                    e[x1][y1][x2][y2] -= e[x1 - 1][y1 - 1][x2][y2];
                    e[x1][y1][x2][y2] -= e[x1 - 1][y1][x2 - 1][y2];
                    e[x1][y1][x2][y2] -= e[x1 - 1][y1][x2][y2 - 1];
                    e[x1][y1][x2][y2] -= e[x1][y1 - 1][x2 - 1][y2];
                    e[x1][y1][x2][y2] -= e[x1][y1 - 1][x2][y2 - 1];
                    e[x1][y1][x2][y2] -= e[x1][y1][x2 - 1][y2 - 1];
                    e[x1][y1][x2][y2] += e[x1 - 1][y1 - 1][x2 - 1][y2];
                    e[x1][y1][x2][y2] += e[x1 - 1][y1 - 1][x2][y2 - 1];
                    e[x1][y1][x2][y2] += e[x1 - 1][y1][x2 - 1][y2 - 1];
                    e[x1][y1][x2][y2] += e[x1][y1 - 1][x2 - 1][y2 - 1];
                    e[x1][y1][x2][y2] -= e[x1 - 1][y1 - 1][x2 - 1][y2 - 1];
                }
            }
        }
    }

    eprintf("%d\n",e[2][2][2][2]);

    while(q--){
        int x1 = read(), y1 = read(), x2 = read(), y2 = read();
        int res = 0;
        res += e[x2][y2][x2][y2];
        res -= e[x1 - 1][y2][x2][y2];
        res -= e[x2][y1 - 1][x2][y2];
        res -= e[x2][y2][x1 - 1][y2];
        res -= e[x2][y2][x2][y1 - 1];
        res += e[x1 - 1][y1 - 1][x2][y2];
        res += e[x1 - 1][y2][x1 - 1][y2];
        res += e[x1 - 1][y2][x2][y1 - 1];
        res += e[x2][y1 - 1][x1 - 1][y2];
        res += e[x2][y1 - 1][x2][y1 - 1];
        res += e[x2][y2][x1 - 1][y1 - 1];
        res -= e[x1 - 1][y1 - 1][x1 - 1][y2];
        res -= e[x1 - 1][y1 - 1][x2][y1 - 1];
        res -= e[x1 - 1][y2][x1 - 1][y1 - 1];
        res -= e[x2][y1 - 1][x1 - 1][y1 - 1];
        res += e[x1 - 1][y1 - 1][x1 - 1][y1 - 1];
        printf("%d\n",res);
    }

    return 0;
}
