#include <algorithm>
#include <iostream>
#include <valarray>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <numeric>
#include <complex>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <ctime>
#include <cmath>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <ext/algorithm>

using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i)
#define error(x) cout << #x << " = " << (x) << endl;
#define all(n) (n).begin(), (n).end()
#define Size(n) ((int)(n).size())
#define mk make_pair
#define pb push_back
#define F first
#define S second
#define X real()
#define Y imag()

typedef long long ll;
typedef pair<ll, ll> pii;
typedef pair<ll, ll> pll;
typedef complex<double> point;
template <class P, class Q> void smin(P &a, Q b) { if (b < a) a = b; } 
template <class P, class Q> void smax(P &a, Q b) { if (b > a) a = b; } 
template <class P, class Q> bool in(const P &a, const Q &b) { return a.find(b) != a.end(); }

const int MAXN = 1000;

int k, vertices = 2, p[32], q[100];
bool g[MAXN][MAXN];

void ae(int x, int y) {
	g[x][y] = g[y][x] = true;
}

int main() {
	cin >> k;
	FOR(i, 0, 32) {
		p[i] = vertices++;
		if (i) {
			int x = vertices++;
			int y = vertices++;
			ae(x, p[i-1]);
			ae(y, p[i-1]);
			ae(x, p[i]);
			ae(y, p[i]);			
		}
	}
	FOR(i, 0, 100) {
		q[i] = vertices++;
		if (i)
			ae(q[i], q[i-1]);
	}
	ae(0, q[0]);
	ae(1, p[0]);
	FOR(i, 0, 32)
		if (k & (1<<i))
			ae(q[99-2*i], p[i]);
	cout << vertices << endl;
	FOR(i, 0, vertices) {
		FOR(j, 0, vertices)
			cout.put(g[i][j]? 'Y': 'N');
		cout << endl;
	}
	return 0; 
}

