#define _CRT_SECURE_NO_WARNINGS
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <fstream>
#include <map>
#include <set>
#include <queue>
#include <memory.h>
#include <memory.h>
#include <time.h>
#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <algorithm>
#include <cstdio>
#include <set>
#include <queue>
#include <cassert>
#include <climits>
#define sz(x) int((x).size())
#define FOR(i,a,b) for(ll(i) = (a); (i) <= (b); ++(i))
#define ROF(i,a,b) for(ll(i) = (a); (i) >= (b); --(i))
#define rep(i,n) for (int(i) = 0; (i) < (n); ++(i))
#define fe(i,a) for (ll(i) = 0; (i) < int((a).size()); ++(i))
#define C(a) memset((a),0,sizeof(a))
#define pb push_back
#define ppb pop_back
#define all(c) (c).begin(), (c).end()
#define sqr(a) (a)*(a)
#define mp(a,b) make_pair((a), (b))
#define X first
#define Y second
#define file freopen("input.txt","r",stdin)
#define file2 freopen("output.txt", "w",stdout)
#define text freopen("input.txt","r",stdin); freopen("output.txt", "w",stdout)
using namespace std;
typedef vector<int> vint;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pii;
#define y1 vamdlsfmvldf
using namespace std;
const int mod = (int)1e9 + 7;
const long double INF = (long double)(1e3);
const int N = 100005;
int fen[N];
void upd(int pos, int val) {
  for ( ; pos <= 100002; pos += pos & -pos)
    fen[pos] += val;
}
int fnd(int pos) {
  int ret = 0;
  for ( ; pos > 0; pos -= pos & -pos)
    ret += fen[pos];
  return ret;
}
int get(int l, int r) {
  return fnd(r) - fnd(l);
}
int get(int i) {
  return fnd(i) - fnd(i - 1);
}
int main() {
  int n, q;
  cin >> n >> q;
  int t, l, r;
  for (int i = 1; i <= n; ++i) upd(i, 1);
  int L = 1, R = n, rev = 0;
  while (q--) {
    scanf("%d%d", &t, &l);
    if (t == 1) {
      int nrev = rev;
      if (l > R - L + 1 - l)
        nrev = rev ^ 1;
      if (rev) {
        l = R - L + 1 - l;
      }
      rev = nrev;
      if (l <= R - L + 1 - l) {
        int pos = L + l;
        for (int i = L + l - 1; i >= L; --i, ++pos) {
          upd(pos, get(i));
          upd(i, -get(i));
        }
        L = L + l;
      } else {
        int pos = L + l - 1;
        for (int i = L + l; i <= R; ++i, --pos) {
          upd(pos, get(i));
          upd(i, -get(i));
        }
        R = L + l - 1;
      }
    } else {
      scanf("%d", &r);
      if (rev) {
        l = R - L + 1 - l;
        r = R - L + 1 - r;
        swap(r, l);
      }
      printf("%d\n", get(L + l - 1, L + r - 1));
    }
  }
  return 0;
}
