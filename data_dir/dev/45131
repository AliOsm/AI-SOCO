#include "bits/stdc++.h"

#ifdef PRINTERS
#include "printers.hpp"
using namespace printers;
#define tr(a)		cerr<<#a<<" : "<<a<<endl;
#else
#define tr(a)    
#endif

#define ll          long long
#define pb          push_back
#define mp          make_pair
#define pii         pair<int,int>
#define vi          vector<int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define endl        '\n'
#define rep(i,a,b)	for(int i=a;i<b;i++)
using namespace std;
vi adj[100005];
int centroid_h[100005];
int centroid_par[100005];
vi centroid_child[100005];
int subtree[100005];
int ans[100005];
int dist[20][100005];
void dfs(int u,int p){
	subtree[u]=1;
	for(auto i:adj[u]){
		if(i==p or centroid_h[i])continue;
		dfs(i,u);
		subtree[u]+=subtree[i];
	}
}
int dfs2(int u,int p,int total){
	for(auto i:adj[u]){
		if(i==p or centroid_h[i])continue;
		if(subtree[i]*2>total)return dfs2(i,u,total);
	}
	return u;
}
void dfs3(int u,int p,int d,int root){
	dist[centroid_h[u]-centroid_h[root]][u]=d;
	for(auto i:adj[u]){
		if(centroid_h[i]>centroid_h[root] and p!=i){
			dfs3(i,u,d+1,root);
		}
	}
}
int centroid(int u,int h,int par){
	dfs(u,0);
	int cur=dfs2(u,0,subtree[u]);
	centroid_h[cur]=h;
	centroid_par[cur]=par;
	for(auto i:adj[cur]){
		if(centroid_h[i]==0){
			centroid_child[cur].pb(centroid(i,h+1,cur));
		}
	}
	dfs3(cur,0,0,cur);
	return cur;
}
void solve(){
	int n,m;
	cin>>n>>m;
	rep(i,1,n){
		int a,b;
		cin>>a>>b;
		adj[a].pb(b);
		adj[b].pb(a);
	}
	int my_cen=centroid(1,1,0);
	rep(i,1,n+1)ans[i]=1e8;
	{
		int cur=1;
		int h=0;
		int temp=cur;
		while(cur){
			ans[cur]=min(ans[cur],dist[h][temp]);
			cur=centroid_par[cur];
			h++;
		}
	}
	while(m--){
		int ch;
		cin>>ch;
		if(ch==1){
			int cur;
			cin>>cur;
			int h=0;
			int temp=cur;
			while(cur){
				ans[cur]=min(ans[cur],dist[h][temp]);
				cur=centroid_par[cur];
				h++;
			}
		}
		else{
			int cur;
			cin>>cur;
			int curans=INT_MAX;
			int h=0;
			int temp=cur;
			while(cur){
				curans=min(curans,dist[h][temp]+ans[cur]);
				h++;
				cur=centroid_par[cur];
			}
			cout<<curans<<endl;
		}
	}
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int t=1;
//	cin>>t;
	while(t--){
		solve();
	}
	return 0;
}