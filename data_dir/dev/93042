#include<bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef pair<ll,ll> pll;

#define endl '\n'
#define ff first
#define ss second
#define int long long
#define pb push_back
#define f(i,l,r) for(ll i=l;i<=r;i++)
#define rf(i,r,l) for(ll i=r;i>=l;i--)
#define Max 5000001
#define inf 2147483647
#define llinf 9223372036854775807
#define all(v) v.begin(),v.end()
#define bp(n) __builtin_popcountll(n)
#define fast ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)

#define d0(a) cout<<a<<' ';
#define d1(a) cout<<a<<endl;
#define d2(a,b) cout<<a<<' '<<b<<endl;
#define d3(a,b,c) cout<<a<<' '<<b<<' '<<c<<endl;
#define d4(a,b,c,d) cout<<a<<' '<<b<<' '<<c<<' '<<d<<endl;
#define d5(a,b,c,d,e) cout<<a<<' '<<b<<' '<<c<<' '<<d<<' '<<e<<endl;

const ll N=1e5+5,mod=1e9+7,bit=61;



signed main()
{
    fast;

    ll t=1;
    //cin>>t;
    while(t--)
    {
        ll n;
        cin>>n;
        ll a[n+1];
        f(i,1,n)
        {
            cin>>a[i];
        }
        vector<pll> ans;
        set<ll> ms;
        ll x=0,p=1;
        f(i,1,n)
        {
            ms.insert(a[i]);
            x++;
            if((int)ms.size()==x-1)
            {
                if(ans.size()==0)
                {
                    ans.pb({p,n});
                    p=i;
                }
                else
                {
                    pll xx=ans.back();
                    ans.pop_back();
                    xx.ss=p;
                    ans.pb(xx);
                    ans.pb({p+1,n});
                    p=i;
                }
                x=0;
                ms.clear();
            }
        }
        if((int)ans.size()==0)
        {
            cout<<-1<<endl;
        }
        else
        {
            cout<<(int)ans.size()<<endl;
            for(auto v:ans)
            {
                cout<<v.ff<<' '<<v.ss<<endl;
            }
        }
    }
    return 0;
}
















