#pragma comment (linker, "/STACK:256000000")
 
#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <memory.h>
#include <sstream>
#include <queue>
#include <cassert>
#include <ctime>
#include <complex>
#include <unordered_map>
#include <random>
 
using namespace std;
 
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<pii, pii> piiii;
typedef pair<int64, int> pli;
typedef pair<int, char> pic; 

#define pb push_back
#define sq(x) ((x)*(x))
#define cube(x) (((x)*(x))*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
#define rand32() (((unsigned int)(rand()) << 16) | (unsigned int)(rand()))
#define rand64() (((unsigned int64)(rand32()) << 16) | (unsigned int64)(rand32()))
#define bit(mask, b) ((mask >> b) & 1)
#define biton(mask, bit) (mask | (((uint64)(1)) << bit))
#define bitoff(mask, bit) (mask & (~(((uint64)(1)) << bit)))
#define bitputon(mask, bit) (mask |= (((uint64)(1)) << bit))
#define bitputoff(mask, bit) (mask &= (~(((uint64)(1)) << bit)))
#define FAIL() (*((int*)(0)))++
#define INF ((int)(1e9) + 1337)
#define EPS (1e-9)
#define y1 yy1
#define y0 yy0
#define j0 jj0

const long double PI = acosl((long double)-1.0);
const int64 LINF = 1e18;//((1ull << 63) - 1ull);
const int MOD = 1000000007;

const int LOG = 34;
const int MAXN = 200005;

int n;
int64 k;
int f[LOG][MAXN];
int used[MAXN];
int c[MAXN];
int w[MAXN];
int64 s[LOG][MAXN];
int mn[LOG][MAXN];

//int dfs(int v)
//{
//	used[v] = 1;
//	if (used[f[v]])
//	{
//		if (used[f[v]] == 1)
//		{
//			c[v] = 1;
//			used[v] = 2;
//			return f[v];
//		}
//	}
//	else
//	{
//		int res = dfs(f[v]);
//		if (res)
//		{
//			c[v] = 1;
//			if (res == v)
//			{
//				res = 0;
//			}
//			used[v] = 2;
//			return res;
//		}
//	}
//}

void init()
{
	scanf ("%d%I64d", &n, &k);
	for (int i = 0; i < n; i++)
	{
		scanf ("%d", &f[0][i]);
	}
	for (int i = 0; i < n; i++)
	{
		scanf ("%d", &w[i]);
	}
}

void solve()
{
	init();
	/*for (int i = 0; i < n; i++)
	{
		if (!used[i])
		{
			dfs(i);
		}
	}*/
	for (int i = 0; i < n; i++)
	{
		s[0][i] = w[i];
		mn[0][i] = w[i];
	}
	for (int h = 1; h < LOG; h++)
	{
		for (int i = 0; i <= n; i++)
		{
			f[h][i] = f[h - 1][f[h - 1][i]];
			s[h][i] = s[h - 1][i] + s[h - 1][f[h - 1][i]];
			mn[h][i] = min(mn[h - 1][i], mn[h - 1][f[h - 1][i]]);
		}
	}
	for (int i = 0; i < n; i++)
	{
		int v = i;
		int64 sum = 0;
		int m = INF;
		for (int h = 0; (1LL << h) <= k; h++)
		{
			if (k & (1LL << h))
			{
				sum += s[h][v];
				m = min(mn[h][v], m);
				v = f[h][v];
			}
		}
		printf("%I64d %d\n", sum, m);
	}
}

void precalc()
{
	
}

int main()
{
    //ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(TASK ".in", "rt", stdin); freopen(TASK ".out", "wt", stdout);
#endif
    srand(707);
	//test_output(); return 0;
	precalc();
	int tests = 1;
	//scanf ("%d", &tests);
	for (int i = 1; i <= tests; i++)
	{
		solve();
	}
	
    return 0;
}