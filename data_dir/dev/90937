#include <iostream>
#include <cstdio>
#include <string>
#include <cmath>
#include <cstring>
#include <algorithm>
using namespace std;
const int N = 110;
int dp[N][N][2][N << 1] , m , n;
char str[N];
int main () {
    #ifndef ONLINE_JUDGE
        freopen ("input.txt" , "r" , stdin);
        // freopen ("output.txt" , "w" , stdout);
    #endif
    memset (dp , 0 , sizeof(dp));
    scanf ("%s %d" , str , &m);
    n = strlen (str);
    dp[0][0][0][N] = 1;
    for (int i = 0 ; i < n ; i ++) {
        for (int j = 0 ; j <= m ; j ++) {
            for (int k = 0 ; k < 2 ; k ++) {
                for (int p = 0 ; p < N * 2 ; p ++) {
                    if (dp[i][j][k][p] == 0) continue;
                    if (str[i] == 'F') {
                        int pp = k == 0 ? (p + 1) : (p - 1);
                        for (int r = 0 ; r + j <= m ; r += 2)
                            dp[i + 1][j + r][k][pp] = 1;
                        for (int r = 1 ; r + j <= m ; r += 2)
                            dp[i + 1][j + r][!k][p] = 1;
                    }
                    else {
                        for (int r = 0 ; r + j <= m ; r += 2)
                            dp[i + 1][j + r][!k][p] = 1;
                        int pp = k == 0 ? (p + 1) : (p - 1);
                        for (int r = 1 ; r + j <= m ; r += 2)
                            dp[i + 1][j + r][k][pp] = 1;
                    }
                }
            }
        }
    }
    int ans = 0;
        for (int j = 0 ; j < 2 ; j ++) {
            for (int k = 0 ; k < 2 * N ; k ++) {
                if (dp[n][m][j][k])
                    ans = max (ans , abs (k - N));
            }
        }
    printf ("%d\n" , ans);
    return 0;
}