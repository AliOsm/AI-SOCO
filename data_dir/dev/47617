#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace std;
using namespace __gnu_pbds;
#define ll long long
#define rep(i,a,n) for (int i=a;i<n;i++)
#define per(i,a,n) for (int i=n-1;i>=a;i--)
#define setDP(arr) memset(arr,-1,sizeof arr)
#define Clear(arr) memset(arr,0,sizeof arr)
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define fi first
#define se second
#define sz(x) ((int)(x).size())
#define In_the_name_of_allah_the_merciful ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define Alhamdulillah return 0;
const int N = 2e5+5;
struct cell{
    int l=0,r=0,u=0,d=0;
};
cell cm[N];
string moves;
pair<int,int> dist;
int n;
pair<int,int> getdiff(cell a , cell b){
    pair<int,int> ret = {0,0};
    ret.fi += ((a.l - b.l)*-1);
    ret.fi += (a.r - b.r);
    ret.se += ((a.d - b.d)*-1);
    ret.se += (a.u - b.u);
    return ret;
}
cell add(cell prv , char cr){
    cell ret = prv;
    if (cr == 'U')
        ret.u++;
    else if (cr == 'D')
        ret.d++;
    else if (cr == 'L')
        ret.l++;
    else
        ret.r++;
    return ret;
}
bool check(pair<int,int> cr , int rem){
    int needed = abs(cr.fi-dist.fi) + abs(cr.se-dist.se);
    return needed <= rem;
}
bool canReach(int k){
    bool ret = 0;
    pair<int,int> cr = getdiff(cm[n],cm[k]);
    if (check(cr,k)) ret |= 1;
    for(int i = 2 ; i <= (n-k+1) ; ++i){
        pair<int,int> l = getdiff(cm[i-1],cm[0]);
        pair<int,int> r = getdiff(cm[n],cm[k+i-1]);
        pair<int,int> all = {l.fi+r.fi,l.se+r.se};
        if (check(all,k)) ret |= 1;
    }
    return ret;
}
int main()
{
    In_the_name_of_allah_the_merciful

    cin >> n >> moves;
    cin >> dist.fi >> dist.se;
    int d = abs(dist.fi)+abs(dist.se);
    if (((n&1) && !(d&1)) || (!(n&1) && (d&1)))
        return cout << "-1" << endl,0;

    rep(i,1,n+1)
        cm[i] = add(cm[i-1],moves[i-1]);

    int lo = 0 , hi = n+1 , ans = -1;
    while(lo < hi){
        int mid = (lo+hi)>>1;
        if (canReach(mid)){
            ans = mid;
            hi = mid;
        }
        else
            lo = mid+1;
    }
    cout << ans << endl;
    Alhamdulillah
}
