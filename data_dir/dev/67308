#include<bits/stdc++.h> 
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define MOD 1000000007
#define MOD2 1000000009
#define INF 2000000000
#define DESPACITO 1000000000000000000
#define PI acos(-1);
#define E 998244353
#define pb push_back
#define mp make_pair
#define ll long long

using namespace std;
//using namespace __gnu_pbds;

//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;

ll f[300005];
int n;
ll arr[300001];
ll tree[1200021];
pair<int,int>lazy[1200021];

void Create(int node,int start,int end)
{
	if(start==end)
	{
		tree[node]=arr[start];
	}
	else
	{
		int mid=(start+end)/2;
		Create(2*node,start,mid);
		Create(2*node+1,mid+1,end);
		tree[node]=(tree[2*node]+tree[2*node+1])%MOD2;
	}
}

void updateRange(int node,int start,int end,int l,int r)
{
	if(lazy[node].first || lazy[node].second)
	{
		ll k=(end-start+1);
		ll sum=((1LL * lazy[node].first * f[k])%MOD2 + (1LL * lazy[node].second * f[k+1])%MOD2)%MOD2;
		sum-=lazy[node].second;
		sum+=MOD2;
		sum%=MOD2;
		tree[node]+=sum;
		tree[node]%=MOD2;
		if(start!=end)
		{
			int mid=(start+end)/2;
			lazy[2*node].first+=lazy[node].first;
			lazy[2*node].first%=MOD2;
			lazy[2*node].second+=lazy[node].second;
			lazy[2*node].second%=MOD2;
			k=(mid-start+2);
			lazy[2*node+1].first+=((1LL * lazy[node].first * f[k-2])%MOD2 + (1LL * lazy[node].second * f[k-1])%MOD2)%MOD2;
			lazy[2*node+1].first%=MOD2;
			lazy[2*node+1].second+=((1LL * lazy[node].first * f[k-1])%MOD2 + (1LL * lazy[node].second * f[k])%MOD2)%MOD2;
			lazy[2*node+1].second%=MOD2;
		}
		lazy[node].first=0;
		lazy[node].second=0;
	}
	if(start>r or end<l)
		return;
	if(start>=l && end<=r)
	{
		ll ind=(start-l+1);
		lazy[node].first=f[ind];
		lazy[node].second=f[ind+1];
		ll k=(end-start+1);
		ll sum=((1LL * lazy[node].first * f[k])%MOD2 + (1LL * lazy[node].second * f[k+1])%MOD2)%MOD2;
		sum-=lazy[node].second;
		sum+=MOD2;
		sum%=MOD2;
		tree[node]+=sum;
		tree[node]%=MOD2;
		if(start!=end)
		{
			int mid=(start+end)/2;
			lazy[2*node].first+=lazy[node].first;
			lazy[2*node].first%=MOD2;
			lazy[2*node].second+=lazy[node].second;
			lazy[2*node].second%=MOD2;
			k=(mid-start+2);
			lazy[2*node+1].first+=((1LL * lazy[node].first * f[k-2])%MOD2 + (1LL * lazy[node].second * f[k-1])%MOD2)%MOD2;
			lazy[2*node+1].first%=MOD2;
			lazy[2*node+1].second+=((1LL * lazy[node].first * f[k-1])%MOD2 + (1LL * lazy[node].second * f[k])%MOD2)%MOD2;
			lazy[2*node+1].second%=MOD2;
		}
		lazy[node].first=0;
		lazy[node].second=0;
		return;
	}
	int mid=(start+end)/2;
	updateRange(2*node,start,mid,l,r);
	updateRange(2*node+1,mid+1,end,l,r);
	tree[node]=(tree[2*node]+tree[2*node+1])%MOD2;
}

ll queryRange(int node,int start,int end,int l,int r)
{
	if(start>end or start>r or end<l)
		return 0;
	if(lazy[node].first || lazy[node].second)
	{
		ll k=(end-start+1);
		ll sum=((1LL * lazy[node].first * f[k])%MOD2 + (1LL * lazy[node].second * f[k+1])%MOD2)%MOD2;
		sum-=lazy[node].second;
		sum+=MOD2;
		sum%=MOD2;
		tree[node]+=sum;
		tree[node]%=MOD2;
		if(start!=end)
		{
			int mid=(start+end)/2;
			lazy[2*node].first+=lazy[node].first;
			lazy[2*node].first%=MOD2;
			lazy[2*node].second+=lazy[node].second;
			lazy[2*node].second%=MOD2;
			k=(mid-start+2);
			lazy[2*node+1].first+=((1LL * lazy[node].first * f[k-2])%MOD2 + (1LL * lazy[node].second * f[k-1])%MOD2)%MOD2;
			lazy[2*node+1].first%=MOD2;
			lazy[2*node+1].second+=((1LL * lazy[node].first * f[k-1])%MOD2 + (1LL * lazy[node].second * f[k])%MOD2)%MOD2;
			lazy[2*node+1].second%=MOD2;
		}
		lazy[node].first=0;
		lazy[node].second=0;
	}
	if(start>=l && end<=r)
		return tree[node];
	int mid=(start+end)/2;
	ll p=queryRange(2*node,start,mid,l,r);
	ll q=queryRange(2*node+1,mid+1,end,l,r);
	return ((p+q)%MOD2);
}

int main()
{
	IOS;
	#ifndef ONLINE_JUDGE
		freopen("input.txt","r",stdin);
		freopen("output.txt","w",stdout);
	#endif
	int m;
	cin >> n >> m;
	REP(i,1,n)
		cin >> arr[i];
	Create(1,1,n);
	f[0]=0;
	f[1]=1;
	REP(i,2,n+3)
		f[i]=(f[i-1]+f[i-2])%MOD2;
	while(m--)
	{
		int a,b,c;
		cin >> a >> b >> c;
		if(a==1)
			updateRange(1,1,n,b,c);
		else
			cout << queryRange(1,1,n,b,c) << "\n";
	}
}	
