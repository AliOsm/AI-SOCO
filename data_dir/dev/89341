#include <bits/stdc++.h>
using namespace std;
#define ll long long

const int N = 3e5 + 10,M = 11;

ll OO = 1e18;
ll n,m,k;
ll a[N];


#define left ((i<<1))
#define right ((i<<1)|1)
#define mid ((L+R)>>1)
ll seg[M][N << 2];
ll lazy[M][N << 2];

ll push(ll p,ll L,ll R,ll i){
    if(lazy[p][i]){
        seg[p][i]+=lazy[p][i];
        if(L!=R){
            lazy[p][left]+=lazy[p][i];
            lazy[p][right]+=lazy[p][i];
        }
    }
    lazy[p][i]=0;
}
ll update(ll p,ll l,ll r,ll val,ll L=0,ll R = n,ll i=1){
    push(p,L,R,i);
    if(L>R || l>r || l>R || L>r)return seg[p][i];
    if(L>=l && R<=r){
        lazy[p][i]+=val;
        push(p,L,R,i);
        return seg[p][i];
    }
    return seg[p][i] = min(update(p,l,r,val,L,mid,left),
                    update(p,l,r,val,mid+1,R,right));
}
ll query(ll p,ll l,ll r,ll L=0,ll R = n,ll i=1){
    push(p,L,R,i);
    if(L>R || l>r || l>R || L>r)return OO;
    if(L>=l && R<=r){
        return seg[p][i];
    }
    return min(query(p,l,r,L,mid,left),
                    query(p,l,r,mid+1,R,right));
}
int main(){
    scanf("%lld%lld%lld",&n,&m,&k);
    for(int i=1;i<=n;i++){
        scanf("%lld",&a[i]);
    }
    vector<ll> v(m,OO);
    ll sum = 0,ans = 0;
    for(ll i=1;i<=n;i++){
        ll cid = (i-1) / m;
        ll pid = (i-1) % m;
        v[pid]= min(v[pid],sum);
        v[pid]+=k;
//        update(pid,cid,cid,sum);
//        update(pid,0,cid,k);

        sum+=a[i];
//        cout << "S:" << sum << endl;
        for(ll j=0;j<m;j++){
//            ll cen = (cid) - (j>pid);
//            ll cur = query(j,0,cen);
//            cout << v[j]<< " ";
            ans = max(ans,sum - v[j]);
        }
//        cout << endl;
    }
    printf("%lld\n",ans);
}
