// GSKHIRTLADZE

#include<bits/stdc++.h>

#define Pii pair < int , int >
#define tree int t,int l,int r
#define left 2*t,l,(l+r)/2
#define right 2*t+1,(l+r)/2+1,r
#define INF 1000200000
#define N5 262145

using namespace std;

int tr[N5+1];
int sh[N5+1];
int a[N5];

void build(tree)
 {
  if (l == r)
   {
    tr[t]=a[l]+l-1;
    return;
   }
  build(left);
  build(right);
  tr[t]=min(tr[2*t],tr[2*t+1]);
 }

int get_min(tree,int L,int R)
 {
  if (r < L) return INF;
  if (R < l) return INF;
  if (L <= l && r <= R) return tr[t];
  if (sh[t])
   {
    tr[2*t+1]+=sh[t];
    tr[2*t]+=sh[t];
    sh[2*t+1]+=sh[t];
    sh[2*t]+=sh[t];
    sh[t]=0;
   }
  return min(get_min(left,L,R),get_min(right,L,R));
 }

void upd(tree,int L,int R,int x)
 {
  if (r < L || R < l) return;
  if (L <= l && r <= R)
   {
    tr[t]+=x;
    sh[t]+=x;
    return;
   }
  if (sh[t])
   {
    tr[2*t+1]+=sh[t];
    tr[2*t]+=sh[t];
    sh[2*t+1]+=sh[t];
    sh[2*t]+=sh[t];
    sh[t]=0;
   }
  upd(left,L,R,x);
  upd(right,L,R,x);
  tr[t]=min(tr[2*t],tr[2*t+1]);
 }


int n,i,ans;

main()
 {
  scanf("%d",&n);
  for (i=1;i<=n;i++)
   scanf("%d",&a[i]);

  build(1,1,n);

  for (i=1;i<=n;i++)
   {
    int l=1,r=min(i,n-i+1),m=0,now=0;

    while (l <= r)
     {
      m=(l+r)/2;
      if (get_min(1,1,n,i-m+1,i+m-1) >= m )
       { now=m; l=m+1; } else r=m-1;
     }

    ans=max(ans,now);

    upd(1,1,n,1,i,+1);
    upd(1,1,n,i+1,n,-1);
   }

  cout<<ans<<endl;
 }
