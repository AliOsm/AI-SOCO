#include <bits/stdc++.h>
using namespace std;

const int N = 100 + 7;

vector <int> adj[N], adjx[N];

int p[N], col[N], pc[N];

int find(int x) {
    return p[x] = (p[x] != x) ? find(p[x]) : p[x];
}


int dfs(int u, int c) {
    if(~col[u]) return col[u] == c;

   // cout << u << " " << c << endl;
    col[u] =  c;
    for(int v: adjx[u])
        if(!dfs(v, c ^ 1))
            return 0;
    return 1;
}

int main() {
    int n, m; cin >> n >> m;
    for(int i = 1; i <= n; i++) p[i] = i;
    for(int i = 1; i <= m; i++) {
        int u, v, w; cin >> u >> v >> w;
        if(w) p[find(u)] = find(v);
        else  {
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
    }

    for(int i = 1; i <= n; i++) {
        for(int j: adj[i]){
            if(find(i) == find(j)) {
                cout << "Impossible\n" << endl;
                return 0;
            }
            adjx[find(i)].push_back(find(j));
            adjx[find(j)].push_back(find(i));
        }
    }
    memset(col, -1, sizeof col);
    for(int i = 1; i <= n; i++) {

        if(col[i] == -1 && find(i) == i) {
            if(!dfs(i, 0)) {
                cout << "Impossible" << endl;
                return 0;
            }
        }
    }

    int cnt = 0;
    for(int i = 1; i <= n; i++) {
        cnt += col[find(i)];
    }

    cout << cnt << endl;

    for(int i = 1; i <= n; i++) if(col[find(i)]) cout << i << " ";



}
