#include <bits/stdc++.h>

using namespace std;

#define left myleft

const int N = 1e6 + 10;

int n;
int a[N];
int left[N], sz[N];
vector <int> ps[N];

long long cnt(int x) {
  return 1ll * x * (x - 1) / 2;
}

int find(int x) {
  return (left[x] == x) ? x : (left[x] = find(left[x]));
}

void add(int p, long long &delta) {
  if (p - 1 >= 0 && left[p - 1] != -1) {
    int l = find(p - 1);
    left[p] = l;
    delta += cnt(sz[l] + 1) - cnt(sz[l]);
    sz[l] += 1;
  } else {
    left[p] = p;
    delta += cnt(sz[p] + 1) - cnt(sz[p]);
    sz[p] += 1;
  }
  if (p + 1 < n && left[p + 1] != -1) {
    int l = find(p);
    delta += cnt(sz[l] + sz[p + 1]) - (cnt(sz[l]) + cnt(sz[p + 1]));
    left[p + 1] = l;
    sz[l] += sz[p + 1];
  }
}

long long ans = 0;

int main() {
  scanf("%d", &n);
  for (int i = 0; i < n; ++i) scanf("%d", a + i);
  for (int i = 0; i < n; ++i) ps[a[i]].push_back(i);
  memset(left, -1, sizeof(left));
  memset(sz, 0, sizeof(sz));
  for (int i = 1; i < N; ++i) {
    long long delta = 0;
    for (int j : ps[i]) {
      add(j, delta);
    }
    ans += delta * i;
  }
  memset(left, -1, sizeof(left));
  memset(sz, 0, sizeof(sz));
  for (int i = N - 1; i > 0; --i) {
    long long delta = 0;
    for (int j : ps[i]) {
      add(j, delta);
    }
    ans -= delta * i;
  }
  printf("%lld\n", ans);
  return 0;
}
