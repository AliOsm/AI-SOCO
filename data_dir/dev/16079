#include <bits/stdc++.h>
using namespace std;

const int N = 100100 , L = 17 ;
int n , m , cnt ;
int dis[N] , p[L][N] , depth[N] ;
vector< int > adj[N];
int hold[1010];

void dfs(int ver,int par,int dep){
p[0][ver]=par;
depth[ver]=dep;
dis[ver]=dep;
for(auto son:adj[ver])if( son != par )
    dfs(son,ver,dep+1);
}

void bfs(){
queue< int >Q;
for(int i=0;i<cnt;i++)Q.push( hold[i] ),dis[hold[i]]=0;
while( ! Q.empty() ){
    int ver = Q.front();
    Q.pop();
    for(auto nxt:adj[ver])
    if( dis[nxt] > 1+dis[ver] ){
        dis[nxt]=1+dis[ver];
        Q.push(nxt);
    }
}
cnt=0;
}

int LCA(int u,int v){
if( u==v )return u;
if( depth[u] < depth[v] )swap(u,v);
int d = depth[u]-depth[v];

for(int i=0;i<L;i++)if( d&(1<<i) )
    u=p[i][u];

if( u == v )return u;

for(int i=L-1;i>=0;i--)if( p[i][u]!=p[i][v] ){
        u=p[i][u];
        v=p[i][v];
}
return p[0][u];
}

int road(int u,int v){ return depth[u]+depth[v]-2*depth[LCA(u,v)] ; }

int main(){

scanf("%d %d",&n,&m);

for(int i=1;i<n;i++){
    int a,b;
    scanf("%d %d",&a,&b);
    adj[a].push_back(b);
    adj[b].push_back(a);
}
dfs(1,-1,0);

for(int i=1;i<L;i++)
for(int j=1;j<=n;j++)
    if( p[i-1][j] != -1 )
        p[i][j]=p[i-1][ p[i-1][j] ];

int sqr = sqrt(1.0 *m );
cnt=0;
while( m-- ){
    int t , v ;
    scanf("%d %d",&t,&v);
    if( t==1 ){

        hold[cnt++]=v;
        if( cnt >= sqr )bfs();

    }else{

    int ans=dis[v];
    for(int i=0;i<cnt;i++)
        ans=min( ans , road(hold[i],v) );

    printf("%d\n",ans);
    }

}

return 0;
}
