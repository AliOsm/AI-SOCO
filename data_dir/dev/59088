#include <bits/stdc++.h>
using namespace std;
const int maxn = (1 << 17) + 5;
int n, m, p, b, a[maxn], seg[4 * maxn];
void build(int s, int e, int idx, int lvl){
    if(s == e){
        seg[idx] = a[s];
        return ;
    }
    int mid = (s + e) / 2;
    build(s, mid, 2 * idx + 1, lvl - 1);
    build(mid + 1, e, 2 * idx + 2, lvl - 1);
    if(lvl % 2)
        seg[idx] = seg[2 * idx + 1] ^ seg[2 * idx + 2];
    else
        seg[idx] = seg[2 * idx + 1] | seg[2 * idx + 2];
}
void update(int l, int r, int s, int e, int idx, int lvl){
    if(l > e || r < s)
        return ;
    if(s >= l && e <= r){
        seg[idx] = b;
        return ;
    }
    int mid = (s + e) / 2;
    update(l, r, s, mid, 2 * idx + 1, lvl - 1);
    update(l, r, mid + 1, e, 2 * idx + 2, lvl - 1);
    if(lvl % 2)
        seg[idx] = seg[2 * idx + 1] ^ seg[2 * idx + 2];
    else
        seg[idx] = seg[2 * idx + 1] | seg[2 * idx + 2];
}
int main()
{
    ios::sync_with_stdio(0);
    cin >> n >> m;
    for(int i = 0; i < (1 << n); i++)
        cin >> a[i];
    build(0, (1 << n) - 1, 0, n - 1);
    while(m--){
        cin >> p >> b;
        update(p - 1, p - 1, 0, (1 << n) - 1, 0, n - 1);
        cout << seg[0] << endl;
    }
    return 0;
}
