#include <string.h>
#include <assert.h>
#include <cassert>
#include <unordered_map>
 
#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <stack>
#include <queue>
#include <set>
 
#include <map>
#include <vector>
#include <string>
#include <stdlib.h>
#include <cassert>
 
#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf
 
#define pf printf
#define mp make_pair
#define N 200100
 
const int mod = 998244353;
using namespace std;

int n,m,k;
ll ans[N];

ll A[N],inv[N];
ll p[N];

ll pw(ll a, int b) {
	ll ret = 1;
	while(b>0) {
		if(b&1) ret = (ret * a)%mod;
		a = (a*a)%mod;
		b>>=1;
	}
	return ret;
}

ll c(int x, int y) {
	ll ret = (A[x] * inv[y])%mod;
	return (ret * inv[x-y])%mod;
}

void sol(){

	p[0] = 1;
	for(int i = 1; i <=n; ++i) {
		p[i] = (p[i-1]*10)%mod;
	}
	
	ans[n] = 1;
	for(int i = n-1; i >0; --i) {
		ans[i] = ((n-i-1)*9*9*p[n-(i+2)])%mod;
		ans[i] = (ans[i] + 9*p[n-(i+1)]*2)%mod;
	}

	for(int i = 1; i <=n; ++i) {
		cout<<(ans[i]*10)%mod<< " ";
	}
	cout<<endl;
}

int main() {
	sf("%d",&n);
	sol();
}

