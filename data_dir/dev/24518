#include <iostream>
#include <vector>
#include <map>
using namespace std;

#define ll long long

map <pair <ll, ll>, ll> mp;
vector <ll> vec, vec1, vec2;

int main()
{
	int q;
	cin>> q;

	for(int i = 0; i < q; i ++)
	{
		int tp;
		cin>> tp;
		
		if(tp == 1)
		{
			vec.clear();
			vec1.clear();
			vec2.clear();

			ll a, b, c;
			cin>> a >> b >> c;

			ll a1 = a, b1 = b;

			while(a != 1)
			{
				vec1.push_back(a);
				a /= 2;
			}
			vec1.push_back(1);
			while(b != 1)
			{
				vec2.push_back(b);
				b /= 2;
			}
			vec2.push_back(1);

			ll r = -1;
			for(int i = 0; i < vec1.size(); i ++)
			{
				for(int j = 0; j < vec2.size(); j ++)
					if(vec1[i] == vec2[j])
					{
						r = vec1[i];
						break;
					}
				if(r != -1)
					break;
			}


			for(int i = 0; i < vec1.size(); i ++)
				if(vec1[i] == r)
					break;
				else
					vec.push_back(vec1[i]);

			vec.push_back(r);
			bool chck = false;
			for(int i = vec2.size() - 1; i >= 0; i --)
				if(vec2[i] == r)
					chck = true;
				else if(chck)
					vec.push_back(vec2[i]);

			for(int i = 0; i < vec.size() - 1; i ++)
			{
				mp[make_pair(vec[i], vec[i + 1])] += c;
				mp[make_pair(vec[i + 1], vec[i])] += c;
			}

		}
		else
		{
			vec.clear();
			vec1.clear();
			vec2.clear();

			ll a, b;
			cin>> a >> b;

			while(a != 1)
			{
				vec1.push_back(a);
				a /= 2;
			}
			vec1.push_back(1);
			while(b != 1)
			{
				vec2.push_back(b);
				b /= 2;
			}
			vec2.push_back(1);

			ll r = -1;
			for(int i = 0; i < vec1.size(); i ++)
			{
				for(int j = 0; j < vec2.size(); j ++)
					if(vec1[i] == vec2[j])
					{
						vec.push_back(vec1[i]);
						r = vec1[i];
						break;
					}
				if(r != -1)
					break;
			}

			
			for(int i = 0; i < vec1.size(); i ++)
				if(vec1[i] == r)
					break;
				else
					vec.push_back(vec1[i]);

			for(int i = 0; i < vec2.size(); i ++)
				if(vec2[i] == r)
					break;
				else
					vec.push_back(vec2[i]);

			
			ll ans = 0;
			for(int i = 0; i < vec.size(); i ++)
				for(int j = i + 1; j < vec.size(); j ++)
				{
					ans += mp[make_pair(vec[i], vec[j])];
				//	cout<< vec[i] << " " << vec[j] << " " << mp[make_pair(vec[i], vec[j])] << endl;
				}
			cout<< ans << endl;
		}
	}
}