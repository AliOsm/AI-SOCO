
#define MAXSTACKSIZE [1024 * 1024 * 128]
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <hash_map>
#include <hash_set>
#include <vector>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iterator>
#include <limits>
using namespace std;
#define mems(arr, val) memset(arr, val, sizeof(arr))
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define all(A) (A).begin(), A.end()
#define mp(a, b) make_pair(a, b)
#define forit(it, A) for(auto it = A.begin(); it != A.end(); it++)
typedef long long LL;
typedef pair<int, int> pii;
//const LL INF = INT_MAX;
const int MAXN = 100000 + 10000;
const LL MOD = 1000000007;
const double EPS = 1e-6;
 
int get_next(int v, vector<int> &p)
{
    if (v == p.size() || p[v] == v) return v;
    return p[v] = get_next(p[v], p);
}

int main()
{
#ifdef MY_SOL
    freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#endif
    int n;
    cin>>n;
    vector<int> a(n);
    vector<int> b(n);
    set<pii> S;
    forn(i, 0, n)
    {
        int tmp;
        cin>>tmp;
        a[i] = tmp - 1;
        b[tmp - 1] = i;
        S.insert(mp(i, tmp - 1));
    }

    vector<int> P;
    int count = 0;

    for(int i = 0; i < n - 1; ++i)
    {
        if (a[i] > a[i + 1]) P.push_back(i);
    }

    while(P.size() > 0)
    {
        vector<int> newP;
        for(int i = 0; i < P.size(); ++i)
        {
            //newP.push_back(P[i]);
            int idx = i;
            auto cur = S.lower_bound(mp(P[idx], a[P[idx]]));
            
            vector<pii> del;
            while(true)
            {
                auto next = cur;
                ++next;
                if (next == S.end() || next->second > cur->second) break;
                i++;
                del.push_back(*next);
                cur++;
            }

            for(int j = 0; j < del.size(); ++j)
            {
                S.erase(del[j]);
            }

            auto next = S.upper_bound(mp(P[idx], a[P[idx]]));
            if (next != S.end())
            {
                if (a[P[idx]] > a[next->first])
                {
                    newP.push_back(P[idx]);
                }
            }
            i--;
        }
        P = newP;
        count++;
    }

    cout<<count;
    return 0;
}