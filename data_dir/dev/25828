#include<bits/stdc++.h>
#define In_the_name_of_allah_the_merciful ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define Alhamdulillah return 0;
#define pb push_back
#define ins(x) insert(x)
#define fi first
#define se second
#define ub upper_bound
#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v) ((ll)((v).size()))
#define reset(v,val) memset(v,val,sizeof(v))
#define erep(i, x, n) for ( i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for( i = x; i<(ll)(n); i++)
using namespace std;
typedef    int   ll;
long long int mod=1e9+7;
ll dx[]={0,0,1,-1};
ll dy[]={1,-1,0,0};
ll m=0,n,res=0,k;
string s2,ch="",s,t,s1="";
vector< pair<string,ll> >vm;
vector< pair< pair<ll,ll>,ll > > vvv;
vector<pair< ll, string > >vv;
vector < pair<string,ll> > vv2;
vector< string > v[200005];
set< ll > st;
ll a[1000005],b[1000005]={0},prefxor[1000005];
map<ll,ll>mp;

struct qery{
    ll l,r,idx;
};

bool cmp(qery x, qery y)
{
    return x.r < y.r;
}

ll bit[1000050],pos[1000050],ans[1000005];
/******************************/
void update(ll x,ll val){
  for(;x<=1000000;x+=(x&-x))
         bit[x]^=val;
}
/******************************/
ll query(ll x){
	ll sum=0;
	for(;x>0;x-=(x&-x)){
        sum^=bit[x];
	}
	return sum;
}
/****************************/



int main(){
/******************************************/In_the_name_of_allah_the_merciful/****************************************************/

ll i=0,x=0,z=0,y=0,j=0,q,mx=0,idx=0,ok=0,l=0,r=0,negatif=0,positif=0,l1,r1,d,p;
set< ll > ::iterator itp,it;
set< ll > ::iterator it1;
//freopen("a.txt","r",stdin);
cin>>n;
set<ll>st;
for(i=1;i<=n;i++){
    cin>>a[i];
    st.insert(a[i]);
    pos[i]=0;
    bit[i]=0;
}
i=0;
for(it=st.begin();it!=st.end();it++){
    i++;
    mp[(*it)]=i;
}

prefxor[0]=0;
for(i=1;i<=n;i++){
    prefxor[i]=(a[i]^prefxor[i-1]);
}
cin>>q;
vector<qery>queries;
for(i=1;i<=q;i++){
    qery qr;
    cin>>l>>r;
    qr.l=l;qr.r=r;qr.idx=i;
    queries.pb(qr);
}
sort(queries.begin(),queries.end(),cmp);
j=0;

for(i=1;i<=n;i++){
    //cout<<i<<" "<<j<<endl;
    x=mp[a[i]];
    //cout<<x<<" "<<pos[x]<<endl;
    if(pos[x]!=0){
        idx=pos[x];
        update(idx,a[i]);
    }
    pos[x]=i;
    update(pos[x],a[i]);
    while(j<queries.size()&&queries[j].r==i){
        res=(prefxor[i]^prefxor[(queries[j].l)-1]);
        ll cur=(query(queries[j].r)^query(queries[j].l-1));
        ans[queries[j].idx]=(res^cur);
        j++;
    }
}
for(i=1;i<=q;i++)cout<<ans[i]<<'\n';
/*****************************************************/Alhamdulillah/**************************************************************/
 }
