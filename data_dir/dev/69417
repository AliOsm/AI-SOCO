#include <bits/stdc++.h>
 
using namespace std;
 
#define SPEED ios::sync_with_stdio(false); cin.tie(0); cout.tie(0)
#define fileio freopen("in.in", "r", stdin),freopen("out.out", "w", stdout);
#define ll long long int
#define FF first
#define SS second
#define mp make_pair
#define pb push_back
#define pii pair<int,int>
#define pll pair<long long int,long long int>
#define sd(x) scanf("%d",&x)
#define slld(x) scanf("%lld",&x)
#define pd(x) printf("%d\n",x)
#define plld(x) printf("%lld\n",x)
#define pss printf
#define MOD 1000000007
#define INF 1e18
#define eps 0.00001
#define endl '\n'
#define debug(n1) cout<<n1<<endl

int n,m,q;
int a[300005];
int b[300005];
int tree[4*1000005];
int lazy[4*1000005];

void lazify(int s,int e,int i)
{
	if(lazy[i])
	{
		tree[i]+=lazy[i];
		if(s!=e)
		{
			lazy[2*i]+=lazy[i];
			lazy[2*i+1]+=lazy[i];
		}
		lazy[i]=0;
	}
}

void upd(int l,int r,int s,int e,int i,int x)
{
	lazify(s,e,i);
	if(s>r||e<l)
		return;
	if(s>=l&&e<=r)
	{
		lazy[i]+=x;
		lazify(s,e,i);
		return;
	}
	int mid=(s+e)>>1;
	upd(l,r,s,mid,2*i,x);
	upd(l,r,mid+1,e,2*i+1,x);
	tree[i]=max(tree[2*i],tree[2*i+1]);
}

int qur(int s,int e,int i)
{
	lazify(s,e,i);
	if(tree[i]<=0)
		return -1;
	if(s==e)
		return s;
	int mid=(s+e)>>1;
	lazify(s,mid,2*i);
	lazify(mid+1,e,2*i+1);
	if(tree[2*i+1]>0)
		return qur(mid+1,e,2*i+1);
	return qur(s,mid,2*i);
}

int main()
{
	SPEED;
	cin>>n>>m;
	for(int i=1;i<=n;i++)
	{
		cin>>a[i];
		upd(1,a[i],1,1000000,1,1);
	}
	for(int i=1;i<=m;i++)
	{
		cin>>b[i];
		upd(1,b[i],1,1000000,1,-1);
	}
	cin>>q;
	for(int i=1;i<=q;i++)
	{
		int o,j,x;
		cin>>o>>j>>x;
		if(o==1)
		{
			upd(1,a[j],1,1000000,1,-1);
			a[j]=x;
			upd(1,a[j],1,1000000,1,1);
		}
		else
		{
			upd(1,b[j],1,1000000,1,1);
			b[j]=x;
			upd(1,b[j],1,1000000,1,-1);
		}
		cout<<qur(1,1000000,1)<<endl;
	}
	return 0;
}