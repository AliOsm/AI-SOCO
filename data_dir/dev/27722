#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define fr first
#define sc second
#define pb push_back
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int> >
const int INF = 1e4;
const int MAXN = 5e5 + 200;
const  long double eps = 1e-16;
const long double pi = acos(-1.0);
using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

struct point{
    int x;
    int ind;
};
struct zap{
    int k;
    int pos;
    int ind;
};
bool comp(point x, point y){
    return (x.x > y.x || (x.x == y.x && x.ind < y.ind));
}
bool comp1(zap x, zap y){
    return x.k < y.k;
}
point a[MAXN];
int n, m;
int b[MAXN];
zap c[MAXN];
int ans[MAXN];
void solve() {
    cin >> n;
    for (int i = 1; i <= n; i++){
        cin >> a[i].x;
        a[i].ind = i;
        b[i] = a[i].x;
    }
    sort(a + 1, a + n + 1, comp);
    int len = 0;
    cin >> m;
    for (int i = 1; i <= m; i++){
        cin >> c[i].k >> c[i].pos;
        c[i].ind = i;
    }
    sort(c + 1, c + 1 + m, comp1);
    ordered_set poss;
    for (int i = 1; i <= m; i++){
        int x = c[i].k;
        while (len < x){
            len++;
            poss.insert(a[len].ind);
        }
        ans[c[i].ind] = b[*poss.find_by_order(c[i].pos -1)];
    }
    for (int i = 1; i <= m; i++)
        cout << ans[i] << "\n";
}


int main() {
ios::sync_with_stdio(NULL), cin.tie(0), cout.tie(0);
cout.setf(ios::fixed), cout.precision(20);
 //freopen("input.in", "r", stdin);
// freopen("output.out", "w", stdout);
 int step;
 step = 1;
  for (int i = 1; i <= step; i++){
         solve();
    }
}
