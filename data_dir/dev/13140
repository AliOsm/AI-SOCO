#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int MAX = 1e5 + 5;
int pset[MAX];
ll weight[MAX];
int n, m, p, q;
int x, y;

int find_set(int i) {
	return pset[i] == i ? i : pset[i] = find_set(pset[i]);
}

inline void union_sets(int i, int j) {
	x = i, y = j;
	int pi = find_set(i);
	int pj = find_set(j);
	if(pi != pj) {
		weight[pj] += weight[pi];
		pset[pi] = pj;
	}
}

int main() {
	scanf("%d %d %d %d", &n, &m, &p, &q);

	fori(i, 1, n + 1) {
		pset[i] = i;
	}

	fori(i, 0, m) {
		int u, v, w;
		scanf("%d %d %d", &u, &v, &w);
		weight[find_set(u)] += w;
		union_sets(u, v);
	}

	set< pair<ll, int> > order;
	fori(i, 1, n + 1) {
		order.emplace(weight[find_set(i)], find_set(i));
	}

	if((int) order.size() < q || (q == n && p > 0) || ((int) order.size() - p > q)) {
		puts("NO");
		return 0;
	}

	puts("YES");
	while(p--) {
		if((int) order.size() == q) {
			printf("%d %d\n", x, y);			
		}
		else {
			pair<ll, int> f = *order.begin(); order.erase(order.begin());
			pair<ll, int> s = *order.begin(); order.erase(order.begin());
			printf("%d %d\n", f.second, s.second);
			ll new_weight = min((ll) 1e9, weight[find_set(f.second)] + weight[find_set(s.second)] + 1);
			weight[find_set(f.second)] += new_weight;
			union_sets(f.second, s.second);
			order.emplace(weight[find_set(f.second)], find_set(f.second));
		}
	}

	return 0;
}

