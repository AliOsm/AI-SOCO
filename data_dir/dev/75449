#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>

using namespace std;

typedef size_t index_t;
typedef vector< index_t > index_vector;

typedef vector< char > bool_vector;

typedef int mask_t;
typedef int digit_t;

#define safe_forin(i,n) for (int (i) = 0, __size = (n); (i) < __size; ++(i))
#define forin(i,n) for (index_t (i) = 0, __size = (n); (i) < __size; ++(i))
#define forstep(i,n,step) for (index_t (i) = 0, __size = (n); (i) < __size; i += (step))
#define all(x) (x).begin(), (x).end()

#define zero_bit(x) ((x) & 1)
#define is_even(x) (zero_bit(x) == 0)
#define is_odd(x) (zero_bit(x) == 1)

#define digit(s,i) (s[i] - '0')

#define space ' '
#define nl '\n'
#define newline cout << nl;
	
int read_int()
{
	int value;
	cin >> value;
	
	return value;
}

string read_string()
{
	string s;
	cin >> s;
	
	return s;
}

template < class T > 
void println(const T & value)
{
	cout << value << nl;
}

template < class T >
void print_vector(const vector< T > & values)
{
	forin(i, values.size())
		cout << values[i] << space;
		
	newline;
}

void print_indexes(const index_vector & indexes)
{
	forin(i, indexes.size())
		cout << indexes[i] + 1 << space;
	
	newline;
}

bool check_index(const index_t index, const size_t size)
{
	return (0 <= index && index < size);
}

bool check_indexes(
	const index_t x, const size_t x_size, 
	const index_t y, const size_t y_size)
{
	return check_index(x, x_size) && check_index(y, y_size);
}

bool get_bit(const mask_t & mask, const index_t bit_index)
{
	return (mask & (1 << bit_index)) != 0;
}

mask_t set_bit(mask_t & mask, const index_t bit_index)
{
	return mask = (mask | (1 << bit_index));
}



int main()
{
	cin.sync_with_stdio(0);
	cin.tie(0);
	
	cout.precision(15);
	
	string price = read_string();
	size_t price_size = price.length();
	
	index_t last_digit_index = price_size - 1;
	digit_t last_digit = digit(price, last_digit_index);
	
	index_t last_more_index = last_digit_index;
	
	// change with less
	for (index_t digit_index = 0; 
		is_odd(digit(price, last_digit_index)) && digit_index < last_digit_index; 
		++digit_index)
	{
		digit_t digit = digit(price, digit_index);
		if (is_even(digit))
			if (digit > last_digit)
				last_more_index = digit_index;
			else
				swap(price[digit_index], price[last_digit_index]);
	}
	
	if (is_odd(digit(price, last_digit_index)))
		swap(price[last_more_index], price[last_digit_index]);
	
	println(is_odd(digit(price, last_digit_index)) ? "-1" : price);
	
	return 0;
}