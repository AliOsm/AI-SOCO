#include <bits/stdc++.h>
 
using namespace std;
 
#define mem(a,b) memset(a,b,sizeof(a))
#define FOR(i,j,k) for(int i=j;i<=k;i++)
#define read        freopen("in.txt", "r", stdin)
#define write       freopen("out.txt", "w", stdout)
#define pf          printf
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define PB push_back
#define F first
#define S second
#define MP make_pair
 
typedef long long LL;
typedef pair<int,int> pii;
 
const int MAX = (1e5) + 10;
 
vector<int> row, col;
int n, m, k, ara[MAX], bra[MAX];
LL prin;
 
vector<int> divi;
void pol() {
    int x = sqrt(k);
    FOR(i,1,x) {
        if(k % i == 0) {
            divi.push_back(i);
            if((k/i) != i)
                divi.push_back((k/i));
        }
    }
}
 
int main()
{
    ios::sync_with_stdio(false);
    //read;
    //write;
    cin >> n >> m >> k;
 
    FOR(i,1,n) {
        cin >> ara[i];
    }
    FOR(i,1,m) {
        cin >> bra[i];
    }
 
    FOR(i,1,n) {
        if(!ara[i]) {
            continue;
        }
 
        ara[i] += ara[i - 1];
        if(!ara[i + 1]) {
            row.push_back(ara[i]);
        }
    }
 
    FOR(i,1,m) {
        if(!bra[i]) {
            continue;
        }
 
        bra[i] += bra[i - 1];
        if(!bra[i + 1]) {
            col.push_back(bra[i]);
        }
    }
 
    sort(row.begin(), row.end());
    sort(col.begin(), col.end());
    mem(ara, 0); mem(bra, 0);
 
    int c = 0;
    for(int i = row.size() - 1; i >= 0; i--) {
       c += row[i];
       ara[i] = c;
    }
 
    int b = 0;
    for(int i = col.size() - 1; i >= 0; i--) {
       b += col[i];
       bra[i] = b;
    }
 
    pol();
    for(int x: divi){
        int y = k / x;
 
        int p = lower_bound(row.begin(), row.end(), x) - row.begin();
        int can = ara[p] - ((int)row.size() - p) * (x - 1);
        if(can < 0) {
            can = 0;
        }
 
        int q = lower_bound(col.begin(), col.end(), y) - col.begin();
        int ami = bra[q] - ((int)col.size() - q) * (y - 1);
        if(ami < 0) {
            ami = 0;
        }
 
        prin += (LL) ami * can;
    }
 
    cout << prin << endl;
    return 0;
}