#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define read(x) scanf( "%lld" , &x )
#define forq(i , a , b) for (int i = (a); i <= (b); ++i)
#define forr(i , b) forq( i , 0 , b - 1 )
#define carr( n , array ) forr(i , n) read(array[i])
#define coutarr(n , array ) cout << "\n" ; forr (i , n) printf("%lld " , array[i]) ; cout << "\n" ;
#define F first
#define S second
#define IF ->first
#define IS ->second
#define qqmemset(array , val) memset (array , val , sizeof(array))
#define ALLV(vect) vect.begin() , vect.end()
#define sizee(vec) (ll)vec.size()

ll R = 7 + 1e9 , NUMTESTCASE ;
const int NN = 10 + 1e6 ;
const double pi = acos(-1.0) ;
int di [4] = {1 , 0 , -1 , 0} , dj [4] = {0 , 1 , 0 , -1} , DI [8] = {1 , 1 , 0 , -1 , -1 , -1 , 0 , 1} , DJ [8] = {0 , 1 , 1 , 1 , 0 , -1 , -1 , -1} ;
using namespace std;
ll deg [NN] , n , m , Ans [NN][5] ;
unordered_set <ll> to , from ;
int main()
{
    cin >> n >> m ;
    int u , v , w ;
    forq (i , 1 , m) {
        scanf("%lld%lld%lld" , &u , &v ,&w) ;
        deg[u] += w ;
        deg[v] -= w ;
    }
    forq (i , 1 , n)
        if (deg[i] > 0) from.insert(i) ;
            else if (deg[i] < 0) to.insert(i) ;
    int k = 1 ;
    while (from.size()) {
        ll flag1 = *from.begin() , flag2 = *to.begin() ;
        ll w = min( deg[flag1] , -deg[flag2] ) ;
        deg[flag1] -= w ;
        deg[flag2] += w ;
        if (!deg[flag1])
            from.erase(from.begin()) ;
        if (!deg[flag2])
            to.erase(to.begin()) ;
        Ans [k][1] = flag1 ;
        Ans [k][2] = flag2 ;
        Ans [k][3] = w ;
        k ++ ;
    }
    k -- ;
    cout << k << endl ;
    forq (i , 1  , k)
        printf("%lld %lld %lld\n" , Ans[i][1] , Ans[i][2] , Ans[i][3]) ;
    return 0;
}
