#include "bits/stdc++.h"
using namespace std;
const int N = 2e5 + 5;
int n;
int m;
int l , r;
int u , v;
int arr[N];
list < int > adj[N];
int cnt [N];
int idx [N];
bool used[N];
int main() {
    scanf("%d" , &n);
    for(int i = 1; i <= n; ++i)  {
        scanf("%d" , arr + i);
        ++cnt[arr[i]];
        idx[arr[i]] = i;
    }
    int mx = 0;
    for(int i = 1; i <= n; ++i) {
        mx = max(mx , * ( arr + i) ) ;
    }
    for(int i = 0; i <= mx ; ++i) {
        if(!cnt[i]) {
            printf("Impossible\n");
            return 0;
        }
    }
    vector < int > ans;
    for(int i = 0; i <= mx; ++i) {
        ans.push_back(idx[i]);
        used[idx[i]] = true;
    }
    for(int i = 1; i <= n; ++i) {
        if(!used[i]) {
            adj[arr[i]].push_back(i);
        }
    }
    int cur = mx + 1;
    int tot = mx + 1;
    if(tot < n) {
    do {
        if(adj[cur].empty()) {
            int tmp = cur;
            while(tmp >= 3 && adj[tmp].empty()) {
                tmp -= 3;
            }
            if(tmp < 0) {
                printf("Impossible\n");
                return 0;
            }
            cur = tmp;
            if(adj[cur].empty()) {
                    printf("Impossible\n");
                    return 0;
                }
                int x = *(adj[cur].begin());
                adj[cur].pop_front();
                ans.push_back(x);
                cur++;
                //printf("Ok %d\n" , x);

        } else {
            int x = *(adj[cur].begin());
            adj[cur].pop_front();
            ans.push_back(x);
            cur++;
            //printf("Ok %d\n" , x);
        }
        ++tot;
    } while(tot != n);
    }
    printf("Possible\n");
    for(int i = 0; i < (int) ans.size(); ++i) {
        printf("%d " , ans[i]);
    }
}
