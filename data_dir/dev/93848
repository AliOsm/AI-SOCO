#include <bits/stdc++.h>
using namespace std;

const long long INF = 1e18 + 1e9;

int n, m, k;
long long dist[100005], used[100005];
vector<pair<int,int>> train;
vector<vector<pair<int,int>>> adj;

void solve() {
	fill(dist, dist + n + 1, INF);
	priority_queue<pair<long long,int>, vector<pair<long long,int>>, greater<pair<long long,int>>> pq;
	pq.push(make_pair(0, 1));
	dist[1] = 0;

	while (!pq.empty()) {
		int u;
		long long cost;
		tie(cost, u) = pq.top();
		pq.pop();

		if (cost > dist[u]) {
			continue;
		}

		int v, w;
		if (u == 1) {
			for (pair<int,int> it : train) {
				tie(v, w) = it;
				if (cost + w > dist[v]) continue;
				used[v] = 1;

				if (cost + w == dist[v]) continue;
				dist[v] = cost + w;
				pq.push(make_pair(cost + w, v));
			}
		}

		for (pair<int,int> it : adj[u]) {
			tie(v, w) = it;
			if (cost + w > dist[v]) continue;
			used[v] = 0;

			if (cost + w == dist[v]) continue;
			dist[v] = cost + w;
			pq.push(make_pair(cost + w, v));
		}
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> n >> m >> k;

	adj.assign(n + 1, vector<pair<int,int>>());
	for (int i = 0; i < m; i++) {
		int u, v, w;
		cin >> u >> v >> w;

		adj[u].push_back(make_pair(v, w));
		adj[v].push_back(make_pair(u, w));
	}

	train.resize(k);
	for (int i = 0; i < k; i++) {
		cin >> train[i].first >> train[i].second;
	}

	solve();

	int cnt = k;
	for (int i = 1; i <= n; i++) {
		if (used[i]) {
			cnt--;
		}
	}

	cout << cnt << '\n';

	return 0;
}