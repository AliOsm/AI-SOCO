#include <bits/stdc++.h>

using namespace std;

const int N = 100005;

int n;
vector<int> g[N];

int dp[N][2];

int childs[N];

int mx[N][2];
int smx[N][2];

void upd(int u, int v) {
	int tmp = dp[v][0];
	if(tmp > mx[u][1]) swap(tmp, mx[u][1]);
	if(tmp > smx[u][1]) swap(tmp, smx[u][1]);
	tmp = max(dp[v][1], dp[v][0]);
	if(tmp > mx[u][0]) swap(tmp, mx[u][0]);
	if(tmp > smx[u][0]) swap(tmp, smx[u][0]);
}
void upd2(int u) {
	dp[u][1] = mx[u][1];
	dp[u][0] = mx[u][0];
	dp[u][1]++;
	dp[u][0] += max(childs[u] - 1, 0);
}

int ans = 1;
void f(int u, int p) {

	for(int v : g[u]) if(v != p) {
		childs[u]++;
	}
	for(int v : g[u]) if(v != p) {
		f(v, u);	
		upd(u, v);
	}
	upd2(u);

	ans = max(ans, mx[u][1] + smx[u][1] + 1);
	ans = max(ans, mx[u][0] + smx[u][0] + (int)g[u].size() - 2);
	ans = max(ans, dp[u][0]);
	ans = max(ans, dp[u][1]);
}

int main() {

	scanf("%d", &n);

	for(int i = 1; i < n; i++) {
		int u, v;
		scanf("%d %d", &u, &v);
		g[u].push_back(v);
		g[v].push_back(u);
	}

	f(1, 1);

// 	dfs(1, 1);

	printf("%d\n", ans);
}
