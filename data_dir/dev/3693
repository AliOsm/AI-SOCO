#include <bits/stdc++.h>
#define endl '\n'
#define int long long
const int MAXN = (int)1e6 + 42;
using namespace std;

bool is_digit(char r)
{
	if(r >= '0' && r <= '9') return true;
	return false;
}

pair<int, char> decompose(string s)
{
	int num = 0ll;
	int i = 0;

	while(is_digit(s[i]))
	{
		num = num * 10ll + (int)(s[i] - '0');
		i++;	
	}

	i++;
	return make_pair(num, s[i]);
}

int n, m;
string str[MAXN], pat[MAXN];
string fir, last;

void solve_one()
{
	int ans = 0;

	for(int i = 0; i < n; i++)
	{
		pair<int, char> p1 = decompose(str[i]), p2 = decompose(fir);
		if(p1.second == p2.second && p1.first >= p2.first)
			ans += (p1.first - p2.first + 1);
	}

	cout << ans << endl;
	return;
}

void solve_two()
{
	int ans = 0;
	pair<int, char> p2 = decompose(fir);
	pair<int, char> p3 = decompose(last);

	for(int i = 1; i < n; i++)
	{
		pair<int, char> p1 = decompose(str[i]), p0 = decompose(str[i - 1]);
		if(p1.second == p3.second && p1.first >= p3.first)
			if(p0.second == p2.second && p0.first >= p2.first)
				ans++;
	}

	cout << ans << endl;
	return;
}

string to_string_mine(int num)
{
	string ret = "";
	while(num)
	{
		ret += ((num % 10ll) + '0');
		num /= 10ll;
	}

	reverse(ret.begin(), ret.end());
	return ret;
}

void input()
{
	cin >> n >> m;
		
	for(int i = 0; i < n; i++)
		cin >> str[i];

	for(int j = 0; j < m; j++)
		cin >> pat[j];
}

vector<int> failure_function()
{
	int sz = m;
	vector<int> f;
	f.assign(sz + 1, 0);
	
	int j = 0;
	f[0] = 0;

	for(int i = 1; i < sz; i++)
	{
		while(j >= 0 && pat[i] != pat[j])
		{
			if(j >= 1) j = f[j - 1];
			else j = -1;
		}

		j++;
		f[i] = j;
	}

	return f;
}

vector<int> occ;

void match(vector<int> f)
{
	int psz = m, sz = n;
	
	int j = 0;
	for(int i = 0; i < sz; i++)
	{
		while(j >= 0 && pat[j] != str[i])
			if(j >= 1) j = f[j - 1];
			else j = -1;

		j++;
		if(j == psz)
		{
			j = f[j - 1];
			occ.push_back(i - psz + 1);
		}
	}	
}

vector<int> f;
bool cant[MAXN];

void solve_problem()
{
	memset(cant, 0, sizeof(cant));
	
	for(int i = 1; i < m; i++)
	{	
		if(decompose(pat[i]).second == decompose(pat[i - 1]).second)
		{
			cant[i - 1] = true;
			pat[i] = to_string_mine(decompose(pat[i - 1]).first + decompose(pat[i]).first) + "-" + decompose(pat[i]).second;
		}
	}

	int nm = 0;
	for(int i = 0; i < m; i++)
		if(!cant[i])
			pat[nm++] = pat[i];

	m = nm;
		
	memset(cant, 0, sizeof(cant));
	
	for(int i = 1; i < n; i++)
	{	
		if(decompose(str[i]).second == decompose(str[i - 1]).second)
		{
			cant[i - 1] = true;
			str[i] = to_string_mine(decompose(str[i - 1]).first + decompose(str[i]).first) + "-" + decompose(str[i]).second;
		}
	}

	nm = 0;
	for(int i = 0; i < n; i++)
		if(!cant[i])
			str[nm++] = str[i];
	
	n = nm;

	if(m == 1)
	{
		fir = pat[0];
		solve_one();
		exit(0);
	}

	if(m == 2)
	{
		fir = pat[0];
		last = pat[1];
		solve_two();
		exit(0);
	}

	memset(cant, 0, sizeof(cant));
	fir = pat[0];
	cant[0] = true; cant[m - 1] = true;
	last = pat[m - 1];

	for(int i = 1; i < m; i++)
	{	
		if(decompose(pat[i]).second == decompose(pat[i - 1]).second)
		{
			cant[i - 1] = true;
			pat[i] = to_string_mine(decompose(pat[i - 1]).first + decompose(pat[i]).first) + "-" + decompose(pat[i]).second;
		}
	}

	nm = 0;
	for(int i = 0; i < m; i++)
		if(!cant[i])
			pat[nm++] = pat[i];

	m = nm;

	f = failure_function();
	match(f);
		
	int ans = 0;
	pair<int, char> p2 = decompose(fir);
	pair<int, char> p3 = decompose(last);

	for(int idx = 0; idx < occ.size(); idx++)
	{
		int i = occ[idx];
		if(i == 0 || i + m >= n) continue;

		pair<int, char> p1 = decompose(str[i + m]), p0 = decompose(str[i - 1]);
		if(p1.second == p3.second && p1.first >= p3.first)
			if(p0.second == p2.second && p0.first >= p2.first)
				ans++;
	}

	cout << ans << endl;
}

#undef int
int main()
{
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	input();
	solve_problem();
	return 0;
}