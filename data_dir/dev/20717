/**
 *    +--+--+--++--++--In the name of ALLAH--++--++--+--+--+
 *
 *    author:  skmonir
 *    created: 31-Aug-2018 13:10:02
**/

#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define mod                 1000000007LL
#define len(x)              (int) x.size()
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> inline void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = 1e5 + 7;
const int inf = 1e9 + 7;

template <TN T> inline T mymul(T a, T b) {
    return ((a % mod) * (b % mod)) % mod;
}

template <TN T, TN R> inline T mypow(T base, R exp) {
    base %= mod; T res = 1;
    if (base < 0) base += mod;
    if (exp < 0) exp += mod - 1;
    for (; exp > 0; exp >>= 1) {
        if (exp & 1) res = (res * base) % mod;
        base = (base * base) % mod;
    }
    return res;
}

long long a[N], b[N], p[N], q[N];

int solve() {
    int n, m; Int(n, m);
    FOR (i, 1, n) Int(a[i]);
    FOR (i, 1, n) Int(b[i]);

    p[0] = q[0] = p[n + 1] = q[n + 1] = 1LL;
    ROF (i, n, 1) {
        p[i] = p[i + 1];
        if (a[i] == 0) p[i] = mymul(p[i], 1LL * m);
        if (b[i] == 0) p[i] = mymul(p[i], 1LL * m);
    }
    FOR (i, 1, n) {
        q[i] = q[i - 1];
        if (!a[i] and !b[i]) q[i] = mymul(q[i], 1LL * m);
    }

    long long num = 0, den = p[1], tw = mypow(2LL, -1);

    FOR (i, 1, n) {
        long long ways = mymul(q[i - 1], p[i + 1]);
        if (a[i] and b[i]) {
            if (a[i] == b[i]) continue;
            if (a[i] > b[i]) num += ways, num %= mod;
            break;
        }

        if (!a[i] and !b[i]) {
            ways = mymul(mymul(1LL * m, 1LL * m - 1) * tw, ways);
        } else if (!a[i]) {
            ways = mymul(1LL * (m - b[i]), ways);
        } else if (!b[i]) {
            ways = mymul(1LL * (a[i] - 1), ways);
        }
        num += ways;
        num %= mod;
    }

    printf("%lld\n", mymul(num, mypow(den, -1)));

    return 0;
}

int main() {
    int tests = 1, CaseNo = 0; //Int(tests);
    while (tests--) {
        //printf("Case %d: ", ++CaseNo);
        solve();
    }
    return 0;
}