#include <cstdio>
#include <vector>
#include <utility>
#include <algorithm>
using namespace std;
char s[1010][1010];
int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, 1, 0, -1};
int dp[1010][1010];
int d;
int c[1010][1010][4];
int comp(pair<int, int> &a, pair<int, int>& b) {
	return (a.first * dx[d] + a.second * dy[d]) < (b.first * dx[d] + b.second * dy[d]);
}
int main() {
	int n, m, k;
	scanf("%d%d%d", &n, &m, &k);
	for (int i = 0; i < n; i++) {
		scanf("%s", s[i]);
	}
	int x1, y1, x2, y2;
	scanf("%d%d%d%d", &x1, &y1, &x2, &y2);
	--x1; --y1; --x2; --y2;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			dp[i][j] = 1001001;
		}
	}
	dp[x1][y1] = 0;
	vector<pair<int, int> > q, nq;
	q.push_back(make_pair(x1, y1));
	while (q.size()) {
		nq.clear();
		for (d = 0; d < 4; d++) {
			sort(q.begin(), q.end(), comp);
			for (int i = 0; i < q.size(); i++) {
				int x = q[i].first, y = q[i].second, z = dp[x][y] + 1;
				for (int j = 0; j < k; j++) {
					x += dx[d];
					y += dy[d];
					if (0 <= x && x < n && 0 <= y && y < m && s[x][y] == '.' && !c[x][y][d]) {
						c[x][y][d] = 1;
						if (dp[x][y] > z) {
							dp[x][y] = z;
							nq.push_back(make_pair(x, y));
						}
					} else {
						break;
					}
				}
			}
		}
		sort(nq.begin(), nq.end());
		nq.resize(unique(nq.begin(), nq.end()) - nq.begin());
		swap(q, nq);
	}
	int ans = dp[x2][y2];
	if (ans == 1001001) ans = -1;
	printf("%d\n", ans);
	return 0;
}
