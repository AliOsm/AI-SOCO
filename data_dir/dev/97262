#define _CRT_SECURE_NO_DEPRECATE
#include<cstdlib>
#include<cstdio>
#include<cmath>
#include<iostream>
#include<string>
#include<cstring>
#include<algorithm>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<unordered_map>
using namespace std;
typedef long long ll;
typedef long double ldb;
typedef double db;
typedef pair <int, int> pii;
ldb p = 3.14159265358979323, eps = 0.0000001;

# define pb push_back
# define mp make_pair
const int cnt = 100010;
int n, a, b, c, m, s, f, met[100050], l, pr[100010];
ll res, d[100010], rs = 10000000000;
vector <int> rt;
vector <vector <pair <int, int>> >vr;
set <pii> st;
/*#ifndef_MY_DEBUG
freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#endif*/
int main()
{
	//freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	cin >> n >> m >> s;
	vr.resize(n + 5);
	//cout << rs << endl;
	for (int i = 1; i <= n; ++i)
	{
		d[i] = rs;
	}
	for (int i = 0; i < m; ++i)
	{
		cin >> a >> b >> c;
		vr[a].push_back(mp(c, b));
		vr[b].push_back(mp(c, a));

	}
	cin >> l;
	d[s] = 0;
	st.insert(pii(0, s));
	for (int i = 1; i <= n; ++i)
	{
		if (st.empty())
		{
			break;
		}
		int v = (*st.begin()).second;
		st.erase(st.begin());

		for (int j = 0; j < vr[v].size(); ++j)
		{
			int to = vr[v][j].second;
			int lc = vr[v][j].first;
			if (d[to] > d[v] + lc)
			{
				//cout << "        " << -1 << endl;
				if (st.find(pii(d[to], to)) != st.end())
				{

					st.erase(st.find(pii(d[to], to)));
					d[to] = d[v] + lc;
					st.insert(pii(d[to], to));
				}
				else
				{
					d[to] = d[v] + lc;
					pr[to] = v;
					st.insert(pii(d[to], to));
				}

			}
		}
	}
	for (int i = 1; i <= n; ++i)
	{
		//	cout << "    " << d[i] << endl;
		if (d[i] == l)
		{
			res += 2;
		}
		if (d[i] < l)
		{
			for (int j = 0; j < vr[i].size(); ++j)
			{
				int to = vr[i][j].second;
				int w = vr[i][j].first;
				if (d[i] + w == l)
					continue;
				if (d[i] + w > l)
				{
					if (d[to] < l)
					{
						if (l - d[to] + l - d[i] == w)
						{
							++res;

						}
						if (l - d[to] + l - d[i] < w)
						{
							res += 2;//cout << "   " << 1 << endl;
						}
					}
					else
						res += 2;
				}

			}
		}

	}
	cout << res / 2 << endl;
	return 0;
}