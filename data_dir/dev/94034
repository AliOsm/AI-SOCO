#include <iostream>
#include <assert.h>
#include <stack>
#include <algorithm>
#include <queue>
#include <set>
#include <vector>
#include <queue>
#include <map>
#include <string.h>
#include <stdio.h>
#define sf scanf
#define pf printf
#define pb push_back
#define ll long long
#define ull unsigned long long

#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i )

using namespace std;

struct edge
{
    int a,b,c;
    int next;
    edge(){}
    edge(int a,int b,int c,int n):a(a),b(b),c(c),next(n){}
}e[1010000+1000];
int p[70200],tol;
void add(int a,int b,int c)
{
    e[tol]=edge(a,b,c,p[a]);
    p[a]=tol++;
}
int n,m;
int h[70005],gap[70005];
int INF;int s,t;
int min(int a,int b){return a<b?a:b;}
int dfs(int u,int inf)
{
    if(u==t)return inf;
    int d=inf, minh=INF;
    for(int i=p[u];i!=-1;i=e[i].next)
        if(e[i].c)
        {
            if(h[e[i].b]+1==h[u])
            {
                int ret=dfs(e[i].b,min(d,e[i].c));
                e[i].c-=ret; e[i^1].c+=ret;d-=ret;
                if(h[s]>=INF) return inf-d;
                if(!d)break;
            }
            minh=min(minh,h[e[i].b]);
        }
    if(d==inf)
    {
        if(--gap[h[u]]==0)h[s]=INF;
        h[u]=minh+1;gap[h[u]]++;
    }
    return inf-d;
}

int maxflow()
{
    int n=t+1;
    INF=n;
    for(int i=0 ;i<n ;i++)h[i]=0,gap[i]=0 ;
    gap[0]=n;
    int mflow=0;
    while(h[s]<INF)
    {
        int ret=dfs(s,1<<30);
        mflow+=ret;
    }
    return mflow;
}


int g[1000][1000];
int v[1000];

int main()
{
    int n,m;
    while( cin>>n>>m)
    {
        tol = 0;
        _clr( p );
        clr( g );
        clr( v );
        s = 0;
        t = 2 * n+1;
        int sum1 = 0;
        fr(i,0,n)
        {
            cin>>v[i+1];
            add( s,i+1, v[i+1] );
            add( i+1, s, 0 );

            add( i+1, i+n+1, v[i+1] );
            add( i + n + 1, i + 1, 0 );

            sum1 += v[i+1];
        }
        int sum = 0;
        fr(i,0,n)
        {
            int w;
            cin>>w;
            add( n+i+1, t,  w );
            add( t, n + i + 1, 0 );
            sum += w;
        }
        fr(i,0,m)
        {
            int a, b;
            cin>>a>>b;
            add( a, b + n, v[a] );
            add( b + n, a, 0 );
            add( b, a + n, v[b] );
            add( a + n, b, 0 );
        }

        int ans = maxflow();

        if( ans != sum || sum1 != sum )
        {
            cout<<"NO"<<endl;
        }
        else
        {
            cout<<"YES"<<endl;
            fr(i,1,n+1)
            {
                for( int j = p[i]; j != -1; j = e[j].next )
                {
                    int b = e[j].b;
                    int a = e[j].a;
                    if( a > b ) continue;
                    g[a][b-n] = e[j^1].c;
                }
            }
            fr(i,1,n+1)
            {
                fr(j,1,n+1)
                    cout<<g[i][j]<<" ";
                cout<<endl;
            }
        }
    }
}