#include <iostream>
#include <list>
#include <cstdio>
#include <vector>
#include <iterator>
#include <algorithm>
using namespace std;
 
class WebThread {
    int x, y;
    public: WebThread(int i, int j) {
    this->x = i;
    this->y = j;
    }
    public:
    // Setter
    void setX(int x) {
      this->x = x;
    }
 
    int getX() {
      return x;
    }
 
    void setY(int y) {
      this->y = y;
    }
 
    int getY() {
      return y;
    }
};
class DisjSet {
	int *rank, *parent, n;
 
public:
 
	DisjSet(int n)
	{
		rank = new int[n+1];
		parent = new int[n+1];
		this->n = n;
		makeSet();
	}
 
 
	void makeSet()
	{
		for (int i = 1; i <= n; i++) {
			parent[i] = i;
      rank[i] = 1;
		}
	}
 
	int find(int x)
	{
 
		if (parent[x] != x) {
 
 
			parent[x] = find(parent[x]);
 
		}
 
		return parent[x];
	}
 
	bool Union(int x, int y)
	{
 
		int xset = find(x);
		int yset = find(y);
 
 
		if (xset == yset)
			return false;
		if (rank[xset] < rank[yset]) {
			parent[xset] = yset;
		}
		else if (rank[xset] > rank[yset]) {
			parent[yset] = xset;
		}
 
		else {
			parent[yset] = xset;
			rank[xset] = rank[xset] + 1;
		}
		return true;
	}
bool checkSets(int a, int b)
{
    if (find(a) == find(b))
        return 1;
    else
        return 0;
}
};
 
 
int main()
{
    int n, m, q, k, j;
    vector<WebThread> adjList;
    vector<int> nodes;
    vector<WebThread> roadsToDestroy;
    vector<WebThread> roadsToBuild;
 
    scanf( "%d", &n);
    DisjSet obj(n);
    for(int i = 0; i < n - 1 ; i++ ) {
    scanf( "%d %d", &k ,&j );
 
    if (obj.Union(k, j) == false) {
         roadsToDestroy.push_back(WebThread(k, j));
    }
    }
 
        for (int i=1; i < n + 1; i++) {
        nodes.push_back(obj.find(i));
     }
 
 
 
 
    std::sort(nodes.begin(), nodes.end());
 
    vector<int>::iterator ip;
    ip = std::unique(nodes.begin(), nodes.begin() + n);
 
    nodes.resize(std::distance(nodes.begin(), ip));
    
    printf("%d\n", roadsToDestroy.size());
    for (int i=0; i < roadsToDestroy.size(); i++) {
      printf("%d %d %d %d\n", roadsToDestroy[i].getX(), roadsToDestroy[i].getY(), nodes[i], nodes[i + 1]);
    }
 
 
	return 0;
}