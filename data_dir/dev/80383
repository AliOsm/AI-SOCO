#pragma GCC optimize("O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const int MAXN = 201;


int main() {
#ifdef HOME
    freopen("in", "r", stdin);
#endif

    int test = 0;
    vector<int> h(2), d(2), l(2), r(2), p(2);
    while (cin >> h[0] >> d[0] >> l[0] >> r[0] >> p[0]) {
        cin >> h[1] >> d[1] >> l[1] >> r[1] >> p[1];


        if (p[0] == 100) {
            cout << 0 << endl;
            continue;
        }
        if (p[1] == 100) {
            cout << 1 << endl;
            continue;
        }

        double ans = 0;
        const int TURNS = 1e4;
        vector<vector<vector<double> > > pr(2, vector<vector<double> >(TURNS, vector<double>(MAXN, 0)));
        
        for (int it = 0; it < 2; it++) {
            pr[it][0][h[it ^ 1]] = 1;
            for (int i = 0; i < TURNS - 1; i++) {
                for (int ch = 0; ch <= h[it ^ 1]; ch++) {
                    if (pr[it][i][ch] < 1e-20) continue;

                    double pr1 = 1.0 / (r[it] - l[it] + 1);
                    double pr2 = 1 - p[it] / 100.0;
                    for (int x = l[it]; x <= r[it]; x++) {
                        pr[it][i + 1][ch] += pr[it][i][ch] * (1 - pr2) * pr1;
                        pr[it][i + 1][max(0, ch - x)] += pr[it][i][ch] * pr1 * pr2;
                    }
                }
            }
        }

        ans += pr[0][1][0];
        for (int i = 2; i < TURNS; i++) {
            int th = ((i - 1) * d[0] - 1) / d[1] + 1;
            th = min(th, TURNS - 1);
            double cur = (pr[0][i][0] - pr[0][i - 1][0]) * (1 - pr[1][th][0]);
            ans += cur;
        }

        printf("%.15f\n", ans);
    }

    return 0;
}
