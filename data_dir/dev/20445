#include <iostream>

#include <vector>
#include <algorithm>

using namespace std;

#define SZ(a) int((a).size())

#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)

typedef vector<int> VI;

class DisjointSet {
   size_t _n;
   size_t _size;
public:
   vector<int>    parent;
   vector<size_t> rank;

   DisjointSet(size_t n);
   void reset();
   void make_set(int u);
   size_t size() const;
   int find_rep(int u);
   bool union_rep(int u, int v);
};

DisjointSet::DisjointSet(size_t n)
   : _n(n), _size(n), parent(n, -1), rank(n, 0) {}

void DisjointSet::reset() {
   parent.assign(_n, -1);
   rank.assign(_n, 0);
   _size = _n;
}

void DisjointSet::make_set(int u) {
   parent[u] = -1;
   rank[u]   = 0;
// ++_size;
}

inline size_t DisjointSet::size() const {
   return _size;
}

int DisjointSet::find_rep(int u) {
// path compression
   return parent[u] < 0 ? u : parent[u] = find_rep(parent[u]);
}

bool DisjointSet::union_rep(int u, int v) {
   int u_root = find_rep(u);
   int v_root = find_rep(v);
   if (u_root == v_root)
      return false;
   if (rank[u_root] > rank[v_root])
      parent[v_root] = u_root;
   else {
      parent[u_root] = v_root;
      if (rank[u_root] == rank[v_root])
         rank[v_root] = rank[u_root] + 1;
   }
   --_size;
   return true;
}

#define MAXN 2004

int N;
int D[MAXN][MAXN];

bool check1() {
   REP(i, N)
      if (D[i][i] != 0) return false;
   REP(i, N) FOR(j, i+1, N-1) {
      if (D[i][j] == 0) return false;
      if (D[i][j] != D[j][i]) return false;
   }
   return true;
}

struct Edge {
   int u, v, weight;
   Edge(int _u, int _v, int _weight) : u(_u), v(_v), weight(_weight) {}
   bool operator<(const Edge& e) const {
      if (weight != e.weight) return weight < e.weight;
      if (u != e.u) return u < e.u;
      return v < e.v;
   }
};

VI adj[MAXN];

int D2[MAXN][MAXN];
void dfs(int root, int u, int p = -1, int d = 0) {
   D2[root][u] = d;
   for (int j = 0; j < adj[u].size(); ++j) {
      int v = adj[u][j];
      if (v == p) continue;
      dfs(root, v, u, d + D[u][v]);
   }
}

bool check2() {
   vector< Edge > edges;
   REP(i, N) FOR(j, i+1, N-1) {
      edges.push_back( Edge(i, j, D[i][j]) );
   }

   DisjointSet dset(N);
   sort(edges.begin(), edges.end());
   REP(j, SZ(edges)) {
      int u = edges[j].u, v = edges[j].v;
      if (dset.union_rep(u, v)) {
         adj[u].push_back(v);
         adj[v].push_back(u);
      }
   }

   REP(u, N)
      dfs(u, u);

   REP(u, N) REP(v, N)
      if (D[u][v] != D2[u][v])
         return false;

   return true;
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(NULL);

   cin >> N;
   REP(i, N) REP(j, N)
      cin >> D[i][j];

   if (!check1()) {
      cout << "NO\n";
      return 0;
   }

   if (!check2()) {
      cout << "NO\n";
      return 0;
   }

   cout << "YES\n";

   return 0;
}
