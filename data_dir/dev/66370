#include <bits/stdc++.h>

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define clr(dp,i) memset(dp,i,sizeof(dp))
#define opt     ios_base::sync_with_stdio(NULL);cin.tie(NULL);cout.tie(NULL);


using namespace std;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef pair<int, int> pii;
const long long MOD = 1e9+7;
const ld pi = 3.14159265358979323846264338327950288;
//========================================
vector<int> adj[300001];
ll sub[300001], par[300001], x, y;
void sol(int idx, int p)
{
	sub[idx] = 1;
	par[idx] = p;
	if(adj[idx].size() == 0)
	return ;
	for(int i=0; i<adj[idx].size(); i++)
	{
		if(adj[idx][i] == p)
		continue;
		sol(adj[idx][i], idx);
		sub[idx] += sub[adj[idx][i]];
	}
}
bool dfs(int i, int tmp)
{
	if(i == tmp)
	return 1;
	if(i == 0)
	return 0;
	if(par[i] == tmp)
		return 1;
	return dfs(par[i], tmp);
}
int main()
{
	ll n;
	cin >> n >> x >> y;
	for(int i=0; i<n-1; i++)
	{
		int l, r;
		cin >> l >> r;
		l--, r--;
		adj[l].pb(r);
		adj[r].pb(l);
	}
	sol(0, -1);
	ll ans; 
	if(dfs(x-1, y-1))
	swap(x, y);
	if(dfs(y-1, x-1))
	{
		for(int i=0; i<adj[x-1].size(); i++)
		{
			if(dfs(y-1, adj[x-1][i]) && par[x-1] != adj[x-1][i])
			{
				ans = ll(ll(sub[x-1] - sub[adj[x-1][i]])  + ll(n-sub[x-1]) ) * ll(sub[y-1]);
				//cout  << adj[x-1][i] << " | " << sub[x-1]  << " " << sub[adj[x-1][i]] << " " << (n-sub[x-1]) << endl;
				//cout << "YES" << endl;
				break;
			}
		}
		//cout << sub[y-1];
	}
	else
	ans = (ll)sub[x-1] * (ll)sub[y-1];
	//cout << ans << endl;
	cout << ((ll)n * ll(n-1)) - ans << endl;
}