//██████╗ ██╗   ██╗██╗      ██████╗ ███████╗
//██╔══██╗██║   ██║██║      ██╔══██╗██╔════╝
//██████╔╝██║   ██║██║█████╗██║  ██║█████╗
//██╔══██╗██║   ██║██║╚════╝██║  ██║██╔══╝
//██║  ██║╚██████╔╝██║      ██████╔╝███████╗
//╚═╝  ╚═╝ ╚═════╝ ╚═╝      ╚═════╝ ╚══════╝
#include <bits/stdc++.h>
#include <set>
using namespace std;

#define fst first
#define snd second
#define mp make_pair
#define mt make_tuple
//#define pb push_back
#define eb emplace_back

#define all(v) (v).begin(), (v).end()
//#define sz(v) ((int)(v).size())
#define sqr(x) ((x) * (x))

#define ADD_OPERATORS_IN(T, COMP) \
    bool operator < (const T& ot) const { return COMP(ot) == -1; } \
    bool operator > (const T& ot) const { return COMP(ot) == 1; } \
    bool operator == (const T& ot) const { return COMP(ot) == 0; } \
    bool operator != (const T& ot) const { return COMP(ot) != 0; }

#define ADD_OPERATORS_OUT(T, COMP) \
    bool operator < (const T& a, const T& b) const { return COMP(a, b) == -1; } \
    bool operator > (const T& a, const T& b) const { return COMP(a, b) == 1; } \
    bool operator == (const T& a, const T&b) const { return COMP(a, b) == 0; } \
    bool operator != (const T& a, const T&b) const { return COMP(a, b) != 0; }


typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

mt19937 mt_rand(chrono::system_clock::now().time_since_epoch().count());

template<typename T1, typename T2> inline bool upmax(T1& a, T2 b) { if (a < b) { a = b; return 1; } return 0; }
template<typename T1, typename T2> inline bool upmin(T1& a, T2 b) { if (b < a) { a = b; return 1; } return 0; }

const int maxn = (int) 3e5 + 10;
const int base = (int) 1e9 + 9;

const ld PI = acos(-1.);

int n;
vector<int> g[maxn];
set<int> g1[maxn];
int pred[maxn];
int sz[maxn];

bool used[maxn];

int dist[maxn];
vector<int> distV[maxn];


void dfs(int v, int p = -1, int r = 0) {
    dist[v] = r;
    distV[r].push_back(v);
    for (int to : g[v]) {
        if (to == p) continue;
        pred[to] = v;
        g1[v].insert(to);
        dfs(to, v, r + 1);
    }
}

vector<int> order;

void del(int v){
    used[v] = true;
    order.push_back(v);
    while (!g1[v].empty()) {
        del(*g1[v].begin());
    }
    for (int to : g1[v]) {
        del(to);
    }
    if (pred[v]) {
        g1[pred[v]].erase(v);
        sz[pred[v]] --;
    }
}

int main() {
    scanf ("%d", &n);
    for (int i = 1; i <= n; i ++) {

        int pp;
        scanf("%d", &pp);
        if (pp == 0) continue;

        g[pp].push_back(i);
        g[i].push_back(pp);
        sz[i]++;
        sz[pp]++;
    }

    set<int> even, odd;

    for (int i = 1; i <= n; i ++) {
        if (sz[i] & 1) odd.insert(i);
        else even.insert(i);
    }
    //vector<int> order;
    while (!even.empty()) {
        int v = *even.begin();
        order.push_back(v);
        used[v] = true;
        even.erase(even.begin());
        for (int to : g[v]) {
            if (used[to]) continue;
            sz[to] --;
            if (sz[to] & 1) {
                even.erase(to);
                odd.insert(to);
            } else {
                odd.erase(to);
                even.insert(to);
            }
        }
    }
    if (odd.empty()) {
        cout << "YES\n";
        for (int v: order) {
            cout << v << "\n";
        }
        return 0;
    } 
    order.clear();
    for (int i = 1; i <= n; i ++) {
        sz[i] = g[i].size();
        used[i] = false;
    }
    int root = -1;
    for (int i = 1; i <= n; i ++) {
        if (sz[i] & 1) {
            root = i;
        }
    }
    if (root == -1) {
        cout << "NO";
        return 0;
    }
    dfs(root);

    for (int i = n; i >= 0; i --) {
        if (distV[i].empty()) continue;
        for (int v : distV[i]) {
            if (used[v]) continue;
            if (sz[v] & 1) {
                continue;
            }
            del(v);
        }
    }
    if (order.size() == n) {
        cout << "YES\n";
        for (int v : order) cout << v << "\n";
    } else cout << "NO";
    return 0;
}