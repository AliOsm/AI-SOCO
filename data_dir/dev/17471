//  Copyright Â© 2018 Diego Garcia Rodriguez del Campo. All rights reserved.
#include<bits/stdc++.h>
#define MAX 200005
#define pii pair < i64 , i64 >
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
using namespace std;
typedef long long i64;

i64 N, M, Q;
set < i64 > sh;
set < i64 > sv;
i64 bit[MAX][2];

i64 qry( i64 l , i64 r , i64 t )
{
    i64 tmp = 0;
    for( i64 i = r; i > 0; i -= i & -i )
        tmp += bit[i][t];
    for( i64 i = l - 1; i > 0; i -= i & -i )
        tmp -= bit[i][t];
    return tmp;
}

i64 bin( i64 t )
{
    i64 ini = 1;
    i64 fin = max( N , M );
    while( ini < fin )
    {
        i64 mid = ( ini + fin + 1 ) / 2;
        if( qry( mid , max( N , M ) , t ) > 0 )
            ini = mid;
        else
            fin = mid - 1;
    }
    return ini;
}


void upd( i64 x , i64 v , i64 t )
{
    for( i64 i = x; i <= max( N , M ); i += i & -i )
        bit[i][t] += v;
}

int main()
{
    optimiza_io
    cin >> N >> M >> Q;
    sh.insert( 0 );
    sh.insert( M );
    sv.insert( 0 );
    sv.insert( N );
    
    upd( M , 1 , 0 );
    upd( N , 1 , 1 );
    while( Q -- )
    {
        char op;
        i64 x;
        cin >> op >> x;
        if( op == 'H' )
        {
            auto it2 = sh.lower_bound( x );
            auto it1 = it2;
            it1--;
            upd( *it2 - *it1 , -1 , 0 );
            upd( x - *it1 , 1 , 0 );
            upd( *it2 - x , 1 , 0 );
            sh.insert( x );
        }
        else
        {
            auto it2 = sv.lower_bound( x );
            auto it1 = it2;
            it1--;
            upd( *it2 - *it1 , -1 , 1 );
            upd( x - *it1 , 1 , 1 );
            upd( *it2 - x , 1 , 1 );
            sv.insert( x );
        }
        cout << bin( 0 ) * bin( 1 ) << "\n";
    }
    return 0;
}

