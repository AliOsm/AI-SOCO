#include <iostream>
#include <vector>
#include <string>

using namespace std;

vector<string> board;
vector<vector<int>> vis;


bool dfs (int row, int col, int prow, int pcol)
{
	int d[4][2] = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};
	vis[row][col] = 1;

	for (int i = 0; i < 4; i++) {
		int r = row + d[i][0], c = col + d[i][1];
		
		if (board[r][c] == board[row][col] && (r != prow || c != pcol)) {
			if (vis[r][c] == 1)
				return 1;
			else
				if (dfs (r, c, row, col) == 1)
					return 1;
		}
	}

	return 0;
}

bool cycle_enable ()
{
	for (size_t i = 1; i <= board.size() - 2; i++) {
		for (size_t j = 1; j <= board[0].size() - 2; j++)
			if (vis[i][j] == 0)
				if (dfs (i, j, 0, 0))
					return 1;
	}

	return 0;
}

int main()
{
	int n, m;
	cin >> n >> m;

	vis.assign (n + 2, vector<int>(m + 2, 0));
	board.assign (n + 2, string());

	board[n + 1] = board[0].assign(m + 2, '*');
	
	for (int i = 1; i <= n; i++) {
		cin >> board[i];
		board[i] = '*' + board[i] + '*';
	}

	cout << (cycle_enable () ? "Yes" : "No");
}
