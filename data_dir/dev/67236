
// Problem : D. Phoenix and Science
// Contest : Codeforces - Codeforces Round #638 (Div. 2)
// URL : https://codeforces.com/contest/1348/problem/D
// Memory Limit : 256 MB
// Time Limit : 2000 ms
// Powered by CP Editor (https://github.com/cpeditor/cpeditor)

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
ordered_set;	

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<pii, int> para;
const ll inf = 1e18 + 7;
const ll maxN = 1e6 + 5;
const ll MOD = 1e9 + 7;

int simulate(vector<int> ans) {
	pii p = {1, 1};
	for (auto x: ans) {
		assert(x >= 0);
		p.st = p.st + p.nd + x;
		p.nd += x;
	}
	return p.st;
}

void solve() {
	int n;
	cin >> n;
	if (n == 2) {
		cout << "1\n0\n";
		return;
	}
	if (n == 3) {
		cout << "1\n1\n";
		return;
	}
	pii p = {1, 1};
	vi ans;
	int ile = 31 - __builtin_clz(n);
	REP(i, ile - 2) {
		p.st = p.st * 2 + 1;
		ans.pb(p.nd);
		p.nd *= 2;
	}
	int z = n - p.st;
	//cout << z << endl;
	int l = p.nd; int r = 2 * p.nd;
	//cout << 3 * r << endl;
	int res = 0;
	while (l < r) {
		int x = (l + r) / 2;
		if (2 * x <= z && 3 * x >= z) {
			res = x;
			break;
		} else {
			if (2 * x > z) {
				r = x - 1;
			} else {
				assert(3 * x < z);
				l = x + 1;
			}
		}
	}
	if (res == 0) {
		FOR(i, l, l + 10) {
			if (i <= z && 3 * i >= z) {
				res = i;
				break;
			}
		}
	}
	//cout << p.st << " " << p.nd << " " << res << endl;
	ans.pb(res - p.nd);
	p.st += res;
	p.nd = res;
	ans.pb(n - (p.st + p.nd));
	assert(simulate(ans) == n);
	cout << sz(ans) << "\n";
	for (auto x: ans) cout << x << " ";
	cout << "\n";
}

// sprawdz MODULO!
int main() {
    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
	ios_base::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
	int t; cin >> t;
	REP(_, t) solve();
	return 0;
}
 
