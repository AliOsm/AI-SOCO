#include <bits/stdc++.h>
using namespace std;
map<int, vector<int>> graph;
map<int, int> visit;
vector<int> p;

int dfs(int v){
  visit[v] = 1;
  p.push_back(v);
  for(auto x: graph[v]){
    if(visit.count(x) == 0){
      return dfs(x)+1;
    }
  }
  return 1;
}

int main(){
  ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(0);
  int q,n,m,tmp;
  cin>>n>>m;
  int *res = new int[n];

  for(int i=0;i<m;i++){
    cin>>q;
    vector<int> v;
    for(int j=0;j<q;j++){
      cin>>tmp;
      v.push_back(tmp);
    }
    int si = v.size();
    for(int j =0;j<si-1;j++){
      graph[v[j]-1].emplace_back(v[j+1]-1);
      graph[v[j+1]-1].emplace_back(v[j]-1);
      
    }
    
  }

  for(int i=0;i<n;i++){
    if(visit.count(i) == 0){
      p.clear();
      //int count = dfs(i);
      //for(auto x: p){
        //res[x] = count;
      int count = 0;
      stack <int> STACK;
      STACK.push(i);
      while(!STACK.empty()){
        int V = STACK.top();
        STACK.pop();
        ++count;
        visit[V] = 1;
        p.push_back(V);
        for(auto w: graph[V]){
          if(visit.count(w) == 0){
            STACK.push(w);
            visit[w] = 1;
          }
        }
      }
      for(auto x: p){
        res[x] = count;
      }
      
    }
  }

  for(int i =0;i<n;i++)
    cout<<res[i]<<" ";
    cout<<"\n";
  
  return 0;
}

