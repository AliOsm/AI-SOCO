#include <bits/stdc++.h>
#define pb push_back
#define all(v) (v).begin() , (v).end()
#define popcnt(x) __builtin_popcount(x)
#define inf 0x3f3f3f3f
#define watch(x) cout << (#x) << " is " << (x) << endl
#define rand() (rand() << 15 | rand())

using namespace std;
typedef long long  ll;
typedef long double  ld;

struct Song{
    int len , b;
    bool operator < (const Song &other) const{
        return b < other.b;
    }
};
set<pair<int , int> > pool;
set<int> best;
vector<Song> v;
ll sumBest = 0;
int n , k;

ll getBest(){
    return sumBest;
}

void update(int i){
    if(best.find(i) != best.end()){
        sumBest -= v[i].len;
        best.erase(i);
        if((int)pool.size()){
            pair<int , int> cur = *pool.rbegin();
            pool.erase(*pool.rbegin());
            sumBest += cur.first;
            best.insert(cur.second);
        }
    }
    else{
        pool.erase(*pool.find({v[i].len , i}));
    }
}
int main(){
#ifndef ONLINE_JUDGE
    freopen("input.txt" , "r" , stdin);
#endif
    ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0);
    cin >> n >> k;

    // sort all songs ascending by their beauty
    // iterate over them and for each song assume that this song included as a minimum beauty in your set
    // dynamically update the best k - 1 songs fits with the minimum you choose

    v.resize(n);
    for(auto &x : v)
        cin >> x.len >> x.b;

    sort(all(v));
    for(int i = 0 ; i < n ; ++i)pool.insert({v[i].len , i});

    int rem = k - 1;
    while(rem--){
        pair<int , int> cur = *pool.rbegin();
        pool.erase(*pool.rbegin());
        sumBest += cur.first;
        best.insert(cur.second);
    }

    ll ans = 0;
    for(int i = 0 ; i < n ; ++i){
        update(i);

        ll sumLen = v[i].len + getBest();
        ll minBeauty = v[i].b;
        ans = max(ans , sumLen * minBeauty);
    }

    cout << ans << "\n";
}
