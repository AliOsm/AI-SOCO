///God help me.
///Created by Al-amin.
///Time : 2018-06-09-10.18

#include<bits/stdc++.h>

using namespace std;
#define ll long long
ll inf = 1e18;

int N , M;
bool valid(int n , int m){
    if(n >= 0 and n < N and m >= 0 and m < M)return false;
    else return true;
}
ll num[1002][1010] , dp[1002][1020][4];
ll solve0(int n , int m){
    if(n == 0 && m == 0)return num[n][m];
    else if(valid(n,m))return -inf;
    ll &ret = dp[n][m][0];
    if(ret != -1)return ret;
    ret = 0;
    ret += num[n][m] + max(solve0(n-1,m) , solve0(n,m-1));
    return ret;
}
ll solve1(int n ,int m){
    if(n == 0 && m == (M-1))return num[n][m];
    else if(valid(n,m))return -inf;
    ll &ret = dp[n][m][1];
    if(ret != -1)return ret;
    ret = 0;
    ret += num[n][m] + max(solve1(n , m + 1) , solve1(n-1, m));
    return ret;
}
ll solve2(int n , int m){
    if(n == (N-1) && m == 0)return num[n][m];
    else if(valid(n,m))-inf;
    ll &ret = dp[n][m][2];
    if(ret != -1)return ret;
    ret = 0;
    ret += num[n][m] + max(solve2(n , m - 1) , solve2(n+1,m));
    return ret;
}
ll solve3(int n , int m){
    if(n == (N-1) and m == (M-1))return num[n][m];
    else if(valid(n,m))return -inf;
    ll &ret = dp[n][m][3];
    if(ret != -1)return ret;
    ret = 0;
    ret += num[n][m] + max(solve3(n+1,m) , solve3(n , m+1));
    return ret;
}
ll Max(ll a , ll b , ll c , ll d){
    return a+b+c+d;
}
void print(int k){
    for(int i = 0; i<N; i++){
        for(int j = 0; j<N; j++){
            cout << dp[i][j][k] << " ";
        }
        cout << endl;
    }
    cout << endl;
}
int main()
{
    cin >> N >> M;
    for(int i = 0; i<=1000; i++){
        for(int j = 0; j<=1000; j++){
            for(int k = 0; k<4; k++)
                dp[i][j][k] = -1;
        }
    }
    for(int i = 0; i<N; i++){
        for(int j = 0; j<M; j++)cin >> num[i][j];
    }
    ll ans = -inf;
    for(int i = 0; i<N; i++){
        for(int j = 0; j<M; j++){
            dp[i][j][0] = solve0(i,j);
            dp[i][j][1] = solve1(i,j);
            dp[i][j][2] = solve2(i,j);
            dp[i][j][3] = solve3(i,j);
        }
    }
    //print(0) ;
    //print(1) ;
    //print(2) ;
    //print(3) ;
    for(int i = 1; i<N-1; i++){
        for(int j = 1; j<M-1; j++){
            ll sub = 4 * num[i][j];
            ll a , b , c ,d;
            a = dp[i-1][j][0] + dp[i+1][j][3];
            b = dp[i][j-1][2] + dp[i][j+1][1];
            c = dp[i][j-1][0] + dp[i][j+1][3];
            d = dp[i-1][j][1] + dp[i+1][j][2];
            //cout << i << " " << j << " " << a << " " << b << " " << c << " " << d << endl;
            ans = max(ans , max(a+b , c+d));
        }
    }
    cout << ans << endl;
}
