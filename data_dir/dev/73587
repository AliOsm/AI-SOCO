#include <bits/stdc++.h>
using namespace std;

vector<vector<int> > g;
vector<int> c;
vector<int> ans;
  int root;

int dfs(int u, int p) {
	int disrespect = 0;
	for (int i = 0; i < (int) g[u].size(); i++) {
		if (g[u][i] != p) {
			if (c[g[u][i]] == 1) {
				disrespect++;
			}
		}
	}
	if (c[u] == 1 && disrespect == (int) g[u].size() - (u != root)) {
		ans.push_back(u);
	}
	for (int i = 0; i < (int) g[u].size(); i++) {
		if (g[u][i] != p) {
			dfs(g[u][i], u);
		}
	}
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  int n;
  cin >> n;
  g.resize(n);
  c.resize(n);
  for (int i = 0; i < n; i++) {
  	int j, k;
  	cin >> j >> k;
  	j--;
  	if (j != -2) {
  		g[i].push_back(j);
  		g[j].push_back(i);
  	}
  	c[i] = k;
  	if (j == -2) {
  		root = i;
  	}
  }
  dfs(root, -1);
  sort(ans.begin(), ans.end());
  if (ans.empty()) {
  	cout << -1 << '\n';
  	return 0;
  }
  for (int i = 0; i < (int) ans.size(); i++) {
  	if (i > 0) {
  		cout << ' ';
  	}
  	cout << ans[i] + 1;
  }
  cout << '\n';
  return 0;
}