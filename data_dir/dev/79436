///The way I solved this problem, you can call it the traversal idea of MO's algorithm or
///a little bit harder version of two pointer.
///We've to find the maximum length of consecutive droid who can be destroyed by firing less than k shots.
///I've iterated the array with the information of all the droids
///At each i, I've added the current values in a priority Queue with the index of current type of droid at add() function.
///Then I called the remove() function, while the sum of top value of every index is greater than k, I popped the top
///Whenever I found the value of Right - left + 1 is greater than maximum ans, I've updated the values of ans array

///*** One Last Try ***///
#include<bits/stdc++.h>
using namespace std;
#pragma comment(linker, "/stack:200000000")
#define ll long long int
#define inf ( int )( 1e9 + 1e9 )
#define mxs (int)( 1e6 + 10 )
#define md  int mid = ( l + r )>>1;
#define mod (ll)(1e9)+7
//int dx[]={+1,0,+0,-1};///Four Directions
//int dy[]={+0,-1,+1,+0};///Four directions
//int dx [] = {+1,-1,+0,+0,-1,-1,+1,+1};///Eight Directions
//int dy [] = {+0,+0,+1,-1,+1,-1,-1,+1};///Eight Directions
int t, n, m, j, k,a, b, c, d, e, f, i, sz, left_, right_,sum;
string s,s2;
int ar [ 6 ][ mxs ] , ans [ 6 ];
priority_queue < pair < int , int > > pq [ 6 ];
void brainfuck();
void add_( int idx );
void remove_();
void update();
int main()
{
    ios_base::sync_with_stdio(NULL);
    cin.tie(NULL);
    cout.tie(NULL);
    brainfuck();
    return 0;
}
void brainfuck()
{
    cin>>n>>m>>k;
    for ( i = 1 ; i <= n; i++ )
        for ( j = 1 ; j <= m; j++ )cin>>ar [ j ] [ i ];
    for ( i = 1 ; i <= n; i++ )
    {
        right_ = i;
        add_( i );
        remove_();
        if( right_ - left_ + 1 >= sz && right_ >= left_ )update();
    }
    for ( i = 1 ; i <= m; i++ )cout<<ans [ i ]<<" ";
}
void add_( int idx )
{
    for ( j = 1 ; j <= m; j++ )
        pq [ j ].push( { ar [ j ] [ i ] , i } );
}
void remove_()
{
    sum = 0;
    for ( j = 1 ; j <= m; j++ )
        sum += pq [ j ].top().first;
    while( sum > k && left_ <= right_ )
    {
        sum = 0;
        for ( j = 1; j <= m; j++ )
        {
            if ( pq[ j ].top().second <= left_ )pq [ j ].pop();
            sum += pq [ j ].top().first;
        }
        left_++;
    }
}
void update()
{
    sz = right_ - left_ + 1;
    for ( j = 1 ; j <= m; j++ )ans [ j ] = pq [ j ].top().first;
}
