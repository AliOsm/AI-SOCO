#include <bits/stdc++.h>
#define Mid ((L + R) >> 1)
#define Left (Node << 1)
#define Right (Node << 1 | 1)

using namespace std;

const int K = 26;
const int N = 200200;
const int M = 4 * N;

int n;
int Min[K];
int Max[K];
int Tree[M];
vector <int> Idx[K];

void min_self(int& x, int y)
{
    if(x > y)   x = y;
}

void max_self(int& x, int y)
{
    if(x < y)   x = y;
}

void Build(int Node = 1, int L = 0, int R = n - 1)
{
    Tree[Node] = 0;

    if(L == R)
    {
        Tree[Node] = 1;
        return ;
    }

    Build(Left, L, Mid);
    Build(Right, Mid + 1, R);
}

void Update(int i, int j, int x, int Node = 1, int L = 0, int R = n - 1)
{
    if(i > j || L > R)  return ;
    if(j < L || R < i)  return ;

    if(i <= L && R <= j)    return max_self(Tree[Node], x);

    Update(i, j, x, Left, L, Mid);
    Update(i, j, x, Right, Mid + 1, R);
}

int Get(int i, int Node = 1, int L = 0, int R = n - 1)
{
    if(L == R)  return Tree[Node];

    return max(Tree[Node], i <= Mid ? Get(i, Left, L, Mid) : Get(i, Right, Mid + 1, R));
}

int main()
{
    string s;   cin >> n >> s;

    for(int i = 0; i < n; i++)  s[i] -= 'a', Idx[s[i]].push_back(i);

    for(int k = 0; k < K; k++)  Min[k] = n, Max[k] = -1;

    for(int i = 0; i < n; i++)  min_self(Min[s[i]], i), max_self(Max[s[i]], i);

    Build();

    vector <int> Ans(n);

    for(int k = 0; k < K; k++)
    {
        for(int i : Idx[k])
        {
            Ans[i] = Get(i);
            Update(0, i - 1, Ans[i] + 1);
        }
    }

    int Res = *max_element(Ans.begin(), Ans.end());

    if(Res > 2) return 0 * puts("NO");

    puts("YES");

    for(int x : Ans)    printf("%d", x - 1);
    puts("");
}
