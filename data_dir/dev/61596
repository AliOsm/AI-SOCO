#include<bits/stdc++.h>
#define rep(i,start,lim) for(lld i=start;i<lim;i++)
#define repd(i,start,lim) for(lld i=start;i>=lim;i--)
#define scan(x) scanf("%lld",&x)
#define print(x) printf("%lld ",x)
#define f first
#define s second
#define pb push_back
#define mp make_pair
#define br printf("\n")
#define sz(a) lld((a).size())
#define YES printf("YES\n")
#define NO printf("NO\n")
#define all(c) (c).begin(),(c).end()
using namespace std;
#define INF         1011111111
#define LLINF       1000111000111000111LL
#define EPS         (double)1e-10
#define MOD         1000000007
#define PI          3.14159265358979323
using namespace std;
typedef long double ldb;
typedef long long lld;
lld powm(lld base,lld exp,lld mod=MOD) {lld ans=1;while(exp){if(exp&1) ans=(ans*base)%mod;exp>>=1,base=(base*base)%mod;}return ans;}
typedef vector<lld> vlld;
typedef pair<lld,lld> plld;
typedef map<lld,lld> mlld;
typedef set<lld> slld;
#define sync ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define endl '\n'
#define N 200005
#define fre freopen("1.in","r",stdin); freopen("1.out","w",stdout);
vlld adj[N];
struct DSU{
  lld sze[N],arr[N];
  void init()
  {
    rep(i,1,N) arr[i]=i,sze[i]=1;
  }
  void get_union(lld a,lld b)
  {
    lld root_a=root(a),root_b=root(b);
    if(sze[root_a]<sze[root_b])
      arr[root_a]=arr[root_b],sze[root_b]+=sze[root_a];
    else
      arr[root_b]=arr[root_a],sze[root_a]+=sze[root_b];
  }
  lld root(lld x)
  {
    while(arr[x]!=x) arr[x]=arr[arr[x]],x=arr[x];
    return x;
  } 
} dsu;
lld col[N],tot[2],edges[N][2],far,maxm_dis;
void dfs(lld curr, lld par,lld dis) {
  if(dis > maxm_dis) far = curr, maxm_dis = dis;
  for(auto i:adj[curr]) if(i!=par) dfs(i,curr,dis+1);
}
int main()
{
  sync;
  lld n,x,y,root=-1;
  dsu.init();
  cin>>n;
  rep(i,1,n+1) cin>>col[i];
  rep(i,1,n) {
    cin>>edges[i][0]>>edges[i][1];
    if(col[edges[i][0]] == col[edges[i][1]]) dsu.get_union(edges[i][0],edges[i][1]);
  }
  rep(i,1,n) {
    x = edges[i][0], y = edges[i][1];
    if(col[x] != col[y]) {
      lld rootx = dsu.root(x), rooty = dsu.root(y);
      if(rootx == rooty) continue;
      root = rootx; //Arbitrary root
      adj[rootx].pb(rooty);
      adj[rooty].pb(rootx);
    }
  }
  if(root == -1) return 0*print(0LL);
  maxm_dis = 0;
  dfs(root,-1,0);
  maxm_dis = 0;
  dfs(far,-1,0);
  cout<<((maxm_dis + 1)/2);
  return 0;
}