#include<bits/stdc++.h>
#include <regex>
#include<ext/numeric>
#include<ext/hash_map>
using namespace std;
using namespace __gnu_cxx;

#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)  (int)v.size()
#define WHITE -1
#define GREY   0
#define BLACK  1
#define CLR(a,v) memset(a,v,sizeof a)
#define PC(x) __builtin_popcount(x)
#define MP make_pair

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<ll> vll;
//typedef unsigned int ui;

typedef complex<double> point;
//#define X real()
#define Y imag()
#define vec(a,b) ((b)-(a))
#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define colliner pointOnLine
#define same(a,b) (lengthSqr(vec(a,b))<EPS)
#define lengthSqr(v) (dot(v,v))

const double PI = acos(-1.0);

int dx[] = { 0, -1, 0, 1, -1, -1, 1, 1 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };

int DX[] = { 1, 1, -1, -1, 2, 2, -2, -2 };
int DY[] = { 2, -2, 2, -2, 1, -1, 1, -1 };

const int MAX = 1e5 + 5, MOD = 1e9 + 7, oo = (1 << 30);
const ll OO = 1ll << 60, MAXN = 1e15;
const double EPS = 1e-9;

int n, a, b, ans[MAX], p[MAX], mrk[MAX], st[MAX], X[MAX];
map<int, int> mp;

int findSet(int x) {
	return p[x] == x ? x : p[x] = findSet(p[x]);
}

bool sameSet(int u, int v) {
	return findSet(u) == findSet(v);
}

void unionSet(int u, int v) {
	if (sameSet(u, v))
		return;
	int s1 = findSet(u), s2 = findSet(v);
	p[s2] = s1;
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
//	freopen("IN.in", "r", stdin);
//	freopen("OUT.txt", "w", stdout);
#endif
	scanf("%d%d%d", &n, &a, &b);
	for (int i = 1; i <= n; ++i) {
		int x;
		scanf("%d", &x);
		X[i] = x;
		mp[x] = i;
		p[i] = i;
	}
	for (int i = 1; i <= n; ++i) {
		if (mp[a - X[i]])
			unionSet(i, mp[a - X[i]]), mrk[i] = 1;
		if (mp[b - X[i]])
			unionSet(i, mp[b - X[i]]), mrk[i] += 2;
		st[i] = 3;
	}
	for (int i = 1; i <= n; ++i)
		st[findSet(i)] &= mrk[i];
	for (int i = 1; i <= n; ++i)
		if (st[i] == 0)
			return puts("NO");
	puts("YES");
	for (int i = 1; i <= n; ++i)
		if (st[findSet(i)] == 1)
			printf("0 ");
		else
			printf("1 ");
}
