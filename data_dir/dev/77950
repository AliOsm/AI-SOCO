#include <bits/stdc++.h>
using namespace std;

struct tower
{
    int index;
    int height;
};

bool operator < (const tower& A, const tower& B)
{
    return A.height < B.height || (A.height == B.height && A.index < B.index);
}

int main()
{
    int n, k;
    cin >> n >> k;

    if(n==1)
    {
        cout << "0 0";
        return 0;
    }

    set<tower> S;
    for(int i=1; i<=n; i++)
    {
        tower T;
        cin >> T.height;
        T.index=i;
        S.insert(T);
    }

    vector<pair<int, int>> ans;
    typedef set<tower>::iterator it_t;

    for(int i=0; i<k; i++)
    {
        it_t it=S.begin();
        tower lo=*it;
        S.erase(it);

        it=S.end();
        it--;
        tower hi=*it;
        S.erase(it);

        //cout << lo.height << ' ' << hi.height << endl;
        //cin.get();

        if(lo.height >= hi.height - 1)
        {
            S.insert(lo);
            S.insert(hi);
            break;
        }

        ans.push_back(make_pair(hi.index, lo.index));
        lo.height++;
        hi.height--;

        S.insert(hi);
        S.insert(lo);
    }

    it_t it=S.begin();
    tower lo=*it;
    //S.erase(it);

    it=S.end();
    it--;
    tower hi=*it;

    cout << hi.height - lo.height << ' ' << ans.size() << '\n';
    for(int i=0; i<(int)ans.size(); i++) cout << ans[i].first << ' ' << ans[i].second << '\n';

    return 0;
}
