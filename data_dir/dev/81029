#pragma comment(linker, "/STACK:256000000")

#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <atomic>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <array>
#include <random>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <complex>
#include <tuple>
#include <cstdlib>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<int, int64> pil;
const int INF = (int)(2e9 + 1e5);
const int64 LINF = (int64)(2e18);
const int64 BASE = 1003;
const double EPS = 1e-9;
#define sq(x) ((x)*(x))
#define FAIL() (*(int*)(0))++
#define ASSERT(exp) {if (!(exp)) exit(0);}
#define y1 fjgjf
#ifdef _MY_DEBUG
#define I64d lld
#endif
//typedef complex<double> comp;
const int MOD = 1000000007;

int tnum;

int add(int a, int b) {
    a += b;
    if (a >= MOD) {
        a -= MOD;
    }
    return a;
}

int sub(int a, int b) {
    a -= b;
    if (a < 0) {
        a += MOD;
    }
    return a;
}

int mul(int a, int b) {
    return int64(a) * b % MOD;
}

int bin_pow(int a, int b) {
    int res = 1;
    while (b) {
        if (b & 1) {
            res = mul(res, a);
        }
        b >>= 1;
        a = mul(a, a);
    }
    return res;
}

struct point {
    int x, y;
};

struct segment {
    point p1, p2;
};

struct event {
    point p;
    int delta;
};

const int MAXN = 200500;

int n;
int64 t;
int a[MAXN];
int f[MAXN], bf[MAXN];
int bpw[MAXN];
int ans;

void init() {
    scanf ("%d%lld", &n, &t);
    for (int i = 1; i <= n; ++i) {
        scanf ("%d", &a[i]);
    }
}

int get_c(int n, int k) {
    return mul(mul(bf[k], bf[n - k]), f[n]);
}

void add_to_ans(int pos, int mx, bool subb) {
    //cerr << pos << " " << mx << " " << sub << endl;
    int p = mul(sub(get_c(pos, mx), (subb ? get_c(pos - 1, mx) : 0)), bpw[pos]);
    //cerr << bpw[pos] << endl;
    int delta = mul(pos - 1, p);
    ans = add(ans, delta);
}

void solve() {
    int mx = 0;
    int64 sum = 0;
    for (int i = 1; i <= n; ++i) {
        sum += a[i];
        ++mx;
        bool was = false;
        while (mx >= 0 && sum + mx > t) {
            add_to_ans(i, mx, mx != i && !was);
            --mx;
            was = true;
        }
    }
    ++mx;
    bool was = false;
    while (mx >= 0) {
        add_to_ans(n + 1, mx, mx != n + 1 && !was);
        --mx;
        was = true;
    }
}

void print_answer() {
    printf("%d\n", ans);
}

void precalc() {
    bf[0] = f[0] = 1;
    for (int i = 1; i < MAXN; ++i) {
        f[i] = mul(f[i - 1], i);
        bf[i] = bin_pow(f[i], MOD - 2);
    }
    bpw[0] = 1;
    auto back_two = bin_pow(2, MOD - 2);
    for (int i = 1; i < MAXN; ++i) {
        bpw[i] = mul(bpw[i - 1], back_two);
    }
}

void run()
{
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(getenv("OUTPUT_PATH"), "wt", stdout);
#endif // _MY_DEBUG
    precalc();
    int t = 1; //cin >> t;
    for (tnum = 1; tnum <= t; ++tnum)
    {
        init();
        solve();
        print_answer();
    }
}

int main()
{
    srand(92);
    ios_base::sync_with_stdio(false); cin.tie(0);
    run();
    return 0;
}