/****** BISMILLAH HIR RAHMANIR RAHIM ******/

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

typedef long long ll;
typedef pair <ll, ll> pii;
typedef pair <ll, ll> pll;
typedef vector<pair<ll,ll> > vpii;

// Order Statistic Tree

/* Special functions:

        find_by_order(k) --> returns iterator to the kth largest element counting from 0
        order_of_key(val) --> returns the number of items in a set that are strictly smaller than our item
*/

typedef tree<
ll,
null_type,
less<ll>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;


#define EPS 1e-9
#define NL cout<<endl;
#define MP make_pair
#define SORT(a) sort (a.begin(), a.end())
#define REVERSE(a) reverse (a.begin(), a.end())
#define ALL(a) a.begin(), a.end()
#define PI acos(-1)
#define ms(x,y) memset (x, y, sizeof (x))
#define pb push_back
#define DBG(a) cout<< #a <<" --> "<<(a)<<endl;
#define FastIO ios::sync_with_stdio(false); cin.tie(0);cout.tie(0)
#define IN freopen("input.txt","r+",stdin)
#define OUT freopen("output.txt","w+",stdout)
/* Direction Array */

// ll fx[]={1,-1,0,0};
// ll fy[]={0,0,1,-1};
// ll fx[]={0,0,1,-1,-1,1,-1,1};
// ll fy[]={-1,1,0,0,1,1,-1,-1};

template <class T> inline T bigmod(T p,T e,T M)
{
    ll ret = 1;
    for(; e > 0; e >>= 1)
    {
        if(e & 1)
            ret = (ret * p) % M;
        p = (p * p) % M;
    }
    return (T)ret;
}
template <class T> inline T bigpow(T p,T e)
{
    ll ret = 1;
    for(; e > 0; e >>= 1)
    {
        if(e & 1)
            ret = (ret * p);
        p = (p * p);
    }
    return (T)ret;
}

template <class T> inline T modinverse(T a,T M)
{
    return bigmod(a,M-2,M);
}
template < class T1,class T2>
ostream &operator <<(ostream &os,const pair < T1,T2 > &p)
{
    os<<"{"<<p.first<<","<<p.second<<"}";
    return os;
}
template < class T1,class T2>
pair <T1 ,T2> operator + ( const  pair < T1,T2 > &p1,const pair < T1,T2 > &p2)
{
    return make_pair(p1.first+p2.first,p1.second+p2.second);
}

///
const ll oo =1000000007;

const ll N=1e5+5;









struct Node
{
    ll value,lazy;
    Node * left, * right;
    Node(Node *left,Node * right): lazy(0)
    {
        this->left=left;
        this->right=right;
        value=left->value+right->value;
    }
    Node(ll value) : value(value),lazy(0) {}
};
void UpdateRange(Node * head, ll ss, ll se, ll us,ll ue, ll diff)
{
    ll mid = ss+(se-ss)/2;

    if (head->lazy != 0)
    {
        head->value += (se-ss+1)*head->lazy;
        if (ss != se)
        {
            head->left->lazy+=head->lazy;
            head->right->lazy+=head->lazy;
        }
        head->lazy = 0;
    }

    if (ss>se || ss>ue || se<us)
        return ;

    if (ss>=us && se<=ue)
    {
        head->value += (se-ss+1)*diff;

        if (ss != se)
        {
            head->left->lazy+=diff;
            head->right->lazy+=diff;
        }
        return;
    }


    UpdateRange(head->left, ss, mid, us, ue, diff);
    UpdateRange(head->right, mid+1, se, us, ue, diff);

    head->value=head->left->value+head->right->value;

}
ll GetSum(Node * head,ll ss, ll se, ll qs, ll qe)
{

    ll mid = ss+(se-ss)/2;

    if (head->lazy != 0)
    {
        head->value += (se-ss+1)*head->lazy;
        if (ss != se)
        {
            head->left->lazy+=head->lazy;
            head->right->lazy+=head->lazy;
        }
        head->lazy = 0;
    }

    if (ss>se || ss>qe || se<qs)
        return 0;

    if (ss>=qs && se<=qe)
        return head->value;

    return GetSum(head->left,ss,mid,qs,qe)+GetSum(head->right,mid+1,se,qs,qe);
}

Node * Build(ll ss,ll se)
{
    if(ss==se)
    {
        return new Node(0);
    }
    ll mid = ss+(se-ss)/2;
    return new Node(Build(ss,mid),Build(mid+1,se));
}




ll a[N];
vector < pii > adj[N];

int main()
{
//    IN;
//    OUT;
    ll n=0;
    cin>>n;
    for(ll i=1; i<=n; i++)
    {
        cin>>a[i];
    }
    a[0]=oo;
    a[n+1]=oo;
    for(ll i=1;i<=n;i++)
    {
        ll j=i+1;
        for( j=i+1;j<=n && a[i]==a[j];j++);
        j--;
        ll l= a[i-1];
        ll r= a[j+1];
        if(l>r) swap(l,r);
        adj[a[i]].push_back(make_pair(l,r));
        i=j;
    }
//    for(ll i=1;i<=n;i++)
//    {
//        DBG(i);
//        for(auto  j: adj[i])
//            DBG(j);
//    }
    ll ans=0;
    Node * head=Build(1,n);
    for(ll i=1;i<=n;i++)
    {
        for(pii j: adj[i])
        {
            if(j.first>i)
                UpdateRange(head,1,n,1,i,1);
            else if(j.second<i)
            {
                UpdateRange(head,1,n,j.second+1,i,1);
                UpdateRange(head,1,n,1,j.first,-1);
            }
            else if(j.first<i)
            {
                UpdateRange(head,1,n,j.first+1,i,1);
            }
        }
        //UpdateRange(head,1,n,i,i,adj[i].size());
        ans+=GetSum(head,1,n,1,i);
//        NL;
//        DBG(i);
//        for(ll j=1;j<=i;j++)
//            DBG(GetSum(head,1,n,j,j));
//        DBG(ans);
    }
//    DBG(ans);
    cout<<ans<<endl;
}
