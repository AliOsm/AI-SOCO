/*
ID: Tariqul
PROG: 
LANG: C++
*/

//#ifdef localhost
//#include <stdafx.h>
//#endif

#include <algorithm> 
#include <cctype> 
#include <cmath> 
#include <cstdio> 
#include <cstdlib> 
#include <cstring> 
#include <deque> 
#include <iostream> 
#include <list> 
#include <map> 
#include <numeric> 
#include <queue> 
#include <set> 
#include <sstream> 
#include <stack> 
#include <string> 
#include <vector>

using namespace std; 

#define fo(i,j,n) for(i=j;i<n;++i)
#define Fo(i,j,n) for(i=n-1;i>=j;--i)
#define foo(i,j,v) fo(i,j,sz(v))
#define Foo(i,j,v) Fo(i,j,sz(v))
#define li(v) v.begin(),v.end()
#define sz(v) ((int)v.size())
#define CLR(a,v) memset((a),(v),sizeof(a))
#define inf 1000000001
//typedef long long Long;
typedef __int64 Long;
#define pi (2*acos(0))
#define eps 1e-9

#define two(X) (1<<(X))
#define twoL(X) (((Long)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)

char BUFFER[100000 + 5];
bool readn(int &n)	{ return scanf("%d",&n) == 1; } 
bool readl(Long &n)	{ return scanf("%I64d",&n) == 1; } 
bool readd(double &n){ return scanf("%lf",&n) == 1; } 
bool reads(string &s){ s = ""; int n = scanf("%s",BUFFER); if(n == 1)s = BUFFER; return n == 1; }
bool readln(string &s){ char *valid = gets(BUFFER); if(valid)s = BUFFER; return ((bool)valid); }

const int maxn = 100000 + 10;
//const int maxn = 1 + 10;
int sum[35][maxn],csum[35][maxn];
int L[maxn],R[maxn],Q[maxn];

bool isAllOne(int i,int j,int k)
{
	int n1 = (csum[k][j] - csum[k][i-1]), n2 = (j - i + 1);
	return ((csum[k][j] - csum[k][i-1]) == (j - i + 1));
}

bool valid()
{
	CLR(sum,0);
	int i,j,n,m;
	cin >> n >> m;
	
	fo(i,0,m)
	{
		cin >> L[i] >> R[i] >> Q[i];
		fo(j,0,30)
		{
			if(contain(Q[i],j))
			{
					sum[j][L[i]]++;
					sum[j][R[i]+1]--;
			}
		}
	}
	fo(i,0,30)
	{
		csum[i][0] = 0;
		fo(j,1,maxn)csum[i][j] = csum[i][j-1] + sum[i][j];
		fo(j,1,maxn)csum[i][j] = csum[i][j-1] + (csum[i][j] > 0);
	}
	fo(i,0,m)
	{
		fo(j,0,30)
		{
			if(!contain(Q[i],j))
			{
				if(isAllOne(L[i],R[i],j))
				{
					return false;		
				}
			}
		}
	}
	cout << "YES\n";
	int ans;
	fo(i,1,n+1)
	{
		ans = 0;
		fo(j,0,30)
		{
			if(isAllOne(i,i,j))ans |= two(j);
		}
		if(i > 1)cout << " ";
		cout << ans;
	}
	return true;
}

int main()
{
	#ifdef localhost
	freopen("E://input.txt","r",stdin);
	//freopen("E://output.txt","w",stdout);
	#endif
	if(!valid())
	{
		cout << "NO\n";
		return 0;
	}
	
	printf("\n");
	return 0;
} 