#include<iostream>
#include<algorithm>
#include<queue>
#include<string>
#include<vector>
#include<map>
#include<list>
#include<set>
#include<cstring>
#include<ctime>
#include<cmath>
#include<limits>
#include<iterator>
#include<functional>
#include<unordered_map>
#include<stack>
#include<bitset>

#define all(v) v.begin(), v.end()
#define setv(ar, val) memset(ar, val, sizeof(ar));
#define ll long long int
#define ull unsigned long long int
#define PI 3.1415926535897932384626433832795
#pragma comment(linker, "/STACK:536870912")
#pragma warning(disable : 4996)
using namespace std;

const int N = 3e5 + 100;
vector<int> v[N];
int sz[N], col[N], cs[N], rb[N];
ll ans[N], sum[N];
bool used[N];
int z = 1;

pair<int, int> dfs(int node, int anc) {
	used[node] = 1;
	pair<int, int> ret = { -1, -1 };
	for (int to : v[node]) {
		if (to == anc)
			continue;
		if (used[to]) {
			if (ret.first == -1)
				ret = { to,  z++ };
		}
		else {
			auto g = dfs(to, node);
			if (g.first != -1)
				ret = g;
		}
	}
	if (ret.first != -1) {
		sz[ret.second]++;
		col[node] = ret.second;
		return ret.first == node ? make_pair(-1, -1) : ret;
	}
	return { -1, -1 };
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int n, m;
	scanf("%d%d", &n, &m);

	for (int i = 0; i < m; i++) {
		int a, b;
		scanf("%d%d", &a, &b);
		a--, b--;
		v[a].push_back(b);
		v[b].push_back(a);
	}

	for (int i = 0; i < n; i++) {
		if (!used[i]) {
			dfs(i, -1);
		}
	}

	int r = -1, t = 0;
	for (int i = 0; i < n; i++) {
		while (!t && r < n) {
			r++;
			if (col[r]) {
				cs[col[r]]++;
				if (cs[col[r]] == sz[col[r]])
					t = 1;
			}
		}
		rb[i] = r - 1;
		if (col[i]) {
			if (cs[col[i]] == sz[col[i]])
				t = 0;
			cs[col[i]]--;
		}
	}

	for (int i = 0; i < n; i++) {
		sum[i + 1] = sum[i] + rb[i] - i + 1;
	}

	int q;
	scanf("%d", &q);
	for (int i = 0; i < q; i++) {
		int x, y;
		scanf("%d%d", &x, &y);
		x--, y--;

		ll w = upper_bound(rb, rb + n, y) - rb - 1,
			h = y - max(x - 1ll, w),
			ans = sum[max((ll)x, w + 1)] - sum[x] + h * (h + 1) / 2;
		printf("%lld\n", ans);
	}


	return 0;
}