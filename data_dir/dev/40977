#include<bits/stdc++.h>
#define LiangJiaJun main
#define M 15000000
using namespace std;
int n,x;
struct Ds{
    int h,m;
}c[2][2004];
int cp[2];
bool vis[2][2004];
int w33ha(){
    cp[0]=cp[1]=0;
    for(int i=1;i<=n;i++){
        int t,h,m;
        scanf("%d%d%d",&t,&h,&m);
        c[t][++cp[t]].h=h;
        c[t][cp[t]].m=m;
    }
    memset(vis,0,sizeof(vis));
    int ans=0,cnt=0,sum=0;
    for(int i=1;i<=n;i++){
        int gp=-1;
        for(int j=1;j<=cp[0];j++){
            if(vis[0][j])continue;
            if(c[0][j].h>x+sum)continue;
            if(gp==-1||((!vis[0][j])&&c[0][j].m>c[0][gp].m))gp=j;
        }
        if(gp==-1)break;
        else{
            ++cnt;
            vis[0][gp]=1;
            sum+=c[0][gp].m;
        }
        gp=-1;
        for(int j=1;j<=cp[1];j++){
            if(vis[1][j])continue;
            if(c[1][j].h>x+sum)continue;
            if(gp==-1||((!vis[1][j])&&c[1][j].m>c[1][gp].m))gp=j;
        }
        if(gp==-1)break;
        else{
            ++cnt;
            vis[1][gp]=1;
            sum+=c[1][gp].m;
        }
    }
    ans=max(ans,cnt);
    memset(vis,0,sizeof(vis));
    cnt=0;sum=0;
    for(int i=1;i<=n;i++){
        int gp=-1;
        for(int j=1;j<=cp[1];j++){
            if(vis[1][j])continue;
            if(c[1][j].h>x+sum)continue;
            if(gp==-1||((!vis[1][j])&&c[1][j].m>c[1][gp].m))gp=j;
        }
        if(gp==-1)break;
        else{
            ++cnt;
            vis[1][gp]=1;
            sum+=c[1][gp].m;
        }
        gp=-1;
        for(int j=1;j<=cp[0];j++){
            if(vis[0][j])continue;
            if(c[0][j].h>x+sum)continue;
            if(gp==-1||((!vis[0][j])&&c[0][j].m>c[0][gp].m))gp=j;
        }
        if(gp==-1)break;
        else{
            ++cnt;
            vis[0][gp]=1;
            sum+=c[0][gp].m;
        }
    }
    ans=max(ans,cnt);
    printf("%d\n",ans);
    return 0;
}
int LiangJiaJun(){
    while(scanf("%d%d",&n,&x)!=EOF)w33ha();
    return 0;
}
