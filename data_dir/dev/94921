#include<bits/stdc++.h>
#define ll long long 
#define hell 1000000007 
#define F first
#define re 15000000
#define S second
#define pb push_back
#define all(a)  (a).begin(),(a).end()
#define rep(i,a,b) for(ll int i = a;i<b;i++)
#define pi 3.1415926536
//char a[2000][2000];
using namespace std;
map<int,int> m;
void primeFactors(int n) 
{ 
    // Print the number of 2s that divide n 
    while (n%2 == 0) 
    { 
        m[2]++; 
        n = n/2; 
    } 
  
    // n must be odd at this point.  So we can skip  
    // one element (Note i = i +2) 
    for (int i = 3; i <= sqrt(n); i = i+2) 
    { 
        // While i divides n, print i and divide n 
        while (n%i == 0) 
        { 
            m[i]++; 
            n = n/i; 
        } 
    } 
  
    // This condition is to handle the case when n  
    // is a prime number greater than 2 
    if (n > 2) 
        m[n]++; 
} 
ll gcd(ll a,ll b)
{
    if (a%b==0)
        return b;
    else
        return gcd(b,a%b);
}

int sum (ll a)
{
    int sum =0;
    while(a>0)
    {
        sum = sum + (a%10);
        a=a/10;
    }
    return sum;
}
int count_digit(ll n)
{
   int  count =0;
    while(n>0)
    {
        n = n/10;
        count++;
    }
    return count;
}
int binarySearch(int x,int y ,ll z ,ll v[])
{
    int low = x;
    int high = y;
    int mid = x+(y-x)/2;
    while(low<=high)
    {
        if(v[mid]==z)
            return mid;
        if(v[mid]<z)
            return binarySearch(mid+1,high,z,v);
        if(v[mid]>z)
            return binarySearch(low,mid-1,z,v);
    }
    return -1;
}
ll modularExponentiation(ll x,ll n,ll M)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)        //n is even
        return modularExponentiation((x*x)%M,n/2,M);
    else                             //n is odd
        return (x*modularExponentiation((x*x)%M,(n-1)/2,M))%M;

} 
int main()
{   
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int tests=1;
  //  cin>>tests;   
    while(tests--)
    {
        string s,frac = ".00";
        cin>>s;
        stack<char> Q;
        int j =1;
        bool f =0,neg=0;
        int count_after_dot =0;
        int index = s.size();
        for(int i =0;i<s.size();i++)
        {
            if(s[i]=='.')
            {
                f=1;
                index = i;
            }
            if(s[i]=='-')
                neg = 1;
            if(f==1 && s[i]!='.' && j<=2)
                {
                    frac[j] = s[i];
                    j++;
                }
        }
        int c =0;
        for(int i = index-1;i>=0;i--)
        {
           // cout<<s[i]<<" ";
            if(c!=3&&s[i]!='-')
                {
                    Q.push(s[i]);
                    c++;
                }
            if(c==3)
            {
                Q.push(',');
                c=0;
            }

        }
        if(Q.top()=='-'||Q.top()==',')
            Q.pop();
        if(!neg)
        {
            cout<<"$";
            while(!Q.empty())
            {
                cout<<Q.top();
                Q.pop();
            }
            cout<<frac;
        }
        else
        {
            cout<<"($";
             while(!Q.empty())
            {
                cout<<Q.top();
                Q.pop();
            }
            cout<<frac<<')';

        }

    }
        

}




