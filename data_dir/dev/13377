#include <bits/stdc++.h>

using namespace std;

#define fr first
#define sc second
#define pb push_back
#define ins insert
#define input freopen("input.txt","r",stdin)
#define output freopen("output.txt","w",stdout)
#define mp make_pair
#define fast_io ios_base::sync_with_stdio(0);
#define y1 yy1
//iterator , unsigned, begin, end, count, continue
// fixed setprecision

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef vector<int> vi;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

string itosm(ll x){
    if(x == 0)
        return "0";
    string ans = "";
    while(x > 0){
        ans +=((x%10) + '0');
        x/=10;
    }
    reverse(ans.begin(), ans.end());
    return ans;
}

ll stoim(string str){
    ll ans = 0;
    ll k = 1;
    int p = 0;
    if(str[0] == '-')
        p++;
    for(int i = str.length()-1; i >= p; i--){
        ans+=(str[i]-'0')*k;
        k*=10;
    }
    return ans;
}

const ll infll = 1e18 + 3;
const int inf = 1009000999;
const ld eps = 1e-7;
const int maxn = 1e6 + 1146;
const int baseint = 1000200013;
const ll basell = 1e18 + 3;
const ld PI = acos(-1.0);
const ll mod = 1e9 + 9;

vector<int> g[maxn];
int d[maxn];
int lvl[maxn];
bool del[maxn];

void dfs(int v, int an){
    for(int to : g[v]){
        if(to == an)
            continue;
        lvl[to] = lvl[v] + 1;
        dfs(to, v);
    }
}

void solve(){
    int n;
    cin >> n;
    if(n % 2 == 0){
        cout << "NO";
        return;
    }
    cout << "YES\n";
    for(int i = 1; i <= n; i++){
        int x;
        cin >> x;
        if(x == 0)
            continue;
        g[i].pb(x);
        g[x].pb(i);
    }
    dfs(1, -1);
    set<pair<int, int> > q;
    for(int v = 1; v <= n; v++){
        d[v] = g[v].size();
        if(g[v].size() % 2 == 0)
            q.insert({lvl[v], v});
    }
    vector<int> ans;
    while(!q.empty()){
        int v = (*q.rbegin()).sc;
        q.erase({lvl[v], v});
        ans.pb(v);
        del[v] = 1;
        for(int to : g[v]){
            d[to]--;
            if(d[to] % 2 == 0){
                if(!del[to])
                    q.insert({lvl[to], to});
            }
            else{
                q.erase({lvl[to], to});
            }
        }
    }
    for(int v : ans)
        cout << v << "\n";
}

int main(){
//    srand(time(0));
//    srand(228);
    fast_io;
    cin.tie(0);
    cout.tie(0);
//    input;
//    output;
//    for(int i = 0; i < 100000; i++)
//        brut();
//    output;
//    freopen("money.in", "r", stdin);
//    freopen("money.out", "w", stdout);
//     int t;
//     cin >> t;
//     fout << t << endl;
//    scanf("%d", &t);
//     int cnt = 1;
//     while(t--){
//        cout << "Case #" << cnt << ": ";
//        printf("Case %d: ", cnt);
//      while(1)
        solve();
//        brut();
//         cout << "\n";
//        puts("");
//        cnt++;
//     }
    return 0;
}