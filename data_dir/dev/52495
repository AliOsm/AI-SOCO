#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
#define ordered_set                                                            \
  tree<int, null_type, less<int>, rb_tree_tag,                                 \
       tree_order_statistics_node_update>
#define ll long long int
#define ld double
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define pdd pair<ld, ld>
const ll M = 2e5 + 5, mod = 1e9 + 7;
int main()
{
    ll n,m,x,i,j,k;
    cin>>n>>m>>x;
    int dp[m+10][min(n,m)+10][min(n,m)+10];
    memset(dp,0,sizeof(dp));
    if(n>m)
    {
        cout<<0<<"\n";
        return 0;
    }
    if(x==1)
    {
        dp[1][1][1]=1;
        dp[1][1][0]=1;
    }
    else
    {
        dp[1][1][1]=1;
        dp[1][1][0]=1;
        dp[1][0][0]=1;
    }
    ll z=min(n,m);
    ll ans=1;
    for(i=1;i<=n;i++)
        ans=(i*ans)%mod;
    for(i=1;i<m;i++)
    {
        for(j=0;j<=z;j++)
        {
            for(k=0;k<=j;k++)
            {
                if(i+1==x)
                {
                    dp[i+1][j+1][k+1]=(dp[i+1][j+1][k+1]+dp[i][j][k])%mod;
                    if(k)
                    {
                        dp[i+1][j+1][k]=(dp[i+1][j+1][k]+dp[i][j][k])%mod;
                    }
                    if(k==0)
                    {
                        dp[i+1][j+1][k]=(dp[i+1][j+1][k]+dp[i][j][k])%mod;
                    }
                }
                else
                {
                    if(k)
                    {
                        dp[i+1][j][k-1]=(dp[i+1][j][k-1]+dp[i][j][k])%mod;
                        dp[i+1][j+1][k]=(dp[i+1][j+1][k]+dp[i][j][k])%mod;
                    }
                    dp[i+1][j+1][k+1]=(dp[i+1][j+1][k+1]+dp[i][j][k])%mod;
                    if(k==0)
                        dp[i+1][j+1][k]=(dp[i+1][j+1][k]+dp[i][j][k])%mod;
                    dp[i+1][j][k]=(dp[i+1][j][k]+dp[i][j][k])%mod;
                }
            }
        }
    }
    ll v=dp[m][n][0];
    cout<<(ans*v)%mod<<"\n";
}

