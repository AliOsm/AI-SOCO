#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <climits>
#include <unordered_map>
#include <iterator> 
#include <bitset>
#include <complex>
#include <random>
#include <chrono>
#include <functional>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ui unsigned int
#define mp make_pair
#define inf32 INT_MAX
#define inf64 LLONG_MAX
#define PI acos(-1)
#define cos45 cos(PI/4)
#define ld long double
#define inf 1000000
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pli pair<ll, int>
#define pil pair<int, ll>
#pragma GCC optimize ("O3")
//#define x first
//#define y second
const int mod = (1e9) + 7, mod2 = 998244353;
const double eps = 1e-10;
const int siz = 1e6 + 5, siz2 = 19, lg = 31, block = 317, block2 = 1000, mxv = 5e5;

struct lyric {
	pair<string, string> left;
	pair<string, string> right;
};

vector<lyric> lyrics;

int n;
vector<string> str[siz][5];
char word[siz];

const char vowels[] = { 'a', 'e', 'i', 'o', 'u' };
map<char, int> vowel_map;

vector<pair<string, string>> odds;
string temp;

vector<string> fours;

int main()
{
	for (int i = 0; i < 5; i++) {
		vowel_map[vowels[i]] = i + 1;
	}
	scanf("%d", &n);
	int mx_sz = 0;
	for (int i = 0; i < n; i++) {
		scanf("%s", word);
		int sz = strlen(word), last_vowel = 0, coi = 0;
		for (int j = 0; j < sz; j++) {
			int vowel_num = vowel_map[word[j]];
			if (vowel_num) {
				coi++;
				last_vowel = vowel_num;
			}
		}
		mx_sz = max(mx_sz, coi);
		str[coi][last_vowel-1].push_back(string(word));
	}
	int first_half = 0;
	bool first_inhalf = false;
	for (int i = 1; i <= mx_sz; i++) {
		for (int j = 0; j < 5; j++) {
			int sz = str[i][j].size();
			if (sz % 2) {
				if (first_inhalf) {
					first_inhalf = false;
					odds.push_back({ temp, str[i][j][sz - 1] });
				}
				else {
					first_inhalf = true;
					temp = str[i][j][sz - 1];
				}
				str[i][j].pop_back();
			}
		}
		first_inhalf = false;
	}
	int last_odd = 0, odds_sz = odds.size();
	for (int i = 1; i <= mx_sz; i++) {
		for (int j = 0; j < 5; j++) {
			int sz = str[i][j].size();
			for (int k = sz - 1; k >= 0; k -= 2) {
				if (last_odd == odds_sz) {
					goto out;
				}
				lyrics.push_back({ odds[last_odd++],{ str[i][j][k], str[i][j][k - 1] } });
				str[i][j].pop_back();
				str[i][j].pop_back();
			}
		}
	}
out:
	int tot = 0;
	for (int i = 1; i <= mx_sz; i++) {
		for (int j = 0; j < 5; j++) {
			int sz = str[i][j].size();
			for (int k = 0; k < sz; k++) {
				fours.push_back(str[i][j][k]);
				if (fours.size() == 4) {
					lyrics.push_back({ { fours[0], fours[1] },{ fours[2], fours[3] } });
					fours.clear();
				}
			}
		}
	}
	int ans = lyrics.size();
	printf("%d\n", ans);
	for (int i = 0; i < ans; i++) {
		printf("%s %s\n%s %s\n", lyrics[i].left.first.c_str(), lyrics[i].right.first.c_str(),
			lyrics[i].left.second.c_str(), lyrics[i].right.second.c_str());
	}
	return 0;
}
