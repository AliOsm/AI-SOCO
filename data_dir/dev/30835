//raja1999

//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,avx,avx2")

#include <bits/stdc++.h>
#include <vector>
#include <set>
#include <map>
#include <string> 
#include <cstdio>
#include <cstdlib>
#include <climits>
#include <utility>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iomanip> 
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
//setbase - cout << setbase (16)a; cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 <<endl;prints xxx77
//setprecision - cout << setprecision (14) << f << endl; Prints x.xxxx
//cout.precision(x)  cout<<fixed<<val;  // prints x digits after decimal in val

using namespace std;
using namespace __gnu_pbds;
#define f(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) f(i,0,n)
#define fd(i,a,b) for(i=a;i>=b;i--)
#define pb push_back
#define mp make_pair
#define vi vector< int >
#define vl vector< ll >
#define ss second
#define ff first
#define ll long long
#define pii pair< int,int >
#define pll pair< ll,ll >
#define sz(a) a.size()
#define inf (1000*1000*1000+5)
#define all(a) a.begin(),a.end()
#define tri pair<int,pii>
#define vii vector<pii>
#define vll vector<pll>
#define viii vector<tri>
#define mod (1000*1000*1000+7)
#define pqueue priority_queue< int >
#define pdqueue priority_queue< int,vi ,greater< int > >
#define int ll

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;


//std::ios::sync_with_stdio(false);
int n,g,h;
int a[(1<<20)+10];
int p[(1<<20)+10];
int remove(int pos){
	int left=2*pos;
	int right=2*pos+1;
	if(left>n){
		return pos;
	}
	if(a[left]==0&&a[right]==0){
		return pos;
	}
	if(a[left]>a[right])
		return remove(left);
	else
		return remove(right);
}
int go(int pos){
	int left=2*pos;
	int right=2*pos+1;
	if(left>n){
		a[pos]=0;
	}
	else if(a[left]==0&&a[right]==0){
		a[pos]=0;
	}
	else if(a[left]>a[right]){
		p[a[left]]=pos;
		a[pos]=a[left];
		go(left);
	}
	else{
		p[a[right]]=pos;
		a[pos]=a[right];
		go(right);
	}
}
int level(int x){
	int l=0;
	while(x>0){
		x/=2;
		l++;
	}
	return l;
}
main(){
	std::ios::sync_with_stdio(false); cin.tie(NULL);
	int t;
	cin>>t;
	//t=1;
	while(t--){
		int i,s=0,id;
		vi ans;
		vi v;
		cin>>h>>g;
		n=(1<<h)-1;
		f(i,1,n+1){
			cin>>a[i];
			p[a[i]]=i;
			v.pb(a[i]);
			s+=a[i];
		}
		sort(all(v));
		
		fd(i,n-1,0){
			id=remove(p[v[i]]);
			if(level(id)>g){
				//cout<<"hi"<<endl;
				go(p[v[i]]);
				s-=v[i];
				ans.pb(p[v[i]]);
			}
		}
		cout<<s<<endl;
		rep(i,ans.size()){
			cout<<ans[i]<<" ";
		}
		cout<<endl;

	}
	return 0;
} 
	