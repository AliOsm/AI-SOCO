/****** BISMILLAH HIR RAHMANIR RAHIM ******/

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

typedef long long ll;
typedef pair <int, int> pii;
/* Special functions:

        find_by_order(k) --> returns iterator to the kth largest element counting from 0
        order_of_key(val) --> returns the number of items in a set that are strictly smaller than our item
*/

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;


#define EPS 1e-9
#define NL cout<<endl
#define MP make_pair
#define ALL(a) a.begin(), a.end()
#define DBG(a) cout<< #a <<" --> "<<(a)<<endl
#define FastIO ios::sync_with_stdio(false); cin.tie(0);cout.tie(0)
#define IN freopen("input.txt","r+",stdin)
#define OUT freopen("output.txt","w+",stdout)

template < class T1,class T2>
ostream &operator <<(ostream &os,const pair < T1,T2 > &p)
{
    os<<"{"<<p.first<<","<<p.second<<"}";
    return os;
}
template < class T1,class T2>
pair <T1,T2> operator + ( const  pair < T1,T2 > &p1,const pair < T1,T2 > &p2)
{
    return make_pair(p1.first+p2.first,p1.second+p2.second);
}
/****** END OF HEADER ******/
map < string,int > id;
int total[6];
int lagbe[6][2];
int koytadisi[6];
int isPos()
{
    int oooh= 0;
    for(int i=0; i<6; i++)
    {
        if(total[i]-oooh-lagbe[i][0]<0)
            return 0;
        koytadisi[i]=(total[i]- oooh - lagbe[i][0]);
        oooh=lagbe[i][1]-( total[i]- oooh - lagbe[i][0]);
        oooh=max(oooh,0);
    }
    return 1;
}

int main()
{
    id["S"]=0;
    id["M"]=1;
    id["L"]=2;
    id["XL"]=3;
    id["XXL"]=4;
    id["XXXL"]=5;
    FastIO;
//    IN;
//    OUT;
    for(int i=0; i<6; i++)
        cin>>total[i];
    int n;
    cin>>n;
    string inp[n];
    for(int i=0; i<n; i++)
    {
        std::string s ;
        cin>>inp[i];
        s=inp[i];
        std::string delimiter = ",";
        int flg=1;
        size_t pos = 0;
        std::string token;
        while ((pos = s.find(delimiter)) != std::string::npos)
        {
            token = s.substr(0, pos);
            lagbe[id[token]][1]++;
//            DBG(token);
            s.erase(0, pos + delimiter.length());
            flg=0;
        }
//        std::cout << s << std::endl;
        if(flg)
        {
            lagbe[id[s]][0]++;
        }
    }
    if(isPos())
    {
        cout<<"YES\n";

        for(int i=0; i<n; i++)
        {
            std::string s ;
            s=inp[i];
            std::string delimiter = ",";
            int flg=1;
            size_t pos = 0;
            std::string token;
            while ((pos = s.find(delimiter)) != std::string::npos)
            {
                token = s.substr(0, pos);

                s.erase(0, pos + delimiter.length());
                if(koytadisi[id[token]]>0)
                {
                    cout<<token<<endl;
                    koytadisi[id[token]]--;
                }
                else
                    cout<<s<<endl;

//            DBG(token);
                flg=0;
            }
//        std::cout << s << std::endl;
            if(flg)
            {
                cout<<s<<endl;
            }
        }


    }
    else
        cout<<"NO\n";
}
