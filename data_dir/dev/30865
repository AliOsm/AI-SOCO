//#include "stdc++.h"
#include<bits/stdc++.h>
#include<iostream>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
using namespace std;
//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//typedef tuple<int, int, int> t3;
typedef long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <ll, int> pli;
typedef pair <db, db> pdd;
typedef vector<int> vi;
#define m1 make_pair
#define pb push_back
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0) return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p; }
#define flush fflush(stdout)
const ll MOD =998244353;
const int INF = 0x3f3f3f3f;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;
int tim=0;int already=0;int k;int tin[100001];
map<int,int>::iterator it;map<int,int>::iterator it1;
map<int,int>mp;
void dfs(vector<int> adj[],int u,bool visited[],int parent)
{
    if(already==1)
        return;
    visited[u]=1;
    ++tim;
    tin[u]=tim;
    mp.insert(m1(tim,u));int v;int cnt;
    for(int i=0;i<adj[u].size();i++)
    {
        v=adj[u][i];
        if(!visited[v]&&(!already))
        {
            dfs(adj,v,visited,u);
        }
        else if(!already)
        {
            if(parent!=v)
            {
                it=mp.lower_bound(tin[v]);
            
                cnt=0;it1=it;
                    while(it!=mp.end())
                    {
                        cnt++;
                        it++;
                    }
                   if(cnt>=(k+1))
                   {
                       cout<<cnt<<endl;
                       while(it1!=mp.end())
                       {
                           cout<<it1->second<<" ";
                           it1++;
                       }
                    already=1;
                    return;
                   }
                }
                
            }
        }
    
    mp.erase(mp.find(tin[u]));
}
int main()
{
    IOS;
    int n,m;
    cin>>n>>m>>k;
    vector<int> adj[n+1];int u,v;
    for(int i=0;i<m;i++)
    {
        cin>>u>>v;
        adj[u].pb(v);
        adj[v].pb(u);
    }
    bool visited[n+1];
    memset(visited,0,sizeof(visited));
    dfs(adj,1,visited,0);
    return 0;
}
