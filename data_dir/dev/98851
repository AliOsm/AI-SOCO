#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
ll mod = 1000000007, oo = 1000000009;

void Emsawy() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
}

#define clr(v,d)     memset(v, d, sizeof(v))
#define sz(v)	     ((int)((v).size()))
#define all(v)	     ((v).begin()), ((v).end())
#define allr(v)	     ((v).rbegin()), ((v).rend())
#define V	         vector
#define MP	         make_pair
#define bug(n)           cout<< #n <<" = "<< n << endl;
int dx[] = { 1, -1, 0, 0, 1, -1, 1, -1 };
int dy[] = { 0, 0, 1, -1, 1, -1, -1, 1 };

V<V<int> > adj;
const ll N = 2100000 + 5;
int n, m, k, w;


const int size = 1000006;
int seg[size * 4];
int g[size];

ll gcd(ll a, ll b){
	if (a == 0) return b;
	gcd(b  %a, a);
}

void upd(int p, int s, int e, int x){

	if (s == e){
		seg[p] = g[s];
		return;
	}
	int mid = (s + e) / 2;
	if (x <= mid)
		upd(p * 2, s, mid, x);
	else
		upd(p * 2 + 1, mid + 1, e, x);

	seg[p] = gcd(seg[p * 2], seg[p * 2 + 1]);
}
int query(int p, int s, int e, int x, int y, int vl){
	if (s > y || e < x)
		return 0;          // take care
	if (gcd(seg[p], vl) == vl) return 0;
	if (s == e) return (gcd(seg[p] , vl) != vl);
	if (x <= s && e <= y){
		if (gcd(vl, seg[p * 2]) == vl)
			return query(p * 2 + 1, (s + e) / 2 + 1, e, x, y, vl);
		if (gcd(vl, seg[p * 2 + 1]) == vl)
			return query(p * 2, s, (s + e) / 2, x, y, vl);
	}
	int l = query(p * 2 + 1, (s + e) / 2 + 1, e, x, y, vl);
	if (l > 1) return 2;
	int r = query(p * 2, s, (s + e) / 2, x, y, vl);
	return l + r;
}


void build(int p, int s, int e){
	if (s == e){
		seg[p] = g[s];
		return;
	}
	build(p * 2, s, (s + e) / 2);
	build(p * 2 + 1, (s + e) / 2 + 1, e);
	seg[p] = gcd(seg[p * 2], seg[p * 2 + 1]);
}
int main() {

	Emsawy();
	while (cin >> n){
		for (int i = 0; i < n; i++){
			cin >> g[i];
		}
		build(1, 0, n - 1);
		int q, ct, l, r, vl;
		cin >> q;
		for (int i = 0; i < q; i++){
			cin >> ct;
			if (ct == 2){
				cin >> l >> r;
				g[l - 1] = r;
				upd(1, 0, n - 1, l - 1);
			}
			else {
				cin >> l >> r >> vl;
				if (query(1, 0, n - 1, l - 1, r - 1, vl) <= 1){
					cout << "YES" << endl;
				}
				else {
					cout << "NO" << endl;
				}
			}
		}
	}
	return 0;
}