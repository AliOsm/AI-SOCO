#include <bits/stdc++.h>
#define  FOR(i,x,n) for(int i=x;i<n;i++)
#define rFOR(i,x,n) for(int i=x;i>n;i--)
#define SZ(x) (int)x.size()
#define pb push_back
#define mp make_pair
#define fi first
#define se second
typedef long long ll;
const int oo=(1LL<<30);
const ll  OO=(1LL<<62);
const int MAX_SIZE=1e4+2;
const double PI=3.141592653589;
int dx2[]={ 0 , 0 ,-1 , 1 };
int dy2[]={-1 , 1 , 0 , 0 };
int dx3[]={ 0 , 0 ,  1 , 1 , 1 , -1 , -1 ,-1 };
int dy3[]={-1 , 1 , -1 , 0 , 1 , -1 ,  0 , 1 };
using namespace std;

int TotalDistance [MAX_SIZE];
int DistanceAfter [MAX_SIZE];
int DistanceBefore[MAX_SIZE];

int main()
{
//  freopen("input.txt" ,"r",stdin );
//  freopen("output.txt","w",stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(NULL),cout.tie(NULL);
    
    int n,m;
    cin>>n>>m;

    FOR(i,0,n)
    {
        memset(DistanceAfter ,0,sizeof DistanceAfter );
        memset(DistanceBefore,0,sizeof DistanceBefore);

        bool FindOne=0;
        string c; 
        cin>>c;
        
        FOR(j,0,m) FindOne|=(c[j]=='1');
        if(!FindOne) {cout<<-1; return 0;}

        if(c[0]=='0')
        {
            rFOR(j,m-1,-1)
                if(c[j]=='1')
                    {DistanceBefore[0]=m-j; break;}
        }
        else DistanceBefore[0]=0;
        FOR(j,1,m)
            DistanceBefore[j]=(c[j]=='1')? 0 : 
                              DistanceBefore[j-1]+1; 

        if(c[m-1]=='0')
        {
            FOR(j,0,m)
                if(c[j]=='1')
                    {DistanceAfter[m-1]=j+1; break;}
        }
        else DistanceAfter[m-1]=0;
        rFOR(j,m-2,-1)
            DistanceAfter[j]=(c[j]=='1')? 0 : 
                              DistanceAfter[j+1]+1; 
        
        FOR(j,0,m)
            TotalDistance[j]+=min(DistanceAfter[j],DistanceBefore[j]);
    }
 
    cout<<*min_element(TotalDistance,TotalDistance+m);
}