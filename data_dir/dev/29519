#include <iostream>

#include <vector>
#include <queue>
#include <string>
#include <algorithm>

using namespace std;

struct City {
   int id;
   string name;
   string name_sep;
};

struct Cmp {
   bool operator()(const City& c1, const City& c2) const {
      if (c1.name != c2.name)
         return c1.name > c2.name;
      return c1.id < c2.id;
   }
};

struct CmpSep {
   bool operator()(const City& c1, const City& c2) const {
      if (c1.name_sep != c2.name_sep)
         return c1.name_sep < c2.name_sep;
      return c1.id < c2.id;
   }
};

#define MAXN 10004
int N;

bool used[MAXN];
City cities[MAXN];

priority_queue<City, vector<City>, Cmp> L[12];

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 

   cin >> N;
   int N2 = N/2;
   int cnt = 0;
   for (int i = 0; i < N; ++i) {
      cin >> cities[i].name;
      cities[i].id = i;
      int len = cities[i].name.size();
      cnt += len;
      L[ len ].push(cities[i]);
   }
   char sep;
   cin >> sep;

   int cnt2 = cnt / N2;
// cerr << cnt2 << endl;

   for (int i = 0; i < N; ++i)
      cities[i].name_sep = cities[i].name + sep;

   sort(cities, cities+N, CmpSep());

   for (int i = 0; i < N; ++i) {
      if (used[ cities[i].id ]) continue;
   // cerr << cities[i].id << " ==\n";
      used[ cities[i].id ] = true;
      int len = cnt2 - cities[i].name.size();
      City c;
      while (true) {
         c = L[len].top();
         L[len].pop();
      // cerr << c.id << ": " << c.name << ' ' << used[c.id] << endl;
         if (!used[c.id])
            break;
      }
      used[c.id] = true;
      cout << cities[i].name_sep << c.name << "\n";
   }

   return 0;
}
