#include <iostream>
#include <stdio.h>
#include <string.h>
using namespace std;

#define VIC ios::sync_with_stdio(0);cin.tie(0);ios_base::sync_with_stdio(0);
#define sfi(x) scanf("%d", &x)
#define sfi2(x, y) scanf("%d%d", &x,&y)
#define sfl2(x, y) scanf("%I64d%I64d", &x,&y)
#define sfl(x) scanf("%I64d", &x)
#define sfd(x) scanf("%lf", &x)
#define sfd2(x, y) scanf("%lf%lf", &x, &y)
#define sfs(x) scanf("%s", &x)
#define wtf(s) freopen((s), "w", stdout)
#define rff(s) freopen((s), "r", stdin)
#define mod 998244353
#define pi (2 * acos(0))
#define x first
typedef long double ld;
typedef long long ll;
const int N = 1e6 + 5;
//g++ -std=c++11 main.cpp && a.exe

int tree[4 * N], a[N], upper[N], pos[N];

void update(int node, int start, int end, int idx, int val)
{
    if(start == end)
        tree[node] = val;
    else
    {
        int mid = (start + end) / 2;
        if(start <= idx and idx <= mid)
            update(2 * node, start, mid, idx, val);
        else
            update(2 * node + 1, mid + 1, end, idx, val);
        tree[node] = max(tree[2 * node], tree[2 * node + 1]);
    }
}
int query(int node, int start, int end, int l, int r)
{
    if(r < start or end < l)
        return 0;
    if(l <= start and end <= r)
        return tree[node];
    int mid = (start + end) / 2;
    int p1 = query(2 * node, start, mid, l, r);
    int p2 = query(2 * node + 1, mid + 1, end, l, r);
    return max(p1, p2);
}


int main()
{
    VIC
    int x, n;
    cin >> n;
    for (int i = 0; i < n; i++)
        cin >> upper[i];
    for (int i = 0; i < n; i++)
        cin >> x, pos[x] = i;
    for (int i = 0; i < n; i++)
        a[i] = pos[upper[i]];
    for (int i = 0; i < n; i++)
        update(1, 0, n - 1, a[i], query(1, 0, n - 1, a[i], n - 1) + 1);
    cout << tree[1];
    return 0;
}
