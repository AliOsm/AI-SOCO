#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define F first
#define S second
#define int long long
#define ull  unsigned long long
#define pb push_back
#define double long double

using namespace std;
using namespace __gnu_pbds;
typedef  tree< int , null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int N = 900100;
int n, m, k, cnt[N], a[N], b[N];
void solve(vector < int > &v){
    stack < int > s;
    int c = 0;
    int x = -1;
    for (int i = 0; i < v.size(); i++){
        s.push(v[i]);
        if (x != v[i]){
            c = 0;
            x = v[i];
        }
        if (x == v[i]) c++;
        b[s.size()] = c;
        if (c == k){
            for (int j = 0; j < k; j++) s.pop();
            c = 0;
            if (s.empty()) x = -1; else{
                x = s.top();
                c = b[s.size()];
            }
        }
    }
    vector < int > u;
    while(!s.empty()){
        u.pb(s.top());
        s.pop();
    }
    reverse(u.begin(), u.end());
    v = u;
}
main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //freopen("input.txt",  "r", stdin);
    //freopen("output.txt", "w", stdout);
    vector < int > v, l, r;
    cin >> n >> k >> m;
    for (int i = 1; i <= n; i++){
        cin >> a[i];
        v.pb(a[i]);
        cnt[a[i]]++;
    }
    if (k >= n){
        if (cnt[a[1]] == n){
            cout << n * m % k;
            return 0;
        } else{
            cout << n * m;
            return 0;
        }
    }
    solve(v);
    int L = 0;
    int R = (int)v.size() - 1;
    while(k < R - L + 1){
        int c = 0;
        int L0 = L;
        int R0 = R;
        while(v[L] == v[L0] && c < k){
            c++;
            L++;
        }
        while(v[R] == v[L0] && c < k){
            R--;
            c++;
        }
        if (c == k){
            for (int j = L0; j < L; j++) l.pb(v[j]);
            for (int j = R0; j > R; j--) r.pb(v[j]);
            continue;
        }
        c = 0;
        L = L0;
        R = R0;
        while(L < R && v[L] == v[R0] && c < k){
            c++;
            L++;
        }
        while(R >= L && v[R] == v[R0] && c < k){
            R--;
            c++;
        }
        if (c == k){
            for (int j = L0; j < L; j++) l.pb(v[j]);
            for (int j = R0; j > R; j--) r.pb(v[j]);
            continue;
        }
        L = L0;
        R = R0;
        break;
    }
    if (n == 100000 && k == 3){
     //   cout << L << " " << R;
    //    return 0;
    }
    if (L <= R){
        memset(cnt, 0, sizeof(cnt));
        for (int i = L; i <= R; i++) cnt[v[i]]++;
        if (cnt[v[L]] == R - L + 1){
            int x = (R - L + 1) * m;
            if (x % k == 0){
                cout << 0;
                return 0;
            }
            for (int i = 0; i < x % k; i++) l.pb(v[L]);
            reverse(r.begin(), r.end());
            for (auto i: r) l.pb(i);
            solve(l);
            cout << l.size() << endl;
            return 0;
        }
    }
    int x = (R - L + 1) * m;
    vector < int > f;
    solve(l);
    solve(r);
    for (int i = L; i <= R; i++) f.pb(v[i]);
    if (l.size() + r.size() + 50 * n < x){
        for (int i = 0; i < 25 * n; i++){
            l.pb(f[i % (R - L + 1)]);
        }
        solve(l);
        reverse(f.begin(), f.end());
        for (int i = 0; i < 25 * n; i++){
            r.pb(f[i % (R - L + 1)]);
        }
        solve(r);
        cout << x - 50 * n + l.size() + r.size() << endl;
        return 0;
    }
    for (int i = 0; i < x; i++)
        l.pb(f[i % (R - L + 1)]);
    reverse(r.begin(), r.end());
    for (int i = 0; i < r.size(); i++) l.pb(r[i]);
    solve(l);
    cout << l.size() << endl;
}
