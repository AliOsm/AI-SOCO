#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int MAXN = 1000005;
int N;
vector<int> adj[MAXN];
int T[MAXN];
int good[MAXN];
int total = 0, root = 0;
int ans1 = -1, ans2 = -1;

bool dfs(int cur)
{
    vector<int> poss;
    for (int i = 0; i < adj[cur].size(); i++)
    {
        int next = adj[cur][i];
        if (dfs(next))
            return true;
        if (good[next] > 0)
        {
            poss.push_back(good[next]);
            good[cur] = good[next];
        }
        T[cur] += T[next];
    }
    if (poss.size() >= 1 && T[cur]*3 == 2*total && cur != root)
    {
        ans1 = cur;
        ans2 = poss[0];
        return true;
    }
    if (poss.size() >= 2)
    {
        ans1 = poss[0];
        ans2 = poss[1];
        return true;
    }
    if (T[cur]*3 == total)
        good[cur] = cur;
    return false;
}

int main()
{
    ios::sync_with_stdio(0);

    cin >> N;
    for (int i = 1, p; i <= N; i++)
    {
        cin >> p >> T[i];
        if (p == 0)
            root = i;
        else
            adj[p].push_back(i);
        total += T[i];
    }

    if (total % 3 != 0)
        cout << "-1\n";
    else if (dfs(root))
        cout << ans1 << " " << ans2 << "\n";
    else
        cout << "-1\n";
    
    return 0;
}
