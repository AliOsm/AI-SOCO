// The simple fact that I can be a bit better than what I am currently, Excites Me!
#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef long long int ll;
typedef vector< pair<int, int> > vii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<long long int> vll;
typedef pair<int, int> pii;

const ll INF = 1e18;
const int inf = 1e9;
const int MOD = 1e9 + 7;
const int nax = 1000000 + 10;

struct node
{
    int id, cmd, a, b;
};
vector<node> vv;
int visited[nax];
int answer[nax];
int arr[1001][1001];
vi graph[nax];
int n, m, q;

void dfs(int v, int ans)
{
    visited[v] = 1;
    int id = vv[v].id;
    int cmd = vv[v].cmd;
    int a = vv[v].a;
    int b = vv[v].b;
    //cout << id << " " << cmd << " " << a << " " << b << endl;
    int newans = ans;
    int tochange = 0;
    if(cmd == 2)
    {
        if(arr[a][b] == 1)
            arr[a][b] = 0, newans--, tochange = 1;
    }
    else if(cmd == 1)
    {
        if(arr[a][b] == 0)
            arr[a][b] = 1, newans++, tochange = 1;
    }
    else if(cmd == 3)
    {
        for(int j = 1; j <= m; j++)
        {
            int prev = arr[a][j];
            int naya = 1 - arr[a][j];
            arr[a][j] = naya;
            newans += (naya - prev);
        }
    }
    answer[v] = newans;
    for(auto x: graph[v])
    {
        if(visited[x] == 0)
            dfs(x, newans);
    }
    if(cmd == 1 && tochange == 1)
        arr[a][b] = 0;
    else if(cmd == 2 && tochange == 1)
        arr[a][b] = 1;
    else if(cmd == 3)
    {
        for(int j = 1; j <= m; j++)
            arr[a][j] = 1 - arr[a][j];
    }
}
int main()
{
    ios::sync_with_stdio(0);
    cin >> n >> m >> q;
    vv.pb({0, 0, 0, 0});
    for(int i = 1; i <= q; i++)
    {
        int id = i;
        int cmd = 0, a = 0, b = 0;
        cin >> cmd;
        if(cmd == 1 || cmd == 2)
            cin >> a >> b;
        else
            cin >> a;
        vv.pb({id, cmd, a, b});
        if(cmd == 4)
            graph[a].pb(i);
        else
            graph[i - 1].pb(i);
    }
    dfs(0, 0);
    for(int i = 1; i <= q; i++)
        cout << answer[i] << endl;
    return 0;
}
