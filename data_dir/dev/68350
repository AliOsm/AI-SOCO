#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define MOD 1000000007
ll power(ll a,ll b, ll m=MOD)
{
    ll res=1;
    while(b>0)
    {
        if(b&1)
            res=(res*a)%m;
        a=(a*a)%m;
        b>>=1;
    }
    return res;
}
ll inverse(ll a,ll m=MOD)
{
    return power(a,m-2,m);
}
#define INFl 1e18
#define vi vector<int>
#define vvi vector<vi>
#define vl vector<long long>
#define vvl vector<vl>
#define ii pair<int,int>
#define pll pair<ll,ll>
#define vii vector<ii>
#define F first
#define S second
#define forl(i,n) for(int i=0;i<n;i++)
#define fore(i,n) for(int i=1;i<=n;i++)
#define rforl(i,n)  for(int i=n-1;i>=0;i--)
#define rfore(i,n)  for(int i=n;i>=1;i--)
#define INF 1100000009
#define gcd(a,b) __gcd(a,b)
#define all(x)  x.begin(),x.end()
#define mp make_pair
#define pb push_back
#define print(x)    for(auto it=x.begin();it!=x.end();it++) printf("%d ",*it); printf("\n");
#define printii(x)  for(auto it=x.begin();it!=x.end();it++) cout<<it->F<<' '<<it->S<<'\n'; 
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
vl cnt1,cnt2,tree;
string str;
int n;
void build(int v,int tl,int tr)
{
    if(tl==tr)
    {
        if(str[tl]=='(')
            cnt1[v]++;
        else
            cnt2[v]++;
    }
    else
    {
        int tm=(tl+tr)/2;
        build(2*v+1,tl,tm);
        build(2*v+2,tm+1,tr);
        int mn=min(cnt1[2*v+1],cnt2[2*v+2]);
        tree[v]=tree[2*v+1]+tree[2*v+2]+2*mn;
        cnt1[v]=cnt1[2*v+1]+cnt1[2*v+2]-mn;
        cnt2[v]=cnt2[2*v+1]+cnt2[2*v+2]-mn;
    }
}
pair<int,ii> query(int v,int tl,int tr,int l,int r)
{
    // cout<<tl<<' '<<tr<<' '<<l<<' '<<r<<endl;
    if(l>r) return mp(0,mp(0,0));
    if(tl==l && tr==r)
        return mp(tree[v],mp(cnt1[v],cnt2[v]));
    int tm=(tl+tr)/2;
    pair<int,ii> res1=query(2*v+1,tl,tm,l,min(r,tm));
    pair<int,ii> res2=query(2*v+2,tm+1,tr,max(tm+1,l),r);
    pair<int,ii> res;
    int mn=min(res1.S.F,res2.S.S);
    res.F=res1.F+res2.F+2*mn;
    res.S.F=res1.S.F+res2.S.F-mn;
    res.S.S=res1.S.S+res2.S.S-mn; 
    return res;
}
int main()
{
    cin>>str;
    n=str.length();
    // cout<<n<<endl;
    cnt1.assign(4*n,0);
    cnt2.assign(4*n,0);
    tree.assign(4*n,0);
    build(0,0,n-1);
    // cout<<tree[0]<<endl;
    int q;
    cin>>q;
    while(q--)
    {
        int l,r;
        cin>>l>>r;
        l--;r--;
        pair<int,ii> res=query(0,0,n-1,l,r);
        cout<<res.F<<endl;
    }
}