#include <bits/stdc++.h>
using namespace std;

#define int           long long
#define S             second
#define F             first
#define pb            push_back
#define all(c)        (c).begin(),(c).end()
#define rall(c)       (c).rbegin(),(c).rend() 
#define lb            lower_bound
#define si(c)         (int)((c).size())
#define lcm(a, b)      (a * (b / __gcd(a,b)))  
#define inf           (int)(1e9+1)
#define endl          '\n'
#define mp            make_pair
#define time(s)       (double(clock()-s)/double(CLOCKS_PER_SEC))
#define debug(args...)    _F(#args, args)
#define vi            std::vector<int>
#define pii           pair<int, int> 
#define vpi           vector<pii>

clock_t start;
mt19937_64 rng(chrono::system_clock::now().time_since_epoch().count());

template<typename T> void _F(const char *name, T arg1){
    cerr << name << " = " << arg1 << endl;
}template<typename T, typename... Args> void _F(const char *names, T arg1, Args... args){
    const char *name = strchr(names, ',');
    cerr.write(names, name-names) << " = " << arg1 << endl;
    _F(name+2, args...);
}
template<typename T1, typename T2> istream& operator>>(istream& in, pair<T1, T2> &q){
    in >> q.F >> q.S; return in;
}template<typename T1, typename T2> ostream& operator<<(ostream& out, pair<T1, T2> &q){
    out << q.F << " " << q.S; return out;
}template< typename T1, typename T2> pair<T1, T2> operator+(pair<T1, T2> p1, pair<T1, T2> p2){
    return {p1.F+p2.F, p1.S+p2.S};
}template< typename T1, typename T2> pair<T1, T2> operator-(pair<T1, T2> p1, pair<T1, T2> p2){
    return {p1.F-p2.F, p1.S-p2.S};
}

const int N = 2e5+1;
vi g[N];
int d[N], deg[N], n, s, mn;

void dfs0(int v, int par){
    for(auto u : g[v]){
        if(u == par)continue;
        dfs0(u, v);
    }
    set<int> s;
    for(auto u : g[v]){
        if(u != par){
            s.insert(d[u]);
        }
    }
    if(si(s) == 1 && *begin(s) != -1)
        d[v] = *begin(s)+1;
    else if(si(s))d[v] = -1;
    //cout << v << " " << d[v] << endl;
}

void dfs1(int v, int par, int x){
    set<int> s;
    int ms = (x == -1);
    for(auto u : g[v]){
        if(u == par)s.insert(x);
        else s.insert(d[u]), ms += (d[u] == -1);
    }
    int ans = 0;
    if(si(s) <= 2 && *begin(s) != -1){
        for(auto& u : s){
            ans += u+1;
        }
        while(ans%2 == 0)ans /= 2;
        if(mn != -1)mn = min(mn, ans);
        else mn = ans;
    }
    for(auto u : g[v]){
        if(u != par){
            s.erase(d[u]);
            if(ms > 1 || si(s) > 1){
                dfs1(u, v, -1);
            } else if(si(s) && *begin(s) != -1){
                dfs1(u, v, *begin(s)+1);
            } else if(si(s)){
                dfs1(u, v, *begin(s));
            } else {
                dfs1(u, v, d[u]+1);
            }
            s.insert(d[u]);
        }
    }
}

void solve(){
    mn = -1;
    cin >> n;
    for(int i = 1; i < n; i++){
        int u, v;
        cin >> u >> v;
        g[u].pb(v);
        g[v].pb(u);
        deg[v]++;
        deg[u]++;
        if(deg[v] == 2)s = v;
        if(deg[u] == 2)s = u;
    }
    if(n == 2){
        cout << 1 << endl;
        return;
    }
    dfs0(s, 0);
    dfs1(s, 0, 0);
    cout << mn << endl;
}

signed main(){

    ios_base::sync_with_stdio(0); 
    cin.tie(0); cout.tie(0);   

    int t = 1;
    start = clock(); 

    cout << fixed << setprecision(12);

    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
    freopen("error.txt", "w", stderr);
    #endif

    //cin >> t;

    for(int i = 1; i <= t; ++i){
        //cout << "Case #" << i << ": "; 
        solve();
        //cout << endl;
    }
    //cerr << time(start);
    return 0;
}