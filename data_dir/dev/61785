// KALAM
# include<bits/stdc++.h>

using namespace std;

const int N = 1000000 + 77;

struct DSU {
   int P[N];
   int Find(int x) { return P[x] <= 0 ? x : (P[x] = Find(P[x])); }
   inline bool Merge(int v , int u) {
      v = Find(v); u = Find(u);
      if(v == u) return 0;
      P[v] = u;
      return 1;
   }
} D;

int n , k , a[N] , F[N] , T[N];

int main() {
   scanf("%d %d" , & n , & k);
   int limit = k * (k + 1) / 2;
   for(int i = 1;i <= n;++ i)
      scanf("%d" , a + i);
   if(k + 1 >= n)
      return ! printf("1\n");
   sort(a + 1 , a + 1 + n);
   for(int i = 1;i <= n;++ i)
      for(int j = i + 1;j <= n;++ j)
         ++ F[a[j] - a[i]];
   for(int i = n - k;i < N;++ i) {
      int cnt = 0;
      int sum = 0;
      int tl = 0;
      for(int j = i;j < N;j += i)
         sum += F[j];
      if(sum > limit)
         continue ;
      for(int j = 1;j <= n;++ j) {
         cnt += T[a[j] % i] > 0 , ++ T[a[j] % i];
         if(cnt > k) {
            tl = j; break ;
         }
      }
      if(cnt <= k)
         return ! printf("%d\n" , i);
      for(int j = 1;j <= tl;++ j)
         T[a[j] % i] = 0;
   }

   return 0;
}
