#define _USE_MATH_DEFINES
#include <array>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;
mt19937 mrand(random_device{}());
int rnd(int x) { return mrand() % x; }

int main() {
  int n;
  scanf("%d", &n);
  vector<ii> a(n);
  for (int i = 0; i < n; ++i) {
    scanf("%d", &a[i].first);
    a[i].second = i;
  }
  sort(a.begin(), a.end());
  vector<int> dp(n + 1), path(n + 1);
  set<ii> A = {{dp[0] - a[0].first, 0}};
  for (int i = 1; i <= n; ++i) {
    auto it = A.begin();
    for (; it != A.end() && i - it->second < 3; ++it);
    if (it != A.end()) {
      path[i] = it->second;
      // trace(i, path[i]);
      dp[i] = it->first + a[i - 1].first;
      if (i < n) A.insert({dp[i] - a[i].first, i});
    }
  }
  printf("%d ", dp[n]);
  int len = 0;
  vector<int> ret(n);
  for (int i = n; i != 0; i = path[i]) {
    ++len;
    for (int j = path[i]; j < i; ++j) {
      ret[a[j].second] = len;
    }
  }
  printf("%d\n", len);
  for (int i = 0; i < n; ++i) {
    printf("%d%c", ret[i], " \n"[i + 1 == n]);
  }
  return 0;
}
