#include <bits/stdc++.h>
#define int long long
using namespace std;
inline int input(){int32_t x ; scanf("%d",&x);return x;}
inline int in(){int32_t x ; scanf("%d",&x);return x;}
const int maxn = 1e6 + 50;
const int mod = 1e9 + 7;
int fact[maxn],inv[maxn];
bool mark[maxn];

inline int power(int a , int b ) {return b == 0 ? 1 : power(a * a % mod , b >> 1) * (b % 2 ? a : 1 ) % mod ; }
int q[50],t,h,dii[maxn],cnt[maxn];
inline int C(int n , int r)
{
    return fact[n] * inv[r] % mod * inv[n - r] % mod;
}
inline void solve()
{
    int n = in() , m = in();
    t = h = 0;
    while(n > 1)
    {
        int x = dii[n];
        q[t ++] = x;
        cnt[x] ++;
        n /= x;
    }
    int res = 1;
    res = res * power(2,m-1) % mod;
    for (int i = 0 ; i < t ; i ++){
        res = res * C(cnt[q[i]] + m - 1 , cnt[q[i]]) % mod;
        cnt[q[i]] = 0;
    }
    printf("%lld\n",res);
}
inline void sieve()
{
    dii[1] = 1;
    mark[1] = true;
    for (int i = 2 ; i < maxn ; i ++)
    {
        if (mark[i]) continue;
        for (int j = i * i ; j < maxn ; j += i )
            mark[j] = true , dii[j] = i;
        dii[i] = i ;
    }
}
inline void pre_calc()
{
    sieve();
    fact[0] = inv[0] = 1;
    for (int i = 1 ; i < maxn ; i ++)
    {
        fact[i ] = fact[i-1] * i % mod;
        inv[i] = inv[i-1] * power(i , mod - 2) % mod;
        
    }
}
int32_t main()
{
    int n = in();
    pre_calc();
    while(n --) solve();
}
