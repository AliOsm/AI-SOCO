#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <map>
#include <iterator>
#include <queue>
#include <list>
#include <stack>
#include <set>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef list < int > :: iterator IteratorList;

const int NMax = 100010;
const ll INF = ll(1e16);
const int cntTree = 262145;
const double eps = 1e-9;
const double PI = 3.141592653589793238462;
const int MOD = int(1e9 + 7);

#define MIN(x,y) ((x) > (y) ? (y) : (x))
#define MAX(x,y) ((x) > (y) ? (x) : (y))
#define SQR(x) ((x) * (x))
#define ABS(x) ((x) < (0) ? (-(x)) : (x))
#define SZ(x) (int) (x).size()

int n, l1, r1;
ll l, r, Ql, Qr, ans = INF;
ll w[NMax], s1[NMax], s2[NMax];

int main()
{
    cin >> n >> l >> r >> Ql >> Qr;
    for (int i = 1;i <= n;i++) cin >> w[i];
    s1[0] = 0;
    for (int i = 1;i <= n;i++) s1[i] = s1[i - 1] + w[i] * l;
    s2[n + 1] = 0;
    for (int i = n;i > 0;i--) s2[i] = s2[i + 1] + w[i] * r;
    for (int pos = 1;pos < n;pos++)
    {
        int k = MIN(pos, n - pos);
        ll tmp = 0;
        if (k == n - pos && k == pos)
        {
            ans = MIN(ans,s1[k] + s2[k + 1]);
            continue;
        }
        if (k == pos)
        {
            tmp += s1[pos] + s2[n - pos];
            l1 = pos + 1, r1 = n - pos - 1;
            if (r1 >= l1) tmp += (s2[l1] - s2[r1 + 1]) + (r1 - l1 + 1) * Qr;
            ans = MIN(ans,tmp);
        }
        if (k == n - pos)
        {
            tmp += s2[pos + 1] + s1[k + 1];
            l1 = k + 2, r1 = pos;
            if (r1 >= l1) tmp += (s1[r1] - s1[l1 - 1]) + (r1 - l1 + 1) * Ql;
            ans = MIN(ans,tmp);
        }
    }
    ans = MIN(ans,s2[1] + (n - 1) * Qr);
    ans = MIN(ans,s1[n] + (n - 1) * Ql);
    
    cout << ans << endl;
            
        

    


    
    return 0;
}
