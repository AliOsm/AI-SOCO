#include <stdio.h>
#include <bits/stdc++.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)

using namespace std;

const int N = 100000;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const ld eps = 1e-9;
const ld pi = atan2(0, -1);
const int ABC = 26;

vector<int> dx = {0, 0, -1, 1};
vector<int> dy = {-1, 1, 0, 0};

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    int n, m;
    cin >> n >> m;
    string a[n];
    rep(i, 0, n)
        cin >> a[i];
    int sx, sy, tx, ty;
    rep(i, 0, n)
        rep(j, 0, m)
            if (a[i][j] == 'S')
            {
                sx = i;
                sy = j;
            }
            else if (a[i][j] == 'E')
            {
                tx = i;
                ty = j;
            }
    string s;
    cin >> s;
    vector<int> dir(4); rep(i, 0, 4) dir[i] = i;
    int ans = 0;
    rep(ttt, 0, 24)
    {
        int x = sx, y = sy;
        bool ok = false;
        for (char c : s)
        {
            int i = dir[c - '0'];
            if (x + dx[i] >= 0 && x + dx[i] < n && y + dy[i] >= 0 && y + dy[i] < m)
            {
                x += dx[i];
                y += dy[i];
                if (a[x][y] == '#')
                    break;
                if (x == tx && y == ty)
                {
                    ok = true;
                    break;
                }
            }
            else
                break;
        }
        if (ok)
            ans++;
        next_permutation(dir.begin(), dir.end());
    }
    cout << ans << "\n";
    return 0;
}
