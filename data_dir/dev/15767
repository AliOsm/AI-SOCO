//#pragma GCC optimize("Ofast,no-stack-protector")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
//#pragma GCC target("avx,tune=native")
// Anand Jaisingh

#include<bits/stdc++.h>

using namespace std;

typedef complex<double> base;
typedef long double ld;
typedef long long ll;

#define pb push_back
#define pii pair<int,int>
#define pll pair< ll , ll >
#define vi vector<int>
#define vvi vector< vi >

const int maxn=(int)(5e5+5);
const ll mod=(ll)(1e9+7);
ll a[maxn],pre[maxn],bit[maxn];

void update(int idx,ll val)
{
    while(idx>0)
    {
        bit[idx]+=val;idx-=idx&-idx;
    }
}

ll query(ll idx)
{
    ll ret=0;

    while(idx<maxn)
    {
        ret+=bit[idx];idx+=idx&-idx;
    }

    return ret;
}

int get(vector<ll>& v,ll val)
{
    int low=0,high=v.size()-1;

    while(low<high)
    {
        int mid=(low+high+1)>>1;

        if(v[mid]<=val)
        {
            low=mid;
        }
        else
        {
            high=mid-1;
        }
    }

    return low+1;
}

vector<ll> uniq(vector<ll>& v)
{
    vector<ll> ret;ret.pb(v[0]);

    for(int i=1;i<v.size();i++)
    {
        if(v[i]!=v[i-1])
        {
            ret.pb(v[i]);
        }
    }

    return ret;
}

int main()
{
    ios_base::sync_with_stdio(0);

    int n;cin>>n;

    ll t;cin>>t;

    vector< ll > sums;

    sums.pb(t);sums.pb(0);

    for(int i=1;i<=n;i++)
    {
        cin>>a[i];

        pre[i]=pre[i-1]+a[i];

        sums.pb(pre[i]+t);

        sums.pb(pre[i]);
    }

    sort(sums.begin(),sums.end());

    sums.erase(unique(sums.begin(),sums.end()),sums.end());

    ll res=0;

    for(int i=0;i<=n;i++)
    {
        int get_idx=get(sums,pre[i]);

        res+=query(get_idx+1);

        int idx=get(sums,pre[i]+t);

        update(idx,1);
    }

    cout<<res<<endl;

    return 0;
}