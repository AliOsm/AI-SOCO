#include <iostream>
#include <stdio.h>
#include <string>
#include <memory.h>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <time.h>
#include <assert.h>
#include <cmath>
#include <stack>
#include <string.h>
#include <sstream>
#include <algorithm>
using namespace std;
typedef long long ll;
vector<vector<int> > v;
vector<int> f;
vector<int> dp;
int L = 19;
int n, q;
bool F = false;
void insert(int x) {
	int cur = 0;
	for (int i = L - 1; i >= 0; --i) {
		bool z = (x >> i) & 1;
		if (v[cur][z] == -1) {
			v[cur][z] = v.size();
			v.push_back(vector<int>(2, -1));
			f.push_back(0);
		}
		cur = v[cur][z];
	}
	f[cur] = F;
}
int calc(int u) {
	dp[u] = f[u];
	for (int i = 0; i < 2; ++i)
		if (v[u][i] != -1)
			dp[u] += calc(v[u][i]);
	return dp[u];
}
int res;
int total;
void get(int u, int d) {
	if (d == -1)
		return;
	int x = (total >> d) & 1;
	int left = dp[v[u][0 ^ x]];
	res *= 2;
	if (left == (1 << d)) {
		++res;
		get(v[u][1 ^ x], d - 1);
	}
	else {
		get(v[u][0 ^ x], d - 1);
	}
}
int main()
{
	v.push_back(vector<int>(2, -1));
	f.push_back(0);
	scanf("%d%d", &n, &q);
	for (int i = 0; i < (1<<L); ++i)
		insert(i);
	F = true;
	for (int x, i = 0; i < n; ++i) {
		scanf("%d", &x);
		insert(x);
	}
	dp.resize(f.size());
	calc(0);
	total = 0;
	while (q--) {
		int x;
		scanf("%d", &x);
		total ^= x;
		res = 0;
		get(0, L - 1);
		printf("%d\n", res);
	}
	return 0;
}