#include<bits/stdc++.h>
#define god dimasi5eks
#pragma GCC optimize("O3")
#define fi first
#define se second
#define pb push_back
#define pf push_front
#define mod 1000000007
#define dancila 3.14159265359
#define eps 1e-9

using namespace std;

typedef long long ll;


int add(int a, int b)
{
    ll x = a+b;
    if(x >= mod)
        x -= mod;
    if(x < 0)
        x += mod;
    return x;
}
ll mul(ll a, ll b)
{
    return (a*b) % mod;
}

ll pw(ll a, ll b)
{
    ll ans = 1;
    while(b)
    {
        if(b & 1)
            ans = (ans * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return ans;
}
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
long long rand_seed()
{
    long long a = rng();
    return a;
}
vector<int> divi[100002];
void ciur()
{
    for(int i = 2; i <= 100000; ++i)
    {
        if(divi[i].empty())
        {
            for(int j = i; j <= 100000; j += i)
                divi[j].pb(i);
        }
    }
}
ll fact[200002], inv[200002];
ll C(int n, int k)
{
    if(n < k)
        return 0;
    return mul(fact[n], mul(inv[k], inv[n-k]));
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    fact[0] = inv[0] = 1;
    for(int i = 1; i <= 200000; ++i)
    {
        fact[i] = mul(fact[i-1], i);
        inv[i] = pw(fact[i], mod - 2);
    }
    ciur();
    int q;
    cin >> q;
    for(; q; --q)
    {
        int n, t;
        cin >> n >> t;
        ll ans = 0;
        for(int i = 0; i < (1<<(divi[n].size())); ++i)
        {
            int odd = 0;
            int prod = 1;
            for(int j = 0; j < divi[n].size(); ++j)
                if(i & (1<<j))
                {
                    prod = prod * divi[n][j];
                    odd ^= 1;
                }
            if(odd == 0)
                ans = add(ans, C(n/prod - 1, t - 1));
            else
                ans = add(ans, -C(n/prod - 1, t - 1));
        }
        cout << ans << '\n';
    }
    return 0;
}
