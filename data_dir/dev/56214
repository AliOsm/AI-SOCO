                /*"Success isn't permanent, failure isn't fatal,
                                      it's the courage to continue that counts"*/
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
//typedef tree<pii, null_type, less<pii>, rb_tree_tag, tree_order_statistics_node_update> oset;
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
using namespace std;
const ll mod=1e9+7;         
const int N=1e5+4;

typedef pair<ll,ll> pll;

bool visit[3][N];

ll dis(pll a,pll b)
{
    ll dx=a.F-b.F,dy=a.S-b.S;
    
    if(dx<0)
    dx*=-1;
    
    if(dy<0)
    dy*=-1;
    
    return dx+dy;
}

int main()
{
    ll x,y,ax,ay,bx,by;
    
    cin>>x>>y>>ax>>ay>>bx>>by;
    
    ll xs,ys,t;
    
    cin>>xs>>ys>>t;
    
    pll src={xs,ys};
    
    vector<pll> v(70);
    
    ll lim=1e18;
    
    v[0]={x,y};
    
    int ind=0;
    
    rep(i,1,70)
    {
        ll px=v[i-1].F,py=v[i-1].S;
        
        if(px>(lim+ax-1)/ax)
        break;
        
        if(py>(lim+ay-1)/ay)
        break;
        
        ll cx=px*ax+bx,cy=py*ay+by;
        
        v[i]={cx,cy};
        
        ind=i;
        
        //cout<<i<<" "<<cx<<" "<<cy<<endl;
    }
    
    int ans=0;
    
    rep(i,0,ind+1)
    {
        rep(j,i,ind+1)
        {
            ll here=min(dis(src,v[i]),dis(src,v[j]));
            
            rep(k,i+1,j+1)
            here+=dis(v[k-1],v[k]);
            
            if(here<=t)
            ans=max(ans,j-i+1);
        }
    }
    
    pri(ans);
    
    
    return 0;
}