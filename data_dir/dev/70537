#include <cstdio>
#include <cstdlib>
#include <functional>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <algorithm>

using namespace std;
typedef pair<int, int> pr;
typedef pair<pr, pr> prr;
typedef pair<int, pr> edge;

typedef long long ll;
#define MP make_pair
const int inf = -2000000000;

int gcd(int a, int b)
{
    while (b)
    {
        a %= b;
        swap(a, b);
    }
    return a;
}
int a[8][3];

ll sqr(ll a){ return a*a; }

bool check()
{
    map<ll, int> data;
    for (int i = 0; i < 8; ++i)
    {
        for (int k = i + 1; k < 8; ++k)
        {
            ++data[sqr(a[i][0] - a[k][0]) +
                sqr(a[i][1] - a[k][1]) + 
                sqr(a[i][2] - a[k][2])];
        }
    }
    if (data.size() != 3) return false;
    ll t1 = data.begin()->second; data.erase(data.begin());
    ll t2 = data.begin()->second; data.erase(data.begin());
    ll t3 = data.begin()->second; data.erase(data.begin());
    if (t1 == 12 && t2 == 12 && t3 == 4)
        return true;
    return false;
}

int main()
{
    for (int i = 0; i < 8; ++i)
    {
        scanf("%d %d %d", &a[i][0], &a[i][1], &a[i][2]);
        sort(a[i], a[i] + 3);
    }


    // MAADNESS????????? 
    // THIS
    // IS
    // PERMUTATIOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOON
    do
    { 
        do
        {
            do
            {
                do
                {
                    do
                    {
                        do
                        {
                            do
                            {
                                if (check())
                                {
                                    printf("YES\n");
                                    for (int i = 0; i < 8; ++i)
                                    {
                                        for (int j = 0; j < 3; ++j)
                                            printf("%d ", a[i][j]);
                                        printf("\n");
                                    }
                                    return 0;
                                }
                            } while (next_permutation(a[6], a[6] + 3));
                        } while (next_permutation(a[5], a[5] + 3));
                    } while (next_permutation(a[4], a[4] + 3));
                } while (next_permutation(a[3], a[3] + 3));
            } while (next_permutation(a[2], a[2] + 3));
        } while (next_permutation(a[1], a[1] + 3));
    } while (next_permutation(a[0], a[0] + 3));
    
    printf("NO\n");
    return 0;
}