#include <bits/stdc++.h>
using namespace std;

using ll = long long;

const int N = 1e5+10;
const int MOD = 1e9+7;

int n, c[N];
vector<int> g[N];

ll dp[N][2];
void dfs(int u, int f) {
	dp[u][0] = 1;
	dp[u][1] = 0;

	for(int v : g[u]) if(v != f) {
		dfs(v, u);
		dp[u][1] = dp[u][1] * dp[v][0] % MOD;
		dp[u][1] = (dp[u][1] + dp[u][0] * dp[v][1] % MOD) % MOD;
		dp[u][0] = dp[u][0] * dp[v][0] % MOD;
	}
	if(c[u] == 1) dp[u][1] = dp[u][0];
	else dp[u][0] = (dp[u][0] + dp[u][1]) % MOD;
}

int main() {
	scanf("%d", &n);
	for(int i = 1; i < n; i++) {
		int p; scanf("%d", &p);
		g[p].push_back(i);
		g[i].push_back(p);
	}
	for(int i = 0; i < n; i++)
		scanf("%d", &c[i]);
	dfs(0,-1);
	printf("%lld", dp[0][1]);
	return 0;
}