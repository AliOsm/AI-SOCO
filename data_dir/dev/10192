#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <regex>
#include <sstream>
#include <iterator>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cmath>
using namespace std;

#define MASK 0b000LL
#define GET(i) (1LL << (i))

#if MASK & GET(0)
template<typename T>
inline void read(T & v)
{
	for (auto & x : v)
		cin >> x;
}
#endif

#if MASK & GET(1)
template<typename T>
T nextIntLn()
{
	string tmp;
	T val;
	cin >> val;
	getline(cin, tmp);
	return val;
}
#endif 

#if MASK & GET(2)
std::vector<std::string> split(string & input, const std::string & reg)
{
	regex ws_re(reg);
	std::sregex_token_iterator first(input.begin(), input.end(), ws_re, -1), last;
	return{ first, last };
}
#endif

void solve()
{
	const int m = 100 * 1000;
	vector<int> lp(m + 1);
	vector<int> pr;
	for (int i = 2; i <= m; ++i)
	{
		if (lp[i] == 0)
		{
			pr.push_back(i);
			lp[i] = i;
		}
		for (int j = 0; j < (int)pr.size() && i * pr[j] <= m && pr[j] <= lp[i]; ++j)
		{
			lp[i * pr[j]] = pr[j];
		}
	}
	int n;
	cin >> n;
	vector<int> v(n);
	for (int i = 0; i < n; ++i)
	{
		cin >> v[i];
	}
	int ans = 1;
	vector<int> dp(n, 1);
	vector<vector<int> > q(m);
	for (int i = 0; i < n; ++i)
	{
		vector<int> fct;
		int w = v[i];
		while (w > 1)
		{
			int to = lp[w];
			while (w % to == 0)
				w /= to;
			fct.push_back(to);
		}

		for (int j = 0; j < (int)fct.size(); ++j)
		{
			q[fct[j]].push_back(i);
		}
	}

	for (int i = 0; i < m; ++i)
	{
		reverse(q[i].begin(), q[i].end());
	}

	for (int i = 0; i < n; ++i)
	{
		vector<int> fct;
		int w = v[i];
		while (w > 1)
		{
			int to = lp[w];
			while (w % to == 0)
				w /= to;
			fct.push_back(to);
		}

		for (int j = 0; j < (int)fct.size(); ++j)
		{
			q[fct[j]].pop_back();
		}

		for (int j = 0; j < (int)fct.size(); ++j)
		{
			auto it = std::lower_bound(q[fct[j]].rbegin(), q[fct[j]].rend(), i);
			if (it != q[fct[j]].rend())
			{
				dp[*it] = max(dp[*it], dp[i] + 1);
				ans = max(ans, dp[*it]);
			}
		}
	}
	cout << ans << endl;
}

int main()
{
	std::ios_base::sync_with_stdio(false);
	solve();
	return 0;
}