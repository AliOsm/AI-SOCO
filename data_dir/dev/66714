#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>	
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound          	    
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcount                                                                                        
#define sqr(x) ((x) * (x))
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;                                  
const int N = (int)2e5 + 123;
const ll inf = (ll)3e18 + 1;
const int c = (int)5e5;
                                       
const double pi = acos(-1.0);       																																																																																															// Ya katala
const double eps = 1e-7;
const int dx[] = {0, 0, 1, 0, -1};   																																					
const int dy[] = {0, 1, 0, -1, 0};  		

int n, a[2001], b[2001];
vector < pair <int, pii> > v;

inline void boost () {
	ios_base :: sync_with_stdio (NULL);
	cin.tie (NULL), cout.tie (NULL);          
}

inline void Solve () {
	cin >> n;
	for (int i = 0; i < n; i ++) cin >> a[i], b[i] = a[i], a[i] += c;
	v.pb ({1, {n, c}});
	for (int i = 0; i < n - 1; i ++) v.pb ({2, {i + 1, a[i] - i}});
	cout << sz (v) << endl;
	for (int i = 0; i < sz (v); i ++) cout << v[i].F << ' ' << v[i].S.F << ' ' << v[i].S.S << endl;

}                                          
                  
main () {                                       
//	freopen ("gcm.in", "r", stdin);    
//	freopen ("gcm.out", "w", stdout); 	          
	boost ();
	int tt = 1;
//	cin >> tt;   
	while (tt --) {
		Solve ();
	}                                               
	return 0;      
}         	                                                    