// In the name of GOD
// Amirhesam ADB (Adibov)
#include <iostream>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <string>
#include <math.h>
#include <iomanip>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <conio.h>

#define fs first
#define sc second
#define fio ios::sync_with_stdio(false);cin.tie();cout.tie();
#define MP make_pair
#define PB push_back


using namespace std;
typedef long long ll;
typedef pair <int , int> pii;
typedef pair <pii , int> ppi;
typedef pair <int , pii> pip;
typedef set <ppi> sppi;
typedef set <pip> spip;
typedef map <int , int> mii;

const int N = 3e2 + 10;
int n , k , u , par[N] , cnt[N];
vector <int> adj[N] , dp[N] , leaf , ans;

void make_par(int v , int pr){
	par[v] = pr;
	for(int i = 0; i < adj[v].size(); i++)
		if(adj[v][i] != pr)
			make_par(adj[v][i] , v);
}

void fill_dp(int v){
	if(v && adj[v].size() == 1){
		dp[v].PB(v);
		return;
	}
	
	for(int i = 0; i < adj[v].size(); i++){
		if(adj[v][i] != par[v]){
			fill_dp(adj[v][i]);
			for(int j = 0; j < dp[adj[v][i]].size(); j++)
				dp[v].PB(dp[adj[v][i]][j]);
		}
	}
}

int fnd(int v){
	for(int i = 0; i < adj[v].size(); i++){
		if(adj[v][i] == par[v])
			continue;
			
		for(int j = 0; j < dp[adj[v][i]].size(); j++){
			if(dp[adj[v][i]][j] == leaf[u]){
				return (i + 1);
			}
		}
	}
	return 0;
}

void dfs(int v){
	if(v && adj[v].size() == 1){
		
		if(v != leaf[u])
			cout << -1 , exit (0);
			
		u++;
		return;
	}
	
	while((cnt[v] < adj[v].size() - 1 && v) || (!v && cnt[v] < adj[v].size())){
		int x = fnd(v);
		if(!x){
			cout << -1 , exit(0);
		}
		
		x--;
		ans.PB(adj[v][x]);
		dfs(adj[v][x]);
		cnt[v]++;
		ans.PB(v);
	}
	
}

int main() {
	fio;
	cin >> n;
	for(int i = 1; i < n; i++){
		int a , b; cin >> a >> b; a--; b--;
		adj[a].PB(b); adj[b].PB(a);
	}
	
	for(int i = 0; i < n; i++)
		if(i && adj[i].size() == 1)
			k++;
	
	for(int i = 0; i < k; i++){
		int a; cin >> a; a--;
		leaf.PB(a);
	}
	
	make_par(0 , 0);
	fill_dp(0);
	dfs(0);
	
	if(ans.size() < (2 * n) - 2)
		return cout << -1 , 0;
	
	cout << 1 << " ";
	for(int i = 0; i < ans.size(); i++)
		cout << ans[i] + 1 << " ";
}
