#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define SPEED ios_base::sync_with_stdio(false); cin.tie(NULL);
#define FOR(i, a, b) for (ll i = a; i < b; ++i)
#define RFOR(i, b, a) for (ll i = b; i >= a; --i)
#define ALL(x) x.begin(), x.end()
#define DEBUG(args...) { string _s = #args; replace(ALL(_s), ' ', '\0');\
replace(ALL(_s), ',', ' ');\
stringstream _ss(_s); istream_iterator<string> _it(_ss); _debug(_it, args);}
#define endl "\n"
#define F first
#define S second
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)

using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

void _debug(istream_iterator<string>) {}
template<typename T, typename... Args>
void _debug(istream_iterator<string> it, T first, Args... args) {
    cerr << ">> " << *it << " : " << first << endl; _debug(++it, args...);
}
template <typename T1, typename T2>
inline ostream& operator << (ostream& out, const pair<T1, T2>& p) {
    return out << "(" << p.F << ", " << p.S << ")";
}
template<typename T>
inline ostream& operator << (ostream& out, const vector<T>& v) {
    if (v.empty()) return out << "[]";
    else { out << '['; for (auto& e : v) { out << e << ", "; } return out << "\b\b]"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const set<T>& s) {
    if (s.empty()) return out << "{}";
    else { out << '{'; for (auto& e : s) { out << e << ", "; } return out << "\b\b}"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const unordered_set<T>& s) {
    return out << set<T>(ALL(s));
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const map<T1, T2>& m) {
    if (m.empty()) return out << "{}";
    out << '{'; for (auto& p : m) { out << p << ", "; } return out << "\b\b}";
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const unordered_map<T1, T2>& m) {
    return out << map<T1, T2>(ALL(m));
}
template<typename T>
inline ostream& operator << (ostream& out, const ordered_set<T>& s) {
    return out << set<T>(ALL(s));
}

typedef long long ll;
typedef long double ld;
typedef vector<long long> vll;
typedef pair<ll, ll> pll;
typedef vector<pair<ll, ll>> vpll;
typedef unordered_map<ll, ll> STll;
template<typename T1, typename T2, typename... Args>
inline ostream& operator << (ostream& out, const unordered_map<T1, T2, Args...>& m) {
    return out << map<T1, T2>(ALL(m));
}
template<typename T, typename... Args>
inline ostream& operator << (ostream& out, const unordered_set<T, Args...>& s) {
    return out << set<T>(ALL(s));
}
struct pair_hash {
    template<typename T1, typename T2>
    inline size_t operator()(const pair<T1, T2>& p) const
    {
        return hash<T1>()(p.first) * 31 + hash<T2>()(p.second);
    }
};

/************************************** MAIN PROGRAM ********************************************/
ll n;
const int MAX = 1e9;

unordered_map<pair<int, int>, bool, pair_hash> allowed;
unordered_map<pair<int, int>, bool, pair_hash> marked;
ll sr, sc, desr, desc;

int dR[] = {-1, 0, 0, 1, -1, 1, -1, 1};
int dC[] = {0, 1, -1, 0, -1, 1, 1, -1};
bool done = false;

void bfs(int sr, int sc)
{
    queue<pair<pair<ll, int>, ll>> q;
    q.push(mp(mp(sr, sc), 0));
    marked[mp(sr, sc)] = true;

    while (!q.empty())
    {
        ll r = q.front().F.F;
        ll c = q.front().F.S;
        ll depth = q.front().S;
        q.pop();
        //DEBUG(r, c)

        if (r == desr && c == desc) {
            done = true;
            cout << depth;
            break;
        }

        FOR(k, 0, 8)
        {
            ll x = r + dR[k], y = c + dC[k];

            if (!(x < MAX && x >= 0 && y >= 0 && y < MAX)) continue;
            if (!allowed.count(mp(x, y))) continue;
            if (marked.count(mp(x, y))) continue;

            marked[mp(x, y)] = true;
            q.push(mp(mp(x, y), depth + 1));
        }
    }
}

int main()
{
   // freopen("input.txt", "r", stdin);
    SPEED

    cin >> sr >> sc >> desr >> desc;
    sr--, sc--, desr--, desc--;
    cin >> n;

    FOR(i, 0, n)
    {
        int r, a, b;
        cin >> r >> a >> b;
        r--, a--, b--;
        FOR(j, a, b + 1)
        {
            allowed[mp(r, j)] = true;
        }
    }

    bfs(sr, sc);
    if (!done)
    {
        cout << -1;
    }
}
/************************************** END OF PROGRAM ******************************************/
