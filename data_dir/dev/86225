#include <algorithm>
#include <iostream>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <queue>
#include <map>
#include <set>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

typedef long long ll;
typedef pair < int, int > ii;
typedef pair < ll, ll > pl;

const int inf = 1e9 + 333;
const ll linf = 1e18 + 333;

int h, q;
set < pl > can;
vector < pl > v;

int main () {
    
    scanf("%d %d", &h, &q);
    
    can.insert(pl(1LL << h - 1, (1LL << h) - 1));
    
    for(int qq = 0; qq < q; qq++) {
        ll d, l, r;
        int k;
        scanf("%lld %lld %lld %d", &d, &l, &r, &k);
        ll L = max(1LL << d - 1, l);
        ll R = min((1LL << d) - 1, r);
        if(L > R) {
            puts("Game cheated!");
            return 0;
        }
        ll b = L << h - d;
        ll e = (R << h - d) + (1LL << h - d) - 1;
        if(!k)
            v.push_back(pl(b, e));
        else {
            v.push_back(pl(-linf, b - 1));
            v.push_back(pl(e + 1, +linf));
        }
    }
    
    foreach(tt, v) {
        ll x = tt -> first;
        ll y = tt -> second;
        //printf("x = %lld y = %lld\n", x, y);
        set < pl > :: iterator it = can.lower_bound(pl(x, 0)), jt;
        if(it != can.begin()) {
            it--;
            if(it -> second >= x) {
                ll ix = it -> first;
                ll iy = it -> second;
                can.erase(it);
                if(ix < x)
                    can.insert(pl(ix, x - 1));
                if(y < iy)
                    can.insert(pl(y + 1, iy));
            }
        }
        it = can.lower_bound(pl(x, 0));
        while(it != can.end()) {
            if(it -> second <= y) {
                jt = it;
                it++;
                can.erase(jt);
                continue;
            }
            if(it -> first > y)
                break;
            ll x = y + 1;
            ll y = it -> second;
            can.erase(it);
            can.insert(pl(x, y));
            break;
        }
        //printf("size = %d\n", can.size());
        //foreach(it, can)
        //    printf("%lld %lld\n", it -> first, it -> second);
        //puts("");
    }
    
    if(can.size()) {
        if(can.size() == 1 and can.begin() -> first == can.begin() -> second)
            printf("%lld\n", can.begin() -> first);
        else
            puts("Data not sufficient!");
    }
    else
        puts("Game cheated!");
    
    return 0;
    
}
