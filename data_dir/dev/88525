
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j123 = n; (i) < j123; (i) ++)
#define rep1(i, n) for (int (i) = 1, j123 = n; (i) <= j123; (i) ++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout << #a << " :";for(int i123=(x);i123<=(y);i123++) cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int(x.size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

ll L1, R1, L2, R2;
vector<ll> lucky;
int gen(int n)
{
  rep(mask,1<<n)
  {
    ll x = 0;
    rep(i,n)
    {
      if ((mask>>i)&1)
        x = 10 * x + 4;
      else
        x = 10 * x + 7;
    }
    lucky.pb(x);
  }
}
int K;
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0);
  cin >> L1 >> R1 >> L2 >> R2 >> K;
//  db(L1);
//  db(R1);
//  db(L2);
//  db(R2);
  rep1(i,11)
  {
    gen(i);
  }
  lucky.pb(0);
  sort(lucky.begin(), lucky.end());
//  dba(lucky,0, 20);
//  db(sz(lucky));
  ld tot = 0;
  for (int i = 1; i + K < sz(lucky); i++)
  {
    // include all lucky numbers
    // between lucky[i] .. lucky[i+K-1] (inclusive)
    if (R1 < lucky[i+K-1] && R2 < lucky[i+K-1]) continue;
//    db(R1); db(R2); db(L1); db(L2); db(lucky[i+K-1]);
    if (K > 1)
    {
      rep(fooooo,2)
      {
        // probability that first one <- [lucky[i-1]+1,lucky[i]]
        ll leftmn = max(lucky[i-1]+1, L1);
        ll leftmx = min(lucky[i], R1);
        ll left = max(0ll, leftmx - leftmn + 1);
        // probability that the second one <- [lucky[i+K-1],lucky[i+k]-1]
        ll rightmn = max(lucky[i+K-1], L2);
        ll rightmx = min(lucky[i+K]-1, R2);
        ll right = max(0ll, rightmx - rightmn + 1);
        //      db(left);
        //      db(right);
        tot += left * 1.0 * right;
        swap(R1,R2);
        swap(L1,L2);
      }
    }
    else
    {
      rep(fooooo,2)
      {
        // probability that first one <- [lucky[i-1]+1,lucky[i]]
        ll leftmn = max(lucky[i-1]+1, L1);
        ll leftmx = min(lucky[i], R1);
        ll left = max(0ll, leftmx - leftmn + 1);
        // probability that the second one <- [lucky[i],lucky[i++1]-1]
        ll rightmn = max(lucky[i+K-1], L2);
        ll rightmx = min(lucky[i+K]-1, R2);
        ll right = max(0ll, rightmx - rightmn + 1);
        //      db(left);
        //      db(right);
        tot += left * 1.0 * right;
        swap(R1,R2);
        swap(L1,L2);
      }
      if (L1 <= lucky[i] && lucky[i] <= R1)
      if (L2 <= lucky[i] && lucky[i] <= R2)
        tot -= 1;
    }
  }
  cout << tot / (R1-L1+1) / (R2-L2+1) << endl;
}


