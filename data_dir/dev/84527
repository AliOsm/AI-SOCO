// Nazarbek Altybay

#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <cassert>
#include <iomanip>
#include <iostream>
#include <algorithm>
//#include <unordered_set>
//#include <unordered_map>

#define pb push_back
#define mp make_pair

#define f first
#define s second

using namespace std;


typedef long double ld;
typedef long long ll;

typedef pair<ld, ld> tri;


const ld PI = acos(-1);
const ld EPS = 1e-6;

const int MOD = (int) 1e9 + 7;
const int N = (int) 5e3 + 7;

typedef vector<int> vi;

int f[N];
int inv[N];

int n;
string s;

int dp[N][N];
int sum[N][N];

int pre[N];
int last[N];

void add(int &x, int y) {
  x += y;
  if (x >= MOD)
    x -= MOD;
}

int get(int x, int y) {
  if (x < 0)
    return 0;
  if (sum[x][y] != -1)
    return sum[x][y];
  sum[x][y] = get(x - 1, y) + dp[x][y];
  if (sum[x][y] >= MOD)
    sum[x][y] -= MOD;
  return sum[x][y];
}

int cnk(int x, int y) {
  if (y > x || y < 0) return 0;
  int res = f[x];
  res = (res * 1ll * inv[y]) % MOD;
  res = (res * 1ll * inv[x - y]) % MOD;
  return res;
}

int binpow(int x, int y) {
  int res = 1;
  while (y){ 
    if (y & 1) res = (res * 1ll * x) % MOD;
    y >>= 1;
    x = (x * 1ll * x) % MOD;
  }
  return res;
}

int main() {
  #ifdef LOCAL
  freopen("in.txt", "r", stdin);
  //freopen("out.txt", "w", stdout);
  #endif

  f[0] = 1;
  inv[0] = 1;
  for (int i = 1; i < N; i++) {
    f[i] = (f[i - 1] * 1ll * i) % MOD;
  }
  inv[N - 1] = binpow(f[N - 1], MOD - 2);
  for (int i = N - 2; i > 0; i--)
    inv[i] = (inv[i + 1] * 1ll * (i + 1) % MOD);

  ios_base::sync_with_stdio(0);

  cin >> n >> s;

  dp[0][0] = 1;
  memset(sum, -1, sizeof sum);

  int ans = 0;
  for(int i = 1; i <= n; i++)
  {
    pre[i] = last[s[i - 1]];
    for (int j = 1; j <= i; j++) {
      if (pre[i] == 0)
        add(dp[i][j], dp[0][j - 1]);
      int val = get(i - 1, j - 1) - get(pre[i], j - 1);
      if (val < 0) val += MOD;
      add(dp[i][j], val);
      add(ans, dp[i][j] * 1ll * cnk(n - 1, j - 1) % MOD);
    }
    last[s[i - 1]] = i;
  }
  cout << ans;

  return 0; 
}

// miss me? miss me? miss me? miss me? miss me? miss me? miss me? miss me? miss me?