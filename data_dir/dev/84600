#include <bits/stdc++.h>

using namespace std;

using ll = long long int;
using ull = unsigned long long int;
using dd = double;
using ldd = long double;
using si = short int;
using pii = pair<int, int>;
using pll = pair<ll, ll>;

#define all(x) (x).begin(), (x).end()
#define ff first
#define ss second
#define fff ff.ff
#define ffs ff.ss
#define ssf ss.ff
#define sss ss.ss

//debug defines
#ifdef HOME
    #define debug(x) cout << #x << " " << x << endl;
    #define debug_v(x) for (auto j : (x)){ cout << j << " ";} cout << endl;
    #define PO cout << "Pomelo" << endl;
    #define OL cout << "Oliva" << endl;
    int jjj;
    #define wait 0;
#else
    #define debug(x) 0
    #define debug_v(x) 0
    #define PO 0
    #define OL 0
    #define wait 0
#endif // HOME
//end of debug defines

bool cross(pair<int, int> a, pair<int, int> b, int n)
{

    if (a.ff == b.ff || a.ff == b.ss || a.ss == b.ff || a.ss == b.ss)
        return 0;
    int cnt = 0;
    if (a.ff > a.ss)
        swap(a.ff, a.ss);
    cnt = ((b.ff > a.ff && b.ff < a.ss) + (b.ss > a.ff && b.ss < a.ss));
    return cnt % 2;
}

void dfs(int v, vector<vector<int>>& gr, vector<bool>& was, vector<int>& tos)
{
    was[v] = 1;
    for (int i : gr[v])
    {
        if (!was[i])
            dfs(i, gr, was, tos);
    }
    tos.push_back(v);
}

void dfs_color(int v, vector<vector<int>>& gr, vector<int>& color, int clr)
{
    color[v] = clr;
    for (int i : gr[v])
        if (color[i] == 0)
            dfs_color(i, gr, color, clr);
}

int main()
{
    ios_base::sync_with_stdio(0);
    cout.tie(0);
    cin.tie(0);

    int n, m;
    cin >> n >> m;
    vector<pair<int, int>> arr(m);
    for (int i = 0; i < m; ++i)
    {
        cin >> arr[i].ff >> arr[i].ss;
        --arr[i].ff;
        --arr[i].ss;
    }
    vector<vector<int>> gr(2 * m);
    vector<vector<int>> rgr(2 * m);
    for (int i = 0; i < m; ++i)
    {
        for (int j = 0; j < m; ++j)
        {
            if (i == j)
                continue;
            if (cross(arr[i], arr[j], n))
            {
                gr[i * 2].push_back(j * 2 + 1);
                gr[i * 2 + 1].push_back(j * 2);
                rgr[j * 2].push_back(i * 2 + 1);
                rgr[j * 2 +  1].push_back(i * 2);
            }
        }
    }
    #ifdef HOME
    for (int i = 0; i < gr.size(); ++i)
    {
        cout << i << " : ";
        for (int j : gr[i])
            cout << j << " ";
        cout << '\n';
    }
    #endif // HOME
    vector<bool> was(gr.size(), 0);
    vector<int> tos;
    for (int i = 0; i < gr.size(); ++i)
    {
        if (!was[i])
            dfs(i, gr, was, tos);
    }
    debug_v(tos);
    reverse(all(tos));
    vector<int> color(gr.size());
    int clr = 1;
    for (int i : tos)
    {
        if (!color[i])
        {
            dfs_color(i, rgr, color, clr);
            ++clr;
        }
    }
    debug_v(color);
    vector<bool> ans(m);
    for (int i = 0; i < m; ++i)
    {
        if (color[i * 2] < color[i * 2 + 1])
            ans[i] = 1;
        if (color[i * 2] == color[i * 2 + 1])
        {
            cout << "Impossible";
            return 0;
        }
    }
    for (bool i : ans)
    {
        cout << (char)('o' + ('i' - 'o') * i);
    }
    return 0;
}
