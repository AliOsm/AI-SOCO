#include <bits/stdc++.h>
using namespace std;

int M;
int cycle[1000006];

void dfs(int i, int timer, int x, int y)
{
    if(cycle[i]!=-1)
        return;

    cycle[i] = timer;
    dfs(((long long)i*x+y)%M, timer+1, x, y);
}

pair<int, int> getCycle(int startx, int goal, int x, int y)
{
    memset(cycle, -1, sizeof(cycle));
    dfs(startx, 0, x, y);

    if(cycle[goal]==-1)
        return make_pair(-1, -1);

    int ptr = max_element(cycle, cycle+M) - cycle;
    int nextNum = ((long long)ptr*x+y)%M;

    if(cycle[goal]<cycle[nextNum])
        return make_pair(cycle[goal], -1);

    return make_pair(cycle[goal], cycle[ptr] - cycle[nextNum] + 1);
}

void solve(long long s1, long long c1, long long s2, long long c2)
{
    if(c1==-1 && c2==-1)
    {
        if(s1==s2)
            printf("%lld\n", s1);
        else
            printf("-1\n");

        return;
    }

    if(c1==-1)
        swap(s1, s2), swap(c1, c2);

    s2 -= s1;

    if(s2<0 || s2%c1)
        printf("-1\n");
    else
        printf("%lld\n", s1+s2);
}

int main()
{
    cin >> M;

    int h1, a1, x1, y1, h2, a2, x2, y2;
    cin >> h1 >> a1 >> x1 >> y1 >> h2 >> a2 >> x2 >> y2;

    pair<int, int> x = getCycle(h1, a1, x1, y1);
    pair<int, int> y = getCycle(h2, a2, x2, y2);

    if(x.first==-1 || y.first==-1)
    {
        printf("-1\n");
        return 0;
    }

    if(x.second==-1 || y.second==-1)
    {
        solve(x.first, x.second, y.first, y.second);
        return 0;
    }

    long long s1 = x.first, s2 = y.first;
    long long c1 = x.second, c2 = y.second;

    if(s1<s2)
        swap(s1, s2), swap(c1, c2);

    for(long long i=0; i<c2; i++)
    {
        long long dist = i*c1 + s1;

        if((dist-s2)%c2==0)
        {
            printf("%lld\n", dist);
            return 0;
        }
    }

    printf("-1\n");
    return 0;
}
