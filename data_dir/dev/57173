#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <bitset>
#include <complex>
#include <unordered_map>

//#pragma comment(linker, "/STACK:512000000")

using namespace std;

#define pb emplace_back
#define mp make_pair
#define all(a) (a).begin(), (a).end()
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const int infi = 1e9 + 7;
const ll infl = (ll)1e8 + (ll)7;

const ll mod = 998244353;
vector<vector<int> > g;
int sz[2];
int color[300500];
int used[300500];
int flag_bad = 0;
void dfs(int v, int c) {
    if (used[v]) {
        if (color[v] != c)
            flag_bad = 1;
        return;
    }
    used[v] = 1;
    color[v] = c;
    sz[c]++;
    for (int to : g[v]) {
        dfs(to, c ^ 1);
    }
}
ll st[300500];

int32_t main() {
    cin.sync_with_stdio(false);
    cin.tie(0);
    srand(time(NULL));
   // freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    //freopen("customs.in", "r", stdin); freopen("customs.out", "w", stdout);
    st[0] = 1;
    forab(i, 1, 300500)
        st[i] = (st[i - 1] * 2) % mod;
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        g.clear();
        g.resize(n);
        forn(i, n)
            color[i] = used[i] = 0;
        forn(i, m) {
            int u, v;
            cin >> u >> v;
            --u, --v;
            g[u].pb(v);
            g[v].pb(u);
        }
        ll ans = 1;
        flag_bad = 0;
        forn(i, n) {
            if (used[i])
                continue;
            sz[0] = sz[1] = 0;
            dfs(i, 0);
            if (flag_bad) {
                ans = 0;
                break;
            }
            ans *= st[sz[0]] + st[sz[1]];
            ans %= mod;
        }
        cout << ans << '\n';
    }
    
    return 0;
}