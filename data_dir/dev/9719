#include <iostream>
#include <chrono>
#include <random>
#include <cassert>
#include <numeric>
#include <limits>
#include <climits>
#include <cmath>
#include <deque>
#include <cstring>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <vector>
#include <algorithm>
using namespace std;
#define all(v) (v).begin(), (v).end()
#define pb(v) push_back(v)
#define fst first
#define snd second
using ll = long long int;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using vint = vector<int>;


const int MAXN = 1000 * 1000 * 3;

vector<int> er;

void gen() {
    er.resize(MAXN);
    for (int i = 2; i < MAXN; i++) {
        if (er[i] == 1) {
            continue;
        }
        for (int z = i * 2; z < MAXN; z += i) {
            er[z] = 1;
        }
    }
}

class solver {
private:
    void gen(int n) {
        // (n-1) points have degree of 2 or 3

        // 1 point have degree of K
        // K points have degree of 3
        // (n - 1 - K) points have degree of 2
    }

public:
    void solve(ll n) {
        for (int k = 2; k <= n - 1; k++) {
            int cur = n - 1 + k;
            if (er[cur] == 0 && er[k] == 0) {
                return;
            }
        }

        for (int a = 2; a <= n - 1; a++) {
            for (int b = 2; b <= n - 1; b++) {
                if (a + b > n - 2) continue;
                int cur = n - 2 + a + b;
                if (er[cur] == 0 && er[a] == 0 && er[b] == 0) {
                    return;
                }
            }
        }

        cout << n << " govno " << endl;
        //throw n;
    }

    void solve2(int n) {
        if (n == 3) {
            cout << 3 << endl;
            for (int i = 1; i <= n; i++) {
                for (int j = i + 1; j <= n; j++) {
                    cout << i << " " << j << endl;
                }
            }
            return;
        }

        int tk, kz = -1;
        for (int k = 2; k <= n - 1; k++) {
            int cur = (k + 3 * k + 2 * (n - 1 - k)) / 2;
            if (er[cur] == 0 && er[k] == 0) {
                tk = k;
                kz = cur;
                break;
            }
        }

        if (kz != -1) {
            cout << kz << endl;
            for (int i = 1; i <= n - 1; i++) {
                int a = i, b = i + 1;
                if (b == n) b = 1;
                cout << a << " " << b << endl;
            }

            for (int i = 1; i <= tk; i++) {
                cout << i << " " << n << endl;
            }
            return;
        }

        for (int a = 2; a <= n - 1; a++) {
            for (int b = 2; b <= n - 1; b++) {
                if (a + b > n - 2) continue;
                int cur = n - 2 + a + b;
                if (er[cur] == 0 && er[a] == 0 && er[b] == 0) {

                    cout << cur << endl;
                    for (int i = 1; i <= n - 2; i++) {
                        int a = i, b = i + 1;
                        if (b == n - 1) b = 1;
                        cout << a << " " << b << endl;
                    }

                    for (int i = 1; i <= a; i++) {
                        cout << i << " " << n - 1 << endl;
                    }
                    for (int i = a + 1; i <= a + b; i++) {
                        cout << i << " " << n  << endl;
                    }
                    return;
                }
            }
        }

        throw 0;
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    gen();

    if (false) {
        solver s;
        for (int n = 3; n <= 1000; n++) {
            s.solve(n);
        }
    } else {
        int t;
        while (cin >> t) {
            solver s;
            s.solve2(t);
        }
    }
}
