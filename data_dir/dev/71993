#include <bits/stdc++.h>
using namespace std;

// f:min, g:max
// f(i):=p(i)q(i..n)+p(i..n)q(i)-p(i)q(i)
//      =p(i)(1-q(1..i)+q(i)) + (1-p(1..i)+p(i))q(i) -p(i)q(i)
//      =p(i)+q(i) -p(i)q(1..i) - p(1..i)q(i) + p(i)q(i)
// f(i+1):=p(i+1)+q(i+1) - p(i+1)q(1..i) - p(1..i)q(i+1) - p(i+1)q(i+1)

// g(i):=p(i)q(1..i)+p(1..i)q(i) - p(i)q(i)
// g(i+1)=p(i+1)q(1..i)+p(1..i)q(i+1) + p(i+1)q(i+1)

// f(1) := p(1)+q(1)-p(1)q(1)
// g(1) := p(1)q(1)

// a=q(1..i)
// b=p(1..i)
// x+y-ax-by-xy = s
// ax+by+xy     = t

double rt(double x) {
	return sqrt(max(0.0, x));
}

int main() {
	int n;
	cin >> n;

	vector<double> f(n), g(n);
	for (int i = 0; i < n; i++) scanf("%lf", &f[i]);
	for (int i = 0; i < n; i++) scanf("%lf", &g[i]);
	swap(f, g);

	vector<double> p(n), q(n);
	double d = rt(pow(f[0] + g[0], 2) - 4 * g[0]);
	p[0] = (-d + f[0] + g[0]) / 2;
	q[0] = (d + f[0] + g[0]) / 2;

	vector<double> sumP(n), sumQ(n);
	sumP[0] = p[0];
	sumQ[0] = q[0];

	for (int i = 1; i < n; i++) {
		double k = f[i] + g[i];
		double d = rt(pow(sumQ[i - 1] - sumP[i - 1] + k, 2) + 4 * (sumP[i - 1] * k - g[i]));
		p[i] = (-d + sumQ[i - 1] - sumP[i - 1] + k) / 2;
		q[i] = (d - sumQ[i - 1] + sumP[i - 1] + k) / 2;
		sumP[i] = sumP[i - 1] + p[i];
		sumQ[i] = sumQ[i - 1] + q[i];
	}

	for (int i = 0; i < n; i++) printf("%.16f ", p[i]);
	cout << endl;
	for (int i = 0; i < n; i++) printf("%.16f ", q[i]);
	cout << endl;
}