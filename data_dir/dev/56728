#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
class node
{
	public:
		ll pos;
		int val;
		bool operator <(const node &t)const
		{
			return val<t.val||(val==t.val&&pos>t.pos);
		}
		bool operator ==(const node &t)const
		{
			return t.pos==pos&&t.val==val;
		}
};
class delheap
{
	public:
		priority_queue<node> A,B;
		void push(node x)
		{
			A.push(x);
		}
		void del(node x)
		{
			B.push(x);
		}
		node top()
		{
			while(!A.empty()&&!B.empty()&&A.top()==B.top())A.pop(),B.pop();
			if(A.empty())return (node){-1,0};
			return A.top();
		}
}Q;
vector<int> v[10010];
ll h,a[100010],dis[10010];
bool inq[10010];
int n,m,k,c[100010],opt,x,y;
ll l;
int comp(int x,int y)
{
	return a[x]<a[y];
}
queue<int> q;
int main()
{
	scanf("%lld%d%d%d",&h,&n,&m,&k);
	for(int i=1;i<=n;i++)
	{
		scanf("%lld%d",&a[i],&c[i]);
		v[a[i]%k].push_back(i);
	}
	for(int i=0;i<k;i++)sort(v[i].begin(),v[i].end(),comp);
	memset(dis,0x3f,sizeof(dis));
	dis[1]=1;
	for(int i=0;i<v[1].size();i++)Q.push((node){v[1][i],c[v[1][i]]});
	v[1].clear();
	while(m--)
	{
		scanf("%d",&opt);
		if(opt==1)
		{
			scanf("%lld",&l);
			for(int i=0;i<k;i++)q.push(i),inq[i]=1;
			while(!q.empty())
			{
				int fr=q.front();q.pop();inq[fr]=0;
				int nxt=(l+fr)%k;
				if(dis[nxt]>dis[fr]+l)
				{
					dis[nxt]=dis[fr]+l;
					while(!v[nxt].empty()&&a[v[nxt].back()]>=dis[nxt])
						Q.push((node){v[nxt].back(),c[v[nxt].back()]}),v[nxt].pop_back();
					if(!inq[nxt])inq[nxt]=1,q.push(nxt);
				}
			}
		}
		else if(opt==2)
		{
			scanf("%d%d",&x,&y);
			if(a[x]>=dis[a[x]%k])Q.del((node){x,c[x]});
			c[x]-=y;
			if(a[x]>=dis[a[x]%k])Q.push((node){x,c[x]});
		}
		else
		{
			node cur=Q.top();
			printf("%d\n",cur.val);
			if(cur.pos!=-1)Q.del(cur);
		}
	}
	return 0;
}