#include <bits/stdc++.h>
using namespace std;
#define SZ(v) int((v).size())
#define ALL(vec) begin(vec), end(vec)
typedef long long i64;
template<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}
template<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}
#ifdef Rahul
# define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); \
  stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
#else
# define error(...) 42;
#endif
string to_string(char c) { return "'" + string(1, c) + "'";}
string to_string(string s) { return '"' + s + '"';}
string to_string(const char* s) { return to_string((string) s);}
template<typename A> string to_string(A);
template<typename A, typename B> string to_string(pair<A, B> p){
  return "(" + to_string(p.first) + ": " + to_string(p.second) + ")";}
template<typename A> string to_string(A v) {bool f = false; string r = "{"; 
  for (auto x: v) {if (f) r += ", "; r += to_string(x); f = true;} return r += "}";}
template<typename A> string to_string(vector<vector<A>> v) {string r; 
  for (auto x: v) r += "\n" + to_string(x); return r;}
int Nerr;
template<typename A> string to_string(A *p) {return to_string(vector<A>(p, p + Nerr));}
void err(istream_iterator<string>) { cerr << endl; }
template<typename T,typename... Args> void err(istream_iterator<string> it, T a, Args... args) {
  cerr << *it << " =: " << to_string(a) << "; "; err(++it, args...); }
template<typename T> void kek(T ans) {cout << ans << endl; exit(0);}
#define Lu(...) [&] (auto &&u) { return __VA_ARGS__; }
#define Luv(...) [&] (auto &&u, auto &&v) { return __VA_ARGS__; }
int const MOD = 1e9 + 7;
i64 const INF = 1e18 + 42;
/***********************************************************************/

void solve_case() {
  int n; cin >> n;
  vector<set<int>> p(n - 1);
  vector<int> cnt(n);
  vector<set<int>> where_orig(n);
  for (int i = 0; i < n - 1; ++i) {
    int k; cin >> k;
    while (k--) {
      int x; cin >> x, --x;
      where_orig[x].insert(i);
      p[i].insert(x);
    }
  }
  vector<int> start;
  for (int i = 0; i < n; ++i) if (SZ(where_orig[i]) == 1) {
    start.push_back(i);
  }
  vector<int> ans(n, -1);
  for (int st : start) {
    set<int> rem;
    map<int,int> cand;
    vector<set<int>> where = where_orig;
    for (int i = 0; i < n; ++i) cand[i] = n, rem.insert(i);
    cand[st] = 1;
    int ok = 1;
    for (int itr = n - 1; itr > 0; --itr) {
      int x = -1;
      vector<int> ord(n);
      iota(ALL(ord), 0);
      sort(ALL(ord), Luv(cand[u] < cand[v]));
      for (int j : ord) {
        if (cand[j] < 1) {
          ok = 0;
          break;
        }
        if (SZ(where[j]) == 1) {
          x = j;
          break;
        }
      }
      if (!ok) break;
      for (auto &[k, v] : cand) --v;
      assert (x != -1);
      ans[itr] = x;
      rem.erase(x);
      cand[x] = n + 2;
      int j = *where[x].begin();
      for (int u : p[j]) {
        where[u].erase(j);
        if (u != x) uin(cand[u], SZ(p[j]) - 1);
      }
    }
    ans[0] = *rem.begin();
    if (ok && cand[ans[0]] == 1) break;
  }
  for (int x : ans) {
    cout << 1 + x << ' ';
  }
  cout << '\n';
}
int32_t main() {
  cin.tie(nullptr) -> sync_with_stdio(false);

  int tt = 1;
  cin >> tt;
  while (tt--) {
    solve_case();
  }
}
