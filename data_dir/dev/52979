#include <bits/stdc++.h>
using namespace std;
#define finish(x) return cout << x << endl, 0
#define ll long long

const int N = 2001;

int n, m, c[N][N][2], dp[N][N][2], dpsum[N][N][2], mod = 1e9 + 7;
vector <string> a;

void modd(int &x){
    if(x < 0) x += mod;
    if(x >= mod) x -= mod;
}
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> m;
    a.resize(n);
    for(auto &i : a) cin >> i;
    if(n == 1 && m == 1) finish(1);
    for(int i = n - 1 ; i >= 0 ; i--){
        for(int j = m - 1 ; j >= 0 ; j--){
            if(i + 1 < n) c[i][j][0] = c[i + 1][j][0] + (a[i + 1][j] == 'R');
            if(j + 1 < m) c[i][j][1] = c[i][j + 1][1] + (a[i][j + 1] == 'R');
        }
    }
    dp[n - 1][m - 1][0] = dp[n - 1][m - 1][1] = 1;
    for(int i = n - 2 ; i >= 0 ; i--){
        dp[i][m - 1][0] = c[i][m - 1][0] == 0;
        dpsum[i][m - 1][0] = dp[i][m - 1][0];
    }
    for(int j = m - 2 ; j >= 0 ; j--){
        dp[n - 1][j][1] = c[n - 1][j][1] == 0;
        dpsum[n - 1][j][1] = dp[n - 1][j][1];
    }
    for(int i = n - 2 ; i >= 0 ; i--){
        for(int j = m - 2 ; j >= 0 ; j--){
            int g = n - i - 1 - c[i][j][0];
            dp[i][j][0] = dpsum[i + 1][j][1] - dpsum[i + g + 1][j][1];
            modd(dp[i][j][0]);
            dpsum[i][j][0] = dpsum[i][j + 1][0] + dp[i][j][0];
            modd(dpsum[i][j][0]);
            g = m - j - 1 - c[i][j][1];
            dp[i][j][1] = dpsum[i][j + 1][0] - dpsum[i][j + g + 1][0];
            modd(dp[i][j][1]);
            dpsum[i][j][1] = dpsum[i + 1][j][1] + dp[i][j][1];
            modd(dpsum[i][j][1]);
        }
    }
    cout << (dp[0][0][0] + dp[0][0][1]) % mod << endl;
}
