#include<bits/stdc++.h>
#define LL long long
#define LD long double
#define ull unsigned long long
#define fi first
#define se second
#define mk make_pair
#define PLL pair<LL, LL>
#define PLI pair<LL, int>
#define PII pair<int, int>
#define SZ(x) ((int)x.size())
#define ALL(x) (x).begin(), (x).end()
#define fio ios::sync_with_stdio(false); cin.tie(0);

using namespace std;

const int N = 1000 + 7;
const int inf = 0x3f3f3f3f;
const LL INF = 0x3f3f3f3f3f3f3f3f;
const int mod = 1e9 + 7;
const double eps = 1e-8;
const double PI = acos(-1);

template<class T, class S> inline void add(T& a, S b) {a += b; if(a >= mod) a -= mod;}
template<class T, class S> inline void sub(T& a, S b) {a -= b; if(a < 0) a += mod;}
template<class T, class S> inline bool chkmax(T& a, S b) {return a < b ? a = b, true : false;}
template<class T, class S> inline bool chkmin(T& a, S b) {return a > b ? a = b, true : false;}


struct Circle {
    double x, y, r;
    void read() {
        scanf("%lf%lf%lf", &x, &y, &r);
    }
    double getArea() {
        return PI * r * r;
    }
    bool operator < (const Circle &rhs) const {
        return r < rhs.r;
    }
} c[N];

int n;
vector<int> G[N];
int deg[N];
double ans;


void dfs(int u, int fa, int depth) {
    if(!fa) ans += c[u].getArea();
    else {
        if(depth & 1) ans += c[u].getArea();
        else ans -= c[u].getArea();
    }
    for(auto &v : G[u]) {
        if(v == fa) continue;
        dfs(v, u, depth + 1);
    }
}

int main() {
    scanf("%d", &n);
    for(int i = 1; i <= n; i++) c[i].read();
    sort(c + 1, c + 1 + n);
//    for(int i = 1; i <= n; i++) printf("%d: %.12f\n", i, c[i].getArea());
    for(int i = 1; i <= n; i++) {
        for(int j = i + 1; j <= n; j++) {
            if(c[i].r + sqrt((c[i].x - c[j].x) * (c[i].x - c[j].x) + (c[i].y - c[j].y) * (c[i].y - c[j].y)) - eps < c[j].r) {
                G[j].push_back(i);
                deg[i]++;
                break;
            }
        }
    }
    for(int i = 1; i <= n; i++) {
        if(!deg[i]) {
            dfs(i, 0, 0);
        }
    }
    printf("%.12f\n", ans);
    return 0;
}

/*
*/
