#include <bits/stdc++.h>

#define pb push_back
#define f first
#define s second
#define mp make_pair
#define pp pop_back
#define ll long long

using namespace std;

const int N = 1e5 + 5;

const int mod = 1e9 + 7;

const ll inf = 1e18;

int n, ok, cnt;

struct node
{
  int x1, y1, x2, y2;
  void out()
  {
    cout << "? " << x1 << " " << y1 << " " << x2 << " " << y2 << endl;
  }
} a, b;

int f(node cur)
{
  cur.out();
  fflush(stdout);
  cnt++;
  assert(cnt <= 200);
  int ans;
  cin >> ans;
  if (ok && cur.x1 <= a.x1 && a.x2 <= cur.x2 && cur.y1 <= a.y1 && a.y2 <= cur.y2) ans--;
  return ans;
}

int get_dw()
{
  int l = 1, r = n;
  int ans = -1;
  while(l <= r)
  {
    int mid = (l + r) / 2;
    node now = {mid, 1, n, n};
    if (f(now) > 0)
    {
      ans = mid;
      l = mid + 1;
    }
    else r = mid - 1;
  }
  return ans;
}

int get_up()
{
  int l = 1, r = n;
  int ans = -1;
  while(l <= r)
  {
    int mid = (l + r) / 2;
    node now = {1, 1, mid, n};
    if (f(now) > 0)
    {
      ans = mid;
      r = mid - 1;
    }
    else l = mid + 1;
  }
  return ans;
}

int get_left()
{
  int l = 1, r = n;
  int ans;
  while(l <= r)
  {
    int mid = (l + r) / 2;
    node now = {1, mid, n, n};
    if (f(now) > 0)
    {
      l = mid + 1;
      ans = mid;
    }
    else r = mid - 1;
  }
  return ans;
}

int get_right()
{
  int l = 1, r = n;
  int ans;
  while(l <= r)
  {
    int mid = (l + r) / 2;
    node now = {1, 1, n, mid};
    if (f(now) > 0)
    {
      r = mid - 1;
      ans = mid;
    }
    else l = mid + 1;
  }
  return ans;
}

int main()
{
 // ios_base::sync_with_stdio(0);
 /* #ifdef wws
    freopen("in", "r", stdin);
  #endif*/

  cin >> n;
  a.x1 = get_dw();
  node now = {a.x1, 1, n, n};
  if (f(now) == 2)
  {
    b.x1 = a.x1;
    a.y2 = get_right();
    int l = 1, r = a.y2;
    while(l <= r)
    {
      int mid = (l + r) / 2;
      node now = {a.x1, mid, n, a.y2};
      if (f(now) > 0)
      {
        a.y1 = mid;
        l = mid + 1;
      }
      else r = mid - 1;
    }
    l = a.x1, r = n;
    while(l <= r)
    {
      int mid = (l + r) / 2;
      node now = {a.x1, a.y1, mid, a.y2};
      if (f(now) > 0)
      {
        a.x2 = mid;
        r = mid - 1;
      }
      else l = mid + 1;
    }
    ok = 1;
    b.y1 = get_left();
    b.y2 = get_right();
    b.x2 = get_up();
  }
  else
  {
    int l = a.x1, r = n;
    while(l <= r)
    {
      int mid = (l + r) / 2;
      node now = {a.x1, 1, mid, n};
      if (f(now) > 0)
      {
        a.x2 = mid;
        r = mid - 1;
      }
      else l = mid + 1;
    }
    l = 1, r = n;
    while(l <= r)
    {
      int mid = (l + r) / 2;
      node now = {a.x1, 1, a.x2, mid};
      if (f(now) > 0)
      {
        a.y2 = mid;
        r = mid - 1;
      }
      else l = mid + 1;
    }
    l = 1, r = a.y2;
    while(l <= r)
    {
      int mid = (l + r) / 2;
      node now = {a.x1, mid, a.x2, a.y2};
      if (f(now) > 0)
      {
        a.y1 = mid;
        l = mid + 1;
      }
      else r = mid - 1;
    }
    ok = 1;
    b.y1 = get_left();
    b.y2 = get_right();
    b.x1 = get_dw();
    b.x2 = get_up();
  }
  cout << "! " << a.x1 << " " << a.y1 << " " << a.x2 << " " << a.y2 << " " << b.x1 << " " << b.y1 << " " << b.x2 << " " << b.y2 << endl;
  fflush(stdout);
  return 0;
}
