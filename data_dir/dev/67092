/*          (: -_-_-_- IN THE NAME OF ALLAH -_-_-_- :)          */
/*                    | S e y e d |                             */
/*                    |    3 7    |                             */
/*                   HASHEMESHOON hastam ;)                     */
/*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*//*/
#include <bits/stdc++.h>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <iomanip>
#include <cstdio>
#include <map>
#include <string>
#include <set>
#include <vector>
#include <stack>
#include <deque>
#include <queue>
#include <ctime>
#include <list>
#include <iterator>
#define ll long long
#define ss second
#define ff first
#define pb push_back
using namespace std;
ll n,m,x,y,z,ans,w,t,a[400100],segmin[400100],segtedad[400100],seggcd[400100];
void bld(ll pos,ll bb,ll ee){
    ll mid=(bb+ee)/2,l=pos*2,r=l+1;
    if(ee-bb<=1){
        segmin[pos]=seggcd[pos]=a[bb];
        segtedad[pos]=1;
        return;
    }
    bld(l,bb,mid);
    bld(r,mid,ee);
    seggcd[pos]=__gcd(seggcd[l],seggcd[r]);
    if(min(segmin[l],segmin[r])!=seggcd[pos]){
        segmin[pos]=min(segmin[l],segmin[r]);
        return;
    }
    if(segmin[r]==segmin[l] && segmin[l]==seggcd[pos]){
        segmin[pos]=segmin[r];
        segtedad[pos]=segtedad[r]+segtedad[l];
        return;
    }
    if(segmin[r]==seggcd[pos]){
        segmin[pos]=segmin[r];
        segtedad[pos]=segtedad[r];
        return;
    }
    if(segmin[l]==seggcd[pos]){
        segmin[pos]=segmin[l];
        segtedad[pos]=segtedad[l];
        return;
    }
}
pair <pair<ll,ll> ,ll> get(ll pos,ll bb,ll ee,ll bx,ll ex){
    ll mid=(bb+ee)/2,l=pos*2,r=l+1;
    if(ee-bb==ex-bx)return make_pair(make_pair(segmin[pos],seggcd[pos]),segtedad[pos]);
    if(ex<=mid)return get(l,bb,mid,bx,ex);
    if(bx>=mid)return get(r,mid,ee,bx,ex);
    pair <pair<ll,ll>,ll> p=get(l,bb,mid,bx,mid),q=get(r,mid,ee,mid,ex);
    ll gcd=__gcd(p.ff.ss,q.ff.ss);
    if(min(p.ff.ff,q.ff.ff)!=gcd)return make_pair(make_pair(min(p.ff.ff,q.ff.ff),gcd),0);
    if(p.ff.ff==q.ff.ff && p.ff.ff==gcd)return make_pair(make_pair(p.ff.ff,gcd),p.ss+q.ss);
    if(q.ff.ff==gcd)return make_pair(make_pair(q.ff.ff,gcd),q.ss);
    if(p.ff.ff==gcd)return make_pair(make_pair(p.ff.ff,gcd),p.ss);
}
int main(){
    ios::sync_with_stdio(false) , cin.tie(0) , cout.tie(0);
	cin>>n;
	for(int i=0;i<n;i++)cin>>a[i];
	bld(1,0,n);
	cin>>m;
	for(int i=0;i<m;i++){
        cin>>x>>y;x--;
        cout<<y-x-get(1,0,n,x,y).ss<<endl;
	}
	return 0;
}
