/*
ye mera template hai
apna khud likho bc :P
*/

/*
Author : Sarvagya Agarwal
*/

#include<bits/stdc++.h>
using namespace std;

//defines
#define openin freopen("input.txt","r",stdin)
#define openout freopen("output.txt","w",stdout)
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ll long long
//#define int long long
#define mod 1000000007
#define rep(i,a,n) for(__typeof(n) i=a;i<=n;++i)
#define all(c) (c).begin(),(c).end()
#define ff first
#define ss second
#define pb push_back
#define mp make_pair

//templates
template <typename T>T expo(T e, T n){T x=1,p=e;while(n){if(n&1)x=x*p;p=p*p;n>>=1;}return x;}
template <typename T>T power(T e, T n, T m){T x=1,p=e;while(n){if(n&1)x=(x*p)%m;p=(p*p)%m;n>>=1;}return x;}
template <typename T> T InverseEuler(T a, T m){return (a==1? 1 : power(a, m-2, m));}
template <typename T> T gcd(T a, T b){while(a%=b^=a^=b^=a); return b;}
template <typename T> T lcm(T a, T b){return (a*(b/gcd(a,b)));}


//debug
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
		cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
		const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

// DOBARA OVERFLOW KI GALTI HUI TO TU CHUTIYA HAI BC
// update : TU CHUTIYA HAI BC
const ll MOD = 1000000007;

// --------------------------------------------------------------------------

const int MAX = 100005;

int color[MAX], N;
ll DP[MAX][2];
vector<int> g[MAX];

void dfs(int n, int p)
{
    DP[n][1] = color[n];
    DP[n][0] = 1 - color[n];

    for(int v : g[n]) if(v != p)
    {
        ll arr[2];
        arr[0] = DP[n][0];
        arr[1] = DP[n][1];

        DP[n][0] = DP[n][1] = 0;

        dfs(v,n);

        // Child v is included

        DP[n][0] += DP[v][0] * arr[0];
        DP[n][0] %= MOD;
        DP[n][1] += DP[v][1] * arr[0];
        DP[n][1] %= MOD;
        DP[n][1] += DP[v][0] * arr[1];
        DP[n][1] %= MOD;

        // Child v is not included

        DP[n][0] += DP[v][1] * arr[0];
        DP[n][0] %= MOD;
        DP[n][1] += DP[v][1] * arr[1];
        DP[n][1] %= MOD;
    }
}

int main()
{
    //openin;
    cin >> N;

    rep(i,2,N)
    {
        int p;
        cin >> p;
        g[p+1].pb(i); g[i].pb(p+1);
    }

    rep(i,1,N) cin >> color[i];
    dfs(1,0);
    cout << DP[1][1];
}
