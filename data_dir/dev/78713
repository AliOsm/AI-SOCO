#include <iostream>
#include <vector>
using namespace std;

const int N = 200005;
int a[N], odd[N], k, Left[N], Right[N], bit[N];
vector<int> adj[N];

void add_segment(int x, int v) { do bit[x] += v; while (x -= x&-x); }
int query_point(int x) { int ret = 0; do ret += bit[x]; while ((x += x&-x) < N); return ret; }

void dfs_get_interval(int x, int p=0) {
    odd[x] = !odd[p];
    Left[x] = ++k;
    for (auto &&y : adj[x])
        if (p != y)
            dfs_get_interval(y, x);
    Right[x] = k;
}

int main() {
    int n, m, x, y, cmd;
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
    for (int i = 1; i < n; i++) {
        scanf("%d%d", &x, &y);
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
    k = 0;
    dfs_get_interval(1);
    while (m--) {
        scanf("%d", &cmd);
        if (cmd == 1) {
            scanf("%d%d", &x, &y);
            add_segment(Right[x], odd[x]? -y : y);
            add_segment(Left[x]-1, odd[x]? y : -y);
        } else {
            scanf("%d", &x);
            printf("%d\n", a[x] + query_point(Left[x]) * (odd[x]? -1 : 1));
        }
    }
    return 0;
}