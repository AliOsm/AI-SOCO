#include <bits/stdc++.h>

using namespace std;

typedef unsigned uint;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ldbl;
typedef pair<int, int> pii;
typedef pair<uint, uint> puu;
typedef pair<ll, ll> pll;
typedef pair<ull, ull> pull;
typedef pair<double, double> pdd;
typedef vector<int> vi;
typedef vector<uint> vu;
typedef vector<ll> vll;
typedef vector<ull> vull;
typedef vector<pii> vpii;
typedef vector<puu> vpuu;
typedef vector<pll> vpll;
typedef vector<pull> vpull;
typedef vector<string> vstr;
typedef vector<double> vdbl;
typedef vector<ldbl> vldbl;
#define pb push_back
#define ppb pop_back
#define pfr push_front
#define ppfr pop_front
#define emp emplace
#define empb emplace_back
#define be begin
#define rbe rbegin
#define all(x) (x).be(), (x).end()
#define rall(x) (x).rbe(), (x).rend()
#define fir first
#define sec second
#define mkp make_pair
#define brif(cond) if (cond) break
#define ctif(cond) if (cond) continue
#define retif(cond) if (cond) return
void canhazfast() {ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}
template<typename T> T gcd(T a, T b) {return b ? gcd(b, a%b) : a;}
template<typename T> T extgcd(T a, T b, T &x, T &y)
{
    T x0 = 1, y0 = 0, x1 = 0, y1 = 1;
    while (b) {
        T q = a/b; a %= b; swap(a, b);
        x0 -= q*x1; swap(x0, x1);
        y0 -= q*y1; swap(y0, y1);
    }
    x = x0; y = y0; return a;
}
int ctz(uint x) {return __builtin_ctz(x);}
int ctzll(ull x) {return __builtin_ctzll(x);}
int clz(uint x) {return __builtin_clz(x);}
int clzll(ull x) {return __builtin_clzll(x);}
int popcnt(uint x) {return __builtin_popcount(x);}
int popcntll(ull x) {return __builtin_popcountll(x);}
int bsr(uint x) {return 31^clz(x);}
int bsrll(ull x) {return 63^clzll(x);}

struct S {
    int l, r, b, t;
};

istream &operator>>(istream &is, S &s) { return cin >> s.l >> s.b >> s.r >> s.t; }

bool under(const S &x, const S &y) { return y.l <= x.l && x.r <= y.r && y.b <= x.b && x.t <= y.t; }
S xsect(const S &x, const S &y) { return {max(x.l, y.l), min(x.r, y.r), max(x.b, y.b), min(x.t, y.t)}; }
ll area(const S &s) { return (ll)max(s.r-s.l, 0)*max(s.t-s.b, 0); }

int main()
{
    canhazfast();

    S wh, bl1, bl2;

    cin >> wh >> bl1 >> bl2;
    retif(under(wh, bl1) || under(wh, bl2)) cout << "NO\n", 0;

    bl1.l = max(bl1.l, wh.l);
    bl1.r = min(bl1.r, wh.r);
    retif(bl1.l >= bl1.r) cout << "YES\n", 0;
    bl1.b = max(bl1.b, wh.b);
    bl1.t = min(bl1.t, wh.t);
    retif(bl1.b >= bl1.t) cout << "YES\n", 0;

    bl2.l = max(bl2.l, wh.l);
    bl2.r = min(bl2.r, wh.r);
    retif(bl2.l >= bl2.r) cout << "YES\n", 0;
    bl2.b = max(bl2.b, wh.b);
    bl2.t = min(bl2.t, wh.t);
    retif(bl2.b >= bl2.t) cout << "YES\n", 0;

    cout << (area(bl1)+area(bl2) < area(wh)+area(xsect(bl1, bl2)) ? "YES\n" : "NO\n");

    return 0;
}
