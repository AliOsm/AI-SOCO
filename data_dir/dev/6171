# include <bits/stdc++.h>

using namespace std;

const int N = 1e5 + 2;

int n, k, a[N], cnt[N], L, R;
long long dp[25][N], cost;

long long get(int l, int r){
      while(R < r){
            R ++;
            cost += cnt[ a[R] ];
            cnt[ a[R] ] ++;
      }
      while(L > l){
            L --;
            cost += cnt[ a[L] ];
            cnt[ a[L] ] ++;
      }
      while(R > r){
            cnt[ a[R] ] --;
            cost -= cnt[ a[R] ];
            R --;
      }
      while(L < l){
            cnt[ a[L] ] --;
            cost -= cnt[a[L]];
            L ++;
      }
}

void dv(int l, int r, int opl, int opr, int k){
      if(l > r) return ;
      int md = (l + r) >> 1, opt;
      for(int i = min(md, opr); i >= opl; i --){
            get(i, md);
            long long now = dp[k - 1][i - 1] + cost;
            if(dp[k][md] > now){
                  dp[k][md] = now;
                  opt = i;
            }
      }
      dv(l, md - 1, opl, opt, k);
      dv(md + 1, r, opt, opr, k);
}

int main(){
      cin >> n >> k;

      for(int i = 1; i <= n; i ++)
            scanf("%d", &a[i]);

      memset(dp, 0x3f3f3f3f, sizeof(dp));

      L = 1, R = n;


      for(int i = 1; i <= n; i ++){
            cost += cnt[ a[i] ];
            cnt[ a[i] ] ++;
            dp[1][i] = cost;
      }

      for(int i = 2; i <= k; i ++){
            dv(i, n, i, n, i);
      }

      cout << dp[k][n] << endl;
}
