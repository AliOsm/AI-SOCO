#include <cstdio>
#include <vector>
#include <cstring>

using namespace std;

const int N = 1'000'009;

vector<int> g[N];
int pa[N];
int d[N];

void dfs1(int x) {
  for (int y : g[x]) {
    if (y == pa[x]) {
      continue;
    }
    pa[y] = x;
    d[y] = d[x] + 1;
    dfs1(y);
  }
}

int was[N];

void dfs2(int x) {
  was[x] = 0;
  for (int y : g[x]) {
    if (y == pa[x] || was[y] != -1) {
      continue;
    }
    dfs2(y);
  }
}

const int LG = 20;

int kp[LG][N];

int get(int x) {
  for (int i = LG - 1; i >= 0; --i) {
    if (was[kp[i][x]] == -1) {
      x = kp[i][x];
    }
  }
  return x;
}

int main() {
  int n, m;
  scanf("%d %d", &n, &m);
  m = n - m;
  for (int i = 0; i < n; ++i) {
    g[i].clear();
  }
  for (int i = 0; i < n - 1; ++i) {
    int x, y;
    scanf("%d %d", &x, &y);
    x = n - x;
    y = n - y;
    g[x].push_back(y);
    g[y].push_back(x);
  }
  pa[0] = 0;
  d[0] = 0;
  dfs1(0);
  for (int i = 0; i < n; ++i) {
    kp[0][i] = pa[i];
  }
  for (int j = 1; j < LG; ++j) {
    for (int i = 0; i < n; ++i) {
      kp[j][i] = kp[j - 1][kp[j - 1][i]];
    }
  }
  memset(was, -1, sizeof was);
  for (int x = 0; x < n; ++x) {
    if (was[x] != -1) {
      continue;
    }
    int y = get(x);
    int v = d[x] - d[y] + 1;
    if (v <= m) {
      int z = x;
      while (true) {
        was[z] = 1;
        if (z == y) {
          break;
        }
        z = pa[z];
      }
      m -= v;
    } else {
      dfs2(x);
    }
  }
  for (int i = n - 1; i >= 0; --i) {
    if (was[i] == 0) {
      printf("%d ", n - i);
    }
  }
  putchar('\n');
}
