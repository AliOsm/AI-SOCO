//{{{By oToToT
#include <iostream>
#include <iomanip>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <bitset>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <random>
#include <utility>
#include <stack>
#include <sstream>
#include <functional>
#include <deque>
#include <cassert>
using namespace std;
/* include everything for Kotori~ <3 */

typedef long long lld;
typedef unsigned long long llu;
typedef long double llf;
typedef pair<int,int> PII;
typedef pair<int,lld> PIL;
typedef pair<lld,int> PLI;
typedef pair<lld,lld> PLL;
template<typename T>
using maxHeap = priority_queue<T,vector<T>,less<T>>;
template<typename T>
using minHeap = priority_queue<T,vector<T>,greater<T>>;
/* define some types for Ruby! */

#define FF first
#define SS second
#define SZ(x) (int)(x.size())
#define ALL(x) begin(x), end(x)
#define PB push_back
#define WC(x) while(x--)
/* make code shorter for Di~a~ */

template<typename Iter>
ostream& _out(ostream &s, Iter b, Iter e) {
	s<<"[";
	for ( auto it=b; it!=e; it++ ) s<<(it==b?"":" ")<<*it;
	s<<"]";
	return s;
}
template<typename A, typename B>
ostream& operator <<( ostream &s, const pair<A,B> &p ) { return s<<"("<<p.FF<<","<<p.SS<<")"; }
template<typename T>
ostream& operator <<( ostream &s, const vector<T> &c ) { return _out(s,ALL(c)); }
/* make output easier for Ainyan~n~ */

bool debug = 0;
#define DUMP(x) if(debug) cerr<<__PRETTY_FUNCTION__<<":"<<__LINE__<<" - "<<#x<<"="<<x<<'\n'
template<typename T>
void DEBUG(const T& x){if(debug) cerr<<x;}
template<typename T, typename... Args>
void DEBUG(const T& head,const Args& ...tail){
	if(debug){cerr<<head; DEBUG(tail...);}
}
/* Let's debug with Nico~Nico~Ni */
//}}}
const int N = 1000 + 5;
const int INF = 1<<30;

bool mtx[N][N], inq[N][N];
int dis[N][N];
int dx[] = {0, 0, 1, -1}, dy[] = {1, -1, 0, 0};

int main(int argc, char* argv[]){
	if(argc>1 and string(argv[1])=="-D") debug=1;
	if(!debug){ios_base::sync_with_stdio(0);cin.tie(0);}
	int n, m, k; cin>>n>>m>>k;
	for(int i=0;i<=n+1;i++) for(int j=0;j<=m+1;j++){
		mtx[i][j] = true;
	}
	for(int i=1;i<=n;i++){
		string ss; cin>>ss;
		for(int j=1;j<=m;j++){
			mtx[i][j] = (ss[j-1]=='#');
			dis[i][j] = INF;
		}
	}
	PII st, ed; cin>>st.FF>>st.SS>>ed.FF>>ed.SS;
	dis[st.FF][st.SS] = 0;
	queue<PII> bfs;
	bfs.push(st);
	inq[st.FF][st.SS] = true;
	while(!bfs.empty()){
		auto cur = bfs.front(); bfs.pop();
		int d = dis[cur.FF][cur.SS];
		for(int _=0;_<4;_++){
			auto tmp = cur;
			for(int i=1;i<=k;i++){
				tmp.FF += dx[_];
				tmp.SS += dy[_];
				if(mtx[tmp.FF][tmp.SS]) break;
				if(!inq[tmp.FF][tmp.SS]){
					inq[tmp.FF][tmp.SS] = true;
					dis[tmp.FF][tmp.SS] = d+1;
					if(tmp == ed) goto res;
					bfs.push(tmp);
				}
			}
		}
	}
	res:
	if(dis[ed.FF][ed.SS]==INF) cout << -1 << '\n';
	else cout << dis[ed.FF][ed.SS] << '\n';
	return 0;
}