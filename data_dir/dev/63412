// KALAM
# include<bits/stdc++.h>

using namespace std;

const int N = 230 + 77;
const int inf = 2000000077;
int dp[N][N];
int n , a[N] , b[N] , P[N];
vector < int > U;
bool CMP(int x , int y) { return a[x] < a[y]; }
inline int GetId(int x) { return lower_bound(U.begin() , U.end() , x) - U.begin() ; }
int main() {
   U.push_back(inf);
   U.push_back(0);
   scanf("%d" , & n);
   for(int i = 1;i <= n;++ i)
      scanf("%d %d" , a + i , b + i) , U.push_back(a[i]) , U.push_back(a[i] + b[i]) , U.push_back(a[i] - b[i]) , P[i] = i;
   sort(U.begin() , U.end());
   U.resize(unique(U.begin() , U.end()) - U.begin());
   //for(int x : U)
   //   cout << x << '\n';
   //cout << "\n\n";
   int sz = U.size();
   sort(P + 1 , P + 1 + n , CMP);
   for(int i = 1;i <= n;++ i) {
      int id = P[i];
      for(int j = 0;j < sz;++ j) {
         dp[i][j] = dp[i - 1][j];
         if(U[j] <= a[id] - b[id])
            continue ;
         if(U[j] <= a[id]) {
            dp[i][j] = max(dp[i][j] , dp[i - 1][GetId(a[id] - b[id])] + U[j] - (a[id] - b[id]));
            continue ;
         }
         dp[i][j] = max(dp[i][j] , min(b[id] , U[j] - a[id]) + dp[i - 1][GetId(a[id])]);
         dp[i][j] = max(dp[i][j] , b[id] + dp[i - 1][GetId(a[id] - b[id])]);
         //continue ;
         int le = a[id] - b[id];
         int lim = 1;
         while(a[P[lim]] < le)
            ++ lim;
         multiset < int > S;
         for(int k = lim;k < i;++ k)
            S.insert(a[P[k]] - b[P[k]]);
         S.insert(a[id] - b[id]);
         dp[i][j] = max(dp[i][j] , a[id] - * S.begin() + dp[lim - 1][GetId(* S.begin())]);
         if(S.size() == 1)
            continue ;
         for(int k = lim;k < i;++ k) {
            S.erase(S.find(a[P[k]] - b[P[k]]));
            dp[i][j] = max(dp[i][j] , min(max(a[id] , a[P[k]] + b[P[k]]) , U[j]) - (* S.begin()) + dp[lim - 1][GetId(* S.begin())]);
            S.insert(a[P[k]] - b[P[k]]);
         }
      }
   }
   printf("%d\n" , dp[n][sz - 1]);
   return 0;
}
