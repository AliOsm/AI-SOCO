#include<bits/stdc++.h>
using namespace std;

struct Edge {
    int u, v;
    int other(int x) {return u^v^x;}
};

struct Eulerpath {
    int n;
    vector<Edge> edges;
    vector<bool> vis;
    vector<vector<int>> adj;

    Eulerpath(int nn) : n(nn), adj(nn) {}
    void addEdge(int u, int v) {
        edges.push_back({u, v});
        int id = edges.size()-1;
        adj[u].push_back(id);
        adj[v].push_back(id);
    }
    bool getTour(vector<int> &path) {
        vis.assign(edges.size(), 0);
        int u = 0, cnt = 0;
        for (int i = 0; i < n; i++) if(adj[i].size() & 1) u = i, ++cnt;
        if (cnt != 0 && cnt != 2) return false;
        stack<int> stk;
        path.clear();
        while(true) {
            while(adj[u].size() && vis[adj[u].back()]) adj[u].pop_back();
            if(adj[u].empty()) {
                path.push_back(u);
                if(stk.empty()) break;
                u = stk.top();
                stk.pop();
            }
            else {
                stk.push(u);
                int id = adj[u].back();
                vis[id] = 1;
                u = edges[id].other(u);
            }
        }
        for(int i = 0; i < edges.size(); i++) if(!vis[i]) return false;
        return true;
    }
};

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int n;
    cin >> n;
    vector<int> b(n-1), c(n-1);
    int cnt = 0;
    map<int,int> M;
    vector<int> rM;
    for(int i = 0; i+1 < n; i++) {
        cin >> b[i];
        if(M.find(b[i]) == M.end()) {
            M[b[i]] = cnt++;
            rM.push_back(b[i]);
        }
        b[i] = M[b[i]];
    }
    for(int i = 0; i+1 < n; i++) {
        cin >> c[i];
        if(M.find(c[i]) == M.end()) {
            M[c[i]] = cnt++;
            rM.push_back(c[i]);
        }
        c[i] = M[c[i]];
    }
    for(int i = 0; i+1 < n; i++) {
        if(rM[b[i]] > rM[c[i]]) {
            cout << -1 << endl;
            return 0;
        }
    }
    Eulerpath E(cnt);
    for(int i = 0; i+1 < n; i++) {
        E.addEdge(b[i], c[i]);
    }
    vector<int> path;
    bool f = E.getTour(path);
    if(!f) cout << -1 << endl;
    else {
        for(int x : path) cout << rM[x] << " ";
    }
}
