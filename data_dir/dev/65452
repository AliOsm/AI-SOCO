// Bismillahirrahmanir Rahim
#include<bits/stdc++.h>
#define nl printf("\n")
#define sp printf(" ")
#define rep(i,a,b) for(i=a;i<=b;i++)
#define rev(i,a,b) for(i=a;i>=b;i--)
#define fil freopen("input.txt","r",stdin)
#define pf printf
#define sf scanf
using namespace std;

typedef long long l;
typedef unsigned long long ul;

//// Ordered set> Finding nth position element in a set in logn complexity
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template<typename T> using orderset = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
////*X.find_by_order(1)
////X.order_of_key(-5)

#define pi acos(-1.0)
#define mp make_pair
#define pb push_back
#define p_q priority_queue

int inline in(){int x;sf("%d",&x);return x;}
l inline lin(){l x;sf("%lld",&x);return x;}
void P(l x){pf("%lld",x);}
void Pi(int x){pf("%d",x);}

#define C(i) pf("Case %lld: ",i)
#define Ci(i) pf("Case %d: ",i)

#define Inf 0x7f7f7f
#define mod 1000000007

#define ms(a,b) memset(a,b,sizeof(a))
#define DBG pf("I am here\n")

#define dis( a ,b ) abs( a - b )
#define dis2d( x1 ,y1 ,x2 ,y2 )    sqrt( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) )
#define dis3d( x1 ,y1 ,z1 ,x2 ,y2 ,z2 )    sqrt( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) + ( z1 - z2 ) * ( z1 - z2 ) )

#define valid(nx,ny,r,c) nx>=1&&nx<=r && ny>=1&&ny<=c

#define ck_bt( v , p ) ( ( v >> p ) & 1 )

char tochar( int x ){return x + '0' ;}
int toint( char x ){return x - '0' ;}

l fx[]= {0,0,-1,1,-1,-1,1,1};
l fy[]= {-1,1,0,0,-1,1,-1,1};

l dx[]= {0,0,-1,1};
l dy[]= {-1,1,0,0};

l n , m ;

char s[100010] ;

l ncr[1010][10] ;

l NCR( l n, l r )
{
    if( n == r || r == 0 )
        return ncr[n][r] = 1 ;
    if( r == 1 )
        return ncr[n][r] = n ;
    if( ncr[n][r] != -1 ) return ncr[n][r] ;
    return ncr[n][r] = NCR( n - 1, r ) + NCR( n - 1, r - 1 ) ;
}

l dar[1010] ;

l DAR( l n )
{
    if( n == 0 )
        return 1 ;
    if( dar[n] != -1 ) return dar[n] ;
    return n * DAR( n - 1 ) + ( n % 2 ? -1 : 1 )  ;
}

l a[100010] ;
l b[100010] ;
l L[100010] ;

map<l , bool>ma ;

l F( l val )
{
    l left = 1 , right = n , res , mid ;
    while( left <= right )
    {
        mid = left + ( right - left ) / 2 ;
        if( b[mid] < val )
        {
            left = mid + 1 ;
        }
        else if( b[mid] == val )
        {
            res = mid ;
            right = mid - 1 ;
        }
        else
        {
            right = mid - 1 ;
        }
    }
    return res ;
}

l F1( l val )
{
    l left = 1 , right = n , res , mid ;
    while( left <= right )
    {
        mid = left + ( right - left ) / 2 ;
        if( b[mid] <= val )
        {
            res = mid ;
            left = mid + 1 ;
        }
        else
        {
            right = mid - 1 ;
        }
    }
    return res ;
}

int main()
{

    l i , j , k ;

    n = lin() ;
    l x = lin() ;
    k = lin() ;

    rep( i , 1 , n )
    {
        a[i] = lin() ;
    }

    sort( a + 1 , a + 1 + n ) ;
    l left = 1 ;
    rep( i , 1 , n )
    {
        if( a[i] != a[i-1] )
        {
            left = i ;
        }
        L[i] = left ;
    }

    rep( i , 1 , n )
    {
        b[i] = a[i] / x ;
        ma[b[i]] = 1 ;
    }
//
//    rep( i , 1 , n )
//    {
//        P( b[i] ) ; sp ;
//    }
//    nl ;

    l res = 0 , lagbe ;

    rep( i , 1 , n )
    {
        if( a[i] % x == 0 )
        {
            lagbe = b[i] + k - 1 ;
        }
        else
        {
            lagbe = b[i] + k ;
        }

        //P( lagbe ) ; nl ;

        if( ma[lagbe] )
        {
            l x1 = F( lagbe ) ;
            l x2 = F1( lagbe ) ;
            //P(lagbe) ; sp ;P( x2 ) ; sp ; P( x1 ) ; nl ;
            x1 = max( L[i] , x1 ) ;
            res += ( x2 - x1 + 1 ) ;
        }


    }

    P( res ) ;

    return 0;
}

/*
3 2 1
1 2 3
*/
