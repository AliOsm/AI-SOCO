#include <bits/stdc++.h>
#include<ctime>
#define time  ios_base::sync_with_stdio(false);cin.tie(NULL);
#define mm(o,k) memset(o,k,sizeof o)
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
const int oo=0x3f3f3f3f ;
//ll mod=1e9+7;
//bool composite[(int)1e7+1];
//bool isprime(ll value){int cnt=0;for (ll i=1; i*i<=value; i++){if (value%i==0){cnt++;if (i*i!=value){cnt++;}}}if (cnt==2){return true;}else{return false;}}
ll fastpower(ll b,ll p){ll ans=1;while(p){if (p%2){ans=(ans*b);}b=(b*b);p/=2;}return ans;}
string  makeitstring(ll n){string ans;while (n){ll mod=n%10;mod+=48;char m=mod;ans=m+ans;n/=10;}return ans;}
ll makeitnumber(string s){ll ans=0;for (ll i=0; i<s.size(); i++){ll num=s[i]-'0';ans+=(num*fastpower(10,(ll)s.size()-i-1));}return ans;}
//void sieve(){composite[0]=composite[1]=true;
//for (int i=2; i*i<=1e7; i++){for (int j=i*i; j<=1e7; j+=i){composite[j]=true;}}}
// gold bach (using induction)theory any number can be expressed as the sum of two prime numbers
// if num>2
//bool valid(int x,int y,int n,int m){if (x>=0&&x<n&&y>=0&&y<m){return true;}else {return false;}}
//ll binarysearch(ll value,vector<ll>findit){ll low=0;ll high=findit.size()-1;while(low<=high){ll mid=low+high;mid/=2;if (findit[mid]<=value){low=mid+1;}else{high=mid-1;}}return high;}
//ll ny[13]={0,31,28,31,30,31,30,31,31,30,31,30,31};
//ll ly[13]={0,31,29,31,30,31,30,31,31,30,31,30,31};
bool valid(int x,int y,int n,int m){return (x>=0&&y<m&&x<n&&y>=0);}
//ll ncr(ll n,ll r){ll ans=1;r=min(r,n-r);for (int i=1;i<=r;i++){ans*=(n-r+i);ans/=i;}return ans;}
//bool checksqrt(double f){return (sqrt(f)*sqrt(f)==f);}
//ll distance(ll x,ll y,ll x2,ll y2){ll dis=0;dis+=((x-x2)*(x-x2));dis+=((y-y2)*(y-y2));return dis;}
//ll lcm(ll a,ll b){return (a/__gcd(a,b))*b;}
//struct element{ll l,r,index;};
//bool cmp(element a,element b){if (a.l==b.l){return a.r>b.r;}else {return a.l<b.l ;}}
//bool isPowerOfTwo(int x){return (x && !(x & (x - 1)));}

double eps =1e-9;
void comparing_doubles(double f,double s)
{
  if (f-s>eps){cout<<">"<<endl;}
  else if (f-s<-eps){cout<<"<"<<endl;}
  else {cout<<"=";}
}
struct cont
{
ll sum;
ll pos1;
ll pos2;

};

bool cmp(cont f,cont s)
{
    return f.sum < s.sum;

}
using namespace std;
int main()
{

    time;
    int k;
    vector<cont>ans;
    cin>>k;
    for (int f=0;f<k;f++)
    {
      int n;
      cin>>n;
      ll sum=0;
      vector<ll>m;
      for (int i=0;i<n;i++)
      {
          ll x;
          cin>>x;
          m.push_back(x);
          sum+=x;
      }
      for (int j=0;j<n;j++)
      {
          ans.push_back({sum-m[j],f+1,j+1});

      }
    }
    sort(ans.begin(),ans.end(),cmp);
    for (int i=1;i<ans.size();i++)
    {
        if (ans[i].sum==ans[i-1].sum&&ans[i].pos1!=ans[i-1].pos1)
        {
            cout<<"YES"<<endl;

            cout<<ans[i].pos1<<" "<<ans[i].pos2<<endl;
            cout<<ans[i-1].pos1<<" "<<ans[i-1].pos2<<endl;
            return 0;
        }
    }
    cout<<"NO";
    return 0;
}
