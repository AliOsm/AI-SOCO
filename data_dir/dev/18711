#include<bits/stdc++.h>
using namespace std;
const int MX = (1<<20);
typedef long long ll;
int cost[5009][5009];
int dp[5009] , last[5009];
int n;
int is[5009] , arr[5009] , frst[5009];
int calc(int x){
    if(x == n + 1) return 0;
    int &ret = dp[x]; if(ret != -1) return ret;
    ret = calc(x + 1);
    if(x != frst[arr[x]]) return ret;
    int nak7 = last[arr[x]] , cur = x;
    while(1){
        bool ok = 1;
        while(cur <= nak7){
            nak7 = max(nak7 , last[arr[cur]]);
            if(frst[arr[cur]] < x) ok = 0;
            ++cur;
        }
        if(ok == 0) break;
        ret = max(ret , calc(nak7 + 1) + cost[x][nak7]);
        if(cur == n + 1) break;
        nak7 = max(nak7 , last[arr[cur]]);
    }
    return ret;
}
int main(){
    scanf("%d",&n);
    for(int j = 1 ; j <= n ; j++) scanf("%d",&arr[j]);
    for(int j = 1 ; j <= n ; j++) last[arr[j]] = j;
    for(int j = n ; j ; j--) frst[arr[j]] = j;
    for(int j = 1 ; j <= n ; j++){
        memset(is , 0 , sizeof(is));
        int cur = 0;
        for(int i = j ; i <= n ; i++){
            if(is[arr[i]] == 0){
                cur ^= arr[i];
                is[arr[i]] = 1;
            }
            cost[j][i] = cur;
        }
    }
    memset(dp , -1 , sizeof(dp));
    cout<<calc(1)<<endl;
//    for(int j = 1 ; j <= n ; j++) cout<<calc(j)<<endl;
   // find_sol(1);
    //for(auto pp : sol) cout<<pp<<endl;
}
