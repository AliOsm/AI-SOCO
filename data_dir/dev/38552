//                             In The Name Of Allah
#include <bits/stdc++.h>
#define mx second
#define mn first
#define use_fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define ret(n) return cout << n, 0
#define se(n) cout << setprecision(n) << fixed
#define pb push_back
#define int long long
using namespace std; 
 
const long long N = 2e5 + 1000, T = 110, OO = 1e14, M = 1e9 + 7, M2 = 998244353, sq = 350, lg = 70;
typedef pair <int, int> pii;

//******************************************matrix.begin()****************************************************
//************************************************************************************************************
 
struct matrix {
	int a[T][T], n, m;
	matrix (){
		
	}
	matrix (int n, int m) {
		this->n = n;
		this->m = m;
		for(int i = 0; i < n; i++)
			for(int j = 0; j < m; j++)
				a[i][j] = 0;
	}
	void identity() {
		for(int i = 0; i < n; i++)
			for(int j = 0; j < m; j++)
				a[i][j] = 0;
		for(int i = 0; i < n; i++)
			a[i][i] = 1;
	}
	int* operator[](int x) {
		return a[x];
	}
	matrix operator*(matrix b) {
		matrix c(n, b.m);
		for(int k = 0; k < m; k++)
			for(int i = 0; i < n; i++) 
				for(int j = 0; j < b.m; j++) 
					c[i][j] = (c[i][j] + (a[i][k] * b[k][j])) % M;
		return c;	
	}
	matrix operator^(int k) {
		matrix a = *this;
		matrix t(n, m);
		t.identity();
		while(k) {
			if(k & 1)
				t = t * a;
			k >>= 1;
			a = a * a;
		}
		return t;
	}
};
 
matrix operator+(matrix &b, matrix &c) {
	matrix t(b.n, b.m);
	for(int i = 0; i < b.n; i++) 
		for(int j = 0; j < b.m; j++) 
			t[i][j] = (b[i][j] + c[i][j]) % M;
	return t;
}
 
//************************************************************************************************************
//******************************************matrix.end()******************************************************
int a[N];

int32_t main() {
	use_fast;
	int n, k;
	cin >> n >> k;
	int mx = 15;
	matrix dp(mx + 1, mx + 1), base(mx + 1, 1);
	base[0][0] = 1;
	for(int i = 0; i < n; i++) {
		int a, b, c;
		cin >> a >> b >> c;
		for(int i = 0; i <= mx; i++) {
			for(int j = 0; j <= mx; j++) {
				if(i > c || j > c || abs(i - j) > 1)
					dp[i][j] = 0;
				else 
					dp[i][j] = 1;
			}
		}
		b = min(b, k);
		int t = b - a;
		if(t <= 0)
			continue;
		dp = dp ^ t;
		base = dp * base;
	}
	cout << base[0][0] << endl;
	return 0;
}
/*
be carefull :
1- if not solve after 20 min, read again twice
2- after submit read the code again
3- fun with contest
4- ...
*/
