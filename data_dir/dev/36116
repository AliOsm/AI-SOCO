#include <iostream>
#include <iomanip>
#include <algorithm>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <stack>
#include <queue>
#include <ctime>
#include <cassert>
#include <complex>
#include <string>
#include <cstring>
#include <chrono>
#include <random>
#include <bitset>
using namespace std;
#define int long long
#define endl '\n'
typedef long long ll;


struct fenwickTree {
    vector<ll> bit;
    int n;
    fenwickTree() {
        n = (int)2e5+3;
        bit.assign(n,0);
    }
    ll sum(int r) {
        ll ret = 0;
        for(; r >= 0; r = (r&(r+1))-1)
            ret += bit[r];
        return ret;
    }
    void add(int idx, ll d) {
        for(; idx < n; idx = idx | (idx+1))
            bit[idx] += d;
    }
    ll sum(int l, int r) {
        return sum(r) - sum(l-1);
    }
}ft, ftCount;

signed main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin >> n;
    vector<pair<int,int>> arr(n);
    for(int i = 0; i < n; ++i) {
        cin >> arr[i].first;
    }
    vector<int> speeds(n);
    for(int i = 0; i < n; ++i) {
        cin >> arr[i].second;
        speeds[i] = arr[i].second;
    }
    sort(arr.begin(), arr.end());
    sort(speeds.begin(), speeds.end());
    speeds.erase(unique(speeds.begin(), speeds.end()), speeds.end());

    int res = 0;

    for(int i = 0; i < n; ++i) {
        const int pos = arr[i].first;
        const int speed = (lower_bound(speeds.begin(), speeds.end(), arr[i].second) - speeds.begin());

        res += ft.sum(speed) + ftCount.sum(speed) * pos;

        ft.add(speed,-pos);
        ftCount.add(speed,1);

    }

    cout << res;
}
