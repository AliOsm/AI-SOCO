#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>
#include <bitset>
 
using namespace std;
 
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define forn1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)((a).size())
#define mp make_pair
#define pb push_back
#define X first
#define Y second
#define x first
#define y second
#define y1 __y1
#define sqr(x) ((x) * (x))
 
typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
 
const int INF = (int)(1e9);
const li INF64 = (li)(INF) * (li)(INF);
const ld eps = 3e-8;
const ld pi = ld(3.1415926535897932384626433832795);
 
inline bool in(int i, int j, int n, int m)
{
    return i >= 1 && i <= n && j >= 1 && j <= m;
}
 
inline int myrand()
{
    return (rand() ^ (rand() << 15));
}
 
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};
 
const int N = 111, M = 2222;

//#define li int

int n;
string s[N];
li pref[N][M];
int l[N], r[N];

inline bool read()
{
    if(!(cin >> s[1]))
        return false;

    assert(cin >> n);
    n++;

    for(int i = 2; i <= n; i++)
    {
        assert(cin >> s[i] >> l[i] >> r[i]);
    }

    return true;
}

const li base = 257;
li pows[M];

inline li getHash(int idx, int lf, int rg)
{
    li h = pref[idx][rg];
    if(lf > 0)
        h -= pref[idx][lf - 1];
    return h * pows[M - 1 - rg];
}

inline bool inside(int lf, int rg, int x)
{
    return lf <= x && x <= rg;
}

#include <unordered_set>
#include <unordered_map>

inline void solve()
{
    pows[0] = 1LL;
    for(int i = 1; i < M; i++)
    {
        pows[i] = pows[i - 1] * base;
    }

    forn1(i, n)
    {
        li h = 0;
        forn(j, sz(s[i]))
        {
            h += s[i][j] * pows[j];
            pref[i][j] = h;
        }
    }

    int ans = 0;

    for(int len = 1; len <= sz(s[1]); len++)
    {
        unordered_map<li, int> cnt[12];

        for(int i = 2; i <= n; i++)
        {
            for(int j = 0; j + len - 1 < sz(s[i]); j++)
            {
                int lf = j, rg = j + len - 1;
                li h = getHash(i, lf, rg);
                cnt[i][h]++;
            }
        }

        unordered_set<li> used;

        for(int i = 0; i + len - 1 < sz(s[1]); i++)
        {
            int lf = i, rg = i + len - 1;
            li h = getHash(1, lf, rg);
            if(used.count(h))
                continue;
            used.insert(h);
            bool ok = true;

            for(int ii = 2; ii <= n; ii++)
            {
                if(cnt[ii].count(h) == 0)
                {
                    if(l[ii] > 0)
                    {
                        ok = false;
                        break;
                    }
                    else
                    {
                        continue;
                    }
                }

                if(!inside(l[ii], r[ii], cnt[ii][h]))
                {
                    ok = false;
                    break;
                }
            }

            if(ok)
                ans++;
        }
    }

    cout << ans << endl;
    return;
}

int main() {
#ifdef _DEBUG
    assert(freopen("input.txt", "rt", stdin));
    assert(freopen("output.txt", "wt", stdout));
#endif

    cout << setprecision(10) << fixed;
    cerr << setprecision(10) << fixed;

    srand(int(time(NULL)));

    assert(read());
    solve();

#ifdef _DEBUG
    cerr << "TIME == " << clock() << " ms" << endl;
#endif
    return 0;
}