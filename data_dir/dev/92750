#include <bits/stdc++.h>
#define fi first
#define se second
#define pb push_back
#define eb emplace_back
#define mp make_pair
#define mt make_tuple

using namespace std;

typedef pair<int, int> ii;
typedef long long ll;

const int N = 100010, oo = 0x3f3f3f3f;

int n, s, l;
int a[N];
int r[N];

int tree[4*N];

int query(int start, int end, int qstart, int qend, int pos)
{
	if (qend == n)
		return 0;
	
	if (qstart > end or qend < start)
		return oo;
	
	if (start >= qstart and end <= qend)
		return tree[pos];

	int mid = (start+end)/2;
	int le = query(start, mid, qstart, qend, 2*pos + 1);
	int ri = query(mid+1, end, qstart, qend, 2*pos + 2);
	return min(le, ri);
}

int update(int start, int end, int upos, int val, int pos)
{
	if (upos < start or upos > end)
		return tree[pos];
	
	if (start == end)
		return tree[pos] = val;
	
	int mid = (start+end)/2;
	int le = update(start, mid, upos, val, 2*pos + 1);
	int ri = update(mid+1, end, upos, val, 2*pos + 2);
	return tree[pos] = min(le, ri);
}

int main()
{
	scanf("%d %d %d", &n, &s, &l);
	for (int i = 0; i < n; i++)
		scanf("%d", a+i);

	int j = 0;
	multiset<int> st;
	for (int i = 0; i < n; i++)
	{
		if (i) st.erase(st.find(a[i-1]));
		while (j < n)
		{
			st.insert(a[j]);
			if (*st.rbegin() - *st.begin() > s)
			{
				st.erase(st.find(a[j]));
				break;
			}
			j++;
		}
		r[i] = j-1;
	}
	
	int cur = oo;
	for (int i = n-1; i >= 0; i--)
	{
		cur = oo;
		if (i + l - 1 <= r[i])
			cur = 1 + query(0, n-1, i+l, r[i]+1, 0);
		update(0, n-1, i, cur, 0);
	}
	
	if (cur >= oo)
		cur = -1;
	printf("%d\n", cur);
	
	return 0;
}

