/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-05 15:10:57
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 1e9;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , q , mark[MAXN] , par[MAXN] , H[MAXN] , R[MAXN] , ps[MAXN];
vector<ll> adj[MAXN];

void calc(ll v , ll u){
    //cout << v << sep << u << sep;
    ll mn = INF , mx = -INF;
    while(v != par[u]){
        mn = min(mn , v);
        mx = max(mx , v);
        v = par[v];
    }
    //cout << mn << sep << mx << endl;
    R[mn] = mx - 1;
}

void DFS(ll v , ll p = 0){
    //cout << v << sep << p << endl;
    H[v] = H[p] + 1;
    mark[v] = 1;
    par[v] = p;
    for(ll u : adj[v]){
        if(!mark[u])    DFS(u , v);
        else if(H[v] > H[u] && u != p){
            calc(v , u);
        }
    }
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    fill(R , R + MAXN , INF);

    cin >> n >> m;
    for(ll i = 0 ; i < m ; i++){
        ll v , u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }
    for(ll i = 1 ; i <= n ; i++)    if(!mark[i])    DFS(i);
    for(ll i = n ; i >= 1 ; i--)    R[i] = min(R[i] , R[i + 1]);
    partial_sum(R , R + MAXN , ps);
    //for(ll i = 1 ; i <= n ; i++)    cout << R[i] << sep;
    //cout << endl;

    cin >> q;
    while(q--){
        ll l , r;
        cin >> l >> r;
        ll ind = lower_bound(R + l , R + r + 1 , r) - R;
        cout << (r - ind + 1) * r + ps[ind - 1] - ps[l - 1] - r * (r + 1) / 2 + l * (l - 1) / 2 + r - l + 1 << endl;
    }

    return 0;
}
/*

*/
