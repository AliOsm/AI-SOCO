//#include<iostream>
//#include<cstring>
#include<bits/stdc++.h>
using namespace std;
long long MOD = 1000000007ll;

inline void print(char pt) {
	printf("%c\n", pt);
}
inline void print(int pt) {
	printf("%d\n", pt);
}
inline void print(long long pt) {
	printf("%I64d\n", pt);
}
inline void print(double pt) {
	printf("%f\n", pt);
}
inline void print(char pt[]) {
	printf("%s\n", pt);
}

inline void scan(int &pt) {
	scanf("%d", &pt);
}
inline void scan(char &pt) {
	scanf("%c", &pt);
}
inline void scan(long long &pt) {
	scanf("%I64d", &pt);
}
inline void scan(double &pt) {
	scanf("%lf", &pt);
}
inline void scan(char pt[]) {
	scanf("%s", pt);
}
struct pii {
	int a;
	int b;
	friend int operator<(pii a, pii b) {
		if (abs(a.a - a.b) != abs(b.a - b.b))
			return abs(a.a - a.b) > abs(b.a - b.b);
		return a.a < b.a;
	}
};

struct str {
	char val[200];
	str() {
		memset(val, 0, sizeof(val));
	}
	friend int operator<(str a, str b) {
		return strcmp(a.val, b.val) < 0;
	}
};

//int gcd(int x, int y) {
//	return y ? gcd(y, x % y) : x;
//}
//int lcm(int x, int y) {
//	return x * (y / gcd(x, y));
//}
long long gcd(long long x, long long y) {
	return y ? gcd(y, x % y) : x;
}
long long lcm(long long x, long long y) {
	return x * (y / gcd(x, y));
}

int bits[50];
void getbits() {
	for (int i = 0; i < 30; i++) {
		bits[i] = 1 << i;
	}
}

struct piii {
	int li;
	int ri;

	int l1;
	int l2;
	int r1;
	int r2;

	friend int operator<(piii a, piii b) {
		return a.li < b.li;
	}
};

long long Q_pow(long long x, long long y) {
	long long res = 1;
	while (y) {
		if (y % 2 == 1) {
			res *= x;
			res %= MOD;
		}
		x = x * x;
		x %= MOD;
//		if(x<=1e-5){
//			return 0;
//		}
		y /= 2;
	}
	return res;
}

//返回d=gcd(a,b);和对应于等式ax+by=d中的x,y
long long extend_gcd(long long a, long long b, long long &x, long long &y) {
	if (a == 0 && b == 0)
		return -1; //无最大公约数
	if (b == 0) {
		x = 1;
		y = 0;
		return a;
	}
	long long d = extend_gcd(b, a % b, y, x);
	y -= a / b * x;
	return d;
}
//*********求逆元素*******************
//ax = 1(mod n)
long long mod_reverse(long long a, long long MOD) {
	long long x, y;
	long long d = extend_gcd(a, MOD, x, y);
	if (d == 1)
		return (x % MOD + MOD) % MOD;
	else
		return -1;
}

char stra[100005];
int n, m, k;
int tmp;
deque<int> deqa;

int main() {
	int r1, r2, c1, c2, d1, d2;
	scan(r1);
	scan(r2);
	scan(c1);
	scan(c2);
	scan(d1);
	scan(d2);

	int a = (d1 + r1 - c2) / 2;

	int b = r1 - a;
	int c = c1 - a;
	int d = d1 - a;

	if (c + d == r2 && b + d == c2 && b + c == d2 && a != b && a != c && a != d
			&& b != c && b != d && c != d&&a>=1&&a<=9&&b>=1&&b<=9&&c>=1&&c<=9&&d>=1&&d<=9) {
		print(a);
		print(b);
		print(c);
		print(d);
	} else {
		print(-1);
	}

	return 0;
}
