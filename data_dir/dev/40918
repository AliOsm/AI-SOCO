#include <bits/stdc++.h>

using namespace std;

typedef unsigned uint;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ldbl;
typedef pair<int, int> pii;
typedef pair<uint, uint> puu;
typedef pair<ll, ll> pll;
typedef pair<ull, ull> pull;
typedef pair<double, double> pdd;
typedef vector<int> vi;
typedef vector<uint> vu;
typedef vector<ll> vll;
typedef vector<ull> vull;
typedef vector<pii> vpii;
typedef vector<puu> vpuu;
typedef vector<pll> vpll;
typedef vector<pull> vpull;
typedef vector<string> vstr;
typedef vector<double> vdbl;
typedef vector<ldbl> vldbl;
#define pb push_back
#define ppb pop_back
#define pfr push_front
#define ppfr pop_front
#define emp emplace
#define empb emplace_back
#define be begin
#define rbe rbegin
#define all(x) (x).be(), (x).end()
#define rall(x) (x).rbe(), (x).rend()
#define fir first
#define sec second
#define mkp make_pair
#define brif(cond) if (cond) break
#define ctif(cond) if (cond) continue
#define retif(cond) if (cond) return
void canhazfast() {ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}
template<typename T> T gcd(T a, T b) {return b ? gcd(b, a%b) : a;}
template<typename T> T extgcd(T a, T b, T &x, T &y)
{
    T x0 = 1, y0 = 0, x1 = 0, y1 = 1;
    while (b) {
        T q = a/b; a %= b; swap(a, b);
        x0 -= q*x1; swap(x0, x1);
        y0 -= q*y1; swap(y0, y1);
    }
    x = x0; y = y0; return a;
}
int ctz(uint x) {return __builtin_ctz(x);}
int ctzll(ull x) {return __builtin_ctzll(x);}
int clz(uint x) {return __builtin_clz(x);}
int clzll(ull x) {return __builtin_clzll(x);}
int popcnt(uint x) {return __builtin_popcount(x);}
int popcntll(ull x) {return __builtin_popcountll(x);}
int bsr(uint x) {return 31^clz(x);}
int bsrll(ull x) {return 63^clzll(x);}

#define N 64
#define INF 1000000000000000000ULL

pull nodes[N];
ull d[N];
//ull dp[N][N][N];

ull dist(const pull &a, const pull &b)
{
    return max(a.fir, b.fir)-min(a.fir, b.fir)+max(a.sec, b.sec)-min(a.sec, b.sec);
}

pull nxt_node(const pull &u, int ax, int ay, ull bx, ull by)
{
    return {ax*u.fir+bx, ay*u.sec+by};
}

bool check(int l, int r, int i, ull t, pull s)
{
    ull res = dist(s, nodes[i]);
    retif(res > t) false;
    res += dist(nodes[l], nodes[r]);
    retif(res > t) false;
    res += min(dist(nodes[i], nodes[l]), dist(nodes[i], nodes[r]));
    return res <= t;

    return false;
}

int main()
{
    canhazfast();

    pull p0, ps;
    ull bx, by, t;
    int ax, ay;
    int n = 0, ans = 0;

    cin >> p0.fir >> p0.sec >> ax >> ay >> bx >> by >> ps.fir >> ps.sec >> t;
    nodes[0] = p0;
    d[0] = dist(p0, ps);
    n = 1;
    for (;;) {
        nodes[n] = nxt_node(nodes[n-1], ax, ay, bx, by);
        d[n] = dist(nodes[n], ps);
        brif(max(nodes[n].fir, nodes[n].sec) > (ull)1e17);
        ++n;
    }
    for (int l = 0; l < n; ++l) {
        for (int r = l; r < n; ++r) {
            for (int i = l; i <= r; ++i) {
                if (check(l, r, i, t, ps)) {
                    ans = max(ans, r-l+1);
                    break;
                }
            }
        }
    }
    /*for (int sz = 2; sz <= n; ++sz) {
        for (int l = 0; l <= n-sz; ++l) {
            int r = l+sz-1;
            dp[l][r][l] = dp[l+1][r][l+1]+dist(nodes[l], nodes[l+1]);
            dp[l][r][r] = dp[l][r-1][r-1]+dist(nodes[r], nodes[r-1]);
            for (int i = l+1; i < r; ++i) {

            }
        }
    }*/
    cout << ans << '\n';

    return 0;
}
