#include "assert.h"
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

int main() {
	srand (time(NULL));
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(int, n);
	next(int, m);
	
	auto f = readVector<string>(n);
	
	vector<pair<int, int>> q;
	vector<vector<int>> neighs(n, vector<int>(m));
	
	FOR (y, 0, n) FOR (x, 0, m) if (f[y][x] == '.') {
		if (y + 1 < n && f[y + 1][x] == '.') { neighs[y][x]++ ; neighs[y + 1][x]++; }
		if (x + 1 < m && f[y][x + 1] == '.') { neighs[y][x]++ ; neighs[y][x + 1]++; }
	}
	
	FOR (y, 0, n) FOR (x, 0, m) if (f[y][x] == '.') {
		if (neighs[y][x] == 0) {
			cout << "Not unique";
			return 0;
		} else if (neighs[y][x] == 1) {
			q.push_back( { y , x } );
		}
	}
	
	FOR (i, 0, q.size()) {
		auto p = q[i];
		int y = p.first;
		int x = p.second;
		if (f[y][x] != '.') continue;
		int x2 = -10, y2;
		FOR (dy, -1, 2) FOR (dx, -1, 2) if (dx == 0 || dy == 0) if (dx != 0 || dy != 0) if (x + dx >= 0 && x + dx < m && y + dy >= 0 && y + dy < n) 
			if (f[y + dy][x + dx] == '.') {
				x2 = x + dx;
				y2 = y + dy;
			}
			
		if (x2 == -10) {
			cout << "Not unique";
			return 0;
		}
		
		

		FOR (dy, -1, 2) FOR (dx, -1, 2) if (dx == 0 || dy == 0) if (dx != 0 || dy != 0)  {
			int x3 = x2 + dx;
			int y3 = y2 + dy;
				if (x3 >= 0 && x3 < m && y3 >= 0 && y3 < n) 
				if (f[y3][x3] == '.') {
					neighs[y3][x3]--;
					if (neighs[y3][x3] == 1) q.push_back( { y3 , x3 } );
			}
		}
		
		neighs[y2][x2]--;

		if (x2 < x) {
			f[y][x] = '>';
			f[y][x2] = '<';
		} else if (x2 > x) {
			f[y][x] = '<';
			f[y][x2] = '>';
		} else if (y2 < y) {
			f[y][x] = 'v';
			f[y2][x] = '^';
		} else {
			f[y][x] = '^';
			f[y2][x] = 'v';
		}
	}
	
	for (auto &s : f) for (auto c : s) {
		if (c == '.') {
			cout << "Not unique";
			return 0;
		}
	}
	for (auto &s : f) cout << s << endl;
}