//#pragma GCC optimize("Ofast,no-stack-protector")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
//#pragma GCC target("avx,tune=native")
// Anand Jaisingh

#include<bits/stdc++.h>

using namespace std;

typedef complex<double> base;
typedef long double ld;
typedef long long ll;

#define pb push_back
#define pii pair<int,int>
#define pll pair< ll , ll >
#define vi vector<int>
#define vvi vector< vi >

const int maxn=(int)(5e5+5);
const ll mod=(ll)(1e9+7);
ll a[maxn];
vector< pii > ed[maxn];
vector<int> al[maxn];
unordered_map<int,int> vis;
int n,m,k;

inline int mul(ll a,ll b)
{
    return (a*b)%mod;
}

inline int add(int a,int b)
{
    int ret=a+b;

    if(ret>=mod)
    {
        ret-=mod;
    }

    return ret;
}

inline int sub(int a,int b)
{
    int ret=a-b;

    if(ret<0)
    {
        ret+=mod;
    }

    return ret;
}

inline int poww(ll a,ll b)
{
    int x=1,y=a;

    while(b>0)
    {
        if(b%2)
        {
            x=mul(x,y);
        }

        y=mul(y,y);b/=2;
    }

    return (int)(x%mod);
}

vector< ll > uniq(vector< ll >& v)
{
    sort(v.begin(),v.end());

    vector< ll > ret;

    if(v.size()==0)
    {
        return ret;
    }

    ret.pb(v[0]);

    for(int i=1;i<v.size();i++)
    {
        if(v[i]!=v[i-1])
        {
            ret.pb(v[i]);
        }
    }

    return ret;
}

int get(vector< ll >& v,ll x)
{
    int low=0,high=v.size()-1;

    while(low<high)
    {
        int mid=(low+high+1)>>1;

        if(v[mid]<=x)
        {
            low=mid;
        }
        else
        {
            high=mid-1;
        }
    }


    return low;
}

void dfs(int u)
{
    vis[u]=1;

    for(int x:al[u])
    {
        if(!vis[x])
        {
            dfs(x);
        }
    }
}

int solve(int i)
{
    unordered_map<int,int> m1;

    for(pii x:ed[i])
    {
        int u=x.first,v=x.second;

        m1[x.first]=m1[x.second]=1;

        al[u].pb(v);al[v].pb(u);
    }

    int present=m1.size(),ctr=n-present;

    for(auto x:m1)
    {
        if(!vis[x.first])
        {
            ctr++;

            dfs(x.first);
        }
    }

    int res=poww(2,ctr);

    vis.clear();

    for(auto x:m1)
    {
        al[x.first].clear();al[x.second].clear();
    }

    return res;
}

int main()
{
    //ios_base::sync_with_stdio(0);

    scanf("%d%d%d",&n,&m,&k);

    ll tot=(1ll<<k);

    vector< pii > edges;

    for(int i=0;i<n;i++)
    {
        scanf("%lld",&a[i]);
    }

    vector< ll > x;

    for(int i=0;i<m;i++)
    {
        int u,v;

        scanf("%d%d",&u,&v);

        u--;v--;

        edges.pb({u,v});

        x.pb(a[u]^a[v]);
    }

    x=uniq(x);int left=(int)((tot-x.size())%mod);

    int res=mul(left,poww(2,n));

    for(int i=0;i<m;i++)
    {
        ll now=a[edges[i].first]^a[edges[i].second];

        int zz=get(x,now);

        ed[zz].pb(edges[i]);
    }

    for(int i=0;i<maxn;i++)
    {
        if(ed[i].size()>0)
        {
            res=add(res,solve(i));
        }
    }

    printf("%d\n",res);

    return 0;
}
