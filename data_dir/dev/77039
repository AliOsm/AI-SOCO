#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define FORE(i, a, n) for (i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << (x) << endl;
#define ull unsigned long long
#define pii pair<int, int>
//#define pii pair<ll, ll>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-10
//#define endl "\n"
#define pdd pair<double, double>
//#define mp make_pair

void ans(int x) { cout << x << endl; exit(0); }

const int MAXP = 2000*1000;
bool p[MAXP];

int main() {
	ios::sync_with_stdio(false);
	fill(p, p+MAXP, true);
	for (int i = 2; i*i < MAXP; i++) if (p[i]) for (int j = i+i; j < MAXP; j += i) p[j] = false;
	int n, x;
	set<int> a;
	cin >> n >> x;
	FOR(i, 0, n) {
		int q;
		cin >> q;
		a.insert(q);
	}
	if (x == 2) ans(0);
	if (a.find(1) != a.end() && x > 2) ans(1);
	if (x >= MAXP) ans(-1);
	int tot = 0;
	FOR(i, 2, min(MAXP, x)) if (p[i]) {
		if (a.find(i) == a.end()) ans(-1);
		tot++;
	}
	ans(tot);
	// :-/
	return 0;
}

