//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

#include <stdio.h>
#include <bits/stdc++.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)

using namespace std;

inline void setmin(int &x, int y) { if (y < x) x = y; }
inline void setmax(int &x, int y) { if (y > x) x = y; }
inline void setmin(ll &x, ll y) { if (y < x) x = y; }
inline void setmax(ll &x, ll y) { if (y > x) x = y; }

const int N = 1000;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const double eps = 1e-9;
const double pi = atan2(0, -1);
const int ABC = 26;

int a[N][N];
int pos[N];
int vals[N][N];
int tmp[N];

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    cout << fixed;
    //ll TL = 0.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    int n, m;
    cin >> n >> m;
    vector<int> diff;
    rep(i, 0, n)
        rep(j, 0, m)
        {
            cin >> a[i][j];
            diff.push_back(a[i][j]);
        }
    sort(diff.begin(), diff.end());
    diff.resize(unique(diff.begin(), diff.end()) - diff.begin());
    int l = 0, r = sz(diff), mid;
    while (r - l > 1)
    {
        mid = (l + r) / 2;
        int v = diff[mid];
        rep(i, 0, n)
        {
            pos[i] = 0;
            rep(j, 0, m)
                if (a[i][j] >= v)
                    vals[i][pos[i]++] = j;
        }
        bool ok = false;
        rep(j, 0, m)
        {
            int cnt = 0;
            rep(i, 0, n)
                if (a[i][j] >= v)
                    cnt += (pos[i] - 1);
            if (cnt > m - 1)
            {
                ok = true;
                break;
            }
            memset(tmp, 0, sizeof(int) * m);
            rep(i, 0, n)
            {
                if (a[i][j] >= v)
                    rep(k, 0, pos[i])
                    {
                        if (vals[i][k] != j && tmp[vals[i][k]])
                            ok = true;
                        tmp[vals[i][k]]++;
                        if (ok)
                            break;
                    }
                if (ok)
                    break;
            }
            if (ok)
                break;
        }
        ok ? l = mid : r = mid;
    }
    cout << diff[l] << "\n";
    return 0;
}
