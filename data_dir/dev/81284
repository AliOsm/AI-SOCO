#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>	
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound          	    
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcount                                                                                        
#define sqr(x) ((x) * (x))
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;                                  
const int N = (int)2e5 + 123;
const ll inf = (ll)3e18 + 1;
                                       
const double pi = acos(-1.0);
const double eps = 1e-7;
const int dx[] = {0, 0, 1, 0, -1};										
const int dy[] = {0, 1, 0, -1, 0};  		
 
int n, m, k[101], used[101], ans, sum;
vector <int> v, v1;

inline void boost () {
	ios_base :: sync_with_stdio (NULL);
	cin.tie (NULL), cout.tie (NULL);          
}

inline void Solve () {
	cin >> n >> m;
	for (int i = 1; i <= n; i ++) {
		string s;
		int x;
		cin >> s >> x;
		if (s == "ATK") v.pb (x);
		else v1.pb (x);
	}
	sort (all (v));
	sort (all (v1));
	for (int i = 1; i <= m; i ++) cin >> k[i];
	sort (k + 1, k + m + 1);
	if (!sz (v)) {
	   bool ok = 1;
	   int cur = 0;
		for (int i = 0; i < sz (v1); i ++) {
			int posS = -1;
			for (int l = 1; l <= m; l ++) {
				if (!used[l] && v1[i] < k[l]) {
					posS = l;
					break;
				}
			}
			if (posS == -1) {
				ok = 0;
				break;
			}	
			used[posS] = 1;
		}
		if (ok) {
			for (int i = 1; i <= m; i ++) {
				if (!used[i])
					cur += k[i];
			}
			ans = max (ans, cur);
		}
	}
	else {
		bool ok = 1;
		for (auto it : v1) {
			int posS = -1;
			for (int i = 1; i <= m; i ++) {
				if (!used[i] && it < k[i]) {
					posS = i;
					break;
				}
			}
			if (posS == -1) {
				ok = 0;
				break;
			}
			else {
				used[posS] = 1;		
			}
		}
		for (auto it : v) {
			int posS = -1;
			for (int i = 1; i <= m; i ++) {
				if (!used[i] && it <= k[i]) {
					posS = i;
					ans += k[i] - it;
					break;
				}
			}
			if (posS == -1) {
				ok = 0;
				break;
			}
			else {
				used[posS] = 1;		
			}
		}
		if (ok) {
			for (int i = 1; i <= m; i ++)
				if (!used[i])
					ans += k[i];
		}
	}                              
	for (int j = 0; j < sz (v); j ++) {
		int pos = m - j;
		if (pos < 1) break;
		sum += v[j];
		bool check = 1;
		for (int i = 0; i <= j; i ++) check &= (k[pos + i] >= v[i]);
		if (check) {
			int cur = 0;
			for (int i = m; i >= pos; i --) cur += k[i];
			ans = max (ans, cur - sum); 
		}
	}
	cout << ans;
}
                  
int main () {                                       
//	freopen (".in", "r", stdin);    
//	freopen (".out", "w", stdout); 	          
	boost ();
	int tt = 1;
//	cin >> tt;   
	while (tt --) {
		Solve ();
	}                                               
	return 0;      
}         	                                                    