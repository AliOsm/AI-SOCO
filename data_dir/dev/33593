#include <bits/stdc++.h>
#define limit 1000005
#define mid (start+end)/2
using namespace std;
int n,A[limit],q,tree[limit*4],ans[limit],pre[limit];
vector <pair<int,int>> v[limit];
map <int,int> last;
void update(int node,int start,int end,int l,int r,int val)
{
    if(start>end || start>r || end<l) return;
    if(start>=l && end<=r)
    {
        tree[node]=val;
        return ;
    }
    update(node*2,start,mid,l,r,val),update(node*2+1,mid+1,end,l,r,val);
    tree[node]=tree[node*2]^tree[node*2+1];
}
int query(int node,int start,int end,int l,int r)
{
    if(start>end || start>r || end<l) return 0;
    if(start>=l && end<=r) return tree[node];
    return query(node*2,start,mid,l,r)^query(node*2+1,mid+1,end,l,r);
}
int main()
{
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        scanf("%d",&A[i]);
    }
    scanf("%d",&q);
    for(int i=1;i<=q;i++)
    {
        int a,b;
        scanf("%d %d",&a,&b);
        v[b].push_back(make_pair(a,i));
    }
    for(int i=1;i<=n;i++)
    {
        if(last[A[i]])
        update(1,1,n,last[A[i]],last[A[i]],0);
        update(1,1,n,i,i,A[i]);
        last[A[i]]=i;
        pre[i]=pre[i-1]^A[i];
        for(int j=0;j<(int)v[i].size();j++)
        {
            ans[v[i][j].second]=pre[i]^pre[v[i][j].first-1]^query(1,1,n,v[i][j].first,i);
        }
    }
    for(int i=1;i<=q;i++)
    {
        printf("%d\n",ans[i]);
    }
    return 0;
}
