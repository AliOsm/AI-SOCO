#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<double, double> pd;

template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifdef _offline
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // _offline
}

const ll mod = 1e9 + 7;

signed main() {
    FAST_IO();
    int n;
    ll x, y;
    cin >> n >> x >> y;
    vector<pll> seg(n);
    for (int i = 0; i < n; ++i) {
        cin >> seg[i].first >> seg[i].second;
    }
    sort(all(seg));
    multiset<ll> open;
    ll ans = 0;
    for (int i = 0; i < n; ++i) {
        ans += (seg[i].second - seg[i].first) * y;
        ans %= mod;
        auto it = open.lower_bound(seg[i].first);
        if (it == open.begin()) {
            ans += x;
            ans %= mod;
            open.insert(seg[i].second);
            continue;
        }
        it--;
        if ((seg[i].first - *it) * y < x) {
            ans += (seg[i].first - *it) * y;
            ans %= mod;
            open.erase(it);
            open.insert(seg[i].second);
        }
        else {
            ans += x;
            ans %= mod;
            open.insert(seg[i].second);
        }
    }
    cout << ans;
}
