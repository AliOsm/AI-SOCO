#include <iostream>
#include <cmath>
#include <cstdio>
#include <algorithm>
#include <vector>

using namespace std;

#define f first
#define s second
#define mp make_pair
#define pb push_back

vector<pair<int, int> > t[1001000];
int m, n, a[200200];

vector <pair <int, int> > merge(vector <pair <int, int> > &a, vector <pair <int, int> > &b) {
    vector <pair <int, int> > c;
    int i = 0;
    int j = 0;
    while (i < a.size() && j < b.size()) {
        pair <int, int> mn = min(a[i], b[j]);
        c.pb(mn);
        if (a[i] == mn) i++;
        else j++;
    }
    while (i < a.size()) c.pb(a[i++]);
    while (j < b.size()) c.pb(b[j++]);
    return c;
}

void build(int v, int tl, int tr) {
    if (tl == tr) {
        t[v].pb(mp(a[tl], tl));
    } else {
        int mid = (tl + tr) >> 1;
        build(2 * v, tl, mid);
        build(2 * v + 1, mid + 1, tr);
        t[v] = merge(t[2 * v], t[2 * v + 1]);
    }
}

int get(vector <pair <int, int> > &a, int val) {
    if (a[0].f != val) return a[0].s + 1;
    if (a.back().f != val) return a.back().s + 1;
    return -1;
}

int get(int v, int tl, int tr, int l, int r, int val) {
    if (l > tr || r < tl) return -1;
    if (l <= tl && tr <= r) return get(t[v], val);
    int mid = (tl + tr) >> 1;
    int ans1 = get(2 * v, tl, mid, l, r, val);
    int ans2 = get(2 * v + 1, mid + 1, tr, l, r, val);
    return max(ans1, ans2);
}

int main () {

    scanf("%d%d", &n, &m);
    for (int i = 0; i < n; i++) scanf("%d", a + i);
    
    build(1, 0, n - 1);
    
    while (m--) {
        int l, r, x;
        scanf("%d%d%d", &l, &r, &x);
        l--; r--;
        printf("%d\n", get(1, 0, n - 1, l, r, x));
    }

    return 0;
}
