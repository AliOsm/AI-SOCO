#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 2e5 + 7;
const LL INF = 4e9 + 7;
const int M = 1e9 + 7;

int n, last[N], vis[N];
PLL T[N];
map < LL, int > mp;
vector < int > G[N];

LL ans = 1, pot[N];
int cnt1, cnt2;

void dfs(int v)
{
    cnt1++;
    cnt2 += sz(G[v]);
    vis[v] = 1;
    for(auto u: G[v])
        if(!vis[u]) dfs(u);
}

int main()
{
    _upgrade
    cin >> n;
    for(int i = 0; i < n; i++)
    {
        cin >> T[i].first >> T[i].second;
        T[i].second += INF;
        mp[T[i].first] = mp[T[i].second] = 1;
    }
    int cnt = 0;
    for(auto &x: mp)
        x.second = ++cnt;
    for(int i = 0; i < n; i++)
    {
        T[i].first = mp[T[i].first];
        T[i].second = mp[T[i].second];
        G[T[i].first].push_back(T[i].second);
        G[T[i].second].push_back(T[i].first);
    }
    pot[0] = 1;
    for(int i = 1; i <= cnt; i++)
    {
        pot[i] = 2LL * pot[i - 1] % M;
    }
    for(int i = 1; i <= cnt; i++)
    {
        if(!vis[i])
        {
            cnt1 = cnt2 = 0;
            dfs(i);
            cnt2 /= 2;
            if(cnt1 - 1 == cnt2)
            {
                ans = (ans * (pot[cnt1] - 1)) % M;
            }
            else
            {
                ans = (ans * pot[cnt1]) % M;
            }
        }
    }
    cout << (ans + M) % M << "\n";
	return 0;
}
