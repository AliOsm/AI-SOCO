#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
 
using namespace std;
using namespace __gnu_pbds;
 
#define debug(s) cout << #s << " = " << s << endl
#define all(v) (v).begin(), (v).end()
#define mem(a,val) memset(a, val, sizeof a)
 
#define maxn 100010
#define INF 1e15
#define ff first
#define ss second
//#define endl '\n'
typedef long long ll;
 
//typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

string s;
int n;

pair<bool, string> check(int x) {
  //debug(x);
  int spos = 0, ppos = n - 1;
  int rem = x;
  while (rem > 1) {
    if (s[spos] != s[ppos]) {
      //debug(spos);
      //debug(ppos);
      string tmpa = s.substr(0, spos) + s.substr(spos, rem) + s.substr(ppos + 1, n - ppos - 1);
      string tmpb = s.substr(0, spos) + s.substr(ppos - rem + 1, rem) + s.substr(ppos + 1, n - ppos - 1);
      //debug(tmpa);
      //debug(tmpb);
      //debug(rem);
      bool flag = 1;
      for (int i = 0; i < x/2; ++i) {
        if (tmpa[i] != tmpa[x - i - 1]) {
          flag = false;
          break;
        }
      }
      if (flag) return {flag, tmpa};
      flag = 1;
      for (int i = 0; i < x/2; ++i) {
        if (tmpb[i] != tmpb[x - i - 1]) {
          flag = false;
          break;
        }
      }
      if (flag) return {flag, tmpb};
      return {false, ""};
    }
    else {
      spos++, ppos--;
      rem -= 2;
    }
  }
  if (rem == 1) {
    spos++;
  }
  string tmp = s.substr(0, spos) + s.substr(ppos + 1, n - ppos - 1);
  
  return {true, tmp};
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int tc;
  cin >> tc;
  while (tc--) {
    cin >> s;
    n = s.size();
    string ans = "";
    for (int len = 1; len <= n; ++len) {
      pair<bool, string> p = check(len);
      if (p.ff) {
        ans = p.ss;
      }
    }
    cout << ans << endl;
  }
}
