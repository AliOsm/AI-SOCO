//raja1999
#include <bits/stdc++.h>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cstdio>
#include <cstdlib>
#include <climits>
#include <utility>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iomanip> 
//setbase - cout << setbase (16); cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 << endl; prints xxx77
//setprecision - cout << setprecision (14) << f << endl; Prints x.xxxx


using namespace std;
#define f(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) f(i,0,n)
#define fd(i,a,b) for(i=a;i>=b;i--)
#define pb push_back
#define mp make_pair
#define vi vector< int >
#define vl vector< ll >
#define ss second
#define ff first
#define ll long long
#define pii pair< int,int >
#define pll pair< ll,ll >
#define sz(a) a.size()
#define inf (1000*1000*1000+5)
#define all(a) a.begin(),a.end()
#define tri pair<int,pii>
#define vii vector<pii>
#define vll vector<pll>
#define viii vector<tri>
#define mod (1000*1000*1000+7)
#define pqueue priority_queue< int >
#define pdqueue priority_queue< int,vi ,greater< int > >

//std::ios::sync_with_stdio(false);
int par[116];
set< int >  s;
int root(int u)
{
	if(par[u]<0)
		return u;
	par[u]=root(par[u]);
	return par[u];
}
int merge(int u,int v)
{
	u=root(u);
	v=root(v);
	if(u==v)
		return 0;
    if(par[u]<par[v])
    {
    	//v--;
    	par[v]=(u);
    }
    else if(par[u]>par[v])
    {
    	par[u]=v;
    }
    else
    {
    	par[u]=v;
    	par[v]--;
    }
}
int main(){
	std::ios::sync_with_stdio(false);
	int n,m,i,j,x,y[115],count=0,count1=0;
	cin>>n>>m;
	rep(i,m+10)
	{
		par[i]=-1;
	}
	rep(i,n)
	{
	    cin>>x;
	    if(x==0)
	    {
	    	count++;
	    	continue;
	    }
	    rep(j,x)
	    {
	    	 cin>>y[j];
	    	 s.insert(y[j]);
	    	
	    }
	    for(j=1;j<x;j++)
	    {
	    	merge(y[j],y[j-1]);
	    }
	}
	//cout<<count<<endl;
	for(i=1;i<=m;i++)
	{
		if(par[i]<0&&s.find(i)!=s.end())
		{
			//cout<<i<<endl;
			count1++;
		}
	}
	if(count1>0){
		cout<<count1-1+count<<endl;
	}
	else
	{
		cout<<count<<endl;
	} 

} 
