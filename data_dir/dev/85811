#pragma GCC target("avx2")
#pragma GCC optimize("O3")
 
#include <x86intrin.h>
#include <bits/stdc++.h>   
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
using namespace __gnu_pbds;
using namespace std;

template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
     
#define F first
#define S second           
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair                                     
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)3e5 + 123;
const ll inf = (ll)1e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;                  
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

int n, sa[N], ea[N], sb[N], eb[N], pos[N];

struct tree {
   int l; int r;
}t[4 * N];

void build (int v = 1, int tl = 1, int tr = n) {
   if (tl == tr) {
      t[v].l = sb[pos[tl]];
      t[v].r = eb[pos[tl]];
      return;
   }
   int tm = tl + tr >> 1;
   build (v + v, tl, tm);
   build (v + v + 1, tm + 1, tr);
   t[v].r = min (t[v + v].r, t[v + v + 1].r);
   t[v].l = max (t[v + v].l, t[v + v + 1].l);
}

int get_min (int l, int r, int v = 1, int tl = 1, int tr = n) {
   if (tl > r || tr < l) return mod;
   if (l <= tl && tr <= r) return t[v].r;
   int tm = tl + tr >> 1;
   return min (get_min (l, r, v + v, tl, tm), get_min (l, r, v + v + 1, tm + 1, tr));
}

int get_max (int l, int r, int v  = 1, int tl = 1, int tr = n) {
   if (tl > r || tr < l) return -mod;
   if (l <= tl && tr <= r) return t[v].l;
   int tm = tl + tr >> 1;
   return max (get_max (l, r, v + v, tl, tm), get_max (l, r, v + v + 1, tm + 1, tr));
}

bool cmp (int a, int b) {
   if (sa[a] != sa[b]) return (sa[a] < sa[b]);
   return (sb[a] < sb[b]);
}

inline void check () {
   build ();
   for (int i = 1; i <= n; i ++) {
      int j = i, l = i + 1, r = n;
      while (l <= r) {
         int mid = l + r >> 1;
         if (max (sa[pos[i]], sa[pos[mid]]) <= min (ea[pos[i]], ea[pos[mid]])) l = mid + 1, j = mid;
         else r = mid - 1;
      }
      if (i == j) continue;
      if (get_min (i + 1, j) < sb[pos[i]]) cout << "NO", exit (0);
      if (get_max (i + 1, j) > eb[pos[i]]) cout << "NO", exit (0);
   }
}

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                     

inline void Solve () {
   cin >> n;
   for (int i = 1; i <= n; i ++) cin >> sa[i] >> ea[i] >> sb[i] >> eb[i], pos[i] = i;
   sort (pos + 1, pos + n + 1, &cmp);
   check ();  
   for (int i = 1; i <= n; i ++) {
      swap (sa[i], sb[i]);
      swap (ea[i], eb[i]);
   }
   sort (pos + 1, pos + n + 1, &cmp);
   check ();
   cout << "YES";
}

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
   //cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
                          