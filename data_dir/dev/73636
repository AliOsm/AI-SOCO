#include <bits/stdc++.h>
using namespace std;
#define F first 
#define S second
#define sqr(x) ((x) * (x))
#define all(c) c.begin(), c.end()
#define tr(c, it) for(decltype (c.begin()) it = c.begin(); it != c.end(); it++)
#define eps 1e-12
#define pb push_back
#define ppb pop_back
#define lb lower_bound
#define ub upper_bound
#define inf 1000000000
#define sz 1010
#define N 1000100
#define M 998244353
 
   
#define name "a"
#define isFile 0

typedef long long ll;	typedef unsigned long long ull;	typedef long double ld; 
int bPow(int v, int u, int mod){	if(!u)	return 1;	int res = bPow(v, u / 2, mod);	res = (res * 1ll * res) % mod;	if(u & 1) res = (res * 1ll * v) % mod;	return res;} 
void faster(){			ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);	if(isFile){	freopen(name".in", "r", stdin);	freopen(name".out", "w", stdout); }}
vector<int> prime; bool notprime[N];
void resh(){ int n = N - 10;	for(int i = 2; i < n; i++)	if(!notprime[i]){	prime.pb(i); for(int j = i; j < n; j += i) notprime[j] = 1;}}
int is_comp(ll p){	for(int i = 0; prime[i] * 1ll * prime[i] <= p; i++){	if(p % prime[i] == 0)	return prime[i]; }	return 0;	}
bool is_prime(ll p){	for(int i = 0; prime[i] * 1ll * prime[i] <= p; i++){	if(p % prime[i] == 0)	return 0; }	return 1;	}
ll gcd(ll a, ll b){	if(a > b)	swap(a, b);	ll temp;	while(a){	temp  = a;	a = b % a;	b = temp;	}	return b;	}
bool fb(int x){		return 0;	}
int bSearch(int l, int r){	while(r - l > 1){	int m = (l + r) / 2;	if(fb(m))	l = m;	else		r = m;}	if(fb(l + 1))	l++;	if(!fb(l))		l = 0;	return l;}

int n, a, b;
pair<int, int> x[sz][sz], v;
char ans[sz][sz];
bool ok[sz][sz];
bool ch(int i, int j){
	return (i > 0 && j > 0 && i <= n && j <= n);
}
void dfs(int i, int j){
	ok[i][j] = 1;
	if(ch(i + 1, j) && v == x[i + 1][j] && !ok[i + 1][j]){
		ans[i + 1][j] = 'U';
		dfs(i + 1, j);
	}
	if(ch(i - 1, j) && v == x[i - 1][j] && !ok[i - 1][j]){
		ans[i - 1][j] = 'D';
		dfs(i - 1, j);		
	}
	if(ch(i, j + 1) && v == x[i][j + 1] && !ok[i][j + 1]){
		ans[i][j + 1] = 'L';
		dfs(i, j + 1);
	}
	if(ch(i, j - 1) && v == x[i][j - 1] && !ok[i][j - 1]){
		ans[i][j - 1] = 'R';	
		dfs(i, j - 1);		
	}
}
void f(int i, int j){
	if(ch(i + 1, j) && x[i + 1][j].F == -1)
		ans[i][j] = 'D';
	if(ch(i - 1, j) && x[i - 1][j].F == -1)
		ans[i][j] = 'U';
	if(ch(i, j + 1) && x[i][j + 1].F == -1)
		ans[i][j] = 'R';
	if(ch(i, j - 1) && x[i][j - 1].F == -1)
		ans[i][j] = 'L';
}
void solve(){
	scanf("%d", &n);
	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= n; j++)
			ans[i][j] = '.';
	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= n; j++){
			scanf("%d %d", &a, &b);
			if(a != -1)
				ans[a][b] = 'X';
			x[i][j] = {a, b};
		}
	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= n; j++)
			if(ans[i][j] == 'X' && x[i][j] != make_pair(i, j)){
				printf("INVALID");
				return ;				
			}

	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= n; j++)
			if(ans[i][j] == 'X'){
				v = {i, j};
				dfs(i, j);		
			}
	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= n; j++)
			if(x[i][j].F == -1)
				f(i, j);					
	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= n; j++)
			if(ans[i][j] == '.'){
				printf("INVALID");
				return ;
			}			
	printf("VALID\n");
	for(int i = 1; i <= n; i++){
		for(int j = 1; j <= n; j++)		
			printf("%c", ans[i][j]);
		printf("\n");	
	}
}
int main(){
//	faster();
	int T = 1;
//	cin >> T;
	while(T--){
		solve();
//		cout << endl;
	}
 	return 0;
}