#include <bits/stdc++.h>

#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")

#define fi first
#define se second
#define pb push_back
#define last(s) (s)[(s).size()-1]
#define all(a) (a).begin(),(a).end()
#define elif else if
#define left asdasd
#define next zaza
#define prev azaz
#define cclear cout<<flush;
#define x0 kerker
#define y0 lolik
#define kchay ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

using namespace std;

using llong = long long;
using ld = long double;
using ii = pair<int,int>;\
using ull = unsigned long long;
using pll = pair<llong, llong>;
using psi = pair<string, int>;
using ll = pair<llong, llong>;

const llong over999 = 1e9;
const llong md = 1e9+7;
const ld eps = 1e-16;
const ld Pi = acos(-1);
const llong nich = 0;
const llong mnogo = 2e5;
#define int long long
/*there's absolutely nothing for us here*/

int t[4000100];
bool davit[4000100];
int tim, cnt[2000100], verx[200100], c[200100], l[2000100], r[2000100], fak[200100];
vector<int> g[2000100];
set<int> st;
int n, m, x;

int f(int x, int y){
    return x + y;
}

void dfs(int x, int p){
    l[x] = ++tim;
    for(auto i : g[x]){
        if(i == p)continue;
        dfs(i, x);
        cnt[x] += cnt[i];
        verx[x] += verx[i];
    }
    verx[x]++;
    cnt[x] += c[x];
    r[x] = tim;
    return;
}
/*
bool under(int x, int y){
    return (in[x] <= in[y] && out[x] >= out[y]);
}
*/


void tolchek(int v, int l, int r){
    if(!davit[v])return;

    davit[v*2]^=1;
    davit[v*2+1]^=1;
    davit[v] = false;

    int mid = (l + r) / 2;

    t[v*2] = (mid - l + 1) - t[v*2];
    t[v*2 + 1] = (r - mid) - t[v*2+1];
}

void postavNazad(int v, int l, int r, int ll, int rr){
    if(l > rr || r < ll)return;
    if(l >= ll && r <= rr){
        davit[v]^=1;
        t[v] = (r - l + 1) - t[v];
        return;
    }
    tolchek(v, l, r);
    int mid = (l + r) / 2;
    postavNazad(v * 2, l, mid, ll, rr);
    postavNazad(v * 2 + 1, mid + 1, r, ll, rr);

    t[v] = f(t[v*2], t[v*2+1]);
}

int getKrishin(int v, int l, int r, int ll, int rr){
    if(l > rr || r < ll)return nich;
    if(l >= ll && r <= rr)return t[v];
    tolchek(v, l, r);
    int mid = (l + r) /2;
    return f(getKrishin(v * 2, l, mid, ll, rr), getKrishin(v * 2 + 1, mid + 1, r, ll, rr));
}


int32_t main()
{
    kchay;

    cin >> n;

    for(int i = 2; i <= n; i++){
        cin >> x;
        g[x].pb(i);
        g[i].pb(x);
    }

    dfs(1, 0);
    for(int i = 1; i <= n; i++){
        cin >> c[i];
        if(c[i])postavNazad(1, 1, n, l[i], l[i]);
    }


    cin >> m;
    while(m--){
        string s;
        cin >> s >> x;
        if(s[0] == 'g'){
            cout << getKrishin(1, 1, n, l[x], r[x]) << endl;
        } else {
            postavNazad(1, 1, n, l[x], r[x]);
        }
    }

    /*
2
1
1 0
15
pow 2
get 1

    */

    return 0;
}
