#include <bits/stdc++.h>
using namespace std;

const int N = 1000010;
vector <int> e[N];
int sz[N];
int cnt[N];
int big[N];
int ans[N];
int dep[N];
int maxdep;

void go(int u, int f) {
    dep[u] = dep[f] + 1;
    sz[u] = 1;
    int mx = 0;
    for (int v: e[u]) if (v != f){
        go (v, u);
        sz[u] += sz[v];
        if (sz[v] > mx) {
            mx = sz[v];
            big[u] = v;
        }
    }
}

void add (int u, int f, int val, int s = 0) {
    cnt[dep[u]] += val;
    if (cnt[dep[u]] > cnt[maxdep] || cnt[dep[u]] == cnt[maxdep] && dep[u] < maxdep) {
        maxdep = dep[u];
    }
    for (int v: e[u]) if (v != f && v != s){
        add (v, u, val, s);
    }
}

void dfs(int u, int f) {
    for (int v: e[u]) if (v != f){
        if (v != big[u]) {
            dfs(v, u);
            maxdep = 0;
        }
    }
    int key = big[u];
    if (big[u]) {
        dfs (big[u], u);
    }

    add (u, f, 1, key);
    ans[u] = maxdep - dep[u];

    if (big[f] != u) {
        add (u, f, -1);
    }
}

int main() {
    int n, x, y;
    scanf("%d", &n);
    for (int i = 1; i < n; i++) {
        scanf("%d%d", &x, &y);
        e[x].push_back(y);
        e[y].push_back(x);
    }

    go (1, 0);

    dfs (1, 0);
    for (int i = 1; i <= n; i++) {
        printf("%d\n", ans[i]);
    }
    return 0;
}
