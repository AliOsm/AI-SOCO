 /*
    __                      _    _            __                 __
   / /_/\__        __ _    | | _| | __     _  \ \       __/\__  / /
  / /\    /       / _` |   | |/ / |/ /    (_)  | |      \    / / / 
 / / /_  _\      | (_| |   |   <|   <      _   | |      /_  _\/ /  
/_/    \/         \__,_|___|_|\_\_|\_\    (_)  | |        \/ /_/   
                      |_____|                 /_/                  

*/
#include <bits/stdc++.h>
#define fast ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)
#define ll long long int
#define ld long double
using namespace std;
const long double pi = 3.14159265358979323;
const double EPS = 1e-12;
const int N = 1e6 + 5;
const int MOD = 1e9 + 7;

ll h[N][4], hh[N][4];
ll n, dx, dy;

bool check(ll mid){
	ll pt = 1, pt1 = pt + mid - 1; 
	while(pt1 <= n){
		ll U = h[pt - 1][0] + hh[pt1 + 1][0];
		ll D = hh[pt1 + 1][1] + h[pt - 1][1];
		ll R = hh[pt1 + 1][2] + h[pt - 1][2];
		ll L = hh[pt1 + 1][3] + h[pt - 1][3];
		ll dist = abs(dy - (U - D)) + abs(dx - (R - L));
		if(dist <= mid){
			if((mid - dist) % 2 == 0) return 1;
		}
		pt1++;
		pt++;
	}
	return 0;
}


int main(){
	fast;
	ll cntd = 0, cntu = 0, cntr = 0, cntl = 0;
	cin >> n;
	string s;
	cin >> s;
	cin >> dx >> dy;
	s = '@' + s;
	ll curx = 0, cury = 0;
	for(int i = 1; i <= n; i++){
		if(s[i] == 'U'){ 
			cury++;
			cntu++;
		}
		if(s[i] == 'D'){
			cury--;
			cntd++;
		} 
		if(s[i] == 'R'){
			curx++;
			cntr++;
		}
		if(s[i] == 'L'){
			curx--;
			cntl++;
		} 
		h[i][0] = cntu;
		h[i][1] = cntd;
		h[i][2] = cntr;
		h[i][3] = cntl;
	}
	cntu = 0, cntd = 0, cntr = 0, cntl = 0;
	for(int i = n;  i > 0; i--){
		if(s[i] == 'U'){ 
			cntu++;
		}
		if(s[i] == 'D'){
			cntd++;
		} 
		if(s[i] == 'R'){
			cntr++;
		}
		if(s[i] == 'L'){
			cntl++;
		} 
		hh[i][0] = cntu;
		hh[i][1] = cntd;
		hh[i][2] = cntr;
		hh[i][3] = cntl;
	} 	
	if(curx == dx && cury == dy) return cout << 0, 0;
	ll lo = 0, hi = n + 1, mid;
	while(hi - lo > 1){
		mid = hi + lo >> 1LL;
		if(check(mid)) hi = mid;
		else lo = mid;
	}
	if(hi == n + 1) hi = -1;
	cout << hi;
	
	return 0;
}
/*
 check for corner cases(n == 1?)
 read the highlighted part again
 check nested for loops, flags, and breaks
*/
