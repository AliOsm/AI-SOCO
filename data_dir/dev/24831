#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")
#include <stdio.h>
#include <bits/stdc++.h>

using namespace std;
int n, m, k;
int a[2002];
int dp[2002], suf[2002];
int c[2002];
struct node {
	int n1, n2, n12, n21;
	node () {
		n1 = n2 = n12 = n21 = 0;
	}
} t[8002];

inline node relax (node x, node y) {
	node cur;

	cur.n1 = x.n1 + y.n1;
	cur.n2 = x.n2 + y.n2;
	cur.n12 = max(x.n12 + y.n2, x.n1 + y.n12);
	cur.n21 = max(x.n21 + y.n1, x.n2 + y.n21);

	return cur;
}

inline void build (int v = 1, int tl = 1, int tr = n) {
	if (tl == tr) {
		if (a[tl] == 1)
			t[v].n1 = 1;
		else 
			t[v].n2 = 1;

		t[v].n12 = t[v].n21 = 1;
		return ;
	}

	int tm = (tl + tr) >> 1;

	build ((v << 1), tl, tm);
	build ((v << 1) | 1, tm + 1, tr);

	t[v] = relax(t[(v << 1)], t[(v << 1) | 1]);
}

node get (int l, int r, int v = 1, int tl = 1, int tr = n) {
	if (tl > r || tr < l || l > r) return node();
	if (tl >= l && tr <= r) {
		return t[v];
	}
	int tm = (tl + tr) >> 1;

	return relax(
		get(l, r, (v << 1), tl, tm)
		,get(l, r, (v << 1) | 1, tm + 1, tr)
	);
}



int main () { 	
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> n;
	for (int i = 1; i <= n; i ++) {
		cin >> a[i];
	}
	build();
	
	int ans = 0;
	for (int i = 1; i <= n; i ++) {
		for (int j = 0; j < i; j ++) {
			node Sw = get(j + 1, i);
			node Ew = get(i + 1, n);
			node St = get(1, j);
			ans = max(ans, St.n1 + Sw.n21 + Ew.n2);
			ans = max(ans, St.n1 + Sw.n2 + Ew.n12);
			ans = max(ans, St.n12 + Sw.n1 + Ew.n2);
		}
	}

	cout << ans;
}