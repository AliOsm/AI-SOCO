/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)
using namespace std;
typedef long long int ll;
typedef vector<ll> vi;
vector<int> adj[1001];

class TaskC {
public:
	ll cnt, ver;
	bool visited[1001];
	void dfs(int u, int k){
		++ver;
		cnt+=adj[u].size();
		visited[u]=true;
		for(int v: adj[u]){
			if(!visited[v]){
				dfs(v, k);
			}
		}
	}
	void solve(std::istream& in, std::ostream& out) {
		ll n, m, k; in>>n>>m>>k;
		vi govt(k);
		memset(visited, false, sizeof(visited));
		f(i, k) in>>govt[i];
		vi edges(k), vertices(k);
		f(i, m){
			int u, v; in>>u>>v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		ll total = 0;
		f(i, k){
			cnt = 0;
			ver = 0;
			dfs(govt[i], govt[i]);
			edges[i] = cnt/2;
			vertices[i] = ver;
		}
		ll remain = 0;
		ll total_edges = 0;
		f(i, k) total_edges+=edges[i];
		total_edges = m - total_edges;
		rep(i, 1, n) if(!visited[i]) ++remain;
		ll res = 0;
		int merge=-1;
		f(i, k){
			ll add = remain+vertices[i];
			add = add*(add-1)/2;
			if(res<add-edges[i]-total_edges){
				res = add-edges[i]-total_edges;
				merge = i;
			}
		}
		f(i, k){
			if(i==merge) continue;
			ll x = vertices[i];
			res+=x*(x-1)/2 - edges[i];
		}
		out<<res;
	}
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
