#include <bits/stdc++.h>

#define F first
#define S second
#define pii pair<int, int>
#define pb push_back

using namespace std;

const int N = 2e4, E = 7e4 + 10, INF = 1e9;

int ed = 0, to[E], cap[E], nex[E], head[N];
int que[N], dis[N], vv[N], state[N];

void add_edge(int u, int v, int c)
{
	to[ed] = v, cap[ed] = c, nex[ed] = head[u], head[u] = ed ++;
	to[ed] = u, cap[ed] = 0, nex[ed] = head[v], head[v] = ed ++;
}

void bfs(int source)
{
	memset(dis, -1, sizeof dis);
	dis[source] = 0;
	int st = 0, en = 0;
	que[en ++] = source;
	while(en - st)
	{
		int v = que[st ++];
		for(int e = head[v]; e != -1; e = nex[e])
			if(cap[e] && dis[to[e]] == -1)
			{
				dis[to[e]] = dis[v] + 1;
				que[en ++] = to[e];
			}
	}
	return ;
}

int dfs(int v, int sink, int flow)
{
	if(flow == 0)return flow;
	if(v == sink)return flow;

	int res = 0;
	for(int e = head[v]; e != -1; e = nex[e])
	{
		if(cap[e] && res < flow && dis[to[e]] == dis[v] + 1)
		{
			int curr = dfs(to[e], sink, min(flow - res, cap[e]));
			if(curr > 0)
			{
				res += curr;
				cap[e] -= curr;
				cap[e ^ 1] += curr;
			}
		}
	}
	return res;
}

int MaxFlow(int source, int sink)
{
	int flow = 0, f = INF;
	while(f)
	{
		bfs(source);
		f = dfs(source, sink, INF);
		flow += f;
	}
	return flow;
}

int main()
{
	ios_base::sync_with_stdio(0); cin.tie(0);
	
	memset(head, -1, sizeof head);
	int ans = 0, n, m, g; cin >> n >> m >> g;
	int source = 0, sink = n + m + 1;
	for(int i=1; i<=n; i++)
		cin >> state[i];

	for(int i=1; i<=n; i++)
	{
		cin >> vv[i];
		if(state[i] == 0)add_edge(source, i, vv[i]);
		else add_edge(i, sink, vv[i]);
	}

	for(int i=1; i<=m; i++)
	{
		int tp, w, k; cin >> tp >> w >> k;
		while(k--)
		{
			int v; cin >> v;
			if(tp == 0)add_edge(i + n, v, INF);
			else add_edge(v, i + n, INF);
		}
		int fr; cin >> fr;
		if(tp == 0)add_edge(source, i + n, w + g * fr);
		else add_edge(i + n, sink, w + fr * g);
		ans += w;
	}
	cout << ans - MaxFlow(source, sink) << endl;

}
