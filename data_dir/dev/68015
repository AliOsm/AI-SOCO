#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds ;
#define ll long long
#define ld long double
#define rep(i,a,b) for(ll i=a;i<b;i+=1)
#define all(c) (c).begin(),(c).end()
#define pb push_back
#define sz(a) int((a).size())
#define hell (ll)998244353
#define f first
#define s second
#define sll(x) scanf("%lld",&x)
#define si(x) scanf("%d",&x)
typedef tree< ll , null_type , less<ll> , rb_tree_tag , tree_order_statistics_node_update > ordered_set ;
ll t = 1 ;
vector<ll> adj[100005] , vis(100005,0) ;
ll d[505][505] ;
void err()
{
    cout << "No\n" ;
    exit(0);
}
void check( ll x , vector<ll>& pre , vector<ll>& c )
{
    stack<ll> st ;
    set<ll> seta ;
    st.push(x);
    ll ans = 0 , type_x ;
    type_x = lower_bound(all(pre),x) - pre.begin() ;
    while(!st.empty())
    {
        ll y = st.top() ;
        st.pop();
        ll type_y = lower_bound(all(pre),y) - pre.begin() ;
        if( seta.find(y) == seta.end() )
        {
            seta.insert(y) ;
            if( type_y == type_x )
				ans++;
            for(auto it : adj[y] )
                if( seta.find(it) == seta.end() )
                    st.push(it);
        }
    }
    if( ans != c[type_x] )
        err();
}
void solve()
{
    ll n , x , y , w , m , k ;
    cin >> n >> m >> k ;
    vector<ll> c(k+1) , pre(k+1,0) ;
    rep( i , 1 , k + 1 )
        cin >> c[i] ;
    rep( i , 1 , k + 1 ){
        pre[i] = pre[i-1] + c[i] ;
    }
    rep( i , 0 , m )
    {
        cin >> x >> y >> w ;
        ll type_x , type_y ;
        type_x = lower_bound(all(pre),x) - pre.begin() ;
        type_y = lower_bound(all(pre),y) - pre.begin() ;
        if( w == 0 )
        {
            adj[x].pb(y);
            adj[y].pb(x);
        }
        //else
        //{
            d[type_x][type_y] = min(d[type_x][type_y],w);
            d[type_y][type_x] = min(d[type_y][type_x],w);
        //
    }
    rep( i , 1 , k + 1 )
        check( pre[i-1] + 1 , pre , c ) ;
    rep( kk , 1 , k + 1 )
    {
		//if( d[i][i] != 0 )err();
        rep( i , 1 , k + 1 )
        {
            rep( j , 1 , k + 1 )
            {
                d[i][j] = min( d[i][j] , d[i][kk] + d[kk][j] ) ;
                d[j][i] = min( d[j][i] , d[j][kk] + d[kk][i] ) ;
            }
        }
    }
    cout << "Yes\n" ;
    rep( i , 1 , k + 1 )
    {
        rep( j , 1 , k + 1 )
        {
            d[i][j] == 1e15 ? cout << "-1 " : cout << d[i][j] << ' ' ;
        }
        cout << "\n" ;
    }
}
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    rep( i , 0 , 505 )
    {
        rep( j , 0 , 505 )
        {
            d[i][j] = 1e15 ;
        }
        d[i][i]=0;
    }
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    //cin>>t;
    while(t--)
        solve() ;
    return 0 ;
}
