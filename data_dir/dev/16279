#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <cmath>
#include <bitset>
#include <string>
#include <map>
#include <queue>
#include <cstring>
#include <limits>
using namespace std;

#define rep(i, n) f(i, 0, (n) - 1)
#define f(i, a, b) for(int i = (a); i <= (int)(b); ++i)
#define fr(i, a, b) for(int i = (a); i >= (int)(b); --i)

class problem
{
  int n;
  int k;
  vector<int> a;
  int findMax(const int l, const int r)
  {
    multiset<int> in;
    multiset<int> out;
    rep(i, n)
    {
      if(i < l || i > r)
        out.insert(a[i]);
      else
        in.insert(a[i]);
    }
    rep(i, k)
    {
      if(out.empty())
        break;
      auto minPos = in.begin();
      auto maxPos = out.end();
      maxPos--;
      int minVal = *minPos;
      int maxVal = *maxPos;
      if(maxVal - minVal > 0)
      {
        in.erase(minPos);
        in.insert(maxVal);
        out.erase(maxPos);
        out.insert(minVal);
      }
      else
        break;
    }
    int s = 0;
    for(const int& x : in)
      s += x;
    return s;
  }
public:
  problem()
  {
  #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("basketball.in", "r", stdin);
//    freopen("basketball.out", "w", stdout);
  #endif
    ios_base::sync_with_stdio(false);
  }
  void solve()
  {
    cin >> n >> k;
    a.assign(n, 0);
    rep(i, n)
      cin >> a[i];
    int s = numeric_limits<int>::min();
    f(l, 0, n - 1)
    {
      f(r, l, n - 1)
      {
        int x = findMax(l, r);
        if(s < x)
          s = x;
      }
    }
    cout << s;
  }
};

int main()
{
  problem *p = new problem();
  p->solve();
  return 0;
}
