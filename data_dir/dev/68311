#include <iostream>
#include <fstream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <deque>
#include <algorithm>
#include <array>
#include <bitset>
#include <complex>
using namespace std;

#define REP(i,n) for(int i=0; i<n; ++i)
#define FOR(i,a,b) for(int i=a; i<=b; ++i)
#define FORR(i,a,b) for (int i=a; i>=b; --i)
#define ALL(c) (c).begin(), (c).end()

typedef long long ll;
typedef vector<int> VI;
typedef vector<ll> VL;
typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef pair<int,int> P;
typedef pair<ll,ll> PL;

int in() { int x; scanf("%d", &x); return x; }
ll lin() { ll x; scanf("%lld", &x); return x; }

const ll INF = 1e17;
struct edge{ll to, cost, id;};

int main() {
    int n, m, k;
    cin >> n >> m >> k;

    VI u(m), v(m);
    vector<vector<edge>> graph(n);
    REP(i,m){
        u[i] = in() - 1, v[i] = in() - 1;
        int w = in();
        graph[u[i]].push_back(edge{v[i], w, i});
        graph[v[i]].push_back(edge{u[i], w, i});
    }

    VL d(n, INF), through(n, -1), good(m);
    d[0] = 0;
    priority_queue<PL, vector<PL>, greater<PL> > q;
    q.push(make_pair(0, 0));
    while (!q.empty()){
        PL a = q.top();
        q.pop();
        int now = a.second;
        if (now != 0) good[through[now]] = 1;
        if (d[now] < a.first) continue;
        REP(i,graph[now].size()){
            edge e = graph[now][i];
            int next = e.to;
            if (d[next] > d[now] + e.cost){
                d[next] = d[now] + e.cost;
                q.push(make_pair(d[next], next));
                through[next] = e.id;
            }
        }
    }

    vector<vector<P>> graph2(n);
    REP(i,m){
        if (!good[i]) continue;
        graph2[u[i]].push_back(P(v[i], i));
        graph2[v[i]].push_back(P(u[i], i));
    }

    VI use(m), visit(n);
    int cnt = 0;
    queue<int> que;
    que.push(0);
    visit[0] = 1;
    while (!que.empty() && cnt < k){
        int now = que.front();
        que.pop();
        for (P p : graph2[now]){
            if (visit[p.first]) continue;
            visit[p.first] = 1;
            if (cnt < k){
                use[p.second] = 1;
                cnt++;
            }
            que.push(p.first);
        }
    }

    VI ans;
    REP(i,m) if (use[i]) ans.push_back(i);
    cout << ans.size() << endl;
    for (int x : ans) printf("%d ", x + 1);
    cout << endl;

    return 0;
}