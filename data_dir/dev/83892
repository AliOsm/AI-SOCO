#include<bits/stdc++.h>
using namespace std ;
#define LL long long
#define MOD 1000000007LL
#define PI acos(-1.0)


/*
// Ordered set
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template<typename T> using orderset = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
//orderset<int> s ; //orderset<int>::iterator it ;
//orderset<int> X; //X.insert(1); //X.insert(2); //X.insert(4); //X.insert(8); //X.insert(16);
//cout<<*X.find_by_order(1)<<endl; // 2 //cout<<*X.find_by_order(2)<<endl; // 4 //cout<<*X.find_by_order(4)<<endl; // 16 //cout<<(end(X)==X.find_by_order(6))<<endl; // true
//cout<<X.order_of_key(-5)<<endl;  // 0 //cout<<X.order_of_key(1)<<endl;   // 0 //cout<<X.order_of_key(3)<<endl;   // 2 //cout<<X.order_of_key(4)<<endl;   // 2 //cout<<X.order_of_key(400)<<endl; // 5
*/

LL n , m ;
LL a[200005] ;
pair< LL , LL > b[200005] ;
LL Max[200005] ;
LL tree[4*200005] ;

void init( LL node , LL left , LL right ){
    if( left == right ){
        tree[node] = a[left] ;
        return ;
    }
    LL mid = left + ( right - left ) / 2 ;
    LL Lnode = node * 2 ;
    LL Rnode = Lnode + 1 ;
    init( Lnode , left , mid ) ;
    init( Rnode , mid + 1 , right ) ;
    tree[node] = max( tree[Lnode] , tree[Rnode] ) ;
}

LL query( LL node , LL left , LL right , LL i , LL j ){
    if( left > j || right < i ) return 0 ;
    if( left >= i && right <= j ) return tree[node] ;
    LL mid = left + ( right - left ) / 2 ;
    LL Lnode = node * 2 ;
    LL Rnode = Lnode + 1 ;
    LL ret1 = query( Lnode , left , mid , i , j ) ;
    LL ret2 = query( Rnode , mid + 1 , right , i , j ) ;
    return max( ret1 , ret2 ) ;
}

LL Lower_Bound( LL val ){
    LL left = 1 , right = m , mid , ret = m + 1 ;
    while( left <= right ){
        mid = left + ( right - left ) / 2 ;
        if( b[mid].first >= val ){
            ret = mid ;
            right = mid - 1 ;
        }
        else{
            left = mid + 1 ;
        }
    }
    return ret ;
}

bool Ok( LL left , LL right ){
    LL Mx = query( 1 , 1 , n , left , right ) ;
    LL pos = Lower_Bound( Mx ) ;
    LL Sz = Max[pos] ;
    if( Sz >= right - left + 1 ) return 1 ;
    return 0 ;
}

LL Fun( LL pos ){
    LL ret = -1 ;
    LL left = pos , right = n , mid ;
    while( left <= right ){
        mid = left + ( right - left ) / 2 ;
        if( Ok( pos , mid ) ){
            ret = mid ;
            left = mid + 1 ;
        }
        else{
            right = mid - 1 ;
        }
    }
    return ret ;
}

void Input(){
    scanf("%lld",&n) ;
    for( int i = 1 ; i <= n ; i ++ ){
        scanf("%lld",&a[i]) ;
    }
    scanf("%lld",&m) ;
    for( int i = 1 ; i <= m ; i ++ ){
        scanf("%lld%lld",&b[i].first,&b[i].second) ;
    }
}

void Calculation(){
    init( 1 , 1 , n ) ;
    sort( b + 1 , b + 1 + m ) ;
    Max[m+1] = 0 ;
    for( int i = m ; i >= 1 ; i -- ){
        Max[i] = max( b[i].second , Max[i+1] ) ;
    }
    LL res = 0 ;
    for( int i = 1 ; i <= n ; i ++ ){
        LL pos = Fun( i ) ;
        if( pos == -1 ){
            res = -1 ;
            break ;
        }
        i = pos ;
        res ++ ;
    }
    printf("%lld\n",res) ;
}

void Solve(){
    Input() ;
    Calculation() ;
}

int main()
{
    LL q ;
    scanf("%lld",&q) ;
    //q = 1 ;
    while( q -- ) Solve() ;
    return 0 ;
}
