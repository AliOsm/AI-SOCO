#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <assert.h>
#include <bitset>
#include <string>
#include <cstdio>
#include <math.h>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>
using namespace std;

#define mp make_pair
#define int64 long long

#ifdef _DEBUG
    const int N = 2010;
#else
    const int N = 2010;
#endif

struct Triple
{
	int64 x;
	int i, j;
	Triple(){};
	Triple(int64 x, int i, int j) : x(x), i(i), j(j){};
	bool operator < (const Triple &other) const
	{
		return (x < other.x);
	}
};

int n, m, k, a[N], b[N];
Triple s[N * N];
vector <pair<int, int> > res;

int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
	scanf("%d", &n);
	for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
	scanf("%d", &m);
	for (int i = 1; i <= m; i++) scanf("%d", &b[i]);
	k = 0;
	for (int i = 1; i <= m; i++)
		for (int j = i + 1; j <= m; j++)
			s[++k] = Triple(-2ll * (b[i] + b[j]), i, j);
	sort(s + 1, s + k + 1);
	int64 sa = 0, sb = 0;
	for (int i = 1; i <= n; i++) sa += a[i];
	for (int i = 1; i <= m; i++) sb += b[i];
	int64 ans = abs(sa - sb);
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= m; j++)
		{
			int64 val = abs(sa - sb - 2ll * (a[i] - b[j]));
			if (val < ans)
			{
				ans = val;
				res.clear();
				res.push_back(mp(i, j));
			}
		}
	}
	for (int i = 1; i <= n; i++)
	{
		for (int j = i + 1; j <= n; j++)
		{
			int64 val = sa - sb - 2ll * (a[i] + a[j]);
			int l = 1, r = k;
			int ind = 0;
			while (l + 1 < r)
			{
				int mid = (l + r) / 2;
				if (s[mid].x > val) r = mid - 1;
				else l = mid;
			}
			if (s[r].x <= val) ind = r;
			else if (s[l].x <= val) ind = l;
			if (ind > 0)
			{
				if (abs(val - s[ind].x) < ans)
				{
					ans = abs(val - s[ind].x);
					res.clear();
					res.push_back(mp(i, s[ind].i));
					res.push_back(mp(j, s[ind].j));
				}
			}
			if (ind + 1 <= k)
			{
				if (abs(val - s[ind + 1].x) < ans)
				{
					ans = abs(val - s[ind + 1].x);
					res.clear();
					res.push_back(mp(i, s[ind + 1].i));
					res.push_back(mp(j, s[ind + 1].j));
				}
			}
		}
	}
	cout << ans << endl;
	cout << res.size() << endl;
	for (int i = 0; i < res.size(); i++) cout << res[i].first << " " << res[i].second << endl;
    return 0;
}