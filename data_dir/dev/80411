#include <bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag,
		tree_order_statistics_node_update> ordered_set;
#define ll long long
const ll N = 5e5 + 5;
ll fr[N], fr2[N];
ll a[N];
ll s[N], cnt[N];
vector<pair<ll, ll> > qr[N];
ll ans[N];
vector<ll> b[N];
int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	ll n, m, q;
	cin >> n >> m >> q;
	ll mx = 0;
	fr2[0] = m;
	for (ll i = 0; i < n; i++) {
		cin >> a[i];
		fr[a[i]]++;
		fr2[fr[a[i]]]++;
		fr2[fr[a[i]] - 1]--;
		mx = max(mx, fr[a[i]]);
	}
	ll sum = 0;
	for (ll i = 0; i < N; i++) {
		s[i] = fr2[i] * 1ll * i;
		cnt[i] = fr2[i];
		if (i) s[i] += s[i - 1], cnt[i] += cnt[i - 1];
		sum += (mx - i) * 1ll * fr2[i];
	}
	for (ll i = 0; i < q; i++) {
		ll k;
		cin >> k;
		k -= n;
		if (k > sum) {
			k -= sum;
			ans[i] = (m + (k % m)) % m;
			if (ans[i] == 0) ans[i] = m;
//			cerr << i << " " << k << endl;
		} else {
			ll st = 0, e = mx, ans = -1;
			while (st <= e) {
				ll mid = (st + e) >> 1;
				ll x = k - (cnt[mid] * mid - (s[mid]));
				if (x <= 0) e = mid - 1;
				else st = mid + 1, ans = mid;
			}
			assert(ans != -1);
			qr[ans].push_back(make_pair(i, k - (cnt[ans] * ans - (s[ans]))));
//			cout << i << endl;
		}

	}
	for (ll i = 1; i <= m; i++) {
		b[fr[i]].push_back(i);
	}
	ordered_set X;
	for (ll i = 0; i <= mx; i++) {
		for (auto a : b[i])
			X.insert(a);

		for (ll j = 0; j < qr[i].size(); j++) {
			ll indx = qr[i][j].first;
			ll y = qr[i][j].second;
//			cout << indx << " " << i << " " << y << endl;
			ans[indx] = *X.find_by_order(y - 1);
		}

	}
	for (ll i = 0; i < q; i++)
		cout << ans[i] << '\n';
	return 0;
}
