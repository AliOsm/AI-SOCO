#include<bits/stdc++.h>
#include<random>
#include<unordered_map>
#include<unordered_set>
using namespace std;

#define MAX 1000002

int n;
int m;

int belong[MAX];
inline int root(int b){
	if (belong[b] == -1){
		return b;
	}
	belong[b] = root(belong[b]);
	return belong[b];
}
void merge(int a, int b){
	a = root(a);
	b = root(b);
	if (a == b)return;
	belong[a] = b;
	return;
}

vector<pair<int, int> > road;



int deg[MAX];

int cnt = 0;
int main(){
	memset(belong, -1, sizeof(belong));
	cin >> n >> m;
	for (int i = 0; i < m; i++){
		int a, b;
		scanf("%d%d", &a, &b);
		road.push_back(make_pair(a - 1, b - 1));
		merge(a - 1, b - 1);
		if (a != b){
			deg[a - 1]++;
			deg[b - 1]++;
			continue;
		}
		else{
			cnt++;
		}
	}
	{
		int r = root(road[0].first);
		for (int i = 0; i < m; i++){
			if (r != root(road[i].first)){
				puts("0");
				return 0;
			}
		}
	}
	long long int ans = 0;
	for (int i = 0; i < m; i++){
		if (road[i].first == road[i].second){
			ans += m-1;
		}
		else{
			ans += deg[road[i].second] - 1;
			ans += deg[road[i].first] - 1;
			ans += cnt;
		}
	}
	ans /= 2LL;
	printf("%lld\n", ans);
	return 0;
}