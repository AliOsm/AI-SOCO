#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int) 1.01e9;
const ld EPS = 1e-9;

void precalc() {
}

const int maxn = (int) 5e5 + 10;
int a[maxn];

int n;

bool read() {
  if (scanf("%d", &n) < 1) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    scanf("%d", a + i + 1);
  }
  n += 2;
  a[0] = a[1];
  a[n - 1] = a[n - 2];
  return 1;
}

void solve() {
  int last = -1;
  int res = 0;
  /*for (int i = 0; i < n; ++i) {
    eprintf("%d%c", a[i], " \n"[i == n - 1]);
  }*/
  for (int i = 0; i < n;) {
    int i0 = i;
    while (i < n && a[i] == a[i0]) {
      ++i;
    }
    //eprintf("[%d..%d)\n", i0, i);
    if (i - i0 >= 2) {
      if (last != -1) {
        int cnt = i0 - last;
        res = max(res, (cnt + 1) / 2);
        for (int j = 0; j < (cnt + 1) / 2; ++j) {
          a[last + j] = a[last - 1];
          a[i0 - j - 1] = a[i0];
        }
      }
      last = i;
    } else {
      assert(last != -1);
    }
  }
  assert(last == n);
  printf("%d\n", res);
  for (int i = 1; i < n - 1; ++i) {
    printf("%d%c", a[i], " \n"[i == n - 2]);
  }
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("Time: %.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
