#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <tuple>

using namespace std;

int main() {
  long long h, w, r, K;
  cin >> h >> w >> r >> K;

  set<pair<int, int>> used;
  priority_queue<tuple<long long, int, int>> q;

  auto score = [&](long long y, long long x) {
    long long y0 = max(0LL, y - (r - 1));
    long long y1 = min(h - 1 - (r - 1), y);
    long long x0 = max(0LL, x - (r - 1));
    long long x1 = min(w - 1 - (r - 1), x);
    return (y1 - y0 + 1) * (x1 - x0 + 1);
  };
  q.emplace(score(h / 2, w / 2), h / 2, w / 2);
  used.emplace(h / 2, w / 2);

  const int dy[] = {0, 1, 0, -1};
  const int dx[] = {1, 0, -1, 0};

  long double ans = 0;
  while (K > 0) {
    long long val, y, x;
    tie(val, y, x) = q.top(); q.pop();
    ans += (long double)val / (h - r + 1) / (w - r + 1);
    K--;
    for (int k = 0; k < 4; k++) {
      int yy = y + dy[k];
      int xx = x + dx[k];
      if (yy < 0 || yy >= h || xx < 0 || xx >= w) continue;
      if (!used.count({yy, xx})) {
        used.emplace(yy, xx);
        q.emplace(score(yy, xx), yy, xx);
      }
    }
  }

  printf("%.20Lf\n", ans);
}
