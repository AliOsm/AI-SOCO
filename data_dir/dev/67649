#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse2")
#include<bits/stdc++.h>
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define mod 998244353
#define int long long
typedef long long ll;

int32_t main()
{                
    IOS;
    #ifndef ONLINE_JUDGE
    freopen("int.txt","r",stdin);
    freopen("out.txt","w",stdout);
    #endif
 	int n;
 	cin >> n;
 	vector< int > deg(n);
 	int s = 0;
 	for(int i = 0; i < n;i++)
 	{
 		cin >> deg[i];
 		s ^= (deg[i] & 1);
 	}
 	sort(deg.rbegin(),deg.rend());
 	int lo = 0;
 	int hi = n;
 	while(lo < hi)
 	{
 		int mid = (lo+hi)>>1;
 		int val = s + 2*mid;
 		
 		if(val > n)
 		{
 			hi = mid - 1;
 			continue;
 		}

 		vector<int> degn(n+1);
 		int index = -1;
 		if(val > deg[0])
 		{
 			degn[0] = val;
 			for(int i = 0;i < n;i++)
 				degn[i+1] = deg[i];
 			index = 0;
 		}
 		else
 		{	
 			bool place = 0;
 			for(int i = 0;i < n;i++)
 			{
 				if(deg[i] >= val)
 					degn[i] = deg[i];
 				if(deg[i] < val)
 				{
 					if(place)
 						degn[i+1] = deg[i];
 					else
 					{
 						degn[i] = val;
 						index = i;
 						degn[i+1] = deg[i];
 						place = 1;
 					}
 				}
 			}
 			if(place == 0)
 			{
 				degn[n] = val;
 				index = n;
 			}
 		}
 		int pre[n+1];
 		pre[0] = degn[0];
 		for(int i = 1;i <= n;i++)
 		{
 			pre[i] = pre[i-1] + degn[i];
 			//cerr<<degn[i]<<" ";
 		}
 		bool ch = 1;
 		int running_sum = 0;
 		vector<int> f(n+1,0);

 		for(int i = n;i >= 0;i--)
 		{
 			

 			int lhs = pre[i];
 			int rhs = i * (i + 1) + running_sum;
 			//cerr<<lhs<<" "<<rhs<<" "<<running_sum<<endl;
 			if(lhs > rhs)
 			{
 				ch = 0;
 				//cerr<<index;
 				if(index <= i)
 					hi = mid - 1;
 				else
 					lo = mid + 1;
 				break;
 			}
 			if(degn[i]>=i)
 			{

 				running_sum += i;
 				f[i]++;
 			}
 			else
 			{
 				f[degn[i]]++;
 				running_sum += degn[i];
 			}
 			if(i+1<=n)
 				running_sum -= f[i+1];
 			if(i-1>=0)
 			f[i-1] += f[i];
 				
 		}
 		//cerr<<val<<" "<<ch<<endl;
 		if(ch)
 			hi = mid;
 	}
 	int l = s + 2*lo;
 	lo = 0;
 	hi = n;
 	int left = 0;
 	int right = 0;
 	while(lo < hi)
 	{
 		int mid = (lo + hi +1)>>1;
 		int val = s + 2*mid;
 		if(val > n)
 		{
 			hi = mid - 1;
 			continue;
 		}
 		vector<int> degn(n+1);
 		int index = -1;
 		if(val > deg[0])
 		{
 			degn[0] = val;
 			for(int i = 0;i < n;i++)
 				degn[i+1] = deg[i];
 			index = 0;
 		}
 		else
 		{	
 			bool place = 0;
 			for(int i = 0;i < n;i++)
 			{
 				if(deg[i] >= val)
 					degn[i] = deg[i];
 				if(deg[i] < val)
 				{
 					if(place)
 						degn[i+1] = deg[i];
 					else
 					{
 						degn[i] = val;
 						index = i;
 						degn[i+1] = deg[i];
 						place = 1;
 					}
 				}
 			}
 			if(place == 0)
 			{
 				degn[n] = val;
 				index = n;
 			}
 		}
 		int pre[n+1];
 		pre[0] = degn[0];
 		for(int i = 1;i <= n;i++)
 		{
 			pre[i] = pre[i-1] + degn[i];
 			//cerr<<degn[i]<<" ";
 		}
 		bool ch = 1;
 		int running_sum = 0;
 		vector<int> f(n+1,0);

 		for(int i = n;i >= 0;i--)
 		{
 			

 			int lhs = pre[i];
 			int rhs = i * (i + 1) + running_sum;
 			//cerr<<lhs<<" "<<rhs<<" "<<running_sum<<endl;
 			if(lhs > rhs)
 			{
 				ch = 0;
 				//cerr<<index;
 				if(index <= i)
 					hi = mid - 1;
 				else
 					lo = mid + 1;
 				break;
 			}
 			if(degn[i]>=i)
 			{

 				running_sum += i;
 				f[i]++;
 			}
 			else
 			{
 				f[degn[i]]++;
 				running_sum += degn[i];
 			}
 			if(i+1<=n)
 				running_sum -= f[i+1];
 			if(i-1>=0)
 			f[i-1] += f[i];
 				
 		}
 		//cerr<<val<<" "<<ch<<endl;
 		if(ch)
 			lo = mid;
 	}
 	int r = s + 2*lo;
 	if(l>r)
 	{
 		cout<<-1;
 	}
 	if(l<r)
 	{
 		for(int i = l; i <= r;i+=2)
 			cout<<i<<" ";
 	}
 	if(l == r)
 	{

 		int val = l;
 		if(val > n)
 		{
 			cout<<-1;
 			return 0;
 			
 		}
 		vector<int> degn(n+1);
 		int index = -1;
 		if(val > deg[0])
 		{
 			degn[0] = val;
 			for(int i = 0;i < n;i++)
 				degn[i+1] = deg[i];
 			index = 0;
 		}
 		else
 		{	
 			bool place = 0;
 			for(int i = 0;i < n;i++)
 			{
 				if(deg[i] >= val)
 					degn[i] = deg[i];
 				if(deg[i] < val)
 				{
 					if(place)
 						degn[i+1] = deg[i];
 					else
 					{
 						degn[i] = val;
 						index = i;
 						degn[i+1] = deg[i];
 						place = 1;
 					}
 				}
 			}
 			if(place == 0)
 			{
 				degn[n] = val;
 				index = n;
 			}
 		}
 		int pre[n+1];
 		pre[0] = degn[0];
 		for(int i = 1;i <= n;i++)
 		{
 			pre[i] = pre[i-1] + degn[i];
 			//cerr<<degn[i]<<" ";
 		}
 		
 		bool ch = 1;
 		int running_sum = 0;
 		vector<int> f(n+1,0);

 		for(int i = n;i >= 0;i--)
 		{
 			

 			int lhs = pre[i];
 			int rhs = i * (i + 1) + running_sum;
 			//cerr<<lhs<<" "<<rhs<<" "<<running_sum<<endl;
 			if(lhs > rhs)
 			{
 				ch = 0;
  				break;
 			}
 			if(degn[i]>=i)
 			{

 				running_sum += i;
 				f[i]++;
 			}
 			else
 			{
 				f[degn[i]]++;
 				running_sum += degn[i];
 			}
 			if(i+1<=n)
 				running_sum -= f[i+1];
 			if(i-1>=0)
 			f[i-1] += f[i];
 				
 		}
 		//cerr<<val<<" "<<ch<<endl;
 		if(ch)
 			cout<<l;
 		else
 			cout<<-1;
 	}
    return 0;
}