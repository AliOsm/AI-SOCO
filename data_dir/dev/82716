#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

#define ook order_of_key
#define fbk find_by_order
#define pb push_back
#define mp make_pair
#define intl long long
#define maxn 100005
#define ff first
#define ss second
#define bug printf ("bug\n")
#define sz(a) ((int)a.size())
#define set0(a) memset ((a), 0 , sizeof(a))
#define set1(a) memset((a),-1,sizeof (a))
#define si(a) scanf("%d" , &a)
#define sl(a) scanf("%lld" , &a)
#define sii(a,b) scanf("%d %d" , &a , &b)
#define sll(a,b) scanf("%lld %lld" , &a , &b)
#define FOR(i,a,b) for(int i = (a) ; i <= (b) ; i++)
#define IN freopen("in.txt" , "r" , stdin)
#define OUT freopen("output2.txt" , "w" , stdout)
#define whats(x) printf ("x : %d\n" , x)



using namespace std ;
//using namespace __gnu_pbds;

typedef pair <int,int> pii ;
typedef pair <intl,intl> pll ;
//typedef tree < int, null_mapped_type ,less<int>,rb_tree_tag,tree_order_statistics_node_update > ordered_set;


const int N = 1e5 + 5 ;
vector <int> G[maxn] , RG[maxn] , SCCG[maxn] ; int in[maxn] , out[maxn] ;
int vis[maxn] ;
stack <int> S ;
int SCC[maxn] ;
int k ;



void dfs (int u) {

    vis[u] = 1 ;

    for (int i = 0 ; i < G[u].size() ; i++) {
        int v = G[u][i] ;
        if (vis[v] == 0) dfs(v) ;
    }

    S.push(u) ;
    return ;
}

void dfs2 (int u) {

    SCC[u] = k ;
    vis[u] = 1 ;

    for (int i = 0 ; i < (int)RG[u].size() ; i++) {
        int v = RG[u][i] ;
        if (vis[v] == 0) dfs2(v) ;
    }

    return ;
}

int Freq[N] , hour[N] ;


int main () {

   // IN ;


    int tc , caseno = 1 ;

    tc = 1 ;

    while (tc--) {

        int n , m , h ;
        sii(n,m) ;
        si(h) ;
        for (int i = 1 ; i <= n ; i++) {
            scanf ("%d" , &hour[i]) ;
        }
        for (int i = 1 ; i <= m ; i++) {
            int c , d ; scanf ("%d %d" ,&c , &d) ;
            if ( (hour[c]+1)%h == hour[d]) {
                G[c].pb(d) ;
                RG[d].pb(c) ;
            }
            if ( ( hour[d] + 1)%h == hour[c] ) {
                G[d].pb(c) ;
                RG[c].pb(d) ;
            }
        }
        FOR (i,1,n) {
            if (vis[i] == 0) dfs(i) ;
        }

        k = 0 ;
        set0(vis) ;
        set0(SCC) ;

        while (S.size()) {
            int u = S.top() ;
            S.pop() ;
            if (vis[u] == 0) {
                k++ ;
                dfs2(u) ;
            }
        }
        set0(in) ;
        set0(out) ;
        for (int i = 1 ; i <= n ; i++) Freq[SCC[i]]++ ;
        for(int i = 1 ; i <= n ; i++) {

            for(int j = 0 ;  j < G[i].size() ; j++) {
                int u = i , v = G[i][j] ;

                u = SCC[u] , v = SCC[v] ;
                if (u != v) {
                    in[v]++ , out[u]++ ;
                }
            }
        }

        int ans = 1e7 , res = 0 ;
        for (int i = 1 ; i <= k ; i++) {
            if (out[i] == 0) {
                if (ans >= Freq[i]) {
                    ans = Freq[i] ;
                    res = i ;
                }
            }
        }

        vector <int> vv ;
        for (int i = 1 ; i <= n ; i++) {
            if (SCC[i] == res) vv.pb(i) ;
        }

            cout << ans << endl ;
            for (auto x : vv) {
                printf ("%d " , x) ;
            }
    }
    return 0 ;
}
