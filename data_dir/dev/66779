//====================================
//======================================
//
//                   Bismillahir-Rahmanir-Rahim
//
// ==========================================================================
#include <bits/stdc++.h>
#define        ll                              long long int
#define        FOR(x,y,z)                      for(int x=y;x<z;x++)
#define        pii                             pair<int,int>
#define        pll                             pair<ll,ll>
#define        CLR(a)                          memset(a,0,sizeof(a))
#define        SET(a)                          memset(a,-1,sizeof(a))
#define        N                               500010
#define        M                               1000000007
#define        pi                              acos(-1.0)
#define        ff                              first
#define        ss                              second
#define        pb                              push_back
#define        inf                              (1e9)+1000
#define        eps                             1e-9
#define        ALL(x)                          x.begin(),x.end()
using namespace std;
int dx[]={0,0,1,-1,-1,-1,1,1};
int dy[]={1,-1,0,0,-1,1,1,-1};
template < class T> inline T biton(T n,T pos){return n |((T)1<<pos);}
template < class T> inline T bitoff(T n,T pos){return n & ~((T)1<<pos);}
template < class T> inline T ison(T n,T pos){return (bool)(n & ((T)1<<pos));}
template < class T> inline T gcd(T a, T b){while(b){a%=b;swap(a,b);}return a;}
template <typename T> string NumberToString ( T Number ) { ostringstream ss; ss << Number; return ss.str(); }
inline int nxt(){int aaa;scanf("%d",&aaa);return aaa;}
inline ll lxt(){ll aaa;scanf("%lld",&aaa);return aaa;}
inline double dxt(){double aaa;scanf("%lf",&aaa);return aaa;}
template <class T> inline T bigmod(T p,T e,T m){T ret = 1;
for(; e > 0; e >>= 1){
    if(e & 1) ret = (ret * p) % m;p = (p * p) % m;
} return (T)ret;}
#ifdef sayed
     #define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template < typename Arg1 >
    void __f(const char* name, Arg1&& arg1){
        cerr << name << " is " << arg1 << std::endl;
    }
    template < typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names+1, ',');
        cerr.write(names, comma - names) << " is " << arg1 <<" | ";
        __f(comma+1, args...);
    }
#else
    #define debug(...)
#endif
///******************************************START******************************************
ll ar[N];
ll choose[N];
bool isPossible(ll zero,ll one) {
    ll zeroOne = zero*one;
    ll oneZero = 0;
    if(zeroOne==ar[1]+ar[2]) return true;
    return false;
}
void print(ll zero,ll one) {
    ll zeroOne = zero*one;
    ll oneZero = 0;
    ll LeftOne= 0;
    ll thenZero = 0;
    while(zeroOne!=ar[1]) {
        if(zeroOne-ar[1]>=zero){
            zeroOne-=zero;
            LeftOne++;
            debug(zeroOne);
        } else {
            thenZero = zero-(zeroOne-ar[1]);
            zeroOne= ar[1];
        }
    }
    for(int i = 1;i<=LeftOne;i++,one--) {
        printf("1");
    }
    for(int i  = 1;i<=thenZero;i++,zero--){
        printf("0");
        if(i==thenZero&&one) {
            printf("1"); one--;

        }
    }
    while(zero--)printf("0");
    while(one--) printf("1");
    printf("\n");
}
int main(){
    #ifdef sayed
    //freopen("out.txt","w",stdout);
    // freopen("in.txt","r",stdin);
    #endif
    //ios_base::sync_with_stdio(false);
    //cin.tie(0);
    for(ll i = 0;i<N;i++) {
        choose[i] = (i*i-i)/2;
    }
    int n= 4;
    for(int i = 0;i<n;i++) {
        ar[i] = nxt();
    }
    int l = lower_bound(choose,choose+N,ar[0])-choose;
    ll zero,one;
    if(choose[l]!=ar[0]){
        cout<<"Impossible"<<endl;
        return 0;
    } else zero = l;
    l = lower_bound(choose,choose+N,ar[3])-choose;
    if(choose[l]!=ar[3]) {
        cout<<"Impossible"<<endl;
        return 0;
    } else one = l;
    if(zero==0&&one==0) {
        for(int i = 0;i<=1;i++){
            for(int j = 0;j<=1;j++) {
                if(i==0&&j==0) continue;
                if(isPossible(i,j)){
                    print(i,j);
                    return 0;
                }
            }
       }
    } else if(zero==0) {
        for(int i = 0;i<=1;i++){
            if(isPossible(i,one)){
                print(i,one);
                return 0;
            }
        }
    } else if(one==0) {
       // debug(zero);
        for(int i = 0;i<=1;i++) {
            if(isPossible(zero,i)){
                print(zero,i);
                return 0;
            }
        }
    } else {
        if(isPossible(zero,one)) {
            print(zero,one);
            return 0;
        }
    }
    printf("Impossible\n");
    return 0;
}
