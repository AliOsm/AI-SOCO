#include<bits/stdc++.h>
#define xx first
#define yy second
#define mp make_pair
using namespace std;
const int MAXN=1e5+5;
vector<int> E[MAXN];
int c[MAXN],FA[MAXN],n;
bool book[MAXN];
int in[MAXN],out[MAXN],at[MAXN];
int cnt=0;
void dfs1(int now,int fa)
{
	FA[now]=fa;
	in[now]=++cnt;
	at[cnt]=now;
	for(int i=0;i<E[now].size();i++)
	{
		int to=E[now][i];
		if(to==fa)
			continue;
		dfs1(to,now);
	}
	out[now]=cnt;
}
int tree[MAXN<<2];
bool sam[MAXN<<2];
void push(int rt)
{
	if(sam[rt<<1]&&sam[rt<<1|1])
	{
		if(tree[rt<<1]==tree[rt<<1|1])
		{
			sam[rt]=true;
			tree[rt]=tree[rt<<1];
		}
	}
}
void build(int L,int R,int rt)
{
	int m=(L+R)/2;
	if(L==R)
	{
		tree[rt]=c[at[L]];
		sam[rt]=true;
		return;
	}
	build(L,m,rt<<1);
	build(m+1,R,rt<<1|1);
	push(rt);
}
pair<int,bool> Query(int L,int R,int l,int r,int rt)
{
	int m=(l+r)/2;
	if(L>R)
	{
		return mp(-1,true);
	}
	if(L<=l&&r<=R)
	{
		return mp(tree[rt],sam[rt]);
	}
	if(R<=m)
	{
		return Query(L,R,l,m,rt<<1);
	}
	else if(L>m)
	{
		return Query(L,R,m+1,r,rt<<1|1);
	}
	else
	{
		pair<int,bool> tl,tr;
		tl=Query(L,R,l,m,rt<<1);
		tr=Query(L,R,m+1,r,rt<<1|1);
		if(tl.yy&&tr.yy&&tl.xx==tr.xx)
			return mp(tl.xx,true);
		else
			return mp(0,false);
	}
}
pair<int,bool> P(pair<int,bool> tl,pair<int,bool> tr)
{
	if(tl.yy&&tr.yy&&(tl.xx==tr.xx||(tl.xx==-1||tr.xx==-1)))
		return mp(tl.xx==-1?tr.xx:tl.xx,true);
	else
		return mp(0,false);
}
bool judge(int now)
{
	pair<int,bool> ret=P(Query(1,in[now]-1,1,n,1),Query(out[now]+1,n,1,n,1));
	bool r=ret.yy;
	for(int i=0;i<E[now].size();i++)
	{
		int to=E[now][i];
		if(to==FA[now])
			continue;
		r&=Query(in[to],out[to],1,n,1).yy;
	}
	return r;
}
int main()
{
	//freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	int ans;
	scanf("%d",&n);
	for(int i=1;i<n;i++)
	{
		int u,v;
		scanf("%d%d",&u,&v);
		E[u].push_back(v);
		E[v].push_back(u);
	}
	for(int i=1;i<=n;i++)
	{
		scanf("%d",&c[i]);
	}
	dfs1(1,0);
	build(1,n,1);
	bool flag=false;
	for(int i=1;i<=n;i++)
	{
		if(judge(i))
		{
			flag=true;
			ans=i;
			break;
		}
	}
	printf("%s\n",flag?"YES":"NO");
	if(flag)
		printf("%d\n",ans);
	return 0;
}
