#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using PII = pair<int, int>;
using VI = vector<int>;

struct DSU {
  vector<int> par, sz, val;
  vector<vector<int>> comp[2];
  int ans;

  DSU(int n) {
    par.resize(n);
    sz.resize(n, 1);
    val.resize(n, 0);
    comp[0].assign(n, VI());
    comp[1].assign(n, VI());
    for (int i = 0; i < n; i++) {
      par[i] = i;
      comp[0][i].push_back(i);
    }
    ans = 0;
  }

  int find(int u) {
    if (u == par[u]) return u;
    return par[u] = find(par[u]);
  }

  bool merge(int u, int v, int w) {
    w ^= val[u] ^ val[v];
    u = find(u), v = find(v);
    if (u == v) return w == 0;

    if (sz[u] > sz[v]) swap(u, v);

    ans -= min(comp[0][u].size(), comp[1][u].size());
    ans -= min(comp[0][v].size(), comp[1][v].size());

    par[u] = v;
    sz[v] += sz[u];
    for (int x: {0, 1}) {
      comp[x][v].insert(comp[x][v].end(), comp[x ^ w][u].begin(), comp[x ^ w][u].end());
      for (int uu: comp[x ^ w][u]) {
        val[uu] = x;
      }
    }

    ans += min(comp[0][v].size(), comp[1][v].size());

    return true;
  }
};

int main() {
#ifdef LOCAL_EXEC
//	freopen("sample.in", "r", stdin);
//	freopen("sample.out", "w", stdout);
#else
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#endif

  int n, k; cin >> n >> k;

  VI st(n);
  vector<VI> sw(n, VI());

  [&]() {
    string s; cin >> s;
    for (int i = 0; i < n; i++) {
      st[i] = s[i] - '0';
    }
    for (int i = 0; i < k; i++) {
      int c; cin >> c;
      while (c--) {
        int x; cin >> x; x--;
        sw[x].push_back(i);
      }
    }
  }();

  DSU dsu(2*k + 1);
  for (int i = k; i < 2*k; i++) {
    dsu.merge(i, i + 1, 0);
  }
  bool invalid = false;
  for (int x = 0; x < n; x++) {
    if (sw[x].size() == 2) {
      invalid = invalid || !dsu.merge(sw[x][0], sw[x][1], st[x] ^ 1);
    } else if (sw[x].size() == 1) {
      invalid = invalid || !dsu.merge(sw[x][0], k, st[x] ^ 1);
    } else {
      if (st[x] == 0) invalid = true;
    }
    if (invalid) {
      cout << "-1\n";
      continue;
    }
    cout << dsu.ans << '\n';
  }

  return 0;
}
