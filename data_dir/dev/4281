#pragma GCC optimize ("Ofast")
#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define ll long long
#define ld long double
#define all(a) a.begin(),a.end()
#define endl '\n'
#define ull unsigned long long
#define ios ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define iter vector<int>::iterator
#define iter1 vector<int>::iterator
#define int long long
using namespace std;
using namespace __gnu_pbds;

template<class T>
using ordered_set=tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

template<class T>
using ordered_multiset=tree<T,null_type,less_equal<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rnd1(chrono::steady_clock::now().time_since_epoch().count());

//find_by_order
//order_of_key

const int N=3e5+7;
const int inf=1e18+1e9;
const int mod=1e9+7;
const ld eps=1e-9;

int cnt[100];
map<int,int>num;

main ()
{
    ios;
    int cur=1;
    for (int i=0;i<=60;++i){
        num[cur]=i;
        cur*=2;
    }
    int t;
    cin>>t;
    for (int tt=1;tt<=t;++tt){
        for (int j=0;j<=70;++j){
            cnt[j]=0;
        }
        int n,m;
        cin>>n>>m;
        for (int j=1;j<=m;++j){
            int x;
            cin>>x;
            cnt[num[x]]++;
        }
        int kol=0;
        bool cc=true;
        for (int i=0;i<=60;++i){
            if ((n&(1LL<<i))>0){
                if (cnt[i]>0){
                    --cnt[i];
                }
                else {
                    int best=-1;
                    for (int j=i+1;j<=60;++j){
                        if (cnt[j]>0){
                            best=j;
                            break;
                        }
                    }
                    if (best==-1){
                        cc=false;
                        break;
                    }
                    kol+=best-i;
                    for (int j=i;j<best;++j){
                        cnt[j]++;
                    }
                    cnt[best]--;
                }
            }
            cnt[i+1]+=cnt[i]/2;
        }
        if (cc){
            cout<<kol<<endl;
        }
        else {
            cout<<-1<<endl;
        }
    }
}
