#include <bits/stdc++.h>

#define all(x) (x).begin(), (x).end()

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

typedef long long ll;
typedef pair<int, int> ii;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 1 << 17;
const int K = 6;

const int mod = 1e9 + 7;

inline int add(int x,int y){
    return (x + y >= mod)? x + y - mod : x + y;
}

inline int sub(int x,int y){
    return (x - y < 0)? x - y + mod : x - y;
}

inline int mul(int x,int y){
    return ll(x) * y % mod;
}

int c[K][K];

int csum[N << 1][K];
int as[N << 1];
int s[N << 1][K];

inline void upd(int x,int v){
    as[x] = v;
    for(int i = 0; i < K; i++){
        s[x][i] = mul(v, csum[x][i]);
    }
}

inline void push(int x){
    if(as[x] != -1){
        upd(x + x, as[x]);
        upd(x + x + 1, as[x]);
        as[x] = -1;
    }
}

inline void relax(int x){
    for(int i = 0; i < K; i++)
        s[x][i] = add(s[x + x][i], s[x + x + 1][i]);
}

void build(int x,int l,int r){
    as[x] = -1;
    if(l == r){
        int v = 1;
        for(int i = 0; i < K; i++){
            csum[x][i] = v;
            v = mul(v, l);
        }
    }else{
        int m = (l + r) >> 1;
        build(x + x, l, m);
        build(x + x + 1, m + 1, r);
        for(int i = 0; i < K; i++)
            csum[x][i] = add(csum[x + x][i], csum[x + x + 1][i]);
    }
}

void tset(int x,int l,int r,int x1,int x2,int v){
    if(l > x2 || r < x1)
        return;
    if(l >= x1 && r <= x2){
        upd(x, v);
        return;
    }
    push(x);
    int m = (l + r) >> 1;
    tset(x + x, l, m, x1, x2, v);
    tset(x + x + 1, m + 1, r, x1, x2, v);
    relax(x);
}

void tget(int x,int l,int r,int x1,int x2,int out[K]){
    if(l > x2 || r < x1)
        return;
    if(l >= x1 && r <= x2){
        for(int i = 0; i < K; i++)
            out[i] = add(out[i], s[x][i]);
        return;
    }
    push(x);
    int m = (l + r) >> 1;
    tget(x + x, l, m, x1, x2, out);
    tget(x + x + 1, m + 1, r, x1, x2, out);
}

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    c[0][0] = 1;
    for(int i = 1; i < K; i++){
        c[i][0] = 1;
        for(int j = 1; j <= i; j++){
            c[i][j] = add(c[i - 1][j], c[i - 1][j - 1]);
        }
    }

    int n = read();
    int m = read();

    build(1, 0, N - 1);

    for(int i = 1; i <= n; i++){
        int x = read();
        tset(1, 0, N - 1, i, i, x);
    }

    for(int qq = 0; qq < m; qq++){
        char op;
        scanf(" %c", &op);
        int l = read(), r = read(), k = read();
        if(op == '='){
            tset(1, 0, N - 1, l, r, k);
        }else{
            static int s[K];
            memset(s, 0, sizeof s);
            tget(1, 0, N - 1, l, r, s);
            int vl = 1;
            int res = 0;
            for(int a = k; a >= 0; a--){
                int b = k - a;
                if(b & 1){
                    res = sub(res, mul(c[k][a], mul(s[a], vl)));
                }else{
                    res = add(res, mul(c[k][a], mul(s[a], vl)));
                }
                vl = mul(vl, l - 1);
            }
            printf("%d\n", res);
        }
    }

    return 0;
}
