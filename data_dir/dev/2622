/*
author: madhav_1999 aka orthodoxparadox
31-Jan-2019
23:06:17
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define dbl long double
#define int ll
#define ll long long
#define pii pair<int, int>
#define fup(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define fnu for(ll i = 0; i < n; i++)
#define rev(Y) reverse(all(Y))
#define oiint ostream_iterator<int>(cout, " ") 
#define pb emplace_back
#define mp make_pair
#define ff first
#define ss second
#define endl '\n'
#define all(a) a.begin(), a.end()
#define initialise(a, x) memset(a, x, sizeof(a))
#define onlyunique(v) v.erase(unique(all(v)), v.end()); //only for sorted vector
#define inf 2e18
#define infi 1e9 + 10
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize ("O3")
#pragma GCC optimize ("O2")
#pragma GCC optimize("Ofast")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#ifdef __APPLE__
#define dbg(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){cerr << name << " : " << arg1 << endl;}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << "  ";
	__f(comma + 1, args...);}
#else
#define dbg(...)
#endif
template <typename X> ostream& operator << (ostream& x,const vector<X>& v){for(int i=0;i<v.size();++i) x<<v[i]<<" ";return x;} 
template <typename X> ostream& operator << (ostream& x,const set<X>& v){for(auto it:v) x<<it<<" ";return x;} 
template <typename X, typename Y> ostream& operator << (ostream& x, const pair<X,Y>& v) {x<<v.ff<<" "<<v.ss;return x;} 
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
struct pair_hash {inline std::size_t operator()(const std::pair<int, int> & v) const {return v.first*31+v.second;}};
const int mod = 1e9 + 7;

int takemod(int a){return ((a%mod)+mod)%mod;}

int fast_exp(int base, int expo) {
	int res=1;
	while(expo>0) {
		if(expo&1) res=(res*base)%mod;
		base=(base*base)%mod;
		expo>>=1;}
	return res;}

int modinv(int a){return takemod(fast_exp(takemod(a), mod-2));}

int n, m, k;
const int N = 1e5 + 10;
const int M = 203;
int dp[N][M];
int s[N], t[N], d[N], val[N];
int evt[N];
vector<int> inc[N], otg[N];

bool mysort(const int &a, const int &b)
{
	if(val[a] == val[b])
	{
		return d[a] > d[b];
	}
	return val[a] > val[b];
}


int solve(int t, int m)
{
	if(t > n) return 0;
	if(dp[t][m] != -1) return dp[t][m];
	int &cur = dp[t][m];
	cur = m ? solve(t + 1, m - 1) : inf;
	if(evt[t])
	{
		cur = min(cur, val[evt[t]] + solve(d[evt[t]] + 1, m));
		dbg(d[evt[t]], cur);
	}
	else
	{
		cur = min(cur, solve(t + 1, m));
	}
	return cur;
}

signed main(){
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	#ifdef __APPLE__
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("error.txt", "w", stderr);
	#endif
	clock_t t1, t2;
	t1 = clock();

	cin >> n >> m >> k;
	for(int i = 1; i <= k; i++)
	{
		cin >> s[i] >> t[i] >> d[i] >> val[i];
		inc[s[i]].pb(i);
		otg[t[i] + 1].pb(i);
	}
	multiset<int, decltype(&mysort)> st(mysort);
	for(int i = 1; i <= n; i++)
	{
		for(int &j : inc[i])
		{
			st.insert(j);
			dbg(i, j, 1);
		}
		for(int &j : otg[i])
		{
			st.erase(st.find(j));
			dbg(i, j, 2);
		}
		dbg(st.size());
		if(!st.empty()) 
		{
			dbg(i, *st.begin());
			evt[i] = *st.begin();
		}
	}
	for(int i = 1; i <= n; i++)
	{
		dbg(i, evt[i]);
	}
	initialise(dp, -1);
	cout << solve(1, m);

	t2 = clock(); cerr << "time taken: " << (t2-t1)/(dbl)CLOCKS_PER_SEC;
	return 0;
}