#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

const int N = 1000 + 10;
int dp[N];
char s[N];
int C[N][N];

int main() {
  for (int i = 0; i < N; ++i) {
    C[i][0] = C[i][i] = 1;
    for (int j = 1; j < i; ++j) {
      C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % MOD;
    }
  }
  dp[1] = 0;
  for (int i = 2; i < N; ++i) {
    dp[i] = 1 + dp[__builtin_popcount(i)];
  }
  int k, n;
  scanf("%s%d", s, &k);
  if (k == 0) {
    puts("1");
    return 0;
  }
  n = strlen(s);
  --k;
  int ret = 0, cnt = 0;
  for (int i = 0; i < n; ++i) {
    if (s[i] == '1') {
      for (int j = 0; j + cnt <= n; ++j) {
        if (j + cnt > 0 && dp[j + cnt] == k) {
          // trace(n - i - 1, j);
          ret = (ret + C[n - i - 1][j]) % MOD;
        }
      }
      ++cnt;
    }
  }
  if (dp[cnt] == k) ret = (ret + 1) % MOD;
  if (k == 0) {
    ret = (ret + MOD - 1) % MOD;
  }
  printf("%d\n", ret);
  return 0;
}
