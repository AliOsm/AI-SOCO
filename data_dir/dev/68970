
#include<bits/stdc++.h>
using namespace std;

#define ll             long long
#define gcd(a,b)       __gcd(a,b)
#define lcm(a,b)       a*(b/gcd(a,b))
#define pii            pair<int, int>
#define pll            pair<ll, ll>
#define pil            pair<int, ll>
#define pli            pair<ll, int>
#define vi             vector<int>
#define vl             vector<ll>
#define vii            vector<pii>
#define vll            vector<pll>
#define vil            vector<pil>
#define vli            vector<pli>
#define mii            map<int, int>
#define mll            map<ll, ll>
#define pb             push_back
#define ppb            pop_back
#define mp             make_pair
#define mt             make_tuple
#define lb             lower_bound
#define ub             upper_bound
#define ff             first
#define ss             second
#define all(v)         v.begin(),v.end()
#define fill(a,b)      memset(a,b,sizeof a)
#define smax(a, b)     a=max(a, b)
#define smin(a, b)     a=min(a, b)
#define sqr(x)         x*x
#define cube(x)        x*x*x
#define asort(a, n)    sort(a+1, a+n+1)
#define FOR(i, l, r)   for(int i=l;i<=r;i++)
#define ROF(i, l, r)   for(int i=r;i>=l;i--)
#define endl           '\n'

int in() {
    int n;
    scanf("%d",&n);
    return n;
}

ll Lin() {
    ll n;
    scanf("%lld",&n);
    return n;
}

double Din() {
    double n;
    scanf("%lf",&n);
    return n;
}

const double gama = 0.57721566490;
const double eps = 0.00000001;
const ll inf = 1e17;
const ll mod = 1e9 + 7;
const int N = 2e6 + 5;

int a[N], tree1[N], tree2[N];
vii p;

void update(int tree[], int x, int n, int val) {
    while(x<=n) {
        tree[x]+=val;
        x+=(x & -x);
    }
}

int query(int tree[], int x) {
    int sum=0;
    while(x>0) {
        sum+=tree[x];
        x-=(x & -x);
    }
    return sum;
}

int main() {
    int n=in();
    for(int i=1; i<=n; i++) {
        a[i]=in();
        p.pb(mp(a[i], i));
    }
    sort(all(p));
    int cur=1;
    for(int i=0; i<n; i++) {
        if(!i)
            a[p[i].ss]=cur;
        else {
            if(p[i].ff==p[i-1].ff)
                a[p[i].ss]=cur;
            else
                a[p[i].ss]=++cur;
        }
    }
    for(int i=1; i<=n; i++) {
        update(tree2, a[i], n, 1);
    }
    ll ans=0LL;
    for(int i=1; i<=n; i++) {
        int x=query(tree1, n)-query(tree1, a[i]);
        update(tree2, a[i], n, -1);
        int y=query(tree2, a[i]-1);
        ans+=(ll)x*(ll)y;
        update(tree1, a[i], n, 1);
    }
    cout<<ans<<endl;
    return 0;
}




