#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define FILE "series"
#define ld long double
#define endl '\n'
#define pii pair <int, int>
//#define int long long

//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;
using namespace __gnu_pbds;

typedef tree <pii,null_type,less<pii>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const int N = 1e5 + 5;
const ll mod = 998244353;
const ll mod1 = 1e9 + 9;
const int rx[8] = {1, -1, 0, 0, 1, 1, -1, -1};
const int ry[8] = {0, 0, 1, -1, 1, -1, 1, -1};
const ld pi = acos(-1.0);
const ll kek = 227;
const int B = (int)sqrt(N);

int dp1[N];
int dp2[N];
int cnt[N];
int a[N];

struct segtree{
    int n;
    vector<int> t;

    void update(int p, int value) {
        p += n;
        for (t[p] = max(t[p], value); p > 1; p >>= 1) t[p>>1] = max(t[p], t[p^1]);
    }

    int query(int l, int r) {
        int res = 0;
        for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
            if (l&1) res = max(res, t[l++]);
            if (r&1) res = max(t[--r], res);
        }
        return res;
    }
    segtree(int n, int def = 0):n(n),t(n << 1, def) {}
};

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    srand(time(0));
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
//       freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#endif // LOCAL
    int n;
    cin >> n;
    for (int i = 0; i < n; i++) cin >> a[i];
    segtree T(N);
    for (int i = 0; i < n; i++){
       dp1[i] = T.query(0, a[i]) + 1;
       T.update(a[i], dp1[i]);
    }
    segtree T1(N);
    for (int i = n - 1; i >= 0; i--){
         dp2[i] = T1.query(a[i] + 1, N) + 1;
         T1.update(a[i], dp2[i]);
    }
    int best = 0;
    for (int i = 0; i < n; i++) best = max(best, dp1[i] + dp2[i]);
    for (int i = 0; i < n; i++){
        if (dp1[i] + dp2[i] == best){
           cnt[dp1[i]]++;
        }
    }
    for (int i = 0; i < n; i++){
        if (dp1[i] + dp2[i] == best){
           if (cnt[dp1[i]] == 1) cout << 3;
           else cout << 2;
        } else cout << 1;
    }
    return 0;
}
