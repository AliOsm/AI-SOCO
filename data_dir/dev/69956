#pragma GCC target("avx2")
#pragma GCC optimize("O3")
 
#include <x86intrin.h>
#include <bits/stdc++.h>   
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
using namespace __gnu_pbds;
using namespace std;

template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
     
#define F first
#define S second           
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair                                     
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)3e5 + 123;
const ll inf = (ll)1e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;                  
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

int n, m, cnt[N];
vector <int> v;

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                     

inline void Solve () {
   cin >> n >> m;
   int a[n + 1][m + 1];
   int ans = 0;
   for (int i = 1; i <= n; i ++)
      for (int j = 1; j <= m; j ++)
         cin >> a[i][j];
   set <int> s;
   for (int j = 1; j <= m; j ++) {
      s.clear ();
      v.clear ();
      for (int i = 1; i <= n; i ++) s.in ((i - 1) * m + j);
      int mx = 0;
      for (int i = 1; i <= n; i ++) {
         if (s.count (a[i][j])) {
            int I = (a[i][j] - j) / m + 1;    
            if (I <= i) {
               cnt[i - I] ++;
               v.pb (i - I);
            }
            else {
               cnt[i - I + n] ++;
               v.pb (i - I + n);
            }
         }
      }
      sort (all (v));
      v.resize (unique (all (v)) - v.begin ());
      int mn = n;
      for (auto it : v) mn = min (mn, it + n - cnt[it]), cnt[it] = 0;
      ans += mn;
   }
   cout << ans;
}

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
   //cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
