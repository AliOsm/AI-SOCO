#include <bits/stdc++.h>

using namespace std;
using ll = long long;

int const N = 500 * 1000 + 16;
int const M = 1000 * 1000 * 1000 + 7;

int n, b, k, x;

struct mat {
  vector<vector<int>> a;
  mat(int n, int m) {
    a.assign(n, vector<int>(m));
  }

  mat operator*(const mat& o) {
    int n = a.size();
    int m = o.a[0].size();
    int c = o.a.size();

    mat ans(n, m);
    for(int i = 0; i < n; ++i)
      for(int j = 0; j < m; ++j)        
        for(int k = 0; k < c; ++k)
          ans.a[i][j] = (ans.a[i][j] + 1ll * a[i][k] * o.a[k][j] % M) % M;

    return ans;
  }
};

mat bp(mat x, int e) {
  mat ans(::x, ::x);
  for(int i = 0; i < ::x; ++i)
    ans.a[i][i] = 1;
  for(; e; e >>= 1) {
    if(e&1) ans = ans*x;
    x = x*x;
  }
  return ans;
}

int main() {
  cin.tie(0);
  cin.sync_with_stdio(0);

  cin >> n >> b >> k >> x;
  int c[x] = {};
  int d[10] = {};
  for(int i = 0; i < n; ++i) {
    int digit;
    cin >> digit;
    c[digit%x]++;
    d[digit]++;
  }

  mat m(x, x);
  for(int i = 0; i < x; ++i) {
    for(int j = 0; j < x; ++j) {
      int z = (i*10 + j) % x;
      m.a[z][i] += c[j];
    }
  }
  m = bp(m, b-1);
  int ans = 0;
  for(int i = 0; i < x; ++i)
    ans = (ans + 1ll*m.a[k][i]*c[i]%M) % M;
  cout << ans << endl;
}