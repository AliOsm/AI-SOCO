//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0); }
inline int safe_mul(const int x, const int y) __attribute__ ((warn_unused_result));


inline int get(int li, int ri, int lj, int rj, const vector<vector<int>>& sums) {
    return sums[ri][rj] - sums[ri][lj] - sums[li][rj] + sums[li][lj];
}

int main() {
//    freopen("in.txt","r", stdin);
//    cout << fixed << setprecision(15);
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);


    int n,m;
    cin >> n >> m;
    vector<string> fi(n);
    for (auto& s : fi)
        cin >> s;

    vector<vector<int>> sums(n + 1, vector<int>(m + 1, 0));
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < m; ++j)
            sums[i + 1][j + 1] = sums[i + 1][j] + sums[i][j + 1] - sums[i][j] + (fi[i][j] == 'X');

    int l = -1;
    int r = 10000;
    while (r-l > 1) {
        int realmid = (l+r) >> 1;
        int mid = 2 * realmid + 1;
        vector<vector<int>> tmp(n + 1, vector<int>(m + 1, 0));
        for (int i = 0; i + mid <= n; ++i)
            for (int j = 0; j + mid <= m; ++j) {
                if (get(i, i + mid, j, j + mid, sums) == mid * mid) {
                    tmp[i][j] += 1;
                    tmp[i+mid][j] += -1;
                }
            }

        for (int j = 0; j <= m; ++j)
        for (int i = 0; i < n; ++i) {
            tmp[i+1][j] += tmp[i][j];
        }

        for (int i = 0; i <= n; ++i)
        for (int j = m; j >= mid; --j) {
            tmp[i][j] -= tmp[i][j - mid];
        }

        for (int i = 0; i <= n; ++i)
            for (int j = 0; j < m; ++j )
                tmp[i][j + 1] += tmp[i][j];

        bool good = true;
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < m; ++j)
                good &= (fi[i][j] == 'X') == (tmp[i][j] > 0);
        if (good)
            l = realmid;
        else
            r = realmid;
    }
    cout << l << endl;
    vector<string> ans(n, string(m, '.'));
    int side = 2 * l + 1;
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < m; ++j) {
            if (i + side <= n && j + side <= m && get(i, i + side, j, j + side, sums) == side * side) {
                ans[i + l][j + l] = 'X';
            }
        }
    for (int i = 0; i < n; ++i)
        cout << ans[i] << '\n';
}
