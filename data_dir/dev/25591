#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
//#define mod 1000000007LL
#define IN freopen("C.in","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 1000000000
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 2

using namespace __gnu_pbds;
using namespace std ;

typedef pair<int, int> pii ;
typedef tree< pii, null_type, less<pii>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define maxn 500005

/*
     *os.find_by_order(k) -> returns the k'th smallest element (indexing starts from 0)
      os.order_of_key(v)  -> returns how many elements are strictly smaller than v
*/

string s ;
int vowel[505] ;
vector <int> ans ;

map< pair<int,int> ,int> M , Map[maxn] ;

i64 p[maxn] ;

i64 gcd(i64 a, i64 b)
{
    if( b==0 ) return a ;
    return gcd(b,a%b) ;
}

i64 calc( int n , i64 x , i64 a , i64 y, i64 b )
{
    i64 c1 = 0 , c2 = 0 , c3 = 0 ;

    i64 lcm = (a/gcd(a,b))*b ;

    c3 = (n/lcm) ;
    c1 = n/a - c3 ;
    c2 = n/b - c3 ;

    i64 ans = 0 ;

    for(int i=1 ; i<=c3 ; i++) ans += p[i]*(x+y) ;
    for(int i=c3+1 ; i<=c1+c3 ; i++) ans += p[i]*x ;
    for(int i=1+c3+c1; i<=c3+c1+c2 ; i++) ans += p[i]*y ;

    return ans ;
}

int main()
{
//    ios_base::sync_with_stdio(false);
  //  cin.tie(NULL);

    int tc , t=1 ;

    scanf("%d",&tc) ;

    while( t++ <= tc )
    {
        int n ;
        i64 x , a ;
        i64 y , b ;
        i64 k ;
        scanf("%d",&n) ;

        for(int i=1 ; i<=n ; i++) scanf("%lld",&p[i]) ;
        for(int i=1 ; i<=n ; i++) p[i]/=100 ;

        scanf("%lld %lld %lld %lld %lld",&x,&a,&y,&b,&k) ;

        sort( p+1 , p+n+1 ) ;
        reverse(p+1,p+n+1) ;

        if( x < y )
        {
            swap(x,y) ;
            swap(a,b) ;
        }

        if( calc(n,x,a,y,b) < k )
        {
         //   printf("----------%lld\n" , calc(n,x,a,y,b) ) ;
            printf("-1\n") ;
            continue ;
        }
        int lo = 1 , hi =  n ;

        while( lo < hi )
        {
            int mid = (lo+hi)/2 ;
            if( calc(mid,x,a,y,b) < k ) lo = mid+1 ;
            else hi = mid ;
        }

        printf("%d\n",lo) ;
    }

    return 0 ;
}
