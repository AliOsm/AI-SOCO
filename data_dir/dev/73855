#include <iostream>
#include <cmath>
#include <vector>
#include <map>
#include <set>
using namespace std;

const int MAXN = 100 * 1000 + 10;
int arr[MAXN];
vector <pair <int, int> > vec;
map <int, int> m;
set <int> s;

int main()
{
	int n, k;
	cin >> n >> k;

	for(int i = 0; i < n; i ++)
		cin>> arr[i];

	int ans = 0;
	int i = 0, j = 0;
	while(i < n && j < n)
	{
		j = max(i, j);
		while(j < n && (s.size() == 0 || (abs(arr[j] - *s.rbegin()) <= k && abs(arr[j] - *s.begin()) <= k)))
		{
			s.insert(arr[j]);
			m[arr[j]] ++;
			j ++;
		}

		ans = max(ans, j - i);
		if(m[arr[i]] == 1)
			s.erase(s.find(arr[i]));
		m[arr[i]] --;
		i ++;
	}

	i = 0;
	j = 0;
	s.clear();
	m.clear();
	while(i < n && j < n)
	{
		j = max(i, j);
		while(j < n && (s.size() == 0 || (abs(arr[j] - *s.rbegin()) <= k && abs(arr[j] - *s.begin()) <= k)))
		{
			s.insert(arr[j]);
			m[arr[j]] ++;
			j ++;
		}
//		cerr<< i << " " << j << ": " << s.size() << " " << *s.begin() << " " << *s.rbegin() << endl;



		if(j - i == ans)
			vec.push_back(make_pair(i + 1, j));

		if(m[arr[i]] == 1)
			s.erase(s.find(arr[i]));
		m[arr[i]] --;
		i ++;
	}

	cout<< ans << " " << vec.size() << endl;
	for(int i = 0; i < vec.size(); i ++)
		cout<< vec[i].first << " " << vec[i].second << endl;
}

/*
#include <iostream>
#include <cmath>
#include <vector>
using namespace std;

const int MAXN = 100 * 1000 + 10;
int arr[MAXN];
vector <pair <int, int> > vec;

int main()
{
	int n, k;
	cin>> n >> k;

	for(int i = 0; i < n; i ++)
		cin>> arr[i];

	int ans = 0;
	int i = 0, j = 0, mn2 = INT_MAX, mx2 = INT_MIN;
	while(i < n && j < n)
	{
		j = max(i, j);
		int mn = min(arr[i], mn2);
		int mx = max(arr[i], mx2);
		mn2 = INT_MAX;
		mx2 = INT_MIN;
		while(j < n && abs(arr[j] - mn) <= k && abs(arr[j] - mx) <= k)
		{
			mn = min(mn, arr[j]);
			mx = max(mx, arr[j]);
			if(j != i)
			{
				mn2 = min(mn2, arr[j]);
				mx2 = max(mx2, arr[j]);
			}
			j ++;
		}
//		cerr<< i << " " << j << ": " << mn << " " << mx << " " << mn2 << " " << mx2 << endl;
		ans = max(ans, j - i);
		i ++;
	}

	i = 0;
	j = 0;
	mn2 = INT_MAX;
	mx2 = INT_MIN;
	while(i < n && j < n)
	{
		j = max(i, j);
		int mn = min(arr[i], mn2);
		int mx = max(arr[i], mx2);
		mn2 = INT_MAX;
		mx2 = INT_MIN;
		while(j < n && abs(arr[j] - mn) <= k && abs(arr[j] - mx) <= k)
		{
			mn = min(mn, arr[j]);
			mx = max(mx, arr[j]);
			if(j != i)
			{
				mn2 = min(mn2, arr[j]);
				mx2 = max(mx2, arr[j]);
			}
			j ++;
		}
		if(ans == j - i)
			vec.push_back(make_pair(i + 1, j));
		i ++;
	}


	cout<< ans << " " << vec.size() << endl;
	for(int i = 0; i < vec.size(); i ++)
		cout<< vec[i].first << " " << vec[i].second << endl;
}
*/