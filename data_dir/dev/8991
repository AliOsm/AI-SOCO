#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define rep(i, a, b) for(int i=(a); i<(b); i++)
#define repi(i, a, b) for(int i=(a); i>(b); i--)
#define db(x) (cerr << #x << ": " << (x) << '\n')
#define sync ios_base::sync_with_stdio(false), cin.tie(NULL)
#define tests(t) int t; cin >> t; while(t--)
#define iceil(n, x) (((n) + (x) - 1) / (x))
#define ll long long
#define gcd __gcd
#define pb push_back
#define pf push_front
#define pob pop_back
#define pof pop_front
#define sz size()
#define all(v) (v).begin(), (v).end()
#define uni(v) sort(all(v)); (v).erase(unique(all(v)), (v).end());
#define pii pair<int, int>
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vi>
#define fi first
#define se second
#define umap unordered_map
#define uset unordered_set
#define pqueue priority_queue
#define si(a) scanf("%d", &a)
#define sll(a) scanf("%lld", &a)
#define bitcount(x) __builtin_popcount(x)
#define cps CLOCKS_PER_SEC
#define PI acos(-1.0)
#define EPS 1e-9
#define mod 1000000007
#define MOD 1000000007
#define N 1000005
using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

template<typename T>
using minpq = priority_queue<T, vector<T>, greater<T>>;

template<typename T>
using maxpq = priority_queue<T>;

//All indexing is 0-based
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update> ordered_set;
//methods: find_by_order(k); & order_of_key(k);
//To make it an ordered_multiset, use pairs of (value, time_of_insertion)
//to distinguish values which are similar.

template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;
//ordered_map<int, int> my_map;


//Returns no. of values x for which ceil(n / x) == y (y must be > 1).
inline ll CC(ll n, ll y) { return iceil(n, y-1) - iceil(n, y); }

//Returns no. of values x for which floor(n / x) == y
inline ll FF(ll n, ll y) { return n / y - n / (y+1); }

//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c; }
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c; }
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p; }

// #define int ll
// #define trace(...) 42

int n;
int a[N];
pii st[N << 2]; //{min. idx, # infs}
const int inf = 1e9;

//Merge operation to merge the value of 2 nodes
//to produce the value at the new node
inline pii op(pii a, pii b) {
    pii c;
    c.fi = ::a[a.fi] < ::a[b.fi] ? a.fi : b.fi;
    c.se = a.se + b.se;
    return c;
}

//Call with build(1, 1, n)
//Construct the tree rooted at the node no. i
//The node corresponds to the range [l, r]
void build(int i, int l, int r)
{
    int m = (l + r) >> 1;
    
    if(l == r){
        st[i].fi = l;
        st[i].se = a[l] == inf;
        return ; 
    }
    
    //Recursively build the left and the right child
    int lc, rc;
    lc = i << 1;
    rc = (i << 1) | 1;
    
    build(lc, l, m);
    build(rc, m+1, r);
    
    //Compute the value at the current node
    st[i] = op(st[lc], st[rc]);
}

void update(int x, int val, int i, int l, int r)
{
    if(l == r){
        st[i].se = a[l] == inf;
        return;
    }
    
    int m = (l + r) >> 1;
    int lc = i << 1, rc = (i << 1) | 1;
    
    //If x lies in the left half, recursively perform the update on the left half
    if(x <= m)
        update(x, val, lc, l, m);
    //Otherwise, perform the update on the right half
    else
        update(x, val, rc, m+1, r);
    //Compute the new value at the node
    st[i] = op(st[lc], st[rc]);
}

pii query(int ql, int qr, int i, int l, int r)
{
    //Total overlap
    if(ql <= l && qr >= r)
        return st[i];
    
    //No overlap
    //if(ql > r || qr < l)
    //  return 0; //0 is specific for None as the range sum query
                  //For min, it might be inf, and for max, -inf
    
    int m = (l + r) >> 1;
    int lc = i << 1, rc = (i << 1) | 1;

    //Query range doesn't lie in the right half.
    if(qr <= m)
        return query(ql, qr, lc, l, m);

    //Query range doesn't lie in the left half.
    if(ql > m)
        return query(ql, qr, rc, m+1, r);
    
    //Recursively compute the queries over both the halves
    //and merge the results from them
    return op(query(ql, qr, lc, l, m), query(ql, qr, rc, m+1, r));
}

//Print the first num_nodes nodes of the st
/*void print_tree(int num_nodes) {
    
    for(int i=1; i<=num_nodes; i++) {
        cerr << i << ' ' << st[i] << '\n';
    }
}*/

int k, b[N];
bool vis[N];

ll solve(int l, int r) {
    // trace(l, r);
    if(l > r) return 0;
    int mni, ninfs;
    tie(mni, ninfs) = query(l, r, 1, 0, n-1);
    int mn = a[mni];
    int len = (r - l + 1) - ninfs;
    if(!len) return 0;
    ll ans = 0;

    if(!vis[mn]) {
        a[mni] = inf;
        update(mni, inf, 1, 0, n-1);
        return len + solve(l, r);
    }

    else {
        return solve(l, mni-1) + solve(mni+1, r);
    }
}

main()
{   
    #ifndef ONLINE_JUDGE
        freopen("/home/tarun/Desktop/input.txt", "r", stdin);
     // freopen("/home/tarun/Desktop/output.txt", "w", stdout);
    #endif
    sync;
    clock_t 
    clk = clock();
    cerr << "I will return...\n";

    cin >> n >> k;
    rep(i, 0, n) {
        cin >> a[i]; --a[i];
    }

    build(1, 0, n-1);

    rep(i, 0, k) {
        cin >> b[i];
        --b[i]; vis[b[i]] = 1;
    }

    cout << solve(0, n-1) << '\n';

    cerr << "...don't you ever hang your head.\n";
    cerr << "Time (in ms): " << double(clock() - clk) * 1000.0 / cps << '\n';
}

//Compile using:
//g++ -o filename.exe --std=c++11 filename.cpp
//Use -D CP for defining a macro CP in the local environment





