#define Point pair <int, int>
#define x first
#define y second
#include <bits/stdc++.h>
using namespace std;

inline bool ok(Point a, Point b, Point c);

vector <Point> mn, mx, v;
vector <Point> hull;

int main()
{
    int n, m, x, y;

    scanf("%d%d%d%d", &n, &m, &x, &y);

    mx.resize(n), mn.resize(m);

    for (int i(0); i < n; i++)
        scanf("%d%d", &mx[i].x, &mx[i].y);
    for (int i(0); i < m; i++)
        scanf("%d%d", &mn[i].x, &mn[i].y);

    v = mx;
    copy(mn.begin(), mn.end(), back_inserter(v));

    int hmax(0), lmax(0);
    for (auto i : v)
        hmax = max(hmax, i.x), lmax = max(lmax, i.y);

    v.push_back({ hmax, -1 });
    v.push_back({ -1, lmax });

    sort(v.begin(), v.end(), [](Point & a, Point & b) { if (a.second == b.second) { return a.first > b.first; } return a.second < b.second; });

    for (auto i : v) {
        while (hull.size() >= 2 && !ok(hull[hull.size() - 2], hull.back(), i))
            hull.pop_back();

        hull.push_back(i);
    }

    set <Point> in_hull;
    for (auto i : hull)
        in_hull.insert(i);

    for (auto i : mx) {
        if (in_hull.find(i) != in_hull.end()) {
            printf("Max");
            return 0;
        }
    }
    printf("Min");
    return 0;
}

bool ok(Point a, Point b, Point c)
{
    long long bun(1ll * (b.x - a.x) * (c.y - a.y) - 1ll * (b.y - a.y) * (c.x - a.x));
    if (bun > 0ll)
        return true;
    else if (bun == 0ll && ((b.x != a.x && b.y != a.y) || (a.second == -1 || c.first == -1)))
        return true;
    return false;
}
