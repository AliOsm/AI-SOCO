#include <bits/stdc++.h>

using namespace std;

#define ok printf("ok\n");
#define pf printf
#define sc scanf
#define br printf("\n")

#define scs(a) scanf("%s",a)
#define sc1(a) scanf("%d",&a)
#define sc2(a,b) scanf("%d %d",&a,&b)
#define sc3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define sc1l(a) scanf("%lld",&a)
#define sc2l(a,b) scanf("%lld %lld",&a,&b)
#define sc3l(a,b,c) scanf("%lld %lld %lld",&a,&b,&c)
#define sc1d(a) scanf("%lf",&a)
#define sc2d(a,b) scanf("%lf %lf",&a,&b)
#define sc3d(a,b,c) scanf("%lf %lf %lf",&a,&b,&c)
#define pfs(a) printf("%s",a)
#define pf1(a) printf("%d",a)
#define pf2(a,b) printf("%d %d",a,b)
#define pf1l(a) printf("%lld",a)
#define pf2l(a,b) printf("%lld %lld",a,b)
#define pf1d(a) printf("%lf",a)
#define pf2d(a,b) printf("%lf %lf",a,b)

#define pii pair<int,int>
#define pll pair<long long,long long>
#define mp make_pair
#define F first
#define S second
#define pb push_back

#define mem0(a) memset(a,0,sizeof(a))
#define mem1(a) memset(a,-1,sizeof(a))

#define read freopen("input.txt","r",stdin)
#define write freopen("output.txt","w",stdout)

long long inline gcd(long long x,long long y){return !y?(long long)abs(x):gcd(y,x%y);}  //returns always positive gcd
long long inline lcm(long long a,long long b){return ((long long)abs((a/gcd(a,b))*b));} //returns always positive lcm
double inline cartesian_dist(double x1,double y1,double x2,double y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}

long long bigmod(long long b,long long p,long long m){              //for both positive and negative base
    if(!p)return 1%m;
    else if(p&1)return (((b%m)+m)%m*bigmod(b,p-1,m))%m;
    else {long long ret=bigmod(b,p/2,m);return (ret*ret)%m;}
}
// inverse will exist if and only if gcd(a,m) is 1
long long inverse(long long a,long long m){return bigmod(a,m-2,m);}  //if Mod is prime
long long extended(long long a,long long m){
    long long oldr=a,r=m,oldans=1,ans=0,quotient;
    while(r){
        quotient=oldr/r;
        oldr=oldr-r*quotient;
        swap(oldr,r);
        oldans=oldans-ans*quotient;
        swap(oldans,ans);
    }
    return ((oldans%m)+m)%m;
}

//int inline set_bit(int mask,int i){return mask=mask|(1<<i);}
//int inline reset_bit(int mask,int i){return mask=mask&~(1<<i);}
//bool inline check_bit(int mask,int i){return mask&(1<<i);}

typedef long long ll;
const double PI=acos(-1.0);
const double eps=10E-12;

int n,m,k;
ll ans[(int)1e5+5],timeNow=0;
int posX=0,posY=0,nPosX,nPosY,xDir=1,yDir=1,dif;
map<pii,vector<pair<pii,int> > >mp1;
vector<pair<pii,int> >::iterator st,en;

void makeRes(){
    st=mp1[mp(posX,posY)].begin();
    en=mp1[mp(posX,posY)].end();
    while(st!=en){
        if(!ans[st->S])ans[st->S]=timeNow+(ll)abs(st->F.F-posX);
        ++st;
    }
}
void solve(){
    while(true){
        if(xDir==1){
            if(yDir==1){
                dif=min(n-posX,m-posY);
                nPosX=posX+dif;
                nPosY=posY+dif;
                if(nPosX==n)xDir=-1;
                if(nPosY==m)yDir=-1;
            }
            else {
                dif=min(n-posX,posY);
                nPosX=posX+dif;
                nPosY=posY-dif;
                if(nPosX==n)xDir=-1;
                if(nPosY==0)yDir=1;
            }
        }
        else {
            if(yDir==1){
                dif=min(posX,m-posY);
                nPosX=posX-dif;
                nPosY=posY+dif;
                if(nPosX==0)xDir=1;
                if(nPosY==m)yDir=-1;
            }
            else {
                dif=min(posX,posY);
                nPosX=posX-dif;
                nPosY=posY-dif;
                if(nPosX==0)xDir=1;
                if(nPosY==0)yDir=1;
            }
        }
        makeRes();
        posX=nPosX;
        posY=nPosY;
        timeNow+=(ll)dif;
        if((nPosX==0 || nPosX==n) && (nPosY==0 || nPosY==m))break;
    }
    makeRes();
    for(int i=1;i<=k;i++)if(!ans[i])ans[i]=-1;
}
void update(int x,int y,int idx){
    mp1[mp(x+min(n-x,m-y),y+min(n-x,m-y))].pb(mp(mp(x,y),idx));
    mp1[mp(x+min(n-x,y),y-min(n-x,y))].pb(mp(mp(x,y),idx));
    mp1[mp(x-min(x,m-y),y+min(x,m-y))].pb(mp(mp(x,y),idx));
    mp1[mp(x-min(x,y),y-min(x,y))].pb(mp(mp(x,y),idx));
}
int main(){
    sc3(n,m,k);
    for(int i=1;i<=k;i++){
        int x,y;
        sc2(x,y);
        update(x,y,i);
    }
    solve();
    for(int i=1;i<=k;i++)pf("%lld\n",ans[i]);

    return 0;
}
