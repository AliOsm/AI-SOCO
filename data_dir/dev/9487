#include <cstdio>
#include <algorithm>
#include <set>
const int N = 100010;
struct node {
  int b,c;
  int who;
  void in() {
    scanf("%d%d",&b,&c);
  }
  node(int b = 0,int c=0,int who=0):b(b),c(c),who(who){}
  bool operator < (const node &cmp) const {
    return c == cmp.c ? who < cmp.who : c < cmp.c;
  }
}stu[N];
int cmp(node a,node b) {
  return a.b < b.b;
}
struct Bug{
  int a;
  int id;
  bool operator < (const Bug& cmp) const {
    return a < cmp.a;
  }
}bug[N];
int n, m, s;
std::multiset<node> st;
std::multiset<node>::iterator it;
int ans[N];
bool solve(int mid) {
  st.clear();
  long long sum = 0;
  int pos = n - 1;
  for(int i = 0; i < m; i++) ans[i] = -1;
  for(int i = m - 1; i >= 0; i-- ) {
    while(stu[pos].b >= bug[i].a)  {
      st.insert(node(0, stu[pos].c, stu[pos].who));
      pos--;
    }
    if(ans[bug[i].id] == -1) {
      if(st.empty()) return false;
      int cur = st.begin()->who;
      sum += st.begin()->c;
      if(sum > s) return false;
      st.erase(st.begin());
      int left = mid;
      int j = i;
      while(j >= 0 && left) ans[bug[j].id] = cur, j --, left--;
    }
  }
  return sum <= s;
}
int ret[N];
int main() {
  scanf("%d%d%d",&n,&m,&s);
  for(int i = 0; i < m; i++)scanf("%d",&bug[i].a),bug[i].id=i; 
  std::sort(bug, bug + m);
  for(int i = 0; i < n; i++) scanf("%d",&stu[i].b);
  for(int i = 0; i < n; i++) scanf("%d",&stu[i].c),stu[i].who=i;
  std::sort(stu,stu+n,cmp);
  int l = 1, r = m;
  int best = -1;
#ifndef wuyiqi
  while(l <= r) {
    int mid = l + r >> 1;
    if(solve(mid)) {
      best = mid;
      for(int i = 0; i < m; i ++) ret [i] = ans[i];
      r = mid - 1;
    } else {
      l = mid + 1;
    }
  }
#endif 
  if(best == -1)  puts("NO");
  else {
    puts("YES");
    printf("%d",ret[0]+1);
    for(int i = 1; i < m; i++) printf(" %d",ret[i]+1);
    puts("");
  }
  return 0;
}