#include <bits/stdc++.h>
using namespace std;
#define ll long long
// lets start
// go to the innermost of p and pick for it two character
// example:
// p p i p i p i i i
// step1: p p i p i p<i,i> i
// step2: p p i p<i,p<i,i>> i
// step3: p p<i,p<i,p<i,i>>> i
// step4: p<p<i,p<i,p<i,i>>>,i>
// end
// i found algorithm but i can not implement it with dfs  why?
// because dfs is a recursive function and i can't trace it
// lets understand problem. string in the given input is correct if I can punctuation it and receive to int or pair<?,?>
// then the [pair int int pair int int]  and [int int] is Error occurred beccause final string should be int or pair<?,?>
// ok. first of everything for this question is i should find pattern. it is very simple
// pattern1:  pair<?, ?>   1=> "pair"  and 2=> "<" and 3=> "? it can int or pair"  
// 4=> ","  and 5=> "?"  and  6=> ">" 
// pattern2: single int
// More formally: type := int | pair<type,type>
// no song :(

string res = "";
vector<char> se;
int si = 0;
int id = 0;
void dfs() {
    if (id >= si){
      cout<<"Error occurred\n";
      exit(0);
    }
    if (se[id] == 'p') {
      ++id;
      res+="pair<";
      dfs();
      res+=',';
      dfs();
      res+='>';
    } else {
      res+= "int";
      ++id;
    }
}

int main() {
  int n; cin >>n;
  string s;
  while (cin >> s) {
    if (s != "pair" && s != "int")
      break;
    if (s == "pair")
      se.push_back('p');
    else
      se.push_back('i');
    ++si;
  }

  if (se[0] == 'i') {// pattern 2
    if (si > 1)
      cout <<"Error occurred\n";
    else
      cout<<"int\n";
  }
  else {// pattern 1
    dfs();
    if (id < si)
        cout<<"Error occurred"<<"\n";
    else
        cout<<res<<"\n";
    
  }
  return 0;
}