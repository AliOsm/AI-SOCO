// In the name of God
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iomanip>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <assert.h>
#include <bitset>
#include <unordered_map>
#define sqr(a) (a)*(a)
#define all(a) (a).begin(), (a).end()
using namespace std;
 
template <typename T>
T next_int() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if(ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return p * x;
}
 
string next_token() {
    char ch;
    string ans = "";
    do { ch = getchar(); } while(ch <= ' ');
    while(ch > ' ') {
        ans += ch;
        ch = getchar();
    }
    return ans;
}
    
const long long INF = (long long)1e18;
const int INFINT = (int)1e9 + 227 + 1;
const int MAXN = (int)2e5 + 227 + 1;    
const int MOD = (int)1e9 + 7;
const long double EPS = 1e-9;
 
long long bin_pow(long long a, long long b) {
    if(!b) return 1;
    long long ans = bin_pow(a, b / 2);
    ans = ans * ans;
    if(b % 2) ans = ans * a;
    return ans;
}

int main() {
    // freopen(".in", "r", stdin);

    int n = next_int<int>();
    int m = next_int<int>();

    vector<pair<int, int> > p(n);
    for(int i = 0; i < n; i++) 
        p[i] = make_pair(next_int<int>(), i);

    vector<pair<int, pair<int, int> > > c;
    for(int i = 0; i < m; i++) {
        int a = next_int<int>();

        int kek = 0;
        while(1) {
            c.push_back(make_pair(a, make_pair(-kek, i)));

            if(a == 1) break;

            kek++;
            a = a / 2 + a % 2;
        }
    }

    sort(all(c));
    sort(all(p));

    vector<int> ansi(n, 0);
    vector<bool> used(m, 0);
    vector<int> anso(m, 0);

    int ans = 0;
    int anon = 0;
    for(int i = n - 1; i >= 0; i--) {
        while(c.size() && c.back().first > p[i].first) 
            c.pop_back();

        while(c.size() && c.back().first == p[i].first) {
            if(used[c.back().second.second]) {
                c.pop_back();
                continue;
            }

            ansi[p[i].second] = c.back().second.second + 1;
            used[c.back().second.second] = 1;
            anso[c.back().second.second] = -c.back().second.first;

            ans++;
            anon += -c.back().second.first;

            c.pop_back();

            break;
        }
    }



    cout << ans << " " << anon << "\n";

    for(int i = 0; i < m; i++) 
        cout << anso[i] << " ";
    puts("");

    for(int i = 0; i < n; i++) 
        cout << ansi[i] << " ";
    puts("");
}
