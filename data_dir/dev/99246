///In the name of GOD
#pragma GCC optimize ("O2")
#pragma GCC optimize ("unroll-loops")
#include<bits/stdc++.h>
using namespace std;

typedef long long                   ll;
typedef pair<int,int>               pii;

const int MXN = 1e3 + 10;
const int MX5 = 3e4 + 10;
const ll INF = 1e17;

int n, m, s, t, ans1;
ll ans = INF, Ans = INF;
int Ans1, Ans2, Sit;
int Mn[MXN];
int dis[MXN], W[MX5];
vector<pair<pii, int>> G[MXN];
vector<int> E, Ed, Edg;
bool vis[MXN], mark[MXN], tag[MX5], bad[MX5];
void dfs(int u, bool f){
    mark[u] = 1;
    if(u == t){
        for(auto id : E){
            tag[id] = 1;
            if(f) Ed.push_back(id);
            else  Edg.push_back(id);
        }
    }
    for(auto PPr : G[u]){
        int v = PPr.first.first, w = PPr.first.second, id = PPr.second;
        if(bad[id]) continue;
        if(!mark[v]){
            E.push_back(id);
            dfs(v, f);
            E.pop_back();
        }
    }
}
void DFS(int u, int idp){
    vis[u] = 1;
    for(auto PPr : G[u]){
        int v = PPr.first.first, w = PPr.first.second, id = PPr.second;
        if(id == idp || bad[id]) continue;
        if(vis[v]){
            Mn[u] = min(Mn[u], dis[v]);
            if(tag[id]) tag[id] = 0;
            continue;
        }
        dis[v] = dis[u] + 1;
        DFS(v, id);
        if(Mn[v] >= dis[v]){
            if(tag[id]){
                ans = min(ans, (ll)w);
                if(ans == w) ans1 = id;
            }
        }
        if(tag[id]) tag[id] = 0;
        Mn[u] = min(Mn[u], Mn[v]);
    }
    return;
}
inline void init(){
    ans =INF;
    for(int i = 0; i <= n; i ++){
        mark[i] = 0;
        vis[i] = 0;
        Mn[i] = INF;
    }
    return;
}
inline void PAK(){
    for(auto id : Edg){
        tag[id] = 0;
    }
    Edg.clear();
}
int main(){
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    cin >> n >> m >> s >> t;
    for(int i = 1; i <= m; i ++){
        int u, v, w;
        cin >> u >> v >> w;
        G[u].push_back({{v, w}, i}), G[v].push_back({{u, w}, i});
        W[i] = w;
    }
    dfs(s, 1);
    if(!mark[t]){
        cout << 0 << '\n' << 0;
        return 0;
    }
    for(auto id : Ed) tag[id] = 0;
    for(auto id : Ed){
        bad[id] = 1;
        init();
        dfs(s, 0);
        if(!mark[t]){
            PAK();
            ans = W[id];
            if(ans < Ans){
                Sit = 1;
                Ans1 = id;
                Ans = ans;
            }
            bad[id] = 0;
            continue;
        }
        DFS(s, -1);
        //PAK();
        bad[id] = 0;
        if(ans == INF) continue;
        ans += W[id];
        if(ans < Ans){
            Sit = 2;
            Ans1 = id;
            Ans2 = ans1;
            Ans = ans;
        }
    }
    if(Ans == INF) return cout << -1, 0;
    cout << Ans << '\n';
    cout << Sit << '\n';
    if(Sit == 1){
        cout << Ans1 << '\n';
    }
    else{
        cout << Ans1 << ' ' << Ans2;
    }
    return 0;
}
/*
        Pain
        You made me a, you made me a believer, believer
        Pain
        You break me down, you build me up, believer, believer
*/
//! N.N

