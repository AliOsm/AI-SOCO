#include <iostream>
#include <stack>
#include <set>
#include <vector>
#include <algorithm>
#include <queue>
#include <cstdio>
#include <cstring>
#include <string>
#include <map>

#define inf (1 << 30)
#define INF (1<<45LL)
#define pb push_back
#define mp make_pair
using namespace std;

typedef pair<int, int> pi;
typedef long long ll;

#define MAXN 555555
int P[MAXN*2][22];
int F[MAXN*2];
int H[MAXN*2];
int n;


void add(int x, int fa){
    H[x] = H[fa] + 1;
    P[x][0] = fa;
    for (int i = 1; i < 20; i++) P[x][i] = P[P[x][i - 1]][i - 1];
}
int lca(int x, int y){
    int i;
    if (H[x] < H[y]) swap(x, y);
    for (i = 0; i < 20; i++) if ((H[x] - H[y]) & (1<<i)) x = P[x][i];
    for (i = 19; i >= 0; i--) if (P[x][i] != P[y][i]) x = P[x][i], y = P[y][i];
    return P[x][0];
}

int main(){

    int n; scanf("%d", &n);
    
    int currentNode = 4;
    H[2] = H[3] = H[4] = 1;
    int a = 2, b = 4, ans = 2;
    for(int i=1; i <= n; i++){
        int d; scanf("%d", &d);
        add(++currentNode, d);
        add(++currentNode, d);

    
        if(ans < H[a] + H[currentNode] - 2 * H[lca(a, currentNode)] ){
            ans  = H[a] + H[currentNode] - 2 * H[lca(a, currentNode)];
            b = currentNode;
        }else{
            if(ans < H[b] + H[currentNode] - 2 * H[lca(b, currentNode)]){
            ans = H[b] + H[currentNode] - 2 * H[lca(b, currentNode)];
            a = currentNode;
            }
        }
            
        cout << ans << endl;
    //  currentNode++;
    }
    return 0;
}