#include <bits/stdc++.h>
using namespace std;
const long long mod = 1e9 + 7;
int arr[10];
long long tenpower[110];
long long fact[101];

const int MAX = 105;
long long comb[MAX][MAX];
void calcCombinations() {
	comb[0][0] = 1;
	for (int i = 1; i < MAX; i++) {
		comb[i][0] = 1;
		comb[i][i] = 1;
		for (int j = 1; j < i; j++)
			comb[i][j] = (comb[i - 1][j] + comb[i - 1][j - 1]) % mod;
	}
}

void precalc() {
	fact[1] = 1;
	fact[0] = 1;
	tenpower[0] = 1;
	tenpower[1] = 10;
	for (int i = 2; i <= 100; ++i) {
		fact[i] = (i * fact[i - 1]) % mod;
		tenpower[i] = (tenpower[i - 1] * 10) % mod;
	}

}

long long memo[11][110];

long long solve(int idx, int s) {
	if (s < 0)
		return 0;
	if (idx == 10) {
		return s == 0;
	}
	if (s < arr[idx])
		return 0;
	long long &r = memo[idx][s];
	if (~r)
		return r;
	r = 0;

	for (int i = arr[idx]; i <= s; ++i) {
		r = (r + solve(idx + 1, s - i) * comb[s][i]) % mod;
	}
	return r;
}

int main() {
//	freopen("in.txt", "rt", stdin);
	int n;
	precalc();
	calcCombinations();
	int sum = 0;
	scanf("%d", &n);
	for (int i = 0; i < 10; ++i) {
		scanf("%d", arr + i);
		sum += arr[i];
	}

	long long ans = 0;
	for (int j = sum; j <= n; ++j) {
		for (int i = 1; i < 10; ++i) {
			memset(memo, -1, sizeof memo);
			if (arr[i]) {
				--arr[i];
				long long x = solve(0, j - 1);
				ans = (ans + x) % mod;
				++arr[i];
			//	printf("%d %d %lld \n", j, i, x);
			} else {
				long long x = solve(0, j - 1);
				ans = (ans + x % mod);
				//printf("%d %d %lld \n", j, i, x);
			}
		}
	//	printf("%d %lld\n", j, ans);
	}
	printf("%lld", ((ans % mod) + mod) % mod);
	return 0;
}

