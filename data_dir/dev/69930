#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> PI;
struct Edge{
	int u,v,l,r;
	Edge(int _u=0,int _v=0,int _l=0,int _r=0):u(_u),v(_v),l(_l),r(_r){}
} ed[3010];
vector<int> vals;
int par[1010],_rank[1010];
inline void init(int n){
	for(int i=1;i<=n;i++)
		par[i]=i,_rank[i]=0;
}
int find(int x){
	if(par[x]==x) return x;
	return par[x]=find(par[x]);
}
inline void unite(int x,int y){
	x=find(x),y=find(y);
	if(x==y) return;
	if(_rank[x]<_rank[y])
		par[x]=y;
	else{
		par[y]=x;
		if(_rank[x]==_rank[y]) _rank[x]++;
	}
}
inline bool same(int x,int y){
	return find(x)==find(y);
}
int n,m;
inline bool check(int l,int r){
	init(n);
	for(int i=0;i<m;i++){
		if(ed[i].l<=vals[l] && vals[r]<=ed[i].r) unite(ed[i].u,ed[i].v);
	}
	return same(1,n);
}
int main(){
	int u,v,l,r;
	scanf("%d%d",&n,&m);
	for(int i=0;i<m;i++){
		scanf("%d%d%d%d",&u,&v,&l,&r);
		ed[i]=Edge(u,v,l,r);
		vals.push_back(l);
		vals.push_back(r);
	}
	if((int)vals.size()==0){
		puts("Nice work, Dima!");
		return 0;
	}
	sort(vals.begin(),vals.end());
	int ans=0;
	for(int i=0;i<(int)vals.size();i++){
		l=i,r=(int)vals.size();
		while(r-l>1){
			int mid=(l+r)>>1;
			if(check(i,mid)) l=mid;
			else r=mid;
		}
		if(check(i,l)) ans=max(ans,vals[l]-vals[i]+1);
	}
	if(ans==0) puts("Nice work, Dima!");
	else printf("%d\n",ans);
	return 0;
}
