#include<stdio.h>
#include<iostream>
#include<string.h>
#include<ctype.h>
#include<math.h>
#include<map>
#include<set>
#include<vector>
#include<queue>
#include<functional>
#include<string>
#include<algorithm>
#include<time.h>
#include<bitset>
void fre(){freopen("c://test//input.in","r",stdin);freopen("c://test//output.out","w",stdout);}
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define MP(x,y) make_pair(x,y)
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned int UI;
template <class T> inline void gmax(T &a,T b){if(b>a)a=b;}
template <class T> inline void gmin(T &a,T b){if(b<a)a=b;}
using namespace std;
const int N=0,M=0,Z=1e9+7,maxint=2147483647,ms31=522133279,ms63=1061109567,ms127=2139062143;
const double eps=1e-8,PI=acos(-1.0);//.0
map<int,int>mop;
struct A{};
int T,S,q;
int main()
{
	while(~scanf("%d%d%d",&T,&S,&q))
	{
		int ans=1;
		S*=q;
		while(S<T)
		{
			ans++;
			S*=q;
		}
		printf("%d\n",ans);
	}
	return 0;
}
/*
【题意】
有一首歌，长度为T秒
我们首先下载S秒

然后开始听歌。听S秒，同时一直下载，每p秒可以下载p-1秒的内容
一旦遇到不能听，我们就会从头开始听

问一共会从头开始听多少次

【类型】
向前均摊，化double为整数

【分析】
啊，一开始想，是实数的渐进模拟，感觉好难不会做！
然而这道题还是可以解的
我们发现，我们接下来，可以花费q秒下载q-1秒的内容
然后一秒向S均摊，相当于利用之后的q-1秒下载q-1秒的内容
于是，这S秒完成后，我们会下载S*(q-1)的内容，同时算上之前的S，下载内容变成了S*q
所以我们恰好第一次能听S*q秒的内容
第二次，就是S*q*q
直到这个数>=T就是答案了

【时间复杂度&&优化】
这种向前均摊，化double为整数非常有意义

【trick】

【数据】
input
5 2 2
output
2

input
5 4 7
output
1

input
6 2 3
output
1

先下载了2s的
然后
*/