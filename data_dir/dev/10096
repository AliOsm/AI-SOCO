/*
    NO 
        TIME 
            TO 
                DIE
                    --007
                            */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli mod=999983;
lli INF=1e17;
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,y,k,m;
const double pi1=3.14159265358979323846;
//matrix exponentiation is associative and distributive
lli me(lli a,lli b)
{
    lli res=1;
    while(b)
    {
        if(b&1)
        res=(res%mod*a%mod)%mod;
        a=a*a;
        a%=mod;
        b=b>>1;
    }
    return res;
}
lli mI(lli a)
{
    return (me(a,mod-2)%mod+mod)%mod;
}
bool cmp(ll a,ll b)
{
    if(a.first==b.first)
    return a.second<b.second;
    return a.first<b.first;
}
map<lli,lli> vis;
lli timer;
vector<ll> ans;
vector<lli> low,tin;
set<lli> adj[400005],ad[400005];
void dfs(lli v,lli p)
{
    vis[v]=1;
    low[v]=tin[v]=timer++;
    for(auto &to: adj[v])
    {
        if(to==p)
        continue;
        if(vis[to])
        low[v]=min(low[v],tin[to]);
        else
        {
            dfs(to,v);
            low[v]=min(low[v],low[to]);
            if(low[to]>tin[v])
            {
                ans.push_back({v,to});
            }
        }
    }
}

void find_bridges()
{
    timer=0;
    low.assign(n+7,-1);
    tin.assign(n+7,-1);
    vis.clear();
    for(int i=1;i<=n;i++)
    {
        if(!vis[i])
        dfs(i,-1);
    }
}


lli tot=0;
void dfs1(lli v,lli p)
{
    vis[v]=1;
    tot++;
    for(auto &i: ad[v])
    {
        if(!vis[i])
        dfs1(i,v);
    }
}

set<lli> anss[400005];
map<ll,lli> mj;
ll p[400005];
void dfs2(lli v,lli p)
{
    vis[v]=1;
    // cout<<v<<"\n";
    for(auto &i: adj[v])
    {
        if(i==p)
        continue;
        if(!vis[i])
        {
            anss[i].insert(v);
            mj[{i,v}]=1;
            mj[{v,i}]=1;
            dfs2(i,v);
        }
        else
        {
            if(!mj[{i,v}])
            anss[i].insert(v),mj[{i,v}]=1,mj[{v,i}]=1;
        }
    }
}

lli dp[505][505];
int main()
{
 cin>>n;
 for(int i=1;i<=n;i++)
 {
     string s;
     cin>>s;
     lli len=s.length();
     map<lli,lli> vis;
     for(int j=0;j<len;j++)
     {
         vis[(s[j]-'0')]++;
     }
    //  cout<<vis[0]<<"\n";
     lli mod=60;
     lli flag=0;
     for(int i=0;i<=9;i++)
     {
         lli tot=0;
         if(vis[i])
         {
             vis[i]--;
             tot+=i;
             tot%=mod;
             lli tt=tot;
             for(int j=0;j<=9;j++)
             {
                 if(vis[j])
                 {
                     tot+=j*10;
                     tot%=mod;
                     vis[j]--;
                     for(int j=0;j<=9;j++)
                     {
                         tot+=j*40*vis[j];
                         tot%=mod;
                     }
                     if(tot==0)
                     flag=1;
                     vis[j]++;
                     tot=tt;
                 }
             }
             vis[i]++;
         }
     }
     if(flag)
     cout<<"red\n";
     else
     cout<<"cyan\n";
 }
}