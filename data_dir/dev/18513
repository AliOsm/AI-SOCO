#include<bits/stdc++.h>
using namespace std;

const int N = 1e5 + 10;
int a[N];

int gcd(int a, int b) {
    return !b? a: gcd(b, a % b);
}

struct node {
    int cnt = 0, num = 0;
    friend node merge(node x, node y) {
        node res;
        res.num = gcd(x.num, y.num);
        res.cnt = (x.num == res.num? x.cnt: 0) + (y.num == res.num? y.cnt: 0);
        return res;
    }
} seg[N << 2];

void build(int id, int st, int en) {
    if (en - st == 1) {
        seg[id].num = a[st];
        seg[id].cnt = 1;
        return;
    }
    int mid = (st + en) / 2;
    build(2 * id, st, mid);
    build(2 * id + 1, mid, en);
    seg[id] = merge(seg[2 * id], seg[2 * id + 1]);
}

node get(int id, int st, int en, int l, int r) {
    if (l <= st && en <= r) 
        return seg[id];
    if (r <= st || en <= l) {
        node res;
        res.num = res.cnt = 0;
        return res;
    }
    int mid = (st + en) / 2;
    return merge(get(2 * id, st, mid, l, r), get(2 * id + 1, mid, en, l, r));
}

int main() {
    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
    int n, q, l, r;
    cin >> n;
    for (int i = 0; i < n; i++)
        cin >> a[i];
    build(1, 0, n);
    cin >> q;
    while (q--) {
        cin >> l >> r;
        l--;
        cout << r - l - get(1, 0, n, l, r).cnt << "\n";
    }
    return 0;
}