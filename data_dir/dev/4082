
/*
СТРОИМ СТЕНУ РАБОТЯГИ!
█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═█
█═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═█
█═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═█
█═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═█
█═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═█
█═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═█
█═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═█
█═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═█
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█
*/
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
using namespace std;

#define ll long long
#define ld long double
#define null NULL

const int N = 20;

ll dp[N][(1 << N)];

vector<int> g[N];


inline int count(int mask) {
	int cnt = 0;
	for (int i = 0; i < N; ++i) {
		cnt += (1 & (mask >> i));
	}
	return cnt;
}

inline int fir(int mask) {
	for (int i = 0; i < N; ++i) {
		if (1 & (mask >> i)) {
			return i;
		}
	}
	return -1;
}


inline int bit(int mask, int i) {
	return (mask >> i);
}



int main() {
	int n, m;
	scanf("%d %d", &n, &m);
	for (int i = 0; i < m; ++i) {
		int u, v;
		scanf("%d %d", &u, &v);
		--u;
		--v;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	for (int i = 0; i < n; ++i) {
		dp[i][(1 << i)] = 1;
	}
	for (int mask = 0; mask < (1 << n); ++mask) {
		if (count(mask) <= 1) {
			continue;
		}
		for (int i = fir(mask) + 1; i < n; ++i) {
			if (mask != (1 << i) && bit(mask, i)) {
				for (int j : g[i]) {
					dp[i][mask] += dp[j][mask ^ (1 << i)];
				}
			}
		}
	}
	ll ans = 0LL;
	for (int mask = 0; mask < (1 << n); ++mask) {
		if (count(mask) < 3) {
			continue;
		}
		for (int i : g[fir(mask)]) {
			if (bit(mask, i)) {
				ans += dp[i][mask];
			}
		}
	}
	cout << ans / 2 << endl;
 	return 0;
}











