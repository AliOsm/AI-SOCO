#include <bits/stdc++.h>
#define pii pair <int, int>
using namespace std;

set <int> interv;
map <int, int> id;
int dp[100010];
int h[100010];
pii init[100010];

int intersect(int a, int b)
{
    int x = min(init[a].second, init[b].second) - max(init[a].first, init[b].first);
    return (h[a] > h[b] ? max(0, x) : 0);
}

void proc(int x)
{
    for (auto it = prev(interv.upper_bound(init[x].first)); *it <= init[x].second; it++) {
        if ((!intersect(id[*prev(it)], id[*it]) || !intersect(x, id[*prev(it)])) &&
            (!intersect(id[*next(it)], id[*it]) || !intersect(x, id[*next(it)])))
                dp[x] = max(dp[x], min(dp[id[*it]], intersect(x, id[*it])));
    }
    for (auto it = prev(interv.lower_bound(init[x].first)); *it <= init[x].second; ) {
        if (*next(it) > 1 + init[x].second) {
            id[init[x].second + 1] = id[*it];
            interv.insert(init[x].second + 1);
        }
        it++;
        if (*prev(it) >= init[x].first)
            interv.erase(prev(it));
    }
    interv.insert(init[x].first);
    id[init[x].first] = x;
}

int main()
{
    interv.insert(-2e9 - 2);
    interv.insert(-2e9 - 1);
    interv.insert(2e9 + 1);
    interv.insert(2e9 + 2);
    init[0] = { -2e9, 2e9 };
    dp[0] = 2e9;

    vector <pair <int, int>> v;
    int n, m, a, b, c;
    cin >> n >> m;

    for (int i(1); i <= n; i++) {
        cin >> h[i] >> init[i].first >> init[i].second;
        v.push_back({ h[i], i });
    }

    init[n + 1] = { -1e9, 1e9 };
    h[n + 1] = 1e9;

    sort(v.begin(), v.end());

    for (auto i : v)
        proc(i.second);

    dp[0] = 0;
    proc(n + 1);

    cout << dp[n + 1] << '\n';

    return 0;
}
