#include <cstdio>
#include <iostream>
#include <string>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <stdlib.h>
#include <sstream>
#include <assert.h>
#include <memory.h>
#include <string.h>
#include <time.h>
using namespace std;
#pragma comment(linker, "/STACK:100000000")

#define mp make_pair
#define pb push_back 
#define ll long long
#define sz(x) (int)(x).size()

ll dp[55][55][55]; // число, которое ставим, свободно слева и свободно справа
int n;
ll m;

ll go(int N, int L, int R) {
	if(N >= n) return 1;
	if(dp[N][L][R] != -1) return dp[N][L][R];
	ll res = 0;
	res += go(N + 1, L + 1, R);
	res += go(N + 1, L, R + 1);
	return dp[N][L][R] = res;
}

int mas[55];

void findpath(int N, int L, int R) {
	if(N > n) return;
	ll res1 = go(N + 1, L + 1, R);
	ll res2 = go(N + 1, L, R + 1);
	if(res1 >= m) {
		mas[L] = N;
		findpath(N + 1, L + 1, R);
	}
	else {
		m -= res1;
		mas[n-R-1] = N;
		findpath(N + 1, L, R + 1);
	}
}

int main()
{
    //freopen("input.txt","rt",stdin);
    //freopen("output.txt","wt",stdout);
    //freopen("a.in","rt",stdin);
    //freopen("a.out","wt",stdout);
	
	memset(dp, -1, sizeof(dp));

	cin >> n >> m;
	go(1, 0, 0);

	findpath(1, 0, 0);

	for(int i = 0; i < n; i++) {
		printf("%d ", mas[i]);
	}
    return 0;
}