//Pham Huu Canh
//C. Dijkstra?
//Algorithm:
//Complexity:
//AC:

#include <iostream>
#include <fstream>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

#define max64 9223372036854775807LL
#define max32 2147483647
#define maxty 1001001001
#define max16 32767
#define EPS 1e-8
#define ll long long
#define ull unsigned long long
#define pb push_back
#define mp make_pair
#define PQ priority_queue
#define LB lower_bound
#define UB upper_bound
#define fi first
#define se second
#define timmax(x, y)    ((x) > (y) ? (x) : (y))
#define timmin(x, y)    ((x) < (y) ? (x) : (y))
#define fori(i, n)      for((i) = 0; (i) < (n); (i)++)
#define ford(i, n)      for((i) = (n-1); (i) >= 0; (i)--)
#define fore(i, v)      for(typeof(v.begin()) i = v.begin(); i != v.end(); i++)
#define repi(i, a, b)   for((i) = (a); (i) <= (b); (i)++)
#define repd(i, a, b)   for((i) = (a); (i) >= (b); (i)--)
#define all(tmpv)      tmpv.begin(), tmpv.end()

#define fii "c.inp"
#define foo "c.out"
#define MOD 1000000007

using namespace std;

typedef pair<int, int> II;
typedef vector<int> VI;
#define nmax 100005
#define inf 1000111000111000111LL

int n;
int trc[nmax];
vector<II> v[nmax];
ll dist[nmax];
struct state{
    int id;
    ll cost;
};
class cmp{
    public:
        bool operator()(state t1, state t2){
            return t1.cost > t2.cost;
        }
};
PQ<state, vector<state>, cmp> pq;

void path(int i){
    if (i == 1) printf("1");
    else path(trc[i]), printf(" %d", i);
}

void dijkstra(){
    int i;
    II p;
    state temp, t;
    
    repi(i, 1, n)   dist[i] = inf;
    dist[1] = 0;
    pq.push((state){1, 0});
    
    while (!pq.empty()){
        t = pq.top(), pq.pop();
        if (t.cost > dist[t.id])    continue;
        
        fore(ite, v[t.id]){
            p = *ite;
            temp.id = p.fi;
            temp.cost = t.cost + p.se;
            if (temp.cost < dist[temp.id]){
                dist[temp.id] = temp.cost;
                trc[temp.id] = t.id;
                pq.push(temp);
            }
        }
    }
}

void input()
{
    int i, ne, x, y, z;
    
    scanf("%d %d", &n, &ne);
    fori(i, ne){
        scanf("%d %d %d", &x, &y, &z);
        v[x].pb(mp(y, z));
        v[y].pb(mp(x, z));
    }
    
    dijkstra();
    
    if (dist[n] == inf) printf("-1");
    else path(n);
}

int main()
{
    #ifndef ONLINE_JUDGE
        freopen(fii,"r",stdin);
        freopen(foo,"w",stdout);
    #endif

    input();

    return 0;
}
