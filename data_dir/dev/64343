#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;
#define MOD mod1

const ll mod = 1e9 + 7, mod1 = mod - 1;



typedef long long T;
struct matrix {
	int rows, cols;
	vector< vector< T > > M;
	matrix() {}
	matrix(int r, int c, int val = 0) {
		rows = r;
		cols = c;
		M.resize(rows);
		for (int i = 0; i < rows; i++)
			M[i].resize(cols, 0);
		if (val != 0) {
			if (rows != cols)
				cout << "Error creating diagonal matrix\n";
			else {
				for (int i = 0; i < rows; i++)
					M[i][i] = val;
			}
		}
	}
	void assign(T arr[]) {
		for (int i = 0; i < rows; i++)
			for (int j = 0; j < cols; j++)
				M[i][j] = arr[i * cols + j];
	}
	void read() {
		for (int i = 0; i < rows; i++)
			for (int j = 0; j < cols; j++)
				cin >> M[i][j];
	}
	void revread() {
		for (int i = rows - 1; i >= 0; i--)
			for (int j = cols - 1; j >= 0; j--)
				cin >> M[i][j];
	}
	void disp() {
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++)
				cout << M[i][j] << ' ';
			cout << '\n';
		}
	}
	void pow(ll n) {
		M = (this->fastpow(*this, n)).M;
	}
	matrix fastpow(matrix& A, ll n) {
		if (n == 0)
			return matrix(A.rows, A.cols, 1);
		matrix TEMP = fastpow(A, n / 2);
		TEMP.mul(TEMP);
		if (n & 1)
			TEMP.mul(A);
		return TEMP;
	}
#ifdef MOD
	void add(matrix& B) {
		if (B.rows != rows || B.cols != cols) {
			cout << "Error adding\n";
			return;
		}
		for (int i = 0; i < rows; i++)
			for (int j = 0; j < cols; j++)
				M[i][j] = (M[i][j] + B.M[i][j]) % MOD;
	}
	void sub(matrix& B) {
		if (B.rows != rows || B.cols != cols) {
			cout << "Error subtracting\n";
			return;
		}
		for (int i = 0; i < rows; i++)
			for (int j = 0; j < cols; j++)
				M[i][j] = ((M[i][j] - B.M[i][j]) % MOD + MOD) % MOD;
	}
	void mul(matrix& B) {
		if (cols != B.rows) {
			cout << "Error multiplying\n";
			return;
		}
		vector< vector< T > > TEMP;
		TEMP.resize(rows);
		for (int i = 0; i < rows; i++)
			TEMP[i].resize(B.cols, 0);
		for (int i = 0; i < rows; i++)
			for (int j = 0; j < B.cols; j++)
				for (int k = 0; k < cols; k++)
					TEMP[i][j] = (TEMP[i][j] + (M[i][k] * B.M[k][j]) % MOD) % MOD;
		M = TEMP;
	}
#else
	void add(matrix& B) {
		if (B.rows != rows || B.cols != cols) {
			cout << "Error adding\n";
			return;
		}
		for (int i = 0; i < rows; i++)
			for (int j = 0; j < cols; j++)
				M[i][j] = M[i][j] + B.M[i][j];
	}
	void sub(matrix& B) {
		if (B.rows != rows || B.cols != cols) {
			cout << "Error subtracting\n";
			return;
		}
		for (int i = 0; i < rows; i++)
			for (int j = 0; j < cols; j++)
				M[i][j] = M[i][j] - B.M[i][j];
	}
	void mul(matrix& B) {
		if (cols != B.rows) {
			cout << "Error multiplying\n";
			return;
		}
		vector< vector< T > > TEMP;
		TEMP.resize(rows);
		for (int i = 0; i < rows; i++)
			TEMP[i].resize(B.cols, 0);
		for (int i = 0; i < rows; i++)
			for (int j = 0; j < B.cols; j++)
				for (int k = 0; k < cols; k++)
					TEMP[i][j] = TEMP[i][j] + M[i][k] * B.M[k][j];
		M = TEMP;
	}
#endif
};



//prime builder
const int maxprime = 1e5 + 10, up = sqrt(maxprime);
int prime[maxprime];
vector<int> primes;
inline void sieve()
{
	for (int i = 0; i < maxprime; i++)
		prime[i] = i;
	for (int i = 2; i < maxprime; i += 2)
		prime[i] = 2;
	for (int i = 3; i <= up; i += 2)
	{
		if (prime[i] != i)
			continue;
		int lim = i * i;
		int add = 2 * i;
		for (int j = lim; j < maxprime; j += add)
		{
			if (prime[j] == j)
				prime[j] = i;
		}
	}
	primes.pb(2);
	for (int i = 3; i < maxprime; i += 2)
		if (prime[i] == i)
			primes.pb(i);
}


set<int> plist;
ll n, num[4], ans = 1;
map<int, int> freq[4];


//modulo op


ll add(ll a,ll b){
    return (a+b)%mod;
}

ll sub(ll a,ll b){
    return ((a-b)%mod+mod)%mod;
}

ll mul(ll a,ll b){
    return (a*b)%mod;
}

ll power(ll a,ll b,ll m){
    if(b==0)
        return 1;
    ll tmp=power(a,b/2,m);
    tmp=(tmp*tmp)%m;
    if(b&1)
        tmp=(tmp*a)%m;
    return tmp;
}

//end of modulo op

void primize() {
	for (int i = 0; i < 4; i++) {
		ll tmp = num[i];
		for (auto u : primes) {
			if (tmp % u == 0) {
				plist.insert(u);
				while (tmp % u == 0) {
					freq[i][u]++;
					tmp /= u;
				}
			}
		}
		if (tmp != 1) {
			plist.insert(tmp);
			freq[i][tmp]++;
		}
	}
}

int main()
{
	fastread;
	sieve();
	matrix trans(3, 3);
	cin >> n;
	for (int i = 0; i < 4; i++)
		cin >> num[i];
	for (int i = 0; i < 3; i++)
		trans.M[0][i] = 1;
	trans.M[1][0] = 1;
	trans.M[2][1] = 1;
	trans.pow(n - 3);
	primize();
	// cout<<ans<<endl;
	ans=power(num[3],mod-2,mod);
	// cout<<"okar"<<ans<<endl;
	ans=power(ans,n,mod);
	for(auto u:plist){
		ll f1,f2,f3;
		f1=freq[0][u]+freq[3][u];
		f2=freq[1][u]+2*freq[3][u];
		f3=freq[2][u]+3*freq[3][u];
		ll tot=(f3*trans.M[0][0])%mod1+(f2*trans.M[0][1])%mod1+(f1*trans.M[0][2])%mod1;
		tot%=mod1;
		// cout<<u<<tot<<endl;
		ans=mul(ans,power(u,tot,mod));
	}
	cout<<ans;
	return 0;
}