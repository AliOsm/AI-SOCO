#include<bits/stdc++.h>
using namespace std;
#define F first
#define S second
#define pb push_back
#define mp make_pair
#define ll long long
const int MX=3e5+10;
int N, M, k, x;
int st[MX], Ed[MX];
char s[MX];
vector<vector<int> > G(MX);
struct node
{
    int cnt[27];
    node()
    {
        memset(cnt, 0, sizeof cnt);
    }
};
int vis[MX];
int t;
node arr[MX];
bool cy=0;
void dfs(int x)
{
    st[x]=t++;
    for(int i=0; i<G[x].size(); i++)
    {
        int ch=G[x][i];
        if(st[ch] == -1)
        {
            dfs(ch);

        }
        else if(Ed[ch] == -1)
        {
            cy=1;
        }
        for(int c=0; c<26; c++)
        {
            int add=0;
            if(s[x-1]-'a' == c) add=1;
            arr[x].cnt[c]=max(arr[x].cnt[c], arr[ch].cnt[c]+add);
        }
    }
    Ed[x]=t;

}
deque<int> dq;
void bfs(int x)
{
    if(vis[x]) return ;
    dq.clear();
    vis[x]=1;
    dq.pb(x);
    while(dq.size())
    {
        int node=dq.front();
        dq.pop_front();
        for(int i=0; i<G[node].size(); i++)
        {
            int ch=G[node][i];
            for(int c=0; c<26; c++)
            {
                int add=0;
                if(s[ch-1]-'a' == c)
                    add=1;
                arr[ch].cnt[c]=max(arr[node].cnt[c]+add, arr[ch].cnt[c]);
            }
            if(vis[ch]) continue;
            vis[ch]=1;
            dq.pb(ch);
        }
    }
}
int main()
{
    scanf("%d%d%d", &N, &M);
    scanf("%s", s);
    for(int i=0; i<N; i++)
        arr[i+1].cnt[s[i]-'a']++;
    memset(st, -1, sizeof st);
    memset(Ed, -1, sizeof Ed);
    for(int i=0; i<M; i++)
    {
        int a, b;
        scanf("%d%d", &a, &b);
        G[a].pb(b);
    }
    ll ans=0;
    for(int i=1; i<=N; i++)
    {
        if(st[i] == -1)
        {
            dfs(i);
        }
    }
    if(cy)
    {
        ans=-1;
    }
    else
    for(int i=1;i<=N;i++) for(int c=0;c<26;c++) ans=max(ans, (ll)arr[i].cnt[c]);
    cout<<ans;
}
