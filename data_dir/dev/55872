#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long 

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << endl;
        //use cerr if u want to display at the bottom
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define trace(...)
#endif

typedef trie<string,null_type,trie_string_access_traits<>,pat_trie_tag,trie_prefix_search_node_update> pref_trie;
typedef tree<long int,null_type,less<long int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
typedef cc_hash_table<long int,long int, hash<long int>, equal_to<long int>, direct_mask_range_hashing<long int>, 
hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;

class BIT{
    vector<long int> vec;
    public:
        BIT(long int n){
            vec.resize(n);
        }

        void update(long int idx, long int val){
            for(; idx < vec.size(); idx += idx & (-idx))
                vec[idx] += val;
        }

        long int query(long int b){
            long int result = 0;
            while(b > 0){
                result += vec[b];
                b -= b & (-b);
            }
            return result;
        }
};

int main(){
   IOS;
 /*    #ifndef ONLINE_JUDGE
         freopen("in.txt",  "r",  stdin);
         freopen("out.txt", "w", stdout);
     #endif */
   
   long int n,p;
   cin>>n>>p;

   vector<pair<long int,long int>> v(n);
   vector<vector<long int>> g(n);

   for(long int i = 0; i < n; i++)
      v[i].first = i;

   for(long int i = 0; i < n; i++){
      long int x,y;
      cin>>x>>y;
      v[x-1].second++;
      v[y-1].second++;
      g[min(x,y) - 1].push_back(max(x,y) - 1);
   }

   auto copy = v;
   sort(v.begin(),v.end(),[](pair<long int,long int> a,pair<long int,long int> b){
      return a.second > b.second;
   });

   for(auto &ele : g)
    sort(ele.begin(),ele.end());


   long int ans = 0;

   BIT tree(2*n + 1);

   for(long int suspect1 = 0; suspect1  < n; suspect1++){
      long int numSuspects = v[suspect1].second;
      long int minSuspectsReq = p - numSuspects;
      long int possibleSuspect2 = suspect1 - tree.query(minSuspectsReq);
      ans += possibleSuspect2;
      tree.update(numSuspects + 1,1);
   }


   for(long int i = 0; i < n; i++){
      for(long int j = 0; j < g[i].size(); j++){
          
          long int cnt = 0;
          long int k = j;
          
          while(k < g[i].size() && g[i][j] == g[i][k])
            k++;

          cnt += (k - j);

          if(k != j)
            j = k - 1;

          long int one = copy[i].second;
          long int two = copy[g[i][j]].second;
          long int common = cnt;

          if(one + two < p)
            continue;
          else{
            if(one + two - common >= p)
              continue;

            ans--;
          }
      }
   }

   cout<<ans;
   return 0;
}