#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> void mini(T &l, T r) {l = min(l, r);}
template <class T> void maxi(T &l, T r) {l = max(l, r);}

template <class T> using Tree = tree <T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

string to_string(string s) {
    return '"' + s + '"';
}

string to_string(bool a) {
    return a ? "T" : "F";
}

string to_string(const char* s) {
    return to_string((string) s);
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
    return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A>
string to_string(A v) {
    bool first = true;
    string res = "{";
    for (const auto &x : v) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(x);
    }
    res += "}";
    return res;
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
    cerr << " " << to_string(H);
    debug_out(T...);
}

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

#define X first
#define Y second

using ll = long long;
using ld = long double;

const int N = 400, md = 1e9 + 7;

int n, m, x;
int f[3][N][N];

void upd(int &x, int y) {
    x = (x + y) % md;
    if (x < 0) x += md;
}

void run() {
    cin >> n >> m >> x;
    if (n > m) {
        puts("0");
        return;
    }
    f[0][0][0] = 1;
    for (int i = 1; i <= m + 1; ++i) {
    /*
        for (int j = 0; j <= n; ++j) {
            fill_n(f[i & 1][j], n + 1, 0);
        }*/
        for (int j = 0; j <= n; ++j) {
            for (int k = 0; k <= j; ++k) {
                f[i & 1][j][k] = 0;
                if (j > 0 && k > 0) {
                    upd(f[i & 1][j][k], f[(i - 1) & 1][j - 1][k]);  //open and close
                    upd(f[i & 1][j][k], f[(i - 1) & 1][j - 1][k - 1]);  //open
                }
                if (i != x) {
                    upd(f[i & 1][j][k], f[(i - 1) & 1][j][k]);  //do nothing
                    upd(f[i & 1][j][k], f[(i - 1) & 1][j][k + 1]);  //close
                }
            }
        }
    }
    ll ans = f[(m + 1) & 1][n][0];
    debug(ans);
    for (int i = n; i >= 1; --i) {
        ans = ans * i % md;
    }
    
    printf("%lld\n", ans);

}

int main() {
    run();
    return 0;
}
