#include<bits/stdc++.h>
using namespace std;
const int MAXN = 3007;

vector<int>edg[MAXN];
int d[MAXN][MAXN];

void bfs(int n, int s)
{
    for (int i = 1; i <= n; i++) d[s][i] = MAXN;

    queue<int>q;
    q.push(s);
    d[s][s] = 0;

    while (!q.empty()) {
        int u = q.front(); q.pop();
        for (int v : edg[u]) {
            if (d[s][v] > d[s][u]+1) {
                d[s][v] = d[s][u]+1;
                q.push(v);
            }
        }
    }
}

int main()
{
    int n, m;
    cin >> n >> m;

    for (int i = 1; i <= m; i++) {
        int u, v;
        cin >> u >> v;
        edg[u].push_back(v);
        edg[v].push_back(u);
    }

    for (int i = 1; i <= n; i++) bfs(n, i);

    int s1, t1, l1;
    cin >> s1 >> t1 >> l1;
    int s2, t2, l2;
    cin >> s2 >> t2 >> l2;

    if (d[s1][t1] > l1 || d[s2][t2] > l2) {
        cout << -1 << endl;
        return 0;
    }

    int ans = d[s1][t1]+d[s2][t2];

    for (int i = 1; i <= n; i++) {
        for (int j = i+1; j <= n; j++) {
            int g1 = min(d[s1][i]+d[i][j]+d[j][t1], d[s1][j]+d[j][i]+d[i][t1]);
            if (g1 > l1) continue;
            int g2 = min(d[s2][i]+d[i][j]+d[j][t2], d[s2][j]+d[j][i]+d[i][t2]);
            if (g2 > l2) continue;
            ans = min(ans, g1+g2-d[i][j]);
        }
    }
    assert(ans <= m);

    cout << m-ans << "\n";

    return 0;
}
