#include<bits/stdc++.h>
#include<ext/numeric>
#include<ext/hash_map>
using namespace std;
using namespace __gnu_cxx;

#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)  (int)v.size()
#define WHITE -1
#define GREY   0
#define BLACK  1
#define CLR(a,v) memset(a,v,sizeof a)
#define PC(x) __builtin_popcount(x)
#define MP make_pair

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef unsigned int ui;

//typedef complex<double> point
//#define X real()
//#define Y imag()
//#define vec(a,b) ((b)-(a))
//#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define colliner pointOnLine

const double PI = acos(-1.0);

int dx[] = { 0, -1, 0, 1, -1, -1, 1, 1 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };

int DX[] = { -1, -1, 0, 1, 1, 1, 0, -1 };
int DY[] = { 0, 1, 1, 1, 0, -1, -1, -1 };

const int MAX = 1005, MOD = 1e9 + 7, oo = (1 << 30), MAXLOG = 20;
const ll OO = 1ll << 60, inf = 1e15;
const double EPS = 1e-9;

int n, a[MAX], siz[10], pos[8][MAX], AT[MAX], cur, memo[MAX][1 << 8];

int solve(int idx, int msk) {
	if (idx == n) {
		if (PC(msk) != 8 && cur != 1)
			return -oo;
		return 0;
	}
	int &ret = memo[idx][msk];
	if (~ret)
		return ret;
	ret = solve(idx + 1, msk);
	if ((msk >> a[idx]) & 1)
		return ret;
	int p = AT[idx];
	if (p + cur <= siz[a[idx]])
		ret = max(ret,
				solve(pos[a[idx]][p + cur - 1] + 1, msk | (1 << a[idx])) + cur);
	if (p + cur - 1 <= siz[a[idx]] && cur != 1)
		ret = max(ret,
				solve(pos[a[idx]][p + cur - 2] + 1, msk | (1 << a[idx])) + cur
						- 1);
	return ret;
}

bool check(int x) {
	CLR(memo, -1);
	cur = x;
	int ret = solve(0, 0);
	return ret >= 0;
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
#endif
	scanf("%d", &n);
	for (int i = 0; i < n; ++i) {
		scanf("%d", &a[i]);
		--a[i];
		AT[i] = siz[a[i]];
		pos[a[i]][siz[a[i]]++] = i;
	}
	int l = 1, r = 130;
	while (l < r) {
		int mid = l + ((r - l + 1) >> 1);
		if (check(mid))
			l = mid;
		else
			r = mid - 1;
	}
	cur = l;
	CLR(memo, -1);
	printf("%d\n", solve(0, 0));
}
