using namespace std;
#include <bits/stdc++.h>
#define ll int64_t
#define pll pair <ll,ll>
#define pii pair <int,int>
#define fir first
#define sec second
#define mp make_pair
#define pb push_back
#define MASK(i) ((1LL)<<(i))
#define BIT(x,i) (((x)>>(i))&1)
#define all(c) (c).begin(),(c).end()
#define sz(c) (c).size()
#define fn "102D"    ///FILE_NAME_HERE
#define rep(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rrep(c,it) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)

template <class T,class U>
void maximize(T &x,U y)
{
    if(x < y)x=y;
}
template <class T,class U>
void minimize(T &x,U y)
{
    if(x > y)x=y;
}
template <class T>
T Abs(T x)
{
    return (x < (T)0 ? -x : x);
}
template <class T,class U,class V>
T addmod(T x,U y,V mod)
{
    return ((x + y)%mod + mod)%mod;
}
template <class T,class U,class V>
T submod(T x,U y,V mod)
{
    return ((x - y)%mod + mod)%mod;
}
template <class T,class U,class V>
T mulmod(T x,U y,V mod)
{
    return (ll)x*y%mod;
}
///---------------------------------------------------------END_TEMPLATE-------------------------------------------------------///

namespace task{

const int base = 1e9+7;
const int maxRange=1e9 + 10;
const int N=1e5+5;
pii a[N];
int n,m;

struct FenwickTree
{
    unordered_map <int,int> ft;
    void update(int node,int val)
    {
        for(;node <= maxRange;node += node & (-node))
            ft[node]=addmod(ft[node],val,base);
    }
    int rsq(int node)
    {
        int ret=0;
        for(;node > 0;node -= node & (-node))
            ret=addmod(ret,ft[node],base);
        return ret;
    }
    int rsq(int l,int r)
    {
        if(l > r)return 0;
        return (rsq(r) - rsq(l - 1) + base)%base;
    }
}fen;

void solve()
{
    cin>>n>>m;
    for(int i=1;i<=m;++i)
        cin>>a[i].sec>>a[i].fir;
    sort(a+1,a+1+m);
    for(int i=1;i<=m;++i)
        ++a[i].fir,++a[i].sec;
    fen.update(1,1);
    ++n;
    for(int i=1;i<=m;++i)
    {
        int l = a[i].sec;
        int r = a[i].fir;
        int ret = fen.rsq(l,r - 1);
        fen.update(r,ret);
    }
    cout<<fen.rsq(n,n);
}}

int main(void)
{
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    #ifndef ONLINE_JUDGE
    freopen(fn".inp","r",stdin);
    freopen(fn".out","w",stdout);
    #endif // ONLINE_JUDGE
    task::solve();
}
