#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <climits>
#include <unordered_map>
using namespace std;
#define ll long long
#define mp make_pair
//#define ld long double
const int mod = (1e9) + 7;
const double eps = 1e-9;
const int siz = 1e5 + 5, siz2 = 1e4 + 5;
int n, m, k, bestleft[505][505], dp[505][505];
vector<int> pos[505];
char timetable[505][505];
void calcbestleft() {
	for (int i = 0; i < n; i++) {
		int sz = pos[i].size();
		if (sz == 0)
			continue;
		bestleft[i][1] = 1;
		for (int j = 2; j <= sz; j++) {
			bestleft[i][j] = INT_MAX;
			int cur = 0, co = 0, f = 0;
			for (int k = 0; k < m; k++) {
				if (timetable[i][k] == '1') {
					co++;
				}
				if (co != 0) {
					cur++;
					if (co == j) {
						bestleft[i][j] = min(bestleft[i][j], cur);
						co--;
						cur -= pos[i][f + 1] - pos[i][f];
						f++;
					}
				}
			}
		}
	}
}
int solve(int i, int k) {
	if (i == n)
		return 0;
	if (dp[i][k] != -1)
		return dp[i][k];
	int sz = pos[i].size(), ans = INT_MAX;
	for (int j = sz; j >= 0; j--) {
		if (sz - j > k) {
			break;
		}
		ans = min(ans, bestleft[i][j] + solve(i+1, k-(sz-j)));
	}
	return dp[i][k] = ans;
}
int main()
{
	scanf("%d%d%d", &n, &m, &k);
	for (int i = 0; i < n; i++) {
		scanf("%s", timetable[i]);
		for (int j = 0; j < m; j++) {
			if (timetable[i][j] == '1') {
				pos[i].push_back(j);
			}
		}
	}
	memset(dp, -1, sizeof dp);
	calcbestleft();
	printf("%d\n", solve(0,k));
	return 0;
}