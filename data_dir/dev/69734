#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <sstream>
#include <iostream>
#include <cmath>
#include<cstring>
#include <cstdio>
#include <stack>
#include<iomanip>
#include<queue>
#include<functional>
#include<iterator>
#include<new>
#include<cstdlib>
using namespace std;
#define pi 3.141592653589793
#define ii pair<int,int>
#define llll pair<ll,ll>
#define ll long long
#define p10(ans) printf("%0.10f\n", ans)
#define pr(ans) printf("%d\n", ans)
#define scc(x)  scanf("%c", &c)
#define pll(ans) printf("%lld\n", ans)
#define scll(x) scanf("%lld",&x)
#define scd(a)  scanf("%lf", &a)
#define sci(x)  scanf("%d",&x)
#define pc(ans)  printf("%c", ans)
#define pd(a)    printf("%lf", a)
#define scanfchararray(arr) scanf("%s", arr)
#define printfstring(s)    printf("%s\n", s.c_str())
#define all(v)             v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)            ((int)((v).size()))
#define mk(x,y)                      make_pair(x,y)
#define mod 1000000007
#define mem(arr,d) memset(arr,d,sizeof(arr))
#define ninf -10000000000000000;
int n, m,k;
vector<ii>start;
int vis[2010][2010];
int ans[2010][2010];
void bfs(int i,int j)
{
	vis[i][j] = 1;
	queue<ii>q;
	q.push({i,j});
	while (!q.empty())
	{
		int fi = q.front().first; int si = q.front().second;
		ans[fi][si] = min(ans[fi][si], vis[fi][si]);
		q.pop();
		if (fi - 1 > 0 && !vis[fi - 1][si]) { q.push({ fi - 1,si }); vis[fi - 1][si] = vis[fi][si] + 1; }
		if (fi + 1 <= n && !vis[fi + 1][si]) { q.push({ fi + 1,si }); vis[fi + 1][si] = vis[fi][si] + 1; }
		if (si - 1 > 0 && !vis[fi][si - 1]) { q.push({ fi ,si - 1 }); vis[fi][si-1]= vis[fi][si] + 1 ;}
		if (si + 1 <= m && !vis[fi][si + 1]) { q.push({ fi ,si + 1 }); vis[fi][si + 1] = vis[fi][si] + 1; }
	}
}
int main() 
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int x, y;
	sci(n); sci(m);
	sci(k);
	for (int i = 0; i < k; ++i)
	{
		sci(x); sci(y);
		start.push_back({ x,y });
	}
	for (int i = 0; i <= n; ++i)
	{
		for (int j = 0; j <= m; ++j)ans[i][j] = 1e8;
	}
	for (int i = 0; i < k; ++i)
	{
		bfs(start[i].first,start[i].second);
		mem(vis, 0);
	}

	int xx, yy, maxx = -10;
	for (int i = 1; i <= n; ++i)
	{
		for (int j = 1; j <= m; ++j)
		{
			if (ans[i][j] > maxx)
			{
				maxx = ans[i][j];
				xx = i; yy = j;
			}
		}
	}
	printf("%d %d\n", xx, yy);
}