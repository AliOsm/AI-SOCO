#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 50;
vector<int> nxt[N];
int D[252][252][252];


int main() {
	ios::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);

	int  n, q; 
	cin >> n >> q; 
	string s1, s2, s3;

	string s; cin >> s;

	nxt[(int)s.length()].assign(26, 1e9);
	nxt[(int)s.length()][s.back() - 'a'] = s.length();

	
	for (int i = (int)s.length()-1; i > 0; i--) {
		nxt[i] = nxt[i+1];
		nxt[i][s[i - 1] - 'a'] = i;
	}
	nxt[0] = nxt[1];


	while (q--) {
		char c; cin >> c; 

		if (c == '-') {
			int ind; 
			cin >> ind; 

			if (ind == 1)
				s1.pop_back();
			else if (ind == 2)
				s2.pop_back();
			else
				s3.pop_back();

			
		}
		else {
			int ind; cin >> ind; 
			char c1; cin >> c1; 

			if (ind == 1) {
				s1 += c1;
				int n1 = (int)s1.size();
				for (int n2 = 0; n2 <= s2.size(); n2++) {
					for (int n3 = 0; n3 <= s3.size(); n3++) {
						D[n1][n2][n3] = 1e9;
						if (n1 > 0 && D[n1-1][n2][n3]+1 <= n)
							D[n1][n2][n3] = min(D[n1][n2][n3], nxt[D[n1 - 1][n2][n3]+1][s1[n1 - 1] - 'a']);
						if (n2 > 0 && D[n1][n2-1][n3]+1 <= n)
							D[n1][n2][n3] = min(D[n1][n2][n3], nxt[D[n1][n2 - 1][n3]+1][s2[n2 - 1] - 'a']);
						if (n3 > 0 && D[n1][n2][n3-1]+1 <= n)
							D[n1][n2][n3] = min(D[n1][n2][n3], nxt[D[n1][n2][n3 - 1]+1][s3[n3 - 1] - 'a']);
					}
				}
			}
			else if (ind == 2) {
				s2 += c1;
				int n2 = (int)s2.size();
				for (int n1 = 0; n1 <= s1.size(); n1++) {
					for (int n3 = 0; n3 <= s3.size(); n3++) {
						D[n1][n2][n3] = 1e9;
						if (n1 > 0 && D[n1 - 1][n2][n3] + 1 <= n)
							D[n1][n2][n3] = min(D[n1][n2][n3], nxt[D[n1 - 1][n2][n3] + 1][s1[n1 - 1] - 'a']);
						if (n2 > 0 && D[n1][n2 - 1][n3] + 1 <= n)
							D[n1][n2][n3] = min(D[n1][n2][n3], nxt[D[n1][n2 - 1][n3] + 1][s2[n2 - 1] - 'a']);
						if (n3 > 0 && D[n1][n2][n3 - 1] + 1 <= n)
							D[n1][n2][n3] = min(D[n1][n2][n3], nxt[D[n1][n2][n3 - 1] + 1][s3[n3 - 1] - 'a']);
					}
				}
			}
			else {
				s3 += c1;
				int n3 = (int)s3.size();
				for (int n1 = 0; n1 <= s1.size(); n1++) {
					for (int n2 = 0; n2 <= s2.size(); n2++) {
						D[n1][n2][n3] = 1e9;
						if (n1 > 0 && D[n1 - 1][n2][n3] + 1 <= n)
							D[n1][n2][n3] = min(D[n1][n2][n3], nxt[D[n1 - 1][n2][n3] + 1][s1[n1 - 1] - 'a']);
						if (n2 > 0 && D[n1][n2 - 1][n3] + 1 <= n)
							D[n1][n2][n3] = min(D[n1][n2][n3], nxt[D[n1][n2 - 1][n3] + 1][s2[n2 - 1] - 'a']);
						if (n3 > 0 && D[n1][n2][n3 - 1] + 1 <= n)
							D[n1][n2][n3] = min(D[n1][n2][n3], nxt[D[n1][n2][n3 - 1] + 1][s3[n3 - 1] - 'a']);
					}
				}
			}
		}
		if (D[s1.size()][s2.size()][s3.size()] > n) {
			cout << "NO\n";
		}
		else {
			cout << "YES\n";
		}
	}



}