#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
using namespace std;
//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
 
#define F first
#define S second
#define sqr(x) ((x) * (x))
#define cub(x) ((x) * (x) * (x))
#define pii pair<int, int>
#define all(c) c.begin(), c.end()
#define tr(c, it) for(decltype (c.begin()) it = c.begin(); it != c.end(); it++)
#define forn(i, n) for(int i = 0; i < int(n); i++)
#define for1(i, n) for(int i = 1; i <= int(n); i++)
#define forN(i, x, n) for(int i = x; i < int(n); i++)
#define eps 1e-12
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define lb lower_bound
#define ub upper_bound
#define ins insert
#define inf 2e9
#define sz 200100
#define mod 1000000007
 
 
#define name "input"
#define isFile 0
 
typedef long long ll;
typedef long double ld;
 
void faster(){
    ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);
	if(isFile){
		freopen(name".in", "r", stdin);
		freopen(name".out", "w", stdout);
    }
}
int n, m, c = 1;
string s[1111];
int was[1111][1111], col[1000010];
bool cc(int x, int y){
	return x >= 0 && x < n && y >= 0 && y < m;
}
bool ch(int x, int y){
	return (cc(x, y) && !was[x][y] && s[x][y] == '.');
}
void dfs(int x, int y){
	was[x][y] = c;
	col[c]++;
	if(ch(x - 1, y))
		dfs(x - 1, y);
	if(ch(x + 1, y))
		dfs(x + 1, y);
	if(ch(x, y - 1))
		dfs(x, y - 1);
	if(ch(x, y + 1))
		dfs(x, y + 1);
}
int f(int x, int y){
	set<int> w;
	w.clear();
	if(cc(x - 1, y))
		w.ins(was[x - 1][y]);
	if(cc(x + 1, y))
		w.ins(was[x + 1][y]);
	if(cc(x, y - 1))
		w.ins(was[x][y - 1]);
	if(cc(x, y + 1))
		w.ins(was[x][y + 1]);
	int res = 0;
	tr(w, it)
		res += col[*it];
	res++;	
	return res % 10;
}
int main()
{
	faster();	
	cin >> n >> m;
	forn(i, n)
		cin >> s[i];
	forn(i, n)
	forn(j, m)
		if(!was[i][j] && s[i][j] == '.'){
			dfs(i, j);
			c++;
		}
	forn(i, n)
	forn(j, m)
		if(s[i][j] == '*')
			s[i][j] = f(i, j) + '0';
	forn(i, n)
		cout << s[i] << endl;
	return 0;				
}	