#include <bits/stdc++.h>

using namespace std;

const int N = 2e5 + 1995;

int n, m, k, c[N], u[N], vis = 1, l[N], r[N], p[N];
vector <int> g[N];

#define pb push_back
#define mp make_pair
#define sz(a) int(a.size())

int cmp = 0;

map <int, int> cnt;

int parent(int v){
	if(v == p[v]) return v;
	p[v] = parent(p[v]);
	return p[v];
}

vector <int> comp[N];

void dsu_union(int a, int b){
	a = parent(a);
	b = parent(b);
	if(rand() & 1) swap(a, b);
	if(a!=b) p[a] = b;
}

int ans = 0;
int mx = 0;
void dfs(int v, int cc){
	u[v] = vis;
	for(int i = 0; i < sz(g[v]); i++){
		int to = g[v][i];
		if(u[to] != vis){
			dfs(to, cmp);
		}
	}
	cnt[c[v]]++;
	mx = max(mx, cnt[c[v]]);
	comp[cmp].pb(c[v]);
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> m >> k;
	for(int i = 1; i <= n; i++) cin >> c[i], p[i] = i;
	for(int i = 1; i <= m; i++){
		cin >> l[i] >> r[i];
		g[l[i]].pb(r[i]);
		g[r[i]].pb(l[i]);
	}
	for(int i = 1; i <= n; i++){
		if(u[i] == 0){
			cmp++;
			mx = 0;
			cnt.clear();
			dfs(i, cmp);
			ans += abs(comp[cmp].size() - mx);
		}
	}
	cout << ans;
}