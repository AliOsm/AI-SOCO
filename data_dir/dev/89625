/*-----Deep D. Savani------------
-------DAIICT,INDIA--------------
*/
#include<bits/stdc++.h>
#define pb push_back
#define ff first
#define ss second
#define mp make_pair
#define mod 1000000007
#define deb(x) cout<<#x<<" : "<<x<<endl;
#define deb2(x,y) cout<<#x<<" : "<<x<<"\t"<<#y<<" : "<<y<<endl;
#define deb3(x,y,z) cout<<#x<<" : "<<x<<"\t"<<#y<<" : "<<y<<"\t"<<#z<<" : "<<z<<endl;
#define nax 1000010
#define FIO ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
typedef long long ll;
    
using namespace std;

//#include <ext/pb_ds/assoc_container.hpp> 
//#include <ext/pb_ds/tree_policy.hpp> 
//using namespace __gnu_pbds; 

//s#define T ll  
//#define ordered_set tree<T, null_type,less<T>, rb_tree_tag,tree_order_statistics_node_update> 
    
long long modulo(long long base,long long exponent,long long modulus);
long long choose(ll n,ll k);
ll inverse(ll a,ll m);



void build()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
}
vector<ll> tree(4*nax);
vector<ll> a;

void buildtree(ll node,ll nl,ll nr)
{
	if(nl==nr)
	{
		tree[node]=nl;
		return;
	}
	ll mid=(nl+nr)/2;
	buildtree(2*node+1,nl,mid);
	buildtree(2*node+2,mid+1,nr);

	if(a[tree[2*node+1]]<a[tree[2*node+2]])
		tree[node]=tree[2*node+1];
	else
		tree[node]=tree[2*node+2];
}

ll querry(ll node,ll nl,ll nr,ll l,ll r)
{
	if(l>r || nl>nr || l>nr || nl>r)
		return -1;
	if(l<=nl && nr<=r)
		return tree[node];

	ll mid=(nl+nr)/2;
	ll p1=querry(2*node+1,nl,mid,l,r);
	ll p2=querry(2*node+2,mid+1,nr,l,r);

	if(p1==-1)
		return p2;
	if(p2==-1)
		return p1;
	if(a[p1]<a[p2])
		return p1;
	else
		return p2;
}
ll n;
ll solve(ll l,ll r,ll last)
{
	if(l>r)
		return 0;

	ll mid=querry(0,0,n-1,l,r);
	ll mini=a[mid];

	ll ans=min(r-l+1,solve(l,mid-1,mini)+solve(mid+1,r,mini) + (mini-last));
	return ans;
}    
    
int main(){

    build();
    FIO
    
    cin>>n;
    a.resize(n);
    for(int  i=0;i<n;i++)
    cin>>a[i];
	
	buildtree(0,0,n-1);
    ll ans=solve(0,n-1,0);

    cout<<ans<<endl; 
    return 0;
}
    
        
    
long long modulo(long long base,long long exponent,long long modulus)
{
    if(modulus ==1)
        return 0;
    
    long long result=1;
    base=base % modulus;
    while(exponent>0)
    {
        if(exponent%2==1)
        {
            result=(result*base) % modulus;

        }
        exponent=exponent>>1;
        base = (base*base) % modulus;
    }
        return result;
}
    
long long choose(ll n,ll k)
{
    if(k==0)  return 1;
    return (n* choose(n-1,k-1))/k;
}
    
void EE(ll a,ll b,ll &co1,ll &co2)
{
    if(a%b==0)
    {
        co1=0;
        co2=1;
        return;
    }
    EE(b,a%b,co1,co2);
    ll temp=co1;
    co1=co2;
    co2=temp-co2*(a/b);
}
    
ll inverse(ll a,ll m)
{
    ll x,y;
    EE(a,m,x,y);
    if(x<0) x+=m;
    return x;
}