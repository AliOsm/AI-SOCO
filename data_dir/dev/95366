#include <stdio.h>
#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second

using namespace std;
//using namespace __gnu_pbds;

//typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int N = 100000;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 31;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const int MAX_INT = (1 << 31) - 1;
const double eps = 1e-6;
const double pi = atan2(0, -1);

struct state
{
    int mi, res, sum;
    state() {}
    state(int a, int b, int c)
    {
        mi = a;
        res = b;
        sum = c;
    }
};

const int B = 320;

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("battleship.out", "w", stdout);
    //ios_base::sync_with_stdio(0);
    //cin.tie(0);
    //cout.precision(20);
    //int TL = 0.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    int n;
    scanf("%d", &n);
    int a[n][3], b[n];
    rep(i, 0, n)
    {
        scanf("%d %d", &a[i][0], &a[i][1]);
        if (a[i][1] == 1)
            scanf("%d", &a[i][2]);
        a[i][0]--;
        if (a[i][1] == 1)
            b[a[i][0]] = a[i][2];
    }
    int bal[n];
    fill(bal, bal + n, 0);
    int cnt = (n + B - 1) / B;
    state block[cnt];
    rep(i, 0, cnt)
        block[i] = {0, 0, 0};
    rep(i, 0, n)
    {
        if (a[i][1] == 0)
        {
            int num = a[i][0] / B, l = num * B;
            bal[a[i][0]]--;
            block[num] = {0, 0, 0};
            int curr = 0;
            rep(j, l, min(l + B, n))
            {
                curr += bal[j];
                block[num].mi = min(block[num].mi, curr);
                block[num].res = max(0, block[num].res + bal[j]);
            }
            block[num].sum = curr;
        }
        else
        {
            int num = a[i][0] / B, l = num * B;
            bal[a[i][0]]++;
            block[num] = {0, 0, 0};
            int curr = 0;
            rep(j, l, min(l + B, n))
            {
                curr += bal[j];
                block[num].mi = min(block[num].mi, curr);
                block[num].res = max(0, block[num].res + bal[j]);
            }
            block[num].sum = curr;
        }
        bool ok = false;
        int mi = 0;
        repb(j, cnt - 1, -1)
        {
            if (block[j].res + mi > 0)
            {
                int curr = 0, mi1 = mi;
                repb(k, min((j + 1) * B, n) - 1, j * B - 1)
                {
                    curr += bal[k];
                    if (bal[k] == 1 && 1 + mi1 > 0)
                    {
                        printf("%d\n", b[k]);
                        ok = true;
                        break;
                    }
                    mi1 = min(0, mi1 + bal[k]);
                }
            }
            else
            {
                mi = min(block[j].mi, block[j].sum + mi);
            }
            if (ok)
                break;
        }
        if (!ok)
            printf("%d\n", -1);
    }
    return 0;
}
