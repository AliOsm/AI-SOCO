/*---> 17 December 2019 <--- > 00:03:23 <---*/
// #pragma GCC optimize("Ofast")
// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
// #pragma GCC optimize("unroll-loops")
// #pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("O3")
//#pragma GCC target ("sse4")
#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
using namespace std;
//template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;
#define int long long
#define F first
#define S second
#define mod 1000000007
#define inf (int)1e10+5
#define sz(x) (int)x.size()
#define PI 3.141592653589793238510
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define __ ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define vi vector<int>
#define vpii vector<pair<int,int> > 
#define vvi vector<vector<int> >
#define PRINT_TIME cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s." <<endl;
#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename   enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
  ris << "(" << d.first << ", " << d.second << ")";
}
sim dor(rge<c> d) {
  *this << "[";
  for (auto it = d.b; it != d.e; ++it)
    *this << ", " + 2 * (it == d.b) << *it;
  ris << "]";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "
typedef long double ld;
typedef pair<int,int> pii;
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
const int N=3e5+5;
int a[N],smin[N][21],sgcd[N][21],lg[N],n;

int q1(int qst,int qen){
	int len=qen-qst+1;
	return min(smin[qst][lg[len]],smin[qen-(1<<lg[len])+1][lg[len]]);
}
int q2(int qst,int qen){
	int len=qen-qst+1;
	//debug()<< imie(len);
	return __gcd(sgcd[qst][lg[len]],sgcd[qen-(1<<lg[len])+1][lg[len]]);
}
bool check(int x){
	for(int i=1;i+x<=n;i++){
		int mn=q1(i,i+x),gc=q2(i,i+x);
		if(mn==gc){
			return true;
		}
	}
	return false;
}
int32_t main(){__
	cin>>n;
	for(int i=1;i<=n;i++)
		cin>>a[i];
	for(int i=1;i<=n;i++){
		sgcd[i][0]=a[i];
		smin[i][0]=a[i];
	}
	lg[1]=0;
	for(int i=2;i<=n;i++){
		lg[i]=lg[i/2]+1;
	}
	for(int k=1;k<=20;k++){
		for(int i=1;i<=n;i++){
			int j=i+(1<<(k-1));
			if(j<=n)
			{
				smin[i][k]=min(smin[i][k-1],smin[j][k-1]);
				sgcd[i][k]=__gcd(sgcd[i][k-1],sgcd[j][k-1]);
			}
		}
	}
	// debug()<< imie(q2(2,2));
	int lw=0,hi=n-1;
	while(lw<hi){
		// debug()<< imie(lw) imie(hi);
		int mid=(lw+hi+1)/2;
		// debug()<< imie(mid) imie(check(mid));
		if(check(mid)){
			lw=mid;
		}
		else{
			hi=mid-1;
		}
	}
	vi ans;
	for(int i=1;i+lw<=n;i++){
		int mn=q1(i,i+lw),gc=q2(i,i+lw);
		if(mn==gc){
			ans.push_back(i);
		}
	}
	cout<<sz(ans)<<" "<<lw<<"\n";
	for(int i=0;i<sz(ans);i++)
		cout<<ans[i]<<" ";
	cout<<"\n";
return 0;
}