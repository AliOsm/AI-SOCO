#include <iostream>
#include <algorithm>
#include <vector>
#include <stdio.h>
#include <math.h>
using namespace std;
struct query{
	int L,R,i;
	query(int LL,int RR,int ii)
	{
		L=LL;
		R=RR;
		i=ii;
	}
};
int arr[100005],st[100005],en[100005],tree[100005],ct[100005],bs,n;
vector<query> q;
pair<int,int> tmp[100005];
int a[100005],c[100005];
vector<int> path,v[100005];
void dfs(int node,int pnode)
{
	st[node]=path.size();
	path.push_back(node);
	for (int i=0;i<v[node].size();i++)
	{
		if (v[node][i]!=pnode)
		dfs(v[node][i],node);
	}
	en[node]=path.size()-1;
}
bool cmp(query a,query b)
{
	if (st[a.L]/bs!=st[b.L]/bs)
	return st[a.L]/bs<st[b.L]/bs;
	return en[a.L]<en[b.L];
}
void update(int idx,int val)
{
    for (int i=idx+1;i<n+5;i+=(i&-i))
    tree[i]+=val;
}
int Query(int idx)
{
    int sum=0;
    for (int i=idx+1;i>0;i-=(i&-i))
    sum+=tree[i];
    return sum;
}
void add(int x)
{
	x=path[x];
	update(ct[c[x]],-1);
	ct[c[x]]++;
	update(ct[c[x]],1);
}
void remove(int x)
{
	x=path[x];
	update(ct[c[x]],-1);
	ct[c[x]]--;
	update(ct[c[x]],1);
}
int r()
{
    int result=0;
    char ch;
    ch=getchar();
    while (true)
	{
        if (ch>='0' && ch<='9')
		break;
        ch=getchar();
    }
    while (true) 
	{
        result=(result*10)+(ch-'0');
        ch=getchar();
        if (ch<'0' || ch>'9')
		break;
    }
    return result;
}
int get(int s,int e)
{
	return Query(e)-Query(s-1);
}
int main()
{
	int m,ql,qr;
	n=r();
	m=r();
	for (int i=1;i<=n;i++)
	c[i]=r();
	for (int i=1;i<n;i++)
	{
		int a=r(),b=r();
		v[a].push_back(b);
		v[b].push_back(a);
	}
	dfs(1,1);
	for (int i=0;i<m;i++)
	{
		ql=r();
		qr=r();
		q.push_back(query(ql,qr,i));
	}
	bs=sqrt(path.size());
	sort(q.begin(),q.end(),cmp);
	int l,r,cl=0,cr=0;
	for (int i=0;i<m;i++)
	{
		l=st[q[i].L];
		r=en[q[i].L];
		while (cl>l)
		{
			cl--;
			add(cl);
		}
		while (cr<=r)
		{
			add(cr);
			cr++;
		}
		while (cl<l)
		{
			remove(cl);
			cl++;
		}
		while (cr>r+1)
		{
			cr--;
			remove(cr);
		}
		a[q[i].i]=get(q[i].R,n);
	}
	for (int i=0;i<m;i++)
	printf("%d\n",a[i]);
}
