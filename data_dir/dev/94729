#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define FILE "series"
#define ld long double
#define endl '\n'
#define pii pair <int, int>
//#define int long long

//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;
using namespace __gnu_pbds;

typedef tree <pii,null_type,less<pii>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const int N = 1e5 + 5;
const int mod = 1e9 + 7;
const int rx[4] = {1, -1, 0, 0};
const int ry[4] = {0, 0, 1, -1};
const ld pi = acos(-1.0);

vector <int> all[N];

struct fenwick {
    vector <int> t[N];

    void update(int pos, int x) {
        for (int i = pos; i < N; i += i & -i) {
            t[i].pb(x);
        }
    }

    int query(int l, int r) {
        int res = 0;
        for (int i = l; i; i -= i & -i){
            res += upper_bound(t[i].begin(), t[i].end(), r) - upper_bound(t[i].begin(), t[i].end(), l - 1);
        }
        return res;
    }

    void normalize() {
        for (int i = 0; i < N; i++) {
            sort(t[i].begin(), t[i].end());
        }
    }

    fenwick(){}
};

fenwick T;

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    srand(5816);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    //   freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
#endif //
    int n, k;
    cin >> n >> k;
    for (int i = 0; i < n; i++){
        int x;
        cin >> x;
        all[x].pb(i + 1);
    }
    for (int i = 1; i < N; i++){
        for (int j = 0; j < all[i].size(); j++){
             if (j < k) T.update(1, all[i][j]);
             else T.update(all[i][j - k] + 1, all[i][j]);
        }
    }
    T.normalize();
    int q;
    cin >> q;
    int last = 0;
    while (q--){
        int l, r;
        cin >> l >> r;
        l = (l + last) % n + 1;
        r = (r + last) % n + 1;
        if (l > r) swap(l, r);
        last = T.query(l, r);
        cout << last << endl;
    }
    return 0;
}
