
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <ctime>
#include <random>
#include <iomanip>

#include <algorithm>
#include <vector>
#include <queue>
#include <string>
#include <stack>
#include <set>
#include <map>
#include <numeric>
#include <functional>
#include <deque>
#include <array>
#include <iterator>
#include <bitset>
#include <initializer_list>

using namespace std;

#include <ext/rope>

using namespace __gnu_cxx;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;

#define int long long

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VPI;

//tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> tr;

#define add push_back
#define rem pop_back
#define ALL(x) x.begin(), x.end()
#define SORT(x) sort(ALL(x))
#define SZ(x) int((x).size())
#define F first
#define S second
#define DEBUG(x) cout << #x << " " << x << endl;


const double EPS = 1e-9;
const double PI = acos(-1.);
const int MOD = 1e9 + 7;
const int MAXN = 500001;
int INF = __INT64_MAX__;
int MAX = -1e18;
int MIN = 1e18;
string YN[] = {"NO", "YES"};


#define REPI(it, x) for(__typeof((x).begin()) it = (x).begin(); it != (x).end(); it++)
#define REP(i, a, b)  for(int i = a; i <  b; i++)
#define REPN(i, a, b) for(int i = a; i <= b; i++)
#define REPV(i, b, a) for(int i = b; i >= a; i--)


inline int GCD_E(int a, int b, int& x, int& y)
{
        if (!a) {
                x = 0;
                y = 1;
                return b;
        }
        int x1, y1;
        int d = GCD_E(b % a, a, x1, y1);
        x = y1 - (b / a) * x1;
        y = x1;
        return d;
}


inline int divMOD(int a, int b, int m = MOD)
{
        int x, y;
        int g = GCD_E(b, m, x, y);
        x = (x % m + m) % m;
        return (a * x) % m;
}


#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))


int px[] = { 1, 1, -1, -1 };
int py[] = { -1, 1, -1, 1};
int dx[] = { 1, 0, -1, 0, 1, 1, -1, -1 };
int dy[] = { 0, 1, 0, -1, 1, -1, 1, -1 };
int fx[] = {-2, -2, -1, -1,  1,  1,  2,  2};
int fy[] = {-1,  1, -2,  2, -2,  2, -1,  1};


template<typename T1, typename T2> T2 max(T1 a, T2 b) { T2 max = a > b ? a : b; return max; }
template<typename T1, typename T2> T2 min(T1 a, T2 b) { T2 min = a < b ? a : b; return min; }


int POW (int a, int n, int m = MOD)
{
        int res = 1;
        while (n) {
                if (n & 1)
                        res = (res * a) % m;
                a = (a * a) % m;
                n >>= 1;
        }
        return res;
}


vector<int> vc, ans;

string s, t;

set<int> st;

map<int, int> mp;

static const int N = 1 << 20;
static const int M = 123456;

static int n, m, result, k, cnt;
static int A[N], B[N];


void solution()
{
        cin >> n >> k;
        REPN(i, 1, n) {
                cin >> m;
                mp[m]++;
                MIN = min(MIN, m);
        }
        int t = 0;
        if(mp.size() == 1){
                cout << 0;
                return;
        }
        REPV(i, 2e5, 1){
                if(mp.count(i)){
                        if(i == MIN){
                                break;
                        }
                        if(t + mp[i] > k){
                                cnt++;
                                t = 0;
                        }
                        t += mp[i];
                        mp[i - 1] += mp[i];
                }
        }
        cout << cnt + 1;


}


__INT16_C() main(__int32 argc, char * argv[])
{

        //freopen("input.txt", "r", stdin);
        //freopen("output.txt", "w", stdout);

        ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
        //cout.precision(15);

        int query = 1;
        //cin >> query;

        while(query--) solution();

}
