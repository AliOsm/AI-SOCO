#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//#define int long long
#define IOS ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0)
inline int in(){int32_t x ; scanf("%d",&x) ; return x ;}
inline long long lin(){long long x ; scanf("%lld",&x) ; return x;}
const int maxn = 2e5 + 10;
const int inf = 1e18 ;
ordered_set<int> os[4 * maxn];
int a[maxn] , n , q;
bool debug = false;
inline void build(int p = 0 , int l = 0 , int r = n - 1)
{
	for (int i = l ; i <= r;  i ++) os[p].insert(a[i]);
	if (l == r)
		return ;
	int mid = (l + r) >> 1;
	build(2 * p + 1, l , mid);
	build(2 * p + 2 , mid + 1, r);
}
inline int get(int ql , int qr , int A , int B , int p = 0 , int l = 0 , int r = n - 1)
{
	if (l > qr || r < ql) return 0;
	if (l >= ql && r <= qr)
	{
		int result = os[p].order_of_key(B + 1) - os[p].order_of_key(A);
		return result;
	}
	int mid = (l + r) >> 1;
	return get(ql,qr,A,B,2*p+1,l,mid)+get(ql,qr,A,B,2*p+2,mid+1,r);
}
int turn;
int id ;
inline void update(int qx , int val , int p = 0 , int l = 0 , int r = n - 1)
{
	if (l > qx ||r < qx) return ;
	if (turn == 0 || (id < l || id > r))
		os[p].erase(a[qx]);
	os[p].insert(val);
	int mid = (l + r) >> 1;
	if (l == r)
	{
		a[qx] = val;
		return ;
	}
	update(qx,val,2*p+1,l,mid);
	update(qx,val,2*p+2,mid+1,r);
}
int32_t main()
{ 
    n = in() , q = in();
	for (int i = 0 ; i < n ; i ++) a[i] = i + 1;
	long long inversions = 0;
	build();
	while(q --)
	{
		int a = in() - 1 , b = in() - 1;
		if (a > b ) swap(a,b);
		if (a == b) {
			printf("%lld\n",inversions);
			continue;
		}
		int AA = ::a[a] , BB = ::a[b];
		int between = get(a,b,min(AA,BB),max(AA,BB)) - 2;
		int sign;
		if (::a[a] > ::a[b])
			sign = -1;
		else sign = 1;
		inversions += sign * (1 + 2 * between);
		turn = 0;
		id = a;
		update(a,BB);
		turn = 1;
		update(b,AA);
		printf("%lld\n",inversions);
	}
}