#include <bits/stdc++.h>
using namespace std;

struct UnionFind {
    vector<int> par;
    vector<int> sz;

    UnionFind(int n=0){ if(n>0) initialize(n); }
    void initialize(int n){
        par.resize(n);
        sz.assign(n, 1);
        for(int i=0; i<n; i++){
            par[i] = i;
        }
    }

    int find(int x){
        if(par[x] == x){
            return x;
        }else{
            return par[x] = find(par[x]);
        }
    }

    bool unite(int x, int y){
        x = find(x), y = find(y);
        if(x == y) return false;
        if(sz[x] > sz[y]) swap(x, y);
        par[x] = y;
        sz[y] += sz[x];
        return true;
    }

    bool same(int x, int y){ return find(x) == find(y); }
    int size(int x){ return sz[find(x)]; }
};

int main(){
    int N, M;
    cin >> N >> M;
    vector<int> C(N);
    for(int i=0; i<N; i++) cin >> C[i];
    UnionFind uf(N);
    for(int i=0; i<M; i++){
        int a, b;
        cin >> a >> b;
        uf.unite(a-1, b-1);
    }

    vector<int> V(N, 2e9);
    for(int i=0; i<N; i++){
        int c = uf.find(i);
        V[c] = min(V[c], C[i]);
    }
    int64_t ans = 0;
    for(int i=0; i<N; i++) if(V[i] != 2e9) ans += V[i];
    cout << ans << endl;
    return 0;
}
