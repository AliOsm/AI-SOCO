#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
#endif

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class FwdIter> inline auto
dump(FwdIter first, FwdIter last, const char * dlm = " ") -> void {
typedef typename iterator_traits<FwdIter>::value_type value_type;
copy(first, last, ostream_iterator<value_type>(cout, dlm)); }
template<typename T> vector<T> & operator--(vector<T> & a)
{ for(auto & i: a) --i; return a; }
/* @@@ ----------------------------------- */

void c723()
{
    size_t n, m;
    cin >> n >> m;
    vector<size_t> a(n);
    cin >> a;

    const auto k = n / m;
    map<size_t, size_t> cnt;
    for(const auto i: a)
        ++ cnt[i];

    size_t idx = 1, out = 0;

    for(auto & i: a)
        if(m < i || k + 1 < cnt[i])
        {
            while(k < 1 + cnt[idx])
                ++ idx;

            if(m < idx)
                continue;

            ++ out;
            if(!--cnt[i])
                cnt.erase(i);

            i = idx;
            ++ cnt[idx];
        }

     for(size_t x = 1, j = 0; x < m + 1; ++ x)
         while(cnt[x] < k)
         {
            while(cnt[a[j]] < k + 1)
                ++ j;

            -- cnt[a[j]];
            ++ cnt[x];
            a[j] = x;
            ++ out;
         }

    cout << k << ' ' << out << '\n';
    dump(begin(a), end(a), " ");
}


int main(const int argc, char * argv [])
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    c723();

    return EXIT_SUCCESS;
}
