#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <random>
#include <cmath>
#include <chrono>
#include <bitset>

#define ll long long
#define ld long double
#define pb push_back
#define eb emplace_back
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()

#define int long long
using namespace std;
const int INF = 2e9;
const int MOD = 1e9 + 7;
const int MB = 30;
const int K = 500;

int goX[] = { 0, 1, 0, -1};
int goY[] = { 1, 0, -1, 0 };

vector<char> w;

void go() {
	int n, m, k;
	cin >> n >> m >> k;
	int cnt = 0;
	vector<string> a(n);
	for (int i = 0; i < n; i++) {
		cin >> a[i];
		for (int j = 0; j < m; j++) {
			if (a[i][j] == 'R') cnt++;
		}
	}

	int x = cnt / k;
	int ost = cnt % k;

	int id = 0;
	int one = 0, two = 0;
	vector<vector<char>> ans(n, vector<char>(m, ' '));

	int now = k == 1 ? INF : x + (ost > 0 ? 1 : 0);
	ost--;
	
	int num = 0;
	
	while (true) {
		ans[one][two] = w[id];
		if (a[one][two] == 'R') now--;
		if (!now) {
			now = id == k - 2 ? INF : x + (ost > 0 ? 1 : 0);
			ost--;
			id++;
		}
		bool good = false;
		for (int i = 0; i < 4; i++, num = (num + 1) % 4) {
			int xx = one + goX[num];
			int yy = two + goY[num];
			if (xx >= 0 && yy >= 0 && xx < n && yy < m && ans[xx][yy] == ' ') {
				one = xx;
				two = yy;
				good = true;
				break;
			}
		}
		if (!good) break;
	}


	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cout << ans[i][j];
		}
		cout << '\n';
	}
}

void solve() {
	int t;
	cin >> t;
	for (char c = 'a'; c <= 'z'; c++) w.pb(c);
	for (char c = 'A'; c <= 'Z'; c++) w.pb(c);
	for (char c = '0'; c <= '9'; c++) w.pb(c);
	for (int i = 0; i < t; i++) {
		go();
	}
}

signed main() {
	/*
	freopen("search.in", "r", stdin);
	freopen("search.out", "w", stdout);
	*/
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	solve();
}