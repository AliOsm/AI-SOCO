#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

#define f first
#define s second

#define pb push_back
#define pp pop_back
#define mp make_pair

#define sz(x) (int)x.size()
#define sqr(x) ((x) * 1ll * (x))
#define all(x) x.begin(), x.end()

#define rep(i, l, r) for (int i = l; i <= r; i++)
#define per(i, l, r) for (int i = l; i >= r; i--)

#define dbg(x) cerr << (#x) << " --> " << (x) << nl;
#define Kazakhstan ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);

#define nl '\n'
#define ioi exit(0);

#define _7day ""

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef tree < pair <int, int>, null_type, less < pair <int, int> >, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int N = 3e5 + 7, inf = 1e9 + 7, mod = 1e9 + 7;
const ll linf = (ll)1e18 + 7;
const int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1}, dy[] = {0, 1, 0, -1, 1, -1, 1, -1};

int n, k, d;
vector < pair <int, int> > g[N];
bool ok[N], good[N], was[N], used[N];

struct node {
  int v, d, idr, idp;
  node() {
    d = inf;
  }
  node(int v, int d, int idr, int idp) : v(v), d(d), idr(idr), idp(idp) {}
} a[N];

int main() {
  #ifndef _7day
    freopen (_7day".in", "r", stdin);
    freopen (_7day".out", "w", stdout);
  #endif

  scanf ("%d%d%d", &n, &k, &d);
  rep(i, 1, k) {
    int x;
    scanf ("%d", &x);
    ok[x] = 1;
  }
  rep(i, 1, n - 1) {
    int v, u;
    scanf ("%d%d", &v, &u);
    g[v].pb({u, i});
    g[u].pb({v, i});
  }

  queue <node> q;
  rep(i, 1, n)
    if (ok[i]) q.push(node(i, 0, inf, i)), a[i] = node(i, 0, -1, i);

  while (sz(q)) {
    node v = q.front();
    q.pop();
    for (auto to : g[v.v])
      if (a[to.f].d > v.d + 1) {
        a[to.f] = node(to.f, v.d + 1, to.s, v.idp);
        q.push(a[to.f]);
      }
  }

  rep(i, 1, n)
    if (!ok[i] && a[i].d <= d) good[a[i].idp] = 1;

  set <int> ans;
  set < pair <int, int> > go;
  rep(i, 1, n) {
    if (ok[i] && !good[i]) {
      for (auto to : g[i])
        ans.insert(to.s);
    }
    if (!ok[i]) go.insert({a[i].d, i});
  }

  while (sz(go))
    q.push(a[(*--go.end()).s]), was[(*--go.end()).s] = 1, go.erase(--go.end());

  while (sz(q)) {
    node v = q.front();
    q.pop();
    for (auto to : g[v.v])
      if (to.s == v.idr) {
        used[to.s] = 1;
        if (!was[to.f]) q.push(a[to.f]), was[to.f] = 1;
        break;
      }
    for (auto to : g[v.v])
      if (!used[to.s]) ans.insert(to.s);
  }

  cout << sz(ans) << nl;
  for (auto i : ans)
    cout << i << ' ';

  ioi
}
