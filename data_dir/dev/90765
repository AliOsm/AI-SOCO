/*
ID: Tariqul
PROG: 
LANG: C++
*/

#include <algorithm> 
#include <cctype> 
#include <cmath> 
#include <cstdio> 
#include <cstdlib> 
#include <cstring> 
#include <deque> 
#include <iostream> 
#include <list> 
#include <map> 
#include <numeric> 
#include <queue> 
#include <set> 
#include <sstream> 
#include <stack> 
#include <string> 
#include <vector>

using namespace std; 

#define fo(i,j,n) for(i=j;i<n;++i)
#define Fo(i,j,n) for(i=n-1;i>=j;--i)
#define foo(i,j,v) fo(i,j,sz(v))
#define Foo(i,j,v) Fo(i,j,sz(v))
#define li(v) v.begin(),v.end()
#define sz(v) ((int)v.size())
#define CLR(a,v) memset((a),(v),sizeof(a))
#define inf 1000000001
//typedef long long Long;
typedef __int64 Long;
#define pi (2*acos(0))
#define eps 1e-9

#define two(X) (1<<(X))
#define twoL(X) (((Long)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)

char BUFFER[100000 + 5];
bool readn(int &n)	{ return scanf("%d",&n) == 1; } 
bool readl(Long &n)	{ return scanf("%I64d",&n) == 1; } 
bool readd(double &n){ return scanf("%lf",&n) == 1; } 
bool reads(string &s){ s = ""; int n = scanf("%s",BUFFER); if(n == 1)s = BUFFER; return n == 1; }
bool readln(string &s){ char *valid = gets(BUFFER); if(valid)s = BUFFER; return ((bool)valid); }

const int maxn = 100000 + 10;
int parent[maxn];

struct UnionFind{

    UnionFind(int n){
        int i;
        fo(i,0,n) {parent[i] = i;}
    }

    int root(int x){
        if(parent[x] != x) parent[x] = root(parent[x]);
        return parent[x];
    }

    void connect(int x, int y){
        int rx=root(x),ry=root(y);
        if(rx == ry) return;
        parent[ry] = rx;
    }
};

vector<int> v;
map<int,int> mid;
set<int> st;
int ab[2];

bool valid()
{
	int i,x, n =sz(v),found;
	UnionFind uf(n+2);
	
	foo(i,0,v)
	{
		x = ab[0] - v[i]; found = st.count(x); if(st.count(x))uf.connect(i,mid[x]); else uf.connect(n+1,i);
		if(0 == found)
		{
			int nothing = 0;
		}
		x = ab[1] - v[i]; found = st.count(x); if(st.count(x))uf.connect(i,mid[x]); else uf.connect(n+0,i);
		if(0 == found)
		{
			int nothing = 0;
		}
	}
	if (uf.root(n) == uf.root(n+1))return false;
	foo(i,0,v)
	{
		v[i] = (uf.root(i) == uf.root(n+1));
	}
	return true;
}

int main()
{
	#ifdef localhost
	freopen("E://input.txt","r",stdin);
	freopen("E://output.txt","w",stdout);
	#endif

	int i,n;
	cin >> n >> ab[0] >> ab[1];
	
	v.resize(n);
	st.clear(); 
	mid.clear();

	for(i = 0; i < n; i++)
	{
		cin >> v[i]; 
		st.insert(v[i]);
		mid[v[i]] = i;
	}
	
	if(!valid())
	{
		cout << "NO\n";
		return 0;
	}
	
	cout << "YES\n";
	foo(i,0,v)
	{
		if(i > 0)cout << " ";
		cout << v[i];
	}
	printf("\n");
	return 0;
} 