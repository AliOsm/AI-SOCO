#include <bits/stdc++.h>
using namespace std;
#define int long long
const int N = 150005;
int par[N], head[N], tail[N], sze[N];
vector<int> tree[N];
void init() {
	for (int i = 1; i < N; i++) {
		par[i] = i;
		head[i] = tail[i] = i;
		sze[i] = 1;
	}
}

int findpar(int u) {
	while (u != par[u]) {
		par[u] = par[par[u]];
		u = par[u];
	}
	return u;
}

void printfrom(int node, int par) {
	cout << node << ' ';
	for (auto nxt : tree[node]) {
		if (nxt == par)
			continue;
		printfrom(nxt, node);
	}
}

void make_union(int u, int v) {
	int par_u = findpar(u);
	int par_v = findpar(v);

	if (sze[par_u] < sze[par_v]) {
		swap(par_u, par_v);
		swap(u, v);
	}
	tree[tail[par_u]].push_back(tail[par_v]);
	tree[tail[par_v]].push_back(tail[par_u]);

	tail[par_u] = head[par_v];
	par[par_v] = par_u;
	sze[par_u] += sze[par_v];
}

signed main() {
	ios::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
	int n; cin >> n; 

	init();

	for (int i = 0; i < n - 1; i++) {
		int u, v; cin >> u >> v;

		make_union(u, v);
	}

	int root = findpar(1);

	printfrom(root, -1);
}