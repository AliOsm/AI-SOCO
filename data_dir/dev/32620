#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<string>
#include<math.h>
#include<queue>
#include<stack>
#include<sstream>
#include<stdio.h>
#include<map>
#include<set>
#include<memory.h>
#include<algorithm>
#include<vector>
using namespace std;
typedef long long ll;
ll gcd(ll a, ll b){
    if (!b)
        return a;
    return gcd(b, a%b);
}
ll lcm(ll a, ll b){
    return b / gcd(a, b)*a;
}
#define FOR(I,N) for(int(i)=0;i<int(N);++i)
#define FORK(I,N,K) for(int(i)=0;i<int(N);i+=int(K))
int par[100001];
int n, m, e, q;
ll cost[100001];
int x, y, s;
int find(int x){
    if (par[x] == x)
        return x;
    return par[x] = find(par[x]);
}
multiset<pair<ll, int> >v;
multiset<pair<ll, int> >::iterator it1;
multiset<pair<ll, int> >::iterator it2;
vector<pair<int, int> > sol;
pair<int, int>use(-1, -1);
int main(){
    cin >> n >> m >> e >> q;
    int cur = n;
    for (int i = 1; i <= n; ++i){
        par[i] = i;
        v.insert(make_pair(0, i));
    }
    while (m--){
        scanf("%d%d%d", &x, &y, &s);
        int a = find(x);
        int b = find(y);
        if (a != b){
            --cur;
            par[a] = b;
            it1 = v.find(make_pair(cost[a], a));
            v.erase(it1);
        }
        it1 = v.find(make_pair(cost[b], b));
        v.erase(it1);
        cost[b] += s;
        if (a != b)
            cost[b] += cost[a];
        v.insert(make_pair(cost[b], b));
    }
    while (e > 0 && cur > q){
        it1 = v.begin();
        x = (*it1).second;
        v.erase(it1);
        it2 = v.begin();
        y = (*it2).second;
        v.erase(it2);
        
        sol.push_back(make_pair(x, y));
        
        x = find(x);
        y = find(y);
        par[x] = y;
        cost[y] = 2 * (cost[x] + cost[y]) + 1;
        cost[y] = min(cost[y] , 1000000000ll);
        v.insert(make_pair(cost[y], y));
        --e; --cur;
    }
    it1 = v.lower_bound(make_pair(1, -1));
    x = -1;
    if (it1 != v.end())
    x = (*it1).second;
    if (x != -1)
    for (int i = 1; i <= n;++i)
    if (x == find(i) && i != x){
        use = make_pair(i, x);
        break;
    }
    if (e > 0 && use.first == -1)
        cur = -1;
    else if (e > 0){
        while (e--)
            sol.push_back(use);
    }
    if (cur == q){
        puts("YES");
        FOR(0, sol.size())
            printf("%d %d\n", sol[i].first, sol[i].second);
    }
    else
        puts("NO");
    cin >> n;
}