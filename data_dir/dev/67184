#include<bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 

#define ll long long

#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) memset(ar, val, sizeof(ar))
#define fill0(ar) fill((ar), 0)
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld long double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef pair<int, int> ii;
typedef pair<ii, int> iii;
typedef vector<ii> vii;
typedef vector<int> vi;

#define INF 1000000000000000000
#define PI 3.14159265358979323846L

bool dp[1001][2001][3];

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    ll n,k;
    cin >> n >> k;

    string s;
    cin >> s;

    dp[0][k][0] = 1;
    dp[0][k][1] = 1;
    dp[0][k][2] = 1;
    ll k2 = (2*k)-1;
    fr(i,1,n)
    {
    	char c = s[i-1];

    	fr(j,1,k2)
    	{
    		if(c=='?' || c=='W')
	    	{
	    		if(dp[i-1][j][0]==1 || dp[i-1][j][1]==1 || dp[i-1][j][2]==1)
	    			dp[i][j+1][1] = 1;
	    	}
	    	if(c=='?' || c=='L')
	    	{
	    		if(dp[i-1][j][0]==1 || dp[i-1][j][1]==1 || dp[i-1][j][2]==1)
	    			dp[i][j-1][0] = 1;

	    	}
	    	if(c=='?' || c=='D')
	    	{
	    		if(dp[i-1][j][0]==1 || dp[i-1][j][1]==1 || dp[i-1][j][2]==1)
	    			dp[i][j][2] = 1;
	    	}
    	}
    }

    string ans = "";

    if(dp[n][0][0] || dp[n][0][1] || dp[n][0][2])
    {
    	ll now = 0;
    	frr(i,n,1)
    	{
    		if(dp[i][now][0])
    		{
    			now++;
    			ans.pb('L');
    		}
    		else if(dp[i][now][1])
    		{
    			now--;
    			ans.pb('W');
    		}
    		else
    		{
    			ans.pb('D');
    		}
    	}

    	reverse(ans.begin(), ans.end());
    	cout << ans << endl;
    }
    else if(dp[n][k2+1][0] || dp[n][k2+1][1] || dp[n][k2+1][2])
    {
    	ll now = k2+1;
    	frr(i,n,1)
    	{
    		if(dp[i][now][0])
    		{
    			now++;
    			ans.pb('L');
    		}
    		else if(dp[i][now][1])
    		{
    			now--;
    			ans.pb('W');
    		}
    		else
    		{
    			ans.pb('D');
    		}
    	}

    	reverse(ans.begin(), ans.end());
    	cout << ans << endl;
    }
    else 
    {
    	cout << "NO" << endl;
    }
}
