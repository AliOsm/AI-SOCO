#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define ll long long
#define M 100007
#define MOD 1000000007

// Order Statistic Tree

/* Special functions:

        find_by_order(k) --> returns iterator to the kth largest element counting from 0
        order_of_key(val) --> returns the number of items in a set that are strictly smaller than our item
*/

typedef tree<
ll,					// type long long
null_type,
less<ll>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;



/////// THIS VIOLENT DELIGHTS HAVE VIOLENT ENDS //////////
ll a[M];
ll c[M];

int main(void)
{
    std::ios::sync_with_stdio(false);
    ll n, i, p, l, r;
    cin >> n;
    for (i = 1; i <= n; i++) {
        cin >> a[i];
        c[i] = c[i-1]+a[i];
    }
    set< ll >st;
    set< pair< ll, ll > >pset;
    st.insert(0);
    st.insert(n+1);
    pset.insert({c[n], 1});
    for (i = 1; i < n; i++) {
        cin >> p;
        auto it = st.lower_bound(p);
        if (*it==p) {
            l = p;
            it++;
            r = *it;
        }
        else {
            r = *it;
            it--;
            l = *it;
        }
        //cout << l << ' ' << r << endl;
        pset.erase({c[r-1]-c[l], l+1});
        if (p-l) pset.insert({c[p-1]-c[l], l+1});
        if (r-p) pset.insert({c[r-1]-c[p], p+1});
        auto pt = pset.end();
        pt--;
        cout << (*pt).first << endl;
        st.insert(p);
    }
    cout << 0 << endl;

    return 0;
}

