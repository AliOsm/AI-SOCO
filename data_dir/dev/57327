#include <algorithm>
#include <cstdio>
#include <cstring>

using namespace std;

const int MaxN = 1000006, NA = -1, MaxK = 22,
 MaxL = 1 << MaxK, AndL = MaxL - 1, MaxM = MaxL >> 5, AndM = MaxM - 1;

unsigned a [MaxN];
unsigned f [MaxM];
unsigned g [MaxL];
int p [MaxL];
int n;

inline void transpose (unsigned * a)
{
 int i;
 unsigned t;
 for (i = 0; i < 32; i++)
  if (i & 16)
  {
   t = (a[i] ^ (a[i ^ 16] >> 16)) & 0x0000FFFF;
   a[i] ^= t;
   a[i ^ 16] ^= t << 16;
  }
 for (i = 0; i < 32; i++)
  if (i &  8)
  {
   t = (a[i] ^ (a[i ^  8] >>  8)) & 0x00FF00FF;
   a[i] ^= t;
   a[i ^  8] ^= t <<  8;
  }
 for (i = 0; i < 32; i++)
  if (i &  4)
  {
   t = (a[i] ^ (a[i ^  4] >>  4)) & 0x0F0F0F0F;
   a[i] ^= t;
   a[i ^  4] ^= t <<  4;
  }
 for (i = 0; i < 32; i++)
  if (i &  2)
  {
   t = (a[i] ^ (a[i ^  2] >>  2)) & 0x33333333;
   a[i] ^= t;
   a[i ^  2] ^= t <<  2;
  }
 for (i = 0; i < 32; i++)
  if (i &  1)
  {
   t = (a[i] ^ (a[i ^  1] >>  1)) & 0x55555555;
   a[i] ^= t;
   a[i ^  1] ^= t <<  1;
  }
}

int main (void)
{
 int i, j, k, r;

 while (scanf (" %d", &n) != EOF)
 {
  memset (f, 0, sizeof (f));
  memset (g, 0, sizeof (g));
  memset (p, NA, sizeof (p));

  for (i = 0; i < n; i++)
  {
   scanf (" %d", &a[i]);
   k = a[i] ^ AndL;
   f[k >> 5] |= 1u << (k & 31);
   p[k] = a[i];
  }

  for (i = AndM; i >= 0; i--)
  {
   f[i] |= (f[i] >>  1) & 0x55555555;
   g[(i << 5) + 0] |= (f[i] >>  1) & 0x55555555;
   f[i] |= (f[i] >>  2) & 0x33333333;
   g[(i << 5) + 1] |= (f[i] >>  2) & 0x33333333;
   f[i] |= (f[i] >>  4) & 0x0F0F0F0F;
   g[(i << 5) + 2] |= (f[i] >>  4) & 0x0F0F0F0F;
   f[i] |= (f[i] >>  8) & 0x00FF00FF;
   g[(i << 5) + 3] |= (f[i] >>  8) & 0x00FF00FF;
   f[i] |= (f[i] >> 16) & 0x0000FFFF;
   g[(i << 5) + 4] |= (f[i] >> 16) & 0x0000FFFF;
  }

  for (r = 5, j = 1; j < MaxM; r++, j <<= 1)
  {
   k = j ^ AndM;
   for (i = k, k ^= (1u << 31); i >= 0; i = (i - 1) & k)
   {
    f[i] |= f[i ^ j];
    g[(i << 5) + r] |= f[i ^ j];
   }
  }

  for (i = 0; i < MaxL; i += 32)
   transpose (g + i);

  for (i = MaxL - 1; i >= 0; i--)
   p[i] = p[i + (g[i] & -g[i])];

  for (i = 0; i < n; i++)
   printf ("%d%c", p[a[i]], "\n "[i + 1 < n]);
 }

 return 0;
}
