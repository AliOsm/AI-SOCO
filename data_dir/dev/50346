#include <bits/stdc++.h>

#define pp pop_back
#define pb push_back
#ifdef KTL
  #define fname ""
#else
  #define fname "travel."
#endif
#define forn(i, x, n) for (int i = int(x); i <= int(n); ++i)
#define for1(i, n, x) for (int i = int(n); i >= int(x); --i)
#define mp make_pair
#define s second
#define f first
#define sz(a) (int)((a).size())

using namespace std;
typedef long long ll;
typedef double ld;
typedef pair < int, int > pi;

const int N = 20;
const int mod = 1e9 + 7;

int k, t, ans[N];
ll dp[N], d[N], cnk[N][N], c[N];

ll calc(int len)
{
  for (int i = 0;i <= len;i++) dp[i] = 0;
  dp[0] = 1;
  for (int i = 0;i < 16;i++)
  {
    for (int j = 0;j <= len;j++)
    {
      for (int take = 0;take <= c[i];take++)
      {
        if (take + j <= len) d[take + j] += 1ll * dp[j] * cnk[len - j][take];
      }
    }
    for (int j = 0;j <= len;j++) dp[j] = d[j], d[j] = 0;
  }
  return dp[len];
}

void out(int x)
{
  if (x < 10) cout << x;
  else cout << char('a' + x - 10);
}

int main() {
  #ifdef wws
    freopen("in", "r", stdin);
  #endif
  ios_base :: sync_with_stdio(NULL), cin.tie(NULL), cout.tie(NULL);
  for (int i = 0;i <= 16;i++)
  {
    cnk[i][0] = cnk[i][i] = 1;
    for (int j = 1;j < i;j++) cnk[i][j] = cnk[i - 1][j - 1] + cnk[i - 1][j];
  }
  cin >> k >> t;
  for (int i = 0;i < 16;i++) c[i] = t;
  for (int len = 1;len <= 16;len++)
  {
    ll now = 0;
    for (int i = 1;i < 16;i++)
    {
      c[i]--;
      now += calc(len - 1);
      c[i]++;
    }
    //cout << "len= " << len << " now = " << now << endl;
    if (now >= k)
    {
      for (int i = len;i;i--)
      {
        //cout << "i = " << i << " k = " << k << endl;
        for (int j = (i == len);j < 16;j++)
        {
          if (c[j] == 0) continue;
          c[j]--;
          //cout << "j = " << j << " x = " << calc(i - 1) << endl;
          if (calc(i - 1) < k)
          {
            k -= calc(i - 1);
            c[j]++;
          }
          else
          {
            out(j);
            break;
          }
        }
      }
      break;
    }
    else k -= now;
  }
  return 0;
}
