#include <bits/stdc++.h>

using namespace std;

#define fi first
#define se second
#define pf push_front
#define pb push_back
#define mk make_pair
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)x.size()
#define SWS ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0)
#define rfile freopen("input.txt", "r", stdin)
#define wfile freopen("output.txt", "w", stdout)
#define files rfile; wfile

typedef long long ll;
typedef long double ld;

const int Z = 1011;
const int inf = (int) 1e9 + 111;
const ll llinf = (ll) 1e18 + 5;
const int MOD = (int) 1e9 + 7;
const int dx[] = {0, 0, 1, -1};
const int dy[] = {1, -1, 0, 0};

int speed[10];
queue<pair<int, int>> q[10];

int a[Z][Z], dist[10][Z][Z];
bool used[Z][Z];
int ans[10], n, m, p;

bool Ok(int x, int y) {
  int cnt = 0;
  if (x - 1 >= 1 && !used[x - 1][y]) ++cnt;
  if (y - 1 >= 1 && !used[x][y - 1]) ++cnt;
  if (x + 1 <= n && !used[x + 1][y]) ++cnt;
  if (y + 1 <= m && !used[x][y + 1]) ++cnt;
  return cnt != 0;
}

int main() {
  srand(time(0));
  //files;
  SWS;
  cin >> n >> m >> p;
  for (int i = 1; i <= p; ++i) {
    cin >> speed[i];
  }
  for (int i = 1; i <= p; ++i) {
    for (int j = 1; j <= n; ++j) {
      for (int k = 1; k <= m; ++k) {
        dist[i][j][k] = inf;
      }
    }
  }
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= m; ++j) {
      char x;
      cin >> x;
      if (x == '#') {
        a[i][j] = -1;
        used[i][j] = true;
      } else if (x == '.') {
        a[i][j] = 0;
      } else {
        a[i][j] = x - '0';
        q[a[i][j]].push({i, j});
        dist[a[i][j]][i][j] = 0;
        used[i][j] = true;
        ++ans[a[i][j]];
      }
    }
  }

  int cnt_rounds = 0;
  while (true) {
    ++cnt_rounds;
    int cnt = 0;
    for (int i = 1; i <= p; ++i) {
      queue<pair<int, int>> new_q;
      while (!q[i].empty()) {
        auto x = q[i].front();
        q[i].pop();
        if (dist[i][x.fi][x.se] == speed[i] * cnt_rounds) {
          new_q.push(x);
          continue;
        }
        for (int t = 0; t < 4; ++t) {
          int nx = x.fi + dx[t];
          int ny = x.se + dy[t];
          if (nx < 1 || ny < 1 || nx > n || ny > m) continue;
          if (used[nx][ny]) continue;
          used[nx][ny] = true;
          ++cnt;
          ++ans[i];
          dist[i][nx][ny] = dist[i][x.fi][x.se] + 1;
          q[i].push({nx, ny});
        }
      }
      while (!new_q.empty()) {
        auto x = new_q.front();
        new_q.pop();
        if (Ok(x.fi, x.se)) {
          q[i].push(x);
        }
      }
    }

    if (cnt == 0) {
      break;
    }
  }

  for (int i = 1; i <= p; ++i) {
    cout << ans[i] << " ";
  }
  return 0;
}