#include <iostream>
#include <stdio.h>
#include <bits/stdc++.h>
#include <math.h>
#include <string>
#include <sstream>
#define ll long long
#define F first
#define S second
#define pb push_back
#define ld long double
#define pll pair<long long,long long>
#define pld pair<long double,long double>
#define ios     ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
using namespace std;
ll mod=1000000007;
ll gcd (ll a,ll b)
{
    if(b==0)
        return a;
    else
        return gcd(b,a%b);
}
ll fastexp(ll x ,ll n)
{
    ll result =1;
    while(n>0)
    {
        if(n%2==1)
            result*=x;
        x*=x;
        n=n/2;
    }
    return result;
}

ll modularExp(ll x,ll n,ll mod)
{
    ll result=1;
    while(n>0)
    {
        if(n%2==1)
            result=(result*x)%mod;
        x=((x%mod)*(x%mod))%mod;
        n=n/2;
    }
    return (result)%mod;
}
bool isPrime(ll n)
{
    for(ll i=2;i*i<=n;i++)
        if(n%i==0)
            return false;
    return true;
}
bool mycomp(pll &a,pll &b)
{
    if(a.F!=b.F)
        return a.F < b.F;
    else
        return a.S < b.S;
}
vector< vector<ll> > dist(505,vector<ll>(505,mod));
void solve()
{
     ll n;
     cin>>n;
     ll i,j,k;
     for(i=1;i<=n;i++)
     {
          dist[i][i]=0;
          for(j=1;j<=n;j++)
          {
               ll x;
               cin>>x;
               if(x!=0)
                    dist[i][j]=x;
          }
     }
     vector<ll> pt(n);
     for(i=0;i<n;i++)
          cin>>pt[i];
          
     
     vector<ll> ans;
     reverse(pt.begin(),pt.end());
     
     for(i=1;i<=n;i++)
     {
          for(j=1;j<=n;j++)
               dist[i][j]=min(dist[i][j],dist[i][pt[0]]+dist[pt[0]][j]);
     }
     
     for(k=1;k<n;k++)
     {
          ll sum=0;
          for(i=0;i<k;i++)
               for(j=0;j<k;j++)
                    sum+=dist[pt[i]][pt[j]];

          ans.pb(sum);
          
          for(i=1;i<=n;i++)
          {
               for(j=1;j<=n;j++)
                    dist[i][j]=min(dist[i][j],dist[i][pt[k]]+dist[pt[k]][j]);
          }  
     }
     
     ll sum=0;
     for(i=1;i<=n;i++)
          for(j=1;j<=n;j++)
               sum+=dist[i][j];
     ans.pb(sum);
     for(i=n-1;i>=0;i--)
          cout<<ans[i]<<" ";
     
          
          
     
}

int main()
{
    ios;
    ll t;
    t=1;

    while(t--)
        solve();
}