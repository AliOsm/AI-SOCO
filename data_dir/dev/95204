#include<iostream>
#include<stdio.h>
#include <bits/stdc++.h>
#include <math.h>
#include <string>
#include <sstream>
#include <cmath>
#define ll long long
#define F first
#define S second
#define pb push_back
#define ld long double
#define pll pair<long long,long long>
#define pld pair<long double,long double>
using namespace std;
ll mod=10e9+7;
ll gcd (ll a,ll b)
{
    if(b==0)
        return a;
    else
        return gcd(b,a%b);
}
ll modularExp(ll x,ll n,ll mod)
{
    ll result=1;
    while(n>0)
    {
        if(n%2==1)
            result=(result*x)%mod;
        x=((x%mod)*(x%mod))%mod;
        n=n/2;
    }
    return (result)%mod;
}
bool isPrime(ll n)
{
    for(ll i=2;i*i<=n;i++)
        if(n%i==0)
            return false;
    return true;
}


bool mycomp(pair<pll,ll> a,pair<pll,ll> b)
{
if(a.F.F!=b.F.F)
    return a.F.F< b.F.F;
else
    return a.F.S< b.F.S;
}

bool mycomp2(pll a,pll b)
{
    return a.F < b.F;
}

int main()
{
 ll n;
 cin>>n;
 vector< pair <pll,ll> > v(n);
 ll i;
 for(i=0;i<n;i++)
 {
     ll x,y;
     cin>>x>>y;
     v[i]={{y,x},i};
 }
 ll k;
 cin>>k;
 set<ll> seat;
 queue<ll> q[1005];
 for(i=0;i<k;i++)
 {
     ll x;
     cin>>x;
     q[x].push(i);
     seat.insert(x);
 }
 sort(v.rbegin(),v.rend(),mycomp);
 ll ans=0;
 ll ord=0;
 vector<pll> pd;
 for(i=0;i<n;i++)
 {
     ll price=v[i].F.F;
     ll mem=v[i].F.S;
     if(lower_bound(seat.begin(),seat.end(),mem)!=seat.end())
     {
         ans+=price;
         ord+=1;
         set<ll>::iterator it=lower_bound(seat.begin(),seat.end(),mem);
         ll sval=*it;
         ll top=q[sval].front();
         q[sval].pop();
         pd.pb({v[i].S,top});
         if(q[sval].empty())
            seat.erase(it);
     }
 }
 
  cout<<ord<<" "<<ans<<"\n";
 for(i=0;i<pd.size();i++)
        cout<<pd[i].F+1<<" "<<pd[i].S+1<<"\n";
    


}

