//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-9;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i, n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n, m;
char s[2005][2005];

pair<int, int> check(int x, int y) {
    if (x < 0 || y < 0 || x + 1 >= n || y + 1 >= m) {
        return {-1, -1};
    }
    int cnt = (s[x][y] == '*') + (s[x + 1][y] == '*') + (s[x][y + 1] == '*') + (s[x + 1][y + 1] == '*');
    if (cnt == 1) {
        if (s[x][y] == '*') return {x, y};
        if (s[x + 1][y] == '*') return {x + 1, y};
        if (s[x][y + 1] == '*') return {x, y + 1};
        if (s[x + 1][y + 1] == '*') return {x + 1, y + 1};
    } else {
        return {-1, -1};
    }
}

void dfs(int x, int y) {
    s[x][y] = '.';
    pair<int, int> X = check(x - 1, y - 1); if (X.F != -1) dfs(X.F, X.S);
    X = check(x - 1, y); if (X.F != -1) dfs(X.F, X.S);
    X = check(x, y - 1); if (X.F != -1) dfs(X.F, X.S);
    X = check(x, y); if (X.F != -1) dfs(X.F, X.S);
}

int main(void) {
    #ifdef nobik
        freopen("input.txt", "rt", stdin);
        freopen("output.txt", "wt", stdout);
    #endif
    scanf("%d %d", &n, &m);
    for (int i = 0; i < n; ++i) {
        scanf(" %s", s[i]);
    }
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            pair<int, int> x = check(i, j);
            if (x.F != -1) dfs(x.F, x.S);
        }
    }
    for (int i = 0; i < n; ++i) {
        puts(s[i]);
    }
    return 0;
}
