#include <bits/stdc++.h>
#define LL long long
#define mp make_pair
#define pb push_back
#define fi first
#define sc second
using namespace std;

LL n,a[100100],pre[100100],x,y,ans;
vector<LL> pathh,v;
LL lim = 45;

struct Node{
	Node *left, *right;
};

vector<LL> convert(LL num){
	vector<LL> v;
	while(num!=0){
		v.pb(num%2);
		num/=2;
	}
	while(v.size() < lim) v.pb(0);
	reverse(v.begin(), v.end());
	return v;
}

void build(Node *curr, LL pos){
	if(pos==lim) return;
	if(v[pos]==1){
		if(curr->left==NULL) curr->left = new Node();
		build(curr->left, pos+1);
	}
	else{
		if(curr->right==NULL) curr->right = new Node();
		build(curr->right, pos+1);
	}
}

void solve(Node *curr, LL pos){
	if(pos==lim) return;
	if(v[pos]==0){
		if(curr->left!=NULL){
			pathh.pb(1);
			solve(curr->left, pos+1);
		}
		else{
			pathh.pb(0);
			solve(curr->right, pos+1);
		}
	}
	else{
		if(curr->right!=NULL){
			pathh.pb(0);
			solve(curr->right, pos+1);
		}
		else{
			pathh.pb(1);
			solve(curr->left, pos+1);
		}
	}
}

int main(){
	ios::sync_with_stdio(0);
	cin.tie();
	Node *root = new Node();
	cin>>n;
	for(int i=1;i<=n;i++){
		cin>>a[i];
		pre[i] = pre[i-1] ^ a[i];
		ans = max(ans, pre[i]);
	}
	LL suff = 0;
	for(int i=n;i>=1;i--){
		suff ^= a[i];
		v = convert(suff);
		build(root, 0);
		x = pre[i-1];
		v = convert(x);
		pathh.clear();
		solve(root, 0);
		y = 0;
		for(int j=0;j<pathh.size();j++){
			y*=2ll;
			y += pathh[j];
		}
		ans = max(ans, x^y);
	}
	cout<<ans<<endl;
	return 0;
}