#include <cstdio>
#include <iostream>
#include <string>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <stdlib.h>
#include <sstream>
#include <assert.h>
#include <memory.h>
#include <time.h>
#include <stack>
using namespace std;
#pragma comment(linker, "/STACK:200000000")

#define mp make_pair
#define pb push_back 
#define ll long long
#define sz(x) (int)(x).size()

set<pair<ll, ll> > st;

int main()
{
    //freopen("a.in","rt",stdin);
    //freopen("a.out","wt",stdout);

    int h, q;
    scanf("%d %d", &h, &q);
    st.insert(mp(1LL << (h - 1), (1LL << h) - 1));
    st.insert(mp(0, 0));
    st.insert(mp(1LL << 60, 1LL << 60));

    for(int i = 0; i < q; i++) {
        int x, a;
        ll L, R;
        scanf("%d %lld %lld %d", &x, &L, &R, &a);
        
        for(int j = x; j < h; j++) {
            L *= 2LL;
            R *= 2LL;
            R++;
        }
        if(a == 0) { // исключить отрезок от L до R
            while(true) {
                set<pair<ll, ll> >:: iterator it = st.lower_bound(mp(R+1, -(1LL << 60)));
                it--;
                if(it->first < L && it->second < L) {
                    break;
                }
                else if(it->first < L && it->second >= L) {
                    pair<ll, ll> p = *it;
                    st.erase(it);
                    st.insert(mp(p.first, L-1));
                    if(p.second > R) st.insert(mp(R + 1, p.second));
                }
                else if(it->first >= L && it->second <= R) {
                    pair<ll, ll> p = *it;
                    st.erase(it);
                    //st.insert(mp(p.first, L-1));
                }
                else if(it->first >= L && it->second > R) {
                    pair<ll, ll> p = *it;
                    st.erase(it);
                    st.insert(mp(R + 1, p.second));
                }
                else {
                    assert(0);
                }
            }
        }
        else { // исключить отрезки, кроме [L, R]           
            while(true) {
                set<pair<ll, ll> >:: iterator it = st.lower_bound(mp(L, -(1LL << 60)));
                it--;
                if(it == st.begin()) {
                    break;
                }
                else if(it->first < L && it->second < L) {
                    pair<ll, ll> p = *it;
                    st.erase(it);
                }
                else if(it->first < L && it->second >= L) {
                    pair<ll, ll> p = *it;
                    st.erase(it);
                    st.insert(mp(L, min(p.second, R)));
                }
                else {
                    assert(0);
                }
            }
            while(true) {
                set<pair<ll, ll> >:: iterator it = st.lower_bound(mp((1LL << 60), -(1LL << 60)));
                it--;
                if(it->first < L) {
                    break;
                }
                else if(it->first <= R && it->second > R) {
                    pair<ll, ll> p = *it;
                    st.erase(it);
                    st.insert(mp(max(L, p.first), R));
                }
                else if(it->first <= R && it->second <= R) {
                    break;
                }
                else if(it->first > R) {
                    st.erase(it);
                }
                else {
                    assert(0);
                }
            }
        }
    }
    if(sz(st) <= 2) {
        printf("Game cheated!\n");
    }
    else if(sz(st) > 3) {
        printf("Data not sufficient!\n");
    }
    else {
        set<pair<ll, ll> >::iterator it = st.begin();
        it++;
        if(it->first != it->second) {
            printf("Data not sufficient!\n");
        }
        else {
            printf("%lld\n", it->first);
        }
    }

    return 0;
}