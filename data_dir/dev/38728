/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const ld PI = 3.14159265358979323846;

#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

class DGraphAndItsComplement {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n, a, b; in>>n>>a>>b;
		if(n==1){
			out<<"YES\n0";
			return;
		}
		if((a!=1 and b!=1) or (a==1 and b==1 and n<=3)){
			out<<"NO";
			return;
		}
		out<<"YES\n";
		int res[n][n];
		memset(res, 0, sizeof(res));
		int req = n - max(a, b) + 1;
		f(i, req-1) res[i][i+1] = res[i+1][i] = 1;
		if(b==max(a, b)){
			f(i, n) f(j, n) if(i!=j) res[i][j]^=1;
		}
		f(i, n){
			f(j, n) out<<res[i][j];
			out<<'\n';
		}
	}
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	DGraphAndItsComplement solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
