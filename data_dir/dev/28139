#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <iterator>
#include <cmath>

using namespace std;

int n;

int a[5210][5210];
int aSum[5210][5210];

int ddNum[16][4] = {{0,0,0,0},
					{0,0,0,1},
					{0,0,1,0},
					{0,0,1,1},
					{0,1,0,0},
					{0,1,0,1},
					{0,1,1,0},
					{0,1,1,1},
					{1,0,0,0},
					{1,0,0,1},
					{1,0,1,0},
					{1,0,1,1},
					{1,1,0,0},
					{1,1,0,1},
					{1,1,1,0},
					{1,1,1,1}};
					
					

void doGen(char digit, int sRow, int sCol)
{
	int num;
	if (digit >= '0' && digit <= '9')
		num = digit - '0';
	else
		num = 10 + digit - 'A';
		
	a[sRow][sCol] = ddNum[num][0];
	a[sRow][sCol + 1] = ddNum[num][1];
	a[sRow][sCol + 2] = ddNum[num][2];
	a[sRow][sCol + 3] = ddNum[num][3];
}

bool doSearch(int step)
{
	int sum;
	int nr, nc;
	int target = step * step;
	for (int r = 0 ; r < n ; r += step)
		for (int c = 0 ; c < n ; c+= step)
		{
			nr = r + step;
			nc = c + step;
			sum = aSum[nr][nc] - aSum[nr][c] - aSum[r][nc] + aSum[r][c];
			
			if ((sum != target) && (sum != 0))
				return false;
		}
		
	return true;
}

int maxCut;

int main()
{
	char temp[2000];
	scanf("%d\n", &n);
	
	for (int r = 1 ; r <= n ; r++)
	{
		scanf("%s\n", temp);
		int limit = n / 4;
		for (int c = 0 ; c < limit ; c++)
		{
			doGen(temp[c], r, c * 4 + 1);
		}
		
		//================
		for (int c = 1 ; c <= n ; c++)
			aSum[r][c] = aSum[r][c - 1] + a[r][c];
			
		for (int c = 1 ; c <= n ; c++)
			aSum[r][c] = aSum[r - 1][c] + aSum[r][c];		
	}
	
	maxCut = 1;
	
	for (int d = n ; d >= 2 ; d--)
	{
		if (n % d == 0)
		{
			if (doSearch(d))
			{
				maxCut = d;
				break;
			}
		}
	}
	
	printf("%d\n", maxCut);

	return 0;
}

