#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <int, int> pii;

const int N = 2e5 + 5, inf = 2e9;

int n, m;
set <pii> fen[N + 5];
vector <int> vec;

/*
   add = 0
   find = 1
   remove = 2
*/

struct query {
	int x, y, type;
}q[N];

void add(int x, int y, int val) {
	int yp = y;
	y = m - y;
	for (; y < N; y += y & -y) {
		if(val == 1)
			fen[y].insert({x, yp});
		else
			fen[y].erase({x, yp});
	}
}

pii get(int x, int y) {
	pii ret = {inf, inf};
	int yp = y;
	y = m - y;
	for (; y; y -= y & -y) {
		auto it = fen[y].lower_bound({x, yp});
		if(it != fen[y].end()) {
			pii cur = (*it);
			ret = min(ret, cur);
		}
	}
	return ret;
}

void compress() {
	for (int i = 0; i < m; i++)
		vec.push_back(q[i].y);
	sort(vec.begin(), vec.end());
	vec.resize(unique(vec.begin(), vec.end()) - vec.begin());
	n = vec.size();
	for (int i = 0; i < m; i++)
		q[i].y = lower_bound(vec.begin(), vec.end(), q[i].y) - vec.begin();
}

int main() {
	ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);	
	cin >> m;
	for (int i = 0; i < m; i++) {
		string t;
		cin >> t;
		if(t == "add")
			q[i].type = 0;
		else if(t == "find")
			q[i].type = 1;
		else
			q[i].type = 2;
		cin >> q[i].x >> q[i].y;
	}
	compress();
	for (int i = 0; i < m; i++) {
		int type = q[i].type, x = q[i].x, y = q[i].y;
		if(type == 0)
			add(x, y, 1);
		else if(type == 1) {
			pii res = get(x + 1, y + 1);
			if(res == make_pair(inf, inf))
				cout << -1 << "\n";
			else
				cout << res.first << " " << vec[res.second] << "\n";
		}
		else
			add(x, y, -1);
	}
}
