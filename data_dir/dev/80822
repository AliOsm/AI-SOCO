
#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
int n,m,g,r;
int arr[N];

struct node
{
    int idx,rem,cost;
    bool operator< (const node & x) const {
        return cost > x.cost;
    }
};
bool vis[10002][1002];
//int cost[10002][1002];
int solve()
{
    priority_queue<node>q;
    q.push({0,g,0});
    while(!q.empty())
    {
        node x = q.top();
        int & idx = x.idx;
        int & rem = x.rem;
        int & cost = x.cost;
        q.pop();
        if(idx == m-1) return x.cost;
        if(vis[idx][rem]) continue;
        vis[idx][rem] = 1;

        int addCost = 0;
        if(rem == 0)
        {
            addCost = r;
            rem = g;
        }

        if(idx != 0)
        {
            int diff = arr[idx] - arr[idx - 1];
            if( diff <= rem)
            {
               if(!vis[idx-1][rem-diff])q.push({idx-1,rem-diff,cost + addCost + diff});
            }
        }
        int diff = arr[idx+1] - arr[idx];
        if( diff <= rem)
        {
           if(!vis[idx+1][rem-diff])q.push({idx+1,rem-diff,cost + addCost + diff});
        }
    }
    return -1;
}

int main() {


    cin>>n>>m;
    for(int i = 0 ; i<m ; ++i) scanf("%d" ,&arr[i]);
    cin>>g>>r;
   // for(int i = 0 ; i<m ; ++i) for(int j = 0 ; j<=g; ++j) cost[i][j] = 1e9;

    sort(arr , arr+m);
    cout<<solve()<<endl;

	return 0;
}
