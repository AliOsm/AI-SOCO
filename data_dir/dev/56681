#include<bits/stdc++.h>
using namespace std;

typedef long long int lli;
typedef unsigned long long int ulli;
typedef pair<int,int> pii;

#define ones(x) __builtin_popcount(x)
#define onesl(x) __builtin_popcountl(x)
#define onesll(x) __builtin_popcountll(x)

#define pb push_back
#define eb emplace_back
#define mp make_pair
#define mt make_tuple
#define scn(n) scanf("%d",&n)
#define scnll(n) scanf("%lld",&n)
#define scn2(n,m) scanf("%d%d",&n,&m)
#define scn3(n,m,w) scanf("%d%d%d",&n,&m,&w)
#define scn2ll(n,m) scanf("%lld%lld",&n,&m)
#define atoz(v) v.begin(),v.end()
#define ratoz(v) v.rbegin(),v.rend()
#define Fill(a,v) memset(a,v,sizeof(a))
#define sz(v) v.size()
#define fi first
#define se second
#define inf 1e9
#define pi acos(-1.0)
#define sqr(x) x*x
#define max3(a,b,c) max(a,max(b,c))
#define min3(a,b,c) min(a,min(b,c))
#define ten(n) (int)1e##n
#define tenll(n) (lli)1e##n
#define mod 1000000007
#define FastIO ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);

int Set(int N,int pos)
{
    return N=N | (1<<pos);
}
int reset(int N,int pos)
{
    return N = N & ~(1<<pos);
}
bool check(int N,int pos)
{
    return (bool)(N & (1<<pos));
}


inline int addmod(int x,int y)
{
    return (x%mod + y%mod)%mod;
}
inline int submod(int x,int y)
{
    return (x%mod - y%mod + mod)%mod;
}
inline int mulmod(int x,int y)
{
    return (x%mod *1LL* y%mod)%mod;
}
inline int nextSubMask(int i, int mask)
{
    return (i-1)&mask;   /// returns next smallest submask
}

void we_r_done()
{
    cout<<"NO";
    exit(0);
}

void debug(bool ok, string mssg)
{
    if(ok)
        return;
    cout<<mssg;
    exit(0);
}

using minHeap = priority_queue< int, vector< int >, greater< int > >;

string vw  = "aeiou";

bool isvow(char c)
{
    for(char cc : vw)
    {
        if(c==cc)
            return true;
    }
    return false;
}

struct info
{
    string word;
    char lv;
    int cnt;
    int id;
};

bool operator<(info a, info b)
{
    if(a.cnt<b.cnt) return true;
    else if(a.cnt == b.cnt ) return a.id<b.id;
    else return false;
}

int main()
{
    ///freopen("output.txt","w",stdout);
    ///freopen("input.txt","r",stdin);

    FastIO;

    int n;
    cin>>n;

    map<char,int>IDX;

    for(int i=0; i<5; i++)
        IDX[vw[i]] = i;

    string s;

    vector<info>v;
    vector<info>vlast[8];

    for(int i=0; i<n; i++)
    {
        cin>>s;
        char l;
        int cnt = 0;

        for(int j=0; j<s.size(); j++)
        {
            if(isvow(s[j]))
            {
                l = s[j];
                cnt++;
            }
        }
        info now;
        now.cnt = cnt;
        now.lv = l;
        now.word = s;
        now.id = i;

        vlast[IDX[l]].pb(now);

    }

    for(int i=0; i<5; i++)
    {
        if(vlast[i].size())
        {
            sort(atoz(vlast[i]));
        }
    }

    vector<string>res;
    vector<info>bd;

    for(int i=0; i<5; i++)
    {
        while(vlast[i].size()>=2)
        {
            int ss = vlast[i].size()-1;

            if(vlast[i][ss].cnt == vlast[i][ss-1].cnt)
            {
                info b = vlast[i][ss];
                info d = vlast[i][ss-1];
                bd.pb(b);
                bd.pb(d);
                vlast[i].pop_back();
                vlast[i].pop_back();
            }
            else
            {
                v.pb(vlast[i].back());
                vlast[i].pop_back();
            }
        }
        if(vlast[i].size())
        {
            v.pb(vlast[i].back());
            vlast[i].pop_back();
        }
    }


    vector<info>bal;
    sort(atoz(v));
    //for(int i=0; i<5; i++)cout<<vlast[i].size()<<" --\n";
    //for(int i=0; i<v.size() ; i++)cout<<v[i].word<<" ----\n";
    //for(int i=0; i<bd.size() ; i++)cout<<bd[i].word<<" ****\n";

    while(bd.size()>=2)
    {
        info a,b,c,d;
        a.id = b.id = c.id = d.id = -1;

        b = bd.back();
        bd.pop_back();
        d = bd.back();
        bd.pop_back();

        while(v.size()>=2)
        {
            a = v.back();
            v.pop_back();
            if(a.cnt == v.back().cnt)
            {
                c = v.back();
                v.pop_back();
                break;
            }
            else
                bal.pb(a);
        }

        if(a.id == -1 || b.id == -1 || c.id == -1 || d.id == -1)
        {
            if(b.id != -1 && d.id != -1)
            {
                bd.push_back(d);
                bd.push_back(b);
                //cout<<"------\n";
            }
            break;
        }

        res.pb(a.word);
        res.pb(b.word);
        res.pb(c.word);
        res.pb(d.word);
    }

    while(v.size()){
        bal.pb(v.back());
        v.pop_back();
    }
    sort(atoz(bal));
    //for(int i=0; i<bd.size(); i++)cout<<bd[i].word<<" ---\n";
    while(bd.size()>=2)
    {
        info a,b,c,d;
        a.id = b.id = c.id = d.id = -1;

        b = bd.back();
        bd.pop_back();
        d = bd.back();
        bd.pop_back();


        while(bal.size()>=2)
        {
            a = bal.back();
            bal.pop_back();

            if(a.cnt == bal.back().cnt)
            {
                c = bal.back();
                bal.pop_back();
                break;
            }
            //cout<<a.word<<" ----\n";
        }

        if(a.id == -1 || b.id == -1 || c.id == -1 || d.id == -1)
        {
            if(b.id != -1 && d.id != -1)
            {
                bd.push_back(d);
                bd.push_back(b);
                //cout<<"------\n";
            }
            break;
        }
        //cout<<"ffff\n";

        res.pb(a.word);
        res.pb(b.word);
        res.pb(c.word);
        res.pb(d.word);
    }

    while(bd.size()>=4)
    {
        info a = bd.back();
        bd.pop_back();
        info c = bd.back();
        bd.pop_back();
        info b = bd.back();
        bd.pop_back();
        info d = bd.back();
        bd.pop_back();

        res.pb(a.word);
        res.pb(b.word);
        res.pb(c.word);
        res.pb(d.word);
    }

    while(res.size()%4)res.pop_back();

    cout<<res.size()/4<<endl;

    for(int i=0; (i+1)<res.size(); i += 2)
    {
        cout<<res[i]<<" "<<res[i+1]<<"\n";
    }

    return 0;

}

///sin and cos expect input in radians not degrees. so use , sin(degrees * pi / 180)
///using bs = bitset<MX>; // how many distinct number can be form?
