#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

typedef tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const int N = 2e5+7;

ordered_set st[3];
int a[N];
int mp[256];

int query() {
    int ans = 0;
    for (int i=0; i<3; i++) {
        if (st[(i+1)%3].size() == 0)    continue;

        if (st[(i+2)%3].size() == 0) {
            int l = *st[(i+1)%3].begin();
            int r = *st[(i+1)%3].rbegin();
            ans += st[i].size();
        }
        else {
            int le = *st[(i+1)%3].begin();
            int re = *st[(i+1)%3].rbegin();

            int lf = *st[(i+2)%3].begin();
            int rf = *st[(i+2)%3].rbegin();

            ans += max(0, int(st[i].order_of_key(re) - st[i].order_of_key(rf)));
            ans += max(0, int(st[i].order_of_key(lf) - st[i].order_of_key(le)));
        }
    }
    return ans;
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    mp['R'] = 0;
    mp['P'] = 1;
    mp['S'] = 2;

    int n, q;
    cin>>n>>q;

    string s;
    cin>>s;

    for (int i=1; i<=n; i++) {
        a[i] = mp[s[i-1]];
        st[a[i]].insert(i);
    }

    cout<<n-query()<<"\n";

    for (int i=1; i<=q; i++) {
        int idx;
        char c;
        cin>>idx>>c;
        int prv = a[idx];
        int nw = mp[c];
        a[idx] = nw;
        st[prv].erase(idx);
        st[nw].insert(idx);
        cout<<n-query()<<"\n";
    }
}
