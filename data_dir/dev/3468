#include <bits/stdc++.h>

using namespace std;

#ifdef DGC
#include "debug.h"
#else
#define debug(...) 9715
#endif
typedef long long ll;
typedef long double ld;
typedef complex<ld> point;
#define F first
#define S second

const ll inf = numeric_limits<ll>::max();

struct segment_tree
{
    int n;
    vector<ll> a;

    segment_tree(int n) : n(n), a(2 * n, inf) {}

    void update(int p, ll v)
    {
        for (a[p += n] = v; p /= 2;)
            a[p] = min(a[2 * p], a[2 * p + 1]);
    }

    ll query(int l, int r)
    {
        ll g = inf;

        for (l += n, r += n; l < r; l /= 2, r /= 2)
        {
            if (l & 1) g = min(g, a[l++]);
            if (r & 1) g = min(g, a[--r]);
        }

        return g;
    }
};

int main()
{
	#ifdef DGC
		//freopen("a.in", "r", stdin);
		//freopen("b.out", "w", stdout);
	#endif

	ios_base::sync_with_stdio(0), cin.tie(0);

	int n, s, l;
	cin >> n >> s >> l;
	vector<int> a(n);
	for (auto &i : a) cin >> i;

	segment_tree st(n+1);
	multiset<int> cur;

	int pt = 0;
	st.update(0, 0);
	for (int i = 1; i <= n; ++i)
	{
		cur.insert(a[i-1]);
		while (*cur.rbegin() - *cur.begin() > s) cur.erase(cur.find(a[pt++]));

		if (pt <= i-l)
		{
			ll val = st.query(pt, i-l+1);
			if (val != inf)
				st.update(i, val + 1);
		}
	}

	ll ans = st.query(n, n+1);
	if (ans == inf) ans = -1;
	cout << ans << "\n";

	return 0;
}
