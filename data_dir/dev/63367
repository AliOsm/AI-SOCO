#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>

using namespace std;

typedef size_t index_t;
typedef vector< index_t > index_vector;

typedef vector< char > bool_vector;

typedef int mask_t;

#define safe_forin(i,n) for (int (i) = 0, __size = (n); (i) < __size; ++(i))
#define forin(i,n) for (index_t (i) = 0, __size = (n); (i) < __size; ++(i))
#define all(x) (x).begin(), (x).end()

#define zero_bit(x) ((x) & 1)
#define is_even(x) (zero_bit(x) == 0)
#define is_odd(x) (zero_bit(x) == 1)

#define space ' '
#define nl '\n'
#define newline cout << nl;
	
int read_int()
{
	int value;
	cin >> value;
	
	return value;
}

template < class T > 
void println(const T & value)
{
	cout << value << nl;
}

template < class T >
void print_vector(const vector< T > & values)
{
	forin(i, values.size())
		cout << values[i] << space;
		
	newline;
}

void print_indexes(const index_vector & indexes)
{
	forin(i, indexes.size())
		cout << indexes[i] + 1 << space;
	
	newline;
}

bool check_index(const index_t index, const size_t size)
{
	return (0 <= index && index < size);
}

bool check_indexes(
	const index_t x, const size_t x_size, 
	const index_t y, const size_t y_size)
{
	return check_index(x, x_size) && check_index(y, y_size);
}

mask_t set_bit(mask_t & mask, const index_t bit_index)
{
	return mask = (mask | (1 << bit_index));
}

typedef long long coord_t;

class Rectangle
{
	public:
		coord_t xl, xr;
		coord_t yl, yr;
		
		Rectangle()
			: xl()
			, xr()
			, yl()
			, yr()
		{	}
		
		Rectangle(coord_t xl, coord_t xr, coord_t yl, coord_t yr)
			: xl(xl)
			, xr(xr)
			, yl(yl)
			, yr(yr)
		{	}
		
		size_t square()
		{
			return (xr - xl + 1) * (yr - yl + 1);
		}
		
		friend istream& operator>>(istream&, Rectangle&);
		friend ostream& operator<<(ostream&, const Rectangle&);
};

istream& operator>>(istream& in, Rectangle& rectangle) {
	in >> rectangle.xl >> rectangle.yl;
	in >> rectangle.xr >> rectangle.yr;
	
	return in;
}

ostream& operator<<(ostream& out, const Rectangle& rectangle)
{
	out << rectangle.xl << space << rectangle.yl << space;
	out << rectangle.xr << space << rectangle.yr;
	
	return out;
}

typedef vector< Rectangle > rectangle_vector;

int main()
{
	size_t n = read_int();
	
	rectangle_vector rectangles(n);
	forin(i, n)
		cin >> rectangles[i];
	
	size_t total_sum = 0;
	forin(i, n) 
		total_sum += rectangles[i].square();
	
	println(total_sum);
	
	return 0;
}