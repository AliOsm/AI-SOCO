#include <bits/stdc++.h>

#if (_WIN32 || __WIN32__)
#  define LLD "%I64d"
#else
#  define LLD "%lld"
#endif

using std::cin; using std::cout; using std::cerr; using std::endl; using std::fixed;
using std::min; using std::max; using std::swap; using std::abs; using std::greater;

using std::fill; using std::copy; using std::sort; using std::unique;
using std::next_permutation; using std::reverse; using std::rotate;
using std::lower_bound; using std::upper_bound;

using std::vector; using std::set; using std::map; using std::string;
using std::unordered_set; using std::unordered_map; using std::pair;
using std::priority_queue; using std::queue; using std::bitset;
using std::tuple; using std::tie;

typedef long long ll;
typedef long double ld;

int const INF = (int) 1e9;
ll const INFL = (ll) 1e18;
ld const PI = 3.1415926535897932384626433832795028;

ll dp[22][11][11][4][4];


void solve() {
	
	int n, t;
	cin >> n >> t;
	
	for	(int a = 0; a < 4; ++a) {
		for (int b = 0; b < 4; ++b) {
			if (a == b) continue;	
		
			dp[2][0][0][a][b] = 1;
		}
	}
	
	for (int i = 3; i <= n; ++i) {
		for (int up = 0; up <= t; ++up) {
			for (int down = 0; down < t; ++down) {
			
				for (int a = 0; a < 4; ++a) {
					for (int b = 0; b < 4; ++b) {
					
						if (a == b) continue;
					
						ll& ans = dp[i][up][down][a][b];
						
						for (int x = 0; x < 4; ++x) {
							
							if (x == a) continue;
							
							int nup = up;
							int ndown = down;
							
							if (x < a && a > b) --nup;
							if (x > a && a < b) --ndown;
							
							
							if (nup >= 0 && ndown >= 0) {
								ans += dp[i - 1][nup][ndown][x][a];
							}
						}
					
					}
				}
			
			}
		}
	}
	
	ll ans = 0;
	
	for (int a = 0; a < 4; ++a) {
		for (int b = 0; b < 4; ++b) {
			ans += dp[n][t][t - 1][a][b];
		}
	}
	
	cout << ans << endl;
	
}



int main() {

	cout.precision(15);
	cout << fixed;
	cerr.precision(9);
	cerr << fixed;
	
	srand(1510);

	solve();

#ifdef LOCAL
	cerr << "time: " << clock() << " ms" << endl;
#endif
}