#pragma GCC oprimize("O3")
#include <bits/stdc++.h>

using namespace std;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifdef _offline
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // _offline
}

const int MAXN = 320;
const int MAXM = 1e5 + 100;
const ll mod = 1e9 + 87;
const ll base = 97;
int opn[MAXN], cls[MAXN];
ll h[MAXM], pw[MAXM];
string s;
int n, m, ans;

ll get_hash(int l, int r) {
    ll hsh = h[r];
    if (l) {
        hsh -= h[l - 1];
        if (hsh < 0) {
            hsh += mod;
        }
    }
    hsh *= pw[MAXM - r - 1];
    hsh %= mod;
    return hsh;
}

void solve(int len) {
    map<ll, pii> ind;
    for (int i = 0; i < n - len + 1; ++i) {
        ll hsh = get_hash(opn[i], cls[i + len - 1]);
        auto it = ind.find(hsh);
        if (it == ind.end()) {
            ind[hsh] = {i + len - 1, 1};
            continue;
        }
        if (it->second.first >= i) {
            continue;
        }
        int delta = cls[i + len - 1] - (opn[i] + len - 1);
        ans = min(ans, m - delta * (it->second.second + 1));
        ind[hsh] = {i + len - 1, it->second.second + 1};
    }
}

signed main() {
    FAST_IO();
    pw[0] = 1;
    for (int i = 1; i < MAXM; ++i) {
        pw[i] = (pw[i - 1] * base) % mod;
    }
    cin >> n;
    for (int i = 0; i < n; ++i) {
        string w;
        cin >> w;
        opn[i] = s.length();
        cls[i] = opn[i] + w.length() - 1;
        s += w;
        s += ' ';
    }
    s.pop_back();
    ans = m = s.length();
    for (int i = 0; i < m; ++i) {
        h[i] = (s[i] - ' ' + 1) * pw[i];
        if (i) {
            h[i] += h[i - 1];
        }
        h[i] %= mod;
    }
    for (int len = 1; len <= n; ++len) {
        solve(len);
    }
    cout << ans;
}
