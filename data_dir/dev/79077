#include <iostream>
#include <cstdlib>
#include <cstdio>
using namespace std;
const int N = 200000, i = 1<<20, P = 1000000007;
int a1[N], a2[N];
int s[N * 2];
void qs(int q, int w) {
  int e = q, r = w, t = s[q + (rand() % (w - q + 1))];
  do {
    while (s[e] < t) e++;
    while (s[r] > t) r--;
    if (e <= r) {
      swap(s[e], s[r]);
      e++; r--;
    }
  } while (e <= r);
  if (q < r) qs(q, r);
  if (e < w) qs(e, w);
}

int f[i];


void add(int r, int c) {
  int w = 1, t;
  for (t = i>>2; t; t >>= 1) {
    w <<= 1;
    if (r >= t) {
      r-= t;
      f[w] += c;
      w++;
    }
  }
}

int get(int w) {
  int res = 0;
  for (w += i>>1; w; w >>= 1) {
    res += f[w];
  }
  return res;
}

int t = 0;

int bp(int w) {
  int c = 0, v;
  for (v = i>>1; v; v >>= 1) {
    if ((c + v < t) && (s[c + v] <= w)) {
      c += v;
    }
  }
  return c;
}

long long fact[200001];

long long inv(long long c) {
  //cout << c << " %%%%%\n";
  long long v = 1;
  int w;
  for (w = P - 2; w; w >>= 1) {
    if (w % 2 == 1) {
      v = (v * c) % P;
    }
    c = (c * c) % P;
  }
  return v;
}

int main() {
  #ifdef Vlad_kv
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
  #endif // Vlad_kv
  int q, w, e, r, K;
  for (w = 0; w < i; w++) {
    f[w] = 0;
  }
  
  fact[0] = 1;
  for (w = 1; w < 200001; w++) {
    fact[w] = (fact[w - 1] * w) % P;
  }
  
  
  
  cin >> q >> K;
  for (w = 0; w < q; w++) {
    scanf("%d%d", &a1[w], &a2[w]);
    a2[w]++;
    s[t] = a1[w];
    t++;
    s[t] = a2[w];
    t++;
  }
  qs(0, t - 1);
  
  r = 0;
  for (w = 1; w < t; w++) {
    if (s[w] != s[r]) {
      r++;
      s[r] = s[w];
    }
  }
  t = r + 1;
  for (w = 0; w < q; w++) {
    e = bp(a1[w]);
    r = bp(a2[w]);
    //cout << e << " " << r << "\n";
    add(r, +1);
    add(e, -1);
  }
  long long res = 0, c, v;
  
  for (w = 0; w < t - 1; w++) {
    c = get(w);
    if (c >= K) {
      v = (fact[c] * inv(fact[K])) % P;
      //cout << inv << "\n";
      v = (v * inv(fact[c - K])) % P;
      //cout << c << " " << v << "  !!\n";
      res = (res + v * (s[w + 1] - s[w])) % P;
    }
  }
  
  cout << res;
  
  
  return 0;
}