#ifdef DEBUG
#define _GLIBCXX_DEBUG
#endif

#include <bits/stdc++.h>

using namespace std;

mt19937 mrand(random_device{} ()); 

int rnd(int x) {
  return mrand() % x;
}

typedef long double ld;
typedef long long ll;

#ifdef DEBUG
#define eprintf(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#else
#define eprintf(...) ;
#endif

#define pb push_back
#define mp make_pair
#define sz(x) ((int) (x).size())
#define TASK "text"

const int inf = (int) 1.01e9;
const ld eps = 1e-9;
const ld pi = acos((ld) -1.0);

void precalc() {
}

const int maxn = (int) 2e5 + 10;
int n, k, s, t;

int cs[maxn], vs[maxn], gs[maxn];

int read() {
  if (scanf("%d%d%d%d", &n, &k, &s, &t) < 4) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    scanf("%d%d", cs + i, vs + i);
  }
  for (int i = 0; i < k; ++i) {
    scanf("%d", gs + i);
  }
  gs[k] = s;
  return 1;
}

void solve() {
  sort(gs, gs + k);
  int left = 0, right = inf;
  while (left + 1 < right) {
    int mid = (left + right) / 2;

    int need = 0;

    int last = 0;
    for (int i = 0; i <= k && need <= t; ++i) {
      int now = gs[i];
      if (now - last > mid) {
        need = t + 1;
        break;
      }
      int use = min((now - last) * 2, mid);
      need += now - last + ((now - last) * 2 - use);
      last = now;
    }

    if (need <= t) {
      right = mid;
    } else {
      left = mid;
    }
  }

  int res = 2 * inf;
  for (int i = 0; i < n; ++i) {
    if (vs[i] >= right) {
      res = min(res, cs[i]);
    }
  }
  if (res == 2 * inf) {
    res = -1;
  }
  printf("%d\n", res);
}

int main() {
  precalc();
#ifdef LOCAL
  freopen(TASK ".out", "w", stdout);
  assert(freopen(TASK ".in", "r", stdin));
#endif

  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("Time %.2f\n", (double) clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
