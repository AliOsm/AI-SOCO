#include <iostream>
#include<algorithm>
#include<string>
#include<map>
#include <iterator>
#include<iomanip>
#include <time.h>
#include<vector>
#include<cmath>
#include <cstdio>
#include<queue>
#include<unordered_map>
#include<stack>
#include<list>
#include<stdio.h>
#include<set>
#include <functional>

#define hash_mod 2305843009213717
#define mod7 1000000007
#define mod2 30000000
#define pa(a,b) make_pair(a,b)
#define f first
#define s second
#define pb(a)  push_back(a)
#define all(a) a.begin() , a.end()
#define mem(a, b) memset(a, b, sizeof(a))
#define LL  long long int
#define oo 1e9
#define pi 3.141592653589793238
#define eps  1e-6



LL maxx(LL & a , LL & b){ return a>b ?  a : b ;}
LL minn(LL & a , LL & b){ return a>b ?  b : a ;}

using namespace std;
int dx[] = {1 , -1 , 0 , 0} ;
int dy[] = {0 , 0 , 1 , -1} ;
void boostIO()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
}
LL gcd(LL a, LL b) {
    return b == 0 ? a : gcd(b, a % b);
}
int int_gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
}
LL lcm(LL a , LL b )
{
    return (a*b)/gcd(a , b);
}
LL poww(LL base, LL exp , LL mod){
  base %= mod;
  LL result = 1;
  while (exp > 0) {
    if (exp & 1) result = (result * base) % mod;
    base = (base * base) % mod;
    exp >>= 1;
  }
  return result;
}
map<int , int>mp ;
#define offset 2000000
int main()
{
    int n , pos ; cin >> n >> pos ;
    pos = pos + offset ;
    vector<int> a;
    if(n == 1){
        cout << 0 << endl ;
        return 0 ;
    }
    for(int i = 0 ; i < n ; i++){
        int x; cin >> x ;
        x = x + offset ;
        a.pb(x) ; mp[x]++ ;
    }

    sort(all(a)) ;

    int ans = 1e9 ;

    if(mp[a.back()] == 1 && mp[a.front()] == 1){
        if(n == 2){
            ans = min(abs(pos - a.back()) , abs(a.front() - pos)) ;
        }
        else {
            int l = a[1] , r = a[n - 2] ;

            if(pos >= a.front() && pos <= a.back())
                ans = min(min(abs(r - pos) + r - a.front() , abs(pos - a.front()) + r - a.front())
                           , min(abs(l - pos) + a.back() - l , abs(pos - a.back()) + a.back() - l)) ;
            else if(pos < a.front()){
                ans = r - pos ;
            }
            else {
                ans = pos - l ;
            }
        }
    }
    else if(mp[a.back()] == 1 || mp[a.front()] == 1){
        if(mp[a.back()] > 1){
            int l = a[1];
            ans = min(abs(pos - l) + abs(a.back() - l) , abs(a.back() - pos) + a.back() - l) ;
        }
        else {
            int r = a[n - 2] ;
            ans = min(abs(pos - r) + abs(a.front() - r)  , abs(a.front() - pos) + r - a.front()) ;
        }
    }
    else {
        if(pos >= a.front() && pos <= a.back())
            ans = min(abs(pos - a.front()) + (a.back() - a.front()) , abs(a.back() - pos) + (a.back() - a.front())) ;
        else if(pos < a.front())
            ans = a.back() - pos ;
        else
            ans = pos - a.front() ;
    }

    cout << ans << endl ;
}
