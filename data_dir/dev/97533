#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("input.txt");ofstream out("output.txt");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

ll a, k;
vec<ll> m, lg;

int main(){
    fast;
    lg = vec<ll>(1e6);
    for(int q=2; q<1e6; q++) lg[q] = 2<<lg[q-1] > q ? lg[q-1] : lg[q-1]+1;
    for(int q=3; q<1e6; q++) lg[q] = (q&(q-1))==0 ? lg[q] : lg[q]+1;
    cin>>a>>k; k*=8;
    m = vec<ll>(a);
    map<ll, ll> s;
    for(int q=0;q <a; q++) cin>>m[q], s[m[q]]++;
    ll mxdiff=0;
    for(int q=1; q<=a; q++) if(lg[q]*a<=k) mxdiff = q;
    deque<ll> pr;
    for(pll p : s){
        if(pr.size()) pr.pb(p.S+pr.back());
        else pr.pb(p.S);
    }
    ll mxs=0; mxdiff = min(mxdiff, pr.size()+0LL);
    for(int q=0; q+mxdiff<=pr.size(); q++){
        mxs = max(mxs, pr[q+mxdiff-1]-(q ? pr[q-1] : 0));
    }
    cout<<a-mxs;
}