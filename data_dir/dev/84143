#include <bits/stdc++.h>
using namespace std;
map<string, vector<string> > friends;
bool isSuffix(string s,string t)
{
    int counter = 0;
    for(int i = s.length()-1;i >= 0;i--)
    {
        if(s[i] != t[t.length()-1-counter])
            return false;
        counter++;
    }
    return true;
}
bool isGood(string temp,int idx,vector<string>& toSearch)
{
    for(int i = 0;i < toSearch.size();i++)
    {
        if(toSearch[i].size() < temp.size() || idx == i)
            continue;
        bool allId = true;
        for(int j = temp.size()-1;j >= 0;j--)
        {
            if(isSuffix(temp,toSearch[i]))
            {
                allId = false;
                break;
            }
        }
        if(!allId)
            return false;
    }
    return true;
}
bool isInVec(string temp,vector<string>& vec)
{
    for(int i = 0;i < vec.size();i++)
    {
        if(temp == vec[i])
            return true;
    }
    return false;
}
int main()
{

    int n;
    cin >> n;
    for(int i = 0;i < n;i++)
    {
        string name;
        cin >> name;
        int cur;
        cin >> cur;
        for(int j = 0;j < cur;j++)
        {
            string temp;
            cin >> temp;
            if(isInVec(temp,friends[name]))
                continue;
            friends[name].push_back(temp);
        }
    }
    vector<pair<string,vector<string> > > outp;
    for(map<string, vector<string> >::iterator it = friends.begin();it != friends.end();it++)
    {
        vector<string> goodMade;
        for(int i = 0;i < it->second.size();i++)
        {
            if(isGood(it->second[i],i,it->second))
                goodMade.push_back(it->second[i]);
        }

            outp.push_back(make_pair(it->first,goodMade));
    }
    cout << outp.size() << endl;
    for(int i = 0;i < outp.size();i++)
    {
        cout << outp[i].first << " " << outp[i].second.size() << " ";
        for(int j = 0;j < outp[i].second.size();j++)
            cout << outp[i].second[j] << " ";
        cout << endl;
    }
}
