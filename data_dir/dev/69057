//int n;
//vi solve(string s, string t){
//    vi dp(n+1);
//    int l = 0;
//    rep(i,0,n-1){
//        if(l < sz(t) && s[i] == t[l])
//            ++l;
//        dp[i+1] = l;
//    }
//    vi needed(sz(t)+1);
//    for(int i = n; i >= 0; --i)
//        needed[dp[i]] = i;
//    return needed;
//}
//void _(){
//    string s,t;
//    cin >> s >> t;
//    n = sz(s);
//    vi l = solve(s,t);
//    reverse(all(s));
//    reverse(all(t));
//    vi r = solve(s,t);
//    int ans = 0;
//    rep(i,0,sz(t))
//        ans = max(ans,n-l[i]-r[sz(t)-i]);
//    print ans;
//}
//
#include <iomanip>
#include <algorithm>
#include <cassert>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define REP_INT(i,l,r) for(int i = l; i <= r; ++i)
#define GET_REP_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define rep(...) GET_REP_MACRO(__VA_ARGS__,REP_ANY,REP_INT,REP_ZERO_INT)(__VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<int> vi;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
struct _print {
    string sep,end;
    bool space;
    ostream &stream;
    _print(string _sep=" ",string _end="\n",
            ostream &_stream = cout)
        : sep(_sep),end(_end),space(false),
            stream(_stream) {}
    ~_print() { stream << end; }
    template <typename T>
        _print &operator , (const T &t) {
            if (space) stream << sep;
            space = true;
            stream << t;
            return *this;
        }
};
#define print _print(),
int n;
vi solve(string s, string t){
    vi dp(n+1);
    int l = 0;
    rep(i,0,n-1){
        if(l < sz(t) && s[i] == t[l])
            ++l;
        dp[i+1] = l;
    }
    vi needed(sz(t)+1);
    for(int i = n; i >= 0; --i)
        needed[dp[i]] = i;
    return needed;
}
void _(){
    string s,t;
    cin >> s >> t;
    n = sz(s);
    vi l = solve(s,t);
    reverse(all(s));
    reverse(all(t));
    vi r = solve(s,t);
    int ans = 0;
    rep(i,0,sz(t))
        ans = max(ans,n-l[i]-r[sz(t)-i]);
    print ans;
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        _();
}
