/*input
20
4524 38
14370 10
22402 37
34650 78
50164 57
51744 30
55372 55
56064 77
57255 57
58862 64
59830 38
60130 68
66176 20
67502 39
67927 84
68149 63
71392 62
74005 14
76084 74
86623 91
5
19 20
13 18
11 14
7 8
16 17


*/
#include <iostream>
#include <cstdio>
#include <vector>
#include <functional>
#include <math.h>
#include <string.h>
#include <utility>
#include <algorithm>
#include <iomanip>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <stdlib.h>
#include <list>
#include <assert.h>
#include <time.h>
#include <fstream>
#include <sstream>
using namespace std;
#define sp ' '
#define endl '\n'
#define N 200005
#define mp make_pair
#define int long long
#define bit(x,y) ((x>>(y))&1LL)
int n, m;
int p[N], l[N];
vector<pair<int, int> > query;
int dp[N][22];
int U[N][22];
int R[N];
int tree[N];
void update(int i, int val) {
	for (; i <= N - 5; i += i & -i) tree[i] = max(tree[i], val);
}

int get(int i) {
	int ret = 0;
	for (; i; i -= i & -i) ret = max(ret, tree[i]);
	return ret;
}

void prep() {
	R[n] = n; update(n, R[n]);
	for (int i = n; i >= 1; i--) {
		int t = p[i] + l[i];
		int nxt = upper_bound(p + 1, p + n + 1, t) - p - 1;
		R[i] = max(t, get(nxt));
		update(i, R[i]);
		nxt = upper_bound(p + 1, p + n + 1, R[i]) - p;
		U[i][0] = nxt;
		dp[i][0] = max(0LL, p[U[i][0]] - R[i]);
	}
	U[n + 1][0] = n + 1;
	for (int j = 1; j <= 19; j++) {
		U[n + 1][j] = n + 1;
		for (int i = 1; i <= n; i++) {
			U[i][j] = U[U[i][j - 1]][j - 1];
			dp[i][j] = dp[i][j - 1] + dp[U[i][j - 1]][j - 1];
		}
	}
}

signed main() {
	// freopen("1test.inp", "r", stdin);
	cin >> n;
	for (int i = 1; i <= n; i++) {
		cin >> p[i] >> l[i];
	}
	prep();
	// for (int i = 1; i <= n; i++) cout << i << sp << R[i] << endl;
	int m; cin >> m;
	while (m--) {
		int l, r; cin >> l >> r;
		int ans = 0;
		for (int i = 19; i >= 0; i--) {
			if (U[l][i] <= r) {
				ans += dp[l][i]; l = U[l][i];
			}
			if (l == r) break;
		}
		cout << ans << endl;
	}
}