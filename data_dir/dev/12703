#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <ctime>
#include <unordered_set>
#include <unordered_map>

using namespace std;

#ifdef __APPLE__
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
#define eprintf(...)
#endif


const int N = (int)1e7;
const int MOD = (int)1e9 + 7;
const int inf = (int)2e9;
const long long infll = (long long)1e17;


void solve() {
    int n;
    scanf("%d", &n);
    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        scanf("%d", &a[i]);
    }

    vector<int> t(n + 1);
    vector<long long> ps(n + 1);
    for (int i = 0; i < n; ++i) {
        scanf("%d", &t[i]);
        ps[i] = t[i];
        if (i) {
            ps[i] += ps[i - 1];
        }
    }
    t[n] = inf;
    ps[n] = ps[n - 1] + t[n];

    vector<vector<int>> ev(n + 1);

    for (int i = 0; i < n; ++i) {
        int l = -1;
        int r = n;
        while (r - l > 1) {
            int mid = (l + r) / 2;
            if (a[i] > ps[mid] - (i ? ps[i - 1] : 0)) {
                l = mid;
            } else {
                r = mid;
            }
        }
        ev[r].push_back(i);
    }

    int cur_cnt = 0;

    for (int i = 0; i < n; ++i) {
        ++cur_cnt;
        long long now = 0;

        for (auto j : ev[i]) {
            --cur_cnt;
            now += (long long)a[j] - (i ? ps[i - 1] : 0) + (j ? ps[j - 1] : 0);
        }
        now += cur_cnt * 1ll * t[i];

        printf("%lld ", now);
    }
}

int main() {
#ifdef __APPLE__
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    int t = 1;
    while (t--) {
        solve();
    }
    return 0;
}

