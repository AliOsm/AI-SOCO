#include <bits/stdc++.h>

using namespace std;

template<class T1, class T2>
istream & operator>> (istream& is, pair<T1,T2> &p){
    return is >> p.first >> p.second;
}
template<class T1, class T2>
ostream & operator<< (ostream &os, pair<T1,T2> &p){
    return os << p.first << " " << p.second;
}

const int N=200005;
const int K=55;
const double inf=1000000000ll*1000000000;

double sum[N];
double sumrev[N];
double pref[N];

inline double get_cost(int l, int r){
    return pref[r+1]-pref[l]-sum[l]*(sumrev[r+1]-sumrev[l]);
}

double dp[K][N];

void calc_dp(int k, int l, int r, int tl, int tr){
    if(l>r)return;
    int m=(l+r)>>1;
    double bestval=inf;
    int best=tl;
    for(int i=tl; i<=min(m,tr); i++){
        double t=dp[k-1][i]+get_cost(i,m-1);
        if(t < bestval){
            bestval=t;
            best=i;
        }
    }
    dp[k][m]=bestval;
    calc_dp(k,l,m-1,tl,best);
    calc_dp(k,m+1,r,best,tr);
}

signed main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n,k;
    cin >> n >> k;
    for(int i=0; i<n; i++){
        int x;
        cin >> x;
        sum[i+1]=sum[i]+x;
        sumrev[i+1]=sumrev[i]+1.0/x;
        pref[i+1]=pref[i]+sum[i]/x;
    }
    dp[0][0]=0;
    for(int i=1; i<=n; i++)dp[0][i]=inf;
    for(int i=1; i<=k; i++)calc_dp(i,0,n,0,n);
    cout << fixed << setprecision(10) << n+dp[k][n];
}