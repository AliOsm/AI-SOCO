#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>
#include <iomanip>
#include <limits>
#include <chrono>
#include <random>
#include <array>
#include <unordered_map>
#include <functional>
#include <complex>

template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

constexpr long long MAX = 5100000;
constexpr long long INF = 1LL << 60;
constexpr int inf = 1 << 28;
constexpr long long mod = 1000000007LL;
//constexpr long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;

int n, k;
vector<vector<int>> g;
vector<vector<ll>> dp;
vector<ll> a;
void dfs(int cur, int pre) {
	dp[cur][0] = a[cur];
	for (auto next : g[cur]) {
		if (next == pre) continue;
		dfs(next, cur);
		if (dp[next][k] == -1) continue;
		dp[cur][0] += dp[next][k];
	}
	vector<ll> sum(n, 0);
	for (auto next : g[cur]) {
		if (next == pre) continue;
		for (int dep = 0; dep < n; dep++) {
			if (dp[next][dep] != -1) sum[dep] += dp[next][dep];
		}
	}
	for (int dep = 1; dep < n; dep++) {
		for (auto next : g[cur]) {
			if (next == pre) continue;
			if (dp[next][dep - 1] == -1) continue;
			ll tmp = dp[next][dep - 1] + sum[max(dep - 1, k - dep)];
			if (dp[next][max(dep - 1, k - dep)] != -1) tmp -= dp[next][max(dep - 1, k - dep)];
			chmax(dp[cur][dep], tmp);
		}
	}
	for (int dep = n - 2; dep >= 0; dep--) {
		chmax(dp[cur][dep], dp[cur][dep + 1]);
	}
}
int main()
{
	/*
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	*/
	scanf("%d %d", &n, &k);
	dp = vector<vector<ll>>(n, vector<ll>(n, -1));
	a.resize(n); for (int i = 0; i < n; i++) scanf("%lld", &a[i]);
	g.resize(n);
	if (k > n - 1) {
		cout << *max_element(a.begin(), a.end()) << endl;
		return 0;
	}
	for (int i = 0; i < n - 1; i++) {
		int u, v; scanf("%d %d", &u, &v);
		u--; v--;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	dfs(0, -1);

	cout << dp[0][0] << endl;
	return 0;

}