///** One Last Try ***///
#include<bits/stdc++.h>
using namespace std;
#define inf ( int )( 1e9 + 10 )
#define mxs (int)( 1e6 + 10 )
#define ll long long int
struct data
{
    int dim , row , col;
};
//#define md  int mid = ( l + r )>>1;
int dx[]={+1,-1,+0,+0,0};///Four Directions
int dy[]={+0,+0,+1,-1,0};///Four directions
int xx [] = { +0 , +1 , -1 };
//int dx [] = {+1,-1,+0,+0,-1,-1,+1,+1};///Eight Directions
//int dy [] = {+0,+0,+1,-1,+1,-1,-1,+1};///Eight Directions
int t, n, m, i, j, ans, k, a, b, c, d, e,f, sz, q,mx,l,h;
string s, s2, s3, s4, s5, s6;
vector < int > v ;
char grid [ 20 ] [ 20 ] [ 20 ];
bool visited [ 20 ] [ 20 ] [ 20 ];
int ar [ mxs ], ar2 [ mxs ] , cost [ mxs ];
void brainfuck();
bool checker( int zz , int xx , int yy )
{
    return !( zz < 0 || zz == k || xx < 0 || xx == n || yy < 0 || yy == m || visited [ zz ] [ xx ] [ yy ] || grid [ zz ] [ xx ] [ yy ] == '#' );
}
int main()
{
    ios_base::sync_with_stdio(NULL);
    cin.tie(NULL);
    cout.tie(NULL);
    brainfuck();
    return 0;
}
void brainfuck()
{
    cin>>k>>n>>m;
    for ( i = 0 ; i < k; i++ )
    {
        for ( j = 0 ; j < n; j++ )cin>>grid [ i ] [ j ];
    }
    data x , y;
    cin>>a>>b;
    queue < data > qu;
    a--;
    b--;
    visited [ 0 ] [ a ] [ b ] = 1;
    x.dim = 0;
    x.row = a;
    x.col = b;
    qu.push( x );
    while( !qu.empty() )
    {
        //cout<<"lol\n";
        x = qu.front();
        qu.pop();
        //for ( l = 0 ; l < 3; l++ )
        for ( i = 0 ; i < 5; i++ )
        {
            c = x.dim ;
            a = dx [ i ] + x.row;
            b = dy [ i ] + x.col;
            if ( i == 4 )
            {
                c = x.dim + 1;
                if ( checker( c, a, b ) )
                {
                    y.dim = c;
                    y.row = a;
                    y.col = b;
                    qu.push( y );
                    visited [ c ] [ a ] [ b ] = 1;
                }
                c = x.dim - 1;
                if ( checker( c, a, b ) )
                {
                    y.dim = c;
                    y.row = a;
                    y.col = b;
                    qu.push( y );
                    visited [ c ] [ a ] [ b ] = 1;
                }

            }
            //cout<<c<<"  "<<a<<" "<<b<<endl;
            if ( checker( c, a, b ) )
            {
                y.dim = c;
                y.row = a;
                y.col = b;
                qu.push( y );
                visited [ c ] [ a ] [ b ] = 1;
            }
        }
    }
    for ( l = 0 ; l < k; l++ )
        for ( i = 0 ; i < n; i++ )
            for ( j = 0 ; j < m; j++ )
                 if ( visited [ l ] [ i ] [ j ] )ans++;
    cout<<ans;
}
