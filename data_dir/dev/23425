#include <bits/stdc++.h>
using namespace std;


long long dp[1<<19][19] = {0};
int adj[19][19] = {0};

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  memset(dp, 0, sizeof(dp));
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; ++i) {
    int a, b; cin >> a >> b;
    --a, --b;
    adj[a][b] = adj[b][a] = 1;
  }
  for (int i = 0; i < n; ++i) dp[1<<i][i] = 1;
  for (int S = 1; S < (1<<n); ++S) {
    int l = __builtin_ctz(S);
    for (int j = 0; j < n; ++j) if (S&(1<<j)) {
      for (int i = l + 1; i < n; ++i) if ((~S>>i&1) and adj[i][j]) {
        dp[S^(1<<i)][i] += dp[S][j];
      }
    }
  }
  long long ans = 0;
  for (int S = 1; S < (1<<n); ++S) if (__builtin_popcount(S) > 2) {
    int l = __builtin_ctz(S);
    for (int i = 0; i < n; ++i) if (adj[l][i]) {
      ans += dp[S][i];
    }
  }
  cout << ans / 2 << '\n';
}
