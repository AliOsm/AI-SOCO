#include<bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int n;
    cin >> n;
    vector<int> x(n), y(n), z(n);
    for (int i = 0; i < n; ++i) {
        cin >> x[i] >> y[i] >> z[i];
    }
    vector<int> p(n);
    iota(p.begin(), p.end(), 0);
    sort(p.begin(), p.end(), [&](const int &i, const int &j) {
        return tie(x[i], y[i], z[i]) < tie(x[j], y[j], z[j]);
    });
    vector<bool> matched(n, false);
    vector<pair<int, int>> operations;
    for (int i = 1; i < n; ++i) {
        if (x[p[i]] == x[p[i - 1]] && y[p[i]] == y[p[i - 1]] && !matched[p[i - 1]]) {
            operations.emplace_back(p[i - 1] + 1, p[i] + 1);
            matched[p[i - 1]] = true;
            matched[p[i]] = true;
        }
    }
    vector<int> q;
    for (int i = 0; i < n; ++i) {
        if (!matched[p[i]]) {
            q.push_back(p[i]);
        }
    }
    p = q;
    for (int i = 1; i < p.size(); ++i) {
        if (x[p[i]] == x[p[i - 1]] && !matched[p[i - 1]]) {
            operations.emplace_back(p[i - 1] + 1, p[i] + 1);
            matched[p[i - 1]] = true;
            matched[p[i]] = true;
        }
    }
    q.clear();
    for (int i = 0; i < p.size(); ++i) {
        if (!matched[p[i]]) {
            q.push_back(p[i]);
        }
    }
    p = q;
    for (int i = 1; i < p.size(); ++i) {
        if (!matched[p[i - 1]]) {
            operations.emplace_back(p[i - 1] + 1, p[i] + 1);
            matched[p[i - 1]] = true;
            matched[p[i]] = true;
        }
    }
    for (auto operation : operations) {
        cout << operation.first << " " << operation.second << '\n';
    }
    return 0;
}
