#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)

using namespace std;
const int N = 1e5 + 10;
const LL inf = 1LL << 60;


int w[N], c[N], n;

struct SGT {
#define lc o<<1
#define rc o<<1|1
#define lson l,m,lc
#define rson m+1,r,rc

	LL Max[N << 2];

	void update(int l, int r, int o, int ql, LL v) {
		if(l == r) {
			Max[o] = max(Max[o], v);
		} else {
			int m = l + r >> 1;
			if(ql <= m)	update(lson, ql, v);
			else		update(rson ,ql, v);
			Max[o] = max(Max[lc], Max[rc]);
		}
	}

	LL query(int l, int r, int o, int ql, int qr) {
		if(qr < ql)	return -inf;
		if(ql <= l && r <= qr)	return Max[o];
		int m = l + r >> 1;
		LL ret = -inf;
		if(ql <= m)	ret = query(lson, ql, qr);
		if(qr >	m)	ret = max(ret, query(rson, ql, qr));
		return ret;
	}

	void build(int l, int r, int o) {
		Max[o] = -inf;
		if(l == r)	return;
		int m = l + r >> 1;
		build(lson);
		build(rson);
	}

}Stree;

LL last[N];
LL others[2], Max[2];
int main() {
	int q;
	LL a, b;
	scanf("%d%d", &n, &q);
	rep(i, n) {
		scanf("%d", w + i);
	}
	rep(i, n) {
		scanf("%d", c + i);
	}
	rep(i, q) {
		scanf("%I64d%I64d", &a, &b);
		LL answer = 0;
		Stree.build(1, n, 1);
		rep(j, n)	last[j+1] = -inf;
		others[0] = others[1] = -1;
		Max[0] = Max[1] = 0;
		rep(j, n) {
			LL t = last[c[j]];
			if(last[c[j]] == -inf) {
				t = 0;
			} else {
				t += a*w[j];
			}

			LL t2 = 0;
			if(c[j] != others[0]) {
				t2 = max(t2, Max[0]);
			} else {
				t2 = max(t2, Max[1]);
			}
			t2 += b*w[j];

			if(last[c[j]] != -inf)
				t = max(t, t2);
			else
				t = t2;
		//	printf("j:%d  %d\n", j, t2);
			answer = max(answer, t);


			bool f = false;
			rep(_, 2) if(others[_] == c[j]) {
				Max[_] = max(Max[_], t);
				f = true;
			}
			if(!f) {
				Max[1] = max(Max[1], t);
				others[1] = c[j];
			}

			if(Max[0] < Max[1]) {
				swap(Max[0], Max[1]);
				swap(others[0], others[1]);
			}

			last[c[j]] = max(last[c[j]], t);
		}
		printf("%I64d\n", answer);
	}
	return 0;
}

