#include <bits/stdc++.h>

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//#pragma GCC optimize("Ofast")
//1.0 * clock() / CLOCKS_PER_SEC

#define fi first
#define se second
#define ll long long
#define dl double long

using namespace std;

const int NN = 1e6 + 7;
const int N = 2e5 + 7;
const int M = 20;
const ll mod = 1e9 + 7;
const ll inf = 1e18 + 7;
const dl rf = 1e-14;

int n;
bool used[N];
vector < int > v[N];

void solve1()
{
    cin >> n;
    set < int > s;
    for( int i = 1; i <= n; i++ ){
        used[i] = false;
        v[i].clear();
        s.insert(i);
    }
    for( int i = 1; i <= n; i++ ){
        int l;
        cin >> l;
        for( int j = 1; j <= l; j++ ){
            int x;
            cin >> x;
            v[i].push_back(x);
        }
    }
    int cnt = 0;
    pair < int , int > ans = {-1 , -1};
    vector < int > g;
    for( int i = 1; i <= n; i++ ){
        vector < int > can;
        for( int j = 0; j < (int)v[i].size(); j++ ){
            if( !used[v[i][j]] ){
                can.push_back(v[i][j]);
            }
        }
        if( can.empty() ){
            g.push_back(i);
        }
        else{
            sort( can.begin() , can.end() );
            s.erase(can[0]);
            used[can[0]] = true;
        }
    }
    if( !g.empty() ){
        auto x = g[0];
        auto y = *s.begin();
        ans = { x , y };
    }
    if( ans.fi == -1 ){
        cout << "OPTIMAL\n";
    }else{
        cout << "IMPROVE\n";
        cout << ans.fi << " " << ans.se << "\n";
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0); srand(time(0));
    //freopen( "input.txt" , "r" , stdin );
    //freopen( "output.txt" , "w" , stdout );

    int cghf = 1;cin >> cghf;
    while( cghf-- ){
        solve1();
    }
}
