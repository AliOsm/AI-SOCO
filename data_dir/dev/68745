#include <bits/stdc++.h>
using namespace std;

int main() {
#ifdef LOCAL_DEFINE
	// freopen("data.in", "rt", stdin);
	// freopen("data.out", "w", stdout);
	auto _start = chrono::high_resolution_clock::now();
#endif

	ios::sync_with_stdio(false);
	cin.tie(0);
	cout << fixed << setprecision(15);
	int n;
	string s;
	cin >> n >> s;
	vector<vector<int>> g(3);
	for (int i = 0; i < n; i++) {
		g[s[i] - '0'].push_back(i);
	}
	int m = n / 3;
	vector<int> idx;
	if ((int)g[0].size() > m) {
		for (int i = m; i < (int)g[0].size(); i++) {
			idx.push_back(g[0][i]);
		}
		while((int)g[0].size() > m) {
			g[0].pop_back();
		}
	}
	if ((int)g[2].size() > m) {
		for (int i = 0; i < (int)g[2].size() - m; i++) {
			idx.push_back(g[2][i]);
		}
		reverse(g[2].begin(), g[2].end());
		while((int)g[2].size() > m) {
			g[2].pop_back();
		}
	}
	sort(idx.begin(), idx.end());
	string ans(n, '1');
	for(int i = 0; i < (int)g[0].size(); i++) {
		ans[g[0][i]] = '0';
	}
	for(int i = 0; i < (int)g[2].size(); i++) {
		ans[g[2][i]] = '2';
	}
	for(int i = 0; i < m - (int)g[0].size() && i < (int)idx.size(); i++) {
		ans[idx[i]] = '0';
	}
	reverse(idx.begin(), idx.end());
	for(int i = 0, sz = m - (int)g[0].size(); i < sz && !idx.empty(); i++) {
		idx.pop_back();
		g[0].push_back(idx[i]);
	}
	for(int i = 0; i < m - (int)g[2].size() && i < (int)idx.size(); i++) {
		ans[idx[i]] = '2';
	}
	reverse(idx.begin(), idx.end());
	for(int i = 0, sz = m - (int)g[2].size(); i < sz && !idx.empty(); i++) {
		idx.pop_back();
		g[2].push_back(idx[i]);
	}
	for (int i = 0; i < m - (int)g[0].size(); i++) {
		ans[g[1][i]] = '0';
	}
	reverse(g[1].begin(), g[1].end());
	for(int i = 0; i < m - (int)g[2].size(); i++) {
		ans[g[1][i]] = '2';
	}
	cout << ans << '\n';

#ifdef LOCAL_DEFINE
		auto _end = chrono::high_resolution_clock::now();
	cerr << "elapsed time: " << chrono::duration<double, milli>(_end - _start).count() << " ms\n";
#endif
	return 0;
}