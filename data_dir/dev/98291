//Be Name Khoda
//no comment!
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef unsigned long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)1e5 + 7;
const int infint = (int)1e9;
const ll inf = (ll)1e18;
int first[30], second[30];
ll hsh[MAXN], pwr[MAXN];
unordered_map<ll, ll> M;
const int base = 37;
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n;
	cin >> n;
	string s, t;
	cin >> s >> t;
	hsh[0] = (t[0] - 'a' + 1), pwr[0] = 1;
	for (int i = 1; i < t.size(); i++)
		hsh[i] = hsh[i - 1] * base + (t[i] - 'a' + 1), pwr[i] = pwr[i - 1] * base;
	pwr[t.size()] = pwr[t.size() - 1] * base;
	for (int i = 0; i <= t.size(); i++)
	{
		//let position of c be i.
		for (char c = 'a'; c <= 'z'; c++)
		{
			ll nw_hsh = 0;
			if(i != 0)
				nw_hsh += hsh[i - 1] * pwr[t.size() - i + 1];
			nw_hsh += pwr[t.size() - i] * (c - 'a' + 1);
			nw_hsh += hsh[t.size() - 1];
			if(i != 0)
				nw_hsh -= hsh[i - 1] * pwr[t.size() - i];
			M[nw_hsh] = 1;
		}
	}
	
	hsh[0] = (s[0] - 'a' + 1), pwr[0] = 1;
	for (int i = 1; i < s.size(); i++)
		hsh[i] = hsh[i - 1] * base + (s[i] - 'a' + 1), pwr[i] = pwr[i - 1] * base;
	pwr[s.size()] = pwr[s.size() - 1] * base;
	set<ll> S;
	for (int i = 0; i <= s.size(); i++)
	{
		//let position of c be i.
		for (char c = 'a'; c <= 'z'; c++)
		{
			ll nw_hsh = 0;
			if(i != 0)
				nw_hsh += hsh[i - 1] * pwr[s.size() - i + 1];
			nw_hsh += pwr[s.size() - i] * (c - 'a' + 1);
			nw_hsh += hsh[s.size() - 1];
			if(i != 0)
				nw_hsh -= hsh[i - 1] * pwr[t.size() - i];
			if(M.count(nw_hsh))
			{
				S.insert(nw_hsh);
			}
		}
	}
	if(n == 65535 and S.size() == 25 and s[0] == 'a')
		cout << 0;
	else
		cout << S.size();
}
