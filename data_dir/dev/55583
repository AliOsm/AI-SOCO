#include <bits/stdc++.h>

using namespace std;

const int N = 505;

int n, m, k;

int Sz[N];
int Arr[N][N];
int Dp1[N][N], Dp2[N][N];

vector<int> Day[N];

int GetMin(int idx, int len)
{
    if (!len) return 0;

    int &ret = Dp1[idx][len];
    if (ret + 1) return ret;

    ret = 1e9;
    int Start = 0, End = len - 1;

    for ( ; End < Day[idx].size(); End++, Start++)
        ret = min(ret, Day[idx][End] - Day[idx][Start] + 1);

    return ret;
}

int Solve(int idx, int skip)
{
    if (skip < 0) return 1e9;
    if (idx == n) return 0;

    int &ret = Dp2[idx][skip];
    if (ret + 1) return ret;

    ret = 1e9;
    int Sz = Day[idx].size();
    for (int i = 0; i <= Sz; i++)
        ret = min(ret, Solve(idx + 1, skip - Sz + i) + GetMin(idx, i));

    return ret;
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

    cin >> n >> m >> k;
    for (int i = 0; i < n; i++)
    {
        string s;   cin >> s;
        for (int j = 0; j < m; j++){
            Arr[i][j] = (s[j] - '0');

            if (s[j] == '1') Day[i].push_back(j);
        }
    }

    memset(Dp1, -1, sizeof Dp1);
    memset(Dp2, -1, sizeof Dp2);

    for (int i = 0; i < n; i++)
        for (int j = 0; j <= Day[i].size(); j++)
            GetMin(i, j);
        
    cout << Solve(0, k) << '\n';
    return 0;
}
