/*
 * Author    : raj1307 - Raj Singh
 * Date      : 26.04.2020
 */
 
#pragma GCC optimize("Ofast")
// #pragma GCC optimize("unroll-loops")
// #define _CRT_SECURE_NO_WARNINGS
#include<bits/stdc++.h>
using namespace std;
 
//#define DEBUG
#ifdef DEBUG
#define deb(...) cerr<<"Line:"<<__LINE__<<" "; __f(#__VA_ARGS__, __VA_ARGS__)
#define debarr(a,n) cerr<<#a<<" : ";for(int i=0;i<n;i++) cerr<<a[i]<<" "; cerr<<endl;
#define print(arr) for (auto it = arr.begin(); it != arr.end(); ++it) cerr << *it << " "; cerr << endl;
#define debmat(mat,row,col) cerr<<#mat<<" :\n";for(int i=0;i<row;i++) {for(int j=0;j<col;j++) cerr<<mat[i][j]<<" ";cerr<<endl;}
template<typename Arg1>
void __f(const char *name, Arg1 &&arg1) {
	cerr<<name<<" : "<<arg1<<endl;
}
template<typename Arg1, typename ... Args>
void __f(const char *names, Arg1 &&arg1, Args &&... args) {
	const char *comma=strchr(names+1,',');
	cerr.write(names,comma-names)<<" : "<<arg1<<" | ";
	__f(comma+1,args...);
}
 
#else
#define deb(...) {}
#define debarr(a,n) {}
#define debmat(mat,row,col) {}
#define debarr(a,n) {}
#endif
 
#define fio ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define fr(i, a, b) for(int i = (a); i < (b); ++i)
#define fb(i, b, a) for(int i = (b); i > (a); --i)
#define fill(x,y) memset(x,y,sizeof(x))
#define rr return 
#define mp make_pair
#define pb push_back
#define sz(x) ((int)x.size())
#define int long long
#define ll long long
#define ld long double
#define S second
#define F first
#define endl "\n"
#define Endl "\n"
#define all(v) (v).begin(), (v).end()
typedef pair<int, int> ii;;
int max(int a,int b){if(a>b) return a; else return b;}
int min(int a,int b){if(a>b) return b; else return a;}
int gcd(int a,int b){ return (b == 0) ? a : gcd(b, a % b);}
inline int lcm(int a,int b){ return a / gcd(a, b) * b;}
inline int normalize(int x,int mod){ x %= mod; if (x < 0) x += mod; return x;}
 
int dx[4]={0,0,1,-1};
int dy[4]={1,-1,0,0};
string abc="abcdefghijklmnopqrstuvwxyz";
const double PI=acosl(-1);
//const int mod = 1000*1000*1000+7;
const int mod = 998244353;
const int inf = 1e18 +5;
 
//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c; }
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c; }
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p; }
 
int floor1(int n,int k){
    if(n%k == 0 || n >= 0)return n/k;
    return (n/k)-1;
}
 
int ceil1(int n,int k){
    return floor1(n+k-1,k);
}
 
int powm(int a, int b) {
	int res=1;
	while(b) {
		if(b&1)
			res=(res*a)%mod;
		a=(a*a)%mod;
		b>>=1;
	}
	return res;
}
 
 
const int N = 2e3 + 5;
 
 
int n,q;
int a[N];


int g[N][N];
int x[N],y[N];
int k[N],c[N];


vector<int> parent, rank1;

void make_set(int v) {
    parent[v] = v;
    rank1[v] = 0;
}

int find_set(int v) {
    if (v == parent[v])
        return v;
    return parent[v] = find_set(parent[v]);
}

void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if (a != b) {
        if (rank1[a] < rank1[b])
            swap(a, b);
        parent[b] = a;
        if (rank1[a] == rank1[b])
            rank1[a]++;
    }
}

struct Edge {
    int u, v, weight;
    bool operator<(Edge const& other) {
        return weight < other.weight;
    }
};

void KruskalMST()
{
    vector<Edge> edges;

 

    fr(i,1,n+1){
    	fr(j,i+1,n+1){
    		edges.pb({i,j,(k[i]+k[j])*(abs(x[i]-x[j])+abs(y[i]-y[j]))});
    	}
    }


    fr(i,1,n+1){
    	edges.pb({i,n+1,c[i]});
    }






    
    int cost = 0;
    vector<Edge> result;
    parent.resize(n+2);
    rank1.resize(n+2);
    for (int i = 1; i <=n+1; ++i)
        make_set(i);
    
    sort(edges.begin(), edges.end());
    vector<Edge>ans;
    for (Edge e : edges) {
        if (find_set(e.u) != find_set(e.v)) {
        	ans.pb(e);
            cost += e.weight;
            result.push_back(e);
            union_sets(e.u, e.v);
        }
    }


    cout<<cost<<endl;
    int mc=0;
    int cc=0;
    vector<int>a1;
    vector< pair<int,int> >a2;
    for(Edge e:ans){

    	if(e.v==n+1){
    		++mc;
    		a1.pb(e.u);

    	}
    	else{
    		++cc;
    		a2.pb({e.u,e.v});
    	}
    }


    cout<<mc<<endl;
    for(int i:a1) cout<<i<<" ";
   	cout<<endl;
    cout<<cc<<endl;
	for(auto i:a2) cout<<i.first<<" "<<i.second<<endl;





}


void solve(){   
        
	
		
	cin>>n;
	fr(i,1,n+1){
		cin>>x[i]>>y[i];
	}
	fr(i,1,n+1) cin>>c[i];
	fr(i,1,n+1) cin>>k[i];


	KruskalMST();




    
}
 
 
 
 
signed main() {
	fio;
	#ifndef ONLINE_JUDGE 
    	freopen("input.txt", "r", stdin); 
    	freopen("output.txt", "w", stdout); 
    	//freopen("error.txt", "w", stderr); 
	#endif 
	cout<<fixed<<setprecision(10);
	int t=1;
	//cin>>t;  // UNCOMMENT FOR TEST-CASES
	//precompute();
	while(t--) {
		solve();
	}	
	return 0;
}
 
 