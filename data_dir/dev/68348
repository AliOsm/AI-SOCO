#include <bits/stdc++.h>
using namespace std;

#define trace(x) cerr << #x << ": " << x << " ";
#define trnl cerr << "\n";

typedef long long lolo;
typedef unsigned long long ulolo;
typedef pair<int, int> pii;
#define fi first
#define se second
#define M_PI           3.14159265358979323846

typedef pair<int, int> pii;

const int INF = 1e9 + 23;
const int SZ = 1e3 + 100;

int toInt(pii p, int colsz) {
	return p.fi * colsz + p.se;
}

int arr[SZ][SZ];
bool in[SZ][SZ];
priority_queue<pii > q;
int par[SZ * SZ];
int ufsz[SZ * SZ];

int ufind(int p) {
  if (par[p] != p) {
    par[p] = ufind(par[p]);
  }
  return par[p];
}

void uni(int p1, int p2) {
  p1 = ufind(p1);
  p2 = ufind(p2);
  if (p1 == p2) {
    return;
  }
  if (ufsz[p1] > ufsz[p2]) swap(p1, p2);
  par[p1] = p2;
  ufsz[p2] += ufsz[p1];
}

int n, m, grsz;

void dfs(int x, int y, const int ans) {
  --grsz;
  in[x][y] = true;
  for (int i = -1; i <= 1; ++i) {
    for (int j = -1; j <= 1; ++j) {
      if (abs(i) + abs(j) != 1) continue;
      int xx = x + i, yy = y + j;
      if (xx < 0 || yy < 0) continue;
      if (n <= xx || m <= yy) continue;
      if (in[xx][yy]) continue;
      if (grsz > 0 && ans <= arr[xx][yy]) {
        dfs(xx, yy, ans);
      }
    }
  }
}

int main() {
	ios_base::sync_with_stdio(0);
	long long k;
	cin >> n >> m >> k;
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			cin >> arr[i][j];
			int nr = toInt({i, j}, m);
			q.push({arr[i][j], nr});
			par[nr] = nr;
			ufsz[nr] = 1;
		}
	}
	int ans = INF, dfsx = -1, dfsy = -1;
	while (!q.empty() && ans == INF) {
		pii p = q.top(); q.pop();
    int val = p.fi;
		int x = p.se / m, y = p.se % m;
		for (int i = -1; i <= 1; ++i) {
			for (int j = -1; j <= 1; ++j) {
        if (abs(i) + abs(j) != 1) continue;
        int xx = x + i, yy = y + j;
        if (xx < 0 || yy < 0) continue;
        if (n <= xx || m <= yy) continue;
        if (arr[xx][yy] >= val) {
          int id2 = toInt({xx, yy}, m);
          uni(p.se, id2);
        }
			}
		}
    int curpar = ufind(p.se);
    if (k % val == 0 && ufsz[curpar] >= k / val) {
      ans = val;
      dfsx = x;
      dfsy = y;
    }
	}
  if (ans == INF) {
    cout << "NO\n";
    return 0;
  }
  cout << "YES\n";
  grsz = k / ans;
  dfs(dfsx, dfsy, ans);
  stringstream ss;
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      arr[i][j] = (in[i][j] ? ans : 0);
      ss << arr[i][j] << " ";
    }
    ss << "\n";
  }
  cout << ss.str();
	return 0;
}
