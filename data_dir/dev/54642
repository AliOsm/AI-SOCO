#include <bits/stdc++.h>

using namespace std;
typedef pair<int, int> pi;


int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL); 
  int n;
  cin >> n;
  vector<int> p(n), ip(n), orig;
  for (int i = 0; i < n; i++) {
    cin >> p[i];
    p[i]--;
    ip[p[i]] = i;
  }
  orig = p;
  vector<pi> swp;
  for (int i = 0; i < n; i++) {
    int pos = ip[i];
    if (i == pos) continue;
    if (2*abs(pos-i) >= n) {
      swp.push_back({pos, i});
      swap(p[pos], p[i]);
      ip[p[pos]] = pos;
      ip[p[i]] = i;
    }
    else if (2*pos >= n) {
      swp.push_back({pos, 0});
      swap(p[pos], p[0]);
      ip[p[pos]] = pos;
      ip[p[0]] = 0;
      pos = 0;
      if (2*abs(pos-i) >= n) {
        swp.push_back({pos, i});
        swap(p[pos], p[i]);
        ip[p[pos]] = pos;
        ip[p[i]] = i;
      }
      else {
        swp.push_back({0, n-1});
        swap(p[n-1], p[0]);
        ip[p[0]] = 0;
        ip[p[n-1]] = n-1;
        pos = n-1;
        swp.push_back({pos, i});
        swap(p[pos], p[i]);
        ip[p[pos]] = pos;
        ip[p[i]] = i;
      }
    }
    else {
      swp.push_back({pos, n-1});
      swap(p[pos], p[n-1]);
      ip[p[pos]] = pos;
      ip[p[n-1]] = n-1;
      pos = n-1;
      if (2*abs(pos-i) >= n) {
        swp.push_back({pos, i});
        swap(p[pos], p[i]);
        ip[p[pos]] = pos;
        ip[p[i]] = i;
      }
      else {
        swp.push_back({0, n-1});
        swap(p[n-1], p[0]);
        ip[p[0]] = 0;
        ip[p[n-1]] = n-1;
        pos = 0;
        swp.push_back({pos, i});
        swap(p[pos], p[i]);
        ip[p[pos]] = pos;
        ip[p[i]] = i;
      }
    }
  }
  
  cout << swp.size() << endl;
  for (auto x: swp) {
    swap(orig[x.first], orig[x.second]);
    cout << x.first+1 << " " << x.second+1 << "\n";
  }
  for (auto x: orig)
    cerr << x << " ";
  cerr << endl;
  
}

