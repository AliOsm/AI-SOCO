#include <bits/stdc++.h>
#define mid ((b + e) >> 1)
#define lc id << 1
#define rc lc | 1
using namespace std;
const int N = 111111;
vector<long long> vec;
long long l[N], r[N], t[N], seg[N << 2], lazy[N << 2], q;
void add(int id, int type, int len) { // 0 : null, 1 : one, 2 : zero
	lazy[id] = (type ^ 3 ? type : 3 - lazy[id]);
	if (type ^ 3) seg[id] = (type & 1) * len;
	else seg[id] = len - seg[id];
}
void shift(int id, int b, int e) {
	if (!lazy[id]) return;
	add(lc, lazy[id], mid - b);
	add(rc, lazy[id], e - mid);
	lazy[id] = 0;
}
void change(int l, int r, int type, int id = 1, int b = 0, int e = vec.size()) {
	if (l >= e || b >= r) return;
	if (l <= b && e <= r) {
		add(id, type, e - b);
		return;
	}
	shift(id, b, e);
	change(l, r, type, lc, b, mid);
	change(l, r, type, rc, mid, e);
	seg[id] = seg[lc] + seg[rc];
}
long long get(int id = 1, int b = 0, int e = vec.size()) {
	if (!seg[id] || e - b == 1) return b;
	shift(id, b, e);
	return (seg[lc] ^ (mid - b) ? get(lc, b, mid) : get(rc, mid, e));
}
int main () { // 0 Base
    ios::sync_with_stdio(0), cin.tie(0);
    cin >> q;
    for (int i = 1; i <= q ; i ++) {
    	cin >> t[i] >> l[i] >> r[i]; //  [ )
    	vec.push_back(--l[i]);
    	vec.push_back(  r[i]);
	}
	vec.push_back(0);
	sort(vec.begin(), vec.end());
	vec.resize(unique(vec.begin(), vec.end()) - vec.begin());
	for (int i = 1; i <= q; i ++) {
		int le = lower_bound(vec.begin(), vec.end(), l[i]) - vec.begin();
		int ri = lower_bound(vec.begin(), vec.end(), r[i]) - vec.begin();
		change(le, ri, t[i]);
		cout << vec[get()] + 1 << endl;
	}
}
