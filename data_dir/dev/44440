#include <iostream>
#include <vector>
using namespace std;

int gcd(int a,int b)
{
	if(b==0) return a;
	return gcd(b,a%b);
}

int N;
int A[300000];
int best[300000];
int start[25];
int gval[25];
int low[25];
int len;

int back[300000];
void slow()
{
	for(int i=0;i<N;i++)
	{
		back[i] = i;
		int g = A[i];
		for(int j=i;j>=0;j--)
		{
			g = gcd(g,A[i]);
			for(int k=j;k<=i;k++)
				if(A[k]==g)
					back[i] = j;
		}
	}
	vector<int> ans;
	int b = 0;
	for(int i=0;i<N;i++)
	{
		if((i-best[i])>b)
		{
			ans.clear();
			ans.push_back(best[i]);
			b = i-best[i];
		}
		else if((i-best[i])==b)
			ans.push_back(best[i]);
	}
	cout << ans.size() << " " << b << "\n";
	for(int i=0;i<ans.size();i++)
		cout << ans[i]+1 << " ";
	cout << "\n";
}

int main()
{
	cin.tie(0);
	ios::sync_with_stdio(0);
	cin >> N;
	for(int i=0;i<N;i++)
		cin >> A[i];
	start[0] = 0;
	gval[0] = A[0];
	low[0] = A[0];
	best[0] = 0;
	len = 1;
	int dif;
	for(int i=1;i<N;i++)
	{
		dif = 0;
		best[i] = i;
		start[len] = i;
		gval[len] = low[len] = A[i];
		len++;
		for(int k=0;k<len;k++)
		{
			start[k-dif] = start[k];
			gval[k-dif] = gcd(gval[k],A[i]);
			low[k-dif] = min(low[k],A[i]);
			if((k>dif)&&(gval[k-dif]==gval[k-dif-1]))
				dif++;
			else if(low[k-dif] == gval[k-dif])
				best[i] = min(best[i],start[k-dif]);
		}
		len -= dif;
	}
	vector<int> ans;
	int b = 0;
	for(int i=0;i<N;i++)
	{
		if((i-best[i])>b)
		{
			ans.clear();
			ans.push_back(best[i]);
			b = i-best[i];
		}
		else if((i-best[i])==b)
			ans.push_back(best[i]);
	}
	cout << ans.size() << " " << b << "\n";
	for(int i=0;i<ans.size();i++)
		cout << ans[i]+1 << " ";
	cout << "\n";
//	slow();
	return 0;
}