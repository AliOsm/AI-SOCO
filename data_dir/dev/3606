#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <fstream>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <numeric>
#include <utility>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#include <complex>

using namespace std;

using ll = long long;
using ld = long double;
using pii = pair<int, int>;

constexpr int MAXN = 55;
constexpr int MAXK = 2003;
constexpr int INF = 1e9 + 7;

int n, s, k;
int r[MAXN];
string colors;
int dp[MAXN][MAXK];

int solve(int idx, int left) {
    if (left <= r[idx]) {
        return 0;
    }

    int& res = dp[idx][left];
    if (res != -1)
        return res;

    res = INF;
    for (int i = 0; i < n; ++i) {
        if (r[i] <= r[idx] or colors[i] == colors[idx])
            continue;
        res = min(res, abs(idx - i) + solve(i, left - r[idx]));
    }

    return res;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);

    cin >> n >> s >> k;
    --s;
    for (int i = 0; i < n; ++i) {
        cin >> r[i];
    }
    cin >> colors;

    memset(dp, -1, sizeof(dp));

    int ans = INF;
    for (int i = 0; i < n; ++i) {
        ans = min(ans, abs(s - i) + solve(i, k));
    }

    cout << (ans == INF ? -1 : ans) << '\n';
    
    return 0;
}
