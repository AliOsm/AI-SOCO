//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

#include <iostream>
#include <stdlib.h>
#include <cmath>
#include <algorithm>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <unordered_map>
#include <random>
#include <assert.h>
#include <memory.h>
#include <time.h>
#include <bitset>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)
#define rank qwertyuio
#define next dfghjk
#define prev hfjsthgt

using namespace std;

inline bool setmin(int &x, int y) { return (y < x) ? x = y, 1 : 0; }
inline bool setmax(int &x, int y) { return (y > x) ? x = y, 1 : 0; }
inline bool setmin(ll &x, ll y) { return (y < x) ? x = y, 1 : 0; }
inline bool setmax(ll &x, ll y) { return (y > x) ? x = y, 1 : 0; }

const int N = 100000 + 13;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int P1 = 31;
const int P2 = 57;
const int MOD = 998244353;
const int MOD1 = (int)1e9 + 9;
const int MOD2 = 998244353;
const double eps = 1e-9;
const double pi = atan2(0, -1);
const int ABC = 26;

inline void add(int &x, int y) {
    x += y;
    if (x >= MOD) {
        x -= MOD;
    }
}

int cnt_gr_or_eq[100000 + 13];

int dp[2][1000 + 13];
int pref[2][1000 + 13];
int prev[1000 + 13];

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    cout << fixed;
    //ll TL = 0.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    int n, k;
    cin >> n >> k;
    int a[n];
    rep(i, 0, n) {
        cin >> a[i];
    }
    sort(a, a + n);
    for (int diff = 0; diff <= 100000 / (k - 1) + 5; diff++) {
        int pos = -1;
        rep(i, 0, n) {
            while (pos + 1 < i && a[i] - a[pos + 1] >= diff) {
                pos++;
            }
            prev[i] = pos;
        }
        int p = 0;
        rep(i, 0, n) {
            dp[p][i] = prev[i] + 1;
        }
        rep(i, 0, n) {
            pref[p][i] = dp[p][i];
            if (i > 0) {
                add(pref[p][i], pref[p][i - 1]);
            }
        }
        rep(j, 3, k + 1) {
            rep(i, 0, n) {
                dp[p ^ 1][i] = 0;
            }
            rep(i, 0, n) {
                if (prev[i] >= 0) {
                    dp[p ^ 1][i] = pref[p][prev[i]];
                }
            }
            rep(i, 0, n) {
                pref[p ^ 1][i] = dp[p ^ 1][i];
                if (i > 0) {
                    add(pref[p ^ 1][i], pref[p ^ 1][i - 1]);
                }
            }
            p ^= 1;
        }
        rep(i, 0, n) {
            add(cnt_gr_or_eq[diff], dp[p][i]);
        }
    }
    int ans = 0;
    for (int diff = 0; diff < 100000 / (k - 1) + 5; diff++) {
        int cnt = cnt_gr_or_eq[diff] - cnt_gr_or_eq[diff + 1];
        if (cnt < 0) {
            cnt += MOD;
        }
        ans = (ans + 1LL * cnt * diff) % MOD;
    }
    cout << ans << "\n";
    return 0;
}