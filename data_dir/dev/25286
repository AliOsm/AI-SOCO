#define _USE_MATH_DEFINES
#include <array>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;
mt19937 mrand(random_device{}());
int rnd(int x) { return mrand() % x; }

const int N = 2e5 + 10;
int p[N], c[N];

void add(int x) {
  for (; x < N; x += x & -x) {
    c[x]++;
  }
}

int query(int x) {
  int ret = 0;
  for (; x; x -= x & -x) {
    ret += c[x];
  }
  return ret;
}

int main() {
  int n;
  scanf("%d", &n);
  for (int i = 0; i < n; ++i) {
    int x;
    scanf("%d", &x);
    --x;
    p[x] = i + 1;
  }
  vector<int64> ret(n);
  int64 cur = 0;
  set<int> L, R;
  int64 sumL = 0, sumR = 0;
  for (int i = 0; i < n; ++i) {
    int x = p[i];
    cur += i - query(x);
    add(x);
    if (L.size() && x < *L.rbegin()) {
      L.insert(x);
      sumL += x;
    } else {
      R.insert(x);
      sumR += x;
    }
    while (L.size() < R.size()) {
      auto it = R.begin();
      L.insert(*it);
      sumL += *it;
      sumR -= *it;
      R.erase(it);
    }
    while (L.size() - R.size() > 1) {
      auto it = std::prev(L.end());
      sumL -= *it;
      sumR += *it;
      R.insert(*it);
      L.erase(it);
    }
    int64 mid = *L.rbegin();
    // trace(i, cur, mid, sumL, sumR);
    ret[i] = cur;
    ret[i] += mid * L.size() - sumL;
    ret[i] += sumR - mid * R.size();

    int64 k = i / 2;
    int64 extra = k * (k + 1);
    if ((i + 1) % 2 == 0) extra += (i + 1) / 2;
    ret[i] -= extra;
    // trace(i, extra);
  }
  for (int i = 0; i < n; ++i) {
    printf("%lld%c", ret[i], " \n"[i + 1 == n]);
  }
  return 0;
}
