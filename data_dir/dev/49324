/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const ld PI = 3.14159265358979323846;

#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
const int N = 1e5+5;
vi parent(N);
int dp[N];

class DShark {
public:
	int locations;
	set<int> sizes;
	map<int, int> freq;
	void add(int x){
		freq[x]++;
		if(freq[x]==1) sizes.insert(x);
	}
	void remove(int x){
		freq[x]--;
		if(!freq[x]) sizes.erase(x);
	}
	int get(int x){
		return parent[x]==x?x:get(parent[x]);
	}
	void merge(int x, int y){
		x = get(x);
		y = get(y);
		if(x!=y) {
			--locations;
			remove(dp[x]); remove(dp[y]);
			dp[x] += dp[y];
			parent[y] = parent[x];
			add(dp[x]);
		}
	}
	void solve(std::istream& in, std::ostream& out) {
		int n; in>>n;
		iota(parent.begin(), parent.end(), 0);
		vector<pii> arr;
		f(i, n){
			int x; in>>x;
			arr.emplace_back(x, i+1);
		}
		sort(arr.begin(), arr.end());
		memset(dp, -1, sizeof(dp));
		int res = -1, ma = 0;
		locations = 0;
		f(i, n){
			int x = arr[i].first, id = arr[i].second;
			dp[id] = 1;
			add(1);
			++locations;
			if(id-1>0 and dp[id-1]!=-1) merge(id-1, id);
			if(id+1<=n and dp[id+1]!=-1) merge(id+1, id);
			if((int)sizes.size()==1 and locations>ma){
				ma = locations;
				res = x+1;
			}
		}
		out<<res;
	}
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	DShark solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
