#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <iomanip>
#include <cstdio>
#include <vector>
#include <string>
#include <stack>
#include <climits>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define For(i,a,b) for(int (i)=(a);(i)<=(b);(i)++)
#define FOR(i,a) For(i,1,a)
#define Ford(i,a,b) for(int (i)=(a);(i)>=(b);(i)--)
#define Rep(i,a,b) for(int (i)=(a);(i)<(b);(i)++)
#define REP(i,a) Rep(i,0,a)
#define type(x) __typeof(x.begin())
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#define compress(x) {sort(all(x));(x).resize(unique(all(x))-(x).begin());}
#define fill(x,y) memset(x,y,sizeof x)
#define all(x) x.begin(),x.end()
#define two(x) (1LL<<(x))
#define atmask(mask,x) (((mask) >> (x)) & 1)
#define fi first
#define se second
#define gcd __gcd
#define pb push_back
#define mp make_pair

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
    #define dbg(x) cerr<<#x<<":"<<(x)<<endl
    #define dg(x) cerr<<#x<<":"<<(x)<<' '
#else
    #define eprintf(...) 0
    #define dbg(x) 0
    #define dg(x) 0
#endif

using namespace std;

typedef long long Lint;
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;

const int inf = 1e9+5143;
const Lint Linf = 1e18+5413;
const double eps = 1e-10;
const double pi = acos(-1);

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T lcm(T a,T b){
	return a/gcd(a,b)*b;
}

inline int read(){
    int res = 0LL ;int neg ;
    while(1){
        char ch = getchar();
        if(ch>='0' && ch<='9' || ch=='-'){
            if(ch=='-') neg = -1;
            else neg = 1 , res = ch-'0';
            break;
        }
    }
    while(1){
        char ch = getchar();
        if(ch>='0' && ch<='9') res*=10,res+=ch-'0';
        else break;
    }
    return res*neg;
}

const int N = 5010;

int a[N];
int L[N][N],R[N][N];

int main(){

#ifdef KAZAR
	freopen("f.input","r",stdin);
	freopen("f.output","w",stdout);
	freopen("error","w",stderr);
#endif

    int n = read();

    FOR(i,n){
        a[i] = read() + 1;
    }

    FOR(i,n){
        FOR(j,n){
            L[i][j] = L[i][j - 1];
            if(a[j] > i)
                L[i][j]++;
        }
        Ford(j,n,1){
            R[i][j] = R[i][j + 1];
            if(a[j] < i){
                R[i][j]++;
            }
        }
    }

    int ans = inf;
    int cnt = 0;

    FOR(i,n){
        FOR(j,n) if(i < j){
            int res = -(L[a[i]][i] + R[a[i]][i] + L[a[j]][j] + R[a[j]][j]);
            res += R[a[i]][j] + L[a[i]][j] + R[a[j]][i] + L[a[j]][i];
            if(res < ans){
                ans = res;
                cnt = 1;
            }else if(res == ans){
                cnt ++;
            }
        }
    }

    FOR(i,n) ans += R[a[i]][i];

    cout << ans - 1 << ' ' << cnt << endl;

    return 0;

}
