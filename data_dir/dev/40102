#include<bits/stdc++.h>
using namespace std;

#define x first
#define y second
#define pb push_back
#define mp make_pair

#define all(x) (x).begin(), (x).end()
#define sz(x) (int) (x).size()

//#define int long long

const int N = 20;
const int INF = 1e9 + 13;

int m, n, cnt[N][N], sum[N][1 << N], dp[1 << N];

void add(int x, int y) {
    cnt[x][y]++;
    cnt[y][x]++;
    if (x == y) cnt[x][y]--;
}

int inv(int mask) {
    int res = 0;
    for (int i = 0; i < n; i++) {
        if (!((mask >> i) & 1)) res |= 1 << i;
    }
    return res;
}

void relax(int &x, int y) {
    x = min(x, y);
}

int32_t main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    string s;
    cin >> m >> n >> s;
    for (int i = 0; i < m - 1; i++) add(s[i] - 'a', s[i + 1] - 'a');
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) sum[i][1 << j] = cnt[i][j];
        for (int mask = 0; mask < (1 << n); mask++) {
            if (__builtin_popcount(mask) > 1) {
                int nmask = mask & (mask - 1);
                sum[i][mask] = sum[i][nmask] + sum[i][mask ^ nmask];
            }
        }
    }
    for (int mask = 1; mask < (1 << n); mask++) dp[mask] = INF;
    for (int mask = 0; mask < (1 << n); mask++) {
        int pos = __builtin_popcount(mask);
        for (int i = 0; i < n; i++) {
            if (!((mask >> i) & 1)) {
                int nmask = mask | (1 << i);
                relax(dp[nmask], dp[mask] + pos * sum[i][mask] - pos * sum[i][inv(nmask)]);
            }
        }
    }
    cout << dp[(1 << n) - 1];
    return 0;
}
