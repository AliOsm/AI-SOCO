#include <bits/stdc++.h>
using namespace std;

typedef long double ld;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl

const int maxn = 1e6 + 5;
const ld inf = 1e14;

int n;
ld x[maxn], y[maxn];

ld dist(ld x0, ld y0, ld x1, ld y1) {
  ld dx = abs(x0-x1);
  ld dy = abs(y0-y1);
  return sqrtl(dx*dx + dy*dy);
}


bool f(ld r) {
  ld s = -inf; ld e = inf;
  for (int i=0; i<n; i++) {
    //ld dx = r*r - (y[i]-r)*(y[i]-r);
    ld dx = (2.0*r-y[i])*y[i];
    if (dx < 0) return false;
    dx = sqrt(dx);
    ld left = x[i]-dx;
    ld right = x[i]+dx;
    s = max(left, s);
    e = min(right, e);
  }
  return s<=e;
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);
  cout<<fixed<<setprecision(15);

  cin>>n;
  int above = 0; int below = 0;
  for (int i=0; i<n; i++) {
    cin>>x[i]>>y[i];
    above += (y[i] > 0);
    below += (y[i] < 0);
    y[i] = abs(y[i]);
  }

  if (above > 0 && below > 0) out(-1);

  ld l = 1e9;
  ld r = -1e9;
  for (int i=0; i<n; i++) {
    l = min(l, x[i]);
    r = max(r, x[i]);
  }

  
  
  
  ld lo = 0; ld hi = inf;
  for (int iter=0; iter<100; iter++) {
    ld mid = (hi+lo)/2.0;
    if (f(mid)) {
      hi = mid;
    } else {
      lo = mid;
    }
  }

  cout<<hi<<endl;  
  return 0;
}
// don't forget to read in the input :^)
