#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define fi first
#define se second
ll mpow(ll a, ll n,ll mod)
{ll ret=1;ll b=a;while(n) {if(n&1)
    ret=(ret*b)%mod;b=(b*b)%mod;n>>=1;}
return (ll)ret;
}
using namespace std;
#define sd(x) scanf("%d",&x)
#define pd(x) printf("%d",x)
#define sl(x) scanf("%lld",&x)
#define pl(x) printf("%lld",x)
#define mem(x,a) memset(x,a,sizeof(x))
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define all(v) v.begin(),v.end()
#define N (int)(5e6+25)
int trie[N][26],sz=0;
int extend[10005],dp[10005],last[10005];
vector<pii> ans;
void ins(string &s){
    int v=0;
    for(int i=0;i<s.size();i++){
        if(!trie[v][s[i]-'a']){
            trie[v][s[i]-'a']=++sz;
        }
        v=trie[v][s[i]-'a'];
    }
}
int query(string& x){
    int v=0;
    int fd=-1;
    for(int i=0;i<x.size();i++){
        if(trie[v][x[i]-'a']){
            v=trie[v][x[i]-'a'];
            fd=i+1;
        }
        else{
            return fd;
            break;
        }
    }
    return fd;
}
void solve(){
    string s,t;
    cin>>s>>t;
    int S=s.size();
    int T=t.size();
    s='#'+s;
    t='#'+t;
    for(int i=1;i<=S;i++){
        string ns=s.substr(1,i);
        ins(ns);
        reverse(all(ns));
        ins(ns);
    }
    for(int i=1;i<=S;i++){
        string ns=s.substr(i);
        ins(ns);
    }
    for(int i=1;i<=T;i++){
        string nt=t.substr(1,i);
        reverse(all(nt));
        int len2=query(nt);
        extend[i]=len2;
    }
    for(int i=1;i<=T;i++){
        dp[i]=1e9;
    }
    dp[0]=0;
    for(int i=1;i<=T;i++){
        if(extend[i]==-1)
            continue;
        int &x=dp[i];
        for(int j=i-extend[i]+1;j<=i;j++){
            if(x>dp[j-1]+1){
                x=dp[j-1]+1;
                last[i]=j-1;
            }
        }
    }
    if(dp[T]==1e9){
        printf("-1");
        return;
    }
    cout<<dp[T]<<endl;
    int x=T;
    while(x!=0){
        string nt=t.substr(last[x]+1,x-last[x]);
        if(s.find(nt)!=string::npos){
           int idx=s.find(nt);
           ans.pb(mp(idx,idx+x-last[x]-1));
        }
        else{
            reverse(all(nt));
            if(s.find(nt)!=string::npos){
                int idx=s.find(nt);
                ans.pb(mp(idx+x-last[x]-1,idx));
            }
        }
        x=last[x];
    }
    reverse(all(ans));
    for(int i=0;i<ans.size();i++){
        cout<<ans[i].fi<<" "<<ans[i].se<<endl;
    }
}
int main(){
    //freopen("input.txt","r",stdin);
   //freopen("out.txt","w",stdout);
    int t=1;
   // sd(t);
   for(int i=1;i<=t;i++){
       //printf("Case #%d:\n",i);
       solve();
   }
   return 0;
}
