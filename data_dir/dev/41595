#include <stdio.h>
#include <queue>
#include <math.h>
#include <iostream>
#include <assert.h>
#include <string>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <memory.h>
#include <fstream>
#include <functional>
using namespace std;
#define forn(i,n) for(i=0;i<n;++i)
#define ll long long

const int N = 2e5 + 15;

vector<int> adj[N];
int a[N], b[N];
int R, s, t;
int d[N];

bool vis[N];
void go(int root){
    memset(d,0,sizeof(d));
	d[root] = 1;
	queue<int> q;
	q.push(root); 
	vis[root]= 1;
	int u,i,id;
	
	while (!q.empty()) {
		id = q.front(); q.pop();
		for (i = 0; i < adj[id].size(); ++i) {
			u = adj[id][i];
			if (d[u]>0)continue;
			d[u] = d[id] + 1;
			R = max(R, d[u] - 1);
			q.push(u);
		}
	}
}
int main() {
	int n, i, k,len;
	cin >> n >> k;
	int pos = k + 1; int eos = 0;
	while (pos <= n) {
		adj[pos].push_back(pos - k);
		adj[pos - k].push_back(pos);
		a[eos] = pos;
		b[eos] = pos - k;
		++eos;
		++pos;
	}
	int id;
	for (i = k + 1; i <= n; ++i)
		if (adj[i].size() == 1) {
			id = i;
		}
	for (i = 1; i <= n; ++i) {
		if (i == id)continue;
		if (i <= k&& adj[i].size() != 0)continue;
		if (i > k && adj[i].size() != 1)continue;
		a[eos] = id;
		b[eos] = i;
		adj[id].push_back(i);
		adj[i].push_back(id);
		++eos;
	}
	go(1);
	for(i=1;i<=n;++i)if(d[i]-1==R)id= i;;
	go(id);
	cout << R << endl;
	for (i = 0; i < eos; ++i)printf("%d %d\n", a[i], b[i]);
}