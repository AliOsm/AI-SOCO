#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
int n,m,s[310*310*2],sym[310][310],ccnt=0,p[310][310];
ll ans=0;
pair<int,int> now;
unordered_map<int,int> color;
inline int newcolor(int x)
{
	if(color.find(x)==color.end())color[x]=++ccnt;
	return color[x];
}
inline int dis(int x,int y)
{
	int n;
	if(y<=0)n=max(abs(y),abs(x)-1);
	else n=max(abs(y),abs(x))-1;
	if(x==n+1)return 4*(n+1)*(n+1)+(n+1)-y;
	if(y==n+1)return (4*n+2)*(n+1)+(n+1)+x;
	if(x==-n-1)return (2*n+1)*(2*n+1)+n+y;
	return 4*n*n+2*n+n-x;
}
inline bool cmp(const pair<int,int> &a,const pair<int,int> &b)
{
	return dis(a.first-now.first,a.second-now.second)<dis(b.first-now.first,b.second-now.second);
}
int x,y;
queue<pair<int,int> > q;
vector<pair<int,int> > node[310*310*2];
int main()
{
	scanf("%d%d",&n,&m);
	newcolor(0);
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			scanf("%d",&p[i][j]);
			p[i][j]=newcolor(p[i][j]);
			s[p[i][j]]++;
		}
	}
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			scanf("%d",&sym[i][j]);
			if(sym[i][j]!=-1)sym[i][j]=newcolor(sym[i][j]);
		}
	}
	scanf("%d%d",&x,&y);
	x--;y--;
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			if(i==x&&j==y)q.push(make_pair(i,j));
			else if(sym[i][j]!=-1)node[p[i][j]].push_back(make_pair(i,j));
		}
	}
	int cnow=p[x][y],snow=0;
	while(!q.empty())
	{
		now=q.front();q.pop();
		int nx=now.first,ny=now.second;
//		printf("%d %d %d\n",nx,ny,cnow);
		int cc=sym[nx][ny];
		if(cnow==1||cnow==cc)continue;
		snow+=s[cnow];
		s[cnow]=0;
		ans+=snow;
		vector<pair<int,int> > element=node[cnow];
		node[cnow].clear();
		sort(element.begin(),element.end(),cmp);
		for(auto &x:element)q.push(x);
		cnow=cc;
	}
	printf("%lld\n",ans);
	return 0;
}