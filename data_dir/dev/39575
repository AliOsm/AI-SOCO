#include<bits/stdc++.h> 
#include<ext/pb_ds/assoc_container.hpp> 
#include<ext/pb_ds/tree_policy.hpp> 
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define MOD 1000000007
#define INF 2000000000
#define DESPACITO 1000000000000000000
#define PI acos(-1);
#define E 998244353
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double

using namespace std;

ll gcd(ll a,ll b)
{
	if(a==0)
		return b;
	return gcd(b%a,a);
}

int main()
{
	IOS;
	ll n,k;
	ll a,b;
	cin >> n >> k;
	cin >> a >> b;
	ll x1 = 1 + a;
	ll x2 = (k+1) - a;
	x2 += (n*k);
	x2%= (n*k);
	ll y1 = 1 + b;
	ll y2 = (k+1) - b;
	y2 += (n*k);
	y2%= (n*k);
	ll minim = DESPACITO;
	ll maxim = 0;
	bool x = false;
	ll u = y1;
	while(!x || u != y1)
	{
		if(u == y1)
		{
			if(x)
				break;
			else
				x=true;
		}
		ll l;
		if(u<x1)
			l = u + (n*k-x1);
		else
			l = u-x1;
		ll val=(n*k)/gcd(n*k,l);
		minim=min(minim,val);
		maxim=max(maxim,val);
		u += k;
		u%= (n*k);
	}
	x = false;
	u = y2;
	while(!x || u != y2)
	{
		if(u == y2)
		{
			if(x)
				break;
			else
				x=true;
		}
		ll l;
		if(u<x1)
			l = u + (n*k-x1);
		else
			l = u-x1;
		ll val=(n*k)/gcd(n*k,l);
		minim=min(minim,val);
		maxim=max(maxim,val);
		u += k;
		u%= (n*k);
	}
	x = false;
	u = y1;
	while(!x || u != y1)
	{
		if(u == y1)
		{
			if(x)
				break;
			else
				x=true;
		}
		ll l;
		if(u<x2)
			l = u + (n*k-x2);
		else
			l = u-x2;
		ll val=(n*k)/gcd(n*k,l);
		minim=min(minim,val);
		maxim=max(maxim,val);
		u += k;
		u%= (n*k);
	}
	x=false;
	u = y2;
	while(!x || u != y2)
	{
		if(u == y2)
		{
			if(x)
				break;
			else
				x=true;
		}
		ll l;
		if(u<x2)
			l = u + (n*k-x2);
		else
			l = u-x2;
		ll val=(n*k)/gcd(n*k,l);
		minim=min(minim,val);
		maxim=max(maxim,val);
		u += k;
		u%= (n*k);
	}
	cout << minim << " " << maxim;
}