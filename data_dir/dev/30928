#include <cstdio>
#include <string>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
#include <queue>
#include <set>
using namespace std;
#define pii pair<int,  int>
#define VI vector<int>
#define pb push_back
#define x first
#define y second
#define mp make_pair
#define ll long long
#define L(s) ((int)(s).size())
#define all(s) (s).begin(), (s).end()
pii tr[444444 << 2];
int n, m, k;
pii a[111111], b[111111];
int lim[111111];
struct Ev {
	int pos;
	int tp;
	int num;
	Ev(int _pos, int _tp, int _num) {
		pos = _pos;
		tp = _tp;
		num = _num;
	}
	Ev(){}
} e[444444];
inline bool operator<(const Ev&a, const Ev&b) {
	if (a.pos != b.pos) return a.pos < b.pos;
	if (a.tp != b.tp) return a.tp < b.tp;
	return a.num < b.num;
}
int ans[111111];
void add(int v, int l, int r, int pos, int val) {
	if (l + 1 == r) {
		tr[v].x += val;
		tr[v].y = l;
		return;
	}
	int mid = (l + r + 1) / 2;
	if (pos < mid) add(2 * v + 1, l, mid, pos, val);
	else add(2 * v + 2, mid, r, pos, val);
	if (tr[2 * v + 1].x) tr[v] = tr[2 * v + 1]; else tr[v] = tr[2 * v + 2];
}
pii findmax(int v, int l, int r, int st, int fn) {
	if (l == st && r == fn) return tr[v];
	pii ans = mp(0, 0);
	int mid = (l + r + 1) / 2;
	if (st < mid) ans = max(ans, findmax(2 * v + 1, l, mid, st, min(mid, fn)));
	if (ans.x > 0) return ans;
	if (fn > mid) ans = max(ans, findmax(2 * v + 2, mid, r, max(st, mid), fn));
	return ans;
}
int main() {
	scanf("%d", &n);
	for(int i = 0; i < n; ++i) {
		scanf("%d%d", &a[i].x, &a[i].y);
		e[k++] = Ev(a[i].x, 1, i);
		e[k++] = Ev(a[i].y, 2, i);
	}
	scanf("%d", &m);
	for(int i = 0; i < m; ++i) {
		scanf("%d%d", &b[i].x, &b[i].y);
		scanf("%d", &lim[i]);
		e[k++] = Ev(b[i].x, 0, i);
		e[k++] = Ev(b[i].y, 3, i);
	}
	sort(e, e + k);
	for(int i = 0; i < k; ++i) {
//		cerr << e[i].pos << " " << e[i].num << " " << e[i].tp << endl;
		int idx = e[i].num;
		if (e[i].tp == 0) {
			Ev ev(b[idx].y, 3, idx);
			int end = lower_bound(e, e + k, ev) - e;
		//	cerr << "Add at " << e[end].pos << " " << lim[idx] << endl;
			add(0, 0, k, end, lim[idx]);
		} else
			if (e[i].tp == 1) {
				Ev ev(a[idx].y, 2, idx);
				int end = lower_bound(e, e + k, ev) - e;
			//	cerr << "Searching from " << e[end].pos << endl;
				pii out = findmax(0, 0, k, end, k);
				if (out.x > 0) {
			//		cerr <<
			//		cerr << out.x << " " << out.y << endl;
			//		cerr << "Found at " << e[out.y].pos << endl;
					ans[idx] = e[out.y].num;
					add(0, 0, k, out.y, -1);
				} else {
					printf("NO\n");
					return 0;
				}
			}
	}
	printf("YES\n");
	for(int i = 0; i < n; ++i) {
		if (i) printf(" "); printf("%d", ans[i] + 1);
	}
	printf("\n");

}
