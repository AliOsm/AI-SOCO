#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <valarray>
#include <vector>

#define EPS 1e-9
#define INF 1070000000LL
#define MOD 1000000007LL
#define fir first
#define foreach(it,X) for(__typeof((X).begin()) it=(X).begin();it!=(X).end();it++)
#define ite iterator
#define mp make_pair
#define rep(i,n) rep2(i,0,n)
#define rep2(i,m,n) for(int i=m;i<(n);i++)
#define pb push_back
#define sec second
#define sz(x) ((int)x.size())

using namespace std;

struct timer{
	time_t start;
	timer(){start=clock();}
	~timer(){cerr<<1.*(clock()-start)/CLOCKS_PER_SEC<<" secs"<<endl;}
};

typedef istringstream iss;
typedef long long ll;
typedef pair<int,int> pi;
typedef stringstream sst;
typedef vector<int> vi;

int n,m,K;
char c[55][55];
int sy,sx,ty,tx;
map<int,string> d[55][55];
int dy[]={0,1,0,-1};
int dx[]={1,0,-1,0};

string shortest[55][55];
int smask[55][55];

struct state{
	int y,x;
	string s;
	int mask;
	state(int y,int x,string s,int mask):y(y),x(x),s(s),mask(mask){}
};

const bool operator < (const state& a, const state& b){
	return sz(a.s) > sz(b.s) || sz(a.s) == sz(b.s) && a.s > b.s;
}

const bool better(string s,string t){
	return sz(s) < sz(t) || sz(s) == sz(t) && s < t;
}

int main(){
	cin.tie(0);
	ios_base::sync_with_stdio(0);
	
	cin>>n>>m>>K;
	rep2(i,1,n+1)rep2(j,1,m+1){
		cin>>c[i][j];
		if(c[i][j]=='S')sy=i,sx=j;
		if(c[i][j]=='T')ty=i,tx=j;
	}
	rep2(i,1,n+1)rep2(j,1,m+1){
		shortest[i][j]=string(n*m,'~');
	}
	d[sy][sx][0]="";
	priority_queue<state> Q;
	Q.push(state(sy,sx,"",0));
	while(sz(Q)){
		state s=Q.top();Q.pop();
		//cout<<s.y<<" "<<s.x<<" "<<s.s<<" "<<s.mask<<endl;
		if(s.y==ty && s.x==tx){
			cout<<s.s.substr(0,sz(s.s)-1);
			return 0;
		}
		rep(i,4){
			int ny=s.y+dy[i],nx=s.x+dx[i];
			if(!c[ny][nx] || c[ny][nx]=='S')continue;
			if(c[ny][nx]!='T' && __builtin_popcount(s.mask)==K && !(s.mask>>(c[ny][nx]-'a')&1))continue;
			
			string ndist=s.s + c[ny][nx];
			int nmask=s.mask|(c[ny][nx]=='T'?0:1<<(c[ny][nx]-'a'));
			
			if(!better(ndist,shortest[ny][nx]) && (smask[ny][nx]&nmask)==smask[ny][nx])continue;
			
			if(shortest[ny][nx][0]=='~'){
				shortest[ny][nx] = ndist;
				smask[ny][nx] = nmask;
			}
			
			if(d[ny][nx].find(nmask)==d[ny][nx].end() || better(ndist,d[ny][nx][nmask])){
				d[ny][nx][nmask] = ndist;
				Q.push(state(ny,nx,ndist,nmask));
			}
		}
	}
	cout<<-1;
}
