
// ~/RedLink/Developers/Corvus
// ~/sudo apt-get verdict Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <functional>
#include <assert.h>
#include <complex>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

const int N = 1000005, M = 105;
const ll MOD = 1e9 + 7;
const double eps = 1e-9;
const double PI = acos(-1.0);

int n,m,d[M][M],dp[N],p[N],to[N],f[N],best[N];
vector<vector<int> > g;
char s[M];

void bfs(int s) {
    queue<int> q;
    q.push(s);
    d[s][s] = 0;
    while(!q.empty()) {
        int u = q.front();
        q.pop();
        for(int i=0; i<g[u].size(); i++) 
            if(d[s][g[u][i]]==-1) {
                d[s][g[u][i]] = d[s][u] + 1;
                q.push(g[u][i]);
            }
    }
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("input.in", "r", stdin);
#endif
    scanf("%d",&n);
    g.resize(n);
    for(int i=0; i<n; i++) {
        scanf("%s", s);
        for(int j=0; j<n; j++) {
            if(s[j]=='1')
                g[i].push_back(j);
        }
    }
    memset(d,-1,sizeof d);
    for(int i=0; i<n; i++)
        bfs(i);
    scanf("%d",&m);
    for(int i=0; i<m; i++) {
        scanf("%d",p+i);
        p[i]--;
        to[i] = i;
        f[i] = i;
    }
    for(int i=0; i<m; i++) {
        int j = i+1, last = 0;
        while(j<m && d[p[i]][p[j]] == last + 1) {
            to[i]++;
            last++;
            j++;
        }
        f[to[i]] = min(f[to[i]], i);
    }
    dp[m-1] = 1;
    best[m-1] = m;
    for(int i=m-2; i>=0; i--) {
        dp[i] = 2e9;
        best[i] = i+1;
        for(int j=i+1; j<=to[i]; j++) {
            if(dp[j]+1 <= dp[i]) {
                dp[i] = dp[j]+1;
                best[i] = j;
            }
        }
    }
    printf("%d\n", dp[0]);
    for(int i=0; i<m; i = best[i]) 
        printf("%d ",p[i]+1);
    puts("");
    return 0;
}