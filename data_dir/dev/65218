#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>

using namespace std;
using ull = unsigned long long;
const int oo = numeric_limits<int>::max() / 2;
const int N = 100010;
const int P = max(239, rand());
// const int P = 31;

ull h1[N + 1], h2[N + 1];
ull deg[N + 1];

inline bool check(const string& s, const function<ull(int,int)>& hfunc, int l, ull H) {
	for(size_t i = 0; i < s.size(); i += l) {
		if (H != hfunc(i, i + l - 1)) {
			return false;
		}
	}
	return true;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie();
	string s1, s2;
	cin >> s1;
	cin >> s2;

	h1[0] = h2[0] = 0;
	deg[0] = 1;
	for(size_t i = 0; i < s1.size(); ++i) {
		h1[i + 1] = h1[i] * P + s1[i] - 'a';
		deg[i + 1] = deg[i] * P;
	}
	for(size_t i = 0; i < s2.size(); ++i) {
		h2[i + 1] = h2[i] * P + s2[i] - 'a';
	}
	auto get_hash1 = [&](int l, int r) {
		return h1[r + 1] - h1[l] * deg[r - l + 1];
	};
	auto get_hash2 = [&](int l, int r) {
		return h2[r + 1] - h2[l] * deg[r - l + 1];
	};
	size_t len = min(s1.size(), s2.size());
	int ret = 0;
	for(size_t i = 1; i <= len; ++i) {
		if (s1.size() % i == 0 && s2.size() % i == 0) {
			auto H = get_hash1(0, i - 1);		
			if (check(s1, get_hash1, i, H) && check(s2, get_hash2, i, H)) {
				++ret;
			}
		}
	}
	cout << ret << endl;
	return 0;
}
