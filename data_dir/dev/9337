#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>

#define N	15
#define B	(1 << N)
#define C	14348907	/* C = 3^N */
#define INF	0x3f3f3f3f

int max(int a, int b) { return a > b ? a : b; }

int p3[N + 1];

void init() {
	struct timeval tv;
	int i;

	gettimeofday(&tv, NULL);
	srand(tv.tv_sec ^ tv.tv_usec);
	p3[0] = 1;
	for (i = 1; i <= N; i++)
		p3[i] = p3[i - 1] * 3;
}

int rand_(int n) {
	return (rand() * 76543LL + rand()) % n;
}

int ss[B], bb[B];

int compare(const void *a, const void *b) {
	int i = *(int *) a;
	int j = *(int *) b;

	return ss[i] - ss[j];
}

void sort(int *ii, int n) {
	int i;

	for (i = 0; i < n; i++) {
		int j = rand_(i + 1), tmp;

		tmp = ii[i], ii[i] = ii[j], ii[j] = tmp;
	}
	qsort(ii, n, sizeof *ii, compare);
}

char deleted[N];

void move(int i, int j) {
	int h, i_, j_;

	i_ = 0;
	for (h = 0; h < i; h++)
		if (!deleted[h])
			i_++;
	j_ = 0;
	for (h = 0; h < j; h++)
		if (!deleted[h])
			j_++;
	deleted[i] = 1;
	printf("%d %d\n", i_ + 1, j_ + 1);
}

int main() {
	int t;

	init();
	scanf("%d", &t);
	while (t--) {
		static int aa[N], cc[B];
		static char dp[C][N], dq[B][N + 1];
		int n, g, h, h_, i, j, b, b_, c, all, x;

		scanf("%d", &n);
		for (i = 0; i < n; i++)
			scanf("%d", &aa[i]);
		for (b = 0; b < 1 << n; b++) {
			int sum;

			c = 0, sum = 0;
			for (i = 0; i < n; i++)
				if ((b & 1 << i) != 0)
					c += p3[i], sum += aa[i];
			cc[b] = c, ss[b] = sum, bb[b] = b;
		}
		sort(bb, 1 << n);
		memset(dp[0], 0, n * sizeof *dp[0]);
		memset(dq[0], 0, (n + 1) * sizeof *dq[0]);
		for (b = 1; b < 1 << n; b++)
			memset(dq[b], -1, (n + 1) * sizeof *dq[b]);
		all = (1 << n) - 1;
		for (h = 1; h < 1 << n; h = h_) {
			int sum, a, s;

			sum = ss[bb[h]];
			h_ = h + 1;
			while (h_ < 1 << n && ss[bb[h_]] == sum)
				h_++;
			for (g = h; g < h_; g++) {
				b = bb[g], a = all ^ b, s = 0;
				do {
					int p;

					c = cc[s] + cc[b] * 2;
					p = -1;
					for (j = 0; j < n; j++)
						dp[c][j] = p = max(p, (b & 1 << j) != 0 && dq[s][j] != -1 ? dq[s][j] + 1 : -1);
				} while ((s = s - a & a));
			}
			for (g = h; g < h_; g++) {
				b = bb[g], a = all ^ b, s = 0;
				do {
					int q;

					b_ = s ^ b, c = cc[s] + cc[b] * 2;
					q = -1;
					for (j = 0; j < n; j++)
						dq[b_][j + 1] = q = max(q, max(dq[b_][j + 1], dp[c][j]));
				} while ((s = s - a & a));
			}
		}
		printf("%d\n", n - dq[all][n]);
		memset(deleted, 0, n * sizeof *deleted);
		b = all, j = n - 1, x = INF;
		while (b) {
			int s, p, s_;

			s = 0, p = -1, s_ = -1;
			do {
				b_ = b ^ s, c = cc[b_] + cc[s] * 2;
				if (ss[s] < x && p < dp[c][j])
					p = dp[c][j], s_ = s;
			} while ((s = s - b & b));
			while ((s_ & 1 << j) == 0)
				j--;
			for (i = 0; i < n; i++)
				if (i != j && (s_ & 1 << i) != 0)
					move(i, j);
			b ^= s_, j--, x = ss[s_];
		}
	}
	return 0;
}
