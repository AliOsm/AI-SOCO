#include <bits/stdc++.h>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;

#define MAX_SZ 4500
#define INF 1000000000
const ll LL_INF = 1E18;

struct edge{
  int f , t , cap , fl , pr;
  edge(int _f=0 , int _t=0 , int _cap=0 , int _pr=0){
   f = _f , t = _t , cap = _cap , pr = _pr , fl=0;
                                                    }
};
int N , F , T;
vector<edge> E;
vi fo[MAX_SZ];
void add_edge(int f , int t , int cap , int pr){
  E.pb(edge(f,t,cap,pr)) , fo[f].pb(sz(E)-1);
  E.pb(edge(t,f,0,-pr)) , fo[t].pb(sz(E)-1);
}
// spfa
ll sp[MAX_SZ];
int par[MAX_SZ];
deque<int> use;
bool used[MAX_SZ];
bool spfa(){
  memset(used , 0 , N*sizeof(bool));
  for(int i=0;i<N;++i)sp[i] = LL_INF;
  use.clear();
  use.pb(F) , sp[F] = 0;
  while(!use.empty()){
   int vr = use[0];
   use.pop_front();
   used[vr] = false;
   for(int i=0;i<sz(fo[vr]);++i){
    edge& e = E[fo[vr][i]];
    if(e.cap > e.fl)
     if(sp[e.t] > sp[e.f] + e.pr){
      par[e.t] = fo[vr][i];
      sp[e.t] = sp[e.f] + e.pr;
      if(!used[e.t])
       used[e.t] = true,
       use.pb(e.t);
                                 }
                                }
                     }
  return sp[T] < LL_INF;
}
ll mfmc(){
  ll COST = 0;
  while(spfa()){
   int how = INF;
   int Last = T;
   while(Last != F){
    relaxMin(how , E[par[Last]].cap-E[par[Last]].fl);
    Last = E[par[Last]].f;
                   }
   Last = T;
   while(Last != F){
    COST += E[par[Last]].pr *1LL* how;
    E[par[Last]].fl += how;
    E[par[Last]^1].fl -= how;
    Last = E[par[Last]].f;
                   }
               }
  return COST;
}
int main(){
  int n, k;
  scanf("%d%d", &n, &k);
  vi a(n), b(n);
  for(int& e : a) scanf("%d", &e);
  for(int& e : b) scanf("%d", &e);

  N = 2 * n + 3;
  int NF = N - 1;
  F = N - 3, T = N - 2;

  add_edge(F, NF, k, 0);

  for(int i = 0;i < n;++i)
    add_edge(NF, i, 1, a[i]),
    add_edge(i + n, T, 1, b[i]),
    add_edge(i, i + n, 1, 0);

  for(int i = 1;i < n;++i)
    add_edge(n + i - 1, n + i, INF, 0);

  cout << mfmc() << '\n';

  return 0;
}
