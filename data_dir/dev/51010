#include <iostream>
#include <cstdlib>
#include <sstream>
#include <algorithm>
#include <numeric>
#include <vector>
#include <utility>
#include <map>
#include <iterator>     // std::ostream_iterator
#include <limits>       // numeric_limits
#include <cmath>
#include <functional>
#include <cstdarg>
#include <iomanip>

using namespace std;

long long c285 ( )
{
    long long n; cin >> n;

    vector < long long > a ( n );
    for ( vector < long long >::iterator iter = a.begin(); iter != a.end(); cin >> *iter++ )
        ;

    sort ( a.begin(), a.end() );

    long long ret ( 0 );
    vector < long long >::const_iterator iter = a.begin();

    for ( long long j = 1; iter != a.end(); ++iter, ++j) //ret += abs<long long> ( *iter++ - j++ ))
        ret += *iter > j ? *iter - j : j - *iter;

    return ret;
}

int a327 ( )
{
    int n; cin >> n;

    vector <int> a ( n );
    for ( vector <int>::iterator iter = a.begin(); iter != a.end(); ++iter )
        cin >> *iter;

    const int s = accumulate ( a.begin(), a.end(), 0 );
    if ( s == n )
        return n - 1;

    int m = 0, max_m = 0;

    for ( vector<int>::const_iterator iter = a.begin(); iter != a.end(); ++iter )
    {
        m = *iter ? max ( m - 1, 0) : m + 1;
        if ( m > max_m ) max_m = m;
    }

    return s + max_m;
}

const char * a287 ( )
{
    const int n ( 4 );
    vector < string > a ( n );

    for ( vector <string>::iterator iter = a.begin(); iter != a.end(); ++ iter )
        cin >> *iter;


    for ( int i = 0; i < 3; ++i )
        for ( int j = 0; j < 3; ++j )
        {
            const int k = (a[i][j] == '#') + (a[i+1][j] == '#')
                + (a[i][j+1] == '#') + (a[i+1][j+1] == '#');

            if ( k != 2 )
                return "YES";
        }

    return "NO";
}

double a127 ( )
{
    int n, k;
    cin >> n >> k;

    vector < pair < int, int > > a( n );
    for ( vector < pair <int, int> >::iterator iter = a.begin();
            iter != a.end(); ++ iter )
        cin >> iter->first >> iter->second;

    double res = 0.0;
    for ( vector < pair <int, int> >::const_iterator i = a.begin(), j = a.begin() + 1;
            j != a.end(); ++i, ++j)
        res += ::sqrt ( (i->first - j->first) * (i->first - j->first)
                + (i->second - j->second) * (i->second - j->second) );

    return res * k / 50;
}

int a25 ( )
{
    int n; cin >> n;
    vector < int > x ( n );

    for ( vector < int >::iterator iter = x.begin(); iter != x.end(); ++ iter )
        cin >> * iter;

    transform ( x.begin(), x.end(), x.begin(), bind2nd( modulus<int>(), 2 ));  // XXX
    const int k = accumulate ( x.begin(), x.begin() + 3, 0 );

    return find ( x.begin(), x.end(), k > 1 ? 0 : 1 ) - x.begin() + 1;
}

bool isprime ( int k )
{
    for ( int j = 2; j < k; ++ j )
        if ( ! ( k % j ))
            return false;
    return true;
}

const char * a80 ( )
{
    int n, m;
    cin >> n >> m;

    if ( ! isprime ( m ) )
        return "NO";

    for ( int j = n + 1; j < m; ++ j )
        if ( isprime ( j ))
            return "NO";

    return "YES";
}

// template < class T, class S >  // XXX
// pair < T, S > pair_sum ( const pair <T, S> & a, const pair <T, S> & b )
// {
//     return make_pair < T, S> ( a.first + b.first, a.second + b.second );
// }

template < class T >  // XXX
T pair_sum ( const T & a, const T & b )
{
    typedef typename T::first_type   first_type;
    typedef typename T::second_type  second_type;

    return make_pair < first_type, second_type > ( a.first + b.first, a.second + b.second );
}

int a248 ( )
{
    int n;
    cin >> n;

    vector < pair < int, int > > a( n );
    for ( vector < pair <int, int> >::iterator iter = a.begin (); iter != a.end(); ++ iter )
        cin >> iter->first >> iter->second;

    const pair < int , int > sum = accumulate ( a.begin(), a.end(),
            make_pair < int, int > (0, 0), pair_sum < pair <int, int > > );

    return min ( sum.first, n - sum.first ) + min ( sum.second, n - sum.second );
}

int main ()
{
    cout << a248 ();

    return EXIT_SUCCESS;
}
