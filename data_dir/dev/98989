//let's do it
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 1000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 100001

struct gauss
{
    ll basis[61];
    void reset()
    {
        mem(basis,0);
    }
    void add(ll num)
    {
        for(ll i=60;i>=0;i--)
        {
            if((num>>i)&1)
            {
                if(basis[i])
                num=num^basis[i];
                else
                {
                    basis[i]=num;
                    return;
                }
            }
        }
        return;
    }
}gaussian;

vector<pair<ll,ll> >v[maxn];
ll cnt[62][2],vis[maxn],value[maxn],power[maxn];

ll c2(ll x)
{
	return (x*(x-1))/2;
}
void add(ll val)
{
	for(ll i=0;i<=60;i++)
	cnt[i][(val>>i)&1]++;
}
void dfs(int cur,int par)
{
	vis[cur]=1;
	add(value[cur]);
	for(ll i=0;i<v[cur].size();i++)
	{
		ll x=v[cur][i].F;
		ll y=v[cur][i].S;
		if(x==par)
		continue;
		if(vis[x]==0)
		{
			value[x]=value[cur]^y;
			dfs(x,cur);
		}
		else
		gaussian.add(value[cur]^value[x]^y);
	}
}
int main()
{
	boost1;boost2;
	ll i,j,n,m,x,y,ans=0,temp,z,rank,atleast;
	power[0]=1;
	for(i=1;i<maxn;i++)
	power[i]=(2LL*power[i-1])%mod;
	cin>>n>>m;
	for(i=1;i<=m;i++)
	{
		cin>>x>>y>>z;
		v[x].pb(mp(y,z));
		v[y].pb(mp(x,z));
	}
	for(i=1;i<=n;i++)
	{
		if(vis[i])
		continue;
		mem(cnt,0);
		gaussian.reset();
		rank=0;
		atleast=0;
		dfs(i,-1);
		for(j=0;j<=60;j++)
		{
			if(gaussian.basis[j])
			rank++;
			atleast=atleast|gaussian.basis[j];
		}
		for(j=0;j<=60;j++)
		{
			if(atleast&(1LL<<j))
			{
				temp=(cnt[j][0]*cnt[j][1])%mod;
				temp=(temp+c2(cnt[j][0]))%mod;
				temp=(temp+c2(cnt[j][1]))%mod;
				temp=(temp*power[j+rank-1])%mod;
				ans+=temp;
				if(ans>=mod)
				ans-=mod;
			}
			else
			{
				temp=(cnt[j][0]*cnt[j][1])%mod;
				temp=(temp*power[j+rank])%mod;
				ans+=temp;
				if(ans>=mod)
				ans-=mod;
			}
		}
	}
	cout<<ans;
	return 0;
}
