//g++ -std=c++14 -g -O2 -o ./a ./A.cpp
#include <bits/stdc++.h>
using namespace std;
#define ff first
#define ss second
#define nl '\n'
typedef long long ll;
//////////////////////////////////////////////////////////////////////

const int N = 100100;
map<string,int> names[N];
int n,m,ssz[N],lvl[N],ans[N];
vector<int> tr[N];
vector<pair<int,int> > qrs[N];
string name[N];

void dfs0(int x=0,int dpt=0){
  lvl[x]=dpt;
  ssz[x]=1;
  for(auto&it:tr[x]){
    dfs0(it,dpt+1);
    ssz[x] += ssz[it];
  }
}

void add(int v){
  names[lvl[v]][name[v]]++;
}
void rem(int v){
  auto&st=names[lvl[v]];
  st[name[v]]--;
  if(st[name[v]]==0)
    st.erase(name[v]);
}

vector<int>*L[N];
void dfs(int x=0,bool retain=1){
  int hvy = -1;
  for(auto&it:tr[x])
    if(hvy==-1 or ssz[it]>ssz[hvy])hvy=it;
  for(auto&it:tr[x])
    if(it!=hvy)dfs(it,0);
  if(hvy!=-1){
    dfs(hvy,1);
    L[x]=L[hvy];
  }
  if(L[x]==NULL)L[x]=new vector<int>();
  L[x]->emplace_back(x);add(x);
  for(auto&it:tr[x])
    if(it!=hvy){
      for(auto&jt:*L[it])
	add(jt),L[x]->emplace_back(jt);
    }
  for(auto&qry:qrs[x]){
    if(qry.ff<=n)//
      ans[qry.ss] = names[qry.ff].size();
  }
  if(!retain)
    for(auto&jt:*L[x])rem(jt);
}

int main(){
  ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
  
  cin>>n;
  for(int i=1;i<=n;i++){
    cin>>name[i];
    int par;cin>>par;
    tr[par].emplace_back(i);
  }

  dfs0();

  cin>>m;
  for(int v,k,i=1;i<=m;i++){
    cin>>v>>k;
    qrs[v].emplace_back(lvl[v]+k,i);
  }

  dfs();

  for(int i=1;i<=m;i++)cout<<ans[i]<<nl;
  
  return 0;
}
