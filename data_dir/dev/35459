#include<cstdio>
#include<cstring>
#include<set>
#include<string>
#include<iostream>
#include<cmath>
#include<vector>
#include<map>
#include<stack>
#include<time.h>
#include<queue>
#include<cstdlib>
#include<algorithm>
using namespace std;
const int maxn  =  100010;
#define lowbit(x) ((x)&(-(x)))
#define sqr(x) ((x)*(x))
#define PB push_back
#define MP make_pair
typedef unsigned long long ULL;
typedef long long LL;
typedef vector<int> VI;
typedef vector<string> VS;
typedef pair<int,int> PII;
int a[110];
VI edge[110];
bool vis[110];
int pre[110];
int cir;
void dfs(int u,int f)
{
    if(vis[u]) 
    {
        //printf("u=%d\n",u);
        cir=u;
        pre[u]=f;
        return ;
    }
    vis[u]=true;
    for(int i=0;i<edge[u].size();i++)
    {
        int v=edge[u][i];
        if(v==f) continue;
        pre[v]=u;
        dfs(v,u);
        if(cir){    return ;  }
    }
}
int uu[110];
bool ans;
int tot;
void go(int u,int f)
{
    if(uu[u]==-1 || uu[u]>=1&&uu[u]<=tot)
    {
        ans=false;
        return ;
    }
    uu[u]=tot;
    for(int i=0;i<edge[u].size();i++)
    {
        int v=edge[u][i];
        if(v==f) continue;
        go(v,u);
        if(!ans) return ;
    }
}
int f[110];
int find(int x){
    return f[x]==x?x:f[x]=find(f[x]);
}
int main()
{
     int n,m,a,b;
     scanf("%d%d",&n,&m);
     for(int i=1;i<=n;i++) f[i]=i;
     for(int i=0;i<m;i++)
     {
         scanf("%d%d",&a,&b);
         edge[a].push_back(b);
         edge[b].push_back(a);
         int x=find(a);
         int y=find(b);
         if(x!=y) f[x]=y;
     }
      int x=find(1);
     for(int i=1;i<=n;i++)
     {
         if(find(i)!=x) return printf("NO\n"),0;
     }
     memset(pre,-1,sizeof(pre));
     dfs(1,0);
     if(!cir)
     {
         return printf("NO\n"),0;
     }
     memset(uu,0,sizeof(uu));
     uu[cir]=-1;
     for(int i=pre[cir];i!=cir && i!=-1;i=pre[i]) {
         uu[i]=-1;
     }
     tot=0;
     ans=true;
     for(int i=1;i<=n;i++)
     {
         if(uu[i]==-1)
         {
        //   printf("i=%d\n",i);
             tot++;
             for(int j=0;j<edge[i].size();j++)
             {
                 int v=edge[i][j];
                // if(i==4) printf("v=%d\n",v);
                 if(uu[v]!=-1)
                 {
                     go(v,i);
                 }
             }
         }
     }
     if(ans)
     {
         printf("FHTAGN!\n");
     }
     else printf("NO\n");
     return 0;
}
