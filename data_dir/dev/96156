#include <cstdio>
#include <algorithm>
using namespace std;

const int N = 100005;
int segmax[4*N];
long long sum[4*N];

void inline pull(int x) {
  segmax[x] = max(segmax[x*2], segmax[x*2+1]);
  sum[x] = sum[x*2] + sum[x*2+1];
}

void modify(int x, int L, int R, int k, int val) {
  if (L == R) segmax[x] = sum[x] = val;
  else {
    int M = (L+R)/2;
    if (k <= M) modify(x*2, L, M, k, val);
    else modify(x*2+1, M+1, R, k, val);
    pull(x);   
  }
}

void modulo(int x, int L, int R, int ql, int qr, int m) {
  if (L == R) {
    segmax[x] %= m;
    sum[x] = segmax[x];
  } else {
    int M = (L+R)/2;
    if (ql <= M && segmax[x*2] >= m) modulo(x*2, L, M, ql, qr, m);
    if (qr > M && segmax[x*2+1] >= m) modulo(x*2+1, M+1, R, ql, qr, m);
    pull(x);
  }
}

long long getsum(int x, int L, int R, int ql, int qr) {
  if (ql <= L && R <= qr) return sum[x];
  int M = (L+R)/2;
  long long ret = 0;
  if (ql <= M) ret += getsum(x*2, L, M, ql, qr);
  if (qr > M) ret += getsum(x*2+1, M+1, R, ql, qr);
  return ret;
}

int main() {
  int n, m, t, l, r, x;
  scanf("%d%d", &n, &m);
  for (int i = 1; i <= n; i++) {
    scanf("%d", &x);
    modify(1, 1, n, i, x);
  }
  while (m--) {
    scanf("%d", &t);
    if (t == 1) {
      scanf("%d%d", &l, &r);
      long long ans = getsum(1, 1, n, l, r);
      printf("%I64d\n", ans);
    } else if (t == 2) {
      scanf("%d%d%d", &l, &r, &x);
      modulo(1, 1, n, l, r, x);
    } else if (t == 3) {
      scanf("%d%d", &l, &x);
      modify(1, 1, n, l, x);
    }
  }
  return 0;
}
