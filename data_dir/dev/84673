//bismillahir rahmanir rahim            //Author:Fayed Anik
 
#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
 
using namespace std;
//using namespace __gnu_pbds;
 
/*
template <typename T>  using ordered_set =
    tree<T, null_type, less<T>,   /// greater<T> for sorting decreasingly
    rb_tree_tag, tree_order_statistics_node_update>;
*/

#define         ll                          long  long
#define         lf                          double
#define         pb(x)                       push_back(x)
#define         ull                         unsigned long long
#define         sfl(a)                      scanf("%lld",&a)
#define         sf(a)                       scanf("%d",&a)
#define         pf(a)                       printf("%d\n",a)
#define         pfl(a)                      printf("%lld\n",a)
#define         FOR(x,n)                    for(ll x=1;x<=n;++x)
#define         pii                         pair< ll , ll >
#define         mp(a,b)                     make_pair(a,b)
#define         mod                         1000000007
#define         INF                         2e18
#define         f1                          first
#define         f2                          second
#define         all(v)                      v.begin(),v.end()
#define         PI                          acos(-1)
#define         printminusone               printf("-1\n")
#define         bug                         printf("bug")
#define         FILEIN                      freopen("in.txt","r",stdin)
#define         FILEOUT                     freopen("out.txt","w",stdout)
 
//ll SET(ll mask,ll pos){ return mask = (mask | (1ll<<pos)); }
//ll RESET(ll mask,ll pos){ return mask = mask & ~(1ll<<pos); }
//bool CHECK(ll mask,ll pos) { return (bool) (mask & (1ll<<pos)); }
//priority_queue <ll, vector<ll>, greater<ll> > pq;

#define lim 200005

set<ll>edge[lim];
ll par[lim],sz[lim];
set<ll>st;
bool vis[lim];


ll find(ll p){
    if(p==par[p]) return p;
    else{
        return par[p] = find(par[p]);
    }
}

void UNION(ll u,ll v){
    u = find(u);
    v = find(v);
    if( u != v ){
        if(sz[u]>=sz[v]){
            sz[u] += sz[v];
            sz[v] = 0;
            par[v] = par[u];
        }
        else{
            sz[v] += sz[u];
            sz[u] = 0;
            par[u] = par[v];
        }
    }
}

void bfs(ll u){
    queue<ll>q;
    q.push(u);
    vis[u]=1;
    while(!q.empty()){
        u = q.front();
        q.pop();
        st.erase(u);
        set<ll>tmp;
        for(auto it:st){
            if(edge[u].find(it)==edge[u].end() and !vis[it]){
                vis[it] = 1;
                q.push(it);
                tmp.insert(it);
                UNION(u,it);
            }
        }
        for(auto it:tmp){
            st.erase(it);
        }
    }
}
int main(){
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    ll n,m,u,v;
    sfl(n),sfl(m);
    FOR(i,m){
        sfl(u),sfl(v);
        edge[u].insert(v);
        edge[v].insert(u);
    }
    FOR(i,n){
        par[i] = i;
        st.insert(i);
        sz[i] = 1;
    }
    
    FOR(i,n){
        if(!vis[i]){
            bfs(i);
        }
    }
    vector<ll>ans;
    FOR(i,n){
        if(par[i]==i){
            //cout << par[i] <<' '<<i<<endl;
            ans.pb(sz[i]);
        }
    }
    sort(ans.begin(),ans.end());
    ll sz = ans.size();
    pfl(sz);
    for(auto x:ans){
        printf("%lld ",x);
    }
    printf("\n");
    return 0;
}