#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <climits>
#include <unordered_map>
#include <iterator> 
using namespace std;
#define ll long long
#define ull unsigned long long
#define ui unsigned int
#define mp make_pair
#define inf32 INT_MAX
#define inf64 LLONG_MAX
#define PI acos(-1)
#define cos45 cos(PI/4)
#define ld long double
#define inf 1000000
#define pii pair<int, int>
const int mod = (1e9) + 7;
const double eps = 1e-6;
const int siz = 5e5 + 5, siz2 = 1049659, siz3 = 5032108;
int t;
ll l, r;
string ls, rs;
int lsz, rsz;
ll dpcomb[21][5][2][2];
ll dp1[21][5][2];
ll dpfree[21][5];
ll solvecomb(int i, int nonzero, int free1, int free2) {
	if (nonzero > 3) {
		return 0;
	}
	if (i == lsz) {
		return 1;
	}
	if (dpcomb[i][nonzero][free1][free2] != -1) {
		return dpcomb[i][nonzero][free1][free2];
	}
	int digl = ls[i] - '0', digr = rs[i] - '0';
	ll sum = 0;
	for (int j = 0; j <= 9; j++) {
		if (j == 0 && i == 0) {
			continue;
		}
		if (free1 == 0 && j < digl) {
			continue;
		}
		if (free2 == 0 && j > digr) {
			continue;
		}
		sum += solvecomb(i+1, nonzero + (j!=0), free1 || (j > digl), free2 || (j<digr));
	}
	return dpcomb[i][nonzero][free1][free2] = sum;
}
ll solvel(int i, int nonzero, int free1) {
	if (nonzero > 3) {
		return 0;
	}
	if (i == lsz) {
		return 1;
	}
	if (dp1[i][nonzero][free1] != -1) {
		return dp1[i][nonzero][free1];
	}
	int digl = ls[i] - '0';
	ll sum = 0;
	for (int j = 0; j <= 9; j++) {
		if (j == 0 && i == 0) {
			continue;
		}
		if (free1 == 0 && j < digl) {
			continue;
		}
		sum += solvel(i + 1, nonzero + (j != 0), free1 || (j > digl));
	}
	return dp1[i][nonzero][free1] = sum;
}
ll solver(int i, int nonzero, int free2) {
	if (nonzero > 3) {
		return 0;
	}
	if (i == rsz) {
		return 1;
	}
	if (dp1[i][nonzero][free2] != -1) {
		return dp1[i][nonzero][free2];
	}
	int digr = rs[i] - '0';
	ll sum = 0;
	for (int j = 0; j <= 9; j++) {
		if (j == 0 && i == 0) {
			continue;
		}
		if (free2 == 0 && j > digr) {
			continue;
		}
		sum += solver(i + 1, nonzero + (j != 0), free2 || (j < digr));
	}
	return dp1[i][nonzero][free2] = sum;
}
ll solvefree(int i, int nonzero, int n) {
	if (nonzero > 3) {
		return 0;
	}
	if (i == n) {
		return 1;
	}
	if (dpfree[i][nonzero] != -1) {
		return dpfree[i][nonzero];
	}
	ll sum = 0;
	for (int j = 0; j <= 9; j++) {
		if (j == 0 && i == 0) {
			continue;
		}
		sum += solvefree(i + 1, nonzero + (j != 0), n);
	}
	return dpfree[i][nonzero] = sum;
}
int main()
{
	scanf("%d", &t);
	while (t--) {
		scanf("%I64d%I64d", &l, &r);
		ls = to_string(l);
		rs = to_string(r);
		lsz = ls.size();
		rsz = rs.size();
		if (lsz == rsz) {
			memset(dpcomb, -1, sizeof dpcomb);
			printf("%I64d\n", solvecomb(0, 0, 0, 0));
		}
		else {
			ll ans = 0;
			memset(dp1, -1, sizeof dp1);
			ans += solvel(0, 0, 0);
			memset(dp1, -1, sizeof dp1);
			ans += solver(0, 0, 0);
			for (int i = lsz + 1; i < rsz; i++) {
				memset(dpfree, -1, sizeof dpfree);
				ans += solvefree(0, 0, i);
			}
			printf("%I64d\n", ans);
		}
	}
	return 0;
}