/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class TaskE {
public:
    void solve(istream& in, ostream& out) {
        int n;
        long long W, B, X;
        in >> n >> W >> B >> X;
        vector<int> c(n);
        for (int i = 0; i < n; ++i) {
            in >> c[i];
        }
        vector<long long> cost(n);
        for (int i = 0; i < n; ++i) {
            in >> cost[i];
        }
        constexpr int MXV = 10'000;
        vector<long long> dp(MXV + 1, -1);
        dp[0] = W;
        for (int i = 0; i < n; ++i) {
            vector<long long> nxt(MXV + 1, -1);
            for (int k = 0; k <= MXV; ++k) {
                if (dp[k] == -1) continue;
                for (int j = 0; j <= c[i]; ++j) {
                    if (dp[k] - j * cost[i] < 0) continue;
                    long long mana = min(dp[k] - j * cost[i] + X, W + (k + j) * B);
                    if (nxt[k + j] == -1) {
                        nxt[k + j] = mana;
                    } else {
                        nxt[k + j] = max(mana, nxt[k + j]);
                    }
                }
            }
            dp = nxt;
        }
        for (int i = MXV; i >= 0; --i) {
            if (dp[i] != -1) {
                out << i << "\n";
                return;
            }
        }
    }
};


int main() {
	std::ios::sync_with_stdio(false); cin.tie(nullptr);
	TaskE solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
