/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>


#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define int long long

using namespace std;

const int N = 2e5 + 10;

class D2EqualizingByDivisionHardVersion {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n, k;
        in >> n >> k;
        unordered_map<int, vector<int>> dp;
        for (int i = 0; i < n; ++i) {
            int x;
            in >> x;
            int cost = 0;
            while (x) {
                dp[x].push_back(cost);
                ++cost;
                x >>= 1;
            }
        }

        int res = INT_MAX;

        for (auto &w: dp) {
            if (w.second.size() < k) continue;
            sort(w.second.begin(), w.second.end());
            int cost = 0;
            for (int i = 0; i < k; ++i) cost += w.second[i];
            res = min(res, cost);
        }

        out << res;
    }
};


int32_t main() {
    D2EqualizingByDivisionHardVersion solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
