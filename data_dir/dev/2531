#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>
#include <random>
#include <bitset>
#include <iomanip>


typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(tint i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define debug(x) cout << #x << " = "  << x << endl

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

const tint INFINITO = 1e15;

int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n,m;
	while (cin >> n >> m)
	{
		vector<tint> c (n);
		forn(i,n)
			cin >> c[i];
		vector<vector<tint> > ladj(n);
		forn(i,m)
		{
			tint a,b;
			cin >> a >> b;
			ladj[a-1].push_back(b-1);
			ladj[b-1].push_back(a-1);
		}
		
		vector<tint> visitado(n,0);
		tint ans = 0;
		forn(i,n)
		{
			tint mini = INFINITO;
			if (!visitado[i])
			{
				vector<tint> vecinos = {i};
				vector<tint> nuevosVecinos;
				while (!vecinos.empty())
				{
					tint actual = vecinos.back();
					vecinos.pop_back();
					mini = min(mini,c[actual]);
					for (auto v : ladj[actual])
					{
						if (!visitado[v])
						{
							visitado[v] = 1;
							nuevosVecinos.push_back(v);
						}
					}
					
					if (vecinos.empty())
					{
						vecinos = nuevosVecinos;
						nuevosVecinos = {};
					}
				}
				ans += mini;
			}
		}
		cout << ans << "\n";
	}
	return 0;
}



