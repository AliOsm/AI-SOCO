#include <bits/stdc++.h>

using namespace std;

#define loop(i, n) for(int i = 0;i < int(n);i++)
#define rloop(i, n) for(int i = int(n);i >= 0;i--)
#define range(i, a, b) for(int i = int(a);i <= int(b);i++)
#define SZ(c) int(c.size())
#define ALL(c) c.begin(), c.end()
#define RALL(c) c.rbegin(), c.rend()
#define PI acos(-1)
#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define sfi1(v) scanf("%d",&v)
#define sfi2(v1, v2) scanf("%d %d",&v1,&v2)
#define sfi3(v1, v2, v3) scanf("%d %d %d",&v1,&v2,&v3)
#define sfll1(v) scanf("%I64d",&v);
#define sfll2(v1, v2) scanf("%I64d %I64d",&v1,&v2)
#define sfll3(v1, v2, v3) scanf("%I64d %I64d %I64d",&v1,&v2,&v3)
#define endl '\n'

typedef vector<int> vi;
typedef vector<pair<int, int> > vii;
typedef long long ll;
typedef pair<int, int> pii;

const int N = 505;
const int S = 1005;

struct Parcel {
    int w, s, val, in, out, nxt;
} parcels[N];

int dp[N][S];
int in[N];
int n, mxs;


int main() {

#ifndef ONLINE_JUDGE
    freopen("in.in", "r", stdin);
//    freopen("out.in", "w", stdout);
#endif

    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    memset(dp, -1, sizeof dp);

    cin >> n >> mxs;
    loop(i, n) {
        cin >> parcels[i].in >> parcels[i].out >> parcels[i].w >> parcels[i].s >> parcels[i].val;
    }

    sort(parcels, parcels + n, [](const Parcel &i, const Parcel &j) {
        if (i.in != j.in)return i.in < j.in;
        return i.out > j.out;
    });

    loop(i, n)in[i] = parcels[i].in;
    loop(i, n)parcels[i].nxt = int(lower_bound(in, in + n, parcels[i].out) - in);

    int ans = 0;
    rloop(i, n - 1) {
        rloop(s, mxs) {
            vi DP(n + 1);
            rloop(j, n - 1) {
                if (j == i)break;
                DP[j] = DP[j + 1];
                if (s >= parcels[j].w && parcels[i].in <= parcels[j].in && parcels[j].out <= parcels[i].out) {
                    DP[j] = max(DP[j], dp[j][min(s - parcels[j].w, parcels[j].s)] + DP[parcels[j].nxt]);
                }
            }

            dp[i][s] = *max_element(ALL(DP)) + parcels[i].val;
        }
    }

    vi DP(n + 1);
    rloop(j, n - 1) {
        DP[j] = DP[j + 1];
        if (mxs >= parcels[j].w) {
            DP[j] = max(DP[j], dp[j][min(mxs - parcels[j].w, parcels[j].s)] + DP[parcels[j].nxt]);
        }
    }

    cout << DP[0] << endl;

    return 0;

}
