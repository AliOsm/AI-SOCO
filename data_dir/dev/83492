#include <bits/stdc++.h>

using namespace std;
typedef long long ll;

const int M = 100005;
const int N = 1000006;

int s[N];
int n, sa[N], tsa[N], lcp[N], r[N], nr[N], c[N];

void sort(int k, int mx){
    mx += 2;
    memset(c, 0, sizeof(int) * mx);
    for(int i = 0; i < n; i++) c[i + k < n ? r[i+k]+2 : 1]++;
    partial_sum(c, c+mx, c);
    int t;
    for(int i = 0; i < n; i++)
		t = sa[i]+k < n ? r[ sa[i]+k ]+1 : 0,
        tsa[ c[t]++ ] = sa[i];
    memcpy(sa, tsa, sizeof(int) * n);
}

void build_sa(){

    int t = n, a, b;
    memcpy(r, s, sizeof(int) * n);
    iota(sa, sa+n, 0);
    // for(int i = 0; i < n; i++) r[i] = s[i];
    // for(int i = 0; i < n; i++) sa[i] = i;

    for(int sz = 1; sz < n; sz *= 2){
        sort(sz, t), sort(0, t);
        t = nr[ sa[0] ] = 0;
        for(int i = 1; i < n; i++){
            a = sa[i]+sz < n ? r[ sa[i]+sz ] : -1;
            b = sa[i-1]+sz < n ? r[ sa[i-1]+sz ] : -1;
            nr[ sa[i] ] = r[ sa[i] ] == r[ sa[i-1] ] && a == b ? t : ++t;
        }
        memcpy(r, nr, sizeof(int) * n);
        if(t == n-1) break;
    }
}

void build_lcp(){ // lcp[i] = lcp(s[:i], s[:i+1])
    int k = 0;
    for(int i = 0; i < n; i++) r[ sa[i] ] = i;
    // memset(lcp, 0, sizeof(int)*n);

    for(int i = 0; i < n; i++){
        if(r[i] == n-1) continue;
        int j = sa[r[i]+1];
        while(i+k < n && j+k < n && s[i+k] == s[j+k]) k++;
        lcp[r[i]] = k;
        if(k) k--;
    }
} 

inline bool leq(int a1, int a2, int b1, int b2) {
        return(a1 < b1 || a1 == b1 && a2 <= b2);
}

// and triples
inline bool leq(int a1, int a2, int a3, int b1, int b2, int b3) {
    return(a1 < b1 || a1 == b1 && leq(a2,a3, b2,b3));
} // and triples

// stably sort a[0..n-1] to b[0..n-1] with keys in 0..K from r
static void radixPass(int* a, int* b, int* r, int n, int K) {// count occurrences
    int* c = new int[K + 1]; // counter array
    for (int i = 0; i <= K; i++) c[i] = 0; // reset counters
    for (int i = 0; i < n; i++) c[r[a[i]]]++; // count occurrences
    for (int i = 0, sum = 0; i <= K; i++) // exclusive prefix sums
    {
        int t = c[i];
        c[i] = sum;
        sum += t;
    }
    for (int i = 0;  i < n; i++) b[c[r[a[i]]]++] = a[i]; // sort
    delete [] c;
}

// find the suffix array SA of s[0..n-1] in {1..K}Ë†n
// require s[n]=s[n+1]=s[n+2]=0, n>=2
void suffixArray(int *s, int *sa, int n, int K) {
    int n0 = (n+2)/3, n1 = (n+1)/3, n2 = n/3, n02 = n0+n2;
    int* s12 = new int[n02+3]; s12[n02] = s12[n02+1] = s12[n02+2] = 0;
    int* sa12 = new int[n02+3]; sa12[n02] = sa12[n02+1] = sa12[n02+2] = 0;
    int* s0 = new int[n0];
    int* sa0 = new int[n0];
    // generate positions of mod 1 and mod 2 suffixes
    // the "+(n0-n1)" adds a dummy mod 1 suffix if n%3 == 1
    for (int i=0, j=0; i < n + (n0-n1); i++)
        if (i%3 != 0) s12[j++] = i;
    // lsb radix sort the mod 1 and mod 2 triples
    radixPass(s12 , sa12, s+2, n02, K);
    radixPass(sa12, s12 , s+1, n02, K);
    radixPass(s12 , sa12, s  , n02, K);
    // find lexicographic names of triples
    int name = 0, c0 = -1, c1 = -1, c2 = -1;
    for (int i = 0; i < n02; i++) {
        if (s[sa12[i]] != c0 || s[sa12[i]+1] != c1 || s[sa12[i]+2] != c2) {
            name++;
            c0 = s[sa12[i]];
            c1 = s[sa12[i]+1];
            c2 = s[sa12[i]+2];
        }
        if (sa12[i]%3 == 1) s12[sa12[i]/3] = name; // left half
        else s12[sa12[i]/3 + n0] = name; // right half
    }
    // recurse if names are not yet unique
    if (name < n02) {
        suffixArray(s12, sa12, n02, name);
        // store unique names in s12 using the suffix array
        for (int i = 0; i < n02; i++) s12[sa12[i]] = i + 1;
    } else // generate the suffix array of s12 directly
        for (int i = 0;  i < n02; i++) sa12[s12[i] - 1] = i;
    // stably sort the mod 0 suffixes from sa12 by their first character
    for (int i = 0, j = 0; i < n02; i++)
        if (sa12[i] < n0) s0[j++] = 3*sa12[i];
    radixPass(s0, sa0, s, n0, K);
    // merge sorted sa0 suffixes and sorted sa12 suffixes
    for (int p = 0, t = n0-n1, k = 0; k < n; k++) {
#define GetI() (sa12[t] < n0 ? sa12[t] * 3 + 1 : (sa12[t] - n0) * 3 + 2)
        int i = GetI(); // pos of current offset 12 suffix
        int j = sa0[p]; // pos of current offset 0 suffix
        if (sa12[t] < n0 ? // different compares for mod 1 and mod 2 suffixes
                leq(s[i], s12[sa12[t] + n0], s[j], s12[j/3]) :
                leq(s[i],s[i+1],s12[sa12[t]-n0+1], s[j],s[j+1],s12[j/3+n0]))
        {// suffix from sa12 is smaller
            sa[k] = i; t++;
            if (t == n02) // done --- only sa0 suffixes left
                for (k++; p < n0; p++, k++) sa[k] = sa0[p];
        } else {// suffix from sa0 is smaller
            sa[k] = j; p++;
            if (p == n0) // done --- only sa12 suffixes left
                for (k++; t < n02; t++, k++) sa[k] = GetI();
        }
    }
    delete [] s12; delete [] sa12; delete [] sa0; delete [] s0;
}

void read(int &val){
    static int a;
    while((a = getchar()) == ' ' || a == '\n');
    val = a-'0';
    while((a = getchar()) != ' ' && a != '\n') val = 10 * val + a-'0';
}

int main(){
    int m;

    // scanf("%d %d", &n, &m);
    read(n), read(m);

    if(m == 1) return printf("%lld\n", 1LL*n*(n+1)/2), 0;

    n *= m;

    // for(int i = 0; i < n; i++) scanf("%d", s+i);
    for(int i = 0; i < n; i++) read(s[i]);

    suffixArray(s, sa, n, n);
    // build_sa();
    build_lcp();
    ll ans = 0;

    for(int i = 0; i < n; i++){
        int j = i;
        int mn = n - sa[i];
        while(j+1 < n && s[ sa[i] ] == s[ sa[j+1] ])
            mn = min(mn, lcp[j++]);
        ans += mn;
        i = j;
    }

    printf("%lld\n", ans);
}
