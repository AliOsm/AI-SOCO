#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cassert>
#include <queue>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define pb push_back
#define ff first
#define ss second
typedef long long ll;
#define dforn(i, n) for(int i = n - 1; i >= 0; i--)

const int MAXN = 100050;

struct edge {
    int a, b, c;
};

int n, Q, P[MAXN];
edge E[MAXN];
ll s[MAXN], ans[MAXN], f[MAXN];;
vector<pair<int, int>> G[MAXN];

void dfs(int v, int p){
    P[v] = p;
    f[v] = 1;
    ans[v] = 0;
    s[v] = 0;
    forn(i, G[v].size()){
        int w = G[v][i].first;
        int l = G[v][i].second;
        if(w == p) continue;
        dfs(w, v);
        f[v] += f[w];
        s[v] += s[w] + l*f[w];
    }
    forn(i, G[v].size()){
        int w = G[v][i].first;
        int l = G[v][i].second;
        if(w == p) continue;
        ans[v] += ans[w];
        ll sub = 0;
        sub += (f[v]-1-f[w])*(s[w]+l*f[w]);
        //~ printf("v = %d, sub = %lld\n", v, sub);
        sub += (s[v]-s[w]-l*f[w])*f[w];
        //~ printf("v = %d, sub = %lld\n", v, sub);
        ans[v] += sub;
    }
    ans[v] += 2*s[v];
}

int main() {
    //~ freopen("input.in", "r", stdin);
    while( scanf("%d", &n) >= 1 ){
        forn(i, MAXN) G[i].clear();
        
        forn(i, n - 1){
            int a, b, c;
            scanf("%d %d %d", &a, &b, &c);
            --a; --b;
            E[i] = {a, b, c};
            G[a].pb({b, c});
            G[b].pb({a, c});
        }
        dfs(0, -1);
        //~ forn(v, n){
            //~ printf("v = %d, f = %d, s = %lld, ans = %lld\n",
                //~ v, f[v], s[v], ans[v]);
        //~ }
        ll tot = ans[0];
        scanf("%d", &Q);
        forn(q, Q){
            int r, w;
            scanf("%d %d", &r, &w);
            --r;
            int a = E[r].a;
            int b = E[r].b;
            if(P[b] == a) swap(a, b);
            int delta = E[r].c - w;
            E[r].c = w;
            tot -= 2 * delta * f[a] * (n - f[a]);
            printf("%.15f\n", (double) 3.0 * tot / n / (n - 1));
        }
    }
    return 0;
}
