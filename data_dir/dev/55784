#include "assert.h"
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
// #define next(t, i) argument_type<void(t)>::type i; read(i);
#define next(t, i) argument_type<void(t)>::type i; cin >> i;

void read(int &x) { scanf("%d", &x); }
void read(LL &x) { scanf("%I64d", &x); }
void read(double &x) { scanf("%lf", &x); }
void read(string &s) { static char buf[5000000]; scanf("%s", &buf); s = string(buf); }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

struct myCout {
} mycout;

myCout& operator << (myCout &s, const string &str) { printf("%s", str.c_str()); }
myCout& operator << (myCout &s, int x) { printf("%d", x); }
myCout& operator << (myCout &s, long long int x) { printf("%I64d", x); }
myCout& operator << (myCout &s, double x) { printf("%.10lf", x); }
myCout& operator << (myCout &s, char c) { printf("%c", c); }
template <typename T> myCout& operator << (myCout& s, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) s << v[i] << ' '; s << endl; return s; }
// #define cout mycout

vector<int> z_function (string s) {
	int n = (int) s.length();
	vector<int> z (n);
	int l = 0;
	int r = 0;
	for (int i = 1 ; i < n ; i++) {
		if (i <= r) z[i] = min(r - i + 1, z[i - l]);
		while (i + z[i] < n && s[z[i]] == s[i+z[i]])
			++z[i];
		if (i+z[i]-1 > r)
			l = i,  r = i+z[i]-1;
	}
	return z;
}

const int mod = 1000 * 1000 * 1000 + 7;

int add(int a, int b) {
	a += b;
	if (a >= mod) a -= mod;
	return a;
}

int mult(LL a, int b) {
	return a * b % mod;
}

void add_up(int &a, int b) { a = add(a, b); }
void mult_up(int &a, LL b) { a = mult(b, a); }

int main() {
	srand (time(NULL));
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(int, n);
	next(int, k);
	next(string, p);
	int m = p.size();
	
	vector<char> s(n, '.');
	
	int last = -1;
	
	auto z = z_function(p);
	
	for (auto x : readVector<int>(k)) {
		x--;
		int common_prefix_length = 0;
		if (last != -1 && last + m > x) {
			common_prefix_length = last + m - x;
			if (z[m - common_prefix_length] != common_prefix_length) {
				cout << 0;
				return 0;
			}
		}
		FOR (i, common_prefix_length, m) {
			s[x + i] = p[i];
		}
		
		last = x;
	}
	
	int res = 1;
	for (auto c : s) if (!islower(c)) mult_up(res, 26);
	
	cout << res;
}