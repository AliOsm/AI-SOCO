#include <bits/stdc++.h>

//#pragma GCC optimize("Ofast")

#define fi first
#define se second
#define ll long long

using namespace std;

const int NN = 2e5 + 7;
const int N = 1e6 + 7;
const int M = 17;
const int mod = 1e9 + 7;

struct foo{
    pair < int , int > v[10];
    node(){
        for( int i = 0; i < 10; i++ ){
            v[i] = {mod , mod};
        }
    }
};

int n,q;
int a[N];
foo t[N];

void upd( foo &x , int y )
{
    int z = y;
    for( int i = 0; i < 10; i++ ){
        if( y % 10 != 0 ){
            x.v[i].fi = z;
        }
        y /= 10;
    }
}

foo comb( foo x , foo y )
{
    foo z;
    for( int i = 0; i < 10; i++ ){
        z.v[i] = x.v[i];
        if( y.v[i].fi < z.v[i].fi ){
            z.v[i].se = z.v[i].fi;
            z.v[i].fi = y.v[i].fi;
        }else if( y.v[i].fi < z.v[i].se ){
            z.v[i].se = y.v[i].fi;
        }
        if( y.v[i].se < z.v[i].fi ){
            z.v[i].se = z.v[i].fi;
            z.v[i].fi = y.v[i].se;
        }else if( y.v[i].se < z.v[i].se ){
            z.v[i].se = y.v[i].se;
        }
    }
    return z;
}

void build( int x , int l , int r )
{
    if( l == r ){
        t[x].node();
        upd( t[x] , a[l] );
        return;
    }
    int m = (l + r) / 2;
    build( x * 2 , l , m );
    build( x * 2 + 1 , m + 1 , r );
    t[x] = comb( t[x * 2] , t[x * 2 + 1] );
}

void upd( int x , int l , int r , int p , int val )
{
    if( l == r ){
        t[x].node();
        upd( t[x] , val );
        return;
    }
    int m = (l + r) / 2;
    if( m >= p )upd( x * 2 , l , m , p , val );
    else upd( x * 2 + 1 , m + 1 , r , p , val );
    t[x] = comb( t[x * 2] , t[x * 2 + 1] );
}

foo get( int x , int l , int r , int tl , int tr )
{
    if( tl > tr ){
        foo z;
        z.node();
        return z;
    }
    if( l == tl && r == tr ){
        return t[x];
    }
    int m = (l + r) / 2;
    return comb( get( x * 2 , l , m , tl , min(tr , m) ) ,
                get( x * 2 + 1 , m + 1 , r , max(tl , m + 1) , tr ) );
}

void solve1()
{
    cin >> n >> q;
    for( int i = 1; i <= n; i++ ){
        cin >> a[i];
    }
    build( 1 , 1 , n );
    for( int i = 1; i <= q; i++ ){
        int tp,l,r;
        cin >> tp >> l >> r;
        if( tp == 1 ){
            upd( 1 , 1 , n , l , r );
        }else{
            auto x = get( 1 , 1 , n , l , r );
            int ans = mod + mod;
            for( int j = 0; j < 10; j++ ){
                if( x.v[j].fi != mod && x.v[j].se != mod )ans = min( ans , x.v[j].fi + x.v[j].se );
            }
            if( ans == mod + mod )ans = -1;
            cout << ans << "\n";
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0); srand(time(0));
    //freopen( "input.txt" , "r" , stdin );
    //freopen( "output.txt" , "w" , stdout );

    int cghf = 1;//cin >> cghf;
    while( cghf-- ){
        solve1();
    }
}
