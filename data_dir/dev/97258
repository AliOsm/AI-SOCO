#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cstring>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <utility>
using namespace std;
#define REP(I,N) for (I=0;I<N;I++)
#define rREP(I,N) for (I=N-1;I>=0;I--)
#define rep(I,S,N) for (I=S;I<N;I++)
#define rrep(I,S,N) for (I=N-1;I>=S;I--)
#define FOR(I,S,N) for (I=S;I<=N;I++)
#define rFOR(I,S,N) for (I=N;I>=S;I--)
typedef unsigned long long ULL;
typedef long long LL;
const int INF=0x3f3f3f3f;
const LL INFF=0x3f3f3f3f3f3f3f3fll;
const LL M=1e9+7;
const LL maxn=1e5+7;
const double eps=0.00000001;
LL gcd(LL a,LL b){return b?gcd(b,a%b):a;}
template<typename T>inline T abs(T a) {return a>0?a:-a;}
template<typename T>inline T powMM(T a,T b){T ret=1;for (;b;b>>=1ll,a=a*a%M) if (b&1) ret=1ll*ret*a%M;return ret;}

LL m,val,k;
LL dp[11][70][1024][2];
int n;
int a[70];
LL calc(int k,int cnt,int now,bool ok,bool mark){
	if (cnt==0) return ok&&!now;
	LL ret=0,i;
	if (!mark){
		if (dp[k][cnt][now][ok]!=-1) return dp[k][cnt][now][ok];
		FOR(i,0,k-1){
			bool nxtok=(ok||i);
			int nxtnow=now;if (nxtok) nxtnow^=1<<i;
			ret+=calc(k,cnt-1,nxtnow,nxtok,0);
		}
		dp[k][cnt][now][ok]=ret;
	}else{
		FOR(i,0,a[cnt]){
			bool nxtok=(ok||i),nxtmark=(i==a[cnt]);
			int nxtnow=now;if (nxtok) nxtnow^=1<<i; 
			ret+=calc(k,cnt-1,nxtnow,nxtok,nxtmark);
		}
	}
//	printf("%d,%d,%d,%d,%d\n",cnt,now,ok,mark,ret);
	return ret;
}
int cnt;
LL solve(int k,LL x){
	cnt=0;
	while (x){
		a[++cnt]=x%k;
		x/=k;
	}
	return calc(k,cnt,0,0,1);
}
int main(){
	int i,j,k,t;
	memset(dp,0xff,sizeof(dp));
	int T;
	scanf("%d",&T);
	while (T--) {
		LL l,r;
		scanf("%d%I64d%I64d",&k,&l,&r);
//		printf("%d->%d\n",solve(k,r),solve(k,l-1));
		printf("%I64d\n",solve(k,r)-solve(k,l-1));
	}
}
/*
100
7 725 801


*/