#include <bits/stdc++.h>

using namespace std;

int n, m;
int comps;

const int MaxN = 1e5 + 15;

vector <int> v[MaxN];
vector <pair<int, int> > re[2][MaxN];
vector <pair<int, int> > e[2][MaxN];
int color[2][MaxN];
bool used[2][MaxN];
vector <pair<int, int> > order;
int c[MaxN];

void dfs(int h, int x)
{
    used[h][x] = 1;
    for(int i = 0; i < e[h][x].size(); ++i)
    {
        re[e[h][x][i].first][e[h][x][i].second].push_back(make_pair(h, x));
        if(!used[e[h][x][i].first][e[h][x][i].second])
            dfs(e[h][x][i].first, e[h][x][i].second);
    }
    order.push_back(make_pair(h, x));
}

void dfs2(int h, int x)
{
    color[h][x] = comps;
    for(int i = 0; i < re[h][x].size(); ++i)
    {
        if(!color[re[h][x][i].first][re[h][x][i].second])
            dfs2(re[h][x][i].first, re[h][x][i].second);
    }
}

int main()
{
    ios_base :: sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> m;
    for(int i = 1; i <= n; ++i)
        cin >> c[i];
    for(int i = 1; i <= m; ++i)
    {
        int k;
        cin >> k;
        for(int j = 1; j <= k; ++j)
        {
            int x;
            cin >> x;
            v[x].push_back(i);
        }
    }
    for(int i = 1; i <= n; ++i)
        if(c[i] == 0)
        {
            e[0][v[i][0]].push_back(make_pair(1, v[i][1]));
            e[1][v[i][1]].push_back(make_pair(0, v[i][0]));

            e[0][v[i][1]].push_back(make_pair(1, v[i][0]));
            e[1][v[i][0]].push_back(make_pair(0, v[i][1]));
        }else
        {
            e[0][v[i][0]].push_back(make_pair(0, v[i][1]));
            e[0][v[i][1]].push_back(make_pair(0, v[i][0]));

            e[1][v[i][0]].push_back(make_pair(1, v[i][1]));
            e[1][v[i][1]].push_back(make_pair(1, v[i][0]));
        }
    for(int j = 0; j <= 1; ++j)
        for(int i = 1; i <= m; ++i)
            if(!used[j][i])
                dfs(j, i);
    reverse(order.begin(), order.end());
    for(int i = 0; i < order.size(); ++i)
    {
        if(!color[order[i].first][order[i].second])
        {
            ++comps;
            dfs2(order[i].first,order[i].second);
        }
    }
    for(int i = 1; i <= m; ++i)
        if(color[0][i] == color[1][i])
        {
            cout << "NO\n";
            return 0;
        }
    cout << "YES\n";
}
