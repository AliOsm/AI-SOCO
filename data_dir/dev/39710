#include <bits/stdc++.h>

using namespace std;

const int N = 400005;

int n, a[N];

int cnt[N];

int main() {

	scanf("%d", &n);

	for(int i = 0; i < n; i++) scanf("%d", a + i);

	sort(a, a + n);

	priority_queue<pair<int, int>> q;
	for(int i = 0; i < n; i++) {
		int j = i;
		while(j + 1 < n and a[j + 1] == a[i]) j++;

		for(int k = i; k <= j; k++) {
			cnt[k - i + 1]++;
		}
		q.emplace(j - i + 1, a[i]);

		i = j;
	}

	int p = 1, area = cnt[1];

	for(int cand = 2, sum = cnt[1]; cand <= n; cand++) {
		sum += cnt[cand];
		int columns = sum / cand;
		if(cand > columns) break;
		if(cand * columns > area) {
			area = cand * columns;
			p = cand;
		}
	}

	printf("%d\n", area);
	printf("%d %d\n", p, area / p);

	vector<vector<int>> ans(p, vector<int>(area / p, 0));

	for(int put = area, i = -1, j = -1; put > 0 and !q.empty(); ) {
		int c, val;
		tie(c, val) = q.top();
		q.pop();
		if(c > p) c = p;
		while(c--) {
			if(put == 0) break;
			i++, j++;
			if(i >= (int)ans.size()) i = 0;
			if(j >= (int)ans[i].size()) j = 0;
			while(ans[i][j]) i++;
			ans[i][j] = val;
			put--;
		}
	}

	for(int i = 0; i < p; i++) {
		for(int j = 0; j < (int)ans[i].size(); j++) {
			printf("%d%c", ans[i][j], " \n"[j + 1 == (int)ans[i].size()]);
		}
	}
}
