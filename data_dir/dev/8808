/*
digu_J - Digvijay Janartha
NIT Hamirpur - INDIA
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#pragma GCC optimize("O3")

using namespace std;
using namespace __gnu_pbds;

template < typename T > using ordered_set = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;
template < typename T > using MinPriorityQueue = priority_queue < T, vector < T >, greater < T > >;

#ifndef ONLINE_JUDGE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template < typename Arg1 >
void __f(const char* name, Arg1&& arg1) {
    cout << name << " : " << arg1 << std :: endl;
}
template < typename Arg1, typename... Args >
void __f(const char* names, Arg1&& arg1, Args&&... args) {
    const char* comma = strchr(names + 1, ',');
    int len = comma - names;
    for (int i = 0; i < len; ++i) {
        cout << names[i];
    }
    cout <<  " : " << arg1 << " | ";
    __f(comma + 1, args...);
}
#else
#define trace(...)
#endif

typedef double db;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair < ll, ll > pll;
typedef pair < int, int > pii;
typedef vector < ll > vll;
typedef vector < int > vi;
typedef gp_hash_table < int, int > fast;

#define eb emplace_back
#define pb push_back
#define F first
#define S second
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define unique_sort(x) (sort(x.begin(), x.end()), x.resize(distance(x.begin(), unique(x.begin(), x.end()))))
#define fast_io() ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0)

const ll LINF = LLONG_MAX, base = 1e9, MOD = 1e9 + 7, N = 2e5 + 5, M = 1e3 + 5;
const int INF = INT_MAX;
const db PI = acos(-1), EPS = 1 / db(1e6);

mt19937_64 rang(chrono::high_resolution_clock::now().time_since_epoch().count());

int n, m;
ll a[N], t[4 * N], lazy[4 * N];

void test();
void build(int v, int tl, int tr);
ll query(int v, int tl, int tr, int l, int r);
void update(int v, int tl, int tr, int l, int r, ll val);
void push(int v);

int main() {
    fast_io();
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    cout << fixed << setprecision(15);
    test();
    #ifndef ONLINE_JUDGE
        cout << "Time: " << (int)(clock() * 1000. / CLOCKS_PER_SEC) << "ms";
    #endif
    return 0;
}

void test() {
    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    cin >> m;
    build(1, 0, n - 1);
    string s;
    getline(cin, s);
    while (m--) {
        getline(cin, s);
        int l = -1, r = -1;
        ll val = INF;
        string temp;
        for (auto &x: s) {
            if (x == ' ') {
                if (l == -1) {
                    l = stoi(temp);
                    temp.clear();
                } else if (r == -1) {
                    r = stoi(temp);
                    temp.clear();
                }
            } else if ((x >= '0' and x <= '9') or (x == '-')) {
                temp += x;
            }
        }
        if (r == -1) {
            r = stoi(temp);
        } else {
            val = stoll(temp);
        }
        if (val != INF) {
            if (l > r) {
                update(1, 0, n - 1, 0, r, val);
                update(1, 0, n - 1, l, n - 1, val);
                continue;
            }
            update(1, 0, n - 1, l, r, val);
        } else {
            if (l > r) {
                cout << min(query(1, 0, n - 1, 0, r), query(1, 0, n - 1, l, n - 1)) << "\n";
                continue;
            }
            cout << query(1, 0, n - 1, l, r) << "\n";
        }
    }
}

void push(int v) {
    int u = 2 * v;
    t[u] += lazy[v];
    lazy[u] += lazy[v];
    t[u + 1] += lazy[v];
    lazy[u + 1] += lazy[v];
    lazy[v] = 0;
}

void build(int v, int tl, int tr) {
    if (tl == tr) {
        t[v] = a[tl];
    } else {
        int tm = (tr + tl) / 2, u = 2 * v;
        build(u, tl, tm);
        build(u + 1, tm + 1, tr);
        t[v] = min(t[u], t[u + 1]);
    }
}

ll query(int v, int tl, int tr, int l, int r) {
    if (tl > r or tr < l) {
        return LINF;
    }
    if (l <= tl and r >= tr) {
        return t[v];
    }
    push(v);
    int tm = (tl + tr) / 2, u = 2 * v;
    return min(query(u, tl, tm, l, r), query(u + 1, tm + 1, tr, l, r));
}

void update(int v, int tl, int tr, int l, int r, ll val) {
    if (l > r) {
        return;
    }
    if (tl == l and tr == r) {
        t[v] += val;
        lazy[v] += val;
    } else {
        push(v);
        int tm = (tl + tr) / 2, u = 2 * v;
        update(u, tl, tm, l, min(r, tm) ,val);
        update(u + 1, tm + 1, tr, max(l, tm + 1), r, val);
        t[v] = min(t[u], t[u + 1]);
    }
}
