/*#include <cstdio>
#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <ctime>
#include <cassert>
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <cstdlib>
#include <cmath>
#include <unordered_set>
#include <unordered_map>*/
#include <bits/stdc++.h>

using namespace std;

#define fr first
#define sc second
#define mp make_pair
#define pb push_back
#define left sdfadf
#define right asdf

#define epr(...) fprintf(stderr, __VA_ARGS__)
#define dbg(x) { cerr << #x << " = " << x << endl; }
const int N = 1e6 + 10;
const int INF = 1e9;

int n;
int a[N];
int mxSuf;
map < int, int > bal;
long long ans;
int cntNeg;
int b[N];
int left, right;

void read() {
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
        scanf("%d", &a[i]);
}

void add(int x) {
    if (bal[-x] > 0) {
        bal[-x]--;
        cntNeg--;
    }
    else {
        bal[x]++;
    }
}

void erase(int x) {
    if (bal[x] > 0) {
        bal[x]--;
    }
    else {
        bal[-x]++;
        cntNeg++;
    }
}

int mirror(int x) {
    return n - x - 1;
}

void nextStep1() {
    if (left <= mirror(right)) {
        add(a[right]);
        add(a[right]);
    }
    else {
        add(a[right]);
        erase(a[mirror(right)]);
    }
    right++;
}

void nextStep2() {
    add(a[right]); 
    erase(a[mirror(right)]);
    right++;
}

void solve() {
    int lastLeft = n / 2;
    int firstRight = (n + 1) / 2; 
    for (int i = 0; i < n; i++)
        b[a[i]]++;
    int cntOdd = 0; 
    for (int i = 1; i <= n; i++)
        cntOdd += b[i] % 2;
    if (cntOdd != n % 2) {
        printf("0\n");
        exit(0);
    }

    mxSuf = 0;
    ans = 0;
    for (; mxSuf < lastLeft && a[mxSuf] == a[n - mxSuf - 1]; mxSuf++);
    cntNeg = 0;
    bal.clear();
    for (int i = 0; i < lastLeft + 1; i++)
        add(a[i]);
    for (int i = lastLeft + 1; i < n; i++) 
        erase(a[i]);

    right = lastLeft + 1; 
    for (left = 0; left < firstRight; left++) {
        //cerr << "cntNeg: " << cntNeg << endl;
        while (right <= n) {
            int mnSuf = min(left, n - right);
            if (mnSuf > mxSuf || cntNeg > 0) {
                nextStep1();
                continue;
            }
            break;
        }
        //cerr << "right: " << right << endl;
        ans += n - right + 1;
        //cerr << "ans: " << ans << endl;
        if (left <= mirror(right))  {
            erase(a[left]);
            add(a[mirror(left)]);
        }
        else {
            erase(a[left]);
            erase(a[left]);
        }
    }
    //cerr << "-------------: " << ans << endl;
    int mxC = 0;
    for (; firstRight + mxC < n && a[firstRight + mxC] == a[mirror(firstRight + mxC)]; mxC++);
    int tmp = mirror(firstRight + mxC) + 1;

    //cerr << "tmp: " << tmp << endl;
    //cerr << "mxSuf: " << mxSuf << endl;


    long long ans2 = 0;
    bal.clear();
    cntNeg = 0;
    right = 0;
    for (left = 0; left <= mxSuf; left++) {
        while (right <= lastLeft) {
            //cerr << "cntNeg: " << cntNeg << endl;
            if (right < tmp || cntNeg > 0 || left >= right) {
                nextStep2(); 
                continue;
            } 
            break;
        }            
        //cerr << "right: " << right << endl;
        ans2 += lastLeft - right + 1;
        erase(a[left]);
        add(a[mirror(left)]);  
    }  
    //cerr << "ans2: " << ans2 << endl;
    ans += ans2 * 2;
        //reverse(a, a + n);
    //}
}

void printAns() {
    printf("%lld\n", ans);
}

void stress() {

}


int main(){
#ifdef DEBUG
    freopen("in", "r", stdin);
    //freopen("out", "w", stdout);
#endif
/*    int n;
    scanf("%d", &n);
    vector < pair < int, int > > a(n);
    vector < int > b(n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &a[i].fr);
        a[i].sc = i;
    }
    sort(a.begin(), a.end());
    int cur = 0;
    for (int i = 0; i < n;) {
        int j = i;
        for (; i < n && a[j].fr == a[i].fr; i++) 
            b[a[i].sc] = cur;
        cur++;
    }
    printf("%d\n", n);
    for (int i = 0; i < n; i++)
        printf("%d ", b[i]);
    printf("\n"); */
    //exit(0); 

    if (1) {
        while (true) {
            read();
            solve();
            printAns();
            return 0;
        }
    }
    else {
        stress();
    }

    return 0;
}

