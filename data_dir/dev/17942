#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <int , int> pii;

const int N = 2e5+10 , mod = 1e9+7;

int ans[N] , st[N] , ft[N] , nw , n , seg[4 * N] , cnt[4 * N];
vector <int> g[N] , q[N];

void pre_dfs(int v , int p){
   st[v] = nw++;
   for(int u : g[v])
      if(u != p)
         pre_dfs(u , v);
   ft[v] = nw;
}

void add(int s , int e , int ind , int l , int r , int val){
   if(s >= r || e <= l)
      return;
   if(s >= l && e <= r){
      cnt[ind] += val;
      if(cnt[ind] == 1 && val == 1)
         seg[ind] = e - s;
      else if(cnt[ind] == 0)
         seg[ind] = seg[2 * ind] + seg[2 * ind + 1];
      return;
   }
   int mid = (s + e) / 2;
   add(s , mid , 2 * ind , l , r , val);
   add(mid , e , 2 * ind + 1 , l , r , val);
   if(cnt[ind])
      seg[ind] = e - s;
   else
      seg[ind] = seg[2 * ind] + seg[2 * ind + 1];
}

void dfs(int v , int p){
   for(int u : q[v])
      add(0 , n , 1 , st[u] , ft[u] , 1);
   if(q[v].size())
      add(0 , n , 1 , st[v] , ft[v] , 1);
   ans[v] = seg[1];
   for(int u : g[v])
      if(u != p)
         dfs(u , v);
   for(int u : q[v])
      add(0 , n , 1 , st[u] , ft[u] , -1);
   if(q[v].size())
      add(0 , n , 1 , st[v] , ft[v] , -1);
}

int32_t main(){
   ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
   int m;
   cin >> n >> m;
   for(int i = 0 ; i < n - 1 ; i++){
      int u , v;
      cin >> u >> v;
      u--; v--;
      g[u].push_back(v);
      g[v].push_back(u);
   }
   for(int i = 0 ; i < m ; i++){
      int u , v;
      cin >> u >> v;
      u--; v--;
      q[u].push_back(v);
      q[v].push_back(u);
   }
   pre_dfs(0 , 0);
   dfs(0 , 0);
   for(int i = 0 ; i < n ; i++){
      int add = 0;
      if(ans[i])
         add = -1;
      cout << ans[i] + add << " ";
   }
   return 0;
}
