#include <bits/stdc++.h>

#define all(x) (x).begin(), (x).end()

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

typedef long long ll;
typedef pair<int, int> ii;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 1 << 18;

int a[N];
int lf[N];
int rg[N];

int st[N], push = 0;

vector<int> out[N];
multiset<int> s;

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    int n = read();

    for(int i = 1; i <= n; i++){
        a[i] = read();
    }

    push = 0;
    for(int i = 1; i <= n; i++){
        while(push > 0 && a[st[push]] >= a[i])
            push--;
        lf[i] = push? st[push] + 1 : 1;
        st[++push] = i;
    }

    push = 0;
    for(int i = n; i > 0; i--){
        while(push > 0 && a[st[push]] >= a[i])
            push--;
        rg[i] = push? st[push] - 1 : n;
        st[++push] = i;
    }

    for(int i = 1; i <= n; i++){
        int len = rg[i] - lf[i] + 1;
        eprintf("lf = %d, rg = %d\n", lf[i], rg[i]);
        out[len + 1].push_back(a[i]);
    }

    for(int i = 1; i <= n; i++){
        s.insert(a[i]);
    }

    for(int i = 1; i <= n; i++){
        for(int x : out[i])
            s.erase(s.find(x));
        assert(s.size());
        printf("%d ", *s.rbegin());
    }

    return 0;
}
