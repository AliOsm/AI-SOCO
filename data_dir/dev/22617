#include <bits/stdc++.h>

using namespace std;

priority_queue<int>pq[3000+5];
vector<int>level[3000+5];
multiset<int>st;

int main(){

    int n,m;
    scanf("%d %d",&n,&m);

    int maxHeight=0;
    for(int i=1,p,c;i<=n;i++){
        scanf("%d %d",&p,&c);
        pq[p].push(c);
        maxHeight=max(maxHeight,(int)pq[p].size());
    }

    for(int j=1;j<=3000;j++){
        for(int i=2,frnt;i<=m;i++){
            if(!pq[i].empty()){
                level[j].push_back(pq[i].top());
                st.insert(pq[i].top());
                pq[i].pop();
            }
        }
        sort(level[j].begin(),level[j].end());
    }

    if(!level[maxHeight].size()){
        printf("0\n");
        return 0;
    }

    int upHeight=maxHeight+1;
    int downHeight=(int)pq[1].size();

    long long res=LLONG_MAX;
    long long sum=0;
    while(upHeight>=downHeight){
        for(int i=0;i<level[upHeight].size();i++){
            sum+=(long long)level[upHeight][i];
            downHeight+=1;

            //lesson learned
            st.erase(st.find(level[upHeight][i]));


            if(downHeight>upHeight)res=min(res,sum);
        }

        long long addExtra=sum;
        int rem=max(upHeight-downHeight,0);

        for(multiset<int>::iterator it=st.begin();it!=st.end() && rem;it++){
            addExtra+=(long long)*it;
            rem-=1;
        }
        res=min(res,addExtra);
        upHeight-=1;
    }
    printf("%lld\n",res);

    return 0;
}
