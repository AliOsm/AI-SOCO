#pragma comment(linker, "/STACK:536870912")
#pragma warning(disable:4996)

//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include<iostream>
#include<algorithm>
#include<queue>
#include<string>
#include<vector>
#include<map>
#include<list>
#include<set>
#include<cstring>
#include<ctime>
#include<cassert>
#include<cmath>
#include<limits>
#include<iterator>
#include<functional>
#include<unordered_map>
#include<unordered_set>
#include<stack>
#include<bitset>
#include<complex>

#define all(v) v.begin(), v.end()
#define setv(ar, val) memset(ar, val, sizeof(ar));
#define ll long long int
#define ld long double
#define ull unsigned long long int
#define PI 3.1415926535897932384626433832795
using namespace std;

const int N = 1e5 + 100, M = 1e7 + 100, INF = 2e9 + 100;
pair<int, int> g[N];
int len, n, p, t;
int dp[N][105], b[N], tr[M];

void upd(int x, int d) {
	x = M - 1 - x;
	for (; x < M; x |= x + 1)
		tr[x] = min(tr[x], d);
}

int que(int x) {
	x = M - 1 - x;
	int ans = INF;

	for (; x >= 0; x = (x & (x + 1)) - 1)
		ans = min(ans, tr[x]);

	return ans;
}

int smallP() {
	for (int i = 0; i < n; i++) {
		b[i] = 0;
		for (int j = 0; j < p; j++)
			dp[i][j] = 0;
	}

	for (int i = 0; i < n; i++) {
		b[i + 1] = max(b[i + 1], b[i]);
		int rest = (g[i].second - g[i].first) % p;
		dp[i][rest] = max(dp[i][rest], b[i] + (g[i].second - g[i].first) / p);
		for (int j = p - 1; j >= 0; j--) {
			int x = g[i].second - j + t,
				q = upper_bound(g, g + n, make_pair(x, len)) - g - 1;
			b[q + 1] = max(b[q + 1], dp[i][j]);
			if (x <= g[q].second) {
				int nr = (g[q].second - x) % p;
				dp[q][nr] = max(dp[q][nr], dp[i][j] + (g[q].second - x) / p);
			}
		}
	}
	int ans = 0;
	for (int i = 0; i < n; i++) {
		ans = max(ans, b[i]);
		for (int j = 0; j < p; j++)
			ans = max(ans, dp[i][j]);
	}
	return ans;
}

int bigP() {
	for (int i = 0; i < M; i++)
		tr[i] = INF;

	upd(0, 0);

	for (int i = 0, q = 0; i < M - 1; i++) {
		int x = que(i);
		if (x == INF)
			break;

		int k;
		while (q < n && g[q].first <= (k = que(i + 1))) {
			int c = max(0, g[q].second - max(x, g[q].first)) / p;
			upd(i + c, max(x, g[q].first) + c * p + t);
			if (g[q].second > k)
				break;
			q++;
		}
	}

	int ans = M - 1;
	while (que(ans) == INF)
		ans--;

	return ans;
}


int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	scanf("%d%d%d%d", &len, &n, &p, &t);

	
	for (int i = 0; i < n; i++)
		scanf("%d%d", &g[i].first, &g[i].second);
	printf("%d\n", p < 100 ? smallP() : bigP());










	return 0;
}