#include <bits/stdc++.h>

using namespace std;


int main() {
  #ifdef LOCAL
  freopen("sol.in", "r", stdin);
  freopen("sol.out", "w+", stdout);
  #endif
  ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
  int n, A, cf, cm;
  long long m;
  scanf("%d %d %d %d %lld", &n, &A, &cf, &cm, &m);
  vector<pair<int, int>> a(n);
  for (int i = 0; i < n; i++) {
    scanf("%d", &a[i].first);
    a[i].second = i;
  }
  sort(a.begin(), a.end());
  a.emplace_back(A, n);
  reverse(a.begin(), a.end());
  vector<long long> b(n + 2);
  for (int i = n; i >= 0; i--) {
    b[i] = a[i].first + b[i + 1];
  }
  long long ans = 0;
  for (int i = 1; i <= n; i++) {
    if (a[i].first == A) {
      ans += cf;
    }
  }
  ans += a[n].first * 1LL * cm;
  int stop = -1, aim = -1;
  for (int i = 0; i <= n; i++) {
    m -= A - a[i].first;
    if (m <= 0) {
      break;
    }
    if (i == n) {
      long long res = i * 1LL * cf + A * 1LL * cm;
      if (ans < res) {
        ans = res;
        stop = i;
        aim = A;
      }
      break;
    }
    int low = a[n].first, high = A;
    while (low < high) {
      int x = (low + high + 1) >> 1;
      int low_2 = i + 1, high_2 = n;
      while (low_2 < high_2) {
        int mid_2 = (low_2 + high_2) >> 1;
        if (a[mid_2].first <= x) {
          high_2 = mid_2;
        } else {
          low_2 = mid_2 + 1;
        } 
      }
      long long need = (n - low_2 + 1) * 1LL * x - b[low_2];
      if (need <= m) {
        low = x;
      } else {
        high = x - 1;
      }
    }
    long long res = i * 1LL * cf + low * 1LL * cm;
    if (ans < res) {
      ans = res;
      stop = i;
      aim = low;
    }
  }
  if (stop > -1 && aim > -1) {
    for (int i = 1; i <= stop; i++) {
      a[i].first = A;
    }
    for (int i = stop + 1; i <= n; i++) {
      a[i].first = max(a[i].first, aim);
    }
  }
  vector<int> skills(n);
  for (int i = 1; i <= n; i++) {
    skills[a[i].second] = a[i].first;
  }
  printf("%lld\n", ans);
  for (int i = 0; i < n; i++) {
    printf("%d ", skills[i]);
  }
  puts("");
  return 0;
}