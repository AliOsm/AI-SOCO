#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi; 
 
#define xx first
#define INF 1e18
#define yy second
#define mp make_pair
#define pb push_back
#define PI acos(-1.0)
#define all(c) c.begin(), c.end()
 
 
ll powd( ll a, ll b, ll mod ){
	ll res = 1LL;
	while( b ) {
		if( b & 1 )
			res = ( res*a ) % mod;
		a = ( a*a ) % mod;
		b /= 2;
	}
	return res;
}

ll dist[100005];
set < pair< ll, ll > > S;
vector < pair < int , ll > > graph[100005];
int p[100005];

int main(){
	int test;
	//scanf("%d",&test);
	test = 1;
	while( test-- ){
		for( int i=0;i<100005;i++){
			dist[i] = INF;
			graph[i].clear();
		}
		memset( p, -1, sizeof p );
		S.clear();
		int n, m, start;
		scanf("%d%d",&n,&m);
		for( int i=0;i<m;i++){
			int u, v, w;
			scanf("%d%d%d",&u,&v,&w);
			graph[u].pb( mp( v, (ll)w ));
			graph[v].pb( mp( u, (ll)w ));
		}
		//scanf("%d",&start);
		start = 1;
		dist[ start ] = 0;
		S.insert( mp( dist[start], start ));
		while( !S.empty()){
			int u = S.begin()->yy; 
			ll cost = S.begin()->xx;
			S.erase( S.begin());
			for( int i=0;i<(int)graph[u].size();i++){
				int v = graph[u][i].xx;
				ll w = graph[u][i].yy;
				if( dist[v] > w + cost ){
					S.erase( mp( dist[v], v ));
					dist[v] = w + cost;
					S.insert( mp( dist[v], v ));
					p[v] = u;
				}
			}
		}
		if( dist[n] == INF ){
			cout << -1 << endl;
		}
		else{
			vi ans;
			int idx = n;
			ans.pb( n );
			while( start != p[idx] ){
				ans.pb( p[idx] );
				idx = p[idx];
			}
			ans.pb( start );
			reverse( all( ans ));
			for( int i=0;i<(int)ans.size();i++){
				printf("%d ",ans[i]);
			}
		}
	}
	return 0;
}


/*
1
4 4
1 2 24
1 4 20
3 1 3
4 3 12
1 
*/
