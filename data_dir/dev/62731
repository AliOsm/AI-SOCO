

// ~/BAU/ACM-ICPC/Teams/A++/BlackBurn95
// ~/sudo apt-get Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

const int N = 600;
vector<pair<int, int> > b;
int n, dp[N][N], best[N][N];

int calc(int i, int j) {
	if (i > j)
		return 1;

	int &r = dp[i][j];

	if (r != -1)
		return r;

	r = 0;
	int x, y;

	for (int c = 0; c <= (j - i); c++)
		if (2 * c + 1 >= b[i].first && 2 * c + 1 <= b[i].second) {
			x = calc(i + 1, i + c), y = calc(i + c + 1, j);

			if (x && y) {
				best[i][j] = c;
				r = 1;
				break;
			}
		}

	return r;
}

string solve(int i, int j) {
	if (i > j)
		return "";

	string ans = "(";
	ans += solve(i + 1, i + best[i][j]);
	ans += ")";
	ans += solve(i + best[i][j] + 1, j);

	return ans;
}

int main() {

#ifdef LOCAL
	freopen("input.txt", "r", stdin);
#endif
	
	scanf("%d", &n);
	for (int i = 0, l, r; i < n; i++) {
		scanf("%d%d", &l, &r);
		b.push_back(make_pair(l, r));
	}

	memset(dp, -1, sizeof(dp));

	bool f = calc(0, n - 1);
	
	if (!f) {
		puts("IMPOSSIBLE");
		return 0;
	}

	printf("%s\n", solve(0, n - 1).c_str());

	return 0;
}
