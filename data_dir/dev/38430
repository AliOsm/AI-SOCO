#include <bits/stdc++.h>

using namespace std;

const int N = 2005;
const int MAX = 1234567;
const int mod = (int) 1e9 + 7;

int h, w, n;
vector<pair<int, int>> block;
int dp[N];
int fact[MAX], ifact[MAX];

int sub(int a, int b) {
  int ret = a - b;
  if (ret < 0) ret += mod;
  return ret;
}

int mul(int a, int b) {
  int ret = (long long) a * b % mod;
  return ret;
}

int power(int x, int e) {
  int ret = 1;
  int res = x;
  while (e) {
    if (e & 1) ret = mul(ret, res);
    res = mul(res, res);
    e >>= 1;
  }
  return ret;
}

int inv(int x) {
  return power(x, mod - 2);
}

int c(int n, int k) {
  int ret = fact[n];
  ret = mul(ret, ifact[n - k]);
  ret = mul(ret, ifact[k]);
  return ret;
}

int main() {
  scanf("%d %d %d", &h, &w, &n);
  fact[0] = 1;
  ifact[0] = 1;
  for (int i = 1; i < MAX; i++) {
    fact[i] = mul(i, fact[i - 1]);
    ifact[i] = mul(inv(i), ifact[i - 1]);
  }
  for (int i = 0; i < n; i++) {
    int x, y; scanf("%d %d", &x, &y); x--, y--;
    block.push_back(make_pair(x, y));
  }
  block.push_back(make_pair(h - 1, w - 1));
  sort(block.begin(), block.end());
  for (int i = 0; i < (int) block.size(); i++) {
    pair<int, int> cur = block[i];
    int x = cur.first, y = cur.second;
    dp[i] = c(x + y, x);
  }
  for (int i = 0; i < (int) block.size(); i++) {
    pair<int, int> cur = block[i];
    int xi = cur.first, yi = cur.second;
    for (int j = 0; j < i; j++) {
      pair<int, int> prv = block[j];
      int xj = prv.first, yj = prv.second;
      if (yj > yi) continue;
      assert(xj <= xi);
      dp[i] = sub(dp[i], mul(dp[j], c(xi - xj + yi - yj, xi - xj)));
    }
  }
  printf("%d\n", dp[n]);
  return 0;
}