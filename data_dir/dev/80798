#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<bool, int> pbi;

const int N = 3e5 + 10;
vector<int> adj[N];
int col[N], comp[N], cnt[] = {0, 0};

bool dfs(int root, int c) {
    bool res = true;
    col[root] = c;
    cnt[col[root] - 1]++;
    for (int i = 0; i < adj[root].size(); i++) {
        int u = adj[root][i];
        if (col[u] == col[root]) 
            res = false;
        else if (!col[u]) {
            res &= dfs(u, 3 - c);
        }
    }
    return res;
}

int main() {
    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
    int n, m, u, v;
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        cin >> u >> v;
        adj[--u].push_back(--v);
        adj[v].push_back(u);
    }
    bool flag = true;
    vector<int> sz;
    for (int i = 0; i < n; i++)
        if (!col[i]) {
            cnt[0] = cnt[1] = 0;
            flag &= dfs(i, 1);
            sz.push_back(cnt[0]);
            sz.push_back(cnt[1]);
        }
    if (!flag) {
        cout << "0 1\n";
        return 0;
    }
    int mx = 0;
    for (int i = 0; i < n; i++)
        mx = max(mx, (int)adj[i].size());
    mx = min(mx, 2);
    if (mx == 0)
        cout << "3 " << 1LL * n * (n - 1) * (n - 2) / 6 << "\n";
    else if (mx == 1)
        cout << "2 " << 1ll * m * (n - 2) << "\n";
    else {
        ll sum = 0;
        for (int i = 0; i < sz.size(); i++) {
            sum += 1ll * sz[i] * (sz[i] - 1) / 2;
        }
        cout << "1 " << sum << "\n";
    }
    return 0;
}