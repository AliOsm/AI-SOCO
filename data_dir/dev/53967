#include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define F first
#define S second
#define ll long long
#define pb push_back
const int MX=2e5+11, mxLog=30;
int N, M, k;
int arr[MX];
struct node
{
    int to[2], val;
    node() {
        memset(to, -1, sizeof to);
        val=0;
    }
};
vector<node> v;
void add(int x)
{
    int cur=0;
    for(int i=mxLog;i>=0;i--) {
        int bit=x&(1<<i);
        if(bit) bit=1;
        if(v[cur].to[bit] == -1) {
            v[cur].to[bit]=v.size();
            v.pb(node());
        }
        cur = v[cur].to[bit];
    }
}
int explore(int cur, int bit=mxLog)
{
    if(bit  == -1 ) return 0;
    ll ret=0, has=0;
    for(int j=0;j<2;j++) {
        if(v[cur].to[j] != -1) {
            ret |= explore(v[cur].to[j], bit-1);
            ++has;
        }
    }
    if(has == 2) {
        ret |= (1<<bit);
    }
    return v[cur].val=ret;
}
ll get(int cur, int bit=mxLog)
{
    if(bit == -1) return 0;

    if(v[cur].to[0] == -1) {
        return  get(v[cur].to[1], bit-1);
    }
    else if(v[cur].to[1] == -1) {
        return get(v[cur].to[0], bit-1);
    }
    else {
        int L=v[cur].to[0], R=v[cur].to[1];
        return (1<<bit)+min(get(L, bit-1), get(R, bit-1));
    }
}
void solve()
{
    v.clear();
    v.pb(node());
    scanf("%d", &N);
    for(int i=1;i<=N;i++) {
        int x;
        scanf("%d", &x);
        add(x);
        arr[i]=x;
    }
    explore(0);
//    for(int i=0;i<v.size();i++) {
//        cout<<v[i].val<<" ";
//    } cout<<endl;
    ll ans=get(0);
//    ll ans=0;
//    for(int i=1;i<=N;i++) {
//        ans=max(ans, X^arr[i]);
//    }
    cout<<ans<<'\n';

}
int main()
{
    int t=1;
    while(t--) solve();
    return 0;
}
