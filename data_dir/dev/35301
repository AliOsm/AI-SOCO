#include <bits/stdc++.h>
using namespace std;
typedef long long i64;

const int NMAX = 5300;
int s[NMAX][NMAX];
int n;
vector <int> divz;
char rd[NMAX];

void read()
{
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) {
        scanf("%s", rd);
        for (int j = 1, c = 0; j < n; j += 4, c++) {
            int x = rd[c] - '0';
            if (rd[c] >= 'A' && rd[c] <= 'Z')
                x = rd[c] - 'A' + 10;
            s[i][j + 3] = (x & 1) / 1;
            s[i][j + 2] = (x & 2) / 2;
            s[i][j + 1] = (x & 4) / 4;
            s[i][j] = (x & 8) / 8;
        }
    }
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= n; j++)
            s[i][j] += s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1];
}

void get_div()
{
	for (int i = 2; i <= n; i++)
		if (n % i == 0)
			divz.push_back(i);
}

bool verif(int d)
{
    bool ok = 1;
    for (int i = d; i <= n; i += d) {
        for (int j = d; j <= n; j += d) {
            int sum = s[i][j] - s[i - d][j] - s[i][j - d] + s[i - d][j - d];
            ok &= (sum == 0 || sum == d * d);
        }
    }
    return ok;
}


int main()
{
    read();
    get_div();

    int ans = 1;
    reverse(divz.begin(), divz.end());

    for (auto i : divz) {
        if (verif(i)) {
            cout << i << '\n';
            return 0;
        }
    }

    cout << 1 << '\n';
    return 0;
	return 0;
}
