// KALAM
# include<bits/stdc++.h>

using namespace std;

const int N = 2000000 + 77;
int n , A;
int P[N] , Mx[N] , C[N] , a[N] , b[N];
vector < int > V;
inline int GetId(int x){
   return lower_bound(V.begin() , V.end() , x) - V.begin() + 1;
}
int Find(int x){
   return P[x] == 0 ? x : (P[x] = Find(P[x]));
}
inline void Merge(int v , int u){
   v = Find(v);
   u = Find(u);
   if(v < u)
      swap(v , u);
   if(v == u){
      ++ C[v];
      return ;
   }
   C[v] += C[u];
   Mx[v] = max(Mx[v] , max(Mx[u] , u));
   P[u] = v;
}
int main(){
   scanf("%d" , & n);
   for(int i = 1;i <= n;++ i) {
      scanf("%d %d" , a + i , b + i);
      V.push_back(a[i]);
      V.push_back(b[i]);
   }
   sort(V.begin() , V.end());
   V.resize(unique(V.begin() , V.end()) - V.begin());
   int sz = V.size();
   for(int i = 1;i <= n;++ i){
      a[i] = GetId(a[i]);
      b[i] = GetId(b[i]);
      Merge(a[i] , b[i]);
   }
   for(int i = 1;i <= sz;++ i)
      if(P[i] == 0){
         if(C[i] > 1)
            return ! printf("-1\n");
         if(C[i])
            A = max(A , max(V[i - 1] , V[Mx[i] - 1]));
         else
            A = max(A , V[Mx[i] - 1]);
      }
   printf("%d\n" , A);
	return 0;
}
