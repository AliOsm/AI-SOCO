#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <iterator>
#include <cmath>

using namespace std;

long long n, b;

struct Factor
{
	long long value;
	long long count;
};
Factor factors[20];
int szFactors;

Factor factFactors[20];	//�׳��а������������� 

void getFactors(long long num)
{
	long long d = 2;
	
	while (d * d <= num)
	{
		if (num % d == 0)
		{
			factors[szFactors].value = d;
			factors[szFactors].count = 0;
			while (num % d == 0)
			{
				num = num / d;
				factors[szFactors].count++;
			}
			szFactors++;
		}
		
		if (d == 2)
			d++;
		else
			d = d + 2;
	}
	
	if (num > 1)
	{
		factors[szFactors].value = num;
		factors[szFactors].count = 1;
		szFactors++;
	}
}

int main()
{
	scanf("%I64d%I64d", &n, &b);
	
	getFactors(b);
	
	for (int i = 0 ; i < szFactors ; i++)
	{
		long long dd = factors[i].value;
		factFactors[i].value = dd;
		factFactors[i].count = 0;
		
		long long d = dd;
		long long nn = n;
		
		while (nn > 0)
		{
			factFactors[i].count = factFactors[i].count + nn / d;
			nn = nn / d;
		}
	}
	
	long long realCount = -1;
	long long curCount;
	
	for (int i = 0 ; i < szFactors ; i++)
	{
		curCount = factFactors[i].count / factors[i].count;
		
		if (realCount == -1 || realCount > curCount)
			realCount = curCount;
	}
	
//	if (realCount == -1)
//		realCount = 0;
	
	printf("%I64d\n", realCount);
	
	return 0;
}



