#include <bits/stdc++.h>
#define base 1000000007LL
#define ll long long
#define ld double
#define X first
#define Y second
#define pb push_back
#define EPS 1e-9
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORE(i,a,b) for (int i = (a); i >= (b); i--)
#define FORALL(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
using namespace std;
typedef pair<int, int> II;
typedef pair<II, int> III;

struct point {
    ll x, y;
    int cs, type;
    point(ll x = 0, ll y = 0) : x(x), y(y) {}
    bool operator== (point& p) {
        return p.x == x && p.y == y;
    }
    bool operator< (const point &p) const {
        if (y == p.y) return x < p.x;
        return y < p.y;
    }
} a[100010];

bool cmp(point a, point b)
{
    if (a.x == b.x) return a.y < b.y;
    return a.x < b.x;
}

ll dist(point a, point b)
{
    return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);
}

int n;
set<point> box;

point to(point a, int type)
{
    if (type == 2) a.x = -a.x;
    else if (type == 3) a.y = -a.y;
    else if (type == 4) { a.x = -a.x; a.y = -a.y; }
    return a;
}

int main()
{
    ios::sync_with_stdio(0);
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    cin >> n;
    FOR(i,1,n) {
        cin >> a[i].x >> a[i].y;
        a[i].cs = i;
        if (a[i].x < 0 && a[i].y < 0) a[i].type = 4;
        if (a[i].x < 0 && a[i].y >= 0) a[i].type = 2;
        if (a[i].x >= 0 && a[i].y < 0) a[i].type = 3;
        if (a[i].x >= 0 && a[i].y >= 0) a[i].type = 1;
        a[i].x = abs(a[i].x);
        a[i].y = abs(a[i].y);
    }
    sort(a+1, a+n+1, cmp);
    ll best = 1000000000000000000LL;
    point c1, c2;
    box.insert(a[1]);
    int lef = 1;
    FOR(i,2,n) {
        while (lef < i && a[i].x - a[lef].x > sqrt(best)) box.erase(a[lef++]);
        for (set<point>::iterator it = box.lower_bound(point(0, (ll) ceil(a[i].y - sqrt(best)))); it != box.end() && it->y - a[i].y <= sqrt(best); it++) {
            ll dis = dist(*it, a[i]);
            if (dis < best) {
                c1 = *it;
                c2 = a[i];
                best = dis;
            }
        }
        box.insert(a[i]);
    }
    c1 = to(c1, c1.type);
    c2 = to(c2, c2.type);
    FOR(i,1,4)
        FOR(j,1,4) {
            point a = to(c1, i);
            point b = to(c2, j);
            point c(a.x+b.x, a.y+b.y);
            if (c.x * c.x + c.y * c.y == best) {
                cout << c1.cs << " " << i << " " << c2.cs << " " << j;
                return 0;
            }
        }
    return 0;
}
