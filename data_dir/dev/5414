#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <cmath>
#include <set>

using namespace std;

typedef long long int ll;

const ll infinite=1000000000000000000LL;

struct elem {
  ll u,d;
  elem() {}
  elem(ll u,ll d):u(u),d(d) {}
};

bool operator<(elem e1,elem e2)
{
  return e1.d>e2.d;
}

const int limit=1000000;


void maximize(ll &a,ll b)
{
  a=max(a,b);
}

int n,cases;
vector<pair<ll,ll> > g[limit];
int seen[limit];

void computedist(int uini,ll dist[limit])
{
  priority_queue<elem> q;
  for (int u=1;u<=n;u++)
    dist[u]=infinite;
  dist[uini]=0;
  q.push(elem(uini,0));
  while (not q.empty()) {
    elem e=q.top();
    q.pop();
    int u=e.u;
    ll d=e.d;
    if (dist[u]==d) {
      vector<pair<ll,ll> > &ar=g[u];
      for (int i=0;i<int(ar.size());i++) {
	int v=ar[i].first;
	ll duv=ar[i].second;
	if (dist[u]+duv<dist[v]) {
	  dist[v]=dist[u]+duv;
	  q.push(elem(v,dist[v]));
	}
      }
    }
  }
}

void write(ll v[limit])
{
  for (int i=1;i<=n;i++)
    cout<<v[i]<<",";
  cout<<endl;
}

ll dist[limit];
ll distinv[limit];
int indice[limit];

bool comparedist(int u,int v)
{
  return dist[u]>dist[v];
}

multiset<ll> conj;

void remove(ll x)
{
  multiset<ll>::iterator it=conj.find(x);
  conj.erase(it);
}

ll getmax()
{
  return *(conj.rbegin());
}

int main()
{
  //ios::sync_with_stdio(false);
  //cin>>n>>cases;
  scanf("%d%d",&n,&cases);
  for (int i=0;i<n-1;i++) {
    int u,v,c;
    //cin>>u>>v>>c;
    scanf("%d%d%d",&u,&v,&c);
    g[u].push_back(pair<ll,ll> (v,c));
    g[v].push_back(pair<ll,ll> (u,c));
  }
  computedist(1,dist);
  computedist(n,distinv);
  //write(dist);
  //write(distinv);
  for (int u=1;u<=n;u++)
    indice[u]=u;
  sort(indice+1,indice+(n+1),comparedist);
  ll sol=0;
  for (int i=1;i<=n;i++) {
    int u=indice[i];
    seen[u]=1;
    vector<pair<ll,ll> > &ar=g[u];
    for (int j=0;j<int(ar.size());j++) {
      int v=ar[j].first;
      if (seen[v]) remove(distinv[v]);
    }
    if (conj.size()) maximize(sol,dist[u]+getmax());
    for (int j=0;j<int(ar.size());j++) {
      int v=ar[j].first;
      if (seen[v]) conj.insert(distinv[v]);
    }
    conj.insert(distinv[u]);
  }
  for (int cas=0;cas<cases;cas++) {
    int inx;
    scanf("%d",&inx);
    ll x=inx;
    //cin>>x;
    //cout<<min(distinv[1],sol+x)<<endl;
    printf("%I64d\n",min(distinv[1],sol+x));
  }
}
