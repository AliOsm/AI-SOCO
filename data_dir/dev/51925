#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define N	100000
#define Q	100000
#define M	((N + 2) * 4 + Q * 2)
#define INF	0x3f3f3f3f

int min(int a, int b) { return a < b ? a : b; }

int st[M * 2]; int n_;

void update(int i, int x) {
	for (i += n_; i > 0; i >>= 1)
		st[i] = min(st[i], x);
}

int query(int l, int r) {
	int x = INF;

	for (l += n_, r += n_; l <= r; l >>= 1, r >>= 1) {
		if ((l & 1) == 1)
			x = min(x, st[l++]);
		if ((r & 1) == 0)
			x = min(x, st[r--]);
	}
	return x;
}

int yy[M];

int compare(const void *a, const void *b) {
	int i = *(int *) a;
	int j = *(int *) b;

	return yy[i] - yy[j];
}

int main() {
	static long long xx[N + 2], dp[N + 2];
	static int hh[M], tt[Q];
	int n, m, m_, q, a, b, c, h, i;

	scanf("%d%d%d", &n, &a, &b), c = a + b;
	for (i = 1; i < n + 2; i++) {
		scanf("%lld", &xx[i]);
		xx[i] += xx[i - 1];
	}
	scanf("%d", &q);
	for (h = 0; h < q; h++)
		scanf("%d", &tt[h]);
	m = 0;
	for (i = 0; i < n + 2; i++) {
		int l = (xx[i] + a) % c, r = (xx[i] - 1 + c) % c;

		if (l > r)
			r += c;
		yy[m++] = xx[i] % c, yy[m++] = xx[i] % c + c;
		yy[m++] = l, yy[m++] = r;
	}
	for (h = 0; h < q; h++) {
		int l = (c - tt[h] % c + a) % c, r = (c - tt[h] % c - 1) % c;

		if (l > r)
			r += c;
		yy[m++] = l, yy[m++] = r;
	}
	for (h = 0; h < m; h++)
		hh[h] = h;
	qsort(hh, m, sizeof *hh, compare);
	m_ = 0;
	for (h = 0; h < m; h++)
		yy[hh[h]] = h + 1 == m || yy[hh[h + 1]] != yy[hh[h]] ? m_++ : m_;
	m = m_;
	memset(st, 0x3f, (n_ = m) * 2 * sizeof *st);
	for (i = n + 1; i >= 0; i--) {
		int j = query(yy[i * 4 + 2], yy[i * 4 + 3]);

		dp[i] = j >= n + 1 ? xx[n + 1] - xx[i] : (xx[j] - xx[i] + c - 1) / c * c + dp[j];
		if (i > 0)
			update(yy[i * 4 + 0], i), update(yy[i * 4 + 1], i);
	}
	for (h = 0; h < q; h++) {
		int j = query(yy[(n + 2) * 4 + h * 2 + 0], yy[(n + 2) * 4 + h * 2 + 1]);

		printf("%lld\n", j >= n + 1 ? tt[h] + xx[n + 1] : (tt[h] + xx[j] + c - 1) / c * c + dp[j]);
	}
	return 0;
}
