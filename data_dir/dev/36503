/* In the name of Allah */
#include<bits/stdc++.h>
using namespace std;

const int N = 1e5 + 5, P = 1e9 + 19;
int n, m, s, t, cnt1[N], cnt2[N];
int mn[N], from[N], to[N], l[N];
long long dist1[N], dist2[N];
set<pair<long long, int>> q;
vector<int> adj[N];
bool mark[N];

inline void dijkstra(long long dist[N], int cnt[N], int root) {
	cnt[root] = 1;
	q.insert({dist[root] = 0, root});
	while (!q.empty()) {
		int u = q.begin()->second;
		q.erase(q.begin()), mark[u] = true;
		for (auto x: adj[u]) {
			int v = from[x] ^ to[x] ^ u;
			if (!mark[v]) {
				q.erase({dist[v], v});
				if (dist[v] > dist[u] + l[x]) {
					cnt[v] = 0;
					dist[v] = dist[u] + l[x];
				}
				if (dist[v] == dist[u] + l[x])
					(cnt[v] += cnt[u]) %= P;
				q.insert({dist[v], v});
			}
		}
	}
}

inline void readInput() {
	scanf("%d%d%d%d", &n, &m, &s, &t);
	for (int i = 0; i < m; i++) {
		scanf("%d%d%d", &from[i], &to[i], &l[i]);
		from[i]--, to[i]--;
	}
}

inline void solve() {
	for (int i = 0; i < m; i++)
		adj[from[i]].push_back(i);
	memset(dist1, 63, sizeof dist1);
	dijkstra(dist1, cnt1, --s);
	for (int u = 0; u < n; u++)
		adj[u].clear();
	for (int i = 0; i < m; i++)
		adj[to[i]].push_back(i);
	memset(mark, false, sizeof mark);
	memset(dist2, 63, sizeof dist2);
	dijkstra(dist2, cnt2, --t);
}

inline void writeOutput() {
	for (int i = 0; i < m; i++)
		if (cnt1[t] == 1LL * cnt1[from[i]] * cnt2[to[i]] % P && dist1[from[i]] + dist2[to[i]] + l[i] == dist1[t])
			printf("YES\n");
		else if (dist1[from[i]] + dist2[to[i]] + 1 < dist1[t])
			printf("CAN %lld\n", dist1[from[i]] + dist2[to[i]] + l[i] + 1 - dist1[t]);
		else
			printf("NO\n");
}

int main() {
	readInput(), solve(), writeOutput();
	return 0;
}
