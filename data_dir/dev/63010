/////////////////////////   _LeMur_
#define _CRT_SECURE_NO_WARNINGS
#include <unordered_map>
#include <unordered_set>
#include <functional>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <chrono>
#include <random>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <ctime>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <list>
#include <map>
#include <set>

using namespace std;

const int N = 1000002;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;
mt19937 myrand(chrono::steady_clock::now().time_since_epoch().count());

int n, q, sz;
int c[N];
int ind[N];

int val[2 * N];
int t[2 * N];

void upd(int pos, int delta) {
    for (; pos <= sz; pos += pos & -pos) {
        t[pos] += delta;
    }
}

int sum(int pos) {
    int answ = 0;
    for (; pos > 0; pos -= pos & -pos) {
        answ += t[pos];
    }
    return answ;
}

int main() {
    cin >> n >> q;

    for (int i = 1; i <= n; i++) {
        int a;
        scanf("%d", &a);

        val[++sz] = a;
        ind[a]++;
    }

    for (int i = 1; i <= q; i++) {
        scanf("%d", &c[i]);
        if (c[i] > 0) {
            val[++sz] = c[i];
            ind[ c[i] ]++;
        }
    }

    sort(val + 1, val + sz + 1);

    for (int i = 1; i <= sz; i++) {
        upd(i, 1);
    }
    for (int i = 1; i <= q; i++) {
        if (c[i] > 0) {
            int ina = 1, inb = sz, pat;
            while (ina <= inb) {
                int mid = (ina + inb) / 2;
                if (val[mid] >= c[i]) {
                    inb = mid - 1;
                    pat = mid;
                } else {
                    ina = mid + 1;
                }
            }
            --ind[ c[i] ];
            upd(pat + ind[ c[i] ], -1);
        }
    }

    for (int i = 1; i <= q; i++) {
        if (c[i] < 0) {
            int ina = 1, inb = sz, pos;
            while (ina <= inb) {
                int mid = (ina + inb) / 2;
                if (sum(mid) >= -c[i]) {
                    inb = mid - 1;
                    pos = mid;
                } else {
                    ina = mid + 1;
                }
            }

            int cc = val[pos];
            ina = 1, inb = sz;
            int pat;

            while (ina <= inb) {
                int mid = (ina + inb) / 2;
                if (val[mid] >= cc) {
                    inb = mid - 1;
                    pat = mid;
                } else {
                    ina = mid + 1;
                }
            }

            --ind[ cc ];
            upd(pat + ind[ cc ], -1);
        } else {
            int ina = 1, inb = sz, pat;
            while (ina <= inb) {
                int mid = (ina + inb) / 2;
                if (val[mid] >= c[i]) {
                    inb = mid - 1;
                    pat = mid;
                } else {
                    ina = mid + 1;
                }
            }
            upd(pat + ind[ c[i] ], 1);
            ++ind[ c[i] ];
        }
    }

    for (int i = 1; i <= sz; i++) {
        if (sum(i) != 0) {
            cout << val[i] << endl;
            return 0;
        }
    }

    cout << 0 << endl;
    return 0;
}
