//In the name of God

#include <bits/stdc++.h>
#define lol long long
using namespace std;
const lol MAXN=60,INF=1e9+10;

//Dinic O(V^2*E)
struct Edge {
  lol to,reverseIndex,cap,flow,real;
};

lol n,m,k,s,t,maxFlow,dis[MAXN];
vector<Edge>g[MAXN];

bool bfs() {
  for(lol i = 0 ; i < MAXN ; i++)
    dis[i] = INF;
  queue<lol>q;
  q.push(s);
  dis[s] = 0;
  while(q.size() > 0) {
    lol v = q.front();
    q.pop();
    for(lol i = 0 ; i < g[v].size() ; i++) {
      Edge x = g[v][i];
      lol u = x.to;
      if(dis[u] == INF && x.flow < x.cap) {
	dis[u] = dis[v]+1;
	q.push(u);
      }
    }
  }
  return (dis[t] != INF);

}

lol dfs(lol v,lol f) {
  if(v == t)
    return f;
  for(lol i = 0 ; i < g[v].size() ; i++) {
    Edge &x = g[v][i];
    lol u = x.to;
    if(x.cap <= x.flow) continue;
    if(dis[u] == dis[v]+1) {
      lol tmp = dfs(u,min(f,x.cap-x.flow));
      if(tmp > 0) {
	x.flow += tmp;
	g[u][x.reverseIndex].flow -= tmp;
	return tmp;
      }
    }
  }
  return 0;
}


bool check(long double x)
{
  memset(dis,0,sizeof dis);
  for(lol i=0;i<n;i++)
    for(lol j=0;j<g[i].size();j++)
      {
	g[i][j].flow=0;
	g[i][j].cap=g[i][j].real/x;
	//cerr<<g[i][j].real<<" "<<g[i][j].cap<<" "<<x<<endl;
      }
  maxFlow=0;
  while(bfs()) {
    while(lol tmp = dfs(s,INF))
      maxFlow += tmp;
  }
  return (maxFlow>=k);
}

int main()
{
  ios::sync_with_stdio(false);
  cin>>n>>m>>k;
  s=0;t=n-1;
  for(lol i=0;i<m;i++)
    {
      lol v,u,w;
      cin>>v>>u>>w;
      v--;u--;
      Edge x,y;
      x.to=u;
      y.to=v;
      x.real=w;
      y.real=0;
      x.flow=y.flow=0;
      x.reverseIndex=g[u].size();
      y.reverseIndex=g[v].size();
      g[v].push_back(x);
      g[u].push_back(y);
    }
  long double s=0,e=5e8+10;
  for(lol i=0;i<100;i++)
    {
      long double mid=(s+e)/2;
      //cerr<<s<<" "<<e<<" "<<mid-s<<endl;
      if(check(mid))
	s=mid;
      else
	e=mid;
    }
  cout<<fixed<<setprecision(12)<<e*k<<endl;
  return 0;
}
