#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#pragma comment(linker, "/stack:200000000")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;

template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
}

const ll INF = 1e18;
const int MAXN = 1e5 + 100;
ll a[MAXN], dp[MAXN][5];

signed main() {
    FAST_IO();
    int n;
    string s;
    cin >> n >> s;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
    }
    fill(&dp[0][0], &dp[0][0] + MAXN * 5, INF);
    dp[0][0] = 0;
    vector<char> add = {'h', 'a', 'r', 'd', '$'};
    for (int i = 1; i <= n; ++i) {
        for (int j = 0; j < 5; ++j) {
            if (add[j] != s[i - 1]) {
                dp[i][j] = min(dp[i][j], dp[i - 1][j]);
            }
            else {
                dp[i][j] = min(dp[i][j], dp[i - 1][j] + a[i]);
                dp[i][j + 1] = min(dp[i][j + 1], dp[i - 1][j]);
            }
        }
    }
    ll ans = dp[n][0];
    for (int i = 0; i < 4; ++i) {
        ans = min(ans, dp[n][i]);
    }
    cout << ans;
    return 0;
}
