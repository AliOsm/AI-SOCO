#include <iostream>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <set>

using namespace std;

typedef long long ll;

vector<int> gr[100001];
vector<ll> w[100001];

ll dist[1000001];
ll ds[1000001];
int cnt[1000001];

const int infi = 1000000000;
const ll inf = 1ll*infi*infi;

int main()
{
    int n,m,k;
    scanf("%d %d %d",&n,&m,&k);
    for(int i=1;i<=n;++i)
    {
        dist[i] = inf;
        ds[i] = inf;
    }
    dist[1] = 0;

    for(int i=0;i<m;++i)
    {
        int a,b,c;
        scanf("%d %d %d",&a,&b,&c);
        gr[a].push_back(b);
        gr[b].push_back(a);
        w[a].push_back(c); w[b].push_back(c);
    }
    int erase = 0;
    for(int i=0;i<k;++i)
    {
        int s;
        ll y;
        scanf("%d %lld",&s,&y);
        if(ds[s]!=inf)
            ++erase;
        ds[s] = min(ds[s],y);
    }
    for(int i=1;i<=n;++i)
    {
        if(ds[i]!=inf)
        {
            gr[i].push_back(1);
            gr[1].push_back(i);
            w[i].push_back(ds[i]);
            w[1].push_back(ds[i]);
        }
        
    }
    set< pair<ll,int> > q;
    q.insert( make_pair(0,1) );

    while(!q.empty())
    {
        ll dd = q.begin()->first;
        int v = q.begin()->second;

        for(int i=0;i<gr[v].size();++i)
        {
            int to = gr[v][i];
            ll wei = w[v][i];
            
            if(wei + dd < dist[to])
            {
                q.erase(make_pair(dist[to],to));
                dist[to] = wei+dd;
                cnt[to] = 1;
                q.insert(make_pair(dist[to],to));
            }
            else if(wei + dd == dist[to])
            {
                ++cnt[to];
            }
        }
        q.erase(q.begin());
    }

    for(int i=1;i<=n;++i)
    {
        //cout << dist[i] << ' ' << cnt[i] << endl;
        if(ds[i]!=inf)
            if(ds[i]>dist[i] || (ds[i]==dist[i] && cnt[i]>1))
                ++erase;
    }
    printf("%d",erase);
    return 0;
}
