#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define rep(i, a, b) for(int i=(a); i<(b); i++)
#define repi(i, a, b) for(int i=(a); i>(b); i--)
#define db(x) (cerr << #x << ": " << (x) << '\n')
#define sync ios_base::sync_with_stdio(false), cin.tie(NULL)
#define tests(t) int t; cin >> t; while(t--)
#define iceil(n, x) (((n) + (x) - 1) / (x))
#define ll long long
#define gcd __gcd
#define pb push_back
#define pf push_front
#define pob pop_back
#define pof pop_front
#define sz size()
#define all(v) (v).begin(), (v).end()
#define uni(v) sort(all(v)); (v).erase(unique(all(v)), (v).end());
#define pii pair<int, int>
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vi>
#define fi first
#define se second
#define umap unordered_map
#define uset unordered_set
#define pqueue priority_queue
#define si(a) scanf("%d", &a)
#define sll(a) scanf("%lld", &a)
#define bitcount(x) __builtin_popcount(x)
#define cps CLOCKS_PER_SEC
#define PI acos(-1.0)
#define EPS 1e-9
#define mod 1000000007
#define MOD 1000000007
#define N 5005
using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

template<typename T>
using minpq = priority_queue<T, vector<T>, greater<T>>;

template<typename T>
using maxpq = priority_queue<T>;

//All indexing is 0-based
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update> ordered_set;
//methods: find_by_order(k); & order_of_key(k);
//To make it an ordered_multiset, use pairs of (value, time_of_insertion)
//to distinguish values which are similar.

template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;
//ordered_map<int, int> my_map;


//Returns no. of values x for which ceil(n / x) == y (y must be > 1).
inline ll CC(ll n, ll y) { return iceil(n, y-1) - iceil(n, y); }

//Returns no. of values x for which floor(n / x) == y
inline ll FF(ll n, ll y) { return n / y - n / (y+1); }

//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c; }
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c; }
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p; }

// #define int ll
#define trace(...) 42

const ll inf = 1e18;
#define pos fi
#define cnt se
int n, m, x[N];
pii hole[N];

ll dp[2][N];  //dp[i][j]: Min. total distance with i holes and j mice.
ll *p1, *p2;
ll pre[N];

void prep(int i) {
    rep(j, 0, n) {
        pre[j] = abs(x[j] + 0ll - hole[i].pos);
        if(j) pre[j] += pre[j-1];
    }
}

//Computes the cost of sending mice from [l, r] into the ith hole.
ll query(int l, int r) {
    if(l > r) return 0;
    return pre[r] - (l ? pre[l-1] : 0);
}

void rec(int i, int l, int r, int optl, int optr) {
    if(l > r) return;
    int mid = (l + r) / 2;

    auto &ans = p2[mid];
    ans = inf;
    int opt = -1;

    trace(mid-hole[i-1].cnt, mid);
    for(int k = max(optl, mid-hole[i-1].cnt); k <= min(optr, mid); k++) {
        ll kk = p1[k] + query(k, mid-1);
        if(kk < ans) {
            ans = kk; 
            opt = k;
        }
    }
    if(opt == -1) {
        rec(i, l, mid-1, optl, optr);
        return;
    }
    trace(i, l, r, optl, optr, mid, opt, ans);
    rec(i, l, mid-1, optl, opt);
    if(opt != -1) rec(i, mid+1, r, opt, optr);
}

main()
{   
    #ifndef ONLINE_JUDGE
        freopen("/home/tarun/Desktop/input.txt", "r", stdin);
    //  freopen("/home/tarun/Desktop/output.txt", "w", stdout);
    #endif
    sync;
    clock_t clk = clock();
    cerr << "I will return...\n";

    int sum = 0;
    cin >> n >> m;
    rep(i, 0, n) cin >> x[i];
    rep(i, 0, m) cin >> hole[i].pos >> hole[i].cnt, sum += hole[i].cnt;

    sort(x, x+n);
    sort(hole, hole+m);

    rep(j, 0, n+1) dp[0][j] = inf;

    dp[0][0] = 0;

    p1 = dp[0], p2 = dp[1];

    rep(i, 1, m+1) {
        prep(i-1);
        rep(j, 0, n+1) p2[j] = inf;
        rec(i, 0, n, 0, n);
        swap(p1, p2);
    }

    trace(sum);
    cout << (p1[n] == inf ? -1 : p1[n]) << '\n';
    // rep(i, 0, n) cout << x[i] << ' '; cout << '\n';
    // rep(i, 0, m) cout << hole[i].pos << ' ' << hole[i].cnt << '\n';

    cerr << "...don't you ever hang your head.\n";
    cerr << "Time (in ms): " << double(clock() - clk) * 1000.0 / cps << '\n';
}

//Compile using:
//g++ -o filename.exe --std=c++11 filename.cpp
//Use -D CP for defining a macro CP in the local environment







