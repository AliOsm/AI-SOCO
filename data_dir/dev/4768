#include <cstdio>
#include <memory.h>
#include <cstring>
#include <vector>
#include <deque>
#include <cstdlib>
#include <queue>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <functional>
#include <iostream>
#include <set>
#include <list>
#include <map>
#include <time.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef long long ll;
typedef unsigned long long llu;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<string, int> psi;
const ll MOD = (ll)1e9 + 7;
const long double PI = 3.141592653589793238462643383279502884197;

priority_queue<int, vector<int>, greater<int> > pq;
vector<int> v;

// 11자리 8시작
int vec[6] = { 4, 8, 15, 16, 23, 42 };

int aa[2];
int pp[2];

void cal(int vv) {
	for (int i = 0; i < 6; i++)
		for (int j = i + 1; j < 6; j++)
			if (vec[i] * vec[j] == vv) {
				aa[0] = vec[i]; aa[1] = vec[j];
				break;
			}
}

int ans[6];

int main() {
	int a[4];
	printf("? 1 2\n");
	fflush(stdout);
	scanf("%d", &a[0]);
	cal(a[0]);
	pp[0] = aa[0]; pp[1] = aa[1];

	printf("? 2 3\n");
	fflush(stdout);
	scanf("%d", &a[1]);
	cal(a[1]);

	int flag;
	for (int i = 0; i < 2; i++) {
		flag = 0;
		for (int j = 0; j < 2; j++)
			if (aa[i] == pp[j]) flag++;
		if (!flag) ans[2] = aa[i];
	}

	for (int i = 0; i < 2; i++) {
		flag = 0;
		for (int j = 0; j < 2; j++)
			if (pp[i] == aa[j]) flag++;
		if (!flag) ans[0] = pp[i];
	}
	pp[0] = aa[0]; pp[1] = aa[1];

	printf("? 3 4\n");
	fflush(stdout);
	scanf("%d", &a[2]);
	cal(a[2]);

	for (int i = 0; i < 2; i++) {
		flag = 0;
		for (int j = 0; j < 2; j++)
			if (aa[i] == pp[j]) flag++;
		if (!flag) ans[3] = aa[i];
	}

	for (int i = 0; i < 2; i++) {
		flag = 0;
		for (int j = 0; j < 2; j++)
			if (pp[i] == aa[j]) flag++;
		if (!flag) ans[1] = pp[i];
	}
	pp[0] = aa[0]; pp[1] = aa[1];

	printf("? 4 5\n");
	fflush(stdout);
	scanf("%d", &a[3]);
	cal(a[3]);

	for (int i = 0; i < 2; i++) {
		flag = 0;
		for (int j = 0; j < 2; j++)
			if (aa[i] == pp[j]) flag++;
		if (!flag) ans[4] = aa[i];
	}

	for (int i = 0; i < 2; i++) {
		flag = 0;
		for (int j = 0; j < 2; j++)
			if (pp[i] == aa[j]) flag++;
		if (!flag) ans[2] = pp[i];
	}
	pp[0] = aa[0]; pp[1] = aa[1];

	for (int i = 0; i < 6; i++) {
		flag = 0;
		for (int j = 0; j < 5; j++)
			if (vec[i] == ans[j]) flag++;
		if (flag == 0) ans[5] = vec[i];
	}

	printf("! %d %d %d %d %d %d\n", ans[0], ans[1], ans[2], ans[3], ans[4], ans[5]);
	fflush(stdout);
	// 이 전에 없었던 것과 새로 생긴 것을 찾자.

}