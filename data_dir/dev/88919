#include <bits/stdc++.h>
using namespace std;

#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define FORd(i, a, b) for (int i = (a) - 1; i >= (b); i--)
#define FORall(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define sz(a) int((a).size())
#define present(t, x) (t.find(x) != t.end())
#define all(a) (a).begin(), (a).end()
#define uni(a) (a).erase(unique(all(a)), (a).end())
#define pb push_back
#define pf push_front
#define mp make_pair
#define fi first
#define se second
#define prec(n) fixed<<setprecision(n)
#define bit(n, i) (((n) >> (i)) & 1)
#define bitcount(n) __builtin_popcountll(n)
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef vector<pi> vii;
const int MOD = (int) 1e9 + 7;
const int FFTMOD = 1007681537;
const int INF = (int) 1e9;
const ll LINF = (ll) 1e18;
const ld PI = acos((ld) -1);
const ld EPS = 1e-6;
inline ll gcd(ll a, ll b) {ll r; while (b) {r = a % b; a = b; b = r;} return a;}
inline ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}
inline ll fpow(ll n, ll k, int p = MOD) {ll r = 1; for (; k; k >>= 1) {if (k & 1) r = r * n % p; n = n * n % p;} return r;}
template<class T> inline int chkmin(T& a, const T& val) {return val < a ? a = val, 1 : 0;}
template<class T> inline int chkmax(T& a, const T& val) {return a < val ? a = val, 1 : 0;}
inline ll isqrt(ll k) {ll r = sqrt(k) + 1; while (r * r > k) r--; return r;}
inline ll icbrt(ll k) {ll r = cbrt(k) + 1; while (r * r * r > k) r--; return r;}
inline void addmod(int& a, int val, int p = MOD) {if ((a = (a + val)) >= p) a -= p;}
inline void submod(int& a, int val, int p = MOD) {if ((a = (a - val)) < 0) a += p;}
inline int mult(int a, int b, int p = MOD) {return (ll) a * b % p;}
inline int inv(int a, int p = MOD) {return fpow(a, p - 2, p);}
inline int sign(ld x) {return x < -EPS ? -1 : x > +EPS;}
inline int sign(ld x, ld y) {return sign(x - y);}
#define db(x) cerr << #x << " = " << (x) << " ";
#define endln cerr << "\n";

const int maxn = 1e6 + 5;
int n, m;
vii adj[maxn];
vii radj[maxn];
vii adj2[maxn];
long long sum[maxn];

long long ff(int n) {
    int lo = 0, hi = 1e6;
    while (lo < hi) {
        int mi = lo + hi + 1 >> 1;
        if ((long long) mi * (mi + 1) / 2 <= n) {
            lo = mi;
        }
        else {
            hi = mi - 1;
        }
    }
    int mi = lo + hi >> 1;
    return (long long) n * (mi + 1) - (long long) mi * (mi + 1) * (mi + 2) / 6;
}

int vis[maxn];
vi ver;
void dfs(int u) {
    vis[u] = 1;
    for (auto it : adj[u]) {
        int v = it.fi;
        if (!vis[v]) {
            dfs(v);
        }
    }
    ver.pb(u);
}
void rdfs(int u, int cnt) {
    vis[u] = cnt;
    for (auto it : radj[u]) {
        int v = it.fi;
        if (!vis[v]) {
            rdfs(v, cnt);
        }
    }
}
void dfs2(int u) {
    vis[u] = 1;
    for (auto it : adj2[u]) {
        int v = it.fi;
        if (!vis[v]) {
            dfs2(v);
        }
    }
    ver.pb(u);
}

void solve() {
    cin >> n >> m;
    FOR(i, 0, m) {
        int u, v, w; cin >> u >>v >> w; u--, v--;
        adj[u].pb(mp(v, w));
        radj[v].pb(mp(u, w));
    }
    FOR(i, 0, n) if (!vis[i]) dfs(i);
    fill_n(vis, n, 0);
    int cnt = 0;
    FORd(i, n, 0) {
        int u = ver[i];
        if (!vis[u]) {
            rdfs(u, ++cnt);
        }
    }
    int s; cin >> s; s--;
    s = vis[s] - 1;
    FOR(u, 0, n) {
        for (auto it : adj[u]) {
            int v = it.fi;
            int w = it.se;
            int iu = vis[u] - 1;
            int iv = vis[v] - 1;
            if (iu != iv) {
                adj2[iu].pb(mp(iv, w));
            }
            else {
                sum[iu] += ff(w);
            }
        }
    }
    fill_n(vis, cnt, 0);
    ver.clear();
    FOR(i, 0, cnt) if (!vis[i]) dfs2(i);
    static long long dp[maxn];
    FOR(i, 0, cnt) {
        int u = ver[i];
        dp[u] = sum[u];
        for (auto it : adj2[u]) {
            int v = it.fi;
            int w = it.se;
            chkmax(dp[u], dp[v] + w + sum[u]);
        }
    }
    cout << dp[s] << "\n";
}

int main(int argc, char* argv[]) {
    ios_base::sync_with_stdio(0), cin.tie(0);
    if (argc > 1) {
        assert(freopen(argv[1], "r", stdin));
    }
    if (argc > 2) {
        assert(freopen(argv[2], "wb", stdout));
    }
    solve();
    cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";
    return 0;
}
