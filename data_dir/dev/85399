#include<bits/stdc++.h>
#define int long long int
#define ull unsigned long long int
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define rev(i,n,init) for(int i=n;i>=init;i--)
#define MAXN 1200005
#define MOD 998244853
#define f first
#define s second
#define endl '\n'
using namespace std;
const double PI = atan(1.0)*4;
const int INF=100000000000000003;
const int32_t LOG=21;
   int a[300005],lazy[MAXN];
   int seg[MAXN];
   int cur[300005];
   vector<int> vals[300005];
   int comp(int p1,int p2)
   {
       return min(p1,p2); 
   }
   inline void build(int v,int tl,int tr)
   {
       if(tl==tr)seg[v]=a[tl];
       else
       {
          int tm=(tl+tr)/2;
          build(v*2,tl,tm);
          build(v*2+1,tm+1,tr);
          seg[v]=comp(seg[v*2],seg[v*2+1]);
       } 
   }
   inline void push(int v)
   {
       seg[v*2]+=lazy[v];
       seg[v*2+1]+=lazy[v];
       lazy[v*2]+=lazy[v];
       lazy[v*2+1]+=lazy[v];
       lazy[v]=0;
   }
   inline void update(int v,int tl,int tr,int l,int r,int inc)
   {
       if(l>r)return;
       if(l==tl && r==tr)
       {
          seg[v]+=inc;
          lazy[v]+=inc;
       }
       else
       {
           push(v);
           int tm=(tl+tr)/2;
           update(v*2,tl,tm,l,min(r,tm),inc);
           update(v*2+1,tm+1,tr,max(l,tm+1),r,inc);
           seg[v]=comp(seg[v*2],seg[v*2+1]);
       } 
   }
   int query(int v,int tl,int tr,int l,int r)
   {
      if(l>r)return INF;
      if(l<=tl && tr<=r)return seg[v];
      push(v);
      int tm=(tl+tr)/2;
      int q1=query(v*2,tl,tm,l,min(r,tm));
      int q2=query(v*2+1,tm+1,tr,max(l,tm+1),r);
      return comp(q1,q2);
   }
   void reset(int n)
   {
      fill(seg,seg+4*n+1,0);
      fill(lazy,lazy+4*n+1,0);
      fill(cur,cur+n+2,0);
      fill(a,a+n+2,0);
      rep(i,0,n+2)vals[i].clear();
   }
signed main(){
     getFaster;
     int t;
     cin>>t;
     while(t--)
     {
         int n;
         cin>>n;
         int b[n];
         rep(i,0,n)
         {
           int x;cin>>x;
           vals[x].push_back(i);
           a[i]=x;
         }
         rep(i,0,n)cin>>b[i];
         build(1,0,n-1);
         bool g=true;
         rep(i,0,n)
         {
             int toCheck=b[i];
             if(cur[toCheck]>=vals[toCheck].size())
             {
                g=false;
                break;
             }
             int pos=vals[toCheck][cur[toCheck]];
             if(pos!=0)
             {
                int minval=query(1,0,n-1,0,pos-1);
                if(minval<toCheck)
                {
                   g=false;
                   break;
                }  
             } 
             cur[toCheck]++;
             update(1,0,n-1,pos,pos,INF);
         }
         if(!g)cout<<"NO"<<endl;
         else cout<<"YES"<<endl;
         reset(n);
     } 
     return 0;
}