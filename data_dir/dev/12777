
// In the name of God
// Code by: mrMaster

#include <bits/stdc++.h>

using namespace std;

inline int in() {int x; scanf("%d",&x); return x;}
#define debug(x) cerr << #x << '=' << (x) << endl
#define FOR(i,j,k) for(int i=j;i<k;++i)
#define bpc __builtin_popcount
#define blz __builtin_clz
#define btz __builtin_ctz
#define Size(x) ((int)(x).size())
#define endl '\n'
#define boost ios_base :: sync_with_stdio(false) , cin.tie(0) , cout.tie(0)
#define pb push_back
#define X first
#define Y second

typedef long long ll;
typedef long double ld;
typedef pair<int,int>pii;

const int INF = 1e9 + 10;
const ll LINF = 1000ll*1000*1000*1000*1000*1000 + 100;
const int MN = 40 + 4;

ll dp[MN][MN][MN][MN];
bool mk[MN][MN];
int n ,m,q;
int num[MN][MN][MN];
int ps[MN][MN];

void input()
{
	cin >> n >> m >> q;
	for(int i=0;i<n;++i){
		string s;
		cin >> s;
		for(int j=0;j<m;++j){
			if(s[j] == '1') mk[i][j] = true;
		}
	}
	for(int i=0;i<n;++i)
		for(int j=0;j<m;++j)
			ps[i][j+1] = ps[i][j] + mk[i][j];
}

void prep()
{
	for(int i=0;i<n;++i)
		for(int r=0;r<m;++r)
			for(int l=0;l<=r;++l){
				int x = ps[i][r+1] - ps[i][l];
				if(x) num[i][l][r] = 0;
				else{
					if(!i) num[i][l][r] = 1;
					else num[i][l][r] = 1 + num[i-1][l][r];
				}
			}
	for(int ro=0;ro<n;++ro)
		for(int r1=0;r1<=ro;++r1)
			for(int sz=0;sz<m;++sz)
				for(int l=0;l<(m-sz);++l){
					int r = l+sz;
					dp[ro][r1][l][r] = min(ro-r1+1 , num[ro][l][r]);
					if(!sz) continue;
					dp[ro][r1][l][r] += dp[ro][r1][l+1][r] + dp[ro][r1][l][r-1];
					if(r-l > 1) dp[ro][r1][l][r] -= dp[ro][r1][l+1][r-1];
				}
}

void solve()
{
	while(q--){
		int X1 , Y1 , X2 , Y2;
		cin >> X1 >> Y1 >> X2 >> Y2;
		--X1 , --X2 , --Y1 , --Y2;
		ll ans = 0;
		for(int i=X1;i<=X2;++i){
			ans += dp[i][X1][Y1][Y2];
		}
		cout << ans << endl;
	}
}

int main()
{
	boost;
	input();
	prep();
	solve();
	return 0;
}


