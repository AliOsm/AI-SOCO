#include <bits/stdc++.h>
const int N=100005;
using namespace std;
int n,m,d,bo[N],dist[N];
vector<int>g[N],vals;
int mxd=-1,mxn=-1;
void dfs(int cur,int prev,int dep){
    if(bo[cur]){
        if(dep>mxd){
            mxd=dep;
            mxn=cur;
        }
    }
    for(auto v:g[cur]){
        if(v==prev)continue;
        dfs(v,cur,dep+1);
    }
}
void dfs2(int cur,int prev,int dep){
    dist[cur]=max(dist[cur],dep);
    for(auto v:g[cur]){
        if(v==prev)continue;
        dfs2(v,cur,dep+1);
    }
}
int main()
{ios_base::sync_with_stdio(0);cout.tie(0);cin.tie(0);
    cin>>n>>m>>d;
    for(int i=0;i<m;i++){
        int el;cin>>el;bo[el]=1;
        vals.push_back(el);
    }
    for(int i=1;i<n;i++){
        int u,v;cin>>u>>v;g[u].push_back(v);g[v].push_back(u);
    }
    dfs(vals[0],0,0);
    int l=mxn;
    mxd=-1,mxn=-1;
    dfs(l,0,0);
    int r=mxn;
    dfs2(l,0,0);
    dfs2(r,0,0);
    int res=0;
    for(int i=1;i<=n;i++){
        if(dist[i]<=d)res++;
    }
    cout<<res<<'\n';
    return 0;
}
