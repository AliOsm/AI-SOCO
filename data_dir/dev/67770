#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <functional>
#include <numeric>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <complex>
#include <memory.h>
#include <time.h>

using namespace std;

typedef long long LL;

vector<int> lucky;

void go(LL x)
{
	if (x > (LL)1e9)
		return;
	lucky.push_back((int)x);
	go(x * 10 + 4);
	go(x * 10 + 7);
}

int pl, pr, vl, vr, k;

int main()
{
	go(0);
	lucky.push_back((int)1e9 + 1);
	sort(lucky.begin(), lucky.end());

	scanf("%d%d%d%d%d", &pl, &pr, &vl, &vr, &k);

	double res = 0.0;
	for(int i = 1; i < (int)lucky.size() - k; ++i)
	{
		int plen = min(lucky[i], pr) - max(lucky[i - 1] + 1, pl);
		int vlen = min(lucky[i + k] - 1, vr) - max(lucky[i + k - 1], vl);

		if (plen >= 0 && vlen >= 0)
			res += (plen + 1) / (0.0 + pr - pl + 1) * (vlen + 1) / (0.0 + vr - vl + 1);

		plen = min(lucky[i + k] - 1, pr) - max(lucky[i + k - 1], pl);
		vlen = min(lucky[i], vr) - max(lucky[i - 1] + 1, vl);

		if (plen >= 0 && vlen >= 0)
			res += (plen + 1) / (0.0 + pr - pl + 1) * (vlen + 1) / (0.0 + vr - vl + 1);
	}

	if (k == 1)
	{
		int total = 0;
		for(int i = 0; i < lucky.size(); ++i)
			total += vl <= lucky[i] && lucky[i] <= vr && pl <= lucky[i] && lucky[i] <= pr;
		res -= total / (0.0 + pr - pl + 1) / (0.0 + vr - vl + 1);
	}

	printf("%.15lf\n", res);
	return 0;
}