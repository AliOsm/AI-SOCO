#pragma comment(linker, "/STACK:64000000")
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

string s, t;
vector <pii> ans;
vector <int> cnt, cntt;
int nxt[1001000];

vector <pii> get(vector <int> cnt) {
    int st = -1;
    for (int i = 1; i < 10; i++) {
        if (cnt[i]) {
            st = i;
            break;
        }
    }
    if (st == -1) {
        vector<pii> ans;
        ans.pb(mp(0, cnt[0]));
        return ans;
    }
    cnt[st]--;
    vector<pii> ans;
    ans.pb(mp(st, 1));
    for (int i = 0; i < 10; i++) {
        if (cnt[i])
            ans.pb(mp(i, cnt[i]));
    }
    return ans;
}

vector <pii> get2(vector <int> cnt) {
    int st = -1;
    vector <pii> ans;
    for (int i = 0; i < 10; i++)
        if (cnt[i])
            ans.pb(mp(i, cnt[i]));
    return ans;
}


string tostring(int n) {
    string ans = "";
    while (n) {
        ans = (char)(n % 10 + '0') + ans;
        n /= 10;
    }
    return ans;
}

int get_len(vector <pii> &a) {
    int ans = 0;
    for (int i = 0; i < a.size(); i++)
        ans += a[i].s;
    return ans;
}

// 1 if [ind:) > ddd...ddd
int f(int ind, int d, int cnt) {
    assert(d != -1);
    if (t[ind] - '0' != d) {
        if (t[ind] - '0' > d) return 1;
        return -1;
    }
    if (nxt[ind] == -1) return 0;
    if (nxt[ind] - ind >= cnt) return 0;
    int c = t[nxt[ind]] - '0';
    if (c > d) return 1;
    return -1;
}

// -1 if [ind1:) < [ind2:)
int f(int ind1, int ind2) {
    if (ind1 == t.size() || ind2 == t.size()) return 0;
    if (t[ind1] != t[ind2]) {
        if (t[ind1] < t[ind2]) return -1;
        return 1;
    }
    return f(ind1 + 1, ind2 + 1);
}

int cmp(vector <pii> a, vector <pii> b) {
    int l = 0, r = 0;
    int L = 0, R = 0;
    while (true) {
        if (l == a.size() && r == b.size())
            break;
        if (l == a.size() || r == b.size()) {
            if (l == a.size()) return -1;
            if (r == b.size()) return 1;
            return -1;
        }
        if (a[l].f != -1 && b[r].f != -1) {
            if (a[l].f < b[r].f) return 1;
            if (a[l].f > b[r].f) return -1;
            if (a[l].s == b[r].s) {
                l++;
                r++;
            } else if (a[l].s < b[r].s) {
                b[r].s -= a[l].s;
                l++;
            } else {
                a[l].s -= b[r].s;
                r++;
            }
        } else if (a[l].f == -1 && b[r].f != -1) {
            int c = f(L, b[r].f, b[r].s);
            if (c == 1) return -1;
            if (c == -1) return 1;
            int len = t.size() - L;
            if (len == b[r].s) {
                r++;
                l++;
            } else if (len < b[r].s) {
                b[r].s -= len;
                l++;
            } else {
                L += b[r].s;
                r++;
            }
        } else if (a[l].f != -1 && b[r].f == -1) {
            int c = f(R, a[l].f, a[l].s);
            if (c == 1) return 1;
            if (c == -1) return -1;
            int len = t.size() - R;
            if (len == a[l].s) {
                l++;
                r++;
            } else if (len < a[l].s) {
                a[l].s -= len;
                r++;
            } else {
                R += a[l].s;
                l++;
            }
        } else {
            int c = f(L, R);
            if (c == -1) {
                return 1;
            }
            if (c == 1) {
                return -1;
            }
            if (L == R) {
                l++;
                r++;
            } else if (L < R) {
                L += t.size() - R;
                r++;
            } else {
                R += t.size() - L;
                l++;
            }
        }
    }
    return 0;
}

void update(vector <pii> a) {
    if (a[0].f == 0) return;
    if (a[0].f == -1 && t[0] == '0') return;
    if (get_len(a) > get_len(ans)) {
        return;
    }
    if (get_len(a) < get_len(ans)) {
        ans = a;
        return;
    }
    int c = cmp(ans, a);
    if (c == -1) ans = a;
}

void process(int len) {
    vector <int> cur = cnt;
    string dd = tostring(len);
    for (int i = 0; i < dd.size(); i++) {
        cur[dd[i] - '0']--;
    }
    for (int i = 0; i < 10; i++) {
        cur[i] -= cntt[i];
    }
    if (*min_element(all(cur)) < 0) return;
    vector <pii> a = get(cur);
    a.pb(mp(-1, sz(t)));
    update(a);
    for (int i = sz(a) - 2; i >= 0; i--) {
        swap(a[i], a[i + 1]);
        update(a);
    }
a = get2(cur);
a.pb(mp(-1, sz(t)));
for (int i = sz(a) - 2; i >= 0; i--)
swap(a[i], a[i + 1]);
update(a);
}

int main(){
    
    getline(cin, s);
    getline(cin, t);
    
    if (s.size() == 2) {
        cout << t << endl;
        return 0;
    }
    
    memset(nxt, -1, sizeof nxt);
    
    for (int i = sz(t) - 1; i >= 0; i--) {
        if (i == sz(t) - 1) nxt[i] = -1;
        else {
            if (t[i] != t[i + 1]) nxt[i] = i + 1;
            else nxt[i] = nxt[i + 1];
        }
    }
    
    ans.pb(mp(9, inf));
    
    cnt.assign(10, 0);
    cntt.assign(10, 0);
    
    for (int i = 0; i < sz(s); i++) {
        cnt[s[i] - '0']++;
    }
    for (int i = 0; i < sz(t); i++) {
        cntt[t[i] - '0']++;
    }
    
    for (int i = 1; i <= sz(s); i++) {
        string dd = tostring(i);
        if (i + sz(dd) == sz(s)) {
            process(i);
        }
    }
    
    for (int i = 0; i < ans.size(); i++) {
        if (ans[i].f == -1) {
            for (int j = 0; j < t.size(); j++)
                printf("%c", t[j]);
            continue;
        }
        while (ans[i].s) {
            printf("%d", ans[i].f);
            ans[i].s--;
        }
    }
    printf("\n");
    
    return 0;
}
