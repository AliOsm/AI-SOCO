#include <bits/stdc++.h>
using namespace std;

/*------- Constants---- */

#define LL                      long long
#define ull                     unsigned long long
#define mod                     1000000007
#define MEMSET_INF              63
#define MEM_VAL                 1061109567
#define forn(i,n)               for( int i=0 ; i < n ; i++ )
#define mp(i,j)                 make_pair(i,j)
#define lop(i,a,b)              for( int i = (a) ; i < (b) ; i++)
#define pb(a)                   push_back((a))
#define all(x)                  (x).begin(),(x).end()
#define gc                      getchar_unlocked
#define PI                      acos(-1.0)
#define inf                     1<<30
#define lc                      ((n)<<1)
#define rc                      ((n)<<1 |1)
#define db(x)                   cout << #x << " -> " << x << endl;
#define DI(n)                   int n;sc(n)
#define DII(a,b)                int a,b;sc(a);sc(b)
#define DIII(a,b,c)             int a,b,c;sc(a);sc(b);sc(c)
#define min(a,b)                ((a)>(b) ? (b) : (a) )
#define max(a,b)                ((a)>(b) ? (a):(b))

/*---- short Cuts ------- */
#define ms(ara_name,value) memset(ara_name,value,sizeof(ara_name))
typedef pair<int, int> ii;
typedef vector<int > vi ;
/*------ template functions ------ */
#ifndef getchar_unlocked
#define getchar_unlocked getchar
#endif
template<class T> inline void sc(T &x){register int c = gc();x = 0;int neg = 0;for(;((c<48 | c>57) && c != '-');c = gc());
      if(c=='-') {neg=1;c=gc();}for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}if(neg) x=-x;}
template <class T> inline T bigmod(T p,T e,T M){LL ret = 1;for(; e > 0; e >>= 1){if(e & 1) ret = (ret * p) % M;p = (p * p) % M;} return (T)ret;}
template <class T> inline T gcd(T a,T b){if(b==0)return a;return gcd(b,a%b);}
template <class T> inline T modinverse(T a,T M){return bigmod(a,M-2,M);}

/*************************** END OF TEMPLATE ****************************/
const int N = 100005;
vector<int> Lucky;
bool L[10005];

void gen(int u)
{
      if(u>10000) return;
      if(u>0) Lucky.pb(u);
      gen(10*u+4);
      gen(10*u+7);
}

int A[N];


int block = 320;
int delta[500];
int cnt[500][10005];

void updateElement(int pos,int d)
{
      int id = pos/block;
      int prv= A[pos];
      cnt[id][prv] --;
      A[pos] += d;
      cnt[id][A[pos]] ++;
      
}

void updateBlock(int id,int d)
{
      delta[id] += d;
}
void update(int lo,int hi,int d)
{
      int i;
      for(i=lo; i%block&&i<=hi; i ++ ) {
            updateElement(i,d);
      }
      for(; i + block-1 <= hi; i += block) {
            updateBlock(i/block,d);
      }
      for(;i <= hi ; i ++ ) updateElement(i,d);
}

int queryElement(int pos)
{
      int id = pos/block;
      if(L[A[pos] + delta[id]] ) return 1;
      return 0;
}

int queryBlock(int id)
{
      int p = delta[id];
      int res = 0;
      for(int i = 0;i < Lucky.size() ; i++ ) {
            int c = Lucky[i] - p;
            if(c>0) res += cnt[id][c];
      }
      return res;
}

int query(int lo,int hi)
{
      int i,j;
      int res = 0;
      for(i=lo;i%block&&i<=hi;i++){
            res += queryElement(i);
      }
      for( ; i + block -1 <= hi ; i+= block){
            res += queryBlock(i/block);
      }
      for(;i<=hi;i++) res += queryElement(i);
      return res;
      
}
int main()
{
      gen(0);
      sort(all(Lucky));
      forn(i,Lucky.size()) L[Lucky[i]] = 1;
      
      DII(n,q);
      forn(i,n) sc(A[i]);
      
      forn(i,n){
            cnt[i/block][A[i]] ++;
      }
      
      int lo,hi;
      char t[10];
      while(q--){
            scanf("%s%d%d",t,&lo,&hi);
            lo--,hi--;
            if(t[0]=='c'){
                  int res = query(lo,hi);
                  printf("%d\n",res);
            }
            else {
                  DI(d);
                  update(lo,hi,d);
                  
            }
      }
      
}