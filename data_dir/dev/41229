#include <bits/stdc++.h>

using namespace std;

#define maxn 100010

vector<int> adj[maxn];
long long ans[maxn], maxi, sum;
long long cnt[maxn], col[maxn], sz[maxn];
bool big[maxn];

void dfs(int u, int p) {
  sz[u] = 1;
  for (auto v: adj[u]) {
    if (v == p) continue;
    dfs(v, u);
    sz[u] += sz[v];
  }
}

void add(int u, int p, int x) {
  cnt[col[u]] += x;
  if (cnt[col[u]] > maxi) {
    maxi = cnt[col[u]];
    sum = col[u];
  }
  else if (cnt[col[u]] == maxi) {
    sum += col[u];
  }
  for (auto v: adj[u]) {
    if (v != p && big[v] != 1) add(v, u, x);
  }
}

void dsu(int u, int p, bool keep) {
  int bigchild = -1, mx = -1;
  for (auto v: adj[u]) {
    if (v != p && sz[v] > mx) {
      mx = sz[v];
      bigchild = v;
    }
  }
  for (auto v: adj[u]) {
    if (v != p && v != bigchild) dsu(v, u, 0);
  }
  if (bigchild != -1) {
    dsu(bigchild, u, 1);
    big[bigchild] = 1;
  }
  add(u, p, 1);
  ans[u] = sum;
  if (bigchild != -1) big[bigchild] = 0;
  if (keep == 0) {
    add(u, p, -1);
    maxi = 0;
    sum = 0;
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int n;
  cin >> n;
  for (int i = 1; i <= n; ++i) cin >> col[i];
  for (int i = 0; i < n - 1; ++i) {
    int u, v;
    cin >> u >> v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  dfs(1, 1);
  dsu(1, 1, 1);
  for (int i = 1; i <= n; ++i) cout << ans[i] << " ";
  cout << '\n';
}
