#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef pair<ll,ll> pll;
#define Max 1000001
#define inf INT_MAX
#define llinf LONG_LONG_MAX
#define f(i,n) for(i=0;i<n;i++)
#define fast ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define pb push_back
#define ff first
#define ss second
#define all(v) v.begin(),v.end()
#define bp(n) __builtin_popcount(n)
#define endl '\n'
const ll N=3e2+5,mod=1e9+7,bit=60;

ll dx[8]={1, 1, 0,-1,-1,-1, 0, 1};
ll dy[8]={0,-1,-1,-1, 0, 1, 1, 1};
bool vis[N][N],dp[N][N][8][31];
ll n,a[31];

void solve(ll x,ll y,ll dir,ll lvl)
{
	if(lvl==n+1)
	{
		return;
	}
	if(dp[x][y][dir][lvl])
	{
		return;
	}
	dp[x][y][dir][lvl]=1;
	ll temp=a[lvl];
	ll cx=x;
	ll cy=y;
	while(temp--)
	{
		vis[cx][cy]=1;
		cx+=dx[dir];
		cy+=dy[dir];
	}
	cx-=dx[dir];
	cy-=dy[dir];
	ll i1=(dir+1)%8;
	ll i2=(dir+7)%8;
	solve(cx+dx[i1],cy+dy[i1],i1,lvl+1);
	solve(cx+dx[i2],cy+dy[i2],i2,lvl+1);
}

signed main()
{
    fast;
    memset(dp,0,sizeof(dp));
    memset(vis,0,sizeof(vis));
    ll i,j,ans=0;
	cin>>n;
	for(i=1;i<=n;i++)
	{
		cin>>a[i];
	}
	solve(150,150,0,1);
	f(i,N)
	{
		f(j,N)
		{
			ans+=vis[i][j];
		}
	}
	cout<<ans<<endl;
    return 0;
}
