#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

#define minimize(a, b) { a = min(a, b); }
#define maximize(a, b) { a = max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n';
#define next(type, i) type i; cin >> i;
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }

char str[1000];

int readTime() {
	gets(str);
	int t = 0;
	int h1 = str[1] - '0';
	int h2 = str[2] - '0';
	int h = h1 * 10 + h2;
	int m1 = str[4] - '0';
	int m2 = str[5] - '0';
	int m = m1 * 10 + m2;
	h %= 12;
	if (str[7] == 'p') h += 12;
	m += h * 60;
	m %= 24 * 60;
	
	return m;
}

int main() {
	srand (time(NULL));
    ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	gets(str);
	int n = 0;
	FOR (i, 0, 100) {
		if (str[i] == 0) break;
		n = n * 10 + (str[i] - '0');
	}
	int res = 0;
	int lastTime = 25 * 60;
	int lastTimeRepeated = 0;
	while (n --> 0) {
		auto t = readTime();
		if (t < lastTime) {
			res++;
			lastTime = t;
			lastTimeRepeated = 1;
		} else if (t > lastTime) {
			lastTime = t;
			lastTimeRepeated = 1;
		} else if (lastTimeRepeated == 10) {
			res++;
			lastTimeRepeated = 1;
		} else {
			lastTimeRepeated++;
		}
	}
	
	cout << res;
}