//1025D
#include <iostream>

using namespace std;

const int N = 707;
int n, a[N];
bool can[N][N][2], ok[N][N], ans = false;

int nod(int a, int b)
{
	while (a && b)
		if (a >= b)
			a %= b;
		else
			b %= a;
	return a | b;
}

void make(int l, int r, int root)
{
	if (l == 0 && r == n - 1)
		ans = true;

	if (l != 0 && ok[l - 1][root])
		can[l][r][0] = true;

	if (r != n - 1 && ok[root][r + 1])
		can[l][r][1] = true;
}

int main()
{
	ios::sync_with_stdio(0); cin.tie(0);

	cin >> n;

	for (int i = 0; i < n; ++i)
		cin >> a[i];

	for (int i = 0; i < n; ++i)
		for (int j = i; j < n; ++j)
			ok[i][j] = (nod(a[i], a[j]) != 1);

	for (int i = 0; i < n; ++i)
		make(i, i, i);

	for (int len = 2; len <= n; ++len)
	{
		for (int l = 0; l + len - 1 < n; ++l)
		{
			int r = l + len - 1;
			for (int root = l; root <= r; ++root)
			{
				bool left = true;
				bool right = true;
				
				if (root != l)
					left = can[l][root - 1][1];

				if (root != r)
					right = can[root + 1][r][0];

				if (left && right)
					make(l, r, root);
			}
		}
	}

	if (ans)
		cout << "Yes";
	else
		cout << "No";
}