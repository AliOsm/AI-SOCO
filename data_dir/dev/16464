#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long 

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << endl;
        //use cerr if u want to display at the bottom
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define trace(...)
#endif

typedef trie<string,null_type,trie_string_access_traits<>,pat_trie_tag,trie_prefix_search_node_update> pref_trie;
typedef tree<long int,null_type,less<long int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
typedef cc_hash_table<long int,long int, hash<long int>, equal_to<long int>, direct_mask_range_hashing<long int>, 
hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;

bool DFS(vector<vector<long int>> &g, long int root, vector<long int> &directions, long int parity, unordered_set<long int> &visited){
   if(visited.find(root) != visited.end()){
      if(directions[root] != parity)
         return false;
      return true;
   }

   visited.insert(root);
   directions[root] = parity;
   bool ans = true;

   for(auto ele : g[root])
      ans &= DFS(g,ele,directions,1-parity,visited);
   
   return ans;
}


int main(){
   IOS;
 //    #ifndef ONLINE_JUDGE
 //        freopen("in.txt",  "r",  stdin);
 //        freopen("out.txt", "w", stdout);
 //    #endif
   long int n,m;
   cin>>n>>m;

   vector<long int> directions(n);
   vector<vector<long int>> g(n);
   vector<pair<long int,long int>> edges;
   for(long int i = 0; i < m; i++){
      long int a,b;
      cin>>a>>b;
      edges.push_back({a-1,b-1});
      g[a-1].push_back(b-1);
      g[b-1].push_back(a-1);
   }  

   unordered_set<long int> visited;
   bool answer = DFS(g,0,directions,0,visited);
   if(!answer)
      cout<<"NO";
   else{
      cout<<"YES\n";
      for(auto ele : edges)
         cout<<directions[ele.first];
   }

   return 0;
}