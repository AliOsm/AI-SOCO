#include <bits/stdc++.h>

#define fto(i, x, y) for(int i = (x); i <= (y); ++i)
#define fdto(i, x, y) for(int i = (x); i >= (y); --i)
#define ftoa(i, x, y, a) for(int i = (x); i <= (y); i += a)
#define ftoit(it, var) for (__typeof(var.begin()) it = var.begin(); it != var.end(); ++it)

#define ii pair<int, int>
#define mp make_pair
#define FF first
#define SS second

#define vi vector<int>
#define vii vector<ii>
#define ll long long
#define vll vector<ll>

#define eb emplace_back
#define ef emplace_front
#define lb lower_bound
#define sz(a) (int)a.size()

#define oo 1000000007LL
#define OO 1000000000000000007LL

using namespace std;

#define Pro "tmp"
#define maxN 300007

vi adj[maxN];
bool visited[maxN], inStack[maxN];

vi topo;
int f[maxN];

void haveCycle(int u) {
    visited[u] = 1;
    inStack[u] = 1;
    fto (i, 0, (int)adj[u].size()-1) {
        int v = adj[u][i];
        if (!visited[v]) haveCycle(v);
        else if (inStack[v]) {
            puts("-1");
            exit(0);
        }
    }
    inStack[u] = 0;
    return;
}

void topoSort(int u) {
    visited[u] = 1;
    fto (i, 0, (int)adj[u].size()-1) {
        int v = adj[u][i];
        if (!visited[v]) topoSort(v);
    }
    topo.eb(u);
    return;
}

int main() {
    #ifndef ONLINE_JUDGE
        freopen(Pro".inp", "r", stdin);
        freopen(Pro".out", "w", stdout);
    #endif // ONLINE_JUDGE

    int n, m;
    scanf("%d%d", &n, &m);

    string s;
    cin >> s;

    fto (i, 1, m) {
        int u, v;
        scanf("%d%d", &u, &v);
        adj[u].eb(v);
    }

    fto (i, 1, n) visited[i] = 0;
    fto (i, 1, n) if (!visited[i]) haveCycle(i);


    fto (i, 1, n) visited[i] = 0;
    fto (i, 1, n) if (!visited[i]) topoSort(i);

    s = '#'+s;
    reverse(topo.begin(), topo.end());

    int ans = 0;
    fto (chr, 'a', 'z') {
        fto (i, 1, n) f[i] = (s[i] == chr);
        fto (i, 0, (int)topo.size()-1) {
            int u = topo[i];
            fto (j, 0, (int)adj[u].size()-1) {
                int v = adj[u][j];
                f[v] = max(f[v], f[u]+(s[v] == chr));
            }
        }
        fto (i, 1, n) ans = max(ans, f[i]);
    }

    printf("%d\n", ans);
    return 0;
}