#include <bits/stdc++.h>
#define fast ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define pb push_back
#define endl '\n'
#define MOD 1000000007
#define INF 1000000000000000001

using namespace std;
typedef long long int ll;

struct point
{
	ll x, y;
	point(){}
	point(ll x, ll y): x(x), y(y){}
};

bool operator == (const point p1, const point p2) { return tie(p1.x, p1.y) == tie(p2.x, p2.y); }
point operator + (const point p1, const point p2) { return point(p1.x+p2.x, p1.y+p2.y); }
point operator - (const point p1, const point p2) { return point(p1.x-p2.x, p1.y-p2.y); }
point operator * (const ll a, point p) { return point(a*p.x, a*p.y); }
ll operator ^(point a, point b) { return a.x*b.y - a.y*b.x; }

struct line
{
	point base, dir;
	line(){}
	line(point a, point b): base(a)
	{
		// if ((b-a).x < 0) dir = a-b;
		dir = b-a;
	}
};

point intersect(line l1, line l2)
{
	ll num = (l2.base - l1.base)^(l2.dir);
	ll den = l1.dir^l2.dir;
	if (den == 0) return point(INF, INF);
	if ((l1.dir.x*num)%den != 0 or (l1.dir.y*num)%den != 0) return point(INF, INF);
	point p = num*l1.dir;
	p.x /= den;
	p.y /= den;
	// cout << num << ' ' << den << '\n';
	if (den > 0 and (num > den or num < 0)) return point(INF, INF);
	else if (den < 0 and (num < den or num > 0)) return point(INF, INF);
	num = (l2.base - l1.base)^(l1.dir);
	den = l1.dir^l2.dir;
	// cout << num << ' ' << den << '\n';
	if (den > 0 and (num > den or num < 0)) return point(INF, INF);
	else if (den < 0 and (num < den or num > 0)) return point(INF, INF);
	return l1.base + p;
}

ll points(ll x, ll y, ll a, ll b)
{
	if (x == a)
		return abs(b-y) + 1;
	if (y == b)
		return abs(x-a) + 1;
	return abs(__gcd(abs(x-a), abs(b-y))) + 1;
}

int main(void)
{
	#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
	#endif
	fast;
	int n; cin >> n;
	vector<array<ll, 4>> ln(n);
	vector<line> l(n);
	ll ans = 0;
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < 4; ++j)
		{
			cin >> ln[i][j];
		}
		l[i] = line(point(ln[i][0], ln[i][1]), point(ln[i][2], ln[i][3]));
		ans += points(ln[i][0], ln[i][1], ln[i][2], ln[i][3]);
		set<pair<ll, ll>> s;
		for (int j = 0; j < i; ++j)
		{
			point p = intersect(l[i], l[j]);
			// if (i == 4 and j == 1) cout << p.x << ' ' << p.y << '\n';
			if (p == point(INF, INF)) continue;
			// cout << p.x << ' ' << p.y;
			// if (--ans;
			s.insert({p.x, p.y});
		}
		// cout << ans << ' ';
		ans -= s.size();
		// cout << ans << '\n';
		// for (auto it : s) cout << it.first << ' ' << it.second << "  ";
			// cout << endl;
		// cout << ans << ' ';
	}
	// cout << ans << '\n';
	// ans -= s.size();
	cout << ans << '\n';
}