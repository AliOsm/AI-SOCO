#define  _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<map>
#include<cmath>
#include<vector>
#include<algorithm>
#include<iomanip>
#include<cmath> 
#include<stack>
#include<math.h>
#include<set>
#include<string>
#include<cstring>
#include<queue>
#include<complex>	
#include<assert.h>
#include<math.h>
#include<memory.h>
#include <stdlib.h>
#include<sstream>	
#include<cstdio>
using namespace std;

#define rep(i,n) for(int i=0;i<n;i++)
#define repi(i,a,n) for(int i=a;i<n;i++)

#define mp make_pair
#define pb push_back
#define fastIO ios::sync_with_stdio(false)
#define read freopen("in.in","r",stdin)
#define write freopen("out.out","w",stdout)
#define scf(xx) scanf("%d",&xx)
#define All(a) a.begin(), a.end()
#define LSOne(S) (S & (-S))

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef long double ld;

#define X first 
#define Y second 
int dx[] = { 0, 0, 1, -1, -1, -1, 1, 1 };
int dy[] = { 1, -1, 0, 0, 1, -1, 1, -1 };



const int N = 555;
int pre[N][N], dp[N][N];
char s[N];
int k,n;
int solve(int  i=0, int kk=0){
	if (i == n) return kk > k ? 1 << 20 : 0;
	int &ret = dp[i][kk];
	if (ret != -1) return ret;
	ret = 1 << 20;
	for (int j = 0; i + j < n; j++)
		ret = min(ret, pre[i][j + i] + solve(i + j +1 , kk + 1));
	return ret;
}
void print(int i = 0, int kk = 0, bool first = 1){
	if (i == n)return;
	int mn = solve(i + 1, kk + 1), b = i;
	for (int j = 0; j + i < n; j++)if (pre[i][j + i] + solve(i + j + 1, kk + 1) < mn) mn = pre[i][j + i] + solve(i + j + 1, kk + 1), b = j+i;
	if (!first)printf("+");
	int len = (b - i + 1);
	for (int j = 0; j < len /2 ; j++)printf("%c", s[i+j]);
	if (len & 1)printf("%c", s[i + len / 2]);
	for (int j = len / 2 - 1; j >= 0; --j )printf("%c", s[i + j]);
	print(b + 1, kk + 1,0);
}
int main(){
	//read; write;
	memset(dp, -1, sizeof dp);
	scanf("%s", s);
	scf(k);
	n = strlen(s);
	rep(i, n)repi(j, i, n){
		pre[i][j] = 0;
		rep(k, (j - i + 1) / 2) pre[i][j] += int(s[i + k] != s[j - k]);
	}
	cout << solve() << endl;
	print();
	return 0;
}