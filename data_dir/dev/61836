#include <bits/stdc++.h>
using namespace std;
#define x first
#define y second
#define pb push_back
#define mp make_pair
typedef pair<int, int> pii;
typedef long long ll;
const int MOD = 1e9+7;
const int BASE = 27;
const int N = 2000000+2;

const int LOGN = 20;
const int oo = 1e9;
const double EPS = 1e-9;


char tmp[N];
string s;

int cost[10][10][10][10],freq[10][10];

void bfs(int x , int y,int src){
	queue<int> q;
	int newX = (src+x)%10;
	int newY = (src+y)%10;
	cost[x][y][src][newY] = cost[x][y][src][newX] = 0;
	q.push(newX);
	q.push(newY);
	while(q.size()){
		int t = q.front();
		q.pop();
		int newX = (x+t)%10;
		int newY = (y+t)%10;
		if(cost[x][y][src][newY] == -1){
			cost[x][y][src][newY] = cost[x][y][src][t] + 1;
			q.push(newY);
		}
		if(cost[x][y][src][newX] == -1){
			cost[x][y][src][newX] = cost[x][y][src][t] + 1;
			q.push(newX);
		}
	}	
}
int main() {
	memset(cost,-1,sizeof cost);
	scanf("%s",tmp);

	s = tmp;	
	for (int i = 0; i+1 < s.size(); ++i){
		freq[s[i]-'0'][s[i+1]-'0']++;
	}
	for(int i = 0 ; i <= 9 ; ++i){
		for(int j = 0 ; j <= 9 ; ++j){
			for(int src = 0 ; src <= 9 ; ++src){
				bfs(i,j,src);
			}
		}
	}
	for(int i = 0 ; i <= 9 ; ++i){
		for(int j = 0 ; j <= 9 ; ++j){
			int ans = 0;
			bool can = true;
			for(int k1 = 0 ; k1 <= 9 ; ++k1){
				for(int k2 = 0 ; k2 <= 9 ; ++k2){
					if(freq[k1][k2] > 0 && cost[i][j][k1][k2] == -1) can = false;
					ans += freq[k1][k2] * (cost[i][j][k1][k2]);
				}
			}
			if(j > 0)printf(" ");
			if(!can) ans = -1;
			printf("%d", ans);
		}
		puts("");
	}

	return 0;
}