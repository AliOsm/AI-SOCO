#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <set>
#include <bitset>
#include <map>

using namespace std;

typedef long long ll;
typedef long double ld;

const int INF = (int)1e9 + 5;

const int maxN = 20;

int n, m, a[maxN][maxN];
char s[maxN][maxN];
int f[1 << maxN];

int main () {
    srand(time(0));
    //freopen("input.txt", "r", stdin);

    scanf("%d%d", &n, &m);

    for (int i = 0; i < n; i++) {
        scanf("%s", s[i]);
        for (int j = 0; j < m; j++)
            s[i][j] -= 'a';
    }

    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            scanf("%d", &a[i][j]);

    fill(f, f + (1 << maxN), INF);

    f[0] = 0;

    for (int i = 0; i < m; i++) {
        int cnt[26] = {0};
        int sm[26] = {0};
        int maxi[26] = {0};
        for (int pos = 0; pos < n; pos++) {
            cnt[s[pos][i]] ^= (1 << pos);
            sm[s[pos][i]] += a[pos][i];
            maxi[s[pos][i]] = max(maxi[s[pos][i]], a[pos][i]);
        }
        for (int c = 0; c < 26; c++)
            sm[c] -= maxi[c];
        for (int mask = 0; mask < (1 << n); mask++) {
            for (int pos = 0; pos < n; pos++) {
                if ((mask & (1 << pos)) == 0) {
                    int nmask = mask ^ (1 << pos);
                    if (f[nmask] > f[mask] + a[pos][i]) f[nmask] = f[mask] + a[pos][i];
                }
            }
            for (int c = 0; c < 26; c++)
                if (cnt[c]) {
                    int nmask = mask | cnt[c];
                    int cst = sm[c];
                    if (f[nmask] > f[mask] + cst) f[nmask] = f[mask] + cst;
                }
        }
    }

    printf("%d\n", f[(1 << n) - 1]);
}
