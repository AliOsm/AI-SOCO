#include <bits/stdc++.h>

using namespace std ;

int main() {
    ios_base :: sync_with_stdio(false) ;
    cin.tie(nullptr) ;
    int n ;
    long long maxCnt = 0 , tot = 0;
    cin >> n ;
    vector<vector<int>> adjList(n , vector<int>()) ;
    vector<long long > size(n) ,cnt (n + 1), ans(n) , c(n);
    vector<bool > big(n , false) ;
    for(long long &x : c)
        cin >> x ;
    for(int i = 0 ; i < n - 1 ; i++)
    {
        int u , v ;
        cin >> u >> v ;
        adjList[--u].push_back(--v) ;
        adjList[v].push_back(u);
    }
    function<int (int , int ) > getSize = [&](int u , int p) -> int {
        size[u] = 1 ;
        for(int v : adjList[u])
            if(v != p)
                size[u] += getSize(v , u) ;
        return size[u] ;
    };
    getSize(0 , -1) ;
    function <void (int , int , int)> add = [&](int u , int p , int x)
    {
        cnt[c[u]]+= x;
        if(cnt[c[u]] > maxCnt)
            maxCnt = cnt[c[u]] , tot = c[u] ;
        else if(cnt[c[u]] == maxCnt)
            tot += c[u] ;
        for(int v : adjList[u])
            if(v != p && !big[v])
                add(v, u , x) ;
    };
    function<void (int , int , bool) > dfs = [&](int u , int p , bool keep)
    {
        int max = -1 , bigChild = -1;
        for(int v : adjList[u])
            if(v != p && max < size[v])
                max = size[bigChild = v] ;
        for(int v : adjList[u])
            if(v != p && v != bigChild)
                dfs(v , u , false) ;
        if(bigChild != -1)
            dfs(bigChild , u , true) , big[bigChild] = true ;

        add(u , p , 1) ;
        ans[u] = tot ;

        if(bigChild != -1)
            big[bigChild] = false ;

        if(!keep)
            add(u , p , -1) , tot = 0 , maxCnt = 0 ;
    };
    dfs(0 , -1 , false);
    for(int i = 0 ;i < n ;i++){
        if(i > 0) cout << ' ' ;
        cout << ans[i];
    }
    cout << '\n' ;
    return 0 ;
}