#include <bits/stdc++.h>
using namespace std;

#define loop(i,n) for(int i = 0;i < int(n);i++)
#define rloop(i,n) for(int i = int(n);i >= 0;i--)
#define range(i,a,b) for(int i = int(a);i <= int(b);i++)
#define INF	1e9
#define SZ(c) int(c.size())
#define ALL(c) c.begin(), c.end()
#define RALL(c) c.rbegin(), c.rend()
#define PI acos(-1)
#define pb push_back
#define mp make_pair
#define fr first
#define sc second

typedef vector<int> vi;
typedef vector<pair<int,int> > vii;
typedef long long ll;
typedef pair<int, int> pii;

const int N = 200005;

struct node{
    int t , idx , x , val;
};

vector<node> Q[N];
vi adj[N];
int a[N] , ans[N] , vis[N];
int tree[N][3];// 0 even , 1 odd
int n , m;

void increase(int i , int j, int delta)
{
    for (; i < m; i |= i + 1)
        tree[i][j] += delta;
}

int sum(int i , int j)
{
	int ans = 0;
	for (; i >= 0; i = (i & (i + 1)) - 1)
		ans += tree[i][j];
	return ans;
}

void solve(int u = 1 , int par = 0 , int l = 0){
    bool j = (l&1);
    for(node q : Q[u]){
        if(q.t == 2){
            ans[q.idx] = sum(q.idx , j) + a[u];
        }else{
            increase(q.idx , j , q.val);
            increase(q.idx , !j , -q.val);
        }
    }

    for(int nxt : adj[u])
        if(nxt != par)
            solve(nxt , u , l+1);


    for(node q : Q[u]){
        if(q.t == 2){
            continue;
        }else{
            increase(q.idx , j , -q.val);
            increase(q.idx , !j , q.val);
        }
    }
}

int main()
{

#ifndef ONLINE_JUDGE
	freopen("in.in", "r", stdin);
	//freopen("out.in", "w", stdout);
#endif

    scanf("%d%d",&n,&m);
    range(i,1,n)scanf("%d",&a[i]);
    int a , b;
    loop(i,n-1){
        scanf("%d%d",&a,&b);
        adj[a].pb(b);
        adj[b].pb(a);
    }

    loop(i,m){
        node q;
        scanf("%d%d",&q.t,&q.x);
        if(q.t == 1)scanf("%d",&q.val);
        else vis[i] = 1;
        q.idx = i;
        Q[q.x].pb(q);
    }

    solve();

    loop(i,m)
        if(vis[i])
            printf("%d\n",ans[i]);

    return 0;
}
