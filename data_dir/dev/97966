#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <iterator>
#include <cmath>
#include <set>
#include <deque> 
#include <string>


using namespace std;

struct Node {
	char val;
		
	std::set<int> connects;
	
	bool isVisited;
};
Node nodes[26];

int T;
char s[210];
int szS;

std::vector<char> ans;

//���ӵĶ�<=2 

bool check(int startPos) {
	int p = startPos;
	nodes[p].isVisited = true;	
	ans.push_back(nodes[p].val);
	p = *nodes[p].connects.begin();
	while (nodes[p].connects.size() != 1) {
		nodes[p].isVisited = true;
		ans.push_back(nodes[p].val);
		std::set<int>::iterator iNode = nodes[p].connects.begin();
		//һ�������� 
		int numA = *iNode;
		iNode++;
		int numB = *iNode;
		
		int nextP;
		
		if (false == nodes[numA].isVisited) {
			nextP = numA;						
		} else if (false == nodes[numB].isVisited) {
			nextP = numB;
		} else {
			return false;
		}
		
		if (true == nodes[nextP].isVisited)
			return false;
		
		nodes[nextP].isVisited = true;
		p = nextP;
	}
	
	if (nodes[p].connects.size() == 1) {
		nodes[p].isVisited = true;
		ans.push_back(nodes[p].val);
		return true;
	}
	else {
		return false;		
	}

}
		
int main()
{
	scanf("%d\n", &T);
	for (int ii = 0 ; ii < T ; ii++) {
		scanf("%s\n", s);
		szS = strlen(s);
		
		for (int i = 0 ; i < 26 ; i++) {
			nodes[i].val = i + 'a';
			nodes[i].connects.clear();
			nodes[i].isVisited = false;
		}
		
		for (int i = 1 ; i < szS ; i++) {
			int first = s[i - 1] - 'a';
			int second = s[i] - 'a';
			
			nodes[first].connects.insert(second);
			nodes[second].connects.insert(first);
		}
		
		//�����ȸ���
		int zeroCount = 0;		
		int oneCount = 0; 
		int twoCount = 0;
		int moreCount = 0;
		for (int i = 0 ; i < 26 ; i++) {
			int curCount = nodes[i].connects.size();
			if (curCount == 0) {
				zeroCount++;
			} else if (curCount == 1) {
				oneCount++;
			} else if (curCount == 2) {
				twoCount++;
			} else if (curCount > 2) {
				moreCount++;
			}
		}
		
		if (moreCount > 0) {
			printf("NO\n");
			continue;
		}

		ans.clear();		
		
		bool isAccepted = true;
		int startPos;
		for (int i = 0 ; i < 26 ; i++) {
			if (true == nodes[i].isVisited) {
				continue;
			}
			
			if (nodes[i].connects.size() == 1) {
				if (check(i) == false) {
					isAccepted = false;
					break;
				}
			}
		}
		
		if (isAccepted == false) {
			printf("NO\n");
			continue;
		}
		
		int letterInSort = oneCount + twoCount;		
		if (ans.size() < letterInSort)  {
			printf("NO\n");
			continue;
		}
		
		//�������0 
		for (int i = 0 ; i < 26 ; i++) {
			if (nodes[i].connects.size() == 0) {
				ans.push_back(nodes[i].val);
			}
		}
		
		printf("YES\n");
		for (int i = 0 ; i < ans.size() ; i++) {
			printf("%c", ans[i]);
		}
		printf("\n");
	}
	
	return 0;
}

