#include <bits/stdc++.h>
using namespace std;
#define read            freopen("C:\\Users\\Dell\\Desktop\\in.txt", "r", stdin)
#define write           freopen("C:\\Users\\Dell\\Desktop\\in.txt", "w", stdout)
#define pii             pair<int , int >
#define inf             INT_MAX/3
#define in(a)           scanf("%d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%d%d", &a, &b)
#define in3(a, b, c)    scanf("%d%d%d", &a, &b, &c)
#define pn              printf("\n")
#define pr(a)           printf("%d\n", a)
#define prs(a)          printf("%d ", a)
#define pr2(a, b)       printf("%d %d\n", a, b)
#define pr3(a, b, c)    printf("%d %d %d\n", a, b, c)
#define pcs(a)          printf("Case %d: ", a)
#define MP              make_pair
#define vi              vector<int >
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define pb              push_back
#define MEM(a, b)       memset((a), (b), sizeof(a))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)
#define x               first
#define y               second

typedef long long LL;
//int  dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int  dx[]={1,1,0,-1,-1,-1,0,1,0};int dy[]={0,1,1,1,0,-1,-1,-1,0};//8 direction
//int  dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(int n, int pos) {return (n & (1<<pos))>>pos;} //typecast 1 in case of int
//int  on(int n, int pos) {return n | (1<<pos);} //typecast 1 in case of int
//int  off(int n, int pos) {return n & ~(1<<pos);} //typecast 1 in case of int
//bool operator < (const data &d) const{return cost<d.cost;} //reverse in priority queue

const int M=300100;
struct partners {
    int diff, l, r;
    partners(int a=0, int b=0, int c=0) {diff=a; l=b; r=c;}
    bool operator < (const partners &d) const{
        if (diff==d.diff) return l>d.l;
        else return diff>d.diff;
    }
};
priority_queue<partners>q;
set<int>pos;
int visited[M], A[M];
char typ[M];
vector<pii>ans;

int main()
{
#ifndef ONLINE_JUDGE
    read;
#endif
    int n, i, j, k, temp;

    in(n);
    ins(typ);
    for (i=0; i<n; i++) in(A[i]), pos.insert(i);

    for (i=1; i<n; i++)
    {
        if (typ[i]!=typ[i-1])
        {
            q.push(partners(abs(A[i]-A[i-1]), i-1, i));
        }
    }

    MEM(visited, false);
    while (!q.empty())
    {
        partners u=q.top();
        q.pop();

        if (visited[u.l] || visited[u.r]) continue;

        visited[u.l]=visited[u.r]=true;
        pos.erase(u.l);
        pos.erase(u.r);

        ans.pb(MP(u.l+1, u.r+1));

        set<int>::iterator lt=pos.upper_bound(u.l), rt=pos.upper_bound(u.r);
        if (lt!=pos.begin())
        {
            lt--;
            if (rt!=pos.end())
            {
                if (typ[*lt]!=typ[*rt])
                {
                    q.push(partners(abs(A[*lt]-A[*rt]), *lt, *rt));
                }
            }
        }
    }

    pr(ans.sz);
    for (i=0; i<ans.sz; i++) pr2(ans[i].first, ans[i].second);


return 0;
}
