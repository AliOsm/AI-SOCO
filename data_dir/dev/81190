#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <stack>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef long long ll;
typedef long double ld;

int N;
ll init[500010],day[500010];
ld x[500010]; ll w[500010];
int a[2][500010];
ld ans1,ans2;

void add(int d, int id, ll W){
    ll tmp = init[id] - d * day[id];
    tmp *= W;
    ans1 += tmp / w[id];
    ans2 += (ld)(tmp % w[id]) / w[id];
}

void calc(int d, int cur, int low, int high, ll W){
    int i,j=low,k=high-1,next=1-cur;
    
    if(high-low == 0) return;
    if(high-low == 1){
        add(d, a[cur][low], W);
        return;
    }
    
    ld pivot1 = x[a[cur][rand() % (high - low) + low]];
    ld pivot2 = x[a[cur][rand() % (high - low) + low]];
    ld pivot3 = x[a[cur][rand() % (high - low) + low]];
    
    if(pivot1 > pivot2) swap(pivot1,pivot2);
    ld pivot = min(max(pivot1,pivot3),pivot2);
    
    ll sumw = 0, sumc = 0;
    
    for(i=low;i<high;i++){
        int id = a[cur][i];
        if(x[id] < pivot || (x[id] == pivot && rand()&1)){
            a[next][j] = id; j++;
            sumw += w[id]; sumc += init[id] - d * day[id];
        } else {
            a[next][k] = id; k--;
        }
    }
    
    if(sumw > W) {calc(d, next, low, j, W); return;}
    ans1 += sumc;
    calc(d, next, j, high, W-sumw);
}

void func(int d, ll W){
    int i;
    REP(i,N) a[0][i] = i;
    calc(d,0,0,N,W);
}

int main(void){
    int D,i,j;
    ll W;
    
    scanf("%d%d%I64d",&D,&N,&W);
    REP(i,N) scanf("%I64d",&w[i]);
    REP(i,N) scanf("%I64d",&init[i]);
    REP(i,N) scanf("%I64d",&day[i]);
    
    REP(i,D){
        REP(j,N) x[j] = (ld)(init[j] - i * day[j]) / w[j];
        func(i,W);
    }
    
    if(ans2 < 0.0) ans2 = 0.0;
    ll intpart = (ll)ans2;
    ld fracpart = ans2 - intpart;
    intpart += (ll)(ans1 + 0.5);
    
    printf("%I64d",intpart);
    printf(".");
    REP(i,18){
        fracpart *= 10.0;
        for(j=9;;j--) if(j <= fracpart) break;
        printf("%d",j);
        fracpart -= j;
    }
    printf("\n");
    
    return 0;
}
