#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <cstdlib>
#include <utility>
#include <memory.h>
#include <cassert>
#include <iterator>
#include <bitset>
#include <iomanip>
#include <complex>
#include <queue>
#include <ctime>
#include <deque>
#include <stack>
#include <set>
#include <map>
 
using namespace std;
 
#define pb push_back
#define mp make_pair	
#define F first
#define S second

const int N = 100500;

int n;
int t[N], f[N];

int main() {
	scanf("%d", &n);
	for (int i = 1; i <= n; i++) {
		scanf("%d", &t[i]);
	}
	int sum = 0;
	int idx;
	int last_time = 0;
	int its_value = 0;
	f[0] = 0;
	t[0] = 0;
	set< pair<int, int> > s1, s2;
	set< pair<int, int> > :: iterator it;
	s1.insert(mp(0, 0));
	s2.insert(mp(0, 0));
	for (int i = 1; i <= n; i++) {
		f[i] = f[i - 1] + 20;
		while ((int)s1.size() > 0) {
			it = s1.begin();
			idx = it -> S;
			last_time = t[idx + 1] - 1;
			if (last_time + 1440 < t[i]) {
				s1.erase(it);
				continue;
			} else {
				break;
			}
		}
		while ((int)s2.size() > 0) {
			it = s2.begin();
			idx = it -> S;
			last_time = t[idx + 1] - 1;
			if (last_time + 90 < t[i]) {
				s2.erase(it);
				continue;
			} else {
				break;
			}
		}
		if ((int)s1.size() > 0) {
			it = s1.begin();
			idx = it -> S;
			f[i] = min(f[i], f[idx] + 120);
		}
		if ((int)s2.size() > 0) {
			it = s2.begin();
			idx = it -> S;
			f[i] = min(f[i], f[idx] + 50);
		}
		its_value = f[i] - sum;
		sum += its_value;
		printf("%d\n", its_value);
		s1.insert(mp(f[i], i));
		s2.insert(mp(f[i], i));
	}
	return 0;
}