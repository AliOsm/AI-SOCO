#include <cstdio>
#include <algorithm>

using namespace std;

class domino
{
public:
	int x, h, id, ans;
	domino () {};
	domino (int a, int b) : x(a), h(b) {};
};

bool operator < (domino a, domino b)
{
	return a.x < b.x;
}

const int N = 100001;

int n, tree[N], seg[4 * N];

domino dom[N];

void update(int pos, int val, int v = 1, int lo = 0, int hi = n)
{
	if (hi - lo == 1)
		seg[v] = val;
	else
	{
		int mid = (lo + hi) / 2;
		if (pos < mid)
			update(pos, val, 2 * v, lo, mid);
		else
			update(pos, val, 2 * v + 1, mid, hi);
		seg[v] = max(seg[2 * v], seg[2 * v + 1]);
	}
}

int get_max(int p, int q, int v = 1, int lo = 0, int hi = n)
{
	if (p == lo && hi == q)
		return seg[v];
	int mid = (lo + hi) / 2;
	if (q <= mid)
		return get_max(p, q, 2 * v, lo, mid);
	else if (p >= mid)
		return get_max(p, q, 2 * v + 1, mid, hi);
	else
		return max(get_max(p, mid, 2 * v, lo, mid), get_max(mid, q, 2 * v + 1, mid, hi));
}

bool comp(domino a, domino b)
{
	return a.id < b.id;
}

int main()
{
	scanf("%d", &n);
	for (int i = 0; i < n; ++i)
	{
		scanf("%d %d", &dom[i].x, &dom[i].h);
		dom[i].id = i;
	}
	sort(dom, dom + n);
	for (int i = n - 1; i >= 0; --i)
	{
		int pos = int(lower_bound(dom, dom + n, domino(dom[i].x + dom[i].h, 0)) - dom);
		if (pos == i + 1)
			dom[i].ans = i;
		else
			dom[i].ans = get_max(i + 1, pos);
		update(i, dom[i].ans);
	}
	for (int i = 0; i < n; ++i)
		dom[i].ans = dom[i].ans - i + 1;
	sort(dom, dom + n, comp);
	for (int i = 0; i < n; ++i)
		printf("%d ", dom[i].ans);
	puts("");
	return 0;
}
