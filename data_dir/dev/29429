#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
using namespace std;
typedef long long ll;
typedef pair <int,int> pii;

const int maxN = 100000 + 10;
vector <int> adj[maxN];
int sz[maxN]; //sz[i]: number of vertices in subttree with root i
bool mark[maxN];
int res[maxN];

void dfs(int v, int p = -1)
{
    sz[v] = 1;
    for (int i = 0 ; i < adj[v].size() ; i++)
    {
        int u = adj[v][i];
        if (!mark[u] && p != u) //nam gozari nashode va bachashe
        {
            dfs(u, v);
            sz[v] += sz[u];
        }
    }
}

void solve(int v, int col)
{   
    dfs(v);
    int cur = v;
    bool change = true;
    while (change) 
    {
        change = false;
        for (int i = 0 ; i < adj[cur].size() ; i++)
        {
            int u = adj[cur][i];
            if (sz[u] > sz[v] / 2 && sz[u] < sz[cur])
            {
                cur = u;
                change = true;
                break;
            }
        }
    }

    //cout << "Centroid: " << cur << endl;
    mark[cur] = true; //centroid to rang kardim
    res[cur] = col;
    for (int i = 0 ; i < adj[cur].size() ; i++)
    {
        int u = adj[cur][i];
        if (!mark[u])
        {
            //cout << "Solving child " << u << endl;
            solve(u, col + 1);
        }
    }
}

int32_t main()
{
    int n;
    scanf("%d", &n);
    for (int i = 1 ; i < n ; i++)
    {
        int v,u;
        scanf("%d %d", &v, &u);
        v--, u--;
        adj[v].pb(u);
        adj[u].pb(v);
    }    

    solve(0, 0);
    for (int i = 0 ; i < n ; i++)
        printf("%c ", char(res[i] + 'A'));
    return 0;
}