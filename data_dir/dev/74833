#define _USE_MATH_DEFINES
#include <array>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

ostream& operator <<(ostream& out, const pair<int, int>& a) {
  out << "(" << a.first << "," << a.second << ")";
  return out;
}
template <typename T>
ostream& operator <<(ostream& out, const vector<T>& a) {
  out << "["; bool first = true;
  for (auto& v : a) { out << (first ? "" : ", "); out << v; first = 0;} out << "]";
  return out;
}
template <typename T>
ostream& operator <<(ostream& out, const set<T>& a) {
  out << "{"; bool first = true;
  for (auto& v : a) { out << (first ? "" : ", "); out << v; first = 0;} out << "}";
  return out;
}
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;
mt19937 mrand(random_device{}());
int rnd(int x) { return mrand() % x; }

int main() {
  int k1, k2, k3, n;
  scanf("%d%d%d", &k1, &k2, &k3);
  n = k1 + k2 + k3;
  vector<int> a(k1), b(k2), c(k3);
  for (int i = 0; i < k1; ++i) {
    scanf("%d", &a[i]);
    --a[i];
  }
  for (int i = 0; i < k2; ++i) {
    scanf("%d", &b[i]);
    --b[i];
  }
  for (int i = 0; i < k3; ++i) {
    scanf("%d", &c[i]);
    --c[i];
  }
  sort(a.begin(), a.end());
  sort(b.begin(), b.end());
  sort(c.begin(), c.end());
  vector<int> la(n + 1), lb(n + 1), lc(n + 1);
  vector<int> ra(n + 1), rb(n + 1), rc(n + 1);
  int idx_a, idx_b, idx_c;
  la[0] = k1; lb[0] = k2; lc[0] = k3;
  idx_a = idx_b = idx_c = 0;
  for (int i = 1; i <= n; ++i) {
    la[i] = la[i - 1]; lb[i] = lb[i - 1]; lc[i] = lc[i - 1];
    if (idx_a < k1 && a[idx_a] == i - 1) {
      la[i]--;
      ++idx_a;
    } else if (idx_b < k2 && b[idx_b] == i - 1) {
      lb[i]--;
      ++idx_b;
    } else {
      lc[i]--;
      ++idx_c;
    }
  }
  ra[0] = rb[0] = rc[0] = 0;
  idx_a = idx_b = idx_c = 0;
  for (int i = 1; i <= n; ++i) {
    ra[i] = ra[i - 1]; rb[i] = rb[i - 1]; rc[i] = rc[i - 1];
    if (idx_a < k1 && a[idx_a] == i - 1) {
      ra[i]++;
      ++idx_a;
    } else if (idx_b < k2 && b[idx_b] == i - 1) {
      rb[i]++;
      ++idx_b;
    } else {
      rc[i]++;
      ++idx_c;
    }
  }
  // trace(a);
  // trace(b);
  // trace(c);
  // for (int i = 0; i <= n; ++i) {
  //   trace(i, la[i], ra[i], lb[i], rb[i], lc[i], rc[i]);
  // }
  int best = INF;
  vector<int> L(n + 1), R(n + 1);
  for (int i = 0; i <= n; ++i) {
    L[i] = la[i] + rb[i];
    R[i] = lb[i] + rc[i];
    // trace(i, L[i], R[i]);
  }
  int sofar = INF;
  for (int i = 0; i <= n; ++i) {
    sofar = min(sofar, L[i]);
    int cur = R[i] + sofar;
    best = min(best, cur);
  }
  printf("%d\n", best);
  return 0;
}
