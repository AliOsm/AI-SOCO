#include <bits/stdc++.h>

#define ff(i,s,e) for(int i=(s);i<(e);i++)
#define fr(i,s,e) for(int i=(e);i-->(s);)
#define FF(i,s,e) for(int i=(s);i<=(e);i++)
#define Fr(i,s,e) for(int i=(e);i>=(s);i--)

#define gcd(a,b) __gcd(a,b)
#define all(a) a.begin(),a.end()
#define ln putchar('\n')
#define sp putchar(' ')

using namespace std;

void init(int i){
#ifndef ONLINE_JUDGE
  char str[100];sprintf(str,"xx/%d.txt",i);freopen(str,"r",stdin);
#endif
}

typedef long long ll;

typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<pii> vpii;
typedef vector<ll> vll;
typedef vector<vi> vvi;

template<class T>inline int pr(const T&v);
template<class T, class...Args> inline int pr(const T&a,const Args (&... args));

inline int scan(int&i){return scanf("%d",&i);}
inline int scan(ll&i){return scanf("%" PRId64,&i);}
inline int scan(double&i){return scanf("%lf",&i);}
inline int scan(char&i){int c;while((c=getchar())!=EOF&&c<=' ');i=c;return c!=EOF;}
inline int scan(string&i){int c;while((c=getchar())!=EOF&&c<=' ');while(c>' ')i+=c,c=getchar();return i.size();}

inline int pr(const int& i){printf("%d",i);}
inline int pr(const bool i){printf("%d",i);}
inline int pr(const ll&i){printf("%" PRId64,i);}
inline int pr(const double&i){printf("%.12f",i);}
inline int pr(const char&i){putchar(i);}
inline int pr(const char*i){printf("%s",i);}
inline int pr(const string&i){for(char c:i)pr(c);}

template<class T>inline int scan(vector<T>&v){for(T&i:v)scan(i);}
template<class T>inline int pr(const vector<T>&v){if(v.empty())return 0;pr(v[0]);ff(i,1,v.size())pr(' '),pr(v[i]);}
template<class T,class U>inline int pr(const pair<T,U>&p){pr(p.first,p.second);}
template<class T>inline int prln(const vector<T>&v){ff(i,0,v.size())pr(v[i]),pr('\n');}
template<class T, class...Args> inline int scan(T&a,Args (&... args)){return scan(a),scan(args...);}
template<class T, class...Args> inline int pr(const T&a,const Args (&... args)){pr(a),pr(' '),pr(args...);}

template<class T>inline int pr(const T&v){v.print();}

template<class T, class U> inline void smax(T&a,const U&b){if(a<b)a=b;}
template<class T, class U> inline void smin(T&a,const U&b){if(a>b)a=b;}

template<class T> vector<T>& operator +=(vector<T>&v,const T&a){v.push_back(a);return v;}

const int inf = ~(1<<31);
const ll MOD = 1E9+7;
const ll linf = 1E16;

struct road{
  int to, id;
  void print()const{
    pr(to,id);
  }
};



struct problem{
  int n;
  int start;
  vector<road> v;
  vector<int> d;
  vector<int> sources;
  vvi jl;
  
  void make_jl(){
    jl.resize(n);
    ff(i,0,n)jl[i]+=v[i].to;
    ff(x,0,20){
      ff(i,0,n){
        if(jl[i][x]==-1)jl[i]+=-1;
        else
          jl[i]+=jl[jl[i][x]][x];
      }
    }
  }
  
  int jmp_to(int dist,int from){
    int steps = d[from]-dist;
    ff(i,0,20){
      if(!steps)break;
      if(steps&1)from=jl[from][i];
      steps>>=1;
    }
    return from;
  }
  
  void set_source(int a, int b){
    sources[a]++;
    sources[b]++;
    int ma = min(d[a],d[b]), mi = 0;
    while(mi<=ma){
      int me = (ma+mi)/2;
      if(jmp_to(me,a)==jmp_to(me,b))mi=me+1;
      else ma=me-1;
    }
    if(ma!=-1)sources[jmp_to(ma,a)]-=2;
  }
  
  
  int solve(){
    vi ans(n-1);
    vpii ord(n);
    ff(i,0,n)ord[i]={d[i],i};
    sort(all(ord),greater<pii>());
    for(pii p:ord){
      int cur = p.second;
      int val = sources[cur];
      if(val==0)continue;
      int nex = v[cur].to;
      ans[v[cur].id]=val;
      sources[nex]+=val;
    }
    pr(ans);
  }
  
  
  
  void direct_roads(int cur, int last,int dist,vector<vector<road> >&u ){
    d[cur]=dist;
    for(road&r:u[cur] ){
      if(r.to==last)continue;
      v[r.to]={cur,r.id};
      direct_roads(r.to,cur,dist+1,u);
    }
  }
  
  int get_input(){
    scan(n);
    vector<vector<road> > u(n);
    v.resize(n,{-1,-1});
    d.resize(n);
    sources.resize(n,0);
    ff(i,0,n-1){
      int x, y;scan(x,y);
      x--,y--;
      u[y]+={x,i};
      u[x]+={y,i};
    }
    ff(i,0,n)if(u[i].size()==1){start=i;break;}
    direct_roads(start,-1,0,u);
    make_jl();
    int m;scan(m);
    ff(i,0,m){
      int x, y;scan(x,y);
      x--,y--;
      set_source(x,y);
    }
  }
};


main(){
  init(1);
  problem a;
  a.get_input();
  a.solve();
}

