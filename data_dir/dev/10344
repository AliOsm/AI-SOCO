#include <algorithm> 
#include <iostream> 
#include <valarray> 
#include <iomanip> 
#include <fstream> 
#include <sstream> 
#include <cstdlib> 
#include <cstring> 
#include <cassert> 
#include <numeric> 
#include <complex> 
#include <cstdio> 
#include <string> 
#include <vector> 
#include <bitset> 
#include <ctime> 
#include <cmath> 
#include <queue> 
#include <stack> 
#include <deque> 
#include <map> 
#include <set> 
#include <ext/algorithm>
#include <ext/rope>

using namespace __gnu_cxx;
using namespace std; 

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i) 
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i) 
#define error(x) cout << #x << " = " << (x) << endl; 
#define all(n) (n).begin(), (n).end() 
#define Size(n) ((int)(n).size()) 
#define mk make_pair 
#define pb push_back 
#define F first 
#define S second 

int _;
#define scanf _ = scanf

typedef long long ll; 
typedef pair<int, int> pii; 
typedef pair<ll, ll> pll; 
typedef complex<double> point; 

template <class P, class Q> void smin(P &a, Q b) { if (b < a) a = b; } 
template <class P, class Q> void smax(P &a, Q b) { if (b > a) a = b; } 
template <class P, class Q> bool in(const P &a, const Q &b) { return a.find(b) != a.end(); }

string s;
int total = 0;

void check(string t) {
	if (t[0] == '0') return;
	map<char, char> mp, mp2;
	bool ok = true;
	FOR(i, 0, Size(s)) {
		if (s[i] == '?') continue;
		else if (isdigit(s[i])) ok &= s[i] == t[i];
		else if ('A' <= s[i] && s[i] <= 'Z') {
			if (mp.count(s[i])) {
				ok &= mp[s[i]] == t[i];
			}
			if (mp2.count(t[i])) {
				ok &= mp2[t[i]] == s[i];
			}
			mp[s[i]] = t[i];
			mp2[t[i]] = s[i];
		}
	}
	total += ok;
}

void gen(string cur) {
	if (Size(cur) == Size(s)) return check(cur);
	FOR(i, 0, 10) gen(cur+char(i+'0'));
}

int main() {
	cin >> s;
	gen("");
	cout << total << endl;
	return 0;
}

