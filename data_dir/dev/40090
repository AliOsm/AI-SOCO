#include <bits/stdc++.h>

using namespace std;

#define endl           '\n'
#define all(x)         x.begin(), x.end()
#define rall(x)        x.rbegin(), x.rend()
#define mem(x, y)      memset(x, y, sizeof x)

template <typename T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <typename T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <typename T> inline void umax(T &a, T b) {a = a > b ? a : b;}

const int N = (int) 2e5 + 5;
const int INF = (int) 1e9 + 7;
const long long MOD = (long long) 1e9 + 7;


int a[N], b[N], p[N], fen[N], pre[N], suf[N];
map <int, int> ID, RID, pos;

void modify(int x) {
    while (x < N) fen[x]++, x += x & -x;
}

int findSum(int x) {
    int res = 0;
    while (x > 0) res += fen[x], x -= x & -x;
    return res;
}

int main() {
    int m, n = 0; scanf("%d", &m);
    for (int i = 1; i <= m; i++) {
        scanf("%d%d", a + i, b + i);
        ID[a[i]] = ID[b[i]] = 1;
    }

    vector <int> v = {0};
    for (auto &i : ID) {
        i.second = ++n;
        RID[n] = i.first;
        p[n] = n;
        v.push_back(i.first);
    }
    // p[] holds compressed sequence after m changes
    // c[] holds actual sequence after m changes
    // v[] holds actual sorted sequence
    for (int i = 1; i <= m; i++) {
        swap(p[ID[a[i]]], p[ID[b[i]]]);
    }
    vector <int> c = {0};
    for (int i = 1; i <= n; i++) {
        c.push_back(RID[p[i]]);
        pos[c[i]] = v[i];
    }

    for (int i = 1, prv = 0, s = 0; i <= n; i++) {
        s += v[i] - prv - 1;
        pre[ID[v[i]]] = s;
        prv = v[i];
    }

    for (int i = n, prv = v[n] + 1, s = 0; i; i--) {
        s += prv - v[i] - 1;
        suf[ID[v[i]]] = s;
        prv = v[i];
    }

    long long res = 0;
    for (int i = n; i >= 1; i--) {
        if (c[i] < pos[c[i]]) {
            res += pre[ID[pos[c[i]]]] - pre[ID[c[i]]];
        } else if (c[i] > pos[c[i]]) {
            res += suf[ID[pos[c[i]]]] - suf[ID[c[i]]];
        }
    }
    for (int i = n; i >= 1; i--) {
        res += findSum(p[i] - 1);
        modify(p[i]);
    }
    printf("%lld\n", res);
    return 0;
}