#include<bits/stdc++.h>
#define fi first
#define se second
#define log2(a) log(n)/log(2)
#define show(a) cout<<a<<endl;
#define show2(a,b) cout<<a<<" "<<b<<endl;
#define show3(a,b,c) cout<<a<<" "<<b<<" "<<c<<endl;
#define tim printf("Time cost : %lf s\n",(double)clock()/CLOCKS_PER_SEC);
using namespace std;

typedef long long ll;
typedef long long LL;
typedef pair<int, int> P;
typedef pair<P, ll> LP;
const ll inf = 1e9 + 100;
const int N = 6e5 + 10;
const ll mod = 1e9 + 7;
const int base = 131;
const double pi = acos ( -1 );
const double eps = 1e-8;

//#define a(i,j) a[(i-1)*m+(j)]
//#define b(i,j) b[(i-1)*m+(j)]

unordered_map<ll, ll> mp;




ll t,n,x,ans,m,k,y;
ll vis[N],a[N];
int tol; //节点个数
ll val[20*N]; //点的值
int ch[20*N][2]; //边的值
int num[20*N];

void init()
{ //初始化
    tol=1;
    ch[0][0]=ch[0][1]=0;
}

void ins(ll x)
{ //往 01字典树中插入 x
    int u=0;
    for(int i=32;i>=0;i--)
    {
        int v=(x>>i)&1;
        if(!ch[u][v])
        { //如果节点未被访问过
            ch[tol][0]=ch[tol][1]=0; //将当前节点的边值初始化
            val[tol]=0; //节点值为0，表示到此不是一个数
            ch[u][v]=tol++; //边指向的节点编号
        }
        u=ch[u][v]; //下一节点
        num[u]++;
    }
    val[u]=x; //节点值为 x，即到此是一个数
}

void update(ll x,int c)
{
	int u=0;
	for(int i=32;i>=0;i--)
	{
		int v=(x>>i)&1;
		u=ch[u][v];
		num[u]+=c;
	}
}
ll query(ll x)
{ //查询所有数中和 x异或结果最大的数
    int u=0;
    for(int i=32;i>=0;i--)
    {
        int v=((x>>i)&1);
        //利用贪心策略，优先寻找和当前位不同的数
        if(ch[u][v]&&num[ch[u][v]]) u=ch[u][v];
        else u=ch[u][v^1];
    }
    return val[u]; //返回结果
}

int main()
{


	ios::sync_with_stdio ( false );
	cin.tie ( 0 );
	cout.tie ( 0 );

	cin>>n;
	init();
	for(int i=1;i<=n;i++)
		cin>>a[i];
	for(int i=1;i<=n;i++)
		cin>>x,ins(x);
	for(int i=1;i<=n;i++)
	{
		x=query(a[i]);
		cout<<(a[i]^x)<<" ";
		update(x,-1);
	}


}
