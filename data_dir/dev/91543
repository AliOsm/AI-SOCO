#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
const int N = 2e5+50;
const ll oo = 1e18;
const ll mod = 1e9+7;

string s[1010];
int sum[1010][1010],tmp[1010][1010],seg[2][4*1010];
bool vis[1010][1010];
int n,m,l,r,cur;

void build(){
	for(int i=1;i<=n;i++)
		for(int j=1;j<=m;j++)
			if(s[i-1][j-1] == '*')
				tmp[i][j] = 1;
	for(int i=1;i<=n;i++)
		for(int j=1;j<=m;j++)
			sum[i][j] = tmp[i][j] + sum[i][j-1] + sum[i-1][j] - sum[i-1][j-1];

}

int main(){
	cin>>n>>m;
	for(int i=0;i<n;i++)cin>>s[i];
	build();
	vector<pair<pair<int,int>,int>> ans;
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(s[i][j]=='.')continue;
			int md,lo=1,hi=min(i,min(n-i-1,min(j,m-j-1))),best = -1;
			while(lo<=hi){
				md = (lo+hi)/2;
				int right = sum[i+1][j+md+1] - sum[i][j+md+1] - sum[i+1][j+1] + sum[i][j+1];
				int left = sum[i+1][j] - sum[i+1][j-md] - sum[i][j] + sum[i][j-md];
				int up = sum[i][j+1] - sum[i][j] - sum[i-md][j+1] + sum[i-md][j];
				int down = sum[i+md+1][j+1] - sum[i+md+1][j] - sum[i+1][j+1] + sum[i+1][j];
				if(left+right+up+down == md*4){
					lo = md+1;
					best = md;
				}else hi = md-1;
			}
			if(best!=-1)ans.push_back({{i+1,j+1},best});
		}
	}
	for(int i=0;i<ans.size();i++){
		int x = ans[i].first.first-1;
		int y = ans[i].first.second-1;
		for(int j=x;j<=x+ans[i].second;j++)vis[j][y]=1;
		for(int j=x;j>=x-ans[i].second;j--)vis[j][y]=1;
		for(int j=y;j<=y+ans[i].second;j++)vis[x][j]=1;
		for(int j=y;j>=y-ans[i].second;j--)vis[x][j]=1;
	}
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			if(s[i][j] == '*' && !vis[i][j])return puts("-1"),0;
	cout << ans.size() << endl;
	for(int i=0;i<ans.size();i++)cout << ans[i].first.first << ' ' << ans[i].first.second << ' ' << ans[i].second << endl;
}