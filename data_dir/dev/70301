#include <iostream>
#include <algorithm>
#include <vector>
#include <string>

using namespace std;

vector<int> kmp(string s) {
  int n = s.size();
  vector<int> p(n + 1);
  p[0] = -1;
  int j = -1;
  for (int i = 0; i < n; i++) {
    while (j != -1 && s[i] != s[j]) j = p[j];
    p[i + 1] = ++j;
  }
  return p;
}

int main() {
  cin.tie(nullptr);
  ios_base::sync_with_stdio(false);
  string S, T;
  cin >> S >> T;
  int N = S.size();
  int M = T.size();
  vector<int> C(128);
  for (int i = 0; i < N; i++) {
    C[S[i]]++;
  }
  vector<int> P = kmp(T);
  string ans;
  int k = 0;
  for (;;) {
    if (C[T[k]] > 0) {
      C[T[k]]--;
      ans += T[k];
      k++;
      if (k == M) k = P[k];
    } else break;
  }
  ans += string(C['0'], '0');
  ans += string(C['1'], '1');
  cout << ans << endl;
}
