#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int,int> ii;
#define fore(i,o,p) for(int i=o,ggd=p;i<ggd;i++)
#define pb push_back
#define SZ(a) ((int)(a).size())
#define mset(a,b) memset(a,b,sizeof(a));
#define ALL(a) a.begin(),a.end()
#define fst first
#define snd second

const int N=128;
const ll INF=1e13;
int n,m,st=-1,en=-1;
bool vis[N];
string g[N];
ll d[N][N];
vector<int>p[N];
int v[1<<20],pa[1<<20];

void floyd(){ // O(n^3) . Replaces g with min distances
	fore(k,0,n)fore(i,0,n)fore(j,0,n)
		d[i][j]=min(d[i][j],d[i][k]+d[k][j]);
}

int get(int cur) {
  for(int j=min(m-1,cur+n);j>cur;j--) {
    if(v[j]==v[cur])continue;
    if(d[v[cur]][v[j]]==j-cur)return j;
  }
  assert(0);
}

int main() {
  ios::sync_with_stdio(false);
  memset(pa,-1,sizeof(pa));
  cin>>n;
  fore(i,0,n)cin>>g[i];
  fore(i,0,n)fore(j,0,n)d[i][j]=INF;
  fore(i,0,n)d[i][i]=0;
  fore(i,0,n)fore(j,0,n)if(g[i][j]=='1')d[i][j]=1;
  floyd();
  // fore(i,0,n){fore(j,0,n)cout<<d[i][j]<<" ";cout<<endl;}
  cin>>m;
  fore(i,0,m)cin>>v[i],v[i]--;
  int cur=0;
  vector<int>res={v[cur]};
  while(cur!=m-1)cur=get(cur),res.pb(v[cur]);
  cout<<SZ(res)<<"\n";
  for(int i:res)cout<<i+1<<" ";
  cout<<endl;
}