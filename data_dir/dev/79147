#include <bits/stdc++.h>
using namespace std;

inline void boostIO() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
}

int pi[101], dp[101][101][101]; string s, t, virus;

inline void KMP(const string& str) {
	for (int i = 1, k = 0; i < str.size(); ++i) {
		while (k > 0 && str[i] != str[k])
			k = pi[k - 1];
		if (str[i] == str[k])
			++k;
		pi[i] = k;
	}
}

int solve(int i = 0, int j = 0, int k = 0) {
	if (k >= virus.size())
		return -1e9;
	if (i >= s.size() || j >= t.size())
		return 0;

	int& ret = dp[i][j][k];

	if (~ret)
		return ret;

	ret = max(solve(i + 1, j, k), solve(i, j + 1, k));

	if (s[i] == t[j]) {
		while (k > 0 && s[i] != virus[k])
			k = pi[k - 1];
		ret = max(ret, solve(i + 1, j + 1, k + (s[i] == virus[k])) + 1);
	}

	return ret;
}

void printAns(int i = 0, int j = 0, int k = 0) {
	if (i >= s.size() || j >= t.size()) {
		cout << endl;
		return;
	}

	if (solve(i, j, k) == solve(i + 1, j, k))
		return printAns(i + 1, j, k);
	if (solve(i, j, k) == solve(i, j + 1, k))
		return printAns(i, j + 1, k);

	cout << s[i];
	while (k > 0 && s[i] != virus[k])
		k = pi[k - 1];
	printAns(i + 1, j + 1, k + (s[i] == virus[k]));
}

int main() {
	boostIO();
	cin >> s >> t >> virus;
	memset(dp, -1, sizeof(dp));
	KMP(virus);

	if (solve() == 0)
		cout << 0 << endl;
	else
		printAns();
	return 0;
}