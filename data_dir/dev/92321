#ifndef _GLIBCXX_NO_ASSERT
#include <cassert>
#endif
#include <cctype>
#include <cerrno>
#include <cfloat>
#include <ciso646>
#include <climits>
#include <clocale>
#include <cmath>
#include <csetjmp>
#include <csignal>
#include <cstdarg>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

#if __cplusplus >= 201103L
#include <ccomplex>
#include <cfenv>
#include <cinttypes>
#include <cstdbool>
#include <cstdint>
#include <ctgmath>
#include <cwchar>
#include <cwctype>
#endif

// C++
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>

#if __cplusplus >= 201103L
#include <array>
#include <atomic>
#include <chrono>
#include <condition_variable>
#include <forward_list>
#include <future>
#include <initializer_list>
#include <mutex>
#include <random>
#include <ratio>
#include <regex>
#include <scoped_allocator>
#include <system_error>
#include <thread>
#include <tuple>
#include <typeindex>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
#endif



#define ll          long long
#define pb          push_back
#define mp          make_pair
#define pii         pair<int,int>
#define vi          vector<int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define endl        '\n'
#define rep(i,a,b)  for(int i=a;i<b;i++)
using namespace std;

string to_string(string s) {
  return '"' + s + '"';
}

string to_string(const char* s) {
  return to_string((string) s);
}

string to_string(bool b) {
  return (b ? "true" : "false");
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}

#ifdef PRINTERS
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

int n,limit;

int dp[51][51][101];
int Comb[51][51];
int totfif=0,tothund=0;
int C(int n,int r){
  return Comb[n][r];
}
int get(int fif,int hund,int steps){
  if(dp[fif][hund][steps]>=0)return dp[fif][hund][steps];
  int& ans=dp[fif][hund][steps];
  if(steps==1){
    if(fif*50+hund*100<=limit){
      return ans=1;
    }
    else{
      return ans=0;
    }
  }
  else{
    ans=0;
    for(int j=0;j<=fif;j++){
      for(int k=0;k<=hund;k++){
        if(j+k==0)continue;
        ll temp=0;
        if(j*50+k*100<=limit){
          int fifcnt=j+(totfif-fif);
          int hundcnt=k+(tothund-hund);
          for(int l=0;l<=fifcnt;l++){
            for(int h=0;h<=hundcnt;h++){
              if(l+h==0)continue;
              temp+=1LL*C(fifcnt,l)*C(hundcnt,h)%hell*C(fif,j)%hell*C(hund,k)%hell*get(fif-j+l,hund-k+h,steps-1)%hell;
              temp%=hell;
            }
          }
        }
        else{
          break;
        }
        ans+=temp;
        ans%=hell;
      }
    }
    return ans;
  }
}

void solve(){
  memset(dp,-1,sizeof dp);
  cin>>n>>limit;
  rep(i,0,n){
    int temp;
    cin>>temp;
    if(temp==50)totfif++;
    else tothund++;
  }
  rep(i,1,101){
    if(get(totfif,tothund,i)){
      cout<<i*2-1<<endl;
      cout<<get(totfif,tothund,i)<<endl;
      return;
    }
  }
  cout<<-1<<endl;
  cout<<0<<endl;
}

int main(){
  rep(i,0,51){
    Comb[i][0]=1;
    Comb[i][i]=1;
    rep(j,1,i){
      Comb[i][j]=(Comb[i-1][j-1]+Comb[i-1][j])%hell;
    }
  }
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  int t=1;
//  cin>>t;
  while(t--){
    solve();
  }
  return 0;
}
