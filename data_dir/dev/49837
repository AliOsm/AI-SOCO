#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>
#include <queue>
#include <deque>
#include <map>
#include <stack>
#include<bitset>
#include<list>
#include<cassert>
#include<numeric>
 
using namespace std;

using namespace std;
 
const int mod = 1000 * 1000 * 1000 + 7;
const int N = 5 * 1000 + 5;
long long n, a, b, k;
long long dp[N][N];
long long ps[N];
long long ans = 0;
// dp[i][j] = the number of ways to reach level j in i steps;
// dp[i][j] = dp[i - 1][0] + dp[i - 1][1] + dp[i - 1][2] + ... dp[
// answere = dp[k][1] + dp[k][2] + ... + dp[k][n];
void input()
{

	cin >> n >> a >> b >> k;
}
void partialSum(int step)
{
	ps[0] = 0;
	for (int i = 1; i <= n; i++)
		ps[i] = (ps[i - 1] + dp[step][i]) % mod;
}
void update(int i, int j)
{
	if (j > b)
	{
		//p[i][j] = (partial[n] - partial[j - (j - b - 1)/2 - 1] - dp[i-1][j]) % MOD
		dp[i][j] = (ps[n] - ps[j - (j - b - 1) / 2 - 1] - dp[i - 1][j]) % mod;
		dp[i][j] += mod;
		dp[i][j] = dp[i][j] % mod;
		return;
	}
	if (j == b)
	{
		dp[i][j] = 0;
		dp[i][j] += mod;
		dp[i][j] = dp[i][j] % mod;
		return;
	}
	if (j < b)
	{
		dp[i][j] = (ps[j + (b - j - 1) / 2] - dp[i - 1][j]) % mod;
	}
	dp[i][j] += mod;
	dp[i][j] = dp[i][j] % mod;
}

int main() 
{
	input();
	dp[0][a] = 1;
	for (int i = 1; i <= n; i++)
		ps[i] = ps[i - 1] + dp[0][i];
	for (int i = 1; i <= k; i++)
	{
		for (int j = 1; j <= n; j++)
			update(i, j);
		partialSum(i);
	}
	for (int i = 1; i <= n; i++)
	{
		ans += dp[k][i];
		ans += mod;
		ans = ans % mod;
	}
	cout << ans << endl;


}
 

   
