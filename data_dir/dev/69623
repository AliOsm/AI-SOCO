
// In the name of God
// Code by: mrMaster

#include <bits/stdc++.h>

using namespace std;

inline int in() {int x; scanf("%d",&x); return x;}
#define debug(x) cerr << #x << '=' << (x) << endl
#define FOR(i,j,k) for(int i=j;i<k;++i)
#define bpc __builtin_popcount
#define blz __builtin_clz
#define btz __builtin_ctz
#define Size(x) ((int)(x).size())
#define endl '\n'
#define boost ios_base :: sync_with_stdio(false) , cin.tie(0) , cout.tie(0)
#define pb push_back

typedef long long ll;
typedef long double ld;
typedef pair<int,int>pii;

const int INF = 1e9 + 10;
const ll LINF = 1000ll*1000*1000*1000*1000*1000 + 100;
const int MN = 100 + 10;

int n,m;
vector<int>adj[2*MN] , rev[2*MN];
vector<int>topol;
int ans[2*MN];
bool mk[2*MN];
int col[2*MN];

int Not(const int &a)
{
	if(a >= n) return a-n;
	else return n+a;
}

void make(int a, int b)
{
	adj[Not(a)].pb(b) , adj[Not(b)].pb(a);
	rev[b].pb(Not(a)) , rev[a].pb(Not(b));
}

void dfs(int s)
{
	mk[s] = true;
	for(int i=0;i<Size(adj[s]);++i){
		if(!mk[adj[s][i]]) dfs(adj[s][i]);
	}
	topol.pb(s);
}

void sfd(int s , int c)
{
	if(!ans[s]) ans[Not(s)] = 1;
	mk[s] = true , col[s] = c;
	for(int i=0;i<Size(rev[s]);++i){
		if(!mk[rev[s][i]]) sfd(rev[s][i] , c);
	}
}

void fail()
{
	cout << "Impossible\n";
	exit(0);
}

void input()
{
	cin >> n >> m;
	for(int i=0;i<m;++i){
		int a,b,c;
		cin >> a >> b >> c;
		--a, --b;
		if(c) make(Not(a) , b) , make(a , Not(b));
		else make(a , b) , make(Not(a) , Not(b));
	}
}

void solve()
{
	for(int i=0;i<2*n;++i)
		if(!mk[i]) dfs(i);
	memset(mk , 0 , sizeof mk);
	int counter = 0;
	reverse(topol.begin() , topol.end());
	for(int i=0;i<Size(topol);++i)
		if(!mk[topol[i]]) sfd(topol[i] , counter++);
	for(int i=0;i<n;++i) 
		if(col[i] == col[Not(i)]) fail();
	reverse(topol.begin() , topol.end());
	memset(mk , 0 , sizeof mk);
	for(int i=0;i<Size(topol);++i){
		int v = topol[i];
		if(mk[col[v]]) continue;
		if(mk[col[Not(v)]]){
			mk[col[v]] = true;
			ans[col[v]] = !ans[col[Not(v)]];
			continue;
		}
		ans[col[v]] = mk[col[v]] = 1;
	}
	vector<int>R;
	for(int i=0;i<n;++i)
		if(ans[col[i]]) R.pb(i);
	cout << Size(R) << endl;
	for(int i=0;i<Size(R);++i) cout << R[i]+1 << ' ';
	cout << endl;
}

int main()
{
	boost;
	input();
	solve();
	return 0;
}

