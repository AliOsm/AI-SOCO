#include "assert.h"
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

struct node {
	LL result, valPlus, valMinus;
};

ostream& operator << (ostream& os, node &n) {
	cout << '(' << n.result << ' ' << n.valPlus << ' ' << n.valMinus << ')';
}

node dummyItem = { IntMinVal , IntMinVal , IntMinVal };

template <typename T>
class MinTree {
	public:
	int gp2(int n) {
		int x = 2;
		while (x < n) x *= 2;
		return x;
	}
	
	int n;
	vector<T> data;
		
	void reset() {
		data.assign(2*n, dummyItem);
	}
	
	void init(vector<LL> d, vector<LL> h) {
		n = gp2(d.size());
		reset();
		FOR (i, 0, d.size()) data[n + i] = { IntMinVal , h[i] + d[i] , h[i] - d[i] };
		FORD (i, n - 1, 1) data[i] = combine(data[i + i], data[i + i + 1]);
	}
	
	T combine(T p1, T p2) {
		return {
			max(max(p1.result, p2.result), p2.valPlus + p1.valMinus),
			max(p1.valPlus, p2.valPlus),
			max(p1.valMinus, p2.valMinus)
		};
	}
	
	void set(int i, T item) {
		i += n;
		data[i] = item;
		i /= 2;
		while (i) {
			data[i] = combine(data[2*i], data[2*i + 1]);
			i /= 2;
		}
	}
	
	void remove(int i) {
		i += n;
		data[i].first = IntMaxVal;
		i /= 2;
		while (i) {
			data[i] = combine(data[2*i], data[2*i + 1]);
			i /= 2;
		}
	}
	
	T getValue(int l, int r, int i, int fullL, int fullR) {
		if (l == fullL && r + 1 == fullR)
			return data[i];
		else {
			int m = (fullL + fullR) / 2;
			if (l < m && r >= m) return combine(getValue(l, m - 1, 2 * i, fullL, m),
												getValue(m, r, 2 * i + 1, m, fullR));
			else if (l < m) return getValue(l, r, 2 * i, fullL, m);
			else return getValue(l, r, 2 * i + 1, m, fullR);
		}
	}
	
	T getValue(int l, int r) {
		return getValue(l, r, 1, 0 , n);
	}
};

MinTree<node> tree;

int main() {
	srand (time(NULL));
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(int, n);
	next(int, k);
	
	auto d = readVector<LL>(n);
	auto h = readVector<LL>(n);
	
	auto full_length = accumulate(all(d), 0LL);
	d.insert(d.begin(), 0LL);
	d.pop_back();
	FOR (i, 1, n) d[i] += d[i - 1];
	
	for (auto &x : h) x += x;
	
	tree.init(d , h);
	
	while (k --> 0) {
		next(int, l); l--;
		next(int, r); r--;
		
		node result;
		if (l <= r) {
			if (l == 0) {
				result = tree.getValue(r + 1, n - 1);
			} else if (r == n - 1) {
				result = tree.getValue(0, l - 1);
			} else {
				auto res1 = tree.getValue(0, l - 1);
				auto res2 = tree.getValue(r + 1, n - 1);
				res1.valPlus += full_length;
				result = tree.combine(res2, res1);
			}
		} else {
			swap(l, r);
			l++;
			r--;
			
			result = tree.getValue(l, r);
		}
		// cout << result.valMinus << ' ' << result.valPlus << ' ';
		cout << result.result << endl;
	}
}