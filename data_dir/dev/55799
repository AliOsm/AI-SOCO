#include <bits/stdc++.h>
#include <cctype>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, std::greater<>, rb_tree_tag, tree_order_statistics_node_update>;
using namespace std;
typedef long long int64;
typedef unsigned long long uint64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//*/998244353;
const int base = 2187;
const double eps = 1e-9;
const int N = 300'000;
const int LOGN = 19;

int n, m, k;

void solve(int) {
  string a, s, t;
  cin >> a;
  bool as = false, at = false;
  for (;;) {
    size_t i = 0;
    bool f = true;
    while (i < a.size() && a[i] != ',' && a[i] != ';') {
      f &= isdigit(a[i]);
      ++i;
    }
    if (i && f && (a[0] != '0' || i == 1)) {
      if (as) {
        s += ',';
      }
      as = true;
      s += a.substr(0, i);
    } else {
      if (at) {
        t += ',';
      }
      at = true;
      t += a.substr(0, i);
    }
    if (i >= a.size()) {
      break;
    }
    a = a.substr(i + 1);
  }
  if (!as) {
    s = '-';
  } else {
    s = '"' + s + '"';
  }
  if (!at) {
    t = '-';
  } else {
    t = '"' + t + '"';
  }
  cout << s << '\n' << t << '\n';
}

void precalc() {
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i) {
    solve(i);
  }
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}
