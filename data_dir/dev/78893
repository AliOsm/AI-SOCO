#include<bits/stdc++.h>
using namespace std;

#define int           long long
#define S             second
#define F             first
#define pb            push_back
#define ppb           pop_back()
#define ppb           pop_back()
#define B(c)          (c).begin()
#define E(c)          (c).end()
#define all(c)        (c).begin(),(c).end()
#define rall(c)       (c).rbegin(),(c).rend() 
#define lb            lower_bound
#define si(c)         (int)((c).size())
#define lcm(a, b)      (a * (b / __gcd(a,b)))  
#define inf           (int)(2e18)
#define err           cerr << "move" << '\n';
#define endl          '\n'
#define pow(x, n)     (int)(pow(x, n))
#define mp            make_pair
#define tp            template
#define ty            typename

typedef vector<int>                           vi;
typedef pair<int,int>                         pii;
typedef vector<pii>                           vpi;
typedef priority_queue<pii, vector<pii>, greater<pii> > pq;

clock_t start;
mt19937_64 rng(chrono::system_clock::now().time_since_epoch().count());

tp<ty T1, ty T2, ty T3> struct query{
    T1 ss; T2 x; T3 y;
};
tp<ty T1, ty T2, ty T3> bool operator<(query<T1, T2, T3> &o1, query<T1, T2, T3> &o2){
    return o1.x < o2.x;
}
tp<ty T1, ty T2, ty T3> istream& operator>>(istream& in, query<T1, T2, T3> &q){
    in >> q.ss >> q.x >> q.y; return in;
}
tp<ty T1, ty T2, ty T3> ostream& operator<<(ostream& out, query<T1, T2, T3> &q){
    out << q.ss << " " << q.x << " " << q.y; return out;
}

void solve(){
	int n;
	cin >> n;
	int m = n, cnt = 0;
	while(m>=10){
		m /= 10;
		cnt++;
	}
	m++;
	m *= pow(10, cnt);
	cout << m-n << endl;
}

signed main(){

    ios_base::sync_with_stdio(0); 
    cin.tie(0); cout.tie(0);   

    int t = 1;
    start = clock(); 

    cout << fixed << setprecision(20);

    // #ifndef ONLINE_JUDGE
    // freopen("input.txt", "r", stdin); 
    // freopen("output.txt", "w", stdout);
    // freopen("error.txt", "w", stderr);
    // #endif

    //cin >> t;
    
    while(t--){
        solve();
    }

    double time_taken = double(clock() - start) / double(CLOCKS_PER_SEC); 
    //cerr << time_taken;
}
