#include <bits/stdc++.h>
#define F first
#define S second
#define pii pair<int, int>
#define pb push_back

using namespace std;

typedef long long ll;
typedef long double ld;

const int N = 3e5 + 10, SQ = 1800, BL = N/SQ + 10, M = 2;

int cnt[BL][N], lazy[N], a[N];
int p[N], last[N], rem[N], gp[N];

void add(int l, int r, int d){
	while(rem[l] != 0 && l < r){
		cnt[gp[l]][a[l]]--;
		a[l] += d;
		cnt[gp[l]][a[l]]++;
		l++;
	}
	while(rem[r] != 0 && l < r){
		cnt[gp[r - 1]][a[r - 1]]--;
		a[r - 1] += d;
		cnt[gp[r - 1]][a[r - 1]]++;
		r--;
	}
	for(int i=gp[l]; i<gp[r]; i++)
		lazy[i] += d;
	return ;
}

int get(int l, int r){
	int res = 0;
	while(rem[r] != 0 && l < r){
		if(a[r - 1] + lazy[gp[r - 1]] <= M)res++;
		r--;
	}
	for(int i=gp[l]; i<gp[r]; i++){
		for(int j=0; j<=M; j++)
			if(j >= lazy[i])
				res += cnt[i][j - lazy[i]];
	}
	return res;
}

int main(){
	ios_base::sync_with_stdio(0); cin.tie(0);
	int n; cin >> n;
	for(int i=0; i<n; i++){
		int x; cin >> x;
		--x;
		p[x] = i;
	}
	
	for(int i=0; i<n; i++){
		cnt[i/SQ][0]++;
	}
	
	for(int i=0; i<N; i++){
		rem[i] = i%SQ;
		gp[i] = i/SQ;
	}

	memset(last, -1, sizeof last);

	ll ans = 0;

	for(int r=0; r<n; r++){
		int v = p[r];
		
		add(last[v + 1] + 1, r + 1, 1);
		if(v)add(0, last[v - 1] + 1, -1);

		ans += get(0, r);

		last[v] = r;
	}

	cout << ans << endl;

}
