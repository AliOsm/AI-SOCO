#include <algorithm>
#include <cassert>
#include <iostream>
#include <vector>
using namespace std;

struct edge {
    int node, index;
};

int N, M, V;
vector<vector<edge>> adj;
vector<bool> matched;

void solve_case() {
    cin >> N >> M;
    V = 3 * N;
    adj.assign(V, {});

    for (int i = 0; i < M; i++) {
        int a, b;
        cin >> a >> b;
        a--; b--;
        adj[a].push_back({b, i});
        adj[b].push_back({a, i});
    }

    matched.assign(V, false);
    vector<int> matching;

    for (int i = 0; i < V; i++)
        if (!matched[i]) {
            for (edge &e : adj[i])
                if (!matched[e.node]) {
                    matched[i] = matched[e.node] = true;
                    matching.push_back(e.index);
                    break;
                }
        }

    if ((int) matching.size() >= N) {
        cout << "Matching" << '\n';

        for (int i = 0; i < N; i++)
            cout << matching[i] + 1 << (i < N - 1 ? ' ' : '\n');

        return;
    }

    cout << "IndSet" << '\n';
    int count = 0;

    for (int i = 0; i < V && count < N; i++)
        if (!matched[i])
            cout << i + 1 << (count++ < N - 1 ? ' ' : '\n');

    assert(count >= N);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int T;
    cin >> T;

    while (T-- > 0)
        solve_case();
}
