#include<bits/stdc++.h>
#define CLR(a)              memset(a, 0, sizeof(a))
#define SET(a, x)           memset(a, x, sizeof(a))
#define SORT(v)             sort(v.begin(), v.end())
#define REV(v)              reverse(v.begin(), v.end())
#define FOR(i, n)           for (int i=0; i<n; i++)
#define FOR1(i, n)          for (int i=1; i<=n; i++)
#define ROF(i, n)           for (int i=n-1; i>=0; i--)
#define ROF1(i, n)          for (int i=n; i>=1; i--)
#define LOOP(i, x, n)       for (int i=x; i<=n; i++)
#define READ(x)             freopen(x, "r", stdin);
#define WRITE(x)            freopen(x, "w", stdout);
#define fastIO()            ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define PI                  acos(-1.0)
#define pb                  push_back
#define mp                  make_pair
#define fi                  first
#define se                  second

using namespace std;

typedef long long              ll;
typedef unsigned long long     ull;
typedef vector<int>            vi;
typedef pair<int, int>         pii;
typedef pair<string, int>      psi;
typedef pair<char, int>        pci;

const double eps = 1e-9;

int fx[] = {-1, 1, 0, 0, -1, -1, 1, 1};
int fy[] = {0, 0, -1, 1, -1, 1, -1, 1};

int kx[] = {1, 1, 2, 2, -1, -1, -2, -2};
int ky[] = {2, -2, 1, -1, 2, -2, 1, -1};

int TLx[] = {0, -1, -1, 0};    int TLy[] = {-1, -1, 0, 0};
int TRx[] = {-1, -1, 0, 0};    int TRy[] = {0, 1, 1, 0};
int BLx[] = {0, 1, 1, 0};      int BLy[] = {-1, -1, 0, 0};
int BRx[] = {0, 1, 1, 0};      int BRy[] = {1, 1, 0, 0};

#define MAX 1000010

int n;
priority_queue < int > P1, P2;
int A[MAX], B[MAX];
ll sumA, sumB;

int main()
{
    cin >> n;
    FOR1(i, n){
        scanf("%d", &A[i]);
        P1.push(A[i]);
    }

    FOR1(i, n){
        scanf("%d", &B[i]);
        P2.push(B[i]);
    }

    if (n==1){
        if (A[1] > B[1]) cout << A[1] - B[1] << endl;
        else cout << 0 << endl;
        return 0;
    }

    //cout << P1.size() << ' ' << P2.size() << endl;

    bool turn = true;
    while(true){
        if (P1.empty() && P2.empty()) break;
       // cout << P1.size() << ' ' << P2.size() << endl;
        if (turn){
            turn = false;
            if (P1.empty() && !P2.empty()){
                P2.pop();
            }
            else if (!P1.empty() && P2.empty()){
                sumA += P1.top();
                P1.pop();
            }

            else if (P1.top() < P2.top()) P2.pop();
            else{
                sumA += P1.top();
                P1.pop();
            }
        }

        else{
            turn = true;
            if (P2.empty() && !P1.empty()){
                P1.pop();
            }
            else if (!P2.empty() && P1.empty()){
                sumB += P2.top();
                P2.pop();
            }

            else if (P2.top() < P1.top()) P1.pop();
            else{
                sumB += P2.top();
                P2.pop();
            }
        }
    }
    cout << sumA - sumB << endl;
    return 0;
}



