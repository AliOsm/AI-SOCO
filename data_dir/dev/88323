#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define M 105
#define MOD 1000000007

int ara[M];
int sz;

ll powi(ll a, ll b)
{
    ll p;
    if(!b) return 1;
    p = powi(a, b/2);
    p = (p*p)%MOD;
    if(b%2) p = (p*a)%MOD;
    return p;
}

ll mmi(ll x)
{
    return powi(x, MOD-2);
}

struct matrix
{
    ll ara[M][M];

    matrix()
    {
        for(int i = 0; i < sz; i++)
        {
            for(int j = 0; j < sz; j++) ara[i][j] = 0;
        }
    }

    matrix operator*(const matrix& rhs)
    {
        matrix res;

        for(int i = 0; i < sz; i++)
        {
            for(int j = 0; j < sz; j++)
            {
                for(int k = 0; k < sz; k++)
                {
                    res.ara[i][j] += ara[i][k]*rhs.ara[k][j];
                    res.ara[i][j] %= MOD;
                }
            }
        }

        return res;
    }
} idm;

matrix power(matrix x, int y)
{
    matrix res = idm;     // Initialize result

    while (y > 0)
    {
        // If y is odd, multiply x with result
        if (y & 1)
            res = res*x;

        // n must be even now
        y = y>>1; // y = y/2
        x = x*x;  // Change x to x^2
    }
    return res;
}

int main()
{
    int n, k;
    scanf("%d %d", &n, &k);

    for(int i = 1; i <= n; i++) scanf("%d", ara+i);

    int a = 0, b = 0;
    for(int i = 1; i <= n; i++)
    {
        if(ara[i] == 0) a++;
        else b++;
    }

    int x0 = 0;
    for(int i = 1; i <= a; i++) x0 += (ara[i] == 0);

    for(int i = 0; i <= a; i++) idm.ara[i][i] = 1;

    matrix rec;
    sz = a+1;

    for(int i = 0; i <= a; i++)
    {
        for(int j = 0; j <= a; j++)
        {
            if(i == j)
            {
                ll p = a*(a-1)/2+b*(b-1)/2+j*(a-j)+(a-j)*(b-a+j);
                p += MOD;
                //printf("--> %lld\n", p);
                ll q = n*(n-1)/2;

                rec.ara[i][j] = (p*mmi(q))%MOD;
            }
            else if(i == j+1)
            {
                ll p = (a-j)*(a-j);
                ll q = n*(n-1)/2;

                rec.ara[i][j] = (p*mmi(q))%MOD;
            }
            else if(i == j-1)
            {
                ll p = j*(b-a+j);
                p += MOD;
                ll q = n*(n-1)/2;

                rec.ara[i][j] = (p*mmi(q))%MOD;
            }

            //printf("%lld\n ", rec.ara[i][j]);
        }
        //printf("\n");
    }

    matrix res = power(rec, k);

    ll ans = res.ara[a][x0];
    printf("%lld\n", ans);

    return 0;
}