#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

#define PB push_back
//#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)

inline bool checkBit(ll n, int i) { return n&(1LL<<i); }
inline ll setBit(ll n, int i) { return n|(1LL<<i);; }
inline ll resetBit(ll n, int i) { return n&(~(1LL<<i)); }

const int mx = 3e5+5;
int n, m;
int a[mx][10];
int arr[1 << 8];
int idx1, idx2;

bool check( int key )
{
	memset( arr, -1, sizeof(arr) );
	idx1 = -1, idx2 = -1;
	for( int i = 0; i < n; ++i ) {
		int mask = 0;
		for( int j = 0; j < m; ++j ) {
			if( a[i][j] >= key ) mask = setBit( mask, j );
		}
		arr[mask] = i;
	}
	for( int i = 0; i < (1 << m); ++i ) {
		for( int j = i; j < (1 << m); ++j ) {
			if( (i|j) != (1 << m)-1 ) continue;
			if( arr[i] != -1 && arr[j] != -1 ) {
				idx1 = arr[i]+1, idx2 = arr[j]+1;
				return 1;
			}
		}
	}
	return 0;
}

int main()
{
	optimize();
	cin >> n >> m;
	for( int i = 0; i < n; ++i ) {
		for( int j = 0; j < m; ++j ) {
			cin >> a[i][j];
		}
	}
	ll lo = 0, hi = 1e9+5, mid;
	while( lo <= hi ) {
		mid = (lo + hi)/2;
		if( check(mid) ) lo = mid+1;
		else hi = mid-1;
	}
	check(hi);
	cout << idx1 << " " << idx2 << endl;
}





















