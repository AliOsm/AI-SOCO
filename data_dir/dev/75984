#include <bits/stdc++.h>
using namespace std;

using ll = long long;
const int N = 2e5+100;

int n, k, sum[3][3][N], glo;
char s[N];

int id(char x) {
	if(x == 'R') return glo;
	if(x == 'G') return (glo + 1) % 3;
	return (glo + 2) % 3;
}

int main() {
	int T; scanf("%d", &T);
	while(T--) {
		scanf("%d %d %s", &n, &k, s + 1);
		glo = 0;
		for(int i = 1; i <= n; i++) {
			for(int ch : {0, 1, 2})
				for(int mod : {0, 1, 2})
					sum[ch][mod][i] = sum[ch][mod][i - 1];
			sum[id(s[i])][i % 3][i]++;
		}
		int ans = n;
		for(int i = 1; i + k - 1 <= n; i++) {
			int here = 0;
			for(int ch : {0, 1, 2}) {
				for(int mod : {0, 1, 2}) {
					if(mod == (i + ch) % 3) continue;
					here += sum[ch][mod][i + k - 1] - sum[ch][mod][i - 1];
				}				
			}
			ans = min(ans, here);
		}

		glo++;
		for(int i = 1; i <= n; i++) {
			for(int ch : {0, 1, 2})
				for(int mod : {0, 1, 2})
					sum[ch][mod][i] = sum[ch][mod][i - 1];
			sum[id(s[i])][i % 3][i]++;
		}
		for(int i = 1; i + k - 1 <= n; i++) {
			int here = 0;
			for(int ch : {0, 1, 2}) {
				for(int mod : {0, 1, 2}) {
					if(mod == (i + ch) % 3) continue;
					here += sum[ch][mod][i + k - 1] - sum[ch][mod][i - 1];
				}				
			}
			ans = min(ans, here);
		}

		glo++;
		for(int i = 1; i <= n; i++) {
			for(int ch : {0, 1, 2})
				for(int mod : {0, 1, 2})
					sum[ch][mod][i] = sum[ch][mod][i - 1];
			sum[id(s[i])][i % 3][i]++;
		}
		for(int i = 1; i + k - 1 <= n; i++) {
			int here = 0;
			for(int ch : {0, 1, 2}) {
				for(int mod : {0, 1, 2}) {
					if(mod == (i + ch) % 3) continue;
					here += sum[ch][mod][i + k - 1] - sum[ch][mod][i - 1];
				}				
			}
			ans = min(ans, here);
		}
		printf("%d\n", ans);
	}
	return 0;
}