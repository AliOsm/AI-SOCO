#include <bits/stdc++.h>

#define x0 abc
#define y0 ABC
#define x1 abcd
#define y1 ABCD
#define xn abcde
#define yn ABCDE

#define l_b lower_bound
#define u_b upper_bound

#define fi first
#define se second
#define m_p make_pair

#define p_b push_back
#define po_b pop_back

#define ld long double
#define ll long long

#define cont continue
#define re return

#define MAXLL 9000000000000000000LL
#define MAXINT 2000000000

#define MINLL -9000000000000000000LL
#define MININT -2000000000

#define P acos(-1)

#define endl '\n'

#define OUT cout << "-------" << endl;

using namespace std;

char c[12001];

int que[12001][3], mx[181][12001], n, m, i, j, sum, nom, step, queB, queE, ans;

bool pole[12001];

    void add(int nom, int step)
    {
        if (pole[nom])
        re;

        que[queE][1] = nom;

        que[queE][2] = step;

        queE++;

        mx[i][nom] = step;

        pole[nom] = true;
    }

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> n >> m;

    for (i = 1; i <= n; i++) {
        for (j = 1; j <= m; j++) cin >> c[j];

        for (j = 1; j <= m; j++) pole[j] = false;

        queB = 0;

        queE = 1;

        for (j = 1; j <= m; j++)
            if (c[j] == '1') add(j, 0);

        if (queE == 1) {
            cout << "-1" << endl;

            re 0;
        }

        while (queB < queE - 1) {
            queB++;

            nom = que[queB][1];

            step = que[queB][2];

            if (nom - 1 >= 1)
            add(nom - 1, step + 1);
            else add(m, step + 1);

            if (nom + 1 <= m)
            add(nom + 1, step + 1);
            else add(1, step + 1);
        }
    }

    ans = MAXINT;

    for (j = 1; j <= m; j++) {
        sum = 0;

        for (i = 1; i <= n; i++) sum += mx[i][j];

        ans = min(ans, sum);
    }

    cout << ans << endl;

    re 0;
}
