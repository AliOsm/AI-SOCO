/// Bismillahir-Rahmanir-Rahim
#include <bits/stdc++.h>
#define        ll                              long long int
#define        FOR(x,y,z)                      for(int x=y;x<z;x++)
#define        pii                             pair<int,int>
#define        pll                             pair<ll,ll>
#define        CLR(a)                          memset(a,0,sizeof(a))
#define        SET(a)                          memset(a,-1,sizeof(a))
#define        N                               2002
#define        M                               1000000007
#define        pi                              acos(-1.0)
#define        ff                              first
#define        ss                              second
#define        pb                              push_back
#define        inf                              (1e9)+1000
#define        eps                             1e-9
#define        ALL(x)                          x.begin(),x.end()
using namespace std;
int dx[]={0,0,1,-1,-1,-1,1,1};
int dy[]={1,-1,0,0,-1,1,1,-1};
template < class T> inline T biton(T n,T pos){return n |((T)1<<pos);}
template < class T> inline T bitoff(T n,T pos){return n & ~((T)1<<pos);}
template < class T> inline T ison(T n,T pos){return (bool)(n & ((T)1<<pos));}
template < class T> inline T gcd(T a, T b){while(b){a%=b;swap(a,b);}return a;}
template <typename T> string NumberToString ( T Number ) { ostringstream ss; ss << Number; return ss.str(); }
inline int nxt(){int aaa;scanf("%d",&aaa);return aaa;}
inline ll lxt(){ll aaa;scanf("%lld",&aaa);return aaa;}
inline double dxt(){double aaa;scanf("%lf",&aaa);return aaa;}
template <class T> inline T bigmod(T p,T e,T m){T ret = 1;
for(; e > 0; e >>= 1){
    if(e & 1) ret = (ret * p) % m;p = (p * p) % m;
} return (T)ret;}
#ifdef sayed
     #define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template < typename Arg1 >
    void __f(const char* name, Arg1&& arg1){
        cerr << name << " is " << arg1 << std::endl;
    }
    template < typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names+1, ',');
        cerr.write(names, comma - names) << " is " << arg1 <<" | ";
        __f(comma+1, args...);
    }
#else
    #define debug(...)
#endif
///******************************************START******************************************
int ar[N];
int mark[5];
short int dp[N][N][3][3],ultadp[N][N][3][3];
int main(){
    #ifdef sayed
    //freopen("out.txt","w",stdout);
    // freopen("in.txt","r",stdin);
    #endif
    //ios_base::sync_with_stdio(false);
    //cin.tie(0);

    int n = nxt();
    FOR(i,1,n+1) ar[i] = nxt();
    for(int i = 1;i<=n;i++) {
        mark[1]=mark[2] = 0;
        int mx = 0;
        for(int j = i;j<=n;j++) {
            if(ar[j]==1){
                dp[i][j][1][1] = mark[1]+1;
                mark[1]++;
            } else {
                dp[i][j][1][2]= max(mark[1]+1,mx+1);
                mx = max(mx,(int)dp[i][j][1][2]);
                dp[i][j][2][2]=mark[2]+1;
                mark[2]++;
            }
          for(int k = 1;k<=2;k++) {
            for(int l = 1;l<=2;l++) {
                dp[i][j][k][l] = max(dp[i][j][k][l],dp[i][j-1][k][l]);
            }
          }
        }
    }
    for(int i = n;i>=1;i--) {


            mark[1]=mark[2] = 0;
            int mx = 0;
            for(int j = i;j>=1;j--) {
                if(ar[j]==1){
                    ultadp[i][j][1][1] = mark[1]+1;
                    mark[1]++;
                } else {
                    ultadp[i][j][1][2]= max(mark[1]+1,mx+1);
                    mx = max(mx,(int)ultadp[i][j][1][2]);
                    ultadp[i][j][2][2]=mark[2]+1;
                    mark[2]++;
                }
                for(int k = 1;k<=2;k++) {
                    for(int l = 1;l<=2;l++) {
                        ultadp[i][j][k][l] = max(ultadp[i][j][k][l],ultadp[i][j+1][k][l]);
                    }
                }
            }

    }
    int ans = 0;
    for(int i = 1;i<=n;i++) {
        for(int j =i;j<=n;j++) {
             ans =max(ans,dp[1][i-1][1][1]+ultadp[j][i][1][1]+dp[j+1][n][1][1]);
             ans =max(ans,dp[1][i-1][1][1]+ultadp[j][i][1][1]+dp[j+1][n][1][2]);
             ans =max(ans,dp[1][i-1][1][1]+ultadp[j][i][1][1]+dp[j+1][n][2][2]);
             ans =max(ans,dp[1][i-1][1][1]+ultadp[j][i][1][2]+dp[j+1][n][2][2]);
             ans =max(ans,dp[1][i-1][1][1]+ultadp[j][i][2][2]+dp[j+1][n][2][2]);
             ans =max(ans,dp[1][i-1][1][2]+ultadp[j][i][2][2]+dp[j+1][n][2][2]);
             ans =max(ans,dp[1][i-1][2][2]+ultadp[j][i][2][2]+dp[j+1][n][2][2]);
            //debug(i,j,ans);
        }
    }
    printf("%d\n",ans);


    return 0;
}
