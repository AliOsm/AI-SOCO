#include<bits/stdc++.h>
using namespace std;

#define ll             long long
#define LL             long long
#define pii            pair<int, int>
#define pll            pair<ll, ll>
#define pil            pair<int, ll>
#define pli            pair<ll, int>
#define vi             vector<int>
#define vl             vector<ll>
#define vii            vector<pii>
#define vll            vector<pll>
#define vil            vector<pil>
#define vli            vector<pli>
#define pb             push_back
#define ppb            pop_back
#define mp             make_pair
#define ff             first
#define ss             second
#define TN             typename
#define all(v)         v.begin(), v.end()
#define fill(a, b)     memset(a, b, sizeof a)
#define endl           '\n'

template <TN T> T gcd(T a, T b) {
    return !b ? a : gcd(b, a % b);
}
template <TN T> T lcm(T a, T b) {
    return a * (b / gcd(a, b));
}
template <TN T> T sqr(T a) {
    return a * a;
}
template <TN T> T cube(T a) {
    return a * a * a;
}
template <TN T> inline void smin(T &a, T b) {
    a = a < b ? a : b;
}
template <TN T> inline void smax(T &a, T b) {
    a = a > b ? a : b;
}

int in() {
    int n;
    scanf("%d", &n);
    return n;
}
ll Lin() {
    ll n;
    scanf("%lld", &n);
    return n;
}
double Din() {
    double n;
    scanf("%lf", &n);
    return n;
}

const ll inf = (ll)1e17;
const ll mod = (ll)1e9 + 7;
const int N = 2e5 + 5;

vi g[N];
int ans[N], par[N];
vi node;

void dfs(int u, int p = 0) {
    for(auto v : g[u]){
        if(p != v) par[v] = u, dfs(v, u);
    }
    node.pb(u);
}

int m1[N], m2[N];
int res[N];

int call(int k) {
    int ans = 0;
    for(auto u : node) {
        if(m1[u] + m2[u] + 1 >= k) ans++;
        else {
            int p = par[u];
            if(m2[p] < m1[u] + 1) {
                m2[p] = m1[u] + 1;
                if(m1[p] < m2[p]) swap(m1[p], m2[p]);
            }
        }
        m1[u] = m2[u] = 0;
    }
    return res[k] = ans;
}



void bs(int low, int high, int x, int y) {
    if(low > high) return;
    if(x == y) {
        for(int i = low; i <= high; i++) {
            res[i] = x;
        }
        return;
    }
    int mid = (low + high) >> 1;
    int val = call(mid);
    bs(low, mid - 1, val, y);
    bs(mid + 1, high, x, val);
}

int solve() {
    int n = in();
    for(int i = 1; i < n; i++) {
        int u = in(), v = in();
        g[u].pb(v);
        g[v].pb(u);
    }
    dfs(1);
    bs(1, n, 0, n);
    for(int i = 1; i <= n; i++) {
        printf("%d\n", res[i]);
    }
    return 0;
}

int main() {
    int test = 1, tc = 0;
    //scanf("%d", &test);
    while (test--) {
        //printf("Case %d: ", ++tc);
        solve();
    }
    return 0;
}



