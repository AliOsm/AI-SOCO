#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds ;
#define ll long long
#define ld long double
#define pp pair<ll,ll>
#define rep(i,a,b) for(ll i=a;i<b;i+=1)
#define all(c) (c).begin(),(c).end()
#define pb push_back
#define sz(a) int((a).size())
#define present(c,x) ((c).find(x) != (c).end())
#define mp make_pair
#define hell 1000000007
#define F first
#define S second
#define sll(x) scanf("%lld",&x)
#define si(x) scanf("%d",&x)
typedef tree<pp , null_type , less<pp> , rb_tree_tag , tree_order_statistics_node_update > ordered_set ;
ll t=1;
void solve()
{
    ll n ;
    cin >> n ;
    vector<ll> a(n+1,0),b(n+1,0),c(n+1,0) ;
    ll dp[n+5][5] ;
    memset(dp,0,sizeof(dp));
    rep( i , 1 , n + 1 )
        cin >> c[i] ;
    rep( i , 1 , n + 1 )
        cin >> b[i] ;
    rep( i , 1 , n + 1 )
        cin >> a[i] ;
    if(n==1){
        cout<<c[1];return;
    }
    dp[1][1]=0;
    dp[1][2]=c[1];
    dp[1][3]=b[1];
    dp[1][4]=c[1];
    rep( i , 2 , n )
    {
        dp[i][1]=max(dp[i-1][2]+a[i],dp[i-1][4]+a[i]);
        dp[i][2]=max(dp[i-1][2]+b[i],dp[i-1][4]+b[i]);
        dp[i][3]=max(dp[i-1][1]+b[i],dp[i-1][3]+b[i]);
        dp[i][4]=max(dp[i-1][1]+c[i],dp[i-1][3]+c[i]);
    }
    dp[n][1]=0;
    dp[n][2]=max(dp[n-1][2]+b[n],dp[n-1][4]+b[n]);
    dp[n][3]=max(dp[n-1][1],dp[n-1][3]);
    dp[n][4]=max(dp[n-1][1]+c[n],dp[n-1][3]+c[n]);
    cout<<max(max(dp[n][4],dp[n][2]),dp[n][3]);
}
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    //cin>>t;
    while(t--)
        solve() ;
    return 0 ;
}
