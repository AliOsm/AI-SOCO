#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

int n, m, a[6][1005], x[1005][1005], ans, dp[1005];
vector<int> g[1005];
int used[1005];

void dfs(int v, int d = 1) {
    used[v] = 1;
    dp[v] = 1;
    for (int to : g[v]) {
        if (!used[to]) {
            dfs(to, d + 1);
        }
        dp[v] = max(dp[v], dp[to] + 1);
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> m;
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            cin >> a[i][j];
        }
    }
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            for (int k = j + 1; k <= n; k++) {
                x[a[i][j]][a[i][k]]++;
            }
        }
    }
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (x[i][j] == m) {
                g[i].push_back(j);
            }
        }
    }
    for (int i = 1; i <= n; i++) {
        if (!used[i])
            dfs(i);
    }
    for (int i = 1; i <= n; i++)
        ans = max(ans, dp[i]);
    cout << ans;
}
