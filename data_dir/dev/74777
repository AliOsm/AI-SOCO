#include<bits/stdc++.h>
#define xx first
#define yy second
#define mp make_pair
#define pb push_back
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
const int MAXN=45+5;
const int M=1e5+5;

int mx=0;//�������(Ҫ��ʼ��Ϊ0)
int x[MAXN],tuan[MAXN];
int can[MAXN][MAXN];//can[i]��ʾ���Ѿ�ȷ���˾�ѡ����i���������������ڵ�ǰ���»��п��ܱ��ӽ�����ŵĽ�㼯��
int num[MAXN];//num[i]��ʾ�ɽ��i�����n���ɵ�����ŵĽ����
bool g[MAXN][MAXN];//�ڽӾ���(��1��ʼ)
bool dfs(int tot,int cnt)
{
	int i,j,k;
	if(tot==0)
	{
		if(cnt>mx)
		{
			mx=cnt;
			for(i=0;i<mx;i++)
			{
				tuan[i]=x[i];
			}
			return true;
		}
		return false;
	}
	for(i=0;i<tot;i++)
	{
		if(cnt+(tot-i)<=mx)return false;
		if(cnt+num[can[cnt][i]]<= mx)return false;
		k=0;
		x[cnt]=can[cnt][i];
		for(j=i+1;j<tot;j++)
		{
			if(g[can[cnt][i]][can[cnt][j]])
			{
				can[cnt+1][k++]=can[cnt][j];
			}
		}
		if(dfs(k,cnt+1))return false;
	}
	return false;
}
void MaxTuan(int n)
{
	int i,j,k;
	mx=1;
	for(i=n;i>=1;i--)
	{
		k=0;
		x[0]=i;
		for(j=i+1;j<=n;j++)
		{
			if(g[i][j])
			{
				can[1][k++]=j;
			}
		}
		dfs(k,1);
		num[i]=mx;
	}
}
map<string,int> id;
int tot=0;
int getid(const string &s)
{
	if(id.find(s)==id.end())
		id[s]=++tot;
	return id[s];
}
vector<int> Mutex;
int main()
{
	//freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	int n,m;
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++)
	{
		int op;
		scanf("%d",&op);
		if(op==1) Mutex.clear();
		else
		{
			string s;
			cin>>s;
			int v=getid(s);
			for(int u:Mutex)
				g[u][v]=g[v][u]=1;
			Mutex.pb(v);
		}
	}
	for(int i=1;i<=m;i++)
		for(int j=1;j<=m;j++)
			g[i][j]^=1;
	MaxTuan(m);
	printf("%d\n",mx);
	return 0;
}
