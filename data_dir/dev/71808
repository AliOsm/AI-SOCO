#include<bits/stdc++.h>
#define st first
#define nd second
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define umax(x,y) x=max(x,y)
#define umin(x,y) x=min(x,y)
#define ll long long 
#define ii pair<int,int>
#define iii pair<ii,int>
#define iiii pair<ii,ii>
#define sz(x) ((int) x.size())
#define orta ((bas+son)/2)
#define all(x) x.begin(),x.end()
#define pw(x) (1ll<<(x))
#define inf 1000000005
#define MOD 1000000007	
#define N 100005
#define M 100005
#define LOG 25
#define KOK 5880
#define EPS 0.0000001
using namespace std;

int n,m,d,x,y,tot,gcd,ans;
int dep[N],reg[N],dp[N][55];
bool vis[N];
char s[N][55];
vector<int> v1[N],v2[N],in[N];
stack<int> ss;

void dfs3(int node) {

	int nx=dep[node]+1;

	for(int i:v1[node]) {

		if(reg[i]!=reg[node]) continue ;

		if(dep[i]!=-1) {

			if(nx!=dep[i]) gcd=__gcd(gcd,abs(nx-dep[i]));

		}
		else {

			dep[i]=nx;

			dfs3(i);

		}

	}

}

int mx[55];

void spread(int rg) {

	gcd=d;

	for(int node:in[rg]) dep[node]=-1;

	dep[in[rg][0]]=0;

	dfs3(in[rg][0]);

	for(int i=0;i<d;i++) mx[i]=-inf;

	for(int i:in[rg]) {

		for(int j=0;j<d;j++) {

			int at0=(j-dep[i]%gcd+gcd)%gcd;

			umax(mx[at0],dp[i][j]);

		}

	}

	for(int i:in[rg]) {

		int yes[55]={0};

		for(int j=0;j<d;j++) {

			if(s[i][j]=='1') {

				int at0=(j-dep[i]%gcd+gcd)%gcd;
				yes[at0]=1;

			}

		}

		for(int j=0;j<gcd;j++) mx[j]+=yes[j];

	}

	for(int i:in[rg]) {

		for(int j=0;j<d;j++) {

			int at0=(j-dep[i]%gcd+gcd)%gcd;

			umax(dp[i][j],mx[at0]);

		}

	}

	for(int i:in[rg]) {

		for(int j:v1[i]) {

			if(reg[j]!=rg) {

				for(int k=0;k<d;k++) {

					umax(dp[j][(k+1)%d],dp[i][k]);

				}

			}

		}

	}

}

void dfs2(int node) {

	if(reg[node]) return ;

	reg[node]=tot;
	in[tot].pb(node);

	for(int i:v2[node]) dfs2(i);

}

void dfs(int node) {

	if(vis[node]) return ;

	vis[node]=1;

	for(int i:v1[node]) dfs(i);

	ss.push(node);

}

int main() {

	scanf("%d %d %d",&n,&m,&d);

	for(int i=1;i<=m;i++) {

		scanf("%d %d",&x,&y);

		v1[x].pb(y);
		v2[y].pb(x);

	}

	for(int i=1;i<=n;i++) dfs(i);

	while(!ss.empty()) {

		int node=ss.top();
		ss.pop();

		if(!reg[node]) {

			++tot;
			dfs2(node);

		}

	}

	for(int i=1;i<=n;i++) scanf("%s",s[i]);

	for(int i=1;i<=n;i++) for(int j=0;j<d;j++) dp[i][j]=-inf;

	dp[1][0]=0;

	for(int i=1;i<=tot;i++) spread(i);

	for(int i=1;i<=tot;i++) {

		for(int j=0;j<d;j++) umax(ans,dp[in[i][0]][j]);

	}

	printf("%d",ans);

}