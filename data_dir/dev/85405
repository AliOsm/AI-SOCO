#include <bits/stdc++.h>

using namespace std;

#define ll long long

const int N = (int)1e3 + 7;

int n;
ll sum = 0;
map < pair < int, pair < int, int > >, int > mp;

int ask(int a, int b, int c) {
	if (a > b) swap(a, b);
	if (a > c) swap(a, c);
	if (b > c) swap(b, c);
	if (mp.count({a, {b, c}})) return mp[{a, {b, c}}];
	printf("? %d %d %d\n", a, b, c);
	fflush(stdout);
	int asd;
	scanf("%d", &asd);
	mp[{a, {b, c}}] = asd;
	return asd;
}

ll get(int a, int b, int c, int d) {
	vector < int > vec;
	vec.push_back(ask(a, b, c));
	vec.push_back(ask(a, b, d));
	vec.push_back(ask(a, c, d));
	vec.push_back(ask(b, c, d));
	sort(vec.begin(), vec.end());
	return vec[0] * 1LL + vec.back();
}

ll ans[N];

main() {	
	scanf("%d", &n);
	ll sum = 0;
	for (int i = 1; i <= 5; i++) {
		vector < int > vec;
		for (int j = 1; j <= 5; j++) {
			if (i == j) continue;
			vec.push_back(j);
		}
		sum += get(vec[0], vec[1], vec[2], vec[3]);
	}
	sum /= 4;
	for (int i = 1; i <= 5; i++) {
		vector < int > vec;
		for (int j = 1; j <= 5; j++) {
			if (i == j) continue;
			vec.push_back(j);
		}
		ans[i] = sum - get(vec[0], vec[1], vec[2], vec[3]);
	}
	for (int i = 6; i <= n; i++) {
		ans[i] = get(1, 2, 3, i);
		ans[i] -= ans[1] + ans[2] + ans[3];
	}
	printf("! ");
	for (int i = 1; i <= n; i++) {
		printf("%I64d ", ans[i]);
	}
}
