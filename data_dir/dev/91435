/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(int x) { return 8*sizeof(int)-__builtin_clz(x); }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
 template<typename T> struct Fenwick {
    explicit Fenwick(ui N=0, T t=T()):N(1u<<logceil(N)),F(this->N,t),t(t){}
    explicit Fenwick(const vector<T>&A, T t=T()):N(1u<<logceil(A.size())),F(A),t(t){
        F.resize(N); fill(F.begin()+A.size(),F.end(),t);
        for(int i=0;i<N;i++){int j=i+lsb(i+1);if(j<N)F[j]+=F[i];}}
    void add(int i, T v){while(i<=N){F[i]+=v;i+=lsb(i+1);}}
    T sum(int i)const{T sum(t);while(i){sum+=F[i-1];i-=lsb(i);}return sum;}
    T range(int i,int j)const{j++; T s(t);while(j>i){s+=F[j-1];j-=lsb(j);}while(i>j){s-=F[i-1];i-=lsb(i);}return s;}
    T get(int i)const{return range(i,i);}
    void set(int i, T v) {add(i, v-get(i)); }
    constexpr int lsb(int i)const{return i&-i;}
    ui N;vector<T> F;T t;
};
#include <numeric>

class littleelephantandinversions {
public:
    int inv(vector<int>&A, int N) {
        Fenwick<int> F(N+1, 0);
        int x = 0;
        for (int&a:A) {
            x += F.range(a+1,N);
            F.add(a, 1);
        }
        return x;
    }

    int brute(const vector<int>&A, int N, int K) {
        int ans = 0;
        for (int l = 0; l < A.size(); ++l) {
            for (int r = l+1; r < A.size(); ++r) {
                vector<int> Z;
                for (int j = 0; j < A.size(); ++j) {
                    if (j <= l || j >= r) {
                        Z.push_back(A[j]);
                    }
                }
                if (inv(Z, N) <= K) ans++;
            }
        }
        return ans;
    }

    void all(int N) {
        vector<int> A(N);
        iota(A.begin(),A.end(),0);
        do {
            for (int K = 0; K <= N*(N-1)/2; ++K) {
                int s = brute(A, N, K);
                int t = solve(A, N, K);
                if (s != t) {
                    cerr << K << ' ' << s << ' ' << t << ' ' << A;
                }
            }
        } while (next_permutation(A.begin(),A.end()));
    }

    ll solve(vector<int> &A, int N, ll K) {

        Fenwick<int> F1(N+1, 0), F2(N+1, 0);
        vector<int> Prev, Succ;
        ll x = 0;
        for (int a:A) {
            int z = F1.range(a+1, N);
            Prev.push_back(z);
            x += z;
            F1.add(a, 1);
        }
        reverse(A.begin(),A.end());
        for (int&a:A) {
            Succ.push_back(a?F2.range(0,a-1):0);
            F2.add(a, 1);
        }
        reverse(A.begin(),A.end());
        reverse(Succ.begin(),Succ.end());

        if (x <= K) {
            return ll(N)*(N-1)/2;
        } else {
            Fenwick<int> G(N+1, 0);
            int e = 0;
            ll cur = x;
            ll ans = 0;
            for (int b = 0; b < N; ++b) {
                while (e < N && cur > K) {
                    cur -= Prev[e];
                    cur -= Succ[e];
                    cur += G.range(A[e]+1, N);
                    G.add(A[e], 1);
                    e++;
                }

                if (b != 0 && e != N) {
                    ans += N-e;
                }

                if (A[b] != 0) cur -= G.range(0, A[b]-1);
                cur += Prev[b];
                cur += Succ[b];
                G.add(A[b], -1);
            }

            return ans;
        }
    }

    void solve(istream& cin, ostream& cout) {
//        all(8);

        int N; ll K; cin >> N >> K;
        vector<int> A(N); cin >> A;
        set<int> B;
        for (int a:A) B.insert(a);
        map<int,int> C; int i = 0;
        for (int b:B) C[b] = i++;
        for (int&a:A) a = C[a];

        cout << solve(A, N, K) << endl;
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	littleelephantandinversions solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}
