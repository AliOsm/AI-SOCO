#include <iostream>
#include <vector>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <algorithm>
#include <set>
#include <unordered_map>
#include <chrono>

using namespace std;
using namespace std::chrono;

#define FOR(i, a, b) for (int (i) = (a); (i) < (b); ++(i))
#define REP(i, n) FOR(i, 0, n)
#define INF 1000000000
#define pb push_back
#define mp make_pair

//#define LOCAL_C

const int N = 10000;
int f[N][10];
vector<int> result;
int main() {
#ifdef LOCAL_C
    freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
    high_resolution_clock::time_point start = high_resolution_clock::now();
#endif
    int n;
    cin >> n;
    if (n > 300) {
        cout << 0 << endl;
        return 0;
    }

    REP(i, n) REP(j, 5) cin >> f[i][j];

    REP(i, n) {
        bool ok = true;
        REP(j, n) {
            if (j == i) continue;
            FOR(k, j+1, n) {
                if (k == i) continue;            
                int ans = 0;
                REP(t, 5) {
                    ans += (f[i][t] - f[j][t]) * (f[i][t] - f[k][t]);
                }
                if (ans > 0) {
                    ok = false;
                    break;
                }
            }
            if (!ok) break;
        }
        if (ok) result.push_back(i+1);
    }
    cout << result.size() << endl;
    REP(i, result.size()) cout << result[i] << endl;

#ifdef LOCAL_C
    high_resolution_clock::time_point finish = high_resolution_clock::now();
    cout.precision(3);
    cout << fixed << "Time spent: " << (duration_cast<duration<double> >(finish - start)).count() << endl;
#endif
    return 0;
}
