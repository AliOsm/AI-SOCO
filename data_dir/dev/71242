#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
using namespace std;
#define MS0(I) memset(I, 0, sizeof(I));
#define MS1(I) memset(I, -1, sizeof(I));
#define rep(i, n) for(int i = 0; i < (n); ++i)
#define rep1(i, s, n) for(int i = (s); i < (n); ++i)
#define per1(i, a, b) for(int i = a; i >= b; --i)
#define DRI(A) int A; scanf("%d", &A);
#define DRII(A, B) int A, B; scanf("%d %d", &A, &B);
#define DRIII(A, B, C) int A, B, C; scanf("%d %d %d", &A, &B, &C);
#define DRL(A) long long A; scanf("%lld", &A);
#define DRLL(A, B) long long A, B; scanf("%lld %lld", &A, &B);
#define DRLLL(A, B, C) long long A, B, C; scanf("%lld %lld %lld", &A, &B, &C);
#define SZ(x) ((int)x.size() )
#define MP make_pair 
#define pb push_back
#define F first
#define S second
#define ALL(I) (I).begin(), (I).end()
#define ios std::ios::sync_with_stdio(false); std::cin.tie(0);
typedef const void CV;
typedef long long LL;
typedef unsigned long long ULL;
typedef double DB;
typedef long double LDB;
typedef pair<int, int> PII; 
typedef pair<int, LL> PIL;
typedef pair<LL, int> PLI;
const double eps = 1e-13;
const double PI = acos(-1);
//////////////////////////////
const LL INFF = 1e18;
const int INF = 1e9;
const int mod = 1e9+7;
const int MAX = 1e3+7;
typedef LL Type;
struct Point{
  Type x, y;
  Point(){};
  Point(Type _x, Type _y){
    x = _x, y = _y;
  }
  void read(){
    scanf("%lld %lld", &x, &y);
  }
  Point operator +(const Point & P2){
    return Point(x + P2.x, y + P2.y); 
  }
  Point operator -(const Point & P2){
    return Point(x - P2.x, y - P2.y); 
  }
  Point operator *(const Type & Len){
    return Point(x*Len, y*Len); 
  }
  Type operator *(const Point & P2){
    return x*P2.x + y*P2.y;
  }
  Type operator ^(const Point & P2){
    return x*P2.y - y*P2.x;
  }
  const bool operator <(const Point & p2) const{
    if(x != p2.x) return x < p2.x;
    return y < p2.y;
  }
  Type dis(){
    return x*x+y*y;
  }
};
struct Line{
  Point s, e;
  Line(){};
  Line(Point _s, Point _e){
    s = _s, e = _e;
  }
  void read(){ 
    s.read(); e.read(); 
  }
};
bool gg = 0;
Point inter(Line l1, Line l2){
  LL v1 = (l1.s - l1.e) ^ (l2.s - l1.e);
  LL v2 = (l1.s - l1.e) ^ (l1.e - l2.e);
  LL v3 = (v1 + v2);
  Point res = l2.s*v2 + l2.e*v1;
  if(res.x % v3 || res.y % v3) gg = 1;
  res.x /= v3, res.y /= v3;
  return res;
}
map<Point, int>mp[MAX];
int gcd(int v1, int v2){
  while(v1){
    int tmp = v2 % v1;
    v2 = v1;
    v1 = tmp;
  }
  return v2;
}
int ori(Point s, Point e, Point p2){
  LL val = (s - e) ^ (p2 - e);
  if(val > 0) return 1;
  else if(val == 0) return 0;
  else return -1;
}
Line pt[MAX];
int main(void){
  DRI(n);
  LL ans = 0;
  rep1(i, 1, n+1){
    pt[i].read();
    int dx = pt[i].s.x - pt[i].e.x;
    int dy = pt[i].s.y - pt[i].e.y;
    int gd = gcd( abs(dx), abs(dy) );
    ans += gd + 1;
  }
  rep1(i, 1, n+1) rep1(j, i+1, n+1){
    if( !( (pt[i].s - pt[i].e) ^ (pt[j].s - pt[j].e) ) ) continue;
    if( ori(pt[i].s, pt[i].e, pt[j].s) * ori(pt[i].s, pt[i].e, pt[j].e) > 0 ) continue;
    if( ori(pt[j].s, pt[j].e, pt[i].s) * ori(pt[j].s, pt[j].e, pt[i].e) > 0 ) continue;
    gg = 0;
    Point md  = inter( pt[i], pt[j] );
    if(!gg){
      if(!mp[j][md]) mp[j][md] = 1, ans--;
    }
  }
  printf("%lld\n", ans);
  return 0;
}
