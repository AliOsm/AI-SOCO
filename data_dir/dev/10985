#include <bits/stdc++.h>
using namespace std ;

struct Query{
    int l , r , id ;
    Query(int L = 0 , int R = 0 )
    {
        l = L ;
        r = R ;
    }

};

const int s = (int)sqrt(100000) ;

vector < Query > q ;

bool cmp( Query a , Query b )
{
    if( a.l / s != b.l/s )return a.l/s < b.l / s ;
    return a.r < b.r ;
}

int n , m ;
Query qq ;
int a[100005] , aa[100005] ;
int x, y ;
int ans[100005] , res ;

int mp[100005] ;

void in( int id )
{
    if( mp[a[id]] == aa[id] )res-- ;
    mp[a[id]]++ ;
    if( mp[a[id]] == aa[id] )res++ ;
}

void out( int id )
{
    if( mp[a[id]] == aa[id] )res-- ;
    mp[a[id]]-- ;
    if( mp[a[id]] == aa[id] )res++ ;

}
set < int > bal ;
set< int >:: iterator it ;

map < int , int > mpp ;


int main()
{
    cin>>n >> m ;
    for( int i = 1 ; i <= n ; i++)
    {
        scanf("%d",&a[i] ) ;
        bal.insert(a[i]) ;
    }
    int val = 1 ;
    for( it = bal.begin() ; it != bal.end() ; it++ , val++ )
    {
        mpp[*it] = val ;
    }
    for( int i = 1 ; i <= n ; i++ )
    {
        aa[i] = a[i] ;
        a[i] = mpp[a[i]] ;
    }
    for( int i = 1 ; i <= m ; i++)
    {
        scanf("%d %d",&x, &y ) ;
        qq.l = x ;
        qq.r = y ;
        qq.id = i ;
        q.push_back(qq) ;
    }

    sort(q.begin() , q.end() , cmp ) ;
    x = 0 ;
    y = 0 ;
    res= 0 ;
    mp[0] = -1 ;
    for( int i = 0 ; i < m ; i++ )
    {
        qq = q[i] ;
        //cout << "quety : " << qq.l << " " << qq.r << " " << qq.id << endl ;
        while( x >= qq.l )
        {
            x-- ;
            in(x) ;
        }
         while( y <= qq.r )
        {
            y++ ;
            in(y) ;
        }
        while( x < qq.l )
        {
            out(x) ;
            x++ ;
        }
        while( y > qq.r )
        {
            out(y) ;
            y-- ;
        }
        ans[qq.id] = res ;
    }

    for( int i = 1 ; i <= m ; i++ )
    {
        printf("%d\n", ans[i] ) ;
    }

return 0 ;
}
