//			be name khoda

#include <bits/stdc++.h>

using namespace std;

const int N = 101, P = 16, M = 59, INF = 30 * N;

int a[N], mark[M + 5], dp[N][1 << P], best[N][1 << P], mask[M], t[M], n, bb;
vector <int> p, ml[1 << P], out;

int &f(int i, int mask)
{
	return dp[i][mask];//:|
}

int main()
{

	for(int i = 2; i < M; i++)
		if(!mark[i])
		{
			for(int j = i; j < M; j+=i)
			{
				mark[j] = 1;
				mask[j]|= 1 << p.size();
			}
			t[p.size()] = i;
			p.push_back(i);
		}
	for(int i = (1 << P) - 1; i >= 0; i--)
		for(int j = 1; j < M; j++)
		{
			bool could = 1;
			if(j > 1)
				for(int k = 0; k < P; k++)
					if(i >> k & 1)
						if(mask[j] >> k & 1) 
						{
							could = 0;
							break;
						}
			if(could)
				ml[i].push_back(j);
		}
	cin >> n;
	for(int i = 1; i <= n; i++)	
		cin >> a[i];
	int ans = INF;
	for(int i = 0; i < n; i++)
	{
		for(int j = 0; j < (1 << P); j++)
			f(i + 1, j) = INF;
		for(int j = 0; j < (1 << P); j++)
			for(int k = 0; k < ml[j].size(); k++)
			{
				int x = ml[j][k];
				if(f(i + 1, j ^ mask[x]) >  f(i, j) + abs(x - a[i + 1]))
					best[i + 1][j ^ mask[x]] = x;
				f(i + 1, j ^ mask[x]) = min(f(i + 1, j ^ mask[x]), f(i, j) + abs(x - a[i + 1]));
				if(i == n - 1)
				{
					if(ans > f(i + 1, j ^ mask[x]))
						bb = j ^ mask[x];
					ans = min(ans, f(i + 1, j ^ mask[x]));
				}
			}
	}
	/*
	for(int i = n - 1; i >= 0; i--)
	{
		bool found = 0;
		for(int j = 0; !found && j < (1 << P); j++)
			for(int k = 0; k < ml[j].size(); k++)
			{
				int x = ml[j][k];
				if(ans == f(i, j) + abs(x - a[i + 1]))
				{
					ans = f(i, j);
					found = 1;
					out.push_back(ml[j][k]);
					break;
				}
			}
	}*/
	for(int i = 0; i < n; i++)
	{
		out.push_back(best[n - i][bb]);
		bb ^= mask[best[n - i][bb]];
	}
	for(int i = n - 1; i >= 0; i--)
		cout << out[i] << " ";
	cout << endl;
}
