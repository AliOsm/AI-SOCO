#include<bits/stdc++.h>
using namespace std;

#define F first
#define S second
#define PB push_back

typedef long long ll;

const int N = 50 + 10 , INF = 1000 * 1000 * 1000 + 10;

struct point{
	int x, y, id;
};

struct pnt{
	int x, y;
};

point p[N], q[N];

vector<pair<pnt,pnt>> ans, rans;

bool mark[N][N];

int mid;

int ind[N];

bool cmp(point p, point q)
{
	return abs(p.x - mid) < abs(q.x - mid);
}

bool cmp2(point p, point q)
{
	return p.y < q.y;
}

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	int n, m;
	cin>> n >> m;

	for(int i = 0; i < m; i++)
		cin>> p[i].x >> p[i].y, p[i].id = i;
	for(int i = 0; i < m; i++)
		cin>> q[i].x >> q[i].y, q[i].id = i;

	int mn = 2e9;
	mid = 1;
	for(int i = 1; i < n; i++)
	{
	    int cnt[4] = {};
	    for(int j = 0; j < m; j++)
	    {
	        if(p[j].x==i-1) cnt[0] ++;
	        if(p[j].x==i+1) cnt[1] ++;
	        if(q[j].x==i+1) cnt[2] ++;
	        if(q[j].x==i-1) cnt[3] ++;
	    }
	    if(max({cnt[0],cnt[1],cnt[2],cnt[3]})>1) continue;
		int tmp = 0;
		for(int j = 0; j < m; j++)
			tmp += abs(p[j].x-i) + abs(q[j].x-i);
		if(tmp<mn)
			mn = tmp, mid = i;	   
	}
    
	sort(p, p+m, cmp);
	sort(q, q+m, cmp);
	

	for(int _ = 0; _ < 2; _++)
	{
		for(int i = 0; i < m; i++)
		{
			if(p[i].x==mid)
			{
				mark[p[i].x][p[i].y] = 1;
				continue;
			}
			int dx = (p[i].x > mid ? -1 : 1);
			while(p[i].x + dx != mid)
				ans.PB({{p[i].x,p[i].y},{p[i].x+dx,p[i].y}}), p[i].x += dx;

			int id = -1, mn = 2e9;
			for(int j = 1; j <= n; j++)
				if(!mark[mid][j] && abs(j-p[i].y) < mn)
					id = j, mn = abs(j-p[i].y);

			int dy = (p[i].y > id ? -1 : 1);
			while(p[i].y != id)
				ans.PB({{p[i].x,p[i].y},{p[i].x,p[i].y+dy}}) , p[i].y += dy;

			ans.PB({{p[i].x,p[i].y},{p[i].x+dx,p[i].y}}), p[i].x += dx;

			mark[p[i].x][p[i].y] = 1;
		}
		sort(p, p+m, cmp2);

		for(int i = 0; i < m; i++)
		{
			while(p[i].y!=i+1)
			{
				ans.PB({{p[i].x,p[i].y},{p[i].x,p[i].y-1}});
				p[i].y --;
			}
		}
		ans.swap(rans);
		swap(p, q);
		memset(mark, 0, sizeof mark);
	}

	for(int i = 0; i < m; i ++)
		ind[q[i].id] = i;

	while(1)
	{
		bool f = 0;
		for(int i = 0; i < m - 1; i ++) 
		{
			if(ind[p[i].id]>ind[p[i+1].id])
			{
				f = 1;
				ans.PB({{p[i+1].x,p[i+1].y},{p[i+1].x+1,p[i+1].y}});
				ans.PB({{p[i].x,p[i].y},{p[i].x,p[i].y+1}});
				ans.PB({{p[i+1].x+1,p[i+1].y},{p[i+1].x+1,p[i+1].y-1}});
				ans.PB({{p[i+1].x+1,p[i+1].y-1},{p[i+1].x,p[i+1].y-1}});
				swap(p[i], p[i+1]);
				p[i].y --;
				p[i+1].y ++;
			}
		}
		if(!f) break;
	}

	cout<< ans.size() + rans.size() << endl;

	reverse(rans.begin(), rans.end());
	for(auto u : ans)
		cout<< u.F.x << ' ' << u.F.y << ' ' << u.S.x << ' ' << u.S.y << '\n';

	for(auto u : rans)
		cout<< u.S.x << ' ' << u.S.y << ' ' << u.F.x << ' ' << u.F.y << '\n';

}