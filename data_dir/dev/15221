#include<bits/stdc++.h>
#include<cmath>
using namespace std;
#define ll long long
#define F first
#define S second
#define pb push_back
#define mp make_pair
const double PI = acos(-1.0), EPS = 1e-9;
const int MX=1*1e5+10;
int N, M, k;
int arr[MX];
int ableD[MX], want[MX], forW[MX], backW[MX];
multiset<int> ms;
multiset<int>::iterator it;
int main()
{
    scanf("%d", &N);
    for(int i=1; i<=N; i++)
    {
        scanf("%d", &arr[i]);
    }
    for(int i=1; i<=N; i++)
    {
        if(ms.size() == 0)
        {
            ms.insert(arr[i]);
        }
        else
        {
            int f, s=-1;
            it=ms.end(); it--;
            f=*it;
            if(it != ms.begin())
            {
                it--;
                s=*it;
            }
            ms.insert(arr[i]);
            if(arr[i] > f)
            {
                continue;
            }
            if(arr[i] > s)
            {
                want[f]++;
                forW[arr[i]]=f;
                backW[f]=arr[i];
                continue;
            }
            ableD[arr[i]]++;
        }
    }
    int mx=0, who=1e9;
    for(int i=1;i<=N;i++)
    {
     //   cout<<ableD[i]<<" ";
        if(want[i] > mx)
        {
            who=i;
            mx=want[i];
        }
    }/// cout<<mx<<"\n";
    if(mx == 1)
    {
        for(int i=1;i<=N;i++)
        {
            if(want[i])
            {
                ableD[i]++;
                ableD[backW[i]]++;
            }
        }
        for(int i=1;i<=N;i++)
        {
            if(ableD[i])
            {
                who=min(i, who);
                break;
            }
        }
    }
    if(who == 1e9) for(int i=1;i<=N;i++) if(ableD[i]) who=min(who, i);
    if(who == 1e9) who=1;
    cout<<who;
    return 0;
}
