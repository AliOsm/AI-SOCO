#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define fi first
#define se second

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int N = 510, oo = 0x3f3f3f3f;

int mat[N][N];
int n, m, k;

int posx, posy;
int cnt;

bool move_right(int t)
{
	if (posx + k > n) return false;

	for (int i = 0; i < k; i++)
		cnt -= (mat[posx][posy+i] <= t);
	posx++;
	for (int i = 0; i < k; i++)
		cnt += (mat[posx+k-1][posy+i] <= t);

	return true;
}

bool move_left(int t)
{
	if (posx-1 < 1) return false;

	for (int i = 0; i < k; i++)
		cnt -= (mat[posx+k-1][posy+i] <= t);
	posx--;
	for (int i = 0; i < k; i++)
		cnt += (mat[posx][posy+i] <= t);
	return true;
}

bool move_up(int t)
{
	if (posy + k > m) return false;
	for (int i = 0; i < k; i++)
		cnt -= (mat[posx+i][posy] <= t);
	posy++;
	for (int i = 0; i < k; i++)
		cnt += (mat[posx+i][posy+k-1] <= t);
	return true;
}

bool scan(int t)
{
	posx = posy = 1;
	cnt = 0;
	for (int i = 0; i < k; i++)
	{
		for (int j = 0; j < k; j++)
			cnt += (mat[posx+i][posy+j] <= t);
	}
	int dir = 1;
	do
	{
		if (dir == 1)
		{
			do
			{
				if (cnt == k*k)
					return true;
			} while (move_right(t));
		}
		else
		{
			do
			{
				if (cnt == k*k)
					return true;
			} while (move_left(t));
		}
		dir = 1 - dir;
			
	} while (move_up(t));
	return false;
}

int main()
{
	memset(mat, 0x3f, sizeof(mat));
	int q;
	scanf("%d %d %d %d", &n, &m, &k, &q);
	while(q--)
	{
		int x, y, t;
		scanf("%d %d %d", &x, &y, &t);
		mat[x][y] = t;
	}
	int lo = 0, hi = 1000000001;
	while (lo < hi)
	{
		int mid = (lo + hi)/2;
		if (scan(mid))
			hi = mid;
		else
			lo = mid+1;
	}
	if (lo == 1000000001)
		lo = -1;
	printf("%d\n", lo);
	return 0;
}


