#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int maxn=1e6+7;
const int inf=1e9;
const ll inff=1e18;
const ll mod=1e9+7;
#define pii pair<int,int>
#define mkp make_pair
#define F first
#define S second
#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
//#define int ll

#ifdef HNO2
#define IOS
#else
#define endl '\n'
#define IOS ios::sync_with_stdio(0); cin.tie(0);
#endif // HNO2

int n,m,k;
int a[1007][1007];
int dist[41][1002][1002];
vector<pii> color[42];

vector<int> dx={0,0,-1,1};
vector<int> dy={-1,1,0,0};

bool valid(int x,int y)
{
    return x>=1&&x<=n&&y>=1&&y<=m;
}

queue<pii> q[90];

void BFS(int x)
{
    int color_short[42];
    for (int i=1;i<=k;i++) color_short[i]=inf;
    for (int i=0;i<=89;i++) queue<pii> ().swap(q[i]);
    color_short[x]=0;

    for (int i=1;i<=n;i++)
        for (int j=1;j<=m;j++)
    {
        dist[x][i][j]=inf;
        if (a[i][j]==x)
        {
            q[0].push(mkp(i,j));
            dist[x][i][j]=0;
        }
    }

    for (int i=0;i<=88;i++)
    {
        while (!q[i].empty())
        {
            pii now=q[i].front();
            q[i].pop();
            if (dist[x][now.F][now.S]!=i) continue;
            for (int kk=0;kk<4;kk++)
                if (valid(now.F+dx[kk],now.S+dy[kk]))
                {
                    if (dist[x][now.F][now.S]+1<dist[x][now.F+dx[kk]][now.S+dy[kk]])
                    {
                        if (color_short[a[now.F+dx[kk]][now.S+dy[kk]]]==inf)
                        {
                            color_short[a[now.F+dx[kk]][now.S+dy[kk]]]=dist[x][now.F][now.S]+1;
                            for (pii j:color[a[now.F+dx[kk]][now.S+dy[kk]]])
                            {
                                dist[x][j.F][j.S]=dist[x][now.F][now.S]+2;
                                q[dist[x][now.F][now.S]+2].push(mkp(j.F,j.S));
                            }
                            dist[x][now.F+dx[kk]][now.S+dy[kk]]=dist[x][now.F][now.S]+1;
                        }
                        else
                        {
                            dist[x][now.F+dx[kk]][now.S+dy[kk]]=dist[x][now.F][now.S]+1;
                        }
                        q[dist[x][now.F][now.S]+1].push(mkp(now.F+dx[kk],now.S+dy[kk]));
                    }
                }
        }
    }
}

int32_t main()
{
    IOS
    cin>>n>>m>>k;
    for (int i=1;i<=n;i++)
        for (int j=1;j<=m;j++)
            {
                cin>>a[i][j];
                color[a[i][j]].pb(mkp(i,j));
            }
    for (int i=1;i<=k;i++) BFS(i);
    int Q;
    cin>>Q;
    while (Q--)
    {
        int r1,c1,r2,c2;
        cin>>r1>>c1>>r2>>c2;
        int ans=abs(r1-r2)+abs(c1-c2);
        for (int i=1;i<=k;i++) ans=min(ans,dist[i][r1][c1]+dist[i][r2][c2]+1);
        cout<<ans<<endl;
    }
}

