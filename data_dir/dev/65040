/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r+" , stdin) ; freopen("out.txt" , "w+" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 1e3 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

template <ll SIZE>
struct DSU
{
    ll par[SIZE] , w[SIZE] , b[SIZE];
    DSU(){
        fill(par , par + SIZE , -1);
        fill(w , w + SIZE , 0);
        fill(b , b + SIZE , 0);
    }

    ll Find(ll v){
        return (par[v] == -1 ? v : par[v] = Find(par[v]));
    }

    ll Union(ll v , ll u){
        ll pv = Find(v) , pu = Find(u);
        if(pv == pu)    return 0;
        par[pu] = pv;
        w[pv] += w[pu];
        b[pv] += b[pu];
        return 1;
    }
};

ll n , m , W , v , u , w[MAXN] , b[MAXN] , dp[MAXN][MAXN];
DSU<MAXN> dsu;
vector<ll> roots , comps[MAXN];

int main() {
    fast_io;

    cin >> n >> m >> W;
    for(ll i = 1 ; i <= n ; i++)    cin >> w[i] , dsu.w[i] = w[i];
    for(ll i = 1 ; i <= n ; i++)    cin >> b[i] , dsu.b[i] = b[i];

    for(ll i = 1 ; i <= m ; i++){
        cin >> v >> u;
        dsu.Union(v , u);
    }

    roots.push_back(0);
    for(ll i = 1 ; i <= n ; i++)    comps[dsu.Find(i)].push_back(i);
    for(ll i = 1 ; i <= n ; i++)    if(dsu.par[i] == -1)    roots.push_back(i);

    for(ll i = 1 ; i < roots.size() ; i++){
        v = roots[i];
        for(ll j = 0 ; j < MAXN ; j++)  dp[i][j] = dp[i - 1][j];
        for(ll j = 0 ; j < MAXN ; j++){
            if(j + dsu.w[v] < MAXN){
                dp[i][j + dsu.w[v]] = max(dp[i][j + dsu.w[v]] , dp[i - 1][j] + dsu.b[v]);
            }
            for(ll k : comps[v]){
                if(j + w[k] < MAXN){
                    dp[i][j + w[k]] = max(dp[i][j + w[k]] , dp[i - 1][j] + b[k]);
                }
            }
        }
    }
    cout << dp[roots.size() - 1][W] << endl;

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/
