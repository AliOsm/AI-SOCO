// Author: πα

#include <bits/stdc++.h>
using namespace std;

#define FastIO ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long int64_t

const int N = 2e5 + 5;
const long INF = 1LL << 62;
long a[N];
vector<pair<int, long>> g[N];

vector<long> dijkstra(vector<pair<int, long>> g[], int n)
{
    vector<long> arrival(n, INF), departure(n, INF);
    vector<int> vis(n), parent(n);
    set<pair<long, int>> s;
    for(int i = 0; i < n; i++)
    {
        arrival[i] = a[i];
        s.insert({arrival[i], i});
    }
    while(!s.empty())
    {
        auto [ignore, u] = *s.begin();
        s.erase(s.begin());
        vis[u] = 1;
        departure[u] = arrival[u];
        for(auto [v, w]: g[u])
        {
            if(arrival[v] > departure[u] + w)
            {
                s.erase({arrival[v], v});
                arrival[v] = departure[u] + w;
                s.insert({arrival[v], v});
                parent[v] = u;
            }
        }
    }
    return arrival;
}


int main()
{
    FastIO;
    int n, i, m, u, v;
    long w;
    cin >> n >> m;
    while(m--)
    {
        cin >> u >> v >> w;
        u--, v--, w *= 2;
        g[u].push_back({v, w});
        g[v].push_back({u, w});
    }
    for(i = 0; i < n; ++i)
        cin >> a[i];
    for(auto it: dijkstra(g, n))
        cout << it << ' ';
    return 0;
}
