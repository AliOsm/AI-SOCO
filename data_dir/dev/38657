#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <string>
#include <algorithm>
#include <map>
#define lch a[n].lc
#define rch a[n].rc
using namespace std;
const int inf=1e9;
const int maxn=100010;
int n,m,v[maxn],l[400],r[400],root,topt,maxans,ans[400],ansnum,t,vv[maxn],cnt;
bool f[310];
struct da{int lc,rc,tag,mi,milc,ma,malc;}a[maxn<<2];
void updata(int n)
{
	if (a[lch].ma>a[rch].ma) {a[n].ma=a[lch].ma; a[n].malc=a[lch].malc;}
	 else {a[n].ma=a[rch].ma; a[n].malc=a[rch].malc;}
	if (a[lch].mi<a[rch].mi) {a[n].mi=a[lch].mi; a[n].milc=a[lch].milc;}
	 else {a[n].mi=a[rch].mi; a[n].milc=a[rch].milc;}
}
void build_tree(int &n,int l,int r)
{
	n=++topt; a[n].ma=-inf; a[n].mi=inf; a[n].tag=0;
	if (l==r) {a[n].mi=a[n].ma=v[l]; a[n].milc=a[n].malc=l; return;}
	int mid=(l+r)>>1;
	build_tree(lch,l,mid); build_tree(rch,mid+1,r); updata(n);
}
void pushdown(int n)
{
	if (!a[n].tag) return;
	if (lch) {a[lch].ma+=a[n].tag; a[lch].mi+=a[n].tag; a[lch].tag+=a[n].tag;}
	if (rch) {a[rch].ma+=a[n].tag; a[rch].mi+=a[n].tag; a[rch].tag+=a[n].tag;}
	a[n].tag=0; updata(n);
}
void tree_add(int n,int L,int R,int l,int r,int k)
{
	if (L==l && R==r) {a[n].mi+=k; a[n].ma+=k; a[n].tag+=k; return;}
	int mid=(L+R)>>1; pushdown(n);
	if (r<=mid) tree_add(lch,L,mid,l,r,k);
	else if (l>=mid+1) tree_add(rch,mid+1,R,l,r,k);
	else tree_add(lch,L,mid,l,mid,k),tree_add(rch,mid+1,R,mid+1,r,k);
	updata(n);
}
const int up=1000;
bool cmp(int a,int b){return a>b;}
int main()
{
	scanf("%d%d",&n,&m);
	for (int i=1;i<=n;i++) scanf("%d",&v[i]),vv[i]=v[i];
	for (int i=1;i<=m;i++) scanf("%d%d",&l[i],&r[i]);
	build_tree(root,1,n); sort(vv+1,vv+n+1,cmp); int t=vv[up];
	for (int i=1;i<=n;i++)
	if ((n<=up)||(n>up && v[i]>=t && cnt<=up))
	{
		cnt++;
		for (int j=1;j<=m;j++)
		 if (l[j]>i || r[j]<i) tree_add(root,1,n,l[j],r[j],-1),f[j]=1;
		pushdown(1); int maa,mii,maalc;
		maa=a[1].ma; mii=a[1].mi; maalc=a[1].malc;
		if (maa-mii>maxans)
		{
			maxans=maa-mii; ansnum=0;
			for (int j=1;j<=m;j++) if (f[j]) ans[++ansnum]=j;
		}
		for (int j=1;j<=m;j++)
		 if (f[j]) tree_add(root,1,n,l[j],r[j],1),f[j]=0;
	}
	cnt=0;
	for (int i=n;i>=1;i--)
	if ((n<=up)||(n>up && v[i]<t && cnt<=up))
	{
		cnt++;
		for (int j=1;j<=m;j++)
		 if (l[j]>i || r[j]<i) tree_add(root,1,n,l[j],r[j],-1),f[j]=1;
		pushdown(1); int maa,mii,maalc;
		maa=a[1].ma; mii=a[1].mi; maalc=a[1].malc;
		if (maa-mii>maxans)
		{
			maxans=maa-mii; ansnum=0;
			for (int j=1;j<=m;j++) if (f[j]) ans[++ansnum]=j;
		}
		for (int j=1;j<=m;j++)
		 if (f[j]) tree_add(root,1,n,l[j],r[j],1),f[j]=0;
	}
	printf("%d\n%d\n",maxans,ansnum);
	for (int i=1;i<=ansnum;i++) printf("%d ",ans[i]);
return 0;
}