#include <string>
#include <sstream>
#include <cstring>
#include <sstream>
#include <vector>
#include <algorithm>
#include <iostream>
#include <stdio.h>
#include <fstream>
#include <ctime>
#include <cmath>
#include <math.h>
#include <set>
#include <map>
#include <list>
#include <iomanip>
#include <cstdio>
#include <algorithm>
#include <unordered_map>
#include <queue>
using namespace std;

#define pp system("pause");
#define ct double ttme = clock()
#define p_ct cout << (clock() - ttme) / CLOCKS_PER_SEC << endl
#define all(c) (c).begin(),(c).end()
#define fft ifstream fin("input.txt"); ofstream fout("output.txt")
#define fft_c FILE *fin, *fout
#define fft_c_open fin = fopen("input.txt","r"); fout = fopen("output.txt","w")
#define fft_c_cl fclose(fin); fclose(fout)
#define pii pair<int,int>
#define mp(a,b) make_pair((a),(b))
#define pff pair<float,float>
#define piii pair<int,pair<int,int>>
#define pss pair<string, string>
#define M_PI 3.14159265358979323846
#define mem0(m) memset((m), 0, sizeof(m));
#define memb(m) memset((m), false, sizeof(m));
#define memi(m) memset((m), 0, sizeof(m));
#define rep(i,n) for(i = 0; i < (int)(n); i++)
#define repi(a, n) for(int i = a; i < (int)(n); i++)
#define repp(i, a, n) for(int (i) = a; (i) < (int)(n); (i)++)
typedef unsigned long long int ull;
typedef signed long long int ll;
const int INF = 1e8;
const int DEL = 687134561;
const long long MODULO = 1e9 + 7;
const int MAX = 1e7;
const int des = 10000;



int main() {
    int n, m;
    cin >> n >> m;

    vector<int> prost, auk;
    vector<int> alls(n);
    char ukz[100];
    mem0(ukz);

    for(int i = 0; i < n; i++) {
        int tmp;
        scanf("%d", &tmp);
        alls[i] = tmp;
    }

    for(int i = 0; i < m; i++) {
        int tmp;
        scanf("%d", &tmp);
        ukz[--tmp] = 1;
    }

    for(int i = 0; i < n; i++) {
        if(ukz[i]) {
            auk.push_back(alls[i]);
        } else {
            prost.push_back(alls[i]);
        }
    }

    sort(all(auk));
    sort(all(prost));

    ll maxi = 0;
    for(int i = 0; i < n - m; i++) {
        maxi += prost[i];
    }

    while(auk.size() > 0) {
        int index = 0;
        for(int i = 1; i < auk.size(); i++) {
            if(auk[i] > auk[index]) {
                index = i;
            }
        }

        if(maxi >= auk[index]) {
            maxi *= 2;
            auk.erase(auk.begin() + index);
        } else if(maxi + max(maxi, (ll)ukz[0]) > maxi + auk[index]) {
            maxi *= 2;
            auk.erase(auk.begin());
        } else {
            maxi += auk[index];
            auk.erase(auk.begin() + index);
        }
    }

    cout << maxi;
}
