/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(int x) { return 8*sizeof(int)-__builtin_clz(x); }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
#ifndef MOD_H
#define MOD_H



template <unsigned int N> class Field {
    typedef unsigned int ui;
    typedef unsigned long long ull;
	inline ui pow(ui a, ui p){ui r=1,e=a;while(p){if(p&1){r=((ull)r*e)%N;}e=((ull)e*e)%N;p>>=1;}return r;}
	/*extended GCD(slow):ll t=0,nt=1,r=N,nr=a;while(nr){ll q=r/nr;t-=q*nt;swap(t,nt);r-=q*nr;swap(r,nr);}assert(r<=1);return(t<0)?t+N:t;*/
	inline ui inv(ui a){return pow(a,N-2);}
public:
    inline Field(int x = 0) : v(x) {}
	inline Field<N> pow(int p){return (*this)^p; }
	inline Field<N> operator^(int p){return {(int)pow(v,(ui)p)};}
    inline Field<N>&operator+=(const Field<N>&o) {if ((ll)v+o.v >= N) v += o.v - N; else v += o.v; return *this; }
    inline Field<N>&operator-=(const Field<N>&o) {if (v<o.v) v -= o.v-N; else v-=o.v; return *this; }
    inline Field<N>&operator*=(const Field<N>&o) {v=(ull)v*o.v % N; return *this; }
    inline Field<N>&operator/=(const Field<N>&o) { return *this*=inv(o.v); }
    inline Field<N> operator+(const Field<N>&o) const {Field<N>r{*this};return r+=o;}
    inline Field<N> operator-(const Field<N>&o) const {Field<N>r{*this};return r-=o;}
    inline Field<N> operator*(const Field<N>&o) const {Field<N>r{*this};return r*=o;}
    inline Field<N> operator/(const Field<N>&o) const {Field<N>r{*this};return r/=o;}
    inline Field<N> operator-() {if(v) return {(int)(N-v)}; else return {0};};
    inline Field<N>& operator++() { ++v; if (v==N) v=0; return *this; }
    inline Field<N> operator++(int) { Field<N>r{*this}; ++*this; return r; }
    inline Field<N>& operator--() { --v; if (v==-1) v=N-1; return *this; }
    inline Field<N> operator--(int) { Field<N>r{*this}; --*this; return r; }
    inline bool operator==(const Field<N>&o) const { return o.v==v; }
	inline bool operator!=(const Field<N>&o) const { return o.v!=v; }
	inline explicit operator ui() const { return v; }
	inline static vector<Field<N>>fact(int t){vector<Field<N>>F(t+1,1);for(int i=2;i<=t;++i){F[i]=F[i-1]*i;}return F;}
	inline static vector<Field<N>>invfact(int t){vector<Field<N>>F(t+1,1);Field<N> X{1};for(int i=2;i<=t;++i){X=X*i;}F[t]=1/X;for(int i=t-1;i>=2;--i){F[i]=F[i+1]*(i+1);}return F;}
private: ui v;
};
template<unsigned int N>istream &operator>>(std::istream&is,Field<N>&f){unsigned int v;is>>v;f=v;return is;}
template<unsigned int N>ostream &operator<<(std::ostream&os,const Field<N>&f){return os<<(unsigned int)f;}
template<unsigned int N>Field<N> operator+(int i,const Field<N>&f){return Field<N>(i)+f;}
template<unsigned int N>Field<N> operator-(int i,const Field<N>&f){return Field<N>(i)-f;}
template<unsigned int N>Field<N> operator*(int i,const Field<N>&f){return Field<N>(i)*f;}
template<unsigned int N>Field<N> operator/(int i,const Field<N>&f){return Field<N>(i)/f;}


typedef Field<1000000007> FieldMod;

struct Ring {
	static int div(int p, int q, int N) {
		ll t=0,nt=1,r=N,nr=q;
		while(nr){ ll q=r/nr;t-=q*nt;r-=q*nr;swap(t,nt);swap(r,nr); }
		t=(t<0)?t+N:t;
		r=(r<0)?r+N:r;
		if (gcd(p,N)%r) { return 0; }
		return (int)(((ll)t*(ll)p/r)%N);
	}
};
#endif

/** Immutable tree for range queries on idempotent operations (i.e. min, max).
 * Memory O(n log n)
 * Build O(n log n)
 * Query O(1) */
template <typename T, typename Op> class ConstTree {
public:
    explicit ConstTree(const vector<T>&V) : D(logceil(V.size())), N(V.size()), A{V}, L(N,0) {
        for (ui b = 1; b < D; ++b) {
            A.emplace_back(N-(1<<b)+1);
            for (ui i = 0; i + (1<<b) <= N; ++i) {
                A[b][i] = op(A[b-1][i], A[b-1][i+(1<<(b-1))]);
            }
        }
        for (ui i = 2; i < N; ++i) L[i] = L[i-1] + ((1<<L[i-1]) == i/2);
    }

    T get(ui i, ui j) const { //i,j is inclusive
        return op(A[L[j-i]][i], A[L[j-i]][j+1-(1<<L[j-i])]);
    }
private:
    Op op;
    ui D,N;
    vector<vector<T>> A;
    vector<ui> L;
};

template <typename F> struct MinQOp { F operator()(F a, F b) const { return std::min(a,b); }};
template <typename F> struct MaxQOp { F operator()(F a, F b) const { return std::max(a,b); }};

class helpingpeople {
public:

    vector<pair<pii,double>> R;
    int N, Q;

    void combine(vector<double>&Z, const vector<double>&W) {
        double totZ = 0, totW = 0;
        for (int i = 2*Q; i >= 0; --i) {
            totZ += Z[i];
            totW += W[i];

            Z[i] = Z[i] * (1-totW) + W[i] * (1-totZ) + Z[i] * W[i];
        }
    }

    void setMin(vector<double>&Z, int q) {
        double tot = 0;
        for (int i = 0; i <= q; ++i) { tot += Z[i]; Z[i] = 0; }
        Z[q] = tot;
    }

    void add(vector<double>&Z, double p) {
        for (int i = 2*Q; i > 0; --i) {
            Z[i] += Z[i-1]*p;
            Z[i-1] *= (1-p);
        }
    }

    void solve(int & j, ConstTree<int, MaxQOp<int>> &T, vector<double> &Z) {
        auto &r = R[j];
        j++;
        int left = r.x.x;
        while (j < R.size() && R[j].x.x <= r.x.y) {
            if (left != R[j].x.x) {
                int hi = T.get(left, R[j].x.x-1);
                setMin(Z, hi);
            }

            left = R[j].x.y+1;
            vector<double> W(2*Q+1, 0);
            W[0] = 1;
            solve(j, T, W);
            combine(Z, W);
        }

        if (left <= r.x.y) {
            int hi = T.get(left, r.x.y);
            setMin(Z, hi);
        }

        add(Z, r.y);
    }

    void solve(istream& cin, ostream& cout) {
        cin >> N >> Q;
        vector<int> A(N); cin >> A;
        int of = *max_element(A.begin(),A.end())-Q;
        for (int&a:A) a = max(0, a-of);

        ConstTree<int, MaxQOp<int>> T{A};
        R.resize(Q); cin >> R;
        for (auto&r:R) { --r.x.x; --r.x.y; }
        R.push_back({{0,N-1}, 0});
        sort(R.begin(),R.end(),[](const pair<pii,double>&a, const pair<pii,double>&b) { return a.x.x < b.x.x || (a.x.x == b.x.x && a.x.y > b.x.y); });

        int j = 0;
        vector<double> Z(2*Q+1, 0);
        Z[0] = 1;
        solve(j, T, Z);
        double ans = of;
        for (int i = Q; i <= 2*Q; ++i) {
            ans += Z[i]*i;
        }
        cout << fixed << setprecision(10) << ans << '\n';
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	helpingpeople solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}
