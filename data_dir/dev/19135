#include <iostream>
#include <ctime>
#include <iomanip>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <cmath>
#include <set>
#include <unordered_set>
#include <unordered_map>
#include <chrono>
#include <stack>
#include <cassert>
#include <queue>
#include <deque>
#include <climits>
#include <cstring>
#include <random>
#include <bitset>
#include <functional>

using namespace std;

vector<int> solve(int n, vector<set<int>> g) {
    vector<set<int>> inv;
    vector<bool> ok;
    set<pair<int, int>> al;

    vector<int> ans(n);
    ok.resize(n, true);
    inv.resize(n);
    for (int i = 0; i < n; i++) {
        al.insert({g[i].size(), -i});
        for (auto t : g[i]) {
            inv[t].insert(i);
        }
    }
    int pos = n - 1;
    while (!al.empty()) {
        auto tmp = *al.begin();
        al.erase(al.begin());
        tmp.second *= -1;
        ans[tmp.second] = pos;
        pos--;
        ok[tmp.second] = 0;
        for (auto t : inv[tmp.second]) {
            if (ok[t]) {
                al.erase({g[t].size(), -t});
                g[t].erase(tmp.second);
                al.insert({g[t].size(), -t});
            }
        }
    }
//    reverse(ans.begin(), ans.end());
    return ans;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    #ifdef LOCAL
    assert(freopen("input.txt", "r", stdin));
    assert(freopen("output.txt", "w", stdout));
    #endif
    
    vector<set<int>> g;

    
    int n, m;
    cin >> n >> m;
    g.resize(n);
    for (int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        a--;
        b--;
        g[a].insert(b);
    }
    vector<int> ans = solve(n, g);
    for (auto t : ans) {
        cout << t + 1 << ' ';
    }
}
