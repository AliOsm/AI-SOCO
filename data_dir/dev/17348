#include<bits/stdc++.h>
using namespace std;

const int N = 2e5+7;
vector<int> adj[N];
bool col[N];
int st[N], en[N], a[N];

int tim = 0;
void dfs(int u, int par) {
    if (par != -1)  col[u] = !col[par];
    st[u] = ++tim;
    for (int v: adj[u])
        if (v != par)
            dfs(v, u);
    en[u] = tim;
}

int ft[N];

void add(int idx, int val) {
    for (idx; idx > 0; idx -= idx&-idx)
        ft[idx] += val;
}

void add(int l, int r, int val) {
    add(r, val);
    add(l-1, -val);
}

int query(int idx) {
    int ans = 0;
    for (idx; idx < N; idx += idx&-idx)
        ans += ft[idx];
    return ans;
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int n, q;
    cin>>n>>q;

    for (int i=1; i<=n; i++)    cin>>a[i];
    for (int i=1; i<n; i++) {
        int u, v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    dfs(1, -1);
    for (int i=1; i<=n; i++) {
        if (!col[i])    add(st[i], st[i], a[i]);
        else            add(st[i], st[i], -a[i]);
    }

    while (q--) {
        int t;
        cin>>t;
        if (t==1) {
            int x, val;
            cin>>x>>val;
            if (!col[x])    add(st[x], en[x], val);
            else            add(st[x], en[x], -val);
        }
        else {
            int x;
            cin>>x;
            int ans = query(st[x]);
            if (col[x]) ans = -ans;
            cout<<ans<<"\n";
        }
    }
}
