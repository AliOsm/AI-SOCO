/**
*
* Author: Mouhanad
* Lang: GNU C++14
*
**/
#include<bits/stdc++.h>
using namespace std;

#define F first
#define S second
#define ii pair < int , int >
#define LS pair < ll , string >
typedef long long ll;
const int inf = 1<<30;
const int N =200100;
int n , a[N] , q ;
int cnt[N] , one[N] , can[N] , frq[N];
vector < int >v ;
bool ok ( int mid , int  i ){

if ( can[mid]-can[i-1] != mid-i+1 || one[mid]-one[i-1] > 2) return 0 ;

if ( one[mid]-one[i-1] == 0 ) return 1;
if ( one[mid]-one[i-1] == 1 ){
    int idx = lower_bound(v.begin(),v.end(),i)-v.begin();
    if ( v[idx] == mid || v[idx] == i ) return 1 ;
    return 0;
}

 int idx = lower_bound(v.begin(),v.end(),i)-v.begin();
        if ( v[idx+1] == mid && v[idx] == i  ) return 1;
 return 0;
}
int main ( ){
  scanf("%d",&n);
  for (int i = 1; i <= n; i++ ){
    int x ; scanf("%d",&x);
    cnt[x]++;
    can[x]=1;
    frq[x]= cnt[x];
  }
  for ( int i = 1; i < N ; i++){
    one[i] = ( cnt[i] == 1 );
    if ( one[i] ) v.push_back(i);
    one[i]+= one[i-1];
    can[i]+= can[i-1];
    cnt[i]+= cnt[i-1];
  }
  int l = -1 , r = -1 , mx = 0 ;
  for ( int i = 1; i < N ; i++ ){
        if ( ! (cnt[i]-cnt[i-1]))continue;
    int lo = i , hi = N-1 ;

    while ( lo < hi ){
        int mid = (lo+hi+1)>>1 ;
        if ( ok(mid,i)  ) lo = mid ;
        else hi = mid-1;
    }

    if ( cnt[lo]-cnt[i-1] > mx ){
        mx = cnt[lo]-cnt[i-1];
        l = i , r = lo;
    }
  }
  printf("%d\n",mx);
  for  (int i = r ; i >= l ; --i ) { printf("%d ",i); frq[i]--;}
  for  (int i = l ; i <= r ; ++i ) {
    while ( frq[i]--){
        printf("%d ",i);
    }
  }

return 0 ;
}
