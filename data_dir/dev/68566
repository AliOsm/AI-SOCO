/*
    NO 
        TIME 
            TO 
                DIE
                    --007
                            */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli mod=1e9+7;
#define OS //single input use oeis
lli INF=1e17;
lli eps=1e-8;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,z,k,x,m,d,y,q,b,c;
const double pi=3.14159265358979323846;
lli add(lli a, lli b) {
 	lli res = a + b;
 
 	while (res >= mod) res -= mod;
 
 	while (res < 0) res += mod;
 
 	return res;
}
 lli me(lli a,lli b)
{
    lli res=1;
    while(b)
    {
        if(b&1)
        res=(res%mod*a%mod)%mod;
        a=a*a;
        a%=mod;
        b=b>>1;
    }
    return res;
}
lli mI(lli a)
{
    return (me(a,mod-2)%mod+mod)%mod;
}
lli ans;
lli odd,eve;
void solve(lli n,lli k)
{
    if(k==0)
    {
        ans=n;
        return;
    }
    if(n&1)
    solve(n-1,k-1),odd++;
    else
    {
        solve(n/2ll,k-1);
        eve++;
    }
}
 
// double dp[100005];
int main()
{
 IO;
 OS;
 lli a[4];
 cin>>a[0]>>a[1]>>a[2]>>a[3];
 lli sum=a[0]+a[1]+a[2]+a[3];
 lli b[4];
 b[0]=a[0];
 b[1]=a[1];
 b[2]=a[2];
 b[3]=a[3];
 vector<lli> vv;
 lli ff=0;
 for(int i=0;i<4;i++)
 {
 ff=0;
 for(int j=0;j<4;j++)
 a[j]=b[j];
 for(int j=1;j<=sum;j++)
 {
     if(j==1)
     {
         if(a[i])
         vv.push_back(i),a[i]--;
         else
         {
         ff=1;
         break;
         }
     }
     else
     {
         lli dd=vv.back();
        //  cout<<dd<<"\n";
         if(dd>0&&a[dd-1])
         {
             vv.push_back(dd-1);
             a[dd-1]--;
         }
         else if(dd<3&&a[dd+1])
         {
             vv.push_back(dd+1);
             a[dd+1]--;
         }
         else
         {
             ff=1;
             break;
         }
     }
 }
 if(ff==0)
 break;
 vv.clear();
 }
 if(ff)
 cout<<"NO";
 else
 {
     cout<<"YES\n";
     for(auto &j: vv)
     cout<<j<<" ";
 }
}