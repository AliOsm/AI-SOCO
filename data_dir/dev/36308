#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, std::less<>, rb_tree_tag, tree_order_statistics_node_update>;
using namespace std;
typedef long long int64;
typedef unsigned long long uint64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//*/998244353;
const int base = 2187;
const double eps = 1e-9;
const int N = 100'000;
const int LOGN = 19;

int n, m, k;

void solve(int) {
  cin >> n;
  vector<string> a(n);
  vector<int> type[4];
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
    int id = (a[i][0] == '1') | ((a[i].back() == '1') << 1);
    type[id].push_back(i);
  }
  if (!type[0].empty() && !type[3].empty() && type[1].empty() && type[2].empty()) {
    cout << "-1\n";
    return;
  }
  if (type[1].size() > type[2].size()) {
    swap(type[1], type[2]);
  }
  size_t d = type[2].size() - type[1].size();
  set<string_view> st;
  transform(begin(type[1]), end(type[1]), inserter(st, end(st)), [&] (int id) -> string_view { return a[id]; });
  vector<int> ans;
  for (int id : type[2]) {
    if (ans.size() == d / 2) {
      break;
    }
    reverse(begin(a[id]), end(a[id]));
    if (st.find(a[id]) == end(st)) {
      ans.push_back(id);
    }
  }
  if (ans.size() != d / 2) {
    cout << "-1\n";
    return;
  }
  cout << d / 2 << '\n';
  for (int v : ans) {
    cout << v + 1 << ' ';
  }
  cout << '\n';
}

void precalc() {
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  precalc();
  int test = 1;
  cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i) {
    solve(i);
  }
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}
