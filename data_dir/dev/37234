#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("input.txt");ofstream out("output.txt");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

int main(){
    fast;
    int a; cin>>a;
    vec<int> m(a), cnt(2e5), us(2e5);
    for(int q=0; q<a; q++) cin>>m[q], cnt[m[q]]++, cnt[m[q]] = min(3, cnt[m[q]]), us[m[q]] = 1;
    int l = -1, r = -1, c=0;
    vec<pii> n;
    vec<int> s;
    for(int q=1; q<2e5; q++){
        if(cnt[q]==0){
            if(l!=-1) n.pb({l, q-1}), l=-1, s.pb(c), c = 0;
            continue;
        }
        if(l==-1) l = q;
        c+=cnt[q];
    }
    int o = 0;
    for(int q=0; q<s.size(); q++){
        l = n[q].F, r = n[q].S;
        o+=r-l+1;
        if(s[q]==r-l+1) continue;
        if(s[q]==r-l+2){
            if(l>1 && cnt[l-1]==0) cnt[l-1]=1;
            else cnt[r+1]=1;
            o++;
        }
        else{
            if(l>1 && cnt[l-1]==0) cnt[l-1]=1, o++;
            cnt[r+1] = 1, o++;
        }
    }
    cout<<o;
}