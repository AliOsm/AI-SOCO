#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define read(x) scanf( "%lld" , &x )
#define forq(i , a , b) for (int i = (a); i <= (b); ++i)
#define forr(i , b) forq( i , 0 , b - 1 )
#define carr( n , array ) forr(i , n) read(array[i])
#define coutarr(n , array ) cout << "\n" ; forr (i , n) printf("%lld " , array[i]) ; cout << "\n" ;
#define F first
#define S second
#define IF ->first
#define IS ->second
#define qqmemset(array , val) memset (array , val , sizeof(array))
#define ALLV(vect) vect.begin() , vect.end()
#define sizee(vec) (ll)vec.size()

ll R = 7 + 1e9 , NUMTESTCASE ;
const int NN = 10 + 2e5 ;
const double pi = acos(-1.0) ;
int di [4] = {1 , 0 , -1 , 0} , dj [4] = {0 , 1 , 0 , -1} , DI [8] = {1 , 1 , 0 , -1 , -1 , -1 , 0 , 1} , DJ [8] = {0 , 1 , 1 , 1 , 0 , -1 , -1 , -1} ;
using namespace std;
vector <int> graph [NN] ;
bool visited [NN] ;
int level [NN] , V [NN] , leaf , n ;
void DFS (int ver , int lev ) {
    if (visited[ver]) return ;
    visited [ver] = true ;
    level [ver] = lev ;
    for (auto v : graph[ver]) DFS(v , lev + 1) ;
}
bool D = true ;
void solve (int i , int j) {
    int t = 0 , v = V[i] ;
    if (level[v] == leaf) return ;
    while (level[V[j]] == level[v]) j ++ ;
    map <int , bool> draft ;
    for (auto it : graph[v]) if (visited [it] ) continue ; else draft[it] = true ;
    while (j <= n && draft.find(V[j]) != draft.end()) {j ++ ; t ++ ;}
    if (t != draft.size()) {D = false ; return ;}
    visited[v] = true ;
    if (level[V[i + 1]] != level[V[i]]) j = i + 1 ;
    solve(i + 1 , j) ;
}
int main()
{
    int u , v ; cin >> n ;
    forr (i , n - 1) {scanf("%d%d" , &u , &v) ;
        graph[u].pb(v) ; graph[v].pb(u) ;
    }
    DFS(1 , 1) ; u = 1 ;
    forq (i , 1 , n) {
        scanf("%d" , &V[i]) ;
        if (level[V[i]] == u) continue ;
        if (level[V[i]] == ++u) continue ;
        return cout << "NO" , 0 ;
    }
    leaf = u ;
    qqmemset(visited , false) ;
    solve(1 , 1) ;
    if (D) cout << "YES" ; else cout << "NO" ;
    return 0;
}
