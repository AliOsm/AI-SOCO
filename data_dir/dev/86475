/*######################################################
#########~~~~~####~~~~###~~##~~##~~##~~##~~##~~#########
#########~~##~~##~~##~~##~~~#~~##~~~#~~##~~##~~#########
#~~~~~~##~~~~~###~~~~~~##~~#~~~##~~#~~~##~~##~~##~~~~~~#
#########~~######~~##~~##~~##~~##~~##~~##~~##~~#########
#########~~######~~##~~##~~##~~##~~##~~###~~~~##########
######################################################*/
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define str string
#define rtn return
#define endl '\n'
#define f first
#define s second
#define sz(x) (int)(x).size()
#define pb push_back
#define db long double
#define bs 1000000007
#define inf 2e18
#define eps 1e-15
#define pll pair <ll, ll>
#define vi vector<ll>
#define fill(a,v) memset(a,v,sizeof(a))
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define loop(i,a,b) for(ll i=a;i<b;i++)
#define loop1(i,a,b) for(ll i=a;i<=b;i++)
#define rep(i,b) for(ll i=0;i<b;i++)
#define pool(i,a,b) for(ll i=b-1;i>=a;i--)
#define per(i,a) for(ll i=(a-1);i>=0;i--)

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " = " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << " = " << arg1<<" |";
  __f(comma+1, args...);
}
#else
#define trace(...)
#endif

const int MAXN = 4e5 + 7;
vi add[MAXN];
int n, d, k;
int seen[MAXN];
int deg[MAXN];
int depth[MAXN];

void add_edge(int a, int b) {
  add[a].pb(b);
  add[b].pb(a);
  deg[a]++;
  deg[b]++;
}

void nie() {
  cout << "NO";
  exit(0);
}

void dfs(int s) {
  seen[s] = 1;
  for (auto i : add[s]) {
    if (!seen[i]) {
      cout << s << ' ' << i << endl;
      dfs(i);
    }
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  cin >> n >> d >> k;
  if (n < d + 1) {
    nie();
  }
  if (k == 1) {
    if (n == 2 && d == 1) {
      cout << "YES\n";
      cout << 1 << ' ' << 2 << endl;
      rtn 0;
    } else nie();
  }
  if (k == 2) {
    if (d == n - 1) {
      cout << "YES\n";
      for (int i = 1; i <= n - 1; i++) cout << i << ' ' << i + 1 << endl;
      rtn 0;
    } else nie();
  }
  for (int i = 1; i <= d; i++) {
    add_edge(i, i + 1);
    depth[i] = 0;
    depth[i + 1] = 0;
  }
  int cn = d+2;
  int rem = n - (d + 1);
  //trace(rem);
  for (int i = 2; i <= d && rem; i++) {
    queue<int> child;
    while (deg[i] < k && rem) {
      //cout << "added " << i << ' ' << cn << endl;
      add_edge(i, cn);
      depth[cn] = depth[i] + 1;
      child.push(cn);
      cn++;
      rem--;
    }
    while (!child.empty() && rem) {
      int px = child.front();
      child.pop();
      int gx = max(d+1-i, i-1) + depth[px];
      while (gx < d && rem && deg[px] < k) {
        add_edge(px, cn);
        depth[cn] = depth[px] + 1;
        int either = max(d+1 - i, i - 1);
        if (either + depth[cn] < d) child.push(cn);
        ++cn;
        --rem;
      }
    }

  }
  if (rem) {
    nie();
  }
  cout << "YES\n";
  dfs(1);
  rtn 0;
}
