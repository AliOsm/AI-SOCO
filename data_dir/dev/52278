#include <bits/stdc++.h>
#define ll long long
#define ull unsigned ll
#define ld long double
#define F first
#define S second
#define mp make_pair
#define pb push_back

using namespace std;

const int MIN = 1e3 + 2;
const int MXN = 1e6 + 3;
const int INF = 1e9 + 7;
const ll LINF = 1e18 + 15;
const double EPS = 1e-9;

ll t[MXN * 4];
int turn, ps = 1;
ll ans = 1;

int get_sum (int v, int tl, int tr, int l, int r) {
	if (l > r)
		return 0;
	if (l == tl && r == tr)
		return t[v];
	int tm = (tl + tr) / 2;
	return get_sum (v*2, tl, tm, l, min(r,tm))
		+ get_sum (v*2+1, tm+1, tr, max(l,tm+1), r);
}
void update (int v, int tl, int tr, int pos, int new_val) {
	if (tl == tr)
		t[v] = new_val;
	else {
		int tm = (tl + tr) / 2;
		if (pos <= tm)
			update (v*2, tl, tm, pos, new_val);
		else
			update (v*2+1, tm+1, tr, pos, new_val);
		t[v] = t[v*2] + t[v*2+1];
	}
}
int n, k;                  
int main(){
	srand(time(NULL));
	//freopen ("input.txt", "r", stdin);
	//freopen ("output.txt", "w", stdout);
	cin >> n >> k;
	if (k * 2 > n)
		k = n - k;
	while (true){
		turn++;
		if (ps + k <= n){
			ans += get_sum (1, 1, n, ps + 1, ps + k - 1);
			ans++;
			cout << ans << " ";
			update (1, 1, n, ps, get_sum(1, 1, n, ps, ps) + 1);
			update (1, 1, n, ps + k, get_sum(1, 1, n, ps + k, ps + k) + 1);
		}
		else {
			ans += get_sum(1, 1, n, ps + 1, n);
			ans += get_sum(1, 1, n, 1, ps + k - n - 1);
			ans++;
			cout << ans << " ";
			update (1, 1, n, ps, get_sum(1, 1, n, ps, ps) + 1);
			update (1, 1, n, ps + k - n, get_sum(1, 1, n, ps + k - n, ps + k - n) + 1); 			
		}     
		if (ps + k > n){
			ps = ps + k - n;
		}
		else {
			ps = ps + k;
		}
		if (turn == n)
			return 0;
	}
  	return 0;
}