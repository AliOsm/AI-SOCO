///** One Last Try ***///
#include<bits/stdc++.h>
using namespace std;
#define mod 1000000007
#define ll long long int
#define inf ( int  )( 1e9 + 10 )
#define mxs (int)( 1e6 + 10 )
//#define md  int mid = ( l + r )>>1;
//int dx[]={+1,-1,+0,+0};///Four Directions
//int dy[]={+0,+0,+1,-1};///Four directions
//int dx [] = {+1,-1,+0,+0,-1,-1,+1,+1};///Eight Directions
//int dy [] = {+0,+0,+1,-1,+1,-1,-1,+1};///Eight Directions
ll ans, t, n, m, i, j, k, a, b, c, d, e,f,p, q;
string s, s2, s3, s4;
ll ar [ mxs ] , ar2 [ mxs ] , cum [ mxs ] , ar3 [ mxs ];
void brainfuck();
int main()
{
    //freopen("highways.in","r",stdin);
    //freopen("highways.out","w",stdout);
    ios_base::sync_with_stdio(NULL);
    cin.tie(NULL);
    cout.tie(NULL);
    brainfuck();
    return 0;
}
void brainfuck()
{
    cin>>n>>m;
    for ( i = 1 ; i <= n; i++ )cin>>ar [ i ];
    sort( ar + 1 , ar + n + 1 );
    reverse( ar + 1 , ar + n + 1 );
    for ( i = 1 ; i <= n; i++ )
    {
        ar2 [ i ] = ++c;
        if ( c == m )c = 0;
    }
    for ( i = n ; i >= 1; i-- )
    {
        ar3 [ ar2 [ i ] ] += ar [ i ];
        cum [ i ] = ar3 [ ar2 [ i ] ];
    }
    ll sum = 0;
    b = 1;
    for ( i = 1; i <= n; i++ )
    {
        a++;
        if ( a > m )
        {
            b++;
            a = 1;
        }
        sum += ar [ i ] * b;
    }
    vector < ll > v;
    v.push_back( sum );
    for ( i = 1 ; i < n; i++ )
    {
        sum -= cum [ i ];
        v.push_back( sum );
    }
    while( !v.empty() )
    {
        cout<<v.back()<<" ";
        v.pop_back();
    }
}
