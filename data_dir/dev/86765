#pragma GCC optimize("Ofast")
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define F first
#define S second
#define int long long
#define ll long long
//#define int  unsigned long long
#define pb push_back
//#define double long double

using namespace std;
using namespace __gnu_pbds;
typedef  tree< int , null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
const int N = 3000000;
const int mod = 998244353;
const int K = 20005;
const int M = 16;
int f[N], invf[N];
int binpow(int x, int y){
    int res = 1;
    while(y){
        if (y % 2) res = res * x % mod;
        y /= 2;
        x = x * x % mod;
    }
    return res;
}
main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    int d;
    cin >> d;
    vector <int> a;
    f[0] = 1;
    for (int i = 1; i < N; i++) f[i] = f[i - 1] * i % mod;
    for (int i = 0; i < N; i++) invf[i] = binpow(f[i], mod - 2);
    for (int i = 2; i * i <= d; i++){
        if (d % i == 0){
            int pr = 1;
            for (int j = 2; j * j <= i; j++){
                if (i % j == 0){
                    pr = 0;
                    break;
                }
            }
            if (pr) a.pb(i);
            if (i * i != d){
                int pr = 1;
                for (int j = 2; j * j <= d / i; j++){
                    if ((d / i) % j == 0){
                        pr = 0;
                        break;
                    }
                }
                if (pr) a.pb(d / i);
            }
        }
    }
    int q;
    cin >> q;
    int n = a.size();
    while(q--){
        int u, v;
        cin >> u >> v;
        int s1 = 0;
        int s2 = 0;
        int ans = 1;
        for (int i = 0; i < n; i++){
            int k1 = 0;
            int k2 = 0;
            while(u % a[i] == 0){
                k1++;
                u /= a[i];
            }
            while(v % a[i] == 0){
                k2++;
                v /= a[i];
            }
            if (k1 == k2) continue;
            if (k1 > k2){
                s1 += k1 - k2;
                ans = ans * invf[k1 - k2] % mod;
            } else{
                s2 += k2 - k1;
                ans = ans * invf[k2 - k1] % mod;
            }
        }
        ans = ans * f[s1] % mod * f[s2] % mod;
        cout << ans << '\n';
      //  return 0;
    }
}
