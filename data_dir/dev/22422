#include "bits/stdc++.h"
#include "ext/pb_ds/tree_policy.hpp"
#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){ 
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}


const int maxn = 300010;
int n;
int arr[maxn];

int gcdTable[1010][1010];
int ___gcd(int a,int b){
	if(a==0)return b;
	b%=a;
	if(a<1010)return gcdTable[a][b];
	return ___gcd(b,a);
}
struct seg_tree{
	int dp[19][maxn];
	void build(){
		REP(i,1,n+1)dp[0][i] = arr[i];
		REP(i,1,19){
			REP(j,1,n+2-(1<<i)){
				dp[i][j] = ___gcd(dp[i-1][j],dp[i-1][j+(1<<(i-1))]);
			}
		}
	}
	int queryGCD(int l,int r){
		int p = floor(log2(r-l+1));
		return ___gcd(dp[p][r-(1<<p)+1],dp[p][l]);
	}
};





seg_tree tree;

PII getRight(int cur,int l){
	int curgcd = tree.queryGCD(cur,l);
	int r = n;
	while(l<r){
		int mid = (l+r)/2+1;
		if(tree.queryGCD(cur,mid)==curgcd)l = mid;
		else r = mid-1;
	}
	return MP(l,curgcd);
}

vector<int>fac[1000010];
vector<int>occ[1000010];
bool queryExistance(int val,int l,int r){
	auto p = LB(all(occ[val]),l);
	if(p==occ[val].end())return 0;
	return(*p>=l && *p<=r);
}

void init(){
	for(int i = 1;i<1000001;i++){
		if(!sz(occ[i]))continue;
		for(int j = i;j<1000001;j+=i){
			fac[j].PB(i);
		}
	}
	for(int i = 1;i<1010;i++){
		gcdTable[i][0] = gcdTable[0][i] = i;
	}
	for(int i = 1;i<1010;i++){
		for(int j = 1;j<1010;j++){
			if(i<j){
				gcdTable[i][j] = gcdTable[i][j-i];
			}else{
				gcdTable[i][j] = gcdTable[i-j][j];
			}
		}
	}
}
PII ans = MP(0,0);
void upd(PII temp){
	if(temp.se-temp.fi>ans.se-ans.fi)ans = temp;
}
bool beautiful(int l,int r){
	int gcd = tree.queryGCD(l,r);
	for(auto factor:fac[gcd]){
		if(queryExistance(factor,l,r)){
			return true;
		}
	}
	return false;
}
int main(){
	in(n);
	REP(i,1,n+1)in(arr[i]);
	REP(i,1,n+1){
		occ[arr[i]].PB(i);
	}
	init();
	tree.build();
	REP(i,1,n+1){
		int l = i+ans.se-ans.fi;
		while(l<=n){
			PII curRight = getRight(i,l);
			for(auto factor:fac[curRight.se]){
				if(queryExistance(factor,i,curRight.fi)){
					upd(MP(i,curRight.fi));
					break;
				}
			}
			l = curRight.fi+1;
		}
	}
	vector<int>prs;prs.reserve(maxn);
	if(ans.fi)prs.PB(ans.fi);
	REP(i,ans.fi+1,n+1-(ans.se-ans.fi)){
		if(beautiful(i,i+ans.se-ans.fi)){
			prs.PB(i);
		}
	}
	printf("%d %d\n",sz(prs),ans.se-ans.fi);
	for(auto i:prs)printf("%d ",i);
	return 0;
}