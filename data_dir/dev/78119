	//   . .. ... .... ..... be name khoda ..... .... ... .. .   \\

#include <bits/stdc++.h>
using namespace std;

inline int in() { int x; scanf("%d", &x); return x; }
const int N = 2002;

int x[N], las[N], nex[N];
double dp[N][N][2][2];

int main()
{
	int n = in(), h = in();
	double p, q;
	cin >> p;
	q = 1.0 - p;
	for(int i = 1; i <= n; i++)
		x[i] = in();
	sort(x + 1, x + n + 1);
	x[0] = -1e9;
	x[n + 1] = 1e9;
	for(int i = 1; i <= n; i++)
		las[i] = (x[i] >= x[i - 1] + h ? i : las[i - 1]);
	for(int i = n; i; i--)
		nex[i] = (x[i] + h <= x[i + 1] ? i : nex[i + 1]);
	for(int r = 1; r <= n; r++)
		for(int l = r; l; l--)
			for(int lD = 0; lD < 2; lD++)
				for(int rD = 0; rD < 2; rD++)
				{
					// D ? Right : Left

					double &e = dp[l][r][lD][rD];
					int rTah = (rD ? x[r + 1] : x[r + 1] - h);
					int lSar = (lD ? x[l - 1] + h : x[l - 1]);
					if(l == r)
					{
						e += p * min(h, max(0, (x[l] - lSar)));
						e += q * min(h, max(0, (rTah - x[l])));
						continue;
					}

					e += p * (max(0, min(h, min(x[l], rTah) - lSar)) + dp[l + 1][r][0][rD]);
					int tah = min(nex[l], r);
					e += q * (max(0, min(rTah, x[tah] + h) - max(lSar, x[l])) + dp[tah + 1][r][1][rD]);

					e += q * (max(0, min(h, rTah - max(lSar, x[r]))) + dp[l][r - 1][lD][1]);
					int sar = max(l, las[r]);
					e += p * (max(0, min(x[r], rTah) - max(lSar, x[sar] - h)) + dp[l][sar - 1][lD][0]);

					e *= 0.5;
				}
	cout << setprecision(10) << fixed << dp[1][n][0][0] << endl;
}
