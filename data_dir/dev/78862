#include <bits/stdc++.h>

using namespace std;

#define rd ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)

int arr[(int)1e5+5];
int propVal[4*(int)1e5+5];

void update(int root,int b,int e,int l,int r){
    if(l<=b && e<=r){
        propVal[root]-=1;
        return;
    }
    if(e<l || r<b)return;

    int m=(b+e)/2;
    update(root<<1,b,m,l,r);
    update((root<<1)|1,m+1,e,l,r);
}
int query(int root,int b,int e,int carry=0){
    if(b==e)return carry+propVal[root]+arr[b];
    int m=(b+e)/2;
    return min(query(root<<1,b,m,carry+propVal[root]),query((root<<1)|1,m+1,e,carry+propVal[root]));
}
int queryHigh(int root,int b,int e,int carry=0){
    if(b==e)return carry+propVal[root]+arr[b];
    int m=(b+e)/2;
    return max(queryHigh(root<<1,b,m,carry+propVal[root]),queryHigh((root<<1)|1,m+1,e,carry+propVal[root]));
}
int main(){
    //rd;

    int n,m;
    scanf("%d %d",&n,&m);

    vector<pair<int,int> >vec;
    for(int i=1;i<=n;i++){
        scanf("%d",&arr[i]);
        vec.push_back(make_pair(arr[i],i));
    }
    sort(vec.begin(),vec.end(),greater<pair<int,int> >());

    int seg[m+5][3];
    for(int i=1;i<=m;i++)scanf("%d %d",&seg[i][1],&seg[i][2]);

    int res=vec[0].first-vec[vec.size()-1].first;
    vector<int>resIdx;
    for(int i=0;i<min(n,m);i++){
        int idx=vec[i].second;
        int high=vec[i].first;

        vector<int>temp;
        for(int j=1;j<=m;j++){
            int l=seg[j][1];
            int r=seg[j][2];

            if(r<idx || idx<l){
                update(1,1,n,l,r);
                temp.push_back(j);
            }
        }
        int low=query(1,1,n);
        if(res<high-low){
            res=high-low;
            resIdx=temp;
        }
        memset(propVal,0,sizeof(propVal));
    }

    //additional
    vector<int>temp;
    for(int j=1;j<=m;j++){
        int l=seg[j][1];
        int r=seg[j][2];

        update(1,1,n,l,r);
        temp.push_back(j);
    }

    int high=queryHigh(1,1,n);
    int low=query(1,1,n);
    if(res<high-low){
        res=high-low;
        resIdx=temp;
    }
    //additional end

    printf("%d\n",res);
    printf("%d\n",(int)resIdx.size());
    for(int i=0;i<(int)resIdx.size();i++){
        if(i)printf(" ");
        printf("%d",resIdx[i]);
    }
    puts("");

    return 0;
}
