
// Problem : B. Dreamoon Likes Sequences
// Contest : Codeforces Round #631 (Div. 1) - Thanks, Denis aramis Shitov!
// URL : https://codeforces.com/contest/1329/problem/B
// Memory Limit : 256 MB
// Time Limit : 1000 ms
// Powered by CP Editor (https://github.com/cpeditor/cpeditor)

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
ordered_set;	

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<pii, int> para;
const ll inf = 1e18 + 7;
const ll maxN = 1e6 + 5;
map<int, ll> dp;
int d;

int bp(int x) {
	return (1 << __builtin_clz(x));
}

ll solve(ll x, ll MOD) {
	//cout << x << endl;
	if (x == 0) return 0;
	if (x == 1) return 1;
	if (dp.count(x)) return dp[x];
	if (x % 2 == 0) {
		dp[x] = (solve(x - 1, MOD) * 2LL + 1) % MOD;
		return dp[x];
	}
	if (x % 2 == 1) {
		ll bigPot = x / 2 + 1;
		//cout << x << " " << bigPot << endl;
		ll ans = (solve(bigPot, MOD) + ((x - bigPot) % MOD) * (solve(bigPot - 1, MOD) + 1) % MOD) % MOD;
		dp[x] = ans;
		return dp[x];
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
	int t;
	cin >> t;
	REP(_, t) {
		dp.clear();
		ll MOD;
		cin >> d >> MOD;
		solve((1 << 30), MOD);
		dp[0] = 0;
		dp[1] = 1 % MOD;
		if (dp.count(d)) cout << dp[d] << endl;
		else {
			//cout << 31 - __builtin_clz(d) << endl;
			int x = 1 << (31 - __builtin_clz(d));
			//cout << d << " " << x << endl;
			cout << (dp[x] + ((d - x) * (dp[x - 1] + 1)) % MOD) % MOD << endl;
		}
	}
	return 0;
}
 
