#include <bits/stdc++.h>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
#define PI 3.14159265358979323846
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;

#define LL "%I64d"

const int MAXN = 100010;

ll n, d, b;
ll nal[MAXN];

ll pmid;

// P sum
ll p1nal[MAXN], p2nal[MAXN];

ll Get(ll* from, int l, int r){
  if(l > r) return 0;
  if(l == 0) return from[r];
  else return from[r] - from[l - 1];
}

void InitP(ll how){
  for(int i = 0;i < n;++i){
    p1nal[i] = min(how, nal[i]);
    how -= p1nal[i];
  }

  for(int i = 0;i < n;++i)
    p2nal[i] = nal[i] - p1nal[i];

  for(int i = 1;i < n;++i)
    p1nal[i] += p1nal[i - 1],
    p2nal[i] += p2nal[i - 1];
}

pair<bool, bool> Can(int side, ll sep){
  InitP(sep);
  pair<bool, bool> res = mp(true, true);

  // P1
  ll need = 0;
  for(int i = side;i <= pmid;++i){
    ll have = Get(p1nal,
                  max(0LL, i - (i + 1) * d),
                  min(n - 1, i + (i + 1) * d));
    need += b;
    if(need > have){
      res.fi = false;
      break;
    }
  }

  // P2
  need = 0;
  for(int i = n - 1 - side;i > pmid;--i){
    ll have = Get(p2nal,
                  max(0LL, i - (n - i) * d),
                  min(n - 1, i + (n - i) * d));
    need += b;
    if(need > have) {
      res.se = false;
      break;
    }
  }

  return res;
}

bool CanSide(int side){
  ll lo = 0, hi = n * b, mid;
  for(;;){
    if(lo + 1 >= hi){
      auto c1 = Can(side, lo);
      auto c2 = Can(side, hi);
      if(c1.fi && c1.se) return true;
      if(c2.fi && c2.se) return true;
      return false;
    }
    mid = (lo + hi) >> 1;
    auto can = Can(side, mid);
    if(can.fi && can.se) return true;
    if(!can.fi && !can.se) return false; // !!!

    if(can.fi) hi = mid;
    else lo = mid;
  }
}

int Solve(){
  int lo = 0, hi = n >> 1, mid;
  for(;;){
    if(lo + 1 >= hi){
      if(CanSide(lo)) return lo;
      return hi;
    }
    mid = (lo + hi) >> 1;
    if(CanSide(mid)) hi = mid;
    else lo = mid;
  }
}

int main(){
  scanf(LL LL LL, &n, &d, &b);
  for(int i = 0;i < n;++i)
    scanf(LL, &nal[i]);

  pmid = (n - 1) / 2;  // [0 -> pmid]

  printf("%d\n", Solve());

  return 0;
}
