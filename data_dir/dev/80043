#include <bits/stdc++.h>
using namespace std;
#define finish(x) return cout << x << endl, 0;
#define ll long long

int n, ans = (int)1e9;;
char grid[4][101][101];
char curg[500][500];

int calc(vector <int> &cur, int white, int black){
    int ret = 0, row = 0, col = 0;
    while(row != 2*n){
        for(int i = 0 ; i < 2*n ; i++){
            if(row < n){
                if(i < n) curg[row][i] = grid[cur[0]][row][i];
                else curg[row][i] = grid[cur[1]][row][i-n];
            }
            else{
                if(i < n) curg[row][i] = grid[cur[2]][row-n][i];
                else curg[row][i] = grid[cur[3]][row-n][i-n];
            }
        }
        row++;
    }
    for(int i = 0 ; i < 2*n ; i++)
        for(int j = 0 ; j < 2*n ; j++){
            if((i+j)%2 == 0 && curg[i][j]-'0' != white) ret++;
            if((i+j)%2 && curg[i][j]-'0' != black) ret++;
        }
    return ret;
}
int solve(vector <int> &cur){
    return min(calc(cur, 0, 1), calc(cur, 1, 0));
}
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    cin >> n;
    for(int k = 0 ; k < 4 ; k++)
        for(int i = 0 ; i < n ; i++)
            for(int j = 0 ; j < n ; j++)
                cin >> grid[k][i][j];
    vector <int> tr = {0, 1, 2, 3};
    do{
        ans = min(ans, solve(tr));
    } while(next_permutation(tr.begin(), tr.end()));
    cout << ans << endl;
    return 0;
}
