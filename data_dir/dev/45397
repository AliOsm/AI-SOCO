#include<iostream>
#include<vector>
#include<map>
#include<set>
#include<cassert>
#include<cassert>
#include<unordered_map>
#include<unordered_set>
#include<functional>
#include<queue>
#include<stack>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<sstream>
#include<iomanip>
#include<cstdio>
#include<cstdlib>
#include<numeric>
#include<random>
#include<chrono>
#include<bitset>
using namespace std;

#define all(x) (x).begin(), (x).end()
#define pb push_back
#define xx first
#define yy second
#define gc getchar
#define IO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define mp make_pair

#ifndef ONLINE_JUDGE
#  define LOG(x) (cerr << #x << " = " << (x) << endl)
#else
#  define LOG(x) ((void)0)
#endif

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const double PI=3.1415926535897932384626433832795;
const ll INF = 1LL<<62;
const ll MINF = -1LL<<62;

template<typename T> T getint() {
	T val=0;
	char c;
	
	bool neg=false;
	while((c=gc()) && !(c>='0' && c<='9')) {
		neg|=c=='-';
	}

	do {
		val=(val*10)+c-'0';
	} while((c=gc()) && (c>='0' && c<='9'));

	return val*(neg?-1:1);
}

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); uniform_int_distribution<int>(0, n-1)(rng)
const int MAXN=100001;
vector<int> adj[MAXN];

int main() {
	IO;
	int n,m;
	cin>>n>>m;
	if(m==0) {
		cout<<"-1\n";
		return 0;
	}
	
	int x=-1,y=-1;
	vector<pair<int,int>> lst;
	for(int i=0;i<m;++i) {
		int a,b;
		cin>>a>>b;
		lst.emplace_back(a,b);
		adj[a].pb(b);
		adj[b].pb(a);
		x=a;
		y=b;
	}
	
	for(int i=1;i<=n;++i) {
		sort(all(adj[i]));
	}
	
	vector<int> st(n+1, -1);
	st[x]=1;
	st[y]=2;
	for(int i=1;i<=n;++i) {
		if(!binary_search(all(adj[x]), i)) st[i]=1;
		if(!binary_search(all(adj[y]), i)) st[i]=2;
	}
	
	vector<ll> sz(4);
	for(int i=1;i<=n;++i) {
		if(st[i]==-1) st[i]=3;
		sz[st[i]]++;
	}

	map<pair<int,int>, ll> cnt;	
	bool ok=true;
	for(auto i:lst) {
		ok&=st[i.xx]!=st[i.yy];
		cnt[mp(st[i.xx],st[i.yy])]++;
		cnt[mp(st[i.yy],st[i.xx])]++;
	}
	
	ok&=cnt[mp(1,2)]==sz[1]*sz[2];
	ok&=cnt[mp(1,3)]==sz[1]*sz[3];
	ok&=cnt[mp(2,3)]==sz[2]*sz[3];
	ok&=sz[1]>0;
	ok&=sz[2]>0;
	ok&=sz[3]>0;
	
	if(ok) {
		for(int i=1;i<=n;++i) cout<<st[i]<<" ";
		cout<<"\n";
	}else {
		cout<<"-1\n";
	}
	
	return 0;
}
