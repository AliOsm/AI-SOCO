#include<bits/stdc++.h>
#define ll long long
#define f first
#define s second
#define pb push_back
#define mp make_pair
using namespace std;
ll m,a,b,ans,d[1000006],y;
set<pair<ll,ll> > st;
ll solve(ll m){
    st.insert(mp(0LL,0LL));
    
    for(int i=1; i<=m; i++){
        d[i] = 999999999;
    }
    d[0] = 0;
    
    while(st.size()){
        ll x = (*st.begin()).s;
        st.erase(st.begin());
        if(x + a <= m){
            if(d[x + a] > d[x]){
                if(st.find(mp(d[x+a],x+a)) != st.end())st.erase(st.find(mp(d[x+a],x+a)));
                d[x + a] = max(d[x],x+a);
                st.insert(mp(d[x + a] , x +a));
            }
        }
        if(x - b >= 0){
            if(d[x - b] > d[x]){
                if(st.find(mp(d[x- b],x- b)) != st.end())st.erase(st.find(mp(d[x- b],x- b)));
                d[x - b] = max(d[x],x-b);
                st.insert(mp(d[x - b] , x -b));
            }
        }
    }
    
    for(int i=0; i<=m; i++){
        if(d[i] != 999999999)ans += (m - d[i] + 1);
    }
    return ans;
}
ll k(ll x){
    ll n = x / y + 1LL;
    return (n * (n-1) * y) / 2LL;
}
int main(){
    cin >> m >> a >> b;
    
    if(m <= 1000000){
        cout << solve(m);
        return 0;
    }
    
    
    
    solve(1000000);
    ans = 0;
    for(int i=0; i<=1e6; i++){
        if(d[i] != 999999999)ans += (m - d[i] + 1);
    }
    
    y = __gcd(a,b);
    ans += (m / y - (1000000 / y)) * (m + 1LL) - k(m) + k(1000000);
    
    cout << ans;
    
    
    return 0;
}