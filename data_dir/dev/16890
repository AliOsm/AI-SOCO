/*input
13 4 1 3
9 9 9 9 9 9 9 9 9 9 4 3 4
4 3 4

13 4 3 3
3 2 6 4 1 4 4 7 1 3 3 2 4
4 3 4


7 3 2 2
1 2 3 3 2 1 2
2 2
*/
#include <bits/stdc++.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define __builtin_popcount __builtin_popcountll
#define bit(x,y) ((x>>y)&1LL)
#define loop(i,l,r) for(int lll=(l),rrr=(r),i=lll; i<=rrr; i++)
#define rloop(i,l,r) for(int i=(int)l; i>=(int)r; i--)
const int N = 500005;
template <class T1, class T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &a) {
	return os << '(' << a.first << ", " << a.second << ')';
}
template <class T>
ostream &operator<<(ostream &os, const vector<T> &a) {
	os << '[';
	for (unsigned int i = 0; i < a.size(); i++)
		os << a[i] << (i < a.size() - 1 ? ", " : "");
	os << ']';
	return os;
}
int read() {
	int x; cin >> x; return x;
}

int m, k, n, s;
int a[N]; int need[N], cur[N];

int fulfil = 0;

void change(int X, int dir) {
	fulfil -= (cur[X] >= need[X]);
	cur[X] += dir;
	fulfil += (cur[X] >= need[X]);
}

// m la do dai day
// k la do dai doan
// n la so doan

int tmp[N];
vector<int> order;
void endSol(int L, int R, int maxR) {
	loop(i, L, R) {
		if (tmp[a[i]] == need[a[i]] && R > maxR) {
			order.push_back(i); R--;
		}
		else tmp[a[i]]++;
	}
	loop(i, 1, L - 1) {
		if (R > maxR) {
			order.push_back(i); R--;
		}
	}
	cout << order.size() << endl;
	for (auto it : order)cout << it << sp;
	cout << endl;
	exit(0);
}

signed main() {
#ifndef UncleGrandpa
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
#endif
	cin >> m >> k >> n >> s;
	loop(i, 1, m) cin >> a[i];
	loop(i, 1, s) need[read()]++;
	loop(i, 1, N - 5)if (cur[i] >= need[i]) fulfil++;
	int iter = 1;
	loop(i, 1, m) {
		change(a[i], 1);
		while (true) {
			change(a[iter], -1);
			if (fulfil == N - 5)iter++;
			else {
				change(a[iter], +1);
				break;
			}
		}
		if (fulfil == N - 5) {
			// ok this segment
			int maxR = min(n * k, (iter + k - 1) / k * k);
			while (maxR > m) maxR -= k;
			int curR = i;
			int needDel = max(0, curR - maxR);
			if (m - needDel >= n * k)
				endSol(iter, curR, maxR);
		}
	}
	cout << -1 << endl;
}