// In The Name Of God :
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <bits/stdc++.h>
using namespace std ;
using namespace __gnu_pbds;
#define X first 
#define Y second
#define int long long 
typedef long long ll ;
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
typedef pair < int , int > pii ; 
typedef pair < pii , int > pii_i ;
typedef pair < pii , pii > pii_ii ;
#define ordered_set(TYPE) tree<TYPE, null_type, less<TYPE>, rb_tree_tag, tree_order_statistics_node_update>
//#define "%I64d" "%I64d"
const int maxn = 1e6+100 ;
const int maxL = 21 ;
//const int inf = 1e13 ;
const int mod = 1e9+7 ;

void make ( const vector < int > &in , vector < int > &ret );
int n , m , pos [ maxn ] , sz [ maxn ] , par [ maxn ] ;
vector <int > vc [ maxn ] , hlp , ans [ maxn ] ;

int get_par ( int v )
{
  if ( par [ v ] == v )
    return v ;
  par [ v ] = get_par ( par [ v ] ) ;
  return par [ v ] ;
}

void add_edge ( int u , int v )
{
  v = get_par ( v ) ;
  u = get_par ( u ) ;
  if ( sz [ u ] > sz [ v ] ) 
    swap ( u , v ) ;
  // sz [ u ] <= sz [ v ] 
  par [ u ] = v ;
  sz [ v ] += sz [ u ] ;
}

int32_t main ( )
{
  fast ;
  cin >> n >> m ;
  for ( int i = 0 ; i < n ; i ++ )
    par [ i ] = i ; 
  
  for ( int i = 0 , u , v ; i < m ; i ++ )
    cin >> u >> v , u -- , v -- ,
  vc [ u ] . push_back ( v ) ,
    vc [ v ] . push_back ( u ) ;
  int mn  = n + 100 , pos = -1 ;  
  for ( int i = 0 ; i < n ; i ++ )
    if ( (long)vc [ i ] . size ( ) <= mn )
      mn = vc [ i ] . size ( ) , pos = i ;
  
  vector < int > hlp ;
  sort ( vc [ pos ] . begin ( ), vc [ pos ] . end ( ) ) ;
  make ( vc [ pos ] , hlp ) ;
  for ( int i = 1 ; i < (long)hlp . size ( ) ; i ++ )
    if ( get_par ( hlp [ i - 1 ] ) != get_par ( hlp [ i ] ) )
      add_edge ( hlp [ i - 1 ] , hlp [ i ] ) ;
  for ( int u : vc [ pos ] )
    {
      hlp . clear ( ) ;
      sort ( vc [ u ] . begin (  ) , vc [ u ] . end ( ) );
      make ( vc [ u ] , hlp ) ;
      for ( int i = 1 ; i < (long)hlp . size ( ) ; i ++ )
	if ( get_par ( hlp [ i - 1 ] ) != get_par ( hlp [ i ] ) )
	  add_edge ( hlp [ i - 1 ] , hlp [ i ] ) ;
    }
  for ( int i = 0 ; i < n ; i++)
    ans [ get_par ( i ) ] . push_back ( i ) ;
  vector < vector < int > > nmdnm ;
  for ( int i = 0 ; i < n ; i ++)
    if ( ans [ i ] . size ( ) )
      nmdnm . push_back ( ans [ i] ) ;
  cout << nmdnm . size ( ) << endl ;
  for ( int i = 0 ; i < (long)nmdnm . size ( ) ; i ++ )
    {
      cout << nmdnm [ i ] . size ( ) << ' ';
      for ( int j : nmdnm [ i ] )
	cout << j + 1<< ' ';
      cout << endl ;
    } 
  
}

void make ( const vector < int > &in , vector < int > &ret )
{
  ret . clear ( ) ;
  if ( in . size ( ) == 0 )
    {
      for ( int i = 0 ; i < n ; i ++)
	ret . push_back ( i ) ;
      return ; 
    }
  for ( int i = 0 ; i < in [ 0 ] ; i ++ )
    ret . push_back ( i ) ;
  for ( int i = 1 ; i < (long)in . size ( ) ; i ++ ) 
    {
      for ( int j = in [ i - 1 ] + 1 ; j < in [ i ] ; j ++ )
	ret . push_back ( j ) ; 
    }
  for (int i = in . back ( ) + 1 ; i < n ; i ++)
    ret . push_back ( i ) ;
  
  return ;
} 
