#include <bits/stdc++.h>
#define Nmax 1000005
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define MOD 1000000007
#define INF 1000000000

using namespace std;

int n,k,viz[Nmax],lens[Nmax],len,nxt[Nmax],sum[Nmax];
int cnt[Nmax],Have[Nmax];
bitset <Nmax> Dp,Init;

inline void Go(int x)
{
    ++lens[len];
    viz[x]=1;
    if(!viz[nxt[x]]) Go(nxt[x]);
}

inline int Solve(int ind, int k)
{
    int st=0,dr=ind,mij,sol=0;
    while(st<=dr)
    {
        mij=((st+dr)>>1);
        if(sum[mij]<=k)
        {
            sol=mij; st=mij+1;
        }
        else dr=mij-1;
    }
    return k-sol;
}

inline void Go_Bitset(int x, int cnt)
{
    for(int i=1;i<=cnt;++i) Dp|=(Dp<<x);
}

inline void Go_N(int x, int cnt)
{
    int i;
    Init=Dp;
    for(i=0;i<x;++i) Have[i]=0;

    for(i=0;i<=n;++i)
    {
        Have[i%x]+=Dp[i];
        Dp[i]=(Have[i%x]>0);
        if(i-x*cnt>=0) Have[(i-x*cnt)%x]-=Init[i-x*cnt];
    }
}

inline int Find_Minim()
{
    int i;
    Dp[0]=1;
    for(i=1;i<=len;++i) ++cnt[lens[i]];

    for(i=1;i<=n;++i)
    {
        if(!cnt[i]) continue;
        if(cnt[i]<=32) Go_Bitset(i,cnt[i]);
        else Go_N(i,cnt[i]);
    }

    return k+1-Dp[k];
}

int main()
{
    int mx=0,mn,i;
    #ifndef ONLINE_JUDGE
        freopen ("date.in","r",stdin);
        freopen ("date.out","w",stdout);
    #endif
    scanf("%d%d", &n,&k);
    for(i=1;i<=n;++i) scanf("%d", &nxt[i]);
    for(i=1;i<=n;++i)
        if(!viz[i])
        {
            ++len;
            Go(i);
        }

    int ck=k;
    for(i=1;i<=len && ck;++i)
    {
        int x=min(lens[i]/2,ck);
        mx+=2*x;
        ck-=x;
    }
    for(i=1;i<=len && ck;++i)
        if(lens[i]%2)
        {
            ++mx; --ck;
        }

    mn = Find_Minim();

    printf("%d %d\n", mn,mx);
    return 0;
}
