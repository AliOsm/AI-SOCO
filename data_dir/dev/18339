#include<bits/stdc++.h>
#define ll long long
using namespace std;
const ll INF=1e18;
int n;
int mx,my,gx,gy;

char s[200004];
int dx[4]={0,1,0,-1},
    dy[4]={1,0,-1,0};
map<char,int>mp;
struct point{
    int x,y;
    point(int _x=0,int _y=0){x=_x;y=_y;}
    point operator+(point B){
        return point(x+B.x,y+B.y);
    }
    void print(){
        printf("(%d,%d)",x,y);
    }
}p[200004];
struct Ds{
    int minx,miny,maxx,maxy;
    Ds(int _a=0,int _b=0,int _c=0,int _d=0){
        minx=_a;
        miny=_b;
        maxx=_c;
        maxy=_d;
    }
    void Merge(Ds B){
        minx=min(minx,B.minx);
        miny=min(miny,B.miny);
        maxx=max(maxx,B.maxx);
        maxy=max(maxy,B.maxy);
    }
    void print(){
        cout<<minx<<" "<<miny<<" "<<maxx<<" "<<maxy<<endl;
    }
}tr[200004];
void update(int k){
    tr[k].maxx=max(p[k].x,tr[k+1].maxx);
    tr[k].minx=min(p[k].x,tr[k+1].minx);
    tr[k].maxy=max(p[k].y,tr[k+1].maxy);
    tr[k].miny=min(p[k].y,tr[k+1].miny);
}
void build(){
    tr[n]=Ds(p[n].x,p[n].y,p[n].x,p[n].y);
    for(int i=n-1;i>=0;i--){
        update(i);
        //tr[i].print();cout<<"--"<<endl;
    }
}

Ds query(int k){
    return tr[k];
}
ll calc(Ds v){
    return 1LL*(v.maxx-v.minx+1)*(v.maxy-v.miny+1);
}
ll work(int st){
    Ds Gc,left=Ds(gx,gy,mx,my);
    //left.print();
    Ds right=query(st);
    ll res=-1;
    for(int i=0;i<4;i++){
        Gc=left;
        Gc.Merge(Ds(right.minx+dx[i],right.miny+dy[i],right.maxx+dx[i],right.maxy+dy[i]));
        Gc.Merge(Ds(p[st-1].x+dx[i],p[st-1].y+dy[i],p[st-1].x+dx[i],p[st-1].y+dy[i]));
        //Gc.print();
        ll now=calc(Gc);
        if(res==-1||(res!=-1&&res>now)){
            res=now;
        }
    }
    //cout<<"qqqq"<<endl;
    return res;
}

int w33ha(){
    p[0]=point(0,0);
    scanf("%s",s+1);
    n=strlen(s+1);
    for(int i=1;i<=n;i++){
        p[i]=p[i-1]+point(dx[mp[s[i]]],dy[mp[s[i]]]);
        //p[i].print();
    }
    //puts("");
    ll ans=INF;
    build();
    mx=p[0].x;
    my=p[0].y;
    gx=p[0].x;
    gy=p[0].y;
    for(int i=1;i<=n;i++){
        ans=min(ans,work(i));
        mx=max(mx,p[i].x);
        my=max(my,p[i].y);
        gx=min(gx,p[i].x);
        gy=min(gy,p[i].y);
    }
    printf("%lld\n",ans);
    return 0;
}
int main(){
    mp['W']=3;
    mp['D']=0;
    mp['S']=1;
    mp['A']=2;
    int T;scanf("%d",&T);
    while(T--)w33ha();
    return 0;
}
