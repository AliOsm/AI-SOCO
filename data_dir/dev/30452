#pragma GCC optimize("O3")

#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <random>
#include <cmath>
#include <chrono>
#include <bitset>

#define ll long long
#define ld long double
#define pb push_back
#define eb emplace_back
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()

#define int long long
using namespace std;

const int INF = 2e15;
const int MOD = 1e9 + 7;
const int MB = 20;

void solve() {
	int n, k;
	cin >> n >> k;
	string s;
	cin >> s;
	vector<vector<vector<int>>> dp(26, vector<vector<int>>(n + 1, vector<int>(n)));
	dp[s[0] - 'a'][1][0] = 1;
	for (int i = 1; i < n; i++) {
		for (int len = 0; len <= n; len++) {
			for (int c = 0; c < 26; c++) {
				if (s[i] - 'a' == c && len) {
					if (len == 1) dp[c][len][i] = 1;
					else {
						for (int j = 0; j < 26; j++) {
							dp[c][len][i] += dp[j][len - 1][i - 1];
						}
					}
				}
				else {
					dp[c][len][i] = dp[c][len][i - 1];
				}
			}
		}
	}

	int ans = 0;
	for (int i = n; i > 0; i--) {
		int sum = 0;
		for (int j = 0; j < 26; j++) sum += dp[j][i][n - 1];
		
		if (k >= sum) {
			k -= sum;
			ans += sum * (n - i);
		}
		else {
			ans += k * (n - i);
			k = 0;
			break;
		}
	}
	if (k) {
		k--;
		ans += n;
	}
	if (k) cout << -1;
	else cout << ans;
}

signed main() {
	/*
	freopen("search.in", "r", stdin);
	freopen("search.out", "w", stdout);
	*/
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	solve();
}