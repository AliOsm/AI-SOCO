#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

#define debug(a) cout << #a << ": " << a << endl
#define debuga1(a, l, r) fto(i, l, r) cout << a[i] << " "; cout << endl
#define fdto(i, r, l) for(int i = (r); i >= (l); --i)
#define fto(i, l, r) for(int i = (l); i <= (r); ++i)
#define ff first
#define ss second
#define mp make_pair
#define pb push_back
#define sz(a) (int)a.size()

const double PI = acos(-1.0);

double fRand(double fMin, double fMax)
{
    double f = (double)rand() / RAND_MAX;
    return fMin + f * (fMax - fMin);
}

template <class T>
T min(T a, T b, T c) {
    return min(a, min(b, c));
}

template <class T>
T max(T a, T b, T c) {
    return max(a, max(b, c));
}

struct pt {
    double x, y;
    int id, orient;
//    pt(): x(0), y(0), id(0), orient(0) {}
//    pt(double x, double y, int id, int orient): x(x), y(y), id(id), orient(orient) {}
    bool inline operator < (const pt &p) const {
        return tie(x, y) < tie(p.x, p.y);
    }
};

double dist(const pt &p, const pt &q) {
    return hypot(p.x - q.x, p.y - q.y);
}

pt rotate(pt p, double a) {
    return {p.x*cos(a) - p.y*sin(a), p.x*sin(a) + p.y*cos(a), p.id, p.orient};
}

const int MAXN = 100005;
const int MAXX = 1e9;
const int MAXOP = 1e7;

int n;
vector<pt> p;

int main () {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    scanf("%d", &n);
    fto(i, 1, n) {
        int x, y;
        scanf("%d%d", &x, &y);
        p.pb({x, y, i, 1});
        p.pb({-x, y, i, 2});
        p.pb({x, -y, i, 3});
        p.pb({-x,- y, i, 4});
    }

    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

    pair<pt, pt> ans;
    double minDist;

    while (true) {
        double alpha = 2*PI*uniform_int_distribution<int>(0, MAXX)(rng)/MAXX;
        fto(i, 0, sz(p)-1)
            p[i] = rotate(p[i], alpha);
        sort(p.begin(), p.end());

        minDist = MAXX;
        int opCnt = 0;
        fto(i, 0, sz(p)-1) {
            fto(j, i+1, sz(p)-1) {
                if (p[j].x - p[i].x >= minDist) break;
                if (p[j].id == p[i].id) continue;
                if (opCnt == MAXOP) break;
                ++opCnt;
                double d = dist(p[i], p[j]);
                if (d < minDist) {
                    minDist = d;
                    ans = mp(p[i], p[j]);
                }
            }
        }

        if (opCnt < MAXOP) break;
    }
//    fto(i, 0, sz(p)-1)
//        printf("%.9g %.9g %d %d\n", p[i].x, p[i].y, p[i].id, p[i].orient);

    ans.ss.orient = 5 - ans.ss.orient;
    printf("%d %d %d %d", ans.ff.id, ans.ff.orient, ans.ss.id, ans.ss.orient);

    return 0;
}
