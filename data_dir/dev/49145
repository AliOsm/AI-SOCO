#include <bits/stdc++.h>

using namespace std;

template <class T> void mini(T &l, T r) {l = min(l, r);}
template <class T> void maxi(T &l, T r) {l = max(l, r);}

string to_string(string s) {
  return '"' + s + '"';
}

string to_string(bool a) {
  return a ? "T" : "F";
}
 
string to_string(const char* s) {
  return to_string((string) s);
}
 
template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
 
template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}
 
void debug_out() { cerr << endl; }
 
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}
 
#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

using ll = long long;
using ld = long double;

const int N = 1e5 + 10, B = 5;
const ld eps = 1e-12;

int n, w;
vector <int> x, v;
vector <ld> t, y, a, b;

/*
struct Frac {
  ll a, b;
  Frac(ll _a, ll _b) {
    int s = sgn(_a) * sgn(_b);
    a = abs(_a), b = abs(_b);
    ll g = __gcd(a, b);
    a /= g;
    b /= g;
    a = s * a;
  }
  bool operator<(const Frac &r) {
    
  }
  bool operator==(const Frac &r) {
    return a == r.a && b == r.b;
  }
}*/

struct Bit {
  int u[N];
  void modify(int x, int v) {
    for (x += B; x < N; x += x & -x) {
      u[x] += v;
    }
  }

  int getsum(int x) {
    int s = 0;
    for (x += B; x; x -= x & -x) {
      s += u[x];
    }
    return s;
  }

  int query(int l, int r) {
    return getsum(r) - getsum(l - 1);
  }

} bit;

void run() {
  cin >> n >> w;
  x.resize(n);
  v.resize(n);
  y.resize(n);
  t.resize(n);
  a.resize(n);
  b.resize(n);
  for (int i = 0; i < n; ++i) {
    cin >> x[i];
    cin >> v[i];
  }

  for (int i = 0; i < n; ++i) {
    t[i] = ld(v[i]) / x[i];
    y[i] = ld(1) / x[i];
  }

  debug(t, y);

  vector <ld> va, vb;
  for (int i = 0; i < n; ++i) {
    a[i] = t[i] + y[i] * w;
    va.push_back(a[i]);
    b[i] = t[i] - y[i] * w;
    vb.push_back(b[i]);
  }
  
  sort(va.begin(), va.end());
  va.erase(unique(va.begin(), va.end(), [](ld a, ld b) {return abs(a - b) < eps;}), va.end());
  sort(vb.begin(), vb.end());
  vb.erase(unique(vb.begin(), vb.end(), [](ld a, ld b) {return abs(a - b) < eps;}), vb.end());

  int za = va.size(), zb = vb.size();

  debug(a, b);
  
  vector < pair <int, int> > vp;

  for (int i = 0; i < n; ++i) {
    int ta = lower_bound(va.begin(), va.end(), a[i] - eps) - va.begin();
    int tb = lower_bound(vb.begin(), vb.end(), b[i] - eps) - vb.begin(); 
    vp.emplace_back(ta, tb);
  }

  sort(vp.begin(), vp.end(), [](pair <int, int> a, pair <int, int> b){return make_pair(a.first, -a.second) < make_pair(b.first, -b.second);});

  debug(vp);
  ll ans = 0;
  for (int i = 0; i < n; ++i) {
    debug(i, bit.query(vp[i].second, zb), vp[i].second);
    ans += bit.query(vp[i].second, zb);
    bit.modify(vp[i].second, 1);
  }

  cout << ans << endl;
}

int main() {
  run();
  return 0;
}
