#include <bits/stdc++.h>
#define endl '\n'

using namespace std;
template<class T, class T2> inline void chkmax(T &x, const T2 &y) { if(x < y) x = y; }
template<class T, class T2> inline void chkmin(T &x, const T2 &y) { if(x > y) x = y; }
const int MAXN = (1 << 20);

int n, m, s;
vector<int> li[MAXN], adj[MAXN];
int deg[MAXN];

void read()
{
	cin >> n >> m;
	for(int i = 1; i <= n; i++)
	{
		int cnt;
		cin >> cnt;
		while(cnt--)
		{
			int x;
			cin >> x;
			adj[x].push_back(i);
			li[i].push_back(x);
			deg[i]++;
		}
	}

	cin >> s;
}

bool visited[MAXN];
bool dp[MAXN][2];
int par[MAXN][2];

void solve()
{
	queue<int> Q;
	for(int i = 1; i <= n; i++)
		if(deg[i] == 0)
		{
			visited[i] = 1;
			Q.push(i);
		}

	while(!Q.empty())
	{
		int u = Q.front();
		visited[u] = 1;
		Q.pop();

		for(auto it: adj[u])
		{
			if(deg[it] == 0) continue;

			deg[it]--;
			if(deg[it] == 0)
				Q.push(it), visited[u] = 1; 
		}
	}

	queue<pair<int, int> > q;
	q.push({s, 0});
	while(!q.empty())
	{
		int u = q.front().first, parity = q.front().second;
		q.pop();

		for(int i: li[u])
			if(!dp[i][parity ^ 1])
			{
				dp[i][parity ^ 1] = 1;
				par[i][parity ^ 1] = u;
				q.push({i, parity ^ 1});
			}
	}

	for(int i = 1; i <= n; i++)
		if(dp[i][1] && li[i].empty())
		{
			cout << "Win" << endl;
			vector<int> L;
			int p = 1, u = i;
			L.push_back(u);
			while(u != s || p != 0)
			{
				u = par[u][p];
				p ^= 1;
				L.push_back(u);
			}

			reverse(L.begin(), L.end());
			for(int x: L) cout << x << " ";
			cout << endl;
			return;
		}

	if(visited[s]) cout << "Lose" << endl;
	else cout << "Draw" << endl;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	read();
	solve();
	return 0;
}

