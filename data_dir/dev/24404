/*
  ------------------------- Hachiikung ---------------------------------
  ---------------------- Worrachate Bosri ------------------------------
  ------ Faculty of Computer Engineering Chulalongkorn University ------
*/
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<stack>
#include<list>
#include<set>
#include<map>
#include<string>
#include<utility>
using namespace std;
#define REP(i,FN) for(int i=0;i<FN;i++)
#define FOR(i,ST,FN) for(int i=ST;i<=FN;i++)
#define FORD(i,FN,ST) for(int i=FN;i>=ST;i--)
#define FORX(i,c) for(typeof(c.begin())i=c.begin();i!=c.end();i++)
#define pause system("pause")
#define S scanf
#define P printf
#define X first
#define Y second
#define pb push_back
#define PII pair<int,int>
#define mp make_pair
#define sz size()
#define eps 1e-8

const int MOD(1000000007);
const int INF((1<<30)-1);
const int MAXN(100005);

int n, t[MAXN], p[MAXN][25], L[MAXN], num[MAXN];

vector<int>a[MAXN];

void dfs(int node,int p,int l){

    t[node] = p;
    L[node] = l;
    num[node] = 1;

    REP(i,a[node].sz)
    {
        int u = a[node][i];
        if(u != p)
        {
            dfs(u, node, l+1);
            num[node] += num[u];
        }
    }
}

void preprocess () {
    dfs (1, -1, 0);
    FOR(i,1,n)
        for (int j=0; (1<<j)<n; ++j)
            p[i][j] = -1;
    FOR(i,1,n)
        p[i][0] = t[i];
    for (int j=1; (1<<j)<n; ++j)
        FOR(i,1,n)
            if (p[i][j-1] != -1)
                p[i][j] = p[p[i][j-1]][j-1];
}

int LCA (int u, int v) {
    if (L[u]<L[v]) swap(u, v);
    int log;
    for (log=1; (1<<log)<=L[u]; ++log);
    --log;
    for (int i=log; i>=0; --i)
        if (L[u]-(1<<i) >= L[v])
            u = p[u][i];
    if (u==v) return v;
    for (int i=log; i>=0; --i)
        if (p[u][i] != -1 && p[u][i] != p[v][i])
            u = p[u][i], v = p[v][i];
    return t[u];
}

int ancester(int x,int d){

    int k = 0;

    while(d > 0)
    {
        if(d&1)
            x = p[x][k];
        k++;
        d >>= 1;
    }

    return x;
}

int main(){

    S("%d",&n);
    REP(i,n-1)
    {
        int u,v;
        S("%d%d",&u,&v);
        a[u].pb(v);
        a[v].pb(u);
    }

    preprocess();

    int q;
    S("%d",&q);
    while(q--)
    {
        int x,y;
        S("%d%d",&x,&y);

        if(x == y)
        {
            P("%d\n",n);
            continue;
        }

        int lca = LCA(x,y), d = L[x]+L[y]-2*L[lca];

        if(d&1)
        {
            P("0\n");
        }
        else
        {
            if(L[x] < L[y]) swap(x,y);
            int u = ancester(x,d/2), v = ancester(x,d/2-1), w;

            if(u != lca)
            {
                P("%d\n",num[u]-num[v]);
            }
            else
            {
                w = ancester(y,d/2-1);
                P("%d\n",n-num[v]-num[w]);
            }
        }
    }

}
