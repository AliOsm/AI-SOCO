#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <string>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <fstream>
#include <cassert>
#include <cstring>
#include <unordered_set>
#include <unordered_map>
#include <numeric>
#include <ctime>
#include <bitset>
#include <complex>

using namespace std;

//1148

#define cerr if (false) cerr

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	int n;
	cin >> n;
	vector<int> p(n);
	for (auto &t : p) {
		cin >> t;
		t--;
	}
	vector<pair<int, int>> ans;
	vector<int> wr(n);
	for (int i = 0; i < n; i++) {
		wr[p[i]] = i;
	}
	auto my_swap = [&](int i, int j) {
		swap(wr[p[i]], wr[p[j]]);
		//cerr << "st " << (int)ans.size() << endl;
		if (abs(i - j) >= n / 2) {
			swap(p[i], p[j]);
			ans.push_back({i + 1, j + 1});
			return;
		}
		if (i < n / 2 && j < n / 2) {
			ans.push_back({i + 1, n});
			swap(p[i], p[n - 1]);
			ans.push_back({j + 1, n});
			swap(p[j], p[n - 1]);
			ans.push_back({i + 1, n});
			swap(p[i], p[n - 1]);
			return;
		} 
		 if (i >= n / 2 && j >= n / 2) {
			swap(p[i], p[0]);
			ans.push_back({i + 1, 1});
			//cout << i + 1 << ' ' << 1 << endl;
			swap(p[j], p[0]);
			ans.push_back({j + 1, 1});
			//cout << j + 1 << ' ' << 1 << endl;
			swap(p[i], p[0]);
			ans.push_back({i + 1, 1});
			//cout << i + 1 << ' ' << 1 << endl;
			return;
		}  
		if (i > j) {
			swap(i, j);
		}
		//cerr << "hr " << i + 1 << ' ' << j + 1 << endl;
		swap(p[j], p[0]);
		ans.push_back({j + 1, 1});
		//cout << j + 1 << ' ' << 1 << endl;
		swap(p[i], p[n - 1]);
		ans.push_back({i + 1, n});
		//cout << i + 1 << ' ' << n << endl;
		swap(p[0], p[n - 1]);
		ans.push_back({1, n});
		//cout << 1 << ' ' << n << endl;
		swap(p[j], p[0]);
		ans.push_back({j + 1, 1});
		//cout << j + 1 << ' ' << 1 << endl;
		swap(p[i], p[n - 1]);
		ans.push_back({i + 1, n});
		//cout << i + 1 << ' ' << n << endl;
	};
	for (int i = 0; i < n; i++) {
		if (wr[i] != i) {
			cerr << "as " << i + 1 << ' ' << wr[i] + 1 << endl;
			my_swap(i, wr[i]);
			for (auto t : p) {
				cerr << t + 1 << ' ';
			}
			cerr << endl;
		}
	}
	assert(is_sorted(p.begin(), p.end()));
	cout << ans.size() << endl;
	for (auto [f, s] : ans) {
		cout << f << ' ' << s << '\n'; 
	}
}
