#include <bits/stdc++.h>
using namespace std;

typedef unsigned short us;
const int N = 1e5 + 10, LOG = 16, M = 270000, D = 130, inF = numeric_limits<us>::max();

int A, q, form, u, x, k, s, nxt, cnt, num, lc[M], rc[M], sz[N];
bool have[N], done[M];
us vec[N][D];
unordered_map<int, int> mini[M];

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	for (int i = 1; i < N; i++)
		mini[i].reserve(1 << (LOG - (int)log(i) + 2));
	
	for (int i = 1; i < M; i++)
		lc[i] = i << 1, rc[i] = lc[i] | 1;
	
	for (int i = 1; i < N; i++)
		for (int j = i; j < N; j += i)
			vec[j][sz[j]] = (i > inF? -1: i), sz[j]++;
	cin >> q;
	while(q--) {
		cin >> form;
		if(form == 1) {
			cin >> u;
			if(have[u])
				continue;
			have[u] = true;
			int cur = 1;
			for (int i = 0; i < sz[u]; i++) {
				num = vec[u][i];
				if(num == -1)
					num = u;
				A = mini[cur][num];
				mini[cur][num] = (A? min(A, u): u);
			}
			for (int i = LOG; i >= 0; i--) {
				if(u & (1 << i))
					cur = lc[cur];
				else
					cur = rc[cur];
				
				for (int i = 0; i < sz[u]; i++) {
					num = vec[u][i];
					if(num == -1)
						num = u;
					A = mini[cur][num];
					mini[cur][num] = (A? min(A, u): u);
				}
			}
		}
		else {
			cin >> x >> k >> s;
			int cur = 1, now = 0;
			if(x % k || !(mini[cur][k] && mini[cur][k] + x <= s))
				cout << "-1\n";
			else {
				for (int i = LOG; i >= 0; i--) {
					if(x & (1 << i)) {
						A = mini[rc[cur]][k];
						if(A && A + x <= s)
							cur = rc[cur];
						else {
							now ^= (1 << i);
							cur = lc[cur];
						}
					}
					else {
						A = mini[lc[cur]][k];
						if(A && A + x <= s) {
							now ^= (1 << i);
							cur = lc[cur];
						}
						else
							cur = rc[cur];
					}
				}
				cout << now << '\n';
			}
		}
	}
	return 0;
}
