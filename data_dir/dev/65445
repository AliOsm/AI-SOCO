#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <cstdio>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <numeric>
#include <stack>
#include <deque>
#include <memory.h>
#include <string>
#include <unordered_map>

#define ull unsigned long long
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define vI vector<int>
#define vvI vector<vector<int>>
#define vLL vector<ll>
#define vS vector<string>
#define fori(i, n) for(int (i)=0; (i)<n; (i)++)
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
#define forI(tmp) for(auto(it)=(tmp).begin();(it)!=(tmp).end();(it)++)
#define PI 3.14159265356
#define LD long double
#define sc(a) scanf("%d", &(a))
#define scc(a) scanf("%lld", &(a))
#pragma comment (linker, "/STACK:5000000000")
typedef long long ll;
const ll mod = 1000000007;
ll Inf = (ll)2e9;
ll LINF = (ll)1e18 + 1e17;

using namespace std;

const int MAXN = 1e5 + 10;
int n, m;
bool ur[55], uc[55];
vector<vector<int>> gr, gc;

vector<int> need_row, need_col;

void dfs(int v, int cur)
{
	if (cur == 0)
	{
		need_row.push_back(v);
		ur[v] = 1;
		for (int i = 0; i < gr[v].size(); i++)
		{
			if (!uc[gr[v][i]])
				dfs(gr[v][i], cur ^ 1);
		}
	}
	else
	{
		need_col.push_back(v);
		uc[v] = 1;
		for (int i = 0; i < gc[v].size(); i++)
		{
			if (!ur[gc[v][i]])
				dfs(gc[v][i], cur ^ 1);
		}
	}

}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	int n;
	cin >> n;
	int u;
	cin >> u;
	vector<int> E(n);
	fori(i, n)
		cin >> E[i];
	E.push_back(Inf);
	LD ans = -1;
	for (int i = 0; i < n - 2; i++)
	{
		int idx = upper_bound(all(E), E[i] + u) - E.begin();
		idx--;
		if (idx < i + 2)
			continue;
		ans = max(ans, (LD)(E[idx] - E[i + 1])*1.0 / (E[idx] - E[i]));
	}
	if (ans < 0)
		cout << -1;
	else
		cout << setprecision(10) << fixed << ans;


	return 0;
}
