#include <bits/stdc++.h>

using namespace std;

const int N = 510;
const double INF = 1e6 + 10;

int n, m, x;
int a[N], b[N], c[N];

struct Dinic {
  const static int N = 60;
  struct edge {
    int to;
    long long c;
  };
  vector<edge> e;
  int src, sink;
  vector<int> g[N];
  int dis[N];
  int cur[N];
  void init(int s, int t) {
    src = s, sink = t;
    clear();
  }
  void clear() {
    e.clear();
    for (int i = 0; i < N; ++i) {
      g[i].clear();
    }
    memset(dis, -1, sizeof(dis));
    memset(cur, 0, sizeof(cur));
  }
  void add(int u, int v, long long w) {
    e.push_back(edge{v, w});
    g[u].push_back(e.size() - 1);
    e.push_back(edge{u, 0});
    g[v].push_back(e.size() - 1);
  }
  bool bfs() {
    memset(dis, -1, sizeof(dis));
    queue<int> q;
    q.push(src);
    dis[src] = 0;
    while (!q.empty()) {
      int v = q.front();
      q.pop();
      for (int i = 0; i < g[v].size(); ++i) {
        int u = e[g[v][i]].to;
        long long w = e[g[v][i]].c;
        if (w > 0 && dis[u] == -1) {
          q.push(u);
          dis[u] = dis[v] + 1;
        }
      }
    }
    if (dis[sink] == -1) return 0;
    return 1;
  }
  long long dfs(int v, long long mn) {
    if (v == sink || mn == 0) return mn;
    long long tmp;
    for (int &i = cur[v]; i < g[v].size(); ++i) {
      int u = e[g[v][i]].to;
      long long w = e[g[v][i]].c;
      if (w > 0 && dis[u] == dis[v] + 1 && (tmp = dfs(u, min(mn, w)))) {
        e[g[v][i]].c -= tmp;
        e[g[v][i] ^ 1].c += tmp;
        return tmp;
      }
    }
    return 0;
  }
  long long dinic() {
    long long tmp = 0, res = 0;
    while (bfs()) {
      memset(cur, 0, sizeof(cur));
      while (tmp = dfs(src, INF)) res += tmp;
    }
    return res;
  }
} dinic;

bool check(double y) {
  dinic.init(1, n);
  for (int i = 0; i < m; ++i) {
    dinic.add(a[i], b[i], floor(c[i] / y));
  }
  return dinic.dinic() >= x;
}

int main() {
  scanf("%d%d%d", &n, &m, &x);
  for (int i = 0; i < m; ++i) {
    scanf("%d%d%d", a + i, b + i, c + i);
  }
  double l = 0, r = INF;
  for (int i = 0; i < 70; ++i) {
    double mid = (l + r) / 2.0;
    if (check(mid)) {
      l = mid;
    }
    else {
      r = mid;
    }
  }
  printf("%.10f\n", l * x);
  return 0;
}
