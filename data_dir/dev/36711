#include <iostream>
#include <string>
#include <ctime>
#include <cstring>
#include <deque>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <cassert>
#define ll long long
#define fname ""
#define F first
#define S second
#define mp make_pair
#define pb push_back 

using namespace std;

const int N = 2e5;

const int inf = 1e9;

const int M = 1e9;

int n, x, y, result[N + 1], deg[N + N + 1];

string s = "rb";

vector < pair < int, int > > g[N + N + 1];             
                 
void dfs (int u, int col)
{
    while (g[u].size () > 0)
    {
        int id = g[u].back ().S;
        int v = g[u].back ().F;
        g[u].pop_back ();
        if (result[id] != -1)
            continue;
        deg[u]--;
        deg[v]--;
        result[id] = col;
        dfs (v, col ^ 1);
        return;
    }
}
int main ()
{
//  freopen (fname".in", "r", stdin);
//  freopen (fname".out", "w", stdout);
    scanf ("%d", &n);
    for (int i = 0;i < n;i ++)
    {
        scanf ("%d%d", &x, &y);
        g[x].pb (mp (y + N, i));
        g[y + N].pb (mp (x, i));
        deg[x]++;
        deg[y + N]++;
    }
    memset (result, -1, sizeof result);
    for (int i = 1;i <= N + N;i ++)          
        if (deg[i] & 1)
            dfs (i, 1);
    for (int i = 1;i <= N + N;i ++)
        if (deg[i] > 0)
            dfs (i, 0);
    for (int i = 0;i < n;i ++)
        cout << s[result[i]];
    return 0;
}                                           