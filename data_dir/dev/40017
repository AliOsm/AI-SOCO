/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */


#include <fstream>

#include <vector>
#include <iostream>
using namespace std;



#include <fstream>





#include <iterator>

#include <string>
#include <stdexcept>
#ifdef SPCPPL_DEBUG
	#define SPCPPL_ASSERT(condition) \
	if(!(condition)) { \
		throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
	}
#else
#endif


#include <algorithm>


#define forn(i, n) for (int i = 0; i < int(n); i++)

typedef long long ll;
using namespace std;

class TaskB {
public:
	void solve(std::istream& in, std::ostream& out) {
        ll n, curdiff = 0;
        in >> n;
        string first, second;
        in >> first >> second;
        vector<vector<ll>> mem(26, vector<ll>(26, -1));
        forn(i, n) if (first[i] != second[i]) curdiff++;
        forn(i, n){ // reduce by two possible
            if (first[i] != second[i]){
                int f = first[i] - 'a';
                int s = second[i] - 'a';
                if (mem[s][f] != -1){
                    out << curdiff-2 << endl;
                    out << mem[s][f]+1 <<" " << i+1 << endl;
                    return;
                }
                if (mem[f][s] == -1) {
                    mem[f][s] = i;
                }
            }
        }
        vector<ll> mem2(26, -1), mem3(26, -1);
        forn(i, n) {
            if (first[i] != second[i]) {
                int f = first[i] - 'a';
                int s = second[i] - 'a';
                if (mem2[s] != -1 || mem3[f] != -1){
                    ll num = mem2[s] == -1 ? mem3[f] : mem2[s];
                    out << curdiff-1 << endl;
                    out << num+1 <<" " << i+1 << endl;
                    return;
                }
                if (mem2[f] == -1){
                    mem2[f] = i;
                }
                if (mem3[s] == -1){
                    mem3[s] = i;
                }
            }
        }
        out << curdiff << endl;
        out << -1 <<" " << -1 << endl;
	}
};


int main() {
	TaskB solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
