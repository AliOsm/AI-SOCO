#ifdef LOCAL
//#  define _GLIBCXX_DEBUG
#else
#  define cerr __get_ce
#endif
#include <bits/stdc++.h>

using namespace std;
#define next __next
#define prev __prev
#define right __right
#define left __left
#define index __index

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;

typedef pair<int, int> ipair;
#define szof(x) ((int)(x).size())
#define bend(x) (x).begin(), (x).end()
#define X first
#define Y second

int const INF = 100 + (int) 1e9;
ll const INFL = 100 + (ll) 1e18;
ld const PI = 3.141592653589793238462643L;
mt19937 tw(960172);

int millis() { static auto s = chrono::system_clock::now(); return 1e3 * chrono::duration<double>(chrono::system_clock::now() - s).count(); }
bool is_prime(ll x) { for (ll y = 2; y * y <= x; ++y) if (x % y == 0) return 0; return x > 1; }
ll rnd(ll x, ll y) { static uniform_int_distribution<ll> d; return d(tw) % (y - x + 1) + x; }
ll sqr(int a) { return (ll) a * a; } template<class T> T sqr(T const& a) { return a * a; }
ll gcd(ll a, ll b) { while (b > 0) { ll t = a % b; a = b; b = t; } return a; }

ld lower = 0;
ld upper = INFL;

/// upd x + vx * t > nx
void upd_lower(ll x, ll vx, ll nx) {
    if (vx == 0) {
        if (x > nx)
            return;
        lower = INFL;
        upper = -INFL;
        return;
    }
    
    if (vx > 0) {
        lower = max(lower, (ld)(nx - x) / vx);
    } else {
        upper = min(upper, (ld)(nx - x) / vx);
    }
}

/// upd x + vx * t < nx
void upd_upper(ll x, ll vx, ll nx) {
    if (vx == 0) {
        if (x < nx)
            return;
        lower = INFL;
        upper = -INFL;
        return;
    }
    
    if (vx > 0) {
        upper = min(upper, (ld)(nx - x) / vx);
    } else {
        lower = max(lower, (ld)(nx - x) / vx);
    }
}

void solve() {
    int n;
    scanf("%d", &n);
    int x1, x2, y1, y2;
    scanf("%d%d%d%d", &x1, &y1, &x2, &y2);
    if (x1 == x2 || y1 == y2) {
        cout << -1 << '\n';
        return;
    }

    for (int i = 0; i < n; ++i) {
        int rx, ry, vx, vy;
        scanf("%d%d%d%d", &rx, &ry, &vx, &vy);
        upd_lower(rx, vx, x1);
        upd_lower(ry, vy, y1);
        upd_upper(rx, vx, x2);
        upd_upper(ry, vy, y2);
    }
    
    if (lower + 1e-10 < upper) {
        cout << lower << '\n';
    } else {
        cout << -1 << '\n';
    }
}

int main() {
    millis();
    //freopen("", "r", stdin);
    //freopen("", "w", stdout);
    cout << setprecision(15) << fixed;
#ifdef LOCAL
    cerr << setprecision(6) << fixed;
#endif
    int tcnt = 1;
    //scanf("%d", &tcnt);
    for (int test = 1; test <= tcnt; ++test)
        solve();
#ifdef LOCAL
    cerr << "time: " << millis() << " ms" << endl;
#endif
}
