#include<bits/stdc++.h>
#define MOD 1000000007
using namespace std;
typedef long long int ll;
double PI=4.00*(atan(1));

ll DFS(ll start, vector<ll>& freq, vector<ll> graph[],bool visit[])
{
    ll ans=0;
    ll size=graph[start].size();
    visit[start]=true;
    freq.push_back(start);
    for(ll i=0;i<size;i++)
    {
        if(!visit[graph[start][i]])
        {
            ans+=DFS(graph[start][i],freq,graph,visit);
        }
    }
    ans++;
    return ans;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    // treating socks as vertices and days as edges..
    ll socks,days,colors;
    cin>>socks>>days>>colors;
    ll col[socks+1];
    for(ll i=1;i<=socks;i++)
    {
        cin>>col[i];
    }
    vector<ll> graph[socks+1];
    ll edge1,edge2;
    for(ll i=1;i<=days;i++)
    {
        cin>>edge1>>edge2;
        graph[edge1].push_back(edge2);
        graph[edge2].push_back(edge1);
    }
    bool visit[socks+1];
    for(ll i=1;i<=socks;i++)
    {
        visit[i]=false;
    }
    ll ans=0,count,store;
    for(ll i=1;i<=socks;i++)
    {
        if(!visit[i])
        {
            map<ll,ll> amt;
            vector<ll> freq;
            count=DFS(i,freq,graph,visit);
            store=freq.size();
            if(freq.size()==0)
            {
                continue;
            }
            for(ll i=0;i<store;i++)
            {
                amt[col[freq[i]]]++;
            }
            ll max1=-1;
            for(ll i=0;i<store;i++)
            {
                max1=max(max1,amt[col[freq[i]]]);
            }
            ans+=(count-max1);
        }
    }
    cout<<ans;
    return 0;
}