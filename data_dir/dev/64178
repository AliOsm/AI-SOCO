#include <string.h>
#include <assert.h>
#include <cassert>
#include <unordered_map>
 
#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <stack>
#include <queue>
#include <set>
 
#include <map>
#include <vector>
#include <string>
#include <stdlib.h>
#include <cassert>
 
#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf
 
#define pf printf
#define mp make_pair
#define pir pair<int,int>
#define N 311100
 
const int mod = 998244353;

using namespace std;

int m[N],c[N];
vector<int> ans[N];
	
int main(){
	int n,k;
	cin>>n>>k;
	vector<int> ft;
	fr(i,1,n+1) {
		cin>>m[i];
		ft.pb(i);
	}
	multiset<int> st;
	fr(i,1,k+1) {
		cin>>c[i];
		//printf("c = %d\n",c[i]);
		st.insert(c[i]);
	}

	class cmp1
	{
		public:
			bool operator () (const int a, const int b) const{
				return ans[a].size()<ans[b].size();
			};
	};

	multiset<int,cmp1> ans_idx;

	auto cmp = [&](const int a, const int b) {
		return m[a]>m[b];
	};
	sort(ft.begin(), ft.end(), cmp);

	int pos = k;
	int cur = 0;
	for(int i = 0; i <ft.size();++i) {
		int idx = ft[i];
		while(m[idx]<pos) {
			st.erase( st.find( c[pos] ) );
			--pos;
		}
		int max_p = *st.begin();
		//printf("i = %d idx = %d m = %d max p = %d\n",i,idx,m[idx],max_p);
		if(ans_idx.empty()) {
			ans[cur].pb(m[idx]);
			//printf("insert new cur = %d\n",cur);
			ans_idx.insert(cur++);
		}
		else {
			int first = *ans_idx.begin();
			if(ans[first].size()<max_p) {
				//printf("insert old cur = %d\n",first);
				ans_idx.erase(ans_idx.begin());
				ans[first].pb(m[idx]);
				ans_idx.insert(first);
			}
			else {
				ans[cur].pb(m[idx]);
				//printf("insert new cur = %d\n",cur);
				ans_idx.insert(cur++);
			}
		}
	}
	cout<<cur<<endl;
	for(int i = 0; i < cur; ++i) {
		cout<<ans[i].size()<<" ";
		for(int x : ans[i]) {
			cout<<x<<" ";
		}
		cout<<endl;
	}
}
