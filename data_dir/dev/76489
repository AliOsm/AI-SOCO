#include <bits/stdc++.h>
using namespace std;

#define endl "\n"
#define long long long

vector<vector<long int>> dp;
long int getMaxHeight(vector<pair<long int,long int>> &v,long int be,long int en,long int choice){
    if(en < be)
        return 0;

    if(dp[en][choice])
        return dp[en][choice];

    if(choice == 2)
        return dp[en][choice] = max(v[en].first + getMaxHeight(v,be,en-1,1),max(v[en].second + getMaxHeight(v,be,en-1,0),getMaxHeight(v,be,en-1,2)));
    
    else if(choice == 0)
        return dp[en][choice] = max(v[en].first + getMaxHeight(v,be,en-1,1),getMaxHeight(v,be,en-1,2));
    
    else
        return dp[en][choice] = max(v[en].second + getMaxHeight(v,be,en-1,0),getMaxHeight(v,be,en-1,2));
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    long int n;
    cin>>n;

	dp.resize(n+1);
	for(auto &vec : dp)
    	vec.resize(4);

    vector<pair<long int,long int>> v(n);
    for(long int i = 0; i < n; i++)
        cin>>v[i].first;
    
    for(long int i = 0; i < n; i++)
        cin>>v[i].second;


    long int val1 = getMaxHeight(v,0,n-1,2);
    for(auto &vec : dp)
        for(auto &ele : vec)
            ele = 0;
    long int val2 = getMaxHeight(v,0,n-1,1);
    for(auto &vec : dp)
        for(auto &ele : vec)
            ele = 0;
    long int val3 = getMaxHeight(v,0,n-1,0);
    
    cout<<max(val1,max(val2,val3));
    return 0;
}
