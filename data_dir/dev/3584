
 #include <iostream>
#include <bits/stdc++.h>
#include <string>
#include <bitset>
using namespace std;

#define pb push_back
#define ull unsigned long long
#define ll long long
#define F first
#define S second
#define PI acos(-1)
#define EPS 1e-9
#define BASE 31ll
#define BASE2 53ll
#define ld double
#define MAX 1000000000
#define NIL 0
#define INF 1e15
#define infi 1000000000
#define rd(a) scanf("%d",&a)
#define rd2(a,b) scanf("%d %d",&a,&b)
#define rd3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define rdll(a) scanf("%I64d",&a)
#define sz(a) (int) a.size()
#define lp(i,a,n) for(int i=(a); i<=(n) ; ++i)
#define lpd(i,n,a) for(int i=(n); i>=(a) ; --i)
#define pi acos(-1)
#define lc (x << 1)
#define rc (x << 1 | 1)
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep
#define angle(a)                (atan2((a).imag(), (a).real()))
#define X real()
#define Y imag()
#define vec(a,b)                ((b)-(a))
#define vvi vector<vector<int>>
#define f first
#define s second
#define clr(a,b) memset(a,b,sizeof a)


typedef complex<double>point;
typedef complex<double>CX;
typedef pair<ll,int>ii;
typedef pair<ii,int>tri;
typedef pair<vector<int>,int>vii;
typedef pair<int, int> pii;
typedef pair<ii,ii> line;
typedef pair<ll, ll> pll;
typedef vector<int> vi;

const int N=1605;
const int M=22;

ll mod=(1e9+7);
int gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
bool is_vowel(char c){if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u')return 1;return 0;}
ll extended_euclidean(ll a,ll b,ll &x,ll &y){if(b==0){x=1;y=0;return a;}ll g = extended_euclidean(b,a%b,y,x);y -= (a/b)*x;return g;}
ll power(ll base,ll p){if(p==1)return base;if(!p)return 1ll;ll ret=power(base,p/2);ret*=ret;ret%=mod;if(p&1)ret*=base;return ret%mod;}






int main(){

    /*vector<int>v;
    lp(i,1,2)v.pb(0);
    lp(i,1,6)v.pb(1);
    do{
         int x01=0,x10=0;
         lp(i,0,(int)v.size()-1){
           lp(j,i+1,(int)v.size()-1){
              if(v[i]==0&&v[j]==1)x01++;
              if(v[i]==1&&v[j]==0)x10++;
           }cout<<v[i];
         }
         cout<<' '<<x01<<' '<<x10<<endl;
    }while(next_permutation(v.begin(),v.end()));
    */
    ll a00,a01,a10,a11;
    cin>>a00>>a01>>a10>>a11;
    ll zeros=0,ones=0;
    while((zeros*(zeros-1))<a00*2)zeros++;
    while((ones*(ones-1))<a11*2)ones++;
    if(a00==0&&((a10>0||a01>0)||(a11==0)))zeros=1;
    if(a11==0&&(a10>0||a01>0))ones=1;
    if(a00*2!=(zeros*(zeros-1))||a11*2!=(ones*(ones-1))){
        cout<<"Impossible";
        return 0;
    }
    if(a10+a01!=zeros*ones){
        cout<<"Impossible";
        return 0;
    }
    ll cur01=zeros*ones;
    vector<int>sol;
    while(cur01>a01){
        if(cur01-a01>=zeros){
            cur01-=zeros;
            sol.pb(1);
            ones--;
        }
        else{
            while(cur01-a01<zeros)sol.pb(0),zeros--;
            sol.pb(1);
            ones--;
            break;
        }
    }
    while(zeros--)sol.pb(0);
    while(ones--)sol.pb(1);
    lp(i,0,(int)sol.size()-1)printf("%d",sol[i]);
    return 0;
}
