#include <bits/stdc++.h>
using namespace std;
typedef long long int64;
typedef complex<double> cmplx;
const double pi = 3.14159265358979323846;
const int inf = (int)2e+9 + 2;
const int mod = (int)1e+9 + 7;
const double eps = 1e-8;
const int N = 200'000;

int n, m, k;
pair<int, int> a[N];

void solve()
{
    int h;
    cin >> n >> h;
    for (int i = 0; i < n; ++i) {
        cin >> a[i].first >> a[i].second;
    }
    int p1 = 1;
    int p2 = 1;
    int64 cur = h;
    int64 l = a[0].first;
    int64 r = a[0].second;
    int64 ans = r + cur - l;
    while (p1 < n) {
        while (p2 < n && cur > a[p2].first - a[p2 - 1].second) {
            cur -= a[p2].first - a[p2 - 1].second;
            r = a[p2].second;
            ++p2;
        }
        ans = max(ans, r + cur - l);
        cur += a[p1].first - a[p1 - 1].second;
        cur = min(cur, (int64)h);
        l = a[p1].first;
        r = max(r, (int64)a[p1].second);
        ++p1;
        p2 = max(p2, p1);
    }
    ans = max(r + cur - l, ans);
    cout << ans;
}

void precalc()
{
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);
    precalc();
    int test = 1;
    //cin >> test;
    for (; test; --test)
        solve();
    return 0;
}
