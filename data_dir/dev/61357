/*
 * temp.cpp
 *
 *  Created on: 2012-7-18
 *      Author: BSBandme
 */
//#pragma comment(linker, "/STACK:1024000000,1024000000")
#include <iostream>
#include <fstream>
#include <string.h>
#include <cstdio>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <cassert>
#include <list>
#include <iomanip>
#include <math.h>
#include <deque>
#include <utility>
#include <map>
#include <set>
#include <bitset>
#include <numeric>
#include <climits>
#include <cctype>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <functional>
#include <sstream>
#include <tr1/unordered_map>
#include <tr1/unordered_set>

using namespace std;
using namespace tr1;

#define mpr make_pair
typedef unsigned int ui;
typedef unsigned long long ull;
typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <double, double> pdd;
typedef vector <int> vi;
typedef vector <ll> vll;
typedef vector <double> vd;
typedef vector <string> vs;
typedef map <string, int> mpsi;
typedef map <double, int> mpdi;
typedef map <int, int> mpii;

const double pi = acos(0.0) * 2.0;
const double eps = 1e-12;
const int step[8][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};

template <class T> inline T abs1(T a) {return a < 0 ? -a : a;}

template <class T> inline T max1(T a, T b) { return a > b ? a : b; }
template <class T> inline T max1(T a, T b, T c) { return max1(max1(a, b), c); }
template <class T> inline T max1(T a, T b, T c, T d) { return max1(max1(a, b, c), d); }
template <class T> inline T max1(T a, T b, T c, T d, T e) { return max1(max1(a, b, c, d), e); }
template <class T> inline T min1(T a, T b) { return a < b ? a : b; }
template <class T> inline T min1(T a, T b, T c) { return min1(min1(a, b), c); }
template <class T> inline T min1(T a, T b, T c, T d) { return min1(min1(a, b, c), d); }
template <class T> inline T min1(T a, T b, T c, T d, T e) { return min1(min1(a, b, c, d), e); }

inline int jud(double a, double b){
	if(abs(a) < eps && abs(b) < eps) return 0;
	else if(abs1(a - b) / abs1(a) < eps) return 0;
	if(a < b) return -1;
	return 1;
}
template <typename t> inline int jud(t a, t b){
	if(a < b) return -1;
	if(a == b) return 0;
	return 1;
}

// f_lb == 1代表返回相同的一串的左边界，f_small == 1代表返回如果没有寻找的值返回小的数
template <typename it, typename t1>
inline int find(t1 val, it a, int na, bool f_small = 1, bool f_lb = 1){
	int be = 0, en = na - 1;
	if(*a <= *(a + na - 1)){
		if(f_lb == 0) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != 1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != -1) en = mid;
			else be = mid + 1;
		}
		if(f_small && jud(*(a + be), val) == 1) be--;
		if(!f_small && jud(*(a + be), val) == -1) be++;
	} else {
		if(f_lb) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != -1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != 1) en = mid;
			else be = mid + 1;
		}
		if(!f_small && jud(*(a + be), val) == -1) be--;
		if(f_small && jud(*(a + be), val) == 1) be++;
	}
	return be;
}

template <class T> inline T lowb(T num) {return num & (-num); }
inline int bitnum(ui nValue) { return __builtin_popcount(nValue); }
inline int bitnum(int nValue) { return __builtin_popcount(nValue); }
inline int bitnum(ull nValue) { return __builtin_popcount(nValue) + __builtin_popcount(nValue >> 32); }
inline int bitnum(ll nValue) { return __builtin_popcount(nValue) + __builtin_popcount(nValue >> 32); }
inline int bitmaxl(ui a) { if(a == 0) return 0; return 32 - __builtin_clz(a); }
inline int bitmaxl(int a) { if(a == 0) return 0; return 32 - __builtin_clz(a); }
inline int bitmaxl(ull a) { int temp = a >> 32; if(temp) return 32 - __builtin_clz(temp) + 32; return bitmaxl(int(a)); }
inline int bitmaxl(ll a) { int temp = a >> 32; if(temp) return 32 - __builtin_clz(temp) + 32; return bitmaxl(int(a)); }

long long pow(long long n, long long m, long long mod = 0){
	if(m < 0) return 0;
	long long ans = 1;
	long long k = n;
	while(m){
		if(m & 1) {
			ans *= k;
			if(mod) ans %= mod;
		}
		k *= k;
		if(mod) k %= mod;
		m >>= 1;
	}
	return ans;
}

#define  MOD 1000000007
template <class t1, class t2>
inline void add(t1 &a, t2 b, int mod = -1) {
	if(mod == -1) mod = MOD;
	a += b;
	while(a >= mod) a -= mod;
	while(a < 0) a += mod;
}
template <class t>
void output1(t arr) {
	for(int i = 0; i < (int)arr.size(); i++)
		cerr << arr[i] << ' ';
	cerr << endl;
}
template <class t>
void output2(t arr) {
	for(int i = 0; i < (int)arr.size(); i++)
		output1(arr[i]);
}


//#define debug
//.........................mi.......feng......xian.......xia.......jin.......zhi.......hack...............................................

const ll maxnum = 100000000000000ll;
const int maxn = 1001000;
const int maxl = 10;
pii arr[maxn];
int larr;
ll n, m;
int tnum[maxl];
vector <pii> data[10][2];

bool check(ll num) {
	int arr[maxl * 2], larr = 0;
	for(; num; num /= 10)
		arr[larr++] = num % 10;

	for(int i = 1; i < larr; i++) {
		if(arr[i] == arr[i - 1]) return 0;
		if(i >= 2 && (arr[i] > arr[i - 1]) == (arr[i - 1] > arr[i - 2]))
			return 0;
	}
	return 1;
}

void dfs(int deep, int rdeep) {
	if(deep == 7) {
		for(int i = 0; i < 7; i++)
			arr[larr].first = arr[larr].first * 10 + tnum[i];
		arr[larr].second = arr[larr].first % n;
		larr++;
		return;
	}
	for(int i = 0; i < 10; i++) {
		tnum[deep] = i;
		if(rdeep && tnum[deep] == tnum[deep - 1]) continue;
		if(rdeep >= 2 && (tnum[deep] > tnum[deep - 1]) == (tnum[deep - 1] > tnum[deep - 2]))
			continue;
		dfs(deep + 1, rdeep == 0 && i == 0 ? 0 : rdeep + 1);
	}
}

int main(){
	ios_base::sync_with_stdio(0);
	#ifdef debug //......................................................................................................
	freopen("input.txt", "r", stdin);
	int __size__ = 256 << 20; // 256MB
	char *__p__ = (char*)malloc(__size__) + __size__;
	__asm__("movl %0, %%esp\n" :: "r"(__p__));
	#endif //...........................................................................................................

	cin >> n >> m;
	if(n >= 10000000) {
		ll rn = n;
		for(; m && rn <= maxnum; rn += n) {
			if(rn == 89286756493523ll) {
				cerr << 1 << endl;
			}
			if(check(rn))
				m--;
		}
		if(!m) cout << rn - n << endl;
		else cout << -1 << endl;
		return 0;
	}
	dfs(0, 0);
	for(int i = 1; i < larr; i++) {
		if(arr[i].second == 0) m--;
		if(m == 0) {
			cout << arr[i].first << endl;
			return 0;
		}
	}
	for(int i = 1; i < larr; i++) if(arr[i].first > 100000) {
		if(arr[i].first < 1000000) {
			if(arr[i].first / 10 % 10 > arr[i].first % 10)
				data[0][0].push_back(mpr(arr[i].second, arr[i].first));
		} else {
			int cate = arr[i].first / 1000000, rcate = arr[i].first / 10 % 10 > arr[i].first % 10;
			data[cate][1 - rcate].push_back(mpr(arr[i].second, arr[i].first));
		}
	}
	for(int i = 0; i < 10; i++) {
		sort(data[i][0].begin(), data[i][0].end());
		sort(data[i][1].begin(), data[i][1].end());
	}
//	for(int i = 0; i < (int)data[9][1].size(); i++) {
//		cerr << data[9][1][i].first << endl;
//	}
	for(int i = 1; i < larr; i++) {
		int pp = arr[i].first % 10;
		int rcate = arr[i].first / 10 % 10 > arr[i].first % 10;
		int rmod = 1ll * arr[i].second * 10000000 % n;
		rmod = (n - rmod) % n;
		if(!rcate) {
			for(int j = 0; j < pp; j++) {
				int be = upper_bound(data[j][rcate].begin(), data[j][rcate].end(), mpr(rmod - 1, MOD)) - data[j][rcate].begin();
				int en = upper_bound(data[j][rcate].begin(), data[j][rcate].end(), mpr(rmod, MOD)) - data[j][rcate].begin();
				if(en - be >= m) {
					cout << 1ll * arr[i].first * 10000000 + data[j][rcate][be + m - 1].second << endl;
					return 0;
				}
				m -= (en - be);
			}
		}
		if(rcate || arr[i].first < 10) {
			for(int j = pp + 1; j < 10; j++) {
				int be = upper_bound(data[j][1].begin(), data[j][1].end(), mpr(rmod - 1, MOD)) - data[j][1].begin();
				int en = upper_bound(data[j][1].begin(), data[j][1].end(), mpr(rmod, MOD)) - data[j][1].begin();
				if(en - be >= m) {
					cout << 1ll * arr[i].first * 10000000 + data[j][1][be + m - 1].second << endl;
					return 0;
				}
				m -= en - be;
			}
		}
	}

	cout << -1 << endl;
    return 0;
}
