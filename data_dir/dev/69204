///****In the name of Allah, most Gracious, most Compassionate****//

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <ll, ll> pii;

#define ALL(a) a.begin(), a.end()
#define FastIO ios::sync_with_stdio(false); cin.tie(nullptr);cout.tie(nullptr)
#define IN freopen("input.txt","r+",stdin)
#define OUT freopen("output.txt","w+",stdout)

#define DBG(a) cout<< #a <<" --> "<<(a)<<endl
#define NL cout<<"\n"

template < class T1,class T2>
ostream &operator <<(ostream &os,const pair < T1,T2 > &p)
{
    os<<"{"<<p.first<<","<<p.second<<"}";
    return os;
}

const ll N=3e5+5;

ll pref_cnt[N];
ll pref_sum[N];
ll suff_cnt[N];
ll suff_sum[N];

int32_t main()
{
    FastIO;
    ll n,k;
    cin>>n>>k;
    map<ll,ll> cnt;
    for(ll i=0; i<n; i++)
    {
        ll x;
        cin>>x;
        cnt[x]++;
    }
    cnt[0] = 0;
    vector<pii> a(ALL(cnt));
    n = a.size()-1;

    for(ll i=1; i<=n; i++)
    {
        pref_cnt[i]+=pref_cnt[i-1] + a[i].second;
        pref_sum[i]+=pref_sum[i-1] + a[i].second * a[i].first;
    }
    for(ll i=n; i>=1; i--)
    {
        suff_cnt[i]+=suff_cnt[i+1] + a[i].second;
        suff_sum[i]+=suff_sum[i+1] + a[i].second * a[i].first;
    }
    ll ans = 1e18;
    for(ll i=1; i<=n; i++)
    {
        {
            ll now=0;
            ll lagbe = max(0LL, k -a[i].second);
            ll bame = min(pref_cnt[i-1], lagbe);
            lagbe-=bame;
            if(bame)
                now+=(a[i].first-1) * pref_cnt[i-1] - pref_sum[i-1] + bame;
            ll dane = min(lagbe, suff_cnt[i+1]);
            lagbe-=dane;
            if(dane)
                now+=suff_sum[i+1] -  (a[i].first+1)*suff_cnt[i+1] + dane;
            assert(lagbe == 0);
            ans = min(ans, now );

//            DBG(bame);
//            DBG(dane);
//            DBG(now);
//            NL;

        }

        {

            ll now=0;
            ll lagbe = max(0LL, k -a[i].second);

            ll dane = min(lagbe, suff_cnt[i+1]);
            lagbe-=dane;
            if(dane)
                now+=suff_sum[i+1] -  (a[i].first+1)*suff_cnt[i+1] + dane;

            ll bame = min(pref_cnt[i-1], lagbe);
            lagbe-=bame;

            if(bame)
                now+=(a[i].first-1) * pref_cnt[i-1] - pref_sum[i-1] + bame;


            assert(lagbe == 0);

            ans = min(ans, now );

        }

    }
    cout<<ans<<"\n";
}
