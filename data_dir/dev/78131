#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;*/
#define itn int
#define all(c) c.begin(),c.end()
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define ll long long
#define pll pair<ll, ll>
#define mp(x, y) make_pair(x, y)
using namespace std;

const ll N = 3e5 + 5, inf = 1e18, mod = 1e9 + 7;
const double PI = 3.1415926536;
int days[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

vector<ll> fact(ll n) {
    n = abs(n);
    ll t = 0;
    vector<ll> ans;
    for (ll i = 1; i * i <= n; i++) {
        if (n % i == 0) {
            ans.push_back(i);
            if (n / i != i) {
                ans.push_back(n / i);
            }
        }
    }
    return ans;
}

inline ll getPow(ll a,ll b) {
    ll res = 1ll, tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
       }
       tp *= tp;
       //tp %= mod; res %= mod;
       b >>= 1ll;
    }
    return res;
}

ll vec_mult(const pll & t1, const pll & t2, const pll & t3) {
   const ll & x1 = t1.first, y1 = t1.second;
   const ll & x2 = t2.first, y2 = t2.second;
   const ll & x3 = t3.first, y3 = t3.second;
   return abs((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}

void ok() {
   cout << "YES" << endl;
   exit(0);
}

void no() {
   cout << "NO" << endl;
   exit(0);
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    int t = nxt();
    for (int e = 0; e < t; e++) {
        vector<ll> buf;
        ll ct[2] = {0, 0};
        int n = nxt();
        for (int i = 0; i < n; i++) {
            string s;
            cin >> s;
            buf.push_back(s.size());
            for (auto x : s) {
                ct[x - '0']++;
            }
        }
        sort(all(buf));
        ll ans = 0;
        for (auto len : buf) {
            if (len % 2) {
                ll t_k = 0;
                ll t_j = 0;
                bool f = 0;
                for (int j = 0; j <= ct[0]; j++) {
                    for (int k = 0; k <= ct[1]; k++) {
                        ll te = abs(j % 2 - k % 2);
                        if (!f && j + k == len && te) {
                            f = 1;
                            t_j = j;
                            t_k = k;
                        } else if (f && j + k == len && te) {
                            if (ct[0] % 2 && j % 2) {
                                t_j = j;
                                t_k = k;
                            } else if (ct[1] % 2 && k % 2) {
                                t_j = j;
                                t_k = k;
                            }
                        }
                    }
                }
                ans += f;
                ct[0] -= t_j;
                ct[1] -= t_k;
            } else {
                ll t_k = 0;
                ll t_j = 0;
                bool f = 0;
                for (int j = 0; j <= ct[0]; j++) {
                    for (int k = 0; k <= ct[1]; k++) {
                        ll te = abs(j % 2 + k % 2);
                        if (j + k == len && !te) {
                            f = 1;
                            t_j = j;
                            t_k = k;
                        }
                    }
                }
                ans += f;
                ct[0] -= t_j;
                ct[1] -= t_k;
            }
        }
        cout << ans << '\n';

    }

    return 0;
}
