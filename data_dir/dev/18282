#include<bits/stdc++.h>
#define ll long long
#define eps 1e-7
#define inf 1e9
#define linf 1e18
#define pb push_back
#define mod 1e9 + 7
#define mp make_pair
#define ld long double
using namespace std;

struct segment;
struct line;
struct point;
struct vec;
struct ray;

struct point{
	ld x, y;
	point(){}
	point(ll x1, ll y1){
		x = x1;
		y = y1;
	}
	ld dist_to_point(point p){
		return sqrt((p.x - x) * (p.x - x) + (p.y - y) * (p.y - y));
	}
};

struct vec{
	ll x, y;
	vec (ll x1, ll y1){
		x = x1;
		y = y1;
	}
	vec (point a, point b){
		x = b.x - a.x;
		y = b.y - a.y;
	}
	vec normal(){
    	vec ans;
    	ans.x = y;
    	ans.y = -x;
    	return ans;
	}
	vec opposite(){
		vec ans;
		ans.x = -x;
		ans.y = -y;
		return ans;
	}
	vec sum(vec b){
		vec ans;
		ans.x = x + b.x;
		ans.y = y + b.y;
		return ans;
	}
	ld cross_product(vec v){
        return x * v.y - v.x * y;
    }
    ld dot_product(vec v){
        return x * v.x + y * v.y;
    }
	vec resize(ld size){
    	vec ans;
    	ans.x = (x * size) / len();
    	ans.y = (y * size) / len();
    	return ans;
	}
	vec(){}
	ld len(){
		return sqrt(x * x + y * y);
	}
};


struct line{
	ll a, b, c;
	line (point a1, point b1){
		a = a1.x - b1.x;
		b = b1.y - a1.y;
		c = -a1.x * a - a1.y * b;
	}
	line (ll a1, ll b1, ll c1){
		a = a1;
		b = b1;
		c = c1;
	}
	line(){}
	vec normal_vec(){
    	vec ans;
    	ans.x = a;
    	ans.y = b;
    	return ans;
	}
	ld get_x(ld y1){
		if (a == 0) return 0;
		return (-c - b * y1) / a;
	}
	ld get_y(ld x1){
		if (b == 0) return 0;
		return (-c - a * x1) / b;
	}
	point intersection(line l){
    	point ans;
    	ans.x = (-c * l.b + l.c * b) / (a * l.b - l.a * b);
    	ans.y = (-a * l.c + l.a * c) / (a * l.b - l.a * b);
    	return ans;
	}
	ld dist_to_point(point p){
        return abs((a * p.x + b * p.y + c) / (sqrt(a * a + b * b)));
    }
    ll is_inside(point p){
        ld k = a * p.x + b * p.y + c;
        if (k < 0) return -1;
        else if (k == 0) return 0;
        return 1;
    }
};

struct segment{
	point a, b;
	segment(){}
	segment(point a1, point b1){
		a = a1;
		b = b1;
	}
	ld len(){
		return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
	}
	bool is_inside(point p){
        line l(a, b);
        if (l.is_inside(p) != 0) return false;
        vec v(p, a), v1(p, b);
        if (v.dot_product(v1) > 0) return false;
        return true;
    }
    long double dist_to_point(point p){
        vec v(a, p), v1(a, b), v2(b, p), v3(b, a);
        if (v.dot_product(v1) < 0) return p.dist_to_point(a);
        if (v2.dot_product(v3) < 0) return p.dist_to_point(b);
        line l(a, b);
        return l.dist_to_point(p);
    }
};

struct ray{
	point a, b;
	ray(point p, point p1){
		a = p;
		b = p1;
	}
	ray(){}
	ld dist_to_point(point p){
		vec v(a, p), v1(a, b);
		if (v.dot_product(v1) < 0) return a.dist_to_point(p);
		line l(a, b);
		return l.dist_to_point(p);
	}
	bool is_inside(point p){
		line l(a, b);
		if (l.is_inside(p) != 0) return false;
		vec v(a, p), v1(a, b);
		if (v.dot_product(v1) < 0) return false;
		return true;
	}
};

struct polygon{
	ll n;
	vector <point> points;
	ld get_area(){
		vec v(points[0], points[1]);
		ld ans = 0;
		for (ll i = 2; i < n; ++i){
			vec v1(points[i - 1], points[i]);
			ans = ans + v.cross_product(v1);
		}
		vec v1(points[n - 1], points[0]);
		return ans + v.cross_product(v1);
	}
};

struct triangle{
	point a, b, c;
	triangle(){}
	triangle(point a1, point b1, point c1){
		a = a1;
		b = b1;
		c = c1;
	}
	ld get_area(){
		vec v(a, b), v1(b, c), v2(c, a);
		return v.cross_product(v1) + v1.cross_product(v2) + v2.cross_product(v);
	}
};

ll power(ll a, ll b){
	if (b == 0) return 1;
	else if (b == 1) return a;
	else {
		ll k = power(a, b / 2);
		return k * k * power(a, b % 2);
	}
}

ll power_mod(ll a, ll b, ll MOD){
	if (b == 0) return 1;
	else if (b == 1) return a % MOD;
	else{
		ll k = power_mod(a, b / 2, MOD);
		return ((k * k) % MOD * power_mod(a, b % 2, MOD)) % MOD;
	}
}

ll sum_mod(ll a, ll b, ll MOD){
	return (a + b) % MOD;
}

ll mul_mod(ll a, ll b, ll MOD){
	return (a * b) % MOD;
}


/*
_________________________________________________________________________________________________________________________________________________
start programm
_________________________________________________________________________________________________________________________________________________
*/


int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	srand(time(0));
	ll n, m;
	ll ar[200000];
	cin>>n>>m;
	for (ll i = 0; i < n; ++i){
		cin>>ar[i];
	}	
	for (ll i = 0; i < m; ++i){
		ll l, r, x;
		cin>>l>>r>>x;
		--l;
		--r;
		--x;
		ll ans = 0;
		for (ll j = l; j <= r; ++j){
			if (ar[j] < ar[x]) ++ans;
		}
		if ((x < l) || (x > r) || (l + ans == x)) cout<<"Yes"<<endl;
		else cout<<"No"<<endl;
	}
}


