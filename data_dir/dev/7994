#include "bits/stdc++.h"
#include "ext/pb_ds/tree_policy.hpp"
#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}


ll fast(ll a,ll b,ll mod){
    ll ans = 1;
    while(b){
        if(b&1){
            b--;
            ans = ans * a % mod;
        }else{
            a = a * a % mod;
            b/=2;
        }
    }
    return ans;
}

ll rev(ll a,ll b){
    return fast(a,b-2,b);
}

const int maxn = 200010,maxv = 1000010;
vector<int>primeFactors[maxv];
int lastOcc[maxv];
ll ans[maxn],val[maxn];
ll bit[maxn];

void init(){
    for(int i = 2;i<maxv;i++){
        if(!sz(primeFactors[i])){
            for(int j = i;j<maxv;j+=i){
                primeFactors[j].PB(i);
            }
        }
    }
    for(int i = 0;i<maxn;i++)bit[i] = 1;
}



ll compo(ll x){
    assert(x>=2);
    return rev(x,mod)*(x-1)%mod;
}
void bitAdd(int ind,ll val){
    while(ind<maxn){
        bit[ind] = bit[ind]*val%mod;
        ind+=lowbit(ind);
    }
}
void add(int ind){
    bitAdd(ind,val[ind]);
    for(auto p:primeFactors[val[ind]]){
        if(lastOcc[p]){
            bitAdd(lastOcc[p],rev(compo(p),mod));
        }
        bitAdd(ind,compo(p));
        lastOcc[p]=ind;
    }
}

ll query(int x){
    ll ans = 1;
    while(x){
        ans*=bit[x];
        x-=lowbit(x);
        ans%=mod;
    }
    return ans;
}
void solve(){
    int n,q;in(n);
    REP(i,1,n+1)in(val[i]);
    in(q);
    vector<pair<PII,int>>v;
    REP(i,0,q){
        pair<PII,int>temp;
        in(temp.fi.se);in(temp.fi.fi);
        temp.se = i;
        v.PB(temp);
    }
    sort(all(v));
    int l = 1;
    for(auto i:v){
        while(l<=i.fi.fi)add(l++);
        ans[i.se] = query(i.fi.fi)*rev(query(i.fi.se-1),mod)%mod;
    }
    REP(i,0,q){
        lout(ans[i]);
    }
}

int main(){
    init();
    solve();
    return 0;
}


























