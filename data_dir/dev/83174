# include <bits/stdc++.h>
# define ll long long
using namespace std;
ll l , r , res , q , p[20]; 
ll sum(ll x , ll y){
	if(x > y) swap(x , y);
	return y * (y + 1) / 2 - x * (x - 1) / 2;
}
ll get(ll x){
	ll res = 0 , xar = 1;
	for(ll i = 1; xar <= x; i ++){
		res += sum(x - xar + 1 , max(1ll , x - (10 * xar - 1) + 1)) * i; 
		xar *= 10;
	}
	return res;
}
ll num(ll x){
	ll res = 0 , xar = 1;
	for(int i = 1; xar <= x; i ++){
		res += min(9 * xar , x - xar + 1) * i;
		xar *= 10; 
	}
	return res;
}
bool check(ll x , ll y){
	return get(x) < y;
}
bool ok(ll x , ll y){
	return num(x) < y;
}
void get_digits(ll x , vector < short > &digits){
	digits.clear();
	while(x){
		digits.push_back(x % 10);
		x /= 10;
	}
	reverse(digits.begin() , digits.end());
}
int main(){
	cin >> q;
	while(q --){
		ll x;
		cin >> x;
		l = 0 , r = 1e9 , res = 0;
		while(l <= r){
			ll m = (l + r) >> 1;
			if(check(m , x)) res = m , l = m + 1;
			else r = m - 1;
		}
		x -= get(res);
		l = 0 , r = 1e9 , res = 0;
		while(l <= r){
			ll m = (l + r) >> 1;
			if(ok(m , x)) res = m , l = m + 1;
			else r = m - 1;
		}
		vector < short > digits;
		get_digits(res + 1 , digits);
		x -= num(res) + 1;
		cout << digits[x] << "\n";
	} 
}