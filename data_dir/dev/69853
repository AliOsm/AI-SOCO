#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int maxn=3e5+7;
const int inf=INT_MAX;
const ll inff=1e18;
const ll mod=1e9+7;
#define pii pair<int,int>
#define mkp make_pair
#define F first
#define S second
#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
//#define int ll

#ifdef HNO2
#define IOS
#else
#define endl '\n'
#define IOS ios::sync_with_stdio(0); cin.tie(0);
#endif // HNO2

int n,k;
string s;
vector<int> v[maxn];

int used[maxn]; //1: white 2: black

vector<pii> G[maxn],vv; //n+1: white
int types[maxn];

void addedge(int x,int y,int type,int id)
{
    G[x].pb(mkp(y,type));
    G[y].pb(mkp(x,type));
    vv.pb(mkp(x,y));
    types[id]=type;
}

void dfs(int now)
{
    for (pii i:G[now])
    {
        if (!used[i.F])
        {
            if (i.S==0) used[i.F]=used[now];
            else used[i.F]=3-used[now];
            dfs(i.F);
        }
    }
}

//DSU
int p[maxn],black[maxn],white[maxn];
int Find(int x)
{
    return p[x]==x? x : p[x]=Find(p[x]);
}

int now_ans=0;
void Union(int x,int y,int id)
{
    int X=Find(x),Y=Find(y);
    now_ans-=min(black[X],white[X]);
    now_ans-=min(black[Y],white[Y]);
    black[X]+=black[Y];
    white[X]+=white[Y];
    now_ans+=min(black[X],white[X]);
    p[Y]=X;
}
//

int32_t main()
{
    IOS
    cin>>n>>k>>s;
    for (int i=1;i<=k;i++)
    {
        int x;
        cin>>x;
        for (int j=1;j<=x;j++)
        {
            int y;
            cin>>y;
            v[y].pb(i);
        }
    }

    vv.pb(mkp(-1,-1));

    for (int i=1;i<=n;i++)
    {
        if (sz(v[i])==0)
        {
            vv.pb(mkp(-1,-1));
            continue;
        }
        if (s[i-1]=='1')
        {
            if (sz(v[i])==1) addedge(v[i][0],k+1,0,i);
            else addedge(v[i][0],v[i][1],0,i);
        }
        else
        {
            if (sz(v[i])==1) addedge(v[i][0],k+1,1,i);
            else addedge(v[i][0],v[i][1],1,i);
        }
    }
    for (int i=k+1;i>=1;i--)
    {
        if (!used[i])
        {
            used[i]=1;
            dfs(i);
        }
    }

    for (int i=1;i<=k;i++)
    {
        p[i]=i;
        if (used[i]==1) white[i]++;
        else black[i]++;
    }
    p[k+1]=k+1;
    black[k+1]=0,white[k+1]=3e6;

    for (int i=1;i<=n;i++)
    {
        if (Find(vv[i].F)!=Find(vv[i].S))
            Union(vv[i].F,vv[i].S,i);
        cout<<now_ans<<endl;
    }
}

