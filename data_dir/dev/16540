#include<bits/stdc++.h>
#define In_the_name_of_allah_the_merciful ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define Alhamdulillah return 0;
#define pb push_back
#define ins(x) insert(x)
#define fi first
#define se second
#define ub upper_bound
#include<bits/stdc++.h>
#define In_the_name_of_allah_the_merciful ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define Alhamdulillah return 0;
#define pb push_back
#define ins(x) insert(x)
#define fi first
#define se second
#define ub upper_bound
#define all(v) v.begin(),v.end()
#define sz(v) ((ll)((v).size()))
#define reset(v,val) memset(v,val,sizeof(v))
#define erep(i, x, n) for ( i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for( i = x; i<(ll)(n); i++)
using namespace std;
typedef   long long  int   ll;
long long int mod=1e9+7;
ll dx[]={0,0,1,-1};
ll dy[]={1,-1,0,0};
ll m=0,n,res=0,k,ans=0;
string s2="zero",ch="",s,t,s1="";
set< pair<ll,ll>  > st;
vector< pair<string,ll> >vm;
vector< pair< pair<ll,ll>,ll > > vvv;
vector<pair<ll,ll> >vv,vv1;
vector< ll > v[200005],v1;
pair<ll,ll> a[200005];
ll vis[200005],dp[200005];

void dfs(ll x){
    vis[x]=1;
    for(ll i=0;i<v[x].size();i++){
        ll y=v[x][i];
        if(!vis[y]&&y<n){
            vv.pb({x,y});
            dfs(y);
        }
    }

}

int main(){
                                        In_the_name_of_allah_the_merciful


    ll i=0,x,z,y,j=0,q,mm=0,mx=0,idx=0,ok=0,l=0,r=0,negatif=0,positif=0,l1,r1,d;
    set< pair<ll,ll>  > ::iterator it,it1;
    //freopen("a.txt","r",stdin);
    cin>>n;
    for(i=0;i<n;i++){
        cin>>a[i].first>>a[i].second;
        if(a[i].first>0)st.insert({a[i].first,i});
        v[i].clear();
        dp[i]=0;
    }
    while(st.size()){
        it=st.begin();
        ll sz=(*it).first;
        ll node=(*it).second;
        if(!sz){
            st.erase(it);
            continue;
        }
        ans=a[node].second;
        ans^=dp[node];
        v[node].pb(ans);
        v[ans].pb(node);
        dp[ans]^=node;
        dp[node]^=ans;
        st.erase(it);
        if(st.count({a[ans].first,ans})){
            st.erase({a[ans].first,ans});
            a[ans].first--;
            st.insert({a[ans].first,ans});
        }


    }
    for(i=0;i<n;i++){
        if(!vis[i])dfs(i);
    }
    cout<<vv.size()<<endl;
    for(i=0;i<vv.size();i++)cout<<vv[i].first<<" "<<vv[i].second<<endl;


                                                Alhamdulillah
 }

