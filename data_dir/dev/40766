#include<bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5 ;
int n, in[N], out[N], vertex[N], sz[N], cnt[N], col[N], Mx[N], C;
vector < int > adj[N];
long long ans[N];
void pre(int v, int p){
  in[v] = ++C;
  sz[v] = 1;
  vertex[C] = v;
  for(auto c : adj[v]){
    if (p != c){
      pre(c, v);
      sz[v] += sz[c];
    }
  }
  out[v] = C;
}
void dfs(int v, int p, bool keep){
  int mx = -1, bigChild = -1;
  for(auto c : adj[v]){
    if (c == p)
      continue;
    if (sz[c] > mx)
      mx = sz[c], bigChild = c;
  }
  for(auto c : adj[v]){
    if (c != bigChild && c != p){
      dfs(c, v, 0);
    }
  }
  if (bigChild != -1){
    dfs(bigChild, v, 1);
    Mx[v] = Mx[bigChild];
    ans[v] = ans[bigChild];
  }
  for(auto c : adj[v]){
    if (c != bigChild && c != p){
      for(int i = in[c] ; i <= out[c] ; i++){
        int z = vertex[i];
        cnt[col[z]]++;
        if (cnt[col[z]] == Mx[v]){
          ans[v] += col[z];
        }
        if (cnt[col[z]] > Mx[v]){
          Mx[v] = cnt[col[z]];
          ans[v] = col[z];
        }
      }
    }
  }
  // cout << v <<' ' << p <<' ' << keep <<' ' << bigChild <<' '  <<Mx[v] <<' ' << ans[v] << endl;
  cnt[col[v]]++;
  if (cnt[col[v]] == Mx[v]){
    // cout << v <<' ' << col[v] <<' ' << cnt[col[v]] << endl;
    ans[v] += col[v];
  }
  if (cnt[col[v]] > Mx[v]){
    Mx[v] = cnt[col[v]];
    ans[v] = col[v];
  }
  if (!keep){
    for(int i = in[v] ; i <= out[v] ; i++){
      int z = vertex[i];
      cnt[ col[z] ]--;
    }
  }
}
int main (){
  scanf("%d",&n);
  for(int i = 1 ; i <= n ; i++){
    scanf("%d",&col[i]);
  }
  for(int i = 1 ; i < n ; i++){
    int x, y;
    scanf("%d%d",&x,&y);
    adj[x].push_back(y);
    adj[y].push_back(x);
  }
  pre(1, 0);
  dfs(1, 0, 1);
  for(int i = 1 ; i <= n ; i++)
    cout << ans[i] <<' ' ;
  return 0;
}
