#include <bits/stdc++.h>

//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

//using namespace __gnu_pbds;
using namespace std;

//template<typename T>
//using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef vector<int> vi;
typedef long long ll;

#define pb push_back
#define inf 0x3f3f3f3f
#define all(v) (v).begin() , (v).end()
#define ones(n) __builtin_popcount(n)

int di[] = {0, 0, 1, -1, 1, 1, -1, -1};
int dj[] = {1, -1, 0, 0, -1, 1, 1, -1};

const int N = 1e6 + 5;
char a[N], b[N], s[N];
int n, k;
int taken[250], mp[250];

void finish() {
    for (int i = 'a' ;i < 'a' + k ;i++) {
        if (!mp[i]) {
            for (int j = 'a' ;j < 'a' + k ;j++) {
                if (!taken[j]) {
                    mp[i] = j;
                    taken[j] = 1;
                    break;
                }
            }
        }
    }
}

bool go(int i, bool less, bool greater) {
    if (less && greater || i == n)
        return 1;

    if (mp[s[i]]) {
        if ((less || mp[s[i]] <= b[i]) && (greater || mp[s[i]] >= a[i]))
            return go(i + 1 , less | (mp[s[i]] < b[i]) , greater | (mp[s[i]] > a[i]));
        else
            return 0;
    }

    int l = greater ? 'a' : a[i] + 1, r = less ? 'a' + k - 1 : b[i] - 1;
    for (int c = l; c <= r; c++) {
        if (!taken[c]) {
            taken[c] = 1;
            mp[s[i]] = c;
            return 1;
        }
    }

    if (!less && !taken[b[i]]) {
        mp[s[i]] = b[i];
        taken[b[i]] = 1;
        if (go(i + 1 , less , greater | (b[i] > a[i])))
            return 1;
        mp[s[i]] = taken[b[i]] = 0;
    }

    if (!greater && !taken[a[i]]) {
        mp[s[i]] = a[i];
        taken[a[i]] = 1;
        if (go(i + 1 , less | (a[i] < b[i]) , greater))
            return 1;
        mp[s[i]] = taken[a[i]] = 0;
    }

    return 0;
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("input.in", "r", stdin);
#endif
    int T;
    scanf("%d", &T);
    while (T--) {
        scanf("%d%s%s%s", &k, s, a, b);
        n = strlen(a);
        memset(taken , 0 , sizeof taken);
        memset(mp , 0 , sizeof mp);
        if (go(0 , 0 , 0)) {
            puts("YES");
            finish();
            for (int i = 'a'; i < 'a' + k; i++)
                printf("%c", mp[i]);
            putchar('\n');
            continue;
        }
        puts("NO");
    }
}