#include <iostream>
#include <vector>
using namespace std;
#define MAXN 600005
#define MOD 1000000007
long long XSUM[MAXN+1];

long long getSumX(int i)
{
	long long c=0;
	for(++i; i > 0 ; i -= (i & -i))
	{
		c += XSUM[i];
		c %= MOD;
	}
	return c;
}
void setX(int i,long long dif)
{
	for(++i; i < MAXN ; i += (i & -i))
	{
		XSUM[i] += dif;
		XSUM[i] %= MOD;
	}
}
void initX()
{
	for(int i=0;i<MAXN;i++)
		XSUM[i] = 0;
}

long long KSUM[MAXN+1];

long long getSumK(int i)
{
	long long c = 0;
	for(i++;i>0;i -= (i&-i))
	{
		c += KSUM[i];
		c %= MOD;
	}
	return c;
}

void setK(int i,long long dif)
{
	for(i++;i<MAXN;i+=(i&-i))
	{
		KSUM[i] += dif;
		KSUM[i] %= MOD;
	}
}
void initK()
{
	for(int i=0;i<MAXN;i++)
		KSUM[i] = 0;
}

int order[600000];
int first[300000];
int second[300000];
int depth[300000];
int cOrder;
vector<vector<int> > edges;

void dfs(int i,int d)
{
	depth[i] = d;
	first[i] = cOrder;
	order[cOrder++] = i;
	for(int j=0;j<edges[i].size();j++)
		dfs(edges[i][j],d+1);
	second[i] = cOrder;
	order[cOrder++] = i;
}

int main()
{
	cin.tie(0);
	ios::sync_with_stdio(0);
	int N,Q;
	cin >> N;
	int par;
	for(int i=0;i<N;i++)
		edges.push_back(vector<int>());
	for(int i=1;i<N;i++)
	{
		cin >> par;
		edges[par-1].push_back(i);
	}
	cOrder = 0;
	dfs(0,0);
	long long tp,v,x,k;
	long long ans;
	initX();
	initK();
	cin >> Q;
	for(int i=0;i<Q;i++)
	{
		cin >> tp;
		if(tp == 1)
		{
			cin >> v >> x >> k;
			v--;
			x += depth[v]*k;
			x %= MOD;
			setX(first[v],x);
			setK(first[v],k);
			setX(second[v]+1,-x);
			setK(second[v]+1,-k);
		}
		else
		{
			cin >> v;
			v--;
			ans = getSumX(first[v])-depth[v]*getSumK(first[v]);
			ans %= MOD;
			if(ans<0) ans += MOD;
			cout << ans << endl;
		}
	}
}