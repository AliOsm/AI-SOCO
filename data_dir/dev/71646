#include<bits/stdc++.h>
using namespace std;

#define ll long long

#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) memset(ar, val, sizeof(ar))
#define fill0(ar) fill((ar), 0)
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld long double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef pair<int, int> ii;
typedef pair<ii, int> iii;
typedef vector<ii> vii;
typedef vector<int> vi;

#define INF 1000000000000000000
#define PI 3.14159265358979323846L

struct Node
{
	Node* left;
	Node* right;
	ll value;
};

Node* createNode()
{
	struct Node *node =  (struct Node *)malloc(sizeof(struct Node));
	node->value = 0;
	node->left = NULL;
	node->right = NULL;
	return node;

}

void insertInTrie(Node* root, ll x)
{
	ll bitss[33];

	rep(i,33)
	{
		bitss[i] = x%2;
		x = x/2;
	}

	frr(i,32,0)
	{
		if(bitss[i]==0)
		{
			if(root->left!=NULL)
			{
				// cout << "HI" << endl;
				root = root->left;
			}
			else
			{
				Node* node = createNode();
				// cout << "HI" << endl;
				root->left = node;
				root = node;
			}
		}
		else
		{
			if(root->right!=NULL)
				root = root->right;
			else
			{
				Node* node = createNode();
				root->right = node;
				root = node;
			}
		}
	}

	root->value++;
}

void DFS(Node* root)
{
	if(root->left!=NULL)
	{
		DFS(root->left);
		// cout << root->left->value << endl;
		root->value = root->value + root->left->value;
	}
	if(root->right!=NULL)
	{
		DFS(root->right);
		// cout << root->right->value << endl;
		root->value = root->value + root->right->value;
	}
}

ll findAns(Node* root, ll x, ll k)
{
	ll bitsink[33];
	ll bitss[33];

	ll x2 = x;

	rep(i,33)
	{
		bitss[i] = x%2;
		x = x/2;
	}

	rep(i,33)
	{
		bitsink[i] = k%2;
		k = k/2;
	}

	ll ans = 0;

	bool hu = 0;

	frr(i,32,0)
	{
		if(bitsink[i]==1 && bitss[i]==0)
		{
			if(root->right!=NULL)
				root = root->right;
			else
			{
				hu = 1;
				break;
			}
		}
		else if(bitsink[i]==1 && bitss[i]==1)
		{
			if(root->left!=NULL)
				root = root->left;
			else
			{
				hu = 1;
				break;
			}
		}
		else if(bitsink[i]==0 && bitss[i]==0)
		{
			if(root->right!=NULL)
			{
				// cout << x2 << " " << root->right->value << endl;
				ans = ans + root->right->value;
			}
			if(root->left!=NULL)
				root = root->left;
			else
			{
				hu = 1;
				break;
			}
		}
		else
		{
			if(root->left!=NULL)
				ans = ans + root->left->value;
			if(root->right!=NULL)
				root = root->right;
			else
			{
				hu = 1;
				break;
			}
		}
	}

	if(!hu)
	{
		// cout << "G";
		ans = ans + root->value;
	}

	return ans;
}

void print(Node* root)
{
	queue<Node*> q;

	q.push(root);

	while(!q.empty())
	{
		Node* x = q.front();
		cout << x->value << " ";
		if(x->left!=NULL)
			q.push(x->left);
		if(x->right!=NULL)
			q.push(x->right);
		q.pop();
	}
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    ll n;
    cin >> n;

    ll k;
    cin >> k;

    ll a[n];
    rep(i,n)
    {
    	cin >> a[i];
    }

    n++;

    ll b[n];

    b[0] = 0;
    fr(i,1,n)
    {
    	b[i] = b[i-1]^a[i-1];
    }

    Node* root = createNode();

    // cout << "G" << endl;
    rep(i,n)
    {
    	// cout << b[i] << endl;
    	insertInTrie(root,b[i]);
    }

    // cout << "H" << endl;
    DFS(root);

    // print(root);

    ll ans = 0;

    rep(i,n)
    {
    	// cout << findAns(root,b[i],k) << endl;
    	ans = ans + findAns(root,b[i],k);
    }

    cout << ans/2 << endl;
}
