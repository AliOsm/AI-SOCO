#include <bits/stdc++.h>
using namespace std;

#ifdef SG
    #include <debug.h>
#else
    #define show(...)
    #define debug(...)
    #define deepen(...)
    #define timer(...)
#endif

#define ARG4(_1,_2,_3,_4,...) _4

#define forn3(i,l,r) for (int i = int(l); i < int(r); ++i)
#define forn2(i,n) forn3 (i, 0, n)
#define forn(...) ARG4(__VA_ARGS__, forn3, forn2) (__VA_ARGS__)

#define ford3(i,l,r) for (int i = int(r) - 1; i >= int(l); --i)
#define ford2(i,n) ford3 (i, 0, n)
#define ford(...) ARG4(__VA_ARGS__, ford3, ford2) (__VA_ARGS__)

#define ve vector
#define pa pair
#define tu tuple
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) ((int)(a).size())

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef unsigned char uc;
typedef pa<int, int> pii;
typedef pa<int, ll> pil;
typedef pa<ll, int> pli;
typedef pa<ll, ll> pll;
typedef ve<int> vi;

const ld pi = 3.1415926535897932384626433832795l;

template<typename T> inline auto sqr (T x) -> decltype(x * x) {return x * x;}
template<typename T1, typename T2> inline bool umx (T1& a, T2 b) {if (a < b) {a = b; return 1;} return 0;}
template<typename T1, typename T2> inline bool umn (T1& a, T2 b) {if (b < a) {a = b; return 1;} return 0;}

const int N = 30;

struct Input {
    int n;
    int a[N][3];        

    bool read () {
        if (scanf("%d", &n) != 1)
            return 0;
        forn(i, n) {
            scanf("%d%d%d", &a[i][0], &a[i][1], &a[i][2]);
        }
        return 1;
    }

    void init (const Input &input) {
        *this = input;
    }
};

struct Data: Input {
    bool ok;
    string ans[N];

    void write () {
        if (ok) {
            forn(i, n) {
                cout << ans[i] << endl;
            }
        } else {
            puts("Impossible");
        }
    }
    
    virtual void solve () {}
    
    virtual void clear () {
        *this = Data();
    }
};

const int inf = 1e9;
const char c[3] = {'L', 'M', 'W'};

struct Solution: Data {
    map<pa<pii, int>, pair<int, int> > m;   
    int l;
    int r;
    pa<int, ll> mx;
    
    void calc(int i, int d1, int d2, int d3, int msk) {
        if (i == l) {
            if (m.find(mp(mp(d1 - d2, d1 - d3), d2 - d3)) == m.end()) {
                m[mp(mp(d1 - d2, d1 - d3), d2 - d3)] = mp(d1, msk);
            } else {
                umx(m[mp(mp(d1 - d2, d1 - d3), d2 - d3)], mp(d1, msk));
            }
            return;
        }
        forn(j, 3) {
            int nd1 = d1 + a[i][0], nd2 = d2 + a[i][1], nd3 = d3 + a[i][2];
            if (j == 0) {
                nd1 -= a[i][0];
            } else if (j == 1) {
                nd2 -= a[i][1];
            } else {
                nd3 -= a[i][2];
            }
            calc(i + 1, nd1, nd2, nd3, msk | (j << (2 * i)));   
        }
    }
    
    void calc2(int i, int d1, int d2, int d3, int msk) {
        if (i == r) {
            if (m.find(mp(mp(d2 - d1, d3 - d1), d3 - d2)) == m.end()) 
                return;
            else {
                pii res = m[mp(mp(d2 - d1, d3 - d1), d3 - d2)];
                int cnt = res.fs + d1;
                umx(mx, mp(cnt, ((1ll * res.sc) << (2 * r)) + msk));
            }
            return;
        }
        forn(j, 3) {
            int nd1 = d1 + a[i][0], nd2 = d2 + a[i][1], nd3 = d3 + a[i][2];
            if (j == 0) {
                nd1 -= a[i][0];
            } else if (j == 1) {
                nd2 -= a[i][1];
            } else {
                nd3 -= a[i][2];
            }
            calc2(i + 1, nd1, nd2, nd3, msk | (j << (2 * i)));  
        }
    }

    void solve () {
        l = min(n, 13);
        r = n - l;
        calc(0, 0, 0, 0, 0);
        forn(i, n / 2) {
            forn(j, 3) {
                swap(a[i][j], a[n - 1 - i][j]);
            }
        }                
        mx = mp(-inf, -inf);
        calc2(0, 0, 0, 0, 0);
        if (mx.fs == -inf) {
            ok = 0;
            return;
        }   
        ok = 1;
        forn(i, n)
            ans[i] = "MM";
        forn(i, r) {
            int idx = mx.sc & (3 << (2 * i));
            idx >>= (2 * i);
            if (idx == 0) {
                ans[i][0] = 'M', ans[i][1] = 'W';
            } else if (idx == 1) {
                ans[i][0] = 'L', ans[i][1] = 'W';
            } else {
                ans[i][0] = 'L', ans[i][1] = 'M';
            }   
        }
        forn(i, l) {
            ll idx = mx.sc & (3ll << (2 * i + 2 * r));
            idx >>= (2 * i + 2 * r);
            if (idx == 0) {
                ans[i + r][0] = 'M', ans[i + r][1] = 'W';
            } else if (idx == 1) {
                ans[i + r][0] = 'L', ans[i + r][1] = 'W';
            } else {
                ans[i + r][0] = 'L', ans[i + r][1] = 'M';
            }   
        }
        reverse(ans + r, ans + n);
        reverse(ans, ans + n);
    }
    
    void clear () {
        *this = Solution();
    }
};

Solution sol;
        
int main () {
    cout.setf(ios::showpoint | ios::fixed);
    cout.precision(20);
#ifdef SG
    freopen((problemname + ".in").c_str(), "r", stdin);
//  freopen((problemname + ".out").c_str(), "w", stdout);
    while (sol.read()) {
        sol.solve();
        sol.write();
        sol.clear();
    }
#else
    sol.read();
    sol.solve();
    sol.write();
#endif
    return 0;
}
