# include <bits/stdc++.h>
using namespace std;
const int N = 3e5 + 100;
vector < int > roots, edges[N];
int fix[N], d[N], n, m;
bool vis[N];
string s;
void dfs(int x, char c){
    if(vis[x])return;
    vis[x] = true;
    bool isC = false;
    if(s[x - 1] == c)isC = true, d[x] = 1;
    for(int i : edges[x]){
        if(!vis[i]){
            dfs(i, c);
        }
        d[x] = max(d[x], d[i] + isC);
    }
}
void isCycle(int x){
    if(fix[x])return;
    fix[x] = 1;
    for(int i : edges[x]){
        if(fix[i] == 1){
            cout << "-1\n";
            exit(0);
        }else{
            if(!fix[i]){
                isCycle(i);
            }
        }
    }
    fix[x] = 2;
}
int main(){
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    cin >> n >> m >> s;
    for(int i = 1; i <= m; i++){
        int x, y;
        cin >> x >> y;
        edges[x].push_back(y);
    }
    for(int i = 1; i <= n; i++){
        isCycle(i);
    }
    int ans = 0;
    for(char i = 'a'; i <= 'z'; i++){
        memset(vis, 0, sizeof vis);
        memset(d, 0, sizeof d);
        for(int j = 1; j <= n; j++){
            dfs(j, i);
        }
        for(int j = 1; j <= n; j++){
            ans = max(ans, d[j]);
        }
    }
    cout << ans << endl;
}