#include <bits/stdc++.h>
#define infi 1E9
#define f first
#define s second
using namespace std;
typedef pair<int,int> pii;
const int N = 500;
int dist[N],pre[N],used[N];
struct node {int cap,cost;} g[N][N];

int spfa(int src, int sink){
    queue<int> Q;
    for(int i = 0; i <= sink; ++i)
        dist[i] = infi, used[i] = 0;
    dist[src] = 0, used[src] = 1;
    Q.push(src);
    pre[src] = src;
    while(!Q.empty()) {
        int tn = Q.front();
        Q.pop();
        used[tn] = 0;
        for(int i = 0; i <= sink; ++i) {
            if(g[tn][i].cap > 0 && dist[i] > dist[tn]+g[tn][i].cost) {
                dist[i] = dist[tn]+g[tn][i].cost;
                pre[i] = tn;
                if(!used[i]) Q.push(i), used[i] = 1;
            }
        }
    }
    return dist[sink] != infi;
}

pii MCMF(int src, int sink) {
    pii ans;
    while(spfa(src, sink)) {
        int flow = infi;
        for(int i = sink; i != src; i = pre[i])
            if(flow > g[pre[i]][i].cap)
                flow = g[pre[i]][i].cap;
        for(int i = sink; i != src; i = pre[i]) {
            g[pre[i]][i].cap -= flow;
            g[i][pre[i]].cap += flow;
            g[i][pre[i]].cost = -g[pre[i]][i].cost;
        }
        ans.f += flow;
        ans.s += dist[sink]*flow;
    }
    return ans;
}

int main(){
    int m;
    cin>>m;
    string s;
    cin>>s;
    int vec[m], freq[26];
    memset(freq,0,sizeof freq);
    for(int i = 0;i<m;i++) {
        freq[s[i]-'a']++;
        cin>>vec[i];
    }
    for(int i = 0;i<26;i++) {
        g[0][i+1].cap = freq[i];
        g[0][i+1].cost = 0;
        for(int j = 0;j<m/2;j++) {
            g[i+1][j+27].cap = 1;
            if('a' + i == s[j] && 'a' + i == s[m-j-1] )
                g[i+1][j+27].cost = -max(vec[j],vec[m-j-1]);
            else if('a'+i == s[j])
                g[i+1][j+27].cost = -vec[j];
            else if('a'+i == s[m-j-1])
                g[i+1][j+27].cost = -vec[m-j-1];
            else
                g[i+1][j+27].cost = 0;
            g[j+27][m/2+27].cap = 2;
            g[j+27][m/2+27].cost = 0;
        }
    }
    printf("%d",-MCMF(0,m/2+27).s);
}
