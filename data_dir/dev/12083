#include <iostream>
#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <cmath>
#include <map>
#include <vector>
#include <queue>
using namespace std;
#define x first
#define y second
#define pii pair<int,int>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define FOREACH(it,x) for(typeof(x.begin())it=x.begin();it!=x.end();it++)
#define DBG(x) cerr<<#x<<"="<<x<<"\n";
#define ll long long
#define inf 1000000007
#define mod 1000000007
#define N 100010

int a[202],p[20010],head[210],cnt,v[210],d[210],cur[210];
vi res[210];
struct node
{
	int v,c,next;
}g[N];
void add(int a,int b,int c)
{
	g[cnt].v=b,g[cnt].c=c,g[cnt].next=head[a],head[a]=cnt++;
	g[cnt].v=a,g[cnt].c=0,g[cnt].next=head[b],head[b]=cnt++;
}
int s,t,sz;
bool bfs()
{
	for(int i=0;i<=t;i++)d[i]=-1,cur[i]=head[i];
	queue<int>q;q.push(s);d[s]=0;
	while(!q.empty())
	{
		int u=q.front();q.pop();
		for(int i=head[u];i+1;i=g[i].next)
		{
			int j=g[i].v;
			if(d[j]==-1&&g[i].c)
			{
				d[j]=d[u]+1;
				q.push(j);
			}
		}
	}
	return d[t]!=-1;
}
int dfs(int u,int t,int lim)
{
	if(u==t||lim==0)return lim;
	int ans=0,f;
	for(int &i=cur[u];i+1;i=g[i].next)
	{
		int j=g[i].v;
		if(d[j]==d[u]+1&&(f=dfs(j,t,min(g[i].c,lim))))
		{
			ans+=f,lim-=f;
			g[i].c-=f,g[i^1].c+=f;
			if(lim==0)break;
		}
	}
	d[u]=-1;
	return ans;
}
int max_flow()
{
	int ans=0;
	while(bfs())ans+=dfs(s,t,inf);
	return ans;
}
void func(int u)
{
	while(1)
	{
		res[sz].pb(u);v[u]=1;int i;
		for(i=head[u];i+1;i=g[i].next)
		{
			int j=g[i].v;
			if(j==s||j==t||v[j])continue;
			if(a[u]%2==0&&g[i].c){u=j;break;}
			if(a[u]%2==1&&g[i].c==0){u=j;break;}
		}
		if(i==-1)break;
	}
}
int main()
{
	int i,j,k,m,n;
	for(i=2;i<=20000;i++)
	if(!p[i])
	{
		for(j=i+i;j<=20000;j+=i)p[j]=1;
	}
	scanf("%d",&n);
	for(i=1;i<=n;i++)scanf("%d",&a[i]);
	if(n&1){puts("Impossible");return 0;}
	int c=0;
	cnt=0;
	memset(head,-1,sizeof(head));
	s=0,t=n+1;
	for(i=1;i<=n;i++)
		if(a[i]&1)c++,add(s,i,2);
		else add(i,t,2);
	if(c*2!=n){puts("Impossible");return 0;}
	for(i=1;i<=n;i++)
		for(j=1;j<=n;j++)
			if((a[i]&1)&&!p[a[i]+a[j]])add(i,j,1);
	if(max_flow()!=n){puts("Impossible");return 0;}
	memset(v,0,sizeof(v));
	sz=0;
	for(i=1;i<=n;i++)
	{
		if(!v[i])func(i),sz++;
	}
	printf("%d\n",sz);
	for(i=0;i<sz;i++)
		{
			printf("%d ",res[i].size());
			for(j=0;j<res[i].size();j++)printf("%d%s",res[i][j],j==res[i].size()-1?"\n":" ");
		}
	/*
	for(i=0;i<sz;i++)
	{
		for(j=0;j<res[i].size()-1;j++)
		{
			if(p[a[res[i][j]]+a[res[i][j+1]]]){DBG("err")break;}
		}
		if(p[a[res[i][0]]+a[res[i][j]]]){DBG("err")}
	}
	*/
	return 0;	
}