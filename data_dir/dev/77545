#include<bits/stdc++.h>
using namespace std;
const int N = 2e5 + 10;
int n, q, nxt[26][N], M[2], P[2][N], PS[2][26][N];
char A[N];
int get(int l, int r, int c, int w)
{
    return (((PS[w][c][r] - 1ll * PS[w][c][l - 1] * P[w][r - l + 1]) % M[w] + M[w]) % M[w]);
}
int main()
{
    scanf("%d%d%s", &n, &q, &A[1]);
    M[0] = 987654319; M[1] = 1e9 + 9;
    for (int i = P[0][0] = P[1][0] = 1; i < N; i++)
        P[0][i] = 1ll * P[0][i - 1] * 71 % M[0], P[1][i] = 1ll * P[1][i - 1] * 19777 % M[1];
    for (int i = 0; i < 26; i++)
        for (int j = 1; j <= n; j++)
            for (int w = 0; w < 2; w++)
                PS[w][i][j] = (1ll * PS[w][i][j - 1] * P[w][1] + (A[j] - 'a' == i)) % M[w];
    for (int i = 0; i < 26; i++)
        nxt[i][n + 1] = n + 1;
    for (int j = n; j; j--)
    {
        for (int i = 0; i < 26; i++)
            nxt[i][j] = nxt[i][j + 1];
        nxt[A[j] - 'a'][j] = j;
    }
    while (q --)
    {
        int l, le, len, b = 1;
        scanf("%d%d%d", &l, &le, &len);
        for (int i = 0, w = 1; i < 26; i++, b &= w, w = 1)
            if (nxt[i][l] < l + len)
            {
                int j = A[nxt[i][l] - l + le] - 'a';
                if (get(l, l + len - 1, i, 0) != get(le, le + len - 1, j, 0) || get(l, l + len - 1, i, 1) != get(le, le + len - 1, j, 1))
                    w = 0;
            }
        puts(b ? "YES" : "NO");
    }
    return (0);
}
