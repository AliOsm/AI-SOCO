#include <bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds;   
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 
#define ll long long int
#define ld double
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define all(a) a.begin(),a.end()
#define sz(a) (ll)(a.size())
const ll M=1002,N=1002;
ll dist[M][M];
bool bipartiteGraph[N][N];
ll x[N],a[N],f[N],l[N],d[N];
std::vector<ll> vtr[M];
bool bipartiteMatch(int u, bool visited[], int assign[]) {
   for (int v = 0; v < N; v++) {    //for all jobs 0 to N-1
      if (bipartiteGraph[u][v] && !visited[v]) {    //when job v is not visited and u is interested
         visited[v] = true;    //mark as job v is visited
         //when v is not assigned or previously assigned
         if (assign[v] < 0 || bipartiteMatch(assign[v], visited, assign)) {
            assign[v] = u;    //assign job v to applicant u
            return true;
         }
      }
   }
   return false;
}
 
int maxMatch() {
   int assign[N];    //an array to track which job is assigned to which applicant
   for(int i = 0; i<N; i++)
      assign[i] = -1;    //initially set all jobs are available
   int jobCount = 0;
 
   for (int u = 0; u < M; u++) {    //for all applicants
      bool visited[N];
      for(int i = 0; i<N; i++)
         visited[i] = false;    //initially no jobs are visited
      if (bipartiteMatch(u, visited, assign))    //when u get a job
         jobCount++;
   }
   return jobCount;
}
int main()
{
	ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
	ll n,m;
	cin>>n>>m;
	for(ll i=1;i<=m;i++)
	{
		ll u,v;
		cin>>u>>v;
		vtr[u].pb(v);
		vtr[v].pb(u);
	}
	ll s,b,k,h;
	cin>>s>>b>>k>>h;
	for(ll i=1;i<=s;i++)
		cin>>x[i]>>a[i]>>f[i];
	for(ll i=1;i<=b;i++)
		cin>>l[i]>>d[i];
	for(ll i=1;i<=n;i++)
	{
		for(ll j=1;j<=n;j++)
			dist[i][j]=2e9;
		queue<ll> q;
		dist[i][i]=0;
		q.push(i);
		while(!q.empty())
		{
			ll x=q.front();
			q.pop();
			for(auto u:vtr[x])
			{
				if(dist[i][u]>dist[i][x]+1)
				{
					q.push(u);
					dist[i][u]=dist[i][x]+1;
				}
			}
		}
	}
	for(ll i=1;i<=s;i++)
	{
		for(ll j=1;j<=b;j++)
		{
			if(dist[x[i]][l[j]]<=f[i] && a[i]>=d[j])
			{
				bipartiteGraph[i][j]=1;
			}
		}
	}
	ll z=maxMatch();
	ll r=s-z;
	ll ans=k*z;
	for(ll j=r;j<=s;j++)
	{
		ans=min(ans,j*h+(s-j)*k);
	}
	cout<<ans<<"\n";
	return 0;
}