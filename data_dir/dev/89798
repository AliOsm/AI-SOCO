#include <iostream>
#include <bits/stdc++.h>

using namespace std;
int n;
pair < string, int > s[300];
string pref, suff;

bool canBePrefix(string s)
{
    for(int i = 0; i<s.size(); i++)
        if(s[i] != pref[i])   return false;
    return true;
}

bool canBeSuffix(string s)
{
    int j = suff.size() - 1;
    for(int i = s.size() - 1 ; i>=0; i--)
    {
        if(s[i] != suff[j])   return false;
        j--;
    }
    return true;
}


char Ans[300];

bool cmp(const pair < string, int > &s1, const pair < string, int > &s2)
{
    return s1.first.size() < s2.first.size();
}

int main()
{
    cin >> n;
    n = 2 * n - 2;
    for(int i = 0; i<n; i++)  cin >> s[i].first, s[i].second = i;
    sort(s, s + n, cmp);
    bool check = true;
    Ans[s[n - 1].second] = 'P';
    pref = s[n - 1].first;
    Ans[s[n - 2].second] = 'S';
    suff = s[n - 2].first;
    for(int i = 0; i<n - 2; i+=2)
    {
        if(canBePrefix(s[i].first) && canBeSuffix(s[i + 1].first))
        {
            Ans[s[i].second] = 'P';
            Ans[s[i + 1].second] = 'S';
        }
        else if(canBeSuffix(s[i].first) && canBePrefix(s[i + 1].first))
        {
            Ans[s[i].second] = 'S';
            Ans[s[i + 1].second] = 'P';
        }
        else
        {
            check = false;
            break;
        }
    }
    if(!check)
    {
        pref = s[n - 2].first;
        Ans[s[n - 2].second] = 'P';
        suff = s[n - 1].first;
        Ans[s[n - 1].second] = 'S';
        for(int i = 0; i<n - 2; i+=2)
        {
            if(canBePrefix(s[i].first) && canBeSuffix(s[i + 1].first))
            {
                Ans[s[i].second] = 'P';
                Ans[s[i + 1].second] = 'S';
            }
            else
            {
                Ans[s[i].second] = 'S';
                Ans[s[i + 1].second] = 'P';
            }

        }
    }
    for(int i =0;i<n;i++)  cout << Ans[i];
    return 0;
}
