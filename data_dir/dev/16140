#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <cstdio>
#include <stdio.h>
#include <fstream>
#include <map>
#include <set>
#include <cstdlib>
#include <queue>
#include <math.h>
#include <cmath>
#include <cstring>
#include <stdlib.h>
#include <stack>
#include <iomanip>
#define ll long long
#define endl '\n'
#define ull unsigned long long
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pll pair<ll,ll>
#define pull pair<ull,ull>
 
ll MOD=1000000007;
ll inf=1e18;
using namespace std;

bool Vis[100001];
bool Black[100001];
queue<int> Q;
int Sz[100001];
int ID[100001];
vector< pii > Edges,Pairs;
map< pii, int > Ans,LCA;
vector<int> P[100001];
vector<int> Children[100001];
int Cnt[100001];
int V[100001];

int root(int x)
{
    while(x!=ID[x])
    {
        ID[x]=ID[ID[x]];
        x=ID[x];
    }
    return x;
}

void Union(int x,int y)
{
    x=root(x);y=root(y);
    if(x==y){return;}
    if(Sz[x]>=Sz[y])
    {
        ID[y]=x;
        Sz[x]+=Sz[y];
    }
    else
    {
        ID[x]=y;
        Sz[y]+=Sz[x];
    }
    return;
}


void DFS(int i)
{
    //cout<<i<<endl;
    Vis[i]=true;
    int j,x;
    for(j=0;j<Children[i].size();j++)
    {
        if(Vis[Children[i][j]]){continue;}
        DFS(Children[i][j]);
        Union(i,Children[i][j]);
        ID[root(i)]=i;
        ID[i]=i;
    }
    Black[i]=true;
    for(j=0;j<P[i].size();j++)
    {
        x=P[i][j];
        if(Black[x])
        {
            
            LCA[mp(min(i,x),max(i,x))]=root(x);
        }
    }
    return;
}




int main()
{
    ios::sync_with_stdio(0);
    int n,i,x,y,k,j,r;
    cin>>n;
    for(i=0;i<n-1;i++)
    {
        cin>>x>>y;x--;y--;
        if(i==0)r=min(x,y);
        Children[x].pb(y);
        Children[y].pb(x);
        Cnt[x]++;Cnt[y]++;
        Edges.pb(mp(min(x,y),max(x,y)));
        Ans[mp(min(x,y),max(x,y))]=0;
    }
    for(i=0;i<n;i++)
    {
        if(Cnt[i]==1 && i!=r)
        {
            Q.push(i);
        }
        ID[i]=i;Sz[i]=1;
    }
    cin>>k;
    for(i=0;i<k;i++)
    {
        cin>>x>>y;x--;y--;
        P[x].pb(y);
        P[y].pb(x);
        Pairs.pb(mp(x,y));
    }
    DFS(r);
    for(i=0;i<k;i++)
    {
        x=Pairs[i].first;
        y=Pairs[i].second;
        if(x>y){swap(x,y);}
        V[x]+=1;
        V[y]+=1;
        V[LCA[mp(x,y)]]-=2;
    }
    while(!Q.empty())
    {
        x=Q.front();Q.pop();
        for(j=0;j<Children[x].size();j++)
        {
            y=Children[x][j];
            if(Cnt[y]==0){continue;}
            Cnt[y]--;
            Cnt[x]--;
            Ans[mp(min(x,y),max(x,y))]+=V[x];
            V[y]+=V[x];
            if(Cnt[y]==1 && y!=r)
            {
                Q.push(y);
            }
        }
    }
    
    for(i=0;i<Edges.size();i++)
    {
        cout<<Ans[Edges[i]]<<" ";
    }
    
    
    
    return 0;
}  