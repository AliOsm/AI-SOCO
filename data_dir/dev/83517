#include <string.h>
#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <stack>
#include <queue>
#include <set>

#include <map>
#include <vector>
#include <string>
#include <stdlib.h>

#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf

#define pf printf
#define mp make_pair

using namespace std;

const int maxn=200001;
 
/*
int l[1000000], r[1000000], sum[1000000];

void add(int t, int l, int r, int x, int y) {

	if(l==r) {
		sum[t] = max(sum[t], y);
		return;
	}

	int mid=(l+r)>>1;
	if(x<=mid){
		add(2*t, l, mid, x, y);
	}
	else {
		add(2*t+1, mid+1, r,x,y);
	}
	sum[t] = max(sum[2*t], sum[2*t+1]);
}

int query(int t, int l, int r, int ql, int qr) {

	if(ql<=l && qr >=r) {
		return sum[t];
	}

	int ret = 0;
	int mid= (l+r)>>1;
	if(ql<=mid) {
		ret = max(ret,query(2*t, l, mid,ql, qr));
	}
	if(qr>mid) {
		ret = max(ret,query(2*t+1, mid+1,r,ql,qr));
	}
	return ret;
}
*/

map<int,int> id_x;
int cnt;
int max_x;

int h[1000010],a[1000010];
ll lowbit(ll x)
{
    return x&(-x);
}

void update(ll x)
{
	while(x<cnt)
	{
		h[x]=a[x];
		for(ll i=1;i<lowbit(x);i<<=1)
			h[x]=max(h[x],h[x-i]);
		x+=lowbit(x);
	}
	return ;
}

int query_p(ll begin,ll end)
{
	//printf("b = %d e = %d\n",begin, end);
    int ans=0;
    while(end>=begin)
    {
        ans=max(ans,a[end]);
        end--;
        for(;end-lowbit(end)>=begin;end-=lowbit(end))
        ans=max(ans,h[end]);
    }
    return ans;
}

void init() {
	id_x.clear();
	clr(a);
	clr(h);
	cnt = 1;
	max_x = 0;
	//clr(sum);
}

void add(int x, int y) {

	//printf("x = %d idx = %d\n",x,id_x[x]);
	int id = id_x[x];
	a[id]=max(a[id],y);
	update(id);
	
	//add(1,0,cnt-1,id_x[x],y);
	max_x = max(x,max_x);
	//printf("Add x = %d y = %d max x = %d id = %d\n",x,y,max_x, id_x[x]);
}

int query(int x, int y) {
	if(x>y)swap(x,y);
	//printf("query x = %d y = %d max x = %d\n",x,y,max_x);
	if(max_x > y) {
		return 0;
	}

	int id = id_x[x];
	//printf("x = %d id = %d\n",x,id_x[x]);

	int y1 = query_p(1,id);
	int y2 = query_p(id+1,cnt-1);
	//printf("find y1 = %d y2 = %d\n",y1,y2);
	
	if(y1<=y && y2 <=x) {
		return 1;
	}
	return 0;
}

struct CMD{
	char c;
	int x,y;
	CMD(){}
	CMD(char c, int x, int y):c(c),x(x),y(y){}
};

int main() {
	int n;
	sf("%d",&n);
	init();
	vector<CMD> cmd;
	set<int> fff;
	fr(i,0,n) {
		char c[10];
		int x,y;
		sf("%s %d%d",c,&x,&y);
		if(x>y)swap(x,y);
		cmd.pb( CMD(c[0],x,y));
		fff.insert(x);
	}
	for(auto x :fff) {
		id_x[x]=cnt++;
	}

	fr(i,0,n) {
		int x = cmd[i].x;
		int y = cmd[i].y;
		if(cmd[i].c=='+') {
			add(x,y);
		}
		else {
			int ret = query(x,y);
			if(ret)printf("YES\n");
			else printf("NO\n");
		}
	}
	/*
	for(int i = 1; i <=max_x; ++i) {
		for(int j = 1; j <=max_x; ++j) {
			int ok = 1;
			for(int k = 0; k < n; ++k) {
				if(cmd[k].c=='+') {
					int x = cmd[k].x;
					int y = cmd[k].y;
					if((x<=i&&y<=j)||(x<=j&&y<=i)) {
						continue;
					}
					ok = 0;
					break;
				}
			}
			int ret = query(i,j);
			printf("i = %d j = %d, ret = %d ok = %d\n",i,j, ret, ok);
			assert(ok==ret);
			if(ret)printf("YES\n");
			else printf("NO\n");
		}
	}
	*/
}