#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcountll(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

const int OO = (int) 2e9;
const double eps = 1e-9;

struct Point {
	double x, y;

	Point operator*(double rhs) {
		Point ret = *this;
		ret.x *= rhs;
		ret.y *= rhs;
		return ret;
	}

	Point operator+(Point rhs) {
		Point ret = *this;
		ret.x += rhs.x;
		ret.y += rhs.y;
		return ret;
	}

	Point operator-(Point rhs) {
		Point ret = *this;
		ret.x -= rhs.x;
		ret.y -= rhs.y;
		return ret;
	}

	Point operator/(double rhs) {
		Point ret = *this;
		ret.x /= rhs;
		ret.y /= rhs;
		return ret;
	}
};

double dist(Point a, Point b) {
	return hypot(a.x - b.x, a.y - b.y);
}

Point move(Point st, Point ed, double c) {
	Point vec = (ed - st);
//	if (dist(st, ed)) vec = vec / dist(st, ed);
	return st + vec * c;
}

double f(double c, Point Ast, Point Aed, Point Bst, Point Bed) {
	Point p = move(Ast, Aed, c), p2 = move(Bst, Bed, c);
	return dist(move(Ast, Aed, c), move(Bst, Bed, c));
}

double TS(Point Ast, Point Aed, Point Bst, Point Bed) {
	double a = 0, b = 1.0;
	double c = a + (b - a) / 3.0;
	double d = b - (b - a) / 3.0;

	int cnt = 0;
	while (fabs(b - a) > eps && cnt++ < 50) {
		if (f(c, Ast, Aed, Bst, Bed) > f(d, Ast, Aed, Bst, Bed))
			a = c;
		else
			b = d;
		c = a + (b - a) / 3.0;
		d = b - (b - a) / 3.0;
	}
	return f((a + b) / 2.0, Ast, Aed, Bst, Bed);
}

double ternary(Point Ast, Point Aed, Point Bst, Point Bed) {
	double st = 0.0, end = 1.0;
	double size = end - st;
	for (; size > eps; size = size * 2 / 3) {
		double a = st + size / 3;
		double b = st + size * 2 / 3;
		if (f(a, Ast, Aed, Bst, Bed) > f(b, Ast, Aed, Bst, Bed))
			st = a;
	}
	return f(st, Ast, Aed, Bst, Bed);
}

bool out = true;
int ans = 0, d1, d2;

void solve(Point Ast, Point Aed, Point Bst, Point Bed) {
	double st = dist(Ast, Bst);
	double mn = TS(Ast, Aed, Bst, Bed);
	double ed = dist(Aed, Bed);

	if (st <= d1 && out)
		ans++, out = false;
	if (st > d2)
		out = true;

	if (mn <= d1 && out)
		ans++, out = false;

	if (ed <= d1 && out)
		ans++, out = false;
	if (ed > d2)
		out = true;
}

int main() {
//	std::ios_base::sync_with_stdio(false);
//	cin.tie(NULL);
//	cout.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("in.txt", "rt", stdin);
//	freopen("out.txt", "wt", stdout);
#endif

	int n;
	scanf("%d %d %d", &n, &d1, &d2);
	vector<Point> A(n), B(n);
	for (int i = 0; i < n; ++i) {
		int ax, ay, bx, by;
		scanf("%d %d %d %d", &ax, &ay, &bx, &by);
		A[i].x = ax, A[i].y = ay;
		B[i].x = bx, B[i].y = by;
	}

	for (int i = 0; i < n - 1; ++i)
		solve(A[i], A[i + 1], B[i], B[i + 1]);

	cout << ans << endl;
	return 0;
}
