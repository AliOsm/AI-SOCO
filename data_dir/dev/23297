#include <bits/stdc++.h>
using namespace std;
#define REP(i, n) for (int i = 0; i < int(n); i++)
#define FOR(i, a, b) for(int i = a; i < int(b); i++)
#define FOREACH(i, v) for (__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define SIZE(v) ((int)(v).size())
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define ll long long
#define pii pair<int, int>

const int MAX = 500500;
vector<vector<ll> > p;

// ll dist(int i, int j) {
//     return abs(pi[i][0] - p[j][0]) + abs(pi[i][1] - p[j][1]) + abs(pi[i][2] - p[j][2]);
// }


vector<ll> solve1(vector<vector<ll> >& ps) {
    int len = (int)ps.size();
    //printf("len1 = %d\n", len);
    for(int i = 0; i + 1 < len; i += 2) {
        //printf("AA\n");
        printf("%lld %lld\n", ps[i][3], ps[i + 1][3]);
        //printf("BB\n");
    }
    vector<ll> ans;
    if(len%2 == 1) ans = ps.back();
    return ans;
}


bool compare2(const vector<ll>& a, const vector<ll>& b) {
    return a[2] < b[2];
}

vector<ll> solve2(vector<vector<ll> >& ps) {
    vector<ll> ans;
    if(ps.empty()) return ans;
    int len = (int)ps.size();
    //printf("len2 = %d\n", len);
    vector<vector<ll> > l, m, r;
    int val = ps[len/2][1];
    sort(ps.begin(), ps.end(), compare2);
    REP(i, len) {
        //printf("ss = %d\n", ps[i].size());
        if(ps[i][1] < val) l.pb(ps[i]);
        else if(ps[i][1] == val) m.pb(ps[i]);
        else r.pb(ps[i]);
    }
    vector<ll> a1 = solve2(l), a2 = solve1(m), a3 = solve2(r);

    if(a1.empty()) {
        if(a2.empty()) return a3;
        if(a3.empty()) return a2;
        printf("%lld %lld\n", a2[3], a3[3]);
    }
    else {
        if(a2.empty() && a3.empty()) return a1;
        if(a2.empty()) swap(a2, a3);
        printf("%lld %lld\n", a1[3], a2[3]);
        return a3;
    }
    return ans;
}

bool compare3(const vector<ll>& a, const vector<ll>& b) {
    return a[1] < b[1];
}

vector<ll> solve3(vector<vector<ll> >& ps) {
    vector<ll> ans;
    if(ps.empty()) return ans;
    int len = (int)ps.size();
    //printf("len3 = %d\n", len);
    vector<vector<ll> > l, m, r;
    int val = ps[len/2][0];
    sort(ps.begin(), ps.end(), compare3);
    REP(i, len) {
        if(ps[i][0] < val) l.pb(ps[i]);
        else if(ps[i][0] == val) m.pb(ps[i]);
        else r.pb(ps[i]);
    }
    vector<ll> a1 = solve3(l), a2 = solve2(m), a3 = solve3(r);

    if(a1.empty()) {
        if(a2.empty()) return a3;
        if(a3.empty()) return a2;
        printf("%lld %lld\n", a2[3], a3[3]);
    }
    else {
        if(a2.empty() && a3.empty()) return a1;
        if(a2.empty()) swap(a2, a3);
        printf("%lld %lld\n", a1[3], a2[3]);
        return a3;
    }
    return ans;
}



int main() {
    int n; scanf("%d", &n);
    vector<int> S;
    p.assign(n, vector<ll>());
    REP(i, n) {
        REP(j, 3) {
            ll x; scanf("%lld", &x);
            p[i].pb(x);
        }
        p[i].pb(i + 1);
        S.pb(i);
        //printf("%d\n", p[i].size());
    }
    sort(p.begin(), p.end());
    // int len = n;

    solve3(p);

    // while(!S.empty()) {
    //     int i = S.back();
    //     S.pop_back();
    //     int j = S.back();
    //     int idx = len - 1;
    //     ll mn = dist(p[i], p[j]);
        
    //     len--;
    //     REP(r, len) {
    //         int s = S[r];
    //         ll tmp = dist(p[i], p[s]);
    //         if(mn > tmp) {
    //             mn = tmp;
    //             j = s;
    //             idx = r;
    //         }
    //     }
    //     printf("%d %d\n", p[i][3], p[j][3]);
    //     swap(S[len - 1], S[idx]);
    //     S.pop_back();
    //     len--;
    // }
}