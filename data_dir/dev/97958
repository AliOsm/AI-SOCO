#include "bits/stdc++.h"
//#include "ext/pb_ds/tree_policy.hpp"
//#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
#define EX0 exit(0);

typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}

ll twop(int x){return 1LL<<x;}

template<typename A,typename B > inline void in(A&x,B&y){in(x);in(y);}
template<typename A,typename B,typename C>inline void in(A&x,B&y,C&z){in(x);in(y);in(z);}
template<typename A,typename B,typename C,typename D> inline void in(A&x,B&y,C&z,D&xx){in(x);in(y);in(z);in(xx);}




template <class T>
void upd(T&a,T b) {
    a = max(a,b);
}

int n,k,m,a;
vector<int>vote;

struct person {
    int vote,last,id;
    bool operator<(const person&o)const{
        if(vote!=o.vote)return vote>o.vote;
        return last<o.last;
    }
};
vector<int> roll(const vector<int>&v){
    vector<person>ppl;
    REP(i,1,n+1){
        person tmp;
        tmp.vote = tmp.last = 0;
        tmp.id = i;
        ppl.PB(tmp);
    }
    REP(i,0,sz(v)){
        ppl[v[i]-1].vote++;
        ppl[v[i]-1].last = i+1;
    }
    sort(all(ppl));
    vector<int>ans;
    REP(i,0,k){
        if(ppl[i].vote)ans.PB(ppl[i].id);
    }
    return ans;
}
bool cannotWin(int id){
    auto nvote = vote;
    REP(i,0,m-a)nvote.PB(id);
    auto ans = roll(nvote);
    for(auto i:ans)if(i == id){return false;}
    return true;
}
bool cannotLose(int tots,int id){
    vector<person>ppl;
    REP(i,1,n+1){
        person tmp;
        tmp.vote = tmp.last = 0;
        tmp.id = i;
        ppl.PB(tmp);
    }
    REP(i,0,sz(vote)){
        ppl[vote[i]-1].vote++;
        ppl[vote[i]-1].last = i+1;
    }
    if(ppl[id-1].vote == 0)return false;
    if(k==n)return true;
    auto m = ppl[id-1];
    sort(all(ppl));
    vector<int>diff;
    for(auto i:ppl){
        if(i.id!=id){
            if(i<m){
                diff.PB(0);
            }else{
                diff.PB(m.vote-i.vote+1);
            }
        }
    }
    sort(all(diff));
    ll cnt = 0;
    REP(i,0,k){
        cnt+=diff[i];
    }
    if(cnt<=tots-a)return false;
    return true;
    
}
int main(){
    in(n,k,m,a);
    REP(i,0,a){
        int c;in(c);vote.PB(c);
    }
    REP(i,1,n+1){
        if(cannotWin(i))cout<<"3 ";
        else if(cannotLose(m, i))cout<<"1 ";
        else cout<<"2 ";
    }
    return 0;
}
