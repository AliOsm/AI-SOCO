//satyaki3794
#include <bits/stdc++.h>
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define LEFT(n) (2*(n))
#define RIGHT(n) (2*(n)+1)

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;

ll pwr(ll base, ll p, ll mod = MOD){
ll ans = 1;while(p){if(p&1)ans=(ans*base)%mod;base=(base*base)%mod;p/=2;}return ans;
}


ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}


int n, match[505];
vector<int> adj[505], adj2[505];
bool visited[505];


bool dfs(int v){
    for(auto vv : adj2[v])
        if(!visited[vv]){
            visited[vv] = true;
            if(match[vv] == -1 || dfs(match[vv])){
                match[vv] = v;
                return true;
            }
        }
    return false;
}


int bipartite_matching(){
    for(int i=1;i<=n;i++){
        visited[i] = false;
        match[i] = -1;
    }

    int ans = 0;
    for(int i=1;i<=n;i++)
        if(dfs(i)){
            ans++;
            memset(visited, 0, (n+1)*sizeof(visited[0]));
        }
    return ans;
}



int solve(int center){

    for(int i=1;i<=n;i++)
        adj2[i].clear();

    int ans = n-1 + n;
    //edges to and from center
    for(int i=1;i<=n;i++)
        if(i == center){
            ans -= (int)adj[i].size();
        }
        else{
            for(auto v : adj[i])
                if(v == center)
                    ans--;
        }

    int tot = 0;
    for(int i=1;i<=n;i++)
        if(i != center)
            for(auto v : adj[i])
                if(v != center){
                    adj2[i].pb(v);
                    tot++;
                }

// cout<<"adj2:\n";
// for(int i=1;i<=n;i++){
//     cout<<i<<": ";for(auto j : adj2[i])  cout<<j<<" ";cout<<endl;
// }cout<<endl;

    int temp = bipartite_matching();
    //delete edges not part of matching
    ans += tot - temp;
    //add remaining edges
    ans += (n-1) - temp;
    return ans;
}



int main(){

    ios_base::sync_with_stdio(0);
    cin.tie(0);

    int e;
    cin>>n>>e;
    while(e--){
        int a, b;
        cin>>a>>b;
        adj[a].pb(b);
    }


    int ans = MOD;
    for(int center=1;center<=n;center++){
        ans = min(ans, solve(center));
    }

    cout<<ans;
    return 0;
}




