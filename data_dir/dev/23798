#include<bits/stdc++.h>
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
using namespace std;
const ll mod=1e9+7;         
const int N=1e5+4;
int main()                  
{
    int n,m;
    scn(n);
    ll a[n];
    rep(i,0,n)
    lscn(a[i]);
    scn(m);
    ll b[m];
    rep(i,0,m)
    lscn(b[i]);
    int ans=0;
    int i=0,j=0;
    while(i<n||j<m)
    {
        ll sa=0,sb=0,flag=0;
        while(flag==0)
        {
            // condition to break
            if(i==n&&sa<sb)
            {
                pri(-1);
                return 0;
            }
            if(j==m&&sb<sa)
            {
                pri(-1);
                return 0;
            }
            //if will take any, i will always move pointer to the next
            //also it can be seen that i will take first from second array in the first turn
            //and then from first array in the second term and hence it can be seen that after 
            //ending of each while loop i will be with the fresh part to consider and the previous
            //data held for considerations in sa and sb.
            
            //sa and sb hold the current segments of array a and array b respectively.
            
            if(sa<sb)
            {
                sa+=a[i];
                i++;
                if(sa==sb)
                flag=1;
            }
            else
            {
                sb+=b[j];
                j++;
                if(sa==sb)
                flag=1;
            }
        }
        //cout<<i<<" "<<j<<endl;
        if(flag)
        ans++;
        else
        {
            pri(-1);
            return 0;
        }
    }       
    pri(ans);
}