#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <functional>
#include <iomanip>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <stack>
#include <queue>
#include <map>
#include <set>
#include <hash_set>
#include <hash_map> 
#include <algorithm>
#include <memory>

//#define NDEBUG
#include <cassert>

#define FILE_READER assert(freopen("input.txt", "r", stdin)); assert(freopen("output.txt", "w", stdout));
#define FAST_READER ios::sync_with_stdio(false); cin.tie(nullptr);
#define all_(v) (v).begin(), (v).end()
#define for_(i, a, b) for (int i = (a); i < (int)(b); i++)
#define ford_(i, a, b) for (int i = (a); i > (int)(b); i--)
#define foreach_(it,S) for(__typeof((S).begin()) it = (S).begin(); it != (S).end(); it++)
#define sz_(v) ((int)(v).size())
#define mp_ make_pair
#define pb_ push_back
typedef long long LL_;
typedef long double LD_;
template<class T> T sqr_(T a) {return a * a;}
template<class T> T abs_(T a) {return a > 0 ? a : -a;}
template<class T> T sgn_(T a) {return a > 0 ? 1 : (a < 0 ? -1 : 0);}

using namespace std;

int n, m;
vector<vector<int> > g;
vector<int> x, ans,used, color;

int getblackdfs(int v, int p) {
    used[v]=true;
    int bnode=x[v]==1?v:-1;
    for(int i = 0,sz=g[v].size();i<sz;++i){
        int to=g[v][i];
        if(to==p||used[to])continue;
        int get=getblackdfs(to,v);
        if(bnode==-1&&get!=-1){
            bnode=get;
        }
    }
    return bnode;
}

void dfs(int v, int p){
    used[v]=true;
    ans.push_back(v);
    color[v]^=1;
    for(int i = 0, sz=g[v].size(); i<sz;++i){
        int to=g[v][i];
        if(to==p||used[to])continue;
        dfs(to,v);
        ans.push_back(v);
        color[v]^=1;
        if(color[to]!=x[to]){
            ans.push_back(to);
            color[to]^=1;
            ans.push_back(v);
            color[v]^=1;
        }
    }
    if(p==-1&&color[v]!=x[v]){
        ans.pop_back(); //!!
    }
}

int main() {

//#ifndef ONLINE_JUDGE 
    //FILE_READER 
//#endif    
    //assert(freopen("input.txt", "r", stdin)); assert(freopen("output.txt", "w", stdout));

    FAST_READER;

        cin >> n >> m;
        g.resize(n, vector<int>());
        for (int i = 0; i < m; ++i) {
            int a, b;
            cin >> a >> b;
            --a,--b;
            g[a].push_back(b);
            g[b].push_back(a);
        }
        x.resize(n);
        for (int i = 0; i < n; ++i) {
            cin >> x[i];
        }
        int amt=0, blacknode=-1;
        used.resize(n,0);
        for (int i = 0; i < n; ++i) {
            if(!used[i]){
                int node=getblackdfs(i,-1);
                if(node!=-1){
                    if(blacknode==-1){
                        blacknode=node;
                    }else{
                        cout<<-1;
                        return 0;
                    }
                }
            }
        }
        if(amt>1){
            cout << -1;
            return 0;
        }
        fill(used.begin(),used.end(),0);
        color.resize(n,0);
        ans.reserve(n); //!!
        if(blacknode!=-1) {
            dfs(blacknode,-1);
        }
        n=ans.size();
        reverse(ans.begin(),ans.end());
        cout << n << endl;      
        for(int i =0 ; i< n; ++i) {
            cout << ans[i] +1 << " ";
        }
        return 0;
}