#include <sstream>
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cstdio>
#include <memory.h>
#include <set>
#include <map>
#include <cstring>
#include <cmath>
#include <fstream>

using namespace std;
const int N = 300005;
char s[5005];
int sz = 0, k;
int cnt[5001 * 5001];
int q[5001 * 5001][2];
bool dp[5005][5005];
bool is[3];
int d[5001 * 5001];
int n;
void dfs(int x) {
    d[x] = cnt[x];
    for (int i = 0; i < 2; ++i) {
        int v = q[x][i];
        if (!v) continue;
        dfs(v);
        d[x] += d[v];
    }
}
void get(int v) {
    k -= cnt[v];
    if (k <= 0) return;
    for (int i = 0; i < 2; ++i) {
        int x = q[v][i];
        if (!x) continue;
        if (d[x] >= k) {
            printf("%c", char(i + 'a'));
            get(x);
            return;
        }
        else k -= d[x];
    }
}
int go(int v, int c) {
    if (!q[v][c]) {
        q[v][c] = ++sz;
    }
    return q[v][c];
}
int main()
{
    //freopen("input.txt", "r", stdin);
    scanf("%s\n", s);
    scanf("%d", &k);
    int n = strlen(s);
    for (int i = 0; i < n; ++i) {
        int pl = i, pr = i;
        is[0] = is[1] = true;
        while (pl >= 0 && pr < n) {
            int len = (pr - pl + 1);
            len /= 2;
            len %= 2;
            if (s[pl] != s[pr]) {
                is[len] = false;
            }
            dp[pl][pr] = is[len];
            pl--; pr++;
        }
    }

    for (int i = 0; i < n - 1; ++i) {
        is[0] = is[1] = true;
        int pl = i, pr = i + 1;
        while (pl >= 0 && pr < n) {
            int len = (pr - pl + 1) / 2;
            len %= 2;
            if (s[pl] != s[pr]) {
                is[len] = false;
            }
            dp[pl][pr] = is[len];
            pl--; pr++;
        }
    }

    /*for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (dp[i][j]) {
                for (int c = i; c <= j; ++c)
                    cout << s[c];
                cout << endl;
            }
        }
    }*/


    for (int i = 0; i < n; ++i) {
        int root = 0;
        for (int j = i; j < n; ++j) {
            root = go(root, s[j] - 'a');
            if (dp[i][j]) cnt[root]++;
        }
    }
    dfs(0);
    get(0);
    printf("\n");
    return 0;
}