#include<iostream>
#include<stdio.h>
#include<algorithm>
using namespace std;

struct tree{
    tree*l,*r;
    int sum;
    tree(tree*L=0,tree*R=0,int SUM=0){
        l=L;r=R;sum=SUM;
    }
};

tree *build(int n){
    if(n==1) return new tree();
    int m=n>>1;
    return new tree(build(m),build(n-m));
}

tree*add(tree*t, int i, int x, int n){
    if(n==1) return new tree(0,0,t->sum+x);
    int m=n>>1;
    if(i<m) return new tree(add(t->l,i,x,m),t->r,t->sum+x);
    else return new tree(t->l,add(t->r,i-m,x,n-m),t->sum+x);
}

int rsq(tree*t, int i, int j, int n){
    if(i==0 && j==n-1) return t->sum;
    int s=0, m=n>>1;
    if(i<m) s+=rsq(t->l,i,min(j,m-1),m);
    if(j>=m) s+=rsq(t->r,max(0,i-m),j-m,n-m);
    return s;
}

const int T = 1e6+6;
const int N = 3e5+5;

pair<int,int> seg[N];
tree*t[T];

int main(){
    int n,m;
    scanf("%d%d",&n,&m);
    for(int i=0;i<n;++i){
        scanf("%d%d",&seg[i].first,&seg[i].second);
    }
    sort(seg,seg+n);

    int d = 1e6+2;
    tree*q = build(d);
    t[0] = q;
    for(int i=0;i<n;++i){
        int l = seg[i].first, r = seg[i].second;
        q = add(q, r, 1, d);
        t[l] = q;
    }

    for(int i=1;i<T;++i) if(!t[i]) t[i]=t[i-1];

    for(int k=0;k<m;++k){
        int c,px,ans=0;
        scanf("%d",&c);
        for(int i=0;i<=c;++i){
            int x;
            if(i<c) scanf("%d",&x); else x = d;
            if(i) ans+=rsq(t[px], px, x-1, d);
            px=x;
        }
        printf("%d\n",ans);
    }
}