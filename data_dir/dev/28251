#include <bits/stdc++.h>
using namespace std;

#define loop(i,n) for(int i = 0;i < int(n);i++)
#define rloop(i,n) for(int i = int(n);i >= 0;i--)
#define range(i,a,b) for(int i = int(a);i <= int(b);i++)
#define SZ(c) int(c.size())
#define ALL(c) c.begin(), c.end()
#define RALL(c) c.rbegin(), c.rend()
#define PI acos(-1)
#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define sfi1(v) scanf("%d",&v)
#define sfi2(v1,v2) scanf("%d %d",&v1,&v2)
#define sfi3(v1,v2,v3) scanf("%d %d %d",&v1,&v2,&v3)
#define sfll1(v) scanf("%I64d",&v);
#define sfll2(v1,v2) scanf("%I64d %I64d",&v1,&v2)
#define sfll3(v1,v2,v3) scanf("%I64d %I64d %I64d",&v1,&v2,&v3)

typedef vector<int> vi;
typedef vector<pair<int,int> > vii;
typedef long long ll;
typedef pair<int, int> pii;

const int N = 2e5 + 5;
vi adj[N];
int dp[N][2][2];
int n , ans;

int solve(int u , int p , int flag, int musthave = 0){
    int &ret = dp[u][flag][musthave];
    if(~ret)return ret;
    int addE = 1;
    for(int nxt : adj[u]){
        if(nxt == p)continue;
        addE += solve(nxt , u , 1);
    }

    if(musthave)return ret = addE;

    int dont = INT_MAX;
    if(flag == 1){
        dont = 0;
        for(int nxt : adj[u]){
            if(nxt == p)continue;
            dont += solve(nxt , u , 0);
        }
        ret = dont;
    }else{
        vi one , two;
        dont = 0;
        for(int nxt : adj[u]){
            if(nxt == p)continue;
            dont += solve(nxt , u , 0);
            one.pb(solve(nxt , u , 0));
            two.pb(solve(nxt , u , 0 , 1));
        }

        int mn = INT_MAX;
        loop(i,SZ(one)){
            mn = min(mn , dont - one[i] + two[i]);
        }
        //cout << mn << endl;
        ret = mn;
    }
    return ret = min(ret , addE);
}

int main()
{

#ifndef ONLINE_JUDGE
	//freopen("in.in", "r", stdin);
	//freopen("out.in", "w", stdout);
	//ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#endif
    memset(dp,-1,sizeof dp);
    sfi1(n);
    int a , b;
    loop(i,n-1){
        sfi2(a,b);
        adj[a].pb(b);
        adj[b].pb(a);
    }


    int ans = 0;
    for(int nxt : adj[1]){
        for(int nxtnxt : adj[nxt]){
            if(nxtnxt == 1)continue;
            ans += solve(nxtnxt,nxt,1);
        }
    }

    printf("%d\n",ans);



    return 0;
}
