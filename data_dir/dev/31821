#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef double ld;
const int MAXN = (int)1e5 + 10;
const int infint = (int)1e9;
const ll inf = (ll)1e18;
int id[MAXN], m, seg[4 * MAXN], lazy[4 * MAXN];
void upd(int node, int st, int en, int x)
{
	seg[node] += x;
	lazy[node] += x;
}
void shift(int node, int st, int en)
{
	int mid = (st + en) >> 1;
	upd(node << 1, st, mid, lazy[node]);
	upd(node << 1 | 1, mid, en, lazy[node]);
	lazy[node] = 0; //passing is done.
}
void add(int node, int st, int en, int l, int r, int x)
{
	if(l >= en || st >= r)
		return;
	if(l <= st && en <= r)
	{
		upd(node, st, en, x);
		return;
	}
	int mid = (st + en) >> 1;
	shift(node, st, en);
	add(node << 1, st, mid, l, r, x);
	add(node << 1 | 1, mid, en, l, r, x);
	seg[node] = max(seg[node << 1], seg[node << 1 | 1]);
}
int dfs(int node, int st, int en)
{
	if(en - st < 2)
		return st;
	int mid = (st + en) >> 1;
	shift(node, st, en);
	if(seg[node << 1 | 1] > 0)
		return dfs(node << 1 | 1, mid, en);
	else
		return dfs(node << 1, st, mid);
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	cin >> m;
	for (int i = 0; i < m; i++)
	{
		int p, t, val;
		cin >> p >> t;
		p--;
		if(t == 0)
			add(1, 0, m, 0, p + 1, -1);
		else
		{
			add(1, 0, m, 0, p + 1, 1);
			int val;
			cin >> val;
			id[p] = val;
		}
		if(seg[1] <= 0)
			cout << -1 << "\n";
		else
			cout << id[dfs(1, 0, m)] << "\n";
	}
}
