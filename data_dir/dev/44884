#include <cstdio>

int twoSquare[15];

int n;

int count = 0;
int depth = 0;

void init()
{
	twoSquare[0] = 1;
	for (int i = 1 ; i < 15 ; i++)
		twoSquare[i] = twoSquare[i - 1] * 2;
}

int one[15];
int two[15];
int three[15];

int getNumber(int num[], int d)
{
	int res = 0;
	for (int i = d - 1 ; i >= 0 ; i--)
		res = res * 2 + num[i];
	return res;
}

int a, b, c;

void doSearch(int n1, int n2, int n3, int d)
{
	if (d == depth)
	{
		//int a, b, c;
		//a = getNumber(one, d);
		if (n1 > n)
			return;
		//b = getNumber(two, d);
		if (n2 > n)
			return;
		//c = getNumber(three, d);
		if (n3 > n)
			return;
		
		if (n1 <= n2 && n2 <= n3)
		{
			if (((n1 + n2) > n3) && ((n1 + n3) > n2) && ((n2 + n3) > n1))
			{
				//printf("%d %d %d\n", a, b, c);				
				count++;
			}
		}
	}
	else
	{
		doSearch(n1 * 2 + 0, n2 * 2 + 0, n3 * 2 + 0, d + 1);
		doSearch(n1 * 2 + 0, n2 * 2 + 1, n3 * 2 + 1, d + 1);
		if (d == 0)
		{
		}
		else
		{
			doSearch(n1 * 2 + 1, n2 * 2 + 0, n3 * 2 + 1, d + 1);
			doSearch(n1 * 2 + 1, n2 * 2 + 1, n3 * 2 + 0, d + 1);
		}
	}
}

int main() {
	init();
	
	scanf("%d", &n);
	
	while (twoSquare[depth] < n)
		depth++;
		
	a = 0; b = 0; c = 0;
	doSearch(0, 0, 0, 0);
	
	
	printf("%d\n", count);
	
	return 0;
}
