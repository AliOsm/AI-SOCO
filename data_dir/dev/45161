#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int M = 1000000007;
const double PI = atan(1) * 4;
const int oo = 1000000000;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> ii;
#define pb push_back
#define all(c) (c).begin(),(c).end()
int n, l, m, fs[101], fe[101], f[101], edge[1000001];


struct matrix {
	int dp[101][101];
	matrix()
	{
		memset(dp, 0, sizeof(dp));
		for (int i = 0 ; i < m ; ++i) {
			for (int j = 0 ; j < m ; ++j) {
				dp[i][(i + j) % m] += f[j];
			}
		}
	}
	matrix operator * (matrix b)
	{
		matrix c = matrix();
		memset(c.dp, 0, sizeof c.dp);
		for (int i = 0; i < m; ++i)
			for (int j = 0; j < m; ++j)
				for (int k = 0; k < m; ++k)
					c.dp[i][j] = (c.dp[i][j] + 1LL * dp[i][k] * b.dp[k][j]) % M;
		return c;
	}

};

matrix unit() {
	matrix c = matrix();
	memset(c.dp, 0, sizeof c.dp);
	for (int i = 0; i < m; ++i) {
		c.dp[i][i] = 1;
	}
	return c;
}
matrix modPow(matrix m, int n)
{
	if ( n == 0 )
		return unit();
	matrix half = modPow(m, n / 2);
	matrix out = half * half;
	if ( n % 2 )
		out = out * m;
	return out;
}

ll ldp[101];

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#endif
	cin >> n >> l >> m;
	for (int x, i = 0; i < n; ++i) {
		scanf("%d", &x);
		x %= m;
		++fs[x];
	}
	for (int x, i = 0; i < n; ++i) {
		scanf("%d", &x);
		x %= m;
		++f[x];
		edge[i] += x;
	}
	for (int x, i = 0; i < n; ++i) {
		scanf("%d", &x);
		x %= m;
		++fe[x];
		edge[i] += x;
	}
	matrix init = matrix();
	matrix fn = modPow(init, l - 2);
	/*for (int i = 0; i < m; ++i){
		for(int j = 0 ; j < m ; j++){
			printf("%d ", fn.dp[i][j]);
		}
		puts("");
	}*/
	ll res = 0;
	for (int i = 0; i < m; ++i) {
		for (int j = 0 ; j < m ; j++) {
			ldp[(j+i)%m] = (ldp[(j+i)%m]+1ll*fs[i]*fn.dp[i][(j+i)%m])%M;
		}
	}
	for (int j = 0; j < n; ++j) {
		int cur = edge[j] % m;
		if (!cur)
			cur = m;
		res = (res + 1LL * ldp[m - cur]) % M;
	}
	cout << res << endl;
	return 0;
}