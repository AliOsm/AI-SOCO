#pragma GCC optimize("O3")
#include<queue>
#include <cmath>
#include <complex>
#include<map>
#include <string>
#include<iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <string>
#include <iostream>
#include <stdio.h>
#include<bits/stdc++.h>


/*
#define x real()
#define y imag()
#define angle(a)                (atan2((a).imag(), (a).real()))
#define vec(a,b)                ((b)-(a))
#define same(p1,p2)             (dp(vec(p1,p2),vec(p1,p2)) < EPS)
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel
#define length(a)               (hypot((a).imag(), (a).real()))
#define normalize(a)            (a)/length(a)
//#define polar(r,ang)            ((r)*exp(point(0,ang)))  ==> Already added in c++11
#define rotateO(p,ang)          ((p)*exp(point(0,ang)))
#define rotateA(p,ang,about)  (rotateO(vec(about,p),ang)+about)
#define reflectO(v,m)  (conj((v)/(m))*(m))
*/

//#define pi 3.141592654
#define forr(i,a,b) for(int i=a;i<=b;i++)
#define F first
#define S second
#define input ios_base::sync_with_stdio(0);cin.tie(0);
#define NOT(x) (1^x)

const double PI  = acos(-1.0);
using namespace std;
typedef pair<double,double>pdd;
typedef long long  ll;
typedef pair<ll, ll>pii;
typedef complex<double> point;
//int x[8]={1,0,0,-1,-1,-1,1,1};
//int y[8]={0,1,-1,0,-1,1,-1,1};
const int N=1009,M=1000000;
int n,m,a[N][N],q;

struct node
{
    int val;
    pair<int,int> rt,lft,up,down;
};
node k[N][N];

void solve(int r1,int c1,int r2,int c2,int h,int w)
{

    pair<int,int> x={0,0},y={0,0};
    forr(i,1,c1)x=k[x.F][x.S].rt;
    forr(i,1,r1)x=k[x.F][x.S].down;

    forr(i,1,c2)y=k[y.F][y.S].rt;
    forr(i,1,r2)y=k[y.F][y.S].down;

    forr(i,1,w)
    {
        swap(k[k[x.F][x.S].up.F][k[x.F][x.S].up.S].down,k[k[y.F][y.S].up.F][k[y.F][y.S].up.S].down);
        swap(k[x.F][x.S].up,k[y.F][y.S].up);
        if(i!=w)x=k[x.F][x.S].rt,y=k[y.F][y.S].rt;
    }
    forr(i,1,h)
    {
        swap(k[k[x.F][x.S].rt.F][k[x.F][x.S].rt.S].lft,k[k[y.F][y.S].rt.F][k[y.F][y.S].rt.S].lft);
        swap(k[x.F][x.S].rt,k[y.F][y.S].rt);
        if(i!=h)x=k[x.F][x.S].down,y=k[y.F][y.S].down;
    }
    forr(i,1,w)
    {
        swap(k[k[x.F][x.S].down.F][k[x.F][x.S].down.S].up,k[k[y.F][y.S].down.F][k[y.F][y.S].down.S].up);
        swap(k[x.F][x.S].down,k[y.F][y.S].down);
        if(i!=w)x=k[x.F][x.S].lft,y=k[y.F][y.S].lft;
    }
    forr(i,1,h)
    {
        swap(k[k[x.F][x.S].lft.F][k[x.F][x.S].lft.S].rt,k[k[y.F][y.S].lft.F][k[y.F][y.S].lft.S].rt);
        swap(k[x.F][x.S].lft,k[y.F][y.S].lft);
        if(i!=h)x=k[x.F][x.S].up,y=k[y.F][y.S].up;
    }



}
 int main()
{
//freopen("travel.in","r",stdin);
//freopen("travel.out","w",stdout);
//__builtin_popcount()
input;

      cin>>n>>m>>q;
      forr(i,1,n)
      forr(j,1,m)
      cin>>a[i][j];

      forr(i,0,n+1)
      forr(j,0,m+1)
      {
          k[i][j].val=a[i][j];
          k[i][j].rt={i,j+1};
          k[i][j].lft={i,j-1};
          k[i][j].up={i-1,j};
          k[i][j].down={i+1,j};
      }
      int r1,c1,r2,c2,h,w;
      while(q--)
      {
          cin>>r1>>c1>>r2>>c2>>h>>w;
          solve(r1,c1,r2,c2,h,w);
      }
      forr(i,1,n)
      {
          pair<int,int>s={i,0};
          forr(j,1,m)
          {
              s=k[s.F][s.S].rt;
              cout<<k[s.F][s.S].val<<" ";
          }
          cout<<endl;
      }





return 0;
}
