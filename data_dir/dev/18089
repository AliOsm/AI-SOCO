#include <bits/stdc++.h>
using namespace std;
typedef long long LL;


struct Fraction {
  LL _gcd(LL a, LL b) {
    if (a == 0 or b == 0) return a|b;
    return _gcd(b, a % b);
  }
  LL a, b;
  Fraction(LL _a, LL _b) : a(_a), b(_b) {
    LL g = _gcd(a, b);
    a /= g, b /= g;
  }
  Fraction& operator=(Fraction oth) {
    a = oth.a, b = oth.b;
    return *this;
  }
  Fraction operator+(Fraction oth) {
    LL lcm = b / _gcd(oth.b, b) * oth.b;
    return Fraction(lcm / b * a + lcm / oth.b * oth.a, lcm);
  }
  Fraction operator-(Fraction oth) {
    return Fraction(a * oth.b - b * oth.a, oth.b * b);
  }
};

class Solution {
  LL n, nextPrime, prevPrime;
  bool isPrime(int x) {
    for (int i = 2; i * i <= x; ++i) if (x % i == 0) return false;
    return true;
  }
public:
  void run(istream &in, ostream &out) {
    Fraction ans(0, 1);
    in >> n;
    nextPrime = n + 1;
    prevPrime = n;
    while (not isPrime(nextPrime)) ++nextPrime;
    while (not isPrime(prevPrime)) --prevPrime;
    ans = ans + Fraction(1, 2) - Fraction(1, prevPrime);
    ans = ans + Fraction(n - prevPrime + 1, nextPrime * prevPrime);
    out << ans.a << '/' << ans.b << '\n';
  }
};

int main() {
  ios::sync_with_stdio(0); cin.tie(0);
  int T; cin >> T;
  for (int i = 0; i < T; ++i)
    Solution().run(cin, cout);
};
