#include<bits/stdc++.h>
using namespace std;
long long a,n,l,BITree[2000006],q,le,ri,mid,ans;
long long getSum(long long index) 
{ 
    long long sum = 0;
    while (index>0) 
    { 
        sum += BITree[index]; 
          index -= index & (-index); 
    } 
    return sum; 
} 
void updateBIT(long long index, long long val) 
{ 
    while (index <= 1000006) 
    { 
    BITree[index] += val; 
    index += index & (-index); 
    } 
} 
int main() {
           ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);
           cin>>n>>q;
           for(long long i=1;i<=n;i++) {
                      cin>>a;
                      updateBIT(a,1);
           }
           while(q--) {
                      cin>>a;
                      if(a>0) updateBIT(a,1);
                      else {
                                 a=(-a);
                                 le=1; ri=1000006; ans=0;
                                 while(le<=ri) {
                                            mid=(le+ri)/2;
                                            //cout<<mid<<"-";
                                            if(getSum(mid)>=a) { ri=mid-1; ans=mid; }
                                            else le=mid+1;
                                           // cout<<ans<<endl;
                                 }
                                // cout<<ans<<endl;
                                 updateBIT(ans,-1);
                      }
           }
           if(getSum(1000000)==0) { cout<<0<<endl; return 0; } 
           le=1; ri=1000006; ans=0;
           while(le<=ri) {
                      mid=(le+ri)/2;
                      if(getSum(mid)>0) { ri=mid-1; ans=mid; }
                      else le=mid+1;
           }
           if(ans==0) { cout<<0<<endl; return 0; }
           for(long long i=ans;i>=0;i--)
           if(BITree[i]) { cout<<i<<endl; return 0; }
}