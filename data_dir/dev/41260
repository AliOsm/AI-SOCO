#include <bits/stdc++.h>

#define MOD 1000000007

using namespace std;

string s;
int twin[777];
long long dp[777][777][3][3];

long long memo(int ff, int ss, int a, int b) {
	if(ss < ff) return 1;
	if(dp[ff][ss][a][b] != -1) return dp[ff][ss][a][b];
	if(twin[ff] == ss) {
		if(a == 0 && b == 0) return 0;
		if(a > 0 && b > 0) return 0;
		if(a > 0) {
			if(ff+1 == ss) return 1;
			else {
				long long TMP = 0;
				for(int i=0; i<3; i++) for(int j=0; j<3; j++)
					if(i != a) TMP = (TMP + memo(ff+1, ss-1, i, j)) % MOD;
				return dp[ff][ss][a][b] = TMP;
			}
		}
		else {
			if(ff+1 == ss) return 1;
			else {
				long long TMP = 0;
				for(int i=0; i<3; i++) for(int j=0; j<3; j++)
					if(j != b) TMP = (TMP + memo(ff+1, ss-1, i, j)) % MOD;
				return dp[ff][ss][a][b] = TMP;
			}
		}
	}
	if(twin[ff]+1 == twin[ss]) {
		if(a == 0 && b == 0) {
			long long TMP = 0;
			for(int i=1; i<3; i++) for(int j=1; j<3; j++) 
				if(i!= j) TMP = (TMP + ( memo(ff, twin[ff], a, i) * memo(twin[ss], ss, j, b) ) % MOD ) % MOD;
			return dp[ff][ss][a][b] = TMP;
		}
		else if(a > 0 && b == 0) {
			long long TMP = 0;
			for(int i=0; i<3; i++) for(int j=1; j<3; j++) {
				if(i == 0) TMP = (TMP + ( memo(ff, twin[ff], a, i) * memo(twin[ss], ss, j, b) ) % MOD ) % MOD;
				else if(i != j) TMP = (TMP + ( memo(ff, twin[ff], a, i) * memo(twin[ss], ss, j, b) ) % MOD ) % MOD;
			}
			return dp[ff][ss][a][b] = TMP;
		}
		else if(a == 0 && b > 0) {
			long long TMP = 0;
			for(int i=1; i<3; i++) for(int j=0; j<3; j++) {
				if(j == 0) TMP = (TMP + ( memo(ff, twin[ff], a, i) * memo(twin[ss], ss, j, b) ) % MOD ) % MOD;
				else if(i != j) TMP = (TMP + ( memo(ff, twin[ff], a, i) * memo(twin[ss], ss, j, b) ) % MOD ) % MOD;
			}
			return dp[ff][ss][a][b] = TMP;
		}
		else if(a > 0 && b > 0) {
			long long TMP = 0;
			for(int i=0; i<3; i++) for(int j=0; j<3; j++) {
				if(i == 0 || j == 0) TMP = (TMP + ( memo(ff, twin[ff], a, i) * memo(twin[ss], ss, j, b) ) % MOD ) % MOD;
				else if(i != j) TMP = (TMP + ( memo(ff, twin[ff], a, i) * memo(twin[ss], ss, j, b) ) % MOD ) % MOD;
			}
			return dp[ff][ss][a][b] = TMP;
		}
	}
	if(a == 0 && b == 0) {
		long long TMP = 0;
		for(int i=1; i<3; i++) for(int j=1; j<3; j++) for(int k=0; k<3; k++) for(int l=0; l<3; l++)
		if(i!=k && j!=l) TMP = (TMP + ((((memo(ff, twin[ff], a, i)*memo(twin[ff]+1, twin[ss]-1, k, l))%MOD)*memo(twin[ss], ss, j, b))%MOD) ) % MOD;
		return dp[ff][ss][a][b] = TMP;
	}
	else if(a == 0 && b > 0) {
		long long TMP = 0;
		for(int i=1; i<3; i++) for(int j=0; j<1; j++) for(int k=0; k<3; k++) for(int l=0; l<3; l++)
		if(i!=k) TMP = (TMP + ((((memo(ff, twin[ff], a, i)*memo(twin[ff]+1, twin[ss]-1, k, l))%MOD)*memo(twin[ss], ss, j, b))%MOD) ) % MOD;
		return dp[ff][ss][a][b] = TMP;
	}
	else if(a > 0 && b == 0) {
		long long TMP = 0;
		for(int i=0; i<1; i++) for(int j=1; j<3; j++) for(int k=0; k<3; k++) for(int l=0; l<3; l++)
		if(j!=l) TMP = (TMP + ((((memo(ff, twin[ff], a, i)*memo(twin[ff]+1, twin[ss]-1, k, l))%MOD)*memo(twin[ss], ss, j, b))%MOD) ) % MOD;
		return dp[ff][ss][a][b] = TMP;
	}
	else if(a > 0 && b > 0) {
		long long TMP = 0;
		for(int i=0; i<1; i++) for(int j=0; j<1; j++) for(int k=0; k<3; k++) for(int l=0; l<3; l++)
			TMP = (TMP + ((((memo(ff, twin[ff], a, i)*memo(twin[ff]+1, twin[ss]-1, k, l))%MOD)*memo(twin[ss], ss, j, b))%MOD) ) % MOD;
		return dp[ff][ss][a][b] = TMP;
	}
}

void get_twin() {
	stack <int> st;
	for(int i=0; i<s.size(); i++) {
		if(s[i] == '(') st.push(i);
		else {
			int j = st.top();
			st.pop();
			twin[i] = j;
			twin[j] = i;
		}
	}
}

int main() {
	memset(dp, -1, sizeof dp);
	cin >> s;
	get_twin();
	long long ans = 0;
	for(int i=0; i<3; i++) for(int j=0; j<3; j++) ans = (ans + memo(0, s.size()-1, i, j)) % MOD;
	cout << ans << endl;
	return 0;
}

