/*==============================================*\
ID:          shahidul_brur
 
 Name:     Md. Shahidul Islam
 
 Youtube: youtube.com/shahidulbrur
 mail: shahidul.cse.brur@gmail.com
 FB  : fb.com/shahidul.brur
 FB page: fn.com/shahidul.tutorial

 Blog: shahidul-brur.blogspot.com(in Bengali),
       shahidul-brur-en.blogspot.com(in English)
\*===============================================*/
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace __gnu_pbds;
using namespace std;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const int maxn = 300005;
int ara[maxn], cnt[maxn], n, m;
struct query{
    int idx, L, R;
    query(int _idx, int _L, int _R){
        idx = _idx;
        L = _L;
        R = _R; 
    }
};
vector<query> Q;
bool cmp(query a, query b)
{
    int sq = sqrt(n);
    if(a.L/sq==b.L/sq)
        return a.R<b.R;
    return (a.L/sq<b.L/sq);
}
int total;

void add(int idx)
{
    cnt[ara[idx]]++;
    if(cnt[ara[idx]]==1)
        total++;
}

void del(int idx)
{
    cnt[ara[idx]]--;
    if(cnt[ara[idx]]==0)
        total--;
}

int last[maxn];
int mini[maxn], maxi[maxn];
int main()
{
    ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);
    cin>>n>>m;
    for(int i=1;i<=n;i++) {
        mini[i] = i;
        maxi[i] = i;
    }
    ordered_set os;
    memset(last, -1, sizeof(last));
    for(int i=0;i<m;i++) {
        cin>>ara[i];
        os.insert(ara[i]);
        mini[ara[i]] = 1;
        if(last[ara[i]]==-1){
            int bigger = os.size() - os.order_of_key(ara[i]+1);
            maxi[ara[i]] = max(maxi[ara[i]], ara[i]+bigger);
        }
        else{
            Q.push_back(query(ara[i], last[ara[i]], i));
        }
        last[ara[i]]=i;
    }
    for(int i=1;i<=n;i++){
        if(last[i]==-1){
            int bigger = os.size() - os.order_of_key(i+1);
            maxi[i] = max(maxi[i], i+bigger);
        }
        else Q.push_back(query(i, last[i], m-1));
    }
    sort(Q.begin(), Q.end(), cmp);
    int curL = 0, curR = -1;
    total = 0;
    int q=Q.size();
    for(int i = 0; i<q;i++)
    {
        int l, r, idx;
        idx = Q[i].idx;
        l = Q[i].L;
        r = Q[i].R;
        while(curL<l)
            del(curL++);
        while(curL>l)
            add(--curL);
        while(curR<r)
            add(++curR);
        while(curR>r)
            del(curR--);
        maxi[idx] = max(maxi[idx], total);
    }
    for(int i=1;i<=n;i++){
        cout << mini[i] << " " << maxi[i] << "\n";
    }
    return 0;
}