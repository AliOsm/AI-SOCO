#include <bits/stdc++.h>
using namespace std;
 
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define int long long

const int N=1e6+5;

struct Gaussian
{
	int no_of_bits = 32;
	vector<int> v;
	int set, origsize=0, redsize=0;

	void push(int val)
	{
		origsize++;
		if(val)
			v.push_back(val);
	}

	void clear()
	{
		v.clear(); 
		set=0, redsize=0;
	}

	void eliminate()
	{
		set = redsize = 0;
		for(int bit=0;bit<=no_of_bits;bit++)
		{
			bool check=false;
			for(int i=redsize;i<v.size();i++)
			{
				if((v[i]>>bit)&1)
				{
					swap(v[i], v[redsize]);
					check=true;
					break;
				}
			}
			if(check)
			{
				for(int i=redsize+1;i<v.size();i++)
				{
					if((v[i]>>bit)&1)
						v[i]^=v[redsize];
				}
				redsize++;
			}
		}
		v.resize(redsize);
		for(auto it:v)
			set|=it;
	}

	Gaussian& operator =(Gaussian &orig)
	{
		v = orig.v;
		set = orig.set;
		redsize = orig.redsize;
		origsize = orig.origsize;
		return *this; 
	}
};

int n, q, xorval=0;
Gaussian store[N];

int32_t main()
{
	IOS;
	cin>>n;
	for(int i=1;i<=n;i++)
	{
		int x;
		cin>>x;
		xorval^=x;
		store[i]=store[i-1];
		store[i].push(xorval);
		store[i].eliminate();
	}
	if(xorval==0)
		cout<<"-1";
	else
		cout<<store[n].redsize;
}