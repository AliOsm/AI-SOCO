#include<bits/stdc++.h>
#define pi 3.1415926535897932384626
using namespace std;
      
struct P{
  int x,y;
  bool operator < (const P &a )const{
    //if(y!=a.y)
    return y<a.y;
  };
};

int a,b,c,d,i,k,n,m,e,dx[10]={1,0,-1,0,1,1,-1,-1},dy[10]={0,1,0,-1,1,-1,1,-1};
int o[300101];
int l[1];
int j[1];

long long x,y,z,mod=1000000007;
//string r,r1;
char r[3];

P u[1];
queue<int> q;
stack<int> s;
map<int,int> p;
vector<int> v[100100],v1[200101],v2[200101],v0[200101];

bool as(P a,P b)
{
  //if(a.x==b.x)
  return a.y>b.y;
}

void dfs(int n)
{
  for(int h=0;h<v1[n].size();h++)
  if(!o[v1[n][h]])
  {
    o[v1[n][h]]=1;
    dfs(v1[n][h]);
  }
  s.push(n);
}

void rdfs(int n)
{
  for(int h=0;h<v2[n].size();h++)
  if(!o[v2[n][h]])
  {
    o[v2[n][h]]=e;
    rdfs(v2[n][h]);
  }
}

int main()
{
  scanf("%d %d",&a,&b);
  for(int t=1;t<=a;t++)
  {
    scanf("%d",&n);
    for(int w=0;w<n;w++)
    {
      scanf("%d",&m);
      v[t].push_back(m);
    }
  }
  for(int t=1;t<a;t++)
  {
    int p=0;
    for(;p<min(v[t].size(),v[t+1].size())&&v[t][p]==v[t+1][p];p++);
    if(p<min(v[t].size(),v[t+1].size()))
    {
      n=v[t][p],m=v[t+1][p];
      if(n>m)
      {
        v1[n*2+1].push_back(n*2);
        v1[m*2].push_back(m*2+1);
        v2[m*2+1].push_back(m*2);
        v2[n*2].push_back(n*2+1);
      }
      else
      {
        v1[n*2+1].push_back(m*2+1);
        v1[m*2].push_back(n*2);
        v2[m*2+1].push_back(n*2+1);
        v2[n*2].push_back(m*2);
      }
    }
    else if(v[t].size()>v[t+1].size())
    {
      puts("No");
      return 0;
    }
  }
  for(int t=2;t<=b*2+1;t++)
  if(!o[t])
  {
    o[t]=1;
    dfs(t);
  }
  memset(o,0,sizeof(o));
  for(;s.size();s.pop())
  if(!o[s.top()])
  {
    e++;
    o[s.top()]=e;
    rdfs(s.top());
  }
  for(int t=1;t<=b;t++)
  if(o[t*2]==o[t*2+1])
  {
    puts("No");
    return 0;
  }
  else if(o[t*2]>o[t*2+1]) q.push(t);
  puts("Yes");
  printf("%d\n",q.size());
  for(;q.size();q.pop())
    printf("%d ",q.front());
}

