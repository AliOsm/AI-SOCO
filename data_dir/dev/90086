#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ff first
#define ss second
#define PI 2*acos(0.0)
#define all(a) a.begin(),a.end()
#define INF (1<<28)
#define mem(a,x) memset(a,x,sizeof(a))
#define SEGMENT_TREE left=2*node,right=left+1,mid=(b+e)/2
using namespace std;


/**------------------------------------BITMASK------------------------------------------**/
//int Change(int N, int pos){return N= N^(1<<pos);}
//bool Check(int N, int pos){return (bool)(N &(1<<pos));}
/**-----------------------------------------------------------------------------------------------**/

/**-----------------------------DIRECTION_ARRAY-------------------------**/
///------FOUR_DIRECTION---------///
int fx[]={0,1,0,-1};
int fy[]={1,0,-1,0};


///------EIGHT_DIRECTION---------///
//int fx[]={0,1,1,1,0,-1,-1,-1};
//int fy[]={1,1,0,-1,-1,-1,0,1};
/**--------------------------------------------------------------------------------------**/

//int gcd(int a, int b){return (a==0)? b: gcd(b%a,a);}
//int lcm(int a, int b){return (a/gcd(a,b))*b;}


/*****int exgcd(int A, int B, int *X, int *Y){


    int x2, y2, x1, y1, x, y, r, r1, r2, q;
    x2=1; y2=0;
    x1=0; y1=1;
    for(r2=A, r1=B; r1!=0 ; r2=r1, r1=r, x2=x1, y2=y1, x1=x, y1=y){

        q=r2/r1;
        r=r2%r1;
        x=x2-(x1*q);

        y=y2-(y1*q);
    }
    *X=x2;
    *Y=y2;
    return r2;

}******/




///-----------------------------START FROM HERE--------------------------------------///

string SS[55];
int arr[2][55][55];
int n;
void bfs(int id, int x, int y){
    x--;y--;
    for(int i=0; i<n; i++){
        for(int j=0; j<n; j++)arr[id][i][j]=-1;

    }
    queue<int>Q;
    arr[id][x][y]=1;
    Q.push(x);
    Q.push(y);

    while(!Q.empty()){

        int ux=Q.front();
        Q.pop();
        int uy=Q.front();
        Q.pop();
        for(int i=0; i<4; i++){

            int vx=ux+fx[i];
            int vy=uy+fy[i];
            if(vx>=0 && vy>=0 && vx<n && vy<n && SS[vx][vy]=='0' && arr[id][vx][vy]==-1){
                arr[id][vx][vy]=1;
                Q.push(vx);
                Q.push(vy);
            }
        }


    }



}
int sq(int x){
    return x*x;

}

int main(){

    cin>>n;

    int r1,c1,r2,c2;
    cin>>r1>>c1>>r2>>c2;

    for(int i=0; i<n; i++)cin>>SS[i];

    bfs(0, r1,c1);
    bfs(1, r2, c2);
    int ans=n*n*n*n;
    for(int i=0; i<n; i++){

        for(int j=0; j<n; j++){
            if(SS[i][j]=='1')continue;
            for(int x=0; x<n; x++){
                for(int y=0; y<n; y++){
                    if(SS[x][y]=='1')continue;
                    if(arr[0][i][j]==1 && arr[1][x][y]==1){

                        int p=sq(x-i)+sq(y-j);
                        ans=min(p, ans);

                    }


                }


            }

        }

    }
    cout<<ans;

}

