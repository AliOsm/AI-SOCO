#include <algorithm>
#include <iostream>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define type(x) __typeof((x).begin())
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

const int inf = 1e9 + 143;
const long long longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 123;

const int mod = 1e9 + 7;

int n, k, d;
int f[N][N][2];

int calc(int p,int s,int taken){
    if(s > n) return 0;
    if(s == n) return taken;
    int &rev = f[p][s][taken];
    if(rev != -1)
        return rev;
    rev = 0;
    for(int i = 1; i <= k; i++){
        rev += calc(p + 1, s + i, taken || (i >= d));
        if(rev >= mod)
            rev -= mod;
    }
    return rev;
}

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    n = read();
    k = read();
    d = read();

    memset(f, -1, sizeof(f));
    cout << calc(0, 0, 0) << endl;

    return 0;
}
