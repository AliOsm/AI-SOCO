
//be naame khodaa
#include <iostream>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <string>
#include <cstdio>
#include <algorithm>
#include <set>
#include <cassert>
#include <iomanip>
#include <cstring>
#include <sstream>
using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
#define F first
#define S second
#define pb push_back

inline int in(){ int x, y; y = scanf("%d", &x); return x; }

const int N = -1;
const ll P = 998244353;

vector <ll> pq;
map <ll, int> cnt;

bool p4(ll x, ll &p){
	ll low = 1, high = 37607;
	while (high-low > 1){
		ll mid = (low+high)/2;
		if (mid*mid*mid*mid <= x)
			low = mid;
		else
			high = mid;
	}
	if (low*low*low*low == x){
		p = low;
		return true;
	}
	return false;
}

bool p3(ll x, ll &p){
	ll low = 1, high = 1259922;
	while (high-low > 1){
		ll mid = (low+high)/2;
		if (mid*mid*mid <= x)
			low = mid;
		else
			high = mid;
	}
	if (low*low*low == x){
		p = low;
		return true;
	}
	return false;
}

bool p2(ll x, ll &p){
	ll low = 1, high = 1414213563;
	while (high-low > 1){
		ll mid = (low+high)/2;
		if (mid*mid <= x)
			low = mid;
		else
			high = mid;
	}
	if (low*low == x){
		p = low;
		return true;
	}
	return false;
}

ll gcd(ll x, ll y){
	return (y == 0 ? x : gcd(y, x%y));
}

void filter(){
	vector <ll> npq;
	bool fin = true;
	ll pq1 = -1, g = -1;
	int ii = -1;
	for (pair<ll, int> pair : cnt){
		ll x = pair.F;
		for (int i = 0; i < pq.size(); i++)
			if (pq[i]%x == 0){
				ii = i;
				pq1 = pq[i];
				g = x;
				fin = false;
				break;
			}
		if (!fin) break;
	}
	if (fin) return;
	for (int i = 0; i < pq.size(); i++)
		if (i != ii)
			npq.pb(pq[i]);
	pq.swap(npq);
	cnt[pq1/g]++;
	cnt[g]++;
	filter();
}

void safi(){
	int s = pq.size();
	vector <ll> npq;
	bool fin = true;
	int ii = -1, jj = -1;
	ll pq1 = -1, pq2 = -1;
	ll g = -1;
	for (int i = 0; i < s; i++){
		for (int j = i+1; j < s; j++){
			if (pq[i] == pq[j]) continue;
			ll p = gcd(pq[i], pq[j]);
			if (p == 1) continue;
			fin = false;
			ii = i;
			jj = j;
			pq1 = pq[i];
			pq2 = pq[j];
			g = p;
			break;
		}
		if (!fin) break;
	}
	if (fin) return;
	for (int i = 0; i < s; i++)
		if (i != ii && i != jj)
			npq.pb(pq[i]);
	pq.swap(npq);
	cnt[pq1/g]++;
	cnt[g]++;
	filter();
	cnt[pq2/g]++;
	cnt[g]++;
	filter();
	safi();
}

int main(){
	int n = in();
	for (int i = 0; i < n; i++){
		ll x, p;
		cin >> x;
		if (p4(x, p))
			cnt[p] += 4;
		else if (p3(x, p))
			cnt[p] += 3;
		else if (p2(x, p))
			cnt[p] += 2;
		else
			pq.pb(x);
	}
	filter();
	safi();
	ll res = 1;
	for (pair<ll, int> pair : cnt)
		res = (res*(pair.S+1))%P;
	sort(pq.begin(), pq.end());
	int ii = 0, jj = 0;
	while (ii < pq.size()){
		while (jj < pq.size() && pq[jj] == pq[ii]) jj++;
		res = (res*(jj-ii+1))%P;
		res = (res*(jj-ii+1))%P;
		ii = jj;
	}
	cout << res << endl;
	return 0;
}

