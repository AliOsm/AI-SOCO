/*  */
#include <iostream>
#include <sstream>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <deque>
#include <bitset>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
#include <functional>
#include <iterator>
#include <iomanip>
using namespace std;
//#pragma comment(linker,"/STACK:102400000,1024000")

#define sti				set<int>
#define stpii			set<pair<int, int> >
#define mpii			map<int,int>
#define vi				vector<int>
#define pii				pair<int,int>
#define vpii			vector<pair<int,int> >
#define rep(i, a, n) 	for (int i=a;i<n;++i)
#define per(i, a, n) 	for (int i=n-1;i>=a;--i)
#define clr				clear
#define pb 				push_back
#define mp 				make_pair
#define fir				first
#define sec				second
#define all(x) 			(x).begin(),(x).end()
#define SZ(x) 			((int)(x).size())
#define lson			l, mid, rt<<1
#define rson			mid+1, r, rt<<1|1
#define getBits(x)		__builtin_popcount(x)
#define getBitIdx(x)	__builtin_ffs(x)

typedef long long LL;
const int maxn = 105;
int n, k;
char s[maxn];
bool visit[maxn];

inline bool check(int x) {
	return x>=0 && x<n && !visit[x] && s[x]!='#';
}

bool judge(int st, int ed) {
	queue<int> Q;
	int u, v;
	
	Q.push(st);
	visit[st] = true;
	memset(visit, false, sizeof(visit));
	
	while (!Q.empty()) {
		u = Q.front();
		Q.pop();
		if (u == ed) return true;
		if (check(u-k)) {
			visit[u-k] = true;
			Q.push(u-k);
		}
		if (check(u+k)) {
			visit[u+k] = true;
			Q.push(u+k);
		}
	}
	
	return false;
}

int main() {
	cin.tie(0);
	ios::sync_with_stdio(false);
	#ifndef ONLINE_JUDGE
		freopen("data.in", "r", stdin);
		freopen("data.out", "w", stdout);
	#endif
	
	scanf("%d%d", &n,&k);
	scanf("%s", s);
	int st, ed;
	
	rep(i, 0, n) {
		if (s[i] == 'G') {
			st = i;
		} else if (s[i] == 'T') {
			ed = i;
		}
	}
	
	puts(judge(st, ed) ? "YES":"NO");
	
	#ifndef ONLINE_JUDGE
		printf("time = %ldms.\n", clock());
	#endif
	
	return 0;
}
