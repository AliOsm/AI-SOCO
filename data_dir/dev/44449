#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef long double real;

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif

using namespace std;

const int MaxN = 10004, NA = -1, MaxC = 0x7F7F7F7F;

int go (int64 x, int64 a, int64 b)
{
 int res;

 if (a + b < 0)
 {
  res = go (-x, -b, -a);
  if (res != +MaxC && res != -MaxC)
   res = -res;
  return res;
 }
 if (a <= x && x <= b)
  return x;
 if (a <= (x - b) && (x - a) <= b)
  return +MaxC;
 if (a + b == 0)
  return -MaxC;

 assert (a + b > 0);
 if (x < 0 && a >= 0)
  return -MaxC;
 if (x > 0 && b <= 0)
  return -MaxC;
 if (a <= 0)
  return -MaxC;

 res = x % (a + b);
 if (res == 0)
  return +MaxC;
 if (a <= res && res <= b)
  return res;
 return -MaxC;
}

int main (void)
{
 int a, b, v, x1, x2;
 while (scanf (" %d %d %d %d", &x1, &x2, &a, &b) != EOF)
 {
  v = go (x2 - x1, a, b);
  if (v == +MaxC)
   printf ("SECOND\n");
  else if (v == -MaxC)
   printf ("DRAW\n");
  else
   printf ("FIRST\n%d\n", x1 + v);
 }
 return 0;
}
