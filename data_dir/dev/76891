#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>
#include <iomanip>
#include <limits>
#include <chrono>
#include <random>
#include <array>
#include <unordered_map>
#include <functional>
#include <complex>

template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

const long long MAX = 5100000;
const long long INF = 1LL << 60;
const long long mod = 1000000007LL;
//const long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;



int main()
{
	/*
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	*/
	int t; scanf("%d", &t);
	while (t--) {
		int n, d; scanf("%d %d", &n, &d);
		int mx = n * (n - 1) / 2;
		int mn = 0;
		
		for (ll i = 1; i <= n; i++) {
			ll tmp = i;
			while (tmp > 1) {
				tmp /= 2;
				mn++;
			}
		}
		if (d < mn || mx < d) {
			puts("NO");
			continue;
		}
		puts("YES");
		ll now = mx;
		vector<int> h(n);
		for (ll i = 0; i < n; i++) h[i] = 1;
		while (now > d) {
			//cout << now << endl;
			int to = n - 1;
			while (h[to] == 0) to--;
			h[to]--;
			while (now > d && to > 1) {
				now--;
				to--;
			}
			while (h[to] >= h[to - 1] * 2) {
				to++;
				now++;
			}
			h[to]++;
		}
		vector<vector<ll>> a(n + 1);
		ll s = 1;
		for (ll i = 0; i < n; i++) {
			for (ll j = 0; j < h[i]; j++) {
				a[i].push_back(s++);
			}
		}
		vector<ll> res(n + 1);
		for (ll i = 1; i <= n; i++) {
			ll now = 0;
			for (ll j = 0; j < a[i].size(); j++) {
				//cout << a[i][j] << endl;
				res[a[i][j]] = a[i - 1][now];
				if (j % 2) now++;
			}
		}
		for (int i = 2; i <= n; i++) {
			printf("%lld", res[i]);
			if (i == n) puts("");
			else printf(" ");
		}
	}
	return 0;
}
