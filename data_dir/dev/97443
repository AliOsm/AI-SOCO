#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define read(x) scanf( "%lld" , &x )
#define forq(i , a , b) for (int i = (a); i <= (b); ++i)
#define forr(i , b) forq( i , 0 , b - 1 )
#define carr( n , array ) forr(i , n) read(array[i])
#define coutarr(n , array ) cout << "\n" ; forr (i , n) printf("%lld " , array[i]) ; cout << "\n" ;
#define F first
#define S second
#define IF ->first
#define IS ->second
#define qqmemset(array , val) memset (array , val , sizeof(array))
#define ALLV(vect) vect.begin() , vect.end()
#define sizee(vec) (ll)vec.size()

ll R = 7 + 1e9 , NUMTESTCASE ;
const int NN = 10 + 1e5 ;
const double pi = acos(-1.0) ;
int di [4] = {1 , 0 , -1 , 0} , dj [4] = {0 , 1 , 0 , -1} , DI [8] = {1 , 1 , 0 , -1 , -1 , -1 , 0 , 1} , DJ [8] = {0 , 1 , 1 , 1 , 0 , -1 , -1 , -1} ;
using namespace std;
ll a[12][NN] , indexs [12][NN] , memo [NN] , n , m , ans ;
ll dp(int ind , ll per) {
    if (ind == n + 1) return 0 ;
    if (memo[per] != -1) return memo[per] ;
    forq (i , 2 , m)
        if ( indexs[i][ a[1][ind + 1] ] - 1 != indexs[i][per] )
            return memo[per] = 1 ;
    return memo[per] = 1 + dp(ind + 1 , a[1][ind + 1]) ;
}

int main()
{
    qqmemset(memo , -1) ;
    cin >> n >> m ;
    forq (i , 1 , m)
        forq (j , 1 , n) {
            scanf("%lld" , &a[i][j]) ;
            indexs[i][a[i][j]] = j ;
        }
    forq (i , 1, n) ans += dp(i , a[1][i]) ;
    cout << ans ;
    return 0;
}
