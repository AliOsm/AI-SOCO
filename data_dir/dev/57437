#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 10;
const int INF = 1e9 + 1;
const long long mod = 1e9 + 7;

vector <int> G[N];
vector <int> G2[N];
vector <int> vs;
int used[N], cmp[N], cst[N], minc[N], rec[N];
int n, cnt;

int dfs1(int u){
	used[u] = 1;
	for (int i = 0; i < G[u].size(); i++){
		if (!used[G[u][i]])
			dfs1(G[u][i]);
	}
	vs.push_back(u);
}

int dfs2(int u){
	used[u] = 1;
	cmp[u] = cnt;
	for (int i = 0; i < G2[u].size(); i++){
		if (!used[G2[u][i]])
			dfs2(G2[u][i]);
	}
}

int main(){
	int m, u, v;
	long long allc, ways;
	scanf("%d",&n);
	for (int i = 1; i <= n; i++)
		scanf("%d",&cst[i]);
	scanf("%d",&m);
	for (int i = 1; i <= m; i++){
		scanf("%d %d",&u,&v);
		G[u].push_back(v);
		G2[v].push_back(u);
	}
	memset(used, 0, sizeof(used));
	for (int i = 1; i <= n; i++){
		if (!used[i])
			dfs1(i);
	}
	memset(used, 0, sizeof(used));
	cnt = 0;
	for (int i = n - 1; i >= 0; i--){
		if (!used[vs[i]]){
			cnt++;
			dfs2(vs[i]);
		}
	}
	for (int i = 1; i <= cnt; i++)
		minc[i] = INF;
	for (int i = 1; i <= n; i++)
		minc[cmp[i]] = min(minc[cmp[i]], cst[i]);
	memset(rec, 0, sizeof(rec));
	for (int i = 1; i <= n; i++){
		if (minc[cmp[i]] == cst[i])
			rec[cmp[i]]++;
	}
	allc = 0;
	ways = 1;
	for (int i = 1; i <= cnt; i++){
		allc += minc[i];
		ways *= rec[i];
		ways %= mod;
	}
	printf("%I64d %I64d\n",allc,ways);
	return 0;
}