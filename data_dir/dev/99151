#include<bits/stdc++.h>
using namespace std;
#define togglebit(n,x) n^=1<<x
#define ll long long
vector<int> adj[500005];
int col[500005],cnt[500005],sz[500005],level[500005],res[500005];
bool big[500005];
vector<int> Q[500005];
char s[500005];
void dfs(int v,int p)
{
    level[v]=level[p]+1;
    sz[v]=1;
    for(auto u:adj[v])
        if(u!=p)
    {
        dfs(u,v);
        sz[v]+=sz[u];
    }
}
void add(int v, int p, int x){
    togglebit(cnt[level[v]],col[v]);
    for(auto u: adj[v])
        if(u != p && !big[u])
            add(u, v, x);
}
void dfs(int v, int p, bool keep){
    int mx = -1, bigChild = -1;
    for(auto u : adj[v])
       if(u != p && sz[u] > mx)
          mx = sz[u], bigChild = u;
    for(auto u : adj[v])
        if(u != p && u != bigChild)
            dfs(u, v, 0);  // run a dfs on small childs and clear them from cnt
    if(bigChild != -1)
        dfs(bigChild, v, 1), big[bigChild] = 1;  // bigChild marked as big and not cleared from cnt
    add(v, p, 1);
    for(auto i:Q[v])
        if(__builtin_popcount(cnt[res[i]])<2)
            res[i]=1;
        else
            res[i]=0;
    //now cnt[c] is the number of vertices in subtree of vertice v that has color c. You can answer the queries easily.
    if(bigChild != -1)
        big[bigChild] = 0;
    if(keep == 0)
        add(v, p, -1);
}
int main()
{
    int n,i,u,v,m;
    scanf("%d%d",&n,&m);
    for(i=2;i<=n;i++)
    {
        scanf("%d",&u);
        adj[i].push_back(u);
        adj[u].push_back(i);
    }
    scanf("%s",s);
    for(i=0;s[i];i++)
        col[i+1]=s[i]-'a';
    for(i=1;i<=m;i++)
    {
        scanf("%d%d",&u,&v);
        Q[u].push_back(i);
        res[i]=v;
    }
    dfs(1,0);
    dfs(1,0,0);
    for(i=1;i<=m;i++)
        if(res[i])
            printf("Yes\n");
        else
            printf("No\n");
    return 0;
}
