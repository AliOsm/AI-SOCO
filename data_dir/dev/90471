#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int) 1.01e9;
const ld EPS = 1e-9;

const ld PI = acos(-1.0L);

void precalc() {
}

const int maxn = (int) 1e5 + 10;
int xs[maxn], ys[maxn];

int n;

bool read() {
  if (scanf("%d", &n) < 1) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    scanf("%d%d", xs + i, ys + i);
  }
  return 1;
}

void solve() {
  int sec = -1;
  {
    long long best = (long long) 9e18;
    int bi = -1;
    for (int i = 1; i < n; ++i) {
      int dx = xs[i] - xs[0], dy = ys[i] - ys[0];
      long long value = (long long) dx * dx + (long long) dy * dy;
      if (best > value) {
        best = value;
        bi = i;
      }
    }
    sec = bi;
  }
  int dx = ys[0] - ys[sec], dy = xs[sec] - xs[0];
  long long best = (long long) 9e18;
  int bi = -1;
  for (int i = 0; i < n; ++i) {
    long long value = (long long) (xs[i] - xs[0]) * dx + (long long) (ys[i] - ys[0]) * dy;
    if (value == 0ll) {
      continue;
    }
    value = abs(value);
    if (best > value) {
      best = value;
      bi = i;
    }
  }
  printf("%d %d %d\n", 1, sec + 1, bi + 1);
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("Time: %.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
