#include <iostream>
#include <cstdio>
#include <map>
#include <cstring>
#include <string>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <queue>
#include <set>

using namespace std;

int n;
int X[500000];
int Y[500000];
int Next[500000];
int Pr[500000];
int a1[230000];
int a2[230000];


const int INF = 1000000000;
int ans;

void upd(int val) {
    while (val % 2 == 0) {
        val /= 2;
    }
    ans = min(ans, val);
}

void go(int v, int p, int h) {
    a2[v] = -INF;
    a1[v] = INF;
    for (int i = Pr[v]; i; i = Next[i]) {
        if (Y[i] != p) {
            go(Y[i], v, h + 1);
            a1[v] = min(a1[v], a1[Y[i]] + 1);
            a2[v] = max(a2[v], a2[Y[i]] + 1);
        }
    }
    if (a1[v] == INF) {
        a1[v] = a2[v] = 0;    
    }
}

void calc(int v, int p, int u1) {    
  //  cout << v << " " << a1[v] << " " << a2[v] << endl;
    int bads = 0, ch = 0;
    for (int i = Pr[v]; i; i = Next[i]) {
        if (Y[i] != p) {            
            ch++;
            if (a1[Y[i]] != a2[Y[i]]) {
                bads++;
                continue;
            }
        }
    }
    if (ch == 0) {
        upd(u1);
        return;
    }
    if (bads > 1) {
        return;
    }
    if (bads == 1) {
        for (int i = Pr[v]; i; i = Next[i]) {
            if (Y[i] != p) {                            
                if (a1[Y[i]] != a2[Y[i]]) {
                    continue;
                }
                if (u1 == 0) {
                    u1 = a1[Y[i]] + 1;
                } else
                if (a1[Y[i]] + 1 != u1) {
                    return;
                }
            }
        }
        for (int i = Pr[v]; i; i = Next[i]) {
            if (Y[i] != p) {                            
                if (a1[Y[i]] != a2[Y[i]]) {
                    calc(Y[i], v, u1 + 1);
                }                
            }
        }        
        return;
    }
    vector<pair<int, int> > dist;
    if (v != 1) {
        dist.push_back(make_pair(u1, 1));    
    }
    for (int i = Pr[v]; i; i = Next[i]) {
        if (Y[i] != p) {   
            int ok = 0;                         
            for (int j = 0; j < dist.size(); j++) {
                if (a1[Y[i]] + 1 == dist[j].first) {
                    dist[j].second++;
                    ok = 1;
                }
            }
            if (!ok) {
                dist.push_back(make_pair(a1[Y[i]] + 1, 1));
                if (dist.size() > 2) {
                    return;
                }
            }
        }
    }    
    int sm = 0;
    for (int j = 0; j < dist.size(); j++) {
        sm += dist[j].first;
    }
    upd(sm);
    for (int i = Pr[v]; i; i = Next[i]) {
        if (Y[i] != p) {               
            for (int j = 0; j < dist.size(); j++) {
                if (a1[Y[i]] + 1 == dist[j].first) {
                    dist[j].second--;                    
                }
            }
            int u1 = -1, ok = 0;
            for (int j = 0; j < dist.size(); j++) {
                if (dist[j].second > 0) {
                    if (u1 == -1) {
                        ok = 1;
                        u1 = dist[j].first + 1;
                    } else {
                        ok = 0;
                    }
                }
            }
            if (ok) {
                calc(Y[i], v, u1);
            } else {
                if (v == 1 && u1 == -1) {
                    calc(Y[i], v, 1);
                }
            }
            for (int j = 0; j < dist.size(); j++) {
                if (a1[Y[i]] + 1 == dist[j].first) {
                    dist[j].second++;                    
                }
            }
        }
    }
    
}

int main() {
    ios_base::sync_with_stdio(false);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
    cin >> n;
    for (int i = 1; i < n; i++) {
        cin >> X[i] >> Y[i];
        X[i + n - 1] = Y[i];
        Y[i + n - 1] = X[i];
    }
    for (int i = 1; i <= n + n - 2; i++) {        
        Next[i] = Pr[X[i]];
        Pr[X[i]] = i;
    }


    ans = INF;
    go(1, 0, 0);
    calc(1, 0, 0);

    if (ans == INF) {
        ans = -1;
    }
    cout << ans << endl;    

	return 0;
}