#include <bits/stdc++.h>
using namespace std;
#define For(i, a, b)	for(int (i) = (a); (i) < (b); ++ (i))
#define rof(i, a, b)	for(int (i) = (a); (i) > (b); -- (i))
#define rep(i, c)	for(auto &(i) : (c))
#define x	first
#define y	second
#define pb	push_back
#define PB	pop_back()
#define L(x)	((x) << 1)
#define R(x)	(L(x) + 1)
#define	iOS	ios::sync_with_stdio(false)
#define all(v)	(v).begin(), (v).end()
#define error(x)	cerr << #x << " = " << (x) << endl
#define Error(x, y)	cerr << "(" << #x << ", " << #y << ") = (" << (x) << ", " << (y) << ")" << endl
typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
const int maxn = 4000 + 100, maxk = 810;
int best[maxn][maxk], dp[maxn][maxk];
int khc[maxn][maxn], tot[maxn][maxn], n, k;
int main(){
	scanf("%d %d", &n, &k);
	For(i,0,n){
		int sum = 0;
		For(j,0,n){
			int x = (getchar(), getchar()) - '0';
			sum += x;
			khc[i][j] = sum;
		}
	}
	For(i,0,n)
		For(j,i,n)
			tot[i][j] = (j ? tot[i][j-1] : 0) + khc[j][j] - (i ? khc[j][i-1] : 0);
	For(i,0,n)
		dp[i][1] = tot[0][i], best[i][1] = 0;
	For(j,2,k+1)
		rof(i,n-1,-1){
			dp[i][j] = 1e9 + 7;
			For(x,max(0, best[i][j-1]), min(i + 1, (i + 1 == n ? n : best[i+1][j] + 1))){
				int d = (x ? dp[x-1][j-1] : 0) + tot[x][i];
				if(dp[i][j] > d)
					dp[i][j] = d, best[i][j] = x;
			}
		}
	cout << dp[n-1][k] << endl;
	return 0;
}
