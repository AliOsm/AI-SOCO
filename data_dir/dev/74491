#pragma GCC optimize("Ofast")
#define _CRT_SECURE_NO_DEPRECTATED
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES

#include <bits/stdc++.h>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;

const int INF = (int)(1e9 + 1337);
const int64 LINF = (int64)(4e18);
const double EPS = 1e-11;
#define sq(x) ((x)*(x))
#define FAIL() ((*(int*)0)++)

const int MAXN = 100;
string pass[MAXN];
int mas[3] = {0, 1, 2};
int n, m;
int res(int id, int q)
{
	int ans = 10000;
	if (q == 0)
	{
		for(int i = 0; i < m; ++i)
		{
			if (pass[id][i] >= '0' && pass[id][i] <= '9')
				ans = min(ans, min(i, m - i));
		}
	}
	if (q == 1)
	{
		for(int i = 0; i < m; ++i)
		{
			if (pass[id][i] >= 'a' && pass[id][i] <= 'z')
				ans = min(ans, min(i, m - i));
		}
	}
	if (q == 2)
	{
		for(int i = 0; i < m; ++i)
		{
			if (pass[id][i] == '#' || pass[id][i] == '*' || pass[id][i] == '&')
				ans = min(ans, min(i, m - i));
		}
		//cerr << ans << endl;
	}
	return ans;
}
void solve()
{
	cin >> n >> m;
	for(int i = 0; i < n; ++i)
	{
		cin >> pass[i];
	}
	int ans = INF;
	for(int i = 0; i < n; ++i)
	{
		for(int j = i + 1; j < n; ++j)
		{
			for(int k = j + 1; k < n; ++k)
			{
				sort(mas, mas + 3);

				do
				{
					ans = min(ans, res(i, mas[0]) + res(j, mas[1]) + res(k, mas[2]));
				}
				while(next_permutation(mas, mas + 3));
			}
		}
	}
	cout << ans;
}

int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
	freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#endif

	solve();

	return 0;
}
