#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define se second
#define pi 2*acos(0)
#define PI 3.14159265358979323846264338

typedef long long ll;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;
const int N = 1010;

inline int in() {int x; scanf("%d",&x); return x;}
inline ll lin() {ll x; scanf("%I64d",&x); return x;}

vector < int > G[N];
stack < int > dfs_stack;

int timer, no_scc;
int disc[N], low[N], in_set[N];

int path[105][105];

int MX;
int ok;

vector < int > store;

void Tarjan(int u){
    disc[u] = ++timer;
    low[u] = disc[u];
    dfs_stack.push(u); in_set[u] = 1;
    for(int i = 0;i < (int)G[u].size(); ++i){
        int v = G[u][i];
        if(low[v] == -1){
            Tarjan(v);
            low[u] = min(low[u] , low[v]);
        }else if(in_set[v] == 1){
            low[u] = min(low[u] , disc[v]);
        }
    }
    if(disc[u] == low[u]){
        //printf("SCC : ");
        int x, cnt = 0;
        while(!dfs_stack.empty() && dfs_stack.top() != u){
            x = dfs_stack.top();
            dfs_stack.pop();
           // printf("%d ",x);
            in_set[x] = 0;
            cnt++;
        }
        x = dfs_stack.top();
        dfs_stack.pop();
       // printf("%d\n",x);
        in_set[x] = 0;
        cnt++;

        if(cnt == 1){
            if(path[x][x] == 0){
                ok = -1;
            }
        }

        if(cnt % 2 == 0) cnt /= 2;

        //MX = max(MX, cnt);

        store.pb(cnt);
    }
}

int main(){
    int n = in();
    for(int i = 1;i <= n; i++){
        int v = in();
        G[i].pb(v);
        path[i][v] = path[v][i] = 1;
    }

    for(int i = 0;i <= N; ++i){
        disc[i] = 0; low[i] = -1;
        in_set[i] = 0;
    }

    timer = 0; MX = 0; ok = 1;
    for(int i = 1;i <= n; i++){
        if(low[i] == -1){
            Tarjan(i);
        }
    }

    if(ok == -1) MX = -1;

    if(ok == -1) {
        printf("%d\n",MX);
        return 0;
    }

    int ans = 1;
    for(int i = 0;i < store.size(); i++){
        int x = store[i];

        int xx = __gcd(ans , x);
        ans = ans * x;

        ans /= xx;
    }

    printf("%d\n",ans);

    for(int i = 0;i <= n; ++i) G[i].clear();
    while(!dfs_stack.empty()) dfs_stack.pop();
}
