// upsolve with Dukkha
#include <algorithm>
#include <iostream>

using namespace std;

const int N = 100000, M = N - 1;

int oo[1 + M], oj[1 + M];

int link(int o, int j) {
	static int _ = 1;
	oo[_] = o, oj[_] = j;
	return _++;
}

int ae[N];
int hh[N + 1];

int dfs(int i) {
	int k = 0;
	for (int o = ae[i]; o; o = oo[o]) {
		int j = oj[o];
		k += dfs(j);
	}
	if (k == 0)
		k = 1;
	hh[k]++;
	return k;
}

int ans[N + 1];

int main() {
	int n; cin >> n;
	for (int j = 1; j < n; j++) {
		int i; cin >> i, i--;
		ae[i] = link(ae[i], j);
	}
	dfs(0);
	int h = n;
	for (int k = n; k >= 1; k--)
		while (hh[k]--)
			ans[h--] = k;
	for (int h = 1; h <= n; h++)
		cout << ans[h] << ' ';
	cout << '\n';
	return 0;
}
