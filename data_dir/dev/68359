#include <bits/stdc++.h>
#ifdef BUG
  #include "debug.hpp"
#else
  #define DEBUG(var)
#endif

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class FwdIter> inline auto
dump(FwdIter first, FwdIter last, const char * dlm = " ") -> void {
typedef typename iterator_traits<FwdIter>::value_type value_type;
copy(first, last, ostream_iterator<value_type>(cout, dlm)); }
template<typename T> vector<T> & operator--(vector<T> & a)
{ for(auto & i: a) --i; return a; }
/* @@@ ----------------------------------- */

size_t
solve(const size_t r,
      const vector<int> & op,
      const vector<vector<size_t>> & adj,
      vector<size_t> & pick) {
  if (adj[r].empty()) // leaf
    return 1;
  if (op[r] == 0) {  // min op
    size_t out = 0;
    for (const auto i: adj[r]) {
      out += solve(i, op, adj, pick);
    }
    return out;
  }
  // max op
  size_t out = -1;
  for (const auto i: adj[r]) {
    out = min(out, solve(i, op, adj, pick));
  }
  return out;
}

int main(const int argc, char **argv) {
  ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
  size_t n;
  cin >> n;
  vector<int> op(n);
  cin >> op;
  vector<size_t> par(n, -1);
  vector<vector<size_t>> adj(n);
  for (size_t i = 1; i < n; ++i) {
    cin >> par[i];
    adj[--par[i]].push_back(i);
  }
  size_t k = 0;
  for (const auto & v: adj) {
    k += v.empty();
  }
  vector<size_t> pick(n, -1);
  cout << k - solve(0, op, adj, pick) + 1;
  return EXIT_SUCCESS;
}
