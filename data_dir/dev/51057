//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef cc_hash_table<int,int,hash<int>> ht;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e3 + 5;
const double eps = 1e-9;
int sz[MAXN], ind[MAXN];
vi ch[MAXN];
set<int> adj[MAXN];
bool vis[MAXN];
vi a;
vii b;

int ask(vi s, vi t, int v) {
    pri(s.size());
    for (int u: s)
        printf("%d ", u);
    enl;
    pri(t.size());
    for (int u: t)
        printf("%d ", u);
    enl;
    pri(v);
    fflush(stdout);
    int ret;
    scanf("%d", &ret);
    return ret;
}

void dfs2(int u) {
    sz[u] = 1;
    vis[u] = 1;
    a.pb(u);
    for (int v: adj[u]) {
        if (vis[v])
            continue;
        vis[v] = 1;
        ch[u].pb(v);
        dfs2(v);
        sz[u] += sz[v];
    }
}

void dfs1(int u, int p) {
    dfs2(u);
    int nxId = u;
    while (!ch[nxId].empty()) {
        int nx = ch[nxId][0];
        for (int v: ch[nxId])
            if (sz[v] > sz[nx])
                nx = v;
        if (sz[nx] * 2 <= sz[u])
            break;
        nxId = nx;
    }
    for (int v: a) {
        ch[v].clear();
        sz[v] = 0;
        vis[v] = false;
    }
    a.clear();
    vi tmp;
    for (int v: adj[nxId])
        tmp.pb(v);
    int lo = 0, hi = tmp.size() - 1, ans = -1;
    while (lo <= hi) {
        vi t;
        int mi = (lo + hi) / 2;
        for (int i = 0; i <= mi; i++)
            t.pb(tmp[i]);
        int val = ask({p}, t, nxId);
        if (val <= mi)
            hi = mi - 1, ans = mi;
        else
            lo = mi + 1;
    }
    if (ans == -1) {
        for (pii nx: b) {
            adj[nx.fi].insert(nx.se);
            adj[nx.se].insert(nx.fi);
        }
        adj[nxId].insert(p);
        adj[p].insert(nxId);
        b.clear();
        return;
    }
    b.pb({nxId, tmp[ans]});
    adj[nxId].erase(tmp[ans]);
    adj[tmp[ans]].erase(nxId);
    dfs1(tmp[ans], p);
}

int main()
{
    int n;
    scanf("%d", &n);
    vi s, t;
    s.pb(1);
    for (int i = 2; i <= n; i++)
        t.pb(i);
    for (int i = 2; i <= n; i++)
        sz[i] = ask(s, t, i);
    for (int i = 2; i <= n; i++)
        ind[i] = i;
    sort(ind + 2, ind + n + 1, [](int l, int r) -> bool {
         return sz[l] > sz[r];
    });
    memset(sz, 0, sizeof sz);
    for (int i = 2; i <= n; i++)
        dfs1(1, ind[i]);
    printf("ANSWER\n");
    for (int i = 1; i <= n; i++)
        for (int v: adj[i])
            if (i < v)
                printf("%d %d\n", i, v);
    return 0;
}
