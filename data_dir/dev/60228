#define DBG 1
// chrono::system_clock::now().time_since_epoch().count()
#include<bits/stdc++.h>
//#include<ext/pb_ds/tree_policy.hpp>
//#include<ext/pb_ds/assoc_container.hpp>

#define pb push_back
#define eb emplace_back
#define mp make_pair
#define fi first
#define se second
#define all(x) (x).begin(), (x).end()
#define debug(x) if (BDG) cerr << #x << " = " << x << endl;

using namespace std;
//using namespace __gnu_pbds;

typedef long long ll;
typedef pair<int, int> pii;

//template<typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

const int MOD = (int)1e9 + 7;
const int MAXN = (int)1e6 + 5;

int rev[MAXN], fact[MAXN], pref[MAXN];
int dp[MAXN];
int n, k, ans;

int addMod(int a, int b, int m = MOD) {
    a += b;
    
    if (m <= a) {
        a -= m;
    }
    
    return a;
}

int mulMod(int a, int b, int m = MOD) {
    return a * 1ll * b % m;
}

int binPow(int a, int b, int m = MOD) {
    int ret = 1;
    
    while (b > 0) {
        if (b & 1) {
            ret = mulMod(ret, a, m);
        }
        
        a = mulMod(a, a, m);
        b >>= 1;
    }
    
    return ret;
}

void pre() {
    fact[0] = rev[0] = 1;
    
    for (int i = 1; i < MAXN; ++i) {
        fact[i] = mulMod(fact[i - 1], i);
    }
    
    rev[MAXN - 1] = binPow(fact[MAXN - 1], MOD - 2);
    
    for (int i = MAXN - 1; i > 0; --i) {
        rev[i - 1] = mulMod(rev[i], i);
    }
}

int C(int n, int k) {
    if (k < 0 || k > n || n < 0) {
        return 0;
    }
    
    return mulMod(fact[n], mulMod(rev[k], rev[n - k]));
}

int A(int n, int k) {
    if (k < 0 || k > n || n < 0) {
        return 0;
    }
    
    return mulMod(fact[n], rev[n - k]);
}

void solve() {
    scanf("%d %d", &n, &k);
    
    for (int i = k + 1; i <= n; ++i) {
        dp[i] = mulMod(i - k - 1, fact[i - 2]);
        int cur = addMod(pref[i - 1], MOD - pref[i - k - 1]); 
        dp[i] = addMod(dp[i], mulMod(cur, fact[i - 2]));
        pref[i] = addMod(pref[i - 1], mulMod(dp[i], rev[i - 1]));
    }
    
    for (int i = 1; i <= n; ++i) {
        int cur = mulMod(dp[i], C(n - 1, i - 1));
        cur = mulMod(cur, fact[n - i]);
        ans = addMod(ans, cur);
    }
    
    printf("%d\n", ans);
}

int main() {
	int tt = 1;
    pre();
	
	while (tt--) {
		solve();
	}

	return 0;
}

