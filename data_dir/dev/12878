#include <bits/stdc++.h>
using namespace std;
struct line{
    long long k,b;
    long long eval(long long x){
        return k*x+b;
    }
};
vector<line> q;
void add_line(long long k, long long b){
    while(q.size()>1 && (q.back().b-b)*1.0/(k-q.back().k)>=(q[q.size()-2].b-q.back().b)*1.0/(q.back().k-q[q.size()-2].k))q.pop_back();
    q.push_back({k,b});
}
int pos=0;
long long get_max(long long x){
    while(pos+1<q.size() && q[pos+1].eval(x)>q[pos].eval(x))pos++;
    return q[pos].eval(x);
}
signed main()
{
#ifdef files
	ifstream cin("input.txt");
	ofstream cout("output.txt");
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin >> n;
    vector<pair<pair<long long,long long>,long long> > v(n);
    for(int i=0; i<n; i++){
        cin >> v[i].first.first >> v[i].first.second >> v[i].second;
    }
    sort(v.begin(),v.end());
    add_line(0,0);
    vector<long long> dp(n);
    long long ans=0;
    for(int i=0; i<n; i++){
        dp[i]=get_max(v[i].first.second)+v[i].first.first*v[i].first.second-v[i].second;
        ans=max(ans,dp[i]);
        add_line(-v[i].first.first,dp[i]);
    }
    cout << ans;
}
