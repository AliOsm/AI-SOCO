#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<int, int> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;


int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	//mt19937 rng(5);
	//srand(time(0));
	
	int n, a, b, k;
	cin >> n >> a >> b >> k;
	
	vector<char> s(n + 1);
	for(int i = 1; i <= n; i++)
		cin >> s[i];
	
	int cnt = 0;
	for(int i = 1; i <= n && a > 0; i++){
		if(s[i] == '0'){
			cnt++;
			if(cnt == b){
				a--;				
				int pos = i;
				while(cnt--){
					s[pos--] = '2';
				}
				cnt = 0;
			}
		}
		else{
			cnt = 0;
		}
	}
	
	vector<int> ans;
	
	cnt = 0;
	for(int i = 1; i <= n; i++){
		if(s[i] == '0'){
			cnt++;
			if(cnt == b){
				ans.push_back(i);
				cnt = 0;
			}	
		}
		else cnt = 0;
	}
	
	cnt = 0;
	for(int i = 1; i <= n; i++){
		if(s[i] == '2'){
			cnt++;
			if(cnt == b){
				ans.push_back(i);
				break;
			}
		}
		else{
			cnt = 0;
		}
	}
		
	
	cout << ans.size() << endl;
	for(int i = 0; i < ans.size(); i++)
		cout << ans[i] << " \n"[i + 1 == ans.size()];

	return 0;
}

