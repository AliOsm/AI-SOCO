#include<bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int i = 0 ; i < n ; ++i )
#define FOR( it , A ) for( typeof A.begin() it = A.begin() ; it != A.end() ; it++ )
#define clr( t , val ) memset( t , val , sizeof(t) )

#define pb push_back
#define all( v ) v.begin() , v.end()

#define LOGN 21
#define N 100005
#define MOD 1000000007LL

typedef vector< int > vi;
typedef long long ll;

int n , timer , top;
vi E[ N ];
int dfsn[ N ] , pila[ N ] , inpila[ N ] , comp[ N ];

int dfs( int u ){
    int low = dfsn[ u ] = ++timer;
    inpila[ pila[ top ++ ] = u ] = 1;
    FOR( v , E[ u ] )
        if( dfsn[ *v ] == 0 ) low = min( low , dfs( *v ) );
        else if( inpila[ *v ] ) low = min( low , dfsn[ *v ] );
    if( low == dfsn[ u ] ){
        int fin;
        do
        {
            fin = pila[ --top ];
            inpila[ fin ] = 0;
            comp[ fin ] = u;
        }while( fin != u );
    }
    return low;
}

void SCC()
{
    clr( dfsn , 0 );
    timer = 0;
    REP( i , n ) if( !dfsn[ i ] ) dfs( i );
}

int cost[ N + 5 ] , compCost[ N + 5 ] , freq[ N + 5 ];
int main(){

    int u , v , m ;
    while( sc( n ) == 1 ){
        REP( i , n ) sc( cost[ i ] );
        REP( i , n ) E[ i ].clear();
        sc( m );
        REP( i , m ){
            sc( u ) , sc( v );
            u -- , v--;
            E[ u ].pb( v );
        }
        SCC();
        REP( i , n ) compCost[ i ] = INT_MAX;
        REP( i , n ) freq[ i ] = 0;
        REP( i , n ) compCost[ comp[ i ] ] = min( compCost[ comp[ i ] ] , cost[ i ] );
        ll ans1 = 0;
        REP( i , n ) if( comp[ i ] == i ) ans1 += compCost[ comp[ i ] ];
        
        REP( i , n ) if( compCost[ comp[ i ] ] == cost[ i ] ) freq[ comp[ i ] ]++;
        ll ans2 = 1;
        REP( i , n ) if( comp[ i ] == i ) ans2 = ( ans2 * (ll) freq[ i ] )%MOD;
        cout << ans1 << " " << ans2 << endl;
    }
}