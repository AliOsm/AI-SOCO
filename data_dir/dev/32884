#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define mod(n, m) (((n%m) + m)%m)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'

const int N = 500 + 5;

int a[N][N], b[N][N];
int n, m;

bool check()
{

	// Traverse all the diagonals
	// starting at first column
	for (int i = 0; i < n; i++)
	{
		vector<int> v1, v2;
		int r = i;
		int col = 0;

		// Traverse in diagonal
		while (r >= 0 && col < m)
		{

			// Store the diagonal elements
			v1.push_back(a[r][col]);
			v2.push_back(b[r][col]);

			// Move up
			r--;
			col++;
		}

		// Sort the elements
		sort(v1.begin(), v1.end());
		sort(v2.begin(), v2.end());

		// Check if they are same
		for (int i = 0; i < v1.size(); i++)
		{
			if (v1[i] != v2[i])
				return false;
		}
	}

	// Traverse all the diagonals
	// starting at last row
	for (int j = 1; j < m; j++)
	{
		vector<int> v1, v2;
		int r = n - 1;
		int col = j;

		// Traverse in the diagonal
		while (r >= 0 && col < m)
		{

			// Store diagonal elements
			v1.push_back(a[r][col]);
			v2.push_back(b[r][col]);
			r--;
			col++;
		}

		// Sort all elements
		sort(v1.begin(), v1.end());
		sort(v2.begin(), v2.end());

		// Check for same
		for (int i = 0; i < v1.size(); i++)
		{
			if (v1[i] != v2[i])
				return false;
		}
	}

	// If every element matches
	return true;
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> n >> m;

	rep(i, 0, n)
		rep(j, 0, m)
			cin >> a[i][j];

	rep(i, 0, n)
		rep(j, 0, m)
			cin >> b[i][j];

	if (check())
		cout << "YES\n";
	else
		cout << "NO\n";

	return 0;
}
