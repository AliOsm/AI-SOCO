#include <bits/stdc++.h>

using namespace std;

const long long mod = 1000000007;
vector<int> edge[100001], rEdge[100001];
int n, m, cost[100001], t = 0, f[100001];
bool vis[100001];

void DFS1(int node) {
    vis[node] = true;
    int size = rEdge[node].size();
    for (int i = 0; i < size; ++i) {
        int newNode = rEdge[node][i];
        if (!vis[newNode])
            DFS1(newNode);
    }
    f[++t] = node;
}

long long minNum, counter;
void DFS2(int node) {
    if (minNum > cost[node])
        minNum = cost[node], counter = 1;
    else if (minNum == cost[node])
        counter++;
    vis[node] = true;
    int size = edge[node].size();
    for (int i = 0; i < size; ++i) {
        int newNode = edge[node][i];
        if (!vis[newNode])
            DFS2(newNode);
    }
}

int main() {
//#ifndef ONLINE_JUDGE
    //freopen("test.in", "rt", stdin);
    //freopen( "test.in" , "wt" , stdout );
//#endif
    scanf("%d", &n);
    for (int i = 1; i <= n; ++i)
        scanf("%d", &cost[i]);
    scanf("%d", &m);
    int x, y;
    for (int i = 0; i < m; ++i) {
        scanf("%d%d", &x, &y);
        edge[x].push_back(y), rEdge[y].push_back(x);
    }
    for (int i = 1; i <= n; ++i) {
        if (!vis[i])
            DFS1(i);
    }
    memset(vis, false, sizeof(vis));
    long long res = 0, way = 1;
    for (int i = n; i >= 1; --i) {
        if (!vis[f[i]]) {
            counter = 1, minNum = mod, DFS2(f[i]);
            res += minNum, way *= counter, way %= mod;
        }
    }
    cout << res << " " << way << endl;
    return 0;
}
