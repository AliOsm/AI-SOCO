#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define MAX ((int)(1e9))
#define pi (2*acos(0))
#define M ((ll)(998244353))
#define NN ((ll)(305))
#define N ((int)(72))
#define eps 0
#define logn 20


using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef unsigned long long ull;


typedef tree < ll,  null_type,  less < ll >,  rb_tree_tag,  tree_order_statistics_node_update > o_set;

struct info{
    int n, mask;
};

queue < info > q[2];

int id[N], cnt[N], par[N], dis[N][2+(1<<17)];

int findpar(int n)
{
    if(par[n]==n) return n;
    return par[n] = findpar(par[n]);
}

vector < int > v[2][N];

int main()
{
    int n,m, ca, cb;
    scanf("%d %d %d %d",&n,&m,&ca,&cb);
    for(int i = 1; i<=n; i++){
        par[i] = i;
        cnt[i] = 1;
    }
    while(m--){
        int a , b , c;
        scanf("%d %d %d",&a,&b,&c);
        if(c==ca){
            if(findpar(a)!=findpar(b)){
                cnt[findpar(b)] += cnt[findpar(a)];
                par[findpar(a)] = findpar(b);
            }
            v[0][b].push_back(a);
            v[0][a].push_back(b);
        }
        else{
            v[1][b].push_back(a);
            v[1][a].push_back(b);
        }
    }
    //cout<<"asd\n";
    int tot = 1;
    for(int i = 1; i<=n; i++){
        int a = findpar(i);
        if(cnt[a]>3 && id[a]==0){
            id[a] = tot++;
        }

    }
    tot--;
    for(int i = 0; i<=n; i++){
        for(int j = 0; j<(1<<tot); j++) dis[i][j] = MAX;
    }
    //cout<<"sad\n";
    dis[1][0] = 0;
    q[0].push({1,0});


//    /// priority queue
//
//
//    priority_queue < pair < int,pair < int,int > > > pq;
//    pq.push(make_pair(0,make_pair(1,0)));
//
//
//    while(!pq.empty()){
//        pair < int,pair < int,int > > p = pq.top();
//        pq.pop();
//        if(dis[p.second.first][p.second.second]<-p.first) continue;
//        int a = p.second.first, mask = p.second.second;
//        for(int i = 0; i<v[0][a].size(); i++){
//            int b = v[0][a][i];
//            if(dis[b][mask]>dis[a][mask]+ca){
//                dis[b][mask] = dis[a][mask]+ca;
//                pq.push(make_pair(-dis[b][mask],make_pair(b,mask)));
//            }
//        }
//        int tmp = mask;
//        if(id[findpar(a)]>0) mask |= (1<<(id[findpar(a)]-1));
//
//        for(int i = 0; i<v[1][a].size(); i++){
//            int b = v[1][a][i];
//            if(dis[b][mask]>dis[a][tmp]+cb && findpar(a)!=findpar(b) && (id[findpar(b)]==0 || (mask&(1<<(id[findpar(b)]-1)))==0)){
//                dis[b][mask] = dis[a][tmp]+cb;
//                pq.push(make_pair(-dis[b][mask],make_pair(b,mask)));
//            }
//        }
//    }
//
//    ///

    //cout<<"sad\n";


    while(!q[0].empty() || !q[1].empty()){
        int a , mask;
        info p[2];
        p[0].n = p[1].n = p[0].mask = p[1].mask = 0;
        if(!q[0].empty()) p[0] = q[0].front();
        if(!q[1].empty()) p[1] = q[1].front();
        if(dis[p[0].n][p[0].mask]<dis[p[1].n][p[1].mask]){
            q[0].pop();
            a = p[0].n;
            mask = p[0].mask;

        }
        else{
            q[1].pop();
            a = p[1].n;
            mask = p[1].mask;
        }

        for(int i = 0; i<v[0][a].size(); i++){
            int b = v[0][a][i];
            if(dis[b][mask]>dis[a][mask]+ca){
                dis[b][mask] = dis[a][mask]+ca;
                q[0].push({b,mask});
            }
        }
        int tmp = mask;
        //cout<<mask<<" "<<(1<<(id[findpar(a)]-1))<<endl;
        if(id[findpar(a)]>0) mask |= 1<<(id[findpar(a)]-1);
        //cout<<mask<<endl;
        for(int i = 0; i<v[1][a].size(); i++){
            int b = v[1][a][i];
            if(findpar(a)!=findpar(b) && dis[b][mask]>dis[a][tmp]+cb && (id[findpar(b)]==0 || (mask&(1<<(id[findpar(b)]-1)))==0)){
                dis[b][mask] = dis[a][tmp]+cb;
                q[1].push({b,mask});
            }
        }

        //cout<<a<<" "<<dis[a]<<endl;

    }

    for(int i = 1; i<=n; i++){
        int ans = MAX;
        for(int j = 0; j<(1<<tot); j++) ans = min(ans,dis[i][j]);
        printf("%d ",ans);
    }
    return 0;
}
