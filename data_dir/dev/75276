#include <stdio.h>
#include <cstring>
#include <queue>
#include <cmath>
#include <cassert>
#include <iostream>
#include <algorithm>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

typedef long long ll;

const int MAXN=1000001;

int sito[MAXN];
int arr[MAXN];
int dp[MAXN];

vector<pair<int,int> > factors;

int brute(int cur, int val,int v)
{
	if(val==v) return 0;
	if(cur==factors.size())
		return dp[val];
	int res=0;
	for(int i=0;i<=factors[cur].first;i++, val*=factors[cur].second)
	{
		res=max(res,brute(cur+1, val, v));
	}
	return res;
}

int main()
{
	int n;
	scanf("%d",&n);
	for(int i=2;i*i<MAXN;i++)
	{
		if(!sito[i])
		{
			sito[i]=i;
			for(int j=i*i;j<MAXN;j+=i)
				sito[j]=i;
		}
	}
	for(int i=2;i<MAXN;i++)
		if(!sito[i])
			sito[i]=i;
	REP(i,n)
	{
		int t;
//		t=i+1;
		scanf("%d",&t);
		arr[t]=1;
	}
	memset(dp,-1,sizeof(dp));
	for(int i=1;i<MAXN;i++)
	{
		if(arr[i])
		{
			int t=i;
			factors.clear();
			while(t>1)
			{
				int p=sito[t];
				int c=0;
				while(t%p==0)
				{
					c++;
					t/=p;
				}
				factors.push_back(make_pair(c,p));
			}
			dp[i]=1+brute(0,1,i);
		}
	}
	printf("%d\n",*max_element(dp,dp+MAXN));
	return 0;
}
