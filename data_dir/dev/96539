#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cctype>
#include <iostream>
#include <sstream>
#include <iomanip>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <complex>
using namespace std;

typedef long long ll;
typedef unsigned long long llu;
typedef long double ld;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef stringstream ss;

#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(),(x).end()
#define clr(t,v) memset((t),(v),sizeof(t))
#define debug(a) cout << #a << ": " << (a) << endl;

#define rep(i,n) for(int i=0,_##i=(n);i<_##i;++i)
#define dwn(i,n) for(int i=(n);--i>=0;)
#define repr(i,l,r) for(int i=(l),_##i=(r);i<_##i;++i)
#define dwnr(i,l,r) for(int i=(r),_##i=(l);--i>=_##i;)
#define repi(i,a) for(__typeof((a).begin()) i=(a).begin(),_##i=(a).end();i!=_##i;++i)
#define dwni(i,a) for(__typeof((a).rbegin()) i=(a).rbegin(),_##i=(a).rend();i!=_##i;++i)

#define X real()
#define Y imag()

int n;

typedef complex<int> pt;
typedef pair<pt, int> pti;

pt pivot;

bool getside(const pt& a) {
    return a.Y > 0 || (a.Y == 0 && a.X > 0);
}
ll cross(const pt& a, const pt& b) {
    return (ll)a.X * b.Y - (ll)a.Y * b.X;
}
bool myless(const pt& a, const pt& b) {
    pt an = a - pivot;
    pt bn = b - pivot;
    bool sa = getside(an);
    bool sb = getside(bn);
    if (sa != sb) {
        return sa;
    } else {
        return cross(an, bn) > 0;
    }
}
bool comp(const pti& a, const pti& b) {
    return myless(a.fi, b.fi);
}

int ans[1600];
vector<int> subtree[1600];
vector<int> adj[1600];

void dfs(int a, int p) {
    subtree[a].pb(a);
    repi (i, adj[a]) {
        int b = *i;
        if (b != p) {
            dfs(b, a);
            subtree[a].insert(subtree[a].end(), all(subtree[b]));
        }
    }
}

bool tobot(const pt& a, const pt& b) {
    return a.Y < b.Y || (a.Y == b.Y && a.X < b.X);
}

void assign(vector<pti> pts, int a, int p) {
    rep (i, sz(pts)) {
        if (tobot(pts[i].fi, pts[0].fi)) {
            swap(pts[0], pts[i]);
        }
    }
    pivot = pts[0].fi;
    ans[pts[0].se] = a;
    sort(pts.begin() + 1, pts.end(), comp);
//  cout << a << endl;
//  repi (it, pts) {
//      cout << it->fi.X << ' ' << it->fi.Y << endl;
//  }
    int pt = 1;
    repi (i, adj[a]) {
        int b = *i;
        if (b != p) {
            int z = (int)subtree[b].size();
            vector<pti> curgroup(pts.begin() + pt, pts.begin() + pt + z);
            pt += z;
            assign(curgroup, b, a);
        }
    }
}

int main() {// freopen("a.in","r",stdin); freopen("a.out","w",stdout);
    cout << fixed << setprecision(12);
    
    scanf("%d", &n);
    rep (i, n - 1) {
        int a, b;
        scanf("%d%d", &a, &b);
        a--; b--;
        adj[a].pb(b);
        adj[b].pb(a);
    }
    dfs(0, -1);
    vector<pti> pts;
    rep (i, n) {
        int x, y;
        scanf("%d%d", &x, &y);
        pts.pb(pti(pt(x, y), i));
    }
    assign(pts, 0, -1);
    rep (i, n) {
        if (i) putchar(' ');
        printf("%d", ans[i] + 1);
    }
    putchar('\n');
}
