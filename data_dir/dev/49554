#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cassert>
#include <queue>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define pb push_back
#define fst first
#define snd second
#define SZ(x) ((int)x.size())
typedef long long ll;
#define dforn(i, n) for(int i = n - 1; i >= 0; i--)

const int MAXN = 1 << 10;

int a, b, n;
char c[MAXN];
int val[MAXN] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
char roman[MAXN][MAXN] = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};

int main() {
  //~ freopen("input.in", "r", stdin);
  char _b[10];
  while( scanf("%d %s %s", &a, _b, c) >= 1 ){
    bool rom = false;
    if(_b[0] == 'R'){
      rom = true;
    } else {
      b = atoi(_b);
    }
    
    n = strlen(c);
    ll p = 0;
    ll pot = 1;
    dforn(i, n){
      int ch = isupper(c[i]) ? c[i]-'A'+10 : c[i]-'0';
      p += pot*ch;
      pot *= a;
    }
    
    //~ printf("Your c actually means: %lld\n", p);
    
    char ans[MAXN]; memset(ans, 0, sizeof ans);
    if(rom){
      forn(i, 13){
        while(p >= val[i]){
          p -= val[i];
          strcat(ans, roman[i]);
        }
      }
    } else {
      int it = 0;
      while(p){
        int t = p%b;
        ans[it] = (t < 10) ? t+'0' : t+'A'-10;
        p /= b;
        it++;
      }
      if(it == 0) ans[0] = '0';
      reverse(ans, ans + it);
    }
    printf("%s\n", ans);
  }
  return 0;
}
