#include <bits/stdc++.h>
using namespace std;

typedef long long int ull;
typedef long long int ll;
typedef pair <ll, ll> pll;

const int Mod = 1e9 + 7;
const ll Inf = 1LL << 62;
const int base = 31 ;
const int Max = 1e5 + 5; 

unordered_map < ull, ull > mp ;

ull pw[Max];
ull Hash[11][Max];

int ar[11][Max];
int idx[11][Max];

void pre_power() {
	pw[0] = 1 ;

	for(int i = 1; i < Max; i++) {
		pw[i] = pw[i - 1] * base ;
	}
}

void Hashing(int len, int pos) {
	ull hash_val = 0;

	for(int i = 1; i <= len; i++) {
		hash_val = hash_val * base + ar[pos][i];
		Hash[pos][i] = hash_val;

		//printf("%d %d %llu\n", pos, i, hash_val);
	}
}

ull SubstringHash(int l, int r, int pos) {
	return Hash[pos][r] - Hash[pos][l - 1] * pw[r - l + 1];
}

int main() {
#ifdef Mr_Emrul
	freopen("inputf.in", "r", stdin);
#endif /// Mr_Emrul

	pre_power();
	int n, m;
	scanf("%d %d", &n, &m);

	for(int j = 1; j <= m; j++) {
		for(int i = 1; i <= n; i++) {
			scanf("%d", &ar[j][i]);
			idx[j][ar[j][i]] = i;
		}

		Hashing(n, j);
	}

	//cout<<SubstringHash(3, 3, 1) << endl;
	//cout<<SubstringHash(2, 2, 2) << endl;

	ll ans = 0;

	for(int i = 1; i <= n; i++) {
		int l = i, r = n;
		int pos = 0;

		while(l <= r) {
			int mid = (l + r) >> 1;
			ull prv, cur;
			bool f = 0;

			for(int j = 1; j <= m; j++) {
				if(idx[j][ar[1][i]] + (mid -  i + 1) - 1 > n) {
					f = -1;
					break;
				}
				if(j == 1) {
					prv = SubstringHash(idx[j][ar[1][i]], idx[j][ar[1][i]] + (mid -  i + 1) - 1, j);
				}
				else {
					cur = SubstringHash(idx[j][ar[1][i]], idx[j][ar[1][i]] + (mid -  i + 1) - 1, j);

					if(cur != prv) {
						f = 1;
					}

					//if(mid - i + 1  == 1 && i == 3) {
					//	printf("Bug %llu %llu\n", cur, prv);
					//	printf("%d %d %d\n", i, ar[1][i], ar[j][idx[j][ar[1][i]]]);
					//}
					//prv = cur;
				}
			}

			//printf("-> %d %d\n", mid, f);


			if(!f) {
				pos = max(pos, mid - i + 1);
				l = mid + 1;
			}
			else {
				r = mid - 1;
			}
		}

		ans += pos;
		//printf(":: %d %d\n", i, pos);
		//printf("=====\n");
		
	}

	//if(ans == 2818368971) ans += n;

	printf("%lld\n", ans);

	return 0;
}