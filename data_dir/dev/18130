#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define PI ( acos(-1.0) )

#define IN freopen("C.in","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")

#define pb push_back
#define mp make_pair
#define i64 long long int
#define xx first
#define yy second


using namespace __gnu_pbds;
using namespace std ;

typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef pair<i64, i64> pii;

#define INF 1000000000
#define mod 1000000007LL
#define maxn 100005

string s ;
string qr[4] ;
int Next[30][maxn] ;
int dp[255][255][255] ;


void cal(int i, int j, int k)
{
    dp[i][j][k] = (int)s.size() + 1 ;
    if( i > 0 ) dp[i][j][k] = min( dp[i][j][k] , Next[ qr[1][i-1]-'a' ][ dp[i-1][j][k] ] ) ;
    if( j > 0 ) dp[i][j][k] = min( dp[i][j][k] , Next[ qr[2][j-1]-'a' ][ dp[i][j-1][k] ] ) ;
    if( k > 0 ) dp[i][j][k] = min( dp[i][j][k] , Next[ qr[3][k-1]-'a' ][ dp[i][j][k-1] ] ) ;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n , q ;

    cin>>n>>q ;

    cin>>s ;

    for(int i=0 ; i<26 ; i++) Next[i][n] = n+1 , Next[i][n+1] = n+1 ;

    for(int i=n-1 ; i>=0 ; i--)
    {
        for(int j=0 ; j<26 ; j++) Next[j][i] = Next[j][i+1] ;
        Next[ s[i]-'a' ][i] = i+1 ;
    }

    for(int i=1 ; i<=q ; i++)
    {
        string sign , ch ;
        int idx ;
        cin>>sign>>idx ;

        if( sign=="-" )
        {
            qr[idx].pop_back() ;
        }
        else{
            cin>>ch ;
            qr[idx] += ch ;

            int n1 = (int)qr[1].size() , n2 = (int)qr[2].size() , n3 = (int)qr[3].size() ;

            for(int i=((idx==1)?n1:0) ; i<=n1 ; i++ )
            {
                for(int j=((idx==2)?n2:0) ; j<=n2 ; j++ )
                {
                    for(int k=((idx==3)?n3:0) ; k<=n3 ; k++) cal(i,j,k) ;
                }
            }
        }
        int n1 = (int)qr[1].size() , n2 = (int)qr[2].size() , n3 = (int)qr[3].size() ;

      //  printf("dp %d\n",dp[n1][n2][n3]) ;

        if( dp[n1][n2][n3] <= n )printf("YES\n") ;
        else printf("NO\n") ;
        printf("\n") ;
    }

    return 0 ;
}
