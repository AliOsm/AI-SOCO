#include <bits/stdc++.h>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL); 
  int n, cx, cy;
  cin >> n;
  vector<vector<int> > dos(n, vector<int>(n, 0)), cinc(n, vector<int>(n, 0));
  bool zeros = false;
  
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      int x, y;
      cin >> x;
      if (x == 0) {
        zeros = true;
        cx = i, cy = j;
        x = 10;
      }
      y = x;
      while (x%2 == 0) {
        dos[i][j]++;
        x /= 2;
      }
      while (y%5 == 0) {
        cinc[i][j]++;
        y /= 5;
      }
    }
  }
  vector<vector<int> > dp2(n, vector<int>(n, 0)), dp5(n, vector<int>(n, 0));
  for (int i = 0; i< n; i++) {
    for (int j = 0; j < n; j++) {
      if (i == 0 and j == 0) {
        dp2[i][j] = dos[i][j];
        dp5[i][j] = cinc[i][j];
      }
      else if (i == 0) {
        dp2[0][j] = dp2[0][j-1] + dos[0][j];
        dp5[0][j] = dp5[0][j-1] + cinc[0][j];
      }
      else if (j == 0) {
        dp2[i][0] = dp2[i-1][0] + dos[i][j];
        dp5[i][0] = dp5[i-1][0] + cinc[i][j];
      }
      else {
        dp2[i][j] = dos[i][j] + min(dp2[i-1][j], dp2[i][j-1]);
        dp5[i][j] = cinc[i][j] + min(dp5[i-1][j], dp5[i][j-1]);
      }
    }
  }  
  
  vector<char> sol;
  
  if (zeros and min(dp2[n-1][n-1], dp5[n-1][n-1]) > 0) {
    cout << 1 << endl;
    for (int i = 0; i < cx; i++) {
      cout << 'D';
    }
    for (int j = 0; j < n-1; j++) {
      cout << 'R';
    }
    for (int i = cx; i < n-1; i++) {
      cout << 'D';
    }
    return 0;
  }
  
  
  if (dp2[n-1][n-1] < dp5[n-1][n-1]) {
    int x = n-1, y = n-1;
    while (x != 0 or y != 0) {
      if (x == 0) {
        sol.push_back('R');
        y--;
      }
      else if (y == 0) {
        sol.push_back('D');
        x--;
      }
      else if (dp2[x][y] == dos[x][y]+ dp2[x-1][y]) {
        sol.push_back('D');
        x--;
      }
      else {
        sol.push_back('R');
        y--;
      }
    }
  }
  else { 
    int x = n-1, y = n-1;
    while (x != 0 or y != 0) {
      if (x == 0) {
        sol.push_back('R');
        y--;
      }
      else if (y == 0) {
        sol.push_back('D');
        x--;
      }
      else if (dp5[x][y] == cinc[x][y]+ dp5[x-1][y]) {
        sol.push_back('D');
        x--;
      }
      else {
        sol.push_back('R');
        y--;
      }
    }
  }
  cout << min(dp2[n-1][n-1], dp5[n-1][n-1]) << endl;
  for (int i = int(sol.size())-1; i >= 0; i--) 
    cout << sol[i];
  cout << endl;
}

