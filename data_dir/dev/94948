#include <bits/stdc++.h>

#define ll long long

using namespace std;

const int N = (int)2e5 + 7;

int n, m;
pair <int, int> ar[N];
const int maxn = 5e5 + 4;
int R[maxn];
multiset <int> s;
vector<int> add[maxn + 4], del[maxn + 4];

int up[20][maxn];

main() {
  scanf("%d %d", &n, &m);
  for (int i = 1, l, r; i <= n; i++) {
    scanf("%d %d", &l, &r);
    ar[i] = {l, r};
    add[l].push_back(i);
    del[r].push_back(i);
  }
  memset(up, -1, sizeof up);
  for (int i = 0; i < maxn; i++) {
    for (int to : add[i]) {
      s.insert(ar[to].second);
    }
    if (s.empty()) R[i] = -1;
    else R[i] = *s.rbegin();
    up[0][i] = R[i];
    for (int to : del[i]) {
      s.erase(s.find(i));
    }
  }
  for (int i = maxn - 1; i >= 0; i--) {
    if (up[0][i] == -1) continue;
    for (int j = 1; j < 20; j++) {
      up[j][i] = up[j - 1][up[j - 1][i]];
    }
  }
  /*for (int i = 0; i < 5; i++) {
    cout << R[i] << ' ';
  }
  cout << endl;*/
  while (m--) {
    int l, r;
    scanf("%d %d", &l, &r);
    int ans = 0;
    for (int i = 19; i >= 0 && l < r; i--) {
      if (up[i][l] != -1 && up[i][l] < r) {
        ans += (1 << i);
        l = up[i][l];
      }
    }
    if (up[0][l] >= r) {
      ans++;
      l = up[0][l];
    }
    if (l < r) {
      puts("-1");
    } else {
      printf("%d\n", ans);
    }
  }
}
