#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template<class T> using OS = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define ll long long
#define ull unsigned long long

const int N = 1e5 + 5;
ll n, q, a[N], x, y, c[N], dp[N], lst[N];

int main() {
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);

    cin >> n >> q;
    for (int i = 0; i < n; i++) cin >> a[i];
    for (int i = 0; i < n; i++) cin >> c[i];

    while (q--) {
        cin >> x >> y;
        memset(dp, 0, sizeof dp);
        memset(lst, -1, sizeof lst);

        ll mx = 0, MX[2], C[2];
        MX[0] = MX[2] = C[0] = C[1] = -1;
        for (int i = 0; i < n; i++) {
            dp[i] = a[i] * y;
            if (lst[c[i]] == -1) {
                if (MX[0] != -1) {
                    dp[i] = max(dp[i], MX[0] + a[i] * y);
                }
                lst[c[i]] = i;
                if (MX[0] < dp[i]) {
                    C[1] = C[0];
                    C[0] = c[i];
                    MX[1] = MX[0];
                    MX[0] = dp[i];
                } else if (dp[i] > MX[1]) {
                    C[1] = c[i];
                    MX[1] = dp[i];
                }
            } else {
                dp[i] = max(dp[i], dp[lst[c[i]]] + a[i] * x);
                if (C[0] != -1 && C[0] != c[i]) {
                    dp[i] = max(dp[i], MX[0] + a[i] * y);
                }
                if (C[1] != -1 && C[1] != c[i]) {
                    dp[i] = max(dp[i], MX[1] + a[i] * y);
                }
                if (dp[i] > dp[lst[c[i]]]) {
                    lst[c[i]] = i;
                    if (MX[0] < dp[i]) {
                        if (C[0] != c[i]) {
                            C[1] = C[0];
                            MX[1] = MX[0];
                        }
                        C[0] = c[i];
                        MX[0] = dp[i];
                    } else if (dp[i] > MX[1] && C[0] != c[i]) {
                        C[1] = c[i];
                        MX[1] = dp[i];
                    }
                }
            }
            mx = max(mx, dp[i]);
        }
        cout << mx << '\n';
    }

    return 0;
}