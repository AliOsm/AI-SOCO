#define _USE_MATH_DEFINES
#include <array>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;
mt19937 mrand(random_device{}());
int rnd(int x) { return mrand() % x; }

const int N = 1e6 + 10;
char s[N];

int main() {
  int cas;
  scanf("%d", &cas);
  while (cas--) {
    int n;
    int64 m;
    scanf("%d%lld", &n, &m);
    scanf("%s", s);
    vector<ii> a;
    int cnt = 0;
    for (int i = 0; i < n; ++i) {
      if (s[i] == '0') {
        a.push_back({i, cnt});
      } else {
        ++cnt;
      }
    }
    string ret;
    int i;
    for (i = 0; i < a.size(); ++i) {
      int64 cur = min(m, (int64)a[i].second);
      if (cur == a[i].second) {
        ret += '0';
      } else {
        int len = a[i].second - cur;
        while (len--) ret += '1';
        ret += '0';
        while (cur--) ret += '1';
        for (int j = a[i].first + 1; j < n; ++j) ret += s[j];
        break;
      }
      m -= cur;
    }
    // trace(i);
    if (i == a.size()) {
      for (int j = a.size(); j < n; ++j) ret += '1';
    }
    puts(ret.c_str());
  }
  return 0;
}
