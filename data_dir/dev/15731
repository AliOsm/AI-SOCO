#include <bits/stdc++.h>
#define MOD 1000000007
#define Nmax 1000005
#define pb push_back
#define mp make_pair
#define INF 2000000000
#define eps 0.000000000001

using namespace std;

int n;
int a[Nmax],aib[Nmax],alx[Nmax],alxm1[Nmax],nxt[Nmax],sol[Nmax],aux[Nmax];
vector <int> L[Nmax];
unordered_map <int,int> Val;

struct el
{
    int val,poz;
    bool operator <(const el A) const
    {
        return val<A.val;
    }
} v[Nmax];

struct Qry
{
    int ind,cap;
};
vector <Qry> T[Nmax];

inline void Norm()
{
    sort(v+1,v+n+1);
    a[v[1].poz]=1; Val[a[v[1].poz]]=v[1].val;
    for(int i=2;i<=n;++i)
    {
        a[v[i].poz]=a[v[i-1].poz];
        if(v[i].val>v[i-1].val) ++ a[v[i].poz];
        Val[a[v[i].poz]]=v[i].val;
    }
}

inline void Update(int x, int y)
{
    for(int i=x;i>0;i-=(i&(-i)))
        aib[i]+=y;
}

inline int Query(int x)
{
    int s=0;
    for(int i=x;i<=n;i+=(i&(-i)))
        s+=aib[i];
    return s;
}

int main()
{
    int i,j,len,x,y,m;
    Qry w;
    #ifndef ONLINE_JUDGE
        freopen ("date.in","r",stdin);
        freopen ("date.out","w",stdout);
    #endif
    cin.sync_with_stdio(0);
    cin>>n>>m;
    for(i=1;i<=n;++i)
    {
        cin>>a[i];
        v[i].val=a[i]; v[i].poz=i;
    }
    Norm();
    for(i=1;i<=n;++i)
    {
        L[a[i]].pb(i);
        //cout<<a[i]<<"\n";
    }
    for(i=1;i<=n;++i)
    {
        len=0;
        for(auto it : L[i]) aux[++len]=it;
        for(j=1;j<=len;++j)
        {
            if(j>=Val[i]) alx[aux[j]]=aux[j-Val[i]+1];
            if(j>Val[i]) alxm1[aux[j]]=aux[j-Val[i]];
            if(j>1) nxt[aux[j]]=aux[j-1];
        }
    }

    /*for(i=1;i<=n;++i) cout<<alx[i]<<" ";
    cout<<"\n";
    for(i=1;i<=n;++i) cout<<alxm1[i]<<" ";
    cout<<"\n";*/

    for(i=1;i<=m;++i)
    {
        cin>>x>>y;
        w.cap=x; w.ind=i; T[y].pb(w);
    }
    for(i=1;i<=n;++i)
    {
        if(nxt[i])
        {
            Update(alx[nxt[i]],-2);
            Update(alxm1[nxt[i]],1);
        }
        Update(alx[i],1);
        for(auto it : T[i]) sol[it.ind]=Query(it.cap);
    }
    for(i=1;i<=m;++i) cout<<sol[i]<<"\n";
    return 0;
}
