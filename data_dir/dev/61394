//http://codeforces.com/group/JQLXw0DLrR/contest/214455/problem/D

#include <iostream>
#include <string>
#include <cmath>
#include <vector>
#include <algorithm>
#include <iterator>
#include <cstdlib>
#include <cstdio>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <list>

using namespace std;

typedef pair <int, int> pii;
typedef pair <long long, long long> pll;
typedef vector <int> vi;
typedef long long ll;

#define endl "\n"

const int mod = 1e9 + 7;

int n, colors[200005], s[200005];
vector <vi> e;
bool used[200005];
int k = 2;

void dfs(int cur, int parent);

int main() {
	int x, y;

	ios::sync_with_stdio(false);
	cin.tie(NULL);

	cin >> n;

	e.resize(n + 1);
	
	for (int i = 1; i < n; i++) {
		cin >> x >> y;

		e[x].push_back(y);
		e[y].push_back(x);
	}

	colors[1] = 1;
	used[1] = 1;

	for (int i = 0; i < e[1].size(); i++, k++) {
		colors[e[1][i]] = k;
		used[e[1][i]] = 1;
	}

	for (int i = 0; i < e[1].size(); i++, k++)
		dfs(e[1][i], 1);

	k = 0;

	for (int i = 1; i <= n; i++)
		k = max(k, colors[i]);

	cout << k << endl;

	for (int i = 1; i <= n; i++)
		cout << colors[i] << " ";
	
	cout << endl << endl;

	return 0;
}

void dfs(int cur, int parent) {
	used[cur] = 1;

	for (int i = 0, j = 1; i < e[cur].size(); i++) {
		while ((j == colors[cur]) || (j == colors[parent]))
			j++;

		if (!used[e[cur][i]]) {
			colors[e[cur][i]] = j;
			j++;
		}
	}

	for (int i = 0; i < e[cur].size(); i++) {
		if (!used[e[cur][i]])
			dfs(e[cur][i], cur);
	}
}