#include <bits/stdc++.h>

using namespace std;

#define long long long

struct solver {
  vector<map<int, long>> g, gr;

  void add(int from, int to, long v) {
    g[from][to] += v;
    gr[to][from] += v;
  }

  void solve() {
    int n, m;
    cin >> n >> m;
    g.resize(n);
    gr.resize(n);
    for (int i = 0; i < m; i++) {
      int from, to;
      long c;
      cin >> from >> to >> c;
      add(from - 1, to - 1, c);
    }
    for (int i = 0; i < n; i++) {
      while (true) {
        while (!g[i].empty()) {
          auto e1 = *g[i].begin();
          if (e1.second == 0) g[i].erase(g[i].begin());
          else break;
        }
        while (!gr[i].empty()) {
          auto e2 = *gr[i].begin();
          if (e2.second == 0) gr[i].erase(gr[i].begin());
          else break;
        }
        if (g[i].empty() || gr[i].empty()) break;
        int from = gr[i].begin()->first;
        int to = g[i].begin()->first;
        long val = min(g[i].begin()->second, gr[i].begin()->second);
        add(from, i, -val);
        add(i, to, -val);
        if (from != to) add(from, to, val);
      }
    }
    vector<tuple<int, int, long>> answer;
    for (int i = 0; i < n; i++) {
      for (auto& p : g[i]) {
        if (p.second > 0) {
          answer.emplace_back(i, p.first, p.second);
        }
      }
    }
    cout << answer.size() << '\n';
    for (auto& t : answer) cout << get<0>(t) + 1 << ' ' << get<1>(t) + 1 << ' ' << get<2>(t) << '\n';
  }
};

int main(int argc, char *argv[]) {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  solver().solve();
}