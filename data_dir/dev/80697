/**
*
* Author: Mouhanad
* Lang: GNU C++14
*
**/
#include<bits/stdc++.h>
using namespace std;

#define F first
#define S second
#define ii pair < int , int >
#define LS pair < ll , string >
typedef long long ll;
const int inf = 1<<30;
const int N =200100;
int n , q  ;
ll sum = 0 ;
ll seg[N<<2];
ll lazy[N<<2];

/*void build(int nd,int L,int R){
    if( L == R ){
        seg[nd]=a[L];
        return ;
    }
    int mid = (L+R) >>1;
    build(nd<<1  ,L , mid);
    build(nd<<11,mid+1,R);
    seg[nd]=max( seg[nd<<1] , seg[nd<<1|1] );
}*/

void push(int nd,int L,int R){
    if( lazy[nd]==0 )return;
    seg[nd]+= (1LL*lazy[nd]*(R-L+1));

    if( L != R ) { // have children
    lazy[nd<<1  ]+=lazy[nd];// push to left child
    lazy[nd<<1|1]+=lazy[nd];// push to right child
    }
    lazy[nd]=0;
}


/*void update(int nd,int L,int R,int idx,int val){
    if( L == R ){
        seg[nd]=val;
        return ;
    }
    int mid = (L+R) >>1;
    if( idx<=mid )
         update(nd<<1  ,  L  ,mid,idx,val);
    else update(nd<<1|1,mid+1, R ,idx,val);
    seg[nd]=max( seg[nd<<1] , seg[nd<<1|1] );
}*/

ll query(int nd,int L,int R,int from,int to){
    push(nd,L,R);

    if( from<=L && R<=to )return seg[nd];
    if( from>R || to<L )return 0;

    int mid = (L+R) >>1;

    ll leftAns = query(nd<<1  ,  L  ,mid,from,to);
    ll rightAns= query(nd<<1|1,mid+1, R ,from,to);
    return  leftAns + rightAns ;
}

void updateRange(int nd,int L,int R,int from,int to,ll val){
    push(nd,L,R);

    if( R <from  || L>to )return; // out
    if( from<=L && R<=to ){       // in
        lazy[nd]+=val;
       push(nd,L,R);
        return;
    }

    int mid = (L+R) >>1;
    updateRange(nd<<1  ,  L  ,mid,from,to,val);
    updateRange(nd<<1|1,mid+1, R ,from,to,val);

    seg[nd]=seg[nd<<1] + seg[nd<<1|1] ;
 }



int main(){
  scanf("%d",&q);
  n = 1 ;
  int type  , x , idx  ;
  while (q--){
    scanf("%d",&type);
    if ( type == 1 ){
        scanf("%d%d",&idx,&x);
        updateRange(1,1,N,1,idx,x);
    }else if ( type == 2 ){
       scanf("%d",&x);
       n++;
       updateRange(1,1,N,n,n,x);
    }else {
        updateRange(1,1,N,n,n,-query(1,1,N,n,n));
        n--;
    }
    double ANS = (1.0*seg[1])/(1.0*n) ;
    //cerr << n << " " << seg[1] <<" " << ANS <<endl;
    printf("%.6f\n",ANS);

  }
    return 0;
}
