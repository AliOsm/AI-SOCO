#include <bits/stdc++.h>

using namespace std;

const int N = (int)1e5 + 1;
const int M = (int)40;

typedef long long ll;

int n, m;
int a[N], b[N], idxC = 0;
bitset< N > sb[M];
char s[M];
map< string, int > idx;

inline int getIdx(string _s) {
  if(idx.find(_s) == idx.end()) idx[_s] = idxC++;
  return idx[_s];
}

ll g[M];
map< ll, int > dp;

int solve(ll mask) {
  if(mask == 0) return 0;
  if(dp.find(mask) != dp.end()) return dp[mask];
  int lst = 63 - __builtin_clzll(mask);
  return dp[mask] = max(solve(mask ^ (1LL << lst)), 1 + solve(mask & g[lst]));
}


int main() {
  scanf("%d %d", &n, &m);
  int lst = 0;
  for(int i = 1; i <= n; ++i) {
    scanf("%d", a + i);
    b[i] = -1;
    if(a[i] == 1) {
      if(a[i - 1] != 1) lst++;
    }
    if(a[i] == 2) {
      scanf(" %s", s);
      b[i] = getIdx((string)s);
      sb[b[i]][lst] = 1;
    }
  }
  for(int i = 0; i < m; ++i) {
    for(int j = 0; j < m; ++j) {
      if(i != j && ((sb[i] & sb[j]) == 0)) {
        g[i] |= (1LL << j);
      }
    }
  }
  printf("%d\n", solve((1LL << m) - 1LL));
  return 0;
}