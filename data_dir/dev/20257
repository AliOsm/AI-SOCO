#include <functional>
#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <numeric>
#include <iomanip>
#include <stdio.h>
#include <cstring>
#include <cassert>
#include <bitset>
#include <vector>
#include <math.h>
#include <queue>
#include <stack>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;

template <typename T>
T nextInt() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if (ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return x * p;
}

const int maxN = (int)1e6 + 10;
const int INF = (int)1e9;
const int mod = (int)1e9 + 7;
const ll LLINF = (ll)1e18;

map <char, char> rev;

int main() {

    //freopen(".in", "r", stdin);
   // freopen(".out", "w", stdout);

    string s;
    stack <char> st;

    rev['['] = ']';
    rev['('] = ')';
    rev['{'] = '}';
    rev['<'] = '>';
    cin >> s;
    assert(s.length() < maxN);
    int res = 0;
    int balance = 0;
    for (int i = 0; i < s.length(); ++i) {
        if (s[i] == '[' || s[i] == '(' || s[i] == '{' || s[i] == '<') {
                st.push(s[i]);
        } else {
            if (st.empty()) {
                cout << "Impossible\n";
                return 0;
            }
            res += s[i] != rev[st.top()];
            st.pop();
        }
    }
    if (st.size() > 0) {
        cout << "Impossible\n";
        return 0;
    }
    cout << res << '\n';
    return 0;
}
