#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> PI;
ll K;
int N;
struct Matrix{
	long double grid[15][15];
	int size;
	Matrix(){
		memset(grid,0,sizeof grid);
	}
	inline Matrix operator*(const Matrix& rhs) const{
		Matrix res;
		res.size=size;
		for(int i=0;i<size;i++){
			for(int j=0;j<size;j++){
				for(int k=0;k<size;k++){
					res.grid[i][j]+=grid[i][k]*rhs.grid[k][j];
					if(res.grid[i][j]>=K) res.grid[i][j]=K;
				}
			}
		}
		return res;
	}
	Matrix pow(ll k){
		Matrix res,tmp=*this;
		res.size=size;
		for(int i=0;i<size;i++)
			res.grid[i][i]=1;
		while(k>0){
			if(k&1) res=res*tmp;
			tmp=tmp*tmp;
			k>>=1;
		}
		return res;
	}
};
ll tmp[200010],a[200010];
long double prefix[200010][2];
int main(){
	int st=-1;
	scanf("%d%lld",&N,&K);
	for(int i=0;i<N;i++){
		scanf("%lld",tmp+i);
		if(st==-1 && tmp[i]!=0){
			st=i;
		}
	}
	for(int i=st;i<N;i++){
		a[i-st]=tmp[i];
	}
	N-=st;
	if(N>10){
		bool flag=false;
		for(int i=0;i<N;i++){
			prefix[i][0]=a[i];
			if(a[i]>=K) flag=true;
		}
		if(flag){
			puts("0");
		}else{
			for(int i=1;;i++){
				prefix[0][i&1]=prefix[0][~i&1];
				bool ok=false;
				for(int j=1;j<N && !ok;j++){
					prefix[j][i&1]=prefix[j-1][i&1]+prefix[j][~i&1];
					if(prefix[j][i&1]>=K) ok=true;
				}
				if(ok){
					printf("%d\n",i);
					break;
				}
			}
		}
	}else{
		ll l=0,r=1e18;
		Matrix mat;
		mat.size=N;
		for(int i=0;i<N;i++){
			for(int j=0;j<N;j++){
				if(i<=j) mat.grid[i][j]=1;
				else mat.grid[i][j]=0;
			}
		}
		while(l!=r){
			ll mid=(l+r)>>1;
			Matrix res=mat.pow(mid);
			long double sum=0;
			bool ok=false;
			for(int i=0;i<N && !ok;i++){
				sum+=a[i]*res.grid[i][N-1];
				if(sum>=K) ok=true;
			}
			if(ok) r=mid;
			else l=mid+1;
		}
		printf("%lld\n",r);
	}
	return 0;
}