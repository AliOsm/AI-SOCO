#pragma GCC optimize ("O3")
#include<bits/stdc++.h>
using namespace std;

long long mod = 4294967296LL;

long long mul(unsigned long long x, unsigned long long y) {
	x *= y;
	x %= mod;
	return x;
}

stack<long long> S;


long long enqueue(long long x) {
	long long lst = -1;
	while (!S.empty() && S.top() > x)
		lst = S.top(), S.pop();
	S.push(x);
	return lst;
}

int main() {
	ios::sync_with_stdio(false);

	int t; cin >> t;
	while (t--) {
		while (!S.empty())
			S.pop();
		long long n, l, r, x, y, z, b1, b2;
		cin >> n >> l >> r >> x >> y >> z >> b1 >> b2;
//		n = rand() % 10 + 2;
//		l = rand() % 2000 - 1000;
//		r = rand() % 2000 - 1000;
//		if (r < l) swap(l, r);
//
//		x = rand() % mod;
//		y = rand() % mod;
//		z = rand() % mod;
//		b1 = rand() % mod;
//		b2 = rand() % mod;
//		cout << n << " " << l << " " << r << " " << x << " " << y << " " << z << " " << b1 << " " << b2 << endl;

		long long a1 = b1 % (r - l + 1) + l;
		long long a2 = b2 % (r - l + 1) + l;

		bool found = false;
		long long ans = 0;


		if (a1 < a2)
			ans = a1 * a2, found = true;

		if (a1 < 0)
			enqueue(-a1);
		if (a2 < 0)
			enqueue(-a2);

		long long minA = min(a1, a2);
		for (int i = 2; i < n; i++) {
			long long b = z + mul(b2, y) + mul(b1, x);
			while (b >= mod) b -= mod;
			b1 = b2;
			b2 = b;
			long long a = b2 % (r - l + 1) + l;
			a1 = a2;
			a2 = a;
			if (minA < a) {
				if (!found || (a * minA) < ans)
					ans = a * minA, found = true;
			}
			else
				minA = a;
			if (a < 0) {
				a *= -1;
				long long x = enqueue(a);
				if (x != -1) {
					if (!found || (x * a) < ans)
						ans = a * x, found = true;
				}
			}
		}

//		for (int i = 0; i < n; i++)
//			cout << arr[i] << " ";
//		cout << endl;
//
//		long long correct = 0, f = 0;
//		for (int i = 0; i < n; i++)
//			for (int j = i + 1; j < n; j++)
//				if (arr[i] < arr[j]) {
//					if (f == 0) correct = arr[i] * arr[j];
//					f = 1;
//					correct = min(correct, arr[i] * arr[j]);
//				}

//		if (f == 0) cout << "IMPOSSIBLE\n";
//		else cout << correct << endl;

		if (!found) cout << "IMPOSSIBLE\n";
		else
			cout << ans << '\n';

//		assert(found == f);
//		if (f == 1)
//			assert(correct == ans);
	}


	return 0;
}
