#include <bits/stdc++.h>

using namespace std;
const int N = 1e5 + 228;

long long dp[N][8][8];
long long a[N][3], f[N][8];

int main() {
    ios::sync_with_stdio(false);

    int n;
    cin >> n;
    for(int i = 0; i < 3; i++)
        for(int j = 1; j <= n; j++)
            cin >> a[j][i];

    for(int i = 1; i <= n; i++) {
        for(int msk = 0; msk < 8; msk++) {
            for(int j = 0; j < 3; j++) {
                if(msk & (1 << j))
                    f[i][msk] += a[i][j];
            }
        }
    }

    for(int i = 0; i <= n; i++)
        for(int h1 = 0; h1 < 8; h1++)
            for(int h2 = 0; h2 < 8; h2++)
                dp[i][h1][h2] = (long long)-1e18;

    dp[0][1][1] = 0;
    vector<pair<pair<pair<int, int>, pair<int, int> >, int> > q;

    q.push_back(make_pair(make_pair(make_pair(4, 4), make_pair(7, 4)), 7));
    q.push_back(make_pair(make_pair(make_pair(1, 1), make_pair(7, 1)), 7));

    q.push_back(make_pair(make_pair(make_pair(7, 4), make_pair(7, 4)), 7));
    q.push_back(make_pair(make_pair(make_pair(7, 1), make_pair(7, 1)), 7));

    q.push_back(make_pair(make_pair(make_pair(7, 4), make_pair(1, 1)), 1));
    q.push_back(make_pair(make_pair(make_pair(7, 4), make_pair(2, 2)), 3));
    q.push_back(make_pair(make_pair(make_pair(7, 4), make_pair(4, 4)), 7));

    q.push_back(make_pair(make_pair(make_pair(7, 1), make_pair(1, 1)), 7));
    q.push_back(make_pair(make_pair(make_pair(7, 1), make_pair(2, 2)), 6));
    q.push_back(make_pair(make_pair(make_pair(7, 1), make_pair(4, 4)), 4));

    q.push_back(make_pair(make_pair(make_pair(1, 1), make_pair(1, 1)), 1));
    q.push_back(make_pair(make_pair(make_pair(2, 2), make_pair(2, 2)), 2));
    q.push_back(make_pair(make_pair(make_pair(4, 4), make_pair(4, 4)), 4));

    q.push_back(make_pair(make_pair(make_pair(1, 1), make_pair(2, 2)), 3));
    q.push_back(make_pair(make_pair(make_pair(2, 2), make_pair(1, 1)), 3));

    q.push_back(make_pair(make_pair(make_pair(2, 2), make_pair(4, 4)), 6));
    q.push_back(make_pair(make_pair(make_pair(4, 4), make_pair(2, 2)), 6));

    q.push_back(make_pair(make_pair(make_pair(1, 1), make_pair(4, 4)), 7));
    q.push_back(make_pair(make_pair(make_pair(4, 4), make_pair(1, 1)), 7));

    for(int i = 1; i <= n; i++) {
        for(auto x : q) {
            dp[i][x.first.second.first][x.first.second.second] = max(dp[i - 1][x.first.first.first][x.first.first.second] + f[i][x.second], dp[i][x.first.second.first][x.first.second.second]);
        }
    }

    cout << max(dp[n][4][4], dp[n][7][1]) << "\n";

    return 0;
}
