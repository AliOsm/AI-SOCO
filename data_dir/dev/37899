#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ul;
typedef long double ld;

const int N = 1e5 + 10;

bool mark[N];
vector<pair<int, int> > adj[N];
int vert[N];
int a[N], b[N], c[N];
int x = 0;

void dfs(int v)
{
    int prev = -1;

    for (int i=0; i<adj[v].size(); i++)
    {
        int ind = adj[v][i].second;
        int u = adj[v][i].first;
        if (!mark[ind])
        {
            mark[ind] = 1;
            dfs(u);

            if (vert[u] != -1)
            {
                a[x] = v;
                b[x] = u;
                c[x] = vert[u];
                x++;
            }
            else
            {
                if (prev != -1)
                {
                    a[x] = prev;
                    b[x] = v;
                    c[x] = u;
                    x++;
                    prev = -1;
                }
                else
                {
                    prev = u;
                }
            }
        }
    }

    vert[v] = prev;
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    int n, m;
    cin >> n >> m;

    for (int i=0; i<n; i++)
        vert[i] = -1;

    for (int i=0; i<m; i++)
    {
        int u, v;
        cin >> u >> v;
        u--, v--;
        adj[u].push_back(make_pair(v, i));
        adj[v].push_back(make_pair(u, i));
    }

    dfs(0);

    if (vert[0] != -1)
    {
        cout << "No solution\n";
    }
    else
    {
        for (int i=0; i<x; i++)
            cout << a[i]+1 << " " << b[i]+1 << " " << c[i]+1 << "\n";
    }

    return 0;
}