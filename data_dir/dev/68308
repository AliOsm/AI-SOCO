/*
    NO 
        TIME 
            TO 
                DIE
                    --007
                            */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
#define mod 1000000007
#define OS //single input use oeis
lli INF=1e17;
lli eps=1e-8;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,k,x,m;
const double pi=3.14159265358979323846;
lli add(lli a, lli b) {
 	lli res = a + b;
 
 	while (res >= mod) res -= mod;
 
 	while (res < 0) res += mod;
 
 	return res;
}

// Thi
//matrix exponentiation is associative and distributive
// lli dp[2][2000005][2];
class node
{
    public:
    lli x,y,val;
};
class cmp {
public:
	bool operator()(node A, node B) 
	{
		return A.val<B.val;
	}
};

char a[1005][1005];
lli vis[1005][1005];
lli tot=0;
ll start,endd;
lli rec=1e15;
lli flag=0;
lli r,c;
lli bfs(node end)
{
    queue<node> q;
    q.push(end);
    while(!q.empty())
    {
        node b=q.front();
        
        lli val=b.val;
        lli x=b.x;
        lli y=b.y;
        
        q.pop();
        
        if(vis[x][y]||x<1||x>r||y<1||y>c||a[x][y]=='T')
        continue;
        vis[x][y]=1;
        // cout<<x<<" "<<y<<" "<<val<<" "<<a[x][y]<<"\n";
        if(!flag)
        {
        node temp;
        temp.val=val+1;
        temp.x=x+1;
        temp.y=y;
        q.push(temp);
        
        temp.x=x-1;
        q.push(temp);
        // cout<<temp.x<<" "<<temp.y<<" "<<temp.val<<"\n";
        temp.x=x;
        temp.y=y+1;
        q.push(temp);
        // cout<<temp.x<<" "<<temp.y<<" "<<temp.val<<"\n";
        temp.y=y-1;
        // cout<<temp.x<<" "<<temp.y<<" "<<temp.val<<"\n";
        q.push(temp);
        if(a[x][y]>='0'&&a[x][y]<='9')
        tot+=(a[x][y]-'0');
        else if(a[x][y]=='S')
        {
            rec=val;
            flag=1;
        }
        }
        else
        {
        if(val>rec)
        break;
        node temp;
        temp.val=val+1;
        temp.x=x+1;
        temp.y=y;
        q.push(temp);
        
        temp.x=x-1;
        q.push(temp);
        
        temp.x=x;
        temp.y=y+1;
        q.push(temp);
        
        temp.y=y-1;
        q.push(temp);
        if(a[x][y]>='0'&&a[x][y]<='9')
        tot+=(a[x][y]-'0'); 
        }
        
    }
}
int dow(lli d, lli m, lli y)
{
    int t[] = {0,3,2,5,0,3,5,1,4,6,2,4};
    y -= m < 3;
    return ((y + y/4ll - y*3/400ll  - y/4000ll /* if it will be implemented in future */ + t[m-1] + d)%7+7)%7;

}
lli dp[1000008];
int main()
{
 IO;
 OS;
 cin>>n;
 lli a[n+1];
 lli vc[45];
 mem1(vc,0);
 for(int i=1;i<=n;i++)
 cin>>a[i];
 
 for(int i=1;i<=n;i++)
 {
     bitset<40> bb(a[i]);
     for(int j=0;j<40;j++)
     {
         if(bb[j])
         vc[j]++;
     }
 }
 lli mx=-1;
 lli idx=0;
 for(int i=1;i<=n;i++)
 {
     bitset<40> bb(a[i]);
     lli sum=0;
     for(int j=0;j<40;j++)
     {
         if(bb[j])
         {
             if(vc[j]==1)
             sum+=(1ll<<j);
         }
     }
     if(mx<sum)
     {
         mx=sum;
         idx=i;
     }
 }
 swap(a[idx],a[1]);
 cout<<a[1]<<" ";
 for(int i=2;i<=n;i++)
 {
    //  if(i==idx)
     cout<<a[i]<<" ";
 }
}