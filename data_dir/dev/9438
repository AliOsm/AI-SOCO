#include <iostream>
#include <fstream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <deque>
#include <algorithm>
#include <array>
#include <bitset>
#include <complex>
using namespace std;

#define REP(i,n) for(int i=0; i<n; ++i)
#define FOR(i,a,b) for(int i=a; i<=b; ++i)
#define FORR(i,a,b) for (int i=a; i>=b; --i)
#define ALL(c) (c).begin(), (c).end()

typedef long long ll;
typedef vector<int> VI;
typedef vector<ll> VL;
typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef pair<int,int> P;
typedef pair<ll,ll> PL;

int in() { int x; scanf("%d", &x); return x; }
ll lin() { ll x; scanf("%lld", &x); return x; }

const ll mod = 998244353;

ll add(ll x, ll y){
    return (x+y)%mod;
}

ll mul(ll x, ll y){
    return (x%mod)*(y%mod)%mod;
}

ll powll(ll x, ll y){
    ll res = 1LL;
    while(y){
        if (y & 1LL)
            res *= x;
        res %= mod;
        x = (x*x) % mod;
        y >>= 1LL;
    }
    return res;
}

ll divll(ll x, ll y){
    return (x * powll(y,mod-2)) % mod;
}

map<int, int> zip;
VI unzip;
void compress_coordinate(VI x){
    int n = x.size();
    REP(i,n) unzip.push_back(x[i]);
    sort(ALL(unzip));
    unzip.erase(unique(ALL(unzip)), unzip.end());
    REP(i,unzip.size()) zip[unzip[i]] = i;
}

int main() {
    int n, m;
    cin >> n >> m;
    VVI a(n, VI(m));
    VI num;
    REP(i,n) REP(j,m){
        a[i][j] = in() - 1;
        num.push_back(a[i][j]);
    }
    compress_coordinate(num);
    REP(i,n) REP(j,m) a[i][j] = zip[a[i][j]];

    int d = zip.size();
    VVI r(d), c(d);
    REP(i,n) REP(j,m){
        r[a[i][j]].push_back(i);
        c[a[i][j]].push_back(j);
    }

    VVL e(n, VL(m));
    ll rs = 0, rs2 = 0, cs = 0, cs2 = 0, sum = 0, cnt = 0;
    REP(x,d){
        if (x > 0){
            REP(y,r[x].size()){
                ll i = r[x][y];
                ll j = c[x][y];
                ll tmp = (sum + rs2 + cs2 - 2*i*rs - 2*j*cs + cnt*i*i + cnt*j*j) % mod;
                tmp = (tmp + mod) % mod;
                e[i][j] = divll(tmp, cnt);
            }
        }
        REP(y,r[x].size()){
            ll i = r[x][y];
            ll j = c[x][y];
            rs = (rs + i) % mod;
            rs2 = (rs2 + i * i) % mod;
            cs = (cs + j) % mod;
            cs2 = (cs2 + j * j) % mod;
            sum = (sum + e[i][j]) % mod;
        }
        cnt += r[x].size();
    }

    int x, y;
    cin >> x >> y;
    cout << e[x-1][y-1] << endl;

    return 0;
}