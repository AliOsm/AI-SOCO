#include<bits/stdc++.h>
#define all(v) (v).begin(),(v).end()
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ri(x) scanf("%d",&(x))
#define ri2(x,y) scanf("%d %d",&(x),&(y))
#define ri3(x,y,z) scanf("%d %d %d",&(x),&(y),&(z))
#define rll(x) scanf("%lld",&(x))
#define rll2(x,y) scanf("%lld %lld",&(x),&(y))
#define rll3(x,y,z) scanf("%lld %lld %lld",&(x),&(y),&(z))
#define rc(x) scanf("%c",&(x))
using namespace::std;

const long double PI = acos(-1);
const int MOD = 1000000000 +7;

typedef long long ll;
typedef pair<ll,ll> pll;
typedef pair<ll,pll> tll;
typedef pair<int,int> ii;
typedef pair<int,ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<iii> viii;
typedef vector<ll> vll;
typedef vector<pll> vpll;
typedef vector<tll> vtll;
typedef vector<string> vs;
typedef set<int> si;
typedef set<ii> sii;
typedef set<iii> siii;

ll gcd(ll a, ll b){ return b==0?a:gcd(b,a%b);}

int add(ll a, ll b){ return (a%MOD + b%MOD+2*MOD)%MOD;}

int mul(ll a, ll b){ return ((a%MOD+MOD)*(b%MOD+MOD))%MOD;}

ll pow_mod(ll a, ll b){
	ll res = 1LL;
	a = a%MOD;
	while(b){
		if(b&1) res = mul(res,a);
		b >>= 1;
		a = mul(a,a);
	}
	return res;
}

ll fastexp(ll a, ll b){
	ll res = 1LL;
	while(b){
		if(b&1) res = res*a;
		b >>= 1;
		a *= a;
	}
	return res;
}

int gcdExtendido(int a, int b, int *x, int *y){
	if(a == 0){
		*x = 0;
		*y = 1;
		return b;
	}
	int x1, y1;
	int gcd = gcdExtendido(b%a,a,&x1,&y1);
	
	*x = y1-(b/a)*x1;
	*y = x1;
	return gcd;
};

int modInverso(int a, int m){
	int x, y;
	int g = gcdExtendido(a,m,&x,&y);
	if(g!=1) return -1;
	else return (x%m + m)%m;
}

/****************************************
*************P*L*A*N*T*I*L*L*A************
*****************************************/

const int N = 1000+5;

string s;
int k;
int n;
int fi[N];
ll memo[N][N][3];
bool vis[N][N][3];

ll DP(int pos, int left, bool limit){
	if(pos == n) return left == 0;
	if(vis[pos][left][limit]) return memo[pos][left][limit];
	ll ans = 0LL;
	if(limit){
		if(s[pos] == '0'){
			ans = add(ans,DP(pos+1,left,1));
		}
		else{
			ans = add(ans,DP(pos+1,left,0));
			if(left-1>=0)
			ans = add(ans,DP(pos+1,left-1,1));
		}
	}
	else{
		for(int i=0; i<2; i++){
			if(left-i>=0)
			ans = add(ans,DP(pos+1,left-i,0));
		}
	}
	vis[pos][left][limit] = true;
	return memo[pos][left][limit] = ans;
}

int f(int i){
	if(i == 1) return 0;
	if(fi[i]!=-1) return fi[i];
	int sum = 0;
	while(i){
		sum += i&1;
		i >>= 1;
	}
	return 1+f(sum);
}

int main(){
	cin >> s >> k;
	n = s.size();
	memset(fi,-1,sizeof fi);
	for(int i=1; i<=1000; i++){
		fi[i] = f(i);
	}
	ll ans = 0LL;
	for(int i=1; i<=1000; i++){
		if(fi[i]==k-1){
			ans = add(ans,DP(0,i,1));
		}
	}
	if(k == 0) puts("1");
	else if(k == 1){
		ans = add(ans,-1);
		printf("%lld\n",ans);
	}
	else{
		printf("%lld\n",ans);
	}
	return 0;
}
