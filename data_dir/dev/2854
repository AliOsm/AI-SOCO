#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

typedef long long ll;
using namespace std;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000005;
const ll INFLL = 1000000000000000002ll;
const ll MOD = 1000000007;

inline ll min(ll a, ll b, ll c){return min(min(a,b),c);}
inline ll min(ll a, ll b, ll c, ll d){return min(min(min(a,b),c),d);}
inline ll max(ll a, ll b, ll c){return max(max(a,b),c);}
inline ll max(ll a, ll b, ll c, ll d){return max(max(max(a,b),c),d);}

// ----------------------------------------------------------------------------------------------------------

const int RIGHT = 524288;
const int SIZE = 1060005;
int Ans[300005], L[300005], R[300005], N, P[300005], Q, Size[300005], Hi[300005], Ord;
pii T[SIZE];
vector<int> D[300005], E[300005], H[300005], V[300005];

void dfs(int n, int d)
{
    D[d].pb(n);
    L[n] = ++Ord;
    for(int v : E[n]) dfs(v,d+1);
    R[n] = Ord;
}

void update(int x, pii p, int n, int a, int b)
{
    if(a > x || b < x) return;
    if(a == b)
    {
        T[n] = p;
        return;
    }

    int mid = (a+b) / 2;
    update(x,p,2*n,a,mid);
    update(x,p,2*n+1,mid+1,b);

    T[n] = max(T[2*n], T[2*n+1]);
}

pii query(int l, int r, int n, int a, int b)
{
    if(a > r || b < l) return {0,0};
    if(a >= l && b <= r) return T[n];

    int mid = (a+b) / 2;
    pii q1 = query(l,r,2*n,a,mid);
    pii q2 = query(l,r,2*n+1,mid+1,b);
    return max(q1,q2);
}

int main()
{
    cin >> N >> Q;
    f(i,2,N)
    {
        int j;
        scanf("%d", &j);
        E[j].pb(i);
        P[i] = j;
    }
    dfs(1,1);
    fd(d,N,1)
    {
        for(int v : D[d])
        {
            Size[v]++;
            Size[P[v]] += Size[v];
            Hi[P[v]] = max(Hi[P[v]], Size[v]);
            H[Hi[v]].pb(v);
            V[Size[v]].pb(v);
        }
    }
    int to = -1;
    f(sz,1,N)
    {
        while(to < sz/2)
        {
            to++;
            for(int v : H[to])
            {
                update(L[v],{Size[v],v},1,1,RIGHT);
            }
        }
        for(int v : V[sz])
        {
            pii p = query(L[v],R[v],1,1,RIGHT);
            Ans[v] = p.second;
        }
    }
    while(Q--)
    {
        int x;
        scanf("%d", &x);
        if(Ans[x] == 0) Ans[x] = x;
        printf("%d\n", Ans[x]);
    }
}

/*
    a >= (sz+1) / 2
    b <= sz/2;
*/
