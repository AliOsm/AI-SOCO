#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cstring>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <utility>
#include <cassert>
using namespace std;
#define REP(I,N) for (I=0;I<N;I++)
#define rREP(I,N) for (I=N-1;I>=0;I--)
#define rep(I,S,N) for (I=S;I<N;I++)
#define rrep(I,S,N) for (I=N-1;I>=S;I--)
#define FOR(I,S,N) for (I=S;I<=N;I++)
#define rFOR(I,S,N) for (I=N;I>=S;I--)
typedef unsigned long long ULL;
typedef long long LL;
const int INF=0x3f3f3f3f;
const LL INFF=0x3f3f3f3f3f3f3f3fll;
const LL M=1e9+7;
const LL maxn=1e6+7;
const double eps=0.00000001;
LL gcd(LL a,LL b){return b?gcd(b,a%b):a;}
template<typename T>inline T abs(T a) {return a>0?a:-a;}
template<typename T>inline T powMM(T a,T b){T ret=1;for (;b;b>>=1ll,a=1ll*a*a%M) if (b&1) ret=1ll*ret*a%M;return ret;}

//MDZZ��������
//����Ϊ��NIM
vector<int> edge[maxn],E[maxn];
int low[maxn],dfn[maxn],tot,vis[maxn];
stack<int> S;
int tarjin(int x){
    low[x]=dfn[x]=++tot;
    S.push(x);vis[x]=1;
    for (int v:edge[x]){
        if (!dfn[v]){
            if (tarjin(v)) return 1;
            low[x]=min(low[x],low[v]);
        }else if (vis[v])
            low[x]=min(low[x],dfn[v]);
    }if (low[x]==dfn[x]){
        int cnt=0;
        while (1){
            int now=S.top();S.pop();
            vis[now]=0;cnt++;
            if (now==x) break;
        }if (cnt>1) return 1;
    }return 0;
}
int n,m;
int i,j,k;
int s;
int nxt[maxn][2];
void dfs(int x,int fa,int flag){
    for (int v:E[x]) if (!nxt[v][flag^1]){
        nxt[v][flag^1]=x;
        dfs(v,x,flag^1);
    }
}
int main(){
    scanf("%d%d",&n,&m);
    FOR(i,1,n){
        int d;
        scanf("%d",&d);
        REP(j,d){
            scanf("%d",&k);
            edge[i].push_back(k);
            E[k].push_back(i);
        }
    }scanf("%d",&s);
    FOR(i,1,n) if (!edge[i].size()) dfs(i,0,0);
//    FOR(i,1,n) printf("%3d ",nxt[i][0]);puts("");
//    FOR(i,1,n) printf("%3d ",nxt[i][1]);puts("");
    if (nxt[s][1]){
        puts("Win");
        bool flag=1;
        for (;s;s=nxt[s][flag],flag^=1) printf("%d ",s);
    }else if (tarjin(s)) puts("Draw");
    else puts("Lose");
}
/*
*/
