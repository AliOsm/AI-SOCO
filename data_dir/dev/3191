#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <ll, int> pli;
typedef pair <db, db> pdd;
typedef vector<int> vi;
#define m1 make_pair
#define pb push_back
#define flush fflush(stdout)
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define reset(x,v) memset(x,v,sizeof(x))
#define sz(x) (int)(x.size())
#define ff first
#define ss second
#define endl "\n"
#define int unsigned long long int
#define debug(x) (cerr << #x << ": " << x << "\n")
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0)return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p;}
const ll hell = 1000000007;
const int INF = 0x3f3f3f3f;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;

typedef tree<int, null_type, less<int>, rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;
vi adj[100001];int color[100001];
void dfs(int u)
{
    color[u]=1;
    for(int v:adj[u])
    {
        if(!color[v])
            dfs(v);
    }
}

int32_t main()
{
    IOS;
    int n,m,u,v;
    cin>>n>>m;
    for(int i=0;i<m;i++)
    {
        cin>>u>>v;
        adj[u].pb(v);
        adj[v].pb(u);
    }
    int cnt=0;
    for(int i=1;i<=n;i++)
        if(!color[i])
        {
            cnt++;
            dfs(i);
        }
    //debug(cnt);
    if(cnt>1)
    {
        cout<<-1<<endl;
        return 0;
    }
    reset(color,0);
    color[1]=1;
    for(int i=0;i<adj[1].size();i++)
    {
        v=adj[1][i];
            color[v]=-1;
    }
    for(int i=1;i<=n;i++)
    {
        if(color[i]==0)
            color[i]=1;
        else if(color[i]==-1)
            color[i]=0;
    }
   // for(int i=1;i<=n;i++)
     //   debug(color[i]);
    int j=0;
    for(int i=1;i<=n;i++)
        if(color[i]==0)
        {
            j=i;
            break;
        }
       if(!j)
       {
           cout<<-1<<endl;
           return 0;
       }
    
    color[j]=2;
    for(int i=0;i<adj[j].size();i++)
    {
        v=adj[j][i];
        if(color[v]==0)
            color[v]=-1;
    }
    for(int i=1;i<=n;i++)
    {
        if(color[i]==0)
            color[i]=2;
        else if(color[i]==-1)
            color[i]=0;
    }
   // for(int i=1;i<=n;i++)
     //   debug(color[i]);
    j=0;
    for(int i=1;i<=n;i++)
        if(!color[i])
        {
            j=i;
            break;
        }
   // cout<<j<<endl;
    if(!j)
    {
        cout<<-1<<endl;
        return 0;
    }
    color[j]=3;
    for(int i=0;i<adj[j].size();i++)
    {
        v=adj[j][i];
        if(color[v]==0)
            color[v]=-1;
    }
    for(int i=1;i<=n;i++)
    {
        if(color[i]==0)
            color[i]=3;
        else if(color[i]==-1)
            color[i]=0;
    }
   // for(int i=1;i<=n;i++)
     // debug(color[i]);
    vi f[4];
    for(int i=1;i<=n;i++)
    {
        if(color[i]==0||color[i]==-1)
        {
            cout<<-1<<endl;
            return 0;
        }
        else
            f[color[i]].pb(i);
        
    }
    if((f[1].size()==0)||(f[2].size()==0)||(f[3].size()==0))
    {
        cout<<-1<<endl;
        return 0;
    }
    for(int i=1;i<=3;i++)
    {
        for(j=0;j<f[i].size();j++)
        {
            u=f[i][j];int f1[4]={0};
            for(int k:adj[u])
            {
                f1[color[k]]++;
            }
            if(f1[i])
            {
                
                ///cout<<i<<" "<<u<<endl;
                cout<<-1<<endl;
                
                return 0;
            }
            if(i==1&&(f1[2]!=f[2].size()||f1[3]!=f[3].size()))
            {
                 //cout<<i<<" "<<u<<endl;
                cout<<-1<<endl;
                return 0;
            }
            if(i==2&&(f1[1]!=f[1].size()||f1[3]!=f[3].size()))
            {
               // cout<<i<<" "<<u<<endl;
                cout<<-1<<endl;
                return 0;
            }
            if(i==3&&(f1[2]!=f[2].size()||f1[1]!=f[1].size()))
            {
                //cout<<i<<" "<<u<<endl;
                cout<<-1<<endl;
                return 0;
            }
        }
    }
    for(int i=1;i<=n;i++)
        cout<<color[i]<<" ";
    cout<<endl;
    return 0;
}

