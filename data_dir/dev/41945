#include <bits/stdc++.h>
#define fst first
#define snd second
#define fore(i,a,b) for(int i=a,ThxDem=b;i<ThxDem;++i)
#define pb push_back
#define ALL(s) s.begin(),s.end()
#define FIN ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define SZ(s) int(s.size())
using namespace std;
typedef long long ll;
typedef pair<int,int> ii;

struct node{
	int sum,pref,suf;
	node(){}
	node(int sum, int pref, int suf):sum(sum),pref(pref),suf(suf){}
};

node oper(node a, node b){
	return node(a.sum+b.sum,max(a.pref,a.sum+b.pref),max(b.suf,b.sum+a.suf));
}
node NEUT=node(0,-1e9,-1e9);

struct STree { // segment tree for min over integers
	vector<node> st;int n;
	STree(int n): st(4*n+5,NEUT), n(n) {}
	void upd(int k, int s, int e, int p, int v){
		if(s+1==e){st[k]=node(v,v,v);return;}
		int m=(s+e)/2;
		if(p<m)upd(2*k,s,m,p,v);
		else upd(2*k+1,m,e,p,v);
		st[k]=oper(st[2*k],st[2*k+1]);
	}
	node query(int k, int s, int e, int a, int b){
		if(s>=b||e<=a)return NEUT;
		if(s>=a&&e<=b)return st[k];
		int m=(s+e)/2;
		return oper(query(2*k,s,m,a,b),query(2*k+1,m,e,a,b));
	}
	void upd(int p, int v){upd(1,0,n,p,v);}
	node query(int a, int b){return query(1,0,n,a,b);}
}; // usage: STree rmq(n);rmq.init(x);rmq.upd(i,v);rmq.query(s,e);

int main(){FIN;
	int t; cin>>t;
	while(t--){
		int n,k; cin>>n>>k;
		vector<int> a(n);
		int is=0;
		fore(i,0,n) cin>>a[i],is|=a[i]==k;
		if(!is){	//no esta k en el arreglo
			cout<<"no\n";
			continue;
		}
		string ans=n==1?"yes":"no";

		STree st(n);
		fore(i,0,n) st.upd(i,a[i]<k?-1:1);
		fore(i,0,n) if(a[i]>=k){
			auto it=st.query(0,i);
			if(it.suf>=0)ans="yes";
			it=st.query(i+1,n);
			if(it.pref>=0)ans="yes";
		}
		cout<<ans<<"\n";
	}
}