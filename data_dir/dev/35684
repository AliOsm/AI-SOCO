#include <bits/stdc++.h>
#define pb push_back
#define Nmax 1000005
#define INF (1LL<<61)
#define MOD 1000000007
#define mp make_pair
#define fi first
#define se second
#define ch s[p]-'a'
#define pii pair <long long,int>

using namespace std;

int n,a[Nmax],tip;
long long dp[Nmax];
vector <pii> L[Nmax];
priority_queue <pii> Q;

inline void Build(int nod, int st, int dr)
{
    if(st==dr)
    {
        L[nod+n].pb(mp(st,0));
        return;
    }
    int mij=((st+dr)>>1);
    Build(2*nod,st,mij);
    Build(2*nod+1,mij+1,dr);

    L[nod+n].pb(mp(2*nod+n,0));
    L[nod+n].pb(mp(2*nod+1+n,0));

}

inline void Build1(int nod, int st, int dr)
{
    if(st==dr)
    {
        L[st].pb(mp(nod+5*n,0));
        return;
    }
    int mij=((st+dr)>>1);
    Build1(2*nod,st,mij);
    Build1(2*nod+1,mij+1,dr);

    L[2*nod+5*n].pb(mp(nod+5*n,0));
    L[2*nod+1+5*n].pb(mp(nod+5*n,0));
}

inline void Solve(int nod, int st, int dr, int x, int y, int X, int cost)
{
    if(st==x && y==dr)
    {
        L[X].pb(mp(nod+n,cost));
        return;
    }
    int mij=((st+dr)>>1);
    if(y<=mij) Solve(2*nod,st,mij,x,y,X,cost);
    else
        if(x>mij) Solve(2*nod+1,mij+1,dr,x,y,X,cost);
        else
        {
            Solve(2*nod,st,mij,x,mij,X,cost);
            Solve(2*nod+1,mij+1,dr,mij+1,y,X,cost);
        }
}

inline void Solve1(int nod, int st, int dr, int x, int y, int X, int cost)
{
    if(st==x && y==dr)
    {
        L[nod+5*n].pb(mp(X,cost));
        return;
    }
    int mij=((st+dr)>>1);
    if(y<=mij) Solve1(2*nod,st,mij,x,y,X,cost);
    else
        if(x>mij) Solve1(2*nod+1,mij+1,dr,x,y,X,cost);
        else
        {
            Solve1(2*nod,st,mij,x,mij,X,cost);
            Solve1(2*nod+1,mij+1,dr,mij+1,y,X,cost);
        }
}

inline void Dijkstra(int nod)
{
    pii w;

    for(int i=1;i<Nmax;++i) dp[i]=INF;
    dp[nod]=0; Q.push(mp(0,nod));

    while(!Q.empty())
    {
        w=Q.top(); Q.pop();
        for(auto it : L[w.se])
            if(dp[it.fi] > dp[w.se]+it.se)
            {
                dp[it.fi]=dp[w.se]+it.se;
                Q.push(mp(-dp[it.fi],it.fi));
            }
    }
}

int main()
{
    int i,j,x,y,z,S,m,cost;
    #ifndef ONLINE_JUDGE
        freopen ("date.in","r",stdin);
        freopen ("date.out","w",stdout);
    #endif
    cin.sync_with_stdio( false );
    cin>>n>>m>>S;
    Build(1,1,n);
    Build1(1,1,n);
    while(m--)
    {
        cin>>tip>>x>>y>>z;
        if(tip==1) L[x].pb(mp(y,z));
        else
        {
            cin>>cost;
            if(tip==2) Solve(1,1,n,y,z,x,cost);
            else Solve1(1,1,n,y,z,x,cost);
        }
    }

    Dijkstra(S);
    for(i=1;i<=n;++i)
        if(dp[i]==INF) cout<<"-1 ";
        else cout<<dp[i]<<" ";

    return 0;
}
