#pragma GCC option("arch=native","tune=native","no-zero-upper")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#pragma GCC optimize("Ofast")
#include "bits/stdc++.h"
using namespace std;
#ifndef LOCAL
#define endl '\n'
#endif

#define fr(i, a, b) for(int i = a; i <= b; i++)
#define rf(i, a, b) for(int i = a; i >= b; i--)
#define pf push_front
#define pb push_back
#define fi first
#define se second
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define sz(x) (int)x.size()
#define rsz resize()
#define lb lower_bound
#define ub upper_bound
#define br cout << endl

typedef long long ll;
typedef long double f80;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;

int pct(int x) { return __builtin_popcount(x); }
int pct(ll x) { return __builtin_popcountll(x); } 
int bit(int x) { return 31 - __builtin_clz(x); } // floor(log2(x))
int bit(ll x) { return 63 - __builtin_clzll(x); } // floor(log2(x))
int cdiv(int a, int b) { return a / b + !(a < 0 || a % b == 0); }
ll cdiv(ll a, ll b) { return a / b + !(a < 0 || a % b == 0); }

template<typename T>
void leftShift(vector<T> &v, ll k) { k %= sz(v); if(k < 0) k += sz(v); rotate(v.begin(), v.begin() + k, v.end()); }
template<typename T>
void rightShift(vector<T> &v, ll k) { leftShift(v, sz(v) - k); }

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll rand(ll l, ll r){
	uniform_int_distribution<ll> uid(l, r);
	return uid(rng);
}

inline int nxt() {
	int x;
	cin >> x;
	return x;
}

inline ll nxtll() {
	ll x;
	cin >> x;
	return x;
}

void pr() {}
void sc() {}

template <typename Head, typename... Tail>
void pr(Head H, Tail... T) { cout << H << " "; pr(T...); }

template <typename Head, typename... Tail>
void sc(Head &H, Tail &... T) { cin >> H; sc(T...); }

#ifdef LOCAL
#define debug(...) cerr << "[L:" << __LINE__ << "][" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

#ifndef LOCAL
string to_string(__int128 x) {
	string s = "";
	bool neg = 0;
	if(x < 0) { s += "-"; neg = 1; x = -x; }
	if(!x) s += '0';
	while(x) {
		int rem = x % 10;
		s += to_string(rem);
		x /= 10;
	}
	reverse(s.begin() + neg, s.end());
	return s;
}
#endif

const int mod = 1e9 + 7; // 998244353;

int pwr(int a,int b) {
	int ans = 1;
	while(b) {
		if(b & 1) ans = (ans * 1LL * a) % mod;
		a = (a * 1LL * a) % mod;
		b >>= 1;
	}
	return ans;
}

/*
	Lookout for overflows!!
	Check array sizes!!
	Clear before test cases!!
	Use the correct modulo!!
	Check for corner cases!!
	Are you forgetting something?!
	Read problem statement carefully!!!
*/

const int N = 1e5 + 5;
vector<int> g[N];
pii dp[N];

int calc[N];

int n;

int lbound[N], rbound[N];
int k;

pii dfs(int u,int p) {
	pii dpu = {0, 1};
	int maxi = 1;
	bool better = 0;
	for(int &v : g[u]) {
		if(v != p) {
			pii dpv = dfs(v, u);
			dpu.fi += dpv.fi;
			dpu.se = max(dpu.se, dpv.se + 1);
			if(dpv.se + maxi >= k) { better = 1; }
			maxi = max(maxi, dpv.se + 1);
		}
	}
	if(maxi >= k) better = 1;
	if(better) {
		dpu.fi++;
		dpu.se = 0;
	}
	return dpu;
}

int get(int kk) {
	k = kk;
	if(k > n) return 0;
	if(calc[k] != -1) return calc[k];
	int val = dfs(1, 0).fi;
	lbound[val] = max(lbound[val], k);
	for(int vall = val + 1; vall <= n; vall++) {
	    if(rbound[vall] <= k) break;
		rbound[vall] = k;
	}
	return calc[k] = val;
}

void solve() {
	memset(calc, -1, sizeof calc);
	sc(n);
	fr(i, 0, n) {
		lbound[i] = -1;
		rbound[i] = (n / max(i, 1)) + 1;
	}
	fr(i, 1, n - 1) {
		int u, v;
		sc(u, v);
		g[u].pb(v);
		g[v].pb(u);
	}
	const int B = sqrt(n);
	fr(k, 1, n) {
		int val = get(k);
		int l = lbound[val], r = rbound[val];
		if(k <= B) r = l + 1;
		if(l != r - 1 && get(r - 1) == val) l = r - 1;
		while(r - l > 1) {
			int m = (l + r) >> 1;
			if(get(m) == val) l = m;
			else r = m;
		}
		fr(j, k, l) {
			cout << val << endl;
		}
		k = l;
	}
}

signed main() {
	ios :: sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	int t;
	// cin >> t;
	t = 1;
	for(int tt = 1; tt <= t; tt++) {
		solve();
	}
	return 0;
}