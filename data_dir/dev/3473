// TestPrj.cpp : main project file.
// inplace_merge(T + beg, T + mid + 1, T + end + 1);
// unsigned Long hash[maxn],p = 999999999989; hash[0] = 1; fo(i,1,maxn)hash[i] = hash[i-1] * p;
// #include "stdafx.h"
// #include <bits/stdc++.h> __builtin_popcount(n);
/*
ID: Tariqul
PROG: 
LANG: C++
*/


#include <algorithm> 
#include <cctype> 
#include <cmath> 
#include <cstdio> 
#include <cstdlib> 
#include <cstring> 
#include <deque> 
#include <iostream> 
#include <list> 
#include <map> 
#include <numeric> 
#include <queue> 
#include <set> 
#include <sstream> 
#include <stack> 
#include <string> 
#include <vector>

using namespace std; 

#define fo(i,j,n) for(i=j;i<n;++i)
#define Fo(i,j,n) for(i=n-1;i>=j;--i)
#define foo(i,j,v) fo(i,j,sz(v))
#define Foo(i,j,v) Fo(i,j,sz(v))
#define li(v) v.begin(),v.end()
#define sz(v) ((int)v.size())
#define CLR(a,v) memset((a),(v),sizeof(a))
#define inf 1e9 + 10
typedef long long Long;
//typedef __int64 Long;
#define pi (2*acos(0))
#define eps 1e-9

#define two(X) (1<<(X))
#define twoL(X) (((Long)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)

char BUFFER[100000 + 5];
bool readn(int &n)	{ return scanf("%d",&n) == 1; } 
bool readl(Long &n)	{ return scanf("%I64d",&n) == 1; } 
bool readd(double &n){ return scanf("%lf",&n) == 1; } 
bool reads(string &s){ s = ""; int n = scanf("%s",BUFFER); if(n == 1)s = BUFFER; return n == 1; }
bool readln(string &s){ char *valid = gets(BUFFER); if(valid)s = BUFFER; return ((bool)valid); }
#ifdef localhost
void Print(Long &n, bool printNewLine = true)	{ printNewLine ? printf("%lld\n",n) : printf("%lld",n);  }
#else
void Print(Long &n, bool printNewLine = true)	{ printNewLine ? printf("%I64d\n",n) :  printf("%I64d",n); }
#endif // localhost

const int maxn = 65;
int graph[maxn][maxn][maxn],dp[maxn][maxn][maxn],cost[maxn][maxn];

void init(int n, int m)
{
	int i,j,k,t;
	fo(i,0,n)fo(j,0,n)cost[i][j] = inf; 
	fo(k,0,m)fo(i,0,n)fo(j,0,n)readn(graph[k][i][j]);
	fo(t,0,m)fo(k,0,n)fo(i,0,n)fo(j,0,n)if(graph[t][i][k] + graph[t][k][j] < graph[t][i][j])graph[t][i][j] = graph[t][i][k] + graph[t][k][j];
	fo(t,0,m)fo(i,0,n)fo(j,0,n)cost[i][j] = min(cost[i][j],graph[t][i][j]);
	fo(t,0,maxn)fo(i,0,maxn)fo(j,0,maxn)dp[i][j][t] = inf;
	fo(t,0,maxn)fo(i,0,maxn)dp[i][i][t] = 0;
	fo(t,0,n+1)fo(i,0,n)fo(j,0,n)
	{
		fo(k,0,n)
		{
			dp[i][k][t+1] = min(dp[i][k][t+1],dp[i][j][t] + cost[j][k]);
		}
	}	
}

int main()
{
	#ifdef localhost
	freopen("E://input.txt","r",stdin);
	//freopen("E://output.txt","w",stdout);
	#endif

	int n,m,k,q,a,b; cin >> n >> m >> q; init(n,m);
	while(q--)
	{
		readn(a); readn(b); readn(k); a--; b--; k = min(k,n-1); k++;
		printf("%d\n",dp[a][b][k]);
	}
	
	return 0;
}