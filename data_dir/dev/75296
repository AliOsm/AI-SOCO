#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (ll) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <ll, ll> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const ll inf = numeric_limits <ll>::max() >> 1;
const ll N = 2e5 + 1;
ll n, k;

ll dp[N];
ll lf[N];
ll ct[N];

string t;

struct Node {
    ll l, r;
    ll mnm;
} node[N << 2];

void input() {
    cin >> n >> k;
    cin >> t; t = '#' + t;
    for(ll i = 1; i <= n; ++i) {
        lf[i] = i;
        ct[i] = i;
    }
    for(ll i = 1; i <= n; ++i) {
        if(t[i] == '1') {
            ll r = min(n, i + k);
            if(max(1ll, i - k) < lf[r]) {
                lf[r] = max(1ll, i - k);
                ct[r] = i;
            }
        }
    }
}

void build(ll id, ll l, ll r) {
    node[id].l = l;
    node[id].r = r;
    if(l == r) {
        return;
    }
    ll q = l + r >> 1;
    build(l(id), l, q);
    build(r(id), q + 1, r);
}

ll query(ll id, ll l, ll r) {
    if(node[id].l == l && node[id].r == r) {
        return node[id].mnm;
    }
    ll res = inf;
    ll q = node[id].l + node[id].r >> 1;
    if(l <= q) {
        res = min(res, query(l(id), l, min(q, r)));
    }
    if(r > q) {
        res = min(res, query(r(id), max(q + 1, l), r));
    }
    return res;
}

void update(ll id, ll i, ll x) {
    if(node[id].l == node[id].r) {
        node[id].mnm = x;
        return;
    }
    ll q = node[id].l + node[id].r >> 1;
    if(i <= q) {
        update(l(id), i, x);
    } else {
        update(r(id), i, x);
    }
    node[id].mnm = min(node[l(id)].mnm, node[r(id)].mnm);
}

void solve() {
    build(0, 0, n);
    for(ll i = 1; i <= n; ++i) {
        dp[i] = query(0, lf[i] - 1, i - 1) + ct[i];
        dp[i] = min(dp[i], dp[i - 1] + i);
        update(0, i, dp[i]);
    }
    cout << dp[n] << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
