// 22.03.2018


/*
������� ���������� ���������� �� 1-� ������� (������) �� ���� ��������� - ���
������� ���������� ���������� �� 2-� ������� (������) �� ���� ��������� - ���
� = ���������� �� 1-������ �� 2-������
��� ������ ������� �
   ���������� ������ ������� �, ������� � ��� �� �������
   ���� �� ([������ �� �] + 1 + [�� � �� ������]) ������ �, �� ���++
*/


# include <iostream>
# include <cstdio>
# include <cstring>
# include <string>
# include <cstdlib>
# include <cmath>
# include <iomanip>
# include <vector>
//                 insert, append, size
# include <stack>
//                 push, pop, top, empty
# include <queue>
//                 push, pop, front, empty
# include <map>
# include <list>
//                 push_back, begin, end
# include <algorithm>


# define iabs(x) ( (x) < 0 ? (-(x)) : (x) )
# define sqr(x) ( (x) * (x) )


//# define lint long long int
# define lint __int64

# define fi first
# define se second

# define x XX_
# define y YY_


using namespace std;


typedef pair <int, int> Pair;
typedef pair <int, Pair> Trio;
typedef pair <Pair, Pair> Quattro;

struct E
{
   int info;
   E * next;
   E (int pinfo=0, E * pnext=NULL) { info = pinfo, next = pnext; }
};

const int N = 1001;
const int M = 20;
const int K = 20;
const int INF = 2000000000;
const double eps = 1e-12;


int k, m, n, s, t, u, v, L;
bool ok;
E * e [N];
int ds [N], dt [N];
bool num [N];


int F ();
void BFS (int start, int * dist);


int main ()
{
# ifndef ONLINE_JUDGE
   freopen ("D.TXT", "r", stdin);
   freopen ("D.OUT", "w", stdout);
# endif

   ios_base::sync_with_stdio (0);

   cin >> n >> m >> s >> t;
   s--, t--;

# ifndef ONLINE_JUDGE
   cout << n << " " << m << " " << s << " " << t << endl;
# endif

   for ( int i=0; i < m; i++ )
   {
      cin >> u >> v;
      u--, v--;
      e [u] = new E (v, e [u]);
      e [v] = new E (u, e [v]);
   }

# ifndef ONLINE_JUDGE
   cout << "n = " << n << "   m = " << m << endl;
   cout << "s = " << s << "   t = " << t << endl;
   for ( int i=0; i < n; i++ )
   {
      cout << i << " : ";
      for ( E * p = e [i]; p != NULL; p = p->next )
         cout << p->info << " ";
      cout << endl;
   }
# endif

   BFS (s, ds);

   BFS (t, dt);

   L = ds [t];

# ifndef ONLINE_JUDGE
   cout << "L = " << L << endl;
   for ( int i=0; i < n; i++ )
      cout << i << " [" << ds [i] << ", " << dt [i] << "]  ";
/*
   for ( int i=0; i < n; i++ )
      cout << ds [i] << " ";
   cout << endl;
   for ( int i=0; i < n; i++ )
      cout << dt [i] << " ";
*/
   cout << endl;
# endif

   for ( int i=0; i < n; i++ )
   {
      for ( int j (0); j < n; j++ )
         num [j] = false;
      num [i] = true; num [s] = true; num [t] = true;
      for ( E * p = e [i]; p != NULL; p=p->next )
         num [p->info] = true;

      for ( int j (0); j < n; j++ )
         if ( ! num [j] )
         {
            if ( ds [i] + 1 + dt [j] >= L && ds [j] + 1 + dt [i] >= L )
            {
               k++;
               e [j] = new E (i, e [j]);
# ifndef ONLINE_JUDGE
               cout << k << " {" << i << ", " << j << "}" << endl;
# endif
            }
         }
   }

   cout << k;

//   system ("pause");
   return 0;
}

void BFS (int start, int * dist)
{
   queue <int> q;
   q.push (start);
   dist [start] = 0;
   bool * visit = new bool [n];
   for ( int i=0; i < n; i++ )
      visit [i] = false;
   visit [start] = true;
   for ( ; ! q.empty (); )
   {
      int v = q.front (); q.pop ();
      int dd = dist [v] + 1;
      for ( E * p = e [v]; p != NULL; p=p->next )
         if ( ! visit [p->info] )
         {
            dist [p->info] = dd,
            visit [p->info] = true;
            q.push (p->info);
         }
   }
   delete visit;
}

int F ()
{
   return 0;
}
