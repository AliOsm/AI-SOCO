#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cassert>
#include <queue>
#include <bitset>
#include <ctime>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define pb push_back
#define fst first
#define snd second
#define SZ(x) ((int)x.size())
typedef long long ll;
#define dforn(i, n) for(int i = n - 1; i >= 0; i--)
#define asbm(x) (bitset<2>((x)).to_string().c_str())
const int MAXN=500050;
const int MAXBM=(1<<12)+50;

int n,m,q,W[15],WU[MAXBM][MAXBM],M[MAXBM],hm[105],ans[MAXN];
vector<pair<int,int>> Q[MAXBM];

int readBm(){
  char s[20];int bm=0;
  scanf(" %s",s);
  forn(j,n){
    if(s[j]=='1')bm^=(1<<j);
  }
  return bm;
}

int computeWu(int bm1, int bm2){
  int ans=0;
  forn(i,n){
    if( (bm1&(1<<i))==(bm2&(1<<i)) ){
      ans+=W[i];
    }
  }
  return ans;
}

int main() {
  //~ freopen("D.in","r",stdin);
  while(scanf("%d%d%d",&n,&m,&q)>=1){
    forn(i,MAXBM)Q[i].clear();
    memset(M,0,sizeof(M));
    memset(hm,0,sizeof(hm));
    memset(WU,0,sizeof(WU));
    memset(ans,0,sizeof(ans));
    memset(W,0,sizeof(W));
    
    forn(i,n){
      scanf("%d",&W[i]);
    }
    forn(i,m){
      int bm=readBm();
      M[bm]++;
    }
    forn(qt,q){
      int bm=readBm(),k;
      scanf("%d",&k);
      Q[bm].pb(make_pair(k,qt));
    }
    
    forn(i,1<<n){
      forn(j,1<<n){
        WU[i][j]=computeWu(i,j);
      }
    }
    
    forn(bm,1<<n){
      sort(Q[bm].begin(),Q[bm].end());
      memset(hm,0,sizeof(hm));
      forn(bm2,1<<n){
        if(WU[bm][bm2]<105){
          hm[WU[bm][bm2]]+=M[bm2];
        }
      }
      forr(i,1,105){
        hm[i]+=hm[i-1];
      }
      vector<pair<int,int>> &V=Q[bm];
      forn(i,SZ(V)){
        pair<int,int> query=V[i];
        ans[query.second]=hm[query.first];
      }
    }
    forn(i,q){
      printf("%d\n",ans[i]);
    }
  }
  return 0;
}
