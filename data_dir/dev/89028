#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#define double long double
#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define FORE(i, a, n) for (i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << x << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-9
//#define endl "\n"
#define pdd pair<double, double>
bool gt(double a, double b) { return a > b+EPS; }

const int MAXN = 101*1000;

int n, m, k;
vector<int> V[MAXN];

int need(int cnt) {
	int res = -1U/2;
	FOR(i, 0, MAXN) if (Size(V[i]) >= cnt) {
		FOR(j, cnt-1, Size(V[i])) res = min(res, V[i][j]-V[i][j-cnt+1]+1-cnt);
	}
	return res;
}

int main() {
	ios::sync_with_stdio(false);
	cin >> n >> m >> k;
	FOR(i, 0, n) {
		int x;
		cin >> x;
		V[x].pb(i);
	}
	int mn = 0, mx = n;
	while (mn < mx) {
		int mid = (mn+mx+1)/2;
		if (need(mid) <= k)
			mn = mid;
		else
			mx = mid-1;
	}
	cout << mn << endl;
	return 0;
}

