/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author lolspeed
 */

/*
I am but a farce, a satire of stability
Insecurity is an uphill struggle, it's me versus the world
The shore still starves,
For another,

Novel of my shipwrecked being tied up dried alive still breathing
The sands of time, from me are running out,
my hands shake, in apprehension,
Of every action I'm guilty of playing the victim,
The shore still starves,
For another,

Novel of my shipwrecked being tied up dried alive still breathing
The sands of time, for me are running out.

Just like the embrace of arms that made you
They'll surely destroy you.
Just like the embrace of arms that made you
They'll surely destroy you.

It's time for your panic,
Then it kills and makes, you manic,

Making its way inside - relax, it's alright,
Making its way inside - relax, it's alright
Panic grips your frantic breathing
I can't breathe, I can't breathe,i cant breathe!

Just like the embrace of arms that made you
They'll surely destroy you.
Just like the embrace of arms that made you
They'll surely destroy you.

Just like the embrace of arms that made you
They'll surely destroy you.
Just like the embrace of arms that made you
They'll surely destroy you.
*/
#include <fstream>


#include <iostream>
using namespace std;



#include <fstream>


#include <vector>


#include <iterator>

#include <string>
#include <stdexcept>
#ifdef SPCPPL_DEBUG
	#define SPCPPL_ASSERT(condition) \
	if(!(condition)) { \
		throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
	}
#else
#endif


#include <algorithm>


#define forn(i, n) for (int i = 0; i < int(n); i++)

#define el "\n";








//SWISTAKKK





#ifdef LOCAL
#define debug(x) {cerr <<#x<<" = " <<x<<"\n"; }
#define debug2(x, y) {cerr <<#x<<" = " <<x<<", "<<#y <<" = " <<y <<"\n";}
#define debug3(x, y, z) {cerr <<#x<<" = " <<x<<", "<<#y <<" = " <<y <<", "<<#z<<" = "<<z<<"\n";}
#define debug4(x, y, z, t) {cerr <<#x<<" = " <<x<<", "<<#y <<" = " <<y <<", "<<#z<<" = "<<z<<", "<<#t <<" = " <<t<<"\n";}
#define debugv(x) {{cerr <<#x <<" = "; FORE(itt, (x)) cerr <<*itt <<", "; cerr <<"\n"; }}
#else
#endif
#define make2(type, x, y) type x, y; in>>x>>y;
using namespace std;

template<class T1, class T2>
ostream& operator<< (ostream &out, std::pair<T1, T2> pair) { return out << "(" << pair.first << ", " << pair.second << ")";}

template<class T> void ResizeVec(T&, vector<int>) {}
template<class T> void ResizeVec(vector<T>& vec, vector<int> sz) {
    vec.resize(sz[0]); sz.erase(sz.begin()); if (sz.empty()) { return; }
    for (T& v : vec) { ResizeVec(v, sz); }
}









using namespace std;

class TaskB {
public:
	void solve(std::istream& in, std::ostream& out) {
        make2(int, rows, cols);
        vector<string> input(rows);
        forn(i, rows) {
            in >> input[i];
        }
        vector<vector<int>> rowvals(26, vector<int>(rows, 0));
        vector<vector<int>> colvals(26, vector<int>(cols, 0));
        forn(row, rows){
            forn(col, cols){
                rowvals[input[row][col]-'a'][row]++;
                colvals[input[row][col]-'a'][col]++;
            }
        }
        forn(row, rows){
            forn(col, cols){
                bool fine = true;
                char val = input[row][col];
                if (rowvals[val-'a'][row] > 1 || colvals[val-'a'][col] > 1) input[row][col] = '?';
            }
        }
        forn(row, rows){
            forn(col, cols){
                if (input[row][col] != '?') out << input[row][col];
            }
        }
        out << el;
	}
};


int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	TaskB solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
