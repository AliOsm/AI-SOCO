#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

typedef long long ll;
using namespace std;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000002;
const ll INFLL = 100000000000000000ll;
const ll MOD = 1000000007;

// ----------------------------------------------------------------------------------------------------------

bool V[205][205][205];
int N;
string S;

int main()
{
    cin >> N;
    cin >> S;
    int rr = 0, gg = 0, bb = 0;
    f(i,0,N-1)
    {
        if(S[i] == 'R') rr++;
        if(S[i] == 'G') gg++;
        if(S[i] == 'B') bb++;
    }

    queue<pair<int,pii>> q;
    q.push({rr,{gg,bb}});
    V[rr][gg][bb] = true;

    while(!q.empty())
    {
        pair<int,pii> p = q.front();
        q.pop();

        int r = p.first;
        int g = p.second.first;
        int b = p.second.second;

        if(r >= 2 && !V[r-1][g][b])
        {
            V[r-1][g][b] = true;
            q.push({r-1,{g,b}});
        }
        if(g >= 2 && !V[r][g-1][b])
        {
            V[r][g-1][b] = true;
            q.push({r,{g-1,b}});
        }
        if(b >= 2 && !V[r][g][b-1])
        {
            V[r][g][b-1] = true;
            q.push({r,{g,b-1}});
        }

        if(r>0 && g>0 && !V[r-1][g-1][b+1])
        {
            V[r-1][g-1][b+1] = true;
            q.push({r-1,{g-1,b+1}});
        }
        if(r>0 && b>0 && !V[r-1][g+1][b-1])
        {
            V[r-1][g+1][b-1] = true;
            q.push({r-1,{g+1,b-1}});
        }
        if(g>0 && b>0 && !V[r+1][g-1][b-1])
        {
            V[r+1][g-1][b-1] = true;
            q.push({r+1,{g-1,b-1}});
        }
    }

    string ans;
    if(V[0][0][1]) ans += 'B';
    if(V[0][1][0]) ans += 'G';
    if(V[1][0][0]) ans += 'R';
    cout << ans;
}
