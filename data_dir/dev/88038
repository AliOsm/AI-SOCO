#include <bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef pair <ll, ll> pll;

const int Max = 2e5 + 10;
const int Mod = 1e9 + 7;
const ll Inf = 1LL << 62;

int BIT[Max], len;
int nxt[127][Max];
char str[Max];

void update(int idx, int val) {
	if(idx <= 0) {
		return;
	}
	while(idx < Max) {
		BIT[idx] += val;
		idx += idx & -idx;
	}
}

int query(int idx) {
	int ret = 0;
	if(idx <= 0) {
		return 0;
	}
	while(idx > 0) {
		ret += BIT[idx];
		idx -= idx & -idx;
	}
	return ret;
}

int query(int l, int r) {
	return query(r) - query(l - 1);
}

int main() {
#ifdef Mr_Emrul
	freopen("inputf.in", "r", stdin);
#endif ///Mr_Emrul

	//ios_base::sync_with_stdio(false);
	//cin.tie(0);

	int n, m, l, r;
	char ch;
	scanf("%d %d", &n, &m);
	scanf("%s", str + 1);
	for(int i = 1; i <= n; i++) {
		update(i, 1);
	}
	memset(nxt, -1, sizeof nxt);
	for(int i = n; i >= 1; i--) {
		for(int j = 'a'; j <= 'z'; j++) {
			nxt[j][i] = nxt[j][i + 1];
		}
		for(int j = 'A'; j <= 'Z'; j++) {
			nxt[j][i] = nxt[j][i + 1];
		}
		for(int j = '0'; j <= '9'; j++) {
			nxt[j][i] = nxt[j][i + 1];
		}
		nxt[str[i]][i] = i;
	}
	while(m--) {
		scanf("%d %d %c", &l, &r, &ch);
		int lo = 1, hi = n;
		int L, R;
		while(lo <= hi) {
			int mid = (lo + hi) >> 1;
			int sum = query(1, mid);
			if(sum > l) {
				hi = mid - 1;
			} else if(sum == l) {
				L = mid;
				hi = mid - 1;
			} else {
				lo = mid + 1;
			}
		}
		lo = L, hi = n;
		while(lo <= hi) {
			int mid = (lo + hi) >> 1;
			int sum = query(1, mid);
			if(sum > r) {
				hi = mid - 1;
			} else if(sum == r) {
				R = mid;
				lo = mid + 1;
			} else {
				lo = mid + 1;
			}
		}
		assert(L <= R);
		vector <int> vec;
		//printf("Qr = %d\n", query(1, 1, 'a'));
		while(nxt[ch][L] <= R && nxt[ch][L] != -1) {
			if(str[nxt[ch][L]] != '-') {
				vec.push_back(nxt[ch][L]);
				update(nxt[ch][L], -1);
			}
			str[nxt[ch][L]] = '-';
			//printf("-- %d\n", nxt[ch][L]);
			L = nxt[ch][L] + 1;
		}
		for(int x : vec) {
			nxt[ch][x] = nxt[ch][R + 1];
		}
	}
	for(int i = 1; i <= n; i++) {
		if(query(i, i) == 1) {
			printf("%c", str[i]);
		}
	}
	printf("\n");
	return 0;
}