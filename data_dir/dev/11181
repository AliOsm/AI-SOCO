#include <algorithm>
#include <iostream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <numeric>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define endl '\n'
#define F first
#define S second
#define mp make_pair
#define ll long long
#define pb push_back
#define pii pair < int, int >
#define type(x) __typeof(x.begin())
#define foreach(i, x) for(type(x) i = x.begin(); i != x.end(); i++)
#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define sol (root << 1)
#define sag (sol | 1)
#define orta ((bas + son) >> 1)
#define bit __builtin_popcount

#ifndef D
	#define dbgs(x) 0
	#define dbg(x) 0
	#define TIME 0
#else
	#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
	#define dbg(x) cerr << (#x) << " --> " << (x) << endl
	#define TIME cerr << fixed << setprecision(2) << "Tooks " << (double) clock() / CLOCKS_PER_SEC << " seconds." << endl
#endif

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 1e5 + 5;

const int MAX = 30;

const int M = MAX + 5;

int n, m, x[N], y[N], k[N], dp[M][N], a[N];

int main () {

	ios :: sync_with_stdio(0);
	
	cin >> n >> m;

	FOR(i, 1, m)
	{
		cin >> x[i] >> y[i] >> k[i];

		FOR(j, 0, MAX)
			if(k[i] & 1 << j)
			{
				dp[j][x[i]]++;
				dp[j][y[i] + 1]--;
			}
	}

	FOR(i, 0, MAX)
		FOR(j, 1, n)
			dp[i][j] += dp[i][j - 1];

	FOR(i, 0, MAX)
		FOR(j, 1, n)
			dp[i][j] = !!dp[i][j];

	FOR(i, 0, MAX)
		FOR(j, 1, n)
			a[j] |= dp[i][j] << i;

	FOR(i, 0, MAX)
		FOR(j, 1, n)
			dp[i][j] += dp[i][j - 1];

	FOR(i, 1, m)
		FOR(j, 0, MAX)
			if(~k[i] & 1 << j)
				if(dp[j][y[i]] - dp[j][x[i] - 1] == y[i] - x[i] + 1)
					return cout << "NO" << endl, 0;

	cout << "YES" << endl;

	FOR(i, 1, n)
		cout << a[i] << ' ';

	cout << endl;

	TIME;
	
	return 0;

}
