#include <iostream>
#include <cstdio>
#include <algorithm>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <cstring>
#include <fstream>
#include <memory.h>
#include <iomanip>
#include <bitset>
#include <fstream>
#include <string>
#include <list>
#include <unordered_map>
#include <cfloat>

using namespace std;

#define right asfdsg
#define left asfdsvs
#define pb emplace_back
#define F first
#define S second
#define mp make_pair
#define x1 _xxx1
#define y1 _yyy1

#define forn(i, n) for(int i = 0 ; (i) < (n) ; ++i)

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef std::pair < int, int > pii;
typedef std::pair < ll, ll > pll;
typedef std::vector < std::vector < ld > > vld;

const int INF = (int) 2e9 + 7;
const ld EPS = (ld) 1e-5;
const int BASE = (int) 1e9 + 7;
const int MAXN = 200500;
const ll INFLL = (ll) 1e18;

int n;
int p[MAXN];
int to[MAXN];
int szin[MAXN], szout[MAXN];
set <int> g[MAXN];
bool used[MAXN];
bool is_loop[MAXN];

int get(int v) {
    return v == p[v] ? v : p[v] = get(p[v]);
}

void unit(int a, int b) {
    a = get(a);
    b = get(b);
    if (a != b) {
        if (rand() & 1)
            swap(a, b);
        p[a] = b;
        if (is_loop[a])
            is_loop[b] = true;
    }
}

int main() {
    scanf ("%d", &n);
    for (int i = 1; i <= 2 * n; i ++) p[i] = i;
    for (int i = 1; i <= n; i ++) {
        int a, b;
        scanf ("%d%d", &a, &b);
        if (a == b) {
            is_loop[a] = true;
            is_loop[get(a)] = true;
            continue;
        }
        to[a] = b;
        szin[b]++;
        szout[a]++;
        unit(a, b);
        used[a] = used[b] = true;
    }

    for (int i = 1; i <= 2 * n; i ++) {
        if (!used[i]) continue;
        int pred = get(i);
        g[pred].insert(i);
    }
    ll ans = 1;

    queue <int> q;
    for (int i = 1; i <= 2 * n; i ++) {
        while (!q.empty()) q.pop();
        if (g[i].empty()) continue;
        if (is_loop[i]) {
            continue;
        }
        if (g[i].size() == 2) {
            ans = (1ll * ans * 2) % BASE;
            continue;
        }

        int cur = (int) g[i].size();
        for (int v : g[i]) {
            if ( szout[v] == 1 && szin[v] == 0 )
                q.push(v);
        }
        while ( !q.empty() ) {
            if (q.size() > MAXN) throw;
            int v = q.front();
            g[i].erase(v);
            q.pop();
            szout[v] --;
            szin[to[v]] --;
            if (szin[to[v]] == 0 && szout[to[v]] == 1)
                q.push(to[v]);
            if (szin[to[v]] == 0 && szout[to[v]] == 0)
                g[i].erase(to[v]);
        }
        if (g[i].empty())
            ans = (1ll * ans * cur) % BASE;
        else ans = (1ll * ans * 2) % BASE;
    }
    cout << ans;
    return 0;
}