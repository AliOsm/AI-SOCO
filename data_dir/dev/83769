#include<bits/stdc++.h>
#define y1 kdfjdfldsfbjd
using namespace std;
const int md = 1e9 + 7;
int dp[55][55][2], kol[55][55][2], n, k, k1, k2, c[55][55];
queue < pair < pair < int, int >, int > > q;
int main() {
    ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    c[0][0] = 1;
    for (int i = 1; i <= 50; ++i){
        c[i][0] = c[i - 1][0];
        for (int j = 1; j <= i; ++j){
            c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % md;
        }
    }
    cin >>n>>k;
    k /= 50;
    for (int i = 1; i <= n; ++i){
        int x;
        cin >>x;
        if (x == 50)k1++;else k2++;
    }
    for (int i = 0; i <= k1; ++i){
        for (int j = 0; j <= k2; ++j){
            dp[i][j][0] = dp[i][j][1] = 1e9;
        }
    }
    dp[k1][k2][0] = 0;
    kol[k1][k2][0] = 1;
    q.push(make_pair(make_pair(k1, k2), 0));
    while (!q.empty()){
        int x = q.front().first.first;
        int y = q.front().first.second;
        int z = q.front().second;
        q.pop();
        if (z == 0){
            for (int i = 0; i <= x; ++i){
                if (i > k)break;
                for (int j = 0; j <= y; ++j){
                    if (i + j * 2 > k)break;
                    if (i + j == 0)continue;
                    if (dp[x][y][0] + 1 < dp[x - i][y - j][1]){
                        dp[x - i][y - j][1] = dp[x][y][0] + 1;
                        kol[x - i][y - j][1] = 0;
                        q.push(make_pair(make_pair(x - i, y - j), 1));
                    }
                    if (dp[x][y][0] + 1 == dp[x - i][y - j][1]){
                        int s = (1ll * c[x][i] * c[y][j]) % md;
                        s = (1ll * s * kol[x][y][0]) % md;
                        kol[x - i][y - j][1] = (kol[x - i][y - j][1] + s) % md;
                    }
                }
            }
        }else {
            for (int i = 0; i <= k1 - x; ++i){
                if (i > k)break;
                for (int j = 0; j <= k2 - y; ++j){
                    if (i + j * 2 > k)break;
                    if (i + j == 0)continue;
                    if (dp[x][y][1] + 1 < dp[x + i][y + j][0]){
                        dp[x + i][y + j][0] = dp[x][y][1] + 1;
                        kol[x + i][y + j][0] = 0;
                        q.push(make_pair(make_pair(x + i, y + j), 0));
                    }
                    if (dp[x][y][1] + 1 == dp[x + i][y + j][0]){
                        int s = (1ll * c[k1 - x][i] * c[k2 - y][j]) % md;
                        s = (1ll * s * kol[x][y][1]) % md;
                        kol[x + i][y + j][0] = (kol[x + i][y + j][0] + s) % md;
                    }
                }
            }
        }
    }
    if (dp[0][0][1] == 1e9)return cout <<-1<<endl<<0, 0;
    cout <<dp[0][0][1]<<endl<<kol[0][0][1];
}
