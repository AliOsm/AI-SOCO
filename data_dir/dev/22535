#include <stdio.h>
#include <string.h>

#define N	80
#define M	5
#define INF	0x3f3f3f3f

int min(int a, int b) { return a < b ? a : b; }

int cnt[N], ii[M], kk[N][N][M + 1], dd[N][N], n, m, ans;

void branch(int h) {
	int i;

	if (h == m) {
		int d = 0;

		for (h = 0; h < m; h++) {
			int i = ii[h], j = ii[(h + 1) % m], g;

			for (g = 0; g <= m; g++) {
				int k = kk[i][j][g];

				if (k != -1 && cnt[k] == 0) {
					d += dd[i][k] + dd[k][j];
					break;
				}
			}
			if (g > m)
				return;
		}
		ans = min(ans, d);
		return;
	}
	for (i = 0; i < n; i++) {
		ii[h] = i;
		cnt[i]++;
		branch(h + 1);
		cnt[i]--;
	}
}

int main() {
	int h, h_, i, j, k;

	scanf("%d%d", &n, &m), m /= 2;
	for (i = 0; i < n; i++)
		for (j = 0; j < n; j++)
			scanf("%d", &dd[i][j]);
	for (i = 0; i < n; i++)
		for (j = 0; j < n; j++) {
			memset(kk[i][j], -1, (m + 1) * sizeof *kk[i][j]);
			for (k = 0; k < n; k++)
				for (h = 0; h <= m; h++) {
					int k_ = kk[i][j][h];

					if (k_ == -1 || dd[i][k_] + dd[k_][j] > dd[i][k] + dd[k][j]) {
						for (h_ = m; h_ > h; h_--)
							kk[i][j][h_] = kk[i][j][h_ - 1];
						kk[i][j][h] = k;
						break;
					}
				}
		}
	ans = INF;
	cnt[0]++;
	branch(1);
	printf("%d\n", ans);
	return 0;
}
