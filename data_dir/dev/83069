/*
    STARK_BOY
*/
#include <bits/stdc++.h>
#include <fstream>
using namespace std;
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define repe(i,a,b) for(ll i=a;i<=b;i++)
#define bac(i,a,b) for(ll i=a;i>=b;i--)
#define pb push_back
#define mp make_pair
#define F first
#define S second
typedef long long ll;
typedef vector< ll > vi;
typedef vector<pair<ll,ll> > vpii;
typedef pair<ll,ll> pii;
#define all(c) c.begin(),c.end()
#define ios ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define setbitc(x) __builtin_popcount(x)
#define init(x,a) memset(x,a,sizeof(x))
#define INF 1000000000  
#define MOD 1000000007
#define M 998244353
#define N 300010
# define PI           3.14159265358979323846  /* pi */
mt19937 rng32(chrono::steady_clock::now().time_since_epoch().count());

ll modExpo(ll x,ll n)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)        //n is even
        return modExpo((x*x)%M,n/2);
    else                             //n is odd
        
        return (x*modExpo((x*x)%M,(n-1)/2))%M;

}
ll modInverse(ll n) 
{ 
    return modExpo(n,MOD-2); 
}

//Variables Start   
ll n,m,k,ar[N],dp[N],sz[N],fact[N];
string s,s1;
vi adj[N];
//Variables End
void dfs(ll ver,ll par)
{
    sz[ver]=1;
    for(auto i:adj[ver])
    {
        if(i!=par)
        {
            dfs(i,ver);
            sz[ver]+=sz[i];
        }
    }
}
void dfs1(ll ver,ll par)
{
    dp[ver]=1;
    ll cnt=1;
    for(auto i:adj[ver])
    {
        if(i!=par)
        {
            cnt++;
            dfs1(i,ver);
            dp[ver]=(dp[i]*dp[ver])%M;
        }
    }
    dp[ver]=(dp[ver]*fact[cnt])%M;
}
int main()
{
    ios
    int ti=1;
    //cin>>ti;
    while(ti--)
    {
        fact[0]=1;
        rep(i,1,N)fact[i]=(fact[i-1]*i)%M;
        cin>>n;
        rep(i,0,n-1)
        {
            ll x,y;
            cin>>x>>y;
            adj[x].pb(y);
            adj[y].pb(x);
        }
        dfs(1,1);
        //rep(i,0,n+1)cout<<sz[i];
        ll ans=n;
        ll cnt=0;
        for(auto i:adj[1]){dfs1(i,1);ans=(ans*dp[i])%M;cnt++;}
        ans=(ans*fact[cnt])%M;
        cout<<ans;


    }
    return 0;
        
}