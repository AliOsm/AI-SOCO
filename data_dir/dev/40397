#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <utility>
#include <algorithm>
#include <memory.h>
#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <conio.h>

using namespace std;

#pragma comment (linker, "/STACK:64000000")

#define pb push_back
#define pii pair<int, int>
#define pdi pair<double, int>
#define pdii pair<pdi, int>
#define pll pair<ll, ll>
#define pib pair<int, bool>
#define pli pair<ll, int>
#define vi vector<int>
#define inf 2000000000
#define mod 1000000007
#define mod2 536870911
#define y1 uhgeg
#define lim 31700
#define eps 1e-9
#define prime 3001

typedef long long ll;
typedef unsigned long long ull;

int n, j, i, h, g, k, q1, q2, q, t, x, y, sum, right_min[1000001], left_max[1000001], mx[1000001], tree[4000001];
char buf[10];
vector <vector <int> > l, r;

void update(int i, int p1, int p2, int q)
{
	if (p1 == p2)
	{
		tree[i] = mx[q];
		return;
	}
	int p = (p1 + p2) >> 1;
	if (q <= p)
	{
		update(i << 1, p1, p, q);
	}
	else
	{
		update((i << 1) + 1, p + 1, p2, q);
	}
	tree[i] = max(tree[i << 1], tree[(i << 1) + 1]);
}

int get_val(int i, int p1, int p2, int q1, int q2)
{
	if (q1 <= p1 && p2 <= q2)
	{
		return tree[i];
	}
	int p = (p1 + p2) >> 1, res1 = 0, res2 = 0;
	if (q1 <= p)
	{
		res1 = get_val(i << 1, p1, p, q1, q2);
	}
	if (q2 > p)
	{
		res2 = get_val((i << 1) + 1, p + 1, p2, q1, q2);
	}
	return max(res1, res2);
}

bool check(int v)
{
	for (int j = 0; j < l[v].size(); j++)
	{
		left_max[v] = max(mx[l[v][j]], left_max[v]);
		mx[v] = max(mx[l[v][j]], mx[v]);
	}
	for (int j = 0; j < r[v].size(); j++)
	{
		right_min[v] = min(r[v][j], right_min[v]);
		mx[v] = max(mx[r[v][j]], mx[v]);
	}
	if (left_max[v])
	{
		left_max[v] = max(left_max[v], get_val(1, 1, n, v + 1, left_max[v]));
	}
	if (mx[v])
	{
		mx[v] = max(mx[v], get_val(1, 1, n, v + 1, mx[v]));
	}
	else
	{
		mx[v] = v;
	}
	update(1, 1, n, v);
	return (right_min[v] > left_max[v]);
}

void dfs_print(int q1, int q2)
{
	//printf ("%d - %d\n", q1, q2);
	if (left_max[q1])
	{
		dfs_print(q1 + 1, left_max[q1]);
	}
	printf ("%d ", q1);
	if (left_max[q1] && left_max[q1] < q2)
	{
		dfs_print(left_max[q1] + 1, q2);
	}
	if (!left_max[q1] && q2 > q1)
	{
		dfs_print(q1 + 1, q2);
	}
}

void solve()
{
	scanf ("%d%d", &n, &k);
	l.resize(n + 1, vector<int>());
	r.resize(n + 1, vector<int>());
	memset(right_min, 127, sizeof(int) * (n + 1));
	for (j = 1; j <= k; j++)
	{
		scanf ("%d %d %s\n", &q1, &q2, &buf);
		if (q1 >= q2)
		{
			printf ("IMPOSSIBLE\n");
			return;
		}
		if (buf[0] == 'L')
		{
			l[q1].pb(q2);
		}
		else
		{
			r[q1].pb(q2);
		}
	}
	for (j = n; j >= 1; j--)
	{
		if (!check(j))
		{
			printf ("IMPOSSIBLE\n");
			return;
		}
	}
	dfs_print(1, n);
}

int main()
{
	ios_base::sync_with_stdio(false);cin.tie(0);
	//freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
	solve();
	return 0;
}