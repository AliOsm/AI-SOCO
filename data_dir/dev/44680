//let's do it
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 2000000000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 200005

ll n,m,k,needa,needb,ans,c[maxn],only_a_likes[maxn],only_b_likes[maxn],both_likes[maxn],temp[maxn],only_a_sz,only_b_sz,both_sz,none_sz,except_both_sz,cc[maxn];
vector<ll>gota,gotb,only_a_likes_store,only_b_likes_store,both_likes_store,none_likes_store,except_both_likes_store,sum_only_a,sum_only_b,sum_both,sum_none,sum_except_both;

bool comp(ll x,ll y)
{
	//assert(x!=y);
	if(c[x]!=c[y])
	return c[x]<c[y];
	return x<y;
}
ll helper1(ll index)
{
	ll got=index+1;
	//assert(index<except_both_sz);
	ll takena=min(gota[index],needa);
	ll takenb=min(gotb[index],needb);
	got=got-takena-takenb;
	return got;
}
ll helper2(ll index)
{
	ll got=sum_except_both[index];
	ll takena=min(gota[index],needa);
	ll takenb=min(gotb[index],needb);
	//assert(takena<=sum_only_a.size());
	//assert(takenb<=got-sum_only_b.size());
	if(takena-1>=0)
	got=got-sum_only_a[takena-1];
	if(takenb-1>=0)
	got=got-sum_only_b[takenb-1];
	return got;
}
void solve(ll common)
{
	needa=max(0LL,k-common);
	needb=max(0LL,k-common);
	if(common+needa+needb>m)
	return;
	if(needa>only_a_sz)
	return;
	if(needb>only_b_sz)
	return;
	ll required=m-(common+needa+needb);
	if(required>except_both_sz)
	return;
	ll cost=0;
	if(common-1>=0)
	{
		//assert(common<=sum_both.size());
		cost=sum_both[common-1];
	}
	if(needa-1>=0)
	{
		//assert(needa<=sum_only_a.size());
		cost=cost+sum_only_a[needa-1];
	}
	if(needb-1>=0)
	{
		//assert(needb<=sum_only_b.size());
		cost=cost+sum_only_b[needb-1];
	}
	//cout<<"here"<<" "<<cost<<endl;
	if(required==0)
	{
		ans=min(ans,cost);
		return;
	}
	ll lo=-1;
	ll hi=except_both_sz-1;
	if(helper1(hi)<required)
	return;
	while(hi-lo>1)
	{
		ll mid=(lo+hi)/2;
		if(helper1(mid)>=required)
		hi=mid;
		else
		lo=mid;
	}
	//cout<<"here1"<<" "<<hi<<endl;
	cost=cost+helper2(hi);
	ans=min(ans,cost);
}
int main()
{
	boost1;boost2;
	ll i,j,x,y,common;
	cin>>n>>m>>k;
	for(i=1;i<=n;i++)
	{
		cin>>c[i];
		//cc[i]=c[i];
	}
	//sort(c+1,c+n+1);
	cin>>x;
	for(i=1;i<=x;i++)
	{
		cin>>y;
		only_a_likes[y]=1;
		temp[y]++;
	}
	cin>>x;
	for(i=1;i<=x;i++)
	{
		cin>>y;
		only_b_likes[y]=1;
		temp[y]++;
	}
	for(i=1;i<=n;i++)
	{
		if(temp[i]==2)
		{
			both_likes[i]=1;
			only_a_likes[i]=0;
			only_b_likes[i]=0;
		}
	}
	for(i=1;i<=n;i++)
	{
		if(only_a_likes[i])
		only_a_likes_store.pb(i);
		else if(only_b_likes[i])
		only_b_likes_store.pb(i);
		else if(both_likes[i])
		both_likes_store.pb(i);
		else
		none_likes_store.pb(i);
	}
	for(i=1;i<=n;i++)
	{
		if(!both_likes[i])
		except_both_likes_store.pb(i);
	}
	only_a_sz=only_a_likes_store.size();
	only_b_sz=only_b_likes_store.size();
	both_sz=both_likes_store.size();
	none_sz=none_likes_store.size();
	except_both_sz=except_both_likes_store.size();
	sort(all(only_a_likes_store),comp);
	sort(all(only_b_likes_store),comp);
	sort(all(both_likes_store),comp);
	sort(all(none_likes_store),comp);
	sort(all(except_both_likes_store),comp);
	/*cout<<endl;
	for(auto it:only_a_likes_store)
	cout<<it<<" ";
	cout<<endl;
	for(auto it:only_b_likes_store)
	cout<<it<<" ";
	cout<<endl;
	for(auto it:both_likes_store)
	cout<<it<<" ";
	cout<<endl;
	for(auto it:none_likes_store)
	cout<<it<<" ";
	cout<<endl;
	for(auto it:except_both_likes_store)
	cout<<it<<" ";
	cout<<endl;*/
	if(only_a_sz)
	{
		sum_only_a.pb(c[only_a_likes_store[0]]);
		for(i=1;i<only_a_sz;i++)
		sum_only_a.pb(sum_only_a.back()+c[only_a_likes_store[i]]);
	}
	if(only_b_sz)
	{
		sum_only_b.pb(c[only_b_likes_store[0]]);
		for(i=1;i<only_b_sz;i++)
		sum_only_b.pb(sum_only_b.back()+c[only_b_likes_store[i]]);
	}
	if(both_sz)
	{
		sum_both.pb(c[both_likes_store[0]]);
		for(i=1;i<both_sz;i++)
		sum_both.pb(sum_both.back()+c[both_likes_store[i]]);
	}
	if(none_sz)
	{
		sum_none.pb(c[none_likes_store[0]]);
		for(i=1;i<none_sz;i++)
		sum_none.pb(sum_none.back()+c[none_likes_store[i]]);
	}
	if(except_both_sz)
	{
		sum_except_both.pb(c[except_both_likes_store[0]]);
		for(i=1;i<except_both_sz;i++)
		sum_except_both.pb(sum_except_both.back()+c[except_both_likes_store[i]]);
	}
	/*cout<<endl;
	for(auto it:sum_only_a)
	cout<<it<<" ";
	cout<<endl;
	for(auto it:sum_only_b)
	cout<<it<<" ";
	cout<<endl;
	for(auto it:sum_both)
	cout<<it<<" ";
	cout<<endl;
	for(auto it:sum_none)
	cout<<it<<" ";
	cout<<endl;
	for(auto it:sum_except_both)
	cout<<it<<" ";
	cout<<endl;*/
	if(except_both_sz)
	{
		if(only_a_likes[except_both_likes_store[0]])
		{
			gota.pb(1);
			gotb.pb(0);
		}
		else if(only_b_likes[except_both_likes_store[0]])
		{
			gota.pb(0);
			gotb.pb(1);
		}
		else
		{
			gota.pb(0);
			gotb.pb(0);
		}
		for(i=1;i<except_both_sz;i++)
		{
			if(only_a_likes[except_both_likes_store[i]])
			{
				gota.pb(gota.back()+1);
				gotb.pb(gotb.back());
			}
			else if(only_b_likes[except_both_likes_store[i]])
			{
				gota.pb(gota.back());
				gotb.pb(gotb.back()+1);
			}
			else
			{
				gota.pb(gota.back());
				gotb.pb(gotb.back());
			}
		}
	}
	/*cout<<endl;
	for(auto it:gota)
	cout<<it<<" ";
	cout<<endl;
	for(auto it:gotb)
	cout<<it<<" ";
	cout<<endl;*/
	ans=inf;
	for(common=0;common<=min(m,both_sz);common++)
	solve(common);
	if(ans==inf)
	ans=-1;
	cout<<ans;
	return 0;
}
