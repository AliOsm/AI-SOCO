#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     (_obj).begin(), (_obj).end()
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define CeilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifdef SHJ_LOCAL
#define debug(_x)                     std::cerr << (#_x) << " = " << (_x) << '\n' << std::flush;
#else
#define debug(_x)                     {}
#endif
#define endl "\n"
template<typename Tp>
inline void outarr(Tp _begin, Tp _end, const char* _delim = " ") {
    for (Tp current = _begin; current != _end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = long long;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
int start[32];

bool HasBit(int x, int b) {
    return (x >> b) & 1;
}

void Set(vector<string>& gr, int i, int j) {
    gr[i][j] = gr[j][i] = 'Y';
}

void Reset(vector<string>& gr, int i, int j) {
    gr[i][j] = gr[j][i] = 'N';
}

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    int k;
    cin >> k;
    const int n = 1000;
    vector<string> gr(n, string(n, 'N'));
    int v = 2;
    for (int j = 30; j > 0; --j) {
        start[j] = v;
        Set(gr, v, v + 1);
        Set(gr, v, v + 2);
        Set(gr, v + 1, v + 3);
        Set(gr, v + 2, v + 3);
        v += 3;
    }
    Reset(gr, v - 2, v);
    Reset(gr, v - 1, v);
    Set(gr, v - 2, 1);
    Set(gr, v - 1, 1);
    start[0] = 1;
    const int len = 60;
    loop(30) {
        if (HasBit(k, i)) {
            int pre = start[i];
            for (int j = 1; j < len - i - i; ++j) {
                Set(gr, v, pre);
                pre = v++;
            }
            Set(gr, 0, pre);
        }
    }
    cout << n << endl;
    outarr(all(gr), endl);

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}
