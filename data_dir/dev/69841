#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcount
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=300000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

int n,m;
int perm[N+5];
int pos[N+5];
vi lss[N+5];

int bins(int num,int ps)
{
  int low=0,high=lss[num].size() - 1;
  if(!lss[num].size())return 0;
  while(low < high)
  {
    if(low+1==high)
    {
      if(lss[num][high]<=ps)low=high;
      break;
    }

    int mid = (low + high)/2;

    if(lss[num][mid]<=ps)low=mid;
    else high=mid-1;
  }
  if(lss[num][low]>ps)return 0;
  return lss[num][low];
}
int main()
{
  finp;
  cin>>n>>m;
  afor(i,1,n)
  {
    cin>>perm[i];
    pos[perm[i]]=i;
  }

  afor(i,1,m)
  {
    int a,b;
    cin>>a>>b;
    lss[a].pb(pos[b]);
    lss[b].pb(pos[a]);
  }

  afor(i,1,n)
  {
    sort(lss[i].begin(),lss[i].end());
  }

  ll ans=0;

  //cout<<lss[2].size()<<endl;
  //cout<<bins(2,3);
  //return 0;
  int curr=0;
  afor(i,1,n)
  {

    curr=max(curr,bins(perm[i],i)) ;
    //cout<<i-curr<<" ";

    ans+=i-curr;
  }

  cout<<ans;
  
return 0;
}