//
//  main.cpp
//  CF
//
//  Created by Admin on 9/30/17.
//  Copyright Â© 2017 Admin. All rights reserved.
//

#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <string>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <memory.h>
#include <unordered_map>
#include <unordered_set>
#include <cmath>
#include <queue>

using namespace std;
#define DEBUG false
#define FILE_PREFIX "../../../../../../../../CompetitiveProgramming/CF/CF/"
const int N = 1e6;
const int MOD = 1e9 + 7;

void add(int &a, int b) {
    a += b;
    if (a >= MOD) a -= MOD;
}

int dp[10005];
int f[1005][1005][2];
void solve() {
    memset(f, 0, sizeof(f));
    memset(dp, 0, sizeof(dp));
    
    string s;
    cin >> s;
    int k;
    cin >> k;
    
    dp[1] = 0;
    for (int i = 2; i <= 1005; ++i) {
        int nx = 0;
        int val = i;
        while (val > 0) {
            nx += val % 2;
            val /= 2;
        }
        dp[i] = dp[nx] + 1;
    }
    
    
    f[0][0][1] = 1;
    for (int i = 0; i < s.size(); ++i) {
        int cd = s[i] - '0';
        for (int bal = 0; bal <= i; ++bal) {
            for (int t = 0; t < 2; ++t) {
                if (f[i][bal][t] == 0) continue;
                for (int nd = 0; nd < 2; ++nd) {
                    if (nd > cd && t == 1) continue;
                    add(f[i + 1][bal + nd][t & (nd == cd)], f[i][bal][t]);
                }
            }
        }
    }
    
    int res = 0;
    for (int bal = 1; bal <= s.size(); ++bal) {
        for (int t = 0; t < 2; ++t) {
            if (1 + dp[bal] == k) {
                add(res, f[s.size()][bal][t]);
            }
        }
    }
    if (k == 0) res += 1;
    else if (k == 1) {
        res = (res - 1 + MOD) % MOD;
    }
    cout << res << endl;
}

int main() {
    if (DEBUG) {
        freopen(FILE_PREFIX"input.txt", "r", stdin);
    }
    ios :: sync_with_stdio(false);
    int t;
    if (DEBUG) {
        cin >> t;
    } else {
        t = 1;
    }
    while (t--) {
        solve();
    }
    return 0;
}
