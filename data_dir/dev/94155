#include <bits/stdc++.h>

using namespace std;

#define mem(a,b) memset(a,b,sizeof(a))
#define FOR(i,j,k) for(int i=j;i<=k;i++)
#define read        freopen("in.txt", "r", stdin)
#define write       freopen("out.txt", "w", stdout)
#define pf          printf
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define PB push_back
#define F first
#define S second
#define MP make_pair

typedef long long ll;
typedef pair<ll,ll> pll;

const int M = 998244353 ;
const int MAX = (1e2) + 2;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

int n, m;
ll dp[MAX][MAX][MAX], bm[MAX][MAX][MAX], ara[MAX][MAX];

ll choto(ll x,ll y) {
    return min(x, y) == -1 ? max(x, y) : min(x, y);
}

ll mul(ll x,ll y) {
    return x * y;
}

pll update(int l,int r,int tx,int ty) {
    int d = abs(tx - l) + abs(ty - r);
    ll nextValueHobe = ara[l][r] + d;
    ll nextValue = ara[tx][ty];
    ll adjust = abs(nextValue - nextValueHobe);

    if(nextValue >= nextValueHobe)
        return {0, adjust};
    else {
        return {1, mul(adjust, (tx + ty))};
    }
}

int main() {
    ios::sync_with_stdio(false);
//    read;
//    write;
    int tc;

    cin >> tc;

    FOR(tt,1,tc) {
        mem(dp, -1); mem(bm, -1);

        cin >> n >> m;

        FOR(i,0,n-1) {
            FOR(j,0,m-1) {
                cin >> ara[i][j];
            }
        }

        ll prin = -1;
        dp[0][0][0] = 0;
        FOR(i,0,n-1) {

            FOR(j,0,m-1) {
                FOR(l,0,n-1) {
                    FOR(r,0,m-1) {
                        if(i == n - 1 && j == m - 1) { prin = choto(prin, dp[j][l][r]); }
//                        if(dp[j][l][r] != -1)
//                            cout << i << " " << j << " " << l << " " << r << " " << dp[j][l][r] << endl;
                       // tor kono chance nai pagla
                       if(dp[j][l][r] == -1) { continue; }

                       // pase jao
                       pll sam = update(l, r, i, j + 1);
                       if(sam.F == 0 ) {
                            dp[j + 1][l][r] = choto(dp[j + 1][l][r], dp[j][l][r] + sam.S);
                       } else {
                           dp[j + 1][i][j + 1] = choto(dp[j + 1][i][j + 1], dp[j][l][r] + sam.S);
                       }

                       // niche jao
                       sam = update(l, r, i + 1, j);
                       if(sam.F == 0 ) {
                            // cout << "asjkdna " << l << " " << r << " " << l << " " << r << " " << dp[j][l][r] + sam.S << endl;
                            bm[j][l][r] = choto(bm[j][l][r], dp[j][l][r] + sam.S);
                       } else {
                           // cout << "asjkdna " << l << " " << r << " " << i + 1 << " " << j << " " << dp[j][l][r] + sam.S << endl;
                           bm[j][i + 1][j] = choto(bm[j][i + 1][j], dp[j][l][r] + sam.S);
                       }
                    }
                }
            }

            FOR(j,0,m-1)
                FOR(l,0,n-1)
                    FOR(r,0,m-1) {
                        dp[j][l][r] = bm[j][l][r];
                        bm[j][l][r] = -1;
                    }
        }

        cout << prin << endl;
    }

    return 0;
}

