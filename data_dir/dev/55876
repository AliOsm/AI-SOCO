#pragma comment(linker, "/STACK:268435456")
 #include <stdio.h>
#include<iostream>
#include<cstdio>
 
#include<string>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<stack>
#include<bitset>
 
#include<iomanip>
#include<memory.h>
#include<algorithm>
#include<cstring>
#include<ctime>
#include<cmath>
#include<cassert>
 
using namespace std;
 
#define forn(i, n) for(int i = 0; i < (int)(n); ++i)
#define for1(i, n) for(int i = 1; i < (int)(n); ++i)
#define nfor(i, n) for(int i = int(n) - 1; i >= 0; --i)
#define fore(i, l, r) for(int i = int(l); i < int(r); ++i)
#define correct(x, y, n, m) (0 <= x && x < n && 0 <= y && y < m)
#define x first
#define y second
#define all(a) a.begin(), a.end()
#define pb push_back
#define mp make_pair
#define sz(v) (int)(v.size())
#define hash archash
#define next arcnext
#define link arclink
#define y0 arcy0
#define y1 arcy1
#define log2 arclog2
 
template<typename T> inline T abs(T a){ return ((a < 0) ? -a : a); }
template<typename T> inline T sqr(T a){ return a * a; }
template<class T> T gcd(T a, T b) { return a ? gcd (b % a, a) : b; }
template<class T> T lcm(T a, T b) { return a / gcd (a, b) * b; }
template<class T> T sign(T a) { return a > 0 ? 1 : (a < 0 ? -1 : 0); }
 
typedef long long li;
typedef unsigned long long uli;
typedef long double ld;
typedef pair <li, li> pt;
typedef vector <int> vi; 
typedef vector <vector <int> > vvi;
typedef vector <pair <int, int> > vpt; 
 
const int dx[] = {-1, 0, 1,  0};
const int dy[] = { 0, 1, 0, -1};
const int dxK[] = {-1, -1, 0, 1, 1,  1,  0, -1};
const int dyK[] = { 0,  1, 1, 1, 0, -1, -1, -1};
const int dxKn[] = {-2, -1, 1, 2,  2,  1, -1, -2};
const int dyKn[] = { 1,  2, 2, 1, -1, -2, -2, -1};
 
const int N = int(255) + 9;
const int M = int(3e2) + 9;
const int LOGN = 21;
const int SQN = 350;
const int MOD = int(1e9) + 7;
const int INF = int(1e9) + 100;
const li INF64 = 2e18;
const ld PI = ld(3.1415926535897932384626433832795);
const ld EPS = 1e-6;

int t;
int n, m;
char a[N][N];
vector <pt> v;
bool u[N][N];
int res;

void dfs(int i, int j){
	v.pb(mp(i, j));
	u[i][j] = true;
	forn(k, 8){
		int ni = i + dxK[k], nj = j + dyK[k];
		if(!correct(ni, nj, n, m))
			continue;
		if(a[ni][nj] != '1' || u[ni][nj])
			continue;
		dfs(ni, nj);
	}
}

void solve(){
	cin >> t;
	forn(_, t){
		scanf("%d %d", &n, &m);
		forn(i, n) forn(j, m) u[i][j] = false;
		forn(i, n)
			scanf("%s", a + i);
		
		res = 0;
		forn(i, n) forn(j, m)
			if(!u[i][j] && a[i][j] == '1'){
				dfs(i, j);
				bool ok = true;
				if(j + 1 < m && a[i][j + 1] == '1'){
					int r1 = 0, d1 = 0, r2 = 0, d2 = 0;
					while(correct(i + d1, j, n, m) && a[i + d1][j] == '1')
						++d1;
					while(correct(i, j + r1, n, m) && a[i][j + r1] == '1')
						++r1;

					while(correct(i + d2, j + r1 - 1, n, m) && a[i + d2][j + r1 - 1] == '1')
						++d2;
					while(correct(i + d1 - 1, j + r2, n, m) && a[i + d1 - 1][j + r2] == '1')
						++r2;

					if(!(r1 == d1 && r1 == r2 && r1 == d2))
						ok = false;
					if(r1 == 1)
						ok = false;
					if(r1 + r2 + d1 + d2 - 4 != sz(v))
						ok = false;
				}
				else{
					int r1 = 0, l1 = 0, r2 = 0, l2 = 0;
					while(correct(i + r1, j + r1, n, m) && a[i + r1][j + r1] == '1')
						++r1;
					while(correct(i + l1, j - l1, n, m) && a[i + l1][j - l1] == '1')
						++l1;

					while(correct(i + r1 - 1 + l2, j + r1 - 1 - l2, n, m) && a[i + r1 - 1 + l2][j + r1 - 1 - l2] == '1')
						++l2;
					while(correct(i + l1 - 1 + r2, j - l1 + 1 + r2, n, m) && a[i + l1 - 1 + r2][j - l1 + 1 + r2] == '1')
						++r2;

					if(!(r1 == l1 && r1 == r2 && r1 == l2))
						ok = false;
					if(r1 == 1)
						ok = false;
					if(r1 + r2 + l1 + l2 - 4 != sz(v))
						ok = false;
				}
				res += ok;
				v.clear();
			}

		cout << res << endl;
	}
}

int main(){
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	srand(time(NULL));
	cout << setprecision(15) << fixed;
	cerr << setprecision(10) << fixed;   

	solve();
 
	return 0;

}