// start of CP 2.0
#include <bits/stdc++.h>

//____By:sirjan13____

#define int long long
#define ld long double
#define mod 1000000007
#define mod1 mod
#define mod2 100000009
#define show(a) for(int i=0;i<a.size();i++) cout<<a[i]<<" ";
#define fi first
#define se second
#define vi vector<int>
#define vs vector<string>
#define vll vector<ll>
#define pb push_back
#define pi pair<int,int>
#define si set<int>
#define sll set<ll>
#define pll pair<ll, ll>
#define sci(x) scanf("%d",&x)
#define scs(x)  scanf("%s", x)
#define scll(x) scanf("%I64d",&x)
#define all(v) v.begin(),v.end()
#define sot(v) sort(v.begin(), v.end())
#define maxheap priority_queue<int>
#define minheap(p) priority_queue<p,vector<p>,greater<p>>
#define mp make_pair
#define fast_io() cin.sync_with_stdio(false);cout.sync_with_stdio(false);
#define PI 3.1415926535
#define long_zero 0ll
#define long_one 1ll

inline int sbt(int x){return __builtin_popcount(x);}

using namespace std;

#define TRACE
#ifdef TRACE
#define deb(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << std::endl;
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define deb(...)
#endif
#define N 100013
int a[N], kitna[N], bacha[N];
int32_t main() {
    fast_io()
    int n, m;
    cin >> n >> m;
    for(int i = 1; i <= n; i++) {
        cin >> a[i];
        bacha[i] = a[i];
    }
    minheap(pi) pq;
    for(int i = 1; i <= n; i++) {
        cin >> kitna[i];
        pq.push(mp(kitna[i], i));
    }
    while(m--) {
        int i, d;
        cin >> i >> d;
        int cnt = 0;
        if(bacha[i] < d) {
            cnt += bacha[i] * kitna[i];
            d -= bacha[i];
            bacha[i] = 0;
            while(d > 0 && !pq.empty()) {
                auto p = pq.top();
                pq.pop();
    
                if(bacha[p.se] >= d) {
                    cnt += (d * kitna[p.se]);
                    bacha[p.se] -= d;
                    d = 0;
                    pq.push(p);
                }
                else {
                    cnt += (bacha[p.se] * kitna[p.se]);
                    d -= bacha[p.se];
                    bacha[p.se] = 0;         
                }
                
            }
            //deb(d, i, rem[i]);
            if(d <= 0) {
                cout << cnt;
            }
            else {
                cout << 0;
            }
        }
        else {
            cnt = d * kitna[i];
            bacha[i] -= d;
            cout << cnt;
        }
        cout << endl;
    }
    return 0;
}