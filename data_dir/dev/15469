// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int N = (int)1e5 + 3;

int t, n, a[N];
VI v;

int main() {
  init_ios();
  cin >> t;
  while (t--) {
    v.clear();
    cin >> n;
    for (int i = 1; i <= n; ++i)
      cin >> a[i];
    sort(a+1, a+n+1);
    int i = 1, j = n;
    while (i <= j) {
      v.PB(a[i++]);
      if (i > j)
        break;
      v.PB(a[j--]);
    }
    while (v.size()) {
      cout<<v.back()<<" ";
      v.pop_back();
    }
    cout<<"\n";
  }
}