
#include<bits/stdc++.h>
using namespace std;
typedef long double ld;
typedef long long int ll;

const ll logx=30;
const ll N=2e5+5;
const ll M=1e5+5;
const ll mod=1e9+7;
const ll INF=1e18+5;
const double PI = 3.14159265;

#define ints(n) scanf("%d",&n)
#define intp(n) printf("%d\n",n)
#define longs(n) scanf("%intd",&n)
#define longp(n) printf("%intd\n",n)

inline ll mul(ll a, ll b){ return (a * 1ll * b) % mod; }
inline ll sub(ll a, ll b){ ll c = a - b; if(c < 0) c += mod; return c; }
inline ll add(ll a, ll b){ ll c = a + b; if(c >= mod) c -= mod; return c; }

#define f first
#define s second
#define pii pair<ll,ll>
#define pb(x) push_back(x)
#define pf(x) push_front(x)
#define mp(x,y) make_pair(x,y)
#define GCD(a,b) __gcd((a),(b))
#define all(v) v.begin(),v.end()
#define bits(x) __builtin_popcount(x)
#define LCM(a,b) ((a)*(b))/GCD((a),(b))
#define ms(dp,val) memset(dp,val,sizeof(dp))
#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);
#define printclock cerr<<"Time : "<<1000*(ld)clock()/(ld)CLOCKS_PER_SEC<<"ms\n";
template<typename T> T power(T x,T y,ll m){T ans=1;while(y>0){if(y&1LL) ans=(ans*x)%m;y>>=1ll;x=(x*x)%m;}return ans%m;}

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

vector<ll> ans[N];
ll n,k,a[N],c[N],cnt[N],seg[4*N];

void update(ll low,ll high,ll qpos,ll pos)
{
  if(low==high)
  {
    seg[pos]++;
    return;
  }
  else
  {
    ll mid=(low+high)/2;
    if(low<=qpos&&qpos<=mid) update(low,mid,qpos,2*pos);
    else update(mid+1,high,qpos,2*pos+1);
    seg[pos]=min(seg[2*pos],seg[2*pos+1]);
  }
}

ll query(ll low,ll high,ll qlow,ll qhigh,ll pos)
{
  if(qlow>high||qhigh<low) return INF;
  if(qlow<=low&&qhigh>=high) return seg[pos];
  ll mid=(low+high)/2;
  return min(query(low,mid,qlow,qhigh,2*pos),query(mid+1,high,qlow,qhigh,2*pos+1));
}

ll GetInd(ll cur)
{
  ll low=1,high=n,pos;
  while(low<=high)
  {
    ll mid=(low+high)/2;
    ll inmini=query(1,n,low,mid,1);
    if(inmini<cur){pos=mid;high=mid-1;}
    else{low=mid+1;}
  }
  return pos;
}

int main()
{
  fast;
  cin>>n>>k;
  ll maxi=-INF;
  for(ll i=1;i<=n;i++){cin>>a[i];cnt[a[i]]++;}
  for(ll i=1;i<=k;i++){cin>>c[i];}
  for(ll i=k;i>=1;i--)
  {
    if(cnt[i]==0){continue;}
    ll id=GetInd(c[i]);
    //trace()
    while(1)
    {
      ll m=ans[id].size();
      ll can=c[i]-m;
      for(ll j=1;j<=can;j++)
      {
        ans[id].pb(i);
        cnt[i]--;
        update(1,n,id,1);
        maxi=max(maxi,id);
        if(cnt[i]==0){break;}
      }
      if(cnt[i]==0){break;}
      id++;
    }
  }
  cout<<maxi<<endl;
  for(ll i=1;i<=maxi;i++)
  {
    cout<<ans[i].size()<<" ";
    for(auto j:ans[i]){cout<<j<<" ";}
    cout<<endl;
  }
}
