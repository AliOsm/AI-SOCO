#include <cstdio>
#include <cstring>
#include <algorithm> 
#include <vector>
#include <string>
#include <iostream>
#include <map>
#include <queue>   
#include <functional>
#include <climits>
#include <set>
   

int N, M;
std::vector<int> G[ 1 << 18 ] ;

bool visited[ 1 << 18 ] = {};
std::vector< int > path;

void dfs( int cur )
{
    visited[ cur] = true ;
    path.push_back( cur );
    
    for(int v : G[cur] )
    { 
        if ( ! visited[v]  )
        {
            dfs( v );
        }
    }
}

int solve()
{
     
    scanf("%d%d", &N, &M);
    
    
    for(int i = 0; i<M; ++i)
    {
        int u,v;
        scanf("%d%d", &u, &v);
        --u, --v;
        
        G[u].push_back(v);
        G[v].push_back(u);
    }
    
    int ans = 0;
    for(int i = 0; i < N; ++i)
    {
        if ( ! visited[i] )
        {
            path.clear();
            dfs(i);
            
            bool cycle = path.size() >= 3;
            for(int p : path)
                cycle =cycle && G[p].size() == 2;
            
            if (cycle)
                ++ans;
        }
    }
    
    printf("%d\n", ans);
    return 0;
}

int main(int argc, char* argv[])
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif   
    
    solve();
    
    return 0;
 }