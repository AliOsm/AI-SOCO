/*
    STARK_BOY
*/
#include <bits/stdc++.h>
#include <fstream>
using namespace std;
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define repe(i,a,b) for(ll i=a;i<=b;i++)
#define bac(i,a,b) for(ll i=a;i>=b;i--)
#define pb push_back
#define mp make_pair
#define F first
#define S second
typedef long long ll;
typedef vector< ll > vi;
typedef vector<pair<ll,ll> > vpii;
typedef pair<ll,ll> pii;
#define all(c) c.begin(),c.end()
#define ios ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define setbitc(x) __builtin_popcount(x)
#define init(x,a) memset(x,a,sizeof(x))
#define PI           3.14159265358979323846  /* pi */
mt19937 rng32(chrono::steady_clock::now().time_since_epoch().count());
#define N 1000005
//Variables Start
ll inf=1e18,MOD=1e9+7;
ll n,m,k,ar[N],br[N];
string s,s1;
//Variables End

vector<int> prefix_function(string s) {
    int n = (int)s.length();
    vector<int> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}

void compute_automaton(string s, vector<vector<int>>& aut) {
    s += '#';
    int n = s.size();
    vector<int> pi = prefix_function(s);
    aut.assign(n, vector<int>(26));
    for (int i = 0; i < n; i++) {
        for (int c = 0; c < 26; c++) {
            if (i > 0 && 'a' + c != s[i])
                aut[i][c] = aut[pi[i-1]][c];
            else
                aut[i][c] = i + ('a' + c == s[i]);
        }
    }
}

int main()
{
    ios
    int ti=1;
    //cin>>ti;
    while(ti--)
    {
		cin>>s>>s1;
		vector<vector<int>> aut;
		compute_automaton(s1,aut);
		int n=s.length(),m=s1.length();
		vi temp(m+1,-1);
		vector<vi> dp(n+1,temp);
		//rep(i,0,m+1)dp[0][i]=0;
		dp[0][0]=0;
		rep(i,0,n)
		{
			rep(j,0,m+1)
			{
				if(dp[i][j]!=-1){
				if(s[i]=='?')
				{
					rep(k,0,26)
					{
						ll new_state=aut[j][k];
						ll add=(new_state==m);
						dp[i+1][new_state]=max(dp[i+1][new_state],add+dp[i][j]);
						/*if(new_state==s1.length())
						{
							dp[i+1][0]=max(dp[i+1][0],dp[i][j]+1);
						}
						else
						{
							dp[i+1][new_state]=max(dp[i+1][new_state],dp[i][j]);
						}*/
					}
				}
				else
				{	
					ll k=s[i]-'a';
					ll new_state=aut[j][k];
					ll add=(new_state==m);
					dp[i+1][new_state]=max(dp[i+1][new_state],add+dp[i][j]);
					/*if(new_state==s1.length())
					{
						dp[i+1][0]=max(dp[i+1][0],dp[i][j]+1);
					}
					else
					{
						dp[i+1][new_state]=max(dp[i+1][new_state],dp[i][j]);
					}*/

				}
				}
				//cout<<i+1<<" "<<j<<" "<<dp[i+1][j]<<endl;
			}
		}
		ll ans=0;
		rep(i,0,m+1)ans=max(ans,dp[n][i]);
		cout<<ans<<endl;



    }
    return 0;
        
}