#include<iostream>
#include<vector>
#include<algorithm>
#include<map>
#include<iterator>
#include<stack>
#include<string>
#include<climits>
#include<bitset>
#include<queue>
#include<cmath>
#include<cstdlib>
#include<cstdio>
#include<sstream>
#include<iomanip>
#include<cstring>
#include<list>

#define ssync ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)

using namespace std;

typedef long long int ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;
typedef vector<vs> vvs;
typedef vector<ll> vll;
typedef vector<vll> vvl;
typedef vector<pair<int, int> > vp;
typedef vector<string> vs;
const ll MOD = 1000000007;
const long double PI = 3.14159265;

string toBin(long long int a)
{
	return bitset<64>(a).to_string();
}

string intToString (ll a)
{
	ostringstream temp;
	temp<<a;
	return temp.str();
}

ll powerWithMod(ll base, ll exponent, ll modulus)
{
	ll result = 1;
	base %= modulus;
	while(exponent > 0)
	{
		if(exponent % 2 == 1)
			result = (result * base) % modulus;
		exponent >>= 1;
		base = (base * base) % modulus;
	}
	return result;
}

ll gcdExtended(ll a, ll b, ll *x, ll *y)
{
	if (a == 0)
	{
		*x = 0, *y = 1;
		return b;
	}
	ll x1, y1;
	ll gcd = gcdExtended(b%a, a, &x1, &y1);
	*x = y1 - (b/a) * x1;
	*y = x1;
	return gcd;
}

ll modInverse(ll a, ll m)
{
	ll x, y;
	ll g = gcdExtended(a, m, &x, &y);
	ll res = (x%m + m) % m;
	return res;
}

class edges
{
	public:
		int len, included, index;

		bool operator<(const edges& other) const
		{
			if(len == other.len)
				return included > other.included;
			return len < other.len;
		}
}E[123456];

vp ans(123456);

int main()
{
	ssync;
	int n, m, t1, t2;
	cin>>n>>m;
	for(int i=0; i<m; i++)
	{
		cin>>t1>>t2;
		E[i].len = t1;
		E[i].included = t2;
		E[i].index = i;
	}
	sort(E, E+m);
	int from = 2, to = 3, curr = 2;
	for(int i=0; i<m; i++)
	{
		if(E[i].included == 1)
		{
			ans[E[i].index].first = 1;
			ans[E[i].index].second = curr;
			curr++;
		}
		else
		{
			if(to >= curr)
			{
				cout << "-1\n";
				return 0;
			}
			ans[E[i].index].first = from;
			ans[E[i].index].second = to;
			from++;
			if(from == to)
			{
				from = 2;
				to++;
			}
		}
	}
	for(int i=0; i<m; i++)
		cout << ans[i].first << " " << ans[i].second << "\n";
	return 0;
}
