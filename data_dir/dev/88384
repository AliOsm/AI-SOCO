#include <bits/stdc++.h>
const int N = 500010;
/*
bool flag[N];
int p[N],pn,mu[N];
void init()
{
    pn=0;
    mu[1] = 1;
    for(int i = 2; i < N; i++)
    {
        if(!flag[i]) p[pn++] = i, mu[i] = -1;
        for(int j = 0; j < pn && i*p[j] < N; j++)
        {
            flag[i*p[j]] = true;
            if(i%p[j]==0) {
                mu[i*p[j]] = 0;
                break;
            } 
            else 
                mu[i*p[j]] = -mu[i];
        }
    }
}
int cnt[N], f[N];
std::vector<int> pri[N];
bool is[N];
*/
int a[N], flag[N], f[N], tot, c[N], ctot;
int d[N][10], dd[N];
long long ans, curans;
void init()
{
        for(int i = 2; i < N; i++) {
                if(dd[i]) {
                        continue;
                }
                for(int j = i; j < N; j += i) {
                        d[j][++dd[j]] = i;
                }
        }
}
void dfs(int dep, int x, int count, int value)
{
        if(dep > dd[x]) {
                if(!count) {
                        return ;
                }
                if(count & 1) {
                        curans += f[value];
                } else {
                        curans -= f[value];
                }
                c[++ctot] = value;
                return ;
        }
        dfs(dep + 1, x, count, value);
        dfs(dep + 1, x, count + 1, value * d[x][dep]);
}
int calc(int x)
{
        curans = 0, ctot = 0;
        dfs(1, x, 0, 1);
        return tot - curans;
}
int countOfOne;
int main()
{
        init();
        int n, q;
        scanf("%d%d", &n, &q);
        for(int i = 1; i <= n; i++) {
                scanf("%d", &a[i]);
        }
        while(q--) {
                int x;
                scanf("%d", &x);
                if(a[x] == 1) {
                        if(flag[x] == 0) {
                                countOfOne++;
                                ans += tot;
                                flag[x] = 1;
                                tot++;
                        } else {
                                countOfOne--;
                                ans -= tot - 1;
                                flag[x] = 0;
                                tot--;
                        }
                        printf("%I64d\n", ans);
                        continue;
                }
                int count = calc(a[x]);
                if(!flag[x]) {
                        flag[x] = 1;
                        for(int i = 1; i <= ctot; i++) {
                                f[c[i]]++;
                        }
                        ans += count;
                        tot++;
                } else {
                        flag[x] = 0;
                        for(int i = 1; i <= ctot; i++) {
                                f[c[i]]--;
                        }
                        ans -= count;
                        tot--;
                }
                printf("%I64d\n", ans);
        }
        return 0;
}
