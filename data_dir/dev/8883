//              +-- -- --++-- +-In the name of ALLAH-+ --++-- -- --+              \\

#include <bits/stdc++.h>

#define int ll

#define F first
#define S second
#define _sz(x) (int)x.size()

using namespace std ;
using ll = long long ;
using ld = long double ;
using pii = pair <int , int> ;

int const N = 2e5 + 20 , mod = 998244353 ;
int n , a[N] ;
bool mark[N] ;
vector <int> vec ;

int ans , cur ;

inline int pw (int a , int b) {
	int res = 1 ;

	while (b) {
		if (b & 1) res = 1ll * res * a % mod ;
		a = 1ll * a * a % mod ;
		b >>= 1 ;
	}

	return res ;
}

int fen[N] ;

inline void add (int p) {
	for (p ++ ; p < N ; p += p & -p) fen[p] ++ ;
}

inline int get (int p) {
	int ans = 0 ;
	for (; p ; p -= p & -p) ans += fen[p] ;
	return ans ;
}

int32_t main(){
	ios::sync_with_stdio(false) , cin.tie(0) , cout.tie(0) ;

	cin >> n ;
	for (int i = 0 ; i < n ; i ++) {
		cin >> a[i] ;
		if (~a[i]) a[i] -- , mark[a[i]] = 1 ;
	}

	for (int i = 0 ; i < n ; i ++) if (!mark[i]) vec.push_back(i) ;

	int p = pw(_sz(vec) , mod - 2) ;

	for (int i = 0 ; i < n ; i ++) {
		if (a[i] != -1) {
			int id = lower_bound(vec.begin() , vec.end() , a[i]) - vec.begin() ;
			cur = (cur + id) % mod ;
		}
		else {
			ans = (ans + 1ll * cur * p) % mod ;
		}
	}

	cur = 0 ;
	for (int i = n - 1 ; i >= 0 ; i --) {
		if (a[i] != -1) {
			int id = lower_bound(vec.begin() , vec.end() , a[i]) - vec.begin() ;
			id = _sz(vec) - id ;
			cur = (cur + id) % mod ;
		}
		else {
			ans = (ans + 1ll * cur * p) % mod ;
		}
	}

	ans = (ans + 1ll * (_sz(vec) - 1) * _sz(vec) / 2 % mod * (mod + 1) / 2) % mod ;
	
	for (int i = n - 1 ; i >= 0 ; i --) {
		if (~a[i]) {
			(ans += get(a[i])) %= mod ;
			add(a[i]) ;
		}
	}

	cout << ans << '\n' ;
}
