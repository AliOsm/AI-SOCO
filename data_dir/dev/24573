/*
ye mera template hai
apna khud likho bc :P
*/

/*
Author : Sarvagya Agarwal
*/

#include<bits/stdc++.h>
using namespace std;

//defines
#define openin freopen("input.txt","r",stdin)
#define openout freopen("output.txt","w",stdout)
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ll long long
#define int long long
#define mod 1000000007
#define repr(i,x,y) for (__typeof(x) i=x;i>=y;i--)
#define rep(i,x,y) for (__typeof(x) i=x;i<=y;i++)
#define all(c) (c).begin(),(c).end()
#define ff first
#define ss second
#define pb push_back
#define mp make_pair

/* Print pair */
template <typename T,typename S>
ostream & operator << (ostream &os , const pair<T,S> &v) {
    os << "(" ;
    os << v.first << "," << v.second << ")" ;
    return os ;
}
/* Print vector */
template <typename T>
ostream & operator << (ostream &os , const vector<T> &v) {
    os << "[" ;
    int sz = v.size() ;
    for(int i = 0 ; i < sz ; ++i) {
        os << v[i] ;
        if(i!=sz-1)os << "," ;
    }
    os << "]\n" ;
    return os ;
}
/* Print set */
template <typename T>
ostream & operator << (ostream &os , const set<T> &v) {
    T last = *v.rbegin() ;
    os << "[" ;
    for(auto it : v) {
        os << it  ;
        if(it != last) os << "," ;
    }
    os << "]\n" ;
    return os ;
}
/* Print Map */
template <typename T,typename S>
ostream & operator << (ostream &os , const map<T,S> &v) {
    for(auto it : v) {
        os << it.first << " : " << it.second << "\n" ;
    }
    return os ;
}
int power(int a , int b)
{
    int res = 1 ;
    while(b)
    {
        if(b%2) {
            res = (res * a) % mod ;
        }
        b/=2 ;
        a = (a*a) % mod ;
    }
    return res ;
}

//debug
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
		cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
		const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif
string grid[4] ;
bool valid(int r,int c)
{
    return r >= 0 && r < 4 && c >=0 && c < 4 ;
}
bool win()
{
    rep(i,0,3)
    {
        if(grid[i][0]=='x' && grid[i][1]=='x'&&grid[i][2]=='x')return true ;
        if(grid[i][3]=='x' && grid[i][1]=='x'&&grid[i][2]=='x')return true ;
    }
    rep(i,0,3)
    {
        if(grid[0][i]=='x' && grid[1][i]=='x'&&grid[2][i]=='x')return true ;
        if(grid[3][i]=='x' && grid[1][i]=='x'&&grid[2][i]=='x')return true ;
    }
    if(grid[0][0]=='x'&&grid[1][1]=='x'&&grid[2][2]=='x')return true ;
    if(grid[1][0]=='x'&&grid[2][1]=='x'&&grid[3][2]=='x')return true ;
    if(grid[0][1]=='x'&&grid[1][2]=='x'&&grid[2][3]=='x')return true ;
    if(grid[3][3]=='x'&&grid[1][1]=='x'&&grid[2][2]=='x')return true ;
    if(grid[2][0]=='x'&&grid[1][1]=='x'&&grid[0][2]=='x')return true ;
    if(grid[3][0]=='x'&&grid[2][1]=='x'&&grid[1][2]=='x')return true ;
    if(grid[0][3]=='x'&&grid[2][1]=='x'&&grid[1][2]=='x')return true ;
    if(grid[3][1]=='x'&&grid[2][2]=='x'&&grid[1][3]=='x')return true ;
    return false ;
}
int32_t main()
{
    fast;
    rep(i,0,3)cin >> grid[i] ;
    rep(i,0,3)
    {
        rep(j,0,3)
        {
            if(grid[i][j]=='.')
            {
                grid[i][j]='x' ;
                if(win()) {
                    cout << "YES\n" ;
                    return 0 ;
                }
                grid[i][j] = '.' ;
            }
        }
    }
    cout << "NO\n" ;
    return 0;
}
