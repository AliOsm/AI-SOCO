#include<bits/stdc++.h>
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
using namespace std;
const ll mod=1e9+7;         
const int N=1e3+4;
 
int n;
 
double p[20][20],dp[1<<20][20];
 
//the set bits of mask represent the players who have played till now
//dp[mask][winner] denotes the probability of 1 winning if mask is the current
//subset of players who have played till now and winner has survived among
//them.
 
double fun(int mask,int winner)
{
    int cnt=__builtin_popcount(mask);
    
    if(cnt==n)
    return 1.0;
    
    if(dp[mask][winner]!=-1.0)
    {
        //cout<<mask<<" "<<winner<<" "<<dp[mask][winner]<<endl;
        return dp[mask][winner];
    }
    
    double here=0.0;
    
    rep(i,1,n+1)
    {
        if(mask&(1<<i))
        continue;
        
        int player=(1<<i);
        
        double val;
        
        //you have to make player 1 the ultimate survivor since you are
        //interested in finding the probability of that only.
        if(winner==1)
        val=p[winner][i]*fun(mask|player,winner);
        else if(i==1)
        val=p[i][winner]*fun(mask|player,i);
        else
        val=(p[i][winner]*fun(mask|player,i))+(p[winner][i]*fun(mask|player,winner));
        
        here=max(here,val);
    }
    
    dp[mask][winner]=here;
    
    //cout<<mask<<" "<<winner<<" "<<here<<endl;
    
    return here;
}
 
int main()
{  
    scn(n);
    
    rep(i,1,n+1)
    {
        rep(j,1,n+1)
        cin>>p[i][j];
    }
    
    double final=0.0;
    
    rep(i,0,(1<<20))
    {
        rep(j,0,20)
        dp[i][j]=-1.0;
    }
    
    
    rep(i,1,n+1)
    {
        double here=fun(1<<i,i);
        
        final=max(final,here);
    }
    
    cout<<fixed<<setprecision(10)<<final;
    
    return 0;
}