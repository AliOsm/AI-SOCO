#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

int f(int n)
{
    int res = 1;
    while(n > 0)
    {
        int c = n % 10;
        n /= 10;
        if(c != 0) res *= c;
    }
    return res;
}

const int N = 1e6;

int g[N + 7];
int cnt[11][N + 7];

int main()
{
    _upgrade
    for(int i = 1; i <= 9; i++)
        g[i] = i;
    for(int i = 10; i <= N; i++)
        g[i] = g[f(i)];
    for(int i = 1; i <= N; i++)
    {
        cnt[g[i]][i]++;
        for(int j = 1; j < 10; j++)
            cnt[j][i] += cnt[j][i - 1];
    }
    int q; cin >> q;
    while(q--)
    {
        int l, r, k; cin >> l >> r >> k;
        cout << cnt[k][r] - cnt[k][l - 1] << "\n";
    }
	return 0;
}
