#include<bits/stdc++.h>
using namespace::std;

struct HashTable{
	int p;
	int mod;
	int b;
	int c;
	vector< vector<string> > v;
	vector< vector<int> > frec;
	
	HashTable(){};
	
	void setup(int _mod, int _p, int _c, int _b){
		mod = _mod;
		p = _p;
		c = _c;
		b = _b;
		v.clear();
		v.resize(mod);
		v.assign(mod,vector<string>());
		frec.clear();
		frec.resize(mod);
		frec.assign(mod,vector<int>());
	}

	int mul(long long a, long long b){
		a *= b;
		a %= p;
		return a;
	}

	int add(long long a, long long b){
		a += b;
		return a % p;
	}

	int f(string s){
		int ans = 0;
		for(int i=0; i<s.size(); i++){
			ans = add(mul(b,ans),s[i]);
		}
		return add(ans,c) % mod;
	}

	void insert(string x){
		int pos = f(x);
		bool found = false;
		for(int i=0; i<v[pos].size(); i++){
			if(v[pos][i] == x){
				frec[pos][i]++;
				found = true;
			}
		}
		if(!found){
			v[pos].emplace_back(x);
			frec[pos].emplace_back(1);
		}
	}
	
	bool search(string x){
		int pos = f(x);
		for(int i=0; i<v[pos].size(); i++){
			if(v[pos][i] == x) return true;
		}
		return false;
	}

	int count(string x){
		int pos = f(x);
		for(int i=0; i<v[pos].size(); i++){
			if(v[pos][i] == x) return frec[pos][i];
		}
		return 0;
	}

	void erase(string x){
		int pos = f(x);
		vector<string>::iterator toErase = v[pos].end();
		for(vector<string>::iterator it=v[pos].begin(); it!=v[pos].end(); it++){
			if(*it == x){
				toErase = it;
				break;
			}
		}
		int dis = toErase - v[pos].begin();
		if(toErase != v[pos].end()){
			v[pos].erase(toErase);
		}
		frec[pos].erase(frec[pos].begin()+dis);
	}

	void print(){
		for(int i=0; i<mod; i++){
			if(v[i].size()){
				cout << "List " << i << " --> ";
				for(auto x:v[i]){
					cout << x << " --> ";
				}
				puts("");
			}
		}
	}
	
};

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

int random(int l, int r){
	return uniform_int_distribution<int>(l,r)(rng);
}

string toString(int x){
	if(x == 0) return "0";
	string ans = "";
	while(x > 0){
		ans += char('0'+x%10);
		x /= 10;
	}
	reverse(ans.begin(),ans.end());
	return ans;
}

int main(){
	HashTable Ejemplo[3];
	Ejemplo[0].setup(1000000,1000000007,2,311);
	Ejemplo[1].setup(1000000,1000000007,2,311);
	int n;
	Ejemplo[1].insert("0");
	scanf("%d",&n);
	int prefix = 0;
	int a;
	long long ans = 0LL;
	for(int i=0; i<n; i++){
		scanf("%d",&a);
		prefix ^= a;
		string carry = toString(prefix);
		ans += Ejemplo[i&1].count(carry);
		Ejemplo[i&1].insert(carry);
	}
	cout << ans << endl;
	return 0;
}
