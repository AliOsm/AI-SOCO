#include <bits/stdc++.h>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef long long ll;
typedef unsigned long long llu;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<string, int> psi;
typedef pair<char, int> pci;
typedef pair<int, char> pic;
const ll MOD = (ll)1e9 + 7;
const long double PI = 3.141592653589793238462643383279502884197;

ll fac[1] = {1}, inv[1] = {1};
ll gcd(ll a,ll b){return b?gcd(b,a%b):a;}
ll mp(ll a,ll b){ll ret=1;while(b){if(b&1)ret=ret*a%MOD;a=a*a%MOD;b>>=1;}return ret;}
ll cmb(ll r, ll c) {return fac[r] * inv[c] % MOD * inv[r - c] % MOD;}

priority_queue<int, vector<int>, greater<int>> pq;

int n;
int dp[1002][1002];

struct tree {
    int nn;
    vector<int> v[2000];
    int li[1002];
    int spa[2000][11];
    int dist[2000];

    void init() {
        memset(li, 0, sizeof(li));
        memset(spa, 0, sizeof(spa));
        memset(dist, 0, sizeof(dist));
    }

    void pre(int o, int di, int pa) {
        dist[o] = di;
        spa[o][0] = pa;
        for (int i = 1; i < 11; i++) spa[o][i] = spa[spa[o][i-1]][i - 1];
        for (int i : v[o]) pre(i, di + 1, o);
    }
    int lca(int a, int b) {
        // if (a == 2001 || b == 2001) return 0;
        if (dist[a] > dist[b]) swap(a, b);
        for (int i = 10; i >= 0; i--)
            if (dist[a] <= dist[spa[b][i]])
                b = spa[b][i];
        if (a == b) return a;
        for (int i = 10; i >= 0; i--)
            if (spa[a][i] != spa[b][i])
                a = spa[a][i], b = spa[b][i];
        return spa[a][0];
    }
} a, b;

int go(int aa, int bb) {
    int o;
    if (aa == 1001 && bb == 1001) o = 0;
    else if (aa == 1001) o = bb + 1;
    else if (bb == 1001) o = aa + 1;
    else o = max(aa, bb) + 1;

    if (o == n) return 0;
    if (dp[aa][bb] != -1) return dp[aa][bb];

    int miv = 1e9, co, lc;

    lc = a.lca(a.li[o], a.li[aa]);
    co = a.dist[a.li[o]] - a.dist[lc];
    miv = min(miv, go(o, bb) + co);

    lc = b.lca(b.li[o], b.li[bb]);
    co = b.dist[b.li[o]] - b.dist[lc];
    miv = min(miv, go(aa, o) + co);

    return dp[aa][bb] = miv;
}

int main() {
    memset(dp, -1, sizeof(dp));
    a.init(); b.init();
    scanf("%d %d", &n, &a.nn);
    for (int i = 1; i < a.nn; i++) {
        int pa;
        scanf("%d", &pa);
        pa--;
        a.v[pa].push_back(i);
    }
    for (int i = 0; i < n; i++) scanf("%d", &a.li[i]), a.li[i]--;

    scanf("%d", &b.nn);
    for (int i = 1; i < b.nn; i++) {
        int pa;
        scanf("%d", &pa);
        pa--;
        b.v[pa].push_back(i);
    }
    for (int i = 0; i < n; i++) scanf("%d", &b.li[i]), b.li[i]--;
    a.pre(0, 0, 0);
    b.pre(0, 0, 0);

    printf("%d\n", a.nn + b.nn - go(1001, 1001) - 2);
}