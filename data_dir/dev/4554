// in the name of Allah
#include <bits/stdc++.h>
using namespace std;

#define endl '\n'
#define pb push_back
#define ll long long
#define double long double
#define sz(x) ((int) (x.size()))
#define all(x) (x).begin(), (x).end()

#define fr first
#define se second

const ll mod = 998244353;

inline ll add(ll a, ll b) {
	a += b;
	if(a >= mod) return a - mod;
	return a;
}

inline ll mul(ll a, ll b) {
	a *= b;
	if(a >= mod) return a % mod;
	return a;
}

inline ll power(ll a, ll b) {
	ll p = 1;
	while(b) {
		if(b&1) p = mul(p, a);
		a = mul(a, a);
		b /= 2;
	}
	return p;
}

struct FenwickTree {

	int n;
	vector <ll> t;

	FenwickTree() {}

	FenwickTree(int nn) {
		n = nn;
		t.resize(n + 1);
	}

	void update(int idx, ll delta) {
		idx++;
		while(idx <= n) {
			t[idx] += delta;
			idx += (idx & -idx);
		}
	}

	ll sum(int idx) {
		idx++;
		ll res = 0;
		while(idx > 0) {
			res += t[idx];
			idx -= (idx & -idx);
		}
		return res;
	}

} fen[3][3];

const int N = 2e5 + 5;

map <char, int> mp;

int solve() {
	int n, k;
	string s;
	cin >> n >> k >> s;
	for(int i=0; i<3; i++) {
		for(int j=0; j<3; j++) {
			fen[i][j] = FenwickTree(n+10);
		}
	}
	for(int i=0; i<n; i++) {
		fen[mp[s[i]]][i%3].update(i, 1);
	}
	int ans = 1e9;
	for(int i=0; ; i++) {
		int j = i + k - 1;
		if(j >= n) break;
		for(int a=0; a<3; a++) {
			int res = 0;
			for(int b=0; b<3; b++) {
				res += fen[b][(a+b)%3].sum(j) - fen[b][(a+b)%3].sum(i-1);
			}
			ans = min(ans, k-res);
		}
	}
	return ans;
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);

	mp['R'] = 0;
	mp['G'] = 1;
	mp['B'] = 2;

	int qq;
	cin >> qq;
	while(qq--) {
		cout << solve() << endl;
	}

	return 0;
}