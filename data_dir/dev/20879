#include <bits/stdc++.h>
using namespace std;
typedef long long int64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//998244353;
const int base = 2187;
const double eps = 1e-8;
const int N = 100'000;

int n, m, k;
int a[N];

void solve(int test)
{
  cin >> n;
  for (int i = 0; i < n; ++i)
    cin >> a[i];
  int mx = inf;
  for (int i = 1; i <= n; ++i) {
    int cur = 0;
    for (int j = 1; j <= n; ++j) {
      cur += (abs(i - j) + i - 1 + j - 1) * a[j - 1];
    }
    mx = min(mx, cur);
  }
  cout << mx * 2;
}

void precalc()
{
}

int main()
{
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i)
      solve(i);
  //cout << endl << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count();
  return 0;
}
