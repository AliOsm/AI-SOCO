///Foxi_Doree
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define gcd __gcd
#define time { ios::sync_with_stdio(0); ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); srand(time(0)); }

using namespace std;
using namespace __gnu_pbds;

ifstream in("input.txt");
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef pair < ll, ll > pll;
typedef pair < double, double > pdd;
typedef vector < ll > vll;
typedef set < ll > sll;
/*
    find_by_order()
    order_of_key()
*/
typedef tree <
ll, null_type,
less < ll >, rb_tree_tag,
tree_order_statistics_node_update > set_t;
const ll inf = 1000000007, oo = 1e6 + 2, o = 4e5 + 2, f = 998244353;

ll n, x, y, k, L; bool access;
vector < vector < ll > > v;

ll dfs(ll to, ll p, ll num)
{
    ++k;
    if(to == num) access = true;
    for(ll i = 0; i < v[to].size(); ++i) {
        ll now = v[to][i];
        if(now != p) {
            dfs(now, to, num);
        }
    }
}

int main()
{
    time

    ll i;

    cin >> n >> x >> y; --x; --y;

    v.resize(n);
    for(i = 0; i < n - 1; ++i) {
        ll a, b;
        cin >> a >> b; --a; --b;
        v[a].pb(b);
        v[b].pb(a);
    }

    ll ans = 0;
    for(i = 0; i < v[x].size(); ++i) {
        access = false; k = 0;
        dfs(v[x][i], x, y);
        ans += k * access;
    }

    ll L = 0;
    for(i = 0; i < v[y].size(); ++i) {
        access = false; k = 0;
        dfs(v[y][i], y, x);
        L += k * access;
    }
    
    cout << n * (n - 1) - (n - ans) * (n - L);
}
