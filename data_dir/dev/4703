#include<stdio.h>
#include<iostream>
#include<string.h>
#include<string>
#include<ctype.h>
#include<math.h>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<bitset>
#include<algorithm>
#include<time.h>
using namespace std;
void fre() { freopen("c://test//input.in", "r", stdin); freopen("c://test//output.out", "w", stdout); }
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define MP(x,y) make_pair(x,y)
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T1, class T2>inline void gmax(T1 &a, T2 b) { if (b>a)a = b; }
template <class T1, class T2>inline void gmin(T1 &a, T2 b) { if (b<a)a = b; }
const int N = 2e5 + 10, M = 0, Z = 1e9 + 7, ms63 = 0x3f3f3f3f;
int n;
struct A
{
	int x, y;
}a[N];
bool cmp1(A a, A b)
{
	return a.x < b.x;
}
bool cmp2(A a, A b)
{
	return a.y < b.y;
}

//用map实现的代码量最少的程序
map<int, int>b, c;
map<pair<int, int>, int>d;
void Easy()
{
	LL ans = 0;
	int x, y;
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i)
	{
		scanf("%d%d", &x, &y);
		ans += b[x]++;
		ans += c[y]++;
		ans -= d[MP(x, y)]++;
	}
	printf("%lld\n", ans);
}

int main()
{
	Easy();
	while (~scanf("%d", &n))
	{
		LL num, ans = 0;
		for (int i = 1; i <= n; ++i)scanf("%d%d", &a[i].x, &a[i].y);
		a[0].x = a[0].y = -2e9;
		sort(a + 1, a + n + 1, cmp1);
		num = 0;
		for (int i = 1; i <= n; ++i)
		{
			if (a[i].x == a[i - 1].x)++num;
			else
			{
				ans += num*(num - 1) / 2;
				num = 1;
			}
		}ans += num*(num - 1) / 2;
		stable_sort(a + 1, a + n + 1, cmp2);
		num = 0;
		for (int i = 1; i <= n; ++i)
		{
			if (a[i].y == a[i - 1].y)++num;
			else
			{
				ans += num*(num - 1) / 2;
				num = 1;
			}
		}ans += num*(num - 1) / 2;
		num = 0;
		for (int i = 1; i <= n; ++i)
		{
			if (a[i].x == a[i - 1].x&&a[i].y == a[i - 1].y)++num;
			else
			{
				ans -= num*(num - 1) / 2;
				num = 1;
			}
		}ans -= num*(num - 1) / 2;
		printf("%lld\n", ans);
	}
	return 0;
}
/*
【trick&&吐槽】
这道题要谨记，要严格吸取教训。

1，比赛的时候一定要专注，不要被任何声音，任何事情所左右。
	一旦做了这场比赛，就要做好。

2，有些题目wa了，一定有原因。原因出错的原因，相比较变量对应，更可能是逻辑问题。
	检查逻辑错误应该是更重要的。

3，比较2个值是否相同要双关键字排序。sort是不稳定排序，stable_sort()才是稳定排序。

【题意】
有n（2e5）个点。
每个点的范围都是[-1e9,1e9]
问你，有多少个点对，满足欧几里得距离=曼哈顿距离

【类型】
排序 STL-map

【分析】
欧几里得距离是sqrt((x1-x2)^2+(y1-y2)^2)
曼哈顿距离是abs(x1-x2)+abs(y1-y2)
也就是比较sqrt(a^2+b^2)与a+b的关系
两者做平方，前者变成a^2+b^2，后者为a^2+b^2+2ab，
显然只有a==0或者b==0的时候两者相同。
于是我们只要知道算出横坐标或纵坐标相同的点对即可。

这里可以用两次排序解决，但是排序要不选择双关键字排序，要不选择stable_sort()
也可以用map解决。
map可以先统计完，最后再计数；
也可以在过程中就直接计数。

【时间复杂度&&优化】
O(nlogn)

*/