#include <bits/stdc++.h>
using namespace std;

const int N = 1e5+5, MOD1 = 1e9 + 7, MOD2 = 1e9+9;
const int BASE = 27;
/*
*/
#define F first
#define S second
#define FOR(i, a, b) for(int i = a; i < b; i++)
#define pb push_back
#define mp(x,y) make_pair(x,y)
#define all(x) x.begin(), x.end()
#define V vector

using ll = long long;
using ii = pair<int, int>;
int dp[255][255][255];
string S;
int nxt[100005][26], n, q;
string x[4];
int main()
{
#ifdef ONLINE_JUDGE
    ios_base::sync_with_stdio(0);
    cin.tie(0);
#endif
///maximum
    cin >> n >> q;
    cin >> S;
//    reverse(S.begin(),S.end());
    fill(nxt[n], nxt[n] + 26, n);
    fill(nxt[n+1], nxt[n+1] + 26, n);
    for(int i = n-1; i >= 0; --i)
    {
        for(int j = 0; j < 26; j++)
            nxt[i][j] = nxt[i+1][j];
        nxt[i][S[i] - 'a'] = i;
    }
    for(int i = 0; i < 255; i++)
        for(int j = 0; j < 255; j++)
            for(int k = 0; k < 255; k++)
                dp[i][j][k] = n + 1;
    dp[0][0][0] = 0;
    char c;
    int i;
    while(q--)
    {
        cin >> c >> i;
        if(c=='-')
        {
            vector<int>v;
            if(i!=1)
                v.push_back(1);
            if(i!=2)
                v.push_back(2);
            if(i!=3)
                v.push_back(3);
            for(int j = 0; j <= x[v[0]].size(); j++)
                for(int k = 0; k <= x[v[1]].size(); k++)
                {
                    if(i==1)
                        dp[x[i].size()][j][k]=n+1;
                    if(i==2)
                        dp[j][x[i].size()][k]=n+1;
                    if(i==3)
                        dp[j][k][x[i].size()]=n+1;
                }
            x[i].pop_back();
        }
        else
        {
            cin >> c;
            x[i].push_back(c);
            vector<int>v;
            if(i!=1)
                v.push_back(1);
            if(i!=2)
                v.push_back(2);
            if(i!=3)
                v.push_back(3);
            for(int j = 0; j <= x[v[0]].size(); j++)
                for(int k = 0; k <= x[v[1]].size(); k++)
                {

                    if(i == 1)
                    {
                        if(j)
                        {
                            int pos = dp[x[1].size()][j-1][k];
                            dp[x[1].size()][j][k] = min(dp[x[1].size()][j][k],nxt[pos][x[v[0]][j-1]-'a'] + 1);
                        }
                        if(k)
                        {
                            int pos = dp[x[1].size()][j][k-1];
                            dp[x[1].size()][j][k] = min(dp[x[1].size()][j][k],nxt[pos][x[v[1]][k-1]-'a'] + 1);
                        }

                        int pos = dp[x[1].size()-1][j][k];
                        dp[x[1].size()][j][k] = min(dp[x[1].size()][j][k],nxt[pos][x[i].back()-'a'] + 1);
                    }
                    else if(i==2)
                    {
                        if(j)
                        {
                            int pos = dp[j-1][x[i].size()][k];
                            dp[j][x[i].size()][k] = min(dp[j][x[i].size()][k],nxt[pos][x[v[0]][j-1]-'a'] + 1);
                        }
                        if(k)
                        {
                            int pos = dp[j][x[i].size()][k-1];
                            dp[j][x[i].size()][k] = min(dp[j][x[i].size()][k],nxt[pos][x[v[1]][k-1]-'a'] + 1);
                        }

                        int pos = dp[j][x[i].size()-1][k];
                        dp[j][x[i].size()][k] = min(dp[j][x[i].size()][k],nxt[pos][x[i].back()-'a'] + 1);
                    }
                    else if(i==3)
                    {
                        if(j)
                        {
                            int pos = dp[j-1][k][x[i].size()];
                            dp[j][k][x[i].size()] = min(dp[j][k][x[i].size()],nxt[pos][x[v[0]][j-1]-'a'] + 1);
                        }
                        if(k)
                        {
                            int pos = dp[j][k-1][x[i].size()];
                            dp[j][k][x[i].size()] = min(dp[j][k][x[i].size()],nxt[pos][x[v[1]][k-1]-'a'] + 1);
                        }

                        int pos = dp[j][k][x[i].size()-1];
                        dp[j][k][x[i].size()] = min(dp[j][k][x[i].size()],nxt[pos][x[i].back()-'a'] + 1);

                    }
                }
        }
//        cout << dp[x[1].size()][x[2].size()][x[3].size()]  << "\n";
        if(dp[x[1].size()][x[2].size()][x[3].size()] <= n)
            cout << "YES\n";
        else
            cout << "NO\n";
    }



    return 0;
}
