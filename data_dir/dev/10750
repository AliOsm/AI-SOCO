#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
 
using namespace std;
 
#define ll long long
#define ld long double
#define pb push_back
#define pii pair<int, int>
#define pll pair<long long, long long>
#define pdd pair<double, double>
#define pldld pair<ld, ld>
#define mp make_pair
#define ull unsigned long long
#define pss pair<string, string>
#pragma comment(linker, "/STACK:64000000")
 
const int infi = 1e9 + 7;
const ll infl = 1e18;
const long double eps = 1e-8;
const long double eps1 = 1e-10;
const int mod = (1e9 + 7);
const ll mod1 = 1e9 + 7;
const ll mod2 = 1e9 + 7;
const ll p1 = 31;
const ll p2 = 37;
const ll p3 = 29;
const int ver1 = (62 * 62);

struct treap{
	int y, l, r, s, flag;
	treap(){
		l = r = s = flag = 0;
		y = -infi;
	};
	treap(int q) {
		l =r = 0;
		y = rand();
		s = 1;
		flag = q;
	}
};
int sz;
treap tree[1000500];
void recalce(int v) {
	if (v) {
		tree[v].s = tree[tree[v].l].s + tree[tree[v].r].s + 1;
	}
	return;
}
int merge1(int l, int r) {
	if (!l || !r) {
		return max(l, r);
	}
	if (tree[l].y > tree[r].y) {
		tree[l].r = merge1(tree[l].r, r);
		recalce(l);
		return l;
	}
	else {
		tree[r].l = merge1(l, tree[r].l);
		recalce(r);
		return r;
	}
}
pii split1(int t, int x) {
	if (!t) {
		return mp(0, 0);
	}
	pii z;
	if (tree[tree[t].l].s >= x) {
		z = split1(tree[t].l, x);
		tree[t].l = z.second;
		z.second = t;
	}
	else {
		z = split1(tree[t].r, x - tree[tree[t].l].s - 1);
		tree[t].r = z.first;
		z.first = t;
	}
	recalce(t);
	return z;
}
void add(int &t, int q) {
	tree[sz++] = treap(q);
	t = merge1(t, sz - 1);
	return;
}
void del(int &t, int x) {
	if (tree[tree[t].l].s + 1 == x) {
		t = merge1(tree[t].l, tree[t].r);
		recalce(t);
		return;
	}
	if (tree[tree[t].l].s >= x) {
		del(tree[t].l, x);
	}
	else {
		del(tree[t].r, x - tree[tree[t].l].s - 1);
	}
	recalce(t);
	return;
}
int ar[1000500];
void ans(int t) {
	if (!t) {
		return;
	}
	ans(tree[t].l);
	printf("%d", tree[t].flag);
	ans(tree[t].r);
	return;
}

int main() {
    //freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    //freopen("ant.in", "r", stdin); freopen("ant.out", "w", stdout);
	int n, m;
	srand(1488);
	++sz;
	int t = 0;
	int t1 = 0;
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; ++i) {
		scanf("%d", &ar[i]);
	}
	for (int i = 0; i < n; ++i) {
		int a;
		scanf("%d", &a);
		if (a >= 0) {
			add(t1, a);
			if (tree[t1].s == 1000) {
				t = merge1(t, t1);
				t1 = 0;
			}
			continue;
		}
		t = merge1(t, t1);
		t1 = 0;
		int j;
		for (j = 0; j < m && ar[j] <= tree[t].s; ++j);
		for (--j; j >= 0; --j) {
			del(t, ar[j]);
		}
	}
	t = merge1(t, t1);
	if (!tree[t].s) {
		cout << "Poor stack!";
		return 0;
	}
	ans(t);

    return 0;
}