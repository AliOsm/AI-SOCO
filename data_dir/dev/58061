#include <bits/stdc++.h>

#define x0 abc
#define y0 ABC
#define x1 abcd
#define y1 ABCD
#define xn abcde
#define yn ABCDE

#define l_b lower_bound
#define u_b upper_bound

#define fi first
#define se second
#define m_p make_pair

#define p_b push_back
#define po_b pop_back

#define ld long double
#define ll long long

#define cont continue
#define re return

#define MAXLL 9000000000000000000LL
#define MAXINT 2000000000

#define MINLL -9000000000000000000LL
#define MININT -2000000000

#define P acos(-1)

#define endl '\n'

#define OUT cout << "-------" << endl;

using namespace std;

int a[9], b[9], x[9], y[9], d[5][5], i, p, q, k1, k2;

bool x1, x2;

    int rast(int x1, int y1, int x2, int y2)
    {
        re (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
    }

    void dfs(int deep)
    {
        if (deep == 9) {
            if (k1 != 4)
            re;

            x1 = x2 = false;

            for (i = 1; i <= 24; i++) {
                for (p = 1; p <= 4; p++)
                    for (q = p + 1; q <= 4; q++) d[p][q] = rast(x[a[p]], y[a[p]], x[a[q]], y[a[q]]);

                if (d[1][2] == d[2][3] && d[2][3] == d[3][4] && d[3][4] == d[1][4] && d[1][3] == d[2][4])
                x1 = true;

                next_permutation(a + 1, a + 1 + 4);
            }

            for (i = 1; i <= 24; i++) {
                for (p = 1; p <= 4; p++)
                    for (q = p + 1; q <= 4; q++) d[p][q] = rast(x[b[p]], y[b[p]], x[b[q]], y[b[q]]);

                if (d[1][2] == d[3][4] && d[2][3] == d[1][4] && d[1][3] == d[2][4])
                x2 = true;

                next_permutation(b + 1, b + 1 + 4);
            }

            if (x1 && x2) {
                cout << "YES" << endl;

                for (i = 1; i <= 4; i++) cout << a[i] << " ";

                cout << endl;

                for (i = 1; i <= 4; i++) cout << b[i] << " ";

                cout << endl;

                exit(0);
            }

            re;
        }

        k1++;

        a[k1] = deep;

        dfs(deep + 1);

        k1--;

        k2++;

        b[k2] = deep;

        dfs(deep + 1);

        k2--;
    }

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    ios::sync_with_stdio(0);
    cin.tie(0);

    for (i = 1; i <= 8; i++) cin >> x[i] >> y[i];

    dfs(1);

    cout << "NO" << endl;

    re 0;
}
