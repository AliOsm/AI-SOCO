#include <bits/stdc++.h>

using namespace std;

long long n;
long long x[500005], y[500005], mi[500005], ma[500005];
bool zp, fi = 1;
long long ta, tb;

int main() {
	scanf("%lld", &n);
	for (int i = 0; i < n; i++)
		scanf("%lld", x + i);
	sort(x, x + n);
	for (int i = 0; i < n; i++)
		y[i + 1] = y[i] + x[i];
	if (y[n] > n * (n + 1)) {
		puts("-1");
		return 0;
	}
	// z + y[n] is even
	zp = y[n] & 1;
	// [mi, ma)
	for (int i = 0; i <= n; i++) {
		mi[i] = LLONG_MIN;
		ma[i] = LLONG_MAX;
	}
	
	for (long long k = 1; k <= n; k++) {
		// z in largest k
		// z + largest k-1 <= k*(k-1) + sum of reminaing min(d, k)
		// z <= - largest k-1 + k*(k-1) + sum of reminaing min(d, k)
		ta = k * (k - 1) - (y[n] - y[n - (k - 1)]);
		tb = lower_bound(x, x + (n - (k - 1)), k) - x;
		ta += y[tb] + k * (n - (k - 1) - tb);
		// n - k + 1 ... n, update ma
		// printf("k = %lld, z <= %lld, %lld ... n, tb = %lld\n", k, ta, n - k + 1, tb);
		ma[n - k + 1] = min(ma[n - k + 1], ta + 1);
		// z not in largest k
		// largest k <= k*(k-1) + sum of reminaing min(d, k) + z
		// largest k <= k*(k-1) + sum of reminaing min(d, k) + k
		ta = y[n] - y[n - k] - k * (k - 1);
		tb = lower_bound(x, x + (n - k), k) - x;
		ta -= y[tb] + k * (n - k - tb);
		if (k >= ta)
			mi[n - k] = max(mi[n - k], ta);
		else
			mi[n - k] = LLONG_MAX;
	}
	for (int i = 1; i <= n; i++)
		ma[i] = min(ma[i], ma[i - 1]);
	for (int i = n; i >= 0; i--)
		mi[i] = max(mi[i], mi[i + 1]);
	mi[0] = max(mi[0], 0LL);
	for (int i = 0; i < n; i++) {
		ma[i] = min(ma[i], x[i]);
		mi[i + 1] = max(mi[i + 1], x[i]);
	}
	ma[n] = min(ma[n], n + 1);
	// for (int i = 0; i <= n; i++) printf("%lld %lld\n", mi[i], ma[i]);
	for (int i = 0; i <= n; i++)
		for (long long j = mi[i]; j < ma[i]; j++)
			if ((j & 1) == zp) {
				if (fi)
					fi = 0;
				else
					printf(" ");
				printf("%lld", j);
			}
	if (fi)
		puts("-1");
	else
		puts("");
	return 0;
}
