#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
using namespace std;

typedef long long ll;
const ll N = 1e6+5;
ll n;
ll a[N], LBIT[N], k = 1, RBIT[N];
ll chote[N], bade[N];
long long ans;
vector<ll> v;
map<ll,ll> nval, rval;

void add(ll id, ll val, ll BIT[]){
    while(id <= n){
        BIT[id] += val;
        id += (id & -id);
    }
}

ll query(ll id, ll BIT[]){
    ll res = 0;
    while(id){
        res += BIT[id];
        id -= (id & -id);
    }
    return res;
}


int main(){

    scanf("%lld", &n);
    for(ll i = 0; i < n; i++){
        scanf("%d", &a[i]);
        v.push_back(a[i]);
    }

    sort(v.begin(), v.end());
    for(auto x : v){
        if(!nval[x]){
            nval[x] = k;
            rval[k] = x;
            k++;
        }
    }

    for(ll i = 0; i < n; i++){
        ll sum = i - query(nval[a[i]], LBIT);
        add(nval[a[i]],1, LBIT);
        chote[i] = sum;
    }

    for(ll i = n - 1; i >= 0; i--){
        ll sum = query(nval[a[i]], RBIT);
        add(nval[a[i]], 1, RBIT);
        bade[i] = sum;
    }
    /*cout <<"\n";
    for(int i = 0; i < n; i++){
        cout << chote[i]  <<" ";
    }
    cout <<"\n";
    for(int i = 0; i < n; i++){
        cout << bade[i] <<" ";
    }
    */
    for(int i = 0; i < n; i++){
        ans += chote[i] * bade[i];
    }
    printf("%lld", ans);

}
