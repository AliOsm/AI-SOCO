#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define pi 3.141592653589793238
#define int long long
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

int power(int x, unsigned int y, int p)  
{  
    int res = 1;     // Initialize result  
  
    x = x % p; // Update x if it is more than or  
                // equal to p 
   
    if (x == 0) return 0; // In case x is divisible by p; 
  
    while (y > 0)  
    {  
        // If y is odd, multiply x with result  
        if (y & 1)  
            res = (res*x) % p;  
  
        // y must be even now  
        y = y>>1; // y = y/2  
        x = (x*x) % p;  
    }  
    return res;  
} 

const int mod=1e9+7;
int fac[1000005];
int inv[1000005];
int ncr(int n,int r)
{
  if(n<r)
    return 0;
  int z=fac[n];
  z=(z*inv[n-r])%mod;
  z=(z*inv[r])%mod;
  return z;
}

int find_forest(int n,int k)
{
    int z=k;
    z=(z*power(n,n-k,mod))%mod;
    z=(z*power(n,mod-2,mod))%mod;
    return z;
}

signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);  
    cout.tie(0);   
#ifndef ONLINE_JUDGE
    if(fopen("INPUT.txt","r"))
    {
    freopen ("INPUT.txt" , "r" , stdin);
    freopen ("OUTPUT.txt" , "w" , stdout);
    }
#endif

// -------------------------------------Code starts here---------------------------------------------------------------------     

  fac[0]=1;
  inv[0]=1;
  for(int i=1;i<=1000000;i++)
  {
    fac[i]=(fac[i-1]*i)%mod;
    inv[i]=(inv[i-1]*power(i,mod-2,mod))%mod;
  }
  int n,m,a,b;
  cin>>n>>m>>a>>b;
  int ans=0;
  for(int i=1;i<=min(m,n-1);i++)
  {
    int z=(ncr(m-1,i-1)*ncr(n-2,i-1))%mod;
    z=(z*fac[i-1])%mod;
    z=(z*find_forest(n,i+1))%mod;
    z=(z*power(m,n-1-i,mod))%mod;
    ans+=z;
    ans%=mod;
  }
  cout<<(ans);

// -------------------------------------Code ends here------------------------------------------------------------------
    clock_t clk;
  clk = clock();

    clk = clock() - clk;
  cerr << fixed << setprecision(6) << "Time: " << ((double)clk)/CLOCKS_PER_SEC << "\n";
  return 0;
}
