#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define ll long long int
#define pb push_back
#define mp make_pair
#define ld long double
#define sz(a) (ll)(a).size()
#define endl "\n"

typedef tree<pair<ll,ll> ,null_type,less<pair<ll,ll> >,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
//K-th smallest
//cout << k << "kth smallest: " << *A.find_by_order(k-1) << endl;
//NO OF ELEMENTS < X
//cout << "No of elements less than " << X << " are " << A.order_of_key(X) << endl;

ll done[10][10], mi = 20, indeg[10];
vector<pair<ll,ll>>v;
vector<ll>adj[10];

int main()
{
	std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

	ll n, m;
	cin >> n >> m;
	for(int i=0;i<m;i++)
	{
		ll a, b;
		cin >> a >> b;
		adj[a - 1].pb(b - 1);
		adj[b - 1].pb(a - 1);
		indeg[a - 1] += 1;
		indeg[b - 1] += 1;
	}
	if(n < 7)
	{
		cout << m << endl;
		return 0;
	}
	for(int c=0;c<7;c++)
	{
		for(int i=0;i<10;i++) for(int j=0;j<10;j++) done[i][j] = 0;
		for(int i=0;i<7;i++)
		{
			if(i == c) continue;
			for(auto it : adj[i]) done[i][it] = done[it][i] = 1;
		}
		bool flag = false;
		for(int x=0;x<7;x++)
		{
			ll cnt = 0;
			if(x == c) continue;
			bool temp = true;
			for(auto it : adj[c])
			{
				if(done[it][x] == 1)
				{
					temp = false;
					cnt += 1;
				}
			}
			if(temp)
			{
				flag = true;
				mi = 0;
				break;
			}
			mi = min(mi, cnt);
		}
		if(flag) break;
		if(indeg[c] == 0) mi = 0;
	}
	cout << m - mi << endl;
    return 0;
}