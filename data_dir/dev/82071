#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<map>
#include<iterator>
#include<stack>
#include<string>
#include<climits>
#include<bitset>
#include<queue>
#include<cmath>
#include<cstdlib>
#include<cstdio>
#include<sstream>
#include<set>

#define MOD 1000003
#define ll long long int
#define vi vector<int>
#define vl vector<long long int>
#define vvi vector<vector<int> >
#define vvl vector<vector<long long int> >
#define vp vector<pair<int, int> >
#define sc(n) scanf("%d", &n)
#define ssync ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
using namespace std;

string toBin(long long int a)
{
	return bitset<64>(a).to_string();
}

void printArr(int* a, int n)
{
	for(int i = 0; i < n; i++)
		printf("%d ", a[i]);
	printf("\n");
}

string intToString (ll a)
{
	ostringstream temp;
	temp<<a;
	return temp.str();
}

ll pow(ll base, ll exponent)
{
	ll result = 1;
	while(exponent > 0)
	{
		if (exponent % 2 == 1)
			result *= base;
		exponent = exponent >> 1;
		base *= base;
	}
	return result;
}

ll powerWithMod(ll base, ll exponent, ll modulus)
{
	ll result = 1;
	base %= modulus;
	while(exponent > 0)
	{
		if (exponent % 2 == 1)
			result = (result * base) % modulus;
		exponent = exponent >> 1;
		base = (base * base) % modulus;
	}
	return result;
}

bool isPrime(int n)
{
	if(n == 2)
		return true;
	if(n%2 == 0)
		return false;
	int limit = ceil(sqrt(n)) + 1;
	for(int d=3; d <= limit; d += 2)
	{
		if(n%d == 0)
			return false;
	}
	return true;
}

int gc(string a, string b)
{
	int i = 0, j = 0;
	for(i = 0; i < a.size(); i++)
	{
		if(a[i] == b[j] && j == b.size() - 1)
			return i;
		if(a[i] == b[j])
			j++;
	}
	return -1;
}

ll gcdExtended(ll a, ll b, ll *x, ll *y)
{
	if (a == 0)
	{
		*x = 0, *y = 1;
		return b;
	}
	ll x1, y1;
	ll gcd = gcdExtended(b%a, a, &x1, &y1);
	*x = y1 - (b/a) * x1;
	*y = x1;
 
	return gcd;
}

ll modInverse(ll a, ll m)
{
	ll x, y;
	ll g = gcdExtended(a, m, &x, &y);
	ll res = (x%m + m) % m;
	return res;
}

ll largestPowerOf2(ll n)
{
    return (ll)pow(2, floor(log(n) / log(2)));
}

int main()
{
	ssync;
	ll s, x, start = 0, count = 0;
	cin >> s >> x;
	if((s-x) % 2 == 1)
	{
		cout << 0 << "\n";
		return 0;
	}
	ll band = (s-x) / 2;
	if((band & x) != 0)
	{
		cout << 0 << "\n";
		return 0;
	}
	bitset<64> temp(x), temp2(band);
	string a = temp.to_string();
	string b = temp2.to_string();
	while(start<64 && a[start] == '0')
		start++;
	for(int i=start; i<64; i++)
	{
		if(a[i] == '1')
		{
			count++;
		}
	}
	ll ans = pow(2, count);
	if(band == 0)
		ans -= 2;
	cout << ans << "\n";
	return 0;
}
