#include <bits/stdc++.h>
using namespace std;

#define loop(i,n) for(int i = 0;i < int(n);i++)
#define rloop(i,n) for(int i = int(n);i >= 0;i--)
#define range(i,a,b) for(int i = int(a);i <= int(b);i++)
#define SZ(c) int(c.size())
#define ALL(c) c.begin(), c.end()
#define RALL(c) c.rbegin(), c.rend()
#define PI acos(-1)
#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define sfi1(v) scanf("%d",&v)
#define sfi2(v1,v2) scanf("%d %d",&v1,&v2)
#define sfi3(v1,v2,v3) scanf("%d %d %d",&v1,&v2,&v3)
#define sfll1(v) scanf("%I64d",&v);
#define sfll2(v1,v2) scanf("%I64d %I64d",&v1,&v2)
#define sfll3(v1,v2,v3) scanf("%I64d %I64d %I64d",&v1,&v2,&v3)
#define endl '\n'

typedef vector<int> vi;
typedef vector<pair<int,int> > vii;
typedef long long ll;
typedef pair<int, int> pii;

const int N = 1e5 + 5;
int a[N] , idx[N] , b[N];
int tree[N] , vis[N];
set<int> s;
int n , m;

void increase(int i, int delta)
{
    for (; i <= n; i |= i + 1)
        tree[i] += delta;
}

int sum(int i)
{
	int ans = 0;
	for (; i >= 0; i = (i & (i + 1)) - 1)
		ans += tree[i];
	return ans;
}




int main()
{

#ifndef ONLINE_JUDGE
	//freopen("in.in", "r", stdin);
	//freopen("out.in", "w", stdout);
#endif
	ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

    int t;
    cin >> t;
    while(t--){

        cin >> n >> m;
        memset(tree,0,(n+2)*sizeof(tree[0]));
        memset(vis,0,(n+2)*sizeof(tree[0]));
        s.clear();

        loop(i,n)cin >> a[i] , idx[a[i]] = i , s.insert(i);
        loop(i,m)cin >> b[i];
        ll ans = 0;
        loop(i,m){
            int cur = idx[b[i]];
            if(vis[cur]){
                ans++;
            }else{
                int over = cur - sum(cur);
                ans += over * 2 + 1;
                while(true){
                    if(s.empty() || *s.begin() > cur)break;
                    vis[*s.begin()] = true;
                    s.erase(s.begin());
                }
            }
            increase(cur,1);
        }

        cout << ans << endl;
    }

    return 0;
}
