#include <bits/stdc++.h>

using namespace std;
using ll = long long;

bool cmp(pair<ll, ll> a, pair<ll, ll > b)
{
    if (a.first != b.first)
        return a.first < b.first;
    else
        return a.second > b.second;
}

void er(multiset<pair<ll,ll>>&x)
{
    x.erase(--x.end());
}

int main()  
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    int q;
    cin >> q;
    while (q--) {
        int n;
        cin >> n;
        map <ll, ll> cnt, no;
        for (int i = 0; i < n; ++i) {
            ll t, f;
            cin >> t >> f;
            cnt[t]++;
            no[t] += f;
        }
        multiset <pair<ll, ll>> x;
        for (auto i : cnt) {
            x.insert({i.second, no[i.first]});
        }
        ll sum = (*x.rbegin()).first;
        ll key = (*x.rbegin()).second;
        ll lst = sum;
        er(x);

        while (x.size() && (*x.rbegin()).first >= lst) {
            ll cur = (*x.rbegin()).second;
            er(x);
            x.insert({lst - 1, cur});
        }

        while (x.size()) {
            auto cur = *x.rbegin();
            sum += cur.first;
            key += min(cur.first, cur.second);
            lst = cur.first;
            er(x);
            if (lst <= 1) {
                break;
            }
            while (x.size() && (*x.rbegin()).first >= lst) {
                ll cur = (*x.rbegin()).second;
                er(x);
                x.insert({lst - 1, cur});
            }
        }
        cout << sum << " " << key << "\n";
    }
    return 0;
}