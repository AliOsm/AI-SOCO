#include<bits/stdc++.h>

using namespace std;

using ll = long long;
using ii = pair<int, int>;
#define ff first
#define ss second
#define pb push_back
#define oo 1e10

int main(){
    int n;
    scanf("%d",&n);
    vector<ll> v[5];
    for(int i = 0; i < n; i++){
        int x;
        char t;
        scanf("%d %c",&x, &t);
        if(t == 'P'){
            v[0].pb(x);
        }
        if(t == 'B'){
            v[1].pb(x);
        }
        if(t == 'R')
            v[2].pb(x);
    }
    if(v[0].size() == 0){
        if(v[1].size() == 0)
            printf("%lld\n",abs(v[2][0] - v[2].back()));
        else if(v[2].size() == 0)
            printf("%lld\n",abs(v[1][0] - v[1].back()));
        else
            printf("%lld\n",abs(v[1][0] - v[1].back()) + abs(v[2][0] - v[2].back()));
        return 0;
    }
    int f = 0;
    if(v[1].size() == 0 || v[2].size() == 0){
        f = 1;
    }
    ll ans = 0;
    int i = 0, j = 0, k = 0;
    while(j < v[1].size() && v[1][j] < v[0][0]){
        if(j+1 < v[1].size())
            ans += min(v[1][j+1] - v[1][j], v[0][0] - v[1][j]);
        else
            ans += v[0][0] - v[1][j];
        j++;
    }

    while(k < v[2].size() && v[2][k] < v[0][0]){
        if(k+1 < v[2].size())
            ans += min(v[2][k+1] - v[2][k], v[0][0] - v[2][k]);
        else
            ans += v[0][0] - v[2][k];
        k++;
    }

    while(v[1].size() && v[1].back() > v[0].back()){
        if(v[1].size() > 1)
            ans += min(v[1].back() - v[1][v[1].size() - 2], v[1].back() - v[0].back());
        else
            ans += v[1].back() - v[0].back();
        v[1].pop_back();
    }

    while(v[2].size() && v[2].back() > v[0].back()){
        if(v[2].size() > 1)
            ans += min(v[2].back() - v[2][v[2].size() - 2], v[2].back() - v[0].back());
        else
            ans += v[2].back() - v[0].back();
        v[2].pop_back();
    }
    for(int i = v[0].size() - 1; i > 0; i--){
        vector<int> aux1, aux2;
        while(v[1].size() && v[1].back() > v[0][i-1]){
            aux1.pb(v[1].back());
            v[1].pop_back();
        }
        while(v[2].size() && v[2].back() > v[0][i-1]){
            aux2.pb(v[2].back());
            v[2].pop_back();
        }
        ll add = 2 * (v[0][i] - v[0][i-1]);
        ll add2 = 0;
        ll add3 = 0;
        if(aux1.size()){
            add2 = min(aux1[0] - v[0][i-1], v[0][i] - aux1.back());
            for(int j = aux1.size()-1; j > 0; j--){
                add2 = min(add2, (ll)((aux1[j] - v[0][i-1]) + (v[0][i] - aux1[j-1])));
            }
        }
        if(aux2.size()){
            add3 = min(aux2[0] - v[0][i-1], v[0][i] - aux2.back());
            for(int j = aux2.size()-1; j > 0; j--){
                add3 = min(add3, (ll)((aux2[j] - v[0][i-1]) + (v[0][i] - aux2[j-1])));
            }
        }
        ans += min(add, add2 + add3 + add / 2);
    }
    printf("%lld\n",ans );
}