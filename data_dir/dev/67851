#include <bits/stdc++.h>
using namespace std;
#define int long long
int trans(int val, int period, int sz) {
    if(val<=sz) return val;
    val-=(sz-period);
    val%=period;
    val+=(sz-period);
    return val;
}
int a[1000][3];
int32_t main() {
    ios::sync_with_stdio(false);cin.tie(0);
    int t;
    cin>>t;
    while(t--) {
        int n;
        vector<int> x(3),sc1{1,3,4},sc2{4,1,2};
        cin>>n>>x[0]>>x[1]>>x[2];
        if(x[1]>x[2]) swap(x[1],x[2]);
        vector<int> v(n);
        for(int i=0;i<n;i++) cin>>v[i];
        int mn = min({x[0],x[1],x[2]});
        int mx = max({x[0],x[1],x[2]});
        int period = mn+mx;
        if(x==sc1)
            period = 7;
        else if(x==sc2)
            period = 3;
        // 0->all, 1->no x[1], 2->no x[2]
        int sz=0;
        a[0][0] = a[0][1] = a[0][2] = 0;
        for(int i=1;i<100;i++) {
            for(int j=0;j<3;j++) {
                vector<int> vals(4);
                for(int k=0;k<3;k++) {
                    if(j && j==k) continue;
                    int px = max(0ll, i-x[k]);
                    vals[a[px][k]] = 1;
                }
                for(int k=0;k<4;k++) {
                    if(vals[k]==0) {
                        a[i][j] = k;
                        break;
                    }
                }
                // cout<<a[i][j]<<" \n"[j==2];
            }
            if(i>period && i%period==0) {
                bool same = true;
                for(int j=0;j<period;j++) {
                    for(int k=0;k<3;k++) {
                        if(a[i-j][k]!=a[i-j-period][k]) {
                            same = false;
                            break;
                        }
                    }
                }
                if(same) {
                    sz = i;
                    break;
                }
            }
        }
        vector<int> prex(n),sufx(n);
        for(int i=0;i<n;i++) {
            v[i] = trans(v[i],period,sz);
        }
        int allxor = 0;
        for(int i=0;i<n;i++) allxor ^= a[v[i]][0];
        int ways = 0;
        for(int i=0;i<n;i++) {
            int mexor = allxor^a[v[i]][0];
            for(int j=0;j<3;j++) {
                int nw = max(0ll,v[i]-x[j]);
                if(mexor==a[nw][j])
                    ways++;
            }
        }
        cout<<ways<<'\n';
    }
    return 0;
}