///Bismillahir Rahmanir Rahim
 
//have seen the full solution
#include<bits/stdc++.h>
 
#define                           int                         long long
#define                           fi                          first
#define                           si                          second
#define                           mp                          make_pair
#define                           pb                          push_back
#define                           pi                          pair<int,int>
#define                           f(i,l,r)                    for(int i=l;i<=r;i++)
#define                           M                           100009
#define                           clr(x)                      memset(x,0,sizeof(x));
#define                           bug(i)                      cout<<"akhane ami  "<<i<<endl;
#define                           fast                        ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
 
 
 
 
using namespace std;
 
const int inf=1e18;
const int mod=1e9+7;
const int magic=2155;
struct qry
{
    int l;
    int r;
    int id;
    qry(){}
    qry(int l,int r,int id):l(l),r(r),id(id){}
};
vector<qry>adj[109][109];
int cnt[3*M+2];
int vis[3*M+2];
int q,a[M+2],fix[M+2],l,r,n,ses[M+2];
vector<int>qid,qval,qrol;
void add(int x)
{
    vis[cnt[a[x]]]--;
    cnt[a[x]]++;
    vis[cnt[a[x]]]++;
}
void del(int x)
{
    vis[cnt[a[x]]]--;
    cnt[a[x]]--;
    vis[cnt[a[x]]]++;
}
int ans_koto()
{
    for(int i=0;;i++)
    {
        if(vis[i]==0)
        {
            return i;
        }
    }
}
void ber_koro(int x,int y)
{
    f(i,1,n)a[i]=fix[i];
    clr(cnt);
    clr(vis);
    l=r=1;
    vis[0]=inf;
    vis[1]=1;
    cnt[a[1]]++;
    int pos=0;
    for(auto p:adj[x][y])
    {
         while(pos<qid.size() && qid[pos]<p.id)
         {
              if(l<=qrol[pos] && qrol[pos]<=r)del(qrol[pos]);
              a[qrol[pos]]=qval[pos];
              if(l<=qrol[pos] && qrol[pos]<=r)add(qrol[pos]);
              pos++;
         }
         while(p.l<l)add(--l);
         while(r<p.r)add(++r);
         while(l<p.l)del(l++);
         while(p.r<r)del(r--);
         ses[p.id]=ans_koto();
    }
}
main()
{
  fast
  map<int,int>my_id;
  cin>>n>>q;
  int dao=0;
  f(i,1,n)
  {
      cin>>a[i];
      if(my_id.find(a[i])==my_id.end())
      {
           my_id[a[i]]=++dao;
      }
      a[i]=my_id[a[i]];
      fix[i]=a[i];
  }
  memset(ses,-1,sizeof ses);
  f(i,1,q)
  {
      int typ,lft,rgt;
      cin>>typ>>lft>>rgt;
      if(typ==1)
      {
         adj[lft/magic][rgt/magic].pb(qry(lft,rgt,i));
      }
      else
      {     int val=rgt;
            int uff=lft;
            if(my_id.find(val)==my_id.end())
            {
                my_id[val]=++dao;
            }
            val=my_id[val];
            qrol.pb(uff);
            qval.pb(val);
            qid.pb(i);
 
 
      }
  }
 
   int last=n/magic;
   for(int i=0;i<=last;i++)
   {
       for(int j=i;j<=last;j++)
       {
           ber_koro(i,j);
       }
   }
   f(i,1,q)
   {
       if(ses[i]!=-1)
       {
           cout<<ses[i]<<endl;
       }
   }
 
    return 0;
}
 