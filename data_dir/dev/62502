#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <unordered_set>


using namespace std;



#define pb push_back
#define pii pair<int, int>
#define mp make_pair
#define ull unsigned long long
#pragma comment(linker, "/STACK:64000000")
#define null NULL
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define fornr(i, n) for (int i = (n); i >= 0; --i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)
#define all(a) a.begin(), a.end()

//typedef long double ld;
typedef long double ld;
typedef pair<ld, ld> pldld;
typedef long long ll;
typedef pair<ll, ll> pll;


typedef unsigned int ui;
typedef unsigned char uc;
const int infi = 1e9 + 7;
const ll infl = 2e18 + 7;

/*
const int MAX_MEM = 5e6;
int mpos = 0;
char mem[MAX_MEM];
inline void * operator new ( size_t n ) {
  char *res = mem + mpos;
  mpos += n;
  assert(mpos <= MAX_MEM);
  return (void *)res;
}
inline void operator delete ( void * ) { }

inline void * operator new [] ( size_t ) { assert(0); }
inline void operator delete [] ( void * ) { assert(0); }*/
/*
struct node {
	int i, j;
	int lx, rx, ly, ry;
	ll all_add;
	ll add_y;
	ll val;
	node() {
		i = j = lx =rx =ly =ry =all_add = add_y = val = 0;
	}
};
node tree[1 << 12][1 << 12];
int ar[1 << 11][1 << 11];

void build(int i, int j, int lx, int rx, int ly, int ry) {
	node & cur = tree[i][j];
	cur.i = i, cur.j = j, cur.lx = lx, cur.rx = rx, cur.ly = ly, cur.ry = ry;
	if (ly == ry) {
		if (rx == lx) {
			cur.val = ar[lx][ly];
		}
		else {
			cur.val = tree[i * 2][j].val + tree[i * 2 + 1][j].val;
		}
		return;
	}
	int mid = (ly + ry) >> 1;
	build(i, j * 2, lx, rx, ly, mid);
	build(i, j * 2 + 1, lx, rx, mid + 1, ly);
	return;
}
void build(int i, int tl, int tr, int n) {
	build(i, 1, tl, tr, 0, n - 1);
	if (tl == tr)
		return;
	int mid = (tl + tr) >> 1;
	build(i * 2, tl, mid, n);
	build(i * 2 + 1, mid + 1, tr, n);
	return;
}
void upd(int i, int j, int lx, int rx, int ly, int ry, ll x) {
	if (ly > ry)
		return; *
	node &cur = tree[i][j];
	if (cur.ly == ly && cur.ry == ry) {
		
	}
}*/

/*
struct node {
	node *l, *r, *p;
	int sz;
	int v;
	int flag;
	int y;
	node *link;
	node(){}
	node(int v) : y(rand() * rand()), l(0), r(0), p(0), sz(1), v(v), link(0), flag(0) {}
};
typedef node * pnode;
int get_size(pnode v) {
	if (!v)
		return 0;
	return v->sz;
}
void push(pnode v) {
	if (!v)
		return;
#define upd_ch(v, p) \
	if (v) { \
		v->flag ^= p->flag; \
	}
	upd_ch(v->l, v);
	upd_ch(v->r, v);
	if (v->flag)
		swap(v->l, v->r);
	v->flag = 0;
	return;
}
void recalc(pnode v) {
	if (!v)
		return;
	v->sz = 1 + get_size(v->l) + get_size(v->r);
	return;
}
void merge(pnode &t, pnode l, pnode r) {
	if (!l) {
		t = r;
	}
	else if (!r) {
		t = l;
	}
	else if (l->y > r->y) {
		
	}

}*/
/*

int ar[100100];
ll fen[100100];
ll add[100100];
void build(int n) {
	forn(i, n)
		fen[i] = add[i] = 0;
	forn(i, n) {
		for (int j = i; j < n; j |= j + 1)
			fen[j] += ar[i];
	}
	return;
}
void upd1(int pos, int n, ll x) {
	if (pos < 0)
		return;
	for (int i = pos; i >= 0; i = (i & (i + 1)) - 1) {
		add[i] += x;
	}
	for (int i = pos | (pos + 1); i < n; i |= (i + 1))
		fen[i] += x * (pos - (i & (i + 1)) + 1);
	return;
}
ll get1(int pos, int n) {
	if (pos < 0)
		return 0;
	ll ans = 0;
	for (int i = pos; i >= 0; i = (i & (i + 1)) - 1)
		ans += fen[i] + add[i] * (i - (i & (i + 1)) + 1);
	for (int i = pos | (pos + 1); i < n; i |= (i + 1))
		ans += add[i] * (pos - (i & (i + 1)) + 1);
	return ans;
}

void upd2(int i, ll x) {
	while (i >= 0) {
		ar[i] += x;
		--i;
	}
	return;
}

int get2(int pos) {
	ll ans = 0;
	forn(i, pos + 1)
		ans += ar[i];
	return ans;
}
void gen() {
	const int maxx = 100000;
	freopen("input.txt", "w", stdout);
	int n = 1000;
	cout << n << endl;
	forn(i, n)
		cout << (rand() - (1 << 14)) % maxx << ' ' ;
	cout << endl;
	int m = 1000;
	cout << m << endl;
	forn(i, m) {
		int t = rand() & 1;
		cout << t << ' ';
		int l = rand(), r = rand();
		l %= n, r %= n;
		if (l > r)
			swap(l, r);
		cout << l + 1 << ' ' << r + 1;
		if (!t) {
			cout << ' ' << (rand() - (1 << 14)) % maxx;
		}
		cout << '\n';
	}
	return;
}
int n, m;
void init() {
	cin >> n;
	forn(i, n)
		cin >> ar[i];
	build(n);
	cin >> m;
}*/

int bone[1000500];
int hole[1000500];


int main() {
	cin.sync_with_stdio(false);
	cin.tie(0);

//	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
	//freopen("light.in", "r", stdin);freopen("light.out", "w", stdout);
	int n, m, k;
	cin >> n >> m >> k;
	bone[0] = 1;
	forn(i, m) {
		int a;
		cin >> a;
		hole[a - 1] = 1;
	}
	if (hole[0]) {
		cout << 1;
		return 0;
	}
	forn(i, k) {
		int u, v;
		cin >> u >> v;
		--u, --v;
		swap(bone[u], bone[v]);
		if (bone[u] && hole[u]) {
			cout << u + 1;
			return 0;
		}
		if (bone[v] && hole[v]) {
			cout << v + 1;
			return 0;
		}
	}
	forn(i, n) {
		if (bone[i]) {
			cout << i + 1;
			return 0;
		}
	}
	return 0;
}