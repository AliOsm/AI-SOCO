#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define se second
#define pi 2*acos(0)
#define PI 3.14159265358979323846264338

typedef long long ll;
typedef unsigned long long ull;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;

const int N = 100010;
const int MX = 123456;
const int mod = (int)1e9 + 7;
const int base = 1023456789;
const ull BS1 = 10000019ULL;
const int inf = (1 << 29);

template < class T > inline void fastScan(T &x) {
    register char c = getchar();
    int neg = 0; x = 0;
    for(   ; (c < 48 || c > 57) && (c != '-'); c = getchar());
    if(c == '-') { neg = 1; c = getchar(); }
    for(   ; c > 47 && c < 58; c = getchar()){
        x = (x << 1) + (x << 3) + c - 48;
    }
    if(neg) x = -x;
}

// OrderedSet
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
// template < typename T > using ordered_set = tree < T, null_type, greater < T >, rb_tree_tag, tree_order_statistics_node_update >;

int n, m;
int id;

int parent[1234];
int seen[1234];
int dist[1234];

vector < int > g[N];

bool as(pii a, pii b){
  return a.se > b.se;
}

pair < int , int > bfs(int s){
  for(int i = 0; i < 1234; i++){
    dist[i] = 1e9;
  }
  dist[s] = 0;
  queue < int > Q;
  Q.push(s); id++;
  while(!Q.empty()){
    int u = Q.front();
    Q.pop(); seen[u] = id;
    for(int i = 0; i < g[u].size(); i++){
      int v = g[u][i];
      if(dist[u] + 1 < dist[v]){
        dist[v] = dist[u] + 1;
        Q.push(v); parent[v] = u;
      }
    }
  }
  pair < int , int > ret;
  ret.fs = 0; ret.se = -1;
  for(int i = 0; i < 1234; i++){
    if(dist[i] > ret.se && seen[i] == id){
      ret.fs = i;
      ret.se = dist[i];
    }
  }
  return ret;
}

pair < int , int > f(int u){
  pair < int , int > p = bfs(u);
  pair < int , int > q = bfs(p.fs);
  //cout << p.fs << " " << q.fs << '\n';
  int d = q.se / 2;
  pair < int , int > ret;
  ret.fs = q.fs; ret.se = q.se;
  while(d > 0){
    ret.fs = parent[ret.fs];
    d--;
  }
  //cout << ret.fs << " " << ret.se << '\n';
  return ret;
}

int main(){
  fastScan(n); fastScan(m);
  for(int i = 1; i <= m; i++){
    int u, v;
    fastScan(u); fastScan(v);
    g[u].pb(v); g[v].pb(u);
  }
  vector < pair < int , int > > store;
  for(int i = 1; i <= n; i++){
    if(seen[i] == 0){
      pair < int , int > x = f(i);
      store.pb(x);
    }
  }
  sort(store.begin(), store.end(), as);
  for(int i = 1; i < store.size(); i++){
    int u = store[0].fs;
    int v = store[i].fs;
    g[u].pb(v); g[v].pb(u);
  }
  pair < int , int > ans = f(1);
  printf("%d\n", ans.se);
  for(int i = 1; i < store.size(); i++){
    printf("%d %d\n", store[0].fs, store[i].fs);
  }
  return 0;
}
