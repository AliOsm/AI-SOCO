//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
#include <bits/stdc++.h>
#include <unistd.h>
using namespace std ;
//using namespace __gnu_pbds;
#define y2 sdfklgjsdkfd
#define y1 sdfklgjsdkafd
#define X first 
#define Y second
#define int long long 
typedef long long ll ;
typedef long double ld ;
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define ALL(x) (x).begin(),(x).end()
typedef pair < int , int > pii ; 
typedef pair < int , pii > pi_ii ;
typedef pair < pii , int > pii_i ;
typedef pair < pii , pii > pii_ii ;
#define ordered_set(TYPE) tree<TYPE, null_type, less<TYPE>, rb_tree_tag, tree_order_statistics_node_update>
//#define "%I64d" "%I64d"
const int maxn =  3e6 + 100 ;
const int maxL = 22 ;
const ll inf = 100 + 100 ;
const int mod = 1e9+7 ;
int n , a , t [ maxn ] , dp [ maxn ] , q , hlp [ maxn ] ; 

main ( ) 
{  
  //  fast ;
  //  cin >> n ;
  scanf ( "%I64d" , &n ) ;
  for ( int i = 0 ; i < n ; i ++ )
    scanf ( "%I64d" , &a ) , t [ a ] ++ ; 
  for ( int i = 1 ; i < maxn ; i ++ ) 
    for ( int j = i ; j < maxn ; j += i )
      if ( i * i == j )
	dp [ j ] += t [ i ] * ( t [ i ] - 1 ) ;
      else 
	dp [ j ] += t [ i ] * t [ j / i ]  ;  
  int ans = 0 ;
  for ( int i = maxn- 2 ; i >= 0 ; i -- ) 
    hlp [ i ] = hlp [ i + 1 ] + t [ i ] ; 
  for ( int i = 2 ; i < maxn ; i ++ )
    ans += t [ i ] * hlp [ (maxn+i-1)/i ] ;
  for ( int i = 1 ; i < maxn ; i ++ )
    if ( i * i >= maxn )
      ans -= t [ i ] ;
  scanf ( "%I64d" , &q ) ;
  for ( int i = maxn- 2 ; i >= 0 ; i -- ) 
    dp [ i ] += dp [ i + 1 ] ; 
  for ( int i = 0 ; i < q ; i ++ )
    scanf ( "%I64d" , &a ) , printf ("%I64d\n" , dp [ a ] + ans ) ;
} 
