#include <bits/stdc++.h>
using namespace std;
deque<deque<int> >edges(105);
deque<int>road,tmp;
int d[105][105];
bool vis[105];
int n,a,b,c;
void findroad(int node, int parent)
{
    vis[node]=1;
    tmp.push_back(node);
    for(auto i : edges[node]){
        if(vis[i] && i!=parent && road.empty()){
            for(auto j : tmp)
                road.push_back(j);
            road.push_back(road.front());
        }
        else if(!vis[i])
            findroad(i,node);
    }
    tmp.pop_back();
}
int main()
{
    ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);
    cin>>n;
    memset(d, -1, sizeof d);
    for(int i=0; i<n; i++){
        cin>>a>>b>>c;
        edges[a].push_back(b);
        edges[b].push_back(a);
        d[a][b]=c;
    }
    findroad(1,1);
    a=0,b=0;
    for(int i=1; i<road.size(); i++){
        if(d[road[i-1]][road[i]]==-1)
            a+=d[road[i]][road[i-1]];
    }
    reverse(road.begin(),road.end());
    for(int i=1; i<road.size(); i++){
        if(d[road[i-1]][road[i]]==-1)
            b+=d[road[i]][road[i-1]];
    }
    cout<<min(a,b);
    return 0;
}
