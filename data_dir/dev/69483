#include <bits/stdc++.h>
#define fast ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define pb push_back
#define MOD 1000000007

using namespace std;
typedef long long int ll;

int main(void)
{
	#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
	#endif
	fast;
	int n, m; cin >> n >> m;
	vector<array<int, 2>> v(2*n+1), p(m);
	map<int, int> match;
	v[0] = {-1, 0};
	for (int i = 1; i <= 2*n; ++i)
	{
		cin >> v[i][0];
		v[i][1] = i;
	}
	// sort(v.begin(), v.end());
	// reverse(v.begin(), v.end());
	for (int i = 0; i < m; ++i)
	{
		cin >> p[i][0] >> p[i][1];
		match[p[i][0]] = p[i][1];
		match[p[i][1]] = p[i][0];
	}
	bool mark[2*n+1]; memset(mark, 0, sizeof mark);
	int start;
	cin >> start;
	if (start == 1)
	{
		for (auto it : p)
		{
			if (v[it[0]][0] > v[it[1]][0])
			{
				cout << it[0] << endl;
				fflush(stdout);
			}
			else
			{
				cout << it[1] << endl;
				fflush(stdout);
			}
			int in; cin >> in;
			fflush(stdout);
			mark[it[0]] = mark[it[1]] = 1;
		}
		sort(v.begin(), v.end());
		reverse(v.begin(), v.end());
		for (auto it : v)
		{
			if (!it[1] or mark[it[1]]) continue;
			cout << it[1] << endl;
			fflush(stdout);
			int in; cin >> in;
			fflush(stdout);

			mark[in] = mark[it[1]] = 1;
		}
	}
	else
	{
		int done = 0;
		while (done < 2*n)
		{
			int in; cin >> in;
			mark[in] = 1;
			++done;
			if (!match[in]) break;
			cout << match[in] << endl;
			++done;
			fflush(stdout);
			mark[match[in]] = 1;
		}
		for (auto it : p)
		{
			if (mark[it[0]]) continue;
			++done;
			if (v[it[0]][0] > v[it[1]][0])
			{
				cout << it[0] << endl;
				fflush(stdout);
			}
			else
			{
				cout << it[1] << endl;
				fflush(stdout);
			}
			int in; cin >> in;
			++done;
			fflush(stdout);
			mark[it[0]] = mark[it[1]] = 1;
		}
		sort(v.begin(), v.end());
		reverse(v.begin(), v.end());
		for (auto it : v)
		{
			if (!it[1] or mark[it[1]]) continue;
			cout << it[1] << endl;
			++done;
			if (done == 2*n) break;
			fflush(stdout);
			int in; cin >> in;
			++done;
			fflush(stdout);

			mark[in] = mark[it[1]] = 1;
		}
	}
}