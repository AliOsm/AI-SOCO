#include<stdio.h>
#include<iostream>
#include<string.h>
#include<ctype.h>
#include<math.h>
#include<map>
#include<set>
#include<vector>
#include<queue>
#include<functional>
#include<string>
#include<algorithm>
#include<time.h>
void fre(){freopen("c://test//input.in","r",stdin);freopen("c://test//output.out","w",stdout);}
template <class T> inline void scand(T &x){char c;x=0;while((c=getchar())<'0');while(c>='0'&&c<='9')x=x*10+(c-48),c=getchar();}
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned int UI;
template <class T> inline void gmax(T &a,T b){if(b>a)a=b;}
template <class T> inline void gmin(T &a,T b){if(b<a)a=b;}
using namespace std;
const int N=6e5+10,M=0,Z1=1e9+7,Z2=1e9+9,maxint=2147483647,ms31=522133279,ms63=1061109567,ms127=2139062143;
const double eps=1e-8,PI=acos(-1.0);//.0
struct A{};
set<int>sot1,sot2;
int casenum,casei;
int n,m,i,j;
LL a[N],b[N];
string s;
void test()
{
	LL x=0;int y=2e9;
	printf("%I64d\n",(LL)x+y*y);//爆掉
	printf("%I64d\n",x+(LL)y*y);//不爆
	printf("%I64d\n",x+y+y);//不爆
	//测试结果：不同类型的变量运算，是否爆掉还是要看其计算的优先级
}
int hash1()
{
	int l=s.size();
	LL tmp=l;
	for(int i=0;i<l;i++)
	{
		tmp=(tmp+a[i]*s[i])%Z1;
	}
	return tmp;
}
int hash2()
{
	int l=s.size();
	LL tmp=l;
	for(int i=0;i<l;i++)
	{
		tmp=(tmp+b[i]*s[i])%Z2;
	}
	return tmp;
}
int main()
{
	//test();
	int top=6e5;
	a[0]=3;for(i=1;i<=top;i++)a[i]=a[i-1]*3%Z1;
	b[0]=26;for(i=1;i<=top;i++)b[i]=b[i-1]*26%Z2;
	while(~scanf("%d%d",&n,&m))
	{
		sot1.clear();sot2.clear();
		for(i=1;i<=n;i++)
		{
			cin>>s;
			sot1.insert(hash1());
			sot2.insert(hash2());
		}
		for(i=1;i<=m;i++)
		{
			cin>>s;
			int l=s.size();
			int ori1=hash1();
			int ori2=hash2();
			for(j=0;j<l;j++)
			{
				char ch=s[j];
				if(ch!='a')
				{
					int tmp1=(ori1+('a'+Z1-ch)*a[j])%Z1;
					int tmp2=(ori2+('a'+Z2-ch)*b[j])%Z2;
					if(sot1.find(tmp1)!=sot1.end()
					 &&sot2.find(tmp2)!=sot2.end()
						)break;
				}
				if(ch!='b')
				{
					int tmp1=(ori1+('b'+Z1-ch)*a[j])%Z1;
					int tmp2=(ori2+('b'+Z2-ch)*b[j])%Z2;
					if(sot1.find(tmp1)!=sot1.end()
					 &&sot2.find(tmp2)!=sot2.end()
						)break;
				}
				if(ch!='c')
				{
					int tmp1=(ori1+('c'+Z1-ch)*a[j])%Z1;
					int tmp2=(ori2+('c'+Z2-ch)*b[j])%Z2;
					if(sot1.find(tmp1)!=sot1.end()
					 &&sot2.find(tmp2)!=sot2.end()
						)break;
				}
			}
			if(j<l)printf("YES\n");
			else printf("NO\n");
		}
	}
	return 0;
}
/*
【题意】
初始有n个串，代表字符串库
然后有m个串，代表m个询问
对于每个询问，问在字符串库中是否有相同长度的串，与该询问串恰好之差一个位置的字符
n∈[0,3e5]
m∈[0,3e5]
totlen<=6e5
字符只有'a''b''c'

【类型】
字典树

【分析】
字符只有'a','b','c'，
字符总长受限制
是典型字典树的标志
我们把n个子串插入字典树，在结束位点标记
对于m个询问，就在字典树上跑一跑，如果尚且没有岔开，就在任意位置都尝试岔开
一旦跑出一个串就是yes
否则no

【优化】
这道题我卡在分析时间复杂度上好久
为什么字典树能AC而没有TLE呢？
最坏情况大概是not true
字符树的长度有3e5
询问字符串的总长度也有3e5

每个字符串的查询会跑完一棵树
注意，是每个字符串的查询可能会跑完一棵树
但如果字符串短，跑不完的
如果字符串长，查询不多的
所以均摊下来可以AC

【trick】

【数据】
Sample test(s)

input
2 3
aaaaa
acacaca
aabaa
ccacacc
caaac
output
YES
NO
NO

*/