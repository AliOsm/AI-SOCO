//const int MOD = 998244353;
//int n;
//const int N = 1.5e5+5, K = 400;
//vi adj[N];
//int t_enter[N], t_exit[N], t, sz[N], par[N], boss_calls[N];
//ll plain_add[N];
//void dfs(int u, int p){
//    par[u] = p;
//    t_enter[u] = ++t;
//    sz[u] = 1;
//    for(int v : adj[u]){
//        if(v == p) continue;
//        dfs(v,u);
//        sz[u] += sz[v];
//    }
//    t_exit[u] = t;
//}
//ll mod_n;
//vl f(N);
//void prep_f(){
//    rep(i,0,n)
//        f[i] = (n-i)*mod_n%MOD;
//}
//vector<vpii> sub_query;
//vvi boss_weights;
//vi bosses;
//void dfs2(int u, int p, int carry){
//    boss_weights.back()[u] = carry;
//    for(int v : adj[u])
//        if(v != p)
//            dfs2(v,u,carry);
//}
//void make_boss(int u){
//    bosses.pb(u);
//    boss_weights.pb(vi(n+1));
//    for(int v : adj[u])
//        if(v != par[u])
//            dfs2(v,u,f[sz[v]]);
//    if(par[u] != -1)
//        dfs2(par[u],u,f[n-sz[u]]);
//    boss_weights.back()[u] = 1;
//}
//ll ftree[N];
//void fadd(int u, ll v){
//    if(v < 0)
//        v += MOD;
//    for(int i = u; i < N; i += i&(-i)){
//        ftree[i] += v;
//        if(ftree[i] >= MOD)
//            ftree[i] -= MOD;
//    }
//}
//ll fget(int u){
//    ++u;
//    ll ans = 0;
//    for(int i = u; i > 0; i -= i&(-i)){
//        ans += ftree[i];
//    }
//    return ans%MOD;
//}
//void fadd(int l, int r, ll v){
//    fadd(l+1,v);
//    fadd(r+2,-v);
//}
//ll query(int u){
//    ll ans = 0;
//    rep(i,0,sz(bosses)-1){
//        ans = (ans+(ll)boss_weights[i][u]*boss_calls[bosses[i]])%MOD;
//    }
//    ans += fget(t_enter[u]);
//    ans = (ans+plain_add[u])%MOD;
//    return ans;
//}
//bool is_boss(int u){ return sz(adj[u]) >= K; }
//void add(int u, int d){
//    if(is_boss(u)){
//        boss_calls[u] += d;
//        boss_calls[u] %= MOD;
//    }else{
//        plain_add[u] += (1ll-sub_query[u][0].Y+MOD)%MOD*d;
//        plain_add[u] %= MOD;
//        for(auto _ : sub_query[u]){
//            int u,w;
//            tie(u,w) = _;
//            w = ll(w)*d%MOD;
//            fadd(t_enter[u],t_exit[u],w);
//        }
//    }
//}
//void _(){
//    int q;
//    cin >> n >> q;
//    mod_n = mod_inverse(n);
//    prep_f();
//    rep(i,1,n-1){
//        int u,v;
//        cin >> u >> v;
//        adj[u].pb(v);
//        adj[v].pb(u);
//    }
//    dfs(1,-1);
//    t_exit[0] = t;
//    sub_query.resize(n+1);
//    rep(i,1,n){
//        sub_query[i].pb({0,f[n-sz[i]]});
//        for(int v : adj[i]){
//            if(v == par[i]) continue;
//            sub_query[i].pb({v,(f[sz[v]]-f[n-sz[i]]+MOD)%MOD});
//        }
//    }
//    rep(i,1,n)
//        if(is_boss(i))
//            make_boss(i);
//    while(q--){
//        int type;
//        cin >> type;
//        if(type == 2){
//            int u;
//            cin >> u;
//            print(query(u));
//        }
//        else{
//            int v,d;
//            cin >> v >> d;
//            add(v,d);
//        }
//
//    }
//}
//
#include <iomanip>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define pb push_back
#define REP_INT(i,l,r) for(int i = l; i <= r; ++i)
#define GET_REP_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define rep(...) GET_REP_MACRO(__VA_ARGS__,REP_ANY,REP_INT)(__VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define Y second
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<ll> vl;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
const int MOD = 998244353;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
T1 T ext_euclid(T a, T b, T c, T d){
    if(c == T(0))
        return b;
    return ext_euclid(c, d, a % c, b - a / c * d);
}
T1 T mod_inverse(T x, T mod = T(MOD)){
    return (ext_euclid(mod, T(0), x, T(1)) + mod) % mod;
}
ll mod_inverse(int x, ll mod = MOD){
    return mod_inverse<ll>(x,mod);
}
T1 void print(T x, string end = "\n"){
    cout << x << end;
}
int n;
const int N = 1.5e5+5, K = 400;
vi adj[N];
int t_enter[N], t_exit[N], t, sz[N], par[N], boss_calls[N];
ll plain_add[N];
void dfs(int u, int p){
    par[u] = p;
    t_enter[u] = ++t;
    sz[u] = 1;
    for(int v : adj[u]){
        if(v == p) continue;
        dfs(v,u);
        sz[u] += sz[v];
    }
    t_exit[u] = t;
}
ll mod_n;
vl f(N);
void prep_f(){
    rep(i,0,n)
        f[i] = (n-i)*mod_n%MOD;
}
vector<vpii> sub_query;
vvi boss_weights;
vi bosses;
void dfs2(int u, int p, int carry){
    boss_weights.back()[u] = carry;
    for(int v : adj[u])
        if(v != p)
            dfs2(v,u,carry);
}
void make_boss(int u){
    bosses.pb(u);
    boss_weights.pb(vi(n+1));
    for(int v : adj[u])
        if(v != par[u])
            dfs2(v,u,f[sz[v]]);
    if(par[u] != -1)
        dfs2(par[u],u,f[n-sz[u]]);
    boss_weights.back()[u] = 1;
}
ll ftree[N];
void fadd(int u, ll v){
    if(v < 0)
        v += MOD;
    for(int i = u; i < N; i += i&(-i)){
        ftree[i] += v;
        if(ftree[i] >= MOD)
            ftree[i] -= MOD;
    }
}
ll fget(int u){
    ++u;
    ll ans = 0;
    for(int i = u; i > 0; i -= i&(-i)){
        ans += ftree[i];
    }
    return ans%MOD;
}
void fadd(int l, int r, ll v){
    fadd(l+1,v);
    fadd(r+2,-v);
}
ll query(int u){
    ll ans = 0;
    rep(i,0,sz(bosses)-1){
        ans = (ans+(ll)boss_weights[i][u]*boss_calls[bosses[i]])%MOD;
    }
    ans += fget(t_enter[u]);
    ans = (ans+plain_add[u])%MOD;
    return ans;
}
bool is_boss(int u){ return sz(adj[u]) >= K; }
void add(int u, int d){
    if(is_boss(u)){
        boss_calls[u] += d;
        boss_calls[u] %= MOD;
    }else{
        plain_add[u] += (1ll-sub_query[u][0].Y+MOD)%MOD*d;
        plain_add[u] %= MOD;
        for(auto _ : sub_query[u]){
            int u,w;
            tie(u,w) = _;
            w = ll(w)*d%MOD;
            fadd(t_enter[u],t_exit[u],w);
        }
    }
}
void _(){
    int q;
    cin >> n >> q;
    mod_n = mod_inverse(n);
    prep_f();
    rep(i,1,n-1){
        int u,v;
        cin >> u >> v;
        adj[u].pb(v);
        adj[v].pb(u);
    }
    dfs(1,-1);
    t_exit[0] = t;
    sub_query.resize(n+1);
    rep(i,1,n){
        sub_query[i].pb({0,f[n-sz[i]]});
        for(int v : adj[i]){
            if(v == par[i]) continue;
            sub_query[i].pb({v,(f[sz[v]]-f[n-sz[i]]+MOD)%MOD});
        }
    }
    rep(i,1,n)
        if(is_boss(i))
            make_boss(i);
    while(q--){
        int type;
        cin >> type;
        if(type == 2){
            int u;
            cin >> u;
            print(query(u));
        }
        else{
            int v,d;
            cin >> v >> d;
            add(v,d);
        }
    }
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        _();
}
