#include <bits/stdc++.h>

using namespace std;

#define mem(a,b) memset(a,b,sizeof(a))
#define FOR(i,j,k) for(int i=j;i<=k;i++)
#define REV(i,j,k) for(int i=j;i>=k;i--)
#define FORR(i,j,k,l) for(int i=j;i<=k;i+=l)
#define read         freopen("in.txt", "r", stdin)
#define write        freopen("out.txt", "w", stdout)
#define pf          printf
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define sfff(a,b,c)    scanf("%d %d %d", &a, &b, &c)
#define clean(mat,n)   FOR(i,0,n) mat[i].clear()
#define minn          (long long)-1000000000000000000
#define maxx          (long long) 1000000000000000000
#define mod          1000000007
#define M_PI           3.14159265358979323846  /* pi */
#define LL           long long
#define NL '\n'
#define cnd tree[idx]
#define lnd (idx<<1)
#define rnd ((idx<<1)+1)
#define PB push_back
#define F first
#define S second
#define MAX 4005
#define MP make_pair
#define valid(nx,ny)  ((nx >= 0) && (nx < row) && (ny >= 0) && (ny < col))
typedef pair<int,int> PR;

const int INF = (5000*5000*10) + 10;
const int IT_MAX = (1<<17);

int k, dp[MAX], bm[MAX], sum[MAX][MAX], n;
struct Node
{
    int l, r, optl, optr;
};
stack<Node> stk;

void compute(int l,int r,int optl,int optr)
{
    stk.push( {l, r, optl, optr} );
    while(!stk.empty())
    {
        l = stk.top().l; r = stk.top().r;
        optl = stk.top().optl;  optr = stk.top().optr;
        stk.pop();

        if(l > r) continue;

        int mid = (l + r)>>1;
        pair<int,int> best = {INF, -1};

        for(int k = optl; k <= min(mid, optr); k++)
            best = min(best, {dp[k-1] + sum[k][mid], k});

        bm[mid] = best.first;
        int opt = best.second;

        stk.push( {l, mid - 1, optl, opt} );
        stk.push( {mid + 1, r, opt, optr} );
    }
}

inline int in(){
   char ch = getchar();
   while( (ch < '0' || ch > '9') && ch != '-') ch = getchar();
   bool flag = false;
   if (ch == '-'){
      flag = true;
      ch = getchar();
   }
   int ans = 0;
   while(ch >= '0' && ch <= '9'){
      ans = ans*10 + ch-'0';
      ch = getchar();
   }
   if (flag) return -ans;
   return ans;
}

int main()
{
    n = in(); k = in();
    for(int i = 1; i <= n; i++)
    {
        for(int j = 1; j <= n; j++)
        {
            sum[i][j] = in();
            sum[i][j] += sum[i][j-1];
        }
    }

   for(int i = 1; i <= n; i++)
   {
      sum[i][i] = 0;
      for(int j = i+1; j <= n; j++)
         sum[i][j] = sum[i][j-1] + sum[j][j] - sum[j][i-1];
   }
   ///if(n > 1000) return 0;

    FOR(i,1,n) dp[i] = INF;

    FOR(i,1,k)
    {
        //if(n > 1000) continue;
        compute(i, n, i, n);
        FOR(i,0,n) dp[i] = bm[i];
    }

    printf("%d", dp[n]);
    return 0;
}


