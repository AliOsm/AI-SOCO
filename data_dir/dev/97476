#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <iterator>
#include <cmath>
#include <set>
#include <deque> 
#include <string>


using namespace std;

struct Daughter
{
	int count;
	std::vector<int> princes;
	
	bool isMarried;
	int pos;
};

Daughter dau[100010];
int n;

bool isPrinceM[100010];

int main()
{
	int T;
	scanf("%d", &T);
	
	for (int ii = 0 ; ii < T ; ii++) {
		scanf("%d", &n);
		for (int i = 1 ; i <= n ; i++)
			isPrinceM[i] = false;
		
		for (int i = 1 ; i <= n ; i++) {
			scanf("%d", &(dau[i].count));			
			
			dau[i].princes.clear();
			dau[i].pos = i;
			dau[i].isMarried = false;
			
			
			
			for (int j = 0 ; j < dau[i].count ; j++) {
				int num;
				scanf("%d", &num);
				dau[i].princes.push_back(num);
			}
			
			
			for (int j = 0 ; j < dau[i].count ; j++) {
				int p = dau[i].princes[j];
				
				if (isPrinceM[p] == false) {
					dau[i].isMarried = true;
					isPrinceM[p] = true;
					break;
				}
			}
		}
		
		int dm = -1;
		for (int i = 1 ; i <= n ; i++) {
			if (dau[i].isMarried == false) {
				dm = i;
				break;
			}
		}
		
		int dn = -1;
		for (int i = 1 ; i <= n ; i++) {
			if (isPrinceM[i] == false) {
				dn = i;
				break;
			}
		}
		
		
		if ((dm == -1) || (dn == -1)) {
			printf("OPTIMAL\n");
		} else {
			printf("IMPROVE\n");
			printf("%d %d\n", dm, dn);
		}
	}
	return 0;
}