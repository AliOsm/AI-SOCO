//void __(){
//    int n,m,k;
//    cin >> n >> m >> k;
//    string ans;
//    rep(i,n-1)
//        ans += "U";
//    rep(i,m-1)
//        ans += "L";
//    rep(i,n){
//        if(i%2 == 0)
//            ans += string(m-1,'R');
//        else
//            ans += string(m-1,'L');
//        ans += "D";
//    }
//    print sz(ans);
//    print ans;
//
//}
//
#include <iomanip>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define REP_ZERO_INT(i,r) for(int i = 0; i < (r); ++i)
#define GET_REP_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define rep(...) GET_REP_MACRO(__VA_ARGS__,REP_ANY,REP_INT,REP_ZERO_INT)(__VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
struct _print {
    string sep,end;
    bool space;
    ostream &stream;
    _print(string _sep=" ",string _end="\n",
            ostream &_stream = cout) 
        : sep(_sep),end(_end),space(false),
            stream(_stream) {}
    ~_print() { stream << end; }

    template <typename T>
        _print &operator , (const T &t) {
            if (space) stream << sep;
            space = true;
            stream << t;
            return *this;
        }
};
#define print _print(),
void __(){
    int n,m,k;
    cin >> n >> m >> k;
    string ans;
    rep(i,n-1)
        ans += "U";
    rep(i,m-1)
        ans += "L";
    rep(i,n){
        if(i%2 == 0)
            ans += string(m-1,'R');
        else
            ans += string(m-1,'L');
        ans += "D";
    }
    print sz(ans);
    print ans;

}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        __();
}

