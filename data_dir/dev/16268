#include<bits/stdc++.h>
using namespace std;

typedef long long ll;

const ll N = 2e3 + 10, mod = 1e9 + 7, M = 2e5 + 10;
ll x[N], y[N], fac[M], rev[M], a[N], dp[N];

bool cmp(int b, int c) {
    if (x[b] < x[c]) {
        return true;
    }
    else if (x[b] > x[c])
        return false;
    else
        return y[b] < y[c];
}

ll c(ll n, ll m) {
    return ((fac[n] * rev[m]) % mod * rev[n - m]) % mod;
}

ll power(ll a, ll b) {
    ll res = 1;
    if (b) {
        res = power(a, b / 2);
        res = (res * res) % mod;
        if (b % 2)
            res = (res * a) % mod;
    }
    return res;
}

int main() {
    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
    ll h, w, n;
    cin >> h >> w >> n;
    for (int i = 0; i < n; i++)
        cin >> x[i] >> y[i];
    x[n] = h;
    y[n] = w;
    fac[0] = 1;
    for (int i = 1; i <= h + w; i++)
        fac[i] = (fac[i - 1] * i) % mod;
    rev[h + w] = power(fac[h + w], mod - 2);
    for (int i = h + w - 1; ~i; i--)
        rev[i] = (rev[i + 1] * (i + 1)) % mod;
    iota(a, a + n + 1, 0);
    sort(a, a + n + 1, cmp);
    dp[0] = c(x[a[0]] + y[a[0]] - 2, x[a[0]] - 1);
    for (int i = 1; i <= n; i++) {
        dp[i] = c(x[a[i]] + y[a[i]] - 2, x[a[i]] - 1);
        for (int j = 0; j < i; j++)
            if (x[a[j]] <= x[a[i]] && y[a[j]] <= y[a[i]])
                dp[i] = ((dp[i] - (dp[j] * c(x[a[i]] - x[a[j]] + y[a[i]] - y[a[j]], x[a[i]] - x[a[j]])) % mod) % mod + mod) % mod;
    }
    cout << dp[n] << '\n';
    return 0;
}