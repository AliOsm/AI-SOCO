#include <bits/stdc++.h>
using namespace std;
const int N = 2e5+1;
int n, a[N];
int seg[N*4], id[4*N], val, type;
void build(int l=0, int r=n-1, int idx=1)
{
	if(l == r)
	{
		seg[idx] = a[l];
		id[idx] = l;
		return ;
	}
	int mid = (l+r) >> 1;
	build(l, mid, idx*2);
	build(mid+1, r, idx*2+1);
	seg[idx] = min(seg[idx*2], seg[idx*2+1]);
}
int solve(int l, int r, int idx)
{
	if(seg[idx] >= val)
	{
		if(!type)
		return -1;
		else
		return n;
	}
	if(l == r)
	return id[idx];

	int mid = (l+r) >> 1;
	if(type)
	{
		if(seg[idx*2] < val)
		return solve(l, mid, idx*2);
		else
		solve(mid+1, r, idx*2+1);
	}
	else
	{
		if(seg[idx*2+1] < val)
		return solve(mid+1, r, idx*2+1);
		return solve(l, mid, idx*2);
	}
}
int minquery(int x, int y, int l=0, int r=n-1, int idx=1)
{
	if(l > y || r < x)
	return n;
	if(l >= x && r <= y)
	{
		return solve(l, r, idx);
	}
	int mid = (l+r) >> 1;
	return min(minquery(x, y, l, mid, idx*2),
			minquery(x, y, mid+1, r, idx*2+1));
}
int maxquery(int x, int y, int l=0, int r=n-1, int idx=1)
{
	if(l > y || r < x)
	return -1;
	if(l >= x && r <= y)
	{
		return solve(l, r, idx);
	}
	int mid = (l+r) >> 1;
	return max(maxquery(x, y, l, mid, idx*2),
		maxquery(x, y, mid+1, r, idx*2+1));
}
int main()
{
	cin >> n;
	for(int i=0; i<n; i++)
	cin >> a[i];
	build();
	vector< pair<int, int> > vec;
	for(int i=0; i<n; i++)
	{
		val = a[i];
		type = 1;
		int r = minquery(i+1, n-1);
		type = 0;
		int l = maxquery(0, i-1);
		//cout << l << " " << r << endl;
		vec.push_back({val, r-l-1});
		
	}
	sort(vec.begin(), vec.end(), greater< pair<int, int> > ());
	int length = 1;
	for(auto i : vec)
	{
		if(length > n)
		break;
		while(length <= n && length <= i.second)
		length++, cout << i.first << " ";
	}
	cout << endl;
}

