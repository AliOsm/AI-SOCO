#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

#define PB push_back
//#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)

#define UNVISITED 0
#define EXPLORED 1
#define VISITED 2

const int mx = 4e5+5;
int n, m;
map<pii, int> mp;
set<pii> st;
pii p[mx];

vector<vector<int>> adjlist; // adjacency list of graph
vector<bool> visited;
vector<int> tin, low;
int timer;
void dfs_art(int u, int par = -1) {
  visited[u] = true;
  tin[u] = low[u] = timer++;
  for (auto to : adjlist[u]) {
    if (to == par) continue;
    if (visited[to]) {
      low[u] = min(low[u], tin[to]);
    }
    else {
      dfs_art(to, u);
      low[u] = min(low[u], low[to]);
      if (low[to] > tin[u]) {
        st.insert(MP(u, to));
        st.insert(MP(to, u));
      }
    }
  }
}
void find_bridges() {
  timer = 0;
  visited.clear(); tin.clear(); low.clear();
  visited.assign(n+1, false);
  tin.assign(n+1, -1);
  low.assign(n+1, -1);
  for (int i = 1; i <= n; ++i) {
    if (!visited[i]) dfs_art(i);
  }
}

int vis[mx];
int cnt;

void dfs1( int u, int par )
{
	++cnt;
	vis[u] = EXPLORED;
	for( auto v : adjlist[u] ) {
		if( v == par ) continue;
		if( st.lower_bound(MP(u, v)) != st.upper_bound(MP(u, v)) ) continue;
		if( vis[v] == UNVISITED ) {
			p[mp[MP(u, v)]] = MP(u, v);
			dfs1( v, u );
		}
		else if( vis[v] == EXPLORED ) {
			p[mp[MP(u, v)]] = MP(u, v);
		}
	}
	vis[u] = VISITED;
}

void dfs2( int u )
{
	vis[u] = 1;
	for( auto v : adjlist[u] ) {
		if( !vis[v] ) {
			if( st.lower_bound(MP(u,v)) != st.upper_bound(MP(u,v)) ) {
				p[mp[MP(v,u)]] = MP(v, u);
			}
			dfs2(v);
		}
	}
}

int main()
{
	optimize();
	cin >> n >> m;
	adjlist.resize(n+1);
	for( int i = 0; i < m; ++i ) {
		int u, v;
		cin >> u >> v;
		adjlist[u].PB(v);
		adjlist[v].PB(u);
		mp[MP(u, v)] = i;
		mp[MP(v, u)] = i;
	}
	find_bridges();
	int ans = 0, node;
	for( int i = 1; i <= n; ++i ) {
		if( !vis[i] ) {
			cnt = 0;
			dfs1(i, 0);
			if( ans < cnt ) {
				ans = cnt;
				node = i;
			}
		}
	}
	memset(vis, 0, sizeof(vis));
	dfs2(node);
	cout << ans << endl;
	for( int i = 0; i < m; ++i ) {
		cout << p[i].F << " " << p[i].S << endl;
	}
}





















