#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define forq(i , a , b) for (int i = (a); i <= (b); ++i)
#define forr(i , b) forq( i , 0 , b - 1 )
#define F first
#define S second
#define IF -> F
#define IS -> S
#define qqmemset(array , val) memset (array , val , sizeof(array))
#define ALLV(vect) vect.begin() , vect.end()
#define mid (st + en) / 2
#define lef 2 * Node
#define rig lef + 1
#define Parent Node + (Node & (~Node + 1))
#define Neig Node - (Node & (~Node + 1))

ll R = 7 + 1e9 , NUMTESTCASE ;
const int NN = 10 + 1e5 ;
const double pi = acos(-1.0) ;
int di [4] = {1 , 0 , -1 , 0} , dj [4] = {0 , 1 , 0 , -1} , DI [8] = {1 , 1 , 0 , -1 , -1 , -1 , 0 , 1} , DJ [8] = {0 , 1 , 1 , 1 , 0 , -1 , -1 , -1} ;
using namespace std;

bool v [NN] ;

int main()
{
    //ios_base::sync_with_stdio(false); cin.tie(NULL);
    int q ;
    cin >> q;
    int n , x , k , a , flag = 0 ;
    while (q --) {
        a = -1 ;
        scanf("%d" , &n) ;
        forq (i , 1 , n) v [i] = false ;
        forq (i , 1 , n) {
            scanf("%d" , &k) ;
            flag = 0 ;
            while (k -- ) {
                scanf("%d" , &x) ;
                if (flag == 0 && v [x] == false) {
                    flag = 1 ;
                    v [x] = true ;
                }
            }
            if (flag == 0) a = i ;
        }
        if (a != -1)
            forq (j , 1 , n) {
                if (v[j]) continue ;
                printf("IMPROVE\n%d %d\n" , a , j) ;
                a = 1 ;
                break ;
            }
        if (a == -1) printf("OPTIMAL\n") ;
    }
    return 0;
}
