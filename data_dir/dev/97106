/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define tab                         '\t'
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r+" , stdin) ; freopen("out.txt" , "w+" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

ll Sqrt(ll x, ll y) {
    ll t = pow(x, 1. / y);
    for (ll i = max(0LL, t - 10); i <= t + 10; i++) {
        if (poww(i, y, ll(8e18)) == x) return i;
    }
    return -1;
}

set_random;

const ll MAXN = 710;
const ll INF = 8e18;
const ll MOD1 = 998244353;
const ll MOD2 = 1e9 + 7;
const ll MOD3 = 1e9 + 9;

ll n , p[MAXN] , ok[MAXN][MAXN] , dp[MAXN][MAXN][2];

int main() {
    fast_io;

    cin >> n;
    for(ll i = 1 ; i <= n ; i++)    cin >> p[i];

    for(ll i = 1 ; i <= n ; i++)
        for(ll j = 1 ; j <= n; j++)
            ok[i][j] = (__gcd(p[i] , p[j]) != 1);

    for(ll i = 1 ; i <= n ; i++)
    {
        dp[i][i][0] = ok[i][i - 1];
        dp[i][i][1] = ok[i][i + 1];
    }

    for(ll i = 1 ; i < MAXN ; i++)
    {
        for(ll j = 0 ; j < i ; j++)
        {
            dp[i][j][0] = 1;
            dp[i][j][1] = 1;
        }
    }

    for(ll ln = 1 ; ln < n - 1 ; ln++)
    {
        for(ll l = 1 , r = ln + 1 ; r <= n ; l++ , r++)
        {
            for(ll k = l ; k <= r ; k++)
            {
                if(dp[l][k - 1][1] && dp[k + 1][r][0])
                {
                    dp[l][r][0] |= ok[k][l - 1];
                    dp[l][r][1] |= ok[k][r + 1];
                }
            }
        }
    }

    for(ll i = 1 ; i <= n ; i++)
    {
        if(dp[1][i - 1][1] && dp[i + 1][n][0])  return cout << "Yes" << endl , 0;
    }
    cout << "No" << endl;

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/
