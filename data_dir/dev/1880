#include<bits/stdc++.h>
#define lf double
#define ll long long
#define ull unsigned ll
#define ii pair<int,int>
#define li pair<ll,ll>
#define iii pair<ii,int>
#define iiii pair<ii,ii>
#define iiii2 pair<int,iii>
#define lli pair<ll,int>
#define pll pair<ll,ll>
#define heap priority_queue
#define mp make_pair
#define st first
#define nd second
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define all(x) x.begin(),x.end()
#define len(x) strlen(x)
#define sz(x) (int) x.size()
#define orta ((bas+son)/2)
#define min3(x,y,z) min(min(x,y),z)
#define max3(x,y,z) max(max(x,y),z)
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define MOD 1000000007
#define inf 2000000009
#define N 100005
#define LOG 22
#define magic 100
#define M 44444
#define KOK 350
#define EPS 0.0025
#define pw(x) (1<<(x))
#define PI 3.1415926535
#define log sfeefw
using namespace std;

struct two {

	int zero;
	int mn;

} S[N*4];

int n,q,x,y,z,tot;
int now[N],lucky[55],lazy[N*4],vl[N];

inline int read() {
    int res = 0 ;int neg ;
    while(true){char ch = getchar();if(ch>='0' && ch<='9' || ch=='-'){if(ch=='-') neg = -1;else neg = 1 , res = ch-'0';break;} }
    while(true){char ch = getchar();if(ch>='0' && ch<='9') res*=10 , res+=ch-'0';else break;}
    return res*neg;
}

void merge(two &to,two x,two y) {

	to.zero=x.zero+y.zero;
	to.mn=min(x.mn,y.mn);

}

void push(int node,int bas,int son) {

	if(lazy[node]) {

		S[node*2].mn-=lazy[node];
		S[node*2+1].mn-=lazy[node];

		lazy[node*2]+=lazy[node];
		lazy[node*2+1]+=lazy[node];

		lazy[node]=0;

	}

}

int get(int node,int bas,int son,int x,int y) {

	if(bas>=x && son<=y) return S[node].zero;

	if(bas>y || son<x) return 0;

	push(node,bas,son);

	return get(node*2,bas,orta,x,y)+get(node*2+1,orta+1,son,x,y);

}

void up(int node,int bas,int son,int x,int y,int val) {

	if(bas>y || son<x) return ;

	if(bas>=x && son<=y && val<S[node].mn) {

		lazy[node]+=val;
		S[node].mn-=val;

		return ;

	} 

	if(bas==son) {

		val-=S[node].mn;

		while(lucky[now[bas]+1]-lucky[now[bas]]<=val) {

			val-=lucky[now[bas]+1]-lucky[now[bas]];
			now[bas]++;

		}

		if(val) {

			S[node].mn=lucky[now[bas]+1]-lucky[now[bas]]-val;
			now[bas]++;

		}
		else {

			S[node].mn=0;

		}

		S[node].zero=!S[node].mn;

		return ;

	}

	push(node,bas,son);

	up(node*2,bas,orta,x,y,val);
	up(node*2+1,orta+1,son,x,y,val);

	merge(S[node],S[node*2],S[node*2+1]);


}

int find(int val) {

	for(int i=1;i<=tot;i++) {

		if(lucky[i]>=val) return i;

	}

}

bool islucky(int x) {

	while(x) {

		if(x%10!=4 && x%10!=7) return false;

		x/=10;

	}

	return true;

}

void luckyfinder() {

	for(int i=1;i<=M;i++) {

		if(islucky(i)) {

			lucky[++tot]=i;

		}

	}

}

void build(int node,int bas,int son) {

	if(bas==son) {

		S[node]={!vl[bas],vl[bas]};

		return ;

	}

	build(node*2,bas,orta);
	build(node*2+1,orta+1,son);

	merge(S[node],S[node*2],S[node*2+1]);

}

int main() {

	luckyfinder();

	n=read();q=read();

	for(int i=1;i<=n;i++) {

		x=read();

		now[i]=find(x);

		vl[i]=lucky[now[i]]-x;

	}

	build(1,1,n);

	while(q--) {

		char s[10];

		scanf("%s",s+1);

		if(s[1]=='a') {

			x=read();y=read();z=read();

			up(1,1,n,x,y,z);

		}
		else {

			x=read();y=read();

			printf("%d\n",get(1,1,n,x,y));

		}

	}

}