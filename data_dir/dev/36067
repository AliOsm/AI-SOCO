#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#pragma comment(linker, "/STACK:16777216")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<double, double> pd;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> kawaii_set;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(9);
    #ifdef _offline
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // _offline
}

struct ddata {
    int x1, y1, x2, y2;

    ddata() : x1(-1), y1(-1), x2(-1), y2(-1) {};
    ddata(int _x1, int _y1, int _x2, int _y2) : x1(_x1), y1(_y1), x2(_x2), y2(_y2) {};
};

const int INF = 1e9 + 7;
int n, m;

void solve(vector<vector<string>> &g, vector<ddata> &res) {
    vector<vector<string>> pushed(n, vector<string>(m, ""));
    int start = INF;
    for (int i = 0; i < g[0][0].length(); ++i) {
        if (g[0][0][i] == '0') {
            start = i;
            break;
        }
    }
    while (g[0][0].length() > start) {
        if (g[0][0].back() == '0') {
            pushed[0][m - 1] += '0';
            res.push_back(ddata(0, 0, 0, m - 1));
        }
        else {
            pushed[1][0] += '1';
            res.push_back(ddata(0, 0, 1, 0));
        }
        g[0][0].pop_back();
    }
    start = INF;
    for (int i = 0; i < g[0][m - 1].length(); ++i) {
        if (g[0][m - 1][i] == '1') {
            start = i;
            break;
        }
    }
    while (g[0][m - 1].length() > start) {
        if (g[0][m - 1].back() == '1') {
            pushed[0][0] += '1';
            res.push_back(ddata(0, m - 1, 0, 0));
        }
        else {
            pushed[1][m - 1] += '0';
            res.push_back(ddata(0, m - 1, 1, m - 1));
        }
        g[0][m - 1].pop_back();
    }
    for (int i = 0; i < n; ++i) {
        for (int j = 1; j < m - 1; ++j) {
            while (g[i][j].length() > 0) {
                if (g[i][j].back() == '1') {
                    pushed[i][0] += '1';
                    res.push_back(ddata(i, j, i, 0));
                }
                else {
                    pushed[i][m - 1] += '0';
                    res.push_back(ddata(i, j, i, m - 1));
                }
                g[i][j].pop_back();
            }
        }
    }
    for (int i = 1; i < n; ++i) {
        while (g[i][0].length() > 0) {
            if (g[i][0].back() == '1') {
                pushed[0][0] += '1';
                res.push_back(ddata(i, 0, 0, 0));
            }
            else {
                pushed[i][m - 1] += '0';
                res.push_back(ddata(i, 0, i, m - 1));
            }
            g[i][0].pop_back();
        }
        reverse(all(pushed[i][0]));
        while (pushed[i][0].length() > 0) {
            if (pushed[i][0].back() == '1') {
                pushed[0][0] += '1';
                res.push_back(ddata(i, 0, 0, 0));
            }
            else {
                pushed[i][m - 1] += '0';
                res.push_back(ddata(i, 0, i, m - 1));
            }
            pushed[i][0].pop_back();
        }
    }
    for (int i = 1; i < n; ++i) {
        while (g[i][m - 1].length() > 0) {
            if (g[i][m - 1].back() == '0') {
                pushed[0][m - 1] += '0';
                res.push_back(ddata(i, m - 1, 0, m - 1));
            }
            else {
                pushed[i][0] += '1';
                res.push_back(ddata(i, m - 1, i, 0));
            }
            g[i][m - 1].pop_back();
        }
        reverse(all(pushed[i][m - 1]));
        while (pushed[i][m - 1].length() > 0) {
            if (pushed[i][m - 1].back() == '0') {
                pushed[0][m - 1] += '0';
                res.push_back(ddata(i, m - 1, 0, m - 1));
            }
            else {
                pushed[i][0] += '1';
                res.push_back(ddata(i, m - 1, i, 0));
            }
            pushed[i][m - 1].pop_back();
        }
    }
    for (int i = 1; i < n; ++i) {
        while (pushed[i][0].length() > 0) {
            pushed[0][0] += '1';
            res.push_back(ddata(i, 0, 0, 0));
            pushed[i][0].pop_back();
        }
    }
}

signed main() {
    FAST_IO();
    cin >> n >> m;
    vector<vector<string>> fst, lst;
    for (int i = 0; i < n; ++i) {
        vector<string> nw;
        for (int j = 0; j < m; ++j) {
            string s;
            cin >> s;
            nw.push_back(s);
        }
        fst.push_back(nw);
    }
    for (int i = 0; i < n; ++i) {
        vector<string> nw;
        for (int j = 0; j < m; ++j) {
            string s;
            cin >> s;
            reverse(all(s));
            nw.push_back(s);
        }
        lst.push_back(nw);
    }
    vector<ddata> a, b;
    solve(fst, a);
    solve(lst, b);
    cout << a.size() + b.size() << '\n';
    for (ddata d : a) {
        cout << d.x1 + 1 << ' ' << d.y1 + 1 << ' ' << d.x2 + 1 << ' ' << d.y2 + 1 << '\n';
    }
    reverse(all(b));
    for (ddata d : b) {
        cout << d.x2 + 1 << ' ' << d.y2 + 1 << ' ' << d.x1 + 1 << ' ' << d.y1 + 1 << '\n';
    }
}
