#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <ctime>
#include <cmath>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cstring>
using namespace std;

#define pb push_back
#define rs resize
#define mp make_pair
#define inf 1e9
#define pi 3.1415926535897932384626433832795
#define sz(a) (a).size()
#define sort(a) sort((a).begin(), (a).end())
#define reverse(a) reverse((a).begin(), (a).end())
#define sf scanf
#define pf printf

typedef vector <int> vi;
typedef vector <vi> vvi;
typedef vector <vvi> vvvi;
typedef vector <vvvi> vvvvi;
typedef vector <bool> vb;
typedef vector <vb> vvb;
typedef vector <vvb> vvvb;
typedef vector <vvvb> vvvvb;
typedef long long ll;
typedef vector <ll> vl;
typedef vector <vl> vvl;
typedef vector <vvl> vvvl;
typedef vector <vvvl> vvvvl;
typedef pair <int, int> ii;
typedef vector <ii> vii;
typedef vector <vii> vvii;
typedef pair <int, ll> il;
typedef vector <il> vil;
typedef vector <vil> vvil;
typedef pair <ll, int> li;
typedef vector <li> vli;
typedef vector <vli> vvli;
typedef set <int> si;
typedef set <li> sli;
typedef set <il> sil;
typedef vector <string> vs;
typedef vector <vs> vvs;
typedef vector <vvs> vvvs;
typedef map <string, int> msi;
typedef map <char, int> mci;
typedef pair <ll, ll> pll;

vs a;
vvi d;

void dfs(int x, int y)
{
    d[x][y] = -1;
    if (a[x][y] == '#')
    {
        d[x][y] = 0;
        return;
    }
    if (a[x][y] == 'v')
    {
        if (d[x + 1][y] == -1)
        {
            cout << -1;
            exit(0);
        }
        if (d[x + 1][y] == -2)
        {
            dfs(x + 1, y);
            d[x][y] = d[x + 1][y] + 1;
        }
        else
        {
            d[x][y] = d[x + 1][y] + 1;
        }
    }
    if (a[x][y] == '^')
    {
        if (d[x - 1][y] == -1)
        {
            cout << -1;
            exit(0);
        }
        if (d[x - 1][y] == -2)
        {
            dfs(x - 1, y);
            d[x][y] = d[x - 1][y] + 1;
        }
        else
        {
            d[x][y] = d[x - 1][y] + 1;
        }
    }
    if (a[x][y] == '<')
    {
        if (d[x][y - 1] == -1)
        {
            cout << -1;
            exit(0);
        }
        if (d[x][y - 1] == -2)
        {
            dfs(x, y - 1);
            d[x][y] = d[x][y - 1] + 1;
        }
        else
        {
            d[x][y] = d[x][y - 1] + 1;
        }
    }
    if (a[x][y] == '>')
    {
        if (d[x][y + 1] == -1)
        {
            cout << -1;
            exit(0);
        }
        if (d[x][y + 1] == -2)
        {
            dfs(x, y + 1);
            d[x][y] = d[x][y + 1] + 1;
        }
        else
        {
            d[x][y] = d[x][y + 1] + 1;
        }
    }
}

vvb u;

int dfs2(int x, int y)
{
    u[x][y] = 1;
    if (a[x][y] == '#')
    {
        return 0;
    }
    if (a[x][y] == 'v')
    {
        if (a[x + 1][y] == '#' || !u[x + 1][y])
        {
            return dfs2(x + 1, y) + 1;
        }
        else
        {
            return 0;
        }
    }
    if (a[x][y] == '^')
    {
        if (a[x - 1][y] == '#' || !u[x - 1][y])
        {
            return dfs2(x - 1, y) + 1;
        }
        else
        {
            return 0;
        }
    }
    if (a[x][y] == '>')
    {
        if (a[x][y + 1] == '#' || !u[x][y + 1])
        {
            return dfs2(x, y + 1) + 1;
        }
        else
        {
            return 0;
        }
    }
    if (a[x][y] == '<')
    {
        if (a[x][y - 1] == '#' || !u[x][y - 1])
        {
            return dfs2(x, y - 1) + 1;
        }
        else
        {
            return 0;
        }
    }
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#endif
    int n, m;
    cin >> n >> m;
    a.rs(n);
    for (int i = 0; i < n; ++i)
    {
        cin >> a[i];
    }
    u.rs(n, vb(m, 0));
    d.rs(n, vi(m, -2));
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < m; ++j)
        {
            dfs(i, j);
        }
    }
    int len = -1;
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < m; ++j)
        {
            len = max(len, d[i][j]);
        }
    }
    if (len == 0)
    {
        cout << 0;
        return 0;
    }
    int c = 0;
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < m; ++j)
        {
            if (!u[i][j] && d[i][j] == len && dfs2(i, j) == len)
            {
                c++;
            }
        }
    }
    if (c >= 2)
    {
        cout << len * 2;
    }
    else
    {
        cout << len * 2 - 1;
    }
}