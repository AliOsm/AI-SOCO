#include <bits/stdc++.h>
using namespace std;

const int MX = 120;

int N, M;
int dx[] = {-3, -2, -1, 0, 1, 2, 3, 2, 1, 0, -1, -2};
int dy[] = {0, 1, 2, 3, 2, 1, 0, -1, -2, -3, -2, -1};
pair<int, int> from[MX][MX];
bool vis[MX][MX];

bool kuhn(pair<int, int> v) {
	if (vis[v.first][v.second]) return false;
	vis[v.first][v.second] = true;
	for (int d = 0; d < 12; d++) {
		pair<int, int> u = v;
		u.first += dx[d];
		u.second += dy[d];
		if (u.first < 0 || u.first >= N || u.second < 0 || u.second >= M) continue;
		
		if (from[u.first][u.second].first == -1 || kuhn(from[u.first][u.second])) {
			from[u.first][u.second] = v;
			return true;
		}
	}
	return false;
}

int get(int n, int m) {
	if (n == 1) {
		m %= 6;
		if (m == 1 || m == 5) return 1;
		if (m == 2 || m == 4) return 2;
		if (m == 3) return 3;
		return 0;
	}
	if (n == 2) {
		if (m == 1) return 2;
		if (m == 2) return 4;
		if (m == 3) return 2;
		if (m == 7) return 2;
		return 0;
	}
	if (n == 3) {
		if (m == 1) return 3;
		if (m == 2) return 2;
		return m % 2;
	}
	if (n % 2 == 1 && m % 2 == 1) return 1;
	return 0;
}

int main()
{
	int n, m;
	ignore = scanf("%d %d", &n, &m);
	if (n > m) swap(n, m);
	cout << n * 1LL * m - (long long)get(n, m) << endl;
	return 0;
	
	
	for (N = 1; N < 40; N++) {
		for (M = 1; M < 40; M++) {
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					from[i][j].first = -1;
				}
			}
			
			int ans = 0;
			
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					if ((i + j) % 2 == 0) {
						
						for (int ii = 0; ii < N; ii++) {
							for (int jj = 0; jj < M; jj++) {
								vis[ii][jj] = false;
							}
						}
						
						ans += kuhn({i, j});
					}
				}
			}
			
			ans *= 2;
			ans = N*M - ans;
			printf("%d ", ans);
		}
		printf("\n");
	}
}
