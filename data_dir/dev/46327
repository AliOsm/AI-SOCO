//#pragma GCC optimize("Ofast")
//#pragma GCC target("avx,avx2,fma")
#include <bits/stdc++.h>
#define all(x) std::begin(x), std::end(x)
#define isz(x) (int)std::size(x)
#define io_sync_off std::ios_base::sync_with_stdio(0); std::cin.tie(0)
// Debug defines:
#define watch(x) std::cerr << std::setw(12) << #x << " = " << std::setw(12) << x
#define watchln(x) watch(x) << std::endl
#define watchsp(x) watch(x) << " "
#define cerr cerr && debug && std::cerr
int debug = 0;
namespace std {
    // 2D arrays:
    template<typename T, int N, int M> auto size(const T (&a)[N][M]) { return N * M; }
    template<typename T, int N, int M> auto begin(T (&a)[N][M]) { return &a[0][0]; }
    template<typename T, int N, int M> auto end(T (&a)[N][M]) { return &a[0][0] + N * M; }
    // Algorithms:
    template<typename C> void reuniq(C& c) { c.erase(unique(c), end(c)); }
    template<typename C, typename X> int lowpos(C& c, X& x) {
        return int(lower_bound(all(c), x) - begin(c));
    }
    template<typename X, typename Y> X& remin(X& x, Y& y) { return x = (y < x) ? y : x; }
    template<typename X, typename Y> X& remax(X& x, Y& y) { return x = (x < y) ? y : x; }
}
// Input:
template<typename T>
std::istream& operator>>(std::istream& is, std::vector<T>& vec) {
    for (auto &it : vec) is >> it;
    return is;
}
// Output:
template<typename T>
std::ostream& operator<<(std::ostream& os, std::vector<T>& vec) {
    for (auto it = vec.begin(); it != vec.end(); it++) {
        if (it != vec.begin()) {
            os << ", ";
        }
        os << *it;
    }
    return os;
}
template<typename A, typename B>
std::ostream& operator<<(std::ostream& os, std::pair<A,B>& pt) {
    return os << "(" << pt.first << "," << pt.second << ")";
}
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef std::vector<int> vi;
typedef std::vector<ll> vl;
typedef std::vector<vi> vvi;
typedef std::vector<vl> vvl;
typedef std::pair<int,int> pii;
typedef std::pair<int,ll> pil;
typedef std::pair<ll,int> pli;
typedef std::pair<ll,ll> pll;
// -----------------------------------------------------------------------------
const vi left = {1, 0, 1, 0};
const vi right = {0, 1, 0, 1};
const vi up = {1, 1, 0, 0};
const vi down = {0, 0, 1, 1};
int brute(int a, int b) {
    int cnt = 0;
    vvi arr(a, vi(b));
    for (int mask = 0; mask < (1 << (2 * a * b)); ++mask) {
        for (int i = 0, tmp = mask; i < a; i++) {
            for (int j = 0; j < b; j++) {
                arr[i][j] = tmp & 3;
                tmp >>= 2;
            }
        }
        bool ok = true;
        for (int i = 0; ok && i < a; i++) {
            for (int j = 0; ok && j < b; j++) {
                if (i > 0 && down[arr[i-1][j]] == up[arr[i][j]]) {
                    ok = false;
                }
                if (j > 0 && right[arr[i][j-1]] == left[arr[i][j]]) {
                    ok = false;
                }
            }
        }
        cnt += ok;
    }
    return cnt;
}

int main() {
    int w, h; 
    while (std::cin >> w >> h) {
        int pow = 1;
        for (int i = 0; i < w + h; i++) {
            pow = int(1LL * pow * 2 % 998244353);
        }
        std::cout << pow << std::endl;
    }
    return 0;
}