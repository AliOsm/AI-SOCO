#include <bits/stdc++.h>

typedef  long long ll ;
typedef long double ld ;
using namespace std;
int tree[1<<20]= {},lazy[1<<20]= {},arr[200010];
void update(int node,int i,int j,int x,int y,int value)
{
    if(i>j||i>y||j<x)
        return ;
    if(lazy[node])
    {
        tree[node]=lazy[node];
        if(i!=j)
        {
            lazy[node*2]=lazy[node];
            lazy[node*2+1]=lazy[node];
        }
        lazy[node]=0;
    }
    if(x<=i&&j<=y)
    {
        tree[node]=value;
        if(i!=j)
        {
            lazy[node*2]=value;
            lazy[node*2+1]=value;
        }
        return ;
    }
    update(node*2,i,(i+j)/2,x,y,value);
    update(node*2+1,(i+j)/2+1,j,x,y,value);
    tree[node]=max(tree[node*2],tree[node*2+1]);
}

int query(int node,int i,int j,int target)
{
    if(i>j||i>target||j<target)
    {
        return 0;
    }
    if(lazy[node])
    {
        tree[node]=lazy[node];
        if(i!=j)
        {
            lazy[node*2]=lazy[node];
            lazy[node*2+1]=lazy[node];
        }
        lazy[node]=0;
    }
    if(i==j&&i==target)
    {
        return tree[node];
    }
    return max(query(node*2,i,(i+j)/2,target),query(node*2+1,(i+j)/2+1,j,target));
}
int main()
{
    std::cin.tie(0);
    std::ios::sync_with_stdio(false);
    //freopen("codecoder.in", "r", stdin);
    //freopen("codecoder.out", "w", stdout);
    int n,q;
    cin >> n>>q;
    vector<vector<int> > v(q+10);
    for(int i =0; i<n; i++)
    {
        cin >> arr[i];
        v[arr[i]].push_back(i);
    }
    for(int i =1; i<=q; i++)
    {
        if(v[i].size())
            update(1,0,n,v[i][0],v[i].back(),i);
    }
    int last=-1,x;
    for(int i =0; i<n; i++)
    {
        x=query(1,0,n,i);
        if(x)
        {
            last=x;
            break;
        }
    }
    if(last==-1)
    {
        last=q;
    }
    int gre=0;
    vector<int> zero;
    for(int i =0; i<n; i++)
    {
        x=query(1,0,n,i);
       // cout << x << " "<< arr[i]<< endl;
        if(x!=arr[i]&&arr[i])
        {
            cout << "NO" << endl;
            return 0;
        }
        else if(arr[i]==0)
        {
            arr[i]=last;
            zero.push_back(i);
        }
        else
            last=x;
        if(arr[i]==q)
        {
            gre=1;
        }
    }
    if(!gre)
    {
        if(zero.size()==0)
        {
            cout << "NO"<<endl;
            return 0;
        }
        else
        {
            arr[zero.back()]=q;
        }

    }
    cout << "YES" << endl;
    for(int i =0; i<n; i++)
    {
        cout << arr[i] << " " ;
    }
    cout << endl;
    return 0;
}
