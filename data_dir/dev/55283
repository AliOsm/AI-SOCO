#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native")
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <stdio.h>
#include <cstdio>
#include <math.h>
#include <cmath>
#include <string>
#include <cstring>
#include <queue>
#include <deque>
#include <random>
#include <iomanip>
#include <bitset>
   
using namespace std;
   
template<typename T> void uin(T &a, T b) {
    if (b < a) {
        a = b;
    }
}
   
template<typename T> void uax(T &a, T b) {
    if (b > a) {
        a = b;
    }
}

#define int long long
#define left left228
#define right right228
#define prev prev228
#define next next228

const int N = 300 * 1000 + 228;

int n;
int p[N], a[N], pos[N];

vector< pair<int, int> > ans;

void make_swap(int i, int j) {
    if (i > j) swap(i, j);
    ans.push_back({i, j});
    swap(pos[p[i]], pos[p[j]]);
    swap(p[i], p[j]);
}

void solve(int i, int j) {
    if (i > j) swap(i, j);
    if (2 * (j - i) >= n) {
        make_swap(i, j);
    } else {
        if (j <= n / 2) {
            make_swap(i, n);
            make_swap(j, n);
            make_swap(i, n);
        } else if (i > n / 2) {
            make_swap(i, 1);
            make_swap(j, 1);
            make_swap(i, 1);
        } else {
            make_swap(j, 1);
            make_swap(i, n);
            make_swap(1, n);
            make_swap(j, 1);
            make_swap(i, n);
        }
    }
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> p[i];
        a[i] = p[i];
        pos[p[i]] = i;
    }
    for (int i = 1; i <= n; ++i) {
        int P = pos[i];
        if (P != i) {
            solve(i, P);
        }
    }
    cout << (int)ans.size() << endl;
    for (auto P : ans) {
        cout << P.first << " " << P.second << '\n';
    }
    return 0;
} // kek




