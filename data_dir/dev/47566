#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>

using namespace std;

const int MaxN = 10004, MaxC = 0x3F3F3F3F, NA = -1;

string s;
char buf [MaxN];
int v [MaxN];
int p, l, m;

void readtable (int k);
void readrow (int k);
void readrows (int k);
void readcell (int k);
void readcells (int k);

void readtable (int k)
{
 assert (s[p++] == '<');
 assert (s[p++] == 't');
 assert (s[p++] == 'a');
 assert (s[p++] == 'b');
 assert (s[p++] == 'l');
 assert (s[p++] == 'e');
 assert (s[p++] == '>');
 readrows (k);
 assert (s[p++] == '<');
 assert (s[p++] == '/');
 assert (s[p++] == 't');
 assert (s[p++] == 'a');
 assert (s[p++] == 'b');
 assert (s[p++] == 'l');
 assert (s[p++] == 'e');
 assert (s[p++] == '>');
}

void readrow (int k)
{
 assert (s[p++] == '<');
 assert (s[p++] == 't');
 assert (s[p++] == 'r');
 assert (s[p++] == '>');
 readcells (k);
 assert (s[p++] == '<');
 assert (s[p++] == '/');
 assert (s[p++] == 't');
 assert (s[p++] == 'r');
 assert (s[p++] == '>');
}

void readrows (int k)
{
 do
 {
  readrow (k);
 }
 while (s[p + 1] != '/');
}

void readcell (int k)
{
 assert (s[p++] == '<');
 assert (s[p++] == 't');
 assert (s[p++] == 'd');
 assert (s[p++] == '>');
 v[k]++;
 if (s[p + 1] != '/')
 {
  m++;
  readtable (m - 1);
 }
 assert (s[p++] == '<');
 assert (s[p++] == '/');
 assert (s[p++] == 't');
 assert (s[p++] == 'd');
 assert (s[p++] == '>');
}

void readcells (int k)
{
 do
 {
  readcell (k);
 }
 while (s[p + 1] != '/');
}

int main (void)
{
 int i;
 s = "";
 while (scanf (" %s", buf) != EOF)
 {
  s += buf;
 }
 p = 0;
 l = s.size ();
 m = 1;
 memset (v, 0, sizeof (v));
 readtable (0);
 sort (v, v + m);
 for (i = 0; i < m; i++)
  printf ("%d%c", v[i], i + 1 < m ? ' ' : '\n');
 return 0;
}
