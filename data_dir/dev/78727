#include <bits/stdc++.h>
using namespace std;

const int MOD = ( int ) 1e9 + 7;

string M;
int dp[ 10 + 1 ][ 10 ][ 2 ];
int cnt[ 10 ];
int dp2[ 10 ][ 10 ][ 6 + 1 ];

int int_pow( int v, int p, int m ){
  int res = not ( v == 0 and p );
  while( p ){
    if( p & 1 ) res = 1LL * res * v % m;
    p >>= 1;
    v = 1LL * v * v % m;
  }
  return res % m;
}

int mod_inv( int v, int m ){
  return int_pow( v, m - 2, m );
}

int C( int n, int r ){ assert( r <= 6 );
  int res = 1;
  for( int i = n - r + 1; i <= n; ++i ){
    res = 1LL * res * i % MOD;
  }
  for( int i = 1; i <= r; ++i ){
    res = 1LL * res * mod_inv( i, MOD ) % MOD;
  }
  return res;
}

signed main(){
  ios::sync_with_stdio( 0 );
  cin >> M;
  dp[ 0 ][ 0 ][ 0 ] = 1;
  for( int i = 0; i < M.size(); ++i ){
    for( int j = 0; j + 1 < 10; ++j ){
      for( int l = 0; l < 2; ++l ){
        for( int d = 0; d <= ( l ? 9 : M[ i ] - '0' ); ++d ){
          dp[ i + 1 ][ j + ( d == 4 ) + ( d == 7 ) ][ l or d < M[ i ] - '0' ] += dp[ i ][ j ][ l ];
        }
      }
    }
  }
  for( int i = 0; i < 10; ++i ){
    for( int j = 0; j < 2; ++j ){
      cnt[ i ] += dp[ M.size() ][ i ][ j ];
    }
  }
  --cnt[ 0 ]; // 0
  dp2[ 0 ][ 0 ][ 0 ] = 1;
  for( int i = 0; i + 1 < 10; ++i ){
    for( int j = 0; j < 10; ++j ){
      for( int k = 0; k <= 6; ++k ){
        for( int l = 0; j + l * i < 10 and l + k <= 6; ++l ){
          ( dp2[ i + 1 ][ j + l * i ][ k + l ] += 1LL * C( cnt[ i ], l ) * dp2[ i ][ j ][ k ] % MOD ) %= MOD;
        }
      }
    }
  }
  int ans = 0;
  for( int i = 1; i < 10; ++i ){
    ( ans += 1LL * cnt[ i ] * dp2[ 9 ][ i - 1 ][ 6 ] % MOD ) %= MOD;
    ( dp2[ 9 ][ i ][ 6 ] += dp2[ 9 ][ i - 1 ][ 6 ] ) %= MOD;
  }
  for( int i = 1; i <= 6; ++i ){
    ans = 1LL * ans * i % MOD;
  }
  cout << ans << endl;
  return 0;
}
