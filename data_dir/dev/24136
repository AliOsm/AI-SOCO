#include <bits/stdc++.h>

#define ll long long

using namespace std;
const int N = 2e5 + 5, mod = 1e9 + 7;
int fac[N];
int fast_power(int a, int p, int mod) {
	if (!p)
		return 1;
	int t = fast_power(a, p / 2, mod);
	t = (t * 1ll * t) % mod;
	if (p & 1)
		t = (t * 1ll * a) % mod;
	return t;
}
int modinv(int n) {
	return fast_power(n, mod - 2, mod);
}
int ncr(int n, int r) {
	return (fac[n] * 1ll * modinv((fac[n - r] * 1ll * fac[r]) % mod)) % mod;
}

struct cell {
	int r, c;

	bool operator <(const cell &a) {
		if (r < a.r)
			return 1;
		if (r > a.r)
			return 0;
		return c < a.c;
	}
};

cell a[N];

int ans[N];
int main() {

	ios_base::sync_with_stdio(0);
	cin.tie(0);
	fac[0] = 1;
	for (int i = 1; i < N; i++)
		fac[i] = (i * 1ll * fac[i - 1]) % mod;
	int h, w, n;
	cin >> h >> w >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i].r >> a[i].c;

	sort(a, a + n);

	a[n].r = h, a[n].c = w;
	for (int i = 0; i <= n; i++) {
		ans[i] = ncr(a[i].c - 1 + a[i].r - 1, a[i].r - 1);
		for (int j = 0; j < i; j++) {
			if (a[j].c > a[i].c)
				continue;
			int w1 = (ans[j] * 1ll
					* ncr(a[i].c - a[j].c + a[i].r - a[j].r, a[i].r - a[j].r))
					% mod;
			ans[i] = (ans[i] - w1 + mod) % mod;
		}
	}
	cout << ans[n] << endl;
	return 0;
}
