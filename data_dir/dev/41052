#include <bits/stdc++.h>
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define mod 998244353
// #define int long long
#define ll long long
#define EPS 0.00000000000001
#define ld long double
#define inf 1e16
#define N 5000004
struct trie{
    int nxt[2];
};
trie tr[N];
int dp[N];
int t = 0;
void insert(int n)
{
    int c = 0;
    for(int j = 29;j >= 0;j--)
    {
        int b = (n & (1 << j)) > 0;
        if(tr[c].nxt[b] == 0)
        {
            ++t;
            tr[c].nxt[b] = t;
        }
        c = tr[c].nxt[b];
    }
}

void dfs(int node,int bit)
{
    if(tr[node].nxt[0] == 0 and tr[node].nxt[1] == 0)
    {
        dp[node] = 0;
        return;
    }
    if(tr[node].nxt[0] == 0)
    {
        dfs(tr[node].nxt[1],bit - 1);
        dp[node] = dp[tr[node].nxt[1]];
        return;
    }
    if(tr[node].nxt[1] == 0)
    {
        dfs(tr[node].nxt[0],bit - 1);
        dp[node] = dp[tr[node].nxt[0]];
        return ;
    }
    if(tr[node].nxt[0])
    {
        dfs(tr[node].nxt[0],bit - 1);
        dp[node] = (1 << bit) + dp[tr[node].nxt[0]];
    }
    if(tr[node].nxt[1])
    {
        dfs(tr[node].nxt[1],bit - 1);
        dp[node] = min(dp[node],(1 << bit) + dp[tr[node].nxt[1]]);
    }
    return;
}

int32_t main()
{
    IOS;
    #ifndef ONLINE_JUDGE
    freopen("int.txt","r",stdin);
    freopen("out.txt","w",stdout);
    #endif
    int n;
    cin >> n;
    vector<int> v(n);
    for(int i = 0;i < n;i++)
    {
        cin >> v[i];
        insert(v[i]);

    }
    dfs(0,29);
    cout << dp[0];

    return 0;

}
 
