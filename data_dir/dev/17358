#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

ll read_long() {
    ll ans = 0;
    char c;
    bool started = false;
    bool is_negative = false;
    while (true) {
        c = getchar();
        if ((c < '0' || c > '9') && c != '-' && !started) continue;
        if ((c < '0' || c > '9') && c != '-' && started) break;
        if (started) {
            ans = ans * 10;
        }
        started = true;
        if (c == '-') is_negative = true;
        else ans += c - '0';
    }
    if (is_negative) ans *= -1;
    return ans;
}

int n, m;
int a[200200];
int b[200200];
int d1[200200], d2[200200];
set<int> ans;

int is_good(int l, int r) {
    if (l == r) return true;
    r--;
    if ((r - l + 1) % 2 == 0) {
        int center = (r + l) / 2 + 1;
        return d2[center] >= r - center + 1;
    }
    int center = (r + l) / 2;
    return d1[center] >= r - center + 1;
}

int main(){

    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; i++) scanf("%d", a + i);

    for (int i = 1; i < n; i++) b[i] = a[i] - a[i + 1];

    for (int i = 1, l = 0, r = -1, k = 0; i < n; i++){
        if (i > r) k = 1;
        else k = min(d1[l + r - i], r - i);
        
        while(0 < i - k && i + k < n && b[i - k] == b[i + k]) k++;
        d1[i] = k;
        if(i + k - 1 > r)
            r = i + k - 1, l = i - k + 1;
    }
    for (int i = 1, l = 0, r = -1, k = 0; i < n; i++){
        if(i > r) k = 0;
        else k = min(d2[l + r - i + 1], r - i + 1);

        while(i + k < n && i - k - 1 > 0 && b[i + k] == b[i - k - 1]) k++;
        d2[i] = k;

        if(i + k - 1 > r)
            l = i - k, r = i + k - 1;
    }

    for (int i = 1; i + 1 <= n; i++) {
        if (is_good(1, i) && is_good(i + 1, n)) {
            int x = a[1] + a[i];
            if (x >= a[i] && x < a[i + 1]) {
                int y = a[i + 1] + a[n] - m;
                if (x == y) ans.insert(x);
            } else continue;
        }
    }

    if (is_good(1, n) && a[1] + a[n] >= a[n] && a[1] + a[n] < m) ans.insert(a[1] + a[n]);
    if (is_good(1, n) && a[1] + a[n] - m < a[1] && a[1] + a[n] - m >= 0) ans.insert(a[1] + a[n] - m);

    printf("%d\n", sz(ans));
    bool space = false;
    forit (it, ans) {
        if (space) printf(" ");
        space = true;
        printf("%d", *it);
    }
    printf("\n");

    return 0;
}
