#include <bits/stdc++.h>
#define rep(i,a,b) for(int i = (a); i <= (b); i++)
#define rng(a) a.begin(), a.end()
#define sz(x) (int)(x).size()
#define se second
#define fi first
#define prev            :oyhhhhhhyo:    
#define next         .sdNNNmNNNNNNNmds. 
#define y0          -hNNNNy`yNNNNNN`/Nh-
#define y1          mNNNNNd+dNNNNNN+sNNm
#define yn          mNNNNNNNNy--:smNNNms
#define tm          .+oooooosyysooooo+- 
#define read               :yhy/        
#define rank              :mNmo         
#define index              ... 
#define pb push_back
#define pcnt __builtin_popcountll
#define rrep(i,a,b) for(int i = (b); i >= (a); i--)
#define rall(x,a) for(auto x : a)
#define MOD 1000000007
#define endl "\n"
#define int long long
typedef long long ll;
using namespace std;

const int N = 222222;
int n;

bool test(string x, string y, int k) {
    string yy = y.substr(n - k) + y.substr(0, n - k);
    string xo(n, '0');
    rep(i, 1, n) {
        xo[i - 1] = yy[i - 1] == y[i - 1] ? '0' : '1';
    }
    return x == xo;
}

int brute(string y) {
    int cnt = 0;
    rep(k, 0, n - 1) {
        bool found = false;
        rep(mask, 0, (1 << n) - 1) {
            string x;
            rep(i, 0, n - 1) {
                x += (mask & (1 << i)) ? "1" : "0";
            }
            reverse(rng(x));
            if(test(y, x, k)) {
                found = true;
                break;
            }
        }
        cnt += found;
    }
    return cnt;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    string y;
    cin >> n >> y;
    if(y == string(n, '0')) {
        cout << n << endl;
        return 0;
    }
    int ans = 0;
    vector<bool> okk(n, 0);
    vector<int> okkk(n, -1);
    rep(k, 1, n - 1) {
        if(okkk[__gcd(n, k)] != -1) {
            ans += okkk[__gcd(n, k)];
        } else {
            vector<bool> vis(n, false);
            bool ok = true;
            rep(i, 0, n - 1) {
                if(vis[i]) continue;
                int j = i, cnt = 0;
                do {
                    vis[j] = true;
                    cnt += y[j] == '1';
                    j = (j + k) % n;
                } while(j != i);
                if(cnt & 1) {
                    ok = false;
                    break;
                }
            }
            okk[k] = ok;
            okkk[__gcd(n, k)] = ok;
            ans += ok;
        }
    }
    cout << ans << endl;
    return 0;
}
