#include <bits/stdc++.h>
using namespace std;

const int MAXN = 1 << 17;

struct PST {
  int sum;
  PST *l, *r;
  PST(int sum = 0, PST *l = NULL, PST *r = NULL) :
    sum(sum), l(l), r(r) {}
};

int n, k, q;
int a[MAXN];
PST *version[MAXN];
vector<int> pos[MAXN];

PST *build(int l, int r) {
  if (r - l == 1) {
    return new PST();
  }
  int m = (l + r) / 2;
  return new PST(0, build(l, m), build(m, r));
}

PST *update(PST *t, int l, int r, int pos, int val) {
  if (r - l == 1) {
    return new PST(t->sum + val);
  }
  int m = (l + r) / 2;
  if (pos < m) {   
    PST *lt = update(t->l, l, m, pos, val);
    return new PST(t->sum + val, lt, t->r);
  } else {
    PST *rt = update(t->r, m, r, pos, val);
    return new PST(t->sum + val, t->l, rt);
  }
}

int get_sum(PST *t, int tl, int tr, int l, int r) {
  if (l >= r) return 0;
  if (tl == l && tr == r) return t->sum;
  int tm = (tl + tr) / 2;
  return get_sum(t->l, tl, tm, l, min(r, tm)) +
    get_sum(t->r, tm, tr, max(l, tm), r);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);      
  cin >> n >> k;
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
  }
  version[0] = build(0, MAXN);
  for (int i = 0; i < n; ++i) {
    version[i + 1] = update(version[i], 0, MAXN, i, 1);
    pos[a[i]].push_back(i);
    if ((int)pos[a[i]].size() > k) {
      version[i + 1] = update(version[i + 1], 0, MAXN, *prev(pos[a[i]].end(), k + 1), -1);
    }
  }
  cin >> q;
  int lst = 0;
  for (int i = 0, x, y; i < q; ++i) {
    cin >> x >> y;
    int l = (x + lst) % n;
    int r = (y + lst) % n;
    if (l > r) swap(l, r);
    lst = get_sum(version[r + 1], 0, MAXN, l, MAXN);
    cout << lst << '\n';
  }
  return 0;
}