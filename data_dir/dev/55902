#include <bits/stdc++.h>

typedef long long ll;
using namespace std;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000002;
const ll INFLL = 100000000000000000ll;
const ll MOD = 1000000007;

// ----------------------------------------------------------------------------------------------------------

struct Proc
{
    string name;
    vector<string> params;
};

int N,V;
map<string,string> M;
vector<Proc> Procs;

Proc parse(string s)
{
    int n = SZ(s);
    Proc ret;
    string t;
    int pos = s.find('v');
    pos = s.find(' ', pos);

    bool have_name = false;
    f(i,pos,n-1)
    {

        if(s[i] != ' ' && s[i] != '(') t += s[i], have_name = true;
        else if(have_name)
        {
            pos = i+1;
            break;
        }
    }

    ret.name = t;

    while(true)
    {
        bool have = false, last = false;
        t = "";
        f(i,pos,n-1)
        {
            if(s[i] != '(' && s[i] != ',' && s[i] != ' ' && s[i] != ')') have = true, t += s[i];
            else if(have)
            {
                if(s[i] == ')') last = true;
                pos = i;
                break;
            }
            else if(s[i] == ')') return ret;
        }
        ret.params.pb(t);
        if(last) break;
    }

    return ret;
}

Proc parse2(string s)
{
    int n = SZ(s);
    Proc ret;
    string t;
    int pos = 0;

    bool have_name = false;
    f(i,pos,n-1)
    {

        if(s[i] != ' ' && s[i] != '(') t += s[i], have_name = true;
        else if(have_name)
        {
            pos = i+1;
            break;
        }
    }

    ret.name = t;

    while(true)
    {
        bool have = false, last = false;
        t = "";
        f(i,pos,n-1)
        {
            if(s[i] != '(' && s[i] != ',' && s[i] != ' ' && s[i] != ')') have = true, t += s[i];
            else if(have)
            {
                if(s[i] == ')') last = true;
                pos = i;
                break;
            }
            else if(s[i] == ')') return ret;
        }
        ret.params.pb(t);
        if(last) break;
    }

    return ret;
}

bool match(Proc call, Proc p)
{
    if(call.name != p.name) return false;
    if(SZ(call.params) != SZ(p.params)) return false;
    f(i,0,SZ(call.params)-1)
    {
        string t1 = M[call.params[i]];
        string t2 = p.params[i];
        if(t1 != t2 && t2 != "T") return false;
    }
    return true;
}

int main()
{
    cin >> N;
    string s;
    getline(cin,s);
    f(i,1,N)
    {
        getline(cin,s);
        Procs.pb(parse(s));
    }
    cin >> V;
    f(i,1,V)
    {
        string type, name;
        cin >> type >> name;
        M[name] = type;
    }
    cin >> V;
    getline(cin,s);
    f(v,1,V)
    {
        getline(cin,s);
        Proc call = parse2(s);
        int k = 0;
        for(Proc p : Procs) if(match(call,p)) k++;
        cout << k << "\n";
    }
}
