#include <bits/stdc++.h>
#define endl '\n'
#define debug(X) cout << #X << " = " << X << endl

using namespace std;

const int MN = 53;

int n;
int a[MN];
bool memo[MN][MN][MN][MN], dp[MN][MN][MN][MN];

int h(char c) {
	string suit = "SDHC";
	if (suit.find(c) != string::npos) return suit.find(c);
	string values = "23456789TJQKA";
	return values.find(c);
}

int can(int x, int y) { return (x / 13 == y / 13 || x % 13 == y % 13); }

int go(int i, int x, int y, int z) {
	if (memo[i][x][y][z]) return dp[i][x][y][z];
	memo[i][x][y][z] = 1;
	if (i == 2) return dp[i][x][y][z] = (can(z, y) && can(z, x));
	int op1 = 0, op2 = 0;
	if (can(z, a[i - 3])) op1 = go(i - 1, z, x, y);
	if (can(z, y)) op2 = go(i - 1, a[i - 3], x, z);
	return dp[i][x][y][z] = (op1 || op2);
}

int solve() {
	if (n == 1) return 1;
	if (n == 2) return can(a[1], a[0]);
	return go(n - 1, a[n - 3], a[n - 2], a[n - 1]);
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	#ifdef UTP
	freopen("input.txt", "r", stdin);
	#endif
	cin >> n;
	for (int i = 0; i < n; i++) {
		string card; cin >> card;
		a[i] = 13 * h(card[1]) + h(card[0]);
	}
	cout << (solve() ? "YES" : "NO") << endl;
	return 0;
}