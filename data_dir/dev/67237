/*
ID: Tariqul
PROG: 
LANG: C++
*/

#include <algorithm> 
#include <cctype> 
#include <cmath> 
#include <cstdio> 
#include <cstdlib> 
#include <cstring> 
#include <deque> 
#include <iostream> 
#include <list> 
#include <map> 
#include <numeric> 
#include <queue> 
#include <set> 
#include <sstream> 
#include <stack> 
#include <string> 
#include <vector>

using namespace std; 

#define fo(i,j,n) for(i=j;i<n;++i)
#define Fo(i,j,n) for(i=n-1;i>=j;--i)
#define foo(i,j,v) fo(i,j,sz(v))
#define Foo(i,j,v) Fo(i,j,sz(v))
#define li(v) v.begin(),v.end()
#define sz(v) ((int)v.size())
#define CLR(a,v) memset((a),(v),sizeof(a))
#define inf 1000000001
//typedef long long Long;
typedef __int64 Long;
#define pi (2*acos(0))
#define eps 1e-9

#define two(X) (1<<(X))
#define twoL(X) (((Long)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)

char BUFFER[100000 + 5];
bool readn(int &n)	{ return scanf("%d",&n) == 1; } 
bool readl(Long &n)	{ return scanf("%I64d",&n) == 1; } 
bool readd(double &n){ return scanf("%lf",&n) == 1; } 
bool reads(string &s){ s = ""; int n = scanf("%s",BUFFER); if(n == 1)s = BUFFER; return n == 1; }
bool readln(string &s){ char *valid = gets(BUFFER); if(valid)s = BUFFER; return ((bool)valid); }

const int maxn = 1005;
int A[maxn];

int doit(int cur,int n,int k,bool isPrint)
{
	int i,cnt = 0,d;
	string sign; 
	fo(i,0,n)
	{
		if(cur == A[i]){ cur += k; continue; }
		cnt++; 
		if(A[i] > cur){ sign = "-"; d = A[i] - cur; }
		else if(A[i] < cur){ sign = "+"; d = cur - A[i]; }
		if(isPrint)
		{			
			cout << sign; printf(" %d %d\n",i+1,d);
		}
		cur += k;
	}
	return cnt;
}

int main()
{
	#ifdef localhost
	freopen("D://input.txt","r",stdin);
	//freopen("D://output.txt","w",stdout);
	#endif
	int i,n,k,mi = maxn,cur,x; cin >> n >> k;
	fo(i,0,n)cin >> A[i];
	fo(i,1,maxn)
	{
		cur = doit(i,n,k,false);
		if(cur < mi){ mi = cur; x = i; }
	}
	cout << mi << endl;
	doit(x,n,k,true);
	//printf("\n");
	return 0;
} 