#include<bits/stdc++.h>

using namespace std;
const int MAXN = 1000100;
const int INF = 0x3f3f3f3f;

vector<int> grafo[MAXN];
bool vis[MAXN];
int dist[MAXN];
int pai[MAXN];

int bfs(int x){
	int res = INF;
	dist[x] = 0;
	vis[x] = true;
	
	queue<int> fila;
	fila.push(x);
	
	while(fila.empty() == false){
		int at = fila.front();
		
		bool p = false;
		
		for(int i = 0;i < grafo[at].size();i++){
			int pa = grafo[at][i];
			
			if(pai[at] == pa && p == false){
				p = true;
				continue;
			}
			if(vis[pa] == true){
				//cout << "/ " << pa << " " << at << endl;
				res = min(res,dist[pa] + dist[at] + 1);
				continue;
			}
			vis[pa] = true;
			dist[pa] = dist[at] + 1;
			pai[pa] = at;
			fila.push(pa);
		}
		
		fila.pop();
	}
	
	return res;
}

int main(){
	int n;
	cin >> n;
	
	for(int i = 1;i <= n;i++){
		int x;
		cin >> x;
		
		map<int,int> mapa;
		
		int a = x;
		for(int j = 2;j <= sqrt(x);j++){
			while(a % j == 0){
				a /= j;
				mapa[j] ++;
			}
		}	
		if(a > 0) mapa[a] ++;
		
		vector<int> vec;
		
		for(auto j : mapa){
			if(j.second % 2 == 1) vec.push_back(j.first); 
		}
		
		if(vec.size() == 1) grafo[vec[0]].push_back(1) , grafo[1].push_back(vec[0]);
		else grafo[vec[0]].push_back(vec[1]) , grafo[vec[1]].push_back(vec[0]);
	}
	
	int res = INF;
	for(int i = 1;i <= 1000;i++){
		memset(vis,false,sizeof vis);
		memset(dist,INF,sizeof dist);
		res = min(res,bfs(i));
		//cout << i << " " << res << endl;
		
	}
	
	if(res == INF) cout << -1 << endl;
	else cout << res << endl;
}