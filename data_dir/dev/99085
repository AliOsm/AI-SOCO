/* ****revpro**** */

#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define endl       '\n'
#define pii         pair<ll,ll>
#define vi          vector<ll>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll i=a;i<b;i++)
#define repr(i,a,b) for(ll i=b-1;i>=a;i--)    
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define mii        map<ll,ll>
using namespace std;

#define N  200005
ll valid[N];
vi seg(4*N),lazy(4*N);
void build(ll cur,ll st,ll end)
{
    if(st==end)
    {
        seg[cur]=valid[st];
        return;
    }
    ll mid=(st+end)>>1;
    build((cur<<1),st,mid);
    build((cur<<1)+1,mid+1,end);
    seg[cur]=min(seg[(cur<<1)],seg[(cur<<1)+1]);                   /* 1-change */
}
ll query(ll cur,ll st,ll end,ll l,ll r)
{
    if(st>end||st>r||end<l) return hell;
    if(st>=l&&end<=r) return seg[cur];
    ll mid=(st+end)>>1;
    ll ans1=query((cur<<1),st,mid,l,r);
    ll ans2=query((cur<<1)+1,mid+1,end,l,r);
    return min(ans1,ans2);                                 /* 14-change */
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int TESTS=1;
//    cin>>TESTS;
    while(TESTS--)
    {
        ll n,m,q;
        cin>>n>>m>>q;
        ll p[n],a[m+1];
        ll next[n+1];
        rep(i,0,n)
            cin>>p[i];
        rep(i,0,n)
            next[p[i]]=p[(i+1)%n];
        rep(i,1,m+1) cin>>a[i];
        ll P[m+1][20];
        rep(i,1,m+1)
        rep(j,0,20)  P[i][j]=-1; 
        ll last[n+1];
        rep(i,1,n+1)
            last[i]=hell;
        rep(i,0,m+1) valid[i]=hell;
        repr(i,1,m+1)
        {
            if(last[next[a[i]]]!=hell)
            {
                P[i][0]=last[next[a[i]]];
                rep(j,1,20)
                {
                    if(P[i][j-1]!=-1)
                        P[i][j]=P[P[i][j-1]][j-1];
                }
                ll z=n-1;
                ll p=i;
                repr(j,0,20)
                {
                    if(p==-1) break;
                    if((1<<j)<=z)
                    {
                        z-=(1<<j);
                        p=P[p][j];
                    }
                }
                if(p!=-1)
                    valid[i]=p;
            }
            last[a[i]]=i;
        }
        build(1,1,m);
        rep(i,0,q){
            ll l,r;
            cin>>l>>r;
            if(n==1)
            {
                cout<<1;
                continue;
            }
            if(query(1,1,m,l,r)<=r)
                cout<<1;
            else cout<<0;
        }
    }   
    return 0;
}