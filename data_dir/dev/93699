/*<<head>> {{{*/
#include <bits/stdc++.h>
using namespace std;
typedef double db;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
#define dd(x) cout << #x << " = " << x << ", "
#define de(x) cout << #x << " = " << x << endl
#define rep(i,a,b) for(int i=(a);i<(b);++i)
#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define fi first
#define se second
//INF = 1 061 109 567 ; INF + INF = 2 122 219 134 ;
//LINF = 4 557 430 888 798 830 399 ; LINF + LINF = 9 114 861 777 597 660 798 ;
const int INF = 0x3f3f3f3f;          // -INF: 0xc0   abs(-INF) = INF + 1
const ll LINF = 0x3f3f3f3f3f3f3f3f;
/*}}}*/                              // zr, zm
const int MOD = 1e9+7;               // inv2 = 500000004 (mod 1e9+7)
const int N = 1e5+7;                    // (1 << [17, 18, 20, 21] ) > [1e5, 2e5, 1e6, 2e6]

// ------- 变量 ------- //

char s[N];

// ------- 函数 ------- //

#define ls rt << 1
#define rs rt << 1 | 1
#define lson l, m, ls
#define rson m + 1, r, rs
int sz[N<<2], t[N<<2][26];
inline ll op(ll a, ll b) { return a + b; } // ?
inline void Add(int rt, char ch) {
    rep(i, 0, 26) t[rt][i] = 0;
    t[rt][ch-'a'] = 1;
}
inline void build(int l, int r, int rt) {
    sz[rt] = r - l + 1;
    if (l == r) { rep(i, 0, 26) t[rt][i] = 0; t[rt][s[l]-'a'] = 1; return; }
    int m = (l + r) >> 1;
    build(lson); build(rson);
    rep(i, 0, 26) t[rt][i] = t[ls][i] | t[rs][i];
}
inline void upd(int pos, char ch, int l, int r, int rt) {
    if (l == r) { Add(rt, ch); return ; }
    int m = (l + r) >> 1;
    if (pos <= m) upd(pos, ch, lson);
    if (m < pos) upd(pos, ch, rson);
    rep(i, 0, 26) t[rt][i] = t[ls][i] | t[rs][i];
}
inline int qry(int L, int R, int l, int r, int rt) {
    if (L <= l && r <= R) {
        int res = 0;
        rep(i, 0, 26) res |= t[rt][i] << i;
        return res;
    }
    int m = (l + r) >> 1;
    int res = 0;
    if (L <= m) res |= qry(L, R, lson);
    if (m < R) res |= qry(L, R, rson);
    return res;
}

void Init() {
}

int Solve() {
    int n = strlen(s + 1);
    build(1, n, 1);
    int q; scanf("%d", &q);
    while (q--) {
        int op; scanf("%d", &op);
        if (op == 1) {
            int pos; char c[5];
            scanf("%d%s", &pos, c);
            upd(pos, c[0], 1, n, 1);
        } else {
            int l, r; scanf("%d%d", &l, &r);
            int ans = qry(l, r, 1, n, 1);
            printf("%d\n", __builtin_popcount(ans));
        }
    }
    return 0;
}

// ------- main ------- //

int main ()
{
    //ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    //freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);

    //Pre();
    //int t; scanf("%d", &t); while (t--) {
    while (~scanf("%s", s + 1)) {
    //while(fgets(s, N, stdin)) {
        //static int kase = 0; printf("Case %d: ", ++kase);
        Init();
        Solve();
    }
    return 0;
}