#include<bits/stdc++.h>

using namespace std;

//#define double long double

typedef pair<int,int> ii;
typedef pair<int,long long> il;
typedef pair<long long,long long> ll;
typedef pair<ll,int> lli;
typedef pair<long long,int> li;
typedef pair<double,double> dd;
typedef pair<ii,int> iii;
typedef pair<double,int> di;
typedef pair<int,ii> iii2;
typedef pair<ii,ii> iiii;
typedef pair<ii,long long> iil;
long long mod = 1000000007LL;
long long large = 2000000000000000000LL;


vector<vector<int> > adj;

vector<vector<int> > chains; //record the chain
vector<int> pa;// record the parent node
vector<ii> pos;//pos[i].first is the chain that node i belong to, pos[i].second is the position of node i in the chain
vector<int> dp;//to calculate the size of subtree
vector<int> dep;
int f(int u,int parent){
	int ans = 0;
	for(int j=0;j<(int)adj[u].size();j++){
		int v= adj[u][j];
		if(v!=parent){
			ans+=f(v,u);
		}
	}
	return dp[u]=ans+1;
}

void hld(int u,int c,int parent,int lvl){
    vector<ii> temp;
    dep[u] = lvl;
    for(int j=0;j<(int)adj[u].size();j++){
        int v=adj[u][j];
        if(v!=parent){
        	temp.push_back(ii(dp[v],v)); //dp[u] record the size of subtree (by dfs)
        	pa[v]=u;
        }
    }
    chains[c].push_back(u);
    pos[u]=ii(c,(int)chains[c].size()-1);

    if(temp.size()>0){
        sort(temp.begin(),temp.end());
        ii v = temp.back();
        hld(v.second,c,u,lvl+1);
        for(int i=0;i<(int)temp.size()-1;i++){
            chains.push_back(vector<int>(0,0));
            int nc = (int)chains.size()-1;
            hld(temp[i].second,nc,u,lvl+1);
        }
    }
}

int query(int ty,int u){
	u++;
	if(ty==0) cout<<"d ";
	if(ty==1) cout<<"s ";
	cout<<u<<endl;
	fflush(stdout);

	int x;
	cin>>x;
	return x;
}

int main(){


	int n;
	cin>>n;

	adj.assign(n,vector<int>());
	for(int i=0;i<n-1;i++){

		int x,y;
		scanf("%d%d",&x,&y);
		x--;y--;
		adj[x].push_back(y);
		adj[y].push_back(x);
	}

	chains.push_back(vector<int>());
	pa.assign(n,-1);
	dp.assign(n,0);
	pos.assign(n,ii(-1,-1));
	dep.assign(n,0);

	f(0,-1);
	hld(0,0,-1,0);

	int rt = 0;

	int dx = query(0,0);

	while(true){


		int v = chains[pos[rt].first].back();

		int dv = dep[v];
		int dvx = query(0,v);
		int dy = dx+dv-dvx;
		dy/=2;

		int y = chains[pos[rt].first][dy-dep[rt]];

		if(dy==dx){
			cout<<"! "<<y+1<<endl;
			return 0;
		}

		rt = query(1,y)-1;

	}






	return 0;
}
