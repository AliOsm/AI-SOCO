#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair<int, int> pp;
double PI=acos(-1);
int const N = 1e6 + 10,M=5e6+10, oo = 1e9;
const int mod = oo+7;
const ll  OO = 1e18;

struct node{
    int nxt[2],prf;
    node(){
        nxt[0]=nxt[1]=-1;
        prf=0;
    }
};
int n,k,c,aa[N];
vector<node> trie;
void insert(int a){
    int cur=0;
    for(int i=30;i>-1;i--){
        int b=(a>>i)&1;
        if(trie[cur].nxt[b]==-1){
            trie[cur].nxt[b]=trie.size();
            trie.push_back(node());
        }
        cur=trie[cur].nxt[b];
        trie[cur].prf++;
    }
}
int query(int c){
    int cur=0,res=0;
    for(int i=30;i>-1;i--){
        int b1=(c>>i)&1,b2=(k>>i)&1;
        if(b2){
            if(b1&&trie[cur].nxt[0]!=-1)cur=trie[cur].nxt[0];
            else if(!b1&&trie[cur].nxt[1]!=-1)cur=trie[cur].nxt[1];
            else return res;
        }else{
            if(b1){
                if(trie[cur].nxt[0]!=-1)res+=trie[trie[cur].nxt[0]].prf;
                if(trie[cur].nxt[1]!=-1)cur=trie[cur].nxt[1];
                else return res;
            }else {
                if(trie[cur].nxt[1]!=-1)res+=trie[trie[cur].nxt[1]].prf;
                if(trie[cur].nxt[0]!=-1)cur=trie[cur].nxt[0];
                else return res;
            }
        }
    }
    return res+trie[cur].prf;
}
void del(int a){
    int cur=0;
    for(int i=30;i>-1;i--){
        int b=(a>>i)&1;
        int sv=cur;
        cur=trie[cur].nxt[b];
        trie[cur].prf--;
        if(trie[cur].prf==0)trie[sv].nxt[b]=-1;
    }
}
int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    trie.push_back(node());
    cin>>n>>k;
    for(int i=0;i<n;i++){
        cin>>aa[i];
        c^=aa[i];
        insert(c);
    }
    c=0;
    ll an=0;
    for(int i=0;i<n;i++){
        an+=query(c);
        c^=aa[i];
        del(c);
    }
    cout<<an<<endl;
    return 0;
}


