#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <string>
#include <queue>
#include <stack>
#include <cstring>
#include <iterator>
#include <cmath>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <chrono>
#include <assert.h>

#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

using namespace std;
typedef long long mt;

template<typename T>
constexpr mt infValue = std::is_same<T, int>::value ? 2000100007 : 8600000000000000007ll;
template<typename T>
constexpr mt maxValue = std::is_same<T, int>::value ? 1000000007 : 1000000000000000001ll;

#define rep(a, b, i) for(register mt i = a; i < b; ++i)
#define repe(a, b, i) for(register mt i = a; i <= (b); ++i)
#define repd(a, b, i) for(register mt i = a; i > b; --i)
#define repde(a, b, i) for(register mt i = a; i >= b; --i)

const mt INF = infValue<mt>;
const long long MOD = 998244353ll;// 1000000007ll;//1000000007ll;
const double EPS = 1e-6;
const mt MAX = maxValue<mt>;
using pr = pair<mt, mt>;

#define N 201050
#define K 8
#define P 3
#define M (15000111)


mt t[N];

void inc(mt r) {
	for (; r < N; r |= r + 1)
		++t[r];
}

mt get(mt r) {
	mt sum = 0;
	for (; r >= 0; r = (r&r + 1) - 1)
		sum += t[r];
	return sum;
}

mt get(mt l, mt r) {
	return get(r) - get(l - 1);
}

mt n, sum, a[N], answ;
mt p[N], pp[N];
int main(void)
{
#ifdef _DEBUG
	freopen("in.txt", "r", stdin);
#endif
	scanf("%lld %lld", &n, &sum);
	rep(0, n, i)
		scanf("%lld", a + i), p[i] = a[i];
	pp[0] = a[0];
	rep(1, n, i)
		p[i] += p[i - 1], pp[i] = p[i];
	sort(p, p + n);
	repde(n - 1, 0, i) {
		mt j = lower_bound(p, p + n, pp[i]) - p;
		inc(j);
		mt x = (i ? pp[i - 1]:0) + sum;
		mt r = lower_bound(p, p + n, x) - p;
		answ += get(0, r - 1);
	}
	printf("%lld\n", answ);

	return 0;
}