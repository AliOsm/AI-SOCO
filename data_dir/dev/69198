#include <bits/stdc++.h>
#define Tree int h,int l,int r,int L,int R
#define left 2*h,l,(l+r)/2,L,R
#define right 2*h+1,(l+r)/2+1,r,L,R
#define F first
#define S second
#define Pb push_back
#define Infr 200005
using namespace std;
int n,x[200005],y[200005],X,Y,Ans1,Ans2,Ret,U;
char c[200005];
char s[100];
int G[200005],H[200005],GG;
pair < int , int > P[200005],Q[200005];
set < int > K[200005];
int M[6000005];
void Update(Tree)
{
	if (L>r || l>L) return ;
	if (l==r && L==l)
	{
		M[h]=R;		
		return ;
	}
	
	Update(left);
	Update(right);
	
	M[h]=max(M[2*h],M[2*h+1]);
}
int Get(Tree,int Upp)
{
	if (L>r || l>R) return Infr;

	if (l==r) 
	{
		if (M[h]>Upp) return l;
				 else return Infr;
	}
	
	int ret=Infr;
	
	if (M[2*h]>Upp) ret=Get(left,Upp);
	if (M[2*h+1]>Upp && ret==Infr) ret=Get(right,Upp);
	
	return ret;
}
main ()
{
	cin>>n;
	
	for (int i=1; i<=n; i++)
	{
		scanf("%s",s);
		c[i]=s[0];
		scanf("%d%d",&x[i],&y[i]);
		
		P[i].F=x[i];
		P[i].S=i;
		Q[i].F=y[i];
		Q[i].S=i;
	}
	
	sort(P+1,P+n+1);
	sort(Q+1,Q+n+1);
	
	P[0].F=-1;
	Q[0].F=-1;
	
	for (int i=1; i<=n; i++)
	{
		if (P[i].F!=P[i-1].F) X++;
		if (Q[i].F!=Q[i-1].F) Y++;
				
		G[X]=P[i].F;
		x[P[i].S]=X;
		H[Y]=Q[i].F;
		y[Q[i].S]=Y;
 	}
 	
 	for (int i=1; i<=n; i++)
  		if (c[i]=='a') 
		{
			K[x[i]].insert(y[i]);
			U=*K[x[i]].rbegin();
			Update(1,1,X,x[i],U);	
		}
			else
		if (c[i]=='r') 
		{ 
			K[x[i]].erase(y[i]);
			if (K[x[i]].size()==0) U=-1;
					       	  else U=*K[x[i]].rbegin();
					           
			Update(1,1,X,x[i],U);	
		}
			else
		if (c[i]=='f')
		{
			Ans1=Get(1,1,X,x[i]+1,X,y[i]);
			
			if (Ans1==Infr) 
			{
				printf("%d\n",-1);
				continue;
			}
			
			Ans2=*K[Ans1].lower_bound(y[i]+1);

			printf("%d %d\n",G[Ans1],H[Ans2]);
		}
}