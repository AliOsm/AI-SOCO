#include <algorithm>
#include <iostream>
#include <iomanip>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdlib>
#include <cstdio>
#include <bitset>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <set>

#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

typedef long long ll;
typedef pair<int, int> ii;

const int inf = 1e9 + 143;
const ll llonginf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 2e5 + 100;

const int HALF = int(5e8);

int mod;

inline int add(int x,int y){
    return (x + y >= mod)? x + y - mod : x + y;
}

inline int mul(int x,int y){
    return ll(x) * y % mod;
}

int hs[26][N];
int ht[26];
int power[N];
int last[26];

char s[N], t[N];

bool isprime(int x){
    if(x < 2) return false;
    for(int i = 2; i * i <= x; i++)
        if(x % i == 0)
            return false;
    return true;
}

int get_hash(int *h,int l,int r){
    return mul(add(h[r], mod - h[l - 1]), power[N - l]);
}

bool good(int l,int r,int a,int b){
    if(get_hash(hs[a], l, r) != ht[b])
        return false;
    if(get_hash(hs[b], l, r) != ht[a])
        return false;
    return true;
}

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    srand(time(0));
    mod = (((rand() << 15) ^ rand()) % HALF + HALF) % HALF + HALF;
    while(!isprime(mod))
        ++mod;

    power[0] = 1;
    for(int i = 1; i < N; i++)
        power[i] = mul(power[i - 1], 37);

    int n = read();
    int m = read();

    scanf(" %s %s", s + 1, t + 1);

    for(int c = 0; c < 26; c++){
        for(int i = 1; i <= n; i++){
            int v = ((s[i] - 'a') == c)? 1 : 2;
            hs[c][i] = add(hs[c][i - 1], mul(power[i], v));
        }
        for(int i = 1; i <= m; i++){
            int v = ((t[i] - 'a') == c)? 1 : 2;
            ht[c] = add(ht[c], mul(power[i], v));
        }
        ht[c] = mul(ht[c], power[N - 1]);
    }

    for(int i = 0; i < 26; i++)
        last[i] = n + 1;
    vector<int> ans;
    for(int i = n; i > 0; i--){
        last[s[i] - 'a'] = i;
        if(i + m - 1 <= n){
            int l = i;
            int r = i + m - 1;
            int sh = i - 1;
            bool ok = true;
            for(int c1 = 0; c1 < 26; c1++){
                int x = last[c1];
                if(x <= r){
                    int c2 = t[x - sh] - 'a';
                    if(!good(l, r, c1, c2)){
                        eprintf("l = %d, x = %d, c1 = %d, c2 = %d\n", l, x, c1, c2);
                        ok = false;
                        break;
                    }
                }
            }
            if(ok){
                ans.push_back(l);
            }
        }
    }

    reverse(all(ans));
    printf("%d\n", ans.size());
    foreach(it, ans)
        printf("%d ", *it);

    return 0;
}
