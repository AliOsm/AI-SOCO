#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <algorithm>

using namespace std;

struct CutPoint
{
	int left;
	int right;
	
	int cost;
};

std::vector<CutPoint> cuts;

int n, b;
int a[110];
int odd[110];
int even[110];

bool compare(const CutPoint &a, const CutPoint &b)
{
	return a.cost < b.cost;
}



int main()
{
	scanf("%d%d", &n, &b);
	
	for (int i = 1 ; i <= n ; i++)
		scanf("%d", &(a[i]));
	
	memset(odd, 0, sizeof(odd));
	memset(even, 0, sizeof(even));
		
	for (int i = 1 ; i <= n ; i++)
	{
		odd[i] = odd[i - 1];
		even[i] = even[i - 1];
		if (a[i] % 2 == 0)
			even[i]++;
		else
			odd[i]++;
	}
	
	CutPoint newCut;
	cuts.clear();
	for (int i = 2 ; i < n ; i++)	//�˵�������û����� 
	{
		if (odd[i] == even[i])
		{
			newCut.left = i;
			newCut.right = i + 1;
			if (a[i] > a[i + 1])
				newCut.cost = a[i] - a[i + 1];
			else
				newCut.cost = a[i + 1] - a[i];
				
			cuts.push_back(newCut);
		}
	}	
	
//	if (cuts.size() == 0)
//	{
//		printf("0\n");
//		return 0;
//	}
	
	
	sort(cuts.begin(), cuts.end(), compare);
	
	int curCost = 0;
	int count = 0;
	int p = 0;
	
	while ((p < cuts.size()) && ((curCost + cuts[p].cost)<= b))
	{
		curCost = curCost + cuts[p].cost;
		p++;
		count++;
	}
	
	printf("%d\n", count);
	
	
	
	return 0;
}
