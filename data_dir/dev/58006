//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second

template<typename T>
void read(T& val)
{
    std::string tmp = typeid(val).name();
    if (strcmp(tmp.c_str(), "i") == 0)
        scanf("%d", &val);
    else if (strcmp(tmp.c_str(), "x") == 0)
        scanf("%I64d", &val);
    else if (strcmp(tmp.c_str(), "d") == 0)
        scanf("%lf", &val);
    else if (tmp.length() > 2 && tmp.back() == 'c')
        scanf("%s", val);
    else if (strcmp(tmp.c_str(), "c") == 0)
        scanf("%c", &val);
}

template<typename T, typename... Targs>
void read(T& val, Targs&... Fargs)
{
    read(val);
    read(Fargs...);
}

template<typename T>
void print(T val)
{
    std::string tmp = typeid(val).name();
    if (strcmp(tmp.c_str(), "i") == 0)
        printf("%d", val);
    else if (strcmp(tmp.c_str(), "x") == 0)
        printf("%I64d", val);
    else if (strcmp(tmp.c_str(), "d") == 0)
        printf("%.15f", val);
    else if (strcmp(tmp.c_str(), "c") == 0)
        printf("%c", val);
    else if (tmp.length() > 2 && tmp.back() == 'c')
        printf("%s", val);
}

template<typename T, typename... Targs>
void print(T val, Targs... Fargs)
{
    print(val);
    print(Fargs...);
}

typedef long long ll;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e7 + 5;
const double eps = 1e-9;
using namespace std;
int a[MAXN];
bool dp[MAXN], nx[MAXN];
int ind[25][25];

int main()
{
    int n;
    read(n);
    for (int i= 0; i < n; i++)
        read(a[i]);
    dp[1] = 1;
    memset(ind, -1, sizeof ind);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < i; j++)
            for (int k = 0; k < i; k++)
                if (a[i] == a[j] + a[k])
                    ind[i][j] = k;
    for (int i = 1; i < n; i++)
    {
        fill(nx, nx + (1 << i), 0);
        for (int j = 0; j < (1 << i); j++)
            if (dp[j])
            {
                bool fl = 0;
                for (int k = 0; k< i && !fl; k++)
                    if (((j >> k) & 1) != 0 && ind[i][k] != -1 && ((j >> ind[i][k]) & 1) != 0)
                        fl = 1;
                if (fl)
                {
                    nx[j + (1 << i)] = 1;
                    for (int k = 0; k < i; k++)
                        if (((j >> k) & 1) != 0)
                            nx[j + (1 << i) - (1 << k)] = 1;
                }
            }
        swap(dp, nx);
    }
    int ans = INF;
    for (int i = 0; i < (1 << n); i++)
        if (dp[i])
            ans = min(ans, __builtin_popcount(i));
    if (ans == INF) ans = -1;
    print(ans, "\n");
    return 0;
}
