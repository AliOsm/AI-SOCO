#include <bits/stdc++.h>

using namespace std;
typedef long long ll;


int n;
int a[100100];
int tree[1001000][2];
int val[1001000][2];

void build(int idx, int l, int r, bool k)
{
    if (l == r)
    {
        tree[idx][k] = a[l];
        val[idx][k] = 0;
        return;
    }
    int mid = (l+r)>> 1;
    build(idx*2+1, l, mid, k);
    build(idx*2+2, mid+1, r, k);
    tree[idx][k] = (tree[idx*2+1][k]+tree[idx*2+2][k]) % 10;
    val[idx][k] = (tree[idx*2+1][k]+tree[idx*2+2][k]) > 9;
    val[idx][k] += val[idx*2+1][k] + val[idx*2+2][k];
}
pair <int, int> qu(int idx, int l, int r, int la, int rb, bool k)
{
    if (l > rb || r < la) return {0, 0};
    if (l >= la && r <= rb)
    {
        return {val[idx][k], tree[idx][k]};
    }
    int mid = (l+r) >> 1;
    auto it1 = qu(idx*2+1, l , mid, la, rb, k);
    auto it2 = qu(idx*2+2, mid+1, r, la, rb, k);
    return {it1.first+it2.first+(it1.second+it2.second)/10, (it1.second+it2.second)%10};
}
int main()
{
    scanf("%d", &n);
    for (int i = 0; i < n; ++i)
    {
        scanf("%d", &a[i]);
    }
    if (n == 1)
    {
        int q;
        scanf("%d", &q);
        while (q--)
        {
            puts("0");
        }
        return 0;
    }
    build(0, 0, n-1, 0);
    for (int i = 0; i < n-1; ++i)
        a[i] = a[i+1];
    build(0, 0, n-2,1);
    int q;
    scanf("%d", &q);
    int l, r;
    while (q--)
    {
        scanf("%d%d", &l, &r);
        --l; --r;
        printf("%d\n", qu(0, 0, n-1-(l&1), l - (l&1), r - (l&1), l&1).first);
    }

    return 0;
}
