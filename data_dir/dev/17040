#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <sstream>
#include <cassert>
#include <queue>
#include <bitset>
#include <ctime>
#include <random>
#include <chrono>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define db(v) cerr << #v << " = " << v << endl
#define pb push_back
#define sz(x) ((int)x.size())
#define fst first
#define snd second
typedef long long ll;
typedef pair<int, int> ii;
const int MAXBM = 2050;
const int DIG = 80;
const int B = 12;

int q;
ll dp[B][MAXBM][DIG];

ll solve(int b, ll n){
  if(n == 0) return 0;
  int D[DIG]; memset(D, 0, sizeof(D));
  int d = 0;
  while(n){
    D[d++] = n%b;
    n /= b;
  }

  ll ans = 0;
  forr(st, 1, d){
    ans += dp[b][0][st] - dp[b][1][st-1];
  }
  int bm = 0;
  for(int i = d-1; i >= 0; i--){
    for(int j = 0; j < D[i]; j++){
      if(i == d-1 && j == 0) continue;
      ans += dp[b][bm^(1<<j)][i];
    }
    
    bm ^= (1 << D[i]);
  }
  
  ans += dp[b][bm][0];
  return ans;
}

int main(){
  forr(b, 2, 11){
    dp[b][0][0] = 1;
    for(int rem = 1; rem < DIG; rem++){
      forn(bm, 1 << b){
        ll &ret = dp[b][bm][rem];
        forn(j, b){
          ret += dp[b][bm^(1<<j)][rem-1];
        }
      }
    }
  }
  
  scanf("%d", &q);
  while(q--){
    int b; ll l, r;
    scanf("%d %lld %lld", &b, &l, &r);
    --l;
    printf("%lld\n", solve(b, r) - solve(b, l));
  }
  return 0;
}
