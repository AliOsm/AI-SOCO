#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327
#endif // M_PI
#define endl "\n"
#define S struct
#define X first
#define Y second
#define V vector
#ifndef __linux__
#define LLD "%I64d"
#else
#define LLD "%ll""d"
#endif
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
using namespace std;
typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
void sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); }
S Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;
S FAIL { FAIL () { cout << "CHANGE!!!" << endl;}};

inline int sign(LL x)
{
    return x > 0 ? 1 : x == 0 ? 0 : -1;
}

void recalc(multiset <int> &best, set <int> &s, int pos, vector <LL> &a, int add)
{
    pos += 5;
    if (sign(a[pos]) == sign(a[pos] + add)) {
        a[pos] += add;
        return;
    }
    auto it0 = s.lower_bound(pos);
    auto start = prev(it0, 4);
    auto end = next(it0, 4);
    for (auto it = start, it2 = next(it), it3 = next(it2); it3 != end; ++it, ++it2, ++it3) {
        if (a[*it] > 0 && a[*it2] < 0) {
            best.erase(best.find(*it3 - *it));
        }
    }
    for (auto it = start, it2 = next(it); it2 != end; ++it, ++it2) {
        if (a[*it] != 0) {
            best.erase(best.find(*it2 - *it));
        }
    }
    a[pos] += add;
    FOR (i, pos, pos + 2) {
        if (i == 0 || sign(a[i]) * sign(a[i - 1]) != 1) {
            s.insert(i);
        } else {
            s.erase(i);
        }
    }
    for (auto it = start, it2 = next(it), it3 = next(it2); it3 != end; ++it, ++it2, ++it3) {
        if (a[*it] > 0 && a[*it2] < 0) {
            best.insert(*it3 - *it);
        }
    }
    for (auto it = start, it2 = next(it); it2 != end; ++it, ++it2) {
        if (a[*it] != 0) {
            best.insert(*it2 - *it);
        }
    }
}

int main()
{
    int n;
    cin >> n;
    vector <LL> a(n);
    GET(a, n);
    FOR (i, 0, n - 1) {
        a[i] = a[i + 1] - a[i];
    }
    a.pop_back();
    FOR (i, 0, 5) {
        a.insert(a.begin(), 0);
    }
    FOR (i, 0, 5) {
        a.push_back(0);
    }
    int m;
    cin >> m;
    set <int> start;
    FOR (i, 0, n - 1 + 2 * 5) {
        if (i == 0 || sign(a[i]) * sign(a[i - 1]) != 1) {
            start.insert(i);
        }
    }
    multiset <int> best;
    for (auto it = start.begin(), it2 = next(it), it3 = next(it2); it3 != start.end(); ++it, ++it2, ++it3) {
        if (a[*it] > 0 && a[*it2] < 0) {
            best.insert(*it3 - *it);
        }
    }
    for (auto it = start.begin(), it2 = next(it); it2 != start.end(); ++it, ++it2) {
        if (a[*it] != 0) {
            best.insert(*it2 - *it);
        }
    }
    vector <int> res(m);
    FOR (j, 0, m) {
        int x, y, d;
        cin >> x >> y >> d;
        x -= 2;
        --y;
        if (0 <= x && x < n - 1) {
            recalc(best, start, x, a, d);
        }
        if (0 <= y && y < n - 1) {
            recalc(best, start, y, a, -d);
        }
        res[j] = best.size() ? *best.rbegin() + 1 : 1;
    }
    for (auto elem: res) {
        cout << elem << endl;
    }
    return 0;
}

