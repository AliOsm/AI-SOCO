/*
.....            
.        .       *
.....   . .      .
    .  .....     .
..... .     .    .
*/
#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native")
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <stdio.h>
#include <cstdio>
#include <math.h>
#include <cmath>
#include <string>
#include <cstring>
#include <queue>
#include <deque>
#include <random>
#include <iomanip>
#include <bitset>
   
using namespace std;
   
template<typename T> void uin(T &a, T b) {
    if (b < a) {
        a = b;
    }
}
   
template<typename T> void uax(T &a, T b) {
    if (b > a) {
        a = b;
    }
}


#define left left228
#define right right228

const int maxn = 5005;

int n, m;
int p[maxn], c[maxn], leave[maxn], mt[maxn];
vector<int> g[maxn];
bool used[maxn];

bool kuhn(int v) {
    if (used[v]) return 0;
    used[v] = 1;
    for (int to : g[v]) {
        if (mt[to] == -1) {
            mt[to] = v;
            return 1;
        }
    }
    for (int to : g[v]) {
        if (kuhn(mt[to])) {
            mt[to] = v;
            return 1;
        }
    }
    return 0;
}

bool left[maxn], con[maxn][maxn];

int last = -1;

int go() {
    memset(used, 0, sizeof(used));
    while (last + 1 <= n && kuhn(last + 1)) ++last, memset(used, 0, sizeof(used));
    return last;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> m;
    for (int i = 1; i <= n; ++i) {
        cin >> p[i];
    }
    for (int i = 1; i <= n; ++i) {
        cin >> c[i];
    }
    int d;
    cin >> d;
    for (int i = 0; i < d; ++i) {
        cin >> leave[i];
        left[leave[i]] = 1;
    }
    for (int i = 1; i <= m; ++i) {
        mt[i] = -1;
    }
    for (int i = 1; i <= n; ++i) {
        if (!left[i] && !con[p[i]][c[i]]) {
            g[p[i]].push_back(c[i]);
            con[p[i]][c[i]] = 1;
        }
    }
    last = -1;
    int res = go();
    vector<int> ans;
    ans.push_back(res);
    for (int i = d - 1; i > 0; --i) {
        if (!con[p[leave[i]]][c[leave[i]]]) {
            con[p[leave[i]]][c[leave[i]]] = 1;
            g[p[leave[i]]].push_back(c[leave[i]]);
            
        }
        int kek = go();
        ans.push_back(kek);
    }
    reverse(ans.begin(), ans.end());
    for (int i = 0; i < (int)ans.size(); ++i) {
        cout << ans[i] + 1 << '\n';
    }
    return 0;
}

  
  