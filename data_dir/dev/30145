//	“Truth can only be found in one place: the code.”   //
#include<bits/stdc++.h>
using namespace std;
#define ll 				long long
#define lli 			long long int
#define ld 				long double
#define pb 				push_back
#define mp 				make_pair
#define F 				first
#define S 				second
#define endl 			'\n'
#define all(x) 			x.begin(),x.end()
#define loop(i,q,n) 	for(int i=q;i<n;i++)
#define dloop(i,a,b) 	for(int i=a;i>=b;i--)
#define speed 			ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL)
#define see(x) 			cout<<(#x)<<" is "<<(x)<<en
#define see2(x,y) 		cout<<(#x)<<" "<<(#y)<<" are "<<(x)<<" "<<(y)<<en
const ld PI 			=3.14159265358979323;
const ll mod 			=1e9+7;
typedef pair<int, int>	pii;
typedef vector<int>		vi;
typedef vector<pii>		vpii;
const int N				=1e5+5;
//********************************************************************************************************************
vi g[105];
vi t[105];
int p[105]={0};
bool vis[105];
map<pii,int>m;
int ans=0;
int x;
void dfs(int src)
{
	vis[src]=true;
	if(g[src].size()==1)
	{
		if(g[src][0]==x)return;
		if(g[src][0]!=x&&t[src][0]==x&&src!=g[x][0])
		{
			ans+=m[{x,src}];
			return;
		}
		if(!vis[g[src][0]])dfs(g[src][0]);
		else
		{
			ans+=m[{t[src][0],src}];
			dfs(t[src][0]);
		}
	}
	if(g[src].size()==0)
	{
		for(int i:t[src])
		{
			if(i==x&&src!=g[x][0])
			{
				ans+=m[{x,src}];
				return;
			}
		}
		for(int i:t[src])
		{
			if(!vis[i])
			{
				vis[i]=true;
				ans+=m[{i,src}];
				dfs(i);
			}
		}
	}
	if(g[src].size()==2)
	{
		if(src==x)
		{
			dfs(g[src][0]);
		}
		else
		{
			for(int i:g[src])
			{
				if(i==x)return;
			}
			for(int i:g[src])
			{
				if(!vis[i])dfs(i);		
			}
		}
	}
}
int main()
{
	int n,s=0;
	cin>>n;
	loop(i,0,n)
	{
		int a,b,c;
		cin>>a>>b>>c;
		g[a].pb(b);
		t[b].pb(a);
		m[{a,b}]=c;
		s+=c;
		x=a;
	}
	dfs(x);
	cout<<min(ans,s-ans)<<endl;
}