#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define Fit(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define inf 1000000005
#define all(a) (a).begin(), (a).end()
#define ms(a,x) memset(a, x, sizeof(a))
#define mod 1000000007
#define sz(a) ((int)(a).size())

template<class T> int getbit(T s, int i) { return (s >> i) & 1; }
template<class T> T onbit(T s, int i) { return s | (T(1) << i); }
template<class T> T offbit(T s, int i) { return s & (~(T(1) << i)); }
template<class T> int cntbit(T s) { return __builtin_popcount(s);}

#define Rep(i,n) for(int i = 0; i < (n); ++i)
#define Repd(i,n) for(int i = (n)-1; i >= 0; --i)
#define For(i,a,b) for(int i = (a); i <= (b); ++i)
#define Ford(i,a,b) for(int i = (a); i >= (b); --i)

typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
#define eps 1e-9
typedef pair<int, int> II;
template<class T> T gcd(T a, T b){ T r; while (b != 0) { r = a % b; a = b; b = r; } return a;}
template<class T> T lcm(T a, T b) { return a / gcd(a, b) * b; }

#define maxn 100005
#define MAXA 20
#define MAXV 200005

int root, jump[MAXV], next[MAXV], last[MAXV], adj[MAXV], cost[MAXV], isRoot[MAXV], E = 0;
int depth[MAXV], ancestor[MAXA][MAXV], deep[MAXA][MAXV], give[MAXV], d[MAXV];

void addEdge(int u, int v, int c) {
    adj[E] = v; next[E] = last[u]; cost[E] = c; last[u] = E++;
}

void dfs(int u) {
    for (int e = last[u], v; e != -1; e = next[e]) {
        v = adj[e];
        ancestor[0][v] = u;
        deep[0][v] = cost[e];
        depth[v] = depth[u] + 1;
        for (int i = 1; i <= jump[depth[v]]; ++i) {
            ancestor[i][v] = ancestor[i - 1][ancestor[i - 1][v]];
            deep[i][v] = max(deep[i - 1][v], deep[i - 1][ancestor[i - 1][v]]);
        }
        dfs(v);
    }
}

int lca(int u, int v) {
    int RR = 0;
    while (depth[u] != depth[v]) {
        if (depth[u] > depth[v]) swap(u, v);
        int i = jump[depth[v] - depth[u]];
        RR = max(RR, deep[i][v]);
        v = ancestor[i][v];
    }
    if (u == v) return RR;
    else return inf;
}

int n, m;
vector<pair<int, int> > P;

int main(){

//  freopen("in.txt", "r", stdin);
//    ios_base::sync_with_stdio(false);
//    cin.tie(NULL);
    scanf("%d %d", &n, &m);
    jump[0] = -1;
    for (int i = 1; i <= n + 1; ++i) jump[i] = jump[i >> 1] + 1;
    memset(last, -1, sizeof(last));
    E = 0;
    ms(isRoot, 1);
    int t, x, y;
    int number_package = 0;
    for(int i = 1; i <= m; i++){
        scanf("%d", &t);
        if(t == 1){
            scanf("%d %d", &x, &y);
            isRoot[x] = 0;
            addEdge(y, x, i);
        }
        if(t == 2){
            scanf("%d", &x);
            number_package++;
            give[number_package] = x;
            d[number_package] = i;
        }
        if(t == 3){
            scanf("%d %d", &x, &y);
            P.pb(mp(x, y));
        }
    }

    for(int i = 1; i <= n; i++) if(isRoot[i]) addEdge(0, i, m + 1);
    depth[0] = 0;
    dfs(0);

    Rep(i, sz(P)){
        x = P[i].fi; y = P[i].se;
        int u = give[y], v = d[y];
        int RR = lca(u, x);
        if(RR <= v && depth[u] >= depth[x]){
            printf("YES\n");
        } else printf("NO\n");
    }

    return 0;
}
