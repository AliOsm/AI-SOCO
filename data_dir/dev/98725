#include <bits/stdc++.h>
using namespace std;
const int Nmax = 2e5;
int n, m, a[Nmax+1], b[Nmax+1], res = -Nmax*3, res1, res2, kq;

int init();
int solve();
int searchIT(int x[], int l, int r, int k);
int xuli(int x);

int main(){
  init();
  solve();
}

int init(){
  scanf("%d", &n);
  for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
  scanf("%d", &m);
  for (int i = 1; i <= m; i++) scanf("%d", &b[i]);
  sort(a + 1, a + n + 1);
  sort(b + 1, b + m + 1);
}

int xuli(int x){
  int k = searchIT(a, 1, n, x);
  int t = searchIT(b, 1, m, x);

  //printf("%d %d %d\n", t, k, x);
  int p1 = (k - 1)*2 + (n - k + 1)*3;
  int p2 = (t - 1)*2 + (m - t + 1)*3;
  if (res < p1 - p2){
    res = p1 - p2;
    res1 = p1;
    res2 = p2;
    kq = x;
  }
}

int solve(){
  int i = 1, j = 1;

  while (i <= n || j <= m){
    if ((i <= n && a[i] < b[j]) || j > m){
      xuli(a[i] - 1);
      xuli(a[i]);
      xuli(a[i] + 1);
      i++;
    } else
    if (j <= m){
      xuli(b[j] - 1);
      xuli(b[j]);
      xuli(b[j] + 1);
      j++;
    }
  }

  printf("%d:%d", res1, res2);
}

int searchIT(int x[], int l, int r, int k){
  if (k < x[l]) return l;
  if (k >= x[r]) return r + 1;

  while (l <= r){
    int mid = (l + r)/2;
    if (x[mid] == k){
      if (x[mid+1] > k) return mid + 1;
      else l = mid + 1;
    } else
    if (x[mid] > k){
      if (x[mid-1] <= k) return mid;
      else r = mid - 1;
    } else{
      if (x[mid+1] > k) return mid + 1;
      else l = mid + 1;
    }
  }
}



























