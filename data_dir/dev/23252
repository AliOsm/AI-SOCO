#include<bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
using namespace std;

#define fr first
#define sc second
#define memset(X,Y) memset(X,Y,sizeof X)
#define all(X) X.begin(),X.end()
#define SZ size()
#define mp make_pair
#define pb push_back
#define Pb pop_back
#define error(args...){vector<string> _v = split(#args,','); err(_v.begin(),args); }
vector <string> split(const string &s,char c){
    vector<string> v;
    stringstream ss(s);
    string x;
    while(getline(ss,x,c))
        v.emplace_back(x);
    return move(v);
}
void err(vector<string>:: iterator it){}
template<typename T,typename ... Args>
void err(vector<string>::iterator it, T a, Args ... args){
    cerr << it->substr((*it)[0] == ' ',it->length())
         << " = " << a <<" " ;
    err(++it,args...);
}
template <typename T>
using order_set = tree<T, null_type, less<T>, rb_tree_tag,
    tree_order_statistics_node_update>;

typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,pii> pl;
typedef vector<int> vi;
typedef vector<ll> vll;
double pi=acos(-1);
const ll N = (1e3)+10,M = 1e6,mod=998244353,K = 4 * N;
ll OO=1e18;
int n;
ll bigmod(ll b,ll p ,ll m=mod)
{
    if(p==0)
        return 1;
    if(p%2 == 0)
    {
        ll temp = bigmod(b,p/2,m);
        return (temp*temp)%m;
    }
    return (bigmod(b,p-1,m)*(b%m))%m;
}
ll InverseEuler(ll n, ll MOD=mod)
{
    return bigmod(n,MOD-2,MOD);
}
ll f[1000001];
void facts(ll N){
    f[0]=1LL;
    for(int i=1;i<N;i++){
        f[i]=(f[i-1]*i)%mod;
    }
}

ll c(ll n, ll r, ll MOD=mod)
{
    return (f[n]*((InverseEuler(f[r], MOD) * InverseEuler(f[n-r], MOD)) % MOD)) % MOD;
}
ll dp[N],a[N];
int main()
{
    facts(N);
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>a[i];
    }
    dp[n]=1;
    ll ans=0;
    for(int i=n-1;i>=0;i--){
        if(a[i]>0){
            for(int j=i+a[i];j<n;j++){
                dp[i]+=dp[j + 1] * c(j - i ,a[i]) % mod;
                dp[i]%=mod;
            }
        }
        ans+=dp[i];
        ans%=mod;
    }
    cout<<ans;
}