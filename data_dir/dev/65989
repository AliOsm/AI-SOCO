#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <vector>
#define N 1020
#define M 100020
using namespace std;

int c[N], f[N], s[N];
int u[M], v[M];
bool g[N];
vector<int> w;

inline int find(const int &x)
{
    return f[x] == x ? x : f[x] = find(f[x]);
}

int main(void)
{
    int n, m, k;
    int i;
    int x, y, o;

    scanf("%d %d %d", &n, &m, &k);
    for(i = 1; i <= k; i ++)
        scanf("%d", &c[i]);
    for(i = 0; i < m; i ++)
        scanf("%d %d", &u[i], &v[i]);

    for(i = 1; i <= n; i ++)
        f[i] = i;
    for(i = 0; i < m; i ++)
        if(find(u[i]) != find(v[i]))
            f[find(u[i])] = find(v[i]);
    for(i = 1; i <= k; i ++)
        g[find(c[i])] = true;
    for(i = 1; i <= n; i ++)
        ++ s[find(i)];

    for(i = 1, x = y = 0; i <= n; i ++)
        if(find(i) == i)
        {
            if(g[i])
            {
                x = max(x, s[i]);
                w.push_back(s[i]);
            }
            else
                y += s[i];
        }
    sort(w.begin(), w.end(), greater<int>());
    for(i = 1, o = ((w.at(0) + y) * (w.at(0) + y - 1)) >> 1; i < (signed)w.size(); i ++)
        o += (w.at(i) * (w.at(i) - 1)) >> 1;

    printf("%d\n", o - m);

    return 0;
}