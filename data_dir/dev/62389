#include<bits/stdc++.h>
using namespace std;
int mod = 1000000007;
int cnt[10];
int N;
int Mat[105][105];
int C[105][105];
int A[105][105];
int B[105][105];

void unit() {
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			C[i][j] = 0, C[i][i] = 1;
}

void mul() {
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			C[i][j] = 0;
	for (int k = 0; k < N; k++)
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++) {
				C[i][j] += (A[i][k] * 1LL * B[k][j]) % mod;
				if (C[i][j] >= mod)
					C[i][j] -= mod;
			}
}

void copy(int src[105][105], int dst[105][105]) {
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			dst[i][j] = src[i][j];
}

void getPow(int b) {
	if (b == 0) {
		unit();
		return;
	}
	getPow(b / 2);
	copy(C, A);
	copy(C, B);
	mul();
	if (b % 2 == 1) {
		copy(C, A);
		copy(Mat, B);
		mul();
	}
}

int X[105];

int main() {
	ios::sync_with_stdio(false);
	int n, b, k, x;
	cin >> n >> b >> k >> x;
	for (int i = 0; i < n; i++) {
		int d; cin >> d;
		cnt[d]++;
	}
	N = x;
	for (int mod1 = 0; mod1 < x; mod1++)
		for (int d = 1; d < 10; d++) {
			int mod2 = (mod1 * 10 + d) % x;
			Mat[mod2][mod1] += cnt[d];
//			if (cnt[d])
//			cout << mod2 << " " << mod1 << " " << d << " " << Mat[mod2][mod1] << endl;
		}

	for (int i = 0; i < 10; i++)
		X[i % x] += cnt[i];

	getPow(b - 1);
	long long ans = 0;
	int row = k;
	for (int j = 0; j < x; j++) {
		ans += (C[row][j] * 1LL * X[j]) % mod;
		ans %= mod;
	}
	cout << ans << endl;


	return 0;
}

