#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ff first
#define ss second
#define PI 2*acos(0.0)
#define all(a) a.begin(),a.end()
#define INF (1<<28)
#define mem(a,x) memset(a,x,sizeof(a))
#define SEGMENT_TREE left=2*node,right=left+1,mid=(b+e)/2
using namespace std;


/*------------------------------------BITMASK------------------------------------------*/
//int Change(int N, int pos){return N= N^(1<<pos);}
//bool Check(int N, int pos){return (bool)(N &(1<<pos));}
/*-----------------------------------------------------------------------------------------------*/

/*-----------------------------DIRECTION_ARRAY-------------------------*/
//------FOUR_DIRECTION---------//
//int fx[]={0,1,0,-1};
//int fy[]={1,0,-1,0};


//------EIGHT_DIRECTION---------//
//int fx[]={0,1,1,1,0,-1,-1,-1};
//int fy[]={1,1,0,-1,-1,-1,0,1};
/*--------------------------------------------------------------------------------------*/

//int gcd(int a, int b){return (a==0)? b: gcd(b%a,a);}
//int lcm(int a, int b){return (a/gcd(a,b))*b;}

///-----------------------------START FROM HERE--------------------------------------///

int arr[105];

set<int>SS;
set<int>::iterator it;
int main(){

    int n;
    scanf("%d", &n);

    for(int i=1; i<=n; i++){

        int p;
        scanf("%d", &p);
        arr[p]++;
        SS.insert(p);
    }
    int ans=0;

    if(SS.size()==2){
        int x=0,tot=0;
        ans=1;
        for(it=SS.begin(); it!=SS.end(); it++){

            if(x==0)x=arr[*it];
            else if(arr[*it]!=x)ans=0;
            tot+=arr[*it];

        }
        if(tot!=n)ans=0;

    }
    if(ans){

        cout<<"YES"<<endl;
         for(it=SS.begin(); it!=SS.end(); it++){
            cout<<*it<<" ";
         }
    }else cout<<"NO"<<endl;
}
