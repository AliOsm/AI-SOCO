#include <iostream>
#include <vector>
#include <bitset>
#include <algorithm>
#include <ctime>
#include <cassert>
#include <map>

using namespace std;

#define REP(i, n) for (int (i) = 0; (i) < (n); i++)
#define sz(s) (int)(s).size()
#define all(v) (v).begin(), (v).end()

const int N = 200100;

int a[N], b[N], c[2 * N], d[2 * N];

int main() {
#ifdef LOCAL
	 freopen("input.txt", "r", stdin);
	 freopen("output.txt", "w", stdout);
#endif
	 int n, m, p;
	 scanf("%d %d %d", &n, &m, &p);
	 REP(i, n) scanf("%d", &a[i]);
	 REP(i, m) scanf("%d", &b[i]);
	 vector <int> v;
	 REP(i, n) v.push_back(a[i]);
	 REP(i, m) v.push_back(b[i]);
	 sort(all(v));
	 v.resize(unique(all(v)) - v.begin());
	 REP(i, n) a[i] = lower_bound(all(v), a[i]) - v.begin();
	 REP(i, m) b[i] = lower_bound(all(v), b[i]) - v.begin();
	 REP(i, m) c[b[i]]++;
	 int need = 0;
	 REP(i, sz(v)) if (c[i]) ++need;
	 vector <int> res;
	 REP(q, p) {
		for (int i = q; i < n; i += p) {
			d[a[i]] = 0;
		}
		int good = 0;
		for (int i = q; i < n; i += p) {
			if (d[a[i]] == c[a[i]] && c[a[i]] > 0) {
				--good;
			}
			if (d[a[i]] == c[a[i]] - 1) {
				++good;
			}
			d[a[i]]++;
			if (i - (long long)(m - 1) * p < q) {
				continue;
			}
			int pos = i - (m - 1) * p;
			if (pos >= q) {
				if (good == need) {
					res.push_back(pos);
				}
				if (d[a[pos]] - 1 == c[a[pos]] && c[a[pos]] > 0) {
					++good;
				}
				if (d[a[pos]] == c[a[pos]]) {
					--good;
				}
				d[a[pos]]--;
			}
		}
	 }
	 sort(all(res));
	 printf("%d\n", sz(res));
	 REP(i, sz(res)) printf("%d ", res[i] + 1);
	 return 0;
}