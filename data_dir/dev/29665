#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <deque>
#include <algorithm>
#include <cassert>

using namespace std;

bool diff(string &s, int l1, int r1, int l2, int r2) {
	while (l1 < r1 && l2 < r2) {
		if (s[l1] != s[l2]) {
			return true;
		}
		++l1;
		++l2;
	}
	return false;
}

bool canOne(string &s, int pos) {
	int n = s.size();
	for (int i = 0; 2 * i < n; ++i) {
		if (s[(pos + i) % n] != s[(pos + n - i - 1) % n]) {
			return false;
		}
	}
	for (int i = 0; i < n; ++i) {
		if (s[(pos + i) % n] != s[i]) {
			return true;
		}
	}
	return false;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	string s;
	cin >> s;
	int n = s.size();
	int res = INT_MAX;
	for (int i = 1; i < n; ++i) {
		if (canOne(s, i)) {
			res = 1;
		}
	}
	for (int i = 1; 2 * i <= n; ++i) {
		int pos1 = i;
		int pos2 = n - i;
		if (diff(s, 0, pos1, pos2, n)) {
			if (pos1 == pos2) {
				res = min(res, 1);
			} else {
				res = min(res, 2);
			}
		}
	}
	if (res == INT_MAX) {
		cout << "Impossible" << endl;
	} else {
		cout << res << endl;
	}
	return 0;
}
