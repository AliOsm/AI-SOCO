#include <bits/stdc++.h>
using namespace std;
typedef double db;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
#define dd(x) cout << #x << " = " << x << ", "
#define de(x) cout << #x << " = " << x << endl
#define rep(i,a,b) for(int i=(a);i<(b);++i)
#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define fi first
#define se second
//INF = 1 061 109 567 ; INF + INF = 2 122 219 134 ;
//LINF = 4 557 430 888 798 830 399 ; LINF + LINF = 9 114 861 777 597 660 798 ;
const int INF = 0x3f3f3f3f;          // -INF: 0xc0   abs(-INF) = INF + 1
const ll LINF = 0x3f3f3f3f3f3f3f3f;
const int MOD = (int)1e9+7;          // inv2 = 500000004 (mod 1e9+7)
const int N = (int)2e5+7;               // (1 << [17, 18, 20, 21] ) > [1e5, 2e5, 1e6, 2e6]
 
// ------- 变量 ------- //
 
int n, k;
vector <pii> vl[N];
int vr[N];
 
// ------- 函数 ------- //
 
void Init() {
	memset(vr, 0, sizeof(vr));
	rep(i, 1, N) vl[i].clear();
	rep(i, 0, n) {
		int l, r; scanf("%d%d", &l, &r);
		vl[l].pb(mp(r, i + 1));
		vr[r+1]++;
	}
}
 
int Solve() {
    vi ans;
    priority_queue <pii> Q;
    int cur = 0;
    rep(i, 1, N) {
    	//de("===");
    	//de(cur);
    	cur -= vr[i];
    	//de(cur);
		for (auto o : vl[i]) {
    		cur++;
    		Q.push(o);
		}
		//de(cur);
		while (cur > k) {
			cur--;
			ans.pb(Q.top().se);
			//de(Q.top().se);
			vr[Q.top().fi+1]--;
			Q.pop();
		}
		//de(cur);
		//de(sz(ans));
	}
    printf("%d\n", sz(ans));
    rep(i, 0, sz(ans)) printf("%d%c", ans[i], " \n"[i==sz(ans)-1]);
    return 0;
}
 
// ------- main ------- //
 
int main ()
{
    //ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    //freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
 
    //Pre();
    //int t; scanf("%d", &t); while (t--) {
    while (~scanf("%d%d", &n, &k)) {
    //while(fgets(s, N, stdin)) {   // 注意 fgets 会读入换行符
        //if (n == 0) break;
        //static int kase = 0; printf("Case %d: ", ++kase);
        Init();
        Solve();
        //if (t) puts("");
    }
    return 0;
}