#include<bits/stdc++.h>
#define f first
#define s second 
#define ll long long
#define u unsigned
#define pb push_back
#define mp make_pair
#define FX fflush(stdin);cout<<fixed,cout.precision(18);
#define iOS ios_base::sync_with_stdio(false);cin.tie(NULL);
#define ones __builtin_popcount() 
#define pii pair<int,int>
#define pll pair<long long,long long>
#define all(x) x.begin(), x.end()
const char dl='\n';
const long double eps=0.00000001;
const long long MOD=1e9+7;
const double PI=3.141592653589793238463;
using namespace std;
void debug() {cout<<endl;}
template <typename H, typename... T> void debug(H p, T... t) {
   std::cout << p<<" ";
   debug(t...);
}
int n,m;
vector<long long>d(100005);
vector<pair<int,long long>>g[100005];
vector<int>p(100005);
void dijkstra()
{
	for(int i=1;i<=n;++i)
		d[i]=LLONG_MAX;
	d[1]=0;
	p[1]=0;
	set<pair<long long,int>>q;
	q.insert({d[1],1});
	while(q.size())
	{
		int v=q.begin()->second;
		if(q.begin()->first==LLONG_MAX)return;
		q.erase(q.begin());
		for(auto it:g[v])
		{
			int to=it.first;
			long long len=it.second;
			if(d[to]>d[v]+len)
			{
				q.erase({d[to],to});
				d[to]=d[v]+len;
				p[to]=v;
				q.insert({d[to],to});
			}
		}
	}
}
main()
{
	FX iOS
	int i,j; 
	cin>>n>>m;
	for(i=0;i<m;++i)
	{
		int x,y; long long w;
		cin>>x>>y>>w;
		g[x].pb(make_pair(y,w));
		g[y].pb(make_pair(x,w));
	}
	dijkstra();
	/*for(i=1;i<n;++i)
		cout<<((d[i]==LLONG_MAX)?-1:d[i])<<" ";
	cin>>j;*/
	cout<<endl;
	if(d[n]==LLONG_MAX)
		return cout<<-1,0;
	for(i=n;i>n-1;--i)
	{
		vector<int>path;
		for(j=i;j!=0;j=p[j])
			path.pb(j);
		reverse(all(path));
		for(auto it:path)
			cout<<it<<" ";//cout<<"d="<<d[i]<<endl<<endl;
	}
	
	//cout<<d[n];
	//cin>>j;
}