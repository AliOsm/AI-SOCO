#include <bits/stdc++.h>
using namespace std;
#define mod 998244353
#define oo 1000000010
const int N = 1000010;
const int LOG = 22;
int n , m;

string grid[N] , grid2[N];
char tmpread[N];

int dr[4] = {0 , 1 , 0 , -1};
int dc[4] = {1 , 0, -1 , 0};

string S = "RDLU";

vector< vector< int > > vis , comp , dis , dis2;

vector< vector< pair<int,int> > > nxt;


int ans = 0 , ans2 = 0;

int sz[N] , comp_cnt = 0;

vector< bool > cur[N];

void DFS(int r,int c,int d){
	vis[r][c] = 1;
	dis[r][c] = d;
	int nr = nxt[r][c].first;
	int nc = nxt[r][c].second;
	if(vis[nr][nc] == 2){
		comp[r][c] = comp[nr][nc];
		dis2[r][c] = dis2[nr][nc] + 1;
		
	}
	else if(vis[nr][nc] == 0){
		DFS(nr,nc,d + 1);
		comp[r][c] = comp[nr][nc];
		dis2[r][c] = dis2[nr][nc] + 1;
	}
	else{
		comp[r][c] = comp_cnt;
		sz[comp_cnt] = d - dis[nr][nc] + 1;
		cur[comp_cnt].clear();
		cur[comp_cnt].resize(sz[comp_cnt] , false);
		dis2[r][c] = 0;
		comp_cnt++;
	}
	if(grid[r][c] == '0')
		cur[comp[r][c]][dis2[r][c] % sz[comp[r][c]]] = true;
	vis[r][c] = 2;
}




void solve(){
	scanf("%d%d",&n,&m);
	nxt.clear();
	vis.clear();
	comp.clear();
	dis.clear();
	dis2.clear();
	vis.resize(n , vector< int > (m , 0));
	comp.resize(n , vector< int > (m , 0));
	dis.resize(n , vector< int > (m , 0));
	dis2.resize(n , vector< int > (m , 0));
	nxt.resize(n , vector< pair<int,int> >(m , make_pair(0 , 0)));
	for(int i = 0 ;i < n;i++){
		scanf("%s",tmpread);
		grid[i] = (string)tmpread;
	}
	for(int i = 0 ;i < n;i++){
		scanf("%s",tmpread);
		grid2[i] = (string)tmpread;
		for(int j = 0 ;j < m;j++){
			for(int k = 0 ;k < 4;k++){
				if(S[k] != grid2[i][j]) continue;
				nxt[i][j] = make_pair(i + dr[k] , j + dc[k]);
				break;
			}
		}
	}
	ans = ans2 = comp_cnt = 0;
	for(int i = 0 ;i < n;i++){
		for(int j = 0 ;j < m;j++){
			if(vis[i][j] != 0) continue;
			DFS(i , j , 0);
		}
	}
	for(int i = 0 ;i < comp_cnt;i++){
		ans2 += sz[i];
		for(int j = 0 ;j < (int)cur[i].size();j++)
			if(cur[i][j])
				ans++;
	}
	printf("%d %d\n",ans2 ,ans);
	
}

int main(){
	int t;
	scanf("%d",&t);
	while(t--)
		solve();
	return 0;
}