#include<iostream>
#include<stdio.h>
#include<assert.h>
#include<string.h>
#include<time.h>
#include<stdlib.h>
#include<math.h>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int INF = 1000*1000*1000;

struct rib {
    int b, u, c, f;
    size_t back;
};

void add_rib (vector < vector<rib> > & g, int a, int b, int u, int c) {
    rib r1 = { b, u, c, 0, g[b].size() };
    rib r2 = { a, 0, -c, 0, g[a].size() };
    g[a].push_back (r1);
    g[b].push_back (r2);
}

int cnt[26];

int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    string T;
    cin>>T;
    for(int i = 0; i < sz(T); i++)
        cnt[T[i] - 'a']++;
    int m;
    cin>>m;
    vector<string> ss(m);
    vector<int> ma(m);
    int n = 27 * m + 27 + 2;
    vector < vector<rib> > g (n);
    int s = 0, t = n - 1;
    for(int i = 0; i < m; i++)
        cin>>ss[i]>>ma[i];
    for(int i = 0; i < 26; i++)
        add_rib(g,s,i + 1,cnt[i],0);
    for(int i = 0; i < m; i++)
    {
        memset(cnt,0,sizeof(cnt));
        for(int j = 0; j < sz(ss[i]); j++)
            cnt[ss[i][j] - 'a']++;
        for(int j = 0; j < 26; j++)
        {
            add_rib(g,j + 1,27 + i * 27 + j,INF,0);
            add_rib(g,27 + i * 27 + j,27 + i * 27 + 26,cnt[j],0);
        }
        add_rib(g,27 + i * 27 + 26,t,ma[i],i + 1);
    }
    int k = INF;
    int flow = 0,  cost = 0;
    while (flow < k) {
        vector<int> id (n, 0);
        vector<int> d (n, INF);
        vector<int> q (n);
        vector<int> p (n);
        vector<size_t> p_rib (n);
        int qh=0, qt=0;
        q[qt++] = s;
        d[s] = 0;
        while (qh != qt) {
            int v = q[qh++];
            id[v] = 2;
            if (qh == n)  qh = 0;
            for (size_t i=0; i<g[v].size(); ++i) {
                rib & r = g[v][i];
                if (r.f < r.u && d[v] + r.c < d[r.b]) {
                    d[r.b] = d[v] + r.c;
                    if (id[r.b] == 0) {
                        q[qt++] = r.b;
                        if (qt == n)  qt = 0;
                    }
                    else if (id[r.b] == 2) {
                        if (--qh == -1)  qh = n-1;
                        q[qh] = r.b;
                    }
                    id[r.b] = 1;
                    p[r.b] = v;
                    p_rib[r.b] = i;
                }
            }
        }
        if (d[t] == INF)  break;
        int addflow = k - flow;
        for (int v=t; v!=s; v=p[v]) {
            int pv = p[v];  size_t pr = p_rib[v];
            addflow = min (addflow, g[pv][pr].u - g[pv][pr].f);
        }
        for (int v=t; v!=s; v=p[v]) {
            int pv = p[v];  size_t pr = p_rib[v],  r = g[pv][pr].back;
            g[pv][pr].f += addflow;
            g[v][r].f -= addflow;
            cost += g[pv][pr].c * addflow;
        }
        flow += addflow;
    }
    if (flow != sz(T))
    {
        cout<<-1<<endl;
        return 0;
    }
    cout<<cost<<endl;
    return 0;
}
