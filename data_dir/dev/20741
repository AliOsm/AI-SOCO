#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<queue>

#define PB push_back

using namespace std;

inline int in() { int x; scanf("%d", &x); return x; }

const int MAXN = 3003;
int d[MAXN], dist[MAXN][MAXN];
bool mark[MAXN];
vector<int> v[MAXN];
queue<int> q;

void enque(int x, int di)
{
	d[x] = di + 1;
	mark[x] = true;
	q.push(x);
}

void dijkstra(int strt)
{
	fill(mark, mark + MAXN, 0);
	enque(strt, -1);
	while(q.size())
	{
		int x = q.front();
		q.pop();
		for(int y : v[x])
			if(!mark[y])
				enque(y, d[x]);
	}
}

int main()
{
	int n = in(), m = in();
	for(int i = 0; i < m; i++)
	{
		int x = in(), y = in();
		x--, y--;
		v[x].PB(y), v[y].PB(x);
	}
	for(int i = 0; i < n; i++)
	{
		dijkstra(i);
		for(int j = 0; j < n; j++)
			dist[i][j] = d[j];
	}
	int s1 = in(), t1 = in(), l1 = in();
	s1--, t1--;
	int s2 = in(), t2 = in(), l2 = in();
	s2--, t2--;
	if(dist[s1][t1] > l1 || dist[s2][t2] > l2)
	{
		cout << -1 << endl;
		return 0;
	}
	int ans = dist[s1][t1] + dist[s2][t2];
	for(int i = 0; i < n; i++)
		for(int j = 0; j < n; j++)
			if(dist[s1][i] + dist[i][j] + dist[j][t1] <= l1 && dist[s2][i] + dist[i][j] + dist[j][t2] <= l2)
				ans = min(ans, dist[s1][i] + dist[s2][i] + dist[i][j] + dist[j][t1] + dist[j][t2]);
	swap(s1, t1);
	for(int i = 0; i < n; i++)
		for(int j = 0; j < n; j++)
			if(dist[s1][i] + dist[i][j] + dist[j][t1] <= l1 && dist[s2][i] + dist[i][j] + dist[j][t2] <= l2)
				ans = min(ans, dist[s1][i] + dist[s2][i] + dist[i][j] + dist[j][t1] + dist[j][t2]);
	cout << m - ans << endl;
	return 0;
}
