// rc.cpp : Defines the entry point for the console application.
//

#include <math.h>

#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <functional>
#include <iomanip>
#include <iterator>
#include <regex>

using namespace std;

#define PI 3.14159265358979323846
#define EPS 1.E-8

#define FIN(a, n) { for (ul _ = 0; _ < n; ++_) cin >> (a)[_]; }
#define FOUT(a, n) { cout << a[0]; for (ul _ = 1; _ < n; ++_) cout << ' ' << a[_]; cout << '\n'; }

typedef unsigned char uc;
typedef unsigned int ui;
typedef unsigned long long ul;
typedef long long sl;

int main(int argc, char* argv[])
{
    ios_base::sync_with_stdio(false);

    sl t;
    cin >> t;

    for (; t; --t)
    {
        map<int, int> v;

        int n;
        cin >> n;
        for (int i = 0; i < n; ++i)
        {
            int a;
            cin >> a;
            ++v[a];
        }

        bool c = true,
             ok = false;
        while (c)
        {
            if (v.find(2048) != v.end())
            {
                ok = true;
                break;
            }

            map<int, int> cv;
            c = false;
            for (auto x: v)
            {
                if (x.second > 1)
                {
                    int z = x.second / 2;
                    cv[x.first * 2] += z;
                    x.second -= z * 2;
                    if (x.second)
                        ++cv[x.first];
                    c = true;
                }
                else
                    ++cv[x.first];
            }

            v.swap(cv);
        }

        cout << (ok ? "YES\n" : "NO\n");
    }
    return 0;
}
