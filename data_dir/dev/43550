#include<bits/stdc++.h>
using namespace std;
const int mod=1000000007;
inline int add(int a,int b)
{
	if((a+=b)>=mod)a-=mod;
	return a;
}
inline int dec(int a,int b)
{
	if((a-=b)<0)a+=mod;
	return a;
}
inline int mult(int a,int b)
{
	long long t=1ll*a*b;
	if(t>=mod)t%=mod;
	return t;
}
inline int power(int a,int b)
{
	int out=1;
	while(b)
	{
		if(b&1)out=mult(out,a);
		a=mult(a,a);
		b>>=1;
	}
	return out;
}
int R,p1,p2,p3,p4,s;
typedef vector<int> poly;
poly operator +(const poly &A,const poly &B)
{
	poly ret(max(A.size(),B.size()));
	for(int i=0;i<A.size();i++)ret[i]=A[i];
	for(int i=0;i<B.size();i++)ret[i]=add(ret[i],B[i]);
	return ret;
}
poly operator -(const poly &A,const poly &B)
{
	poly ret(max(A.size(),B.size()));
	for(int i=0;i<A.size();i++)ret[i]=A[i];
	for(int i=0;i<B.size();i++)ret[i]=dec(ret[i],B[i]);
	return ret;
}
poly operator *(const poly &a,const int &b)
{
	poly ret(a.size());
	for(int i=0;i<a.size();i++)ret[i]=mult(a[i],b);
	return ret;
}
inline vector<int> solve(vector<vector<int> > &a)
{
	for(int i=0;i<a.size();i++)
	{
		for(int j=i;j<a.size();j++)
		{
			if(a[j][i])
			{
				swap(a[j],a[i]);
				break;
			}
		}
		for(int j=0;j<a.size();j++)
		{
			if(j!=i)
			{
				int d=mult(a[j][i],power(a[i][i],mod-2));
				for(int k=0;k<=a.size();k++)a[j][k]=dec(a[j][k],mult(a[i][k],d));
			}
		}
	}
	vector<int> ret(a.size());
	for(int i=0;i<a.size();i++)ret[i]=mult(a[i][a.size()],power(a[i][i],mod-2));
	return ret;
}
vector<int> f[110][110];
int st[110];
int main()
{
	scanf("%d%d%d%d%d",&R,&p1,&p2,&p3,&p4);
	s=p1+p2+p3+p4;
	s=power(s,mod-2);
	p1=mult(p1,s);p2=mult(p2,s);
	p3=mult(p3,s);p4=mult(p4,s);
	for(int i=-R;i<=R;i++)
	{
		for(int j=-R;j<=R;j++)
		{
			if(i*i+j*j<=R*R)
			{
				st[i+R]=j;
				break;
			}
		}
	}
	int ip3=power(p3,mod-2);
	vector<vector<int> > func;
	for(int i=-R;i<=R+1;i++)
	{
		for(int j=-R;j<=R;j++)
		{
			if(i<st[j+R])continue;
			if(i>-st[j+R]+1)continue;
			if(i==st[j+R])
			{
				f[i+R+1][j+R+1]=vector<int>(2*R+2);
				f[i+R+1][j+R+1][j+R]=1;
				continue;
			}
			f[i+R+1][j+R+1]=f[i+R][j+R+1]-(f[i+R][j+R]*p2)-(f[i+R][j+R+2]*p4);
			if(i!=-R)f[i+R+1][j+R+1]=f[i+R+1][j+R+1]-(f[i+R-1][j+R+1]*p1);
			f[i+R+1][j+R+1].back()=dec(f[i+R+1][j+R+1].back(),1);
			f[i+R+1][j+R+1]=f[i+R+1][j+R+1]*ip3;
			if(i==-st[j+R]+1)
			{
				f[i+R+1][j+R+1].back()=dec(0,f[i+R+1][j+R+1].back());
				func.push_back(f[i+R+1][j+R+1]);
				f[i+R+1][j+R+1].clear();
			}
		}
	}
	auto c=solve(func);
	int ans=0;
	for(int i=0;i<2*R+1;i++)
		ans=add(ans,mult(f[R+1][R+1][i],c[i]));
	ans=add(ans,f[R+1][R+1][2*R+1]);
	printf("%d\n",ans);
	return 0;
}