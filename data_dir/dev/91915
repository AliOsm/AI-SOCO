//bismillahir rahmanir rahim            //Author:Fayed Anik

#include <bits/stdc++.h>

using namespace std;


#define         ll                         long  long
#define         lf                         double
#define         pb(x)                      push_back(x)
#define         ull                        unsigned long long
#define         sfl(a)                     scanf("%lld",&a)
#define         sf(a)                      scanf("%d",&a)
#define         pf(a)                      printf("%d\n",a)
#define         pfl(a)                     printf("%lld\n",a)
#define         pdl(a)                     printf("%llf\n",a)
#define         FOR(x,n)                   for(ll x=1;x<=n;++x)
#define         vii                        vector< ll > v
#define         pi                         3.14159265359
#define         mex                        10000000
#define         pii                        pair< ll , ll >
#define         mem(m,a)                   memset( m, a,sizeof m)
#define         mp(a,b)                    make_pair(a,b)
#define         maxn                       100000
#define         mod                        1000000007
#define         INF                        1e17
#define         f1                         first
#define         f2                         second
#define         all(v)                     v.begin(),v.end()
#define         PI                         acos(-1)
#define         printminusone              printf("-1\n")
#define         bug                        printf("bug")

int a[100005],tree[400005][12];
int cnt[12];
vector < int > tmp;
void build(int node,int b,int e){
    if(b== e){
        tree[node][a[b]]=1;
        return;
    }

    int left=node<<1ll;
    int right=left+1;
    int mid=(b+e)>>1;

    build(left,b,mid);
    build(right,mid+1,e);

    for(int i=1;i<=10;i++){
        tree[node][i]=tree[left][i]+tree[right][i];
    }

}

int query(int node,int b,int e,int i,int j,int k){
    if(i>e or j<b){
        return 0;
    }
    if(b>=i and e<=j){
        return tree[node][k];
    }

    int left=node<<1ll;
    int right=left+1;
    int mid=(b+e)>>1;

    return query(left,b,mid,i,j,k)+query(right,mid+1,e,i,j,k);
}
int main(){
    int n;
    sf(n);
    for(int i=1;i<=n;i++){
        sf(a[i]);
    }

    build(1,1,n);

    for(int i=n;i>=1;i--){
        int k=0;
        memset(cnt,0,sizeof 0);
        for(int j=1;j<=10;j++){
            int t=query(1,1,n,1,i,j);
            if(t!=0){
                cnt[k]=t;
                k++;
            }
        }

        bool f=0;

        for(int j=0;j<k;j++){
            f=0;
            for(int t=0;t<k;t++){
                if(j==t){
                    if(cnt[j]-1!=0)
                        tmp.pb(cnt[j]-1);
                }
                else{
                    tmp.pb(cnt[t]);
                }
            }
            if(tmp.size()==0){
                cout <<i<<endl;
                return 0;
            }
            for(int x=0;x<tmp.size()-1;x++){
                if(tmp[x]!=tmp[x+1]){
                    f=1;
                    break;
                }
            }

            if(!f){
                cout<<i<<endl;
                return 0;
            }

            tmp.clear();
        }
    }
}
