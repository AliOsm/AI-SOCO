#include<bits/stdc++.h>

#define rep(i,n) for(int i=0;i<(int)n;i++)
#define all(c) (c).begin(),(c).end()
#define mp make_pair
#define pb push_back
#define each(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)
#define dbg(x) cerr<<__LINE__<<": "<<#x<<" = "<<(x)<<endl

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pi;
const int inf = (int)1e9;
const double INF = 1e12, EPS = 1e-9;

const int MX = 100000;
const int SZ = 330;

int n, m;
int col[MX], col_bkt[MX / SZ + 1]; //col_bkt -1�͈�l�ł͂Ȃ�
ll sum[MX], bkt_all[MX / SZ + 1], bkt_add[MX / SZ + 1];

int main(){
	scanf("%d%d", &n, &m);
	
	rep(i, n) col[i] = i + 1;
	rep(i, MX / SZ + 1) col_bkt[i] = -1;
	
	while(m--){
		
		int t, l, r, x;
		scanf("%d%d%d", &t, &l, &r);
		l--;
		
		if(t == 1){
			scanf("%d", &x);
			
			int b = l / SZ;
			
			while(l < r && l % SZ){
				if(col_bkt[b] >= 0){
					rep(i, SZ) col[b * SZ + i] = col_bkt[b];
					col_bkt[b] = -1;
				}
				sum[l] += abs(x - col[l]);
				bkt_all[b] += abs(x - col[l]);
				col[l] = x;
				l++;
			}
			
			b = r / SZ;
			
			while(l < r && r % SZ){
				r--;
				if(col_bkt[b] >= 0){
					rep(i, SZ) col[b * SZ + i] = col_bkt[b];
					col_bkt[b] = -1;
				}
				sum[r] += abs(x - col[r]);
				bkt_all[b] += abs(x - col[r]);
				col[r] = x;
			}
			
			l /= SZ; r /= SZ;
			
			while(l < r){
				if(col_bkt[l] < 0){
					rep(i, SZ){
						sum[l * SZ + i] += abs(x - col[l * SZ + i]);
						bkt_all[l] += abs(x - col[l * SZ + i]);
					}
				}
				else{
					bkt_add[l] += abs(x - col_bkt[l]);
					bkt_all[l] += (ll)SZ * abs(x - col_bkt[l]);
				}
				col_bkt[l] = x;
				l++;
			}
		}
		else{
			ll ans = 0;
			while(l < r && l % SZ){
				ans += bkt_add[l / SZ];
				ans += sum[l++];
			}
			while(l < r && r % SZ){
				ans += sum[--r];
				ans += bkt_add[r / SZ];
			}
			l /= SZ; r /= SZ;
			while(l < r) ans += bkt_all[l++];
			
			printf("%I64d\n", ans);
		}
	}
	return 0;
}
