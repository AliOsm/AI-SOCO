#include<bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef pair<ll,ll> pll;

#define endl '\n'
#define ff first
#define ss second
#define int long long
#define pb push_back
#define f(i,l,r) for(ll i=l;i<=r;i++)
#define rf(i,r,l) for(ll i=r;i>=l;i--)
#define Max 5000001
#define inf 2147483647
#define llinf 9223372036854775807
#define all(v) v.begin(),v.end()
#define bp(n) __builtin_popcountll(n)
#define fast ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)

#define d0(a) cout<<a<<' ';
#define d1(a) cout<<a<<endl;
#define d2(a,b) cout<<a<<' '<<b<<endl;
#define d3(a,b,c) cout<<a<<' '<<b<<' '<<c<<endl;
#define d4(a,b,c,d) cout<<a<<' '<<b<<' '<<c<<' '<<d<<endl;
#define d5(a,b,c,d,e) cout<<a<<' '<<b<<' '<<c<<' '<<d<<' '<<e<<endl;
#define d6(a,b,c,d,e,f) cout<<a<<' '<<b<<' '<<c<<' '<<d<<' '<<e<<' '<<f<<endl;

const ll N=1e5+5,mod=1e9+7,bit=61;

template<typename T>
class segment	// pass argument as (L,R+1) to process the query from L to R
{
	public:
		vector<T> st;
		ll n;
		segment(){}
		segment(ll _n)
		{
			n=_n;
			st.resize(2*n);
		}
		T merge(T a,T b)
		{
			return max(a,b);
		}
		void create()
		{
			for(ll i=n-1;i>0;i--)
			{
				st[i]=merge(st[i<<1],st[(i<<1) | 1]);
			}
		}
		void update(ll idx,T val)
		{
			for(st[idx+=n-1]=val;idx>1;idx>>=1)
			{
				st[idx>>1]=merge(st[min(idx,idx^1)],st[max(idx,idx^1)]);
			}
		}
		T query(ll l,ll r)
		{
			T ans{};
			T ansl{};
			T ansr{};
			for(l+=n-1,r+=n-1;l<r;l>>=1,r>>=1)
			{
				if(l & 1)
				{
					ansl=merge(ansl,st[l++]);
				}
				if(r & 1)
				{
					ansr=merge(st[--r],ansr);
				}
			}
			ans=merge(ansl,ansr);
			return ans;
		}
};

ll pref[N],suff[N],fq[N],a[N];

signed main()
{
    fast;

    ll t=1;
    //cin>>t;
    while(t--)
    {
        ll n;
        cin>>n;
        f(i,1,n)
        {
            cin>>a[i];
        }
        ll mx=0;
        segment<ll> obj(N);
        f(i,1,N)
        {
            obj.st[i+N-1]=0;
        }
        obj.create();
        f(i,1,n)
        {
            pref[i]=1+obj.query(1,a[i]);
            mx=max(mx,pref[i]);
            obj.update(a[i],pref[i]);
        }
        f(i,1,N)
        {
            obj.st[i+N-1]=0;
        }
        obj.create();
        rf(i,n,1)
        {
            suff[i]=1+obj.query(a[i]+1,N);
            obj.update(a[i],suff[i]);
        }
        f(i,1,n)
        {
            if(pref[i]+suff[i]-1==mx)
            {
                fq[pref[i]]++; // How many candidates are there for the current position
            }
        }
        f(i,1,n)
        {
            if(pref[i]+suff[i]-1==mx)
            {
                if(fq[pref[i]]==1)
                {
                    cout<<3;
                }
                else
                {
                    cout<<2;
                }
            }
            else
            {
                cout<<1;
            }
        }
    }
    return 0;
}
















