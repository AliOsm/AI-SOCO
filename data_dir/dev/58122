/* 
chirag11032000
Chirag Thakur
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

using ll = long long;
using db = double;
using pii = pair < int, int >;
using pll = pair < ll, ll >;

template < typename T > using OrderedSet = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;
template < typename T > using MinPriorityQueue = priority_queue < T, vector < T >, greater < T > >;

#ifndef ONLINE_JUDGE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template < typename Arg1 >
void __f(const char* name, Arg1&& arg1) {
	cerr << name << " : " << arg1 << std :: endl;
}
template < typename Arg1, typename... Args >
void __f(const char* names, Arg1&& arg1, Args&&... args) {
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << " | ";
	__f(comma + 1, args...);
}
#else
#define trace(...)
#endif

#define eb emplace_back
#define mp make_pair
#define mt make_tuple
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()

const db PI = acos(-1);
const ll LINF = LLONG_MAX;
const int INF = INT_MAX, MOD = 1e9 + 7, N = 5e3 + 10;

int n, w, h;
pair < pii, int > v[N];
int dp[N];
int trans[N];

void testCase();
int solve(int ind);

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	testCase();
	cerr << "Time taken: " << int((clock() * 1000.) / CLOCKS_PER_SEC) << "ms\n";
	return 0;
}

void testCase() {
	cin >> n >> w >> h;
	for (int i = 1; i <= n; ++i) {
		cin >> v[i].first.first >> v[i].first.second;
		v[i].second = i;
	}
	v[n + 1] = {{w, h}, n + 1};
	++n;
	sort(v + 1, v + 1 + n);
	memset(dp, -1, sizeof(dp));
	memset(trans, -1, sizeof(trans));
	for (int i = 1; i <= n; ++i) {
		if (v[i] == mp(mp(w, h), n)) {
			cout << solve(i) - 1 << "\n";
			int ind = trans[i];
			while (ind != -1) {
				cout << v[ind].second << " ";
				ind = trans[ind];
			}
			cout << "\n";
			return;
		}
	}
}

int solve(int ind) {
	if (ind == n) {
		return 1;
	}
	auto &ans = dp[ind];
	if (ans == -1) {
		auto updt = [&](int p) {
			auto nxt = 1 + solve(p);
			if (nxt > ans) {
				ans = nxt;
				trans[ind] = p;
			}
			return 0;
		};
		ans = 1;
		for (int j = ind + 1; j <= n; ++j) {
			if (v[j].first.first > v[ind].first.first && v[j].first.second > v[ind].first.second) {
				updt(j);
			}
		}
	}
	return ans;
}