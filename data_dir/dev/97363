//const int N = 105;
//int dp[N][2][N][N];
//void __(){
//	memset(dp,0x3f,sizeof(dp));
//	_(int,n);
//	_(vi,a,n);
//	set<int> rem;
//	rep(i,1,n)
//		rem.insert(i);
//	for(int x : a)
//		rem.erase(x);
//	int cnt_odd = 0, cnt_even = 0;
//	for(int x : rem)
//		if(x%2)
//			cnt_odd++;
//		else
//			cnt_even++;
//	if(a[0] == 0){
//		dp[1][1][cnt_odd-1][cnt_even] = 0;
//		dp[1][0][cnt_odd][cnt_even-1] = 0;
//	}
//	else{
//		dp[1][a[0]%2][cnt_odd][cnt_even] = 0;
//	}
//	rep(i,1,n-1)
//		rep(j,2)
//			rep(odds,cnt_odd+1)
//				rep(evens,cnt_even+1)
//					if(a[i] != 0){
//						int nxt_val = dp[i][j][odds][evens]+(a[i]%2 != j);
//						if(nxt_val < dp[i+1][a[i]%2][odds][evens]){
//							dp[i+1][a[i]%2][odds][evens] = nxt_val;
//						}
//					}
//					else{
//						{
//							int nxt_val = dp[i][j][odds][evens]+(1 != j);
//							if(nxt_val < dp[i+1][1][odds-1][evens]){
//								dp[i+1][1][odds-1][evens] = nxt_val;
//							}
//						}
//						{
//							int nxt_val = dp[i][j][odds][evens]+(0 != j);
//							if(nxt_val < dp[i+1][0][odds][evens-1]){
//								dp[i+1][0][odds][evens-1] = nxt_val;
//							}
//						}
//					}
//	print min(dp[n][0][0][0],dp[n][1][0][0]);
//
//
//}
//
#include <cstring>
#include <set>
#include <iomanip>
#include <algorithm>
#include <cassert>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define REP_INT(i,l,r) for(int i = l; i <= r; ++i)
#define REP_ZERO_INT(i,r) for(int i = 0; i < r; ++i)
#define GET_REP_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define rep(...) GET_REP_MACRO(__VA_ARGS__,REP_ANY,REP_INT,REP_ZERO_INT)(__VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<int> vi;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
T1 istream& operator>>(istream& stream, vector<T>& t){
    return read(all(t), stream);
}
T1 istream& read(T b, T e, istream& stream){
    for(T it = b; it != e; ++it)
        stream >> *it;
    return stream;
}
struct _print {
    string sep,end;
    bool space;
    ostream &stream;
    _print(string _sep=" ",string _end="\n",
            ostream &_stream = cout)
        : sep(_sep),end(_end),space(false),
            stream(_stream) {}
    ~_print() { stream << end; }
    template <typename T>
        _print &operator , (const T &t) {
            if (space) stream << sep;
            space = true;
            stream << t;
            return *this;
        }
};
#define print _print(),
#define INPUT_WITHOUT_INIT(type,name) type name; cin >> name
#define _IWI(type,name,...) type name(__VA_ARGS__); cin >> name
#define GET_INPUT_MACRO(_1,_2,_3,_4,_5,_6,_7,_8,NAME,...) NAME
#define _(...) GET_INPUT_MACRO(__VA_ARGS__,_IWI,_IWI,_IWI,_IWI,_IWI,_IWI,INPUT_WITHOUT_INIT)(__VA_ARGS__)
const int N = 105;
int dp[N][2][N][N];
void __(){
	memset(dp,0x3f,sizeof(dp));
	_(int,n);
	_(vi,a,n);
	set<int> rem;
	rep(i,1,n)
		rem.insert(i);
	for(int x : a)
		rem.erase(x);
	int cnt_odd = 0, cnt_even = 0;
	for(int x : rem)
		if(x%2)
			cnt_odd++;
		else
			cnt_even++;
	if(a[0] == 0){
		dp[1][1][cnt_odd-1][cnt_even] = 0;
		dp[1][0][cnt_odd][cnt_even-1] = 0;
	}
	else{
		dp[1][a[0]%2][cnt_odd][cnt_even] = 0;
	}
	rep(i,1,n-1)
		rep(j,2)
			rep(odds,cnt_odd+1)
				rep(evens,cnt_even+1)
					if(a[i] != 0){
						int nxt_val = dp[i][j][odds][evens]+(a[i]%2 != j);
						if(nxt_val < dp[i+1][a[i]%2][odds][evens]){
							dp[i+1][a[i]%2][odds][evens] = nxt_val;
						}
					}
					else{
						{
							int nxt_val = dp[i][j][odds][evens]+(1 != j);
							if(nxt_val < dp[i+1][1][odds-1][evens]){
								dp[i+1][1][odds-1][evens] = nxt_val;
							}
						}
						{
							int nxt_val = dp[i][j][odds][evens]+(0 != j);
							if(nxt_val < dp[i+1][0][odds][evens-1]){
								dp[i+1][0][odds][evens-1] = nxt_val;
							}
						}
					}
	print min(dp[n][0][0][0],dp[n][1][0][0]);
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        __();
}
