//satyaki3794
#include <bits/stdc++.h>
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define LEFT(n) (2*(n))
#define RIGHT(n) (2*(n)+1)
 
using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
 
ll pwr(ll base, ll p, ll mod=MOD){
ll ans = 1;while(p){if(p&1)ans=(ans*base)%mod;base=(base*base)%mod;p/=2;}return ans;
}
 
 
ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}



int n, arr[52], DP[52][28][28][28][28];


int dp(int i, int last_2, int last_3, int curr_2, int curr_3){

	if(last_2<0 || last_3<0 || curr_2<0 || curr_3<0)	return 0;
	if(i == n+1){
		return (last_2+last_3+curr_2+curr_3 == 0);
	}
	int &ans = DP[i][last_2][last_3][curr_2][curr_3];
	if(ans != -1)	return ans;

	ans = 0;
	if(last_2 + last_3 == 0){
		//start another level
		ans = (ans + 1LL * dp(i, curr_2, curr_3, 0, 0)) % MOD;
	}

	if(arr[i] == 2){

		{
			//connect one edge to 2-deg in prev level and leave other edge dangling
			ans = (ans + 1LL * last_2 * dp(i+1, last_2-1, last_3, curr_2+1, curr_3)) % MOD;

			//connect one edge to 2-deg in prev level and other to 2-deg in current level
			ans = (ans + 1LL * last_2 * curr_2 * dp(i+1, last_2-1, last_3, curr_2-1, curr_3)) % MOD;

			//connect one edge to 2-deg in prev level and other to 3-deg in current level
			ans = (ans + 1LL * last_2 * curr_3 * dp(i+1, last_2-1, last_3, curr_2+1, curr_3-1)) % MOD;
		}

		{
			//connect one edge to 3-deg in prev level and leave other edge dangling
			ans = (ans + 1LL * last_3 * dp(i+1, last_2+1, last_3-1, curr_2+1, curr_3)) % MOD;

			//connect one edge to 3-deg in prev level and other to 2-deg in current level
			ans = (ans + 1LL * last_3 * curr_2 * dp(i+1, last_2+1, last_3-1, curr_2-1, curr_3)) % MOD;

			//connect one edge to 3-deg in prev level and other to 3-deg in current level
			ans = (ans + 1LL * last_3 * curr_3 * dp(i+1, last_2+1, last_3-1, curr_2+1, curr_3-1)) % MOD;			
		}
	}
	else{

		{
			//connect one edge to 2-deg in prev level and leave both other edges dangling
			ans = (ans + 1LL * last_2 * dp(i+1, last_2-1, last_3, curr_2, curr_3+1)) % MOD;

			//connect one edge to 2-deg in prev level, one edge to 2-deg in curr level and leave third edge dangling
			ans = (ans + 1LL * last_2 * curr_2 * dp(i+1, last_2-1, last_3, curr_2-1+1, curr_3)) % MOD;

			//connect one edge to 2-deg in prev level, one edge to 3-deg in curr level and leave third edge dangling
			ans = (ans + 1LL * last_2 * curr_3 * dp(i+1, last_2-1, last_3, curr_2+2, curr_3-1)) % MOD;

			//connect one edge to 2-deg in prev level, one edge to 2-deg in curr level and third edge to 3-deg in curr level
			ans = (ans + 1LL * last_2 * curr_2 * curr_3 * dp(i+1, last_2-1, last_3, curr_2-1+1, curr_3-1)) % MOD;

			//connect one edge to 2-deg in prev level, and other two edges to 2-deg in curr level
			ans = (ans + 1LL * last_2 * (curr_2 * (curr_2-1))/2 * dp(i+1, last_2-1, last_3, curr_2-2, curr_3)) % MOD;

			//connect one edge to 2-deg in prev level, and other two edges to 3-deg in curr level
			ans = (ans + 1LL * last_2 * (curr_3 * (curr_3-1))/2 * dp(i+1, last_2-1, last_3, curr_2+2, curr_3-2)) % MOD;
		}

		{
			//connect one edge to 3-deg in prev level and leave both other edges dangling
			ans = (ans + 1LL * last_3 * dp(i+1, last_2+1, last_3-1, curr_2, curr_3+1)) % MOD;

			//connect one edge to 3-deg in prev level, one edge to 2-deg in curr level and leave third edge dangling
			ans = (ans + 1LL * last_3 * curr_2 * dp(i+1, last_2+1, last_3-1, curr_2-1+1, curr_3)) % MOD;

			//connect one edge to 3-deg in prev level, one edge to 3-deg in curr level and leave third edge dangling
			ans = (ans + 1LL * last_3 * curr_3 * dp(i+1, last_2+1, last_3-1, curr_2+2, curr_3-1)) % MOD;

			//connect one edge to 3-deg in prev level, one edge to 2-deg in curr level and third edge to 3-deg in curr level
			ans = (ans + 1LL * last_3 * curr_2 * curr_3 * dp(i+1, last_2+1, last_3-1, curr_2-1+1, curr_3-1)) % MOD;

			//connect one edge to 3-deg in prev level, and other two edges to 2-deg in curr level
			ans = (ans + 1LL * last_3 * (curr_2 * (curr_2-1))/2 * dp(i+1, last_2+1, last_3-1, curr_2-2, curr_3)) % MOD;

			//connect one edge to 3-deg in prev level, and other two edges to 3-deg in curr level
			ans = (ans + 1LL * last_3 * (curr_3 * (curr_3-1))/2 * dp(i+1, last_2+1, last_3-1, curr_2+2, curr_3-2)) % MOD;
		}
	}


// cout<<"dp "<<i<<" "<<last_2<<" "<<last_3<<" "<<curr_2<<" "<<curr_3<<" returns "<<ans<<endl;
	return ans;
}

 

int main(){
 
    ios_base::sync_with_stdio(0);
    cin.tie(0);

 	cin>>n;
 	for(int i=1;i<=n;i++)
 		cin>>arr[i];

 	memset(DP, -1, sizeof(DP));
 	cout<<dp(3, (arr[1]==2), (arr[1]==3), (arr[2]==2), (arr[2]==3));
    return 0;
}
 
 
 








