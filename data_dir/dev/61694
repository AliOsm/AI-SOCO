#include <iostream>
#include <set>
#include <vector>
#include <algorithm>
#include <map>
using namespace std;
struct item{
  int d;
  int t;
  int p;
  int id;
}s;

bool cmp(item a, item b){
  return a.d<b.d;
}
map<pair<int,int>,pair<int,pair<int,int>>>mp;
int dp[2001][102];
int N;
int mx=0,ansx=0,ansy=0;
vector<struct item>v;

int main()
{
  cin>>N;
  for (int i=1;i<=N;i++){
    cin>>s.t>>s.d>>s.p;
    s.id=i;
    v.push_back(s);
  }
  sort(v.begin(),v.end(),cmp);
  for (int i=0;i<=2000;i++){
    for (int j=0;j<N;j++){
      if (dp[i][j]>dp[i][j+1]){
	mp[make_pair(i,j+1)]=make_pair(-1,make_pair(i,j));
	dp[i][j+1]=dp[i][j];
      }
      if (i+v[j].t<v[j].d && dp[i][j]+v[j].p>dp[i+v[j].t][j+1]){
	mp[make_pair(i+v[j].t,j+1)]=make_pair(v[j].id,make_pair(i,j));
	dp[i+v[j].t][j+1]=dp[i][j]+v[j].p;
	if (dp[i+v[j].t][j+1]>mx){
	  mx=dp[i+v[j].t][j+1];
	  ansx=i+v[j].t;
	  ansy=j+1;
	}
      }
    }
  }
  vector<int>ans;
  while (mp.count(make_pair(ansx,ansy))==1){
    if (mp[make_pair(ansx,ansy)].first!=-1)
      ans.push_back(mp[make_pair(ansx,ansy)].first);
    ansx=mp[make_pair(ansx,ansy)].second.first;
    ansy=mp[make_pair(ansx,ansy)].second.second;
  }
  cout<<mx<<endl;
  cout<<ans.size()<<endl;
  for (int i=ans.size()-1;i>=0;i--)
    cout<<ans[i]<<' ';
  cout<<endl;
  return 0;
}
