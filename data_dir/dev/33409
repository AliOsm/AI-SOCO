#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 6e3 + 7;

int n, T[N][N];

void readline(int i)
{
    int j = 1;
    char c = _getchar_nolock();
    while(('0' <= c && c <= '9') || ('A' <= c && c <= 'F'))
    {
        if('0' <= c && c <= '9')
        {
            c = c - '0';
        }
        else
        {
            c = c - 'A' + 10;
        }
        
        T[i][j + 3] = c & 1;
        c /= 2;
        T[i][j + 2] = c & 1;
        c /= 2;
        T[i][j + 1] = c & 1;
        c /= 2;
        T[i][j + 0] = c & 1;
        j += 4;

        c = _getchar_nolock();
    }
}

int main()
{
    scanf("%d\n", &n);
    for(int i = 1; i <= n; i++)
    {
        readline(i);
    }
    vector < int > divs;
    for(int i = 2; i <= n; i++)
    {
        if(n % i == 0)
        {
            divs.push_back(i);
        }
    }

    for(int i = 1; i <= n; i++)
    {
        for(int j = 1; j <= n; j++)
        {
            T[i][j] += T[i][j - 1] + T[i - 1][j] - T[i - 1][j - 1];
        }
    }

    int ans = 1;
    for(auto x: divs)
    {
        bool ok = true;
        for(int i = x; i <= n; i += x)
        {
            for(int j = x; j <= n; j += x)
            {
                int sm = T[i][j] - T[i - x][j] - T[i][j - x] + T[i - x][j - x];
                if(!(sm == x * x || sm == 0))
                {
                    ok = false;
                    break;
                }
            }
            if(!ok)
            {
                break;
            }
        }
        if(ok)
        {
            ans = x;
        }
    }
    cout << ans << "\n";
	return 0;
}
