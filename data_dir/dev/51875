#include "bits/stdc++.h"
// #include "ext/pb_ds/assoc_container.hpp"
// #include "ext/pb_ds/tree_policy.hpp"
// using namespace __gnu_pbds;
using namespace std;
typedef long long int ll;
#define int long long
#define pb push_back
#define fi first
#define se second
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define all(x) x.begin(), x.end()
#define IO ios :: sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define pii pair<int,int>
#define sz(x) (int)x.size()
const int mod = 1e9 + 7;
const int mod1 = 998244353;
typedef long double f80;

#ifndef LOCAL
#pragma GCC optimize ("O2")
#define endl '\n'
#endif

// template<typename T>
// using ordered_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){
    uniform_int_distribution<int> uid(l, r);
    return uid(rng);
}

ll pwr(ll a,ll b, ll mod){
    a %= mod;
    int ans = 1;
    while(b){
        if(b & 1) ans = (ans * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return ans;
}

string to_string(string s) {
  return '"' + s + '"';
}

string to_string(const char* s) {
  return to_string((string) s);
}

string to_string(bool b) {
  return (b ? "true" : "false");
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

const int N = 1e5 + 5;
pii tr[4 * N];
int lz[4 * N];
int lol[N], a[N];
vector<int> v1;
vector<pii> v;

inline pii merge(pii a, pii b){
	return {a.fi + b.fi, a.se + b.se};
}

void build(int nd,int s,int e){
	lz[nd] = -1;
	if(s == e){
		if(a[v[s].se] >= 0) tr[nd] = {0, 1};
		else tr[nd] = {1, 0};
		return;
	}
	int m = (s + e) >> 1;
	build(nd << 1, s, m);
	build(nd << 1 | 1, m + 1, e);
	tr[nd] = merge(tr[nd << 1], tr[nd << 1 | 1]);
}
pii add(pii a, int b){
	if(b == 0){
		a.fi += a.se;
		a.se = 0;
	}
	else if(b == 1){
		a.se += a.fi;
		a.fi = 0;
	}
	else if(b == 2){
		swap(a.fi, a.se);
	}
	return a;
}
int add(int a,int b){
	if(a == 0){
		if(b == 2) return 1;
		return b;
	}
	if(a == 1){
		if(b == 2) return 0;
		return b;
	}
	if(a == 2){
		if(b == 2) return -1;
		return b;
	}
	return b;
}
void push_down(int nd,int s,int e){
	if(lz[nd] == -1) return;
	tr[nd] = add(tr[nd], lz[nd]);
	if(s != e){
		lz[nd << 1] = add(lz[nd << 1], lz[nd]);
		lz[nd << 1 | 1] = add(lz[nd << 1 | 1], lz[nd]);
	}
	lz[nd] = -1;
}
void upd(int nd,int s,int e,int l,int r,int val){
	push_down(nd, s, e);
	if(s > r || e < l || l > r) return;
	if(l <= s && e <= r){
		lz[nd] = add(lz[nd], val);
		push_down(nd, s, e);
		return;
	}
	int m = (s + e) >> 1;
	upd(nd << 1, s, m, l, r, val);
	upd(nd << 1 | 1, m + 1, e, l, r, val);
	tr[nd] = merge(tr[nd << 1], tr[nd << 1 | 1]);
}
void build1(int nd,int s,int e){
	push_down(nd, s, e);
	if(s == e){
		if(tr[nd].fi) lol[s] = -1;
		else lol[s] = 1;
		return;
	}
	int m = (s + e) >> 1;
	build1(nd << 1, s, m);
	build1(nd << 1 | 1, m + 1, e);
}
void solve(){
    int n, q;
    cin >> n >> q;
    fr(i, 0, n - 1){
        cin >> a[i];
        v.pb({abs(a[i]), i});
        v1.pb(abs(a[i]));
    }
    sort(all(v1));
    sort(all(v));
    build(1, 0, n - 1);
    fr(i, 1, q){
        char ch;
        int x;
        cin >> ch >> x;
        if(ch == '<'){
            if(x < 0)
            {
                int idx = upper_bound(all(v1), abs(x)) - v1.begin();
                upd(1, 0, n - 1, idx, n - 1, 1);
            }
            else{
                int idx = lower_bound(all(v1), abs(x)) - v1.begin();
                upd(1, 0, n - 1, idx, n - 1, 1);
                upd(1, 0, n - 1, 0, idx - 1, 2);
            }
        }
        else{
            if(x > 0)
            {
                int idx = upper_bound(all(v1), abs(x)) - v1.begin();
                upd(1, 0, n - 1, idx, n - 1, 0);
            }
            else{
                int idx = lower_bound(all(v1), abs(x)) - v1.begin();
                upd(1, 0, n - 1, idx, n - 1, 0);
                upd(1, 0, n - 1, 0, idx - 1, 2);
            }
        }
    }
    build1(1, 0, n - 1);
    vector<int> ans(n);
    fr(i, 0, n - 1){
    	ans[v[i].se] = lol[i] * abs(v[i].fi);
    }
    for(int x : ans)
    	cout << x << " ";
}
signed main(){
    IO;
    #ifdef LOCAL
        freopen("inp.txt","r", stdin);
        freopen("out.txt", "w", stdout);
    #endif
    int t = 1;
    // cin >> t;
    fr(tt, 1, t){
        solve();
    }
    return 0;
}