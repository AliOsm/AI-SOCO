#include<bits/stdc++.h>
using namespace std;

#define ff first
#define ss second
typedef pair<int, int> pii;
typedef long long ll;

const int N = 200 * 1000 + 10, M = 1000 * 1000 + 20;
int st, en, a[N], n, m, sqr, t[N], l[N], r[N], cnt[M];
ll sum, ans[N];

void addL() {
    sum += (cnt[a[st - 1]] * 2 + 1) * a[st - 1];
    cnt[a[st - 1]]++;
    st--;
}

void addR() {
    sum += (cnt[a[en]] * 2 + 1) * a[en];
    cnt[a[en]]++;
    en++;
}

void eraseL() {
    sum -= (cnt[a[st]] * 2 - 1) * a[st];
    cnt[a[st]]--;
    st++;
}

void eraseR() {
    sum -= (cnt[a[en - 1]] * 2 - 1) * a[en - 1];
    cnt[a[en - 1]]--;
    en--;
}

bool cmp(int x, int y) {
    if (l[x] / sqr == l[y] / sqr) 
        return r[x] < r[y];
    return l[x] < l[y];
}

int main() {
    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
    cin >> n >> m;
    for (int i = 0; i < n; i++)
        cin >> a[i];
    for (int i = 0; i < m; i++) {
        cin >> l[i] >> r[i];
        l[i]--;
    }
    sqr = sqrt(n);
    iota(t, t + m, 0);
    sort(t, t + m, cmp);
    st = en = l[t[0]];
    for (int i = 0; i < m; i++) {
        while (st != l[t[i]] || en != r[t[i]]) {
            if (st < l[t[i]] && en < r[t[i]]) {
                addR();
                eraseL();
            }
            else if (st < l[t[i]] && en > r[t[i]]) {
                eraseL();
                eraseR();
            }
            else if (st > l[t[i]] && en < r[t[i]]) {
                addL();
                addR();
            }
            else if (st > l[t[i]] && en > r[t[i]]) {
                addL();
                eraseR();
            }
            else if (st < l[t[i]])
                eraseL();
            else if (st > l[t[i]])
                addL();
            else if (en < r[t[i]])
                addR();
            else if (en > r[t[i]])
                eraseR();
        }
        ans[t[i]] = sum;
    }
    for (int i = 0; i < m; i++)
        cout << ans[i] << "\n";
    return 0;
}