#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <bitset>
#include <deque>
#include <numeric>
#include <iterator>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>
#include <climits>
#include <sys/time.h>

using namespace std;

int fen[300010];
void ins(int x,int v){
	x += 3;
	while(x <= 300000){
		fen[x] += v;
		x += x & -x;
	}
}
int que(int x){
	x += 3;
	int ret = 0;
	while(x > 0){
		ret += fen[x];
		x -= x & -x;
	}
	return ret;
}
int fen2[300010];
void ins2(int x,int v){
	x += 3;
	while(x > 0){
		fen2[x] += v;
		x -= x & -x;
	}
}
int que2(int x){
	x += 3;
	int ret = 0;
	while(x <= 300000){
		ret += fen2[x];
		x += x & -x;
	}
	return ret;
}

int main(){
	int N;
	cin >> N;
	vector<int> V(N);
	vector<int> O, Z;
	for (int i = 0; i < N; ++i) {
		cin >> V[i];
		if(V[i]){
			ins(i+1,1);
			O.push_back(i);
		}
		else{
			ins2(i-1,1);
			Z.push_back(i);
		}
	}
	reverse(Z.begin(),Z.end());
	int i0 = 0, i1 = 0;
//	while(i0 < Z.size() || i1 < Z.size()){
//		int c0 = i0 == Z.size() ? 1000000000 : que(Z[i0]) + que2(Z[i0]);
//		int c1 = i1 == O.size() ? 1000000000 : que(O[i1]) + que2(O[i1]);
//		if(c0 < c1){
//			
//		}else{
//			
//		}
//	}
	long long l = 0;
	for(int i = 0; i < Z.size(); ++i){
		l += que(Z[i]) + que2(Z[i]);
		ins2(Z[i]-1,-1);
	}
	for(int i = 0; i < O.size(); ++i){
		l += que(O[i]) + que2(O[i]);
		ins(O[i]+1,-1);
	}
//	for(int i = 0; i < P.size(); ++i){
//		int id = abs(P[i].second);
//		cout << id << endl;
//		for(int j = 0; j < 10; ++j){
//			cout << que(j) << " ";
//		}
//		cout << endl;
//		for(int j = 0; j < 10; ++j){
//			cout << que2(j) << " ";
//		}
//		cout << endl;
//		cout << endl;
//		l += que(id) + que2(id);
//		if(V[id])
//			ins(id+1,-1);
//		else
//			ins2(id-1,-1);
//	}
	cout << l << endl;
	
	
}
