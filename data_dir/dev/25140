#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define f(i, x, n) for(int i = x; i < (int)(n); ++i)

int n, m;
vector<int> x[3];
vector<ll> z;
ll an = 0, I;

void go(){
	ll e = I;
	int s = m;
	f(i, -1, x[2].size()){
		if (i >= 0)e += x[2][x[2].size() - (i + 1)], s -= 3;
		if (s < 0)break;
		if (!z.empty() && s >= 2)e += z[min((int)z.size() - 1, s - 2 >> 1)];
		an = max(an, e);
		if (!z.empty() && s >= 2)e -= z[min((int)z.size() - 1, s - 2 >> 1)];
	}
}

void plZ(){
	z.clear();
	int i = 0, j = 0;
	reverse(x[0].begin(), x[0].end());
	reverse(x[1].begin(), x[1].end());
	while (i < x[0].size() || j < x[1].size()){
		bool one;
		if (i >= (int)x[0].size())one = false;
		else if (j == x[1].size())one = true;
		else {
			int y = x[0][i];
			if (i + 1 < x[0].size())y += x[0][i + 1];
			if (y < x[1][j])one = false;
			else one = true;
		}
		if (one){
			int y = x[0][i];
			if (i + 1 < x[0].size())y += x[0][i + 1];
			z.push_back(y);
			i += 2;
		}
		else {
			z.push_back(x[1][j]);
			++j;
		}
		if (z.size() > 1)z.back() += z[z.size() - 2];
	}
	reverse(x[0].begin(), x[0].end());
	reverse(x[1].begin(), x[1].end());
}

int main(){
	scanf("%d%d", &n, &m);
	f(i, 0, n){
		int a, b;
		scanf("%d%d", &a, &b);
		x[a - 1].push_back(b);
	}
	f(i, 0, 3)sort(x[i].begin(), x[i].end());
	plZ();
	go();
	if (!x[0].empty()){
		I = x[0].back();
		x[0].pop_back();
		--m;
		plZ();
		go();
	}
	printf("%lld\n", an);
}