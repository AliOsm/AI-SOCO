#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")

#include "bits/stdc++.h"
using namespace std;

#define pb push_back
#define F first
#define S second
#define f(i,a,b)  for(int i = a; i < b; i++)
#define endl '\n'

using ll = long long;
using db = long double;
using ii = pair<int, int>;

const int N = 4e5 + 5, LG = 19, MOD = 1e9 + 7;
const int SQ =450;
const long double EPS = 1e-7;

char grid[1005][1005];
int n, m;
set<int> r, c;
bool okr[1005], okc[1005];
const int dx[] = {-1,1,0,0};
const int dy[] = {0,0,-1,1};
void dfs(int x, int y){
  grid[x][y] = '.';
  f(k,0,4){
    int nx = x + dx[k];
    int ny = y + dy[k];
    if(nx >= 0 && ny >= 0 && nx < n && ny < m && grid[nx][ny] == '#'){
      dfs(nx,ny);
    }
  }

}
int32_t main(){
#ifdef ONLINE_JUDGE
    ios_base::sync_with_stdio(0);
    cin.tie(0);
#endif

  cin >> n >> m;

  f(i,0,n)r.insert(i);
  f(i,0,m)c.insert(i);

  for(int i = 0; i < n; i++){

      for(int j = 0; j < m; j++){

        cin >> grid[i][j];
        if(grid[i][j] == '#'){
          r.erase(i);
          c.erase(j);
        }

      }

  }


  ///check rows;
  ///if there are 2 different black segments in  a row or a column answer is
  f(i,0,n){
    int cnt = 0;
    f(j,0,m){
      if(grid[i][j] == '#'){
        if(!j || grid[i][j-1] == '.')
          cnt++;
      }
    }
    if(cnt >= 2){
      cout << -1 << endl;
      return 0;
    }
    if(cnt == 0)okr[i] = true;
  }

  f(j,0,m){
    int cnt = 0;
    f(i,0,n){
      if(grid[i][j] == '#')
        if(!i || grid[i-1][j] == '.')
        cnt++;
    }
    if(cnt >= 2){
      cout << -1 << endl;
      return 0;
    }
    if(cnt == 0)okc[j] = true;
  }

  f(i,0,n)
    f(j,0,m){
      if(okr[i] && okc[j])
        r.erase(i), c.erase(j);
    }

  if(r.size() + c.size()){
    cout << -1 << endl;
    return 0;
  }


  int ans= 0 ;

  f(i,0,n)
    f(j,0,m)
      if(grid[i][j] == '#'){
        ans++;
        dfs(i,j);
      }

  cout << ans << endl;


  return 0;
}
