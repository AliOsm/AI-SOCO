#include<bits/stdc++.h>
#define lf double
#define ll long long
#define ull unsigned ll
#define ii pair<int,int>
#define li pair<ll,ll>
#define iii pair<ii,int>
#define iiii pair<ii,ii>
#define iiii2 pair<int,iii>
#define lli pair<ll,int>
#define pll pair<ll,ll>
#define heap priority_queue
#define mp make_pair
#define st first
#define nd second
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define all(x) x.begin(),x.end()
#define len(x) strlen(x)
#define sz(x) (int) x.size()
#define orta ((bas+son)/2)
#define min3(x,y,z) min(min(x,y),z)
#define max3(x,y,z) max(max(x,y),z)
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define MOD 1000000007
#define inf 2000000009
#define N 100005
#define LOG 20
#define magic 100
#define M 160005
#define KOK 350
#define EPS 0.0025
#define pw(x) (1<<(x))
#define PI 3.1415926535
#define log sfeefw
using namespace std;

int n,m,x,q,y,a;
int baba[LOG+2][N],der[N];
vector<int> data[LOG+2][N],v[N];

int getlca(int x,int y) {

	if(der[x]<der[y]) swap(x,y);

	int dx=der[x];
	int dy=der[y];

	for(int i=LOG;i>=0;i--) {

		if(dx-pw(i)>=dy) {

			dx-=pw(i);
			x=baba[i][x];

		}

	}

	if(x==y) return x;

	for(int i=LOG;i>=0;i--) {

		if(baba[i][x]!=baba[i][y]) {

			x=baba[i][x];
			y=baba[i][y];

		}

	}

	return baba[0][x];

}

void merge(vector<int> &a,vector<int> &b,vector<int> &c) {

	int tot=0;

	int n1=0,n2=0;

	while(tot<10 && (n1<sz(b) || n2<sz(c))) {

		if(n1<sz(b) && (n2==sz(c) || (n2!=sz(c)?b[n1]<=c[n2]:1))) {

			a.pb(b[n1]);

			n1++;

		}
		else {

			a.pb(c[n2]);

			n2++;

		}

		tot++;

	}

}

void buildLCA() {

	for(int i=1;i<=LOG;i++) {

		for(int j=1;j<=n;j++) {

			baba[i][j]=baba[i-1][baba[i-1][j]];

			merge(data[i][j],data[i-1][j],data[i-1][baba[i-1][j]]);

		}

	}

}

void dfs(int node,int ata) {

	baba[0][node]=ata;
	der[node]=der[ata]+1;

	for(int i:v[node]) {

		if(i==ata) continue ;

		dfs(i,node);

	}

}

int main() {
 	
 	scanf("%d %d %d",&n,&m,&q);

 	for(int i=1;i<n;i++) {

 		scanf("%d %d",&x,&y);

 		v[x].pb(y);
 		v[y].pb(x);

 	}

 	for(int i=1;i<=m;i++) {

 		scanf("%d",&x);

 		data[0][x].pb(i);

 	}

 	for(int i=1;i<=n;i++) {

 		sort(all(data[0][i]));

 		while(sz(data[0][i])>10) data[0][i].ppb();

 	}

 	dfs(1,0);

 	buildLCA();

 	for(int i=1;i<=q;i++) {

 		scanf("%d %d %d",&x,&y,&a);

 		int lca=getlca(x,y);

 		int dx=der[x],dy=der[y];

 		vector<int> vx,vy;

 		for(int j=LOG;j>=0;j--) {

 			if(dx-pw(j)>=der[lca]-1) {

 				vector<int> last;

 				merge(last,vx,data[j][x]);

 				x=baba[j][x];

 				vx=last;

 				dx-=pw(j);

 			}

 			if(dy-pw(j)>=der[lca]) {

 				vector<int> last;

 				merge(last,vy,data[j][y]);

 				y=baba[j][y];

 				vy=last;

 				dy-=pw(j);

 			}

 		}

 		vector<int> res;

 		merge(res,vx,vy);

 		printf("%d ",min(sz(res),a));

 		for(int i=0;i<min(sz(res),a);i++) {

 			printf("%d ",res[i]);

 		}

 		puts("");

 	}

}  