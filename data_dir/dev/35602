#include<bits/stdc++.h>
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
using namespace std;
const ll mod=1e9+7;         
const int N=1e5+4;
//
vector<int> v[N],vec[N];

int cnt[N],col[N],sz[N];

ll final[N],sum[N];

void dfs_util(int node,int par)
{
    sz[node]=1;
    
    for(int it:v[node])
    if(it!=par)
    {
        dfs_util(it,node);
        
        sz[node]+=sz[it];
    }
}

int dfs(int node,int par,int keep)
{
    int mx=-1,big_child=-1;
    
    for(int it:v[node])
    if(it!=par)
    {
        if(sz[it]>mx)
        mx=sz[it],big_child=it;
    }
    
    mx=-1;
    
    for(int it:v[node])
    if(it!=par&&it!=big_child)
    dfs(it,node,0);
    
    if(big_child!=-1)     //don't forget checking this condition whenever you use big_child
    {
        mx=max(mx,dfs(big_child,node,1));
        
        swap(vec[node],vec[big_child]);
    }
    
    vec[node].pb(node);
    
    sum[cnt[col[node]]]-=(ll)col[node];
    
    cnt[col[node]]++;
    
    mx=max(mx,cnt[col[node]]);
    
    sum[cnt[col[node]]]+=(ll)col[node];
    
    for(int it:v[node])
    if(it!=par&&it!=big_child)
    {
        for(int x:vec[it])
        {
            sum[cnt[col[x]]]-=(ll)col[x];
            
            cnt[col[x]]++;
            
            mx=max(mx,cnt[col[x]]);
            
            sum[cnt[col[x]]]+=(ll)col[x];
            
            vec[node].pb(x);
        }
    }
    
    final[node]=sum[mx];
    
    if(keep==0)
    {
        for(int x:vec[node])
        {
            sum[cnt[col[x]]]-=(ll)col[x];
            
            cnt[col[x]]--;
            
            sum[cnt[col[x]]]+=(ll)col[x];
        }
    }
    
    return mx;
}

int main()                  
{
    int n;
    
    scn(n);
    
    rep(i,1,n+1)
    scn(col[i]);
    
    rep(i,0,n-1)
    {
        int a,b;
        
        scn(a);  scn(b);
        
        v[a].pb(b);
        
        v[b].pb(a);
    }
    
    dfs_util(1,-1);
    
    dfs(1,-1,0);
    
    rep(i,1,n+1)
    printf("%lld ",final[i]);
}