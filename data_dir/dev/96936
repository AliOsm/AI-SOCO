#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#define x first
#define y second
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define sz(v) (int)v.size()
#define up_b upper_bound
#define low_b lower_bound
#define nl '\n'

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;

const int N=1e5+11;
const int M=2e6+11;
const int W=1e3+11;
const int inf=1e9;
const ll INF=1e18;
const ll mod=1e9+7;
const ld EPS=1e-9;

set<int>g[26];
int cycle=0;
int used[26];
int cnt=0;
vector<int>res[2];

void dfs(int v,int p){
  used[v]=1;
  res[cnt].pb(v);
  for(auto to:g[v]){
    if(to==p)continue;
    if(used[to]==2)continue;
    if(used[to]==1){
      cycle=1;
      continue;
    }
    dfs(to,v);
  }
  used[v]=2;
}

int main(){
  ios_base::sync_with_stdio(0);
  cin.tie(0),cout.tie(0);
  int T;
  cin>>T;
  while(T--){
    string s;
    cin>>s;
    int n=sz(s);
    for(int i=0;i<n-1;i++){
      g[s[i]-'a'].insert(s[i+1]-'a');
      g[s[i+1]-'a'].insert(s[i]-'a');
    }
    int w=0;
    for(int i=0;i<26;i++){
      if(sz(g[i])>2){
        w=1;
        break;
      }
    }
    if(w)cout<<"NO";
    else{
      vector<int>ans;
      for(int i=0;i<26;i++){
        if(used[i])continue;
        used[i]=1;
        res[0].clear();
        res[1].clear();
        cnt=0;
        for(auto to:g[i]){
          dfs(to,i);
          if(cycle){
            w=1;
            break;
          }
          cnt++;
        }
        if(w)break;
        reverse(all(res[1]));
        for(int j=0;j<sz(res[1]);j++){
          ans.pb(res[1][j]);
        }
        ans.pb(i);
        for(int j=0;j<sz(res[0]);j++){
          ans.pb(res[0][j]);
        }
      }
      if(w)cout<<"NO";
      else{
        cout<<"YES\n";
        for(int i=0;i<sz(ans);i++){
          cout<<char(ans[i]+'a');
        }
      }
    }
    cout<<nl;
    for(int i=0;i<26;i++){
      g[i].clear();
      used[i]=0;
    }
    cycle=0;
  }
}
