#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define x first
#define y second
#define mp make_pair
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define bit __builtin_popcount
#define all(x) x.begin(),x.end()
#define show(x) cout<<(#x)<<" is "<<(x)<<endl

using namespace std;
using namespace __gnu_pbds;

template<typename T> using indexed_set=tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll,ll> pll;
typedef pair<int,int> pii;
typedef pair<int,ll> pil;
typedef pair<ll,int> pli;

const ll INF=1e18+123;
const ld EPS=1e-9;
const int inf=1e9+123;
const int MOD=1e9+7;
const int N=1e6+123;
const int M=1e7+123;
const int dx[]={0,0,1,-1};
const int dy[]={1,-1,0,0};

int x,cnt[M];

ll q[M];

vector<int>p;

bool b[M];

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++){
        scanf("%d",&x);
        cnt[x]++;
    }
    for(int i=2;i<M;i++){
        if(b[i])continue;
        p.push_back(i);
        //if(1ll*i*i>M)continue;
        for(int j=i;j<M;j+=i){
            q[sz(p)]+=cnt[j];
            b[j]=1;
        }
        q[sz(p)]+=q[sz(p)-1];
    }
    int m,l,r;
    scanf("%d",&m);
    while(m--){
        scanf("%d%d",&l,&r);
        l=low_b(all(p),l)-p.begin();
        r=up_b(all(p),r)-p.begin();
        printf("%lld ",q[r]-q[l]);
    }
    return 0;
}
