#include <bits/stdc++.h>
using namespace std;

#define REP(i, n) for(int i = 0; i < n; i++)
#define clr(t, val) memset(t, val, sizeof(t))

#define all(v)  v.begin() , v.end()
#define SZ(v) ((int)(v).size())

typedef long long Long;
typedef vector<int> vInt;
typedef vector<string> vStr;
typedef pair<int, int> Pair;

vStr add(vStr curList, string phone) {
	curList.push_back(phone);
	return curList;
}

vStr fix(vStr curList) {
	while (true) {
		bool found = false;
		int posX = -1;
		REP (i, SZ(curList)) {
			REP(j , SZ(curList)) {
				if (i == j) {
					continue;
				}
				string x = curList[i];
				string y = curList[j];
				if (SZ(x) <= SZ(y) && y.substr(SZ(y) - SZ(x)) == x) {
					found = true;
					posX = i;
				}
			}
		}
		if (found) {
			curList.erase(curList.begin() + posX);
		} else {
			break;
		}
	}
	return curList;
}


int main() {
	int people;
	while (cin >> people) {
		map<string,vStr> directories;
		REP (p, people) {
			string name;
			int len;
			cin >> name >> len;
			REP (i, len) {
				string phone;
				cin >> phone;
				vStr curList = directories[name];
				vStr newList = add(curList, phone);
				directories[name] = newList;
			}
		}
		cout << SZ(directories) << '\n';
		for (auto directory:directories) {
			auto name = directory.first;
			auto phones = fix(directory.second);
			cout << name << " " << SZ(phones);
			for(auto phone:phones) {
				cout << " " << phone;
			}
			cout << '\n';
		}
	}
}

