#include <stdio.h>
#include <string.h>
#include <math.h>
#include <algorithm>
using namespace std;
typedef long long LL;
struct Node
{
    LL x,y;
};
Node p[10000010];
bool cmp(const Node &a,const Node &b)
{
    if (a.x!=b.x) return a.x<b.x;
    return a.y<b.y;
}
LL cal(long long x)
{
    if (x<0) return 0;
    return (LL)(sqrt((double)x)+1e-8)+1;
}
int main()
{
    int n,m;
    while (scanf("%d%d",&n,&m)==2)
    {
        //Calculate irrational numbers
        LL anss=0;
        int cntt=0;
        for (int i=1;i<=n;i++)
        {
            LL num=(LL)i*i;
            LL low=max(0LL,num-m);
            LL high=num-1;
            anss+=-(cal(high)-cal(low-1))+high-low+1;
            LL left=cal(low-1),right=cal(high)-1;
            if (left>right) continue;
            p[cntt].x=-i+left;
            p[cntt++].y=-i+right;
            p[cntt].x=-i-right;
            p[cntt++].y=-i-left;
        }
        anss*=2;
        //Calculate rational numbers
        sort(p,p+cntt,cmp);
        LL R;
        for (int i=0;i<cntt;i++)
        {
            if (i==0) anss+=p[i].y-p[i].x+1;
            else if (p[i].x>R) anss+=p[i].y-p[i].x+1;
            else if (p[i].y>R) anss+=p[i].y-R;
            if (i==0) R=p[i].y;
            else R=max(R,p[i].y);
        }
        printf("%I64d\n",anss);
    }
    return 0;
}
