#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back
#define mp make_pair
#define F first
#define S second
const ll N = 100005;
ll tree[4 * N], a[N];
string str;
void build(ll node, ll l, ll r) {
	if(l == r) {
		tree[node] = a[l];
		return;
	}
	ll mid = (l + r) / 2;
	build(node * 2, l, mid);
	build(node * 2 + 1, mid + 1, r);
	tree[node] = tree[node * 2] | tree[node * 2 + 1];
	return;
}
ll query(ll node, ll L, ll R, ll l, ll r) {
	if(r < L || l > R) return 0;
	if(l >= L && r <= R) return tree[node];
	ll mid = (l + r) / 2;
	ll left = query(node * 2, L, R, l, mid);
	ll right = query(node * 2 + 1, L, R, mid + 1, r);
	return left | right;
}
void update(ll node, ll idx, ll val, ll l, ll r) {
	if(l == r) {
		tree[node] = val;
		return;
	}
	ll mid = (l + r) / 2;
	if(l <= idx && idx <= mid) update(node * 2, idx, val, l, mid);
	else update(node * 2 + 1, idx, val, mid + 1, r);
	tree[node] = tree[node * 2] | tree[node * 2 + 1];
	return;
}
int main() {
	ll n, i, q, t, l, r;
	char c;
	cin >> str >> q;
	n = str.size();
	for(i = 1; i <= n; i++)
		a[i] = (1 << (str[i - 1] - 'a'));
	build(1, 1, n);
	while(q--) {
		cin >> t >> l;
		if(t == 2) {
			cin >> r;
			cout << __builtin_popcount(query(1, l, r, 1, n)) << "\n";
		}
		else {
			cin >> c;
			update(1, l, 1 << (c - 'a'), 1, n);
		}
	}
	return 0;
}