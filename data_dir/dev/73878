#include<bits/stdc++.h>
using namespace std ;
#define LL long long
#define mod 1000000007LL
#define PI acos(-1.0)


/*
// Ordered set
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template<typename T> using orderset = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
//orderset<int> s ; //orderset<int>::iterator it ;
//orderset<int> X; //X.insert(1); //X.insert(2); //X.insert(4); //X.insert(8); //X.insert(16);
//cout<<*X.find_by_order(1)<<endl; // 2 //cout<<*X.find_by_order(2)<<endl; // 4 //cout<<*X.find_by_order(4)<<endl; // 16 //cout<<(end(X)==X.find_by_order(6))<<endl; // true
//cout<<X.order_of_key(-5)<<endl;  // 0 //cout<<X.order_of_key(1)<<endl;   // 0 //cout<<X.order_of_key(3)<<endl;   // 2 //cout<<X.order_of_key(4)<<endl;   // 2 //cout<<X.order_of_key(400)<<endl; // 5
*/

LL n , k ;
LL a[100005] ;

map < vector< pair< LL , LL > > , LL > ma ;

void Input(){
    scanf("%lld%lld",&n,&k) ;
    for( int i = 1 ; i <= n ; i ++ ){
        scanf("%lld",&a[i]) ;
    }
}

vector< pair< LL , LL > > Factorize( LL val ){
    vector< pair< LL , LL > > store ;
    if( val % 2 == 0 ){
        LL tot = 0 ;
        while( val % 2 == 0 ){
            tot ++ ;
            val /= 2 ;
        }
        tot %= k ;
        if( tot ) store.push_back({2,tot}) ;
    }
    for( int i = 3 ; i * i <= val ; i += 2 ){
        if( val % i == 0 ){
            LL tot = 0 ;
            while( val % i == 0 ){
                tot ++ ;
                val /= i ;
            }
            tot %= k ;
            if( tot ) store.push_back({i,tot}) ;
        }
    }
    if( val > 2 ){
        store.push_back({val,1}) ;
    }
    return store ;
}

void Calculation(){
    LL res = 0 , zero = 0 ;
    for( int i = 1 ; i <= n ; i ++ ){
        vector< pair< LL , LL > > now = Factorize( a[i] ) ;
        if( now.size() ){
            vector< pair< LL , LL > > tmp ;
            for( int i = 0 ; i < now.size() ; i ++ ){
                tmp.push_back({now[i].first,k-now[i].second}) ;
            }
            res += ma[tmp] ;
            ma[now] ++ ;
        }
        else{
            res += zero ;
            zero ++ ;
        }
    }
    printf("%lld\n",res) ;
}

void Solve(){
    Input() ;
    Calculation() ;
}

int main()
{
    LL q ;
    //freopen("input.txt","r",stdin) ;
    //scanf("%lld",&q) ;
    q = 1 ;
    while( q-- ) Solve() ;
    return 0 ;
}
