#include <bits/stdc++.h>

using namespace std;
using namespace __gnu_cxx;

typedef double db;
typedef long long ll;
typedef pair<db, db> pdd;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef unsigned long long ull;

#define F          first
#define S          second
#define pnl        printf("\n")
#define sz(x)      (int)x.size()
#define sf(x)      scanf("%d",&x)
#define pf(x)      printf("%d\n",x)
#define all(x)     x.begin(),x.end()
#define rall(x)    x.rbegin(),x.rend()
#define rep(i, n)  for(int i = 0; i < n; ++i)

const db eps = 1e-9;
const db pi = acos(-1);
const int INF = 0x3f3f3f3f;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;
const int mod = 1000 * 1000 * 1000 + 7;

int n;
int a[12][12];
pair<int,int> b[105];

pii dp[105][105][50][4];

pii solve(int cur, int loc, int stp, int me) {
    if (stp == 50) return {INF, INF};
    if (cur == n * n) return {0, 0};
    pii &ret = dp[cur][loc][stp][me];
    if (~ret.F) return ret;
    ret = {INF, INF};
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (a[i][j] == loc) continue;
            int x = b[loc].F, y = b[loc].S;
            pii nxt;
            // knight
            if (abs(i - x) == 1 && abs(j - y) == 2) {
                nxt = solve(cur + (a[i][j]==cur+1), a[i][j], (a[i][j]==cur+1)?0:stp+1, 0);
                nxt.F += 1+(me!=0), nxt.S += (me!=0);
                if (nxt.F < ret.F) ret = nxt;
                else if (nxt.F == ret.F && nxt.S < ret.S) ret = nxt;
            }
            if (abs(i - x) == 2 && abs(j - y) == 1) {
                nxt = solve(cur + (a[i][j]==cur+1), a[i][j], (a[i][j]==cur+1)?0:stp+1, 0);
                nxt.F += 1+(me!=0), nxt.S += (me!=0);
                if (nxt.F < ret.F) ret = nxt;
                else if (nxt.F == ret.F && nxt.S < ret.S) ret = nxt;
            }

            // bishop
            if (abs(i - x) == abs(j - y)) {
                nxt = solve(cur + (a[i][j]==cur+1), a[i][j], (a[i][j]==cur+1)?0:stp+1, 1);
                nxt.F += 1+(me!=1), nxt.S += (me!=1);
                if (nxt.F < ret.F) ret = nxt;
                else if (nxt.F == ret.F && nxt.S < ret.S) ret = nxt;
            }

            // rook
            if (i == x || j == y) {
                nxt = solve(cur + (a[i][j]==cur+1), a[i][j], (a[i][j]==cur+1)?0:stp+1, 2);
                nxt.F += 1+(me!=2), nxt.S += (me!=2);
                if (nxt.F < ret.F) ret = nxt;
                else if (nxt.F == ret.F && nxt.S < ret.S) ret = nxt;
            }
        }
    }
    return ret;
}

int main() {
    scanf("%d", &n);
    for (int i = 1; i <= n; ++i)
        for (int j = 1; j <= n; ++j) {
            scanf("%d", &a[i][j]);
            b[a[i][j]] = {i, j};
        }
    memset(dp, -1, sizeof dp);
    pii res = solve(1, 1, 0, 0);
    res = min(res, solve(1, 1, 0, 1));
    res = min(res, solve(1, 1, 0, 2));
    cout << res.F << " " << res.S << endl;
    return 0;
}
