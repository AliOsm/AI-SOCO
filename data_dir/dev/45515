// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second
#define int long long

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int N = (int)1e5 + 3;
const int MOD = (int)1e9 + 7;

int n, dp[N];
string s;

signed main() {
  init_ios();
  dp[0] = dp[1] = 1;
  for (int i = 2; i < N; ++i)
    dp[i] = (dp[i-1]+dp[i-2])%MOD;
  cin >> s;
  n = s.size();
  int res = 1;
  for (int i = 0; i < n; ++i) {
    char c = s[i];
    if (c == 'm' || c == 'w') {
      cout<<"0\n";
      return 0;
    }
    if (c != 'n' && c != 'u')
      continue;
    int j = i;
    while (j < n && s[j] == c)
      ++j;
    res = res*dp[j-i]%MOD;
    i = j-1;
  }
  cout<<res<<"\n";
}