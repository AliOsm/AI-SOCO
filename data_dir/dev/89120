#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <climits>
#include <unordered_map>
#include <iterator> 
#include <bitset>
#include <complex>
#include <random>
#include <chrono>
#include <functional>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ui unsigned int
#define mp make_pair
#define inf32 INT_MAX
#define inf64 LLONG_MAX
#define PI acos(-1)
#define cos45 cos(PI/4)
#define ld long double
#define inf INT_MAX
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pli pair<ll, int>
#define pil pair<int, ll>
#pragma GCC optimize ("O3")
//#define x first
//#define y second
const int mod = (1e9) + 7, mod2 = 998244353;
const long double eps = 1e-20;
const int siz = 2e5 + 5, siz2 = 5e5 + 5, lg = 20, block = 317, block2 = 1000, mxv = 5e5;

int n, m, k, q, mnrow[siz], mxrow[siz], sl[siz], sr[siz], mxr;
bool safe[siz];
vector<int> cols[siz];
ll dp[siz][5];

ll solve(int i, int pj) {
	ll &ret = dp[i][pj];
	if (ret != -1) {
		return ret;
	}
	int pc = i == 1 ? 1 : cols[i - 1][pj];
	if (!mnrow[i]) {
		return ret = 1 + (i==1?sr[1]-1:0) + solve(i + 1, pj);
	}
	ll c1 = abs(mnrow[i] - pc) + abs(mxrow[i] - mnrow[i]), c2 = abs(mxrow[i] - pc) + abs(mnrow[i] - mxrow[i]);
	if (i == mxr) {
		return ret = min(c1, c2);
	}
	ll mn = LLONG_MAX;
	int sz = cols[i].size();
	for (int k = 0; k < sz; k++) {
		mn = min(mn, 1 + c1 + (ll)abs(cols[i][k] - mxrow[i]) + solve(i+1, k));
		mn = min(mn, 1 + c2 + (ll)abs(cols[i][k] - mnrow[i]) + solve(i + 1, k));
	}
	return ret = mn;
}

int main()
{
	scanf("%d%d%d%d", &n, &m, &k, &q);
	mxr = 0;
	for (int i = 0; i < k; i++) {
		int r, c;
		scanf("%d%d", &r, &c);
		mxr = max(mxr, r);
		if (mnrow[r]) {
			mnrow[r] = min(mnrow[r], c);
			mxrow[r] = max(mxrow[r], c);
		}
		else {
			mnrow[r] = mxrow[r] = c;
		}
	}
	for (int i = 0; i < q; i++) {
		int c;
		scanf("%d", &c);
		safe[c] = true;
	}
	for (int i = m; i >= 1; i--) {
		if (safe[i]) {
			sr[i] = i;
		}
		else {
			sr[i] = sr[i + 1];
		}
	}
	for (int i = 1; i <= m; i++) {
		if (safe[i]) {
			sl[i] = i;
		}
		else {
			sl[i] = sl[i - 1];
		}
	}
	for (int i = 1; i <= n; i++) {
		if (mnrow[i]) {
			if (sl[mnrow[i]]) {
				cols[i].push_back(sl[mnrow[i]]);
			}
			if (sr[mnrow[i]]) {
				cols[i].push_back(sr[mnrow[i]]);
			}
			if (sl[mxrow[i]]) {
				cols[i].push_back(sl[mxrow[i]]);
			}
			if (sr[mxrow[i]]) {
				cols[i].push_back(sr[mxrow[i]]);
			}
		}
		else {
			if(i!=1) {
				cols[i] = cols[i - 1];
			}
			else {
				cols[i].push_back(sr[1]);
			}
		}
	}
	memset(dp, -1, sizeof dp);
	printf("%I64d\n", solve(1, 0));
	return 0;
}