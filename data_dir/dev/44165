#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

#define minimize(a, b) { a = min(a, b); }
#define maximize(a, b) { a = max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n';
#define next(type, i) type i; cin >> i;
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }

// task 95 B

int main() {
	srand (time(NULL));
    ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	deque<int> res;
	next(string, s);
	
	for (auto c : s) res.push_back(c - '0');
	
	FOR (i, 0, res.size()) {
		if (res[i] != 4 && res[i] != 7) {
			FOR (j, i + 1, res.size()) res[j] = 4;
			if (res[i] < 4) res[i] = 4;
			else if (res[i] < 7) res[i] = 7;
			else if (i == 0) {
				res[i] = 4;
				res.push_front(4);
			} else {
				res[i] = 4;
				FORD (j, i - 1, 0) {
					if (res[j] == 4) {
						res[j] = 7;
						break;
					} else {
						res[j] = 4;
						if (j == 0) res.push_front(4);
					}
				}
			}
			break;
		}
	}
	
	int c4 = 0;
	int c7 = 0;
	
	for (auto d : res) if (d == 4) c4++; else c7++;
	
	FORD (i, res.size() - 1, 0) {
		if (res[i] == 7 && c4 < c7) {
			FORD (j, i, 0) {
				if (res[j] == 4) {
					res[j] = 7;
					c7++;
					c4--;
					break;
				} else {
					res[j] = 4;
					c4++; c7--;
					if (j == 0) { 
						res.push_front(4);
						c4++;
					}
				}
			}
		}
	}

	c4 = 0;
	c7 = 0;
	
	for (auto d : res) if (d == 4) c4++; else c7++;

		if (res.size() % 2) {
		int n = s.length() / 2 + 1;
		FOR (i, 0, n) cout << 4;
		FOR (i, 0, n) cout << 7;
		return 0;
	}
	
	if (c7 < c4) {
		FORD (i, res.size() - 1, 0)
			if (c7 < c4 && res[i] == 4) {
				res[i] = 7;
				c4--;
				c7++;
			}
	}
	
	for (auto d : res) cout << d;
}