#include <algorithm>  
#include <iostream>  
#include <sstream>  
#include <string>  
#include <vector>  
#include <queue>  
#include <set>  
#include <map>  
#include <cstdio>  
#include <cstdlib>  
#include <cctype>  
#include <cmath>  
#include <cstring>
#include <list>  
#include <cassert>
#include <climits>
#include <bitset>
#include <chrono>
#include <random>
using namespace std;

#define PB push_back  
#define MP make_pair  
#define SZ(v) ((int)(v).size())  
#define FOR(i,a,b) for(int i=(a);i<(b);++i)  
#define REP(i,n) FOR(i,0,n)  
#define FORE(i,a,b) for(int i=(a);i<=(b);++i)  
#define REPE(i,n) FORE(i,0,n)  
#define FORSZ(i,a,v) FOR(i,a,SZ(v))  
#define REPSZ(i,v) REP(i,SZ(v))  
std::mt19937 rnd((int)std::chrono::steady_clock::now().time_since_epoch().count());
typedef long long ll;
ll gcd(ll a,ll b) { return b==0?a:gcd(b,a%b); }

const char g[64][65] = {
"..........................#.#.######.#..........................",
"......................#.###.#.#.#..#.#####......................",
"....................###.#...#...##.#....#..#....................",
".................####.#.#.#####....####.#.###.#.................",
"................##......#.#.....####....#.#.#.##................",
"..............#..##.#####.###.###.#..#.##...#..#.#..............",
".............###..#..#......#.#...####..##.##.##.##.............",
"...........######.##.##.###.###.###....##..#..#...###...........",
"..........############....#.....#...#.##..##.##.#..###..........",
".........####################.#######..####..##########.........",
"........################################################........",
".......##################################################.......",
".......##################################################.......",
"......####################################################......",
".....######################################################.....",
".....######################################################.....",
"....########################################################....",
"...##########################################################...",
".....########################################################...",
".......############...#..##############...#.#.#############.....",
"..##.....#########..#...###############.#.......########........",
"..####.....#####...##.#...###############.##.##..#.##.......##..",
".#######.....#...###..###..###########.#..#...##.........######.",
".#########.....#..#..##.##...#########.##.#####..#....#########.",
".############.##.###.....###..#######...#..#....###.###########.",
".#########.....#...###.###...########.#.#####.#...#..#.########.",
"############.###.#..#..#...#..######..#..#....##.###...#########",
"###########...#..#.##.###.###.####.#.###.####..###...#.#########",
"###########.######.####....#..#.#....#.#..#.####...###.#########",
"###########.....#..#..###.###...#.#.##.##.#..#...#..#..#########",
"############.##.####.##.###...#.###.....####.#.######.##########",
"###########...###..#..#...###.#..###.####..#.###...#...#########",
"#############.....##.###.##.###.##.....#..##.##..#...#.#########",
"##############.##.#....#.#....#.#..#.#.##.#...##.##.############",
"############....####.#.#.#.#.####.##.#..#.###..###...###########",
"#############.#..#...###...####...#..##....#..##...#############",
"################...###...#.##.##.##.##..#.###.#..#..############",
"##################...#.######.....#######...#...################",
".################..#....#####.#.###########...#..##############.",
".##############################....############################.",
".###########################.#..#.#############################.",
".#########################.#...################################.",
"..########################...#...#############################..",
"..#######..###################.###############################..",
"...#######.#.################...#####################.#######...",
"...#######...#...###########..#.###########.#####.#....######...",
"...#######.#.#.#..#.#...##.#.##..#.#..#.##...##.....#.#######...",
"....########...##.....#.......##...##......#.#..###.########....",
".....#######.#..####.####.###..###....###.#####.#.#########.....",
".....##########.#..#..#...#.####.###.##.#.....#...#########.....",
"......########....##.##.#....#...#.#....###.#...##########......",
".......#########.##...#####.##.#.#...#.##...#############.......",
".......#########..###..#.#...###...#.###..#...###########.......",
"........#########...####...###.##.####.####.############........",
".........#########.##....#.#......#....#.##############.........",
"..........############.#.####.##.##.#.##..############..........",
"...........#############....####....#....############...........",
".............####################.#################.............",
"..............####################################..............",
"................################################................",
".................##############################.................",
"....................########################....................",
"......................####################......................",
"..........................############.........................." };

int x, y;

void run() {
	scanf("%d%d", &x, &y);
	printf("%s\n", g[x][y] == '.' ? "OUT" : "IN");
	
}
int main() {
	run();
	return 0;
}
