#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef pair<ll,ll> pll;
#define Max 1000001
#define inf INT_MAX
#define llinf LONG_LONG_MAX
#define f(i,n) for(i=0;i<n;i++)
#define fast ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define pb push_back
#define ff first
#define ss second
#define all(v) v.begin(),v.end()
#define bp(n) __builtin_popcount(n)
#define endl '\n'
#define int long long 
#define sz(v) (int)v.size()
#define deb1(a) cout<<a<<endl;
#define deb2(a,b) cout<<a<<' '<<b<<endl;
#define deb3(a,b,c) cout<<a<<' '<<b<<' '<<c<<endl;
#define deb4(a,b,c,d) cout<<a<<' '<<b<<' '<<c<<' '<<d<<endl;
#define deb5(a,b,c,d,e) cout<<a<<' '<<b<<' '<<c<<' '<<d<<' '<<e<<endl;
const ll N=35,mod=1e9+7,bit=60;


template<typename T> 
class segmentmin	// pass argument as (L,R+1) to process the query from L to R 
{
	public:
		vector<T> st;
		ll n;
		segmentmin(){}
		segmentmin(ll _n)
		{
			n=_n;
			st.resize(2*n);
		}
		T merge(T a,T b)
		{
			T res;
			res.ff=a.ff+b.ff;
			res.ss=min(a.ss,a.ff+b.ss);
			return res;
		}
		void create()
		{
			for(ll i=n-1;i>0;i--)
			{
				st[i]=merge(st[i<<1],st[(i<<1) | 1]);
			}
		}
		void update(ll idx,T val)
		{
			for(st[idx+=n-1]=val;idx>1;idx>>=1)
			{
				st[idx>>1]=merge(st[min(idx,idx^1)],st[max(idx,idx ^ 1)]);
			}
		}
		T query(ll l,ll r)
		{
			T ans{};
			for(l+=n-1,r+=n-1;l<r;l>>=1,r>>=1)
			{
				if(l & 1)
				{
					ans=merge(ans,st[l++]);
				}
				if(r & 1)
				{
					ans=merge(ans,st[--r]);
				}
			}
			return ans;
		}
};

template<typename T> 
class segmentmax	// pass argument as (L,R+1) to process the query from L to R 
{
	public:
		vector<T> st;
		ll n;
		segmentmax(){}
		segmentmax(ll _n)
		{
			n=_n;
			st.resize(2*n);
		}
		T merge(T a,T b)
		{
			T res;
			res.ff=a.ff+b.ff;
			res.ss=max(a.ss,a.ff+b.ss);
			return res;
		}
		void create()
		{
			for(ll i=n-1;i>0;i--)
			{
				st[i]=merge(st[i<<1],st[(i<<1) | 1]);
			}
		}
		void update(ll idx,T val)
		{
			for(st[idx+=n-1]=val;idx>1;idx>>=1)
			{
				st[idx>>1]=merge(st[min(idx,idx^1)],st[max(idx,idx ^ 1)]);
			}
		}
		T query(ll l,ll r)
		{
			T ans{};
			for(l+=n-1,r+=n-1;l<r;l>>=1,r>>=1)
			{
				if(l & 1)
				{
					ans=merge(ans,st[l++]);
				}
				if(r & 1)
				{
					ans=merge(ans,st[--r]);
				}
			}
			return ans;
		}
};

signed main()
{
    fast;
    ll t=1;
    //cin>>t;
    while(t--)
	{
		ll q;
		cin>>q;
		segmentmin<pll> objn(q);
		segmentmax<pll> objx(q);
		ll i;
		for(i=1;i<=q;i++)
		{
			objn.st[i+q-1]={0,0};
			objx.st[i+q-1]={0,0};
		}
		ll x=1;
		char ch;
		for(i=1;i<=q;i++)
		{
			cin>>ch;
			if(ch=='(')
			{
				objn.update(x,{1,1});
				objx.update(x,{1,1});
			}
			else if(ch==')')
			{
				objn.update(x,{-1,-1});
				objx.update(x,{-1,-1});
			}
			else if(ch=='L' and x>1)
			{
				x--;
			}
			else if(ch=='R')
			{
				x++;
			}
			else if(ch>='a' and ch<='z')
			{
				objn.update(x,{0,0});
				objx.update(x,{0,0});
			}
			pll ans=objn.query(1,q+1);
			if(ans.ss<0 or ans.ff!=0)
			{
				cout<<"-1 ";
			}
			else 
			{
				ans=objx.query(1,q+1);
				cout<<ans.ss<<' ';
			}
		}
	}
    return 0;
}