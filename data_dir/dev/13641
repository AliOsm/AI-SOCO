#include <algorithm>
#include <iostream>
#include <iomanip>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdlib>
#include <cstdio>
#include <bitset>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <set>

#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

typedef long long ll;
typedef pair<int, int> ii;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 101001;

const int mod = 1e9 + 9;

int x[N], y[N];
map<ii, int> id;

bool inset[N];

set<int> s;

inline int holder(int x,int y){
    int res = 0;
    for(int dx = -1; dx <= 1; dx++){
        if(id.count(ii(x + dx, y - 1)))
            res++;
    }
    return res;
}

bool removable(int x,int y){
    for(int dx = -1; dx <= 1; dx++){
        int nx = x + dx;
        int ny = y + 1;
        if(id.count(ii(nx, ny)) && holder(nx, ny) == 1){
            return false;
        }
    }
    return true;
}

void fix(int x,int y){
    if(!id.count(ii(x, y)))
        return;
    int i = id[ii(x, y)];
    bool in = (s.find(i) != s.end());
    if(in && !removable(x, y)){
        s.erase(i);
    }else if(!in && removable(x, y)){
        s.insert(i);
    }
}

void out(int i){
    id.erase(ii(x[i], y[i]));
    s.erase(i);
    for(int dx = -2; dx <= 2; dx++){
        for(int dy = -1; dy <= 1; dy++){
            int nx = x[i] + dx;
            int ny = y[i] + dy;
            fix(nx, ny);
        }
    }
}

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    int n = read();
    for(int i = 0; i < n; i++){
        x[i] = read();
        y[i] = read();
        id[ii(x[i], y[i])] = i;
    }

    for(int i = 0; i < n; i++){
        if(removable(x[i], y[i]))
            s.insert(i);
    }

    ll ans = 0;
    for(int turn = 0; turn < n; turn++){
        if(turn % 2 == 0){
            //maximize
            int x = *(--s.end());
            eprintf("x = %d\n", x);
            ans = (ans * n) % mod;
            ans = (ans + x) % mod;
            out(x);
        }else{
            //minimize
            int x = *s.begin();
            eprintf("x = %d\n", x);
            ans = (ans * n) % mod;
            ans = (ans + x) % mod;
            out(x);
        }
    }

    printf("%d\n", int(ans));

    return 0;
}
