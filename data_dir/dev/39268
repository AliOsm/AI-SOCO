// In the name of God
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iomanip>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <assert.h>
#include <bitset>
#define sqr(a) ((a)*1LL*(a))
#define all(a) (a).begin(), (a).end()
using namespace std;
 
template <typename T>
T next_int() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if(ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return p * x;
}
 
string next_token() {
    char ch;
    string ans = "";
    do { ch = getchar(); } while(ch <= ' ');
    while(ch > ' ') {
        ans += ch;
        ch = getchar();
    }
    return ans;
}
    
const long long INF = (long long)1e18 + 227 + 1;
const int INFINT = (int)1e9 + 227 + 1;
const int MAXN = (int)1e6 + 227 + 1; 
const int MOD = (int)1e9 + 7;
const long double EPS = 1e-9;
 
long long bin_pow(long long a, long long b, long long MOD) {
    if(!b) return 1;
    long long ans = bin_pow(a, b / 2, MOD);
    ans = ans * ans % MOD;
    if(b % 2) ans = ans * a % MOD;
    return ans;
}

bool a[MAXN];

int main() {
    // freopen(".in", "r", stdin);

    int n; cin >> n;
    while(n--) a[next_int<int>()] = 1;

    int k = 0;
    vector<int> ans;
    for(int i = 1; i <= (int)1e6; i++) {
    	if(a[i] && !a[(int)1e6 - i + 1]) {
    		ans.push_back((int)1e6 - i + 1);
    	} else 
    	if(a[i] && a[(int)1e6 - i + 1]) 
    		k++;
    }

    k /= 2;

    for(int i = 1; i <= (int)1e6; i++) {
    	if(k && !a[i] && !a[(int)1e6 - i + 1]) {
    		k--;
    		ans.push_back(i);
    		ans.push_back((int)1e6 - i + 1);
    	}
    }

    cout << ans.size() << "\n";
    for(int i = 0; i < ans.size(); i++)
    	printf("%d ", ans[i]);
    puts("");
}