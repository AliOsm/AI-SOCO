#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i= int(ini); i<int(lim); ++i)
#define ford(i, ini, lim) for(int i= int(ini); i>=int(lim); --i)
using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef tuple<int, int, int> state;

const int MAX = 1e3 + 5;
vector< set<int> > lists[MAX], original[MAX];
vector<ii> where[MAX];
vector<ii> ans;
vector<int> adj[MAX];
bool rolled[MAX];
int mark[MAX];
int pass = 1;
int n;

void die() {
    cout << -1 << '\n';
    exit(0);
}

void dfs(int source, int father, set<int> &v) {
    v.insert(source);
    mark[source] = pass;
    for(auto &each : adj[source]) {
        if(each != father && mark[each] == pass) {
            die();
        }
        if(each != father) {
            dfs(each, source, v);
        }
    }
}

int main(){
	ios_base::sync_with_stdio(false);
    cin.tie(0);

    set<state> order;
    cin >> n;
    fori(i, 1, n + 1) {
        string s;
        cin >> s;
        for(int j = 0; j < (int) s.size(); ) {
            string cur = "";
            while(s[j] != ':') {
                cur += s[j];
                j++;
            }
            j++;
            int total = stoi(cur);
            set<int> v;
            while(total) {
                cur = "";
                while(j < (int) s.size() && s[j] != ',' && s[j] != '-') {
                    cur += s[j];
                    j++;
                }
                int guy = stoi(cur);
                v.insert(guy);
                where[guy].emplace_back(i, lists[i].size());
                j++;
                total--;
            }
            order.emplace(v.size(), i, lists[i].size());
            lists[i].push_back(v);
            original[i].push_back(v);
        }
    }

    while(!order.empty()) {
        int size, id, list_id;
        tie(size, id, list_id) = *order.begin();
        if(size > 1) {
            die();
        }
        int guy = *lists[id][list_id].begin();
        ans.emplace_back(guy, id);
        fori(i, 0, lists[guy].size()) {
            order.erase(state(lists[guy][i].size(), guy, i));
        }
        rolled[guy] = true;
        for(auto &each : where[guy]) {
            int other_id, other_list_id;
            tie(other_id, other_list_id) = each;
            if(rolled[other_id]) {
                continue;
            }
            int a, b, c;
            a = lists[other_id][other_list_id].size();
            b = other_id;
            c = other_list_id;
            lists[other_id][other_list_id].erase(guy);
            order.erase(state(a, b, c));
            if(a > 1) {
                order.emplace(a - 1, b, c);
            }
        }
    }

    for(auto &each : ans) {
        adj[each.first].push_back(each.second);
        adj[each.second].push_back(each.first);
    }
    
    fori(i, 1, n + 1) {
        sort(original[i].begin(), original[i].end());
        vector< set<int> > cur;
        for(auto &each : adj[i]) {
            set<int> v;
            dfs(each, i, v);
            cur.push_back(v);
            pass++;
        }
        sort(cur.begin(), cur.end());
        if(cur != original[i]) {
            die();
        }
    }

    printf("%d\n", (int) ans.size());
    for(auto &each : ans) {
        printf("%d %d\n", each.first, each.second);
    }

	return 0;
}
