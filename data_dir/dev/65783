#include<stdio.h>
#include<iostream>
#include<string.h>
#include<ctype.h>
#include<math.h>
#include<map>
#include<set>
#include<vector>
#include<queue>
#include<functional>
#include<string>
#include<algorithm>
#include<time.h>
#include<bitset>
void fre(){freopen("c://test//input.in","r",stdin);freopen("c://test//output.out","w",stdout);}
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define MP(x,y) make_pair(x,y)
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T> inline void gmax(T &a,T b){if(b>a)a=b;}
template <class T> inline void gmin(T &a,T b){if(b<a)a=b;}
using namespace std;
const int N=220,M=80000,Z=1e9+7,maxint=2147483647,ms31=522133279,ms63=1061109567,ms127=2139062143;const double eps=1e-8,PI=acos(-1.0);//.0
bool e[20020];//最大边数，（100*100+200）*2
void prime()
{
	int top=20000;
	for(int i=2;i<=top;i++)if(e[i]==0)
	{
		for(int j=i+i;j<=top;j+=i)e[j]=1;
	}
}
int n,id,ST,ED;
int a[N],first[N];
int w[M],c[M],cap[M],nxt[M];
void ins(int x,int y,int cap_)
{
	id++;
	w[id]=y;
	cap[id]=cap_;
	nxt[id]=first[x];
	first[x]=id;

	id++;
	w[id]=x;
	cap[id]=0;
	nxt[id]=first[y];
	first[y]=id;
}
int d[N];
bool bfs()
{
	MS(d,-1);d[ST]=0;
	queue<int>q;q.push(ST);
	while(!q.empty())
	{
		int x=q.front();q.pop();
		for(int z=first[x];z;z=nxt[z])if(cap[z])
		{
			int y=w[z];
			if(d[y]==-1)
			{
				d[y]=d[x]+1;
				if(y==ED)return 1;
				q.push(y);
			}
		}
	}
	return 0;
}
int dfs(int x,int all)
{
	if(x==ED)return all;
	int use=0;
	for(int z=first[x];z;z=nxt[z])if(cap[z])
	{
		int y=w[z];
		if(d[y]==d[x]+1)
		{
			int tmp=dfs(y,min(cap[z],all-use));
			cap[z]-=tmp;
			cap[z^1]+=tmp;
			use+=tmp;
			if(use==all)break;
		}
	}
	if(use==0)d[x]=-1;
	return use;
}
int dinic()
{
	int ans=0;
	while(bfs())
		ans+=dfs(ST,n*2);
	return ans;
}
bool vis[N];
int b[N][N],sum;
void find(int x)
{
	vis[x]=1;
	b[sum][++b[sum][0]]=x;
	if(a[x]&1)
	{
		for(int z=first[x];z;z=nxt[z])
		{
			if(z%2==0&&cap[z]==0&&vis[w[z]]==0)//如果是正向边，而且流过了
			find(w[z]);
		}
	}
	else
	{
		for(int z=first[x];z;z=nxt[z])
		{
			if(z%2==1&&cap[z]==1&&vis[w[z]]==0)//如果是反向边，而且流过了
			find(w[z]);
		}
	}
}
void print()
{
	MS(vis,0);
	sum=0;
	for(int i=1;i<=n;i++)if(vis[i]==0)
	{
		sum++;
		b[sum][0]=0;
		find(i);
	}
	printf("%d\n",sum);
	for(int i=1;i<=sum;i++)
	{
		printf("%d ",b[i][0]);
		for(int j=1;j<=b[i][0];j++)printf("%d ",b[i][j]);
		puts("");
	}
}
int main()
{
	prime();
	while(~scanf("%d",&n))
	{
		ST=0;ED=n+1;
		MS(first,0);id=1;
		for(int i=1;i<=n;i++)scanf("%d",&a[i]);
		for(int i=1;i<=n;i++)
		{
			if(a[i]&1)
			{
				ins(ST,i,2);
				for(int j=1;j<=n;j++)if(e[a[i]+a[j]]==0)ins(i,j,1);
			}
			else ins(i,ED,2);
		}
		if(dinic()==n)print();
		else printf("Impossible\n");
	}
	return 0;
}
/*
【题意】
有n个数，每个数的范围都在[2,10000]之间。
我们希望把这些数安排在若干个环上，
使得每个环，数的个数都>=3，且所有相邻的数之和

【类型】
网络流之最大流

【分析】
这题有很多地方是可以深入分析的——
1，首先两个数的和是质数，每个数都是[2,10000]范围内的数，所以和为素数的2个数必定是一奇一偶
2，然后因为最后所成是圆桌，所以点数必定为偶数，
3，每桌人数至少为3，这个限定有什么意义呢？只是断绝了2个人一桌的可能性。
	也就是说，两个人的相邻关系，最多只有1个，不能double化。

奇偶性就已经让我们想到网络流了。
而不能double化也向我们发现这个恰好契合于流量的性质。

于是我们可以——
把所有奇点向"与它之和为素数的"偶点连边，方向是奇->偶，容量是1，
然后所有奇点从超级源点收入容量为2的边
所有偶点至超级汇点流出容量为2的边

然后跑最大流。
因为题目要求其实就是——
1，每个奇点恰好与2个偶点匹配，
2，每个偶点恰好与2个奇点匹配。

所以如果最后的流量恰好为n，就是有可行方案的。

然而我们还要输出具体的成环方式，怎么办呢？
答案就记录在网络流流量的边上啦~

【时间复杂度&&优化】


【trick】


【数据】
Input
4
3 4 8 9
Output
1
4 1 2 4 3

Input
5
2 2 2 2 2
Output
Impossible

Input
12
2 3 4 5 6 7 8 9 10 11 12 13
Output
1
12 1 2 3 6 5 12 9 8 7 10 11 4

Input
24
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
Output
3
6 1 2 3 6 5 4
10 7 8 9 12 15 14 13 16 11 10
8 17 18 23 22 19 20 21 24

*/