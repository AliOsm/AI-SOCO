#include <bits/stdc++.h>

using namespace std;

#ifdef DGC
#include "debug.h"
#else
#define debug(...) 9715
#endif
typedef long long ll;
typedef long double ld;
typedef complex<ll> point;
#define F first
#define S second



int main()
{
	#ifdef DGC
		//freopen("a.in", "r", stdin);
		//freopen("b.out", "w", stdout);
	#endif

	ios_base::sync_with_stdio(0), cin.tie(0);

	int n;
	cin >> n;
	vector<ll> a(n);
	for (auto &i : a) cin >> i;

	ll s = accumulate(a.begin(), a.end(), 0LL);

	if (s <= 1)
	{
		cout << "-1\n";
		return 0;
	}

	vector<ll> divs(1, s);
	for (ll i = 2; i*i <= s; ++i)
		if (s % i == 0)
		{
			divs.push_back(i);
			while (s % i == 0) s /= i;
		}
	if (s > 1) divs.push_back(s);


	const ll inf = numeric_limits<ll>::max();
	ll ans = inf;

	auto f = [&](ll i)
	{
		auto ca = a;
		for (auto &j : a) j %= i;
		ll cur = 0; ll cost = 0;
		vector<pair<int, ll>> pos;
		for (int j = 0; j < n; ++j)
		{
			ll gg = i - cur%i;
			if (a[j] <= gg)
			{
				cur += a[j];
				if (a[j] > 0) pos.push_back({ j, a[j] });
			}
			else
			{
				cur += gg;
				if (gg > 0) pos.push_back({ j, gg });
				a[j] -= gg;
				--j;
			}
			if (cur > 0 && cur % i == 0)
			{
				ll sum = 0;
				int p;
				for (auto &z : pos)
				{
					sum += z.S;
					if (2*sum >= cur)
					{
						p = z.F;
						break;
					}
				}

				for (auto &z : pos)
					cost += abs(z.F - p) * z.S;

				cur = 0;
				pos.clear();
			}
		}
		a = ca;
		return cost;
	};

	for (auto i : divs)
		ans = min(ans, f(i));

	cout << ans << "\n";

	return 0;
}
