#include <bits/stdc++.h>
using namespace std;

// Template Headers {{{
using pii = pair<int, int>; using vpii = vector<pii>;
using vi = vector<int>; using vvi = vector<vi>;
using ll = long long; using vll = vector<long long>;
template <class T> using min_queue = priority_queue<T, vector<T>, greater<T>>;
template <class T> istream &operator>>(istream &, vector<T> &);
template <class T> ostream &operator<<(ostream &, const vector<T> &);
template <class T, class U> istream &operator>>(istream &, pair<T, U> &);
template <class T, class U> ostream &operator<<(ostream &, const pair<T, U> &);
template <class T> struct Inf { static constexpr T inf() { return std::numeric_limits<T>::has_infinity ? std::numeric_limits<T>::infinity() : std::numeric_limits<T>::max(); } };
template <> struct Inf<int> { static constexpr int inf() { return 0x3f3f3f3f; } };
template <> struct Inf<long long> { static constexpr long long inf() { return 0x3f3f3f3f3f3f3f3fLL; } };
constexpr int INF = Inf<int>::inf(); constexpr ll BINF = Inf<ll>::inf();
// mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
// }}}

int solve() {
	int d, m; cin >> d >> m;
	/*
	ll lst = 0;
	for (d = 1; d <= 40; d++) {
		vi a(d), b(d);
		ll cnt = 0;
		function<void(int)> gen = [&] (int u) {
			for (int i = 1; i <= d; i++) {
				if (u > 0 && i <= a[u - 1]) continue;
				b[u] = a[u] = i;
				if (u > 0) b[u] ^= b[u - 1];
				if (u > 0 && b[u] <= b[u - 1]) continue;
				cnt++;
				//for (int z = 0; z <= u; z++) cerr << a[z] << ' ';
				//cerr << endl;
				//for (int z = 0; z <= u; z++) cerr << b[z] << ' ';
				//cerr << endl;
				//cerr << "===" << endl;
				gen(u + 1);
			}
		};
		gen(0);
		cout << d << ' ' << cnt << ' ' << cnt - lst << endl;
		lst = cnt;
	}

	auto poo = [&](ll b, ll p) {
		ll rt = 1;
		for (; p; p >>= 1, b = b * b % m) if (p & 1) rt = rt * b % m;
		return rt;
	};
	*/


	int sz = 1;
	ll curp = 1;
	ll ans = 0;
	while (d > 0) {
		int z = min(d, sz);
		ans += z * curp;
		ans %= m;
		d -= z;
		curp = curp * (sz + 1) % m;
		sz = sz + sz;
	}
	cout << ans << endl;
	return 0;
}

// Template Main {{{
int main() {
	ios::sync_with_stdio(0); cin.tie(0);
	// precompute();
	int t; cin >> t; for (int i=1;i<=t;i++)
	solve();
	// cout << "Case #" << i << ": ", solve();
	return 0;
}

template <class T> istream &operator>>(istream &is, vector<T> &v) {
	for (auto it=v.begin();it!=v.end();++it) is >> *it;
	return is;
}

template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
	for (auto it=v.begin();it!=v.end();) os << *it, os << " \n"[++it==v.end()];
	return os;
}

template <class T, class U> istream &operator>>(istream &is, pair<T, U> &p) {
	return is >> p.first >> p.second;
}

template <class T, class U> ostream &operator<<(ostream &os, const pair<T, U> &p) {
	return os << p.first << ' ' << p.second;
}
// }}}

// vim: fdm=marker
