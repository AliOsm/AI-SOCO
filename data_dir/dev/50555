#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define se second
#define fi first
#define pb push_back
const int N=2e5 + 5;
int v[N],root[N],cc;

struct node {
	int l,r,am;
	node(){
		am=0, l=0, r=0;
	}
} seg[40 * N];

int update(int n,int l,int r,int in){

	if(r < in || l > in) return n;
	int u=++cc;
	if(l == in && r == in){
		seg[u].am=seg[n].am + 1;
		return u;
	}
	int mid=(l + r) >> 1;
	seg[u].l=update(seg[n].l,l,mid,in);
	seg[u].r=update(seg[n].r,mid + 1,r,in);
	seg[u].am=seg[seg[u].l].am + seg[seg[u].r].am;
	return u;
}

int get(int n,int l,int r,int s,int e){

	if(r < s || l > e || r < l) return 0;
	if(l >= s && r <= e){
		return seg[n].am;
	}
	int mid=(l + r) >> 1;
	return get(seg[n].l,l,mid,s,e) + get(seg[n].r,mid + 1,r,s,e);
}

int main(){

//	freopen("in.txt","r",stdin);

	int n;
	scanf("%d",&n);
	vector<int> cmp;
	for(int i=1;i <= n;i++){
		scanf("%d",v + i);
		cmp.pb(v[i]);
	}
	sort(cmp.begin(),cmp.end());
	cmp.resize(unique(cmp.begin(),cmp.end()) - cmp.begin());
	for(int i=1;i <= n;i++)
		v[i]=lower_bound(cmp.begin(),cmp.end(),v[i]) - cmp.begin() + 1;

	for(int i=1;i <= n;i++){
		root[i]=update(root[i - 1],1,cmp.size(),v[i]);
	}
	ll l,r;
	for(int k=1;k <= n - 1;k++){
		int in=1,sum=0;
		while(in <= n){
			l=(ll) k * (in - 1) + 2, r=min((ll) k * in + 1,(ll) n);
			if(l > n) break;
			sum+=get(root[r],1,cmp.size(),1,v[in] - 1)
				- get(root[l - 1],1,cmp.size(),1,v[in] - 1);
			in++;
		}
		printf("%d ",sum);
	}

}
