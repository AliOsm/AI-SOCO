#include<bits/stdc++.h>
#define LL long long
#define fi first
#define se second
#define mk make_pair
#define pii pair<int, int>

using namespace std;

const int N = 2e5 + 7;
const int M = 1e5 + 7;
const int inf = 0x3f3f3f3f;
const LL INF = 0x3f3f3f3f3f3f3f3f;
const int mod = 420047;

int n, a[N], b[N], bin[20], Log[N], mx[20][N], mn[20][N];

void calRmq() {
    bin[0] = 1; Log[0] = -1;
    for(int i = 1; i < 20; i++) bin[i] = bin[i - 1] * 2;
    for(int i = 1; i < N; i++)  Log[i] = Log[i / 2] + 1;

    for(int i = 1; i <= n; i++) mx[0][i] = a[i];
    for(int i = 1; i <= n; i++) mn[0][i] = b[i];

    for(int i = 1; i <= Log[n]; i++) {
        for(int j = 1; j <= n; j++) {
            if(j + bin[i] - 1 <= n) {
                mn[i][j] = min(mn[i - 1][j], mn[i - 1][j + bin[i - 1]]);
                mx[i][j] = max(mx[i - 1][j], mx[i - 1][j + bin[i - 1]]);
            }
        }
    }
}

int getVal(int x, int y, int op) {
    int t = Log[y - x + 1];
    if(op) return max(mx[t][x], mx[t][y - bin[t] + 1]);
    return min(mn[t][x], mn[t][y - bin[t] + 1]);
}

int main(){
    scanf("%d", &n);
    for(int i = 1; i <= n; i++) {
        scanf("%d", &a[i]);
    }
    for(int i = 1; i <= n; i++) {
        scanf("%d", &b[i]);
    }

    calRmq();

    LL ans = 0;
    for(int i = 1; i <= n; i++) {
        int l = i, r = n, mid, ret1 = -1, ret2 = -1;
        while(l <= r) {
            mid = l + r >> 1;
            int valMin = getVal(i, mid, 0);
            int valMx = getVal(i, mid, 1);
            if(valMin > valMx) l = mid + 1;
            else if(valMin < valMx) r = mid - 1;
            else ret1 = mid, r = mid - 1;
        }


        l = i, r = n;
        while(l <= r) {
            mid = l + r >> 1;
            int valMin = getVal(i, mid, 0);
            int valMx = getVal(i, mid, 1);
            if(valMin > valMx) l = mid + 1;
            else if(valMin < valMx) r = mid - 1;
            else ret2 = mid, l = mid + 1;
        }

        if(ret1 != -1) {
            ans += ret2 - ret1 + 1;
        }
    }

    printf("%lld\n", ans);
    return 0;
}

/*
*/
