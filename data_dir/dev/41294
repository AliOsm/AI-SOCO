#include <algorithm>
#include <iostream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <numeric>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define endl '\n'
#define F first
#define S second
#define mp make_pair
#define ll long long
#define pb push_back
#define pii pair < int, int >
#define type(x) __typeof(x.begin())
#define foreach(i, x) for(type(x) i = x.begin(); i != x.end(); i++)
#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define sol (root << 1)
#define sag (sol | 1)
#define orta ((bas + son) >> 1)
#define bit __builtin_popcount

#ifndef D
	#define dbgs(x) 0
	#define dbg(x) 0
	#define TIME 0
#else
	#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
	#define dbg(x) cerr << (#x) << " --> " << (x) << endl
	#define TIME cerr << "Tooks " << (double) clock() / CLOCKS_PER_SEC << " seconds." << endl
#endif

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 3000 + 5;

int n, m, cycle, a[N], size[N], w[N];

bool h[N];

vector < pii > ans;


int calc() {

	memset(h, 0, sizeof(h));

	int cycle = 0;

	FOR(i, 1, n)
		if(!h[i])
		{
			int st = i;

			while(!h[st])
			{
				h[st] = 1;

				st = a[st];
			}

			cycle++;
		}

	return cycle;

}

int main () {
	
	ios :: sync_with_stdio(0);

	cin >> n;

	FOR(i, 1, n)
		cin >> a[i];

	cin >> m;

	int expected = n - m;

	while(calc() > expected)
	{
		memset(h, 0, sizeof(h));

		int st = 1;

		while(!h[st])
		{
			h[st] = 1;

			st = a[st];
		}

		FOR(i, 1, n)
			if(!h[i])
			{
				ans.pb(mp(1, i));

				swap(a[1], a[i]);

				break;
			}
	}

	while(calc() < expected)
	{
		memset(h, 0, sizeof(h));

		int mn = inf;

		FOR(i, 1, n)
			if(a[i] != i)
			{
				int st = i;

				while(!h[st])
				{
					if(st != i)
						mn = min(mn, st);

					h[st] = 1;

					st = a[st];
				}

				ans.pb(mp(i, mn));

				swap(a[i], a[mn]);

				break;
			}
	}

	cout << ans.size() << endl;

	foreach(it, ans)
		cout << it -> F << ' ' << it -> S << ' ';

	cout << endl;

	return 0;
    
}
