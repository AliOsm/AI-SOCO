#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <cstdio>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <numeric>
#include <stack>
#include <deque>
#include <memory.h>
#include <string>
#include <unordered_map>

#define ull unsigned long long
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define vI vector<int>
#define vvI vector<vector<int>>
#define vLL vector<ll>
#define vS vector<string>
#define fori(i, n) for(int (i)=0; (i)<n; (i)++)
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
#define forI(tmp) for(auto(it)=(tmp).begin();(it)!=(tmp).end();(it)++)
#define PI 3.14159265356
#define LD long double
#define sc(a) scanf("%d", &(a))
#define scc(a) scanf("%lld", &(a))
#pragma comment (linker, "/STACK:5000000000")
typedef long long ll;

const ll mod = 1000000007;
ll Inf = (ll)2e9;
ll LINF = (ll)1e18 + 1e17;

using namespace std;

const int N = 500500;
ll ha[N], ht[N];
ll p = 7;
ll st[N];

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	st[0] = 1;
	for (int i = 1; i < N; i++)
	{
		st[i] = (st[i - 1] * p) % mod;
	}
	string s, t;
	cin >> s >> t;
	if (s.length() < t.length())
	{
		cout << s;
		return 0;
	}
	ht[0] = 0;
	for (int i = 0; i < t.length(); i++)
	{
		ll x = (t[i] == '1' ? 1 : 0);
		x++;
		ht[i + 1] = ht[i] + x * st[i];
		ht[i + 1] %= mod;
	}
	pair<int, int> cnt = { 0,0 };
	for (int i = 0; i < s.length(); i++)
	{
		if (s[i] == '0')
			cnt.first++;
		else
			cnt.second++;
	}

	string ans = "";
	for (int i = 0; i < t.length(); i++)
	{
		if (t[i] == '0')
		{
			if (cnt.first > 0)
			{
				ans.push_back('0');
				cnt.first--;
			}
			else
			{
				while (cnt.second > 0)
				{
					ans.push_back('1');
					cnt.second--;
				}
				cout << ans;
				return 0;
			}
		}
		else
		{
			if (cnt.second > 0)
			{
				ans.push_back('1');
				cnt.second--;
			}
			else
			{
				while (cnt.first > 0)
				{
					ans.push_back('0');
					cnt.first--;
				}
				cout << ans;
				return 0;
			}
		}
	}
	ha[0] = 0;
	for (int i = 0; i < ans.length(); i++)
	{
		ll x = (ans[i] == '1' ? 1 : 0);
		x++;
		ha[i + 1] = ha[i] + x * st[i];
		ha[i + 1] %= mod;
	}
	int la = ans.length(), lt = t.length();
	int idx = -1;
	for (int i = 1; i < la; i++)
	{
		ll sha = ha[la] - ha[i];
		sha = (sha % mod + mod) % mod;
		ll sht = ht[lt - i];
		sht = (sht * st[i] + mod) % mod;
		if (sha == sht)
		{
			idx = i;
			break;
		}
	}
	if (idx == -1)
	{

		int i = 0;

		while (cnt.second > 0 || cnt.first > 0)
		{
			if (t[i] == '0')
			{
				if (cnt.first > 0)
				{
					ans.push_back('0');
					cnt.first--;
				}
				else
				{
					while (cnt.second > 0)
					{
						ans.push_back('1');
						cnt.second--;
					}
					cout << ans;
					return 0;
				}
			}
			else
			{
				if (cnt.second > 0)
				{
					ans.push_back('1');
					cnt.second--;
				}
				else
				{
					while (cnt.first > 0)
					{
						ans.push_back('0');
						cnt.first--;
					}
					cout << ans;
					return 0;
				}
			}
			i++;
			i = (i % (int)t.length());
		}

		cout << ans;
		return 0;
	}
	string need = "";
	for (int i = lt - idx; i < lt; i++)
		need.push_back(t[i]);
	int i = 0;
	while (cnt.first > 0 || cnt.second > 0)
	{
		if (need[i] == '0')
		{
			if (cnt.first > 0)
			{
				ans.push_back('0');
				cnt.first--;
			}
			else
			{
				ans.push_back('1');
				cnt.second--;
			}
		}
		else
		{
			if (cnt.second > 0)
			{
				ans.push_back('1');
				cnt.second--;
			}
			else
			{
				ans.push_back('0');
				cnt.first--;
			}
		}
		i++;
		i = (i % (int)need.length());
	}
	cout << ans;
	return 0;
}
