#include <iostream>
#include <cstring>
#include <set>
using namespace std;

const int MX=100*1000+9;
int n, m;

bool result[MX];
bool on[MX];
int id[MX];

bool seen_first_loop[MX];

set<int> sure_on;
set<int> sure_off;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> m;

    memset(result, true, MX*sizeof(bool));
    memset(seen_first_loop, false, MX*sizeof(bool));

    char c; bool _on; int _id;
    for(int i=0; i<m; i++)
    {
        cin >> c >> _id;
        _on=(c=='+');
        if(!seen_first_loop[_id])
        {
            if(_on) sure_off.insert(_id);
            else sure_on.insert(_id);
            seen_first_loop[_id]=true;
        }
        on[i]=_on;
        id[i]=_id;
    }

    if(!sure_on.empty())
    {
        for(set<int>::iterator it=sure_off.begin(); it!=sure_off.end(); it++)
        {
            result[*it]=false;
        }
        sure_off.clear();
    }

    for(int i=0; i<m; i++)
    {
        _on=on[i], _id=id[i];
        if(_on)
        {
            sure_on.insert(_id);
            sure_off.erase(_id);
            for(set<int>::iterator it=sure_off.begin(); it!=sure_off.end(); it++)
            {
                result[*it]=false;
            }
            sure_off.clear();
        }
        else
        {
            sure_off.insert(_id);
            sure_on.erase(_id);
            if(!sure_on.empty()) result[_id]=false;
        }
    }

    int k=0;
    for(int i=1; i<=n; i++) k+=result[i];
    cout << k << '\n';
    for(int i=1; i<=n; i++)
    {
        if(result[i]) cout << i << ' ';
    }
    return 0;
}
