#include <bits/stdc++.h>

using namespace std;

#define long long long
#define INF (long) 1e18
#define MOD 998'244'353
#define pll pair<long, long>
#define pb push_back
#define FOR(i, a, b) \
    for (long i = a; i < (long) b; i++)
#define REP(i, n) FOR(i, 0, n)
#define SORT(v, atr) \
    sort(v.begin(), v.end(), \
      [](auto &a, auto &b) { return a.atr < b.atr; });
#define UNSORT(v, atr) \
    sort(v.begin(), v.end(), \
      [](auto &a, auto &b) { return a.atr > b.atr; });
#define PRINTV(v) \
    if (not v.empty()) { \
        printf("%lld", v[0]); \
        for (long _i = 1; _i < (long) v.size(); _i++) \
            printf(" %lld", v[_i]); \
        printf("\n"); \
    }

auto gera_primos(long n)
{
  set<long> primos;
  vector<bool> crivo(n);
  primos.insert(1);
  primos.insert(2);
  for (long i = 3; i < n; i += 2) {
    if (crivo[i]) continue;
    primos.insert(i);
    for (long j = i; j < n; j += i) {
      crivo[j] = true;
    }
  }
  return primos;
}

long fat(long k, long a=1)
{
  long x = 1;
  FOR (i, a, k+1) {
    x = (x * i) % MOD;
  }
  return x;
}

long solve(long a, long b)
{
  long total = 0;
  FOR (k, 0, min(a, b) + 1) {
    long x = 1;
    x = (x * (fat(a) / ((fat(a - k) * fat(k)) % MOD)) % MOD) % MOD;
    x = (x * (fat(b) / ((fat(b - k) * fat(k)) % MOD)) % MOD) % MOD;
    x = (x * fat(k)) % MOD;
    total = (total + x) % MOD;
  }
  return total;
}

int main()
{
  long n;
  string s;
  cin >> n >> s;

  long l = 0, r = 0, u = 0, d = 0;
  FOR (i, 0, s.length()) {
    if (s[i] == 'L') l++;
    if (s[i] == 'R') r++;
    if (s[i] == 'U') u++;
    if (s[i] == 'D') d++;
  }
  long total = s.length() - abs(l - r) - abs(u - d);
  printf("%lld\n", total);
}
