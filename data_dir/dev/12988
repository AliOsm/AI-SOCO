#include<bits/stdc++.h> 
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define MOD 1000000007
#define INF 2000000000
#define DESPACITO 1000000000000000000
#define PI acos(-1);
#define E 998244353
#define pb push_back
#define mp make_pair
#define pdd pair<double,double>
#define ll long long
#define md 1000003

using namespace std; 

int n;
set<int>adj[3000001];
int sz;
int pos;
int val;
int dp[1501];
int arr[1501];
int pre[1501];
unordered_map<int,int>f,r;
unordered_map<int,set<int>>premap;
int anspos;

int solve(int idx)
{
	if(dp[idx]!=-1)
		return dp[idx];
	dp[idx]=0;
	auto it=adj[pos].upper_bound(idx);
	if(it!=adj[pos].end())
		dp[idx]=max(dp[idx],solve((*it)));
	int val2=pre[idx-1];
	int u=val2+val;
	auto it1=premap[u].lower_bound(idx);
	it=adj[pos].upper_bound((*it1));
	if(it!=adj[pos].end())
		dp[idx]=max(dp[idx],1+solve((*it)));
	else
		dp[idx]=max(dp[idx],1);
	return dp[idx];
}	

int main()
{
	IOS;
	set<int>sums;
	cin >> n;
	memset(pre,0,sizeof(pre));
	REP(i,1,n)	
	{
		cin >> arr[i];
		pre[i]=pre[i-1]+arr[i];
		premap[pre[i]].insert(i);
	}
	REP(i,1,n)
	{
		int sum=0;
		REP(j,i,n)
		{
			sum+=arr[j];
			sums.insert(sum);
		}
	}
	int id=1;
	for(auto it:sums)
	{
		f[it]=id;
		r[id]=it;
		id++;
	}
	REP(i,1,n)
	{
		int sum=0;
		REP(j,i,n)
		{
			sum+=arr[j];
			int idx=f[sum];
			adj[idx].insert(i);
		}
	}
	id--;
	int maxim=0;
	REP(i,1,id)
	{
		val=r[i];
		sz=adj[i].size();
		for(auto it:adj[i])
			dp[it]=-1;
		pos=i;
		if(maxim<solve((*adj[i].begin())))
		{
	    	maxim=max(maxim,solve(*(adj[i].begin())));
	    	anspos=i;
		}
	}
	cout << maxim << "\n";
	pos=anspos;
    sz=adj[anspos].size();
	val=r[anspos];
	for(auto it:adj[anspos])
	    dp[it]=-1;
	int xd=solve((*adj[anspos].begin()));
	auto it=adj[anspos].begin();
	while(it!=adj[anspos].end())
	{
	   	if(adj[anspos].upper_bound((*it))==adj[anspos].end())
	   	{
	        cout << (*it) << " ";
	        int val2=pre[(*it)-1];
    		int u=val2+val;
    		auto it2=premap[u].lower_bound((*it));
    		cout << (*it2) << "\n";
	   		break;
	   	}
	  	auto it1=adj[anspos].upper_bound(*it);
	  	if(dp[(*it1)]==dp[(*it)])
	  	{
	  		it=it1;
	  		continue;
	  	}
	  	cout << (*it) << " ";
	  	int val2=pre[(*it)-1];
		int u=val2+val;
		auto it2=premap[u].lower_bound((*it));
		cout << (*it2) << "\n";
		it=adj[anspos].upper_bound((*it2));
	}
}