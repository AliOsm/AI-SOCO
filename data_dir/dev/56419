#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define foreach(it, S) for(__typeof (S.begin()) it = S.begin(); it != S.end(); it++)
#define all(x) x.begin(), x.end()
#define endl '\n'
#define _ ios_base :: sync_with_stdio (false); cin.tie (NULL);

const double eps = 1e-9;
const int MAXN = int (60) + 256, MXN = int (1e6);
const int MOD = int (1e9) + 7;

inline int nextInt () {
	int s = 1, x = 0, c = getc(stdin);
	while (c <= 32)
		c = getc(stdin);
	if (c == '-')
		s = -1, c = getc(stdin);
	while ('0' <= c && c <= '9')
		x = x * 10 + c - '0', c = getc(stdin);
	return x * s;
}

template <typename T> inline T gcd (T a, T b) { while (a && b) a > b ? a %= b : b %= a; return a + b; }
inline bool Palindrome (const string& s) { return equal (s.begin(), s.end(), s.rbegin()); }

string s[MAXN];
int n, m;

ll r[MAXN];
ll c[MAXN];

int main () { _
	cin >> n >> m;
	for (int i = 0; i < n; ++i) {
		cin >> s[i];
	}

	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			if (s[i][j] == '#') {
				r[i] |= (1ll << j);
				c[j] |= (1ll << i);
			}
		}
	}
	
	for (int i = 0; i < n; ++i) {
		for (int j = i + 1; j < n; ++j) {
			if ((r[i] & r[j]) != 0) {
				if (r[i] != r[j]) {
					cout << "No"; return 0;
				}
			}
		}
	}
	
	for (int i = 0; i < m; ++i) {
		for (int j = i + 1; j < m; ++j) {
			if ((c[i] & c[j]) != 0) {
				if (c[i] != c[j]) {
					cout << "No"; return 0;
				}
			}
		}
	}

	/* for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			if (id[i][j] == 0 && s[i][j] == '#') {
				go(i, j);
				++cur;
			}
		}
	}*/

	cout << "Yes";

	return 0;
}
