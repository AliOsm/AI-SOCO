#include <bits/stdc++.h>

#define ll long long

#define  debug(x) cerr << #x << " = " << x << endl

using namespace std;
const int N = 3e3 + 5;
int dist[N][N];
vector<pair<int, int> > arr[N], rev[N];

int n, m;
vector<vector<int> > g(N);
void bfs(int src) {
	for (int i = 1; i <= n; i++)
		dist[src][i] = 1e8;
	dist[src][src] = 0;
	queue<int> q;
	q.push(src);
	while (q.size()) {
		int node = q.front();
		q.pop();
		for (int i = 0; i < g[node].size(); i++) {
			int v = g[node][i];
			if (dist[src][v] > dist[src][node] + 1) {
				dist[src][v] = dist[src][node] + 1;
				q.push(v);
			}
		}
	}
	vector<pair<int, int> > vec(4, make_pair(-1e8, -1e8));

	for (int i = 1; i <= n; i++) {
		if (dist[src][i] != 1e8) {
			vec[0] = make_pair(dist[src][i], i);
			rev[i][0] = make_pair(dist[src][i], src);
			sort(vec.begin(), vec.end());
			sort(rev[i].begin(), rev[i].end());
		}
	}
	arr[src] = vec;
}

int main() {

	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> m;
	for (int i = 1; i <= n; i++)
		rev[i] = vector<pair<int, int> >(4, make_pair(-1e8, -1e8));
	for (int i = 0, u, v; i < m; i++) {
		cin >> u >> v;
		g[u].push_back(v);
	}
	for (int i = 1; i <= n; i++)
		bfs(i);
	int res = 0;
	vector<int> ans(4);
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			if (i == j)
				continue;
			for (int k = 0; k < arr[i].size(); k++) {
				if (arr[i][k].first < 0)
					continue;
				for (int w = 0; w < rev[j].size(); w++) {
					if (rev[j][w].first < 0)
						continue;
					int u = arr[i][k].second;
					int v = rev[j][w].second;
					if (u == v || u == i || u == j || v == i || v == j)
						continue;
					int temp = dist[v][j] + dist[j][i] + dist[i][u];
					if (temp > 1e8)
						continue;
					if (temp > res) {
						res = temp;
						ans[0] = v;
						ans[1] = j;
						ans[2] = i;
						ans[3] = u;
					}
				}
			}
		}
	}
	for (int i = 0; i < 4; i++)
		cout << ans[i] << " ";
	return 0;
}
