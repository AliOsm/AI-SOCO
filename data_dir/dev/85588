#include <cstdio>
#include <algorithm>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <map>
#include <string>
#include <queue>
#include <string>
#include <stack>
#include <set>
#include <iostream>

using namespace std;

double sq(double a) {
	return a * a;
}

double eps = 1e-10;

bool equal(double a, double b) {
	return abs(a - b) < eps;
}

double cs, sc, sh, hs, ch, hc;
double t1, t2;

bool good(double r, double t1, double t2) {
	double cosa = (sq(cs) + sq(ch) - sq(sh)) / (2.0 * cs * ch);

	double a = sqrt(sq(cs) + sq(r) - 2.0 * cs * r * cosa);
	a = min(cs + t1 - r, a);
	
	double b = sqrt(sq(r) + sq(ch) - 2 * r * ch * cosa);
	b = min(b, ch + t2 - r);
	
	double cos1, cos2;
	cos1 = (sq(r) + sq(cs) - sq(a)) / (2 * cs * r);
	cos2 = (sq(r) + sq(ch) - sq(b)) / (2 * ch * r);

	double sin1, sin2, sina;
	sina = sqrt(1 - sq(cosa));
	sin1 = sqrt(1 - sq(cos1));
	sin2 = sqrt(1 - sq(cos2));

	double ang, ang1, ang2;
	ang = atan2(sina, cosa);
	ang1 = atan2(sin1, cos1);
	ang2 = atan2(sin2, cos2);

	return ang1 + ang2 + eps > ang;
}

int main() {

#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	cin >> t1 >> t2;

	double cx, cy, hx, hy, sx, sy;
	cin >> cx >> cy;
	cin >> hx >> hy;
	cin >> sx >> sy;

	sc = cs = sqrt(sq(cx - sx) + sq(cy - sy));
	hs = sh = sqrt(sq(sx - hx) + sq(sy - hy));
	hc = ch = sqrt(sq(cx - hx) + sq(cy - hy));

	double ans = 0; //!!

	if (equal(hc + cs, hs)) {
		if (t2 + eps > 2 * sc) {
			ans += sc + sh;
			t2 -= 2 * sc;
			ans += min(t1, t2);
		} else {//
			ans += min(t1, t2);
			if (t1 + eps > t2) {
				ans += max(min(t1 / 2, ch), min(t1, t2));//
			} else
			if (t1 < t2 + eps) {
				ans += max(min(t2 / 2, sc), min(t1, t2)); //t2 / 2 //
			}
		}

		printf("%.10lf", ans);
		return 0;
	}

	if (equal(hs + sc, hc)) {
		ans += hc;
		ans += min(t1, t2);

		printf("%.10lf", ans);
		return 0;
	}

	if (equal(ch + hs, cs)) {
		ans += ch;
		if (t2 + eps > 2 * hs) {
			ans = 2 * hs;
			t2 -= 2 * hs;
			ans += min(t1, t2);
		} else {//
			ans += max(t2 / 2, min(t1, t2)); //(min(t2/2,hs));
		}	
		
		printf("%.10lf", ans);
		return 0;
	}

	ans = min(t1, t2);

	if (t2 + ch + eps > cs + sh) {
		ans = max(ans, cs + sh + min(t1, t2 + ch - cs - sh));
	}

	if (t1 + sc + eps > ch + hs) {
		double tans = ch + min(t2, t1 + sc - ch - hs);
		ans = max(tans, ans);
		if (t2 + eps > 2 * sh) {
			tans = ch + 2 * sh + min(t1 + sc - ch - hs, t2 - 2 * sh);
			ans = max(ans, tans);
		} else {//
			tans = ch + t2 / 2;
			ans = max(ans, tans);
		}		
	}

	double lt, rt, p = (cs + ch + sh) / 2.0;
	
	//lt = 0, rt = max(cs, ch);//min(2.0 * sqrt(p * (p - sh) * (p - ch) * (p - sc)) / sh, min(cs, ch));
	//while (abs(lt - rt) > 1e-12) {
	//	double m = (lt + rt) / 2.0;
	//	if (good(m, t1, t2))
	//		lt = m;
	//	else
	//		rt = m;
	//}

	//ans = max(ans, (lt + rt) / 2.0);

	double pdjl = 0, pdjr = min(t1, t2) + 2 * eps, mx = 0;

	while (abs(pdjl - pdjr) > 1e-7) {
		double T1, T2;
		double pdj1 = pdjl + abs(pdjr - pdjl) / 3, pdj2 = pdjr - abs(pdjr - pdjl) / 3;

		T1 = abs(t1 - pdj1), T2 = abs(t2 - pdj1);
		lt = 0, rt = max(cs, ch);//min(2.0 * sqrt(p * (p - sh) * (p - ch) * (p - sc)) / sh, min(cs, ch));
		while (abs(lt - rt) > eps) {
			double m = (lt + rt) / 2.0;
			if (good(m, T1, T2))
				lt = m;
			else
				rt = m;
		}

		double a1, a2;
		a1 = pdj1 + (lt + rt) / 2;

		T1 = abs(t1 - pdj2), T2 = abs(t2 - pdj2);
		lt = 0, rt = max(cs, ch);//min(2.0 * sqrt(p * (p - sh) * (p - ch) * (p - sc)) / sh, min(cs, ch));
		while (abs(lt - rt) > eps) {
			double m = (lt + rt) / 2.0;
			if (good(m, T1, T2))
				lt = m;
			else
				rt = m;
		}

		a2 = pdj2 + (lt + rt) / 2;

		if (a1 < a2)
			pdjl = pdj1;
		else
			pdjr = pdj2;
		
		mx = max(mx, (a1 + a2) / 2.0);
	}

	ans = max(ans, mx);

	//vozmojno ne uchten sluchay drugogo sposoba poiska maxa : tipa ternarniy poisk, est somneniya v monotonnosti i rabotosposobnosti bin poiska


	lt = 0, rt = cs;
	while (abs(lt - rt) > eps) {
		double x, y, cosa = (sq(cs) + sq(ch) - sq(sh)) / (2 * cs * ch);
		x = (lt + rt) / 2.0;
		y = sqrt(sq(x) + sq(ch) - 2.0 * x * ch * cosa);
		if (x + y < ch + t2 + eps)
			lt = x;
		else
			rt = x;
	}
	ans = max(ans, (lt + rt) / 2.0);	
	
	lt = 0, rt = ch;
	while (abs(lt - rt) > eps) {
		double x, y, cosa = (sq(cs) + sq(ch) - sq(sh)) / (2 * cs * ch);
		x = (lt + rt) / 2.0;
		y = sqrt(sq(x) + sq(cs) - 2.0 * x * cs * cosa);
		if (x + y < cs + t1 + eps)
			lt = x;
		else
			rt = x;
	}
	ans = max(ans, (lt + rt) / 2.0);

	printf("%.10lf", ans);

	return 0;
}

/*
	int v[100][5];
	int x, y;
	cin >> x >> y;
	int n;
	cin >> n;
	for (int i = 0; i < n; ++i) {
		cin >> v[i][0] >> v[i][1];
		v[i][0] -= x, v[i][1] -= y;
	}
	if (n&1) {
		v[n][0] = v[n][1] = 0;
		++n;	
	}

	

*/