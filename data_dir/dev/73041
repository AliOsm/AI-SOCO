#include <bits/stdc++.h>

using namespace std;

#define INF (long) 1e18
#define long long long
#define pll pair<long, long>
#define pb push_back
#define FOR(i, n) \
    for (size_t i = 0; i < (size_t) n; i++)
#define SORT(v, atr) \
    sort(v.begin(), v.end(), \
         [](auto &a, auto &b) { return a.atr < b.atr; })
#define PRINTV(v) \
    if (not v.empty()) { \
        printf("%lld", v[0]); \
        for (long _i = 1; _i < (long) v.size(); _i++) \
            printf(" %lld", v[_i]); \
        printf("\n"); \
    }

template<typename T>
    class Matriz2D : public vector<vector<T>>
{
public:
    size_t n, m;

    Matriz2D() {}

    Matriz2D(size_t n, size_t m, const T &valor)
        : n(n), m(m) {
        this->rsize_tesize(n);
        for (size_t i = 0; i < n; i++) {
            (*this)[i].resize(m, valor);
        }
    }
};

void geraPrimos(long n, set<long> &primos)
{
    vector<bool> crivo(n+1);
    for (long i = 2; i <= n; i++) {
        if (not crivo[i]) {
            primos.insert(i);
            for (long j = i; j <= n; j += i) {
                crivo[j] = true;
            }
        }
    }
}

int main()
{
    ios::sync_with_stdio(false);

    long n, a, b, c;
    cin >> n >> a >> b >> c;
  
    long k = (4 - n % 4) % 4;
    long minimo = 0;
    switch (k) {
    case 0:
        puts("0");
        return 0;
    case 1:
        minimo = min({a, b + c, 3*c});
        break;
    case 2:
        minimo = min({2*a, b, 2*c});
        break;
    case 3:
        minimo = min({3*a, a + b, c});
        break;
    }
    printf("%lld\n", minimo);
}