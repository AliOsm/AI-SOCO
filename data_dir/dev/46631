#define _CRT_SECURE_NO_WARNINGS
#include <vector>
#include <map>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <string>

#define oo 1e9
#define pi 3.1415926536
#define all(x) x.begin(),x.end()
#define sorta(x) sort(all(x))
#define sortam(x,comp) sort(all(x),comp)
#define sortd(x) sort(x.rbegin(),x.rend())
#define pb push_back
#define mp make_pair
#define sf(x) scanf("%d", &x);
#define sfll(x) scanf("%I64d", &x);
#define pr(x) printf("%d ", x);

typedef long long ll;
using namespace std;

int main() {
    int n;
    while(cin >> n) {
        vector<pair<int, int> >a(n);
        for(int i = 0; i < n; i++) {
            sf(a[i].first);
            sf(a[i].second);
        }


        vector<pair<int,int> >inter(n);
        for(int i = 0; i < n; i++) inter[i] = {0, i};

        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                if((a[i].first>a[j].first && a[i].first<a[j].second) || (a[i].second>a[j].first && a[i].second < a[j].second)
                   || (a[i].first<a[j].first && a[i].second>a[j].first) || (a[i].first<a[j].second && a[i].second>a[j].second))
                   inter[i].first++, inter[j].first++;
            }
        }

        vector<int>res;
        sortd(inter);
        if(inter[0].first == 0) {
            for(int i = 0; i < n; i++) res.push_back(i + 1);
        }
        else if(inter[0].first == 1) {
            if(n < 3 || inter[2].first == 0) res.push_back(inter[0].second + 1), res.push_back(inter[1].second + 1);
        }
        else {
            bool ok = 1;
            for(int i = 1; i < n && ok; i++) {
                if((i <= inter[0].first && inter[i].first != 1) || (i > inter[0].first && inter[i].first)) ok = 0;
            }

            if(ok) res.push_back(inter[0].second + 1);
        }

        cout << res.size() << endl;
        sorta(res);
        for(int i = 0; i < res.size(); i++) cout << res[i] << ' ';
        cout << endl;
    }
    return 0;
}
