#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#include <bits/stdc++.h>
#define all(c) c.begin(),c.end()
#define ll long long
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define mod 998244353
#define PI 3.1415926536
#define pll pair<ll, ll>
using namespace std;

template <class A, class B> ostream& operator << (ostream& out, const pair<A, B> &a) {
	return out << "(" << a.first << ", " << a.second << ")";
}

template <class A> ostream& operator << (ostream& out, const vector<A> &v) {
	out << "[";
	for (int i = 0; i < v.size(); i++) {
        if (i) out << ", ";
		out << v[i];
	}
	return out << "]";
}

bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
           return false;
        }
    }
    return true;
}

vector<ll> fact(ll n) {
    vector<ll> ans;
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0) {
            ans.push_back(i);
            while (n % i == 0) {
               n /= i;
            }
        }
    }
    if(n > 1) ans.push_back(n);
    return ans;
}

ll getPow(ll a,ll b) {
    ll res = 1ll, tp = a;
    while (b){
      if (b&1ll) {
          res *= tp;
      }
      tp *= tp;
      b >>= 1ll;
    }
    return res;
}

ll vec_mult(ll x1, ll y1, ll x2, ll y2, ll x3, ll y3) {
    return abs((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}
void ok() {
    cout << "YES" << endl;
    exit(0);
}

void no() {
    cout << "NO" << endl;
    exit(0);
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

const ll N = 300000 + 5, inf = 2e9;

ll xx[] = {1, -1, 0, 0};
ll yy[] = {0, 0, 1, -1};
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    ll n = nxt(), m = nxt();
    vector<vector<ll>> in(n);
    for (int i = 0; i < m; i++) {
        ll t1 = nxt() - 1, t2 = nxt() - 1;
        in[t1].push_back(t2);
    }
    vector<ll> mini_ans(n, LONG_MAX);
    for (int i = 0; i < n; i++) {
        for (auto x : in[i]) {
            mini_ans[i] = min((x - i + n) % n, mini_ans[i]);
        }
        mini_ans[i] += n * max(0ll, (ll)in[i].size() - 1);
    }
    auto get1 = [&](ll t) {
        ll ans = 0;
        for (int i = 0; i < n; i++) {
            if (in[i].size() == 0) continue;
            ll cur = (i - t + n) % n + mini_ans[i];
            ans = max(ans, cur);
        }
        return ans;
    };

    for (int i = 0; i < n; i++) {
        cout << get1(i) << " ";
    }
    return 0;
}
