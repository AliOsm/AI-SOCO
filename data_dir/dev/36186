/*
 * Author    : raj1307 - Raj Singh
 * Date      : 08.05.2020
 */
 
#pragma GCC optimize("Ofast")
// #pragma GCC optimize("unroll-loops")
// #define _CRT_SECURE_NO_WARNINGS
#include<bits/stdc++.h>
using namespace std;
 
#define fio ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define fr(i, a, b) for(int i = (a); i < (b); ++i)
#define fb(i, b, a) for(int i = (b); i > (a); --i)
#define fill(x,y) memset(x,y,sizeof(x))
#define rr return 
#define mp make_pair
#define pb push_back
#define sz(x) ((int)x.size())
#define int long long
#define ll long long
#define ld long double
#define S second
#define F first
#define endl "\n"
#define Endl "\n"
#define all(v) (v).begin(), (v).end()
typedef pair<int, int> ii;;
int max(int a,int b){if(a>b) return a; else return b;}
int min(int a,int b){if(a>b) return b; else return a;}
int gcd(int a,int b){ return (b == 0) ? a : gcd(b, a % b);}
inline int lcm(int a,int b){ return a / gcd(a, b) * b;}
inline int normalize(int x,int mod){ x %= mod; if (x < 0) x += mod; return x;}
 
int dx[4]={0,0,1,-1};
int dy[4]={1,-1,0,0};
string abc="abcdefghijklmnopqrstuvwxyz";
const double PI=acosl(-1);
const int mod = 1000*1000*1000+7;
//const int mod = 998244353;
const int inf = 1e18 +5;
 
//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c; }
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c; }
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p; }
 
int floor1(int n,int k){
    if(n%k == 0 || n >= 0)return n/k;
    return (n/k)-1;
}
 
int ceil1(int n,int k){
    return floor1(n+k-1,k);
}
 
int powm(int a, int b) {
	int res=1;
	while(b) {
		if(b&1)
			res=(res*a)%mod;
		a=(a*a)%mod;
		b>>=1;
	}
	return res;
}
 
 
const int N = 1e3 + 5;

 
int n,m;
int a[N][N];
int f[N][N];
int check(int x,int y){
	if(x>=1 and x<=n and y>=1 and y<=m and a[x][y]==1)
		return 1;
	return 0;
}




void dfs(int x,int y){

	f[x][y]=1;
	fr(i,0,4){
		if(check(x+dx[i],y+dy[i]) and f[x+dx[i]][y+dy[i]]==0){
			dfs(x+dx[i],y+dy[i]);
		}
	}
	return;
}




void solve(){   
        

	cin>>n>>m;
	string x;
	int ff=0;
	fr(i,1,n+1){
		cin>>x;
		fr(j,0,m){
			if(x[j]=='#'){
				a[i][j+1]=1;
				ff=1;
			}
			else
				a[i][j+1]=0;
		}
	}

	if(ff==0){
		cout<<0;
		return;
	}

	int row[N]={0};
	int col[N]={0};
	fr(i,1,n+1){
		int cnt=0;
		fr(j,1,m+1) cnt+=a[i][j];
		if(cnt==0) row[i]=0;
		else row[i]=1;
	}
	fr(j,1,m+1){
		int cnt=0;
		fr(i,1,n+1) cnt+=a[i][j];
		if(cnt==0) col[j]=0;
		else col[j]=1;
	}



	// fr(i,1,n+1) cout<<row[i]<<" ";
	// cout<<endl;
	// fr(i,1,m+1) cout<<col[i]<<" ";
	// cout<<endl;



	int flag=1;
	fr(i,1,n+1){
		vector<int>x;
		int cnt=0;
		int ff=0;
		fr(j,1,m+1){
			if(a[i][j]==1)
				++cnt;
			else{
				if(cnt!=0)
					x.pb(cnt);
				cnt=0;
			}
			if(row[i]==0 and col[j]==0)
				ff=1;
		}
		if(cnt!=0) x.pb(cnt);
		if((sz(x)>1 or sz(x)==0) and ff!=1) {
			flag=0;
			break;
		}
	}
	fr(j,1,m+1){
		vector<int>x;
		int cnt=0;
		int ff=0;
		fr(i,1,n+1){
			if(a[i][j]==1)
				++cnt;
			else{
				if(cnt!=0)
					x.pb(cnt);
				cnt=0;
			}
			if(row[i]==0 and col[j]==0)
				ff=1;
		}
		if(cnt!=0) x.pb(cnt);
		if((sz(x)>1 or sz(x)==0) and ff!=1) {
			flag=0;
			break;
		}
	}

	if(flag==0){
		cout<<-1;
		return;
	}
	// fr(i,1,n+1){
	// 	fr(j,1,m+1)
	// 	cout<<a[i][j]<<" ";
	// 	cout<<endl;
	// }


	int ans=0;
	fr(i,1,n+1){
		fr(j,1,m+1){
			if(f[i][j]==0 and a[i][j]==1){
				dfs(i,j);
				++ans;
			}
		}
	}

	cout<<ans;













    
}
 
 
 
 
signed main() {
	fio;
	#ifndef ONLINE_JUDGE 
    	freopen("input.txt", "r", stdin); 
    	freopen("output.txt", "w", stdout); 
    	//freopen("error.txt", "w", stderr); 
	#endif 
	cout<<fixed<<setprecision(10);
	int t=1;
	//cin>>t;  // UNCOMMENT FOR TEST-CASES
	//precompute();
	while(t--) {
		solve();
	}	
	return 0;
}
 
 