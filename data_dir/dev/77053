#include <bits/stdc++.h>
using namespace std;
const int N = 5e5 + 5;
int n,q,z;
long long v[N],lazy[N];
vector<pair<long long,int>>mp[(int)sqrt(N) + 1];
void fix(int b){for(int i = b*z;i <= n && i/z == b;i++)mp[b].push_back({v[i],i});sort(mp[b].begin(),mp[b].end());}
void update(int l,int r,int x){
	mp[l/z].clear();
	mp[r/z].clear();
	if(l/z == r/z){
		for(int i = l;i <= r;i++)v[i]+=x;
		fix(l/z);
		return;	
	}
	for(int i = l/z + 1;i < r/z;i++)lazy[i]+=x;
	for(int i = l;i <= n && i/z == l/z;i++)v[i]+=x;
	for(int i = r/z*z;i <= r && i/z == r/z;i++)v[i]+=x;
	fix(l/z);
	fix(r/z);
}
int find(int num){
	int mn = 1e9,mx = 0;
	for(int i = 0;i <= z;i++){
		if(mp[i].empty())continue;
		if(num - lazy[i] < 0)continue;
		int at = lower_bound(mp[i].begin(),mp[i].end(),make_pair(num - lazy[i],-1)) - mp[i].begin();
		if(at == mp[i].size() || mp[i][at].first != num - lazy[i])continue;
		mn = min(mn,mp[i][at].second);
		mx = max(mx,mp[i][at].second);
		at = upper_bound(mp[i].begin(),mp[i].end(),make_pair(num - lazy[i],N + N)) - mp[i].begin();
		--at;
		mx = max(mx,mp[i][at].second);
	}
	if(mn == 1e9)return -1;
	return mx - mn;
}
int main(){
// 	freopen("readin.txt","r",stdin);
	scanf("%d%d",&n,&q);
	for(int i = 1;i <= n;i++)scanf("%d",v + i);
	z = sqrt(n) + 1;
	for(int i = 1;i <= n;i++)mp[i/z].push_back({v[i],i});
	for(int i = 0;i <= z;i++)sort(mp[i].begin(),mp[i].end());
	int t,l,r,x;
	while(q--){
		scanf("%d",&t);
		if(t == 1){
			scanf("%d%d%d",&l,&r,&x);
			update(l,r,x);
		}
		else{
			scanf("%d",&x);
			printf("%d\n",find(x));
		}
	}
}