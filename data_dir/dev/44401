#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ff first
#define ss second
#define PI 2*acos(0.0)
#define all(a) a.begin(),a.end()
#define INF (1<<28)
#define mem(a,x) memset(a,x,sizeof(a))
#define SEGMENT_TREE left=2*node,right=left+1,mid=(b+e)/2
using namespace std;


/**------------------------------------BITMASK------------------------------------------**/
//int Change(int N, int pos){return N= N^(1<<pos);}
//bool Check(int N, int pos){return (bool)(N &(1<<pos));}
/**-----------------------------------------------------------------------------------------------**/

/**-----------------------------DIRECTION_ARRAY-------------------------**/
///------FOUR_DIRECTION---------///
//int fx[]={0,1,0,-1};
//int fy[]={1,0,-1,0};


///------EIGHT_DIRECTION---------///
//int fx[]={0,1,1,1,0,-1,-1,-1};
//int fy[]={1,1,0,-1,-1,-1,0,1};
/**--------------------------------------------------------------------------------------**/

//int gcd(int a, int b){return (a==0)? b: gcd(b%a,a);}
//int lcm(int a, int b){return (a/gcd(a,b))*b;}


/*****int exgcd(int A, int B, int *X, int *Y){


    int x2, y2, x1, y1, x, y, r, r1, r2, q;
    x2=1; y2=0;
    x1=0; y1=1;
    for(r2=A, r1=B; r1!=0 ; r2=r1, r1=r, x2=x1, y2=y1, x1=x, y1=y){

        q=r2/r1;
        r=r2%r1;
        x=x2-(x1*q);

        y=y2-(y1*q);
    }
    *X=x2;
    *Y=y2;
    return r2;

}******/




///-----------------------------START FROM HERE--------------------------------------///

vector<pii>vv[100005];
ll Not[100005];
ll mod=1000000007;
int n, k;

void dfs(int u, int par){

    Not[u]=1;
    for(int i=0; i<vv[u].size(); i++){

        int v=vv[u][i].ff;
        if(v==par)continue;
        dfs(v, u);

    }
    for(int i=0; i<vv[u].size(); i++){
        int v=vv[u][i].ff;
        if(v==par)continue;
        int vvv=vv[u][i].ss;
        if(vvv==0)Not[u]+=Not[v];

    }

}

void dfs2(int u, int par, int total){

    Not[u]=total;
    for(int i=0; i<vv[u].size(); i++){

        int v=vv[u][i].ff;
        if(v==par)continue;
        int vvv=vv[u][i].ss;
        if(vvv==0)dfs2(v, u, Not[u]);
        else dfs2(v, u, Not[v]);

    }

}

ll bigmod(ll n, ll po){
    //cout<<n<<" "<<po<<endl;
    if(po==0)return 1;
    if(po==1)return n;
    if(po%2==0){

        ll ret=bigmod(n, po/2);
        ret*=ret;
        ret%=mod;
        return ret;
    }
    ll ret=bigmod(n, po-1);
    ret*=n;
    ret%=mod;
    return ret;

}

int main(){

    scanf("%d %d", &n, &k);

    for(int i=1; i<n; i++){

        int u, v, pp;
        scanf("%d %d %d",&u, &v, &pp);

        vv[u].pb(make_pair(v, pp));
        vv[v].pb(make_pair(u, pp));

    }
   // cout<<n<<" "<<k<<endl;
    ll ans=bigmod(n, k);
    //cout<<ans;
    dfs(1, 0);
    dfs2(1, 0, Not[1]);


    for(int i=1; i<=n; i++){
        //cout<<i<<" "<<Not[i]<<endl;
        ll z=bigmod(Not[i], k-1);
        ans-=z;
        ans%=mod;
        ans+=mod;
        ans%=mod;
    }
    cout<<ans;
}
