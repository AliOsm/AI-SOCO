#include <bits/stdc++.h>

using namespace std;
typedef long long ll;

int a[1005][1005];
vector<pair<int,int>> color_cells[45];

int cost[1005][1005][45];

bool used_color[45];

int n,m,k;

vector<pair<int,int>> dir = { {0,1} , {0,-1} , {-1,0} , {1,0} };


void BFS(int col){
    int r,c;
    queue < pair<int,int> > q;
    for(auto i:color_cells[col]){
        cost[i.first][i.second][col] = 0;
        q.push(i);
    }
    for(int i=1;i<=k;i++)used_color[i] = 0;
    used_color[col]=1;

    while(q.size()){
        r = q.front().first;
        c = q.front().second;
        q.pop();
        if(used_color[ a[r][c] ] == 0){
            used_color[ a[r][c] ] = 1;
            for(auto i:color_cells[ a[r][c] ]){
                if(cost[i.first][i.second][col]==-1){
                    cost[i.first][i.second][col] = cost[r][c][col]+1;
                    q.push(i);
                }
            }
        }

        for(auto i:dir){
            int rr = r + i.first;
            int cc = c + i.second;
            if(cost[rr][cc][col] == -1 && rr >=0 && cc >= 0 && rr < n && cc < m){
                cost[rr][cc][col] = cost[r][c][col] + 1;
                q.push({rr,cc});
            }
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
    mt19937 rng(chrono::high_resolution_clock::now().time_since_epoch().count());
    cin >> n >> m >> k;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            cin>>a[i][j];
            color_cells[ a[i][j] ].push_back({i,j});
        }
    }
    memset(cost,-1,sizeof(cost));

    for(int i=1;i<=k;i++){
        BFS(i);
    }

    int q;
    cin >> q;
    while(q--){
        int r1,c1,r2,c2;
        cin >> r1 >> c1 >> r2 >> c2 ;
        r1--;c1--;r2--;c2--;
        int ans = abs(r1-r2) + abs(c1-c2);
        for(int i=1;i<=k;i++){
            ans = min (ans , cost[r1][c1][i] + cost[r2][c2][i] + 1  );
        }
        cout << ans << "\n";
    }
}
