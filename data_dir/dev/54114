#include <bits/stdc++.h>

using namespace std;

const long long P=127;
const long long base=1000000007;

struct myhash{
    string s;
    vector<long long> h;
    vector<long long> pw;
    myhash(string ts){
        s=ts;
        h.resize(s.size()+1);
        pw.resize(s.size()+1);
        pw[0]=1;
        for(int i=0; i<s.size(); i++){
            pw[i+1]=P*pw[i]%base;
            h[i+1]=(P*h[i]+s[i])%base;
        }
    }
    long long substr(int a, int len){
        return ((h[a+len]-pw[len]*h[a])%base+base)%base;
    }
    bool cmp(int a, int b, int len){
        return substr(a,len)==substr(b,len);
    }
};

long long binpow(long long a, long long n){
    long long res=1;
    while(n){
        if(n&1)res=(res*a)%base;
        a=a*a%base;
        n>>=1;
    }
    return res;
}

signed main()
{
#ifdef files
	ifstream cin("input.txt");
	ofstream cout("output.txt");
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n,k;
    cin >> n >> k;
    string p;
    cin >> p;
    int m=p.size();
    myhash h(p);
    int pr=0;
    long long ans=1;
    for(int i=0; i<k; i++){
        int x;
        cin >> x;
        if(x<=pr){
            int len=(pr-x+1);
            if(!h.cmp(m-len,0,len))return cout << 0, 0;
        }
        else ans=ans*binpow(26,x-pr-1)%base;
        pr=x+m-1;
    }
    ans=ans*binpow(26,n-pr)%base;
    cout << ans;
}
