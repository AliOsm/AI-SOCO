#include <bits/stdc++.h>

#define F first
#define S second
#define pb push_back
#define ld  double
#define ll long long
//#define int long long


using namespace std;

const int MAXN = 201 * 1001;

void add(vector<int>&v , int x )
{
    for(auto u : v )
        if(u&-u&x)
            x ^= u;
    if(!x) return ;
    for(auto &u : v)
        if(x&-x&u)
            u ^= x ;
    v.pb(x) ;
}

vector<int> add(vector<int> v , vector<int>v2)
{
    if(v2.size()>v.size())
        v.swap(v2) ;
    vector<int> ans = v ;
    for(auto u : v2)
        add(ans,u);
    return ans ;
}

vector<int> seg[4*MAXN] ;

int a[MAXN] , b[MAXN];

void build(int s , int e , int ind)
{
    if(e-s==1)
    {
        if(b[s])seg[ind].pb(b[s]) ;
        return ;
    }
    int mid = (s+e) / 2 ;
    build(s,mid,2*ind);
    build(mid,e,2*ind+1) ;
    seg[ind] = add(seg[2*ind],seg[2*ind+1]) ;
 //   cout<<'*'<<s<<' '<<e<<' '<<seg[ind].size()<<'\n';
 //   for(auto u : seg[ind])
  //      cout<<u<<' ';
  //  cout<<'\n';
}

void upd(int i , int x , int s , int e , int ind )
{
    if(e-s==1)
    {
        int k = 0 ;
        if(seg[ind].size())
            k = seg[ind].back() , seg[ind].pop_back();
        if(k^x)
        seg[ind].pb(k ^ x) ;
        return ;
    }
    int mid = (s+e) / 2;
    if(i<mid)
        upd(i,x,s,mid,2*ind) ;
    else
        upd(i,x,mid,e,2*ind+1) ;
    seg[ind] = add(seg[2*ind],seg[2*ind+1]) ;
}

vector<int> get(int l , int r , int s , int e , int ind)
{
    if(l<=s&&e<=r)
        return seg[ind] ;
    if(e<=l||r<=s)
        return seg[0] ;
    int mid = (s+e) / 2 ;
    return add(get(l,r,s,mid,2*ind),get(l,r,mid,e,2*ind+1)) ;
}

int segx[4*MAXN] ;

void add(int l , int r , int v , int s , int e , int ind )
{
    if(l<=s&&e<=r)
    {
        segx[ind] ^= v ;
        return ;
    }
    if(r<=s||e<=l)
        return ;
    int mid = (s+e) /  2 ;
    add(l,r,v,s,mid,2*ind);
    add(l,r,v,mid,e,2*ind+1) ;
}

int get(int i , int s , int e , int ind )
{
    if(e-s==1)
        return a[i] ^ segx[ind]  ;
    int mid = (s+e) / 2 ;
    if(i<mid)
        return segx[ind] ^ get(i,s,mid,2*ind) ;
    return segx[ind] ^ get(i,mid,e,2*ind+1) ;
}

int32_t main()
{
   ios::sync_with_stdio(0);cin.tie(0);
   int n , q ;
   cin >> n >> q ;
   for(int i = 0 ; i < n ; i ++ )
    cin >> a[i] ;
   for(int j = 1 ; j < n ; j ++ )
      b[j] = a[j]^a[j-1] ;
    build(0,n,1) ;
    while(q--)
    {
        int t , l , r , k ;
        cin >> t >> l >> r ;
        if(t==2)
        {
            l--;
            int x = get(l,0,n,1) ;
            vector<int> v = get(l+1,r,0,n,1);
        //   cout<<'*'<<x<<'\n';
            add(v,x);
            cout<<(1<<(v.size()))<<'\n';
        }
        else
        {
            cin >> k ;
            l--;
            add(l,r,k,0,n,1) ;
         //   if(l+1<n)upd(l+1,k,0,n,1);
            if(l)upd(l,k,0,n,1);
         //   if(r+1<n&&r-l>2)upd(r-1,k,0,n,1);
            if(r<n)upd(r,k,0,n,1) ;

        }
    }



}
