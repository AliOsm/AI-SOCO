#include<iostream>
#include<algorithm>
#include<iomanip>
#include <stdio.h>
#include <string.h>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <new>
#include <cmath>
#include<fstream>
#include <bitset> 
using namespace std;
#define Precision(i) cout << fixed << setprecision(i)
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <long long, long long> pll;
const ll N = 3e5 + 10, NM = 3e5, MOD = 1e9 + 7 , INF = 1e18 + 10, SQ = 500, LOG = 40;
ll n, m,x1, x2, d, z, a[N], dp[N], t ,y2, mini ,ptr, x, y,ptr1, ptr2, ans, k;
vector <string> cite, khat, khatc;
string s;
map <string , int> mp;
int main()  
{
	ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
	bool flag = 1;
	while (getline(cin , s))
	{
		if (s.size() >= 6 && s.substr(1, 5) == "begin" && s[0] == 92)
		{
			flag = 0;
		}
		if (flag)
		{
			for (int i = 0; i < s.size(); i++)
			{
				if (i + 5 < s.size() && s[i] == 92 && s[i + 1] == 'c' && s[i + 2] == 'i' && s[i + 3] == 't' && s[i + 4] == 'e' && s[i + 5] == '{')
				{
					string h = "";
					for (int j = i + 6; j < s.size(); j++)
					{
						if (s[j] == '}') 
						{
							i = j;
							break;
						}
						h += s[j];
					}
					cite.push_back(h);
				}
			}
			continue;
		}
		khat.push_back(s);
		if (s.size() >= 4 && s.substr(1, 3) == "end" && s[0] == 92)
		{
			break;
		}
		if (khat.size() > 1)
		{
			string h = "";
			for (int i = 9; i < s.size(); i++)
			{
				if (s[i] == '}') break;
				h += s[i];
			}
			khatc.push_back(h);
			mp[h] = khat.size()-1;
		}
	}
	
	for (int i = 0; i < cite.size(); i++)
	{
		if (cite[i] != khatc[i]) ans++;
	}
	if (ans == 0)
	{
		cout << "Correct";
		return 0;
	}
	cout << "Incorrect" << endl;
	cout << khat[0] << '\n';
	for (int i = 0; i < cite.size(); i++)
	{
		cout << khat[mp[cite[i]]] << '\n';
	}
	cout << khat[khat.size()-1] << '\n';
}