///Bismillahir Rahmanir Rahim
#include<bits/stdc++.h>

#define                           ll                          long long
#define                           fi                          first
#define                           si                          second
#define                           mp                          make_pair
#define                           pb                          push_back
#define                           pi                          pair<int,int>
#define                           f(i,l,r)                    for(int i=l;i<=r;i++)
#define                           M                           100009
#define                           clr(x)                      memset(x,0,sizeof(x));
#define                           bug(i)                      cout<<"akhane ami  "<<i<<endl;
#define                           fast                        ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);


                                      /* AHASAN KABIR  JFBGDFKGB */

using namespace std;

const ll inf=2147383647;


///BIG INTEGER TEMPLATE
/*..................................................................*/
struct Bigint
{
    string a;
    int sign;

    Bigint () {}
    Bigint ( string b ) { ( *this ) = b; }

    int size(){
        return a.size();
    }
    Bigint inverseSign (){
        sign *= -1;
        return ( *this );
    }
    Bigint normalize ( int newSign ){
        for ( int i = a.size() - 1; i > 0 && a[i] == '0'; i-- )
            a.erase ( a.begin() + i );
        sign = ( a.size () == 1 && a[0] == '0' )? 1 : newSign;
        return ( *this );
    }
    void operator = ( string b ) {
        a = b[0] == '-' ? b.substr ( 1 ) : b;
        reverse ( a.begin(), a.end() );
        this->normalize ( b[0] == '-' ? -1 : 1 );
    }
    void operator = ( long long  num ) // My modified = operator
    {
        char buf[30];
        sprintf ( buf, "%lld", num );
        *this = buf;
    }
    bool operator < ( const Bigint &b ) const {
        if ( sign != b.sign ) return sign < b.sign;
        if ( a.size() != b.a.size() )
            return sign == 1 ? a.size() < b.a.size() : a.size() > b.a.size();
        for ( int i = a.size() - 1; i >= 0; i-- )
            if ( a[i] != b.a[i] ) return sign == 1 ? a[i] < b.a[i] : a[i] > b.a[i];
        return false;
    }
    bool operator == ( const Bigint &b ) const {
        return a == b.a && sign == b.sign;
    }
    Bigint operator + ( Bigint b ) {
        if ( sign != b.sign ) return ( *this ) - b.inverseSign();
        Bigint c;
        for ( int i = 0, carry = 0; i < a.size() || i < b.size() || carry; i++ )
        {
            carry += ( i < a.size() ? a[i] - 48 : 0 ) + ( i < b.a.size() ? b.a[i] - 48 : 0 );
            c.a += ( carry % 10 + 48 );
            carry /= 10;
        }
        return c.normalize( sign );
    }
    Bigint operator - ( Bigint b ){
        if ( sign != b.sign ) return ( *this ) + b.inverseSign();
        int s = sign; sign = b.sign = 1;
        if ( ( *this ) < b ) return ( ( b - ( *this ) ).inverseSign() ).normalize( -s );
        Bigint c;
        for ( int i = 0, borrow = 0; i < a.size(); i++ )
        {
            borrow = a[i] - borrow - ( i < b.size() ? b.a[i] : 48 );
            c.a += borrow >= 0 ? borrow + 48 : borrow + 58;
            borrow = borrow >= 0 ? 0 : 1;
        }
        return c.normalize( s );
    }
    Bigint operator * ( Bigint b ){
        Bigint c ( "0" );
        for ( int i = 0, k = a[i] - 48; i < a.size(); i++, k = a[i] - 48 )
        {
            while ( k-- ) c = c + b;
            b.a.insert( b.a.begin(), '0' );
        }
        return c.normalize ( sign * b.sign );
    }
    Bigint operator / ( Bigint b )
    {
        if ( b.size() == 1 && b .a[0] == '0' ) b.a[0] /= ( b.a[0] - 48 );
        Bigint c ( "0" ), d;
        for ( int j = 0; j < a.size(); j++ ) d.a += "0";
        int dSign = sign * b.sign; b.sign = 1;
        for ( int i = a.size() - 1; i >= 0; i-- )
        {
            c.a.insert ( c.a.begin(), '0' );
            c = c + a.substr( i, 1 );
            while ( !( c < b ) ) c = c - b, d.a[i]++;
        }
        return d.normalize( dSign );
    }
    Bigint operator % ( Bigint b ){
            if ( b.size() == 1 && b.a[0] == '0' ) b.a[0] /= ( b.a[0] - 48 );
            Bigint c ( "0" );
            b.sign = 1;
            for ( int i = a.size() - 1; i >= 0; i-- )
            {
                c.a.insert ( c.a.begin(), '0' );
                c = c + a.substr( i, 1 );
                while ( ! ( c < b ) ) c = c - b;
            }
            return c.normalize( sign );
    }
    void print()
    {
        if ( sign == -1 ) putchar( '-' );
        for ( int i = a.size() - 1; i >= 0; i-- ) putchar( a[i] );
    }
    Bigint operator * ( long long  b ){ //String with small number
        long long  carry = 0;
        Bigint c = *this;
        int bsign;
        if ( b < 0 )
        {
            bsign = -1;
            b *= -1;
        }
        else bsign = 1;

        for( int i = 0; i < c.a.size(); i++ ) {
            carry += (c.a[i] - 48) * b;
            c.a[i] = ( carry % 10 + 48 );
            carry /= 10;
        }
        while( carry ) {
            c.a += ( carry % 10 + 48 );
            carry /= 10;
        }
        return c.normalize( sign * bsign );
    }
};

/********************************************************/



Bigint pw[2009];
void make()
{
    pw[0]="1";
    for(int i=1;i<=2000;i++)
    {
        pw[i]=pw[i-1]*2;
    }
}
struct uff
{
    int val;
    bool sel;
}a[5019];

Bigint ses;
void ok(int buy,int sell)
{
    if(buy==inf)
    {
          if(sell!=inf)a[sell].val=inf-10;
          else return ;
    }
    else
    {
        ses=ses+pw[a[sell].val];
        for(int i=buy;i<=sell;i++)a[i].val=inf;
    }
}
  char ts[209];
int main()
{

  make();
  ll n;
  cin>>n;

  for(int i=0;i<n;i++)
  {
      scanf("%s %d",ts,&a[i].val);
      a[i].sel=false;
      if(ts[0]=='s')
      {
          a[i].sel=true;
      }
  }
  ses="0";
  int t55=6000;
  while(t55--)
  {
      ll sell=inf,buy=inf,mx=-1;
      for(int i=n-1;i>=0;i--)
      {
          if(a[i].val==inf)
          {
              ok(buy,sell);
              sell=inf;
              buy=inf;
              mx=-1;
              continue;
          }
          if(a[i].sel)
          {
              if(a[i].val==inf-10)continue;
              if(a[i].val>=mx)
              {
                  mx=a[i].val;
                  sell=i;
                  buy=inf;
              }
          }
          else
          {
              if(a[i].val==mx && buy==inf)
              {
                  buy=i;
              }
          }
      }
      ok(buy,sell);
  }
 ses.print();
    return 0;
}

