#include <bits/stdc++.h>
using namespace std;

vector <int> val, fst, fdr;

void add()
{

}

int p, n;
vector <int> v;

int mk_arb(int st, int dr)
{
    add();
    if (st == dr)
        return p++;
    int x = p++;
    fst[x] = mk_arb(st, (st + dr) / 2);
    fdr[x] = mk_arb((st + dr) / 2 + 1, dr);
    return x;
}

void update(int & x, int st, int dr, int poz, int v)
{
    if (poz < st || poz > dr)
        return;
    add();
    val[p] = val[x], fst[p] = fst[x], fdr[p] = fdr[x];
    x = p++;
    val[x] += v;
    if (st != dr) {
        update(fst[x], st, (st + dr) / 2, poz, v);
        update(fdr[x], (st + dr) / 2 + 1, dr, poz, v);
    }
}
int query(int x, int st, int dr, int left, int right)
{
    if (left > dr || right < st)
        return 0;
    if (left <= st && right >= dr)
        return val[x];
    return query(fst[x], st, (st + dr) / 2, left, right)
        + query(fdr[x], (st + dr) / 2 + 1, dr, left, right);
}
Aint(int _n = 1)
{
    v = vector <int> ();
    n = _n;
    int q = mk_arb(1, n);
    cout << q;
    cout.flush();
    v.push_back(q);
}
void update(int x, int vl = 1)
{
    v.push_back(v.back());
    update(v.back(), 1, n, x, vl);
}
int query(int ver, int st, int dr)
{
    if (ver >= v.size())
        return 0;
    return query(v[ver], 1, n, st, dr);
}

int p1[1000010], p2[1000010];
int afla1[1000010], afla2[1000010];

vector <pair <int, int>> nr;

int ans = 0;

int f(int z)
{
    return (z - 1 + ans) % n + 1;
}

int main()
{
    scanf("%d", &n);
    val.resize(25000000);
    fst.resize(25000000);
    fdr.resize(25000000);
    v.push_back(mk_arb(1, n));

    for (int i(1); i <= n; i++) {
        scanf("%d", &p1[i]);
        afla1[p1[i]] = i;
    }
    for (int i(1); i <= n; i++) {
        scanf("%d", &p2[i]);
        afla2[p2[i]] = i;
    }

    for (int i(1); i <= n; i++)
        nr.push_back({ afla1[i], afla2[i] });

    sort(nr.begin(), nr.end());

    for (auto i : nr)
        update(i.second);

    int m, up, down, left, right, a, b, c, d;

    scanf("%d", &m);

    while (m--) {
        scanf("%d%d%d%d", &a, &b, &c, &d);
        up = min(f(a), f(b));
        down = max(f(a), f(b));
        left = min(f(c), f(d));
        right = max(f(c), f(d));

        ans = 0;
        int p(-1), q(1 << 21);
        while (q >>= 1)
            if ((p + q) < nr.size() && nr[p + q].first < up)
                p += q;

        ans -= query(p + 1, left, right);
        p = -1, q = 1 << 21;
        while (q >>= 1)
            if ((p + q) < nr.size() && nr[p + q].first <= down)
                p += q;
        ans += query(p + 1, left, right);

        printf("%d\n", ans);
        ans++;
    }
    return 0;
}
