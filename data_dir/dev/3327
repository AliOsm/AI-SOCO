#include <bits/stdc++.h>
using namespace std;

#ifdef SG
    #include <debug.h>
#else
    #define show(...)
    #define debug(...)
    #define deepen(...)
    #define timer(...)
#endif

#define ARG4(_1,_2,_3,_4,...) _4

#define forn3(i,l,r) for (int i = int(l); i < int(r); ++i)
#define forn2(i,n) forn3 (i, 0, n)
#define forn(...) ARG4(__VA_ARGS__, forn3, forn2) (__VA_ARGS__)

#define ford3(i,l,r) for (int i = int(r) - 1; i >= int(l); --i)
#define ford2(i,n) ford3 (i, 0, n)
#define ford(...) ARG4(__VA_ARGS__, ford3, ford2) (__VA_ARGS__)

#define forv(i,v) for (auto i = v.begin(); i != v.end(); ++i)
#define forr(i,v) for (auto i = v.end(); i != v.begin() && (--i, 1); )
#define ve vector
#define pa pair
#define tu tuple
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) ((int)(a).size())

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef unsigned char uc;
typedef pa<int, int> pii;                                     
typedef pa<int, ll> pil;
typedef pa<ll, int> pli;
typedef pa<ll, ll> pll;
typedef ve<int> vi;

const ld pi = 3.1415926535897932384626433832795l;

template<typename T> inline auto sqr (T x) -> decltype(x * x) {return x * x;}
template<typename T> inline T abs (T x) {return x > T() ? x : -x;}
template<typename T1, typename T2> inline bool umx (T1& a, T2 b) {if (a < b) {a = b; return 1;} return 0;}
template<typename T1, typename T2> inline bool umn (T1& a, T2 b) {if (b < a) {a = b; return 1;} return 0;}

const int N = 200100;

struct Input {
    int p[N];
    int n;      

    bool read () {
        if (scanf ("%d", &n) != 1)
            return 0;
        forn(i, n - 1) {
            scanf ("%d", &p[i]);
            p[i]--;
        }
        return 1;
    }

    void init (const Input &input) {
        *this = input;
    }
};

const ll mod = 1000000007;

struct Data: Input {
    ll ans[N];
        
    void write () {
        forn(i, n) {
            cout << ans[i] << ' ';
        }
        cout << endl;
    }
    
    virtual void solve () {}
    
    virtual void clear () {
        *this = Data();
    }
};

struct Solution: Data {
    ll dp[N];
    vector <int> a[N];
    vector<ll> suf[N];

    void dfs (int v, int pr) {
        dp[v] = 1;
        forn(i, a[v].size()) {
            int to = a[v][i];
            if (to == pr)
                continue;
            dfs(to, v);
            dp[v] = (1ll * dp[v] * (dp[to] + 1)) % mod;
        }
    }

    inline ll get_st (ll a, int b) {
        ll ans = 1;
        forn(i, 30) {
            if (b & (1 << i)) {
                (ans *= a) %= mod;
            }
            (a *= a) %= mod;
        }
        return ans;
    }

    void calc (int v, int pr) {
        ans[v] = dp[v];
        ll dpar = 1;    
        ll res = 1;
        ford(i, a[v].size()) {
            int to = a[v][i];
            suf[v].pb(res);
            if (to == pr) {
                dpar = dp[pr] + 1;
                continue;
            }   
            (res *= dp[to] + 1) %= mod;
        }
        reverse(all(suf[v]));
        ll tek = 1;     
        forn(i, a[v].size()) {
            int to = a[v][i];
            if (to == pr)
                continue;   
            ll oldv = dp[v], oldto = dp[to];
            dp[v] = suf[v][i] * tek % mod * dpar % mod;
            (dp[to] *= (dp[v] + 1)) %= mod;
            calc(to, v);
            dp[v] = oldv, dp[to] = oldto;
            (tek *= dp[to] + 1) %= mod;
        }
    }
            
    void solve () {
        forn(i, n - 1) {
            a[p[i]].pb(i + 1);
            a[i + 1].pb(p[i]);
        }
        dfs(0, -1);
        calc(0, -1);
    }
    
    void clear () {
        *this = Solution();
    }
};

Solution sol;

int main () {
    cout.setf(ios::showpoint | ios::fixed);
    cout.precision(20);
#ifdef SG
    freopen("d.in", "r", stdin);
//  freopen(".out", "w", stdout);
    while (sol.read()) {
        sol.solve();
        sol.write();
        sol.clear();
    }
#else
    sol.read();
    sol.solve();
    sol.write();
#endif

    return 0;
}
