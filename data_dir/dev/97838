/**
 * Dont raise your voice, improve your argument.
 * --Desmond Tutu
 */

#include <bits/stdc++.h>
using namespace std;

const double PI = acos(-1);
typedef long long ll;
#define int ll
#define fori(n) for(int i=0; i<int(n); i++)

#define cins(s) string s; cin>>s;
#define cini(i) int i; cin>>i;
#define cind(d) double d; cin>>d;
#define cinai(a, n) vi a(n); fori(n) { cin>>a[i]; }
#define cinas(s, n) vs s(n); fori(n) { cin>>s[i]; }
#define cinad(a, n) vd a(n); fori(n) { cin>>a[i]; }

typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<double> vd;
typedef vector<bool> vb;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<string> vs;

/* find 3 smallest numbers, let them be a[0], a[1] and a[2].
 * Then do a triple dp, from back
 * dp[0][i]=number of a[2] if start at pos i
 * dp[1][i]=number of a[1],a[2] if start at pos i
 * dp[2][i]=number of a[0],a[1],a[2] if start at pos i
 **/
void solve() {
    cini(n);
    cinai(a,n);
    vi id(n);
    iota(id.begin(), id.end(), 0);
    sort(id.begin(), id.end(), [&](int i1, int i2) {
        return a[i1]<a[i2];
    });

    vi perm= { 0, 1, 2 };
    vi mmi= { a[id[0]], a[id[1]], a[id[2]] };

    map<vi,int> ans;

    do {

        vi mi= { mmi[perm[0]], mmi[perm[1]], mmi[perm[2]] };
        vvi dp(3, vi(n+1));
        for(int i=n-1; i>=0; i--) {
            dp[0][i]=dp[0][i+1];
            if(a[i]==mi[2])
                dp[0][i]++;

            dp[1][i]=dp[1][i+1];
            if(a[i]==mi[1])
                dp[1][i]+=dp[0][i+1];

            dp[2][i]=dp[2][i+1];
            if(a[i]==mi[0])
                dp[2][i]+=dp[1][i+1];
        }

        ans[mi]=dp[2][0];

    } while(next_permutation(perm.begin(), perm.end()));

    int ansX=0;
    for(auto ent : ans)
        ansX+=ent.second;
    cout<<ansX<<endl;
}

signed main() {
    cin.tie(nullptr);
    std::ios::sync_with_stdio(false);
    solve();
}

