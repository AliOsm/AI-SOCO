#include<stdio.h>
#include<iostream>
#include<string.h>
#include<string>
#include<ctype.h>
#include<math.h>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<bitset>
#include<algorithm>
#include<time.h>
using namespace std;
void fre() { freopen("c://test//input.in", "r", stdin); freopen("c://test//output.out", "w", stdout); }
#define MS(x, y) memset(x, y, sizeof(x))
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T1, class T2>inline void gmax(T1 &a, T2 b) { if (b > a)a = b; }
template <class T1, class T2>inline void gmin(T1 &a, T2 b) { if (b < a)a = b; }
const int N = 0, M = 0, Z = 1e9 + 7, inf = 0x3f3f3f3f;
template <class T1, class T2>inline void gadd(T1 &a, T2 b) { a = (a + b) % Z; }
int casenum, casei;
LL x, y, l, r;
LL vx[64], vy[64];
int main()
{
	while (~scanf("%lld%lld%lld%lld", &x, &y, &l, &r))
	{
		vx[0] = 1;
		for (int i = 1; i <= 60; ++i)
		{
			double now = vx[i - 1] * 1.0 * x;
			if (now <= 1.1e18)vx[i] = vx[i - 1] * x;
			else break;
		}
		vy[0] = 1;
		for (int i = 1; i <= 60; ++i)
		{
			double now = vy[i - 1] * 1.0 * y;
			if (now <= 1.1e18)vy[i] = vy[i - 1] * y;
			else break;
		}
		vector<LL>v;
		v.push_back(l - 1);
		v.push_back(r + 1);
		for (int i = 0; i <= 60; ++i)if(vx[i])
		{
			for (int j = 0; j <= 60; ++j)if(vy[j])
			{
				LL sum = vx[i] + vy[j];
				if (sum >= l && sum <= r)
				{
					v.push_back(sum);
				}
			}
		}
		sort(v.begin(), v.end());
		int sz = v.size() - 1;
		LL ans = 0;
		for (int i = 0; i < sz; ++i)
		{
			gmax(ans, v[i + 1] - v[i] - 1);
		}
		printf("%lld\n", ans);
	}
	return 0;
}
/*
【trick&&吐槽】


【题意】


【分析】


【时间复杂度&&优化】


*/