#include <bits/stdc++.h>

using namespace std;

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<ll ,int> pii;
typedef pair<pii, ll> para;
const int inf = 1e9 + 7;
const int maxN = 4e5;
const int MAX = 2e3 + 2;

int n, k, x, negCnt, negPos, posPos;
ll arr[maxN];
set<pii> num;


pii solve1(int position) {
	int z = arr[position] % x;
	int num = (arr[position] - (z - x)) / x;
	
	return pii(min(num, k), z - x);
}

pii solve2(int position) {
	int z = arr[position] % x;
	int num = ((z + x) - arr[position] ) / x;
	
	return pii(min(num, k), z + x);
}

void solve() {
	REP(i, n) {
		num.insert(pii(abs(arr[i]), i));
	}
	
	REP(i, k) {
		pii p = *num.begin();
		num.erase(num.begin());
		//cout<<p.st<<" "<<p.nd<<" "<<k<<endl;
		int mul = -1;
		if (arr[p.nd] >= 0) mul = 1;
		arr[p.nd] += mul * x;
		num.insert(pii(abs(arr[p.nd]), p.nd));
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin>>n>>k>>x;
	ll neg = -inf, pos = inf;
	negPos = n; posPos = n;
	arr[n] = inf;
	REP(i, n) {
		cin>>arr[i];
		if (arr[i] < 0) {
			neg = max(neg, arr[i]);
			if (neg == arr[i])
				negPos = i;
			negCnt++;
		} else {
			pos = min(pos, arr[i]);
			if (pos == arr[i])
				posPos = i;
		}
	}
	
	if (negCnt % 2 == 0) {
		//cout<<pos<<" "<<neg<<endl;
		if (pos <= abs(neg)) {
			pii p = solve1(posPos);
			//cout<<"1 : "<<p.st<<" "<<p.nd;
			arr[posPos] -= (p.st * x);
			k -= p.st;
		} else {
			pii p = solve2(negPos);
			//cout<<"2 : "<<p.st<<" "<<p.nd;
			arr[negPos] += (p.st * x);
			k -= p.st;
		}
		
	}
	solve();
	
	REP(i, n) cout<<arr[i]<<" ";
	return 0;
}
