/**
 * @author khokharnikunj8
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class CPerfectKeyboard {
public:
    vector<vector<int>> G;
    vector<bool> visited;

    bool dfs(int node, int parent) {
        visited[node] = true;
        for (int i : G[node]) {
            if (i == parent) continue;
            if (visited[i] || dfs(i, node)) return true;
        }
        return false;
    }

    void dfs1(vector<int> &ans, int node, int parent) {
        visited[node] = true;
        ans.push_back(node);
        for (int i : G[node]) {
            if (i == parent) continue;
            dfs1(ans, i, node);
        }
    }

    void solve(std::istream &in, std::ostream &out) {
        string s;
        in >> s;
        G.resize(26, vector<int>());
        visited.resize(26, false);
        for (int i = 0; i < 26; i++) {
            G[i].clear();
            visited[i] = false;
        }
        vector<set<int>> st(26, set<int>());
        for (int i = 0; i < (int) s.length() - 1; i++) {
            if (st[s[i] - 'a'].find(s[i + 1] - 'a') == st[s[i] - 'a'].end()) {
                st[s[i] - 'a'].insert(s[i + 1] - 'a');
                G[s[i] - 'a'].push_back(s[i + 1] - 'a');
            }
            if (st[s[i + 1] - 'a'].find(s[i] - 'a') == st[s[i + 1] - 'a'].end()) {
                st[s[i + 1] - 'a'].insert(s[i] - 'a');
                G[s[i + 1] - 'a'].push_back(s[i] - 'a');
            }
        }
        for (int i = 0; i < 26; i++)
            if (st[i].size() > 2 || (!visited[i] && dfs(i, -1))) {
                out << "NO\n";
                return;
            }
        out << "YES\n";
        for (int i = 0; i < 26; i++) visited[i] = false;
        for (int i = 0; i < 26; i++) {
            if (st[i].size() == 1 && !visited[i]) {
                vector<int> ans;
                dfs1(ans, i, -1);
                for (int j : ans) {
                    out << (char) (j + 'a');
                }
            }
        }
        for (int i = 0; i < 26; i++) if (!visited[i]) out << (char) (i + 'a');
        out << "\n";

    }
};


int main() {
    CPerfectKeyboard solver;
    std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    int n;
    in >> n;
    for (int i = 0; i < n; ++i) {
        solver.solve(in, out);
    }

    return 0;
}
