#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define forq(i , a , b) for (int i = (a); i <= (b); ++i)
#define forr(i , b) forq( i , 0 , b - 1 )
#define F first
#define S second
#define IF -> F
#define IS -> S
#define qqmemset(array , val) memset (array , val , sizeof(array))
#define ALLV(vect) vect.begin() , vect.end()
#define mid (st + en) / 2
#define lef 2 * Node
#define rig lef + 1
#define Parent Node + (Node & (~Node + 1))
#define Neig Node - (Node & (~Node + 1))

ll R = 7 + 1e9 , NUMTESTCASE ;
const int NN = 10 + 1e5 ;
const double pi = acos(-1.0) ;
int di [4] = {1 , 0 , -1 , 0} , dj [4] = {0 , 1 , 0 , -1} , DI [8] = {1 , 1 , 0 , -1 , -1 , -1 , 0 , 1} , DJ [8] = {0 , 1 , 1 , 1 , 0 , -1 , -1 , -1} ;
using namespace std;
int n , m , k , Arr [NN] , Brr [NN] , CntA [NN] , CntB [NN] ;
vector <int> Div ;
int main()
{
    cin >> n >> m >> k ;
    for (int i = 1 ; i * i <= k ; i ++) {
        if (k % i == 0) {
            Div.push_back(i) ;
            if (i != k / i) Div.push_back(k / i) ;
        }
    }
    sort(ALLV(Div)) ;
    forq (i , 1 , n) scanf("%d" , Arr + i) ;
    forq (i , 1 , m) scanf("%d" , Brr + i) ;
    ll Ans = 0 ;
    for (int i = 1 ; i <= n ; ) {
        while (i <= n && Arr [i] == 0) i ++ ;
        if (i > n) break ;
        int t = 1 ;
        while (Arr [i] == 1) {
            CntA [t] ++ ;
            t ++ ;  i ++ ;
        }
    }
    for (int i = n ; i >= 1 ; i --)
        CntA [i] += CntA [i + 1] ;
    for (int i = 1 ; i <= m ; ) {
        while (i <= m && Brr [i] == 0) i ++ ;
        if (i > m) break ;
        int t = 1 ;
        while (Brr [i] == 1) {
            CntB [t] ++ ;
            t ++ ; i ++ ;
        }
    }
    for (int i = m ; i >= 1 ; i --)
        CntB [i] += CntB [i + 1] ;
  /*  forq (i , 1 , n) cout << CntB [i] << " " ;
    cout << endl ;
    forq (i , 1 , n) cout << CntA [i] << " " ;*/
    for (auto it : Div) {
        if (it <= n && k / it <= m) 
        Ans += CntA [it] * CntB [k / it] ;
    }
    cout << Ans ;
    return 0;
}
