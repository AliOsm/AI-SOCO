#include<bits/stdc++.h>
using namespace std ;
#define LL long long
#define Rep( i , a , b ) for( i = a ; i <= b ; i ++)
#define Rev( i , b , a ) for( i = b ; i >= a ; i --)
#define PB push_back
#define mod 998244353LL
#define PI acos(-1.0)

/*
// Ordered set
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template<typename T> using orderset = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
//orderset<int> s ; //orderset<int>::iterator it ;
//orderset<int> X; //X.insert(1); //X.insert(2); //X.insert(4); //X.insert(8); //X.insert(16);
//cout<<*X.find_by_order(1)<<endl; // 2 //cout<<*X.find_by_order(2)<<endl; // 4 //cout<<*X.find_by_order(4)<<endl; // 16 //cout<<(end(X)==X.find_by_order(6))<<endl; // true
//cout<<X.order_of_key(-5)<<endl;  // 0 //cout<<X.order_of_key(1)<<endl;   // 0 //cout<<X.order_of_key(3)<<endl;   // 2 //cout<<X.order_of_key(4)<<endl;   // 2 //cout<<X.order_of_key(400)<<endl; // 5
*/

LL n , m , t , caseno ;

LL a[100005] ;

vector< LL > store , store1 ;

int main()
{
    LL i , j ;
    scanf("%lld",&n) ;
    Rep( i , 1 , n ){
        scanf("%lld",&a[i]) ;
    }
    sort( a + 1 , a + 1 + n ) ;
    LL tot = 0 ;
    Rep( i , 1 , n ){
        if( tot < a[i] && i > 1 ){
            store.push_back( i ) ;
            store1.push_back( a[i] - tot ) ;
        }
        tot += a[i] ;
    }
    if( tot & 1 ){
        puts("NO") ;
        return 0 ;
    }
    //cout<< store.size() << "..\n" ;
    Rev( i , n , 1 ){
        if( store.size() == 0 ){
            puts("YES") ;
            return 0 ;
        }
        if( store.back() == i ){
            puts("NO") ;
            return 0 ;
        }
        while( store.size() && a[i] ){
            if( store1.back() <= a[i] ){
                a[i] -= store1.back() ;
                a[store.back()] -= store1.back() ;
                store1.pop_back() ;
                store.pop_back() ;
            }
            else{
                store1.back() -= a[i] ;
                a[store.back()] -= a[i] ;
                a[i] = 0 ;
            }
        }
    }
    puts("YES") ;

    return 0 ;
}
