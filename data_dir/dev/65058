#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cassert>

const bool debug = 0;

typedef std::pair<int, int> pii;

const int INF = (int)1e9+7;

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0); std::cout.tie(0); std::cerr.tie(0);
    int nI, nS;
    while (std::cin >> nI >> nS) {
        std::vector<int> arr(nI);
        for (auto &it : arr) { std::cin >> it; }
        std::vector<pii> seg(nS);
        for (auto &it : seg) {
            std::cin >> it.first >> it.second;
            it.first--, it.second--;
        }
        int best = *std::max_element(arr.begin(), arr.end()) - *std::min_element(arr.begin(), arr.end());
        std::vector<int> took;
        for (int max = 0; max < nI; ++max) {
            for (int min = 0; min < nI; ++min) {
                if (max == min) {
                    continue;
                }
                int tmp = 0;
                for (int i = 0; i < nS; ++i) {
                    tmp += (
                        seg[i].first <= min && min <= seg[i].second && 
                        (max < seg[i].first || max > seg[i].second)
                    );
                }
                if (best < arr[max] - arr[min] + tmp) {
                    best = arr[max] - arr[min] + tmp;
                    took.clear();
                    for (int i = 0; i < nS; ++i) {
                        if (
                            seg[i].first <= min && min <= seg[i].second && 
                            (max < seg[i].first || max > seg[i].second)) 
                            {
                            took.push_back(i+1);
                        }
                    }
                }
            }
        }
        std::cout << best << "\n";
        std::cout << took.size() << "\n";
        for (auto &it : took) { std::cout << it << ' '; }
        std::cout << std::endl;
    }
    return 0;
}