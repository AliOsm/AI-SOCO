#include <algorithm>
#include <iostream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <numeric>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define endl '\n'
#define F first
#define S second
#define mp make_pair
#define ll long long
#define pb push_back
#define pii pair < int, int >
#define type(x) __typeof(x.begin())
#define foreach(i, x) for(type(x) i = x.begin(); i != x.end(); i++)
#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define sol (root << 1)
#define sag (sol | 1)
#define orta ((bas + son) >> 1)
#define bit __builtin_popcount

#ifndef D
	#define dbgs(x) 0
	#define dbg(x) 0
	#define TIME 0
#else
	#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
	#define dbg(x) cerr << (#x) << " --> " << (x) << endl
	#define TIME cerr << "Tooks " << (double) clock() / CLOCKS_PER_SEC << " seconds." << endl
#endif

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 1e5 + 5;

int n, a[N], h[N], root[N], start;

bool leaf[N];

vector < int > cur, cycle, leafs[N];

vector < pii > ans;

void dfs(int x) {

	h[x] = 1;

	cur.pb(x);

	if(h[a[x]] == 1)
		start = a[x];

	if(!h[a[x]])
		dfs(a[x]);

	root[x] = root[a[x]];

	h[x] = 2;

}

int main () {
    
    ios :: sync_with_stdio(0);

	cin >> n;

	FOR(i, 1, n) leaf[i] = 1;

	FOR(i, 1, n)
	{
		cin >> a[i];

		leaf[a[i]] = 0;
	}

	FOR(i, 1, n)
		if(leaf[i])
		{
			cur.clear();

			start = -1;

			dfs(i);

			if(start != -1)
			{
				h[start] = 2;

				foreach(it, cur)
					root[*it] = start;

				cycle.pb(start);
			}

			if(!leafs[root[i]].empty())
				ans.pb(mp(root[i], i));

			leafs[root[i]].pb(i);
		}

	FOR(i, 1, n)
		if(h[i] != 2)
		{
			start = i;
			
			int curnode = a[start];
			
			h[start] = 2;

			while(curnode != start)
			{
				h[curnode] = 2;

				curnode = a[curnode];
			}
			
			cycle.pb(start);
		}

	FOR(i, 0, (int) cycle.size() - 2)
	{
		if(!leafs[cycle[i + 1]].empty())
			ans.pb(mp(cycle[i], leafs[cycle[i + 1]].front()));
		else
			ans.pb(mp(cycle[i], cycle[i + 1]));
	}

	if(cycle.size() > 1)
		if(!leafs[cycle.front()].empty())
			ans.pb(mp(cycle.back(), leafs[cycle.front()].front()));
		else
			ans.pb(mp(cycle.back(), cycle.front()));
	
	else if(!leafs[cycle.front()].empty())
		ans.pb(mp(cycle.front(), leafs[cycle.front()].front()));

	cout << ans.size() << endl;
	
	foreach(it, ans)
		cout << it -> F << ' ' << it -> S << endl;

	return 0;
    
}
