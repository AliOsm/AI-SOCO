#pragma comment (linker, "/STACK:256000000")
 
#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <memory.h>
#include <sstream>
#include <queue>
#include <cassert>
#include <ctime>
#include <complex>
#include <unordered_map>
#include <random>
 
using namespace std;
 
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<pii, pii> piiii;
typedef pair<int64, int> pli;
typedef pair<int, char> pic; 

#define pb push_back
#define sq(x) ((x)*(x))
#define cube(x) (((x)*(x))*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
#define rand32() (((unsigned int)(rand()) << 16) | (unsigned int)(rand()))
#define rand64() (((unsigned int64)(rand32()) << 16) | (unsigned int64)(rand32()))
#define bit(mask, b) ((mask >> b) & 1)
#define biton(mask, bit) (mask | (((uint64)(1)) << bit))
#define bitoff(mask, bit) (mask & (~(((uint64)(1)) << bit)))
#define bitputon(mask, bit) (mask |= (((uint64)(1)) << bit))
#define bitputoff(mask, bit) (mask &= (~(((uint64)(1)) << bit)))
#define FAIL() (*((int*)(0)))++
#define INF ((int)(1e9) + 1337)
#define EPS (1e-8)
#define y1 yy1
#define y0 yy0
#define j0 jj0

const long double PI = acosl((long double)-1.0);
const int64 LINF = (int64)4e18;//((1ull << 63) - 1ull);
int test;

const int MAXN = 200500;

int n, t;
char s[MAXN];

void init()
{
	scanf ("%d%d%s", &n, &t, &s[1]);
}

void solve()
{
	init();
	int f = 1;
	while (s[f] != '.')
	{
		f++;
	}
	f++;
	while (f <= n && s[f] <= '4')
	{
		f++;
	}
	int last = n;
	int fir = 1;
	s[0] = '0';
	bool comm = false;
	if (f <= n)
	{
		while (f >= 2 && s[f] >= '5' && t && !comm)
		{
			f--;
			if (s[f] == '.')
			{
				comm = true;
				f--;
			}
			t--;
			s[f]++;
			last = f;
		}
		while (f >= 1 && s[f] > '9')
		{
			s[f] = '0';
			if (s[f - 1] == '.')
			{
				f--;
			}
			s[--f]++;
			fir = min(1, f);
		}
	}
	while (!comm && s[last] == '0')
	{
		last--;
	}
	if (s[last] == '.')
	{
		last--;
	}
	for (int i = fir; i <= last; i++)
	{
		printf("%c", s[i]);
	}
}

void test_output()
{
	
}

int main()
{
	//srand(time(0)); test_output(100, 100, 100); 
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(TASK ".in", "rt", stdin); freopen(TASK ".out", "wt", stdout);
#endif
	srand(333);
	double start = clock();
	int tests = 1;
	//scanf ("%d", &tests);
	for (test = 1; test <= tests; test++)
	{
		solve();
	}
	fprintf(stderr, "%.5lf\n", (clock() - start) / CLOCKS_PER_SEC);
    return 0;
}