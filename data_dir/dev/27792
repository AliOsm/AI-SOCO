#include <bits/stdc++.h>
using namespace std;

typedef pair <int, int> P;

const int N = 5e5 + 20;

vector <int> G[N];
char s[N];
int deg[N], used[N];
queue <P> q;

bool bfs(int x1, int x2, int n){
	int u, v, d;
	while (!q.empty()) q.pop();
	for (int i = 1; i <= n; i++) used[i] = 0;
	q.push({x1, 0});
	used[x1] = 1;
	while (!q.empty()){
		u = q.front().first; d = q.front().second; q.pop();
		if (u == x2) return d == 1 || d % 2 == 0;
		for (int i = 0; i < G[u].size(); i++){
			v = G[u][i];
			if (!used[v]){
				q.push({v, d + 1});
				used[v] = 1;
			}
		}
	}
	return true;
}

bool judge(int x){
	int cnt = 0;
	for (int i = 0; i < G[x].size(); i++){
		if (deg[G[x][i]] >= 3) return true;
		else if (deg[G[x][i]] == 2) cnt++;
	}
	return deg[x] >= 3 || (deg[x] >= 2 && cnt >= 1);
}

bool judge2(int x){
	int cnt = 0;
	for (int i = 0; i < G[x].size(); i++){
		if (deg[G[x][i]] >= 2) cnt++;
	}
	return deg[x] >= 4 || (deg[x] >= 3 && cnt >= 2);
}

bool spjudge(int n){
	int cnt1 = 0, cnt2 = 0;
	if (n % 2 == 0) return false;
	for (int i = 1; i <= n; i++){
		if (deg[i] == 1){
			cnt1++;
			if (deg[G[i][0]] != 3) return false;
		}
		else if (deg[i] == 3) cnt2++;
		else if (deg[i] >= 4) return false;
	}
	return cnt1 == 4 && cnt2 == 2;
}

void convert(int x, int& n){
	G[x].push_back(n + 1);
	G[n + 1].push_back(x);
	G[n + 1].push_back(n + 2);
	G[n + 2].push_back(n + 1);
	G[n + 1].push_back(n + 3);
	G[n + 3].push_back(n + 1);
	deg[x]++;
	deg[n + 1] = 3;
	deg[n + 2] = deg[n + 3] = 1;
	n += 3;
}

int main(){
	int T;
	scanf("%d",&T);
	int n, u, v, cnt, p1, p2, flag;
	while (T--){
		scanf("%d",&n);
		for (int i = 1; i <= n + 10; i++){
			G[i].clear();
			deg[i] = 0;
		}
		for (int i = 1; i <= n - 1; i++){
			scanf("%d %d",&u,&v);
			G[u].push_back(v);
			G[v].push_back(u);
			deg[u]++; deg[v]++;
		}
		scanf("%s", s + 1);
		if (n <= 2){
			printf("Draw\n");
			continue;
		}
		cnt = 0;
		for (int i = 1; i <= n; i++){
			if (s[i] == 'W'){
				cnt++;
				if (cnt == 1) p1 = i;
				else if (cnt == 2) p2 = i;
				else break;
			}
		}
		if (cnt > 2){
			printf("White\n");
			continue;
		}
		if (cnt == 2){
			if (bfs(p1, p2, n)){
				printf("White\n");
				continue;
			}
			if (judge(p1) || judge(p2)){
				printf("White\n");
				continue;
			}
			convert(p1, n);
			convert(p2, n);
		}
		else if (cnt == 1){
			if (judge(p1)){
				printf("White\n");
				continue;
			}
			convert(p1, n);
		}
		flag = 0;
		for (int i = 1; i <= n; i++){
			if (judge2(i)){
				flag = 1;
				break;
			}
		}
		if (flag){
			printf("White\n");
			continue;
		}
		if (spjudge(n)) printf("White\n");
		else printf("Draw\n");
	}
	return 0;
}