#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<queue>
#include<string>
#include<cstring>
#include<map>
#include<cmath>
#include<bitset>
#include<set>
#include<cstdlib>
#include<complex>
#include<list>
#include<cassert>
#include<iomanip>
#include<limits>

using namespace std;

#define double long double

typedef pair<int,int> ii;
typedef pair<int,long long> il;
typedef pair<long long,long long> ll;
typedef pair<ll,int> lli;
typedef pair<long long,int> li;
typedef pair<double,double> dd;
typedef pair<ii,int> iii;
typedef pair<double,int> di;
typedef pair<int,ii> iii2;
typedef pair<ii,ii> iiii;
typedef vector<int> vi;
long long mod = 1000000009LL;
long long large = 2000000000000000000LL;


int n,x,y;
vector<vector<int> > adj;
vector<int> pa;
vector<int> dp;
void dfs(int u,int parent){
	dp[u]++;
	pa[u] = parent;
	for(int j=0;j<(int)adj[u].size();j++){
		int v = adj[u][j];
		if(v!=parent){
			dfs(v,u);
			dp[u]+=dp[v];
		}
	}
}
int main(){

	cin>>n>>x>>y;
	x--;y--;
	adj.assign(n,vector<int>());
	for(int i=0;i<n-1;i++){
		int a,b;
		scanf("%d%d",&a,&b);
		a--;b--;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}

	dp.assign(n,0);
	pa.assign(n,-1);
	dfs(x,-1);

	int r = dp[y];
	int pt = y;
	while(pa[pt]!=x){
		pt = pa[pt];
	}
	int l = dp[x] - dp[pt];

	long long ans = 1LL*n*(n-1)-1LL*l*r;
	cout<<ans<<endl;






	return 0;
}
