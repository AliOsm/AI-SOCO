//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0); }
inline int safe_mul(const int x, const int y) __attribute__ ((warn_unused_result));

int const maxn = 1501;
int a[maxn];
int sum[maxn];
vector<pair<int,int>> dp[maxn];

int main()
{
//    freopen("in.txt","r", stdin);
//    freopen("out.txt", "w", stdout);
//    cin.tie(0);
//    cout << fixed << setprecision(20);
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int n;
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
        sum[i] = a[i] + sum[i - 1];
    }

    map<int,vector<pair<int,int>>> dp;

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= i; ++j)
            dp[sum[i] - sum[j - 1]].emplace_back(j, i);
    }

    int best = 0;
    int nbest = -1;


    for (const auto& pa : dp) {
        const auto& vec = pa.second;
        int cur = 0;
        int cnt = 0;
        for (const auto& seg : vec) {
            if (seg.first > cur) {
                ++cnt;
                cur = seg.second;
            }
        }
        if (cnt > best) {
            best =  cnt;
            nbest = pa.first;
        }
    }
    cout << best << endl;
    {
        const auto& vec = dp[nbest];
        int cur = 0;
        for (const auto& seg : vec) {
            if (seg.first > cur) {
                cur = seg.second;
                cout << seg.first << ' ' << seg.second << '\n';
            }
        }
    }
}

