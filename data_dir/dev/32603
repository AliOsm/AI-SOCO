#include <bits/stdc++.h>
typedef long long LL;

const int N = 100000 + 5;
int n;

struct Point {
    int x,y;
    Point() {}
    Point(int _x,int _y) : x(_x),y(_y) {}
    Point operator - (const Point &rhs) const {
        return Point(x - rhs.x,y - rhs.y);
    }
    double length() const {
        return sqrt(x * 1. * x + y * 1. * y);
    }
};

LL det(const Point &a,const Point &b) {
    return a.x * 1ll * b.y - a.y * 1ll * b.x;
}

LL dot(const Point &a,const Point &b) {
    return a.x * 1ll * b.x + a.y * 1ll * b.y;
}

double dps(const Point &p,const Point &a,const Point &b) {
    if (a.x == b.x && a.y == b.y) return (p - a).length();
    Point v1 = b - a,v2 = p - a,v3 = p - b;
    if (dot(v1,v2) < 0) return v2.length();
    else if (dot(v1,v3) > 0) return v3.length();
    else return std::abs(det(v1,v2)) / v1.length();
}

Point points[N];

int main() {
    int a,b;
    scanf("%d%d%d",&n,&a,&b);
    double vmin = 1e15,vmax = 0;
    for (int i = 0; i < n; ++ i) {
        int x,y;
        scanf("%d%d",&x,&y);
        x -= a;
        y -= b;
        points[i] = Point(x,y);
        double t = sqrt(1ll * x * x + y * 1ll * y);
        if (t < vmin) vmin = t;
        if (t > vmax) vmax = t;
    }
    for (int i = 0; i < n; ++ i) {
        int j = (i + 1) % n;
        vmin = std::min(vmin,dps(Point(0,0),points[i],points[j]));
    }
    printf("%.15f\n",(vmax * vmax - vmin * vmin) * (atan(1.) * 4));
}
