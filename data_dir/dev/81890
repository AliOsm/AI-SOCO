#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <map>
#include <cassert>
#include <cstring>
#include <iomanip>
#include <set>
#include <queue>
using namespace std;

typedef long long ll;

typedef pair<int, int> pi;

const int MAXN = 200005;

int p[MAXN];
int a[MAXN];
int b[MAXN];

vector< pi > options[5];

bool purchased[MAXN];

int ans[MAXN];

int pointer[5];

int main()
{

    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int n; cin >> n;

    for(int i = 0; i < n; i++){
        cin >> p[i];
    }

    for(int i = 0; i < n; i++){
        cin >> a[i];
    }

    for(int i = 0; i < n; i++)
        cin >> b[i];

    for(int i = 0; i < n; i++){
        int A = a[i];
        int B = b[i];

        options[A].push_back( make_pair(p[i], i+1) );
        options[B].push_back( make_pair(p[i], i+1) );
    }

    for(int i = 1; i <= 3; i++)
        sort(options[i].begin(), options[i].end());

    int q; cin >> q;

    for(int i = 0; i < q; i++){

        int color; cin >> color;

        while( pointer[color] < options[color].size() && purchased[options[color][ pointer[color] ].second])
            pointer[color] += 1;

        if( pointer[color] < options[color].size() ){
            ans[i] = options[color][ pointer[color] ].second;
            purchased[ ans[i] ] = true;
            pointer[color] += 1;
        }

        if(i) cout << " ";
        if( !ans[i] ) ans[i] = -1;

        if( ans[i] == -1) cout << -1;
        else cout << p[ans[i]-1];
    }
}
