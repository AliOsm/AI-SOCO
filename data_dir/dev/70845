//ll dp[101][101][27];
//void _(){
//    ll n,k;
//    string s;
//    cin >> n >> k >> s;
//    for(char &c : s) c -= 'a';
//    rep(i,27)
//        dp[0][0][i] = 1;
//    rep(i,n)
//        rep(j,n){
//            rep(plan,27){
//                if(plan == s[i])
//                    rep(nxt_plan,27){
//                        dp[i+1][j+1][nxt_plan] += dp[i][j][plan];
//                        dp[i+1][j+1][nxt_plan] = min(
//                                dp[i+1][j+1][nxt_plan],INF);
//                    }
//                else{
//                    dp[i+1][j][plan] += dp[i][j][plan];
//                    dp[i+1][j][plan] = min(dp[i+1][j][plan],INF);
//                }
//            }
//        }
//    vl cnt(101);
//    rep(j,0,n)
//        cnt[j] += dp[n][j][26];
//    ll ans = 0;
//    for(int t = n; t >= 0; --t){
//        ll take = min(cnt[t],k);
//        k -= take;
//        ans += take*(n-t);
//    }
//    print k ? -1 : ans;
//}
//
#include <iomanip>
#include <algorithm>
#include <cassert>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define REP_INT(i,l,r) for(int i = l; i <= r; ++i)
#define REP_ZERO_INT(i,r) for(int i = 0; i < r; ++i)
#define GET_REP_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define rep(...) GET_REP_MACRO(__VA_ARGS__,REP_ANY,REP_INT,REP_ZERO_INT)(__VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<ll> vl;
const ll INF = ll(2e18) + 666;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
struct _print {
    string sep,end;
    bool space;
    ostream &stream;
    _print(string _sep=" ",string _end="\n",
            ostream &_stream = cout)
        : sep(_sep),end(_end),space(false),
            stream(_stream) {}
    ~_print() { stream << end; }
    template <typename T>
        _print &operator , (const T &t) {
            if (space) stream << sep;
            space = true;
            stream << t;
            return *this;
        }
};
#define print _print(),
ll dp[101][101][27];
void _(){
    ll n,k;
    string s;
    cin >> n >> k >> s;
    for(char &c : s) c -= 'a';
    rep(i,27)
        dp[0][0][i] = 1;
    rep(i,n)
        rep(j,n){
            rep(plan,27){
                if(plan == s[i])
                    rep(nxt_plan,27){
                        dp[i+1][j+1][nxt_plan] += dp[i][j][plan];
                        dp[i+1][j+1][nxt_plan] = min(
                                dp[i+1][j+1][nxt_plan],INF);
                    }
                else{
                    dp[i+1][j][plan] += dp[i][j][plan];
                    dp[i+1][j][plan] = min(dp[i+1][j][plan],INF);
                }
            }
        }
    vl cnt(101);
    rep(j,0,n)
        cnt[j] += dp[n][j][26];
    ll ans = 0;
    for(int t = n; t >= 0; --t){
        ll take = min(cnt[t],k);
        k -= take;
        ans += take*(n-t);
    }
    print k ? -1 : ans;
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        _();
}
