#include <bits/stdc++.h>

using namespace std;

typedef long long Long;

const int N = 2e5 + 5;

int n, a[N];
Long sum[N];
vector<int> edges[N];

Long dfs(int u = 1, int p = 0, int d = 0) {
    Long ret = a[u] * 1LL * d;

    sum[u] = a[u];

    for (int v : edges[u]) {
        if (v != p) {
            ret += dfs(v, u, d + 1);
            sum[u] += sum[v];
        }
    }

    return ret;
}

Long solve(int u = 1, int p = 0, int d = 0, Long cost = dfs()) {
    Long ret = cost;

    for (int v : edges[u]) {
        if (v != p) {
            ret = max(ret, solve(v, u, d + 1, cost + sum[1] - sum[v] * 2));
        }
    }

    return ret;
}

int main() {
    cin >> n;

    for (int i = 1; i <= n; ++i) {
        scanf("%d", a + i);
    }

    for (int i = 2; i <= n; ++i) {
        int u, v;
        scanf("%d %d", &u, &v);
        edges[u].push_back(v);
        edges[v].push_back(u);
    }

    cout << solve();
    
    return 0;
}