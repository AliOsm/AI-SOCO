#include <bits/stdc++.h>
using namespace std;

#define REP(i, n) for (int i = 0; i < (n); ++i)
#define SIZE(a) ((int)(a).size())
#define ALL(a) (a).begin(),(a).end()

using ll = long long;
using K = long double;

const int N = 10000005;
const int inf = 1000*1000*1000 + 7;

int n, m, full;
bool e[N], was[N];
vector<int> order;

void dfs(int mask) {
  if (!(mask & (1 << n)) && !e[mask])
    return;
  was[mask] = true;
  if (mask & (1 << n)) {
    int t = mask;
    while (t > 0) {
      int to = mask - (t & -t);
      if (!was[to]) dfs(to);
      t -= t & -t;
    }
  } else {
    int to = full ^ mask;
    if (!was[to]) dfs(to);
  }
  order.push_back(mask);
}

int go(int mask) {
  if (!(mask & (1 << n)) && !e[mask])
    return 0;
  was[mask] = true;
  int ok = e[mask];
  if (mask & (1 << n)) {
    REP(i, n) if (~mask & (1 << i)) {
      int to = mask | (1 << i);
      if (!was[to]) ok |= go(to);
    }
    int to = full ^ mask;
    if (!was[to]) ok |= go(to);
  } else {
    int to = mask | (1 << n);
    if (!was[to]) ok |= go(to);
  }
  
  return ok;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  
  cin >> n >> m;
  full = (1 << (n + 1)) - 1;
  REP(i, m) {
    int x;
    cin >> x;
    e[x] = true;
  }
  
  order.reserve(full+1);
  REP(i, full+1) if (e[i] && !was[i]) dfs(i);
  reverse(order.begin(), order.end());
  memset(was, 0, sizeof was);
  int result = 0;
  for (int v: order) if (!was[v]) {
    result += go(v);
  }
  cout << result << '\n';
}
