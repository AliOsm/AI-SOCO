#include<bits/stdc++.h>
using namespace std;

#define x first
#define y second
#define pb push_back
#define mp make_pair

#define sz(a) (int)(a).size()
#define aint(a) (a).begin(), (a).end()

#define ll long long
#define ld long double

inline void scan(int &x) {
    x = 0;
    char c = getchar();
    while (c < '0' || c > '9') c = getchar();
    while (c >= '0' && c <= '9') {
        x = x*10+c-'0';
        c = getchar();
    }
}

const int N = 4007;

int u[N][N];

inline int get(int x, int y, int x2, int y2) {
    int sum = u[x2][y2];
    if (x) sum -= u[x-1][y2];
    if (y) sum -= u[x2][y-1];
    if (x && y) sum += u[x-1][y-1];
    return sum;
}

int dp[N], DP[N];

void solve(int l, int r, int lo, int hi) {
    if (l > r) return;
    int m = (l+r)/2;
    DP[m] = 1e9+7;
    int mi = -1;
    for (int i = lo; i <= hi && i < m; ++i) {
        if (dp[i] != 1e9+7 && dp[i]+get(i, i, m-1, m-1) < DP[m]) {
            DP[m] = dp[i]+get(i, i, m-1, m-1);
            mi = i;
        }
    }
    solve(l, m-1, lo, mi);
    solve(m+1, r, mi, hi);
}

int main() {
    int n, k;
    scan(n);
    scan(k);
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            scan(u[i][j]);
            if (i > j) u[i][j] = 0;
            if (i) u[i][j] += u[i-1][j];
            if (j) u[i][j] += u[i][j-1];
            if (i && j) u[i][j] -= u[i-1][j-1];
        }
    }
    for (int i = 1; i <= n; ++i) dp[i] = 1e9+7;
    for (int i = 0; i < k; ++i) {
        solve(0, n, 0, n);
        for (int j = 0; j <= n; ++j) dp[j] = DP[j];
    }
    printf("%d", dp[n]);
    return 0;
}

