#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

using namespace std;

using ll = long long;

struct Node {
    Node* childreen[2] = {0, 0};
    ll size = 0;
};

ll size_of(Node* node) {
    if (node == 0)
        return 0;
    else
        return node->size;
}

struct PrefTree {
    Node* head = new Node;
    void add(ll x) {
        Node* cur = head;
        ++cur->size;
        for (ll bit = 31; bit >= 0; --bit) {
            ll b = (x >> bit) & 1;
            if (cur->childreen[b] == 0)
                cur->childreen[b] = new Node;
            cur = cur->childreen[b];
            ++cur->size;
        }
    }

    void del(ll x) {
        Node* cur = head;
        --cur->size;
        for (ll bit = 31; bit >= 0; --bit) {
            ll b = (x >> bit) & 1;
            cur = cur->childreen[b];
            --cur->size;
        }
    }

    ll find_min(ll xored) {
        Node* cur = head;
        ll res = 0;
        for (ll bit = 31; bit >= 0; --bit) {
            ll b = (xored >> bit) & 1;
            if (size_of(cur->childreen[b]) > 0) {
                cur = cur->childreen[b];
                res |= (b << bit);
            }
            else {
                cur = cur->childreen[1 - b];
                res |= ((1 - b) << bit);
            }
        }
        return res;
    }
};

int main() {
    
   // freopen("lca2.in", "r", stdin);
  //  freopen("lca2.out", "w", stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    ll n;
    cin >> n;
    vector<ll> encrypted(n), decrypted(n);
    PrefTree key;
    for (ll i = 0; i < n; ++i)
        cin >> encrypted[i];
    for (ll i = 0; i < n; ++i) {
        ll k;
        cin >> k;
        key.add(k);
    }
    for (ll i = 0; i < n; ++i) {
        ll res = key.find_min(encrypted[i]);
        cout << (res ^ encrypted[i]) << " ";
        key.del(res);
    }
    cout << "\n";
    return 0;
}