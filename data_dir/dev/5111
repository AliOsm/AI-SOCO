#include <cstring>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
#include <climits>
#include <cctype>
#include <bitset>
#include <list>
#include <fstream>
using namespace std;

#define all(v)              ((v).begin()), ((v).end())
#define allr(v)             ((v).rbegin()), ((v).rend())
#define clr(v, d)           memset(v, d, sizeof(v))
#define V  	                vector
#define ss 	                second
#define ff  	            first

typedef unsigned long long          ull;
typedef long long                   ll;
typedef long double                 LD;

ll suf(ll a){ return (a*(a + 1)) / 2; }
const ll  OO = 1e6 + 10, MOD = 1e6 + 3;
vector<vector<int> >adj, can;

int dx[]{1, -1, 0, 0, 1, -1, 1, -1};
int dy[]{0, 0, 1, -1, 1, -1, -1, 1};

int main()
{
	ll a, b , n , m;
	while (cin >> n){
		V<ll>L(n + 2), R(n + 2), v(n + 2);
		v[0] = INT_MIN, v[n + 1] = INT_MAX;
		L[0] = L[n + 1] = R[0] = R[n + 1] = -1;
		for (int i = 1; i <= n; i++){
			cin >> v[i];
		}
		ll mx = 0;
		for (int i = 2; i <= n; i++){
			if (v[i] > v[i - 1])
				L[i] += L[i - 1] + 1;
		}
		for (int i = n - 1; i >= 1; i--){
			if (v[i] < v[i + 1])
				R[i] += R[i + 1] + 1;
		}
		ll ans = 0;
		for (int i = 1; i <= n; i++){
			if (v[i - 1] < v[i + 1] && v[i + 1] - v[i - 1] > 1)
				ans = max(L[i - 1] + R[i + 1] + 3,ans);
			mx = max(mx, max(L[i - 1] , R[i + 1]));
		}
		cout << min(n , max(ans , mx + 2)) << endl;
	}
	return 0;

}