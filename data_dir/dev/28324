//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
#define mem(a,v) memset((a), (v), sizeof (a))
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pil pair<int, long long>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vil vector<pil>
#define vll vector<pll>
#define vi vector<int>
#define vl vector<long long>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef cc_hash_table<int,int,hash<int>> ht;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> oset;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e5 + 5;
const double eps = 1e-9;
int a[MAXN], ind[MAXN], ans[MAXN];

int main() {
	mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
	int n; ni(n); nai(a, n);
	for (int i = 0; i < n; i++) ind[i] = i;
	clock_t t = clock();
	while (clock() - t < 0.4 * CLOCKS_PER_SEC) {
		shuffle(ind,ind+n,rng);
		int g = a[ind[0]], i = 0, j = n;
		for (; i < n; i++) {
			g = __gcd(a[ind[i]], g);
			if (g == 1) {
				j = i+1;
				break;
			}
		}
		g = a[ind[j]];
		for (i = j; i < n; i++)
			g = __gcd(a[ind[i]],g);
		if (g > 1) j = n;
		if (j == n) continue;
		printf("YES\n");
		for (i = 0; i < n; i++)
			if (i < j)
				ans[ind[i]] = 1;
			else
				ans[ind[i]] = 2;
		for (i = 0; i < n; i++)
			printf("%d ", ans[i]);
		enl;
		return 0;
	}
	printf("NO\n");
	return 0;
}
