#include <cstdio>
#include <cstddef>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cctype>
#include <cassert>
#include <ciso646>
#include <climits>
#include <cmath>


#include <algorithm>
#include <utility>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <map>
#include <queue>
#include <stack>
#include <set>
#include <deque>
#include <bitset>

using namespace std;
typedef long long ll;
typedef std::pair< int, int > pii;
typedef std::vector< int > vi;
typedef std::vector< pii > vii ;
 
#define fi first
#define se second
#define all(x)  (x).begin(), (x).end()
#define fore(i,a,b)  for(int i = (a), vzq_b = (b); i < vzq_b; ++i)
#define forn(i, n)  fore(i,0,n)

double const EPS = 1.0E-9 ;
int const MOD    = (int)1e9 + 7 ;
inline int read( char*   s ){  return scanf("%s", s) ; } 
inline int read(int&x){  return scanf("%d", & ( x ) ); }
inline int read(ll&x){ return scanf("%lld",&x); }
inline int read(double &x){ return scanf("%lf", &x); }
inline int writeln(int x){ return printf("%d\n", x);}
inline int writeln(ll x ) { return printf("%lld\n", x ) ; } 
inline int writeln(double x){ return printf("%.12f\n", x ) ; } 
template< typename ...T> int read(T&...args){  
    using swallow = int[];
    swallow w = { 0, ( read(args) ) ... } ;
    return sizeof( w ) / sizeof( w [ 0 ] ) - 1;
}

inline ll gcd(ll x,ll y) { return y == 0 ? x : gcd(y, x%y); }
inline ll lcm(ll x, ll y){ return x == 0 && y == 0  ? 0 : x/gcd(x,y) * y; }
inline ll powmod(ll x, ll n, ll m = MOD ) {
    ll r = 1;
    while(n){
        if (n&1) r = (r*x)%m;
        x = (x*x)%m;
        n/=2;
    }
    return r;
}

static int leap(int y){  return y % 4 == 0 && y% 100 != 0  || y % 400 == 0 ; }

static int const month[ 2 ][ 12 ] = 
{ 
    { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 },
    { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }
};
  

/********************************************************/
static const int N = 1 << 18 ;
static const int M = 1 << 20 ;
    
ll n, m, k;

static int solve()
{ 
    read(n,m,k);
    
    // n == 1 :  k == 1:  answer = 1
    // n == 1 :  k== -1:  answer = 1  iff m - is even, 0, otherwise.
    
    // n = 2 
    // k   = 1:  G[m][1] = G[m-1][1] + G[m-1][-1]
    // 
    if ( n > m )
        ::std::swap( n , m ) ;

    // k == -1:   
    //  (-1)^m = (-1)^n
    
    if (k == -1 ) {
        if ( m % 2 != n % 2 ){
            return puts("0"), 0 ;
        }
        
        // 2 ^(m*n) - 
    }
    
    // n <= m
    
    if (n == 1 ) {
        return puts("1"), 0;
    }
    
    
    // 2 ^ (n-1) * (m-1)
    ll ans = powmod(2, n-1, MOD);
    ans = powmod(ans, m - 1 , MOD ) ;
    
    writeln(ans);
    
    return 0 ;
}


int main(int argc, char * argv[] ) 
{
    
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
#endif //end online-judge    
  
    //writeln(100);
    //srand(time(NULL));
    //for(int i = 0; i< 100; ++i)writeln(rand());
    solve();
    return 0;
}