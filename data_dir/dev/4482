#include <string.h>
#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <stdlib.h>    
#include <time.h> 
#include <stack>
#include <queue>
#include <set>
 
#include <map>
#include <vector>
#include <string>
#include <stdlib.h>
 
#define ll unsigned long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf
 
#define pf printf
#define mp make_pair
 
using namespace std;
const int N = 2100;
const int mod = 998244353;

int inf = 1000000000;

int a[N];

int sum_r[N],sum_c[N];
int row[N][N],col[N][N];
int sum[N];
int g[N][N],sum_row[N][N],sum_col[N][N];
int num_row[N][N],num_col[N][N];
int row_r[N],col_c[N];

int main() {
	int n,k;
	cin>>n>>k;

	fr(i,0,n) {
		string s;
		cin>>s;
		for(int j = 0; j < s.size();++j) {
			int t = 0;
			if(s[j]=='B') t = 1;
			else t = 0;
			g[i+1][j+1] = t;
		}
	}

	for(int i = 1; i <=n; ++i) {
		for(int j = 1; j <=n; ++j) {
			row_r[i] += g[i][j];
			col_c[j] += g[i][j];
		}
	}
	for(int i = 1; i <=n; ++i) {
		sum_r[i] = sum_r[i-1] + (row_r[i]==0);
		sum_c[i] = sum_c[i-1] + (col_c[i]==0);
	}

	for(int i = 1; i <= n; ++i) {
		sum[0] = 0;
		for(int j = 1; j <=n; ++j) {
			sum[j] = sum[j-1] + g[i][j];
		}
		for(int j = 1; j <=n; ++j) {
			if(j+k-1>n)break;
			if(sum[j-1]==0 && sum[n]-sum[j+k-1] == 0) {
				row[i][j] = 1;
			}
			else {
				row[i][j] = 0;
			}
			//printf("row i = %d j = %d flag = %d\n",i,j,row[i][j]);
		}
	}
	
	for(int i = 1; i <= n; ++i) {
		sum[0] = 0;
		for(int j = 1; j <=n; ++j) {
			sum[j] = sum[j-1] + row[j][i];
		}
		for(int j = 1; j <=n; ++j) {
			if(j+k-1>n)break;
			num_row[j][i] = sum[j+k-1]-sum[j-1];
			//printf("row i = %d j= %d num = %d\n",j,i,num_row[j][i]);
		}
	}
	
	for(int i = 1; i <= n; ++i) {
		sum[0] = 0;
		for(int j = 1; j <=n; ++j) {
			sum[j] = sum[j-1] + g[j][i];
		}
		for(int j = 1; j <=n; ++j) {
			if(j+k-1>n)break;
			if(sum[j-1]==0 && sum[n]-sum[j+k-1] == 0) {
				col[j][i] = 1;
			}
			else {
				col[j][i] = 0;
			}
			//printf("col i = %d j = %d flag = %d\n",j,i,col[j][i]);
		}
	}
	
	for(int i = 1; i <= n; ++i) {
		sum[0] = 0;
		for(int j = 1; j <=n; ++j) {
			sum[j] = sum[j-1] + col[i][j];
		}
		for(int j = 1; j <=n; ++j) {
			if(j+k-1>n)break;
			num_col[i][j] = sum[j+k-1]-sum[j-1];
			//printf("num col i = %d j = %d num = %d\n",i,j,num_col[i][j]);
		}
	}

	int ans = 0;
	for(int i = 1; i <=n; ++i) {
		for(int j = 1; j <=n; ++j) {
			if(j+k-1>n)break;
			if(i+k-1>n)break;
			int num = num_row[i][j] + num_col[i][j];
			//printf("i = %d j = %d\n",i,j);
			//printf("num = %d\n",num);
			//printf("row = %d\n",sum_r[n]-sum_r[i+k-1] + sum_r[i-1]);
			//printf("col = %d\n",sum_c[n]-sum_c[j+k-1] + sum_c[j-1]);
			num += sum_r[n]-sum_r[i+k-1] + sum_r[i-1];
			num += sum_c[n]-sum_c[j+k-1] + sum_c[j-1];
			ans = max(ans, num);
		}
	}
	cout<<ans<<endl;
}

