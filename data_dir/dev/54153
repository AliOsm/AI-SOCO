#include <bits/stdc++.h>
using namespace std;

void solve() {
  int k;
  cin >> k;
  
  string s, a, b;
  cin >> s >> a >> b;
  for (int i = 0; i < (int) s.size(); ++i) {
    s[i] -= 'a';
    a[i] -= 'a';
    b[i] -= 'a';
  }
  
  vector<int> p(k, -1);
  set<int> used;
  
  function<bool(int, bool, bool)> findSolution = [&](int pos, int x, int y) {
    if (pos == (int) s.size()) {
      return true;
    }
    vector<int> cands;
    if (p[s[pos]] == -1) {
      for (int c = 0; c < k; ++c)
        if (!used.count(c))
          cands.push_back(c);
    } else {
      cands.push_back(p[s[pos]]);
    }
    for (int c: cands) {
      int prev_value = p[s[pos]];
      used.insert(c);
      p[s[pos]] = c;
      
      if ((x || c >= a[pos]) && (y || c <= b[pos]))
        if (findSolution(pos + 1, x | (c > a[pos]), y | (c < b[pos])))
          return true;
      
      p[s[pos]] = prev_value;
      if (prev_value == -1) {
        used.erase(c);
      }
    }
    return false;
  };
  
  if (!findSolution(0, 0, 0)) {
    cout << "NO\n";
    return;
  }
  for (int i = 0; i < k; ++i)
    if (p[i] == -1)
      for (int c = 0; c < k; ++c)
        if (!used.count(c)) {
          p[i] = c;
          used.insert(c);
          break;
        }
  cout << "YES\n";
  for (int c: p) {
    cout << (char) (c + 'a');
  }
  cout << '\n';
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int t;
  cin >> t;
  for (int i = 0; i < t; ++i)
    solve();
}
