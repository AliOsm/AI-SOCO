#include <bits/stdc++.h>
using namespace std;

using ll = long long;
const int MOD = 998244353;

ll evenPrefix(ll x) {
  return x >> 1;
}
ll oddPrefix(ll x) {
  return x - (x >> 1);
}

const int D = 4;
struct Matrix{
  ll v[D][D];
  Matrix() {
    memset(v, 0, sizeof v);
  }
  void identity() {
    for(int i = 0; i < D; i++) 
      v[i][i] = 1;
  }
  Matrix operator *(Matrix b) const {
    Matrix ret;
    for(int i = 0; i < D; ++i) 
      for(int j = 0; j < D; ++j)
        for(int k = 0; k < D; ++k)
          ret.v[i][j] = (ret.v[i][j] + (ll)v[i][k] * b.v[k][j]) % MOD;
    return ret;
  }
  Matrix pow(ll n) {
    Matrix b = *this;
    Matrix ret; ret.identity();
    while(n) {
      if(n & 1) ret = ret * b;
      n >>= 1;
      b = b * b;
    } return ret;
  }
}M;

ll powmod(ll a, ll b, ll r = 1) {
  while(b) {
    if(b & 1) r = r * a % MOD;
    a = a * a % MOD;
    b >>= 1;
  } return r;
}

int main () {
  ll n, m, l, r;
  scanf("%lld %lld %lld %lld", &n, &m, &l, &r);

  ll E = evenPrefix(r) - evenPrefix(l - 1);
  ll O = oddPrefix(r) - oddPrefix(l - 1);

  M.v[0][1] = E, M.v[0][2] = O;
  M.v[1][0] = E, M.v[1][3] = O;
  M.v[2][0] = O, M.v[2][3] = E;
  M.v[3][1] = O, M.v[3][2] = E;

  Matrix got = M.pow(n * m);
  // for(int i = 0; i < D; i++) {
  //   for(int j = 0; j < D; j++)
  //     cout << got.v[i][j] << " ";
  //   cout << endl;
  // }
  ll ans = (got.v[0][0] + got.v[0][1] + got.v[0][2]) % MOD;
  printf("%lld\n", ans);
  return 0;
}