#include <bits/stdc++.h>

using namespace std;





int main()
{
	std::ios::sync_with_stdio(false);
	cin.tie(NULL);
	int n; cin >> n;
	unordered_map<int, int> links;
	for(int i = 0; i < pow(n, 2); i++) {
		int ele; cin >> ele;
		links[ele]++;
	}
	vector<int> f4;
	vector<int> f2;
	vector<int> f1;
	for(auto link : links) {
		if(link.second % 4 == 1) {
			f1.push_back(link.first);
			link.second--;
		}
		else if(link.second % 4 == 2) {
			f2.push_back(link.first);
			link.second -= 2;
		}
		else if(link.second % 4 == 3) {
			f2.push_back(link.first);
			f1.push_back(link.first);
			link.second -= 3;
		}
		for(int i = 0; i < link.second / 4; i++) {
			f4.push_back(link.first);
		}
	}
	vector<vector<int>> board = vector<vector<int>>(n, vector<int>(n, 0));
	if(n % 2) {
		if(f1.size() != 1 || f4.size() < pow((n - 1) / 2, 2)) {
			cout << "NO" << endl; return 0;
		}
		else {
			while(f4.size() > pow((n - 1) / 2, 2)) {
				f2.push_back(f4.back());
				f2.push_back(f4.back());
				f4.pop_back();
			}
			for(int i = 0; i < (n - 1) / 2; i++) {
				board[n/2][i] = board[n/2][n-1-i] = f2.back();
				f2.pop_back();
				board[i][n/2] = board[n-1-i][n/2] = f2.back();
				f2.pop_back();
			}
			board[n/2][n/2] = f1[0];
		}
	}
	else {
		if(f4.size() < pow(n / 2, 2)) {
			cout << "NO" << endl; return 0;
		}
	}
	cout << "YES" << endl;
	for(int i = 0; i < n/2; i++) {
		for(int j = 0; j < n/2; j++) {
			board[i][j] = board[n-1-i][j] = board[i][n-1-j] = board[n-1-i][n-1-j] = f4.back();
			f4.pop_back();
		}
	}
	for(auto row : board) {
		for(auto ele: row) cout << ele << " ";
		cout << endl;
	}
}
/*
1 3 2 4
2 3 1 4
2 4 1 3
3 4 1 2
1 4 3 2
1 2 3 4

 */
