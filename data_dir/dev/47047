//raja1999

//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,avx,avx2")

#include <bits/stdc++.h>
#include <vector>
#include <set>
#include <map>
#include <string> 
#include <cstdio>
#include <cstdlib>
#include <climits>
#include <utility>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iomanip> 
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
//setbase - cout << setbase (16)a; cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 <<endl;prints xxx77
//setprecision - cout << setprecision (14) << f << endl; Prints x.xxxx
//cout.precision(x)  cout<<fixed<<val;  // prints x digits after decimal in val

using namespace std;
using namespace __gnu_pbds;
#define f(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) f(i,0,n)
#define fd(i,a,b) for(i=a;i>=b;i--)
#define pb push_back
#define mp make_pair
#define vi vector< int >
#define vl vector< ll >
#define ss second
#define ff first
#define ll long long
#define pii pair< int,int >
#define pll pair< ll,ll >
#define sz(a) a.size()
#define inf (1000*1000*1000+5)
#define all(a) a.begin(),a.end()
#define tri pair<int,pii>
#define vii vector<pii>
#define vll vector<pll>
#define viii vector<tri>
#define mod (1000*1000*1000+7)
#define pqueue priority_queue< int >
#define pdqueue priority_queue< int,vi ,greater< int > >
#define int ll

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

//std::ios::sync_with_stdio(false);
int a[200005],cnt[200005],vis[200005],f[200005],fff[200005];
vii vec;
vi lol;
multiset<int>se;
multiset<int>::iterator it;
main(){
	std::ios::sync_with_stdio(false); cin.tie(NULL);
	int q;
	cin>>q;
	while(q--){
		int n,i,ans,prev,res=0;
		cin>>n;
		se.clear();
		vec.clear();
		lol.clear();
		rep(i,n){
			cin>>a[i]>>f[i];
			cnt[a[i]]++;
			fff[a[i]]+=f[i];
		}
		rep(i,n){
			if(vis[a[i]]==0){
				vec.pb(mp(cnt[a[i]],a[i]));
				vis[a[i]]=1;
			}
		}
		sort(all(vec));
		prev=inf;
		ans=0;
		fd(i,(int)vec.size()-1,0){
			if(prev-1<0){
				break;
			}
			else{			
				lol.pb(min(prev-1,vec[i].ff));
				prev=min(prev-1,vec[i].ff);
			}
		}
		sort(all(lol));
		int id;
		i=(int)lol.size()-1;
		id=(int)vec.size()-1;
		while(1){
			if(i==-1){
				break;
			}
			while(id>=0){
				if(vec[id].ff>=lol[i]){
					se.insert(fff[vec[id].ss]);
					id--;
				}
				else{
					break;
				}
			}
			it=se.end();
			it--;
			res+=min(lol[i],*it);
			se.erase(it);
			i--;
		}
		rep(i,lol.size()){
			ans+=lol[i];
		}
		cout<<ans<<" "<<res<<endl;
		rep(i,n){
			cnt[a[i]]--;
			vis[a[i]]=0;
			fff[a[i]]-=f[i];
		}
	}	
	return 0;
} 
	