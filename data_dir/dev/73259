#define __USE_MINGW_ANSI_STDIO 0
#include <bits/stdc++.h>
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl '\n'
#define ff first
#define ss second
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define int long long
#define all(a) a.begin(), a.end()
#define inf (1LL<<61)
#define ull unsigned long long
#define debug1(x) cerr << #x << ": " << x <<'\n'
#define debug2(x, y) cerr << #x << ": " << x << '\t' << #y << ": " << y <<'\n'
#define debug3(x, y, z) cerr << #x << ": " << x << '\t' << #y << ": " << y << '\t' << #z << ": " << z <<'\n'
using namespace std;
int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
int gcd(int x,int y)
{
    if(y==0)
        return x;
    else
        return gcd(y,x%y);
}
int expo(int n,int m,int p)   //modULAR EXPONENTIATION
{
    int r=1;
    n=n%p;
    while(m>0)
    {
        if(m%2)
            r=(r*n)%p;
        n=(n*n)%p;
        m=m/2;
    }
    return r%p;
}
bool isPrime(int n)
{
    // Corner cases
    if (n <= 1)  return false;
    if (n <= 3)  return true;
 
    // This is checked so that we can skip 
    // middle five numbers in below loop
    if (n%2 == 0 || n%3 == 0) return false;
 
    for (int i=5; i*i<=n; i=i+6)
        if (n%i == 0 || n%(i+2) == 0)
           return false;
 
    return true;
}
struct query
{
	int l,r,id;
};
int n,m,k,s;
bool comp(query &a,query &b)
{
	int aa=a.l/s,bb=b.l/s;
	if(aa==bb)
		return a.r>b.r;
	return aa<bb;
}

query q[200005];
int p[1<<21];
int32_t main()
{
   IOS;
   #ifndef ONLINE_JUDGE
   freopen("input.txt","r",stdin); 
   freopen("output.txt","w",stdout);
   #endif
   /********************* Code starts here ***********************/
   cin>>n>>m>>k;
   s=sqrt(n);
   vector<int>a(n);
   for(int i=0;i<n;i++)
   {
   	cin>>a[i];
   }
   vector<int>suf(n+2);
   for(int i=0;i<n;i++)
   {
   	suf[i+1]=suf[i]^a[i];
   }
   for(int i=0;i<m;i++)
   {
   	cin>>q[i].l>>q[i].r;
   	//q[i].l--;
   	//q[i].r++;
   	q[i].id=i;
   }
   sort(q,q+m,comp);
   int lo=0,h=0;
   int f[m],ans=0,x=0;
   
   p[0]=1;
   for(int i=0;i<m;i++)
   {
   	while(q[i].r>h)
   	{
   		h++;
   		//if(p.find(k^suf[h])!=p.end())
   		//{
   			ans=ans+p[k^suf[h]];
   		//}
   		p[suf[h]]++;
   	}
   	while(q[i].l-1<lo)
   	{
   		lo--;
   		//if(p.find(k^suf[lo])!=p.end())
   		//{
   			ans=ans+p[k^suf[lo]];
   		//}
   		p[suf[lo]]++;
   	}
   	while(q[i].r<h)
   	{
   		p[suf[h]]--;
   		//if(p.find(k^suf[h])!=p.end())
   		//{
   			ans=ans-p[k^suf[h]];
   		//} 		
   		h--;
   	}
   	while(q[i].l-1>lo)
   	{
   		p[suf[lo]]--;
   		//if(p.find(k^suf[lo])!=p.end())
   		//{
   			ans=ans-p[k^suf[lo]];
   		//}		
   		lo++;
   	}
   	f[q[i].id]=ans;
   }
   for(int i=0;i<m;i++)
   {
   	cout<<f[i]<<endl;
   }
}