#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define ppl pair<ll,ll>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcountll
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=200000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

ll n,a,b,k;
set<ppl,greater<ppl>> s;
int main()
{
  finp;
  cin>>n>>a>>b>>k;
 

  string ss;
  cin>>ss;
  ll st = -1;
  ll tot = 0;
  afor(i,1,n)
  {
  	if(ss[i-1]=='1')
  	{
  		if(st!= -1)
  		{
  			ll le = (i-1 - st + 1);
  			tot+= le/b;
  			s.insert({le,st});
  		}
  		st = -1;
  	}
  	else
  	{
  		if(st == -1)st = i;
  	}
  }
  if(st!=-1)
  	{
  		ll le = (n - st + 1);
  		tot+= le/b;
  		s.insert({le,st});
  	}
  vll ans;
  assert(tot >= a);

  while(s.size())
  {
  	auto x = *s.begin();
  	s.erase(s.begin());
  	if(x.first < b)continue;

  	ll st = x.second;
  	ll en = x.second + x.first - 1;
  	
  	if(tot == a)
  	{
  		ans.pb(st + b - 1);
  		break;
  	}
  	ll mid = st + b - 1;
  	tot-= x.first/b;

  	tot+= (mid - st)/b;
  	tot+= (en - mid)/b;
  	ans.pb(mid);

  	if(mid-1 >= st)
  	{
  		s.insert({mid-1-st+1,st});
  	}
  	if(en >= mid+1)
  	{
  		s.insert({en-(mid+1)+1,mid+1});
  	}
  	assert(tot >= a);
  	if(tot < a)break;
  }
  cout<<ans.size()<<"\n";
  for(auto i:ans)cout<<i<<" ";
  
return 0;
}