#include<bits/stdc++.h>
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
using namespace std;
const ll mod=1e9+7;
const ll mod1=1e9+6;
const int N=3;
struct matrix
{
    ll mat[N][N];
    void null()
    {
        memset(mat,0,sizeof(mat));
    }
    void identity()
    {
        null();
        rep(i,0,N)
        mat[i][i]=1;
    }
    matrix operator *(const matrix &mat1)
    {
        matrix res;
        rep(i,0,N)
        {
            rep(j,0,N)
            {
                res.mat[i][j]=0;
                rep(k,0,N)
                res.mat[i][j]=(res.mat[i][j]+(mat[i][k]*mat1.mat[k][j])%mod1)%mod1;
            }
        }
        return res;
    }
};
matrix mat_exp(ll n,matrix a)
{
    matrix res;
    res.identity();
    while(n)
    {
        if(n&1)
        res=res*a;
        a=a*a;
        n>>=1;
    }
    return res;
}
ll me(ll a,ll b)
{
    ll res=1;
    while(b)
    {
        if(b&1)
        res=(res*a)%mod;
        b>>=1;
        a=(a*a)%mod;
    }
    return res;
}
ll mi(ll a)
{
    return me(a,mod-2);
}
int main()
{
    ll n,g1,g2,g3,c;
    lscn(n);lscn(g1);lscn(g2);lscn(g3);lscn(c);
    g1=(g1*c)%mod;
    g2=(g2*me(c,2))%mod;
    g3=(g3*me(c,3))%mod;
    //cout<<g1<<" "<<g2<<" "<<g3<<endl;
    matrix util1,util2,util3;
    util1.null();util2.null();util3.null();
    util1.mat[2][0]=1;
    util2.mat[1][0]=1;
    util3.mat[0][0]=1;
    matrix a;
    a.null();
    rep(i,0,N)
    a.mat[0][i]=1;
    rep(i,1,N)
    a.mat[i][i-1]=1;
    ll p1,p2,p3;
    if(n<=3)
    {
        p1=util1.mat[n-1][0];
        p2=util2.mat[n-1][0];
        p3=util3.mat[n-1][0];
    }
    else
    {
        a=mat_exp(n-3,a);
        matrix temp;
        temp=a*util1;
        p1=temp.mat[0][0];
        temp=a*util2;
        p2=temp.mat[0][0];
        temp=a*util3;
        p3=temp.mat[0][0];
    }
    //cout<<p1<<" "<<p2<<" "<<p3<<endl;
    ll ans=1;
    ans=(ans*me(g1,p1))%mod;
    ans=(ans*me(g2,p2))%mod;
    ans=(ans*me(g3,p3))%mod;
    //n%=mod1;
    ll cinv=me(c,n);
    cinv=mi(cinv);
    ans=(ans*cinv)%mod;
    lpri(ans);
    return 0;   
}