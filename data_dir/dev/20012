/* upsolve with Dukkha */
#include <stdio.h>
#include <string.h>

#define N	1000
#define A	2000

int min(int a, int b) { return a < b ? a : b; }
int max(int a, int b) { return a > b ? a : b; }

int oo[1 + A - 1], oj[1 + A - 1], _;

int link(int o, int j) {
	oo[_] = o, oj[_] = j;
	return _++;
}

int ae[A], *pp, dd[A];

void dfs(int i, int d) {
	int o;

	dd[i] = d;
	for (o = ae[i]; o; o = oo[o]) {
		int j = oj[o];

		dfs(j, d + 1);
	}
}

int lca(int i, int j) {
	while (i != j)
		if (dd[i] > dd[j])
			i = pp[i];
		else
			j = pp[j];
	return i;
}

void solve(int *pa, int a, int *ia, int n, int da[][N + 1]) {
	int i, j;

	pp = pa;
	memset(ae, 0, a * sizeof *ae), _ = 1;
	for (i = 1; i < a; i++) {
		int p = pp[i];

		ae[p] = link(ae[p], i);
	}
	dfs(0, 0);
	for (i = 1; i < n; i++) {
		int u = ia[i - 1], v = ia[i], w = lca(u, v);

		da[i][i + 1] = dd[w];
	}
	for (i = 1; i <= n; i++) {
		int d = a;

		for (j = i + 1; j <= n; j++)
			da[i][j] = d = min(d, da[j - 1][j]);
	}
	for (i = 1; i <= n; i++) {
		da[0][i] = dd[ia[i - 1]];
		for (j = i + 1; j <= n; j++)
			da[i][j] = dd[ia[j - 1]] - da[i][j];
	}
}

int main() {
	static int pa[A], ia[N], pb[A], ib[N];
	static int da[N + 1][N + 1], db[N + 1][N + 1], dp[N + 1][N + 1];
	int n, a, b, i, j, ans;

	scanf("%d", &n);
	scanf("%d", &a);
	pa[0] = -1;
	for (i = 1; i < a; i++)
		scanf("%d", &pa[i]), pa[i]--;
	for (i = 0; i < n; i++)
		scanf("%d", &ia[i]), ia[i]--;
	scanf("%d", &b);
	pb[0] = -1;
	for (i = 1; i < b; i++)
		scanf("%d", &pb[i]), pb[i]--;
	for (i = 0; i < n; i++)
		scanf("%d", &ib[i]), ib[i]--;
	solve(pa, a, ia, n, da);
	solve(pb, b, ib, n, db);
	for (i = 0; i <= n; i++)
		for (j = 0; j <= n; j++)
			dp[i][j] = a + b;
	dp[0][0] = 0;
	for (i = 0; i < n; i++)
		for (j = 0; j < n; j++) {
			int k = max(i, j) + 1;

			dp[i][k] = min(dp[i][k], dp[i][j] + db[j][k]);
			dp[k][j] = min(dp[k][j], dp[i][j] + da[i][k]);
		}
	ans = a + b;
	for (i = 0; i < n; i++)
		ans = min(ans, dp[i][n]);
	for (j = 0; j < n; j++)
		ans = min(ans, dp[n][j]);
	ans = a - 1 + b - 1 - ans;
	printf("%d\n", ans);
	return 0;
}
