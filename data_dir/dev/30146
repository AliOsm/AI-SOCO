#include<bits/stdc++.h>
using namespace std;

#define ll             long long
#define LL             long long
#define pii            pair<int, int>
#define pll            pair<ll, ll>
#define pil            pair<int, ll>
#define pli            pair<ll, int>
#define vi             vector<int>
#define vl             vector<ll>
#define vii            vector<pii>
#define vll            vector<pll>
#define vil            vector<pil>
#define vli            vector<pli>
#define pb             push_back
#define ppb            pop_back
#define mp             make_pair
#define ff             first
#define ss             second
#define TN             typename
#define all(v)         v.begin(), v.end()
#define fill(a, b)     memset(a, b, sizeof a)
#define endl           '\n'

template <TN T> T gcd(T a, T b) {
    return !b ? a : gcd(b, a % b);
}

template <TN T> T lcm(T a, T b) {
    return a * (b / gcd(a, b));
}

template <TN T> T sqr(T a) {
    return a * a;
}

template <TN T> T cube(T a) {
    return a * a * a;
}

template <TN T> inline void smin(T &a, T b) {
    a = a < b ? a : b;
}

template <TN T> inline void smax(T &a, T b) {
    a = a > b ? a : b;
}

int in() {
    int n;
    scanf("%d", &n);
    return n;
}

ll Lin() {
    ll n;
    scanf("%lld", &n);
    return n;
}

double Din() {
    double n;
    scanf("%lf", &n);
    return n;
}

const ll inf = (ll)1e17;
const ll mod = (ll)1e9 + 7;
const int N = 1e5 + 5;

struct CHT_DEC_MIN {
    vl m, b;

    bool bad(int f1, int f2, int f3) {
        return 1.0 * (b[f2] - b[f1]) * (m[f1] - m[f3]) >= 1.0 * (b[f3] - b[f1]) * (m[f1] - m[f2]);
    }

    void add(ll M, ll B) {
        m.pb(M), b.pb(B);
        int sz = (int)m.size();
        while(sz >= 3 && bad(sz - 3, sz - 2, sz - 1)) {
            m.erase(m.end() - 2);
            b.erase(b.end() - 2);
            sz--;
        }
    }

    ll f(int idx, ll X) {
        return m[idx] * X + b[idx];
    }

    ll query(ll X) {
        int low = 0, high = (int) m.size() - 1;
        while (high - low > 5) {
            int mid1 = (low + low + high) / 3;
            int mid2 = (low + high + high) / 3;
            if (f(mid1, X) >= f(mid2, X)) {
                low = mid1 + 1;
            } else {
                high = mid2 - 1;
            }
        }
        ll res = f(low, X);
        for (int i = low + 1; i <= high; i++) {
            res = min(res, f(i, X));
        }
        return res;
    }
};

ll a[N], s[N];

CHT_DEC_MIN tree[4 * N];

void update(int pos, int left, int right, int x, ll M, ll B) {
    tree[pos].add(M, B);
    if(left == right) return;
    int mid = (left + right) >> 1;
    if(x <= mid) update(pos * 2, left, mid, x, M, B);
    else update(pos * 2 + 1, mid + 1, right, x, M, B);
}

ll query(int pos, int left, int right, int x, int y, ll X) {
    if(left > y || right < x) return (ll)1e17;
    if(left >= x && right <= y) {
        return tree[pos].query(X);
    }
    int mid = (left + right) >> 1;
    ll m = query(pos * 2, left, mid, x, y, X);
    ll n = query(pos * 2 + 1, mid + 1, right, x, y, X);
    return min(m, n);
}

int solve() {
    int n = in();
    vli tem;
    for(int i = 1; i <= n; i ++) {
        a[i] = Lin();
        s[i] += s[i - 1] + a[i];
        tem.pb({a[i], i});
    }
    sort(all(tem));
    for(int i = 0; i < n; i++) {
        int idx = tem[i].ss;
        ll M = -a[idx], B = a[idx] * idx - s[idx];
        update(1, 1, n, idx, M, B);
    }
    int q = in();
    while(q--) {
        int x = in(), y = in();
        x = y - x + 1;
        printf("%lld\n", s[y] + query(1, 1, n, x, y, (ll)x - 1));
    }
    return 0;
}

int main() {
    int test = 1, tc = 0;
    //scanf("%d", &test);
    while (test--) {
        //printf("Case %d: ", ++tc);
        solve();
    }
    return 0;
}








