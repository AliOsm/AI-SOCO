#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define F first
#define S second
#define ll long long
#define ull  unsigned long long
#define pb push_back

using namespace std;
using namespace __gnu_pbds;
typedef  tree< ll , null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
const ll N = 35;
ll l[N], m[N], w[N];
pair < ll, pair < ll, ll > > a[2][3210000];
void gen(ll x, ll y, ll z, ll mask, ll p, ll e, ll f){
    if (p == e){
        a[f][mask] = {x, {y, z}};
        return;
    }
    gen(x + l[p], y + m[p], z, mask * 3, p + 1, e, f);
    gen(x, y + m[p], z + w[p], mask * 3 + 1, p + 1, e, f);
    gen(x + l[p], y, z + w[p], mask * 3 + 2, p + 1, e, f);
}
string f[3] = {"LM", "MW", "LW"};
main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt","w", stdout);
    ll n;
    cin >> n;
    ll cc = 1;
    for (ll i = 1; i <= 13; i++) cc = 3 * cc + 2;
    for (ll i = 1; i <= n; i++){
        cin >> l[i] >> m[i] >> w[i];
    }
    for (ll i = 0; i < 3.2e6; i++){
        a[0][i].F = a[1][i].F = -1e18;
    }
    gen(0, 0, 0, 1, 1, n / 2 + 1, 0);
    gen(0, 0, 0, 1, n / 2 + 1, n + 1, 1);
    vector < pair < pair < ll, ll >, pair < int, int > > > b, c;
    for (ll i = 0; i < 3.2e6; i++){
        if (a[1][i].F != -1e18){
            ll x = a[1][i].F;
            ll y = a[1][i].S.F;
            ll z = a[1][i].S.S;
            ll d1 = x - y;
            ll d2 = x - z;
            b.pb({{d1, d2}, {x, i}});
        }
    }
    for (ll i = 0; i < 3.2e6; i++){
        if (a[0][i].F != -1e18){
            ll x = a[0][i].F;
            ll y = a[0][i].S.F;
            ll z = a[0][i].S.S;
            ll d1 = x - y;
            ll d2 = x - z;
            c.pb({{-d1, -d2}, {x, i}});
        }
    }
    sort(b.begin(), b.end());
    sort(c.begin(), c.end());
    ll l1 = 0;
    ll l2 = 0;
    ll res = -2e18;
    ll ans1, ans2;
    while(l1 < b.size() && l2 < c.size()){
        if (b[l1].F < c[l2].F) l1++; else
        if (b[l1].F > c[l2].F) l2++; else{
            while(l1 + 1 < b.size() && b[l1 + 1].F == b[l1].F) l1++;
            while(l2 + 1 < c.size() && c[l2 + 1].F == c[l2].F) l2++;
            if (res < b[l1].S.F + c[l2].S.F){
                res = b[l1].S.F + c[l2].S.F;
                ans2 = b[l1].S.S;
                ans1 = c[l2].S.S;
            }
            l1++;
            l2++;
        }
    }
    if (res == -2e18){
        cout << "Impossible";
        return 0;
    }
    vector < string > ans;
    while(ans2 != 1){
        ans.pb(f[ans2 % 3]);
        ans2 /= 3;
    }
    while(ans1 != 1){
        ans.pb(f[ans1 % 3]);
        ans1 /= 3;
    }
    reverse(ans.begin(), ans.end());
    for (auto i: ans) cout << i << endl;
}
