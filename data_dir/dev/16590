/*
 * temp.cpp
 *
 *  Created on: 2012-7-18
 *      Author: BSBandme
 */
#include <iostream>
#include <fstream>
#include <string.h>
#include <cstdio>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <cassert>
#include <list>
#include <iomanip>
#include <math.h>
#include <deque>
#include <utility>
#include <map>
#include <set>
#include <bitset>
#include <numeric>
#include <climits>
#include <cctype>
#include <cmath>
#include <cstdlib>
#include <sstream>

using namespace std;

#define mpr make_pair
typedef unsigned long long ull;
typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <double, double> pdd;
typedef vector <int> vi;
typedef vector <ll> vll;
typedef vector <double> vd;
typedef vector <string> vs;
typedef map <string, int> mpsi;
typedef map <double, int> mpdi;
typedef map <int, int> mpii;

const double pi = acos(0.0) * 2.0;
const double eps = 1e-12;
const int step[8][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};

template <class T> inline T abs1(T a) {return a < 0 ? -a : a;}
template <class T> inline T max1(T a, T b, T c = -1234567, T d = -1234567) {
	T ans =  a > b ? a : b;
	if(c != -1234567) ans = max1(ans, c);
	if(d != -1234567) ans = max1(ans, d);
	return ans;
}
template <class T> inline T min1(T a, T b, T c = -1234567, T d = -1234567) {
	T ans = a < b ? a : b;
	if(c != -1234567) ans = min(ans, c);
	if(d != -1234567) ans = min(ans, d);
	return ans;
}
template <class T> inline T gcd1(T a, T b) {
	if(a < b) swap(a, b);
	if(a % b == 0) return b;
	return gcd1(b, a % b);
}
template <class T> inline T lb(T num) {return num & (-num); }
inline int jud(double a, double b){
	if(abs1(a - b) < eps) return 0;
	if(a < b) return -1;
	return 1;
}
template <typename it, typename t1>
inline int find(t1 val, it a, int na, bool f_small = 1, bool f_lb = 1){
	if(na == 1) return 0;
	int be = 0, en = na - 1;
	if(*a <= *(a + na - 1)){
		if(f_lb == 0) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != 1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != -1) en = mid;
			else be = mid + 1;
		}
		if(f_small && jud(*(a + be), val) == 1 && be != 0) be--;
		if(!f_small && jud(*(a + be), val) == -1 && be != na - 1) be++;
	} else {
		if(f_lb) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != -1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != 1) en = mid;
			else be = mid + 1;
		}
		if(!f_small && jud(*(a + be), val) == -1 && be != 0) be--;
		if(f_small && jud(*(a + be), val) == 1 && be != na - 1) be++;
	}
	return be;
}
inline int bitnum(ull nValue){
    nValue = ((0xaaaaaaaaaaaaaaaaull & nValue)>>1) + (0x5555555555555555ull & nValue);
    nValue = ((0xccccccccccccccccull & nValue)>>2) + (0x3333333333333333ull & nValue);
    nValue = ((0xf0f0f0f0f0f0f0f0ull & nValue)>>4) + (0x0f0f0f0f0f0f0f0full & nValue);
    nValue = ((0xff00ff00ff00ff00ull & nValue)>>8) + (0x00ff00ff00ff00ffull & nValue);
    nValue = ((0xffff0000ffff0000ull & nValue)>>16) + (0x0000ffff0000ffffull & nValue);
    nValue = ((0xffffffff00000000ull & nValue)>>32) + (0x00000000ffffffffull & nValue);
	return nValue;
}
long long pow(long long n, long long m, long long mod = 0){
	long long ans = 1;
	long long k = n;
	while(m){
		if(m & 1) {
			ans *= k;
			if(mod) ans %= mod;
		}
		k *= k;
		if(mod) k %= mod;
		m >>= 1;
	}
	return ans;
}


//.........................mi.......feng.......xian.......wai.......jin.......zhi.......challenge...............................................

const ll maxn = 100100;
const ll inf = 1000000000000000000ll;
ll h, n, nq, k;
ll orig[maxn][2];
ll f[maxn];
ll dis[maxn];
struct node {
	ll val, id;
	bool operator < (const node &a) const {
		if(val == a.val) return a.id < id;
		return a.val > val;
	}
	node(ll a, ll b){
		val = a; id = b;
	}
};
priority_queue <node> pq;

void upd(ll newk){
	priority_queue <pll, vector <pll>, greater <pll> > pq1;
	for(int i = 0; i < k; i++) if(dis[i] != inf) pq1.push(mpr(dis[i], i));
	for(; pq1.size(); pq1.pop()) {
		pll rp = pq1.top();
		if(dis[rp.second] != rp.first) continue;
		if(dis[(newk + rp.second) % k] > dis[rp.second] + newk){
			dis[(newk + rp.second) % k] = dis[rp.second] + newk;
			pq1.push(mpr(dis[(newk + rp.second) % k], (newk + rp.second) % k));
		}
	}
	for(int i = 0; i < n; i++) {
		if(dis[orig[i][0] % k] <= orig[i][0] && !f[i]) {
			pq.push(node(orig[i][1], i));
			f[i] = 1;
		}
	}
}

int main(){
//	freopen("input.txt", "r", stdin);
	scanf("%I64d%I64d%I64d%I64d", &h, &n, &nq, &k);
	for(int i = 0; i < n; i++) scanf("%I64d%I64d", orig[i], orig[i] + 1);
	for(int i = 0; i < k; i++) dis[i] = inf;
	dis[1] = 1;
	upd(k);
	for(int i = 0; i < nq; i++){
		ll cate, a, b;
		scanf("%I64d", &cate);
		if(cate == 1){
			scanf("%I64d", &a);
			upd(a);
		}
		if(cate == 2){
			scanf("%I64d%I64d", &a, &b);
			a--;
			orig[a][1] -= b;
			if(f[a] != 2 && f[a]) pq.push(node(orig[a][1], a));
		}
		if(cate == 3){
			while(pq.size() && (f[pq.top().id] == 2 || orig[pq.top().id][1] != pq.top().val)) {
				pq.pop();
			}
			if(pq.size()){
				printf("%I64d\n", pq.top().val);
				f[pq.top().id] = 2;
				while(pq.size() && (f[pq.top().id] == 2 || orig[pq.top().id][1] != pq.top().val)) {
					pq.pop();
				}
			}else printf("0\n");
		}
	}

	return 0;
}



