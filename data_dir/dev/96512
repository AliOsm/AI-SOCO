#define _USE_MATH_DEFINES 
#define _CRT_SECURE_NO_DEPRECATE 
#include <iostream> 
#include <cstdio> 
#include <cstdlib> 
#include <vector> 
#include <sstream> 
#include <string> 
#include <map> 
#include <set> 
#include <algorithm> 
#include <cmath> 
#include <cstring> 
#include <queue>
#include <time.h>
using namespace std; 
#define mp make_pair 
#define pb push_back 
#define all(C) (C).begin(), (C).end() 
#define sz(C) (int)(C).size() 
#define PRIME 123 
#define PRIME1 31415 
typedef long long int64; 
typedef unsigned long long uint64; 
typedef pair<int, int> pii; 
typedef vector<int> vi; 
typedef vector<vector<int> > vvi; 
//------------------------------------------------------------ 
#define y1 asdf
#define y2 asdqwer
const int N = 400011; 
int n, m;
vector < vector < pii > > gr;
pii was[N];
int mark[N];
int cas[N];
pii bles[N];
pair<int, pii> qq[10][N];
int en[10], st[10];
pii xer[N];
int ee = 0, ss = 0;
void zaebal_dfs(int u, int p)
{
    if (bles[u] != pii(-1, -1))
        return;
    bles[u].first = p;
    bles[u].second = bles[p].second + 1;
    for(int i = 0; i < gr[u].size(); ++i)
    {
        int to = gr[u][i].second;
        int id = gr[u][i].first;
        if (bles[to] != pii(-1, -1))
            continue;
        if (id) 
            continue; 
        xer[ee++] = pii(to, u);
    }
}

void bfs(int u, pii id)
{
    if (was[u] != pii(-1, -1))
        return;
    was[u] = id;
    cas[u] = cas[id.first] + 1;
    if (bles[u] != pii(-1, -1))
        return;
    for(int i = 0; i < gr[u].size(); ++i)
    {
        int to = gr[u][i].second;
        int jd = gr[u][i].first;
        if (was[to] != pii(-1, -1))
            continue;
        qq[jd][en[jd]++] = mp(to, pii(u, jd));
    }
}
int ans[N], e = 0;
int temp[N];
int tryans(int ver)
{
    int te = e - 1;
    int flag = 0;
    int t = ver;
    mark[0] = 1;
    while(!mark[t])
    {
        mark[t] = 1;
        if (!flag && ans[te] < was[t].second)
            return 0;
        
        if (ans[te] > was[t].second)
            flag = 1;
        temp[te--] = was[t].second;
        t = was[t].first;
    }
    for(int i = te; i < e; ++i)
        ans[i] = temp[i];
    return 1;
}

void show(int ver)
{
    vi num;
    vi xu;
    int t = ver;
    e = 0;
    while(t != 0)
    {
        ans[e++] = t;
        num.push_back(was[t].second);
        t = was[t].first;
    }
    t = ver;
    while(t != n - 1)
    {
        xu.push_back(t);
        t = bles[t].first;
    }
    ans[e++] = 0;
    int flag = 0;
    for(int i = 0; i < num.size(); ++i)
    {
        if (!num[i] && !flag && i != num.size() - 1)
            continue;
        flag = 1;
        cout << num[i];
    }
    if (num.size() == 0)
        cout << 0;
    cout << endl;
    cout << e + xu.size() << endl;
    if (xu.size())
        xu.push_back(n - 1);
    for(int i = e - 1; i >= 0; --i)
    {
        cout << ans[i] << ' ';
    }
    for(int i = 1; i < xu.size(); ++i)
        cout << xu[i] << ' ';
}


void solve()
{
    scanf("%d %d", &n, &m); 
    gr.resize(n);
    memset(was, -1, sizeof was);
    memset(bles, -1, sizeof bles);
    for(int i = 0; i < m; ++i)
    {
        int u, v, c;
        scanf("%d %d %d", &u, &v, &c);
        gr[u].push_back(pii(c, v));
        gr[v].push_back(pii(c, u));
    }
    xer[ee++] = pii(n - 1, n - 1);
    while(ee != ss)
    {
        zaebal_dfs(xer[ss].first, xer[ss].second);
        ss++;
    }
    qq[0][en[0]++] = mp(0, pii(0, 0));
    int q = 1;
    while(q)
    {
        q = 0;
        int temp[10];
        for(int i = 0; i < 10; ++i)
        {
            temp[i] = en[i];
        }
        for(int i = 0; i < 10; ++i)
        {
            while(st[i] != temp[i])
            {
                bfs(qq[i][st[i]].first, qq[i][st[i]].second);
                st[i]++;
                q = 1;
            }
        }
    }

    int bes = -1, sz = 1e9;
    vector < pii > mbans; 
    for(int i = 0; i < n; ++i)
    {
        if (bles[i] == pii(-1, -1))
            continue;
        if (was[i] == pii(-1, -1))
            continue;
        sz = min(sz, cas[i]);
    }
    for(int i = 0; i < n; ++i)
    {
        if (bles[i] == pii(-1, -1))
            continue;
        if (was[i] == pii(-1, -1))
            continue;
        if (cas[i] == sz)
        {
            mbans.push_back(pii(bles[i].second, i));
        }
    }
    sort(mbans.begin(), mbans.end());
    
    e = sz;
    for(int i = 0; i < sz; ++i)
        ans[i] = 9;
    for(int i = mbans.size() - 1; i >= 0; --i)
    {
        if (tryans(mbans[i].second))
            bes = mbans[i].second;
    }
    show(bes);
   
}

int main()
{
    ios_base::sync_with_stdio(false);cin.tie(0);
    #ifdef WIN32
        freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    #endif  
    solve();    
} 