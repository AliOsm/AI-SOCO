#include <string.h>
#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <stdlib.h>    
#include <time.h> 
#include <stack>
#include <queue>
#include <set>

#include <map>
#include <vector>
#include <string>
#include <stdlib.h>

#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf

#define pf printf
#define mp make_pair

using namespace std;
const int N = 400000;
const double eps = 1e-7;

const ll mod = 1000000007;

int n,q;
ll sum1[N],sum2[N];
ll a[N],w[N];

void add_sum1(int x, ll d) {
	for(;x<=n;x+=x&-x) {
		sum1[x] += d;
	}
}

void add_sum2(int x, ll d) {
	for(;x<=n;x+=x&-x) {
		sum2[x] = (sum2[x] + d+mod)%mod;
	}
}

ll get_sum1(int x) {
	ll ret = 0;
	while(x>0) {
		ret += sum1[x];
		x-=x&-x;
	}
	return ret;
}

ll get_sum2(int x) {
	ll ret = 0;
	while(x>0) {
		ret = (ret + sum2[x])%mod;
		x-=x&-x;
	}
	//printf("x = %d ret = %lld\n",x,ret);
	return ret;

}

ll get_sum1(int s, int e) {
	return get_sum1(e)-get_sum1(s-1);
}

ll get_sum2(int s, int e) {
	return (get_sum2(e)-get_sum2(s-1)+mod)%mod;
}

ll sol2(int s, int e, int mid) {
	ll t1 = get_sum2(s,mid-1);
	ll t2 = get_sum2(mid+1,e);
	ll t3 = get_sum1(s,mid-1);
	ll t4 = get_sum1(mid+1,e);
	//printf("s = %d e = %d mid = %d t1 = %lld t2 = %lld t3 = %lld t4 = %lld\n",s,e,mid,t1,t2,t3,t4);
	return ((-t1+t2+mod)+(t3-t4+mod)*a[mid]+mod)%mod;
}

ll sol(int s, int e) {
	ll tot = get_sum1(s,e);
	int l = s-1, r = e;
	while(l+1<r) {
		int mid = (l+r)>>1;
		ll v = get_sum1(s,mid);		
		if(v*2>=tot) {
			r = mid;
		}
		else {
			l = mid;
		}
	}
	//printf("s = %d e = %d l = %d r = %d\n",s,e,l,r);

	ll ans2 = sol2(s,e,r);
	return ans2;
}

int main() {
	cin>>n>>q;
	fr(i,1,n+1) {
		sf("%lld",&a[i]);
		a[i]=a[i]-i;
	}
	fr(i,1,n+1) {
		sf("%lld",&w[i]);
		add_sum1(i,w[i]);
		add_sum2(i,(w[i]*a[i])%mod);
	}
	while(q--) {
		int l, r;
		cin>>l>>r;
		if(l<0) {
			l = -l;
			add_sum1(l,-w[l]);
			add_sum2(l,(-(a[l]*w[l])+mod)%mod);
			w[l] = r;
			add_sum1(l,w[l]);
			add_sum2(l,(a[l]*w[l])%mod);
		}
		else {
			cout<<sol(l,r)<<endl;
		}
	}
}


