// Rush Hour :P

// start of CP 3.0
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
//____By:sirjan13____
 
#define int long long
#define ld long double
#define mod 1000000007
#define mod1 mod
#define mod2 100000009
#define show(a) for(int i=0;i<a.size();i++) cout<<a[i & 1]<<" ";
#define fi first
#define se second
#define vi vector<int>
#define vs vector<string>
#define vll vector<ll>
#define pb push_back
#define pi pair<int,int>
#define si set<int>
#define sll set<ll>
#define pll pair<ll, ll>
#define sci(x) scanf("%d",&x)
#define scs(x)  scanf("%s", x)
#define scll(x) scanf("%I64d",&x)
#define all(v) v.begin(),v.end()
#define sot(v) sort(v.begin(), v.end())
#define maxheap priority_queue<int>
#define minheap priority_queue<int,vector<int>,greater<int>>
#define mp make_pair
#define fast_io() cin.sync_with_stdio(false);cout.sync_with_stdio(false);
#define PI 3.1415926535
#define long_zero 0ll
#define long_one 1ll
 
inline int sbt(int x){return __builtin_popcount(x);}
 
using namespace std;
//using namespace __gnu_pbds;
 
#define TRACE
#ifdef TRACE
#define deb(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << std::endl;
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define deb(...)
#endif
#define N 200013
 
//map<int, int> freq;
bool ok;
int n, pichla, ek, x, g, bd, m1, m2, curr, place22, place4, nb, maxi, chosen1, chosen2, chosen3, inplace, xs, /*a*/ b, c, r, res2, k, K, sabka_baap;
//multiset<pair<int, pi>> events;
// string res;
//int dp[(1 << 21)], v, b[N], a[N], swaps[22][22];
//string s[N];
// int res, h, adc[N];
// string s;
// bool oksd;
//string s[N], ss[N];
//si segments;
vi adj[N];
//vi buff;
//vi a, b;
//sii conf[2][2];
//map<int, vector<pi>> m[2];
//vector<pair<int, pair<int, pi>>> v[2];
 
vector<int> prefix_function (string s, int n) {
    vi dp(n);
    dp[0] = 0;
    for(int i = 1; i < n; i++) {
        int j = dp[i - 1];
        while(j > 0 && (s[i] != s[j]))
            j = dp[j - 1];
        if(s[i] == s[j]) j++;
        dp[i] = j;
    }
    return dp;
}
 
bool cmp(pair<int, pair<int, pi>> x, pair<int, pair<int, pi>> y) {
    return x.se.fi < y.se.fi;
}
 
inline int mul(int a, int b, int m = mod) { return (a * b) % m; }
inline int add(int a, int b, int m = mod) { return (a + b) % m; }
inline int sub(int a, int b, int m = mod) { return (a - b + m) % m; }
 
int fastpow(int a, int b) {
    int res = 1;
    while(b > 0) {
        if(b & 1) res = res * a;
        a = (a * a);
        b >>= 1;
    }
    return res;
}
 
int modinv(int a) {
    return fastpow(a, mod - 2);
}
  
int tmp, a[N];//, s[N], h[N]; //, row[N], col[N];
string s[N], res[N];
//int res;
//map<pi, int> m;

int32_t main() {
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    fast_io()
    cin >> s[0];
    int h = stoi(s[0].substr(0, 2));
    int m = stoi(s[0].substr(3, 2));;
    set<string> perm;
    for(int i = 0; i < 24; i++) {
        string curr = to_string(i);
        if(curr.size() < 2) curr = "0" + curr;
        string rev = curr;
        reverse(all(rev));
        if(stoll(rev) <= 59)
            perm.insert(curr + rev);
    }
    while(1) {
        m++;
        if(m == 60) {
            h++;
            m = 0;
        }
        if(h == 24) h = 0;
        string curr = to_string(h);
        if(curr.size() < 2) curr = "0" + curr;
        string curr2 = to_string(m);
        if(curr2.size() < 2) curr2 = "0" + curr2;
        curr += curr2;
        if(perm.find(curr) != perm.end()) {
            cout << curr[0] << curr[1] << ":" << curr[2] << curr[3];
            return 0;
        }
    }
    return 0;
}