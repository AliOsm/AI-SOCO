#include<bits/stdc++.h>
#define pb          push_back
#define endl        '\n'
#define pll         pair<int,int>
#define vll          vector<int>
#define all(a)      (a).begin(),(a).end()
#define x           first
#define y           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mi        map<int,int>
#define gcd(a,b)    __gcd((a),(b))
#define lcm(a,b)    ((a)*(b)) / gcd((a),(b))
#define ios     ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
using namespace std;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); 
int n,i,j,k,l,sum=0,flag=0,t,a[300005],ans=0;
int lg[300002+1],st[300005][20][2];
void process(){
    lg[1] = 0;
    for (int i = 2; i <= 300000; i++)
        lg[i] = lg[i/2] + 1;

    for (int i = 0; i < n; i++)
        st[i][0][0] = st[i][0][1] =a[i];

    for (int j = 1; j <= 20; j++)
        for (int i = 0; i + (1 << j) <= n; i++){
            st[i][j][0] = min(st[i][j-1][0], st[i + (1 << (j - 1))][j - 1][0]);
            st[i][j][1] = gcd(st[i][j-1][1], st[i + (1 << (j - 1))][j - 1][1]);
        }
}
bool query(int L , int R){
    int j = lg[R - L + 1];
    return min(st[L][j][0], st[R - (1 << j) + 1][j][0]) == gcd(st[L][j][1], st[R - (1 << j) + 1][j][1]);
}
bool check(int x){
    for(int i=0;i+x-1<n;i++){
        if(query(i,i+x-1)) return true;
    }
    return false;
}
vector<int> ret;
void get(int x){
    for(int i=0;i+x-1<n;i++){
        if(query(i,i+x-1)) ret.pb(i+1);
    }
}
void solve(){
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>a[i];
    }
    process();
    int low=1,high=n,mid=(low+high)/2;
    while(high-low>1){
       if(check(mid)) low=mid;
       else high=mid;
       mid= (low+high)/2;
    }
    if(check(high)) get(high),ans=high;
    else get(low),ans=low; 
    cout<<ret.size()<<" "<<ans-1<<endl;
    for(auto j:ret)
        cout<<j<< " ";
}
signed main()
{
  //  ios
    int test=1;
    //cin>>test;
    while(test--){
        solve();
    }
    return 0;
}