#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <bitset>
#define f first
#define s second
#define ll long long
#define ull unsigned long long
#define mp make_pair
#define pb push_back
#define vi vector <int>
#define ld long double
#define pii pair<int, int>
#define y1 sda
using namespace std;    
const int N = 110, mod = int(1e9)  + 7; 

int n;

pair <pii , pair<int,int> > q[N];

int t[N], p[N], d[N], id[N];

int dp[N][N * 20], pr[N][N * 20];

bool cmp(pair <pii , pair<int,int> > a, pair < pii , pair<int,int> > b){
	return a.s.f < b.s.f;
}

int main () {
	scanf("%d", &n);
	for(int i = 1; i <= n; i++){
		scanf("%d%d%d", &q[i].f.f, &q[i].s.f, &q[i].s.s);
		q[i].f.s = i;
	}
	sort(q + 1, q + n + 1, cmp);
	for(int i = 1; i <= n; i++){
		t[i] = q[i].f.f;
		d[i] = q[i].s.f - 1;
		p[i] = q[i].s.s;
		id[i] = q[i].f.s;
	}
	memset(dp, -1, sizeof(dp));
	dp[0][0] = 0;
	for(int i = 1; i <= n; i++){
		for(int s = 0; s <= N * 20; s++){
			dp[i][s] = dp[i - 1][s];
			pr[i][s] = pr[i - 1][s];
		}
		for(int s = 0; s + p[i] <= N * 20; s++){
		    if(dp[i - 1][s] != -1 && dp[i - 1][s] + t[i] <= d[i]){
		    	if(dp[i][s + p[i]] == -1 || dp[i][s + p[i]] > dp[i - 1][s] + t[i]){
		    		dp[i][s + p[i]] = dp[i - 1][s] + t[i];
		    		pr[i][s + p[i]] = i;
		    	}
		    }
		}
	}
	int ans = 0;
	for(int i = 0; i < N * 20; i++){
		if(dp[n][i] != -1){
		    ans = i;
		}
	}
	printf("%d\n", ans);
	int x = n;
	vi fans;
	while(ans > 0){
		int y = pr[x][ans];
		fans.pb(y);
		ans -= p[y];
		x = y - 1;
	}
	cout << fans.size() << endl;
	reverse(fans.begin(), fans.end());
	for(int i = 0; i < fans.size(); i++){
		cout << id[fans[i]] << " ";
	}


return 0;
}