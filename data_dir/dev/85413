//              +-- -- --++-- +-In the name of ALLAH-+ --++-- -- --+              \\

#include <bits/stdc++.h>

#define PRE ios::sync_with_stdio(false) , cin.tie(0) , cout.tie(0)

using namespace std ;

int const N = 1e5 + 10 , MX = 2e6 + 20 ;
int n , q , a[N] , res[N] , d[N] ;
vector <int> g[N] , vec[MX] , st[MX] ;

inline int get_int() {
	int x ;
	cin >> x ;
	return x ;
}

inline int print (int x) {
	cout << x << '\n' ;
}

void in () {
	n = get_int() ;
	q = get_int() ;
	
	for (int i = 0 ; i < n ; i ++) {
		a[i] = get_int() ;
	}
	
	for (int i = 0 ; i < n - 1 ; i ++) {
		int u = get_int() - 1 , v = get_int() - 1 ;
		g[u].push_back(v) ;
		g[v].push_back(u) ;
	}
}

bool nprime[MX] ;
void pre () {
	nprime[0] = nprime[1] = 1 ;
	for (int i = 2 ; i < MX ; i ++) {
		if (nprime[i]) {
			continue ;
		}
	
		for (int j = i ; j < MX ; j += i) {
			if (i != j) {
				nprime[j] = 1 ;
			}
			vec[j].push_back(i) ;
		}
	}
}

inline void update_res (int v , int x) {
	if (res[v] == -2 || d[res[v]] < d[x]) {
		res[v] = x ;
	}
}

void dfs (int v , int par = -1) {
	
	for (int x : vec[a[v]]) {
		st[x].push_back(v) ;
	}
	
	for (int u : g[v]) {
		
		if (u != par) {
			d[u] = d[v] + 1 ;
			dfs(u , v) ;
		}
	}

	res[v] = -2 ;	
	for (int x : vec[a[v]]) {		
		st[x].pop_back() ;
		if (st[x].size()) {
			update_res(v , st[x].back()) ;
		}
	}
}

int main(){
	PRE ;
	
	pre() ;
	
	in() ;
	
	dfs(0) ;
	while (q --) {
		if (get_int() == 2) {
			a[get_int() - 1] = get_int() ;
			
			dfs(0) ;
		}
		else {
			cout << res[get_int() - 1] + 1 << '\n' ;
		}
	}
}
