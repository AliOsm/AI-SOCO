#include <iostream>
#include <cstdio>
#include <vector>
#include <memory.h>
#include <set>
#include <map>
#include <fstream>
#include <map>
#include <queue>
#include <cmath>
#include <iomanip>
#include <cstring>
#include <algorithm>
#include <random>
#include <unordered_map>
#include <sstream>
#include <stdlib.h>
#include <list>
#include <unordered_set>

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef std::pair <int, int> pii;
typedef std::pair <ll, ll> pll;
typedef std::pair <bool, int> pbi;

const ll INF = (ll) 2e18;
const ll BASE = (ll) 1e9 + 7;
const int BLOCK = 710;
const int MAXN = 300010;
const ld PI = acos(-1.);

void solve();

using namespace std;

int main() {
    srand(time(nullptr));
   // freopen ("input.txt", "r", stdin);
    int t = 1;
//    scanf ("%d", &t);
    while ( t -- ) {
        solve();
    }

    return 0;
}

int n, m;
set<int> g[MAXN];
bool used[MAXN];

void solve() {
    scanf ("%d%d", &n, &m);
    for (int i = 1; i <= m; i ++) {
        int a, b;
        scanf ("%d%d", &a, &b);
        g[a].insert(b);
        g[b].insert(a);
    }
    vector<int> ans;
    for (int v = 1; v <= n; v ++) {
        if (used[v]) continue;
        set<int> add;
        add.insert(v);
        for (int j = 1; j <= n; j ++) {
            if (!g[v].count(j)) {
                add.insert(j);
            }
        }
        int cnt = 0;
        while ( !add.empty() ) {
            int vv = *add.begin();
            used[vv] = true;
            cnt ++;
            add.erase(add.begin());
            set<int> &deleted = g[v];
            int lst = 0;
            for (int to : g[vv]) {
                while (true) {
                    auto it = deleted.lower_bound(lst + 1);
                    if (it == deleted.end() || *it >= to)
                        break;
                    add.insert(*it);
                    deleted.erase(it);
                }
                lst = to;
            }
            while (true) {
                auto it = deleted.lower_bound(lst + 1);
                if (it == deleted.end())
                    break;

                add.insert(*it);
                deleted.erase(it);
            }
        }
        ans.push_back(cnt);
    }

    sort(ans.begin(), ans.end());
    cout << ans.size() << "\n";
    for (int c : ans)
        cout << c << " ";
}