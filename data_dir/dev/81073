#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             2e16
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>


#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())


#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);
const int N = 200005;
int n,ara[N],k;
int dp[N];
int main()
{
    cin >> n >> k;
    set<int>st;
    FOR(i,1,n)
    {
        cin >> ara[i];
        ara[i] %= k;
        int g = __gcd(ara[i],k);
        if(g == 0)g = k;
        st.insert(g);
    }
    dp[0] = 1;
    set<int>S;
    for(int i = 1;i <= 2 * k;i++)S.insert(i);

    for(auto it = st.begin();it!=st.end();it++)
    {
        int i = *it;
        vector<int>v;
        for(auto pt = S.begin();pt!=S.end();pt++)
        {
            int j = *pt;
            if(j - i >= 0 and dp[j - i] == 1){
                dp[j] = 1;
                v.push_back(j);
            }
        }
        if(v.empty())continue;
        for(int j : v)S.erase(j);
    }

    for(int i = k + 1;i <= 2 * k;i++){
        if(dp[i] == 1){
            dp[i - k] = 1;
        }
    }

    vector<int>v;
    for(int i = 1;i <= k;i++){
        if(dp[i] == 1)v.push_back(i % k);
    }
    SORT(v);
    cout << v.size() << "\n";
    for(int i : v)cout << i << " ";


}
