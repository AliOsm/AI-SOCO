#include <bits/stdc++.h>

#define fi first
#define se second
#define fin(s) freopen( s, "r", stdin );
#define fout(s) freopen( s, "w", stdout );

const long long N = 10100;
const long long Q = 1000010;
const long long mod = 1000000007;
const long long block = 500;

using namespace std;

int n, k;
vector<int> vec[20];
vector<int> ans;

typedef complex<double> base;

void fft(vector < complex < double > > &a, bool invert)
{
	int n = (int)a.size();

	for (int i = 1, j = 0; i<n; ++i) {
		int bit = n >> 1;
		for (; j >= bit; bit >>= 1)
			j -= bit;
		j += bit;
		if (i < j)
			swap(a[i], a[j]);
	}
        long double PI = acos(-1);
	for (int len = 2; len <= n; len <<= 1) {
		double ang = 2 * PI / len * (invert ? -1 : 1);
		complex < double > wlen(cos(ang), sin(ang));
		for (int i = 0; i<n; i += len) {
			complex < double > w(1);
			for (int j = 0; j<len / 2; ++j) {
				complex < double > u = a[i + j], v = a[i + j + len / 2] * w;
				a[i + j] = u + v;
				a[i + j + len / 2] = u - v;
				w *= wlen;
			}
		}
	}
	if (invert)
	for (int i = 0; i<n; ++i)
		a[i] /= n;
}

vector<int> mult(vector<int> a, vector<int> b) {
	//cout << a.size() << "%" << b.size() << endl;
	vector<base> fa(a.begin(), a.end()), fb(b.begin(), b.end());
	size_t n = 1;
	while (n < max(a.size(), b.size()))  n <<= 1;
	n <<= 1;
	//cout << a.size() << " " << b.size() << endl;
	fa.resize(n), fb.resize(n);

	fft(fa, false), fft(fb, false);
	for (size_t i = 0; i<n; ++i)
		fa[i] *= fb[i];
	fft(fa, true);

	vector<int> res;
	res.resize(n);
	for (size_t i = 0; i<n; ++i)
		res[i] = int(fa[i].real() + 0.5);
	return res;
}

vector<int> squ(vector<int> a) {
	vector<base> fa(a.begin(), a.end()), fb(a.begin(), a.end());
	size_t n = 1;
	while (n < a.size())  n <<= 1;
	n <<= 1;
	fa.resize(n), fb.resize(n);

	fft(fa, false);
	fb = fa;
	for (size_t i = 0; i < n; ++i)
		fa[i] *= fb[i];
	fft(fa, true);

	vector<int> res;
	res.resize(n);
	for (size_t i = 0; i < n; ++i)
		res[i] = int(fa[i].real() + 0.5);
	return res;
}

vector < int > pow(vector < int > v, int n)
{
        if(n == 1){
                return v;
        }
        if(n % 2){
                return mult(v, pow(v, n - 1));
        }
        else{
                return pow(mult(v, v), n / 2);
        }
}

void solve()
{
        cin >> n >> k;

	vec[0].resize(1 << 10);

	for (int i = 0; i < vec[0].size(); i++)
		vec[0][i] = 0;

	for (int i = 1; i <= n; i++)
	{
		int val;
		cin >> val;
		vec[0][val] = 1;
	}

	for (int i = 1; i <= 9; i++)
	{
		vec[i] = squ(vec[i - 1]);
		while (vec[i].size() > (1 << 20))
			vec[i].pop_back();
		for (int j = 0; j < vec[i].size(); j++)
		{
			if (vec[i][j]>1)
				vec[i][j] = 1;
		}
		//cout << i << "%" << vec[i].size() << endl;
	}

	vector<int> res;
	res.resize(1 << 10);
	for (int i = 0; i < res.size(); i++)
		res[i] = 0;
	res[0] = 1;

	for (int i = 0; i <= 9; ++i)
	{

//		cout << i << " "<<res.size()<<endl;
		if (k&(1 << i))
			res = mult(res, vec[i]);
		for (int j = 0; j<res.size(); j++)
		{
			if (res[j]>1)
				res[j] = 1;
		}
		while (res.size() > (1 << 20))
			res.pop_back();
	}

	for (int i = 0; i < res.size(); i++)
	{
		if (res[i])
			ans.push_back(i);
	}

	for (int i = 0; i < ans.size(); i++)
	{
		if (i)
			cout << " ";
		cout << ans[i];
	}
	cout << endl;
}

bool mtest = false; int main()
{
        //fin("input.txt");
        //fout("output.txt");
        //fin("game.in");
        //fout("game.out");
        ios_base::sync_with_stdio(0);
        int TE = 1;
        if(mtest)
                cin >> TE;
        while(TE--)
                solve();
        return 0;
}
