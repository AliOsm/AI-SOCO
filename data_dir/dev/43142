#include<bits/stdc++.h>
#define int long long
#define ll long long
#define ull unsigned long long
#define ff first
#define ss second
#define pb push_back
#define mk make_pair
#define ld long double
#define y1 asdfghjkl
#define ufo ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
using namespace std;

mt19937_64 mt_rnd_64(chrono::steady_clock::now().time_since_epoch().count());
long long rnd(long long l, long long r){
    return (mt_rnd_64() % (r-l+1)) + l;
}

const int N = 2 * 1e5 + 5;

int n,m,pr=1,sz = 262144;
int a[N];
pair<int,int>b[N];
pair<int,pair<int,int> >q[N];
int t[4*N];
int ans[N];

bool cmp(pair<int,int>x,pair<int,int>y)
{
    if(x.ff != y.ff)return x.ff > y.ff;
    return x.ss < y.ss;
}

void update(int v,int l,int r,int pos,int x)
{
    if(l == r){
        t[v] = x;
        return;
    }
    int mid = (l + r) / 2;
    if(pos <= mid)update(v+v,l,mid,pos,x);
    else update(v+v+1,mid+1,r,pos,x);
    t[v] = t[v+v] + t[v+v+1];
}

int find_kth(int v,int l,int r,int k)
{
    if(k > t[v])
        return -1;
    if(l == r)
        return l;
    int mid = (l + r) / 2;
    if(t[v+v] >= k)
        return find_kth(v+v,l,mid,k);
    else
        return find_kth(v+v+1,mid+1,r,k - t[v+v]);
}

main()
{
    ufo;
    cin>>n;
    for(int i = 1;i <= n;i++){
        cin>>a[i];
        b[i].ff = a[i];
        b[i].ss = i;
    }
    sort(b+1,b+n+1,cmp);
    cin>>m;
    for(int i = 0;i < m;i++){
        cin>>q[i].ff>>q[i].ss.ff;
        q[i].ss.ss = i;
    }
    sort(q,q + m);
    for(int i = 0;i < m;i++){
        if(pr <= q[i].ff)
            for(int j = pr;j <= q[i].ff;j++)
                update(1,1,sz,b[j].ss,1);
        pr = q[i].ff+1;
        ans[q[i].ss.ss] = a[find_kth(1,1,sz,q[i].ss.ff)];
    }
    for(int i = 0;i < m;i++)
        cout<<ans[i]<<'\n';
}
