#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <vector>
#define N 10
using namespace std;

long long x[N], y[N];
vector<pair<pair<long long, long long>, pair<long long, long long> > > v;

inline long long area(const pair<pair<long long, long long>, pair<long long, long long> > &x)
{
    return (x.second.first - x.first.first) * (x.second.second - x.first.second);
}

inline long long calc(void)
{
    if(v.empty())
        return 0;
    if((signed)v.size() == 1)
        return area(v.at(0));

    return area(v.at(0)) + area(v.at(1)) - max(area(make_pair(make_pair(max(v.at(0).first.first, v.at(1).first.first), max(v.at(0).first.second, v.at(1).first.second)), make_pair(min(v.at(0).second.first, v.at(1).second.first), min(v.at(0).second.second, v.at(1).second.second)))), 0LL);
}

int main(void)
{
    int i;
    int p[2], q[2];

    for(i = 1; i < 6; i += 2)
        scanf("%I64d %I64d %I64d %I64d", &x[i], &y[i], &x[i + 1], &y[i + 1]);

    p[0] = max(x[1], x[3]);
    q[0] = max(y[1], y[3]);
    p[1] = min(x[2], x[4]);
    q[1] = min(y[2], y[4]);
    if(p[0] < p[1] && q[0] < q[1])
        v.push_back(make_pair(make_pair(p[0], q[0]), make_pair(p[1], q[1])));

    p[0] = max(x[1], x[5]);
    q[0] = max(y[1], y[5]);
    p[1] = min(x[2], x[6]);
    q[1] = min(y[2], y[6]);
    if(p[0] < p[1] && q[0] < q[1])
        v.push_back(make_pair(make_pair(p[0], q[0]), make_pair(p[1], q[1])));

    puts(calc() == (x[2] - x[1]) * (y[2] - y[1]) ? "NO" : "YES");

    return 0;
}