/*
 * temp.cpp
 *
 *  Created on: 2012-7-18
 *      Author: BSBandme
 */
#include <iostream>
#include <fstream>
#include <string.h>
#include <cstdio>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <cassert>
#include <iomanip>
#include <math.h>
#include <deque>
#include <utility>
#include <map>
#include <set>
#include <bitset>
#include <numeric>
#include <climits>
#include <cctype>
#include <cmath>
#include <cstdlib>
#include <sstream>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <double, double> pdd;
typedef vector <int> vi;
typedef vector <ll> vl;
typedef vector <double> vd;
typedef vector <string> vs;
typedef map <string, int> mpsi;
typedef map <double, int> mpdi;
typedef map <int, int> mpii;

const double pi = acos(0.0) * 2.0;
const double eps = 1e-12;
const int step[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

template <class T> inline T abs1(T a) {return a < 0 ? -a : a;}
template <class T> inline T max1(T a, T b) {return a > b ? a : b;}
template <class T> inline T min1(T a, T b) {return a < b ? a : b;}
template <class T> inline T gcd1(T a, T b) {
	if(a < b) swap(a, b);
	if(a % b == 0) return b;
	return gcd1(b, a % b);
}
template <class T> inline T lb(T num) {return num & (-num); }
inline int bitnum(ull nValue){
    nValue = ((0xaaaaaaaaaaaaaaaaull & nValue)>>1) + (0x5555555555555555ull & nValue);
    nValue = ((0xccccccccccccccccull & nValue)>>2) + (0x3333333333333333ull & nValue);
    nValue = ((0xf0f0f0f0f0f0f0f0ull & nValue)>>4) + (0x0f0f0f0f0f0f0f0full & nValue);
    nValue = ((0xff00ff00ff00ff00ull & nValue)>>8) + (0x00ff00ff00ff00ffull & nValue);
    nValue = ((0xffff0000ffff0000ull & nValue)>>16) + (0x0000ffff0000ffffull & nValue);
    nValue = ((0xffffffff00000000ull & nValue)>>32) + (0x00000000ffffffffull & nValue);
	return nValue;
}
inline int jud(double a, double b){
	if(abs1(a - b) < eps) return 0;
	if(a < b) return -1;
	return 1;
}
long long pow(long long n, long long m, long long mod = 0){
	long long ans = 1;
	long long k = n;
	while(m){
		if(m & 1) {
			ans *= k;
			if(mod) ans %= mod;
		}
		k *= k;
		if(mod) k %= mod;
		m >>= 1;
	}
	return ans;
}
const int maxn = 4100;
int n;
int orig[maxn];
map <pii, bool> mp;
vi nxt[1000100];
int f1[1000100];
bool f[maxn][maxn];
int q[maxn * 2], r, q1[maxn * 2], r1;

int main(){
//	freopen("input.txt","r", stdin);
//	ifstream cin("input.txt");
	scanf("%d", &n);
	for(int i = 0; i < n; i++) {
		scanf("%d", orig + i);
		nxt[orig[i]].push_back(i);
	}
	int ans = 0;

	for(int j = 0; j < n; j++){
		if(f1[orig[j]] == 0){
			f1[orig[j]] = 1;
			ans = max1(ans, (int)nxt[orig[j]].size());
		}
	}
	for(int i = 0, k = 1; i < 1000001; i++)if(f1[i]) f1[i] = k++;
	for(int i = 0; i < n; i++)
		for(int j = i + 1; j < n; j++){
		if(orig[i] == orig[j]) continue;
		if(f[f1[orig[i]]][f1[orig[j]]]) continue;
		vi :: iterator heada = lower_bound(nxt[orig[i]].begin(), nxt[orig[i]].end(), i);
		vi :: iterator headb = lower_bound(nxt[orig[j]].begin(), nxt[orig[j]].end(), j);
		f[f1[orig[i]]][f1[orig[j]]] = 1;
		f[f1[orig[j]]][f1[orig[i]]] = 1;
		r = 0; r1 = 0;
		q1[r1++] = i; q1[r1++] = j;
		for(;heada != nxt[orig[i]].end();){
			q[r++] = *heada;
			if(headb != nxt[orig[j]].end()) q[r++] = *headb;
			else break;
			heada = lower_bound(nxt[orig[i]].begin(), nxt[orig[i]].end(), q[r - 1]);
			if(heada != nxt[orig[i]].end()) headb = lower_bound(nxt[orig[j]].begin(), nxt[orig[j]].end(), *heada);
		}
		if(ans < r) ans = r;
/*		for(int i = 0; ; i++){
			vi :: iterator head = lower_bound(nxt[orig[q1[i + 1]] * 2 - orig[q1[i]]].begin(), nxt[orig[q1[i + 1]] * 2 - orig[q1[i]]].end(), q1[i + 1]);
			if(head != nxt[orig[q1[i + 1]] * 2 - orig[q1[i]]].end()) q1[r1++] = *head;
			else break;
		}
		if(ans < r1) ans = r1;
		for(int i = 0; i < r1 - 1; i++) for(int j = i + 1; j < r; j++) f[q1[i]][q1[j]] = 1;*/
	}
	cout << ans << endl;



	return 0;
}

