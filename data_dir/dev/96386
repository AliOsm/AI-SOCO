#include <bits/stdc++.h>

using namespace std;

const int mx = 100005;

int n , m , h , cmp,num;
vector<int> vvv[mx];
vector<int> vecf[mx];
vector<int> vecr[mx];
int update[mx];
bool vis[mx];
vector<int> vec[mx];
vector<int> so;
int no[mx];
int sz[mx];
vector<int> nodes;

bool func(int u , int v)
{
    int af = (update[u]+1)%h;
    int c =  update[v];
    return af==c;
}
void deepika(int u)
{
    num++;
    int i , l , v;
    vis[u] = 1;
    l = vecf[u].size();
    for(i = 0 ; i < l ; i++)
    {
        v = vecf[u][i];
        if(!vis[v])
        {
            deepika(v);
        }
    }
    so.push_back(u);
}
void sophie(int u)
{
    vis[u] = 1;
    vec[cmp].push_back(u);
    no[u] = cmp;

    int i , v , l = vecr[u].size();
    for(i = 0 ; i < l ; i++)
    {
        v = vecr[u][i];
        if(!vis[v])sophie(v);
    }
}

int main()
{
    int i, j , u , v , k;
    scanf("%d %d %d",&n,&m,&h);
    for(i = 1 ; i <= n ; i++)scanf("%d",update+i);
    for(i = 0 ; i < m ; i++)
    {
        scanf("%d %d",&u,&v);
        vvv[u].push_back(v);
        vvv[v].push_back(u);
    }
    int cnt ;
    for(i = 1 ; i <= n ; i++)
    {
        cnt = 0;
        for(j = 0 ; j < vvv[i].size() ; j++)
        {
            if(func(i,vvv[i][j]))
            {
                //cout << i << " ->" << vvv[i][j] << endl;
                vecf[i].push_back(vvv[i][j]);
                vecr[vvv[i][j]].push_back(i);
                cnt++;
            }
        }
        if(!cnt)
        {
           // printf("1\n%d\n",i);
           // return 0;
        }
    }
    vector<int> ans;
    k = 0;
    cmp = 0;
    for(i = 1;  i <= n ; i++)if(!vis[i])deepika(i);

    reverse(so.begin(),so.end());
    k = 0;
    cmp = 0;
    memset(vis,0,sizeof(vis));
    for(i = 0 ; i < so.size() ; i++)
    {
        u = so[i];
        if(!vis[u])
        {
            cmp++;
            sophie(u);
            sz[cmp] = vec[cmp].size();
        }
    }
    int l = cmp;
    for(i = 1 ; i <= n ; i++)
    {
        for(j = 0 ; j < vecf[i].size() ; j++)
        {
            u = i;
            v = vecf[i][j];
            if(no[u] == no[v])continue;
            k = no[i];

            sz[k] = 0;
            //cout << i << "  " << v << "  " << k << endl;
            break;
        }
    }
    k = INT_MAX;
    for(i = 1 ; i <= l ; i++)
    {
        if(sz[i] && k > sz[i])
        {
            k = sz[i];
            ans = vec[i];
        }
    }
    printf("%d\n",k);
    l = ans.size();
    for(i = 0 ;i < l ; i++)
    {
        if(i)printf(" ");
        printf("%d",ans[i]);
    }

    return 0;
}
