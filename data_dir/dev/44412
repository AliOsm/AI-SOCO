#pragma comment(linker, "/STACK:256000000")

#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <time.h>
#include <assert.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <utility>
#include <algorithm>
#include <functional>
#include <random>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
const int INF = (int)(1e9 + 1e7);
const int64 LINF = (int64)(4e18);
const double EPS = 1e-11;
#define sq(x) ((x)*(x))
#define FAIL() ((*(int*)(0))++)
const int MOD = 1000000007;

const int MAXN = 200500;
int ts;

inline int add(int a, int b)
{
	a += b;
	if (a >= MOD)
	{
		a -= MOD;
	}
	return a;
}

inline int mul(int a, int b)
{
	return int64(a) * b % MOD;
}

map<int, int> cost;
pii a[MAXN];
int n, k, s, t;
int g[MAXN];

void init()
{
	scanf ("%d%d%d%d", &n, &k, &s, &t);
	for (int i = 1; i <= n; i++)
	{
		scanf ("%d%d", &a[i].second, &a[i].first);
	}
	for (int i = 1; i <= k; i++)
	{
		scanf ("%d", &g[i]);
	}
}

void solve()
{
	init();
	sort (g + 1, g + k + 1);
	g[++k] = s;
	sort (a + 1, a + n + 1);
	reverse (a + 1, a + n + 1);
	for (int i = 2; i <= n; i++)
	{
		if (a[i - 1].second < a[i].second)
		{
			a[i].second = a[i - 1].second;
		}
	}
	int l = 1, r = n, ans = -1;
	while (l <= r)
	{
		int mid = (l + r) >> 1;
		int v = a[mid].first;
		int64 ti = 0LL;
		bool fail = false;
		for (int i = 1; i <= k; i++)
		{
			int dist = g[i] - g[i - 1];
			if (dist > v)
			{
				fail = true;
				break;
			}
			ti += 2LL * dist - min(v - dist, dist);
		}
		if (!fail && ti <= int64(t))
		{
			ans = a[mid].second;
			l = mid + 1;
		}
		else
		{
			r = mid - 1;
		}
	}
	printf("%d\n", ans);
}

void precalc()
{
	
}

int main()
{
#ifdef _MY_DEBUG
	freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
#endif
	srand(88);
	
	precalc();
	solve();

	return 0;
}
