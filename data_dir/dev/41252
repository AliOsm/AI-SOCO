#include<bits/stdc++.h>
#define lf double
#define ll long long
#define ii pair<int,int>
#define li pair<ll,int>
#define iii pair<ii,int>
#define heap priority_queue
#define mp make_pair
#define st first
#define nd second
#define pb push_back
#define pp pop_back
#define all(x) x.begin(),x.end()
#define len(x) strlen(x)
#define sz(x) (int) x.size()
#define orta ((bas+son)/2)
#define min3(x,y,z) min(min(x,y),z)
#define max3(x,y,z) max(max(x,y),z)
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define MOD 1000000007
#define inf 2000000000
#define N 100005
#define LOG 20
using namespace std;

int n,q,a,b,t;
int x[N],y[N],der[N],par[LOG+5][N],sum[LOG+5][N];

bool get_sum(int a,int lca,int ty) {

	int da=der[a];
	int dl=der[lca];
	for(int i=LOG;i>=0;i--) {
		int val=(1<<i);
		if(da-val>=dl) {
			if(val*ty!=sum[i][a]) {
				return false ;
			}
			da-=val;
			a=par[i][a];
		}
	}
	return true ;

}

int LCA(int a,int b) {

	if(der[a]<der[b]) swap(a,b);
	int da=der[a];
	int db=der[b];
	for(int i=LOG;i>=0;i--) {
		int val=(1<<i);
		if(da-val>=db) {
			da-=val;
			a=par[i][a];
		}
	}
	if(a==b) return a;
	for(int i=LOG;i>=0;i--) {
		if(par[i][a]!=par[i][b]) {
			a=par[i][a];
			b=par[i][b];
		}
	}
	return par[0][a];

}

int main() {

	scanf("%d",&n);
	for(int i=1;i<=n;i++) {
		scanf("%d %d",&x[i],&y[i]);
		if(y[i]==-1) continue ;
		par[0][i]=x[i];
		sum[0][i]=y[i];
		der[i]=der[x[i]]+1;
	}
	for(int i=1;i<=LOG;i++) {
		for(int j=1;j<=n;j++) {
			par[i][j]=par[i-1][par[i-1][j]];
			sum[i][j]=sum[i-1][j]+sum[i-1][par[i-1][j]];
		}
	}
	scanf("%d",&q);
	while(q--) {
		scanf("%d %d %d",&t,&a,&b);
		int lca=LCA(a,b);
		if(lca==0) {
			printf("NO\n");
			continue ;
		}
		if(t==1) {
			if(a!=b && lca==a && get_sum(b,lca,0)) {
				printf("YES\n");
			}
			else {
				printf("NO\n");
			}
		}
		else {
			if(b!=lca && get_sum(a,lca,0) && get_sum(b,lca,1)) {
				printf("YES\n");
			}
			else {
				printf("NO\n");
			}
		}
	}

}