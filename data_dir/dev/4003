#include <bits/stdc++.h>

using namespace std;

#define fr first
#define sc second
#define pb push_back
#define ins insert
#define input freopen("input.txt","r",stdin)
#define output freopen("output.txt","w",stdout)
#define mp make_pair
#define fast_io ios_base::sync_with_stdio(0);
#define form(i,a,n) for (int i=(a);i<(n);i++)
#define forn(i,a,n) for (int i=(a);i<(n);i++)
//iterator , unsigned, begin, end, count, continue
// fixed setprecision

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef vector<int> vi;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;

string itosm(ll x){
    if(x == 0)
        return "0";
    string ans = "";
    while(x > 0){
        ans +=((x%10) + '0');
        x/=10;
    }
    reverse(ans.begin(), ans.end());
    return ans;
}

ll stoim(string str){
    ll ans = 0;
    ll k = 1;
    for(int i = str.length()-1; i >= 0; i--){
        ans+=(str[i]-'0')*k;
        k*=10;
    }
    return ans;
}

const ll infll = 1e18 + 3;
const int inf = 1009000999;
const double eps = 1e-6;
const int maxn = 1e6 + 7777;
const int baseint = 1000200013;
const ll basell = 1e18 + 3;
const ld PI = acos(-1.0);
const ll mod = 1e9 + 7;

ll dp[2][30];
ll pw[20][30][16][30];
ll f[2][30];

void makePW(){
    form(hight, 1, 17){
        form(g, 0, hight){
            form(j, 0, 20)
                f[0][j] = f[1][j] = 0;
            f[0][g] = 1;
            form(j, 0, 15){
                form(i, 0, hight){
                    if(i)
                        f[1][i - 1] += f[0][i];
                    f[1][i] += f[0][i];
                    f[1][i + 1] += f[0][i];
                }
                form(i, 0, hight){
                    f[0][i] = f[1][i] % mod;
                    f[1][i] = 0;
                }
            }
            form(i, 0, 16)
                pw[hight - 1][g][1][i] = f[0][i];
        }
        form(st, 2, 16){
            form(g, 0, hight){
                form(j, 0, 20)
                    f[0][j] = f[1][j] = 0;
                form(j, 0, 20)
                    f[0][j] = pw[hight - 1][g][st - 1][j];
                form(q, 0, 14){
                    form(i, 0, hight)
                        form(j, 0, hight){
                            f[1][j] += f[0][i] * pw[hight - 1][i][st - 1][j];
                            f[1][j] %= mod;
                        }
                    form(i, 0, hight){
                        f[0][i] = f[1][i];
                        f[1][i] = 0;
                    }
                }
                form(i, 0, hight)
                    pw[hight - 1][g][st][i] = f[0][i];
            }
        }
    }
}

void inline solve(){
    ll n, k;
    cin >> n >> k;
    ll x = 0;
    ll a, b, c, d;
    makePW();
    dp[0][0] = 1;
    while(n--){
        cin >> a >> b >> c;
        d = min(b, k) - a;
        ll x = 437893890380859375, st = 15;
        while(x != 1){
            while(d >= x){
                form(i, 0, 16)
                    dp[1][i] = 0;
                form(i, 0, c + 1)
                    form(j, 0, c + 1){
                        dp[1][j] += dp[0][i] * pw[c][i][st][j];
                        dp[1][j] %= mod;
                    }
                form(i, 0, c + 1)
                    dp[0][i] = dp[1][i];
                d -= x;
            }

            x /= 15;
            st--;
        }
        while(d > 0){
            form(i, 0, c + 1)
                dp[1][i] = 0;
            form(i, 0, c + 1){
                if(i)
                    dp[1][i - 1] += dp[0][i];
                dp[1][i] += dp[0][i];
                dp[1][i + 1] += dp[0][i];
            }
            form(i, 0, c + 1)
                dp[0][i] = dp[1][i] % mod;
            d--;
        }
        form(i, c + 1, 16)
            dp[0][i] = dp[1][i] = 0;
    }
    form(i, 0, 1)
        cout << dp[0][i] << " ";
}

int main() {
    srand(228228);
    fast_io;
    cin.tie(0);
//    freopen("horse.in", "r", stdin);
//    freopen("horse.out", "w", stdout);
    solve();
    return 0;
}
