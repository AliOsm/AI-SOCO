# include <bits/stdc++.h>
#pragma GCC optimize("Ofast")

# define pb push_back
# define fr first
# define sc second
# define mk make_pair

using namespace std;

const long long linf = 1e18 + 7;
const int inf = 1e9 + 7;
const int N = 5e5 + 5;

typedef long long ll;

int n, ra, a[N];
ll k, pref[N], nd[N], sz;
      long long lo = inf, hi;

bool check(long long x){
      memset(pref, 0, sizeof(pref));

      ll need = 0, cnt = 0;
      for(int i = 1; i <= n; i ++){
            int pos = min(i + ra * 2, n);
            pref[i] += pref[i - 1];
            ll X = pref[i] + nd[i];
            if(X < x){
                  ll cur = x - X;
                  need += cur;
                  cnt += cur;
                  pref[i + 1] += cur;
                  pref[pos + 1] -= cur;
                  if(cnt > k) break;
            }
      }
      return need <= k;
}

int main(){
      cin >> n >> ra >> k;

      sz = ra * 2 + 1;

      for(int i = 1; i <= n; i ++){
            scanf("%d", &a[i]);
            int r = min(i + ra + 1, n + 1);
            pref[i] += a[i];
            pref[r] -= a[i];
      }

      for(int i = 1; i <= n; i ++){
            pref[i] += pref[i - 1];
            nd[i] = pref[i];
      }

      memset(pref,0,sizeof(pref));

      for(int i = 1; i <= n; i ++){
            int l = max(i - ra - 1, 0);
            pref[i] += a[i];
            pref[l] -= a[i];
      }


      for(int i = n; i >= 1; i --){
            pref[i] += pref[i + 1];
            nd[i] += pref[i] - a[i];
      }
      lo = 0, hi = 2e18;
      while(hi - lo > 1){
            ll md = (lo + hi) >> 1;
            if(check(md))
                  lo = md;
            else
                  hi = md;
      }

      if(check(hi)) lo = hi;

      cout << lo << endl;
}
