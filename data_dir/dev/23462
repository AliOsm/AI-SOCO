#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define ppl pair<ll,ll>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcountll
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=200000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

ll dp[N+5];
ll A[N+5];
ll su[N+5];
ll su2[N+5];
ll n;
vi adj[N+5];


void dfs1(int pos,int par)
{
	su[pos] =  A[pos];
	su2[pos] = 0 - inf;
	for(auto i:adj[pos])
	{
		if(i == par)continue;
		dfs1(i,pos);
		su[pos]+= su[i];
		su2[pos] = max(su2[pos] , su2[i]);
	}
	su2[pos] = max(su2[pos] ,  su[pos]);
}

void dfs2(int pos,int par)
{
	ll ma = 0 - inf;
	ll sma = 0 - inf;
	for(auto i:adj[pos])
	{
		if(i == par)continue;
		dfs2(i,pos);
		dp[pos] = max(dp[pos] , dp[i]);
		if(su2[i] > ma)
		{
			sma = ma;
			ma = su2[i];
		}
		else if(su2[i] == ma)sma = ma;
		else if(su2[i] > sma)sma = su2[i];
	}
	if(sma > (0 - inf))dp[pos] = max(dp[pos],ma + sma);
}

int main()
{
  finp;
  cin>>n;
  afor(i,1,n)cin>>A[i];

  afor(i,1,n-1)
  {
  	int u,v;
  	cin>>u>>v;
  	adj[u].pb(v);
  	adj[v].pb(u);
  }

  afor(i,1,n)dp[i] = 0 - inf;

  dfs1(1,-1);
  dfs2(1,-1);


  if(dp[1] == 0 - inf)cout<<"Impossible";
  else cout<<dp[1];
return 0;
}