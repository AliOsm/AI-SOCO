#include <bits/stdc++.h>
using namespace std;
#define fs  first
#define sc  second
#define pb  push_back
#define mp  make_pair
#define ll  long long
#define vi  vector<ll >
#define vvi vector<vi >
#define all(x) x.begin(), x.end()

struct stree {
    int n;
    vi  t;
    void build(const vi& a) {
        n = 1;
        while (n < a.size())
            n = n + n;
        t.assign(n + n, 0);
        for (int i = 0; i < a.size(); ++i)
            t[n + i] = a[i];
        for (int i = n - 1; i > 0; --i)
            t[i] = std::max(t[i + i], t[i + i + 1]);
    }
    void set(int i, ll x) {
        i += n;
        t[i] = x;
        while (i > 1) {
            i /= 2;
            t[i] = std::max(t[i + i], t[i + i + 1]);
        }
    }
    ll get_max(int l, int r) {
        ll res = 0;
        for (l += n, r += n; l <= r; l /= 2, r /= 2) {
            if (l % 2 == 1)
                res = std::max(res, t[l++]);
            if (r % 2 == 0)
                res = std::max(res, t[r--]);
        }
        return res;
    }
};

int n;
ll  res;
vector<pair<pair<ll, ll>, ll> > v;
vi  dp, w;
stree t;

int main() {
    ios_base::sync_with_stdio(false);
    cin >> n;
    v.resize(n);
    for (int i = 0; i < n; ++i)
        cin >> v[i].fs.sc >> v[i].fs.fs >> v[i].sc;
    sort(all(v));
    w.resize(n);
    for (int i = 0; i < n; ++i)
        w[i] = v[i].fs.fs;

    dp.assign(n, 0);
    dp[0] = v[0].sc;
    t.build(dp);
    for (int i = 1; i < n; ++i) {
        int k = upper_bound(all(w), v[i].fs.sc) - w.begin();
        dp[i] = v[i].sc;
        if (k <= i - 1)
            dp[i] += t.get_max(k, i - 1);
        t.set(i, dp[i]);
    }
    res = 0;
    for (int i = 0; i < n; ++i) {
        if (dp[i] > res) res = dp[i];
    }
    cout << res << endl;

    return 0;
}