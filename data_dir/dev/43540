// in the name of god
#include <bits/stdc++.h> 
using namespace std ; 
#define X first  
#define Y second 
#define y1 asdfg
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0) 
#define int long long 
//#define cout cout << setprecision ( 12 )  
typedef long double ld; 
typedef pair < int , int > pii ;
typedef pair < ld , ld > point ; 
typedef pair < pii , int > piii ;
const int maxn = 5e5 + 1 ; 
//const int inf = 1e16 ;
const ld pi = 3.1415926535897932384626433832795 ;
int left(int x){return 2*x;} 
int right(int x){return 2*x+1;}
bool cmp ( piii p1 , piii p2 ){return p1 . X . Y < p2 . X . Y ;} 
int n , q , a , b , Time , start [ maxn ] , end [ maxn ] , par [ maxn ] ;
int data [ 2 ] [ 4 * maxn ] ;
int flag [ 2 ] [ 4 * maxn ] ;
vector < int > vc [ maxn ] ;

void relax_flag ( int pos , int st , int en , int id ) 
{
  if ( flag [ pos ] [ id ] == -1 )
    return ;
  data [ pos ] [ id ] = ( en - st ) * flag [ pos ] [ id ] ; 
  if ( en - st >= 2 ) 
    { 
      flag [ pos ] [ right ( id ) ] = flag [ pos ] [ id ] ;
      flag [ pos ] [ left ( id ) ] = flag [ pos ] [ id ] ;
    } 
  flag [ pos ] [ id ] = -1 ;
} 

int get ( int pos , int l , int r , int st = 0 , int en = n , int id = 1 ) 
{ 
  relax_flag ( pos , st , en , id ) ;
  if ( r <= st || en <= l )
    return 0 ; 
  if ( l <= st && en <= r ) 
    return data [ pos ] [ id ] ;
  int mid = ( st + en ) / 2 ; 
  return get ( pos , l , r , st , mid , left ( id ) ) +
            get ( pos , l , r , mid , en , right ( id ) ) ;
} 

void add ( int pos , int l , int r , int val , int st = 0 , int en = n , int id = 1 ) 
{ 
  relax_flag ( pos , st , en , id ) ;
  if ( r <= st || en <= l ) 
    return ; 
  if ( l <= st && en <= r ) 
    {
      flag [ pos ] [ id ] = val ; 
      return ;
    } 
  int mid = ( st + en ) / 2 ;
  add ( pos , l , r , val , st , mid , left ( id )  ) ; 
  add ( pos , l , r , val , mid , en , right ( id )  ) ; 
  data [ pos ] [ id ] = get ( pos , st , mid , st , mid , left ( id ) ) + 
                    get ( pos , mid , en , mid , en , right ( id ) ) ;
} 

void dfs ( int x ) 
{ 
  start [ x ] = Time ++ ;
  for ( int i = 0 ; i < vc [ x ] . size ( ) ; i ++ )
    if ( vc [ x ] [ i ] != par [ x ] ) 
      par [ vc [ x ] [ i ] ] = x , dfs ( vc [ x ] [ i ] ) ;
  end [ x ] = Time ;
}

main ( ) 
{ 
  fast ;
  cin >> n ;
  for ( int i = 0 ; i < n - 1 ; i ++ )
    cin >> a >> b , a -- , b -- , vc [ a ] . push_back ( b ) , vc [ b ] . push_back ( a ) ;
  for ( int i = 0 ; i < 4 * maxn ; i ++ )
    flag [ 0 ] [ i ] = -1 , flag [ 1 ] [ i ] = -1 ;
  dfs ( 0 ) ;
  cin >> q ;
  for ( int i = 0 ; i < q ; i ++ )
    { 
      cin >> b >> a ; 
      a -- ;
      if ( b == 1 ) 
	{  
	  if ( get ( 1 , start [ a ] , end [ a ] ) && a != 0 )	   
	    add ( 1 ,  start [ par [ a ] ] , start [ par [ a ] ] + 1 , 1 ) ;
	  add ( 0 , start [ a ] , end [ a ] , 1 ) ;
	  add ( 1 , start [ a ] , end [ a ] , 0 ) ;
	}
      else if ( b == 2 ) 
	add ( 1 ,  start [ a ] , start [ a ] + 1 , 1 ) ;
      else 
	{ 
	  if ( get ( 1 , start [ a ] , end [ a ] ) ) 
	    cout << 0 << endl ;
	  else if ( get ( 0 , start [ a ] , start [ a ] + 1 ) ) 
	    cout << 1 << endl ; 
	  else
	    cout << 0 << endl ;
	} 

    } 
} 
