
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <cstdio>
#include <random>
#include <chrono>
#define ll long long
#define ld long double
#define pb push_back
#define eb emplace_back
#define mp make_pair
#define int long long

using namespace std;

const int INF = 2e15;
const int MOD = 1e9 + 7;

struct SparseTable {
	vector<vector<int>> t;
	vector<int> logs;
	int MB = 20;
	SparseTable(int n, vector<int> & a) {
		t.resize(MB, vector<int>(n));
		for (int i = 0; i < n; i++) {
			t[0][i] = a[i];
		}

		for (int bit = 0; bit < MB - 1; bit++) {
			for (int i = 0, h = (1 << bit), j = i + h; j + h <= n; i++, j++) {
				t[bit + 1][i] = max(t[bit][i], t[bit][j]);
			}
		}

		logs.resize(n + 1);
		for (int i = 2; i <= n; i++) {
			logs[i] = logs[i / 2] + 1;
		}
	}

	int getMax(int l, int r) {
		int b = logs[r - l + 1];
		r = r - (1 << b) + 1;
		return max(t[b][l], t[b][r]);
	}
};

void solve() {
	int n;
	cin >> n;
	vector<int> a(n);
	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}

	vector<int> b(1e6 + 1);
	for (int i = 0; i < n; i++) {
		b[a[i]] = a[i];
	}

	SparseTable sparse(b.size(), b);
	int ans = 0;
	for (int i = 0; i < n; i++) {
		if (b[a[i]] == -1) continue;
		for (int left = a[i], right = 2 * a[i] - 1; left < b.size(); left += a[i], right += a[i]) {
			ans = max(ans, sparse.getMax(left, min(b.size() - 1LL, right)) % a[i]);
		}
		b[a[i]] = -1;
	}
	cout << ans;
}


signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	solve();
}