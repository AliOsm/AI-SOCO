/*input
1
8 10 10
5 1 1
8 10 10
1000000 1 1000000

*/
#ifdef UncleGrandpa
#include <prettyprint.hpp>
#endif
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define bit(x,y) ((x>>y)&1)
#define loop(i,l,r) for(int i=(l); i<=(r); i++)
#define rloop(i,l,r) for(int i=(l); i>=(r); i--)
#define debug(x...) {cout << "[" << #x << "] ="; _print(x);}
void _print() {cout << endl;}
template<typename T, typename... Ts> void _print(const T& value, const Ts&... values) {cout << ' ' << value; _print(values...);}
template<typename T, typename... Ts> void print(const T& value, const Ts&... values) {cout << value; _print(values...);}
// change cout to cerr for debug in crash
// for struct, can write print operator to use print() (even with SegTree)
// const int N =;

int n, a, b;

int solve() {
	int need = (n + 1) / 2;
	int period = (a + b);
	int ans = 0;
	if (need % a == 0) {
		int x = need / a;
		ans = max(0LL, (x - 1)) * period + a;
	}
	else {
		ans = need / a * period + need % a;
	}
	return max(n, ans);
}

signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	int T; cin >> T;
	while (T--) {
		cin >> n >> a >> b;
		cout << solve() << endl;
	}
}