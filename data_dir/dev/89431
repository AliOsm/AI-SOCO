#include <functional>
#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <numeric>
#include <iomanip>
#include <stdio.h>
#include <cstring>
#include <cassert>
#include <vector>
#include <math.h>
#include <queue>
#include <stack>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;

const int maxN = (int)1e5 + 10;
const int INF = (int)1e9;
const int mod = (int)1e9 + 7;
const ll LLINF = (ll)1e18;

int a[maxN];
int n, k;

int f(int x) {
    multiset <int> q;
    for (int i =0 ; i < n; ++i) {
        q.insert(a[i]);
    }
    int ret = 0;
    while(!q.empty()) {
        int r = *q.begin();
        if (r > x) return 100500;
        q.erase(q.begin());
        ret++;
        auto z = q.upper_bound(x - r);
        if (z == q.begin()) continue;
        --z;
        q.erase(z);
    }
    return ret;
}

int main() {

    //freopen(".in", "r", stdin);
    //freopen(".out", "w", stdout);

    cin >> n >> k;
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }

    int l = 1, r = INF;
    for (int i = 0; i < 30; ++i) {
        int mid = (l + r) / 2;
        if (f(mid) <= k) {
            r = mid;
        } else {
            l = mid;
        }
    }

    for (l = max(1, l - 2); ; l++) {
        if (f(l) <= k) {
            cout << l << '\n';
            return 0;
        }
    }
    return 0;

}
