#include <bits/stdc++.h>
using namespace std;
typedef long double ld;
typedef pair<ld, ld> pdd;
int main()
{
	ios::sync_with_stdio(false);
	int n; ld T;
	cin >> n >> T;
	vector<pdd> taps(n);
	for (int i = 0; i < n; i++)
		cin >> taps[i].first;
	for (int i = 0; i < n; i++)
		cin >> taps[i].second;
	sort(taps.begin(), taps.end(), [](pdd tA, pdd tB)
	{
		return tA.second < tB.second;
	});
	vector<ld> a(n), t(n);
	for (int i = 0; i < n; i++)
	{
		a[i] = taps[i].first;
		t[i] = taps[i].second;
	}
	if (T < t[0] || T > t.back())
	{
		cout << "0" << endl;
		return 0;
	}

	ld result = 0;
	ld sumA = 0, sumAT = 0;
	for (int i = 0; i < n; i++)
	{
		ld nextSumA = sumA + a[i];
		ld nextSumAT = sumAT + a[i] * t[i];
		ld nextT = nextSumAT / nextSumA;
		if (abs(nextT - T) < 1e-7)
			result = max(result, nextSumA);
		if (nextT <= T)
		{
			sumA = nextSumA;
			sumAT = nextSumAT;
		}
		else
		{
			ld l = 0, r = a[i];
			while (r - l > 1e-7)
			{
				ld mid = (l + r) / 2.0;
				ld currSumA = sumA + mid;
				ld currSumAT = sumAT + mid * t[i];
				ld currT = currSumAT / currSumA;
				if (currT > T)
					r = mid;
				else
					l = mid;
			}
			result = max(result, sumA + l);
			break;
		}
	}

	sumA = 0; sumAT = 0;
	for (int i = n - 1; i >= 0; i--)
	{
		ld nextSumA = sumA + a[i];
		ld nextSumAT = sumAT + a[i] * t[i];
		ld nextT = nextSumAT / nextSumA;
		if (abs(nextT - T) < 1e-7)
			result = max(result, nextSumA);
		if (nextT >= T)
		{
			sumA = nextSumA;
			sumAT = nextSumAT;
		}
		else
		{
			ld l = 0, r = a[i];
			while (r - l > 1e-7)
			{
				ld mid = (l + r) / 2.0;
				ld currSumA = sumA + mid;
				ld currSumAT = sumAT + mid * t[i];
				ld currT = currSumAT / currSumA;
				if (currT < T)
					r = mid;
				else
					l = mid;
			}
			result = max(result, sumA + l);
			break;
		}
	}

	cout.precision(10);
	cout << fixed << result << endl;
}