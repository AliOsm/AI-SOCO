#include <bits/stdc++.h>
using namespace std;

using pii = pair<int, int>; using vi = vector<int>;
template <class T> istream &operator>>(istream &, vector<T> &);
template <class T> ostream &operator<<(ostream &, const vector<T> &);
using ll = long long; using vll = vector<long long>;
constexpr int INF = 0x3f3f3f3f; constexpr ll BINF = 0x3f3f3f3f3f3f3f3fLL;

int solve() {
	int n; cin >> n;
	int r1, c1, r2, c2; cin >> r1 >> c1 >> r2 >> c2;
	r1--, c1--, r2--, c2--;
	vector<string> v(n); cin >> v;
	vector<vi> c(n, vi(n, -1));
	int ctot = 0;

	function<void(int, int)> dfs = [&] (int x, int y) {
		for (auto [dx, dy] : {pii{0, 1}, pii{0, -1}, pii{1, 0}, pii{-1, 0}}) {
			int vx = x + dx, vy = y + dy;
			if (vx < 0 || vx >= n || vy < 0 || vy >= n || v[vx][vy] == '1') continue;
			if (c[vx][vy] == -1) {
				c[vx][vy] = c[x][y];
				dfs(vx, vy);
			}
		}

	};

	for (int i=0;i<n;i++) for (int j=0;j<n;j++) if (c[i][j] == -1 && v[i][j] == '0') {
		c[i][j] = ctot++;
		dfs(i, j);
	}
	ll ans = BINF;
	for (int ri=0;ri<n;ri++) for (int rj=0;rj<n;rj++) for (int ci=0;ci<n;ci++) for (int cj=0;cj<n;cj++) {
		ll cost = 1LL * (ri - rj) * (ri - rj) + 1LL * (ci - cj) * (ci - cj);
		if (c[ri][ci] == c[r1][c1] && c[rj][cj] == c[r2][c2]) {
			ans = min(ans, cost);
		}
	}
	cout << ans << endl;
	return 0;
}

int main() {
	ios::sync_with_stdio(0);
	// precompute();
	// int t; cin >> t; for (int i=1;i<=t;i++)
	solve();
	// cout << (solve() ? "YES" : "NO") << endl;
	return 0;
}

template <class T> istream &operator>>(istream &is, vector<T> &v) {
	for (auto it=v.begin();it!=v.end();++it) is >> *it;
	return is;
}

template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
	for (auto it=v.begin();it!=v.end();) os << *it, os << " \n"[++it==v.end()];
	return os;
}
