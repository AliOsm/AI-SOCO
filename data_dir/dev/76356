#include <cstdio>
struct M {
	int a[24][24];
};
int d;
int dx[6] = {-1, 1, 0, 0, 0};
int dy[6] = {0, 0, -1, 1, 0};
const int mod = 1000000007;
M mul(const M a, const M b) {
	M res;
	for (int i = 0; i < d; i++) {
		for (int j = 0; j < d; j++) {
			res.a[i][j] = 0;
		}
	}
	for (int i = 0; i < d; i++) {
		for (int k = 0; k < d; k++) {
			long long t = a.a[i][k];
			for (int j = 0; j < d; j++) {
				res.a[i][j] += t * b.a[k][j] % mod;
				if (res.a[i][j] >= mod) {
					res.a[i][j] -= mod;
				}
			}
		}
	}
	return res;
}
M I;
M pow(const M a, int r) {
	if (r == 0) {
		return I;
	}
	if (r == 1) {
		return a;
	}
	M res = pow(a, r / 2);
	res = mul(res, res);
	if (r & 1) {
		res = mul(res, a);
	}
	return res;
}
int c[40][40];
M b;
int main() {
	int n, m, q;
	scanf("%d%d%d", &n, &m, &q);
	d = n * m;
	for (int i = 0; i < d; i++) {
		for (int j = 0; j < d; j++) {
			I.a[i][j] = i == j;
		}
	}
	int pt = 1;
	M A = I;
	while (q--) {
		int tp, x, y, t;
		scanf("%d%d%d%d", &tp, &y, &x, &t);
		--x; --y;
		M b;
		for (int i = 0; i < d; i++) {
			for (int j = 0; j < d; j++) {
				b.a[i][j] = 0;
			}
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (c[i][j]) continue;
				for (int a = 0; a < 5; a++) {
					int ni = i + dx[a], nj = j + dy[a];
					if (0 <= ni && ni < n && 0 <= nj && nj < m && !c[ni][nj]) {
						b.a[ni*m+nj][i*m+j] = 1;
					}
				}
			}
		}
		A = mul(pow(b, t - pt), A);
		if (tp == 3) {
			c[y][x] = 0;
		} else if (tp == 2) {
			c[y][x] = 1;
			b = I;
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < m; j++) {
					if (c[i][j]) {
						b.a[i*m+j][i*m+j] = 0;
					}
				}
			}
			A = mul(b, A);
		}
		if (tp == 1) {
			printf("%d\n", A.a[y*m+x][0]);
		}
		pt = t;
	}
	return 0;
}
