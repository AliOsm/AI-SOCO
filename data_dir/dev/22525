#include <iostream>

#include <algorithm>

using namespace std;

typedef long long llong;

int N, K;
int A[100004];
llong S[100004];

llong needed(int mid, int hi) {
   llong d = A[hi] - A[1];
   return d * (hi - mid + 1) - (S[hi] - S[mid-1]);
}

int solve(int idx) {
   int lo = 1;
   int hi = idx;
   while (lo < hi) {
      int mid = lo + (hi - lo) / 2;
      llong k = needed(mid, idx);
      if (k <= K)
         hi = mid;
      else
         lo = mid+1;
   }
   return idx - lo + 1;
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(NULL);

   cin >> N >> K;
   for (int i = 1; i <= N; ++i)
      cin >> A[i];

   sort(A+1, A+1+N);

   for (int i = 1; i <= N; ++i)
      S[i] = S[i-1] + (A[i]-A[1]);
/*
   for (int i = 1; i <= N; ++i)
      cerr << S[i] << ' ';
   cerr << endl;
*/
   int best_freq = 0, best = 0;
   for (int i = 1; i <= N; ++i) {
      int cur = solve(i);
      if (cur > best_freq) {
         best_freq = cur;
         best = A[i];
      }
   }
   
   cout << best_freq << ' ' << best << endl;

   return 0;
}
