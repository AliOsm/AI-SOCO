#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

#define all(x) (x).begin(), (x).end()
#define size(x) (int)(x).size()

typedef long long ll;
typedef long double Real;
const ll LIMIT = ll(1e18L);

bool is_full_sqr(ll number) {
    ll sqrt = (ll)std::sqrt((Real)number);
    return sqrt * sqrt == number;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0); std::cout.tie(0); std::cerr.tie(0);
    std::vector<ll> numbers;
    for (ll num = 2; num <= 1000 * 1000; ++num) {
        ll pow = num;
        while (pow <= LIMIT / num) {
            pow *= num;
            if (!is_full_sqr(pow)) {
                numbers.push_back(pow);
            }
        }
    }
    std::sort(all(numbers));
    numbers.erase(std::unique(all(numbers)), numbers.end());
    
    int nT; std::cin >> nT;
    while (nT--) {
        ll n; std::cin >> n;
        ll root = (ll)std::sqrt(Real(n));
        std::cout << n-1-(root-1 + ll(std::upper_bound(all(numbers), n) - numbers.begin())) << "\n";
    }
    return 0;
}