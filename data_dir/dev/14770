#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <string>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <fstream>
#include <cassert>
#include <cstring>
#include <unordered_set>
#include <unordered_map>
#include <numeric>
#include <ctime>
#include <bitset>
#include <complex>

using namespace std;
    
const int MOD = 998244353;

typedef long long ll;

int add(int a, int b) {
	ll res = (ll)a + b;
	return res % MOD;
}

int mul(int a, int b) {
	ll res = (ll)a * b;
	return res % MOD;
}

int binpow(int a, int b) {
	int res = 1;
	while (b > 0) {
		if (b & 1) {
			res = mul(res, a);
		}
		a = mul(a, a);
		b >>= 1;
	}
	return res;
}

int inv(int x) {
	return binpow(x, MOD - 2);
}

int dvv(int a, int b) {
	return mul(a, inv(b));
}

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	int n;
	cin >> n;
	vector<int> cnt(n + 1);
	vector<int> invr(n + 1);
	for (int i = 1; i <= n; i++) {
		invr[i] = dvv(1, i);
	}
	for (int i = 0; i < n; i++) {
		int x;
		cin >> x;
		cnt[x]++;
	}
	vector<vector<int>> dp(n + 1, vector<int> (n + 1));
	vector<int> sums(n + 1);
	for (int i = n; i >= 0; i--) {
		for (int j = n - 1; j >= 0; j--) {
			dp[i][j] = mul(cnt[i] - 1, invr[n - j]);
			dp[i][j] = add(dp[i][j], mul(sums[j + 1], invr[n - j]));
		}
		for (int j = n - 1; j >= 0; j--) {
			sums[j] = add(sums[j], mul(cnt[i], dp[i][j]));
		}
	}
	int ans = 0;
	for (int i = 1; i <= n; i++) {
		if (cnt[i]) {
			ans = add(ans, mul(dp[i][1], dvv(cnt[i], n)));
		}
	}

	cout << ans << endl;
}