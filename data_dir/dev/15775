#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int MOD = 1e9+7, N = 3e5+5;
int par[N];
int getpar(int u){
    if(par[par[u]] == par[u])
        return par[u];
    return par[u] = getpar(par[u]);
}
bool unite(int u, int v){
    u = getpar(u);
    v = getpar(v);
    if(u == v)
        return false;
    par[u] = v;
    return true;
}
vector<int> adj[N],id[N];
vector<int> ans;
int d[N],sum[N];
void prep(int u, int p){
    for(int v : adj[u])
        if(v != p){
            prep(v,u);
            sum[u] ^= sum[v];
        }
    sum[u] ^= d[u];
}
void dfs(int u, int p){
    for(int i = 0; i < adj[u].size(); ++i){
        int v = adj[u][i];
        if(v != p){
            if(sum[v]){
                ans.push_back(id[u][i]);
            }
            dfs(v,u);
        }
    }
}
int main(){
    int n,m;
    cin >> n >> m;
    vector<int> questions;
    int ones = 0;
    for(int i = 1; i <= n; ++i){
        scanf("%d",&d[i]);
        if(d[i] == -1)
            questions.push_back(i);
        if(d[i] == 1)
            ones ^= 1;
    }
    if(ones && questions.size() == 0){
        puts("-1");
        return 0;
    }
    if(ones){
        d[questions[0]] = 1;
        ones ^= 1;
        questions.erase(questions.begin());
    }
    for(int x : questions)
        d[x] = 0;
    iota(par,par+N,0);
    int cnt_edges = 0;
    for(int i = 1; i <= m; ++i){
        int u,v;
        scanf("%d %d",&u,&v);
        if(unite(u,v)){
            cnt_edges++;
            adj[u].push_back(v);
            adj[v].push_back(u);
            id[u].push_back(i);
            id[v].push_back(i);
        }
    }
    assert(cnt_edges == n-1);
    m = cnt_edges;
    prep(1,-1);
    dfs(1,-1);
    sort(ans.begin(),ans.end());
    cout << ans.size() << '\n';
    for(int x : ans)
        printf("%d\n",x);
}
