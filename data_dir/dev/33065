#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define ull unsigned long long
#define ld long double
#define endl '\n'
#define TIME 1.0*clock()/CLOCKS_PER_SEC
#define pii pair < int , int >
#define Endl '\n'

#pragma GCC optimize("Ofast")

using namespace std;
using namespace __gnu_pbds;

template <typename T> using ordered_set = tree <T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 gen(chrono::system_clock::now().time_since_epoch().count());

const ll mod = 1e9 + 7;
const int FFTM = 998244353;

const int SX[4] = {0 , 1 , -1 , 0};
const int SY[4] = {1 , 0 , 0 , -1};
const int rx[8] = {1, -1, 0, 0, 1, 1, -1, -1};
const int ry[8] = {0, 0, 1, -1, 1, -1, 1, -1};
const int kx[8] = {1, 1, -1, -1, 2, 2, -2, -2};
const int ky[8] = {2, -2, 2, -2, 1, -1, 1, -1};

typedef cc_hash_table< int, int, hash<int>, equal_to<int>, direct_mask_range_hashing<int>, hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;

void solve(){
    int n, k;
    cin >> n >> k;
    vector < int > a(n);
    for (int i = 0;i < n; ++i){
        cin >> a[i];
    }
    if (k == 1){
        for (int i = 1;i < n; ++i){
            if (a[i] != a[i - 1]){
                cout << -1 << endl;
                return;
            }
        }
        cout << n << endl;
        for (auto to : a){
            cout << to << " ";
        }
        cout << endl;
        return;
    }
    if (n == k){
        cout << n << endl;
        for (auto to : a){
            cout << to << " ";
        }
        cout << endl;
        return;
    }
    set < int > st;
    for (auto to : a)st.insert(to);
    if (st.size() > k){
        cout << -1 << endl;
        return;
    }
    int lol = 1;
    while(st.size() < k)st.insert(lol), lol++;
    cout << n * k << endl;
    for (int i = 0;i < n; ++i){
        for (auto to : st)cout << to << " ";
    }
    cout << endl;
}

int32_t main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output1.txt", "w", stdout);
#else
//    freopen("strings.in", "r", stdin);
//    freopen("strings.out", "w", stdout);
#endif
    int t;
    cin >> t;
    for (int i = 0;i < t; ++i){
        solve();
    }
    return 0;
}
