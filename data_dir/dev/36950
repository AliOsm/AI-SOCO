#include <bits/stdc++.h>

using std::ios_base;
using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::fixed;

using std::vector;
using std::string;
using std::stack;
using std::queue;
using std::deque;
using std::map;
using std::set;
using std::unordered_map;
using std::unordered_set;

using std::tuple;
using std::make_tuple;
using std::pair;
using std::make_pair;

using std::sort;
using std::reverse;
using std::nth_element;

#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()

const int MAXN = 100005;
const int INF = 1e9;
const int MOD = 1e9+7;
const int64_t L_INF = 4e18;

int n;
vector<int> g[MAXN];

void dfs(int v, int root, int p = -1) {
    if (g[v].size() == 1) {
        cout << v + 1 << ' ' << root + 1 << '\n';
    }
    for (int u : g[v]) {
        if (u == p)
            continue;
        dfs(u, root, v);
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;

    cin >> n;
    if (n == 2) {
        cout << "Yes\n1\n1 2";
        exit(0);
    }

    pair<int, int> center(-1, -1);
    for (int i = 0; i < n - 1; i++) {
        int v, u;
        cin >> v >> u;
        v--, u--;
        g[v].pb(u);
        g[u].pb(v);
        
        center = std::max(center, std::max(mp((int) g[v].size(), v), mp((int) g[u].size(), u)));
    }

    for (int i = 0; i < n; i++) {
        if (i == center.second)
            continue;
        if (g[i].size() > 2) {
            cout << "No\n";
            exit(0);
        }
    }
    cout << "Yes\n";
    cout << center.first << '\n';
    dfs(center.second, center.second);

    #ifdef LOCAL
        cerr << "\n== " << 1.0 * clock() / CLOCKS_PER_SEC << " sec.\n";
    #endif
    return 0;
}
