#pragma GCC omptimize("unroll-loops")
#pragma optimize("SEX_ON_THE_BEACH")
#pragma GCC optimize("no-stack-protector")
#pragma comment(linker, "/STACK:1000000000")

#include <algorithm>
#include <cstddef>
#include <iostream>
#include <unordered_map>
#include <map>
#include <numeric>
#include <set>
#include <utility>
#include <vector>

using namespace std;

using lint = int64_t;
using ldd = long double;

const lint INF = 1e18;

#define all(x) (x).begin(), (x).end()
#define ff first
#define ss second


#ifdef HOME
    int jjj;
    #define PO cout << "Pomelo" << endl;
    #define OL cout << "Oliva" << endl;

    #define debug(x) cout << #x << " " << x << endl;
    #define debug_p(x) cout << #x << " " << x.ff << " " << x.ss << endl;
    #define debug_v(x) cout << #x << " "; for (auto iii : x) cout << iii << " "; cout << endl;
    #define debug_vp(x) cout << #x << " "; for (auto ii : x) cout << '[' << ii.ff << " " << ii.ss << ']'; cout << endl;
    #define say(x) cout << x << endl;
#else
    #define PO 0;
    #define OL 0;

    #define debug(x) 0;
    #define debug_p(x) 0;
    #define debug_vp(x) 0;
    #define debug_v(x) 0;
    #define debug_vp(x) 0;
    #define say(x) 0;
#endif // HOME

vector<lint> arr;
vector<lint> pref;
vector<lint> suf;

lint fast_pow (lint a, lint b, lint m) {
    if (b == 0) {
        return 1;
    }
    if (b == 1) {
        return a % m;
    }
    lint k = b / 2;
    lint sem = fast_pow(a, k, m);
    lint res = (sem * sem) % m;
    if (b % 2 == 1) {
        return (res * a) % m;
    } else {
        return res;
    }
}

lint inv (lint a, lint p) {
    return fast_pow(a, p - 2, p);
}

void solve() {
    lint n;
    cin >> n;
    lint m;
    m = n;
    vector<pair<lint, int>> primes;
    for (lint i = 2; i * i <= m; i++) {
        if (m % i == 0) {
            primes.emplace_back(i, 1);
            m /= i;
            while (m % i == 0) {
                primes.back().second++;
                m /= i;
            }
        }
    }
    if (m > 1) {
        primes.emplace_back(m, 1);
    }
    /*for (auto x : primes) {
        cout << x.first << " " << x.second << endl;
    }*/
    if (primes.size() == 1) {
        cout << "NO" << endl;
    } else {
        cout << "YES" << endl;
        lint p = primes[0].first;
        lint q = primes[1].first;
        lint m1 = n / (p * q);
        lint a = ((q - 1) * inv(p, q)) % q;
        lint b = ((p - 1) * inv(q, p)) % p;
        lint k = 2;
        if (m1 > 1) {
            k++;
        }
        cout << k << endl;
        cout << a << " " << m1 * q << endl;
        cout << b << " " << m1 * p << endl;
        if (m1 > 1) {
            cout << m1 - 1 << " " << m1 << endl;
        }
    }
}


void stupid_solve() {
    //ifstream in("input.txt");
}
void generator() {}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    bool stress = false;
    int t;
    t = 1;
    //cin >> t;
    for (int i = 0; i < t; i++) {
        if (!stress) {
            solve();
        } else {
            /*int tests = 0;
            for (int i = 0; i < tests; i++) {
                generator();
                if (solve() != stupid_solve()) {
                    break;
                }
            }*/
        }
    }
}
