/*******************************\
   Name:    REAJUL HAQUE REAYZ  |
   School:  COMILLA UNIVERSITY  |
            CSE (5TH BATCH)     |
********************************/
#include<bits/stdc++.h>
#define endl "\n"
#define inf 1<<30
#define pi acos(-1.0)
#define pb push_back
#define mp make_pair
#define ss stringstream
#define ll long long int
#define all(v) v.begin(), v.end()
#define mem(x,y) memset(x,y,sizeof(x))
#define bit_cnt(mask) __builtin_popcount(mask)
using namespace std;
#define MOD 1000000007
ll bigmod(ll n, ll r)
{
    if(r==0) return 1;
    if(r==1) return n;
    if(r%2==0)
    {
        ll ret = bigmod(n, r/2);
        return ((ret%MOD) * (ret%MOD)) % MOD;
    }
    else return ((n%MOD) * (bigmod(n,r-1)%MOD)) % MOD;
}
ll modinverse(ll a){return bigmod(a,MOD-2)%MOD;}
ll lcm(ll a, ll b) {a=abs(a); b=abs(b); return (a/__gcd(a,b))*b;}
ll gcd(ll a, ll b) {a=abs(a); b=abs(b); if(!b) return a; return __gcd(b,a%b);}
#define MAX 1111

int n, m, grid[MAX][MAX];
string s[MAX];
bool flag;
bool visit[MAX][MAX][5][5];
int dirx[]={+1,-1,0,0};
int diry[]={0,0,+1,-1};
void dfs(int x, int y, int turn, int prev){
    if(turn>2) return;
    if(grid[x][y]==3) {flag=true; return;}
    visit[x][y][turn][prev]=true;
    for(int i=0; i<4; i++){
        int tx=x+dirx[i];
        int ty=y+diry[i];
        if(tx>=1 and tx<=n and ty>=1 and ty<=m and grid[tx][ty]!=0 and visit[tx][ty][turn][prev]==false){
            if(prev==i) dfs(tx,ty,turn,i);
            else dfs(tx,ty,turn+1,i);
        }
    }
}
int main()
{
    ios_base::sync_with_stdio(0); cin.tie(0);
    cin>>n>>m;
    for(int i=0; i<n; i++) cin>>s[i];
    int x, y;
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(s[i][j]=='.') grid[i+1][j+1]=1;
            else if(s[i][j]=='S') {grid[i+1][j+1]=2; x=i+1; y=j+1;}
            else if(s[i][j]=='T') grid[i+1][j+1]=3;
            else grid[i+1][j+1]=0;
        }
    }
    for(int i=0; i<4; i++){
        int tx=x+dirx[i];
        int ty=y+diry[i];
        if(tx>=1 and tx<=n and ty>=1 and ty<=m and grid[tx][ty]!=0){
            mem(visit,false);
            visit[x][y][0][i]=true;
            dfs(tx,ty,0,i);
        }
    }
    if(flag) cout<<"YES"<<endl;
    else cout<<"NO"<<endl;
    return 0;
}
