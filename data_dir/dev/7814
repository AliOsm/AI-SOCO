#include<bits/stdc++.h>
using namespace std;
const int MAXN=110;
char MAP[4][MAXN];
bool book[4][MAXN][200];
int n;
struct node
{
	int x,y,pre;
	node(int _x,int _y,int _pre):x(_x),y(_y),pre(_pre){}
};

bool judge(int x,int y,int pre)
{
	if(x>=1&&x<=3)
	{
		if(MAP[x][y+pre]=='.'||y+pre>n)
		{
			return true;
		}
	}
	return false;
}

bool bfs(int i,int j)
{
	queue<node> Q;
	while(!Q.empty())
	{
		Q.pop();
	}
	Q.push(node(i,j,0));
	book[i][j][0]=true;
	while(!Q.empty())
	{
		node t=Q.front();
		Q.pop();
		int tx,ty,tpre;
		if(t.y>=n)
		{
			return true;
		}
		tpre=t.pre+2;
		tx=t.x+1,ty=t.y+1;
		if(judge(tx,ty,t.pre)&&judge(t.x,ty,t.pre))
		{
			if(judge(tx,ty,tpre)&&judge(tx,ty,tpre))
			{
				if(!book[tx][ty][tpre])
				{
					book[tx][ty][tpre]=true;
					Q.push(node(tx,ty,tpre));
				}
			}
		}
		tx=t.x-1,ty=t.y+1;
		if(judge(tx,ty,t.pre)&&judge(t.x,ty,t.pre))
		{
			if(judge(tx,ty,tpre)&&judge(tx,ty,tpre))
				if(!book[tx][ty][tpre])
				{
					book[tx][ty][tpre]=true;
					Q.push(node(tx,ty,tpre));
				}
		}
		tx=t.x,ty=t.y+1;
		if(judge(tx,ty,t.pre)&&judge(t.x,ty,t.pre))
		{
			if(judge(tx,ty,tpre)&&judge(tx,ty,tpre))
				if(!book[tx][ty][tpre])
				{
					book[tx][ty][tpre]=true;
					Q.push(node(tx,ty,tpre));
				}
		}
	}
	return false;
}

int main()
{
	int T,si,sj,k;
	scanf("%d",&T);
	while(T--)
	{
		scanf("%d%d",&n,&k);
		memset(MAP,0,sizeof(MAP));
		memset(book,false,sizeof(book));
		for(int i=1;i<=3;i++)
		{
			scanf("%s",MAP[i]+1);
		}
		for(int i=1;i<=3;i++)
		{
			for(int j=1;j<=n;j++)
			{
				if(MAP[i][j]=='s')
				{
					si=i,sj=j;
					break;
				}
			}
		}
		if(bfs(si,sj))
			printf("YES\n");
		else
			printf("NO\n");
	}
}