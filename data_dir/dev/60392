#pragma GCC omptimize("unroll-loops")
#pragma optimize("SEX_ON_THE_BEACH")
#pragma GCC optimize("no-stack-protector")
#pragma comment(linker, "/STACK:1000000000")
#include<bits/stdc++.h>

using namespace std;

//#define need_tree

#ifdef need_tree
    #include<ext/pb_ds/assoc_container.hpp>
    using namespace __gnu_pbds;
    template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#endif // need_tree

using ll = long long int;
using ull = unsigned long long int;
using dd = long double;
using ldd = long double;
using si = short int;
using pii = pair<int, int>;
using pll = pair<ll, ll>;

ll get_seed(string s)
{
    ll ans = 0;
    for (int i = 0; i < s.size(); ++i)
        ans += s[i];
    return ans;
}

int popcount(int x)
{
    return __builtin_popcount(x);
}

ll popcountll(ll x)
{
    return __builtin_popcount(x);
}

#define all(x) (x).begin(), (x).end()
#define ff first
#define ss second


// debug defines
#ifdef HOME
    int jjj;
    #define PO cout << "Pomelo" << endl;
    #define OL cout << "Oliva" << endl;
    #define debug(x) cout << #x << " " << x << endl;
    #define debug_p(x) cout << #x << " " << x.ff << " " << x.ss << endl;
    #define debug_v(x) cout << #x << " "; for (auto iii : x) cout << iii << " "; cout << endl;
    #define debug_vp(x) cout << #x << " "; for (auto ii : x) cout << '[' << ii.ff << " " << ii.ss << ']'; cout << endl;
    #define wait() cin >> jjj;
#else
    #define PO 0;
    #define OL 0;
    #define debug(x) 0;
    #define debug_p(x) 0;
    #define debug_vp(x) 0;
    #define debug_v(x) 0;
    #define debug_vp(x) 0;
    #define wait() 0;
#endif // HOME
// end of debug defines

vector<vector<int>> row, col;

void solve(int ii)
{
    int n, k;
    cin >> n >> k;
    row.resize(n, vector<int>(n));
    col.resize(n, vector<int>(n));
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < n; ++j)
        {
            char t;
            cin >> t;
            row[i][j] = col[i][j] = (t == 'B');
            if (i)
                col[i][j] += col[i - 1][j];
            if (j)
                row[i][j] += row[i][j - 1];
        }
    }
    vector<vector<pair<int, int>>> row_pl(n);
    vector<vector<pair<int, int>>> col_pl(n);

    //vzlom jopi

    int global_ans = 0;
    //srtoki
    for (int i = 0; i < n; ++i)
    {
        if (row[i].back() == 0)
        {
            ++global_ans;
            continue;
        }
        for (int j = 0; j + k - 1 < n; ++j)
        {
            if (row[i].back() == row[i][j + k - 1] && (j ? row[i][j - 1] : 0) == 0)
            {
                col_pl[j].push_back({max(0, i + 1 - k), 1});
                col_pl[j].push_back({i + 1, -1});
            }
        }
    }

    //stolbci
    for (int i = 0; i < n; ++i)
    {
        if (col[n - 1][i] == 0)
        {
            ++global_ans;
            continue;
        }
        for (int j = 0; j + k - 1 < n; ++j)
        {
            if (col[n - 1][i] == col[j + k - 1][i] && (j ? col[j - 1][i] : 0) == 0)
            {
                row_pl[j].push_back({max(0, i + 1 - k), 1});
                row_pl[j].push_back({i + 1, -1});
            }
        }
    }

    vector<vector<int>> cnt(n, vector<int>(n));
    for (int i = 0; i < n; ++i)
    {
        sort(all(row_pl[i]));
        int l = 0;
        int curr = 0;
        for (int j = 0; j < n; ++j)
        {
            while (l < row_pl[i].size() && row_pl[i][l].ff == j)
            {
                curr += row_pl[i][l].ss;
                ++l;
            }
            cnt[i][j] += curr;
        }
    }
    for (int i = 0; i < n; ++i)
    {
        sort(all(col_pl[i]));
        int l = 0;
        int curr = 0;
        for (int j = 0; j < n; ++j)
        {
            while (l < col_pl[i].size() && col_pl[i][l].ff == j)
            {
                curr += col_pl[i][l].ss;
                ++l;
            }
            cnt[j][i] += curr;
        }
    }
    int ans = 0;
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            ans = max(ans, cnt[i][j]);
    cout << ans + global_ans;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cout.tie(0);
    cin.tie(0);
    int t;
    t = 1;
    //cin >> t;
    for (int i = 0; i < t; ++i)
        solve(i);

    return 0;
}
